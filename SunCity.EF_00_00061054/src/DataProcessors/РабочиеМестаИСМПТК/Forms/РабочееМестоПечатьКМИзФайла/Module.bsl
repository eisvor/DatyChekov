
&НаСервере
&Вместо("ЗавершениеПолучитьДанныеПоГрупповымКодамМаркировки")
Процедура EF_00_00061054_ЗавершениеПолучитьДанныеПоГрупповымКодамМаркировки(РезультатВыполнения, Параметры)
	
	СоответствиеГрупповыхКМ = Новый Соответствие;
	МассивГрупповыхКМ		= Новый Массив;
	
	СтруктураОтбора   = Новый Структура("ВидУпаковки", Перечисления.ВидыУпаковокИСМПТК.Групповая);
	СтрокиГрупповыхКМ = ДанныеФайлов.НайтиСтроки(СтруктураОтбора);
		
	Для Каждого ГрупповаяКМ Из СтрокиГрупповыхКМ Цикл 
		СоответствиеГрупповыхКМ.Вставить(Новый Структура("КИ, ВипУпаковки", ГрупповаяКМ.КодИдентификации, ГрупповаяКМ.ВидУпаковки), ГрупповаяКМ.ПолучитьИдентификатор());
		МассивГрупповыхКМ.Добавить(ГрупповаяКМ.КодИдентификации);
	КонецЦикла;
		
	СтруктураОтбора = Новый Структура("ВидУпаковки", Перечисления.ВидыУпаковокИСМПТК.Логистическая);
	МассивЛогистическихКМ = ДанныеФайлов.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого ЛогистическаяКМ Из МассивЛогистическихКМ Цикл 
		Если Константы.ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК.Получить() Тогда
			//В этом случае придется проверять каждый транспортный код в нескольких форматах (с/без идентификатора 00)
			//Подготавливаем данные для проверки кода в разных форматах
			ИсходныйФормат = ЛогистическаяКМ.КодИдентификации;
			Если СтрДлина(ИсходныйФормат) = 20 Тогда
				ПреобразованныйКод = Сред(ИсходныйФормат, 3); //18-значный SSCC
				ДополнительныйКод  = Неопределено;
			ИначеЕсли СтрДлина(ИсходныйФормат) = 18 Тогда
				ПреобразованныйКод = "00"   + ИсходныйФормат;
				ДополнительныйКод  = "(00)" + ИсходныйФормат;
			Иначе
				ПреобразованныйКод = Неопределено;
				ДополнительныйКод  = Неопределено;
			КонецЕсли;
			
			МассивГрупповыхКМДляПроверки = Новый Массив();
			МассивГрупповыхКМДляПроверки.Добавить(ИсходныйФормат);
			Если НЕ ПреобразованныйКод = Неопределено Тогда
				МассивГрупповыхКМДляПроверки.Добавить(ПреобразованныйКод);
			КонецЕсли;
			Если НЕ ДополнительныйКод = Неопределено Тогда
				МассивГрупповыхКМДляПроверки.Добавить(ДополнительныйКод);
			КонецЕсли;
			
			//Начинаем опрос сервера по каждому из сформированных кодов для проверки наличия на сервере информации по составу
			Для Каждого КодSSCC Из МассивГрупповыхКМДляПроверки Цикл
				СтруктураЗапрос = Новый Структура("Штрихкод, ВидУпаковки, ВидПродукции, ФорматBase64", 
										КодSSCC, Перечисления.ВидыУпаковокИСМПТК.Логистическая, Перечисления.ВидыПродукцииИСМПТК.Обувная, Ложь); //общие параметры у кодов одинаковые
										
				ТокенАвторизации = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
				ДанныеПоГрупповомуКоду = ИнтеграцияИСМПТКВызовСервера.ЗапроситьДанныеПоКодуАгрегации(СтруктураЗапрос, Организация, ТокенАвторизации, Ложь);	
				
				Если Не ЗначениеЗаполнено(ДанныеПоГрупповомуКоду.ТекстОшибки) Тогда
					
					Если Не КодSSCC = ИсходныйФормат 
						И Не Константы.ДобавлятьИдентификаторКодамSSCCПриПечатиИСМПТК.Получить() Тогда //Если эта опция включена, то коды были преобразованы в момент чтения файла - их нужно сохранять независимо от сервера
						//Нужно заменить исходное значение кода на тот, который вернул сервер, т.е. на зарегистрированное значение кода
					    СтрокаВДокументе = ДанныеФайлов.НайтиСтроки(Новый Структура("КодИдентификации", ИсходныйФормат));
						СтрокаВДокументе[0].КодИдентификации = КодSSCC;
						СтрокаВДокументе[0].КодМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(КодSSCC);
						СтрокаВДокументе[0].EAN = КодSSCC;
						СоответствиеГрупповыхКМ.Вставить(Новый Структура("КИ, ВипУпаковки", КодSSCC, ЛогистическаяКМ.ВидУпаковки), ЛогистическаяКМ.ПолучитьИдентификатор());
						МассивГрупповыхКМ.Добавить(КодSSCC);
					Иначе
						СоответствиеГрупповыхКМ.Вставить(Новый Структура("КИ, ВипУпаковки", ИсходныйФормат, ЛогистическаяКМ.ВидУпаковки), ЛогистическаяКМ.ПолучитьИдентификатор());
						МассивГрупповыхКМ.Добавить(ИсходныйФормат);
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СоответствиеГрупповыхКМ.Вставить(Новый Структура("КИ, ВипУпаковки", ЛогистическаяКМ.КодИдентификации, ЛогистическаяКМ.ВидУпаковки), ЛогистическаяКМ.ПолучитьИдентификатор());
			МассивГрупповыхКМ.Добавить(ЛогистическаяКМ.КодИдентификации);
		КонецЕсли;		
	КонецЦикла;
			
	ТокенАвторизации = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
	СтруктураКодов   = Новый Структура("МассивКодов", МассивГрупповыхКМ);
	ДанныеПоГрупповомуКоду = ИнтеграцияИСМПТК.ЗапроситьДанныеОбАгрегацииСпискаКМ(СтруктураКодов, Организация, ТокенАвторизации);
	
	Если ЗначениеЗаполнено(ДанныеПоГрупповомуКоду.ТекстОшибки) Тогда
		
		ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаЗапросаСоставаУпаковкиПоДаннымСервера();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
				
	Иначе
		
		Для Каждого ОбновляемыйГрупповойКод Из СоответствиеГрупповыхКМ Цикл   
			
			СтруктураКода = ИнтеграцияИСМПТКВызовСервера.ПолучитьИнформациюПоГрупповомуКоду(ДанныеПоГрупповомуКоду, ОбновляемыйГрупповойКод.Ключ.КИ, ОбновляемыйГрупповойКод.Ключ.ВипУпаковки);
			
			GTIN 			   = СтруктураКода.GTIN;
			GTINВерхнегоУровня = СтруктураКода.GTINВерхнегоУровня;
			EAN                = СтруктураКода.EAN;
			EANВерхнегоУровня  = СтруктураКода.EANВерхнегоУровня;
			Номенклатура       = СтруктураКода.Номенклатура;
			Характеристика 	   = СтруктураКода.Характеристика;
			ВидПродукции 	   = СтруктураКода.ВидПродукции;
			Количество		   = СтруктураКода.Количество;
			ЭтоГрупповаяУпаковка = ОбновляемыйГрупповойКод.Ключ.ВипУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая");
			
			Если ЗначениеЗаполнено(GTIN) Тогда
				
				СтрокаКМ = ДанныеФайлов.НайтиПоИдентификатору(ОбновляемыйГрупповойКод.Значение);
				Если Не ЗначениеЗаполнено(СтрокаКМ.GTIN) Тогда
					СтрокаКМ.GTIN = GTIN;
					СтрокаКМ.EAN  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(СтрокаКМ.GTIN);
				КонецЕсли;
				СтрокаКМ.Номенклатура   = Номенклатура;
				СтрокаКМ.Характеристика = Характеристика;
				СтрокаКМ.ВидПродукции   = ВидПродукции;
				СтрокаКМ.Шаблон 		= ПолучитьШаблонКМ(ВидПродукции);
				
			Иначе
				
				ТекстОшибки = НСтр("ru = 'Для кода %1 не удалось получить данные с сервера. Возможно, у организации нет доступа к просмотру содержимого этой агрегации на стороне ИС МПТ или упаковка уже расформирована.'");
				ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, ОбновляемыйГрупповойКод.Ключ.КИ);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
				
			КонецЕсли;
			
		КонецЦикла;
	 
	КонецЕсли;
	
КонецПроцедуры
