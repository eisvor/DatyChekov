
&Вместо("ЗагрузитьКодыМаркировки")
Функция EF_00_00061054_ЗагрузитьКодыМаркировки(ПараметрыСканирования, ТаблицаПолученныхКодов, МассивОшибок, ТокенАвторизации, СведенияОВыбранныхДокументах, НеПроверятьКорректностьКМ)
	
	НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();  
	
	Для Каждого ДокументПользователя Из СведенияОВыбранныхДокументах Цикл
		
		ОбщееКоличествоДокументов = ДокументПользователя.ОбщееКоличество;
		ИмяДокумента	 = ДокументПользователя.ИмяДокумента;
		ИсходныеДанные   = ДокументПользователя.МассивКодов;
		
		Если Не ТипЗнч(ИсходныеДанные) = Тип("Массив") Тогда
			ДанныеДляРазбора = Новый Массив;
			ДанныеДляРазбора.Добавить(ИсходныеДанные);
		Иначе 
			ДанныеДляРазбора = ИсходныеДанные;
		КонецЕсли;
		
		Для Каждого КодМаркировкиBase64 Из ДанныеДляРазбора Цикл
			
			ИсхШтрихкодBase64 = "";
			КодИдентификации  = "";
			СтруктураКодовМаркировки = Новый Структура();
			Если Не НеПроверятьКорректностьКМ Тогда
				ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(КодМаркировкиBase64, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
			Иначе
				//Применяется только в Уведомлении о выводе (ЦЭДМ) для возможности списания некорректно сгенерированных КМ. 
				//В случае установки опции преобразуем КМ до КИ путем обрезки лишних символов, далее работаем с КИ. 
				Если ЗначениеЗаполнено(КодМаркировкиBase64.ШтрихКод) Тогда
					ИсхШтрихкод = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(КодМаркировкиBase64.ШтрихКод);
					Если СтрДлина(ИсхШтрихкод) > 20 Тогда 
						ПозицияРазделителяGS1 = СтрНайти(ИсхШтрихкод, РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.РазделительGS1());
						Если Не ПозицияРазделителяGS1 = 0 Тогда
							КодИдентификации = Лев(ИсхШтрихкод, ПозицияРазделителяGS1-1);
						Иначе
							КодИдентификации = Лев(ИсхШтрихкод, 31); 
						КонецЕсли;
					Иначе 
						КодИдентификации = ИсхШтрихкод;
					КонецЕсли;
					ИсхШтрихкодBase64 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(КодИдентификации);
					КодМаркировкиBase64.ШтрихКод = ИсхШтрихкодBase64; 
					СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(КодМаркировкиBase64);
				КонецЕсли;
				ДанныеРазбора = Неопределено;
			КонецЕсли;
			
			Если ДанныеРазбора = Неопределено 
				И Не НеПроверятьКорректностьКМ Тогда
				Если Не ЗначениеЗаполнено(КодМаркировкиBase64.ШтрихКод) Тогда
					ТекстОшибки     = НСтр("ru = 'В файле %1 найдена пустая строка №%2.'");
					ТекстОшибки     = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, ДанныеДляРазбора.Найти(КодМаркировкиBase64)+1, ?(Не ОбщееКоличествоДокументов = 1, ИмяДокумента, ""));
				Иначе
					Если Не НеПроверятьКорректностьКМ Тогда
						ТекстОшибки  = НСтр("ru = 'Не удалось разобрать код маркировки %1 в строке №%2.'") 
						+ Символы.ПС 
						+ НСтр("ru = 'Он не был добавлен в документ.'");
						НеКорректныйКод = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(КодМаркировкиBase64.ШтрихКод);
						НеКорректныйКод = СтрЗаменить(НеКорректныйКод, Символ(29), "");
						ТекстОшибки     = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, НеКорректныйКод, ДанныеДляРазбора.Найти(КодМаркировкиBase64)+1);
					КонецЕсли;
				КонецЕсли;
				МассивОшибок.Добавить(ТекстОшибки);
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда
				//Для Увед.о выводе из оборота ЦЭДМ, если включена опция не проверять КМ по формату, но при этом полученный КИ вызвал ошибку
				МассивОшибок.Добавить(СтруктураКодовМаркировки);
				Продолжить;
			КонецЕсли;
			
			СтрокаКодыМаркировки = ТаблицаПолученныхКодов.Добавить();
			
			Если НеПроверятьКорректностьКМ Тогда
				СтрокаКодыМаркировки.КодМаркировки 		= СтруктураКодовМаркировки.КодМаркировки;
				СтрокаКодыМаркировки.GTIN 				= СтруктураКодовМаркировки.GTIN;
				СтрокаКодыМаркировки.GTINВерхнегоУровня = СтруктураКодовМаркировки.GTINВерхнегоУровня;
				СтрокаКодыМаркировки.EAN 				= СтруктураКодовМаркировки.EAN;
				СтрокаКодыМаркировки.КодИдентификации 	= СтруктураКодовМаркировки.КодИдентификации;
				СтрокаКодыМаркировки.ВидУпаковки		= СтруктураКодовМаркировки.ВидУпаковки;
				СтрокаКодыМаркировки.ВидПродукции		= СтруктураКодовМаркировки.ВидПродукции;
				СтрокаКодыМаркировки.Количество			= 1;
				
				ДанныеНоменклатуры = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, СтруктураКодовМаркировки.EAN);
				Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
					Номенклатура   = ДанныеНоменклатуры.Номенклатура;
					Характеристика = ДанныеНоменклатуры.Характеристика;
				Иначе
					Номенклатура   = Неопределено;
					Характеристика = Неопределено;
				КонецЕсли;
				СтрокаКодыМаркировки.Номенклатура   	= Номенклатура;
				СтрокаКодыМаркировки.Характеристика		= Характеристика;				
				Продолжить;
			КонецЕсли;			
			
			Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Потребительская 
				Или (ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Групповая
				И Не Константы.АвтоОпределениеЛогистическихКодовИСМПТК.Получить()) Тогда 
				
				GTINВерхнегоУровня = ДанныеРазбора.СоставКодаМаркировки.GTIN;
				GTIN = ?(ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Групповая, "", ДанныеРазбора.СоставКодаМаркировки.GTIN);
				
				//Дополнение данных по номенклатуре
				Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Потребительская Тогда
					ДанныеНоменклатуры = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, ДанныеРазбора.СоставКодаМаркировки.EAN);
				Иначе
					ДанныеНоменклатуры = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(GTINВерхнегоУровня));
				КонецЕсли;
				
				Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
					Номенклатура   = ДанныеНоменклатуры.Номенклатура;
					Характеристика = ДанныеНоменклатуры.Характеристика;
				Иначе
					Номенклатура   = ДанныеНоменклатуры;
					Характеристика = ДанныеНоменклатуры;
				КонецЕсли;
				
				ВидПродукции = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);
				
				СтрокаКодыМаркировки.КодМаркировки 		= КодМаркировкиBase64.ШтрихКод;
				СтрокаКодыМаркировки.GTIN 				= GTIN;
				СтрокаКодыМаркировки.GTINВерхнегоУровня = GTINВерхнегоУровня;
				СтрокаКодыМаркировки.EAN 				= ДанныеРазбора.СоставКодаМаркировки.EAN;
				СтрокаКодыМаркировки.КодИдентификации 	= ДанныеРазбора.НормализованныйКодМаркировки;
				СтрокаКодыМаркировки.ВидУпаковки		= ДанныеРазбора.ВидУпаковки;
				СтрокаКодыМаркировки.ВидПродукции		= ВидПродукции;
				СтрокаКодыМаркировки.Количество			= 1;
				СтрокаКодыМаркировки.Номенклатура   	= Номенклатура;
				СтрокаКодыМаркировки.Характеристика		= Характеристика;
				
			Иначе
				
				ВидУпаковки = ДанныеРазбора.ВидУпаковки;
				Организация = ПараметрыСканирования.Владелец;
				
				Если Константы.АвтоОпределениеЛогистическихКодовИСМПТК.Получить() Тогда
					//Включен автоматический запрос данных с сервера
					Если Не ТокенАвторизации = Неопределено Тогда 
						
						//Поддержка двойного формата кодов SSCC
						УчитыватьДвойнойФорматКодовSSCC = Константы.ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК.Получить();
						Если УчитыватьДвойнойФорматКодовSSCC 
							И ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Логистическая Тогда
							
							КМПредварительный = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(КодМаркировкиBase64.ШтрихКод);
							
							//Формируем список SSCC в разных форматах
							Если СтрДлина(КМПредварительный) = 20 Тогда
								ПреобразованныйКод = Сред(КМПредварительный, 3); //18-значный SSCC
								ДополнительныйКод  = Неопределено;
							ИначеЕсли СтрДлина(КМПредварительный) = 18 Тогда
								ПреобразованныйКод = "00"   + КМПредварительный;
								ДополнительныйКод  = "(00)" + КМПредварительный;
							Иначе
								ПреобразованныйКод = Неопределено;
								ДополнительныйКод  = Неопределено;
							КонецЕсли;
							
							МассивКМДляПроверки = Новый Массив();
							МассивКМДляПроверки.Добавить(КодМаркировкиBase64.ШтрихКод);
							Если НЕ ПреобразованныйКод = Неопределено Тогда
								МассивКМДляПроверки.Добавить(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(ПреобразованныйКод));
							КонецЕсли;
							Если НЕ ДополнительныйКод = Неопределено Тогда
								МассивКМДляПроверки.Добавить(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(ДополнительныйКод));
							КонецЕсли;
							
							КМ = "";
							//Начинаем опрос сервера по каждому из сформированных кодов для проверки
							Для Каждого КодSSCC Из МассивКМДляПроверки Цикл
								СтруктураЗапрос = Новый Структура("Штрихкод, ВидУпаковки, ФорматBase64", КодSSCC, ВидУпаковки, Истина);
								ДанныеПоГрупповомуКоду = ИнтеграцияИСМПТКВызовСервера.ЗапроситьДанныеПоКодуАгрегации(СтруктураЗапрос, Организация, ТокенАвторизации);	
								
								Если Не ЗначениеЗаполнено(ДанныеПоГрупповомуКоду.ТекстОшибки) Тогда
									//Если по коду вернулась информация, значит нужно использовать этот формат для заполнения таблицы документа
									КМ = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(КодSSCC);
									Прервать;
								КонецЕсли;
							КонецЦикла;
							КМ = ?(Не ЗначениеЗаполнено(КМ), КМПредварительный, КМ);
							
						Иначе
							СтруктураЗапрос = Новый Структура("Штрихкод, ВидУпаковки, ФорматBase64", КодМаркировкиBase64.ШтрихКод, ВидУпаковки, Истина);
							ДанныеПоГрупповомуКоду = ИнтеграцияИСМПТКВызовСервера.ЗапроситьДанныеПоКодуАгрегации(СтруктураЗапрос, Организация, ТокенАвторизации);
						КонецЕсли;
						//////
						
						Если Не ЗначениеЗаполнено(ДанныеПоГрупповомуКоду.ТекстОшибки) Тогда
							
							СтруктураКода = ИнтеграцияИСМПТКВызовСервера.ПолучитьИнформациюПоГрупповомуКоду(ДанныеПоГрупповомуКоду, КодМаркировкиBase64.ШтрихКод, ВидУпаковки, Истина);
							
							Если ДанныеРазбора.Свойство("СоставКодаМаркировки")
								И ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN") Тогда
								GTINИзРазбора = ДанныеРазбора.СоставКодаМаркировки.GTIN;
							Иначе
								GTINИзРазбора = "";
							КонецЕсли;
							
							GTIN 			   = СтруктураКода.GTIN;
							GTINВерхнегоУровня = ?(ЗначениеЗаполнено(СтруктураКода.GTINВерхнегоУровня), СтруктураКода.GTINВерхнегоУровня, GTINИзРазбора);
							EAN                = СтруктураКода.EAN;
							Номенклатура       = СтруктураКода.Номенклатура;
							Характеристика 	   = СтруктураКода.Характеристика;
							ВидПродукции 	   = СтруктураКода.ВидПродукции;
							Количество		   = СтруктураКода.Количество;
							
							Если Не ЗначениеЗаполнено(GTIN) Тогда
								ТекстОшибкиЗапросаСостава = НСтр("ru = 'Для кода %1 не удалось получить данные с сервера. Возможно, у организации нет доступа к просмотру содержимого этой агрегации на стороне ИС МПТ или упаковка уже расформирована.'");
								ТекстОшибкиЗапросаСостава = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибкиЗапросаСостава, ДанныеРазбора.НормализованныйКодМаркировки);
								ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибкиЗапросаСостава);
							КонецЕсли;
														
							Если УчитыватьДвойнойФорматКодовSSCC 
								И ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Логистическая Тогда
								СтрокаКодыМаркировки.КодМаркировки 	  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(КМ);
								СтрокаКодыМаркировки.КодИдентификации = КМ;
							Иначе
								СтрокаКодыМаркировки.КодМаркировки 	  = КодМаркировкиBase64.ШтрихКод;
								СтрокаКодыМаркировки.КодИдентификации = ДанныеРазбора.НормализованныйКодМаркировки;
							КонецЕсли;
							
							СтрокаКодыМаркировки.GTIN 			  = GTIN;
							СтрокаКодыМаркировки.EAN 			  = EAN;
							СтрокаКодыМаркировки.ВидУпаковки	  = ВидУпаковки;
							СтрокаКодыМаркировки.ВидПродукции	  = ВидПродукции;
							СтрокаКодыМаркировки.Количество		  = Количество;
							СтрокаКодыМаркировки.Номенклатура	  = Номенклатура;
							СтрокаКодыМаркировки.Характеристика	  = Характеристика;
							СтрокаКодыМаркировки.GTINВерхнегоУровня = GTINВерхнегоУровня;
							
						Иначе 
							ЗаполнитьСтрокаКодыМаркировкиЕслиОшибка(СтрокаКодыМаркировки, КодМаркировкиBase64, ДанныеРазбора, ВидУпаковки);
						КонецЕсли;
					Иначе 
						ЗаполнитьСтрокаКодыМаркировкиЕслиОшибка(СтрокаКодыМаркировки, КодМаркировкиBase64, ДанныеРазбора, ВидУпаковки);
					КонецЕсли;
				Иначе
					//Заполняем коды транспортных упаковок без запроса к серверу
					СтрокаКодыМаркировки.КодМаркировки 		= КодМаркировкиBase64.ШтрихКод;
					СтрокаКодыМаркировки.GTIN 				= "";
					СтрокаКодыМаркировки.GTINВерхнегоУровня = "";
					СтрокаКодыМаркировки.EAN 				= "";
					СтрокаКодыМаркировки.КодИдентификации 	= ДанныеРазбора.НормализованныйКодМаркировки;
					СтрокаКодыМаркировки.ВидУпаковки		= ДанныеРазбора.ВидУпаковки;
					СтрокаКодыМаркировки.ВидПродукции		= "";
					СтрокаКодыМаркировки.Количество			= 1;
					СтрокаКодыМаркировки.Номенклатура   	= "";
					СтрокаКодыМаркировки.Характеристика		= "";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецФункции

&Вместо("ЗагрузитьКодыМаркировкиИзТСД")
Функция EF_00_00061054_ЗагрузитьКодыМаркировкиИзТСД(ИсходныеДанные, ПараметрыСканирования, ТаблицаПолученныхКодов, МассивОшибок, ТокенАвторизации)
	
	НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();  
	                                                                                                            
	Если Не ТипЗнч(ИсходныеДанные) = Тип("Массив") Тогда
		ДанныеДляРазбора = Новый Массив;
		ДанныеДляРазбора.Добавить(ИсходныеДанные);
	Иначе 
		ДанныеДляРазбора = ИсходныеДанные;
	КонецЕсли;
	
	Для Каждого КодМаркировкиBase64 Из ДанныеДляРазбора Цикл
		
	ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(КодМаркировкиBase64, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
			
			Если ДанныеРазбора = Неопределено Тогда 
				Если Не ЗначениеЗаполнено(КодМаркировкиBase64.ШтрихКод) Тогда
					ТекстОшибки     = НСтр("ru = 'В загружаемых данных найдена пустая строка №%1.'");
					ТекстОшибки     = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, ДанныеДляРазбора.Найти(КодМаркировкиBase64)+1);
				Иначе
					ТекстОшибки     = НСтр("ru = 'Не удалось разобрать код маркировки %1 в строке №%2.'") 
									+ Символы.ПС 
									+ НСтр("ru = 'Он не был добавлен в документ.'");
					НеКорректныйКод = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(КодМаркировкиBase64.ШтрихКод);
					НеКорректныйКод = СтрЗаменить(НеКорректныйКод, Символ(29), "");
					ТекстОшибки     = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, НеКорректныйКод, ДанныеДляРазбора.Найти(КодМаркировкиBase64)+1);
				КонецЕсли;
				МассивОшибок.Добавить(ТекстОшибки);
				Продолжить;
			КонецЕсли;
			
			СтрокаКодыМаркировки = ТаблицаПолученныхКодов.Добавить();
			Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Потребительская 
				Или (ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Групповая
				И Не Константы.АвтоОпределениеЛогистическихКодовИСМПТК.Получить()) Тогда 
				
				GTINВерхнегоУровня = ДанныеРазбора.СоставКодаМаркировки.GTIN;
				GTIN = ?(ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Групповая, "", ДанныеРазбора.СоставКодаМаркировки.GTIN);
				
				//Дополнение данных по номенклатуре
				Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Потребительская Тогда
					ДанныеНоменклатуры = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, ДанныеРазбора.СоставКодаМаркировки.EAN);
				Иначе
					ДанныеНоменклатуры = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(GTINВерхнегоУровня));
				КонецЕсли;
				
				Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
					Номенклатура   = ДанныеНоменклатуры.Номенклатура;
					Характеристика = ДанныеНоменклатуры.Характеристика;
				Иначе
					Номенклатура   = ДанныеНоменклатуры;
					Характеристика = ДанныеНоменклатуры;
				КонецЕсли;
				
				ВидПродукции = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);
				
				СтрокаКодыМаркировки.КодМаркировки 		= КодМаркировкиBase64.ШтрихКод;
				СтрокаКодыМаркировки.GTIN 				= GTIN;
				СтрокаКодыМаркировки.GTINВерхнегоУровня = GTINВерхнегоУровня;
				СтрокаКодыМаркировки.EAN 				= ДанныеРазбора.СоставКодаМаркировки.EAN;
				СтрокаКодыМаркировки.КодИдентификации 	= ДанныеРазбора.НормализованныйКодМаркировки;
				СтрокаКодыМаркировки.ВидУпаковки		= ДанныеРазбора.ВидУпаковки;
				СтрокаКодыМаркировки.ВидПродукции		= ВидПродукции;
				СтрокаКодыМаркировки.Количество			= 1;
				СтрокаКодыМаркировки.Номенклатура   	= Номенклатура;
				СтрокаКодыМаркировки.Характеристика		= Характеристика;
				
			Иначе
				
				ВидУпаковки = ДанныеРазбора.ВидУпаковки;
				Организация = ПараметрыСканирования.Владелец;
				
				Если Константы.АвтоОпределениеЛогистическихКодовИСМПТК.Получить() Тогда
					//Включен автоматический запрос данных с сервера
					Если Не ТокенАвторизации = Неопределено Тогда 
						
						//Поддержка двойного формата кодов SSCC
						УчитыватьДвойнойФорматКодовSSCC = Константы.ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК.Получить();
						Если УчитыватьДвойнойФорматКодовSSCC Тогда
							
							КМПредварительный = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(КодМаркировкиBase64.ШтрихКод);
							
							//Формируем список SSCC в разных форматах
							Если СтрДлина(КМПредварительный) = 20 Тогда
								ПреобразованныйКод = Сред(КМПредварительный, 3); //18-значный SSCC
								ДополнительныйКод  = Неопределено;
							ИначеЕсли СтрДлина(КМПредварительный) = 18 Тогда
								ПреобразованныйКод = "00"   + КМПредварительный;
								ДополнительныйКод  = "(00)" + КМПредварительный;
							Иначе
								ПреобразованныйКод = Неопределено;
								ДополнительныйКод  = Неопределено;
							КонецЕсли;
							
							МассивКМДляПроверки = Новый Массив();
							МассивКМДляПроверки.Добавить(КодМаркировкиBase64.ШтрихКод);
							Если НЕ ПреобразованныйКод = Неопределено Тогда
								МассивКМДляПроверки.Добавить(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(ПреобразованныйКод));
							КонецЕсли;
							Если НЕ ДополнительныйКод = Неопределено Тогда
								МассивКМДляПроверки.Добавить(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(ДополнительныйКод));
							КонецЕсли;
							
							КМ = "";
							//Начинаем опрос сервера по каждому из сформированных кодов для проверки
							Для Каждого КодSSCC Из МассивКМДляПроверки Цикл
								СтруктураЗапрос = Новый Структура("Штрихкод, ВидУпаковки, ФорматBase64", КодSSCC, ВидУпаковки, Истина);
								ДанныеПоГрупповомуКоду = ИнтеграцияИСМПТКВызовСервера.ЗапроситьДанныеПоКодуАгрегации(СтруктураЗапрос, Организация, ТокенАвторизации);	
								
								Если Не ЗначениеЗаполнено(ДанныеПоГрупповомуКоду.ТекстОшибки) Тогда
									//Если по коду вернулась информация, значит нужно использовать этот формат для заполнения таблицы документа
									КМ = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(КодSSCC);
									Прервать;
								КонецЕсли;
							КонецЦикла;
							КМ = ?(Не ЗначениеЗаполнено(КМ), КМПредварительный, КМ);
							
						Иначе
							СтруктураЗапрос = Новый Структура("Штрихкод, ВидУпаковки, ФорматBase64", КодМаркировкиBase64.ШтрихКод, ВидУпаковки, Истина);
							ДанныеПоГрупповомуКоду = ИнтеграцияИСМПТКВызовСервера.ЗапроситьДанныеПоКодуАгрегации(СтруктураЗапрос, Организация, ТокенАвторизации);
						КонецЕсли;
						//////
						
						Если Не ЗначениеЗаполнено(ДанныеПоГрупповомуКоду.ТекстОшибки) Тогда
							
							СтруктураКода = ИнтеграцияИСМПТКВызовСервера.ПолучитьИнформациюПоГрупповомуКоду(ДанныеПоГрупповомуКоду, КМ, ВидУпаковки);
							
							Если ДанныеРазбора.Свойство("СоставКодаМаркировки")
								И ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN") Тогда
								GTINИзРазбора = ДанныеРазбора.СоставКодаМаркировки.GTIN;
							Иначе
								GTINИзРазбора = "";
							КонецЕсли;
							
							GTIN 			   = СтруктураКода.GTIN;
							GTINВерхнегоУровня = ?(ЗначениеЗаполнено(СтруктураКода.GTINВерхнегоУровня), СтруктураКода.GTINВерхнегоУровня, GTINИзРазбора);
							EAN                = СтруктураКода.EAN;
							Номенклатура       = СтруктураКода.Номенклатура;
							Характеристика 	   = СтруктураКода.Характеристика;
							ВидПродукции 	   = СтруктураКода.ВидПродукции;
							Количество		   = СтруктураКода.Количество;
													
							Если УчитыватьДвойнойФорматКодовSSCC Тогда
								СтрокаКодыМаркировки.КодМаркировки 	  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(КМ);
								СтрокаКодыМаркировки.КодИдентификации = КМ;
							Иначе
								СтрокаКодыМаркировки.КодМаркировки 	  = КодМаркировкиBase64.ШтрихКод;
								СтрокаКодыМаркировки.КодИдентификации = ДанныеРазбора.НормализованныйКодМаркировки;
							КонецЕсли;
							
							СтрокаКодыМаркировки.GTIN 			  = GTIN;
							СтрокаКодыМаркировки.EAN 			  = EAN;
							СтрокаКодыМаркировки.ВидУпаковки	  = ВидУпаковки;
							СтрокаКодыМаркировки.ВидПродукции	  = ВидПродукции;
							СтрокаКодыМаркировки.Количество		  = Количество;
							СтрокаКодыМаркировки.Номенклатура	  = Номенклатура;
							СтрокаКодыМаркировки.Характеристика	  = Характеристика;
							СтрокаКодыМаркировки.GTINВерхнегоУровня = GTINВерхнегоУровня;
							
						Иначе 
							
							ЗаполнитьСтрокаКодыМаркировкиЕслиОшибка(СтрокаКодыМаркировки, КодМаркировкиBase64, ДанныеРазбора, ВидУпаковки);
							
						КонецЕсли;
						
					Иначе 
						
						ЗаполнитьСтрокаКодыМаркировкиЕслиОшибка(СтрокаКодыМаркировки, КодМаркировкиBase64, ДанныеРазбора, ВидУпаковки);
						
					КонецЕсли;
				Иначе
					//Заполняем коды транспортных упаковок без запроса к серверу
					СтрокаКодыМаркировки.КодМаркировки 		= КодМаркировкиBase64.ШтрихКод;
					СтрокаКодыМаркировки.GTIN 				= "";
					СтрокаКодыМаркировки.GTINВерхнегоУровня = "";
					СтрокаКодыМаркировки.EAN 				= "";
					СтрокаКодыМаркировки.КодИдентификации 	= ДанныеРазбора.НормализованныйКодМаркировки;
					СтрокаКодыМаркировки.ВидУпаковки		= ДанныеРазбора.ВидУпаковки;
					СтрокаКодыМаркировки.ВидПродукции		= "";
					СтрокаКодыМаркировки.Количество			= 1;
					СтрокаКодыМаркировки.Номенклатура   	= "";
					СтрокаКодыМаркировки.Характеристика		= "";
				КонецЕсли;
			КонецЕсли;
		
	КонецЦикла;
		
КонецФункции
