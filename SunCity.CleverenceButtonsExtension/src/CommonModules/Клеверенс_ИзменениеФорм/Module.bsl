#Область ПрограммноеИзменениеФорм

// Изменяет форму справочников
//
// Форма 					- Форма - изменяемая форма
//
Процедура ИзменениеФорм(Форма) Экспорт
		
	ИмяФормы = Форма.ИмяФормы;
	
	МассивЧастейИмениФормы = Клеверенс_ОбщегоНазначенияКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФормы, ".");
	
	Если МассивЧастейИмениФормы.Количество() = 4 Тогда
		
		Если МассивЧастейИмениФормы[0] = "Справочник" Тогда
			
			Клеверенс_ИзменениеФорм.ИзменениеФормСправочников(Форма, МассивЧастейИмениФормы);
			
		ИначеЕсли МассивЧастейИмениФормы[0] = "Документ" Тогда
			
			Клеверенс_ИзменениеФорм.ИзменениеФормДокументов(Форма, МассивЧастейИмениФормы);
			
		ИначеЕсли МассивЧастейИмениФормы[0] = "Обработка" Тогда
			
			Клеверенс_ИзменениеФорм.ИзменениеФормОбработок(Форма, МассивЧастейИмениФормы);

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Изменяет форму справочников
//
// Форма 					- Форма - изменяемая форма
// МассивЧастейИмениФормы 	- Массив - массив, содержащий части имени формы, разделенными точками
//
Процедура ИзменениеФормСправочников(Форма, МассивЧастейИмениФормы) Экспорт
	
	ИмяОбъектаФормы = МассивЧастейИмениФормы[0] + "." + МассивЧастейИмениФормы[1];
	
	Если МассивЧастейИмениФормы[3] = "ФормаЭлемента"
		Или СтрНайти(МассивЧастейИмениФормы[3], "ФормаСписка") > 0 Тогда
		
		ЭтоФормаСписка = СтрНайти(МассивЧастейИмениФормы[3], "ФормаСписка") > 0;
		
		МассивИменСправочниковВыгрузки = Клеверенс_ОбщегоНазначенияСервер.ПолучитьМассивИменОбъектовПоВидуОбмена("ВыгрузкаСправочников");
		
		Если МассивИменСправочниковВыгрузки.Найти(ИмяОбъектаФормы) <> Неопределено Тогда
			
			ИмяКоманды 	= "Клеверенс_ВыгрузитьСправочники";
			Заголовок 	= "Выгрузить в Mobile SMARTS";
			
			Если ПолучитьЭлементФормы(Форма, ИмяКоманды) = Неопределено Тогда
				
				НоваяКоманда_ВыгрузитьСправочник = Клеверенс_ИзменениеФорм.ДобавитьНовуюКоманду(
					Форма,
					ИмяКоманды,
					"Подключаемый_ВыполнитьКоманду",
					Заголовок,);
					
				ЭлементРодитель = Клеверенс_ОбщегоНазначенияСервер.ПолучитьРодительскийЭлементДляКнопкиОбмена(Форма, ЭтоФормаСписка);
				
				НоваяКнопка_ВыгрузитьДокумент = Клеверенс_ИзменениеФорм.ДобавитьНовуюКнопку(
					Форма,,
					ИмяКоманды,
					НоваяКоманда_ВыгрузитьСправочник,
					ЭлементРодитель,
					Заголовок);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Изменяет форму документов
//
// Форма 					- Форма - изменяемая форма
// МассивЧастейИмениФормы 	- Массив - массив, содержащий части имени формы, разделенными точками
//
Процедура ИзменениеФормДокументов(Форма, МассивЧастейИмениФормы) Экспорт
	
	ИмяОбъектаФормы = МассивЧастейИмениФормы[0] + "." + МассивЧастейИмениФормы[1];
	
	Если СтрНайти(МассивЧастейИмениФормы[3], "ФормаДокумента") > 0
		Или СтрНайти(МассивЧастейИмениФормы[3], "ФормаСписка") > 0 Тогда
		
		ЭтоФормаСписка = СтрНайти(МассивЧастейИмениФормы[3], "ФормаСписка") > 0;
		
		МассивИменДокументовЗагрузки = Клеверенс_ОбщегоНазначенияСервер.ПолучитьМассивИменОбъектовПоВидуОбмена("ЗагрузкаДокументов");
		МассивИменДокументовВыгрузки = Клеверенс_ОбщегоНазначенияСервер.ПолучитьМассивИменОбъектовПоВидуОбмена("ВыгрузкаДокументов");
		
		Если МассивИменДокументовЗагрузки.Найти(ИмяОбъектаФормы) <> Неопределено Тогда
			
			ВывестиКнопкиЗагрузкиДокумента(Форма, ЭтоФормаСписка);
			
		КонецЕсли;
		
		Если МассивИменДокументовВыгрузки.Найти(ИмяОбъектаФормы) <> Неопределено Тогда
			
			ВывестиКнопкиВыгрузкиДокумента(Форма, ЭтоФормаСписка);

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Изменяет форму обработок
//
// Форма 					- Форма - изменяемая форма
// МассивЧастейИмениФормы 	- Массив - массив, содержащий части имени формы, разделенными точками
//
Процедура ИзменениеФормОбработок(Форма, МассивЧастейИмениФормы) Экспорт
	
	ИмяФормы = Форма.ИмяФормы;
	
	Если СтрНайти(МассивЧастейИмениФормы[3], "Список") > 0 Тогда
		// Анализируем только формы, в имени которых есть "Список", чтобы отсечь остальные формы
		// Например, кнопки нужны в форме "Обработка.ЖурналДокументовПродажи.Форма.СписокДокументов"
		
		ЭтоФормаСписка = Истина;
		
		МассивИменФормЗагрузкиДокументов = Клеверенс_ОбщегоНазначенияСервер.ПолучитьМассивИменОбъектовПоВидуОбмена("ИменаФормЗагрузкиДокументов");
		МассивИменФормВыгрузкиДокументов = Клеверенс_ОбщегоНазначенияСервер.ПолучитьМассивИменОбъектовПоВидуОбмена("ИменаФормВыгрузкиДокументов");
		
		Если МассивИменФормЗагрузкиДокументов.Найти(ИмяФормы) <> Неопределено Тогда
			
			ВывестиКнопкиЗагрузкиДокумента(Форма, ЭтоФормаСписка);
			
		КонецЕсли;
		
		Если МассивИменФормВыгрузкиДокументов.Найти(ИмяФормы) <> Неопределено Тогда
			
			ВывестиКнопкиВыгрузкиДокумента(Форма, ЭтоФормаСписка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиКнопкиЗагрузкиДокумента(Форма, ЭтоФормаСписка)
		
	ИмяКоманды 	= "Клеверенс_ЗагрузитьИзТСД";
	Заголовок 	= "Загрузить из Mobile SMARTS";
	
	Если ПолучитьЭлементФормы(Форма, ИмяКоманды) = Неопределено Тогда
		
		НоваяКоманда = Клеверенс_ИзменениеФорм.ДобавитьНовуюКоманду(
			Форма,
			ИмяКоманды,
			"Подключаемый_ВыполнитьКоманду",
			Заголовок,);
		
		ЭлементРодитель = Клеверенс_ОбщегоНазначенияСервер.ПолучитьРодительскийЭлементДляКнопкиОбмена(Форма, ЭтоФормаСписка);
		
		НоваяКнопка = Клеверенс_ИзменениеФорм.ДобавитьНовуюКнопку(
			Форма,,
			ИмяКоманды,
			НоваяКоманда,
			ЭлементРодитель,
			Заголовок);
		
	КонецЕсли;

КонецПроцедуры

Процедура ВывестиКнопкиВыгрузкиДокумента(Форма, ЭтоФормаСписка)
		
	Если ЭтоФормаСписка Тогда
		
		ЭлементРодитель = Клеверенс_ОбщегоНазначенияСервер.ПолучитьРодительскийЭлементДляКнопкиОбмена(Форма, ЭтоФормаСписка);
		
		НоваяГруппаКнопок = Неопределено;
		
		ИмяКоманды 	= "Клеверенс_ВыгрузитьДокумент";
		Заголовок 	= "Выгрузить документ(ы)";
		
		Если ПолучитьЭлементФормы(Форма, ИмяКоманды) = Неопределено Тогда
			
			Если НоваяГруппаКнопок = Неопределено Тогда
				НоваяГруппаКнопок = Клеверенс_ИзменениеФорм.ДобавитьНовуюГруппуФормы(
					Форма,,
					"Клеверенс_ГруппаКнопокВыгрузить",
					ЭлементРодитель,
					"Выгрузить в Mobile SMARTS",
					ВидГруппыФормы.Подменю);
			КонецЕсли;
			
			НоваяКоманда_ВыгрузитьДокумент = Клеверенс_ИзменениеФорм.ДобавитьНовуюКоманду(
				Форма,
				ИмяКоманды,
				"Подключаемый_ВыполнитьКоманду",
				Заголовок,);
			
			НоваяКнопка_ВыгрузитьДокумент = Клеверенс_ИзменениеФорм.ДобавитьНовуюКнопку(
				Форма,,
				"Клеверенс_ВыгрузитьДокумент",
				НоваяКоманда_ВыгрузитьДокумент,
				НоваяГруппаКнопок,
				"Выгрузить документ(ы)");
			
		КонецЕсли;
		
		ИмяКоманды 	= "Клеверенс_ВыгрузитьВОдинДокумент";
		Заголовок 	= "Выгрузить в один документ";
		
		Если ПолучитьЭлементФормы(Форма, ИмяКоманды) = Неопределено Тогда
			
			Если НоваяГруппаКнопок = Неопределено Тогда
				НоваяГруппаКнопок = Клеверенс_ИзменениеФорм.ДобавитьНовуюГруппуФормы(
					Форма,,
					"Клеверенс_ГруппаКнопокВыгрузить",
					ЭлементРодитель,
					"Выгрузить в Mobile SMARTS",
					ВидГруппыФормы.Подменю);
			КонецЕсли;
			
			НоваяКоманда_ВыгрузитьВОдинДокумент = Клеверенс_ИзменениеФорм.ДобавитьНовуюКоманду(
				Форма,
				ИмяКоманды,
				"Подключаемый_ВыполнитьКоманду",
				Заголовок,);				
			
			НоваяКнопка_ВыгрузитьВОдинДокумент = Клеверенс_ИзменениеФорм.ДобавитьНовуюКнопку(
				Форма,,
				ИмяКоманды,
				НоваяКоманда_ВыгрузитьВОдинДокумент,
				НоваяГруппаКнопок,
				Заголовок);
			
		КонецЕсли;
		
	Иначе
		
		ИмяКоманды 	= "Клеверенс_ВыгрузитьДокумент";
		Заголовок 	= "Выгрузить в Mobile SMARTS";
		
		Если ПолучитьЭлементФормы(Форма, ИмяКоманды) = Неопределено Тогда
			
			НоваяКоманда_ВыгрузитьДокумент = Клеверенс_ИзменениеФорм.ДобавитьНовуюКоманду(
				Форма,
				ИмяКоманды,
				"Подключаемый_ВыполнитьКоманду",
				Заголовок,);
			
			ЭлементРодитель = Клеверенс_ОбщегоНазначенияСервер.ПолучитьРодительскийЭлементДляКнопкиОбмена(Форма, ЭтоФормаСписка);
			
			НоваяКнопка_ВыгрузитьДокумент = Клеверенс_ИзменениеФорм.ДобавитьНовуюКнопку(
				Форма,,
				ИмяКоманды,
				НоваяКоманда_ВыгрузитьДокумент,
				ЭлементРодитель,
				Заголовок);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Добавляет новый элемент формы (поле формы)
//
// Параметры:
//   Форма  - УправляемаяФорма - изменяемая форма
//   ЭлементВставки  - ПолеФормы, ГруппаФормы, ТаблицаФормы - элемент перед которым нужно вставить новый элемент (необязательный)
//                              Если не указано, то элемент будет добавлен
//   ИмяЭлемента  - Строка - уникальное имя элемента
//   ПутьКДанным  - Строка - путь к данным. Пример: "Объект.Сотрудник" (необязательный)
//                           Если не указано, то значение будет равно "Объект."+<ИмяЭлемента>
//   Родитель  - УправляемаяФорма, ТаблицаФормы, ГруппаФормы - элемент в котором будет добавлен новый элемент (необязательный)
//               Значение по-умолчанию: Форма
//   Заголовок  - Строка - представление поля
//   ВидПоля  - ВидПоляФормы - Вид поля ввода
//                             Возможные значения: ПолеВвода, ПолеНадписи и другие 
//                             в зависимости от типа значения реквизита (ПолеФлажка, ПолеПереключателя ПолеКалендаря и т.д.)
//                             Значение по-умолчанию: ВидПоляФормы.ПолеВвода
//
// Возвращаемое значение:
//   КнопкаФормы  - Новый элемент формы
//
Функция ДобавитьНовоеПолеФормы(Форма, ЭлементВставки = Неопределено, ИмяЭлемента, ПутьКДанным = Неопределено, Знач Родитель = Неопределено, Заголовок = "", ВидПоля = Неопределено) Экспорт
	
	Если Родитель = Неопределено Тогда
		Родитель = Форма;
	КонецЕсли;
	
	Если НЕ ЭлементВставки = Неопределено
		И НЕ ЭлементВставки = "" Тогда
		НовыйЭлемент = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"), Родитель, ЭлементВставки);
	Иначе
		НовыйЭлемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Родитель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Заголовок) Тогда
		НовыйЭлемент.Заголовок = Заголовок;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПутьКДанным) Тогда
		НовыйЭлемент.ПутьКДанным = ПутьКДанным;
	Иначе
		НовыйЭлемент.ПутьКДанным = "Объект."+ИмяЭлемента; // Основное значение
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидПоля) Тогда
		НовыйЭлемент.Вид = ВидПоля;
	Иначе
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; // Основное значение
	КонецЕсли;
	
	Возврат НовыйЭлемент;
	
КонецФункции

// Добавляет новый элемент формы (группа формы)
//
// Параметры:
//   Форма  - УправляемаяФорма - изменяемая форма
//   ЭлементВставки  - ПолеФормы, ГруппаФормы, ТаблицаФормы - элемент перед которым нужно вставить новый элемент (необязательный)
//                              Если не указано, то элемент будет добавлен
//   ИмяЭлемента  - Строка - уникальное имя элемента
//   Родитель  - УправляемаяФорма, ТаблицаФормы, ГруппаФормы - элемент в котором будет добавлен новый элемент (необязательный)
//               Значение по-умолчанию: Форма
//   Заголовок  - Строка - представление группы
//   ВидГруппы  - ВидГруппыФормы - Вид поля группы
//                             Возможные значения: ОбычнаяГруппа, Страницы, Страница, 
//                             ГруппаКнопок, ГруппаКолонок, Подменю и другие
//                             Значение по-умолчанию: ВидПоляФормы.ОбычнаяГруппа
//
// Возвращаемое значение:
//   КнопкаФормы  - Новый элемент формы
//
Функция ДобавитьНовуюГруппуФормы(Форма, ЭлементВставки = Неопределено, ИмяЭлемента, Знач Родитель = Неопределено, Заголовок = "", ВидГруппы = Неопределено) Экспорт
	
	Если Родитель = Неопределено Тогда
		Родитель = Форма;
	КонецЕсли;
	
	Если НЕ ЭлементВставки = Неопределено
		И НЕ ЭлементВставки = "" Тогда
		НовыйЭлемент = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), Родитель, ЭлементВставки);
	Иначе
		НовыйЭлемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ГруппаФормы"), Родитель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Заголовок) Тогда
		НовыйЭлемент.Заголовок = Заголовок;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидГруппы) Тогда
		НовыйЭлемент.Вид = ВидГруппы;
	Иначе
		НовыйЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	КонецЕсли;
	
	Возврат НовыйЭлемент;
	
КонецФункции

// Добавляет новый элемент формы (таблица формы)
//
// Параметры:
//   Форма  - УправляемаяФорма - изменяемая форма
//   ЭлементВставки  - ПолеФормы, ГруппаФормы, ТаблицаФормы - элемент перед которым нужно вставить новый элемент (необязательный)
//                              Если не указано, то элемент будет добавлен
//   ИмяЭлемента  - Строка - уникальное имя элемента
//   ПутьКДанным  - Строка - Путь к таблице. Пример: "Объект.Сотрудники", "Список" (необязательный)
//                           Если не указано, то значение будет равно "Объект."+<ИмяЭлемента>
//   Родитель  - УправляемаяФорма, ТаблицаФормы, ГруппаФормы - элемент в котором будет добавлен новый элемент (необязательный)
//               Значение по-умолчанию: Форма
//   Заголовок  - Строка - представление поля
//
// Возвращаемое значение:
//   ТаблицаФормы  - Новый элемент формы
//
Функция ДобавитьНовуюТаблицуФормы(Форма, ЭлементВставки = Неопределено, ИмяЭлемента, ПутьКДанным = Неопределено, Знач Родитель = Неопределено, Заголовок = "") Экспорт
	
	Если Родитель = Неопределено Тогда
		Родитель = Форма;
	КонецЕсли;
	
	Если НЕ ЭлементВставки = Неопределено
		И НЕ ЭлементВставки = "" Тогда
		НовыйЭлемент = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ТаблицаФормы"), Родитель, ЭлементВставки);
	Иначе
		НовыйЭлемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ТаблицаФормы"), Родитель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Заголовок) Тогда
		НовыйЭлемент.Заголовок = Заголовок;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПутьКДанным) Тогда
		НовыйЭлемент.ПутьКДанным = ПутьКДанным;
	Иначе
		НовыйЭлемент.ПутьКДанным = "Объект."+ИмяЭлемента; // Основное значение
	КонецЕсли;
	
	Возврат НовыйЭлемент;
	
КонецФункции

// Меняет расположение элемента на форме
//
// Параметры:
//   Форма  - УправляемаяФорма - изменяемая форма
//   Элемент  - ПолеФормы, ГруппаФормы, ТаблицаФормы, НадписьФормы, КнопкаФормы - элемент, которые нужно перенести
//   Родитель  - ГруппаФормы, УправляемаяФорма, ТаблицаФормы - новый родитель элемента
//   ЭлементВставки  - ПолеФормы, ГруппаФормы, ТаблицаФормы - элемент перед которым нужно вставить новый элемент (необязательный)
//                              Если не указано, то элемент будет добавлен
Функция ПереместитьЭлементФормы(Форма, Элемент, Родитель, ЭлементВставки = Неопределено) Экспорт
	
	Форма.Элементы.Переместить(Элемент, Родитель, ЭлементВставки);
	
КонецФункции

// Добавляет один новый реквизит к форме
//
// Параметры:
//   Форма  - УправляемаяФорма - изменяемая форма
//   Имя  - Строка - уникальное имя реквизита
//   Тип  - ОписаниеТипов - тип добавляемого реквизита
//   Путь  - Строка - путь к реквизиту. Не включает имя реквизита (необязательный)
//   Заголовок  - Строка - представление нового реквизита (необязательный)
//   СохраняемыеДанные  - Булево - указывает, что это сохраняемый при записи реквизит (необязательный)
//
// Возвращаемое значение:
//   РеквизитФормы  - Новый реквизит
//
Процедура ДобавитьРеквизитФормы(Форма, Имя, Тип, Путь = "", Заголовок = "", СохраняемыеДанные = Ложь) Экспорт
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	НовыйРеквизит = ПолучитьНовыйРеквизит(Имя, Тип, Путь, Заголовок, СохраняемыеДанные);
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

// Возвращает новый реквизит формы
//
// Параметры:
//   Имя  - Строка - уникальное имя реквизита
//   Тип  - ОписаниеТипов - тип добавляемого реквизита
//   Путь  - Строка - путь к реквизиту. Не включает имя реквизита (необязательный)
//   Заголовок  - Строка - представление нового реквизита (необязательный)
//   СохраняемыеДанные  - Булево - указывает, что это сохраняемый при записи реквизит (необязательный)
//
// Возвращаемое значение:
//   РеквизитФормы  - Новый реквизит
//
Функция ПолучитьНовыйРеквизит(Имя, Тип, Путь = "", Заголовок = "", СохраняемыеДанные = Ложь) Экспорт
	
	НовыйРеквизит = Новый РеквизитФормы(Имя, Тип, Путь, Заголовок, СохраняемыеДанные);
	
	Возврат НовыйРеквизит;
	
КонецФункции

// Добавляет новую команду формы
//
// Параметры:
//   Форма  - УправляемаяФорма - изменяемая форма
//   ИмяКоманды  - Строка - уникальное имя команды
//   Действие  - Строка - имя процедуры обработчика команды
//   Заголовок  - Строка - представление команды (необязательный)
//   ИзменяетСохраняемыеДанные  - Булево - Если ИСТИНА, то вызов команды приводит к установке флага модифицированности формы
//
// Возвращаемое значение:
//   КомандаФормы   - Добавленная команда формы
//
Функция ДобавитьНовуюКоманду(Форма, ИмяКоманды, Действие, Заголовок = "", ИзменяетСохраняемыеДанные = Ложь) Экспорт
	
	НоваяКоманда = Форма.Команды.Добавить(ИмяКоманды);
	НоваяКоманда.Действие = Действие;
	
	Если ЗначениеЗаполнено(Заголовок) Тогда
		НоваяКоманда.Заголовок = Заголовок;
	КонецЕсли;
	
	Если ИзменяетСохраняемыеДанные = Истина Тогда
		НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
	КонецЕсли;
	
	Возврат НоваяКоманда;
	
КонецФункции

// Добавляет новый элемент формы (кнопка)
//
// Параметры:
//   Форма  - УправляемаяФорма - изменяемая форма
//   ЭлементВставки  - ПолеФормы, ГруппаФормы, ТаблицаФормы - элемент перед которым нужно вставить новый элемент (необязательный)
//                              Если не указано, то элемент будет добавлен
//   ИмяЭлемента  - Строка - уникальное имя элемента
//   Команда  - КомандаФормы - выполняемая команда при нажатии
//            - Строка - имя выполняемой команды при нажатии
//   Родитель  - УправляемаяФорма, ТаблицаФормы, ГруппаФормы - элемент в котором будет добавлен новый элемент (необязательный)
//               Значение по-умолчанию: Форма
//   Заголовок  - Строка - заголовок нового элемента (необязательный)
//   ВидКнопки  - ВидКнопкиФормы - Вид кнопки
//                Возможные значения: ОбычнаяКнопка, Гиперссылка и др.
//                Значение по-умолчанию: ВидПоляФормы.ОбычнаяКнопка
//
// Возвращаемое значение:
//   КнопкаФормы  - Новый элемент формы
//
Функция ДобавитьНовуюКнопку(Форма, ЭлементВставки = Неопределено, ИмяЭлемента, Команда, Знач Родитель = Неопределено, Заголовок = "", ВидКнопки = Неопределено) Экспорт
	
	Если Родитель = Неопределено Тогда
		Родитель = Форма;
	КонецЕсли;
	
	Если НЕ ЭлементВставки = Неопределено
		И НЕ ЭлементВставки = "" Тогда
		НовыйЭлемент = Форма.Элементы.Вставить(ИмяЭлемента, Тип("КнопкаФормы"), Родитель, ЭлементВставки);
	Иначе
		НовыйЭлемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), Родитель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Заголовок) Тогда
		НовыйЭлемент.Заголовок = Заголовок;
	КонецЕсли;
	
	Если ТипЗнч(Команда) = Тип("КомандаФормы") Тогда
		НовыйЭлемент.ИмяКоманды = Команда.Имя;
	Иначе
		НовыйЭлемент.ИмяКоманды = Команда;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидКнопки) Тогда
		НовыйЭлемент.Вид = ВидКнопки;
	Иначе
		НовыйЭлемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	КонецЕсли;
	
	Возврат НовыйЭлемент;
	
КонецФункции

Функция ПолучитьЭлементФормы(Форма, ИмяЭлемента) Экспорт
	
	НайденныйЭлемент = Форма.Элементы.Найти(ИмяЭлемента);
	
	Возврат НайденныйЭлемент;
	
КонецФункции

#КонецОбласти