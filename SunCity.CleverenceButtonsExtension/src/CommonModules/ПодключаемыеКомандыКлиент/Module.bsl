
&Вместо("ВыполнитьКоманду")
Процедура CleverenceВыполнитьКоманду(Форма, Команда, Источник)
	
	CleverenceОбработатьВыполнениеКоманды(Форма, Команда, Источник);
	
КонецПроцедуры

&Вместо("НачатьВыполнениеКоманды")
Процедура CleverenceНачатьВыполнениеКоманды(Форма, Команда, Знач Источник)
	
	CleverenceОбработатьВыполнениеКоманды(Форма, Команда, Источник);
	
КонецПроцедуры

Процедура CleverenceОбработатьВыполнениеКоманды(Форма, Команда, Источник)

	ИмяСобытия = "CleverenceОбработатьВыполнениеКоманды";
	
	Если Клеверенс_ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Команда, "Имя") Тогда
		// Исправление ошибки в рознице 2.3
		ИмяКоманды = Команда.Имя;
	Иначе
		// Если команда не наша, то пусть вызов продолжается
		ПродолжитьВызов(Форма, Команда, Источник);
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(ИмяКоманды, "Клеверенс_") > 0 Тогда
		
		ПараметрыПодключенияMS = Клеверенс_ОбщегоНазначенияВызовСервера.ПолучитьПараметрыПодключенияMS();
		
		СтруктураДанныхОО = Клеверенс_ОбщегоНазначенияКлиентСервер.ПолучитьДанныеОсновнойОбработки(ПараметрыПодключенияMS);
		ПутьОсновнойОбработки 	= СтруктураДанныхОО.ПутьОсновнойОбработки;
		ТипОсновнойОбработки 	= СтруктураДанныхОО.ТипОсновнойОбработки;
		
		Если Не ЗначениеЗаполнено(ПутьОсновнойОбработки) Тогда
			
			// Попытка найти встроенную основную обработку
			МассивИменВстроеннойОО = Клеверенс_ОбщегоНазначенияКлиентСервер.ПолучитьМассивИменВстроеннойОО();
			
			Для Каждого ИмяВстроеннойОО Из МассивИменВстроеннойОО Цикл
				ПолноеИмяОО = "Обработка." + ИмяВстроеннойОО;
				Если Клеверенс_ОбщегоНазначенияВызовСервера.ПроверитьОбъектМетаданныхСуществует(ПолноеИмяОО) Тогда
					ПутьОсновнойОбработки = ИмяВстроеннойОО;
					ТипОсновнойОбработки = "Встроенная";
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Попытка
			ИмяГлавнойФормыОО = ?(ТипОсновнойОбработки = "Встроенная", "Обработка.", "ВнешняяОбработка.") + ПутьОсновнойОбработки + ".Форма.ГлавнаяФорма";
			// Если ТипОсновнойОбработки = СправочникСсылка, и в сеансе открыта главная форма основной обработки,
			// то будет получена открытая форма. Это сделано для ускорения работы, чтобы не ждать инициализацию
			ГлавнаяФормаОО = Клеверенс_ОбщегоНазначенияКлиент.ПолучитьГлавнуюФормуОО(ИмяГлавнойФормыОО, ТипОсновнойОбработки, ПутьОсновнойОбработки);
		Исключение
			Если ТипОсновнойОбработки = "СправочникСсылка" Тогда
				Попытка
					// Попытаемся подключить основную обработку
					Клеверенс_ОбщегоНазначенияВызовСервера.ПодключитьОбработку(ПутьОсновнойОбработки, ТипОсновнойОбработки);
					ГлавнаяФормаОО = Клеверенс_ОбщегоНазначенияКлиент.ПолучитьГлавнуюФормуОО(ИмяГлавнойФормыОО, ТипОсновнойОбработки, ПутьОсновнойОбработки);
				Исключение
					ИнфоОбОшибке = ИнформацияОбОшибке();
					ТекстОшибки = ПодробноеПредставлениеОшибки(ИнфоОбОшибке);
					ТекстСообщения = "Не удалось получить основную обработку.";
					Клеверенс_ОбщегоНазначенияВызовСервера.ЗаписатьСобытиеВЖурналРегистрации(ИмяСобытия, "Ошибка", ТекстСообщения + Символы.ПС + ТекстОшибки);			
					Сообщить(ТекстСообщения + " Подробности в журнале регистрации.");
					Возврат;	
				КонецПопытки;	
			Иначе
				ИнфоОбОшибке = ИнформацияОбОшибке();
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнфоОбОшибке);
				ТекстСообщения = "Не удалось получить основную обработку.";
				Клеверенс_ОбщегоНазначенияВызовСервера.ЗаписатьСобытиеВЖурналРегистрации(ИмяСобытия, "Ошибка", ТекстСообщения + Символы.ПС + ТекстОшибки);			
				Сообщить(ТекстСообщения + " Подробности в журнале регистрации.");
				Возврат;	
			КонецЕсли;
		КонецПопытки;

		//Обработка команды
		ИмяКоманды = СтрЗаменить(ИмяКоманды, "Клеверенс_", "");
		
		ИмяФормы = Форма.ИмяФормы;
		
		ЭтоРМК = Найти(ИмяФормы, "РМК") > 0;
		
		МассивЧастейИмениФормы = Клеверенс_ОбщегоНазначенияКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФормы, ".");
		
		ТребуетсяОбъектНазначения = Ложь;
		
		Если МассивЧастейИмениФормы[0] <> "Справочник" И НЕ ЭтоРМК Тогда
			// Для справочников не обязательно иметь объект, т.к. выгружаем все справочники, а не конкретный элемент
			ТребуетсяОбъектНазначения = Истина;
		КонецЕсли;
		
		Если МассивЧастейИмениФормы.Количество() = 4 Тогда
			
			Элементы = Форма.Элементы;

			ЭтоФормаСписка = СтрНайти(МассивЧастейИмениФормы[3], "ФормаСписка") > 0 Или 
				СтрНайти(МассивЧастейИмениФормы[3], "Список") > 0;
						
			ОбъектыНазначения = Новый Массив;
			
			Если ЭтоФормаСписка Тогда
				
				ВСпискеСсылки = Ложь;
				
				Если МассивЧастейИмениФормы[0] = "Документ" Или
					МассивЧастейИмениФормы[0] = "Справочник" Тогда
					
					ВСпискеСсылки = Истина;
					
					ИмяОбъектаФормы = МассивЧастейИмениФормы[0] + "Ссылка." + МассивЧастейИмениФормы[1];
					ТипОбъекта = Тип(ИмяОбъектаФормы); 
				КонецЕсли;
				
				Если ИмяКоманды = "ЗагрузитьИзТСД" Тогда
					// При загрузке документа из формы списка не обязательно должен быть выделен элемент динамического списка
					ТребуетсяОбъектНазначения = Ложь;
				КонецЕсли;
				
				//Поиск выделенных строк в динамическом списке
				МассивТаблицФормы = Новый Массив;
				Для каждого Элемент Из Элементы Цикл
					Если ТипЗнч(Элемент) = Тип("ТаблицаФормы") Тогда
						
						МассивСсылок = Клеверенс_ОбщегоНазначенияКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элемент, ТребуетсяОбъектНазначения, ВСпискеСсылки);
						Если МассивСсылок.Найти(Неопределено) <> Неопределено Тогда
							ТекстСообщения = "Не удалось получить ссылку на документ";
							Сообщить(ТекстСообщения);
							Возврат;
						КонецЕсли;
						
						Если МассивСсылок.Количество() = 0 И
							ВСпискеСсылки И
							ИмяКоманды = "ЗагрузитьИзТСД" Тогда
							
							// Добавим в МассивСсылок пустую ссылку с нужным типом
							МассивТипов = Новый Массив;
							МассивТипов.Добавить(ТипОбъекта);
							ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
							МассивСсылок.Добавить(ОписаниеТипов.ПривестиЗначение());
							
						КонецЕсли;
						
						Если Не ВСпискеСсылки Или
							Клеверенс_ОбщегоНазначенияКлиент.ПроверитьТипПараметраКоманды(МассивСсылок, ТипОбъекта) Тогда
							ОбъектыНазначения = МассивСсылок;
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) И НЕ ЭтоРМК Тогда
					ТекстСообщения = "Документ должен быть записан перед выгрузкой в ТСД!";
					Сообщить(ТекстСообщения);
					Возврат;
				Иначе
					ОбъектыНазначения.Добавить(Форма.Объект.Ссылка);				
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
				
		Если ТребуетсяОбъектНазначения И
			ОбъектыНазначения.Количество() = 0 Тогда
			ТекстСообщения = "Не удалось определить ссылку (ссылки) на объекты";
			Сообщить(ТекстСообщения);
			Возврат;
		КонецЕсли;			
		
		Попытка	
			
			ОшибкиФоновойИнициализации 				= Ложь;
			ОшибкиФоновойИнициализацииСуществует 	= Ложь;
			
			КэшДанных = Клеверенс_ОбщегоНазначенияВызовСервера.ПолучитьНастройкуОбщегоХранилища(
				"CleverenceButtonsExtension_КэшДанных", Ложь);
			
			Если Не ТипЗнч(КэшДанных) = Тип("Структура") Тогда
				КэшДанных = Новый Структура;
			КонецЕсли;
			
			Если КэшДанных.Свойство("ОшибкиФоновойИнициализации") Тогда
				ОшибкиФоновойИнициализации = КэшДанных.ОшибкиФоновойИнициализации;
			КонецЕсли;
			
			Если Клеверенс_ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ГлавнаяФормаОО, "ОшибкиФоновойИнициализации") Тогда
				ОшибкиФоновойИнициализацииСуществует = Истина;
				ГлавнаяФормаОО.ОшибкиФоновойИнициализации = ОшибкиФоновойИнициализации;
			КонецЕсли;
			
			Клеверенс_ОбщегоНазначенияКлиент.ВыполнитьКомандуКлеверенс(ГлавнаяФормаОО, ИмяКоманды, ОбъектыНазначения, ЭтоФормаСписка, Форма);
			
			Если ОшибкиФоновойИнициализацииСуществует Тогда
				
				// Получаем значение реквизита после попытки выполнения команды
				ОшибкиФоновойИнициализации = ГлавнаяФормаОО.ОшибкиФоновойИнициализации;
								
				// Сохраним значение, чтобы оно было доступно на время сеанса
				// При перезапуске значение будет недоступно, поэтому снова будет попытка инициализировать гл форму в фон задании
				КэшДанных.Вставить("ОшибкиФоновойИнициализации", ОшибкиФоновойИнициализации);
				Клеверенс_ОбщегоНазначенияВызовСервера.ЗаписатьНастройкуВХранилище("CleverenceButtonsExtension_КэшДанных", КэшДанных);
				
			КонецЕсли;
			
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнфоОбОшибке);
			Клеверенс_ОбщегоНазначенияВызовСервера.ЗаписатьСобытиеВЖурналРегистрации(ИмяСобытия, "Ошибка", ТекстОшибки);			
			Сообщить("Ошибка выполнения операции. Подробности в журнале регистрации.");
		КонецПопытки;

	Иначе
		
		ПродолжитьВызов(Форма, Команда, Источник);
		
	КонецЕсли;
	
КонецПроцедуры