// Разбивает строку на несколько строк по указанному разделителю. Разделитель может иметь любую длину.
// В случаях, когда разделителем является строка из одного символа, и не используется параметр СокращатьНепечатаемыеСимволы,
// рекомендуется использовать функцию платформы СтрРазделить.
//
// Параметры:
//  Значение               - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат;
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Пример:
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",")
//  - возвратит массив из 5 элементов, три из которых  - пустые: "", "один", "", "два", "";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина)
//  - возвратит массив из двух элементов: "один", "два";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(" один   два  ", " ")
//  - возвратит массив из двух элементов: "один", "два";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("")
//  - возвратит пустой массив;
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("",,Ложь)
//  - возвратит массив с одним элементом: ""(пустая строка);
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("", " ")
//  - возвратит массив с одним элементом: "" (пустая строка).
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Значение, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, 
	СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Если Разделитель = "," 
		И ПропускатьПустыеСтроки = Неопределено 
		И СокращатьНепечатаемыеСимволы Тогда 
		
		Результат = СтрРазделить(Значение, ",", Ложь);
		Для Индекс = 0 По Результат.ВГраница() Цикл
			Результат[Индекс] = СокрЛП(Результат[Индекс])
		КонецЦикла;
		Возврат Результат;
		
	КонецЕсли;
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Значение) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = СтрНайти(Значение, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Значение, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Значение = Сред(Значение, Позиция + СтрДлина(Разделитель));
		Позиция = СтрНайти(Значение, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Значение) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Значение));
		Иначе
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных,
		Знач Поле,
		Знач ПутьКДанным = "",
		Отказ = Ложь,
		ЭтоОбъект = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
	
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

// Проверяет наличие реквизита или свойства у произвольного объекта без обращения к метаданным.
//
// Параметры:
//  Объект       - Произвольный - объект, у которого нужно проверить наличие реквизита или свойства;
//  ИмяРеквизита - Строка       - имя реквизита или свойства.
//
// Возвращаемое значение:
//  Булево - Истина, если есть.
//
Функция ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Экспорт
	
	КлючУникальности   = Новый УникальныйИдентификатор;
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции

// Получает путь и тип основной обработки
//
// Параметры:
//  ПараметрыПодключенияMS  - Структура, Неопределено - структура настроек пользователя, содержащие параметры подключения MS
//
// Возвращаемое значение:
//   Структура   - содержит:
//		* ПутьОсновнойОбработки - СправочникСсылка.ДополнительныеОтчетыИОбработки, Строка - ссылка на элемент справочника, содержащая подключаемую обработку; имя обработки, добавленной в конфигурацию
//		* ТипОсновнойОбработки - Строка - тип основной обработки
//
Функция ПолучитьДанныеОсновнойОбработки(ПараметрыПодключенияMS) Экспорт

	СтруктураДанныхОО = Новый Структура;
	
	ПутьОсновнойОбработки 	= "";
	ТипОсновнойОбработки 	= "";

	Если ТипЗнч(ПараметрыПодключенияMS) = Тип("Структура") Тогда
		
		ПараметрыПодключенияMS.Свойство("ТипОсновнойОбработки", 		ТипОсновнойОбработки);
		ПараметрыПодключенияMS.Свойство("ПутьОсновнойОбработки", 		ПутьОсновнойОбработки);
			
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПутьОсновнойОбработки) Тогда
		
		// Попытка найти встроенную основную обработку
		МассивИменВстроеннойОО = ПолучитьМассивИменВстроеннойОО();
		
		Для Каждого ИмяВстроеннойОО Из МассивИменВстроеннойОО Цикл
			ПолноеИмяОО = "Обработка." + ИмяВстроеннойОО;
			Если Клеверенс_ОбщегоНазначенияВызовСервера.ПроверитьОбъектМетаданныхСуществует(ПолноеИмяОО) Тогда
				ПутьОсновнойОбработки = ИмяВстроеннойОО;
				ТипОсновнойОбработки = "Встроенная";
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураДанныхОО.Вставить("ПутьОсновнойОбработки", ПутьОсновнойОбработки);
	СтруктураДанныхОО.Вставить("ТипОсновнойОбработки", 	ТипОсновнойОбработки);
	
	Возврат СтруктураДанныхОО;

КонецФункции

// Получает массив имен встроенных основных обработок
//
// Возвращаемое значение:
//   Массив   - массив имен встроенных основных обработок
//
Функция ПолучитьМассивИменВстроеннойОО() Экспорт

	МассивИменВстроеннойОО = Новый Массив;
	
	МассивИменВстроеннойОО.Добавить("КлеверенсТСД_МодульКнопки"); // Сначала пытаемся найти основную обработку из расширения CleverenceButtonsExtension 
	МассивИменВстроеннойОО.Добавить("Fresh_КлеверенсТСД_ОсновнаяОбработка"); // Затем пытаемся найти основную обработку из расширения Cleverence1cfreshExtension
	
    Возврат МассивИменВстроеннойОО;
	
КонецФункции
