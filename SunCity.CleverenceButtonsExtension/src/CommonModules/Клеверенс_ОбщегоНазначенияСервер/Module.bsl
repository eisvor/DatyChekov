
// Получает настройку из хранилища общих настроек
//
// Параметры:
//	КлючДляПолучения - Строка - имя настройки, которую необходимо получить	
//	ПолучитьПользовательскуюИОбщуюНастройку - определяет, нужно ли получить пользовательскую и общую настройку (Истина) или одну из них (Ложь)
//
// Возвращаемое значение:
//	- Структура - содержит:
//		* ПользовательскаяНастройка - Произвольный - значение пользовательской настройки
//      * ОбщаяНастройка - Произвольный - значение общей настройки
//	- Произвольный - значение пользовательской или - при отсутствии пользовательской - общей настройки
Функция ПолучитьДанныеИзХранилища1С(КлючДляПолучения, ПолучитьПользовательскуюИОбщуюНастройку = Ложь) Экспорт
	
	Если ПравоДоступа("АдминистрированиеДанных", Метаданные)  Тогда
		
		НазваниеПараметраТекущегоПользователя = "ТекущийПользователь";
		Если Метаданные.ПараметрыСеанса.Найти("ТекущийПользователь") = Неопределено Тогда
			НазваниеПараметраТекущегоПользователя = "глТекущийПользователь"; // В Штрих-М 5.2 используется такой параметр
		КонецЕсли;
		ПользовательскаяНастройка = ХранилищеОбщихНастроек.Загрузить(КлючДляПолучения,,,ПараметрыСеанса[НазваниеПараметраТекущегоПользователя].Наименование);
		
		Если ПользовательскаяНастройка = Неопределено 
			ИЛИ ПолучитьПользовательскуюИОбщуюНастройку Тогда
			ОбщаяНастройка = ХранилищеОбщихНастроек.Загрузить(КлючДляПолучения,,, "");
		КонецЕсли;
		Если ПолучитьПользовательскуюИОбщуюНастройку Тогда
			ДанныеИзХранилища = Новый Структура("ПользовательскаяНастройка,ОбщаяНастройка",ПользовательскаяНастройка,ОбщаяНастройка);
		Иначе
			ДанныеИзХранилища = ?(ПользовательскаяНастройка = Неопределено,ОбщаяНастройка,ПользовательскаяНастройка);
		КонецЕсли;
	Иначе
		ДанныеИзХранилища = ХранилищеОбщихНастроек.Загрузить(КлючДляПолучения);
	КонецЕсли;
		
	Возврат ДанныеИзХранилища;
	
КонецФункции

// Получает массив имен объектов из настроек
//
// Параметры:
//  ВидОбмена  - Строка - значения реквизитов:
//                "Загрузка", "Выгрузка"
//
// Возвращаемое значение:
//   Массив   - массив имен объектов
//
Функция ПолучитьМассивИменОбъектовПоВидуОбмена(ВидОбмена) Экспорт
	
	МассивИменОбъектов = ПолучитьНастройкуОбщегоХранилища(ПолучитьПрефиксКлючаНастроек() + ВидОбмена);
	
	Если МассивИменОбъектов = Неопределено Тогда
	
		МассивИменОбъектов = Новый Массив;
	
	КонецЕсли;
	
	Возврат МассивИменОбъектов;
	
КонецФункции

// Создает внешнюю обработку по ссылке
//
// Параметры:
//  ПутьОбработки  - СправочникСсылка.ДополнительныеОтчетыИОбработки, Строка - ссылка на элемент справочника, содержащая подключаемую обработку; имя обработки, добавленной в конфигурацию
//                
// Возвращаемое значение:
//   ВнешняяОбработка   - созданнная внешняя обработка
//   Неопределено 		- при ошибке создания внешней обработки
//
Функция ПодключитьОбработку(ПутьОбработки, ТипОбработки) Экспорт
	
	ИмяСобытия = "Клеверенс_ОбщегоНазначенияСервер.ПодключитьОбработку";
	
	ОбработкаОбъект = Неопределено;
	
	Если ТипОбработки = "СправочникСсылка" Тогда
		#Область НесовместимыйКодFresh
		МетаданныеСправочника = ПутьОбработки.Метаданные();
		Для каждого Реквизит из МетаданныеСправочника.Реквизиты Цикл
			Если Реквизит.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
				ХранимоеЗначение = ПутьОбработки[Реквизит.Имя].Получить();
				Если ХранимоеЗначение = Неопределено
					ИЛИ ТипЗнч(ХранимоеЗначение) <> Тип("ДвоичныеДанные") Тогда
					//В хранилище пустое значение или в хранилище не хранится двоичный файл!
					Продолжить;
				КонецЕсли;
				АдресДвоичныхДанных = ПоместитьВоВременноеХранилище(ХранимоеЗначение);
				Попытка
					ОписаниеЗащиты = Новый ОписаниеЗащитыОтОпасныхДействий;
					ОписаниеЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;
					ИмяОбработки = ВнешниеОбработки.Подключить(АдресДвоичныхДанных,, Ложь, ОписаниеЗащиты);
					ОбработкаОбъект = ВнешниеОбработки.Создать(ИмяОбработки, Ложь);
					Прервать;
				Исключение
					ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ТекстСообщения = "Не удалось подключить интеграционную обработку";
					ЗаписатьСобытиеВЖурналРегистрации(ИмяСобытия, "Ошибка", ТекстСообщения + Символы.ПС + ТекстОшибки);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		#КонецОбласти //НесовместимыйКодFresh
	ИначеЕсли ТипОбработки = "Встроенная" Тогда
		ОбработкаОбъект = Обработки[ПутьОбработки].Создать();
	Иначе
		ТекстСообщения = "Тип подключаемой обработки не указан или не соответствует ожидаемому (указанный тип = " + Строка(ТипОбработки) + ")";
		ЗаписатьСобытиеВЖурналРегистрации(ИмяСобытия, "Ошибка", ТекстСообщения);
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

// Получает элемент формы для размещения в нем кнопки
//
// Параметры:
//  Форма  - Форма - форма, в которой будет размещена кнопка
//
// Возвращаемое значение:
//   ГруппаФормы   - элемент, в котором будет размещена кнопка
//
Функция ПолучитьРодительскийЭлементДляКнопкиОбмена(Форма, ЭтоФормаСписка) Экспорт
	
	Элементы = Форма.Элементы;
	
	ЭлементРодительКоманднаяПанельФормы = Ложь;
	
	Если ЭтоФормаСписка Тогда
		//Поиск командной панели динамического списка
		Реквизиты = Форма.ПолучитьРеквизиты();
		МассивДинамическихСписков = Новый Массив;
		Для каждого Реквизит Из Реквизиты Цикл					
			Если Реквизит.ТипЗначения.СодержитТип(Тип("ДинамическийСписок")) Тогда
				МассивДинамическихСписков.Добавить(Реквизит);
			КонецЕсли;					
		КонецЦикла;
		//Если динамических список несколько, то берем командную панель формы
		Если МассивДинамическихСписков.Количество() = 1 Тогда
			РеквизитДинамическийСписок = МассивДинамическихСписков[0];
			//Сначала пытаемся найти элемент по имени реквизита
			ЭлементДинамическийСписок = Элементы.Найти(РеквизитДинамическийСписок.Имя);
			Если ЭлементДинамическийСписок = Неопределено Тогда
				//Перебор элементов формы
				Для Каждого Элемент Из Элементы Цикл
					Если ТипЗнч(Элемент) <> Тип("ТаблицаФормы") Тогда
						Продолжить;
					КонецЕсли;
					Если Элемент.ПутьКДанным = РеквизитДинамическийСписок.Имя Тогда
						ЭлементДинамическийСписок = Элемент;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ЭлементДинамическийСписок <> Неопределено И ЭлементДинамическийСписок.ПоложениеКоманднойПанели <> ПоложениеКоманднойПанелиЭлементаФормы.Нет Тогда
				//Размещение в командной панели динамического списка
				ЭлементРодитель = ЭлементДинамическийСписок.КоманднаяПанель;
			Иначе
				ЭлементРодительКоманднаяПанельФормы = Истина;	
			КонецЕсли;
		Иначе
			ЭлементРодительКоманднаяПанельФормы = Истина;
		КонецЕсли;
	Иначе
		ЭлементРодительКоманднаяПанельФормы = Истина;	
	КонецЕсли;
	
	//Размещение в командной панели формы
	Если ЭлементРодительКоманднаяПанельФормы Тогда
		ЭлементРодитель = Элементы.Найти("ФормаКоманднаяПанель"); 	
		Если ЭлементРодитель = Неопределено ИЛИ Форма.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет Тогда
			Для Каждого Элемент Из Элементы Цикл
				Если ТипЗнч(Элемент) <> Тип("ГруппаФормы") Тогда
					Продолжить;
				КонецЕсли;
				Если Элемент.Вид = ВидГруппыФормы.КоманднаяПанель Тогда
					ЭлементРодитель = Элемент;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭлементРодитель;
	
КонецФункции

// Записывает настройку в хранилище общих настроек
//
// Параметры:
//  КлючНастройки 	- Строка - ключ настройки
//  Настройка 		- Произвольный - значение настройки
//
Процедура ЗаписатьНастройкуВХранилище(КлючНастройки, Настройка) Экспорт
	
	ИмяСобытия = "CleverenceButtonsExtension: запись настройки в хранилище";
	
	//Установка привилегированного режима, что пользователь без полных прав мог записать настройку с пустым именем пользователя
	УстановитьПривилегированныйРежим(Истина);
	Если ПривилегированныйРежим() Тогда
		ХранилищеОбщихНастроек.Сохранить(КлючНастройки,, Настройка,, "");
		УстановитьПривилегированныйРежим(Ложь);
	Иначе
		//Запись в ЖР
		Комментарий = "Ошибка при записи настройки: " + КлючНастройки + ". Не установлен привилегированны режим";
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
	КонецЕсли;

КонецПроцедуры

// Получает настройку из хранилища общих настроек
//
// Параметры:
//  КлючНастройки 				- Строка - ключ настройки
//  ПользовательскаяНастройка 	- Булево - признак получения пользовательской настройки
//
// Возвращаемое значение:
//   Произвольный   - значение настройки
//
Функция ПолучитьНастройкуОбщегоХранилища(КлючНастройки, ПользовательскаяНастройка = Ложь) Экспорт
	
	ИмяСобытия = "ПолучитьНастройкуОбщегоХранилища";
	
	ДанныеИзХранилища = Неопределено;
	
	Если Не ПользовательскаяНастройка Тогда
		УстановитьПривилегированныйРежим(Истина);
		ИмяПользователя = "";
		Если ПривилегированныйРежим() Тогда
			ДанныеИзХранилища = ХранилищеОбщихНастроек.Загрузить(КлючНастройки,,, ИмяПользователя);
		Иначе
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, "Ошибка установки привилегированного режима при получении глобальных настроек");
		КонецЕсли;
	Иначе
		ДанныеИзХранилища = ХранилищеОбщихНастроек.Загрузить(КлючНастройки);
	КонецЕсли;
	
	Возврат ДанныеИзХранилища;
	
КонецФункции

// Записывает имена объектов обмена в общие настройки
//
// Параметры:
//  ИнтеграционнаяОбработка  - ВнешняяОбработкаОбъект - объект интеграционной обработки
//  ВидОбмена  - Строка - вид обмена
//
Процедура СохранитьИменаОбъектовОбмена(ИнтеграционнаяОбработка, ВидОбмена) Экспорт
			
	МассивИменОбъектов = Неопределено;
	
	Попытка
		Если ВидОбмена = "ЗагрузкаДокументов" Тогда
			МассивИменОбъектов = ИнтеграционнаяОбработка.ПолучитьМассивИменДокументовДляЗагрузки();
		ИначеЕсли ВидОбмена = "ВыгрузкаДокументов" Тогда
			МассивИменОбъектов = ИнтеграционнаяОбработка.ПолучитьМассивИменДокументовДляВыгрузки();
		ИначеЕсли ВидОбмена = "ВыгрузкаСправочников" Тогда
			МассивИменОбъектов = ИнтеграционнаяОбработка.ПолучитьМассивИменСправочниковДляВыгрузки();
		ИначеЕсли ВидОбмена = "ИменаФормЗагрузкиДокументов" Тогда
			МассивИменОбъектов = ИнтеграционнаяОбработка.ПолучитьМассивИменФормДляЗагрузкиДокументов();
		ИначеЕсли ВидОбмена = "ИменаФормВыгрузкиДокументов" Тогда
			МассивИменОбъектов = ИнтеграционнаяОбработка.ПолучитьМассивИменФормДляВыгрузкиДокументов();			
		КонецЕсли;
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнфоОбОшибке);
	КонецПопытки;

	Если ТипЗнч(МассивИменОбъектов) = Тип("Массив") Тогда
		ЗаписатьНастройкуВХранилище(ПолучитьПрефиксКлючаНастроек() + ВидОбмена, МассивИменОбъектов);
	КонецЕсли;
	
КонецПроцедуры

// Получает префикс ключа настроек
//
// Возвращаемое значение:
//   Строка   - префикс ключа настроек
//
Функция ПолучитьПрефиксКлючаНастроек()
	
	Возврат "Cleverence_";
	
КонецФункции

Процедура ЗаписатьСобытиеВЖурналРегистрации(ИмяСобытия, УровеньСтрокой, Комментарий)  Экспорт
	
	Данные = "MobileSMARTSLog"; // Чтобы отличать записи ЖР, сделанные обработкой, от других записей ЖР
	
	Если УровеньСтрокой = "Информация" Тогда
		Уровень = УровеньЖурналаРегистрации.Информация;
	ИначеЕсли УровеньСтрокой = "Ошибка" Тогда	
		Уровень = УровеньЖурналаРегистрации.Ошибка;		
	ИначеЕсли УровеньСтрокой = "Предупреждение" Тогда
		Уровень = УровеньЖурналаРегистрации.Предупреждение;
	ИначеЕсли УровеньСтрокой = "Примечание" Тогда
		Уровень = УровеньЖурналаРегистрации.Примечание;			
	Иначе
		Уровень = УровеньЖурналаРегистрации.Информация;	
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень,, Данные, Комментарий);

КонецПроцедуры