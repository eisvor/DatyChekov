///////////////////////////////////////////////////////////////////////////////
// Модуль формы содержит:
// - обработчики событий формы, команд и элементов формы;
// - служебные процедуры и функции;
// - прочее.
///////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Перем ТекущаяБазаСуществует; 
Перем ТекущаяБаза;

&НаКлиенте
Перем СерверДоступен;

&НаКлиенте
#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
	Перем _ЛокКонтекст;
#КонецЕсли

&НаКлиенте 
Перем РегламентныеЗаданияВыполнены;

&НаКлиенте
Перем ID_ТекущегоУзлаПредыдущееЗначение;

&НаКлиенте
Перем ВыполнениеВнешнейКоманды,
	ИдентификаторВнешнейКоманды,
	ОбъектыНазначенияВнешнейКоманды;

&НаКлиенте
Перем ПередаваемыеПараметры Экспорт;

&НаКлиенте
Перем СтруктураПараметровЗапуска;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
		ПолноеИмяОбъекта = РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя();
		// Если основная обработка запускается из справочника, 
		// то параметр ДополнительнаяОбработкаСсылка содержит ссылку на доп обработку. Запишем ее в реквизит
		ОбъектСсылка = Параметры.ДополнительнаяОбработкаСсылка;
	#КонецЕсли	
	
КонецПроцедуры

// Инициализирует форму локального контекста. Выполняет попытку подключения к базе Mobile Smarts.
//
// Параметры:
//	Отказ - Булево - Признак отказа от открытия формы
&НаКлиенте
Процедура ПриОткрытии(Отказ) Экспорт
	
	#Область НесовместимыйКодFresh
	ЭтоФреш = Ложь;
	#КонецОбласти //НесовместимыйКодFresh
	#Область СовместимыйКодFresh
	//ЭтоФреш = Истина;
	#КонецОбласти //СовместимыйКодFresh
	
	НачалоСобытия = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	СтруктураОшибокСостояний = Новый Структура; // Инициализируем реквизит формы произвольного типа
	
	СформироватьСтруктуруПараметровЗапуска();
	
	КнопкаПоказатьСкрытьНастройкиПометка = Истина;
	ПоказатьСкрытьНастройки("");	

	СтруктураСменыСтатуса = Новый Структура("Статус, Параметр, Операция", 
		"НачалоВыполненияПроцедурыЗапускаОбработки", 
		, 
		"ЗапускОсновнойОбработки");
	Оповестить("СменаСтатуса", СтруктураСменыСтатуса);    
		
	СоздатьЛокКонекст();
			
	ВерсияОбработки = _ЛокКонтекст.ЛокЯдро_ПолучитьИнформациюОВнешнейОбработке("Версия");
	ПодключеннаяКонфигурация = _ЛокКонтекст.ЛокЯдро_ПодключеннаяКонфигурация();
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		_ЛокКонтекст.АдресаПеременных = Новый Структура("ИдентификаторФормы","");
	#Иначе	
		_ЛокКонтекст.АдресаПеременных = Новый Структура("ИдентификаторФормы",ЭтаФорма.УникальныйИдентификатор);
	#КонецЕсли
	
	ДоступноВыполнениеВФоне = Не СтруктураПараметровЗапуска.НеЗапускатьФоновыеЗадания 
		И ДоступноВыполнениеВФоне() И Не ОшибкиФоновойИнициализации;
		
	// Проверим не отключал ли ранее пользователь работу в фоне
	ОтключитьРаботуВФоне = _ЛокКонтекст.ЛокЯдро_ПолучитьДанныеИзХранилища1С("Cleverence_ОтключитьРаботуВФоне");
	Если ОтключитьРаботуВФоне <> Неопределено Тогда
		_ЛокКонтекст.КомЯдро_СохранитьЗначениеПеременной("ОтключитьРаботуВФоне", ОтключитьРаботуВФоне);
		ДоступноВыполнениеВФоне = ДоступноВыполнениеВФоне И Не ОтключитьРаботуВФоне;
	КонецЕсли;	
	
	Если ДоступноВыполнениеВФоне Тогда
		ЭтаФорма.Заголовок = "Клеверенс: загрузка...";
	КонецЕсли;

	ЗаписатьПризнакДоступностиВыполненияВФоне();
	
	Если ЗначениеЗаполнено(ПараметрЗапуска) 		
		и Найти(ПараметрЗапуска, "КлеверенсАвтотесты.") Тогда
		_ЛокКонтекст.КомЯдро_СохранитьЗначениеПеременной("Автотест",Истина);
	
		ИдАвтотеста = Строка(Новый УникальныйИдентификатор);
		_ЛокКонтекст.КомЯдро_СохранитьЗначениеПеременной("ИдАвтотеста",ИдАвтотеста);	
	КонецЕсли;
	
	ИспользоватьREST_API = Истина;
	_ЛокКонтекст.КомЯдро_СохранитьЗначениеПеременной("ИспользоватьREST_API",ИспользоватьREST_API);	
	ТекущаяБазаСуществует = Ложь;
		
	// Иницализируем пользовательские настройки подсказок - загрузим их в кэш
	НастройкиПодсказокПользователю = _ЛокКонтекст.ЛокЯдро_ПолучитьДанныеИзХранилища1С("Cleverence_НастройкиПодсказокПользователю", Истина);
	
	ПользовательскаяНастройка = Неопределено;
	Если ТипЗнч(НастройкиПодсказокПользователю) = Тип("Структура")
		И НастройкиПодсказокПользователю.Свойство("ПользовательскаяНастройка", ПользовательскаяНастройка) Тогда
		_ЛокКонтекст.КомЯдро_СохранитьЗначениеПеременной("НастройкиПодсказокПользователю", ПользовательскаяНастройка);
	Иначе
		_ЛокКонтекст.КомЯдро_СохранитьЗначениеПеременной("НастройкиПодсказокПользователю", НастройкиПодсказокПользователю);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрЗапуска) 
		И НЕ ПараметрЗапускаИсключение(ПараметрЗапуска)
		и Найти(ПараметрЗапуска, "|") > 0 
		Тогда
		
		// "Первый запуск"
		// Получаем ID базы из параметра
		пПараметрЗапуска = ПараметрЗапуска;
		БазаИзПараметров = "";
		Поз = Найти(пПараметрЗапуска, "|");
		Если Поз > 0 И Лев(пПараметрЗапуска, Поз-1) <> "" Тогда
			МассивПараметров = _ЛокКонтекст.ЛокЯдро_РазложитьСтрокуВМассивПодстрок(пПараметрЗапуска, "|");
		Иначе
			МассивПараметров = Новый Массив;
		КонецЕсли; 
		
		ИДБазы = Неопределено;
		URIБазы = Неопределено;
		ПодключениеREST_API = Ложь;
		ДоступноВыполнениеВФоне = Ложь; // При первом запуске не используем фоновые задания
		ЗаписатьПризнакДоступностиВыполненияВФоне();
		Для каждого пПараметр Из МассивПараметров Цикл
			Если ИДБазы = Неопределено Тогда
				Попытка 
					ИДБазы = Строка(Новый УникальныйИдентификатор(пПараметр));	
					Продолжить;
				Исключение	
				КонецПопытки;
			КонецЕсли;
			
			Если НЕ ТекущаяБазаСуществует = Истина Тогда
				Попытка
					СтруктураURI = _ЛокКонтекст.REST_API_ПолучитьСтруктуруURIИзСтроки(пПараметр);
					Если НЕ ЗначениеЗаполнено(СтруктураURI.Схема) Тогда
						Продолжить;
					ИначеЕсли Найти(ВРег(СтруктураURI.Схема), "HTTP") <> 0 Тогда
						// Если в строке подключения есть http, то это НЕ прямая работа, подключаемся через Rest
						ПодключениеREST_API = Истина;
					КонецЕсли;
					ПутьНаСервере = СтруктураURI.ПутьНаСервере;
					Поз = Найти(ПутьНаСервере,"?");
					ПутьНаСервере = ?(Поз>0,Лев(ПутьНаСервере,Поз-1),ПутьНаСервере); 
					
					МассивХостов = СтруктураURI.МассивХостов;
					Для Каждого Хост Из МассивХостов Цикл
						URIБазы = СтруктураURI.Схема + "://" + Хост + ?(ЗначениеЗаполнено(СтруктураURI.Порт), ":" + Формат(СтруктураURI.Порт, "ЧГ="), "") + ?(ЗначениеЗаполнено(ПутьНаСервере),"/" + ПутьНаСервере,"");	
						
						//Попробуем подключиться через REST_API
						Если ПодключениеREST_API = Истина Тогда
							ТипИнтерфейса = "REST_API";
							РежимВыбораБазы = "СтрокаПодключения";
							
							СтруктураПодключения = Новый Структура;
							СтруктураПодключения.Вставить("ТипБазы","Основная");
							СтруктураПодключения.Вставить("СтрокаПодключенияСМАРТС",URIБазы);
							СтруктураПодключения.Вставить("IdBaseSMARTS",Неопределено);
							СтруктураПодключения.Вставить("ТипИнтерфейса",ТипИнтерфейса);
							СтруктураПодключения.Вставить("РежимВыбораБазы" ,РежимВыбораБазы);
							
							РасположениеКомпоненты = "НаСервере";
							
							_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ПроверитьСоединениеССерверомSMARTS", "Информация", "Начало, первый запуск, REST, НаКлиенте", НачалоСобытия);
							Результат = _ЛокКонтекст.ЛокЯдро_ПроверитьСоединениеССерверомSMARTS(СтруктураПодключения,Истина,"Основная", РасположениеКомпоненты,Ложь,Ложь);
							_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ПроверитьСоединениеССерверомSMARTS", "Информация", "Конец, первый запуск, REST, НаКлиенте", НачалоСобытия);
							
							Если Результат = Истина Тогда
								REST_СовместимостьПлатформы = _ЛокКонтекст.REST_API_ПроверитьСовместимостьПлатформы(СтруктураПодключения);
								Если REST_СовместимостьПлатформы Тогда
									ТекущаяБазаСуществует = Истина;
									Прервать;	
								КонецЕсли;
							Иначе
								РасположениеКомпоненты = "НаКлиенте";
								
								_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ПроверитьСоединениеССерверомSMARTS", "Информация", "Начало, первый запуск, REST, НаСервере", НачалоСобытия);
								Результат = _ЛокКонтекст.ЛокЯдро_ПроверитьСоединениеССерверомSMARTS(СтруктураПодключения,Истина,"Основная", РасположениеКомпоненты,Ложь,Ложь);
								_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ПроверитьСоединениеССерверомSMARTS", "Информация", "Конец, первый запуск, REST, НаСервере", НачалоСобытия);
								
								Если Результат = Истина Тогда
									REST_СовместимостьПлатформы = _ЛокКонтекст.REST_API_ПроверитьСовместимостьПлатформы(СтруктураПодключения);
									Если REST_СовместимостьПлатформы Тогда
										ТекущаяБазаСуществует = Истина;
										Прервать;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						Иначе
							//Теперь попробуем через COM
							ТипИнтерфейса = "COM";
							РежимВыбораБазы = "СтрокаПодключения";
							
							СтруктураПодключения = Новый Структура;
							СтруктураПодключения.Вставить("ТипБазы","Основная");
							СтруктураПодключения.Вставить("СтрокаПодключенияСМАРТС",URIБазы);
							СтруктураПодключения.Вставить("IdBaseSMARTS",Неопределено);
							СтруктураПодключения.Вставить("ТипИнтерфейса",ТипИнтерфейса);
							СтруктураПодключения.Вставить("РежимВыбораБазы" ,РежимВыбораБазы);
							
							РасположениеКомпоненты = "НаКлиенте";
							
							_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ПроверитьСоединениеССерверомSMARTS", "Информация", "Начало, первый запуск, COM, НаКлиенте", НачалоСобытия);
							Результат = _ЛокКонтекст.ЛокЯдро_ПроверитьСоединениеССерверомSMARTS(СтруктураПодключения,Истина,"Основная", РасположениеКомпоненты,Ложь,Ложь);
							_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ПроверитьСоединениеССерверомSMARTS", "Информация", "Конец, первый запуск, COM, НаКлиенте", НачалоСобытия);
							
							Если Результат = Истина Тогда
								ТекущаяБазаСуществует = Истина;
								Прервать;
							Иначе
								РасположениеКомпоненты = "НаСервере";
								
								_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ПроверитьСоединениеССерверомSMARTS", "Информация", "Начало, первый запуск, COM, НаСервере", НачалоСобытия);
								Результат = _ЛокКонтекст.ЛокЯдро_ПроверитьСоединениеССерверомSMARTS(СтруктураПодключения,Истина,"Основная", РасположениеКомпоненты,Ложь,Ложь);
								_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ПроверитьСоединениеССерверомSMARTS", "Информация", "Конец, первый запуск, COM, НаСервере", НачалоСобытия);
								
								Если Результат = Истина Тогда
									ТекущаяБазаСуществует = Истина;
									Прервать;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					Продолжить;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;	
		
		//Если не нашли гуид в параметрах то берем первый параметр
		Если ИДБазы = Неопределено 
			И МассивПараметров.Количество() > 0 Тогда
			ИДБазы = МассивПараметров[0];
		КонецЕсли;
		
		// ищем базу на клиенте и на сервере
		Если НЕ ТекущаяБазаСуществует = Истина 
			И ЗначениеЗаполнено(ИДБазы) Тогда
			
			СтруктураПодключения = Новый Структура;
			СтруктураПодключения.Вставить("ТипБазы","Основная");
			СтруктураПодключения.Вставить("СтрокаПодключенияСМАРТС",Неопределено);
			СтруктураПодключения.Вставить("IdBaseSMARTS",ИДБазы);
			
			// Ищем на сервере			
			Если НЕ ТекущаяБазаСуществует Тогда
				// Ищем на сервере
				ТипИнтерфейса = "COM";
				РежимВыбораБазы = "ИзСписка";
				СтруктураПодключения.Вставить("ТипИнтерфейса",ТипИнтерфейса);
				СтруктураПодключения.Вставить("РежимВыбораБазы" ,РежимВыбораБазы);
				РасположениеКомпоненты = "НаКлиенте";
				
				_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ПроверитьСоединениеССерверомSMARTS", "Информация", "Начало, COM, НаКлиенте", НачалоСобытия);
				Результат = _ЛокКонтекст.ЛокЯдро_ПроверитьСоединениеССерверомSMARTS(СтруктураПодключения,Истина,"Основная", РасположениеКомпоненты,Ложь,Ложь);
				_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ПроверитьСоединениеССерверомSMARTS", "Информация", "Конец, COM, НаКлиенте", НачалоСобытия);
				
				Если Результат = Истина Тогда
					ТекущаяБазаСуществует = Истина;
				КонецЕсли;
			КонецЕсли;
			
			// Не нашли на сервере, продолжаем поиск на клиенте
			Если НЕ ТекущаяБазаСуществует Тогда
				РасположениеКомпоненты = "НаСервере";
				
				_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ПроверитьСоединениеССерверомSMARTS", "Информация", "Начало, COM, НаСервере", НачалоСобытия);				
				Результат = _ЛокКонтекст.ЛокЯдро_ПроверитьСоединениеССерверомSMARTS(СтруктураПодключения,Истина,"Основная", РасположениеКомпоненты,Ложь,Ложь);
				_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ПроверитьСоединениеССерверомSMARTS", "Информация", "Конец, COM, НаСервере", НачалоСобытия);
				
				Если Результат = Истина Тогда
					ТекущаяБазаСуществует = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущаяБазаСуществует Тогда
			_ЛокКонтекст.ЛокЯдро_ОчиститьХранилищеОбщихНастроек1С();	
		КонецЕсли;
		
		_ЛокКонтекст.ЛокЯдро_СохранитьДанныеВХранилище1С("Cleverence_РасположениеКомпоненты", РасположениеКомпоненты);

		Если ТекущаяБазаСуществует Тогда
			Если ЗначениеЗаполнено(ИДБазы) Тогда
				_ЛокКонтекст.ЛокЯдро_ОчиститьКэшируемыеНастройки(ИДБазы);
			КонецЕсли;
			
			_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ПолучитьОписаниеБазыSMARTS", "Информация", "Начало", НачалоСобытия);
			ТекущаяБаза = _ЛокКонтекст.ЛокЯдро_ПолучитьОписаниеБазыSMARTS(РасположениеКомпоненты,"Основная",ТипИнтерфейса);
			_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ПолучитьОписаниеБазыSMARTS", "Информация", "Конец", НачалоСобытия);
			
			ПараметрыПодключенияMS = Новый Структура;
			ПараметрыПодключенияMS.Вставить("Ид", 							ТекущаяБаза.Ид);
			ПараметрыПодключенияMS.Вставить("Имя", 							ТекущаяБаза.Имя);
			ПараметрыПодключенияMS.Вставить("ИдПриложения", 				ТекущаяБаза.ИдПриложения);			
			ПараметрыПодключенияMS.Вставить("ИмяПриложения", 				ТекущаяБаза.ИмяПриложения);
			ПараметрыПодключенияMS.Вставить("УровеньПриложения", 			ТекущаяБаза.УровеньПриложения);
			ПараметрыПодключенияMS.Вставить("СтрокаПодключения", 			ТекущаяБаза.СтрокаПодключения);
			ПараметрыПодключенияMS.Вставить("ИдОсновногоПриложения", 		ТекущаяБаза.ИдОсновногоПриложения);
			ПараметрыПодключенияMS.Вставить("РабочийКаталог", 				ТекущаяБаза.РабочийКаталог);
			ПараметрыПодключенияMS.Вставить("ИмяИнтеграционнойОбработки",	ТекущаяБаза.ИмяИнтеграционнойОбработки);
			ПараметрыПодключенияMS.Вставить("ПутьИнтеграционнойОбработки",	ТекущаяБаза.ПутьИнтеграционнойОбработки);
			ПараметрыПодключенияMS.Вставить("ТипОсновнойОбработки",			?(ТекущаяБаза.Свойство("ТипОсновнойОбработки"), ТекущаяБаза.ТипОсновнойОбработки, Неопределено));
			ПараметрыПодключенияMS.Вставить("ПутьОсновнойОбработки",		?(ТекущаяБаза.Свойство("ПутьОсновнойОбработки"), ТекущаяБаза.ПутьОсновнойОбработки, Неопределено));			
			ИнформацияОПродукте = _ЛокКонтекст.ЛокЯдро_ПолучитьИнформациюОПродукте(ТекущаяБаза.ИдПриложения, ТекущаяБаза.ИдОсновногоПриложения);
			ПараметрыПодключенияMS.Вставить("УровеньПриложенияСтрокой",		?(ЗначениеЗаполнено(ИнформацияОПродукте.УровеньПриложения), ИнформацияОПродукте.УровеньПриложения, _ЛокКонтекст.ЛокЯдро_ПолучитьУровеньПриложения(ТекущаяБаза.УровеньПриложения)));
			ПараметрыПодключенияMS.Вставить("ТипУстановленногоПродукта",	ИнформацияОПродукте.ТипУстановленногоПродукта);
			ПараметрыПодключенияMS.Вставить("ТипОбработки",					"ФайлНаДиске");
			ПараметрыПодключенияMS.Вставить("АвторизацияВключена", 			Ложь);
			ПараметрыПодключенияMS.Вставить("АвторизацияТокен", 			"");
            ПараметрыПодключенияMS.Вставить("АвторизацияЛогин", 			"");
			ПараметрыПодключенияMS.Вставить("АвторизацияРефрешТокен",		"");
			ПараметрыПодключенияMS.Вставить("СтрокаПодключенияСМАРТС",		ТекущаяБаза.СтрокаПодключения);
			ПараметрыПодключенияMS.Вставить("IdBaseSMARTS", 				ТекущаяБаза.Ид);
			ПараметрыПодключенияMS.Вставить("QR", 							ТекущаяБаза.QR);
			ПараметрыПодключенияMS.Вставить("ВерсияПриложения", 			ТекущаяБаза.ВерсияПриложения);
			
			_ЛокКонтекст.ЛокЯдро_СохранитьДанныеВХранилище1С("Cleverence_ПараметрыПодключенияMS", ПараметрыПодключенияMS);
			_ЛокКонтекст.ЛокЯдро_СохранитьДанныеВХранилище1С("Cleverence_РежимВыбораБазы", РежимВыбораБазы);
			_ЛокКонтекст.ЛокЯдро_СохранитьДанныеВХранилище1С("Cleverence_ТипИнтерфейса", ТипИнтерфейса);
			
			_ЛокКонтекст.КомЯдро_СохранитьЗначениеПеременной("РасположениеКомпоненты",РасположениеКомпоненты);
			_ЛокКонтекст.КомЯдро_СохранитьЗначениеПеременной("ТипИнтерфейса",ТипИнтерфейса);
			
			
			ОП = Новый ОписаниеОповещения("ДействияПередОткрытиемФормыПервыйЗапуск",ЭтаФорма,Новый Структура("ПараметрыПодключенияMS,ТекущаяБаза",ПараметрыПодключенияMS,ТекущаяБаза));
			_ЛокКонтекст.ЛокЯдро_ПроверитьСоединениеССерверомSMARTS(ПараметрыПодключенияMS,Ложь,,РасположениеКомпоненты,,,ОП);
			
		Иначе
			ID_ТекущейБазы = БазаИзПараметров;
			Сообщить("База с таким идентификатором [" + БазаИзПараметров + "] не найдена!");
			СерверДоступен = Ложь;
		КонецЕсли;
	Иначе
		флПроверяетсяПользовательскаяНастройка = Ложь;
		СохраненныеНастройки = _ЛокКонтекст.ЛокЯдро_ПолучитьДанныеИзХранилища1С("Cleverence_ПараметрыПодключенияMS", Истина);
		
		Если СохраненныеНастройки <> Неопределено  
			И ТипЗнч(СохраненныеНастройки) = Тип("Структура")
			И СохраненныеНастройки.Свойство("ПользовательскаяНастройка") Тогда
			ПользовательскаяНастройкаПараметровПодключения = СохраненныеНастройки.ПользовательскаяНастройка;
			ОбщаяНастройкаПараметровПодключения = СохраненныеНастройки.ОбщаяНастройка;
			
			Если ПользовательскаяНастройкаПараметровПодключения = Неопределено Тогда
				ПараметрыПодключенияMS = ОбщаяНастройкаПараметровПодключения;
			Иначе
				ПараметрыПодключенияMS = ПользовательскаяНастройкаПараметровПодключения;
				флПроверяетсяПользовательскаяНастройка = Истина;
			КонецЕсли;
		Иначе
			ПараметрыПодключенияMS = СохраненныеНастройки;
		КонецЕсли;
		
		Если ПараметрыПодключенияMS <> Неопределено Тогда
			_ЛокКонтекст.КомЯдро_СохранитьЗначениеПеременной("ПараметрыПодключенияMS",ПараметрыПодключенияMS);
			СохраненныеНастройки = _ЛокКонтекст.ЛокЯдро_ПолучитьДанныеИзХранилища1С("Cleverence_РасположениеКомпоненты", Истина);
			
			Если ТипЗнч(СохраненныеНастройки) = Тип("Структура")
				И СохраненныеНастройки.Свойство("ПользовательскаяНастройка") Тогда
				ПользовательскаяНастройкаРасположенияКомпоненты = СохраненныеНастройки.ПользовательскаяНастройка;
				ОбщаяНастройкаРасположенияКомпоненты = СохраненныеНастройки.ОбщаяНастройка; 					
				РасположениеКомпоненты = ?(ПользовательскаяНастройкаРасположенияКомпоненты = Неопределено,ОбщаяНастройкаРасположенияКомпоненты,ПользовательскаяНастройкаРасположенияКомпоненты);				
			Иначе
				РасположениеКомпоненты = СохраненныеНастройки;	
			КонецЕсли;
			
			Если РасположениеКомпоненты = Неопределено Тогда
				РасположениеКомпоненты = "НаСервере";
			КонецЕсли;
			
			#Если ВебКлиент тогда
				РасположениеКомпоненты = "НаСервере";
				_ЛокКонтекст.ЛокЯдро_СохранитьДанныеВХранилище1С("Cleverence_РасположениеКомпоненты", РасположениеКомпоненты);
			#КонецЕсли
			
			СохраненныеНастройкиТипИнтерфейса = _ЛокКонтекст.ЛокЯдро_ПолучитьДанныеИзХранилища1С("Cleverence_ТипИнтерфейса", Истина);
			
			Если ТипЗнч(СохраненныеНастройкиТипИнтерфейса) = Тип("Структура")
				И СохраненныеНастройкиТипИнтерфейса.Свойство("ПользовательскаяНастройка") Тогда
				ПользовательскаяНастройкаТипИнтерфейса = СохраненныеНастройкиТипИнтерфейса.ПользовательскаяНастройка;
				ОбщаяНастройкаТипИнтерфейса = СохраненныеНастройкиТипИнтерфейса.ОбщаяНастройка; 					
				ТипИнтерфейса = ?(ПользовательскаяНастройкаТипИнтерфейса = Неопределено,ОбщаяНастройкаТипИнтерфейса,ПользовательскаяНастройкаТипИнтерфейса);				
			Иначе
				ТипИнтерфейса = СохраненныеНастройкиТипИнтерфейса;	
			КонецЕсли;			
			
			_ЛокКонтекст.КомЯдро_СохранитьЗначениеПеременной("РасположениеКомпоненты",РасположениеКомпоненты);
			_ЛокКонтекст.КомЯдро_СохранитьЗначениеПеременной("ТипИнтерфейса",ТипИнтерфейса);
			
			СтруктураСменыСтатуса = Новый Структура("Статус, Параметр, Операция", 
				"НачалоВыполненияПроцедурыЗапускаОбработки", 
				, 
				"ЗапускОсновнойОбработки");
			Оповестить("СменаСтатуса", СтруктураСменыСтатуса);    
				
			ОП = Новый ОписаниеОповещения("ДействияПередОткрытиемФормыПослеПодключения",ЭтаФорма,Новый Структура("флПроверяетсяПользовательскаяНастройка,ОбщаяНастройкаПараметровПодключения",флПроверяетсяПользовательскаяНастройка,ОбщаяНастройкаПараметровПодключения));
			
			_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ПроверитьСоединениеССерверомSMARTS", "Информация", "Начало", НачалоСобытия);
			_ЛокКонтекст.ЛокЯдро_ПроверитьСоединениеССерверомSMARTS(ПараметрыПодключенияMS,Ложь,,РасположениеКомпоненты,,,ОП);
			_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ПроверитьСоединениеССерверомSMARTS", "Информация", "Конец", НачалоСобытия);
			
		Иначе
			ДействияПередОткрытиемФормыПослеПодключения(Неопределено,Новый Структура("флПроверяетсяПользовательскаяНастройка,ОбщаяНастройкаПараметровПодключения",флПроверяетсяПользовательскаяНастройка,ОбщаяНастройкаПараметровПодключения));
		КонецЕсли;

	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрЗапуска) Тогда
		Если Найти(ПараметрЗапуска, "КлеверенсАвтотесты.") Тогда
			ВыполнитьАвтотестКлеверенс(ПараметрЗапуска);
		ИначеЕсли Найти(ПараметрЗапуска, "КлеверенсРегламентнаяВыгрузка.") Тогда
			ВыполнитьРегламентнуюВыгрузкуКлеверенс(ПараметрЗапуска);
		КонецЕсли;
	КонецЕсли;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Элементы["НастроитьСправочники"].Заголовок = "Открыть окно обмена
		|справочников и печати";
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УстановленыНастройкиПодключения" Тогда
		
		// При перезаполнении текущей базы учитываем, что если к торговому объекту подключена частная база, необходимо подключить ее
		ЕстьЧастнаяБаза = _ЛокКонтекст.ЕстьЧастнаяБаза;
		Если ЕстьЧастнаяБаза Тогда			
			СтруктураПодключения = Новый Структура("ЧастнаяБазаMS");
			СтрокаУзла 			 = Неопределено;
			
			ВсеУзлы = _ЛокКонтекст.ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("Узлы");
			Если ТипЗнч(ВсеУзлы) = Тип("Массив") Тогда
				СтрокаУзла = _ЛокКонтекст.НайтиСтруктуруВМассивеПоЭлементу(ВсеУзлы, "ID_Узла", _ЛокКонтекст.ДанныеТекущегоУзла.ID_Узла);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтруктураПодключения, СтрокаУзла);
			
			Если ЗначениеЗаполнено(СтруктураПодключения.ЧастнаяБазаMS) Тогда						
				ПараметрыПодключенияMS = СтруктураПодключения.ЧастнаяБазаMS;
				
				СтруктураПодключенияЧастнойБазыMS = Новый Структура("IdBaseSMARTS, ОписаниеБазы, СтрокаПодключенияСМАРТС");
				ЗаполнитьЗначенияСвойств(СтруктураПодключенияЧастнойБазыMS, ПараметрыПодключенияMS);
				СтруктураПодключенияЧастнойБазыMS.ОписаниеБазы = ПараметрыПодключенияMS;
				
				_ЛокКонтекст.КомЯдро_СохранитьЗначениеПеременной("СтруктураПодключенияЧастнойБазыMS", СтруктураПодключенияЧастнойБазыMS);
			Иначе
				ПараметрыПодключенияMS = _ЛокКонтекст.КомЯдро_ПолучитьЗначениеПеременной("ПараметрыПодключенияMS");
			КонецЕсли;
		Иначе
			ПараметрыПодключенияMS = _ЛокКонтекст.КомЯдро_ПолучитьЗначениеПеременной("ПараметрыПодключенияMS");
		КонецЕсли;
		
		ID_ТекущейБазы = ПараметрыПодключенияMS.Ид;
		ИмяТекущейБазы = ПараметрыПодключенияMS.Имя + ?(ПараметрыПодключенияMS.Свойство("ВерсияПриложения") И ЗначениеЗаполнено(ПараметрыПодключенияMS.ВерсияПриложения), ", версия: " + ПараметрыПодключенияMS.ВерсияПриложения, "");
		ИмяПриложения = ПараметрыПодключенияMS.ИмяПриложения;
		УстановитьСписокВыбораУзлов();
		ID_ТекущегоУзла = _ЛокКонтекст.ДанныеТекущегоУзла.ID_Узла;
		ID_ТекущегоУзлаПредыдущееЗначение = ID_ТекущегоУзла;
		ОбновитьИнформациюОбИнтеграционнойОбработке();
		
		УстановитьЗаголовокФормы();
		УстановитьСсылкуНаБазуЗнаний();
		
		Если ПараметрыПодключенияMS.Свойство("QR") И ПараметрыПодключенияMS.Свойство("ТипУстановленногоПродукта") Тогда
			УстановитьQRCode(ПараметрыПодключенияMS.QR, ПараметрыПодключенияMS.ТипУстановленногоПродукта);
		Иначе
			УстановитьQRCode();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПодключеныРасширенияКонфигурации" Тогда
		ПодключенныеРасширения 	= _ЛокКонтекст.ЛокЯдро_ПолучитьИнформациюОПодключенныхРасширениях();
	ИначеЕсли ИмяСобытия = "СменаСтатуса" Тогда
		СменитьСтатус(Параметр);	
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
	
// Обработчик клиентской назначаемой команды.
//
// Параметры:
//   ИдентификаторКоманды - Строка - Имя команды, как оно задано в функции СведенияОВнешнейОбработке модуля объекта.
//   ОбъектыНазначения - Массив - Ссылки, для которых выполняется команда.
&НаКлиенте
Процедура ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения = Неопределено) Экспорт
	
	ВыполнениеВнешнейКоманды 		= Истина;
	ИдентификаторВнешнейКоманды 	= ИдентификаторКоманды;
	ОбъектыНазначенияВнешнейКоманды = ОбъектыНазначения;

	Если _ЛокКонтекст = Неопределено Тогда
		// В данном случае код, выполняющий команду, будет выполняться в методе "ДействияПриОткрытииФормыЗавершение"
		// Это необходимо для работы механизма при фоновой инициализации, т.к. в фоне инициализации происходит в другом сеансе,
		// и поэтому необходимо вызывать код после ее выполнения
		ПриОткрытии(Ложь);
	Иначе
		ОП = Новый ОписаниеОповещения("ВыполнитьКомандуПослеПроверкиПодключения",ЭтаФорма,Новый Структура("ИдентификаторКоманды,ОбъектыНазначения",ИдентификаторКоманды,ОбъектыНазначения));
		_ЛокКонтекст.ЛокЯдро_ПроверитьСоединениеССерверомSMARTS(,,?(ЕстьЧастнаяБаза,"Частная","Основная"),,,,ОП);
	КонецЕсли;
	
КонецПроцедуры

#Иначе

Процедура ВыполнитьКоманду_ОФ(ИдентификаторКоманды, ОбъектыНазначения = Неопределено) Экспорт

	ВыполнениеВнешнейКоманды 		= Истина;
	ИдентификаторВнешнейКоманды 	= ИдентификаторКоманды;
	ОбъектыНазначенияВнешнейКоманды = ОбъектыНазначения;

	Если _ЛокКонтекст = Неопределено Тогда
		// В данном случае код, выполняющий команду, будет выполняться в методе "ДействияПриОткрытииФормыЗавершение"
		// Это необходимо для работы механизма при фоновой инициализации, т.к. в фоне инициализации происходит в другом сеансе,
		// и поэтому необходимо вызывать код после ее выполнения
		ПриОткрытии(Ложь);
	Иначе
		ОП = Новый ОписаниеОповещения("ВыполнитьКомандуПослеПроверкиПодключения",ЭтаФорма,Новый Структура("ИдентификаторКоманды,ОбъектыНазначения",ИдентификаторКоманды,ОбъектыНазначения));
		_ЛокКонтекст.ЛокЯдро_ПроверитьСоединениеССерверомSMARTS(,,?(ЕстьЧастнаяБаза,"Частная","Основная"),,,,ОП);
	КонецЕсли;
			
КонецПроцедуры	
#КонецЕсли

// Вызывает процедуру по идентификатору команды
//
// Параметры:
//	СерверДоступен - Булево - флаг доступности сервера Mobile Smarts	
//	ДопПараметры - Структура - содержит:	
//		* ИдентификаторКоманды - Строка - Имя команды, как оно задано в функции СведенияОВнешнейОбработке модуля объекта.
//   	* ОбъектыНазначения - Массив из ЛюбаяСсылка - Ссылки, для которых выполняется команда.	
&НаКлиенте
Процедура ВыполнитьКомандуПослеПроверкиПодключения(СерверДоступен,ДопПараметры) Экспорт
	
	Если НЕ СерверДоступен = Истина Тогда
		// Еще на этапе инициализации и проверке подключения будет показан вопрос, поэтому его перебивать не надо
		Возврат;		
	КонецЕсли;
	
	// Перед выполнением команды необходимо выполнить процедуру ДействияПередОткрытиемФормыПослеПодключения из оповещения
	// в методе ПриОткрытии, т.к. она не отработала ранее из-за открытия формы авторизации SMARTS
	Если _ЛокКонтекст.ДанныеТекущегоУзла = Неопределено Тогда
		флПроверяетсяПользовательскаяНастройка = Ложь;
		СохраненныеНастройки = _ЛокКонтекст.ЛокЯдро_ПолучитьДанныеИзХранилища1С("Cleverence_ПараметрыПодключенияMS", Истина);
		
		Если СохраненныеНастройки <> Неопределено  
			И ТипЗнч(СохраненныеНастройки) = Тип("Структура")
			И СохраненныеНастройки.Свойство("ПользовательскаяНастройка") Тогда
			ПользовательскаяНастройкаПараметровПодключения = СохраненныеНастройки.ПользовательскаяНастройка;
			ОбщаяНастройкаПараметровПодключения = СохраненныеНастройки.ОбщаяНастройка;
			
			Если ПользовательскаяНастройкаПараметровПодключения = Неопределено Тогда
				ПараметрыПодключенияMS = ОбщаяНастройкаПараметровПодключения;
			Иначе
				ПараметрыПодключенияMS = ПользовательскаяНастройкаПараметровПодключения;
				флПроверяетсяПользовательскаяНастройка = Истина;
			КонецЕсли;
		Иначе
			ПараметрыПодключенияMS = СохраненныеНастройки;
		КонецЕсли;
		
		Если ПараметрыПодключенияMS <> Неопределено Тогда
			ДействияПередОткрытиемФормыПослеПодключения(
				СерверДоступен,
				Новый Структура("флПроверяетсяПользовательскаяНастройка,ОбщаяНастройкаПараметровПодключения", флПроверяетсяПользовательскаяНастройка, ОбщаяНастройкаПараметровПодключения));
		КонецЕсли;		
	КонецЕсли;
	
	ИдентификаторКоманды	= ДопПараметры.ИдентификаторКоманды;
	ОбъектыНазначения 		= ДопПараметры.ОбъектыНазначения;
	
	Если ИдентификаторКоманды = "Выгрузить все справочники в Mobile SMARTS" Тогда		
		ВыгрузитьСправочникиНажатие("");
		
	ИначеЕсли ИдентификаторКоманды = "КлеверенсТСД_ВыгрузитьСправочники" Тогда
		ВыгрузитьСправочникиНажатие("");
		
	ИначеЕсли ИдентификаторКоманды = "КлеверенсТСД_ВыгрузитьДокумент" Тогда
		
		#Если Не ВебКлиент Тогда
			Если ТипЗнч(ОбъектыНазначения) = Тип("ВыделенныеСтрокиТабличногоПоля") Тогда
				МассивСсылок = Новый Массив;
				Для Каждого Ссылка из ОбъектыНазначения Цикл
					МассивСсылок.Добавить(Ссылка);
				КонецЦикла;
				ОбъектыНазначения = МассивСсылок;	
			КонецЕсли;
		#КонецЕсли
		
		Если Не ТипЗнч(ОбъектыНазначения) = Тип("Массив") Тогда
			Если Не ЗначениеЗаполнено(ОбъектыНазначения) Тогда
				Сообщить("Документ должен быть записан перед выгрузкой в ТСД!");
				Возврат;
			КонецЕсли;			
			МассивОбъектов = Новый Массив;
			МассивОбъектов.Добавить(ОбъектыНазначения);
			ОбъектыНазначения = МассивОбъектов;
		КонецЕсли;
		
		ВыгрузитьДокументВстраиваемаяКоманда(ОбъектыНазначения);		
		
	ИначеЕсли ИдентификаторКоманды = "КлеверенсТСД_ВыгрузитьДокументыВОдин" Тогда
		
		ВыгрузитьДокументВстраиваемаяКоманда(ОбъектыНазначения,,,,Истина);		
	
	ИначеЕсли ИдентификаторКоманды = "КлеверенсТСД_ЗагрузитьВТекущийДокумент" Тогда
		
		ЗагрузитьВОткрытыйДокумент(ОбъектыНазначения);		
		
	ИначеЕсли ИдентификаторКоманды = "КлеверенсТСД_ЗагрузитьДокументы" Тогда
		
		ЗагрузитьДокументыСТСД(ОбъектыНазначения);		
		
	ИначеЕсли ИдентификаторКоманды = "КлеверенсТСД_ОткрытьОбработкуОбмена" Тогда	
		
		Если ЭтаФорма.Открыта() Тогда
			ЭтаФорма.Активизировать();
		Иначе
			ЭтаФорма.Открыть();
		КонецЕсли;
			
	КонецЕсли;
КонецПроцедуры 

// Активизирует/открывает форму для настройки подключения к базе Mobile Smarts
//
// Параметры:
//	Результат - КодВозвратаДиалога - ответ на вопрос об открытии формы для настройки подключения
//	ДопПараметры - Произвольный
&НаКлиенте
Процедура ВопросОткрытьГлавнуюФормуЗавершение(Результат,ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполнениеВнешнейКоманды = Ложь;
		Если ЭтаФорма.Открыта() Тогда
			ЭтаФорма.Активизировать();
		Иначе
			ЭтаФорма.Открыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРегламентнуюВыгрузкуКлеверенс(ПараметрЗапуска)
		
	_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("КлеверенсРегламентнаяВыгрузка", "Информация", "Справочники.Начало");
	
	НачалоВыполненияОперации = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	_ЛокКонтекст.ЛокЯдро_ВыгрузитьТаблицыНаСерверSMARTS();
	
	_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("КлеверенсРегламентнаяВыгрузка", "Информация", "Справочники.Конец", НачалоВыполненияОперации);
	
	ЗавершитьРаботуСистемы(Ложь);
КонецПроцедуры

#Область КомандыВыгрузки

&НаКлиенте
Процедура ВыгрузитьДокументВстраиваемаяКоманда(ОбъектыНазначения, ID_БизнесПроцесса = Неопределено, ПроверитьНаТСД = Истина,НазначенныеПользователи=Неопределено, ВыгрузитьВОдин = Ложь)

	Если _ЛокКонтекст = Неопределено Тогда
		ПриОткрытии(Ложь);
	КонецЕсли;

	НесколькоДокументов = Ложь;
	
	Если ТипЗнч(ОбъектыНазначения) = Тип("Массив") Тогда
		Если Не ОбъектыНазначения.Количество() Тогда
			Возврат;
		КонецЕсли;
		НесколькоДокументов = ОбъектыНазначения.Количество() > 1;
		ДокументСсылка = ОбъектыНазначения[0];
		Если ОбъектыНазначения.Количество() = 1 Тогда
			ВыгрузитьВОдин = Ложь;
		КонецЕсли;  
	КонецЕсли;	
	
	Если ПроверитьНаТСД Тогда		
		ТЗ = _ЛокКонтекст.ЛокЯдро_ПолучитьСписокДокументовНаСервереSMARTS();   
		
		ПерваяСтрока 				= Истина;
		ТекстВопроса 				= "";     
		МассивДокументовКВыгрузке		= Новый Массив;
		
		Для Каждого ДокументКВыгрузке Из ОбъектыНазначения Цикл
			Если ТЗ <> Неопределено Тогда
				ИдДокумента =  ПолучитьИдДокумента(ДокументКВыгрузке);
				ДокументНайден = Ложь;
			
				Для Каждого СтрокаТЗ Из ТЗ Цикл
					Если СтрокаТЗ.Свойство("ЭтоТаблицаЗначений") Тогда
						Продолжить;
					КонецЕсли;
					
					ИдДокументаВбазе = СтрокаТЗ.Ид;
					Если Найти(ИдДокументаВбазе,"#") > 0
						И Найти(ИдДокумента,"#") = 0 Тогда
						ИдДокументаВБазе = Лев(ИдДокументаВбазе, Найти(ИдДокументаВбазе,"#")-1);
					КонецЕсли;
					
					Если ИдДокументаВБазе = ИдДокумента Тогда
						ДокументНайден = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;	

				Если ДокументНайден Тогда                                                                                   
					Если НесколькоДокументов Тогда
						ТекстВопроса = ТекстВопроса + ?(ПерваяСтрока,"","," + Символы.ПС) + """" + Строка(ДокументКВыгрузке)+ """";
						ПерваяСтрока = Ложь;		
					Иначе
						ТекстВопроса = "Документ """ + Строка(ДокументКВыгрузке) + """ уже был выгружен на ТСД. Повторить выгрузку?";
						ОповещениеВопросПовторВыгрузки = Новый ОписаниеОповещения(
							"ОповещениеВопросПовторВыгрузкиЗавершение", 
							ЭтаФорма,
							Новый Структура("МассивДокументовКВыгрузке,ОбъектыНазначения,ВыгрузитьВОдин", МассивДокументовКВыгрузке, ОбъектыНазначения, ВыгрузитьВОдин));
						ПоказатьВопрос(ОповещениеВопросПовторВыгрузки, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,, "Внимание");		            
						Возврат;
					КонецЕсли;
				Иначе
					МассивДокументовКВыгрузке.Добавить(ДокументКВыгрузке);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ТекстВопроса <> "" Тогда      				
			ОповещениеВопросПовторВыгрузки = Новый ОписаниеОповещения(
				"ОповещениеВопросПовторВыгрузкиЗавершение", 
				ЭтаФорма, 
				Новый Структура("МассивДокументовКВыгрузке,ОбъектыНазначения,ВыгрузитьВОдин", МассивДокументовКВыгрузке, ОбъектыНазначения, ВыгрузитьВОдин));
			ПоказатьВопрос(ОповещениеВопросПовторВыгрузки, "Документы:" + Символы.ПС + ТекстВопроса + "." + Символы.ПС + "Уже были выгружены на ТСД. Повторить выгрузку?", РежимДиалогаВопрос.ДаНет, , , "Внимание");	
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ID_БизнесПроцесса = Неопределено Тогда
		
		ТипИсходногоДокумента1С = СокрЛП(ПолучитьТипДокументаИзСсылки(ДокументСсылка));
		СписокБизнесПроцессов = _ЛокКонтекст.ЛокЯдро_ПолучитьБизнесПроцессДляТекущихДокументов("Интерактивный", ОбъектыНазначения, ТипИсходногоДокумента1С);
		
		Если СписокБизнесПроцессов = Неопределено Или Не СписокБизнесПроцессов.Количество() Тогда			
			
			// Сообщение выводим для каждого документа, т.к. все они одного типа
			Для Каждого ДокументКВыгрузке Из ОбъектыНазначения Цикл
				Сообщить("#1CEDER001. Для документа """ + Строка(ДокументКВыгрузке) + """ не удалось подобрать настройку бизнес-процесса, или документ не попадает ни под один из отборов документов. 
					|Проверьте настройки бизнес-процесса, настройки отборов документов или выберите другой документ.");										
			КонецЦикла;			
			Возврат;	
			
		ИначеЕсли СписокБизнесПроцессов.Количество() = 1 Тогда
			
			ID_БизнесПроцесса = СписокБизнесПроцессов[0].ID_БизнесПроцесса;	
			
		ИначеЕсли СписокБизнесПроцессов.Количество() > 1 Тогда
			
			ПереданнаяТаблица = Новый Массив;
			ПереданнаяТаблица.Добавить(Новый Структура("ЭтоТаблицаЗначений,КолонкиТаблицыЗначений",Истина,"Название,ТипИсходногоДокумента1С_Синоним,ТипИсходногоДокумента1С,ID_БизнесПроцесса"));
						
			Для каждого БизнесПроцесс Из СписокБизнесПроцессов Цикл
				
				НоваяСтруктура = Новый Структура();
				НоваяСтруктура.Вставить("Название",							БизнесПроцесс.Название);
				НоваяСтруктура.Вставить("ТипИсходногоДокумента1С_Синоним",	Строка(ТипЗнч(ДокументСсылка)));
				НоваяСтруктура.Вставить("ТипИсходногоДокумента1С",			ТипИсходногоДокумента1С);
				НоваяСтруктура.Вставить("ID_БизнесПроцесса",				БизнесПроцесс.ID_БизнесПроцесса);
				
				ПереданнаяТаблица.Добавить(НоваяСтруктура);
				
			КонецЦикла; 			
			
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				ФормаСлужебная_ВыборСтрокиИзТаблицы = ПолучитьФорму("ОФ_ФормаСлужебная_ВыборСтрокиИзТаблицы",ЭтаФорма);
			#Иначе
				ФормаСлужебная_ВыборСтрокиИзТаблицы = ПолучитьФорму(_ЛокКонтекст.ПолноеИмяОбъекта + ".Форма.ФормаСлужебная_ВыборСтрокиИзТаблицы", ,, ЭтаФорма);
				ФормаСлужебная_ВыборСтрокиИзТаблицы.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			#КонецЕсли
			
			ФормаСлужебная_ВыборСтрокиИзТаблицы.ИмяТаблицы = "БизнесПроцессыДляВыгрузки";
			ФормаСлужебная_ВыборСтрокиИзТаблицы._ЛокКонтекст = _ЛокКонтекст;
			ФормаСлужебная_ВыборСтрокиИзТаблицы.ПереданнаяТаблица = ПереданнаяТаблица;
			ФормаСлужебная_ВыборСтрокиИзТаблицы.ЗакрыватьПриЗакрытииВладельца = Ложь;
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ОбъектыНазначения",	ОбъектыНазначения);
			ДопПараметры.Вставить("ПроверитьНаТСД",		ПроверитьНаТСД);
			ДопПараметры.Вставить("ВыгрузитьВОдин",		ВыгрузитьВОдин);
			ОП = Новый ОписаниеОповещения("ФормаСлужебная_ВыборБПИзТаблицыЗакрытие", ЭтаФорма, ДопПараметры);
			
			ФормаСлужебная_ВыборСтрокиИзТаблицы.ОписаниеОповещенияОЗакрытии = ОП;
			
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				ФормаСлужебная_ВыборСтрокиИзТаблицы.ОткрытьМодально();
			#Иначе
				ФормаСлужебная_ВыборСтрокиИзТаблицы.Открыть();
			#КонецЕсли
			
			Возврат;

		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
			
	Отбор = Новый Структура("Используется,ТипИсходногоДокумента1С,ID_БизнесПроцесса", Истина, _ЛокКонтекст.ЛокЯдро_ПолучитьТипДокументаПоСсылке(ДокументСсылка), ID_БизнесПроцесса);
	ОтобранныеБизнесПроцессы = _ЛокКонтекст.ЛокЯдро_ПолучитьИзКэшаЗначениеТабличнойНастройкиSMARTS("НастройкиБизнесПроцессов", Отбор, "");
	Если ОтобранныеБизнесПроцессы.Количество() = 0 Тогда		
		Для Каждого ДокументКВыгрузке Из ОбъектыНазначения Цикл
			Сообщить("#1CEDER001. Для документа """ + Строка(ДокументСсылка) + """ не удалось подобрать настройку бизнес-процесса, или документ не попадает ни под один из отборов документов. 
				|Проверьте настройки бизнес-процесса, настройки отборов документов или выберите другой документ.");						
		КонецЦикла;
		Возврат;	                                    	
	КонецЕсли;
	
	ОтобранныйБизнесПроцесс = ОтобранныеБизнесПроцессы[0];
	
	флУказатьПользователя 	= ОтобранныйБизнесПроцесс.НазначитьПользователю =  "Спрашивать при выгрузке";	
	флОтправитьНаУстройство = ОтобранныйБизнесПроцесс.НазначитьПользователю =  "Конкретному устройству";
	
	InternetGateOption = _ЛокКонтекст.ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("InternetGateOption");
	Если InternetGateOption <> Ложь И ВРег(InternetGateOption) = "AVAILABLE" Тогда
		флЛегкоеОблако = Истина;
	Иначе
		флЛегкоеОблако = Ложь;
	КонецЕсли;                	
	
	// Проверить сколько устройств доступно пользователю, если одно - нет смысла вызывать форму пин-кода
	Если флЛегкоеОблако <> Истина Тогда
		Если флОтправитьНаУстройство Тогда
			пУстройстваMS  	= _ЛокКонтекст.СтруктураМетаданных.УстройстваMS;
			УстройстваMS 	=_ЛокКонтекст.ЛокЯдро_ПолучитьМассивПодключенныхУстройствБезВинКлиентовНаСервере(пУстройстваMS);
			Если УстройстваMS.Количество() = 1 Тогда
				НазначенныеПользователи = УстройстваMS;
			КонецЕсли;
		ИначеЕсли Не флУказатьПользователя Тогда
			НазначенныеПользователи = ОтобранныеБизнесПроцессы[0].НазначитьПользователю;
		КонецЕсли;
	КонецЕсли;
		
	Если флЛегкоеОблако = Истина И НазначенныеПользователи = Неопределено Тогда
		
		СпособНазначения = ?(ОтобранныеБизнесПроцессы[0].Свойство("СпособНазначения"), ОтобранныеБизнесПроцессы[0].СпособНазначения, "");
		
		пУстройстваMS	= _ЛокКонтекст.ЛокЯдро_ПолучитьМобильныеУстройстваSMARTS();
		пУстройстваMS 	= _ЛокКонтекст.ЛокЯдро_ПодготовитьДеревоУстройствНаСервере(пУстройстваMS);
		
		пПользователиMS = _ЛокКонтекст.СтруктураМетаданных.ПользователиMS;
		пПользователиMS = _ЛокКонтекст.ЛокЯдро_ПодготовитьДеревоПользователейНаСервере(пПользователиMS);
				
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			ФормаСлужебная_ВыборНазначенияВыгрузки = ПолучитьФорму("ОФ_ФормаСлужебная_ВыборНазначенияВыгрузки", ЭтаФорма);
		#Иначе		
			ФормаСлужебная_ВыборНазначенияВыгрузки = ПолучитьФорму(_ЛокКонтекст.ПолноеИмяОбъекта + ".Форма.ФормаСлужебная_ВыборНазначенияВыгрузки", , ЭтаФорма, ЭтаФорма);
			ФормаСлужебная_ВыборНазначенияВыгрузки.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		#КонецЕсли
		
		ФормаСлужебная_ВыборНазначенияВыгрузки.ЗакрыватьПриЗакрытииВладельца 	= Истина;
		ФормаСлужебная_ВыборНазначенияВыгрузки._ЛокКонтекст 					= _ЛокКонтекст;
		Если НесколькоДокументов Тогда
			ТекстЗаголовка = "Выберите вариант выгрузки для документа " +  Строка(ДокументСсылка) + " и еще " + Строка(ОбъектыНазначения.Количество()-1) + " документов";
		Иначе     
			ТекстЗаголовка = "Выберите вариант выгрузки для документа " +  Строка(ДокументСсылка);
		КонецЕсли;
		ФормаСлужебная_ВыборНазначенияВыгрузки.Заголовок 						= ТекстЗаголовка;
		ФормаСлужебная_ВыборНазначенияВыгрузки.ПользователиMSАдрес 				= пПользователиMS;
		ФормаСлужебная_ВыборНазначенияВыгрузки.УстройстваMSАдрес 				= пУстройстваMS;
		ФормаСлужебная_ВыборНазначенияВыгрузки.ВыгрузкаНаУстройство 			= Истина;
		ФормаСлужебная_ВыборНазначенияВыгрузки.ОдиночныйРежимВыделения 			= Истина; 
		ФормаСлужебная_ВыборНазначенияВыгрузки.НесколькоДокументов	 			= НесколькоДокументов;
		ФормаСлужебная_ВыборНазначенияВыгрузки.ИмяБизнесПроцесса 				= ОтобранныеБизнесПроцессы[0].Название;
		ФормаСлужебная_ВыборНазначенияВыгрузки.НазначитьПользователю 			= ОтобранныеБизнесПроцессы[0].НазначитьПользователю;
		
		ДопПараметры = Новый Структура("ВыгрузитьКакОдин,МассивДокументов,ПроверитьНаТСД,ID_БизнесПроцесса,СпособНазначения", 
			ВыгрузитьВОдин, 
			ОбъектыНазначения, 
			ПроверитьНаТСД, 
			ID_БизнесПроцесса, 
			СпособНазначения);
		ОП = Новый ОписаниеОповещения("Служебная_ВыборНазначенияВыгрузкиЗакрытие", ЭтаФорма, ДопПараметры);
		
		ФормаСлужебная_ВыборНазначенияВыгрузки.ОписаниеОповещенияОЗакрытии = ОП;
        	
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			ФормаСлужебная_ВыборНазначенияВыгрузки.ОткрытьМодально();
		#Иначе
			ФормаСлужебная_ВыборНазначенияВыгрузки.Открыть();
		#КонецЕсли
		
		Возврат;
		
	КонецЕсли;
	
	Если (флУказатьПользователя Или флОтправитьНаУстройство) И НазначенныеПользователи = Неопределено Тогда
		
		СпособНазначения = ?(ОтобранныеБизнесПроцессы[0].Свойство("СпособНазначения"), ОтобранныеБизнесПроцессы[0].СпособНазначения, "");
		Если СпособНазначения = "Устройству" Тогда
			пУстройстваMS = _ЛокКонтекст.СтруктураМетаданных.УстройстваMS;
			ПользователиMS =_ЛокКонтекст.ЛокЯдро_ПодготовитьДеревоУстройствНаСервере(пУстройстваMS);
		Иначе
			пПользователиMS = _ЛокКонтекст.СтруктураМетаданных.ПользователиMS;
			ПользователиMS =_ЛокКонтекст.ЛокЯдро_ПодготовитьДеревоПользователейНаСервере(пПользователиMS);
		КонецЕсли;
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			ФормаСлужебная_ВыборПользователяИлиГруппы = ПолучитьФорму("ОФ_ФормаСлужебная_ВыборПользователяИлиГруппы", ЭтаФорма);
		#Иначе		
			ФормаСлужебная_ВыборПользователяИлиГруппы = ПолучитьФорму(_ЛокКонтекст.ПолноеИмяОбъекта + ".Форма.ФормаСлужебная_ВыборПользователяИлиГруппы", , ЭтаФорма, ЭтаФорма);
			ФормаСлужебная_ВыборПользователяИлиГруппы.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		#КонецЕсли
		
		ФормаСлужебная_ВыборПользователяИлиГруппы.ЗакрыватьПриЗакрытииВладельца = Истина;
		ФормаСлужебная_ВыборПользователяИлиГруппы._ЛокКонтекст = _ЛокКонтекст;		
		Если НесколькоДокументов Тогда
			ТекстЗаголовка = "Выберите пользователя для документа " +  Строка(ДокументСсылка) + " и еще " + Строка(ОбъектыНазначения.Количество()-1) + " документов";
		Иначе     
			ТекстЗаголовка = "Выберите пользователя для документа " +  Строка(ДокументСсылка);
		КонецЕсли;
		ФормаСлужебная_ВыборПользователяИлиГруппы.Заголовок = ТекстЗаголовка;				
		ФормаСлужебная_ВыборПользователяИлиГруппы.ПользователиMSАдрес = ПользователиMS;
		ФормаСлужебная_ВыборПользователяИлиГруппы.ОдиночныйРежимВыделения = Истина;
		ФормаСлужебная_ВыборПользователяИлиГруппы.СпособНазначения = СпособНазначения;
		Если СпособНазначения = "Устройству" Тогда                                                                                      
			Если НесколькоДокументов Тогда
				ТекстЗаголовка = "Выберите устройство для документа " +  Строка(ДокументСсылка) + " и еще " + Строка(ОбъектыНазначения.Количество()-1) + " документов";
			Иначе     
				ТекстЗаголовка = "Выберите устройство для документа " +  Строка(ДокументСсылка);
			КонецЕсли;
			ФормаСлужебная_ВыборПользователяИлиГруппы.Заголовок = ТекстЗаголовка;
			ФормаСлужебная_ВыборПользователяИлиГруппы.Элементы["ПользователиMSГруппаПользователь"].Заголовок = "Устройство";
		КонецЕсли;                                                                  
		
		ДопПараметры = Новый Структура("ОбъектыНазначения,ПроверитьНаТСД,ID_БизнесПроцесса,ВыгрузитьВОдин,СпособНазначения", 
			ОбъектыНазначения, 
			ПроверитьНаТСД, 
			ID_БизнесПроцесса, 
			ВыгрузитьВОдин, 
			СпособНазначения);                
			
		ОП = Новый ОписаниеОповещения("Служебная_ВыборПользователяИлиГруппыЗакрытие", ЭтаФорма, ДопПараметры);
		ФормаСлужебная_ВыборПользователяИлиГруппы.ОписаниеОповещенияОЗакрытии = ОП;
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			ФормаСлужебная_ВыборПользователяИлиГруппы.ОткрытьМодально();
		#Иначе
			ФормаСлужебная_ВыборПользователяИлиГруппы.Открыть();
		#КонецЕсли
		
		Возврат;
		
	КонецЕсли;
	
	Если (флУказатьПользователя Или флОтправитьНаУстройство) И НазначенныеПользователи[0].Ид = "Выгружать всем" Тогда
		НазначенныеПользователи = Неопределено;
	КонецЕсли;
	
	Если ВыгрузитьВОдин Тогда
		_ЛокКонтекст.ЛокЯдро_ВыгрузитьДокументВБазуSMARTS(ОбъектыНазначения, ID_БизнесПроцесса,НазначенныеПользователи,"");
		Сообщить("Выделенные документы объединены и выгружены в ТСД");
	Иначе
		Для Каждого ДокументКВыгрузке Из ОбъектыНазначения Цикл
			_ЛокКонтекст.ЛокЯдро_ВыгрузитьДокументВБазуSMARTS(ДокументКВыгрузке, ID_БизнесПроцесса,НазначенныеПользователи,"");
			Сообщить("Документ """ + Строка(ДокументКВыгрузке) + """ отправлен в ТСД");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИдДокумента(ДокументСсылка)
	Возврат XMLСтрока(ДокументСсылка);
КонецФункции

&НаСервере
Функция ПолучитьТипДокументаИзСсылки(ДокументСсылка)
	Возврат  ДокументСсылка.Метаданные().Имя;
КонецФункции

// Вызывает процедуру выгрузки документа в базу Mobile Smarts после выбора бизнес-процесса
//
// Параметры:
//	РезультатВыбора	- Структура - содержит:
//		* Данные - Структура - содержит данные выбранного бизнес-процесса
//	ДопПараметры - Структура - содержит:
//		* ОбъектыНазначения - Массив - Ссылки, для которых выполняется команда
//		* ПроверитьНаТСД - Булево
//		* ВыгрузитьВОдин - Булево
&НаКлиенте
Процедура ФормаСлужебная_ВыборБПИзТаблицыЗакрытие(РезультатВыбора, ДопПараметры) Экспорт
	
	ОбъектыНазначения 	= ДопПараметры.ОбъектыНазначения;
	ПроверитьНаТСД 		= ДопПараметры.ПроверитьНаТСД;
	ВыгрузитьВОдин		= ДопПараметры.ВыгрузитьВОдин;
	
	Если ЗначениеЗаполнено(РезультатВыбора) И ЗначениеЗаполнено(РезультатВыбора.Данные) Тогда
		Если ЗначениеЗаполнено(РезультатВыбора.Данные.ID_БизнесПроцесса) Тогда
			ID_БизнесПроцесса = РезультатВыбора.Данные.ID_БизнесПроцесса;			
			ВыгрузитьДокументВстраиваемаяКоманда(ОбъектыНазначения,ID_БизнесПроцесса,ПроверитьНаТСД,,ВыгрузитьВОдин);
		Иначе
			Сообщить("У выбранного бизнес-процесса """ + СокрЛП(РезультатВыбора.Данные.Название) + """ не заполнен ID");		
		КонецЕсли;			
	КонецЕсли;
	
КонецПроцедуры

// Вызывает процедуру загрузки документа из базы Mobile Smarts после выбора бизнес-процесса
//
// Параметры:
//	РезультатВыбора	- Структура - содержит:
//		* Данные - Структура - содержит данные выбранного бизнес-процесса
//	ДопПараметры - Структура - содержит:
//		* ОбъектыНазначения - Массив - Ссылки, для которых выполняется команда
//		* ИдДокументаСмартс - Строка
&НаКлиенте
Процедура ФормаСлужебная_ВыборБППриЗагрузкеИзТаблицыЗакрытие(РезультатВыбора, ДопПараметры) Экспорт
	
	ОбъектыНазначения 	= ДопПараметры.ОбъектыНазначения;
	ИдДокументаСмартс 	= ДопПараметры.ИдДокументаСмартс;	
	
	Если ЗначениеЗаполнено(РезультатВыбора) И ЗначениеЗаполнено(РезультатВыбора.Данные) Тогда
		Если ЗначениеЗаполнено(РезультатВыбора.Данные.ID_БизнесПроцесса) Тогда
			ID_БизнесПроцесса = РезультатВыбора.Данные.ID_БизнесПроцесса;			
			ЗагрузитьДокументыСТСД(ОбъектыНазначения,ИдДокументаСмартс,ID_БизнесПроцесса);
		Иначе
			Сообщить("У выбранного бизнес-процесса """ + СокрЛП(РезультатВыбора.Данные.Название) + """ не заполнен ID");		
		КонецЕсли;			
	КонецЕсли;
	
КонецПроцедуры

// Вызывает процедуру выгрузки документа в базу Mobile Smarts после выбора пользователя/устройства,
// которому назначается документ
//
// Параметры:
//	РезультатРедактирования	- Массив из Строка - Массив идентификаторов выбранных пользователей/устройств
//	ДопПараметры - Структура - содержит:
//		* ОбъектыНазначения - Массив - Ссылки, для которых выполняется команда
//		* ПроверитьНаТСД - Булево
//		* ID_БизнесПроцесса - Строка
//		* ВыгрузитьВОдин - Булево
&НаКлиенте
Процедура Служебная_ВыборПользователяИлиГруппыЗакрытие(РезультатРедактирования,ДопПараметры) Экспорт
	
	ОбъектыНазначения 		= ДопПараметры.ОбъектыНазначения;
	ПроверитьНаТСД 			= ДопПараметры.ПроверитьНаТСД;
	ID_БизнесПроцесса 		= ДопПараметры.ID_БизнесПроцесса;	
	ВыгрузитьВОдин			= ДопПараметры.ВыгрузитьВОдин;
	
	Если РезультатРедактирования <> Неопределено 
		И ТипЗнч(РезультатРедактирования) = Тип("Массив")
		И РезультатРедактирования.Количество() > 0 Тогда		
		НазначенныеПользователи = РезультатРедактирования;
					
		ВыгрузитьДокументВстраиваемаяКоманда(ОбъектыНазначения, ID_БизнесПроцесса, ПроверитьНаТСД, НазначенныеПользователи, ВыгрузитьВОдин);		
	Иначе  
		Если ОбъектыНазначения.Количество() > 1 Тогда
			СообщениеПользователю 	= "Не выбран пользователь для работы с документами! Документы не выгружены в ТСД.";
			СообщениеУстройство		= "Не выбрано устройство для работы с документами! Документы не выгружены в ТСД.";
		Иначе                 
			СообщениеПользователю 	= "Не выбран пользователь для работы с документом! Документ не выгружен в ТСД.";
			СообщениеУстройство		= "Не выбрано устройство для работы с документом! Документ не выгружен в ТСД.";
		КонецЕсли;
		
		Если ДопПараметры.Свойство("СпособНазначения") И ДопПараметры.СпособНазначения = "Устройству" Тогда
			Сообщить(СообщениеУстройство);			
		Иначе
			Сообщить(СообщениеПользователю);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

// Вызывает процедуру выгрузки документа в базу Mobile Smarts после ответа на вопрос
// о повторной выгрузке документа
//
// Параметры:
//	РезультатВопроса - КодВозвратаДиалога - ответ на вопрос о повторной выгрузке документа
//	ДопПараметры - Структура - содержит:
//		* ОбъектыНазначения - Массив - Ссылки, для которых выполняется команда
//		* ВыгрузитьВОдин - Булево
&НаКлиенте
Процедура ОповещениеВопросПовторВыгрузкиЗавершение(РезультатВопроса, ДопПараметры) Экспорт
	
	ВыгрузитьВОдин = ДопПараметры.ВыгрузитьВОдин;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыгрузитьДокументВстраиваемаяКоманда(ДопПараметры.ОбъектыНазначения,,Ложь,,ВыгрузитьВОдин);
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда                         
		ВыгрузитьДокументВстраиваемаяКоманда(ДопПараметры.МассивДокументовКВыгрузке,,Ложь,,ВыгрузитьВОдин);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Служебная_ВыборНазначенияВыгрузкиЗакрытие(РезультатРедактирования, СтруктураПараметров) Экспорт
	
	ВыгрузитьКакОдин  = ?(СтруктураПараметров.Свойство("ВыгрузитьКакОдин"), СтруктураПараметров.ВыгрузитьКакОдин, Ложь);
	МассивДокументов  = СтруктураПараметров.МассивДокументов;
	ID_БизнесПроцесса = СтруктураПараметров.ID_БизнесПроцесса;
	
	//Если Не ВыгрузитьКакОдин Тогда
	//	МассивДокументов = СтруктураПараметров.МассивДокументов;		
	//Иначе
	//	МассивДокументов = Новый Массив;                             		
	//КонецЕсли;
	
	Если ТипЗнч(РезультатРедактирования) = Тип("Строка") Тогда
		
		Если ЭтоАдресВременногоХранилища(РезультатРедактирования) Тогда
			НазначенныеПользователи = ПолучитьИзВременногоХранилища(РезультатРедактирования);
		Иначе
			НазначенныеПользователи = _ЛокКонтекст.ЛокЯдро_ПолучениеУстройстваПоПинкодуДляВыгрузкиДокумента(РезультатРедактирования, ?(ЕстьЧастнаяБаза, "Частная", "Основная"));
		КонецЕсли;
		
		Если НазначенныеПользователи <> Неопределено 
			И ТипЗнч(НазначенныеПользователи) = Тип("Массив")
			И НазначенныеПользователи.Количество() > 0 Тогда
			
			Если ВыгрузитьКакОдин Тогда				
				_ЛокКонтекст.ЛокЯдро_ВыгрузитьДокументВБазуSMARTS(МассивДокументов, ID_БизнесПроцесса, НазначенныеПользователи, "");
				Сообщить("Выделенные документы объединены и выгружены в ТСД");
			Иначе
				Для Каждого ДокументКВыгрузке Из МассивДокументов Цикл
					_ЛокКонтекст.ЛокЯдро_ВыгрузитьДокументВБазуSMARTS(ДокументКВыгрузке, ID_БизнесПроцесса, НазначенныеПользователи, "");
					Сообщить("Документ """ + Строка(ДокументКВыгрузке) + """ отправлен в ТСД");
				КонецЦикла;
			КонецЕсли;    						
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(РезультатРедактирования) = Тип("Массив") Тогда 
		
		Если РезультатРедактирования.Количество() > 0 Тогда	
			
			НазначенныеПользователи = РезультатРедактирования;				
			
			Если ВыгрузитьКакОдин Тогда				
				_ЛокКонтекст.ЛокЯдро_ВыгрузитьДокументВБазуSMARTS(МассивДокументов, ID_БизнесПроцесса, НазначенныеПользователи, "");
				Сообщить("Выделенные документы объединены и выгружены в ТСД");
			Иначе
				Для Каждого ДокументКВыгрузке Из МассивДокументов Цикл
					_ЛокКонтекст.ЛокЯдро_ВыгрузитьДокументВБазуSMARTS(ДокументКВыгрузке, ID_БизнесПроцесса, НазначенныеПользователи, "");
					Сообщить("Документ """ + Строка(ДокументКВыгрузке) + """ отправлен в ТСД");
				КонецЦикла;
			КонецЕсли;    						
			
		Иначе
			
			Если МассивДокументов.Количество() > 1 Тогда
				ОкончаниеСообщения 	= "документами! Документы не выгружены в ТСД.";
			Иначе                 
				ОкончаниеСообщения 	= "документом! Документ не выгружен в ТСД.";				
			КонецЕсли;
			
			Если СтруктураПараметров.Свойство("СпособНазначения") И СтруктураПараметров.СпособНазначения = "Устройству" Тогда
				СообщениеПользователю = "Не выбрано устройство для работы с " + ОкончаниеСообщения;
			Иначе
				СообщениеПользователю = "Не выбран пользователь для работы с " + ОкончаниеСообщения;
			КонецЕсли;
			
		КонецЕсли; 
		
	ИначеЕсли РезультатРедактирования = Ложь Тогда
		
		СообщениеПользователю = "Не введен пин-код для выбора устройства!";
		СтруктураПараметров.Вставить("ВводПинКода", Истина);
		
	КонецЕсли;		
	
	
КонецПроцедуры

#КонецОбласти

#Область КомандыЗагрузки

// Вызывает процедуру загрузки документа из базы Mobile Smarts в открытый документ 1С
//
// Параметры:
//	ОткрытаяФормаДокумента - Форма
//	ИдДокументаСмартс - Строка
//	ID_БизнесПроцесса - Строка
//
&НаКлиенте
Процедура ЗагрузитьВОткрытыйДокумент(ОткрытаяФормаДокумента, ИдДокументаСмартс = Неопределено, ID_БизнесПроцесса = Неопределено) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		СсылкаНаДокумент = ОткрытаяФормаДокумента.ДокументОбъект.Ссылка;
	#Иначе
		СсылкаНаДокумент = ОткрытаяФормаДокумента.Объект.Ссылка;
	#КонецЕсли
	
	ТипДокумента1С = ПолучитьТипДокументаИзСсылки(СсылкаНаДокумент);

	ИдДокумента = ПолучитьИдДокумента(СсылкаНаДокумент);
		
	тзДокументыНаТСД = _ЛокКонтекст.ЛокЯдро_ПолучитьСписокДокументовНаСервереSMARTS();
	// Поищем, может этот документ был выгружен в тсд
	флДокументНайден = Ложь;
	флДокументВыбран = Ложь;
	Для Каждого СтрокаТЗ ИЗ тзДокументыНаТСД Цикл
		Если СтрокаТЗ.Свойство("ЭтоТаблицаЗначений") Тогда
			Продолжить;
		КонецЕсли;
		
		ИдДокументаВбазе = СтрокаТЗ.Ид;
		Если Найти(ИдДокументаВбазе,"#") > 0
			И Найти(ИдДокумента,"#") = 0 Тогда
			ИдДокументаВБазе = Лев(ИдДокументаВбазе, Найти(ИдДокументаВбазе,"#")-1);
		КонецЕсли;
		
		Если ИдДокументаВБазе = ИдДокумента Тогда      		
			СтрокаДокумента = СтрокаТЗ;		
			ID_БизнесПроцесса = СтрокаДокумента.НастройкаБизнесПроцесса;
			флДокументНайден = Истина;
			Прервать;
		КонецЕсли;
		
		Если ИдДокументаСмартс <> Неопределено И ИдДокументаВБазе = ИдДокументаСмартс Тогда			
			СтрокаДокумента = СтрокаТЗ;			                       			
			флДокументВыбран = Истина;
			Прервать;
		КонецЕсли;   
	КонецЦикла; 
	
	Если флДокументНайден Или флДокументВыбран Тогда
		Если СтрокаДокумента.Завершен = Ложь Тогда
			Сообщить("Работа с текущим документом не завершена на тсд.");			
			Возврат;
		КонецЕсли;
		
		НастройкиОбмена = _ЛокКонтекст.ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("НастройкиБизнесПроцессов");
		
		Если ID_БизнесПроцесса = Неопределено Тогда                		
			// Документ SMARTS на ТСД выбран для загрузки в открытый документ, но необходимо определить БП, по которому его грузить		
			НайденныеСтроки = Новый Массив;
			
			Для Каждого НастройкаОбмена Из НастройкиОбмена Цикл
				Если НастройкаОбмена.Свойство("Используется") И НастройкаОбмена.Используется
					И (НастройкаОбмена.Свойство("ТипДокументаMS") И НастройкаОбмена.ТипДокументаMS = СокрЛП(СтрокаДокумента.ИмяТипаДокумента))
					И (НастройкаОбмена.Свойство("ТипРезультирующегоДокумента1С") И НастройкаОбмена.ТипРезультирующегоДокумента1С = ТипДокумента1С) Тогда					
					НайденныеСтроки.Добавить(НастройкаОбмена);
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ НайденныеСтроки.Количество() Тогда
				
				Сообщить("Не удалось подобрать настройку бизнес-процесса для загрузки выбранного документа в текущий. 
				|Проверьте настройки БП или выберите другой документ.");			
				Возврат;
				
			ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
				
				СтрокаБП			= НайденныеСтроки[0];
				ID_БизнесПроцесса 	= СтрокаБП.ID_БизнесПроцесса;
				
			ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
				
				ПереданнаяТаблица = Новый Массив;
				ПереданнаяТаблица.Добавить(Новый Структура("ЭтоТаблицаЗначений,КолонкиТаблицыЗначений",Истина,"Название,ID_БизнесПроцесса,ТипРезультирующегоДокумента1С,ТипДокументаMS,ЗагружатьВТотЖе,ТипИсходногоДокумента1С"));
				
				Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					НоваяСтруктура = Новый Структура();
					НоваяСтруктура.Вставить("Название",							НайденнаяСтрока.Название);
					НоваяСтруктура.Вставить("ID_БизнесПроцесса",				НайденнаяСтрока.ID_БизнесПроцесса);
					НоваяСтруктура.Вставить("ТипРезультирующегоДокумента1С",	НайденнаяСтрока.ТипРезультирующегоДокумента1С);
					НоваяСтруктура.Вставить("ТипДокументаMS",					НайденнаяСтрока.ТипДокументаMS);
					НоваяСтруктура.Вставить("ТипИсходногоДокумента1С",			НайденнаяСтрока.ТипИсходногоДокумента1С);
					НоваяСтруктура.Вставить("ЗагружатьВТотЖе",					НайденнаяСтрока.ЗагружатьВТотЖе);
					
					ПереданнаяТаблица.Добавить(НоваяСтруктура);
				КонецЦикла; 			
				
				#Если ТолстыйКлиентОбычноеПриложение Тогда
					ФормаСлужебная_ВыборСтрокиИзТаблицы = ПолучитьФорму("ОФ_ФормаСлужебная_ВыборСтрокиИзТаблицы", ЭтаФорма);
				#Иначе				
					ФормаСлужебная_ВыборСтрокиИзТаблицы = ПолучитьФорму(_ЛокКонтекст.ПолноеИмяОбъекта + ".Форма.ФормаСлужебная_ВыборСтрокиИзТаблицы", , ЭтаФорма, ЭтаФорма);
					ФормаСлужебная_ВыборСтрокиИзТаблицы.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
				#КонецЕсли				
				
				ФормаСлужебная_ВыборСтрокиИзТаблицы.ИмяТаблицы 			= "БизнесПроцессыДляЗагрузки";
				ФормаСлужебная_ВыборСтрокиИзТаблицы._ЛокКонтекст 		= _ЛокКонтекст;
				ФормаСлужебная_ВыборСтрокиИзТаблицы.ПереданнаяТаблица 	= ПереданнаяТаблица;
				
				ДопПараметры = Новый Структура;
				ДопПараметры.Вставить("ОбъектыНазначения",	ОткрытаяФормаДокумента);
				ДопПараметры.Вставить("ИдДокумента",		?(флДокументВыбран, ИдДокументаСмартс, Неопределено));      			
				
				ОП = Новый ОписаниеОповещения("ОповещениеОткрытьОкноВыбораБПЗакрытие", ЭтаФорма, ДопПараметры);
				ФормаСлужебная_ВыборСтрокиИзТаблицы.ОписаниеОповещенияОЗакрытии = ОП;
				
				#Если ТолстыйКлиентОбычноеПриложение Тогда
					ФормаСлужебная_ВыборСтрокиИзТаблицы.ОткрытьМодально();
				#Иначе
					ФормаСлужебная_ВыборСтрокиИзТаблицы.Открыть();
				#КонецЕсли
				
				Возврат; 
				
			КонецЕсли;
			
		Иначе
			
			СтрокиБП = _ЛокКонтекст.ЛокЯдро_НайтиВМассивеСтруктурПоОтбору(НастройкиОбмена, Новый Структура("ID_БизнесПроцесса",ID_БизнесПроцесса));
			Если СтрокиБП <> Неопределено
				И СтрокиБП.Количество() <> 0 Тогда
				СтрокаБП = СтрокиБП[0];
			Иначе
				Сообщить("Не удалось подобрать настройку бизнес-процесса для загрузки выбранного документа в текущий. 
				|Проверьте настройки БП или выберите другой документ.");			
				Возврат;	
			КонецЕсли;
			
			// +++ Если тип результирующего документа в БП не совпадает с документом, в котором вызвана команда, то подберем подходящий по типу документа мс и результирующему 
			Если СтрокаБП.ТипРезультирующегоДокумента1С <> ТипДокумента1С Тогда
				СтрокиБП = _ЛокКонтекст.ЛокЯдро_НайтиВМассивеСтруктурПоОтбору(НастройкиОбмена, Новый Структура("Используется,ТипИсходногоДокумента1С,ТипРезультирующегоДокумента1С,ТипДокументаMS",Истина,"",ТипДокумента1С,СтрокаДокумента.ИмяТипаДокумента));
				Если СтрокиБП = Неопределено
					Или СтрокиБП.Количество() = 0 Тогда
					СтрокиБП = _ЛокКонтекст.ЛокЯдро_НайтиВМассивеСтруктурПоОтбору(НастройкиОбмена, Новый Структура("Используется,ТипИсходногоДокумента1С,ТипРезультирующегоДокумента1С,ТипДокументаMS",Истина,ТипДокумента1С,ТипДокумента1С,СтрокаДокумента.ИмяТипаДокумента));
					Если СтрокиБП = Неопределено
						Или СтрокиБП.Количество() = 0 Тогда
						Сообщить("Не удалось подобрать настройку бизнес-процесса для загрузки выбранного документа в текущий. 
						|Проверьте настройки БП или выберите другой документ.");			
						Возврат;	
					КонецЕсли;
				КонецЕсли;
				СтрокаБП = СтрокиБП[0];
				ID_БизнесПроцесса = СтрокаБП.ID_БизнесПроцесса;
			КонецЕсли;
			// ---
			
		КонецЕсли;
			
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			ДанныеФормы = ОткрытаяФормаДокумента.ДокументОбъект;
		#Иначе
			ДанныеФормы = ОткрытаяФормаДокумента.Объект;
		#КонецЕсли
		
		ДокументДляЗаполнения = Новый Структура("Данные",ДанныеФормы);
		
		РезультатЗаписи = _ЛокКонтекст.ЛокЯдро_СформироватьИЗаписатьДокументВБазу1С_ПоID(СтрокаДокумента.Ид, СтрокаДокумента.ИмяТипаДокумента, ID_БизнесПроцесса, СтрокаБП, ДокументДляЗаполнения);
		
		Если РезультатЗаписи.Статус = Истина Тогда
			Если РезультатЗаписи.ДокументЗаписан = Истина Тогда
				ОткрытаяФормаДокумента.Прочитать();	
			Иначе
				#Если ТолстыйКлиентОбычноеПриложение Тогда
					ЗаполнитьДокументНаСервере(ОткрытаяФормаДокумента,РезультатЗаписи);
				#Иначе	
					ЗаполнитьДокументНаСервере(ДанныеФормы,РезультатЗаписи);
					КопироватьДанныеФормы(ДанныеФормы, ОткрытаяФормаДокумента.Объект);
					ОткрытаяФормаДокумента.Модифицированность = Истина;
				#КонецЕсли	
			КонецЕсли;
			
			_ЛокКонтекст.ЛокЯдро_ВыполнитьОбработчикПослеОткрытияФормыДокумента1С(ОткрытаяФормаДокумента, СтрокаБП, РезультатЗаписи);
			
			ЗадатьВопросНаУдалениеДокументаПослеЗагрузки(СтрокаДокумента);
		КонецЕсли;			
		
	Иначе
		ОткрытьОкноВыбораДокументаСмартсНачало(ОткрытаяФормаДокумента,ТипДокумента1С,"ЗагрузитьВОткрытыйДокумент",тзДокументыНаТСД);
	КонецЕсли;
			
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДокументНаСервере(ДанныеФормы,РезультатЗаписи)
	Если ЭтоАдресВременногоХранилища(РезультатЗаписи.Данные) Тогда
		Значение = ПолучитьИзВременногоХранилища(РезультатЗаписи.Данные);
	Иначе
		Значение = РезультатЗаписи.Данные;
	КонецЕСли;
		
	Если ТипЗнч(Значение) = Тип("Структура") И Значение.Свойство("Объект") Тогда
		Значение = Значение.Объект;
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Значение = Значение.ПолучитьОбъект();
	КонецЕсли;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ДанныеФормы.ДокументОбъект = Значение;				
	#Иначе
		ЗначениеВДанныеФормы(Значение,ДанныеФормы);
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОкноВыбораДокументаСмартсНачало(ОбъектыНазначения,ТипДокумента1С, ПроцедураКВыполнениюПослеВыбора, тзДокументыНаТСД = Неопределено)
	
	Если тзДокументыНаТСД = Неопределено Тогда
		тзДокументыНаТСД = _ЛокКонтекст.ЛокЯдро_ПолучитьСписокДокументовНаСервереSMARTS();
	КонецЕсли;
	
	НастройкиОбмена = _ЛокКонтекст.ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("НастройкиБизнесПроцессов");
	СтрокиБП = _ЛокКонтекст.ЛокЯдро_НайтиВМассивеСтруктурПоОтбору(НастройкиОбмена, Новый Структура("ТипРезультирующегоДокумента1С",ТипДокумента1С));
	
	// Сформируем список возможных операций смартс, для которых настроены БП для загрузки в текущий тип документа 1С
	МассивТиповДокументовМС = Новый Массив;	
	Для Каждого СтрокаБП из СтрокиБП Цикл
		Если МассивТиповДокументовМС.Найти(СтрокаБП.ТипДокументаMS) = Неопределено Тогда
			МассивТиповДокументовМС.Добавить(СтрокаБП.ТипДокументаMS);
		КонецЕсли;
	КонецЦикла;
	
	ПереданнаяТаблица = Новый Массив;
	ПереданнаяТаблица.Добавить(Новый Структура("ЭтоТаблицаЗначений,КолонкиТаблицыЗначений",Истина,"ДатаЗавершения,Имя,Ид,ИмяПользователя,ИмяТипаДокумента,ИмяБП,СтрокиФактКоличество"));
	
	Для каждого ДокументТСД Из тзДокументыНаТСД Цикл
		Если ДокументТСД.Свойство("ЭтоТаблицаЗначений") Тогда
			Продолжить;
		КонецЕсли;
		
		Если МассивТиповДокументовМС.Найти(ДокументТСД.ИмяТипаДокумента) <> Неопределено
			И ДокументТСД.Завершен = Истина Тогда			
			НоваяСтруктура = Новый Структура("ДатаЗавершения,Имя,Ид,ИмяПользователя,ИмяТипаДокумента,ИмяБП,СтрокиФактКоличество");
			ЗаполнитьЗначенияСвойств(НоваяСтруктура, ДокументТСД);
			
			ПереданнаяТаблица.Добавить(НоваяСтруктура);
		КонецЕсли;
	КонецЦикла; 			
			
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ФормаСлужебная_ВыборСтрокиИзТаблицы = ПолучитьФорму("ОФ_ФормаСлужебная_ВыборСтрокиИзТаблицы", ЭтаФорма);
	#Иначе
		ФормаСлужебная_ВыборСтрокиИзТаблицы = ПолучитьФорму(_ЛокКонтекст.ПолноеИмяОбъекта + ".Форма.ФормаСлужебная_ВыборСтрокиИзТаблицы", ,, ЭтаФорма);
		ФормаСлужебная_ВыборСтрокиИзТаблицы.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	#КонецЕсли
	
	ФормаСлужебная_ВыборСтрокиИзТаблицы.ИмяТаблицы = "ВыборДокументаТСД";
	ФормаСлужебная_ВыборСтрокиИзТаблицы._ЛокКонтекст = _ЛокКонтекст;
	ФормаСлужебная_ВыборСтрокиИзТаблицы.ПереданнаяТаблица = ПереданнаяТаблица;
	ФормаСлужебная_ВыборСтрокиИзТаблицы.ЗакрыватьПриЗакрытииВладельца = Ложь;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ОбъектыНазначения",ОбъектыНазначения);
	ДопПараметры.Вставить("ПроцедураКВыполнениюПослеВыбора",ПроцедураКВыполнениюПослеВыбора);
	ОП = Новый ОписаниеОповещения("ОповещениеОткрытьОкноВыбораДокументаСмартсЗавершение",ЭтаФорма,ДопПараметры);
	
	ФормаСлужебная_ВыборСтрокиИзТаблицы.ОписаниеОповещенияОЗакрытии = ОП;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ФормаСлужебная_ВыборСтрокиИзТаблицы.ОткрытьМодально();
	#Иначе
		ФормаСлужебная_ВыборСтрокиИзТаблицы.Открыть();
	#КонецЕсли
		
КонецПроцедуры

// Вызывает процедуру к выполнению после выбора документа Mobile Smarts
//
// Параметры:
//	РезультатВыбора - Структура - содержит:
//		* Данные - Структура - содержит данные выбранного документа
//	ДопПараметры - Структура - содержит:
//		* ОбъектыНазначения - Массив - Ссылки, для которых выполняется команда
//		* ПроцедураКВыполнениюПослеВыбора - Строка
&НаКлиенте
Процедура ОповещениеОткрытьОкноВыбораДокументаСмартсЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	ОбъектыНазначения 					= ДопПараметры.ОбъектыНазначения;
	ПроцедураКВыполнениюПослеВыбора 	= ДопПараметры.ПроцедураКВыполнениюПослеВыбора;	
	
	Если ЗначениеЗаполнено(РезультатВыбора) И ЗначениеЗаполнено(РезультатВыбора.Данные) Тогда
		ИдДокумента = РезультатВыбора.Данные.Ид;
		
		#Область НесовместимыйКодFresh
		Выполнить(ПроцедураКВыполнениюПослеВыбора+"(ОбъектыНазначения,ИдДокумента)");
		#КонецОбласти //НесовместимыйКодFresh
		#Область СовместимыйКодFresh
		//Если ПроцедураКВыполнениюПослеВыбора = "ЗагрузитьДокументыСТСД" Тогда
		//	ЗагрузитьДокументыСТСД(ОбъектыНазначения, ИдДокумента);
		//ИначеЕсли ПроцедураКВыполнениюПослеВыбора = "ЗагрузитьВОткрытыйДокумент" Тогда
		//	ЗагрузитьВОткрытыйДокумент(ОбъектыНазначения, ИдДокумента);
		//КонецЕсли;
		#КонецОбласти //СовместимыйКодFresh
	КонецЕсли;
				
КонецПроцедуры

// Вызывает процедуру к выполнению после выбора подходящего бизнес-процесса для документа Mobile Smarts
//
// Параметры:
//	РезультатВыбора - Структура - содержит:
//		* Данные - Структура - содержит данные выбранного документа
//	ДопПараметры - Структура - содержит:
//		* ОбъектыНазначения - Массив - Ссылки, для которых выполняется команда
//		* ИдДокумента - Строка - Идентификатор документа загрузки
&НаКлиенте
Процедура ОповещениеОткрытьОкноВыбораБПЗакрытие(РезультатВыбора, ДопПараметры) Экспорт
	
	ОбъектыНазначения	= ДопПараметры.ОбъектыНазначения;	
	ИдДокумента 		= ДопПараметры.ИдДокумента;	
	
	Если ЗначениеЗаполнено(РезультатВыбора) И ЗначениеЗаполнено(РезультатВыбора.Данные) Тогда
		ID_БизнесПроцесса = РезультатВыбора.Данные.ID_БизнесПроцесса;	
		ЗагрузитьВОткрытыйДокумент(ОбъектыНазначения, ИдДокумента, ID_БизнесПроцесса);
	КонецЕсли;	
			
КонецПроцедуры

// Выполняет загрузку документа из базы Mobile Smarts
//
// Параметры:
//	ОбъектыНазначения - Массив - Ссылки, для которых выполняется команда
//  ИдДокументаСмартс - Строка - идентификатор документа Mobile Smarts
//  ВыбранныйБизнесПроцесс - Строка - идентификатор выбранного бизнес-процесса
&НаКлиенте
Процедура ЗагрузитьДокументыСТСД(ОбъектыНазначения,ИдДокументаСмартс = Неопределено, ВыбранныйБизнесПроцесс = Неопределено) Экспорт
	
	// 	Ссылка на документ нам нужна чтоб определить тип документов, с формы списка которых пришла команда.
	СсылкаНаДокумент = ОбъектыНазначения;
	ТипДокумента1С = ПолучитьТипДокументаИзСсылки(СсылкаНаДокумент);
	
	Если ИдДокументаСмартс = Неопределено Тогда
				
		ОткрытьОкноВыбораДокументаСмартсНачало(ОбъектыНазначения,ТипДокумента1С,"ЗагрузитьДокументыСТСД");
	Иначе
		тзДокументыНаТСД = _ЛокКонтекст.ЛокЯдро_ПолучитьСписокДокументовНаСервереSMARTS();	
		Для Каждого СтрокаТЗ ИЗ тзДокументыНаТСД Цикл
			Если СтрокаТЗ.Свойство("ЭтоТаблицаЗначений") Тогда
				Продолжить;
			КонецЕсли;
					
			Если СтрокаТЗ.Ид = ИдДокументаСмартс Тогда				
				СтрокаДокумента = СтрокаТЗ;							
				Прервать;
			КонецЕсли;		
		КонецЦикла;
				
		ID_БизнесПроцесса = СтрокаДокумента.НастройкаБизнесПроцесса;
		Если Не ЗначениеЗаполнено(ID_БизнесПроцесса) Тогда
			ID_БизнесПроцесса = ВыбранныйБизнесПроцесс;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(ID_БизнесПроцесса) Тогда
			НастройкиОбмена = _ЛокКонтекст.ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("НастройкиБизнесПроцессов");
			НайденныеСтроки = _ЛокКонтекст.ЛокЯдро_НайтиВМассивеСтруктурПоОтбору(НастройкиОбмена, Новый Структура("ТипРезультирующегоДокумента1С,ТипДокументаMS",ТипДокумента1С,СтрокаДокумента.ИмяТипаДокумента));

			Если НЕ НайденныеСтроки.Количество() Тогда			
				Сообщить("Номер ошибки #INTEX001. Для данного типа документа нет настроенного или активного бизнес-процесса, настройте бизнес-процесс в настройках обработки для 1С 
				|или загрузите по произвольному существующему бизнес-процессу через контекстное меню по нажатию правой кнопки мыши. Подробнее - https://www.cleverence.ru/support/97289/");
				Возврат;			
			ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
				
				ID_БизнесПроцесса = НайденныеСтроки[0].ID_БизнесПроцесса;
				
			ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
				
				ПереданнаяТаблица = Новый Массив;
				ПереданнаяТаблица.Добавить(Новый Структура("ЭтоТаблицаЗначений,КолонкиТаблицыЗначений",Истина,"Название,ID_БизнесПроцесса,ТипРезультирующегоДокумента1С,ТипДокументаMS,ЗагружатьВТотЖе,ТипИсходногоДокумента1С"));
				
				Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					НоваяСтруктура = Новый Структура();
					НоваяСтруктура.Вставить("Название",НайденнаяСтрока.Название);
					НоваяСтруктура.Вставить("ID_БизнесПроцесса",НайденнаяСтрока.ID_БизнесПроцесса);
					НоваяСтруктура.Вставить("ТипРезультирующегоДокумента1С",НайденнаяСтрока.ТипРезультирующегоДокумента1С);
					НоваяСтруктура.Вставить("ТипДокументаMS",НайденнаяСтрока.ТипДокументаMS);
					НоваяСтруктура.Вставить("ТипИсходногоДокумента1С",НайденнаяСтрока.ТипИсходногоДокумента1С);
					НоваяСтруктура.Вставить("ЗагружатьВТотЖе",НайденнаяСтрока.ЗагружатьВТотЖе);
					
					ПереданнаяТаблица.Добавить(НоваяСтруктура);
				КонецЦикла; 			
				
				#Если ТолстыйКлиентОбычноеПриложение Тогда
					ФормаСлужебная_ВыборСтрокиИзТаблицы = ПолучитьФорму("ОФ_ФормаСлужебная_ВыборСтрокиИзТаблицы", ЭтаФорма);	
				#Иначе
					ФормаСлужебная_ВыборСтрокиИзТаблицы = ПолучитьФорму(_ЛокКонтекст.ПолноеИмяОбъекта + ".Форма.ФормаСлужебная_ВыборСтрокиИзТаблицы", ,, ЭтаФорма);
					ФормаСлужебная_ВыборСтрокиИзТаблицы.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
				#КонецЕсли
				
				ФормаСлужебная_ВыборСтрокиИзТаблицы.ИмяТаблицы = "БизнесПроцессыДляЗагрузки";
				ФормаСлужебная_ВыборСтрокиИзТаблицы._ЛокКонтекст = _ЛокКонтекст;
				ФормаСлужебная_ВыборСтрокиИзТаблицы.ПереданнаяТаблица = ПереданнаяТаблица;
				ФормаСлужебная_ВыборСтрокиИзТаблицы.ЗакрыватьПриЗакрытииВладельца = Ложь;
				
				ДопПараметры = Новый Структура;
				ДопПараметры.Вставить("ОбъектыНазначения",ОбъектыНазначения);				
				ДопПараметры.Вставить("ИдДокументаСмартс",ИдДокументаСмартс);
				ОП = Новый ОписаниеОповещения("ФормаСлужебная_ВыборБППриЗагрузкеИзТаблицыЗакрытие",ЭтаФорма,ДопПараметры);
				
				ФормаСлужебная_ВыборСтрокиИзТаблицы.ОписаниеОповещенияОЗакрытии = ОП;
				
				#Если ТолстыйКлиентОбычноеПриложение Тогда
					ФормаСлужебная_ВыборСтрокиИзТаблицы.ОткрытьМодально();
				#Иначе
					ФормаСлужебная_ВыборСтрокиИзТаблицы.Открыть();
				#КонецЕсли
				
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		НастройкиОбмена = _ЛокКонтекст.ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("НастройкиБизнесПроцессов");
		СтрокиБП = _ЛокКонтекст.ЛокЯдро_НайтиВМассивеСтруктурПоОтбору(НастройкиОбмена, Новый Структура("ID_БизнесПроцесса",ID_БизнесПроцесса));
		Если СтрокиБП <> Неопределено
			И СтрокиБП.Количество() <> 0 Тогда
			СтрокаБП = СтрокиБП[0];
		Иначе
			Сообщить("Не удалось подобрать настройку бизнес-процесса для загрузки выбранного документа в текущий. 
			|Проверьте настройки БП или выберите другой документ.");			
			Возврат;	
		КонецЕсли;												
		
		// +++ Если тип результирующего документа в БП не совпадает с документом, в котором вызвана команда, то подберем подходящий по типу документа мс и результирующему 
		Если СтрокаБП.ТипРезультирующегоДокумента1С <> ТипДокумента1С Тогда
			СтрокиБП = _ЛокКонтекст.ЛокЯдро_НайтиВМассивеСтруктурПоОтбору(НастройкиОбмена, Новый Структура("Используется,ТипИсходногоДокумента1С,ТипРезультирующегоДокумента1С,ТипДокументаMS",Истина,"",ТипДокумента1С,СтрокаДокумента.ИмяТипаДокумента));
			Если СтрокиБП = Неопределено
				Или СтрокиБП.Количество() = 0 Тогда
				СтрокиБП = _ЛокКонтекст.ЛокЯдро_НайтиВМассивеСтруктурПоОтбору(НастройкиОбмена, Новый Структура("Используется,ТипИсходногоДокумента1С,ТипРезультирующегоДокумента1С,ТипДокументаMS",Истина,ТипДокумента1С,ТипДокумента1С,СтрокаДокумента.ИмяТипаДокумента));
				Если СтрокиБП = Неопределено
					Или СтрокиБП.Количество() = 0 Тогда
					Сообщить("Не удалось подобрать настройку бизнес-процесса для загрузки выбранного документа в текущий. 
					|Проверьте настройки БП или выберите другой документ.");			
					Возврат;	
				КонецЕсли;
			КонецЕсли;
			СтрокаБП = СтрокиБП[0];
			ID_БизнесПроцесса = СтрокаБП.ID_БизнесПроцесса;
		КонецЕсли;
		// ---
		
		РезультатЗаписи = _ЛокКонтекст.ЛокЯдро_СформироватьИЗаписатьДокументВБазу1С_ПоID(СтрокаДокумента.Ид, СтрокаДокумента.ИмяТипаДокумента, ID_БизнесПроцесса, СтрокаБП);
		
		ДокументЗаписан = РезультатЗаписи.ДокументЗаписан;			
		Если ДокументЗаписан Тогда
			ПоказатьЗначение(,РезультатЗаписи.Данные);			
		Иначе
			Если ЗначениеЗаполнено(РезультатЗаписи.Ссылка)
				и НЕ РезультатЗаписи.Ссылка.Пустая() Тогда
				ПараметрыФормы = Новый Структура("Ключ", РезультатЗаписи.Ссылка);
				Форма = ПолучитьФорму("Документ." + РезультатЗаписи.МетаданныеИмя + ".ФормаОбъекта",ПараметрыФормы);
			Иначе
				Форма = ПолучитьФорму("Документ." + РезультатЗаписи.МетаданныеИмя + ".ФормаОбъекта");
			КонецЕсли;
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				ЗаполнитьДокументНаСервере(Форма,РезультатЗаписи);
			#Иначе
				ДанныеФормы = Форма.Объект;
				ЗаполнитьДокументНаСервере(ДанныеФормы,РезультатЗаписи);
				КопироватьДанныеФормы(ДанныеФормы, Форма.Объект);
			#КонецЕсли
			Форма.Открыть();			
			Форма.Модифицированность = НЕ ДокументЗаписан;
		КонецЕсли;
		
		_ЛокКонтекст.ЛокЯдро_ВыполнитьОбработчикПослеОткрытияФормыДокумента1С(Форма, СтрокаБП, РезультатЗаписи);
		
		ЗадатьВопросНаУдалениеДокументаПослеЗагрузки(СтрокаДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросНаУдалениеДокументаПослеЗагрузки(СтрокаДокумента)
	// +++ Удаление Загруженного документа
	ПараметрыПодключенияMS = _ЛокКонтекст.ПараметрыПодключенияMS;
	Если НЕ ПараметрыПодключенияMS = Неопределено И ТипЗнч(ПараметрыПодключенияMS) = Тип("Структура") Тогда
		Если ПараметрыПодключенияMS.Свойство("РаботаСКаталогом") И ПараметрыПодключенияMS.РаботаСКаталогом = Истина Тогда
			ТекстВопроса = "Удалить документ из папки обмена?";	
		ИначеЕсли ПараметрыПодключенияMS.Свойство("РаботаСУстройствомНапрямую") И ПараметрыПодключенияMS.РаботаСУстройствомНапрямую = Истина Тогда
			ТекстВопроса = "Удалить документ с мобильного устройства?";
		Иначе
			ТекстВопроса = "Удалить документ с сервера?";
		КонецЕсли;
	Иначе	
		ТекстВопроса = "Удалить документ с ТСД?";	
	КонецЕсли;
	
	ВсеВОдин = Ложь; // Загрузка нескольких документов в один по кнопке пока в разработке
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);			
		ОповещениеВопросУдалитьДокументСТСДЗавершение(Ответ, Новый Структура("ДокументКЗагрузке,ВсеВОдин",СтрокаДокумента,ВсеВОдин));
	#Иначе
		ОповещениеВопросПовторВыгрузки = Новый ОписаниеОповещения("ОповещениеВопросУдалитьДокументСТСДЗавершение", ЭтаФорма,Новый Структура("ДокументКЗагрузке,ВсеВОдин",СтрокаДокумента,ВсеВОдин));
		ПоказатьВопрос(ОповещениеВопросПовторВыгрузки, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , "Внимание");
	#КонецЕсли
	// ---	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросУдалитьДокументСТСДЗавершение(РезультатВопроса, СтруктураПараметров) Экспорт	
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда		
		Если СтруктураПараметров.ВсеВОдин Тогда	
			// в разработке
		Иначе
			ИдДокумента = СтруктураПараметров.ДокументКЗагрузке.Ид;
			РезультатУдаления = _ЛокКонтекст.ЛокЯдро_УдалитьДокументНаСервереSMARTS(ИдДокумента);
			Сообщить(РезультатУдаления.Сообщение + " [" + СтруктураПараметров.ДокументКЗагрузке.Имя + "]");										
		КонецЕсли;			
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Автотесты

&НаКлиенте
Процедура ВыполнитьАвтотестКлеверенс(ПараметрЗапуска)
	
	ИмяКаталога 	= Неопределено;	
	ДопПараметры 	= Новый Структура("ИмяКаталога", ИмяКаталога);
	
	// Определение пути к каталогу хранения логов, в конце обязателен знак ";", т.к. пробел может присутствовать и в самом пути
	// Пример параметра запуска: "КлеверенсАвтотесты.КаталогЗаписиЛогов:C:\ProgramData\Cleverence\Базы Mobile SMARTS\Папка для логов;"	
	ИмяОперации 	= "КлеверенсАвтотесты.КаталогЗаписиЛогов:";
	ИндексОперации 	= Найти(ВРег(ПараметрЗапуска), ВРег(ИмяОперации));	
	
	Если ИндексОперации <> 0 Тогда
		// Ищем переданный в параметре путь
		ИмяКаталога 	= Сред(ПараметрЗапуска, ИндексОперации + СтрДлина(ИмяОперации));
		ИндексОкончания = Найти(ИмяКаталога, ";");
		Если ИндексОкончания <> 0 Тогда
			// Обрезаем до знака окончания пути, т.к. началась другая операция
			ИмяКаталога = Лев(ИмяКаталога, ИндексОкончания - 1);
		КонецЕсли;		
		
		ДопПараметры.ИмяКаталога = ИмяКаталога;		
		
		УказанныйКаталог = Новый Файл(ИмяКаталога);		
		#Область НесовместимыйКодFresh
		Выполнить("УказанныйКаталог.НачатьПроверкуСуществования(Новый ОписаниеОповещения(""ВыполнитьАвтотестКлеверенсЗавершение"", ЭтаФорма, ДопПараметры))"); //Запрещенные операции fresh
		#КонецОбласти //НесовместимыйКодFresh
		
	Иначе 
		
		ВыполнитьОбработкуОповещения(Новый ОписаниеОповещения("ВыполнитьАвтотестКлеверенсЗавершение", ЭтаФорма, ДопПараметры), Ложь);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАвтотестКлеверенсЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	СтруктураПараметров = ПолучитьПараметрыВыполненияАвтотестов();
	
	СтрокаВыделенияАвтотестов		= СтруктураПараметров.СтрокаВыделенияАвтотестов;
	СтруктураВыполненияАвтотестов 	= СтруктураПараметров.СтруктураВыполненияАвтотестов;
	ИдАвтотеста 					= СтруктураПараметров.ИдАвтотеста;
		
	ПолныйАвтотест = Ложь;
	Если Найти(ПараметрЗапуска, "КлеверенсАвтотесты.ПолныйАвтотест") Тогда
		ПолныйАвтотест = Истина; // Запускаем все операции автотестов
	КонецЕсли;
	
	КаталогВПараметре = Ложь;
	
	Если Существует Тогда	
		ИмяКаталога = ДополнительныеПараметры.ИмяКаталога;
		КаталогВПараметре = Истина;
	Иначе
		Если ЗначениеЗаполнено(ДополнительныеПараметры.ИмяКаталога) Тогда
			ТекстКомментария = "Каталог записи логов по пути <" + ДополнительныеПараметры.ИмяКаталога + "> не найден. Логи будут записаны в папку с подключенной базой";
			_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ПоискКаталогаЗаписиЛогов", "Ошибка", ТекстКомментария);	
		КонецЕсли;
		ИмяКаталога = Неопределено;
	КонецЕсли;	 	
	
	// Это автотест для ТП, запускаемый в базе клиента. Он не входит в перечень автотестов, выполняющихся при полном автотесте.
	Если Найти(ПараметрЗапуска, "КлеверенсАвтотесты.ПроверкаПодключеннойБазы1С") Тогда
		
		// Выгрузка записей ЖР, добавленных при работе с обработкой
		ИмяФайлаОбщегоЛога = ?(КаталогВПараметре, "\Logs_full_", "\Logs\Logs_full_");
		ИмяФайлаЛогаОшибок = ?(КаталогВПараметре, "\Logs_errors_", "\Logs\Logs_errors_");		
		
		ШапкаПолногоЛогаЗаписана = _ЛокКонтекст.ЛокЯдро_ЗаписатьШапкуЛога(ИмяФайлаОбщегоЛога, ИмяФайлаЛогаОшибок, ИмяКаталога);
		
		// Существование каталога проверили, поэтому если не удается записать файл, значит дело в правах
		Если Не ШапкаПолногоЛогаЗаписана Тогда
			
			ТекстКомментария = "Нет доступа к каталогу записи логов по пути <" + ДополнительныеПараметры.ИмяКаталога + ">. Логи будут записаны в папку с подключенной базой";
			_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ПоискКаталогаЗаписиЛогов", "Ошибка", ТекстКомментария);	
			
			КаталогВПараметре = Ложь;			
			ИмяКаталога = Неопределено;
			ИмяФайлаОбщегоЛога = "\Logs\Logs_full_";
			ИмяФайлаЛогаОшибок = "\Logs\Logs_errors_";				
			
			ШапкаПолногоЛогаЗаписана = _ЛокКонтекст.ЛокЯдро_ЗаписатьШапкуЛога(ИмяФайлаОбщегоЛога, ИмяФайлаЛогаОшибок, ИмяКаталога);	
			
		КонецЕсли;
		
		// Установка даты, начиная с которой будут получены и выгружены в лог записи ЖР
		ДатаНачалаВыгрузкиЖР = НачалоДня(ТекущаяДата()) - 7 * 24 * 60 * 60; // 7 дней назад
		_ЛокКонтекст.КомЯдро_СохранитьЗначениеПеременной("ДатаНачалаВыгрузкиЖР", ДатаНачалаВыгрузкиЖР);
		
		ДанныеДляОтбораЖР = "MobileSMARTSLog";
		
		Если ШапкаПолногоЛогаЗаписана Тогда
			_ЛокКонтекст.ЛокЯдро_ВыгрузитьЛогИзЖурналаРегистрации(ДанныеДляОтбораЖР);
		КонецЕсли;
		
		// Выполнение операций автотестов. Вместо параметра запуска будем передавать полное имя автотеста, 
		// т.к. в параметре запуска его может не быть, но в рамках данного автотеста необходимо его выполнить
		
		ВыполнитьОперациюАвтотестовКлеверенс(
			"КлеверенсАвтотесты.ПроверкаПодключенныхРасширенийИПатчей", 
			"КлеверенсАвтотесты.ПроверкаПодключенныхРасширенийИПатчей", 
			СтруктураВыполненияАвтотестов, 
			Ложь, 
			ПолныйАвтотест, 
			СтрокаВыделенияАвтотестов);
				
		ВыполнитьОперациюАвтотестовКлеверенс(
			"КлеверенсАвтотесты.ПроверкаДоступностиРаботыСДокументами1С", 
			"КлеверенсАвтотесты.ПроверкаДоступностиРаботыСДокументами1С", 
			СтруктураВыполненияАвтотестов, 
			Ложь, 
			ПолныйАвтотест, 
			СтрокаВыделенияАвтотестов);
		
		ВыполнитьОперациюАвтотестовКлеверенс(
			"КлеверенсАвтотесты.ПолучитьСписокГлобальныхПеременныхИЗначений", 
			"КлеверенсАвтотесты.ПолучитьСписокГлобальныхПеременныхИЗначений", 
			СтруктураВыполненияАвтотестов, 
			Ложь, 
			ПолныйАвтотест, 
			СтрокаВыделенияАвтотестов);		
			
		ВыполнитьОперациюАвтотестовКлеверенс(
			"КлеверенсАвтотесты.ПолучитьСписокМакетовСКДДляВыгрузкиСправочников", 
			"КлеверенсАвтотесты.ПолучитьСписокМакетовСКДДляВыгрузкиСправочников", 
			СтруктураВыполненияАвтотестов, 
			Ложь, 
			ПолныйАвтотест, 
			СтрокаВыделенияАвтотестов);		
				
		ВыполнитьОперациюАвтотестовКлеверенс(
			"КлеверенсАвтотесты.ПолучитьСписокВсехБизнесПроцессов", 
			"КлеверенсАвтотесты.ПолучитьСписокВсехБизнесПроцессов", 
			СтруктураВыполненияАвтотестов, 
			Ложь, 
			ПолныйАвтотест, 
			СтрокаВыделенияАвтотестов);
			
		ВыполнитьОперациюАвтотестовКлеверенс(
			"КлеверенсАвтотесты.ПроверкаСоответствияИспользованияБизнесПроцессовИОтборов", 
			"КлеверенсАвтотесты.ПроверкаСоответствияИспользованияБизнесПроцессовИОтборов", 
			СтруктураВыполненияАвтотестов, 
			Ложь, 
			ПолныйАвтотест, 
			СтрокаВыделенияАвтотестов);			
			
		ВыполнитьОперациюАвтотестовКлеверенс(
			"КлеверенсАвтотесты.ПроверитьКорректностьНастроекБизнесПроцессов", 
			"КлеверенсАвтотесты.ПроверитьКорректностьНастроекБизнесПроцессов", 
			СтруктураВыполненияАвтотестов, 
			Ложь, 
			ПолныйАвтотест, 
			СтрокаВыделенияАвтотестов);	
			
	КонецЕсли;
	
	// Выполняем подключение расширений, обработок до записи шапки лога, т.к. в шапке содержится информации об ИО
	ВыполнитьОперациюАвтотестовКлеверенс(ПараметрЗапуска, "КлеверенсАвтотесты.ОбновитьКомпонентыИзПодключеннойБазы", СтруктураВыполненияАвтотестов, Ложь, ПолныйАвтотест, СтрокаВыделенияАвтотестов);
	
	ИмяФайлаОбщегоЛога = ?(КаталогВПараметре, "\Autotest1C_logs_full_", "\Logs\Autotest1C_logs_full_");
	ИмяФайлаЛогаОшибок = ?(КаталогВПараметре, "\Autotest1C_logs_errors_", "\Logs\Autotest1C_logs_errors_");
	
	ШапкаЛогаЗаписана = _ЛокКонтекст.ЛокЯдро_ЗаписатьШапкуЛога(ИмяФайлаОбщегоЛога, ИмяФайлаЛогаОшибок, ИмяКаталога);
	
	// Существование каталога проверили, поэтому если не удается записать файл, значит дело в правах
	Если Не ШапкаЛогаЗаписана Тогда
			
		ТекстКомментария = "Нет доступа к каталогу записи логов по пути <" + ДополнительныеПараметры.ИмяКаталога + ">. Логи будут записаны в папку с подключенной базой";
		_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ПоискКаталогаЗаписиЛогов", "Ошибка", ТекстКомментария);	
		
		КаталогВПараметре = Ложь;			
		ИмяКаталога = Неопределено;
		ИмяФайлаОбщегоЛога = "\Logs\Autotest1C_logs_full_";
		ИмяФайлаЛогаОшибок = "\Logs\Autotest1C_logs_errors_";				
		
		ШапкаЛогаЗаписана = _ЛокКонтекст.ЛокЯдро_ЗаписатьШапкуЛога(ИмяФайлаОбщегоЛога, ИмяФайлаЛогаОшибок, ИмяКаталога);	
		
	КонецЕсли;

	НачалоТестов = ТекущаяУниверсальнаяДатаВМиллисекундах();
	_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("НачалоАвтотестов","Информация","ПараметрЗапуска = "+ПараметрЗапуска);
	
	ВыполнитьОперациюАвтотестовКлеверенс(ПараметрЗапуска, "КлеверенсАвтотесты.СброситьНастройкиПодключеннойБазыНаСтандартные", СтруктураВыполненияАвтотестов, Истина, ПолныйАвтотест, СтрокаВыделенияАвтотестов);
	
	ВыполнитьОперациюАвтотестовКлеверенс(ПараметрЗапуска, "КлеверенсАвтотесты.ОчиститьСправочники", СтруктураВыполненияАвтотестов, Истина, ПолныйАвтотест, СтрокаВыделенияАвтотестов);
	
	ВыполнитьОперациюАвтотестовКлеверенс(ПараметрЗапуска, "КлеверенсАвтотесты.ВыгрузитьСправочники", СтруктураВыполненияАвтотестов, Истина, ПолныйАвтотест, СтрокаВыделенияАвтотестов);
	
	ВыполнитьОперациюАвтотестовКлеверенс(ПараметрЗапуска, "КлеверенсАвтотесты.ПроверкаПодключенныхРасширенийИПатчей", СтруктураВыполненияАвтотестов, Истина, ПолныйАвтотест, СтрокаВыделенияАвтотестов);
		
	ВыполнитьОперациюАвтотестовКлеверенс(ПараметрЗапуска, "КлеверенсАвтотесты.ПроверкаДоступностиРаботыСДокументами1С", СтруктураВыполненияАвтотестов, Истина, ПолныйАвтотест, СтрокаВыделенияАвтотестов);
	
	ВыполнитьОперациюАвтотестовКлеверенс(ПараметрЗапуска, "КлеверенсАвтотесты.ПолучитьСписокГлобальныхПеременныхИЗначений", СтруктураВыполненияАвтотестов, Истина, ПолныйАвтотест, СтрокаВыделенияАвтотестов);
	
	ВыполнитьОперациюАвтотестовКлеверенс(ПараметрЗапуска, "КлеверенсАвтотесты.ПолучитьСписокМакетовСКДДляВыгрузкиСправочников", СтруктураВыполненияАвтотестов, Истина, ПолныйАвтотест, СтрокаВыделенияАвтотестов);
	
	ВыполнитьОперациюАвтотестовКлеверенс(ПараметрЗапуска, "КлеверенсАвтотесты.ПолучитьСписокВсехБизнесПроцессов", СтруктураВыполненияАвтотестов, Истина, ПолныйАвтотест, СтрокаВыделенияАвтотестов);
	
	ВыполнитьОперациюАвтотестовКлеверенс(ПараметрЗапуска, "КлеверенсАвтотесты.ПроверкаСоответствияИспользованияБизнесПроцессовИОтборов", СтруктураВыполненияАвтотестов, Истина, ПолныйАвтотест, СтрокаВыделенияАвтотестов);
	
	ВыполнитьОперациюАвтотестовКлеверенс(ПараметрЗапуска, "КлеверенсАвтотесты.ПроверитьКорректностьНастроекБизнесПроцессов", СтруктураВыполненияАвтотестов, Истина, ПолныйАвтотест, СтрокаВыделенияАвтотестов);

	ВыполнитьОперациюАвтотестовКлеверенс(ПараметрЗапуска, "КлеверенсАвтотесты.ПроверитьПоддерживаемыеВерсииКонфигурации", СтруктураВыполненияАвтотестов, Истина, ПолныйАвтотест, СтрокаВыделенияАвтотестов);
	
	ВыполнитьОперациюАвтотестовКлеверенс(ПараметрЗапуска, "КлеверенсАвтотесты.ВыгрузитьДокументы", СтруктураВыполненияАвтотестов, Истина, ПолныйАвтотест, СтрокаВыделенияАвтотестов);
	
	_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("КонецАвтотестов", "Информация", "", НачалоТестов);
	
	ИмяОперации = "КлеверенсАвтотесты.ПолучателиОшибокНаПочту:";
	ИндексОперации = Найти(ВРег(ПараметрЗапуска), ВРег(ИмяОперации));
	СтрокаПолучателей = Сред(ПараметрЗапуска, ИндексОперации + СтрДлина(ИмяОперации));
	ИндексПробела = Найти(СтрокаПолучателей, " ");
	Если ИндексПробела <> 0 Тогда
		// Обрезаем до пробела, т.к. началась другая операция
		СтрокаПолучателей = Лев(СтрокаПолучателей, ИндексПробела - 1);
	КонецЕсли;
	МассивПолучателейОшибок = _ЛокКонтекст.ЛокЯдро_РазложитьСтрокуВМассивПодстрок(СтрокаПолучателей, ";");	
	
	ИмяОперации = "КлеверенсАвтотесты.АдресSMTP:";
	ИндексОперации = Найти(ВРег(ПараметрЗапуска), ВРег(ИмяОперации));
	АдресSMTP = Сред(ПараметрЗапуска, ИндексОперации + СтрДлина(ИмяОперации));
	ИндексПробела = Найти(АдресSMTP, " ");
	Если ИндексПробела <> 0 Тогда		
		АдресSMTP = Лев(АдресSMTP, ИндексПробела - 1);
	КонецЕсли;
	
	ИмяОперации = "КлеверенсАвтотесты.ПортSMTP:";
	ИндексОперации = Найти(ВРег(ПараметрЗапуска), ВРег(ИмяОперации));
	ПортSMTP = Сред(ПараметрЗапуска, ИндексОперации + СтрДлина(ИмяОперации));
	ИндексПробела = Найти(ПортSMTP, " ");
	Если ИндексПробела <> 0 Тогда		
		ПортSMTP = Лев(ПортSMTP, ИндексПробела - 1);
	КонецЕсли;
	
	ИмяОперации = "КлеверенсАвтотесты.ЛогинSMTP:";
	ИндексОперации = Найти(ВРег(ПараметрЗапуска), ВРег(ИмяОперации));
	ЛогинSMTP = Сред(ПараметрЗапуска, ИндексОперации + СтрДлина(ИмяОперации));
	ИндексПробела = Найти(ЛогинSMTP, " ");
	Если ИндексПробела <> 0 Тогда		
		ЛогинSMTP = Лев(ЛогинSMTP, ИндексПробела - 1);
	КонецЕсли;
	
	ИмяОперации = "КлеверенсАвтотесты.ПарольSMTP:";
	ИндексОперации = Найти(ВРег(ПараметрЗапуска), ВРег(ИмяОперации));
	ПарольSMTP = Сред(ПараметрЗапуска, ИндексОперации + СтрДлина(ИмяОперации));
	ИндексПробела = Найти(ПарольSMTP, " ");
	Если ИндексПробела <> 0 Тогда		
		ПарольSMTP = Лев(ПарольSMTP, ИндексПробела - 1);
	КонецЕсли;
	
	ИмяОперации = "КлеверенсАвтотесты.ОтправительSMTP:";
	ИндексОперации = Найти(ВРег(ПараметрЗапуска), ВРег(ИмяОперации));
	ОтправительSMTP = ?(ИндексОперации = 0,"",Сред(ПараметрЗапуска, ИндексОперации + СтрДлина(ИмяОперации)));
	ИндексПробела = Найти(ОтправительSMTP, " ");
	Если ИндексПробела <> 0 Тогда		
		ОтправительSMTP = Лев(ОтправительSMTP, ИндексПробела - 1);
	КонецЕсли;
	ПараметрыОтправкиПочты = Новый Структура("МассивПолучателей,АдресSMTP,ПортSMTP,ЛогинSMTP,ПарольSMTP,ОтправительSMTP",МассивПолучателейОшибок,АдресSMTP,ПортSMTP,ЛогинSMTP,ПарольSMTP,ОтправительSMTP);
	
	ДанныеДляОтбораЖР = ИдАвтотеста;
	
	Если ШапкаЛогаЗаписана Тогда
		_ЛокКонтекст.ЛокЯдро_ВыгрузитьЛогИзЖурналаРегистрации(ДанныеДляОтбораЖР, ПараметрыОтправкиПочты, ИмяКаталога);
	КонецЕсли;
	
	ЗавершитьРаботуСистемы(Ложь); // При ПрекратитьРаботуСистемы не всегда успевают записаться в журнал последние события
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперациюАвтотестовКлеверенс(СтрокаПараметраЗапуска, ПолноеИмяАвтотеста, СтруктураВыполненияАвтотестов, ВключатьВПолныйАвтотест, ПолныйАвтотест, СтрокаВыделенияАвтотестов)
	
	ТекстОшибки = "";
	
	Попытка
		// Выполнение операции автотеста
		Если Найти(СтрокаПараметраЗапуска, ПолноеИмяАвтотеста) Или (ВключатьВПолныйАвтотест И ПолныйАвтотест) Тогда
			ИмяАвтотеста = СтрЗаменить(ПолноеИмяАвтотеста, "КлеверенсАвтотесты.", "");
			
			ИмяПроцедурыАвтотеста = Неопределено;
			СтруктураВыполненияАвтотестов.Свойство(ИмяАвтотеста, ИмяПроцедурыАвтотеста);
			Если ИмяПроцедурыАвтотеста = Неопределено Тогда
				_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации(ПолноеИмяАвтотеста, "Ошибка", "Не найдена процедура автотеста");
				Возврат;
			КонецЕсли;
			
            #Область НесовместимыйКодFresh
			// Запись начала и окончания автотеста перенесена в процедуры автотестов ("_ЛокКонтекст." + ИмяПроцедурыАвтотеста + "()") для совместимости с фрешем
			//_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации(ИмяАвтотеста, "Информация", СтрокаВыделенияАвтотестов + "Начало");
			//НачалоВыполненияОперации = ТекущаяУниверсальнаяДатаВМиллисекундах();
			Выполнить("_ЛокКонтекст." + ИмяПроцедурыАвтотеста + "()"); 	
			//_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации(ИмяАвтотеста, "Информация", СтрокаВыделенияАвтотестов + "Конец", НачалоВыполненияОперации);	
			#КонецОбласти //НесовместимыйКодFresh
			#Область СовместимыйКодFresh	
			//СтруктураПараметров = Новый Структура;
			//СтруктураПараметров.Вставить("СтрокаВыделенияАвтотестов", 		СтрокаВыделенияАвтотестов);
			//СтруктураПараметров.Вставить("СтруктураВыполненияАвтотестов", 	СтруктураВыполненияАвтотестов); // Необходимо для получения имени автотеста
			//
			//СтруктураВыполнения = _ЛокКонтекст.ЛокЯдро_ВыполнитьМетодПоИмени(ИмяПроцедурыАвтотеста, СтруктураПараметров);
			//ТекстОшибки = СтруктураВыполнения.ТекстОшибки;
			#КонецОбласти //СовместимыйКодFresh
			
		КонецЕсли;
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнфоОбОшибке);
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации(ПолноеИмяАвтотеста, "Ошибка", "Ошибка выполнения автотеста " + ПолноеИмяАвтотеста + 
		" по причине: " + Символы.ПС + ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыВыполненияАвтотестов()
	
	СтруктураПараметров = Новый Структура;
	
	ИдАвтотеста = _ЛокКонтекст.КомЯдро_ПолучитьЗначениеПеременной("ИдАвтотеста");

	СтрокаВыделенияАвтотестов = "==================================="; // Добавление строки при начале/окончании автотестов для визуального выделения
	
	// В данной структуре ключ - полное имя автотестов (например, "КлеверенсАвтотесты.ОчиститьСправочники")
	// значение - имя процедуры лок контекста, которая должна выполниться
	СтруктураВыполненияАвтотестов = Новый Структура;
	СтруктураВыполненияАвтотестов.Вставить("ОчиститьСправочники", 										"ЛокЯдро_ОчиститьВсеСправочники");
	СтруктураВыполненияАвтотестов.Вставить("ВыгрузитьСправочники", 										"ЛокЯдро_ВыгрузитьТаблицыНаСерверSMARTS");
	СтруктураВыполненияАвтотестов.Вставить("ПроверкаПодключенныхРасширенийИПатчей", 					"ЛокЯдро_ПроверитьПодключенныеРасширенияИПатчи");
	СтруктураВыполненияАвтотестов.Вставить("ПроверкаДоступностиРаботыСДокументами1С", 					"ЛокЯдро_ПроверитьДоступностьРаботыСДокументами1С");
	СтруктураВыполненияАвтотестов.Вставить("ПолучитьСписокВсехБизнесПроцессов", 						"ЛокЯдро_ПолучитьСписокВсехБизнесПроцессов");
	СтруктураВыполненияАвтотестов.Вставить("ПроверкаСоответствияИспользованияБизнесПроцессовИОтборов", 	"ЛокЯдро_ПроверкаСоответствияИспользованияБизнесПроцессовИОтборов");
	СтруктураВыполненияАвтотестов.Вставить("ПолучитьСписокГлобальныхПеременныхИЗначений", 				"ЛокЯдро_ПолучитьСписокГлобальныхПеременныхИЗначений");	
	СтруктураВыполненияАвтотестов.Вставить("ПолучитьСписокМакетовСКДДляВыгрузкиСправочников", 			"ЛокЯдро_ПолучитьСписокМакетовСКДДляВыгрузкиСправочников");		
	СтруктураВыполненияАвтотестов.Вставить("ПроверитьКорректностьНастроекБизнесПроцессов", 				"ЛокЯдро_ПроверитьКорректностьНастроекБизнесПроцессов");			
	СтруктураВыполненияАвтотестов.Вставить("ВыгрузитьДокументы", 										"ЛокЯдро_ВыгрузитьДокументы");
	СтруктураВыполненияАвтотестов.Вставить("ОбновитьКомпонентыИзПодключеннойБазы", 						"ЛокЯдро_ОбновитьКомпонентыИзПодключеннойБазы");
	СтруктураВыполненияАвтотестов.Вставить("СброситьНастройкиПодключеннойБазыНаСтандартные", 			"ЛокЯдро_СброситьНастройкиПодключеннойБазыНаСтандартные");
	СтруктураВыполненияАвтотестов.Вставить("ПроверитьПоддерживаемыеВерсииКонфигурации", 				"ЛокЯдро_ПроверитьПоддерживаемыеВерсииКонфигурации");
	
	СтруктураПараметров.Вставить("ИдАвтотеста", 					ИдАвтотеста);
	СтруктураПараметров.Вставить("СтрокаВыделенияАвтотестов", 		СтрокаВыделенияАвтотестов);
	СтруктураПараметров.Вставить("СтруктураВыполненияАвтотестов", 	СтруктураВыполненияАвтотестов);
	
	Возврат СтруктураПараметров;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВыгрузитьСправочникиНажатие(Элемент)
		
	ОП = Новый ОписаниеОповещения("ВыгрузитьСправочники",ЭтаФорма);
	_ЛокКонтекст.ЛокЯдро_ПроверитьСоединениеССерверомSMARTS(,,?(ЕстьЧастнаяБаза,"Частная","Основная"),,,,ОП);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьНастройки(Команда)
	КнопкаПоказатьСкрытьНастройкиПометка = НЕ КнопкаПоказатьСкрытьНастройкиПометка;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Элементы.ДополнительнаяГруппа.Страницы.ГруппаНастроек.Видимость = КнопкаПоказатьСкрытьНастройкиПометка;	
		Элементы.ДополнительнаяГруппа.Страницы.ГруппаИнформация.Видимость = НЕ КнопкаПоказатьСкрытьНастройкиПометка;
	#Иначе
		Элементы.КнопкаПоказатьСкрытьНастройки.Пометка = НЕ КнопкаПоказатьСкрытьНастройкиПометка;
		Элементы.ГруппаНастройки.Видимость = КнопкаПоказатьСкрытьНастройкиПометка;	
		Элементы.ГруппаИнформация.Видимость = НЕ КнопкаПоказатьСкрытьНастройкиПометка;
	#КонецЕсли
	Если НЕ КнопкаПоказатьСкрытьНастройкиПометка Тогда
		Элементы.КнопкаПоказатьСкрытьНастройки.Заголовок = "Показать настройки";
	Иначе
		Элементы.КнопкаПоказатьСкрытьНастройки.Заголовок = "Скрыть настройки";
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ID_ТекущегоУзлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОП = Новый ОписаниеОповещения("ID_ТекущегоУзлаНачалоВыбораПослеПодключения",ЭтаФорма);
	_ЛокКонтекст.ЛокЯдро_ПроверитьСоединениеССерверомSMARTS(,,,,,,ОП);	

КонецПроцедуры

&НаКлиенте
Процедура ID_ТекущегоУзлаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	УстановитьСписокВыбораУзлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ID_ТекущегоУзлаПриИзменении(Элемент)
	
	Если ID_ТекущегоУзлаПредыдущееЗначение = ID_ТекущегоУзла Тогда
		Возврат;
	Иначе
		ID_ТекущегоУзлаПредыдущееЗначение = ID_ТекущегоУзла;
	КонецЕсли;	
	
	_ЛокКонтекст.ЛокЯдро_УстановитьДанныеТекущегоУзла(ID_ТекущегоУзла);
	ОбработкаОповещения("УстановленыНастройкиПодключения","","");
	
	_ЛокКонтекст.ЛокЯдро_СобратьОбщуюСтруктуруБизнесПроцессов(ID_ТекущегоУзла);	

КонецПроцедуры

&НаКлиенте
Процедура ID_ТекущегоУзлаОчистка(Элемент, СтандартнаяОбработка)
	
	ID_ТекущегоУзлаПредыдущееЗначение = ID_ТекущегоУзла;
	_ЛокКонтекст.ЛокЯдро_УстановитьДанныеТекущегоУзла("");
	
КонецПроцедуры

&НаКлиенте
Процедура ID_ТекущегоУзлаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ID_ТекущегоУзла) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаУзла = Неопределено;
	ВсеУзлы = _ЛокКонтекст.ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("Узлы");
	Если ТипЗнч(ВсеУзлы) = Тип("Массив") Тогда
		СтрокаУзла = _ЛокКонтекст.НайтиСтруктуруВМассивеПоЭлементу(ВсеУзлы,"ID_Узла",ID_ТекущегоУзла);
	КонецЕсли;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ФормаНастройки_Узел = ПолучитьФорму("ОФ_ФормаНастройки_Узел", ЭтаФорма);
	#Иначе
		ФормаНастройки_Узел = ПолучитьФорму(_ЛокКонтекст.ПолноеИмяОбъекта + ".Форма.ФормаНастройки_Узел", , ЭтаФорма);	
	#КонецЕсли

	ФормаНастройки_Узел.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаНастройки_Узел._ЛокКонтекст = _ЛокКонтекст;
	ЗаполнитьЗначенияСвойств(ФормаНастройки_Узел, СтрокаУзла);
	ОП = Новый ОписаниеОповещения("Настройки_УзелЗакрытие",ЭтаФорма,СтрокаУзла);
	ФормаНастройки_Узел.ОписаниеОповещенияОЗакрытии = ОП;
	ФормаНастройки_Узел.Открыть();	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбменДокументами(Команда)
	
	ОП = Новый ОписаниеОповещения("ОткрытьОбменДокументамиПослеПодключения",ЭтаФорма);
	_ЛокКонтекст.ЛокЯдро_ПроверитьСоединениеССерверомSMARTS(,,?(ЕстьЧастнаяБаза,"Частная","Основная"),,,,ОП);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиДляОбменаСправочниковНажатие(Команда)	
	
	ОП = Новый ОписаниеОповещения("ОткрытьНастройкиДляОбменаСправочниковНажатиеПослеПодключения",ЭтаФорма);
	_ЛокКонтекст.ЛокЯдро_ПроверитьСоединениеССерверомSMARTS(,,?(ЕстьЧастнаяБаза,"Частная","Основная"),,,,ОП);
		
КонецПроцедуры

&НаКлиенте
Процедура ПутьКОбработкеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьСкрытьНастройки("");
		
	ПоказатьПредупреждение(,"Настройки интеграционной обработки теперь на вкладке Настройки.",0,"Изменение интерфейса.");
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ВыборИнтеграционнойОбработки;
КонецПроцедуры


&НаКлиенте
Процедура ВыборИнтеграционнойОбработки(Команда)
	ОткрытьФормуВыбораИнтеграционнойОбработки();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораИнтеграционнойОбработки()
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ФормаСлужебная_НастройкиИнтеграционнойОбработки = ПолучитьФорму("ОФ_ФормаСлужебная_НастройкиОбработки",ЭтаФорма);
	#Иначе
		ФормаСлужебная_НастройкиИнтеграционнойОбработки = ПолучитьФорму(_ЛокКонтекст.ПолноеИмяОбъекта + ".Форма.ФормаСлужебная_НастройкиОбработки", , ЭтаФорма);
	#КонецЕсли
	
	ФормаСлужебная_НастройкиИнтеграционнойОбработки.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаСлужебная_НастройкиИнтеграционнойОбработки._ЛокКонтекст = _ЛокКонтекст;
	ФормаСлужебная_НастройкиИнтеграционнойОбработки.ВидОбработки = "ИнтеграционнаяОбработка";
	ФормаСлужебная_НастройкиИнтеграционнойОбработки.ВерсияОбработки = ВерсияИнтеграции;
	ФормаСлужебная_НастройкиИнтеграционнойОбработки.КонфигурацияИнтеграции = КонфигурацияИнтеграции;
	ФормаСлужебная_НастройкиИнтеграционнойОбработки.ПоддерживаемыеВерсии = ПоддерживаемыеВерсии;
	пПараметрыПодключенияMS = _ЛокКонтекст.КомЯдро_ПолучитьЗначениеПеременной("ПараметрыПодключенияMS");
	
	ТипОбработки = ?(пПараметрыПодключенияMS.Свойство("ТипОбработки"),пПараметрыПодключенияMS.ТипОбработки,"ФайлНаДиске");
	Если ТипОбработки = "ФайлНаДиске" Тогда 
		ФормаСлужебная_НастройкиИнтеграционнойОбработки.ПутьКОбработке = Строка(пПараметрыПодключенияMS.ПутьИнтеграционнойОбработки)+Строка(пПараметрыПодключенияMS.ИмяИнтеграционнойОбработки);
	Иначе
		ФормаСлужебная_НастройкиИнтеграционнойОбработки.ПутьКОбработке = пПараметрыПодключенияMS.ПутьИнтеграционнойОбработки;
	КонецЕсли;	
	ФормаСлужебная_НастройкиИнтеграционнойОбработки.ТипОбработки = ТипОбработки;
	ФормаСлужебная_НастройкиИнтеграционнойОбработки.ID_ТекущейБазы = ID_ТекущейБазы;
	ОП = Новый ОписаниеОповещения("ФормаСлужебная_НастройкиИнтеграционнойОбработкиЗакрытие",ЭтаФорма);
	ФормаСлужебная_НастройкиИнтеграционнойОбработки.ОписаниеОповещенияОЗакрытии = ОП;
	ФормаСлужебная_НастройкиИнтеграционнойОбработки.Открыть();		
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьГлобальныеПараметры(Команда)
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ФормаСписка_ГлобальныеПараметры = ПолучитьФорму("ОФ_ФормаСписка_ГлобальныеПараметры", ЭтаФорма);
	#Иначе
		ФормаСписка_ГлобальныеПараметры = ПолучитьФорму(_ЛокКонтекст.ПолноеИмяОбъекта + ".Форма.ФормаСписка_ГлобальныеПараметры", , ЭтаФорма);
	#КонецЕсли
	
	ФормаСписка_ГлобальныеПараметры.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаСписка_ГлобальныеПараметры._ЛокКонтекст = _ЛокКонтекст;
	ФормаСписка_ГлобальныеПараметры.ID_Узла = ID_ТекущегоУзла;
	ФормаСписка_ГлобальныеПараметры.НаименованиеУзла = _ЛокКонтекст.ДанныеТекущегоУзла.Наименование;
	ФормаСписка_ГлобальныеПараметры.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНастройкиДляОбменаИнтерактив(Команда)
	
	ОП = Новый ОписаниеОповещения("РедактироватьНастройкиДляОбменаИнтерактивПослеПодключения",ЭтаФорма);
	_ЛокКонтекст.ЛокЯдро_ПроверитьСоединениеССерверомSMARTS(,,?(ЕстьЧастнаяБаза,"Частная","Основная"),,,,ОП);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНастройкиДляОбменаОнлайн(Команда)
	
	ОП = Новый ОписаниеОповещения("РедактироватьНастройкиДляОбменаОнлайнПослеПодключения",ЭтаФорма);
	_ЛокКонтекст.ЛокЯдро_ПроверитьСоединениеССерверомSMARTS(,,?(ЕстьЧастнаяБаза,"Частная","Основная"),,,,ОП);

КонецПроцедуры

// Открывает форму создания и выгрузки пользователей на ТСД после проверки соединения с сервером Mobile Smarts
//
// Параметры:
//	СерверДоступен - Булево - флаг доступности сервера Mobile Smarts
//	ДопПараметры - Произвольный
&НаКлиенте
Процедура СоздатьИВыгрузитьПользователей(Команда)
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ФормаНастройки_ВыгрузкаПользователей = ПолучитьФорму("ОФ_ФормаНастройки_ВыгрузкаПользователей", ЭтаФорма);
	#Иначе
		ФормаНастройки_ВыгрузкаПользователей = ПолучитьФорму(_ЛокКонтекст.ПолноеИмяОбъекта + ".Форма.ФормаНастройки_ВыгрузкаПользователей", , ЭтаФорма);	
	#КонецЕсли
	
	ФормаНастройки_ВыгрузкаПользователей.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаНастройки_ВыгрузкаПользователей._ЛокКонтекст = _ЛокКонтекст;	
	ФормаНастройки_ВыгрузкаПользователей.Открыть();
		
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьРасширенныеНастройки(Команда)
	
	ОП = Новый ОписаниеОповещения("РедактироватьРасширенныеНастройкиПослеПодключения",ЭтаФорма);
	_ЛокКонтекст.ЛокЯдро_ПроверитьСоединениеССерверомSMARTS(,,,,,,ОП);

КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаИнформациюПоРаботеСОбработкойНажатие(Элемент)
	
	#Если ВебКлиент Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("УстановитьЕслиНеПодключено", Истина);
		ДополнительныеПараметры.Вставить("ВыборЗавершение", Новый ОписаниеОповещения("ОткрытьИнформациюПоРаботеСОбработкой", ЭтаФорма));
		
		_ЛокКонтекст.ЛокЯдро_ПередПодключениемРасширенияРаботыСФайлами(ДополнительныеПараметры);		
	#Иначе
		ОткрытьИнформациюПоРаботеСОбработкой();
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюПоРаботеСОбработкой(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьИнформациюПоРаботеСОбработкойЗавершение", ЭтаФорма);
	НачатьЗапускПриложения(ОписаниеОповещения, Элементы.СсылкаНаИнформациюПоРаботеСОбработкой.Подсказка);
	//ЗапуститьПриложение(Элементы.СсылкаНаИнформациюПоРаботеСОбработкой.Подсказка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюПоРаботеСОбработкойЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	//ЗапуститьПриложение(Элементы.СсылкаНаИнформациюПоРаботеСОбработкой.Подсказка);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаИнформациюПоРаботеСИнтеграционнойОбработкойНажатие(Элемент)
	ЗапуститьПриложение(Элементы.СсылкаНаИнформациюПоРаботеСИнтеграционнойОбработкой.Подсказка);
КонецПроцедуры

&НаКлиенте
Процедура ПерезапуститьОбработку(Команда)
	Отказ = Ложь;
	ПриОткрытии(Отказ);	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДругуюБазу(Команда)
	ОткрытьФормуНастройкиПодключения();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьФайлДляТехПоддержкиНажатие(Команда)

	#Если ВебКлиент Тогда
		Сообщить("Кнопка сохранения информации для технической поддержки недоступна из web-клиента 1С, запустите из тонкого клиента 1С.");
		Возврат; // Временная заглушка
	#Иначе
		
		ИмяКаталога = "";
		
		ДиалогВыбораКаталога 			= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ДиалогВыбораКаталога.Заголовок 	= НСтр("ru = 'Выберите папку для сохранения файлов!'");
		
		Если ДиалогВыбораКаталога.Выбрать() Тогда
			ИмяКаталога = ДиалогВыбораКаталога.Каталог;
		КонецЕсли;
		
		Если ИмяКаталога = "" Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураПараметров = ПолучитьПараметрыВыполненияАвтотестов();
		
		СтрокаВыделенияАвтотестов		= СтруктураПараметров.СтрокаВыделенияАвтотестов;
		СтруктураВыполненияАвтотестов 	= СтруктураПараметров.СтруктураВыполненияАвтотестов;
		
		// Выгрузка записей ЖР, добавленных при работе с обработкой
		ИмяФайлаОбщегоЛога = "\Logs\Logs_full_";
		ИмяФайлаЛогаОшибок = "\Logs\Logs_errors_";
		
		ШапкаПолногоЛогаЗаписана = _ЛокКонтекст.ЛокЯдро_ЗаписатьШапкуЛога(ИмяФайлаОбщегоЛога, ИмяФайлаЛогаОшибок);
		
		// Установка даты, начиная с которой будут получены и выгружены в лог записи ЖР
		ДатаНачалаВыгрузкиЖР = НачалоДня(ТекущаяДата()) - 7 * 24 * 60 * 60; // 7 дней назад
		_ЛокКонтекст.КомЯдро_СохранитьЗначениеПеременной("ДатаНачалаВыгрузкиЖР", ДатаНачалаВыгрузкиЖР);
		
		ДанныеДляОтбораЖР = "MobileSMARTSLog";
		
		Если ШапкаПолногоЛогаЗаписана Тогда
			_ЛокКонтекст.ЛокЯдро_ВыгрузитьЛогИзЖурналаРегистрации(ДанныеДляОтбораЖР);
		КонецЕсли;
		
		// Сохранение в папку, выбранную пользователем	
		ИмяФайлаОбщегоЛога = "\Logs_full_";
		ИмяФайлаЛогаОшибок = "\Logs_errors_";
		
		ШапкаПолногоЛогаЗаписана = _ЛокКонтекст.ЛокЯдро_ЗаписатьШапкуЛога(ИмяФайлаОбщегоЛога, ИмяФайлаЛогаОшибок, ИмяКаталога);
		
		Если ШапкаПолногоЛогаЗаписана Тогда
			_ЛокКонтекст.ЛокЯдро_ВыгрузитьЛогИзЖурналаРегистрации(ДанныеДляОтбораЖР,, ИмяКаталога);
		КонецЕсли;
		
		// Выполнение операций автотестов
		Попытка
			// Установка признака выполнения автотестов, чтобы можно было получить записи ЖР только по выполняемым операциям
			_ЛокКонтекст.КомЯдро_СохранитьЗначениеПеременной("Автотест", Истина);
			ИдАвтотеста = Строка(Новый УникальныйИдентификатор);
			_ЛокКонтекст.КомЯдро_СохранитьЗначениеПеременной("ИдАвтотеста", ИдАвтотеста);	
			
			ИмяФайлаОбщегоЛога = "\Logs\Autotest1C_logs_full_";
			ИмяФайлаЛогаОшибок = "\Logs\Autotest1C_logs_errors_";
			
			ШапкаЛогаЗаписана = _ЛокКонтекст.ЛокЯдро_ЗаписатьШапкуЛога(ИмяФайлаОбщегоЛога, ИмяФайлаЛогаОшибок);
			
			// Выполнение операций автотестов. Вместо параметра запуска будем передавать полное имя автотеста, 
			// т.к. в параметре запуска его может не быть, но в рамках данного автотеста необходимо его выполнить
			
			// Расширения не используются в обычном приложении, поэтому проверяем их только в управляемом
			ВыполнитьОперациюАвтотестовКлеверенс(
			"КлеверенсАвтотесты.ПроверкаПодключенныхРасширенийИПатчей", 
			"КлеверенсАвтотесты.ПроверкаПодключенныхРасширенийИПатчей", 
			СтруктураВыполненияАвтотестов, 
			Ложь, 
			Ложь, 
			СтрокаВыделенияАвтотестов);
			
			ВыполнитьОперациюАвтотестовКлеверенс(
			"КлеверенсАвтотесты.ПроверкаДоступностиРаботыСДокументами1С", 
			"КлеверенсАвтотесты.ПроверкаДоступностиРаботыСДокументами1С", 
			СтруктураВыполненияАвтотестов, 
			Ложь, 
			Ложь, 
			СтрокаВыделенияАвтотестов);
			
			ВыполнитьОперациюАвтотестовКлеверенс(
			"КлеверенсАвтотесты.ПолучитьСписокГлобальныхПеременныхИЗначений", 
			"КлеверенсАвтотесты.ПолучитьСписокГлобальныхПеременныхИЗначений", 
			СтруктураВыполненияАвтотестов, 
			Ложь, 
			Ложь, 
			СтрокаВыделенияАвтотестов);		
			
			ВыполнитьОперациюАвтотестовКлеверенс(
			"КлеверенсАвтотесты.ПолучитьСписокМакетовСКДДляВыгрузкиСправочников", 
			"КлеверенсАвтотесты.ПолучитьСписокМакетовСКДДляВыгрузкиСправочников", 
			СтруктураВыполненияАвтотестов, 
			Ложь, 
			Ложь, 
			СтрокаВыделенияАвтотестов);		
			
			ВыполнитьОперациюАвтотестовКлеверенс(
			"КлеверенсАвтотесты.ПолучитьСписокВсехБизнесПроцессов", 
			"КлеверенсАвтотесты.ПолучитьСписокВсехБизнесПроцессов", 
			СтруктураВыполненияАвтотестов, 
			Ложь, 
			Ложь, 
			СтрокаВыделенияАвтотестов);
			
			ВыполнитьОперациюАвтотестовКлеверенс(
			"КлеверенсАвтотесты.ПроверкаСоответствияИспользованияБизнесПроцессовИОтборов", 
			"КлеверенсАвтотесты.ПроверкаСоответствияИспользованияБизнесПроцессовИОтборов", 
			СтруктураВыполненияАвтотестов, 
			Ложь, 
			Ложь, 
			СтрокаВыделенияАвтотестов);			
			
			ВыполнитьОперациюАвтотестовКлеверенс(
			"КлеверенсАвтотесты.ПроверитьКорректностьНастроекБизнесПроцессов", 
			"КлеверенсАвтотесты.ПроверитьКорректностьНастроекБизнесПроцессов", 
			СтруктураВыполненияАвтотестов, 
			Ложь, 
			Ложь, 
			СтрокаВыделенияАвтотестов);
			
			ДанныеДляОтбораЖР = ИдАвтотеста;
			
			Если ШапкаЛогаЗаписана Тогда
				_ЛокКонтекст.ЛокЯдро_ВыгрузитьЛогИзЖурналаРегистрации(ДанныеДляОтбораЖР);
			КонецЕсли;
			
			// Сохранение в папку, выбранную пользователем
			ИмяФайлаОбщегоЛога = "\Autotest1C_logs_full_";
			ИмяФайлаЛогаОшибок = "\Autotest1C_logs_errors_";
			
			ШапкаЛогаЗаписана = _ЛокКонтекст.ЛокЯдро_ЗаписатьШапкуЛога(ИмяФайлаОбщегоЛога, ИмяФайлаЛогаОшибок, ИмяКаталога);
			
			Если ШапкаЛогаЗаписана Тогда
				_ЛокКонтекст.ЛокЯдро_ВыгрузитьЛогИзЖурналаРегистрации(ДанныеДляОтбораЖР,, ИмяКаталога);
			КонецЕсли;
			
			// Сбрасываем признак выполнения автотестов
			_ЛокКонтекст.КомЯдро_СохранитьЗначениеПеременной("Автотест", Ложь);
			
		Исключение
			// Сбрасываем признак выполнения автотестов
			_ЛокКонтекст.КомЯдро_СохранитьЗначениеПеременной("Автотест", Ложь);
		КонецПопытки;
		
		Если ШапкаПолногоЛогаЗаписана Или ШапкаЛогаЗаписана Тогда
			Сообщить("Выгрузка окончена.");
		Иначе
			Сообщить("Не удалось выгрузить файлы.");
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСправкаИнтеграционнаяОбработкаСсылкаНажатие(Элемент)
	ЗапуститьПриложение("https://www.cleverence.ru/support/67266/");
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовФормы_ОкноГлавныхНастроек

&НаКлиенте 
Процедура ТекущаяБазаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуНастройкиПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяБазаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуНастройкиПодключения();	
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПодключениеКБазеMS(Команда)
	ОткрытьФормуНастройкиПодключения();
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНастройкиБизнесПроцессов(Команда)
	
	ОП = Новый ОписаниеОповещения("РедактироватьНастройкиБизнесПроцессовПослеПодключения",ЭтаФорма);
	_ЛокКонтекст.ЛокЯдро_ПроверитьСоединениеССерверомSMARTS(,,,,,,ОП);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНастройкиУзлов(Команда)
	
	ОП = Новый ОписаниеОповещения("РедактироватьНастройкиУзловПослеПодключения",ЭтаФорма);
	_ЛокКонтекст.ЛокЯдро_ПроверитьСоединениеССерверомSMARTS(,,,,,,ОП);

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВсеНастройки(Команда)
	
	ОП = Новый ОписаниеОповещения("ОтобразитьВсеНастройкиПослеПодключения",ЭтаФорма);
	_ЛокКонтекст.ЛокЯдро_ПроверитьСоединениеССерверомSMARTS(,,,,,,ОП);	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВспомогательныеМеханизмы

// Получает из интеграционной обработки информацию совместимости и версию интеграции. 
// Обновляет отображение инофрмации на форме
// 
// Параметры:
&НаКлиенте
Процедура ОбновитьИнформациюОбИнтеграционнойОбработке()
	
	Если ЭтоАдресВременногоХранилища(_ЛокКонтекст._ИнтеграционнаяОбработкаАдрес) Тогда
		
		ПараметрыПодключенияMS = _ЛокКонтекст.КомЯдро_ПолучитьЗначениеПеременной("ПараметрыПодключенияMS");
		ИнформацияСовместимости = _ЛокКонтекст.ЛокЯдро_ПолучитьИнформациюСовместимости();
		_ЛокКонтекст.КомЯдро_СохранитьЗначениеПеременной("ИнформацияСовместимости",ИнформацияСовместимости);
		
		ПутьКОбработке = ИнформацияСовместимости.ПутьКФайлу;
		ЦветПутиКОбработке = 1;
		РежимОтладки = _ЛокКонтекст. ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("РежимОтладки");
		//Элементы.ПутьКОбработке.КнопкаВыбора = РежимОтладки<>Ложь И РежимОтладки = "ВсяИнформация"; 
		//ИнформацияСовместимости содержит следующие поля:
		//	ВерсияИнтеграции 					- Строка, код версии интеграционной обработки
		//	ВерсияAPI                           - Число, версия поддерживаемого API 
		//	ПоддерживаемаяКонфигурацияМассивИмен- Массив строк, Названия поддерживаемых конфигураций
		//	ПоддерживаемаяКонфигурацияСиноним 	- Строка, Человеческое название поддерживаемой конфигурации(или нескольких)
		//	флСоответствуетКонфигурации			- булево, результат проверки соответствия имени конфигурации, сама проверка происходит внутри интеграционной обработки, сюда должен приходить готовый результат
		//	ПоддерживаемыеВерсииКонфигурации	- Строка, диапазон поддерживаемых версий конфигураций
		//	флСоответствуетВерсии				- булево, результат проверки соответствия версии 
		СтрМетаданные = ПолучитьДанныеДляПервогоЗапуска();
		
		ВерсияИнтеграции 		= "API: v"+Строка(ИнформацияСовместимости.ВерсияAPI)+", "+ИнформацияСовместимости.ВерсияИнтеграции;
		КонфигурацияИнтеграции 	= ИнформацияСовместимости.ПоддерживаемаяКонфигурацияСиноним;
		ПоддерживаемыеВерсии 	= ИнформацияСовместимости.ПоддерживаемыеВерсииКонфигурации;

		//Должно быть написано красным и в конце поля восклицательный знак (!) если интеграционная обработке - не подходит для данной конфигурации
		//А также, в аннотациях при наведении должно быть написано: "Подключенная конфигурации не поддерживается обработкой и может работать с ошибками, 
		//проверьте верно ли выбрана рабочая конфигурация 1С при установке +ИмяУстановленнойПрограммыБазы+".		
		//Должно быть написано красным и в конце поля восклицательный знак (!) если Метаданные.Версия - не входит в поддерживаемый диапазон
		//А также, в аннотациях при наведении должно быть написано: "Данная версия конфигурации не поддерживается и может работать с ошибками". 				
		Если ИнформацияСовместимости.флСоответствуетКонфигурации Тогда			
			ЦветТекстаКонфигурации = 1;
			Элементы.КонфигурацияИнтеграции.Подсказка = "";
		Иначе
			СтруктураСменыСтатуса = Новый Структура("Статус, Параметр, Операция", 
				"ПодключеннаяИнтеграционнаяОбработкаДляДругойКонфигурации", 
				, 
				"ПодключениеИО");
			Оповестить("СменаСтатуса", СтруктураСменыСтатуса);    
			
			ЦветТекстаКонфигурации = 2;
			КонфигурацияИнтеграции = КонфигурацияИнтеграции + " (!)";
			Элементы.КонфигурацияИнтеграции.Подсказка = "
			|Подключенная конфигурации не поддерживается обработкой и может работать с ошибками, 
			|проверьте верно ли выбрана рабочая конфигурация 1С при установке """+ПараметрыПодключенияMS.Имя+"""";
			
			Сообщить("Ваша конфигурация 1С """+СтрМетаданные.ПодключеннаяБазаСинонимКонфигурации1С+""" не поддерживается выбранной обработкой интеграции (поддерживаемые конфигурации: """+ИнформацияСовместимости.ПоддерживаемаяКонфигурацияСиноним+"""). 
			|Убедитесь что выбрана верная обработка интеграции. Проверьте базу Mobile SMARTS на наличие обновлений. 
			|Возможно, что ваша конфигурация была переименована или её имя изменилось. 
			|В случае возникновения ошибок в работе приложения обратитесь в техническую поддержку: 
			|https://cleverence.ru/sd");
		КонецЕсли;
		
		Если ИнформацияСовместимости.флСоответствуетВерсии Тогда			
			ЦветТекстаВерсия = 1;
			Элементы.ПоддерживаемыеВерсии.Подсказка = "";
		Иначе
			СтруктураСменыСтатуса = Новый Структура("Статус, Параметр, Операция", 
				"ПодключеннаяИнтеграционнаяОбработкаДляДругойВерсии", 
				, 
				"ПодключениеИО");
			Оповестить("СменаСтатуса", СтруктураСменыСтатуса);    
			
			ЦветТекстаВерсия = 2;
			ПоддерживаемыеВерсии = ПоддерживаемыеВерсии + " (!)";
			Элементы.ПоддерживаемыеВерсии.Подсказка = "Данная версия конфигурации не поддерживается и может работать с ошибками";
		КонецЕсли;
		
		ТребуемаяВерсияИнтеграции = Лев(_ЛокКонтекст.ЛокЯдро_ПолучитьИнформациюОВнешнейОбработке("Версия"), 3);
		Попытка
			ТребуемаяВерсияИнтеграцииЧислом = Число(СтрЗаменить(ТребуемаяВерсияИнтеграции, ".", ""));
		Исключение
			ТребуемаяВерсияИнтеграцииЧислом = 0;
		КонецПопытки;
		ТекущаяВерсияИнтеграции = Лев(ИнформацияСовместимости.ВерсияИнтеграции, 3);
		Попытка
			ВерсияИнтеграцииЧислом = Число(СтрЗаменить(ТекущаяВерсияИнтеграции, ".", ""));
		Исключение
			ВерсияИнтеграцииЧислом = 0;
		КонецПопытки;
		
		флСоответствуетВерсииAPI = Ложь;
		
		ТекущаяВерсияAPI = ИнформацияСовместимости.ВерсияAPI;
		МассивПоддерживаемыхВерсийAPI = _ЛокКонтекст.ЛокЯдро_ПолучитьИнформациюОВнешнейОбработке("ПоддерживаемыеВерсииAPI");
		Если ТипЗнч(МассивПоддерживаемыхВерсийAPI) = Тип("Массив") Тогда
			Если МассивПоддерживаемыхВерсийAPI.Найти(ТекущаяВерсияAPI) <> Неопределено Тогда
				флСоответствуетВерсииAPI = Истина;
			КонецЕсли;
		КонецЕсли;		
		
		флСоответствуетВерсииИнтеграции = ВерсияИнтеграцииЧислом >= ТребуемаяВерсияИнтеграцииЧислом;		
		Если НЕ флСоответствуетВерсииИнтеграции Тогда
			ПереданныйПараметр = Новый Структура();
			ПереданныйПараметр.Вставить("ТребуемаяВерсия", ТребуемаяВерсияИнтеграции); 
			ПереданныйПараметр.Вставить("ТекущаяВерсия", ТекущаяВерсияИнтеграции);
			СтруктураСменыСтатуса = Новый Структура("Статус, Параметр, Операция", 
				"ПодключеннаяИнтеграционнаяОбработкаДругаяВерсияИнтеграции", 
				ПереданныйПараметр, 
				"ПодключениеИО");
			Оповестить("СменаСтатуса", СтруктураСменыСтатуса);    
			
			ЦветПутиКОбработке = 2;
		КонецЕсли;
		
		Если НЕ флСоответствуетВерсииAPI Тогда
			ПереданныйПараметр = Новый Структура();
			ПереданныйПараметр.Вставить("ПоддерживаемыеВерсииAPI", МассивПоддерживаемыхВерсийAPI); 
			ПереданныйПараметр.Вставить("ТекущаяВерсияAPI", ТекущаяВерсияAPI);
			СтруктураСменыСтатуса = Новый Структура("Статус, Параметр, Операция", 
				"ПодключеннаяИнтеграционнаяОбработкаДругаяВерсияAPI", 
				ПереданныйПараметр, 
				"ПодключениеИО");
			Оповестить("СменаСтатуса", СтруктураСменыСтатуса);    
			
			ЦветПутиКОбработке = 2;
		КонецЕсли;		
		
		Если ИнформацияСовместимости.флСоответствуетКонфигурации 
			И ИнформацияСовместимости.флСоответствуетВерсии
			И флСоответствуетВерсииИнтеграции
			И флСоответствуетВерсииAPI Тогда
			СтруктураСменыСтатуса = Новый Структура("Статус, Параметр, Операция", 
				"БезОшибок", 
				"", 
				"ПодключениеИО");
			Оповестить("СменаСтатуса", СтруктураСменыСтатуса);    

		КонецЕсли;
	
	Иначе
		СтруктураСменыСтатуса = Новый Структура("Статус, Параметр, Операция", 
			"НастройкиИзБазыПолученыПодключаемИнтеграционнуюОбработку", 
			"", 
			"ПодключениеИО");
		Оповестить("СменаСтатуса", СтруктураСменыСтатуса);    

		//Для всех трех - текст красным
		ПутьКОбработке = "Файл ""ИнтеграционнаяОбработка.epf"" неверный или отсутствует!";
		ВерсияИнтеграции = "Не подключена";
		КонфигурацияИнтеграции = "Не подключена";
		ПоддерживаемыеВерсии = "";
		ЦветПутиКОбработке = 2;
		ЦветТекстаКонфигурации = 2;
		ЦветТекстаВерсия = 2;
		
		ПараметрыПодключенияMS = _ЛокКонтекст.КомЯдро_ПолучитьЗначениеПеременной("ПараметрыПодключенияMS");
		
		Если ПараметрыПодключенияMS <> Неопределено Тогда
			ИмяИнтеграционнойОбработки  = ПараметрыПодключенияMS.ИмяИнтеграционнойОбработки;
			ПутьИнтеграционнойОбработки = ПараметрыПодключенияMS.ПутьИнтеграционнойОбработки;
					
			ПолныйПутьКИнтеграционнойОбработке = Строка(ПутьИнтеграционнойОбработки)+Строка(ИмяИнтеграционнойОбработки);
			Если _ЛокКонтекст.ИнтеграционнаяОбработкаПодключена = Истина Тогда
				
				СтруктураСменыСтатуса = Новый Структура("Статус, Параметр, Операция", 
					"ПодключеннаяИнтеграционнаяОбработкаНеТотФайл", 
					"", 
					"ПодключениеИО");
				Оповестить("СменаСтатуса", СтруктураСменыСтатуса);     

				Сообщить("Файл обработки по пути """+ПолныйПутьКИнтеграционнойОбработке+""" найден, 
				|но не является интеграционной обработкой или не соответствует формату. 
				|В случае возникновения проблем с подключением обратитесь в техническую поддержку: 
				|https://cleverence.ru/sd");
			Иначе
				
				СтруктураСменыСтатуса = Новый Структура("Статус, Параметр, Операция", 
					"ОшибкаПриЗапускеИнтеграционнойОбработки", 
					"", 
					"ПодключениеИО");
				Оповестить("СменаСтатуса", СтруктураСменыСтатуса);
								
				Сообщить("Файл интеграционной обработки по пути """+ПолныйПутьКИнтеграционнойОбработке+""" не найден, возможно он был удален или перемещен. 
				|Укажите путь к интеграционной обработке вручную и перезапустите текущую обработку. 
				|В случае возникновения проблем с подключением обратитесь в техническую поддержку: 
				|https://cleverence.ru/sd");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ЦветКрасный = WebЦвета.Красный;	
		ЦветОбычный = WebЦвета.КоролевскиГолубой;
		Элементы.КонфигурацияИнтеграции.ЦветТекстаПоля = ?(ЦветТекстаКонфигурации = 2,ЦветКрасный,ЦветОбычный);
		Элементы.ПоддерживаемыеВерсии.ЦветТекстаПоля = ?(ЦветТекстаВерсия = 2,ЦветКрасный,ЦветОбычный);
		Если ЦветПутиКОбработке = 2 Тогда
			Элементы.ПутьКОбработке.ЦветТекстаПоля = ЦветКрасный;
			Элементы.КонфигурацияИнтеграции.ЦветТекстаПоля = ЦветКрасный;
			Элементы.ПоддерживаемыеВерсии.ЦветТекстаПоля = ЦветКрасный;
		Иначе
			Элементы.ПутьКОбработке.ЦветТекстаПоля = ЦветОбычный;
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

// Выгружает  в базу SMARTS все отмеченные справочники 
// 
// Параметры:
//	СерверДоступен - Булево - флаг доступности сервера Mobile Smarts
//	ДопПараметры - Произвольный
&НаКлиенте
Процедура ВыгрузитьСправочники(СерверДоступен,ДопПараметры) Экспорт
	
	Если НЕ СерверДоступен = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеВопросВыгрузитьСправочникиЗавершение = Новый ОписаниеОповещения("ВопросВыгрузитьСправочникиЗавершение", ЭтаФорма);
	ПоказатьВопрос(ОповещениеВопросВыгрузитьСправочникиЗавершение, "Выгрузить справочники?", РежимДиалогаВопрос.ДаНет, , , "Внимание");
	
КонецПроцедуры

// Выгружает список бизнес-процессов в базу SMARTS
&НаКлиенте
Процедура ВыгрузитьБизнесПроцессы()
	
	НастройкиБизнесПроцессов = _ЛокКонтекст.ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("НастройкиБизнесПроцессов");	
	Если НЕ ЗначениеЗаполнено(НастройкиБизнесПроцессов) ИЛИ НастройкиБизнесПроцессов = Ложь Тогда			
		Возврат;
	КонецЕсли; 	
	
	// Выгружаются все строки бизнес процессов, которые имеют статус включен в таблицу БизнесПроцессы базы смартс.
	ТаблицаДляВыгрузки = Новый Массив;
	Для Каждого СтрокаНастройки ИЗ НастройкиБизнесПроцессов Цикл
		Если СтрокаНастройки.Свойство("ЭтоТаблицаЗначений") ИЛИ НЕ СтрокаНастройки.Используется Тогда
			Продолжить;
		КонецЕсли;
		Настройка = Новый Структура(); 
		Настройка.Вставить("Ид",СтрокаНастройки.ID_БизнесПроцесса);		
		Настройка.Вставить("Наименование",СтрокаНастройки.Название);
		Настройка.Вставить("ТипДокументаMobileSMARTS",СтрокаНастройки.ТипДокументаMS);
		Настройка.Вставить("ТипИсходногоДокумента",СтрокаНастройки.ТипИсходногоДокумента1С);
		Настройка.Вставить("ТипРезультирующегоДокумента",СтрокаНастройки.ТипРезультирующегоДокумента1С);
		ТаблицаДляВыгрузки.Добавить(Настройка);
	КонецЦикла;
	
	_ЛокКонтекст.ЛокЯдро_ВыгрузитьПодготовленнуюТаблицуНаСерверSMARTS("БизнесПроцессы", ТаблицаДляВыгрузки, ID_ТекущейБазы);	
	
КонецПроцедуры	

// Формирует список допустимых ключей параметров запуска программы 1С 
// 
// Параметры:
// 	ПараметрЗапуска - Строка - Параметр запуска
//
// Возвращаемое значение:
// 	Булево - Параметр запуска найден в исклбчениях
&НаКлиенте
Функция ПараметрЗапускаИсключение(ПараметрЗапуска)
	
	СписокИсключений = Новый СписокЗначений;
	СписокИсключений.Добавить("/С ЗапуститьОбновлениеИнформационнойБазы"); //УТАП 10.3 всегда запускает с таким параметром
	СписокИсключений.Добавить("ОбновитьКомпоненту");                       // Далион УМ
	
	
	ЗначениеНайдено = Не (СписокИсключений.НайтиПоЗначению(ПараметрЗапуска) = Неопределено);
	
	Возврат ЗначениеНайдено;
	
КонецФункции

// Формирует структуру с метаданными базы 1С
// 
// Возвращаемое значение:
// 	Структура - структура с метаданными
&НаСервере
Функция ПолучитьДанныеДляПервогоЗапуска()
	
	СисИнфо = Новый СистемнаяИнформация;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПодключеннаяБазаИмяКонфигурации1С",	  СокрЛП(Метаданные.Имя));
	СтруктураПараметров.Вставить("ПодключеннаяБазаСинонимКонфигурации1С", СокрЛП(Метаданные.Синоним)); 
	СтруктураПараметров.Вставить("ПодключеннаяБазаВерсияПлатформы1С",	  СокрЛП(СисИнфо.ВерсияПриложения));
	СтруктураПараметров.Вставить("ПодключеннаяБазаВерсияКонфигурации1С",  СокрЛП(Метаданные.Версия));
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Инициализирует форму локального контекста и заполняет в переменную формы
&НаКлиенте
Процедура СоздатьЛокКонекст()
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		_ЛокКонтекст = Объект.ПолучитьФорму("ОФ_ЛокальныйКонтекст",ЭтаФорма);
	#Иначе
		_ЛокКонтекст = ПолучитьФорму(ПолноеИмяОбъекта + ".Форма.ЛокальныйКонтекст");
	#КонецЕсли
	_ЛокКонтекст.ЗакрыватьПриЗакрытииВладельца 	= Истина;
	_ЛокКонтекст.ОбъектСсылка 					= ОбъектСсылка;
КонецПроцедуры

// Открывает форму настройки подключения к базе SMARTS
&НаКлиенте
Процедура ОткрытьФормуНастройкиПодключения()
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ФормаНастройкиПодключения = ПолучитьФорму("ОФ_ФормаСлужебная_НастройкиПодключения",ЭтаФорма);
	#Иначе
		СтруктураПараметров = Новый Структура;
		ЭтоВебКлиент = Ложь;
		#Если ВебКлиент Тогда
			ЭтоВебКлиент = Истина;
		#КонецЕсли
        СтруктураПараметров.Вставить("ЭтоВебКлиент", ЭтоВебКлиент);

		ФормаНастройкиПодключения = ПолучитьФорму(_ЛокКонтекст.ПолноеИмяОбъекта + ".Форма.ФормаСлужебная_НастройкиПодключения", СтруктураПараметров, ЭтаФорма, ЭтаФорма);
		ФормаНастройкиПодключения.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ФормаНастройкиПодключения.ДоступноВыполнениеВФоне = ДоступноВыполнениеВФоне;
	#КонецЕсли
	
	СтруктураПараметров = Новый Структура("ПараметрыПодключения, Компонента, ТипИнтерфейса, РежимВыбораБазы");
	
	ЕстьЧастнаяБаза = _ЛокКонтекст.ЕстьЧастнаяБаза;
	Если ЕстьЧастнаяБаза Тогда
		// Получаем настройки подключения частной базы из соответствующей переменной
		СтруктураПодключенияMS = _ЛокКонтекст.КомЯдро_ПолучитьЗначениеПеременной("СтруктураПодключенияЧастнойБазыMS");
		Если СтруктураПодключенияMS <> Неопределено Тогда
			СтруктураПараметров.ПараметрыПодключения = СтруктураПодключенияMS.ОписаниеБазы;
		Иначе
			СтруктураПараметров.ПараметрыПодключения = _ЛокКонтекст.ЛокЯдро_ПолучитьДанныеИзХранилища1С("Cleverence_ПараметрыПодключенияMS");
		КонецЕсли;		
	Иначе
		СтруктураПараметров.ПараметрыПодключения	= _ЛокКонтекст.ЛокЯдро_ПолучитьДанныеИзХранилища1С("Cleverence_ПараметрыПодключенияMS");
		СтруктураПараметров.Компонента				= _ЛокКонтекст.ЛокЯдро_ПолучитьДанныеИзХранилища1С("Cleverence_РасположениеКомпоненты");
		СтруктураПараметров.ТипИнтерфейса			= _ЛокКонтекст.ЛокЯдро_ПолучитьДанныеИзХранилища1С("Cleverence_ТипИнтерфейса");
		СтруктураПараметров.РежимВыбораБазы			= _ЛокКонтекст.ЛокЯдро_ПолучитьДанныеИзХранилища1С("Cleverence_РежимВыбораБазы");
	КонецЕсли;
	
	ФормаНастройкиПодключения.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаНастройкиПодключения._ЛокКонтекст 					= _ЛокКонтекст;
	ФормаНастройкиПодключения.БазаСМАРТС 					= ID_ТекущейБазы;
	ФормаНастройкиПодключения.ТипБазы						= ?(ЕстьЧастнаяБаза, "Частная", "Основная");
	ФормаНастройкиПодключения.ПараметрыПодключения			= СтруктураПараметров.ПараметрыПодключения;
	ФормаНастройкиПодключения.Компонента					= СтруктураПараметров.Компонента;
	ФормаНастройкиПодключения.ТипИнтерфейса					= СтруктураПараметров.ТипИнтерфейса;
	ФормаНастройкиПодключения.РежимВыбораБазы				= СтруктураПараметров.РежимВыбораБазы;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ФормаНастройкиПодключения.ОткрытьМодально();
	#Иначе
		ФормаНастройкиПодключения.Открыть();
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСтруктуруПараметровЗапуска()
	
	СтруктураПараметровЗапуска = Новый Структура;
	
	Если Найти(ВРег(ПараметрЗапуска), "TESTCLIENT") Тогда
		СтруктураПараметровЗапуска.Вставить("ЭтоТестКлиент", Истина);
	КонецЕсли;
	Если Найти(ВРег(ПараметрЗапуска), "НЕЗАПУСКАТЬФОНОВЫЕЗАДАНИЯ") Тогда
		СтруктураПараметровЗапуска.Вставить("НеЗапускатьФоновыеЗадания", Истина);
	Иначе
		СтруктураПараметровЗапуска.Вставить("НеЗапускатьФоновыеЗадания", Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ДоступноВыполнениеВФоне()
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Возврат Ложь;
	#КонецЕсли
	
	#Если ВебКлиент Тогда
		ЭтоВнешняяОбработка = _ЛокКонтекст.ЛокЯдро_ЭтоВнешняяОбработка();
		Если ЭтоВнешняяОбработка И
			Не ЗначениеЗаполнено(ОбъектСсылка) Тогда
			// В веб-клиенте в открытой ОО из файла не доступно выполнение в фоне из-за ограничений метода ИспользуемоеИмяФайла,
			// который в веб-клиенте не возвращает полный путь к файлу внешней обработки
			Возврат Ложь;
		КонецЕсли;
	#КонецЕсли
	
	ДоступностьВыполненияВФоне = Ложь;
	
	ВерсияБСП = ПолучитьВерсиюБСП();
	
	Если ВерсияБСП <> Неопределено Тогда
		
		// Определяем, что выполнение в фоне доступно, если версия БСП больше 3.0.0.0
		РезультатСравнения = _ЛокКонтекст.ЛокЯдро_СравнитьВерсии(ВерсияБСП, "3.0.0.0");
		
		Если РезультатСравнения > 0 Тогда
			ДоступностьВыполненияВФоне = Истина;		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДоступностьВыполненияВФоне;
	
КонецФункции

&НаКлиенте
Функция ПолучитьВерсиюБСП()
	
	ВерсияБСП = Неопределено;

	ИмяМодуля = "СтандартныеПодсистемыВызовСервера";

	Модуль = _ЛокКонтекст.ЛокЯдро_ВычислитьВБезопасномРежиме("Метаданные.ОбщиеМодули.Найти(" + """" + ИмяМодуля + """" + ") <> Неопределено");
	
	Если Модуль <> Неопределено Тогда
		Попытка
			ВерсияБСП = _ЛокКонтекст.ЛокЯдро_ВычислитьВБезопасномРежиме("" + ИмяМодуля + "" + ".ВерсияБиблиотеки()");
		Исключение
		КонецПопытки;		
	КонецЕсли;
	
	Возврат ВерсияБСП;
				
КонецФункции

&НаКлиенте
Процедура ЗаписатьПризнакДоступностиВыполненияВФоне()

	_ЛокКонтекст.ДоступноВыполнениеВФоне = ДоступноВыполнениеВФоне; // Передаем признак в лок контекст
	_ЛокКонтекст.КомЯдро_СохранитьЗначениеПеременной("ДоступноВыполнениеВФоне", ДоступноВыполнениеВФоне); // Записываем в кэш

КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеМеханизмы_РаботаСФормой

&НаКлиенте
Процедура ДействияПриОткрытииФормы(СерверДоступен, РезультатПодключенияИнтеграционнойОбработки, СтрокаБазы)
	
	НачалоСобытия = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	// Инициализируем отдельную переменную ВыполняетсяВФоне, 
	// т.к. в процессе выполнения ФЗ при ошибке мы можем поменять значение переменной ДоступноВыполнениеВФоне
	ВыполняетсяВФоне = ДоступноВыполнениеВФоне;	
	ИнициализацияВФоне = РасположениеКомпоненты = "НаСервере"; // Пока в фоне инициализируем только при серверной компоненте
	ПараметрыПодключенияMS = _ЛокКонтекст.КомЯдро_ПолучитьЗначениеПеременной("ПараметрыПодключенияMS");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СерверДоступен", 									СерверДоступен);
	ДополнительныеПараметры.Вставить("РезультатПодключенияИнтеграционнойОбработки", 	РезультатПодключенияИнтеграционнойОбработки);
	ДополнительныеПараметры.Вставить("СтрокаБазы", 										СтрокаБазы);
	ДополнительныеПараметры.Вставить("НачалоСобытия", 									НачалоСобытия);
	ДополнительныеПараметры.Вставить("ПараметрыПодключенияMS", 							ПараметрыПодключенияMS);
	ДополнительныеПараметры.Вставить("ИзменитьТекущиеНастройкиMS", 						Ложь);	
	
	Если  _ЛокКонтекст.ЛокЯдро_ПроверитьСозданиеКОМОбъекта() = Истина Тогда	
		Если ТекущаяБазаСуществует Тогда		
			Если СерверДоступен <> Неопределено И СерверДоступен Тогда 
				Если НЕ _ЛокКонтекст.НастройкиИнициализированы = Истина Тогда
					ДополнительныеПараметры.Вставить("ИзменитьТекущиеНастройкиMS", 	Истина);
					ОписаниеОповещения = Неопределено;
					Если ВыполняетсяВФоне И
						ИнициализацияВФоне Тогда
						// Метод из описания оповещения будет вызван после выполнения фонового задания
						// т.к. после выполнения ФЗ будут получены все настройки
						ОписаниеОповещения = Новый ОписаниеОповещения("ДействияПриОткрытииФормыЗавершение", ЭтаФорма, ДополнительныеПараметры);
					КонецЕсли;
					_ЛокКонтекст.ЛокЯдро_Инициализация(, ОписаниеОповещения);
				КонецЕсли;
			ИначеЕсли ВыполнениеВнешнейКоманды = Истина Тогда
				ОповещениеВопросОткрытьГлавнуюФорму = Новый ОписаниеОповещения("ВопросОткрытьГлавнуюФормуЗавершение", ЭтаФорма);
				ПоказатьВопрос(ОповещениеВопросОткрытьГлавнуюФорму, "Ошибка соединения с сервером Mobile SMARTS. Открыть обработку для настройки подключения?", РежимДиалогаВопрос.ДаНет, , , "Внимание");	
			КонецЕсли;
		Иначе
			Если Не ВыполнениеВнешнейКоманды = Истина Тогда
				ОткрытьФормуНастройкиПодключения();
						
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Получить данные конфигурации из подключенной базы Mobile SMARTS не удалось,"
				+ ?(_ЛокКонтекст.ПараметрыПодключенияMS <> Неопределено, Символы.ПС + """" + ИмяТекущейБазы + """, """ + _ЛокКонтекст.ПараметрыПодключенияMS.СтрокаПодключения + """", "")+
				"
				|Если ошибка повторяется обратитесь в техническую поддержку Клеверенс
				|https://cleverence.ru/sd";
				Сообщение.Сообщить();
				Элементы.ВыбратьБазу.Видимость = Истина;
			Иначе
				ОповещениеВопросОткрытьГлавнуюФорму = Новый ОписаниеОповещения("ВопросОткрытьГлавнуюФормуЗавершение", ЭтаФорма);
				ПоказатьВопрос(ОповещениеВопросОткрытьГлавнуюФорму, "Ошибка соединения с базой Mobile SMARTS. Открыть обработку для настройки подключения?", РежимДиалогаВопрос.ДаНет, , , "Внимание");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СерверДоступен = Неопределено Тогда
		СтруктураСменыСтатуса = Новый Структура("Статус, Параметр, Операция", 
			"КоннекторMSСозданПроверяемДоступностьБазы", 
			"", 
			"ПодключениеКБазеSMARTS");
		Оповестить("СменаСтатуса", СтруктураСменыСтатуса);
		Если Не ВыполнениеВнешнейКоманды = Истина Тогда
			ОткрытьФормуНастройкиПодключения();
		КонецЕсли;
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось подключить внешнюю компоненту. Пожалуйста, убедитесь, что на компьютере установлена платформа Mobile SMARTS и зарегистрирована внешняя компонента
		|Варианты решения: 
		|1) Зарегистрировать внешнюю компоненту [C:\Program Files (x86)\Cleverence Soft\Mobile SMARTS\Connectivity\Зарегистрировать COM.bat]
		|2) Установить/переустановить платформу Mobile SMARTS
		|3) Обратиться в техническую поддержку по адресу [https://cleverence.ru/sd]";
		Сообщение.Сообщить();
	КонецЕсли;			
	
	// Сделан вызов отдельной процедуры для работы фоновых заданий, через вызов описания оповещения
	Если Не (ВыполняетсяВФоне И ИнициализацияВФоне) Тогда
		ДействияПриОткрытииФормыЗавершение(, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Обновляет выпадающий список выбора текущего узла, всеми доступными узлами 
&НаКлиенте 
Процедура УстановитьСписокВыбораУзлов()
	
	Элементы.ID_ТекущегоУзла.СписокВыбора.Очистить();
	
	ВсеУзлы = _ЛокКонтекст.ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("Узлы");
	Если НЕ ВсеУзлы = Ложь И ТипЗнч(ВсеУзлы) = Тип("Массив") Тогда
		Для Каждого СтрокаУзла Из ВсеУзлы Цикл
			Если СтрокаУзла.Свойство("ЭтоТаблицаЗначений") Тогда
				Продолжить;
			Конецесли;
			Элементы.ID_ТекущегоУзла.СписокВыбора.Добавить(СтрокаУзла.ID_Узла, СтрокаУзла.Наименование);
		КонецЦикла;
		Элементы.ID_ТекущегоУзла.СписокВыбора.СортироватьПоПредставлению();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокФормы()
	
	Заголовок = "Клеверенс: " + ИмяПриложения;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСсылкуНаБазуЗнаний()	
	
	Если Найти(ИмяПриложения, "Магазин") Тогда		
		Ссылка = "https://www.cleverence.ru/support/category:697/"; 
	ИначеЕсли Найти(ИмяПриложения, "Склад") Тогда			
		Ссылка = "https://www.cleverence.ru/support/50247/"; 
	Иначе
		Ссылка = "https://www.cleverence.ru/support/category:26/"; 
	КонецЕсли;	
			
	Элементы.СсылкаНаИнформациюПоРаботеСОбработкой.Подсказка = Ссылка;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьQRCode(QRCodeСтрока = "", ТипУстановленногоПродукта = "")
	
	Если НЕ ЗначениеЗаполнено(QRCodeСтрока) ИЛИ ТипУстановленногоПродукта = "МДЛП" Тогда
		КартинкаQRCode = "";
	Иначе
		ДанныеQRКода = ДанныеQRКода(QRCodeСтрока, 0, 190);
		
		Если ДанныеQRКода = Неопределено Тогда
			КартинкаQRCode = "";
		Иначе
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				Элементы.КартинкаQRКод.Картинка = Новый Картинка(ДанныеQRКода);
				КартинкаQRCode = "QR";
			#Иначе
				КартинкаQRCode = ПоместитьВоВременноеХранилище(ДанныеQRКода, УникальныйИдентификатор);
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДекорацияQRКод.Заголовок = ?(ЗначениеЗаполнено(КартинкаQRCode), "Для подключения мобильного устройства" + Символы.ПС + "к базе Mobile SMARTS сканируйте штрихкод", "");
	
КонецПроцедуры

&НаСервере
Функция ДанныеQRКода(QRСтрока, УровеньКоррекции, Размер) Экспорт
	
	Попытка
		#Область НесовместимыйКодFresh
		Выполнить("ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(QRСтрока, УровеньКоррекции, Размер);");
		#КонецОбласти //НесовместимыйКодFresh
		#Область СовместимыйКодFresh
		//ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(QRСтрока, УровеньКоррекции, Размер);
		#КонецОбласти //СовместимыйКодFresh
	Исключение
		ДанныеQRКода = Неопределено;
	КонецПопытки;
	
	Возврат ДанныеQRКода;
	
КонецФункции

// Изменяет описание статуса, согласно полученному параметру
// 
// Параметры:
// 	Параметр - Структура - Структура с описанием статуса
&НаКлиенте
Процедура СменитьСтатус(Параметр)
	
	СтатусЗапускаОсновнойОбработки 	= Параметр.Статус;
	ПереданныйПараметр 				= Параметр.Параметр;
	ОперацияПоСменеСтатуса			= ?(Параметр.Свойство("Операция"), Параметр.Операция, "Служебное");
	Если Параметр.Свойство("ТипБазы") Тогда
		ТипБазы = Параметр.ТипБазы;
	Иначе
		ТипБазы = "Основная";
	КонецЕсли;
	
	ОбновитьВидимостьЭлементов();
	
	Если СтатусЗапускаОсновнойОбработки = "НачалоВыполненияПроцедурыЗапускаОбработки" Тогда		
		ОбновитьВидимостьЭлементов(Ложь,Ложь,Истина);                                      		
		ТекстСостояния = "Работа невозможна! Проверка безопасности базы 1С: Предприятие заблокировала работу обработки, перезапустите обработку!";				
		СтруктураЗначения = Новый Структура("Текст, Цвет", ТекстСостояния, УстановитьЦветСтатуса(1));
		СтруктураОшибокСостояний.Вставить(ОперацияПоСменеСтатуса, СтруктураЗначения);
		
	ИначеЕсли СтатусЗапускаОсновнойОбработки="ПроверкаБезопасностиПройденаПроверямЗапускКомMS" Тогда
		ОбновитьВидимостьЭлементов(Ложь,Истина,Истина);
		ТекстСостояния = "Работа невозможна! COM-компонента Mobile SMARTS не найдена. Требуется устранить проблему и перезапустить обработку!";				
		СтруктураЗначения = Новый Структура("Текст, Цвет", ТекстСостояния, УстановитьЦветСтатуса(1));
		СтруктураОшибокСостояний.Вставить(ОперацияПоСменеСтатуса, СтруктураЗначения);
		
	ИначеЕсли СтатусЗапускаОсновнойОбработки="КоннекторMSСозданПроверяемДоступностьБазы" Тогда
		ОбновитьВидимостьЭлементов(Ложь,Истина);
		ТекстСостояния = "Работа невозможна! База не найдена или недоступна, выберите другую базу и перезапустите обработку!";		
		СтруктураЗначения = Новый Структура("Текст, Цвет", ТекстСостояния, УстановитьЦветСтатуса(1));
		СтруктураОшибокСостояний.Вставить(ОперацияПоСменеСтатуса, СтруктураЗначения);
		
	ИначеЕсли СтатусЗапускаОсновнойОбработки="БазаНайденаИПодключенаПолучаемНастройки" Тогда
		ТекстСостояния = "Работа невозможна! Возникла непредвиденная проблема при получении настроек из базы Mobile SMARTS, устраните проблему и перезапустите обработку!";
		СтруктураЗначения = Новый Структура("Текст, Цвет", ТекстСостояния, УстановитьЦветСтатуса(1));
		СтруктураОшибокСостояний.Вставить(ОперацияПоСменеСтатуса, СтруктураЗначения);
		
	ИначеЕсли СтатусЗапускаОсновнойОбработки="ПрямаяРаботаТСДНеПодключен" Тогда
		ТекстСостояния = "Работа невозможна! Подключите ТСД к ПК и перезапустите обработку!";
		СтруктураЗначения = Новый Структура("Текст, Цвет", ТекстСостояния, УстановитьЦветСтатуса(1));
		СтруктураОшибокСостояний.Вставить(ОперацияПоСменеСтатуса, СтруктураЗначения);
		
	ИначеЕсли СтатусЗапускаОсновнойОбработки="РаботаССерверомБазаНедоступна" Тогда
		Если ТипБазы <> "Частная" Тогда
			ОбновитьВидимостьЭлементов(Ложь,Истина);
		КонецЕсли;                                                                         		
		ТекстСостояния = "Работа невозможна! База Mobile SMARTS с ID: <"+?(ТипЗнч(ПереданныйПараметр) = Тип("Структура") и ПереданныйПараметр.Свойство("IdBaseSMARTS"),ПереданныйПараметр.IdBaseSMARTS,ПереданныйПараметр)+"> недоступна! Возможные причины: Служба сервера или база Mobile SMARTS не запущена, или Мобильное устройство не подключено кабелем к компьютеру, или на мобильное устройстве нет подключенной базы Mobile SMARTS. Решение: Перезапустить сервер Mobile SMARTS, и/или подключить мобильное устройство кабелем, и/или выгрузить базу на мобильное устройство из менеджера баз Mobile SMARTS. После выполнения - перезапустите обработку!";				
		СтруктураЗначения = Новый Структура("Текст, Цвет", ТекстСостояния, УстановитьЦветСтатуса(2));
		СтруктураОшибокСостояний.Вставить(ОперацияПоСменеСтатуса, СтруктураЗначения);
		
	ИначеЕсли СтатусЗапускаОсновнойОбработки="РаботаСПапкойДанныеНеДоступны" Тогда
		ТекстСостояния = "Работа невозможна! Данные в папке недоступны, выгрузите данные в папку из менеджера баз Mobile SMARTS и перезапустите обработку!";
		СтруктураЗначения = Новый Структура("Текст, Цвет", ТекстСостояния, УстановитьЦветСтатуса(2));
		СтруктураОшибокСостояний.Вставить(ОперацияПоСменеСтатуса, СтруктураЗначения);
		
	ИначеЕсли СтатусЗапускаОсновнойОбработки="НачалоПодключенияИнтеграционнойОбработкиСообщениеБезопасности" Тогда
		ОбновитьВидимостьЭлементов(Ложь,Ложь,Истина);
		ТекстСостояния = "Проверка безопасности базы 1С: Предприятие заблокировала подключение интеграционной обработки, перезапустите обработку!";		
		СтруктураЗначения = Новый Структура("Текст, Цвет", ТекстСостояния, УстановитьЦветСтатуса(1));
		СтруктураОшибокСостояний.Вставить(ОперацияПоСменеСтатуса, СтруктураЗначения);
		
	ИначеЕсли СтатусЗапускаОсновнойОбработки="НастройкиИзБазыПолученыПодключаемИнтеграционнуюОбработку" Тогда
		ТекстСостояния = "Ограниченный функционал! Интеграционная обработка не найдена, функционал сильно ограничен!";
		СтруктураЗначения = Новый Структура("Текст, Цвет", ТекстСостояния, УстановитьЦветСтатуса(2));
		СтруктураОшибокСостояний.Вставить(ОперацияПоСменеСтатуса, СтруктураЗначения);
		
	ИначеЕсли СтатусЗапускаОсновнойОбработки="ПодключеннаяИнтеграционнаяОбработкаНеТотФайл" Тогда
		ТекстСостояния = "Ограниченный функционал! Подключенный файл не является интеграционной обработкой, функционал сильно ограничен!";
		СтруктураЗначения = Новый Структура("Текст, Цвет", ТекстСостояния, УстановитьЦветСтатуса(2));
		СтруктураОшибокСостояний.Вставить(ОперацияПоСменеСтатуса, СтруктураЗначения);
		
	ИначеЕсли СтатусЗапускаОсновнойОбработки="ИнтеграционнаяОбработкаНайденаЗапускаемЕё" Тогда
		ТекстСостояния = "Ограниченный функционал! Ошибка при подключении интеграционной обработки, функционал сильно ограничен!";
		СтруктураЗначения = Новый Структура("Текст, Цвет", ТекстСостояния, УстановитьЦветСтатуса(2));
		СтруктураОшибокСостояний.Вставить(ОперацияПоСменеСтатуса, СтруктураЗначения);
		
	ИначеЕсли СтатусЗапускаОсновнойОбработки="ОшибкаПриЗапускеИнтеграционнойОбработки" Тогда
		ТекстСостояния = "Ограниченный функционал! Ошибка при подключении интеграционной обработки, функционал сильно ограничен!";
		СтруктураЗначения = Новый Структура("Текст, Цвет", ТекстСостояния, УстановитьЦветСтатуса(2));
		СтруктураОшибокСостояний.Вставить(ОперацияПоСменеСтатуса, СтруктураЗначения);
		
	ИначеЕсли СтатусЗапускаОсновнойОбработки="ПодключеннаяИнтеграционнаяОбработкаДляДругойКонфигурации" Тогда
		ТекстСостояния = "Можно работать! Интеграционная обработка для другой конфигурации, возможны ошибки при работе!";
		СтруктураЗначения = Новый Структура("Текст, Цвет", ТекстСостояния, УстановитьЦветСтатуса(3));
		СтруктураОшибокСостояний.Вставить(ОперацияПоСменеСтатуса, СтруктураЗначения);
		
	ИначеЕсли СтатусЗапускаОсновнойОбработки="ПодключеннаяИнтеграционнаяОбработкаДляДругойВерсии" Тогда
		ТекстСостояния = "Можно работать! Интеграционная обработка для другой версии конфигурации, возможны ошибки при работе!";
		СтруктураЗначения = Новый Структура("Текст, Цвет", ТекстСостояния, УстановитьЦветСтатуса(3));
		СтруктураОшибокСостояний.Вставить(ОперацияПоСменеСтатуса, СтруктураЗначения);
		
	ИначеЕсли СтатусЗапускаОсновнойОбработки="ПодключеннаяИнтеграционнаяОбработкаДругаяВерсияИнтеграции" Тогда
		ТребуемаяВерсия = "<>";
		ТекущаяВерсия = "<>";
		ПереданныйПараметр.Свойство("ТребуемаяВерсия", ТребуемаяВерсия);
		ПереданныйПараметр.Свойство("ТекущаяВерсия", ТекущаяВерсия);
		
		ТекстСостояния = "Для корректной работы в программе интеграционная обработка должна иметь версию " + ТребуемаяВерсия + ", текущая версия " + ТекущаяВерсия + ", подключите подходящую интеграционную обработку. Если проблему самостоятельно решить не удается, сделайте скрин данного окна обработки и напишите в техническую поддержку https://cleverence.ru/sd";
		СтруктураЗначения = Новый Структура("Текст, Цвет", ТекстСостояния, УстановитьЦветСтатуса(1));
		СтруктураОшибокСостояний.Вставить(ОперацияПоСменеСтатуса, СтруктураЗначения);
		
	ИначеЕсли СтатусЗапускаОсновнойОбработки = "ПодключеннаяИнтеграционнаяОбработкаДругаяВерсияAPI" Тогда
		ПоддерживаемыеВерсииAPIСтрокой = "";
		ПоддерживаемыеВерсииAPI = Новый Массив;
		ТекущаяВерсияAPI = "<>";
		
		ПереданныйПараметр.Свойство("ПоддерживаемыеВерсииAPI", ПоддерживаемыеВерсииAPI);
		ПереданныйПараметр.Свойство("ТекущаяВерсияAPI", ТекущаяВерсияAPI);
		
		Для Каждого ПоддерживаемаяВерсияAPI Из ПоддерживаемыеВерсииAPI Цикл		
			ПоддерживаемыеВерсииAPIСтрокой = ПоддерживаемыеВерсииAPIСтрокой + ПоддерживаемаяВерсияAPI + ", ";		
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ПоддерживаемыеВерсииAPIСтрокой) Тогда
			ПоддерживаемыеВерсииAPIСтрокой = Лев(ПоддерживаемыеВерсииAPIСтрокой, СтрДлина(ПоддерживаемыеВерсииAPIСтрокой) - 2);
		Иначе
			ПоддерживаемыеВерсииAPIСтрокой = "<>";
		КонецЕсли;
				
		ТекстСостояния = "Для корректной работы в программе интеграционная обработка должна иметь версию api, входящую в список " + ПоддерживаемыеВерсииAPIСтрокой + ", текущая версия api " + ТекущаяВерсияAPI + ", подключите подходящую интеграционную обработку. Если проблему самостоятельно решить не удается, сделайте скрин данного окна обработки и напишите в техническую поддержку https://cleverence.ru/sd";
		СтруктураЗначения = Новый Структура("Текст, Цвет", ТекстСостояния, УстановитьЦветСтатуса(1));
		СтруктураОшибокСостояний.Вставить(ОперацияПоСменеСтатуса, СтруктураЗначения);
		
	ИначеЕсли СтатусЗапускаОсновнойОбработки = "НачалоПроверкиДоступностиОнлайнРежимаСообщениеБезопасности" Тогда		
		ОбновитьВидимостьЭлементов(Ложь, Ложь, Истина);
		ТекстСостояния = "Проверка безопасности базы 1С: Предприятие заблокировала проверку доступности онлайн режима, перезапустите обработку!";		
		СтруктураЗначения = Новый Структура("Текст, Цвет", ТекстСостояния, УстановитьЦветСтатуса(1));
		СтруктураОшибокСостояний.Вставить(ОперацияПоСменеСтатуса, СтруктураЗначения);
		
	ИначеЕсли СтатусЗапускаОсновнойОбработки = "РаботаВОнлайнеНедоступна" Тогда                                  		
		ТекстСостояния = "Работа возможна только в оффлайн режиме, так как база с Mobile SMARTS не доступна с сервера 1С, проверьте настройки подключения к базе Mobile SMARTS.";
		СтруктураЗначения = Новый Структура("Текст, Цвет", ТекстСостояния, УстановитьЦветСтатуса(1));
		СтруктураОшибокСостояний.Вставить(ОперацияПоСменеСтатуса, СтруктураЗначения);
		
	ИначеЕсли СтатусЗапускаОсновнойОбработки = "ТребуетсяОбновитьИнформациюОбИнтеграционнойОбработке" Тогда                                  		
		ОбновитьИнформациюОбИнтеграционнойОбработке();	
		
	ИначеЕсли СтатусЗапускаОсновнойОбработки = "ОшибкиФоновойИнициализации" Тогда                                  		
		ОшибкиФоновойИнициализации = Истина;
		ОбновитьВидимостьЭлементов(Ложь,Ложь,Истина);                                      		
		ТекстСостояния = "При получении данных для инициализации в фоне произошли ошибки. Перезапустите обработку!";				
		СтруктураЗначения = Новый Структура("Текст, Цвет", ТекстСостояния, УстановитьЦветСтатуса(1));
		СтруктураОшибокСостояний.Очистить();
		СтруктураОшибокСостояний.Вставить(ОперацияПоСменеСтатуса, СтруктураЗначения);

	ИначеЕсли СтатусЗапускаОсновнойОбработки="БезОшибок" Тогда
		// Удаление строк с операциями, по которым ошибок больше нет
		Если СтруктураОшибокСостояний.Свойство(ОперацияПоСменеСтатуса) Тогда
			СтруктураОшибокСостояний.Удалить(ОперацияПоСменеСтатуса);
		КонецЕсли;
		// Если подключение к базе MS прошло успешно, значит, обработка запущена
		Если ОперацияПоСменеСтатуса = "ПодключениеКБазеSMARTS"
			И СтруктураОшибокСостояний.Свойство("ЗапускОсновнойОбработки") Тогда
			СтруктураОшибокСостояний.Удалить("ЗапускОсновнойОбработки");
		КонецЕсли;
	КонецЕсли;	
	
	ВысотаЭлементаСостояния = 0;
	Если Не ЗначениеЗаполнено(СтруктураОшибокСостояний) Тогда		
		// Если ошибок не осталось, выводится одна-единственная надпись по отсутствию ошибок
		ТекстСостояния = "Можно работать! Всё загружено без ошибок!";
		ТекстСостоянияОбработки = Новый ФорматированнаяСтрока(ТекстСостояния,,УстановитьЦветСтатуса());				
		ВысотаЭлементаСостояния = 3;
	Иначе
		МассивСтрокСостояний = Новый Массив;
		НовыйТекстСостояния = "";		
		Для Каждого ЭлементСтруктуры Из СтруктураОшибокСостояний Цикл
			СтруктураНадписи = ЭлементСтруктуры.Значение;
			НовыйТекстСостояния = Новый ФорматированнаяСтрока(СтруктураНадписи.Текст,, СтруктураНадписи.Цвет);
			Если МассивСтрокСостояний.Количество() Тогда
				МассивСтрокСостояний.Добавить(Символы.ПС);
			КонецЕсли;
			МассивСтрокСостояний.Добавить(НовыйТекстСостояния);
			// Т.к. скролл и растягивание по наполнению у форматированной строки добавить нельзя,
			// будем "играться" с высотой поля, отталкиваясь от количества символов в передаваемых строках
			СимволовВСтроке 	= 60; // Мин. ширина поля
			СтрокТекста 			= Окр(СтрДлина(СтруктураНадписи.Текст) / СимволовВСтроке, 0);
			ВысотаЭлементаСостояния = ВысотаЭлементаСостояния + СтрокТекста;
		КонецЦикла;
		ТекстСостоянияОбработки = Новый ФорматированнаяСтрока(МассивСтрокСостояний);
	КонецЕсли;
	Элементы.Состояние.Высота = ВысотаЭлементаСостояния;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьЭлементов(ОсновныеКнопкиДоступны = Истина, ДопКнопкаВыбораБазы = Ложь, ОграниченнаяИнформация = Ложь)
	
	// Группа кнопок для переинициализации настроек
	Элементы.ГруппаОсновнаяЛево.Видимость = ОсновныеКнопкиДоступны;
	Элементы.ГруппаПерезапускОбработки.Видимость = Не ОсновныеКнопкиДоступны;
	Элементы.ВыбратьБазу.Видимость = ДопКнопкаВыбораБазы;
	
	// Группа информационных полей
	Элементы.ИнформацияТекущаяБаза.Видимость 	= Не ОграниченнаяИнформация;
	Элементы.ВерсияИнтеграции.Видимость 		= Не ОграниченнаяИнформация;
	Элементы.ПутьКОбработке.Видимость 			= Не ОграниченнаяИнформация;
	Элементы.КонфигурацияИнтеграции.Видимость 	= Не ОграниченнаяИнформация;
	Элементы.ПоддерживаемыеВерсии.Видимость 	= Не ОграниченнаяИнформация;
	
КонецПроцедуры

&НаКлиенте
Функция УстановитьЦветСтатуса(Уровень = 4)
	
	ЦветСостояния = WebЦвета.Зеленый;

	Если Уровень = 1 Тогда
		ЦветСостояния = WebЦвета.Красный;	
	ИначеЕсли Уровень = 2 Тогда
		ЦветСостояния = WebЦвета.Томатный;	
	ИначеЕсли Уровень = 3 Тогда
		ЦветСостояния = WebЦвета.Золотой;	
	ИначеЕсли Уровень = 4 Тогда		
		ЦветСостояния = WebЦвета.Зеленый;	
	КонецЕсли;
		
	Возврат ЦветСостояния;
	
КонецФункции

&НаКлиенте
Процедура ДействияПриОткрытииФормыЗавершение(Результат = Неопределено, ДополнительныеПараметры) Экспорт

	СерверДоступен 								= ДополнительныеПараметры.СерверДоступен;
	РезультатПодключенияИнтеграционнойОбработки = ДополнительныеПараметры.РезультатПодключенияИнтеграционнойОбработки;
	СтрокаБазы									= ДополнительныеПараметры.СтрокаБазы;
	НачалоСобытия 								= ДополнительныеПараметры.НачалоСобытия;
	ПараметрыПодключенияMS 						= ДополнительныеПараметры.ПараметрыПодключенияMS;
	ИзменитьТекущиеНастройкиMS 					= ДополнительныеПараметры.ИзменитьТекущиеНастройкиMS;
	
	Если ИзменитьТекущиеНастройкиMS Тогда
		_ЛокКонтекст.ЛокЯдро_ИзменитьТекущиеНастройкиMS(_ЛокКонтекст.ТекущиеНастройкиMS);
	КонецЕсли;
	
	Если СерверДоступен = Истина Тогда
		_ЛокКонтекст.ЛокЯдро_ОбновитьКомпонентыИзПодключеннойБазы(Ложь,, СтруктураПараметровЗапуска);
		
		Попытка
			_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ПолучитьИнформациюОПодключенныхРасширениях", "Информация", "Начало", НачалоСобытия);
			ПодключенныеРасширения 	= _ЛокКонтекст.ЛокЯдро_ПолучитьИнформациюОПодключенныхРасширениях();
			_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ПолучитьИнформациюОПодключенныхРасширениях", "Информация", "Конец", НачалоСобытия);
		Исключение
			ВызватьИсключение("Основная обработка была актуализирована. Требуется перезапустить новую версию из справочника.");
		КонецПопытки;
		
		_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ПроверитьДоступностьОнлайнРежима", "Информация", "Начало", НачалоСобытия);
		// Проверка доступности онлайн режима
		ДоступностьОнлайнРежима = _ЛокКонтекст.ЛокЯдро_ПроверитьДоступностьОнлайнРежима(ПараметрыПодключенияMS, РасположениеКомпоненты);
		_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ПроверитьДоступностьОнлайнРежима", "Информация", "Конец", НачалоСобытия);
		
		// Если при проверке доступности онлайн режима были ошибки, то выполнение дальнейшего кода может перезатереть их
		Если ДоступностьОнлайнРежима Тогда
			_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ОбновитьИнформациюОбИнтеграционнойОбработке", "Информация", "Начало", НачалоСобытия);
			ОбновитьИнформациюОбИнтеграционнойОбработке();
			_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ОбновитьИнформациюОбИнтеграционнойОбработке", "Информация", "Конец", НачалоСобытия);
		КонецЕсли;
		
	КонецЕсли;
	
	КнопкаПоказатьСкрытьНастройкиПометка = Истина;
	#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
		Элементы.КнопкаПоказатьСкрытьНастройки.Пометка = Истина;
		// Во фреш не проверяются подключенные расширения
		Элементы.ПодключенныеРасширения.Видимость = Не ЭтоФреш;
	#КонецЕсли
	ПоказатьСкрытьНастройки(Неопределено);
	УстановитьЗаголовокФормы();
	УстановитьСсылкуНаБазуЗнаний();
	
	_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("УстановитьQRCode", "Информация", "Начало", НачалоСобытия);
	Если _ЛокКонтекст.ПараметрыПодключенияMS <> Неопределено И _ЛокКонтекст.ПараметрыПодключенияMS.Свойство("QR") И _ЛокКонтекст.ПараметрыПодключенияMS.Свойство("ТипУстановленногоПродукта") Тогда
		УстановитьQRCode(_ЛокКонтекст.ПараметрыПодключенияMS.QR, _ЛокКонтекст.ПараметрыПодключенияMS.ТипУстановленногоПродукта);
	Иначе
		УстановитьQRCode();
	КонецЕсли;
	_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("УстановитьQRCode", "Информация", "Конец", НачалоСобытия);
	
	РегламентныеЗаданияВыполнены = Ложь;
	
	Если ПараметрЗапуска = "ВыполнитьРегламентныеЗадания" Тогда		
		ПрекратитьРаботуСистемы(); // в отличие от ЗавершитьРаботуСистемы, данный метод сразу завершает работу, а не ждет пока обработчик "ПриОткрытии" выполнится до конца
	КонецЕсли;
	
	//Если _ЛокКонтекст.ПраваПользователя <> Неопределено Тогда
	//	Элементы.КнопкаПоказатьСкрытьНастройки.Видимость = _ЛокКонтекст.ПраваПользователя.РольПользователя = "Администратор";	
	//	Элементы.ПутьКОбработке.КнопкаВыбора = _ЛокКонтекст.ПраваПользователя.РольПользователя = "Администратор";
	//КонецЕсли;	
	
	ТипОбработки = ?(ТипЗнч(СтрокаБазы) = Тип("Структура") И СтрокаБазы.Свойство("ТипОбработки"), СтрокаБазы.ТипОбработки, "");	
	
	//Данный код выполняется после инициализации, т.к. необходима установленная связь с базой MS, чтобы изменить настройки базы MS
	Если РезультатПодключенияИнтеграционнойОбработки = Ложь Тогда 
		
		Если ТипОбработки = "СправочникСсылка" Тогда
			
			// Если интеграционная обработка не подключена, а тип обработки = "СправочникСсылка", то пытаемся заменить обработку на файловый вариант
			ТипОбработки = "ФайлНаДиске";
			
			// Сразу пытаемся поменять тип обработки и проверяем, удалось ли это сделать
			_ЛокКонтекст.ЛокЯдро_СохранитьНастройкуВБазеSMARTS("ТипОбработки", ТипОбработки);		
			Если _ЛокКонтекст.ЛокЯдро_ПолучитьНастройкуНаСервереSMARTS("ТипОбработки") = ТипОбработки Тогда
			    // Имя и путь интеграционной обработки по умолчанию
				ИмяИнтеграционнойОбработки 		= _ЛокКонтекст.ЛокЯдро_ПолучитьНастройкуПоУмолчаниюНаСервереSMARTS("ИмяИнтеграционнойОбработкиКонфигурации1С");
				ПутьИнтеграционнойОбработки 	= _ЛокКонтекст.ЛокЯдро_ПолучитьНастройкуПоУмолчаниюНаСервереSMARTS("ПутьИнтеграционнойОбработкиКонфигурации1С");
				
				СтрокаБазы.ИмяИнтеграционнойОбработки = ИмяИнтеграционнойОбработки;
				СтрокаБазы.ПутьИнтеграционнойОбработки = ПутьИнтеграционнойОбработки;
				СтрокаБазы.Вставить("ТипОбработки", ТипОбработки);
				
				// Замена настроек в хранилище 1с
				_ЛокКонтекст.ЛокЯдро_СохранитьДанныеВХранилище1С("Cleverence_ПараметрыПодключенияMS", СтрокаБазы);
				_ЛокКонтекст.КомЯдро_СохранитьЗначениеПеременной("ПараметрыПодключенияMS", СтрокаБазы);
				
				// Замена настроек в базе MS
				_ЛокКонтекст.ЛокЯдро_СохранитьНастройкуВБазеSMARTS("ИмяИнтеграционнойОбработкиКонфигурации1С", ИмяИнтеграционнойОбработки);
				_ЛокКонтекст.ЛокЯдро_СохранитьНастройкуВБазеSMARTS("ПутьИнтеграционнойОбработкиКонфигурации1С", ПутьИнтеграционнойОбработки);
				_ЛокКонтекст.ЛокЯдро_СохранитьНастройкуВБазеSMARTS("ТипОбработки", ТипОбработки);
				
				// Удаление настройки версии интеграционной обработки, т.к. версия хранится только для тип обработки = "СправочникСсылка"
				_ЛокКонтекст.ЛокЯдро_УдалитьНастройкуВБазеSMARTS("ВерсияОбработки_ИнтеграционнаяОбработка");
				
				Сообщить("Тип интеграционной обработки заменен на: ""Файл на диске""");
				
				// Перезапуск основной обработки, т.к. заменили интеграционную обработку
				ПриОткрытии(Ложь);
			КонецЕсли;
			
		ИначеЕсли ТипОбработки <> "Встроенная" Тогда
			
			// Если интеграционная обработка не подключена, и тип обработки <> "Встроенная", то пытаемся заменить обработку на встроенную в конфигурацию ИО
			// Данный функционал в первую очеред необходим для работы во fresh, т.к. там нет доступа к файлу, а ИО встроена в расширение

			// Имя и путь интеграционной обработки по умолчанию
			ИмяИнтеграционнойОбработки 		= _ЛокКонтекст.ЛокЯдро_ПолучитьНастройкуПоУмолчаниюНаСервереSMARTS("ИмяИнтеграционнойОбработкиКонфигурации1С");
			Если Найти(ИмяИнтеграционнойОбработки, ".epf") > 0 Тогда
				ИмяИнтеграционнойОбработки = СтрЗаменить(ИмяИнтеграционнойОбработки, ".epf", "");
			КонецЕсли;
			
			Если _ЛокКонтекст.ЛокЯдро_ПроверитьОбъектМетаданныхСуществует("Обработка." + ИмяИнтеграционнойОбработки) Тогда
				
				// Пытаемся подключить встроенную ИО
				ТипОбработки = "Встроенная";		
				
				ТестовыеПараметрыПодключенияMS = _ЛокКонтекст.ЛокЯдро_СкопироватьСтруктуру(ПараметрыПодключенияMS);
				ТестовыеПараметрыПодключенияMS.Вставить("ТипОбработки", ТипОбработки);
				ТестовыеПараметрыПодключенияMS.Вставить("ИмяИнтеграционнойОбработки", ИмяИнтеграционнойОбработки);
				ТестовыеПараметрыПодключенияMS.Вставить("ПутьИнтеграционнойОбработки", ИмяИнтеграционнойОбработки);
				
				РезультатПодключенияИнтеграционнойОбработки = _ЛокКонтекст.ЛокЯдро_ПодключитьИнтеграционнуюОбработку(РасположениеКомпоненты, ТестовыеПараметрыПодключенияMS);

				Если РезультатПодключенияИнтеграционнойОбработки Тогда
					// Сразу пытаемся поменять тип обработки и проверяем, удалось ли это сделать
					_ЛокКонтекст.ЛокЯдро_СохранитьНастройкуВБазеSMARTS("ТипОбработки", ТипОбработки);
					Если _ЛокКонтекст.ЛокЯдро_ПолучитьНастройкуНаСервереSMARTS("ТипОбработки") = ТипОбработки Тогда
						// Сохранение настроек
						СтрокаБазы.ИмяИнтеграционнойОбработки 	= ИмяИнтеграционнойОбработки;
						СтрокаБазы.ПутьИнтеграционнойОбработки 	= ИмяИнтеграционнойОбработки;
						СтрокаБазы.Вставить("ТипОбработки", ТипОбработки);
						
						// Замена настроек в хранилище 1с
						_ЛокКонтекст.ЛокЯдро_СохранитьДанныеВХранилище1С("Cleverence_ПараметрыПодключенияMS", СтрокаБазы);
						_ЛокКонтекст.КомЯдро_СохранитьЗначениеПеременной("ПараметрыПодключенияMS", СтрокаБазы);
						
						// Замена настроек в базе MS
						_ЛокКонтекст.ЛокЯдро_СохранитьНастройкуВБазеSMARTS("ИмяИнтеграционнойОбработкиКонфигурации1С", ИмяИнтеграционнойОбработки);
						_ЛокКонтекст.ЛокЯдро_СохранитьНастройкуВБазеSMARTS("ПутьИнтеграционнойОбработкиКонфигурации1С", ИмяИнтеграционнойОбработки);
						
						// Удаление настройки версии интеграционной обработки, т.к. версия хранится только для тип обработки = "СправочникСсылка"
						_ЛокКонтекст.ЛокЯдро_УдалитьНастройкуВБазеSMARTS("ВерсияОбработки_ИнтеграционнаяОбработка");
						
						Сообщить("Тип интеграционной обработки заменен на: ""Встроенная""");
						
						// Перезапуск основной обработки, т.к. заменили интеграционную обработку
						ПриОткрытии(Ложь);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Обновление метаданных документов 1С
	Если ДоступноВыполнениеВФоне Тогда
		_ЛокКонтекст.ЛокЯдро_ОбновитьМетаданныеДокументов1СВФоне();
	КонецЕсли;
	
	// Данный код должен выполняться в последнюю очередь
	Если ВыполнениеВнешнейКоманды = Истина Тогда
		
		ИдентификаторКоманды 	= ИдентификаторВнешнейКоманды;
		ОбъектыНазначения 		= ОбъектыНазначенияВнешнейКоманды;
		
		ОП = Новый ОписаниеОповещения("ВыполнитьКомандуПослеПроверкиПодключения", ЭтаФорма, 
			Новый Структура("ИдентификаторКоманды, ОбъектыНазначения", ИдентификаторКоманды, ОбъектыНазначения));
			
		_ЛокКонтекст.ЛокЯдро_ПроверитьСоединениеССерверомSMARTS(,, ?(ЕстьЧастнаяБаза,"Частная","Основная"),,,, ОП);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОписанияОповещений

// Выполняется после закрытия формы настройки подключения
//
// Параметры:
//	РезультатЗакрытия - Произвольный	
//	ДопПараметры - Произвольный
&НаКлиенте
Процедура ФормаСлужебная_НастройкиПодключенияПриЗакрытии(РезультатЗакрытия,ДопПараметры) Экспорт

КонецПроцедуры

// Вызывается после попытки подключения к серверу Mobile Smarts с пользовательской настройкой
//
// Параметры: 
//	СерверДоступен - Булево - флаг доступности сервера Mobile Smarts
//	ДопПараметры - Структура - содержит:
//		* флПроверяетсяПользовательскаяНастройка - Булево		
//		* ОбщаяНастройкаПараметровПодключения - Структура - содержит параметры подключения к серверу Mobile Smarts
&НаКлиенте
Процедура ДействияПередОткрытиемФормыПослеПодключения(СерверДоступен,ДопПараметры) Экспорт
	
	НачалоСобытия = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если СерверДоступен <> Истина // Если не удалось подключиться с пользовательской настройкой, попробуем с общей
		И ДопПараметры.флПроверяетсяПользовательскаяНастройка Тогда
		ПараметрыПодключенияMS = ДопПараметры.ОбщаяНастройкаПараметровПодключения;
		
		ОП = Новый ОписаниеОповещения("ДействияПередОткрытиемФормыПослеПроверкиПодключения",ЭтаФорма,ДопПараметры);
		
		_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ПроверитьСоединениеССерверомSMARTS", "Информация", "Начало", НачалоСобытия);
		_ЛокКонтекст.ЛокЯдро_ПроверитьСоединениеССерверомSMARTS(ПараметрыПодключенияMS,Ложь,,РасположениеКомпоненты,,,ОП);
		_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ПроверитьСоединениеССерверомSMARTS", "Информация", "Конец", НачалоСобытия);
		
	Иначе		
		ДействияПередОткрытиемФормыПослеПроверкиПодключения(СерверДоступен,ДопПараметры);	
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после попытки подключения к серверу Mobile Smarts с общей настройкой либо после успешного подключения с пользовательской настройкой
//
// Параметры: 
//	СерверДоступен - Булево - флаг доступности сервера Mobile Smarts
//	ДопПараметры - Структура - содержит:
//		* флПроверяетсяПользовательскаяНастройка - Булево		
//		* ОбщаяНастройкаПараметровПодключения - Структура - содержит параметры подключения к серверу Mobile Smarts
&НаКлиенте
Процедура ДействияПередОткрытиемФормыПослеПроверкиПодключения(СерверДоступен,ДопПараметры) Экспорт
	
	НачалоСобытия = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	РезультатПодключенияИнтеграционнойОбработки = Неопределено;
	
	_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ПолучитьОписаниеБазыSMARTS", "Информация", "Начало", НачалоСобытия);
	СтрокаБазы = _ЛокКонтекст.ЛокЯдро_ПолучитьОписаниеБазыSMARTS(РасположениеКомпоненты);
	_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ПолучитьОписаниеБазыSMARTS", "Информация", "Конец", НачалоСобытия);
	
	ПараметрыПодключенияMS = _ЛокКонтекст.КомЯдро_ПолучитьЗначениеПеременной("ПараметрыПодключенияMS");

	Если СтрокаБазы = Неопределено Тогда
		Если ТипЗнч(ПараметрыПодключенияMS) = Тип("Структура") И ПараметрыПодключенияMS.Свойство("СтрокаПодключения") Тогда
			Сообщить("База по строке подключения [" + ПараметрыПодключенияMS.СтрокаПодключения + "] не найдена!");
		Иначе
			// Сообщить("Ошибка подключения к базе");
		КонецЕсли;
	КонецЕсли;
	
	// Восстановление сохраненных параметров авторизации
	Если ТипЗнч(ПараметрыПодключенияMS) = Тип("Структура") Тогда
		Если СтрокаБазы <> Неопределено Тогда
			АвторизацияВключена = Ложь;
			Если ПараметрыПодключенияMS.Свойство("АвторизацияВключена", АвторизацияВключена) И АвторизацияВключена = Истина Тогда
				СтрокаБазы.Вставить("АвторизацияВключена", Истина);
				СтрокаБазы.Вставить("АвторизацияЛогин", ?(ПараметрыПодключенияMS.Свойство("АвторизацияЛогин"), ПараметрыПодключенияMS.АвторизацияЛогин, ""));
			    СтрокаБазы.Вставить("АвторизацияТокен", ?(ПараметрыПодключенияMS.Свойство("АвторизацияТокен"), ПараметрыПодключенияMS.АвторизацияТокен, ""));
				СтрокаБазы.Вставить("АвторизацияРефрешТокен", ?(ПараметрыПодключенияMS.Свойство("АвторизацияРефрешТокен"), ПараметрыПодключенияMS.АвторизацияРефрешТокен, ""));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если _ЛокКонтекст.ЛокЯдро_ПроверитьСозданиеКОМОбъекта(РасположениеКомпоненты)=Истина Тогда
		Если СтрокаБазы <> Неопределено Тогда
			ТекущаяБазаСуществует = Истина;
			ID_ТекущейБазы = СтрокаБазы.IdBaseSMARTS;
			ИмяТекущейБазы = СтрокаБазы.Имя + ?(СтрокаБазы.Свойство("ВерсияПриложения") И ЗначениеЗаполнено(СтрокаБазы.ВерсияПриложения), ", версия: " + СтрокаБазы.ВерсияПриложения, "");
			СтрокаПодключенияСМАРТС = СтрокаБазы.СтрокаПодключенияСМАРТС;
			ИмяПриложения = ?(СтрокаБазы.Свойство("ИмяПриложения") <> Неопределено, СтрокаБазы.ИмяПриложения, "");
			Если СерверДоступен = Истина Тогда
				СтруктураСменыСтатуса = Новый Структура("Статус, Параметр, Операция", 
					"БезОшибок", 
					"", 
					"ЗапускОсновнойОбработки");
				Оповестить("СменаСтатуса", СтруктураСменыСтатуса);
				
				СтруктураСменыСтатуса = Новый Структура("Статус, Параметр, Операция", 
					"НачалоПодключенияИнтеграционнойОбработкиСообщениеБезопасности", 
					"", 
					"ПодключениеИО");
				Оповестить("СменаСтатуса", СтруктураСменыСтатуса);
			КонецЕсли;
			
			// Данные Cleverence_ПараметрыПодключенияMS еще не обновлены, параметры интеграционной обработки в них могли измениться
			// Поэтому передаем параметры интеграционной обработки в явном виде
			ПараметрыОбработки = Новый Структура;
			ПараметрыОбработки.Вставить("ТипОбработки", 			   ?(НЕ СтрокаБазы.Свойство("ТипОбработки") ИЛИ НЕ ЗначениеЗаполнено(СтрокаБазы.ТипОбработки), "ФайлНаДиске", СтрокаБазы.ТипОбработки));
			ПараметрыОбработки.Вставить("ИмяИнтеграционнойОбработки",  СтрокаБазы.ИмяИнтеграционнойОбработки);
			ПараметрыОбработки.Вставить("ПутьИнтеграционнойОбработки", СтрокаБазы.ПутьИнтеграционнойОбработки);
			
			_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ПодключитьИнтеграционнуюОбработку", "Информация", "Начало", НачалоСобытия);
			РезультатПодключенияИнтеграционнойОбработки = _ЛокКонтекст.ЛокЯдро_ПодключитьИнтеграционнуюОбработку(РасположениеКомпоненты, ПараметрыОбработки);
			_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ПодключитьИнтеграционнуюОбработку", "Информация", "Конец", НачалоСобытия);
			
			// Если всё в порядке, пересохраним настройки, потому что могли изменится Версия конфигурации, Имя базы и т.д.
			Если РезультатПодключенияИнтеграционнойОбработки = Истина Тогда
				_ЛокКонтекст.ЛокЯдро_СохранитьДанныеВХранилище1С("Cleverence_ПараметрыПодключенияMS", СтрокаБазы);				
				_ЛокКонтекст.КомЯдро_СохранитьЗначениеПеременной("ПараметрыПодключенияMS", СтрокаБазы);
			КонецЕсли;	
		КонецЕсли;
	Иначе
		Если Не ЭтоФреш Тогда // Во фреше не доступен COM, поэтому не выводим сообщение
			Если СтрокаБазы <> Неопределено Тогда
				Сообщить("Ошибка создания COM объекта для работы с обработкой!");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДействияПриОткрытииФормы(СерверДоступен, РезультатПодключенияИнтеграционнойОбработки, СтрокаБазы);
		
КонецПроцедуры

// Выполняется при открытии формы в случае успешного подключения к базе Mobile Smarts
//
// Параметры:
//	СерверДоступен - Булево - флаг доступности сервера Mobile Smarts	
//  ДопПараметры - Структура - содержит:
//		* ПараметрыПодключенияMS - Структура - содержит параметры подключения к серверу Mobile Smarts
//		* ТекущаяБаза - Структура - содержит описание базы Mobile Smarts
&НаКлиенте
Процедура ДействияПередОткрытиемФормыПервыйЗапуск(СерверДоступен,ДопПараметры) Экспорт
	
	Если СерверДоступен = Истина Тогда
		_ЛокКонтекст.ЛокЯдро_Инициализация();
		
		НачалоСобытия = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		ПараметрыПервогоЗапуска = ПолучитьДанныеДляПервогоЗапуска();
		ПараметрыПервогоЗапуска.Вставить("Ид", ДопПараметры.ТекущаяБаза.Ид);
		ПараметрыПервогоЗапуска.Вставить("ИдПриложения", ДопПараметры.ТекущаяБаза.ИдПриложения);
		ПараметрыПервогоЗапуска.Вставить("УровеньПриложения", ДопПараметры.ТекущаяБаза.УровеньПриложения);
		ПараметрыПервогоЗапуска.Вставить("ИдОсновногоПриложения", ДопПараметры.ТекущаяБаза.ИдОсновногоПриложения);
		
		_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ОбновитьКомпонентыИзПодключеннойБазы", "Информация", "Начало, Без ОО", НачалоСобытия);
		_ЛокКонтекст.ЛокЯдро_ОбновитьКомпонентыИзПодключеннойБазы(Истина, Ложь);
		_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ОбновитьКомпонентыИзПодключеннойБазы", "Информация", "Конец, Без ОО", НачалоСобытия);
		_ЛокКонтекст.ЛокЯдро_СохранитьНастройкиВБазеSMARTS(ПараметрыПервогоЗапуска);				
		
		_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ВыгрузитьБизнесПроцессы", "Информация", "Начало", НачалоСобытия);
		ВыгрузитьБизнесПроцессы();
		_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ВыгрузитьБизнесПроцессы", "Информация", "Конец", НачалоСобытия);
		
		СтруктураСменыСтатуса = Новый Структура("Статус, Параметр, Операция", 
			"НачалоПодключенияИнтеграционнойОбработкиСообщениеБезопасности", 
			"", 
			"ПодключениеИО");
		Оповестить("СменаСтатуса", СтруктураСменыСтатуса);
		
		_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ПодключитьИнтеграционнуюОбработку", "Информация", "Начало", НачалоСобытия);
		РезультатПодключенияИнтеграционнойОбработки = _ЛокКонтекст.ЛокЯдро_ПодключитьИнтеграционнуюОбработку(РасположениеКомпоненты);
		_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ПодключитьИнтеграционнуюОбработку", "Информация", "Конец", НачалоСобытия);
		
		Если РезультатПодключенияИнтеграционнойОбработки = Истина Тогда
			СписокИспользуемыхСправочников = _ЛокКонтекст.ЛокЯдро_ПолучитьСписокИспользуемыхСправочников();
			Если СписокИспользуемыхСправочников <> Неопределено
				И СписокИспользуемыхСправочников.НайтиПоЗначению("Ячейки") <> Неопределено Тогда									
				
				_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ВыгрузитьТаблицуНаСерверSMARTS", "Информация", "Начало", НачалоСобытия);
				ПараметрыВыгрузки = _ЛокКонтекст.ЛокЯдро_ПолучитьЗаполнитьСтруктуруПараметровВыгрузкиСправочника("Ячейки");
				_ЛокКонтекст.ЛокЯдро_ВыгрузитьТаблицуНаСерверSMARTS("Ячейки",,,ПараметрыВыгрузки);				
				_ЛокКонтекст.ЛокЯдро_ЗаписатьСобытиеВЖурналРегистрации("ЛокЯдро_ВыгрузитьТаблицуНаСерверSMARTS", "Информация", "Конец", НачалоСобытия);
				
			КонецЕсли; 					
		КонецЕсли; 					
		
		// После этой строки не должно быть методов, в которых происходит обращение к серверу
		_ЛокКонтекст.ЛокЯдро_ОбновитьКомпонентыИзПодключеннойБазы(Истина, Истина);
		
		ПрекратитьРаботуСистемы(); // в отличие от ЗавершитьРаботуСистемы, данный метод сразу завершает работу, а не ждет пока обработчик "ПриОткрытии" выполнится до конца
	КонецЕсли;

КонецПроцедуры

// Вызывает процедуру выгрузки справочников в базу Mobile Smarts после ответа на вопрос о выгрузке справочников
//
// Параметры:
//	РезультатВопроса - КодВозвратаДиалога - ответ на вопрос о выгрузке справочников
//  ДополнительныеПараметры - Произвольный
&НаКлиенте
Процедура ВопросВыгрузитьСправочникиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	_ЛокКонтекст.ЛокЯдро_ВыгрузитьТаблицыНаСерверSMARTS();	
КонецПроцедуры

// Выполняется после закрытия формы настройки параметров узла. Сохраняет отредактированные настройки.
//
// Параметры:
//	РезультатРедактирования	- Структура - содержит результат редактирования параметров узла
//	СтрокаНастройки - Строка - идентификатор редактируемого узла
&НаКлиенте
Процедура Настройки_УзелЗакрытие(РезультатРедактирования,СтрокаНастройки) Экспорт
	Если РезультатРедактирования <> Неопределено Тогда
		ТаблицаУзлов = _ЛокКонтекст.ЛокЯдро_ПолучитьИзКэшаНастройкуSMARTS("Узлы");
		Если ТипЗнч(ТаблицаУзлов) = Тип("Массив") Тогда
			Для каждого НастройкаУзла Из ТаблицаУзлов Цикл
				Если НастройкаУзла.Свойство("ID_Узла")
					И НастройкаУзла.ID_Узла = ID_ТекущегоУзла Тогда
					ЗаполнитьЗначенияСвойств(НастройкаУзла,РезультатРедактирования);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		_ЛокКонтекст.ЛокЯдро_СохранитьНастройкуВБазеSMARTS("Узлы", ТаблицаУзлов);
		_ЛокКонтекст.ЛокЯдро_ЗаписатьВКэшНастройкуSMARTS("Узлы", ТаблицаУзлов); 		
		УстановитьСписокВыбораУзлов();
		ID_ТекущегоУзла = _ЛокКонтекст.ДанныеТекущегоУзла.ID_Узла;
		_ЛокКонтекст.ЛокЯдро_УстановитьДанныеТекущегоУзла(ID_ТекущегоУзла);
		ОбработкаОповещения("УстановленыНастройкиПодключения","","");
	КонецЕсли;	
КонецПроцедуры

// Вызывается при выборе интеграционной обработки и сохраняет ее настройки.
// Вызывает метод получения из интеграционной обработки информации совместимости и версии интеграции.
//
// Параметры:
//	РезультатРедактирования - Структура - содержит:	
//		* ИмяИнтеграционнойОбработки - Строка		
//		* ПутьИнтеграционнойОбработки - Строка
//		* ТипОбработки - Строка
//	СтрокаНастройки - Строка	
&НаКлиенте
Процедура ФормаСлужебная_НастройкиИнтеграционнойОбработкиЗакрытие(РезультатРедактирования,СтрокаНастройки) Экспорт
	Если РезультатРедактирования <> Неопределено Тогда
		ПараметрыПодключенияMS = _ЛокКонтекст.КомЯдро_ПолучитьЗначениеПеременной("ПараметрыПодключенияMS");
	
		ПараметрыПодключенияMS.ИмяИнтеграционнойОбработки = РезультатРедактирования.ИмяИнтеграционнойОбработки;
		ПараметрыПодключенияMS.ПутьИнтеграционнойОбработки = РезультатРедактирования.ПутьИнтеграционнойОбработки;
		ПараметрыПодключенияMS.Вставить("ТипОбработки",РезультатРедактирования.ТипОбработки);
		_ЛокКонтекст.ЛокЯдро_СохранитьДанныеВХранилище1С("Cleverence_ПараметрыПодключенияMS", ПараметрыПодключенияMS);
		_ЛокКонтекст.ЛокЯдро_ЗаписатьВКэшНастройкуSMARTS("ПараметрыПодключенияMS", ПараметрыПодключенияMS);		
		_ЛокКонтекст.КомЯдро_СохранитьЗначениеПеременной("ПараметрыПодключенияMS", ПараметрыПодключенияMS);
		
		Если РезультатРедактирования.ТипОбработки = "СправочникСсылка" Тогда
			Путь = _ЛокКонтекст.ЛокЯдро_ЗначениеВСтрокуXML(РезультатРедактирования.ПутьИнтеграционнойОбработки);
		Иначе
			Путь = РезультатРедактирования.ПутьИнтеграционнойОбработки;
		КонецЕсли;
		
		_ЛокКонтекст.ЛокЯдро_СохранитьНастройкуВБазеSMARTS("ИмяИнтеграционнойОбработкиКонфигурации1С", РезультатРедактирования.ИмяИнтеграционнойОбработки);
		_ЛокКонтекст.ЛокЯдро_СохранитьНастройкуВБазеSMARTS("ПутьИнтеграционнойОбработкиКонфигурации1С", Путь);
		_ЛокКонтекст.ЛокЯдро_СохранитьНастройкуВБазеSMARTS("ТипОбработки", РезультатРедактирования.ТипОбработки);
	Иначе
		_ЛокКонтекст.ЛокЯдро_ПодключитьИнтеграционнуюОбработку("НаКлиенте");	
	КонецЕсли;		
	ОбновитьИнформациюОбИнтеграционнойОбработке();
КонецПроцедуры

// Открывает форму обмена документами после проверки соединения с сервером Mobile Smarts
//
// Параметры:	
//	СерверДоступен - Булево - флаг доступности сервера Mobile Smarts
//  ДопПараметры - Произвольный
&НаКлиенте
Процедура ОткрытьОбменДокументамиПослеПодключения(СерверДоступен, ДопПараметры) Экспорт
	
	Если НЕ СерверДоступен = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ВопросПоИнформированиюПользователяОКнопкаРасширения", ЭтаФорма);
	
	Если НапомнитьПроКнопочноеРасширение() И ПодключеноРасширениеКнопокВыгрузкиЗагрузкиSMARTS() Тогда
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.ОК);
		СписокКнопок.Добавить(КодВозвратаДиалога.Пропустить, "Больше не показывать");	
		
		МассивПодстрок = Новый Массив;
		МассивПодстрок.Добавить(_ЛокКонтекст.ПолучитьФорматированнуюСтрокуПоНомеруОшибки("#1CEDHT006"));
		МассивПодстрок.Добавить(". Вы можете выгружать и загружать документы через кнопки ""Выгрузить в Mobile SMARTS""" +
			" и ""Загрузить из Mobile SMARTS"" в самих документах и в списках документов. ");
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока("Подробнее о работе кнопок",,,, "https://www.cleverence.ru/support/113667"));
		МассивПодстрок.Добавить(".");
		
		ТекстВопроса = Новый ФорматированнаяСтрока(МассивПодстрок);
		ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок,,, "Информация");
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПоИнформированиюПользователяОКнопкаРасширения(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Пропустить Тогда 
		_ЛокКонтекст.ЛокЯдро_ЗаписатьПользовательскуюНастройку("НапоминаниеПроКнопочноеРасширение", Ложь);		
	КонецЕсли;  
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ФормаОбменДокументами = ПолучитьФорму("ОФ_ОбменДокументами", ЭтаФорма);
	#Иначе
		ФормаОбменДокументами = ПолучитьФорму(_ЛокКонтекст.ПолноеИмяОбъекта + ".Форма.ОбменДокументами", , ЭтаФорма);	
	#КонецЕсли
		
	ФормаОбменДокументами.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаОбменДокументами._ЛокКонтекст = _ЛокКонтекст;
	ФормаОбменДокументами.ID_Узла = ID_ТекущегоУзла;
	ФормаОбменДокументами.ТипБазы = ?(ЕстьЧастнаяБаза,"Частная","Основная");
	НастройкиУзла = Неопределено;
	Если ID_ТекущегоУзла <> "" Тогда
		НастройкиУзла = _ЛокКонтекст.НайтиСтруктуруВМассивеПоЭлементу(_ЛокКонтекст.ТекущиеНастройкиMS.Узлы,"ID_Узла",ID_ТекущегоУзла);//_ЛокКонтекст.ТекущиеНастройкиMS.Узлы["Узел_"+ID_ТекущегоУзла];
	КонецЕсли;
	ФормаОбменДокументами.ID_БазыMS = ?(НастройкиУзла <> Неопределено и НастройкиУзла.ИспользоватьЧастнуюБазу,НастройкиУзла.ЧастнаяБазаMS,ID_ТекущейБазы);
	ФормаОбменДокументами.НаименованиеУзла = _ЛокКонтекст.ДанныеТекущегоУзла.Наименование;
	ФормаОбменДокументами.Открыть();
	
КонецПроцедуры

&НаКлиенте
Функция ПодключеноРасширениеКнопокВыгрузкиЗагрузкиSMARTS()
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Возврат Ложь;
	#КонецЕсли
	
	Возврат Найти(ПодключенныеРасширения, "CleverenceButtonsExtension") > 0;
	
КонецФункции

&НаКлиенте
Функция НапомнитьПроКнопочноеРасширение()
	
	Возврат _ЛокКонтекст.ЛокЯдро_ЗначениеПользовательскойНастройки("НапоминаниеПроКнопочноеРасширение");
		
КонецФункции

// Открывает форму редактирования настроек обмена справочников после проверки соединения с сервером Mobile Smarts
//
// Параметры:
//	СерверДоступен - Булево - флаг доступности сервера Mobile Smarts
//	ДопПараметры - Произвольный
&НаКлиенте
Процедура ОткрытьНастройкиДляОбменаСправочниковНажатиеПослеПодключения(СерверДоступен,ДопПараметры) Экспорт	
	
	Если НЕ СерверДоступен = Истина Тогда
		Возврат;
	КонецЕсли;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ФормаСписка_ОтборыСправочников = ПолучитьФорму("ОФ_ФормаСписка_ОтборыСправочников", ЭтаФорма);
	#Иначе
		ФормаСписка_ОтборыСправочников = ПолучитьФорму(_ЛокКонтекст.ПолноеИмяОбъекта + ".Форма.ФормаСписка_ОтборыСправочников", , ЭтаФорма);	
	#КонецЕсли
	
	ФормаСписка_ОтборыСправочников.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаСписка_ОтборыСправочников._ЛокКонтекст = _ЛокКонтекст;
	НастройкиУзла = Неопределено;
	Если ID_ТекущегоУзла <> "" Тогда
		НастройкиУзла = _ЛокКонтекст.НайтиСтруктуруВМассивеПоЭлементу(_ЛокКонтекст.ТекущиеНастройкиMS.Узлы,"ID_Узла",ID_ТекущегоУзла);
	КонецЕсли;	
	ФормаСписка_ОтборыСправочников.ID_Узла = ID_ТекущегоУзла;
	ФормаСписка_ОтборыСправочников.НаименованиеУзла = _ЛокКонтекст.ДанныеТекущегоУзла.Наименование;
	ФормаСписка_ОтборыСправочников.Открыть();
	
КонецПроцедуры

// Устанавливает список выбора узлов после проверки соединения с сервером Mobile Smarts
//
// Параметры:
//	СерверДоступен - Булево - флаг доступности сервера Mobile Smarts
//	ДопПараметры - Произвольный
&НаКлиенте
Процедура ID_ТекущегоУзлаНачалоВыбораПослеПодключения(СерверДоступен,ДопПараметры) Экспорт	

	Если НЕ СерверДоступен = Истина Тогда
		Возврат;
	КонецЕсли;

	УстановитьСписокВыбораУзлов();

КонецПроцедуры

// Открывает форму редактирования настроек ручного обмена после проверки соединения с сервером Mobile Smarts
// 
// Параметры:
//	СерверДоступен - Булево - флаг доступности сервера Mobile Smarts
//	ДопПараметры - Произвольный
&НаКлиенте
Процедура РедактироватьНастройкиДляОбменаИнтерактивПослеПодключения(СерверДоступен,ДопПараметры) Экспорт
	
	Если НЕ СерверДоступен = Истина Тогда
		Возврат;
	КонецЕсли;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ФормаСписка_ОтборыДокументов = ПолучитьФорму("ОФ_ФормаСписка_ОтборыДокументов", ЭтаФорма);
	#Иначе
		ФормаСписка_ОтборыДокументов = ПолучитьФорму(_ЛокКонтекст.ПолноеИмяОбъекта + ".Форма.ФормаСписка_ОтборыДокументов", , ЭтаФорма);	
	#КонецЕсли
	
	ФормаСписка_ОтборыДокументов.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаСписка_ОтборыДокументов._ЛокКонтекст = _ЛокКонтекст;	
	ФормаСписка_ОтборыДокументов.ID_Узла = ID_ТекущегоУзла;
	ФормаСписка_ОтборыДокументов.НаименованиеУзла = _ЛокКонтекст.ДанныеТекущегоУзла.Наименование;
	ФормаСписка_ОтборыДокументов.ТипОбмена = "Интерактивный";
	ФормаСписка_ОтборыДокументов.ТипБазы = ?(ЕстьЧастнаяБаза,"Частная","Основная");
	ФормаСписка_ОтборыДокументов.Открыть();
	
КонецПроцедуры

// Открывает форму редактирования настроек онлайн-обмена после проверки соединения с сервером Mobile Smarts
//
// Параметры:
//	СерверДоступен - Булево - флаг доступности сервера Mobile Smarts
//	ДопПараметры - Произвольный
&НаКлиенте
Процедура РедактироватьНастройкиДляОбменаОнлайнПослеПодключения(СерверДоступен,ДопПараметры) Экспорт
	
	Если НЕ СерверДоступен = Истина Тогда
		Возврат;
	КонецЕсли;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ФормаСписка_ОтборыДокументов = ПолучитьФорму("ОФ_ФормаСписка_ОтборыДокументов", ЭтаФорма);
	#Иначе
		ФормаСписка_ОтборыДокументов = ПолучитьФорму(_ЛокКонтекст.ПолноеИмяОбъекта + ".Форма.ФормаСписка_ОтборыДокументов", , ЭтаФорма);	
	#КонецЕсли
	
	ФормаСписка_ОтборыДокументов.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаСписка_ОтборыДокументов._ЛокКонтекст = _ЛокКонтекст;	
	ФормаСписка_ОтборыДокументов.ID_Узла = ID_ТекущегоУзла;
	ФормаСписка_ОтборыДокументов.НаименованиеУзла = _ЛокКонтекст.ДанныеТекущегоУзла.Наименование;
	ФормаСписка_ОтборыДокументов.ТипОбмена = "Онлайн";
	ФормаСписка_ОтборыДокументов.ТипБазы = ?(ЕстьЧастнаяБаза,"Частная","Основная");
	ФормаСписка_ОтборыДокументов.Открыть();
	
КонецПроцедуры

// Открывает форму редактирования расширенных настроек после проверки соединения с сервером Mobile Smarts
//
// Параметры:
//  СерверДоступен - Булево - флаг доступности сервера Mobile Smarts
//	ДопПараметры - Произвольный
&НаКлиенте
Процедура РедактироватьРасширенныеНастройкиПослеПодключения(СерверДоступен,ДопПараметры) Экспорт
	
	Если НЕ СерверДоступен = Истина Тогда
		Возврат;
	КонецЕсли;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ФормаНастроек_РасширенныеНастройки = ПолучитьФорму("ОФ_ФормаНастроек_РасширенныеНастройки", ЭтаФорма);
	#Иначе
		ФормаНастроек_РасширенныеНастройки = ПолучитьФорму(_ЛокКонтекст.ПолноеИмяОбъекта + ".Форма.ФормаНастроек_РасширенныеНастройки", , ЭтаФорма);	
	#КонецЕсли
	
	ФормаНастроек_РасширенныеНастройки.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаНастроек_РасширенныеНастройки._ЛокКонтекст = _ЛокКонтекст;
	ФормаНастроек_РасширенныеНастройки.ID_ТекущейБазы = ID_ТекущейБазы;
	ФормаНастроек_РасширенныеНастройки.Открыть();
	
КонецПроцедуры

// Открывает форму редактирования настроек бизнес-процессов после проверки соединения с сервером Mobile Smarts
//
// Параметры:
//	СерверДоступен - Булево - флаг доступности сервера Mobile Smarts
//	ДопПараметры - Произвольный
&НаКлиенте
Процедура РедактироватьНастройкиБизнесПроцессовПослеПодключения(СерверДоступен,ДопПараметры) Экспорт
		
	Если НЕ СерверДоступен = Истина Тогда
		Возврат;
	КонецЕсли;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ФормаСпискаБизнесПроцессов = ПолучитьФорму("ОФ_ФормаСписка_БизнесПроцессы", ЭтаФорма);
	#Иначе
		ФормаСпискаБизнесПроцессов = ПолучитьФорму(_ЛокКонтекст.ПолноеИмяОбъекта + ".Форма.ФормаСписка_БизнесПроцессы", , ЭтаФорма);	
	#КонецЕсли
	
	ФормаСпискаБизнесПроцессов.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаСпискаБизнесПроцессов._ЛокКонтекст = _ЛокКонтекст;
	ФормаСпискаБизнесПроцессов.ID_Узла = ID_ТекущегоУзла;
	ФормаСпискаБизнесПроцессов.НаименованиеУзла = _ЛокКонтекст.ДанныеТекущегоУзла.Наименование;
	ФормаСпискаБизнесПроцессов.Открыть();
	
КонецПроцедуры

// Открывает форму списка узлов после проверки соединения с сервером Mobile Smarts
//
// Параметры: 
//	СерверДоступен - Булево - флаг доступности сервера Mobile Smarts
//	ДопПараметры - Произвольный
&НаКлиенте
Процедура РедактироватьНастройкиУзловПослеПодключения(СерверДоступен,ДопПараметры) Экспорт
	
	Если НЕ СерверДоступен = Истина Тогда
		Возврат;
	КонецЕсли;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ФормаСписка_Узлы = ПолучитьФорму("ОФ_ФормаСписка_Узлы", ЭтаФорма);
	#Иначе
		ФормаСписка_Узлы = ПолучитьФорму(_ЛокКонтекст.ПолноеИмяОбъекта + ".Форма.ФормаСписка_Узлы", , ЭтаФорма);	
	#КонецЕсли
	
	ФормаСписка_Узлы.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаСписка_Узлы._ЛокКонтекст = _ЛокКонтекст;
	ФормаСписка_Узлы.ID_ТекущейБазы = ID_ТекущейБазы;
	
	ОП = Новый ОписаниеОповещения("ФормаСписка_УзлыЗакрытие",ЭтаФорма);
	ФормаСписка_Узлы.ОписаниеОповещенияОЗакрытии = ОП;
	
	ФормаСписка_Узлы.Открыть();
	
КонецПроцедуры

// Открывает форму просмотра всех настроек Mobile Smarts
//
// Параметры: 
//	СерверДоступен - Булево - флаг доступности сервера Mobile Smarts
//	ДопПараметры - Произвольный
&НаКлиенте
Процедура ОтобразитьВсеНастройкиПослеПодключения(СерверДоступен,ДопПараметры) Экспорт
	
	Если НЕ СерверДоступен = Истина Тогда
		Возврат;
	КонецЕсли;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ФормаСлужебная_ПросмотрВсехНастроек = ПолучитьФорму("ОФ_ФормаСлужебная_ПросмотрВсехНастроек", ЭтаФорма);
	#Иначе
		ФормаСлужебная_ПросмотрВсехНастроек = ПолучитьФорму(_ЛокКонтекст.ПолноеИмяОбъекта + ".Форма.ФормаСлужебная_ПросмотрВсехНастроек", , ЭтаФорма);	
	#КонецЕсли
	
	ФормаСлужебная_ПросмотрВсехНастроек.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаСлужебная_ПросмотрВсехНастроек._ЛокКонтекст = _ЛокКонтекст;	
	ФормаСлужебная_ПросмотрВсехНастроек.Открыть();
	
КонецПроцедуры

// Восстанавливает настройки бизнес-процессов для текущего узла
&НаКлиенте
Процедура ФормаСписка_УзлыЗакрытие(РезультатРедактирования,СтрокаНастройки) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		СтруктураНастроек = _ЛокКонтекст.ЛокЯдро_ПолучитьНастройкиНаСервереSMARTS(Новый Структура("НастройкиБизнесПроцессов_ПользовательскиеНастройки", Ложь), ID_ТекущегоУзла);
		_ЛокКонтекст.ЛокЯдро_ЗаписатьВКэшНастройкиSMARTS(СтруктураНастроек);
		_ЛокКонтекст.ЛокЯдро_СобратьОбщуюСтруктуруБизнесПроцессов(ID_ТекущегоУзла);
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ТекущаяБазаСуществует = Ложь;
#Если ТолстыйКлиентОбычноеПриложение Тогда
	ПолноеИмяОбъекта = ЭтотОбъект.Метаданные().ПолноеИмя();
	Элементы = ЭлементыФормы;
	Объект = ЭтотОбъект;
#КонецЕсли