#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МестоУстановкиБиблиотеки = Константы.МестоВыполненияКриптографическихОпераций.Получить();
	ПровайдерКриптографии = Константы.ПровайдерКриптографии.Получить();
	ИнформационнаяБазаФайловая = КриптографияСервер.ИнформационнаяБазаФайловая();
	КриптографияСервер.УстановитьМестоВыполненияОперацийПоУмолчанию(ЭтаФорма, МестоУстановкиБиблиотеки, ИнформационнаяБазаФайловая);
	КриптографияСервер.НастроитьВидимостьМестаВыполненияОпераций(ЭтаФорма, МестоУстановкиБиблиотеки, ИнформационнаяБазаФайловая);
	ПроверитьИспользованиеСервернойКриптографии();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновленМодульКриптографии" Тогда
		ОбновитьПредставлениеСтатусаКомпонентыНЦА();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьПредставлениеСтатусаКомпонентыНЦА();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Если ЗавершениеРаботы Тогда
			Возврат;
		КонецЕсли;
		
		Отказ = Истина;
		
		ЗакрытьФорму();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверитьРаботуНЦА(Команда)
	
	ПроверитьРаботуНЦААсинх();
	
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	СохранитьИЗакрыть();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКомпонентуНЦА(Команда)
	УникальныйИдентификаторФормыКлиента = ЭтаФорма.УникальныйИдентификатор;
	СсылкаНаМодуль = КриптографияКлиентСервер.АдресБиблиотекиКриптографииНЦА(УникальныйИдентификаторФормыКлиента);
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановкаКомпонентыЗавершение", ЭтаФорма);
	НачатьУстановкуВнешнейКомпоненты(ОписаниеОповещения, СсылкаНаМодуль);
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	Отказ = Ложь;
	СохранитьНастройки(Отказ);
	Если НЕ Отказ Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИспользоватьВнешнююКриптографиюДляКомпонентыПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура МестоУстановкиБиблиотекиПриИзменении(Элемент)
	Модифицированность = Истина;
	
	Если ЭтаФорма.МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаКлиенте")
		И КриптографияКлиентСерверПереопределяемый.ПоказыватьОповещенияСервернаяКриптография() Тогда
		НовоеОповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаМестоУстановкиБиблиотекиПриИзменении",
			ЭтотОбъект);
		ПоказатьВопрос(НовоеОповещение,
			КриптографияКлиент.ТекстВопросаМестоУстановкиБиблиотекиПриИзменении(),
			РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	Иначе
		МестоУстановкиБиблиотекиПриИзмененииНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаМестоУстановкиБиблиотекиПриИзменении(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да
		И ЭтаФорма.МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаКлиенте") Тогда
		МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаСервере");
	Иначе
		МестоУстановкиБиблиотекиПриИзмененииНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоУстановкиБиблиотекиПриИзмененииНаКлиенте()
	
	ОбновитьПовторноИспользуемыеЗначения();
	ОбновитьПредставлениеСтатусаКомпонентыНЦА();
	ПроверитьИспользованиеСервернойКриптографии();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановкаКомпонентыЗавершение(Результат)Экспорт
	Оповестить("ОбновленМодульКриптографии");
КонецПроцедуры

&НаКлиенте
Функция ИнформацияОСистемеКлиент()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Результат = Новый Структура("ВерсияОС, ВерсияПриложения, ТипПлатформы, Процессор");
	Результат.ТипПлатформы = Строка(СистемнаяИнформация.ТипПлатформы);
	ЗаполнитьЗначенияСвойств(Результат, СистемнаяИнформация);
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ИнформацияОСистемеСервер()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Результат = Новый Структура("ВерсияОС, ВерсияПриложения, ТипПлатформы, Процессор");
	ЗаполнитьЗначенияСвойств(Результат, СистемнаяИнформация);
	Результат.ТипПлатформы = Строка(СистемнаяИнформация.ТипПлатформы);
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ОбновитьПредставлениеСтатусаКомпонентыНЦА()
	
	Если ЭтаФорма.ИнформационнаяБазаФайловая Тогда
		ОбновитьПредставлениеСтатусаКомпонентыНЦАНаКлиентеАсинх();
	Иначе
		Если ЭтаФорма.МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаКлиенте") Тогда
			ОбновитьПредставлениеСтатусаКомпонентыНЦАНаКлиентеАсинх();
		Иначе
			ОбновитьПредставлениеСтатусаКомпонентыНЦАНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеСтатусаКомпонентыНЦАНаСервере()
	
	РезультатПроверки = Ложь;
	Попытка
		РезультатПроверки = КриптографияКлиентСервер.КриптопровайдерПодключается(ВерсияКомпонентыНЦА,,МестоУстановкиБиблиотеки, Истина);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КриптографияКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
	КонецПопытки;
	
	ОбновитьПредставлениеСтатусаКомпонентыНЦАНаКлиентеНаСервере(Элементы,РезультатПроверки, ВерсияКомпонентыНЦА)
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеСтатусаКомпонентыНЦАНаКлиентеНаСервере(Элементы,РезультатПроверки, ВерсияКомпонентыНЦА)
	
	ВерсияВБазе = КриптографияКлиентСервер.ВерсияКомпонентыНЦАВБазе();
	ВерсияКомпонентыНЦА = СтрЗаменить(ВерсияКомпонентыНЦА, ",", ".");
	Элементы.ОбновитьКомпонентуНЦА.Видимость = Истина;
	ВерсияКомпонентыНЦАВБД = ВерсияВБазе;
	
	Если НЕ РезультатПроверки Тогда
		Элементы.НадписьБиблиотекаНЦАУстановлена.Заголовок = НСтр("ru = 'Библиотека не установлена'");
		Элементы.ОбновитьКомпонентуНЦА.Заголовок = НСтр("ru = 'Установить компоненту'");
		Элементы.КартинкаКомпонентаНЦАУстановлена.Видимость = Ложь;
		Элементы.КартинкаКомпонентаНЦАНеОбновлена.Видимость = Истина;
	ИначеЕсли ВерсияКомпонентыНЦА < ВерсияВБазе Тогда
		Элементы.НадписьБиблиотекаНЦАУстановлена.Заголовок = НСтр("ru = 'Библиотека установлена, но требует обновления версии'");
		Элементы.ОбновитьКомпонентуНЦА.Заголовок = НСтр("ru = 'Обновить компоненту'");
		Элементы.КартинкаКомпонентаНЦАУстановлена.Видимость = Ложь;
	Иначе
		Элементы.НадписьБиблиотекаНЦАУстановлена.Заголовок = НСтр("ru = 'Библиотека установлена и готова к использованию'");
		Элементы.ОбновитьКомпонентуНЦА.Видимость = Ложь;
		Элементы.КартинкаКомпонентаНЦАУстановлена.Видимость = Истина;
		Элементы.КартинкаКомпонентаНЦАНеОбновлена.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	Отказ = Ложь;
	СохранитьНастройки(Отказ);
	Если НЕ Отказ Тогда
		ОбновитьИнтерфейс();
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки(Отказ = Ложь)
	
	Попытка
		Если Модифицированность Тогда
			Константы.ПровайдерКриптографии.Установить(ПровайдерКриптографии);
			Константы.МестоВыполненияКриптографическихОпераций.Установить(МестоУстановкиБиблиотеки);
			Модифицированность = Ложь;
		КонецЕсли;
	Исключение
		Отказ = Истина;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КриптографияКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму()
	
	ТекстВопроса = НСтр("ru='В настройки были внесены изменения.
	|Сохранить изменения?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытьФормуЗавершение", ЭтаФорма);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуЗавершение(Результат, ДополнительныеПараметры)Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьИЗакрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИспользованиеСервернойКриптографии()
	
	КриптографияСервер.ПроверитьИспользованиеСервернойКриптографииФормыНастройки(ЭтаФорма, МестоУстановкиБиблиотеки);
	
КонецПроцедуры

#Область АсинхронныеФункции

&НаКлиенте
Асинх Процедура ПроверитьРаботуНЦААсинх()
	
	Если ЭтаФорма.МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаКлиенте") Тогда
		СистемнаяИнформация = ИнформацияОСистемеКлиент();
	Иначе
		СистемнаяИнформация = ИнформацияОСистемеСервер();
	КонецЕсли;
	
	ИнформацияОСистеме = Символы.ПС + "Сведения об аппаратном и программном обеспечении:";
	ИнформацияОСистеме = ИнформацияОСистеме + Символы.ПС + "ОС: " + СистемнаяИнформация.ВерсияОС;
	ИнформацияОСистеме = ИнформацияОСистеме + Символы.ПС + "Версия 1С:" + СистемнаяИнформация.ВерсияПриложения;
	ИнформацияОСистеме = ИнформацияОСистеме + Символы.ПС + "Тип платформы:" + СистемнаяИнформация.ТипПлатформы;	
	ИнформацияОСистеме = ИнформацияОСистеме + Символы.ПС + "Тип процессора:" + СистемнаяИнформация.Процессор;	
	
	Результат = Ждать КриптографияКлиентАсинх.КриптопровайдерПодключается(ВерсияКомпонентыНЦА, Ложь, МестоУстановкиБиблиотеки, Истина);
	Если Результат Тогда
		ВерсияКомпонентыНЦА = Ждать КриптографияКлиентАсинх.ПолучитьВерсиюКриптопровайдера(Ложь, Истина);
	Иначе
		ВерсияКомпонентыНЦА = "";
	КонецЕсли;
	ВерсияКомпонентыНЦА = СтрЗаменить(ВерсияКомпонентыНЦА, ",", ".");
	
	Если Результат Тогда
		
		ДопСведенияКомпоненты = Ждать ПолучитьИнформациюКриптопровайдераАсинх();
		
		Если ЗначениеЗаполнено(ДопСведенияКомпоненты) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Библиотека успешно подключена! Версия: %1 %2 %3'"), СокрЛП(ВерсияКомпонентыНЦА), Символы.ПС + ИнформацияОСистеме, Символы.ПС + Символы.ПС + ДопСведенияКомпоненты);
		Иначе
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Библиотека успешно подключена! Версия: %1 %2'"), СокрЛП(ВерсияКомпонентыНЦА), Символы.ПС + ИнформацияОСистеме);
		КонецЕсли;
		
	Иначе
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось подключить библиотеку криптографии. Возможно она не установлена или возникла ошибка при попытке ее подключения. %1 %2'"),
			Символы.ПС + ОписаниеОшибки(), ИнформацияОСистеме);
	КонецЕсли;
	КриптографияКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры 

&НаКлиенте
Асинх Функция ПолучитьИнформациюКриптопровайдераАсинх()
	
	Попытка
		
		Если ЭтаФорма.МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаКлиенте") Тогда
			ПараметрыВзаимодействия = КриптографияКлиентСервер.ПолучитьПараметрыВзаимодействияКриптопровайдера();
			ДополнительныеСведенияКриптопровайдера = Ждать КриптографияКлиентАсинх.ПолучитьДополнительныеСведения(ПараметрыВзаимодействия).ДополнительныеСведения;
		Иначе
			ПараметрыВзаимодействия = КриптографияКлиентСервер.ПолучитьПараметрыВзаимодействияКриптопровайдера();
			ДополнительныеСведенияКриптопровайдера = КриптографияВызовСервера.ПолучитьДополнительныеСведения(ПараметрыВзаимодействия).ДополнительныеСведения;
		КонецЕсли;
		
		ШаблонИнформацияКомпоненты = НСтр("ru = 'Дополнительная информация:
		|Версия компоненты: %1
		|NCALayer:
		|   Подключено: %2
		|   Модуль ""1С-Рейтинг ЭДО"" установлен: %3
		|   Версия модуля ""1С-Рейтинг ЭДО"": %4
		|   Порт запуска: %5
		|Библиотека Kalkan:
		|   Подключено: %6'");
		
		ИнформацияКомпоненты = СтрШаблон(
			ШаблонИнформацияКомпоненты,
			ДополнительныеСведенияКриптопровайдера.Версия,
			ДополнительныеСведенияКриптопровайдера.NCALayer.Подключен,
			ДополнительныеСведенияКриптопровайдера.NCALayer.МодульЭДОУстановлен,
			ДополнительныеСведенияКриптопровайдера.NCALayer.МодульЭДОВерсия,
			ДополнительныеСведенияКриптопровайдера.NCALayer.Порт,
			ДополнительныеСведенияКриптопровайдера.Kalkan.Подключен
		);
		Возврат ИнформацияКомпоненты;
		
	Исключение
		
		КриптографияВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка получение доп. данных компоненты'"), "Ошибка", , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат "";
		
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Асинх Процедура ОбновитьПредставлениеСтатусаКомпонентыНЦАНаКлиентеАсинх()
	
	РезультатПроверки = Ложь;
	Попытка
		РезультатПроверки = Ждать КриптографияКлиентАсинх.КриптопровайдерПодключается(ВерсияКомпонентыНЦА,,МестоУстановкиБиблиотеки, Истина);
		Если РезультатПроверки Тогда
			ВерсияКомпонентыНЦА = Ждать КриптографияКлиентАсинх.ПолучитьВерсиюКриптопровайдера(Ложь, Истина);
		Иначе
			ВерсияКомпонентыНЦА = "";
		КонецЕсли;
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КриптографияКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
	КонецПопытки;
	
	ОбновитьПредставлениеСтатусаКомпонентыНЦАНаКлиентеНаСервере(Элементы,РезультатПроверки, ВерсияКомпонентыНЦА)
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
