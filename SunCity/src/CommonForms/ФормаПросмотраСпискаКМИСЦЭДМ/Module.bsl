
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ДокументВладелец = ?(Параметры.Свойство("СсылкаДокумент"), Параметры.СсылкаДокумент, Неопределено);
	Организация = ?(Параметры.Свойство("Организация"), Параметры.Организация, Неопределено);
	ИдентификаторДокумента = ?(Параметры.Свойство("Идентификатор"), Параметры.Идентификатор, Неопределено);
	ИИНБИНСклад = ?(Параметры.Свойство("СкладЦЭДМ") И ЗначениеЗаполнено(Параметры.СкладЦЭДМ), Параметры.СкладЦЭДМ.ИИНБИНСклада, Неопределено);
	
	Если Не ЗначениеЗаполнено(ИдентификаторДокумента) Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось определить идентификатор документа для запроса к серверу ИС ЦЭДМ!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СобытияФормИСМПТКПереопределяемый.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
    СобытияФормИСМПТККлиентПереопределяемый.ПриОткрытии(ЭтаФорма, Отказ);
	ВыполнитьЗапросИнформацииПоКМ();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыгрузитьКодыМаркировкиВФайл(Команда)
	
	ОчиститьСообщения();
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокВыборФайла();
	ДиалогВыбораФайла.Фильтр 	= "CSV (Comma-Separated Values)(*.csv)|*.csv";
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьКодыМаркировкиИзФайлаЗавершение", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКодыМаркировкиИзФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		НовыйТекстовыйДокумент = Новый ТекстовыйДокумент;
		
		Для Каждого СтрокаТЧ Из Марки Цикл
			КодДляЗаписи = ?(ЗначениеЗаполнено(СтрокаТЧ.КодМаркировки), 
							 РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(СтрокаТЧ.КодМаркировки), СтрокаТЧ.КодИдентификации);
			НовыйТекстовыйДокумент.ДобавитьСтроку(КодДляЗаписи);
		КонецЦикла;
		
		НовыйТекстовыйДокумент.Записать(ВыбранныеФайлы[0]);
		
		ИмяФайла = Сред(ВыбранныеФайлы[0], СтрНайти(ВыбранныеФайлы[0], "\", НаправлениеПоиска.СКонца) + 1);
		ТекстСообщения = НСтр("ru = 'Документ ""%1"" сохранен.'");
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ИмяФайла);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВExcel(Команда)
	
	ОчиститьСообщения();
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокВыборФайла();
	ДиалогВыбораФайла.Фильтр 	= "Все поддерживаемые форматы файлов(*.xls;*.xlsx;)|*.xls;*.xlsx;|Книга Excel 97 (*.xls)|*.xls|Книга Excel 2007 (*.xlsx)|*.xlsx";
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("СоздатьФайлXLS", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлXLS(ВыбранныеФайлы, ДополнительныеПараметрым) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		
		Итератор = 1;
		Для Каждого СтрокаТЧ Из Марки Цикл
			
			КодДляЗаписи = ?(ЗначениеЗаполнено(СтрокаТЧ.КодМаркировки), 
							 РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(СтрокаТЧ.КодМаркировки), СтрокаТЧ.КодИдентификации);
				
			ТабличныйДокумент.Область("R" + Формат(Итератор,"ЧГ=0") + "C1").Текст = КодДляЗаписи;
			Итератор = Итератор + 1;
		КонецЦикла;
		
		ТабличныйДокумент.Записать(ВыбранныеФайлы[0], ТипФайлаТабличногоДокумента.XLS97);
		
		ИмяФайла = Сред(ВыбранныеФайлы[0], СтрНайти(ВыбранныеФайлы[0], "\", НаправлениеПоиска.СКонца) + 1);
		ТекстСообщения = НСтр("ru = 'Документ ""%1"" сохранен.'");
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ИмяФайла);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыполнитьЗапросИнформацииПоКМ();

	ТокенАвторизации = ПолучитьТокенАвторизации();
	Если ТокенАвторизации = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось получить токен для обмена с ИС ЦЭДМ. Операция прервана!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	ТекстСообщения = НСтр("ru = 'Запущена синхронизация с сервером ИС ЦЭДМ для получения списка кодов маркировки...'");
	ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ТокенАвторизации", ТокенАвторизации);
	ДополнительныеПараметры.Вставить("Организация",   	 Организация);
	ДополнительныеПараметры.Вставить("Идентификатор", 	 ИдентификаторДокумента);
	ДополнительныеПараметры.Вставить("ИИНБИНСклада",  	 ИИНБИНСклад);
	ДлительнаяОперация = ЗапроситьДанныеССервераЦЭДМ(УникальныйИдентификатор, ДополнительныеПараметры);
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ПослеЗапросаКМССервера(ДлительнаяОперация, Неопределено);
		Возврат
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеЗапросаКМССервера", ЭтотОбъект);
	ПараметрыОжидания     = ОбщегоНазначенияИСМПТККлиентПереопределяемый.ПараметрыОжидания(ЭтаФорма); 
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.ТекстСообщения	= НСтр("ru = 'Получение данных с сервера ИС ЦЭДМ.'");
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры 

&НаСервере
Функция ПолучитьТокенАвторизации()
	
	Возврат ИнтерфейсИСМПТК.ПолучитьТокенАвторизацииИСЦЭДМ(Организация);
	
КонецФункции

&НаСервере
Функция ЗапроситьДанныеССервераЦЭДМ(Знач УникальныйИдентификатор, Знач ДополнительныеПараметры)

	ПараметрыВыполнения = ОбщегоНазначенияИСМПТКПереопределяемый.ПараметрыВыполненияВФоне(УникальныйИдентификатор); 
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение списка кодов маркировки с сервера ИС ЦЭДМ.'");
	ПараметрыВыполнения.ЗапуститьВФоне    = Истина;
				
	ВыполняемыйМетод = "ИнтеграцияИСМПТК.ЗапроситьСписокКодовМаркировкиССервераЦЭДМ";
	
	Возврат ИнтеграцияИСМПТКПереопределяемый.ВыполнитьВФоне(ВыполняемыйМетод, ДополнительныеПараметры, ПараметрыВыполнения);
		
КонецФункции

&НаКлиенте
Процедура ПослеЗапросаКМССервера(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда // Пользователь отменил задание.
		ТекстСообщения = НСтр("ru = 'Процесс синхронизации не завершен, данные не получены.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	    Возврат;
	КонецЕсли;

	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	ОбработатьРезультатЗапросаКМ(Результат.АдресРезультата);
		
КонецПроцедуры

&НаСервере
Функция СообщенияФоновогоЗадания(УникальныйИдентификатор)
	Возврат ОбщегоНазначенияИСМПТКПереопределяемый.СообщенияПользователю(Истина, УникальныйИдентификатор);
КонецФункции

&НаСервере
Процедура ОбработатьРезультатЗапросаКМ(АдресРезультата)
	
	РезультатЗадания = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если РезультатЗадания.Успешно И НЕ РезультатЗадания.ТаблицаПолученныхКодов.Количество() = 0 Тогда
		Для Каждого СтрокаТЧ Из РезультатЗадания.ТаблицаПолученныхКодов Цикл
			НоваяСтрока = Марки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		КонецЦикла;
		СформироватьДеревоКодовМаркировки();
		ТекстСообщения = НСтр("ru = 'Процесс завершен, данные успешно загружены.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьДеревоКодовМаркировки() Экспорт
	
	//Добавим группы номенклатуры
	ПустаяСтруктураКМ = ПолучитьСтруктуруКодовМаркировки();
	ОчиститьДеревоКодовМаркировки();
	
	ТаблицаТоваров = Марки.Выгрузить();
	ТаблицаТоваров.Свернуть("Номенклатура", "Количество");
	
	Для Каждого ГруппаНом Из ТаблицаТоваров Цикл
		ПустаяСтруктураКМ.Количество = ГруппаНом.Количество;
		ДобавитьКодМаркировкиВДерево(ГруппаНом.Номенклатура, ПустаяСтруктураКМ);
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Марки Цикл
		Номенклатура = ?(ЗначениеЗаполнено(СтрокаТЧ.Номенклатура), СтрокаТЧ.Номенклатура, ИнтеграцияИСМПТКПереопределяемый.ПолучитьПустуюСсылкуНоменклатура());
		ДобавитьКодМаркировкиВДерево(Номенклатура, СтрокаТЧ);
	КонецЦикла;
	
	Элементы.ДеревоМаркированнойПродукции.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	
КонецФункции

&НаСервере
Процедура ДобавитьКодМаркировкиВДерево(Номенклатура, СтруктураКодовМаркировки) Экспорт
	
	Если Номенклатура = Неопределено Тогда
		//Нужен ссылочный тип, чтобы дерево построилось корректно
		Номенклатура = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьПустуюСсылкуНоменклатура();
	КонецЕсли;
	
	НайденнаяСтрока = НайтиЗначениеЭлементаДереваПоНоменклатуре(Номенклатура, ДеревоМаркированнойПродукции);
	
	Если Не НайденнаяСтрока = Неопределено Тогда
		
		Если СтруктураКодовМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Потребительская Тогда 
			КоличествоПодобранно = 1;
		Иначе 
			КоличествоПодобранно = СтруктураКодовМаркировки.Количество;
		КонецЕсли;
		
		НоваяСтрокаКод = НайденнаяСтрока.ПолучитьЭлементы().Добавить();
		
		НоваяСтрокаКод.КодМаркировки    	= СтруктураКодовМаркировки.КодМаркировки;
		НоваяСтрокаКод.КодИдентификации 	= СтруктураКодовМаркировки.КодИдентификации;
		НоваяСтрокаКод.GTIN 				= СтруктураКодовМаркировки.GTIN;
		НоваяСтрокаКод.GTINВерхнегоУровня   = СтруктураКодовМаркировки.GTINВерхнегоУровня;
		НоваяСтрокаКод.СрокГодности 		= ?(Не СтруктураКодовМаркировки.Свойство("СрокГодности"), "", СтруктураКодовМаркировки.СрокГодности);
		НоваяСтрокаКод.НомерПартии  		= ?(Не СтруктураКодовМаркировки.Свойство("НомерПартии"),  "", СтруктураКодовМаркировки.НомерПартии);
		НоваяСтрокаКод.КоличествоПодобранно	= КоличествоПодобранно;
		НоваяСтрокаКод.ВидУпаковки 			= СтруктураКодовМаркировки.ВидУпаковки;
		НоваяСтрокаКод.ВидПродукции 		= СтруктураКодовМаркировки.ВидПродукции;
		ЕдиницаИзмерения = ИнтеграцияИСМПТКПереопределяемый.ПолучитьБазовуюЕдиницуИзмерения(Номенклатура);
		НоваяСтрокаКод.ЕдиницаИзмерения		 = ЕдиницаИзмерения;
				
	Иначе
		
		ЭлементыДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
		
		НоваяСтрокаНоменклатура = ЭлементыДерева.Добавить();
		НоваяСтрокаНоменклатура.Номенклатура = Номенклатура;
		НоваяСтрокаНоменклатура.ВидУпаковки  = Перечисления.ВидыУпаковокИСМПТК.ПустаяСсылка();
		
		Если ЗначениеЗаполнено(СтруктураКодовМаркировки.КодИдентификации) Тогда 
			НоваяСтрокаКод = НоваяСтрокаНоменклатура.ПолучитьЭлементы().Добавить();
			НоваяСтрокаКод.КодМаркировки 	    = СтруктураКодовМаркировки.КодМаркировки;
			НоваяСтрокаКод.КодИдентификации     = СтруктураКодовМаркировки.КодИдентификации;
			НоваяСтрокаКод.GTIN 			    = СтруктураКодовМаркировки.GTIN;
			НоваяСтрокаКод.GTINВерхнегоУровня   = СтруктураКодовМаркировки.GTINВерхнегоУровня;
			НоваяСтрокаКод.СрокГодности 	    = ?(Не СтруктураКодовМаркировки.Свойство("СрокГодности"), "", СтруктураКодовМаркировки.СрокГодности);
			НоваяСтрокаКод.НомерПартии  	    = ?(Не СтруктураКодовМаркировки.Свойство("НомерПартии"),  "", СтруктураКодовМаркировки.НомерПартии);
			НоваяСтрокаКод.КоличествоПодобранно	= СтруктураКодовМаркировки.Количество;
			НоваяСтрокаКод.ВидУпаковки  		= СтруктураКодовМаркировки.ВидУпаковки;
			НоваяСтрокаКод.ВидПродукции 		= СтруктураКодовМаркировки.ВидПродукции;
		КонецЕсли;
		
		НоваяСтрокаНоменклатура.КоличествоПодобранно = СтруктураКодовМаркировки.Количество;
		ЕдиницаИзмерения = ИнтеграцияИСМПТКПереопределяемый.ПолучитьБазовуюЕдиницуИзмерения(Номенклатура);
		НоваяСтрокаНоменклатура.ЕдиницаИзмерения = ЕдиницаИзмерения;
		
		ИнтерфейсИСМПТККлиентСервер.УстановитьИндексКартинкиТипаУпаковки(НоваяСтрокаНоменклатура);
		
	КонецЕсли;

	Если Не НоваяСтрокаКод = Неопределено Тогда
		ИнтерфейсИСМПТККлиентСервер.УстановитьИндексКартинкиТипаУпаковки(НоваяСтрокаКод);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиЗначениеЭлементаДереваПоНоменклатуре(Номенклатура, Дерево)
	
	НайденныйЭлемент = Неопределено;
	
	ЭлементыВетвиДерева = Дерево.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыВетвиДерева Цикл
		Если ЭлементДерева.Номенклатура = Номенклатура Тогда
			НайденныйЭлемент = ЭлементДерева;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныйЭлемент;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруКодовМаркировки()
	
	СтруктураКодовМаркировки = Новый Структура;
	СтруктураКодовМаркировки.Вставить("КодМаркировки",      "");
	СтруктураКодовМаркировки.Вставить("КодИдентификации",   "");
	СтруктураКодовМаркировки.Вставить("КоличествоИсточник", 0);
	СтруктураКодовМаркировки.Вставить("GTIN", 		  "");
	СтруктураКодовМаркировки.Вставить("Количество",   0);
	СтруктураКодовМаркировки.Вставить("ВидУпаковки",  Перечисления.ВидыУпаковокИСМПТК.ПустаяСсылка());
	СтруктураКодовМаркировки.Вставить("СрокГодности", Дата(1,1,1));
	СтруктураКодовМаркировки.Вставить("НомерПартии",  "");
	
	Возврат СтруктураКодовМаркировки;
	
КонецФункции

&НаСервере
Процедура ОчиститьДеревоКодовМаркировки() 
	
	ЭлементыДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
КонецПроцедуры

#КонецОбласти 