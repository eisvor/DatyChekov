#Область ОписаниеПеременных

&НаКлиенте
Перем ЗакрыватьФормуБезКонтроляИзмененийНастроек;

&НаКлиенте
Перем ФайлXML;

// Строка табличной части настройки РМК "Ввод наличных", которую только что отредактировали
&НаКлиенте
Перем ТекущаяСтрокаКупюры;

// Строка дерева горячих клавиш, которую только что отредактировали
&НаКлиенте
Перем ТекущаяСтрокаГорячейКлавиши;

// Структура с возможными вариантами типов элементов палитры: 0 - позиция, 1 - модификатор.
&НаКлиенте
Перем ТипыЭлементовПалитры;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьПараметрыФормы();
	АктуализироватьЭлементыФормы();
	ОбщегоНазначенияРМК.ЗаполнитьДоступныеСценарииИспользованияРМК(ЭтотОбъект);
	ПараметрыЛогирования = ПолучитьПараметрыЛогирования()
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_УзелПланаОбмена" Тогда
		УстановитьВидимостьНаСервере();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_НаборКонстант" Тогда
		
		ОбновитьРеквизитыПоКонстантам();
		НастроитьЭлементыSMSПодтверждения();
		НастроитьЭлементыВидовОплат();
		
	ИначеЕсли ИмяСобытия = "ИзмененПризнакИспользованияПоставляемыйОграниченийПродаж" Тогда
		
		ОбновитьПризнакИспользованияОграниченийПродаж(Параметр);
		ОбновитьИнтерфейс();
		
	ИначеЕсли ИмяСобытия = "Запись_Файл" Тогда
		
		Если Параметр.Свойство("ВладелецФайла") И Параметр.ВладелецФайла = НастройкаРМК.СтруктураБыстрыхТоваров Тогда
			
			Если Не ЗначениеЗаполнено(Источник)
				Или (ТипЗнч(Источник) = Тип("Массив")
				И Источник.Количество() = 0) Тогда
				Возврат;
			КонецЕсли;
			
			СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
			
			ДанныеУзла = ВыбраннаяСтрокаДереваИзбранныхТоваров();
			
			Если ДанныеУзла.ЭтоНекорневойУзелДерева Тогда
				
				ТекущаяСтрокаДерева = ДанныеУзла.УзелДерева;
				ТекущаяСтрокаДерева.ИзображениеЭлемента = СсылкаНаФайл;
				Модифицированность = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПерезаполнитьБыстрыеТоварыВНастройкеРМК" Тогда
		
		Если НастройкаРМК.СтруктураБыстрыхТоваров = Параметр.СсылкаПалитры Тогда
			Если Элементы.Предпросмотр.Пометка Тогда
				СформироватьПримерЗаполненияПанели(Команды.СформироватьПримерЗаполненияПанели);
			КонецЕсли;
			ЗаполнитьИзбранныеТоварыИРазвернуть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ВладелецФормы = Неопределено Тогда
		Если ВладелецФормы.ИмяФормы = "Обработка.ПомощникНастройкиКассовогоМестаРМК.Форма.Форма" Тогда
			
			Элементы.ГруппаКнопкиНижнейПанели.Видимость = Истина;
			Элементы.ИндикаторИсполнения.МаксимальноеЗначение = ВладелецФормы.Элементы.ИндикаторИсполнения.МаксимальноеЗначение;
			ИндикаторИсполнения = ВладелецФормы.ИндикаторИсполнения;
			
			УбратьИзПомощникаСтраницуОборудованияПриНеобходимости();
			
		КонецЕсли;
	КонецЕсли;
	
	НастроитьЭлементыSMSПодтверждения();
	НастроитьЭлементыВидовОплат();
	ЗакрыватьФормуБезКонтроляИзмененийНастроек = Ложь;
	
	ЗаполнитьПанельИзбранныхТоваров();
	ЗаполнитьИзбранныеТоварыИРазвернуть();
	УстановитьДоступностьЭлементов();
	НастроитьИспользованиеНапоминанияВводаКартЛояльности();
	ИнициализироватьКлиентскиеПеречисленияФормы();
	
	Если ПараметрыЛогирования <> Неопределено Тогда
		ОбновитьПредставлениеЛогирования();
	КонецЕсли;
	ПоказатьСхемуФормыРМК();
	АктуализироватьДоступностьКнопкиСбросаПорядкаОбластей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы Тогда
		
		Если НЕ ПомощникНастройкиРМК Тогда
			ЗакрытиеФормыПомощникРМК = Истина;
		КонецЕсли;
		
		НастройкиОтредактированы = (Модифицированность Или ИзмененСоставПалитрыИзбранных);
		Если Не ЗакрыватьФормуБезКонтроляИзмененийНастроек
			И (НастройкиОтредактированы Или Не ЗначениеЗаполнено(НастройкаРМК.Ссылка)) И ЗакрытиеФормыПомощникРМК Тогда
			
			Отказ = Истина;
			Оповещение = Новый ОписаниеОповещения("СохранитьНастройкиРМКИЗакрыть", ЭтотОбъект);
			ТекстВопроса = НСтр("ru = 'Сохранить настройки?'");
			ПоказатьВопрос(Оповещение,
				ТекстВопроса,
				РежимДиалогаВопрос.ДаНет);
				
		КонецЕсли;
			
	Иначе
		
		Отказ = Истина;
		ТекстПредупреждения = НСтр("ru = 'При закрытии формы все данные будут утеряны. Продолжить?'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКРежимНачальнойСтраницыПриИзменении(Элемент)
	
	НастроитьЗначениеЭлементаЗакрытьПодбор();
	ЗаполнитьДеревоОбластейФормы();
	РазвернутьСтрокиДерева();
	ПоказатьСхемуФормыРМК();
	АктуализироватьДоступностьКнопкиСбросаПорядкаОбластей();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПрефиксШтрихкодаВесовогоТовараПриИзменении(Элемент)
	ПрефиксШтрихкодаВесовогоТовараПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПрефиксШтрихкодаШтучногоТовараПриИзменении(Элемент)
	ПрефиксШтрихкодаШтучногоТовараПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ШаблонШтрихкодаТовараПриИзменении(Элемент)
	ШаблонШтрихкодаТовараПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКВводНаличныхКлавишаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.НастройкаРМКВводНаличных.ТекущиеДанные;
	
	Если ПустаяСтрока(ТекущаяСтрока.Клавиша) Тогда
		ТекущаяСтрока.Клавиша = ИнтерфейсРМКСлужебныйКлиентСервер.ПредставлениеПустойКлавиши();
	КонецЕсли;
	ПроверитьНекорректныеКомбинацииГорячихКлавиш();
	ТекущаяСтрокаКупюры = Элементы.НастройкаРМКВводНаличных.ТекущаяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоГорячиеКлавишиКлавишаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоГорячиеКлавиши.ТекущиеДанные;
	ПустаяКлавиша = ИнтерфейсРМКСлужебныйКлиентСервер.ПредставлениеПустойКлавиши();
	
	Если ПустаяСтрока(ТекущаяСтрока.Клавиша) Тогда
		ТекущаяСтрока.Клавиша = ПустаяКлавиша;
	КонецЕсли;
	
	Если ТекущаяСтрока.Клавиша = ПустаяКлавиша Тогда
		
		ТекущаяСтрока.АкселераторAlt	= Ложь;
		ТекущаяСтрока.АкселераторCtrl	= Ложь;
		ТекущаяСтрока.АкселераторShift	= Ложь;
		
	КонецЕсли;
	ПроверитьНекорректныеКомбинацииГорячихКлавиш();
	ТекущаяСтрокаГорячейКлавиши = Элементы.ДеревоГорячиеКлавиши.ТекущаяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКомментарийНажатие(Элемент)
	
	ТекстСообщения = Элементы.ДекорацияКомментарийНоваяНастройкаОбмена.Подсказка;
	ПоказатьПредупреждение(, ТекстСообщения);

КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКБыстрыеТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ Элементы.НастройкаРМКБыстрыеТовары.ТекущиеДанные = Неопределено Тогда
		
		Номенклатура = Элементы.НастройкаРМКБыстрыеТовары.ТекущиеДанные.Номенклатура;
		
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			
			ПараметрыВыбора = Новый Структура;
			ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьПараметрыВыбораХарактеристик(ПараметрыВыбора,
				Номенклатура,
				СтандартнаяОбработка);
				
			Если Не СтандартнаяОбработка Тогда
				ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора",
					ПараметрыВыбора,
					Элемент);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКБыстрыеТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкаРМКБыстрыеТовары.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		Номенклатура = ТекущиеДанные.Номенклатура;
		ХарактеристикиИспользуются = ПроверитьПрименениеХарактеристикДляНоменклатуры(Номенклатура);
		ТекущиеДанные.ХарактеристикиИспользуются = ХарактеристикиИспользуются;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрефиксИнформационнойБазыПриИзменении(Элемент)
	
	ФоновоеЗадание = ЗапуститьИзменениеПрефиксаИБВФоновомЗадании();
	
	Если ФоновоеЗадание <> Неопределено
		И ФоновоеЗадание.Статус = "Выполняется" Тогда
		
		Элементы.ПрефиксИнформационнойБазы.Доступность = Ложь;
		Элементы.ДекорацияОжиданиеИзмененияПрефикса.Видимость = Истина;
		
	КонецЕсли;
	
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
	
	Обработчик = Новый ОписаниеОповещения("ПослеИзмененияПрефикса", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьИзменениеПрефиксаИБВФоновомЗадании()
	
	ПараметрыПроцедуры = Новый Структура("НовыйПрефиксИБ, ПродолжитьНумерацию",
		ПрефиксИнформационнойБазы, Истина);
		
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Изменение префикса'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("ПрефиксацияОбъектовСлужебный.ИзменитьПрефиксИБ",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ПослеИзмененияПрефикса(ФоновоеЗадание, ДополнительныеПараметры) Экспорт

	Если НЕ Элементы.ПрефиксИнформационнойБазы.Доступность Тогда
		Элементы.ПрефиксИнформационнойБазы.Доступность = Истина;
	КонецЕсли;
	
	Если Элементы.ДекорацияОжиданиеИзмененияПрефикса.Видимость Тогда
		Элементы.ДекорацияОжиданиеИзмененияПрефикса.Видимость = Ложь;
	КонецЕсли;
	
	Если ФоновоеЗадание <> Неопределено
		И ФоновоеЗадание.Статус = "Выполнено" Тогда
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Префикс изменен.'"));
		
	Иначе
		
		Элементы.ПрефиксИнформационнойБазы.ОбновитьТекстРедактирования();
		
		Если ФоновоеЗадание <> Неопределено Тогда
			
			ТекстОшибки = НСтр("ru='Не удалось изменить префикс.
				|См. подробности в журнале регистрации.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСерверЛояльностиПолучательДанныхПриИзменении(Элемент)
	ИспользоватьСерверЛояльностиПолучательДанныхПриИзмененииНаСервере();
	НастроитьЭлементыSMSПодтверждения();
	НастроитьЭлементыВидовОплат();
	НастроитьДоступностьЭлементовПриПереключенииСервераЛояльности();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОсобенностиПродаж()
	
	ОбщегоНазначенияРМКПереопределяемый.УстановитьПризнакФормеПоДаннымФункциональнойОпции(ЭтотОбъект,
		"ИспользоватьКонтрольПродаж");
	ОбщегоНазначенияРМКПереопределяемый.УстановитьПризнакФормеПоДаннымФункциональнойОпции(ЭтотОбъект,
		"ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	
	АктуализироватьДоступностьКонтроляИспользованияКалендарныхЗапретовПродаж();
	
	ИспользоватьОплатуСертификатамиНСПК = ОбщегоНазначенияРМК.ИспользоватьОплатуСертификатамиНСПК();
	ИспользоватьЗаменуТоваров = ОбщегоНазначенияРМК.ИспользоватьЗаменуТоваров();
	
	Элементы.ПараметрыПодключенияЕГАИС.Доступность = ВестиСведенияДляДекларацийПоАлкогольнойПродукции;
	Элементы.ГруппаПараметрыПодключенияНСПК.Доступность = ИспользоватьОплатуСертификатамиНСПК;
	НастроитьЭлементНеПечататьКодВозвратаНСПК();
	
	Если ИспользоватьОплатуСертификатамиНСПК Тогда
		ЗаполнитьПараметрыПодключенияНСПК();
	КонецЕсли;
	
	Элементы.КонтрольПродаж.Доступность = ИспользоватьКонтрольПродаж;
	Элементы.ВыгрузитьКонтрольПродаж.Видимость = ИспользоватьКонтрольПродаж;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначениеКонстанты(КонстантаИмя, ТекущееЗначениеКонстанты)
	
	Если КонстантаИмя <> "" Тогда
		
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = ТекущееЗначениеКонстанты;
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура АктуализироватьДоступностьКонтроляИспользованияКалендарныхЗапретовПродаж(СохранятьКонстанту = Ложь)
	
	Если СохранятьКонстанту Тогда
		ИмяКонстанты = ОбщегоНазначенияРМК.ИмяКонстанты("ВестиСведенияДляДекларацийПоАлкоголю");
		СохранитьЗначениеКонстанты(ИмяКонстанты, ВестиСведенияДляДекларацийПоАлкогольнойПродукции);
	КонецЕсли;
	
	Элементы.ПараметрыПодключенияЕГАИС.Доступность = ВестиСведенияДляДекларацийПоАлкогольнойПродукции;
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьОплатуСертификатамиНСПКПриИзмененииСервер()
	
	ИмяКонстанты = ОбщегоНазначенияРМК.ИмяКонстанты("ИспользоватьОплатуСертификатамиНСПК");
	СохранитьЗначениеКонстанты(ИмяКонстанты, ИспользоватьОплатуСертификатамиНСПК);
	Элементы.ГруппаПараметрыПодключенияНСПК.Доступность = ИспользоватьОплатуСертификатамиНСПК;
	НастроитьЭлементНеПечататьКодВозвратаНСПК();
	
	Если ИспользоватьОплатуСертификатамиНСПК Тогда
		ЭлектронныеСертификатыНСПКРМКПереопределяемый.СоздатьВидыОплатНСПК();
		ЗаполнитьПараметрыПодключенияНСПК();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АдресСервисаНСПКПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(АдресСервисаНСПК) Тогда
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("ЭС_НСПК_МИР", АдресСервисаНСПК, "АдресСервисаНСПК");
	Иначе
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища("ЭС_НСПК_МИР", "АдресСервисаНСПК");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКИспользоватьНовыйПодборТоваровПриИзменении(Элемент)
	НастроитьЭлементыПодбораТоваров();
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыПодбораТоваров()
	
	ОбщегоНазначенияРМКПереопределяемый.НастроитьЭлементыПодбораТоваров(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольСервераЛояльностиПриИзменении(Элемент)
	ПарольСервераЛояльностиИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКПродажиСНесколькихКассККМПриИзменении(Элемент)
	
	Элементы.НастройкаРМКОсновнаяКассаККМ.Доступность = НастройкаРМК.ПродажиСНесколькихКассККМ;
	Если НЕ НастройкаРМК.ПродажиСНесколькихКассККМ Тогда
		НастройкаРМК.ОсновнаяКассаККМ = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКОтправлятьSMSКодПриЗаведенииКартыПриИзменении(Элемент)
	
	Элементы.НастройкаРМКШаблонSMSПриЗаведенииКарты.Доступность = НастройкаРМК.ОтправлятьSMSКодПриЗаведенииКарты;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКБыстрыеТоварыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбщегоНазначенияРМККлиентПереопределяемый.ОбработатьВыбранноеЗначениеБыстрыхТоваров(ЭтотОбъект,
		ВыбранноеЗначение,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПодсказкуАдресаСервераЛояльности()
	
	Элементы.НастройкаРМКАдресСервераЛояльности.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	
	Строка1 = Новый ФорматированнаяСтрока(НСтр("ru = 'При использовании защищенного соединения или
				|нестандартного порта подключения необходимо указать адрес в таком виде: '"), Новый Шрифт());
	
	Строка2 = Новый ФорматированнаяСтрока(НСтр("ru = 'https://server:111/base/hs/loyaltyservice'"), Новый Шрифт(,,Истина));
	
	Строка3 = Новый ФорматированнаяСтрока(НСтр("ru = 'Стандартные порты 80 и 443 указывать не требуется.'"), Новый Шрифт(,,,));
	
	ЗаголовокПодсказки = Новый ФорматированнаяСтрока(Строка1, Строка2, Символы.ПС, Строка3);
	
	Элементы.НастройкаРМКАдресСервераЛояльности.РасширеннаяПодсказка.Заголовок = ЗаголовокПодсказки;
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьЗаменуТоваровПриИзмененииСервер()
	
	ИмяКонстанты = ОбщегоНазначенияРМК.ИмяКонстанты("ИспользоватьЗаменуТоваров");
	СохранитьЗначениеКонстанты(ИмяКонстанты, ИспользоватьЗаменуТоваров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольнаяНастройкаПриИзменении(Элемент) Экспорт
	ОбщегоНазначенияРМККлиентПереопределяемый.ПроизвольнаяНастройкаПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИспользоватьСерверЛояльностиПолучательДанных" Тогда
		СтандартнаяОбработка = Ложь;
		ТекущийЭлемент = Элементы.ИспользоватьСерверЛояльностиПолучательДанных;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьSMSПриОплатеБонусамиПриИзменении(Элемент)
	
	Если ОтправлятьSMSПриОплатеБонусами Тогда
		ОтправлятьSMSПриПоискеКартыПоНомеруТелефона = Ложь;
	КонецЕсли;
	
	НастроитьЭлементыSMSПодтверждения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьSMSПриПоискеКартыПоНомеруТелефонаПриИзменении(Элемент)
	
	Если ОтправлятьSMSПриПоискеКартыПоНомеруТелефона Тогда
		ОтправлятьSMSПриОплатеБонусами = Ложь;
	КонецЕсли;
	
	НастроитьЭлементыSMSПодтверждения();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКРазрешитьВыборСкладаПриИзменении(Элемент)
	Элементы.ОткрытьСписокСкладовДляПродажи.Доступность = НастройкаРМК.РазрешитьВыборСклада;
КонецПроцедуры

&НаКлиенте
Процедура ПечататьКороткийСлипЧекПриИзменении(Элемент)
	ПечататьКороткийСлипЧекПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКЗакрыватьПодборПриВыбореТовараПриИзменении(Элемент)
	УстановитьДоступностьПалитрыПлиточногоИнтерфейсаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКИспользоватьОплатуНаличнымиПриИзменении(Элемент)
	
	НастроитьЭлементыВидовОплат();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаБонусыИСертификатыРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	АктивизироватьПолеНастроекАдресСервераЛояльности();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКИспользоватьПанельВводаНаличныхКупюрПриИзменении(Элемент)
	
	ОбработатьИзменениеИспользованияПанелиВводаНаличныхНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКВертикальнаяОриентацияПриИзменении(Элемент)
	
	НастройкаРМК.ВертикальнаяОриентация = Не ГоризонтальныйОриентация;
	ЗаполнитьДеревоОбластейФормы();
	РазвернутьСтрокиДерева();
	ПоказатьСхемуФормыРМК();
	АктуализироватьДоступностьКнопкиСбросаПорядкаОбластей();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКОбновлятьКоличествоПриПовторномПолученииВесаПриИзменении(Элемент)
	
	НастройкаРМК.ОбновлятьКоличествоПриПовторномПолученииВеса = Не СуммироватьПриПовторномПолученииВеса;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКРазрешитьБыстроеДобавлениеПакетаПриИзменении(Элемент)
	Элементы.НастройкаРМКНоменклатураПакет.Доступность = НастройкаРМК.РазрешитьБыстроеДобавлениеПакета;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоГорячиеКлавишиАкселераторAltПриИзменении(Элемент)
	ДеревоГорячиеКлавишиАкселераторAltПриИзмененииКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоГорячиеКлавишиАкселераторCtrlПриИзменении(Элемент)
	ДеревоГорячиеКлавишиАкселераторCtrlПриИзмененииКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоГорячиеКлавишиАкселераторShiftПриИзменении(Элемент)
	ДеревоГорячиеКлавишиАкселераторShiftПриИзмененииКлиент();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКВводНаличныхАкселераторAltПриИзменении(Элемент)
	НастройкаРМКВводНаличныхАкселераторAltПриИзмененииКлиент();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКВводНаличныхАкселераторCtrlПриИзменении(Элемент)
	НастройкаРМКВводНаличныхАкселераторCtrlПриИзмененииКлиент();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКВводНаличныхАкселераторShiftПриИзменении(Элемент)
	НастройкаРМКВводНаличныхАкселераторShiftПриИзмененииКлиент();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКВводНаличныхПриАктивизацииСтроки(Элемент)
	НастройкаРМКВводНаличныхПриАктивизацииСтрокиКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоГорячиеКлавишиПриАктивизацииСтроки(Элемент)
	ДеревоГорячиеКлавишиПриАктивизацииСтрокиКлиент();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКВестиЖурналДействийКассираПриИзменении(Элемент)
	УстановитьДоступностьЖурналаДействийКассира();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКСрокХраненияОперацийСЧекомПриИзменении(Элемент)
	
	УстановитьДоступностьОчисткиЖурналаДействийКассира();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКРаботаВРежимеМедленногоСоединенияПриИзменении(Элемент)
	
	РаботаВРежимеМедленногоСоединенияПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКШаблонЧекаПродажиПриИзменении(Элемент)
	
	НастроитьЭлементНеПечататьКодВозвратаСБП();
	НастроитьЭлементНеПечататьКодВозвратаНСПК();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьИнтегрированныйЧекЕГАИСПриИзменении(Элемент)
	НастройкаРМКФормироватьИнтегрированныйЧекЕГАИСПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКИспользоватьОплатуПлатежнымиСистемамиПриИзменении(Элемент)
	
	НастроитьЭлементыВидовОплат();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКИспользоватьОплатуПлатежнымиКартамиПриИзменении(Элемент)
	
	НастроитьЭлементыВидовОплат();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКСтруктураПлиточногоИнтерфейсаПодбораПриИзменении(Элемент)
	
	НастроитьСписокРежимовНачальнойСтраницы(ЭтотОбъект);
		
	Если Не ЗначениеЗаполнено(НастройкаРМК.СтруктураПлиточногоИнтерфейсаПодбора) И
			НастройкаРМК.РежимНачальнойСтраницы = 2 Тогда
		НастройкаРМК.РежимНачальнойСтраницы = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКВариантОтображенияПриИзменении(Элемент)
	
	ПоказатьСхемуФормыРМК();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбластейФормыРМКПриАктивизацииСтроки(Элемент)
	ПоказатьСхемуФормыРМК();
КонецПроцедуры

&НаКлиенте
Процедура СхемаФормыРМКПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СхемаФормыРМКПриНажатииКлиент(ДанныеСобытия.Element);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБыстрыеТовары

&НаКлиенте
Процедура НастройкаРМКБыстрыеТоварыЗначениеЦветаФонаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкаРМКБыстрыеТовары.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		СериализованноеЗначениеЦвета = СериализоватьЗначениеЦвета(ТекущиеДанные.ЗначениеЦветаФона);
		ТекущиеДанные.ЦветФона = СериализованноеЗначениеЦвета;
		
	КонецЕсли;
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИерархияТоваров

&НаКлиенте
Процедура НастройкаРМКСтруктураБыстрыхТоваровПриИзменении(Элемент)
	
	ЗаполнитьИзбранныеТоварыИРазвернуть();
	ИзмененСоставПалитрыИзбранных = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровПриИзменении(Элемент)
	ИзмененСоставПалитрыИзбранных = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = ИерархияТоваров.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ЗначениеЗаполнено(ТекущаяСтрока.Палитра) Тогда
		
		ПоказатьЗначение(, ТекущаяСтрока.Палитра);
		
	ИначеЕсли Поле.Имя = "ИерархияТоваровИзображениеЭлемента" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если НЕ (ТекущаяСтрока = КореньДерева() Или ЗначениеЗаполнено(ТекущаяСтрока.Палитра)) Тогда
		
			Если ЗначениеЗаполнено(ТекущаяСтрока.ИзображениеЭлемента) Тогда
				
				ЗаблокироватьДанныеФормыДляРедактирования();
				ДобавитьПросмотретьИзображениеПозиции();
				
			ИначеЕсли Не ТолькоПросмотр Тогда
				ДобавитьИзображениеКлиент();
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ДобавитьПозицию();
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.ИерархияТоваров.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		
		ИндексКорневогоЭлемента = ИерархияТоваров.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		Если Не ВыделенныеСтроки.Найти(ИндексКорневогоЭлемента)= Неопределено Тогда
			
			ЗаголовокПредупреждения = НСтр("ru = 'Удаление строк'");
			ТекстПредупреждения = НСтр("ru = 'Снимите выделение с корневого элемента для удаления строк.'");
			ПоказатьПредупреждение(, ТекстПредупреждения, , ЗаголовокПредупреждения);
			Отказ = Истина;
			
		КонецЕсли;
		
		Если Не Отказ Тогда
			
			Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
				
				УдаляемаяСтрока = ИерархияТоваров.НайтиПоИдентификатору(ВыделеннаяСтрока);
				Если ЗначениеЗаполнено(УдаляемаяСтрока.ВидМодификатора) Тогда
					
					Родитель = УдаляемаяСтрока.ПолучитьРодителя();
					
					Если Родитель.ЭтоКатегория Тогда
						ОсталисьГрупповыеМодификаторы = Ложь;
						ВложенныеЭлементыРодителя = Родитель.ПолучитьЭлементы();
						Для Каждого ВложенныйЭлементРодителя Из ВложенныеЭлементыРодителя Цикл
							Если НЕ ЗначениеЗаполнено(ВложенныйЭлементРодителя.ВидМодификатора) Тогда
								Продолжить;
							КонецЕсли;
							Идентификатор = ВложенныйЭлементРодителя.ПолучитьИдентификатор();
							Если ВыделенныеСтроки.Найти(Идентификатор)= Неопределено Тогда
								ОсталисьГрупповыеМодификаторы = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Для Каждого ВложенныйЭлементРодителя Из ВложенныеЭлементыРодителя Цикл
							Если ВложенныйЭлементРодителя.ЭтоКатегория Тогда
								Продолжить;
							КонецЕсли;
							Идентификатор = ВложенныйЭлементРодителя.ПолучитьИдентификатор();
							Если ВыделенныеСтроки.Найти(Идентификатор)= Неопределено Тогда
								ИмеетсяВложенность = ВложенныйЭлементРодителя.ПолучитьЭлементы().Количество() > 0 
									ИЛИ ОсталисьГрупповыеМодификаторы;
								ВложенныйЭлементРодителя.ИмеетсяВложенность = ИмеетсяВложенность;
								Если НЕ ИмеетсяВложенность Тогда
									ВложенныйЭлементРодителя.НомерКатегории = 0;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					Иначе
						ИмеетсяВложенность = Ложь;
						ВложенныеЭлементыРодителя = Родитель.ПолучитьЭлементы();
						Для Каждого ВложенныйЭлементРодителя Из ВложенныеЭлементыРодителя Цикл
							Идентификатор = ВложенныйЭлементРодителя.ПолучитьИдентификатор();
							Если ВыделенныеСтроки.Найти(Идентификатор)= Неопределено Тогда
								ИмеетсяВложенность = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Родитель.ИмеетсяВложенность = ИмеетсяВложенность;
						Если НЕ ИмеетсяВложенность Тогда
							Родитель.НомерКатегории = 0;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДанныеУзла = ВыбраннаяСтрокаДереваИзбранныхТоваров();

	Если Не ДанныеУзла.ЭтоНекорневойУзелДерева Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДанныеУзла.УзелДерева;
	
	Если ТипЗнч(ВыбранноеЗначение) =
			Тип("СправочникСсылка.ПалитраТоваровРМКПрисоединенныеФайлы") Тогда
		ТекущаяСтрока.ИзображениеЭлемента = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Элемент.Имя = "ИерархияТоваров" Тогда
		
		ИдентификаторЭлемента = ПараметрыПеретаскивания.Значение[0];
		ЭлементДерева = ИерархияТоваров.НайтиПоИдентификатору(ИдентификаторЭлемента);
		
		Если ЭлементДерева = КореньДерева() Тогда
			Выполнение = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементДерева.ВидМодификатора) Тогда
			Выполнение = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Элемент.Имя = "ИерархияТоваров" Тогда
		
		ИдентификаторЭлемента = ПараметрыПеретаскивания.Значение[0];
		ЭлементДерева = ИерархияТоваров.НайтиПоИдентификатору(ИдентификаторЭлемента);
		ИдентификаторРодителя = Строка;
		КорневойЭлемент = КореньДерева();
		
		Если ИдентификаторРодителя = Неопределено Тогда
			ИдентификаторРодителя = КорневойЭлемент.ПолучитьИдентификатор();
		КонецЕсли;
		
		РодительскийЭлемент = ИерархияТоваров.НайтиПоИдентификатору(ИдентификаторРодителя);
		
		Если Не
			(ЭлементДерева = Неопределено ИЛИ РодительскийЭлемент = Неопределено) Тогда
			
			Если ЭлементДерева.ЭтоКатегория Тогда
				
				Если (РодительскийЭлемент.ПолучитьРодителя() = ЭлементДерева)
					Или (Не (РодительскийЭлемент.ЭтоКатегория
							Или РодительскийЭлемент.ПолучитьРодителя() = ЭлементДерева.ПолучитьРодителя()))
					Или (РодительскийЭлемент = КорневойЭлемент) Тогда
					
						ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
						СтандартнаяОбработка = Ложь;
						
				КонецЕсли;
				
			ИначеЕсли Не РодительскийЭлемент.ЭтоКатегория ИЛИ РодительскийЭлемент = КорневойЭлемент Тогда
				ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Элемент.Имя = "ИерархияТоваров" Тогда
		
		ИдентификаторЭлемента = ПараметрыПеретаскивания.Значение[0];
		ЭлементДерева = ИерархияТоваров.НайтиПоИдентификатору(ИдентификаторЭлемента);
		
		ИдентификаторРодителя = Строка;
		РодительскийЭлемент = ИерархияТоваров.НайтиПоИдентификатору(ИдентификаторРодителя);
		
		Если Не
			(ЭлементДерева = Неопределено ИЛИ РодительскийЭлемент = Неопределено) Тогда
			
			Если НЕ ЭлементДерева.ЭтоКатегория Тогда
				
				ВложенныеЭлементы = ЭлементДерева.ПолучитьЭлементы();
				Если ВложенныеЭлементы.Количество() = 0 Тогда
					
					ИмеютсяГрупповыеИдентификаторы = Ложь;
					ЭлементыРодителя = РодительскийЭлемент.ПолучитьЭлементы();
					Для Каждого ЭлементРодителя Из ЭлементыРодителя Цикл
						Если ЗначениеЗаполнено(ЭлементРодителя.ВидМодификатора) Тогда
							ИмеютсяГрупповыеИдентификаторы = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					ЭлементДерева.ИмеетсяВложенность = ИмеютсяГрупповыеИдентификаторы;
					Если Не ИмеютсяГрупповыеИдентификаторы Тогда
						ЭлементДерева.НомерКатегории = 0;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = ТекущаяСтрокаДереваТоваров();

	Если Не ТекущаяСтрока = Неопределено Тогда
		
		Номенклатура = ТекущаяСтрока.Номенклатура;
		ХарактеристикиИспользуются = ПроверитьПрименениеХарактеристикДляНоменклатуры(Номенклатура);
		ТекущаяСтрока.ХарактеристикиИспользуются = ХарактеристикиИспользуются;
		ТекущаяСтрока.Характеристика = Неопределено;
		ТекущаяСтрока.Упаковка = Неопределено;
		ОбщегоНазначенияРМККлиент.ЗаполнитьИмяЭлементаВСтрокеСоставаПалитры(ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = ТекущаяСтрокаДереваТоваров();
	ОбщегоНазначенияРМККлиент.ЗаполнитьИмяЭлементаВСтрокеСоставаПалитры(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = ТекущаяСтрокаДереваТоваров();
	Если Не ТекущаяСтрока = Неопределено Тогда
		
		Номенклатура = ТекущаяСтрока.Номенклатура;
		
		ПараметрыВыбораХарактеристики = Новый Структура;
		ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьПараметрыВыбораХарактеристик(ПараметрыВыбораХарактеристики,
			Номенклатура, СтандартнаяОбработка);
			
			Если Не СтандартнаяОбработка Тогда
				ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора",
					ПараметрыВыбораХарактеристики,
					Элемент);
			КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровИзображениеЭлементаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьПросмотретьИзображениеПозиции();
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровВидМодификатораПриИзменении(Элемент)
	
	ТекущаяСтрока = ТекущаяСтрокаДереваТоваров();
	
	Если Не ТекущаяСтрока = Неопределено Тогда
		
		КореньДерева = КореньДерева();
		РодительМодификатора = ТекущаяСтрока.ПолучитьРодителя();
		
		Если ТекущаяСтрока.ЭтоКатегория ИЛИ (ТекущаяСтрока.ПолучитьЭлементы().Количество() > 0) ИЛИ 
			РодительМодификатора = КореньДерева ИЛИ ТекущаяСтрока = КореньДерева Тогда
			ТекущаяСтрока.ВидМодификатора = ПредопределенноеЗначение("Перечисление.ВидыМодификаторовРМК.ПустаяСсылка");
			Возврат;
		КонецЕсли;
		
		Если НЕ РодительМодификатора = Неопределено И РодительМодификатора.ЭтоКатегория Тогда
			ВложенныеЭлементы = РодительМодификатора.ПолучитьЭлементы();
			Для Каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл
				Если НЕ ЗначениеЗаполнено(ВложенныйЭлемент.ВидМодификатора) И Не ВложенныйЭлемент.ЭтоКатегория Тогда
					ВложенныйЭлемент.ИмеетсяВложенность = Истина;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекущаяСтрока.ВидМодификатора) Тогда
			ТекущаяСтрока.ВидМодификатора = ПредопределенноеЗначение("Перечисление.ВидыМодификаторовРМК.ВключатьВЧек")
		КонецЕсли;
		
		Родитель = ТекущаяСтрока.ПолучитьРодителя();
		Если Родитель.ЭтоКатегория Тогда
			ОсталисьГрупповыеМодификаторы = Ложь;
			ВложенныеЭлементыРодителя = Родитель.ПолучитьЭлементы();
			Для Каждого ВложенныйЭлементРодителя Из ВложенныеЭлементыРодителя Цикл
				Если ЗначениеЗаполнено(ВложенныйЭлементРодителя.ВидМодификатора) Тогда
					ОсталисьГрупповыеМодификаторы = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ВложенныйЭлементРодителя Из ВложенныеЭлементыРодителя Цикл
				Если ВложенныйЭлементРодителя.ЭтоКатегория Тогда
					Продолжить;
				КонецЕсли;
				
				ИмеетсяВложенность = (ВложенныйЭлементРодителя.ПолучитьЭлементы().Количество() > 0 
					ИЛИ ОсталисьГрупповыеМодификаторы) И НЕ ЗначениеЗаполнено(ВложенныйЭлементРодителя.ВидМодификатора);
				ВложенныйЭлементРодителя.ИмеетсяВложенность = ИмеетсяВложенность;
				Если НЕ ИмеетсяВложенность Тогда
					ВложенныйЭлементРодителя.НомерКатегории = 0;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
			
		НомерИзображения = 2;
		Если ТекущаяСтрока.ВидМодификатора = ПредопределенноеЗначение("Перечисление.ВидыМодификаторовРМК.ВключатьВЧек") Тогда
			НомерИзображения = 3;
			ТекущаяСтрока.ЦветФона = ЦветаФормы.ЗеленаяКнопка;
			ТекущаяСтрока.ИмеетсяВложенность = Ложь;
			ТекущаяСтрока.НомерКатегории = 0;
		ИначеЕсли ТекущаяСтрока.ВидМодификатора = ПредопределенноеЗначение("Перечисление.ВидыМодификаторовРМК.НеВключатьВЧек") Тогда
			НомерИзображения = 4;
		ИначеЕсли ТекущаяСтрока.ЭтоКатегория  Тогда
			НомерИзображения = 1;
		Иначе
			ТекущаяСтрока.ЦветФона = ЦветаФормы.АктивнаяКнопка;
		КонецЕсли;
		
		ТекущаяСтрока.НомерИзображения = НомерИзображения;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = ТекущаяСтрокаДереваТоваров();
	Если Не ТекущаяСтрока = Неопределено Тогда
		
		Номенклатура = ТекущаяСтрока.Номенклатура;
		
		ПараметрыВыбораУпковки = Новый Структура;
		ПараметрыВыбораУпковки.Вставить("Номенклатура", Номенклатура);;
		
		ОбщегоНазначенияРМККлиентПереопределяемый.ОткрытьФормуВыбораУпаковки(
			ПараметрыВыбораУпковки, Элемент, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = ТекущаяСтрокаДереваТоваров();
	ОбщегоНазначенияРМККлиент.ЗаполнитьИмяЭлементаВСтрокеСоставаПалитры(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьДобавленияМодификатора();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУстройстваРаспознаванияЭлектронныхВесов

&НаКлиенте
Процедура УстройстваРаспознаванияЭлектронныхВесовПриИзменении(Элемент)
	
	ИзмененаТаблицаУстройствРаспознаванияЭлектронныхВесов = Истина;
	УстановитьДоступностьНастроекРаспознавания();
	
КонецПроцедуры

&НаКлиенте
Процедура УстройстваРаспознаванияЭлектронныхВесовЭлектронныеВесыНачалоВыбора(Элемент,
	ДанныеВыбора,
	СтандартнаяОбработка)

	ЭлектронныеВесыДляВыбора = ДоступныеЭлектронныеВесы.ВыгрузитьЗначения();
	ТаблицаУстройствРаспознаванияТекущаяСтрока = Элементы.УстройстваРаспознаванияЭлектронныхВесов.ТекущаяСтрока;
	Для Каждого СтрокаОборудования Из УстройстваРаспознаванияЭлектронныхВесов Цикл
		Если ЗначениеЗаполнено(СтрокаОборудования.ЭлектронныеВесы)
				И Не СтрокаОборудования.ПолучитьИдентификатор() = ТаблицаУстройствРаспознаванияТекущаяСтрока Тогда
			
			ИндексЭлемента = ЭлектронныеВесыДляВыбора.Найти(СтрокаОборудования.ЭлектронныеВесы);
			Если Не ИндексЭлемента = Неопределено Тогда
				ЭлектронныеВесыДляВыбора.Удалить(ИндексЭлемента);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	КолонкаЭлектронныеВесы = Элементы.УстройстваРаспознаванияЭлектронныхВесовЭлектронныеВесы;
	КолонкаЭлектронныеВесы.СписокВыбора.ЗагрузитьЗначения(ЭлектронныеВесыДляВыбора);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоОбластейФормыРМК

&НаКлиенте
Процедура ДеревоОбластейФормыРМКПриИзменении(Элемент)
	
	ПересчитатьПорядокОбластейСхемыРМК();
	ПоказатьСхемуФормыРМК();
	АктуализироватьДоступностьКнопкиСбросаПорядкаОбластей();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ИерархияТоваров

&НаКлиенте
Процедура ВыбратьИзображениеИзПрисоединенныхФайлов(Команда)
	
	ДанныеУзла = ВыбраннаяСтрокаДереваИзбранныхТоваров();
	
	Если Не ДанныеУзла.ЭтоНекорневойУзелДерева Тогда
	
		ПоказатьПредупреждение(, 
			НСтр("ru = 'Выберите строку для выбора изображения из присоединенных файлов.'"),
			, НСтр("ru = 'Выбор изображения из присоединенных файлов'"));
		Возврат;
		
	КонецЕсли;
	
	РаботаСФайламиКлиент.ОткрытьФормуВыбораФайлов(НастройкаРМК.СтруктураБыстрыхТоваров, Элементы.ИерархияТоваров);
	ИзмененСоставПалитрыИзбранных = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	ДобавитьИзображениеКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКатегорию(Команда)
	
	ТекущаяСтрока = ТекущаяСтрокаДереваТоваров();
	ТекущаяГруппа = ПолучитьБлижайшуюГруппу(ТекущаяСтрока);
	ИдентификаторГруппы = ТекущаяГруппа.ПолучитьИдентификатор();
	ЭлементыГруппы = ТекущаяГруппа.ПолучитьЭлементы();
	
	НоваяКатегория = ЭлементыГруппы.Добавить();
	НоваяКатегория.ЭтоКатегория = Истина;
	НоваяКатегория.НомерИзображения = 1;
	НоваяКатегория.ЦветФона = ЦветаФормы.ПапкаКнопка;
	
	Элементы.ИерархияТоваров.Развернуть(ИдентификаторГруппы);
	Элементы.ИерархияТоваров.ТекущаяСтрока = НоваяКатегория.ПолучитьИдентификатор();
	
	ИзмененСоставПалитрыИзбранных = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображение(Команда)
	
	ДанныеУзла = ВыбраннаяСтрокаДереваИзбранныхТоваров();
	
	Если НЕ ДанныеУзла.ЭтоНекорневойУзелДерева Тогда
		
		ПоказатьПредупреждение(, 
			НСтр("ru = 'Выберите строку для редактирования изображения из присоединенных файлов.'"),
			, НСтр("ru = 'Редактирование изображение'") );
		Возврат
		
	КонецЕсли;
	
	ТекущаяСтрока = ДанныеУзла.УзелДерева;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ИзображениеЭлемента) Тогда
		РаботаСФайламиКлиент.ОткрытьФормуФайла(ТекущаяСтрока.ИзображениеЭлемента);
		ИзмененСоставПалитрыИзбранных = Истина;
	Иначе
		
		ПоказатьПредупреждение(,
			НСтр("ru = 'Отсутствует изображение для редактирования.'"),
			, НСтр("ru = 'Редактирование изображение'") );
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбора(Команда)
	
	ЗаголовокФормыПодбора = СтрШаблон(НСтр("ru = 'Подбор товаров в структуру плиточного интерфейса подбора %1'"),
			?(ЗначениеЗаполнено(НастройкаРМК.СтруктураБыстрыхТоваров),
				НастройкаРМК.СтруктураБыстрыхТоваров,
				НСтр("ru = ''")));
				
	ОповещениеОВыборе = Новый ОписаниеОповещения("ЗавершениеОбработкиПодбораТоваров", ЭтотОбъект);
				
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Заголовок", ЗаголовокФормыПодбора);
	ПараметрыОткрытия.Вставить("КлючУникальности", УникальныйИдентификатор);

	ОбщегоНазначенияРМККлиент.ЗаполнитьПараметрыОткрытияФормыПодбораВСоставПалитрыТоваров(ПараметрыОткрытия);
	ОбщегоНазначенияРМККлиент.ОткрытьИнтерфейсПодбораНоменклатуры(ЭтотОбъект, ПараметрыОткрытия, ОповещениеОВыборе);
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	ПросмотретьПрисоединенныйФайл();
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеКатегории(Команда)
	
	Корень = КореньДерева();
	РазвернутьВетви = Истина;
	Элементы.ИерархияТоваров.Развернуть(Корень.ПолучитьИдентификатор(), РазвернутьВетви);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсеКатегории(Команда)
	
	Корень = КореньДерева();
	Ветви = Корень.ПолучитьЭлементы();
	
	Для Каждого Ветвь Из Ветви Цикл
	
		Если Ветвь.ЭтоКатегория Тогда
			Элементы.ИерархияТоваров.Свернуть(Ветвь.ПолучитьИдентификатор());
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьИзображение(Команда)
	
	ДанныеУзла = ВыбраннаяСтрокаДереваИзбранныхТоваров();

	Если Не ДанныеУзла.ЭтоНекорневойУзелДерева Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДанныеУзла.УзелДерева;
		
	РаботаСФайламиКлиент.ОткрытьФормуВыбораФайлов(ТекущаяСтрока.Номенклатура,
		Элементы.ИерархияТоваров);
	ИзмененСоставПалитрыИзбранных = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПримерЗаполненияПанели(Команда)
	
	Если Не Элементы.Предпросмотр.Пометка Тогда
		Если Не ИерархияТоваровПустая(ИерархияТоваров) Тогда
			Если ИзмененСоставПалитрыИзбранных Тогда
				ОповещениеОбОтвета = Новый ОписаниеОповещения("ОбработатьОтветСохраненияБыстрыхТоваровДляПоказа", ЭтотОбъект);
				ТекстВопроса = НСтр("ru = 'Перед просмотром палитра быстрых товаров будет записана. Продолжить?'");
				ПоказатьВопрос(ОповещениеОбОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Иначе
				СформироватьПримерЗаполненияПанелиКлиент();
			КонецЕсли;
		КонецЕсли;
	Иначе
		СформироватьПримерЗаполненияПанелиКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзображение(Команда)
	
	ДанныеУзла = ВыбраннаяСтрокаДереваИзбранныхТоваров();
	
	Если Не ДанныеУзла.ЭтоНекорневойУзелДерева Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДанныеУзла.УзелДерева;
	
	ИмяЭлемента = "Справочник.ПалитраТоваровРМКПрисоединенныеФайлы.ПустаяСсылка";
	ТекущаяСтрока.ИзображениеЭлемента = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(ИмяЭлемента);
	ИзмененСоставПалитрыИзбранных = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПалитру(Команда)
	ДобавитьПалитруКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМодификатор(Команда)
	ДобавитьМодификаторКлиент();
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПерейтиКПросмотруНастройки(Команда)
	
	ТекущиеДанные = Элементы.СписокНастроек.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.Свойство("Ссылка") Тогда
	
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.ГруппаНастройки);
		УстановитьЗначениеНастройки(ТекущиеДанные.Ссылка);
		
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите настройку для просмотра'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСпискуНастроек(Команда)
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.ГруппаВыбораНастроек);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНастройкуДляТекущегоРабочегоМеста(Команда)
	
	ТекущиеДанныеСпискаНастроек = Элементы.СписокНастроек.ТекущиеДанные;
	ЗначениеНастройки = Неопределено;
	
	Если НЕ ТекущиеДанныеСпискаНастроек = Неопределено
		И ТекущиеДанныеСпискаНастроек.Свойство("Ссылка", ЗначениеНастройки)
		И ЗначениеЗаполнено(ЗначениеНастройки) Тогда
		
			ОбщегоНазначенияРМКВызовСервера.УстановитьНастройкуРМКДляТекущегоРабочегоМеста(ЗначениеНастройки);
			Элементы.СписокНастроек.Обновить();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиРМК(Команда)
	
	ИнтерфейсРМКСлужебныйКлиент.ПронумероватьИерархиюПалитрыТоваров(ИерархияТоваров);
	РезультатВыполнения = СохранитьНастройкиРМКНаСервере();
	
	Если НЕ РезультатВыполнения.ВыполненоУспешно Тогда
		ПоказатьПредупреждение(, РезультатВыполнения.ТекстПредупрежденийОшибок);
	Иначе
		
		ПараметрыОповещения = Новый Структура();
		ПараметрыОповещения.Вставить("РабочееМестоКассираУспешноНастроено", Истина);
		ОткрытаФормаСписка = Ложь;
		Если ЭтаФорма.ВладелецФормы <> Неопределено
			И Найти(ЭтаФорма.ВладелецФормы.ИмяФормы, НСтр("ru = 'ФормаСписка'")) > 0 Тогда
			ОткрытаФормаСписка = Истина;
		КонецЕсли;
		ПараметрыОповещения.Вставить("ОткрытаФормаСписка", ОткрытаФормаСписка);
		Оповестить("РабочееМестоКассираУспешноНастроено", ПараметрыОповещения, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСинхронизацииДанных(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		
		МодульОбменДаннымиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбменДаннымиКлиент");
		МодульОбменДаннымиКлиент.ОткрытьНастройкиСинхронизацииДанных();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомощникНастройкиОбмена(Команда)
	ОбщегоНазначенияРМККлиентПереопределяемый.ОткрытьПомощникНастройкиОбмена();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	
	ТекстСообщенияПользователю = НСтр("ru = ''");
	
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		
		ИсходныеДанные = НастройкаРМК;
		ПараметрыПроверкиПодключения = ИсходныеДанныеДляПроверкиДоступностиСервераЛояльности(ИсходныеДанные);
		АдресСервера = ПараметрыПроверкиПодключения.АдресСервера;
		
		Если НЕ ЗначениеЗаполнено(АдресСервера) Тогда
			
			СтрокаСообщения = НСтр("ru = 'Не заполнен адрес сервера лояльности.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения,, "НастройкаРМК.АдресСервераЛояльности");
			Возврат;
			
		КонецЕсли;
		
		ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаПроверитьПодключениеКСерверуЛояльности(ПараметрыПроверкиПодключения);
		РезультатПроверки = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
		
		ТекстСообщенияПользователю = ?(РезультатПроверки.ЕстьОшибки,
			РезультатПроверки.ТекстОшибки,
			НСтр("ru = 'Соединение с сервером успешно установлено.'"));
			
	Иначе
		
		ТекстСообщенияПользователю =
			НСтр("ru = 'Пожалуйста, включите использование сервера лояльности перед проверкой подключения к серверу.'");
			
	КонецЕсли;
		
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияПользователю);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПарольСервераЛояльности(ТекущаяНастройкаРМК)
	Возврат ОбщегоНазначенияРМК.ПарольСервераЛояльности(ТекущаяНастройкаРМК);
КонецФункции

&НаКлиенте
Процедура ВыгрузитьНастройкиВФайл(Команда)
	
	Если НастройкаРМК.Ссылка.Пустая() Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Сначала сохраните настройку.'"));
		Возврат;
		
	КонецЕсли;
	
	ВыбратьФайлНаКлиенте(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПалитруИзбранныхВФайл(Команда)
	ВыгрузитьПалитры(Истина, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПалитруПлиткиВФайл(Команда)
	ВыгрузитьПалитры(Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПалитруИзбранныхИПлиткиВФайл(Команда)
	ВыгрузитьПалитры(Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКонтрольПродаж(Команда)
	ВыбратьФайлНаКлиенте(Ложь, , Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайла(Команда)
	ВыбратьФайлНаКлиенте(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонтрольПродаж(Команда)
	
	ОткрытьФорму("Справочник.КонтрольПродаж.Форма.ФормаСписка", , ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПодключенияКЕГАИС(Команда)
	ОткрытьФорму("РегистрСведений.НастройкиОбменаЕГАИС.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ВестиСведенияДляДекларацийПоАлкогольнойПродукцииПриИзменении(Элемент)
	АктуализироватьДоступностьКонтроляИспользованияКалендарныхЗапретовПродаж(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОплатуСертификатамиНСПКПриИзменении(Элемент)
	
	ИспользоватьОплатуСертификатамиНСПКПриИзмененииСервер();
	
	Если ИспользоватьОплатуСертификатамиНСПК Тогда
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресСервисаНСПКПриИзменении(Элемент)
	АдресСервисаНСПКПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКонтрольПродажПриИзменении(Элемент)
	
	ИспользоватьКонтрольПродажПриИзмененииСервер();
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаКлиенте
Процедура АнализШтрихкодов(Команда)
	ОткрытьФорму("ОбщаяФорма.АнализШтрихкодов");
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	НастройкаЗавершена = ВладелецФормы.НастройкаЗавершена;
	
	Если (НЕ ЗначениеЗаполнено(НастройкаРМК.Ссылка) ИЛИ Модифицированность) И НастройкаЗавершена Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Перед переходом на следующую страницу, сохраните настройку'"));
		Возврат;
		
	КонецЕсли;
	ВладелецФормы.ВыполнитьДействияПереходаНаСтраницу(1);
	ЗакрытиеФормыПомощникРМК = НастройкаЗавершена;
	Если НастройкаЗавершена Тогда
		ВладелецФормы.ФормаРМКОткрыта = Ложь;
		Закрыть();
	КонецЕсли;
	ПорядковыйНомер = ВладелецФормы.ПорядковыйНомерНастройки;
	Если ПорядковыйНомер = 0 Тогда
		ВосстановитьНастройкиЭлементовФормы();
	Иначе
		НастроитьВидимостьЭлементовПриПереходеНаСтраницу();
	КонецЕсли;
	ИндикаторИсполнения = ВладелецФормы.ИндикаторИсполнения;
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	ВладелецФормы.ВыполнитьДействияПереходаНаСтраницу(-1);
	НастройкаЗавершена = ВладелецФормы.НастройкаЗавершена;
	ПорядковыйНомер = ВладелецФормы.ПорядковыйНомерНастройки;
	НастроитьВидимостьЭлементовПриПереходеНаСтраницу();
	ИндикаторИсполнения = ВладелецФормы.ИндикаторИсполнения;
	ЗакрытиеФормыПомощникРМК = ПорядковыйНомер = 0;
	Если ПорядковыйНомер = 0 Тогда
		ВладелецФормы.ФормаРМКОткрыта = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПродаж(Команда)
	
	Если НЕ ЗначениеЗаполнено(НастройкаРМК.Ссылка) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Сначала сохраните настройку.'"));
		Возврат;
		
	КонецЕсли;

	ОбщегоНазначенияРМККлиентПереопределяемый.ОткрытьНастройкиРаспределенияПродаж();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗаменуТоваровПриИзменении(Элемент)
	
	ИспользоватьЗаменуТоваровПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура БИПНастройкаСБП(Команда)
	
	МодульСистемаБыстрыхПлатежейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СистемаБыстрыхПлатежейКлиент");
	МодульСистемаБыстрыхПлатежейКлиент.НастройкиПодключения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БИПНастройкаОнлайнОплат(Команда)

	МодульОнлайнОплатыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОнлайнОплатыКлиент");
	МодульОнлайнОплатыКлиент.НастройкаОнлайнОплат(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельАдминистрированияБСПОрганайзер(Команда)
	ОткрытьФорму("Обработка.ПанельАдминистрированияБСП.Форма.Органайзер");
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСервераЛояльности(Команда)
	АктивизироватьПолеНастроекАдресСервераЛояльности();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокСкладовДляПродажи(Команда)
	ОбщегоНазначенияРМККлиентПереопределяемый.ОткрытьВыборСкладовДляПродажи(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КонвертироватьНастройкиСтарогоРМК(Команда)
	КонвертироватьНастройкиСтарогоРМКСервер();
КонецПроцедуры

&НаКлиенте
Процедура ЭквайринговыеТерминалы(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтандартнаяОбработка = Истина;
	ОбщегоНазначенияРМККлиентПереопределяемый.ОткрытьФормуНастройкиЭквайринга(СтруктураПараметров, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПанельВводаНаличных(Команда)
	ТекущийЭлемент = Элементы.НастройкаРМКВводНаличных;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаполнитьПоШаблону(Команда)
	
	УстановитьСценарийНачало(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРезервноеКопирование(Команда)
	
	ОткрытьФорму(
		"Обработка.ПанельАдминистрированияБСП.Форма.Обслуживание",
		Новый Структура("Раздел", "РезервноеКопированиеИВосстановление"),
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомбинацииГорячихКлавиш(Команда)
	ТабличныйДокумент = СформироватьТабличныйДокументГорячихКлавиш();
	ТабличныйДокумент.Показать(НСтр("ru='Комбинации горячих клавиш'"));
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЖурналДействийКассира(Команда)
	
	ПараметрыОткрытия = Новый Структура("Отбор", Новый Структура("РабочееМесто", НастройкаРМК.РабочееМесто));
	
	ОткрытьФорму("РегистрСведений.ЖурналДействийКассира.ФормаСписка",
		ПараметрыОткрытия, ЭтотОбъект, , , , ,РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЖурналДействийКассиров(Команда)
	
	ОчиститьЖурналДействийКассировКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеОчисткиЖурналаДействийКассиров(Команда)
	
	НастроитьРасписаниеОчистки(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКонтроляКодовИСМП(Команда)
	СтандартнаяОбработка = Истина;
	ОбщегоНазначенияРМККлиентПереопределяемый.ОткрытьНастройкиИСМП(СтандартнаяОбработка);

	Если СтандартнаяОбработка Тогда
		Если ОбщегоНазначенияРМККлиент.ПодсистемаГосИССуществует(Этотобъект) Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ВызовИзРМК", Истина);
			
			ОткрытьФорму("ОбщаяФорма.НастройкиСканированияКодовМаркировки", ПараметрыФормы);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВвестиКлючАвторизации(Команда)
	СтандартнаяОбработка = Истина;
	ОбщегоНазначенияРМККлиентПереопределяемый.ОткрытьФормуТокенаАвторизацииИСМП(СтандартнаяОбработка);

	Если СтандартнаяОбработка Тогда
		Если ОбщегоНазначенияРМККлиент.ПодсистемаГосИССуществует(Этотобъект) Тогда
			ОткрытьФорму("РегистрСведений.ДанныеКлючаСессииИСМП.Форма.ФормаПросмотраИАктуализацииТокеновАвторизации");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокCDNПлощадок(Команда)
	СтандартнаяОбработка = Истина;
	ОбщегоНазначенияРМККлиентПереопределяемый.ОткрытьФормуСпискаCDNПлощадок(СтандартнаяОбработка);

	Если СтандартнаяОбработка Тогда
		Если ОбщегоНазначенияРМККлиент.ПодсистемаГосИССуществует(Этотобъект) Тогда
			ОткрытьФорму("РегистрСведений.СостоянияCDNПлощадокИСМП.ФормаСписка");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеЛогированияЗапросовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработкаНавигационнойСсылкиЛогирования(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеЛогированияЗапросовРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработкаНавигационнойСсылкиЛогирования(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОкноПриложения(Команда)
	ТекущийЭлемент = Элементы.НастройкаРМКВертикальнаяОриентация;
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройкиПорядкаОбластей(Команда)
	
	ВосстановитьНастройкиПорядкаОбластейКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КорректировкаОстаткаНаличных(Команда)
	
	ОбщегоНазначенияРМККлиент.ОткрытьИнтерфейсКорректировкиОстаткаНаличных();
	
КонецПроцедуры

&НаКлиенте
Процедура БИППодключитьКассовыйQRКод(Команда)
	
	ИнтеграцияСПлатежнымиСистемамиРМККлиентПереопределяемый.ОткрытьФормуНастройкиКассовогоQRКода(
		КассаПодключенияКодаСБП,
		Неопределено,
		Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИзбранныеПозиции

&НаКлиенте
Процедура ЗаполнитьИзбранныеТоварыИРазвернуть()
	
	ЗаполнитьИерархиюИзбранныхТоваров();
	
	КорневойЭлемент = КореньДерева();
	ИдентификаторКорня = КорневойЭлемент.ПолучитьИдентификатор();
	Элементы.ИерархияТоваров.Развернуть(ИдентификаторКорня, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПалитруТоваровРМК()

	Если ИерархияТоваровПустая(ИерархияТоваров) И Не ЗначениеЗаполнено(НастройкаРМК.СтруктураБыстрыхТоваров) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(НастройкаРМК.СтруктураБыстрыхТоваров) Тогда
		ТекущийОбъект = НастройкаРМК.СтруктураБыстрыхТоваров.ПолучитьОбъект();
	Иначе
		ТекущийОбъект = Справочники.ПалитраТоваровРМК.СоздатьЭлемент();
		ТекущийОбъект.Наименование = НСтр("ru = 'Палитра быстрых товаров'");
		ТекущийОбъект.ШрифтЭлементовПодбора = ОбщегоНазначения.ЗначениеВСтрокуXML(ШрифтыСтиля.ШрифтОбычныйПолужирный12РМК);
		ТекущийОбъект.КоличествоЭлементовВРяду = 4;
		ТекущийОбъект.КоличествоРядов = 3;
		ТекущийОбъект.ВысотаЭлемента = 5;
	КонецЕсли;
	
	СоставПалитры = ТекущийОбъект.Состав.ВыгрузитьКолонки();
	ЗаполнитьСоставПалитрыИзбранногоПоДаннымДерева(СоставПалитры);
	
	ТекущийОбъект.Состав.Очистить();
	ТекущийОбъект.Состав.Загрузить(СоставПалитры);
	ТекущийОбъект.Записать();
	ПостроитьОпорныеДанныеПалитрыИзбранного();
	
	НастройкаРМК.СтруктураБыстрыхТоваров = ТекущийОбъект.Ссылка;
	ИзмененСоставПалитрыИзбранных = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОбработкиПодбораТоваров(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ДанныеВыбора = ОбработатьПодборНаСервере(Результат);
		
		Если НЕ ДанныеВыбора = Неопределено Тогда
			
			ИдентификаторыПодобранныхЭлементов = ДанныеВыбора.ИдентификаторыЭлементов;
			
			Для Каждого Идентификатор Из ИдентификаторыПодобранныхЭлементов Цикл
				ЭлементДерева = ИерархияТоваров.НайтиПоИдентификатору(Идентификатор);
				ОбщегоНазначенияРМККлиент.ЗаполнитьИмяЭлементаВСтрокеСоставаПалитры(ЭлементДерева);
			КонецЦикла;
			
			Элементы.ИерархияТоваров.Развернуть(ДанныеВыбора.ИдентификаторРодителя);
			Элементы.ИерархияТоваров.ТекущаяСтрока = ДанныеВыбора.ИдентификаторПоследнегоВыбранногоЭлемента;
			Модифицированность = Истина;
			ИзмененСоставПалитрыИзбранных = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПодборНаСервере(ВыбранноеЗначение)
	
	Результат = Неопределено;
	Позиции = ЗначенияПодбора(ВыбранноеЗначение);
	
	Если Позиции.Количество() > 0 Тогда
		
		ТекущаяСтрока = ТекущаяСтрокаДереваТоваровСервер();
		
		Родитель = ТекущаяСтрока;
		
		Если НЕ ТекущаяСтрока.ЭтоКатегория Тогда
			
			Родитель = ТекущаяСтрока.ПолучитьРодителя();
			
			Если Родитель = Неопределено Тогда
				Родитель = КореньДереваСервер();
			КонецЕсли;
			
		КонецЕсли;
		
		ЭлементыДерева = Родитель.ПолучитьЭлементы();
		Результат = Новый Структура("ИдентификаторыЭлементов", Новый Массив);
		
		Для Каждого Позиция Из Позиции Цикл
		
			НовыйЭлемент = ЭлементыДерева.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, Позиция);
			НовыйЭлемент.ЭтоКатегория = Ложь;
			НовыйЭлемент.НомерИзображения = 2;
			НовыйЭлемент.Номенклатура = Позиция.Номенклатура;
			НовыйЭлемент.ИмяЭлемента = Позиция.Номенклатура;
			НовыйЭлемент.ЦветФона = ЦветаФормы.АктивнаяКнопка;
			ХарактеристикиИспользуются = ПроверитьПрименениеХарактеристикДляНоменклатуры(НовыйЭлемент.Номенклатура);
			НовыйЭлемент.ХарактеристикиИспользуются = ХарактеристикиИспользуются;
			
			Результат.ИдентификаторыЭлементов.Добавить(НовыйЭлемент.ПолучитьИдентификатор());
		
		КонецЦикла;
		
			Результат.Вставить("ИдентификаторРодителя", Родитель.ПолучитьИдентификатор());
			Результат.Вставить("ИдентификаторПоследнегоВыбранногоЭлемента", НовыйЭлемент.ПолучитьИдентификатор());
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТекущаяСтрокаДереваТоваровСервер()
	
	Результат = Неопределено;
	ИдентификаторТекущейСтроки = Элементы.ИерархияТоваров.ТекущаяСтрока;
	Если ТипЗнч(ИдентификаторТекущейСтроки) = Тип("Число") Тогда
		Результат = ИерархияТоваров.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗначенияПодбора(ИсходныеДанные)

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Номенклатура");
	Результат.Колонки.Добавить("Характеристика");
	Результат.Колонки.Добавить("Упаковка");
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьЗначенияПодбораДляПалитры(ИсходныеДанные, Результат);
	
	Возврат Результат;

КонецФункции

&НаСервере
Функция КореньДереваСервер()
	Возврат ИерархияТоваров.ПолучитьЭлементы()[0];
КонецФункции

&НаКлиенте
Функция КореньДерева()
	Возврат ИерархияТоваров.ПолучитьЭлементы()[0];
КонецФункции

&НаСервере
Процедура ЗаполнитьИерархиюИзбранныхТоваров(ИсходныеДанные = Неопределено)
	
	ИспользоватьХарактеристики = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьИспользованиеХарактеристик(ИспользоватьХарактеристики);
	
	ЭлементыДерева = ИерархияТоваров.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	ИсходныеДанные = НастройкаРМК.СтруктураБыстрыхТоваров;
	ИнтерфейсРМКСлужебный.ЗаполнитьИерархиюПалитрыТоваров(ИерархияТоваров, ИсходныеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПросмотретьИзображениеПозиции()
	
	Объект = НастройкаРМК.СтруктураБыстрыхТоваров;
	
	ДанныеУзла = ВыбраннаяСтрокаДереваИзбранныхТоваров();
	
	Если Не ДанныеУзла.ЭтоНекорневойУзелДерева Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект) Тогда
		ВыполнитьДействиеНадИзображениемПослеДобавленияПросмотра();
	Иначе
		
		ТекстВопроса = НСтр("ru = 'Перед выбором изображения необходимо записать объект. Продолжить?'");
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ПодтверждениеЗаписиЭлементаПриДобавленииПросмотреИзображения", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеЗаписиЭлементаПриДобавленииПросмотреИзображения(Ответ, Параметры) Экспорт
	
	Объект = НастройкаРМК.СтруктураБыстрыхТоваров;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		СохранитьНастройкиРМК(Команды.СохранитьНастройкиРМК);
		
		Если ЗначениеЗаполнено(Объект) Тогда
			ВыполнитьДействиеНадИзображениемПослеДобавленияПросмотра();
		КонецЕсли;
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'Невозможно выполнить действие без сохранения структуры.'");
		Заголовок = НСтр("ru = 'Добавление изображения'");
		ПоказатьПредупреждение(,ТекстПредупреждения, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеКлиент()
	
	Объект = НастройкаРМК.СтруктураБыстрыхТоваров;
	
	ДанныеУзла = ВыбраннаяСтрокаДереваИзбранныхТоваров();
	
	Если НЕ ДанныеУзла.ЭтоНекорневойУзелДерева Тогда
		
		ПоказатьПредупреждение(, 
			НСтр("ru = 'Выберите строку для назначения изображения.'"),
			, НСтр("ru = 'Добавление изображения'") );
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкаРМК.СтруктураБыстрыхТоваров) Тогда
		
		ТекстВопроса = НСтр("ru = 'Перед выбором изображения необходимо записать объект. Продолжить?'");
		ОбработчикОповещения = Новый ОписаниеОповещения("ПодтверждениеЗаписиЭлементаПриДобавленииИзображения", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ДобавитьИзображениеЭлементуСтруктуры();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПодтверждениеЗаписиЭлементаПриДобавленииИзображения(Ответ, Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаписатьПалитруТоваровРМК();
		
		Если ЗначениеЗаполнено(НастройкаРМК.СтруктураБыстрыхТоваров) Тогда
			ДобавитьИзображениеЭлементуСтруктуры();
		КонецЕсли;
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'Невозможно добавить изображение без сохранения структуры.'");
		Заголовок = НСтр("ru = 'Добавление изображения'");
		ПоказатьПредупреждение(,ТекстПредупреждения, Заголовок);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ВыбраннаяСтрокаДереваИзбранныхТоваров()
	
	Строка = ТекущаяСтрокаДереваТоваров();
	ЭтоНекорневойУзелДерева = Не(Строка = Неопределено И Строка = КореньДерева());
	
	Результат = Новый Структура();
	Результат.Вставить("ЭтоНекорневойУзелДерева", ЭтоНекорневойУзелДерева);
	Результат.Вставить("УзелДерева", Строка);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ТекущаяСтрокаДереваТоваров()
	
	Результат = Неопределено;
	Если Элементы.ИерархияТоваров.ТекущиеДанные <> Неопределено Тогда
		
		Идентификатор = Элементы.ИерархияТоваров.ТекущиеДанные.ПолучитьИдентификатор();
		Результат = ИерархияТоваров.НайтиПоИдентификатору(Идентификатор);
		
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

&НаКлиенте
Процедура ДобавитьПозицию()

	ДобавитьЭлементПалитры(ТипыЭлементовПалитры.Позиция);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЭлементуСтруктуры()
	
	Объект = НастройкаРМК.СтруктураБыстрыхТоваров;
	ОбъектСсылка = ОбщегоНазначенияРМКВызовСервера.ЗначениеРеквизитаОбъекта(Объект, "Ссылка");
	
	ЭтоВыборИзображения = Истина;
	ИдентификаторФайла = Новый УникальныйИдентификатор;
	РаботаСФайламиКлиент.ДобавитьФайлы(ОбъектСсылка, ИдентификаторФайла, РасширенияИзображений());
	ЭтоВыборИзображения = Ложь;
	ИзмененСоставПалитрыИзбранных = Истина;
	
КонецПроцедуры

&НаСервере
Функция РасширенияИзображений()
	
	ПереченьРасширений = СтрШаблон(НСтр("ru = 'Все изображения (%1)|%1"
		                            + "|Все файлы(*.*)|*.*"
		                            + "|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle"
		                            + "|Формат GIF(*.gif*)|*.gif"
		                            + "|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg"
		                            + "|Формат PNG(*.png*)|*.png"
		                            + "|Формат TIFF(*.tif)|*.tif"
		                            + "|Формат icon(*.ico)|*.ico"
		                            + "|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'"),
		"*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf");
	Возврат ПереченьРасширений;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьДействиеНадИзображениемПослеДобавленияПросмотра()
	
	Объект = НастройкаРМК.СтруктураБыстрыхТоваров;
	
	ТекущаяСтрока = ТекущаяСтрокаДереваТоваров();
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ИзображениеЭлемента) Тогда
		ПросмотретьПрисоединенныйФайл();
	ИначеЕсли ЗначениеЗаполнено(Объект) И НЕ ТолькоПросмотр Тогда
		ДобавитьИзображениеЭлементуСтруктуры();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл()
	
	ДанныеУзла = ВыбраннаяСтрокаДереваИзбранныхТоваров();

	Если Не ДанныеУзла.ЭтоНекорневойУзелДерева Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДанныеУзла.УзелДерева;
		
	Если ЗначениеЗаполнено(ТекущаяСтрока.ИзображениеЭлемента) Тогда
		
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущаяСтрока.ИзображениеЭлемента,
			УникальныйИдентификатор);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'Не найдено изображение для просмотра.'");
		ЗаголовокПредупреждения = НСтр("ru = 'Просмотр изображения'");
		ПоказатьПредупреждение(,ТекстПредупреждения, ЗаголовокПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПанельИзбранныхТоваров()
	
	АдресИзображенияУровеньВверх = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.УровеньВверх, ЭтотОбъект.УникальныйИдентификатор);
	АдресИзображенияУровеньВниз = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.УровеньВниз, ЭтотОбъект.УникальныйИдентификатор);
	
	ИсходныеДанныеГорячейКлавиши = Неопределено;
	ИнтерфейсРМКСлужебный.СформироватьЭлементыПанелиИзбранныхПозиций(ЭтотОбъект, ИсходныеДанныеГорячейКлавиши);
	
	Элементы.Предпросмотр.Пометка = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоставПалитрыИзбранногоПоДаннымДерева(Знач СоставПалитры = Неопределено)
	
	Если СоставПалитры = Неопределено Тогда
		СоставПалитры = НастройкаРМК.СтруктураБыстрыхТоваров.Состав.ВыгрузитьКолонки();
	КонецЕсли;
	
	ИнтерфейсРМКСлужебный.ЗаполнитьСоставПалитрыИзбранногоПоДаннымДерева(
		СоставПалитры, ИерархияТоваров, Истина);
		
	ШрифтСтрокой = НастройкаРМК.СтруктураБыстрыхТоваров.ШрифтЭлементовПодбора;
	
	Если Не ЗначениеЗаполнено(ШрифтСтрокой) Тогда
		ШрифтСтрокой = ОбщегоНазначения.ЗначениеВСтрокуXML(ШрифтыСтиля.ШрифтОбычныйПолужирный12РМК);
	КонецЕсли;
	
	СоставПалитры.ЗаполнитьЗначения(ШрифтСтрокой, "Шрифт");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИзбранноеВыбор(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НомерНажатой = Сред(Элемент.Имя, 21);
	НомерНажатой = Число(НомерНажатой);
	СтрокаНажатойКнопки = ДанныеКнопок.Получить(НомерНажатой);
	
	ТекущаяСтраницаКнопок = СтрокаНажатойКнопки.ПервыйИндексПлитки;
	НомерСтрокиДерева = ОпорныеДанные[ТекущаяСтраницаКнопок].НомерСтроки;
	
	ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
		"НомерСтроки", Элементы.ИерархияТоваров.ТекущаяСтрока, ИерархияТоваров.ПолучитьЭлементы(), НомерСтрокиДерева, Ложь);
	
	Если СтрокаНажатойКнопки.ЭтоКатегория Или СтрокаНажатойКнопки.ЭтоТекущаяКатегория Или СтрокаНажатойКнопки.ИмеетсяВложенность Тогда
		ЗаполнитьКнопки();
		ТекущийЭлемент = Элементы.ПанельИзбранныхТоваров;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКнопки()
	
	ИнтерфейсРМКСлужебныйКлиент.ЗаполнитьКнопкиИзбранныхПозиций(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура КонвертироватьНастройкиСтарогоРМКСервер()
	
	ОбщегоНазначенияРМК.КонвертироватьНастройкиСтарогоРМК(ЭтотОбъект);
	АктуализироватьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Функция ПечататьИнтегрированныйЧекЕГАИС()
	Возврат ОбщегоНазначенияРМК.ИспользоватьОбщийКодДляЧекаККТИЕГАИС();
КонецФункции

&НаСервере
Функция ФормироватьИнтегрированныйСлипЧек()
	Возврат ОбщегоНазначенияРМК.ФормироватьИнтегрированныйСлипЧек();
КонецФункции

&НаСервере
Функция ЛокальныйРасчетСкидокПоддерживаетПромокоды()
	Возврат ОбщегоНазначенияРМК.ЛокальныйРасчетСкидокПоддерживаетПромокоды();
КонецФункции 

&НаСервере
Функция ИменаПолейФлажков()

	Результат = Новый Массив();
	Результат.Добавить("НастройкаРМКСворачиватьСтрокиПриПечатиЧека");
	Результат.Добавить("НастройкаРМКДобавлятьВсеТоварыОтдельнойСтрокой");
	Результат.Добавить("НастройкаРМКОставлятьПоследнийЧекНаЭкране");
	Результат.Добавить("НастройкаРМКПродажиСНесколькихКассККМ");
	Результат.Добавить("НастройкаРМКИспользоватьРежимСкупки");
	Результат.Добавить("ИспользоватьРасширеннуюФормуПодбора");
	Результат.Добавить("НастройкаРМКЗакрыватьПодборПриВыбореТовара");
	Результат.Добавить("НастройкаРМКПоказыватьАртикулНоменклатуры");
	Результат.Добавить("НастройкаРМКПоказыватьКодНоменклатуры");
	Результат.Добавить("НастройкаРМКРазрешитьВыборПродавца");
	Результат.Добавить("ИспользоватьСерверЛояльностиПолучательДанных");
	Результат.Добавить("НастройкаРМКОтправлятьSMSКодПриЗаведенииКарты");
	Результат.Добавить("ОтправлятьSMSПриПоискеКартыПоНомеруТелефона");
	Результат.Добавить("ОтправлятьSMSПриОплатеБонусами");
	Результат.Добавить("ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	Результат.Добавить("НастройкаРМКОжидатьРезультатПроверкиМарок");
	Результат.Добавить("НастройкаРМККонтролироватьЕМРЦ");
	Результат.Добавить("ИспользоватьОплатуСертификатамиНСПК");
	Результат.Добавить("ИспользоватьЗаменуТоваров");
	Результат.Добавить("НастройкаРМКВопросПоРасчетуСкидок");
	Результат.Добавить("НастройкаРМКИспользоватьПромокоды");
	Результат.Добавить("НастройкаРМКРазрешитьВыборСклада");
	Результат.Добавить("НастройкаРМКВыдаватьНаличныеНаКассе");
	Результат.Добавить("НастройкаРМКЗавершатьСессиюКассираПослеПродажи");
	Результат.Добавить("НастройкаРМКИспользоватьПанельВводаНаличныхКупюр");
	Результат.Добавить("НастройкаРМКВыдаватьПодарокНаКассе");
	Результат.Добавить("НастройкаРМКРаботаВРежимеМедленногоСоединения");
	Результат.Добавить("НастройкаРМКВестиЖурналДействийКассира");
	Результат.Добавить("НастройкаРМКЗапретитьПробитиеЧекаБезРасчетаСкидок");
	Результат.Добавить("НастройкаРМКОбучатьУстройствоРаспознаванияВоВремяПродажи");
	Результат.Добавить("НастройкаРМКНеПечататьКодВозвратаСБП");
	Результат.Добавить("НастройкаРМКНеПечататьКодВозвратаНСПК");
	Результат.Добавить("НастройкаРМКНапоминатьПроВводКартыЛояльности");
	Результат.Добавить("ИспользоватьКонтрольПродаж");
	Возврат Результат;

КонецФункции

&НаСервере
Процедура УстановитьВидОтображенияБинарныхЭлементовИнтерфейса(ИменаЭлементов)
	
	Если ТипЗнч(ИменаЭлементов) = Тип("Массив") Тогда
		
		ВидОтображения = ОбщегоНазначенияРМККлиентСервер.ВидОтображенияБинарногоПоля();
		ПоложениеЗаголовкаЭлемента = ОбщегоНазначенияРМККлиентСервер.ПоложениеЗаголовкаЭлемента();
		
		Для Каждого ИмяЭлемента Из ИменаЭлементов Цикл
		
			Попытка
			
				ЭлементФормы = Элементы[ИмяЭлемента];
				
				Если ТипЗнч(ЭлементФормы) = Тип("ПолеФормы")
					И ЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка Тогда
					
						ЭлементФормы.ВидФлажка = ВидОтображения;
						ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлемента;
						
				КонецЕсли;
			
			Исключение
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Ошибка получения реквизита формы по имени'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Продолжить;
				
			КонецПопытки;
		
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	ИнтерфейсРМКСлужебный.УстановитьУсловноеОформлениеГорячихКлавиш(ЭтотОбъект);
	ИнтерфейсРМКСлужебный.УстановитьУсловноеОформлениеИерархииБыстрыхТоваров(ЭтотОбъект);
	ИнтерфейсРМКСлужебный.УстановитьУсловноеОформлениеДереваОбластейФормыРМК(ЭтотОбъект);
	ОбщегоНазначенияРМКПереопределяемый.НастроитьУсловноеОформлениеВНастройкахРМК(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеНастройки(ЗначениеНастройки)
	
	НастройкаОбъект = ЗначениеНастройки.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(НастройкаОбъект, "НастройкаРМК");
	ЗаполнитьДанныеПоНастройкеРМК(НастройкаОбъект.Ссылка);
	
КонецПроцедуры

&НаСервере
Функция СохранитьНастройкиРМКНаСервере()
	
	ПеренестиГорячиеКлавишиВТабличнуюЧастьОбъекта();
	СохранитьПорядокОбластей();
	Если ОтправлятьSMSПриПоискеКартыПоНомеруТелефона Тогда
		НастройкаРМК.ОтправлятьSMSКодПриПродаже = Перечисления.ВариантыОтправкиSMSПриПродаже.ПриВыборе;
	ИначеЕсли ОтправлятьSMSПриОплатеБонусами Тогда
		НастройкаРМК.ОтправлятьSMSКодПриПродаже = Перечисления.ВариантыОтправкиSMSПриПродаже.ПриОплатеБаллами;
	Иначе
		НастройкаРМК.ОтправлятьSMSКодПриПродаже = Перечисления.ВариантыОтправкиSMSПриПродаже.ПустаяСсылка();
	КонецЕсли;
	
	РезультатВыполнения = Новый Структура("ВыполненоУспешно,ТекстПредупрежденийОшибок", Истина, "");
	
	ОбъектНастройки = РеквизитФормыВЗначение("НастройкаРМК");
	
	Если НЕ ЗначениеЗаполнено(НастройкаРМК.Ссылка) Тогда
		
		Если КоличествоДоступныхНастроек > 0 Тогда
			
			ТекстПредупреждения =
				НСтр("ru = 'Невозможно создать еще одну настройку для текущего рабочего места
					|Пожалуйста, выберите подходящую настройку из существующих'");
			РезультатВыполнения.Вставить("ВыполненоУспешно", Ложь);
			РезультатВыполнения.Вставить("ТекстПредупрежденийОшибок", ТекстПредупреждения);
			
			Возврат РезультатВыполнения;
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(НастройкаРМК.Наименование) Тогда
				
				ТекстПредупреждения =
					НСтр("ru = 'Пожалуйста, укажите наименование для настройки.'");
				РезультатВыполнения.Вставить("ВыполненоУспешно", Ложь);
				РезультатВыполнения.Вставить("ТекстПредупрежденийОшибок", ТекстПредупреждения);
				
				Возврат РезультатВыполнения;
				
			КонецЕсли;
			
			ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
			
			Если НЕ НоваяНастройка Или НЕ ЗначениеЗаполнено(ОбъектНастройки.РабочееМесто) Тогда
				ОбъектНастройки.РабочееМесто = ТекущееРабочееМесто;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НастройкиДляПроверкиЗаполнения = НастройкиДляПроверкиЗаполнения();
	Для Каждого ПроверяемаяНастройка Из НастройкиДляПроверкиЗаполнения Цикл
		
		Если Не ЗначениеЗаполнено(НастройкаРМК[ПроверяемаяНастройка.ИмяНастройки]) Тогда
			
			РезультатВыполнения.Вставить("ВыполненоУспешно", Ложь);
			РезультатВыполнения.Вставить("ТекстПредупрежденийОшибок", ПроверяемаяНастройка.ТекстПредупреждения);
			Возврат РезультатВыполнения;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НастройкаРМК.ПродажиСНесколькихКассККМ И НЕ ЗначениеЗаполнено(НастройкаРМК.ОсновнаяКассаККМ) Тогда
		
		ТекстПредупреждения =
			НСтр("ru = 'Пожалуйста, выберите основную кассу ККМ.'");
		РезультатВыполнения.Вставить("ВыполненоУспешно", Ложь);
		РезультатВыполнения.Вставить("ТекстПредупрежденийОшибок", ТекстПредупреждения);
		
		Возврат РезультатВыполнения;
		
	КонецЕсли;
	
	Если ИспользоватьСерверЛояльностиПолучательДанных
			И (НЕ ЗначениеЗаполнено(НастройкаРМК.АдресСервераЛояльности)
				ИЛИ НЕ ЗначениеЗаполнено(НастройкаРМК.ПользовательСервераЛояльности)) Тогда
		
		ТекстПредупреждения =
			НСтр("ru = 'Пожалуйста, укажите адрес и пользователя сервера лояльности.'");
		РезультатВыполнения.Вставить("ВыполненоУспешно", Ложь);
		РезультатВыполнения.Вставить("ТекстПредупрежденийОшибок", ТекстПредупреждения);
		
		Возврат РезультатВыполнения;
		
	КонецЕсли;
	
	Если УстройстваРаспознаванияЭлектронныхВесов.Количество() > 0 Тогда
		ТекстПредупреждения = ПроверитьЗаполнениеКомплектацииОборудования();
		Если Не ТекстПредупреждения = "" Тогда
			РезультатВыполнения.Вставить("ВыполненоУспешно", Ложь);
			РезультатВыполнения.Вставить("ТекстПредупрежденийОшибок", ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияРМКПереопределяемый.ПриСохраненииНастроекРМК(ЭтотОбъект, РезультатВыполнения);
	Если НЕ РезультатВыполнения.ВыполненоУспешно Тогда
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Если НайденаЗацикленностьПалитрыБыстрыхТоваров(РезультатВыполнения) Тогда
			ОтменитьТранзакцию();
			Модифицированность = Истина;
			Возврат РезультатВыполнения;
		Иначе
			ЗаписатьНастройкиРМКНаСервере(ОбъектНастройки);
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		ОтменитьТранзакцию();
		Модифицированность = Истина;
		
		ТекстОшибки = НСтр("ru = 'Ошибка при записи настроек РМК.'");
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при записи настроек РМК.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		РезультатВыполнения.Вставить("ВыполненоУспешно", Ложь);
		РезультатВыполнения.Вставить("ТекстПредупрежденийОшибок", ТекстОшибки);
		Возврат РезультатВыполнения;
		
	КонецПопытки;
	
	Если ПарольСервераЛояльностиИзменен Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ОбъектНастройки.Ссылка,
			ПарольСервераЛояльности, "ПарольСервераЛояльности");
		УстановитьПривилегированныйРежим(Ложь);
		ПарольСервераЛояльности = ?(ЗначениеЗаполнено(ПарольСервераЛояльности), УникальныйИдентификатор, "");
		ПарольСервераЛояльностиИзменен = Ложь;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ОбъектНастройки, "НастройкаРМК");
	ОбновитьПодсказкуТаблицыГорячихКлавиш(ОбъектНастройки);
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Процедура ЗаписатьНастройкиРМКНаСервере(ОбъектНастройки)
	
	СохранитьРасписанияНастроек();
	Если ИзмененСоставПалитрыИзбранных Тогда
		ЗаписатьПалитруТоваровРМК();
	КонецЕсли;
	Если ИзмененаТаблицаУстройствРаспознаванияЭлектронныхВесов Тогда
		ЗаписатьУстройстваРаспознаванияЭлектронныхВесов();
	КонецЕсли;
	ОбъектНастройки.СтруктураБыстрыхТоваров = НастройкаРМК.СтруктураБыстрыхТоваров;
	
	ОбъектНастройки.Записать(); // АПК:566 - допустимый синхронный вызов
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Функция НайденаЗацикленностьПалитрыБыстрыхТоваров(РезультатВыполнения)
	
	РезультатФункции = Ложь;

	Если ЗначениеЗаполнено(НастройкаРМК.СтруктураБыстрыхТоваров) Тогда
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ПалитраТоваровРМК");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ПалитраСсылка = НастройкаРМК.СтруктураБыстрыхТоваров;
		ВложенныеПалитры = ПолучитьВложенныеПалитры();
		
		РезультатПроверки = ОбщегоназначенияРМК.ПолучитьРезультатПроверкиЗацикленностиПалитры(ПалитраСсылка,
			ВложенныеПалитры);
		Если РезультатПроверки.ЕстьЗацикливание Тогда
			РезультатВыполнения.Вставить("ВыполненоУспешно", Ложь);
			РезультатВыполнения.Вставить("ТекстПредупрежденийОшибок", РезультатПроверки.ТекстОшибки);
			РезультатФункции = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаСервере
Функция ПолучитьВложенныеПалитры()
	
	РезультатФункция = Новый Массив;
	ОбойтиСтрокиИерархииТоваров(ИерархияТоваров.ПолучитьЭлементы(), РезультатФункция);
	Возврат РезультатФункция;
	
КонецФункции

&НаСервере
Процедура ОбойтиСтрокиИерархииТоваров(СтрокиИерархии, ВложенныеПалитры)
	
	Для Каждого СтрокаТовара Из СтрокиИерархии Цикл
		Если ЗначениеЗаполнено(СтрокаТовара.Палитра) Тогда
			ВложенныеПалитры.Добавить(СтрокаТовара.Палитра);
		ИначеЕсли СтрокаТовара.ЭтоКатегория Тогда
			ОбойтиСтрокиИерархииТоваров(СтрокаТовара.ПолучитьЭлементы(), ВложенныеПалитры);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрефиксШтрихкодаВесовогоТовараПриИзмененииНаСервере()
	
	ИмяКонстанты = ОбщегоНазначенияРМК.ИмяКонстанты("ПрефиксШтрихкодаВесовогоТовара");
	СохранитьЗначениеКонстанты(ИмяКонстанты, ПрефиксШтрихкодаВесовогоТовара);
	
КонецПроцедуры

&НаСервере
Процедура ПрефиксШтрихкодаШтучногоТовараПриИзмененииНаСервере()
	
	ИмяКонстанты = ОбщегоНазначенияРМК.ИмяКонстанты("ПрефиксШтрихкодаФасованногоТовара");
	СохранитьЗначениеКонстанты(ИмяКонстанты, ПрефиксШтрихкодаШтучногоФасованногоТовара);
	
КонецПроцедуры

&НаСервере
Процедура ШаблонШтрихкодаТовараПриИзмененииНаСервере()
	
	ИмяКонстанты = ОбщегоНазначенияРМК.ИмяКонстанты("ШаблонШтрихкодаВесовыхТоваров");
	СохранитьЗначениеКонстанты(ИмяКонстанты, ШаблонШтрихкодаТовара);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиГорячиеКлавишиВТабличнуюЧастьОбъекта()
	
	НастройкаРМК.ГорячиеКлавиши.Очистить();
	Для Каждого СтрокаРаздела Из ДеревоГорячиеКлавиши.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаГорячейКлавиши Из СтрокаРаздела.ПолучитьЭлементы() Цикл
			
			НоваяСтрокаГорячейКлавиши = НастройкаРМК.ГорячиеКлавиши.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаГорячейКлавиши, СтрокаГорячейКлавиши, , "НомерСтроки");
			НоваяСтрокаГорячейКлавиши.ИмяКнопки = СтрокаГорячейКлавиши.ИмяЭлемента;
			НоваяСтрокаГорячейКлавиши.ЗаголовокКнопки = СтрокаГорячейКлавиши.Действие;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГорячиеКлавиши(ТекущаяНастройкаРМК)
	
	Макет = Справочники.НастройкиРабочегоМестаКассира.ПолучитьМакет("ГорячиеКлавиши");
	КолСтрок = Макет.ВысотаТаблицы;
	ИмяРаздела = "";
	СтрокаРаздела = Неопределено;
	НомераКолонок = НомераКолонокГорячихКлавиш();
	НомерНачальнойСтроки = 2;
	Если ДеревоГорячиеКлавиши.ПолучитьЭлементы().Количество() > 0 Тогда
		ДеревоГорячиеКлавиши.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	
	Для НомерСтрокиМакета = НомерНачальнойСтроки По КолСтрок Цикл
		
		ИмяРазделаМакета
			= Макет.Область(НомерСтрокиМакета, НомераКолонок.ИмяРаздела, НомерСтрокиМакета, НомераКолонок.ИмяРаздела).Текст;
		Если СтрокаРаздела = Неопределено Или Не ИмяРаздела = ИмяРазделаМакета Тогда
			ИмяРаздела = ИмяРазделаМакета;
			СтрокаРаздела = ДобавитьСтрокуРазделаГорячихКлавиш(ИмяРаздела);
		КонецЕсли;
		ОбластьЭлемента
			= Макет.Область(НомерСтрокиМакета, НомераКолонок.ИмяЭлемента, НомерСтрокиМакета, НомераКолонок.ИмяЭлемента);
		ИмяЭлемента = ОбластьЭлемента.Текст;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИмяКнопки", ИмяЭлемента);
		
		МассивСтрок = ТекущаяНастройкаРМК.ГорячиеКлавиши.НайтиСтроки(СтруктураПоиска);
		
		СтрокаНастройки = ?(МассивСтрок.Количество() = 0, Неопределено, МассивСтрок[0]);
		ДобавитьЭлементВРазделГорячихКлавиш(СтрокаРаздела, ИмяЭлемента, Макет, НомерСтрокиМакета, СтрокаНастройки);
		
	КонецЦикла;
	Элементы.ДеревоГорячиеКлавишиКлавиша.СписокВыбора.ЗагрузитьЗначения(МассивКлавиш());
	Элементы.НастройкаРМКВводНаличныхКлавиша.СписокВыбора.ЗагрузитьЗначения(МассивКлавиш());
	ОбновитьПодсказкуТаблицыГорячихКлавиш(ТекущаяНастройкаРМК);
	
КонецПроцедуры

&НаСервере
Функция ДобавитьСтрокуРазделаГорячихКлавиш(ИмяРаздела)
	
	СтрокаРаздела = ДеревоГорячиеКлавиши.ПолучитьЭлементы().Добавить();
	СтрокаРаздела.ИмяРаздела = ИмяРаздела;
	СтрокаРаздела.Действие = ИмяРаздела;
	Возврат СтрокаРаздела;
	
КонецФункции

&НаСервере
Процедура ДобавитьЭлементВРазделГорячихКлавиш(СтрокаРаздела, ИмяЭлемента, Макет, НомерСтрокиМакета, СтрокаНастройки)
	
	НомераКолонок = НомераКолонокГорячихКлавиш();
	СтрокаЭлемента = СтрокаРаздела.ПолучитьЭлементы().Добавить();
	Если СтрокаНастройки = Неопределено Тогда
		СтрокаЭлемента.Клавиша
			= Макет.Область(НомерСтрокиМакета, НомераКолонок.Клавиша, НомерСтрокиМакета, НомераКолонок.Клавиша).Текст;
		СтрокаЭлемента.АкселераторAlt
			= Булево(Макет.Область(НомерСтрокиМакета, НомераКолонок.Alt, НомерСтрокиМакета, НомераКолонок.Alt).Текст);
		СтрокаЭлемента.АкселераторCtrl
			= Булево(Макет.Область(НомерСтрокиМакета, НомераКолонок.Ctrl, НомерСтрокиМакета, НомераКолонок.Ctrl).Текст);
		СтрокаЭлемента.АкселераторShift
			= Булево(Макет.Область(НомерСтрокиМакета, НомераКолонок.Shift, НомерСтрокиМакета, НомераКолонок.Shift).Текст);
	Иначе
		ЗаполнитьЗначенияСвойств(СтрокаЭлемента, СтрокаНастройки);
	КонецЕсли;
	СтрокаЭлемента.Действие
			= Макет.Область(НомерСтрокиМакета, НомераКолонок.Действие, НомерСтрокиМакета, НомераКолонок.Действие).Текст;
	СтрокаЭлемента.НомерСтроки = НомерСтрокиМакета - 1;
	СтрокаЭлемента.ИмяЭлемента = ИмяЭлемента;
	
КонецПроцедуры

&НаСервере
Функция НомераКолонокГорячихКлавиш()
	
	НомераКолонок = Новый Структура;
	НомераКолонок.Вставить("ИмяРаздела", 1);
	НомераКолонок.Вставить("ИмяЭлемента", 2);
	НомераКолонок.Вставить("Действие", 3);
	НомераКолонок.Вставить("Клавиша", 4);
	НомераКолонок.Вставить("Alt", 5);
	НомераКолонок.Вставить("Ctrl", 6);
	НомераКолонок.Вставить("Shift", 7);
	Возврат НомераКолонок;
	
КонецФункции

&НаСервереБезКонтекста
Функция МассивКлавиш()
	
	МассивКлавиш = Новый Массив;
	
	// 0 ... 9
	Для Счетчик = 0 По 9 Цикл
		МассивКлавиш.Добавить(СтрШаблон("_%1", Счетчик));
	КонецЦикла;
	
	// A...Z
	Для Счетчик = 65 По 90 Цикл
		МассивКлавиш.Добавить(Символ(Счетчик));
	КонецЦикла;
	
	МассивКлавиш.Добавить(Строка(Клавиша.BackSpace));
	
	// F1..F12
	Для Счетчик = 1 По 12 Цикл
		МассивКлавиш.Добавить(СтрШаблон("F%1", Счетчик));
	КонецЦикла;
	
	// Num0 ... Num9 
	Для Счетчик = 0 По 9 Цикл
		МассивКлавиш.Добавить(СтрШаблон("Num%1", Счетчик));
	КонецЦикла;
	
	МассивКлавиш.Добавить(Строка(Клавиша.NumAdd));
	МассивКлавиш.Добавить(Строка(Клавиша.NumDecimal));
	МассивКлавиш.Добавить(Строка(Клавиша.NumDivide));
	МассивКлавиш.Добавить(Строка(Клавиша.NumMultiply));
	МассивКлавиш.Добавить(Строка(Клавиша.NumSubtract));
	МассивКлавиш.Добавить(Строка(Клавиша.Space));
	МассивКлавиш.Добавить(Строка(Клавиша.Нет));
	
	Возврат МассивКлавиш;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьНаСервере()
	
	НастройкаСинхронизацииСуществует = 
		ОбщегоНазначенияРМК.НастройкаСинхронизацииДанныхСуществует();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПомощникНастройкиОбмена",
		"Доступность",
		НЕ НастройкаСинхронизацииСуществует);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДекорацияКомментарийНоваяНастройкаОбмена",
		"Видимость",
		НастройкаСинхронизацииСуществует);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДекорацияОжиданиеИзмененияПрефикса",
		"Видимость",
		Ложь);
		
	ОчищатьПрефикс = НЕ НастройкаСинхронизацииСуществует;
	ТекущийПрефиксИБ = "";
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьТекущийПрефиксИБ(ОчищатьПрефикс, ТекущийПрефиксИБ);
	Если ЗначениеЗаполнено(ТекущийПрефиксИБ) И НЕ ТекущийПрефиксИБ = ПрефиксИнформационнойБазы Тогда
		ПрефиксИнформационнойБазы = ТекущийПрефиксИБ;
	КонецЕсли;
	
	Элементы.НастройкаРМКИспользоватьКассираКакПродавца.Доступность = НастройкаРМК.РазрешитьВыборПродавца И НЕ ДанныеОПродавцахНеПередаются;
	НастроитьЭлементыАвтоматическихСкидок();
КонецПроцедуры

&НаСервере
Процедура ОбновитьПодсказкуТаблицыГорячихКлавиш(ТекущаяНастройкаРМК)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяКнопки", "ОткрытьПанельИзбранныхТоваров");
	МассивСтрок = ТекущаяНастройкаРМК.ГорячиеКлавиши.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаГорячихКлавишИзбранного = МассивСтрок[0];
	
	Если (НЕ СтрокаГорячихКлавишИзбранного = Неопределено)
		И (СтрокаГорячихКлавишИзбранного.АкселераторAlt 
			ИЛИ СтрокаГорячихКлавишИзбранного.АкселераторCtrl
			ИЛИ СтрокаГорячихКлавишИзбранного.АкселераторShift)
		И НЕ ПустаяСтрока(СтрокаГорячихКлавишИзбранного.Клавиша) Тогда
		
		СоставляющаяCtrl = ?(СтрокаГорячихКлавишИзбранного.АкселераторCtrl, "Ctrl +", "");
		СоставляющаяAlt = ?(СтрокаГорячихКлавишИзбранного.АкселераторAlt, "Alt +", "");
		СоставляющаяShift = ?(СтрокаГорячихКлавишИзбранного.АкселераторShift, "Shift +", "");
		
		КомбинацияГорячихКлавишСтрокой = СтрШаблон("%1%2%3", СоставляющаяCtrl, СоставляющаяAlt, СоставляющаяShift);
		
		ТекстПодсказки = СтрШаблон(
			НСтр("ru = 'Комбинация горячих клавиш для товара определяется как %1 порядковый номер строки.'"),
				КомбинацияГорячихКлавишСтрокой);
		Элементы.ИерархияТоваров.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
		Элементы.ИерархияТоваров.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСверху;
		
	Иначе
		Элементы.ИерархияТоваров.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьПрименениеХарактеристикДляНоменклатуры(Номенклатура)
	
	Возврат ОбщегоНазначенияРМК.ТребуетсяВводХарактеристикиДляНоменклатуры(Номенклатура);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеПоНастройкеРМК(НастройкаРМКСсылка)
	
	ЗаполнитьГорячиеКлавиши(НастройкаРМК);
	НастроитьИспользованиеСервераЛояльности();
	
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		ПарольСервераЛояльности = ?(ЗначениеЗаполнено(ПарольСервераЛояльности), УникальныйИдентификатор, "");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияПоУмолчанию()
	
	Если НЕ ЗначениеЗаполнено(НастройкаРМК.ВидОтображения) Тогда
		НастройкаРМК.ВидОтображения = Перечисления.ВидыОтображения.Стандартный;
	КонецЕсли;
	
	ИнициализироватьЗначенияБулеваТипа = НастройкаРМК.Ссылка.Пустая();
	
	Если ИнициализироватьЗначенияБулеваТипа И НЕ ПомощникНастройкиРМК Тогда
		
		НастройкаРМК.ПечататьБумажныйЧек = ИнициализироватьЗначенияБулеваТипа;
		НастройкаРМК.ОбновлятьКоличествоПриПовторномПолученииВеса = ИнициализироватьЗначенияБулеваТипа;
		
		НастройкаРМК.ЗакрыватьПодборПриВыбореТовара = ИнициализироватьЗначенияБулеваТипа;
		НастройкаРМК.ПоказыватьАртикулНоменклатуры = ИнициализироватьЗначенияБулеваТипа;
		НастройкаРМК.ПоказыватьКодНоменклатуры = ИнициализироватьЗначенияБулеваТипа;
		
		НастройкаРМК.ИспользоватьОплатуНаличными = ИнициализироватьЗначенияБулеваТипа;
		
	КонецЕсли;
	
	Если НастройкаРМК.ГорячиеКлавиши.Количество() = 0 Тогда
		ЗаполнитьГорячиеКлавиши(НастройкаРМК);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НастройкаРМК.Наименование) Тогда
		НастройкаРМК.Наименование = НСтр("ru = 'Настройка РМК'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьЭлементыФормы()
	
	ОбновитьРеквизитыПоКонстантам();
	
	// Форма будет заполнена по ссылке переданной параметром при открытии формы.
	Если ЗначениеЗаполнено(Параметры.НастройкаРабочегоМеста) Тогда
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.ГруппаНастройки);
		Если Параметры.Свойство("НоваяНастройка")
			И Параметры.НоваяНастройка Тогда
			НастройкиОбъект = Параметры.НастройкаРабочегоМеста.Скопировать();
			УстановитьВидимостьЭлементаФормы(Элементы.НастройкаРМКРабочееМесто, Истина);
			НоваяНастройка = Параметры.НоваяНастройка;
		Иначе
			НастройкиОбъект = Параметры.НастройкаРабочегоМеста.ПолучитьОбъект();
		КонецЕсли;
		ЗначениеВРеквизитФормы(НастройкиОбъект, "НастройкаРМК");
		
	ИначеЕсли Параметры.Свойство("ПомощникРМК")
		И Параметры.ПомощникРМК Тогда
		
		ПорядковыйНомер = Параметры.ПорядковыйНомер;
		Модифицированность = Параметры.МодифицированностьРеквизитовРМК;
		КопироватьДанныеФормы(Параметры.НастройкаРМК,НастройкаРМК);
		Если Параметры.ПарольИзменен Тогда
			ПарольСервераЛояльностиИзменен = Параметры.ПарольИзменен;
			ПарольСервераЛояльности = Параметры.ПарольСервераЛояльности;
		КонецЕсли;
		ПомощникНастройкиРМК = Истина;
		
	ИначеЕсли Параметры.Свойство("НоваяНастройка")
		И Параметры.НоваяНастройка Тогда
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.ГруппаНастройки);
		УстановитьВидимостьЭлементаФормы(Элементы.НастройкаРМКРабочееМесто, Истина);
		НоваяНастройка = Параметры.НоваяНастройка;
		
		ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
		
		НастройкаРМК.РабочееМесто = ТекущееРабочееМесто;
	Иначе
		
		ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
		
		ДоступныеНастройкиРМК = ОбщегоНазначенияРМК.НастройкиРМКДляТекущегоРабочегоМеста(ТекущееРабочееМесто);
		КоличествоДоступныхНастроек = ДоступныеНастройкиРМК.Количество();
		
		ТекущаяСтраница = ?(КоличествоДоступныхНастроек > 1, Элементы.ГруппаВыбораНастроек, Элементы.ГруппаНастройки);
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(ТекущаяСтраница);
		
		Если КоличествоДоступныхНастроек = 1
			И ЗначениеЗаполнено(ДоступныеНастройкиРМК[0]) Тогда
			
			НастройкиОбъект = ДоступныеНастройкиРМК[0].ПолучитьОбъект();
			ЗначениеВРеквизитФормы(НастройкиОбъект, "НастройкаРМК");
			
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьГорячиеКлавиши(НастройкаРМК);
	
	Элементы.ПерейтиКСпискуНастроек.Видимость = КоличествоДоступныхНастроек > 1;
	
	ОбщегоНазначенияРМК.НастроитьВидимостьЭлементовНастройкиРМК(ЭтотОбъект);
	ОбщегоНазначенияРМКПереопределяемый.ПереопределитьНастройкиРМК(ЭтотОбъект);
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьИспользованиеАвтоматическихСкидок(ИспользоватьСерверЛояльностиПолучательДанных, ИспользоватьАвтоматическиеСкидки);
	
	ОбщегоНазначенияРМКПереопределяемый.ПереопределитьДинамическийСписокКассирыДляВхода(ЭтотОбъект);
	ОбщегоНазначенияРМКПереопределяемый.ПереопределитьНастройкиПродавцов(ЭтотОбъект);
	
	Элементы.НастройкаРМКОсновнаяКассаККМ.Доступность = НастройкаРМК.ПродажиСНесколькихКассККМ;
	Элементы.ОткрытьСписокСкладовДляПродажи.Доступность = НастройкаРМК.РазрешитьВыборСклада;
	Элементы.НастройкаРМКНоменклатураПакет.Доступность = НастройкаРМК.РазрешитьБыстроеДобавлениеПакета;
	
	НастроитьСписокРежимовНачальнойСтраницы(ЭтотОбъект);
	
	Если НастройкаРМК.ОтправлятьSMSКодПриПродаже = Перечисления.ВариантыОтправкиSMSПриПродаже.ПриВыборе Тогда
		ОтправлятьSMSПриПоискеКартыПоНомеруТелефона = Истина;
	ИначеЕсли НастройкаРМК.ОтправлятьSMSКодПриПродаже = Перечисления.ВариантыОтправкиSMSПриПродаже.ПриОплатеБаллами Тогда
		ОтправлятьSMSПриОплатеБонусами = Истина;
	КонецЕсли;
	
	ИспользоватьРасширеннуюФормуПодбора = НЕ НастройкаРМК.ИспользоватьНовыйПодборТоваров;
	ГоризонтальныйОриентация = Не НастройкаРМК.ВертикальнаяОриентация;
	СуммироватьПриПовторномПолученииВеса = Не НастройкаРМК.ОбновлятьКоличествоПриПовторномПолученииВеса;
	
	УстановитьУсловноеОформление();
	УстановитьВидимостьНаСервере();
	НастроитьИспользованиеСервераЛояльности();
	ЗаполнитьЗначенияПоУмолчанию();
	ЗаполнитьОсобенностиПродаж();
	НастроитьЭлементыПодбораТоваров();
	УстановитьПодсказкуАдресаСервераЛояльности();
	УстановитьПодсказкуПоляКонтролироватьЕМРЦ();
	ЗаполнитьСписокНаименованийПользователейПриЗапросеПрав();
	УстановитьДоступностьТаблицыКассирыДляВхода();
	ЗаполнитьПорядокИДеревоОбластейФормы();
	
	АктуализироватьНастройкиОборудования();
	УстановитьНастройкиЗаданий();
	
	ИменаПолейФлажков = ИменаПолейФлажков();
	УстановитьВидОтображенияБинарныхЭлементовИнтерфейса(ИменаПолейФлажков);
	
	УстановитьДоступностьПалитрыПлиточногоИнтерфейсаНаСервере();
	
	ВыборкаПалитры = Справочники.ПалитраТоваровРМК.Выбрать();
	Элементы.НастройкаРМКСтруктураБыстрыхТоваров.ТолькоПросмотр = Не ВыборкаПалитры.Следующий();
	ЗаполнитьИерархиюИзбранныхТоваров();
	НастроитьВидимостьЭлементовПриПереходеНаСтраницу();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПодсказкуПоляКонтролироватьЕМРЦ()
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.Табак;
	ЕМРЦ = 0;
	ОбщегоНазначенияРМКПереопределяемый.ПолучитьЦенуЕМРЦ(ВидМаркированнойПродукции,, ЕМРЦ);
	
	Если ЕМРЦ > 0 Тогда
		
		ЧислоРублей = Цел(ЕМРЦ);
		ЧислоКопеек = 100 * (ЕМРЦ - ЧислоРублей);
		РублиСтрокой = Строка(ЧислоРублей);
		КопейкиСтрокой = Формат(ЧислоКопеек, "ЧЦ=2; ЧН=00; ЧВН=" );
		НомерГода = Формат(ТекущаяДатаСеанса, НСтр("ru='ДФ=''гггг'''"));
		ШаблонСтрокиТекста = НСтр("ru = 'Устанавливать МРЦ из контрольной марки, как цену продажи. 
			|Контроль ЕМРЦ при продаже табачной продукции согласно №504-ФЗ. ЕМРЦ, установленная на %1 год: %2 руб. %3 коп.'");
		ТекстПодсказки = СтрШаблон(ШаблонСтрокиТекста, НомерГода, РублиСтрокой, КопейкиСтрокой);
		
		Элементы.НастройкаРМККонтролироватьЕМРЦ.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПалитры(ВыгружатьПалитруИзбранных, ВыгружатьПалитруПлитки)
	
	Если НастройкаРМК.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(, НСтр("ru='Сначала сохраните настройку.'"));
		Возврат;
	КонецЕсли;
	
	Если ВыгружатьПалитруИзбранных И Не ЗначениеЗаполнено(НастройкаРМК.СтруктураПлиточногоИнтерфейсаПодбора) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Палитра плиточного подбора товаров не выбрана.'"));
		Возврат;
	КонецЕсли;
	
	Если ВыгружатьПалитруПлитки И Не ЗначениеЗаполнено(НастройкаРМК.СтруктураБыстрыхТоваров) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Палитра избранных товаров не выбрана.'"));
		Возврат;
	КонецЕсли;
	
	ПалитрыДляВыгрузки = Новый Структура;
	ПалитрыДляВыгрузки.Вставить("ВыгружатьПалитруПлитки", ВыгружатьПалитруПлитки);
	ПалитрыДляВыгрузки.Вставить("ВыгружатьПалитруИзбранных", ВыгружатьПалитруИзбранных);
	
	ВыбратьФайлНаКлиенте(,ПалитрыДляВыгрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлНаКлиенте(ДляЗагрузки = Ложь, ПалитрыДляВыгрузки = Неопределено, ВыгружатьКонтрольПродаж = Ложь)
	
	РежимДиалогаВыбора = ?(ДляЗагрузки, РежимДиалогаВыбораФайла.Открытие, РежимДиалогаВыбораФайла.Сохранение);
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбора);
	Если ПалитрыДляВыгрузки = Неопределено Тогда
		ДиалогОткрытияФайла.Фильтр = НСтр("ru = 'НастройкиРМК (*.xml)|*.xml'");
		ДиалогОткрытияФайла.ПолноеИмяФайла = НСтр("ru = 'НастройкиРМК'");
	Иначе
		ДиалогОткрытияФайла.Фильтр = НСтр("ru = 'ПалитраТоваров (*.xml)|*.xml'");
		ДиалогОткрытияФайла.ПолноеИмяФайла = НСтр("ru = 'ПалитраТоваров'");
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДляЗагрузки", ДляЗагрузки);
	ДополнительныеПараметры.Вставить("ВыгружатьОбщиеНастройки", Ложь);
	ДополнительныеПараметры.Вставить("ВыгружатьПалитруИзбранных", Ложь);
	ДополнительныеПараметры.Вставить("ВыгружатьПалитруПлитки", Ложь);
	ДополнительныеПараметры.Вставить("ВыгружатьКонтрольПродаж", Ложь);
	
	Если ВыгружатьКонтрольПродаж Тогда
		ДополнительныеПараметры.ВыгружатьКонтрольПродаж = Истина;
	иначеЕсли ПалитрыДляВыгрузки = Неопределено Тогда
		ДополнительныеПараметры.ВыгружатьОбщиеНастройки = Истина;
		ДополнительныеПараметры.ВыгружатьПалитруИзбранных = Истина;
		ДополнительныеПараметры.ВыгружатьПалитруПлитки = Истина;
	Иначе
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, ПалитрыДляВыгрузки);
	КонецЕсли;
	
	ОповещениеВыбора = Новый ОписаниеОповещения("ВыбранФайл", ЭтотОбъект, ДополнительныеПараметры);
	
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(ОповещениеВыбора, ДиалогОткрытияФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранФайл(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = ВыбранныеФайлы[0];
	
	Если ДополнительныеПараметры.Свойство("ДляЗагрузки") И ДополнительныеПараметры.ДляЗагрузки Тогда
		
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЧтениеФайлаНастроекЗавершение", ЭтотОбъект);
		
		ФайлXML = Новый ТекстовыйДокумент;
		ФайлXML.НачатьЧтение(ОписаниеОповещения, ПутьКФайлу);
		
	Иначе
		
		ИнтерфейсРМКСлужебныйКлиент.ПронумероватьИерархиюПалитрыТоваров(ИерархияТоваров);
		РезультатВыполнения = СохранитьНастройкиРМКНаСервере();
		Если НЕ РезультатВыполнения.ВыполненоУспешно Тогда
			ПоказатьПредупреждение(, РезультатВыполнения.ТекстПредупрежденийОшибок);
		Иначе
		
			ТекстXML = НастройкиВФорматеXML(ДополнительныеПараметры);
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписьФайлаНастроекЗавершение", ЭтотОбъект);
		
			ФайлXML = Новый ТекстовыйДокумент;
			ФайлXML.УстановитьТекст(ТекстXML);
			ФайлXML.НачатьЗапись(ОписаниеОповещения, ПутьКФайлу);
		
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧтениеФайлаНастроекЗавершение(Результат) Экспорт
	
	ПредыдущийСценарий = НастройкаРМК.СценарийИспользования;
	
	ЕстьОшибки = Ложь;
	ТекстXML = ФайлXML.ПолучитьТекст();
	ТекстОписанияОшибки = "";
	ЗагрузитьНастройкиИзXML(ТекстXML, ЕстьОшибки, ТекстОписанияОшибки);
	
	Если ЕстьОшибки Тогда
		
		Если ПустаяСтрока(ТекстОписанияОшибки) Тогда
			ТекстОписанияОшибки= НСтр("ru='При загрузке настроек произошли ошибки.
				|Подробнее см. в журнале регистрации.'");
		Иначе
			ТекстОписанияОшибки = СтрШаблон(НСтр("ru='%1
				|Подробнее см. в журнале регистрации.'"),
				ТекстОписанияОшибки);
		КонецЕсли;
		ПоказатьПредупреждение(, ТекстОписанияОшибки);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru='Настройки успешно загружены.'"));
		НастроитьЭлементыФормыПослеЗагрузкиИзXMLНаСервере(ПредыдущийСценарий);
		НастроитьДоступностьЭлементовВводаНаличных();
		УстановитьДоступностьЭлементов();
		НастроитьЗначениеЭлементаЗакрытьПодбор();
		РазвернутьСтрокиДерева();
		ОбновитьИнтерфейс();
		
	КонецЕсли;
	
	ФайлXML = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьФайлаНастроекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПоказатьПредупреждение(, НСтр("ru='Настройки успешно выгружены.'"));
	
	ФайлXML = Неопределено;
	
КонецПроцедуры

&НаСервере
Функция НастройкиВФорматеXML(ПараметрыВыгрузки)
	
	СтруктураНастроек = Новый Структура;
	Если ПараметрыВыгрузки.ВыгружатьОбщиеНастройки Тогда
		ОбщегоНазначенияРМКПереопределяемый.СформироватьСтруктуруНастроек(СтруктураНастроек, НастройкаРМК);
	КонецЕсли;

	КорневыеПалитры = Новый Массив;
	Если ПараметрыВыгрузки.ВыгружатьПалитруИзбранных Тогда
		ПалитраТоваровДляФормирования = Новый Массив;
		ПалитраТоваровДляФормирования.Добавить(НастройкаРМК.СтруктураБыстрыхТоваров);
		КорневыеПалитры.Добавить(НастройкаРМК.СтруктураБыстрыхТоваров);
		Справочники.НастройкиРабочегоМестаКассира.ДобавитьВСтруктуруНастроекПалитруТоваров(
			ПалитраТоваровДляФормирования, СтруктураНастроек);
	КонецЕсли; 
	
	Если ПараметрыВыгрузки.ВыгружатьПалитруПлитки Тогда
		ПалитраТоваровДляФормирования = Новый Массив;
		ПалитраТоваровДляФормирования.Добавить(НастройкаРМК.СтруктураПлиточногоИнтерфейсаПодбора);
		КорневыеПалитры.Добавить(НастройкаРМК.СтруктураПлиточногоИнтерфейсаПодбора);
		Справочники.НастройкиРабочегоМестаКассира.ДобавитьВСтруктуруНастроекПалитруТоваров(
			ПалитраТоваровДляФормирования, СтруктураНастроек, Истина);
	КонецЕсли;
	
	Если КорневыеПалитры.Количество() > 0 Тогда
		ВложенныеПалитры = ИнтерфейсРМКСлужебный.ПолучитьВложенныеПалитры(КорневыеПалитры);
		Если ВложенныеПалитры.Количество() > 0 Тогда
			Справочники.НастройкиРабочегоМестаКассира.ДобавитьВСтруктуруНастроекПалитруТоваров(
				ВложенныеПалитры, СтруктураНастроек, Ложь, "ВложенныеПалитры");
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ВыгружатьКонтрольПродаж Тогда
		Справочники.НастройкиРабочегоМестаКассира.ДобавитьВСтруктуруНастроекКонтрольПродаж(СтруктураНастроек);
	КонецЕсли;
	
	ТекстXML = ОбщегоНазначения.ЗначениеВСтрокуXML(СтруктураНастроек);
	
	Возврат ТекстXML;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьНастройкиИзXML(ТекстXML, ЕстьОшибки, ТекстОписанияОшибки)
	
	Если НастройкаРМК.Ссылка.Пустая() Тогда
		ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
		НастройкаРМКОбъект = Справочники.НастройкиРабочегоМестаКассира.СоздатьЭлемент();
		НастройкаРМКОбъект.РабочееМесто = ТекущееРабочееМесто;
	Иначе
		НастройкаРМКОбъект = НастройкаРМК.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	Справочники.НастройкиРабочегоМестаКассира.ЗагрузитьНастройкиИзXML(ТекстXML, ЕстьОшибки, НастройкаРМКОбъект, ТекстОписанияОшибки);
	ЗаполнитьКомплектациюОборудованияПоДаннымИБ();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьИспользованиеСервераЛояльности()
	
	Элементы.ГруппаНастройкаБСГоризонтальная.Доступность = ИспользоватьСерверЛояльностиПолучательДанных;
	
	ТекущаяСтраницаСерверЛояльности = Элементы.ГруппаСерверВыключен;
	Если ИспользоватьСерверЛояльностиПолучательДанных И НЕ ПарольСервераЛояльностиИзменен Тогда
		ПарольСервераЛояльности = УникальныйИдентификатор;
		ТекущаяСтраницаСерверЛояльности = Элементы.ГруппаСерверВключен;
	ИначеЕсли Не ИспользоватьСерверЛояльностиПолучательДанных И Не ИспользоватьАвтоматическиеСкидки Тогда
		НастройкаРМК.ПроизводитьПолныйРасчетСкидок = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаУправлениеСерверЛояльности.ТекущаяСтраница = ТекущаяСтраницаСерверЛояльности;
	
	Элементы.СтраницаНастройкаСервераЛояльности.Видимость = ИспользоватьСерверЛояльностиПолучательДанных;
	Элементы.НастройкиСервераЛояльности.Доступность = ИспользоватьСерверЛояльностиПолучательДанных;
	
КонецПроцедуры

// По данным настройки РМК возвращает адрес сервера лояльности, ресурс для обращения
// и имя пользователя сервера лояльности
//
// Параметры:
//  НастройкиРМК - СправочникОбъект.НастройкиРабочегоМестаКассира - данные настройки РМК
//
// Возвращаемое значение:
// Результат - Структура:
//		* АдресСервера - Строка
//		* Логин - Строка
//		* Таймаут - Число
//		* Пароль - Строка
//
&НаСервереБезКонтекста
Функция ИсходныеДанныеДляПроверкиДоступностиСервераЛояльности(НастройкиРМК)
	
	Таймаут = ?(НастройкиРМК.РаботаВРежимеМедленногоСоединения, НастройкиРМК.ТаймаутСерверЛояльности, 0);
	
	Результат = Новый Структура();
	Результат.Вставить("АдресСервера", НастройкиРМК.АдресСервераЛояльности);
	Результат.Вставить("Логин", НастройкиРМК.ПользовательСервераЛояльности);
	Результат.Вставить("Таймаут", Таймаут);
	Результат.Вставить("Пароль", ПарольСервераЛояльности(НастройкиРМК.Ссылка));
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ИспользоватьСерверЛояльностиПолучательДанныхПриИзмененииНаСервере()
	
	ИмяКонстанты = ОбщегоНазначенияРМК.ИмяКонстанты("ИспользоватьСерверЛояльностиПолучательДанных");
	СохранитьЗначениеКонстанты(ИмяКонстанты, ИспользоватьСерверЛояльностиПолучательДанных);
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьИспользованиеАвтоматическихСкидок(ИспользоватьСерверЛояльностиПолучательДанных, ИспользоватьАвтоматическиеСкидки);
	НастроитьИспользованиеСервераЛояльности();
	ОбщегоНазначенияРМКПереопределяемый.ПереопределитьНастройкиПродавцов(ЭтотОбъект);
	НастроитьЭлементыАвтоматическихСкидок();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыПодключенияНСПК()
	
КонецПроцедуры

&НаКлиенте
Процедура НСПКВерсияВКЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЭлементыSMSПодтверждения()
	
	СтандартнаяОбработка = Истина;
	
	ОбщегоНазначенияРМККлиентПереопределяемый.НастроитьЭлементыSMSПодтвержденияНаФормеНастроек(
		ЭтотОбъект, СтандартнаяОбработка);
		
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
			
	Если НЕ ИспользоватьСерверЛояльностиПолучательДанных ИЛИ НЕ ИспользоватьШаблоныСообщений Тогда
		НастройкаРМК.ОтправлятьSMSКодПриЗаведенииКарты = Ложь;
		ОтправлятьSMSПриОплатеБонусами = Ложь;
	КонецЕсли;
	
	Если НЕ ИспользоватьШаблоныСообщений Тогда
		ОтправлятьSMSПриПоискеКартыПоНомеруТелефона = Ложь;
	КонецЕсли;
	
	ИспользоватьСерверЛояльностиИШаблоны = ИспользоватьСерверЛояльностиПолучательДанных И ИспользоватьШаблоныСообщений;
	
	Элементы.ОтправлятьSMSПриПоискеКартыПоНомеруТелефона.Доступность = ИспользоватьШаблоныСообщений;
	
	Элементы.НастройкаРМКОтправлятьSMSКодПриЗаведенииКарты.Доступность = ИспользоватьСерверЛояльностиИШаблоны;
	Элементы.ОтправлятьSMSПриОплатеБонусами.Доступность = ИспользоватьСерверЛояльностиИШаблоны;
	
	Элементы.НастройкаРМКШаблонSMSПриЗаведенииКарты.Доступность = ИспользоватьСерверЛояльностиИШаблоны
		И НастройкаРМК.ОтправлятьSMSКодПриЗаведенииКарты;
		
	Элементы.НастройкаРМКШаблонSMSПриПродаже.Доступность =
		ИспользоватьШаблоныСообщений И ОтправлятьSMSПриПоискеКартыПоНомеруТелефона;
		
	Элементы.НастройкаРМКШаблонSMSПриСписанииБонусов.Доступность =
		ИспользоватьШаблоныСообщений И ОтправлятьSMSПриОплатеБонусами;
		
	Элементы.НастройкаРМКСуммаПодтвержденияСписанияБонусов.Доступность =
		ИспользоватьШаблоныСообщений И ОтправлятьSMSПриОплатеБонусами;
		
	ЦветТекстаПодсказки = ?(ИспользоватьСерверЛояльностиИШаблоны, ОбщегоНазначенияКлиент.ЦветСтиля("ЦветТекстаФормы"), ОбщегоНазначенияКлиент.ЦветСтиля("ЦветНеАктивнойСтроки"));
		
	Элементы.НастройкаРМКСуммаПодтвержденияСписанияБонусов.РасширеннаяПодсказка.ЦветТекста = ЦветТекстаПодсказки;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРасширеннуюФормуПодбораПриИзменении(Элемент)
	
	НастройкаРМК.ИспользоватьНовыйПодборТоваров = НЕ ИспользоватьРасширеннуюФормуПодбора;
	НастроитьЭлементыПодбораТоваров();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокНаименованийПользователейПриЗапросеПрав()
	
	СписокВыбора = Элементы.НастройкаРМКНаименованиеПользователяПриЗапросеПрав.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(НСтр("ru = 'администратору'"));
	СписокВыбора.Добавить(НСтр("ru = 'старшему кассиру'"));
	СписокВыбора.Добавить(НСтр("ru = 'сотруднику магазина'"));
	Если ЗначениеЗаполнено(НастройкаРМК.НаименованиеПользователяПриЗапросеПрав) Тогда
		СписокВыбора.Добавить(НастройкаРМК.НаименованиеПользователяПриЗапросеПрав);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПечататьКороткийСлипЧекПриИзмененииНаСервере()

	ИмяКонстанты = ОбщегоНазначенияРМК.ИмяКонстанты("ПечататьКороткийСлипЧек");
	СохранитьЗначениеКонстанты(ИмяКонстанты, ПечататьКороткийСлипЧек);

КонецПроцедуры

&НаСервере
Процедура НастройкаРМКФормироватьИнтегрированныйЧекЕГАИСПриИзмененииНаСервере()
	
	ИмяКонстанты = ОбщегоНазначенияРМК.ИмяКонстанты("ИспользоватьСовмещенныйКодДляЧекаЕГАИСИЧекаККМ");
	СохранитьЗначениеКонстанты(ИмяКонстанты, ФормироватьИнтегрированныйЧекЕГАИС);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиРМКИЗакрыть(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("НастройкаЗаписана", Ложь);
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ИнтерфейсРМКСлужебныйКлиент.ПронумероватьИерархиюПалитрыТоваров(ИерархияТоваров);
		Результат = СохранитьНастройкиРМКНаСервере();
		ИзмененияСохранены = Результат.ВыполненоУспешно;
		
		Если НЕ ИзмененияСохранены Тогда
			
			ПоказатьПредупреждение(, Результат.ТекстПредупрежденийОшибок,,
				НСтр("ru = 'Ошибка сохранения настроек РМК'"));
			
		КонецЕсли;
		
		ПараметрыОповещения.НастройкаЗаписана = ИзмененияСохранены;
		
	Иначе
		ЗакрыватьФормуБезКонтроляИзмененийНастроек = Истина;
	КонецЕсли;
	
	Оповестить("СохранениеНастроекРМК", ПараметрыОповещения);
	Модифицированность = Ложь;
	
	Если Открыта() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыПоКонстантам()
	
	ИспользоватьШаблоныСообщений = ИспользоватьШаблоныСообщений();
	ПечататьКороткийСлипЧек = ФормироватьИнтегрированныйСлипЧек();
	ФормироватьИнтегрированныйЧекЕГАИС = ПечататьИнтегрированныйЧекЕГАИС();
	ЛокальныйРасчетСкидокПоддерживаетПромокоды = ЛокальныйРасчетСкидокПоддерживаетПромокоды();
	ОбщегоНазначенияРМКПереопределяемый.ОбновитьРеквизитыНастроекПоКонстантам(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПалитрыПлиточногоИнтерфейсаНаСервере()
	
	Возврат;
	
	Если Не НастройкаРМК.ЗакрыватьПодборПриВыбореТовара
		И ЗначениеЗаполнено(НастройкаРМК.СтруктураПлиточногоИнтерфейсаПодбора) Тогда
			НастройкаРМК.СтруктураПлиточногоИнтерфейсаПодбора =
				ПредопределенноеЗначение("Справочник.ПалитраТоваровРМК.ПустаяСсылка");
	КонецЕсли;
	Элементы.НастройкаРМКСтруктураПлиточногоИнтерфейсаПодбора.Доступность = НастройкаРМК.ЗакрыватьПодборПриВыбореТовара;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СериализоватьЗначениеЦвета(ЗначениеЦвета)
	Возврат ОбщегоНазначения.ЗначениеВСтрокуXML(ЗначениеЦвета);
КонецФункции

&НаКлиенте
Процедура НастроитьЭлементыВидовОплат()
	
	СтандартнаяОбработка = Истина;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Форма", ЭтотОбъект);
	ОбщегоНазначенияРМККлиентПереопределяемый.НастроитьЭлементыВидовОплат(СтруктураПараметров, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
	
		Если Не ИспользоватьСерверЛояльностиПолучательДанных Тогда
			НастройкаРМК.ИспользоватьОплатуБонусами = Ложь;
			НастройкаРМК.ИспользоватьОплатуСертификатами = Ложь;
			Если Не ЛокальныйРасчетСкидокПоддерживаетПромокоды Тогда
				НастройкаРМК.ИспользоватьПромокоды = Ложь;
			КонецЕсли;
			Элементы.НастройкаРМКИспользоватьПромокоды.Доступность = ЛокальныйРасчетСкидокПоддерживаетПромокоды;
		Иначе
			Элементы.НастройкаРМКИспользоватьПромокоды.Доступность = Истина;
		КонецЕсли;
		
		Элементы.НастройкаРМКИспользоватьОплатуБонусами.Доступность = ИспользоватьСерверЛояльностиПолучательДанных;
		Элементы.НастройкаРМКИспользоватьОплатуСертификатами.Доступность = ИспользоватьСерверЛояльностиПолучательДанных;
		
	КонецЕсли;
	
	ИспользоватьОплатуНаличными = НастройкаРМК.ИспользоватьОплатуНаличными;
	ИспользоватьОплатуПлатежнымиКартами = НастройкаРМК.ИспользоватьОплатуПлатежнымиКартами;
	
	Элементы.НастройкаРМКВыдаватьНаличныеНаКассе.Доступность =
		ИспользоватьОплатуНаличными И ИспользоватьОплатуПлатежнымиКартами;
		
	Если Не ИспользоватьОплатуНаличными Или Не ИспользоватьОплатуПлатежнымиКартами Тогда
		НастройкаРМК.ВыдаватьНаличныеНаКассе = Ложь;
	КонецЕсли;
	
	Если Не ИспользоватьОплатуНаличными Тогда
		НастройкаРМК.ИспользоватьПанельВводаНаличныхКупюр = Ложь;
		НастройкаРМК.СкрыватьQRОплатыНаличными = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаНастройкиЭквайринга.Доступность = ИспользоватьОплатуПлатежнымиКартами;
	Если НЕ ИспользоватьОплатуПлатежнымиКартами Тогда
		НастройкаРМК.СкрыватьQRОплатыКартой = Ложь;
	КонецЕсли;
	
	НастроитьДоступностьЭлементовВводаНаличных();
	
	Элементы.БИПГруппаНастройкиИнтеграции.Доступность = НастройкаРМК.ИспользоватьОплатуПлатежнымиСистемами;
	НастроитьЭлементНеПечататьКодВозвратаСБП();
	НастроитьДоступностьОплатыНСПК();
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьПолеНастроекАдресСервераЛояльности()
	ТекущийЭлемент = Элементы.НастройкаРМКАдресСервераЛояльности;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступностьЭлементовВводаНаличных()
	ИспользоватьОплатуНаличными = НастройкаРМК.ИспользоватьОплатуНаличными;
	
	Элементы.ГруппаУчетНаличных.Доступность = ИспользоватьОплатуНаличными;
	Элементы.ГруппаНастроекОплатыНаличными.Доступность = ИспользоватьОплатуНаличными;
	Элементы.НастройкаРМКИспользоватьПанельВводаНаличныхКупюр.Доступность = ИспользоватьОплатуНаличными;
	ОбработатьИзменениеИспользованияПанелиВводаНаличныхНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьТаблицыВводаНаличных()
	
	ДоступностьПанелиВводаНаличных = (НастройкаРМК.ИспользоватьОплатуНаличными 
		И НастройкаРМК.ИспользоватьПанельВводаНаличныхКупюр);
	Элементы.СтраницаВводНаличных.Видимость = ДоступностьПанелиВводаНаличных;
	Элементы.ПанельНастроекВводаНаличных.Доступность = ДоступностьПанелиВводаНаличных;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеИспользованияПанелиВводаНаличныхНаКлиенте()
	Если НастройкаРМК.ИспользоватьОплатуНаличными И НастройкаРМК.ИспользоватьПанельВводаНаличныхКупюр Тогда
		ПерезаполнитьПанельВводаНаличныхПриНеобходимости();
	КонецЕсли;
	НастроитьВидимостьТаблицыВводаНаличных();
КонецПроцедуры 

&НаКлиенте
Процедура ПерезаполнитьПанельВводаНаличныхПриНеобходимости()
	
	МассивНоминаловКупюр = ОбщегоНазначенияРМККлиентСервер.НоминалыКупюр();
	ИспользуемыеНоминалыКупюр = ПолучитьИспользуемыеНоминалыКупюр();
	Если Не ОбщегоНазначенияКлиентСервер.СпискиЗначенийИдентичны(МассивНоминаловКупюр, ИспользуемыеНоминалыКупюр) Тогда
		ПерезаполнитьТаблицуВводаНаличных(МассивНоминаловКупюр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьТаблицуВводаНаличных(МассивНоминаловКупюр)
	ПустаяКлавиша = ИнтерфейсРМКСлужебныйКлиентСервер.ПредставлениеПустойКлавиши();
	КлавишиНоминалов = ПолучитьКлавишиНоминалов();
	НастройкаРМК.ВводНаличных.Очистить();
	Для Каждого ЭлементНоминала Из МассивНоминаловКупюр Цикл
		НоваяСтрока = НастройкаРМК.ВводНаличных.Добавить();
		НоваяСтрока.Номинал = ЭлементНоминала;
		НоваяСтрока.Использование = Истина;
		ПредыдущаяКлавиша = КлавишиНоминалов.Получить(ЭлементНоминала);
		Если ПредыдущаяКлавиша = Неопределено Тогда
			НоваяСтрока.Клавиша = ПустаяКлавиша;
		Иначе
			НоваяСтрока.Клавиша = ПредыдущаяКлавиша.Значение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКлавишиНоминалов()
	
	ПустаяКлавиша = ИнтерфейсРМКСлужебныйКлиентСервер.ПредставлениеПустойКлавиши();
	КлавишиНоминалов = Новый Соответствие;
	Для Каждого СтрокаНаличных Из НастройкаРМК.ВводНаличных Цикл
		Если ЗначениеЗаполнено(СтрокаНаличных.Клавиша) И Не СтрокаНаличных.Клавиша = ПустаяКлавиша Тогда
			КлавишиНоминалов.Вставить(СтрокаНаличных.Номинал, СтрокаНаличных.Клавиша);
		КонецЕсли;
	КонецЦикла;
	Возврат КлавишиНоминалов;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИспользуемыеНоминалыКупюр()  
	
	МассивИспользуемыхНоминаловКупюр = Новый Массив;
	Для Каждого СтрокаНоминала Из НастройкаРМК.ВводНаличных Цикл
		МассивИспользуемыхНоминаловКупюр.Добавить(СтрокаНоминала.Номинал);
	КонецЦикла;
	Возврат МассивИспользуемыхНоминаловКупюр;
	
КонецФункции

&НаСервере
Процедура НастроитьЭлементыФормыПослеЗагрузкиИзXMLНаСервере(ПредыдущийСценарий)
	
	АктуализироватьЭлементыФормы();
	Если Не НастройкаРМК.СценарийИспользования = ПредыдущийСценарий Тогда
		ВыделитьСценарийИспользования();
	КонецЕсли;
	ЗаполнитьПорядокИДеревоОбластейФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	
	НастроитьДоступностьЭлементовПриПереключенииСервераЛояльности();
	НастроитьЭлементыВидовОплат();
	УстановитьДоступностьЖурналаДействийКассира();
	УстановитьДоступностьПоляТаймаут();
	УстановитьДоступностьНастроекРаспознавания();
	УстановитьДоступностьНастроекИСМП();
	УстановитьДоступностьПредупрежденияСЛ();
	УстановитьНастройкиПолногоРасчетаСкидок();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЗначениеЭлементаЗакрытьПодбор()
	
	Если НастройкаРМК.СценарийИспользования
			= ПредопределенноеЗначение("Перечисление.СценарииИспользованияРМК.ТерминалСамообслуживания") Тогда
			
		НастройкаРМК.ЗакрыватьПодборПриВыбореТовара = Не (НастройкаРМК.РежимНачальнойСтраницы = 2);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НастройкиДляПроверкиЗаполнения()
	
	МассивНастроек = Новый Массив;
	
	ТекстПредупреждения = НСтр("ru = 'Пожалуйста, укажите точность округления при расчетах с клиентом.'");
	ДобавитьНастройкуДляПроверкиЗаполнения(МассивНастроек, "ТочностьОкругления", ТекстПредупреждения);
	
	ТекстПредупреждения = НСтр("ru = 'Пожалуйста, выберите вариант масштаба интерфейса.'");
	ДобавитьНастройкуДляПроверкиЗаполнения(МассивНастроек, "ВидОтображения", ТекстПредупреждения);
	
	Возврат МассивНастроек;
	
КонецФункции

&НаСервере
Процедура ДобавитьНастройкуДляПроверкиЗаполнения(МассивНастроек, Знач ИмяНастройки, Знач ТекстПредупреждения)
	
	ОписаниеНастройки = Новый Структура;
	ОписаниеНастройки.Вставить("ИмяНастройки", ИмяНастройки);
	ОписаниеНастройки.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	
	МассивНастроек.Добавить(ОписаниеНастройки);
	
КонецПроцедуры

#Область РаботаСоСценариямиИспользованияРМК

&НаКлиенте
Процедура УстановитьСценарийНачало(ИмяКомандыСценария)
	
	ИмяСценария = Сред(ИмяКомандыСценария, 22);
	ВыбранныйСценарий = ПредопределенноеЗначение("Перечисление.СценарииИспользованияРМК." + ИмяСценария);
	ПроизвольныйСценарий = ПредопределенноеЗначение("Перечисление.СценарииИспользованияРМК.Произвольный");
	Если Не ВыбранныйСценарий = НастройкаРМК.СценарийИспользования Тогда
		Если ВыбранныйСценарий = ПроизвольныйСценарий Тогда
			УстановитьСценарийИспользования(ВыбранныйСценарий);
		Иначе
			
			ТекстВопроса = НСтр("ru = 'При смене сценария использования часть настроек будет 
				|заменена на значения по умолчанию. Продолжить?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьСценарийЗавершение", ЭтотОбъект, ВыбранныйСценарий);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , ,
				НСтр("ru = 'Продолжение смены сценария использования.'"));
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСценарийЗавершение(Результат, ВыбранныйСценарий) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УстановитьСценарийИспользования(ВыбранныйСценарий);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСценарийИспользования(НовоеЗначениеСценария)
	НастройкаРМК.СценарийИспользования = НовоеЗначениеСценария;
	ОбработатьВыборСценария();
	НастроитьЗначениеЭлементаЗакрытьПодбор();
	УстановитьДоступностьЖурналаДействийКассира();
КонецПроцедуры

&НаСервере
Процедура ВыделитьСценарийИспользования()
	ИмяВыбранногоСценария = ОбщегоНазначения.ИмяЗначенияПеречисления(НастройкаРМК.СценарийИспользования);
	Для Каждого КнопкаСценария Из Элементы.ГруппаПодменюСценарииИспользования.ПодчиненныеЭлементы Цикл
		ИмяСценарияКнопки = Сред(КнопкаСценария.Имя, 22);
		КнопкаСценария.Пометка = (ИмяВыбранногоСценария = ИмяСценарияКнопки);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборСценария()
	
	ГоризонтальныйОриентацияДо = ГоризонтальныйОриентация;
	ВыделитьСценарийИспользования();
	ОбщегоНазначенияРМК.НастроитьВидимостьЭлементовНастройкиРМК(ЭтотОбъект);
	Если НастройкаРМК.СценарийИспользования = Перечисления.СценарииИспользованияРМК.ТерминалСамообслуживания Тогда
		УстановитьЗначенияНастроекДляТерминалаСамообслуживания();
	КонецЕсли;
	НастроитьСписокРежимовНачальнойСтраницы(ЭтотОбъект);
	Если Не ГоризонтальныйОриентацияДо = ГоризонтальныйОриентация Тогда
		ЗаполнитьДеревоОбластейФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияНастроекДляТерминалаСамообслуживания()
	ОбщегоНазначенияРМК.УстановитьЗначенияНастроекДляТерминалаСамообслуживания(ЭтотОбъект);
	ИспользоватьОплатуСертификатамиНСПКПриИзмененииСервер();
КонецПроцедуры

#КонецОбласти

#Область РаботаСПомощникомНастройкиРМК
&НаСервере
Процедура НастроитьВидимостьЭлементовПриПереходеНаСтраницу()
	Если ПорядковыйНомер = 0 Тогда
		Возврат;
	КонецЕсли;
	СброситьНастройкиЭлементовФормы();
	Если ПорядковыйНомер = 1 Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОсобенностиПродаж, Истина);
		Элементы.ГруппаОсобенностиПродаж.ОтображатьЗаголовок = Ложь;
		Заголовок = НСтр("ru ='Продажи'");
		Элементы.ГруппаОсобенностиПродаж.Поведение = ПоведениеОбычнойГруппы.Авто;
	ИначеЕсли ПорядковыйНомер = 10 Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаЗаказы, Истина);
		Элементы.ГруппаЗаказы.ОтображатьЗаголовок = Ложь;
		Заголовок = НСтр("ru ='Заказы'");
		Элементы.ГруппаЗаказы.Поведение = ПоведениеОбычнойГруппы.Авто;
	ИначеЕсли ПорядковыйНомер = 2 Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСкупка, Истина);
		Элементы.ГруппаСкупка.ОтображатьЗаголовок = Ложь;
		Элементы.ГруппаСкупка.Поведение = ПоведениеОбычнойГруппы.Авто;
		Заголовок = НСтр("ru ='Скупка'");
	ИначеЕсли ПорядковыйНомер = 3 Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСкидкиИОкругление, Истина);
		Элементы.ГруппаСкидкиИОкругление.Поведение = ПоведениеОбычнойГруппы.Авто;
		Элементы.ГруппаСкидкиИОкругление.ОтображатьЗаголовок = Ложь;
		Заголовок = НСтр("ru ='Маркетинговые акции'");
	ИначеЕсли ПорядковыйНомер = 4 Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплаты, Истина);
		Элементы.ГруппаОплаты.Поведение = ПоведениеОбычнойГруппы.Авто;
		Заголовок = НСтр("ru ='Виды оплат'");;
		Элементы.ГруппаОплаты.ОтображатьЗаголовок = Ложь;
	ИначеЕсли ПорядковыйНомер = 5 Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаДействияСистемы, Истина);
		Элементы.ГруппаДействияСистемы.Поведение = ПоведениеОбычнойГруппы.Авто;
		Заголовок = НСтр("ru ='Формирование чека'");
		Элементы.ГруппаДействияСистемы.ОтображатьЗаголовок = Ложь;
	ИначеЕсли ПорядковыйНомер = 6 Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнтерфейс, Истина);
		Элементы.ГруппаИнтерфейс.Поведение = ПоведениеОбычнойГруппы.Авто;
		Заголовок = НСтр("ru ='Интерфейс'");
		Элементы.ГруппаИнтерфейс.ОтображатьЗаголовок = Ложь;
	ИначеЕсли ПорядковыйНомер = 7 Тогда
		Элементы.СтраницыНастройкиРМК.ТекущаяСтраница = Элементы.СтраницаОкноПриложения;
		Заголовок = НСтр("ru ='Окно приложения'");
	ИначеЕсли ПорядковыйНомер = 8 Тогда
		Элементы.СтраницыНастройкиРМК.ТекущаяСтраница = Элементы.СтраницаГорячиеКлавиши;
		Заголовок = НСтр("ru ='Горячие клавиши'");
	ИначеЕсли ПорядковыйНомер = 9 Тогда
		Элементы.СтраницыНастройкиРМК.ТекущаяСтраница = Элементы.СтраницаБыстрыеТовары;
		Заголовок = НСтр("ru ='Быстрые товары'");
	ИначеЕсли ПорядковыйНомер = 11 Тогда
		Элементы.СтраницыНастройкиРМК.ТекущаяСтраница = Элементы.СтраницаНастройкиКассировДляВхода;
		Заголовок = НСтр("ru ='Кассиры для входа'");
	ИначеЕсли ПорядковыйНомер = 12 Тогда
		Элементы.СтраницыНастройкиРМК.ТекущаяСтраница = Элементы.СтраницаОборудование;
		Заголовок = НСтр("ru ='Оборудование'");
	ИначеЕсли ПорядковыйНомер = 13 Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаНастройкиПечати, Истина);
		Элементы.ГруппаНастройкиПечати.Поведение = ПоведениеОбычнойГруппы.Авто;
		Элементы.ГруппаНастройкиПечати.ОтображатьЗаголовок = Ложь;
		Заголовок = НСтр("ru ='Настройки печати'");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройкиЭлементовФормы()
	
	Если НЕ ПорядковыйНомер = 0 И НЕ ПомощникНастройкиРМК Тогда
		Возврат;
	КонецЕсли;
	Заголовок = НСтр("ru = 'Настройки рабочего места кассира'");
	Элементы.СтраницыНастройкиРМК.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	Элементы.СтраницыНастройкиРМК.ТекущаяСтраница = Элементы.СтраницаОбщиеНастройки;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКоманднойПанели, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИдентификацияНастройки, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСкидкиИОкругление, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплаты, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаШаблоныШтрихкодов, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаДействияСистемы, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнтерфейс, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаНастройкиПечати, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОсобенностиПродаж, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСерверЛояльности, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаЗаказы, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаSMSПодтверждениеВерх, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаНастройкаОкнаПриложения, Истина);
	
	Элементы.ГруппаСкидкиИОкругление.ОтображатьЗаголовок = Истина;
	Элементы.ГруппаОплаты.ОтображатьЗаголовок = Истина;
	Элементы.ГруппаШаблоныШтрихкодов.ОтображатьЗаголовок = Истина;
	Элементы.ГруппаДействияСистемы.ОтображатьЗаголовок = Истина;
	Элементы.ГруппаИнтерфейс.ОтображатьЗаголовок = Истина;
	Элементы.ГруппаОсобенностиПродаж.ОтображатьЗаголовок = Истина;
	Элементы.ГруппаЗаказы.ОтображатьЗаголовок = Истина;
	Элементы.ГруппаСкупка.ОтображатьЗаголовок = Истина;
	Элементы.ГруппаНастройкиПечати.ОтображатьЗаголовок = Истина;
	
	Элементы.ГруппаСкидкиИОкругление.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
	Элементы.ГруппаОплаты.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
	Элементы.ГруппаШаблоныШтрихкодов.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
	Элементы.ГруппаДействияСистемы.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
	Элементы.ГруппаИнтерфейс.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
	Элементы.ГруппаОсобенностиПродаж.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
	Элементы.ГруппаЗаказы.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
	Элементы.ГруппаСкупка.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
	Элементы.ГруппаНастройкиПечати.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
	
	Элементы.ГруппаБонусыИСертификаты.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьИзПомощникаСтраницуОборудованияПриНеобходимости()
	
	ИмяСтраницыВПомощнике = "СтраницаНастройкаРМКОборудование";
	Если (Не Элементы.СтраницаОборудование.Видимость) Тогда 
		СтраницаПомощника = ВладелецФормы.СписокИменСтраниц.НайтиПоЗначению(ИмяСтраницыВПомощнике);
		Если Не СтраницаПомощника = Неопределено Тогда
			ВладелецФормы.СписокИменСтраниц.Удалить(СтраницаПомощника);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭлементаФормы(Элемент, Видимость)
	Элемент.Видимость = Видимость;
КонецПроцедуры

&НаСервере
Функция СформироватьТабличныйДокументГорячихКлавиш()
	
	ГорячиеКлавишиПечать = Новый ТабличныйДокумент;
	ПустаяКлавиша = ИнтерфейсРМКСлужебныйКлиентСервер.ПредставлениеПустойКлавиши();
	МакетПечати = Справочники.НастройкиРабочегоМестаКассира.ПолучитьМакет("ПечатьГорячихКлавиш");
	ОбластьШапкаДействия = МакетПечати.ПолучитьОбласть("ШапкаДействия");	
	
	СтроковоеПредставлениеКомбинацииОткрытияПанелиИзбранного = "";
	
	ГорячиеКлавишиПечать.Вывести(ОбластьШапкаДействия);
	ВывестиОсновныеГорячиеКлавишиВТабличныйДокумент(МакетПечати, ГорячиеКлавишиПечать, СтроковоеПредставлениеКомбинацииОткрытияПанелиИзбранного);

	ВывестиГорячиеКлавишиКупюрВТабличныйДокумент(МакетПечати, ГорячиеКлавишиПечать);
	
	Если Не СтроковоеПредставлениеКомбинацииОткрытияПанелиИзбранного = "" Тогда
		
		ТекстДополнения = СтрШаблон(
			НСтр("ru = 'Для избранных товаров зарезервированы комбинации клавиш ""%1"" [0-9] цифрового ряда.'"),
			СтроковоеПредставлениеКомбинацииОткрытияПанелиИзбранного);
		
		ОбластьДополнение = МакетПечати.ПолучитьОбласть("Дополнение");
		ОбластьДополнение.Параметры.Дополнение = ТекстДополнения;
		ГорячиеКлавишиПечать.Вывести(ОбластьДополнение);
		
	КонецЕсли;
	
	Возврат ГорячиеКлавишиПечать;
	
КонецФункции

&НаСервере
Процедура ВывестиОсновныеГорячиеКлавишиВТабличныйДокумент(МакетПечати, ГорячиеКлавишиПечать,
		СтроковоеПредставлениеКомбинацииОткрытияПанелиИзбранного)
	
	ОбластьРядРаздела = МакетПечати.ПолучитьОбласть("РядРаздела");
	ОбластьРядДействия = МакетПечати.ПолучитьОбласть("РядДействия");
	ПустаяКлавиша = ИнтерфейсРМКСлужебныйКлиентСервер.ПредставлениеПустойКлавиши();
	ИмяКнопкиОткрытьИзбранное = "ОткрытьПанельИзбранныхТоваров";
	Для Каждого СтрокаРаздела Из ДеревоГорячиеКлавиши.ПолучитьЭлементы() Цикл
		НачалоРаздела = Истина;
		Для Каждого СтрокаКомбинации Из СтрокаРаздела.ПолучитьЭлементы() Цикл
			Если ЗначениеЗаполнено(СтрокаКомбинации.Клавиша) И Не СтрокаКомбинации.Клавиша = ПустаяКлавиша Тогда
				Если НачалоРаздела Тогда
					ОбластьРядРаздела.Параметры.ИмяРаздела = СтрокаРаздела.ИмяРаздела;
					ГорячиеКлавишиПечать.Вывести(ОбластьРядРаздела);
					НачалоРаздела = Ложь;
				КонецЕсли;
				ДобавитьКомбинациюКлавишДействия(ГорячиеКлавишиПечать, ОбластьРядДействия, СтрокаКомбинации);
				Если СтрокаКомбинации.ИмяЭлемента = ИмяКнопкиОткрытьИзбранное И ОтмеченАкселератор(СтрокаКомбинации) Тогда
					СтроковоеПредставлениеКомбинацииОткрытияПанелиИзбранного = 
						СформироватьСтроковоеПредставлениеКомбинацииОткрытияПанелиИзбранного(СтрокаКомбинации);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиГорячиеКлавишиКупюрВТабличныйДокумент(МакетПечати, ГорячиеКлавишиПечать)

	ПустаяКлавиша = ИнтерфейсРМКСлужебныйКлиентСервер.ПредставлениеПустойКлавиши();
	НачалоРаздела = Истина;
	Если НастройкаРМК.ИспользоватьОплатуНаличными И НастройкаРМК.ИспользоватьПанельВводаНаличныхКупюр Тогда
		ОбластьШапкаКупюр = МакетПечати.ПолучитьОбласть("ШапкаКупюр");
		ОбластьРядКупюры = МакетПечати.ПолучитьОбласть("РядКупюры");
		Для Каждого СтрокаКупюры Из НастройкаРМК.ВводНаличных Цикл
			Если ЗначениеЗаполнено(СтрокаКупюры.Клавиша) И Не СтрокаКупюры.Клавиша = ПустаяКлавиша Тогда
				Если НачалоРаздела Тогда
					ГорячиеКлавишиПечать.Вывести(ОбластьШапкаКупюр);
					НачалоРаздела = Ложь;
				КонецЕсли;
				ДобавитьКомбинациюКлавишКупюры(ГорячиеКлавишиПечать, ОбластьРядКупюры, СтрокаКупюры);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьСтроковоеПредставлениеКомбинацииОткрытияПанелиИзбранного(СтрокаКомбинации)
	
	СоставляющаяCtrl = ?(СтрокаКомбинации.АкселераторCtrl, "Ctrl +", "");
	СоставляющаяAlt = ?(СтрокаКомбинации.АкселераторAlt, "Alt +", "");
	СоставляющаяShift = ?(СтрокаКомбинации.АкселераторShift, "Shift +", "");
	
	Возврат СтрШаблон("%1%2%3", СоставляющаяCtrl, СоставляющаяAlt, СоставляющаяShift);
	
КонецФункции

&НаСервере
Функция ОтмеченАкселератор(СтрокаКомбинации)
	Возврат (СтрокаКомбинации.АкселераторAlt Или СтрокаКомбинации.АкселераторCtrl Или СтрокаКомбинации.АкселераторShift);
КонецФункции

&НаСервере
Функция ПредставлениеАкселератора(ЗначениеАкселератора)
	Возврат ?(ЗначениеАкселератора, "V", "");
КонецФункции

&НаСервере
Процедура ДобавитьКомбинациюКлавишКупюры(ГорячиеКлавишиПечать, ОбластьРядКупюры, СтрокаНоминала)
	ОбластьРядКупюры.Параметры.Номинал = СтрокаНоминала.Номинал;
	ОбластьРядКупюры.Параметры.Клавиша = СтрокаНоминала.Клавиша;
	ОбластьРядКупюры.Параметры.Alt = ПредставлениеАкселератора(НастройкаРМК.ВводНаличныхАкселераторAlt);
	ОбластьРядКупюры.Параметры.Ctrl = ПредставлениеАкселератора(НастройкаРМК.ВводНаличныхАкселераторCtrl);
	ОбластьРядКупюры.Параметры.Shift = ПредставлениеАкселератора(НастройкаРМК.ВводНаличныхАкселераторShift);
	ГорячиеКлавишиПечать.Вывести(ОбластьРядКупюры);
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомбинациюКлавишДействия(ГорячиеКлавишиПечать, ОбластьРядДействия, СтрокаКомбинации)
	ОбластьРядДействия.Параметры.Номер = СтрокаКомбинации.НомерСтроки;
	ОбластьРядДействия.Параметры.Действие = СтрокаКомбинации.Действие;
	ОбластьРядДействия.Параметры.Клавиша = СтрокаКомбинации.Клавиша;
	ОбластьРядДействия.Параметры.Alt = ПредставлениеАкселератора(СтрокаКомбинации.АкселераторAlt);
	ОбластьРядДействия.Параметры.Ctrl = ПредставлениеАкселератора(СтрокаКомбинации.АкселераторCtrl);
	ОбластьРядДействия.Параметры.Shift = ПредставлениеАкселератора(СтрокаКомбинации.АкселераторShift);
	ГорячиеКлавишиПечать.Вывести(ОбластьРядДействия);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступностьЭлементовПриПереключенииСервераЛояльности()
	Элементы.НастройкаРМКВыдаватьПодарокНаКассе.Доступность = ИспользоватьСерверЛояльностиПолучательДанных;
	ЗаполнитьТекстПодсказкиСервераЛояльности();
	УстановитьДоступностьПредупрежденияСЛ();
КонецПроцедуры

&НаСервере
Процедура СброситьНастройкиЭлементовФормы()
	Если ПорядковыйНомер = 0 Тогда
		Возврат;
	КонецЕсли;
	Элементы.СтраницыНастройкиРМК.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.СтраницыНастройкиРМК.ТекущаяСтраница = Элементы.СтраницаОбщиеНастройки;
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКоманднойПанели, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИдентификацияНастройки, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСкидкиИОкругление, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплаты, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаШаблоныШтрихкодов, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаДействияСистемы, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнтерфейс, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОсобенностиПродаж, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСерверЛояльности, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаЗаказы, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаSMSПодтверждениеВерх, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаНастройкиПечати, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаНастройкаОкнаПриложения, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКЛокальныйКонтрольКлючаИСМППриИзменении(Элемент)
	УстановитьДоступностьПредупрежденияСЛ();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьНастроекИСМП()
	
	Элементы.НастройкиСканированияКодовМаркировки.Доступность   = НастройкаРМК.ОжидатьРезультатПроверкиМарок;
	Элементы.НастройкаРМКЛокальныйКонтрольКлючаИСМП.Доступность = НастройкаРМК.ОжидатьРезультатПроверкиМарок;
	Элементы.ВвестиКлючАвторизации.Доступность                  = НастройкаРМК.ОжидатьРезультатПроверкиМарок;
	Элементы.ОткрытьСписокCDNПлощадок.Доступность               = НастройкаРМК.ОжидатьРезультатПроверкиМарок;
	Элементы.ПредставлениеЛогированияЗапросов.Видимость         = НастройкаРМК.ОжидатьРезультатПроверкиМарок
																	И ПараметрыЛогирования <> Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПредупрежденияСЛ()
	Если НастройкаРМК.ОжидатьРезультатПроверкиМарок И Не НастройкаРМК.ЛокальныйКонтрольКлючаИСМП
			И Не ИспользоватьСерверЛояльностиПолучательДанных Тогда
		Элементы.ГруппаПредупреждениеСЛ.Видимость = Истина;
	Иначе
		Элементы.ГруппаПредупреждениеСЛ.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область РаботаСПродавцамиИКассирами
&НаКлиенте
Процедура НастройкаРМКНастроитьКассировДляВходаПриИзменении(Элемент)
	УстановитьДоступностьТаблицыКассирыДляВхода();
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьТаблицыКассирыДляВхода()
	Элементы.КассирыДляВхода.Доступность = НастройкаРМК.НастроитьКассировДляВхода;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКРазрешитьВыборПродавцаПриИзменении(Элемент)
	Элементы.НастройкаРМКИспользоватьКассираКакПродавца.Доступность = НастройкаРМК.РазрешитьВыборПродавца И НЕ ДанныеОПродавцахНеПередаются;
	Если НЕ НастройкаРМК.РазрешитьВыборПродавца Тогда
		НастройкаРМК.ИспользоватьКассираКакПродавца = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьПараметрыФормы()
	
	ЦветаФормы = ОбщегоНазначенияРМК.ЦветаФормыРМК();
	
	ИспользоватьУпаковки = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьИспользованиеУпаковок(ИспользоватьУпаковки);
	Элементы.ИерархияТоваровУпаковка.Видимость = ИспользоватьУпаковки;
	
	ВводДисконтныхКарт = Истина;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПараметрыФормыНастроекРабочегоМестаКассира(ЭтотОбъект);
	
	НастройкиПодключения 	= РегистрыСведений.СоответствиеНастроекИнтеграцииРМК.НастроенаОплатаПлатежнойСистемой();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"БИПГруппаИнтеграцияСПлатежнымиСистемами",       
		"Видимость", 
		НастройкиПодключения.ИспользоватьОплатуПлатежнымиСистемами);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"НастройкаРМКИспользоватьОплатуПлатежнымиСистемами",       
		"Видимость", 
		НастройкиПодключения.ИспользоватьОплатуПлатежнымиСистемами);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"БИПНастройкаИнтеграцииСПлатежнымиСистемами",       
		"Видимость", 
		НастройкиПодключения.ИспользоватьОплатуСБП);

	ПодключитьКассовыйQRКод = Ложь;
		
	Если НастройкиПодключения.ИспользоватьОплатуСБП Тогда
		
		ИнтеграцияСПлатежнымиСистемамиРМКПереопределяемый.НастроитьПодключениеКассовойСсылкиВНастройкеРабочегоМеста(
			ПодключитьКассовыйQRКод,
			КассаПодключенияКодаСБП);
			
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"БИППодключитьКассовыйQRКод",       
		"Видимость", 
		ПодключитьКассовыйQRКод);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"БИПНастройкаОнлайнОплат",       
		"Видимость", 
		НастройкиПодключения.ИспользоватьОплатуЮКасса);
	
	// формирование заголовка признака и подсказки	
	ШаблонЗаголовка = НСтр("ru = 'Использовать оплату %1'");
	МассивОплат		= Новый Массив;
	Если НастройкиПодключения.ИспользоватьОплатуСБП Тогда
		МассивОплат.Добавить(НСтр("ru = 'СБП'"));
	КонецЕсли;
	
	Если НастройкиПодключения.ИспользоватьОплатуЮКасса Тогда
		МассивОплат.Добавить(НСтр("ru = 'ЮKassa'"));
	КонецЕсли;
	
	Элементы.НастройкаРМКИспользоватьОплатуПлатежнымиСистемами.Заголовок = СтрШаблон(
		ШаблонЗаголовка, 
		СтрСоединить(МассивОплат, ", "));
		
	ТипГруппировкаВертикальная = "Вертикальная";
	ТипГруппировкаГоризонтальная = "Горизонтальная";
	
КонецПроцедуры

&НаСервере
Функция ИспользоватьШаблоныСообщений()
	
	РезультатФункции = Ложь;
	Если ПодсистемаШаблоновСообщенийСуществует() Тогда
		РезультатФункции = Константы.ИспользоватьШаблоныСообщений.Получить();
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

&НаСервере
Функция ПодсистемаШаблоновСообщенийСуществует()
	
	РезультатФункции = Ложь;
	СтандартныеПодсистемы = Метаданные.Подсистемы.Найти("СтандартныеПодсистемы");
	Если Не СтандартныеПодсистемы = Неопределено Тогда
		РезультатФункции = (СтандартныеПодсистемы.Подсистемы.Найти("ШаблоныСообщений") <> Неопределено);
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция ПодготовитьДанныеДляПроверкиГорячихКлавиш()
	
	РезультатФункции = Новый Структура;
	
	ПустаяКлавиша = ИнтерфейсРМКСлужебныйКлиентСервер.ПредставлениеПустойКлавиши();
	МаксимальныйНомерСтроки = 0;
	
	АкселераторыОткрытияПанелиИзбранных = Новый Структура("Alt,Ctrl,Shift", Ложь, Ложь, Ложь);
	ОсновныеГорячиеКлавиши = ПодготовитьОсновныеГорячиеКлавиши(АкселераторыОткрытияПанелиИзбранных, ПустаяКлавиша,
		МаксимальныйНомерСтроки);
	
	ГорячиеКлавишиКупюр = Новый Массив;
	Если НастройкаРМК.ИспользоватьПанельВводаНаличныхКупюр Тогда
		Для Каждого СтрокаКупюры Из НастройкаРМК.ВводНаличных Цикл
			Если Не (СтрокаКупюры.Клавиша = ПустаяКлавиша Или ПустаяСтрока(СтрокаКупюры.Клавиша)) Тогда
				
				ДобавитьОписаниеГорячейКлавишиКупюры(ГорячиеКлавишиКупюр, СтрокаКупюры);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РезультатФункции.Вставить("ОсновныеГорячиеКлавиши", ОсновныеГорячиеКлавиши);
	РезультатФункции.Вставить("ГорячиеКлавишиКупюр", ГорячиеКлавишиКупюр);
	РезультатФункции.Вставить("АкселераторыОткрытияПанелиИзбранных", АкселераторыОткрытияПанелиИзбранных);
	РезультатФункции.Вставить("МаксимальныйНомерСтроки", МаксимальныйНомерСтроки);
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция ПодготовитьОсновныеГорячиеКлавиши(АкселераторыОткрытияПанелиИзбранных, ПустаяКлавиша, МаксимальныйНомерСтроки)
	
	ОсновныеГорячиеКлавиши = Новый Массив;
	Для Каждого СтрокаГруппы Из ДеревоГорячиеКлавиши.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаГорячаяКлавиша Из СтрокаГруппы.ПолучитьЭлементы() Цикл
			Если Не (СтрокаГорячаяКлавиша.Клавиша = ПустаяКлавиша Или ПустаяСтрока(СтрокаГорячаяКлавиша.Клавиша)) Тогда
				
				ДобавитьОписаниеОсновнойГорячейКлавиши(ОсновныеГорячиеКлавиши, СтрокаГорячаяКлавиша,
					АкселераторыОткрытияПанелиИзбранных);
				
			КонецЕсли;
			Если СтрокаГорячаяКлавиша.НомерСтроки > МаксимальныйНомерСтроки Тогда
				МаксимальныйНомерСтроки = СтрокаГорячаяКлавиша.НомерСтроки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат ОсновныеГорячиеКлавиши;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьОписаниеОсновнойГорячейКлавиши(ОсновныеГорячиеКлавиши, СтрокаГорячаяКлавиша,
		АкселераторыОткрытияПанелиИзбранных)
	
	ИмяЭлементаПанельИзбранных = "ОткрытьПанельИзбранныхТоваров";
	ОписаниеСтроки = Новый Структура();
	ОписаниеСтроки.Вставить("НомерСтроки", СтрокаГорячаяКлавиша.НомерСтроки);
	ОписаниеСтроки.Вставить("ИмяКнопки", СтрокаГорячаяКлавиша.ИмяЭлемента);
	ОписаниеСтроки.Вставить("ЗаголовокКнопки", СтрокаГорячаяКлавиша.Действие);
	ОписаниеСтроки.Вставить("Клавиша", СтрокаГорячаяКлавиша.Клавиша);
	ОписаниеСтроки.Вставить("АкселераторAlt", СтрокаГорячаяКлавиша.АкселераторAlt);
	ОписаниеСтроки.Вставить("АкселераторCtrl", СтрокаГорячаяКлавиша.АкселераторCtrl);
	ОписаниеСтроки.Вставить("АкселераторShift", СтрокаГорячаяКлавиша.АкселераторShift);
	ОсновныеГорячиеКлавиши.Добавить(ОписаниеСтроки);
	
	Если СтрокаГорячаяКлавиша.ИмяЭлемента = ИмяЭлементаПанельИзбранных Тогда
		ЗаполнитьАкселераторыПанелиИзбранныхТоваров(АкселераторыОткрытияПанелиИзбранных, СтрокаГорячаяКлавиша);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОписаниеГорячейКлавишиКупюры(ГорячиеКлавишиКупюр, СтрокаКупюры)
	
	ОписаниеСтрокиКупюры = Новый Структура();
	ОписаниеСтрокиКупюры.Вставить("Номинал", СтрокаКупюры.Номинал);
	ОписаниеСтрокиКупюры.Вставить("Клавиша", СтрокаКупюры.Клавиша);
	ОписаниеСтрокиКупюры.Вставить("АкселераторAlt", НастройкаРМК.ВводНаличныхАкселераторAlt);
	ОписаниеСтрокиКупюры.Вставить("АкселераторCtrl", НастройкаРМК.ВводНаличныхАкселераторCtrl);
	ОписаниеСтрокиКупюры.Вставить("АкселераторShift", НастройкаРМК.ВводНаличныхАкселераторShift);
	ГорячиеКлавишиКупюр.Добавить(ОписаниеСтрокиКупюры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАкселераторыПанелиИзбранныхТоваров(АкселераторыОткрытияПанелиИзбранных, СтрокаГорячаяКлавиша)
	
	АкселераторыОткрытияПанелиИзбранных.Alt = СтрокаГорячаяКлавиша.АкселераторAlt;
	АкселераторыОткрытияПанелиИзбранных.Ctrl = СтрокаГорячаяКлавиша.АкселераторCtrl;
	АкселераторыОткрытияПанелиИзбранных.Shift = СтрокаГорячаяКлавиша.АкселераторShift;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНекорректныеКомбинацииГорячихКлавиш()
	
	ТипНарушенияЗапрещеннаяКомбинация = "ЗапрещеннаяКомбинация";
	ДанныеГорячихКлавиш = ПодготовитьДанныеДляПроверкиГорячихКлавиш();
	ДанныеНекорректныхКомбинаций = ПолучитьОписаниеНекорректныхКомбинацийГорячихКлавиш(ДанныеГорячихКлавиш);
	
	ОтклоненияГорячихКлавиш = Новый Структура();
	ОтклоненияГорячихКлавиш.Вставить("ЕстьДублиГорячихКлавиш", Ложь);
	ОтклоненияГорячихКлавиш.Вставить("ЕстьДублиГорячихКлавишКупюр", Ложь);
	ОтклоненияГорячихКлавиш.Вставить("ЕстьЗапрещенныеКомбинацииГорячихКлавиш", Ложь);
	ОтклоненияГорячихКлавиш.Вставить("ЕстьЗапрещенныеКомбинацииГорячихКлавишКупюр", Ложь);
	
	Для Каждого СтрокаГруппы Из ДеревоГорячиеКлавиши.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаДерева Из СтрокаГруппы.ПолучитьЭлементы() Цикл
			НекорректнаяКомбинация = ПолучитьНекорректнуюКомбинациюПоНомеруСтроки(ДанныеНекорректныхКомбинаций,
				СтрокаДерева.НомерСтроки);
			Если НекорректнаяКомбинация = Неопределено Тогда
				СтрокаДерева.ТипНарушения = "";
			Иначе
				СтрокаДерева.ТипНарушения = НекорректнаяКомбинация.ТипНарушения;
				Если НекорректнаяКомбинация.ТипНарушения = ТипНарушенияЗапрещеннаяКомбинация Тогда
					ОтклоненияГорячихКлавиш.ЕстьЗапрещенныеКомбинацииГорячихКлавиш = Истина;
				Иначе
					ОтклоненияГорячихКлавиш.ЕстьДублиГорячихКлавиш = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если НастройкаРМК.ИспользоватьПанельВводаНаличныхКупюр Тогда
		Для Каждого СтрокаКупюры Из НастройкаРМК.ВводНаличных Цикл
			НекорректнаяКомбинация = ПолучитьНекорректнуюКомбинациюПоНоминалу(ДанныеНекорректныхКомбинаций,
				СтрокаКупюры.Номинал);
			Если НекорректнаяКомбинация = Неопределено Тогда
				СтрокаКупюры.ТипНарушения = "";
			Иначе
				СтрокаКупюры.ТипНарушения = НекорректнаяКомбинация.ТипНарушения;
				Если НекорректнаяКомбинация.ТипНарушения = ТипНарушенияЗапрещеннаяКомбинация Тогда
					ОтклоненияГорячихКлавиш.ЕстьЗапрещенныеКомбинацииГорячихКлавишКупюр = Истина;
				Иначе
					ОтклоненияГорячихКлавиш.ЕстьДублиГорячихКлавишКупюр = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	НастроитьВидимостьИнформацииОНекорректныхКомбинацияхГорячихКлавиш(ОтклоненияГорячихКлавиш);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьИнформацииОНекорректныхКомбинацияхГорячихКлавиш(ОтклоненияГорячихКлавиш)
	
	Если ОтклоненияГорячихКлавиш.ЕстьДублиГорячихКлавиш
			Или ОтклоненияГорячихКлавиш.ЕстьЗапрещенныеКомбинацииГорячихКлавиш Тогда
		Элементы.СтраницыРасшифровкаОшибокГорячихКлавиш.ТекущаяСтраница = Элементы.СтраницаРасшифровкиОшибок;
	Иначе
		Элементы.СтраницыРасшифровкаОшибокГорячихКлавиш.ТекущаяСтраница = Элементы.СтраницаБезРасшифровки;
	КонецЕсли;
	
	Если ОтклоненияГорячихКлавиш.ЕстьДублиГорячихКлавишКупюр
			Или ОтклоненияГорячихКлавиш.ЕстьЗапрещенныеКомбинацииГорячихКлавишКупюр Тогда
		Элементы.СтраницыРасшифровкаОшибокГорячихКлавишКупюр.ТекущаяСтраница = Элементы.СтраницаРасшифровкиОшибокКупюр;
	Иначе
		Элементы.СтраницыРасшифровкаОшибокГорячихКлавишКупюр.ТекущаяСтраница = Элементы.СтраницаБезРасшифровкиКупюр;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНекорректнуюКомбинациюПоНомеруСтроки(ДанныеНекорректныхКомбинаций, НомерСтроки)
	
	Возврат ПолучитьНекорректнуюКомбинациюПоЗначениюКолонки(ДанныеНекорректныхКомбинаций, "НомерСтроки", НомерСтроки);
	
КонецФункции

&НаКлиенте
Функция ПолучитьНекорректнуюКомбинациюПоНоминалу(ДанныеНекорректныхКомбинаций, Номинал)
	
	Возврат ПолучитьНекорректнуюКомбинациюПоЗначениюКолонки(ДанныеНекорректныхКомбинаций, "Номинал", Номинал);
	
КонецФункции

&НаКлиенте
Функция ПолучитьНекорректнуюКомбинациюПоЗначениюКолонки(ДанныеНекорректныхКомбинаций, ИмяКолонки, ЗначениеКолонки)
	
	РезультатФункции = Неопределено;
	
	КоличествоКомбинаций = ДанныеНекорректныхКомбинаций.Количество();
	ИндексКомбинации = 0;
	Пока ИндексКомбинации < КоличествоКомбинаций И РезультатФункции = Неопределено Цикл
		Комбинация = ДанныеНекорректныхКомбинаций[ИндексКомбинации];
		ЗначениеКомбинации = Неопределено;
		Комбинация.Свойство(ИмяКолонки, ЗначениеКомбинации);
		Если ЗначениеКомбинации = ЗначениеКолонки Тогда
			РезультатФункции = Комбинация;
		КонецЕсли;
		ИндексКомбинации = ИндексКомбинации + 1;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеНекорректныхКомбинацийГорячихКлавиш(Знач ДанныеГорячихКлавиш)
	
	ТаблицыГорячихКлавиш = ПодготовитьТаблицыГорячихКлавиш(ДанныеГорячихКлавиш);
	ТаблицаСтрокНекорректныхКомбинаций
		= Справочники.НастройкиРабочегоМестаКассира.ПолучитьСтрокиНекорректныхКомбинацийГорячихклавиш(ТаблицыГорячихКлавиш);
		
	НекорректныеКомбинации = Новый Массив;
	Для Каждого СтрокаНекорректнойКомбинации Из ТаблицаСтрокНекорректныхКомбинаций Цикл
		
		ДанныеНекорректнойКомбинации = Новый Структура();
		ДанныеНекорректнойКомбинации.Вставить("ТипНарушения", СтрокаНекорректнойКомбинации.ТипНарушения);
		ДанныеНекорректнойКомбинации.Вставить("НомерСтроки", СтрокаНекорректнойКомбинации.НомерСтроки);
		ДанныеНекорректнойКомбинации.Вставить("Номинал", СтрокаНекорректнойКомбинации.Номинал);
		
		НекорректныеКомбинации.Добавить(ДанныеНекорректнойКомбинации);
		
	КонецЦикла;
	Возврат НекорректныеКомбинации;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПодготовитьТаблицыГорячихКлавиш(ДанныеГорячихКлавиш)
	
	ОсновныеГорячиеКлавиши = Справочники.НастройкиРабочегоМестаКассира.ПолучитьШаблонТаблицыГорячихКлавиш();
	ГорячиеКлавишиКупюр = Справочники.НастройкиРабочегоМестаКассира.ПолучитьШаблонТаблицыГорячихКлавишКупюр();
	ГорячиеКлавишиИзбранное = Справочники.НастройкиРабочегоМестаКассира.ПолучитьШаблонТаблицыГорячихКлавиш();
	
	Для Каждого СтруктураГорячаяКлавиша Из ДанныеГорячихКлавиш.ОсновныеГорячиеКлавиши Цикл
		НоваяСтрока = ОсновныеГорячиеКлавиши.Добавить();
		НоваяСтрока.НомерСтроки = СтруктураГорячаяКлавиша.НомерСтроки;
		НоваяСтрока.ИмяКнопки = СтруктураГорячаяКлавиша.ИмяКнопки;
		НоваяСтрока.ЗаголовокКнопки = СтруктураГорячаяКлавиша.ЗаголовокКнопки;
		НоваяСтрока.Клавиша = СтруктураГорячаяКлавиша.Клавиша;
		НоваяСтрока.АкселераторAlt = СтруктураГорячаяКлавиша.АкселераторAlt;
		НоваяСтрока.АкселераторCtrl = СтруктураГорячаяКлавиша.АкселераторCtrl;
		НоваяСтрока.АкселераторShift = СтруктураГорячаяКлавиша.АкселераторShift;
	КонецЦикла;
	
	Для Каждого СтруктураКлавишаКупюры Из ДанныеГорячихКлавиш.ГорячиеКлавишиКупюр Цикл
		НоваяСтрока = ГорячиеКлавишиКупюр.Добавить();
		НоваяСтрока.Номинал = СтруктураКлавишаКупюры.Номинал;
		НоваяСтрока.Клавиша = СтруктураКлавишаКупюры.Клавиша;
		НоваяСтрока.АкселераторAlt = СтруктураКлавишаКупюры.АкселераторAlt;
		НоваяСтрока.АкселераторCtrl = СтруктураКлавишаКупюры.АкселераторCtrl;
		НоваяСтрока.АкселераторShift = СтруктураКлавишаКупюры.АкселераторShift;
	КонецЦикла;
	
	АкселераторыИзбранныхТоваров = ДанныеГорячихКлавиш.АкселераторыОткрытияПанелиИзбранных;
	Если АкселераторыИзбранныхТоваров.Alt
		Или АкселераторыИзбранныхТоваров.Ctrl
		Или АкселераторыИзбранныхТоваров.Shift Тогда
		
		ПозицияСтроки = ДанныеГорячихКлавиш.МаксимальныйНомерСтроки + 1;
		НомерПП = 0;
		Пока НомерПП < 10 Цикл
			НоваяСтрока = ГорячиеКлавишиИзбранное.Добавить();
			НоваяСтрока.НомерСтроки = ПозицияСтроки + НомерПП;
			НоваяСтрока.ЗаголовокКнопки = СтрШаблон(НСтр("ru = 'ИзбранныйТовар%1'"), НомерПП);
			НоваяСтрока.ИмяКнопки = НоваяСтрока.ЗаголовокКнопки;
			НоваяСтрока.Клавиша = СтрШаблон("_%1", НомерПП);
			НоваяСтрока.АкселераторAlt = АкселераторыИзбранныхТоваров.Alt;
			НоваяСтрока.АкселераторCtrl = АкселераторыИзбранныхТоваров.Ctrl;
			НоваяСтрока.АкселераторShift = АкселераторыИзбранныхТоваров.Shift;
			
			НомерПП = НомерПП + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	РезультатФункции = Новый Структура();
	РезультатФункции.Вставить("ОсновныеГорячиеКлавиши", ОсновныеГорячиеКлавиши);
	РезультатФункции.Вставить("ГорячиеКлавишиКупюр", ГорячиеКлавишиКупюр);
	РезультатФункции.Вставить("ГорячиеКлавишиИзбранное", ГорячиеКлавишиИзбранное);
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ДеревоГорячиеКлавишиАкселераторAltПриИзмененииКлиент()
	ПроверитьНекорректныеКомбинацииГорячихКлавиш();
	ТекущаяСтрокаГорячейКлавиши = Элементы.ДеревоГорячиеКлавиши.ТекущаяСтрока;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоГорячиеКлавишиАкселераторCtrlПриИзмененииКлиент()
	ПроверитьНекорректныеКомбинацииГорячихКлавиш();
	ТекущаяСтрокаГорячейКлавиши = Элементы.ДеревоГорячиеКлавиши.ТекущаяСтрока;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоГорячиеКлавишиАкселераторShiftПриИзмененииКлиент()
	ПроверитьНекорректныеКомбинацииГорячихКлавиш();
	ТекущаяСтрокаГорячейКлавиши = Элементы.ДеревоГорячиеКлавиши.ТекущаяСтрока;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКВводНаличныхАкселераторAltПриИзмененииКлиент()
	ПроверитьНекорректныеКомбинацииГорячихКлавиш();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКВводНаличныхАкселераторCtrlПриИзмененииКлиент()
	ПроверитьНекорректныеКомбинацииГорячихКлавиш();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКВводНаличныхАкселераторShiftПриИзмененииКлиент()
	ПроверитьНекорректныеКомбинацииГорячихКлавиш();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКВводНаличныхПриАктивизацииСтрокиКлиент()
	ОбработатьСходСоСтрокиКупюры();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСходСоСтрокиКупюры(СменаСтраницы = Ложь)
	
	ТипНарушенияЗапрещеннаяКомбинация = "ЗапрещеннаяКомбинация";
	ТекущиеДанныеКупюры = Неопределено;
	Если Не ТекущаяСтрокаКупюры = Неопределено Тогда
		ТекущиеДанныеКупюры = НастройкаРМК.ВводНаличных.НайтиПоИдентификатору(ТекущаяСтрокаКупюры);
	КонецЕсли;
	Если СменаСтраницы Тогда
		Если (Не ТекущиеДанныеКупюры = Неопределено)
				И СтрНайти(ТекущиеДанныеКупюры.ТипНарушения, ТипНарушенияЗапрещеннаяКомбинация) > 0 Тогда
			Элементы.СтраницыНастройкиРМК.ТекущаяСтраница = Элементы.СтраницаВводНаличных;
			ТекстПредупреждения = СформироватьПредупреждениеЗапртеКомбинацииДляСтрокиНоминала(ТекущиеДанныеКупюры);
			ПоказатьПредупреждение(, ТекстПредупреждения);
		Иначе
			ТекущаяСтрокаКупюры = Неопределено;
		КонецЕсли;
	ИначеЕсли Не ТекущаяСтрокаКупюры = Элементы.НастройкаРМКВводНаличных.ТекущаяСтрока Тогда
		Если (Не ТекущиеДанныеКупюры = Неопределено)
				И СтрНайти(ТекущиеДанныеКупюры.ТипНарушения, ТипНарушенияЗапрещеннаяКомбинация) > 0 Тогда
			ТекстПредупреждения = СформироватьПредупреждениеЗапртеКомбинацииДляСтрокиНоминала(ТекущиеДанныеКупюры);
			ОписаниеЗавершенияПредупреждения = Новый ОписаниеОповещения("ОбработатьСходСоСтрокиКупюрыЗавершение",
				ЭтотОбъект, ТекущаяСтрокаКупюры);
			ПоказатьПредупреждение(ОписаниеЗавершенияПредупреждения, ТекстПредупреждения);
		Иначе
			ТекущаяСтрокаКупюры = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСходСоСтрокиГорячейКлавиши(СменаСтраницы = Ложь)
	
	ТипНарушенияЗапрещеннаяКомбинация = "ЗапрещеннаяКомбинация";
	ТекущиеДанныеГорячейКлавиши = Неопределено;
	Если Не ТекущаяСтрокаГорячейКлавиши = Неопределено Тогда
		ТекущиеДанныеГорячейКлавиши = ДеревоГорячиеКлавиши.НайтиПоИдентификатору(ТекущаяСтрокаГорячейКлавиши);
	КонецЕсли;
	Если СменаСтраницы Тогда
		Если (Не ТекущиеДанныеГорячейКлавиши = Неопределено)
				И СтрНайти(ТекущиеДанныеГорячейКлавиши.ТипНарушения, ТипНарушенияЗапрещеннаяКомбинация) > 0 Тогда
			Элементы.СтраницыНастройкиРМК.ТекущаяСтраница = Элементы.СтраницаГорячиеКлавиши;
			ТекстПредупреждения
				= СформироватьПредупреждениеЗапретКомбинацииДляСтрокиГорячейКлавиши(ТекущиеДанныеГорячейКлавиши);
			ПоказатьПредупреждение(, ТекстПредупреждения);
		Иначе
			ТекущаяСтрокаГорячейКлавиши = Неопределено;
		КонецЕсли;
	ИначеЕсли Не ТекущаяСтрокаГорячейКлавиши = Элементы.ДеревоГорячиеКлавиши.ТекущаяСтрока Тогда
		
		Если (Не ТекущиеДанныеГорячейКлавиши = Неопределено)
				И СтрНайти(ТекущиеДанныеГорячейКлавиши.ТипНарушения, ТипНарушенияЗапрещеннаяКомбинация) > 0 Тогда
			ТекстПредупреждения
				= СформироватьПредупреждениеЗапретКомбинацииДляСтрокиГорячейКлавиши(ТекущиеДанныеГорячейКлавиши);
			ОписаниеЗавершенияПредупреждения = Новый ОписаниеОповещения("ОбработатьСходСоСтрокиГорячейКлавишиЗавершение",
				ЭтотОбъект, ТекущаяСтрокаГорячейКлавиши);
			ПоказатьПредупреждение(ОписаниеЗавершенияПредупреждения, ТекстПредупреждения);
		Иначе
			ТекущаяСтрокаГорячейКлавиши = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьПредупреждениеЗапртеКомбинацииДляСтрокиНоминала(ТекущиеДанныеКупюры)
	
	СоставляющаяCtrl = ?(НастройкаРМК.ВводНаличныхАкселераторCtrl, "Ctrl + ", "");
	СоставляющаяAlt = ?(НастройкаРМК.ВводНаличныхАкселераторAlt, "Alt + ", "");
	СоставляющаяShift = ?(НастройкаРМК.ВводНаличныхАкселераторShift, "Shift + ", "");
	СтроковоеПредставлениеКомбинации = СтрШаблон("%1%2%3%4",
		СоставляющаяCtrl, СоставляющаяAlt, СоставляющаяShift, ТекущиеДанныеКупюры.Клавиша);
	
	ТекстНачала = НСтр("ru = 'Комбинация'");
	ТекстОкончания = НСтр("ru = 'является недопустимой. Выберите другую комбинацию.'");
	
	РезультатФункции = СтрШаблон("%1 %2 %3", ТекстНачала, СтроковоеПредставлениеКомбинации, ТекстОкончания);
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция СформироватьПредупреждениеЗапретКомбинацииДляСтрокиГорячейКлавиши(ТекущиеДанныеГорячейКлавиши)
	
	ТипНарушенияЗапрещеннаяКомбинацияБуфер = "ЗапрещеннаяКомбинацияБуфер";
	
	СоставляющаяCtrl = ?(ТекущиеДанныеГорячейКлавиши.АкселераторCtrl, "Ctrl + ", "");
	СоставляющаяAlt = ?(ТекущиеДанныеГорячейКлавиши.АкселераторAlt, "Alt + ", "");
	СоставляющаяShift = ?(ТекущиеДанныеГорячейКлавиши.АкселераторShift, "Shift + ", "");
	СтроковоеПредставлениеКомбинации = СтрШаблон("%1%2%3%4",
		СоставляющаяCtrl, СоставляющаяAlt, СоставляющаяShift, ТекущиеДанныеГорячейКлавиши.Клавиша);
	
	ТекстНачала = НСтр("ru = 'Комбинация'");
	ТекстОкончания = НСтр("ru = 'является недопустимой. Выберите другую комбинацию.'");
	Если ТекущиеДанныеГорячейКлавиши.ТипНарушения = ТипНарушенияЗапрещеннаяКомбинацияБуфер Тогда
		ТекстНедопустимаяКомбинация = НСтр("ru = 'является недопустимой для действия ""'");
		ТекстДругаяКомбинация = НСтр("ru = '"". Выберите другую комбинацию.'");
		ТекстОкончания = СтрШаблон("%1%2%3", ТекстНедопустимаяКомбинация,
			ТекущиеДанныеГорячейКлавиши.Действие, ТекстДругаяКомбинация);
	КонецЕсли;
	РезультатФункции = СтрШаблон("%1 %2 %3", ТекстНачала, СтроковоеПредставлениеКомбинации, ТекстОкончания);
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьСходСоСтрокиКупюрыЗавершение(ТекущаяСтрокаКупюры) Экспорт
	
	Элементы.НастройкаРМКВводНаличных.ТекущаяСтрока = ТекущаяСтрокаКупюры;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСходСоСтрокиГорячейКлавишиЗавершение(ТекущаяСтрокаГорячейКлавиши) Экспорт
	
	Элементы.ДеревоГорячиеКлавиши.ТекущаяСтрока = ТекущаяСтрокаГорячейКлавиши;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыНастройкиРМКПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Не ТекущаяСтрокаКупюры = Неопределено Тогда
		ОбработатьСходСоСтрокиКупюры(Истина);
	ИначеЕсли Не ТекущаяСтрокаГорячейКлавиши = Неопределено Тогда
		ОбработатьСходСоСтрокиГорячейКлавиши(Истина);
	КонецЕсли;
	Если ТекущаяСтраница = Элементы.СтраницаОкноПриложения Тогда
		ЗаполнитьДеревоОбластейФормы();
		РазвернутьСтрокиДерева();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоГорячиеКлавишиПриАктивизацииСтрокиКлиент()
	ОбработатьСходСоСтрокиГорячейКлавиши();
КонецПроцедуры

&НаСервере
Процедура АктуализироватьНастройкиОборудования()
	
	УстройстваПоТипам = Новый Структура();
	ЭлектронныеВесыРабочегоМеста = ОбщегоНазначенияРМК.ПолучитьПодключенноеОборудованиеПоТипу("ЭлектронныеВесы",
		НастройкаРМК.РабочееМесто);
	Если РаботаСУстройствамиРаспознавания Тогда
		УстройстваРаспознаванияРабочегоМеста
			= ОбщегоНазначенияРМК.ПолучитьПодключенноеОборудованиеПоТипу("УстройствоРаспознавания", НастройкаРМК.РабочееМесто);
	Иначе
		УстройстваРаспознаванияРабочегоМеста = Новый Массив;
	КонецЕсли;
	УстройстваПоТипам.Вставить("ЭлектронныеВесыРабочегоМеста", ЭлектронныеВесыРабочегоМеста);
	УстройстваПоТипам.Вставить("УстройстваРаспознаванияРабочегоМеста", УстройстваРаспознаванияРабочегоМеста);
	
	АктуализироватьОтображениеСтраницыОборудования(УстройстваПоТипам);
	ЗаполнитьКомплектациюОборудованияПоДаннымИБ(УстройстваПоТипам);
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьОтображениеСтраницыОборудования(УстройстваПоТипам)

	ЭлектронныеВесыРабочегоМеста = УстройстваПоТипам.ЭлектронныеВесыРабочегоМеста;
	УстройстваРаспознаванияРабочегоМеста = УстройстваПоТипам.УстройстваРаспознаванияРабочегоМеста;
	Если ЭлектронныеВесыРабочегоМеста.Количество() > 0 И УстройстваРаспознаванияРабочегоМеста.Количество() > 0 Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.СтраницаОборудование, Истина);
		ДоступныеЭлектронныеВесы.ЗагрузитьЗначения(ЭлектронныеВесыРабочегоМеста);
		КолонкаУстройствоРаспознавания = Элементы.УстройстваРаспознаванияЭлектронныхВесовУстройствоРаспознавания;
		КолонкаУстройствоРаспознавания.СписокВыбора.ЗагрузитьЗначения(УстройстваРаспознаванияРабочегоМеста);
	Иначе
		УстановитьВидимостьЭлементаФормы(Элементы.СтраницаОборудование, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКомплектациюОборудованияПоДаннымИБ(УстройстваПоТипам = Неопределено)
	
	Если УстройстваПоТипам = Неопределено Тогда
		КолонкаУстройствоРаспознавания = Элементы.УстройстваРаспознаванияЭлектронныхВесовУстройствоРаспознавания;
		УстройстваРаспознавания = КолонкаУстройствоРаспознавания.СписокВыбора.ВыгрузитьЗначения();
		УстройстваПоТипам = Новый Структура();
		УстройстваПоТипам.Вставить("ЭлектронныеВесыРабочегоМеста", ДоступныеЭлектронныеВесы.ВыгрузитьЗначения());
		УстройстваПоТипам.Вставить("УстройстваРаспознаванияРабочегоМеста", УстройстваРаспознавания);
	КонецЕсли;
	ЗаполнитьУстройстваРаспознаванияЭлектронныхВесовПоДаннымИБ(УстройстваПоТипам);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУстройстваРаспознаванияЭлектронныхВесовПоДаннымИБ(УстройстваПоТипам)

	РегистрКомплектации = РегистрыСведений.КомплектацияПодключаемогоОборудования;
	УстройстваРаспознаванияЭлектронныхВесов.Очистить();
	ЭлектронныеВесыРабочегоМеста = УстройстваПоТипам.ЭлектронныеВесыРабочегоМеста;
	УстройстваРаспознаванияРабочегоМеста = УстройстваПоТипам.УстройстваРаспознаванияРабочегоМеста;
	ЗапросКомплектации = Новый Запрос;
	ЗапросКомплектации.Текст = РегистрКомплектации.ПолучитьТекстЗапросаУстройствРаспознаванияЭлектронныхВесов();
	ЗапросКомплектации.УстановитьПараметр("ЭлектронныеВесы", ЭлектронныеВесыРабочегоМеста);
	ЗапросКомплектации.УстановитьПараметр("УстройстваРаспознавания", УстройстваРаспознаванияРабочегоМеста);
	РезультатЗапроса = ЗапросКомплектации.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = УстройстваРаспознаванияЭлектронныхВесов.Добавить();
			НоваяСтрока.ЭлектронныеВесы = Выборка.ЭлектронныеВесыСсылка;
			НоваяСтрока.УстройствоРаспознавания = Выборка.УстройствоРаспознаванияСсылка;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьУстройстваРаспознаванияЭлектронныхВесов()
	
	ЭлектронныеВесыРабочегоМеста = ДоступныеЭлектронныеВесы.ВыгрузитьЗначения();
	КолонкаУстройствоРаспознавания = Элементы.УстройстваРаспознаванияЭлектронныхВесовУстройствоРаспознавания;
	УстройстваРаспознаванияРабочегоМеста = КолонкаУстройствоРаспознавания.СписокВыбора.ВыгрузитьЗначения();
	
	УстройстваРабочегоМеста = Новый Структура;
	УстройстваРабочегоМеста.Вставить("ЭлектронныеВесы", ЭлектронныеВесыРабочегоМеста);
	УстройстваРабочегоМеста.Вставить("УстройстваРаспознавания", УстройстваРаспознаванияРабочегоМеста);
	ТаблицаУстройств = УстройстваРаспознаванияЭлектронныхВесов.Выгрузить();
	ОбщегоНазначенияРМК.ЗаписатьУстройстваРаспознаванияЭлектронныхВесов(ТаблицаУстройств, УстройстваРабочегоМеста);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеКомплектацииОборудования()
	
	РезультатФункции = "";
	ИндексСтроки = 0;
	Для Каждого СтрокаОборудования Из УстройстваРаспознаванияЭлектронныхВесов Цикл
		ИндексСтроки = ИндексСтроки + 1;
		Если Не (ЗначениеЗаполнено(СтрокаОборудования.ЭлектронныеВесы)
				И ЗначениеЗаполнено(СтрокаОборудования.УстройствоРаспознавания)) Тогда
			
			ТекстОшибки
				= СтрШаблон(НСтр("ru = 'Заполните оборудование в строке %1 таблицы устройств распознавания электронных весов.'"),
					ИндексСтроки);
			СимволПереноса = ?(РезультатФункции = "" , "", Символы.ПС);
			РезультатФункции = СтрШаблон("%1%2%3", РезультатФункции, СимволПереноса, ТекстОшибки);
			
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьЖурналаДействийКассира()

	ВедениеЖурнала = НастройкаРМК.ВестиЖурналДействийКассира;
	Элементы.ПерейтиВЖурналДействий.Доступность = ВедениеЖурнала;
	Элементы.НастройкаРМКСрокХраненияОперацийСЧеком.Доступность = ВедениеЖурнала;
	УстановитьДоступностьОчисткиЖурналаДействийКассира(ВедениеЖурнала);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПоляТаймаут()
	
	Элементы.НастройкаРМКТаймаутСерверЛояльности.Доступность = НастройкаРМК.РаботаВРежимеМедленногоСоединения;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьНастроекРаспознавания()
	Элементы.ГруппаНастроекРаспознавания.Доступность = УстройствоРаспознаванияВыбрано();
КонецПроцедуры

&НаКлиенте
Функция УстройствоРаспознаванияВыбрано()
	
	РезультатФункции = Ложь;
	КоличествоСтрокОборудования = УстройстваРаспознаванияЭлектронныхВесов.Количество();
	ИндексСтроки = 0;
	Пока ИндексСтроки < КоличествоСтрокОборудования И Не РезультатФункции Цикл
		
		СтрокаКомплектации = УстройстваРаспознаванияЭлектронныхВесов.Получить(ИндексСтроки);
		Если ЗначениеЗаполнено(СтрокаКомплектации.УстройствоРаспознавания) Тогда
			РезультатФункции = Истина;
		КонецЕсли;
		
		ИндексСтроки = ИндексСтроки + 1;
		
	КонецЦикла;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура РаботаВРежимеМедленногоСоединенияПриИзмененииКлиент()
	
	УстановитьДоступностьПоляТаймаут();
	Если Не НастройкаРМК.РаботаВРежимеМедленногоСоединения Тогда
		НастройкаРМК.ТаймаутСерверЛояльности = 0;
	КонецЕсли;
	УстановитьНастройкиПолногоРасчетаСкидок();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьОчисткиЖурналаДействийКассира(ВедениеЖурнала = Истина)
	
	ОчисткаДоступна = Ложь;
	Если ВедениеЖурнала Тогда
		СрокХранения = НастройкаРМК.СрокХраненияОперацийСЧеком;
		ОчисткаДоступна = (ЗначениеЗаполнено(СрокХранения) И Не ЭтоСрокХраненияВесьПериод(СрокХранения));
	КонецЕсли;
	Элементы.ОчиститьЖурналДействийКассиров.Доступность = ОчисткаДоступна;
	Элементы.ОчисткаЖурналаДействийКассира.Доступность = ОчисткаДоступна;
	УстановитьТекстНадписиРегламентнойНастройки(Элементы.ОчисткаЖурналаДействийКассира,
		РасписаниеОчисткиЖурналаДействийКассира);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоСрокХраненияВесьПериод(СрокХранения)
	
	Возврат ОбщегоНазначенияРМК.ЭтоСрокХраненияВесьПериод(СрокХранения);
	
КонецФункции

&НаСервере
Процедура УстановитьНастройкиЗаданий()
	
	УстановитьПривилегированныйРежим(Истина);
	ЗаданиеМетаданные = Метаданные.РегламентныеЗадания.ОчисткаЖурналаДействийКассира;
	УстановитьНастройкуЗадания(ЗаданиеМетаданные, РасписаниеОчисткиЖурналаДействийКассира,
		НастройкаРМК.СрокХраненияОперацийСЧеком);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкуЗадания(ЗаданиеМетаданные, РеквизитФормыРасписание, СрокХранения)

	Отбор = Новый Структура("Метаданные", ЗаданиеМетаданные);
	РегЗадание = Неопределено;
	#Если Не МобильноеПриложениеСервер Тогда
	ТекущиеЗадания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Если ЗначениеЗаполнено(ТекущиеЗадания) Тогда
		РегЗадание = ТекущиеЗадания[0];
	КонецЕсли;
	#КонецЕсли
	
	Если Не РегЗадание = Неопределено Тогда
		РеквизитФормыРасписание = РегЗадание.Расписание;
		ИспользованиеЗадания
			= (ЗначениеЗаполнено(СрокХранения) И Не ОбщегоНазначенияРМК.ЭтоСрокХраненияВесьПериод(СрокХранения));
		
		Элемент = Элементы[ЗаданиеМетаданные.Имя];
		Элемент.Доступность = ИспользованиеЗадания;
		УстановитьТекстНадписиРегламентнойНастройкиПриСоздании(
			РегЗадание,
			Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстНадписиРегламентнойНастройкиПриСоздании(Задание, Элемент)
	
	Если Задание = Неопределено Тогда
		ТекстРасписания = НСтр("ru = '<Расписание очистки не задано>'");
	Иначе
		ТекстЗадания = НСтр("ru = 'Расписание'");
		
		Если Задание.Использование Тогда
			ТекстРасписания = СтрШаблон(НСтр("ru = '%1: %2'"), ТекстЗадания, Строка(Задание.Расписание));
		Иначе
			ТекстРасписания = СтрШаблон(НСтр("ru = '%1 (НЕ АКТИВНО)'"), ТекстЗадания);
		КонецЕсли;
	КонецЕсли;
	Элемент.Заголовок = ТекстРасписания;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстНадписиРегламентнойНастройки(ЭлементЗадания, РасписаниеЗадания)
	
	ТекстЗадания = НСтр("ru = 'Расписание'");
	Если ЭлементЗадания.Доступность Тогда
		ТекстРасписания = СтрШаблон(НСтр("ru = '%1: %2'"), ТекстЗадания, Строка(РасписаниеЗадания));
	Иначе
		ТекстРасписания = СтрШаблон(НСтр("ru = '%1 (НЕ АКТИВНО)'"), ТекстЗадания);
	КонецЕсли;;
	ЭлементЗадания.Заголовок = ТекстРасписания;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеОчистки(Команда)
	
	Контекст = Новый Структура();
	Контекст.Вставить("ИмяЗадания", "");
	Контекст.Вставить("ИмяРеквизита", "");
	Если Команда = Команды.НастроитьРасписаниеОчисткиЖурналаДействийКассиров Тогда
		Контекст.ИмяЗадания		= "ОчисткаЖурналаДействийКассира";
		Контекст.ИмяРеквизита	= "РасписаниеОчисткиЖурналаДействийКассира";
	КонецЕсли;
	
	РасписаниеРегламентногоЗадания = ЭтаФорма[Контекст.ИмяРеквизита];
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		#Если Не МобильноеПриложениеКлиент Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
		#КонецЕсли
	КонецЕсли;
	Если Не РасписаниеРегламентногоЗадания = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеОчисткиОпераций", ЭтотОбъект, Контекст);
		Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
		Диалог.Показать(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеОчисткиОпераций(РасписаниеЗадания, Контекст) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма[Контекст.ИмяРеквизита] = РасписаниеЗадания;
	ИмяРеквизитаМодификации = СтрШаблон("%1Изменено", Контекст.ИмяРеквизита);
	ЭтаФорма[ИмяРеквизитаМодификации] = Истина;
	ЭлементЗадания = Элементы[Контекст.ИмяЗадания];
	УстановитьТекстНадписиРегламентнойНастройки(ЭлементЗадания, РасписаниеЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЖурналДействийКассировКлиент()
	
	ПараметрыОчистки = Новый Массив;
	Если ТекущийЭлемент = Элементы.ОчиститьЖурналДействийКассиров Тогда
		ИмяФоновогоЗадания = "ОчисткаЖурналаДействийКассира";
		ИмяПроцедуры = "ОбщегоНазначенияРМК.ОчиститьИсториюЖурналаДействийКассираСОтбором";
		ПараметрыОчистки.Добавить(НастройкаРМК.РабочееМесто);
		ПараметрыОчистки.Добавить(НастройкаРМК.СрокХраненияОперацийСЧеком);
	КонецЕсли;
	
	Результат = ОчиститьИсториюОперацийНаСервере(ИмяФоновогоЗадания, ИмяПроцедуры, ПараметрыОчистки);
	Если Результат Тогда
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьДоступностьКнопокОчистка", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОчиститьИсториюОперацийНаСервере(ИмяФоновогоЗадания, ИмяПроцедуры, ПараметрыОчистки)
	
	Задание = ФоновыеЗадания.Выполнить(ИмяПроцедуры, ПараметрыОчистки);
	Задание = Задание.ОжидатьЗавершенияВыполнения(2);
	Возврат Задание.Состояние = СостояниеФоновогоЗадания.Активно;
	
КонецФункции

&НаСервереБезКонтекста
Функция АктивностьФоновыхЗаданийНаСервере()
	
	Результат = Новый Структура();
	
	Отбор = Новый Структура();

	Отбор.Вставить("ИмяМетода", "ОбщегоНазначенияРМК.ОчиститьИсториюЖурналаДействийКассираСОтбором");
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	Массив = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Результат.Вставить("ОчиститьИсториюЖурналаДействийКассира", Массив.Количество()>0);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_УстановитьДоступностьКнопокОчистка()
	
	АктивностьФоновыхЗаданий = АктивностьФоновыхЗаданийНаСервере();
	Если АктивностьФоновыхЗаданий.ОчиститьИсториюЖурналаДействийКассира Тогда
		Элементы.ОчиститьЖурналДействийКассиров.Доступность = Ложь;
		Элементы.ОчиститьЖурналДействийКассиров.Заголовок = НСтр("ru = 'Очищается...'");
	Иначе
		Элементы.ОчиститьЖурналДействийКассиров.Доступность = Истина;
		Элементы.ОчиститьЖурналДействийКассиров.Заголовок = НСтр("ru = 'Очистить'");
	КонецЕсли;
	
	Если АктивностьФоновыхЗаданий.ОчиститьИсториюЖурналаДействийКассира Тогда
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьДоступностьКнопокОчистка", 2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьРасписанияНастроек()
	СохранитьРасписаниеОчисткиЖурналаДействийКассира();
КонецПроцедуры

&НаСервере
Процедура СохранитьРасписаниеОчисткиЖурналаДействийКассира()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура("Метаданные", Метаданные.РегламентныеЗадания.ОчисткаЖурналаДействийКассира);
	ТекущиеЗадания	= РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	РасписаниеИзменено = (РасписаниеОчисткиЖурналаДействийКассираИзменено
		И Не РасписаниеОчисткиЖурналаДействийКассира = Неопределено);
	ИспользованиеЗадания = (Элементы.ОчисткаЖурналаДействийКассира.Доступность
		И Не РасписаниеОчисткиЖурналаДействийКассира = Неопределено);
	
	Если ЗначениеЗаполнено(ТекущиеЗадания) Тогда
		
		РасписаниеЗадания = РасписаниеОчисткиЖурналаДействийКассира;
		Если РасписаниеЗадания = Неопределено Тогда
			РасписаниеЗадания = Новый РасписаниеРегламентногоЗадания;
		КонецЕсли;
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Использование", ИспользованиеЗадания);
		ПараметрыЗадания.Вставить("Расписание", РасписаниеЗадания);
		Для Каждого ТекущееЗадание Из ТекущиеЗадания Цикл
			РегламентныеЗаданияСервер.ИзменитьЗадание(ТекущееЗадание, ПараметрыЗадания);
		КонецЦикла;
		
	ИначеЕсли ИспользованиеЗадания Тогда
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Использование", ИспользованиеЗадания);
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОчисткаЖурналаДействийКассира);
		ПараметрыЗадания.Вставить("Ключ", Строка(Новый УникальныйИдентификатор));
		ПараметрыЗадания.Вставить("Расписание", РасписаниеОчисткиЖурналаДействийКассира);
		
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
		
	КонецЕсли;
	РасписаниеОчисткиЖурналаДействийКассираИзменено = Ложь;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекстПодсказкиСервераЛояльности()
	
	ТекстПодсказкиБонусы = НСтр("ru='Принимать оплату по данным бонусного баланса карты из управляющей системы.'");
	ОбщегоНазначенияРМККлиентПереопределяемый.ТекстПодсказкиИспользованиеБонусныхБаллов(ТекстПодсказкиБонусы, ИспользоватьСерверЛояльностиПолучательДанных);
	Элементы.НастройкаРМКИспользоватьОплатуБонусамиРасширеннаяПодсказка.Заголовок = ТекстПодсказкиБонусы;
	
	ТекстПодсказкиСертификат = НСтр("ru='Принимать оплату по данным статуса и баланса сертификата из управляющей системы.'");
	ОбщегоНазначенияРМККлиентПереопределяемый.ТекстПодсказкиИспользованиеБонусныхБаллов(ТекстПодсказкиБонусы, ИспользоватьСерверЛояльностиПолучательДанных);
	Элементы.НастройкаРМКИспользоватьОплатуСертификатамиРасширеннаяПодсказка.Заголовок = ТекстПодсказкиБонусы;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьДобавленияМодификатора()
	
	ТекущаяСтрока = ТекущаяСтрокаДереваТоваров();
	ДобавлениеДоступно = Не (ТекущаяСтрока = КореньДерева() Или ТекущаяСтрока = Неопределено
		Или ЗначениеЗаполнено(ТекущаяСтрока.Палитра));
	Элементы.ИерархияТоваровДобавитьМодификатор.Доступность = ДобавлениеДоступно;
	Элементы.ИерархияТоваровКонтекстноеМенюДобавитьМодификатор.Доступность = ДобавлениеДоступно;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьБлижайшуюГруппу(ИсходныйЭлемент)
	
	РезультатФункции = Неопределено;
	КорневойЭлемент = КореньДерева();
	Если ИсходныйЭлемент = Неопределено Тогда
		РезультатФункции = КорневойЭлемент;
	Иначе
		ЭлементПалитры = ИсходныйЭлемент;
		Пока Не (ЭлементПалитры.ЭтоКатегория Или ЭлементПалитры = КорневойЭлемент) Цикл
			ЭлементПалитры = ЭлементПалитры.ПолучитьРодителя();
		КонецЦикла;
		РезультатФункции = ЭлементПалитры;
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуВыбораПалитры(ОповещениеВыбораПалитры)
	
	НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ПравоеЗначение = НастройкаРМК.СтруктураБыстрыхТоваров;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ФиксированныеНастройки", НастройкиКомпоновки);
	ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыОткрытия.Вставить("МножественныйВыбор", Ложь);
	
	ОткрытьФорму("Справочник.ПалитраТоваровРМК.Форма.ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор,
		,,ОповещениеВыбораПалитры);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПалитруКлиент()
	
	ОповещениеВыбораПалитры = Новый ОписаниеОповещения("ВыборПалитрыЗавершение", ЭтотОбъект);
	ОткрытьФормуВыбораПалитры(ОповещениеВыбораПалитры);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМодификаторКлиент()
	
	ДобавитьЭлементПалитры(ТипыЭлементовПалитры.Модификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитЭлемента(ЭлементСсылка, ИмяРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементСсылка, ИмяРеквизита);
	
КонецФункции

&НаКлиенте
Процедура ВыборПалитрыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ТекущаяСтрока = ТекущаяСтрокаДереваТоваров();
		ТекущаяГруппа = ПолучитьБлижайшуюГруппу(ТекущаяСтрока);
		ИдентификаторГруппы = ТекущаяГруппа.ПолучитьИдентификатор();
		ЭлементыГруппы = ТекущаяГруппа.ПолучитьЭлементы();
		
		НоваяСтрока = ЭлементыГруппы.Добавить();
		НоваяСтрока.НомерИзображения = 5;
		НоваяСтрока.Палитра = Результат;
		НоваяСтрока.ИмяЭлемента = ПолучитьРеквизитЭлемента(Результат, "Наименование");
		
		Элементы.ИерархияТоваров.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
		ИзмененСоставПалитрыИзбранных = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьКлиентскиеПеречисленияФормы()
	
	ТипыЭлементовПалитры = Новый Структура();
	ТипыЭлементовПалитры.Вставить("Позиция", 0);
	ТипыЭлементовПалитры.Вставить("Модификатор", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭлементПалитры(ТипЭлементаПалитры)
	
	ТекущаяСтрока = ТекущаяСтрокаДереваТоваров();
	ДобавлениеВозможно = Истина;
	
	Если ТипЭлементаПалитры = ТипыЭлементовПалитры.Позиция Тогда
		Родитель = ПолучитьБлижайшуюГруппу(ТекущаяСтрока);
	Иначе
		Родитель = ТекущаяСтрока;
		Если ЗначениеЗаполнено(ТекущаяСтрока.ВидМодификатора) Или ЗначениеЗаполнено(ТекущаяСтрока.Палитра) Тогда
			Родитель = ТекущаяСтрока.ПолучитьРодителя();
		КонецЕсли;
		Если Родитель = Неопределено Или Родитель = КореньДерева() Тогда
			ДобавлениеВозможно = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ДобавлениеВозможно Тогда
		ДобавитьЭлементПалитрыВГруппу(Родитель, ТипЭлементаПалитры);
	КонецЕсли;
	ИзмененСоставПалитрыИзбранных = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭлементПалитрыВГруппу(Родитель, ТипЭлементаПалитры)
	
	ИдентификаторРодителя = Родитель.ПолучитьИдентификатор();
	
	ДочерниеЭлементы = Родитель.ПолучитьЭлементы();
	НовыйЭлемент = ДочерниеЭлементы.Добавить();
	НовыйЭлемент.ЭтоКатегория = Ложь;
	
	Если ТипЭлементаПалитры = ТипыЭлементовПалитры.Модификатор Тогда
		НовыйЭлемент.НомерИзображения = 3;
		НовыйЭлемент.ВидМодификатора = ПредопределенноеЗначение("Перечисление.ВидыМодификаторовРМК.ВключатьВЧек");
		НовыйЭлемент.ЦветФона = ЦветаФормы.ЗеленаяКнопка;
		
		Родитель.ИмеетсяВложенность = Истина;
	Иначе
		НовыйЭлемент.НомерИзображения = 2;
		НовыйЭлемент.ЦветФона = ЦветаФормы.АктивнаяКнопка;
		Если ИмеютсяИдентификаторыНаГруппу(Родитель) Тогда
			НовыйЭлемент.ИмеетсяВложенность = Истина;
		КонецЕсли;
	КонецЕсли;

	ИдентификаторЭлемента = НовыйЭлемент.ПолучитьИдентификатор();
	
	ОтображениеДерева = Элементы.ИерархияТоваров;
	
	ОтображениеДерева.Развернуть(ИдентификаторРодителя);
	ОтображениеДерева.ТекущаяСтрока = ИдентификаторЭлемента;
	ОтображениеДерева.ТекущийЭлемент = Элементы.ИерархияТоваровНоменклатура;
	
КонецПроцедуры

&НаКлиенте
Функция ИмеютсяИдентификаторыНаГруппу(СтрокаГруппы)
	
	ВложенныеЭлементы = СтрокаГруппы.ПолучитьЭлементы();
	ИмеютсяИдентификаторыНаГруппу = Ложь;
	Для Каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл
		Если ЗначениеЗаполнено(ВложенныйЭлемент.ВидМодификатора) Тогда
			ИмеютсяИдентификаторыНаГруппу = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат ИмеютсяИдентификаторыНаГруппу;
	
КонецФункции

&НаКлиенте
Процедура СформироватьПримерЗаполненияПанелиКлиент()
	
	Элементы.Предпросмотр.Пометка = Не Элементы.Предпросмотр.Пометка;
	
	ПометкаПредпросмотр = Элементы.Предпросмотр.Пометка;
	
	Если ПометкаПредпросмотр Тогда
		Элементы.Предпросмотр.Заголовок = НСтр("ru = 'Редактировать'");
	Иначе
		Элементы.Предпросмотр.Заголовок = НСтр("ru = 'Показать'");
	КонецЕсли;
	
	Элементы.ИерархияТоваров.Доступность = Не ПометкаПредпросмотр;
	Элементы.ИерархияТоваров.КонтекстноеМеню.Доступность = Не ПометкаПредпросмотр;
	Элементы.НастройкаРМКСтруктураБыстрыхТоваров.Доступность = Не ПометкаПредпросмотр;
	
	Элементы.ПанельИзбранныхТоваров.Видимость = ПометкаПредпросмотр;
	
	Если ПометкаПредпросмотр Тогда
		
		ПостроитьОпорныеДанныеПалитрыИзбранного();
		
		ТекущиеДанныеСтроки = Элементы.ИерархияТоваров.ТекущиеДанные;
		НомерСтроки = Макс(ТекущиеДанныеСтроки.НомерСтроки, 1);
		
		Фильтр = Новый Структура;
		Фильтр.Вставить("НомерСтроки", НомерСтроки);
		Фильтр.Вставить("ЭтоТекущаяКатегория", Ложь);
		
		СтрокиОпорныхДанных = ОпорныеДанные.НайтиСтроки(Фильтр);
		
		Если СтрокиОпорныхДанных.Количество() = 0 Тогда
			ТекущийЭлемент = Элементы.Предпросмотр;
			СформироватьПримерЗаполненияПанелиКлиент();
			Возврат;
		КонецЕсли;
		
		СтрокаОпорныхДанных = СтрокиОпорныхДанных[0];
		ИндексПозиции = СтрокаОпорныхДанных.ИндексПозицииВкатегории - 1;
		
		Фильтр = Новый Структура;
		Фильтр.Вставить("НомерКатегорииРазмещенияЭлемента", СтрокаОпорныхДанных.НомерКатегорииРазмещенияЭлемента);
		Фильтр.Вставить("ИндексПозицииВКатегории", 1);
		
		СтрокаПервогоЭлементаСтраницы = ОпорныеДанные.НайтиСтроки(Фильтр);
		
		Если СтрокаПервогоЭлементаСтраницы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТекущаяСтраницаКнопок = ОпорныеДанные.Индекс(СтрокаПервогоЭлементаСтраницы[0]);
		ЗаполнитьКнопки();
		
		Если ИндексПозиции < 12 Тогда
			Если ЗначениеЗаполнено(ТекущиеДанныеСтроки.ИмяЭлемента) Тогда
				ТекущийЭлемент = Элементы["Избранное_Элемент05_" + ИндексПозиции];
			Иначе
				ТекущийЭлемент = Элементы["Избранное_Элемент02_" + ИндексПозиции];
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьОпорныеДанныеПалитрыИзбранного()
	
	ИнтерфейсРМКСлужебный.ЗаполнитьОпорныеДанныеПанелиПлиточногоИнтерфейса(ЭтотОбъект);
	
	МаксимальныйИндекс = 0;
	Для Каждого СтрокаИзбранных Из ОпорныеДанные Цикл
		
		СтрокаИзбранных.ДоступностьКоманды = Истина;
		МаксимальныйИндекс = Макс(МаксимальныйИндекс, СтрокаИзбранных.ИндексПозицииВКатегории);
		
	КонецЦикла;
	
	МаксимальноеКоличествоИзбранныхНаСтранице = МаксимальныйИндекс;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИерархияТоваровПустая(ТаблицаИерархияТоваров)
	
	РезультатФункции = Ложь;
	
	ЭлементыИерархии = ТаблицаИерархияТоваров.ПолучитьЭлементы();
	Если ЭлементыИерархии.Количество() = 0 Или ЭлементыИерархии[0].ПолучитьЭлементы().Количество() = 0 Тогда
		РезультатФункции = Истина;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОтветСохраненияБыстрыхТоваровДляПоказа(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИнтерфейсРМКСлужебныйКлиент.ПронумероватьИерархиюПалитрыТоваров(ИерархияТоваров);
		ЗаписатьПалитруТоваровРМК();
		СформироватьПримерЗаполненияПанелиКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКОжидатьРезультатПроверкиМарокПриИзменении(Элемент)
	
	УстановитьДоступностьНастроекИСМП();
	УстановитьДоступностьПредупрежденияСЛ();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементНеПечататьКодВозвратаСБП()
	
	ДоступенКодВозвратаСБП = НастройкаРМК.ИспользоватьОплатуПлатежнымиСистемами
		И НЕ ЗначениеЗаполнено(НастройкаРМК.ШаблонЧекаПродажи);
	
	Элементы.ГруппаНастройкиКодаВозвратаСБП.Доступность = ДоступенКодВозвратаСБП;
	Если НЕ ДоступенКодВозвратаСБП Тогда
		НастройкаРМК.НеПечататьКодВозвратаСБП = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементНеПечататьКодВозвратаНСПК()
	
	ИспользоватьОплатуСертификатамиНСПК = ОбщегоНазначенияРМК.ИспользоватьОплатуСертификатамиНСПК();
	ДоступенКодВозвратаНСПК = ИспользоватьОплатуСертификатамиНСПК
		И НЕ ЗначениеЗаполнено(НастройкаРМК.ШаблонЧекаПродажи);
	
	Элементы.ГруппаНастройкиКодаВозвратаНСПК.Доступность = ДоступенКодВозвратаНСПК;
	Если НЕ ДоступенКодВозвратаНСПК Тогда
		НастройкаРМК.НеПечататьКодВозвратаНСПК = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступностьОплатыНСПК()
	
	ДоступенаОплатаНСПК = НастройкаРМК.ИспользоватьОплатуПлатежнымиКартами;
	
	Элементы.ГруппаНастройкиФСС.Доступность = ДоступенаОплатаНСПК;
	ОтображениеНастроек = ?(ДоступенаОплатаНСПК, ОтображениеПодсказки.ОтображатьСнизу, ОтображениеПодсказки.Нет);
	Элементы.ГруппаПараметрыПодключенияНСПК.ОтображениеПодсказки = ОтображениеНастроек;
	
	Если НЕ ДоступенаОплатаНСПК Тогда
		ИспользоватьОплатуСертификатамиНСПК = Ложь;
		ИспользоватьОплатуСертификатамиНСПКПриИзменении(Элементы.ИспользоватьОплатуСертификатамиНСПК);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьСписокРежимовНачальнойСтраницы(Форма)
	
	СписокРежимов = Форма.Элементы.НастройкаРМКРежимНачальнойСтраницы.СписокВыбора;
	СписокРежимов.Очистить();
	ИндексРежима = 0;
	
	СписокРежимов.Вставить(ИндексРежима, 0, НСтр("ru=' Домашняя страница'"));
	ИндексРежима = ИндексРежима + 1;
	
	Если НЕ Форма.НастройкаРМК.СценарийИспользования = ПредопределенноеЗначение("Перечисление.СценарииИспользованияРМК.ТерминалСамообслуживания") Тогда
		СписокРежимов.Вставить(ИндексРежима, 1, НСтр("ru=' Корзина '"));
		ИндексРежима = ИндексРежима + 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.НастройкаРМК.СтруктураПлиточногоИнтерфейсаПодбора) Тогда
		СписокРежимов.Вставить(ИндексРежима, 2, НСтр("ru=' Палитра '"));
		ИндексРежима = ИндексРежима + 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьИспользованиеНапоминанияВводаКартЛояльности()
	
	Если Не ВводДисконтныхКарт Тогда
		НастройкаРМК.НапоминатьПроВводКартыЛояльности = Ложь;
	КонецЕсли;
	Элементы.ГруппаПредлагатьВводКартыЛояльности.Доступность = ВводДисконтныхКарт;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПризнакИспользованияОграниченийПродаж(ПараметрыОбновления)

	Если ТипЗнч(ПараметрыОбновления) = Тип("Структура")
		И ПараметрыОбновления.Свойство("ИспользоватьОграниченияПродаж") Тогда
	
		ИспользоватьПоставляемыеОграниченияПродаж = ПараметрыОбновления.ИспользоватьОграниченияПродаж;
		ОбщегоНазначенияРМКПереопределяемый.ОбновитьПризнакИспользованияОграниченийПродаж(ИспользоватьПоставляемыеОграниченияПродаж,
			ПараметрыОбновления);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СуществуетСлужебнаяПалитраТоваров()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПалитраТоваровРМК.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПалитраТоваровРМК КАК ПалитраТоваровРМК
	|ГДЕ
	|	ПалитраТоваровРМК.Служебная";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат (Не РезультатЗапроса.Пустой());
	
КонецФункции

&НаСервере
Процедура ИспользоватьКонтрольПродажПриИзмененииСервер()
	
	Если Не ИспользоватьКонтрольПродаж И СуществуетСлужебнаяПалитраТоваров() Тогда
		ИспользоватьКонтрольПродаж = Истина;
		ТекстПредупреждения = НСтр("ru = 'Нельзя отключить использование контроля продаж. В системе есть палитра товаров для контроля продаж.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстПредупреждения);
	Иначе
		ИмяКонстанты = ОбщегоНазначенияРМК.ИмяКонстанты("ИспользоватьКонтрольПродаж");
		СохранитьЗначениеКонстанты(ИмяКонстанты, ИспользоватьКонтрольПродаж);
		Элементы.КонтрольПродаж.Доступность = ИспользоватьКонтрольПродаж;
		Элементы.ВыгрузитьКонтрольПродаж.Видимость = ИспользоватьКонтрольПродаж;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыАвтоматическихСкидок()
	Элементы.ГруппаРасчетСкидок.Доступность = ИспользоватьАвтоматическиеСкидки;
	Если Не ИспользоватьАвтоматическиеСкидки Тогда
		НастройкаРМК.ВопросПоРасчетуСкидок = Ложь;
		НастройкаРМК.ИспользоватьПромокоды = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНастройкиПолногоРасчетаСкидок()
	Если Не НастройкаРМК.РаботаВРежимеМедленногоСоединения Тогда
		Элементы.НастройкаРМКПроизводитьПолныйРасчетСкидок.Доступность = Истина;
	Иначе
		Элементы.НастройкаРМКПроизводитьПолныйРасчетСкидок.Доступность = Ложь;
		НастройкаРМК.ПроизводитьПолныйРасчетСкидок = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ЛогированиеЗапросов

&НаСервере
Процедура ВключитьЛогированиеЗапросов(ПродолжительностьВМинутах)
	МодульЛогированияИСМП = ОбщегоНазначения.ОбщийМодуль("ЛогированиеЗапросовИСМП");
	МодульЛогированияИС   = ОбщегоНазначения.ОбщийМодуль("ЛогированиеЗапросовИС");
	
	ПараметрыЛогирования = МодульЛогированияИСМП.ПараметрыЛогированияЗапросов();
	МодульЛогированияИС.ВключитьЛогированиеЗапросов(ПараметрыЛогирования, ПродолжительностьВМинутах * 60);
	МодульЛогированияИСМП.УстановитьПараметрыЛогированияЗапросов(ПараметрыЛогирования);
КонецПроцедуры

&НаСервере
Процедура ОтключитьЛогированиеЗапросов()
	
	МодульЛогированияИСМП = ОбщегоНазначения.ОбщийМодуль("ЛогированиеЗапросовИСМП");
	
	МодульЛогированияИСМП.ОтключитьЛогированиеЗапросов();
	
	ПараметрыЛогирования = ПолучитьПараметрыЛогирования();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьЛогЗапросов()
	МодульЛогированияИСМП = ОбщегоНазначения.ОбщийМодуль("ЛогированиеЗапросовИСМП");
	МодульЛогированияИС   = ОбщегоНазначения.ОбщийМодуль("ЛогированиеЗапросовИС");
	
	МодульЛогированияИС.ОчиститьЛогЗапросов(ПолучитьПараметрыЛогирования());
	МодульЛогированияИСМП.УстановитьПараметрыЛогированияЗапросов(ПараметрыЛогирования);
	ПараметрыЛогирования = ПолучитьПараметрыЛогирования();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыЛогирования()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.БазоваяФункциональность.БРМК") Тогда
		МодульЛогированияИСМП = ОбщегоНазначения.ОбщийМодуль("ЛогированиеЗапросовИСМП");
		МодульЛогированияИС   = ОбщегоНазначения.ОбщийМодуль("ЛогированиеЗапросовИС");
		
		ПараметрыЛогирования = МодульЛогированияИСМП.ПараметрыЛогированияЗапросов();
		МодульЛогированияИС.ЗаполнитьПараметрыЛогирования(ПараметрыЛогирования);
	КонецЕсли;
	
	Возврат ПараметрыЛогирования;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбработкаОжиданияЗавершенияЛогирования()
	
	ПараметрыЛогирования = ПолучитьПараметрыЛогирования();
	
	Если ПараметрыЛогирования <> Неопределено Тогда
		ОбновитьПредставлениеЛогирования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылкиЛогирования(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ВключитьЛогЗапросов" Тогда
		
		СписокПродолжительностьЛога = Новый СписокЗначений();
		СписокПродолжительностьЛога.Добавить(5,  НСтр("ru='5 мин.'"));
		СписокПродолжительностьЛога.Добавить(10, НСтр("ru='10 мин.'"));
		СписокПродолжительностьЛога.Добавить(15, НСтр("ru='15 мин.'"));
		
		ПараметрыВыбораПродолжительности = Новый Структура;
		ПараметрыВыбораПродолжительности.Вставить("РежимПродления", Ложь);
		
		ОповещениеОВыбора = Новый ОписаниеОповещения("ВыборПродолжительностьЛогаЗавершение", ЭтотОбъект, ПараметрыВыбораПродолжительности);
		ПоказатьВыборИзСписка(ОповещениеОВыбора, СписокПродолжительностьЛога, Элемент);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьЛогЗапросов" Тогда
		
		МодульЛогированияИСКлиент   = ОбщегоНазначенияКлиент.ОбщийМодуль("ЛогированиеЗапросовИСКлиент");
		МодульЛогированияИСКлиент.ОткрытьПросмотрЛогаЗапросов(УникальныйИдентификатор, "ИСМП");
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ИзменитьВремяОкончанияЗаписиЛогов" Тогда
		
		СписокПродолжительностьЛога = Новый СписокЗначений();
		СписокПродолжительностьЛога.Добавить(5,  НСтр("ru='продлить на 5 мин.'"));
		СписокПродолжительностьЛога.Добавить(10, НСтр("ru='продлить на 10 мин.'"));
		СписокПродолжительностьЛога.Добавить(15, НСтр("ru='продлить на 15 мин.'"));
		
		ПараметрыВыбораПродолжительности = Новый Структура;
		ПараметрыВыбораПродолжительности.Вставить("РежимПродления", Истина);
		
		ОповещениеОВыбора = Новый ОписаниеОповещения("ВыборПродолжительностьЛогаЗавершение", ЭтотОбъект, ПараметрыВыбораПродолжительности);
		ПоказатьВыборИзСписка(ОповещениеОВыбора, СписокПродолжительностьЛога, Элемент);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтключитьЗаписьЛогов" Тогда
		
		ОтключитьЛогированиеЗапросов();
		ОбновитьПредставлениеЛогирования();
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОчиститьЛогЗапросов" Тогда
		
		ОписаниеОповещенияВопросОчиститьЛогЗапросовЗавершение = Новый ОписаниеОповещения("ОписаниеОповещенияВопросОчиститьЛогЗапросовЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(
			ОписаниеОповещенияВопросОчиститьЛогЗапросовЗавершение,
			НСтр("ru='Очистить лог запросов?'"),
			РежимДиалогаВопрос.ДаНет,,
			КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеЛогирования()
	
	ОтключитьОбработчикОжидания("Подключаемый_ОбработкаОжиданияЗавершенияЛогирования");
	
	ДанныеОсновнойЧасти = Новый Массив();
	ДанныеПодсказки     = Новый Массив();
	ДанныеПодсказки.Добавить(НСтр("ru='Логирование запросов позволяет получить подробную'"));
	ДанныеПодсказки.Добавить(" ");
	ДанныеПодсказки.Добавить(НСтр("ru='техническую информацию по взаимодействию с ГИС МТ'"));
	ДанныеПодсказки.Добавить(" ");
	ДанныеПодсказки.Добавить(НСтр("ru='для расследования проблем и ошибок службами поддержки.'"));
	
	Если ПараметрыЛогирования.Включено Тогда
		
		Если ЗначениеЗаполнено(ПараметрыЛогирования.ОкончаниеЗаписи) Тогда
			ДатаЗавершенияЛогирования = ДатаИзУниверсальнойДаты(ПараметрыЛогирования.ОкончаниеЗаписи);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаЗавершенияЛогирования) Тогда
			
			ДанныеОсновнойЧасти.Добавить(НСтр("ru='Логирование запросов производится до'"));
			ДанныеОсновнойЧасти.Добавить(" ");
			
			Если НачалоДня(ТекущаяДата()) <> НачалоДня(ДатаЗавершенияЛогирования) Тогда
				ПредставлениеДаты = СтрШаблон(
					" (%1)",
					Формат(ДатаЗавершенияЛогирования, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
			
			ПредставлениеВремени = СтрШаблон(
				"%1%2",
				Формат(ДатаЗавершенияЛогирования, "ДФ=HH:mm;"),
				ПредставлениеДаты);
			
			ДанныеОсновнойЧасти.Добавить(
				Новый ФорматированнаяСтрока(
					ПредставлениеВремени,,
					ЦветГиперссылки,,
					"ИзменитьВремяОкончанияЗаписиЛогов"));
			
			ПодключитьОбработчикОжидания(
				"Подключаемый_ОбработкаОжиданияЗавершенияЛогирования",
				(ДатаЗавершенияЛогирования - ТекущаяДата()) + 10,
				Истина);
			
		Иначе
			
			ДанныеОсновнойЧасти.Добавить(НСтр("ru='Запись логов запросов продолжается'"));
			
		КонецЕсли;
		
		ДанныеОсновнойЧасти.Добавить(" ");
		ДанныеОсновнойЧасти.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru='Отключить'"),,
				ЦветГиперссылки,,
				"ОтключитьЗаписьЛогов"));
		
	Иначе
		
		ДанныеОсновнойЧасти.Добавить(НСтр("ru='Запись логов запросов не производится.'"));
		
		ДанныеОсновнойЧасти.Добавить(" ");
		ДанныеОсновнойЧасти.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru='Включить'"),,
				ЦветГиперссылки,,
				"ВключитьЛогЗапросов"));
		
	КонецЕсли;
	
	Если ПараметрыЛогирования.Включено
		Или ЗначениеЗаполнено(ПараметрыЛогирования.ОкончаниеЗаписи) Тогда
		
		ДанныеПодсказки.Добавить(Символы.ПС);
		
		ДанныеПодсказки.Добавить(
				Новый ФорматированнаяСтрока(
					НСтр("ru='Открыть'"),,
					ЦветГиперссылки,,
					"ОткрытьЛогЗапросов"));
		
		ДанныеПодсказки.Добавить(" ");
		
		ДанныеПодсказки.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru='Очистить'"),,
				ЦветГиперссылки,,
				"ОчиститьЛогЗапросов"));
		
	КонецЕсли;
	
	ПредставлениеЛогированияЗапросов = Новый ФорматированнаяСтрока(ДанныеОсновнойЧасти);
	Элементы.ПредставлениеЛогированияЗапросов.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(ДанныеПодсказки);
	
КонецПроцедуры

&НаКлиенте
Функция ДатаИзУниверсальнойДаты(Знач Значение, Делитель = 1000, ПриводитьКМестномуВремени = Истина) Экспорт
	
	Значение = '00010101' + Цел(Значение / Делитель);
	
	Если ПриводитьКМестномуВремени Тогда
		Возврат МестноеВремя(Значение);
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыборПродолжительностьЛогаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Продолжительность = ВыбранныйЭлемент.Значение;
	Если ДополнительныеПараметры.РежимПродления
		И ЗначениеЗаполнено(ПараметрыЛогирования.ОкончаниеЗаписи) Тогда
		ДатаОкончания = ДатаИзУниверсальнойДаты(ПараметрыЛогирования.ОкончаниеЗаписи);
		Если ДатаОкончания > ТекущаяДата() Тогда
			Продолжительность = Цел((КонецМинуты(ДатаОкончания) - КонецМинуты(ТекущаяДата())) / 60 + Продолжительность);
		КонецЕсли;
	КонецЕсли;
	
	ВключитьЛогированиеЗапросов(Продолжительность);
	ОбновитьПредставлениеЛогирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОповещенияВопросОчиститьЛогЗапросовЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьЛогЗапросов();
	ОбновитьПредставлениеЛогирования();
	
	ПоказатьОповещениеПользователя(НСтр("ru='Лог запросов очищен.'"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПорядокОбластейФормы()
	
	ПорядокОбластей.Загрузить(НастройкаРМК.ПорядокОбластей.Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПорядокИДеревоОбластейФормы()
	
	ЗаполнитьПорядокОбластейФормы();
	ЗаполнитьДеревоОбластейФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоОбластейФормы()
	
	ВосстановитьПервоначальноеДеревоОбластейФормы();
	ПрименитьСохраненныйПорядокОбластей();
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьПервоначальноеДеревоОбластейФормы()
	
	ШиринаСхемыРМК = 1;
	ВысотаСхемыРМК = 1;
	
	ПараметрыЗаполнения = ПараметрыЗаполненияОбластейФормыРМК();
	ДеревоОбластейФормыРМК.ПолучитьЭлементы().Очистить();
	КорневаяГруппа = ?(ГоризонтальныйОриентация, Элементы.ГоризонтальнаяОриентация, Элементы.ВертикальнаяОриентация);
	ДеревоПервоначальногоРасположения
		= ИнтерфейсРМКСлужебный.ПолучитьПервоначальноеРасположениеОбластейФормыРМК(КорневаяГруппа, ПараметрыЗаполнения);
	ДобавитьСтрокиУровняДерева(ДеревоПервоначальногоРасположения.Строки, ДеревоОбластейФормыРМК.ПолучитьЭлементы(), 1,
		ТипГруппировкаВертикальная);
	
КонецПроцедуры

&НаСервере
Функция ПанельИзбранныхИспользуется()
	
	ЕстьБыстрыеТовары = Ложь;
	ЭлементыИерархии = ИерархияТоваров.ПолучитьЭлементы();
	Если (ЭлементыИерархии.Количество() = 1 И ЭлементыИерархии[0].ПолучитьЭлементы().Количество() > 0)
			Или ЭлементыИерархии.Количество() > 1 Тогда
		ЕстьБыстрыеТовары = Истина;
	КонецЕсли;
	
	Возврат (ЕстьБыстрыеТовары Или ЗначениеЗаполнено(НастройкаРМК.СтруктураБыстрыхТоваров));
	
КонецФункции

&НаСервере
Функция ПараметрыЗаполненияОбластейФормыРМК()
	
	РежимПлитки = 2;
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("ПокупюрныйВводНаличных", НастройкаРМК.ИспользоватьПанельВводаНаличныхКупюр);
	ПараметрыЗаполнения.Вставить("ПанельИзбранных", ПанельИзбранныхИспользуется());
	ПараметрыЗаполнения.Вставить("ПлиточныйИнтерфейс", НастройкаРМК.РежимНачальнойСтраницы = РежимПлитки);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

&НаКлиенте
Процедура РазвернутьСтрокиДерева()
	
	СтрокиДерева = ДеревоОбластейФормыРМК.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор();
		Если Не Элементы.ДеревоОбластейФормыРМК.Развернут(ИдентификаторСтроки) Тогда
			Элементы.ДеревоОбластейФормыРМК.Развернуть(ИдентификаторСтроки, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокиУровняДерева(ИсходныеСтроки, СтрокиПриемника, Знач ТекущийУровень, ГруппировкаУровня)
	
	КолонкаШирина = "Ширина";
	КолонкаВысота = "Высота";
	КолонкаШиринаВПроцентах = "ШиринаВПроцентах";
	КолонкаВысотаВПроцентах = "ВысотаВПроцентах";
	МаксимальныйПроцент = 100;
	ШиринаГруппы = ПолучитьОбщуюШиринуГруппы(ИсходныеСтроки, ГруппировкаУровня);
	ВысотаГруппы = ПолучитьОбщуюВысотуГруппы(ИсходныеСтроки, ГруппировкаУровня);
	ОбщееЗначениеРазмера = ?(ГруппировкаУровня = ТипГруппировкаВертикальная, ВысотаГруппы, ШиринаГруппы);
	Если ТекущийУровень = 1 Тогда
		ШиринаСхемыРМК = ШиринаГруппы;
		ВысотаСхемыРМК = ВысотаГруппы;
	КонецЕсли;
	
	ИмяКолонкиРаспределения = ?(ГруппировкаУровня = ТипГруппировкаВертикальная, КолонкаВысота, КолонкаШирина);
	ИмяКолонкиРаспределенияВПроцентах
		= ?(ГруппировкаУровня = ТипГруппировкаВертикальная, КолонкаВысотаВПроцентах, КолонкаШиринаВПроцентах);
	
	НаименьшийРазмер = 0;
	НаибольшийРазмер = 0;
	МинимальнаяСтрока = Неопределено;
	МаксимальнаяСтрока = Неопределено;
	РазницаОкругления = 100;
	
	Для Каждого СтрокаИсточника Из ИсходныеСтроки Цикл
		
		ПроцентРазмераДробный = 100 * СтрокаИсточника[ИмяКолонкиРаспределения] / ОбщееЗначениеРазмера;
		ПроцентРазмера = Окр(ПроцентРазмераДробный, 1, РежимОкругления.Окр15как20);
		
		НоваяСтрока = СтрокиПриемника.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
		НоваяСтрока.ИсходныйПорядок = СтрокиПриемника.Индекс(НоваяСтрока) + 1;
		
		Если СтрокаИсточника.ДоступностьГруппы Тогда
			НоваяСтрока.ШиринаВПроцентах = ?(ГруппировкаУровня = ТипГруппировкаВертикальная, МаксимальныйПроцент, ПроцентРазмера);
			НоваяСтрока.ВысотаВПроцентах = ?(ГруппировкаУровня = ТипГруппировкаВертикальная, ПроцентРазмера, МаксимальныйПроцент);
			
			Если НаименьшийРазмер = 0 Или СтрокаИсточника[ИмяКолонкиРаспределения] < НаименьшийРазмер Тогда
				НаименьшийРазмер = СтрокаИсточника[ИмяКолонкиРаспределения];
				МинимальнаяСтрока = НоваяСтрока;
			КонецЕсли;
			Если СтрокаИсточника[ИмяКолонкиРаспределения] > НаибольшийРазмер Тогда
				НаибольшийРазмер = СтрокаИсточника[ИмяКолонкиРаспределения];
				МаксимальнаяСтрока = НоваяСтрока;
			КонецЕсли;
			РазницаОкругления = РазницаОкругления - ПроцентРазмера;
			
			ДобавитьСтрокиУровняДерева(СтрокаИсточника.Строки, НоваяСтрока.ПолучитьЭлементы(), ТекущийУровень + 1,
				СтрокаИсточника.Группировка);
		Иначе
			НоваяСтрока.ШиринаВПроцентах = 0;
			НоваяСтрока.ВысотаВПроцентах = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Если РазницаОкругления <> 100 И РазницаОкругления <> 0 Тогда
		Если РазницаОкругления > 0 И Не МинимальнаяСтрока = Неопределено Тогда
			МинимальнаяСтрока[ИмяКолонкиРаспределенияВПроцентах]
				= МинимальнаяСтрока[ИмяКолонкиРаспределенияВПроцентах] + РазницаОкругления;
		ИначеЕсли РазницаОкругления < 0 И Не МаксимальнаяСтрока = Неопределено Тогда
			МаксимальнаяСтрока[ИмяКолонкиРаспределенияВПроцентах]
				= МаксимальнаяСтрока[ИмяКолонкиРаспределенияВПроцентах] + РазницаОкругления;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщуюШиринуГруппы(ИсходныеСтроки, ГруппировкаУровня)
	
	РезультатФункции = 0;
	Если ИсходныеСтроки.Количество() > 0 Тогда
		Если ГруппировкаУровня = ТипГруппировкаВертикальная Тогда
			РезультатФункции = ИсходныеСтроки[0].Ширина;
		Иначе
			Для Каждого СтрокаОбласти Из ИсходныеСтроки Цикл
				Если СтрокаОбласти.ДоступностьГруппы Тогда
					РезультатФункции = РезультатФункции + СтрокаОбласти.Ширина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если РезультатФункции = 0 Тогда
		РезультатФункции = 1;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаСервере
Функция ПолучитьОбщуюВысотуГруппы(ИсходныеСтроки, ГруппировкаУровня)
	
	РезультатФункции = 0;
	Если ИсходныеСтроки.Количество() > 0 Тогда
		Если ГруппировкаУровня = ТипГруппировкаВертикальная Тогда
			Для Каждого СтрокаОбласти Из ИсходныеСтроки Цикл
				Если СтрокаОбласти.ДоступностьГруппы Тогда
					РезультатФункции = РезультатФункции + СтрокаОбласти.Высота;
				КонецЕсли;
			КонецЦикла;
		Иначе
			РезультатФункции = ИсходныеСтроки[0].Высота;
		КонецЕсли;
	КонецЕсли;
	Если РезультатФункции = 0 Тогда
		РезультатФункции = 1;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаСервере
Процедура ПрименитьСохраненныйПорядокОбластей()
	
	КорневаяГруппа = ?(ГоризонтальныйОриентация, Элементы.ГоризонтальнаяОриентация, Элементы.ВертикальнаяОриентация);
	ПрименитьСохраненныйПорядокДляУровня(КорневаяГруппа.Имя, ДеревоОбластейФормыРМК.ПолучитьЭлементы());
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьСохраненныйПорядокДляУровня(ИмяРодителя, СтрокиУровня)
	
	Для Каждого СтрокаДерева Из СтрокиУровня Цикл
		Если СтрокаДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			ПрименитьСохраненныйПорядокДляУровня(СтрокаДерева.ИмяОбласти, СтрокаДерева.ПолучитьЭлементы());
		КонецЕсли;
	КонецЦикла;
	ПрименитьСохраненныйПорядокДляПодчиненныхСтрокУровня(ИмяРодителя, СтрокиУровня);
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьСохраненныйПорядокДляПодчиненныхСтрокУровня(ИмяРодителя, СтрокиУровня)
	
	ОтборСтрок = Новый Структура("ОбластьРодитель,ВертикальнаяОриентация", ИмяРодителя, (Не ГоризонтальныйОриентация));
	СтрокиПорядка = ПорядокОбластей.НайтиСтроки(ОтборСтрок);
	Для Каждого СтрокаПорядка Из СтрокиПорядка Цикл
		ИндексОбластиВДереве = -1;
		СтрокаОбластиВДереве = ПолучитьСтрокуДереваОбластиПоИмени(СтрокиУровня, СтрокаПорядка.Область, ИндексОбластиВДереве);
		ВПределахГраницы = (СтрокаПорядка.Порядок > 0 И СтрокаПорядка.Порядок <= СтрокиУровня.Количество());
		Если (Не СтрокаОбластиВДереве = Неопределено) И СтрокаПорядка.Порядок <> ИндексОбластиВДереве + 1
				И ВПределахГраницы Тогда
			СтрокиУровня.Сдвинуть(ИндексОбластиВДереве, СтрокаПорядка.Порядок - ИндексОбластиВДереве - 1);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуДереваОбластиПоИмени(СтрокиУровня, ИмяОбласти, ИндексОбластиВДереве)
	
	РезультатФункции = Неопределено;
	
	КоличествоСтрок = СтрокиУровня.Количество();
	ИндексСтроки = 0;
	Пока ИндексСтроки < КоличествоСтрок И РезультатФункции = Неопределено Цикл
		СтрокаОбласти = СтрокиУровня.Получить(ИндексСтроки);
		Если СтрокаОбласти.ИмяОбласти = ИмяОбласти Тогда
			РезультатФункции = СтрокаОбласти;
			ИндексОбластиВДереве = ИндексСтроки;
		КонецЕсли;
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаСервере
Процедура СохранитьПорядокОбластей()
	
	НастройкаРМК.ПорядокОбластей.Загрузить(ПорядокОбластей.Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПорядокОбластейРодителя(ИмяРодителя, СтрокиУровня)
	
	ПорядковыйНомерОбласти = 1;
	Для Каждого СтрокаОбласти Из СтрокиУровня Цикл
		
		ОтборДляПоиска = Новый Структура();
		ОтборДляПоиска.Вставить("Область", СтрокаОбласти.ИмяОбласти);
		ОтборДляПоиска.Вставить("ВертикальнаяОриентация", (Не ГоризонтальныйОриентация));
		
		СтрокиПорядка = ПорядокОбластей.НайтиСтроки(ОтборДляПоиска);
		Если СтрокиПорядка.Количество() > 0 Тогда
			НоваяСтрока = СтрокиПорядка[0];
		Иначе
			НоваяСтрока = ПорядокОбластей.Добавить();
			НоваяСтрока.Область = СтрокаОбласти.ИмяОбласти;
			НоваяСтрока.ВертикальнаяОриентация = Не ГоризонтальныйОриентация;
		КонецЕсли;
		НоваяСтрока.Порядок = ПорядковыйНомерОбласти;
		НоваяСтрока.ОбластьРодитель = ИмяРодителя;
		
		ПорядковыйНомерОбласти = ПорядковыйНомерОбласти + 1;
		ПодчиненныеСтроки = СтрокаОбласти.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			ЗаписатьПорядокОбластейРодителя(СтрокаОбласти.ИмяОбласти, ПодчиненныеСтроки);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьПорядокОбластейСхемыРМК()
	
	КорневаяГруппа = ?(ГоризонтальныйОриентация, Элементы.ГоризонтальнаяОриентация, Элементы.ВертикальнаяОриентация);
	ЗаписатьПорядокОбластейРодителя(КорневаяГруппа.Имя, ДеревоОбластейФормыРМК.ПолучитьЭлементы());
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьСмещенныеОбласти(СтрокиУровня)
	
	РезультатФункции = Ложь;
	
	КоличествоСтрок = СтрокиУровня.Количество();
	ИндексСтроки = 0;
	Пока ИндексСтроки < КоличествоСтрок И Не РезультатФункции Цикл
		СтрокаБлока = СтрокиУровня[ИндексСтроки];
		Если СтрокиУровня.Индекс(СтрокаБлока) = СтрокаБлока.ИсходныйПорядок - 1 Тогда
			РезультатФункции = ЕстьСмещенныеОбласти(СтрокаБлока.ПолучитьЭлементы());
		Иначе
			РезультатФункции = Истина;
		КонецЕсли;
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура АктуализироватьДоступностьКнопкиСбросаПорядкаОбластей()
	
	Элементы.ДеревоОбластейФормыРМКВосстановитьНастройкиПорядкаОбластей.Доступность
		= ЕстьСмещенныеОбласти(ДеревоОбластейФормыРМК.ПолучитьЭлементы());
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройкиПорядкаОбластейКлиент()
	
	ОповещениеВосстановления = Новый ОписаниеОповещения("ВопросВосстановлениеПорядкаОбластейЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Сделанные настройки будут сброшены. Продолжить?'");
	ПоказатьВопрос(ОповещениеВосстановления, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВосстановлениеПорядкаОбластейЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВосстановитьПервоначальноеДеревоОбластейФормы();
		ПересчитатьПорядокОбластейСхемыРМК();
		РазвернутьСтрокиДерева();
		Элементы.ДеревоОбластейФормыРМКВосстановитьНастройкиПорядкаОбластей.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеСхемыФормыРМК

&НаКлиенте
Процедура ПоказатьСхемуФормыРМК()
	
	СхемаФормыРМК = СформироватьДокументСхемыФормыРМК();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗначенияШириныГлавнойГруппы(ШиринаОбластиВПроцентах, МинимальнаяШиринаОбласти)
	
	МинимальнаяШиринаВертикальногоЭкрана = 0;
	ПодключенГоризонтальныйЭкран = Ложь;
	ПодключенВертикальныйЭкран = Ложь;
	ИнформацияЭкранов = ПолучитьИнформациюЭкрановКлиента();
	Для Каждого ДанныеЭкрана Из ИнформацияЭкранов Цикл
		Если ДанныеЭкрана.Ширина > ДанныеЭкрана.Высота Тогда
			ПодключенГоризонтальныйЭкран = Истина;
		Иначе
			ПодключенВертикальныйЭкран = Истина;
			Если МинимальнаяШиринаВертикальногоЭкрана = 0 Или ДанныеЭкрана.Ширина < МинимальнаяШиринаВертикальногоЭкрана Тогда
				МинимальнаяШиринаВертикальногоЭкрана = ДанныеЭкрана.Ширина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ПодключенГоризонтальныйЭкран Тогда
		ШиринаОбластиВПроцентах = 60;
		Коэффициент = 0.55;
		Если ПодключенВертикальныйЭкран Тогда
			МинимальнаяШиринаОбласти = Окр(Коэффициент * МинимальнаяШиринаВертикальногоЭкрана, 0, 1);
		КонецЕсли;
	Иначе
		ШиринаОбластиВПроцентах = 98;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьСтильГлавнойГруппы()
	
	СтильГруппы = "";
	
	Если ГоризонтальныйОриентация Тогда
		ПроцентПропорции = Окр(100 * ВысотаСхемыРМК / ШиринаСхемыРМК, 1, 1);
		СтильГруппы =
		".wrapper {
		|	position: relative;
		|	width: 98%;
		|	padding-top: &Ratio%;
		|	}";
		СтильГруппы = СтрЗаменить(СтильГруппы, "&Ratio", Формат(ПроцентПропорции, "ЧРД=.; ЧГ="));
	Иначе
		ШиринаОбластиВПроцентах = 0;
		МинимальнаяШиринаОбласти = 0;
		ЗаполнитьЗначенияШириныГлавнойГруппы(ШиринаОбластиВПроцентах, МинимальнаяШиринаОбласти);
		СтильГруппы =
		".wrapper {
		|	position: relative;
		|	height: 98%;
		|	width: &DivWidth%;
		|	&DivMinWidth
		|	}";
		СтильГруппы = СтрЗаменить(СтильГруппы, "&DivWidth", Формат(ШиринаОбластиВПроцентах, "ЧРД=.; ЧГ="));
		МинимальнаяШиринаСтрокой = "";
		Если МинимальнаяШиринаОбласти > 0 Тогда
			МинимальнаяШиринаСтрокой = СтрШаблон("min-width: %1px;", Формат(МинимальнаяШиринаОбласти, "ЧГ="));
		КонецЕсли;
		СтильГруппы = СтрЗаменить(СтильГруппы, "&DivMinWidth", МинимальнаяШиринаСтрокой);
	КонецЕсли;
	
	Возврат СтильГруппы;
	
КонецФункции

&НаКлиенте
Функция ШаблонСхемыФормыРМК()
	
	РезультатФункции = 
	"<html>
	|	<head>
	|		<meta charset=""utf-8"">
	|		<style>
	|			&WrapperStyle}
	|
	|			.box {
	|				position: absolute;
	|				left: 0;
	|				top: 0;
	|				width: 100%;
	|				height: 100%;
	|				border: 1px solid black;
	|			}
	|			&StyleContent
	|		</style>
	|	</head>
	|	<body>
	|		<div class=""wrapper"">
	|			<div class=""box"">
	|				&FieldContent
	|			</div>
	|		</div>
	|	</body>
	|</html>";
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСодержимоеБлока(СтрокаБлока, Знач ИмяТекущейОбласти, Знач Уровень)
	
	РезультатФункции = "";
	
	Если СтрокаБлока.ПолучитьЭлементы().Количество() = 0 Тогда
		РезультатФункции
			= ИнтерфейсРМКСлужебныйКлиент.ПолучитьСодержимоеИменнойОбластиСхемыФормыРМК(СтрокаБлока);
	Иначе
		РезультатФункции = ПолучитьВложенныйБлок(СтрокаБлока.ПолучитьЭлементы(),
			СтрокаБлока.Группировка, ИмяТекущейОбласти, Уровень + 1);
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция DecToHex(Знач Значение)
	
	РезультатФункции = "";
	Если Значение <= 0 Тогда
		РезультатФункции = "0";
	Иначе
		Размерность = 16;
		Значение = Цел(Значение);
		Пока Значение > 0 Цикл
			СимволЦифра = Сред("0123456789ABCDEF", Значение%Размерность + 1, 1);
			РезультатФункции = СтрШаблон("%1%2", СимволЦифра, РезультатФункции);
			Значение = Цел(Значение/Размерность);
		КонецЦикла;
	КонецЕсли;

	Пока СтрДлина(РезультатФункции) <= 1 Цикл
		РезультатФункции = СтрШаблон("%1%2", "0", РезультатФункции);
	КонецЦикла;

	Возврат РезультатФункции;

КонецФункции

&НаКлиенте
Функция ПолучитьПредставлениеЦвета(ЦветОбласти)
	
	РезультатФункции = "";
	Если Не ЦветОбласти = Неопределено Тогда
		Если ЦветОбласти.Вид = ВидЦвета.WebЦвет Тогда
			ЦветСтрокой = Строка(ЦветОбласти);
			ПозицияНачалаСкобок = СтрНайти(ЦветСтрокой, "(");
			ПозицияКонцаСкобок = СтрНайти(ЦветСтрокой, ")");
			Если ПозицияНачалаСкобок > 0 И ПозицияКонцаСкобок - ПозицияНачалаСкобок > 1 Тогда
				РезультатФункции = Сред(ЦветСтрокой, ПозицияНачалаСкобок + 1);
				РезультатФункции = Лев(РезультатФункции, ПозицияКонцаСкобок - ПозицияНачалаСкобок - 1);
			КонецЕсли;
		ИначеЕсли ЦветОбласти.Вид = ВидЦвета.Абсолютный Тогда
			РезультатФункции = СтрШаблон("#%1%2%3", DecToHex(ЦветОбласти.Красный),
				DecToHex(ЦветОбласти.Зеленый), DecToHex(ЦветОбласти.Синий));
		Иначе
			РезультатФункции = "#FFFFFF";
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция ПолучитьВложенныйБлок(СтрокиБлока, ГруппировкаБлока, Знач ИмяТекущейОбласти, Знач Уровень)
	
	КлассГлавныхБлоков = "class=""generalBlock""";
	КлассДетальныхБлоков = "class=""detailedBlock""";
	КлассВыбранногоБлока = "class=""selectedBlock""";
	ВложенныйБлок = "<table style = ""width: 100%; height: 100%; border-collapse: collapse; margin: 0;"">";
	Если Уровень <= 2 Тогда
		ВложенныйБлок = СтрЗаменить(ВложенныйБлок, "border-collapse: collapse;", "");
	КонецЕсли;
	Если ГруппировкаБлока = ТипГруппировкаГоризонтальная Тогда
		ВложенныйБлок = СтрШаблон("%1%2%3", ВложенныйБлок, Символы.ПС, "<tr style = ""height: 100%;"">");
	КонецЕсли;
	Для Каждого СтрокаБлока Из СтрокиБлока Цикл
		Если СтрокаБлока.ДоступностьГруппы Тогда
			Если ГруппировкаБлока = ТипГруппировкаВертикальная Тогда
				ТэгНачалаСтроки = "<tr style = ""height: &RowHeight%;"">";
				ТэгНачалаСтроки = СтрЗаменить(ТэгНачалаСтроки, "&RowHeight", Формат(СтрокаБлока.ВысотаВПроцентах, "ЧРД=.; ЧГ="));
				ВложенныйБлок = СтрШаблон("%1%2%3", ВложенныйБлок, Символы.ПС, ТэгНачалаСтроки);
			КонецЕсли;
			ЯчейкаБлока = "<td id=""&FiledName"" &TdClass style = ""width: &ColumnWidth%; &BackgroundColor"">&BlockContent</td>";
			ЯчейкаБлока = СтрЗаменить(ЯчейкаБлока, "&FiledName", СтрокаБлока.ИмяОбласти);
			ПредставлениеЦвета = ПолучитьПредставлениеЦвета(СтрокаБлока.ЦветОбласти);
			ЦветЯчейки = СтрШаблон("background-color: %1", ПредставлениеЦвета);
			ЯчейкаБлока = СтрЗаменить(ЯчейкаБлока, "&BackgroundColor", ЦветЯчейки);
			Если СтрокаБлока.ИмяОбласти = ИмяТекущейОбласти Тогда
				КлассБлоков = КлассВыбранногоБлока;
			Иначе
				КлассБлоков = ?(Уровень > 2, КлассДетальныхБлоков, КлассГлавныхБлоков);
			КонецЕсли;
			ЯчейкаБлока = СтрЗаменить(ЯчейкаБлока, "&TdClass", КлассБлоков);
			ЯчейкаБлока = СтрЗаменить(ЯчейкаБлока, "&ColumnWidth", Формат(СтрокаБлока.ШиринаВПроцентах, "ЧРД=.; ЧГ="));
			СодержимоеБлока = ПолучитьСодержимоеБлока(СтрокаБлока, ИмяТекущейОбласти, Уровень);
			ЯчейкаБлока = СтрЗаменить(ЯчейкаБлока, "&BlockContent", СодержимоеБлока);
			ВложенныйБлок = СтрШаблон("%1%2%3", ВложенныйБлок, Символы.ПС, ЯчейкаБлока);
			Если ГруппировкаБлока = ТипГруппировкаВертикальная Тогда
				ВложенныйБлок = СтрШаблон("%1%2%3", ВложенныйБлок, Символы.ПС, "</tr>");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ГруппировкаБлока = ТипГруппировкаГоризонтальная Тогда
		ВложенныйБлок = СтрШаблон("%1%2%3", ВложенныйБлок, Символы.ПС, "</tr>");
	КонецЕсли;
	
	ВложенныйБлок = СтрШаблон("%1%2%3", ВложенныйБлок, Символы.ПС, "</table>");
	
	Возврат ВложенныйБлок;
	
КонецФункции

&НаКлиенте
Функция СформироватьДокументСхемыФормыРМК()

	ИмяТекущейОбласти = "";
	ТекущиеДанныеОбласти = Элементы.ДеревоОбластейФормыРМК.ТекущиеДанные;
	Если Не ТекущиеДанныеОбласти = Неопределено Тогда
		ИмяТекущейОбласти = ТекущиеДанныеОбласти.ИмяОбласти;
	КонецЕсли;
	
	КоэффициентМасштаба = 0;
	Если НастройкаРМК.ВидОтображения = ПредопределенноеЗначение("Перечисление.ВидыОтображения.Увеличенный") Тогда
		КоэффициентМасштаба = 1;
	ИначеЕсли НастройкаРМК.ВидОтображения = ПредопределенноеЗначение("Перечисление.ВидыОтображения.Уменьшенный") Тогда
		КоэффициентМасштаба = -1;
	КонецЕсли;
	РазмерТекстаОбластей = 20;
	СмещениеРазмераТекста = 4;
	РазмерТекстаОбластей = РазмерТекстаОбластей + КоэффициентМасштаба * СмещениеРазмераТекста;
	
	РазмерТекстаСпискаТоваров = 38;
	СмещениеРазмераТекстаСпискаТоваров = 6;
	РазмерТекстаСпискаТоваров = РазмерТекстаСпискаТоваров + КоэффициентМасштаба * СмещениеРазмераТекстаСпискаТоваров;
	
	БлокСтилей = 
	".generalBlock {
	|	border: 1px solid black;
	|	padding: 0px;
	|		}
	|.detailedBlock {
	|	border: 1px dotted black;
	|	padding: 0px;
	|		}
	|.selectedBlock {
	|	border: 2px solid red;
	|		}
	|.ordinaryLabel {
	|			text-align: center;
	|			vertical-align: middle;
	|			align: center;
	|			font-size: &LabelSizepx;
	|	}
	|.plateTd {
	|			width: 25%;
	|			border: 0px;
	|			background-color: #C0C0C0;
	|		}
	|		.plateTr {
	|			height: 25%;
	|		}
	|		.plateTable {
	|			width: 100%;
	|			height: 100%;
	|		}
	|#goodsList {
	|			text-align: center;
	|			vertical-align: middle;
	|			align: center;
	|			font-size: &GoodsFontSizepx;
	|	}";
	БлокСтилей = СтрЗаменить(БлокСтилей, "&GoodsFontSize", Формат(РазмерТекстаСпискаТоваров, "ЧГ="));
	БлокСтилей = СтрЗаменить(БлокСтилей, "&LabelSize", Формат(РазмерТекстаОбластей, "ЧГ="));
	
	БлокПанелей = ПолучитьВложенныйБлок(ДеревоОбластейФормыРМК.ПолучитьЭлементы(),
		ТипГруппировкаВертикальная, ИмяТекущейОбласти, 1);
	
	СтильГлавнойГруппы = СформироватьСтильГлавнойГруппы();

	ШаблонДокумента = ШаблонСхемыФормыРМК();
	СодержимоеДокумента = СтрЗаменить(ШаблонДокумента, "&WrapperStyle}", СтильГлавнойГруппы);
	СодержимоеДокумента = СтрЗаменить(СодержимоеДокумента, "&StyleContent", БлокСтилей);
	СодержимоеДокумента = СтрЗаменить(СодержимоеДокумента, "&FieldContent", БлокПанелей);
	
	Возврат СодержимоеДокумента;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтрокуУровня(СтрокиУровня, ИмяОбласти)
	
	РезультатФункции = Неопределено;
	КоличествоСтрок = СтрокиУровня.Количество();
	ИндексСтроки = 0;
	Пока ИндексСтроки < КоличествоСтрок И РезультатФункции = Неопределено Цикл
		СтрокаУровня = СтрокиУровня.Получить(ИндексСтроки);
		Если СтрокаУровня.ИмяОбласти = ИмяОбласти Тогда
			РезультатФункции = СтрокаУровня;
		КонецЕсли;
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура СхемаФормыРМКПриНажатииКлиент(Знач EventElement)
	
	ИмяИменногоТэга = "td";
	МассивИменГрупп = Новый Массив;
	Пока Не EventElement = Неопределено Цикл
		Если Нрег(EventElement.tagName) = ИмяИменногоТэга И ЗначениеЗаполнено(EventElement.id) Тогда
			ИмяГруппы = EventElement.id;
			МассивИменГрупп.Вставить(0, ИмяГруппы);
		КонецЕсли;
		EventElement = EventElement.parentElement;
	КонецЦикла;
	КоличествоГрупп = МассивИменГрупп.Количество();
	СтрокаДерева = ?(КоличествоГрупп > 0, ДеревоОбластейФормыРМК, Неопределено);
	ИндексГруппы = 0;
	Пока ИндексГруппы < КоличествоГрупп И Не СтрокаДерева = Неопределено Цикл
		ИмяГруппы = МассивИменГрупп[ИндексГруппы];
		СтрокаДерева = ПолучитьСтрокуУровня(СтрокаДерева.ПолучитьЭлементы(), ИмяГруппы);
		ИндексГруппы = ИндексГруппы + 1;
	КонецЦикла;
	Если Не СтрокаДерева = Неопределено Тогда
		Элементы.ДеревоОбластейФормыРМК.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
