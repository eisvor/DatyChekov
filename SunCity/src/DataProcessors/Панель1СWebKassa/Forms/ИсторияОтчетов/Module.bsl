&НаКлиенте
Перем МассивОтчетов;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Параметры.Свойство("Организация") 
		ИЛИ НЕ Параметры.Свойство("СерийныйНомер") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Организация = Параметры.Организация;
	СерийныйНомер = Параметры.СерийныйНомер;
	СведенияООрганизации = ИнтеграцияWebKassaВызовСервераПереопределяемый.ПолучитьСведенияОбОрганизации(Организация, ТекущаяДата());
	НаименованиеОрганизации = СведенияООрганизации.ПолноеНаименование;
	ИИН = СведенияООрганизации.ИНН;
	НомерНДС = Организация.НомерСвидетельстваПоНДС;
	СерияНДС = Организация.СерияСвидетельстваПоНДС;
	ШиринаЛенты = ШиринаЛентыПоУмолчанию(СерийныйНомер);
	
	УстановитьДоступностьКнопок(1, 1);
	КоличествоОтчетов = 5;
	
	Элементы.ПринтерЧеков.Доступность = ИспользоватьПринтерЧеков;
	Элементы.ПечатьЧека.Доступность = ИспользоватьПринтерЧеков;
	РабочееМесто = ИнтеграцияWebKassaВызовСервераПереопределяемый.ПолучитьРабочееМестоКлиента();
	
	//принтер чеков
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипОборудования", Перечисления.ТипыПодключаемогоОборудования.ПринтерЧеков));
	Элементы.ПринтерЧеков.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОтчетовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьОтчет();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИспользоватьПринтерЧековПриИзменении(Элемент)
	
	Элементы.ПринтерЧеков.Доступность = ИспользоватьПринтерЧеков;
	Элементы.ПечатьЧека.Доступность = ИспользоватьПринтерЧеков;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОтчеты()
	
	ВходныеПараметры = Новый Структура;
	ВходныеПараметры.Вставить("Организация",   Организация);
	ВходныеПараметры.Вставить("СерийныйНомер", СерийныйНомер);
	ВходныеПараметры.Вставить("Отступ",        Отступ);
	ВходныеПараметры.Вставить("Количество",    КоличествоОтчетов);
	
	ПараметрыПодключения = Новый Структура;
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПолучитьОтчеты_Завершение", ЭтотОбъект);
	ИнтеграцияWebKassaКлиент.НачатьПолучениеСменныхОтчетов(ОповещениеПриЗавершении, ВходныеПараметры, ПараметрыПодключения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПервуюСтраницу(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Отступ = 0;
	ПолучитьОтчеты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущаяСтраница(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Отступ = Отступ - КоличествоОтчетов;
	ПолучитьОтчеты();
	
КонецПроцедуры

&НаКлиенте
Процедура СледующаяСтраница(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Отступ = Отступ + КоличествоОтчетов;
	ПолучитьОтчеты();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПолучитьОтчеты_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.РезультатВыполнения Тогда
		
		СписокОтчетов.Очистить();
		Если Результат.ОбъектыJSON.Data.Total = 0 Тогда
			УстановитьДоступностьКнопок(1, 1);
			Элементы.НадписьСтраницы.Заголовок = нСтр("ru='Страница 0 из 0 (Всего элементов: 0)'", "ru");
			ИнтеграцияWebKassaКлиентПереопределяемый.СообщитьПользователю(нСтр("ru='Сменных отчетов не обнаружено.'", "ru"));
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат.ОбъектыJSON.Data.Reports) И Результат.ОбъектыJSON.Data.Reports.Количество() <> 0 Тогда
			Индекс = 0;
			Для Каждого Отчет Из Результат.ОбъектыJSON.Data.Reports Цикл
				Отчет.Вставить("TaxPayerName", НаименованиеОрганизации);
				Отчет.Вставить("TaxPayerIN", ИИН);
				Отчет.Вставить("TaxPayerVATSeria", СерияНДС);
				Отчет.Вставить("TaxPayerVATNumber", НомерНДС);
				ЗаполнитьЗначенияСвойств(СписокОтчетов.Добавить(), Новый Структура("НомерСмены, НомерДокумента, ДатаОтчета, ИндексОтчета",
					Отчет.ShiftNumber,
					Отчет.ReportNumber,
					Отчет.ReportOn,
					Индекс
				));
				Индекс = Индекс + 1;
			КонецЦикла;
			МассивОтчетов = ИнтеграцияWebKassaКлиентПереопределяемый.СкопироватьМассив(Результат.ОбъектыJSON.Data.Reports);
		КонецЕсли;
		
		ВсегоЧеков = Результат.ОбъектыJSON.Data.Total;
		ВсегоСтраниц = ?((ВсегоЧеков - КоличествоОтчетов * Цел(ВсегоЧеков / КоличествоОтчетов)) > 0,
			Цел(ВсегоЧеков / КоличествоОтчетов)+1, Цел(ВсегоЧеков / КоличествоОтчетов));
		НомерСтраницы = Отступ/КоличествоОтчетов + 1;
		Элементы.НадписьСтраницы.Заголовок = СтрШаблон(нСтр("ru='Страница %1 из %2 (Всего элементов: %3)'", "ru"),
			НомерСтраницы, ВсегоСтраниц, ВсегоЧеков);
		УстановитьДоступностьКнопок(НомерСтраницы, ВсегоСтраниц);
		
	Иначе
		Если Результат.ВыходныеПараметры[0] = 999 Тогда
			СписокОтчетов.Очистить();
			УстановитьДоступностьКнопок(1, 1);
			Элементы.НадписьСтраницы.Заголовок = нСтр("ru='Страница 0 из 0 (Всего элементов: 0)'", "ru");
			ТекстСообщения = НСтр("ru = 'При получение произошла ошибка.
				|Дополнительное описание: %ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", Результат.ВыходныеПараметры[1]);
			ИнтеграцияWebKassaКлиентПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКнопок(ТекущаяСтраница, ВсегоСтраниц)
	
	СледующаяСтраницаДоступность = Ложь;
	ПредыдущаяСтраницаДоступность = Ложь;
	
	КнопкаПредыдущая = Элементы.Найти("СтраницаПредыдущая");
	Если КнопкаПредыдущая <> Неопределено Тогда
		
		Если ТекущаяСтраница = 1 Тогда
			КнопкаПредыдущая.Доступность = Ложь;
		Иначе
			КнопкаПредыдущая.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	КнопкаСледующая = Элементы.Найти("СтраницаСледующая");
	Если КнопкаСледующая <> Неопределено Тогда
		
		Если ТекущаяСтраница = ВсегоСтраниц Тогда
			КнопкаСледующая.Доступность = Ложь;
		Иначе
			КнопкаСледующая.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчет(Команда)
	
	ПоказатьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека(Команда)
	
	ПоказатьОтчет(Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВыборОтчета()
	
	Если Элементы.СписокОтчетов.ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Для выполнения операции необходимо выбрать сменный отчет!'");
		ИнтеграцияWebKassaКлиентПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ШиринаЛентыПоУмолчанию(СерийныйНомер)
	
	ЗначениеПоУмолчанию = "24";
	МассивСерийныхНомеров = Новый Массив;
	МассивСерийныхНомеров.Добавить(СерийныйНомер);
	СоответствиеКассККМСерийнымНомерам = ИнтеграцияWebKassaВызовСервера.СоответствиеКассККМСерийнымНомерам(МассивСерийныхНомеров);
	Если СоответствиеКассККМСерийнымНомерам.Количество() = 0 Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	СписокКассККМ = СоответствиеКассККМСерийнымНомерам[СерийныйНомер];
	Для Каждого КассаККМ Из СписокКассККМ Цикл
		ОборудованиеКассы = КассаККМ;
		Если ЗначениеЗаполнено(ОборудованиеКассы) Тогда
			ПараметрыУстройства = Справочники.ПодключаемоеОборудование.ПолучитьПараметрыУстройства(ОборудованиеКассы);
			Если ПараметрыУстройства.Свойство("ШиринаЛенты") Тогда
				ЗначениеПоУмолчанию = ПараметрыУстройства.ШиринаЛенты;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьОтчет(ПечататьОтчет = Ложь)
	
	Если Не ПроверитьВыборОтчета() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОтчета = Новый Структура("Data",МассивОтчетов[Элементы.СписокОтчетов.ТекущиеДанные.ИндексОтчета]);
	ПараметрыЛенты = Новый Структура("ШиринаЛенты", ШиринаЛенты);
	
	Если ПечататьОтчет Тогда
		ШиринаСтрокиПринтера = ПолучитьШиринуСтрокиПринтера(ПринтерЧеков);
		ПараметрыЛенты.ШиринаЛенты = ?(ШиринаСтрокиПринтера<>Неопределено, ШиринаСтрокиПринтера, 32);
		ТекстОтчета = ПодключаемоеОборудованиеWebkassaФискальныеРегистраторыКлиент.СформироватьТекстОтчета(ДанныеОтчета, 2, ПараметрыЛенты);
		ИнтеграцияWebKassaКлиентПереопределяемый.НачатьПечатьТекста(
			Новый ОписаниеОповещения("ПослеЗавершенияПечатиНаПринтереЧеков", ЭтотОбъект),
			Новый УникальныйИдентификатор(),
			ТекстОтчета,
			ПринтерЧеков);
	Иначе
		ТабличныйДокумент = Новый ТабличныйДокумент;
		РезультатПечати = ИнтеграцияWebKassaВызовСервера.ПечатьXZОтчета(
			ДанныеОтчета, 2, ПараметрыЛенты, ТабличныйДокумент);
		Если ТабличныйДокумент = Неопределено Тогда
			ШаблонСообщения = НСтр("ru = 'Операция успешно проведена в системе Webkassa, но при печати произошла ошибка.
				|Дополнительное описание:
				|%1'");
			ТекстСообщения = ИнтеграцияWebKassaКлиентПереопределяемый.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатПечати);
			ИнтеграцияWebKassaКлиентПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Иначе
			ТабличныйДокумент.АвтоМасштаб = Истина;
			ТабличныйДокумент.Показать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияПечатиНаПринтереЧеков(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		//сообщить о проблемах с печатью
		ТекстСообщения = НСтр("ru = 'При печати произошла ошибка.
			|Дополнительное описание:
			|%ДополнительноеОписание%'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ИнтеграцияWebKassaКлиентПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьШиринуСтрокиПринтера(Идентификатор)
	
	ПараметрыУстройства = ИнтеграцияWebKassaВызовСервераПереопределяемый.ПолучитьПараметрыУстройства(Идентификатор);
	ШиринаСтроки = 32;
	Если ПараметрыУстройства.Свойство("ШиринаСтроки") Тогда
		ШиринаСтроки = ПараметрыУстройства.ШиринаСтроки;
	ИначеЕсли ПараметрыУстройства.Свойство("P_LineLength") Тогда
		ШиринаСтроки = ПараметрыУстройства.P_LineLength;
	КонецЕсли;
	Возврат ШиринаСтроки;
	
КонецФункции

#КонецОбласти