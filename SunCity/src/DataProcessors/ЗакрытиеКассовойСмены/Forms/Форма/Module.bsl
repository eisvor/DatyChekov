#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОповещениеОткрытьФормуПроверкиНепробитыхЧеков(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если РезультатОткрытияФормы = НСтр("ru = 'Закрытие смены'") Тогда
		ПродолжитьЗакрытиеСмены(Ложь);
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Закрытие кассовой смены прервано пользователем.'");
		Если ВыводитьСообщенияВРежимеРМК Тогда
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстОшибки, , , ЭтотОбъект.ВладелецФормы)
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВопросаПечатьПослеЗакрытия(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		Если НЕ ВРЕГ(РезультатОткрытияФормы) = "ДА" Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.СуммаФактическойВыемки;
			ТекстОшибки = НСтр("ru = 'Уточните сумму выемки'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				"СуммаФактическойВыемки");
		Иначе
			ПродолжитьЗакрытиеСменыОкончание(Ложь);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ПараметрыВыемки") Тогда
		ПараметрыВыемки = Параметры.ПараметрыВыемки;
		Объект.КассаККМ = ПараметрыВыемки.КассаККМ;
		ВыполнитьЗакрытиеСразу = Истина
	ИначеЕсли Параметры.Свойство("КассаККМ") Тогда
		Объект.КассаККМ = Параметры.КассаККМ;
	КонецЕсли;
	
	Параметры.Свойство("ДокументыОткрыватьМодально", ДокументыОткрыватьМодально);
	Параметры.Свойство("СуммаФактическойВыемки"    , СуммаФактическойВыемки);
	
	ЗначениеНастроекВызовСервера.ЗаполнитьКассуККМПоУмолчанию(Объект.КассаККМ);
	
	Если Параметры.Свойство("ВыводитьСообщенияВРежимеРМК") Тогда
		ВыводитьСообщенияВРежимеРМК = Параметры.ВыводитьСообщенияВРежимеРМК;
	КонецЕсли;
	
	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекВызовСервера.ИспользоватьПодключаемоеОборудование();
	
	Если ПараметрыВыемки = Неопределено Тогда
		ПараметрыВыемки = РозничныеПродажиКлиентСервер.ПараметрыВыемкиИзКассы();
		ПараметрыВыемки.КассаККМ = Объект.КассаККМ;
		РозничныеПродажиСервер.ИнициализироватьПараметрыВыемкиИзКассы(ПараметрыВыемки);
	КонецЕсли;
	
	КассаККМПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Перем ВыполнениеПрервано;
	
	Если ВыполнитьЗакрытиеСразу Тогда
		
		ВыполнениеПрервано = Ложь;
		ВыполнитьЗакрытиеСмены(ВыполнениеПрервано);
		
		Если НЕ ВыполнениеПрервано Тогда
			//Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОстатокПодробнее" Тогда
		СтандартнаяОбработка = Ложь;
		
		Отбор = Новый Структура;
		Отбор.Вставить("КассаККМ", Объект.КассаККМ);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		ОткрытьФорму("Отчет.ОстаткиИДвиженияДенежныхСредствВКассахККМПоВидамВыручки.Форма", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	КассаККМПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭквайринговыйТерминалПриИзменении(Элемент)
	
	ЭквайринговыйТерминалПриИзмененииСевер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверкуИтоговПоПлатежнымКартамПриИзменении(Элемент)
	
	Если НЕ ВыполнитьСверкуИтоговПоПлатежнымКартам Тогда
		ЭквайринговыйТерминал = ПредопределенноеЗначение("Справочник.ЭквайринговыеТерминалы.ПустаяСсылка");
	Иначе
		Если НЕ ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
			Элементы.ЭквайринговыйТерминал.ОтметкаНезаполненного = Истина;
		КонецЕсли;
	КонецЕсли;
	Элементы.ЭквайринговыйТерминал.Доступность = ВыполнитьСверкуИтоговПоПлатежнымКартам;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакрытьСмену(Команда)
	Перем Отказ;
	
	Отказ = Ложь;
	
	// &ЗамерПроизводительности 
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
								"Обработка.ЗакрытиеКассовойСмены.Форма.Форма.Команда.ЗакрытьСмену",
															Истина);
	
	ВыполнитьЗакрытиеСмены(Отказ);
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

///////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура КассаККМПриИзмененииСервер()
	
	ПодключаемоеОборудование = Объект.КассаККМ.ПодключаемоеОборудование;
	Организация              = Объект.КассаККМ.Владелец;
	
	ИспользоватьКассуККМБезПодключенияОборудования = Объект.КассаККМ.ИспользоватьБезПодключенияОборудования;
	
	ЭквайринговыйТерминал = ЭквайринговыйТерминалПоКассеККМ();
	ЭквайринговыйТерминалПриИзмененииСевер();
	
	Если НЕ ПараметрыВыемки.КассаККМ = Объект.КассаККМ Тогда
		ПараметрыВыемки.КассаККМ = Объект.КассаККМ;
		РозничныеПродажиСервер.ИнициализироватьПараметрыВыемкиИзКассы(ПараметрыВыемки);
	КонецЕсли;
	
	Валюта = ОбщегоНазначенияРТКлиентСервер.Валюта();
	
	ОстатокВКассеЗаголовок = Формат(ПараметрыВыемки.СуммаОстаток, "ЧДЦ=2; ЧН=") + " " + Валюта;
	Элементы.ДекорацияОстатокВКассе.Заголовок = Новый ФорматированнаяСтрока(ОстатокВКассеЗаголовок,,,,"ОстатокПодробнее");
	Если ПараметрыВыемки.ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		Элементы.ДекорацияОстатокВКассеАгентские.Заголовок = Формат(ПараметрыВыемки.СуммаОстатокАгентские, "ЧДЦ=2; ЧН=") + " " + Валюта;
	КонецЕсли;
	
	Если ПараметрыВыемки.ПроизводитьВыемку И НЕ ПараметрыВыемки.ЗапрашиватьСуммуВыемки Тогда
		СуммаФактическойВыемки = ПараметрыВыемки.СуммаОстаток;
	КонецЕсли;
	
	УстановитьДоступностьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЭквайринговыйТерминалПриИзмененииСевер()
	
	ПодключаемоеОборудованиеЭТ = ЭквайринговыйТерминал.ПодключаемоеОборудование;
	Если ЗначениеЗаполнено(ПодключаемоеОборудованиеЭТ) Тогда
		ВыполнитьСверкуИтоговПоПлатежнымКартам = Истина;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура УстановитьДоступностьНаСервере()
	
	Элементы.СуммаФактическойВыемки.Доступность = ПараметрыВыемки.ЗапрашиватьСуммуВыемки;
	
	Элементы.ДекорацияОстатокВКассеАгентскиеЗаголовок.Видимость = ПараметрыВыемки.ИспользоватьАгентскиеПлатежиИРазделениеВыручки;
	Элементы.ДекорацияОстатокВКассеАгентские.Видимость          = ПараметрыВыемки.ИспользоватьАгентскиеПлатежиИРазделениеВыручки;
	
	ПравоПросмотраВедомостиККМ = ПравоДоступа("Просмотр", Метаданные.Отчеты.ОстаткиИДвиженияДенежныхСредствВКассахККМПоВидамВыручки);
	Элементы.ДекорацияОстатокВКассе.Доступность          = ПравоПросмотраВедомостиККМ;
	Элементы.ДекорацияОстатокВКассеЗаголовок.Доступность = ПравоПросмотраВедомостиККМ;
	
	ВозможностьПечатиZОтчета = ИспользоватьПодключаемоеОборудование И НЕ ИспользоватьКассуККМБезПодключенияОборудования;
	
	Элементы.ЗакрытьБезZОтчета.Доступность = ВозможностьПечатиZОтчета;
	Если НЕ ВозможностьПечатиZОтчета Тогда
		ЗакрытьБезZОтчета = Истина;
	КонецЕсли;
	
	ВозможностьВыполнитьСверкуИтоговПоПлатежнымКартам = ИспользоватьПодключаемоеОборудование
														И ЗначениеЗаполнено(ЭквайринговыйТерминал)
														И НЕ ЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования
														И НЕ ИспользоватьКассуККМБезПодключенияОборудования;
	
	Если НЕ ВозможностьВыполнитьСверкуИтоговПоПлатежнымКартам Тогда
		ВыполнитьСверкуИтоговПоПлатежнымКартам = Ложь;
		ЭквайринговыйТерминал = Справочники.ЭквайринговыеТерминалы.ПустаяСсылка();
		ЭквайринговыйТерминалПриИзмененииСевер();
	Иначе
		Если ВыполнитьЗакрытиеСразу Тогда
			ВыполнитьСверкуИтоговПоПлатежнымКартам = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ВыполнитьСверкуИтоговПоПлатежнымКартам.Доступность = ВозможностьВыполнитьСверкуИтоговПоПлатежнымКартам;
	Элементы.ЭквайринговыйТерминал.Доступность                  = ВозможностьВыполнитьСверкуИтоговПоПлатежнымКартам 
																  И ВыполнитьСверкуИтоговПоПлатежнымКартам;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗакрытиеСмены(Отказ)
	Перем СсылкаНаОтчет, НужноДополнительноеПредупреждение;
	
	ОчиститьСообщения();
	
	Если ВыполнитьЗакрытиеСразу Тогда
		ПродолжитьЗакрытиеСменыОкончание(Отказ);
	ИначеЕсли ВозможностьЗакрытияСменыКлиент() Тогда
		ПродолжитьЗакрытиеСмены(Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеПроверкиВозможностиЗакрытияСмены()

	Данные = Новый Структура;
	СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(Объект.КассаККМ);
	КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
	ПредварительнаяПроверкаНепробитыхЧеков = УправлениеПользователямиВызовСервера.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ПроверятьНепробитыеЧекиПриЗакрытииСмены, Ложь);
	
	Данные.Вставить("СтруктураСостояниеКассовойСмены"       , СтруктураСостояниеКассовойСмены);
	Данные.Вставить("ПредварительнаяПроверкаНепробитыхЧеков", ПредварительнаяПроверкаНепробитыхЧеков);
	
	Возврат Данные;
	
КонецФункции // ДанныеПроверкиВозможностиЗакрытияСмены()

&НаКлиенте
Функция ВозможностьЗакрытияСменыКлиент()
	
	Если НЕ ЗначениеЗаполнено(Объект.КассаККМ)  Тогда
		ТекстОшибки = НСтр("ru = 'Не задана касса ККМ'");
		СообщитьОбОшибке(ТекстОшибки, "Объект.КассаККМ");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗакрытьБезZОтчета И ПараметрыВыемки.ПроизводитьВыемку И ПараметрыВыемки.ЗапрашиватьСуммуВыемки Тогда
		Если СуммаФактическойВыемки > ПараметрыВыемки.СуммаОстаток Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru='Сумма выемки не может превышать сумму остатка: %1'"),
				ПараметрыВыемки.СуммаОстаток);
			СообщитьОбОшибке(ТекстОшибки, "СуммаФактическойВыемки");
			Возврат Ложь;
		КонецЕсли;
		Если ПараметрыВыемки.ИспользоватьАгентскиеПлатежиИРазделениеВыручки
			И СуммаФактическойВыемки < ПараметрыВыемки.СуммаОстатокАгентские Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru='Сумма выемки должны быть не менее остатка агентских средств: %1'"),
				ПараметрыВыемки.СуммаОстатокАгентские);
			СообщитьОбОшибке(ТекстОшибки, "СуммаФактическойВыемки");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеПроверкиВозможностиЗакрытияСмены = ДанныеПроверкиВозможностиЗакрытияСмены();
	
	СтруктураСостояниеКассовойСмены = ДанныеПроверкиВозможностиЗакрытияСмены.СтруктураСостояниеКассовойСмены;
	
	Если НЕ СтруктураСостояниеКассовойСмены.СменаОткрыта Тогда
		
		ТекстОшибки = НСтр("ru='Кассовая смена не открыта.'");
		
		СообщитьОбОшибке(ТекстОшибки, "");
		Возврат Ложь;
	КонецЕсли;
	
	Если ДанныеПроверкиВозможностиЗакрытияСмены.ПредварительнаяПроверкаНепробитыхЧеков Тогда
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("КассаККМ", Объект.КассаККМ);
		
		ОбработчикОповещения= Новый ОписаниеОповещения("ОповещениеОткрытьФормуПроверкиНепробитыхЧеков", ЭтотОбъект);
		ПройденаПроверкаНепробитыхЧеков = РозничныеПродажиКлиент.ПройденаПроверкаНепробитыхЧеков(Объект.КассаККМ, ОбработчикОповещения);
		
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура СообщитьОбОшибке(ТекстОшибки, Поле)
	Если ВыводитьСообщенияВРежимеРМК Тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстОшибки, , , ЭтотОбъект.ВладелецФормы)
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, Объект, Поле);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗакрытиеСмены(Отказ)
	
	ОчиститьИнформацию();
	
	Если ПараметрыВыемки.ПроизводитьВыемку Тогда
		
		Если ЭтотОбъект.ВладелецФормы = Неопределено
			И ПараметрыВыемки.ЗапрашиватьСуммуВыемки
			И (СуммаФактическойВыемки + ПараметрыВыемки.МаксимальнаяСуммаРазмена) < ПараметрыВыемки.СуммаОстаток Тогда
			ТекстЗаголовка = НСтр("ru = 'Ввод суммы выемки.'"); 
			ТекстВопроса = НСтр("ru = 'Сумма остатка ДС в кассе ККМ будет превышать максимальную сумму размена. Продолжить закрытие кассы?'");
			
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВопросаПечатьПослеЗакрытия", ЭтотОбъект);
			ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(ТекстЗаголовка, ТекстВопроса, "Нет", ОбработчикОповещения);
			
			Возврат;
		КонецЕсли;
	Иначе 
		СуммаФактическойВыемки = 0;
	КонецЕсли;
	
	ПродолжитьЗакрытиеСменыОкончание(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗакрытиеСменыОкончание(Отказ)
	
	ЭтаФорма.Доступность = Ложь;  
	
	ПараметрыВыполнения = Новый Структура("Отказ", Отказ);
	Оповещение = Новый ОписаниеОповещения("ПродолжитьЗакрытиеСменыЗавершение", ЭтотОбъект, ПараметрыВыполнения);
	ВыполнитьСверткуИтогов(Оповещение);                           
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗакрытиеСменыЗавершение(РезультатВыполнения, ПараметрыВыполнения) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	
	СписокДокументов.Очистить();    
	Отказ = ПараметрыВыполнения.Отказ;
	
	СсылкаНаОтчет = Неопределено;
	НужноДополнительноеПредупреждение = Ложь;
	
	ОбработатьДокументыККМСервер(Отказ, СсылкаНаОтчет, НужноДополнительноеПредупреждение);
	
	Если Отказ Тогда
		ОбработатьСозданныеДокументы();
		ТекстСообщения = НСтр("ru = 'Кассовая смена не закрыта.'");
		Если ВыводитьСообщенияВРежимеРМК Тогда
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстСообщения, , , ЭтотОбъект.ВладелецФормы)
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.Доступность = Ложь;
	
	ИзымаемаяСумма = СуммаФактическойВыемки;
	Если ПараметрыВыемки.ПроизводитьВыемку И ПараметрыВыемки.ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		ИзымаемаяСумма = ИзымаемаяСумма - ПараметрыВыемки.СуммаОстатокАгентские;
	КонецЕсли;
	
	ПараметрыВыполнения = ДенежныеСредстваКлиент.ПараметрыВыполненияОперацииВыемкаДенег();
	ПараметрыВыполнения.ИзымаемаяСумма = ИзымаемаяСумма;
	ПараметрыВыполнения.КассаККМ = Объект.КассаККМ;
	ПараметрыВыполнения.УникальныйИдентификатор = УникальныйИдентификатор;
	ПараметрыВыполнения.ДокументВыемка = Неопределено;
	ПараметрыВыполнения.СсылкаНаОтчет  = СсылкаНаОтчет;
	ПараметрыВыполнения.БезВыводаСообщений = ВыводитьСообщенияВРежимеРМК; 
	ПараметрыВыполнения.Вставить("Отказ", Отказ);
	ПараметрыВыполнения.Вставить("НужноДополнительноеПредупреждение", НужноДополнительноеПредупреждение);
	ПараметрыВыполнения.Вставить("ОшибкаТранзакцииВыемки", Ложь);
	ПараметрыВыполнения.Вставить("КассоваяСмена", КассоваяСмена);
	
	Если ЗакрытьБезZОтчета Тогда
		ПараметрыВыполнения.Вставить("ЗакрытьБезZОтчета");
	КонецЕсли;
	
	Если ИзымаемаяСумма > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ПродолжитьЗакрытиеСменыОкончаниеВыемкаЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		ДенежныеСредстваКлиент.НачатьВыемкуДенег(Оповещение, ПараметрыВыполнения);
	Иначе
		ПродолжитьЗакрытиеСменыОкончаниеВыемкаЗавершение(Неопределено, ПараметрыВыполнения)
	КонецЕсли;

КонецПроцедуры
	
&НаКлиенте
Процедура ПродолжитьЗакрытиеСменыОкончаниеВыемкаЗавершение(РезультатВыполнения, ПараметрыВыполнения) Экспорт
	
	ИнформацияВыемка = 0;
	
	Если РезультатВыполнения <> Неопределено Тогда
		Если РезультатВыполнения.Результат Тогда
			СписокДокументов.Добавить(РезультатВыполнения.ДокументВыемка, "ВыемкаДенежныхСредствИзКассыККМ");
			ИнформацияВыемка = РезультатВыполнения.ИзымаемаяСумма;
		Иначе
			ПараметрыВыполнения.ОшибкаТранзакцииВыемки = Истина;
			ИнформацияВыемка = НСтр("ru = 'Не смогли произвести выемку'"); 
			Если ЗначениеЗаполнено(РезультатВыполнения.ДокументВыемка)  Тогда
				СписокДокументов.Добавить(РезультатВыполнения.ДокументВыемка, "ВыемкаДенежныхСредствИзКассыККМ");
				СписокНеПроведенныхДокументов.Добавить(РезультатВыполнения.ДокументВыемка, "ВыемкаДенежныхСредствИзКассыККМ");
			КонецЕсли;
		КонецЕсли
	КонецЕсли;
	
	Если ПараметрыВыемки.ПроизводитьВыемку Тогда
		МассивДоговоров = МассивАгентскихДоговоровВКассеККМ(Объект.КассаККМ);
	Иначе
		МассивДоговоров = Новый Массив;
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("МассивДоговоров"    , МассивДоговоров);
	ПараметрыВыполнения.Вставить("КоличествоЭлементов", МассивДоговоров.Количество());
	ПараметрыВыполнения.Вставить("ТекущийЭлемент"     , 0);
	ПараметрыВыполнения.Вставить("ПоследняяОперация"  , Ложь);
	ПараметрыВыполнения.Вставить("ИнформацияВыемка"   , ИнформацияВыемка);
	
	ПродолжитьЗакрытиеСменыОкончаниеВыемкаПоДоговорамЗавершение(Неопределено, ПараметрыВыполнения); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗакрытиеСменыОкончаниеВыемкаПоДоговорамЗавершение(РезультатВыполнения, ПараметрыВыполнения) Экспорт
	
	Если РезультатВыполнения <> Неопределено Тогда
		
		Если РезультатВыполнения.Результат Тогда
			СписокДокументов.Добавить(РезультатВыполнения.ДокументВыемка, "ВыемкаДенежныхСредствИзКассыККМ");
			Если НЕ ПараметрыВыполнения.ОшибкаТранзакцииВыемки Тогда
				ПараметрыВыполнения.ИнформацияВыемка = ПараметрыВыполнения.ИнформацияВыемка + РезультатВыполнения.ИзымаемаяСумма;
			КонецЕсли; 
		Иначе
			ПараметрыВыполнения.ОшибкаТранзакцииВыемки = Истина;
			ПараметрыВыполнения.ИнформацияВыемка = НСтр("ru = 'Не смогли произвести выемку'"); 
			Если ЗначениеЗаполнено(РезультатВыполнения.ДокументВыемка)  Тогда
				СписокДокументов.Добавить(РезультатВыполнения.ДокументВыемка, "ВыемкаДенежныхСредствИзКассыККМ");
				СписокНеПроведенныхДокументов.Добавить(РезультатВыполнения.ДокументВыемка, "ВыемкаДенежныхСредствИзКассыККМ");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
	Если ПараметрыВыполнения.ТекущийЭлемент < ПараметрыВыполнения.КоличествоЭлементов Тогда
		
		Договор = ПараметрыВыполнения.МассивДоговоров.Получить(ПараметрыВыполнения.ТекущийЭлемент);
		ПараметрыВыполнения.ТекущийЭлемент = ПараметрыВыполнения.ТекущийЭлемент + 1;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ДоговорКонтрагента", Договор);
		
		СуммаАгентскойВыемки = СуммаОстаткаДСПоКассеККМ(Объект.КассаККМ, Договор);
		
		ПараметрыОперации = ДенежныеСредстваКлиент.ПараметрыВыполненияОперацииВыемкаДенег();
		ПараметрыОперации.ИзымаемаяСумма = СуммаАгентскойВыемки;
		ПараметрыОперации.КассаККМ = Объект.КассаККМ;
		ПараметрыОперации.УникальныйИдентификатор = УникальныйИдентификатор;
		ПараметрыОперации.ДокументВыемка = Неопределено;
		ПараметрыОперации.СсылкаНаОтчет  = ПараметрыВыполнения.СсылкаНаОтчет;
		ПараметрыОперации.БезВыводаСообщений = ВыводитьСообщенияВРежимеРМК; 
		ПараметрыОперации.ДополнительныеПараметры = ДополнительныеПараметры;
		
		Если ЗакрытьБезZОтчета Тогда
			ПараметрыОперации.Вставить("ЗакрытьБезZОтчета");
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ПродолжитьЗакрытиеСменыОкончаниеВыемкаПоДоговорамЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		ДенежныеСредстваКлиент.НачатьВыемкуДенег(Оповещение, ПараметрыОперации);
		
	Иначе
		ПродолжитьЗакрытиеСменыОкончаниеФискальныйОтчет(ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗакрытиеСменыОкончаниеФискальныйОтчет(ПараметрыВыполнения) Экспорт
	
	ОписаниеОшибки = "";
		
	Результат = Ложь;
	
	ПараметрыВыполнения.Вставить("ИнформацияОбZОтчете", НСтр("ru = 'Z-отчет не выводится'"));
	ПараметрыВыполнения.Вставить("ИнформацияЗакрытиеСменыВСистеме", НСтр("ru = 'Кассовая смена в системе не закрыта:'"));
	
	Если ИспользоватьПодключаемоеОборудование И НЕ ИспользоватьКассуККМБезПодключенияОборудования И НЕ ЗакрытьБезZОтчета Тогда
		
		ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
		ФИОКассира = ОбщегоНазначенияРТВызовСервера.ФИОФизЛицаПользователяСУчетомИзмененныхПрав();
		Если Не ФИОКассира = "" Тогда
			ПараметрыОперации.Кассир = ФИОКассира;
		Иначе
			ПараметрыОперации.Кассир = НСтр("ru='Администратор'");
		КонецЕсли;
		
		Если ЭтаФорма.ВладелецФормы <> Неопределено Тогда     
			УникальныйИдентификаторФормы = ЭтаФорма.ВладелецФормы.УникальныйИдентификатор 
		Иначе
			УникальныйИдентификаторФормы = УникальныйИдентификатор    
		КонецЕсли;
			
		СерийныйНомер = ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(ПараметрыВыполнения.КассаККМ, "СерийныйНомер");
		ПараметрыОперации.Вставить("СерийныйНомер", СерийныйНомер);
		
		Оповещение = Новый ОписаниеОповещения("ПродолжитьЗакрытиеСменыОкончаниеФискальныйОтчетПечатьЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		МенеджерОборудованияКлиент.НачатьЗакрытиеСменыНаФискальномУстройстве(Оповещение, УникальныйИдентификатор, ПараметрыОперации, ПодключаемоеОборудование, , КассоваяСмена);
		
	Иначе
		ПараметрыВыполнения.ИнформацияОбZОтчете = НСтр("ru = 'Z-отчет не выводится'");
		Результат = ЗакрытьКассовуюСмену(Объект.КассаККМ, ОписаниеОшибки, ПараметрыВыполнения.СсылкаНаОтчет);
		Если Не Результат Тогда
			ТекстЗаголовка = НСтр("ru = 'При закрытии смены произошла ошибка.'");
			ТекстСообщения = НСтр("ru = 'Смена не закрыта.
			                            |Дополнительное описание:
			                            |%ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
			Если ВыводитьСообщенияВРежимеРМК Тогда
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстЗаголовка, ТекстСообщения, , ЭтотОбъект.ВладелецФормы)
			Иначе
				ТекстСообщения = ТекстЗаголовка + Символы.ПС + ТекстСообщения;
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, ПараметрыВыполнения.Отказ);
			КонецЕсли;
		Иначе
			ПараметрыВыполнения.ИнформацияЗакрытиеСменыВСистеме = НСтр("ru = 'Кассовая смена в системе закрыта'") 
		КонецЕсли;
		
		ПродолжитьЗакрытиеСменыОкончаниеФискальныйОтчетЗавершение(Результат, ПараметрыВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПродолжитьЗакрытиеСменыОкончаниеФискальныйОтчетПечатьЗавершение(РезультатВыполнения, ПараметрыВыполнения) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстЗаголовка = НСтр("ru = 'При снятии отчета на фискальном регистраторе произошла ошибка.'");
		ТекстСообщения = НСтр("ru = '""%ОписаниеОшибки%""
							|Отчет на фискальном регистраторе не сформирован.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		Если ВыводитьСообщенияВРежимеРМК Тогда
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстЗаголовка, ТекстСообщения, , ЭтотОбъект.ВладелецФормы)
		Иначе
			ТекстСообщения = ТекстЗаголовка + Символы.ПС + ТекстСообщения;
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, ПараметрыВыполнения.Отказ);
		КонецЕсли;
		ПараметрыВыполнения.ИнформацияОбZОтчете = НСтр("ru = 'Нет возможности вывести Z-отчет'");
		
		ПродолжитьЗакрытиеСменыОкончаниеФискальныйОтчетЗавершение(Ложь, ПараметрыВыполнения);
		
	Иначе
		ПараметрыВыполнения.ИнформацияОбZОтчете = НСтр("ru = 'Z-отчет распечатан'");
		
		ОписаниеОшибки = "";
		
		Результат = ЗакрытьКассовуюСмену(Объект.КассаККМ, ОписаниеОшибки, ПараметрыВыполнения.СсылкаНаОтчет);
		Если Не Результат Тогда
			
			ТекстЗаголовка = НСтр("ru = 'При закрытии смены произошла ошибка.'");
			ТекстСообщения = НСтр("ru = 'Смена не закрыта.
			                            |Дополнительное описание: %ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
			Если ВыводитьСообщенияВРежимеРМК Тогда
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстЗаголовка, ТекстСообщения, , ЭтотОбъект.ВладелецФормы)
			Иначе
				ТекстСообщения = ТекстЗаголовка + Символы.ПС + ТекстСообщения;
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, ПараметрыВыполнения.Отказ);
			КонецЕсли;
		Иначе
			ПараметрыВыполнения.ИнформацияЗакрытиеСменыВСистеме = НСтр("ru = 'Кассовая смена в системе закрыта'") 
		КонецЕсли;
		
		ПродолжитьЗакрытиеСменыОкончаниеФискальныйОтчетЗавершение(Результат, ПараметрыВыполнения);
		
	КонецЕсли;    
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПродолжитьЗакрытиеСменыОкончаниеФискальныйОтчетЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат Тогда
		Если ПараметрыВыполнения.НужноДополнительноеПредупреждение И ВыполнитьЗакрытиеСразу Тогда
			ТекстОшибки = НСтр("ru = 'Нет возможности провести документы. Кассовая смена закрыта'");
			Если ВыводитьСообщенияВРежимеРМК Тогда
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстОшибки, , , ЭтотОбъект.ВладелецФормы)
			Иначе
				ПоказатьПредупреждение(,ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗаголовка = ПараметрыВыполнения.ИнформацияЗакрытиеСменыВСистеме;
	ТекстСообщения = "";
	Если ЗначениеЗаполнено(ПараметрыВыполнения.СсылкаНаОтчет)  Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Сформирован %1:'") + Символы.ПС;
		ТекстСообщения = ТекстСообщения + НСтр("ru = '    Продано товаров         : %2 тг.'") + Символы.ПС;
		ТекстСообщения = ТекстСообщения + НСтр("ru = '    Возврат товаров         : %3 тг.'") + Символы.ПС;
		ТекстСообщения = ТекстСообщения + НСтр("ru = '    Прочие операции оплат   : %4 тг.'") + Символы.ПС;
		ТекстСообщения = ТекстСообщения + НСтр("ru = '    Прочие операции возврата: %5 тг.'") + Символы.ПС;
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Выручка: %6 тг.'") + Символы.ПС;
	Иначе
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Отчет о розничных продажах не сформирован.'") + Символы.ПС;
	КонецЕсли;
	ТекстСообщения = ТекстСообщения + НСтр("ru = 'Выемка          : %7 тг.'") + Символы.ПС;
	ТекстСообщения = ТекстСообщения + НСтр("ru = 'Остаток в кассе : %8 тг.'") + Символы.ПС;
	Если ПараметрыВыемки.ИспользоватьАгентскиеПлатежиИРазделениеВыручки И ИнформацияОстатокВКассе > 0 Тогда
		СообщениеСобственныеДС = СтрШаблон(НСтр("ru = '    в т.ч. агентские: %1 %2'"),
			Формат(ИнформацияОстатокВКассеАгентские, "ЧЦ=15; ЧДЦ=2; ЧРГ=' '; ЧН=0,00; ЧГ=3,0"),
			ОбщегоНазначенияРТКлиентСервер.Валюта());
			
		ТекстСообщения = ТекстСообщения + СообщениеСобственныеДС + Символы.ПС;
	КонецЕсли;
	ТекстСообщения = ТекстСообщения + ПараметрыВыполнения.ИнформацияОбZОтчете + Символы.ПС;
	ТекстСообщения = ТекстСообщения + ИнформацияОСверкеИтогов + Символы.ПС;
	
	Если НЕ ПараметрыВыполнения.ОшибкаТранзакцииВыемки Тогда
		ПараметрыВыполнения.ИнформацияВыемка = Формат(ПараметрыВыполнения.ИнформацияВыемка, "ЧЦ=15; ЧДЦ=2; ЧРГ=' '; ЧН=0,00; ЧГ=3,0");
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
																			 ПараметрыВыполнения.СсылкаНаОтчет,
																			 Формат(ИнформацияПроданоТоваров         , "ЧЦ=15; ЧДЦ=2; ЧРГ=' '; ЧН=0,00; ЧГ=3,0"),
																			 Формат(ИнформацияВозвратТоваров         , "ЧЦ=15; ЧДЦ=2; ЧРГ=' '; ЧН=0,00; ЧГ=3,0"),
																			 Формат(ИнформацияПрочаяОперацииОплат    , "ЧЦ=15; ЧДЦ=2; ЧРГ=' '; ЧН=0,00; ЧГ=3,0"),
																			 Формат(ИнформацияПрочаяОперацииВозвратов, "ЧЦ=15; ЧДЦ=2; ЧРГ=' '; ЧН=0,00; ЧГ=3,0"),
																			 Формат(ИнформацияВыручка                , "ЧЦ=15; ЧДЦ=2; ЧРГ=' '; ЧН=0,00; ЧГ=3,0"),
																			 ПараметрыВыполнения.ИнформацияВыемка,
																			 Формат(ИнформацияОстатокВКассе          , "ЧЦ=15; ЧДЦ=2; ЧРГ=' '; ЧН=0,00; ЧГ=3,0"));
	
	ОбработатьСозданныеДокументы();
	
	Если ВыводитьСообщенияВРежимеРМК Тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстЗаголовка, ТекстСообщения, , ЭтотОбъект.ВладелецФормы)
	Иначе
		Если Результат Тогда
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстЗаголовка, ТекстСообщения, , ЭтотОбъект.ВладелецФормы)
		Иначе
			ПоказатьПредупреждение(,ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	ЭтаФорма.Доступность = Истина;
	
	Оповестить("ИзменениеСостоянияКассовойСмены", Объект.КассаККМ);
	
	Если ВыполнитьЗакрытиеСразу И НЕ ПараметрыВыполнения.Отказ Тогда
		ТекстСообщенияУспешно = НСтр("ru = 'Закрытие смены завершено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияУспешно);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверткуИтоговЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		
		ТекстЗаголовка = НСтр("ru = 'При выполнении операции произошла ошибка:'");
		ТекстСообщения = НСтр("ru = '""%ОписаниеОшибки%"".
										|Операция сверки итогов не была проведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		Если ВыводитьСообщенияВРежимеРМК Тогда
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстЗаголовка, ТекстСообщения, , ЭтотОбъект.ВладелецФормы)
		Иначе
			ТекстСообщения = ТекстЗаголовка + Символы.ПС + ТекстСообщения;
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Параметры) = Тип("ОписаниеОповещения") Тогда 
		
		ВыполнитьОбработкуОповещения(Параметры, Ложь);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверткуИтогов(Оповещение)
	
	Если НЕ ВыполнитьСверкуИтоговПоПлатежнымКартам Тогда
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);  
		Возврат;
	КонецЕсли;
	
	ИдентификаторУстройстваЭТ = ПодключаемоеОборудованиеЭТ;
	ИдентификаторУстройстваФР = ПодключаемоеОборудование;
	
	ОписаниеОшибки            = "";

	СуммаОперации       = 0;
	НомерКарты          = "";
	НомерСсылкиОперации = "";
	НомерЧека           = "";
	СтрокаСлипЧека      = "";
	
	Если НЕ ИспользоватьКассуККМБезПодключенияОборудования Тогда
		ЭтаФорма.Доступность = Ложь;
		Оповещение = Новый ОписаниеОповещения("ВыполнитьСверткуИтоговЗавершение", ЭтотОбъект, Оповещение);
		МенеджерОборудованияКлиент.НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале(Оповещение, УникальныйИдентификатор, ИдентификаторУстройстваЭТ, ИдентификаторУстройстваФР); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДокументыККМСервер(Отказ, СсылкаНаОтчет, НужноДополнительноеПредупреждение)
	
	Перем КэшированныеЗначения;
	
	// &ЗамерПроизводительности 
	ВремяНачалаЗамера 			= ОценкаПроизводительности.НачатьЗамерВремени();
	РежимПроведения 			= РежимПроведенияДокумента.Оперативный;
	МенеджерВременныхТаблиц 	= Новый МенеджерВременныхТаблиц;
	МассивДокументовКПроведению = Новый Массив;

	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(КассоваяСмена) Тогда
		ОписаниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(Объект.КассаККМ);
		КассоваяСмена = ОписаниеКассовойСмены.КассоваяСмена;
	КонецЕсли;
	
	Документы.ОтчетОРозничныхПродажах.СоздатьВТДокументыНаККМ(МенеджерВременныхТаблиц, КассоваяСмена);
	
	ЗапросПоЧекам = Новый Запрос;
	ЗапросПоЧекам.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ЗапросПоЧекам.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	втТаблицаЧеков КАК Док
	|";
	
	РезультатЗапросаПоЧекам  = ЗапросПоЧекам.Выполнить();
	ТаблицаЧеков = РезультатЗапросаПоЧекам.Выгрузить();
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.ЧекККМ");
	ЭлементБлокировки.ИсточникДанных = ТаблицаЧеков;
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	Блокировка.Заблокировать();
	
	ОтчетОРозничныхПродажах = СоздатьОтчетОРозничныхПродажах();
	ОтменитьТранзакцию		= Ложь;
	
	Документы.ОтчетОРозничныхПродажах.ЗаполнитьОтчетОРозничныхПродажахПоДаннымВЧеках(ОтчетОРозничныхПродажах, МенеджерВременныхТаблиц, ОтменитьТранзакцию);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ ОтменитьТранзакцию Тогда
		
		// Удаление отложенных чеков
		РозничныеПродажиСервер.УдалениеОтложенныхЧеков(МенеджерВременныхТаблиц, Объект.КассаККМ, ОтменитьТранзакцию);
		Если ОтменитьТранзакцию Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось удалить отложенные чеки. %1'"),
				ОписаниеОшибки());
				
			ОбщегоНазначения.СообщитьПользователю(
				Текст,
				Объект);
				
		КонецЕсли;
		
		ЕстьПрочаяВыручка 					= ОтчетОРозничныхПродажах.ПрочаяВыручка.Количество() > 0;
		ЕстьРасчетыСКлиентами 				= ОтчетОРозничныхПродажах.РасчетыСКлиентами.Количество() > 0;
		ЕстьОплатаДоговоровПлатежныхАгентов = ОтчетОРозничныхПродажах.ОплатаНаличнымиАгентскихПлатежей.Количество() > 0;
		ЕстьЧеки 							= РезультатЗапросаПоЧекам.Выгрузить().Количество() > 0;
		ЕстьПродажиВозвратыТовара 			= ОтчетОРозничныхПродажах.Товары.Количество() > 0 
												Или ОтчетОРозничныхПродажах.ВозвращенныеТовары.Количество() > 0;
		
		МассивСписанийТоваров = Новый Массив;
		
		// Записываем ОтчетОРозничныхПродажах.
		Если НЕ ОтменитьТранзакцию 
			И (ЕстьЧеки ИЛИ ЕстьПрочаяВыручка) Тогда
			
			Если ЕстьПродажиВозвратыТовара Тогда
				
				МассивСписанийТоваров = РозничныеПродажиСервер.СписаниеПодарков(МенеджерВременныхТаблиц, Объект.КассаККМ, ОтменитьТранзакцию);
				
			КонецЕсли;
			
			Попытка
				
				УстановитьПривилегированныйРежим(Истина);
				
				ОтчетОРозничныхПродажах.Записать(РежимЗаписиДокумента.Запись);
				СсылкаНаОтчет = ОтчетОРозничныхПродажах.Ссылка;
				
				ИнформацияВозвратТоваров 			= ОтчетОРозничныхПродажах.ВозвращенныеТовары.Итог("Сумма");
				ИнформацияПроданоТоваров 			= ОтчетОРозничныхПродажах.Товары.Итог("Сумма") + ИнформацияВозвратТоваров;
				ИнформацияПрочаяОперацииОплат 		= ОтчетОРозничныхПродажах.ПрочаяВыручка.Итог("СуммаПоступления");
				ИнформацияПрочаяОперацииВозвратов 	= ОтчетОРозничныхПродажах.ПрочаяВыручка.Итог("СуммаВозврата");
				ИнформацияВыручка 					= (ИнформацияПроданоТоваров - ИнформацияВозвратТоваров) 
														+ (ИнформацияПрочаяОперацииОплат - ИнформацияПрочаяОперацииВозвратов);
				
				МассивДокументовКПроведению.Добавить(ОтчетОРозничныхПродажах);
				
				Для каждого СписаниеТоваров Из МассивСписанийТоваров Цикл
					СписаниеТоваров.ОтчетОРозничныхПродажах = СсылкаНаОтчет;
					СписаниеТоваров.Записать(РежимЗаписиДокумента.Запись);
					МассивДокументовКПроведению.Добавить(СписаниеТоваров);
				КонецЦикла;
				
				// Архивация чеков происходит только после записи отчета ККМ.
				Если НЕ ОтменитьТранзакцию Тогда
					Попытка
						
						МассивСсылокЧекиККМ = РезультатЗапросаПоЧекам.Выгрузить().ВыгрузитьКолонку("Ссылка");
						
						Для Каждого текСсылкаЧекККМ Из МассивСсылокЧекиККМ Цикл
							РозничныеПродажиСервер.АрхивироватьЧекККМ(текСсылкаЧекККМ, СсылкаНаОтчет);
						КонецЦикла;
						
					Исключение
						ОтменитьТранзакцию = Истина;
						
						Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не удалось заархивировать чеки. %1'"),
							ОписаниеОшибки());
						
						ОбщегоНазначения.СообщитьПользователю(
							Текст,
							Объект);
					КонецПопытки;
					
					Если НЕ ОтменитьТранзакцию Тогда
						
						РозничныеПродажиСервер.ОбработатьДокументыПрочейВыручки(МенеджерВременныхТаблиц, Объект.КассаККМ, СсылкаНаОтчет, ОтменитьТранзакцию);
						
						
						Если ОтменитьТранзакцию Тогда
							
							Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Не удалось записать документы. %1'"),
								ОписаниеОшибки());
							
							ОбщегоНазначения.СообщитьПользователю(
								Текст,
								Объект);
							
						КонецЕсли;
						
					КонецЕсли;		
					
					Попытка
						
						Если ИнтеграцияЕГАИСРТ.НужноРаботатьСЕГАИС(ОтчетОРозничныхПродажах.Дата) Тогда
							
							ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(
							ОтчетОРозничныхПродажах.Организация,
							ОтчетОРозничныхПродажах.Магазин);
							
							ДобавитьМаркируемуюПродукцию = Ложь;
							
							Если ЗначениеЗаполнено(ОрганизацияЕГАИС) Тогда
								НаходитсяВСельскойМестности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОрганизацияЕГАИС, "НаходитсяВСельскойМестности");
								Если НаходитсяВСельскойМестности
									И Константы.ДатаНачалаРегистрацииРозничныхПродажВЕГАИСВСельскойМестности.Получить() > ОтчетОРозничныхПродажах.Дата Тогда
									ДобавитьМаркируемуюПродукцию = Истина;
								КонецЕсли;
							КонецЕсли;
							
							ДобавитьНеМаркируемуюПродукцию = Константы.ВыгружатьПродажиНемаркируемойПродукцииВЕГАИСРТ.Получить();
							
							СписокСкладов = ИнтеграцияЕГАИСРТ.СписокСкладовДляКоторыхНужноСоздаватьАктыСписания(СсылкаНаОтчет, ДобавитьМаркируемуюПродукцию, ДобавитьНеМаркируемуюПродукцию);
							
							Если СписокСкладов.Количество() > 0 Тогда
								
								АктСписанияИзРегистра1 = Документы.АктСписанияЕГАИС.СоздатьДокумент();
								АктСписанияИзРегистра1.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра1;
								ИнтеграцияЕГАИСРТ.ЗаполнитьАктСписанияЕГАИСНаОснованииОтчетаОРозничныхПродажах(АктСписанияИзРегистра1, СсылкаНаОтчет, ДобавитьМаркируемуюПродукцию, ДобавитьНеМаркируемуюПродукцию);
								Документы.АктСписанияЕГАИС.ПодобратьСправки2(АктСписанияИзРегистра1);
								
								ПараметрыОтбора = Новый Структура;
								ПараметрыОтбора.Вставить("Справка2", Справочники.Справки2ЕГАИС.ПустаяСсылка());
								СтрокиБезСправки = АктСписанияИзРегистра1.Товары.НайтиСтроки(ПараметрыОтбора);
								Если СтрокиБезСправки.Количество() Тогда
									ТоварыБезСправок = АктСписанияИзРегистра1.Товары.Выгрузить(СтрокиБезСправки);
									Для Каждого СтрокаБезСправки Из СтрокиБезСправки Цикл
										АктСписанияИзРегистра1.Товары.Удалить(СтрокаБезСправки);
									КонецЦикла;
									
									АктСписанияИзРегистра2 = Документы.АктСписанияЕГАИС.СоздатьДокумент();
									АктСписанияИзРегистра2.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра2;
									ИнтеграцияЕГАИСРТ.ЗаполнитьАктСписанияЕГАИСНаОснованииОтчетаОРозничныхПродажах(АктСписанияИзРегистра2, СсылкаНаОтчет, ДобавитьМаркируемуюПродукцию, ДобавитьНеМаркируемуюПродукцию);
									АктСписанияИзРегистра2.Товары.Загрузить(ТоварыБезСправок);
									
									МассивДокументовКПроведению.Добавить(АктСписанияИзРегистра2);
								КонецЕсли;
								
								Если АктСписанияИзРегистра1.Товары.Количество() Тогда
									МассивДокументовКПроведению.Добавить(АктСписанияИзРегистра1);
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЕсли;
						
					УстановитьПривилегированныйРежим(Ложь);
					
					Исключение
						ОтменитьТранзакцию = Истина;
						
						Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не удалось записать документы. %1'"),
							ОписаниеОшибки());
						
						ОбщегоНазначения.СообщитьПользователю(
							Текст,
							Объект);
						
					КонецПопытки;
					
				КонецЕсли;
			
			Исключение
				
				ОтменитьТранзакцию = Истина;
				
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось записать документ ""Отчет ККМ о продажах."" %1'"),
					ОписаниеОшибки());
				
				ОбщегоНазначения.СообщитьПользователю(
					Текст,
					Объект);
				
			КонецПопытки;
		КонецЕсли;
		
		Если ОтменитьТранзакцию Тогда
			ОтменитьТранзакцию();
			Отказ = Истина;
		Иначе
			ЗафиксироватьТранзакцию();
			УстановитьПривилегированныйРежим(Истина);
			Для Каждого ДокументКПроведению Из МассивДокументовКПроведению Цикл
				Попытка
					РезультатПроверки = ДокументКПроведению.ПроверитьЗаполнение();
					
					Если РезультатПроверки Тогда
						Если ТипЗнч(ДокументКПроведению) = Тип("ДокументОбъект.АктСписанияЕГАИС") Тогда
							ДокументКПроведению.Записать(РежимЗаписиДокумента.Проведение);
						Иначе
							ДокументКПроведению.Записать(РежимЗаписиДокумента.Проведение, РежимПроведения);
						КонецЕсли;
						Если НЕ ДокументКПроведению.Проведен Тогда
							СписокНеПроведенныхДокументов.Добавить(ДокументКПроведению.Ссылка, ДокументКПроведению.Ссылка.Метаданные().Имя);
						ИначеЕсли ТипЗнч(ДокументКПроведению) = Тип("ДокументОбъект.АктСписанияЕГАИС") Тогда
							СписокАктовСписанияЕГАИС.Добавить(ДокументКПроведению.Ссылка, ДокументКПроведению.Ссылка.Метаданные().Имя);
						КонецЕсли;
					Иначе
						ДокументКПроведению.Записать(РежимЗаписиДокумента.Запись);
						СписокНеПроведенныхДокументов.Добавить(ДокументКПроведению.Ссылка, ДокументКПроведению.Ссылка.Метаданные().Имя);
					КонецЕсли;
				Исключение
					СписокНеПроведенныхДокументов.Добавить(ДокументКПроведению.Ссылка, ДокументКПроведению.Ссылка.Метаданные().Имя);
					НужноДополнительноеПредупреждение = Истина;
					
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось провести документ ""%1"".'"),
						Строка(ДокументКПроведению));
						
					Текст = Текст + Символы.ПС + ОписаниеОшибки();
					
					ОбщегоНазначения.СообщитьПользователю(
						Текст,
						Объект);
					
				КонецПопытки;
				
				СписокДокументов.Добавить(ДокументКПроведению.Ссылка, ДокументКПроведению.Ссылка.Метаданные().Имя);
				
			КонецЦикла;
			
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;

	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
	МенеджерВременныхТаблиц.Закрыть();
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ЗакрытииКассовойСменыСменыОбработатьДокументыККМСервер",ВремяНачалаЗамера);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокНеПроведенныхДокументов()

	Если ДокументыОткрыватьМодально Тогда
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	Иначе
		Режим = РежимОткрытияОкнаФормы.Независимый;
	КонецЕсли;
	
	ВладелецОткрываемыхДокументов = Неопределено;
	Если ВыполнитьЗакрытиеСразу Тогда
		ВладелецОткрываемыхДокументов = ЭтотОбъект.ВладелецФормы;
	КонецЕсли;
	
	Для каждого ЭлементаСписка Из СписокНеПроведенныхДокументов Цикл
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("Ключ", ЭлементаСписка.Значение);
		ОткрытьФорму("Документ." + ЭлементаСписка.Представление + ".ФормаОбъекта", СтруктураКлюча, ВладелецОткрываемыхДокументов,,,,, Режим); 
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПередатьАктыСписанияВЕГАИС()
	
	Для Каждого ЭлементаСписка Из СписокАктовСписанияЕГАИС Цикл
	
		ОбменДаннымиЕГАИСКлиент.ПодготовитьКПередаче(
			ЭлементаСписка.Значение,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные"));
			
		Если ДокументыОткрыватьМодально Тогда
			Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Иначе
			Режим = РежимОткрытияОкнаФормы.Независимый;
		КонецЕсли;
		
		ВладелецОткрываемыхДокументов = Неопределено;
		Если ВыполнитьЗакрытиеСразу Тогда
			ВладелецОткрываемыхДокументов = ЭтотОбъект.ВладелецФормы;
		КонецЕсли;
		
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("Ключ", ЭлементаСписка.Значение);
		ОткрытьФорму("Документ.АктСписанияЕГАИС.ФормаОбъекта", СтруктураКлюча, ВладелецОткрываемыхДокументов,,,,, Режим);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСозданныеДокументы()
	
	ПередатьАктыСписанияВЕГАИС();
	ОткрытьСписокНеПроведенныхДокументов();
	
КонецПроцедуры

&НаСервере
Функция ЭквайринговыйТерминалПоКассеККМ()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭквайринговыеТерминалы.Ссылка КАК Терминал
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Касса = &Касса
	|	И НЕ ЭквайринговыеТерминалы.ПометкаУдаления
	|	И НЕ ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования
	|	И НЕ ЭквайринговыеТерминалы.НеДействителен";
	
	Запрос.УстановитьПараметр("Касса", Объект.КассаККМ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЭквайринговыйТерминал = Выборка.Терминал;
		НовыйТерминал = ТаблицаТерминалы.Добавить();
		НовыйТерминал.ПодключаемоеОборудование = ЭквайринговыйТерминал.ПодключаемоеОборудование;
		
	КонецЦикла;
	
	Если Не Результат.Пустой() Тогда
		Возврат ЭквайринговыйТерминал;
	Иначе
		Возврат Справочники.ЭквайринговыеТерминалы.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервере
// Функция осуществляет создание нового документа "Отчет о розничных продажах".
//
// Параметры:
//  ОблагаетсяЕНВД                           - <Булево>, <Неопределено>
//                                           - Розничная торговля облагается ЕНВД.
//
// Возвращаемое значение:
//  <ДокументОбъект.ОтчетОРозничныхПродажах> - Созданный документ.
//
Функция СоздатьОтчетОРозничныхПродажах()

	ТекущаяДата   = ТекущаяДатаСеанса();
	ДатаДокумента = КонецДня(ТекущаяДата);
	
	Отчет               = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
	Отчет.Дата          = ДатаДокумента;
	Отчет.КассаККМ      = Объект.КассаККМ;
	Отчет.Магазин       = Отчет.КассаККМ.Магазин;
	Отчет.Ответственный = Пользователи.ТекущийПользователь();
	Отчет.Организация   = Отчет.КассаККМ.Владелец;

	Отчет.УчитыватьНДС     = Ложь;
	Отчет.ЦенаВключаетНДС  = ОбщегоНазначенияРТ.ЗначениеРеквизитаВПривилегированномРежиме(Отчет.Магазин.ПравилоЦенообразования, "ЦенаВключаетНДС");

	Возврат Отчет;

КонецФункции

&НаКлиенте
Процедура ОчиститьИнформацию()
	
	ИнформацияВозвратТоваров          = 0;
	ИнформацияВыемка                  = 0;
	ИнформацияВыручка                 = 0;
	ИнформацияЗакрытиеСменыВСистеме   = "";
	ИнформацияОбZОтчете               = "";
	ИнформацияОСверкеИтогов           = "";
	ИнформацияОстатокВКассе           = 0;
	ИнформацияПроданоТоваров          = 0;
	ИнформацияПрочаяОперацииВозвратов = 0;
	ИнформацияПрочаяОперацииОплат     = 0;
	
КонецПроцедуры

&НаСервере
Функция ЗакрытьКассовуюСмену(КассаККМ, ОписаниеОшибки, СсылкаНаОтчет)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Получим остаток в кассе.
	ИнформацияОстатокВКассе = СуммаОстаткаДСПоКассеККМ(Объект.КассаККМ);
	Если ПараметрыВыемки.ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		СуммаОстатокСобственные = СуммаОстаткаДСПоКассеККМ(Объект.КассаККМ, Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		ИнформацияОстатокВКассеАгентские = ИнформацияОстатокВКассе - СуммаОстатокСобственные;
	КонецЕсли;
	
	Возврат РозничныеПродажиСервер.ЗакрытьКассовуюСмену(Объект.КассаККМ, ОписаниеОшибки, СсылкаНаОтчет);
	
КонецФункции

&НаСервереБезКонтекста
Функция СуммаОстаткаДСПоКассеККМ(КассаККМ, Договор = Неопределено)
	
	Возврат РозничныеПродажиСервер.СуммаОстаткаДСПоКассеККМ(КассаККМ, Договор);
	
КонецФункции

&НаСервереБезКонтекста
Функция МассивАгентскихДоговоровВКассеККМ(КассаККМ)
	
	Возврат РозничныеПродажиСервер.МассивАгентскихДоговоровВКассеККМ(КассаККМ);
	
КонецФункции

#КонецОбласти