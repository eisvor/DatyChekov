
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("КассаККМ", Объект.КассаККМ) Тогда
		Отказ = Истина;
	Иначе
		
		СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(Объект.КассаККМ);
		ДатаНачалаСмены = СтруктураСостояниеКассовойСмены.ДатаИзмененияСтатуса;
		
		ОбновитьДанныеСервер();
		
		Если ОсновнаяТаблица.Количество() = 0 Тогда
			
			Элементы.ГруппаИнформацияКратко.Видимость   = Истина;
			Элементы.ГруппаИнформацияПодробно.Видимость = Ложь;
			Элементы.ГруппаТаблицы.Видимость            = Ложь;
			
			Элементы.ДекорацияДанныеСистемыПроданоКратко.Заголовок = Формат(СуммаПродаж, "ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧН=; ЧГ=3,0")+ " тг.";
			Элементы.ДекорацияДанныеСистемыВозвратКратко.Заголовок = Формат(СуммаВозвратов,"ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧН=; ЧГ=3,0")+ " тг.";
			
		КонецЕсли;
		
		Элементы.ДекорацияОшибкиОтправкиНСПК.Видимость = Ложь;
		
	КонецЕсли;
	
	Пользователь = глЗначениеПеременной("ПользовательИзмененныхПрав");
	Если Пользователь = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	Элементы.ФормаОтчетБезГашения.Доступность = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОтчетОСменеБезГашения, Ложь, Пользователь);
	
	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекВызовСервера.ИспользоватьПодключаемоеОборудование();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Обработка.ЗакрытиеКассовойСмены.Форма.ПроверкаНепробитыхЧеков.Открытие");

	Если ЗначениеЗаполнено(Объект.КассаККМ) И НомерДокументаКассыККМ[Объект.КассаККМ] = Неопределено Тогда
		ОбщегоНазначенияРТКлиент.ЗаполнитьНомерДокументаКассыККМ(Объект.КассаККМ);
	КонецЕсли;

	ОбновитьИнформационныеНадписи();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДанныеФРПродажаПриИзменении(Элемент)
	
	ОбновитьИнформационныеНадписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеФРВозвратПриИзменении(Элемент)
	
	ОбновитьИнформационныеНадписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОшибкиОтправкиНСПКНажатие(Элемент)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОткрытьСписокЧековСОшибкамиНСПКЗавершение", ЭтотОбъект);
	ОбщегоНазначенияРМККлиентПереопределяемый.ОткрытьСписокЧековСОшибкамиНСПК(ЭтотОбъект, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокЧековСОшибкамиНСПКЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Элементы.ДекорацияОшибкиОтправкиНСПК.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыОсновнаяТаблица

&НаКлиенте
Процедура ОсновнаяТаблицаПометкаПриИзменении(Элемент)
	
	ОбновитьИнформационныеНадписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяТаблицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТаблицы = ОсновнаяТаблица.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", СтрокаТаблицы.ДокументНаККМ);
	
	ВидДокумента = СтрокаТаблицы.ВидДокумента;
	ОткрытьФорму("Документ." + ВидДокумента + ".ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Аннулировать(Команда)
	
	ВыводитьСообщение = Ложь;
	АннулироватьНаСервере(ВыводитьСообщение);
	
	Если ВыводитьСообщение Тогда
		ТекстСообщения = НСтр("ru = 'Документы, оплаты которых переданы в банк не могут быть отменены / аннулированы.'"); 
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеИнвертироватьФлажки(Команда)
	
	Для Каждого ЭлементОсновнойТаблицы Из ОсновнаяТаблица Цикл
		Если ЭлементОсновнойТаблицы.ВозможностьИзменения Тогда
			ЭлементОсновнойТаблицы.Пометка = НЕ ЭлементОсновнойТаблицы.Пометка;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьИнформационныеНадписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеСнятьФлажки(Команда)
	
	СменитьФлажки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеУстановитьФлажки(Команда)
	
	СменитьФлажки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеСмены(Команда)
	
	Закрыть(НСтр("ru = 'Закрытие смены'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	
	ОбновитьДанныеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетБезГашения(Команда)
	
	ОписаниеОшибки = "";

	ПараметрыКассыККМ         = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(Объект.КассаККМ);
	ИдентификаторУстройстваФР = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	Если НЕ ИспользоватьПодключаемоеОборудование ИЛИ ИспользоватьКассуККМБезПодключенияОборудования Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
	ФИОКассира = ОбщегоНазначенияРТВызовСервера.ФИОФизЛицаПользователяСУчетомИзмененныхПрав();
	Если Не ФИОКассира = "" Тогда
		ПараметрыОперации.Кассир = ФИОКассира;
	Иначе
		ПараметрыОперации.Кассир = НСтр("ru='Администратор'");
	КонецЕсли;
	
	Если ЭтаФорма.ВладелецФормы <> Неопределено Тогда     
		УникальныйИдентификаторФормы = ЭтаФорма.ВладелецФормы.УникальныйИдентификатор 
	Иначе
		УникальныйИдентификаторФормы = УникальныйИдентификатор    
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура("КассаККМ");
	ПараметрыВыполнения.КассаККМ = Объект.КассаККМ;
	ПараметрыВыполнения.Вставить("Организация", ИнтеграцияWebKassaВызовСервераПереопределяемый.ПолучитьРеквизитыКассы(Объект.КассаККМ).Владелец);
	
	ЭтаФорма.Доступность = Ложь;
	Оповещение = Новый ОписаниеОповещения("ОтчетБезГашенияЗавершение", ЭтотОбъект, ПараметрыВыполнения);
	МенеджерОборудованияКлиент.НачатьФормированиеОтчетаБезГашения(Оповещение, УникальныйИдентификатор, ПараметрыОперации, ИдентификаторУстройстваФР);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетБезГашенияЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	
	Если НЕ РезультатВыполнения.Результат Тогда 
		ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.'") + Символы.ПС + РезультатВыполнения.ОписаниеОшибки;
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитиеЧековЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат Тогда
		
		Если ПараметрыВыполнения.ТекущийЭлемент < ПараметрыВыполнения.КоличествоЭлементов Тогда
			
			// Следующая итерация рекурсии "оповещениями" пробитие документов.
			
			ЭлементОсновнойТаблицы = ОсновнаяТаблица.Получить(ПараметрыВыполнения.ТекущийЭлемент);
			ПараметрыВыполнения.ТекущийЭлемент = ПараметрыВыполнения.ТекущийЭлемент + 1;
			
			Если ЭлементОсновнойТаблицы.Пометка И ЭлементОсновнойТаблицы.ВозможностьИзменения Тогда
				
				ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПробитиеЧековЗавершение", ЭтотОбъект, ПараметрыВыполнения);
				ДокументНаККМ = ЭлементОсновнойТаблицы.ДокументНаККМ;
				
				Если ЭлементОсновнойТаблицы.ВидДокумента = "ЧекККМ" Тогда
					
					ПробитьЧекВыполнить(ОповещениеПриЗавершении, ДокументНаККМ);
					
				ИначеЕсли ЭлементОсновнойТаблицы.ВидДокумента = "ПриходныйКассовыйОрдер" Тогда
					
					ПараметрыЧека = ПараметрыЧека(ДокументНаККМ);
					
					Если ПараметрыЧека.ПробитЧек Тогда
						СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																		НСтр("ru = 'Чек уже пробит %1'"), 
																		ДокументНаККМ);
						ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(, СтрокаСообщения);
						ЭтаФорма.Доступность = Истина;
					Иначе
						Контекст = Новый Структура();
						Контекст.Вставить("ИдентификаторУстройства"      , ПараметрыЧека.ИдентификаторУстройства);
						Контекст.Вставить("РаспределениеВыручкиПоСекциям", ПараметрыЧека.РаспределениеВыручкиПоСекциям);
						Контекст.Вставить("ДокументНаККМ"                , ДокументНаККМ);
						Контекст.Вставить("ОповещениеПриЗавершенииПробитияЧека", ОповещениеПриЗавершении);
						Контекст.Вставить("СуммаДокумента"               , ПараметрыЧека.СуммаДокумента);
						
						ОбщиеПараметры = Новый Структура();
						НомерЧека = НомерДокументаКассыККМ[Объект.КассаККМ] + 1;
						НапечататьЧекСерверИнкассацияЗавершение(ДокументНаККМ, 
																ПараметрыЧека.РаспределениеВыручкиПоСекциям,
																ОбщиеПараметры,
																НомерЧека);
						
						Оповещение = Новый ОписаниеОповещения("НапечататьЧекКлиентЗавершениеПКО", ЭтотОбъект, Контекст);
						
						ПодключенноеОборудование = Новый Структура("Терминал, ФискальныеУстройства");
						ПодключенноеОборудование.ФискальныеУстройства = Новый Массив; 
						ПодключенноеОборудование.ФискальныеУстройства.Добавить(ПараметрыЧека.ИдентификаторУстройства);

						
						ПараметрыОперации = Новый Структура;
						ПараметрыОперации.Вставить("ДокументСсылка", ДокументНаККМ);
						ПараметрыОперации.Вставить("Организация", ПараметрыЧека.Организация);
						ПараметрыОперации.Вставить("Партнер", Неопределено);
						ПараметрыОперации.Вставить("ПодключенноеОборудование", ПодключенноеОборудование);
						ПараметрыОперации.Вставить("ТорговыйОбъект", Неопределено);
						
						ОткрытьФорму(
							"Обработка.ПечатьЧека.Форма",
							ПараметрыОперации,
							ЭтотОбъект,,,,
							Оповещение);
						
					КонецЕсли;
				ИначеЕсли ЭлементОсновнойТаблицы.ВидДокумента = "РасходныйКассовыйОрдер" Тогда
					
					ПараметрыЧека = ПараметрыЧека(ДокументНаККМ);
					
					Если ПараметрыЧека.ПробитЧек Тогда
						СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																		НСтр("ru = 'Чек уже пробит %1'"), 
																		ДокументНаККМ);
						ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(, СтрокаСообщения);
						ЭтаФорма.Доступность = Истина;
					Иначе
						Контекст = Новый Структура();
						Контекст.Вставить("ИдентификаторУстройства"      , ПараметрыЧека.ИдентификаторУстройства);
						Контекст.Вставить("РаспределениеВыручкиПоСекциям", ПараметрыЧека.РаспределениеВыручкиПоСекциям);
						Контекст.Вставить("ДокументНаККМ"                , ДокументНаККМ);
						Контекст.Вставить("ОповещениеПриЗавершенииПробитияЧека", ОповещениеПриЗавершении);
						Контекст.Вставить("Организация"                  , ПараметрыЧека.Организация);
						
						ПараметрыОперации = Новый Структура;
						ПараметрыОперации.Вставить("ТипИнкассации", 1);
						ПараметрыОперации.Вставить("Сумма"        , ПараметрыЧека.СуммаДокумента);
						ПараметрыОперации.Вставить("ДокументНаККМ", ДокументНаККМ);
						ПараметрыОперации.Вставить("РаспределениеВыручкиПоСекциям", ПараметрыЧека.РаспределениеВыручкиПоСекциям);
						
						ПараметрыКассы = ДополнительныеПараметрыККМ(ДокументНаККМ);
						ПараметрыОперации.Вставить("РеквизитыКассыККМ", ПараметрыКассы);
						
						Оповещение = Новый ОписаниеОповещения("НапечататьЧекКлиентИнкассацияЗавершениеРКО", ЭтотОбъект, Контекст);
						
						//для РК переносим в обработку
						ВыходныеПараметры = Новый Массив;
						ВыходныеПараметры.Добавить(0);
						ВыходныеПараметры.Добавить(0);
						ВыходныеПараметры.Добавить(0);
						ВыходныеПараметры.Добавить(0);
						
						РезультатВыполнения = Новый Структура;
						РезультатВыполнения.Вставить("Результат", Истина);
						РезультатВыполнения.Вставить("ОписаниеОшибки", "Ошибок нет.");
						РезультатВыполнения.Вставить("ВыходныеПараметры", ВыходныеПараметры);
						РезультатВыполнения.Вставить("ПараметрыОперацииИнкассации", ПараметрыОперации);
						
						ВыполнитьОбработкуОповещения(Оповещение, РезультатВыполнения); 
					КонецЕсли;
				ИначеЕсли ЭлементОсновнойТаблицы.ВидДокумента = "ОплатаОтПокупателяПлатежнойКартой" Тогда
					
					Если НЕ ЭлементОсновнойТаблицы.ЕстьОперацииПереданныеВБанк Тогда
						ТекстСообщения = НСтр("ru = 'Документы %1 без оплаты картой не могут быть пробиты.
													|Или аннулируйте документы или совершите операцию по платежной карте.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", НСтр("ru = 'Эквайринговая операция'"));
						ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(, ТекстСообщения);
						
						ОбновитьДанныеСервер();
						
						ЭтаФорма.Доступность = Истина;
					Иначе
						
						ПараметрыДляЧека = Новый Структура;
						ПараметрыДляЧека.Вставить("ТипЧека",								ЭлементОсновнойТаблицы.ТипЧека);
						ПараметрыДляЧека.Вставить("ТипОплаты",								1);
						ПараметрыДляЧека.Вставить("ИспользоватьПодключаемоеОборудование",	ИспользоватьПодключаемоеОборудование);
						ПараметрыДляЧека.Вставить("НаличнаяОперация",						Ложь);
						ПараметрыДляЧека.Вставить("АгентскийДоговорВШапке",					Ложь);
						ПараметрыДляЧека.Вставить("ДокументНаККМ",							ДокументНаККМ);
						ПараметрыДляЧека.Вставить("КассаККМ",								Объект.КассаККМ);
						
						
						ПодключаемоеОборудованиеРТКлиент.НачатьПробитиеЧекаКОВыполнить(ОповещениеПриЗавершении, Объект, ПараметрыДляЧека, УникальныйИдентификатор);
							
					КонецЕсли;
						
				КонецЕсли;
				
			Иначе
				ПробитиеЧековЗавершение(Истина, ПараметрыВыполнения);
			КонецЕсли;
			
		Иначе
			// Выход из рекурсии "оповещениями" пробитие документов.
			ОбновитьДанныеСервер();
			ЭтаФорма.Доступность = Истина;
		КонецЕсли;
		
	Иначе
		// Выход из рекурсии "оповещениями" пробитие документов при ошибке.
		ОбновитьДанныеСервер();
		ЭтаФорма.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Пробить(Команда)
	
	ПараметрыВыполнения = Новый Структура();
	ПараметрыВыполнения.Вставить("ОсновнаяТаблица"    , ОсновнаяТаблица);
	ПараметрыВыполнения.Вставить("КоличествоЭлементов", ОсновнаяТаблица.Количество());
	ПараметрыВыполнения.Вставить("ТекущийЭлемент"     , 0);
	ПараметрыВыполнения.Вставить("ВыводитьСообщение"  , Ложь);
	
	ЭтаФорма.Доступность = Ложь;
	
	// Запускаем в рекурсии "оповещениями" пробитие документов.
	ПробитиеЧековЗавершение(Истина, ПараметрыВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ДополнительныеПараметрыККМ(ДокументСсылка)
	
	// Общие параметры чека
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Дата");
	СтруктураРеквизитов.Вставить("КассаККМ");
	СтруктураРеквизитов.Вставить("Организация");
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, СтруктураРеквизитов);
	Возврат ИнтеграцияWebKassaВызовСервераПереопределяемый.ПолучитьСведенияОбОрганизацииИКассеККМ(РеквизитыДокумента.Организация, РеквизитыДокумента.Дата, РеквизитыДокумента.КассаККМ);
	
КонецФункции

&НаСервере
Процедура АннулироватьНаСервере(ВыводитьСообщение)
	
	ВыводитьСообщение = Ложь;
	Для Каждого ЭлементОсновнойТаблицы Из ОсновнаяТаблица Цикл
		Если ЭлементОсновнойТаблицы.Пометка
			И ЭлементОсновнойТаблицы.ВозможностьИзменения Тогда
			Если ЭлементОсновнойТаблицы.ЕстьОперацииПереданныеВБанк Тогда
				ВыводитьСообщение = Истина;
				Продолжить;
			КонецЕсли;
			ДокументНаККМ = ЭлементОсновнойТаблицы.ДокументНаККМ;
			Если ЭлементОсновнойТаблицы.ВидДокумента = "ЧекККМ" Тогда
				АннулироватьЧекККМ(ДокументНаККМ);
			Иначе
				АннулироватьПКО_РКО_ЭО(ДокументНаККМ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьДанныеСервер();
	
КонецПроцедуры

&НаСервере
Процедура АннулироватьЧекККМ(ЧекККМ)

	ЧекККМОбъект = ЧекККМ.ПолучитьОбъект();
	ЧекККМОбъект.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Аннулированный;
	Если ЧекККМОбъект.Проведен Тогда
		ЧекККМОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	Иначе
		ЧекККМОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура АннулироватьПКО_РКО_ЭО(ДокументНаККМ)
	ДокументНаККМОбъект = ДокументНаККМ.ПолучитьОбъект();
	Если ДокументНаККМОбъект.Проведен Тогда
		ДокументНаККМОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеСервер()
	
	ТаблицаНеПробитыхЧеков();
	ПолучитьСуммуПродаж();
	ОбновитьИнформационныеНадписи();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформационныеНадписи()
	
	Элементы.ДекорацияДанныеФРПродано.Заголовок = Формат(ДанныеФРПродажа, "ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧН=; ЧГ=3,0")+ " тг.";
	Элементы.ДекорацияДанныеФРВозврат.Заголовок = Формат(ДанныеФРВозврат, "ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧН=; ЧГ=3,0")+ " тг.";
	
	Элементы.ДекорацияДанныеСистемыПродано.Заголовок = Формат(СуммаПродаж, "ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧН=; ЧГ=3,0")+ " тг.";
	Элементы.ДекорацияДанныеСистемыВозврат.Заголовок = Формат(СуммаВозвратов,"ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧН=; ЧГ=3,0")+ " тг.";
	
	РасхожденияПродано = СуммаПродаж - ДанныеФРПродажа;
	РасхожденияВозврат = СуммаВозвратов - ДанныеФРВозврат;
	
	Элементы.ДекорацияРасхожденияПродано.Заголовок = Формат(РасхожденияПродано, "ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧН=; ЧГ=3,0")+ " тг.";
	Элементы.ДекорацияРасхожденияВозврат.Заголовок = Формат(РасхожденияВозврат, "ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧН=; ЧГ=3,0")+ " тг.";
	
	ПодобраноПродано = 0;
	ПодобраноВозврат = 0;
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Пометка", Истина);
	
	МассивСтрок = ОсновнаяТаблица.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		ПодобраноПродано = ПодобраноПродано + СтрокаТаблицы.Сумма;
		ПодобраноВозврат = ПодобраноВозврат + СтрокаТаблицы.Возврат;
	КонецЦикла;
	
	Элементы.ДекорацияПодобраноПродано.Заголовок = Формат(ПодобраноПродано, "ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧН=; ЧГ=3,0")+ " тг.";
	Элементы.ДекорацияПодобраноВозврат.Заголовок = Формат(ПодобраноВозврат, "ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧН=; ЧГ=3,0")+ " тг.";
	
	ОстатокПродано = РасхожденияПродано - ПодобраноПродано;
	ОстатокВозврат = РасхожденияВозврат - ПодобраноВозврат;
	
	Элементы.ДекорацияОстатокПродано.Заголовок = Формат(ОстатокПродано, "ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧН=; ЧГ=3,0")+ " тг.";
	Элементы.ДекорацияОстатокВозврат.Заголовок = Формат(ОстатокВозврат, "ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧН=; ЧГ=3,0")+ " тг.";
	
	Если ОстатокПродано = 0 И ОстатокВозврат = 0 Тогда
		ЦветОстатка = WebЦвета.ТемноЗеленый;
	Иначе 
		ЦветОстатка = WebЦвета.Черный;
	КонецЕсли;
	
	Элементы.ДекорацияОстаток.ЦветТекста        = ЦветОстатка;
	Элементы.ДекорацияОстатокПродано.ЦветТекста = ЦветОстатка;
	Элементы.ДекорацияОстатокВозврат.ЦветТекста = ЦветОстатка;
	
	Элементы.ФормаЗакрытьСмену.Доступность = ОсновнаяТаблица.Количество() = 0;
	
	// Установим доступность команды аннулирования.
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Пометка",              Истина);
	СтруктураОтбора.Вставить("ВозможностьИзменения", Ложь);
	
	Элементы.ОсновнаяТаблицаАннулировать.Доступность = ОсновнаяТаблица.НайтиСтроки(СтруктураОтбора).Количество() = 0;
	
КонецПроцедуры

// Получает сумму продаж по кассе и помещает ее в переменные.
//
// Параметры:
//  Нет
//
//
&НаСервере
Процедура ПолучитьСуммуПродаж()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
	|	СУММА(ВложенныйЗапрос.Возврат) КАК Возврат
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|				ТОГДА ЧекККМ.СуммаДокумента
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Сумма,
	|		ВЫБОР
	|			КОГДА ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|				ТОГДА ЧекККМ.СуммаДокумента
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Возврат
	|	ИЗ
	|		Документ.ЧекККМ КАК ЧекККМ
	|	ГДЕ
	|		ЧекККМ.Проведен
	|		И ЧекККМ.КассаККМ = &КассаККМ
	|		И НЕ ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
	|		И НЕ ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
	|		И НЕ ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПриходныйКассовыйОрдер.СуммаДокумента,
	|		0
	|	ИЗ
	|		Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|	ГДЕ
	|		ПриходныйКассовыйОрдер.КассаККМ = &КассаККМ
	|		И ПриходныйКассовыйОрдер.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|		И ПриходныйКассовыйОрдер.ПробиватьЧекиПоКассеККМ
	|		И ПриходныйКассовыйОрдер.Проведен
	|		И НЕ ПриходныйКассовыйОрдер.СменаЗакрыта
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		РасходныйКассовыйОрдер.СуммаДокумента
	|	ИЗ
	|		Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|	ГДЕ
	|		РасходныйКассовыйОрдер.КассаККМ = &КассаККМ
	|		И РасходныйКассовыйОрдер.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|		И РасходныйКассовыйОрдер.ПробиватьЧекиПоКассеККМ
	|		И РасходныйКассовыйОрдер.Проведен
	|		И НЕ РасходныйКассовыйОрдер.СменаЗакрыта
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ОплатаОтПокупателяПлатежнойКартой.ХозяйственнаяОперация = &ПоступлениеОплатыОтКлиента
	|				ТОГДА ОплатаОтПокупателяПлатежнойКартой.СуммаДокумента
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ОплатаОтПокупателяПлатежнойКартой.ХозяйственнаяОперация = &ХозяйственнаяОперацияРКО
	|				ТОГДА ОплатаОтПокупателяПлатежнойКартой.СуммаДокумента
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		Документ.ОплатаОтПокупателяПлатежнойКартой КАК ОплатаОтПокупателяПлатежнойКартой
	|	ГДЕ
	|		ОплатаОтПокупателяПлатежнойКартой.КассаККМ = &КассаККМ
	|		И ОплатаОтПокупателяПлатежнойКартой.ПробиватьЧекиПоКассеККМ
	|		И ОплатаОтПокупателяПлатежнойКартой.Проведен
	|		И НЕ ОплатаОтПокупателяПлатежнойКартой.СменаЗакрыта
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РегистрацияБезналичнойОплаты.СуммаДокумента,
	|		0
	|	ИЗ
	|		Документ.РегистрацияБезналичнойОплаты КАК РегистрацияБезналичнойОплаты
	|	ГДЕ
	|		РегистрацияБезналичнойОплаты.КассаККМ = &КассаККМ
	|		И РегистрацияБезналичнойОплаты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|		И РегистрацияБезналичнойОплаты.Проведен
	|		И РегистрацияБезналичнойОплаты.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|		И РегистрацияБезналичнойОплаты.Дата >= &ДатаНачалаСмены) КАК ВложенныйЗапрос";
	
	Запрос.УстановитьПараметр("КассаККМ", Объект.КассаККМ);
	Запрос.УстановитьПараметр("ДатаНачалаСмены", ДатаНачалаСмены);
	Запрос.УстановитьПараметр("ХозяйственнаяОперацияРКО"  ,   Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	Запрос.УстановитьПараметр("ПоступлениеОплатыОтКлиента"  , Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		СуммаПродаж    = Выборка.Сумма;
		СуммаВозвратов = Выборка.Возврат;
		
		Если НЕ ЗначениеЗаполнено(СуммаПродаж) Тогда
			СуммаПродаж = 0;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СуммаВозвратов) Тогда
			СуммаВозвратов = 0;
		КонецЕсли;
		
	Иначе
		СуммаПродаж    = 0;
		СуммаВозвратов = 0;
	КонецЕсли;
	
КонецПроцедуры

// Получает таблицу не пробитых чеков.
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   Таблица значений
//
&НаСервере
Функция ТаблицаНеПробитыхЧеков()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМОплата.Ссылка КАК Ссылка,
	|	СУММА(ВЫБОР
	|			КОГДА ЧекККМОплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|				ТОГДА ЧекККМОплата.Сумма
	|			ИНАЧЕ -ЧекККМОплата.Сумма
	|		КОНЕЦ) КАК Сумма,
	|	МАКСИМУМ(ЧекККМОплата.ДанныеПереданыВБанк) КАК ДанныеПереданыВБанк
	|ПОМЕСТИТЬ ВложенныйЗапрос
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка.Проведен
	|	И ЧекККМОплата.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.ПустаяСсылка)
	|	И (ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)
	|			ИЛИ ЧекККМОплата.ВидОплаты.ПлатежнаяСистема = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежнойСистемыККТ.СертификатНСПК))
	|	И ЧекККМОплата.Ссылка.КассаККМ = &КассаККМ
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМОплата.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧекККМ.Ссылка КАК ДокументНаККМ,
	|	СУММА(ВЫБОР
	|			КОГДА ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|				ТОГДА ЧекККМ.СуммаДокумента
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(ЕСТЬNULL(ВложенныйЗапрос.Сумма, 0)) КАК ОплатаКартой,
	|	СУММА(ВЫБОР
	|			КОГДА ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|				ТОГДА ЧекККМ.СуммаДокумента
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Возврат,
	|	ЧекККМ.Дата КАК Дата,
	|	&ВозможностьИзмененияЧек КАК ВозможностьИзменения,
	|	&ВидДокументаЧек КАК ВидДокумента,
	|	ЕСТЬNULL(ВложенныйЗапрос.ДанныеПереданыВБанк, ЛОЖЬ) КАК ЕстьОперацииПереданныеВБанк,
	|	ВЫБОР
	|		КОГДА ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ТипЧека,
	|	0 КАК ТипОплаты
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныйЗапрос КАК ВложенныйЗапрос
	|		ПО ЧекККМ.Ссылка = ВложенныйЗапрос.Ссылка
	|ГДЕ
	|	ЧекККМ.Проведен
	|	И ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.ПустаяСсылка)
	|	И ЧекККМ.КассаККМ = &КассаККМ
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМ.Ссылка,
	|	ЧекККМ.Дата,
	|	ЕСТЬNULL(ВложенныйЗапрос.ДанныеПереданыВБанк, ЛОЖЬ),
	|	ВЫБОР
	|		КОГДА ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка,
	|	0,
	|	0,
	|	РасходныйКассовыйОрдер.СуммаДокумента,
	|	РасходныйКассовыйОрдер.Дата,
	|	&ВозможностьИзмененияРКО,
	|	&ВидДокументаРКО,
	|	ЛОЖЬ,
	|	1,
	|	0
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.КассаККМ = &КассаККМ
	|	И РасходныйКассовыйОрдер.ХозяйственнаяОперация = &ХозяйственнаяОперацияРКО
	|	И РасходныйКассовыйОрдер.ПробиватьЧекиПоКассеККМ
	|	И РасходныйКассовыйОрдер.Проведен
	|	И НЕ РасходныйКассовыйОрдер.ПробитЧек
	|	И НЕ РасходныйКассовыйОрдер.СменаЗакрыта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриходныйКассовыйОрдер.Ссылка,
	|	ПриходныйКассовыйОрдер.СуммаДокумента,
	|	0,
	|	0,
	|	ПриходныйКассовыйОрдер.Дата,
	|	&ВозможностьИзмененияПКО,
	|	&ВидДокументаПКО,
	|	ЛОЖЬ,
	|	0,
	|	0
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.КассаККМ = &КассаККМ
	|	И ПриходныйКассовыйОрдер.ХозяйственнаяОперация = &ПоступлениеОплатыОтКлиента
	|	И ПриходныйКассовыйОрдер.ПробиватьЧекиПоКассеККМ
	|	И ПриходныйКассовыйОрдер.Проведен
	|	И НЕ ПриходныйКассовыйОрдер.ПробитЧек
	|	И НЕ ПриходныйКассовыйОрдер.СменаЗакрыта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОплатаОтПокупателяПлатежнойКартой.Ссылка,
	|	ВЫБОР
	|		КОГДА ОплатаОтПокупателяПлатежнойКартой.ХозяйственнаяОперация = &ПоступлениеОплатыОтКлиента
	|			ТОГДА ОплатаОтПокупателяПлатежнойКартой.СуммаДокумента
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ОплатаОтПокупателяПлатежнойКартой.СуммаДокумента,
	|	ВЫБОР
	|		КОГДА ОплатаОтПокупателяПлатежнойКартой.ХозяйственнаяОперация = &ХозяйственнаяОперацияРКО
	|			ТОГДА ОплатаОтПокупателяПлатежнойКартой.СуммаДокумента
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ОплатаОтПокупателяПлатежнойКартой.Дата,
	|	&ВозможностьИзмененияЭО,
	|	&ВидДокументаЭО,
	|	ОплатаОтПокупателяПлатежнойКартой.ОплатаВыполнена,
	|	ВЫБОР
	|		КОГДА ОплатаОтПокупателяПлатежнойКартой.ХозяйственнаяОперация = &ПоступлениеОплатыОтКлиента
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	1
	|ИЗ
	|	Документ.ОплатаОтПокупателяПлатежнойКартой КАК ОплатаОтПокупателяПлатежнойКартой
	|ГДЕ
	|	ОплатаОтПокупателяПлатежнойКартой.КассаККМ = &КассаККМ
	|	И ОплатаОтПокупателяПлатежнойКартой.ПробиватьЧекиПоКассеККМ
	|	И ОплатаОтПокупателяПлатежнойКартой.Проведен
	|	И НЕ ОплатаОтПокупателяПлатежнойКартой.ПробитЧек
	|	И НЕ ОплатаОтПокупателяПлатежнойКартой.СменаЗакрыта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РегистрацияБезналичнойОплаты.Ссылка,
	|	РегистрацияБезналичнойОплаты.СуммаДокумента,
	|	0,
	|	0,
	|	РегистрацияБезналичнойОплаты.Дата,
	|	&ВозможностьИзмененияРБО,
	|	&ВидДокументаРБО,
	|	ЛОЖЬ,
	|	0,
	|	0
	|ИЗ
	|	Документ.РегистрацияБезналичнойОплаты КАК РегистрацияБезналичнойОплаты
	|ГДЕ
	|	РегистрацияБезналичнойОплаты.КассаККМ = &КассаККМ
	|	И РегистрацияБезналичнойОплаты.ХозяйственнаяОперация = &ПоступлениеОплатыОтКлиента
	|	И РегистрацияБезналичнойОплаты.Проведен
	|	И НЕ РегистрацияБезналичнойОплаты.ПробитЧек
	|	И РегистрацияБезналичнойОплаты.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|	И РегистрацияБезналичнойОплаты.Дата >= &ДатаНачалаСмены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.ДокументНаККМ КАК ДокументНаККМ,
	|	ТаблицаДокумента.Сумма КАК Сумма,
	|	ТаблицаДокумента.ОплатаКартой КАК ОплатаКартой,
	|	ТаблицаДокумента.Возврат КАК Возврат,
	|	ИСТИНА КАК Пометка,
	|	ТаблицаДокумента.ВозможностьИзменения КАК ВозможностьИзменения,
	|	ТаблицаДокумента.ВидДокумента КАК ВидДокумента,
	|	ТаблицаДокумента.ЕстьОперацииПереданныеВБанк КАК ЕстьОперацииПереданныеВБанк,
	|	ТаблицаДокумента.ТипЧека КАК ТипЧека,
	|	ТаблицаДокумента.ТипОплаты КАК ТипОплаты
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.Дата";
	
	Запрос.УстановитьПараметр("КассаККМ"                  ,   Объект.КассаККМ);
	Запрос.УстановитьПараметр("ХозяйственнаяОперацияРКО"  ,   Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	Запрос.УстановитьПараметр("ПоступлениеОплатыОтКлиента"  , Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	
	Запрос.УстановитьПараметр("ВидДокументаЧек", "ЧекККМ");
	Запрос.УстановитьПараметр("ВидДокументаПКО", "ПриходныйКассовыйОрдер");
	Запрос.УстановитьПараметр("ВидДокументаРКО", "РасходныйКассовыйОрдер");
	Запрос.УстановитьПараметр("ВидДокументаРБО", "РегистрацияБезналичнойОплаты");
	Запрос.УстановитьПараметр("ВидДокументаЭО" , "ОплатаОтПокупателяПлатежнойКартой");
	
	ВозможностьИзмененияЧек = ПравоДоступа("Изменение", Метаданные.Документы.ЧекККМ);
	ВозможностьИзмененияПКО = ПравоДоступа("Изменение", Метаданные.Документы.ПриходныйКассовыйОрдер);
	ВозможностьИзмененияРКО = ПравоДоступа("Изменение", Метаданные.Документы.РасходныйКассовыйОрдер);
	ВозможностьИзмененияРБО = ПравоДоступа("Изменение", Метаданные.Документы.РегистрацияБезналичнойОплаты);
	ВозможностьИзмененияЭО  = ПравоДоступа("Изменение", Метаданные.Документы.ОплатаОтПокупателяПлатежнойКартой);
	
	Запрос.УстановитьПараметр("ВозможностьИзмененияЧек", ВозможностьИзмененияЧек);
	Запрос.УстановитьПараметр("ВозможностьИзмененияПКО", ВозможностьИзмененияПКО);
	Запрос.УстановитьПараметр("ВозможностьИзмененияРКО", ВозможностьИзмененияРКО);
	Запрос.УстановитьПараметр("ВозможностьИзмененияРБО", ВозможностьИзмененияРБО);
	Запрос.УстановитьПараметр("ВозможностьИзмененияЭО" , ВозможностьИзмененияЭО);
	
	Запрос.УстановитьПараметр("ДатаНачалаСмены", ДатаНачалаСмены);
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	ИтогСуммаПродаж    = ТаблицаЗапроса.Итог("Сумма");
	ИтогСуммаВозвратов = ТаблицаЗапроса.Итог("Возврат");
	ИтогОплатаКартой   = ТаблицаЗапроса.Итог("ОплатаКартой");
	
	ОсновнаяТаблица.Загрузить(ТаблицаЗапроса);
	
КонецФункции

&НаСервере
Функция ПровестиПробитыйЧек(ЧекККМ, НомерСменыККМ, НомерЧекаККМ, Адрес, Подпись, СтруктураОшибкиПробитияЧека)
	
	Попытка
		ЧекККМОбъект = ЧекККМ.ПолучитьОбъект();
		
		ЧекККМОбъект.НомерСменыККМ = НомерСменыККМ;
		ЧекККМОбъект.НомерЧекаККМ  = НомерЧекаККМ;
		
		ЧекККМОбъект.АдресЧекаЕГАИС = Адрес;
		ЧекККМОбъект.ПодписьЧекаЕГАИС = Подпись;
		
		ЧекККМОбъект.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Пробитый;
		ЧекККМОбъект.Записать(РежимЗаписиДокумента.Запись);
		НомерЧекаККМ = ЧекККМ.НомерЧекаККМ;
		Возврат Истина;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		СтруктураОшибкиПробитияЧека.Вставить("ТекстОшибки", ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура СменитьФлажки(ФлагПометки)
	Для каждого ЭлементОсновнойТаблицы Из ОсновнаяТаблица Цикл
		Если ЭлементОсновнойТаблицы.ВозможностьИзменения Тогда
			ЭлементОсновнойТаблицы.Пометка = ФлагПометки;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьИнформационныеНадписи();
	
КонецПроцедуры

#Область ПечатьНаОборудовании

&НаСервере
Функция ПодготовитьДанныеДляПробитияЧека(ЧекККМСсылка, ДанныеЕГАИСДостаточны, НомерЧека, ТранспортныйМодуль = Неопределено, ЕстьАлкогольнаяПродукцияЕГАИС = Неопределено)
	
	СтруктураДанных = РозничныеПродажиКлиентСервер.СтруктураДанныхДляПробитияЧека();
	СтруктураДанных.ЧекККМСсылка = ЧекККМСсылка;
	СтруктураДанных.НомерЧека = НомерЧека;
	СтруктураДанных.НеПечататьБумажныйЧек =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КассаККМ, "НеПечататьБумажныйЧек");
	СтруктураДанных.ТранспортныйМодуль = ТранспортныйМодуль;
	СтруктураДанных.ЕстьАлкогольнаяПродукцияЕГАИС = ЕстьАлкогольнаяПродукцияЕГАИС;
	СтруктураДанных.ДанныеЕГАИСДостаточны = ДанныеЕГАИСДостаточны;
	
	Возврат РозничныеПродажиСервер.ПодготовитьДанныеДляПробитияЧека(СтруктураДанных);
	
КонецФункции

&НаСервере
Функция ПараметрыЧека(Документ)
	
	ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(Объект.КассаККМ);
	ПараметрыКассыККМ.Вставить("ПробитЧек", Документ.ПробитЧек);
	ПараметрыКассыККМ.Вставить("СуммаДокумента", Документ.СуммаДокумента);
	
	Возврат ПараметрыКассыККМ;
	
КонецФункции // ПараметрыЧека()

&НаКлиенте
Процедура ПробитьЧекВыполнитьЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ЧекПробит = Ложь;
		АдресЧекаЕГАИС = "";
		ПодписьЧекаЕГАИС = "";
		// Установить полученное значение номера чека реквизиту документа.
		Если РезультатВыполнения.Свойство("ДополнительныеПараметры") Тогда
			Если РезультатВыполнения.ДополнительныеПараметры.Свойство("АдресЧека") Тогда
				АдресЧекаЕГАИС = РезультатВыполнения.ДополнительныеПараметры.АдресЧека;
			КонецЕсли;
			Если РезультатВыполнения.ДополнительныеПараметры.Свойство("ПодписьЧека") Тогда
				ПодписьЧекаЕГАИС = РезультатВыполнения.ДополнительныеПараметры.ПодписьЧека;
			КонецЕсли;
		КонецЕсли;
		СтруктураОшибкиПробитияЧека = Новый Структура;
		Если ЗначениеЗаполнено(АдресЧекаЕГАИС) ИЛИ ЗначениеЗаполнено(ПодписьЧекаЕГАИС) Тогда
			РезультатПроведения = ПровестиПробитыйЧек(Параметры.ЧекККМСсылка,
													  РезультатВыполнения.ВыходныеПараметры[0], 
													  РезультатВыполнения.ВыходныеПараметры[1], 
													  АдресЧекаЕГАИС, 
													  ПодписьЧекаЕГАИС,
													  СтруктураОшибкиПробитияЧека);
		Иначе
			РезультатПроведения = ПровестиПробитыйЧек(Параметры.ЧекККМСсылка, 
													  РезультатВыполнения.ВыходныеПараметры[0], 
													  РезультатВыполнения.ВыходныеПараметры[1], 
													  "", 
													  "",
													  СтруктураОшибкиПробитияЧека);
		КонецЕсли;
		Если РезультатПроведения = Истина Тогда
			НомерДокументаКассыККМ[Объект.КассаККМ] = РезультатВыполнения.ВыходныеПараметры[1] + 1;
			ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
			ЧекПробит = Истина;
		Иначе
			Если СтруктураОшибкиПробитияЧека.Свойство("ТекстОшибки") Тогда
				ЗаголовокИнформации = НСтр("ru = 'При печати чека произошла ошибка'");
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, СтруктураОшибкиПробитияЧека.ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, ЧекПробит);
	Иначе
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
									|Чек не напечатан на устройстве для печати чеков.
									|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ЗаголовокИнформации = НСтр("ru = 'При печати чека произошла ошибка'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ШапкаЧека = ПараметрыВыполнения.ВходныеПараметры;
	
	НомерСмены = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерСмены);
	
	Если НомерСмены <> 0 Тогда
		ШапкаЧека.НомерСмены = НомерСмены;
	КонецЕсли;
	
	НомерЧека = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерЧека);
	
	Если НомерЧека <> 0 Тогда
		ШапкаЧека.НомерЧека = НомерЧека;
	КонецЕсли;
	
	Если ПараметрыВыполнения.Свойство("ЗаводскойНомерФН") И ЗначениеЗаполнено(ПараметрыВыполнения.ЗаводскойНомерФН) Тогда
		ШапкаЧека.СерийныйНомер = ПараметрыВыполнения.ЗаводскойНомерФН;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЕстьАлкогольнаяПродукцияЕГАИС Тогда
	
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("НомерСмены", ШапкаЧека.НомерСмены);
		ПараметрыОперации.Вставить("НомерЧека",  ШапкаЧека.НомерЧека);
		ПараметрыОперации.Вставить("СерийныйНомер",  ШапкаЧека.СерийныйНомер);
		
		ОбменДаннымиЕГАИСКлиент.ПередатьНемедленно(
			ДополнительныеПараметры.ЧекККМСсылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные"),
			ПараметрыОперации,
			Новый ОписаниеОповещения("ПослеПередачиЧекаЕГАИС", ЭтотОбъект, ПараметрыВыполнения));
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ШапкаЧека = ПараметрыВыполнения.ВходныеПараметры;
	ШапкаЧека.НомерЧека = ШапкаЧека.НомерЧека + 1000000;
	
	Если ШапкаЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств") Тогда
		ШапкаЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств");
	Иначе
		ШапкаЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств");
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЕстьАлкогольнаяПродукцияЕГАИС Тогда
	
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("НомерСмены", ШапкаЧека.НомерСмены);
		ПараметрыОперации.Вставить("НомерЧека",  ШапкаЧека.НомерЧека);
		
		ОбменДаннымиЕГАИСКлиент.ПередатьНемедленно(
			ДополнительныеПараметры.ЧекККМСсылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию"),
			ПараметрыОперации,
			Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура печати чека на фискальном регистраторе.
//
&НаКлиенте
Процедура ПробитьЧекВыполнить(ОповещениеПриЗавершении, ЧекККМ)
	
	ЧекПробит = Ложь;
	
	ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(Объект.КассаККМ);
	ИдентификаторУстройстваФР = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	Если НЕ ИспользоватьПодключаемоеОборудование ИЛИ ИспользоватьКассуККМБезПодключенияОборудования Тогда
		
		Если НомерДокументаКассыККМ[Объект.КассаККМ] <> Неопределено Тогда
			НомерЧекаККМ  = НомерДокументаКассыККМ[Объект.КассаККМ];
		Иначе
			НомерЧекаККМ  = ПорядковыйНомерПродажи;
		КонецЕсли;
		
		СтруктураОшибкиПробитияЧека = Новый Структура;
		РезультатПроведения = ПровестиПробитыйЧек(ЧекККМ, 0, НомерЧекаККМ, "", "", СтруктураОшибкиПробитияЧека);
		Если РезультатПроведения = Истина Тогда
			НомерДокументаКассыККМ[Объект.КассаККМ] = НомерЧекаККМ + 1;
			ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
			ЧекПробит = Истина;
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ЧекПробит);
		Возврат;
		
	КонецЕсли;
	
	Если ИдентификаторУстройстваФР <> Неопределено Тогда
		
		ЕстьЗапрет = Ложь;
		ПроверитьЗапретРозничнойПродажиТаблицыТоваров(ЧекККМ, "Товары", ЕстьЗапрет);
		
		Если ЕстьЗапрет Тогда 
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Ложь);
			Возврат;
		КонецЕсли;
		
		Контекст = Новый Структура;
		Контекст.Вставить("ЧекККМСсылка"       , ЧекККМ);
		Контекст.Вставить("КассаККМ"           , Объект.КассаККМ);
		Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		
		ЕстьАлкогольнаяПродукцияЕГАИС = Ложь;
		ТранспортныйМодуль = Неопределено;
		ДанныеЕГАИСДостаточны = Истина;
		ТекстПолногоСообщения = "";
		
		НомерЧека = НомерДокументаКассыККМ[Объект.КассаККМ] + 1;
		ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(ЧекККМ, ДанныеЕГАИСДостаточны, НомерЧека, ТранспортныйМодуль, ЕстьАлкогольнаяПродукцияЕГАИС);
		
		Контекст.Вставить("ЕстьАлкогольнаяПродукцияЕГАИС", ЕстьАлкогольнаяПродукцияЕГАИС);
		
		Если НЕ ДанныеЕГАИСДостаточны Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Ложь);
			Возврат;
		КонецЕсли;
		
		Если ЕстьАлкогольнаяПродукцияЕГАИС Тогда
			
			Контекст.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
			
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ПробитьЧекВыполнитьЗавершение", ЭтотОбъект, Контекст);
		ПослеОткрытияЧека     = Новый ОписаниеОповещения("ПечатьЧека_ПослеОткрытияЧека", ЭтотОбъект, Контекст);
		ПослеОшибкиПечатиЧека = Новый ОписаниеОповещения("ПечатьЧека_ПослеОшибкиПечатиЧека", ЭтотОбъект, Контекст);

		Если ЭтаФорма.ВладелецФормы <> Неопределено Тогда     
			УникальныйИдентификаторФормы = ЭтаФорма.ВладелецФормы.УникальныйИдентификатор 
		Иначе
			УникальныйИдентификаторФормы = УникальныйИдентификатор    
		КонецЕсли;
			
		МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(Оповещение, 
										УникальныйИдентификатор, 
										ОбщиеПараметры, 
										ИдентификаторУстройстваФР,
										,
										ПослеОткрытияЧека,
										ПослеОшибкиПечатиЧека);
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Не выбрано устройство для печати чеков.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(, ТекстСообщения);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекКлиентИнкассацияЗавершениеРКО(РезультатВыполнения, ПараметрыОперации) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ОбщиеПараметры = Новый Структура();
		НомерЧека = НомерДокументаКассыККМ[Объект.КассаККМ] + 1;
		НапечататьЧекСерверИнкассацияЗавершение(ПараметрыОперации.ДокументНаККМ, 
												ПараметрыОперации.РаспределениеВыручкиПоСекциям,
												ОбщиеПараметры,
												НомерЧека);
		
		Оповещение = Новый ОписаниеОповещения("НапечататьЧекКлиентЗавершениеРКО", ЭтотОбъект, ПараметрыОперации);
		
		Если ЭтаФорма.ВладелецФормы <> Неопределено Тогда     
			УникальныйИдентификаторФормы = ЭтаФорма.ВладелецФормы.УникальныйИдентификатор 
		Иначе
			УникальныйИдентификаторФормы = УникальныйИдентификатор    
		КонецЕсли;
		
		ПодключенноеОборудование = Новый Структура("Терминал, ФискальныеУстройства");
		ПодключенноеОборудование.ФискальныеУстройства = Новый Массив; 
		ПодключенноеОборудование.ФискальныеУстройства.Добавить(ПараметрыОперации.ИдентификаторУстройства);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДокументСсылка", ПараметрыОперации.ДокументНаККМ);
		ПараметрыФормы.Вставить("Организация", ПараметрыОперации.Организация);
		ПараметрыФормы.Вставить("Партнер", Неопределено);
		ПараметрыФормы.Вставить("ПодключенноеОборудование", ПодключенноеОборудование);
		ПараметрыФормы.Вставить("ТорговыйОбъект", Неопределено);
		ПараметрыФормы.Вставить("ПараметрыОперацииИнкассации", РезультатВыполнения.ПараметрыОперацииИнкассации);
		
		ОткрытьФорму(
			"Обработка.ПечатьЧека.Форма",
			ПараметрыФормы,
			ЭтотОбъект,,,,
			Оповещение);
		
	Иначе
		ЭтаФорма.Доступность = Истина;
		ТекстСообщения = НСтр("ru = 'При операции внесения произошла ошибка.
									|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекКлиентИнкассацияЗавершениеПКО(РезультатВыполнения, ПараметрыОперации) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		Отказ = Ложь;
		
		НапечататьЧекСерверЗавершение(ПараметрыОперации.НомерЧекаККМ, ПараметрыОперации.ДокументНаККМ, Отказ);
		
		ВыполнитьОбработкуОповещения(ПараметрыОперации.ОповещениеПриЗавершенииПробитияЧека, Истина);
		
	Иначе
		ЭтаФорма.Доступность = Истина;
		ТекстСообщения = НСтр("ru = 'При операции выемки произошла ошибка.
									|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура НапечататьЧекСерверИнкассацияЗавершение(ДокументНаККМ, РаспределениеВыручкиПоСекциям, ОбщиеПараметры, НомерЧека)
	
	// Готовим данные
	ОбщиеПараметры  = ВходящиеДанныеДляФРСервер(ДокументНаККМ, РаспределениеВыручкиПоСекциям, НомерЧека);
	
КонецПроцедуры

&НаСервере
Функция ВходящиеДанныеДляФРСервер(ДокументНаККМ, РаспределениеВыручкиПоСекциям, НомерЧека)
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументНаККМ);
	Возврат МенеджерДокумента.ПодготовитьДанныеДляПробитияЧека(ДокументНаККМ, РаспределениеВыручкиПоСекциям, НомерЧека);
	
КонецФункции

&НаКлиенте
Процедура НапечататьЧекКлиентЗавершениеРКО(РезультатВыполнения, ПараметрыОперации) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	
	Если РезультатВыполнения = КодВозвратаДиалога.Отмена ИЛИ РезультатВыполнения = Неопределено Тогда
		// Отмена в форме печати чека
	ИначеЕсли РезультатВыполнения.Свойство("Результат") И РезультатВыполнения.Результат Тогда
	
		
		Отказ = Ложь;
		
		
		НапечататьЧекСерверЗавершение(РезультатВыполнения.ВыходныеПараметры[1], ПараметрыОперации.ДокументНаККМ, Отказ);
		
		ПараметрыДокумента = ОбщегоНазначенияРТВызовСервера.ЗначенияРеквизитовОбъекта(ПараметрыОперации.ДокументНаККМ, Новый Структура("КассаККМ, НомерЧекаККМ"));
		НомерДокументаКассыККМ[ПараметрыДокумента.КассаККМ] = ПараметрыДокумента.НомерЧекаККМ + 1;

		ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		
		ВыполнитьОбработкуОповещения(ПараметрыОперации.ОповещениеПриЗавершенииПробитияЧека, Истина);
	Иначе
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
									|Чек не напечатан на фискальном устройстве.
									|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекКлиентЗавершениеПКО(РезультатВыполнения, ПараметрыОперации) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	
	Если РезультатВыполнения = КодВозвратаДиалога.Отмена ИЛИ РезультатВыполнения = Неопределено Тогда
		// Отмена в форме печати чека
	ИначеЕсли РезультатВыполнения.Свойство("Результат") И РезультатВыполнения.Результат Тогда
		
		Отказ = Ложь;
		
		ПараметрыОперации.Вставить("НомерЧекаККМ", РезультатВыполнения.ВыходныеПараметры[1]);
		
		ПараметрыДокумента = ОбщегоНазначенияРТВызовСервера.ЗначенияРеквизитовОбъекта(ПараметрыОперации.ДокументНаККМ, Новый Структура("КассаККМ"));
		
		НомерДокументаКассыККМ[ПараметрыДокумента.КассаККМ] = ПараметрыОперации.НомерЧекаККМ + 1;

		ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		
		ПараметрыОперации.Вставить("ТипИнкассации", 0);
		ПараметрыОперации.Вставить("Сумма"        , ПараметрыОперации.СуммаДокумента);
		ПараметрыКассы = ДополнительныеПараметрыККМ(ПараметрыОперации.ДокументНаККМ);
		ПараметрыОперации.Вставить("РеквизитыКассыККМ", ПараметрыКассы);
		
		Оповещение = Новый ОписаниеОповещения("НапечататьЧекКлиентИнкассацияЗавершениеПКО", ЭтотОбъект, ПараметрыОперации);
		
		ПараметрыИнкассацииОперации = МенеджерОборудованияКлиентСервер.ПараметрыИнкассации();
		ПараметрыИнкассацииОперации.ДокументОснование = ПараметрыОперации.ДокументНаККМ;
		ПараметрыИнкассацииОперации.Сумма             = ПараметрыОперации.Сумма;
		ПараметрыИнкассацииОперации.ТипИнкассации     = ПараметрыОперации.ТипИнкассации;
		
		Если ЭтаФорма.ВладелецФормы <> Неопределено Тогда     
			УникальныйИдентификаторФормы = ЭтаФорма.ВладелецФормы.УникальныйИдентификатор 
		Иначе
			УникальныйИдентификаторФормы = УникальныйИдентификатор    
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("НапечататьЧекКлиентИнкассацияЗавершениеПКО", ЭтотОбъект, ПараметрыОперации);
		
		МенеджерОборудованияКлиент.НачатьИнкассациюНаФискальномУстройстве(Оповещение, 
																		  УникальныйИдентификатор, 
																		  ПараметрыОперации, 
																		  ПараметрыОперации.ИдентификаторУстройства);  
	Иначе
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
									|Чек не напечатан на фискальном устройстве.
									|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекКлиентЗавершениеРБО(РезультатВыполнения, ПараметрыОперации) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		Отказ = Ложь;
		
		ПараметрыОперации.Вставить("НомерЧекаККМ", РезультатВыполнения.ВыходныеПараметры[1]);
		
		ПараметрыДокумента = ОбщегоНазначенияРТВызовСервера.ЗначенияРеквизитовОбъекта(ПараметрыОперации.ДокументНаККМ, Новый Структура("КассаККМ"));
		
		НомерДокументаКассыККМ[ПараметрыДокумента.КассаККМ] = ПараметрыОперации.НомерЧекаККМ + 1;

		ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		
		НапечататьЧекСерверЗавершение(ПараметрыОперации.НомерЧекаККМ, ПараметрыОперации.ДокументНаККМ, Отказ);
		
		ВыполнитьОбработкуОповещения(ПараметрыОперации.ОповещениеПриЗавершенииПробитияЧека, Истина);
		
	Иначе
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
									|Чек не напечатан на фискальном устройстве.
									|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НапечататьЧекСерверЗавершение(НомерЧекаККМ, ДокументНаККМ, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументНаККМОбъект = ДокументНаККМ.ПолучитьОбъект();
	
	// Установить полученное значение номера чека реквизиту документа.
	ДокументНаККМОбъект.НомерЧекаККМ = НомерЧекаККМ;
	ДокументНаККМОбъект.ПробитЧек    = Истина;
	
	Попытка
		ДокументНаККМОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Отказ = Истина;
		Возврат
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПередачиЧекаЕГАИС(Изменения, ПараметрыВыполнения) Экспорт
	
	РозничныеПродажиКлиент.ПослеПередачиЧекаЕГАИС(Изменения, ПараметрыВыполнения);
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Процедура ПроверитьЗапретРозничнойПродажиТаблицыТоваров(ТекущийОбъект, ТабличнаяЧасть, ЕстьЗапрет)
	
	СкидкиНаценкиСерверПереопределяемый.ПроверитьЗапретРозничнойПродажиТаблицыТоваров(
		ТекущийОбъект,
		ТабличнаяЧасть,
		ЕстьЗапрет);
	
КонецПроцедуры

#КонецОбласти