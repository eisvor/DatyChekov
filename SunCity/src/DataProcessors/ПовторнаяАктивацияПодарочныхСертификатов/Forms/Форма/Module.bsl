
#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ДанныеПоискаПоМагнитномуКодуСервер(МагнитныйКод);
	Возврат ПодключаемоеОборудованиеРТКлиент.ПолученМагнитныйКод(ЭтотОбъект, СтруктураРезультат);
	
КонецФункции

&НаКлиенте
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ДанныеПоискаПоШтрихкодуСервер(Штрихкод);
	Возврат ПодключаемоеОборудованиеРТКлиент.ПолученШтрихкодИзСШК(ЭтотОбъект, СтруктураРезультат);
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		ПодключаемоеОборудованиеРТ.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ИдентификаторСтроки = ДобавитьНайденныеСерийныеНомера(СтрокаРезультата);
		
	Иначе
		ИдентификаторСтрокиФормы = ДобавитьНайденныеПозицииТоваровСервер(СтрокаРезультата);
	КонецЕсли;
	
	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

// Обработка магнитного или штрихового кода на клиенте.
//
// Параметры:
//  СтруктураПараметровКлиента - структура параметров.
//  ТекКод - Обрабатываемый код.
&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ДобавитьНайденныеПозицииТоваровСервер(СтруктураПараметров, ДополнительныеПараметры);
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеСерийныеНомера(СтруктураНомера, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не ДополнительныеПараметры = Неопределено Тогда
		СтруктураПараметров = ДополнительныеПараметры;
		ИдентификаторСтроки = СтруктураПараметров;
	Иначе
		ИдентификаторСтроки = Неопределено;
	КонецЕсли;
	
	НомерСертификата = СтруктураНомера.СерийныйНомер;
	Если НЕ ЕстьПовтор(НомерСертификата, , ИдентификаторСтроки) Тогда
		НоваяСтрока = Объект.Сертификаты.Добавить();
		Если СтруктураНомера.Свойство("Номенклатура") Тогда
			НоваяСтрока.Сертификат = СтруктураНомера.Номенклатура;
		Иначе
			НоваяСтрока.Сертификат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НомерСертификата, "Владелец");
		КонецЕсли;
		НоваяСтрока.НомерСертификата = НомерСертификата;
		ИдентификаторСтроки = НоваяСтрока.ПолучитьИдентификатор();
		Если ЗначениеЗаполнено(НомерСертификата) Тогда
			СертификатыНомерСертификатаПриИзмененииНаСервере(ИдентификаторСтроки, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ДополнительныеПараметры = Неопределено Тогда
		СтруктураПараметров = ИдентификаторСтроки;
		Возврат СтруктураПараметров;
	Иначе
		Возврат ИдентификаторСтроки;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ДанныеПоискаПоМагнитномуКодуСервер(МагнитныйКод)
	
	Возврат ПодключаемоеОборудованиеРТ.ДанныеПоискаПоМагнитномуКоду(МагнитныйКод, ЭтотОбъект);
	
КонецФункции

&НаСервере
Функция ДанныеПоискаПоШтрихкодуСервер(Штрихкод)
	
	Возврат ПодключаемоеОборудованиеРТ.ДанныеПоискаПоШтрихкоду(Штрихкод, ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Процедура ОповещениеОбработатьДанныеПоКоду(СтруктураРезультат, ДополнительныеПараметры) Экспорт
	
	ОбработатьДанныеПоКодуСервер(СтруктураРезультат);
	
КонецПроцедуры

&НаКлиенте
Функция ОбработатьДанныеИзТСДКлиент(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	Результат = ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоСертификатамИзТСДКлиент(ЭтотОбъект, СтруктураПараметров);
	ПодключаемоеОборудованиеРТКлиент.СообщитьТекстПредупреждения(СтруктураПараметров);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеПозицииТоваровСервер(СтруктураПараметров, ДополнительныеПараметры = Неопределено)
	
	Если Не ДополнительныеПараметры = Неопределено Тогда
		СтруктураПараметров = ДополнительныеПараметры;
		ИдентификаторСтроки = СтруктураПараметров;
	Иначе
		ИдентификаторСтроки = Неопределено;
	КонецЕсли;
	
	НоваяСтрока = Объект.Сертификаты.Добавить();
	НоваяСтрока.Сертификат = СтруктураПараметров.Номенклатура;
	ИдентификаторСтроки = НоваяСтрока.ПолучитьИдентификатор();
	СертификатыСертификатПриИзмененииНаСервере(ИдентификаторСтроки);
	
	Если Не ДополнительныеПараметры = Неопределено Тогда
		СтруктураПараметров = ИдентификаторСтроки;
		Возврат СтруктураПараметров;
	Иначе
		Возврат ИдентификаторСтроки;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("МассивСертификатов") Тогда
		МассивСертификатов = Параметры.МассивСертификатов;
		Если МассивСертификатов.Количество() > 0 Тогда
			ПервыйЭлемент = МассивСертификатов[0];
			Если ТипЗнч(ПервыйЭлемент) = Тип("СправочникСсылка.СерийныеНомера") Тогда
				Для Каждого ЭлементМассива Из МассивСертификатов Цикл
					СтруктураНомера = Новый Структура("СерийныйНомер", ЭлементМассива);
					ИдентификаторСтрокиФормы = ДобавитьНайденныеСерийныеНомера(СтруктураНомера);
				КонецЦикла;
			ИначеЕсли ТипЗнч(ПервыйЭлемент) = Тип("СправочникСсылка.Номенклатура") Тогда
				Для Каждого ЭлементМассива Из МассивСертификатов Цикл
					ЭтоГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементМассива, "ЭтоГруппа");
					Если НЕ ЭтоГруппа Тогда
						СтруктураРеквизитовСертификата = Новый Структура;
						СтруктураРеквизитовСертификата.Вставить("ИспользоватьСерийныеНомера", "ИспользоватьСерийныеНомера");
						СтруктураРеквизитовСертификата.Вставить("ТипНоменклатуры", "ТипНоменклатуры");
						ЗначенияРеквизитовСертификата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
														ЭлементМассива,
														СтруктураРеквизитовСертификата);
						
						ТипНоменклатуры = ЗначенияРеквизитовСертификата.ТипНоменклатуры; 
						Если ЗначенияРеквизитовСертификата.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат
							И ЗначенияРеквизитовСертификата.ИспользоватьСерийныеНомера Тогда
							СтруктураНоменклатуры = Новый Структура("Номенклатура", ЭлементМассива);
							ИдентификаторСтрокиФормы = ДобавитьНайденныеПозицииТоваровСервер(СтруктураНоменклатуры);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПодключаемоеОборудованиеРТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	ПодключаемоеОборудованиеРТ.ПолучитьДоступноеПодключаемоеОборудование(ИспользоватьПодключаемоеОборудование, Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода,СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСертификаты

&НаКлиенте
Процедура СертификатыНомерСертификатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Справочник.СерийныеНомера.Форма.ФормаВыбора.Открытие");
             
    СтандартнаяОбработка=Ложь;
	ТекущаяСтрокаСертификата = Элементы.Сертификаты.ТекущиеДанные;
	ДанныеДляОтбора = Новый Структура;
	ДанныеДляОтбора.Вставить("Владелец", ТекущаяСтрокаСертификата.Сертификат);
	ОткрытьФорму("Справочник.СерийныеНомера.ФормаВыбора", Новый Структура("Отбор", ДанныеДляОтбора), Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СертификатыСертификатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
                 Истина, "Справочник.Номенклатура.Форма.ФормаВыбора.Открытие");
                 
    СтандартнаяОбработка=Ложь;
	СтруктураОтбора = Новый Структура(
								"ТипНоменклатуры",
								ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", Новый Структура("Отбор", СтруктураОтбора), Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СертификатыНомерСертификатаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Сертификаты.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		НомерСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
		СертификатыНомерСертификатаПриИзмененииНаСервере(НомерСтроки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СертификатыСертификатПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Сертификаты.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		НомерСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
		СертификатыСертификатПриИзмененииНаСервере(НомерСтроки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		Элемент.ТекущиеДанные.НомерСертификата = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПовторноАктивировать(Команда)
	Если НЕ ЭтаФорма.ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	ПовторноАктивироватьНаСервере();
	ЭтаФорма.ОбновитьОтображениеДанных();
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "Сертификаты");
	ДополнительныеПараметры.Вставить("ЕстьКоличество", Ложь);
	ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если Не ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПовторноАктивироватьНаСервере()
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.СерийныеНомера");
		Блокировка.Заблокировать();
		
		СуффиксСтарогоКода = " " + НСтр("ru = '(погашен и заменен)'");
		Для Каждого СтрокаСертификата Из Объект.Сертификаты Цикл
			Если НЕ СтрокаСертификата.Активирован Тогда
				НовыйНомерСертификата = Справочники.СерийныеНомера.СоздатьЭлемент();
				НовыйНомерСертификата.Владелец = СтрокаСертификата.Сертификат;
				
				СтарыйНомерСертификата = СтрокаСертификата.НомерСертификата.ПолучитьОбъект();
				СтарыйНомерСертификата.ПовторноАктивирован = Истина;
				ТипСерийногоНомера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаСертификата.Сертификат, "ТипСерийногоНомера");
				Если ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Магнитный Тогда
					// Старый номер отмечается, как повторно активированный.
					СтруктураСтарогоНомера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					СтрокаСертификата.НомерСертификата,
					Новый Структура("Наименование, КодСерийногоНомера"));
					НаименованиеСертификата = СтруктураСтарогоНомера.Наименование;
					КодСерийногоНомера = СтруктураСтарогоНомера.КодСерийногоНомера;
					// Код и наименование старого номера модифицируются.
					СтарыйНомерСертификата.Наименование = НаименованиеСертификата + СуффиксСтарогоКода;
					СтарыйНомерСертификата.КодСерийногоНомера = КодСерийногоНомера + СуффиксСтарогоКода;
					СтарыйНомерСертификата.Записать();
					
					// Коду нового номера присваивается значение кода старого номера.
					НовыйНомерСертификата.КодСерийногоНомера = КодСерийногоНомера;
					НовыйНомерСертификата.Наименование = НаименованиеСертификата;
					НовыйНомерСертификата.Записать();
				Иначе
					// Старый номер отмечается, как повторно активированный.
					Если ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Смешанный Тогда
						СтруктураСтарогоНомера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						СтрокаСертификата.НомерСертификата,
						Новый Структура("Наименование, КодСерийногоНомера"));
						НаименованиеСертификата = СтруктураСтарогоНомера.Наименование;
						КодСерийногоНомера = СтруктураСтарогоНомера.КодСерийногоНомера;
					Иначе
						СтруктураСтарогоНомера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						СтрокаСертификата.НомерСертификата,
						Новый Структура("Наименование"));
						НаименованиеСертификата = СтруктураСтарогоНомера.Наименование;
					КонецЕсли;
					// Код и наименование старого номера модифицируются.
					СтарыйНомерСертификата.Наименование = НаименованиеСертификата + СуффиксСтарогоКода;
					Если ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Смешанный Тогда
						СтарыйНомерСертификата.КодСерийногоНомера = КодСерийногоНомера + СуффиксСтарогоКода;
					КонецЕсли;
					СтарыйНомерСертификата.Записать();
					
					// Коду нового номера присваивается значение кода старого номера.
					Если ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Смешанный Тогда
						НовыйНомерСертификата.КодСерийногоНомера = КодСерийногоНомера;
					КонецЕсли;
					НовыйНомерСертификата.Наименование = НаименованиеСертификата;
					НовыйНомерСертификата.Записать();
					
					// Дополнительно получаются сведения о старом сертификате.
					СтруктураШтрихкода = ПодключаемоеОборудованиеРТ.ШтрихкодТовара(СтрокаСертификата.НомерСертификата);
					
					// Формируется штрихкод для нового номера.
					Если СтруктураШтрихкода = Неопределено Тогда
						СтрокаИсключения = Нстр("ru = 'Ошибка формирования записи штрихкода для номера %1: у погашенного номера не задан штрихкод.'");
						СтрокаИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						СтрокаИсключения,
						НовыйНомерСертификата.Ссылка);
						ВызватьИсключение СтрокаИсключения;
					Иначе
						Штрихкод = СтруктураШтрихкода.Штрихкод;
						ТипШтрихкодаРТ = СтруктураШтрихкода.ТипШтрихкода;
					КонецЕсли;
					
					// Штрихкод старого номера сертификата модифицируется.
					НаборЗаписейШтрихкодов = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
					НаборЗаписейШтрихкодов.Отбор.Владелец.Установить(СтрокаСертификата.НомерСертификата);
					ЗаписьШтрихкода = НаборЗаписейШтрихкодов.Добавить();
					ЗаписьШтрихкода.Владелец = СтрокаСертификата.НомерСертификата;
					ЗаписьШтрихкода.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN128;
					ЗаписьШтрихкода.Штрихкод = Штрихкод + СуффиксСтарогоКода;
					ЗаписьШтрихкода.ПредставлениеШтрихкода = Штрихкод + СуффиксСтарогоКода;
					НаборЗаписейШтрихкодов.Записать(Истина);
					
					ЗаписьШтрихкода = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
					ЗаписьШтрихкода.Владелец = НовыйНомерСертификата.Ссылка;
					ЗаписьШтрихкода.ТипШтрихкода = ТипШтрихкодаРТ;
					ЗаписьШтрихкода.Штрихкод = Штрихкод;
					
					Если ТипШтрихкодаРТ = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN128 Тогда
						ЗаписьШтрихкода.ПредставлениеШтрихкода = ЗаписьШтрихкода.Штрихкод;
					КонецЕсли;
					
					Если НЕ ЗаписьШтрихкода.ПроверитьЗаполнение() Тогда
						СтрокаИсключения = Нстр("ru = 'Ошибка проверки заполнения записи штрихкода для номера %1.'");
						СтрокаИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						СтрокаИсключения,
						НовыйНомерСертификата.Ссылка);
						ВызватьИсключение СтрокаИсключения;
					КонецЕсли;
					
					ЗаписьШтрихкода.Записать(Истина);			
				КонецЕсли;
				СтрокаСертификата.Активирован = Истина;
				СтрокаСертификата.НомерСертификата = НовыйНомерСертификата.Ссылка;
				
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура СертификатыНомерСертификатаПриИзмененииНаСервере(НомерСтроки, ПроверятьПовторы = Истина)
	
	ТекущаяСтрока = Объект.Сертификаты.НайтиПоИдентификатору(НомерСтроки);
	Если ТекущаяСтрока <> Неопределено Тогда
		Если ПроверятьПовторы Тогда
			ПроверитьПовторы(ТекущаяСтрока);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущаяСтрока.НомерСертификата) Тогда
			РеквизитыСертификата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
									ТекущаяСтрока.НомерСертификата,
									"Владелец, ПовторноАктивирован");
			Если РеквизитыСертификата.Владелец <> ТекущаяСтрока.Сертификат Тогда
				ТекстСообщения = НСтр("ru = 'Номер %1 не принадлежит выбранному сертификату %2.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ТекстСообщения,
									ТекущаяСтрока.НомерСертификата,
									ТекущаяСтрока.Сертификат);
				ОбщегоНазначения.СообщитьПользователю(
					ТекстСообщения,
					,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						"Сертификаты",
						ТекущаяСтрока.НомерСтроки,
						"НомерСертификата"),
					"Объект");
				ТекущаяСтрока.НомерСертификата = Справочники.СерийныеНомера.ПустаяСсылка();
			КонецЕсли;
			Если РеквизитыСертификата.ПовторноАктивирован Тогда
				ТекстСообщения = НСтр("ru = 'Сертификат %1 уже повторно активирован.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ТекстСообщения,
									ТекущаяСтрока.НомерСертификата);
				ОбщегоНазначения.СообщитьПользователю(
					ТекстСообщения,
					,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						"Сертификаты",
						ТекущаяСтрока.НомерСтроки,
						"НомерСертификата"),
					"Объект");
				ТекущаяСтрока.НомерСертификата = Справочники.СерийныеНомера.ПустаяСсылка();
			КонецЕсли;
			Если НЕ СертификатБылПогашенИлиСписан(ТекущаяСтрока.НомерСертификата) Тогда
				ТекстСообщения = НСтр("ru = 'Сертификат %1 не был ранее погашен или списан. Повторная активация не возможна.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ТекстСообщения,
									ТекущаяСтрока.НомерСертификата);
				ОбщегоНазначения.СообщитьПользователю(
					ТекстСообщения,
					,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						"Сертификаты",
						ТекущаяСтрока.НомерСтроки,
						"НомерСертификата"),
					"Объект");
				ТекущаяСтрока.НомерСертификата = Справочники.СерийныеНомера.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ТекущаяСтрока.Активирован = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СертификатыСертификатПриИзмененииНаСервере(НомерСтроки)
	ТекущаяСтрока = Объект.Сертификаты.НайтиПоИдентификатору(НомерСтроки);
	Если ТекущаяСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.Сертификат) Тогда
			СтруктураРеквизитовСертификата = Новый Структура;
			СтруктураРеквизитовСертификата.Вставить("ИспользоватьСерийныеНомера", "ИспользоватьСерийныеНомера");
			СтруктураРеквизитовСертификата.Вставить("ТипНоменклатуры", "ТипНоменклатуры");
			ЗначенияРеквизитовСертификата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
												ТекущаяСтрока.Сертификат,
												СтруктураРеквизитовСертификата);
			
			ТипНоменклатуры = ЗначенияРеквизитовСертификата.ТипНоменклатуры; 
			Если ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
				ТекущаяСтрока.Сертификат = Справочники.Номенклатура.ПустаяСсылка();
				ТекстСообщения = НСтр("ru = 'Нужно выбрать подарочный сертификат.'");
				ОбщегоНазначения.СообщитьПользователю(
					ТекстСообщения,
					,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						"Сертификаты",
						ТекущаяСтрока.НомерСтроки,
						"Сертификат"),
					"Объект");
			Иначе
				ИспользоватьСерийныеНомера = ЗначенияРеквизитовСертификата.ИспользоватьСерийныеНомера;
				Если НЕ ИспользоватьСерийныеНомера Тогда
					ТекущаяСтрока.Сертификат = Справочники.Номенклатура.ПустаяСсылка();
					ТекстСообщения = НСтр("ru = 'У выбранного сертификата не используются серийные номера.'");
					ОбщегоНазначения.СообщитьПользователю(
						ТекстСообщения,
						,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
							"Сертификаты",
							ТекущаяСтрока.НомерСтроки,
							"Сертификат"),
						"Объект");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	СертификатыНомерСертификатаПриИзмененииНаСервере(НомерСтроки);
КонецПроцедуры

&НаСервере
Процедура ПроверитьПовторы(ТекущаяСтрока)
	
	НомерНайденнойСтроки = 0;
	Если ЕстьПовтор(ТекущаяСтрока.НомерСертификата, НомерНайденнойСтроки, , ТекущаяСтрока) Тогда
		
		ТекущаяСтрока.НомерСертификата = Справочники.СерийныеНомера.ПустаяСсылка();
		ТекстСообщения = НСтр("ru = 'Номер сертификата %1 уже содержится в строке %2.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ТекстСообщения,
							ТекущаяСтрока.НомерСертификата,
							НомерНайденнойСтроки);
		ОбщегоНазначения.СообщитьПользователю(
			ТекстСообщения,
			,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"Сертификаты",
				ТекущаяСтрока.НомерСтроки,
				"НомерСертификата"),
			"Объект");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьПовтор(
			НомерСертификата,
			НомерНайденнойСтроки = 0,
			ИдентификаторНайденнойСтроки = 0,
			ТекущаяСтрока = Неопределено)
	
	ЕстьПовтор = Ложь;
	Если ЗначениеЗаполнено(НомерСертификата) Тогда
		НайденныеСтроки = Объект.Сертификаты.НайтиСтроки(Новый Структура("НомерСертификата", НомерСертификата));
		Для Каждого СтрокаСертификата Из НайденныеСтроки Цикл
			Если СтрокаСертификата = ТекущаяСтрока Тогда
				Продолжить;
			КонецЕсли;
			ЕстьПовтор = Истина;
			НомерНайденнойСтроки = СтрокаСертификата.НомерСтроки;
			ИдентификаторНайденнойСтроки = СтрокаСертификата.ПолучитьИдентификатор();
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЕстьПовтор;
КонецФункции

&НаСервере
Функция СертификатБылПогашенИлиСписан(НомерСертификата)
	Результат = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЕСТЬNULL(ДвиженияСерийныхНомеров.АналитикаХозяйственнойОперации, """") КАК Состояние
	|ИЗ
	|	РегистрСведений.ДвиженияСерийныхНомеров КАК ДвиженияСерийныхНомеров
	|ГДЕ
	|	ДвиженияСерийныхНомеров.СерийныйНомер = &СерийныйНомер
	|	И (ДвиженияСерийныхНомеров.АналитикаХозяйственнойОперации = &ПогашениеПодарочныхСертификатов
	|			ИЛИ ДвиженияСерийныхНомеров.АналитикаХозяйственнойОперации.ХозяйственнаяОперация = &СписаниеНаЗатраты
	|			ИЛИ ДвиженияСерийныхНомеров.АналитикаХозяйственнойОперации.ХозяйственнаяОперация = &СписаниеПоИнвентаризации)
	|";
	Запрос.УстановитьПараметр("СерийныйНомер",
								НомерСертификата);
	Запрос.УстановитьПараметр("ПогашениеПодарочныхСертификатов",
								Справочники.АналитикаХозяйственныхОпераций.ПогашениеПодарочныхСертификатов);
	Запрос.УстановитьПараметр("СписаниеНаЗатраты",
								Перечисления.ХозяйственныеОперации.СписаниеНаЗатраты);
	Запрос.УстановитьПараметр("СписаниеПоИнвентаризации",
								Перечисления.ХозяйственныеОперации.СписаниеПоИнвентаризации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Состояние) Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ЗавершитьОбработкуДанныхПоКодуКлиент(ЭтотОбъект, СтруктураПараметровКлиента, "Сертификаты");
	
КонецПроцедуры

#КонецОбласти
