#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Создает 2 чека коррекции: сторно и корректный чек
//
// Параметры:
//  Контекст - Структура - данные обработки Создание чеков коррекции.
// 
// Возвращаемое значение:
//   Структура - содержит свойства:
//     * ЧекКоррекцииСторно - ДокументСсылка.ЧекКоррекции - чек коррекции сторно.
//     * ЧекКоррекции - ДокументСсылка.ЧекКоррекции - чек коррекции.
//
Функция СоздатьЧекиКоррекции(Контекст) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ЧекКоррекцииСторно");
	Результат.Вставить("ЧекКоррекцииСторноПроведен");
	Результат.Вставить("ЧекСкорректированный");
	Результат.Вставить("ЧекСкорректированныйПроведен");
	
	Если НЕ Контекст.ТипКоррекции = 2 Тогда
		Если НЕ ЗначениеЗаполнено(Контекст.ЧекСторно) Тогда
			РезультатЧекСторно = ЧекКоррекцииСторно(Контекст);
			Если РезультатЧекСторно <> Неопределено Тогда
				Результат.ЧекКоррекцииСторно 			= РезультатЧекСторно.ЧекКоррекцииСторно;
				Результат.ЧекКоррекцииСторноПроведен 	= РезультатЧекСторно.ЧекПроведен;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контекст.ЧекСкорректированный) Тогда
		РезультатЧек = ЧекКоррекции(Контекст);
		Если РезультатЧек <> Неопределено Тогда
			Результат.ЧекСкорректированный 			= РезультатЧек.ЧекСкорректированный;
			Результат.ЧекСкорректированныйПроведен 	= РезультатЧек.ЧекПроведен;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЧекКоррекцииСторно(Контекст)
	
	Результат = Новый Структура("ЧекКоррекцииСторно, ЧекПроведен");
	
	ЧекОбъект 	= Документы.ЧекКоррекции.СоздатьДокумент();
	ЧекПроведен = Ложь;
	
	ОбщиеПараметры = МенеджерОборудованияВызовСервера.ЗагрузитьДанныеФискализацииИзXML(Контекст.ДанныеXMLКорректируемогоЧека);
	
	ЗаполнитьЗначенияСвойств(ЧекОбъект, Контекст, "Дата,
												 | ДатаКоррекции,
												 | ДокументОснование,
												 | ДокументРасчетов, 
												 | ДополнительныйРеквизит,
												 | КассаККМ,
												 | Магазин,
												 | НомерПредписания,
												 | ОписаниеКоррекции,
												 | Организация,
												 | Ответственный,
												 | ТипКоррекции,
												 | Комментарий,
												 | Кассир,
												 | КассирИНН,
												 | ЗаказПокупателя,
												 | ДисконтнаяКарта");
	
	ЗаполнитьЗначенияСвойств(ЧекОбъект, ОбщиеПараметры, "АдресМагазина,
													   | АдресРасчетов,
													   | МестоРасчетов,
													   | ПокупательEmail,
													   | ПокупательНомер,
													   | ПризнакАгента,
													   | СистемаНалогообложения");

	ЧекОбъект.ЭтоСторно		= Истина;
	ЧекОбъект.Покупатель 	= Контекст.Контрагент;
	ЧекОбъект.ПокупательИНН = Контекст.Контрагент.ИНН;
	ЧекОбъект.ТипРасчета 	= ТипРасчетаСторно(ОбщиеПараметры.ТипРасчета);
	Если ЧекОбъект.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств Или 
		ЧекОбъект.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств Тогда
		ЧекОбъект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	Иначе
		ЧекОбъект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;
	КонецЕсли;
	
	Основание = Контекст.ДокументОснование;
	
	// Позиции чека
	Если ТипЗнч(Контекст.ДокументОснование) = Тип("ДокументСсылка.ЧекКоррекции") Тогда
		ЗаполнитьПозицииЧекаПоОснованию(ЧекОбъект.ПозицииЧека, Основание.ПозицииЧека);
	ИначеЕсли ТипЗнч(Контекст.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда 
		
		ТаблицаЗаполненныхТоваров = ДанныеПоВозвратуПокупателя(Контекст.ДокументРасчетов,
																				ОбщиеПараметры,
																				Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты);
																				
		ЗаполнитьПозицииЧекаПоОснованиюЧека(ЧекОбъект.ПозицииЧека, ТаблицаЗаполненныхТоваров, Контекст);
		
	ИначеЕсли ТипЗнч(Контекст.ДокументОснование) = Тип("ДокументСсылка.РегистрацияБезналичнойОплаты") 
		ИЛИ ТипЗнч(Контекст.ДокументОснование) = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой") Тогда
		
		НоваяСтрока = ЧекОбъект.ПозицииЧека.Добавить();
		НоваяСтрока.НаименованиеПредметаРасчета = "Поступление оплаты от клиента";
		НоваяСтрока.СуммаСоСкидками = Основание.СуммаДокумента;
		НоваяСтрока.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты;
		НоваяСтрока.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Платеж;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		НоваяСтрока.ЦенаСоСкидками = Основание.СуммаДокумента;
	ИначеЕсли ТипЗнч(Контекст.ДокументОснование) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") 
		ИЛИ ТипЗнч(Контекст.ДокументОснование) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда

		НоваяСтрока = ЧекОбъект.ПозицииЧека.Добавить();
		НоваяСтрока.НаименованиеПредметаРасчета = "Поступление оплаты от клиента";
		НоваяСтрока.СуммаСоСкидками = Основание.СуммаДокумента;
		НоваяСтрока.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты;
		НоваяСтрока.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Платеж;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		НоваяСтрока.ЦенаСоСкидками = Основание.СуммаДокумента;
	Иначе
		
		ДанныеДляПробитияЧекаККМ = ПродажиСервер.ДанныеДляПробитияЧекаККМ(Контекст.ДокументРасчетов);
		
		ИспользоватьКомиссионнуюТорговлю = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссионнуюТорговлю");
		ИспользоватьУчетИмпортныхТоваров = ПолучитьФункциональнуюОпцию("ИспользоватьУчетИмпортныхТоваров");
		
		ТаблицаЗаполненныхТоваров = ДополнитьТоварамиПараметрыПриПробитииЧека(Контекст.ДокументРасчетов,
																				ОбщиеПараметры,
																				ДанныеДляПробитияЧекаККМ,
																				Документы.ЧекККМ.ПризнакСпособаРасчета(Основание));
		
	// Позиции чека
		
		ЗаполнитьПозицииЧекаПоОснованиюЧека(ЧекОбъект.ПозицииЧека, ТаблицаЗаполненныхТоваров, Контекст);
	КонецЕсли;
	
	// Оплаты
	Если ТипЗнч(Контекст.ДокументОснование) = Тип("ДокументСсылка.РегистрацияБезналичнойОплаты") 
		ИЛИ ТипЗнч(Контекст.ДокументОснование) = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой") 
		ИЛИ ТипЗнч(Контекст.ДокументОснование) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") 
		ИЛИ ТипЗнч(Контекст.ДокументОснование) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		Оплаты = Контекст.Оплата;
		ВидОплаты = Справочники.ВидыОплатЧекаККМ.БанковскийПлатеж;
	Иначе
		Оплаты =  Основание.Оплата;
	КонецЕсли;
	
	Для Каждого СтрокаОплаты Из Оплаты Цикл
		
		НоваяСтрока = ЧекОбъект.Оплата.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплаты);
		
		Если Не ЗначениеЗаполнено(НоваяСтрока.ВидОплаты) Тогда
			НоваяСтрока.ВидОплаты = ВидОплаты;
		КонецЕсли;
		
	КонецЦикла;
	
	// Запись чека
	Попытка
		ЧекОбъект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		СтрокаОшибки = НСтр("ru = 'Не удалось записать чек коррекции сторно по причине:'") + Символы.ПС + ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(СтрокаОшибки);
		Возврат Неопределено;
	КонецПопытки;
	
	// Потом чек проводится
	Попытка
		Если ЧекОбъект.ПроверитьЗаполнение() Тогда
			ЧекОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			ЧекПроведен = Истина;
		Иначе
			СтрокаОшибки = НСтр("ru = 'Не удалось провести чек коррекции сторно по причине проверки заполнения'");
			ОбщегоНазначения.СообщитьПользователю(СтрокаОшибки);
		КонецЕсли;
	Исключение
		СтрокаОшибки = НСтр("ru = 'Не удалось провести чек коррекции сторно по причине:'") + Символы.ПС + ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(СтрокаОшибки);
	КонецПопытки;
	
	Результат.ЧекКоррекцииСторно 	= ЧекОбъект.Ссылка;
	Результат.ЧекПроведен 			= ЧекПроведен;
	
	Возврат Результат;
	
КонецФункции

Функция ЧекКоррекции(Контекст)
	
	Результат = Новый Структура("ЧекСкорректированный, ЧекПроведен");
	
	ЧекОбъект 	= Документы.ЧекКоррекции.СоздатьДокумент();
	ЧекПроведен = Ложь;
	
	ЗаполнитьЗначенияСвойств(ЧекОбъект, Контекст);
	
	АдресМагазина = ОбщегоНазначенияРТ.АдресМагазина(Контекст.Магазин);
	
	ЧекОбъект.АдресРасчетов = АдресМагазина;
	ЧекОбъект.МестоРасчетов = Строка(Контекст.Магазин) + " " + АдресМагазина;
	ЧекОбъект.АдресМагазина = АдресМагазина;
		
	ЧекОбъект.Покупатель 	= Контекст.Контрагент;
	ЧекОбъект.ПокупательИНН = Контекст.КонтрагентИНН;
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Наименование", "ФизическоеЛицо.Наименование");
	СтруктураРеквизитов.Вставить("ИНН", "ФизическоеЛицо.ИНН");
	РеквизитыКассир = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контекст.Ответственный, СтруктураРеквизитов);
	
	ЧекОбъект.Кассир          = РеквизитыКассир.Наименование;
	ЧекОбъект.КассирИНН       = РеквизитыКассир.ИНН;
	
	Если ЧекОбъект.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств Или 
		ЧекОбъект.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств Тогда
		ЧекОбъект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	Иначе
		ЧекОбъект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;
	КонецЕсли;
	
	// Позиции чека
	Для Каждого ПозицияЧека Из Контекст.ПозицииЧека Цикл
		
		НоваяСтрока = ЧекОбъект.ПозицииЧека.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПозицияЧека);
		
	КонецЦикла;
		
	// Оплаты
	Для Каждого СтрокаОплаты Из Контекст.Оплата Цикл
		
		НоваяСтрока = ЧекОбъект.Оплата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплаты);
		
	КонецЦикла;
	
	// Запись чека
	Попытка
		ЧекОбъект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		СтрокаОшибки = НСтр("ru = 'Не удалось записать чек коррекции сторно по причине:'") + Символы.ПС + ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(СтрокаОшибки);
		Возврат Неопределено;
	КонецПопытки;
	
	// Потом чек проводится
	Попытка
		Если ЧекОбъект.ПроверитьЗаполнение() Тогда
			ЧекОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			ЧекПроведен = Истина;
		Иначе
			СтрокаОшибки = НСтр("ru = 'Не удалось провести чек коррекции по причине проверки заполнения'");
			ОбщегоНазначения.СообщитьПользователю(СтрокаОшибки);
		КонецЕсли;
	Исключение
		СтрокаОшибки = НСтр("ru = 'Не удалось провести чек коррекции по причине:'") + Символы.ПС + ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(СтрокаОшибки);
	КонецПопытки;
	
	Результат.ЧекСкорректированный 	= ЧекОбъект.Ссылка;
	Результат.ЧекПроведен 			= ЧекПроведен;
	
	Возврат Результат;
	
КонецФункции

Функция ТипРасчетаСторно(ТипРасчета)
	
	Если ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств Тогда
		Возврат Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств
	ИначеЕсли ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств Тогда
		Возврат Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств
	ИначеЕсли ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств Тогда
		Возврат Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств
	ИначеЕсли ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств Тогда
		Возврат Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьПозицииЧекаПоОснованию(ПозицииЧека, Основание)
	
	Для Каждого ПозицияЧека Из Основание Цикл
		
		НоваяСтрока = ПозицииЧека.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПозицияЧека);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПозицииЧекаПоОснованиюЧека(ПозицииЧека, Основание, Контекст)
	
	Для Каждого ПозицияЧека Из Основание Цикл
		
		НоваяСтрока = ПозицииЧека.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПозицияЧека);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПозицияЧека.ДанныеКодаТоварнойНоменклатуры);
		
		НоваяСтрока.ОператорПереводаАдрес 			= ПозицияЧека.ДанныеАгента.ОператорПеревода.Адрес;
		НоваяСтрока.ОператорПереводаИНН 			= ПозицияЧека.ДанныеАгента.ОператорПеревода.ИНН;
		НоваяСтрока.ОператорПереводаНаименование 	= ПозицияЧека.ДанныеАгента.ОператорПеревода.Наименование;
		НоваяСтрока.ОператорПереводаТелефон 		= ПозицияЧека.ДанныеАгента.ОператорПеревода.Телефон;
		
		НоваяСтрока.ОператорПоПриемуПлатежейТелефон	= ПозицияЧека.ДанныеАгента.ОператорПоПриемуПлатежей.Телефон;
		
		НоваяСтрока.ПлатежныйАгентОперация 			= ПозицияЧека.ДанныеАгента.ПлатежныйАгент.Операция;
		НоваяСтрока.ПлатежныйАгентТелефон 			= ПозицияЧека.ДанныеАгента.ПлатежныйАгент.Телефон;
		
		НоваяСтрока.ДанныеПоставщикаИНН 			= ПозицияЧека.ДанныеПоставщика.ИНН;
		НоваяСтрока.ДанныеПоставщикаНаименование 	= ПозицияЧека.ДанныеПоставщика.Наименование;
		НоваяСтрока.ДанныеПоставщикаТелефон 		= ПозицияЧека.ДанныеПоставщика.Телефон;
		
		НоваяСтрока.НаименованиеПредметаРасчета 	= ПозицияЧека.Номенклатура;
		НоваяСтрока.СуммаСоСкидками 				= ПозицияЧека.Сумма;
		
		Если Не ПустаяСтрока(ПозицияЧека.КодЕдиницыИзмерения) Тогда
			ЕдиницыИзмерения = Справочники.БазовыеЕдиницыИзмерения.НайтиПоКоду(ПозицияЧека.КодЕдиницыИзмерения);
			Если Не ЕдиницыИзмерения = Справочники.БазовыеЕдиницыИзмерения.ПустаяСсылка() Тогда
				НоваяСтрока.ЕдиницаИзмерения = ЕдиницыИзмерения;
			КонецЕсли;
		КонецЕсли;
			
		Если ПозицияЧека.СтавкаНДС = 0 Тогда
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
		ИначеЕсли ПозицияЧека.СтавкаНДС = 10 ИЛИ ПозицияЧека.СтавкаНДС = 110 Тогда
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
		ИначеЕсли ПозицияЧека.СтавкаНДС = 18 ИЛИ ПозицияЧека.СтавкаНДС = 118 Тогда
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		ИначеЕсли ПозицияЧека.СтавкаНДС = 20 ИЛИ ПозицияЧека.СтавкаНДС = 120 Тогда
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		Иначе
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		
		Если НоваяСтрока.СуммаНДС = 0 И ЗначениеЗаполнено(ПозицияЧека.СтавкаНДС) Тогда
			ТекПроцентНДС = ОбработкаТабличнойЧастиТоварыСерверПовтИсп.СтавкаНДСЧислом(НоваяСтрока.СтавкаНДС);
			НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаСоСкидками * ТекПроцентНДС / (ТекПроцентНДС + 1);
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		ЗаполнитьСкладПродажи = Новый Структура;
		ЗаполнитьСкладПродажи.Вставить("Дата", ТекущаяДата());
		ЗаполнитьСкладПродажи.Вставить("Организация", Контекст.Организация);
		ЗаполнитьСкладПродажи.Вставить("Номенклатура", ПозицияЧека.Номенклатура);
		ЗаполнитьСкладПродажи.Вставить("РабочееМесто", Контекст.РабочееМесто);
		ЗаполнитьСкладПродажи.Вставить("Магазин", Контекст.Магазин);
		СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", ЗаполнитьСкладПродажи);
		ПозицияЧека.Вставить("Склад", Неопределено);
		Если ТипЗнч(ПозицияЧека.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСкладПродажиВСтрокеТЧСервер(ПозицияЧека, СтруктураДействий, Неопределено);
		КонецЕсли;
		НоваяСтрока.Склад = ПозицияЧека.Склад;
		//
	КонецЦикла;
	
КонецПроцедуры

Функция ДополнитьТоварамиПараметрыПриПробитииЧека(РеквизитыДокумента, ОбщиеПараметры, ДанныеДляПробитияЧекаККМ, ПризнакСпособаРасчета) Экспорт
	
	ТаблицаЗаполненныхТоваров = Новый Массив;
	
	ТаблицаТоваровЧека  = ДанныеДляПробитияЧекаККМ.ТаблицаТоваровЧека;
	ТаблицаТоваровГосИС = ДанныеДляПробитияЧекаККМ.ТаблицаТоваровГосИС;
	
	ИспользуетсяКомиссионнаяТорговля               = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссионнуюТорговлю");
	ИспользуетсяУчетИмпортныхТоваров               = ПолучитьФункциональнуюОпцию("ИспользоватьУчетИмпортныхТоваров");
	ИспользоватьАгентскиеПлатежиИРазделениеВыручки = ПолучитьФункциональнуюОпцию("ИспользоватьАгентскиеПлатежиИРазделениеВыручки");
	
	ЭтоАванс = ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс
			ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная
			ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная;
	
	Если ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс Тогда
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
		СтрокаПозицииЧека.Вставить("Номенклатура");
		Если ОбщиеПараметры.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств Тогда
			СтрокаПозицииЧека.Номенклатура = НСтр("ru = 'Возврат от:'") + " " + РеквизитыДокумента.Контрагент;
		Иначе
			СтрокаПозицииЧека.Номенклатура = НСтр("ru = 'Оплата от:'") + " " + РеквизитыДокумента.Контрагент;
		КонецЕсли;
		СтрокаПозицииЧека.Количество     = 1;
		СтрокаПозицииЧека.Цена           = РеквизитыДокумента.СуммаДокумента;
		СтрокаПозицииЧека.ЦенаСоСкидками = РеквизитыДокумента.СуммаДокумента;
		СтрокаПозицииЧека.Сумма          = РеквизитыДокумента.СуммаДокумента;
		СтрокаПозицииЧека.НомерСекции    = 2;
		Если ОбщиеПараметры.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ОСН Тогда
			
			Если РеквизитыДокумента.Дата > УчетНДС.ДатаПереходногоПериода() Тогда
				Если РеквизитыДокумента.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда 
					ЧекПродажи = РеквизитыДокумента.ЧекККМПродажа;
					Если ЗначениеЗаполнено(ЧекПродажи) И ЧекПродажи.Дата < УчетНДС.ДатаПереходногоПериода() Тогда  //Возврат аванса за 2018 год.
						СтрокаПозицииЧека.СтавкаНДС = 118;
					Иначе 
						СтрокаПозицииЧека.СтавкаНДС = 120;
					КонецЕсли;
				Иначе 
					СтрокаПозицииЧека.СтавкаНДС = 120;
				КонецЕсли;
			Иначе 
				СтрокаПозицииЧека.СтавкаНДС = 118;
			КонецЕсли;
			
		Иначе
			СтрокаПозицииЧека.СтавкаНДС      = Неопределено;
		КонецЕсли;
		СтрокаПозицииЧека.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
		СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата;
		
		ПодключаемоеОборудованиеРТ.ЗаполнитьПараметрыПлатежногоДоговораВСтроке(ОбщиеПараметры, СтрокаПозицииЧека);
		
		ТаблицаЗаполненныхТоваров.Добавить(СтрокаПозицииЧека);
		
	Иначе
		КэшСНО = Новый Соответствие;
		Для Каждого СтрокаТЧ Из ТаблицаТоваровЧека Цикл
			
			СтрокаТаблицыТоваров = Новый СписокЗначений();
			НаименованиеТовара = Строка(СтрокаТЧ.Номенклатура) + ?(ЗначениеЗаполнено(СтрокаТЧ.Характеристика), " (" + Строка(СтрокаТЧ.Характеристика) + ")", "");
			
			МассивСтрокГосИС = ТаблицаТоваровГосИС.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТЧ.КлючСвязи));
			
			СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
			СтрокаПозицииЧека.Вставить("Номенклатура",   СтрокаТЧ.Номенклатура);
			СтрокаПозицииЧека.Вставить("Характеристика", СтрокаТЧ.Характеристика);
			СтрокаПозицииЧека.Вставить("Упаковка",       СтрокаТЧ.Упаковка);
			СтрокаПозицииЧека.Наименование 	=  НаименованиеТовара;
			СтрокаПозицииЧека.Количество 	= ?(СтрокаТЧ.КоличествоУпаковок = 0, 1, СтрокаТЧ.КоличествоУпаковок);
			СтрокаПозицииЧека.Цена 			= ?(СтрокаТЧ.Цена = 0, СтрокаТЧ.Сумма, СтрокаТЧ.Цена);
			СтрокаПозицииЧека.Сумма 		= СтрокаТЧ.Сумма;
			СтрокаПозицииЧека.СуммаСкидок 	= СтрокаТЧ.СуммаАвтоматическойСкидки
														+ СтрокаТЧ.СуммаРучнойСкидки
														+ СтрокаТЧ.СуммаСкидкиОплатыБонусом;
			
			Если Окр(СтрокаПозицииЧека.Цена * СтрокаПозицииЧека.Количество, 2, 1) = СтрокаПозицииЧека.Сумма Тогда
				СтрокаПозицииЧека.ЦенаСоСкидками = СтрокаПозицииЧека.Цена;
			Иначе
				СтрокаПозицииЧека.ЦенаСоСкидками = Окр(СтрокаПозицииЧека.Сумма / СтрокаПозицииЧека.Количество, 2, 1);
			КонецЕсли;  
			
			СтрокаПозицииЧека.СуммаНДС = СтрокаТЧ.СуммаНДС;           
			
			Если ЗначениеЗаполнено(СтрокаТЧ.ЕдиницаИзмерения) Тогда
				СтрокаПозицииЧека.КодЕдиницыИзмерения = Строка(СтрокаТЧ.ЕдиницаИзмерения.Код);
			КонецЕсли;
			
			ПодключаемоеОборудованиеРТ.ЗаполнитьПараметрыПлатежногоДоговораВСтроке(ОбщиеПараметры, СтрокаПозицииЧека);
			
			НуженПересчетСуммыНДС = Истина;
			ДатаКорректировкиСтавкиНДС = РеквизитыДокумента.Дата;
			Если РеквизитыДокумента.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда 
				ЧекПродажи = РеквизитыДокумента.ЧекККМПродажа;
				Если ЗначениеЗаполнено(ЧекПродажи) И ЧекПродажи.Дата < УчетНДС.ДатаПереходногоПериода() Тогда  //Возврат товара за 2018 год.
					ДатаКорректировкиСтавкиНДС = ЧекПродажи.Дата;
					НуженПересчетСуммыНДС = Ложь;
				КонецЕсли;
			КонецЕсли;
			СтрокаТЧ.СтавкаНДС = УчетНДС.СкорректироватьСтавкуНДС(СтрокаТЧ.СтавкаНДС, ДатаКорректировкиСтавкиНДС);
			
			Если СтрокаТЧ.ЭтоПодарочныйСертификат Тогда
				СтрокаПозицииЧека.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс;
				ЭтоАванс = Истина;
				СтрокаПозицииЧека.СтавкаНДС = ПодключаемоеОборудованиеРТ.СтавкаНДСВФорматеБПО(СтрокаТЧ.СтавкаНДС, ЭтоАванс);
			Иначе
				СтрокаПозицииЧека.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
				СтрокаПозицииЧека.СтавкаНДС = ПодключаемоеОборудованиеРТ.СтавкаНДСВФорматеБПО(СтрокаТЧ.СтавкаНДС, ЭтоАванс);
			КонецЕсли;
			
			Если НуженПересчетСуммыНДС Тогда
				Если СтрокаТЧ.НДСПоСтрочно Тогда
					ТекПроцентНДС = ОбработкаТабличнойЧастиТоварыСерверПовтИсп.СтавкаНДСЧислом(СтрокаТЧ.СтавкаНДС);
					СтрокаПозицииЧека.СуммаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаНДСПоСтрочно(СтрокаПозицииЧека.Сумма, СтрокаТЧ.КоличествоУпаковок, ТекПроцентНДС);
				Иначе
					СтрокаПозицииЧека.СуммаНДС = Окр(ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаНДС(СтрокаПозицииЧека.Сумма, СтрокаТЧ.СтавкаНДС), 2);
				КонецЕсли;
			КонецЕсли;
			
			Если ИспользуетсяКомиссионнаяТорговля Тогда
				Если СтрокаТЧ.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга Тогда
					Если ЗначениеЗаполнено(СтрокаТЧ.Договор) Тогда
						Если СтрокаТЧ.Договор.ПризнакАгента = Перечисления.ПризнакиАгента.Комиссионер Тогда
								СтрокаПозицииЧека.ПризнакАгентаПоПредметуРасчета = Перечисления.ПризнакиАгента.Комиссионер;
								СтрокаПозицииЧека.ДанныеАгента.ПлатежныйАгент.Телефон = СтрокаТЧ.Договор.ТелефонПоставщика;
								СтрокаПозицииЧека.ДанныеПоставщика.ИНН                = СтрокаТЧ.Договор.ИННПоставщикаУслуг;
								СтрокаПозицииЧека.ДанныеПоставщика.Телефон            = СтрокаТЧ.Договор.ТелефонПоставщика;
								СтрокаПозицииЧека.ДанныеПоставщика.Наименование       = СтрокаТЧ.Поставщик.Наименование; 
								
								УчетНДСУКомитента = ПодключаемоеОборудованиеРТ.КэшируемыеСНО(СтрокаТЧ.Договор, КэшСНО);
								ПодключаемоеОборудованиеРТ.ПерезаполнитьНДСКомитента(СтрокаПозицииЧека, 
																					 СтрокаТЧ.Номенклатура, 
																					 УчетНДСУКомитента, 
																					 ЭтоАванс);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ИспользуетсяУчетИмпортныхТоваров Тогда
				СтрокаПозицииЧека.КодСтраныПроисхожденияТовара = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.НомерГТД.СтранаПроисхождения, "Код");
				СтрокаПозицииЧека.НомерТаможеннойДекларации    = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.НомерГТД, "РегистрационныйНомерДекларации")
			КонецЕсли;
			
			СтрокаПозицииЧека.ЕдиницаИзмерения = СтрокаТЧ.ЕдиницаИзмеренияПредметаРасчета;
			СтрокаПозицииЧека.НомерСтрокиТовара = СтрокаТЧ.НомерСтроки;
			
			СтрокаПозицииЧека.КодВидаНоменклатурнойКлассификации = СтрокаТЧ.КодВидаНоменклатурнойКлассификации;
			
			Если РеквизитыДокумента.ОперацияСДенежнымиСредствами Тогда
				СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата;
			Иначе
				СтрокаПозицииЧека.ПризнакПредметаРасчета = СтрокаТЧ.ПризнакПредметаРасчета;
				
				Если СтрокаТЧ.АлкогольнаяПродукция И СтрокаПозицииЧека.Количество > 1 Тогда
					ДанныеМаркировки = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара(СтрокаТЧ.Штрихкод);
					Если ДанныеМаркировки.Разобран Тогда
						СтрокаПозицииЧека.Штрихкод = ДанныеМаркировки.EAN;
					КонецЕсли;
				Иначе
					СтрокаПозицииЧека.Штрихкод = СтрокаТЧ.Штрихкод;
				КонецЕсли;
				
				ЗаполнитьСтрокуПоДаннымРазбораШтрихкода(СтрокаПозицииЧека, СтрокаТЧ);
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЧ, "РезультатРаспределенияШтрихкодов")
					И ЗначениеЗаполнено(СтрокаТЧ.РезультатРаспределенияШтрихкодов) Тогда
					
					ПолныйКодМаркировки = СтрокаТЧ.РезультатРаспределенияШтрихкодов.ПолныйКодМаркировки;
					Если ЗначениеЗаполнено(ПолныйКодМаркировки) Тогда
						СтрокаПозицииЧека.ШтрихкодBase64 = ПолныйКодМаркировки;
						СтрокаПозицииЧека.КонтрольнаяМарка = ПолныйКодМаркировки;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			НеобходимоРазбитьСтроку = СтрокаТЧ.ПродукцияГИСМ;
				
			Если НеобходимоРазбитьСтроку Тогда
				// Распределение средствами ГОСИС не выполнено.
				МассивРазвернутыхСтрок = РазвернутьСтрокуПозицииЧека(СтрокаПозицииЧека, МассивСтрокГосИС);
				
				Для Каждого СтрокаМассива Из МассивРазвернутыхСтрок Цикл
					ТаблицаЗаполненныхТоваров.Добавить(СтрокаМассива);
				КонецЦикла;
			Иначе
				ТаблицаЗаполненныхТоваров.Добавить(СтрокаПозицииЧека);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаЗаполненныхТоваров;
	
КонецФункции

Процедура ЗаполнитьСтрокуПоДаннымРазбораШтрихкода(СтрокаПозицииЧека, СтрокаДляДобавленияВЧек)
	
	Если НЕ (СтрокаДляДобавленияВЧек.ПродукцияИСМП И ЗначениеЗаполнено(СтрокаПозицииЧека.Штрихкод)) Тогда
		Возврат;
	КонецЕсли;
	
	ТипМаркировкиККТ = ИнтеграцияИСКлиентСервер.ТипМаркировкиККТПоВидуПродукции(СтрокаДляДобавленияВЧек.ВидПродукцииИС);
	Если Не ЗначениеЗаполнено(ТипМаркировкиККТ) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(СтрокаПозицииЧека.Штрихкод, СтрокаДляДобавленияВЧек.ВидПродукцииИС);
	Если ДанныеРазбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ТипМаркировки                          = ТипМаркировкиККТ;
	СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы = ДанныеРазбора.СоставКодаМаркировки.GTIN;
	СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.СерийныйНомер                          = ДанныеРазбора.СоставКодаМаркировки.СерийныйНомер;
	
КонецПроцедуры

Функция РазвернутьСтрокуПозицииЧека(СтрокаПозицииЧека, МассивСтрокГосИС = Неопределено)
	
	МассивРезультат = Новый Массив;
	
	Количество = СтрокаПозицииЧека.Количество;
	
	Коэффициенты = Новый Массив(Количество); // Служебный массив для распределения сумм
	
	// Построчное заполнение сведений о маркированной продукции.
	Индекс = 0;
	РазбиратьСтрокуМаркированногоТовара = Ложь;
	МаксимальныйИндексГОСИС = 0;
	
	Если НЕ МассивСтрокГосИС = Неопределено И МассивСтрокГосИС.Количество()>0 Тогда
		РазбиратьСтрокуМаркированногоТовара = Истина;
		МаксимальныйИндексГОСИС = МассивСтрокГосИС.Количество()-1;
	КонецЕсли;
	
	Для Каждого СтрокаКоэффициента Из Коэффициенты Цикл
		
		Коэффициенты[Индекс] = 1;
		
		НоваяСтрокаПозицииЧека = ОбщегоНазначения.СкопироватьРекурсивно(СтрокаПозицииЧека);
		НоваяСтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры = Неопределено;
		
		НоваяСтрокаПозицииЧека.Количество = 1;
		
		Если РазбиратьСтрокуМаркированногоТовара Тогда
			
			Если Индекс > МаксимальныйИндексГОСИС Тогда
				// Для ситуаций, когда разрешены продажи остатков без марки (фото, шины), а товар указан как маркированный.
				МассивРезультат.Добавить(НоваяСтрокаПозицииЧека);
		
				Индекс = Индекс + 1;
				Продолжить;
			КонецЕсли;
			
			ТекущаяСтрока    = МассивСтрокГосИС[Индекс];
			КодАкцизнойМарки = ТекущаяСтрока.КодАкцизнойМарки;
			
			НоваяСтрокаПозицииЧека.Штрихкод = КодАкцизнойМарки;
			ЗаполнитьСтрокуПоДаннымРазбораШтрихкода(НоваяСтрокаПозицииЧека, ТекущаяСтрока)
		КонецЕсли;
	
		МассивРезультат.Добавить(НоваяСтрокаПозицииЧека);
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	// Распределение суммы
	Если СтрокаПозицииЧека.Сумма > 0 Тогда
		РаспределенныеСуммы = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(СтрокаПозицииЧека.Сумма, Коэффициенты);
		
		Индекс = 0;
		
		Для Каждого СтрокаРаспределения Из РаспределенныеСуммы Цикл
			МассивРезультат[Индекс].Сумма = СтрокаРаспределения;
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЕсли;
	
	// Перезаполнение суммы скидок
	Если НЕ СтрокаПозицииЧека.СуммаСкидок = 0 Тогда
		РаспределенныеСуммы = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(СтрокаПозицииЧека.СуммаСкидок, Коэффициенты);
		
		Индекс = 0;
		
		Для Каждого СтрокаРаспределения Из РаспределенныеСуммы Цикл
			МассивРезультат[Индекс].СуммаСкидок = СтрокаРаспределения;
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЕсли;
	
	// Перезаполнение цены, суммы НДС
	Для Каждого СтрокаРезультата Из МассивРезультат Цикл
		
		Если СтрокаРезультата.Цена= СтрокаРезультата.Сумма Тогда
			СтрокаРезультата.ЦенаСоСкидками = СтрокаРезультата.Цена;
		Иначе
			СтрокаРезультата.ЦенаСоСкидками = СтрокаРезультата.Сумма;
		КонецЕсли;
		
		СтрокаРезультата.СуммаНДС = СтрокаРезультата.СуммаНДС / Количество;
	КонецЦикла;
	
	Возврат МассивРезультат;
КонецФункции

Функция ДанныеПоВозвратуПокупателя(ДокументСсылка, ОбщиеПараметры, ПризнакСпособаРасчета, ЭтоВыплата = Истина) Экспорт
	
	ИспользуетсяКомиссионнаяТорговля = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссионнуюТорговлю");
	ИспользуетсяУчетИмпортныхТоваров = ПолучитьФункциональнуюОпцию("ИспользоватьУчетИмпортныхТоваров");
	ВестиУчетМаркируемойПродукцииИСМП   = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП");
	ВестиУчетМаркируемойПродукцииИСМП   = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП");
	
	ТаблицаТоваров = Новый Массив;
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	
	Запрос = Новый Запрос;
	
	ИспользуютсяРегистрОстатков = Ложь;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(Товары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)        КАК Поставщик,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка) КАК НомерГТД,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВЫРАЗИТЬ(Товары.Упаковка КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка,
	|	Товары.Цена КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	&СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ
	|	Товары.НомерСтроки         КАК НомерСтрокиТовара,
	|	Товары.Номенклатура        КАК Номенклатура,
	|	Товары.Характеристика      КАК Характеристика,
	|	Товары.Упаковка            КАК Упаковка,
	|	Товары.Поставщик       КАК Поставщик,
	|	Товары.Договор         КАК Договор,
	|	Товары.НомерГТД        КАК НомерГТД,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	Товары.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА Товары.КоличествоУпаковок = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(Товары.Сумма / Товары.КоличествоУпаковок КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК ЦенаСоСкидками,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Наименование
	|		ИНАЧЕ Товары.Упаковка.Наименование
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	Товары.Номенклатура.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Товары.СуммаАвтоматическойСкидки + Товары.СуммаРучнойСкидки + Товары.СуммаСкидкиОплатыБонусом КАК СуммаСкидок,
	|	Товары.Номенклатура.ВидНоменклатуры.ПризнакПредметаРасчета.ТипПризнакаПредметаРасчета КАК ПризнакПредметаРасчета,
	|	Товары.Номенклатура.Наименование КАК ТоварНаименование
	|ИЗ
	|	Товары КАК Товары";
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СуммаСкидкиОплатыБонусом", "Товары.СуммаСкидкиОплатыБонусом");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаТоваровСуммаСкидкиОплатыБонусом", "ТаблицаТоваров.СуммаСкидкиОплатыБонусом");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СуммаСкидкиОплатыБонусом", "0");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаТоваровСуммаСкидкиОплатыБонусом", "0");
	КонецЕсли;
	
	ТаблицаТовары = ДокументСсылка.Товары.Выгрузить();
	Если ТаблицаТовары.Колонки.Найти("СуммаАвтоматическойСкидки") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,",
		"0 КАК СуммаАвтоматическойСкидки,");
	КонецЕсли;
	
	Если ТаблицаТовары.Колонки.Найти("СуммаРучнойСкидки") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,",
		"0 КАК СуммаРучнойСкидки,");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Товары", ТаблицаТовары);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	НомерСтроки = 0;
	
	КэшСНО = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
		ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека, Выборка);
		СтрокаПозицииЧека.НомерСекции = 2;
		СтрокаПозицииЧека.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
		НомерСтроки = НомерСтроки + 1;
		СтрокаПозицииЧека.НомерСтрокиТовара = НомерСтроки;
		
		Если ЭтоВыплата Тогда
			СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата;
		КонецЕсли;
		
		СуммаДокументовРасчетов = Выборка.Сумма;
		
		СтрокаПозицииЧека.Вставить("Номенклатура",   Выборка.Номенклатура);
		СтрокаПозицииЧека.Вставить("Характеристика", Выборка.Характеристика);
		СтрокаПозицииЧека.Вставить("Упаковка",       Выборка.Упаковка);
		СтрокаПозицииЧека.Наименование = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
		Выборка.ТоварНаименование,
		Выборка.Характеристика);
		
		Если ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс
			ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная
			ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная Тогда
			ЭтоАванс = Истина;
		Иначе
			ЭтоАванс = Ложь;
		КонецЕсли;
		
		СтрокаПозицииЧека.СтавкаНДС = ПодключаемоеОборудованиеРТ.СтавкаНДСВФорматеБПО(Выборка.СтавкаНДС, ЭтоАванс);
		
		ПодключаемоеОборудованиеРТ.ЗаполнитьПараметрыПлатежногоДоговораВСтроке(ОбщиеПараметры, СтрокаПозицииЧека);
		
		Если ИспользуетсяКомиссионнаяТорговля Тогда
			Если Выборка.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга Тогда
				Если ЗначениеЗаполнено(Выборка.Договор) Тогда
					Если Выборка.Договор.ПризнакАгента = Перечисления.ПризнакиАгента.Комиссионер Тогда
						СтрокаПозицииЧека.ПризнакАгентаПоПредметуРасчета      = Перечисления.ПризнакиАгента.Комиссионер;
						СтрокаПозицииЧека.ДанныеАгента.ПлатежныйАгент.Телефон = Выборка.Договор.ТелефонПоставщика;
						СтрокаПозицииЧека.ДанныеПоставщика.ИНН                = Выборка.Договор.ИННПоставщикаУслуг;
						СтрокаПозицииЧека.ДанныеПоставщика.Телефон            = Выборка.Договор.ТелефонПоставщика;
						СтрокаПозицииЧека.ДанныеПоставщика.Наименование       = Выборка.Поставщик.Наименование; 
						
						УчетНДСУКомитента = ПодключаемоеОборудованиеРТ.КэшируемыеСНО(Выборка.Договор, КэшСНО);
						ПодключаемоеОборудованиеРТ.ПерезаполнитьНДСКомитента(СтрокаПозицииЧека,
						Выборка.Номенклатура,
						УчетНДСУКомитента,
						ЭтоАванс);
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользуетсяУчетИмпортныхТоваров Тогда
			СтрокаПозицииЧека.КодСтраныПроисхожденияТовара = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.НомерГТД.СтранаПроисхождения, "Код");
			СтрокаПозицииЧека.НомерТаможеннойДекларации    = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.НомерГТД, "Код");
		КонецЕсли;
		
		ТаблицаТоваров.Добавить(СтрокаПозицииЧека);
	КонецЦикла;
	
	Возврат ТаблицаТоваров;
	
КонецФункции

#КонецОбласти

#КонецЕсли