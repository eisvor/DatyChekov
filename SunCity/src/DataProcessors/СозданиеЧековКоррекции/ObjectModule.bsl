#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет чек коррекции на основании.
//
// Параметры:
//  Основание - ДокументСсылка - документ основание для создания чека коррекции.
//  Отказ - Булево - признак отказа от выполнения операции.
//
Процедура ЗаполнитьНаОсновании(Основание, Отказ) Экспорт
		
	ФискальнаяОперация = ДанныеФискальнойОперации(Основание);
	
	Если ФискальнаяОперация = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Нет сохраненной фискальной операции для документа %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОснование);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
		Отказ = Истина;
		Возврат;
		
	ИначеЕсли ФискальнаяОперация.ЕстьКорректирующийДокумент Тогда
		
		ТекстСообщения = НСтр("ru = 'По данному документу ранее была создана корректировка документом %1. 
		|Создание повторной корректировки не возможно.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
		ФискальнаяОперация.ПредставлениеКорректирующегоДокумента);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
		Отказ = Истина;
		Возврат;
		
	Иначе
		
		Если Основание <> ФискальнаяОперация.ДокументОснование Тогда
			
			ТекстСообщения = НСтр("ru = 'Данные заполнены из документа %1, т.к. он является последним корректирующим документом для документа расчетов %2.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
			ФискальнаяОперация.ДокументОснование, 
			ФискальнаяОперация.ДокументРасчетов);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ФискальнаяОперация);
	
	Дата							= ТекущаяДатаСеанса();
	Ответственный 					= Пользователи.ТекущийПользователь();
	ДатаКоррекции 					= ФискальнаяОперация.ДатаРасчета;
	ДополнительныйРеквизит 			= ФискальнаяОперация.ФискальныйПризнак;
	ДанныеXMLКорректируемогоЧека	= ФискальнаяОперация.ДанныеXML.Получить();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		КассаККМ = Справочники.КассыККМ.КассаПоУмолчанию(Организация, Магазин);
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЧекККМ") Тогда
		ЗаказПокупателя = Основание.ЗаказПокупателя;
		ВидОперации = Основание.ВидОперации;
		ОперацияСДенежнымиСредствами = Основание.ОперацияСДенежнымиСредствами;
		ДисконтнаяКарта = Основание.ДисконтнаяКарта;
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РегистрацияБезналичнойОплаты") 
		ИЛИ ТипЗнч(ФискальнаяОперация.ДокументОснование) = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой") Тогда
		Если Основание.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
			ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
		ИначеЕсли Основание.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
			ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;
		КонецЕсли;
		ЗаказПокупателя = Неопределено;
		ОперацияСДенежнымиСредствами = Ложь;
		ДисконтнаяКарта = Неопределено;
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		ЗаказПокупателя = Неопределено;
		ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
		ОперацияСДенежнымиСредствами = Ложь;
		ДисконтнаяКарта = Основание.ДисконтнаяКарта;
	Иначе
		ЗаказПокупателя = Неопределено;
		ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;
		ОперацияСДенежнымиСредствами = Ложь;
		ДисконтнаяКарта = Неопределено;
	КонецЕсли;
	
	ОбщиеПараметры = МенеджерОборудованияВызовСервера.ЗагрузитьДанныеФискализацииИзXML(ДанныеXMLКорректируемогоЧека);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОбщиеПараметры, "СистемаНалогообложения,
	|ТипРасчета,
	|Кассир,
	|КассирИНН");
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЧекКоррекции") Тогда
		Контрагент = Основание.Покупатель;
		КонтрагентИНН = Основание.ПокупательИНН;
	Иначе
		Контрагент = Основание.Контрагент;
		КонтрагентИНН = Основание.Контрагент.ИНН;
	КонецЕсли;
			
	СНОКорректируемогоДокумента = ОбщиеПараметры.СистемаНалогообложения;
	ПризнакАгента 				= ОбщиеПараметры.ПризнакАгента;
	
	Если ТипЗнч(ФискальнаяОперация.ДокументОснование) = Тип("ДокументСсылка.ЧекККМ") Тогда
		
		ДанныеДляПробитияЧекаККМ = ПродажиСервер.ДанныеДляПробитияЧекаККМ(ФискальнаяОперация.ДокументРасчетов);
		
		ТаблицаЗаполненныхТоваров = Обработки.СозданиеЧековКоррекции.ДополнитьТоварамиПараметрыПриПробитииЧека(ФискальнаяОперация.ДокументРасчетов,
																				ОбщиеПараметры,
																				ДанныеДляПробитияЧекаККМ,
																				Документы.ЧекККМ.ПризнакСпособаРасчета(Основание));
													
	// Позиции чека
		
		ЗаполнитьПозицииЧекаПоОснованию(ТаблицаЗаполненныхТоваров);
	ИначеЕсли ТипЗнч(ФискальнаяОперация.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда 
		
		ТаблицаЗаполненныхТоваров = Обработки.СозданиеЧековКоррекции.ДанныеПоВозвратуПокупателя(ФискальнаяОперация.ДокументРасчетов,
																				ОбщиеПараметры,
																				Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты);
		ЗаполнитьПозицииЧекаПоОснованию(ТаблицаЗаполненныхТоваров);
	ИначеЕсли ТипЗнч(ФискальнаяОперация.ДокументОснование) = Тип("ДокументСсылка.РегистрацияБезналичнойОплаты") 
		ИЛИ ТипЗнч(ФискальнаяОперация.ДокументОснование) = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой") Тогда
		ДокументОснование = ФискальнаяОперация.ДокументОснование;
		НоваяСтрока = ПозицииЧека.Добавить();
		НоваяСтрока.НаименованиеПредметаРасчета = "Поступление оплаты от клиента";
		НоваяСтрока.СуммаСоСкидками = Основание.СуммаДокумента;
		НоваяСтрока.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты;
		НоваяСтрока.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Платеж;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		НоваяСтрока.ЦенаСоСкидками = Основание.СуммаДокумента;
	ИначеЕсли ТипЗнч(ФискальнаяОперация.ДокументОснование) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") 
		ИЛИ ТипЗнч(ФискальнаяОперация.ДокументОснование) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		ДокументОснование = ФискальнаяОперация.ДокументОснование;
		НоваяСтрока = ПозицииЧека.Добавить();
		НоваяСтрока.НаименованиеПредметаРасчета = "Поступление оплаты от клиента";
		НоваяСтрока.СуммаСоСкидками = Основание.СуммаДокумента;
		НоваяСтрока.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты;
		НоваяСтрока.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Платеж;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		НоваяСтрока.ЦенаСоСкидками = Основание.СуммаДокумента;
	Иначе
		ДокументОснование = ФискальнаяОперация.ДокументОснование;
		Для Каждого ПозицияЧека Из ДокументОснование.ПозицииЧека Цикл
			
			НоваяСтрока = ПозицииЧека.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПозицияЧека); 
			
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыРегистрацииКассыОснования = МенеджерОборудованияВызовСервера.ПолучитьПараметрыРегистрацииУстройства(ФискальнаяОперация.ДокументОснование.КассаККМ.ПодключаемоеОборудование);
	ИспользуетсяФФД105 = Истина;
	Если ПараметрыРегистрацииКассыОснования.ВерсияФФДККТ = "1.1" Тогда
		ИспользуетсяФФД105 = Ложь;
	КонецЕсли;
	
	// Оплаты
	Для Каждого СтрокаОплаты Из ОбщиеПараметры.ТаблицаОплат Цикл
		
		НоваяСтрока = Оплата.Добавить();
		Если ИспользуетсяФФД105 Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплаты,, "ТипОплаты");
			НоваяСтрока.ТипОплаты = Перечисления.ТипыОплатыККТ.ВстречноеПредоставление;
		Иначе
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплаты);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
		
		Если НачалоДня(Дата) <> НачалоДня(ТекущаяДатаСеанса()) Тогда
			ТекстОшибки = НСтр("ru = 'Не допускается коррекция датой, отличной от текущей'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "Дата",, Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КассаККМ)  Тогда
			
			СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ);
			
			КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
			
			ТекстОшибки = НСтр("ru = 'Кассовая смена не открыта'");
			Если НЕ РозничныеПродажиСервер.СменаОткрыта(КассоваяСмена, Дата, ТекстОшибки) Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "КассаККМ",, Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Оплата.Итог("Сумма") < ПозицииЧека.Итог("СуммаСоСкидками") Тогда
			ТекстОшибки = НСтр("ru = 'Сумма оплат меньше итоговой суммы по позициям чека'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "Оплата",, Отказ);
		КонецЕсли;
		
	КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеФискальнойОперации(Основание)
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЧекКоррекции") Тогда
			
			РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "НеприменениеККТ, ДокументРасчетов");
			
			Если РеквизитыОснования.НеприменениеККТ Тогда
				ДокументРасчетов = Основание;
			Иначе
				ДокументРасчетов = РеквизитыОснования.ДокументРасчетов;
			КонецЕсли;
			
		Иначе
			
			ДокументРасчетов = Основание;
			
		КонецЕсли;
		
		// Последняя фискальная операция по документу расчетов и дата расчетов
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФискальныеОперации.Дата КАК Дата,
		|	ФискальныеОперации.ДокументОснование КАК ДокументОснование,
		|	ФискальныеОперации.ФискальныйПризнак КАК ФискальныйПризнак,
		|	ФискальныеОперации.ТипРасчета КАК ТипРасчета,
		|	ФискальныеОперации.ДанныеXML КАК ДанныеXML
		|ПОМЕСТИТЬ ВТ_ФискальныеДанныеПоДокументуРасчетов
		|ИЗ
		|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
		|ГДЕ
		|	ФискальныеОперации.ДокументОснование = &ДокументРасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ФискальныеДанныеПоДокументуРасчетов.Дата КАК Дата,
		|	ВТ_ФискальныеДанныеПодокументуРасчетов.ДокументОснование КАК ДокументОснование,
		|	NULL КАК КорректируемыйДокумент,
		|	ВТ_ФискальныеДанныеПодокументуРасчетов.ФискальныйПризнак КАК ФискальныйПризнак,
		|	NULL КАК ДополнительныйРеквизит,
		|	ВТ_ФискальныеДанныеПодокументуРасчетов.ТипРасчета КАК ТипРасчета,
		|	ВТ_ФискальныеДанныеПодокументуРасчетов.ДанныеXML КАК ДанныеXML
		|ПОМЕСТИТЬ ВТ_ФискальныеОперацииПоДокументуРасчетов
		|ИЗ
		|	ВТ_ФискальныеДанныеПоДокументуРасчетов КАК ВТ_ФискальныеДанныеПодокументуРасчетов
		|ГДЕ
		|	ВТ_ФискальныеДанныеПодокументуРасчетов.ДокументОснование = &ДокументРасчетов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ФискальныеОперации.Дата,
		|	ФискальныеОперации.ДокументОснование,
		|	ФискальныеОперации.КорректируемыйДокумент,
		|	ФискальныеОперации.ФискальныйПризнак,
		|	ФискальныеОперации.ДополнительныйРеквизит,
		|	ФискальныеОперации.ТипРасчета,
		|	ФискальныеОперации.ДанныеXML
		|ИЗ
		|	ВТ_ФискальныеДанныеПоДокументуРасчетов КАК ВТ_ФискальныеДанныеПоДокументуРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекКоррекции КАК ЧекКоррекции
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
		|			ПО ЧекКоррекции.Ссылка = ФискальныеОперации.ДокументОснование
		|		ПО (ЧекКоррекции.ТипРасчета = ВТ_ФискальныеДанныеПоДокументуРасчетов.ТипРасчета)
		|ГДЕ
		|	ЧекКоррекции.Проведен
		|	И ЧекКоррекции.ПробитЧек
		|	И ЧекКоррекции.ДокументРасчетов = &ДокументРасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВТ_ФискальныеОперацииПоДокументуРасчетов.ДокументОснование КАК ДокументОснование,
		|	ВТ_ФискальныеОперацииПоДокументуРасчетов.ФискальныйПризнак КАК ФискальныйПризнак,
		|	ВТ_ФискальныеОперацииПоДокументуРасчетов.ТипРасчета КАК ТипРасчета,
		|	ВТ_ФискальныеОперацииПоДокументуРасчетов.ДанныеXML КАК ДанныеXML,
		|	НЕ СкорректированныеФискальныеОперации.СкорректированныеДокумент ЕСТЬ NULL КАК ЕстьКорректирующийДокумент,
		|	СкорректированныеФискальныеОперации.ПредставлениеКорректирующегоДокумента КАК ПредставлениеКорректирующегоДокумента
		|ИЗ
		|	ВТ_ФискальныеОперацииПоДокументуРасчетов КАК ВТ_ФискальныеОперацииПоДокументуРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СкорректированныеФискальныеОперации КАК СкорректированныеФискальныеОперации
		|		ПО ВТ_ФискальныеОперацииПоДокументуРасчетов.ДокументОснование = СкорректированныеФискальныеОперации.СкорректированныеДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_ФискальныеОперацииПоДокументуРасчетов.Дата УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ФискальныеДанныеПоДокументуРасчетов.Дата КАК ДатаРасчетов
		|ИЗ
		|	ВТ_ФискальныеДанныеПоДокументуРасчетов КАК ВТ_ФискальныеДанныеПоДокументуРасчетов";
		
		Запрос.УстановитьПараметр("ДокументРасчетов", ДокументРасчетов);
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		ВыборкаПоследняяФискальнаяОперация 	= РезультатЗапроса[2].Выбрать();
		ВыборкаДатаРасчетов 				= РезультатЗапроса[3].Выбрать();
		
		Если ВыборкаПоследняяФискальнаяОперация.Следующий() Тогда
			
			ФискальнаяОперация = Новый Структура;
			ФискальнаяОперация.Вставить("ФискальныйПризнак");
			ФискальнаяОперация.Вставить("ДокументОснование");
			ФискальнаяОперация.Вставить("Организация");
			ФискальнаяОперация.Вставить("Магазин");
			ФискальнаяОперация.Вставить("ТипРасчета");
			ФискальнаяОперация.Вставить("ДанныеXML");
			ФискальнаяОперация.Вставить("ЕстьКорректирующийДокумент");
			ФискальнаяОперация.Вставить("ПредставлениеКорректирующегоДокумента");
			
			ЗаполнитьЗначенияСвойств(ФискальнаяОперация, ВыборкаПоследняяФискальнаяОперация);
			
			СтруктураРеквизитов = Новый Структура;
			СтруктураРеквизитов.Вставить("Организация");
			
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Магазин", ФискальнаяОперация.ДокументОснование.Метаданные()) Тогда
				СтруктураРеквизитов.Вставить("Магазин");
			КонецЕсли;
			
			РеквизитыДокументаОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФискальнаяОперация.ДокументОснование,
			СтруктураРеквизитов);
			
			ЗаполнитьЗначенияСвойств(ФискальнаяОперация, РеквизитыДокументаОснования);
			
			ВыборкаДатаРасчетов.Следующий();
			ФискальнаяОперация.Вставить("ДатаРасчета", 		ВыборкаДатаРасчетов.ДатаРасчетов);
			ФискальнаяОперация.Вставить("ДокументРасчетов", ДокументРасчетов);
			
			Возврат ФискальнаяОперация
			
		Иначе
			
			Возврат Неопределено
			
		КонецЕсли;
		
	КонецФункции

Процедура ЗаполнитьПозицииЧекаПоОснованию(Товары)
	
	Для Каждого ПозицияЧека Из Товары Цикл
		
		НоваяСтрока = ПозицииЧека.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПозицияЧека);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПозицияЧека.ДанныеКодаТоварнойНоменклатуры);
		
		НоваяСтрока.ОператорПереводаАдрес 			= ПозицияЧека.ДанныеАгента.ОператорПеревода.Адрес;
		НоваяСтрока.ОператорПереводаИНН 			= ПозицияЧека.ДанныеАгента.ОператорПеревода.ИНН;
		НоваяСтрока.ОператорПереводаНаименование 	= ПозицияЧека.ДанныеАгента.ОператорПеревода.Наименование;
		НоваяСтрока.ОператорПереводаТелефон 		= ПозицияЧека.ДанныеАгента.ОператорПеревода.Телефон;
		
		НоваяСтрока.ОператорПоПриемуПлатежейТелефон	= ПозицияЧека.ДанныеАгента.ОператорПоПриемуПлатежей.Телефон;
		
		НоваяСтрока.ПлатежныйАгентОперация 			= ПозицияЧека.ДанныеАгента.ПлатежныйАгент.Операция;
		НоваяСтрока.ПлатежныйАгентТелефон 			= ПозицияЧека.ДанныеАгента.ПлатежныйАгент.Телефон;
		
		НоваяСтрока.ДанныеПоставщикаИНН 			= ПозицияЧека.ДанныеПоставщика.ИНН;
		НоваяСтрока.ДанныеПоставщикаНаименование 	= ПозицияЧека.ДанныеПоставщика.Наименование;
		НоваяСтрока.ДанныеПоставщикаТелефон 		= ПозицияЧека.ДанныеПоставщика.Телефон;
		
		НоваяСтрока.НаименованиеПредметаРасчета 	= ПозицияЧека.Номенклатура;
		НоваяСтрока.СуммаСоСкидками 				= ПозицияЧека.Сумма;    
		
		Если Не ПустаяСтрока(ПозицияЧека.КодЕдиницыИзмерения) Тогда
			ЕдиницыИзмерения = Справочники.БазовыеЕдиницыИзмерения.НайтиПоКоду(ПозицияЧека.КодЕдиницыИзмерения);
			Если Не ЕдиницыИзмерения = Справочники.БазовыеЕдиницыИзмерения.ПустаяСсылка() Тогда
				НоваяСтрока.ЕдиницаИзмерения = ЕдиницыИзмерения;
			КонецЕсли;
		КонецЕсли;
		 
		Если ПозицияЧека.СтавкаНДС = 0 Тогда
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
		ИначеЕсли ПозицияЧека.СтавкаНДС = 10 ИЛИ ПозицияЧека.СтавкаНДС = 110 Тогда
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
		ИначеЕсли ПозицияЧека.СтавкаНДС = 18 ИЛИ ПозицияЧека.СтавкаНДС = 118 Тогда
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		ИначеЕсли ПозицияЧека.СтавкаНДС = 20 ИЛИ ПозицияЧека.СтавкаНДС = 120 Тогда
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		Иначе
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		
		Если НоваяСтрока.СуммаНДС = 0 И ЗначениеЗаполнено(ПозицияЧека.СтавкаНДС) Тогда
			ТекПроцентНДС = ОбработкаТабличнойЧастиТоварыСерверПовтИсп.СтавкаНДСЧислом(НоваяСтрока.СтавкаНДС);
			НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаСоСкидками * ТекПроцентНДС / (ТекПроцентНДС + 1);
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		ЗаполнитьСкладПродажи = Новый Структура;
		ЗаполнитьСкладПродажи.Вставить("Дата", ТекущаяДата());
		ЗаполнитьСкладПродажи.Вставить("Организация", ЭтотОбъект.Организация);
		ЗаполнитьСкладПродажи.Вставить("Номенклатура", ПозицияЧека.Номенклатура);
		ЗаполнитьСкладПродажи.Вставить("РабочееМесто", ЭтотОбъект.РабочееМесто);
		ЗаполнитьСкладПродажи.Вставить("Магазин", ЭтотОбъект.Магазин);
		СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", ЗаполнитьСкладПродажи);
		ПозицияЧека.Вставить("Склад", Неопределено);
		Если ТипЗнч(ПозицияЧека.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСкладПродажиВСтрокеТЧСервер(ПозицияЧека, СтруктураДействий, Неопределено);
		КонецЕсли;
		НоваяСтрока.Склад = ПозицияЧека.Склад;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли