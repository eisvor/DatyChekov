
#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	//Для генерации транспортных кодов SSCC в Агрегации КМ
	ЗаполнитьЗначениеИнтервалаСерийКодов();
		
	//Настройки мобильного приложения
	Если ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.НастройкиПодключенияМобильноеПриложениеИСМПТК) Тогда
		ЗаполнитьНастройкиПодключения();
	Иначе
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаМобильноеПриложение", "Видимость", Ложь);
	КонецЕсли;
		
	//Проверка заполнения адресов серверов ИС МПТ
	ПроверитьЗначенияАдресовСерверовИУстановитьРежим();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	ОбновитьИнтерфейсПрограммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//ОбновитьПредставлениеСтатусаКриптобиблиотеки();
	ЗаполнитьВерсиюМобильногоПриложения();
	
	УправлениеФормой();
	ЭтаФорма.Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновленМодульКриптографииИСМПТ" Тогда
		//ОбновитьПредставлениеСтатусаКриптобиблиотеки();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеКонстантУчетаМаркировки" Тогда
		ЭтаФорма.Прочитать();	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область КонстантыУчетаТГ

&НаКлиенте
Процедура ВестиУчетМаркируемойОбувиИСМПТПриИзменении(Элемент)
	
	Если Не ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК")
		И Не ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("ВестиУчетМаркируемойОбувиИСМПТК") 
		И ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("ИспользоватьСервис1СМаркировкаИСМПТК") Тогда 
		ТекстВопроса = НСтр("ru = 'При работе с обувной маркируемой продукцией для корректной обработки значений штрихкодов SSCC рекомендуется включить поддержку двойного формата транспортных кодов (см. Дополнительные настройки подсистемы).'") 
							+ Символы.ПС + НСтр("ru = 'Включить эту настройку?'");
		ВключитьПоддержкудвойногоФорматаКодовПослеВопроса = Новый ОписаниеОповещения("ВключитьПоддержкудвойногоФорматаКодовПослеВопроса", ЭтотОбъект);
		ПоказатьВопрос(ВключитьПоддержкудвойногоФорматаКодовПослеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;	
		
	УчетТоварнойГруппыПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетТабачнойПродукцииИСМППриИзменении(Элемент)
	
	УчетТоварнойГруппыПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетМаркируемойМолочкиИСМПТКПриИзменении(Элемент)
	
	УчетТоварнойГруппыПриИзменении(Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетМаркируемогоАлкоголяИСМПТКПриИзменении(Элемент)
	
	УчетТоварнойГруппыПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетМаркируемыхЛекарствИСМПТКПриИзменении(Элемент)
	
	УчетТоварнойГруппыПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетМаркируемогоТекстиляИСМПТКПриИзменении(Элемент)
	
	УчетТоварнойГруппыПриИзменении(Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура УчетТоварнойГруппыПриИзменении(Элемент)

	УстановитьЗначениеКонстантыУчетаТГ(Элемент);
	ВестиУчетМаркируемойПродукцииИСМППриИзмененииНаСервере();
	Оповестить("КонстантыМаркировки_Изменение");
	
КонецПроцедуры
	
#КонецОбласти

#Область Сервис_ИСМПТ

&НаКлиенте
Процедура СрокХраненияИспользованныхКодовМаркировкиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокХраненияВыгруженныхКодовМаркировкиИСМПТКПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическуюОтправкуПолучениеДанныхИСМППриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ГенерацияSSCCКонецИнтервалаПриИзменении(Элемент)
	
	ГенерацияSSCCИнтервалПриИзменении();	
		
КонецПроцедуры

&НаКлиенте
Процедура ГенерацияSSCCНачалоИнтервалаПриИзменении(Элемент)
	
	ГенерацияSSCCИнтервалПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ГенерацияSSCCИнтервалПриИзменении() 
	
	//Перед изменением интервала проверяем, есть ли в РС Уже сгенерированные коды. 
	РегистрЗаполнен = ПроверитьДанныеВШтрихкодыSSCCИСМПТК();
	Если РегистрЗаполнен Тогда
		//Если они есть, изменения интервала могут привести к дублированию или разрывам в последовательности - предупреждаем пользователя об этом.
		ПродолжитьИзменениеИнтервалаСерийныхНомеров = Новый ОписаниеОповещения("ПродолжитьИзменениеИнтервалаСерийныхНомеров", ЭтаФорма);
		ПоказатьВопрос(ПродолжитьИзменениеИнтервалаСерийныхНомеров, НСтр("ru = 'В базе уже выполнялась генерация SSCC, изменение интервала может привести к нарушению последовательности серийных номеров. Продолжить?'"), РежимДиалогаВопрос.ОКОтмена);
	Иначе
		//Если данных нет, изменяем в обычном режиме
		ПроверитьИнтервалГенерацииSSCC();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДанныеПоНоменклатуреВДокументахСУЗИСМПТКПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоОпределениеЛогистическихКодовИСМПТКПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоПроверкаВалидностиКодаИСМПТКПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЭтапыОформленияДокументовИСЦЭДМПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	Оповестить("КонстантыМаркировки_Изменение");
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЭтапыОформленияДокументовИСМПТКПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	Оповестить("КонстантыМаркировки_Изменение");
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоЗаполнениеДополнительнойИнформацииПоКодамИСЦЭДМПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоПроверкаРегистрацииКонтрагентаИСЦЭДМПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПоСкладамИСЦЭДМПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	УправлениеФормой();
	Оповестить("КонстантыМаркировки_Изменение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТКПриИзменении(Элемент)
	
	//Проверка по товарным группам и оповещение о возможных проблемах
	Если Не ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК") 
		И Не ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("ВестиУчетМаркируемойОбувиИСМПТК") Тогда 
		ТекстСообщения = НСтр("ru = 'Важно! Поддержка двойного формата транспортных кодов необходима при работе с обувной продукцией. При текущих настройках учета по товарным группам включение этой опции может привести к заполнению некорректных данных кодов SSCC в документах!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;	
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	Если Не ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК") Тогда
		НаборКонстант.ДобавлятьИдентификаторКодамSSCCПриПечатиИСМПТК = Ложь;
		Подключаемый_ПриИзмененииРеквизита(Элементы.ДобавлятьИдентификаторКодамSSCCПриПечатиИСМПТК, Истина);
	КонецЕсли;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлятьИдентификаторКодамSSCCПриПечатиИСМПТКПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьМППриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	УправлениеФормой();
		
КонецПроцедуры

&НаКлиенте
Процедура НеЗапрашиватьКМТабачнойПродукцииВРозничномКонтуреИСМПТКПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НеЗапрашиватьКМЛекарственнойПродукцииВРозничномКонтуреИСМПТКПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресСервераИСМПТПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресСервераИСМПТСУЗПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСервис1СМаркировкаИСМПТКПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПодробнуюИнформациюПриОбменеССерверомИСЦЭДМПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПодробнуюИнформациюПриОбменеССерверомИСМПТПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
		
КонецПроцедуры

#КонецОбласти

#Область Сервис_ИСЦЭДМ

&НаКлиенте
Процедура ПрофилиДоступаКЭДОНажатие(Элемент)
	
	ОткрытьФорму("РегистрСведений.ПрофилиДоступаИСЦЭДМ.Форма.ФормаСписка", , ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресСервераИСЦЭДМПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиныйДистрибьюторЛСПриИзменении(Элемент)

	Результат = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСервисФармацевтикаИСЦЭДМПриИзменении(Элемент)
		
	Если ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("ИспользоватьСервисФармацевтикаИСЦЭДМ") 
		И ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("ВестиУчетПоСкладамИСЦЭДМ") Тогда 
		ТекстВопроса = НСтр("ru = 'При отключении использования обмена с ИС ЦЭДМ также будет отключена связанная опция учета по складам ИС ЦЭДМ.'") 
							+ Символы.ПС + НСтр("ru = 'Продолжить?'");
		ИспользоватьСервисФармацевтикаИСЦЭДМПриИзмененииПослеВопроса = Новый ОписаниеОповещения("ИспользоватьСервисФармацевтикаИСЦЭДМПриИзмененииПослеВопроса", ЭтотОбъект);
		ПоказатьВопрос(ИспользоватьСервисФармацевтикаИСЦЭДМПриИзмененииПослеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ИзменитьИспользованиеСервисаИСЦЭДМ(Элемент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИспользованиеСервисаИСЦЭДМ(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
	Если НаборКонстант.ИспользоватьСервисФармацевтикаИСЦЭДМ Тогда 
		НаборКонстант.ВестиУчетМаркируемыхЛекарствИСМПТК = Истина;
		Подключаемый_ПриИзмененииРеквизита(Элементы.ВестиУчетМаркируемыхЛекарствИСМПТК, Истина);
		ВестиУчетМаркируемойПродукцииИСМППриИзмененииНаСервере();
	КонецЕсли;
		
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладыИСЦЭДМНажатие(Элемент)
	
	ОткрытьФорму("Справочник.СкладыИСЦЭДМ.ФормаСписка", , ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеСкладовИСЦЭДМНажатие(Элемент)
	
	ОткрытьФорму("РегистрСведений.СоответствиеСкладовИСЦЭДМ.ФормаСписка", , ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьОтправкуПолучениеИСМП(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеОтправкиПолученияИСМП", ЭтотОбъект);
	
	ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеОтправкиПолученияИСМП);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОчисткуПулаКодовМаркировкиИСМП(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеОчисткиПулаКодовМаркировкиИСМП", ЭтотОбъект);
	
	ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеОчисткиПулаКодовИСМП);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПодключенияКСУЗ(Команда)
	
	ОткрытьФорму("РегистрСведений.НастройкиОбменаСУЗИСМПТК.ФормаСписка", , ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКНастройкеШаблоновПечати(Команда)
	
	ОткрытьФорму("Справочник.ХранилищеШаблоновИСМПТК.ФормаСписка", , ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокСУЗ(Команда)
	
	ОткрытьФорму("Справочник.СтанцииУправленияЗаказамиИСМПТК.ФормаСписка", , ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ИзменитьРасписаниеОтправкиПолученияИСМП(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеОтправкиПолученияИСМП = РасписаниеЗадания;
	
	ИзменитьРасписаниеЗадания("ОтправкаПолучениеДанныхСУЗИСМПТК", РасписаниеОтправкиПолученияИСМП);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеОчисткиПулаКодовМаркировкиИСМП(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеОчисткиПулаКодовИСМП = РасписаниеЗадания;
	
	ИзменитьРасписаниеЗадания("ОчисткаПулаКодовМаркировкиИСМПТК", РасписаниеОчисткиПулаКодовИСМП);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьИспользованиеЗадания(ИмяЗадания, Использование)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
	РегЗадание = ОбщегоНазначенияИСМПТКПереопределяемый.НайтиЗадания(ПараметрыОтбора)[0];

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Истина И Использование);
	ОбщегоНазначенияИСМПТКПереопределяемый.ИзменитьЗадание(РегЗадание.УникальныйИдентификатор, ПараметрыЗадания);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
	РегЗадание = ОбщегоНазначенияИСМПТКПереопределяемый.НайтиЗадания(ПараметрыОтбора)[0];
	
	Элемент = Элементы[ИмяЗадания];
	УстановитьТекстНадписиРегламентнойНастройки(РегЗадание, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРасписаниеЗадания(ИмяЗадания, РасписаниеРегламентногоЗадания)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
	РегЗадание = ОбщегоНазначенияИСМПТКПереопределяемый.НайтиЗадания(ПараметрыОтбора)[0];

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Расписание", РасписаниеРегламентногоЗадания);
	ОбщегоНазначенияИСМПТКПереопределяемый.ИзменитьЗадание(РегЗадание.УникальныйИдентификатор, ПараметрыЗадания);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
	РегЗадание = ОбщегоНазначенияИСМПТКПереопределяемый.НайтиЗадания(ПараметрыОтбора)[0];
	
	Элемент = Элементы[ИмяЗадания];
	УстановитьТекстНадписиРегламентнойНастройки(РегЗадание, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеРегламентногоЗадания)
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиЗаданий()
	
	УстановитьПривилегированныйРежим(Истина);
	
	//Обновление статусов СУЗ
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", "ОтправкаПолучениеДанныхСУЗИСМПТК");
	ЗаданиеОтправкаПолучениеДанныхИСМПТК = ОбщегоНазначенияИСМПТКПереопределяемый.НайтиЗадания(ПараметрыОтбора)[0];
	
	РасписаниеОтправкиПолученияИСМП = ЗаданиеОтправкаПолучениеДанныхИСМПТК.Расписание;
	
	Элементы.ОтправкаПолучениеДанныхСУЗИСМПТК.Доступность = ЗаданиеОтправкаПолучениеДанныхИСМПТК.Использование;
	УстановитьТекстНадписиРегламентнойНастройки(ЗаданиеОтправкаПолучениеДанныхИСМПТК, Элементы.ОтправкаПолучениеДанныхСУЗИСМПТК);
	//////
	
	//Очистка Пула
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", "ОчисткаПулаКодовМаркировкиИСМПТК");
	ЗаданиеОчисткаПулаКодовМаркировкиИСМПТК = ОбщегоНазначенияИСМПТКПереопределяемый.НайтиЗадания(ПараметрыОтбора)[0];
	
	РасписаниеОчисткиПулаКодовИСМП = ЗаданиеОчисткаПулаКодовМаркировкиИСМПТК.Расписание;
	
	Элементы.ОчисткаПулаКодовМаркировкиИСМПТК.Доступность = ЗаданиеОчисткаПулаКодовМаркировкиИСМПТК.Использование;
	УстановитьТекстНадписиРегламентнойНастройки(ЗаданиеОчисткаПулаКодовМаркировкиИСМПТК, Элементы.ОчисткаПулаКодовМаркировкиИСМПТК);
	//////
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьТекстНадписиРегламентнойНастройки(Задание, Элемент)
	
	Перем ТекстРасписания, РасписаниеАктивно;
	
	ИнтеграцияИСМПТК.ПолучитьТекстЗаголовкаИРасписанияРегламентнойНастройки(Задание, ТекстРасписания, РасписаниеАктивно);
	Элемент.Заголовок = ТекстРасписания;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	Результат = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если ОбновлятьИнтерфейс Тогда
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
		ОбновитьИнтерфейс = Истина;
	КонецЕсли;
	
	Если Результат <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	Результат = Новый Структура;

	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат);
	УправлениеФормой(РеквизитПутьКДанным);
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка возможности изменения значения константы.
	Если НЕ СобытияФормИСМПТКПереопределяемый.ПроверитьВозможностьИзменения(РеквизитПутьКДанным, ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
		СобытияФормИСМПТКПереопределяемый.ОбновитьФормуНастройкиПриЗаписиПодчиненныхКонстант(ЭтотОбъект, КонстантаИмя, КонстантаЗначение);
		
	КонецЕсли;
		
	ИспользуетсяОчистаКодов = НаборКонстант.СрокХраненияИспользованныхКодовМаркировкиИСМПТК + НаборКонстант.СрокХраненияВыгруженныхКодовМаркировкиИСМПТК;
	
	Если КонстантаИмя = "СрокХраненияИспользованныхКодовМаркировкиИСМПТК" Тогда
		ИзменитьИспользованиеЗадания("ОчисткаПулаКодовМаркировкиИСМПТК", ИспользуетсяОчистаКодов);
	КонецЕсли;
	
	Если КонстантаИмя = "СрокХраненияВыгруженныхКодовМаркировкиИСМПТК" Тогда
		ИзменитьИспользованиеЗадания("ОчисткаПулаКодовМаркировкиИСМПТК", ИспользуетсяОчистаКодов);
	КонецЕсли;
	
	Если КонстантаИмя = "ИспользоватьАвтоматическуюОтправкуПолучениеДанныхИСМПТК" Тогда
		ИзменитьИспользованиеЗадания("ОтправкаПолучениеДанныхСУЗИСМПТК", НаборКонстант.ИспользоватьАвтоматическуюОтправкуПолучениеДанныхИСМПТК);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой(РеквизитПутьКДанным = Неопределено)
	
	////////ОБЩИЕ СВЕДЕНИЯ////////
	//КОНСТАНТЫ УЧЕТА
	ВедетсяУчетМарокПоОбуви    = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойОбувиИСМПТК");
	ВедетсяУчетМарокПоТабаку   = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемогоТабакаИСМПТК");
	ВедетсяУчетМарокПоФарме    = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемыхЛекарствИСМПТК");
	ВедетсяУчетМарокПоАлкоголю = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемогоАлкоголяИСМПТК");
	ВедетсяУчетМарокПоМолочке  = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойМолочкиИСМПТК");
	ВедетсяУчетМарокОбщая 	   = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМПТК");
		
	ИспользованиеСервисаИСМПТ  = ?(Не ПравоДоступа("Просмотр", Метаданные.Константы.ИспользоватьСервис1СМаркировкаИСМПТК),  Ложь, ПолучитьФункциональнуюОпцию("ИспользоватьСервис1СМаркировкаИСМПТК"));
	ИспользованиеСервисаИСЦЭДМ = ?(Не ПравоДоступа("Просмотр", Метаданные.Константы.ИспользоватьСервисФармацевтикаИСЦЭДМ),  Ложь, ПолучитьФункциональнуюОпцию("ИспользоватьСервисФармацевтикаИСЦЭДМ"));
	//////////////////////////////
	
	//===========================
	
	///////ПЕРЕОПРЕДЕЛЯЕМЫЕ///////
	//Получение параметров настроек модуля с учетом особенностей конфигурации.
	МассивПереопределяемыхНастроек = СобытияФормИСМПТКПереопределяемый.ПолучитьСписокПереопределяемыхНастроекФормыОбменаИСМПТ();
	Для Каждого СтруктураПараметров Из МассивПереопределяемыхНастроек Цикл
		
		ИмяЭлемента = СтруктураПараметров.ИмяЭлементаФормы;
		Свойство	= СтруктураПараметров.Свойство;
		ЗначениеСвойства = СтруктураПараметров.Значение;
		
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, Свойство, ЗначениеСвойства);
		
	КонецЦикла;
	//////////////////////////////
	
	//===========================
	
	///////ОБЩИЕ НАСТРОЙКИ///////
	
	//Видимость разделов  
	//Настройка адресов и способа указания адресов
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКомандыЗаполненияАдреса",
																	   "Видимость", ИспользованиеСервисаИСМПТ ИЛИ ИспользованиеСервисаИСЦЭДМ);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АдресСервераИСМПТ",
																	   "Видимость", ИспользованиеСервисаИСМПТ);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АдресСервераИСЭДО",
																	   "Видимость", ИспользованиеСервисаИСЦЭДМ);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АдресСервераИСМПТСУЗ",
																	   "Видимость", ИспользованиеСервисаИСМПТ ИЛИ ИспользованиеСервисаИСЦЭДМ);
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРаботаССУЗ",
																	   "Видимость", ИспользованиеСервисаИСМПТ ИЛИ ИспользованиеСервисаИСЦЭДМ); //Общая для двух систем
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаКриптографияИСМПТ",
																	   "Видимость", Ложь); //ИспользованиеСервисаИСМПТ);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаМобильноеПриложение",
																	   "Видимость", ИспользованиеСервисаИСМПТ ИЛИ ИспользованиеСервисаИСЦЭДМ); //Общая для двух систем
	
	//Группа ГруппаНастройкиОбъектовБиблиотеки частично доступна без использования сервиса маркировки
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРаботаСНоменклатурой",
																	   "Видимость", ИспользованиеСервисаИСМПТ ИЛИ ИспользованиеСервисаИСЦЭДМ);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НеЗапрашиватьКМТабачнойПродукцииВРозничномКонтуреИСМПТК",
																	   "Видимость", ВедетсяУчетМарокПоТабаку);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НеЗапрашиватьКМЛекарственнойПродукцииВРозничномКонтуреИСЦЭДМ", 
																	   "Видимость", ВедетсяУчетМарокПоФарме);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаГенерацияШтрихкодов",
																	   "Видимость", ИспользованиеСервисаИСМПТ);	
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаИСМПТ",
																	   "Видимость", ИспользованиеСервисаИСМПТ);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаИСЦЭДМ",
																	   "Видимость", ИспользованиеСервисаИСЦЭДМ);
	
	ВедетсяУчетПоСкладам = ПолучитьФункциональнуюОпцию("ВестиУчетПоСкладамИСЦЭДМ");
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СкладыИСЦЭДМ",
																	   "Доступность", ВедетсяУчетПоСкладам);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СоответствиеСкладовИСЦЭДМ",
																	   "Доступность", ВедетсяУчетПоСкладам);
		
	//Указание адресов ИС МПТ и СУЗ
	РазрешеноРучноеЗаполнение = РежимИспользованияСерверовИСМПТ = 3; //Режим самостоятельного заполнения серверов
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АдресСервераИСМПТ",
																	   "ТолькоПросмотр", Не РазрешеноРучноеЗаполнение);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АдресСервераИСЭДО",
																	   "ТолькоПросмотр", Не РазрешеноРучноеЗаполнение);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АдресСервераИСМПТСУЗ",
																	   "ТолькоПросмотр", Не РазрешеноРучноеЗаполнение);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АдресСервераИСМПТСУЗ_ЭДО",
																	   "ТолькоПросмотр", Не РазрешеноРучноеЗаполнение);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияУказаниеАдреса",
																	   "Видимость", РазрешеноРучноеЗаполнение И (ИспользованиеСервисаИСМПТ ИЛИ ИспользованиеСервисаИСЦЭДМ));
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДобавлятьИдентификаторКодамSSCCПриПечатиИСМПТК",
																	   "Доступность", Константы.ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК.Получить());
	//////////////////////////////
	
	//===========================
	
	////////НАСТРОЙКИ СУЗ/////////
	//Регламентные задания
	//Рег.задания
	Если ОбщегоНазначенияИСМПТКПереопределяемый.РазделениеВключено() Тогда
		Элементы.ГруппаНастройкиРегламентногоЗадания.Видимость = Ложь;
	Иначе
		УстановитьНастройкиЗаданий();
	КонецЕсли;
	
	//===========================
	
	/////МОБИЛЬНОЕ ПРИЛОЖЕНИЕ/////
	ИспользоватьПриложение = ?(Не ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.НастройкиПодключенияМобильноеПриложениеИСМПТК), 
							   Ложь, Константы.ИспользоватьМобильноеПриложениеИСМПТК.Получить());
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Соединение", 		 "Доступность", ИспользоватьПриложение);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПроверитьСоединение", "Доступность", ИспользоватьПриложение);
	//////////////////////////////
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.ОбновитьИнтерфейсПрограммы();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеКонстантыУчетаТГ(Элемент)
	
	Результат = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	ОбновитьИнтерфейсПрограммы();
	
КонецПроцедуры

#Область АдресаСервераИСМПТ

&НаСервере
Функция ПолучитьАдресаПоУмолчанию()
	
	ПредопределенныеАдресаСерверов = Новый Структура();
	//Адреса боевого контура
	ПредопределенныеАдресаСерверов.Вставить("ИСМПТ_Прод", "https://elk.prod.markirovka.ismet.kz/");
	ПредопределенныеАдресаСерверов.Вставить("ИСЦЭДМ_Прод", "https://api.edo.markirovka.kz/");
	ПредопределенныеАдресаСерверов.Вставить("СУЗ_Прод",   "https://omscloud.ismet.kz/");
	
	Возврат ПредопределенныеАдресаСерверов;
	
КонецФункции

&НаКлиенте
Процедура РежимЗаполненияАдресаПриИзменении(Элемент)
	
	Если ТекущееЗначениеРежимИспользованияСерверовИСМПТ = 3 Тогда //ручное заполнение
		//Нужно уточнить о сохранении значений в полях
		ТекстВопроса = НСтр("ru = 'При изменении режима параметров подключения указанные самостоятельно адреса серверов будут потеряны. Продолжить?'");
		ПродолжитьЗаполнениеАдресовПослеОтвета = Новый ОписаниеОповещения("ПродолжитьЗаполнениеАдресовПослеОтвета", ЭтотОбъект);
		ПоказатьВопрос(ПродолжитьЗаполнениеАдресовПослеОтвета, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		Если РежимИспользованияСерверовИСМПТ = 1 Тогда 
			
			ЗаполнитьАдресаСерверов("Боевой");
			ТекущееЗначениеРежимИспользованияСерверовИСМПТ = 1;
			
		ИначеЕсли РежимИспользованияСерверовИСМПТ = 3 Тогда
			
			ЗаполнитьАдресаСерверов("Самостоятельно");
			ТекущееЗначениеРежимИспользованияСерверовИСМПТ = 3;
			
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗаполнениеАдресовПослеОтвета(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		Если РежимИспользованияСерверовИСМПТ = 1 Тогда 
			ЗаполнитьАдресаСерверов("Боевой");
			ТекущееЗначениеРежимИспользованияСерверовИСМПТ = 1;
		КонецЕсли;
	Иначе
		//Сохраняем предыдущее значение
		ТекущееЗначениеРежимИспользованияСерверовИСМПТ = 3;
		РежимИспользованияСерверовИСМПТ = 3;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАдресаСерверов(ИспользуемыйКонтур) Экспорт
	
	ПредопределенныеАдресаСерверов = ПолучитьАдресаПоУмолчанию();
	
	ИСМПТ_Прод = ПредопределенныеАдресаСерверов.ИСМПТ_Прод;
	ИСЦЭДМ_Прод = ПредопределенныеАдресаСерверов.ИСЦЭДМ_Прод;
	СУЗ_Прод   = ПредопределенныеАдресаСерверов.СУЗ_Прод;
	
	Если ИспользуемыйКонтур = "Боевой" Тогда
		Константы.АдресСервераИСМПТК.Установить(ИСМПТ_Прод);
		Константы.АдресСервераИСЦЭДМ.Установить(ИСЦЭДМ_Прод);
		Константы.АдресСервераСУЗИСМПТК.Установить(СУЗ_Прод);
		РазрешеноРучноеЗаполнение = Ложь;
	Иначе	
		РазрешеноРучноеЗаполнение = Истина;
	КонецЕсли;
		
	ЭтаФорма.Прочитать();
			
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗначенияАдресовСерверовИУстановитьРежим()
	
	ПредопределенныеАдресаСерверов = ПолучитьАдресаПоУмолчанию();
	
	ИСМПТ_Прод  = ПредопределенныеАдресаСерверов.ИСМПТ_Прод;
	ИСЦЭДМ_Прод = ПредопределенныеАдресаСерверов.ИСЦЭДМ_Прод;
	СУЗ_Прод    = ПредопределенныеАдресаСерверов.СУЗ_Прод;
	
	ТекущийАдресИСМПТ  = Константы.АдресСервераИСМПТК.Получить();
	ТекущийАдресИСЦЭДМ = Константы.АдресСервераИСЦЭДМ.Получить();
	ТекущийАдресСУЗ	   = Константы.АдресСервераСУЗИСМПТК.Получить();
	
	Если Не ЗначениеЗаполнено(ТекущийАдресИСМПТ) 
		И Не ЗначениеЗаполнено(ТекущийАдресСУЗ) 
		И Не ЗначениеЗаполнено(ТекущийАдресИСЦЭДМ) Тогда
		//Первый запуск, адреса не сохранены, устанавливаем боевой контур по умолчанию
		ТекущееЗначениеРежимИспользованияСерверовИСМПТ = 1; 
		РежимИспользованияСерверовИСМПТ = 1;
		ЗаполнитьАдресаСерверов("Боевой"); //Устанавливаем значения констант
	Иначе
		Если (ТекущийАдресИСМПТ = ИСМПТ_Прод
				И ТекущийАдресСУЗ = СУЗ_Прод) 
			ИЛИ (ТекущийАдресИСЦЭДМ = ИСЦЭДМ_Прод
				И ТекущийАдресСУЗ = СУЗ_Прод) Тогда 
			//Сохранен адрес боевого контура, выставляем соответствующую настройку
			ТекущееЗначениеРежимИспользованияСерверовИСМПТ = 1; 
			РежимИспользованияСерверовИСМПТ = 1;
		Иначе	
			//Режим произвольного заполнения. Адрес указан либо в произвольной форме, либо тестовый стенд.
			ТекущееЗначениеРежимИспользованияСерверовИСМПТ = 3; 
			РежимИспользованияСерверовИСМПТ = 3;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ВестиУчетМаркируемойПродукцииИСМППриИзмененииНаСервере()
	
	ЗначениеОбщейФОМаркировки = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемогоТабакаИСМПТК")
							Или ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойОбувиИСМПТК")
							Или ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемыхЛекарствИСМПТК");
	Константы.ВестиУчетМаркируемойПродукцииИСМПТК.Установить(ЗначениеОбщейФОМаркировки);
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Функция МаркировкаТоваровВключена() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМПТК");
	
КонецФункции

&НаКлиенте
Процедура ПроверитьИнтервалГенерацииSSCC()
	
	Если ГенерацияSSCCКонецИнтервала <= ГенерацияSSCCНачалоИнтервала Тогда
		ТекстСообщения = НСтр("ru='Неверно заполнены границы: конец интервала должен быть больше его начала! Данные не сохранены.'");
		ЗаполнитьЗначениеИнтервалаСерийКодов();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения,, ГенерацияSSCCКонецИнтервала, ГенерацияSSCCКонецИнтервала);
	Иначе
		//Обновляем значение константы ИнтервалГенерацииСерийШтрихкодаSSCCИСМПТК
		ЗаполнитьЗначениеКонстантыИнтервал();		
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначениеКонстантыИнтервал() Экспорт
	
	ИнтервалНомеров = Новый Структура();
	ИнтервалНомеров.Вставить("НачалоИнтервала", ГенерацияSSCCНачалоИнтервала);
	ИнтервалНомеров.Вставить("КонецИнтервала",  ГенерацияSSCCКонецИнтервала);
	ИнтервалНомеровХранилище = Новый ХранилищеЗначения(ИнтервалНомеров);
	Константы.ИнтервалГенерацииСерийШтрихкодаSSCCИСМПТК.Установить(ИнтервалНомеровХранилище);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначениеИнтервалаСерийКодов();
	
	ДанныеИнтервала = Константы.ИнтервалГенерацииСерийШтрихкодаSSCCИСМПТК.Получить().Получить();
	Если ТипЗнч(ДанныеИнтервала) = Тип("Структура") Тогда
		ГенерацияSSCCНачалоИнтервала = ДанныеИнтервала.НачалоИнтервала;
		ГенерацияSSCCКонецИнтервала  = ДанныеИнтервала.КонецИнтервала;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьИзменениеИнтервалаСерийныхНомеров(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		//Продолжаем изменение в стандартном режиме
		ПроверитьИнтервалГенерацииSSCC();
	Иначе
		//Восстанавливаем знаечние интервалов из сохраненной константы
		ЗаполнитьЗначениеИнтервалаСерийКодов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьДанныеВШтрихкодыSSCCИСМПТК();
	
	РегистрЗаполнен = Ложь;
	ШтрихкодыУпаковок = РегистрыСведений.ШтрихкодыSSCCИСМПТК;
	НаборыШтрихкодов = ШтрихкодыУпаковок.СоздатьНаборЗаписей();
	НаборыШтрихкодов.Прочитать();
	
	Если Не НаборыШтрихкодов.Количество() = 0 Тогда
		РегистрЗаполнен = Истина;
	КонецЕсли;
	
	Возврат РегистрЗаполнен;	
	
КонецФункции

&НаКлиенте
Процедура ВключитьПоддержкудвойногоФорматаКодовПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		НаборКонстант.ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК = Истина;
		Подключаемый_ПриИзмененииРеквизита(Элементы.ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК, Истина);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСервисФармацевтикаИСЦЭДМПриИзмененииПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		НаборКонстант.ВестиУчетПоСкладамИСЦЭДМ = Ложь;
		Подключаемый_ПриИзмененииРеквизита(Элементы.ВестиУчетПоСкладамИСЦЭДМ, Ложь);
		Подключаемый_ПриИзмененииРеквизита(Элементы.ИспользоватьСервисФармацевтикаИСЭДО, Ложь);
	Иначе
		НаборКонстант.ИспользоватьСервисФармацевтикаИСЦЭДМ = Истина;
		Подключаемый_ПриИзмененииРеквизита(Элементы.ИспользоватьСервисФармацевтикаИСЭДО, Истина);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область Криптобиблиотека

&НаКлиенте
Процедура ПроверитьРаботуНЦА(Команда)	
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ИнформацияОСистеме = Символы.ПС + "Сведения об аппаратном и программном обеспечении:";
	ИнформацияОСистеме = ИнформацияОСистеме + Символы.ПС + "ОС: " 			 + СистемнаяИнформация.ВерсияОС;
	ИнформацияОСистеме = ИнформацияОСистеме + Символы.ПС + "Версия 1С:" 	 + СистемнаяИнформация.ВерсияПриложения;
	ИнформацияОСистеме = ИнформацияОСистеме + Символы.ПС + "Тип платформы:"  + СистемнаяИнформация.ТипПлатформы;	
	ИнформацияОСистеме = ИнформацияОСистеме + Символы.ПС + "Тип процессора:" + СистемнаяИнформация.Процессор;	
	
	ВерсияЗагруженная = "";
	Результат = ИнтеграцияИСМПТККлиентПереопределяемый.УдалосьПодключитьКриптопровайдерНаКлиенте(ВерсияЗагруженная, Ложь, Истина);
	ВерсияЗагруженная = СтрЗаменить(ВерсияЗагруженная, ",", ".");
	
	Если Результат Тогда
		ТекстСообщения = НСтр("ru = 'Библиотека успешно подключена! Версия: %НомерВерсии%.'")
					   + Символы.ПС
					   + ИнформацияОСистеме;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерВерсии%", СокрЛП(ВерсияЗагруженная));
	Иначе	
		ТекстСообщения = НСтр("ru = 'Не удалось подключить библиотеку криптографии. Возможно, она не установлена или возникла ошибка при попытке ее подключения.'")
					   + Символы.ПС
					   + ОписаниеОшибки()
					   + Символы.ПС
					   + ИнформацияОСистеме;
	КонецЕсли;
	ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКриптобиблиотеку(Команда)	

КонецПроцедуры

&НаКлиенте
Процедура УстановкаКомпонентыЗавершение(Результат)Экспорт
	
	Оповестить("ОбновленМодульКриптографииИСМПТ");
	
КонецПроцедуры

#КонецОбласти

#Область МобильноеПриложение

&НаСервере
Процедура ПроверитьСоединениеНаСервере()
	
	Прокси = ОбменДаннымиМобильноеПриложениеМаркировкаИСМПТК.УстановитьСоединениеССервером();
	Если Прокси = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтветСериализованный =  Прокси.Test();
	Ответ = ОбменДаннымиМобильноеПриложениеМаркировкаИСМПТК.Десериализовать(ОтветСериализованный);
	Текст = Ответ.Message;
	
	ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоединение(Команда)
	
	ЗаписатьНастройкиПодключения();
	ПроверитьСоединениеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяТочкиПодключенияИСМПТКПриИзменении(Элемент)
	
	ЗаписатьНастройкиПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяСервисаИСМПТКПриИзменении(Элемент)
	
	ЗаписатьНастройкиПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура URIПространстваИменСервисаИСМПТКПриИзменении(Элемент)
	
	ЗаписатьНастройкиПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьWSСсылкиИСМПТКПриИзменении(Элемент)
	
	ЗаписатьНастройкиПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяПользователяИСМПТКПриИзменении(Элемент)
	
	ЗаписатьНастройкиПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольИСМПТКПриИзменении(Элемент)
	
	ЗаписатьНастройкиПодключения();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиПодключения()
	
	НаборЗаписей = РегистрыСведений.НастройкиПодключенияМобильноеПриложениеИСМПТК.СоздатьНаборЗаписей();
	Движение = НаборЗаписей.Добавить();
	Движение.ПутьWSСсылкиИСМПТК = ПутьWSСсылкиИСМПТК;
	Движение.URIПространстваИменСервисаИСМПТК = URIПространстваИменСервисаИСМПТК;
	Движение.ИмяСервисаИСМПТК = ИмяСервисаИСМПТК;
	Движение.ИмяТочкиПодключенияИСМПТК = ИмяТочкиПодключенияИСМПТК;
	Движение.ИмяПользователяИСМПТК = ИмяПользователяИСМПТК;
	Движение.ПарольИСМПТК = ПарольИСМПТК;
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиПодключения()
	
	НаборДанных = РегистрыСведений.НастройкиПодключенияМобильноеПриложениеИСМПТК.Выбрать();
	НаборДанных.Следующий();
	
	ПутьWSСсылкиИСМПТК = НаборДанных.ПутьWSСсылкиИСМПТК;
	URIПространстваИменСервисаИСМПТК = НаборДанных.URIПространстваИменСервисаИСМПТК;
	ИмяСервисаИСМПТК = НаборДанных.ИмяСервисаИСМПТК;
	ИмяТочкиПодключенияИСМПТК = НаборДанных.ИмяТочкиПодключенияИСМПТК;
	ИмяПользователяИСМПТК = НаборДанных.ИмяПользователяИСМПТК;
	ПарольИСМПТК = НаборДанных.ПарольИСМПТК;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВерсиюМобильногоПриложения()
	
	ВерсияМобильногоПриложения = ИнтеграцияИСМПТКВызовСервера.ПолучитьТекущиюВерсиюМобильногоПриложения();
	
КонецПроцедуры

#КонецОбласти