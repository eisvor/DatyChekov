#Область ОписаниеПеременных

// Устройство распознавания до выбора. Будет возвращено в текущее устройство распознавания, если пользователь 
// не подтвердит выбор.
&НаКлиенте
Перем ПредыдущееУстройство;

// Таблица клиентская (массив структур) с иерархией построения плитки для текущего типа построения.
&НаКлиенте
Перем ДанныеДляПлитки Экспорт;

// Структура с возможными вариантами типов построения плитки: 0 - по палитре, 1 - весовой товар,
// 3 - распознанный весовой товар.
&НаКлиенте
Перем ТипыПостроенияПлитки Экспорт;

// Текущий тип построения плитки.
&НаКлиенте
Перем ТипПостроенияПлитки Экспорт;

// Массив распознанных товаров с вероятностью совпадения
&НаКлиенте
Перем ТоварыПоРезультатамРаспознавания;

// Время получения последнего результата распознавания
&НаКлиенте
Перем ДатаВремяКлиента;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("Масштаб") Тогда
		Масштаб = Параметры.Масштаб;
	КонецЕсли;
	ТорговыйОбъект = Параметры.ТорговыйОбъект;
	ОпределитьНастройкуРМК(Отказ);
	
	Если Не Отказ Тогда
	
		НастроитьЭлементыФормы();
		ЗаполнитьНачальныеНастройкиОборудования();
		ЗаполнитьТаблицуОборудования();
		ПодготовитьОпорныеДанные();
		ЗаполнитьФормуПриСозданииНаСервере();
		НастроитьТиповыеГорячиеКлавиши();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗапуститьПодключениеУстройствРаспознавания();
	ЗапуститьПодключениеВспомогательногоОборудования();
	ИнтерфейсРМКСлужебныйКлиент.ИнициализироватьТипыПостроенияПлитки(ЭтотОбъект);
	ДанныеДляПлитки = Новый Массив;
	ДатаВремяКлиента = Дата(1, 1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ТипЗнч(ПоддерживаемыеТипыПодключаемогоОборудования) = Тип("Структура") Тогда
		ПоддерживаемыеТипыПодключаемогоОборудования.ЭлектронныеВесы = Истина;
		ПоддерживаемыеТипыПодключаемогоОборудования.УстройствоРаспознавания = Истина;
	КонецЕсли;
	
	МенеджерОборудованияРМККлиент.ОтключитьОборудованиеПоТипу(Неопределено,
		УникальныйИдентификатор,
		ПоддерживаемыеТипыПодключаемогоОборудования);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование" Тогда
		Если ЭтоПолучениеСтабильногоВеса(ИмяСобытия, Параметр) Тогда
			ОбработатьПолучениеВесаОтЭлектронныхВесов(Параметр);
		ИначеЕсли ИмяСобытия = "ScanData" Тогда
			
			Штрихкод = ?(Параметр[1] = Неопределено, Параметр[0], Параметр[1][1]);
			ВыполнитьПоискПоШтрихкоду(Штрихкод);
			
		ИначеЕсли ИмяСобытия = "ScanDataBase64" Тогда
			
			Штрихкод = "";
			ШтрихкодBase64 = ?(Параметр[1] = Неопределено, Параметр[0], Параметр[1][1]);
			МенеджерОборудованияРМККлиентСервер.Base64ВШтрихкод(ШтрихкодBase64, Штрихкод);
			ВыполнитьПоискПоШтрихкоду(Штрихкод);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТекущееУстройствоРаспознаванияПриИзменении(Элемент)
	
	Если ТоварыДляОбученияУмныхВесов.Количество() > 0 Тогда
		
		ОповещениеПодтверждения = Новый ОписаниеОповещения("ВопросВыборУстройстваРаспознаванияЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Таблица распознанных товаров будет очищена. Продолжить?'");
		ПоказатьВопрос(ОповещениеПодтверждения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ОбработатьВыборУстройстваРаспознавания();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаБыстрогоПоискаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(СтрокаБыстрогоПоиска) Тогда
		ОткрытьФормуПодтвержденияДляСтрокиБыстрогоПоиска();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСпискаТоваров

&НаКлиенте
Процедура СписокТоваровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеВыбора = Элементы.СписокТоваров.ТекущиеДанные;
	ОтборСтрок = Новый Структура("SKU", ДанныеВыбора.SKU);
	СтрокиОпорныхДанных = ОпорныеДанные.НайтиСтроки(ОтборСтрок);
	Если СтрокиОпорныхДанных.Количество() > 0 Тогда
		ОбработатьВыборТовара(СтрокиОпорныхДанных[0]);
	Иначе
		ТекстСообщения = НСтр("ru = 'Выбранный товар не предназначен для текущего устройства распознавания'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	ЗакрытьПлиткуКлиент();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Распознать(Команда)
	
	ОтправитьЗапросНаРаспознаваниеТовара();
	
КонецПроцедуры

&НаКлиенте
Процедура ПлиткаВперед(Команда)
	ПерейтиНаСтраницуВправо();
	
	Если Не Элементы.ПерейтиДалее.Доступность Тогда
		ТекущийЭлемент = Элементы.ПерейтиНазад;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПлиткаНазад(Команда)
	ПерейтиНаСтраницуВлево();
КонецПроцедуры

&НаКлиенте
Процедура ПлиткаДомой(Команда)
	ПлиткаДомойКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПлитку(Команда)
	
	ЗакрытьПлиткуКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКаталог(Команда)
	
	ЗакрытьКаталогКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура Каталог(Команда)
	
	ОткрытьКаталог();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ГорячаяКлавишаESC(Команда)
	
	Если Элементы.СтраницыОбучения.ТекущаяСтраница = Элементы.СтраницаКаталог Тогда
		ЗакрытьКаталогКлиент();
	ИначеЕсли Элементы.СтраницыОбучения.ТекущаяСтраница = Элементы.СтраницаВыбораТовара Тогда
		ЗакрытьПлиткуКлиент();
	Иначе
		Если ТоварыДляОбученияУмныхВесов.Количество() > 0 Тогда
			ОповещениеПодтверждения = Новый ОписаниеОповещения("ПодтверждениеЗакрытияЗавершение", ЭтотОбъект);
			ТекстВопроса = НСтр("ru = 'Подтвердите закрытие формы.'");
			ПоказатьВопрос(ОповещениеПодтверждения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Иначе
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПлиткаВыбор(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяЭлементаБезИндекса = Лев(Элемент.Имя, 16);
	НомерНажатой = Сред(Элемент.Имя, 18);
	НомерНажатой = Число(НомерНажатой);
	СтрокаНажатойКнопки = ДанныеКнопокПлиток.Получить(НомерНажатой);
	СтраницаПрежняя = Не СтрокаНажатойКнопки.ИмеетсяВложенность;
	
	ОткрытаФормаПодтверждения = Ложь;
	ВыбратьЭлементИзПлитки(СтрокаНажатойКнопки, ОткрытаФормаПодтверждения);
	
	Если Не ОткрытаФормаПодтверждения Тогда
		НастроитьТекущийЭлементПослеВыбораИзПлитки(СтраницаПрежняя, НомерНажатой);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьФормуПриСозданииНаСервере()
	ОбщегоНазначенияРМК.НастроитьФормуОбученияУстройствРаспознавания(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	Элементы.ВремяОжиданияПодтверждения.Подсказка = НСтр("ru = 'Параметр определяет время ожидания после распознавания,
		|в течении которого надо успеть выбрать товар, находящийся на весах, чтобы устройство запомнило этот выбор.
		|Значение данного параметра устанавливается в параметрах подключения справочника ""Подключаемое оборудование"".'");
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьНастройкуРМК(Отказ)
	
	Если Параметры.Свойство("НастройкаРМК") И ЗначениеЗаполнено(Параметры.НастройкаРМК) Тогда
		ТекущаяНастройкаРМК = Параметры.НастройкаРМК;
		РеквизитыНастройки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяНастройкаРМК, "РабочееМесто,ВертикальнаяОриентация");
		ТекущееРабочееМесто = РеквизитыНастройки.РабочееМесто;
		ВертикальнаяОриентация = РеквизитыНастройки.ВертикальнаяОриентация;
	Иначе
		ОпределитьНастройкуРМКПоРабочемуМесту();
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекущаяНастройкаРМК) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не определена настройка рабочего места кассира.'"), , , , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьОпорныеДанные()
	
	ЦветаФормы = ОбщегоНазначенияРМК.ЦветаФормыРМК();
	ТоварыДляУстройств = ОбщегоНазначенияРМК.ПолучитьВесовыеТоварыДляРаботыСУстройствами(ЭтотОбъект);
	Если ТоварыДляУстройств.Количество() > 0 Тогда
		ИнтерфейсРМКСлужебный.ЗаполнитьОпорныеДанныеПлиточногоИнтерфейсаДляУстройствРаспознавания(ЭтотОбъект,
			ТоварыДляУстройств);
		ИнтерфейсРМКСлужебный.СформироватьЭлементыПлиток(ЭтотОбъект);
		ЗаполнитьНоменклатуруБыстрогоВыбора();
	Иначе
		ТекстСообщения = НСтр("ru = 'В информационной базе нет весовых товаров с кодами SKU.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНоменклатуруБыстрогоВыбора()
	
	Для Каждого СтрокаОпорныхДанных Из ОпорныеДанные Цикл
		Если ЗначениеЗаполнено(СтрокаОпорныхДанных.Номенклатура)
				И Не ЗначениеЗаполнено(СтрокаОпорныхДанных.Характеристика) Тогда
			Элементы.СтрокаБыстрогоПоиска.СписокВыбора.Добавить(СтрокаОпорныхДанных.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьНастройкуРМКПоРабочемуМесту()
	
	ТекущееРабочееМесто = МенеджерОборудованияРМК.РабочееМестоКлиента();
	ЗапросНастроек = Новый Запрос;
	ЗапросНастроек.Текст =
	"ВЫБРАТЬ
	|	НастройкиРабочегоМестаКассира.Ссылка КАК НастройкаРМК,
	|	НастройкиРабочегоМестаКассира.ВертикальнаяОриентация КАК ВертикальнаяОриентация
	|ИЗ
	|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
	|ГДЕ
	|	НастройкиРабочегоМестаКассира.РабочееМесто = &РабочееМесто
	|	И НЕ НастройкиРабочегоМестаКассира.ПометкаУдаления";
	ЗапросНастроек.УстановитьПараметр("РабочееМесто", ТекущееРабочееМесто);
	ВыборкаНастроек = ЗапросНастроек.Выполнить().Выбрать();
	КоличествоНастроек = ВыборкаНастроек.Количество();
	Если КоличествоНастроек = 1 И ВыборкаНастроек.Следующий() Тогда
		
		ТекущаяНастройкаРМК = ВыборкаНастроек.НастройкаРМК;
		ВертикальнаяОриентация = ВыборкаНастроек.ВертикальнаяОриентация;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройкиОборудования()
	
	ПоддерживаемыеТипыПО = МенеджерОборудованияРМККлиентСервер.ПараметрыТипыОборудования();
	ПоддерживаемыеТипыПО.СканерШтрихкода = Истина;
	ПоддерживаемыеТипыПодключаемогоОборудования = ПоддерживаемыеТипыПО;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуОборудования()
	
	УстройстваРаспознаванияОнлайнВесов
		= ИнтерфейсРМКСлужебный.ПолучитьУстройстваРаспознаванияЭлектронныхВесовДляПодключения(ТекущееРабочееМесто);
	УстройстваРаспознаванияРабочегоМеста
		= ОбщегоНазначенияРМК.ПолучитьПодключенноеОборудованиеПоТипу("УстройствоРаспознавания", ТекущееРабочееМесто);
		
	Для Каждого ТекущаяКомплектация Из УстройстваРаспознаванияОнлайнВесов Цикл
		
		НоваяСтрока = ТаблицаОборудования.Добавить();
		НоваяСтрока.УстройствоРаспознавания = ТекущаяКомплектация.УстройствоРаспознавания;
		НоваяСтрока.ЭлектронныеВесы = ТекущаяКомплектация.ЭлектронныеВесы;
		ИндексУстройства = УстройстваРаспознаванияРабочегоМеста.Найти(ТекущаяКомплектация.УстройствоРаспознавания);
		Если Не ИндексУстройства = Неопределено Тогда
			УстройстваРаспознаванияРабочегоМеста.Удалить(ИндексУстройства);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УстройствоРаспознавания Из УстройстваРаспознаванияРабочегоМеста Цикл
		НоваяСтрока = ТаблицаОборудования.Добавить();
		НоваяСтрока.УстройствоРаспознавания = УстройствоРаспознавания;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивУстройствРаспознавания()
	
	РезультатФункции = Новый Массив;
	
	Для Каждого СтрокаОборудования Из ТаблицаОборудования Цикл
		Если РезультатФункции.Найти(СтрокаОборудования.УстройствоРаспознавания) = Неопределено Тогда
			РезультатФункции.Добавить(СтрокаОборудования.УстройствоРаспознавания);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьПодключениеУстройствРаспознавания()
	
	Если ТаблицаОборудования.Количество() > 0 Тогда
		МассивУстройствРаспознавания = ПолучитьМассивУстройствРаспознавания();
		ОповещениеПодключенияУстройствРаспознавания = Новый ОписаниеОповещения(
			"ЗавершитьПодключениеУстройствРаспознавания",
			ЭтотОбъект);
			
		МенеджерОборудованияРМККлиент.ПодключитьОборудованиеПоИдентификатору(ОповещениеПодключенияУстройствРаспознавания,
			УникальныйИдентификатор,
			МассивУстройствРаспознавания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПодключениеВспомогательногоОборудования()

	Если ТаблицаОборудования.Количество() > 0 Тогда
		ОповещениеПодключенияОборудования = Новый ОписаниеОповещения(
				"ЗавершитьПодключениеОборудования",
				ЭтотОбъект);
			
		МенеджерОборудованияРМККлиент.ПодключитьОборудованиеПоТипу(
			ОповещениеПодключенияОборудования,
			УникальныйИдентификатор,
			ПоддерживаемыеТипыПодключаемогоОборудования);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПодключениеЭлектронныхВесов(МассивЭлектронныхВесов)
	
	ПодключенныеУстройстваРаспознавания = Новый Массив;
	Для Каждого СтрокаОборудования Из ТаблицаОборудования Цикл
		СтрокаОборудования.УстройствоОбработано = Ложь;
		Если СтрокаОборудования.УстройствоПодключено
				И ПодключенныеУстройстваРаспознавания.Найти(СтрокаОборудования.УстройствоРаспознавания) = Неопределено Тогда
			ПодключенныеУстройстваРаспознавания.Добавить(СтрокаОборудования.УстройствоРаспознавания);
		КонецЕсли;
	КонецЦикла;
	Если ПодключенныеУстройстваРаспознавания.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось подключить ни одного устройства распознавания.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	Иначе
		Элементы.ТекущееУстройствоРаспознавания.СписокВыбора.ЗагрузитьЗначения(ПодключенныеУстройстваРаспознавания);
		ВыбратьУстройствоРаспознавания(ПодключенныеУстройстваРаспознавания[0]);
		Если МассивЭлектронныхВесов.Количество() > 0 Тогда
			МенеджерОборудованияРМККлиент.ПодключитьОборудованиеПоИдентификатору(Неопределено,
				УникальныйИдентификатор,
				МассивЭлектронныхВесов);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьУстройствоРаспознавания(Устройство)
	
	ТекущееУстройствоРаспознавания = Устройство;
	ОбработатьВыборУстройстваРаспознавания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборУстройстваРаспознавания()
	
	ПредыдущееУстройство = ТекущееУстройствоРаспознавания;
	Если ТоварыДляОбученияУмныхВесов.Количество() > 0 Тогда
		ТоварыДляОбученияУмныхВесов.Очистить();
	КонецЕсли;
	ОчиститьДанныеРаспознавания();
	АктуализироватьДоступностьКомандУстройствРаспознавания();
	Если ЗначениеЗаполнено(ТекущееУстройствоРаспознавания) Тогда
		ПоказатьВремяОжиданияВыбранногоУстройства();
	Иначе
		Элементы.ГруппаПараметрПодтвержденияОжидания.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВыборУстройстваРаспознаванияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбработатьВыборУстройстваРаспознавания();
	Иначе
		ТекущееУстройствоРаспознавания = ПредыдущееУстройство;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеРаспознавания()
	
	ПредложеннаяНоменклатура = Неопределено;
	ПредложеннаяХарактеристика = Неопределено;
	ВыбраннаяНоменклатура = Неопределено;
	ВыбраннаяХарактеристика = Неопределено;
	
	Элементы.ПредложенныйТовар.Заголовок = "";
	Элементы.ПредложенныйТоварВероятность.Заголовок = "";
	Элементы.ВыбранныйТовар.Заголовок = "";
	Элементы.ВыбранныйТоварВероятность.Заголовок = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВремяОжиданияВыбранногоУстройства()
	
	ПараметрыУстройства = МенеджерОборудованияРМККлиент.ПолучитьПодключенноеУстройство(ТекущееУстройствоРаспознавания);
	ПараметрыПодключения = ПараметрыУстройства.Параметры;
	Если ПараметрыПодключения.Свойство("P_RecognitionConfirmTimeout")
			И ПараметрыПодключения.P_RecognitionConfirmTimeout > 0 Тогда
			
		Элементы.ГруппаПараметрПодтвержденияОжидания.Видимость = Истина;
		ВремяОжиданияПодтверждения = ПараметрыПодключения.P_RecognitionConfirmTimeout;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьДоступностьКомандУстройствРаспознавания()
	
	КнопкиДоступны = ЗначениеЗаполнено(ТекущееУстройствоРаспознавания);
	Элементы.Распознать.Доступность = КнопкиДоступны;
	
КонецПроцедуры

&НаКлиенте
Функция ПодключениеУстройствРаспознаванияЗавершено(МассивЭлектронныхВесов)
	
	РезультатФункции = Ложь;
	КоличествоСтрок = ТаблицаОборудования.Количество();
	Если КоличествоСтрок > 0 Тогда
		РезультатФункции = Истина;
		ИндексСтроки = 0;
		Пока ИндексСтроки < КоличествоСтрок И РезультатФункции Цикл
			СтрокаОборудования = ТаблицаОборудования.Получить(ИндексСтроки);
			Если Не СтрокаОборудования.УстройствоОбработано Тогда
				РезультатФункции = Ложь;
			КонецЕсли;
			Если СтрокаОборудования.УстройствоПодключено
					И МассивЭлектронныхВесов.Найти(СтрокаОборудования.ЭлектронныеВесы) = Неопределено Тогда
				МассивЭлектронныхВесов.Добавить(СтрокаОборудования.ЭлектронныеВесы);
			КонецЕсли;
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьПодключениеУстройствРаспознавания(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(РезультатВыполнения, "Результат") Тогда
		Для Каждого СтрокаОборудования Из ТаблицаОборудования Цикл
			Если СтрокаОборудования.УстройствоРаспознавания = РезультатВыполнения.ИдентификаторУстройства Тогда
				СтрокаОборудования.УстройствоОбработано = Истина;
				Если РезультатВыполнения.Результат Тогда
					СтрокаОборудования.УстройствоПодключено = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		МассивЭлектронныхВесов = Новый Массив;
		Если ПодключениеУстройствРаспознаванияЗавершено(МассивЭлектронныхВесов) Тогда
			ЗапуститьПодключениеЭлектронныхВесов(МассивЭлектронныхВесов);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПодключениеОборудования(РезультатПодключения, ДополнительныеПараметры) Экспорт
	
	Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(РезультатПодключения, "Результат") Тогда
		Если Не РезультатПодключения.Результат Тогда
			
			ОписаниеОшибки = РезультатПодключения.ОписаниеОшибки;
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "'", "");
			ТекстПредупреждения = СтрШаблон(НСтр("ru = 'При подключении устройства произошла ошибка: "" %1 "".'"),
				РезультатПодключения.ОписаниеОшибки);
		
			ПоказатьПредупреждение(, ТекстПредупреждения);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоПолучениеСтабильногоВеса(ИмяСобытия, Параметр)
	Возврат (ИмяСобытия = "Weighting" И Параметр.Вес > 0 И Параметр.Стабилизация = Истина);
КонецФункции

&НаКлиенте
Функция ОбработкаПолученияВесаДоступна(ЭлектронныеВесы)
	
	РезультатФункции = Ложь;
	Если Элементы.СтраницыОбучения.ТекущаяСтраница = Элементы.ОсновнаяСтраница
			И ЗначениеЗаполнено(ТекущееУстройствоРаспознавания) Тогда
		ОтборВесов = Новый Структура("ЭлектронныеВесы", ЭлектронныеВесы);
		СтрокиВесов = ТаблицаОборудования.НайтиСтроки(ОтборВесов);
		Если СтрокиВесов.Количество() > 0 И СтрокиВесов[0].УстройствоРаспознавания = ТекущееУстройствоРаспознавания Тогда
			РезультатФункции = Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПолучениеВесаОтЭлектронныхВесов(ЭлектронныеВесы)
	Если ОбработкаПолученияВесаДоступна(ЭлектронныеВесы) Тогда
		ОтправитьЗапросНаРаспознаваниеТовара();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросНаРаспознаваниеТовара()
	
	ПараметрыОперации = Новый Структура();
	ПараметрыОперации.Вставить("ПроводитьОбучение", Истина);
	ПараметрыОперации.Вставить("КоличествоВариантов", 7);
	
	ОповещениеРаспознавания = Новый ОписаниеОповещения("ОбработкаРаспознаванияЗавершение", ЭтотОбъект);
	
	МенеджерОборудованияРМККлиент.НачатьРаспознавание(ОповещениеРаспознавания, УникальныйИдентификатор,
		ТекущееУстройствоРаспознавания, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПодтверждениеРаспознанногоТовара(СтрокаОпорныхДанных)

	ПараметрыПодтверждения = Новый Структура("ИндексВОпорныхДанных", ОпорныеДанные.Индекс(СтрокаОпорныхДанных));
	ОповещениеПодтверждения
		= Новый ОписаниеОповещения("ОбработкаПодтвержденияЗавершение", ЭтотОбъект, ПараметрыПодтверждения);
		
	МенеджерОборудованияРМККлиент.ПодтвердитьРаспознавание(ОповещениеПодтверждения, УникальныйИдентификатор,
		ТекущееУстройствоРаспознавания, СтрокаОпорныхДанных.SKU);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОбработкаРаспознаванияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Свойство("Результат") И Результат.Результат Тогда
		ТоварыПоРезультатамРаспознавания = Новый Массив;
		Если Результат.РаспознанныеТовары.Количество() > 0 Тогда
			ОтобранныеТовары = ПодготовитьТоварыПоДаннымРаспознавания(Результат.РаспознанныеТовары);
			ДатаВремяКлиента = ОбщегоНазначенияКлиент.ДатаСеанса();
			Если ОтобранныеТовары.Количество() > 0 Тогда
				ТоварыПоРезультатамРаспознавания = ОтобранныеТовары;
			КонецЕсли;
		КонецЕсли;
		ОткрытьПлиточныйИнтерфейс();
		Если ВремяОжиданияПодтверждения > 0 Тогда
			ЭтотОбъект.ПодключитьОбработчикОжидания("ПроверкаВремениОжиданияРаспознавания", 3, Истина);
		КонецЕсли;
	ИначеЕсли Результат.Свойство("ОписаниеОшибки") И ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
		ПоказатьПредупреждение(, Результат.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьТоварыПоДаннымРаспознавания(РаспознанныеТовары)
	
	РезультатФункции = Новый Массив;
	Для Каждого СтрокаТовара Из РаспознанныеТовары Цикл
		ОтборТовара = Новый Структура("SKU", СтрокаТовара.Код);
		СтрокиОпорныхДанных = ОпорныеДанные.НайтиСтроки(ОтборТовара);
		Если СтрокиОпорныхДанных.Количество() > 0 Тогда
			СтрокаДляПлитки = Новый Структура();
			СтрокаОпорныхДанных = СтрокиОпорныхДанных[0];
			СтрокаДляПлитки.Вставить("Номенклатура", СтрокаОпорныхДанных.Номенклатура);
			СтрокаДляПлитки.Вставить("Характеристика", СтрокаОпорныхДанных.Характеристика);
			СтрокаДляПлитки.Вставить("Вероятность", СтрокаТовара.Вероятность);
			РезультатФункции.Добавить(СтрокаДляПлитки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьПлиточныйИнтерфейс()
	
	ТипПостроенияПлитки = ТипыПостроенияПлитки.РаспознанныйВесовойТовар;
	Если ТоварыПоРезультатамРаспознавания.Количество() = 0 Тогда
		ТипПостроенияПлитки = ТипыПостроенияПлитки.ВесовойТовар;
	КонецЕсли;
	ИнтерфейсРМКСлужебныйКлиент.ПодготовитьДанныеДляПлитки(ЭтотОбъект, ТоварыПоРезультатамРаспознавания);
	ПлиткаДомойКлиент();
	ПереключитьНаСтраницуПлитки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаСтраницуПлитки()
	
	Элементы.СтраницыОбучения.ТекущаяСтраница = Элементы.СтраницаВыбораТовара;
	ТекущийЭлемент = Элементы.СтрокаБыстрогоПоиска;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлиткаДомойКлиент()
	
	ТекущийПервыйИндексПлитки = 0;
	ИнтерфейсРМКСлужебныйКлиент.ЗаполнитьКнопкиПлиток(ЭтотОбъект);
	ПересчитатьКоличествоВПлитках();

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуВправо()
	
	КоличествоПлиток = КоличествоЭлементовВРяду * КоличествоРядовНаСтранице;
	ТекущийПервыйИндексПлитки = ТекущийПервыйИндексПлитки + КоличествоПлиток;
	ИнтерфейсРМКСлужебныйКлиент.ЗаполнитьКнопкиПлиток(ЭтотОбъект);
	ПересчитатьКоличествоВПлитках();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуВлево()
	
	КоличествоПлиток = КоличествоЭлементовВРяду * КоличествоРядовНаСтранице;
	ТекущийПервыйИндексПлитки = ТекущийПервыйИндексПлитки - КоличествоПлиток;
	ИнтерфейсРМКСлужебныйКлиент.ЗаполнитьКнопкиПлиток(ЭтотОбъект);
	ПересчитатьКоличествоВПлитках();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКоличествоВПлитках()
	
	Если ОпорныеДанные.Количество() = 0 Или ДанныеКнопокПлиток.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = 0;
	ДанныеПлитки = ДанныеКнопокПлиток[Индекс];
		
	Если ДанныеПлитки.ЭтоТекущаяКатегория Тогда
		СтраницаЛинии = Элементы["Плитка_Элемент05_" + Индекс];
	Иначе
		СтраницаЛинии = Элементы["Плитка_Элемент03_" + Индекс];
	КонецЕсли;
		
	Если Не Элементы["Плитка_Элемент02_" + Индекс].ТекущаяСтраница = СтраницаЛинии Тогда
		Элементы["Плитка_Элемент02_" + Индекс].ТекущаяСтраница = СтраницаЛинии;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПлиткуКлиент()
	
	Элементы.СтраницыОбучения.ТекущаяСтраница = Элементы.ОсновнаяСтраница;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЭлементИзПлитки(СтрокаНажатойКнопки, ОткрытаФормаПодтверждения)
		
	Если СтрокаНажатойКнопки.ЭтоКатегория ИЛИ СтрокаНажатойКнопки.ЭтоТекущаяКатегория Тогда
		ТекущийПервыйИндексПлитки = СтрокаНажатойКнопки.ПервыйИндексПлитки;
		ИнтерфейсРМКСлужебныйКлиент.ЗаполнитьКнопкиПлиток(ЭтотОбъект);
		ПересчитатьКоличествоВПлитках();
		Возврат;
	КонецЕсли;
	
	ИндексВОпорныхДанных = СтрокаНажатойКнопки.ПервыйИндексПлитки;
	СтрокаДанныхДляПлитки = ДанныеДляПлитки[ИндексВОпорныхДанных];
	ИндексВОпорныхДанных = СтрокаДанныхДляПлитки.ИндексИзОпорныхДанных;
	СтрокаПозиции = ОпорныеДанные.НайтиПоИдентификатору(ИндексВОпорныхДанных);
	
	Если СтрокаПозиции.ЭтоКатегория Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИндексВОпорныхДанных", ИндексВОпорныхДанных);
	
	ОткрытаФормаПодтверждения = Истина;
	ОткрытьФормуПодтвержденияВесовогоТовара(СтрокаПозиции, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодтвержденияВесовогоТовара(СтрокаПозиции, ДополнительныеПараметры)

	Доступность = Ложь;
	СерверныйВызов();
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ИдентификаторФормыВладельца", УникальныйИдентификатор);
	ПараметрыОткрытия.Вставить("НаименованиеПозиции", СтрокаПозиции.ИмяЭлемента);
	ПараметрыОткрытия.Вставить("АдресИзображения", СтрокаПозиции.АдресИзображения);
	ПараметрыОткрытия.Вставить("ЭтоФормаОбучения", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодтверждениеНоменклатурыЗавершение",
		ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаДобавленияВесовогоТовара",
		ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодтвержденияДляСтрокиБыстрогоПоиска()
	
	СтрокаОпорныхДанных = ПолучитьСтрокуОпорныхДанныхПоНоменклатуре(СтрокаБыстрогоПоиска);
	Если Не СтрокаОпорныхДанных = Неопределено Тогда
		ОткрытьФормуПодтвержденияДляНоменклатурыОпорныхДанных(СтрокаОпорныхДанных);
	КонецЕсли;
	СтрокаБыстрогоПоиска = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодтвержденияДляНоменклатурыОпорныхДанных(СтрокаОпорныхДанных)
	
	ДополнительныеПараметры = Новый Структура("ИндексВОпорныхДанных", ОпорныеДанные.Индекс(СтрокаОпорныхДанных));
	ОткрытьФормуПодтвержденияВесовогоТовара(СтрокаОпорныхДанных, ДополнительныеПараметры);
	ТекущийЭлемент = Элементы.СтрокаБыстрогоПоиска;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеНоменклатурыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Доступность = Истина;
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		СтрокаПозиции = ОпорныеДанные.НайтиПоИдентификатору(ДополнительныеПараметры.ИндексВОпорныхДанных);
		ОбработатьВыборТовара(СтрокаПозиции);
		ЗакрытьПлиткуКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодтвержденияЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		СтрокаПозиции = ОпорныеДанные.НайтиПоИдентификатору(ДополнительныеПараметры.ИндексВОпорныхДанных);
		ОбработатьПодтверждениеТовара(СтрокаПозиции);
	Иначе
		ТекстСообщения = НСтр("ru = 'Обучение не подтверждено:'");
		ПоказатьПредупреждение(, СтрШаблон("%1 %2", ТекстСообщения, РезультатВыполнения.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуОпорныхДанныхПоНоменклатуре(НоменклатураПоиска)
	
	СтрокаОпорныхДанных = Неопределено;
	
	ОтборДанных = Новый Структура("Номенклатура", НоменклатураПоиска);
	СтрокиОпорныхДанных = ОпорныеДанные.НайтиСтроки(ОтборДанных);
	КоличествоСтрок = СтрокиОпорныхДанных.Количество();
	ИндексСтроки = 0;
	Пока ИндексСтроки < КоличествоСтрок И СтрокаОпорныхДанных = Неопределено Цикл
		ТекущаяСтрокаОпорныхДанных = СтрокиОпорныхДанных[ИндексСтроки];
		Если Не ЗначениеЗаполнено(ТекущаяСтрокаОпорныхДанных.Характеристика) Тогда
			СтрокаОпорныхДанных = ТекущаяСтрокаОпорныхДанных;
		КонецЕсли;
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	
	Возврат СтрокаОпорныхДанных;
	
КонецФункции

&НаКлиенте
Процедура НастроитьТекущийЭлементПослеВыбораИзПлитки(СтраницаПрежняя, НомерНажатой)
	
	Если СтраницаПрежняя Тогда
		ТекущийЭлемент = Элементы["Плитка_Элемент09_"+НомерНажатой];
	Иначе
		Если ДанныеКнопокПлиток[0].ЭтоКатегория Тогда
			ТекущийЭлемент = Элементы["Плитка_Элемент69_0"];
		Иначе
			ТекущийЭлемент = Элементы["Плитка_Элемент09_0"];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СерверныйВызов()
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВремениОжиданияРаспознавания()
	
	ТекущаяДатаВремяКлиента = ОбщегоНазначенияКлиент.ДатаСеанса();
	Если Не Элементы.СтраницыОбучения.ТекущаяСтраница = Элементы.ОсновнаяСтраница Тогда
		Если Доступность И (ТекущаяДатаВремяКлиента - ДатаВремяКлиента) >= ВремяОжиданияПодтверждения Тогда
			ЗакрытьПлиткуКлиент();
		Иначе
			ЭтотОбъект.ПодключитьОбработчикОжидания("ПроверкаВремениОжиданияРаспознавания", 3, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборТовара(СтрокаОпорныхДанных)
	
	ОтправитьПодтверждениеРаспознанногоТовара(СтрокаОпорныхДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПодтверждениеТовара(СтрокаВыбранногоТовара)
	
	СимволПроцент = "%";
	ИсходныеПараметрыРаспознавания = Новый Структура();
	ИсходныеПараметрыРаспознавания.Вставить("ВероятностьВыбранногоТовара", 0);
	ИсходныеПараметрыРаспознавания.Вставить("ВероятностьМаксимальная", 0);
	ИсходныеПараметрыРаспознавания.Вставить("ПредложеннаяНоменклатура", Неопределено);
	ИсходныеПараметрыРаспознавания.Вставить("ПредложеннаяХарактеристика", Неопределено);
	ЗаполнитьИсходныеПараметрыРаспознаванияТоваров(СтрокаВыбранногоТовара, ИсходныеПараметрыРаспознавания);
	
	СтрокаПредложенногоТовара = Неопределено;
	Если ИсходныеПараметрыРаспознавания.ВероятностьВыбранногоТовара
		= ИсходныеПараметрыРаспознавания.ВероятностьМаксимальная Тогда
		СтрокаПредложенногоТовара = СтрокаВыбранногоТовара;
	Иначе
		ОтборСтрок = Новый Структура();
		ОтборСтрок.Вставить("Номенклатура", ИсходныеПараметрыРаспознавания.ПредложеннаяНоменклатура);
		ОтборСтрок.Вставить("Характеристика", ИсходныеПараметрыРаспознавания.ПредложеннаяХарактеристика);
		СтрокиОпорныхДанных = ОпорныеДанные.НайтиСтроки(ОтборСтрок);
		СтрокаПредложенногоТовара = СтрокиОпорныхДанных[0];
	КонецЕсли;
	
	Элементы.ПредложенныйТовар.Заголовок = СтрокаПредложенногоТовара.ИмяЭлемента;
	Элементы.ВыбранныйТовар.Заголовок = СтрокаВыбранногоТовара.ИмяЭлемента;
	ВероятностьСтрокой = Формат(ИсходныеПараметрыРаспознавания.ВероятностьМаксимальная, "ЧДЦ=4");
	Элементы.ПредложенныйТоварВероятность.Заголовок = СтрШаблон("%1 %2", ВероятностьСтрокой, СимволПроцент);
	ВероятностьСтрокой = Формат(ИсходныеПараметрыРаспознавания.ВероятностьВыбранногоТовара, "ЧДЦ=4");
	Элементы.ВыбранныйТоварВероятность.Заголовок = СтрШаблон("%1 %2", ВероятностьСтрокой, СимволПроцент);
	
	ОтборВыбранногоТовара = Новый Структура();
	ОтборВыбранногоТовара.Вставить("КодSKU", СтрокаВыбранногоТовара.SKU);
	СтрокиТоваров = ТоварыДляОбученияУмныхВесов.НайтиСтроки(ОтборВыбранногоТовара);
	Если СтрокиТоваров.Количество() = 0 Тогда
		СтрокаТовараОбучения = ТоварыДляОбученияУмныхВесов.Добавить();
		СтрокаТовараОбучения.КодSKU = СтрокаВыбранногоТовара.SKU;
		СтрокаТовараОбучения.Номенклатура = СтрокаВыбранногоТовара.Номенклатура;
		СтрокаТовараОбучения.Характеристика = СтрокаВыбранногоТовара.Характеристика;
	Иначе
		СтрокаТовараОбучения = СтрокиТоваров[0];
	КонецЕсли;
	СтрокаТовараОбучения.Выбран = СтрокаТовараОбучения.Выбран + 1;
	СтрокаТовараОбучения.Предложен = СтрокаТовараОбучения.Предложен
		+ ?(СтрокаВыбранногоТовара = СтрокаПредложенногоТовара, 1, 0);
	ТоварыДляОбученияУмныхВесов.Сортировать("Выбран Убыв");
	Элементы.ТоварыДляОбученияУмныхВесов.ТекущаяСтрока = СтрокаТовараОбучения.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсходныеПараметрыРаспознаванияТоваров(СтрокаВыбранногоТовара, ИсходныеПараметры)
	
	Для Каждого СтрокаРаспознавания Из ТоварыПоРезультатамРаспознавания Цикл
		Если СтрокаРаспознавания.Вероятность > ИсходныеПараметры.ВероятностьМаксимальная Тогда
			ИсходныеПараметры.ВероятностьМаксимальная = СтрокаРаспознавания.Вероятность;
			ИсходныеПараметры.ПредложеннаяНоменклатура = СтрокаРаспознавания.Номенклатура;
			ИсходныеПараметры.ПредложеннаяХарактеристика = СтрокаРаспознавания.Характеристика;
		КонецЕсли;
		Если СтрокаРаспознавания.Номенклатура = СтрокаВыбранногоТовара.Номенклатура
				И СтрокаРаспознавания.Характеристика = СтрокаВыбранногоТовара.Характеристика Тогда
			ИсходныеПараметры.ВероятностьВыбранногоТовара = СтрокаРаспознавания.Вероятность;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКаталогКлиент()
	
	ПереключитьНаСтраницуПлитки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталог()
	
	Элементы.СтраницыОбучения.ТекущаяСтраница = Элементы.СтраницаКаталог;
	
КонецПроцедуры

&НаСервере
Функция ДанныеПоискаПоШтрихкодуСервер(Штрихкод)
	
	ДанныеШтрихкода = Новый Структура;
	РаботаСоШтрихкодамиПереопределяемый.ЗаполнитьДанныеПоискаПоШтрихкоду(Штрихкод, ЭтотОбъект, ДанныеШтрихкода);
	Возврат ДанныеШтрихкода;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПоискПоШтрихкоду(ШтрихкодПоиска)
	
	Если Элементы.СтраницыОбучения.ТекущаяСтраница = Элементы.ОсновнаяСтраница Тогда
		Возврат;
	КонецЕсли;
	
	ФильтрПоискаПоШтрихкоду = Новый Структура;
	ФильтрПоискаПоШтрихкоду.Вставить("Номенклатура");
	ДанныеШтрихкода = ДанныеПоискаПоШтрихкодуСервер(ШтрихкодПоиска);
	Если ДанныеШтрихкода.ЗначенияПоиска.Количество() = 1 Тогда
		СтрокаРезультата = ДанныеШтрихкода.ЗначенияПоиска[0];
		Если Не СтрокаРезультата = Неопределено Тогда
			Если ЗначениеЗаполнено(СтрокаРезультата.Владелец) Тогда
				СтрокаОпорныхДанных = ПолучитьСтрокуОпорныхДанныхПоНоменклатуре(СтрокаРезультата.Владелец);
				Если Не СтрокаОпорныхДанных = Неопределено Тогда
					ОткрытьФормуПодтвержденияДляНоменклатурыОпорныхДанных(СтрокаОпорныхДанных);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьТиповыеГорячиеКлавиши()
	
	СочетаниеКлавишИзСтроки = ЗначениеИзСтрокиВнутр("{""#"",69cf4251-8759-11d5-bf7e-0050bae2bc79,1,{0,27,0}}");
	
	Если НЕ СочетаниеКлавишИзСтроки = Неопределено Тогда
		Команды.ГорячаяКлавишаESC.СочетаниеКлавиш = СочетаниеКлавишИзСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеЗакрытияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти