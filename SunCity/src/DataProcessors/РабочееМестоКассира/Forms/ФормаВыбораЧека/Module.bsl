
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Заголовок") Тогда
		Заголовок = Параметры.Заголовок;
	КонецЕсли;
	ПроверкаЧека = (Параметры.Свойство("ПроверкаЧека") И Параметры.ПроверкаЧека);
	Если Параметры.Свойство("РежимКассыСамообслуживания") И Параметры.РежимКассыСамообслуживания Тогда
		РежимКассыСамообслуживания = Истина;
		НастроитьФормуВРежимеКассыСамообслуживания(Параметры);
	КонецЕсли;
	
	ЭтоЧекКоррекции = Параметры.Свойство("ЧекКоррекции");
	ЭтоВозвратПродажи = Параметры.Свойство("ВозвратПродажи");
	
	Если Параметры.Свойство("КассоваяСмена") Тогда
		КассоваяСмена = Параметры.КассоваяСмена;
	КонецЕсли;
	
	ОбщегоНазначенияРМКПереопределяемый.СформироватьЗапросТаблицаЧековПоУмолчанию(ЭтотОбъект);
	
	Если ПроверкаЧека И РежимКассыСамообслуживания Тогда
		
		ЗаполнитьТаблицуЧековККМДляПроверки();
		ЗаполнитьТаблицуЧековККМ();
		
	ИначеЕсли Параметры.Свойство("ВозвратПродажи") Или ПроверкаЧека Тогда
		
		ЗаполнитьТаблицуЧековККМ();
		
	ИначеЕсли Параметры.Свойство("ВозвратСкупки") Тогда
		
		ЗаполнитьТаблицуЧековККМНаВозвратСкупки();
		
	ИначеЕсли Параметры.Свойство("ВыборДокументаРассрочки") Тогда
		
		Элементы.ВозвратБезЧека.Видимость = Ложь;
		ЗаполнитьТаблицуЧековККМОплаченныхВРассрочку();
		
	ИначеЕсли Параметры.Свойство("ВыборОтложенногоЧека") Тогда
		
		Элементы.ТаблицаЧековККМНомерККМ.Видимость = Ложь;
		Элементы.ГруппаПодсказкаПоискЧекаПоКоду.Видимость = Ложь;
		Элементы.ВозвратБезЧека.Видимость = Ложь;
		ЗаполнитьТаблицуОтложенныхЧековККМ();
		
	ИначеЕсли Параметры.Свойство("РежимПечатиЧека") Тогда
		
		РежимПечатиЧека = Параметры.РежимПечатиЧека;
		Элементы.ВозвратБезЧека.Видимость = Ложь;
		ЗаполнитьТаблицуЧековККМДляПовторнойПечати();
		
	ИначеЕсли ЭтоЧекКоррекции Тогда
		
		Элементы.ВозвратБезЧека.Видимость = Ложь;
		ЗаполнитьТаблицуЧековККМ(); 
		
	КонецЕсли;
	
	Если Параметры.Свойство("МассивКассККМ") Тогда
		
		МассивКассККМ = Параметры.МассивКассККМ;
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаЧековККМ,
			"МассивКассККМ",
			МассивКассККМ);
			
	КонецЕсли;
	
	Если Параметры.Свойство("МассивОрганизаций") Тогда
		
		МассивОрганизаций = Параметры.МассивОрганизаций;
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаЧековККМ,
			"МассивОрганизаций",
			МассивОрганизаций);
			
	КонецЕсли;
	
	Если Параметры.Свойство("ТорговыйОбъект") Тогда
		
		ТорговыйОбъект = Параметры.ТорговыйОбъект;
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаЧековККМ,
			"ТорговыйОбъект",
			ТорговыйОбъект);
			
	КонецЕсли;
	
	Если Параметры.Свойство("ВыводитьКомментарийКЧеку") Тогда

		Элементы.ТаблицаЧековККМКомментарий.Видимость = Параметры.ВыводитьКомментарийКЧеку;

	КонецЕсли;
	
	Если Не (ПроверкаЧека И РежимКассыСамообслуживания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаЧековККМ,
			"ИсключатьЧекиККМСВозвратами",
			ЭтоЧекКоррекции);
			
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаЧековККМ,
			"ИсключатьЧекиККМПредоплатыЗачтеные",
			ЭтоВозвратПродажи);
	КонецЕсли;
	
	МенеджерОборудованияРМК.ЗаполнитьНачальныеНастройкиОборудования(ЭтотОбъект);
	
	УстановитьУсловноеОформление();
	Если ПроверкаЧека Тогда
		Элементы.ВозвратБезЧека.Видимость = Ложь;
	КонецЕсли;
	
	ИспользоватьПодключаемоеОборудование = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");
	
	ОбщегоНазначенияРМКПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	НастроитьГорячиеКлавиши();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		
		ОповещениеОНачалеПодключения = Новый ОписаниеОповещения(
			"НачатьПодключениеОборудованиеПоИдентификаторуЗавершение",
			ЭтотОбъект);
		
		МенеджерОборудованияРМККлиент.ПодключитьОборудованиеПоТипу(
			ОповещениеОНачалеПодключения, 
			УникальныйИдентификатор, 
			ПоддерживаемыеТипыПодключаемогоОборудования);
		
	КонецЕсли;
	
	ПериодПриИзменении();
	КассаККМПриИзменении(Неопределено);
	ТекущийЭлемент = Элементы.ТаблицаЧековККМ;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ВыбранныйЧек = Неопределено;
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			
			Если Параметр[1] = Неопределено Тогда
				Штрихкод = Параметр[0];
			Иначе
				Штрихкод = Параметр[1][1];
			КонецЕсли;
			
			ВыполнитьПоискЧекаККМ(Штрихкод, ВыбранныйЧек);
			
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	ВернутьВыбранныйЧек(ВыбранныйЧек);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	МенеджерОборудованияРМККлиент.ОтключитьОборудованиеПоТипу(Неопределено, УникальныйИдентификатор, ПоддерживаемыеТипыПодключаемогоОборудования);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	ВыбранныйЧек = Неопределено;
	Если ОбщегоНазначенияРМККлиент.ИспользоватьВнешнееСобытие() И ВводДоступен() Тогда
		
		Если Событие = "Штрихкод" Или Событие = "ПолученШтрихкод" Или Событие = "ScanData" Тогда
			ВыполнитьПоискЧекаККМ(Данные, ВыбранныйЧек);
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	ВернутьВыбранныйЧек(ВыбранныйЧек);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЧековККМДляПроверкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗафиксироватьВыбор();
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ПериодПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	ПериодПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении()
	
	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ТаблицаЧековККМ.КомпоновщикНастроек.Настройки.Отбор.Элементы,
		"ОтборПоДате",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора,
		"Дата",
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		НачалоДня(НачалоПериода),
		НСтр("ru='Начало периода'"),
		ЗначениеЗаполнено(НачалоПериода));
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора,
		"Дата",
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		КонецДня(КонецПериода),
		НСтр("ru='Конец периода'"),
		ЗначениеЗаполнено(КонецПериода));
	
КонецПроцедуры

&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	Использование = ЗначениеЗаполнено(КассаККМ);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ТаблицаЧековККМ,
		"КассаККМ",
		КассаККМ,
		ВидСравненияКомпоновкиДанных.ВСписке,,
		Использование);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаЧеков

&НаКлиенте
Процедура ТаблицаЧековККМВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗафиксироватьВыбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЧековККМДляПроверкиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выбрать(Команда)
	ЗафиксироватьВыбор();
КонецПроцедуры

&НаКлиенте
Процедура ВозвратБезЧека(Команда)
	
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("ВозвратБезЧека");
	Закрыть(СтруктураСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВернутьВыбранныйЧек(ВыбранныйЧек)
	
	Если Не ВыбранныйЧек = Неопределено Тогда
		СтруктураОтвета = Новый Структура("ЧекККМ", ВыбранныйЧек);
		Закрыть(СтруктураОтвета);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуОтложенныхЧековККМ()
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьТаблицуОтложенныхЧековККМ(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЧековККМ()
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьТаблицуЧековККМНаВозврат(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЧековККМДляПроверки()
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьТаблицуЧековККМДляПроверки(ЭтотОбъект);
	УстановитьФокусНаПоследнейСтрокеТаблицыЧековПроверки();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЧековККМДляПовторнойПечати()
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьТаблицуЧековККМДляПовторнойПечати(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьВыбор()
	
	Если ПроверкаЧека И РежимКассыСамообслуживания Тогда
		ТекущиеДанные = Элементы.ТаблицаЧековККМДляПроверки.ТекущиеДанные;
	Иначе
		ТекущиеДанные = Элементы.ТаблицаЧековККМ.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Закрыть();
	Иначе
		
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("ЧекККМ", ТекущиеДанные.Ссылка);
		СтруктураСтроки.Вставить("СуммаРассрочки", ТекущиеДанные.СуммаДокумента);
		
		Если ЗначениеЗаполнено(РежимПечатиЧека) Тогда
			СтруктураСтроки.Вставить("РежимПечатиЧека", РежимПечатиЧека);
		КонецЕсли;
		
		Закрыть(СтруктураСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискЧекаККМ(Штрихкод, ВыбранныйЧек = Неопределено)
	
	РасшифровкаКода = МенеджерОборудованияКлиентСервер.РасшифроватьQRКодЧекаККТ(Штрихкод);
	
	УстановитьПривилегированныйРежим(Истина);
	
	НайденныеЧеки = Новый Массив;
	
	Если РасшифровкаКода.Расшифрован Тогда
		Запрос = Новый Запрос;
		ОбщегоНазначенияРМКПереопределяемый.СформироватьЗапросЧекПоФискальномуПризнаку(Запрос, ЭтотОбъект, РасшифровкаКода);
		Если Не ЗначениеЗаполнено(Запрос.Текст) Тогда
			ТекстОшибки = НСтр("ru = 'Не сформирован запрос для поиска чека по фискальному признаку.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		ВыборкаНайденныхЧеков = Запрос.Выполнить().Выбрать();
		Пока ВыборкаНайденныхЧеков.Следующий() Цикл
			ДобавитьНайденныйЧек(НайденныеЧеки, ВыборкаНайденныхЧеков);
		КонецЦикла;
		
	Иначе
		
		ВыборкаНайденныхЧеков = ПодготовитьВыборкуФискальныхЧековСОтборомПоШтрихкоду(Штрихкод);
		Пока ВыборкаНайденныхЧеков.Следующий() Цикл
			ДобавитьНайденныйЧек(НайденныеЧеки, ВыборкаНайденныхЧеков);
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РежимКассыСамообслуживания И НайденныеЧеки.Количество() = 0 Тогда
		
		ПоказатьОшибкуСканированияЧека();
		
	ИначеЕсли РежимКассыСамообслуживания И НайденныеЧеки.Количество() = 1 Тогда
		
		ВыбранныйЧек = ?(ПроверкаЧека, НайденныеЧеки[0].Ссылка, НайденныеЧеки[0]);
		
	ИначеЕсли НайденныеЧеки.Количество() > 0 Тогда
		
		ОтобразитьНайденныеЧекиВТаблице(НайденныеЧеки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьВыборкуФискальныхЧековСОтборомПоШтрихкоду(Штрихкод)
	
	Запрос = Новый Запрос;
	ОбщегоНазначенияРМКПереопределяемый.СформироватьЗапросЧекПоШтрихкоду(Запрос, ЭтотОбъект, Штрихкод);

	ВыборкаЧеков = Запрос.Выполнить().Выбрать();
	Возврат ВыборкаЧеков;
	
КонецФункции

&НаСервере
Процедура ДобавитьНайденныйЧек(НайденныеЧеки, СтрокаВыборки)
	
	Если ПроверкаЧека И РежимКассыСамообслуживания Тогда
		ДанныеЧека = Новый Структура;
		ДанныеЧека.Вставить("Ссылка", СтрокаВыборки.Ссылка);
		ДанныеЧека.Вставить("НомерЧека", СтрокаВыборки.НомерЧека);
		ДанныеЧека.Вставить("Дата", СтрокаВыборки.Дата);
		ДанныеЧека.Вставить("СуммаДокумента", СтрокаВыборки.СуммаДокумента);
		НайденныеЧеки.Добавить(ДанныеЧека);
	Иначе
		НайденныеЧеки.Добавить(СтрокаВыборки.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьНайденныеЧекиВТаблице(НайденныеЧеки)
	
	Если ПроверкаЧека И РежимКассыСамообслуживания Тогда
		
		ТаблицаЧековККМДляПроверки.Очистить();
		Для Каждого ДанныеЧека Из НайденныеЧеки Цикл
			НоваяСтрока = ТаблицаЧековККМДляПроверки.Вставить(0);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЧека);
		КонецЦикла;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
			ТаблицаЧековККМ,
			"Дата");
			
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
			ТаблицаЧековККМ,
			"КассаККМ");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ТаблицаЧековККМ,
			"Ссылка",
			НайденныеЧеки,
			ВидСравненияКомпоновкиДанных.ВСписке);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкуСканированияЧека()
	
	ТекстОшибкиСканирования = НСтр("ru = 'По отсканированному QR-коду не найден чек.'");
	Если Не Элементы.ТекстОшибкиСканирования.Видимость Тогда
		Элементы.ТекстОшибкиСканирования.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодключениеОборудованиеПоИдентификаторуЗавершение(Данные, ДополнительныеПараметры) Экспорт

	Если НЕ Данные.Результат Тогда
		
		ОписаниеОшибки = СтрЗаменить(Данные.ОписаниеОшибки, "'", "");
		
		СтрокаПредупреждения = НСтр("ru = 'При подключении устройства произошла ошибка:
									|""%1"".';
									|en = 'An error occurred when connecting the device:
									|""%1"".'");
		ТекстПредупреждения = СтрШаблон(СтрокаПредупреждения, ОписаниеОшибки);
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЧековККМНаВозвратСкупки()
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьТаблицуЧековККМНаВозвратСкупки(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЧековККМОплаченныхВРассрочку()
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьТаблицуЧековККМОплаченныхВРассрочку(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	ИмяПоля = СтрШаблон("%1%2", Элементы.ТаблицаЧековККМ.Имя, "Дата");
	ИмяПутиПоля = СтрШаблон("%1.%2", Элементы.ТаблицаЧековККМ.Имя, "Дата");
	Если Элементы.ТаблицаЧековККМДляПроверки.Видимость Тогда
		ИмяПоля = СтрШаблон("%1%2", Элементы.ТаблицаЧековККМДляПроверки.Имя, "Дата");
		ИмяПутиПоля = СтрШаблон("%1.%2", Элементы.ТаблицаЧековККМДляПроверки.Имя, "Дата");
	КонецЕсли;
	
	// Представление даты сегодня.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Формат", НСтр("ru = 'ДФ=ЧЧ:мм'"));
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяПутиПоля);
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбора.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяПутиПоля);
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбора.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоСледующегоДня);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуВРежимеКассыСамообслуживания(ПараметрыОткрытия)
	
	КоэффициентМасштаба = 1.5;
	ШиринаКнопок = 18;
	Если ПараметрыОткрытия.Свойство("Масштаб") Тогда
		Масштаб = КоэффициентМасштаба * ПараметрыОткрытия.Масштаб;
	Иначе
		Масштаб = КоэффициентМасштаба * Масштаб;
	КонецЕсли;
	
	Элементы.Переместить(Элементы.Закрыть, Элементы.ГруппаОперации, Неопределено);
	Элементы.ГруппаОперации.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
	Элементы.ГруппаОперации.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Центр;
	Элементы.НадписьПодсказкаПоискЧекаПоКоду.Заголовок = НСтр("ru='Отсканируйте код на чеке или выберите из списка'");
	Элементы.НадписьПодсказкаПоискЧекаПоКоду.Шрифт = ШрифтыСтиля.КрупныйШрифтТекста;
	Элементы.НадписьПодсказкаПоискЧекаПоКоду.АвтоМаксимальнаяШирина = Ложь;

	Если ПроверкаЧека Тогда
		Элементы.ГруппаОтборыСписка.Видимость = Ложь;
		Элементы.ТаблицаЧековККМ.Видимость = Ложь;
		Элементы.ТаблицаЧековККМДляПроверки.Видимость = Истина;
	КонецЕсли;
	
	Элементы.Закрыть.Ширина = ШиринаКнопок;
	Элементы.Выбрать.Ширина = ШиринаКнопок;
	Элементы.Закрыть.Шрифт = ШрифтыСтиля.КрупныйШрифтТекста;
	Элементы.Выбрать.Шрифт = ШрифтыСтиля.КрупныйШрифтТекста;
	Элементы.Закрыть.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Авто;
	Элементы.ДекорацияРасширитель.Видимость = Ложь;
	
	НастроитьОтступыФормы(ПараметрыОткрытия);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтступыФормы(ПараметрыОткрытия)
	
	ВысотаОтступаВВертикальнойОриентации = 4;
	Элементы.ДекорацияОтступСверху.Видимость = Истина;
	Элементы.ДекорацияОтступСнизу.Видимость = Истина;
	Если ПараметрыОткрытия.ВертикальнаяОриентация Тогда
		Элементы.ДекорацияОтступСверху.Высота = ВысотаОтступаВВертикальнойОриентации;
		Элементы.ДекорацияОтступСнизу.Высота = ВысотаОтступаВВертикальнойОриентации;
	Иначе
		Элементы.ДекорацияОтступСлева.Видимость = Истина;
		Элементы.ДекорацияОтступСправа.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьГорячиеКлавиши()
	
	Если Параметры.Свойство("СочетаниеКлавишВозвратБезЧека") И Элементы.ВозвратБезЧека.Видимость Тогда
		Элементы.ВозвратБезЧека.СочетаниеКлавиш = Параметры.СочетаниеКлавишВозвратБезЧека;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФокусНаПоследнейСтрокеТаблицыЧековПроверки()
	
	КоличествоСтрок = ТаблицаЧековККМДляПроверки.Количество();
	Если КоличествоСтрок > 0 Тогда
		ПоследняяСтрока = ТаблицаЧековККМДляПроверки.Получить(КоличествоСтрок - 1);
		Элементы.ТаблицаЧековККМДляПроверки.ТекущаяСтрока = ПоследняяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти