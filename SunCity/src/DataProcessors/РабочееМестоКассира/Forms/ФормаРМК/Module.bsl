
#Область ОписаниеПеременных

&НаКлиенте
Перем ИдентификаторЗамераПробитияЧека, ИдентификаторЗамераВремениПоиска;

&НаКлиенте
Перем ЭлектронныеВесыЗаняты;

&НаКлиенте
Перем ДанныеКПередачеВДисплейПокупателя, ТипыОперацийДисплеяПокупателя;

&НаКлиенте
Перем ВременныйКонтекстПроверкиМарки, ПараметрыПроверкиКодовМаркировки;

&НаКлиенте
Перем ПараметрыПодключенияКСерверуЛояльности;

&НаКлиенте
Перем ДанныеДляОтчетаЗаСмену;

&НаКлиенте
Перем ДанныеДляОтчетаПоОФД;

&НаКлиенте
Перем ПоискТоваровОткрытИзСтрокиВвода;

&НаКлиенте
Перем СчетчикНажатийНаКупюры;

&НаКлиенте
Перем ПредыдущийСлойДоДанныхПокупателя;

&НаКлиенте
Перем ЭлементВводаСуммы;

&НаКлиенте
Перем ЭлементВводаДанныхПокупателя;

&НаКлиенте
Перем ОбновлятьСуммуАванса;

&НаКлиенте
Перем ПереключениеЦифровойПанели;

&НаКлиенте
Перем ТекстДатыРожденияСозданиеКарты;

&НаКлиенте
Перем СуммаТекущейОплатыКартой;

// Признак, указывающий, что в данный момент изменение значения в выбранном поле происходит в результате
// ввода с цифровой клавиатуры формы РМК.
&НаКлиенте
Перем ВводСЦифровойКлавиатуры;

// В переменной хранится строка таблицы товаров, в которой надо изменить количество после подтверждения
// кода сотрудником.
&НаКлиенте
Перем ТекущаяСтрокаРедактированияКоличества;

// Переменная указывает, что процесс обновления количества не завершен.
&НаКлиенте
Перем ОбновлениеКоличестваЗапущено;

// Признак того, что пробитие чека запущено со страницы "Отправка чека" данных покупателя.
&НаКлиенте
Перем ПробитиеСоСтраницыОтправкиЧека;

// Структура с данными об оплате платежной системой при отправке чека со страницы "Отправка чека".
&НаКлиенте
Перем ПараметрыОплатыПлатежнойСистемой;

// Структура с дополнительными параметрами для вывода на экран перед показом стартовой страницы.
&НаКлиенте
Перем ПараметрыПустойСтраницы;

// Структура с возможными вариантами типов построения плитки: 0 - по палитре, 1 - весовой товар,
// 3 - распознанный весовой товар.
&НаКлиенте
Перем ТипыПостроенияПлитки Экспорт;

// Текущий тип построения плитки.
&НаКлиенте
Перем ТипПостроенияПлитки Экспорт;

// Таблица клиентская (массив структур) с иерархией построения плитки для текущего типа построения.
&НаКлиенте
Перем ДанныеДляПлитки Экспорт;

// Признак того, что при получении веса надо выводить сообщение о не заполненном весе,
// если полученный вес нулевой
&НаКлиенте
Перем ОжиданиеКонтроляВеса;

// Массив видов оплат, которые настроены и используются на момент открытия формы РМК,
&НаКлиенте
Перем ИспользуемыеВидыОплат Экспорт;

// Признак того, что панель данных покупателя открыта процессом перехода к оплате,
// при котором запрашивается ввод карты лояльности и оплаты бонусами
&НаКлиенте
Перем ПанельПокупателяВПроцессеПереходаКОплате;

// Признак того, что запущен диалог ввода бонусов при переходе к оплате
&НаКлиенте
Перем ОткрытДиалогВводаБонусов;

#Область АвтоподборПартий

// Признак того, что в системе используются партии товаров
// и включена настройка автоматического подбора
// 0 - не использовать; 1 - сначала свои; 2 - сначала чужие
&НаКлиенте
Перем ИспользоватьАвтоподборПартий Экспорт;

// Признак того, что для текущей корзины уже был выполнен автоподбор партий
&НаКлиенте
Перем ПартииПодобраны;

#КонецОбласти

// Время, когда открыли страницу подтверждения кода сотрудника для служебных действий. 
// Чтобы случайное считывание сканером кода сотрудника два раза не обработать как отдельное, второе сканирование
&НаКлиенте
Перем ДатаВремяПереходаКДействиямСотрудника;

// Структура для хранения временных клиентских данных
&НаКлиенте
Перем ДанныеДляОбработки Экспорт;

// Признак того, что распознавание весового товара уже было в рамках текущей операции взвешивания
&НаКлиенте
Перем РаспознаваниеБыло Экспорт;

// Идентификатор электронных весов, на которых происходит взвешивание в текущей операции выбора весового товара
&НаКлиенте
Перем ТекущиеЭлектронныеВесы Экспорт;

// Структура аналогичная пустой строке таблицы товаров
&НаКлиенте
Перем ПустаяСтрокаТаблицыТоваров;

// Структура, содержащая кэши строк таблицы товаров, используемые при добавления строки.
&НаКлиенте
Перем КэшиСтрокТоваров;

// Признак, определеяющий использование расчета скидок на форме РМК
&НаКлиенте
Перем ВключеноИспользованиеАвтоматическихСкидок;

// Признак того, что в текущем чеке уже был отказ от ввода карты лояльности или оплаты бонусами.
// Устанавливается в Ложь для каждого нового чека.
&НаКлиенте
Перем ОтказОтОплатыБонусами;

// При построении плитки с распознанным товаром, запоминает какой тип построения был,
// чтобы вернуться обратно к нему после распознавания
&НаКлиенте
Перем ТипПостроенияПлиткиДоРаспознавания;

// см. ШтрихкодированиеОбщегоНазначенияИСМПКлиент.НовыеПараметрыПроверкиНаККТ
&НаКлиенте
Перем ПараметрыПроверкиСредствамиККТ;

// Признак инициализации формы, устанавливается в Истина в процедуре ИнициализироватьФормуРабочегоМестаКассира
&НаКлиенте
Перем ФормаРМКИнициализирована;

// Структура, содержащая параметры закрытия смены при выполнении автоматической выемки.
&НаКлиенте
Перем ПараметрыЗакрытияСменыПриАвтоматическойВыемке;

// Структура, содержащая сохраняемые на клиенте данные контроля продаж для номенклатуры, которая есть в кэше плитки,
// которая есть в текущей корзине, чтобы не обращаться на сервер. когда строка добавляется только по данным на клиенте.
// Описание структуры в "интерфейсРМКСлужебныйКлиентСервер.ШаблонКэшаКонтроляПродаж()"
&НаКлиенте
Перем КэшКонтроляПродаж Экспорт;

// Структура, содержащая результат проверки номенклатуры по условиям контроля продаж.
// Описание структуры 
&НаКлиенте
Перем РезультатКонтроляПродаж Экспорт;

// Признак открытия страницы с предупреждением о невозможности оплаты бонусами
&НаКлиенте
Перем ОткрытоПредупреждениеОЗапретеОплатыБонусами Экспорт;

// Строка списка товаров общей номенклатуры при иерархическом режиме просмотра
&НаКлиенте
Перем ОбщаяСтрокаНоменклатурыВИерархии;

// Номер варианта отображения каталога до выбора общей строки номенклатуры
&НаКлиенте
Перем ВариантОтображенияКаталогаДоВыбораОбщейСтроки;

// Заказ покупателя найденный по штрихкоду, используется для заполнения из обработчика ожидания.
&НаКлиенте
Перем ЗаказПокупателяДляЗаполнения;

// Признак отображения QR кода на кнопке тихой оплаты наличными.
// Если Ложь то отображается картинка наличных.
&НаСервере
Перем СкрыватьQRОплатыНаличными;

// Признак отображения QR кода на кнопке тихой оплаты платежной картой.
// Если Ложь то отображается картинка платежной карты.
&НаСервере
Перем СкрыватьQRОплатыКартой;

// Массив реквизитов объекта.
&НаКлиенте
Перем РеквизитыОбъекта Экспорт;

// Структура с массивами колонок таблиц, для обмена с клиента на сервер при подготовке чека.
&НаКлиенте
Перем КолонкиТаблицФормы Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ПроверкаОткрытойформы") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЭтоМобильныйКлиент = ОбщегоНазначения.ЭтоМобильныйКлиент();
	Если ЭтоМобильныйКлиент Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Мобильный клиент не поддерживается.'"));
		Возврат;
	КонецЕсли;
	
	МожноОткрыватьРМК = Истина;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьВозможностьЗапускаРМК(МожноОткрыватьРМК);
	Если Не МожноОткрыватьРМК Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПредыдущийСлойДоДанныхПокупателя = Неопределено;
	УстановитьПризнакиПоУмолчаниюПриСоздании();
	ИнициализироватьПеречисленияФормы();
	ЦветаФормы = ОбщегоНазначенияРМК.ЦветаФормыРМК();
	ОбщегоНазначенияРМК.ЛокализоватьКартинки(ЭтотОбъект);
	ПредставлениеВалюты = ОбщегоНазначенияРМК.ПредставлениеВалюты();
	
	МенеджерОборудованияРМК.ЗаполнитьНачальныеНастройкиОборудования(ЭтотОбъект);
	
	ЗаполнитьФормуПриСозданииНаСервере();
	
	ПодготовитьПлиточныйИнтерфейсПодбора();
	СформироватьЭлементыПодбораЗначений();
	ИнтерфейсРМКСлужебный.НастроитьЭлементыФормыПриСозданииНаСервере(ЭтотОбъект);
	
	ПродажиРМК.МодифицироватьИнициализироватьФормуРМК(ЭтотОбъект);
	ОбновитьКэшОсобенностейУчетаБезМарки();
	
	СоздатьЭлементыНастроекКаталога();
	
	ОбщегоНазначенияРМК.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ (Объект.Товары.Количество() = 0 Или ФормаЗамороженаПослеПробитияЧека()) Тогда
		
		Отказ = Истина;
		ТекстПредупреждения =
			НСтр("ru = 'Перед закрытием программы необходимо пробить, отложить или удалить текущий чек.'");
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИнициализироватьКлиентскиеПеременные();
	ИнициализироватьКлиентскиеПеречисленияФормы();
	// устанавливает признак режима работы РМК
	ОбщегоНазначенияРМККлиент.УстановитьРежимРМК();
	ИнтерфейсРМКСлужебныйКлиент.УстановитьОтображениеЗаголовкаФормы(ЭтотОбъект);
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.Страницы.ТекущаяСтраница);
	
	Если НЕ ЗначениеЗаполнено(РабочееМесто) Тогда
		ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьРабочееМесто(ЭтотОбъект);
	КонецЕсли;
	
	ВыполнитьСерверныеДействияДляКлиента();
	ОтложеннаяПроверкаКассовойСмены = Ложь;
	Если НЕ ПараметрыОткрытияФормы = Неопределено Тогда
		ПроверитьФормуПриОткрытии(Отказ, ОтложеннаяПроверкаКассовойСмены);
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Кассир) Тогда
		НастроитьВспомогательноеПодключаемоеОборудование();
	КонецЕсли;
	
	Если РежимКассыСамообслуживания Тогда
		ОформитьРежимНовогоЧека("Продажа");
	КонецЕсли;
	ИзменитьКартинкуВводПокупателя();
	ПоискТоваровОткрытИзСтрокиВвода = Ложь;

	ДанныеДляПлитки = Новый Массив;
	ТипПостроенияПлитки = ТипыПостроенияПлитки.ПоПалитре;
	ИнтерфейсРМКСлужебныйКлиент.ПодготовитьДанныеДляПлитки(ЭтотОбъект);
	ЗаполнитьКнопкиИзбранныхПозиций();
	ЗаполнитьКнопкиПлиток();
	НастроитьКомандыОплаты();
	
	СкрытьКомандуЗавершенияРаботыПриНеобходимости();
	Если РежимНачальнойСтраницы = 1 Тогда
		ОбновитьСостояниеЭлементовПриИзмененииТаблицыТоваров();
	КонецЕсли;
	ПереключатьсяВРежимПлитки = ОсновнойПодборПлиточный;
	ПереключитьВРежимПлитки();	
	ОбновлятьСуммуАванса = Ложь;
	ПереключениеЦифровойПанели = Ложь;
	ВводСЦифровойКлавиатуры = Ложь;
	ТекущаяСтрокаРедактированияКоличества = Неопределено;
	ОбновлениеКоличестваЗапущено = Ложь;
	УстановитьПризнакХочуБумажныйЧек(ПечататьБумажныйЧек);
	ПробитиеСоСтраницыОтправкиЧека = Ложь;
	Если ОтложеннаяПроверкаКассовойСмены Тогда
		ПодключитьОбработчикОжидания("ПроверитьКассовуюСменуИНайтиКассираВФоне", 0.1, Истина);
	КонецЕсли;
	НастроитьДоступностьГорячейКлавишиEnter();
	ФильтрПоискаПоШтрихкоду = Новый Структура("Номенклатура");
	ПустаяСтрокаТаблицыТоваров = СтруктураПустойСтрокиТаблицыТоваров();
	КэшиСтрокТоваров = ОбщегоНазначенияРМККлиент.СтруктураКэшовСтрокТоваров();
	ЗаполнитьКэшПлитки();
	ПараметрыЗакрытияСменыПриАвтоматическойВыемке = ОбщегоНазначенияРМККлиент.ПараметрыЗакрытияСменыПриАвтоматическойВыемке();
	ОтразитьОстаткиНаличныхДенежныхСредствНаФорме(Объект.Организация, Объект.КассаККМ);
	
	Если Не ПараметрыОткрытияФормыГосИС = Неопределено Тогда
		ОбработатьПараметрыГосИС();
	КонецЕсли;
	
	НастроитьОтображениеКаталогаПриОткрытии();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеСостоянияКассовойСмены" Тогда
		ИзменитьСостояниеКассовойСмены();
	КонецЕсли;
	
	Если ИспользоватьРазрешительныйРежимГосИС Тогда
		
		ОбщегоНазначенияРМККлиент.ОбработкаОповещенияПриПроверкеСредствамиККТ(
			ЭтотОбъект, ИмяСобытия, Параметр, Источник);
			
		Если Источник = ЭтотОбъект
			Или Источник = УникальныйИдентификатор Тогда
			
			ИменаСобытийПроверкиККТ = ОбщегоНазначенияРМККлиент.ИменаСобытийПроверкиСредствамиККТ();
			
			Если ИмяСобытия = ИменаСобытийПроверкиККТ.ИмяСобытияОповещенияИзменилосьСостояниеПроверкиСредствамиККТ Тогда
			
				ПараметрыПроверкиСредствамиККТ = Параметр;
				// TODO: Обновить отображение: начало проверки ККТ
			
			ИначеЕсли ИмяСобытия = ИменаСобытийПроверкиККТ.ИмяСобытияОповещенияСледующегоШагаПроверкиСредствамиККТ Тогда
			
				ПодключитьОбработчикОжидания("Подключаемый_ВыполнениеШагаПроверкиСредствамиККТ", Параметр, Истина);
				
			ИначеЕсли ИмяСобытия = ИменаСобытийПроверкиККТ.ИмяСобытияОповещенияЕстьОшибкиПроверкиСредствамиККТ Тогда
				
				Если ОбщегоНазначенияРМККлиент.ЕстьОшибкиПроверкиСредствамиККТ(Параметр) Тогда
				
					ТекстыОшибок = Новый Массив();
					Для Каждого КлючИЗначение Из ПараметрыПроверкиСредствамиККТ.Результат.ДанныеПроверки Цикл
						СтрокаРезультат = КлючИЗначение.Значение;
						Если ЗначениеЗаполнено(СтрокаРезультат.ТекстОшибки) Тогда
							ТекстыОшибок.Добавить(СтрокаРезультат.ТекстОшибки);
						КонецЕсли;
					КонецЦикла;
					
					ЗаголовокОшибки = НСтр("ru='Предупреждение'");
					ТекстСообщения = СтрСоединить(ТекстыОшибок, Символы.ПС);
					ПараметрыОшибки = Новый Структура("ЭтоПредупреждение", Истина);
					ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстСообщения, ПараметрыОшибки);
				
				Иначе
					
					ИмяРеквизитаКодМаркировкиДляУточнения = "КодМаркировкиДляУточнения";
					РезультатОбработкиШтрихкода = ЭтотОбъект[ИмяРеквизитаКодМаркировкиДляУточнения].РезультатОбработкиШтрихкода;
					ДанныеШтрихкодаЗавершение = РезультатОбработкиШтрихкода.ДанныеШтрихкода;
					
					Если ДанныеШтрихкодаЗавершение.Свойство("ВнешниеДанныеПоШтрихкодам") Тогда
						ВнешниеДанныеПоШтрихкодам = ДанныеШтрихкодаЗавершение.ВнешниеДанныеПоШтрихкодам[0];
						ПараметрыДляОбработкиШтрихкода = ВнешниеДанныеПоШтрихкодам.ПараметрыДляОбработкиШтрихкода;
						ПараметрыДляОбработкиШтрихкода.Вставить("ПодтверждениеПродажиМаркиГосИС", Истина);
					КонецЕсли;
					
					ПроверкаКодаМаркировкиПриСканированииЗавершение(ДанныеШтрихкодаЗавершение);
					
				КонецЕсли;
					
			// TODO: Отобразить ошибку и если ее возможно игнорировать - предложить пробить чек
			
			ИначеЕсли ИмяСобытия = ИменаСобытийПроверкиККТ.ИмяСобытияОповещенияПрогрессПолученияИдентификаторовЗапросаГИСМТ Тогда
			
				ДанныеСтрокиСообщения = Новый Массив();
				ДанныеСтрокиСообщения.Добавить(НСтр("ru = 'Выполняется разрешительный запрос ГИС МТ'"));
				ДанныеСтрокиСообщения.Добавить(Символы.ПС);
				ДанныеСтрокиСообщения.Добавить(НСтр("ru = 'Пожалуйста, подождите...'"));
				
				// TODO: Отображение прогресса проверки резрешительным запросом
				
				ЗаголовокОшибки = НСтр("ru='Информация'");
				ТекстСообщения = СтрСоединить(ДанныеСтрокиСообщения, "");
				ПараметрыОшибки = Новый Структура("ЭтоПредупреждение", Истина);
				ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстСообщения, ПараметрыОшибки);
				
			ИначеЕсли ИмяСобытия = ИменаСобытийПроверкиККТ.СобытиеПроверкаКМ Тогда
				
				ВыполняемыеОперации = ОбщегоНазначенияРМККлиент.ВыполняемыеОперацииПроверкиСредствамиККТ();
				ОперацииПроверкиКМ = ОбщегоНазначенияРМККлиент.СписокОперацийПроверкиКМ();
				Если Параметр.Операция = ОперацииПроверкиКМ.ЗапросККТ Тогда
					ПараметрыПроверкиСредствамиККТ.ТекущийЭтапПроверки = ВыполняемыеОперации.ЛокальнаяПроверка;
				ИначеЕсли Параметр.Операция = ОперацииПроверкиКМ.ЗапросОИСМ Тогда
					ПараметрыПроверкиСредствамиККТ.ТекущийЭтапПроверки = ВыполняемыеОперации.УдаленнаяПроверка;
				ИначеЕсли Параметр.Операция = ОперацииПроверкиКМ.ПодтверждениеККТ Тогда
					ПараметрыПроверкиСредствамиККТ.ТекущийЭтапПроверки = ВыполняемыеОперации.Подтверждение;
				Иначе
					Возврат;
				КонецЕсли;
				
				ДополнительныеПараметры = Параметр.ДополнительныеПараметры;
				КоличествоЭлементов     = ПараметрыПроверкиСредствамиККТ.ЭлементыПроверки.Количество();
				ЭлементПроверки         = ОбщегоНазначенияРМККлиент.ТекущийЭлементПроверкиСредствамиККТ(ПараметрыПроверкиСредствамиККТ);
				НомерТекущегоЭлемента   = ПараметрыПроверкиСредствамиККТ.ТекущийИндекс + 1;
				ПараметрыПроверкиСредствамиККТ.ТекущийИндекс = ДополнительныеПараметры.ИндексЭлемента;
				
				Для Каждого ЭлементПроверки Из ПараметрыПроверкиСредствамиККТ.ЭлементыПроверки Цикл
					Если Не ОбщегоНазначенияРМККлиент.ЭлементПроверкиСредствамиКТТПроверяетсяНаОборудовании(ЭлементПроверки) Тогда
						КоличествоЭлементов = КоличествоЭлементов - 1;
					КонецЕсли;
				КонецЦикла;
				
				ДанныеСтрокиСообщения = Новый Массив();
				Если ПараметрыПроверкиСредствамиККТ.ТекущаяОперация = ВыполняемыеОперации.ЛокальнаяПроверка Тогда
					ДанныеСтрокиСообщения.Добавить(НСтр("ru = 'Выполняется локальная проверка средствами КТТ кода маркировки:'"));
				ИначеЕсли ПараметрыПроверкиСредствамиККТ.ТекущаяОперация = ВыполняемыеОперации.УдаленнаяПроверка Тогда
					ДанныеСтрокиСообщения.Добавить(НСтр("ru = 'Выполняется проверка статуса ОИСМ кода маркировки средствами ККТ:'"));
				ИначеЕсли ПараметрыПроверкиСредствамиККТ.ТекущаяОперация = ВыполняемыеОперации.Подтверждение Тогда
					ДанныеСтрокиСообщения.Добавить(НСтр("ru = 'Выполняется подтверждение кода маркировки на КТТ:'"));
				ИначеЕсли ПараметрыПроверкиСредствамиККТ.ТекущаяОперация = ВыполняемыеОперации.ПроверкаИдентификатораГИСМТ
					Или ПараметрыПроверкиСредствамиККТ.ТекущаяОперация = ВыполняемыеОперации.ПолучениеТокенаГИСМТ Тогда
					ДанныеСтрокиСообщения.Добавить(НСтр("ru = 'Выполняется разрешительный запрос ГИС МТ'"));
				ИначеЕсли ПараметрыПроверкиСредствамиККТ.ТекущаяОперация = ВыполняемыеОперации.ПроверкаЕдинымМетодомБПО Тогда
					Если ПараметрыПроверкиСредствамиККТ.ТекущийЭтапПроверки = ВыполняемыеОперации.ЛокальнаяПроверка Тогда
						ДанныеСтрокиСообщения.Добавить(НСтр("ru = 'Выполняется локальная проверка средствами КТТ кода маркировки:'"));
					ИначеЕсли ПараметрыПроверкиСредствамиККТ.ТекущийЭтапПроверки = ВыполняемыеОперации.УдаленнаяПроверка Тогда
						ДанныеСтрокиСообщения.Добавить(НСтр("ru = 'Выполняется проверка статуса ОИСМ кода маркировки средствами ККТ:'"));
					ИначеЕсли ПараметрыПроверкиСредствамиККТ.ТекущийЭтапПроверки = ВыполняемыеОперации.Подтверждение Тогда
						ДанныеСтрокиСообщения.Добавить(НСтр("ru = 'Выполняется подтверждение кода маркировки на КТТ:'"));
					КонецЕсли;
				КонецЕсли;
				
				ДанныеСтрокиСообщения.Добавить(" ");
				ДанныеСтрокиСообщения.Добавить(ЭлементПроверки.КодМаркировки);
				
				Если КоличествоЭлементов > 1 Тогда
					
					ДанныеСтрокиСообщения.Добавить(Символы.ПС);
					ДанныеСтрокиСообщения.Добавить(
						СтрШаблон(
							НСтр("ru = 'Код маркировки %1 из %2'"),
							НомерТекущегоЭлемента,
							КоличествоЭлементов));
					
				КонецЕсли;
				
				ДанныеСтрокиСообщения.Добавить(Символы.ПС);
				ДанныеСтрокиСообщения.Добавить(НСтр("ru = 'Пожалуйста, подождите...'"));
				
				// TODO: Отображение прогресса проверки средствами ККТ
				
				ЗаголовокОшибки = НСтр("ru='Информация'");
				ТекстСообщения = СтрСоединить(ДанныеСтрокиСообщения, "");
				ПараметрыОшибки = Новый Структура("ЭтоПредупреждение", Истина);
				ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстСообщения, ПараметрыОшибки);
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если ПрерватьОбработкуОповещения() Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник = "ПодключаемоеОборудование" И ЭтоПолучениеСтабильногоВеса(ИмяСобытия, Параметр) Тогда
		
		ОбработатьПолучениеВесаОтЭлектронныхВесов(Параметр.Вес, Параметр.ИдентификаторУстройства);
	
	ИначеЕсли Источник = "ПодключаемоеОборудование" И ЭтоНажатиеНаДисплееПокупателя(ИмяСобытия) Тогда
		
		Если ЗначениеЗаполнено(ДанныеКПередачеВДисплейПокупателя.ЧекФискализации) Тогда
			НапечататьФискальныйЧекБезФискализации(ДанныеКПередачеВДисплейПокупателя.ЧекФискализации);
		КонецЕсли;
	
	ИначеЕсли Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		
		Если НЕ РежимПоказаСкидок Тогда
			ПереключитьРежимПоказаОстатков(Ложь);
		ИначеЕсли РежимРасчетаСкидокСтрока ИЛИ РежимПоказаСкидок 
			И НЕ ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека) = Элементы.ГруппаНайтиВЧеке
			И НЕ Элементы.ГруппаВводПромокода.Видимость Тогда
			ПереключитьРежимНаПоказСкидок(Ложь);
		КонецЕсли;
		
		Если ИмяСобытия = "ScanData" Тогда
			
			Штрихкод = ?(Параметр[1] = Неопределено, Параметр[0], Параметр[1][1]);
			ВыполнитьПоискШтрихкода(Штрихкод);
			
		ИначеЕсли ИмяСобытия = "ScanDataBase64" Тогда
			
			ШтрихкодBase64 = ?(Параметр[1] = Неопределено, Параметр[0], Параметр[1][1]);
			МенеджерОборудованияРМККлиентСервер.Base64ВШтрихкод(ШтрихкодBase64, Штрихкод);
			ВыполнитьПоискШтрихкода(Штрихкод);
			
		ИначеЕсли ИмяСобытия = "TracksData" И ИспользуетсяСчитывательМагнитныхКарт Тогда
			ВыполнитьПоискМагнитнойКарты(Параметр[0]);
		Иначе
			Возврат;
		КонецЕсли;
		
	ИначеЕсли Источник = "ФормаТарированияВесов" И ИмяСобытия = "ТарированиеВесов" Тогда
		
		Если ЕстьСвойство(Параметр, "ВесТары") Тогда
			ВесТары = Параметр.ВесТары;
		КонецЕсли;
		
		Если ЕстьСвойство(Параметр, "ЭлектронныеВесыЗаняты") Тогда
			ЭлектронныеВесыЗаняты = Параметр.ЭлектронныеВесыЗаняты;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "СохранениеНастроекРМК" Тогда
		
		Если ЕстьСвойство(Параметр, "НастройкаЗаписана") И Параметр.НастройкаЗаписана Тогда
			СозданиеНастройкиРМКЗавершение(Истина, Неопределено);
		Иначе
			ЗакрытьПриложениеПриОшибке(Истина);
		КонецЕсли;
		
	Иначе
		
		ОбработатьОповещениеНаСервере = Ложь;
		ОбщегоНазначенияРМККлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник,
			ОбработатьОповещениеНаСервере);
		
		Если ОбработатьОповещениеНаСервере Тогда
			ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ТипЗнч(ПоддерживаемыеТипыПодключаемогоОборудования) = Тип("Структура") Тогда
		ПоддерживаемыеТипыПодключаемогоОборудования.ККТ = Истина;
		ПоддерживаемыеТипыПодключаемогоОборудования.УстройствоРаспознавания = Истина;
	КонецЕсли;
	МенеджерОборудованияРМККлиент.ОтключитьОборудованиеПоТипу(Неопределено, УникальныйИдентификатор, ПоддерживаемыеТипыПодключаемогоОборудования);
	
	ОбщегоНазначенияРМККлиент.СброситьРежимРМК();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.РМКУправляемыйРежим.Форма.ФормаПодборТовара"
		Или ИсточникВыбора.ИмяФормы = "Справочник.ПалитраТоваровРМК.Форма.ПлиточныйИнтерфейсВыбораТоваров" Тогда
		МассивДанных = Новый Массив;
		ОбщегоНазначенияРМККлиентПереопределяемый.ДозаполнитьДанныеРучногоВыбора(ВыбранноеЗначение,
			МассивДанных, ЭтотОбъект);
		
		Для Каждого СтрокаМассива Из МассивДанных Цикл
			СписокТоваровВыборКлиент(СтрокаМассива, , Истина);
		КонецЦикла;
		
		ЭтапыКонтроляПродаж = ИнтерфейсРМКСлужебныйКлиент.ЭтапыКонтроляПродаж();
		ИнтерфейсРМКСлужебныйКлиент.ВыполнитьПроверкиКонтроляПродаж(ЭтотОбъект, ЭтапыКонтроляПродаж.ДобавлениеТовара);
		ЗапуститьОбработкуРезультатаКонтроляПродажПриДобавлении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ОбщегоНазначенияРМККлиент.ИспользоватьВнешнееСобытие() И ВводДоступен() Тогда
		
		Если ПрерватьОбработкуОповещения() Тогда
			Возврат;
		КонецЕсли;
		
		Если Событие = "Штрихкод" Или Событие = "ПолученШтрихкод" Или Событие = "ScanData" Тогда
			ВыполнитьПоискШтрихкода(Данные);
		ИначеЕсли Событие = "TracksData" Или Событие = "ДанныеКарты" Тогда
			ВыполнитьПоискМагнитнойКарты(Данные);
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИдентификаторОплатыПриИзменении(Элемент)
	
	ПриИзмененииИдентификатораОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура КодДляПодтвержденияОплатыПриИзменении(Элемент)
	
	ЗавершитьОплатуПринудительно();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоБНПриИзменении(Элемент)
	ЗачестьОплатуКартой();
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоНалПриИзменении(Элемент)
	СуммаОплаченоНалПриИзмененииНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоВРассрочкуПриИзменении(Элемент)
	ЗачестьОплатуВРассрочку();
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоЗачетАвансаПриИзменении(Элемент)
	
	ПроверитьПревышениеСуммыЗачетаАванса();
	ЗачестьОплатуЗачетАванса();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийТоварЦенаИзКарточкиПриИзменении(Элемент)
	
	Если ПримененыСкидки() Тогда
		ЗадатьВопросПоРасчетуСкидок("ЦенаИзКарточкиПриИзмененииЗавершение");
	Иначе
		ЦенаИзКарточкиПриИзмененииЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУдалитьСертификатНажатие(Элемент)
	ОтменитьОплатуСертификатами(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУдалитьУправляемуюСкидкуНажатие(Элемент)
	ОтменитьУправляемуюСкидку(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаЧекаПочтаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) И ЗначениеЗаполнено(ОтправкаЧекаТелефон) Тогда
		ОтправкаЧекаТелефон = НСтр("ru = ''");
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ОтправкаЧекаТелефон, НЕ ЗначениеЗаполнено(Текст));
	ИнтерфейсРМКСлужебныйКлиент.НастроитьСвойстваКнопкиПробитьИОтправить(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаЧекаТелефонИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	КодСтраны = ИнтерфейсРМКСлужебныйКлиентСервер.ТелефонныйКодСтраны();
	ТекстТелефонаЗаполнен = (ЗначениеЗаполнено(Текст) И Не СокрЛП(Текст) = КодСтраны);
	Если ТекстТелефонаЗаполнен И ЗначениеЗаполнено(ОтправкаЧекаПочта) Тогда
		ОтправкаЧекаПочта = НСтр("ru = ''");
	ИначеЕсли Не ТекстТелефонаЗаполнен И Не ТекущийЭлемент = Элемент Тогда
		ТекущийЭлемент = Элемент;
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ОтправкаЧекаПочта, НЕ ТекстТелефонаЗаполнен);
	ИнтерфейсРМКСлужебныйКлиент.НастроитьСвойстваКнопкиПробитьИОтправить(ЭтотОбъект, Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийТоварКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрокаРедактированияКоличества = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);

	Если Не ВводСЦифровойКлавиатуры Тогда
		ПроверитьОбработатьИзменениеКоличестваТовара();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоБонусамиПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Элементы.СуммаОплаченоБонусами.МаксимальноеЗначение)
		ИЛИ СуммаОплаченоБонусами > Элементы.СуммаОплаченоБонусами.МаксимальноеЗначение Тогда
		СуммаОплаченоБонусами = 0;
	КонецЕсли;
	
	Если Объект.Товары.Итог("СуммаСкидкиОплатыБонусом") > 0 Тогда
		
		НоваяСуммаОплатыБонусами		= СуммаОплаченоБонусами;
		ОчиститьДанныеКартыПокупателя	= Ложь;
		ОтменитьПримененныеБонусы(ОчиститьДанныеКартыПокупателя);
		СуммаОплаченоБонусами = НоваяСуммаОплатыБонусами;
		
	КонецЕсли;
	
	ОбнулятьСуммыОплат = Ложь;
	
	СуммаБонусов = СуммаОплаченоБонусами;
	РаспределитьБонусыПоТоварам();
	ПересчитатьИтогиТабличнойЧастиТовары(ОбнулятьСуммыОплат);
	
	Если СуммаОплаченоБН > 0 ИЛИ СуммаОплаченоНал > 0
		ИЛИ СуммаОплаченоВРассрочку > 0 ИЛИ СуммаОплаченоЗачетАванса > 0 Тогда
		
			ЭтоОперацияВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
			
			ПараметрыПересчета							= СтруктураПараметровПересчетаСуммОплаты();
			ПараметрыПересчета.ПриИзмененииБНОплаты		= СуммаОплаченоБН > 0;
			ПараметрыПересчета.ПересчитыватьОкругление	= НЕ ЭтоОперацияВозврат;
			ПараметрыПересчета.ПоКомандеОплатитьВсюСуммуБонусами = СуммаОплаченоБонусами > 0
				И (СуммаБонусов = СуммаОплаченоБонусами) И СуммаКОплате = 0;
			
			РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
		
	Иначе
		// Сумма примененных бонусов может повлиять на скидки по виду оплаты, или на сумму скидки процентом
		ОткрыватьФормуВыбораПодарков = Ложь;
		РассчитатьСкидкиКлиент(ОткрыватьФормуВыбораПодарков);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПереключательПриИзменении(Элемент)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	
	ОбщегоНазначенияРМККлиентСервер.РассчитатьСуммуНДС(Объект, ТекущаяСтрока);
	ОбщегоНазначенияРМККлиентСервер.СуммаДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура СистемаНалогообложенияЧекаКоррекцииПриИзменении(Элемент)
	
	ЭтоОбщаяСНО = МенеджерОборудованияРМККлиентСервер.ЭтоОСН(СистемаНалогообложенияЧекаКоррекции);
	УстановитьВидимостьЭлементаФормы(Элементы.ТоварыСтавкаНДС, ЭтоОбщаяСНО);
	УстановитьВидимостьЭлементаФормы(Элементы.ТоварыСтавкаНДСПереключатель, ЭтоОбщаяСНО);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплатаСертификатамиПриИзменении(Элемент)
	
	ИдентификаторСертификата = СтрЗаменить(Элемент.Имя, "СуммаСертификата_", "");
	
	Если ЗначениеЗаполнено(ИдентификаторСертификата) Тогда
		
		ИзменитьСуммуПодарочногоСертификата(ИдентификаторСертификата, Элемент.Имя);
		ПересчитатьСуммыОплатыПриРедактированииСертификатов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассаККМДляОперацииПриИзменении(Элемент)
	ПриПереключенииКассыККМ();
КонецПроцедуры

&НаКлиенте
Процедура ТекущийТоварКоличествоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЭтоВводСуммы = ЭтоПолеВводаДробнойСуммы(Элемент.ТекстРедактирования);
	ПереключитьЦифровуюПанельДляВводаСумм(Элемент, Не ЭтоВводСуммы);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТекущийТоварКоличествоАвтоПодбор(Элемент, Текст, ДанныеВыбора,
		ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
		
	ЭтоВводСуммы = ЭтоПолеВводаДробнойСуммы(Элемент.ТекстРедактирования);
	СменитьПереключитьЦифровуюПанель(Элемент, Не ЭтоВводСуммы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийТоварСкидкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТекущийТоварЦенаИзКарточкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПереключитьЦифровуюПанельДляВводаСумм(Элемент);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТекущийТоварЦенаИзКарточкиАвтоПодбор(Элемент, Текст, ДанныеВыбора,
		ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
		
	СменитьЭлементВводаСуммы(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеСкидкиНаЧекНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоБонусамиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПереключитьЦифровуюПанельДляВводаСумм(Элемент);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоНалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПереключитьЦифровуюПанельДляВводаСумм(Элемент);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоБННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПереключитьЦифровуюПанельДляВводаСумм(Элемент);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоВРассрочкуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПереключитьЦифровуюПанельДляВводаСумм(Элемент);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоЗачетАвансаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПереключитьЦифровуюПанельДляВводаСумм(Элемент);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплатаСертификатамиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПереключитьЦифровуюПанельДляВводаСумм(Элемент);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СуммаВыемкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СуммаВнесениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоБонусамиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
		УстановитьФокусНаЭлементеФормыПриВводеОплаты(Текст, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоНалОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
		УстановитьФокусНаЭлементеФормыПриВводеОплаты(Текст, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоБНОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
		УстановитьФокусНаЭлементеФормыПриВводеОплаты(Текст, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоВРассрочкуОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
		УстановитьФокусНаЭлементеФормыПриВводеОплаты(Текст, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоЗачетАвансаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
		УстановитьФокусНаЭлементеФормыПриВводеОплаты(Текст, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоБезналПриИзменении(Элемент)
	
	ЗачестьОплатуБезналом();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаНаличныхКВыдачеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПереключитьЦифровуюПанельДляВводаСумм(Элемент);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СуммаНаличныхКВыдачеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)

	СуммаЧислом = Число(Текст);
	ДопустимаяКратность = 100;
	ТекстПредупреждения = НСтр("ru = ''");
	ЗначениеПоУмолчанию = 5000;
	
	Если СуммаЧислом % ДопустимаяКратность <> 0 Тогда

		УведомлениеОНарушенииКратности = НСтр("ru = 'Сумма выдачи наличных должна быть кратной %1 %2'");
		НарушениеКратности = СтрШаблон(УведомлениеОНарушенииКратности, ДопустимаяКратность, ПредставлениеВалюты);
		ТекстПредупреждения = СтрШаблон("%1%2", НарушениеКратности, Символы.ПС);
		
	КонецЕсли;
		
	Если СуммаЧислом > ЗначениеПоУмолчанию Тогда
		
		ТекстШаблон = НСтр("ru = 'Допустимый лимит: 5000 %1 в сутки по всем картам одного банка.'");
		НарушениеЛимита = СтрШаблон(ТекстШаблон, ПредставлениеВалюты);
		ТекстПредупреждения = СтрШаблон("%1%2%3", ТекстПредупреждения, НарушениеЛимита, Символы.ПС);
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстПредупреждения) Тогда
	
		ЗаголовокПредупреждения = НСтр("ru = 'Ограничение суммы выдачи наличных'");
		ПоказатьПредупреждение(, ТекстПредупреждения, , ЗаголовокПредупреждения);
		СуммаНаличныхКВыдаче = 0;
	
	КонецЕсли;
	
	УстановитьФокусНаЭлементеФормыПриВводеОплаты(Текст, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоКредитомПриИзменении(Элемент)
	
	Если НЕ ПараметрыОплатыКредитом = Неопределено Тогда
		ПараметрыОплатыКредитом.Сумма = СуммаОплаченоКредитом;
	КонецЕсли;
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура КассирДляВходаПриИзменении(Элемент)
	
	КассирПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ТорговыйОбъектДляВходаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ТорговыйОбъектДляВхода) Тогда
		ТекущийЭлемент = Элементы.КассирДляВхода;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура КассирДляВходаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытиеПереопределено = Ложь;
	ОбщегоНазначенияРМККлиентПереопределяемый.ОткрытьФормуВыбораКассира(ЭтотОбъект, СобытиеПереопределено);
	Если СобытиеПереопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ОбработкаОповещения = Новый ОписаниеОповещения("ВыборКассираЗавершение", ЭтотОбъект);
	ПараметрыОткрытияФормы = Новый Структура("НастроитьКассировДляВхода", НастроитьКассировДляВхода);
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораПродавца", ПараметрыОткрытияФормы, ЭтотОбъект,,,,
		ОбработкаОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводТовараПоСтрокеПриИзменении(Элемент)
	ДобавитьТоварПоСтрокеКлиент();
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоQRКодомПриИзменении(Знач СуммаОплаченоQRКодом, ЭлементГруппыОплаты)
	
	ОбновлятьСуммуАванса = Истина;
	ПерерасчитатьСуммыОплаты();
	ОбновлятьСуммуАванса = (РежимЦифровойПанели = РежимыЦифровойПанели.ВводСуммОплаты);

	Если СуммаОплаченоQRКодом > 0 И (Не ПереключениеЦифровойПанели)
		И (Не РежимЦифровойПанели = РежимыЦифровойПанели.ВводСуммОплаты) Тогда
		
		НачатьОплатуЧекаСБП(СуммаОплаченоQRКодом, ЭлементГруппыОплаты);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура НачатьОплатуЧекаСБП(СуммаОплаченоQRКодом, ЭлементГруппыОплаты)
	
	СуммаКОплате		 = СуммаОплаченоQRКодом;
		
	НомерВидаОплаты  	 = Число(Прав(ЭтотОбъект.ПлатежныеСистемы_ВыбраннаяКоманда,1));
	ИдентификаторПС  	 = Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.Получить(НомерВидаОплаты-1).Значение;

	КлючПлатежнойСистемы = Новый Структура("ИдентификаторПС", ИдентификаторПС);
		
	ПлатежнаяСистема 	= ПлатежнаяСистема_ВидыОплат.НайтиСтроки(КлючПлатежнойСистемы)[0].ПлатежнаяСистема;
		
	УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧек, Ложь);
	ОбработатьПробитиеЧекаНаКлиенте(ПлатежнаяСистема);
		
	УстановитьВидимостьЭлементаФормы(ЭлементГруппыОплаты, Ложь);
	ПлатежныеСистемы_ВыбраннаяКоманда = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУдалитьСБПНажатие(Элемент)
	
	СанкционироватьЗакрытиеОперацииПлатежнойСистемой();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоQRКодомНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ПереключитьЦифровуюПанельДляВводаСумм(Элемент);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПанелиДанныеПокупателяПриИзменении(Элемент)
	
	ОбработатьИзменениеРежимаПанелиДанныхПокупателя();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУдалитьПромокодНажатие(Элемент)
	ОтменитьПрименениеПромокода(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаКартыИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если ТребуетсяНастройкаКнопокЦифровойПанели(Текст) Тогда
		СтрокаПоискаКарты = Текст;
		НастроитьКнопкиЦифровойПанели();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПовторныйПоискКартыИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если ТребуетсяНастройкаКнопокЦифровойПанели(Текст) Тогда
		СтрокаПоискаКарты = Текст;
		НастроитьКнопкиЦифровойПанели();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РучнойШтрихкодДляПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПереключитьЦифровуюПанельДляВводаСумм(Элемент, Истина);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РучнойШтрихкодДляПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
			Ожидание, СтандартнаяОбработка)
	СменитьПереключитьЦифровуюПанель(Элемент, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ШтрихкодДляПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПереключитьЦифровуюПанельДляВводаСумм(Элемент, Истина);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ШтрихкодДляПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
		Ожидание, СтандартнаяОбработка)
	СменитьЭлементВводаСуммы(Элемент, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НомерСертификатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПереключитьЦифровуюПанельДляВводаСумм(Элемент, Истина);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НомерСертификатаАвтоПодбор(Элемент, Текст, ДанныеВыбора,
		ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
		
	СменитьЭлементВводаСуммы(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаУправленияПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.ГруппаГорячиеКлавиши Тогда
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоискТовара Тогда
			Элементы.ГруппаУправления.ТекущаяСтраница = Элементы.ГруппаСтраницаПоискТоваров;
		ИначеЕсли Элементы.ГруппаОперации.Видимость Тогда
			Элементы.ГруппаУправления.ТекущаяСтраница = Элементы.ГруппаСтраницаОперации;
		Иначе
			Элементы.ГруппаУправления.ТекущаяСтраница = Элементы.ГруппаКомандаДекорация;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеСуммыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПереключитьЦифровуюПанельДляВводаСумм(Элемент);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеСуммыАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
			Ожидание, СтандартнаяОбработка)
	СменитьПереключитьЦифровуюПанель(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеСуммыОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
		УстановитьФокусНаЭлементеФормыПриВводеОплаты(Текст, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТекущийТоварСкидкаПриИзменении(Элемент)
	ЗначениеСкидкиНаСтроку = ТекущийТоварСкидка;
	Если ТекущийТоварСкидка < 0 Тогда
		ТекущийТоварСкидка = - ТекущийТоварСкидка;
		Элементы.ДекорацияТекущийТоварСкидка.Заголовок = НСтр("ru = 'Наценка'");
	Иначе
		Элементы.ДекорацияТекущийТоварСкидка.Заголовок = НСтр("ru = 'Скидка'");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеСкидкиНаЧекПриИзменении(Элемент)
	ЗначениеСкидкиНаценки = ЗначениеСкидкиНаЧек;
	Если ЗначениеСкидкиНаЧек < 0 Тогда
		ЗначениеСкидкиНаЧек = - ЗначениеСкидкиНаЧек;
		Элементы.ПодписьЭлементаЗакрытияПанели.Заголовок = НСтр("ru = 'Наценка на чек'");
	Иначе
		Элементы.ПодписьЭлементаЗакрытияПанели.Заголовок = НСтр("ru = 'Скидка на чек'");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборКодаМаркировкиПриИзменении(Элемент)
	УстановитьДоступностьЭлементаФормы(Элементы.ВыбратьКодМаркировки, ЗначениеЗаполнено(ВыборКодаМаркировки));
КонецПроцедуры

&НаКлиенте
Процедура ПолеПоштучноеВыбытиеОстатокПредупреждениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПользовательДоЗаменыПрав = Объект.ПользовательБД;
	КассирДоЗаменыПрав = Объект.Кассир;
	
	НеобходимоеПраво = "ПравоИзменятьОстатокЧастичноеВыбытиеРМК";
	Если ЕстьПравоНаДействие(НеобходимоеПраво) Тогда
		СтрокаТовара = Элементы.Товары.ТекущиеДанные;
		Если СтрокаТовара <> Неопределено Тогда
			ОбработкаОповещения = Новый ОписаниеОповещения("РаботаСОборудованиемРозливаЗавершение", ЭтотОбъект);
			ОбщегоНазначенияРМККлиентПереопределяемый.ОткрытьКегОборудованияРозлива(ЭтотОбъект, СтрокаТовара, ОбработкаОповещения);
		КонецЕсли;
	Иначе
		НеобходимоеПраво = "ПравоИзменятьОстатокЧастичноеВыбытиеРМК";
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаЧекаПочтаПриИзменении(Элемент)
	НастроитьКомандыОплаты();
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаЧекаТелефонПриИзменении(Элемент)
	НастроитьКомандыОплаты();
КонецПроцедуры

&НаКлиенте
Процедура ПлатежнаяСистемаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДанныеВыбора		= Новый СписокЗначений;
	
	ИнтеграцияСПлатежнымиСистемамиРМКВызовСервера.ПодобратьПлатежнуюСистему(ДанныеВыбора, Текст);
	
	Если ДанныеВыбора.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежнаяСистемаРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПлатежнаяСистема_БанкКлиента = НавигационнаяСсылкаФорматированнойСтроки;
	СтандартнаяОбработка		 = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	Если ЕстьНеЗавершенныеДействияПоТекущейСтроке() Или Не Доступность
		ИЛИ ЭтаФорма.ТекущийЭлемент = Элементы.ТекущийТоварСкидка Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено ИЛИ ФормаЗамороженаПослеПробитияЧека()
			Или Не Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбщая Тогда
		Возврат;
	ИначеЕсли НЕ Элементы.ГруппаИнфо.Видимость И Не РежимПлитки Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнфо, Истина);
	КонецЕсли;
	
	Если ТекущаяСтрока.ТоварКЗамене
		ИЛИ (ТекущаяСтрока.Подарок И НЕ ТекущаяСтрока.ПроверятьЗаполнениеСерий) Тогда
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРедактированияСтрокиКорзины, Ложь);
	Иначе
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРедактированияСтрокиКорзины, Истина);
	КонецЕсли;
	
	НастроитьПредставлениеТовара(ТекущаяСтрока);
	ТекущийКодАртикул = ПолучитьПредставлениеКодАртикул(ТекущаяСтрока, ИспользоватьКод, ИспользоватьАртикул,Истина);
	НастроитьТекущуюЦену(ТекущаяСтрока);
	НастроитьТекущееКоличество(ТекущаяСтрока);
	НастроитьПодсказкуДляВыбораСерийИПартий(ТекущаяСтрока);
	ТекущийТоварИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
	ТекущийТоварИндексСтроки = Объект.Товары.Индекс(ТекущаяСтрока);
	ТекущийТоварСуммаСкидки = ТекущаяСтрока.СуммаСкидкиНаценки;
	НастроитьВидимостьЗапросаБалансаСертификата();
	Если ОтображатьОстаток И Не РежимКассыСамообслуживания Тогда
		ТекущийТоварОстаток = СтрШаблон(НСтр("ru = 'Доступно: %1 %2'"),
			ТекущаяСтрока.КоличествоОстаток, ТекущаяСтрока.ПредставлениеЕдиницыИзмерения);
	КонецЕсли;
	
	Если ТекущаяСтрока.ОтображаетсяСкидкаСуммой Тогда
		
		Элементы.СкидкаТекущийТоварСумма.ЦветФона = ЦветаФормы.АктивнаяКнопка;
		Элементы.СкидкаТекущийТоварПроцент.ЦветФона = ЦветаФормы.Авто;
		ЗначениеСкидкиНаПозицию = СуммаРучнойСкидкиНаПозицию(ТекущаяСтрока);
		ТекущийТоварСкидка = ЗначениеСкидкиНаПозицию;
		ЗначениеСкидкиНаСтроку = ТекущийТоварСкидка;
		Если ТекущийТоварСкидка < 0 Тогда
			ТекущийТоварСкидка = -ТекущийТоварСкидка;
		КонецЕсли;
		УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Ложь);
		
	ИначеЕсли ТекущаяСтрока.ОтображаетсяСкидкаПроцентом Тогда
		
		Элементы.СкидкаТекущийТоварПроцент.ЦветФона = ЦветаФормы.АктивнаяКнопка;
		Элементы.СкидкаТекущийТоварСумма.ЦветФона = ЦветаФормы.Авто;
		ТекущийТоварСкидка = ТекущаяСтрока.ПроцентСкидкиНаценки;
		ЗначениеСкидкиНаСтроку = ТекущийТоварСкидка;
		Если ТекущийТоварСкидка < 0 Тогда
			ТекущийТоварСкидка = -ТекущийТоварСкидка;
		КонецЕсли;
		УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Ложь);
		
	Иначе
		
		ТекущийТоварСкидка = 0;
		ЗначениеСкидкиНаСтроку = 0;
		Элементы.СкидкаТекущийТоварПроцент.ЦветФона = ЦветаФормы.Авто;
		Элементы.СкидкаТекущийТоварСумма.ЦветФона = ЦветаФормы.Авто;
		УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Истина);
		
	КонецЕсли;
	ЗаполнитьЗаголовокСкидкиНаСтроку();
	Если НЕ ЗначениеЗаполнено(ТекущаяОперация) И ДанныеДляРучногоСопоставления = Неопределено Тогда
		
		ЭтоМаркируемыйТоварВЧекеКоррекции = ЭтоЧекКоррекции И ТекущаяСтрока.НеобходимостьВводаКодаМаркировки;
		
		ЭтоПроверкаМарки = ЗначениеЗаполнено(ВременныйКонтекстПроверкиМарки);
		УстановитьДоступностьЭлементаФормы(Элементы.УдалитьТовар,
			НЕ (ЭтоМаркируемыйТоварВЧекеКоррекции ИЛИ ЭтоПроверкаМарки));
			
		ТекущийСлойСлужебнойИнформацииЧека
			= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
		
		Если ТекущаяСтрока.НеобходимостьВводаКодаМаркировки
			И НЕ ЗначениеЗаполнено(ТекущаяСтрока.КодМаркировки)
			И НЕ ЭтоЧекКоррекции Тогда
			
			Если Не ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаНеверноОтсканированныйШтрихкод
				И НЕ ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаИнфоОшибка
				И Не ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаНайтиПоШтрихкоду Тогда
				
				ДоступенВыборКодаМаркировки = ТекущаяСтрока.НеобходимостьВводаКодаМаркировки И Не ЗначениеЗаполнено(ТекущаяСтрока.КодМаркировки)
					И ТекущаяСтрока.ПоштучноеВыбытие;
				
				Если ДоступенВыборКодаМаркировки Тогда
					ЗаполнитьКодыМаркировкиДоступныеДляВыбора(ТекущаяСтрока);
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаВыборКодаМаркировкиГоризонтальная", "Видимость",
					ДоступенВыборКодаМаркировки И ТекущаяСтрока.КодыМаркировкиПоДаннымИБ.Количество());
				
				СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
				ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаОтсканироватьМарку);
				СформироватьТекстВводМарки();
				ОграничитьДоступностьЭлементовПриОжиданииМарки(Истина);
			
			ИначеЕсли ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаИнфоОшибка Тогда
				
				ТекущийЭлемент = Элементы.ЗакрытьСтраницуИнфоОшибка;
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли Не ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаИнфоОшибка
			И НЕ ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаОтменаОплатыПоКарте
			И НЕ ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаСторноЭквайринг
			И НЕ ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаСерииИПартии
			И НЕ ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаВыборЭквайринговогоТерминала
			И НЕ ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаПанельИдентификаторКорзиныНСПК
			И НЕ ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаЗаменаПрав
			И НЕ ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаИнфоПодтверждение
			И НЕ ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаВопросАвтономнаяКасса
			И НЕ ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаДанныеПокупателя
			И НЕ ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаНайтиВЧеке
			И НЕ ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаНайтиПоШтрихкоду
			И НЕ ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаВвестиКомментарийКЧеку
			И НЕ ЗначениеЗаполнено(ВременныйКонтекстПроверкиМарки) Тогда
			
			Если Не ТекущийСлойСлужебнойИнформацииЧека = Элементы.ОбластьОперативногоУправленияЧеком Тогда
				СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
				ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект,
					Элементы.ОбластьОперативногоУправленияЧеком);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НастроитьДоступностьКомандИзмененияКоличества(ТекущаяСтрока);
	НастроитьКомандуУказатьСерии(ТекущаяСтрока);
	НастроитьГруппуПримененныеУправляемыеСкидки(ТекущаяСтрока);
	НастроитьГруппуДанныеДляТекущейСтроки(ТекущаяСтрока);
	НастроитьКомандуУказатьМарку(ТекущаяСтрока);
	
	ДобавленВесовойНеФасованныйТовар = ТекущаяСтрока.Весовой И НЕ ТекущаяСтрока.Фасованный;
	УстановитьДоступностьЭлементаФормы(Элементы.ПолучитьВес, ДобавленВесовойНеФасованныйТовар);
	ИнтерфейсРМКСлужебныйКлиент.НастроитьДоступностьРежимаОплаты(ЭтотОбъект);
	
	Если Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиУправления)
		= Элементы.ПанельУправленияЧеком
		Или Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ОбластьОперативногоУправленияЧеком Тогда
		
		ВыйтиИзРежимаПлитки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТоваровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанныеСпискаТоваров = Элементы.СписокТоваров.ТекущиеДанные;
	
	Если ТекущиеДанныеСпискаТоваров = Неопределено Тогда
		ИзменитьСостояниеЗаголовкаСтраницыПоискаТовара();
		Возврат;
	КонецЕсли;
	
	Если РежимВыбораПодарочногоСертификата Тогда
		
		ОбработатьРежимВыбораПодарочногоСертификатаКлиент(ТекущиеДанныеСпискаТоваров.Номенклатура);
		Возврат;
		
	КонецЕсли;
	
	Если Не НеИспользоватьНастройкиКаталога Тогда
		Если ТекущиеДанныеСпискаТоваров.ВидСтроки = 0 Тогда
			Если Элементы.СписокТоваров.Отображение = ОтображениеТаблицы.Дерево Тогда
				ИдентификаторТекущейСтроки = Элементы.СписокТоваров.ТекущаяСтрока;
				Если Элементы.СписокТоваров.Развернут(ИдентификаторТекущейСтроки) Тогда
					Элементы.СписокТоваров.Свернуть(ИдентификаторТекущейСтроки);
				Иначе
					Элементы.СписокТоваров.Развернуть(ИдентификаторТекущейСтроки);
				КонецЕсли;
				СтандартнаяОбработка = Ложь;
				Возврат;
			ИначеЕсли Элементы.СписокТоваров.Отображение = ОтображениеТаблицы.ИерархическийСписок Тогда
				Возврат;
			КонецЕсли;
		ИначеЕсли ТекущиеДанныеСпискаТоваров.ВидСтроки = 1 Тогда
			ОбщаяСтрокаНоменклатурыВИерархии = Элементы.СписокТоваров.ТекущаяСтрока;
			ВариантОтображенияКаталогаДоВыбораОбщейСтроки = НастройкаКаталогаВариантОтображения;
			УстановитьОтборКаталогаПоОбщейСтрокеНоменклатуры(ТекущиеДанныеСпискаТоваров.Номенклатура);
			Если НастройкаКаталогаВариантОтображения = 1 Или НастройкаКаталогаВариантОтображения = 2 Тогда
				УстановитьИерархиюКаталога(Ложь);
			КонецЕсли;
			Возврат;
		ИначеЕсли ТекущиеДанныеСпискаТоваров.ВидСтроки = 3
			И Не ОбщаяСтрокаНоменклатурыВИерархии = Неопределено Тогда
			УдалитьОтборКаталогаПоОбщейСтрокеНоменклатуры(Истина);
		КонецЕсли;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ВводТовараПоСтроке = "";
	ПропуститьКонтроль = Ложь;
	СписокТоваровВыборКлиент(ТекущиеДанныеСпискаТоваров, , ПропуститьКонтроль);
	
	ОбновитьНадписьПоПозицииВКаталоге();
	Если Не ПропуститьКонтроль Тогда
		ЗапуститьОбработкуРезультатаКонтроляПродажПриДобавлении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныйСписокТоваровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыборПодарка = РежимВыбораПодарка;
	ТекущиеДанныеСпискаТоваров = Элементы.ДополнительныйСписокТоваров.ТекущиеДанные;
	
	Если ТекущиеДанныеСпискаТоваров = Неопределено Тогда
		ИзменитьСостояниеЗаголовкаСтраницыПоискаТовара(, Истина);
		Возврат;
	КонецЕсли;
	
	Если РежимВыбораПодарочногоСертификата Тогда
		
		ОбработатьРежимВыбораПодарочногоСертификатаКлиент(ТекущиеДанныеСпискаТоваров.Номенклатура);
		Возврат;
		
	КонецЕсли;
	
	Если РежимВыбораХарактеристики Тогда
		СтруктураСтроки = Новый Структура("Характеристика, Цена", ТекущиеДанныеСпискаТоваров.Характеристика, ТекущиеДанныеСпискаТоваров.Цена);
		ОбработатьРежимВыбораХарактеристики(СтруктураСтроки);
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ВводТовараПоСтроке = "";
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаСписокТоваров);
	НастроитьВидимостьЭлементовГруппыПоискаТовара();
	СписокТоваровВыборКлиент(ТекущиеДанныеСпискаТоваров);
	
	Если ВыборПодарка И ТаблицаПодарков.Количество() Тогда
		ПодключитьОбработчикОжидания("ОткрытьФормуВыбораПодарков", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	Если РежимДопускаетРедактированиеСписка() Тогда
		УдалитьТоварНаКлиенте();
	КонецЕсли;
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область КомандыОплаты

&НаКлиенте
Процедура ОплатаКартой(Команда)
	
	ЗакрытьПанельNFC();
			
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	ВыполнитьОплатуКартой(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаНаличными(Команда)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если РежимРаботыСЧеком = РежимыРаботыСЧеком.Оплата Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ВозвратКоррекция
		Или Элементы.ГруппаОплатаНал.Видимость Тогда
		
		ОплатаНаличнымиЗавершение(КодВозвратаДиалога.Нет);
		
	Иначе
		НеобходимПересчетАвтоматическихСкидок = ОпределитьНеобходимостьПересчетаАвтоматическихСкидок();
		Если НеобходимПересчетАвтоматическихСкидок И ВопросПоРасчетуСкидок Тогда
			ЗадатьВопросПоРасчетуСкидок("ОплатаНаличнымиЗавершение", , Истина);
		Иначе
			ОплатаНаличнымиЗавершение(?(НеобходимПересчетАвтоматическихСкидок, КодВозвратаДиалога.Да, КодВозвратаДиалога.Нет));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаВРассрочку(Команда)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если Элементы.ГруппаОплатаВРассрочку.Видимость Тогда
		Если Не ПоказатьОшибкуУдаленияПредоплатыРассрочки() Тогда
			ОплатаВРассрочкуНаКлиенте();
		КонецЕсли;
	Иначе
		ИнициализироватьВводОплатыВРассрочку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Предоплата(Команда)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если Элементы.ГруппаОплатаПредоплата.Видимость Тогда
		Если Не ПоказатьОшибкуУдаленияПредоплатыРассрочки() Тогда
			ПредоплатаНаКлиенте();
		КонецЕсли;
	Иначе
		ИнициализироватьВводПредоплаты();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОплатаСертификатомНСПК(Команда)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если РежимРаботыСЧеком = РежимыРаботыСЧеком.Оплата Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ВозвратКоррекция Тогда
		ОплатаСертификатомНСПКЗавершение(КодВозвратаДиалога.Нет);
	Иначе
		НеобходимПересчетАвтоматическихСкидок = ОпределитьНеобходимостьПересчетаАвтоматическихСкидок();
		Если НеобходимПересчетАвтоматическихСкидок И ВопросПоРасчетуСкидок Тогда
			ЗадатьВопросПоРасчетуСкидок("ОплатаСертификатомНСПКЗавершение", , Истина);
		Иначе
			ОплатаСертификатомНСПКЗавершение(?(ВопросПоРасчетуСкидок Или СкидкиРассчитаны, КодВозвратаДиалога.Нет, КодВозвратаДиалога.Да));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачетАванса(Команда)

	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если РежимРаботыСЧеком = РежимыРаботыСЧеком.Оплата Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ВозвратКоррекция Тогда
		ЗачетАвансаЗавершение(КодВозвратаДиалога.Нет);
	Иначе
		НеобходимПересчетАвтоматическихСкидок = ОпределитьНеобходимостьПересчетаАвтоматическихСкидок();
		Если НеобходимПересчетАвтоматическихСкидок И ВопросПоРасчетуСкидок Тогда
			ЗадатьВопросПоРасчетуСкидок("ЗачетАвансаЗавершение", , Истина);
		Иначе
			ЗачетАвансаЗавершение(?(ВопросПоРасчетуСкидок Или СкидкиРассчитаны, КодВозвратаДиалога.Нет, КодВозвратаДиалога.Да));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Безнал(Команда)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если РежимРаботыСЧеком = РежимыРаботыСЧеком.Оплата Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ВозвратКоррекция Тогда
		БезналЗавершение(КодВозвратаДиалога.Нет);
	Иначе
		НеобходимПересчетАвтоматическихСкидок = ОпределитьНеобходимостьПересчетаАвтоматическихСкидок();
		Если НеобходимПересчетАвтоматическихСкидок И ВопросПоРасчетуСкидок Тогда
			ЗадатьВопросПоРасчетуСкидок("БезналЗавершение", , Истина);
		Иначе
			БезналЗавершение(?(ВопросПоРасчетуСкидок Или СкидкиРассчитаны, КодВозвратаДиалога.Нет, КодВозвратаДиалога.Да));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменаТоваров(Команда)
	
	ЗаменаТоваровНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаКредитом(Команда)

	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если РежимРаботыСЧеком = РежимыРаботыСЧеком.Оплата Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ВозвратКоррекция
		Или Элементы.ГруппаОплатаКредитом.Видимость Тогда
		
		ОплатаКредитомЗавершение(КодВозвратаДиалога.Нет);
		
	Иначе
		НеобходимПересчетАвтоматическихСкидок = ОпределитьНеобходимостьПересчетаАвтоматическихСкидок();
		Если НеобходимПересчетАвтоматическихСкидок И ВопросПоРасчетуСкидок Тогда
			ЗадатьВопросПоРасчетуСкидок("ОплатаКредитомЗавершение", , Истина);
		Иначе
			ОплатаКредитомЗавершение(?(ВопросПоРасчетуСкидок Или СкидкиРассчитаны, КодВозвратаДиалога.Нет, КодВозвратаДиалога.Да));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаБонусами(Команда)

	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если Не ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеЛояльностиЗаполнены(ЭтотОбъект) Тогда
		ВвестиДанныеПокупателяКлиент();
	ИначеЕсли Элементы.ГруппаОплатаБонусами.Видимость Тогда
		ОтменитьОплатуБонусами();
	Иначе
		ОплатитьБонусами(Команды.ОплатитьБонусами);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаКартойВТихомРежиме(Команда)
	
	Если Объект.Товары.Количество() > 0 И Не ФормаЗамороженаПослеПробитияЧека() Тогда 

		ЗакрытьПанельNFC();
		ОплатитьКартойВТихомРежиме();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаНаличнымиВТихомРежиме(Команда)
	Если Объект.Товары.Количество() > 0 И Не ФормаЗамороженаПослеПробитияЧека() Тогда
		ОплатитьНаличнымиВТихомРежиме();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КомандаОплатаQRКодом(Команда)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	СистемыНалогообложенияТоваровВКорзине = РазличныеСНОВСпискеПокупок();
		
	Если Не ЗначениеЗаполнено(ВыбраннаяОрганизация) Тогда

		Если СистемыНалогообложенияТоваровВКорзине.Количество() = 0 Тогда
			ОрганизацияПлатежнойСистемы = ОсновнаяОрганизация;
		Иначе
			
			Для Каждого СтрокаСНО Из СистемыНалогообложенияТоваровВКорзине Цикл
				
				КлючПроверки = Новый Структура("Организация", СтрокаСНО.Организация);
				Если ПлатежнаяСистема_ВидыОплат.НайтиСтроки(КлючПроверки).Количество() Тогда
					ОрганизацияПлатежнойСистемы = СтрокаСНО.Организация;  
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;

	Иначе
		ОрганизацияПлатежнойСистемы = ВыбраннаяОрганизация;
	КонецЕсли;
	
	АктивацияNFC = Ложь;
	
	ТипыПлатежныхСистем = МенеджерОборудованияРМККлиент.ТипыПлатежнойСистемыККТ();
	
	Если Команда.Имя = "КомандаПлатежнаяСистема_ОплатаЮКасса" Тогда
		
		ЗакрытьПанельNFC();
		ПлатежнаяСистемаККТ = ТипыПлатежныхСистем.Получить("ЮКасса");
		
	ИначеЕсли Команда.Имя = "КомандаПлатежнаяСистема_ОплатаСБП" Тогда
		
		ЗакрытьПанельNFC();
		
		ПлатежнаяСистемаККТ = ТипыПлатежныхСистем.Получить("СистемаБыстрыхПлатежей");
		
	ИначеЕсли Команда.Имя = "КомандаПлатежнаяСистема_АктивацияNFC" Тогда

		ПлатежнаяСистемаККТ = ТипыПлатежныхСистем.Получить("СистемаБыстрыхПлатежей");
		АктивацияNFC		= Истина;
		
	КонецЕсли;
	
	СтруктураОрганизацияИСНО = ВыбраннаяОрганизацияИСНО();
	Если ПробитыеЧеки.НайтиСтроки(СтруктураОрганизацияИСНО).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибки оплаты'");
	
	Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.Очистить();
	
	ОтборСтрок = Новый Структура("Организация, ПлатежнаяСистема", ОрганизацияПлатежнойСистемы, ПлатежнаяСистемаККТ);
	Для Каждого СтрокаВидОплаты Из ПлатежнаяСистема_ВидыОплат.НайтиСтроки(ОтборСтрок) Цикл
		Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.Добавить(СтрокаВидОплаты.ИдентификаторПС,
			СтрокаВидОплаты.Представление);
	КонецЦикла;
	
	ЭтоОперацияПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	Если НЕ ЗначениеЗаполнено(ОрганизацияПлатежнойСистемы) Тогда
		
		ТекстОшибки = НСтр("ru = 'Есть ошибки заполнения табличной части.'");
		
	ИначеЕсли СистемыНалогообложенияТоваровВКорзине.Количество() > 1 И Не ЭтоОперацияПродажа Тогда

		ТекстОшибки = НСтр("ru = 'В корзине покупателя товары по нескольким организациям. Оплата QR-кодом недоступна.'");
		
	ИначеЕсли ПриемАванса
		И СуммаКОплате <> СуммаИтого Тогда 
		
		ТекстОшибки = НСтр("ru = 'Для приема аванса совместное использование с другими видами оплат не поддерживается.'");
		
	ИначеЕсли СуммаОплаченоБН > 0 
		И СуммаКОплате <> СуммаИтого Тогда 
		
		ТекстОшибки = НСтр("ru = 'Cовместное использование с оплатой по карте не поддерживается.'");
		
	ИначеЕсли Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.Количество() = 0 Тогда
		
		Если Объект.Товары.Количество() > 0 Тогда

			Если ПлатежнаяСистемаККТ = ТипыПлатежныхСистем.Получить("ЮКасса") Тогда
				ТекстОшибки = НСтр("ru = 'В корзине покупателя товары организации, к которой не подключена оплата по ЮКассе.'");
			ИначеЕсли ПлатежнаяСистемаККТ = ТипыПлатежныхСистем.Получить("СистемаБыстрыхПлатежей") Тогда
				ТекстОшибки = НСтр("ru = 'В корзине покупателя товары организации, к которой не подключена оплата Сервисом быстрых платежей.'");
			Иначе
				ТекстОшибки = НСтр("ru = 'В корзине покупателя товары организации, к которой не подключена выбранная оплата.'");
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если Не ЭтоОперацияПродажа Тогда
			
			Если ЗначениеЗаполнено(ЧекККМПродажа) Тогда
				
				Если ЗначениеЗаполнено(ЧекККМПродажа)
					И НЕ ПлатежнаяСистема_ВозможенВозврат Тогда 
					
					ТекстОшибки = НСтр("ru = 'По выбранному чеку нельзя провести оплату.'");
					
				ИначеЕсли ЭтотОбъект.ПлатежныеСистемы_СуммаКВозврату > 0 
					И СуммаКОплате > ЭтотОбъект.ПлатежныеСистемы_СуммаКВозврату Тогда 
					
					ТекстОшибки = НСтр("ru = 'Превышена допустимая сумма возврата %1 %3.
					|Заполните разницу %2 %3 другими видами оплат и нажмите на оплату СБП еще раз.'");

					ТекстОшибки = СтрШаблон(
						ТекстОшибки, 
						ЭтотОбъект.ПлатежныеСистемы_СуммаКВозврату, 
						СуммаКОплате - ЭтотОбъект.ПлатежныеСистемы_СуммаКВозврату,
						ПредставлениеВалюты);
					
				ИначеЕсли ЗначениеЗаполнено(ПлатежнаяСистема_ИдентификаторПС) Тогда
					
					Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.Очистить();
					Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.Добавить(ПлатежнаяСистема_ИдентификаторПС);
					
				КонецЕсли;
	
			КонецЕсли;
			
		Иначе
			
			Если Объект.Оплачивается
				И ЗначениеЗаполнено(ПлатежнаяСистема_ИдентификаторПС) Тогда
					
				Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.Очистить();
				Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.Добавить(ПлатежнаяСистема_ИдентификаторПС);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		Если Не АктивацияNFC Тогда
			ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстОшибки);
		КонецЕсли;
		
	ИначеЕсли Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.Количество() > 0 Тогда

		ПродолжитьВыбор	= Новый ОписаниеОповещения(
			"ПродолжитьВыборПлатежнойСистемы", 
			ЭтотОбъект, 
			Новый Структура("КомандаИмя", Команда.Имя));

		КомандыВыбора 	= Новый СписокЗначений;
		Ном 			= 0;
		
		Для Каждого ЭлементЗначение Из Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора Цикл
			
			Ном = Ном + 1;
			КомандыВыбора.Добавить("КомандаВыборВидаОплаты" + Ном, ЭлементЗначение.Представление);
			
		КонецЦикла;
		
		Если Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.Количество() > 1
			И Не АктивацияNFC Тогда
			
			ПоказатьВыборИзМеню(
				ПродолжитьВыбор, 
				КомандыВыбора, 
				Элементы[СтрЗаменить(Команда.Имя, "КомандаПлатежнаяСистема_", "")]);
				
		Иначе
			ВыполнитьОбработкуОповещения(ПродолжитьВыбор, КомандыВыбора[0]);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗавершитьОплатуПлатежнойСистемой(Команда)
	
	ЗавершитьЭтапОплатыПлатежнойСистемой();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПлатежнаяСистема_Пречек(Команда)
	
	ИнтеграцияСПлатежнымиСистемамиРМККлиент.ПечатьПречека(ЭтотОбъект, Истина, ПлатежнаяСистема_НоваяЗаявка.ПодключаемоеОборудование);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИнструкция(Команда)
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиДействийПлатежнойСистемы)
		= Элементы.ГруппаQRКод Тогда
		
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаИнструкция);
		Элементы.ФормаОтложить.Видимость    				= Истина;
		Элементы.ФормаОтложить.Заголовок    				= НСтр("ru = 'QR код'");
		
	ИначеЕсли ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиДействийПлатежнойСистемы)
		= Элементы.ГруппаQRКодПовтор Тогда
		
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаИнструкцияПовтор);
		Элементы.ФормаОтложить.Видимость    				= Истина;
		Элементы.ФормаОтложить.Заголовок    				= НСтр("ru = 'QR код'");

		Элементы.ФормаЗавершитьПринудительно.Видимость    	= Ложь;
		
	ИначеЕсли ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиДействийПлатежнойСистемы)
		= Элементы.ГруппаИнструкцияПовтор Тогда
		
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаQRКодПовтор);
		ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.НастроитьФормуПоИнтеграции(ЭтотОбъект);

	Иначе
		
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаQRКод);
		ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.НастроитьФормуПоИнтеграции(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтменитьОплату(Команда)
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиДействийПлатежнойСистемы)
		= Элементы.ГруппаОшибка Тогда
		
		СанкционироватьЗакрытиеОперацииПлатежнойСистемой();
		
	Иначе
		
		Отказ = Ложь;
		ОповещениеЗавершитьОплату = Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
		
		ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОтменитьОперацию(ЭтотОбъект, ОповещениеЗавершитьОплату, Отказ);
		
		Если Не Отказ Тогда
			СанкционироватьЗакрытиеОперацииПлатежнойСистемой();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтложить(Команда)
	
	ТекущийСлойГруппы
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиДействийПлатежнойСистемы);
		
	Если ТекущийСлойГруппы = Элементы.ГруппаQRКод
		ИЛИ ТекущийСлойГруппы = Элементы.ГруппаИнструкция 
		ИЛИ ТекущийСлойГруппы = Элементы.ГруппаИнструкцияПовтор Тогда
		
		КомандаИнструкция(Команда);
		
	Иначе
		
		ОповещениеОтложитьЧек = Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
		
		ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОтложитьЧек(ЭтотОбъект, ОповещениеОтложитьЧек);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗавершитьПринудительно(Команда)
	
	ЗавершитьОплатуПринудительно();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрытьПринудительно(Команда)

	ОповещениеЗавершитьОтмену = Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);

	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПанельДействий);
	
	Если ИнтеграцияСПлатежнымиСистемамиРМККлиент.ПрерватьОперацию(ЭтотОбъект, ОповещениеЗавершитьОтмену) Тогда
		СанкционироватьЗакрытиеОперацииПлатежнойСистемой();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыборВидаОплаты(Команда)
	
	НомерВидаОплаты = Число(Прав(Команда.Имя,1));
	ВариантыВыбора = Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.ВыгрузитьЗначения();
	ПлатежнаяСистема_ИдентификаторПС = ВариантыВыбора[НомерВидаОплаты-1];
	
	ИнициализацияПанелиДействийПлатежнойСистемы(ПлатежнаяСистема_ИдентификаторПС);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьНайтиВЧеке(Команда)
	Если РежимПоказаСкидок Тогда
		НайтиТоварРасшифровкеСкидок(ШтрихкодДляПоиска);
	Иначе
		НайтиТоварВЧеке(ШтрихкодДляПоиска);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИзбранноеВыбор(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТребуетсяПовышениеПрав = Ложь;
	ОбновитьКоличествоВРедактируемойСтроке(ТребуетсяПовышениеПрав);
	Если ТребуетсяПовышениеПрав Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЭлемент = Элементы.ПанельИзбранныхТоваров;
	НомерНажатой = Сред(Элемент.Имя, 21);
	НомерНажатой = Число(НомерНажатой);
	СтрокаНажатойКнопки = ДанныеКнопок.Получить(НомерНажатой);
	ПропуститьПоискСопутствующихТоваров = Истина;
	ВыбратьЭлементИзИзбранногоИПлитки(СтрокаНажатойКнопки, Ложь);
	ПропуститьПоискСопутствующихТоваров = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСопутствующиеТоварыПриДобавленииНоменклатуры(СтруктураНоменклатуры)
	
	Если Не ИспользоватьПанельИзбранныхТоваров Тогда
		Возврат;
	КонецЕсли;
	
	Если ПропуститьПоискСопутствующихТоваров Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимПлитки Тогда
		Возврат;
	КонецЕсли;
	
	ОтборСопутствующихТоваров = Новый Структура;
	ОтборСопутствующихТоваров.Вставить("Номенклатура");
	ОтборСопутствующихТоваров.Вставить("Характеристика");
	ЗаполнитьЗначенияСвойств(ОтборСопутствующихТоваров, СтруктураНоменклатуры);
	ОтборСопутствующихТоваров.Вставить("ИсточникПлитки", 2);
	ОтборСопутствующихТоваров.Вставить("ИмеетсяВложенность", Истина);
	ОтборСопутствующихТоваров.Вставить("ЭтоКатегория", Ложь);
	ОтборСопутствующихТоваров.Вставить("ЭтоТекущаяКатегория", Ложь);
	
	СопутствующиеТовары = ОпорныеДанные.НайтиСтроки(ОтборСопутствующихТоваров);
	
	Если СопутствующиеТовары.Количество() > 0 Тогда
		ИндексВладельцаСопутствующихТоваров = СопутствующиеТовары[0].ПервыйИндексПлитки;
		
		Если Не ИндексВладельцаСопутствующихТоваров = ТекущаяСтраницаКнопок Тогда
			Элементы.ПанельИзбранныхТоваров.Заголовок = НСтр("ru='Сопутствующие товары'");
			ТекущаяСтраницаКнопок = ИндексВладельцаСопутствующихТоваров;
			ЗаполнитьКнопкиИзбранныхПозицийСРазморозкой(Ложь);
		КонецЕсли;
		
		Элементы.ПанельИзбранныхТоваров.Показать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТовар(Команда)
	
	УдалитьТоварНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийТоварУменьшитьКоличество(Команда)
	
	Если ТекущийТоварКоличество = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьДанныеПриИзмененииКоличества();
	ТекущийЭлемент = Элементы.Товары;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийТоварУвеличитьКоличество(Команда)
	
	ПересчитатьДанныеПриИзмененииКоличества(Истина);
	ТекущийЭлемент = Элементы.Товары;
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаТекущийТоварПроцент(Команда)
	
	Если ЗапретРучныхСкидокПоСтроке() Тогда
		ТекущийТоварСкидка = 0;
	Иначе
		СкидкаТекущийТоварПроцентКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаТекущийТоварУправляемая(Команда)
	
	ДополнительныеПараметры = Новый Структура("ОбластьДействия", "На строку");
	Если СкидкиРассчитаны Тогда
		ЗадатьВопросПоРасчетуСкидок("УправляемыеСкидкиЗавершение", ДополнительныеПараметры);
	Иначе
		УправляемыеСкидкиЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РучнаяСкидкаПроцентомПоСтроке(СтрокаЧека)

	Если Не СтрокаЧека = Неопределено И Не СтрокаЧека.Подарок Тогда
		
		СкидкиРазрешены = (Не СтрокаЧека.ЗапретРучныхСкидок);
		ЦветФонаНеактивнойКнопки = ЦветаФормы.Авто;
		ЦветФонаАктивнойКнопки = ЦветФонаНеактивнойКнопки;
		ПересчитыватьСуммуСтроки = Истина;
		
		Если ДопустимоПрименениеСкидкиПоСтроке(СтрокаЧека, СкидкиРазрешены, ЗначениеСкидкиНаСтроку) Тогда
			
				ПредупредитьОПревышенииРучнойСкидки = Ложь;
				
				Если ЗначениеСкидкиНаСтроку > 0 Тогда
					МаксимальноеЗначениеСкидкиНаценки = МаксимальныйПроцентРучнойСкидки;
				Иначе
					МаксимальноеЗначениеСкидкиНаценки = МаксимальныйПроцентРучнойНаценки;
				КонецЕсли;
				Если ЗначениеСкидкиНаСтроку > МаксимальноеЗначениеСкидкиНаценки И ЗначениеСкидкиНаСтроку > 0
					ИЛИ ЗначениеСкидкиНаСтроку < МаксимальноеЗначениеСкидкиНаценки И ЗначениеСкидкиНаСтроку < 0 Тогда
					
					ЗначениеСкидкиНаСтроку = МаксимальноеЗначениеСкидкиНаценки;
					ПредупредитьОПревышенииРучнойСкидки = Истина;
					
				КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаЧека.МинимальнаяЦена) И ЗначениеЗаполнено(СтрокаЧека.СуммаБезСкидки) Тогда
				
				Если ЗначениеЗаполнено(ТекущийТоварЦенаИзКарточки) Тогда
					ЦенаДляРасчетаСкидкиПоМРЦ = ТекущийТоварЦенаИзКарточки;
				ИначеЕсли ЗначениеЗаполнено(СтрокаЧека.Цена) Тогда
					ЦенаДляРасчетаСкидкиПоМРЦ = СтрокаЧека.Цена;
				Иначе
					ЦенаДляРасчетаСкидкиПоМРЦ = СтрокаЧека.МинимальнаяЦена;
				КонецЕсли;
				
				ПределСкидкиПоМРЦ = (ЦенаДляРасчетаСкидкиПоМРЦ - СтрокаЧека.МинимальнаяЦена)
					* СтрокаЧека.Количество / СтрокаЧека.СуммаБезСкидки * 100;
				
				Если ЗначениеСкидкиНаСтроку > ПределСкидкиПоМРЦ Тогда
					
					ЗначениеСкидкиНаСтроку = ПределСкидкиПоМРЦ;
					ПредупредитьОПревышенииРучнойСкидки = Ложь;
					ПредупредитьОПревышенииМинимальнойЦены(СтрокаЧека.МинимальнаяЦена);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПредупредитьОПревышенииРучнойСкидки Тогда
				
				ВывестиТекстПредупрежденияРучныеСкидки(МаксимальноеЗначениеСкидкиНаценки, "%.");
				
			КонецЕсли;
			
			СтрокаЧека.ПроцентСкидкиНаценки = ЗначениеСкидкиНаСтроку;
			
		ИначеЕсли СкидкиРазрешены И СтрокаЧека.РассчитанаСкидка И СтрокаЧека.ОтображаетсяСкидкаСуммой Тогда
			
			ТекущийТоварСкидка = СтрокаЧека.СуммаСкидкиНаценки / СтрокаЧека.СуммаБезСкидки * 100;
			ЗначениеСкидкиНаСтроку = ТекущийТоварСкидка;
			Если ТекущийТоварСкидка < 0 Тогда
				ТекущийТоварСкидка = - ТекущийТоварСкидка;
			КонецЕсли;
			СтрокаЧека.ПроцентСкидкиНаценки = ЗначениеСкидкиНаСтроку;
			Элементы.СкидкаТекущийТоварСумма.ЦветФона = ЦветФонаНеактивнойКнопки;
			ПересчитыватьСуммуСтроки = Ложь;
			СтрокаЧека.ОтображаетсяСкидкаПроцентом = Истина;
			СтрокаЧека.ОтображаетсяСкидкаСуммой = Не СтрокаЧека.ОтображаетсяСкидкаПроцентом;
			
		Иначе
			
			СтрокаЧека.СуммаСкидкиНаценки = 0;
			СтрокаЧека.ПроцентСкидкиНаценки = 0;
			ТекущийТоварСкидка = 0;
			ЗначениеСкидкиНаСтроку = 0;
			ЗаполнитьЗаголовокСкидкиНаСтроку();
			
		КонецЕсли;
		
		СтрокаЧека.РассчитанаСкидка = (ЗначениеСкидкиНаСтроку <> 0);
		
		Если СтрокаЧека.РассчитанаСкидка Тогда
			ЦветФонаАктивнойКнопки = ЦветаФормы.АктивнаяКнопка;
		КонецЕсли;
		
		Если ПересчитыватьСуммуСтроки Тогда
			
			Если Не СкидкиРассчитаны Тогда
				ИдентификаторСтроки = СтрокаЧека.ПолучитьИдентификатор();
				РассчитатьСуммуВСтрокеТабличнойЧасти(ИдентификаторСтроки);
			КонецЕсли;
			ОбновитьИнформациюНаДисплееПокупателя(ТипыОперацийДисплеяПокупателя.ИзменениеЦены);
			
		КонецЕсли;
		
		Элементы.СкидкаТекущийТоварПроцент.ЦветФона = ЦветФонаАктивнойКнопки;
		ДоступностьСкидкиСуммой = Не СтрокаЧека.РассчитанаСкидка;
		УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, ДоступностьСкидкиСуммой);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаТекущийТоварСумма(Команда)
	
	Если ЗапретРучныхСкидокПоСтроке() Тогда
		ТекущийТоварСкидка = 0;
	Иначе
		СкидкаТекущийТоварСуммаКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РучнаяСкидкаСуммойПоСтроке(СтрокаЧека)

	Если Не СтрокаЧека = Неопределено Тогда
		
		СкидкиРазрешены = (Не (СтрокаЧека.ЗапретРучныхСкидок Или СтрокаЧека.Подарок));
		ЦветФонаНеактивнойКнопки = ЦветаФормы.Авто;
		ЦветФонаАктивнойКнопки = ЦветФонаНеактивнойКнопки;
		ПересчитыватьСуммуСтроки = Истина;
		
		Если ДопустимоПрименениеСкидкиПоСтроке(СтрокаЧека, СкидкиРазрешены, ЗначениеСкидкиНаСтроку) Тогда
			
			ПредупредитьОПревышенииРучнойСкидки = Ложь;
			Если ЗначениеСкидкиНаСтроку > 0 Тогда
				МаксимальноеЗначениеСкидкиНаценки = МаксимальныйПроцентРучнойСкидки;
			Иначе
				МаксимальноеЗначениеСкидкиНаценки = МаксимальныйПроцентРучнойНаценки;
			КонецЕсли;
			МаксимальнаяСкидка = СтрокаЧека.СуммаБезСкидки * МаксимальноеЗначениеСкидкиНаценки / 100;
			
			Если ЗначениеСкидкиНаСтроку > МаксимальнаяСкидка И ЗначениеСкидкиНаСтроку > 0
				ИЛИ ЗначениеСкидкиНаСтроку < МаксимальнаяСкидка И ЗначениеСкидкиНаСтроку < 0 Тогда
				
				ЗначениеСкидкиНаСтроку = МаксимальнаяСкидка;
				ПредупредитьОПревышенииРучнойСкидки = Истина;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаЧека.МинимальнаяЦена) Тогда
				
				Если ЗначениеЗаполнено(ТекущийТоварЦенаИзКарточки) Тогда
					ЦенаДляРасчетаСкидкиПоМРЦ = ТекущийТоварЦенаИзКарточки;
				ИначеЕсли ЗначениеЗаполнено(СтрокаЧека.Цена) Тогда
					ЦенаДляРасчетаСкидкиПоМРЦ = СтрокаЧека.Цена;
				Иначе
					ЦенаДляРасчетаСкидкиПоМРЦ = СтрокаЧека.МинимальнаяЦена;
				КонецЕсли;
				
				ПределСкидкиПоМРЦ = (ЦенаДляРасчетаСкидкиПоМРЦ - СтрокаЧека.МинимальнаяЦена)
					* СтрокаЧека.Количество;
				
				Если ЗначениеСкидкиНаСтроку > ПределСкидкиПоМРЦ Тогда
					
					ТекущийТоварСкидка = ПределСкидкиПоМРЦ;
					ПредупредитьОПревышенииРучнойСкидки = Ложь;
					ПредупредитьОПревышенииМинимальнойЦены(СтрокаЧека.МинимальнаяЦена);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПредупредитьОПревышенииРучнойСкидки Тогда
				
				ВывестиТекстПредупрежденияРучныеСкидки(ЗначениеСкидкиНаСтроку, ПредставлениеВалюты);
				
			КонецЕсли;
			
			СтрокаЧека.СуммаСкидкиНаценки = ЗначениеСкидкиНаСтроку;
			
		ИначеЕсли СкидкиРазрешены И СтрокаЧека.РассчитанаСкидка И СтрокаЧека.ОтображаетсяСкидкаПроцентом Тогда
			
			ТекущийТоварСкидка = СтрокаЧека.СуммаСкидкиНаценки;
			ЗначениеСкидкиНаСтроку = ТекущийТоварСкидка;
			Если ТекущийТоварСкидка < 0 Тогда
				ТекущийТоварСкидка = - ТекущийТоварСкидка;
			КонецЕсли;
			СтрокаЧека.СуммаСкидкиНаценки = ЗначениеСкидкиНаСтроку;
			СтрокаЧека.ПроцентСкидкиНаценки = 0;
			Элементы.СкидкаТекущийТоварПроцент.ЦветФона = ЦветФонаНеактивнойКнопки;
			ПересчитыватьСуммуСтроки = Ложь;
			СтрокаЧека.ОтображаетсяСкидкаСуммой = Истина;
			СтрокаЧека.ОтображаетсяСкидкаПроцентом = Не СтрокаЧека.ОтображаетсяСкидкаСуммой;
			
		Иначе
			
			СтрокаЧека.СуммаСкидкиНаценки = 0;
			СтрокаЧека.ПроцентСкидкиНаценки = 0;
			ТекущийТоварСкидка = 0;
			ЗначениеСкидкиНаСтроку = 0;
			ЗаполнитьЗаголовокСкидкиНаСтроку();
			
		КонецЕсли;
		
		СтрокаЧека.РассчитанаСкидка = ЗначениеСкидкиНаСтроку <> 0;
		
		Если СтрокаЧека.РассчитанаСкидка Тогда
			ЦветФонаАктивнойКнопки = ЦветаФормы.АктивнаяКнопка;
		КонецЕсли;
		
		Если ПересчитыватьСуммуСтроки Тогда
			
			РассчитатьСуммуВСтрокеТабличнойЧасти();
			ОбновитьИнформациюНаДисплееПокупателя(ТипыОперацийДисплеяПокупателя.ИзменениеЦены);
			
		КонецЕсли;
		
		Элементы.СкидкаТекущийТоварСумма.ЦветФона = ЦветФонаАктивнойКнопки;
		ДоступностьСкидкиПроцентом = Не СтрокаЧека.РассчитанаСкидка И (ТекущийТоварСкидка = 0);
		УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, ДоступностьСкидкиПроцентом);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтложитьЧек(Команда)
	
	ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
	Если Объект.Товары.Количество() > 0 Тогда
		ОтложитьЧекПроверкаПрав();
	Иначе
		ОтложенныеЧекиПроверкаПрав();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЧек(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗавершение Тогда
		ЗакрытьПриложениеПриОшибке(Истина);
	Иначе
		УдалитьЧекПродолжение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЧекИзФормыЗапретаПродажи(Команда)
	
	УдалитьЧекПродолжение(Истина);
	ИнтерфейсРМКСлужебныйКлиент.ОчиститьРезультатКонтроляПродаж(РезультатКонтроляПродаж);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложенныеЧеки(Команда)
	
	ОтложенныеЧекиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧек(Команда)
	
	Если Не Элементы.ПробитьЧек.Доступность Тогда
		Возврат;
	КонецЕсли;
	
	Если ПриемАванса И СуммаОплаченоСБП = СуммаИтого Тогда
		НачатьОплатуЧекаСБП(СуммаОплаченоСБП, Элементы.ГруппаОплатаСБП);
	ИначеЕсли ПриемАванса И СуммаОплаченоЮКасса = СуммаИтого Тогда
		НачатьОплатуЧекаСБП(СуммаОплаченоЮКасса, Элементы.ГруппаОплатаЮКасса);
	Иначе
		ОбработатьПробитиеЧекаНаКлиенте(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Войти(Команда)
	
	ВойтиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьКассира(Команда)
	
	СменитьМагазинИлиКассира();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьПарольКассира(Команда)
	
	Если НЕ ЗначениеЗаполнено(КодДляЗаменыПрав) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьШтрихкодКлиент(КодДляЗаменыПрав);
	ПогаситьСветовойСигналОбОшибкеНаДисплее();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПарольКассира(Команда)
	
	ОтменитьПарольКассираКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиДанныеПокупателя(Команда)
	ТребуетсяПовышениеПрав = Ложь;
	ОбновитьКоличествоВРедактируемойСтроке(ТребуетсяПовышениеПрав);
	Если Не ТребуетсяПовышениеПрав Тогда
		Если ИспользоватьДисконтныеКарты Или КонтрагентВыбран Тогда
			ВвестиДанныеПокупателяКлиент();
		Иначе
			ВыбратьКонтрагентаКлиент();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НайтиВЧеке(Команда)
	НайтиВЧекеНажатие();
КонецПроцедуры

&НаКлиенте
Процедура ОтменаНайтиВЧеке(Команда)
	НайтиВЧекеНажатие();
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСтраницуИнфоОшибка(Команда)
	
	ЗакрытьСтраницуИнфоОшибкаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНет(Команда)
	ПерейтиНаСтраницуОплата();
КонецПроцедуры

&НаКлиенте
Процедура ОтветДа(Команда)
	
	Если ЗначениеЗаполнено(СуммаТекущейОплатыКартой) Тогда
		
		Если ВыдаватьНаличныеНаКассе И СуммаНаличныхКВыдаче > 0 Тогда
			СуммаНаличныхКВыдаче = 0;
		КонецЕсли;
		
		ПроверитьСуммуОплатыЧека(СуммаТекущейОплатыКартой);
		ОбщегоНазначенияРМККлиентПереопределяемый.ДозаполнитьДанныеПослеОплатыПоКарте(ЭтотОбъект);
		ТипОплаты = "Карта";
		
		УстановитьДоступностьЭлементовРедактированияЧека(Истина);
		НачатьПечатьЧека();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаОплатыОк(Команда)
	
	ПроверитьСуммуОплатыЧека(0);
	
	УстановитьДоступностьЭлементовРедактированияЧека(Истина);
	ВывестиИнформациюНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.ОтменаОплаты);
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
	НастроитьДоступностьПробитьЧек();
	
КонецПроцедуры

&НаКлиенте
Процедура Каталог(Команда)
	
	Если Не РежимПлитки И Не Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая Тогда
		Если ОжидатьВводМарки
			Или Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиУправления)
			= Элементы.ПанельУправленияЧеком
			Или Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ОбластьОперативногоУправленияЧеком Тогда
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкаКаталогаСбрасыватьОтбор Тогда
		СброситьНастройкиОтбораКаталога();
	КонецЕсли;
	
	ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
	ТребуетсяПовышениеПрав = Ложь;
	ОбновитьКоличествоВРедактируемойСтроке(ТребуетсяПовышениеПрав);
	Если Не ТребуетсяПовышениеПрав Тогда
		КаталогПродолжение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПоискТоваров(Команда)
	ЗакрытьПоискТоваровКлиент();
	НастроитьДоступностьПробитьЧек();
	Если РежимВыбораПодарка Тогда
		ОчиститьПодаркиПоТекущемуВладельцу(Истина);
		ПодключитьОбработчикОжидания("ОткрытьФормуВыбораПодарков", 0.1, Истина);
	КонецЕсли;
	РежимВыбораПодарочногоСертификата = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧек(Команда)
	
	ОтправитьЧекКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаВыемки(Команда)
	
	ВосстановитьЭлементыПослеВнесенияИлиВыемки();
	
	Если ПараметрыЗакрытияСменыПриАвтоматическойВыемке.ВыемкаПриЗакрытииСмены Тогда
		ЗакрытьСменуЗавершение(Неопределено, ПараметрыЗакрытияСменыПриАвтоматическойВыемке.ДополнительныеПараметры);
		ПараметрыЗакрытияСменыПриАвтоматическойВыемке = ОбщегоНазначенияРМККлиент.ПараметрыЗакрытияСменыПриАвтоматическойВыемке();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперациюВыемка(Команда)
	
	Если НЕ ЗначениеЗаполнено(СуммаВыемка) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	СкорректироватьНаличныеДенежныеСредстваВКассеККМКлиент(Отказ, Объект.Организация, Объект.КассаККМ, -СуммаВыемка, Истина);
	
	Если НЕ Отказ Тогда
		ДополнительныеПараметры = ПараметрыЗакрытияСменыПриАвтоматическойВыемке;
		ОбщегоНазначенияРМККлиентПереопределяемый.ВыполнитьОперациюВыемка(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперациюВнесение(Команда)
	
	Если НЕ ЗначениеЗаполнено(СуммаВнесение) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	СкорректироватьНаличныеДенежныеСредстваВКассеККМКлиент(Отказ, Объект.Организация, Объект.КассаККМ, СуммаВнесение, Истина);
	
	Если НЕ Отказ Тогда
		ОбщегоНазначенияРМККлиентПереопределяемый.ВыполнитьОперациюВнесение(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаВнесения(Команда)
	
	ВосстановитьЭлементыПослеВнесенияИлиВыемки();
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьТовар(Команда)
	
	Если ОжидатьВводМарки И НЕ ДанныеДляРучногоСопоставления = Неопределено Тогда
		
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
		Если НЕ ТекущаяСтрока = Неопределено Тогда
			
			Отказ = Ложь;
			СопоставитьСТекущейСтрокой(Отказ);
			Если Отказ Тогда
				ДанныеДляРучногоСопоставления = Неопределено;
				Возврат;
			КонецЕсли;
			
			КонтекстПроверкиКонтрольнойМарки = КонтекстПроверкиКонтрольнойМарки();
			ЗаполнитьЗначенияСвойств(КонтекстПроверкиКонтрольнойМарки, ТекущаяСтрока);
			ЭтоОбработкаСопоставленияТовара = Истина;
			КонтекстПроверкиКонтрольнойМарки.ЭтоОбработкаСопоставленияТовара = ЭтоОбработкаСопоставленияТовара;
			ЗавершитьВводШтрихкодаМаркаВведена(КонтекстПроверкиКонтрольнойМарки);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;

	РучноеСопоставлениеТовара = Истина;
	ОткрытьКаталогКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаСопоставленияТовара(Команда)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	ДанныеДляРучногоСопоставления = Неопределено;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	
	Если НЕ ОжидатьВводМарки Тогда 
		ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
	КонецЕсли;
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнфо, Ложь);
	Если РежимНачальнойСтраницы = 1 Тогда
		ОсновнаяСтраница = Элементы.СтраницаОбщая;
	Иначе
		ОсновнаяСтраница = Элементы.СтраницаПустая;
	КонецЕсли;
	
	АктивнаяГруппаСлоя = Элементы.ОбластьОперативногоУправленияЧеком;
	
	Если Объект.Товары.Количество() > 0 Тогда
	
		ОсновнаяСтраница = Элементы.СтраницаОбщая;
		Если ОжидатьВводМарки Тогда
			АктивнаяГруппаСлоя = Элементы.ГруппаОтсканироватьМарку;
		КонецЕсли;
		
	ИначеЕсли ОсновнойПодборПлиточный Тогда
		
		ПереключатьсяВРежимПлитки = Истина;
		
	КонецЕсли;
	
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, АктивнаяГруппаСлоя);
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(ОсновнаяСтраница);
	ПереключитьВРежимПлитки();
	ИнтерфейсРМКСлужебныйКлиент.НастроитьДоступностьРежимаОплаты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСторноПоКарте(Команда)
	
	ДанныеТерминалов = ОбщегоНазначенияРМККлиент.ДанныеТекущихЭквайринговыхТерминалов(ЭтотОбъект);
	
	Если ДанныеТерминалов.Количество() = 0 Тогда
		ТекстЗаголовка = НСтр("ru = 'При выполнении операции возникла ошибка'");
		ТекстСообщения = НСтр("ru = 'Не удалось определить эквайринговый терминал.
									|Оплата по карте не была произведена.'");
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВыполнитьСторноОплатыПоКарте(ДанныеТерминалов[0]);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекКоррекции(Команда)
	ПереключитьРежимНаЧекКоррекции();
КонецПроцедуры

&НаКлиенте
Процедура ВозвратПродажи(Команда)
	ПереключитьРежимНаВозврат();
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЧека(Команда)
	ПерейтиКВыборуЧекаДляПроверки();
КонецПроцедуры

&НаКлиенте
Процедура Продажа(Команда)
	ПереключитьРежимНаПродажа();
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСмену(Команда)
	ЗакрытьСменуКлиент();
КонецПроцедуры

&НаКлиенте
Процедура СверкаИтогов(Команда)
	СверкаИтоговКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПодтверждениеНСПК(Команда)
	
	ОтправитьПодтверждениеНСПККлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторнаяПечатьЧека(Команда)
	ПовторнаяПечатьЧекаКлиент();
КонецПроцедуры

&НаКлиенте
Процедура Внесение(Команда)
	ОткрытьСтраницуВнесенияДенежныхСредств();
КонецПроцедуры

&НаКлиенте
Процедура Выемка(Команда)
	ОткрытьСтраницуВыемкиДенежныхСредств();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	ВесТекущегоТовара();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыТарирования(Команда)
	ПерейтиКПараметрамТарирования();
КонецПроцедуры

&НаКлиенте
Процедура СкидкаНаЧек(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		Если СкидкиРассчитаны Тогда
			ЗадатьВопросПоРасчетуСкидок("СкидкаНаЧекЗавершение");
		Иначе
			СкидкаНаЧекЗавершение(КодВозвратаДиалога.Да);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельУстановкиСкидкиНаЧек(Команда)
	
	Активность = Истина;
	НастроитьИнтерфейсПримененияСкидкиНаЧек(Элементы.ГруппаРедактированияСтрокиКорзины, Активность);
	ЗначениеСкидкиНаЧек = 0;
	ЦветКнопкиПоУмолчанию = ЦветаФормы.Авто;
	
	СтрокаСТекущимТоваром = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	ТекущийТоварСкидка = СтрокаСТекущимТоваром.СуммаСкидкиНаценки;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ЗначениеСкидкиНаЧек, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧекСуммой, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧекПроцентом, Истина);
	
	Элементы.СкидкаНаЧекПроцентом.ЦветФона = ЦветКнопкиПоУмолчанию;
	Элементы.СкидкаНаЧекСуммой.ЦветФона = ЦветКнопкиПоУмолчанию;
	
	Элементы.СкидкаТекущийТоварСумма.ЦветФона = ЦветКнопкиПоУмолчанию;
	Элементы.СкидкаТекущийТоварПроцент.ЦветФона = ЦветКнопкиПоУмолчанию;
	
	Если СтрокаСТекущимТоваром.ОтображаетсяСкидкаСуммой Тогда
		
		Элементы.СкидкаТекущийТоварСумма.ЦветФона = ЦветаФормы.АктивнаяКнопка;
		ТекущийТоварСкидка = СуммаРучнойСкидкиНаПозицию(СтрокаСТекущимТоваром);
		
	ИначеЕсли СтрокаСТекущимТоваром.ОтображаетсяСкидкаПроцентом Тогда
		
		Элементы.СкидкаТекущийТоварПроцент.ЦветФона = ЦветаФормы.АктивнаяКнопка;
		ТекущийТоварСкидка = СтрокаСТекущимТоваром.ПроцентСкидкиНаценки;
		
	Иначе
	КонецЕсли;
	
	ДоступностьПоляСкидкиНаСтроку = 
		Не (СтрокаСТекущимТоваром.ОтображаетсяСкидкаПроцентом Или СтрокаСТекущимТоваром.ОтображаетсяСкидкаСуммой);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, ДоступностьПоляСкидкиНаСтроку);
	ПримененаСкидкаНаЧек = (Объект.Товары.Итог("СуммаСкидкиНаценки") > 0);
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаНаЧекПроцентом(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		Если СкидкиРассчитаны И РаботаВРежимеМедленногоСоединения Тогда
			ЗадатьВопросПоРасчетуСкидок("СкидкаНаЧекПроцентомЗавершение");
		Иначе
			СкидкаНаЧекПроцентомЗавершение(КодВозвратаДиалога.Да);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРучнуюСкидкуПроцентомНаПозиции(Позиции, ЗначениеСкидки)
	
	Если Позиции.Количество() > 0 Тогда
		
		ЭтоРасчетСкидкиНаНабор = Истина;
		
		Для Каждого СтрокаКорзины Из Позиции Цикл
			
			Если СтрокаКорзины.НомерНабора = 0 Тогда
				
				ЭтоРасчетСкидкиНаНабор = Ложь;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЭтоРасчетСкидкиНаЧек = (Позиции.Количество() = Объект.Товары.Количество());
		
		Если ЭтоРасчетСкидкиНаЧек Тогда
			
			ПровестиРасчетСкидок		= Истина;
			ПересчитатьСкидкуПроцентом	= Истина;
			СкидкаПревышена				= Ложь;
			ЦветФонаНеактивнойКнопки	= ЦветаФормы.Авто;
			ЦветФонаАктивнойКнопки		= ЦветФонаНеактивнойКнопки;
			
			Если НЕ (ПримененаСкидкаНаЧек Или СуммаКОплате = 0) Тогда
				
				Если ЗначениеСкидки > 0 Тогда
					МаксимальноеЗначениеСкидки = МаксимальныйПроцентРучнойСкидки;
				Иначе
					МаксимальноеЗначениеСкидки = МаксимальныйПроцентРучнойНаценки;
				КонецЕсли;
				
				Если ЗначениеСкидки > МаксимальноеЗначениеСкидки И ЗначениеСкидки > 0
					ИЛИ ЗначениеСкидки < МаксимальноеЗначениеСкидки И ЗначениеСкидки < 0 Тогда
					
					ЗначениеСкидки = МаксимальноеЗначениеСкидки;
					ЗначениеСкидкиНаЧек = ?(ЗначениеСкидки < 0, -1,1) * МаксимальноеЗначениеСкидки;
					СкидкаПревышена = Истина;
					
					Если ЭтоРасчетСкидкиНаНабор Тогда
						ТекущийТоварСкидка = ЗначениеСкидки;
					КонецЕсли;
					
				КонецЕсли;
				
				ОтображаетсяСкидкаПроцентомНаЧек = Истина;
				ОтображаетсяСкидкаСуммойНаЧек = Ложь;
				
			ИначеЕсли ПримененаСкидкаНаЧек И ОтображаетсяСкидкаСуммойНаЧек Тогда
				
				ПровестиРасчетСкидок = Ложь;
				
			Иначе
				
				ЗначениеСкидкиНаЧек = 0;
				ЗначениеСкидкиНаценки = 0;
				ПересчитатьСкидкуПроцентом = Ложь;
				
				Если ЭтоРасчетСкидкиНаНабор Тогда
					ТекущийТоварСкидка = 0;
				КонецЕсли;
				ЗаполнитьЗаголовокСкидкиНаЧек();
				
			КонецЕсли;
			
			ИдентификаторТекущейСтрокиДоРасчетаСкидок = ТекущийТоварИдентификатор;
			
			Если ПровестиРасчетСкидок Тогда
				
				Для Каждого СтрокаКорзины Из Позиции Цикл
					
					Если (Не (СтрокаКорзины.ЗапретРучныхСкидок Или СтрокаКорзины.Подарок)) Тогда
						
						ЗначениеСкидкиДляСтроки = ЗначениеСкидки;
						
						Если ЗначениеЗаполнено(СтрокаКорзины.МинимальнаяЦена) И ЗначениеЗаполнено(СтрокаКорзины.СуммаБезСкидки) Тогда
							
							Если ЗначениеЗаполнено(СтрокаКорзины.Цена) Тогда
								ЦенаДляРасчетаСкидкиПоМРЦ = СтрокаКорзины.Цена;
							Иначе
								ЦенаДляРасчетаСкидкиПоМРЦ = СтрокаКорзины.МинимальнаяЦена;
							КонецЕсли;
							
							ЗначениеСкидкиДляСтрокиПоМРЦ = (ЦенаДляРасчетаСкидкиПоМРЦ - СтрокаКорзины.МинимальнаяЦена)
							* СтрокаКорзины.Количество / СтрокаКорзины.СуммаБезСкидки * 100;
							
							Если ЗначениеСкидкиДляСтроки > ЗначениеСкидкиДляСтрокиПоМРЦ Тогда
								ЗначениеСкидкиДляСтроки = ЗначениеСкидкиДляСтрокиПоМРЦ;
							КонецЕсли;
							
						КонецЕсли;
						
						ТекущийТоварИдентификатор = СтрокаКорзины.ПолучитьИдентификатор();
						УстановитьЗначенияСкидкиВСтрокеКорзины(СтрокаКорзины, ЗначениеСкидкиДляСтроки);
						РассчитатьСуммуВСтрокеТабличнойЧасти(ТекущийТоварИдентификатор);
						
						ПримененаСкидкаНаЧек = (ЗначениеСкидкиДляСтроки <> 0);
						
						ОбновитьИнформациюНаДисплееПокупателя(ТипыОперацийДисплеяПокупателя.ИзменениеЦены);
						
					КонецЕсли;
					
					СтрокаКорзины.ОтображаетсяСкидкаПроцентом = ПримененаСкидкаНаЧек;
					СтрокаКорзины.ОтображаетсяСкидкаСуммой = Ложь;
					
				КонецЦикла;
				
				ПримененаСкидкаНаЧек = (ЗначениеСкидки <> 0);
				
			КонецЕсли;
			
			Если ПересчитатьСкидкуПроцентом Тогда
				
				СуммаТоваровПодлежащихДисконтированию = 0;
				
				Для Каждого СтрокаКорзины Из Объект.Товары Цикл
					
					Если (Не (СтрокаКорзины.ЗапретРучныхСкидок Или СтрокаКорзины.Подарок)) Тогда
						СуммаТоваровПодлежащихДисконтированию = СуммаТоваровПодлежащихДисконтированию + СтрокаКорзины.СуммаБезСкидки;
					КонецЕсли;
					
				КонецЦикла;
				
				Если СуммаТоваровПодлежащихДисконтированию > 0 Тогда
					
					ОтображаетсяСкидкаПроцентомНаЧек = Истина;
					ОтображаетсяСкидкаСуммойНаЧек = Ложь;
					Элементы.СкидкаНаЧекСуммой.ЦветФона = ЦветФонаНеактивнойКнопки;
					НовоеЗначениеСкидкиНаЧек = Окр(Объект.Товары.Итог("СуммаСкидкиНаценки")
						/ СуммаТоваровПодлежащихДисконтированию * 100, 2);
					
					Если ЗначениеСкидки <> НовоеЗначениеСкидкиНаЧек Тогда
						
						ЗначениеСкидкиНаЧек = НовоеЗначениеСкидкиНаЧек;
						Если НовоеЗначениеСкидкиНаЧек < 0 Тогда
							ЗначениеСкидкиНаЧек = - НовоеЗначениеСкидкиНаЧек;
						КонецЕсли;
						СкидкаПревышена = Истина;
						ЗначениеСкидки = НовоеЗначениеСкидкиНаЧек;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПровестиРасчетСкидок И СкидкаПревышена Тогда
				ВывестиТекстПредупрежденияРучныеСкидки(ЗначениеСкидки, "%.");
			КонецЕсли;
			
			Если ПримененаСкидкаНаЧек Тогда
				ЦветФонаАктивнойКнопки = ЦветаФормы.АктивнаяКнопка;
			КонецЕсли;
			
			Элементы.СкидкаНаЧекПроцентом.ЦветФона = ЦветФонаАктивнойКнопки;
			ДоступностьСкидкиСуммой = НЕ ПримененаСкидкаНаЧек;
			УстановитьДоступностьЭлементаФормы(Элементы.ЗначениеСкидкиНаЧек, ДоступностьСкидкиСуммой);
			ТекущийТоварИдентификатор = ИдентификаторТекущейСтрокиДоРасчетаСкидок;
			
			Если ЭтоРасчетСкидкиНаНабор Тогда
				
				УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, ДоступностьСкидкиСуммой);
				Элементы.СкидкаТекущийТоварПроцент.ЦветФона = ЦветФонаАктивнойКнопки;
				Элементы.СкидкаТекущийТоварСумма.ЦветФона = ЦветФонаНеактивнойКнопки;
				
			КонецЕсли;
			
		ИначеЕсли ЭтоРасчетСкидкиНаНабор Тогда
			
			Для Каждого ПозицияНабора Из Позиции Цикл
				РучнаяСкидкаПроцентомПоСтроке(ПозицияНабора);
			КонецЦикла;
			
		Иначе
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаНаЧекСуммой(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		Если СкидкиРассчитаны И РаботаВРежимеМедленногоСоединения Тогда
			ЗадатьВопросПоРасчетуСкидок("СкидкаНаЧекСуммойЗавершение");
		Иначе
			СкидкаНаЧекСуммойЗавершение(КодВозвратаДиалога.Да);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРучнуюСкидкуСуммойНаПозиции(Позиции, ЗначениеСкидки)
	
	Если Позиции.Количество() > 0 Тогда
		
		ЭтоРасчетСкидкиНаНабор = Истина;
		
		Для Каждого СтрокаКорзины Из Позиции Цикл
			
			Если СтрокаКорзины.НомерНабора = 0 Тогда
				
				ЭтоРасчетСкидкиНаНабор = Ложь;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЭтоРасчетСкидкиНаЧек = (Позиции.Количество() = Объект.Товары.Количество());
		
		Если ЭтоРасчетСкидкиНаЧек Тогда
			
			ПровестиРасчетСкидок		= Истина;
			ПересчитатьСкидкуСуммой		= Истина;
			СкидкаПревышена				= Ложь;
			ЦветФонаНеактивнойКнопки	= ЦветаФормы.Авто;
			ЦветФонаАктивнойКнопки		= ЦветФонаНеактивнойКнопки;
			РаспределенныеСкидки		= Новый Массив;
			ТочностьОкругленияСкидки	= 2;
			МассивКоэффициентов			= Новый Массив;
			
			Если Не (ПримененаСкидкаНаЧек Или СуммаКОплате = 0) Тогда
				
				МаксимальноеЗначениеСкидки = 0;
				
				СкидкаНаценка = 0;
				Если ЗначениеСкидки > 0 Тогда
					СкидкаНаценка = МаксимальныйПроцентРучнойСкидки;
				Иначе
					СкидкаНаценка = МаксимальныйПроцентРучнойНаценки;
				КонецЕсли;
				
				Для Каждого СтрокаКорзины Из Объект.Товары Цикл
					Если НЕ СтрокаКорзины.ЗапретРучныхСкидок Тогда
						Если СтрокаКорзины.Подарок Тогда
							МассивКоэффициентов.Добавить(0);
						Иначе
							МассивКоэффициентов.Добавить(СтрокаКорзины.СуммаБезСкидки);
						КонецЕсли;
						
						МаксимальнаяСкидкаПоСтроке = Окр(
							СтрокаКорзины.СуммаБезСкидки * СкидкаНаценка / 100, ТочностьОкругленияСкидки);
						
						Если ЗначениеЗаполнено(СтрокаКорзины.МинимальнаяЦена) Тогда
							
							МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены = Окр(
								(СтрокаКорзины.Цена - СтрокаКорзины.МинимальнаяЦена) * СтрокаКорзины.Количество, ТочностьОкругленияСкидки);
							
							Если МаксимальнаяСкидкаПоСтроке > МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены Тогда
								МаксимальнаяСкидкаПоСтроке = МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены;
							КонецЕсли;
							
						КонецЕсли;
						
						МаксимальноеЗначениеСкидки = МаксимальноеЗначениеСкидки + МаксимальнаяСкидкаПоСтроке;
					КонецЕсли;
				КонецЦикла;
				
				Если ЗначениеСкидки > МаксимальноеЗначениеСкидки И ЗначениеСкидки > 0
					ИЛИ ЗначениеСкидки < МаксимальноеЗначениеСкидки И ЗначениеСкидки < 0 Тогда
					
					ЗначениеСкидки = МаксимальноеЗначениеСкидки;
					ЗначениеСкидкиНаЧек = ?(ЗначениеСкидки < 0, -1,1) * МаксимальноеЗначениеСкидки;
					СкидкаПревышена = Истина;
					
					Если ЭтоРасчетСкидкиНаНабор Тогда
						ТекущийТоварСкидка = ЗначениеСкидки;
					КонецЕсли;
					
				КонецЕсли;
				
				ОтображаетсяСкидкаСуммойНаЧек = Истина;
				ОтображаетсяСкидкаПроцентомНаЧек = Ложь;
				
			ИначеЕсли ПримененаСкидкаНаЧек И ОтображаетсяСкидкаПроцентомНаЧек Тогда
				ПровестиРасчетСкидок = Ложь;
			Иначе
				
				ЗначениеСкидкиНаЧек = 0;
				ЗначениеСкидкиНаценки = 0;
				ПересчитатьСкидкуСуммой = Ложь;
				
				Если ЭтоРасчетСкидкиНаНабор Тогда
					ТекущийТоварСкидка = 0;
				КонецЕсли;
				ЗаполнитьЗаголовокСкидкиНаЧек();
			КонецЕсли;
			
			ИдентификаторТекущейСтрокиДоРасчетаСкидок = ТекущийТоварИдентификатор;
			
			Если ПровестиРасчетСкидок Тогда
				
				ЭтоСкидкаПроцентом = Ложь;
				ТребуетсяРаспределение = Истина;
				РаспределяемаяСумма = ЗначениеСкидки;
				РаспределенныеИндексы = Новый Массив;
				
				Пока ТребуетсяРаспределение Цикл
					
					ТребуетсяРаспределение = Ложь;
					
					РаспределенныеСкидки =
						ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(РаспределяемаяСумма,
							МассивКоэффициентов, ТочностьОкругленияСкидки);
					
					ТекущийИндекс = 0;
					
					Для Каждого СтрокаКорзины Из Объект.Товары Цикл
						Если НЕ (СтрокаКорзины.ЗапретРучныхСкидок Или СтрокаКорзины.Подарок) Тогда
							ТекущийТоварИдентификатор = СтрокаКорзины.ПолучитьИдентификатор();
							
							Если РаспределяемаяСумма <> 0 И РаспределенныеСкидки <> Неопределено Тогда
								
								Если РаспределенныеИндексы.Найти(ТекущийИндекс) = Неопределено Тогда
									
									СуммаСкидкиПоСтроке = РаспределенныеСкидки[ТекущийИндекс];
									
									Если ЗначениеЗаполнено(СтрокаКорзины.МинимальнаяЦена) Тогда
										
										МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены =
											Окр((СтрокаКорзины.Цена - СтрокаКорзины.МинимальнаяЦена)
												* СтрокаКорзины.Количество, ТочностьОкругленияСкидки);
										
										Если СуммаСкидкиПоСтроке > МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены Тогда
											
											СуммаСкидкиПоСтроке = МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены;
											
											ТребуетсяРаспределение = Истина;
											РаспределяемаяСумма = РаспределяемаяСумма - СуммаСкидкиПоСтроке;
											РаспределенныеИндексы.Добавить(ТекущийИндекс);
											МассивКоэффициентов[ТекущийИндекс] = 0;
											
										КонецЕсли;
										
									КонецЕсли;
									
									СтрокаКорзины.ОтображаетсяСкидкаСуммой		= СуммаСкидкиПоСтроке <> 0;
									СтрокаКорзины.ОтображаетсяСкидкаПроцентом	= Ложь;
									УстановитьЗначенияСкидкиВСтрокеКорзины(СтрокаКорзины, СуммаСкидкиПоСтроке, ЭтоСкидкаПроцентом);
									РассчитатьСуммуВСтрокеТабличнойЧасти(ТекущийТоварИдентификатор);
									ОбновитьИнформациюНаДисплееПокупателя(ТипыОперацийДисплеяПокупателя.ИзменениеЦены);
									
								КонецЕсли;
								
							Иначе
								
								СтрокаКорзины.ОтображаетсяСкидкаСуммой		= Ложь;
								СтрокаКорзины.ОтображаетсяСкидкаПроцентом	= Ложь;
								УстановитьЗначенияСкидкиВСтрокеКорзины(СтрокаКорзины, 0, ЭтоСкидкаПроцентом);
								РассчитатьСуммуВСтрокеТабличнойЧасти(ТекущийТоварИдентификатор);
								ОбновитьИнформациюНаДисплееПокупателя(ТипыОперацийДисплеяПокупателя.ИзменениеЦены);
								
							КонецЕсли;
							
							ТекущийИндекс = ТекущийИндекс + 1;
						КонецЕсли;
					КонецЦикла;
					
				КонецЦикла;
				
				ПримененаСкидкаНаЧек = ЗначениеСкидки <> 0;
				
			КонецЕсли;
			
			Если ПересчитатьСкидкуСуммой Тогда
				
				СуммаТоваровПодлежащихДисконтированию = 0;
				Для Каждого СтрокаКорзины Из Объект.Товары Цикл
					
					Если (Не (СтрокаКорзины.ЗапретРучныхСкидок Или СтрокаКорзины.Подарок)) Тогда
						СуммаТоваровПодлежащихДисконтированию = СуммаТоваровПодлежащихДисконтированию
							+ СтрокаКорзины.СуммаБезСкидки;
					КонецЕсли;
					
				КонецЦикла;
				
				Если СуммаТоваровПодлежащихДисконтированию > 0 Тогда
					
					ОтображаетсяСкидкаСуммойНаЧек			= Истина;
					ОтображаетсяСкидкаПроцентомНаЧек		= Ложь;
					Элементы.СкидкаНаЧекПроцентом.ЦветФона	= ЦветФонаНеактивнойКнопки;
					НовоеЗначениеСкидкиНаЧек = Объект.Товары.Итог("СуммаСкидкиНаценки");
					
					Если ЗначениеСкидки <> НовоеЗначениеСкидкиНаЧек Тогда
						
						ЗначениеСкидкиНаЧек = НовоеЗначениеСкидкиНаЧек;
						Если НовоеЗначениеСкидкиНаЧек < 0 Тогда
							ЗначениеСкидкиНаЧек = - НовоеЗначениеСкидкиНаЧек;
						КонецЕсли;
						СкидкаПревышена = Истина;
						ЗначениеСкидки = НовоеЗначениеСкидкиНаЧек;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПровестиРасчетСкидок И СкидкаПревышена Тогда
				ВывестиТекстПредупрежденияРучныеСкидки(ЗначениеСкидки, ПредставлениеВалюты);
			КонецЕсли;
			
			Если ПримененаСкидкаНаЧек Тогда
				ЦветФонаАктивнойКнопки = ЦветаФормы.АктивнаяКнопка;
			КонецЕсли;
			
			Элементы.СкидкаНаЧекСуммой.ЦветФона = ЦветФонаАктивнойКнопки;
			ДоступностьСкидкиПроцентом = Не ПримененаСкидкаНаЧек;
			УстановитьДоступностьЭлементаФормы(Элементы.ЗначениеСкидкиНаЧек, ДоступностьСкидкиПроцентом);
			ТекущийТоварИдентификатор = ИдентификаторТекущейСтрокиДоРасчетаСкидок;
			
			Если ЭтоРасчетСкидкиНаНабор Тогда
				
				УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, ДоступностьСкидкиПроцентом);
				Элементы.СкидкаТекущийТоварСумма.ЦветФона = ЦветФонаАктивнойКнопки;
				Элементы.СкидкаТекущийТоварПроцент.ЦветФона = ЦветФонаНеактивнойКнопки;
				
			КонецЕсли;
			
		ИначеЕсли ЭтоРасчетСкидкиНаНабор Тогда
			РассчитатьРучнуюСкидкуСуммойНаНабор(Позиции, ЗначениеСкидки);
		Иначе
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРучнуюСкидкуСуммойНаНабор(Набор, ЗначениеСкидки)
	
	Если Набор.Количество() > 0 Тогда
		
		ПримененаСкидкаНаНабор = Истина;
		ДопустимоПрименениеСкидок = Истина;
		ВесьНаборОплаченБонусами = Истина;
		ОтображаетсяСкидкаПроцентомНаНабор = Истина;
		ОтображаетсяСкидкаСуммойНаНабор = Истина;
		
		Для Каждого СтрокаКорзины Из Набор Цикл
			
			ДопустимоПрименениеСкидок = ДопустимоПрименениеСкидок И (Не (СтрокаКорзины.ЗапретРучныхСкидок
				Или СтрокаКорзины.Подарок));
			ВесьНаборОплаченБонусами = ВесьНаборОплаченБонусами
				И (СтрокаКорзины.Сумма = СтрокаКорзины.СуммаСкидкиОплатыБонусом);
			ОтображаетсяСкидкаПроцентомНаНабор = ОтображаетсяСкидкаПроцентомНаНабор
				И СтрокаКорзины.ОтображаетсяСкидкаПроцентом;
			ОтображаетсяСкидкаСуммойНаНабор = ОтображаетсяСкидкаСуммойНаНабор
				И СтрокаКорзины.ОтображаетсяСкидкаСуммой;
			ПримененаСкидкаНаНабор = ПримененаСкидкаНаНабор И (СтрокаКорзины.СуммаСкидкиНаценки > 0);
			
		КонецЦикла;
		
			ПровестиРасчетСкидок		= Истина;
			ПересчитатьСкидкуСуммой		= Истина;
			СкидкаПревышена				= Ложь;
			ЦветФонаНеактивнойКнопки	= ЦветаФормы.Авто;
			ЦветФонаАктивнойКнопки		= ЦветФонаНеактивнойКнопки;
			РаспределенныеСкидки		= Новый Массив;
			ТочностьОкругленияСкидки			= 2;
			МассивКоэффициентов			= Новый Массив;
			
			ВозможенРасчетСкидкиНаНабор = ДопустимоПрименениеСкидок И Не (ПримененаСкидкаНаНабор Или СуммаКОплате = 0)
				И НЕ (ТекущийТоварСкидка = 0 Или ВесьНаборОплаченБонусами);
				
			Если ВозможенРасчетСкидкиНаНабор Тогда
				
				МаксимальноеЗначениеСкидки = 0;
				
				Для Каждого СтрокаКорзины Из Набор Цикл
					
					МассивКоэффициентов.Добавить(СтрокаКорзины.СуммаБезСкидки);
					
					МаксимальнаяСкидкаПоСтроке = Окр(СтрокаКорзины.СуммаБезСкидки
						* МаксимальныйПроцентРучнойСкидки / 100, ТочностьОкругленияСкидки);
					
					Если ЗначениеЗаполнено(СтрокаКорзины.МинимальнаяЦена) Тогда
						
						МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены =
							Окр((СтрокаКорзины.Цена - СтрокаКорзины.МинимальнаяЦена) * СтрокаКорзины.Количество, ТочностьОкругленияСкидки);
						
						Если МаксимальнаяСкидкаПоСтроке > МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены Тогда
							МаксимальнаяСкидкаПоСтроке = МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены;
						КонецЕсли;
						
					КонецЕсли;
					
					МаксимальноеЗначениеСкидки = МаксимальноеЗначениеСкидки + МаксимальнаяСкидкаПоСтроке;
					
				КонецЦикла;
				
				Если ЗначениеСкидки > МаксимальноеЗначениеСкидки Тогда
					
					ЗначениеСкидки = МаксимальноеЗначениеСкидки;
					СкидкаПревышена = Истина;

				КонецЕсли;
				
			ИначеЕсли ПримененаСкидкаНаНабор И ДопустимоПрименениеСкидок И ОтображаетсяСкидкаПроцентомНаНабор Тогда
				
				ПровестиРасчетСкидок = Ложь;
				СкидкаНаНабор = 0;
				
				Для Каждого СтрокаЧека Из Набор Цикл
					
					СтрокаЧека.ОтображаетсяСкидкаПроцентом = Ложь;
					СкидкаНаНабор = СкидкаНаНабор + СтрокаЧека.СуммаСкидкиНаценки;
					СтрокаЧека.ОтображаетсяСкидкаСуммой = Истина;
					
				КонецЦикла;
				
				ТекущийТоварСкидка = СкидкаНаНабор;
				
			Иначе
				
				ПересчитатьСкидкуСуммой = Ложь;
				ТекущийТоварСкидка = 0;
				
			КонецЕсли;
			
			ИдентификаторТекущейСтрокиДоРасчетаСкидок = ТекущийТоварИдентификатор;
			
			Если ПровестиРасчетСкидок Тогда
				
				ЭтоСкидкаПроцентом = Ложь;
				ТребуетсяРаспределение = Истина;
				РаспределяемаяСумма = ЗначениеСкидки;
				РаспределенныеИндексы = Новый Массив;
				
				Пока ТребуетсяРаспределение Цикл
					
					ТребуетсяРаспределение = Ложь;
					
					РаспределенныеСкидки =
						ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(РаспределяемаяСумма,
						МассивКоэффициентов, ТочностьОкругленияСкидки);
					
					ТекущийИндекс = 0;
					
					Для Каждого СтрокаКорзины Из Набор Цикл
						
						ТекущийТоварИдентификатор = СтрокаКорзины.ПолучитьИдентификатор();
						
						Если РаспределяемаяСумма > 0 И РаспределенныеСкидки <> Неопределено Тогда
							
							Если РаспределенныеИндексы.Найти(ТекущийИндекс) = Неопределено Тогда
								
								СуммаСкидкиПоСтроке = РаспределенныеСкидки[ТекущийИндекс];
								
								Если ЗначениеЗаполнено(СтрокаКорзины.МинимальнаяЦена) Тогда
									
									МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены =
										Окр((СтрокаКорзины.Цена - СтрокаКорзины.МинимальнаяЦена)
										* СтрокаКорзины.Количество, ТочностьОкругленияСкидки);
									
									Если СуммаСкидкиПоСтроке > МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены Тогда
										
										СуммаСкидкиПоСтроке = МаксимальнаяСкидкаПоСтрокеСУчетомМинимальнойЦены;
										
										ТребуетсяРаспределение = Истина;
										РаспределяемаяСумма = РаспределяемаяСумма - СуммаСкидкиПоСтроке;
										РаспределенныеИндексы.Добавить(ТекущийИндекс);
										
										МассивКоэффициентов[ТекущийИндекс] = 0;
										
									КонецЕсли;
									
								КонецЕсли;
								
								СтрокаКорзины.ОтображаетсяСкидкаСуммой		= СуммаСкидкиПоСтроке > 0;
								СтрокаКорзины.ОтображаетсяСкидкаПроцентом	= Ложь;
								
								УстановитьЗначенияСкидкиВСтрокеКорзины(СтрокаКорзины, СуммаСкидкиПоСтроке, ЭтоСкидкаПроцентом);
								РассчитатьСуммуВСтрокеТабличнойЧасти(ТекущийТоварИдентификатор);
								ОбновитьИнформациюНаДисплееПокупателя(ТипыОперацийДисплеяПокупателя.ИзменениеЦены);
								
							КонецЕсли;
							
						Иначе
							
							СтрокаКорзины.ОтображаетсяСкидкаСуммой		= Ложь;
							СтрокаКорзины.ОтображаетсяСкидкаПроцентом	= Ложь;
							
							УстановитьЗначенияСкидкиВСтрокеКорзины(СтрокаКорзины, 0, ЭтоСкидкаПроцентом);
							РассчитатьСуммуВСтрокеТабличнойЧасти(ТекущийТоварИдентификатор);
							ОбновитьИнформациюНаДисплееПокупателя(ТипыОперацийДисплеяПокупателя.ИзменениеЦены);
							
						КонецЕсли;
						
						ТекущийИндекс = ТекущийИндекс + 1;
						
					КонецЦикла;
					
				КонецЦикла;
				
				ПримененаСкидкаНаНабор = ЗначениеСкидки > 0;
				
			КонецЕсли;
			
			Если ПересчитатьСкидкуСуммой Тогда
				
				СуммаТоваровПодлежащихДисконтированию = 0;
				Для Каждого СтрокаКорзины Из Набор Цикл
					
					Если (Не (СтрокаКорзины.ЗапретРучныхСкидок Или СтрокаКорзины.Подарок)) Тогда
						СуммаТоваровПодлежащихДисконтированию = СуммаТоваровПодлежащихДисконтированию
							+ СтрокаКорзины.СуммаБезСкидки;
					КонецЕсли;
					
				КонецЦикла;
				
				Если СуммаТоваровПодлежащихДисконтированию > 0 Тогда
					
					Элементы.СкидкаТекущийТоварПроцент.ЦветФона	= ЦветФонаНеактивнойКнопки;
					НовоеЗначениеСкидкиНаНабор = 0;
					
					Для Каждого СтрокаКорзины Из Набор Цикл
						
						Если СтрокаКорзины.СуммаСкидкиНаценки > 0 Тогда
							НовоеЗначениеСкидкиНаНабор = НовоеЗначениеСкидкиНаНабор + СтрокаКорзины.СуммаСкидкиНаценки;
						КонецЕсли;
						
					КонецЦикла;

					Если ЗначениеСкидки <> НовоеЗначениеСкидкиНаНабор Тогда
						ТекущийТоварСкидка = НовоеЗначениеСкидкиНаНабор;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПровестиРасчетСкидок И СкидкаПревышена Тогда
				
				ПредупреждениеОПревышенииСкидки = НСтр("ru = 'Максимальная величина ручной скидки: %1 %2'");
				ТекстПредупреждения = СтрШаблон(ПредупреждениеОПревышенииСкидки, ЗначениеСкидки, ПредставлениеВалюты);
				ПоказатьПредупреждение(, ТекстПредупреждения);
				
			КонецЕсли;
			
			Если ПримененаСкидкаНаНабор Тогда
				ЦветФонаАктивнойКнопки = ЦветаФормы.АктивнаяКнопка;
			КонецЕсли;
			
			Элементы.СкидкаТекущийТоварСумма.ЦветФона	= ЦветФонаНеактивнойКнопки;
			ДоступностьСкидкиПроцентом = Не ПримененаСкидкаНаНабор;
			ТекущийТоварИдентификатор = ИдентификаторТекущейСтрокиДоРасчетаСкидок;
	
			УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, ДоступностьСкидкиПроцентом);
			Элементы.СкидкаТекущийТоварСумма.ЦветФона = ЦветФонаАктивнойКнопки;
			Элементы.СкидкаТекущийТоварПроцент.ЦветФона = ЦветФонаНеактивнойКнопки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанныеКарты(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		
		СохранитьДанныеКартыСервер();
		ЗаполнитьДанныеДляОтправкиЧека(НайденнаяКартаПочта, НайденнаяКартаТелефон);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьКарту(Команда)
	
	Если НЕ Элементы.НайденнаяКартаНомер.ТолькоПросмотр Тогда
		
		НомерКартыДоИзменения = НайденнаяКартаНомер;
		ИзменитьДоступностьПолейНайденнойКарты();
		Возврат;
		
	КонецЕсли;
	
	НеобходимоеПраво = "ПравоРедактироватьКартуРМК";
	
	Если ЕстьПравоНаДействие(НеобходимоеПраво) Тогда
		
		НомерКартыДоИзменения = НайденнаяКартаНомер;
		ИзменитьДоступностьПолейНайденнойКарты();
		
	Иначе
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВводКарты(Команда)
	
	ОтменитьВводКартыКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуБонусами()
	
	ОтменитьПримененныеБонусы(Ложь);
	РассчитатьСкидкиКлиент();
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаБонусами, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьМарку(Команда)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.НеобходимостьВводаКодаМаркировки И ТекущаяСтрока.ПоштучноеВыбытие И
			ТекущаяСтрока.КодыМаркировкиПоДаннымИБ.Количество() > 1 Тогда
		
		ТекущаяСтрока.КодМаркировки = "";
		ТекущаяСтрока.КонтрольнаяМарка = "";
		ОбщегоНазначенияРМККлиентСервер.УстановитьНомерКартинкиСтрокиТовара(ТекущаяСтрока);
		СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаОтсканироватьМарку);
		СформироватьТекстВводМарки();
		ОграничитьДоступностьЭлементовПриОжиданииМарки(Истина);
		ИнтерфейсРМКСлужебныйКлиент.НастроитьДоступностьРежимаОплаты(ЭтотОбъект);
		УстановитьФокусНаТовареТребующемВводаМарки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	ОткрытьСтраницуСерии();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСерию(Команда)
	ВыбратьСериюДляТекущейСтроки();
КонецПроцедуры

&НаКлиенте
Процедура ОтменаВыбораСерии(Команда)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
	УстановитьДоступностьЭлементовРедактированияЧека(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПанельИзбранныхТоваров(Команда)
	
	ОткрытьПанельИзбранныхТоваровКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьБонусами(Команда)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если ПараметрыВводаКодаSMS = Неопределено Тогда
		ОплатитьБонусамиКлиент();
	ИначеЕсли СуммаПодтвержденияСписанияБонусов > 0 Тогда
		РассчитатьСуммуОплатыБонусамиПредварительная();
		Если СуммаБонусовПредварительная > СуммаПодтвержденияСписанияБонусов И СуммаБонусов = 0 Тогда
			ПереключитьНаСтраницуВводаКодаSMS(Истина);
		Иначе
			ОплатитьБонусамиКлиент();
		КонецЕсли;
	Иначе
		ПереключитьНаСтраницуВводаКодаSMS(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКарту(Команда)
	
	ПереключитьНаСтраницуСозданиеКарты();
	ИнтерфейсРМКСлужебныйКлиент.СкорректироватьДатуРожденияПриНеобходимости(ЭтотОбъект, "НоваяКартаДатаРождения");
	
	ЕстьОшибки = Ложь;
	ОбщегоНазначенияРМККлиент.ПроверитьОшибкиЗаполненияКартыЛояльности(ЭтотОбъект, ЕстьОшибки);
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтправлятьSMSКодПриЗаведенииКарты Тогда
		ПереключитьНаСтраницуВводаКодаSMS( ,Истина);
	Иначе
		СоздатьКартуКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискКарты(Команда)
	ОбработатьШтрихкодКлиент(СтрокаПоискаКарты);
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьТоварныйЧек(Команда)
	ПечатьТоварногоЧекаКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИзмененияЧека(Команда)
	
	Результат = Новый Структура;
	Результат.Вставить("ЧекККМ", ЧекККМПродажа);
	ДополнительныеПараметры = Неопределено;
	ВыборЧекаЗавершение(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтчетБезГашения(Команда)
	
	ОтчетБезГашенияКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОпровергнутьВозраст(Команда)
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьГруппыОперации(Элементы);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	Если Не РезультатКонтроляПродаж.ОповещениеПриОтказе = Неопределено Тогда
		ВыполнитьОбработкуОповещения(РезультатКонтроляПродаж.ОповещениеПриОтказе);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьВозраст(Команда)
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьГруппыОперации(Элементы);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	
	ТекущаяСтрокаОграничения = РезультатКонтроляПродаж.ОграниченияПродаж[0];
	Если ТекущаяСтрокаОграничения.ВозрастКонтроля > 0 Тогда
		Если ПодтвержденныйВозрастПокупателя < ТекущаяСтрокаОграничения.ВозрастКонтроля Тогда
			ПодтвержденныйВозрастПокупателя = ТекущаяСтрокаОграничения.ВозрастКонтроля;
		КонецЕсли;
	ИначеЕсли ПодтвержденныеВидыКонтроляВЧеке.НайтиПоЗначению(ТекущаяСтрокаОграничения.ВидКонтроля) = Неопределено Тогда
		ПодтвержденныеВидыКонтроляВЧеке.Добавить(ТекущаяСтрокаОграничения.ВидКонтроля);
	КонецЕсли;
	РезультатКонтроляПродаж.ОграниченияПродаж.Удалить(0);
	РезультатКонтроляПродаж.НужнаПроверкаДоступностиОплаты = Истина;
	ОбработатьРезультатКонтроляПродаж();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродажаПоЗаказу(Команда)
	
	ПродажаПоЗаказуКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьРаботуСЧеком(Команда)
	
	ЭтапыКонтроля = ИнтерфейсРМКСлужебныйКлиент.ЭтапыКонтроляПродаж();
	ЭтоОперацияВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьГруппыОперации(Элементы);
	Если ЭтоОперацияВозврат И Не РезультатКонтроляПродаж.ЭтапКонтроля = ЭтапыКонтроля.ДобавлениеТовара Тогда
		
		ТекущаяСтрокаОграничения = РезультатКонтроляПродаж.ОграниченияПродаж[0];
		РезультатКонтроляПродаж.ОграниченияПродаж.Удалить(0);
		ОбработатьРезультатКонтроляПродаж();
		ИгнорироватьЗапретПодбора = Истина;
		
	ИначеЕсли Не РезультатКонтроляПродаж.ОповещениеПриОтказе = Неопределено Тогда
		ВыполнитьОбработкуОповещения(РезультатКонтроляПродаж.ОповещениеПриОтказе);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БезналичныеПлатежи(Команда)
	
	БезналичныеПлатежиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриемАванса(Команда)
	
	ПриемАвансаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументРасчета(Команда)
	
	ДокументРасчетаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПродавца(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборПродавцаЗавершение", ЭтотОбъект);
	АдресХранилищаСотрудники = ВернутьАдресХранилищаТаблицаСотрудников();

	ПараметрыОткрытияФормы = Новый Структура("ПодборПродавцов, АдресХранилищаСотрудники", ВыборПродавцаИзСписка, АдресХранилищаСотрудники);
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораПродавца", ПараметрыОткрытияФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПродавца(Команда)
	
	ОбработатьВыборПродавца(Неопределено);
	
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаДобавлениеПродавца, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаПродавецВыбран, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СтраницаДобавлениеПродавца, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьДобавлениеТовараПослеПроверкиМарки(Команда)
	
	УстановитьДоступностьЭлементовРабочейОбластиФормы(Истина);
	
	Если ЗначениеЗаполнено(ВременныйКонтекстПроверкиМарки) Тогда
		Если ВременныйКонтекстПроверкиМарки.ПроверкаМаркиВБиблиотекеГосИС Тогда
			ОбработатьУспешноеДобавлениеМарки(ВременныйКонтекстПроверкиМарки);
		Иначе
			НачатьПодтверждениеМарки(ВременныйКонтекстПроверкиМарки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяОтДобавленияТовараСНепровереннойМаркой(Команда)
	ОтказатьсяОтДобавленияТовара();
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоШтрихкоду(Команда)
	
	НайтиПоШтрихкодуКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаНайтиПоШтрихкоду(Команда)
	
	ОтменаНайтиПоШтрихкодуКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьПоискПоШтрихкоду(Команда)
	
	ПоискПоШтрихкодуНаКлиенте(ШтрихкодДляПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаСертификатом(Команда) 
	
	ГруппаСлоевВспомогательнаяПанель = Элементы.ГруппаСлоевЛеваяВерхняяВспомогательнаяПанель;
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если РежимРаботыСЧеком = РежимыРаботыСЧеком.Оплата Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ВозвратКоррекция
		Или ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ГруппаСлоевВспомогательнаяПанель)
		= Элементы.ГруппаПоискСертификатов Тогда
		
		ПереключитьНаОплатуСертификатом();
		
	Иначе
		НеобходимПересчетАвтоматическихСкидок = ОпределитьНеобходимостьПересчетаАвтоматическихСкидок();
		Если НеобходимПересчетАвтоматическихСкидок И ВопросПоРасчетуСкидок Тогда
			ЗадатьВопросПоРасчетуСкидок("ПереключитьНаОплатуСертификатомЗавершение", , Истина);
		Иначе
			КодВозврата = ?(НеобходимПересчетАвтоматическихСкидок, КодВозвратаДиалога.Да, КодВозвратаДиалога.Нет);
			ПереключитьНаОплатуСертификатомЗавершение(КодВозврата);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиСертификат(Команда)
	
	Если Не ЗначениеЗаполнено(НомерСертификата) Тогда 
		
		ТекстОшибки = НСтр("ru = 'Введите номер сертификата'");
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	НайтиСертификатКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиСертификатКлиент()
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		
		ЗначенияПараметровМетода = ПараметрыМетодовБонуснойПодсистемы();
		ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаПолучитьДанныеПодарочногоСертификата(ПараметрыПодключенияКСерверуЛояльности, ЗначенияПараметровМетода);
		Результат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
		
		Если Результат.ЕстьОшибки Тогда
			ТекстЗаголовка = НСтр("ru = 'Ошибка поиска подарочного сертификата.'");
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, Результат.ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		ДанныеОтвета = Неопределено;
		СтрокаJSON = Результат.ДанныеОтвета;
		СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
		
		Если НЕ ДанныеОтвета = Неопределено Тогда 
			
			Если ДанныеОтвета.Свойство("Error") И НЕ ДанныеОтвета.Error Тогда
				
				СуммаСертификата = ДанныеОтвета.GiftCardBalance;
				
				ГУИД = ДанныеОтвета.GiftCard.GiftCardRef;
				ПодарочныйСертификат = ПодарочныйСертификатПоГУИД(ГУИД);
				
				УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияСуммаСертификата, Истина);
				УстановитьВидимостьЭлементаФормы(Элементы.ОплатитьСертификатом, Истина);
				УстановитьВидимостьЭлементаФормы(Элементы.НайтиСертификат, Ложь);
				УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияОплатаСертификатами, Ложь);
				УстановитьВидимостьЭлементаФормы(Элементы.НомерСертификата, Ложь);
				УстановитьДоступностьЭлементаФормы(Элементы.ОплатитьСертификатом, СуммаСертификата > 0);
				
				ТекущийЭлемент = ?(СуммаСертификата > 0, Элементы.ОплатитьСертификатом, Элементы.ОтменаПоискаСертификата);
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'У клиента %1 %2'"),
					Формат(СуммаСертификата, "ЧЦ=15; ЧДЦ=2; ЧН=0,00"),
					ПредставлениеВалюты);
				Элементы.ДекорацияСуммаСертификата.Заголовок = ТекстСообщения;
				
			ИначеЕсли ДанныеОтвета.Свойство("Error") И ДанныеОтвета.Error Тогда
				
				ТекстЗаголовка = НСтр("ru = 'Ошибка поиска подарочного сертификата.'");
				ТекстОшибки = СтрШаблон(НСтр("ru = '%1'"), ДанныеОтвета.ErrorMessage);
				ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ОбщегоНазначенияРМККлиент.ИспользоватьПоискСертификатаЛокально() Тогда
		
		НайтиСертификатЛокально();
		
		Если СуммаСертификата = 0 ИЛИ Не ЗначениеЗаполнено(ПодарочныйСертификат) Тогда
			ТекстЗаголовка = НСтр("ru = 'Ошибка поиска подарочного сертификата.'");
			Если СуммаСертификата = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Сертификат не активирован или полностью погашен.'");
			Иначе
				ТекстОшибки = НСтр("ru = 'Сертификат не найден.'");
			КонецЕсли;
			ПараметрыОшибки = Новый Структура("ЭтоПредупреждение", Истина);
			
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки, ПараметрыОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиСертификатЛокально()
	
	ОбщегоНазначенияРМКПереопределяемый.НайтиСертификатЛокально(ЭтотОбъект);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияСуммаСертификата, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ОплатитьСертификатом, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.НайтиСертификат, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияОплатаСертификатами, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.НомерСертификата, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатитьСертификатом, СуммаСертификата > 0);
		
	ТекстСообщения = СтрШаблон(НСтр("ru = 'У клиента %1 %2'"),
		Формат(СуммаСертификата, "ЧЦ=15; ЧДЦ=2; ЧН=0,00"),
			ПредставлениеВалюты);
	Элементы.ДекорацияСуммаСертификата.Заголовок = ТекстСообщения;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаПоискаСертификата(Команда)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	НастроитьВидимостьОплатыПодарочнымиСертификатами();
	РазблокироватьСертификат = (СуммаСертификата > 0) И ЭтоСерийныйПодарочныйСертификат;
	Если РазблокироватьСертификат Тогда 
		РазблокироватьОбъектСервераЛояльности("giftcard");
	КонецЕсли;
	НомерСертификата = "";
	СуммаОстаткаСертификатов = 0;
	СуммаСертификата = 0;
	
	ТекущийЭлемент = Элементы.НомерСертификата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьСертификатом(Команда)
	
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПанельУправленияЧеком);
	
	БалансСертификата = СуммаСертификата;
	ОсталосьДоступноДляОплаты = Объект.Товары.Итог("Сумма") - Объект.Оплата.Итог("Сумма");
	СуммаСертификата = Мин(ОсталосьДоступноДляОплаты, СуммаСертификата);
	
	Если Не ЭтоСерийныйПодарочныйСертификат Тогда
		НомерСертификата = СтрЗаменить(Новый УникальныйИдентификатор(), "-", "_");
	КонецЕсли;
	Если НЕ Элементы.ГруппаСписокЧековПродажи.Видимость Тогда
		ПереключитьНаСледующийЧек("НаСледующий");
	КонецЕсли;
	
	ДобавитьСертификатВТаблицу(ЭтотОбъект, БалансСертификата);
	РаспределитьОплатуСертификатамиПоОрганизациям();
	ДобавитьРеквизиты(НомерСертификата);
	
	СуммаОстаткаСертификатов = ТаблицаПодарочныхСертификатов.Итог("СуммаСертификата");
	СуммаОплаченоСертификатами = СуммаОстаткаСертификатов;
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеОплатитьСертификатом = Истина;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	СуммаОплаченоБонусами = СуммаБонусов;
	
	НастроитьВидимостьОплатыПодарочнымиСертификатами(, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСменуИзРежимаВыбораКассы(Команда)
	
	ОткрытьСменуКлиент();
	
	ПриПереключенииКассыККМ();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСменуИзРежимаВыбораКассы(Команда)
	
	ПараметрыЗакрытияСменыПриАвтоматическойВыемке.РежимВыбораКассы = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытьСменуПродолжение", ЭтотОбъект);
	
	Отбор = Новый Структура("КассаККМ", КассаККМДляОперации);
	СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
	
	Если СтрокаКассы.КоличествоОтложенныхИНепробитыхЧеков <> 0 Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Проверка непробитых чеков.'");
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Имеются непробитые и отложенные чеки в количестве: %1.
											|Закрыть смену?'"), СтрокаКассы.КоличествоОтложенныхИНепробитыхЧеков);
		КнопкаПоУмолчанию = КодВозвратаДиалога.Нет;
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, "Закрыть");
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, "Отменить");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок, , КнопкаПоУмолчанию, ТекстЗаголовка);
		
	Иначе
		
		ТекстВопроса = НСтр("ru='Уверены, что хотите закрыть смену?'");
		ЗаголовокВопроса = НСтр("ru='Закрытие смены'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопроса);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходИзРежимаВыбораКассы(Команда)
	
	ТекущаяОперация = "";
	КассаККМДляОперации = Неопределено;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнфо, Ложь);
	Если РежимНачальнойСтраницы = 1 Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	Иначе
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПустая);
	КонецЕсли;
	
	ПереключатьсяВРежимПлитки = ОсновнойПодборПлиточный;
	ПереключитьВРежимПлитки();
	
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПанельУправленияЧеком);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьГруппыОперации(Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьЧекПродажи(Команда)
	
	ИмяКоманды = Команда.Имя;
	
	Элементы.ПереключитьЧекСНООСН.Пометка = Ложь;
	Элементы.ПереключитьЧекСНОУСНДоход.Пометка = Ложь;
	Элементы.ПереключитьЧекСНОУСНДоходРасход.Пометка = Ложь;
	Элементы.ПереключитьЧекСНОЕСН.Пометка = Ложь;
	Элементы.ПереключитьЧекСНОПатент.Пометка = Ложь;
	
	ЗакрытьСтраницуИнфоОшибка(Команда);
	
	ОплатаБезДеленияПоЧекам = Ложь;
	
	Если Лев(ИмяКоманды, 25) = "ПереключитьЧекОрганизация" Тогда
		
		ТекущийНомерКнопкиОрганизации = Сред(ИмяКоманды, 26);
		НомерПП = 0;
		Пока Истина Цикл
			НомерПП = НомерПП + 1;
			НайденЭлемент = Элементы.Найти("ПереключитьЧекОрганизация" + НомерПП);
			Если НайденЭлемент = Неопределено Тогда
				Прервать;
			КонецЕсли;
			НайденЭлемент.Пометка = ТекущийНомерКнопкиОрганизации = НомерПП;
		КонецЦикла;
		
	ИначеЕсли Лев(ИмяКоманды, 17) = "ПереключитьЧекСНО" Тогда
		Элементы[ИмяКоманды].Пометка = Истина;
	КонецЕсли;
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеПереключитьЧек = ИмяКоманды;
	
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСертификатаПриИзменении(Элемент)
	ТекущийЭлемент = Элементы.НайтиСертификат;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСертификат(Команда)
	
	ОткрытьФормуВыбораПодарочногоСертификата();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЭквайринговыйТерминал(Команда)
	
	ТекущийТерминал = ЭквайринговыйТерминалВыполненияОперации;
	СтруктураПоиска = Новый Структура("ЭквайринговыйТерминал", ТекущийТерминал);
	
	РезультатПоиска = ТаблицаТерминалы.НайтиСтроки(СтруктураПоиска);
	
	Если РезультатПоиска.Количество() > 0 Тогда
		
		ДанныеВыбранногоТерминала = РезультатПоиска[0];
		
		Если НЕ ЭтоСторноОплатыПоКарте(ЧекККМПродажа, СуммаОплаченоБН, КассоваяСмена, ДанныеВыбранногоТерминала.ЭквайринговыйТерминал, ДанныеВыбранногоТерминала.ЧастичнаяОтмена) Тогда
			ВыполнитьОплатуПоКарте(ДанныеВыбранногоТерминала);
		КонецЕсли;
		
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите эквайринговый терминал.'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяОтВыбораТерминала(Команда)
	
	ОчиститьРеквизитыQRКодаПлатежнойКарты();
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
	НастроитьДоступностьПробитьЧек();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьSMSСКодомПроверки(Команда)
	СформироватьСообщениеИОтправитьSMS();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗаведениеКарты(Команда)
	
	ПараметрыВводаКодаSMS = Неопределено;
	Элементы.ОплатитьБонусами.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаВыборМеню, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ЗакрытьФормуДанныеПокупателя, Истина);
	Если ВертикальнаяОриентация Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаДополнительнаяКоманднаяПанельПустая);
	КонецЕсли;
	ПереключитьНаСтраницуСозданиеКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСертификатНСПК(Команда)
	
	ПроверитьСертификатНСПКНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуСертификатомНСПК(Команда)
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеОтменитьОплатуСертификатомНСПК = Истина;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
	ЭлементВыбор = Элементы.ИдентификаторКорзиныНСПК;
	ЭлементВыбор.СписокВыбора.Очистить(); 
	ЭлементВыбор.ПодсказкаВвода = Нстр("ru='Идентификатор корзины'");
	
	ЭтоВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
	НастроитьЭлементыВРежимеПроверкаСертификатаНСПК(Ложь, ЭтоВозврат);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидки(Команда)
	
	ИспользоватьАвтоматическиеСкидки = ВключеноИспользованиеАвтоматическихСкидок;
	ОткрыватьФормуВыбораПодарков = Ложь;
	Если РежимРаботыСЧеком = РежимыРаботыСЧеком.ПереходКОплате Тогда
		ОткрыватьФормуВыбораПодарков = Истина;
	КонецЕсли;
	РассчитатьСкидкиКлиент(ОткрыватьФормуВыбораПодарков);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьПозициюБезМарки(Команда)
	ДобавитьТоварБезМарки();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСерию(Команда)
	
	Если СерииНеВыгружаются Тогда
		ВыборСерииИдентификатор = Неопределено;
		ТекущийЭлемент = Элементы.ВыборСерииИдентификатор;
	Иначе
		ВыборСерии = Неопределено;
		ТекущийЭлемент = Элементы.ВыборСерии;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПартию(Команда)
	
	ВыборПартии = Неопределено;
	ТекущийЭлемент = Элементы.ВыборПартии;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаРасчетаСкидок(Команда)
	ОтменитьСкидки(Истина, ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации));
	
	// Подарки удаляем только если в явном виде нажали отмену скидок. 
	// При автоматическом пересчете скидок, подарки остаются, и затем удаляются только если в результате расчета нет этих подарков.
	МассивПодарков = Объект.Товары.НайтиСтроки(Новый Структура("Подарок", Истина));
	Для Каждого СтрокаПодарок Из МассивПодарков Цикл
		Объект.Товары.Удалить(СтрокаПодарок);
	КонецЦикла;
	
	ТаблицаПодарков.Очистить();
	
	СформироватьЗаголовокКнопокРассчитатьСкидки();
КонецПроцедуры

&НаКлиенте
Процедура ВозвратСкупки(Команда)
	ПереключитьРежимНаВозвратСкупки();
КонецПроцедуры

&НаКлиенте
Процедура Скупка(Команда)
	ПереключитьРежимНаСкупка();
КонецПроцедуры

&НаКлиенте
Процедура СписатьАлкогольнуюПродукцию(Команда)
	
	СписатьАлкогольнуюПродукциюКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаРассрочки(Команда)
	
	ОплатаРассрочкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторКорзиныНСПКЗавершить(Команда)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторКорзиныНСПК) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементВыбор = Элементы.ИдентификаторКорзиныНСПК;
	ЭлементВыбор.СписокВыбора.Очистить(); 
	ЭлементВыбор.ПодсказкаВвода = Нстр("ru='Идентификатор корзины'");
	
	ДанныеШтрихкода = МенеджерОборудованияРМККлиент.РасшифроватьQRКодЧекаККТ(ИдентификаторКорзиныНСПК);
	Если ДанныеШтрихкода.Расшифрован Тогда
		СтруктураФискальногоПризнака = Новый Структура("НомерФискальногоНакопителя, ФискальныйПризнакЧека, ФискальныйЧекНомер",
												ДанныеШтрихкода.НомерФискальногоНакопителя,
												ДанныеШтрихкода.ФискальныйПризнак,
												ДанныеШтрихкода.НомерФискальногоДокумента);
		
		ПараметрыОперации = ПолучитьПараметрыОперацииНСПКНаСервере(Объект.КассаККМ, "");
		ЗаполнитьЗначенияСвойств(ПараметрыОперации, СтруктураФискальногоПризнака);
		
		ОповещениеМетода = Новый ОписаниеОповещения("ПолучениеИдентификатораКорзиныЗавершение", ЭтотОбъект, ПараметрыОперации);
		МенеджерОборудованияРМККлиент.НачатьПолучениеИдентификатораКорзины(ОповещениеМетода, ПараметрыОперации);
	Иначе
		ПолучениеИдентификатораКорзиныЗавершение(Новый Структура("Результат, ИдентификаторКорзины", Истина, ИдентификаторКорзиныНСПК),);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторКорзиныНСПКОтменить(Команда)
	
	ОтменитьОплатуСертификатомНСПК(Команда);
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОграниченияПродаж(Команда)
	ОбновитьОграниченияПродажИнтерактивно();
КонецПроцедуры

&НаКлиенте
Процедура ГорячаяКлавишаESC(Команда)
	
	АктивныйСлойСлужебнойИнформацииЧека
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПодтверждениеВозраста Тогда
		ОпровергнутьВозраст(Команды.ОпровергнутьВозраст);
	ИначеЕсли ОткрытаСтраницаВнесения() Или ОткрытаСтраницаВыемки() Тогда
		ВосстановитьЭлементыПослеВнесенияИлиВыемки();
	ИначеЕсли ОткрытаСтраницаПоискаТовара() Тогда
		ЗакрытьПоискТоваров(Неопределено);
	ИначеЕсли РежимПоказаСкидок Тогда
		ПереключитьРежимНаПоказСкидок(Ложь);
	ИначеЕсли АктивныйСлойСлужебнойИнформацииЧека = Элементы.ГруппаПлатежнаяСистема И Не ТипОплаты = "" Тогда
		ЗакрытьГруппуПлатежныеСистемы();
	ИначеЕсли Не РежимЦифровойПанели = РежимыЦифровойПанели.Пустой Тогда
		ВыполнитьКомандуЗакрытияЦифровойПанели();
	ИначеЕсли ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатойИлиКоррекцией(ЭтотОбъект)
			И ОткрытаГруппаПроверкиДобавленияСертификата() Тогда
		ОтменаПоискаСертификата(Команда);
	ИначеЕсли (РежимРаботыСЧеком = РежимыРаботыСЧеком.ВводТоваров Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ЧекПустой)
			И АктивныйСлойСлужебнойИнформацииЧека = Элементы.ГруппаРучноеСопоставлениеТовара Тогда
		ОтменаСопоставленияТовара(Команда);
	ИначеЕсли РежимПоказаОстатков И ГруппаРедактированияСтрокиТовараДоступна() Тогда
		ПоказатьОстатки(Команда);
	ИначеЕсли РежимПлитки И ЭтоТипПостроенияПлиткиСВесовымТоваром(ТипПостроенияПлитки, ТипыПостроенияПлитки)
			И Элементы.ЗакрытьПлиточныйИнтерфейс.Видимость Тогда
		ОткрытьПлиточныйИнтерфейс(Неопределено);
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьЗаявлениеНаВозврат(Команда)
	
	РаспечататьЗаявлениеНаВозвратКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуДанныеПокупателя(Команда)
	ЗакрытьФормуЦифровойПанели();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВсеОплаты(Команда)
	
	ОтменитьВведенныеОплаты();
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКнопкиОтменыВидовОплат,
		Объект.Оплата.Количество() > (0 + Число(ПриемАвансаПоЗаказу)));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКассуККМ(Команда)
	
	НомерКнопки = Прав(Команда.Имя,1);
	КассаККМДляОперации = ТаблицаКассККМОрганизаций.Получить(НомерКнопки-1).КассаККМ;
	
	ПриПереключенииКассыККМ();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСклад(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборСкладаЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВыборСклада");
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораСкладЯчейка",
		ПараметрыОткрытия,
		ЭтотОбъект, , , ,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЯчейку(Команда)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана текущая строка.'"));
		Возврат;
	КонецЕсли;
	Склад = ТекущаяСтрока.ТорговыйОбъект;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборЯчейкиЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВыборЯчейки");
	ПараметрыОткрытия.Вставить("Склад", Склад);
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораСкладЯчейка",
		ПараметрыОткрытия,
		ЭтотОбъект, , , ,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСклад(Команда)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Склад = Неопределено;
	Ячейка = Неопределено;
	Если ТекущиеДанные.ЭтоНабор Тогда
		НомерНабора = ТекущиеДанные.НомерНабора;
		ЗаполнитьСкладВНаборе(Склад, НомерНабора);
		ЗаполнитьЯчейкуВНаборе(Ячейка, НомерНабора);
	Иначе
		ТекущиеДанные.ТорговыйОбъект = Склад;
		ТекущиеДанные.Ячейка = Ячейка;
		ДанныеСтроки = Новый Структура("Номенклатура, Характеристика, ТорговыйОбъект, КоличествоОстаток, СистемаНалогообложения", 
			ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика, ТекущиеДанные.ТорговыйОбъект, ТекущиеДанные.КоличествоОстаток);
		ЗаполнитьДанныеСтрокиПоСкладу(ДанныеСтроки);
		ТекущиеДанные.КоличествоОстаток = ДанныеСтроки.КоличествоОстаток;
		Если ЗначениеЗаполнено(ДанныеСтроки.СистемаНалогообложения) Тогда
			ТекущиеДанные.СистемаНалогообложения = ДанныеСтроки.СистемаНалогообложения;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтображатьОстаток Тогда
		ТекущийТоварОстаток = СтрШаблон(НСтр("ru = 'Доступно: %1 %2'"),ТекущиеДанные.КоличествоОстаток, ТекущиеДанные.ПредставлениеЕдиницыИзмерения);
	КонецЕсли;
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаДобавлениеСклада, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаСкладВыбран, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СтраницаДобавлениеСклада, Истина);
	
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаДобавлениеЯчейки, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаЯчейкаВыбрана, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СтраницаДобавлениеЯчейки, Истина);
	
	ТекущийСклад = "";
	ТекущаяЯчейка = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЯчейку(Команда)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Ячейка = Неопределено;
	Если ТекущиеДанные.ЭтоНабор Тогда
		НомерНабора = ТекущиеДанные.НомерНабора;
		ЗаполнитьЯчейкуВНаборе(Ячейка, НомерНабора);
	Иначе
		ТекущиеДанные.Ячейка = Ячейка;
	КонецЕсли;
	
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаДобавлениеЯчейки, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаЯчейкаВыбрана, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СтраницаДобавлениеЯчейки, Истина);
	
	ТекущаяЯчейка = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьОперациюПакетнойФискализации(Команда)
	ПовторитьОперациюПакетнойФискализацииКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьДанныеВыдачиНаличных(Команда)
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	ПодготовитьДанныеВыдачиНаличныхКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДенежныйЯщикПриВыдачеНаличных(Команда)
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	ОткрытьДенежныйЯщикКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДенежныйЯщик(Команда)
	
	ДенежныйЯщикКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьПробитие(Команда)
	НачатьПечатьЧека();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОтменуОплаты(Команда)
	ВыполнитьОтменуОплатыКлиент();
КонецПроцедуры

&НаКлиенте
Процедура СменитьМагазин(Команда)
	
	СменитьМагазинИлиКассира(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСозданияКодаДоступа(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Кассир", КассирДляВхода);
	ПараметрыОткрытия.Вставить("НастроитьКассировДляВхода", НастроитьКассировДляВхода);
	
	ДополнительныйПараметрЗакрытияФормы = Новый Структура();
	ДополнительныйПараметрЗакрытияФормы.Вставить("КодДоступа", Неопределено);
	
	Оповещение = Новый ОписаниеОповещения("СозданиеКодаДоступаЗавершение", ЭтотОбъект,
		ДополнительныйПараметрЗакрытияФормы);
	
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаУстановкиКодаДоступаКассира",
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор, , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРаботу(Команда)
	
	ЗавершитьРаботуКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОбменаДанными(Команда)
	
	ЗапуститьОбменДаннымиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтложитьПринудительно(Команда)
	
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПанельДействий);
	
	ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОтложитьОперацию(
		ЭтотОбъект, 
		Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьБалансСертификата(Команда)
	
	ЗапроситьБалансСертификатаСервер();
	ЦенаИзКарточкиПриИзмененииПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветДаАвтономнаяКасса(Команда)
	
	ДополнительныеПараметры = Неопределено;
	МенеджерОборудованияРМККлиент.ПараметрыВыполненияОперацииНаАвтономнойККТ(ДополнительныеПараметры);
	
	Если ОповещениеАвтономнойКассы.Команда = "CheckFiscalization" Тогда
		ДополнительныеПараметры.ПараметрыОперации = ОповещениеАвтономнойКассы.ОбщиеПараметры;
		ДополнительныеПараметры.Команда = ОповещениеАвтономнойКассы.Команда;
		ДополнительныеПараметры.ОповещениеПриЗавершении = Неопределено;
		ДополнительныеПараметры.ИспользуетсяОчередьПробития = Истина;
		ДополнительныеПараметры.ИдентификаторКлиента = УникальныйИдентификатор;
		ПодключитьОбработчикОжидания("ПроверитьСтатусЧекаНаКлиенте", 1, Истина); 
	ИначеЕсли ОповещениеАвтономнойКассы.Команда = "Encash" Тогда
		ДополнительныеПараметры.ПараметрыОперации = ОповещениеАвтономнойКассы.ОбщиеПараметры;
		ДополнительныеПараметры.Команда = ОповещениеАвтономнойКассы.Команда;
		Если ОповещениеАвтономнойКассы.ОбщиеПараметры.ТипИнкассации = 1 Тогда
			ДополнительныеПараметры.ОповещениеПриЗавершении = Новый ОписаниеОповещения("ВыполнитьОперациюВнесениеЗавершение", ЭтотОбъект);
		Иначе
			ДополнительныеПараметры.ОповещениеПриЗавершении = Новый ОписаниеОповещения("ВыполнитьОперациюВыемкаЗавершение", ЭтотОбъект);
		КонецЕсли;
		ДополнительныеПараметры.ИдентификаторКлиента = УникальныйИдентификатор;
		ДополнительныеПараметры.ИспользуетсяОчередьПробития = Ложь;
	КонецЕсли;
		
	МенеджерОборудованияРМККлиент.ВыполнитьКомандуЗавершениеАвтономнойККТ(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНетАвтономнаяКасса(Команда)
	
	ДополнительныеПараметры = Неопределено;
	МенеджерОборудованияРМККлиент.ПараметрыВыполненияОперацииНаАвтономнойККТ(ДополнительныеПараметры);
	
	Если ОповещениеАвтономнойКассы.Команда = "CheckFiscalization" Тогда
		ДополнительныеПараметры.ПараметрыОперации = ОповещениеАвтономнойКассы.ОбщиеПараметры;
		ДополнительныеПараметры.Команда = ОповещениеАвтономнойКассы.Команда;
		ДополнительныеПараметры.ОповещениеПриЗавершении = Неопределено;
		ДополнительныеПараметры.ИспользуетсяОчередьПробития = Истина;
		ДополнительныеПараметры.ИдентификаторКлиента = УникальныйИдентификатор;
		ПодключитьОбработчикОжидания("ПроверитьСтатусЧекаНаКлиенте", 1, Истина); 
	ИначеЕсли ОповещениеАвтономнойКассы.Команда = "Encash" Тогда
		ДополнительныеПараметры.ПараметрыОперации = ОповещениеАвтономнойКассы.ОбщиеПараметры;
		ДополнительныеПараметры.Команда = ОповещениеАвтономнойКассы.Команда;
		ДополнительныеПараметры.ОповещениеПриЗавершении = Новый ОписаниеОповещения("ВыполнитьОперациюВнесениеЗавершение", ЭтотОбъект);
		ДополнительныеПараметры.ИспользуетсяОчередьПробития = Ложь;
		ДополнительныеПараметры.ИдентификаторКлиента = УникальныйИдентификатор;
	КонецЕсли;
		
	МенеджерОборудованияРМККлиент.ВыполнитьКомандуЗавершениеАвтономнойККТ(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПослеПробитияЧека(Команда)
	
	ПродолжитьПослеПробитияЧекаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьТекущийТоварныйЧек(Команда)
	
	РаспечататьТекущийТоварныйЧекКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьТекущийЧекПовторно(Команда)
	
	ПробитьТекущийЧекКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВозвратТекущегоЧека(Команда)
	
	ОбработатьВозвратТекущегоЧекаНаКлиенте(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПлиточныйИнтерфейсКаталога(Команда)
	
	Если Не РежимПлитки Тогда
		Если Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиУправления) = Элементы.ПанельУправленияЧеком
			Или Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека) = Элементы.ОбластьОперативногоУправленияЧеком Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьПлиточныйИнтерфейс(ТипыПостроенияПлитки.ПоПалитре);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПлиточныйИнтерфейс(Команда)
	ОткрытьПлиточныйИнтерфейс(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура УправляемыеСкидки(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		ДополнительныеПараметры = Новый Структура("ОбластьДействия", "На документ");

		Если СкидкиРассчитаны Тогда
			ЗадатьВопросПоРасчетуСкидок("УправляемыеСкидкиЗавершение", ДополнительныеПараметры);
		Иначе
			УправляемыеСкидкиЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетЗаСмену(Команда)
	
	ВывестиОтчетЗаСменуКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКнопкиЦифровойПанели(Команда)
	
	Если РежимВводаСимволовИСумм(РежимЦифровойПанели, РежимыЦифровойПанели) Или ЭтоЧисловоеПолеДанныхПокупателя() Тогда
		ОбработатьКомандуЦифровойПанелиПриВводеСуммыОплаты(Команда);
	Иначе
		ОбработатьКомандуЦифровойПанелиДанныеПокупателя(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКонтрагента(Команда)
	
	ВыбратьКонтрагентаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыбратьКупюру(Команда)
	НоминалКупюры = сред(Команда.Имя, 12);
	ОбработатьНажатиеКупюры(НоминалКупюры);
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеПромокода(Команда) 
	
	ИспользованиеПромокодаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаПоискаПромокода(Команда)
	
	НастроитьВидимостьВводаПромокода();
	ОчиститьДанныеПромокодов();
	ТекущийЭлемент = Элементы.ВведенныйПромокод;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПромокод(Команда)
	НайтиПромокодВДоступномСервисе();
КонецПроцедуры

&НаКлиенте
Процедура НайтиПромокодВДоступномСервисе()
	Если Не ЗначениеЗаполнено(ВведенныйПромокод) Тогда 
		
		ТекстОшибки = НСтр("ru = 'Введите промокод'");
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		НайтиПромокодКлиент();
	ИначеЕсли ОбщегоНазначенияРМККлиент.ИспользоватьПоискПромокодаЛокально() Тогда
		НайтиПромокодЛокально();
	Иначе
		ТекстОшибки = НСтр("ru = 'Работа с промокодами не поддерживается в текущей версии'");
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
	КонецЕсли;
	Если ПромокодДоступен Тогда
		ПрименитьПромокод(Неопределено);
	Иначе
		СкидкаВведенногоПромокода = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПромокодКлиент()
	
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		
		ЗначенияПараметровМетода = ПараметрыМетодовБонуснойПодсистемы();
		ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаПолучитьДанныеПромокода(ПараметрыПодключенияКСерверуЛояльности, ЗначенияПараметровМетода);
		Результат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
		
		Если Результат.ЕстьОшибки Тогда
			ТекстЗаголовка = НСтр("ru = 'Ошибка проверки промокода.'");
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, Результат.ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		ДанныеОтвета = Неопределено;
		СтрокаJSON = Результат.ДанныеОтвета;
		СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
		
		Если НЕ ДанныеОтвета = Неопределено Тогда
			
			Если ДанныеОтвета.Свойство("Error") И НЕ ДанныеОтвета.Error Тогда
				
				ДанныеОтвета.Свойство("PromocodeIsAvalible", ПромокодДоступен);
				ОбоснованиеОтказа = ДанныеОтвета.PromocodeStatus;
				
				Если ПромокодДоступен Тогда
					ТекущийЭлемент = Элементы.ПрименитьПромокод;
					Если ДанныеОтвета.Свойство("PromocodeDiscount") Тогда
						Если ТипЗнч(СкидкаВведенногоПромокода) = Тип("Строка") Тогда
							СкидкаВведенногоПромокода = ДанныеОтвета.PromocodeDiscount.Ref;
						Иначе
							СкидкаВведенногоПромокода = ПолучитьСкидкуВведенногоПромокодаНаСервере(ДанныеОтвета);
						КонецЕсли;
						ОписаниеСкидкиПромокода = ДанныеОтвета.PromocodeDiscount.Name;
					КонецЕсли;
				Иначе
					ТекущийЭлемент = Элементы.ОтменаВводаПромокода;
				КонецЕсли;
				
				ТекстПодсказки = "";
				Если ПромокодДоступен И ЗначениеЗаполнено(СкидкаВведенногоПромокода) Тогда
					УжеПримененныеПромокоды = ТаблицаПримененныхПромокодов.НайтиСтроки(Новый Структура("СкидкаНаценка, ЭтоАктивацияПромокода", СкидкаВведенногоПромокода, Ложь));
					Если УжеПримененныеПромокоды.Количество() > 0 Тогда
						ПромокодДоступен = Ложь;
						ТекстПодсказки = НСтр("ru = 'Промокод на эту скидку уже добавлен.'");
					КонецЕсли;
				ИначеЕсли Не ПромокодДоступен Тогда
					ТекстПодсказки = ОбоснованиеОтказа;
				КонецЕсли;
				Элементы.ПодсказкаПромокодПричинаОтказа.Заголовок = ТекстПодсказки;
				
				УстановитьВидимостьЭлементаФормы(Элементы.ПрименитьПромокод, Истина);
				УстановитьВидимостьЭлементаФормы(Элементы.НайтиПромокод, Ложь);
				УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияВводПромокода, Ложь);				
				УстановитьВидимостьЭлементаФормы(Элементы.ОписаниеНайденнойСкидки, ПромокодДоступен);
				УстановитьВидимостьЭлементаФормы(Элементы.ПодсказкаПромокодПричинаОтказа, НЕ ПромокодДоступен);
				УстановитьТолькоПросмотрЭлементаФормы(Элементы.ВведенныйПромокод, Истина);
				УстановитьДоступностьЭлементаФормы(Элементы.ПрименитьПромокод, ПромокодДоступен);
				
				ТекущийЭлемент = ?(ПромокодДоступен, Элементы.ПрименитьПромокод, Элементы.ОтменаВводаПромокода);
				
				Если Не ПромокодДоступен Тогда
					РазблокироватьПромокоды(, ВведенныйПромокод);
				КонецЕсли;
				
			ИначеЕсли ДанныеОтвета.Свойство("Error") И ДанныеОтвета.Error Тогда
				
				ТекстЗаголовка = НСтр("ru = 'Ошибка поиска промокода.'");
				ТекстОшибки = СтрШаблон(НСтр("ru = '%1'"), ДанныеОтвета.ErrorMessage);
				ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиПромокодЛокально()
	
	ОбщегоНазначенияРМКПереопределяемый.НайтиПромокодЛокально(ЭтотОбъект);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ПрименитьПромокод, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.НайтиПромокод, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияВводПромокода, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ОписаниеНайденнойСкидки, Истина);
	УстановитьТолькоПросмотрЭлементаФормы(Элементы.ВведенныйПромокод, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ПрименитьПромокод, ПромокодДоступен);
	
КонецПроцедуры

&НаКлиенте
Процедура ВведенныйПромокодПриИзменении(Элемент)
	КорректныйПромокод = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(ВведенныйПромокод);
	КорректныйПромокод = СтрЗаменить(КорректныйПромокод," ", "");
	ВведенныйПромокод = КорректныйПромокод;
	// Пока не нажата кнопка НайтиПромокод, мы не знаем, есть ли такой промокод, 
	// Не будем привлекать внимания
	ПромокодДоступен = Истина;
	ТекущийЭлемент = Элементы.НайтиПромокод;
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьПромокод(Команда)
	
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПанельУправленияЧеком);
	
	ДобавитьПромокодВТаблицу();
	ДобавитьРеквизитыПромокода(ВведенныйПромокод);
	
	БыстроеСоединениеВКСО = (РежимКассыСамообслуживания И Не РаботаВРежимеМедленногоСоединения);
	
	Если НЕ (БыстроеСоединениеВКСО Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ПереходКОплате Или РежимПоказаСкидок) Тогда
		ОтменитьСкидки();
	КонецЕсли;
	
	НастроитьВидимостьВводаПромокода(, Истина);
	
	ВведенныйПромокод = "";
	ИспользоватьАвтоматическиеСкидки = ВключеноИспользованиеАвтоматическихСкидок;
	Если РежимРаботыСЧеком = РежимыРаботыСЧеком.ПереходКОплате
		ИЛИ РежимКассыСамообслуживания
		Или НЕ РаботаВРежимеМедленногоСоединения Тогда
		РассчитатьСкидкиКлиент();
	Иначе
		ТребуетсяПересчетСкидок = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПромокод(Команда)
	
	Если НЕ ЗначениеЗаполнено(ВведенныйПромокод) Тогда
		АктивироватьГруппуВводаПромокода();
		ТекущийЭлемент = Элементы.ВведенныйПромокод;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИдентификаторыКорзинПокупокНСПК(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьИдентификаторыКорзинПокупокНСПКВопрос", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Загрузить историю продаж по товару %1?'");
	ТекстВопроса = СтрШаблон(ТекстВопроса, Элементы.Товары.ТекущиеДанные.ПредставлениеНоменклатураХарактеристика);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры 

&НаКлиенте
Процедура СписокСертификатовНСПК(Команда)
	
	СписокСертификатовНСПККлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТоваровНСПК(Команда)
	
	ОтборТоваровНСПК = Не ОтборТоваровНСПК;
	Если ОтборТоваровНСПК Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СледующаяОперация", "ПолучениеСпискаТоваров");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОперациюНСПКЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		МенеджерОборудованияРМККлиент.НачатьПолучениеПараметровКарты(ОписаниеОповещения, УникальныйИдентификатор);
	Иначе
		СписокТоваров.Отбор.Элементы.Очистить();
		ВосстановитьОтображениеКаталогаПоНастройкам();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьЧек(Команда)
	ПовторитьЧекНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяКомандаРаботыСЧеком(Команда)
	
	ГруппаСлоевОсновныхКоманд = Элементы.ГруппаСлоевОсновнаяКоманднаяПанельУправленияЧеком;
	ТекущийСлой = ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ГруппаСлоевОсновныхКоманд);
	Если ТекущийСлой = Элементы.ГруппаКомандПробитияЧека И Элементы.ПробитьЧек.Доступность Тогда
		
		КомандаПробитьЧек = Команды.Найти("ПробитьЧек");
		ПробитьЧек(КомандаПробитьЧек);
		
	ИначеЕсли РежимПлитки Тогда
		
		Если Элементы.ПлиткаГруппаНиз.Видимость И Элементы.ПерейтиВОплату.Доступность Тогда
			КомандаПерейтиВОплату = Команды.Найти("ПерейтиВОплату");
			ПерейтиВОплату(КомандаПерейтиВОплату);
		КонецЕсли;
		
	ИначеЕсли ТекущийСлой = Элементы.ГруппаКомандПереходаКОплате И Элементы.ПерейтиКОплате.Доступность Тогда
		
		ПерейтиВРежимОплатыПоКнопкеОплатить();
		
	ИначеЕсли ТекущийСлой = Элементы.ГруппаКомандПовторногоДействия
		И Элементы.ВыполнитьПовторноеПробитие.Доступность Тогда
		
		НачатьПечатьЧека();
		
	ИначеЕсли ТекущийСлой = Элементы.ГруппаКомандПробитияЧекаНСПК И Элементы.ПробитьЧекНСПК.Доступность Тогда
		
		ПроверитьСертификатНСПКНаКлиенте();
		
	ИначеЕсли ТекущийСлой = Элементы.ГруппаКомандЦифроваяПанель И Элементы.ЗакрытьФормуДанныеПокупателя.Доступность Тогда
		
		Если ОткрытаСтраницаОтправкиЧека() И Элементы.ГруппаСтраницыКнопкиОтправитьЧек.Доступность Тогда
			ОтправитьЧекКлиент();
		ИначеЕсли РежимЦифровойПанели = РежимыЦифровойПанели.ДанныеПокупателя Тогда
			ВыполнитьОсновнуюКомандуДанныхПокупателя();
		Иначе
			ЗакрытьФормуЦифровойПанели();
		КонецЕсли;
		
	ИначеЕсли ТекущийСлой = Элементы.ГруппаКомандПродолженияПослеПробития
		И Элементы.ПродолжитьПослеПробитияЧека.Доступность Тогда
		
		ПродолжитьПослеПробитияЧекаКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОплатыКартой(Команда)
	
	ГруппаСлоевСлужебнаяИнформация = Элементы.ГруппаСлоевСлужебнаяИнформацияЧека;
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ГруппаСлоевСлужебнаяИнформация)
		= Элементы.ОбластьОперативногоУправленияЧеком Тогда
		Если ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатойИлиКоррекцией(ЭтотОбъект)
			И Элементы.ПанельВидовОплат.Видимость И Элементы.ГруппаВидОплатыКартой.Видимость
			И Элементы.ОплатаКартой.Доступность Тогда
			
			КомандаОплатаКартой = Команды.Найти("ОплатаКартой");
			ОплатаКартой(КомандаОплатаКартой);
			
		ИначеЕсли РежимРаботыСЧеком = РежимыРаботыСЧеком.ВводТоваров
			И Элементы.ГруппаQRCode.Видимость И Элементы.ГруппаQRCodeКарта.Видимость Тогда
			
			КомандаОплатаКартойВТихомРежиме = Команды.Найти("ОплатаКартойВТихомРежиме");
			ОплатаКартойВТихомРежиме(КомандаОплатаКартойВТихомРежиме);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОплатыНаличными(Команда)
	
	ГруппаСлоевСлужебнаяИнформация = Элементы.ГруппаСлоевСлужебнаяИнформацияЧека;
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ГруппаСлоевСлужебнаяИнформация)
		= Элементы.ОбластьОперативногоУправленияЧеком Тогда
		Если ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатойИлиКоррекцией(ЭтотОбъект)
			И Элементы.ПанельВидовОплат.Видимость И Элементы.ГруппаВидОплатыНаличнымиГоризонтально.Видимость
			И Элементы.ОплатаНаличными.Доступность Тогда
			
			КомандаОплатаНаличными = Команды.Найти("ОплатаНаличными");
			ОплатаНаличными(КомандаОплатаНаличными);
			
		ИначеЕсли РежимРаботыСЧеком = РежимыРаботыСЧеком.ВводТоваров
			И Элементы.ГруппаQRCode.Видимость И Элементы.ГруппаQRCodeНаличные.Видимость Тогда
			
			КомандаОплатаНаличнымиВТихомРежиме = Команды.Найти("ОплатаНаличнымиВТихомРежиме");
			ОплатаНаличнымиВТихомРежиме(КомандаОплатаНаличнымиВТихомРежиме);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокТоваров(Команда)
	
	ОбновитьСписокТоваровСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВОплату(Команда)
	
	НеобходимПересчетАвтоматическихСкидок = ОпределитьНеобходимостьПересчетаАвтоматическихСкидок();
	Если НеобходимПересчетАвтоматическихСкидок И ВопросПоРасчетуСкидок Тогда
		ЗадатьВопросПоРасчетуСкидок("ПерейтиВОплатуЗавершение", , Истина);
	Иначе
		ПерейтиВОплатуЗавершение(?(НеобходимПересчетАвтоматическихСкидок, КодВозвратаДиалога.Да, КодВозвратаДиалога.Нет));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлиткаДомой(Команда)
	ПлиткаДомойКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ПлиткаНазад(Команда)
	ПерейтиНаСтраницуВлево();
КонецПроцедуры

&НаКлиенте
Процедура ПлиткаВперед(Команда)
	ПерейтиНаСтраницуВправо();
	
	Если Не Элементы.ПерейтиДалее.Доступность Тогда
		ТекущийЭлемент = Элементы.ПерейтиНазад;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкидкаНаЧекПроцентомЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьАвтоматическиеСкидки И СкидкиРассчитаны Тогда
		ОтменитьСкидки(,,Ложь);
	КонецЕсли;
	
	Позиции = Объект.Товары;
	РассчитатьРучнуюСкидкуПроцентомНаПозиции(Позиции, ЗначениеСкидкиНаценки);
	
	Если ВыполнитьПересчетАвтоматическихСкидок Тогда
		ВыполнитьПересчетСкидок();
	Иначе
		ПерезаполнитьТаблицуСкидок();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкидкаНаЧекСуммойЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьАвтоматическиеСкидки И СкидкиРассчитаны Тогда
		ОтменитьСкидки(,,Ложь);
	КонецЕсли;
	
	Позиции = Объект.Товары;
	РассчитатьРучнуюСкидкуСуммойНаПозиции(Позиции, ЗначениеСкидкиНаценки);
	Если ВыполнитьПересчетАвтоматическихСкидок Тогда
		ВыполнитьПересчетСкидок();
	Иначе
		ПерезаполнитьТаблицуСкидок();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьРезервнуюКопию(Команда)
	
	Перем ПараметрыКопирования;
	
	РезультатПроверки = ПроверитьРаботуОблачногоАрхива();
	Если Не РезультатПроверки.СозданиеРезервнойКопииДоступно Тогда
		ПоказатьПредупреждение(
			,
			НСтр("ru = 'Использование сервиса ""Облачный архив"" недоступно в текущем режиме работы.'"));
		Возврат;
	ИначеЕсли Не РезультатПроверки.ПодключениеОблачногоАрхиваВыполнено Тогда
		ПоказатьПредупреждение(
			,
			НСтр("ru = 'Не выполнено подключение к сервису ""Облачный архив"".
				|Для подключения обратитесь к администратору.'"));
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив20") Тогда
		
		МодульОблачныйАрхив20Клиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОблачныйАрхив20Клиент");
		ПараметрыКопирования 		= МодульОблачныйАрхив20Клиент.ПараметрыСозданияРезервнойКопии();
	
		МодульОблачныйАрхив20Клиент.СоздатьРезервнуюКопию(ПараметрыКопирования);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСкидкуВведенногоПромокодаНаСервере(ДанныеПромокода)
	
	ОписаниеТипаСкидкаНаценка = Метаданные.ОпределяемыеТипы.СкидкаНаценкаРМК.Тип;
	Результат = ОбщегоНазначенияРМК.ПолучитьДесериализованноеСсылочноеЗначение(ДанныеПромокода, "PromocodeDiscount", ОписаниеТипаСкидкаНаценка);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВвестиКомментарийКЧеку(Команда)
	
	ВвестиКомментарийКЧекуКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьВводКомментарияКЧеку(Команда)
	
	ПредыдущийСлой = ПредыдущийСлойДоДанныхПокупателя;
	Если ПредыдущийСлой = Неопределено Тогда
	
		ПредыдущийСлой = Элементы.ОбластьОперативногоУправленияЧеком;
	
	КонецЕсли; 
	
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, ПредыдущийСлой);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево,
		(Не ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатой(ЭтотОбъект)));
	
	УстановитьИконкуКомментарияКЧеку(Элементы.ВвестиКомментарийКЧеку, КомментарийКЧеку);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаВводаКомментарияКЧеку(Команда)
	
	КомментарийКЧеку = ТекущийКомментарийКЧеку;
	УстановитьИконкуКомментарияКЧеку(Элементы.ВвестиКомментарийКЧеку, КомментарийКЧеку);

	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево,
		(Не ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатой(ЭтотОбъект)));
		
	ПредыдущийСлой = ПредыдущийСлойДоДанныхПокупателя;
	Если ПредыдущийСлой = Неопределено Тогда
		
		ПредыдущийСлой = Элементы.ОбластьОперативногоУправленияЧеком;
		
	КонецЕсли;
	
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, ПредыдущийСлой);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПакет(Команда)
	
	Если Не РежимПлитки И Не Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая Тогда
		Если ОжидатьВводМарки
			Или Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиУправления)
			= Элементы.ПанельУправленияЧеком
			Или Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ОбластьОперативногоУправленияЧеком Тогда
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
	ТребуетсяПовышениеПрав = Ложь;
	ОбновитьКоличествоВРедактируемойСтроке(ТребуетсяПовышениеПрав);
	Если Не ТребуетсяПовышениеПрав Тогда
		ДобавитьПакетКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСтраницуПлатежнаяСистема(Команда)

	ЗакрытьГруппуПлатежныеСистемы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщениеВПоддержку(Команда)
	
	МодульТехническойПоддержки = ОбщегоНазначенияКлиент.ОбщийМодуль("СообщенияВСлужбуТехническойПоддержкиКлиент");
	
	Если МодульТехническойПоддержки = Неопределено Тогда
	
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для отправки сообщения в службу поддержки необходимо установить Библиотеку интернет-поддержки пользователей.'"));
	
	Иначе
	
		МодульСообщенияВСлужбуТехническойПоддержкиКлиентСервер =
			ОбщегоНазначенияКлиент.ОбщийМодуль("СообщенияВСлужбуТехническойПоддержкиКлиентСервер");

		ДанныеСообщения = МодульСообщенияВСлужбуТехническойПоддержкиКлиентСервер.ДанныеСообщения();
		ДанныеСообщения.Получатель						= "v8";
		ДанныеСообщения.Тема							= Элементы.ТекстПредупреждениеЗаголовок.Заголовок;
		ДанныеСообщения.Сообщение						= Элементы.ТекстПредупреждениеОшибка.Заголовок;
		ДанныеСообщения.ИспользоватьСтандартныйШаблон	= Ложь;

		МодульТехническойПоддержки.ОтправитьСообщение(ДанныеСообщения);
	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетОбОшибке(Команда)
	ЗаголовокОшибки = Новый ФорматированнаяСтрока(Элементы.ТекстПредупреждениеЗаголовок.Заголовок, Новый Шрифт(,, Истина));
	ТекстОшибки = Элементы.ТекстПредупреждениеОшибка.Заголовок;
	
	Попытка
		ВызватьИсключение(ЗаголовокОшибки, КатегорияОшибки.ОшибкаКонфигурации, "PayDesk.error", ТекстОшибки);
	Исключение 
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОбработкаОшибок.ПоказатьИнформациюОбОшибке(ИнформацияОбОшибке, ЗаголовокОшибки, ТекстОшибки, Истина);
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказ(Команда)
	
	СоздатьЗаказИРаспечатать();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказИВнестиПредоплату(Команда)
	
	СозданныйЗаказ = Неопределено;
	СоздатьЗаказИРаспечатать(СозданныйЗаказ, Истина);
	Если СозданныйЗаказ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВыбора = Новый Структура;
	СтруктураВыбора.Вставить("ДокументЗаказ", СозданныйЗаказ);
	СтруктураВыбора.Вставить("ЭтоОплатаРассрочи", Ложь);
	СтруктураВыбора.Вставить("ЭтоВнесениеПредоплаты", Истина);
	
	ДополнительныеПараметры = Неопределено;
	ОповещениеОткрытьФормуВыбораЗаказаПокупателя(СтруктураВыбора, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказИОтгрузить(Команда)
	
	СозданныйЗаказ = Неопределено;
	СоздатьЗаказИРаспечатать(СозданныйЗаказ, Истина);
	Если СозданныйЗаказ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВыбора = Новый Структура;
	СтруктураВыбора.Вставить("ДокументЗаказ", СозданныйЗаказ);
	СтруктураВыбора.Вставить("ЭтоОплатаРассрочи", Ложь);
	СтруктураВыбора.Вставить("ЭтоВнесениеПредоплаты", Ложь);
	
	ДополнительныеПараметры = Неопределено;
	ОповещениеОткрытьФормуВыбораЗаказаПокупателя(СтруктураВыбора, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Заказ(Команда)
	ПереключитьРежимНаЗаказ();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияХочуБумажныйЧекФлагНажатие(Элемент)
	
	УстановитьПризнакХочуБумажныйЧек(Не ХочуБумажныйЧек);
	
КонецПроцедуры

&НаКлиенте
Процедура ГорячаяКлавишаEnter(Команда)
	
	ОбработатьГорячуюКлавишуEnter();
	
КонецПроцедуры

&НаКлиенте
Процедура ГорячаяКлавишаDel(Команда)
	
	ОбработатьГорячуюКлавишуDel();
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьСписокТоваров(Команда)
	АктивироватьСписокТоваровНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура КомандаМирТовары(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоискТовара Тогда
		СписокТоваровНСПК(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрытьПоискТоваров(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоискТовара Тогда
		ЗакрытьПоискТоваров(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПереключитьПанельДанныхПокупателя(Команда)
	
	Если РежимЦифровойПанели = РежимыЦифровойПанели.ДанныеПокупателя Тогда
		
		РежимПанелиДанныеПокупателя = ПолучитьНомерСледующейПанелиПокупателя();
		Если РежимПанелиДанныеПокупателя >= 0 Тогда
			ОбработатьИзменениеРежимаПанелиДанныхПокупателя();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОплатыБонусами(Команда)
	
	Если РежимЦифровойПанели = РежимыЦифровойПанели.ДанныеПокупателя Тогда
		ГруппаСлоевДополнительнаяОбласть = Элементы.ГруппаСлоевДанныеПокупателяДополнительнаяОбласть;
		Если РежимПанелиДанныеПокупателя = 0 И КнопкаОплатитьБонусамиДоступна()
				И ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ГруппаСлоевДополнительнаяОбласть)
					= Элементы.ДополнительнаяГруппаКартаНайдена Тогда
				
			ОплатитьБонусами(Команда);
				
		КонецЕсли;
	ИначеЕсли ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатойИлиКоррекцией(ЭтотОбъект)
			И КнопкаОплатыБонусамиДоступна() Тогда
			
		ОплатаБонусами(Команда);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьСистемуНалогообложения(Команда)
	
	Если ЭтоЧекКоррекции И Элементы.СистемаНалогообложенияЧекаКоррекции.Видимость
			И Не РежимРаботыСЧеком = РежимыРаботыСЧеком.ПродолжениеПослеПробития Тогда
			
		ТекущийЭлемент = Элементы.СистемаНалогообложенияЧекаКоррекции;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьБонусамиВПроцессеПереходаКОплате(Команда)
	ОплатитьБонусамиВПроцессеПереходаКОплатеКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяОтВводаКарты(Команда)
	
	ЗакрытьФормуДанныеПокупателяКлиент();
	ЗавершитьВводДанныхЛояльностиИПродолжитьПереходКОплате();
	ОтказОтОплатыБонусами = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяОтОплатыБонусами(Команда)
	
	ОтказатьсяОтОплатыБонусамиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВозвратБезЧека(Команда)

	Если Не (РаботаСЧекомЗавершена() И Элементы.ГруппаОперации.Доступность) Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимПлитки Тогда
		ПереключитьНаРежимПлиткиИзПалитры();
	КонецЕсли;
	
	ПользовательДоЗаменыПрав = Объект.ПользовательБД;
	КассирДоЗаменыПрав = Объект.Кассир;
	
	НеобходимоеПраво = "ПравоЧекНаВозвратРМК";
	Если ЕстьПравоНаДействие(НеобходимоеПраво) Тогда
		ПереключитьФормуВРежимВозвратБезЧека();
	Иначе
		НеобходимоеПраво = "ПравоНаВозвратБезЧекаРМК";
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВывестиТекстПредупрежденияРучныеСкидки(ЗначениеСкидки, ПредставлениеЗначения)
	
	Если ЗначениеСкидки < 0 Тогда	
		ПредупреждениеСкидкаНаценка = "наценки";
		Значение = -ЗначениеСкидки;
	Иначе
		ПредупреждениеСкидкаНаценка = "скидки";
		Значение = ЗначениеСкидки;
	КонецЕсли;
	ТекстПредупреждения = СтрШаблон(НСтр(
		"ru = 'Максимальная величина ручной %1: %2 %3'"), ПредупреждениеСкидкаНаценка, Значение, ПредставлениеЗначения);
	ПоказатьПредупреждение(, ТекстПредупреждения);
		

КонецПроцедуры

&НаКлиенте
Процедура ОтборВесовогоТовара(Команда)
	ПереключитьТипПостроенияПлитки();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКодМаркировки(Команда)
	ВыбратьКодМаркировкиДляТекущейСтроки();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКодМаркировки(Команда)
	
	ВыборКодаМаркировки = Неопределено;
	ТекущийЭлемент = Элементы.ВыборКодаМаркировки;
	УстановитьДоступностьЭлементаФормы(Элементы.ВыбратьКодМаркировки, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьКегКОборудованиюРозлива(Команда)
	ПодключитьКегКОборудованиюРозливаКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьКегОтОборудованияРозлива(Команда)
	ОтключитьКегОтОборудованияРозливаКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ОбучениеУстройствРаспознавания(Команда)
	ОткрытьФормуОбученияУстройствРаспознавания();
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРаботуРМК(Команда)
	ЗавершитьРаботуРМККлиент();
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьБезРасчета(Команда)
	ПродолжитьБезРасчетаПроверкаПрав();
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьОперациюСотрудником(Команда)
	ПодтвердитьОперациюСотрудникомКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОперациюСотрудником(Команда)
	ОтменитьОперациюСотрудникомКлиент();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПрограммаЛояльности

&НаКлиенте
Процедура РаспределитьОплатуСертификатамиПоОрганизациям()
	
	СистемыНалогообложенияТоваровВКорзине = РазличныеСНОВСпискеПокупок();
	
	МассивНераспределенныхСертификатов = Новый Массив;
	Для Каждого СтрокаСертификата Из ТаблицаПодарочныхСертификатов Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаСертификата.Организация) И НЕ ЗначениеЗаполнено(СтрокаСертификата.СистемаНалогообложения) Тогда
			МассивНераспределенныхСертификатов.Добавить(СтрокаСертификата);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого НераспределенныйСертификат Из МассивНераспределенныхСертификатов Цикл
		
		Индекс = 0;
		ОсталосьРаспределить = НераспределенныйСертификат.СуммаСертификата;
		РаспределенаТекущаяСтраница = Ложь;
		
		Для Каждого СистемаНалогообложения Из СистемыНалогообложенияТоваровВКорзине Цикл
			
			Если НЕ (СистемаНалогообложения.Организация = ВыбраннаяОрганизация И СистемаНалогообложения.СистемаНалогообложения = ВыбраннаяСистемаНалогообложения)
				И НЕ РаспределенаТекущаяСтраница Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаОплатПоЧеку = Объект.Оплата.Итог("Сумма");
			СуммаТоваровПоЧеку = 0;
			
			СтруктураОтбораСНО = Новый Структура("Организация, СистемаНалогообложения", СистемаНалогообложения.Организация, СистемаНалогообложения.СистемаНалогообложения);
			СтрокиТоваровПоСНО = Объект.Товары.НайтиСтроки(СтруктураОтбораСНО);
			Для Каждого СтрокаТоваровПоСНО Из СтрокиТоваровПоСНО Цикл
				
				СуммаТоваровПоЧеку = СуммаТоваровПоЧеку + СтрокаТоваровПоСНО.СуммаБезСкидки
					- СтрокаТоваровПоСНО.СуммаАвтоматическойСкидки - СтрокаТоваровПоСНО.СуммаСкидкиНаценки - ?(СуммаОплатПоЧеку > 0, 0, СтрокаТоваровПоСНО.СуммаСкидкиОплатыБонусом);
				
			КонецЦикла;
				
			СуммаСертификатаПоЧеку = Мин(ОсталосьРаспределить, СуммаТоваровПоЧеку - СуммаОплатПоЧеку);
			Если СуммаСертификатаПоЧеку <= 0 Тогда
				СтрокаСертификата = НераспределенныйСертификат;
				ЗаполнитьЗначенияСвойств(СтрокаСертификата, СистемаНалогообложения);
				СтрокаСертификата.УникальныйИдентификатор = СтрЗаменить(Новый УникальныйИдентификатор, "-", "_");
				Продолжить;
			КонецЕсли;
			
			СтрокаСертификата = НераспределенныйСертификат;
			Если Индекс > 0 Тогда
				СтрокаСертификата = ТаблицаПодарочныхСертификатов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСертификата, НераспределенныйСертификат);
			КонецЕсли;
				
			ЗаполнитьЗначенияСвойств(СтрокаСертификата, СистемаНалогообложения);
				
			СтрокаСертификата.СуммаСертификата = СуммаСертификатаПоЧеку;
			СтрокаСертификата.УникальныйИдентификатор = СтрЗаменить(Новый УникальныйИдентификатор, "-", "_");
				
			Индекс = Индекс + 1;
				
			ОсталосьРаспределить = ОсталосьРаспределить - СуммаСертификатаПоЧеку;
			
			РаспределенаТекущаяСтраница = Истина;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписатьРазблокироватьБонусныеБаллы()
	
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		
		Если ОбъединитьКарты Тогда
			ОбъединитьДисконтныеКартыСерверЛояльности();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СуммаБонусов) И СписатьБаллыПоВладельцу Тогда
			
			СписатьБонусыТаблицыВыбранныхКарт();
			
		ИначеЕсли ЗначениеЗаполнено(СуммаБонусов) Тогда
		
			ЗначенияПараметровМетода = ПараметрыМетодовБонуснойПодсистемы();
			ЗначенияПараметровМетода.Вставить("BonusesCount", Строка(СуммаБонусов));
			
			ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаСписатьБонусыКлиента(ПараметрыПодключенияКСерверуЛояльности, ЗначенияПараметровМетода);
			Результат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
			
			СтрокаОтвета = Результат.ДанныеОтвета;
			
			Если СтрокаОтвета = НСтр("ru = 'Бонусы успешно списаны'") Тогда
				
				Если ОжидаемоеКоличествоЧеков < 1 Тогда
					ОчиститьДанныеКартыЛояльности();
				КонецЕсли;
				
			Иначе
				РазблокироватьОбъектСервераЛояльности("clientbonuses");
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(КоличествоБонусов) Тогда
			
			РазблокироватьОбъектСервераЛояльности("clientbonuses");
			
		КонецЕсли;
	ИначеЕсли ИспользоватьОплатуБонусами И СуммаБонусов > 0
		И ОбъединитьКарты Тогда
		ОбъединитьДисконтныеКарты();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуОплатыБонусами(СтруктураОтложенногоПоказаПредупреждения = Неопределено, ОплатитьБонусами = Ложь)
	
	ЭтоВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
	
	Если ЭтоВозврат ИЛИ (ЗначениеЗаполнено(Объект.ЗаказПокупателя) И Не СкидкиРассчитаны) Тогда
		
		СуммаСкидкиОплатыБонусом = 0;
		Для Каждого Строка Из Объект.Товары Цикл
			Если Не Строка.СуммаСкидкиОплатыБонусомЧекаПродажи = 0
				ИЛИ Не Строка.СуммаАвтоматическойСкидкиЧекаПродажи = 0
				ИЛИ Не Строка.СуммаСкидкиНаценкиЧекаПродажи = 0 Тогда
				СуммаСкидкиСтроки = Строка.СуммаАвтоматическойСкидки;
				Строка.СуммаСкидкиОплатыБонусом =
					Строка.СуммаСкидкиОплатыБонусомЧекаПродажи / Строка.СуммаБезСкидкиЧекаПродажи * Строка.СуммаБезСкидки;
				Строка.СуммаАвтоматическойСкидки =
					Строка.СуммаАвтоматическойСкидкиЧекаПродажи / Строка.СуммаБезСкидкиЧекаПродажи * Строка.СуммаБезСкидки;
				Строка.СуммаСкидкиНаценки =
					Строка.СуммаСкидкиНаценкиЧекаПродажи / Строка.СуммаБезСкидкиЧекаПродажи * Строка.СуммаБезСкидки;
				Если СкидкиРассчитаны и ЭтоВозврат Тогда
					Строка.СуммаАвтоматическойСкидки = Строка.СуммаАвтоматическойСкидки + СуммаСкидкиСтроки;
				КонецЕсли;
				Строка.СуммаСкидокОбщая = Строка.СуммаСкидкиОплатыБонусом + Строка.СуммаАвтоматическойСкидки + Строка.СуммаСкидкиНаценкиЧекаПродажи;
				ПересчитатьСуммы(Строка);
				СуммаСкидкиОплатыБонусом = СуммаСкидкиОплатыБонусом + Строка.СуммаСкидкиОплатыБонусом;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЭтоВозвратБезОснования Тогда
			ПересчитатьКэшСкидкиНаценки();
			СуммаОплаченоБонусами = СуммаСкидкиОплатыБонусом;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоВозврат Тогда
		РаспределитьСуммуБонусовПоДисконтнымКартамПриВозврате();
		Возврат;
	КонецЕсли;
	
	Если РассчитыватьБонусы Тогда
		
		СуммаКОплате = СуммаКОплате + СуммаБонусов;
		СуммаИтого = СуммаИтого + СуммаБонусов;
		СуммаБонусов = 0;
		
		МаксимальнаяСуммаОплатыБонусамиПоЧеку = 0;
		Если ТаблицаСуммМаксимальнойОплатыбонусами.Количество() Тогда
			МаксимальнаяСуммаОплатыБонусамиПоЧеку = Мин(БонусыДоступноКОплате, ТаблицаСуммМаксимальнойОплатыбонусами.Итог("Сумма"), КоличествоБонусов);
		Иначе
			МаксимальнаяСуммаОплатыБонусамиПоЧеку = Мин(БонусыДоступноКОплате, СуммаИтого * ПроцентОплатыБонусами / 100, КоличествоБонусов);
		КонецЕсли;
		
		// Обновить информацию на форме о том, сколько бонусов можно потратить
		БонусыДоступноКОплате = МаксимальнаяСуммаОплатыБонусамиПоЧеку;
		ПроцентОплатыБонусами = ?(СуммаИтого = 0, 0, МаксимальнаяСуммаОплатыБонусамиПоЧеку * 100 / СуммаИтого);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатитьБонусами,
			КоличествоБонусов > 0 И Элементы.ГруппаОплатаБонусами.Доступность);
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Бонусами можно оплатить до %1%% от суммы чека'"), ПроцентОплатыБонусами);
		Элементы.ДекорацияВозможноОплатитьБонусами.Заголовок = ТекстСообщения;
		Элементы.ИнформацияМожноОплатитьБонусами.Заголовок = ТекстСообщения;
		
		// Обновить данные в строках товара о том, сколько составляет скидка-оплата бонусами за каждый товар
		ОсталосьОплатитьЗаТовар = ИнтерфейсРМКСлужебныйКлиент.ПолучитьОставшуюсяСуммуОплатыПоЧеку(ЭтотОбъект);
		СуммаБонусовКРаспределению = Окр(Мин(МаксимальнаяСуммаОплатыБонусамиПоЧеку, БонусыДоступноКОплате), 2);
		СуммаБонусовКРаспределениюСУчетомОплат = СуммаБонусовКРаспределению;
		
		Если ОсталосьОплатитьЗаТовар <> 0 Тогда
			СуммаБонусовКРаспределениюСУчетомОплат = Мин(СуммаБонусовКРаспределению, ОсталосьОплатитьЗаТовар);
		Иначе
			СуммаБонусовКРаспределениюСУчетомОплат = ОсталосьОплатитьЗаТовар;
		КонецЕсли;
		
		Если СуммаОплаченоБонусами > СуммаБонусовКРаспределениюСУчетомОплат Тогда
			СуммаОплаченоБонусами = СуммаБонусовКРаспределениюСУчетомОплат;
		КонецЕсли;
		Если ОплатитьБонусами Тогда
			СуммаБонусов = СуммаБонусовКРаспределениюСУчетомОплат;
			Если СуммаОплаченоБонусами = 0 Тогда
				СуммаОплаченоБонусами = СуммаБонусовКРаспределениюСУчетомОплат;
			КонецЕсли;
		КонецЕсли;
		РаспределитьБонусыПоТоварам(СтруктураОтложенногоПоказаПредупреждения);
		ОбнулитьСуммыОплат = Ложь;
		ПересчитатьИтогиТабличнойЧастиТовары(ОбнулитьСуммыОплат);
		
		РаспределенныеБонусы = Объект.Товары.Итог("СуммаСкидкиОплатыБонусом");
		
		НастроитьЭлементыВидаОплатыБонусами(МаксимальнаяСуммаОплатыБонусамиПоЧеку);
		
	КонецЕсли;
	
	СуммаБонусовКНачислению = ТаблицаБонусныеБаллы.Итог("КоличествоБонусныхБаллов");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеКартыЛояльности()
	
	ПустаяСтрока = НСтр("ru = ''");
	
	НайденнаяКартаДатаРождения		= ПустаяСтрока;
	НайденнаяКартаНомер				= ПустаяСтрока;
	НайденнаяКартаПочта				= ПустаяСтрока;
	НайденнаяКартаТелефон			= ПустаяСтрока;
	НайденнаяКартаФИО				= ПустаяСтрока;
	НайденнаяКартаСуммаПродаж		= ПустаяСтрока;
	
	СписатьБаллыПоВладельцу = Ложь;
	ОбъединитьКарты = Ложь;
	ТаблицаВыбранныхКарт.Очистить();
	ПроцентБонуснойПрограммы = 0;
	БонуснаяПрограмма = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПримененныеБонусы(ОчиститьДанныеКартыЛояльностиПокупателя = Истина)
	
	СуммаИтого = СуммаИтого + СуммаОплаченоБонусами;
	СуммаБонусов = 0;
	СуммаОплаченоБонусами = 0;
	НастроитьДоступностьПробитьЧек();
	Сдача = 0;
	ЭтоОплатаВстречнымПредоставлением = Ложь;
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		СтрокаТовары.Сумма = СтрокаТовары.Сумма + СтрокаТовары.СуммаСкидкиОплатыБонусом;
		СтрокаТовары.СуммаСкидкиОплатыБонусом = 0;
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТовары.ПолучитьИдентификатор());
		
	КонецЦикла;
	
	Если ОчиститьДанныеКартыЛояльностиПокупателя Тогда
		
		ОчиститьДанныеКартыЛояльности();
		ОчиститьДанныеПокупателя();
		
	КонецЕсли;
	АктуализироватьИзменениеЭтапаРаботыСЧекомПриИзмененииОплаты();
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыМетодовБонуснойПодсистемы(ЭтоСозданиеНовойКарты = Ложь)
	
	СтатичныеПараметры	= СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыМетодовБонуснойПодсистемы();
	ПрефиксПоля = ?(ЭтоСозданиеНовойКарты, "НоваяКарта", "НайденнаяКарта");
	
	Если ЭтоСозданиеНовойКарты Тогда 
		СтатичныеПараметры.Вставить("Client", ЭтотОбъект[ПрефиксПоля + "ФИО"]);
	КонецЕсли;
	
	СтатичныеПараметры.ClientCardTypeUID = НоваяКартаВидКарты;
	ДанныеКарты = ДанныеВидаКарты(НоваяКартаВидКарты);
	СтатичныеПараметры.GenerateNumber = ДанныеКарты.ГенерироватьНомер;
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолученИдентификаторКартыЛояльности(ПараметрыКартыЛояльности) Тогда
		СтатичныеПараметры.Email		= "";
		СтатичныеПараметры.ClientCardID = ПараметрыКартыЛояльности.КодКарты;
		СтатичныеПараметры.Phone		= "";
		СтатичныеПараметры.DateOfBirth 	= ПараметрыКартыЛояльности.ДатаРождения;
		СтатичныеПараметры.CardGUID 	= ПараметрыКартыЛояльности.ИдентификаторКарты;
	Иначе
		СтатичныеПараметры.Email			= ЭтотОбъект[ПрефиксПоля + "Почта"];
		СтатичныеПараметры.ClientCardID		= ЭтотОбъект[ПрефиксПоля + "Номер"];
		СтатичныеПараметры.Phone			= ЭтотОбъект[ПрефиксПоля + "Телефон"];
		ТекстДаты = ЭтотОбъект[ПрефиксПоля + "ДатаРождения"];
		СтатичныеПараметры.DateOfBirth
			= ИнтерфейсРМКСлужебныйКлиентСервер.ПреобразоватьДатуИзСтроковогоПредставления(ТекстДаты);
		СтатичныеПараметры.CardGUID 	= Строка(Объект.ДисконтнаяКарта.УникальныйИдентификатор());
	КонецЕсли;
	СтатичныеПараметры.Store 			= Строка(Объект.ТорговыйОбъект.УникальныйИдентификатор());
	СтатичныеПараметры.GiftCardNumber	= НомерСертификата;
	СтатичныеПараметры.GiftCardUID		= Строка(ПодарочныйСертификат.УникальныйИдентификатор());
	СтатичныеПараметры.Promocode		= ВведенныйПромокод;
	СтатичныеПараметры.Currency			= КодВалютыЦены;
	
	Возврат СтатичныеПараметры;
	
КонецФункции

&НаКлиенте
Функция ПреобразованнаяСтрокаПоискаТелефонаНаСервереЛояльности(ШтрихкодПоиска)
	
	НачалоСтроки = "";
	Если Лев(ШтрихкодПоиска, 1) = "%" Тогда
		НачалоСтроки = "*";
	КонецЕсли;
	ШтрихкодТолькоЦифры = ИнтерфейсРМКСлужебныйКлиентСервер.ТолькоЦифры(ШтрихкодПоиска);
	
	Возврат СтрШаблон("%1%2", НачалоСтроки, ШтрихкодТолькоЦифры);
	
КонецФункции

&НаКлиенте
Функция ПараметрыМетодаНайтиКартуКлиента(СтруктураПараметровКлиента)
	
	ШтрихкодПоиска = СтруктураПараметровКлиента.ПараметрыШтрихкода.ШтрихкодОригинал;
	ФильтрПоиска = СтруктураПараметровКлиента.ПараметрыШтрихкода.ФильтрПоискаПоШтрихкоду;
	
	ПараметрыПоискаКарт = СерверЛояльностиПолучательДанныхКлиентСервер.СтруктураПараметровНайтиКартуКлиента();
	Если ФильтрПоиска.Свойство("УникальныйИдентификаторКарты") Тогда
		ПараметрыПоискаКарт.CardGUID = ШтрихкодПоиска;
	КонецЕсли;
	Если ФильтрПоиска.Свойство("ИнформационныеКарты") Тогда
		ПараметрыПоискаКарт.ClientCardID = ШтрихкодПоиска;
	КонецЕсли;
	Если ФильтрПоиска.Свойство("УникальныйИдентификаторВладельцаКарты") Тогда
		ПараметрыПоискаКарт.ClientGUID = ШтрихкодПоиска;
	КонецЕсли;
	Если ФильтрПоиска.Свойство("ШаблонАдресЭПСЛ") Тогда
		ПараметрыПоискаКарт.Email = ШтрихкодПоиска;
	КонецЕсли;
	Если ФильтрПоиска.Свойство("ШаблонНомерТелефонаСЛ") Или ФильтрПоиска.Свойство("ПоследниеЦифрыТелефонаСЛ") Тогда
		ПараметрыПоискаКарт.Phone = ПреобразованнаяСтрокаПоискаТелефонаНаСервереЛояльности(ШтрихкодПоиска);
	КонецЕсли;
	ВыборКлиента = Ложь;
	Если СтруктураПараметровКлиента.Свойство("ВыборКлиента") Тогда
		ВыборКлиента = СтруктураПараметровКлиента.ВыборКлиента;
	КонецЕсли;
	ПараметрыПоискаКарт.BlockBonuses = ?(ИспользоватьОплатуБонусами, "1", "0");

	Возврат ПараметрыПоискаКарт;
	
КонецФункции

&НаКлиенте
Процедура РазблокироватьОбъектСервераЛояльности(ТипОбъекта = "clientbonuses")
	
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		
		ЗначенияПараметровМетода = ПараметрыМетодовБонуснойПодсистемы();
		
		Если ТипОбъекта = "clientbonuses" Тогда
			Если СуммаБонусов <= 0 И КоличествоБонусов <= 0 Тогда
				Возврат;
			Иначе
				ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаРазблокироватьБонусыКлиента(ПараметрыПодключенияКСерверуЛояльности, ЗначенияПараметровМетода);
			КонецЕсли;
		КонецЕсли;
		
		Если ТипОбъекта = "giftcard" Тогда
			Если СуммаОплаченоСертификатами <= 0 И СуммаСертификата <= 0 Тогда
				Возврат;
			Иначе
				ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаРазблокироватьПодарочныйСертификат(ПараметрыПодключенияКСерверуЛояльности, ЗначенияПараметровМетода);
			КонецЕсли;
		КонецЕсли;
		
		Если ТипОбъекта = "promocode" Тогда
			ПредъявленныеПромокоды = ТаблицаПримененныхПромокодов.НайтиСтроки(Новый Структура("ЭтоАктивацияПромокода", Ложь));
			Если ПредъявленныеПромокоды.Количество() = 0 И НЕ ЗначениеЗаполнено(ВведенныйПромокод) Тогда
				Возврат;
			Иначе
				ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаРазблокироватьПромокод(ПараметрыПодключенияКСерверуЛояльности, ЗначенияПараметровМетода);
			КонецЕсли;
		КонецЕсли;
		Результат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
		
		Если ТипОбъекта = "clientbonuses" Тогда 
			
			Если Не Результат.ДанныеОтвета = НСтр("ru = 'Бонусы разблокированы'") Тогда
				ПоказатьПредупреждение(,
					НСтр("ru = 'Не удалось разблокировать бонусы. Пожалуйста, обратитесь к администратору'"));
			КонецЕсли;
				
		КонецЕсли;
			
		Если ТипОбъекта = "giftcard" 
			И НЕ Результат.ДанныеОтвета = "Подарочный сертификат разблокирован" Тогда
				ПоказатьПредупреждение(,
					НСтр("ru = 'Не удалось разблокировать подарочный сертификат. Пожалуйста, обратитесь к администратору'"));
		КонецЕсли;
			
		Если ТипОбъекта = "promocode" 
			И НЕ Результат.ДанныеОтвета = "Промокод разблокирован" Тогда
				ПоказатьПредупреждение(,
					НСтр("ru = 'Не удалось разблокировать промокод. Пожалуйста, обратитесь к администратору'"));
				КонецЕсли;
				
	Иначе
		
		ПараметрыОбъекта = Новый Структура;
		ПараметрыОбъекта.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
		ПараметрыОбъекта.Вставить("НомерСертификата", НомерСертификата);
		ПараметрыОбъекта.Вставить("ПодарочныйСертификат", ПодарочныйСертификат);
		ПараметрыОбъекта.Вставить("Промокод", ВведенныйПромокод);
		ОбщегоНазначенияРМККлиентПереопределяемый.РазблокироватьОбъектСервераЛояльности(ТипОбъекта, ПараметрыОбъекта);
		
	КонецЕсли;
	
	Если ТипОбъекта = "clientbonuses"
		И (СписатьБаллыПоВладельцу Или ОбъединитьКарты) Тогда
		
		РазблокироватьБонусыТаблицыВыбранныхКарт();
		
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуОплатыСертификатами(СуммаИтогоОсталосьОплатить, СуммаБезОкругления)
	
	Если ЗначениеЗаполнено(ВыбраннаяОрганизация) И ЗначениеЗаполнено(ВыбраннаяСистемаНалогообложения) Тогда
		СтруктураОтбораСНО = Новый Структура("Организация, СистемаНалогообложения", ВыбраннаяОрганизация, ВыбраннаяСистемаНалогообложения);
		СтрокиПодарочныхСертификатов = ТаблицаПодарочныхСертификатов.НайтиСтроки(СтруктураОтбораСНО);
		
		ОплаченоСертификатами = 0;
		Для Каждого СтрокаПодарочныхСертификатов Из СтрокиПодарочныхСертификатов Цикл
			ОплаченоСертификатами = ОплаченоСертификатами + СтрокаПодарочныхСертификатов.СуммаСертификата;
			ЭтотОбъект["СуммаСертификата_" + СтрокаПодарочныхСертификатов.УникальныйИдентификатор] = СтрокаПодарочныхСертификатов.СуммаСертификата;
		КонецЦикла;
		СуммаОплаченоСертификатами = ОплаченоСертификатами;
	Иначе
		СуммаОплаченоСертификатами = ТаблицаПодарочныхСертификатов.Итог("СуммаСертификата");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписатьПодарочныйСертификат()
	
		ЭтоОперацияВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
		Если ЭтоОперацияВозврат Тогда
			СуммаСписания = Строка(-СуммаСертификата);
		Иначе
			СуммаСписания = Строка(СуммаСертификата);
		КонецЕсли;
		
		ЗначенияПараметровМетода = ПараметрыМетодовБонуснойПодсистемы();
		ЗначенияПараметровМетода.Вставить("GiftCardWriteOffAmount", СуммаСписания);
		
		ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаСписатьПодарочныйСертификат(ПараметрыПодключенияКСерверуЛояльности, ЗначенияПараметровМетода);
		Результат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
		
		СтрокаОтвета = Результат.ДанныеОтвета;
		
		Если СтрокаОтвета = "Подарочный сертификат успешно списан на указанную сумму" Тогда
			
			СуммаОстаткаСертификатов = СуммаОстаткаСертификатов - СуммаОплаченоСертификатами;
			Если ОжидаемоеКоличествоЧеков < 1 Тогда
				ОчиститьДанныеПодарочногоСертификата();
			КонецЕсли;
			
		Иначе
			РазблокироватьОбъектСервераЛояльности("giftcard");
		КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НайтиПодарочныйСертификат()
	
	Если Не ЗначениеЗаполнено(НомерСертификата) Тогда 
		
		ТекстОшибки = НСтр("ru = 'Введите номер сертификата'");
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		
		ЗначенияПараметровМетода = ПараметрыМетодовБонуснойПодсистемы();
		ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаПолучитьДанныеПодарочногоСертификата(ПараметрыПодключенияКСерверуЛояльности, ЗначенияПараметровМетода);
		Результат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
		
		Если Результат.ЕстьОшибки Тогда
			ТекстЗаголовка = НСтр("ru = 'Ошибка поиска подарочного сертификата.'");
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, Результат.ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		ДанныеОтвета = Неопределено;
		СтрокаJSON = Результат.ДанныеОтвета;
		СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
		
		
		Если НЕ ДанныеОтвета = Неопределено Тогда 
			
			Если ДанныеОтвета.Свойство("Error") И НЕ ДанныеОтвета.Error Тогда 
				
				СуммаСертификата = ДанныеОтвета.GiftCardBalance;
				
				ГУИД = ДанныеОтвета.GiftCard.GiftCardRef;
				ПодарочныйСертификат = ПодарочныйСертификатПоГУИД(ГУИД);
				
				УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияСуммаСертификата, Истина);
				УстановитьВидимостьЭлементаФормы(Элементы.ОплатитьСертификатом, Истина);
				УстановитьВидимостьЭлементаФормы(Элементы.НайтиСертификат, Ложь);
				УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияОплатаСертификатами, Ложь);
				УстановитьВидимостьЭлементаФормы(Элементы.НомерСертификата, Ложь);
				УстановитьДоступностьЭлементаФормы(Элементы.ОплатитьСертификатом, СуммаСертификата > 0); 
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'У клиента %1 %2'"),
					Формат(СуммаСертификата, "ЧЦ=15; ЧДЦ=2; ЧН=0,00"),
					ПредставлениеВалюты);
				Элементы.ДекорацияСуммаСертификата.Заголовок = ТекстСообщения;
				
			ИначеЕсли ДанныеОтвета.Свойство("Error") И ДанныеОтвета.Error Тогда 
				
				ТекстЗаголовка = НСтр("ru = 'Ошибка поиска подарочного сертификата.'");
				ТекстОшибки = СтрШаблон(НСтр("ru = '%1'"), ДанныеОтвета.ErrorMessage);
				ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПодарочныйСертификат(ИдентификаторСертификата, УдалитьСтрокуТаблицы = Ложь)
	
	Если УдалитьСтрокуТаблицы Тогда 
		
		Отбор = Новый Структура;
		Отбор.Вставить("УникальныйИдентификатор", ИдентификаторСертификата);
		МассивСтрокТаблицы = ТаблицаПодарочныхСертификатов.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаТаблицы Из МассивСтрокТаблицы Цикл
			ЭтоСерийныйПодарочныйСертификат = СтрокаТаблицы.ЭтоСерийныйПодарочныйСертификат;
			ТаблицаПодарочныхСертификатов.Удалить(СтрокаТаблицы);
		КонецЦикла;
		УстановитьВидимостьКомандыУдаленияВсехСертификатов(Элементы.ГруппаУдалитьСертификаты, ТаблицаПодарочныхСертификатов);
		
	КонецЕсли;
	
	Если НЕ Элементы.Найти("СуммаСертификата_" + ИдентификаторСертификата) = Неопределено Тогда
		УдаляемыеРеквизиты = Новый Массив;
		УдаляемыеРеквизиты.Добавить("СуммаСертификата_" + ИдентификаторСертификата);
		ИзменитьРеквизиты(, УдаляемыеРеквизиты);
		
		УдалитьЭлементФормы("ГруппаСуммаОплатаСертификатом_" + ИдентификаторСертификата);
		УдалитьЭлементФормы("СуммаСертификата_" + ИдентификаторСертификата);
		УдалитьЭлементФормы("ДекорацияУдалитьСертификат_" + ИдентификаторСертификата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписатьРазблокироватьПодарочныеСертификаты(Списать = Ложь)
	
	Для Каждого СтрокаТаблицы Из ТаблицаПодарочныхСертификатов Цикл
		
		РазблокироватьСертификат = (СтрокаТаблицы.СуммаСертификата > 0) И СтрокаТаблицы.ЭтоСерийныйПодарочныйСертификат;
		СтруктураОтбора = Новый Структура("НомерСертификата, ПодарочныйСертификат",
			СтрокаТаблицы.НомерСертификата,
			СтрокаТаблицы.ПодарочныйСертификат);
		Если НЕ ТаблицаПодарочныхСертификатов.НайтиСтроки(СтруктураОтбора).Количество() 
			И РазблокироватьСертификат Тогда
			
			НомерСертификата = СтрокаТаблицы.НомерСертификата;
			ПодарочныйСертификат = СтрокаТаблицы.ПодарочныйСертификат;
			РазблокироватьОбъектСервераЛояльности("giftcard");
		КонецЕсли;
		
		Если СтрокаТаблицы.СуммаСертификата > 0 И СтрокаТаблицы.ЭтоСерийныйПодарочныйСертификат Тогда
			
			НомерСертификата = СтрокаТаблицы.НомерСертификата;
			ПодарочныйСертификат = СтрокаТаблицы.ПодарочныйСертификат;
			СуммаСертификата = СтрокаТаблицы.СуммаСертификата;
			
			Если Списать И ИспользоватьСерверЛояльностиПолучательДанных Тогда
				СписатьПодарочныйСертификат();
			Иначе
				РазблокироватьОбъектСервераЛояльности("giftcard");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСертификатВТаблицу(Форма, БалансСертификата, ТекущаяСтрока = Неопределено)
	
	Если ТекущаяСтрока = Неопределено Тогда
		СуммаСертификата = Форма.СуммаСертификата;
		НомерСертификата = Форма.НомерСертификата;
		ПодарочныйСертификат = Форма.ПодарочныйСертификат;
		ЭтоСерийныйПодарочныйСертификат = Форма.ЭтоСерийныйПодарочныйСертификат;
		
	Иначе
		СуммаСертификата = Форма.ТекущийТоварЦенаИзКарточки;
		Если ЗначениеЗаполнено(ТекущаяСтрока.ИдентификаторСерий) Тогда
			НомерСертификата = ТекущаяСтрока.ИдентификаторСерий;
		Иначе
			НомерСертификата = Строка(ТекущаяСтрока.Серия.УникальныйИдентификатор());
		КонецЕсли;
		ПодарочныйСертификат = ТекущаяСтрока.Номенклатура;
		ЭтоСерийныйПодарочныйСертификат = ЗначениеЗаполнено(ТекущаяСтрока.СерияПредставление);
	КонецЕсли;
	
	СтрокаДанныхСертификата = Форма.ТаблицаПодарочныхСертификатов.Добавить();
	СтрокаДанныхСертификата.СуммаСертификата = СуммаСертификата;
	СтрокаДанныхСертификата.ЛимитСертификата = СуммаСертификата;
	СтрокаДанныхСертификата.НомерСертификата = НомерСертификата;
	СтрокаДанныхСертификата.ПодарочныйСертификат = ПодарочныйСертификат;
	СтрокаДанныхСертификата.ЭтоСерийныйПодарочныйСертификат = ЭтоСерийныйПодарочныйСертификат;
	СтрокаДанныхСертификата.БалансСертификата = БалансСертификата;
	УстановитьВидимостьКомандыУдаленияВсехСертификатов(Форма.Элементы.ГруппаУдалитьСертификаты,
		Форма.ТаблицаПодарочныхСертификатов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользованиеСерий(Номенклатура)
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьИспользованиеСерий(Номенклатура, Результат);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОпределитьИспользованиеАвтоматическихСкидок()
	
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		
		ВключеноИспользованиеАвтоматическихСкидок = Истина;
		
	Иначе
		
		ИспользуютсяАвтоСкидки = Ложь;
		ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьПризнакИспользованияАвтоматическихСкидок(ИспользуютсяАвтоСкидки);
		ВключеноИспользованиеАвтоматическихСкидок = ИспользуютсяАвтоСкидки;
		
	КонецЕсли;
	ИспользоватьАвтоматическиеСкидки = ВключеноИспользованиеАвтоматическихСкидок;
	
	ПоказыватьКнопкиСкидок = Истина;
	Если РежимКассыСамообслуживания Тогда
		ПоказыватьКнопкиСкидок = Ложь;
	Иначе
		ПоказыватьКнопкиСкидок = ИспользоватьАвтоматическиеСкидки ИЛИ ДопускаетсяПрименениеСкидок;
	КонецЕсли;
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКнопкиРасчетаСкидок, ИспользоватьАвтоматическиеСкидки И Не ПолныйРасчетСкидок);
	УстановитьВидимостьЭлементаФормы(Элементы.ПоказатьРассчитанныеСкидки, ПоказыватьКнопкиСкидок);
	УстановитьВидимостьЭлементаФормы(Элементы.ПоказатьСкидкиНаЧек, ПоказыватьКнопкиСкидок);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаБезСкидок, ПоказыватьКнопкиСкидок);
	УстановитьВидимостьЭлементаФормы(Элементы.СуммаСкидкиЗначение, НЕ ПоказыватьКнопкиСкидок);
	УстановитьДоступностьЭлементаФормы(Элементы.ОтменаРасчетаСкидок, Ложь);
	
КонецПроцедуры

&НаСервере
Функция РассчитатьАвтоматическиеСкидкиНаСервере()
	
	РезультатВыполненияРасчета = Новый Структура("ЕстьОшибки,ТекстОшибки, ИндексСтрокиПередПересчетом", Ложь, "", -1);
	
	СтандартныйРасчетСкидок = Истина;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьСтандартныйРасчетСкидок(СтандартныйРасчетСкидок);
	РезультатВыполненияРасчета.ИндексСтрокиПередПересчетом = ТекущийТоварИндексСтроки;
	Если ИспользоватьСерверЛояльностиПолучательДанных И СтандартныйРасчетСкидок Тогда
		ОбщегоНазначенияРМК.РассчитатьАвтоматическиеСкидки(ЭтотОбъект, РезультатВыполненияРасчета);
	Иначе
		ОбщегоНазначенияРМКПереопределяемый.РассчитатьАвтоматическиеСкидки(ЭтотОбъект, РезультатВыполненияРасчета);
	КонецЕсли;
	
	Если (РежимРаботыСЧеком = РежимыРаботыСЧеком.ПереходКОплате И ВыдаватьПодарокНаКассе)
			Или Не РежимКассыСамообслуживания Тогда
		ПрименитьПодарки();
	КонецЕсли;
	
	Возврат РезультатВыполненияРасчета;
	
КонецФункции

&НаКлиенте
Процедура РассчитатьСкидкиКлиент(ОткрыватьФормуВыбораПодарков = Ложь)
	
	ПродолжитьВыполнениеОтложенногоМетода = Истина;
	Если ИспользоватьАвтоматическиеСкидки Тогда
		
		Если ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации) Тогда
			ОтменитьСкидки(,,Ложь);
			Если ПроверитьСоединениеССерверомЛояльности(Истина) Тогда
				Если ИспользоватьАвтоматическиеСкидки Тогда
					РассчитатьИПрименитьАвтоматическиеСкидкиПриПродаже(ПродолжитьВыполнениеОтложенногоМетода,
						ОткрыватьФормуВыбораПодарков);
				КонецЕсли;
			ИначеЕсли Не РежимКассыСамообслуживания Тогда
				ПродолжитьВыполнениеОтложенногоМетода = Ложь;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации) 
			И ИспользоватьАвтоматическиеСкидкиПриВозврате Тогда
			ОтменитьСкидки(,Истина);
			Если ПроверитьСоединениеССерверомЛояльности(Истина) Тогда
				Если ИспользоватьАвтоматическиеСкидки Тогда
					РассчитатьИПрименитьАвтоматическиеСкидкиПриВозврате(ПродолжитьВыполнениеОтложенногоМетода);
				КонецЕсли;
			Иначе
				ПродолжитьВыполнениеОтложенногоМетода = Ложь;
			КонецЕсли;
		КонецЕсли;
		СформироватьЗаголовокКнопокРассчитатьСкидки();
	КонецЕсли;
	Если ПродолжитьВыполнениеОтложенногоМетода И ЗначениеЗаполнено(ИмяМетода) И Не РежимВыбораПодарка Тогда
		
		ВыполнитьОтложенныйМетод();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьАвтоматическиеСкидкиПриПродаже(БылСохраненТолькоНомер, ОткрыватьФормуВыбораПодарков)
	
	ПолученаКарта = ЗначениеЗаполнено(Объект.ДисконтнаяКарта)
		Или ИнтерфейсРМКСлужебныйКлиентСервер.ПолученИдентификаторКартыЛояльности(ПараметрыКартыЛояльности);
	Если ПолученаКарта И БылСохраненТолькоНомер Тогда
		ЗавершитьВводШтрихкодаНайденаКарта(КодВозвратаДиалога.Нет, Ложь);
	КонецЕсли;
	Если НЕ РежимКассыСамообслуживания
		И НЕ ОткрыватьФормуВыбораПодарков Тогда
		
		ЕстьПодарки = (ТаблицаПодарков.Количество() ИЛИ ТаблицаПодаркиБезВыбора.Количество());
		Если ЕстьПодарки Или ЗначениеЗаполнено(ИмяМетода) Тогда
			РежимВыбораПодарка = Истина;
			ПодключитьОбработчикОжидания("ВыдатьПодарок", 0.1 , Истина);
			
			Доступность = Ложь;
		КонецЕсли;
		
	ИначеЕсли РежимРаботыСЧеком = РежимыРаботыСЧеком.ПереходКОплате И ВыдаватьПодарокНаКассе
		И РежимКассыСамообслуживания Тогда
		ВыдатьПодарокКассаСамообслуживания()
	КонецЕсли;
	СкидкиРассчитаны = Истина;
	ОтразитьСработавшиеПромокодыНаКлиенте();
	Если (ТаблицаПодарков.Количество() ИЛИ ТаблицаПодаркиБезВыбора.Количество()) И ОткрыватьФормуВыбораПодарков 
		И РежимДопускаетВыборПодарка(ОткрыватьФормуВыбораПодарков) Тогда
		РежимВыбораПодарка = Истина;
		ПодключитьОбработчикОжидания("ОткрытьФормуВыбораПодарков", 0.1, Истина);
	ИначеЕсли ТаблицаПодарков.Количество() И НЕ РежимКассыСамообслуживания Тогда
		РежимРасчетаСкидокСтрока = ?(РежимРасчетаСкидокСтрока, Ложь, РежимРасчетаСкидокСтрока);
		ПерезаполнитьТаблицуСкидок();
		РежимРасчетаУправляемыхСкидок = ?(РежимРасчетаСкидокСтрока, "На строку", "На документ");
		ЗаполнитьУправляемыеСкидкиВыбор(РежимРасчетаУправляемыхСкидок);
		ПереключитьРежимНаПоказСкидок(Истина);
	КонецЕсли;
	ПроверитьПрименениеУправляемыхСкидокКлиент();
	РаспределитьСуммуПодарка();
	ПересчитатьСуммыТаблицыТоваров(Ложь);
	РассчитатьСуммуОплатыБонусами();
	РассчитатьСуммыОплаты();
	УстановитьДоступностьЭлементаФормы(Элементы.ОтменаРасчетаСкидок, СкидкиРассчитаны);
	ТребуетсяПересчетСкидок = Ложь;
	ПерезаполнитьТаблицуСкидок();
	ВывестиСообщения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьАвтоматическиеСкидкиПриВозврате()
	
	СкидкиРассчитаны = Истина;
	ПересчитатьСуммыТаблицыТоваров(Ложь);
	РассчитатьСуммуОплатыБонусами();
	РассчитатьСуммыОплаты();
	УстановитьДоступностьЭлементаФормы(Элементы.ОтменаРасчетаСкидок, СкидкиРассчитаны); 
	ТребуетсяПересчетСкидок = Ложь;
	ПерезаполнитьТаблицуСкидок();
	ВывестиСообщения();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьИПрименитьАвтоматическиеСкидкиПриПродаже(ПродолжитьВыполнениеОтложенногоМетода,
		ОткрыватьФормуВыбораПодарков)
	
	БылСохраненТолькоНомер = (Не ЗначениеЗаполнено(Объект.ДисконтнаяКарта))
		И ИнтерфейсРМКСлужебныйКлиентСервер.СохраненТолькоНомерКартыЛояльности(ПараметрыКартыЛояльности);
	РезультатРасчета = РассчитатьАвтоматическиеСкидкиНаСервере();
	Если РезультатРасчета.ЕстьОшибки Тогда
		Если Не РежимКассыСамообслуживания Тогда
			ПродолжитьВыполнениеОтложенногоМетода = Ложь;
			ПоказатьОшибкуРасчетаСкидок(Истина, РезультатРасчета.ТекстОшибки);
		КонецЕсли;
	Иначе
		ПрименитьАвтоматическиеСкидкиПриПродаже(БылСохраненТолькоНомер, ОткрыватьФормуВыбораПодарков);
		Если РезультатРасчета.ИндексСтрокиПередПересчетом >= 0
			И Объект.Товары.Количество() Тогда
			СтрокаТоваров = Объект.Товары.Получить(РезультатРасчета.ИндексСтрокиПередПересчетом);
			ИдентификаторСтроки = СтрокаТоваров.ПолучитьИдентификатор();
			Если НЕ ТекущийТоварИдентификатор = ИдентификаторСтроки Тогда
				Элементы.Товары.ТекущаяСтрока = ИдентификаторСтроки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьИПрименитьАвтоматическиеСкидкиПриВозврате(ПродолжитьВыполнениеОтложенногоМетода)
	
	РезультатРасчета = РассчитатьАвтоматическиеСкидкиНаСервере();
	Если РезультатРасчета.ЕстьОшибки Тогда
		ПродолжитьВыполнениеОтложенногоМетода = Ложь;
		ПоказатьОшибкуРасчетаСкидок(Истина, РезультатРасчета.ТекстОшибки);
	Иначе
		ПрименитьАвтоматическиеСкидкиПриВозврате();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПрименениеУправляемыхСкидокКлиент()
	
	НеСработавшиеУправляемыеСкидки = Новый Массив();
	Для Каждого УправляемаяСкидка Из ТаблицаВыбранныхУправляемыхСкидок Цикл
		ОтборСкидок = Новый Структура("СкидкаНаценка",
			?(ТипЗнч(УправляемаяСкидка.СкидкаНаценка) = Тип("Строка"), УправляемаяСкидка.ИдентификаторСкидки, УправляемаяСкидка.СкидкаНаценка));
		Если ЗначениеЗаполнено(УправляемаяСкидка.ИдентификаторСтроки) Тогда
			ОтборСкидок.Вставить("ИдентификаторСтроки", УправляемаяСкидка.ИдентификаторСтроки);
		КонецЕсли;
		СработавшиеСкидки = ТаблицаСкидкиНаценки.НайтиСтроки(ОтборСкидок);
		Если СработавшиеСкидки.Количество() = 0 И НЕ УправляемаяСкидка.ЭтоПравилоНачисленияБонусов Тогда
			НеСработавшиеУправляемыеСкидки.Добавить(УправляемаяСкидка);
		КонецЕсли;
	КонецЦикла;
	СкидокНеСработало = НеСработавшиеУправляемыеСкидки.Количество();
	Если СкидокНеСработало > 0 Тогда
		ТекстЗаголовка = НСтр("ru = 'Некоторые управляемые скидки не применены.'");
		КраткоеОписаниеСкидок = "";
		ПодробноеОписаниеСкидок = "";
		Если СкидокНеСработало = 1 Тогда
			КраткоеОписаниеСкидок = Строка(НеСработавшиеУправляемыеСкидки[0].СкидкаНаценка);
		Иначе 
			КраткоеОписаниеСкидок = Строка(СкидокНеСработало) + НСтр("ru=' шт.'");
			ПереносСтроки = ";
			|";
			ПодробноеОписаниеСкидок = НСтр("ru = 'Не сработавшие скидки:'");
			Для Каждого НеСработавшаяСкидка Из НеСработавшиеУправляемыеСкидки Цикл
				ПодробноеОписаниеСкидок = СтрШаблон(НРег("%1%2"), ПереносСтроки, НеСработавшаяСкидка.СкидкаНаценка)
			КонецЦикла;
		КонецЕсли;
		ТекстПояснения = СтрШаблон(НСтр("ru='Управляемые скидки не сработали (%1). 
		|Возможно, скидки содержат дополнительные условия, которые не выполнены в данном чеке.%2'"),
		КраткоеОписаниеСкидок, ПодробноеОписаниеСкидок);
		
		ПараметрыОшибки = Новый Структура("ЭтоПредупреждение", Истина);
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстПояснения, ПараметрыОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСообщения(ПослеОформленияЧека = Ложь)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПослеОформленияЧека", ПослеОформленияЧека);
	МассивСообщений = ТаблицаСообщений.НайтиСтроки(Отбор);
	ТекстЗаголовка = НСтр("ru = 'Маркетинговое сообщение.'");
	Для Каждого Сообщение Из МассивСообщений Цикл
		ПоказатьПредупреждение(, Сообщение.ТекстСообщения, , ТекстЗаголовка);
		ТаблицаСообщений.Удалить(Сообщение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСкидки(ОтменитьРучныеСкидки = Ложь, ЭтоВозврат = Ложь, ОтменитьПодарки = Истина)
	
	СкидкиРассчитаны = Ложь;
	ЦветФонаНеактивнойКнопки = ЦветаФормы.Авто;
	Если Не ЭтоВозврат Тогда
		ТаблицаСкидкиНаценки.Очистить();
		ТаблицаБонусныеБаллы.Очистить();
		ТаблицаБонусныеБаллыЧекаПродажи.Очистить();
	Иначе
		МассивСтрокКУдалению = Новый Массив;
		Для Каждого СтрокаТаблицы Из ТаблицаСкидкиНаценки Цикл
			Если СтрокаТаблицы.ПриВозврате Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
			ТаблицаСкидкиНаценки.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли;
	
	МассивПодарков = Новый Массив;
	
	ОтменитьОкругление();
	
	Для Каждого СтрокаТовар Из Объект.Товары Цикл
		
		Если СтрокаТовар.Подарок Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОтменитьРучныеСкидки Тогда
			
			СтрокаТовар.СуммаСкидкиНаценки = 0;
			СтрокаТовар.ПроцентСкидкиНаценки = 0;
			СтрокаТовар.РассчитанаСкидка = Ложь;
			
			ЗначениеСкидкиНаЧек = 0;
			ПримененаСкидкаНаЧек = Ложь;
			
			Если СтрокаТовар.ОтображаетсяСкидкаПроцентом ИЛИ СтрокаТовар.ОтображаетсяСкидкаСуммой Тогда
				
				УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, НЕ СкидкиРассчитаны);
				
				Если СтрокаТовар.ОтображаетсяСкидкаПроцентом Тогда
					Элементы.СкидкаТекущийТоварПроцент.ЦветФона = ЦветФонаНеактивнойКнопки;
				ИначеЕсли СтрокаТовар.ОтображаетсяСкидкаСуммой Тогда
					Элементы.СкидкаТекущийТоварСумма.ЦветФона = ЦветФонаНеактивнойКнопки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЭтоВозврат Или ЭтоВозвратАванса
			Или СтрокаТовар.ЭтоПодарочныйСертификат Тогда
			СтрокаТовар.СуммаАвтоматическойСкидки = 0;
			СтрокаТовар.ПроцентАвтоматическойСкидки = 0;
		Иначе
			СтрокаТовар.СуммаАвтоматическойСкидки = СтрокаТовар.СуммаАвтоматическойСкидкиЧекаПродажи;
			СтрокаТовар.ПроцентАвтоматическойСкидки = ?(СтрокаТовар.СуммаБезСкидки = 0, 0, СтрокаТовар.СуммаАвтоматическойСкидкиЧекаПродажи/СтрокаТовар.СуммаБезСкидки * 100);
		КонецЕсли;
		
		Если ОтменитьПодарки Тогда
			СтрокаТовар.СуммаСкидкиПодарок = 0;
		КонецЕсли;
		
		ПересчитатьСуммы(СтрокаТовар);
		
	КонецЦикла;
	
	Если ОтменитьРучныеСкидки Тогда
		УстановитьДоступностьЭлементаФормы(Элементы.ЗначениеСкидкиНаЧек, НЕ СкидкиРассчитаны);
		Если ОтображаетсяСкидкаПроцентомНаЧек Тогда
			Элементы.СкидкаНаЧекПроцентом.ЦветФона = ЦветФонаНеактивнойКнопки;
		ИначеЕсли ОтображаетсяСкидкаСуммойНаЧек Тогда
			Элементы.СкидкаНаЧекСуммой.ЦветФона = ЦветФонаНеактивнойКнопки;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущийТоварСкидка <> 0 И ОтменитьРучныеСкидки Тогда
		
		ТекущийТоварСкидка = 0;
		Элементы.СкидкаТекущийТоварПроцент.ЦветФона = ЦветаФормы.Авто;
		Элементы.СкидкаТекущийТоварСумма.ЦветФона = ЦветаФормы.Авто;
		УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Истина);
		
	КонецЕсли;
	ПересчитатьИтогиТабличнойЧастиТовары(Ложь);
	РассчитатьСуммыОплаты();
	
	ОтразитьСработавшиеПромокодыНаКлиенте();
	
	УстановитьДоступностьЭлементаФормы(Элементы.ОтменаРасчетаСкидок, СкидкиРассчитаны);
	ТребуетсяПересчетСкидок = Ложь;
	ОчиститьТаблицыУправленияСкидок();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТоварЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;
	
	СуммаДляРегистрации = Объект.Товары.Итог("Сумма");
	СтрокаТовар = Объект.Товары.Получить(ТекущийТоварИндексСтроки);
	ЭтоПодарок = СтрокаТовар.Подарок;
	Если СкидкиРассчитаны Тогда
		ОтменитьСкидки();
		Если ЭтоПодарок Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Строка = Объект.Товары.Получить(ТекущийТоварИндексСтроки);
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВозможноЗакрытьСессиюРегистрацииМарок = ККМПоддерживаетПроверкуКодовМаркировки
		И ЗначениеЗаполнено(Строка.КодМаркировки)
		И ЗначениеЗаполнено(ИдентификаторТекущейСессииПроверкиМарок)
		И ВозможноЗакрытьСессиюРегистрацииМарок();
		
	Если ВозможноЗакрытьСессиюРегистрацииМарок Тогда
		ЗакрытьСессиюРегистрацииМарок();
	КонецЕсли;
	
	УдалитьСтрокуТовара(ЭтотОбъект, Строка, Объект.Товары);
	ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
	ПроинформироватьПользователяОКоличествеЧеков();
	
	ОбновитьИнформациюНаДисплееПокупателя(ТипыОперацийДисплеяПокупателя.УдалениеТовара);
	
	Если Объект.Товары.Количество() = 0 И НЕ ЭтоЧекКоррекции Тогда
		
		Если ЗначениеЗаполнено(ОтложенныйЧек) Тогда
			АннулироватьЧек(ОтложенныйЧек);
		КонецЕсли;
		
		ПереключатьсяВРежимПлитки = ОсновнойПодборПлиточный;
		РазблокироватьОбъектСервераЛояльности("clientbonuses");
		СписатьРазблокироватьПодарочныеСертификаты();
		ИнициализироватьИнтерфейсРабочегоМестаКассира();
		
		Если РегистрироватьДействияКассира(ЭтотОбъект) Тогда
			ПараметрыОперации = ИнтерфейсРМКСлужебныйКлиентСервер.ПодготовитьПараметрыОперацииНаРабочемМестеКассира(ЭтотОбъект);
			ПараметрыОперации.РегистрируемаяОперация
				= ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ОперацииРабочегоМестаКассира.УдалениеЧека");
			ПараметрыОперации.Сумма = СуммаДляРегистрации;
			ЗаписатьОперациюНаРабочемМестеКассира(ПараметрыОперации);
		КонецЕсли;
		
	Иначе
		ПересчитатьСуммыПослеУдаленияСтроки();
	КонецЕсли;
	ОбработатьИзменениеТаблицыТоваровНаКлиенте();
		
КонецПроцедуры

&НаКлиенте
Процедура ЦенаИзКарточкиПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЦенаИзКарточкиПриИзмененииПродолжение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДанныеПриИзмененииКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("УвеличитьКоличество") Тогда
		УвеличитьКоличество = ДополнительныеПараметры.УвеличитьКоличество;
	Иначе
		УвеличитьКоличество = Ложь;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Товары.Получить(ТекущийТоварИндексСтроки);
	
	Если Результат = КодВозвратаДиалога.Нет 
		ИЛИ (НЕ ТекущаяСтрока = Неопределено И ТекущаяСтрока.ТоварКЗамене) Тогда
		ТекущийТоварКоличество = ТекущаяСтрока.Количество;
		Возврат;
	КонецЕсли;
	
	Если ПримененыСкидки() Тогда
		ЭтоВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
		ОтменитьСкидки(,ЭтоВозврат);
	КонецЕсли;
	
	Если ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.ЭтоНабор Тогда
		ИзменитьКоличествоНабора(ТекущаяСтрока, УвеличитьКоличество);
		Возврат;
	ИначеЕсли ТекущаяСтрока.Весовой Тогда
		ИзменитьКоличествоВесовогоТовара(ТекущаяСтрока, УвеличитьКоличество);
		Возврат;
	КонецЕсли;
	
	Если УвеличитьКоличество Тогда
		ТекущийТоварКоличество = ТекущийТоварКоличество + 1;
		СкорректироватьТекущееКоличество(ТекущаяСтрока);
		ОбработатьИзменениеКоличестваНеВесовогоТовара(ТекущаяСтрока);
	Иначе
		Если ТекущийТоварКоличество > 1 Тогда
			ТекущийТоварКоличество = ТекущийТоварКоличество - 1;
			СкорректироватьТекущееКоличество(ТекущаяСтрока);
			ОбработатьИзменениеКоличестваНеВесовогоТовара(ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьАвтоматическиеСкидки И СкидкиРассчитаны Тогда
		ОтменитьСкидки();
	КонецЕсли;
	
		Если ИспользоватьНовыйПодборТоваров Тогда
			
			РежимВыбораПодарка = Ложь;
			РежимВыбораПодарочногоСертификата = Ложь;
			ОткрытьКаталогКлиент();
			
		Иначе
			ОбщегоНазначенияРМККлиентПереопределяемый.ОткрытьФормуПодбораТоваров(ЭтотОбъект);
		КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаНаЧекЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьАвтоматическиеСкидки И СкидкиРассчитаны Тогда
		ОтменитьСкидки();
	КонецЕсли;
	
	Активность = Ложь;
	НастроитьИнтерфейсПримененияСкидкиНаЧек(Элементы.ГруппаСкидкиНаЧек, Активность);
	ТекущийЭлемент = Элементы.ЗначениеСкидкиНаЧек;
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаТекущийТоварПроцентЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьАвтоматическиеСкидки И СкидкиРассчитаны Тогда
		ОтменитьСкидки(,,Ложь);
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.Получить(ТекущийТоварИндексСтроки);
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		Если ЭтоСоставляющаяНабора(ТекущиеДанные) Тогда
			
			СоставНабора = СоставНабораПоЭлементуНабора(ТекущиеДанные, Объект.Товары);
			
			Если СоставНабора.Количество() = Объект.Товары.Количество() Тогда
				Позиции = Объект.Товары;
			Иначе
				Позиции = СоставНабора;
			КонецЕсли;
			
			РассчитатьРучнуюСкидкуПроцентомНаПозиции(Позиции, ЗначениеСкидкиНаСтроку);
			
		Иначе
			РучнаяСкидкаПроцентомПоСтроке(ТекущиеДанные);
		КонецЕсли;
		
	КонецЕсли;
	Если ВыполнитьПересчетАвтоматическихСкидок Тогда
		ВыполнитьПересчетСкидок();
	Иначе
		ПерезаполнитьТаблицуСкидок();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкидкаТекущийТоварСуммаЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьАвтоматическиеСкидки И СкидкиРассчитаны Тогда
		ОтменитьСкидки(,,Ложь);
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.Получить(ТекущийТоварИндексСтроки);
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		Если ЭтоСоставляющаяНабора(ТекущиеДанные) Тогда
			
			СоставНабора = СоставНабораПоЭлементуНабора(ТекущиеДанные, Объект.Товары);
			
			Если СоставНабора.Количество() = Объект.Товары.Количество() Тогда
				Позиции = Объект.Товары;
			Иначе
				Позиции = СоставНабора;
			КонецЕсли;
			
			ЭтоРасчетСкидкиНаНабор = Истина;
			РассчитатьРучнуюСкидкуСуммойНаПозиции(Позиции, ЗначениеСкидкиНаСтроку);
			
		Иначе
			РучнаяСкидкаСуммойПоСтроке(ТекущиеДанные);
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.Получить(ТекущийТоварИндексСтроки);
	Если ВыполнитьПересчетАвтоматическихСкидок Тогда
		ВыполнитьПересчетСкидок();
	Иначе
		ПерезаполнитьТаблицуСкидок();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОплатаНаличнымиЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИмяМетода = "ОплатаНаличнымиНаКлиенте";
		РассчитатьСкидкиКлиент();
	Иначе
		ОплатаНаличнымиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаQRКодомЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		РассчитатьСкидкиКлиент();
	КонецЕсли;
	
	ТипыПлатежныхСистем = МенеджерОборудованияРМККлиент.ТипыПлатежнойСистемыККТ();
	
	Если Не РежимВыбораПодарка Тогда
		АктивацияNFC = Ложь;
		Если ДополнительныеПараметры.Имя = "КомандаПлатежнаяСистема_ОплатаЮКасса" Тогда
			ПлатежнаяСистемаККТ = ТипыПлатежныхСистем.Получить("ЮКасса");
			ТипОплаты = "ЮКасса";
		ИначеЕсли ДополнительныеПараметры.Имя = "КомандаПлатежнаяСистема_ОплатаСБП" Тогда
			ПлатежнаяСистемаККТ = ТипыПлатежныхСистем.Получить("СистемаБыстрыхПлатежей"); 
			ТипОплаты = "СБП";           
		ИначеЕсли ДополнительныеПараметры.Имя = "КомандаПлатежнаяСистема_АктивацияNFC" Тогда
			ПлатежнаяСистемаККТ = ТипыПлатежныхСистем.Получить("СистемаБыстрыхПлатежей"); 
			ТипОплаты = "СБП";           
			АктивацияNFC = Истина;
		КонецЕсли;
		ОплатаQRКодом(ПлатежнаяСистемаККТ, АктивацияNFC);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОплатаВРассрочкуЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИмяМетода = "ОплатаВРассрочкуНаКлиенте";
		РассчитатьСкидкиКлиент();
	Иначе
		ОплатаВРассрочкуНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуВРассрочку()
	
	Если Элементы.Предоплата.Доступность Тогда
		ПредоплатаНаКлиенте();
	Иначе
		ОплатаВРассрочкуНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуСертификатами(Элемент)
	
	ИдентификаторСертификата = СтрЗаменить(Элемент.Имя, "ДекорацияУдалитьСертификат_", "");
	
	Если ЗначениеЗаполнено(ИдентификаторСертификата) Тогда 
		
		УдалитьСтрокуПодарочногоСертификата(ИдентификаторСертификата);
		ПересчитатьСуммыОплатыПриРедактированииСертификатов();
		
	КонецЕсли;
	
	НастроитьВидимостьОплатыПодарочнымиСертификатами(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИмяМетода = "ПредоплатаНаКлиенте";
		РассчитатьСкидкиКлиент();
	Иначе
		ПредоплатаНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаСертификатомНСПКЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИмяМетода = "ПродолжитьОплатуСертификатомНСПКНаКлиенте";
		РассчитатьСкидкиКлиент();
	Иначе
		ПродолжитьОплатуСертификатомНСПКНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачетАвансаЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИмяМетода = "ЗачетАвансаНаКлиенте";
		РассчитатьСкидкиКлиент();
	Иначе
		ЗачетАвансаНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БезналЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИмяМетода = "БезналНаКлиенте";
		РассчитатьСкидкиКлиент();
	Иначе
		БезналНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросПоРасчетуСкидок(ИмяПроцедуры, ДополнительныеПараметры = Неопределено, ПересчетСкидок = Ложь)
	
	Если ПересчетСкидок Тогда
		
		КнопкиВопроса = Новый СписокЗначений;
		Если СкидкиРассчитаны Тогда
			ТекстВопроса = НСтр("ru = 'Скидки рассчитаны, пересчитать?'");
			КнопкиВопроса.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Пересчитать'"));
		Иначе
			ТекстВопроса = НСтр("ru = 'Скидки не были рассчитаны, рассчитать?'");
			КнопкиВопроса.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Рассчитать'"));
		КонецЕсли;
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не рассчитывать'"));
		
		ТекстЗаголовка = НСтр("ru = 'Подтверждение расчета скидок.'");
		КнопкаПоУмолчанию = КодВозвратаДиалога.Да;
		
	Иначе
		
		КнопкиВопроса = РежимДиалогаВопрос.ДаНет;
		ТекстЗаголовка = НСтр("ru = 'Подтверждение отмены скидок.'");
		ТекстВопроса = НСтр("ru = 'Скидки будут очищены, продолжить?'");
		КнопкаПоУмолчанию = КодВозвратаДиалога.Нет;
		
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения(ИмяПроцедуры, ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОповещениеЗавершения, ТекстВопроса, КнопкиВопроса, , КнопкаПоУмолчанию, ТекстЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредупредитьОПревышенииМинимальнойЦены(Знач МинимальнаяЦена)
	
	МинимальнаяЦена = Формат(МинимальнаяЦена, "ЧДЦ=2");
	
	ТекстЗаголовка = НСтр("ru = 'Превышена минимальная цена'");
	ТекстПояснения = СтрШаблон(НСтр("ru = 'Установлено значение - %1 %2'"), МинимальнаяЦена, ПредставлениеВалюты);
	
	ПоказатьПредупреждение(, ТекстПояснения, , ТекстЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаКредитомЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИмяМетода = "ОплатаКредитомНаКлиенте";
		РассчитатьСкидкиКлиент();
	Иначе
		ОплатаКредитомНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаИзКарточкиПриИзмененииПродолжение()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ПримененыСкидки() Тогда
		ОтменитьСкидки();
	КонецЕсли;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.МРЦ) Тогда
		
		Если ТекущийТоварЦенаИзКарточки <> ТекущаяСтрока.МРЦ Тогда
			ТекущийТоварЦенаИзКарточки = ТекущаяСтрока.МРЦ;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ЕМРЦ) Тогда
		
		Если ТекущийТоварЦенаИзКарточки < ТекущаяСтрока.ЕМРЦ Тогда
			ТекущийТоварЦенаИзКарточки = ТекущаяСтрока.ЕМРЦ;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.МинимальнаяЦена) Тогда
		
		Если ТекущаяСтрока.РассчитанаСкидка Тогда
			ТекущаяСтрока.СуммаСкидкиНаценки = 0;
			ТекущаяСтрока.ПроцентСкидкиНаценки = 0;
			ТекущаяСтрока.РассчитанаСкидка = Ложь;
			ТекущийТоварСкидка = 0;
		КонецЕсли;
		
		Если ТекущийТоварЦенаИзКарточки < ТекущаяСтрока.МинимальнаяЦена Тогда
			ТекущийТоварЦенаИзКарточки = ТекущаяСтрока.МинимальнаяЦена;
			ПредупредитьОПревышенииМинимальнойЦены(ТекущаяСтрока.МинимальнаяЦена);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущаяСтрока.ЭтоНабор И ТекущаяСтрока.ЦенаНабораСводно Тогда
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("НомерНабора", ТекущаяСтрока.НомерНабора);
		
		СтрокиНабора = Объект.Товары.НайтиСтроки(ПараметрыПоиска);
		
		СуммаДолейСтоимости = 0;
		Для Каждого СтрокаНабора Из СтрокиНабора Цикл
			СуммаДолейСтоимости = СуммаДолейСтоимости + СтрокаНабора.ДоляСтоимости;
		КонецЦикла;
		
		Счетчик = 0;
		ОстатокСтоимости = ТекущийТоварЦенаИзКарточки;
		Для Каждого СтрокаНабора Из СтрокиНабора Цикл
			СтрокаНабора.Цена = ТекущийТоварЦенаИзКарточки / СуммаДолейСтоимости * СтрокаНабора.ДоляСтоимости;
			ОстатокСтоимости = ОстатокСтоимости - СтрокаНабора.Цена * СтрокаНабора.Количество / СтрокаНабора.КоличествоНаборов;
			
			Счетчик = Счетчик + 1;
			Если Счетчик = СтрокиНабора.Количество() И ОстатокСтоимости <> 0 Тогда
				СтрокаНабора.Цена
					= СтрокаНабора.Цена + ОстатокСтоимости / СтрокаНабора.Количество * СтрокаНабора.КоличествоНаборов;
			КонецЕсли;
			
			ПересчитатьСуммы(СтрокаНабора);
		КонецЦикла;
		Если РежимРаботыСЧеком = РежимыРаботыСЧеком.Оплата Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ВозвратКоррекция Тогда
			ОбнулитьПеременныеСуммОплат();
		КонецЕсли;
		
	Иначе
		ТекущаяСтрока.Цена = ТекущийТоварЦенаИзКарточки;
		ПересчитатьСуммы(ТекущаяСтрока, Истина);
	КонецЕсли;

	РассчитатьСуммуОплатыБонусами();
	ОбновитьИнформациюНаДисплееПокупателя(ТипыОперацийДисплеяПокупателя.ИзменениеЦены);
	ЗакрытьСтраницуСОшибкойЦены();
	
КонецПроцедуры

&НаКлиенте
Процедура УправляемыеСкидкиЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьАвтоматическиеСкидки И СкидкиРассчитаны Тогда
		ОтменитьСкидки(Истина);
	КонецЕсли;
	
	ОбластьДействияСкидки = Неопределено;
	Если ДополнительныеПараметры.Свойство("ОбластьДействия") Тогда
		ОбластьДействияСкидки = ДополнительныеПараметры.ОбластьДействия;
	КонецЕсли;
	ОткрытьВыборУправляемыхСкидок(ОбластьДействияСкидки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВыборУправляемыхСкидок(ОбластьДействияСкидки = Неопределено)
	
	МассивУправляемыхСкидок = ПолучитьМассивУправляемыхСкидок(ОбластьДействияСкидки);
	Если МассивУправляемыхСкидок.Количество() = 1 Тогда
		ОбработатьВыборУправляемыхСкидок(МассивУправляемыхСкидок, Неопределено);
	Иначе
		ИдентификаторТекущейСтроки = "";
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		Если Не ТекущаяСтрока = Неопределено 
			И Не ФормаЗамороженаПослеПробитияЧека() Тогда
			ИдентификаторТекущейСтроки = ТекущаяСтрока.ИдентификаторСтроки;
		КонецЕсли;
		Если ИдентификаторТекущейСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		МассивИдентификаторовВыбранныхСкидок = Новый Массив;
		РучнаяСкидкаДобалвена = Ложь;
		Для Каждого УправляемаяСкидка Из МассивУправляемыхСкидок Цикл
			Если УправляемаяСкидка.ТипСкидки = "Автоматическая" Тогда
				ОтборВыбранныхСкидок = Новый Структура("СкидкаНаценка", УправляемаяСкидка.СкидкаНаценка);
				Если УправляемаяСкидка.ОбластьДействия = "На строку" Тогда
					ОтборВыбранныхСкидок.Вставить("ИдентификаторСтроки", ИдентификаторТекущейСтроки);
				КонецЕсли;
				Если ТаблицаВыбранныхУправляемыхСкидок.НайтиСтроки(ОтборВыбранныхСкидок).Количество() > 0 Тогда				
					МассивИдентификаторовВыбранныхСкидок.Добавить(УправляемаяСкидка.ИдентификаторСкидки);
				КонецЕсли;
			Иначе 
				Если Не РучнаяСкидкаДобалвена
					И УправляемаяСкидка.ОбластьДействия = "На строку"
					И УправляемаяСкидка.ЗначениеСкидки = ТекущийТоварСкидка Тогда
					МассивИдентификаторовВыбранныхСкидок.Добавить(УправляемаяСкидка.ИдентификаторСкидки);
					РучнаяСкидкаДобалвена = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ИспользоватьСерверЛояльностиПолучательДанных", ИспользоватьСерверЛояльностиПолучательДанных);
		ПараметрыОткрытия.Вставить("МассивУправляемыхСкидок", МассивУправляемыхСкидок);
		ПараметрыОткрытия.Вставить("МассивИдентификаторовВыбранныхСкидок", МассивИдентификаторовВыбранныхСкидок);
		
		ДополнительныеПараметры = Новый Структура();
		Если ЗначениеЗаполнено(ОбластьДействияСкидки) Тогда
			ДополнительныеПараметры.Вставить("ОбластьДействия", ОбластьДействияСкидки);
		КонецЕсли;
		ОбработчикОповещенияОткрытияФормыВыбора = Новый ОписаниеОповещения(
		"ОповещениеОткрытьФормуВыбораСкидки", ЭтотОбъект, ДополнительныеПараметры);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		
		ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораСкидки",
						ПараметрыОткрытия, ЭтотОбъект, , , , 
						ОбработчикОповещенияОткрытияФормыВыбора, Режим);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКэшСкидкиНаценки()
	
	МассивСтрокКУдалению = Новый Массив;
	Для Каждого СтрокаКэшаСкидкиНаценки Из ТаблицаСкидкиНаценки Цикл
		
		СтруктураОтбора = Новый Структура("НомерСтроки", СтрокаКэшаСкидкиНаценки.КлючСвязи);
		СтрокиТоваров = Объект.Товары.НайтиСтроки(СтруктураОтбора);
		Если ЗначениеЗаполнено(СтрокиТоваров) Тогда
			Для Каждого СтрокаТоваров Из СтрокиТоваров Цикл
				Если НЕ СтрокаКэшаСкидкиНаценки.ПриВозврате И НЕ СтрокаТоваров.Подарок Тогда
					СтрокаКэшаСкидкиНаценки.Сумма = СтрокаТоваров.СуммаАвтоматическойСкидкиЧекаПродажи / СтрокаТоваров.СуммаБезСкидкиЧекаПродажи * СтрокаТоваров.СуммаБезСкидки;
				КонецЕсли;
			КонецЦикла;
		Иначе
			МассивСтрокКУдалению.Добавить(СтрокаКэшаСкидкиНаценки);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
		ТаблицаСкидкиНаценки.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	МассивСтрокКУдалению = Новый Массив;
	Для Каждого СтрокаКэшаБонусныеБаллы Из ТаблицаБонусныеБаллы Цикл
		
		СтруктураОтбора = Новый Структура("НомерСтроки", СтрокаКэшаБонусныеБаллы.КлючСвязи);
		СтрокиТоваров = Объект.Товары.НайтиСтроки(СтруктураОтбора);
		Если ЗначениеЗаполнено(СтрокиТоваров) Тогда
			Для Каждого СтрокаТоваров Из СтрокиТоваров Цикл
				
				СтруктураОтбораПродажи = Новый Структура("КлючСвязи, СкидкаНаценка, БонуснаяПрограмма");
				ЗаполнитьЗначенияСвойств(СтруктураОтбораПродажи, СтрокаКэшаБонусныеБаллы);
				СтрокиКэшаБонусныеБаллыПродажи = ТаблицаБонусныеБаллыЧекаПродажи.НайтиСтроки(СтруктураОтбораПродажи);
				Для Каждого СтрокаКэшаБонусныеБаллыПродажи Из СтрокиКэшаБонусныеБаллыПродажи Цикл
					СтрокаКэшаБонусныеБаллы.КоличествоБонусныхБаллов = СтрокаКэшаБонусныеБаллыПродажи.КоличествоБонусныхБаллов / СтрокаТоваров.СуммаБезСкидкиЧекаПродажи * СтрокаТоваров.СуммаБезСкидки;
				КонецЦикла;
				
			КонецЦикла;
		Иначе
			МассивСтрокКУдалению.Добавить(СтрокаКэшаБонусныеБаллы);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
		ТаблицаБонусныеБаллы.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПромокод(ИдентификаторСтроки, УдалитьСтрокуТаблицы = Ложь)
	
	Если УдалитьСтрокуТаблицы Тогда
		
		СтруктураОтбора = Новый Структура("УникальныйИдентификатор", ИдентификаторСтроки);
		НайденныеСтроки = ТаблицаПримененныхПромокодов.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаКУдалению Из НайденныеСтроки Цикл
			ТаблицаПримененныхПромокодов.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
	КонецЕсли;
	
	ИмяРеквизита = "ПримененныйПромокод_" + ИдентификаторСтроки;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, ИмяРеквизита) Тогда
		УдаляемыеРеквизиты = Новый Массив;
		УдаляемыеРеквизиты.Добавить(ИмяРеквизита);
		ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	КонецЕсли;
	УдалитьЭлементФормы("ГруппаПримененныеПромокоды_" + ИдентификаторСтроки);
	УдалитьЭлементФормы("ПримененныйПромокод_" + ИдентификаторСтроки);
	УдалитьЭлементФормы("ДекорацияУдалитьПромокод_" + ИдентификаторСтроки);
	КомандаУдалитьПромокод = Команды.Найти("УдалитьПромокод" + ИдентификаторСтроки);
	Если Не КомандаУдалитьПромокод = Неопределено Тогда
		Команды.Удалить(КомандаУдалитьПромокод);
		УдалитьЭлементФормы(КомандаУдалитьПромокод.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьУправляемуюСкидку(ИдентификаторСтроки, УдалитьСтрокуТаблицы = Ложь)
	
	Если УдалитьСтрокуТаблицы Тогда 
		СтрокаУдалить = ТаблицаВыбранныхУправляемыхСкидок.НайтиПоИдентификатору(ИдентификаторСтроки);
		ТаблицаВыбранныхУправляемыхСкидок.Удалить(СтрокаУдалить);
	КонецЕсли;		
	
	ИмяГруппы = "ГруппаПримененныеУправляемыеСкидки_"+ИдентификаторСтроки;
	ИмяКоманды = "КомандаУдалитьУправляемуюСкидку_" + ИдентификаторСтроки;

	УдалитьЭлементФормы(ИмяГруппы);
	УдалитьЭлементФормы(ИмяКоманды);	
	Команда = Команды.Найти(ИмяКоманды);
	Если Не Команда = Неопределено Тогда
		Команды.Удалить(Команда);
	КонецЕсли;
	
	Если Элементы.ГруппаПримененныеУправляемыеСкидки.ПодчиненныеЭлементы.Количество() = 2 Тогда
		Элементы.ГруппаПримененныеУправляемыеСкидки.Видимость = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПромокодВТаблицу()
	
	СтрокаДанныхПромокода = ТаблицаПримененныхПромокодов.Добавить();
	СтрокаДанныхПромокода.Промокод = ВведенныйПромокод;
	СтрокаДанныхПромокода.СкидкаНаценка = СкидкаВведенногоПромокода;
	СтрокаДанныхПромокода.ЭтоАктивацияПромокода = Ложь;
	СтрокаДанныхПромокода.УникальныйИдентификатор = СтрЗаменить(Новый УникальныйИдентификатор, "-", "_");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьСработавшиеПромокодыНаКлиенте()
	ПредъявленныеПромокоды = ТаблицаПримененныхПромокодов.НайтиСтроки(Новый Структура("ЭтоАктивацияПромокода", Ложь));
	Для Каждого СтрокаПромокода Из ПредъявленныеПромокоды Цикл
		Если Не ЗначениеЗаполнено(СтрокаПромокода.УникальныйИдентификатор) Тогда
			Продолжить;
		КонецЕсли;
		ИмяРеквизита  = "ПримененныйПромокод_" + СтрокаПромокода.УникальныйИдентификатор;
		ЦветТекста = ЦветаФормы.НеАктивизированныйПункт;
		ПримененныеСкидки = ТаблицаСкидкиНаценки.НайтиСтроки(Новый Структура("СкидкаНаценка", СтрокаПромокода.СкидкаНаценка));
		Если ПримененныеСкидки.Количество() = 0 И СкидкиРассчитаны Тогда
			ЦветТекста = ЦветаФормы.ОсобыйТекст;
		КонецЕсли;
		Элементы[ИмяРеквизита].ЦветТекста = ЦветТекста;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПрименениеПромокода(Элемент)
	
	ИдентификаторСтроки = СтрЗаменить(Элемент.Имя, "УдалитьПромокод_", "");
	
	РазблокироватьПромокоды(ИдентификаторСтроки);
	ОчиститьДанныеПромокодов(Истина);
	УдалитьПромокод(ИдентификаторСтроки, Истина);
	Если (ПолныйРасчетСкидок ИЛИ РежимПоказаСкидок) И НЕ РаботаВРежимеМедленногоСоединения
		ИЛИ (РежимРаботыСЧеком = РежимыРаботыСЧеком.ПереходКОплате И Не ВопросПоРасчетуСкидок) Тогда
		РассчитатьСкидкиКлиент();
	Иначе
		ТребуетсяПересчетСкидок = Истина;
	КонецЕсли;
	
	НастроитьВидимостьВводаПромокода(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьУправляемуюСкидку(Элемент)
	
	ИдентификаторСтроки = СтрЗаменить(Элемент.Имя, "ДекорацияУдалитьУправляемуюСкидку_", "");
	ИдентификаторСтроки = СтрЗаменить(ИдентификаторСтроки, "ПримененнаяУправляемаяСкидка_", "");
	ИдентификаторСтроки = СтрЗаменить(ИдентификаторСтроки, "КомандаУдалитьУправляемуюСкидку_", "");
	

	УдалитьУправляемуюСкидку(ИдентификаторСтроки, Истина);
	ОтменитьСкидки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОстатки(Команда)
	
	РежимПоказаОстатков = Не РежимПоказаОстатков;
	ТаблицаОстатков.Очистить();
	
	Если РежимПоказаОстатков Тогда
		
		ТекущаяСтрокаТовара = Элементы.Товары.ТекущиеДанные;
		Если ТекущаяСтрокаТовара = Неопределено Тогда
			РежимПоказаОстатков = Не РежимПоказаОстатков;
			Возврат;
		КонецЕсли;
		
		ПараметрыПолученияОстатков = Новый Структура("Номенклатура, Характеристика, Упаковка",
			ТекущаяСтрокаТовара.Номенклатура, ТекущаяСтрокаТовара.Характеристика, ТекущаяСтрокаТовара.Упаковка);
		
		Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
			
			ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаПолучитьОстатки(ПараметрыПодключенияКСерверуЛояльности, ПараметрыПолученияОстатков);
			Результат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
			
			Если Результат.ЕстьОшибки Тогда
				ТекстЗаголовка = НСтр("ru = 'Ошибка получения остатков.'");
				ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, Результат.ТекстОшибки);
				Возврат;
			КонецЕсли;
			
			ДанныеОтвета = Неопределено;
			СтрокаJSON = Результат.ДанныеОтвета;
			СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
			
			Если НЕ ДанныеОтвета = Неопределено Тогда 
				
				Если ДанныеОтвета.Свойство("Error") И НЕ ДанныеОтвета.Error Тогда
					
					Для Каждого Остаток Из ДанныеОтвета.LeftoversList Цикл
						НоваяСтрока = ТаблицаОстатков.Добавить();
						НоваяСтрока.МестоХранения = Остаток.LeftoverLocation;
						НоваяСтрока.Характеристика = Остаток.Variant;
						НоваяСтрока.Остаток = Остаток.Leftover;
						НоваяСтрока.ВРезерве = Остаток.Reserved;
						НоваяСтрока.Свободно = Остаток.FreeLeftover;
					КонецЦикла;
					
				ИначеЕсли ДанныеОтвета.Свойство("Error") И ДанныеОтвета.Error Тогда 
					
					ТекстЗаголовка = НСтр("ru = 'Ошибка получения остатков.'");
					ТекстОшибки = СтрШаблон(НСтр("ru = '%1'"), ДанныеОтвета.ErrorMessage);
					ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
					РежимПоказаОстатков = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьТаблицуОстатковНаСервере(ПараметрыПолученияОстатков);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПереключитьРежимПоказаОстатков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимПоказаОстатков(ПоказатьОстатки = Неопределено)
	АктивныйСлойСлужебнойИнформацииЧека = ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
	Если РежимПоказаСкидок И АктивныйСлойСлужебнойИнформацииЧека = Элементы.ГруппаДанныеПокупателя ИЛИ (НЕ РежимКассыСамообслуживания И РежимВыбораПодарка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПоказатьОстатки = Истина Тогда
		РежимПоказаОстатков = Истина;
	ИначеЕсли ПоказатьОстатки = Ложь Тогда
		РежимПоказаОстатков = Ложь;
	КонецЕсли;
	ЭтоВозвратПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
	ВидимостьКнопокСкидок = ПоказыватьКнопкиСкидок И НЕ (РежимПоказаОстатков ИЛИ ЭтоВозвратПродажи);
	
	Элементы.ПоказатьОстатки.ЦветФона = ?(РежимПоказаОстатков, ЦветаФормы.АктивнаяКнопка, ЦветаФормы.Авто);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаТовары, НЕ РежимПоказаОстатков);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОстатки, РежимПоказаОстатков);
	УстановитьВидимостьЭлементаФормы(Элементы.ПоказатьРассчитанныеСкидки, ВидимостьКнопокСкидок);
	УстановитьВидимостьЭлементаФормы(Элементы.ПоказатьСкидкиНаЧек, ВидимостьКнопокСкидок);
	УстановитьВидимостьЭлементаФормы(Элементы.СуммаСкидкиЗначение, НЕ ВидимостьКнопокСкидок);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуОстатковНаСервере(ПараметрыПолученияОстатков)
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьТаблицуОстатков(ЭтотОбъект, ПараметрыПолученияОстатков);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуРасчетаСкидок(РасчетСкидок, ТекстОшибки)
	
	ПараметрыОшибки = Новый Структура;
	ПараметрыОшибки.Вставить("НеВызыватьЗаменуПрав", Истина);
	ПараметрыОшибки.Вставить("ОшибкаРасчетаСкидок", РасчетСкидок);
	ТекстЗаголовка = НСтр("ru = 'Не удалось рассчитать автоматические скидки.'");
	ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки, ПараметрыОшибки);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьСоединениеССерверомЛояльности(РасчетСкидок = Ложь)

	РезультатФункции = Истина;
	Если НЕ ИспользоватьСерверЛояльностиПолучательДанных
		ИЛИ НЕ ЗначениеЗаполнено(ТорговыйОбъектДляВхода) Тогда
		Возврат РезультатФункции;
	КонецЕсли;
	
	ИспользоватьНовыйАлгоритмЗапросаСЛ = Ложь;
	ИспользоватьЗапросПродажСЛ = Ложь;
	ИспользоватьАвтоматическиеСкидкиПриПродажеПоЗаказу = Ложь;
	ВерсияСервераЛояльности = НСтр("ru = ''");
	ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаИспользоватьАвтоматическиеСкидки(ПараметрыПодключенияКСерверуЛояльности);
	Результат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
	Если Результат.ЕстьОшибки Тогда
		
		РезультатФункции = Ложь;
		ПоказатьОшибкуРасчетаСкидок(РасчетСкидок, Результат.ТекстОшибки);
		
	Иначе
		
		ДанныеОтвета = Неопределено;
		СтрокаJSON = Результат.ДанныеОтвета;
		СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
		
		Если НЕ ДанныеОтвета = Неопределено Тогда 
			
			Если ДанныеОтвета.Свойство("Error") И НЕ ДанныеОтвета.Error Тогда
				
				ИспользоватьАвтоматическиеСкидки = ДанныеОтвета.UseAutomaticDiscounts;
				
				Если ЕстьСвойство(ДанныеОтвета, "UseCounterpartyBonuses") Тогда
					ИспользоватьБонусыКонтрагентов = ДанныеОтвета.UseCounterpartyBonuses;
				КонецЕсли;
			КонецЕсли;
			Если ДанныеОтвета.Свойство("Version") И ЗначениеЗаполнено(ДанныеОтвета.Version) Тогда
				Попытка
					Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ДанныеОтвета.Version, "3.0.5.1") > 0 Тогда
						ИспользоватьНовыйАлгоритмЗапросаСЛ = Истина;
						ИспользоватьЗапросПродажСЛ = Истина; 
						ИспользоватьВидКартыСЛ = Истина;
					КонецЕсли;
				Исключение
					ИспользоватьНовыйАлгоритмЗапросаСЛ = Ложь;
					ИспользоватьЗапросПродажСЛ = Ложь;
					ИспользоватьВидКартыСЛ = Ложь;
				КонецПопытки;
				
				Попытка
					Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ДанныеОтвета.Version, "3.0.6.1") > 0 Тогда
						ИспользоватьАвтоматическиеСкидкиПриПродажеПоЗаказу = Истина;
					КонецЕсли;
				Исключение
					ИспользоватьАвтоматическиеСкидкиПриПродажеПоЗаказу = Ложь;
				КонецПопытки;
				
				Попытка
					Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ДанныеОтвета.Version, "3.0.7.1") > 0 Тогда
						ИспользоватьАлгоритмПоискаПоГУИД = Истина;
						ИспользоватьАвтоматическиеСкидкиПриВозврате = Истина;
					КонецЕсли;
				Исключение
					ИспользоватьАлгоритмПоискаПоГУИД = Ложь;
					ИспользоватьАвтоматическиеСкидкиПриВозврате = Ложь;
				КонецПопытки;
				ВерсияСервераЛояльности = ДанныеОтвета.Version;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатФункции;

КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеКоличестваНеВесовогоТовара(ТекущаяСтрока)
	
	ПересчетКоличестваТовара(ТекущаяСтрока);
	
	ОбщегоНазначенияРМККлиентСервер.ПересчитатьСуммуВСтроке(ЭтотОбъект, ТекущаяСтрока, ,
		ИспользоватьАвтоматическиеСкидки);
	ОбщегоНазначенияРМККлиентСервер.РассчитатьСуммуНДС(Объект, ТекущаяСтрока);
	ОбщегоНазначенияРМККлиентСервер.СуммаДокумента(Объект);
		
	ПересчитатьИтогиТабличнойЧастиТовары();
	ВызватьПолныйАвтоматическийРасчетСкидок();
	РассчитатьСуммуОплатыБонусами();
	
	ОбновитьИнформациюНаДисплееПокупателя(ТипыОперацийДисплеяПокупателя.ИзменениеКоличества);
	
	Если ТекущаяСтрока.ПоштучноеВыбытие Тогда
		ЗаполнитьЧастичноеВыбытиеОстатокПоСтроке(ТекущаяСтрока, Объект.Товары, ИндексКартинкиПоштучноеВыбытие);
		ВывестиПредупреждениеОстаткаЧастичноеВыбытие(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПоказатьРассчитанныеСкидки(Команда)
	
	РежимПоказаСкидок = НЕ РежимПоказаСкидок;
	РежимРасчетаСкидокСтрока = Истина;
	ИзменитьРежимПоказаСкидок();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимПоказаСкидок()
	
	Если ТребуетсяПересчетСкидок
		И РаботаВРежимеМедленногоСоединения Тогда
		ТребуетсяПересчетСкидок = Ложь;
		Если ИспользоватьАвтоматическиеСкидки Тогда
			ЗадатьВопросПоРасчетуСкидок("ПересчитатьСкидкиПриРежимеПоказаСкидок", , Истина);
		КонецЕсли;
	КонецЕсли;
	Если РежимПоказаСкидок И ИспользоватьАвтоматическиеСкидки Тогда
		ПерезаполнитьТаблицуСкидок();
		РежимРасчетаУправляемыхСкидок = ?(РежимРасчетаСкидокСтрока, "На строку", "На документ");
		ЗаполнитьУправляемыеСкидкиВыбор(РежимРасчетаУправляемыхСкидок);
	КонецЕсли;
	ПереключитьРежимНаПоказСкидок();
	Если ТаблицаВыборУправляемыхСкидок.Количество() > 0 И РежимПоказаСкидок Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ТаблицаВыборУправляемыхСкидок;
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьГруппыОперации(Элементы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьТаблицуСкидок()
	ОчиститьТаблицыУправленияСкидок();
	ЗаполнитьАвтоматическиеСкидкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицыУправленияСкидок()
	
	ТаблицаРассчитанныеСкидки.Очистить();
	ЭлементыДерева = ДеревоСкидок.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	ЭлементыПодарки = ДеревоПодарков.ПолучитьЭлементы();
	ЭлементыПодарки.Очистить();
	ЭлементыСкидки = ДеревоДействующихСкидок.ПолучитьЭлементы();
	ЭлементыСкидки.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоматическиеСкидки()
	
	ТекущаяСтрока = Объект.Товары.Получить(ТекущийТоварИндексСтроки);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбщаяСуммаСкидок = 0;
	СтруктураПоискаСкидокНаценок = Новый Структура("ИдентификаторСтроки", ТекущаяСтрока.ИдентификаторСтроки);
	СтруктураПоискаУправляемыеСкидки = Новый Структура("ИдентификаторСкидки");
	ПримененныеСкидки = ТаблицаСкидкиНаценки.НайтиСтроки(СтруктураПоискаСкидокНаценок);
	Для Каждого СтрокаСкидки Из ПримененныеСкидки Цикл
		Если СтрокаСкидки.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(СтрокаСкидки.СкидкаНаценка) = Тип("Строка") Тогда
			СкидкаНаценкаИдентификатор = СтрокаСкидки.СкидкаНаценка;
		Иначе
			СкидкаНаценкаИдентификатор = Строка(СтрокаСкидки.СкидкаНаценка.УникальныйИдентификатор());
		КонецЕсли;
		СтруктураПоискаУправляемыеСкидки.ИдентификаторСкидки = СкидкаНаценкаИдентификатор;
		НоваяСтрока = ТаблицаРассчитанныеСкидки.Добавить();
		СтрокиУправляемыеСкидки = ТаблицаУправляемыхСкидок.НайтиСтроки(СтруктураПоискаУправляемыеСкидки);
		НоваяСтрока.ВалютаСуммы = ПредставлениеВалюты;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСкидки);
		НоваяСтрока.Сумма = - СтрокаСкидки.Сумма;
		НоваяСтрока.ЗначениеСкидкиНаценки = - СтрокаСкидки.ЗначениеСкидкиНаценки;
		СтруктураСкидки = Новый Структура("РучнаяСкидка, УправляемаяСкидка, Подарок", Ложь, СтрокиУправляемыеСкидки.Количество() > 0, Ложь);
		УстановитьКартинкуСкидок(СтруктураСкидки, НоваяСтрока);
		ОбщаяСуммаСкидок = ОбщаяСуммаСкидок + НоваяСтрока.Сумма;
	КонецЦикла;
	
	Если ТекущаяСтрока.ПроцентСкидкиНаценки <> 0 ИЛИ ТекущаяСтрока.СуммаСкидкиНаценки <> 0 Тогда
		НоваяСтрока = ТаблицаРассчитанныеСкидки.Добавить();
		Если ТекущаяСтрока.ПроцентСкидкиНаценки < 0 ИЛИ ТекущаяСтрока.СуммаСкидкиНаценки < 0 Тогда
			НоваяСтрока.Представление = НСтр("ru = 'Ручная наценка'");
		Иначе
			НоваяСтрока.Представление = НСтр("ru = 'Ручная скидка'");
		КонецЕсли;
		НоваяСтрока.Сумма = - ТекущаяСтрока.СуммаСкидкиНаценки;
		НоваяСтрока.ЗначениеСкидкиНаценки = - ТекущаяСтрока.ПроцентСкидкиНаценки;
		СтруктураСкидки = Новый Структура("РучнаяСкидка, УправляемаяСкидка, Подарок", Истина, Ложь, Ложь);
		УстановитьКартинкуСкидок(СтруктураСкидки, НоваяСтрока);
		НоваяСтрока.ВалютаСуммы = ПредставлениеВалюты;
		ОбщаяСуммаСкидок = ОбщаяСуммаСкидок + НоваяСтрока.Сумма;
	КонецЕсли;
	
	Если ТекущаяСтрока.СуммаСкидкиПодарок <> 0 Тогда
		НоваяСтрока = ТаблицаРассчитанныеСкидки.Добавить();
		НоваяСтрока.Представление = НСтр("ru = 'Подарок'");
		НоваяСтрока.Сумма = - ТекущаяСтрока.СуммаСкидкиПодарок;
		НоваяСтрока.ЗначениеСкидкиНаценки = - 1 * (ТекущаяСтрока.СуммаСкидкиПодарок/ТекущаяСтрока.СуммаБезСкидки * 100);
		СтруктураСкидки = Новый Структура("РучнаяСкидка, УправляемаяСкидка, Подарок", Ложь, Ложь, Истина);
		УстановитьКартинкуСкидок(СтруктураСкидки, НоваяСтрока);
		НоваяСтрока.ВалютаСуммы = ПредставлениеВалюты;
		ОбщаяСуммаСкидок = ОбщаяСуммаСкидок + НоваяСтрока.Сумма;
	КонецЕсли;
	
	Если ОбщаяСуммаСкидок <> 0 Тогда
		ЗаголовокТаблицы = НСтр("ru = 'Примененные скидки %1 %2'");
		ЗаголовокТаблицы = СтрШаблон(ЗаголовокТаблицы,ОбщаяСуммаСкидок, ПредставлениеВалюты);
	Иначе
		ЗаголовокТаблицы = НСтр("ru = 'Примененные скидки'");
	КонецЕсли;
	Элементы.ДекорацияЗаголовокПримененныеСкидки.Заголовок = ЗаголовокТаблицы;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоматическиеСкидкиНаСервере()
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если НеобходимоПерезаполнитьТаблицуУправляемыхСкидок Тогда
		ЗаполнитьТаблицуУправляемыхСкидок();
		НеобходимоПерезаполнитьТаблицуУправляемыхСкидок = Ложь;
	КонецЕсли;
	Если РежимРасчетаСкидокСтрока Тогда
		ЗаполнитьАвтоматическиеСкидки();
	Иначе
		ЗаполнитьДеревоАвтоматическихСкидок();
		ЗаполнитьДеревоПодарков();
		ЗаполнитьДеревоДействующихСкидок();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоАвтоматическихСкидок()
	
	ДеревоСкидокОбъект = РеквизитФормыВЗначение("ДеревоСкидок");
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтруктураПоискаСкидокНаценок = Новый Структура("ИдентификаторСтроки", СтрокаТаблицы.ИдентификаторСтроки);
		СтруктураПоискаУправляемыеСкидки = Новый Структура("ИдентификаторСкидки");
		ПримененныеСкидки = ТаблицаСкидкиНаценки.НайтиСтроки(СтруктураПоискаСкидокНаценок);
		
		СтрокаНоменклатура = ДеревоСкидокОбъект.Строки.Добавить();
		СтрокаНоменклатура.НоменклатураПредставление = СтрокаТаблицы.Номенклатура;
		ОбщаяСуммаСкидки = 0;
		Для Каждого СтрокаТаблицыСкидки Из ПримененныеСкидки Цикл
			Если СтрокаТаблицыСкидки.Сумма = 0
				ИЛИ СтрокаТаблицы.Подарок Тогда
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(СтрокаТаблицыСкидки.СкидкаНаценка) = Тип("Строка") Тогда
				СкидкаНаценкаИдентификатор = СтрокаТаблицыСкидки.СкидкаНаценка;
			Иначе
				СкидкаНаценкаИдентификатор = Строка(СтрокаТаблицыСкидки.СкидкаНаценка.УникальныйИдентификатор());
			КонецЕсли;
			СтруктураПоискаУправляемыеСкидки.ИдентификаторСкидки = СкидкаНаценкаИдентификатор;
			СтрокиУправляемыеСкидки = ТаблицаУправляемыхСкидок.НайтиСтроки(СтруктураПоискаУправляемыеСкидки);
			СтрокаСкидки = СтрокаНоменклатура.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСкидки, СтрокаТаблицыСкидки);
			СтрокаСкидки.НоменклатураПредставление = СтрокаТаблицыСкидки.Представление;
			СтрокаСкидки.Сумма = - СтрокаТаблицыСкидки.Сумма;
			СтрокаСкидки.ЗначениеСкидкиНаценки = - СтрокаТаблицыСкидки.ЗначениеСкидкиНаценки;
			СтруктураСкидки = Новый Структура("РучнаяСкидка, УправляемаяСкидка, Подарок", Ложь, СтрокиУправляемыеСкидки.Количество() > 0, Ложь);
			УстановитьКартинкуСкидок(СтруктураСкидки, СтрокаСкидки);
			СтрокаСкидки.ВалютаСуммы = ПредставлениеВалюты;
			СтрокаСкидки.Уровень = 1;
			ОбщаяСуммаСкидки = ОбщаяСуммаСкидки + СтрокаСкидки.Сумма;
		КонецЦикла;
		
		Если СтрокаТаблицы.ПроцентСкидкиНаценки <> 0 
			ИЛИ СтрокаТаблицы.СуммаСкидкиНаценки <> 0 Тогда
			СтрокаСкидки = СтрокаНоменклатура.Строки.Добавить();
			Если СтрокаТаблицы.Подарок Тогда
				СтрокаСкидки.НоменклатураПредставление = НСтр("ru = 'Подарок'");
			ИначеЕсли СтрокаТаблицы.ПроцентСкидкиНаценки < 0 ИЛИ СтрокаТаблицы.СуммаСкидкиНаценки < 0 Тогда
				СтрокаСкидки.НоменклатураПредставление = НСтр("ru = 'Ручная наценка'");
			Иначе
				СтрокаСкидки.НоменклатураПредставление = НСтр("ru = 'Ручная скидка'");
			КонецЕсли;
			СтрокаСкидки.Сумма =  - СтрокаТаблицы.СуммаСкидкиНаценки;
			СтрокаСкидки.ЗначениеСкидкиНаценки = - СтрокаТаблицы.ПроцентСкидкиНаценки;
			СтруктураСкидки = Новый Структура("РучнаяСкидка, УправляемаяСкидка, Подарок", Истина, Ложь, СтрокаТаблицы.Подарок);
			УстановитьКартинкуСкидок(СтруктураСкидки, СтрокаСкидки);
			СтрокаСкидки.ВалютаСуммы = ПредставлениеВалюты;
			СтрокаСкидки.Уровень = 1;
			ОбщаяСуммаСкидки = ОбщаяСуммаСкидки - СтрокаТаблицы.СуммаСкидкиНаценки;
		КонецЕсли;
		
		Если СтрокаТаблицы.СуммаСкидкиПодарок <> 0 Тогда
			СтрокаСкидки = СтрокаНоменклатура.Строки.Добавить();
			СтрокаСкидки.НоменклатураПредставление = НСтр("ru = 'Подарок'");
			СтрокаСкидки.Сумма = - СтрокаТаблицы.СуммаСкидкиПодарок;
			СтрокаСкидки.ЗначениеСкидкиНаценки = - СтрокаТаблицы.СуммаСкидкиПодарок / СтрокаТаблицы.СуммаБезСкидки * 100;
			СтруктураСкидки = Новый Структура("РучнаяСкидка, УправляемаяСкидка, Подарок", Истина, Ложь, Истина);
			УстановитьКартинкуСкидок(СтруктураСкидки, СтрокаСкидки);
			СтрокаСкидки.ВалютаСуммы = ПредставлениеВалюты;
			СтрокаСкидки.Уровень = 1;
			ОбщаяСуммаСкидки = ОбщаяСуммаСкидки + СтрокаСкидки.Сумма;
		КонецЕсли;
		
		Если СтрокаТаблицы.СуммаАвтоматическойСкидки <> 0
			И СтрокаТаблицы.Подарок Тогда
			СтрокаСкидки = СтрокаНоменклатура.Строки.Добавить();
			СтрокаСкидки.НоменклатураПредставление = НСтр("ru = 'Подарок'");
			СтрокаСкидки.Сумма = - СтрокаТаблицы.СуммаАвтоматическойСкидки;
			СтрокаСкидки.ЗначениеСкидкиНаценки = - СтрокаТаблицы.СуммаАвтоматическойСкидки / СтрокаТаблицы.СуммаБезСкидки * 100;
			СтруктураСкидки = Новый Структура("РучнаяСкидка, УправляемаяСкидка, Подарок", Истина, Ложь, Истина);
			УстановитьКартинкуСкидок(СтруктураСкидки, СтрокаСкидки);
			СтрокаСкидки.ВалютаСуммы = ПредставлениеВалюты;
			СтрокаСкидки.Уровень = 1;
			ОбщаяСуммаСкидки = ОбщаяСуммаСкидки + СтрокаСкидки.Сумма;
		КонецЕсли;
		
		СтрокаНоменклатура.Сумма = ОбщаяСуммаСкидки;
		СтрокаНоменклатура.ВалютаСуммы = ПредставлениеВалюты;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоСкидокОбъект, "ДеревоСкидок");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУправляемыеСкидкиВыбор(ОбластьДействияСкидки)
	ТаблицаВыборУправляемыхСкидок.Очистить();
	МассивУправляемыхСкидок = ПолучитьМассивУправляемыхСкидок(ОбластьДействияСкидки);
	СтруктураПоискаВыбранныеСкидки = Новый Структура("ИдентификаторСкидки");
	Для Каждого СтрокаУправляемыеСкидки Из МассивУправляемыхСкидок Цикл
		Если СтрокаУправляемыеСкидки.ЗначениеСкидки = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтруктураПоискаВыбранныеСкидки.ИдентификаторСкидки = СтрокаУправляемыеСкидки.ИдентификаторСкидки;
		СтрокиВыбранныеСкидки = ТаблицаВыбранныхУправляемыхСкидок.НайтиСтроки(СтруктураПоискаВыбранныеСкидки);
		НоваяСтрокаТаблицы = ТаблицаВыборУправляемыхСкидок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы,СтрокаУправляемыеСкидки);
		НоваяСтрокаТаблицы.ТипСкидкиПредставление = СтрШаблон("%1, %2", СтрокаУправляемыеСкидки.ТипСкидки, СтрокаУправляемыеСкидки.ОбластьДействия);
		Если СтрокиВыбранныеСкидки.Количество() > 0 Тогда
			НоваяСтрокаТаблицы.Отметка = Истина;
			НоваяСтрокаТаблицы.ОтметкаКартинка = БиблиотекаКартинок.РМКАктивныйВыбор;
		Иначе
			НоваяСтрокаТаблицы.ОтметкаКартинка = БиблиотекаКартинок.РМКНеактивныйВыбор;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимНаПоказСкидок(ПоказСкидок = Неопределено)

	АктивныйСлойСлужебнойИнформацииЧека = ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
	Если РежимКассыСамообслуживания Тогда
		Возврат;
	ИначеЕсли РежимПоказаСкидок И (АктивныйСлойСлужебнойИнформацииЧека = Элементы.ГруппаДанныеПокупателя ИЛИ РежимВыбораПодарка И НЕ РежимРасчетаСкидокСтрока) Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыборПодарка, ТаблицаПодарков.Количество() > 0);
		ПерезаполнитьТаблицуСкидок();
		Возврат;
	ИначеЕсли ПоказСкидок <> Неопределено Тогда
		РежимПоказаСкидок = ПоказСкидок;
	КонецЕсли;
	
	Если РежимВыбораПодарка И НЕ РежимПоказаСкидок И ПоказСкидок = Неопределено Тогда
		РежимВыбораПодарка = Ложь;
	КонецЕсли;
	
	Если РежимРаботыСЧеком = РежимыРаботыСЧеком.ПереходКОплате Тогда
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, РежимПоказаСкидок);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаДоступныхСкидок, НЕ РежимПоказаСкидок);
		УстановитьДоступностьЭлементаФормы(Элементы.ЭлементыПанелиУстановкиСкидкиНаЧек, Ложь);
	Иначе
		УстановитьДоступностьЭлементаФормы(Элементы.ЭлементыПанелиУстановкиСкидкиНаЧек, Истина);
	КонецЕсли;
	
	ЭтоВозвратПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
	ВидимостьСкидкиСтрока = РежимПоказаСкидок И РежимРасчетаСкидокСтрока И ДопускаетсяПрименениеСкидок;
	ВидимостьСкидкиЧек = РежимПоказаСкидок И НЕ РежимРасчетаСкидокСтрока И ДопускаетсяПрименениеСкидок;
	ВидимостьСкидки = РежимПоказаСкидок И НЕ РежимРасчетаСкидокСтрока;
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСкидки, РежимПоказаСкидок И ИспользоватьАвтоматическиеСкидки);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаРассчитанныеСкидки, РежимРасчетаСкидокСтрока И ИспользоватьАвтоматическиеСкидки);
	
	УстановитьВидимостьОсновныхЭлементовСкидки(ВидимостьСкидкиСтрока, ВидимостьСкидкиЧек, ВидимостьСкидки);
	
	Если НЕ РежимПоказаСкидок Тогда
		НастроитьВидимостьВводаПромокода();
	КонецЕсли;
	
	ЗаголовокПримененныеСкидки = НСтр("ru = 'Примененные скидки и подарки'");
	Элементы.ДекорацияЗаголовокДеревоСкидок.Заголовок = ЗаголовокПримененныеСкидки;
	
	ПеренестиПодсказкиВСкидках();
	АктивироватьСлойГруппПоискВСкидках();
	
	РедактированиеЦены = ?(ПравоИзменятьЦенуРМК, НЕ ЭтоВозвратПродажи ИЛИ ЭтоВозвратБезОснования, Ложь);
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если НЕ ТекущаяСтрока = Неопределено И НЕ РедактированиеЦены Тогда
		ОбщегоНазначенияРМККлиентПереопределяемый.ПереопределитьРазрешениеРедактироватьЦенуДляТекущейСтроки(ЭтотОбъект,
			ТекущаяСтрока, РедактированиеЦены);
	КонецЕсли;

	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаТовары, НЕ РежимПоказаСкидок ИЛИ НЕ ИспользоватьАвтоматическиеСкидки);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаУправлениеТоваром, НЕ РежимПоказаСкидок);
	УстановитьВидимостьКоманднойПанелиСкидки();
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварЦенаИзКарточки, РедактированиеЦены И НЕ РежимПоказаСкидок);
	ПоказДействующихСкидок = Ложь;
	ИзменитьРежимПоказаДействующихСкидок();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыборУправляемыхСкидокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ТекущаяСтрокаТоваров = Объект.Товары.Получить(ТекущийТоварИндексСтроки);
	Если ТекущаяСтрокаТоваров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.Отметка = НЕ ТекущиеДанные.Отметка;
	Если ТекущиеДанные.Отметка Тогда
		ТекущиеДанные.ОтметкаКартинка = БиблиотекаКартинок.РМКАктивныйВыбор;
		ПрименитьУправляемуюСкидку(ТекущиеДанные);
	Иначе
		ТекущиеДанные.ОтметкаКартинка = БиблиотекаКартинок.РМКНеактивныйВыбор;
		ТребуетсяПересчетСкидок = Истина;
		СтруктураПоиска = Новый Структура("СкидкаНаценка", ТекущиеДанные.СкидкаНаценка);
		СтрокиВыбранныеСкидки = ТаблицаВыбранныхУправляемыхСкидок.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаТаблицы Из СтрокиВыбранныеСкидки Цикл
			ТаблицаВыбранныхУправляемыхСкидок.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТребуетсяПересчетСкидок
		И НЕ РаботаВРежимеМедленногоСоединения Тогда
			ТребуетсяПересчетСкидок = Ложь;
			РассчитатьСкидкиКлиент();
	КонецЕсли;
		
КонецПроцедуры


&НаКлиенте
Процедура ПересчитатьСкидкиПриРежимеПоказаСкидок(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		РассчитатьСкидкиКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРассчитанныеСкидкиНаЧек(Команда)
	
	РежимПоказаСкидок = НЕ РежимПоказаСкидок;
	РежимРасчетаСкидокСтрока = Ложь;
	ИзменитьРежимПоказаСкидок();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПересчетСкидок()
	Если РаботаВРежимеМедленногоСоединения Тогда
		ТребуетсяПересчетСкидок = Истина;
		ПерезаполнитьТаблицуСкидок();
	Иначе
		РассчитатьСкидкиКлиент();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеГорячиеКлавиши(ЗаголовокКнопки, Итератор, ТекстКлавиш)
	
	ЗаголовокОбщий = "";
	ТекстКнопки = ЗаголовокКнопки;
	Если НЕ ПустаяСтрока(ТекстКлавиш) Тогда
		УстановитьВидимостьДекорации = Истина;
		ЗаголовокОбщий = ЗаголовокОбщий + ТекстКнопки + " (" + ТекстКлавиш + ")";
	КонецЕсли;
	Если Итератор%2 = 0 Тогда
		ЗаголовокДекорации = Элементы.ДекорацияПравоСкидки.Заголовок;
		Элементы.ДекорацияПравоСкидки.Заголовок = ЗаголовокДекорации + ЗаголовокОбщий + Символы.ПС;
	Иначе
		ЗаголовокДекорации = Элементы.ДекорацияЛевоСкидки.Заголовок;
		Элементы.ДекорацияЛевоСкидки.Заголовок = ЗаголовокДекорации + ЗаголовокОбщий + Символы.ПС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция МассивКомандДляЗаполнения()
	МассивИменКоманд = Новый Массив;
	МассивИменКоманд.Добавить("РассчитатьСкидки");
	МассивИменКоманд.Добавить("ОтменаРасчетаСкидок");
	МассивИменКоманд.Добавить("ПоказатьРассчитанныеСкидки");
	МассивИменКоманд.Добавить("ПоказатьСкидкиНаЧек");
	Возврат МассивИменКоманд;
КонецФункции

&НаКлиенте
Процедура РассчитатьСуммуОплатыБонусамиПредварительная()
	
	Если ЗначениеЗаполнено(КоличествоБонусов) Тогда
		
		СуммаКОплате = СуммаКОплате + СуммаБонусов;
		СуммаИтого = СуммаИтого + СуммаБонусов;
		
		МаксимальнаяСуммаОплатыБонусамиПоЧеку = СуммаИтого * ПроцентОплатыБонусами / 100;
		
		ОсталосьОплатитьЗаТовар = ИнтерфейсРМКСлужебныйКлиент.ПолучитьОставшуюсяСуммуОплатыПоЧеку(ЭтотОбъект);
		СуммаБонусовКРаспределению = Окр(Мин(МаксимальнаяСуммаОплатыБонусамиПоЧеку, БонусыДоступноКОплате), 2);
		СуммаБонусовКРаспределениюСУчетомОплат = СуммаБонусовКРаспределению;
		
		Если ОсталосьОплатитьЗаТовар <> 0 Тогда
			СуммаБонусовКРаспределениюСУчетомОплат = Мин(СуммаБонусовКРаспределению, ОсталосьОплатитьЗаТовар);
		Иначе
			СуммаБонусовКРаспределениюСУчетомОплат = ОсталосьОплатитьЗаТовар;
		КонецЕсли;
		
		СуммаБонусовПредварительная = СуммаБонусовКРаспределениюСУчетомОплат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОтложенныйМетод(ДополнительныеПараметры = Неопределено)
	
	Если ЗначениеЗаполнено(ИмяМетода) Тогда
		
		ОтложенноеОповещение = Новый ОписаниеОповещения(ИмяМетода, ЭтотОбъект, ДополнительныеПараметры);
		ВыполнитьОбработкуОповещения(ОтложенноеОповещение);
		
		ИмяМетода = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПодарков()
	Если ТаблицаПодарков.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ДеревоПодарковОбъект = РеквизитФормыВЗначение("ДеревоПодарков");
	МассивВладельцев = Новый Соответствие;
	Для Каждого СтрокаПодарка Из ТаблицаПодарков Цикл
		Если НЕ СтрокаПодарка.ВыборИзСписка Тогда
			Продолжить;
		КонецЕсли;
		Если МассивВладельцев.Получить(СтрокаПодарка.ВладелецПодарка) = Неопределено Тогда
			МассивВладельцев.Вставить(СтрокаПодарка.ВладелецПодарка, СтрокаПодарка.ПредставлениеВладельца);
		КонецЕсли;
	КонецЦикла;
	
	СтрокаПоискаПоВладельцу = Новый Структура("ВладелецПодарка");
	Для Каждого Элемент Из МассивВладельцев Цикл
		СтрокаПоискаПоВладельцу.ВладелецПодарка = Элемент.Ключ;
		СтрокиПодарков = ТаблицаПодарков.НайтиСтроки(СтрокаПоискаПоВладельцу);
		СтрокаВладелец = ДеревоПодарковОбъект.Строки.Добавить();
		СтрокаВладелец.СкидкаНоменклатура = Элемент.Значение;
		СтрокаВладелец.Уровень = 1;
		Для Каждого СтрокаТаблицы Из СтрокиПодарков Цикл
			СтрокаПодарок = СтрокаВладелец.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПодарок,СтрокаТаблицы);
			СтрокаПодарок.СкидкаНоменклатура = Строка(СтрокаТаблицы.Номенклатура);
			СтрокаПодарок.ОтметкаКартинка = БиблиотекаКартинок.РМКНеактивныйВыбор;
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоПодарковОбъект, "ДеревоПодарков");
КонецПроцедуры

&НаСервере
Процедура ПереместитьПодсказки(ПеремещениеПоУсловию)
	Если ПеремещениеПоУсловию Тогда
		Элементы.Переместить(Элементы.ДекорацияПравоСкидки,Элементы.ГруппаПодсказкаГорячиеКлавиши);
		Элементы.Переместить(Элементы.ДекорацияЛевоСкидки,Элементы.ГруппаПодсказкаГорячиеКлавиши);
	Иначе
		Если РежимРасчетаСкидокСтрока Тогда
			Элементы.Переместить(Элементы.ДекорацияПравоСкидки,Элементы.ГруппаГорячиеКлавишиСтрока);
		Иначе
			Элементы.Переместить(Элементы.ДекорацияПравоСкидки,Элементы.ГруппаГорячиеКлавишиДерево);
		КонецЕсли;
		Элементы.Переместить(Элементы.ДекорацияЛевоСкидки,Элементы.ГруппаГорячиеКлавишиСкидки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоДействующихСкидок()
	
	ДеревоДействующихСкидокОбъект = РеквизитФормыВЗначение("ДеревоДействующихСкидок");
	
	СтрокаПримененныеСкидки = ДеревоДействующихСкидокОбъект.Строки.Добавить();
	СтрокаПримененныеСкидки.СкидкаНаценкаПредставление = НСтр("ru = 'Примененные скидки'");
	СтрокаПримененныеСкидки.Уровень = 1;
	СтрокаДействующиеСкидки = ДеревоДействующихСкидокОбъект.Строки.Добавить();
	СтрокаДействующиеСкидки.СкидкаНаценкаПредставление =  НСтр("ru = 'Доступные скидки'");
	СтрокаДействующиеСкидки.Уровень = 1;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДействующихСкидок Цикл
		СтрокаГруппировки = ДеревоДействующихСкидокОбъект.Строки.Найти(СтрокаТаблицы.Родитель, "СкидкаНаценка", Истина);
		Если СтрокаТаблицы.КоличествоВыполненныхУсловий > 0 Тогда
			СтрокаДерева = СтрокаПримененныеСкидки.Строки.Добавить();
		ИначеЕсли СтрокаГруппировки = Неопределено Тогда
			СтрокаДерева = СтрокаДействующиеСкидки.Строки.Добавить();
		Иначе
			СтрокаДерева = СтрокаГруппировки.Строки.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);
		Если СтрокаТаблицы.ЭтоГруппа Тогда
			СтрокаДерева.КартинкаОбозначение = БиблиотекаКартинок.Папка;
		КонецЕсли;
		МассивУсловий = Новый Массив;
		МассивУсловий = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаТаблицы.УсловияПредоставления,Символы.ПС,Истина);
		Для Каждого СтрокаУсловий Из МассивУсловий Цикл
			СтрокаУсловийДерево = СтрокаДерева.Строки.Добавить();
			СтрокаУсловийДерево.СкидкаНаценкаПредставление = СтрокаУсловий;
			СтрокаУсловийДерево.Уровень = 2;
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоДействующихСкидокОбъект, "ДеревоДействующихСкидок");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДействующиеСкидки(Команда)
	
	ПоказДействующихСкидок = НЕ ПоказДействующихСкидок;
	ИзменитьРежимПоказаДействующихСкидок();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимПоказаДействующихСкидок()
	
	Если ПоказДействующихСкидок Тогда
		Элементы.СтраницыУправленияСкидками.ТекущаяСтраница = Элементы.СтраницаДействующихСкидок;
	Иначе
		Элементы.СтраницыУправленияСкидками.ТекущаяСтраница = Элементы.СтраницаПримененныхСкидок;
	КонецЕсли;
	
	Элементы.ПоказатьДействующиеСкидки.ЦветФона = ?(ПоказДействующихСкидок, ЦветаФормы.АктивнаяКнопка, ЦветаФормы.Авто);
	УстановитьВидимостьЭлементаФормы(Элементы.ПечатьСкидок, ПоказДействующихСкидок);
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСкидок(Команда) 
	
	ТабличныйДокументДеревоСкидок = ПечатьСкидокНаСервере();
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ПереданныйТабличныйДокумент", ТабличныйДокументДеревоСкидок);
	ПараметрыОткрытия.Вставить("ПредставлениеОтчета", НСтр("ru = 'Действующие скидки'"));
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаПечатногоДокумента", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
КонецПроцедуры

&НаСервере
Функция ПечатьСкидокНаСервере()
	
	ТабличныйДокументДеревоСкидок = Новый ТабличныйДокумент;
	Макет = ПолучитьОбщийМакет("ПФ_MXL_ДеревоСкидок");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("СкидкаНаценкаПредставление");
	Дерево.Колонки.Добавить("СкидкаНаценка");
	Дерево.Колонки.Добавить("ЗначениеСкидкиНаценки");
	Дерево.Колонки.Добавить("Родитель");
	Дерево.Колонки.Добавить("ЭтоГруппа");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДействующихСкидок Цикл
		СтрокаГруппировки = Дерево.Строки.Найти(СтрокаТаблицы.Родитель, "СкидкаНаценка", Истина);
		Если СтрокаГруппировки = Неопределено Тогда
			СтрокаДерева = Дерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);
		Иначе
			СтрокаДерева = СтрокаГруппировки.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);
		КонецЕсли;
		
		МассивУсловий = Новый Массив;
		МассивУсловий = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаТаблицы.УсловияПредоставления,Символы.ПС,Истина);
		Для Каждого СтрокаУсловий Из МассивУсловий Цикл
			СтрокаУсловийДерево = СтрокаДерева.Строки.Добавить();
			СтрокаУсловийДерево.СкидкаНаценкаПредставление = СтрокаУсловий;
		КонецЦикла;
		
	КонецЦикла;
	
	ТабличныйДокументДеревоСкидок.Вывести(ОбластьШапка);
	ВывестиДеревоВТабличныйДокумент(Дерево, ТабличныйДокументДеревоСкидок, ОбластьСтрока);
	Возврат ТабличныйДокументДеревоСкидок;
	
КонецФункции

&НаСервере
Процедура ВывестиДеревоВТабличныйДокумент(Дерево, ТабличныйДокумент, ОбластьСтрока)
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		
		ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, СтрокаДерева);
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда 
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			ТабличныйДокумент.НачатьГруппуСтрок();
			ВывестиДеревоВТабличныйДокумент(СтрокаДерева, ТабличныйДокумент, ОбластьСтрока);
			ТабличныйДокумент.ЗакончитьГруппуСтрок();
		Иначе
			ТабличныйДокумент.Вывести(ОбластьСтрока);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкуСкидок(СтруктураСкидки, СтрокаСкидки)
	Если СтруктураСкидки.РучнаяСкидка Тогда
		Если СтруктураСкидки.Подарок Тогда
			СтрокаСкидки.ОбозначениеСкидки = БиблиотекаКартинок.РМКОбозначениеПодарок;
		ИначеЕсли СтрокаСкидки.ЗначениеСкидкиНаценки <= 0 И СтрокаСкидки.Сумма <= 0 Тогда
			СтрокаСкидки.ОбозначениеСкидки = БиблиотекаКартинок.РМКОбозначениеРучныеСкидки;
		Иначе
			СтрокаСкидки.ОбозначениеСкидки = БиблиотекаКартинок.РМКОбозначениеРучныеНаценки;
		КонецЕсли;
	ИначеЕсли СтруктураСкидки.УправляемаяСкидка Тогда
		Если СтрокаСкидки.ЗначениеСкидкиНаценки <= 0 И СтрокаСкидки.Сумма <= 0 Тогда
			СтрокаСкидки.ОбозначениеСкидки = БиблиотекаКартинок.РМКОбозначениеУправляемыеСкидки;
		Иначе
			СтрокаСкидки.ОбозначениеСкидки = БиблиотекаКартинок.РМКОбозначениеУправляемыеНаценки;
		КонецЕсли;
	Иначе
		Если СтрокаСкидки.ЗначениеСкидкиНаценки <= 0 И СтрокаСкидки.Сумма <= 0 Тогда
			СтрокаСкидки.ОбозначениеСкидки = БиблиотекаКартинок.РМКОбозначениеАвтоматическиеСкидки;
		Иначе
			СтрокаСкидки.ОбозначениеСкидки = БиблиотекаКартинок.РМКОбозначениеАвтоматическиеНаценки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьОсновныхЭлементовСкидки(ВидимостьСкидкиСтрока, ВидимостьСкидкиЧек, ВидимостьСкидки)
	УстановитьВидимостьЭлементаФормы(Элементы.ПоказатьСкидкиНаЧек, ПоказыватьКнопкиСкидок);
	УстановитьВидимостьЭлементаФормы(Элементы.СуммаСкидкиЗначение, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ПоказатьРассчитанныеСкидки, ПоказыватьКнопкиСкидок);
	ЭтоВозвратПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
	Если РежимПоказаСкидок И РежимРасчетаСкидокСтрока Тогда
		Элементы.ПоказатьРассчитанныеСкидки.ЦветФона = ЦветаФормы.АктивнаяКнопка;
		Элементы.ПоказатьСкидкиНаЧек.ЦветФона = ЦветаФормы.Авто;
		УстановитьВидимостьЭлементаФормы(Элементы.ПоказатьСкидкиНаЧек, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.СуммаСкидкиЗначение, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ПоказатьРассчитанныеСкидки, ПоказыватьКнопкиСкидок);
	ИначеЕсли РежимПоказаСкидок И НЕ РежимРасчетаСкидокСтрока Тогда
		Элементы.ПоказатьРассчитанныеСкидки.ЦветФона = ЦветаФормы.Авто;
		Элементы.ПоказатьСкидкиНаЧек.ЦветФона = ЦветаФормы.АктивнаяКнопка;
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.ГруппаСкидкиНаЧек);
	Иначе
		Элементы.ПоказатьРассчитанныеСкидки.ЦветФона = ЦветаФормы.Авто;
		Элементы.ПоказатьСкидкиНаЧек.ЦветФона = ЦветаФормы.Авто;
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.ГруппаРедактированияСтрокиКорзины);
	КонецЕсли;
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаРучнаяСкидкаНаТовар, ВидимостьСкидкиСтрока);
	УстановитьВидимостьЭлементаФормы(Элементы.ЭлементыПанелиУстановкиСкидкиНаЧек, ВидимостьСкидкиЧек);
	УстановитьВидимостьЭлементаФормы(Элементы.ПоказатьДействующиеСкидки, ВидимостьСкидки);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаДеревоРассчитанныхСкидок, ВидимостьСкидки И ИспользоватьАвтоматическиеСкидки);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыборУправляемыхСкидок, РежимПоказаСкидок И ТаблицаВыборУправляемыхСкидок.Количество() > 0);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыборПодарка, ВидимостьСкидки И ТаблицаПодарков.Количество() > 0);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаДанныеДляТекущейСтроки, НЕ РежимПоказаСкидок);
	
	УстановитьВидимостьПромокодов(ВидимостьСкидки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКоманднойПанелиСкидки()
	ВидимостьСкидокНЕРежимПлитки = НЕ РежимПоказаСкидок И НЕ РежимПлитки;
	УстановитьДоступностьЭлементаФормы(Элементы.ПанельИзбранныхТоваров, НЕ РежимПоказаСкидок И ИспользоватьПанельИзбранныхТоваров);
	УстановитьВидимостьЭлементаФормы(Элементы.ПодгруппаОперации1,ВидимостьСкидокНЕРежимПлитки);
	УстановитьВидимостьЭлементаФормы(Элементы.ПодгруппаОперации3, ВидимостьСкидокНЕРежимПлитки);
	
	ФормаПлиточногоИнтерфейсаДоступна = ЗначениеЗаполнено(СтруктураПлиточногоИнтерфейсаПодбора);
	УстановитьВидимостьЭлементаФормы(Элементы.ОткрытьПлиточныйИнтерфейсКаталога,НЕ РежимПоказаСкидок И ФормаПлиточногоИнтерфейсаДоступна);
	ИспользоватьВводПоСтроке = НЕ РежимПоказаСкидок И ИспользоватьБыстроеДобавлениеТовара И Не РежимКассыСамообслуживания;
	УстановитьВидимостьЭлементаФормы(Элементы.ВводТовараПоСтроке, ИспользоватьВводПоСтроке);
	УстановитьВидимостьЭлементаФормы(Элементы.Каталог, НЕ РежимПоказаСкидок);
	УстановитьВидимостьЭлементаФормы(Элементы.ДобавитьПакет, НЕ РежимПоказаСкидок И НЕ ДанныеПакета = Неопределено);
	УстановитьВидимостьЭлементаФормы(Элементы.НайтиВЧеке, НЕ РежимПоказаСкидок ИЛИ НЕ РежимРасчетаСкидокСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПодсказкиВСкидках()
	ВидимостьСкидки = РежимПоказаСкидок И НЕ РежимРасчетаСкидокСтрока;
	УсловиеВыполнено = Ложь;
	Если ТаблицаВыборУправляемыхСкидок.Количество() = 0 И ТаблицаПодарков.Количество() > 0 И ВидимостьСкидки Тогда
		Элементы.ДеревоПодарков.АвтоМаксимальнаяВысота = Истина;
	ИначеЕсли ТаблицаВыборУправляемыхСкидок.Количество() > 0 И ТаблицаПодарков.Количество() > 0 И ВидимостьСкидки Тогда
		Элементы.ДеревоПодарков.АвтоМаксимальнаяВысота = Ложь;
	ИначеЕсли ТаблицаВыборУправляемыхСкидок.Количество() = 0 И ТаблицаПодарков.Количество() = 0 И РежимПоказаСкидок Тогда
		УсловиеВыполнено = Истина;
	КонецЕсли;
	Если РежимПоказаСкидок Тогда
		ПереместитьПодсказки(УсловиеВыполнено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьСлойГруппПоискВСкидках()
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
		= Элементы.ГруппаНайтиВЧеке И НЕ РежимПоказаСкидок Тогда
		
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево,(Не ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатой(ЭтотОбъект)));
		ПредыдущийСлой = Элементы.ОбластьОперативногоУправленияЧеком;
		Если Не (ПредыдущийСлойДоДанныхПокупателя = Неопределено
			Или ПредыдущийСлойДоДанныхПокупателя = Элементы.ГруппаНайтиВЧеке) Тогда
			
			ПредыдущийСлой = ПредыдущийСлойДоДанныхПокупателя;
			
		КонецЕсли;
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, ПредыдущийСлой);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьУправляемуюСкидку(ТекущиеДанные)
	ТекущаяСтрокаТоваров = Объект.Товары.Получить(ТекущийТоварИндексСтроки);
	Если ТекущиеДанные.ТипСкидки = "Ручная" Тогда
		Если ИспользоватьАвтоматическиеСкидки И СкидкиРассчитаны Тогда
			ОтменитьСкидки(Ложь);
		КонецЕсли;
		ТекущиеДанные.Отметка = Ложь;
		ТекущиеДанные.ОтметкаКартинка = БиблиотекаКартинок.РМКНеактивныйВыбор;
		Позиции = Объект.Товары;
		ЗначениеВыбраннойРучнойСкидки = ТекущиеДанные.ЗначениеСкидки;
		Если ТекущиеДанные.ОбластьДействия = "На строку" Тогда
			ПрименитьУправляемуюСкидкуНаСтроку(ЗначениеВыбраннойРучнойСкидки);
		Иначе
			ЗначениеСкидкиНаЧек = ЗначениеВыбраннойРучнойСкидки;
			РассчитатьРучнуюСкидкуПроцентомНаПозиции(Позиции, ЗначениеВыбраннойРучнойСкидки);
		КонецЕсли;
		ТребуетсяПересчетСкидок = Истина;
	Иначе
		ТребуетсяПересчетСкидок = Истина;
		НоваяСтрока = ТаблицаВыбранныхУправляемыхСкидок.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ТекущаяСтрокаТоваров.ИдентификаторСтроки;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьУправляемуюСкидкуНаСтроку(ЗначениеВыбраннойРучнойСкидки)
	ТекущаяСтрокаТоваров = Объект.Товары.Получить(ТекущийТоварИндексСтроки);
	Если ЭтоСоставляющаяНабора(ТекущаяСтрокаТоваров) Тогда
		
		СоставНабора = СоставНабораПоЭлементуНабора(ТекущаяСтрокаТоваров, Объект.Товары);
		
		Если СоставНабора.Количество() = Объект.Товары.Количество() Тогда
			Позиции = Объект.Товары;
		Иначе
			Позиции = СоставНабора;
		КонецЕсли;
		ТекущийТоварСкидка = ЗначениеВыбраннойРучнойСкидки;
		РассчитатьРучнуюСкидкуПроцентомНаПозиции(Позиции, ЗначениеВыбраннойРучнойСкидки);
	Иначе
		ТекущийТоварСкидка = ЗначениеВыбраннойРучнойСкидки;
		ЗначениеСкидкиНаСтроку = ЗначениеВыбраннойРучнойСкидки;
		ТекущаяСтрокаТоваров.РассчитанаСкидка = Ложь;
		РучнаяСкидкаПроцентомПоСтроке(ТекущаяСтрокаТоваров);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатПолученияВидовКарт(ДанныеОтвета)
	Для каждого СтрокаМассива Из ДанныеОтвета Цикл
		Элементы.НоваяКартаВидКарты.СписокВыбора.Добавить(СтрокаМассива.Идентификатор, СтрокаМассива.Наименование);
	КонецЦикла;
	
	Если ТаблицаВидыКарт.Количество() = 1 Тогда
		ДанныеВидаКарты = ТаблицаВидыКарт[0];
		НоваяКартаВидКарты = ДанныеВидаКарты.Идентификатор;
		ПроверкаЗаполненностиНомера = (ДанныеВидаКарты.ГенерироватьНомер ИЛИ ДанныеВидаКарты.ПрисваиватьНомерКартыКНомеруТелефона)
			И ДанныеВидаКарты.ЭтоИменнаяКарта;
		Элементы.НоваяКартаФИО.АвтоОтметкаНезаполненного = ДанныеВидаКарты.ЭтоИменнаяКарта;
		Элементы.НоваяКартаТелефон.АвтоОтметкаНезаполненного = ДанныеВидаКарты.ЭтоИменнаяКарта ИЛИ ОтправлятьSMSКодПриЗаведенииКарты;
		Элементы.НоваяКартаНомер.АвтоОтметкаНезаполненного = НЕ ПроверкаЗаполненностиНомера;
		УстановитьДоступностьЭлементаФормы(Элементы.НоваяКартаНомер, Истина);
		Если НЕ ДанныеВидаКарты.ЭтоИменнаяКарта Тогда
			Элементы.НоваяКартаФИО.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		Если НЕ (ДанныеВидаКарты.ЭтоИменнаяКарта ИЛИ ОтправлятьSMSКодПриЗаведенииКарты) Тогда
			Элементы.НоваяКартаТелефон.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
		Если ПроверкаЗаполненностиНомера Тогда
			Элементы.НоваяКартаНомер.ОтметкаНезаполненного = Ложь;
			Если ДанныеВидаКарты.ПрисваиватьНомерКартыКНомеруТелефона Тогда
				Элементы.НоваяКартаНомер.ПодсказкаВвода = НСтр("ru = 'Номер телефона'");
				УстановитьДоступностьЭлементаФормы(Элементы.НоваяКартаНомер, Ложь);
			Иначе
				Если ПустаяСтрока(ДанныеВидаКарты.ПредставлениеШаблона) Тогда
					Элементы.НоваяКартаНомер.ПодсказкаВвода = НСтр("ru = 'Сгенерированный номер'");
				Иначе
					Элементы.НоваяКартаНомер.ПодсказкаВвода = ДанныеВидаКарты.ПредставлениеШаблона;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Элементы.НоваяКартаНомер.ПодсказкаВвода = НСтр("ru = 'Номер карты'");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСогласияНаОбработкуПД(Команда) 
	
	ТабличныйДокументСогласиеПД = ПолучитьТабличныйДокументСогласияПДНаСервере();
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ПереданныйТабличныйДокумент", ТабличныйДокументСогласиеПД);
	ПараметрыОткрытия.Вставить("ПредставлениеДокумента", НСтр("ru = 'Согласие на обработку персональных данных'"));
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаПечатногоДокумента", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере 
Функция ПолучитьТабличныйДокументСогласияПДНаСервере()
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ДанныеПокупателя = Новый Структура();
	ДанныеПокупателя.Вставить("Организация", Объект.Организация);
	ДанныеПокупателя.Вставить("Ответственный", Объект.ПользовательБД);
	ДанныеПокупателя.Вставить("ФИО", НоваяКартаФИО);
	ДанныеПокупателя.Вставить("Телефон", НоваяКартаТелефон);
	ДанныеПокупателя.Вставить("Почта", НоваяКартаПочта);
	ДанныеПокупателя.Вставить("ДатаРождения", НоваяКартаДатаРождения);
	ОбщегоНазначенияРМКПереопределяемый.СформироватьТабличныйДокументСогласияНаОбработкуПерсональныхДанных(ТабличныйДокумент, ДанныеПокупателя);
	Возврат ТабличныйДокумент;
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуСкидокЗависящихОтВидаОплаты()
	
	ТаблицаСкидокЗависяшихОтВидаОплаты.Очистить();
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		ПараметрыПодключения = ОбщегоНазначенияРМК.ЗначенияПараметровСервераЛояльности(ТекущаяНастройкаРМК);
		ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаПолучитьТаблицуСкидокЗависящихОтВидаОплтаы(ПараметрыПодключения,);
		СтруктураРезультат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
		
		Если СтруктураРезультат.Свойство("ЕстьОшибки") И НЕ СтруктураРезультат.ЕстьОшибки Тогда
			СтрокаJSON = СтруктураРезультат.ДанныеОтвета;
			ДанныеОтвета = Неопределено;
			Если СтрокаJSON <> Неопределено Тогда
				СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
				Если ДанныеОтвета <> Неопределено И ТипЗнч(ДанныеОтвета) = Тип("Массив") Тогда
					ОписаниеТипаСкидкаНаценка = Метаданные.ОпределяемыеТипы.СкидкаНаценкаРМК.Тип;
					ОписаниеТипаВидыОплат = Метаданные.ОпределяемыеТипы.ВидыОплатРМК.Тип;
					ТипДанныхВидОплаты = ОписаниеТипаВидыОплат.Типы()[0];
					Для каждого СтрокаМассива Из ДанныеОтвета Цикл
						СтрокаСкидки = ТаблицаСкидокЗависяшихОтВидаОплаты.Добавить();
						СтрокаСкидки.СкидкаНаценка = СтрокаМассива.DiscountID;
						Если НЕ ЗначениеЗаполнено(СтрокаСкидки.СкидкаНаценка) Тогда
							СтрокаСкидки.СкидкаНаценка = ОбщегоНазначенияРМК.ПолучитьДесериализованноеСсылочноеЗначение(СтрокаМассива, "DiscountID", ОписаниеТипаСкидкаНаценка);
						КонецЕсли;
						СтрокаСкидки.ВидОплаты = XMLЗначение(ТипДанныхВидОплаты, СтрокаМассива.PayType);							
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьТаблицуСкидокЗависящихОтВидаОплаты(ТаблицаСкидокЗависяшихОтВидаОплаты);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодаркиНаВыборВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ТекущийВладелецПодарка = ТекущиеДанные.ВладелецПодарка;
	ОбработатьВыдачуПодарка(ТекущиеДанные);
	Если СуммаПодарковКРаспределению <> 0 Тогда
		РаспределитьСуммуПодарка();
	КонецЕсли;
	Если РежимВыбораПодарка Тогда
		ОчиститьПодаркиПоТекущемуВладельцу(Истина);
		ПодключитьОбработчикОжидания("ОткрытьФормуВыбораПодарков", 0.1, Истина);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммыТаблицыТоваров(ОбнулитьСуммыОплат = Ложь)
	
	Для Каждого СтрокаТовар Из Объект.Товары Цикл
		ПересчитатьСуммы(СтрокаТовар, ОбнулитьСуммыОплат);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаКартойЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатОперации = Истина;
	ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьВыбранныйВидОплаты(ЭтотОбъект, ДополнительныеПараметры.Имя);
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИмяМетода = "ОплатаКартойНаКлиенте";
		РассчитатьСкидкиКлиент();
	Иначе
		РезультатОперации = ОплатаКартойНаКлиенте();
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("РезультатОперации", РезультатОперации);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыВидовКарт(ЗначенияПараметровМетода)
	ЗначенияПараметровМетода.Store = СерверЛояльностиПолучательДанныхКлиентСервер.ПолучитьСтруктуруСсылки(Объект.ТорговыйОбъект).Ref;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыВидовКартЛокально(ПараметрыВидовКарт)
	ПараметрыВидовКарт.Вставить("Магазин", Объект.ТорговыйОбъект.УникальныйИдентификатор());
КонецПроцедуры

&НаСервере
Процедура ПеренестиЭлементыГруппыОтправитьЧек()
	
	Если НЕ ИспользоватьДисконтныеКарты Тогда
		Элементы.Переместить(Элементы.ГруппаОтправкаЧекаПочта, Элементы.ГруппаОтправкаЧекаСводно);
		Элементы.Переместить(Элементы.ГруппаОтправкаЧекаТелефон, Элементы.ГруппаОтправкаЧекаСводно);
		Элементы.Переместить(Элементы.ГруппаЧекЛес, Элементы.ГруппаОтправкаЧекаСводно);
		УстановитьВидимостьЭлементаФормы(Элементы.ВыбратьКонтрагента, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыборМеню, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКомандыОплаты()
	Если ИспользоватьДисконтныеКарты Тогда
		Возврат;
	КонецЕсли;
	ЗаполненаКонтактнаяИнформация = ИнтерфейсРМКСлужебныйКлиент.ЗаполненаКонтактнаяИнформацияДляОтправкиЧека(ЭтотОбъект);
	ДоступностьКомандПереходаКОплате = ХочуБумажныйЧек ИЛИ ЗаполненаКонтактнаяИнформация;
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКомандПереходаКОплате, ДоступностьКомандПереходаКОплате);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаQRCode, ДоступностьКомандПереходаКОплате);
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаголовокКнопокРассчитатьСкидки()
	ЗаголовокКнопок = НСтр("ru= 'Рассчитать'") + Символы.ПС + НСтр("ru= 'скидки'");
	Если СкидкиРассчитаны Тогда
		ЗаголовокКнопок = НСтр("ru= 'Пересчитать'") + Символы.ПС + НСтр("ru= 'скидки'");
	КонецЕсли;
	Элементы.РассчитатьСкидки.Заголовок = ЗаголовокКнопок;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПромокодов(ВидимостьСкидки)
	ВидимостьПромокода = ИспользоватьПромокоды И (ВидимостьСкидки ИЛИ РежимКассыСамообслуживания);
	ЭтоВозвратПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПромокоды, ВидимостьПромокода);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаДобавитьПромокод, ВидимостьПромокода И НЕ ЭтоВозвратПродажи);	
КонецПроцедуры

#КонецОбласти

#Область ДисплейПокупателя

&НаКлиенте
Функция БуферОбменаДисплеяПокупателя()
	
	Результат = Новый Структура();
	Результат.Вставить("ТоварНаименование");
	Результат.Вставить("ТоварЦена");
	Результат.Вставить("ТоварКоличество");
	Результат.Вставить("ТоварСумма");
	Результат.Вставить("ТоварСкидка");
	Результат.Вставить("СуммаИтого", 0);
	Результат.Вставить("СуммаСкидки", 0);
	Результат.Вставить("Сдача", 0);
	Результат.Вставить("Оплата", 0);
	Результат.Вставить("Информация");
	Результат.Вставить("Весовой");
	Результат.Вставить("ЧекФискализации");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателя(Операция, ТекстОшибки = "")
	
	Если Не ИспользоватьПодключаемоеОборудование Тогда
		Возврат;
	КонецЕсли;
	
	ИсходныеДанные = МенеджерОборудованияРМККлиент.ИсходныеДанныеДляПервичнойПередачиНаДисплейПокупателя();
	ИсходныеДанные.ОповещениеПриЗавершении = Новый ОписаниеОповещения("ВывестиИнформациюНаДисплейПокупателяЗавершение", ЭтотОбъект);
	ИсходныеДанные.ИспользоватьПодключаемоеОборудование = ИспользоватьПодключаемоеОборудование;
	ИсходныеДанные.ДанныеДляОтображения = ДанныеКПередачеВДисплейПокупателя;
	ИсходныеДанные.Операция = Операция;
	ИсходныеДанные.СуммаСкидки = СуммаСкидки;
	ИсходныеДанные.СуммаИтого = СуммаИтого;
	ИсходныеДанные.Организация = Объект.Организация;
	ИсходныеДанные.ТекстОшибки = ТекстОшибки;
	МенеджерОборудованияРМККлиент.ВывестиИнформациюНаДисплейПокупателя(Операция, ИсходныеДанные, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюНаДисплееПокупателя(Операция, ОтображатьТолькоИтоги = Ложь)
	
	Если Не ИспользоватьПодключаемоеОборудование Тогда
		Возврат;
	КонецЕсли;
	
	Если Операция = ТипыОперацийДисплеяПокупателя.ДобавлениеТовара ИЛИ Операция = ТипыОперацийДисплеяПокупателя.ИзменениеЦены Тогда
		
		Элементы.Товары.ТекущаяСтрока = ТекущийТоварИдентификатор;
		ДобавленаНоваяСтрокаКорзины = Ложь;
		
	КонецЕсли;
	
	ИсходныеДанные = МенеджерОборудованияРМККлиент.ИсходныеДанныеДляОбновленияДанныхНаДисплееПокупателя();
	ИсходныеДанные.ОповещениеПриЗавершении = Новый ОписаниеОповещения("ВывестиИнформациюНаДисплейПокупателяЗавершение", ЭтотОбъект);
	ИсходныеДанные.ИспользоватьПодключаемоеОборудование	= ИспользоватьПодключаемоеОборудование;
	ИсходныеДанные.ДанныеДляОтображения = ДанныеКПередачеВДисплейПокупателя;
	ИсходныеДанные.Операция = Операция;
	ИсходныеДанные.ОтображатьТолькоИтоги = ОтображатьТолькоИтоги;
	ИсходныеДанные.ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ИсходныеДанные.Товары = Объект.Товары;
	ИсходныеДанные.СуммаСкидки = СуммаСкидки;
	ИсходныеДанные.СуммаИтого = СуммаИтого;
	МенеджерОборудованияРМККлиент.ОбновитьДанныеНаДисплееПокупателя(Операция, ИсходныеДанные, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПростояДисплеяПокупателя()
	
	Если НЕ Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() <= 0 Тогда
		ВывестиИнформациюНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.НачалоРаботы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыводаОжиданияОплатыНаДисплейПокупателя()
	
	ОбработкаПростояДисплеяПокупателя();
	
	Если ЭтотОбъект.Открыта() И Объект.Товары.Количество() > 0 Тогда
		ВывестиИнформациюНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.ОжиданиеОплаты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибкуПроверкиМарки(Контекст, СтраницаДиалога)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если ТекущаяОперация = "" И РежимКассыСамообслуживания Тогда
		
		НеобходимоеПраво = "ПравоРучноеПодтверждениеМаркиРМК";
		ТекущаяОперация = "РучноеПодтверждениеМаркиРМК";
		
		ПараметрыТекущейОперации = Новый Структура;
		ПараметрыТекущейОперации.Вставить("Контекст", Контекст);
		ПараметрыТекущейОперации.Вставить("СтраницаДиалога", СтраницаДиалога.Имя);
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
		Возврат;
		
	КонецЕсли;
	
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПодтвержденияКонтрольнойМарки);
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы[СтраницаДиалога.Имя]);
	ТекущийЭлемент = Элементы.ПродолжитьДобавлениеТовараПослеПроверкиМарки;
	
	ВременныйКонтекстПроверкиМарки = Контекст;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУспешноеДобавлениеМарки(ДанныеОбработкиДобавления)
	
	КонтекстВызова = ДанныеОбработкиДобавления.КонтекстВызова;
	ЭтоРучноеСопоставление = Ложь;
	
	СтруктураОтложенногоПоказаПредупреждения = Новый Структура();
	СтруктураОтложенногоПоказаПредупреждения.Вставить("ОтложенноеПредупреждение", Истина);
	СтруктураОтложенногоПоказаПредупреждения.Вставить("ПредупреждениеНужно", Ложь);
	
	Если КонтекстВызова = "ЗавершитьВводШтрихкодаМаркаВведена" Тогда
		ДобавитьТоварПоДаннымМарки(ДанныеОбработкиДобавления.ЭтоОбработкаСопоставленияТовара, СтруктураОтложенногоПоказаПредупреждения);
	ИначеЕсли КонтекстВызова = "ЗавершитьВводШтрихкода" Тогда
		
		ТекущийТоварКоличество = Элементы.Товары.ТекущиеДанные.КоличествоУпаковок;
		РассчитатьСуммуВСтрокеТабличнойЧасти();
		РассчитатьСуммуОплатыБонусами(СтруктураОтложенногоПоказаПредупреждения);
		НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
		
	ИначеЕсли КонтекстВызова = "ОбработатьВыборТовара" Тогда
		
		ДополнительныеДанные = ШаблонДополнительныхДанныхЗапросаКонтроляПродаж(ЭтотОбъект);
		ДополнительныеДанные.Вставить("Характеристика", Неопределено);
		
		ЭтоРучноеСопоставление = ЗначениеЗаполнено(ДанныеДляРучногоСопоставления) И РучноеСопоставлениеТовара;
		ОбработатьВыборТовараСервер(ДанныеОбработкиДобавления.ТекущийВыбор, ДополнительныеДанные);
		Если Не ДополнительныеДанные.ДанныеКонтроляПродаж = Неопределено Тогда
			ИнтерфейсРМКСлужебныйКлиентСервер.ДобавитьНовыеДанныеКэшаПродаж(КэшКонтроляПродаж,
					ДополнительныеДанные.ДанныеКонтроляПродаж);
		КонецЕсли;
		ЭтапыКонтроляПродаж = ИнтерфейсРМКСлужебныйКлиент.ЭтапыКонтроляПродаж();
		ИнтерфейсРМКСлужебныйКлиент.ВыполнитьПроверкиКонтроляПродаж(ЭтотОбъект, ЭтапыКонтроляПродаж.ДобавлениеТовара);
		
		РассчитатьСуммуВСтрокеТабличнойЧасти();
		РассчитатьСуммуОплатыБонусами(СтруктураОтложенногоПоказаПредупреждения);
		
	КонецЕсли;
	
	ОткрытаСтраницаВыбораСерииПослеВводаМарки = Ложь;
	Если КонтекстВызова = "ЗавершитьВводШтрихкодаМаркаВведена" Или КонтекстВызова = "ЗавершитьВводШтрихкода" Тогда
		СтрокаТовары = Элементы.Товары.ТекущиеДанные;
		Если Не СтрокаТовары = Неопределено И Не ОжидатьВводМарки Тогда
			Если (СтрокаТовары.ПроверятьЗаполнениеСерий И Не ЗначениеЗаполнено(СтрокаТовары.СерияПредставление))
				Или (СтрокаТовары.ПроверятьЗаполнениеПартий И Не ЗначениеЗаполнено(СтрокаТовары.Партия))
				И Не РежимВыбораХарактеристики Тогда
					Если КонтекстВызова = "ЗавершитьВводШтрихкодаМаркаВведена" Тогда
						ОткрытьСтраницуСерии(СтрокаТовары);
					КонецЕсли;
					ОткрытаСтраницаВыбораСерииПослеВводаМарки = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоРучноеСопоставление Тогда
		СтрокаДобавлена = ЗначениеЗаполнено(ДанныеДляРучногоСопоставления);
	Иначе
		СтрокаДобавлена = Истина;
	КонецЕсли;
	
	Если СтрокаДобавлена Тогда
		
		Если ЗначениеЗаполнено(КонтекстВызова) Тогда
		
			СтрокаТаблицыТоваров = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
			СтрокаТаблицыТоваров.КонтрольнаяМарка = ДанныеОбработкиДобавления.КодМаркировки;
			СтрокаТаблицыТоваров.ТребуетсяПроверкаКодаМаркировки = Ложь;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ПолныйКодМаркировки", СтрокаТаблицыТоваров.КодМаркировки);
			ОписаниеКодаМаркировки = СтрокаТаблицыТоваров.КодыМаркировкиПоДаннымИБ.НайтиСтроки(ПараметрыОтбора);
			
			Если СтрокаТаблицыТоваров.ПоштучноеВыбытие
				И ОписаниеКодаМаркировки.Количество() = 0
				И Не КонтекстВызова = "ПроверитьКодыМаркировкиПриПродолженииЧека"
				И Не КонтекстВызова = "ПроверитьКодыМаркировкиПередПробитиемЧека" Тогда
				
				Если ОбщегоНазначенияРМККлиентСервер.ЭтоПивнаяПродукция(СтрокаТаблицыТоваров.ОсобенностьУчета) Тогда
					ТребуетсяПодключениеКега = Истина;
					Для Каждого КодМаркировкиПоДаннымИБ Из СтрокаТаблицыТоваров.КодыМаркировкиПоДаннымИБ Цикл
						ДанныеМаркировки = МенеджерОборудованияРМККлиентСервер.РазобратьШтриховойКодТовара(КодМаркировкиПоДаннымИБ.ПолныйКодМаркировки);
						Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ДанныеМаркировки, "GTIN")
							И ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ДанныеМаркировки, "СерийныйНомер")
							И СтрНайти(СтрокаТаблицыТоваров.КодМаркировки, ДанныеМаркировки.GTIN) > 0
							И СтрНайти(СтрокаТаблицыТоваров.КодМаркировки, ДанныеМаркировки.СерийныйНомер) > 0 Тогда
							ТребуетсяПодключениеКега = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если ТребуетсяПодключениеКега Тогда
						ПодключитьКегКОборудованиюРозливаКлиент(СтрокаТаблицыТоваров);
					КонецЕсли;
				Иначе
					ЭтоПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
					Если ЭтоПродажа Тогда
						ВскрытьПотребительскуюУпаковкуКлиент(СтрокаТаблицыТоваров);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ОткрытаСтраницаВыбораСерииПослеВводаМарки Тогда
			УстановитьФокусНаТовареТребующемВводаМарки();
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураОтложенногоПоказаПредупреждения.ПредупреждениеНужно Тогда
		ВывестиПредупреждениеОНевозможностиОплатыБонусами();
	КонецЕсли;
	
	ВременныйКонтекстПроверкиМарки = Неопределено;
	ДанныеДляРучногоСопоставления = Неопределено;
	
	ОбработатьИзменениеТаблицыТоваровНаКлиенте();
	
	Если КонтекстВызова = "ПроверитьКодыМаркировкиПриПродолженииЧека" Тогда
		ПроверитьКодМаркировкиПриПродолженииЧека();
	ИначеЕсли КонтекстВызова = "ПроверитьКодыМаркировкиПередПробитиемЧека" Тогда
		ПроверитьКодыМаркировкиПередПробитием();
	КонецЕсли;
	ОбработатьРезультатКонтроляПродаж();
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателяЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И НЕ РезультатВыполнения.Результат Тогда
		
		ТекстЗаголовка = НСтр("ru = 'При снятии отчета на фискальном регистраторе произошла ошибка.'");
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось вывести информацию на дисплей покупателя по причине: %1'"),
			РезультатВыполнения.ОписаниеОшибки);
		
		ПоказатьПредупреждение(, ТекстСообщения, , ТекстЗаголовка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателяОВнесеннойСуммеОплаты()

	Если НЕ ЗначениеЗаполнено(ДанныеКПередачеВДисплейПокупателя) Тогда
		ДанныеКПередачеВДисплейПокупателя = БуферОбменаДисплеяПокупателя();
	КонецЕсли;
	
	ФорматЧисла = "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=";
	ДанныеКПередачеВДисплейПокупателя.Сдача = Формат(Сдача, ФорматЧисла);
	ДанныеКПередачеВДисплейПокупателя.СуммаИтого = Формат(СуммаИтого, ФорматЧисла);
	ДанныеКПередачеВДисплейПокупателя.Оплата = Формат(Объект.Оплата.Итог("Сумма"), ФорматЧисла);
	ВывестиИнформациюНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.Оплата);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОтображениеИнформацииНаДисплейПокупателя(Операция)
	
	ВывестиИнформациюНаДисплейПокупателя(Операция);
		
КонецПроцедуры

&НаКлиенте
Функция ЭтоНажатиеНаДисплееПокупателя(ИмяСобытия)
	
	Возврат ИмяСобытия = "Pressed";
		
КонецФункции

#КонецОбласти

#Область ЗапретыПродаж

&НаКлиенте
Процедура ОткрытьСтраницуЗапретаПродажиПоВремени(СтрокаОграничения, ПодтвержденоСотрудником = Ложь)

	Если РежимКассыСамообслуживания И Не ПодтвержденоСотрудником Тогда
		
		НеобходимоеПраво = "ПравоОбработкиЗапретаПродажРМК";
		
		ПараметрыТекущейОперации = Новый Структура;
		ПараметрыТекущейОперации.Вставить("СтрокаОграничения", СтрокаОграничения);
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
		Возврат;
		
	КонецЕсли;
	
	ЭтапыКонтроля = ИнтерфейсРМКСлужебныйКлиент.ЭтапыКонтроляПродаж();
	ЭтоОперацияВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
	ТекстПредупреждения = НСтр("ru = 'Продажа товаров из этой категории запрещена'");
	Если Не СтрокаОграничения.ТекстПредупреждения = "" Тогда
		ТекстПредупреждения = СтрокаОграничения.ТекстПредупреждения;
	КонецЕсли;
	Если ЭтоОперацияВозврат И Не РезультатКонтроляПродаж.ЭтапКонтроля = ЭтапыКонтроля.ДобавлениеТовара Тогда
		ТекущаяОперация = "ПодтвердитьВозвратЗапрещенногоТовара";
		
		ТекстЗапретаПродажи = СтрШаблон(НСтр("ru = '%1. Осуществить возврат?'"), ТекстПредупреждения);
		ТекстКомандыЗапретаПродажи = НСтр("ru = 'Пробить чек'");
	Иначе
		ТекстЗапретаПродажи = ТекстПредупреждения;
		ТекстКомандыЗапретаПродажи = НСтр("ru = 'Продолжить чек'");
	КонецЕсли;
	
	Элементы.ТекстЗапретаПродажи.Заголовок = ТекстЗапретаПродажи;
	Элементы.ПродолжитьРаботуСЧеком.Заголовок = ТекстКомандыЗапретаПродажи;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаЗапретаПродажи);
	ТекущийЭлемент = Элементы.ПродолжитьРаботуСЧеком;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОграниченияПродажИнтерактивно()

	Если Не РаботаСЧекомЗавершена() Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
	Если ИспользоватьПоставляемыеОграниченияПродаж
			ИЛИ (ИспользоватьКонтрольПродаж И ИспользоватьСерверЛояльностиПолучательДанных) Тогда
			
		ОбновитьКалендарныеОграниченияПродаж();
		ОбновитьКэшКонтроляПродажПоДаннымПлитки(Неопределено);
		
	ИначеЕсли ИспользоватьКонтрольПродаж Тогда
		
		ОбновитьКэшКонтроляПродажПоДаннымПлитки(Неопределено);
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'Пожалуйста, включите использование запретов продаж.'");
		ЗаголовокПредупреждения = НСтр("ru = 'Ограничения продаж не используются'");
		ПоказатьПредупреждение(, ТекстПредупреждения, , ЗаголовокПредупреждения);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьКалендарныеОграниченияПродаж()
	
	СостояниеОбновленияЗапретовПродаж = НСтр("ru = ''");
	
	Если ИспользоватьСерверЛояльностиПолучательДанных И ИспользоватьКонтрольПродаж Тогда
	
		РезультатОбновления = ОбщегоНазначенияРМККлиентСервер.ОбновитьДанныеЗапретовРедактирования(ТекущаяНастройкаРМК,
			Объект.ТорговыйОбъект);
		
		Если НЕ РезультатОбновления.ПризнакУспешноОбновлен Тогда
			
			ПричинаНевозможностиОбновленияПризнака = НСтр("ru = 'Признак разрешения редактирования не обновлен по причине:'");
			СостояниеОбновленияЗапретовПродаж = СтрШаблон("%1 %2%3",
				ПричинаНевозможностиОбновленияПризнака, РезультатОбновления.КомментарийКОбновлениюПризнака, Символы.ПС);
			
		КонецЕсли;
		
		Если НЕ РезультатОбновления.ЗапретыПродажУспешноЗагружены Тогда
			
			ПричинаНевозможностиОбновленияЗапретовПродаж = НСтр("ru = 'Не удалось обновить запреты продаж по причине:'");
			ПричинаНевозможностиОбновленияЗапретовПродажРасширенная = СтрШаблон("%1%2",
				ПричинаНевозможностиОбновленияЗапретовПродаж, РезультатОбновления.КомментарийОбновленияЗапретов);
			СостояниеОбновленияЗапретовПродаж = СтрШаблон("%1%2%3",
				СостояниеОбновленияЗапретовПродаж, ПричинаНевозможностиОбновленияЗапретовПродажРасширенная, Символы.ПС);
			
		КонецЕсли;
		
	ИначеЕсли ИспользоватьПоставляемыеОграниченияПродаж Тогда
		
		РезультатОбновления = ОбновитьОграниченияПродажИзПоставляемыхДанных();
		СостояниеОбновленияЗапретовПродаж = РезультатОбновления.КомментарийОбновленияЗапретов;
		
	Иначе
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СостояниеОбновленияЗапретовПродаж) Тогда
		
		КомментарийКЗаписи = НСтр("ru = 'Данные о запретах продаж не были обновлены.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
				
		ИмяСобытия = НСтр("ru = 'Обновление данных запретов о продажах'",
			ОбщегоНазначения.КодОсновногоЯзыка());
				
		ЗаписьЖурналаРегистрации(ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка, , , КомментарийКЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьОграниченияПродажИзПоставляемыхДанных()
	
	Результат = Новый Структура();
	Результат.Вставить("КомментарийОбновленияЗапретов", НСтр("ru = ''"));
	ТорговыйОбъект = Объект.ТорговыйОбъект;
	ОбщегоНазначенияРМК.ОбновитьОграниченияПродажИзПоставляемыхДанных(ТорговыйОбъект, Результат);
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ПроверитьЗаполнениеОплатПередПробитиемЧека(ОплатаЗаполненаВерно, СтруктураОшибки)
	
	СтандартнаяОбработка = Истина;
	
	ОбщегоНазначенияРМККлиентПереопределяемый.ПроверитьЗаполнениеОплатПередПробитиемЧека(
		ОплатаЗаполненаВерно, СтруктураОшибки, ЭтотОбъект, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		
		Если ЭтоОплатаРассрочки Тогда
			
			Если СуммаОплаченоНал = 0 И СуммаОплаченоБН = 0 И СуммаОплаченоСБП = 0 Тогда
				
				ОплатаЗаполненаВерно = Ложь;
				ТекстОшибки = НСтр("ru = 'При оплате рассрочки необходимо ввести оплату наличными, платежной картой или СБП.'");
				СтруктураОшибки.ТекстЗаголовка = НСтр("ru = 'Ошибка оплаты.'");
				СтруктураОшибки.ТекстОшибки = ТекстОшибки;
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли Объект.ОперацияСДенежнымиСредствами
			И (СуммаОплаченоВРассрочку + СуммаОплаченоЗачетАванса) >= СуммаИтого Тогда
			
			ОплатаЗаполненаВерно = Ложь;
			ТекстОшибки = НСтр("ru = 'Необходимо выбрать вид оплаты и ввести сумму предоплаты.'");
			СтруктураОшибки.ТекстЗаголовка = НСтр("ru = 'Ошибка оплаты.'");
			СтруктураОшибки.ТекстОшибки = ТекстОшибки; 
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяОтДобавленияТовара()

	Если ЗначениеЗаполнено(ВременныйКонтекстПроверкиМарки)
		И ЕстьСвойство(ВременныйКонтекстПроверкиМарки, "КодМаркировки")
		И ЗначениеЗаполнено(ВременныйКонтекстПроверкиМарки.КодМаркировки) Тогда
		
		Если ВременныйКонтекстПроверкиМарки.ПроверкаМаркиВБиблиотекеГосИС Тогда
			
			РезультатВыполнения = Новый Структура("Результат", Истина);
			ЗавершитьПодтверждениеНеВыбытияКонтрольнойМарки(РезультатВыполнения, ВременныйКонтекстПроверкиМарки);
			
		Иначе
			
			ОповещениеОЗавершенииНеВыбытияКМ = Новый ОписаниеОповещения("ЗавершитьПодтверждениеНеВыбытияКонтрольнойМарки",
				ЭтотОбъект, ВременныйКонтекстПроверкиМарки);
				
			Выбытие = Ложь;
			МенеджерОборудованияРМККлиент.НачатьПодтверждениеКМ(ОповещениеОЗавершенииНеВыбытияКМ,
				ЭтотОбъект, ВременныйКонтекстПроверкиМарки, УникальныйИдентификатор, Выбытие);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВременныйКонтекстПроверкиМарки = Неопределено;
	ОжидатьВводМарки = Ложь;
	ДанныеДляРучногоСопоставления = Неопределено;
	УстановитьДоступностьЭлементовРабочейОбластиФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФокусНаТовареТребующемВводаМарки()
	
	Если ЭтоЧекКоррекции Тогда
		Возврат;
	КонецЕсли;
	
	ОтборПоиска = Новый Структура();
	ОтборПоиска.Вставить("НеобходимостьВводаКодаМаркировки", Истина);
	ОтборПоиска.Вставить("КодМаркировки", "");
	РезультатПоиска = Объект.Товары.НайтиСтроки(ОтборПоиска);
	
	Если РезультатПоиска.Количество() > 0 Тогда
	
		СтрокаТовара = РезультатПоиска[0];
		Элементы.Товары.ТекущаяСтрока = СтрокаТовара.ПолучитьИдентификатор();
		ПодготовитьИнтерфейсДобавленияТовараБезКонтрольнойМарки(СтрокаТовара);
		
	Иначе
		
		УстановитьДоступностьЭлементовРабочейОбластиФормы(Истина);
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
		НастроитьДоступностьПробитьЧек();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРезультатыЗапросаКМ()
	
	Контекст = ВременныйКонтекстПроверкиМарки;
	ПараметрыОперации = Новый Структура();
	
	Отбор = Новый Структура("Организация", Контекст.Организация);
	СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
	ПодключаемоеОборудованиеДляПроверкиМарки = СтрокаКассы.ИдентификаторУстройства;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ЗавершитьПолучениеРезультатовЗапросаПроверкиКодаМаркировкиОтИСМП",
		ЭтотОбъект, Контекст);
	МенеджерОборудованияРМККлиент.НачатьПолученияРезультатовЗапросаКМ(ОповещениеОЗавершении,
		УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьКонтрольныеМарки()
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСессиюРегистрацииМарок()
	
	Для Каждого Строка Из ТаблицаКассККМОрганизаций Цикл
	
		Если Строка.ПоддерживаетПроверкуКодовМаркировки Тогда
			
			ПодключаемоеОборудование = Строка.ИдентификаторУстройства;
			
			ОповещениеОЗакрытииСессииРегистрацииМарок = Новый ОписаниеОповещения(
				"ЗавершитьЗакрытиеСессииПроверкиКонтрольныхМарок", ЭтотОбъект);
			
			МенеджерОборудованияРМККлиент.НачатьЗакрытииСессииРегистрацииКМ(
				ОповещениеОЗакрытииСессииРегистрацииМарок, УникальныйИдентификатор, ПодключаемоеОборудование);
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовРабочейОбластиФормы(ЗначениеДоступности)
	
	УстановитьДоступностьЭлементаФормы(Элементы.Каталог, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРядовКнопокБыстрыхТоваров,
		ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаТовары, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.УдалитьТовар, ЗначениеДоступности);
	
КонецПроцедуры

#КонецОбласти

#Область ИзбранныеПозиции

&НаСервере
Функция ДанныеВедущейКомбинацииГорячихКлавиш()
	
	Результат = Новый Структура("ВедущаяКомбинацияСтрокой,Shift,Alt,Ctrl", Ложь, Ложь, Ложь);
	
	КомандаОткрытияПанелиИзбранного = Элементы.Найти("ОткрытьПанельИзбранныхТоваров");
	
	Если НЕ КомандаОткрытияПанелиИзбранного = Неопределено Тогда
		
		СочетаниеКлавиш = КомандаОткрытияПанелиИзбранного.СочетаниеКлавиш;
		
		СоставляющаяCtrl	= ?(СочетаниеКлавиш.Ctrl, "Ctrl +", "");
		СоставляющаяAlt		= ?(СочетаниеКлавиш.Alt, "Alt +", "");
		СоставляющаяShift	= ?(СочетаниеКлавиш.Shift, "Shift +", "");
		
		КомбинацияГорячихКлавишСтрокой = СтрШаблон("%1%2%3", СоставляющаяCtrl, СоставляющаяAlt, СоставляющаяShift);
		
		Результат.Вставить("ВедущаяКомбинацияСтрокой", КомбинацияГорячихКлавишСтрокой);
		Результат.Вставить("Ctrl", СочетаниеКлавиш.Ctrl);
		Результат.Вставить("Alt", СочетаниеКлавиш.Alt);
		Результат.Вставить("Shift", СочетаниеКлавиш.Shift);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьКнопкиИзбранныхПозиций();
	
	ИнтерфейсРМКСлужебныйКлиент.ЗаполнитьКнопкиИзбранныхПозиций(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКнопкиПлиток();
	
	ИнтерфейсРМКСлужебныйКлиент.ЗаполнитьКнопкиПлиток(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Интерфейс

&НаКлиенте
Процедура ЗакрытьСтраницуСОшибкойЦены()
	
	Если Не ТекущийТоварЦенаИзКарточки = 0
		И ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ГруппаИнфоОшибка Тогда
	
		ЗакрытьСтраницуИнфоОшибка(Команды.ЗакрытьСтраницуИнфоОшибка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСтраницуСОшибкойКоличества()
	
	Если Не ТекущийТоварКоличество = 0
		И ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ГруппаИнфоОшибка Тогда
		
		ЗакрытьСтраницуИнфоОшибка(Команды.ЗакрытьСтраницуИнфоОшибка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьДоступностьПолейНайденнойКарты()
	
	ТолькоПросмотр = Элементы.НайденнаяКартаНомер.ТолькоПросмотр;
	
	УстановитьТолькоПросмотрЭлементаФормы(Элементы.НайденнаяКартаТелефон, НЕ ТолькоПросмотр);
	УстановитьТолькоПросмотрЭлементаФормы(Элементы.НайденнаяКартаПочта, НЕ ТолькоПросмотр);
	УстановитьТолькоПросмотрЭлементаФормы(Элементы.НайденнаяКартаФИО, НЕ ТолькоПросмотр);
	УстановитьТолькоПросмотрЭлементаФормы(Элементы.НайденнаяКартаДатаРождения, НЕ ТолькоПросмотр);
	УстановитьТолькоПросмотрЭлементаФормы(Элементы.НайденнаяКартаНомер, НЕ ТолькоПросмотр);
	
	УстановитьВидимостьЭлементаФормы(Элементы.СохранитьДанныеКарты, ТолькоПросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКартинкуВводПокупателя()
	
	ИзменитьКартинкуВводПокупателяБезКонтекста(ЭтотОбъект);
	ДанныеЗаполнены = ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеЛояльностиЗаполнены(ЭтотОбъект);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнформацияПокупателя, ДанныеЗаполнены);
		
	КоличествоОтображаемыхПолей = 3;
	СчетчикВключенныхПолей = 0;
	
	Если Не РежимКассыСамообслуживания Тогда
		ВключитьВыключитьГруппуДанныхПокупателя("ГруппаИнформацияПокупателяФИО", "НайденнаяКартаФИО",
			КоличествоОтображаемыхПолей, СчетчикВключенныхПолей);
		ВключитьВыключитьГруппуДанныхПокупателя("ГруппаИнформацияПокупателяТелефон", "НайденнаяКартаТелефон",
			КоличествоОтображаемыхПолей, СчетчикВключенныхПолей);
		ВключитьВыключитьГруппуДанныхПокупателя("ГруппаИнформацияПокупателяСумма", "НайденнаяКартаСуммаПродаж",
			КоличествоОтображаемыхПолей, СчетчикВключенныхПолей);
		ВключитьВыключитьГруппуДанныхПокупателя("ГруппаИнформацияПокупателяДатаРождения", "НайденнаяКартаДатаРождения",
			КоличествоОтображаемыхПолей, СчетчикВключенныхПолей);
		ВключитьВыключитьГруппуДанныхПокупателя("ГруппаИнформацияПокупателяАдресЭлПочты", "НайденнаяКартаПочта",
			КоличествоОтображаемыхПолей, СчетчикВключенныхПолей);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидОтображения()
	
	Если Не ЗначениеЗаполнено(ТекущаяНастройкаРМК) Тогда
		Возврат;
	КонецЕсли;
	
	ВидОтображения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяНастройкаРМК, "ВидОтображения");
	
	Если ВидОтображения = Перечисления.ВидыОтображения.Стандартный Тогда
		Масштаб = 100;
	ИначеЕсли ВидОтображения = Перечисления.ВидыОтображения.Увеличенный Тогда
		Масштаб = 120;
	ИначеЕсли ВидОтображения = Перечисления.ВидыОтображения.Уменьшенный Тогда
		Масштаб = 80;
	КонецЕсли;
	Если РежимКассыСамообслуживания Или ВидОтображения = Перечисления.ВидыОтображения.Увеличенный Тогда
		ИнтерфейсРМКСлужебный.УвеличитьРазмерКоманд(ЭтотОбъект);
	КонецЕсли;
	ИнтерфейсРМКСлужебный.НастроитьЭлементыПоМасштабу(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступностьКомандИзмененияКоличества(ТекущаяСтрока)
	
	ДоступностьКоманд = Истина;
	
	Если ЭтоУникальнаяМаркировкаСерияИлиПодарок(ТекущаяСтрока) Или ЭтоРаботаСАвансом()
		Или ЭтоВесовойТоварВРежимеКСО(ТекущаяСтрока) Тогда
		
			ДоступностьКоманд = Ложь;
		
	КонецЕсли;
	
	Если ТекущаяСтрока.ПоштучноеВыбытие Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияПоштучноеВыбытие, Истина);
		
		ЗаполнитьЧастичноеВыбытиеОстатокПоСтроке(ТекущаяСтрока, Объект.Товары, ИндексКартинкиПоштучноеВыбытие);
		
		СтандартнаяОбработка = Истина;
		
		ОбщегоНазначенияРМККлиентПереопределяемый.УстановитьВидимостьИндикатораОстатка(ТекущаяСтрока, Элементы.ПолеПоштучноеВыбытиеОстатокПредупреждение, СтандартнаяОбработка);
		
		Если СтандартнаяОбработка Тогда
			
			УстановитьВидимостьЭлементаФормы(Элементы.ПолеПоштучноеВыбытиеОстатокПредупреждение, ЗначениеЗаполнено(ТекущаяСтрока.КодМаркировки));
			
		КонецЕсли;
		
		ТекстЗаголовка = СтрШаблон(НСтр("ru = 'из %1 %2'"), ТекущаяСтрока.ЧастичноеВыбытиеОстаток,
			ТекущаяСтрока.ПредставлениеЕдиницыИзмеренияЧастичногоВыбытия);
		Элементы.ДекорацияПоштучноеВыбытие.Заголовок = ТекстЗаголовка;
	Иначе
		УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияПоштучноеВыбытие, Ложь);
		Элементы.ДекорацияПоштучноеВыбытие.Заголовок = "";
		УстановитьВидимостьЭлементаФормы(Элементы.ПолеПоштучноеВыбытиеОстатокПредупреждение, Ложь);
	КонецЕсли;
	
	Если ТекущийЭлемент = Элементы.ТекущийТоварКоличество И Не ДоступностьКоманд Тогда
		ТекущийЭлемент = Элементы.УдалитьТовар;
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварУменьшитьКоличество, ДоступностьКоманд);
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварУвеличитьКоличество, ДоступностьКоманд);
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварКоличество, ДоступностьКоманд);
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоВесовойТоварВРежимеКСО(ТекущаяСтрока)
	
	Возврат ТекущаяСтрока.Весовой И РежимКассыСамообслуживания;
	
КонецФункции

&НаКлиенте
Функция ЭтоНеИзменяемаяМаркируемаяПродукция(ТекущаяСтрока)
	
	Возврат ТекущаяСтрока.НеобходимостьВводаКодаМаркировки И Не ТекущаяСтрока.ПоштучноеВыбытие
			И Не ТекущаяСтрока.ИзменятьКоличествоМаркируемойПродукции;
	
КонецФункции

&НаКлиенте
Функция ЭтоСтрокаУникальнойСерии(ТекущаяСтрока)
	
	Возврат ТекущаяСтрока.ПроверятьЗаполнениеСерий И ТекущаяСтрока.УникальностьСерии;
	
КонецФункции

&НаКлиенте
Функция ЭтоРаботаСАвансом()
	
	Возврат ПриемАванса Или ПриемАвансаПоЗаказу Или ЭтоВозвратАванса;
	
КонецФункции

&НаКлиенте
Функция ЭтоУникальнаяМаркировкаСерияИлиПодарок(ТекущаяСтрока)
	
	Возврат ЭтоНеИзменяемаяМаркируемаяПродукция(ТекущаяСтрока)
		Или ЭтоСтрокаУникальнойСерии(ТекущаяСтрока) Или ТекущаяСтрока.Подарок;
	
КонецФункции

&НаКлиенте
Процедура НастроитьКомандуУказатьМарку(ТекущаяСтрока)
	
	Если ТекущаяСтрока.НеобходимостьВводаКодаМаркировки И ТекущаяСтрока.ПоштучноеВыбытие И 
			ТекущаяСтрока.КодыМаркировкиПоДаннымИБ.Количество() > 1 Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.УказатьМарку, Истина);
		
	Иначе
		
		УстановитьВидимостьЭлементаФормы(Элементы.УказатьМарку, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКомандуУказатьСерии(ТекущаяСтрока)
	
	Если ТекущаяСтрока.НеобходимостьВводаСерии
		Или ТекущаяСтрока.ИспользоватьПартии Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.УказатьСерии, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ТекущийТоварСерияПартия, Истина);
		
		ТекстЗаголовкаСерии = "";
		Если ТекущаяСтрока.НеобходимостьВводаСерии Тогда
			Если ЗначениеЗаполнено(ТекущаяСтрока.СерияПредставление) Тогда
				ТекстЗаголовкаСерии = СтрШаблон(НСтр("ru = 'Серия: %1'"), ТекущаяСтрока.СерияПредставление);
			Иначе
				ТекстЗаголовкаСерии = НСтр("ru = 'Серия не выбрана'");
			КонецЕсли;
		КонецЕсли;
		
		ТекстЗаголовкаПартии = "";
		Если ТекущаяСтрока.ИспользоватьПартии Тогда
			Если ЗначениеЗаполнено(ТекущаяСтрока.Партия) Тогда
				ТекстЗаголовкаПартии = СтрШаблон(НСтр("ru = 'Партия: %1'"), ТекущаяСтрока.Партия);
			Иначе
				ТекстЗаголовкаПартии = НСтр("ru = 'Партия не выбрана'");
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ТекущийТоварСерияПартия.Заголовок = ТекстЗаголовкаСерии + НСтр("ru = ' '") + ТекстЗаголовкаПартии;
		НастроитьКартинкуУказанияСерийИПартий(ТекущаяСтрока);
		
	Иначе
		
		УстановитьВидимостьЭлементаФормы(Элементы.УказатьСерии, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ТекущийТоварСерияПартия, Ложь);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Поставщик) Тогда
		Если ТекущаяСтрока.ЭтоАгентскаяУслуга Тогда
			ЗаголовокПоставщика = НСтр("ru = 'Агент:'");
		Иначе
			ЗаголовокПоставщика = НСтр("ru = 'Комитент:'");
		КонецЕсли;
		Элементы.ТекущийТоварПоставщик.Заголовок = СтрШаблон(" %1 %2", ЗаголовокПоставщика, ТекущаяСтрока.Поставщик);
		УстановитьВидимостьЭлементаФормы(Элементы.ТекущийТоварПоставщик, Истина);
	Иначе
		УстановитьВидимостьЭлементаФормы(Элементы.ТекущийТоварПоставщик, Ложь);
	КонецЕсли;
	
	Если ТекущаяСтрока.ПроверятьЗаполнениеХарактеристики Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.УказатьХарактеристику, Истина);
		ТекстЗаголовкаХарактеристики = "";
		Если ТекущаяСтрока.ПроверятьЗаполнениеХарактеристики Тогда
			Если ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
				ПредставлениеХарактеристики = "";
				Если ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
					ПредставлениеХарактеристики = " (" + Строка(ТекущаяСтрока.Характеристика) + ")";
				КонецЕсли;
			Иначе
				ПредставлениеХарактеристики = НСтр("ru = '(Характеристика не выбрана)'");
			КонецЕсли;
		КонецЕсли;
		ПредставлениеТовара = СтрШаблон("%1%2", ТекущаяСтрока.Номенклатура, ПредставлениеХарактеристики);
		ТекущаяСтрока.ПредставлениеНоменклатураХарактеристика = ПредставлениеТовара;
		НастроитьПредставлениеТовара(ТекущаяСтрока);
		НастроитьКаринкуУказатьХарактеристику(ТекущаяСтрока);
	Иначе
		УстановитьВидимостьЭлементаФормы(Элементы.УказатьХарактеристику, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуСерии(ТекущаяСтрока = Неопределено)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		Если ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущаяОперация = "" И РежимКассыСамообслуживания Тогда
		
		ПараметрыТекущейОперации = Новый Структура;
		ПараметрыТекущейОперации.Вставить("ИдентификаторСтроки", ТекущаяСтрока.ПолучитьИдентификатор());
		
		НеобходимоеПраво = "ПравоВыбораСерииРМК";
		ТекущаяОперация = "ВыборСерииРМК";
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
		Если Не Элементы.ГруппаОперации.Видимость Тогда
			ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьГруппыОперации(Элементы);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ТекущийТоварИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
	
	Элементы.ДекорацияНоменклатураДляСерии.Заголовок = ТекущаяСтрока.ПредставлениеНоменклатураХарактеристика;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыборСерии, ТекущаяСтрока.НеобходимостьВводаСерии);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыборПартии, ТекущаяСтрока.ИспользоватьПартии);
	
	Если СерииНеВыгружаются И ЗначениеЗаполнено(ТекущаяСтрока.ИдентификаторСерий) Тогда
		ВыборСерииИдентификатор = ТекущаяСтрока.ИдентификаторСерий;
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.Серия) Тогда
		ВыборСерии = ТекущаяСтрока.Серия;
	Иначе
		ВыборСерии = Неопределено;
		ВыборСерииИдентификатор = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Партия) Тогда
		ВыборПартии = ТекущаяСтрока.Партия;
	Иначе
		ВыборПартии = Неопределено;
	КонецЕсли;
	
	ЗаполнитьСписокСерийИПартий();
	
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаСерииИПартии);
	УстановитьДоступностьЭлементовРедактированияЧека(Ложь);
	АктивироватьЭлементВыбораСерииПартии(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСериюДляТекущейСтроки()
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
		Возврат;
	КонецЕсли;
	
	ЭтоОперацияПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	ВыбраннаяСерия = Неопределено;
	Если СерииНеВыгружаются Тогда
		ВыбраннаяСерия = ВыборСерииИдентификатор;
	Иначе
		ВыбраннаяСерия = ВыборСерии;
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбраннаяСерия) И ТекущаяСтрока.ТипНоменклатуры = ОбщегоНазначенияРМККлиент.ТипНоменклатурыПодарочныйСертификат() И ЭтоОперацияПродажа Тогда
		Если ПроверитьСериюПодарочногоСертификата(ВыбраннаяСерия) Тогда
			ТекстЗаголовка = НСтр("ru = 'Ошибка серии подарочного сертификата.'");
			ТекстОшибки = НСтр("ru = 'Подарочный сертификат с данным номером уже был реализован ранее'");
			ПараметрыОшибки = Новый Структура("ЭтоПредупреждение", Истина);
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки, ПараметрыОшибки);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если СерииНеВыгружаются Тогда
		ТекущаяСтрока.ИдентификаторСерий = ВыбраннаяСерия;
		ТекущаяСтрока.СерияПредставление = "";
		ВыбранноеЗначение = Элементы.ВыборСерииИдентификатор.СписокВыбора.НайтиПоЗначению(ВыбраннаяСерия);
		Если НЕ ВыбранноеЗначение = Неопределено Тогда
			ТекущаяСтрока.СерияПредставление = ВыбранноеЗначение.Представление;
		КонецЕсли;
	Иначе
		ТекущаяСтрока.Серия = ВыбраннаяСерия;
		ТекущаяСтрока.СерияПредставление = Строка(ВыбраннаяСерия);
	КонецЕсли;
	ТекущаяСтрока.Партия = ВыборПартии;
	
	ЦенаСерии = 0;
	ЗаполнитьЦенуСерии(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика, ВыбраннаяСерия, ЦенаСерии);
	Если ЦенаСерии <> 0
		И ЦенаСерии <> ТекущаяСтрока.Цена Тогда
		ТекущийТоварЦенаИзКарточки = ЦенаСерии;
		ЦенаИзКарточкиПриИзмененииЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
	УстановитьДоступностьЭлементовРедактированияЧека(Истина);
	
	Если ЭтоЗаменаТоваров Тогда
		НастроитьДоступностьПробитьЧек();
	Иначе
		ИнтерфейсРМКСлужебныйКлиент.НастроитьДоступностьРежимаОплаты(ЭтотОбъект);
	КонецЕсли;
	
	УточнитьДанныеДляСтрокиПриВыбореСерииИПартии();
	ОбщегоНазначенияРМККлиентСервер.УстановитьНомерКартинкиСтрокиТовара(ТекущаяСтрока);
	НастроитьКомандуУказатьСерии(ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура УточнитьДанныеДляСтрокиПриВыбореСерииИПартии()
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	Если Не ТекущаяСтрока = Неопределено Тогда
		ОбщегоНазначенияРМКПереопределяемый.УточнитьДанныеДляСтрокиПриВыбореСерииИПартии(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьСериюПодарочногоСертификата(Серия)
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ПроверитьСериюПодарочногоСертификата(Серия, ТекущаяНастройкаРМК, Результат);
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭлементаФормы(Элемент, Видимость)
	Элемент.Видимость = Видимость;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементаФормы(Элемент, Доступность)
	Элемент.Доступность = Доступность;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТолькоПросмотрЭлементаФормы(Элемент, ТолькоПросмотр)
	Элемент.ТолькоПросмотр = ТолькоПросмотр;
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуОплата()
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	УстановитьДоступностьЭлементовРедактированияЧека(Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.Каталог, Истина);
	
	ДоступностьЭлементов = (Объект.Товары.Количество() > 0);
	
	УстановитьДоступностьЭлементаФормы(Элементы.НайтиВЧеке, ДоступностьЭлементов);
	УстановитьДоступностьЭлементаФормы(Элементы.УдалитьЧек, ДоступностьЭлементов);
	УстановитьДоступностьЭлементаФормы(Элементы.ОтложитьЧек, ДоступностьЭлементов);
	
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
	ВернутьОсновнуюКоманднуюПанельЧека();
	НастроитьДоступностьПробитьЧек();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступностьПробитьЧек(ПриВводеСуммы = Ложь)
	
	ЭтоОперацияВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
	ЭтоВозвратТовара = ЭтоОперацияВозврат Или ЭтоВозвратБезОснования;
	
	Если РежимРаботыСЧеком = РежимыРаботыСЧеком.ВводТоваров Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ЧекПустой Тогда
		ИнтерфейсРМКСлужебныйКлиент.НастроитьДоступностьРежимаОплаты(ЭтотОбъект);
	КонецЕсли;
	
	СтруктураОрганизацияИСНО = ВыбраннаяОрганизацияИСНО();
	
	ДоступноПробитиеЧека = НЕ ( (ВыбраннаяОрганизация = Неопределено)
		ИЛИ (ПробитыеЧеки.НайтиСтроки(СтруктураОрганизацияИСНО).Количество() > 0) );
		
	ЧекПолностьюОплаченБонусами = (СуммаБонусов = (СуммаБезСкидки - СуммаСкидки) И СуммаБонусов <> 0);
	
	Если ПриВводеСуммы Тогда
		
		СуммаОплаченоНалЭл                 = ЧислоИзТекста(Элементы.СуммаОплаченоНал.ТекстРедактирования);
		СуммаОплаченоБНЭл                  = ЧислоИзТекста(Элементы.СуммаОплаченоБН.ТекстРедактирования);
		СуммаОплаченоБезналЭл              = СуммаОплаченоБезнал;
		СуммаОплаченоВРассрочкуЭл          = ЧислоИзТекста(Элементы.СуммаОплаченоВРассрочку.ТекстРедактирования);
		СуммаОплаченоЗачетАвансаЭл         = ЧислоИзТекста(Элементы.СуммаОплаченоЗачетАванса.ТекстРедактирования);
		СуммаОплаченоСертификатамиЭл       = СуммаОплаченоСертификатами;
		СуммаОплаченоСБПЭл                 = ЧислоИзТекста(Элементы.СуммаОплаченоСБП.ТекстРедактирования);
		СуммаОплаченоЮКассаЭл              = ЧислоИзТекста(Элементы.СуммаОплаченоЮКасса.ТекстРедактирования);
		СуммаОплаченоСертификатамиНСПКЭл   = ЧислоИзТекста(Элементы.СуммаОплаченоСертификатамиНСПК.ТекстРедактирования);
		СуммаТоваровКЗаменеЭл              = ЧислоИзТекста(Элементы.СуммаТоваровКЗамене.ТекстРедактирования);
		СуммаОплаченоКредитомЭл            = ЧислоИзТекста(Элементы.СуммаОплаченоКредитом.ТекстРедактирования);
		
		ОсталосьОплатить = СуммаБезСкидки - СуммаСкидки - СуммаБонусов - СуммаОплаченоНалЭл
			- СуммаОплаченоБНЭл - СуммаОплаченоБезналЭл - СуммаОплаченоВРассрочкуЭл - СуммаОплаченоЗачетАвансаЭл
			- СуммаОплаченоСертификатамиЭл - СуммаОплаченоСБПЭл - СуммаОплаченоЮКассаЭл - СуммаОплаченоСертификатамиНСПКЭл
			- СуммаТоваровКЗаменеЭл - СуммаОплаченоКредитомЭл; 
		
	Иначе
	
		ОсталосьОплатить = СуммаБезСкидки - СуммаСкидки - СуммаБонусов - СуммаОплаченоНал
			- СуммаОплаченоБН - СуммаОплаченоБезнал - СуммаОплаченоВРассрочку - СуммаОплаченоЗачетАванса
			- СуммаОплаченоСертификатами - СуммаОплаченоСБП - СуммаОплаченоЮКасса - СуммаОплаченоСертификатамиНСПК
			- СуммаТоваровКЗамене - СуммаОплаченоКредитом;
			
	КонецЕсли;
		
	ДоступноПробитиеЧека = ДоступноПробитиеЧека
		И (ЧекПолностьюОплаченБонусами ИЛИ (СуммаИтого > 0 И ОсталосьОплатить <= 0 И СуммаИтого >= СуммаТоваровКЗамене));
	
	Если ЭтоВозвратТовара И Объект.ОперацияСДенежнымиСредствами И НЕ ЭтоВозвратАванса Тогда
		Если ОсталосьОплатить < (СуммаБезСкидки - СуммаСкидки - СуммаБонусов) Тогда
			ДоступноПробитиеЧека = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоВозвратТовара И ОжидатьВводМарки Тогда
		ДоступноПробитиеЧека = Ложь;
	КонецЕсли;
	
	Отбор = Новый Структура("Организация", ВыбраннаяОрганизация);
	СтрокиКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор);
	Если СтрокиКассы.Количество() > 0 Тогда
		СтрокаКассы = СтрокиКассы[0];
		Если НЕ СтрокаКассы.Открыта Тогда
			ДоступноПробитиеЧека = Ложь;
		ИначеЕсли СтрокаКассы.ДатаИстеченияСрокаДействия < ОбщегоНазначенияКлиент.ДатаСеанса() Тогда
			ДоступноПробитиеЧека = Ложь;
		КонецЕсли;
	Иначе
		ДоступноПробитиеЧека = Ложь;
	КонецЕсли;
	
	Если ОтложенныйЧекПолностьюОплачен Тогда
		ДоступноПробитиеЧека = Истина;
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧек, ДоступноПробитиеЧека);
	УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧекНСПК, ДоступноПробитиеЧека И ПредварительноеОдобрениеНСПКПолучено);
	
	ДопускаетсяОплатаКартойСканированиемКода = ИспользоватьОплатуПлатежнымиКартами
		И (ОсталосьОплатить = (СуммаБезСкидки - СуммаСкидки - СуммаБонусов))
		И НЕ (ЭтоВозвратТовара ИЛИ ЭтоВозвратАванса ИЛИ ЭтоЧекКоррекции);

	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeКарта, ДопускаетсяОплатаКартойСканированиемКода);
	
	ДопускаетсяОплатаНаличнымиСканированиемКода = ИспользоватьОплатуНаличными
		И (ОсталосьОплатить = (СуммаБезСкидки - СуммаСкидки - СуммаБонусов))
		И НЕ (ЭтоВозвратТовара ИЛИ ЭтоВозвратАванса ИЛИ ЭтоЧекКоррекции);
		
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeНаличные, ДопускаетсяОплатаНаличнымиСканированиемКода);
	
	Если Не ПриВводеСуммы Тогда
		Если ДоступноПробитиеЧека
			И Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
				= Элементы.ГруппаДанныеПокупателя Тогда
			
			УстановитьФокусНаЭлементеФормыПриВводеОплаты();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЭлементыФормы(ТекущаяСтраница, ДоступностьКоманд)
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(ТекущаяСтраница);
	
	ЭтоОперацияПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	ЭтоОперацияСкупка = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииСкупка(Объект.ВидОперации);
	ЭтоОперацияВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
	ЭтоОперацияВозвратСкупки = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозвратСкупки(Объект.ВидОперации);
	
	СтраницаПустая = Элементы.СтраницаПустая;
	Если РежимНачальнойСтраницы = 1 И НЕ РежимЗаказа Тогда
		СтраницаПустая = Элементы.СтраницаОбщая;
	КонецЕсли;
	
	Если ТекущаяСтраница = СтраницаПустая Тогда
		
		Если ЭтоОперацияПродажа Тогда
			РежимЧека = "Продажа";
			ОпределитьИспользованиеАвтоматическихСкидок();
		ИначеЕсли ЭтоОперацияВозврат Тогда
			РежимЧека = "Возврат";
		ИначеЕсли ЭтоОперацияСкупка Тогда
			РежимЧека = "Скупка";
		ИначеЕсли ЭтоОперацияВозвратСкупки Тогда
			РежимЧека = "ВозвратСкупки";
		Иначе
			РежимЧека = "Продажа";
		КонецЕсли;
		
		ОформитьРежимНовогоЧека(РежимЧека);
		
	КонецЕсли;
	
	ПереключитьВРежимПлитки();
	
	УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.НайтиВЧеке, ДоступностьКоманд);
	УстановитьДоступностьЭлементаФормы(Элементы.УдалитьЧек, ДоступностьКоманд);
	УстановитьДоступностьЭлементаФормы(Элементы.ВвестиКомментарийКЧеку, ДоступностьКоманд);
	
	ДоступностьОтложитьЧек = Истина;
	
	Если ЭтоОплатаРассрочки ИЛИ ПриемАванса ИЛИ ПриемАвансаПоЗаказу ИЛИ ЭтоВозвратАванса ИЛИ ЭтоЗачетАванса Тогда
		ДоступностьОтложитьЧек = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ОтложитьЧек, ДоступностьОтложитьЧек);
	
	ДоступноПрименениеСкидкиНаЧек = ДопускаетсяПрименениеСкидок
		И (Объект.Товары.Количество() > 0);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРучнаяСкидкаНаТовар, ДоступноПрименениеСкидкиНаЧек);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, ДоступноПрименениеСкидкиНаЧек);
	УстановитьДоступностьЭлементаФормы(Элементы.УправляемыеСкидки, ЭтоОперацияПродажа И Объект.Товары.Количество() > 0);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварУправляемая, ЭтоОперацияПродажа И Объект.Товары.Количество() > 0);
	ВидимостьСкидок = Ложь;
	Если Не ПолныйРасчетСкидок И ИспользоватьАвтоматическиеСкидки Тогда
		ВидимостьСкидок = ЭтоОперацияВозврат И ИспользоватьАвтоматическиеСкидкиПриВозврате ИЛИ ЭтоОперацияПродажа;
	КонецЕсли;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКнопкиРасчетаСкидок, ВидимостьСкидок);
	ВидимостьСкидок = ОтображатьСкидкиВЧеке(ЭтоОперацияПродажа, ЭтоОперацияВозврат);
	УстановитьВидимостьЭлементаФормы(Элементы.ТоварыГруппаОтображенияСкидок, ВидимостьСкидок);
	
	УстановитьТекущийЭлементПриНезаполненнойЦенеИлиКоличестве();
	НастроитьИнтерфейсРежимаКассыСамообслуживанияКлиент();
	УстановитьВидимостьПромокодов(РежимКассыСамообслуживания);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементПриНезаполненнойЦенеИлиКоличестве()
	
	Если РежимПлитки Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Цена = 0 И Элементы.ТекущийТоварЦенаИзКарточки.Доступность Тогда
		ТекущийЭлемент = Элементы.ТекущийТоварЦенаИзКарточки;
	ИначеЕсли ТекущиеДанные.Количество = 0 Тогда
		Если Элементы.ПолучитьВес.Видимость И ТекущиеДанные.Весовой Тогда
			ТекущийЭлемент = Элементы.ПолучитьВес;
		Иначе
			ТекущийЭлемент = Элементы.ТекущийТоварКоличество;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоРежимБезАктивацииПоляКоличество(Форма)
	
	Возврат (Форма.РежимПлитки ИЛИ Форма.СенсорныйЭкран ИЛИ Форма.РежимПоказаСкидок);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущийЭлементКоличество(Форма)
	
	Если ЭтоРежимБезАктивацииПоляКоличество(Форма)
			Или (НЕ Форма.РежимКассыСамообслуживания И Форма.РежимВыбораПодарка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.СтраницаОбщая
		Или Не Форма.Элементы.СтраницаОбщая.Доступность Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.ТекущийТоварКоличество.Доступность = Истина;
	Форма.ТекущийЭлемент = Форма.Элементы.ТекущийТоварКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимНаВозврат()
	
	Если Не РаботаСЧекомЗавершена() Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимПлитки Тогда
		ПереключитьНаРежимПлиткиИзПалитры();
	КонецЕсли;
	
	ПользовательДоЗаменыПрав = Объект.ПользовательБД;
	КассирДоЗаменыПрав = Объект.Кассир;
	
	НеобходимоеПраво = "ПравоЧекНаВозвратРМК";
	Если ЕстьПравоНаДействие(НеобходимоеПраво) Тогда
		ВыбратьЧекНаВозврат();
	Иначе
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЭлементыВРежимеВозврат()
	
	Если НЕ ЭтоЧекКоррекции Тогда
		
		Элементы.ГруппаИнфо.ЦветФона = ЦветаФормы.ФонРежимаВозврат;
		
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьГруппыОперации(Элементы);
		УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварЦенаИзКарточки, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКоманднаяПанельКарта, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.УправляемыеСкидки, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварУправляемая, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаВРассрочку, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.Предоплата, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатомНСПК, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.Безнал, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ЗачетАванса, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКредитом, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаБонусами, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаЗаменаТоваров, ИспользоватьЗаменуТоваров);
		УстановитьВидимостьЭлементаФормы(Элементы.РаспечататьЗаявлениеНаВозврат, НЕ ЭтоЧекКоррекции);
		УстановитьВидимостьЭлементаФормы(Элементы.ПоказатьРассчитанныеСкидки, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ПоказатьСкидкиНаЧек, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.СуммаСкидкиЗначение, Истина);
		
	Иначе
		
		ДанныеКартыЗаполнены = ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеЛояльностиЗаполнены(ЭтотОбъект);
		
		Элементы.ГруппаИнфо.ЦветФона = ЦветаФормы.ФонРежимаКоррекция;
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаНал, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаНал, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаКартой, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаКартой, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварЦенаИзКарточки, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварПроцент, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварСумма, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ВвестиДанныеПокупателя, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаБонусами, ДанныеКартыЗаполнены);
		
		УстановитьВидимостьЭлементаФормы(Элементы.ОтложитьЧек, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeКарта, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeНаличные, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ОтменитьИзмененияЧека, Истина);
		
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Оплата Цикл
		
		ЭтоОплатаНаличными = ОбщегоНазначенияРМККлиент.ЭтоОплатаНаличными(Строка.ВидОплаты);
		ЭтоОплатаПлатежнойКартой = ОбщегоНазначенияРМККлиент.ЭтоОплатаПлатежнойКартой(Строка.ВидОплаты);
		ЭтоОплатаЗачетАванса = ОбщегоНазначенияРМККлиент.ЭтоОплатаЗачетомАванса(Строка.ВидОплаты);
		ЭтоОплатаБезналичными = ОбщегоНазначенияРМККлиент.ЭтоОплатаБезналичными(Строка.ВидОплаты);
		ЭтоОплатаВРассрочку = ОбщегоНазначенияРМККлиент.ЭтоОплатаВРассрочку(Строка.ВидОплаты);
		ЭтоОплатаВстречнымПредоставлением = ОбщегоНазначенияРМККлиент.ЭтоОплатаВстречнымПредоставлением(Строка.ВидОплаты);
		ЭтоОплатаКредитом = ОбщегоНазначенияРМККлиент.ЭтоОплатаКредитом(Строка.ВидОплаты);
		ЭтоОплатаПодарочнымСертификатом = ОбщегоНазначенияРМККлиент.ЭтоОплатаПодарочнымСертификатом(Строка.ВидОплаты);
		
		Если ЭтоОплатаНаличными Тогда
			
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаНал, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаНал, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
			
			СуммаВозврата = Строка(Строка.Сумма);
			ТекстПодсказки = Элементы.СуммаОплаченоНал.Подсказка + СтрШаблон(" (%1 р.)", СуммаВозврата);
			Элементы.СуммаОплаченоНал.Подсказка = ТекстПодсказки;
			
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПодсказкаНаличныеВКассеОплатаНаличными, Истина);
		КонецЕсли;
		
		Если ЭтоОплатаПлатежнойКартой Тогда
			
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаКартой, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаКартой, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКоманднаяПанельКарта, Истина);
			
			НомерКарты = НСтр("ru = '*'") + Прав(Строка.НомерПлатежнойКарты, 4);
			ТекстПодсказки = Элементы.СуммаОплаченоБН.Подсказка + СтрШаблон(НСтр("ru = ' (%1)'"), НомерКарты);
			
			СуммаВозврата = Строка(Строка.Сумма);
			ТекстПодсказки = Элементы.СуммаОплаченоБН.Подсказка + СтрШаблон(" (%1 р.)", СуммаВозврата);
			
			Элементы.СуммаОплаченоБН.Подсказка = ТекстПодсказки;
			
		КонецЕсли;
		
		Если ЭтоОплатаВРассрочку Тогда
			
			Если Объект.ОперацияСДенежнымиСредствами Тогда
				
				УстановитьДоступностьЭлементаФормы(Элементы.Предоплата, Истина);
				УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаВРассрочку, Истина);
				Элементы.СуммаОплаченоВРассрочку.Заголовок = НСтр("ru = 'Возврат предоплаты'");
				Элементы.СуммаОплаченоВРассрочку.Подсказка = НСтр("ru = 'Возврат предоплаты'");
				Элементы.СуммаОплаченоВРассрочку.Доступность = Ложь;
				
			КонецЕсли;
			
			Если Не Объект.ОперацияСДенежнымиСредствами И Не ЗначениеЗаполнено(Объект.ДокументРасчета) Тогда
				
				УстановитьДоступностьЭлементаФормы(Элементы.ОплатаВРассрочку, Истина);
				УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаВРассрочку, Истина);
				Элементы.СуммаОплаченоВРассрочку.Заголовок = НСтр("ru = 'Возврат рассрочки'");
				Элементы.СуммаОплаченоВРассрочку.Подсказка = НСтр("ru = 'Возврат рассрочки'");
				Элементы.СуммаОплаченоВРассрочку.Доступность = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЭтоОплатаЗачетАванса Тогда
			
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаЗачетАванса, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаЗачетАванса, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ЗачетАванса, Истина);
			
		КонецЕсли;
		
		Если ЭтоОплатаБезналичными Тогда
			
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаБезнал, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаБезнал, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.Безнал, Истина);
			
		КонецЕсли;
		
		Если ЭтоОплатаКредитом Тогда
			
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаКредитом, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаКредитом, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКредитом, Истина);
			
		КонецЕсли;
		
		Если Строка.ВидОплаты = ВидОплатыНСПК
			И ЗначениеЗаполнено(ВидОплатыНСПК) Тогда
			
			ИдентификаторКорзиныНСПК = Строка.СсылочныйНомер;
			НастроитьЭлементыВРежимеПроверкаСертификатаНСПК(Истина, Истина);
			
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПодтверждениеНСПК);
			
			СуммаОплаченоСертификатамиНСПК = Строка.Сумма;
			
			УстановитьЗаголовкиОплаты();
			ПодготовитьПредварительноеОдобрениеНСПК();
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаЗаменаТоваров, Ложь);
			
		КонецЕсли;
		
		Если ЭтоОплатаВстречнымПредоставлением Тогда
			ЕстьОплатаВстречнымПредоставлением = Истина;
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
		КонецЕсли;
		
		Если ЭтоОплатаПодарочнымСертификатом Тогда
			
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, Ложь);
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаКартой, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКоманднаяПанельКарта, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаНал, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаНал, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.ОперацияСДенежнымиСредствами И НЕ ЭтоВозвратАванса Тогда
		
		УстановитьДоступностьЭлементаФормы(Элементы.Предоплата, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаПредоплата, Истина);
		Элементы.СуммаОплаченоВРассрочку.Заголовок = НСтр("ru = 'Возврат предоплаты'");
		Элементы.СуммаОплаченоВРассрочку.Подсказка = НСтр("ru = 'Возврат предоплаты'");
		
	КонецЕсли;
	
	Если Объект.Оплата.Количество() = 0 Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаНал, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаНал, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
		Если ИспользоватьОплатуНаличными Тогда
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПодсказкаНаличныеВКассеОплатаНаличными, Истина);
		КонецЕсли;
		
		Если ИспользоватьОплатуПлатежнымиКартами Тогда
			
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаКартой, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаКартой, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКоманднаяПанельКарта, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	НастроитьВидимостьОплатыQRКодом();
	НастроитьВидимостьЗапросаБалансаСертификата();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЭлементыВРежимеПродажа()
	
	Элементы.ГруппаИнфо.ЦветФона = ЦветаФормы.ФонРежимаПродажа;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварПроцент, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварСумма, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКоманднаяПанельКарта, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатомНСПК, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКредитом, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаБонусами, Истина); 
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаЗаменаТоваров, ЭтоЗаменаТоваров);
	
	НастроитьВидимостьОплатыQRКодом();
	ОпределитьИспользованиеАвтоматическихСкидок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимНаПродажа()
	
	Если Не РаботаСЧекомЗавершена() Тогда
		Возврат;
	КонецЕсли;
	
	ОформитьРежимНовогоЧека("Продажа");
	
	НачинатьНовыйЧекВРежимеСкупка = Ложь;
	
	НастроитьЭлементыВРежимеПродажа();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктивностьСтроки(НаПоследнейСтроке = Ложь)
	
	Если Объект.Товары.Количество() > 0 Тогда
		ИндексСтроки = ?(НаПоследнейСтроке, Объект.Товары.Количество() - 1, 0);
		ИдентификаторСтрокиКорзины = Объект.Товары[ИндексСтроки].ПолучитьИдентификатор();
		Если Элементы.Товары.ТекущаяСтрока = ИдентификаторСтрокиКорзины Тогда
			ТоварыПриАктивизацииСтроки(Элементы.Товары);
		Иначе
			Элементы.Товары.ТекущаяСтрока = ИдентификаторСтрокиКорзины;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытыСообщенияОбОшибках
		= (ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ГруппаИнфоОшибка);
	
	Если НЕ ОткрытыСообщенияОбОшибках Тогда
		УстановитьФокусНаТовареТребующемВводаМарки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоТекущемуПользователю()
	
	СтраницаДляОтображения = Элементы.СтраницаВводКассира;
	ТорговыйОбъектДляВхода = Объект.ТорговыйОбъект;
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	
	Если ЗначениеЗаполнено(Объект.ПользовательБД) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Кассир) Тогда
			Объект.Кассир = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПользовательБД, "ФизическоеЛицо");
			Если ЗначениеЗаполнено(Объект.Кассир) Тогда
				КассирДляВхода = Объект.Кассир;
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		ФизЛицоПользователя = Неопределено;
		ОбщегоНазначенияРМКПереопределяемый.ОпределитьФизЛицоПользователя(ФизЛицоПользователя, ЭтотОбъект);
		
		Если ЗначениеЗаполнено(ФизЛицоПользователя) Тогда
			
			Объект.Кассир = ФизЛицоПользователя;
			Объект.ПользовательБД = Пользователи.ТекущийПользователь();
			КассирДляВхода = Объект.Кассир;
			
			Если ПараметрыОткрытияФормы = Неопределено Тогда
				ПараметрыОткрытияФормы = Новый Структура();
			КонецЕсли;
			
			ПараметрыОткрытияФормы.Вставить("ПроверитьКассовуюСмену");
		КонецЕсли;
			
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТорговыйОбъектДляВхода) И ЗначениеЗаполнено(КассирДляВхода) Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнфо, Ложь);
		Если РежимНачальнойСтраницы = 1 Тогда
			СтраницаДляОтображения = Элементы.СтраницаОбщая;
		Иначе
			СтраницаДляОтображения = Элементы.СтраницаПустая;
		КонецЕсли;
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(СтраницаДляОтображения);
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьГруппыОперации(Элементы);
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводКассира Тогда
		Если Не ЗначениеЗаполнено(ТорговыйОбъектДляВхода) Тогда
			ТекущийЭлемент = Элементы.ТорговыйОбъектДляВхода;
		ИначеЕсли Не ЗначениеЗаполнено(КассирДляВхода) Тогда
			ТекущийЭлемент = Элементы.КассирДляВхода;
		Иначе
			ТекущийЭлемент = Элементы.КодКассира;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьТаблицуРолейПользователя();
	НастроитьФормуВСоответствииСПравамиПользователя();
	НастроитьВидимостьГруппыДанныеДляТекущейСтроки();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьГруппыДанныеДляТекущейСтроки()
	
	Если Не ЗначениеЗаполнено(ТекущаяНастройкаРМК) Тогда
		Возврат;
	КонецЕсли;
	
	СписокРеквизитов = "РазрешитьВыборПродавца, РазрешитьВыборСклада, РазрешитьВыборЯчейки";
	ДанныеНастройкиРМК = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяНастройкаРМК, СписокРеквизитов);
	
	Если ДанныеНастройкиРМК.РазрешитьВыборПродавца ИЛИ ДанныеНастройкиРМК.РазрешитьВыборСклада
		ИЛИ ДанныеНастройкиРМК.РазрешитьВыборЯчейки Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаДанныеДляТекущейСтроки, Истина);
	КонецЕсли;
	
	ВидимостьПродавцов = Истина;
	Если НеИспользоватьПродавцов Тогда
		ВидимостьПродавцов = НеИспользоватьПродавцов И ИспользоватьСерверЛояльностиПолучательДанных И ДанныеНастройкиРМК.РазрешитьВыборПродавца;
	Иначе
		ВидимостьПродавцов = ДанныеНастройкиРМК.РазрешитьВыборПродавца;
	КонецЕсли;
	
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницыВыборПродавца, ВидимостьПродавцов);
	
	Если ДанныеНастройкиРМК.РазрешитьВыборСклада Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.СтраницыВыборСклада, Истина);
		НеобходимВводСклада = Истина;
	КонецЕсли;
	
	Если ДанныеНастройкиРМК.РазрешитьВыборЯчейки Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.СтраницыВыборЯчейки, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуВСоответствииСПравамиПользователя()
		
	УстройстваРаспознаванияРабочегоМеста
		= ОбщегоНазначенияРМК.ПолучитьПодключенноеОборудованиеПоТипу("УстройствоРаспознавания", РабочееМесто);
	
	ВключитьОбучениеУстройствРаспознавания = (УстройстваРаспознаванияРабочегоМеста.Количество() > 0
		И Не СписокРолейПользователя.НайтиПоЗначению("ОбучениеУстройствРаспознаванияРМК") = Неопределено);
	
	ПравоИзменятьЦенуРМК = НЕ (СписокРолейПользователя.НайтиПоЗначению("ПравоИзменятьЦенуРМК") = Неопределено);
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварЦенаИзКарточки, ПравоИзменятьЦенуРМК);
	
	ОбщегоНазначенияРМКПереопределяемый.УстановитьЗначениеПримененияРучнойСкидки(ЭтотОбъект);
	ДоступныРучныеСкидки = ДопускаетсяПрименениеСкидок И Объект.Товары.Количество() > 0;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРучнаяСкидкаНаТовар, ДоступныРучныеСкидки);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, ДоступныРучныеСкидки);
	УстановитьВидимостьЭлементаФормы(Элементы.ОбучениеУстройствРаспознавания, ВключитьОбучениеУстройствРаспознавания);
	
	ПравоПросмотраОстаткаНаличныхРМК = НЕ (СписокРолейПользователя.НайтиПоЗначению("ПравоПросмотраОстаткаНаличныхРМК") = Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьНачальнуюСтраницу(НоваяСтраница)
	
	Если НЕ ЗначениеЗаполнено(Объект.Кассир) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборКассыККМ Тогда
		Если Объект.Товары.Количество() > 0 Тогда
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
			УстановитьДоступностьЭлементаФормы(Элементы.УдалитьЧек, Истина);
		Иначе
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(НоваяСтраница);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ НоваяСтраница = Элементы.СтраницаВводКассира Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьГруппыОперации(Элементы);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьЗаменитьПраваКассира(НеобходимоеПраво)
	
	КодДляЗаменыПрав = НСтр("ru = ''");
	ТекущаяОперация = "";
	
	ТекстЗаменыПравДополнительный =
		?(РежимКассыСамообслуживания, "", НСтр("ru='и отсканируйте его карту или введите персональный код'"));
		
	Если ЗначениеЗаполнено(НаименованиеПользователяПриЗапросеПрав) Тогда
		НаправлениеОбращения = НаименованиеПользователяПриЗапросеПрав;
	Иначе
		НаправлениеОбращения = ?(РежимКассыСамообслуживания, НСтр("ru='сотруднику магазина'"), НСтр("ru='администратору'"));
	КонецЕсли;
	
	Если НеобходимоеПраво = "ПравоУдалитьСтрокуРМК" Тогда
		
		ТекущаяОперация = "УдалитьСтрокуРМК";
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='Для удаления товара обратитесь к %1'"), НаправлениеОбращения);
		ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный);
		
	ИначеЕсли НеобходимоеПраво = "ПравоУдалитьЧекРМК" Тогда
		
		ТекущаяОперация = "УдалитьЧекРМК";
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='Для удаления чека обратитесь к %1'"), НаправлениеОбращения);
		ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный);
		
	ИначеЕсли НеобходимоеПраво = "ПравоОтложитьЧекРМК" Тогда
		
		ТекущаяОперация = "ОтложитьЧекРМК";
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='Чтобы отложить чек обратитесь к %1'"), НаправлениеОбращения);
		ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный);
		
	ИначеЕсли НеобходимоеПраво = "ПравоПродолжитьЧекРМК" Тогда
		
		ТекущаяОперация = "ПродолжитьЧекРМК";
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='Чтобы продолжить чек обратитесь к %1'"), НаправлениеОбращения);
		ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный);
		
	ИначеЕсли НеобходимоеПраво = "ПравоОткрытиеСлужебныхДействийКСО" Тогда
		
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='Для открытия служебных операций требуется подтверждение сотрудника.'"));
		ВывестиСтраницуВводаКассира(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный, ЗаголовокЗаменыПрав);
		ТекущаяОперация = "ОткрытиеСлужебныхДействийКСО";
		ДатаВремяПереходаКДействиямСотрудника = ОбщегоНазначенияКлиент.ДатаСеанса();
		
	ИначеЕсли НеобходимоеПраво = "ПравоЧекНаВозвратРМК" Или НеобходимоеПраво = "ПравоНаВозвратБезЧекаРМК" Тогда
		
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='Для возврата обратитесь к %1'"), НаправлениеОбращения);
		ЗаголовокВводКассира
			= СтрШаблон(НСтр("ru='Для возврата обратитесь к %1 %2'"), НаправлениеОбращения, ТекстЗаменыПравДополнительный);
		ВывестиСтраницуВводаКассира(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный, ЗаголовокВводКассира);
		ТекущаяОперация = ?(НеобходимоеПраво = "ПравоЧекНаВозвратРМК", "ЧекНаВозвратРМК", "ВозвратБезЧекаРМК");
		
	ИначеЕсли НеобходимоеПраво = "ПравоЧекКоррекцииРМК" Тогда
		
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='Для коррекции обратитесь к %1'"), НаправлениеОбращения);
		ЗаголовокВводКассира
			= СтрШаблон(НСтр("ru='Для коррекции обратитесь к %1 %2'"), НаправлениеОбращения, ТекстЗаменыПравДополнительный);
		ВывестиСтраницуВводаКассира(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный, ЗаголовокВводКассира);
		ТекущаяОперация = "ЧекКоррекцииРМК";
		
	ИначеЕсли НеобходимоеПраво = "ПравоРедактироватьКартуРМК" Тогда
		
		ТекущаяОперация = "РедактироватьКартуРМК";
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='Для редактирования данных карты обратитесь к %1'"), НаправлениеОбращения);
		ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный);
		
	ИначеЕсли НеобходимоеПраво = "ПравоВыбораПриПоискеПоШтрихкодуРМК" Тогда
		
		ТекущаяОперация = "ВыборПриПоискеПоШтрихкодуРМК";
		ЗаголовокЗаменыПрав
			= СтрШаблон(НСтр("ru='По штрихкоду найдено несколько значений. Для выбора обратитесь к %1'"), НаправлениеОбращения);
		ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный);
		
	ИначеЕсли НеобходимоеПраво = "ПравоПодтвержденияВозрастаРМК" Тогда
		
		НачалоЗаголовка = НСтр("ru='Проверка покупателя.'");
		Если РезультатКонтроляПродаж.ОграниченияПродаж.Количество() > 0
				И РезультатКонтроляПродаж.ОграниченияПродаж[0].ВозрастКонтроля > 0 Тогда
			НачалоЗаголовка = НСтр("ru='Подтверждение возраста.'");
		КонецЕсли;
		
		ТекущаяОперация = "ПодтверждениеВозрастаРМК";
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='%1 Обратитесь к %2'"), НачалоЗаголовка, НаправлениеОбращения);
		ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный);
		
	ИначеЕсли НеобходимоеПраво = "ПравоОбработкиЗапретаПродажРМК" Тогда
		
		ТекущаяОперация = "ОбработкаЗапретаПродажРМК";
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='Отложите товар и обратитесь к %1'"), НаправлениеОбращения);
		ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный);
		
	ИначеЕсли НеобходимоеПраво = "ПравоВыбораСерииРМК" Тогда
		
		ТекущаяОперация = "ВыборСерииРМК";
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='Для выбора серии обратитесь к %1'"), НаправлениеОбращения);
		ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный);
		
	ИначеЕсли НеобходимоеПраво = "ПравоРучноеПодтверждениеМаркиРМК" Тогда
		
		ТекущаяОперация = "РучноеПодтверждениеМаркиРМК";
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='Ошибка при проверке марки. Обратитесь к %1'"), НаправлениеОбращения);
		ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный);
		
	ИначеЕсли НеобходимоеПраво = "ПравоОткрытиеСтраницыОшибкиРМК" Тогда
		
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='%1 Обратитесь к %2'"),
			ПараметрыИнфоОшибки.ТекстЗаголовка, НаправлениеОбращения);
		ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный);
		
	ИначеЕсли НеобходимоеПраво = "ВводВесаТовара" Тогда
		
		ТекущаяОперация = "ВводВесаТовара";
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='Для ввода веса обратитесь к %1'"), НаправлениеОбращения);
		ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный);
		
	ИначеЕсли НеобходимоеПраво = "ИзменениеКоличестваВМеньшуюСторону"
			Или НеобходимоеПраво = "УменьшениеКоличестваНаЕдиницу" Тогда
		
		ТекущаяОперация = НеобходимоеПраво;
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='Для уменьшения количества товара обратитесь к %1'"), НаправлениеОбращения);
		ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный);
		
	ИначеЕсли НеобходимоеПраво = "ПродолжитьБезРасчетаСкидок" Тогда
		
		ТекущаяОперация = НеобходимоеПраво;
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='Для продолжения без расчета скидок обратитесь к %1'"), НаправлениеОбращения);
		ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный);
		
	ИначеЕсли НеобходимоеПраво = "ПравоИзменятьОстатокЧастичноеВыбытиеРМК" Тогда
		
		ТекущаяОперация = "ИзменениеОстаткаЧастичноеВыбытиеРМК";
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='Для изменения данных по кегу обратитесь к %1'"), НаправлениеОбращения);
		ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный);
		
	ИначеЕсли НеобходимоеПраво = "ПравоПодтвержденияТовараКСО" Тогда
		
		ТекущаяОперация = "ПодтверждениеТовараКСО";
		ЗаголовокЗаменыПрав = СтрШаблон(НСтр("ru='Отложите товар и обратитесь к %1'"), НаправлениеОбращения);
		ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСтраницуВводаКассира(ЗаголовокЗаменыПрав, ТекстЗаменыПрав, ЗаголовокВводКассира)
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаВводКассира);
	Если РежимКассыСамообслуживания Тогда
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	Иначе
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	КонецЕсли;
	Элементы.ДекорацияЗаголовокЗаменаПрав.Заголовок = ЗаголовокЗаменыПрав;
	Элементы.ДекорацияТекстЗаменаПрав.Заголовок = ТекстЗаменыПрав;
	Элементы.ДекорацияЗаголовокВводКассира.Заголовок = ЗаголовокВводКассира;
	Элементы.ЗавершитьРаботу.Заголовок = НСтр("ru='Отмена'");
	Элементы.Войти.Заголовок = ?(РежимКассыСамообслуживания, НСтр("ru='Подтвердить'"), НСтр("ru='Продолжить'"));
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПараметрыДляВхода, Ложь);
	КассирДляВхода = Неопределено;
	КодКассира = "";
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуПослеЗаменыПрав()
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если Не ЗначениеЗаполнено(Объект.Кассир) Тогда
		КодДляЗаменыПрав = "";
		ТекущийЭлемент = Элементы.КодДляЗаменыПрав;
		Возврат;
	КонецЕсли;
	
	Если Не ТекущаяОперация = "" И Не ТекущаяОперацияВыполнена Тогда
		ЗаголовокСообщения = НСтр("ru='Операция не выполнена.'");
		ТекстПояснения = НСтр("ru='Нет необходимых прав.'");
		КартинкаСообщения = БиблиотекаКартинок.Ошибка32;
		ПоказатьОповещениеПользователя(ЗаголовокСообщения, ,ТекстПояснения , КартинкаСообщения);
	КонецЕсли;
	
	НастроитьДоступностьЭлементовПриПоискеПоШтрихкоду(Истина);
	Если Не ТекущаяОперация = "ПродолжитьБезРасчетаСкидок" Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
	КонецЕсли;
	
	Если ТекущаяОперация = "ЧекНаВозвратРМК" Или ТекущаяОперация = "ВозвратБезЧекаРМК" Тогда
		
		Если ТекущаяОперацияВыполнена Тогда
			ОткрытьОбщуюСтраницу(Истина);
			Если ТекущаяОперация = "ЧекНаВозвратРМК" Тогда
				ВыбратьЧекНаВозврат();
			Иначе
				ПереключитьФормуВРежимВозвратБезЧека();
			КонецЕсли;
		Иначе
			ТекущаяОперация = "";
			ОткрытьОбщуюСтраницу();
		КонецЕсли;
		СформироватьЗаголовокВводКассира();
		СформироватьЗаголовок();
		
	ИначеЕсли ТекущаяОперация = "ЧекКоррекцииРМК" Тогда
		
		Если ТекущаяОперацияВыполнена Тогда
			ОткрытьОбщуюСтраницу(Истина);
			ВыбратьЧекКоррекции();
		Иначе
			ТекущаяОперация = "";
			ОткрытьОбщуюСтраницу();
		КонецЕсли;
		СформироватьЗаголовокВводКассира();
		СформироватьЗаголовок();
		
	ИначеЕсли ТекущаяОперация = "УдалитьСтрокуРМК" И ТекущаяОперацияВыполнена Тогда
		
		ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
		ПересчитатьСуммыПослеУдаленияСтроки();
		
	ИначеЕсли ТекущаяОперация = "УдалитьЧекРМК" И ТекущаяОперацияВыполнена Тогда
		
		ПереключатьсяВРежимПлитки = ОсновнойПодборПлиточный;
		ПлиткаДомойКлиент();
		
		ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнфо, Ложь);
		Если РежимНачальнойСтраницы = 1 Тогда
			НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Ложь);
		Иначе
			НастроитьЭлементыФормы(Элементы.СтраницаПустая, Ложь);
		КонецЕсли;
		
		СформироватьЗаголовок(НСтр("ru='Продажа'"));
		НастроитьЭлементыВРежимеПродажа();
		РазблокироватьОбъектСервераЛояльности("clientbonuses");
		СписатьРазблокироватьПодарочныеСертификаты();
		ОчиститьДанныеПромокодов(Истина);
		ПривестиПараметрыПробитияЧекаКЗначениямПоУмолчанию();
		
	ИначеЕсли ТекущаяОперация = "ОтложитьЧекРМК" И ТекущаяОперацияВыполнена Тогда
		
		ОтложитьЧекКлиент();
		
	ИначеЕсли ТекущаяОперация = "ПродолжитьЧекРМК" И ТекущаяОперацияВыполнена Тогда
		
		ОтложенныеЧекиКлиент();
		
	ИначеЕсли ТекущаяОперация = "ОткрытиеСлужебныхДействийКСО" И ТекущаяОперацияВыполнена Тогда
		
		ОткрытьОбщуюСтраницу();
		ОткрытьФормуОперацийСотрудника();
		ТекущаяОперация = "";
		
	ИначеЕсли ТекущаяОперация = "РедактироватьКартуРМК" И ТекущаяОперацияВыполнена Тогда
		
		ПоказатьПанельВводаДанныхПокупателя();
		
	ИначеЕсли ТекущаяОперация = "ВыборПриПоискеПоШтрихкодуРМК" И ТекущаяОперацияВыполнена Тогда
		
		Если Не ПараметрыТекущейОперации = Неопределено Тогда
			ОбработатьДанныеПоКодуКлиент(ПараметрыТекущейОперации.СтруктураПараметровКлиента,
				ПараметрыТекущейОперации.ПараметрыДляОбработкиШтрихкода);
				
			ОбработатьШтрихкодЗавершение(ПараметрыТекущейОперации.ПараметрыДляОбработкиШтрихкода);
			ПараметрыТекущейОперации = Неопределено;
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "ПодтверждениеВозрастаРМК" И ТекущаяОперацияВыполнена Тогда
		
		Если Не ПараметрыТекущейОперации = Неопределено Тогда
			ПереключитьНаСтраницуПодтвержденияВозраста(ПараметрыТекущейОперации.СтрокаОграничения, Истина);
			ПараметрыТекущейОперации = Неопределено;
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "ОбработкаЗапретаПродажРМК" И ТекущаяОперацияВыполнена Тогда
		
		Если Не ПараметрыТекущейОперации = Неопределено Тогда
			ОткрытьСтраницуЗапретаПродажиПоВремени(ПараметрыТекущейОперации.СтрокаОграничения, Истина);
			ПараметрыТекущейОперации = Неопределено;
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "ВыборСерииРМК" И ТекущаяОперацияВыполнена Тогда
		
		Если Не ПараметрыТекущейОперации = Неопределено Тогда
			СтрокаПоИД = Объект.Товары.НайтиПоИдентификатору(ПараметрыТекущейОперации.ИдентификаторСтроки);
			ОткрытьСтраницуСерии(СтрокаПоИД);
			ПараметрыТекущейОперации = Неопределено;
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "РучноеПодтверждениеМаркиРМК" И ТекущаяОперацияВыполнена Тогда
		
		Если Не ПараметрыТекущейОперации = Неопределено Тогда
			ОбработатьОшибкуПроверкиМарки(ПараметрыТекущейОперации.Контекст, Элементы[ПараметрыТекущейОперации.СтраницаДиалога]);
			ПараметрыТекущейОперации = Неопределено;
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "ВводВесаТовара" Тогда
		
		НачатьВводВесаВРежимеКСО();
		
	ИначеЕсли ТекущаяОперация = "ПоказатьНастройки" Тогда
	
		НеобходимоеПраво = "ПравоОткрытиеСлужебныхДействийКСО";
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
	
	ИначеЕсли ТекущаяОперация = "ИзменениеКоличестваВМеньшуюСторону" Тогда
		Если ТекущаяОперацияВыполнена Тогда
		
			ОбработатьИзменениеКоличестваТовара(ТекущаяСтрокаРедактированияКоличества);
			СохранитьРазрешениеНаУменьшениеКоличестваТекущейСтроки(ТекущаяСтрокаРедактированияКоличества);
			
		Иначе
			
			ВернутьСостояниеДоНачалаОперации();
			
		КонецЕсли;
	ИначеЕсли ТекущаяОперация = "УменьшениеКоличестваНаЕдиницу" И ТекущаяОперацияВыполнена Тогда
		
		ДополнительныеПараметры = Новый Структура("УвеличитьКоличество", Ложь);
		ПересчитатьИзменениеКоличестваСВопросомОСкидках(ДополнительныеПараметры);
		СохранитьРазрешениеНаУменьшениеКоличестваТекущейСтроки();
		
	ИначеЕсли ТекущаяОперация = "ПродолжитьБезРасчетаСкидок" Тогда
		Если ТекущаяОперацияВыполнена Тогда
			ПродолжитьБезРасчетаКлиент();
		Иначе
			ВернутьПредыдущийСлойПанелиОплаты(Элементы.ГруппаЗаменаПрав);
			НастроитьДоступностьЭлементовПриПоискеПоШтрихкоду(Ложь, Истина);
		КонецЕсли;
	ИначеЕсли ТекущаяОперация = "ИзменениеОстаткаЧастичноеВыбытиеРМК" И ТекущаяОперацияВыполнена Тогда
		СтрокаТаблицыТоваров = Элементы.Товары.ТекущиеДанные;
		
		Если СтрокаТаблицыТоваров <> Неопределено Тогда
			ОбработкаОповещения = Новый ОписаниеОповещения("РаботаСОборудованиемРозливаЗавершение", ЭтотОбъект);
			ОбщегоНазначенияРМККлиентПереопределяемый.ОткрытьКегОборудованияРозлива(ЭтотОбъект, СтрокаТаблицыТоваров, ОбработкаОповещения);
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "ПодтверждениеТовараКСО" Тогда
		
		ПереключитьНаСтраницуПодтвержденияОперации();
		
	ИначеЕсли Не ПараметрыИнфоОшибки = Неопределено Тогда
		
		ОткрытьСтраницуИнфоОшибка(ПараметрыИнфоОшибки.ТекстЗаголовка,
			ПараметрыИнфоОшибки.ТекстОшибки, ПараметрыИнфоОшибки.ПараметрыОшибки);
		ПараметрыИнфоОшибки = Неопределено;
		Возврат;
		
	КонецЕсли;
	
	ОтразитьОстаткиНаличныхДенежныхСредствНаФорме(Объект.Организация, Объект.КассаККМ);
	
	Если Не ТекущаяОперация = "ОткрытиеСлужебныхДействийКСО" Тогда
		ТекущаяОперация = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбщуюСтраницу(ЭтоВозврат = Ложь)
	
	НоваяСтраница = Элементы.СтраницаПустая;
	
	Если Объект.Товары.Количество() > 0 Тогда
		НоваяСтраница = Элементы.СтраницаОбщая;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборКассыККМ Тогда
		НоваяСтраница = Элементы.СтраницаВыборКассыККМ;
	ИначеЕсли РежимПлитки ИЛИ РежимНачальнойСтраницы = 1 Тогда
		НоваяСтраница = Элементы.СтраницаОбщая;
	КонецЕсли;
	
	Если ЭтоВозврат Тогда
		ОформитьРежимНовогоЧека("Возврат");
	КонецЕсли;
	
	НастроитьФормуПоТекущемуПользователю();
	НастроитьДоступностьГорячейКлавишиEnter();
	НастроитьНачальнуюСтраницу(НоваяСтраница);
	
	Если ПереключатьсяВРежимПлитки И Не ЭтоВозврат И Не РежимПлитки Тогда
		ПереключитьВРежимПлитки();
	КонецЕсли;
	ОпределитьИспользованиеАвтоматическихСкидок();
	ОтразитьОстаткиНаличныхДенежныхСредствНаФорме(Объект.Организация, Объект.КассаККМ);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаголовокВводКассира()
	
	КодКассира = НСтр("ru = ''");
	
	Если ЗначениеЗаполнено(ОсобыйЗаголовокВводаКассира) Тогда
		Элементы.ДекорацияЗаголовокВводКассира.Заголовок = ОсобыйЗаголовокВводаКассира;
	Иначе
		
		Если Не (ТекущаяОперация = "ЧекНаВозвратРМК" Или ТекущаяОперация = "ВозвратБезЧекаРМК"
				Или ТекущаяОперация = "ЧекКоррекцииРМК") Тогда
			
			Элементы.ЗавершитьРаботу.Заголовок = НСтр("ru='Отмена'");
			Элементы.Войти.Заголовок = НСтр("ru='Войти'");
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПараметрыДляВхода, Истина);
			Элементы.ДекорацияЗаголовокВводКассира.Заголовок =
				НСтр("ru='Для входа отсканируйте персональный код или задействуйте магнитную карту'");
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПереключитьФормуВРежимВозвратБезЧека()
	
	ВывестиИнформациюНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.ВозвратТовара);
	СформироватьЗаголовок(НСтр("ru='Возврат'"));
	Объект.ВидОперации = ОбщегоНазначенияРМККлиент.ВидТекущейОперации(Истина);
	НастроитьФормуВРежимВозвратБезЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуВРежимВозвратБезЧека()
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнфо, Ложь);
	Если РежимНачальнойСтраницы = 1 Тогда
		НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
	Иначе
		НастроитьЭлементыФормы(Элементы.СтраницаПустая, Истина);
	КонецЕсли;
	
	Элементы.ГруппаИнфо.ЦветФона = ЦветаФормы.ФонРежимаВозврат;
	
	ПравоИзменятьЦену = НЕ СписокРолейПользователя.НайтиПоЗначению("ПравоИзменятьЦенуРМК") = Неопределено;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварЦенаИзКарточки, ПравоИзменятьЦену);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРучнаяСкидкаНаТовар, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.УправляемыеСкидки, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварУправляемая, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКоманднаяПанельКарта, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Ложь);
	
	ЭтоВозвратБезОснования = Истина;
	
	Если ИспользоватьОплатуНаличными Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПодсказкаНаличныеВКассеОплатаНаличными, Истина);
	КонецЕсли;
	НастроитьВидимостьОплатыQRКодом();
	НастроитьВидимостьЗапросаБалансаСертификата();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаСтраницуСозданиеКарты()

	ТекстДекорации = "";
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеДисконтнойКартыЗаполнены(ЭтотОбъект) Тогда
		ТекстДекорации = НСтр("ru = 'Чтобы создать новую карту, отмените ввод текущей карты.'");
	КонецЕсли;
	
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ОсновнаяГруппаСозданиеКарты);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПустаяДополнительнаяГруппа);
	НастроитьЦифровуюПанель();
	ИнтерфейсРМКСлужебныйКлиент.УстановитьТекстДекорацииОПерсональныхДанных(Элементы.ДекорацияТекстОПерсональныхДанных,
		ТекстДекорации);
	УстановитьДоступностьГруппыСозданияРеквизитов(Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.СоздатьКарту, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ПечатьСогласияПД, Истина);
	Если ПолеВводаСозданияКартыДоступноИВидимо(Элементы.НоваяКартаНомер) Тогда
		ТекущийЭлемент = Элементы.НоваяКартаНомер;
	Иначе
		ТекущийЭлемент = Элементы.НоваяКартаТелефон;
	КонецЕсли;
	ЭлементВводаДанныхПокупателя = ТекущийЭлемент;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаСтраницуПоискКарты(ДанныеЗаполнены = Ложь)
	
	КнопкаПоискаДоступна = Ложь;
	Если ДанныеЗаполнены Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ОсновнаяГруппаКартаНайдена);
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ДополнительнаяГруппаКартаНайдена);
		УбратьОтображениеПодсказкиОплатитьБонусами();
		ЭлементВводаДанныхПокупателя = Неопределено;
	Иначе
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПоискКарты);
		Если ПанельПокупателяВПроцессеПереходаКОплате И ВертикальнаяОриентация И Не РежимКассыСамообслуживания Тогда
			ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПанельОтказаться);
		Иначе
			ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПустаяДополнительнаяГруппа);
		КонецЕсли;
		КнопкаПоискаДоступна = Истина;
		ТекущийЭлемент = Элементы.СтрокаПоискаКарты;
		ЭлементВводаДанныхПокупателя = ТекущийЭлемент;
	КонецЕсли;
	НастроитьЦифровуюПанель();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаСтраницуОтправкаЧека()
	
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаОтправкаЧека);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПустаяДополнительнаяГруппа);
	НастроитьЦифровуюПанель();
	ТекущийЭлемент = Элементы.ОтправкаЧекаТелефон;
	ЭлементВводаДанныхПокупателя = ТекущийЭлемент;
	
	ИнтерфейсРМКСлужебныйКлиент.НастроитьСвойстваКнопкиПробитьИОтправить(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиВЧекеНажатие()
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
		= Элементы.ГруппаНайтиВЧеке Тогда
		
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево,
			(Не ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатой(ЭтотОбъект)));
		ПредыдущийСлой = Элементы.ОбластьОперативногоУправленияЧеком;
		Если Не (ПредыдущийСлойДоДанныхПокупателя = Неопределено
				Или ПредыдущийСлойДоДанныхПокупателя = Элементы.ГруппаНайтиВЧеке) Тогда
				
			ПредыдущийСлой = ПредыдущийСлойДоДанныхПокупателя;
			
		КонецЕсли;
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, ПредыдущийСлой);
		
	Иначе
		
		ПредыдущийСлойДоДанныхПокупателя
			= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Ложь);
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаНайтиВЧеке);
		ТекущийЭлемент = Элементы.ШтрихкодДляПоиска;
		ШтрихкодДляПоиска = НСтр("ru = ''");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка = "", ТекстОшибки = "", ПараметрыОшибки = Неопределено)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если Не Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбщая Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьГруппыОперации(Элементы);
	КонецЕсли;
	
	ОтобразитьКнопкиДействийСЧеком = Ложь;
	ОтобразитьКнопкуОткрытияСмены = Ложь;
	ОтобразитьКнопкуЗакрытияСмены = Ложь; 
	ОтобразитьКнопкуПовторногоПробития = Ложь;
	ОтобразитьКнопкуОтменыПлатежа = Ложь;
	ОшибкаРасчетаСкидок = Ложь;
	ОтобразитьКнопкуОтмены = Истина;
	НеобходимоСторно = Ложь;
	НеВызыватьЗаменуПрав = Ложь;
	ОтобразитьГруппуОтчетОбОшибке = Истина;
	ОткрытоПредупреждениеОЗапретеОплатыБонусами = Ложь;
	
	Если Не ПараметрыОшибки = Неопределено Тогда
		
		НеВызыватьЗаменуПрав = ПараметрыОшибки.Свойство("НеВызыватьЗаменуПрав")
			И ПараметрыОшибки.НеВызыватьЗаменуПрав;
			
		ОткрытоПредупреждениеОЗапретеОплатыБонусами = ПараметрыОшибки.Свойство("ОткрытоПредупреждениеОЗапретеОплатыБонусами")
			И ПараметрыОшибки.ОткрытоПредупреждениеОЗапретеОплатыБонусами;
			
		ОтобразитьКнопкиДействийСЧеком = ПараметрыОшибки.Свойство("ОтобразитьКнопкиДействияСЧеком")
			И ПараметрыОшибки.ОтобразитьКнопкиДействияСЧеком;
		
		ОтобразитьКнопкуОткрытияСмены = ПараметрыОшибки.Свойство("ОтобразитьКнопкуОткрытияСмены")
			И ПараметрыОшибки.ОтобразитьКнопкуОткрытияСмены;
		
		ОтобразитьКнопкуЗакрытияСмены = ПараметрыОшибки.Свойство("ОтобразитьКнопкуЗакрытияСмены")
			И ПараметрыОшибки.ОтобразитьКнопкуЗакрытияСмены;
			
		НеобходимоСторно = ПараметрыОшибки.Свойство("НеобходимоСторно") И ПараметрыОшибки.НеобходимоСторно;
			
		Если НеобходимоСторно Тогда
			ЭтоПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
			Если ЭтоПродажа И (ТранзакцияПоКартеЗавершена ИЛИ ТипОплаты = "СБП") Тогда
				ОтобразитьКнопкуОтмены = Ложь;
				ОтобразитьКнопкуПовторногоПробития = Истина;
				ОтобразитьКнопкуОтменыПлатежа = Истина;
				ОтобразитьКнопкиДействийСЧеком = Истина;
			ИначеЕсли Не ЭтоПродажа И ТранзакцияПоКартеЗавершена ИЛИ ТипОплаты = "СБП" Тогда
				ОтобразитьКнопкуОтмены = Ложь;
				ОтобразитьКнопкуПовторногоПробития = Истина;
				ОтобразитьКнопкуОтменыПлатежа = Ложь;
				ОтобразитьКнопкиДействийСЧеком = Истина;
			ИначеЕсли ТипОплаты = "ЮКасса" Тогда
				ОтобразитьКнопкуОтмены = Ложь;
				ОтобразитьКнопкуПовторногоПробития = Истина;
				ОтобразитьКнопкуОтменыПлатежа = Ложь;
				ОтобразитьКнопкиДействийСЧеком = Истина;
			Иначе
				ОтобразитьКнопкуОтмены = Ложь;
				ОтобразитьКнопкуПовторногоПробития = Истина;
				ОтобразитьКнопкуОтменыПлатежа = Истина;
				ОтобразитьКнопкиДействийСЧеком = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыОшибки.Свойство("ОшибкаФормированияИсходныхДанных") И ПараметрыОшибки.ОшибкаФормированияИсходныхДанных Тогда
			ОтобразитьКнопкуПовторногоПробития = Ложь;
		КонецЕсли;
		
		Если ПараметрыОшибки.Свойство("ОшибкаРасчетаСкидок") И ПараметрыОшибки.ОшибкаРасчетаСкидок Тогда
			ОшибкаРасчетаСкидок = Истина;
		КонецЕсли;
		
		Если ПараметрыОшибки.Свойство("ЭтоПредупреждение") И ПараметрыОшибки.ЭтоПредупреждение Тогда
			ОтобразитьГруппуОтчетОбОшибке = Ложь;
		Иначе
			#Если Не ВебКлиент Тогда
				Сигнал();
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ОткрытьСменуИзОшибки.Видимость = ОтобразитьКнопкуОткрытияСмены;
	Элементы.ЗакрытьСменуИзОшибки.Видимость = ОтобразитьКнопкуЗакрытияСмены;
	Элементы.ГруппаИнфоОшибкаДействияСЧеком.Видимость = ОтобразитьКнопкиДействийСЧеком;
	Элементы.ЗакрытьСтраницуИнфоОшибка.Видимость = ОтобразитьКнопкуОтмены;
	Элементы.ВыполнитьОтменуОплаты.Видимость = ОтобразитьКнопкуОтменыПлатежа;
	Элементы.Предупреждение.Видимость = НЕ ОтобразитьГруппуОтчетОбОшибке;
	Элементы.ГруппаИнфоОшибкаОтчет.Видимость = (ОтобразитьГруппуОтчетОбОшибке И Не РежимКассыСамообслуживания);
	
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПанельУправленияЧеком);
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаИнфоОшибка);
	
	Элементы.ТекстПредупреждениеЗаголовок.Заголовок = ТекстЗаголовка;
	Элементы.ТекстПредупреждениеОшибка.Заголовок = ТекстОшибки;
	
	Если ОтобразитьКнопкуПовторногоПробития Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаКомандПовторногоДействия);
	КонецЕсли;
	
	Если ВертикальнаяОриентация И ОтобразитьКнопкиДействийСЧеком Тогда 
		ВиденПовторОперацииФискализации = Элементы.ПовторитьОперациюПакетнойФискализации.Видимость;
		Если ВиденПовторОперацииФискализации Или ОтобразитьКнопкуОтменыПлатежа Тогда
			Элементы.ГруппаИнфоОшибкаДействияСЧекомНиз.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Иначе
			Элементы.ГруппаИнфоОшибкаДействияСЧекомНиз.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		КонецЕсли;
	КонецЕсли;
	
	ОбработатьОшибкуРасчетаСкидок(ОшибкаРасчетаСкидок);
	
	ВызовСотрудника = Ложь;
	Если РежимКассыСамообслуживания И ПараметрыИнфоОшибки = Неопределено И Не НеВызыватьЗаменуПрав Тогда
		
		ПараметрыИнфоОшибки = Новый Структура;
		ПараметрыИнфоОшибки.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ПараметрыИнфоОшибки.Вставить("ТекстОшибки", ТекстОшибки);
		ПараметрыИнфоОшибки.Вставить("ПараметрыОшибки", ПараметрыОшибки);
		ПодключитьОбработчикОжидания("ОткрытьСтраницуЗаменыПравПередОшибкой", 0.1, Истина);
		ВызовСотрудника = Истина;
		
	КонецЕсли;
	
	Если ВызовСотрудника Тогда
		
		ВывестиСветовойСигналОбОшибкеНаДисплей();
		
	КонецЕсли;
	
	Если ОткрытаСтраницаПоискаТовара() Тогда
		ЗакрытьПоискТоваровКлиент();
	КонецЕсли;
	
	ЗаблокироватьОплатуИПробитиеЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибкуРасчетаСкидок(ОшибкаРасчетаСкидок)
	
	Если ОшибкаРасчетаСкидок И Не РежимКассыСамообслуживания Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаКомандПродолжитьБезРасчета);
		НастроитьДоступностьЭлементовПриПоискеПоШтрихкоду(Ложь, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуЗаменыПравПередОшибкой()
	
	НеобходимоеПраво = "ПравоОткрытиеСтраницыОшибкиРМК";
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуОтменаОплатыПоКарте(ТекстОшибки)
	
	УстановитьДоступностьЭлементовРедактированияЧека(Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧек, Ложь);
	
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаОтменаОплатыПоКарте);
	
	ТекстСообщения = СтрШаблон(НСтр("ru = 'При печати чека произошли ошибки.
									|
									|%1
									|
									|Требуется выполнить операцию отмены оплаты на эквайринговом терминале в размере %2 руб'"), ТекстОшибки, Строка(СуммаОплаченоБН));
	
	Элементы.ДекорацияНадписьЭквайрингОшибка.Заголовок = ТекстСообщения;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуОтправкиЭлектронногоЧека()
	
	Доступность = Истина;
	ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьДоступностьГруппДанныхПокупателя(ЭтотОбъект);
	ПоказатьПанельВводаДанныхПокупателя();
	РежимПанелиДанныеПокупателя = 2;
	ПереключитьНаСтраницуОтправкаЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуВнесение()
	
	Если Не РаботаСЧекомЗавершена() Тогда
		
		ВывестиИнформациюНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.НачалоРаботы);
		Возврат;
		
	КонецЕсли;
	
	Если ТаблицаКассККМОрганизаций.Количество() > 1 И ТекущаяОперация = "" Тогда
		
		ТекущаяОперация = "Внесение";
		ПереключитьНаСтраницуВыбораКассыККМ();
		Возврат;
		
	КонецЕсли;
	
	ТекущаяОперация = "";
	ОтразитьОстаткиНаличныхДенежныхСредствНаФорме(Объект.Организация, Объект.КассаККМ);
	ВывестиИнформациюНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.Сервис);
	СуммаВнесение = 0;
	
	НастроитьЭлементыДляВнесенияИлиВыемки(Истина);
	ВывестиИнформациюНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.НачалоРаботы);
	ТекущийЭлемент = Элементы.СуммаВнесение;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуВнесенияДенежныхСредств()
	
	Если Не РаботаСЧекомЗавершена() Тогда

		ВывестиИнформациюНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.НачалоРаботы);
		Возврат;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияРМККлиент.ИспользоватьСтандартныйИнтерфейсВнесения() Тогда
		ОткрытьСтраницуВнесение();
	Иначе
		ОбщегоНазначенияРМККлиентПереопределяемый.ВыполнитьОперациюВнесение(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуВыемкиДенежныхСредств()
	
	Если Не РаботаСЧекомЗавершена() Тогда

		ВывестиИнформациюНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.НачалоРаботы);
		Возврат;
		
	КонецЕсли;
	
	Если ТаблицаКассККМОрганизаций.Количество() > 1 И ТекущаяОперация = "" 
		И НЕ ПараметрыЗакрытияСменыПриАвтоматическойВыемке.ВыемкаПриЗакрытииСмены Тогда
		
		ТекущаяОперация = "Выемка";
		ПереключитьНаСтраницуВыбораКассыККМ();
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ПараметрыЗакрытияСменыПриАвтоматическойВыемке.ВыемкаПриЗакрытииСмены Тогда
		СуммаВыемка = 0;
		ТекущаяОперация = "";
	Иначе
		
		Элементы.ДекорацияВыемка.Картинка = БиблиотекаКартинок.РМККассаКрасная;
		Элементы.ДекорацияТекстИнфоВыемка.Заголовок = НСтр("ru='Закрытие смены'");
		Элементы.ОтменаВыемки.Заголовок = НСтр("ru='Без выемки'");
		
		СформироватьЗаголовок(НСтр("ru='Закрытие смены'"));
	КонецЕсли;
	
	ОтразитьОстаткиНаличныхДенежныхСредствНаФорме(Объект.Организация, Объект.КассаККМ);
	ВывестиИнформациюНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.Сервис);
	ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьСуммуВыемки(ЭтотОбъект, СуммаВыемка);
	
	НастроитьЭлементыДляВнесенияИлиВыемки(Ложь);
	ВывестиИнформациюНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.НачалоРаботы);
	ТекущийЭлемент = Элементы.СуммаВыемка;

КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуДляРучногоСопоставленияТовара(ПараметрыШтрихкода)

	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если ОжидатьВводМарки И Лев(ПараметрыШтрихкода.EAN, 2) = "29" Тогда
		
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
		Если НЕ ТекущаяСтрока = Неопределено Тогда
		
			ДанныеДляРучногоСопоставления = ПараметрыШтрихкода;
			
			Отказ = Ложь;
			СопоставитьСТекущейСтрокой(Отказ);
			Если Отказ Тогда
				ДанныеДляРучногоСопоставления = Неопределено;
				Возврат;
			КонецЕсли;
			
			КонтекстПроверкиКонтрольнойМарки = КонтекстПроверкиКонтрольнойМарки();
			ЗаполнитьЗначенияСвойств(КонтекстПроверкиКонтрольнойМарки, ТекущаяСтрока);
			ЭтоОбработкаСопоставленияТовара = Истина;
			КонтекстПроверкиКонтрольнойМарки.ЭтоОбработкаСопоставленияТовара = ЭтоОбработкаСопоставленияТовара;
			ЗавершитьВводШтрихкодаМаркаВведена(КонтекстПроверкиКонтрольнойМарки);
			ДанныеДляРучногоСопоставления = Неопределено;
			Возврат;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	КонецЕсли;
	
	ШтрихкодУрезанный = Лев(ПараметрыШтрихкода.Штрихкод, 25) + ?(СтрДлина(ПараметрыШтрихкода.Штрихкод) > 25, "...", "");
	Если ПараметрыШтрихкода.Свойство("ТоварНеНайденПоМарке") Тогда
		ТекстЗаголовкаСопоставления = СтрШаблон(НСтр("ru = 'Не найден товар по марке: %1'"), ШтрихкодУрезанный);
	ИначеЕсли ПараметрыШтрихкода.Свойство("ПодтвердитьВыборАлкоголя") Тогда
		ТекстЗаголовкаСопоставления = СтрШаблон(НСтр("ru = 'Не найден товар по марке: %1'"), ШтрихкодУрезанный);
	Иначе
		ТекстЗаголовкаСопоставления = СтрШаблон(НСтр("ru = 'Не найден товар по штрихкоду: %1'"), ШтрихкодУрезанный);
	КонецЕсли;
	
	Если ОжидатьВводМарки Тогда
		ТекстСопоставления = НСтр("ru = 'Сопоставить штрихкод с текущим товаром?'");
		ТекстКнопки = НСтр("ru = 'Сопоставить'");
	Иначе
		ТекстСопоставления = НСтр("ru = 'Сопоставить штрихкод с товаром из каталога?'");
		ТекстКнопки = НСтр("ru = 'Каталог'");
	КонецЕсли;
		
	Элементы.ДекорацияЗаголовокСопоставлениеТовара.Заголовок = ТекстЗаголовкаСопоставления;
	Элементы.ДекорацияТекстСопоставлениеТовара.Заголовок = ТекстСопоставления;
	Элементы.СопоставитьТовар.Заголовок = ТекстКнопки;
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаРучноеСопоставлениеТовара);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	
	ДанныеДляРучногоСопоставления = ПараметрыШтрихкода;
	ТекущийЭлемент = Элементы.СопоставитьТовар;
	
КонецПроцедуры

&НаКлиенте
Процедура УточнитьПравильностьНоменклатуры(ПараметрыШтрихкода)
	
	Если НЕ ПараметрыШтрихкода = Неопределено И ЕстьСвойство(ПараметрыШтрихкода, "ТекущаяНоменклатура") Тогда
		
		ОповещениеЗавершения = Новый ОписаниеОповещения("УточнитьПравильностьНоменклатурыЗавершение",
				ЭтотОбъект, ПараметрыШтрихкода);
		
		НужноПодтверждениеМаркиАлкоголя = Истина;
		ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьПодтверждениеМаркиАлкоголя(НужноПодтверждениеМаркиАлкоголя);
		
		Если РежимКассыСамообслуживания Тогда
			НужноПодтверждениеМаркиАлкоголя = Ложь;
		КонецЕсли;
		
		Если НужноПодтверждениеМаркиАлкоголя Тогда
			
			ТекстЗаголовка = НСтр("ru = 'Подтверждение ввода марки алкоголя.'");
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Марка для товара ""%1"" указана верно?'"),
				Строка(ПараметрыШтрихкода.ТекущаяНоменклатура));
			ПоказатьВопрос(ОповещениеЗавершения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,
				КодВозвратаДиалога.Да, ТекстЗаголовка);
				
		Иначе
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, КодВозвратаДиалога.Да);
		КонецЕсли;
	Иначе
		ОткрытьФормуРучногоСопоставленияТовараПриВозможности(ПараметрыШтрихкода);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогКлиент()
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПоискТовара);
	
	Если Не (РежимВыбораПодарка Или РежимВыбораПодарочногоСертификата Или РежимВыбораХарактеристики) Тогда
		ИзменитьСостояниеЗаголовкаСтраницыПоискаТовара();
	Иначе
		СписокТоваров.Отбор.Элементы.Очистить();
		ВосстановитьОтображениеКаталогаПоНастройкам();
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентПереопределяемый.ПриОткрытииКаталогаТоваров(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПоискТоваровКлиент()
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаСписокТоваров);
	НастроитьВидимостьЭлементовГруппыПоискаТовара();
	
	НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
	
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьГруппыОперации(Элементы);
	Если Не РежимВыбораПодарочногоСертификата Тогда
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
		ЭтоОперацияПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
		ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьДоступностьЭлементовФормыПриПереключенииРежима(ЭтотОбъект,
		ЭтоОперацияПродажи, Ложь);
	КонецЕсли;
	
	ВернутьсяНаСтраницуСтартаПродажПриНеобходимости();
	
	Если РежимВыбораПодарка Или РежимВыбораПодарочногоСертификата Или РежимВыбораХарактеристики Тогда
		СписокТоваров.Отбор.Элементы.Очистить();
		ВосстановитьОтображениеКаталогаПоНастройкам();
	КонецЕсли;
	
	Если НЕ ЗакрыватьПодборПриВыбореТовара Тогда
		Отказ = ЕстьНезаполненныеДанные();
		УстановитьАктивностьСтроки(Истина);
	КонецЕсли;
	
	Если ПоискТоваровОткрытИзСтрокиВвода Тогда
		ЭлементОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(
			СписокТоваров.Отбор.Элементы, "ЗначениеВводаТовараПоСтроке");
		
		Если Не ЭлементОтбора = Неопределено Тогда
			СписокТоваров.Отбор.Элементы.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЕсли;
	
	ПоискТоваровОткрытИзСтрокиВвода = Ложь;
	
	УдалитьОтборКаталогаПоОбщейСтрокеНоменклатуры(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьФормуРабочегоМестаКассира()
	
	Если Не Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗавершение Тогда
	
		ИдентификаторЗамераПробитияЧека		= НСтр("ru = ''");
		ИдентификаторЗамераВремениПоиска	= НСтр("ru = ''");
		ЭлектронныеВесыЗаняты				= Ложь;
		ДанныеКПередачеВДисплейПокупателя	= БуферОбменаДисплеяПокупателя();
		
		ВременныйКонтекстПроверкиМарки = Неопределено;
		
		СформироватьЗаголовок(НСтр("ru ='Продажа'"));
		ВывестиИнформациюНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.НачалоРаботы);
		УстановитьДоступностьЭлементаФормы(Элементы.НайтиВЧеке, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.УдалитьЧек, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ВвестиКомментарийКЧеку, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаВыборМагазинаДляВхода, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВидОплатыНСПК, ИспользоватьОплатуСертификатамиНСПК);
		УстановитьВидимостьКнопкиМирТовары(Элементы, ИспользоватьОплатуСертификатамиНСПК);
		УстановитьВидимостьЭлементаФормы(Элементы.ОтправитьПодтверждениеНСПК, ИспользоватьОплатуСертификатамиНСПК);
		УстановитьВидимостьЭлементаФормы(Элементы.ПодборТоваровНСПК, ИспользоватьОплатуСертификатамиНСПК);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаЗаменаТоваров, Ложь);

		НастроитьВидимостьОплатыQRКодом(Истина);
		НастроитьИнтерфейсРежимаКассыСамообслуживанияКлиент();
		
		ПолучитьПараметрыПодключенияКСерверуЛояльности();
		ОпределитьИспользованиеАвтоматическихСкидок();
		ПроверитьСоединениеССерверомЛояльности();
		УстановитьИспользованиеАвтоподбораПартий();
		ОбщегоНазначенияРМККлиентПереопределяемый.ИнициализироватьФормуРабочегоМестаКассира(ЭтотОбъект);
		ОпределитьИспользуемыеВидыОплат();
		
		ФормаРМКИнициализирована = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимНаЧекКоррекции()
	
	Если Не РаботаСЧекомЗавершена() Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимПлитки Тогда
		ПереключитьНаРежимПлиткиИзПалитры();
	КонецЕсли;
	
	ПользовательДоЗаменыПрав = Объект.ПользовательБД;
	КассирДоЗаменыПрав = Объект.Кассир;
	
	НеобходимоеПраво = "ПравоЧекКоррекцииРМК";
	
	Если ЕстьПравоНаДействие(НеобходимоеПраво) Тогда
		ВыбратьЧекКоррекции();
	Иначе
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
	КонецЕсли;
	
	ОпределитьИспользованиеАвтоматическихСкидок();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЧекКоррекции()
	
	ВывестиИнформациюНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.Коррекция);
	СформироватьЗаголовок(НСтр("ru='Коррекция'"));
	
	КассыККМИОрганизации = ПодключенныеКассыККМИОрганизации();
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("МассивКассККМ", КассыККМИОрганизации.МассивКассККМ);
	ПараметрыОткрытия.Вставить("МассивОрганизаций", КассыККМИОрганизации.МассивОрганизаций);
	ПараметрыОткрытия.Вставить("ТорговыйОбъект", Объект.ТорговыйОбъект);
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Чеки для коррекции'"));
	ПараметрыОткрытия.Вставить("ЧекКоррекции", Истина);
	ПараметрыОткрытия.Вставить("ВыводитьКомментарийКЧеку", ВыводитьКомментарийКЧеку);
	
	ЭтоЧекКоррекции = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборЧекаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораЧека",
		ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТоваровВыборПродолжение(ЭтоФормаРучногоПодбора = Ложь)
		
	Если СписокДобавленныхСтрокТоваров.Количество() > 0 Тогда
		СписокДобавленныхСтрокТоваров.Очистить();
		Возврат;
	КонецЕсли;
	
	Если СкидкиРассчитаны И Не РежимВыбораПодарка Тогда
		ОтменитьСкидки();
	КонецЕсли;
	
	ОбработатьВыборТовара(ДанныеДобавляемогоТовара, Ложь);
	
	Если НЕ ЗначениеЗаполнено(ВременныйКонтекстПроверкиМарки) Тогда
		
		ОбновитьИнформациюНаДисплееПокупателя(ТипыОперацийДисплеяПокупателя.ДобавлениеТовара);
		
		Если ((Не ЭтоФормаРучногоПодбора)
			ИЛИ (ЭтоФормаРучногоПодбора И ИспользоватьНовыйПодборТоваров И ЗакрыватьПодборПриВыбореТовара)
			ИЛИ (ЭтоФормаРучногоПодбора И НЕ ИспользоватьНовыйПодборТоваров)
			ИЛИ (ЭтоФормаРучногоПодбора И РежимПлитки)) Тогда
			
				Если Объект.Товары.Количество() > 0 Тогда
					ПереключатьсяВРежимПлиткиВЛожь = Ложь;
					Если РежимПлитки И Не ПереключатьсяВРежимПлитки Тогда
						ПереключатьсяВРежимПлиткиВЛожь = Истина;
						ПереключатьсяВРежимПлитки = Истина;
					КонецЕсли;
					НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
					Если ПереключатьсяВРежимПлиткиВЛожь Тогда
						ПереключатьсяВРежимПлитки = Ложь;
					КонецЕсли;
				КонецЕсли;
			
		КонецЕсли;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти();
		РассчитатьСуммуОплатыБонусами();
		
		РучноеСопоставлениеТовара = Ложь;
		ДанныеДляРучногоСопоставления = Неопределено;
		КодМаркиВРаботе = НСтр("ru = ''");
		
	КонецЕсли;
	
	Если РежимВыбораПодарка И ТаблицаПодаркиБезВыбора.Количество() = 0 И ТаблицаПодарков.Количество() = 0 Тогда
		ВыполнитьОтложенныйМетод();
		РежимВыбораПодарка = Ложь;
	КонецЕсли;

	ЗапросВесаСПовышениемПрав = Ложь;
	ДобавляемаяПозиция = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	Если Не ДобавляемаяПозиция = Неопределено Тогда
		
		ВесовойНеФасованный = ДобавляемаяПозиция.Весовой И Не ДобавляемаяПозиция.Фасованный;
		Если ВесовойНеФасованный И ДобавляемаяПозиция.Количество = 0
				И Не ДобавляемаяПозиция.НеобходимостьВводаКодаМаркировки Тогда
				
			Если ЭтоФормаРучногоПодбора И (Не ЗакрыватьПодборПриВыбореТовара) И (Не РежимПлитки) Тогда
				ЗакрытьПоискТоваровКлиент();
			КонецЕсли;
			ОжиданиеКонтроляВеса = Ложь;
			ВесТекущегоТовара(ЗапросВесаСПовышениемПрав);
			
		КонецЕсли;
		
	КонецЕсли;

	ПроверкаИзКаталога = ОткрытаСтраницаПоискаТовара();
	ЕстьНезаполненныеДанные = ЕстьНезаполненныеДанные(ЗапросВесаСПовышениемПрав);
	ОжиданиеКонтроляВеса = Истина;
	РассчитатьСуммуОплатыБонусами();
	ОбработатьИзменениеТаблицыТоваровНаКлиенте(Не ЕстьНезаполненныеДанные);
	Если ПроверкаИзКаталога И ЕстьНезаполненныеДанные Тогда
		ЗакрытьПоискТоваровКлиент();
	КонецЕсли;
	НастроитьИнтерфейсРежимаКассыСамообслуживанияКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаСтраницуПодтвержденияВозраста(СтрокаОграничения, ПодтвержденоСотрудником = Ложь)
	
	Если РежимКассыСамообслуживания И Не ПодтвержденоСотрудником Тогда
		
		ПараметрыТекущейОперации = Новый Структура;
		ПараметрыТекущейОперации.Вставить("СтрокаОграничения", СтрокаОграничения);
		
		НеобходимоеПраво = "ПравоПодтвержденияВозрастаРМК";
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
		Возврат;
		
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПодтверждениеВозраста);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	
	ТекущийЭлемент = Элементы.ПодтвердитьВозраст;
	Элементы.ДекорацияТекстВозрастноеОграничение.Заголовок = СтрокаОграничения.ТекстПредупреждения;
	Если СтрокаОграничения.ВозрастКонтроля > 0 Тогда
		ВозрастСтрокой = Формат(СтрокаОграничения.ВозрастКонтроля, "ЧГ=");
		Элементы.Декорация18Плюс.Заголовок = СтрШаблон("%1+", ВозрастСтрокой);
		УстановитьВидимостьЭлементаФормы(Элементы.Декорация18Плюс, Истина);
		Элементы.ПодтвердитьВозраст.Заголовок = СтрШаблон(НСтр("ru = 'Да, есть %1'"), ВозрастСтрокой);
	Иначе
		УстановитьВидимостьЭлементаФормы(Элементы.Декорация18Плюс, Ложь);
		Элементы.ПодтвердитьВозраст.Заголовок = НСтр("ru = 'Да'");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОграничитьДоступностьЭлементовПриОжиданииМарки(ОжидатьМарку)
	
	УстановитьДоступностьЭлементаФормы(Элементы.Каталог, НЕ ОжидатьМарку);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРядовКнопокБыстрыхТоваров, НЕ ОжидатьМарку);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаТовары, НЕ ОжидатьМарку);
	УстановитьДоступностьЭлементаФормы(Элементы.ВвестиДанныеПокупателя, НЕ ОжидатьМарку);
	УстановитьДоступностьЭлементаФормы(Элементы.ПоказатьСкидкиНаЧек, НЕ ОжидатьМарку);
	УстановитьДоступностьЭлементаФормы(Элементы.НайтиВЧеке, НЕ ОжидатьМарку);
	УстановитьДоступностьЭлементаФормы(Элементы.ДобавитьПакет, НЕ ОжидатьМарку);
	
	ОжидатьВводМарки = ОжидатьМарку;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСтраницуВыбораКассККМ()
	
	СписокКассККМ = Элементы.КассаККМДляОперации.СписокВыбора;
	СписокКассККМ.Очистить();
	Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	ЕстьАктуальныеСмены = Ложь;
	ЕстьИстекшаяСмена = Ложь;
	ФорматДаты = НСтр("ru='ДФ=''dd.MM.yyyy HH:mm'''");
	ПроверитьКоличествоНепробитыхЧеков();
	
	Для Каждого СтрокаКассККМ Из ТаблицаКассККМОрганизаций Цикл
		
		ЭлементКнопкаКассы = Элементы.Найти(СтрокаКассККМ.ИмяКнопки);
		Если ЭлементКнопкаКассы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаКассККМ.Открыта Тогда
			ТекстСмены = СтрШаблон(НСтр("ru = 'Смена открыта: %1'"),
				Формат(СтрокаКассККМ.НачалоКассовойСмены, ФорматДаты));
		Иначе
			ТекстСмены = НСтр("ru = 'Смена закрыта'");
		КонецЕсли;
		
		ТекстОкончанияСмены = "";
		ОсталосьСекунд = 0;
		
		Если СтрокаКассККМ.Открыта Тогда
			
			ОсталосьСекунд = (СтрокаКассККМ.ДатаИстеченияСрокаДействия - Дата);
			Если ОсталосьСекунд > 0 Тогда
				
				ВремяНачалаСменыВСекундах = ВремяНачалаСмены - Дата(1, 1, 1);
				
				МинимальноеДатаНачалаСмены = НачалоДня(Дата) + ВремяНачалаСменыВСекундах;
				Если Дата < МинимальноеДатаНачалаСмены Тогда
					МинимальноеДатаНачалаСмены = МинимальноеДатаНачалаСмены - 86400;
				КонецЕсли;
				
				ОсталосьМинут = Окр((ОсталосьСекунд / 60), 0);
				Если ОсталосьМинут = 0 Тогда
					ТекстОкончанияСмены = НСтр("ru = 'Осталось менее минуты.'");
				ИначеЕсли ОсталосьМинут < 60 Тогда
					ТекстМинут = НСтр("ru = ';Осталось: %1 минута;;Осталось: %1 минуты;Осталось: %1 минут;Осталось: %1 минуты'");
					ТекстОкончанияСмены = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ТекстМинут, ОсталосьМинут);
				Иначе
					ОсталосьЧасов = Окр((ОсталосьМинут / 60), 0);
					ТекстЧасов = НСтр("ru = ';Осталось: %1 час;;Осталось: %1 часа;Осталось: %1 часов;Осталось: %1 часа'");
					ТекстОкончанияСмены = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ТекстЧасов, ОсталосьЧасов);
				КонецЕсли;
				
				ЕстьАктуальныеСмены = Истина;
				
				Если СтрокаКассККМ.НачалоКассовойСмены < МинимальноеДатаНачалаСмены Тогда
					ТекстОкончанияСмены = НСтр("ru = 'Рекомендуется переоткрыть смену.'");
					ОсталосьСекунд = 0;
				КонецЕсли;
				
			Иначе
				
				ТекстОкончанияСмены = НСтр("ru = 'Прошло более 24 часов. Требуется закрытие.'");
				ЕстьИстекшаяСмена = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаКассККМ.КоличествоОтложенныхИНепробитыхЧеков <> 0 Тогда
			ТекстОтложенныхЧеков = СтрШаблон(НСтр("ru = 'Количество отложенных и непробитых чеков: %1'"), СтрокаКассККМ.КоличествоОтложенныхИНепробитыхЧеков);
		Иначе
			ТекстОтложенныхЧеков = "";
		КонецЕсли;
		
		ПредставлениеКнопкиКассы = СтрШаблон(НСтр("ru = 'Касса: %1
				| Организация: %2
				|
				| %3
				| %4
				| %5'"), СтрокаКассККМ.КассаККМ, СтрокаКассККМ.Организация, ТекстСмены, ТекстОкончанияСмены, ТекстОтложенныхЧеков);
		
		Если ИспользоватьОплатуНаличными И ПравоПросмотраОстаткаНаличныхРМК Тогда
			ТекстНаличныеВКассе = СтрШаблон(НСтр("ru = 'Наличные в кассе: %1 %2'"), СтрокаКассККМ.ДенежныеСредстваВКассеККМ, ПредставлениеВалюты);
			ПредставлениеКнопкиКассы = ПредставлениеКнопкиКассы + СтрШаблон("
			| %1", ТекстНаличныеВКассе);
		КонецЕсли;
		
		ЭлементКнопкаКассы.Заголовок = ПредставлениеКнопкиКассы;
		
		Если ЗначениеЗаполнено(ТекущаяОперация) Тогда
			ЭлементКнопкаКассы.ЦветФона = ЦветаФормы.Авто;
		КонецЕсли;
		
		Если ОсталосьСекунд > 0 Тогда
			ЭлементКнопкаКассы.Картинка = БиблиотекаКартинок.РМККассаЗеленая;
		Иначе
			ЭлементКнопкаКассы.Картинка = БиблиотекаКартинок.РМККассаКрасная;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбщая
			И ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
				= Элементы.ГруппаИнфоОшибка Тогда
		
			ЗакрытьСтраницуИнфоОшибка(Команды.ЗакрытьСтраницуИнфоОшибка);
			УстановитьСообщениеПоСтатусуСмены();
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаСтраницуВыбораКассыККМ()
	
	НастроитьСтраницуВыбораКассККМ();

	Если НЕ ПараметрыЗакрытияСменыПриАвтоматическойВыемке.ВыемкаПриЗакрытииСмены И
		НЕ ПараметрыЗакрытияСменыПриАвтоматическойВыемке.РежимВыбораКассы Тогда
		КассаККМДляОперации = Неопределено;
	КонецЕсли;
	
	ВидимостьКнопокОткрытияЗакрытия = (ТекущаяОперация = "");
	УстановитьВидимостьЭлементаФормы(Элементы.ОткрытьСменуИзРежимаВыбораКассы, ВидимостьКнопокОткрытияЗакрытия);
	УстановитьВидимостьЭлементаФормы(Элементы.ЗакрытьСменуИзРежимаВыбораКассы, ВидимостьКнопокОткрытияЗакрытия);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаВыборКассыККМ);
	
	Если ТекущаяОперация = "" Тогда
		
		Если НЕ ЗначениеЗаполнено(КассаККМДляОперации) Тогда
			КассаККМДляОперации = ТаблицаКассККМОрганизаций[0].КассаККМ;
		КонецЕсли;
	
		ПриПереключенииКассыККМ();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПереключенииКассыККМ()
	
	Для Каждого СтрокаКассы Из ТаблицаКассККМОрганизаций Цикл
		Элементы[СтрокаКассы.ИмяКнопки].ЦветФона = ЦветаФормы.Авто;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(КассаККМДляОперации) Тогда
		Возврат;
	КонецЕсли;

	Отбор = Новый Структура("КассаККМ", КассаККМДляОперации);
	СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
	Элементы[СтрокаКассы.ИмяКнопки].ЦветФона = ЦветаФормы.АктивнаяКнопка;
	
	ПодключаемоеОборудование = СтрокаКассы.ИдентификаторУстройства;
	КассоваяСмена = СтрокаКассы.КассоваяСмена;
	Объект.Организация = СтрокаКассы.Организация;
	Объект.КассаККМ = СтрокаКассы.КассаККМ;
	ККМПоддерживаетПроверкуКодовМаркировки = СтрокаКассы.ПоддерживаетПроверкуКодовМаркировки;
	
	СменаПоКассеОткрыта = ЗначениеЗаполнено(СтрокаКассы.НачалоКассовойСмены);
	УстановитьДоступностьЭлементаФормы(Элементы.ЗакрытьСменуИзРежимаВыбораКассы, СменаПоКассеОткрыта);
	УстановитьДоступностьЭлементаФормы(Элементы.ОткрытьСменуИзРежимаВыбораКассы, НЕ СменаПоКассеОткрыта);
	
	Если ТекущаяОперация = "ОтчетБезГашения" Тогда
		СнятьОтчетБезГашенияКлиент();
	ИначеЕсли ТекущаяОперация = "Выемка" Тогда
		ОткрытьСтраницуВыемкиДенежныхСредств();
	ИначеЕсли ТекущаяОперация = "Внесение" Тогда
		ОткрытьСтраницуВнесение();
	Иначе
	КонецЕсли;
	
	Если НЕ ТекущаяОперация = "" Тогда
		
		ТекущаяОперация = "";
		КассаККМДляОперации = Неопределено;
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнфо, Ложь);
		Если РежимНачальнойСтраницы = 1 Тогда
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		Иначе
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПустая);
		КонецЕсли;
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПанельУправленияЧеком);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаСледующийЧек(ИмяКоманды = "")
	
	СистемыНалогообложенияТоваровВКорзине = РазличныеСНОВСпискеПокупок();
	
	СписокОрганизаций = Новый СписокЗначений;
	НомерПП = 0;
	НомерНажатойКнопкиОрганизации = "";
	ИмяСНО = "";
	НаСледующийЧек = Ложь;
	
	Если ИмяКоманды = "НаСледующий" Тогда
		НаСледующийЧек = Истина;
	ИначеЕсли Лев(ИмяКоманды, 25) = "ПереключитьЧекОрганизация" Тогда
		
		НаСледующийЧек = Истина;
		НомерНажатойКнопкиОрганизации = СтрЗаменить(ИмяКоманды, "ПереключитьЧекОрганизация", "");
		
	Иначе
		ИмяСНО = СтрЗаменить(ИмяКоманды, "ПереключитьЧекСНО", "");
	КонецЕсли;
	
	Для Каждого ОрганизацияИСНОЧека Из СистемыНалогообложенияТоваровВКорзине Цикл
		
		Если СписокОрганизаций.НайтиПоЗначению(ОрганизацияИСНОЧека.Организация) = Неопределено Тогда
			
			НомерПП = НомерПП + 1;
			СписокОрганизаций.Добавить(ОрганизацияИСНОЧека.Организация, НомерПП);
			Если НомерНажатойКнопкиОрганизации = Строка(НомерПП) Тогда
				ВыбраннаяОрганизация = ОрганизацияИСНОЧека.Организация;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокОрганизаций.СортироватьПоЗначению();
	
	НомерПП = 0;
	Пока Истина Цикл
		НомерПП = НомерПП + 1;
		НайденЭлемент = Элементы.Найти("ПереключитьЧекОрганизация" + НомерПП);
		Если НайденЭлемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		НайденЭлемент.Пометка = Ложь;
		НайденЭлемент.Видимость = Ложь;
	КонецЦикла;
	
	Если НаСледующийЧек Тогда
		
		Для Каждого ОрганизацияИСНОЧека Из СистемыНалогообложенияТоваровВКорзине Цикл
			
			Если НЕ НомерНажатойКнопкиОрганизации = "" И НЕ ВыбраннаяОрганизация = ОрганизацияИСНОЧека.Организация Тогда
				Продолжить;
			КонецЕсли;
			
			Элементы.ПереключитьЧекСНООСН.Пометка = Ложь;
			Элементы.ПереключитьЧекСНОУСНДоход.Пометка = Ложь;
			Элементы.ПереключитьЧекСНОУСНДоходРасход.Пометка = Ложь;
			Элементы.ПереключитьЧекСНОЕСН.Пометка = Ложь;
			Элементы.ПереключитьЧекСНОПатент.Пометка = Ложь;
			
			ПробитыйЧек = ПробитыеЧеки.НайтиСтроки(ОрганизацияИСНОЧека);
			
			ОрганизацияВСписке = СписокОрганизаций.НайтиПоЗначению(ОрганизацияИСНОЧека.Организация);
			ВыбраннаяОрганизация = ОрганизацияИСНОЧека.Организация;
			ВыбраннаяСистемаНалогообложения = ОрганизацияИСНОЧека.СистемаНалогообложения;
			Элементы["ПереключитьЧекОрганизация" + ОрганизацияВСписке.Представление].Пометка = Истина;
			ИмяПеречисления = СтрЗаменить(ПолучитьПолноеИмяПредопределенногоЗначения(ВыбраннаяСистемаНалогообложения),
				"Перечисление.ТипыСистемНалогообложенияККТ.", "");
			Элементы["ПереключитьЧекСНО" + ИмяПеречисления].Пометка = Истина;
				
			Если ПробитыйЧек.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Раскраска и видимость кнопок
	Элементы.ГруппаСписокОрганизацийПоКорзине.Видимость = (СписокОрганизаций.Количество() > 1);
	
	Элементы.ПереключитьЧекСНООСН.Видимость = Ложь;
	Элементы.ПереключитьЧекСНОУСНДоход.Видимость = Ложь;
	Элементы.ПереключитьЧекСНОУСНДоходРасход.Видимость = Ложь;
	Элементы.ПереключитьЧекСНОЕСН.Видимость = Ложь;
	Элементы.ПереключитьЧекСНОПатент.Видимость = Ложь;
	
	КоличествоСНОПоОрганизации = 0;
	
	Для Каждого ОрганизацияИзСписка Из СписокОрганизаций Цикл
		
		ПоОрганизацииПробитыНеВсеЧеки = Ложь;
		
		Для Каждого ОрганизацияИСНОЧека Из СистемыНалогообложенияТоваровВКорзине Цикл
			
			Если ОрганизацияИзСписка.Значение = ОрганизацияИСНОЧека.Организация Тогда
				
				ПробитыйЧек = ПробитыеЧеки.НайтиСтроки(ОрганизацияИСНОЧека);
				
				Если ПробитыйЧек.Количество() = 0 Тогда
					ПоОрганизацииПробитыНеВсеЧеки = Истина;
				КонецЕсли;
				
				Если ОрганизацияИзСписка.Значение = ВыбраннаяОрганизация Тогда
					
					ИмяПеречисления =
						СтрЗаменить(ПолучитьПолноеИмяПредопределенногоЗначения(ОрганизацияИСНОЧека.СистемаНалогообложения),
						"Перечисление.ТипыСистемНалогообложенияККТ.", "");
					
					ЦветФонаКнопки = ?(ПробитыйЧек.Количество() = 0, ЦветаФормы.Авто, ЦветаФормы.ЗеленаяКнопка);
					Элементы["ПереключитьЧекСНО" + ИмяПеречисления].ЦветФона = ЦветФонаКнопки;
					Элементы["ПереключитьЧекСНО" + ИмяПеречисления].Видимость = Истина;
					
					Если ИмяПеречисления = ИмяСНО Тогда
						ВыбраннаяСистемаНалогообложения = ОрганизацияИСНОЧека.СистемаНалогообложения;
					КонецЕсли;
					
					КоличествоСНОПоОрганизации = КоличествоСНОПоОрганизации + 1;
					
				КонецЕсли;
			
			КонецЕсли;
		
		КонецЦикла;
		
		ЦветФонаКнопки = ?(ПоОрганизацииПробитыНеВсеЧеки Или ФормаЗамороженаПослеПробитияЧека(), ЦветаФормы.Авто, ЦветаФормы.ЗеленаяКнопка);
		Элементы["ПереключитьЧекОрганизация" + ОрганизацияИзСписка.Представление].ЦветФона = ЦветФонаКнопки;
		Элементы["ПереключитьЧекОрганизация" + ОрганизацияИзСписка.Представление].Заголовок =
			СокрЛП(ОрганизацияИзСписка.Значение);
			
		Элементы["ПереключитьЧекОрганизация" + ОрганизацияИзСписка.Представление].Видимость = Истина;
		
		НайденаСтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Новый Структура("Организация", ОрганизацияИзСписка.Значение));
		Если НайденаСтрокаКассы.Количество() = 0 Тогда
			Элементы["ПереключитьЧекОрганизация" + ОрганизацияИзСписка.Представление].ЦветФона = ЦветаФормы.КраснаяКнопка;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ГруппаСписокСНОПоОрганизации.Видимость = (КоличествоСНОПоОрганизации > 1);
	
	УстановитьСообщениеПоСтатусуСмены();
	
	ОтборСтрок = Неопределено;
	Если ЗначениеЗаполнено(ВыбраннаяОрганизация) И ЗначениеЗаполнено(ВыбраннаяСистемаНалогообложения) Тогда
		ОтборСтрок = Новый ФиксированнаяСтруктура(ВыбраннаяОрганизацияИСНО());
	КонецЕсли;
	
	Элементы.Товары.ОтборСтрок = ОтборСтрок;
	ПересчитатьИтогиТабличнойЧастиТовары(Истина, Ложь);
	НастроитьВидимостьОплатыПодарочнымиСертификатами();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСообщениеПоСтатусуСмены()
	
	Для Каждого СтрокаКассыККМ Из ТаблицаКассККМОрганизаций Цикл
		Если СтрокаКассыККМ.СтатусКонтроляВремениНачалаСмены = 1 Тогда
			СтрокаКассыККМ.СтатусКонтроляВремениНачалаСмены = 0;
		КонецЕсли;
	КонецЦикла;
	
	СписокОрганизаций = Новый СписокЗначений;
	Для Каждого СтрокаКорзины Из Объект.Товары Цикл
		Если СписокОрганизаций.НайтиПоЗначению(СтрокаКорзины.Организация) = Неопределено Тогда
			СписокОрганизаций.Добавить(СтрокаКорзины.Организация);
		КонецЕсли;
	КонецЦикла;
	СписокОрганизаций.СортироватьПоЗначению();
	
	Для Каждого ОрганизацияИзСписка Из СписокОрганизаций Цикл
		
		ОрганизацияКассыККМ = ОрганизацияИзСписка.Значение;
		
		НайденаСтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Новый Структура("Организация", ОрганизацияКассыККМ));
	
		ПараметрыОшибки = Новый Структура;
		ПараметрыОшибки.Вставить("ОтобразитьКнопкиДействияСЧеком", Истина);
		ПараметрыОшибки.Вставить("ОтобразитьКнопкуОткрытияСмены", Ложь);
		ПараметрыОшибки.Вставить("ОтобразитьКнопкуЗакрытияСмены", Ложь);
		ПараметрыОшибки.Вставить("ЭтоПредупреждение", Истина);
	
		Если НайденаСтрокаКассы.Количество() > 0 Тогда
			
			СтрокаКассы = НайденаСтрокаКассы[0];
			ПодключаемоеОборудование = СтрокаКассы.ИдентификаторУстройства;
			КассоваяСмена = СтрокаКассы.КассоваяСмена;
			Объект.Организация = СтрокаКассы.Организация; 
			Объект.КассаККМ = СтрокаКассы.КассаККМ;
			ККМПоддерживаетПроверкуКодовМаркировки = СтрокаКассы.ПоддерживаетПроверкуКодовМаркировки;
			
			Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
			ВремяНачалаСменыВСекундах = ВремяНачалаСмены - Дата(1, 1, 1);
			
			МинимальноеДатаНачалаСмены = НачалоДня(Дата) + ВремяНачалаСменыВСекундах;
			Если Дата < МинимальноеДатаНачалаСмены Тогда
				МинимальноеДатаНачалаСмены = МинимальноеДатаНачалаСмены - 86400;
			КонецЕсли;
			
			НаименованиеКассыККМ = Строка(СтрокаКассы.КассаККМ);
			
			Если Не СтрокаКассы.Открыта Тогда
				
				КассаККМДляОперации = СтрокаКассы.КассаККМ;
				ПриПереключенииКассыККМ();
				ПараметрыОшибки.ОтобразитьКнопкуОткрытияСмены = Истина;
				
				ОтменитьВведенныеОплаты();
				УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКнопкиОтменыВидовОплат,
					Объект.Оплата.Количество() > (0 + Число(ПриемАвансаПоЗаказу)));
				
				ТекстЗаголовка = НСтр("ru = 'Смена закрыта.'") + символы.ПС + НаименованиеКассыККМ;
				ТекстСообщения = НСтр("ru = 'Откройте смену, отложите или удалите чек.'");
				ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения, ПараметрыОшибки);
				Возврат;
				
			ИначеЕсли СтрокаКассы.ДатаИстеченияСрокаДействия < Дата Тогда
				
				КассаККМДляОперации = СтрокаКассы.КассаККМ;
				ПриПереключенииКассыККМ();
				ПараметрыОшибки.ОтобразитьКнопкуЗакрытияСмены = Истина;
				
				ОтменитьВведенныеОплаты();
				УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКнопкиОтменыВидовОплат,
					Объект.Оплата.Количество() > (0 + Число(ПриемАвансаПоЗаказу)));
				
				ТекстЗаголовка = НСтр("ru = 'Смена истекла.'") + Символы.ПС + НаименованиеКассыККМ;
				ТекстСообщения = 
					НСтр("ru = 'Закройте смену - затем откройте, отложите или удалите чек.'");
				ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения, ПараметрыОшибки);
				Возврат;
				
			ИначеЕсли СтрокаКассы.НачалоКассовойСмены < МинимальноеДатаНачалаСмены
				И СтрокаКассы.СтатусКонтроляВремениНачалаСмены = 0 Тогда
				
				КассаККМДляОперации = СтрокаКассы.КассаККМ;
				ПриПереключенииКассыККМ();
				ПараметрыОшибки.ОтобразитьКнопкуЗакрытияСмены = Истина;
				
				ОтменитьВведенныеОплаты();
				УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКнопкиОтменыВидовОплат,
					Объект.Оплата.Количество() > (0 + Число(ПриемАвансаПоЗаказу)));
				СтрокаКассы.СтатусКонтроляВремениНачалаСмены = 1;
				
				ТекстЗаголовка = НСтр("ru = 'Рекомендуется переоткрыть смену.'") + Символы.ПС + НаименованиеКассыККМ;
				ТекстСообщения = 
					НСтр("ru = 'Закройте смену - затем откройте. Отложите чек, удалите чек или закройте сообщение.'");
				ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения, ПараметрыОшибки);
				Возврат;
				
			КонецЕсли;
			
		Иначе
			
			ТекстЗаголовка = НСтр("ru = 'Нет подключенной кассы по выбранной организации.'") + Символы.ПС + ОрганизацияКассыККМ;
			ТекстСообщения = НСтр("ru = 'Отложите или удалите чек.'");
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения, ПараметрыОшибки);
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НайденаСтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Новый Структура("Организация", ВыбраннаяОрганизация));
	
	Если НайденаСтрокаКассы.Количество() > 0 Тогда
			
			СтрокаКассы = НайденаСтрокаКассы[0];
			ПодключаемоеОборудование = СтрокаКассы.ИдентификаторУстройства;
			КассоваяСмена = СтрокаКассы.КассоваяСмена;
			Объект.Организация = СтрокаКассы.Организация; 
			Объект.КассаККМ = СтрокаКассы.КассаККМ;
			ККМПоддерживаетПроверкуКодовМаркировки = СтрокаКассы.ПоддерживаетПроверкуКодовМаркировки;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьКнопкиОрганизацийИСНО()
	
	ЦветАктивнойКнопки = ЦветаФормы.АктивнаяКнопка;
	ЦветНеАктивнойКнопки = ЦветаФормы.Авто;
	
	МассивИмен = Новый Массив;
	
	НомерПП = 0;
	Пока Истина Цикл
		НомерПП = НомерПП + 1;
		НайденЭлемент = Элементы.Найти("ПереключитьЧекОрганизация" + НомерПП);
		Если НайденЭлемент = Неопределено Тогда
			Прервать;
		КонецЕсли;
		МассивИмен.Добавить("ПереключитьЧекОрганизация" + НомерПП);
	КонецЦикла;
	
	МассивИмен.Добавить("ПереключитьЧекСНОЕСН");
	МассивИмен.Добавить("ПереключитьЧекСНООСН");
	МассивИмен.Добавить("ПереключитьЧекСНОПатент");
	МассивИмен.Добавить("ПереключитьЧекСНОУСНДоход");
	МассивИмен.Добавить("ПереключитьЧекСНОУСНДоходРасход");
	
	Для Каждого ЭлементКнопка Из МассивИмен Цикл
		
		Если Элементы[ЭлементКнопка].ЦветФона = ЦветаФормы.ЗеленаяКнопка
			ИЛИ Элементы[ЭлементКнопка].ЦветФона = ЦветаФормы.КраснаяКнопка Тогда
			Продолжить;
		КонецЕсли;
		
		КнопкаАктивна = Элементы[ЭлементКнопка].Пометка И НЕ ОплатаБезДеленияПоЧекам;
		Элементы[ЭлементКнопка].ЦветФона = ?(КнопкаАктивна, ЦветАктивнойКнопки, ЦветНеАктивнойКнопки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФокусНаЭлементеФормыПриВводеОплаты(СуммаПоВидуОплаты = 0, ИмяПоляВвода = "")

	Если ТипЗнч(СуммаПоВидуОплаты) = Тип("Строка") Тогда
	
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		СуммаПоВидуОплаты = ОписаниеТипа.ПривестиЗначение(СуммаПоВидуОплаты);
		
	КонецЕсли;
	
	Если ИмяПоляВвода = "СуммаОплаченоБонусами" Тогда
		СуммаВнесенныхОплат = СуммаОплаченоСБП + СуммаОплаченоЮКасса + СуммаОплаченоБН + СуммаПоВидуОплаты
			+ СуммаОплаченоВРассрочку + СуммаОплаченоЗачетАванса + СуммаОплаченоНал + СуммаОплаченоСертификатами;
	ИначеЕсли ИмяПоляВвода = "СуммаОплаченоНал" Тогда
		СуммаВнесенныхОплат = СуммаОплаченоСБП + СуммаОплаченоЮКасса + СуммаОплаченоБН + СуммаОплаченоБонусами
			+ СуммаОплаченоВРассрочку + СуммаОплаченоЗачетАванса + СуммаПоВидуОплаты + СуммаОплаченоСертификатами;
	ИначеЕсли ИмяПоляВвода = "СуммаОплаченоБН" Тогда
		СуммаВнесенныхОплат = СуммаОплаченоСБП + СуммаОплаченоЮКасса + СуммаПоВидуОплаты + СуммаОплаченоБонусами
			+ СуммаОплаченоВРассрочку + СуммаОплаченоЗачетАванса + СуммаОплаченоНал + СуммаОплаченоСертификатами;
	ИначеЕсли ИмяПоляВвода = "СуммаОплаченоВРассрочку" Тогда
		СуммаВнесенныхОплат = СуммаОплаченоСБП + СуммаОплаченоЮКасса + СуммаОплаченоБН + СуммаОплаченоБонусами
			+ СуммаПоВидуОплаты + СуммаОплаченоЗачетАванса + СуммаОплаченоНал + СуммаОплаченоСертификатами;
	ИначеЕсли ИмяПоляВвода = "СуммаОплаченоЗачетАванса" Тогда
		СуммаВнесенныхОплат = СуммаОплаченоСБП + СуммаОплаченоЮКасса + СуммаОплаченоБН + СуммаОплаченоБонусами
			+ СуммаОплаченоВРассрочку + СуммаПоВидуОплаты + СуммаОплаченоНал + СуммаОплаченоСертификатами;
	ИначеЕсли ИмяПоляВвода = "СуммаОплатаСертификатами" Тогда
		СуммаВнесенныхОплат = СуммаОплаченоСБП + СуммаОплаченоЮКасса + СуммаОплаченоБН + СуммаОплаченоБонусами
			+ СуммаОплаченоВРассрочку + СуммаОплаченоЗачетАванса + СуммаОплаченоНал + СуммаПоВидуОплаты;
	ИначеЕсли ИмяПоляВвода = "СуммаОплаченоСБП" Тогда
		СуммаВнесенныхОплат = СуммаОплаченоЮКасса + СуммаПоВидуОплаты + СуммаОплаченоБН + СуммаОплаченоБонусами
			+ СуммаОплаченоВРассрочку + СуммаОплаченоЗачетАванса + СуммаОплаченоНал + СуммаОплаченоСертификатами;
	ИначеЕсли ИмяПоляВвода = "СуммаОплаченоЮКасса" Тогда
		СуммаВнесенныхОплат = СуммаОплаченоСБП + СуммаПоВидуОплаты + СуммаОплаченоБН + СуммаОплаченоБонусами
			+ СуммаОплаченоВРассрочку + СуммаОплаченоЗачетАванса + СуммаОплаченоНал + СуммаОплаченоСертификатами;
	Иначе
		СуммаВнесенныхОплат = СуммаОплаченоСБП + СуммаОплаченоЮКасса +СуммаОплаченоБН + СуммаОплаченоБонусами
			+ СуммаОплаченоВРассрочку + СуммаОплаченоЗачетАванса + СуммаОплаченоНал + СуммаОплаченоСертификатами
			+ СуммаОплаченоСертификатамиНСПК;
	КонецЕсли;
	
	ОткрытыСообщенияОбОшибках =
		(ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ГруппаИнфоОшибка);
	ТекущаяСтраницаОбщая = (Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбщая);
	
	Если НЕ (ОжидатьВводМарки ИЛИ ОткрытыСообщенияОбОшибках) И ТекущаяСтраницаОбщая Тогда
		
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
		ЭлементСУчетомВидаОплаты = ?(ИмяПоляВвода = "СуммаОплаченоНал",
			Элементы.ОплатаКартой,
			Элементы.ОплатаНаличными);
			
		ВыбратьЭлемент = ?(СуммаИтого <= СуммаВнесенныхОплат, Элементы.ПробитьЧек, ЭлементСУчетомВидаОплаты);
		
		Если НЕ ТекущийЭлемент = ВыбратьЭлемент Тогда
			ТекущийЭлемент = ВыбратьЭлемент;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКартинкуУказанияСерийИПартий(ТекущаяСтрока)
	
	Если ТекущаяСтрока.ПроверятьЗаполнениеСерий И Не ЗначениеЗаполнено(ТекущаяСтрока.СерияПредставление) Тогда
		Элементы.УказатьСерии.Картинка = БиблиотекаКартинок.СерииНеУказаны;
	ИначеЕсли ТекущаяСтрока.ПроверятьЗаполнениеПартий И Не ЗначениеЗаполнено(ТекущаяСтрока.Партия) Тогда
		Элементы.УказатьСерии.Картинка = БиблиотекаКартинок.РМКПартииНеУказаны;
	ИначеЕсли ТекущаяСтрока.НеобходимостьВводаСерии И Не ЗначениеЗаполнено(ТекущаяСтрока.СерияПредставление) Тогда
		Элементы.УказатьСерии.Картинка = БиблиотекаКартинок.РМКСерииНеОбязательны;
	ИначеЕсли ТекущаяСтрока.ИспользоватьПартии И Не ЗначениеЗаполнено(ТекущаяСтрока.Партия) Тогда
		Элементы.УказатьСерии.Картинка = БиблиотекаКартинок.РМКСерииНеОбязательны;
	ИначеЕсли ТекущаяСтрока.НеобходимостьВводаСерии И ЗначениеЗаполнено(ТекущаяСтрока.СерияПредставление)
		ИЛИ ТекущаяСтрока.ПроверятьЗаполнениеХарактеристики И ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
		Элементы.УказатьСерии.Картинка = БиблиотекаКартинок.СерииУказаны;
	ИначеЕсли ТекущаяСтрока.ИспользоватьПартии И ЗначениеЗаполнено(ТекущаяСтрока.Партия) Тогда
		Элементы.УказатьСерии.Картинка = БиблиотекаКартинок.РМКПартииУказаны;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимНаВозвратСкупки()
	
	Если Не РаботаСЧекомЗавершена() Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимПлитки Тогда
		ПереключитьНаРежимПлиткиИзПалитры();
	КонецЕсли;
	
	ПользовательДоЗаменыПрав = Объект.ПользовательБД;
	КассирДоЗаменыПрав = Объект.Кассир;
	
	НеобходимоеПраво = "ПравоЧекНаВозвратРМК";
	Если ЕстьПравоНаДействие(НеобходимоеПраво) Тогда
		ВыбратьЧекНаВозвратСкупки();
	Иначе
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЭлементыВРежимеСкупка()
	
	Элементы.ГруппаИнфо.ЦветФона = ЦветаФормы.ФонРежимаСкупка;
	
	ПравоИзменятьЦену = НЕ СписокРолейПользователя.НайтиПоЗначению("ПравоИзменятьЦенуРМК") = Неопределено;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварЦенаИзКарточки, ПравоИзменятьЦену);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРучнаяСкидкаНаТовар, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.УправляемыеСкидки, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварУправляемая, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатомНСПК, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСБП, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаЮКасса, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКоманднаяПанельКарта, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Ложь);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeКарта, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeНаличные, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЭлементыВРежимеВозвратСкупки()
	
	Элементы.ГруппаИнфо.ЦветФона = ЦветаФормы.ФонРежимаВозвратСкупки;
	
	ПравоИзменятьЦену = НЕ СписокРолейПользователя.НайтиПоЗначению("ПравоИзменятьЦенуРМК") = Неопределено;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварЦенаИзКарточки, ПравоИзменятьЦену);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРучнаяСкидкаНаТовар, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.УправляемыеСкидки, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварУправляемая, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатомНСПК, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСБП, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаЮКасса, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКоманднаяПанельКарта, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Ложь);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeКарта, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeНаличные, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимНаСкупка()
	
	Если Не РаботаСЧекомЗавершена() Тогда
		Возврат;
	КонецЕсли;
	
	ОформитьРежимНовогоЧека("Скупка");
	
	НачинатьНовыйЧекВРежимеСкупка = Истина;
	
	НастроитьЭлементыВРежимеСкупка();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуВРежимВозвратСкупкиБезЧека()
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнфо, Ложь);
	Если РежимНачальнойСтраницы = 1 Тогда
		НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
	Иначе
		НастроитьЭлементыФормы(Элементы.СтраницаПустая, Истина);
	КонецЕсли;
	
	НастроитьЭлементыВРежимеВозвратСкупки();
	
	ЭтоВозвратБезОснования = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСтраницуИнфоОшибкаНаКлиенте()
	
	Для Каждого СтрокаКассыККМ Из ТаблицаКассККМОрганизаций Цикл
		Если СтрокаКассыККМ.СтатусКонтроляВремениНачалаСмены = 1 Тогда
			СтрокаКассыККМ.СтатусКонтроляВремениНачалаСмены = 2;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ОткрытоПредупреждениеОЗапретеОплатыБонусами = Ложь;
	// ОсновнаяСтраницаДляОтображения = Элементы.СтраницаОбщая;
	ДоступностьПоискаВЧеке = (Объект.Товары.Количество() > 0);
	
	Если Объект.Товары.Количество() = 0 И Не РежимЦифровойПанели = РежимыЦифровойПанели.ДанныеПокупателя 
		И НЕ РежимНачальнойСтраницы = 1 Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПустая);
	КонецЕсли;
	
	// ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(ОсновнаяСтраницаДляОтображения);
	
	АктивнаяГруппаСлоя = Элементы.ОбластьОперативногоУправленияЧеком;
	ГруппаОсновнаяКоманднаяПанель = Элементы.ГруппаСлоевОсновнаяКоманднаяПанельУправленияЧеком;
	ОшибкаРасчетаСкидок = (ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ГруппаОсновнаяКоманднаяПанель)
			= Элементы.ГруппаКомандПродолжитьБезРасчета);
	ОшибкаДействияСЧеком = (Элементы.ГруппаИнфоОшибкаДействияСЧеком.Видимость = Истина);
	
	Если РежимЦифровойПанели = РежимыЦифровойПанели.ДанныеПокупателя Тогда
		АктивнаяГруппаСлоя = Элементы.ГруппаДанныеПокупателя;
		УстановитьДоступностьКомандПанелиПокупателя(Истина);
		Если ОшибкаРасчетаСкидок Тогда
			ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаКомандЦифроваяПанель);
		КонецЕсли;
	ИначеЕсли Не РежимРаботыСЧеком = РежимыРаботыСЧеком.Проверка Тогда
		ОтображатьСтраницуВводаМарки = Ложь;
		Если Объект.Товары.Количество() > 0 Тогда
			
			ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
			Если Не ТекущаяСтрока = Неопределено Тогда
				
				ОтображатьСтраницуВводаМарки = ТекущаяСтрока.НеобходимостьВводаКодаМаркировки
					И НЕ ЗначениеЗаполнено(ТекущаяСтрока.КодМаркировки)
					И НЕ ЭтоЧекКоррекции;
				
				Если ОтображатьСтраницуВводаМарки Тогда
					АктивнаяГруппаСлоя = Элементы.ГруппаОтсканироватьМарку;
				Иначе
					НеЗаполненыСерии = ТекущаяСтрока.ПроверятьЗаполнениеСерий
						И Не ЗначениеЗаполнено(ТекущаяСтрока.СерияПредставление);
					НеЗаполненыПартии = ТекущаяСтрока.ПроверятьЗаполнениеПартий
						И Не ЗначениеЗаполнено(ТекущаяСтрока.Партия);
					Если НеЗаполненыСерии Или НеЗаполненыПартии Тогда
						ТекущаяОперация = "";
						ОткрытьСтраницуСерии(ТекущаяСтрока);
						АктивнаяГруппаСлоя
							= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		Если (СуммаОплаченоСБП > 0 Или СуммаОплаченоЮКасса > 0) И НЕ ОтображатьСтраницуВводаМарки Тогда
			АктивнаяГруппаСлоя = Элементы.ГруппаПлатежнаяСистема;
		КонецЕсли;
	КонецЕсли;
	
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, АктивнаяГруппаСлоя);
	ЭтоРежимОплаты = Ложь; 
	Если Не РежимЦифровойПанели = РежимыЦифровойПанели.ДанныеПокупателя Тогда
		ЭтоРежимОплаты = ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатой(ЭтотОбъект);
		Если ЭтоРежимОплаты Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ВозвратКоррекция Тогда
			Если СуммаОплаченоСертификатамиНСПК > 0 Тогда
				ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаКомандПробитияЧекаНСПК);
			Иначе
				ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаКомандПробитияЧека);
			КонецЕсли;
			НастроитьДоступностьПробитьЧек();
		ИначеЕсли РежимРаботыСЧеком = РежимыРаботыСЧеком.ПродолжениеПослеПробития
				Или РежимРаботыСЧеком = РежимыРаботыСЧеком.Проверка Тогда
			ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаКомандПродолженияПослеПробития);
		ИначеЕсли Не РежимВводаСимволовИСумм(РежимЦифровойПанели, РежимыЦифровойПанели) Тогда
			ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаКомандПереходаКОплате);
			ИнтерфейсРМКСлужебныйКлиент.НастроитьДоступностьРежимаОплаты(ЭтотОбъект);
		КонецЕсли;
		
		ПодготовитьИнтерфейсДобавленияТовараБезКонтрольнойМарки(ТекущаяСтрока);
	
		УстановитьДоступностьЭлементаФормы(Элементы.НайтиВЧеке, ДоступностьПоискаВЧеке);
		Если Не РежимРаботыСЧеком = РежимыРаботыСЧеком.Проверка Тогда
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Не ЭтоРежимОплаты);
			ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьДоступностьЭлементовГруппыОперацииКромеОтложитьУдалить(Элементы,
				Не ЭтоРежимОплаты);
			УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, Не ЭтоРежимОплаты);
		ИначеЕсли РежимКассыСамообслуживания Тогда
			УстановитьДоступностьЭлементаФормы(Элементы.НайтиПоШтрихкодуКСО, Истина);
		КонецЕсли;
	КонецЕсли;
	Если ОшибкаРасчетаСкидок Или ОшибкаДействияСЧеком Тогда
		НастроитьДоступностьЭлементовПриПоискеПоШтрихкоду(Истина);
	КонецЕсли;

	Если ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатой(ЭтотОбъект) Тогда
		ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
		РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	КонецЕсли;
	ПогаситьСветовойСигналОбОшибкеНаДисплее();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЭлементыФормыПоОтложенномуЧеку()
	
	Если ОтложенныйЧекПолностьюОплачен Тогда
		
		СНОВСписке      = РазличныеСНОВСпискеПокупок();
		СНОИОрганизация = СНОВСписке[0]; 
		
		ВыбраннаяОрганизация            = СНОИОрганизация.Организация;
		ВыбраннаяСистемаНалогообложения = СНОИОрганизация.СистемаНалогообложения;
		
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаВидовОплат, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.Каталог, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧек, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧекНСПК, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеЗаголовкаСтраницыПоискаТовара(ТекстЗаголовка = "", ДополнительныйСписок = Ложь)
	
	СписокТоваровДляЗаголовка = Элементы.СписокТоваров;
	Если ДополнительныйСписок = Истина Тогда
		СписокТоваровДляЗаголовка = Элементы.ДополнительныйСписокТоваров;
	КонецЕсли;
	
	ОтображатьЗаголовокКаталога = ЗначениеЗаполнено(ТекстЗаголовка);
	СписокТоваровДляЗаголовка.ПоложениеЗаголовка
		= ?(ОтображатьЗаголовокКаталога, ПоложениеЗаголовкаЭлементаФормы.Верх, ПоложениеЗаголовкаЭлементаФормы.Нет);
	Если ОтображатьЗаголовокКаталога Тогда
		СписокТоваровДляЗаголовка.Заголовок = ТекстЗаголовка;
	Иначе
		РежимВыбораПодарка = Ложь;
		РежимВыбораПодарочногоСертификата = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьПереченьГруппыКомандЕще()

	УстановитьВидимостьЭлементаФормы(Элементы.ОбновитьОграниченияПродаж, 
		ИспользоватьКонтрольПродаж ИЛИ ИспользоватьПоставляемыеОграниченияПродаж);
		
	УстановитьВидимостьЭлементаФормы(Элементы.СверкаИтогов, ИспользоватьОплатуПлатежнымиКартами);
	
	ЭтоПечатьТоварногоЧекаНаКассовомОборудовании = (СпособФормированияТоварногоЧека = 2);
	ЭтоПечатьТоварногоЧекаНаОфисномПринтере = (СпособФормированияТоварногоЧека = 1);
	
	ПечататьТоварныйЧек = ЭтоПечатьТоварногоЧекаНаКассовомОборудовании Или ЭтоПечатьТоварногоЧекаНаОфисномПринтере;
	
	Если ПечататьТоварныйЧек Тогда
		
		КомандаПечати = Команды.Найти("РаспечататьТоварныйЧек");
		Если Не КомандаПечати = Неопределено Тогда
			
			ЗаголовокКоманды = НСтр("ru = ''");
			
			Если ЭтоПечатьТоварногоЧекаНаКассовомОборудовании Тогда
				
				ЗаголовокКоманды = НСтр("ru = 'Распечатать товарный чек (принтер чеков/ККТ)'");
				Подсказка = НСтр("ru = 'Сформировать товарный чек на принтере чеков или ККТ, если не подключен принтер чеков.'");
				
			Иначе
				
				ЗаголовокКоманды = НСтр("ru = 'Распечатать товарный чек (офисный принтер)'");
				Подсказка = НСтр("ru = 'Сформировать товарный чек для вывода на офисном принтере.'");
				
			КонецЕсли;
			
			КомандаПечати.Заголовок = ЗаголовокКоманды;
			КомандаПечати.Подсказка = Подсказка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементаФормы(Элементы.РаспечататьТоварныйЧек, ПечататьТоварныйЧек);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ОткрытьФормуОбменаДанными, ЗапускатьОбменИзИнтерфейсаРМК);

КонецПроцедуры

&НаКлиенте
Процедура НастроитьЭлементыДляВнесенияИлиВыемки(ЭтоВнесение)
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	Если ЭтоВнесение Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаВнесение);
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаВнесение);
	Иначе
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаВыемка);
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаВыемка);
	КонецЕсли;
	
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницыЛево, Ложь);
	Если ЭтоВнесение Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнфоВнесение, Истина);
	Иначе
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнфоВыемка, Истина);
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.СтраницыЛево, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьЭлементыПослеВнесенияИлиВыемки()
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнфо, Ложь);
	
	Если ПараметрыЗакрытияСменыПриАвтоматическойВыемке.РежимВыбораКассы Тогда
		ПереключитьНаСтраницуВыбораКассыККМ();
	ИначеЕсли РежимНачальнойСтраницы = 1 Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	Иначе
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПустая);
	КонецЕсли;
	
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПанельУправленияЧеком);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнфоВнесение, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнфоВыемка, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницыЛево, Истина);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьГруппыОперации(Элементы);
	
	УстановитьДоступностьЭлементаФормы(Элементы.СтраницыЛево, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаморозитьФормуПослеПробитияЧека()
	
	РаспечаткаТоварногоЧекаДоступна = РаспечаткаТоварногоЧекаДоступна();
	ЭтоПродажа = ((Не ЭтоЧекКоррекции) И ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации));
	ЭтоВозврат = ((Не ЭтоЧекКоррекции) И ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации));
	
	РежимРаботыСЧеком = РежимыРаботыСЧеком.ПродолжениеПослеПробития;
	ИнтерфейсРМКСлужебныйКлиентСервер.СкрытьКнопкиНулевыхВидовОплат(ЭтотОбъект);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, Истина);
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ОбластьОперативногоУправленияЧеком);
	ТекущийСлойВспомогательнойПанели
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевЛеваяВерхняяВспомогательнаяПанель);
	УстановитьВспомогательныйСлойЗамороженногоЧека(ТекущийСлойВспомогательнойПанели);
	УстановитьДоступностьИнформацииДляЧека(Ложь, ТекущийСлойВспомогательнойПанели);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьВозвратаВПодбор(ЭтотОбъект, Ложь);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаКомандПродолженияПослеПробития);
	ИнтерфейсРМКСлужебныйКлиентСервер.ВключитьДополнительнуюКоманднуюПанельУправленияЧеком(Элементы.ГруппаКомандПродолженияПослеПробитияДополнительно);
	ЭтаФорма.ТекущийЭлемент = Элементы.ПродолжитьПослеПробитияЧека;
	
	ЕстьПробитыеЧеки = (ПробитыеЧеки.Количество() > 0);
	УстановитьВидимостьЭлементаФормы(Элементы.ВыполнитьВозвратТекущегоЧека,
		(ЕстьПробитыеЧеки И ЭтоПродажа И ЕстьПравоНаДействие("ПравоЧекНаВозвратРМК")));
	УстановитьВидимостьЭлементаФормы(Элементы.РаспечататьТекущийТоварныйЧек,
		(ЕстьПробитыеЧеки И (ЭтоПродажа ИЛИ ЭтоВозврат) И РаспечаткаТоварногоЧекаДоступна));
	УстановитьВидимостьЭлементаФормы(Элементы.ПробитьТекущийЧекПовторно, ЕстьПробитыеЧеки И (ЭтоПродажа ИЛИ ЭтоВозврат));
	УстановитьВидимостьЭлементаФормы(Элементы.РаспечататьТекущееЗаявлениеНаВозврат, ЕстьПробитыеЧеки И ЭтоВозврат);
	УстановитьВидимостьЭлементаФормы(Элементы.ПовторитьЧек, ЕстьПробитыеЧеки И ЭтоПродажа И Не ПриемАванса);
	
	Элементы.СуммаИтогоРасширеннаяПодсказка.ЦветТекста = WebЦвета.Серый;
	Элементы.СдачаРасширеннаяПодсказка.ЦветТекста = WebЦвета.Серый;
	РазблокироватьГруппуОперацийВЗамороженнойФорме();
	Если ИспользоватьПанельИзбранныхТоваров Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ПанельИзбранныхТоваров, Истина);
	КонецЕсли;
	Если Элементы.СтраницыЛево.ТекущаяСтраница = Элементы.СтраницаПодтверждениеНСПК Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаЛевоОбщая);
	КонецЕсли;
	
	СистемыНалогообложенияТоваровВКорзине = РазличныеСНОВСпискеПокупок();
	Если СистемыНалогообложенияТоваровВКорзине.Количество() > 1 Тогда
		КомандаПереключенияОрганизации = ЭтаФорма.Команды.Найти("ПереключитьЧекОрганизация1");
		Если Не КомандаПереключенияОрганизации = Неопределено Тогда
			ПереключитьЧекПродажи(КомандаПереключенияОрганизации);
		КонецЕсли;
	КонецЕсли;
	ОбработатьИзменениеТаблицыТоваровНаКлиенте(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РазморозитьФормуПослеПробитияЧека(ЭтоВозвратТекущегоЧека = Ложь)
	
	ИнтерфейсРМКСлужебныйКлиентСервер.ВосстановитьКнопкиВидовОплат(ЭтотОбъект);
	УстановитьДоступностьИнформацииДляЧека(Истина);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаДополнительнаяКоманднаяПанельПустая);

	Если Не ЭтоВозвратТекущегоЧека Тогда
		ПоказатьПустуюСтраницуПослеПробитияЧека();
	ИначеЕсли Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевЛеваяВерхняяВспомогательнаяПанель)
		= Элементы.ГруппаДополнительноеУправлениеЧеком Тогда
		
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаДополнительноеУправлениеЧеком);
	КонецЕсли;
	Элементы.СуммаИтогоРасширеннаяПодсказка.ЦветТекста = WebЦвета.Черный;
	Элементы.СдачаРасширеннаяПодсказка.ЦветТекста = WebЦвета.Черный;
	
КонецПроцедуры

&НаКлиенте
Процедура РазблокироватьГруппуОперацийВЗамороженнойФорме()
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	Для каждого ПодчиненныйЭлемент Из Элементы.ГруппаОперации.ПодчиненныеЭлементы Цикл
		ЗначениеДоступности = Не (ПодчиненныйЭлемент = Элементы.СкидкаНаЧек
				ИЛИ ПодчиненныйЭлемент = Элементы.ОтменитьИзмененияЧека 
				ИЛИ ПодчиненныйЭлемент = Элементы.УдалитьЧек);
		УстановитьДоступностьЭлементаФормы(ПодчиненныйЭлемент, ЗначениеДоступности);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьИнформацииДляЧека(ЗначениеДоступности, ТекущийСлойВспомогательнойПанели = Неопределено)
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаИнфо, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаТовары, ЗначениеДоступности);
	УстановитьДоступностьПолейОплаты(ЗначениеДоступности, ТекущийСлойВспомогательнойПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПолейОплаты(ЗначениеДоступности, ТекущийСлойВспомогательнойПанели)
	Если ЗначениеДоступности Тогда
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ПанельВидовОплат, Истина);
	Иначе
		Если ТекущийСлойВспомогательнойПанели = Элементы.ПанельВводаНаличныхВертикальная Тогда
			УстановитьДоступностьЭлементаФормы(Элементы.ПанельВидовОплат, Ложь);
		Иначе
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека, Ложь);
		КонецЕсли;
	КонецЕсли;
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаСводныеДанныеЧека, ЗначениеДоступности);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьКартинкуВводПокупателяБезКонтекста(Форма)

	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеЛояльностиЗаполнены(Форма) Тогда
		КартаФИО = Форма.НайденнаяКартаФИО;
		ЧастиФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(КартаФИО),
			СтрШаблон(НСтр("ru = '%1'"), " "));
		ПредставлениеФИО = КартаФИО;
		Если ЧастиФИО.Количество() > 2 Тогда
			ПредставлениеФИО = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Форма.НайденнаяКартаФИО);
		КонецЕсли;
		
		Элементы.ВвестиДанныеПокупателя.Картинка = БиблиотекаКартинок.ДанныеПокупателяВведены;
		ЗаголовокКнопки = НСтр("ru = 'Карта введена'");
		Если ЗначениеЗаполнено(Объект.Контрагент)
				И Не ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеДисконтнойКартыЗаполнены(Форма) Тогда
			ЗаголовокКнопки = ПредставлениеФИО;
		Иначе
			Если ЗначениеЗаполнено(Форма.НайденнаяКартаНомер) Тогда
				ЗаголовокКнопки = СтрШаблон(НСтр("ru = 'Карта
					|№ %1'"), Форма.НайденнаяКартаНомер);
			ИначеЕсли ЗначениеЗаполнено(Форма.НайденнаяКартаТелефон) Тогда
				ЗаголовокКнопки = СтрШаблон(НСтр("ru = 'Карта
					|тел. %1'"), Форма.НайденнаяКартаТелефон);
			ИначеЕсли ЗначениеЗаполнено(Форма.НайденнаяКартаФИО) Тогда
				ЗаголовокКнопки = ПредставлениеФИО;
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ВвестиДанныеПокупателя.Заголовок = ЗаголовокКнопки;
	Иначе
		Элементы.ВвестиДанныеПокупателя.Картинка = БиблиотекаКартинок.ВвестиДанныеПокупателя;
		Элементы.ВвестиДанныеПокупателя.Заголовок =
			?(Форма.РежимКассыСамообслуживания, НСтр("ru = 'Карта лояльности'"), НСтр("ru = 'Данные покупателя'"));
	КонецЕсли;
		
	НастроитьЗаголовкиКнопокПоискаОтменыКарты(Форма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьРежимНовогоЧека(РежимЧека)
	
	Если Не РежимЧека = "Заказ" И РежимЗаказа Тогда
		Если ЗначениеЗаполнено(Объект.Контрагент) Или ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			ОчиститьДанныеПокупателя();
			ИзменитьКартинкуВводПокупателя();
		КонецЕсли;
	КонецЕсли;
	
	РежимЗаказа = РежимЧека = "Заказ";
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCode, Не (РежимЗаказа Или РежимКассыСамообслуживания));
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКомандСозданияЗаказа, РежимЗаказа);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКомандКОплате, Не РежимЗаказа);
	
	Если РежимЧека = "Продажа" Тогда
		
		Если ДанныеПакета = Неопределено Или РежимКассыСамообслуживания Тогда
			Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКЗаставкаПродажа;
		Иначе
			Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКQRПакет;
		КонецЕсли;
		Элементы.ДекорацияТекстПустойСтраницы.Заголовок =
			ТекстПустойСтраницыВРежимеПродажи(РежимКассыСамообслуживания);
		СформироватьЗаголовок(НСтр("ru='Продажа'"));
		Объект.ВидОперации = ОбщегоНазначенияРМККлиент.ВидТекущейОперации();
		
	ИначеЕсли РежимЧека = "Возврат" Тогда
		
		Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКЗаставкаВозврат;
		Элементы.ДекорацияТекстПустойСтраницы.Заголовок =
			НСтр("ru='Начните возврат, добавив товар сканером, из избранного или каталога'");
		СформироватьЗаголовок(НСтр("ru='Возврат'"));
		Объект.ВидОперации = ОбщегоНазначенияРМККлиент.ВидТекущейОперации(Истина);
		
	ИначеЕсли РежимЧека = "Скупка" Тогда
		
		Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКЗаставкаСкупка;
		Элементы.ДекорацияТекстПустойСтраницы.Заголовок =
			НСтр("ru='Начните скупку, добавив товар сканером, из избранного или каталога'");
		СформироватьЗаголовок(НСтр("ru='Скупка'"));
		Объект.ВидОперации = ОбщегоНазначенияРМККлиент.ВидТекущейОперации( ,Истина);
		
	ИначеЕсли РежимЧека = "ВозвратСкупки" Тогда
		
		Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКЗаставкаВозвратСкупки;
		Элементы.ДекорацияТекстПустойСтраницы.Заголовок =
			НСтр("ru='Начните возврат скупки, добавив товар сканером, из избранного или каталога'");
		СформироватьЗаголовок(НСтр("ru='Возврат скупки'"));
		Объект.ВидОперации = ОбщегоНазначенияРМККлиент.ВидТекущейОперации(Истина, Истина);
		
	ИначеЕсли РежимЧека = "Заказ" Тогда
		
		Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКЗаставкаЗаказ;
		Элементы.ДекорацияТекстПустойСтраницы.Заголовок =
			НСтр("ru='Начните заказ, добавив товар сканером, из избранного или каталога'");
		СформироватьЗаголовок(НСтр("ru='Заказ'"));
		Объект.ВидОперации = ОбщегоНазначенияРМККлиент.ВидТекущейОперации();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПустойСтраницыВРежимеПродажи(ЭтоРежимКассыСамообслуживания = Ложь)
	
	Если ЭтоРежимКассыСамообслуживания Тогда
		ТекстСтраницы = НСтр("ru='Начните покупку просканировав товар или выбрав из каталога'");
	Иначе
		ТекстСтраницы = НСтр("ru='Начните продажу, добавив товар сканером или из каталога'");
	КонецЕсли;
	
	Возврат ТекстСтраницы;
	
КонецФункции

&НаКлиенте
Процедура ВывестиСтраницуЗаменыПрав(ЗаголовокЗаменыПрав, ТекстЗаменыПравДополнительный)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	ПредыдущийСлойДоДанныхПокупателя
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаЗаменаПрав);
	НастроитьДоступностьЭлементовПриПоискеПоШтрихкоду(Ложь);
	Элементы.ДекорацияЗаголовокЗаменаПрав.Заголовок = ЗаголовокЗаменыПрав;
	Элементы.ДекорацияТекстЗаменаПрав.Заголовок = ТекстЗаменыПравДополнительный;
	ТекущийЭлемент = Элементы.КодДляЗаменыПрав;
	Если РежимПлитки Тогда
		ПереключатьсяВРежимПлитки = Ложь;
		ПереключитьНаРежимПлиткиИзПалитры();
	КонецЕсли;
	УстановитьВидимостьЭлементаФормы(Элементы.ОтменитьПарольКассира, ДоступнаОтменаОперацииЗаменыПрав());
	СкрытьОшибкуЗаменыПравПриНеобходимости();
	Если РежимКассыСамообслуживания Тогда
		ВывестиСветовойСигналОбОшибкеНаДисплей();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаСтраницуПоискКартыКартаНеНайдена()
	
	СкрытьДекорациюВводКарты();
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаКартаНеНайдена);
	НастроитьЦифровуюПанель();
	ТекущийЭлемент = Элементы.СтрокаПовторныйПоискКарты;
	ЭлементВводаДанныхПокупателя = ТекущийЭлемент;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВспомогательныйСлойЗамороженногоЧека(ТекущийСлойВспомогательнойПанели)
	Если ЭтоЗаменаТоваров Или ЭтоЧекКоррекции Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаДополнительноеУправлениеЧеком);
	Иначе
		Если Не (ТекущийСлойВспомогательнойПанели = Элементы.ГруппаПоискСертификатов Или ТекущийСлойВспомогательнойПанели = Элементы.ПанельВводаНаличныхВертикальная) Тогда
			ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаДополнительноеУправлениеЧеком);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЗаголовокКнопкиОплаты()
	
	Если РежимПлитки Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	НовыйТекстЗаголовка = СтрШаблон(НСтр("ru='Оплатить (позиций: %1)'"), Объект.Товары.Количество());
	Элементы.ПерейтиКОплате.Заголовок = НовыйТекстЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьШиринуКолонкиНомерСтроки()
	КоличествоСтрок = Объект.Товары.Количество();
	Если КоличествоСтрок > 99 И ОтображатьНумерациюСтрок
		И Элементы.ТоварыНомерСтроки.Ширина < 3 Тогда
		Элементы.ТоварыНомерСтроки.Ширина = 3;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УбратьОтображениеПодсказкиОплатитьБонусами()
	
	Если ПараметрыВводаКодаSMS = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СуммаПодтвержденияСписанияБонусов > 0 Тогда
		РассчитатьСуммуОплатыБонусамиПредварительная();
		Если СуммаБонусовПредварительная > 0 И СуммаБонусовПредварительная < СуммаПодтвержденияСписанияБонусов Тогда
			Элементы.ОплатитьБонусами.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЗаголовокКнопкиСкидки()
	ЗаголовокСкидок = НСтр("ru='%1'");
	ЗаголовокКоманды = НСтр("ru='%1'");
	СуммаСкидкиЗначение = СуммаСкидки;
	Если СуммаСкидкиЗначение > 0 Тогда
		ЗаголовокКоманды = НСтр("ru='Скидка'");
		ФорматВыводаСкидки = НСтр("ru = 'ЧДЦ=2; ЧН=0,00; ЧФ=''- Ч'''");
	ИначеЕсли СуммаСкидкиЗначение < 0 Тогда
		ЗаголовокКоманды = НСтр("ru='Наценка'");
		СуммаСкидкиЗначение = - СуммаСкидки;
		ФорматВыводаСкидки = НСтр("ru = 'ЧДЦ=2; ЧН=0,00; ЧФ=''+ Ч'''");
	Иначе
		ЗаголовокКоманды = НСтр("ru='Скидка'");
		ФорматВыводаСкидки = НСтр("ru = 'ЧДЦ=2; ЧН=0,00'");
	КонецЕсли;
	Элементы.СуммаСкидкиЗначение.Формат = ФорматВыводаСкидки;
	НовыйТекстЗаголовка = СтрШаблон(ЗаголовокСкидок, Формат(СуммаСкидкиЗначение,ФорматВыводаСкидки));
	Элементы.ПоказатьСкидкиНаЧекРасширеннаяПодсказка.Заголовок = НовыйТекстЗаголовка;
	Элементы.ПоказатьСкидкиНаЧек.Заголовок = ЗаголовокКоманды;
	Элементы.СуммаСкидкиЗначениеРасширеннаяПодсказка.Заголовок = ЗаголовокКоманды;
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеСкидки()
	УстановитьВидимостьЭлементаФормы(Элементы.ТоварыГруппаСкидка, РежимОтображенияСкидки = 0);
	УстановитьВидимостьЭлементаФормы(Элементы.ТоварыГруппаПроцентСкидки, РежимОтображенияСкидки = 1);
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьЭлементВыбораСерииПартии(ТекущаяСтрока)
	Если Не Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоискТовара Тогда
		Если ТекущаяСтрока.НеобходимостьВводаСерии Тогда
			ТекущийЭлемент = ?(СерииНеВыгружаются, Элементы.ВыборСерииИдентификатор, Элементы.ВыборСерии);
		ИначеЕсли ТекущаяСтрока.ИспользоватьПартии Тогда
			ТекущийЭлемент = Элементы.ВыборПартии;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСерии()
	Если НЕ ИспользоватьСерверЛояльностиПолучательДанных Тогда
		Возврат;
	КонецЕсли;
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторСерий) 
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.СерияПредставление) Тогда
			СтруктураСтроки = Новый Структура("ИдентификаторСерий, СерияПредставление", СтрокаТаблицы.ИдентификаторСерий, СтрокаТаблицы.СерияПредставление);
			ОбщегоНазначенияРМК.ЗаполнитьДанныеСерииПоИдентификатору(СтруктураСтроки,ЭтотОбъект);
			СтрокаТаблицы.СерияПредставление = СтруктураСтроки.СерияПредставление;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЧислоИзТекста(ТекстЧисла)
	
	ЧислоТекста = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ТекстЧисла);
	Если ЧислоТекста = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	Возврат ЧислоТекста;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЦенуСерии(Номенклатура, Характеристика, Серия, ЦенаСерии)
	Если СерииНеВыгружаются Тогда
		СтруктураСтроки = Новый Структура("Номенклатура, Характеристика, ИдентификаторСерии", Номенклатура, Характеристика, Серия);
		ОбщегоНазначенияРМК.ПолучитьАктуальнуюЦенуССервераЛояльности(СтруктураСтроки, ЦенаСерии, ЭтаФорма);
	Иначе
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьЦенуСерии(Номенклатура, Характеристика, Серия, ЦенаСерии);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьИнтерфейсДобавленияТовараБезКонтрольнойМарки(СтрокаТовара)
	
	Если НЕ СтрокаТовара = Неопределено Тогда
		
		ЭтоПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
		ЭтоОперацияВозврата = Не ЭтоПродажа Или ЭтоВозвратБезОснования;
		
		ТоварДопускаетсяБезМарки = Ложь;
		ОсобенностьУчета = СтрокаТовара.ОсобенностьУчета;
		Если СтрокаТовара.ПоштучноеВыбытие И СтрокаТовара.ЭтоПивнаяПродукция Тогда
			ТоварДопускаетсяБезМарки = Ложь;
		Иначе
			Если ЗначениеЗаполнено(ОсобенностьУчета) Тогда
				Если НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()) > ДатаКэшаОсобенностейУчетаБезМарки Тогда
					ОбновитьКэшОсобенностейУчетаБезМарки();
				КонецЕсли;
				
				Если ЭтоОперацияВозврата Тогда
					ТоварДопускаетсяБезМарки =
						Не ОсобенностиУчетаДляВозвратаБезМарки.НайтиПоЗначению(ОсобенностьУчета) = Неопределено;
				Иначе
					ТоварДопускаетсяБезМарки =
						Не ОсобенностиУчетаДляПродажиБезМарки.НайтиПоЗначению(ОсобенностьУчета) = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ВидимостьГруппыДобавленияТовараБезМарки =
			СтрокаТовара.НеобходимостьВводаКодаМаркировки
			И НЕ ЗначениеЗаполнено(СтрокаТовара.КодМаркировки)
			И ТоварДопускаетсяБезМарки;
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыполненияВозвратаБезМаркиПослеОшибкиВводаМарки,
		ВидимостьГруппыДобавленияТовараБезМарки);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыполненияВозвратаБезМарки,
		ВидимостьГруппыДобавленияТовараБезМарки);
		
		ОткрытыСообщенияОбОшибках
			= (ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
				= Элементы.ГруппаИнфоОшибка);
		ТекущаяСтраницаОбщая = (Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбщая);
		
		Если НЕ ОткрытыСообщенияОбОшибках Тогда
			
			ТекущийСлойСлужебнойИнформацииЧека
				= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
			Если ТекущаяСтраницаОбщая И (ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаОтсканироватьМарку
				ИЛИ ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаНеверноОтсканированныйШтрихкод) Тогда
				
				ТекущийЭлемент = ?(ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаОтсканироватьМарку,
					Элементы.ВернутьПозициюБезМарки,
					Элементы.ВернутьПозициюБезМаркиПослеОшибкиРазбораМарки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьИнтерфейсДобавленияТовараБезКонтрольнойМаркиНаСервере(СтрокаТовара)
	
	Если НЕ СтрокаТовара = Неопределено Тогда
		
		ЭтоПродажа = ОбщегоНазначенияРМК.ЭтоВидОперацииПродажа(Объект.ВидОперации);
		ЭтоОперацияВозврата = Не ЭтоПродажа Или ЭтоВозвратБезОснования;
		
		ТоварДопускаетсяБезМарки = Ложь;
		ОсобенностьУчета = СтрокаТовара.ОсобенностьУчета;
		Если СтрокаТовара.ПоштучноеВыбытие И СтрокаТовара.ЭтоПивнаяПродукция Тогда
			ТоварДопускаетсяБезМарки = Ложь;
		Иначе
			Если ЗначениеЗаполнено(ОсобенностьУчета) Тогда
				Если НачалоДня(ТекущаяДатаСеанса()) > ДатаКэшаОсобенностейУчетаБезМарки Тогда
					ОбновитьКэшОсобенностейУчетаБезМарки();
				КонецЕсли;
				
				Если ЭтоОперацияВозврата Тогда
					ТоварДопускаетсяБезМарки =
						Не ОсобенностиУчетаДляВозвратаБезМарки.НайтиПоЗначению(ОсобенностьУчета) = Неопределено;
				Иначе
					ТоварДопускаетсяБезМарки =
						Не ОсобенностиУчетаДляПродажиБезМарки.НайтиПоЗначению(ОсобенностьУчета) = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ВидимостьГруппыДобавленияТовараБезМарки =
			СтрокаТовара.НеобходимостьВводаКодаМаркировки
			И НЕ ЗначениеЗаполнено(СтрокаТовара.КодМаркировки)
			И ТоварДопускаетсяБезМарки;
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыполненияВозвратаБезМаркиПослеОшибкиВводаМарки,
		ВидимостьГруппыДобавленияТовараБезМарки);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыполненияВозвратаБезМарки,
		ВидимостьГруппыДобавленияТовараБезМарки);
		
		ОткрытыСообщенияОбОшибках
			= (ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
				= Элементы.ГруппаИнфоОшибка);
		ТекущаяСтраницаОбщая = (Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбщая);
		
		Если НЕ ОткрытыСообщенияОбОшибках Тогда
			
			ТекущийСлойСлужебнойИнформацииЧека
				= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
			Если ТекущаяСтраницаОбщая И (ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаОтсканироватьМарку
				ИЛИ ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаНеверноОтсканированныйШтрихкод) Тогда
				
				ТекущийЭлемент = ?(ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаОтсканироватьМарку,
					Элементы.ВернутьПозициюБезМарки,
					Элементы.ВернутьПозициюБезМаркиПослеОшибкиРазбораМарки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Оборудование

&НаКлиенте
Процедура ВыполнитьПоискШтрихкода(Штрихкод)
	
	Если ЗакрыватьПодборПриВыбореТовара Тогда
		ВыйтиИзРежимаПлитки();
	КонецЕсли;
	
	ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
	ОтменитьРедактированиеКоличестваТовараПриНеобходимости();
	Если (ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека) 
		= Элементы.ГруппаНайтиВЧеке И НЕ РежимПоказаСкидок) Или РежимРаботыСЧеком = РежимыРаботыСЧеком.Проверка Тогда
		НайтиТоварВЧеке(Штрихкод);
	ИначеЕсли РежимПоказаСкидок
		И ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
		= Элементы.ГруппаНайтиВЧеке Тогда
		НайтиТоварРасшифровкеСкидок(Штрихкод);
	ИначеЕсли Штрихкод = ШтрихкодированиеРМККлиент.СлужебныйШтрихкодНетМарки()
		ИЛИ Штрихкод = ШтрихкодированиеРМККлиент.СлужебныйШтрихкодНетМаркиБезУчетаШрифтов() Тогда
		Если Не ФормаЗамороженаПослеПробитияЧека() Тогда
			Если ОжидатьВводМарки И Элементы.ГруппаВыполненияВозвратаБезМарки.Видимость Тогда
				ДобавитьТоварБезМарки();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Штрихкод = ШтрихкодированиеРМККлиент.СлужебныйШтрихкодОплатаНаличными()
		ИЛИ Штрихкод = ШтрихкодированиеРМККлиент.СлужебныйШтрихкодОплатаНаличнымиБезУчетаШрифтов() Тогда
		Если Не ФормаЗамороженаПослеПробитияЧека() Тогда 
			ОплатитьНаличнымиВТихомРежиме();
		КонецЕсли;
	ИначеЕсли Штрихкод = ШтрихкодированиеРМККлиент.СлужебныйШтрихкодОплатаКартой()
		ИЛИ Штрихкод = ШтрихкодированиеРМККлиент.СлужебныйШтрихкодОплатаКартойБезУчетаШрифтов() Тогда
		Если Не ФормаЗамороженаПослеПробитияЧека() Тогда 
			ОплатитьКартойВТихомРежиме();
		КонецЕсли;
	ИначеЕсли Штрихкод = ШтрихкодированиеРМККлиент.СлужебныйШтрихкодАвтоматическиеСкидки()
		ИЛИ Штрихкод = ШтрихкодированиеРМККлиент.СлужебныйШтрихкодАвтоматическиеСкидкиБезУчетаШрифтов() Тогда
		Если Элементы.РассчитатьСкидки.Доступность И Элементы.РассчитатьСкидки.Видимость Тогда
			РассчитатьСкидкиКлиент();
		КонецЕсли;
	ИначеЕсли ДоступнаОплатаQRКодомПлатежнойКарты(Штрихкод) Тогда
		ОбработатьQRКодПлатежнойКарты(Штрихкод);
	ИначеЕсли Штрихкод = ШтрихкодированиеРМККлиент.СлужебныйШтрихкодПакет()
		ИЛИ Штрихкод = ШтрихкодированиеРМККлиент.СлужебныйШтрихкодПакетБезУчетаШрифтов() Тогда
		ДобавитьПакетКлиент();
	ИначеЕсли ПоШтрихкодуНайденЗаказПокупателя(Штрихкод) Тогда
		ПодключитьОбработчикОжидания("ЗаполнитьПоЗаказуНайденномуПоШтрихкоду", 0.1, Истина);
	Иначе
		ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
		ОбработатьШтрихкодКлиент(Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПоШтрихкодуНайденЗаказПокупателя(Штрихкод)
	
	Если Не ИспользоватьШтрихкодированиеЗаказов Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НайденныйЗаказПокупателя = Неопределено;
	ОбщегоНазначенияРМККлиентПереопределяемый.НайтиЗаказПокупателяПоШтрихкоду(Штрихкод, НайденныйЗаказПокупателя);
	
	Если ЗначениеЗаполнено(НайденныйЗаказПокупателя) Тогда
		ЗаказПокупателяДляЗаполнения = НайденныйЗаказПокупателя;
		Возврат Истина;
	КонецЕсли;
	
	ЗаказПокупателяДляЗаполнения = Неопределено;
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоЗаказуНайденномуПоШтрихкоду()
	
	Если Не РаботаСЧекомЗавершена() Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Неопределено;
	ОповещениеОткрытьФормуВыбораЗаказаПокупателя(ЗаказПокупателяДляЗаполнения, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьКартойВТихомРежиме()
	
	Если ЕстьНезаполненныеДанные() Тогда
		
		ТоварыПриАктивизацииСтроки(Элементы.Товары);
		
	Иначе
		
		НеобходимПересчетАвтоматическихСкидок = ОпределитьНеобходимостьПересчетаАвтоматическихСкидок();
		Если НеобходимПересчетАвтоматическихСкидок И ВопросПоРасчетуСкидок Тогда
			ЗадатьВопросПоРасчетуСкидок("ОплатитьКартойВТихомРежимеЗавершение", , Истина);
		Иначе
			ОплатитьКартойВТихомРежимеЗавершение(?(НеобходимПересчетАвтоматическихСкидок,
													КодВозвратаДиалога.Да,
													КодВозвратаДиалога.Нет), Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКассовуюСменуИНайтиКассира(Штрихкод = "")
	
	Если ЗначениеЗаполнено(Штрихкод) Тогда
		ВыполнитьПоискКассираКлиент(Штрихкод);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Кассир)Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяОперация = "ЧекНаВозвратРМК"
		ИЛИ ТекущаяОперация = "ВозвратБезЧекаРМК"
		ИЛИ ТекущаяОперация = "ЧекКоррекцииРМК"
		ИЛИ Объект.Товары.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Сутки = 86400;
	НужноОткрытьСмену = Ложь;
	НужноЗакрытьСмену = Ложь;
	ЕстьИстекшаяСмена = Ложь;
	
	Для Каждого СтрокаКасса Из ТаблицаКассККМОрганизаций Цикл
		
		Если ЗначениеЗаполнено(СтрокаКасса.НачалоКассовойСмены) Тогда
			
			Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
			
			Если Дата - СтрокаКасса.НачалоКассовойСмены >= Сутки Тогда
				НужноЗакрытьСмену = Истина;
				ЕстьИстекшаяСмена = Истина;
			КонецЕсли;
			
			ВремяНачалаСменыВСекундах = ВремяНачалаСмены - Дата(1, 1, 1);
			
			МинимальноеДатаНачалаСмены = НачалоДня(Дата) + ВремяНачалаСменыВСекундах;
			Если Дата < МинимальноеДатаНачалаСмены Тогда
				МинимальноеДатаНачалаСмены = МинимальноеДатаНачалаСмены - Сутки;
			КонецЕсли;
			
			Если СтрокаКасса.НачалоКассовойСмены < МинимальноеДатаНачалаСмены Тогда
				НужноЗакрытьСмену = Истина;
			КонецЕсли;
			
		Иначе
			НужноОткрытьСмену = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТорговыйОбъектДляВхода) Тогда
		Если НужноОткрытьСмену Или НужноЗакрытьСмену Тогда
			
			Если ТаблицаКассККМОрганизаций.Количество() > 1 Тогда
				ПереключитьНаСтраницуВыбораКассыККМ();
			Иначе
				
				Если НужноЗакрытьСмену Тогда
					
					Если ЕстьИстекшаяСмена Тогда
						ТекстВопроса = НСтр("ru = 'С момента открытия кассовой смены прошло более 24 часов.
							|Закрыть кассовую смену?'");
							ТекстЗаголовка = НСтр("ru = 'Кассовая смена истекла.'");
					Иначе
						ДатаВремяОткрытияСмены = Формат(СтрокаКасса.НачалоКассовойСмены, "ДЛФ=DT");
						ТекстВопроса = СтрШаблон(НСтр("ru = 'Смена открыта: %1
							|Закрыть кассовую смену?'"), ДатаВремяОткрытияСмены);
							ТекстЗаголовка = НСтр("ru = 'Возможно, забыли закрыть смену.'");
					КонецЕсли;
					
					ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытьСменуПродолжение", ЭтотОбъект);
					ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ТекстЗаголовка);
					
				ИначеЕсли НужноОткрытьСмену Тогда
					
					ТекстВопроса = НСтр("ru = 'Открыть кассовую смену?'");
					ТекстЗаголовка = НСтр("ru = 'Кассовая смена закрыта.'");
					
					ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьСменуПослеОтвета", ЭтотОбъект);
					ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ТекстЗаголовка);
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьСтруктуруДляПроверкиКассовойСмены()
	
	СтруктураДляПроверкиКассовойСмены = Новый Структура();
	СтруктураДляПроверкиКассовойСмены.Вставить("Отказ", Ложь);
	СтруктураДляПроверкиКассовойСмены.Вставить("НужноЗакрытьСмену", Ложь);
	СтруктураДляПроверкиКассовойСмены.Вставить("НужноОткрытьСмену", Ложь);
	СтруктураДляПроверкиКассовойСмены.Вставить("ТекстОшибки", НСтр("ru = ''"));
	СтруктураДляПроверкиКассовойСмены.Вставить("ДанныеКассаККМ");
	СтруктураДляПроверкиКассовойСмены.Вставить("ФИОКассира", НСтр("ru = ''"));
	
	Возврат СтруктураДляПроверкиКассовойСмены;
	
КонецФункции

&НаСервере
Процедура НайтиКассираИПерезаполнитьПрава(Штрихкод)
	
	ВыполнитьПоискКассира(Штрихкод);
	ЗаполнитьТаблицуРолейПользователя();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискКассира(Штрихкод)
	ШтрихкодированиеРМК.ВыполнитьПоискКассира(Объект, Штрихкод);
	Если Не ЗначениеЗаполнено(КассирДляВхода) И ЗначениеЗаполнено(Объект.Кассир) Тогда
		КассирДляВхода = Объект.Кассир;
	КонецЕсли;
	Если Не КассирДляВхода = Объект.Кассир И Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводКассира Тогда
		Объект.Кассир = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодКлиент(Штрихкод)
	
	ТекущаяДатаНаКлиенте = ОбщегоНазначенияКлиент.ДатаСеанса();
	Если ТекущаяДатаНаКлиенте - ДатаВремяПереходаКДействиямСотрудника <= 2 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяИдентификатора = НСтр("ru = 'Обработка.РабочееМестоКассира.ОбработатьШтрихкодКлиент'");
	ФиксироватьСОшибкой = Ложь;
	АвтозавершениеЗамера = Ложь;
	
	ИдентификаторЗамераВремениПоиска = ОценкаПроизводительностиКлиент.ЗамерВремени(ИмяИдентификатора,
		ФиксироватьСОшибкой, АвтозавершениеЗамера);
	
	ИдентификаторСтроки = 0;
	
	ПараметрыДляОбработкиШтрихкода = Новый Структура();
	ПараметрыДляОбработкиШтрихкода.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	ПроверитьНеобходимостьВводаМарки(ПараметрыДляОбработкиШтрихкода);
	
	ДополнитьПараметрыДляОбработкиШтрихкода(ПараметрыДляОбработкиШтрихкода);
	ОповещениеПоискаПоШтрихкоду(Штрихкод, ПараметрыДляОбработкиШтрихкода);
	
	ОбработатьШтрихкодЗавершение(ПараметрыДляОбработкиШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодЗавершение(ПараметрыДляОбработкиШтрихкода)
	
	Если ОткрытаСтраницаНайтиПоШтрихкоду() Тогда
		ОтменаНайтиПоШтрихкодуКлиент();
	КонецЕсли;
	
	Если ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "ТаблицаДляВыбораНоменклатуры") Тогда
		ЗавершитьВводШтрихкодаЗаполнитьТаблицуДляВыбора(ПараметрыДляОбработкиШтрихкода);
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "ОшибкаЕГАИС") Тогда
		ОтобразитьОшибкуЕГАИС(ПараметрыДляОбработкиШтрихкода);
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "УпаковкаНеНайдена") Тогда
		ЗавершитьВводШтрихкодаУпаковкаНеНайдена(ПараметрыДляОбработкиШтрихкода.НоменклатураБезУпаковки);
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "НеверныйКод") Тогда
		ЗавершитьВводШтрихкодаНеверныйКод();
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "МаркаВведена") Тогда
		
		ПараметрыОбработки = КонтекстПроверкиКонтрольнойМарки();
		ПараметрыОбработки.КодМаркировки = ПараметрыДляОбработкиШтрихкода.Штрихкод;
		
		ОсобенностьУчета = ОсобенностьУчетаНоменклатуры(ПараметрыДляОбработкиШтрихкода.ТекущаяНоменклатура);
		ПараметрыОбработки.ОсобенностьУчета = ОсобенностьУчета;
		ПараметрыОбработки.Организация = ПараметрыДляОбработкиШтрихкода.Организация;
		
		ПараметрыОбработки.ПроверкаМаркиВБиблиотекеГосИС
			= ПараметрыДляОбработкиШтрихкода.Свойство("ПроверкаМаркиВБиблиотекеГосИС");
			
		ПараметрыОбработки.ПодтверждениеПродажиМаркиГосИС
			= ПараметрыДляОбработкиШтрихкода.Свойство("ПодтверждениеПродажиМаркиГосИС");
		
		ЗавершитьВводШтрихкодаМаркаВведена(ПараметрыОбработки);
		
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "ТоварНеНайденПоМарке") Тогда
		ОткрытьФормуРучногоСопоставленияТовараПриВозможности(ПараметрыДляОбработкиШтрихкода);
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "ТоварНеНайденПоШтрихкоду") Тогда
		Если Не ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатой(ЭтотОбъект) Тогда
			ВидКартыЗаполнен = Ложь;
			ЗаполнитьВидКарты(ПараметрыДляОбработкиШтрихкода.Штрихкод, ВидКартыЗаполнен);
			Если ВидКартыЗаполнен Тогда
				ОткрытьСозданиеКарты();
				НоваяКартаНомер = ПараметрыДляОбработкиШтрихкода.Штрихкод;
			Иначе
				ОткрытьФормуРучногоСопоставленияТовараПриВозможности(ПараметрыДляОбработкиШтрихкода);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "МаркаНайденаВЧеке") Тогда
		ЗавершитьВводШтрихкодаМаркаНайденаВЧеке(ПараметрыДляОбработкиШтрихкода);
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "ПодтвердитьВыборАлкоголя") Тогда
		УточнитьПравильностьНоменклатуры(ПараметрыДляОбработкиШтрихкода);
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "СерияВведена") Тогда
		ВыбратьСериюДляТекущейСтроки();
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "СтрокаТовараДобавлена") Тогда
		ЗавершитьВводШтрихкода(ПараметрыДляОбработкиШтрихкода);
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "ДобавленНабор") Тогда
		ЗавершитьВводШтрихкодаНабора();
	ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "КартаЛояльностиНедействительна") Тогда
		ОткрытьФормуИнформацииОКарте(ПараметрыДляОбработкиШтрихкода);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗамераПробитияЧека) Тогда
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамераВремениПоиска, Ложь);
	КонецЕсли;
	
	Если Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиУправления)
			= Элементы.ПанельУправленияЧеком
		Или Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ОбластьОперативногоУправленияЧеком Тогда
		
		ВыйтиИзРежимаПлитки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьПараметрыДляОбработкиШтрихкода(ПараметрыДляОбработкиШтрихкода)
	
	ПараметрыДляОбработкиШтрихкода.Вставить("РозничныйВидЦены", РозничныйВидЦены);
	ПараметрыДляОбработкиШтрихкода.Вставить("ЭтоЧекКоррекции", ЭтоЧекКоррекции);
	ПараметрыДляОбработкиШтрихкода.Вставить("ОжидатьВводМарки", ОжидатьВводМарки);
	ПараметрыДляОбработкиШтрихкода.Вставить("СистемаНалогообложенияПоУмолчанию",
		СистемаНалогообложенияОрганизацииПоУмолчанию);
	ПараметрыДляОбработкиШтрихкода.Вставить("ОсновнаяОрганизация", ОсновнаяОрганизация);
	ПараметрыДляОбработкиШтрихкода.Вставить("КонтролироватьЕМРЦ", КонтролироватьЕМРЦ);
	ПараметрыДляОбработкиШтрихкода.Вставить("УчитыватьМРЦ", УчитыватьМРЦ);
	
	// Запреты
	КэшЗапретовПродажМассив = Новый Массив;
	ПараметрыДляОбработкиШтрихкода.Вставить("КэшЗапретовПродаж", КэшЗапретовПродажМассив);
	ПараметрыДляОбработкиШтрихкода.Вставить("ИспользоватьЗапретПродаж", Ложь);
	ПараметрыДляОбработкиШтрихкода.Вставить("ДействующиеЗапреты", Новый Структура());
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРучнаяСкидкаНаТовар, ДопускаетсяПрименениеСкидок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискМагнитнойКарты(МагнитныйКод)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводКассира
			Или ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
				= Элементы.ГруппаЗаменаПрав Тогда
		
		ВыполнитьПоискШтрихкода(МагнитныйКод);
		
	Иначе
		Если НЕ ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			
			НайтиДисконтнуюКарту(МагнитныйКод);
			Если ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеДисконтнойКартыЗаполнены(ЭтотОбъект) Тогда
				ЗапроситьДанныеБонусов();
				ЗапроситьДанныеПродаж();
				ИзменитьКартинкуВводПокупателя();
			ИначеЕсли ИспользоватьСерверЛояльностиПолучательДанных И ИспользоватьНовыйАлгоритмЗапросаСЛ Тогда
				СтруктураПараметровКлиента = ПодготовитьСтруктуруПараметровДляПоискаПоМагнитномуКоду(МагнитныйКод);
				ОбработатьПолучениеКартССервераЛояльности(СтруктураПараметровКлиента);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиДисконтнуюКарту(МагнитныйКод)
	
	ДанныеКарты = ШтрихкодированиеРМК.ДанныеКартыЛояльности();
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьДанныеКартыЛояльности(МагнитныйКод, ДанныеКарты);
	
	ОчиститьДанныеПокупателя();
	ШтрихкодированиеРМК.ЗаполнитьФормуПоДисконтнойКарте(ЭтотОбъект, ДанныеКарты);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПолучениеПараметровТерминала(РезультатВыполнения, ПодключаемоеОборудованиеТерминала) Экспорт

	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат
		И ЕстьСвойство(РезультатВыполнения, "ПараметровУстройства") Тогда
		
		Отбор = Новый Структура();
		Отбор.Вставить("ПодключаемоеОборудование", ПодключаемоеОборудованиеТерминала);
		РезультатПоиска = ТаблицаТерминалы.НайтиСтроки(Отбор);
		
		Если РезультатПоиска.Количество() > 0 Тогда
			
			ПараметрыОборудования = РезультатВыполнения.ПараметровУстройства;
			
			Если ЕстьСвойство(ПараметрыОборудования, "ВыдачиНаличныхДенежныхСредств") Тогда
				
				Для Каждого Элемент Из РезультатПоиска Цикл
					Элемент.ПоддерживаетВыдачуНаличных = ПараметрыОборудования.ВыдачиНаличныхДенежныхСредств;
					Элемент.ПоддерживаетОплатуПоQRКоду = ПараметрыОборудования.ConsumerPresentedQR;
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоКодМаркировки(ДанныеМаркировки)
	
	Если Не ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ДанныеМаркировки, "ТипИдентификатораТовара") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипИдентификатораТовара = ДанныеМаркировки.ТипИдентификатораТовара;
	
	ТипыШтрихкодовМарок = Новый СписокЗначений;
	ИмяМаркировкиМех = "Перечисление.ТипыИдентификаторовТовараККТ.ИзделияИзНатуральногоМеха";
	ИмяМаркировкиGS1 =	"Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеDataMatrixGS1";
	ИмяМаркировкиВФорматеЕГАИС2 = "Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеЕГАИС2";
	ИмяМаркировкиВФорматеЕГАИС3 = "Перечисление.ТипыИдентификаторовТовараККТ.КодТовараВФорматеЕГАИС3";
	
	ТипыШтрихкодовМарок.Добавить(ПредопределенноеЗначение(ИмяМаркировкиМех));
	ТипыШтрихкодовМарок.Добавить(ПредопределенноеЗначение(ИмяМаркировкиGS1));
	ТипыШтрихкодовМарок.Добавить(ПредопределенноеЗначение(ИмяМаркировкиВФорматеЕГАИС2));
	ТипыШтрихкодовМарок.Добавить(ПредопределенноеЗначение(ИмяМаркировкиВФорматеЕГАИС3));
	
	Возврат НЕ ТипыШтрихкодовМарок.НайтиПоЗначению(ТипИдентификатораТовара) = Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ПараметрыДляОбработкиШтрихкода) Экспорт
	
	Если ПустаяСтрока(Штрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодПоиска = Штрихкод;
	
	ФильтрПоискаПоШтрихкоду = Новый Структура;
	ПараметрыСобытийПО = Новый Структура;
	ДобавитьВФильтрМассивУжеДобавленныхСерий = Ложь;
	
	АктивныйСлойСлужебнойИнформацииЧека
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
	Если АктивныйСлойСлужебнойИнформацииЧека = Элементы.ОбластьОперативногоУправленияЧеком
		И Элементы.ГруппаОплатаСертификатами.Видимость Тогда
		
			НомерСертификата = Штрихкод;
			НайтиПодарочныйСертификат();
			Возврат;
			
	ИначеЕсли АктивныйСлойСлужебнойИнформацииЧека = Элементы.ОбластьОперативногоУправленияЧеком
		И Элементы.ГруппаВводПромокода.Видимость Тогда
		
		ВведенныйПромокод = Штрихкод;
		НайтиПромокодВДоступномСервисе();
		Возврат;
		
	ИначеЕсли АктивныйСлойСлужебнойИнформацииЧека = Элементы.ГруппаЗаменаПрав
		ИЛИ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводКассира Тогда
		
		ФильтрПоискаПоШтрихкоду.Вставить("Пользователи");
		ФильтрПоискаПоШтрихкоду.Вставить("ФизическиеЛица");
		ФильтрПоискаПоШтрихкоду.Вставить("ИнформационныеКарты");
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводКассира
			И ЗначениеЗаполнено(КассирДляВхода) Тогда
			ФильтрПоискаПоШтрихкоду.Вставить("КассирДляВхода", КассирДляВхода);
		КонецЕсли;
		СкрытьОшибкуЗаменыПравПриНеобходимости();
		
	ИначеЕсли АктивныйСлойСлужебнойИнформацииЧека = Элементы.ГруппаПлатежнаяСистема Тогда
		
		ОбработатьQRКодПлатежнойСистемы(Штрихкод);
		Возврат;
		
	ИначеЕсли АктивныйСлойСлужебнойИнформацииЧека = Элементы.ГруппаПанельИдентификаторКорзиныНСПК Тогда
		
		ИдентификаторКорзиныНСПК = Штрихкод;
		ИдентификаторКорзиныНСПКЗавершить(Неопределено);
		Возврат;
		
	ИначеЕсли АктивныйСлойСлужебнойИнформацииЧека = Элементы.ГруппаДанныеПокупателя Тогда
		
		ТекущийСлойДанныхПокупателя
			= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевДанныеПокупателяОсновнаяОбласть);
		Если ТекущийСлойДанныхПокупателя = Элементы.ГруппаПоискКарты
			Или ТекущийСлойДанныхПокупателя = Элементы.ГруппаКартаНеНайдена Тогда
			
			ПоследниеЦифрыТелефона = Сред(Штрихкод, 2);
			Если СтрНачинаетсяС(Штрихкод, "*")
				И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПоследниеЦифрыТелефона) Тогда
				
				Если ИспользоватьСерверЛояльностиПолучательДанных И ИспользоватьНовыйАлгоритмЗапросаСЛ Тогда
					ФильтрПоискаПоШтрихкоду.Вставить("ШаблонНомерТелефонаСЛ");
					ФильтрПоискаПоШтрихкоду.Вставить("ПоследниеЦифрыТелефонаСЛ");
				Иначе
					ФильтрПоискаПоШтрихкоду.Вставить("ШаблонНомерТелефона");
					ФильтрПоискаПоШтрихкоду.Вставить("ПоследниеЦифрыТелефона");
				КонецЕсли;
				ШтрихкодПоиска = "%" + ПоследниеЦифрыТелефона;
				
			Иначе
				ФильтрПоискаПоШтрихкоду.Вставить("ИнформационныеКарты");
			КонецЕсли;
			Если ИспользоватьСерверЛояльностиПолучательДанных И ИспользоватьНовыйАлгоритмЗапросаСЛ Тогда
				ФильтрПоискаПоШтрихкоду.Вставить("ДанныеПокупателя");
			КонецЕсли;
			
		ИначеЕсли ТекущийСлойДанныхПокупателя = Элементы.ОсновнаяГруппаСозданиеКарты Тогда
			ФильтрПоискаПоШтрихкоду.Вставить("ДобавлятьНеизвестнуюКИ");
		ИначеЕсли ТекущийСлойДанныхПокупателя = Элементы.ГруппаОтправкаЧека Тогда
			ФильтрПоискаПоШтрихкоду.Вставить("ДобавлятьНеизвестнуюКИ");
		Иначе
		КонецЕсли;
		
	ИначеЕсли АктивныйСлойСлужебнойИнформацииЧека = Элементы.ГруппаСерииИПартии Тогда
		ФильтрПоискаПоШтрихкоду.Вставить("СерииНоменклатуры", Элементы.Товары.ТекущиеДанные.Номенклатура);
		ДобавитьВФильтрМассивУжеДобавленныхСерий = Истина;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоискТовара Тогда
		ФильтрПоискаПоШтрихкоду.Вставить("Номенклатура");
		ДобавитьВФильтрМассивУжеДобавленныхСерий = Истина;
	ИначеЕсли РежимКассыСамообслуживания И ОткрытаСтраницаНайтиПоШтрихкоду() Тогда
		ФильтрПоискаПоШтрихкоду.Вставить("Номенклатура");
		ДобавитьФильтрДляВводаМарки(ФильтрПоискаПоШтрихкоду, Элементы.Товары.ТекущиеДанные);
		Если РежимРаботыСЧеком = РежимыРаботыСЧеком.ЧекПустой Тогда
			ФильтрПоискаПоШтрихкоду.Вставить("Пользователи");
		КонецЕсли;
	Иначе
		
		Если Не ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатой(ЭтотОбъект) Тогда
			ФильтрПоискаПоШтрихкоду.Вставить("Номенклатура");
		КонецЕсли;
		Если Не РежимКассыСамообслуживания Тогда
			ФильтрПоискаПоШтрихкоду.Вставить("Пользователи");
			ФильтрПоискаПоШтрихкоду.Вставить("ФизическиеЛица");
			ФильтрПоискаПоШтрихкоду.Вставить("ДобавлятьНеизвестнуюКИ");
		ИначеЕсли РежимРаботыСЧеком = РежимыРаботыСЧеком.ЧекПустой Тогда
			ФильтрПоискаПоШтрихкоду.Вставить("Пользователи");
		КонецЕсли;
		Если Не ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеЛояльностиЗаполнены(ЭтотОбъект) Тогда
			ФильтрПоискаПоШтрихкоду.Вставить("ИнформационныеКарты");
		КонецЕсли;
		
		ФильтрПоискаПоШтрихкоду.Вставить("СерииНоменклатуры");
		ФильтрПоискаПоШтрихкоду.Вставить("СерийныеНомера");
		
		ДобавитьФильтрДляВводаМарки(ФильтрПоискаПоШтрихкоду, Элементы.Товары.ТекущиеДанные);
		
		ДобавитьВФильтрМассивУжеДобавленныхСерий = Истина;
		ПараметрыСобытийПО.Вставить("РегистрацияНовойКарты", Истина);
		
	КонецЕсли;
	
	Если ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации) Тогда
		ФильтрПоискаПоШтрихкоду.Вставить("ЭтоВозвратПродажи");
	КонецЕсли;
	
	Если ДобавитьВФильтрМассивУжеДобавленныхСерий Тогда
		
		МассивУжеДобавленныхСерий = Новый Массив;
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТовара.Серия) И СтрокаТовара.УникальностьСерии Тогда
				МассивУжеДобавленныхСерий.Добавить(СтрокаТовара.Серия);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивУжеДобавленныхСерий.Количество() > 0 Тогда
			ФильтрПоискаПоШтрихкоду.Вставить("МассивУжеДобавленныхСерий", МассивУжеДобавленныхСерий);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не АктивныйСлойСлужебнойИнформацииЧека = Элементы.ГруппаЗаменаПрав
		И НЕ АктивныйСлойСлужебнойИнформацииЧека = Элементы.ГруппаДанныеПокупателя
		И НЕ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводКассира Тогда
			
		Если ПараметрыДляОбработкиШтрихкода.Свойство("ОжидатьВводМарки")
			И ПараметрыДляОбработкиШтрихкода.ОжидатьВводМарки Тогда
			
			ДанныеМаркировки = МенеджерОборудованияРМККлиентСервер.РазобратьШтриховойКодТовара(Штрихкод);
			ЭтоКодМарки = ЭтоКодМаркировки(ДанныеМаркировки);
				
			Если НЕ ЭтоКодМарки Тогда
				
				ПараметрыДляОбработкиШтрихкода.Вставить("НеверныйКод");
				Возврат;
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
	РеквизитыФормыРМК = СтруктураРеквизитовФормыРМКДляДобавленияСтроки();
	
	Если ИспользоватьРазрешительныйРежимГосИС И ФильтрПоискаПоШтрихкоду.Свойство("Номенклатура") Тогда
		
		СтандартнаяОбработка = Истина;
		ОбщегоНазначенияРМККлиентПереопределяемый.ПоискПоШтрихкодуРазрешительныйРежим(
			ЭтотОбъект, Штрихкод, РеквизитыФормыРМК, ПараметрыДляОбработкиШтрихкода, СтандартнаяОбработка);
		
		Если СтандартнаяОбработка Тогда
			
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСКлиент");
			ДанныеПараметровСканирования = Модуль.ПараметрыСканирования(ЭтотОбъект);
			
			ДанныеСоСканера = Новый Массив();
			ДанныеСоСканера.Добавить(Штрихкод);
			ДанныеСоСканера.Добавить(Неопределено);
			ДанныеШтрихкода = МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(ДанныеСоСканера);
			
			ПараметрыПоискаРМК = РеквизитыФормыРМК;
			ШтрихкодОригинальный = Штрихкод;
			ЗаменитьСимволGS1(ШтрихкодОригинальный);
			ПараметрыПоискаРМК.Вставить("ШтрихкодОригинальный", ШтрихкодОригинальный);
			ПараметрыДляОбработкиШтрихкода.Вставить("Штрихкод", ШтрихкодОригинальный);
			ПараметрыПоискаРМК.Вставить("ПараметрыДляОбработкиШтрихкода", ПараметрыДляОбработкиШтрихкода);
			ДанныеПараметровСканирования.ДополнительныеПараметры.Вставить("ПараметрыПоискаРМК", ПараметрыПоискаРМК);
			
			ИмяРеквизитаПараметрыСканирования = "ПараметрыСканирования";
			ЭтотОбъект[ИмяРеквизитаПараметрыСканирования] = ДанныеПараметровСканирования;
			
			Модуль.ОбработатьДанныеШтрихкода("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, ДанныеШтрихкода, ДанныеПараметровСканирования);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ЗаменитьСимволGS1(ШтрихкодПоиска);
	ПараметрыДляОбработкиШтрихкода.Вставить("Штрихкод", ШтрихкодПоиска);
	
	СтруктураПараметровКлиента = ДанныеПоискаПоШтрихкодуСерверБезКонтекста(ШтрихкодПоиска, РеквизитыФормыРМК);
	СтруктураПараметровКлиента.Вставить("ПараметрыДляОбработкиШтрихкода", ПараметрыДляОбработкиШтрихкода);
	СтруктураПараметровКлиента.Вставить("ОтображатьОстаток", ОтображатьОстаток);
	СтруктураПараметровКлиента.Вставить("ТорговыйОбъект", ТорговыйОбъектДляВхода);
	ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ПараметрыДляОбработкиШтрихкода);
	
КонецПроцедуры

&НаСервере
Функция ДанныеПоискаПоШтрихкодуСервер(Штрихкод)
	
	ДанныеШтрихкода = Новый Структура;
	РаботаСоШтрихкодамиПереопределяемый.ЗаполнитьДанныеПоискаПоШтрихкоду(Штрихкод, ЭтотОбъект, ДанныеШтрихкода);
	Возврат ДанныеШтрихкода;
	
КонецФункции

&НаКлиенте
Процедура ПродолжитьОбработатьДанныеПоКодуКлиент(СтруктураРезультат) Экспорт
	
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если НЕ СтруктураРезультат.Свойство("ДействиеОтменено") Тогда
		
		Если СтрокаРезультата.Свойство("Карта") Тогда
			СтрокаРезультата.Вставить("Владелец", СтрокаРезультата.Карта);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ПараметрыДляОбработкиШтрихкода = Неопределено) Экспорт
	
	ОжидаетсяМаркаАлкоголя = Ложь;
	Если Не ПараметрыДляОбработкиШтрихкода = Неопределено Тогда
		ОжидаетсяМаркаАлкоголя = ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "НеобходимоВвестиМаркуАлкоголя");
		ПараметрыДляОбработкиШтрихкода.Вставить("ПараметрыШтрихкода", СтруктураПараметровКлиента.ПараметрыШтрихкода);
	КонецЕсли;
	
	АктивныйСлойГруппыДанныхПокупателя
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевДанныеПокупателяОсновнаяОбласть);
	ОткрытаСтраницаПоискаКарты = ОткрытаСтраницаПоискаКарты(, АктивныйСлойГруппыДанныхПокупателя);
	
	КоличествоНайденныхЗначений = СтруктураПараметровКлиента.ЗначенияПоиска.Количество();
	ТолькоПользователи = Ложь;
	Если СтруктураПараметровКлиента.Свойство("ТолькоПользователи") Тогда
		ТолькоПользователи = СтруктураПараметровКлиента.ТолькоПользователи;
	КонецЕсли;
	РазныеЗначенияВРежимеКСО = (КоличествоНайденныхЗначений > 1 И РежимКассыСамообслуживания И Не ТолькоПользователи);
	Если РазныеЗначенияВРежимеКСО И ТекущаяОперация = "" И Не ОткрытаСтраницаПоискаКарты Тогда
		
		ПараметрыТекущейОперации = Новый Структура;
		ПараметрыТекущейОперации.Вставить("СтруктураПараметровКлиента", СтруктураПараметровКлиента);
		ПараметрыТекущейОперации.Вставить("ПараметрыДляОбработкиШтрихкода", ПараметрыДляОбработкиШтрихкода);
		
		НеобходимоеПраво = "ПравоВыбораПриПоискеПоШтрихкодуРМК";
		ТекущаяОперация = "ВыборПриПоискеПоШтрихкодуРМК";
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
		Возврат;
		
	КонецЕсли;
	
	ОткрытаБлокирующаяФорма = Ложь;
	Если ЕстьСвойство(СтруктураПараметровКлиента, "ОткрытьФормуСписанияБаллов")
		И СтруктураПараметровКлиента.ОткрытьФормуСписанияБаллов Тогда
		ОткрытьФормуСписанияБонусныхБалловЛокально(СтруктураПараметровКлиента.ЗначенияПоиска, СтруктураПараметровКлиента.ДанныеПО);
		ОткрытаБлокирующаяФорма = Истина;
	Иначе
		КассыККМИОрганизации = ПодключенныеКассыККМИОрганизации();
		МассивОрганизаций = КассыККМИОрганизации.МассивОрганизаций;
		СтруктураПараметровКлиента.Вставить("МассивОрганизаций", МассивОрганизаций);
		СтруктураПараметровКлиента.Вставить("ПустаяСтрокаТаблицыТоваров", ПустаяСтрокаТаблицыТоваров);
		
		РаботаСоШтрихкодамиКлиентПереопределяемый.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента,
			ОткрытаБлокирующаяФорма);
	КонецЕсли;
		
	Если РежимВыбораПодарочногоСертификата И СтруктураПараметровКлиента.ЗначенияПоиска.Количество() > 0 Тогда
		СтрокаРезультата = СтруктураПараметровКлиента.ЗначенияПоиска[0];
		Если СтрокаРезультата.ТипОбъекта = ТипЗнч(ВводТовараПоСтроке)
				И ЗначениеЗаполнено(СтрокаРезультата.Владелец) Тогда
				
			ОбработатьРежимВыбораПодарочногоСертификатаКлиент(СтрокаРезультата.Владелец);
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		
		Если СтруктураПараметровКлиента.ЗначенияПоиска.Количество() > 0 Тогда
			
			СтрокаРезультата = СтруктураПараметровКлиента.ЗначенияПоиска[0];
			ПользовательДоЗаменыПрав = Объект.ПользовательБД;
			КассирДоЗаменыПрав = Объект.Кассир;
			
			НоменклатураДляПоискаСерий = Неопределено;
			Если НЕ ФильтрПоискаПоШтрихкоду = Неопределено Тогда
				ФильтрПоискаПоШтрихкоду.Свойство("СерииНоменклатуры", НоменклатураДляПоискаСерий);
			КонецЕсли;
			
			ЗапрашиватьДанныеКонтроля = Истина;
			Если СтрокаРезультата.Свойство("Номенклатура") И ЗначениеЗаполнено(СтрокаРезультата.Номенклатура)
					И СтруктураПараметровКлиента.Свойство("ДанныеКонтроляПродаж")
					И Не СтруктураПараметровКлиента.ДанныеКонтроляПродаж = Неопределено Тогда
				ИнтерфейсРМКСлужебныйКлиентСервер.ДобавитьНовыеДанныеКэшаПродаж(КэшКонтроляПродаж,
					СтруктураПараметровКлиента.ДанныеКонтроляПродаж);
				ЗапрашиватьДанныеКонтроля = СтрокаРезультата.СтруктураНайденнойНоменклатуры.ЭтоНабор;
			КонецЕсли;
			
			Если НоменклатураДляПоискаСерий = Неопределено И СтрокаРезультата.Свойство("Номенклатура")
				И ЗначениеЗаполнено(СтрокаРезультата.Номенклатура) И СтрокаРезультата.Свойство("СтруктураНайденнойНоменклатуры")
				И Не СтрокаРезультата.СтруктураНайденнойНоменклатуры.Маркируемый
				И Не СтрокаРезультата.СтруктураНайденнойНоменклатуры.ЭтоНабор Тогда
				ЗаполнитьДанныеПоШтрихкодуНаКлиенте(СтрокаРезультата, ПараметрыДляОбработкиШтрихкода);
			Иначе
				ЗаполнитьДанныеПоШтрихкодуСКэшемКонтроляПродаж(СтрокаРезультата,
					ПараметрыДляОбработкиШтрихкода, ЗапрашиватьДанныеКонтроля);
				
				// ДобавлениеТоваровЗавершениеОбработкиКонтроляПродаж выводит предупреждение
				// остатка частичного выбытия пивной продукции
			КонецЕсли;
			ЭтапыКонтроляПродаж = ИнтерфейсРМКСлужебныйКлиент.ЭтапыКонтроляПродаж();
			ИнтерфейсРМКСлужебныйКлиент.ВыполнитьПроверкиКонтроляПродаж(ЭтотОбъект, ЭтапыКонтроляПродаж.ДобавлениеТовара);
			
			ОбработатьИзменениеТаблицыТоваровНаКлиенте();
			
			Если ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "НайденаКартаЛояльности") Тогда
				ЗавершитьВводКартыЛояльностиПоШтрихкоду();
			ИначеЕсли ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "НайденКассир") Тогда
				
				ВосстанавливатьПользователя = ЗначениеЗаполнено(ТекущаяОперация);
				
				Если ТекущаяОперация = "УдалитьСтрокуРМК" Тогда
					
					Если Не СписокРолейПользователя.НайтиПоЗначению("ПравоУдалитьСтрокуРМК") = Неопределено Тогда
						Строка = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
						
						ВозможноЗакрытьСессиюРегистрацииМарок = ККМПоддерживаетПроверкуКодовМаркировки
							И ЗначениеЗаполнено(Строка.КодМаркировки)
							И ЗначениеЗаполнено(ИдентификаторТекущейСессииПроверкиМарок)
							И ВозможноЗакрытьСессиюРегистрацииМарок();
						
						Если ВозможноЗакрытьСессиюРегистрацииМарок Тогда
							ЗакрытьСессиюРегистрацииМарок();
						КонецЕсли;
					КонецЕсли;
					
				ИначеЕсли ТекущаяОперация = "УдалитьЧекРМК" Тогда
					
					Если Не СписокРолейПользователя.НайтиПоЗначению("ПравоУдалитьЧекРМК") = Неопределено Тогда
						ВыполнитьОтменуОплатыКлиент();
						РазблокироватьОбъектСервераЛояльности("clientbonuses");
					КонецЕсли;
					
				Иначе
				КонецЕсли;
				
				ПропуститьНастройкуФормы = Ложь;
				Если Не ТипОплаты = "СБП" И ЗначениеЗаполнено(ТекущаяОперация) Тогда
					ВыполнитьТекущуюОперацию();
					Если ТекущаяОперацияВыполнена Тогда
						Если Не ПропуститьОбновлениеТаблицыДляОперации() Тогда
							ОбработатьИзменениеТаблицыТоваровНаКлиенте();
						КонецЕсли;
					Иначе
						ПропуститьНастройкуФормы = Истина;
						ТекстОшибки = НСтр("ru = 'Недостаточно прав'");
						ПоказатьОшибкуЗаменыПрав(ТекстОшибки);
					КонецЕсли;
				КонецЕсли;
				
				Если ВосстанавливатьПользователя Или НЕ ПараметрыИнфоОшибки = Неопределено Тогда
					ВыбратьПользователяДоЗаменыПрав();
				КонецЕсли;
				
				Если ТипОплаты = "СБП" И ЗначениеЗаполнено(ТекущаяОперация) Тогда
					Возврат;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекущаяОперация) Или НЕ ПараметрыИнфоОшибки = Неопределено Тогда
					Если Не ПропуститьНастройкуФормы Тогда
						НастроитьФормуПослеЗаменыПрав();
					КонецЕсли;
					Возврат;
					
				Иначе
					
					Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводКассира Тогда
						Если Не ЗначениеЗаполнено(ТорговыйОбъектДляВхода) И Элементы.ГруппаВыборМагазинаДляВхода.Видимость Тогда
							ВывестиСообщениеОбОшибкеАвторизации("ПустойМагазин");
							Возврат;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ТорговыйОбъектДляВхода) И Не ТорговыйОбъектДляВхода = Объект.ТорговыйОбъект Тогда
							СменитьТорговыйОбъект();
						КонецЕсли;
					КонецЕсли;
					
					ИнициализироватьФормуРабочегоМестаКассира();
					ПроверитьКассовуюСменуИНайтиКассира();
					ОткрытьОбщуюСтраницу();
					СформироватьЗаголовокВводКассира();
					
				КонецЕсли;
				
				СформироватьЗаголовок();
				
			ИначеЕсли ТипЗнч(СтрокаРезультата.Владелец) = ТипЗнч(ВводТовараПоСтроке) Тогда
				ОтобразитьСопутствующиеТоварыПриДобавленииНоменклатуры(СтрокаРезультата);
			Иначе
			КонецЕсли;
			
		ИначеЕсли ОткрытаСтраницаПоискаКарты И ИспользоватьСерверЛояльностиПолучательДанных
				И ИспользоватьНовыйАлгоритмЗапросаСЛ Тогда
			
			ОбработатьПолучениеКартССервераЛояльности(СтруктураПараметровКлиента);
			
		ИначеЕсли ОткрытаСтраницаПоискаКарты
			И СохранятьНомерКартыЛояльности(СтруктураПараметровКлиента.ПараметрыШтрихкода.ФильтрПоискаПоШтрихкоду) Тогда
			
			СохранитьНомерКартыЛокально(ПараметрыДляОбработкиШтрихкода.Штрихкод);
			ЗавершитьВводКартыЛояльностиПоШтрихкоду();
			
		Иначе
			
			Если АктивныйСлойГруппыДанныхПокупателя = Элементы.ОсновнаяГруппаСозданиеКарты Тогда
				
				ДанныеМаркировки =
					МенеджерОборудованияРМККлиентСервер.РазобратьШтриховойКодТовара(ПараметрыДляОбработкиШтрихкода.Штрихкод);
				ЭтоКодМарки = ЭтоКодМаркировки(ДанныеМаркировки);
				
				Если НЕ ЭтоКодМарки Тогда
					НоваяКартаНомер = ПараметрыДляОбработкиШтрихкода.Штрихкод;
				КонецЕсли;
				
			ИначеЕсли ОткрытаСтраницаПоискаКарты Тогда
				
				ПереключитьНаСтраницуПоискКартыКартаНеНайдена(); 
				
			ИначеЕсли ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиУправления)
					= Элементы.ПанельУправленияЧеком
				И ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
					= Элементы.ГруппаЗаменаПрав Тогда
				
				ТекущийЭлемент = Элементы.КодДляЗаменыПрав;
				ТекстОшибки = НСтр("ru = 'Не верно указан код'");
				ПоказатьОшибкуЗаменыПрав(ТекстОшибки);
				
			ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводКассира Тогда
				
				Если ЗначениеЗаполнено(КассирДляВхода) Тогда
					Если СуществуетКодАвторизацииУКассира(КассирДляВхода) Тогда
						ВывестиСообщениеОбОшибкеАвторизации("НеВерныйКод");
					Иначе
						ВывестиСообщениеОбОшибкеАвторизации("НеУстановленКод");
					КонецЕсли;
				Иначе
					ВывестиСообщениеОбОшибкеАвторизации("НеОпределенКассир");
				КонецЕсли;
				
			Иначе
				
				СтрокаРезультата = Неопределено;
				ЗаполнитьДанныеПоШтрихкодуСКэшемКонтроляПродаж(СтрокаРезультата, ПараметрыДляОбработкиШтрихкода, Истина);
				ЭтапыКонтроляПродаж = ИнтерфейсРМКСлужебныйКлиент.ЭтапыКонтроляПродаж();
				ИнтерфейсРМКСлужебныйКлиент.ВыполнитьПроверкиКонтроляПродаж(ЭтотОбъект, ЭтапыКонтроляПродаж.ДобавлениеТовара);
				ОбработатьИзменениеТаблицыТоваровНаКлиенте();
				
				Если Не ПараметрыДляОбработкиШтрихкода = Неопределено
						И СтруктураПараметровКлиента.Свойство("ПараметрыШтрихкода") Тогда
						Если СтруктураПараметровКлиента.ПараметрыШтрихкода.НекорректнаяМарка Тогда
							Если ПараметрыДляОбработкиШтрихкода.Свойство("ОжидатьВводМарки")
								И ПараметрыДляОбработкиШтрихкода.ОжидатьВводМарки Тогда
									ПараметрыДляОбработкиШтрихкода.Вставить("НеверныйКод");
							Иначе
								ПараметрыДляОбработкиШтрихкода.Вставить("НекорректнаяМарка");
							КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоискТовара И Не РежимВыбораПодарка Тогда
		ЗакрытьПоискТоваровКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПоШтрихкодуСКэшемКонтроляПродаж(СтрокаРезультата,
		ПараметрыДляОбработкиШтрихкода, ЗапрашиватьДанныеКонтроля)
	
	Если ЗапрашиватьДанныеКонтроля И ИспользоватьКонтрольПродаж Тогда
		ПараметрыДляОбработкиШтрихкода.Вставить("ДанныеКонтроляПродаж", Новый Структура);
	КонецЕсли;
	ЗаполнитьДанныеПоШтрихкоду(СтрокаРезультата, ПараметрыДляОбработкиШтрихкода);
	Если ЗапрашиватьДанныеКонтроля И ПараметрыДляОбработкиШтрихкода.Свойство("ДанныеКонтроляПродаж")
			И Не ПараметрыДляОбработкиШтрихкода.ДанныеКонтроляПродаж = Неопределено Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.ДобавитьНовыеДанныеКэшаПродаж(КэшКонтроляПродаж,
			ПараметрыДляОбработкиШтрихкода.ДанныеКонтроляПродаж);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоШтрихкоду(СтрокаРезультата, ПараметрыДляОбработкиШтрихкода)
	
	ПараметрыДляОбработкиШтрихкода.Вставить("Объект", Объект);
	
	Если СтрокаРезультата = Неопределено Тогда
		ШтрихкодированиеРМК.СформироватьПараметрыНеизвестногоШтрихкода(ПараметрыДляОбработкиШтрихкода);
		Возврат;
	КонецЕсли;
	
	ВладелецШтрихкода = СтрокаРезультата.Владелец;
	
	Если ВладелецШтрихкода = Неопределено Тогда
		
		ОсновнойТекущийСлой
			= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевДанныеПокупателяОсновнаяОбласть);
		Если СтрокаРезультата.ШаблонШтрихкода = Перечисления.ШаблоныШтрихкодов.Телефон Тогда
			
			ИсходныйНомер = СтрокаРезультата.НомерТелефона;
			МаскаТелефона = ИнтерфейсРМКСлужебныйКлиентСервер.МаскаВводаТелефона();
			Если ОсновнойТекущийСлой = Элементы.ОсновнаяГруппаСозданиеКарты Тогда
				НоваяКартаТелефон = ИнтерфейсРМКСлужебныйКлиентСервер.ПривестиЗначениеКМаскеТелефона(ИсходныйНомер, МаскаТелефона);
			Иначе
				ОтправкаЧекаТелефон
					= ИнтерфейсРМКСлужебныйКлиентСервер.ПривестиЗначениеКМаскеТелефона(ИсходныйНомер, МаскаТелефона);
			КонецЕсли;
			Возврат;
			
		ИначеЕсли СтрокаРезультата.ШаблонШтрихкода = Перечисления.ШаблоныШтрихкодов.АдресЭП Тогда
			
			Если ОсновнойТекущийСлой = Элементы.ОсновнаяГруппаСозданиеКарты Тогда
				НоваяКартаПочта = СтрокаРезультата.Штрихкод;
			Иначе
				ОтправкаЧекаПочта = СтрокаРезультата.Штрихкод;
			КонецЕсли;
			Возврат;
			
		КонецЕсли;
		
	Иначе
	КонецЕсли;
	
	НайденныйКассир = Неопределено;
	
	Если НастроитьКассировДляВхода Тогда
		СтруктураПоискаШтрихкода = Новый Структура("Кассир, КодДоступа", СтрокаРезультата.Владелец, СтрокаРезультата.Штрихкод);
		ШтрихкодированиеРМКПереопределяемый.ЗаполнитьКассираДляВхода(СтруктураПоискаШтрихкода, НайденныйКассир);
	КонецЕсли;
	Если НайденныйКассир = Неопределено Тогда
		ШтрихкодированиеРМКПереопределяемый.ЗаполнитьДанныеНайденногоКассира(ВладелецШтрихкода, ЭтотОбъект, НайденныйКассир);
	КонецЕсли;
	Если НЕ НайденныйКассир = Неопределено Тогда
		
		Если РежимКассыСамообслуживания И РежимРаботыСЧеком = РежимыРаботыСЧеком.ЧекПустой
				И Не ЗначениеЗаполнено(ТекущаяОперация)
				И Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
					= Элементы.ГруппаЗаменаПрав Тогда
				
			ТекущаяОперация = "ПоказатьНастройки";
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекущаяОперация) И ПараметрыИнфоОшибки = Неопределено Тогда
			Если Не ЗначениеЗаполнено(НайденныйКассир.Кассир) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводКассира Тогда
			Если ЗначениеЗаполнено(КассирДляВхода) И Не КассирДляВхода = НайденныйКассир.Кассир Тогда
				Возврат;
			Иначе
				КассирДляВхода = НайденныйКассир.Кассир;
			КонецЕсли;
		КонецЕсли;
		
		Объект.Кассир = НайденныйКассир.Кассир;
		Если НайденныйКассир.Свойство("ПользовательБД") Тогда
			Объект.ПользовательБД = НайденныйКассир.ПользовательБД;
		КонецЕсли;
		
		ЗаполнитьТаблицуРолейПользователя();
		
		ПараметрыДляОбработкиШтрихкода.Вставить("НайденКассир");
		Возврат;
		
	КонецЕсли;
	
	НайденнаяКартаЛояльности = Неопределено;
	ШтрихкодированиеРМКПереопределяемый.ЗаполнитьДанныеНайденнойКартыЛояльности(ВладелецШтрихкода,
		НайденнаяКартаЛояльности);

	Если НЕ НайденнаяКартаЛояльности = Неопределено Тогда
		КартаНеДействительна = Ложь;
		Если НайденнаяКартаЛояльности.Свойство("КартаНедействительна") Тогда
			КартаНеДействительна = НайденнаяКартаЛояльности.КартаНедействительна;
		КонецЕсли;
		Если НЕ КартаНеДействительна Тогда
			ОчиститьДанныеПокупателя();
			ШтрихкодированиеРМК.ЗаполнитьФормуПоДисконтнойКарте(ЭтотОбъект, НайденнаяКартаЛояльности);
			ПараметрыДляОбработкиШтрихкода.Вставить("НайденаКартаЛояльности");
			ЗаполнитьПараметрыВводаКодаSMS(СтрокаРезультата);
			Возврат;
		Иначе
			ПараметрыДляОбработкиШтрихкода.Вставить("КартаЛояльностиНедействительна");
		КонецЕсли;
		
	КонецЕсли;
	
	НоменклатураДляПоискаСерий = Неопределено;
	Если НЕ ФильтрПоискаПоШтрихкоду = Неопределено Тогда
		ФильтрПоискаПоШтрихкоду.Свойство("СерииНоменклатуры", НоменклатураДляПоискаСерий);
	КонецЕсли;
	
	Если НоменклатураДляПоискаСерий = Неопределено Тогда
		
		НайденнаяНоменклатура = Неопределено;
		ШтрихкодированиеРМКПереопределяемый.ЗаполнитьДанныеНайденнойНоменклатуры(
			СтрокаРезультата, ЭтотОбъект, ПараметрыДляОбработкиШтрихкода, НайденнаяНоменклатура);
		Если НЕ НайденнаяНоменклатура = Неопределено Тогда
			
			Если НЕ ЗначениеЗаполнено(НайденнаяНоменклатура.СистемаНалогообложения) Тогда
				НайденнаяНоменклатура.СистемаНалогообложения = СистемаНалогообложенияОрганизацииПоУмолчанию;
			КонецЕсли;
			
			Если НЕ НайденнаяНоменклатура.ЭтоНабор Тогда
				ОбщегоНазначенияРМКПереопределяемый.ПереопределитьПараметрыЗаполненияСерийИПартий(
					НайденнаяНоменклатура, ЭтотОбъект);
				ДобавитьСтрокуВТабличнуюЧастьПоШтрихкоду(ПараметрыДляОбработкиШтрихкода, НайденнаяНоменклатура);
				
				Если ПараметрыДляОбработкиШтрихкода.Свойство("СтрокаТовараДобавлена") И Не ПараметрыДляОбработкиШтрихкода.Свойство("МаркаНайденаВЧеке") Тогда
					ИдентификаторСтрокиТовара = ПараметрыДляОбработкиШтрихкода.ИдентификаторСтроки;
					Если ПараметрыДляОбработкиШтрихкода.Свойство("МаркаВведена") Тогда
						ИдентификаторСтрокиТовара = ПараметрыДляОбработкиШтрихкода.НомерСтроки;
					КонецЕсли;
					СтрокаДобавленногоТовара = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтрокиТовара);
					ДополнитьСтрокуТовараВычисляемымиДанными(СтрокаДобавленногоТовара);
				КонецЕсли;
			Иначе
				СписокДобавленныхСтрокТоваров.Очистить();
				
				ДополнительныеДанные = Неопределено;
				Если ПараметрыДляОбработкиШтрихкода.Свойство("ДанныеКонтроляПродаж") Тогда
					ДополнительныеДанные = ШаблонДополнительныхДанныхЗапросаКонтроляПродаж(ЭтотОбъект);
				КонецЕсли;
				ДобавитьНаборВТабличнуюЧасть(НайденнаяНоменклатура, ДополнительныеДанные);
				Если Не ДополнительныеДанные = Неопределено И Не ДополнительныеДанные.ДанныеКонтроляПродаж = Неопределено Тогда
					ПараметрыДляОбработкиШтрихкода.ДанныеКонтроляПродаж = ДополнительныеДанные.ДанныеКонтроляПродаж;
				КонецЕсли;
	
				ПараметрыДляОбработкиШтрихкода.Вставить("ДобавленНабор");
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НайденнаяСерияНоменклатуры = Неопределено;
	ШтрихкодированиеРМКПереопределяемый.ЗаполнитьДанныеНайденнойСерииНоменклатуры(ВладелецШтрихкода,
		НайденнаяСерияНоменклатуры);
	Если НЕ НайденнаяСерияНоменклатуры = Неопределено Тогда
		
		ПараметрыДляОбработкиШтрихкода.Вставить("СерияВведена");
		ВыборСерии = НайденнаяСерияНоменклатуры;
		Возврат;
		
	КонецЕсли;
	
	НайденнаяПартияНоменклатуры = Неопределено;
	ШтрихкодированиеРМКПереопределяемый.ЗаполнитьДанныеНайденнойПартииНоменклатуры(ВладелецШтрихкода,
		НайденнаяПартияНоменклатуры);
	Если НЕ НайденнаяПартияНоменклатуры = Неопределено Тогда
		
		ПараметрыДляОбработкиШтрихкода.Вставить("СерияВведена");
		ВыборПартии = НайденнаяПартияНоменклатуры;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтруктураПараметровКлиента.Свойство("ПоказыватьБонусы")
			И ИспользоватьСерверЛояльностиПолучательДанных Тогда
			
			ШтрихкодОригинал = ДополнительныеПараметры.СтруктураПараметровКлиента.ДанныеПО;
			ОбработатьВыборКартыКлиентаСервераЛояльности(Результат.ЗначенияПоиска[0], ШтрихкодОригинал, Ложь);
			
			Если ОжидаетсяОбработкаПослеВыбораВладельца Тогда
				ОжидаетсяОбработкаПослеВыбораВладельца = Ложь;
			КонецЕсли;
		ИначеЕсли ДополнительныеПараметры.СтруктураПараметровКлиента.Свойство("ВыборКонтрагента") Тогда
			
			ДанныеКарты = Результат.ЗначенияПоиска[0];
			Если ДанныеКарты.КартаНедействительна Тогда
				ПараметрыДляОбработкиШтрихкода = Новый Структура("Штрихкод",ДанныеКарты.НомерКарты);
				ОткрытьФормуИнформацииОКарте(ПараметрыДляОбработкиШтрихкода);
			Иначе
				ДанныеКартыКлиента = Новый Структура;
				ДанныеКартыКлиента.Вставить("Карта", ДанныеКарты.Карта);
				ДанныеКартыКлиента.Вставить("НомерКарты", ДанныеКарты.НомерКарты);
				ДанныеКартыКлиента.Вставить("КартаНедействительна", Ложь);
				ДанныеКартыКлиента.Вставить("ПродажиОборот", ДанныеКарты.ПродажиОборот);
				ДанныеКартыКлиента.Вставить("ДатаРождения", ДанныеКарты.ДатаРождения);
				ИнтерфейсРМКСлужебныйКлиент.ДополнитьФормуЛокальнойКартойКлиента(ЭтотОбъект, ДанныеКартыКлиента);
			КонецЕсли;
			Если ОжидаетсяОбработкаПослеВыбораВладельца Тогда
				ОжидаетсяОбработкаПослеВыбораВладельца = Ложь;
			КонецЕсли;
			
			ЗапроситьЛокальныеДанныеКарты();
			
		Иначе
			
			ПараметрыДляОбработкиШтрихкода = ДополнительныеПараметры.СтруктураПараметровКлиента.ПараметрыДляОбработкиШтрихкода;
			
			Если ИспользоватьРазрешительныйРежимГосИС
				И ФильтрПоискаПоШтрихкоду.Свойство("Номенклатура")
				И ПараметрыДляОбработкиШтрихкода.Свойство("ПроверитьМаркуПослеВыбораНоменклатуры")
				И ПараметрыДляОбработкиШтрихкода.ПроверитьМаркуПослеВыбораНоменклатуры
				И Результат.ЗначенияПоиска.Количество() = 1 Тогда
				
				КодМаркировки = ПараметрыДляОбработкиШтрихкода.Штрихкод;
				
				СимволGS1 = МенеджерОборудованияРМККлиентСервер.РазделительGS1();
				Разделитель = МенеджерОборудованияРМККлиентСервер.ЭкранированныйСимволGS1();
				Штрихкод = СтрЗаменить(КодМаркировки, Разделитель, СимволGS1);
				РеквизитыФормыРМК = СтруктураРеквизитовФормыРМКДляДобавленияСтроки();
				ИдентификаторСтроки = 0;
				
				СтандартнаяОбработка = Истина;
				ОбщегоНазначенияРМККлиентПереопределяемый.ПоискПоШтрихкодуРазрешительныйРежим(
					ЭтотОбъект, Штрихкод, РеквизитыФормыРМК, ПараметрыДляОбработкиШтрихкода, СтандартнаяОбработка);
				
				Если СтандартнаяОбработка Тогда
					
					ДанныеРучногоСопоставления = Новый Структура;
					ДанныеРучногоСопоставления.Вставить("Номенклатура");
					ДанныеРучногоСопоставления.Вставить("Характеристика");
					ДанныеРучногоСопоставления.Вставить("Упаковка");
					ДанныеРучногоСопоставления.Вставить("Серия");
					ДанныеРучногоСопоставления.Вставить("Штрихкод");
					
					ДанныеВыбора = Результат.ЗначенияПоиска[0];
					
					ЗаполнитьЗначенияСвойств(ДанныеРучногоСопоставления, ДанныеВыбора);
					ДанныеРучногоСопоставления.Штрихкод = Результат.ПараметрыШтрихкода.ШтрихкодПоиска;
					
					Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСКлиент");
					ДанныеПараметровСканирования = Модуль.ПараметрыСканирования(ЭтотОбъект);
					
					ДанныеСоСканера = Новый Массив();
					ДанныеСоСканера.Добавить(Штрихкод);
					ДанныеСоСканера.Добавить(Неопределено);
					ДанныеШтрихкода = МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(ДанныеСоСканера);
					
					ПараметрыПоискаРМК = РеквизитыФормыРМК;
					ШтрихкодОригинальный = Штрихкод;
					ЗаменитьСимволGS1(ШтрихкодОригинальный);
					ПараметрыПоискаРМК.Вставить("ШтрихкодОригинальный", ШтрихкодОригинальный);
					ПараметрыДляОбработкиШтрихкода.Вставить("Штрихкод", ШтрихкодОригинальный);
					ПараметрыПоискаРМК.Вставить("ПараметрыДляОбработкиШтрихкода", ПараметрыДляОбработкиШтрихкода);
					ПараметрыПоискаРМК.Вставить("ДанныеРучногоСопоставления", ДанныеРучногоСопоставления);
					ДанныеПараметровСканирования.ДополнительныеПараметры.Вставить("ПараметрыПоискаРМК", ПараметрыПоискаРМК);
					
					ИмяРеквизитаПараметрыСканирования = "ПараметрыСканирования";
					ЭтотОбъект[ИмяРеквизитаПараметрыСканирования] = ДанныеПараметровСканирования;
					
					Модуль.ОбработатьДанныеШтрихкода("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, ДанныеШтрихкода, ДанныеПараметровСканирования);
					
				КонецЕсли;
				
			Иначе
				
				Если ДополнительныеПараметры.СтруктураПараметровКлиента.Свойство("ДанныеКонтроляПродаж") Тогда
					Результат.Вставить("ДанныеКонтроляПродаж",
						ДополнительныеПараметры.СтруктураПараметровКлиента.ДанныеКонтроляПродаж);
				Иначе
					Результат.Вставить("ДанныеКонтроляПродаж", ИнтерфейсРМКСлужебныйКлиентСервер.ШаблонКэшаКонтроляПродаж());
				КонецЕсли;
				
				ОбработатьДанныеПоКодуКлиент(Результат, ПараметрыДляОбработкиШтрихкода);
				ОбработатьШтрихкодЗавершение(ПараметрыДляОбработкиШтрихкода);
				
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		КонтрагентВыбран = Ложь;
		ОжидаетсяОбработкаПослеВыбораВладельца = Ложь;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьОперациюПакетнойФискализацииКлиент()
	
	ЗакрытьСтраницуИнфоОшибка(Неопределено);
	НачатьПечатьЧека(Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ПовторитьОперациюПакетнойФискализации, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСменуПослеОтвета(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОткрытьСменуКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораСкидки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И ТипЗнч(Результат) = Тип("Массив") Тогда
		
		ОбработатьВыборУправляемыхСкидок(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьКартойВТихомРежимеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИмяМетода = "ОплатитьКартойИПробитьЧекВТихомРежиме";
		РассчитатьСкидкиКлиент(Истина);
	Иначе
		ОплатитьКартойИПробитьЧекВТихомРежиме();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьКартойИПробитьЧекВТихомРежиме(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОповещениеПродолжения = Новый ОписаниеОповещения(
		"ОплатитьКартойИПробитьЧекВТихомРежимеПродолжение",
		ЭтотОбъект);
	
	ПереключитьВРежимОплатыНаКлиенте(РежимыРаботыСЧеком.Оплата,,, ОповещениеПродолжения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьКартойИПробитьЧекВТихомРежимеПродолжение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если НЕ Отказ Тогда
		СерверныйВызов();
		КомандаОплатыКартой = Команды.ОплатаКартой;
		
		ПараметрыОплатыВТихомРежиме = Новый Структура;
		ПараметрыОплатыВТихомРежиме.Вставить("ПробитьЧек", Истина);
		ВыполнитьОплатуКартой(КомандаОплатыКартой, ПараметрыОплатыВТихомРежиме);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДоступнаОплатаQRКодомПлатежнойКарты(Штрихкод)
	
	Если МенеджерОборудованияРМККлиент.ЭтоРеквизитыКартыQR(Штрихкод)
		И Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбщая Тогда
		
		Для Каждого Терминал Из ТаблицаТерминалы Цикл
			Если Терминал.ПоддерживаетОплатуПоQRКоду Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьQRКодПлатежнойКарты(Штрихкод)
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатойИлиКоррекцией(ЭтотОбъект) Тогда
		
		Если Элементы.ГруппаОплатаКартой.Видимость Тогда
			Если ЗначениеЗаполнено(РеквизитыQRПлатежнойКарты) Тогда
				ПоказатьОповещениеПользователя(
					НСтр("ru = 'QR-код'"),
					,
					НСтр("ru = 'Обновлен QR-код платежной карты'"),
					БиблиотекаКартинок.ПодтверждениеДействияРМК,
					СтатусОповещенияПользователя.Важное,
					УникальныйИдентификатор);
			КонецЕсли;
			РеквизитыQRПлатежнойКарты = Штрихкод;
			Элементы.ОплатаКартой.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Иначе
			РеквизитыQRПлатежнойКарты = Штрихкод;
			Элементы.ОплатаКартой.Отображение = ОтображениеКнопки.КартинкаИТекст;
			ОплатаКартой(Команды.ОплатаКартой);
		КонецЕсли;
		
	ИначеЕсли Не ФормаЗамороженаПослеПробитияЧека() Тогда 
		РеквизитыQRПлатежнойКарты = Штрихкод;
		ОплатитьКартойВТихомРежиме();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизитыQRКодаПлатежнойКарты()
	
	РеквизитыQRПлатежнойКарты = "";
	Элементы.ОплатаКартой.Отображение = ОтображениеКнопки.Текст;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьНаличнымиВТихомРежиме()
	
	Если ЕстьНезаполненныеДанные() Тогда
		
		ТоварыПриАктивизацииСтроки(Элементы.Товары);
		
	Иначе
		
		НеобходимПересчетАвтоматическихСкидок = ОпределитьНеобходимостьПересчетаАвтоматическихСкидок();
		Если НеобходимПересчетАвтоматическихСкидок И ВопросПоРасчетуСкидок Тогда
			ЗадатьВопросПоРасчетуСкидок("ОплатитьНаличнымиВТихомРежимеЗавершение", , Истина);
		Иначе
			ОплатитьНаличнымиВТихомРежимеЗавершение(?(НеобходимПересчетАвтоматическихСкидок, КодВозвратаДиалога.Да, КодВозвратаДиалога.Нет), Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьНаличнымиВТихомРежимеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИмяМетода = "ОплатитьНаличнымиИПробитьЧекВТихомРежиме";
		РассчитатьСкидкиКлиент(Истина);
	Иначе
		ОплатитьНаличнымиИПробитьЧекВТихомРежиме();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьНаличнымиИПробитьЧекВТихомРежиме(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОповещениеПродолжения = Новый ОписаниеОповещения(
		"ОплатитьНаличнымиИПробитьЧекВТихомРежимеПродолжение",
		ЭтотОбъект);
	
	ПереключитьВРежимОплатыНаКлиенте(РежимыРаботыСЧеком.Оплата,,, ОповещениеПродолжения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьНаличнымиИПробитьЧекВТихомРежимеПродолжение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если НЕ Отказ Тогда
		КомандаОплатыНаличными = Команды.ОплатаНаличными;
		ОплатаНаличными(КомандаОплатыНаличными);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуВТабличнуюЧастьПоШтрихкоду(ПараметрыДляОбработкиШтрихкода, СтрокаТовары)
	
	Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "ТекущаяНоменклатура") Тогда
		Если Не ПараметрыДляОбработкиШтрихкода.ТекущаяНоменклатура = СтрокаТовары.Номенклатура
			Или Не ПараметрыДляОбработкиШтрихкода.ТекущаяХарактеристика = СтрокаТовары.Характеристика Тогда
			ПараметрыДляОбработкиШтрихкода.Вставить("НеверныйКод");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЭтоКодМарки = ПараметрыДляОбработкиШтрихкода.ПараметрыШтрихкода.ЭтоКодМаркировки;
	ТекущийШтрихкод = СтрокаТовары.Штрихкод;
	
	// Маркируемый товар добавляем отдельной строкой.
	Если СтрокаТовары.Маркируемый Тогда
		
		Если ЭтоЧекКоррекции Тогда
			Возврат;
		КонецЕсли;
		
		Если ЭтоКодМарки И ОбщегоНазначенияРМК.ЭтоАлкогольнаяПродукция(СтрокаТовары.ОсобенностьУчета) Тогда
			НужнаПроверкаСтатусаМарки = Ложь;
			ШтрихкодированиеРМКПереопределяемый.ЗаполнитьПризнакНеобходимостиПроверкиСтатусаМарки(НужнаПроверкаСтатусаМарки);
			Если НужнаПроверкаСтатусаМарки Тогда
				ПараметрыДляОбработкиШтрихкода.Вставить("СтрокаТовары", СтрокаТовары);
				ШтрихкодированиеРМКПереопределяемый.ПроверитьСтатусМарки(ПараметрыДляОбработкиШтрихкода);
				Если ПараметрыДляОбработкиШтрихкода.Свойство("ОшибкаЕГАИС") Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоКодМарки Тогда
			
			Если Не (СтрокаТовары.Свойство("ПоштучноеВыбытие") И Не СтрокаТовары.ПоштучноеВыбытие = Неопределено
				И СтрокаТовары.ПоштучноеВыбытие
				И ОбщегоНазначенияРМККлиентСервер.ЭтоПивнаяПродукция(СтрокаТовары.ОсобенностьУчета)) Тогда
				
				// Проверка на наличие марки.
				МассивСтрок = Объект.Товары.НайтиСтроки(Новый Структура("КодМаркировки", ТекущийШтрихкод));
				
				Если МассивСтрок.Количество() > 0 Тогда
					ПараметрыДляОбработкиШтрихкода.Вставить("МаркаНайденаВЧеке", Истина);
					ПараметрыДляОбработкиШтрихкода.Вставить("НомерСтрокиНайденнойМарки", МассивСтрок[0].ПолучитьИдентификатор());
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			// Найти строку, подставить туда код марки и вернуться.
			Если ПараметрыДляОбработкиШтрихкода.Свойство("НомерСтроки") Тогда
				
				НайденнаяСтрока = ПараметрыДляОбработкиШтрихкода.Объект.Товары.НайтиПоИдентификатору(
					ПараметрыДляОбработкиШтрихкода.НомерСтроки);
				
				Если Не НайденнаяСтрока = Неопределено Тогда
					
					Если НайденнаяСтрока.Количество = 0 И СтрокаТовары.Количество > 0 Тогда
						НайденнаяСтрока.Количество = СтрокаТовары.Количество;
						НайденнаяСтрока.КоличествоУпаковок = СтрокаТовары.КоличествоУпаковок;
					КонецЕсли;
					
					НайденнаяСтрока.КодМаркировки = ТекущийШтрихкод;
					
					Если Тип(СтрокаТовары) = Тип("Структура") И
						СтрокаТовары.Свойство("РазрешительныйРежимИдентификаторЗапросаГИСМТ") Тогда
						ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтрокаТовары,
							"РазрешительныйРежимИдентификаторЗапросаГИСМТ, РазрешительныйРежимДатаЗапросаГИСМТ");
					КонецЕсли;
					
					ПараметрыДляОбработкиШтрихкода.Вставить("МаркаВведена");
					ПараметрыДляОбработкиШтрихкода.Вставить("Организация", НайденнаяСтрока.Организация);
					ШтрихкодированиеРМК.РазобратьМаркуИЗаполнитьДанные(НайденнаяСтрока, ТекущийШтрихкод, СтрокаТовары.ОсобенностьУчета,
						ПараметрыДляОбработкиШтрихкода);
					Возврат;
					
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ПараметрыДляОбработкиШтрихкода.Свойство("НеобходимоВвестиМарку") Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеДанные = Неопределено;
	Если ПараметрыДляОбработкиШтрихкода.Свойство("ДанныеКонтроляПродаж") Тогда
		ДополнительныеДанные = ШаблонДополнительныхДанныхЗапросаКонтроляПродаж(ЭтотОбъект);
		ДополнительныеДанные.Вставить("Характеристика", Неопределено);
	КонецЕсли;
	ОбработатьВыборТовараСервер(СтрокаТовары, ДополнительныеДанные);
	Если Не ДополнительныеДанные = Неопределено И Не ДополнительныеДанные.ДанныеКонтроляПродаж = Неопределено Тогда
		ПараметрыДляОбработкиШтрихкода.ДанныеКонтроляПродаж = ДополнительныеДанные.ДанныеКонтроляПродаж;
	КонецЕсли;
	
	ПараметрыДляОбработкиШтрихкода.Вставить("СтрокаТовараДобавлена");
	Если СтрокаТовары.Количество = 0 Тогда
		ПараметрыДляОбработкиШтрихкода.Вставить("ДобавлятьВесСПодключенныхВесов");
	КонецЕсли;
	
	ПараметрыДляОбработкиШтрихкода.ИдентификаторСтроки = Элементы.Товары.ТекущаяСтрока;
	
	Если СтрокаТовары.Маркируемый Тогда
		
		НоваяСтрока = Объект.Товары.НайтиПоИдентификатору(ПараметрыДляОбработкиШтрихкода.ИдентификаторСтроки);
		
		Если ЭтоКодМарки Тогда
			НоваяСтрока.КодМаркировки = ТекущийШтрихкод;
			НоваяСтрока.Штрихкод = "";
			
			ЗаполнитьЧастичноеВыбытиеОстатокПоСтроке(НоваяСтрока, Объект.Товары, ИндексКартинкиПоштучноеВыбытие);
		КонецЕсли;
		
		ШтрихкодированиеРМК.РазобратьМаркуИЗаполнитьДанные(НоваяСтрока, ТекущийШтрихкод, СтрокаТовары.ОсобенностьУчета,
			ПараметрыДляОбработкиШтрихкода);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКассовуюСменуИНайтиКассираВФоне()
	ПроверитьКассовуюСменуИНайтиКассира();
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПодключениеОборудования(РезультатВыполнения, ДополнительныеПараметры) Экспорт

	КоличествоЭлектронныхвесовДо = ТаблицаЭлектронныхВесов.Количество();
	МенеджерОборудованияРМККлиент.ЗавершитьПодключениеОборудования(ЭтотОбъект, РезультатВыполнения);
	КоличествоЭлектронныхвесовПосле = ТаблицаЭлектронныхВесов.Количество();
	ДополнитьОпорныеДанныеПлиткиВесовымТоваромПриНеобходимости(КоличествоЭлектронныхвесовДо,
		КоличествоЭлектронныхвесовПосле);
	
	Если ПодключениеЭлектронныхВесовСРаспознавателемЗавершено() Тогда
		ПодключитьУстройстваРаспознавания();
	КонецЕсли;
	
	Если РезультатВыполнения.Результат 
		И РезультатВыполнения.ПодключенноеУстройство.ТипыОборудования.ДисплейПокупателя Тогда
		ВывестиИнформациюНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.Сервис);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураРеквизитовФормыРМКДляДобавленияСтроки()
	
	ИменаРеквизитовОбъектаФормыРМК = ОбщегоНазначенияРМККлиент.ИменаРеквизитовОбъектаФормыРМКДляДобавленияСтроки();
	СтруктураРеквизитовОбъектаФормыРМК = Новый Структура(ИменаРеквизитовОбъектаФормыРМК);
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитовОбъектаФормыРМК, Объект, ИменаРеквизитовОбъектаФормыРМК);
	
	ИменаРеквизитовФормыРМК = ОбщегоНазначенияРМККлиент.ИменаРеквизитовФормыРМКДляДобавленияСтроки();
	СтруктураРеквизитовФормыРМК = Новый Структура(ИменаРеквизитовФормыРМК);
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитовФормыРМК, ЭтотОбъект, ИменаРеквизитовФормыРМК);
	СтруктураРеквизитовФормыРМК.Вставить("Объект", СтруктураРеквизитовОбъектаФормыРМК);
	
	ИменаРеквизитовТекущейСтрокиФормыРМК = ОбщегоНазначенияРМККлиент.ИменаРеквизитовТекущейСтрокиФормыРМКДляДобавленияСтроки();
	Если ЗначениеЗаполнено(ИменаРеквизитовТекущейСтрокиФормыРМК) Тогда
		Если Не Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
			СтруктураРеквизитовТекущейСтрокиФормыРМК = Новый Структура(ИменаРеквизитовТекущейСтрокиФормыРМК);
			ЗаполнитьЗначенияСвойств(СтруктураРеквизитовТекущейСтрокиФормыРМК, Элементы.Товары.ТекущиеДанные, ИменаРеквизитовТекущейСтрокиФормыРМК);
			СтруктураРеквизитовФормыРМК.Вставить("ТекущаяСтрокаТовары", СтруктураРеквизитовТекущейСтрокиФормыРМК);
		КонецЕсли;
	КонецЕсли;
	
	КассыККМИОрганизации = ПодключенныеКассыККМИОрганизации();
	МассивОрганизаций = КассыККМИОрганизации.МассивОрганизаций;
	
	СтруктураРеквизитовФормыРМК.Вставить("МассивОрганизаций", МассивОрганизаций);
	
	СоответствияККТОрганизаций = Новый Соответствие;
	Для Каждого СтрокаКассы Из ТаблицаКассККМОрганизаций Цикл
		СоответствияККТОрганизаций.Вставить(СтрокаКассы.Организация, СтрокаКассы.ИдентификаторУстройства);
	КонецЦикла;
	
	СтруктураРеквизитовФормыРМК.Вставить("СоответствияККТОрганизаций", СоответствияККТОрганизаций);
	
	СтруктураРеквизитовФормыРМК.Вставить("ПустаяСтрокаТаблицыТоваров", ПустаяСтрокаТаблицыТоваров);
	
	Возврат СтруктураРеквизитовФормыРМК;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеПоискаПоШтрихкодуСерверБезКонтекста(Знач Штрихкод, Знач РеквизитыФормыРМК)
	
	ДанныеШтрихкода = Новый Структура;
	РаботаСоШтрихкодамиПереопределяемый.ЗаполнитьДанныеПоискаПоШтрихкоду(Штрихкод, РеквизитыФормыРМК, ДанныеШтрихкода);
	ДанныеШтрихкода.Вставить("ТолькоПользователи", НайденыТолькоПользователи(ДанныеШтрихкода));
	Возврат ДанныеШтрихкода;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанныеПоШтрихкодуНаКлиенте(СтрокаРезультата, ПараметрыДляОбработкиШтрихкода)
	
	ПараметрыДляОбработкиШтрихкода.Вставить("Объект", Объект);
	
	Если СтрокаРезультата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоменклатураДляПоискаСерий = Неопределено;
	Если НЕ ФильтрПоискаПоШтрихкоду = Неопределено Тогда
		ФильтрПоискаПоШтрихкоду.Свойство("СерииНоменклатуры", НоменклатураДляПоискаСерий);
	КонецЕсли;

	Если НоменклатураДляПоискаСерий = Неопределено Тогда
		
		НайденнаяНоменклатура = СтрокаРезультата;
		Если НЕ НайденнаяНоменклатура = Неопределено Тогда
			
			ДобавитьСтрокуВТабличнуюЧастьПоШтрихкодуНаКлиенте(ПараметрыДляОбработкиШтрихкода, НайденнаяНоменклатура);
			
			Если ПараметрыДляОбработкиШтрихкода.Свойство("СтрокаТовараДобавлена") И Не ПараметрыДляОбработкиШтрихкода.Свойство("МаркаНайденаВЧеке") Тогда
				ИдентификаторСтрокиТовара = ПараметрыДляОбработкиШтрихкода.ИдентификаторСтроки;
				Если ПараметрыДляОбработкиШтрихкода.Свойство("МаркаВведена") Тогда
					ИдентификаторСтрокиТовара = ПараметрыДляОбработкиШтрихкода.НомерСтроки;
				КонецЕсли;
				СтрокаДобавленногоТовара = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтрокиТовара);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуВТабличнуюЧастьПоШтрихкодуНаКлиенте(ПараметрыДляОбработкиШтрихкода, СтрокаТовары)
	
	Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ПараметрыДляОбработкиШтрихкода, "ТекущаяНоменклатура") Тогда
		Если Не ПараметрыДляОбработкиШтрихкода.ТекущаяНоменклатура = СтрокаТовары.Номенклатура
			Или Не ПараметрыДляОбработкиШтрихкода.ТекущаяХарактеристика = СтрокаТовары.Характеристика Тогда
			ПараметрыДляОбработкиШтрихкода.Вставить("НеверныйКод");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЭтоКодМарки = ПараметрыДляОбработкиШтрихкода.ПараметрыШтрихкода.ЭтоКодМаркировки;
	ТекущийШтрихкод = СтрокаТовары.Штрихкод;
	
	ОбработатьВыборТовараНаКлиенте(СтрокаТовары);
	
	ПараметрыДляОбработкиШтрихкода.Вставить("СтрокаТовараДобавлена");
	Если СтрокаТовары.СтрокаТовара.Количество = 0 Тогда
		ПараметрыДляОбработкиШтрихкода.Вставить("ДобавлятьВесСПодключенныхВесов");
	КонецЕсли;
	
	ПараметрыДляОбработкиШтрихкода.ИдентификаторСтроки = Элементы.Товары.ТекущаяСтрока;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайденыТолькоПользователи(ДанныеШтрихкода)
	
	ТипПользовательРМК = Метаданные.ОпределяемыеТипы.ПользовательРМК.Тип;
	
	КоличествоЗначений = ДанныеШтрихкода.ЗначенияПоиска.Количество();
	РезультатФункции = (КоличествоЗначений > 0);
	
	ИндексЗначения = 0;
	Пока ИндексЗначения < КоличествоЗначений И РезультатФункции Цикл
		ЗначениеПоиска = ДанныеШтрихкода.ЗначенияПоиска[ИндексЗначения];
		Если Не ТипПользовательРМК.СодержитТип(ЗначениеПоиска.ТипОбъекта) Тогда
			РезультатФункции = Ложь;
		КонецЕсли;
		
		ИндексЗначения = ИндексЗначения + 1;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти

#Область Общее

&НаКлиенте
Процедура ОткрытьФормуОбменаДаннымиКлиент()
	
 	Если ЗапускатьОбменИзИнтерфейсаРМК
		И Не (СписокРолейПользователя.НайтиПоЗначению("ВыполнениеСинхронизацииДанных") = Неопределено) Тогда
		
		Если УзлыОбмена.Количество() = 1 Тогда
			
			УзелОбмена = УзлыОбмена[0].Значение;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("УзелИнформационнойБазы", УзелОбмена);
			
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗакрытиеФормыОбмена", ЭтотОбъект);
			
			ОткрытьФорму("Обработка.ВыполнениеОбменаДанными.Форма",
			ПараметрыФормы, ЭтаФорма, УзелОбмена.УникальныйИдентификатор(),,,ОповещениеОЗакрытии,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
		Иначе
			
			ЗаголовокПредупреждения = НСтр("ru = 'Обмен данными'");
			ТекстПредупреждения = НСтр("ru = 'Обнаружено несколько настроек синхронизации.
				|Обратитесь к администратору за помощью в выборе подходящей настройки.'");
			ПоказатьПредупреждение(,ТекстПредупреждения, , ЗаголовокПредупреждения);

			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыОбмена(Результат, Параметры) Экспорт
	
	ДатаОбновления = ОбщегоНазначенияКлиент.ДатаСеанса();
	СписокТоваров.Параметры.УстановитьЗначениеПараметра("Дата", ДатаОбновления);
	ОбновитьДанныеИзбранныхИПлиток();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтатусЗавершенияРаботыСЧеком()
	
	РаботаСЧекомЗавершена = (Объект.Товары.Количество() = 0 ИЛИ ФормаЗамороженаПослеПробитияЧека());
	ДанныеЧекаОчищены = Объект.Товары.Количество() = 0;
	РезультатФункции = Новый Структура("РаботаСЧекомЗавершена,ДанныеЧекаОчищены", РаботаСЧекомЗавершена, ДанныеЧекаОчищены);
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция РаботаСЧекомЗавершена(ЗаголовокПредупреждения = "")
	
	СтатусЗавершенияРаботыСЧеком = ПолучитьСтатусЗавершенияРаботыСЧеком();
	РаботаСЧекомЗавершена = СтатусЗавершенияРаботыСЧеком.РаботаСЧекомЗавершена;
	Если НЕ РаботаСЧекомЗавершена Тогда
		Если Не ЗаголовокПредупреждения = Неопределено Тогда
			ТекстПредупреждения = НСтр("ru='Перед началом операции необходимо пробить, удалить или отложить текущий чек.'");
			ПоказатьПредупреждение(, ТекстПредупреждения, , ЗаголовокПредупреждения);
		КонецЕсли;
	ИначеЕсли Не СтатусЗавершенияРаботыСЧеком.ДанныеЧекаОчищены Тогда
		РазморозитьФормуПослеПробитияЧека();
	КонецЕсли;
	Возврат РаботаСЧекомЗавершена;
	
КонецФункции

&НаКлиенте
Функция ПрерватьОбработкуОповещения()
	
	ЭлементГруппаСлоевДополнительнаяОбласть = Элементы.ГруппаСлоевДанныеПокупателяДополнительнаяОбласть;
	ОткрытаСтраницаПоискаКартыВводСМС = ОткрытаСтраницаПоискаКарты()
		И ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ЭлементГруппаСлоевДополнительнаяОбласть)
			= Элементы.ГруппаПодтверждениеСМС;
				
	Возврат Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПодтверждениеВозраста
		ИЛИ ВыбранБанковскийПлатеж
		ИЛИ ПриемАванса
		ИЛИ ПриемАвансаПоЗаказу
		ИЛИ ЭтоВозвратАванса
		ИЛИ (ЗначениеЗаполнено(ВременныйКонтекстПроверкиМарки) И Не ТекущаяОперация = "РучноеПодтверждениеМаркиРМК")
		ИЛИ (ПробитыеЧеки.Количество() > 0 И (Не ФормаЗамороженаПослеПробитияЧека()))
		ИЛИ ОткрытаСтраницаПоискаКартыВводСМС;
	
КонецФункции

&НаКлиенте
Процедура НачатьПечатьЧека(ЭтоПакетнаяФискализация = Ложь)
	
	НеобходимоПровестиОплатуПоКарте = СуммаОплаченоБН > 0 И НЕ ТранзакцияПоКартеЗавершена И НЕ ЭтоЧекКоррекции И Не ЭтоПакетнаяФискализация;
	
	Если ((СуммаОплаченоНал > 0 И СуммаОплаченоБН = 0)					//Оплата только наличными
		ИЛИ (НеобходимоПровестиОплатуПоКарте И (СуммаОплаченоНал > 0	//Оплата наличными + Картой до операции на терминале
		ИЛИ СуммаНаличныхКВыдаче > 0)))									//Выдача наличных
		И СуммаОплаченоСертификатамиНСПК = 0							//Корректировка наличных при оплате НСПК проверяется в ПроверитьСертификатНСПКНаКлиенте()
		И НЕ ЭтоЧекКоррекции Тогда										//Чек коррекции не меняет сумму наличных в кассе
		
		Отказ = Ложь;
		СкорректироватьНаличныеДенежныеСредстваВКассеККМКлиент(Отказ, Объект.Организация, Объект.КассаККМ, СуммаОплаченоНал - СуммаНаличныхКВыдаче, Ложь);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НеобходимоПровестиОплатуПоКарте Тогда
		ПровестиОплатуПоКарте();
		Возврат;
	КонецЕсли;
	
	ПробитьЧекКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекКлиент()
	
	ОтборСтрок = Неопределено;
	Если НЕ ВыбраннаяОрганизация = Неопределено И НЕ ВыбраннаяСистемаНалогообложения = Неопределено Тогда
		ОтборСтрок = Новый ФиксированнаяСтруктура(ВыбраннаяОрганизацияИСНО());
	КонецЕсли;
	Элементы.Товары.ОтборСтрок = ОтборСтрок;
	ПересчитатьИтогиТабличнойЧастиТовары(Ложь);
	РассчитатьСуммыОплаты();
	
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПанельУправленияЧеком);
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПробитьЧекНаКлиентеЗавершение", ЭтотОбъект);
	
	Отбор = Новый Структура("КассаККМ", Объект.КассаККМ);
	СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
	Если Не СтрокаКассы.ИспользоватьБезПодключенияОборудования Тогда
		ИдентификаторУстройстваФР = ПодключаемоеОборудование;
	Иначе
		ИдентификаторУстройстваФР = "АвтономнаяККТ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторУстройстваФР) Тогда
		
		ТекущийЧекЭлектронный = ТребуетсяПробитьЭлектронныйЧек();
		ПараметрыПробитияЧека = Новый Структура("ОповещениеОЗавершении, ИдентификаторУстройстваФР, БумажныйЧек",
			ОповещениеПриЗавершении, ИдентификаторУстройстваФР, (Не ТекущийЧекЭлектронный));
			
			Если ОжидаемоеКоличествоЧеков >= 1 Тогда
				ПодготовитьДанныеЧековДляФискализации(ПараметрыПробитияЧека);
			Иначе
				
				ТекстСообщения =
					НСтр("ru = 'Для товаров из списка покупок не удалось определить системы налогообложения.'");
				ОткрытьСтраницуИнфоОшибка(ТекстСообщения);
				
			КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОткрытьСтраницуИнфоОшибка(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяПробитьЭлектронныйЧек()
	
	РезультатФункции = ИнтерфейсРМКСлужебныйКлиент.ЗаполненаКонтактнаяИнформацияДляОтправкиЧека(ЭтотОбъект)
		И (ПробитиеСоСтраницыОтправкиЧека Или (Не ХочуБумажныйЧек) Или (Не ПечататьБумажныйЧек = ХочуБумажныйЧек));
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция ЭтоПакетнаяОперацияФискализации()
	
	Если СуммаОплаченоБН > 0 И ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации) Тогда
		Если ПечататьКороткийСлипЧек Тогда
			Возврат Истина;
		ИначеЕсли ВыдаватьНаличныеНаКассе И СуммаНаличныхКВыдаче > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ФискализироватьЧек(Контекст, ДополнительныеДанные, ОповещениеПриЗавершении, СистемаНалогообложения)
	
	ИмяИдентификатора = НСтр("ru = 'Обработка.РабочееМестоКассира.ФискализироватьЧек'");
	ФиксироватьСОшибкой = Ложь;
	АвтозавершениеЗамера = Ложь;
	ПараметрыПакетнойОперации = Неопределено;
	
	ИдентификаторЗамераПробитияЧека = ОценкаПроизводительностиКлиент.ЗамерВремени(ИмяИдентификатора,
		ФиксироватьСОшибкой, АвтозавершениеЗамера);
		
	ИдентификаторУстройстваФР = ДополнительныеДанные.ИдентификаторУстройстваФР;
	ТранспортныйМодуль = ДополнительныеДанные.ТранспортныйМодуль;
	
	ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьДополнительныеДанныеДляПробитияЧека(ЭтотОбъект,
		ДополнительныеДанные);
	ОбщиеПараметры = ДанныеДляПробитияЧека(Контекст, ДополнительныеДанные, СистемаНалогообложения);
	ОбновитьРеквизитыФормыПослеПодготовкиДанныхДляЧека(ДополнительныеДанные);
	
	Отказ = ДополнительныеДанные.Отказ;
	ТекстОшибки = ДополнительныеДанные.ТекстОшибки;
	ЕстьПродукцияЕГАИС = ДополнительныеДанные.ЕстьПродукцияЕГАИС;
	
	Если Отказ Тогда
		
		Если ПустаяСтрока(ТекстОшибки) Тогда
			ТекстОшибки = НСтр("ru='Ошибка формирования исходных данных для фискализации чека'");
		КонецЕсли;
		
		ДополнительныеДанные.ТекстОшибки = ТекстОшибки;
		
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамераПробитияЧека, Ложь);
		
		Доступность = Истина;
		ОшибкаФормированияИсходныхДанных = Истина;
		
		Если ТранзакцияПоКартеЗавершена Тогда
			ОбработатьОтменуОплаты(, ТекстОшибки, ОшибкаФормированияИсходныхДанных);
		Иначе
			
			ТекстЗаголовка = НСтр("ru = 'Ошибка пробития чека.'");
			Если Не ДополнительныеДанные.ПечататьБумажныйЧек Тогда
				ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПанельУправленияЧеком);
			КонецЕсли;
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ДополнительныеДанные.ПечататьБумажныйЧек Тогда
		
		Если ЗначениеЗаполнено(ОтправкаЧекаПочта) И (Не РежимКассыСамообслуживания)
				И ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ОтправкаЧекаПочта) Тогда
			ОбщиеПараметры.ПокупательEmail = ОтправкаЧекаПочта;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтправкаЧекаТелефон) И НЕ ЗначениеЗаполнено(ОбщиеПараметры.ПокупательEmail) Тогда
			ОбщиеПараметры.ПокупательНомер = ОтправкаЧекаТелефон;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщиеПараметры.Электронно = НЕ ДополнительныеДанные.ПечататьБумажныйЧек;
	
	Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Контекст.Вставить("ЕстьПродукцияЕГАИС", ЕстьПродукцияЕГАИС);
	
	ДополнительныеПараметры = Неопределено;
	
	Если ЕстьПродукцияЕГАИС Тогда
		
		Контекст.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
		ОбщиеПараметры.Вставить("ЕстьАлкогольнаяПродукцияЕГАИС", ЕстьПродукцияЕГАИС);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭквайринговыйТерминалВыполненияОперации) Тогда
		
		ТекущийТерминал = ЭквайринговыйТерминалВыполненияОперации;
		СтруктураПоиска = Новый Структура("ЭквайринговыйТерминал", ТекущийТерминал);
		
		РезультатПоиска = ТаблицаТерминалы.НайтиСтроки(СтруктураПоиска);
		
		// Пакетная операция фискализации (оплата картой с последующей фискализацией)
		Если ЭтоПакетнаяОперацияФискализации() И НЕ РезультатПоиска[0].ИспользоватьБезПодключенияОборудования И ТаблицаОплатКартой.Количество() = 1 Тогда
			
			ДанныеЗаполнения = Новый Структура();
			ДанныеЗаполнения.Вставить("ИдентификаторЭТ", ЭквайринговыйТерминалВыполненияОперации);
			ДанныеЗаполнения.Вставить("СуммаОплатыКартой", СуммаОплаченоБН);
			
			Если РезультатПоиска.Количество() > 0 Тогда
				
				ДанныеЗаполнения.Вставить("ВидОплаты", РезультатПоиска[0].ВидОплаты);
				ДанныеЗаполнения.Вставить("ПроцентКомиссии", РезультатПоиска[0].ПроцентКомиссииПриПродаже);
				ДанныеЗаполнения.Вставить("ИдентификаторЭТ", РезультатПоиска[0].ПодключаемоеОборудование);
				ДанныеЗаполнения.Вставить("РеквизитыQRПлатежнойКарты", РеквизитыQRПлатежнойКарты);
				
			КонецЕсли;
			
			Если СуммаНаличныхКВыдаче > 0 И ВыдаватьНаличныеНаКассе Тогда
				
				СведенияДляВыдачиНаличных = Новый Структура();
				СведенияДляВыдачиНаличных.Вставить("СуммаВыдачи", СуммаНаличныхКВыдаче);
				СведенияДляВыдачиНаличных.Вставить("ОрганизацияВыдачи", ВыбраннаяОрганизация);
				ДанныеЗаполнения.Вставить("ПараметрыВыдачиНаличных", СведенияДляВыдачиНаличных);
				ДанныеЗаполнения.Вставить("ДанныеЧекаПродажи", ЧекККМВОбработке);
				
			КонецЕсли;
			
			ЗаполнитьДанныеДляПакетнойФискализации(ОбщиеПараметры, ПараметрыПакетнойОперации, ДанныеЗаполнения);
			
		КонецЕсли;
	КонецЕсли;
	
	ЗарегистрироватьОтправкуЧекаНаФискализацию();
	МенеджерОборудованияРМККлиент.ДобавитьЧекВОчередьЧековККТ(ОбщиеПараметры, ПараметрыПакетнойОперации);
	
	Если ОбщиеПараметры.АвтономнаяККТ Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
		ДополнительныеПараметры.Вставить("КассаККМ", Неопределено);
	Иначе
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("КассаККМ", ОбщиеПараметры.КассаККМ);
		ПодключитьОбработчикОжидания("ПроверитьСтатусЧекаНаКлиенте", 1, Истина);
	КонецЕсли;
	
	ДанныеКПередачеВДисплейПокупателя.ЧекФискализации = ОбщиеПараметры.ДокументОснование;
	
	МенеджерОборудованияРМККлиент.ФискализацияЧековВОчереди(РазрешенаАвтоматическаяФискализация, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеДляПакетнойФискализации(ОбщиеПараметры, ПараметрыПакетнойФискализации, ДанныеДляЗаполнения)
	
	ОбщегоНазначенияРМК.ЗаполнитьДанныеДляПакетнойФискализации(ОбщиеПараметры,
		ПараметрыПакетнойФискализации, ДанныеДляЗаполнения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеДляПробитияЧека(Контекст, ИсходныеДанные, СистемаНалогообложения)
	
	РеквизитыФормы = ИсходныеДанные.РеквизитыФормы;
	ЕстьПродукцияЕГАИС = ИсходныеДанные.ЕстьПродукцияЕГАИС;
	Отказ = ИсходныеДанные.Отказ;
	ТекстОшибки = ИсходныеДанные.ТекстОшибки;
	БумажныйЧек = ИсходныеДанные.ПечататьБумажныйЧек;
	НастройкиРМК = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыФормы.ТекущаяНастройкаРМК,
		"СворачиватьСтрокиПриПечатиЧека, НеПечататьКодВозвратаСБП, НеПечататьКодВозвратаНСПК");
	
	ИнтерфейсРМКСлужебный.ПреобразоватьМассивыСтруктурДанныхЧекаВТаблицы(РеквизитыФормы);
	
	ЭтоПродажа = ОбщегоНазначенияРМК.ЭтоВидОперацииПродажа(РеквизитыФормы.Объект.ВидОперации);
	ЭтоВозврат = Не (ЭтоПродажа Или РеквизитыФормы.ЭтоВозвратБезОснования Или РеквизитыФормы.ЭтоЧекКоррекции);
	Если Не (ЭтоВозврат И (Не РеквизитыФормы.ЧекККМВОбработке = Неопределено)
			И ОбщегоНазначения.СсылкаСуществует(РеквизитыФормы.ЧекККМВОбработке)) Тогда
		ОбщегоНазначенияРМКПереопределяемый.ЗаписатьЧекККМПередПробитием(РеквизитыФормы, Отказ, ТекстОшибки,
			СистемаНалогообложения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РеквизитыФормы.ЧекККМВОбработке) И Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		ИсходныеДанные.Отказ = Отказ;
		ИсходныеДанные.ТекстОшибки = НСтр("ru = 'Не заполнен реквизит ""ЧекККМВОбработке"".'");
		ИнтерфейсРМКСлужебный.ПреобразоватьТаблицыЧекаВСтруктурыДанных(РеквизитыФормы);
		Возврат Неопределено;
	КонецЕсли;
	
	Если Отказ Тогда
		ИсходныеДанные.Отказ = Отказ;
		ИсходныеДанные.ТекстОшибки = ТекстОшибки;
		ИнтерфейсРМКСлужебный.ПреобразоватьТаблицыЧекаВСтруктурыДанных(РеквизитыФормы);
		Возврат Неопределено;
	КонецЕсли;
	
	Контекст.Вставить("ЧекККМСсылка", РеквизитыФормы.ЧекККМВОбработке);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ЕстьПродукцияЕГАИС", ЕстьПродукцияЕГАИС);
	ДополнительныеПараметры.Вставить("ПечататьБумажныйЧек", РеквизитыФормы.ПечататьБумажныйЧек);
	ДополнительныеПараметры.Вставить("СистемаНалогообложения", СистемаНалогообложения);
	ДополнительныеПараметры.Вставить("СворачиватьСтрокиПриПечатиЧека", НастройкиРМК.СворачиватьСтрокиПриПечатиЧека);
	ДополнительныеПараметры.Вставить("ОсобенностиУчетаВозвращаемойМаркируемойПродукции",
		РеквизитыФормы.ОсобенностиУчетаВозвращаемойМаркируемойПродукции);
	ДополнительныеПараметры.Вставить("ВариантЗаполненияМестаРасчетов", РеквизитыФормы.ВариантЗаполненияМестаРасчетов);
	ДополнительныеПараметры.Вставить("ВариантЗаполненияКассира", РеквизитыФормы.ВариантЗаполненияКассира);
	ДополнительныеПараметры.Вставить("РабочееМестоКассира", Истина);
	ДополнительныеПараметры.Вставить("Форма", ИсходныеДанные.РеквизитыФормы);
	ДополнительныеПараметры.Вставить("ККМПоддерживаетПроверкуКодовМаркировки", РеквизитыФормы.ККМПоддерживаетПроверкуКодовМаркировки);
	
	ОбщиеПараметры = ОбщегоНазначенияРМК.ДанныеДляПробитияЧека(РеквизитыФормы.ЧекККМВОбработке, ДополнительныеПараметры);
		
	Если ЕстьСвойство(ОбщиеПараметры, "ШаблонЧека") И НЕ ЗначениеЗаполнено(ОбщиеПараметры.ШаблонЧека) Тогда
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьШаблонЧека(РеквизитыФормы.ЧекККМВОбработке,
			ОбщиеПараметры, РеквизитыФормы.ТекущаяНастройкаРМК);
	КонецЕсли;
	
	Если РеквизитыФормы.ПечатьКопииЧека Тогда
		Если ЗначениеЗаполнено(РеквизитыФормы.ПринтерЧеков) Тогда
			ОбщиеПараметры.УстройствоПечати = РеквизитыФормы.ПринтерЧеков;
		ИначеЕсли ЗначениеЗаполнено(ОбщиеПараметры.КассаККМ.ПодключаемоеОборудование) Тогда
			ОбщиеПараметры.УстройствоПечати = ОбщиеПараметры.КассаККМ.ПодключаемоеОборудование;
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыФормы.ПечатьТоварногоЧека И РеквизитыФормы.СпособФормированияТоварногоЧека = 2 Тогда
		
		ШиринаЛенты = Неопределено;
		ИсходныеДанные.Свойство("ШиринаЛенты", ШиринаЛенты);
		ТекстТоварногоЧека = ПодготовитьТекстТоварногоЧека(РеквизитыФормы.ЧекККМВОбработке, ШиринаЛенты);
		Если Не ПустаяСтрока(ТекстТоварногоЧека) Тогда
			ОбщиеПараметры.ПакетДокументов.Вставить(ТекстТоварногоЧека, РеквизитыФормы.ПринтерЧеков);
		КонецЕсли;
		
	КонецЕсли;
	
	Если РеквизитыФормы.ПечатьЗаказаПриПробитииЧека И РеквизитыФормы.СпособПечатиЗаказаПокупателя = 2 Тогда
		ЗаказПокупателя = Неопределено;
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьЗаказПокупателяПоЧеку(РеквизитыФормы.ЧекККМВОбработке, ЗаказПокупателя);
		Если ЗначениеЗаполнено(ЗаказПокупателя) Тогда
			
			ШиринаЛенты = Неопределено;
			ИсходныеДанные.Свойство("ШиринаЛенты", ШиринаЛенты);
			ТекстЗаказа = ПодготовитьТекстЗаказа(ЗаказПокупателя, ШиринаЛенты);
			Если Не ПустаяСтрока(ТекстЗаказа) Тогда
				ОбщиеПараметры.ПакетДокументов.Вставить(ТекстЗаказа, РеквизитыФормы.ПринтерЧеков);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ЭтоТипПлатежнойСистемыККТСБП  = Ложь;
	ЭтоТипПлатежнойСистемыККТНСПК = Ложь;
	Если ЕстьСвойство(ОбщиеПараметры, "ТипПлатежнойСистемы") Тогда
		ЭтоТипПлатежнойСистемыККТСБП  =
			ОбщиеПараметры.ТипПлатежнойСистемы = Перечисления.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей;
		ЭтоТипПлатежнойСистемыККТНСПК =
			ОбщиеПараметры.ТипПлатежнойСистемы = Перечисления.ТипыПлатежнойСистемыККТ.СертификатНСПК;
	КонецЕсли;
	
	Если ОбщиеПараметры.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств 
		И (ЭтоТипПлатежнойСистемыККТСБП ИЛИ ЭтоТипПлатежнойСистемыККТНСПК) И ЕстьСвойство(ОбщиеПараметры, "QRКод") Тогда
		
		ЕстьШаблонЧекаПродажи = ЕстьСвойство(ОбщиеПараметры, "ШаблонЧека") И ЗначениеЗаполнено(ОбщиеПараметры.ШаблонЧека);
		НеПечататьКодВозвратаСБП = ЭтоТипПлатежнойСистемыККТСБП И НастройкиРМК.НеПечататьКодВозвратаСБП;
		НеПечататьКодВозвратаНСПК = ЭтоТипПлатежнойСистемыККТНСПК И НастройкиРМК.НеПечататьКодВозвратаНСПК;
		Если ЕстьШаблонЧекаПродажи ИЛИ НеПечататьКодВозвратаСБП ИЛИ НеПечататьКодВозвратаНСПК Тогда
			ОбщиеПараметры.QRКод.ЗначениеКода = "";
		КонецЕсли;
	КонецЕсли;
	
	ИсходныеДанные.ЕстьПродукцияЕГАИС = ДополнительныеПараметры.ЕстьПродукцияЕГАИС;
	ИнтерфейсРМКСлужебный.ПреобразоватьТаблицыЧекаВСтруктурыДанных(РеквизитыФормы);
	
	Возврат ОбщиеПараметры;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьСтатусЧекаНаКлиенте()
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Результат", Ложь);
	РезультатВыполнения.Вставить("ОписаниеОшибки", НСтр("ru = ''"));
	
	ПроверитьСтатусЧека(РезультатВыполнения);
	Если ЗначениеЗаполнено(РезультатВыполнения.Результат) Тогда
		ПробитьЧекНаКлиентеЗавершение(РезультатВыполнения, Неопределено);
	Иначе
		ПодключитьОбработчикОжидания("ПроверитьСтатусЧекаНаКлиенте", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСтатусЧека(РезультатВыполнения)
	
	Если ЕстьСвойство(ЧекККМВОбработке, "ИдентификаторЧекаВОчереди") Тогда
		
		ДанныеСтатусаЧека =
		МенеджерОборудованияРМК.ПолучитьСтатусЧекаВОчереди(
			ЧекККМВОбработке.ИдентификаторЧекаВОчереди);
		
	Иначе
		
		ДанныеСтатусаЧека =
		МенеджерОборудованияРМК.ПолучитьСтатусЧекаВОчереди(
			XMLСтрока(ЧекККМВОбработке));
		
	КонецЕсли;
	
	ПараметрыДляЗаписиЧека = Новый Структура;
	ПараметрыДляЗаписиЧека.Вставить("Результат", Неопределено);
	ПараметрыДляЗаписиЧека.Вставить("ЧекККМСсылка", Неопределено);
	
	СтатусЧека = Неопределено;
	СтатусыЧекаВОчереди = МенеджерОборудованияРМК.СтатусыЧекаВОчереди();
	Если ЕстьСвойство(ДанныеСтатусаЧека, "СтатусЧека") Тогда
		СтатусЧека = ДанныеСтатусаЧека.СтатусЧека;
		Если СтатусЧека = СтатусыЧекаВОчереди.Получить("Ошибка") Тогда
			ПараметрыДляЗаписиЧека.Результат = Ложь;
		ИначеЕсли СтатусЧека = СтатусыЧекаВОчереди.Получить("Фискализирован") Тогда
			ПараметрыДляЗаписиЧека.Результат = Истина;
		Иначе
			ПараметрыДляЗаписиЧека.Результат = Неопределено;
		КонецЕсли;
	Иначе
		СтатусЧека = СтатусыЧекаВОчереди.Получить("Ошибка");
		ПараметрыДляЗаписиЧека.Результат = Ложь;
	КонецЕсли;
	Если ЕстьСвойство(ДанныеСтатусаЧека, "ДокументОснование") Тогда
		ПараметрыДляЗаписиЧека.ЧекККМСсылка = ДанныеСтатусаЧека.ДокументОснование;
	КонецЕсли;
	
	Если ЕстьСвойство(ДанныеСтатусаЧека, "РезультатПакетнойОперации") Тогда
		
		ПараметрыДляЗаписиЧека.Вставить("РезультатПакетнойОперации", ДанныеСтатусаЧека.РезультатПакетнойОперации);
		
		ДанныеПакетнойОперации = ДанныеСтатусаЧека.РезультатПакетнойОперации;
		
		Если ЭтоОшибкаФискализацииЧекаВыдачиВПакетномРежиме(ДанныеПакетнойОперации) Тогда
			ОбщегоНазначенияРМК.ЗаполнитьОплатуКартойДляПакетнойФискализации(ДанныеСтатусаЧека.ДокументОснование,
				ДанныеПакетнойОперации.РезультатВыполненияЭквайринговойОперации,
				ДанныеПакетнойОперации.ПараметрыЭквайринговойОперации);
		КонецЕсли;
		
	КонецЕсли;
	
	ПробитьЧекЗавершение(ПараметрыДляЗаписиЧека);
	
	Если СтатусЧека = СтатусыЧекаВОчереди.Получить("Фискализирован") Тогда
		РезультатВыполнения.Результат = Истина;
	ИначеЕсли СтатусЧека = СтатусыЧекаВОчереди.Получить("Ошибка") Тогда
		
		Если ЗначениеЗаполнено(ДанныеСтатусаЧека) Тогда
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка при пробитии чека на ККТ.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , , ДанныеСтатусаЧека.ТекстОшибки);
			
			МенеджерОборудованияРМК.УдалитьЧекИзОчереди(ДанныеСтатусаЧека.ДокументОснование);
			
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = ДанныеСтатусаЧека.ТекстОшибки;
		Иначе
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка заполнения данных чека. Обратитесь к администратору.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , ,);
			
			МенеджерОборудованияРМК.УдалитьЧекИзОчереди(ЧекККМВОбработке);
			
			РезультатВыполнения.Результат = Ложь;
			РезультатВыполнения.ОписаниеОшибки = НСтр("ru = 'Ошибка заполнения данных чека. Обратитесь к администратору.'");
		КонецЕсли;
		
	Иначе
		РезультатВыполнения.Результат = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеСтатусаЧека) = Тип("Структура") Тогда
		
		РезультатВыполнения.Вставить("ТипПакетнойОперации", ДанныеСтатусаЧека.ТипПакетнойОперации);
		РезультатВыполнения.Вставить("РезультатПакетнойОперации", ДанныеСтатусаЧека.РезультатПакетнойОперации);
		РезультатВыполнения.Вставить("ФискализированныйЧек", ДанныеСтатусаЧека.ДокументОснование); // АПК:1036
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекНаКлиентеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Доступность = Истина;
	ЭтоПоследнийЧекСписка = Истина;
	НужноЗаморозитьФорму = ЛожЬ;
	УстановитьДоступностьЭлементаФормы(Элементы.ПанельУправленияЧеком, Истина);
	
	Если ИспользоватьОплатуСертификатамиНСПК Тогда
		Если СуммаОплаченоСертификатамиНСПК > 0 Тогда
			Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
				ПередатьДанныеФискальногоЧекаНСПК();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
		
		ОтразитьОстаткиНаличныхДенежныхСредствНаФорме(Объект.Организация, Объект.КассаККМ);
		
		ЗарегистрироватьПробитиеЧека();
		ТранзакцияПоКартеЗавершена = Ложь;
		ТипОплаты = "";
		ТекущаяОперация = "";
		ЧекККМВОбработке = Неопределено;
		
		Если РезультатВыполнения.Результат Тогда
		
			Если СпособПечатиЗаказаПокупателя = 1 И ПечатьЗаказаПриПробитииЧека Тогда
				СформироватьПечатнуюФормуЗаказаПокупателя(РезультатВыполнения.ФискализированныйЧек);
			КонецЕсли;
			
			Если СпособФормированияТоварногоЧека = 1 И ПечатьТоварногоЧека Тогда
				СформироватьПечатнуюФормуТоварногоЧека(РезультатВыполнения.ФискализированныйЧек);
			КонецЕсли;
			
		Иначе
			
		КонецЕсли;
		
		ОжидаемоеКоличествоЧеков = ОжидаемоеКоличествоЧеков -1;
		
		Если ЗначениеЗаполнено(ОтложенныйЧек) Тогда
			ОтложенныйЧек = Неопределено;
		КонецЕсли;
		
		ЭтоПоследнийЧекСписка = ОжидаемоеКоличествоЧеков < 1;
		
		ЭтоОперацияПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
		Если ЭтоОперацияПродажа Тогда
			СписатьРазблокироватьБонусныеБаллы();
		КонецЕсли;
		СписатьРазблокироватьПодарочныеСертификаты(Истина);
		
		Если ЭтоПоследнийЧекСписка Тогда
			
			Если ККМПоддерживаетПроверкуКодовМаркировки
				И ЗначениеЗаполнено(ИдентификаторТекущейСессииПроверкиМарок)
				И ВозможноЗакрытьСессиюРегистрацииМарок(Истина) Тогда
				ЗакрытьСессиюРегистрацииМарок();
			КонецЕсли; 
			
			ВыполнитьДействияПослеПробитияПоследнегоЧека(НужноЗаморозитьФорму);
			
		Иначе
			
			ПроверитьЗарегистрироватьНовыйЧек(Истина);
			
		КонецЕсли;
		
		СформироватьЗаголовок(НСтр("ru='Продажа'"));
		
		Если ЗначениеЗаполнено(ИдентификаторЗамераПробитияЧека) Тогда
			 ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамераПробитияЧека, Ложь);
		КонецЕсли;
		
	Иначе
		
		ОтразитьОстаткиНаличныхДенежныхСредствНаФорме(Объект.Организация, Объект.КассаККМ, Истина);
		
		ТипыПакетнойОперацииВОчередиЧеков = МенеджерОборудованияРМККлиент.ТипыПакетнойОперацииВОчередиЧеков();
		Если ВыдаватьНаличныеНаКассе И ЕстьСвойство(РезультатВыполнения, "ТипПакетнойОперации")
			И РезультатВыполнения.ТипПакетнойОперации =
				ТипыПакетнойОперацииВОчередиЧеков.Получить("ПродажаСВыдачейНаличных") Тогда
			
			Если ЕстьСвойство(РезультатВыполнения, "РезультатПакетнойОперации") Тогда
				
				РезультатПакетнойОперации = РезультатВыполнения.РезультатПакетнойОперации;
				
				ОформитьДокументВозвратаПослеОшибкиВыдачиНаличных =
					ЕстьСвойство(РезультатПакетнойОперации, "РезультатФискализацииЧекаВозврата")
					И ЗначениеЗаполнено(РезультатПакетнойОперации.РезультатФискализацииЧекаВозврата)
					И ЕстьСвойство(РезультатПакетнойОперации, "ПараметрыПродажаСВыдачейНаличных")
					И ЗначениеЗаполнено(РезультатПакетнойОперации.ПараметрыПродажаСВыдачейНаличных)
					И ЕстьСвойство(РезультатПакетнойОперации.ПараметрыПродажаСВыдачейНаличных, "ДокументОснованиеВыдачи")
					И ЕстьСвойство(РезультатВыполнения, "ФискализированныйЧек") 
					И ЕстьСвойство(РезультатПакетнойОперации.РезультатФискализацииЧекаВозврата, "НомерЧекаККТ")
					И ЕстьСвойство(РезультатПакетнойОперации.РезультатФискализацииЧекаВозврата, "НомерСменыККТ")
					И ЕстьСвойство(РезультатПакетнойОперации, "РезультатВыполненияЭквайринговойОперации");
					
				Если ОформитьДокументВозвратаПослеОшибкиВыдачиНаличных Тогда
					
						ПараметрыЭквайринговойОперации = Новый Структура();
						ПараметрыЭквайринговойОперации.Вставить("ИдентификаторУстройства");
						ПараметрыЭквайринговойОперации.Вставить("НомерЧекаЭТ");
						ПараметрыЭквайринговойОперации.Вставить("СсылочныйНомер");
						ПараметрыЭквайринговойОперации.Вставить("НомерКарты");
						ЗаполнитьЗначенияСвойств(ПараметрыЭквайринговойОперации,
							РезультатПакетнойОперации.РезультатВыполненияЭквайринговойОперации);
					
						НомерЧекаККМ = Число(РезультатПакетнойОперации.РезультатФискализацииЧекаВозврата.НомерЧекаККТ);
						НомерСменыККМ = Число(РезультатПакетнойОперации.РезультатФискализацииЧекаВозврата.НомерСменыККТ);
						
						СсылкаНаЧекВыдачиНаличных = РезультатПакетнойОперации.ПараметрыПродажаСВыдачейНаличных.ДокументОснованиеВыдачи;
						ЗаменитьЧекВыдачиНаличныхНаЧекВозвратаНаКлиенте(СсылкаНаЧекВыдачиНаличных,
							РезультатВыполнения.ФискализированныйЧек, НомерЧекаККМ, НомерСменыККМ, ПараметрыЭквайринговойОперации);
						
				КонецЕсли;
				
				ТекстОшибки = "";
				Если ТекстОшибки = "" И ЕстьСвойство(РезультатПакетнойОперации, "РезультатФискализацииЧекаВыдачи") Тогда
					РезультатВложеннойОперации = РезультатПакетнойОперации.РезультатФискализацииЧекаВыдачи;
					Если ЕстьСвойство(РезультатВложеннойОперации, "ОписаниеОшибки")
						И ЗначениеЗаполнено(РезультатВложеннойОперации.ОписаниеОшибки) Тогда
							ТекстОшибки = РезультатВложеннойОперации.ОписаниеОшибки;
					КонецЕсли;
				КонецЕсли;
				
				Если ТекстОшибки = "" И ЕстьСвойство(РезультатПакетнойОперации, "РезультатФискализацииЧекаВозврата") Тогда
					РезультатВложеннойОперации = РезультатПакетнойОперации.РезультатФискализацииЧекаВозврата;
					Если ЕстьСвойство(РезультатВложеннойОперации, "ОписаниеОшибки")
						И ЗначениеЗаполнено(РезультатВложеннойОперации.ОписаниеОшибки) Тогда
							ТекстОшибки = РезультатВложеннойОперации.ОписаниеОшибки;
					КонецЕсли;
				КонецЕсли;
				
				Если ТекстОшибки = "" И ЕстьСвойство(РезультатПакетнойОперации, "РезультатФискализацииЧека") Тогда
					РезультатВложеннойОперации = РезультатПакетнойОперации.РезультатФискализацииЧека;
					Если ЕстьСвойство(РезультатВложеннойОперации, "ОписаниеОшибки")
						И ЗначениеЗаполнено(РезультатВложеннойОперации.ОписаниеОшибки) Тогда
							ТекстОшибки = РезультатВложеннойОперации.ОписаниеОшибки;
					КонецЕсли;
				КонецЕсли;
				
				Если ТекстОшибки = "" И ЕстьСвойство(РезультатПакетнойОперации, "РезультатВыполненияЭквайринговойОперации") Тогда
					РезультатВложеннойОперации = РезультатПакетнойОперации.РезультатВыполненияЭквайринговойОперации;
					Если ЕстьСвойство(РезультатВложеннойОперации, "ОписаниеОшибки")
						И ЗначениеЗаполнено(РезультатВложеннойОперации.ОписаниеОшибки) Тогда
							ТекстОшибки = РезультатВложеннойОперации.ОписаниеОшибки;
					КонецЕсли;
				КонецЕсли;
				
				Если ТекстОшибки = "" И ЕстьСвойство(РезультатПакетнойОперации, "РезультатАварийнойОтменыОперации") Тогда
					РезультатВложеннойОперации = РезультатПакетнойОперации.РезультатАварийнойОтменыОперации;
					Если ЕстьСвойство(РезультатВложеннойОперации, "ОписаниеОшибки")
						И ЗначениеЗаполнено(РезультатВложеннойОперации.ОписаниеОшибки) Тогда
							ТекстОшибки = РезультатВложеннойОперации.ОписаниеОшибки;
					КонецЕсли;
				КонецЕсли;
				
				Если ТекстОшибки = "" Тогда
					ТекстОшибки = РезультатВыполнения.ОписаниеОшибки;
				КонецЕсли;
				
				ТекстЗаголовка = НСтр("ru = 'Ошибка пакетной фискализации чека'");
				ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
				
			КонецЕсли;
			
		ИначеЕсли ПечататьКороткийСлипЧек И ЕстьСвойство(РезультатВыполнения, "ТипПакетнойОперации")
			И РезультатВыполнения.ТипПакетнойОперации = ТипыПакетнойОперацииВОчередиЧеков.Получить("ФискализацияЧекаСОплатойКартой") Тогда
			
			ТекстЗаголовка = НСтр("ru = 'Ошибка пакетной фискализации чека'");
			ТекстОшибки = РезультатВыполнения.ОписаниеОшибки;
			
			ПараметрыОшибки = Новый Структура("ОтобразитьКнопкиДействияСЧеком", Истина);
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки, ПараметрыОшибки);
			УстановитьВидимостьЭлементаФормы(Элементы.ПовторитьОперациюПакетнойФискализации, Истина);

		Иначе
			
			ТекстЗаголовка = НСтр("ru = 'При печати чека произошла ошибка.'");
			ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
			
			Если (СуммаОплаченоСБП > 0 Или СуммаОплаченоЮКасса > 0) Тогда
				Объект.Оплачивается = Истина;
			КонецЕсли;
			
			ОбработатьОтменуОплаты(ТекстЗаголовка, ТекстСообщения);
			
			Если ЗначениеЗаполнено(ИдентификаторЗамераПробитияЧека) Тогда
				ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамераПробитияЧека);
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЕсли;
	
	Если ЭтоЧекКоррекции И НЕ ЭтоПоследнийЧекСписка Тогда
		ПробитьЧекКоррекцииПродажи();
	ИначеЕсли ЭтоЗаменаТоваров И НЕ ЭтоПоследнийЧекСписка Тогда
		ПробитьЧекЗаменыТоваровПродажи();
	КонецЕсли;
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
		
		Если ПлатежнаяСистема_ОжидаемоеКоличествоЧеков > 0 Тогда
			
			ПлатежнаяСистема_ОжидаемоеКоличествоЧеков = ПлатежнаяСистема_ОжидаемоеКоличествоЧеков  - 1;
			
			Если ПлатежнаяСистема_ОжидаемоеКоличествоЧеков = 0 Тогда
				СанкционироватьЗакрытиеОперацииПлатежнойСистемой(Ложь)
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОжидаемоеКоличествоЧеков > 0 Тогда
		
			ОтобранныеСтроки = Объект.Товары.НайтиСтроки(ВыбраннаяОрганизацияИСНО());
			Для Каждого СтрокаКорзины Из ОтобранныеСтроки Цикл
				СтрокаКорзины.Оплачена = Истина;
			КонецЦикла;
		
			ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
			ПараметрыПересчета.ПоКомандеПереключитьЧек = "НаСледующий";
			РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
		
			ПродолжитьОплачиваемыйЧекQRКодом(Истина);
			
			ПробитоЧеков = ПробитыеЧеки.Количество();
			Если ОплатаБезДеленияПоЧекам И ПробитоЧеков > 0 Тогда
				ОбработатьПробитиеЧекаНаКлиенте(Команды.ПробитьЧек);
				Если НЕ ПечататьБумажныйЧек Тогда
					ОтправитьЧек(Команды.ОтправитьЧек);
				КонецЕсли;
				УстановитьДоступностьЭлементаФормы(Элементы.ВернутьсяВРежимПодбораТовара, ПробитыеЧеки.Количество() = 0);
				Если НужноЗаморозитьФорму Тогда
					ЗаморозитьФормуПослеПробитияЧека();
				КонецЕсли;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	УстановитьДоступностьЭлементаФормы(Элементы.ВернутьсяВРежимПодбораТовара, ПробитыеЧеки.Количество() = 0);
	Если НужноЗаморозитьФорму Тогда
		ЗаморозитьФормуПослеПробитияЧека();
	КонецЕсли;
	
	ОплатаБезДеленияПоЧекам = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПробитьЧекЗавершение(ВходящиеДанные)
	
	Если НЕ ЕстьСвойство(ВходящиеДанные, "ЧекККМСсылка") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияРМКПереопределяемый.ПробитьЧекЗавершение(ВходящиеДанные, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаНаличнымиНаКлиенте(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеНал = Истина;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ОбластьОперативногоУправленияЧеком
				И Элементы.ГруппаОплатаНал.Видимость И Не СенсорныйЭкран Тогда
		ТекущийЭлемент = Элементы.СуммаОплаченоНал;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораПодарочногоСертификата()
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаДополнительныйСписокТоваров);
	НастроитьВидимостьЭлементовГруппыПоискаТовара(Истина);
	Адрес = "";
	ПолучитьАдресТаблицыПодарочныхСертификатов(Адрес);
	ЗаголовокСтраницы = НСтр("ru = 'Выберите подарочный сертификат'");
	РежимВыбораПодарочногоСертификата = Истина;
	РежимВыбораПодарка = Ложь;
	ИзменитьСостояниеЗаголовкаСтраницыПоискаТовара(ЗаголовокСтраницы, Истина);
	ОткрытьКаталогКлиент();
	ЗаполнитьДанныеТаблицыДляВыбораНоменклатуры(Адрес);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьАдресТаблицыПодарочныхСертификатов(Адрес)
	
	ОбщегоНазначенияРМКПереопределяемый.ПолучитьАдресТаблицыПодарочныхСертификатов(Адрес);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаНаКлиенте(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеПредоплата = Истина;
	
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	Объект.ОперацияСДенежнымиСредствами = Элементы.ГруппаОплатаПредоплата.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаВРассрочкуНаКлиенте(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеВРассрочку = Истина;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьСертификатомНСПКНаКлиенте()
	
	Если ЕстьВозможностьОплатыСертификатомНСПК() Тогда
		ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
		ПараметрыПересчета.ПоКомандеОплатитьСертификатомНСПК = Истина;
		РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
		
		ЭтоВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
		НастроитьЭлементыВРежимеПроверкаСертификатаНСПК(Истина, ЭтоВозврат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачетАвансаНаКлиенте(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеЗачетАванса = Истина;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура БезналНаКлиенте(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеБезнал = Истина;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВведенныеОплаты(ВсеСуммыПересчитаны = Ложь)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если СуммаОплаченоСертификатамиНСПК > 0 Тогда
		ОплатитьСертификатомНСПКНаКлиенте();
		Возврат;
	КонецЕсли;
	
	Если СуммаОплаченоБонусами > 0 Тогда
		ОтменитьОплатуБонусами();
	КонецЕсли;
	
	Если СуммаОплаченоНал > 0 Или Элементы.ГруппаОплатаНал.Видимость Тогда
		ОплатаНаличнымиНаКлиенте();
	КонецЕсли;
	
	Если СуммаОплаченоВРассрочку > 0 И Не ПриемАвансаПоЗаказу И Не ЭтоВнесениеПредоплатыПоЗаказу Тогда
		ОтменитьОплатуВРассрочку();
	КонецЕсли;
	
	Если СуммаОплаченоБезнал > 0 Тогда
		БезналНаКлиенте();
	КонецЕсли;
	
	Если СуммаНаличныхКВыдаче > 0 Тогда
		ПодготовитьДанныеВыдачиНаличныхКлиент();
	КонецЕсли;
	
	Если СуммаОплаченоБН > 0 Или Элементы.ГруппаОплатаКартой.Видимость Тогда
		ОплатаКартойНаКлиенте();
		ОчиститьТаблицуПлатежныхКарт();
	КонецЕсли;
	
	Если СуммаОплаченоКредитом > 0 Тогда
		ОплатаКредитомНаКлиенте();
	КонецЕсли;
	
	УдалитьВсеПодарочныеСертификаты();
	ВсеСуммыПересчитаны = Истина;
	
	УстановитьДоступностьОплатыПлатежнымиСистемами(Элементы.ГруппаВидОплатыСБП, Элементы.ГруппаВидОплатыЮКасса, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОтменуОплатыКлиент()
	
	ЭтоВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
	
	Если ТипОплаты = "НСПК" Тогда
		СледующаяОперация = "ЗавершитьОтменуОплаты";
		ВернутьЭлектронныйСертификат(СледующаяОперация);
	ИначеЕсли ТипОплаты = "Карта" Тогда
		Если Не ЭтоВозврат Тогда
			Если ОтложенныйЧекПолностьюОплачен Тогда
				ДанныеТерминалов = ОбщегоНазначенияРМККлиент.ДанныеОплатКартойПоЧеку(ЭтотОбъект);
			Иначе
				ДанныеТерминалов = ОбщегоНазначенияРМККлиент.ДанныеТекущихЭквайринговыхТерминалов(ЭтотОбъект);
			КонецЕсли;
			
			Если ДанныеТерминалов.Количество() = 0 Тогда
				ТекстЗаголовка = НСтр("ru = 'При выполнении операции возникла ошибка'");
				ТекстСообщения = НСтр("ru = 'Не удалось определить эквайринговый терминал.
				|Оплата по карте не была произведена.'");
				ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
				Возврат;
			КонецЕсли;
			
			Для Каждого ОплатаТерминалом Из ДанныеТерминалов Цикл
				ВыполнитьСторноОплатыПоКарте(ДанныеТерминалов[0]);
			КонецЦикла;
			
		КонецЕсли;
	ИначеЕсли ТипОплаты = "СБП" Тогда
		ТекущаяОперация = "ВозвратОплаты";
		ОтменаПлатежаСБП = Истина;
		ПлатежнаяСистема_НоваяЗаявка.ИдентификаторОплаты = ПлатежнаяСистема_НоваяЗаявка.СсылочныйНомер;
		ПлатежнаяСистема_НоваяЗаявка.ВидОперацииПродажа = Ложь;
		Если ПлатежнаяСистема_НоваяЗаявка.Оплачивается Тогда
			
			ПодключитьОбработчикОжидания("ОпределитьСтатусВозврата", 0.1, Истина);
			
		ИначеЕсли ЗначениеЗаполнено(ПлатежнаяСистема_НоваяЗаявка.ДокументОплаты)
			И Не ЗначениеЗаполнено(ПлатежнаяСистема_НоваяЗаявка.СсылочныйНомер) Тогда
			
			ПодключитьОбработчикОжидания("ОпределитьСтатусОплаты", 0.1, Истина);
			
		Иначе
			
			ПодключитьОбработчикОжидания("ВыполнитьВозвратПлатежнойСистемой", 0.1, Истина);
			
		КонецЕсли;
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаПлатежнаяСистема);
	Иначе
		Если ОткрытаСтраницаИнфоОшибка() Тогда
			ЗакрытьСтраницуИнфоОшибкаНаКлиенте();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтменуОплаты(ТекстЗаголовка, ТекстСообщения, ОшибкаФормированияИсходныхДанных = Ложь)
	
	Если Объект.Оплата.Количество() > 0 И ОжидаемоеКоличествоЧеков > 1 Тогда
		ОтобранныеСтроки = Объект.Товары.НайтиСтроки(ВыбраннаяОрганизацияИСНО());
		Для Каждого СтрокаКорзины Из ОтобранныеСтроки Цикл
			СтрокаКорзины.Оплачена = Истина;
		КонецЦикла;
	КонецЕсли;
	
	ОтложенныйЧекПолностьюОплачен = (Объект.Оплата.Количество() > 0);
	ПараметрыОшибки = Новый Структура;
	ПараметрыОшибки.Вставить("НеобходимоСторно", Истина); 
	ПараметрыОшибки.Вставить("ОшибкаФормированияИсходныхДанных", ОшибкаФормированияИсходныхДанных);
	
	Если ТранзакцияПоКартеЗавершена И ТипОплаты = "Карта" Тогда
		
		ЭквайринговыйТерминалПродажи = ЭквайринговыйТерминалВыполненияОперации;
		ОтборПоиска = Новый Структура();
		ОтборПоиска.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминалПродажи);
		Терминалы = ТаблицаТерминалы.НайтиСтроки(ОтборПоиска);
		
		Если Терминалы.Количество()=0 ИЛИ Терминалы[0].ИспользоватьБезПодключенияОборудования
			И НЕ ЗначениеЗаполнено(Терминалы[0].ПодключаемоеОборудование) Тогда
			ОткрытьСтраницуОтменаОплатыПоКарте(ТекстСообщения);
		Иначе
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения, ПараметрыОшибки);
		КонецЕсли;
		
		Элементы.ВыполнитьОтменуОплаты.Заголовок = НСтр("ru = 'Отменить платеж'");
	Иначе
		Если ТипОплаты = "НСПК" ИЛИ ТипОплаты = "СБП" ИЛИ ТипОплаты = "ЮКасса" Тогда
			ТекущаяОперация = "ВозвратОплаты";
			Элементы.ВыполнитьОтменуОплаты.Заголовок = НСтр("ru = 'Вернуть платеж'");
			Если ПлатежнаяСистема_ОжидаемоеКоличествоЧеков > 0 Тогда
			
				ОтключитьОбработчикОжидания("ОпределитьСтатусВозврата");
				ОтключитьОбработчикОжидания("ОпределитьСтатусОплаты");
				ОтключитьОбработчикОжидания("ПолучитьИдентификаторОплаты");
				ОтключитьОбработчикОжидания("ВыполнитьВозвратПлатежнойСистемой");
				
				ТекущаяОперация = "";
				ПлатежнаяСистема_СанкционированноеЗакрытие = Ложь;
				ПлатежнаяСистема_ОжидаемоеКоличествоЧеков = 0;
				
				Элементы.ГруппаСписокОрганизацийПоКорзине.Доступность = Истина;
			
			КонецЕсли;
		Иначе
			Элементы.ВыполнитьОтменуОплаты.Заголовок = НСтр("ru = 'Отменить платеж'");
		КонецЕсли;
		Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
				= Элементы.ГруппаДанныеПокупателя Тогда
			ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ОбластьОперативногоУправленияЧеком);
		КонецЕсли;
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения, ПараметрыОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СменитьКассираСервер()

	Объект.Кассир = Неопределено;
	КодКассира = НСтр("ru = ''");
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаВводКассира);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	ТекущийЭлемент = Элементы.КодКассира;

КонецПроцедуры

&НаКлиенте
Процедура ОплатаКредитомНаКлиенте(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеКредит = Истина;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
	Если Элементы.ГруппаОплатаКредитом.Видимость Тогда
		ОбщегоНазначенияРМККлиентПереопределяемый.ОткрытьФормуОплатыКредитом(ЭтотОбъект);
	Иначе
		ПараметрыОплатыКредитом = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплатуКредитомЗавершение(Результат, Параметры) Экспорт
	
	Если Элементы.ГруппаОплатаКредитом.Видимость И Результат = Неопределено Тогда
		ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
		ПараметрыПересчета.ПоКомандеКредит = Истина;
		РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
		ПараметрыОплатыКредитом = Неопределено;
		Возврат;
	КонецЕсли;
	
	ПараметрыОплатыКредитом = Результат;
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	Если НЕ Результат = Неопределено И Результат.Свойство("Сумма") Тогда
		СуммаОплаченоКредитом = Результат.Сумма;
	КонецЕсли;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборУправляемыхСкидок(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПримененаСкидкаНаЧек = Ложь;
	ИдентификаторТекущейСтроки = "";
	ТекущаяСтрокаТоваров = Неопределено;
	Если ДополнительныеПараметры = Неопределено Тогда
		ТекущаяСтрокаТоваров = Элементы.Товары.ТекущиеДанные;
	ИначеЕсли ДополнительныеПараметры.Свойство("ОбластьДействия") И ДополнительныеПараметры.ОбластьДействия = "На строку" Тогда
		ТекущаяСтрокаТоваров = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	Если Не ТекущаяСтрокаТоваров = Неопределено Тогда
		ИдентификаторТекущейСтроки = ТекущаяСтрокаТоваров.ИдентификаторСтроки;
	КонецЕсли; 
	
	МассивИдентификаторовДобавленныхСтрок = Новый Массив();
	РучнаяСкидкаПрименена = Ложь;
	Для Каждого ВыбраннаяСкидка Из Результат Цикл
		Если ВыбраннаяСкидка.ТипСкидки = "Ручная" И Не РучнаяСкидкаПрименена Тогда
			Позиции = Объект.Товары;
			ЗначениеВыбраннойРучнойСкидки = ВыбраннаяСкидка.ЗначениеСкидки;
			Если ВыбраннаяСкидка.ОбластьДействия = "На строку" Тогда
				Если ТекущаяСтрокаТоваров = Неопределено Тогда
					ТекущаяСтрокаТоваров = Элементы.Товары.ТекущиеДанные;
				КонецЕсли;
				
				Если ЭтоСоставляющаяНабора(ТекущаяСтрокаТоваров) Тогда
					
					СоставНабора = СоставНабораПоЭлементуНабора(ТекущаяСтрокаТоваров, Объект.Товары);
					
					Если СоставНабора.Количество() = Объект.Товары.Количество() Тогда
						Позиции = Объект.Товары;
					Иначе
						Позиции = СоставНабора;
					КонецЕсли;
					РассчитатьРучнуюСкидкуПроцентомНаПозиции(Позиции, ЗначениеВыбраннойРучнойСкидки);
				Иначе
					ТекущийТоварСкидка = ЗначениеВыбраннойРучнойСкидки;
					ТекущаяСтрокаТоваров.РассчитанаСкидка = Ложь;
					РучнаяСкидкаПроцентомПоСтроке(ТекущаяСтрокаТоваров);
				КонецЕсли;
			Иначе
				РассчитатьРучнуюСкидкуПроцентомНаПозиции(Позиции, ЗначениеВыбраннойРучнойСкидки);
			КонецЕсли;
			РучнаяСкидкаПрименена = Истина;
			УстановитьДоступностьЭлементаФормы(Элементы.ОтменаРасчетаСкидок, Истина);
		Иначе
			СтруктураОтбора = Новый Структура("СкидкаНаценка", ВыбраннаяСкидка.СкидкаНаценка);
			Если ВыбраннаяСкидка.ОбластьДействия = "На строку" Тогда
				СтруктураОтбора.Вставить("ИдентификаторСтроки", ИдентификаторТекущейСтроки);
			Иначе
				СтруктураОтбора.Вставить("ИдентификаторСтроки", "");
			КонецЕсли;
			СуществующиеСтроки = ТаблицаВыбранныхУправляемыхСкидок.НайтиСтроки(СтруктураОтбора);
			Если СуществующиеСтроки.Количество() = 0 Тогда
				НоваяУправляемаяСкидка = ТаблицаВыбранныхУправляемыхСкидок.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяУправляемаяСкидка, ВыбраннаяСкидка);
				Если ВыбраннаяСкидка.ОбластьДействия = "На строку" Тогда
					НоваяУправляемаяСкидка.ИдентификаторСтроки = ИдентификаторТекущейСтроки;
				КонецЕсли;
				МассивИдентификаторовДобавленныхСтрок.Добавить(НоваяУправляемаяСкидка.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ДобавитьРеквизитыНовыхУправляемыхСкидок(МассивИдентификаторовДобавленныхСтрок);
	ТоварыПриАктивизацииСтроки(Элементы.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитыНовыхУправляемыхСкидок(МассивИдентификаторовСтрок)
	Для Каждого Идентификатор Из МассивИдентификаторовСтрок Цикл
		СтрокаСкидки = ТаблицаВыбранныхУправляемыхСкидок.НайтиПоИдентификатору(Идентификатор);
		Если Не СтрокаСкидки = Неопределено Тогда
			ДобавитьРеквизитыУправляемойСкидки(СтрокаСкидки.СкидкаНаценка, СтрокаСкидки.ИдентификаторСтроки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеПромокодаНаКлиенте()
	
	ОчиститьДанныеПромокодов();
	ПромокодДоступен = Истина; // Пока не проверили промокод на возможность применения, не следует его подсвечивать
	
	АктивироватьГруппуВводаПромокода();
	ЭтаФорма.ТекущийЭлемент = Элементы.ВведенныйПромокод;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьКПечатиЧека(АвтономнаяККТ = Ложь)
	
	Если АвтономнаяККТ Или ОткрытаСтраницаОтправкиЧека() Или СразуОтправлятьНаПечатьЧека() Тогда
		НачатьПечатьЧека();
	Иначе
		ПерейтиНаСтраницуОтправкиЭлектронногоЧека();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОплатаКартойНаКлиенте(РезультатВыполнения = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеБН = Истина;
	ПараметрыПересчета.ПриИзмененииБНОплаты = Истина;
	Возврат РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецФункции

#КонецОбласти

#Область ПробитиеЧека

#Область ОтправкаПечатьПробитогоЧека

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораЧекаПриПечатиПробитогоЧека(РезультатВыполнения, Параметры) Экспорт
	
	Если ЕстьСвойство(РезультатВыполнения, "ЧекККМ") И ЗначениеЗаполнено(РезультатВыполнения.ЧекККМ) Тогда
		
		ЧекККМ = РезультатВыполнения.ЧекККМ;
		
		Если ЕстьСвойство(РезультатВыполнения, "РежимПечатиЧека")
			И ЗначениеЗаполнено(РезультатВыполнения.РежимПечатиЧека) Тогда
			
			РежимПечатиЧека = РезультатВыполнения.РежимПечатиЧека;
			
			Если РежимПечатиЧека = "ПечатьПробитогоЧека" Тогда
				НапечататьФискальныйЧекБезФискализации(ЧекККМ);
			ИначеЕсли РежимПечатиЧека = "ПечатьТоварногоЧека" Тогда
				НапечататьТоварныйЧекПоФискальномуЧеку(ЧекККМ);
			Иначе
				ПоказатьПредупреждение(, НСтр("ru = 'Нештатное завершение попытки распечатать чек'"));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПовторнуюПечатьФискальногоЧека(РезультатВыполнения, ПараметрДействия) Экспорт
	
	ЕстьОшибка = Ложь;
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И НЕ РезультатВыполнения.Результат Тогда
		
		ЕстьОшибка = Истина;
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Произошла ошибка при попытке повторной печати фискального чека.
			|Причина: %1'"), РезультатВыполнения.ОписаниеОшибки);
		ПоказатьПредупреждение(, ТекстСообщения);
		
	КонецЕсли;
	Если ТипЗнч(ПараметрДействия) = Тип("Структура") И ПараметрДействия.Свойство("ПечатьПослеПробития") Тогда
		Если Не ЕстьОшибка Тогда
			ПараметрДействия.ИндексЧека = ПараметрДействия.ИндексЧека + 1;
			ВыполнитьПечатьКопииЧекаПоПорядку(ПараметрДействия);
		ИначеЕсли Не ПараметрДействия.НужноЗаморозитьФорму Тогда
			ПараметрыПустойСтраницы = Неопределено;
			ПоказатьПустуюСтраницуПослеПробитияЧека();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеЧекаДляВыведенияНаПринтерЧеков(ЧекККМ, ТекущаяНастройкаРМК,
	ОсобенностиУчетаВозвращаемойМаркируемойПродукции, ВариантЗаполненияМестаРасчетов, ВариантЗаполненияКассира)
	
	ОбщиеПараметры = Новый Структура();
	
	Если ЗначениеЗаполнено(ЧекККМ) Тогда
		
		ПечататьБумажныйЧек = Истина;
		СворачиватьСтрокиПриПечатиЧека = Истина;
		НеПечататьКодВозвратаСБП = Ложь;
		НеПечататьКодВозвратаНСПК=Ложь;
		
		Если ЗначениеЗаполнено(ТекущаяНастройкаРМК) Тогда
			
			НастройкиРМК = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяНастройкаРМК,
				"СворачиватьСтрокиПриПечатиЧека, НеПечататьКодВозвратаСБП, НеПечататьКодВозвратаНСПК");
			СворачиватьСтрокиПриПечатиЧека = НастройкиРМК.СворачиватьСтрокиПриПечатиЧека;
			НеПечататьКодВозвратаСБП = НастройкиРМК.НеПечататьКодВозвратаСБП;
			НеПечататьКодВозвратаНСПК = НастройкиРМК.НеПечататьКодВозвратаНСПК;
			ПечататьБумажныйЧек = ПроверитьВозможностьПечатиБумажногоЧека(ТекущаяНастройкаРМК);
			
		КонецЕсли;
		
		ОрганизацияПродажи = ЧекККМ.Организация;
		
		СистемаНалогообложения = СистемаНалогообложенияЧека(ЧекККМ);
		ЕстьПродукцияЕГАИС = ПродажиРМК.ЕстьПродукцияЕГАИС(ЧекККМ);
			
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ЕстьПродукцияЕГАИС", ЕстьПродукцияЕГАИС);
		ДополнительныеПараметры.Вставить("ПечататьБумажныйЧек", ПечататьБумажныйЧек);
		ДополнительныеПараметры.Вставить("СистемаНалогообложения", СистемаНалогообложения);
		ДополнительныеПараметры.Вставить("СворачиватьСтрокиПриПечатиЧека", СворачиватьСтрокиПриПечатиЧека);
		ДополнительныеПараметры.Вставить("ОсобенностиУчетаВозвращаемойМаркируемойПродукции",
			ОсобенностиУчетаВозвращаемойМаркируемойПродукции);
		ДополнительныеПараметры.Вставить("ВариантЗаполненияМестаРасчетов", ВариантЗаполненияМестаРасчетов);
		ДополнительныеПараметры.Вставить("ВариантЗаполненияКассира", ВариантЗаполненияКассира); 
		ДополнительныеПараметры.Вставить("РабочееМестоКассира", Истина);
		ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
		ДополнительныеПараметры.Вставить("ККМПоддерживаетПроверкуКодовМаркировки", Ложь);
		
		ОбщиеПараметры = ОбщегоНазначенияРМК.ДанныеДляПробитияЧека(ЧекККМ, ДополнительныеПараметры);
			
		Если ЕстьСвойство(ОбщиеПараметры, "ШаблонЧека") И НЕ ЗначениеЗаполнено(ОбщиеПараметры.ШаблонЧека) Тогда
			ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьШаблонЧека(ЧекККМ, ОбщиеПараметры, ТекущаяНастройкаРМК);
		КонецЕсли;
		
		ЭтоТипПлатежнойСистемыККТСБП  = Ложь;
		ЭтоТипПлатежнойСистемыККТНСПК = Ложь;
		Если ЕстьСвойство(ОбщиеПараметры, "ТипПлатежнойСистемы") Тогда
			ЭтоТипПлатежнойСистемыККТСБП  =
				ОбщиеПараметры.ТипПлатежнойСистемы = Перечисления.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей;
			ЭтоТипПлатежнойСистемыККТНСПК =
				ОбщиеПараметры.ТипПлатежнойСистемы = Перечисления.ТипыПлатежнойСистемыККТ.СертификатНСПК;
		КонецЕсли;
		
		Если ОбщиеПараметры.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств 
			И (ЭтоТипПлатежнойСистемыККТСБП ИЛИ ЭтоТипПлатежнойСистемыККТНСПК) И ЕстьСвойство(ОбщиеПараметры, "QRКод") Тогда
			
			ЕстьШаблонЧекаПродажи = ЕстьСвойство(ОбщиеПараметры, "ШаблонЧека") И ЗначениеЗаполнено(ОбщиеПараметры.ШаблонЧека);
			НеПечататьКодВозвратаСБП = ЭтоТипПлатежнойСистемыККТСБП И НеПечататьКодВозвратаСБП;
			НеПечататьКодВозвратаНСПК = ЭтоТипПлатежнойСистемыККТНСПК И НеПечататьКодВозвратаНСПК;
			Если ЕстьШаблонЧекаПродажи ИЛИ НеПечататьКодВозвратаСБП ИЛИ НеПечататьКодВозвратаНСПК Тогда
				ОбщиеПараметры.QRКод.ЗначениеКода = "";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбщиеПараметры;
	
КонецФункции

&НаКлиенте
Процедура НапечататьФискальныйЧекБезФискализации(ЧекККМ, ДополнительныеПараметры = Неопределено)
	
	ИдентификаторУстройстваФискальногоРегистратора = ПодключаемоеОборудование;
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗавершитьПовторнуюПечатьФискальногоЧека", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(ПринтерЧеков) И ЗначениеЗаполнено(ЧекККМ) Тогда
		
		ПараметрыОперации = ДанныеЧекаДляВыведенияНаПринтерЧеков(ЧекККМ, ТекущаяНастройкаРМК,
			ОсобенностиУчетаВозвращаемойМаркируемойПродукции, ВариантЗаполненияМестаРасчетов, ВариантЗаполненияКассира);
			
		ТекстЧека = МенеджерОборудованияРМККлиент.ТекстНефискальногоЧека(ПараметрыОперации);
		ПараметрыОперации = МенеджерОборудованияРМККлиент.ПараметрыПечатиТекста(ТекстЧека);
		МенеджерОборудованияРМККлиент.НачатьПечатьТекста(ОповещениеПриЗавершении, УникальныйИдентификатор, ПринтерЧеков, ПараметрыОперации);
		
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторУстройстваФискальногоРегистратора)
		И ЗначениеЗаполнено(ЧекККМ) Тогда
		
		НомерЧека = ОбщегоНазначенияРМКВызовСервера.ЗначениеРеквизитаОбъекта(ЧекККМ, "НомерЧекаККМ");
		ПараметрыОперации = МенеджерОборудованияРМККлиент.ПараметрыПечатиКопииЧека();
		ПараметрыОперации.НомерЧека = НомерЧека;
		ПараметрыОперации.Аппаратно = Ложь;
		ПараметрыОперации.Вставить("ДокументСсылка", ЧекККМ);
		
		МенеджерОборудованияРМККлиент.НачатьПечатьКопииЧека(ОповещениеПриЗавершении,
			УникальныйИдентификатор, ИдентификаторУстройстваФискальногоРегистратора, ПараметрыОперации);
			
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОткрытьСтраницуИнфоОшибка(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВозможностьПечатиБумажногоЧека(ТекущаяНастройкаРМК)
	
	Результат = Истина;
	
	Если ЗначениеЗаполнено(ТекущаяНастройкаРМК) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	НастройкиРабочегоМестаКассира.ПечататьБумажныйЧек КАК ПечататьБумажныйЧек
		|ИЗ
		|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
		|ГДЕ
		|	НастройкиРабочегоМестаКассира.Ссылка = &ТекущаяНастройкаРМК");
		
		Запрос.УстановитьПараметр("ТекущаяНастройкаРМК", ТекущаяНастройкаРМК);
		
		ЗначениеНастройки = Запрос.Выполнить().Выбрать();
		
		Если ЗначениеНастройки.Следующий() Тогда
			Результат = ЗначениеНастройки.ПечататьБумажныйЧек;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ФормированиеЧековПоНесколькимСНО

&НаКлиенте
Функция РазличныеСНОВСпискеПокупок()
	
	Корзина = Объект.Товары;
	СНОТоваровВКорзине = Новый Массив;
	СписокОрганизаций = Новый СписокЗначений;
	ПерваяСНОКПробитию = Новый Структура("Организация, СистемаНалогообложения");
	
	Для Каждого СтрокаКорзины Из Корзина Цикл
		
		Если СписокОрганизаций.НайтиПоЗначению(СтрокаКорзины.Организация) = Неопределено Тогда
			СписокОрганизаций.Добавить(СтрокаКорзины.Организация);
		КонецЕсли;
		
	КонецЦикла;
	
	СписокОрганизаций.СортироватьПоЗначению();
	
	Для Каждого ОрганизацияИзСписка Из СписокОрганизаций Цикл
		
		СписокСНО = Новый СписокЗначений;
		
		ОтборПоОрганизации = Новый Структура("Организация", ОрганизацияИзСписка.Значение);
		СтрокиПоОрганизации = Корзина.НайтиСтроки(ОтборПоОрганизации);
		
		Для Каждого СтрокаКорзины Из СтрокиПоОрганизации Цикл
			
			Если СписокСНО.НайтиПоЗначению(СтрокаКорзины.СистемаНалогообложения) = Неопределено Тогда
				СписокСНО.Добавить(СтрокаКорзины.СистемаНалогообложения);
			КонецЕсли;
			
			//Первым должен пробиваться чек с маркировкой
			Если ЗначениеЗаполнено(СтрокаКорзины.КодМаркировки) 
				И НЕ ЗначениеЗаполнено(ПерваяСНОКПробитию.Организация)
				И НЕ ЗначениеЗаполнено(ПерваяСНОКПробитию.СистемаНалогообложения) Тогда
				ПерваяСНОКПробитию.Организация = ОрганизацияИзСписка.Значение;
				ПерваяСНОКПробитию.СистемаНалогообложения = СтрокаКорзины.СистемаНалогообложения;
				СНОТоваровВКорзине.Добавить(ПерваяСНОКПробитию);
			КонецЕсли;
			
		КонецЦикла;
		
		СписокСНО.СортироватьПоЗначению();
		
		Для Каждого СНОИзСписка Из СписокСНО Цикл
			
			Если ОрганизацияИзСписка.Значение = ПерваяСНОКПробитию.Организация И
				СНОИзСписка.Значение = ПерваяСНОКПробитию.СистемаНалогообложения Тогда
				Продолжить;
			КонецЕсли;
			СтруктураОрганизацийИСНО = Новый Структура("Организация, СистемаНалогообложения");
			СтруктураОрганизацийИСНО.Организация = ОрганизацияИзСписка.Значение;
			СтруктураОрганизацийИСНО.СистемаНалогообложения = СНОИзСписка.Значение;
			СНОТоваровВКорзине.Добавить(СтруктураОрганизацийИСНО);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СНОТоваровВКорзине;
	
КонецФункции

&НаСервереБезКонтекста
Функция КассаПоддерживаетОперацииПоСНОИзСпискаПокупок(ИдентификаторУстройства, СНОИзСпискаПокупок)
	
	Результат = Новый Структура("Ошибка,ТекстОшибки", Ложь, "");
	
	Если ЗначениеЗаполнено(ИдентификаторУстройства) И СНОИзСпискаПокупок.Количество() > 0 Тогда
		
		ПараметрыРегистрацииУстройства = МенеджерОборудованияРМК.ПараметрыРегистрацииУстройства(ИдентификаторУстройства);
			
		Если ПараметрыРегистрацииУстройства.Свойство("КодыСистемыНалогообложения")
			И ЗначениеЗаполнено(ПараметрыРегистрацииУстройства.КодыСистемыНалогообложения) Тогда
			
			ПрименяемыеКодыНалогообложения = ПараметрыРегистрацииУстройства.КодыСистемыНалогообложения;
			
			Если ПустаяСтрока(ПрименяемыеКодыНалогообложения) Тогда
				
				ТекстОшибки = НСтр("ru ='Не заданы коды систем налогообложения в параметрах регистрации кассы'");
				Результат.Вставить("Ошибка", Истина);
				Результат.Вставить("ТекстОшибки", ТекстОшибки);
				Возврат Результат;
				
			КонецЕсли;
			
			ТекстОшибки = НСтр("ru = ''");
			
			Для Каждого СтрокаСписка Из СНОИзСпискаПокупок Цикл
				
				Если НЕ СтрокаСписка.Организация = ИдентификаторУстройства.Организация Тогда
					Продолжить;
				КонецЕсли;
				
				СНО = СтрокаСписка.СистемаНалогообложения;
				КодСНО = МенеджерОборудованияРМККлиентСервер.КодСистемыНалогообложенияККТ(СНО);
				
				Если НЕ КодСНО = Неопределено Тогда
					
					КодСНОСтрокой = Строка(КодСНО);
					
					Если СтрНайти(ПрименяемыеКодыНалогообложения, КодСНОСтрокой) = 0 Тогда
						
						СимволДополнения = ?(ПустаяСтрока(ТекстОшибки), "", НСтр("ru = ' '"));
						ТекстТекущейОшибки = СтрШаблон(НСтр("ru = 'Касса не поддерживает продажу по СНО ""%1"" '"), СНО);
						ТекстОшибки = СтрШаблон("%1%2%3", ТекстОшибки, СимволДополнения, ТекстТекущейОшибки);
						
					КонецЕсли;
					
				Иначе
					
					СимволДополнения = ?(ПустаяСтрока(ТекстОшибки), "", " ");
					ТекстТекущейОшибки = СтрШаблон(НСтр("ru = 'В БПО не найдено подходящего кода для СНО ""%1"" '"), СНО);
					ТекстОшибки = СтрШаблон("%1%2%3", ТекстОшибки, СимволДополнения, ТекстТекущейОшибки);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
				
				ТекстОшибки = СтрШаблон(НСтр("ru = '%1'"), ТекстОшибки);
				Результат.Вставить("Ошибка", Истина);
				Результат.Вставить("ТекстОшибки", ТекстОшибки);
				
			КонецЕсли;
			
		Иначе
			
			Результат.Вставить("ТекстОшибки",
				НСтр("ru = 'Не удалось определить коды систем налогообложения из параметров регистрации кассы'"));
			Результат.Вставить("Ошибка", Истина);
			
		КонецЕсли;
		
	Иначе
		
		Результат.Вставить("ТекстОшибки",
			НСтр("ru = 'Не удалось определить кассу или в списке покупок отсутствуют данные о СНО'"));
		Результат.Вставить("Ошибка", Истина);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПроинформироватьПользователяОКоличествеЧеков()

	СистемыНалогообложенияТоваровВКорзине = РазличныеСНОВСпискеПокупок();
	ОжидаемоеКоличествоЧеков = СистемыНалогообложенияТоваровВКорзине.Количество();
	
	Если ОжидаемоеКоличествоЧеков > 1 Тогда
		
		ТекстУведомления = НСтр("ru='Продажа товаров из списка покупок будет оформлена
									|согласно закону №54-ФЗ.%2Ожидаемое количество чеков: %1'");
		ТекстУведомления = СтрШаблон(ТекстУведомления, ОжидаемоеКоличествоЧеков, Символы.ПС);
		Элементы.ДекорацияКоличествоЧеков.Заголовок = ТекстУведомления;
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияКоличествоЧеков, ОжидаемоеКоличествоЧеков > 1);
	
КонецПроцедуры

#КонецОбласти

#Область ПринятиеОплат

&НаКлиенте
Процедура ПерерасчитатьСуммыОплаты(ПараметрыПересчета = Неопределено)
	
	Если ПараметрыПересчета = Неопределено Тогда
		ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	КонецЕсли;
	
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачестьОплатуКартой()
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПриИзмененииБНОплаты = Истина;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачестьОплатуНаличными()
	ПерерасчитатьСуммыОплаты();
КонецПроцедуры

&НаКлиенте
Процедура ЗачестьОплатуВРассрочку()
	ПерерасчитатьСуммыОплаты();
КонецПроцедуры

&НаКлиенте
Процедура ЗачестьОплатуЗачетАванса()
	ПерерасчитатьСуммыОплаты();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыОплатыАванса()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СуммаБезСкидки = 0 Или ОбновлятьСуммуАванса Тогда
		СуммаБезСкидки = СуммаОплаченоНал + СуммаОплаченоБН + СуммаОплаченоБезнал + СуммаОплаченоСБП + СуммаОплаченоЮКасса + СуммаОплаченоКредитом;
		ТекущаяСтрока.Цена = СуммаБезСкидки;
		ТекущаяСтрока.Сумма = СуммаБезСкидки;
		ТекущаяСтрока.СуммаБезСкидки = СуммаБезСкидки;
		ОбщегоНазначенияРМККлиентСервер.УстановитьНомерКартинкиСтрокиТовара(ТекущаяСтрока);
	КонецЕсли;
	
	РассчитатьСуммыОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСоответствияОплат(СтруктураЭлементов, ИмяКоманды, ИмяГруппа, ИмяПоля, ИмяПодсказка)
	
	СтруктураЭлементов.Вставить(ИмяКоманды, Новый Структура("Группа, Поле, Подсказка", ИмяГруппа, ИмяПоля, ИмяПодсказка));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПревышениеСуммыЗачетаАванса()
	
	Если ЭтоЗачетАванса И Не ЭтоВнесениеПредоплатыПоЗаказу Тогда
		СуммаОплаченоЗачетАванса = Мин(СуммаИтого, СуммаОстаткаДокументаРасчета);
	ИначеЕсли ЭтоОплатаРассрочки Тогда
		СуммаОплаченоЗачетАванса = СуммаИтого - СуммаОстаткаДокументаРасчета;
	ИначеЕсли ЭтоВнесениеПредоплатыПоЗаказу Тогда
		
		Если СуммаОстаткаДокументаРасчета > 0 Тогда
			СуммаОплаченоЗачетАванса = Макс((СуммаИтого - СуммаОстаткаДокументаРасчета), 0);
		КонецЕсли;
		
		СуммаОплаченоВРассрочку = СуммаИтого - (СуммаОплаченоНал + СуммаОплаченоБН + СуммаОплаченоБезнал
			+ СуммаОплаченоЗачетАванса + СуммаОплаченоСертификатами + СуммаОплаченоСБП + СуммаОплаченоЮКасса
			+ СуммаОплаченоСертификатамиНСПК + СуммаТоваровКЗамене + СуммаОплаченоКредитом);
		СуммаОплаченоВРассрочку = Макс(СуммаОплаченоВРассрочку, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаЗачетАвансаКлиент()
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеЗачетАванса = Истина;
	
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	ПроверитьПревышениеСуммыЗачетаАванса();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачестьОплатуБезналом()
	ПерерасчитатьСуммыОплаты();
КонецПроцедуры

&НаКлиенте
Функция РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета)
	ПереключитьРежимПоказаОстатков(Ложь);
	ПереключитьРежимНаПоказСкидок(Ложь);
	
	Если ЕстьНезаполненныеДанные() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстОшибки = "";
	ЭтоОперацияПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	
	НеКонтролироватьОстатки = Ложь;
	Если Не ПараметрыПересчета.ПоКомандеПредоплата Тогда
		НеКонтролироватьОстатки = Объект.ОперацияСДенежнымиСредствами;
	ИначеЕсли ПараметрыПересчета.ПоКомандеПредоплата И Не Элементы.ГруппаОплатаВРассрочку.Видимость Тогда
		НеКонтролироватьОстатки = Истина;
	ИначеЕсли ПараметрыПересчета.ПоКомандеПредоплата И Элементы.ГруппаОплатаВРассрочку.Видимость Тогда
		Если СуммаОплаченоВРассрочку = СуммаИтого - СуммаОплаченоЗачетАванса И СуммаОплаченоВРассрочку > 0 Тогда
			НеКонтролироватьОстатки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоОперацияПродажи Тогда
		Если Не ПартииПодобраны И ИспользоватьАвтоподборПартий > 0 Тогда
			РаспределитьТоварыПоПартиямНаСервере();
			ПартииПодобраны = Истина;
			Если ИспользоватьАвтоматическиеСкидки И СкидкиРассчитаны Тогда
				ОтменитьСкидки();
			КонецЕсли;
			ВыполнитьПересчетСкидок();
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ЗаказПокупателя) И ПараметрыПересчета.ПоКомандеЗачетАванса
		И СуммаОплаченоЗачетАванса < СуммаИтого И СуммаОплаченоЗачетАванса > 0 Тогда
		НеКонтролироватьОстатки = Истина;
	КонецЕсли;
	
	Если (ЭтоОперацияПродажи ИЛИ ЭтоЗаменаТоваров)
		И Не РежимРаботыСЧеком = РежимыРаботыСЧеком.ВводТоваров
		И Не НеКонтролироватьОстатки
		И Не ЭтоОплатаРассрочки
		И Не ПриемАванса
		И Не ПриемАвансаПоЗаказу
		И Не КонтрольОстатковПройден(ТекстОшибки) Тогда
		
		Если ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатой(ЭтотОбъект) Тогда
			ПереключитьВРежимВводаТоваров();
		КонецЕсли;
		ТекстЗаголовка = НСтр("ru = 'Контроль остатков.
									|Измените количество или удалите товар.'");
		ПараметрыОшибки = Новый Структура("ЭтоПредупреждение", Истина);
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки, ПараметрыОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	ПоКомандеНал = ПараметрыПересчета.ПоКомандеНал;
	ПоКомандеБН = ПараметрыПересчета.ПоКомандеБН;
	ПоКомандеБезнал = ПараметрыПересчета.ПоКомандеБезнал;
	ПоКомандеВРассрочку = ПараметрыПересчета.ПоКомандеВРассрочку;
	ПоКомандеЗачетАванса = ПараметрыПересчета.ПоКомандеЗачетАванса;
	ПриИзмененииБНОплаты = ПараметрыПересчета.ПриИзмененииБНОплаты;
	ПересчитыватьОкругление = ПараметрыПересчета.ПересчитыватьОкругление;
	ПоКомандеПредоплата = ПараметрыПересчета.ПоКомандеПредоплата;
	ПоКомандеПереключитьЧек = ПараметрыПересчета.ПоКомандеПереключитьЧек;
	ПоКомандеОплатитьСертификатом = ПараметрыПересчета.ПоКомандеОплатитьСертификатом;
	ПоКомандеОтменитьОплатуСертификатом = ПараметрыПересчета.ПоКомандеОтменитьОплатуСертификатом;
	ПриИзмененииСуммыОплатыСертификатом = ПараметрыПересчета.ПриИзмененииСуммыОплатыСертификатом;
	ПоКомандеОплатаQRКодом = ПараметрыПересчета.ПоКомандеОплатаQRКодом;
	ПоКомандеОтменитьОплатуQRКодом = ПараметрыПересчета.ПоКомандеОтменитьОплатуQRКодом;
	ПоКомандеОплатитьСертификатомНСПК = ПараметрыПересчета.ПоКомандеОплатитьСертификатомНСПК;
	ПоКомандеОтменитьОплатуСертификатомНСПК = ПараметрыПересчета.ПоКомандеОтменитьОплатуСертификатомНСПК;
	ПоКомандеЗаменаТоваров = ПараметрыПересчета.ПоКомандеЗаменаТоваров;
	ПоКомандеОплатитьВсюСуммуБонусами = ПараметрыПересчета.ПоКомандеОплатитьВсюСуммуБонусами;
	ПоКомандеКредит = ПараметрыПересчета.ПоКомандеКредит;
	
	Если Объект.Товары.Количество() = 0 И НЕ ПриемАванса Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПоКомандеБН ИЛИ ПриИзмененииБНОплаты Тогда
		ИмяТекущейКоманды = ТекущийЭлемент.Имя;
	КонецЕсли;
	
	Если НЕ ПоКомандеПереключитьЧек = "" Тогда
		
		ПредыдущаяОрганизация = ВыбраннаяОрганизация;
		ПредыдущаяСНО = ВыбраннаяСистемаНалогообложения;
		
		ПереключитьНаСледующийЧек(ПоКомандеПереключитьЧек);
		
		Если Элементы.ГруппаСуммаОплатаСертификатами.Видимость Тогда
			
			ПоКомандеОплатитьСертификатом = Истина;
			ПараметрыПересчета.ПоКомандеОплатитьСертификатом = Истина;
			Элементы.ГруппаОплатаНал.Видимость = Ложь;
			Элементы.ГруппаОплатаКартой.Видимость = Ложь;
			
		ИначеЕсли Элементы.ГруппаОплатаНал.Видимость Тогда
			
			Если ПробитыеЧеки.Количество() > 0 И ОплатаБезДеленияПоЧекам Тогда
				ПоследнийПробитыйЧек = ПробитыеЧеки.Получить(ПробитыеЧеки.Количество()-1);
				СдачаПриОшибкеПробитияЧека = ПоследнийПробитыйЧек.Сдача;
				СуммаОплаченоНал = ПоследнийПробитыйЧек.Сдача;
			Иначе
				Элементы.ГруппаОплатаНал.Видимость = Ложь;
				Элементы.ГруппаОплатаКартой.Видимость = Ложь;
				ПоКомандеНал = Истина;
				ПараметрыПересчета.ПоКомандеНал = Истина;
			КонецЕсли;
			
		ИначеЕсли Элементы.ГруппаОплатаКартой.Видимость Тогда
			
			Элементы.ГруппаОплатаКартой.Видимость = Ложь;
			ПоКомандеБН = Истина;
			ПараметрыПересчета.ПоКомандеБН = Истина;
			ПриИзмененииБНОплаты = Истина;
			
		ИначеЕсли Элементы.ГруппаОплатаКредитом.Видимость Тогда
			
			ПоКомандеНал = Истина;
			ПараметрыПересчета.ПоКомандеНал = Истина;
			
		Иначе
		КонецЕсли;
		
		Если Элементы.ГруппаОплатаБонусами.Видимость Тогда
			СуммаОплаченоБонусами = СуммаБонусов;
		КонецЕсли;
		
		Элементы.ГруппаОплатаКредитом.Видимость = Ложь;
		
	КонецЕсли;
	
	СоответствияОплат = Новый Структура;
	ДобавитьСоответствияОплат(СоответствияОплат, "ПоКомандеНал", "ГруппаОплатаНал", "СуммаОплаченоНал", "ГруппаПодсказкаОплатаНаличными");
	ДобавитьСоответствияОплат(СоответствияОплат, "ПоКомандеКредит", "ГруппаОплатаКредитом", "СуммаОплаченоКредитом", "ГруппаПодсказкаОплатаКредитом");
	ДобавитьСоответствияОплат(СоответствияОплат, "ПоКомандеВРассрочку", "ГруппаОплатаВРассрочку", "СуммаОплаченоВРассрочку", "ГруппаПодсказкаОплатаВРассрочку");
	ДобавитьСоответствияОплат(СоответствияОплат, "ПоКомандеПредоплата", "ГруппаОплатаПредоплата", "СуммаОплаченоВРассрочку", "ГруппаПодсказкаПредоплата");
	ДобавитьСоответствияОплат(СоответствияОплат, "ПоКомандеЗачетАванса", "ГруппаОплатаЗачетАванса", "СуммаОплаченоЗачетАванса", "ГруппаОплатаЗачетАванса");
	ДобавитьСоответствияОплат(СоответствияОплат, "ПоКомандеБезнал", "ГруппаОплатаБезнал", "СуммаОплаченоБезнал", "ГруппаОплатаБезнал");
	ДобавитьСоответствияОплат(СоответствияОплат, "ПоКомандеЗаменаТоваров", "ГруппаСуммаТоваровКЗамене", "СуммаТоваровКЗамене", "ГруппаСуммаТоваровКЗамене");
	
	Для Каждого Соответствие Из СоответствияОплат Цикл
		
		ГруппаЭлементовПоляСуммы = Элементы[Соответствие.Значение.Группа];
		ГруппаЭлементовПодсказка = Элементы[Соответствие.Значение.Подсказка];
		Если ПриемАвансаПоЗаказу Тогда
			Если ГруппаЭлементовПоляСуммы.Имя = "ГруппаОплатаВРассрочку" Или ГруппаЭлементовПоляСуммы.Имя = "ГруппаОплатаПредоплата" Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ПараметрыПересчета[Соответствие.Ключ] = Истина Тогда
			НовоеЗначениеВидимости = НЕ ГруппаЭлементовПоляСуммы.Видимость;
			УстановитьВидимостьЭлементаФормы(ГруппаЭлементовПоляСуммы, НовоеЗначениеВидимости);
			Если НЕ ГруппаЭлементовПоляСуммы = ГруппаЭлементовПодсказка Тогда
				Если НовоеЗначениеВидимости Тогда
					ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(ГруппаЭлементовПоляСуммы);
				Иначе
					ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(ГруппаЭлементовПодсказка);
				КонецЕсли;
			КонецЕсли;
			Если Соответствие.Ключ = "ПоКомандеНал" Тогда
				ПереключитьПанельВводаНаличных(НовоеЗначениеВидимости);
			ИначеЕсли Соответствие.Ключ = "ПоКомандеБН" И НовоеЗначениеВидимости И Не СенсорныйЭкран Тогда
				ТекущийЭлемент = Элементы[Соответствие.Значение.Поле];
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ОткрытаСтраницаИнфоОшибка = (ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека) = Элементы.ГруппаИнфоОшибка);
	
	ПоКомандеКромеНал = ПоКомандеБезнал ИЛИ ПоКомандеБН ИЛИ ПоКомандеВРассрочку
		ИЛИ ПоКомандеЗачетАванса ИЛИ ПоКомандеОплатаQRКодом ИЛИ ПоКомандеОплатитьВсюСуммуБонусами
		ИЛИ ПоКомандеОплатитьСертификатом ИЛИ ПоКомандеОплатитьСертификатомНСПК ИЛИ ПоКомандеОтменитьОплатуQRКодом
		ИЛИ ПоКомандеОтменитьОплатуСертификатом ИЛИ ПоКомандеОтменитьОплатуСертификатомНСПК
		ИЛИ ПоКомандеПредоплата;
		
	Если ПоКомандеКромеНал Тогда
		ОтборСтрок = Неопределено;
		Если ЗначениеЗаполнено(ВыбраннаяОрганизация) И ЗначениеЗаполнено(ВыбраннаяСистемаНалогообложения) Тогда
			ОтборСтрок = Новый ФиксированнаяСтруктура(ВыбраннаяОрганизацияИСНО());
		КонецЕсли;
		Элементы.Товары.ОтборСтрок = ОтборСтрок;
		ПересчитатьИтогиТабличнойЧастиТовары(Ложь);
		ОбновлятьСуммуАванса = Ложь;
	КонецЕсли;
	
	Если ПоКомандеПереключитьЧек = ""
		И (ПоКомандеКромеНал ИЛИ ПробитыеЧеки.Количество() > 0) Тогда
		ОплатаБезДеленияПоЧекам = Ложь;
	КонецЕсли;

	Если ИспользоватьАвтоматическиеСкидки И ЭтоОперацияПродажи Тогда
		Если ТаблицаСкидокЗависяшихОтВидаОплаты.Количество() > 0
			// От оплаты бонусами могут зависеть автоматические скидки процентом, 
			// Где стоимость товара может быть уменьшена на сумму оплаты бонусами
			ИЛИ ПоКомандеОплатитьВсюСуммуБонусами Тогда			
			ВыполнитьПересчетСкидок();
		КонецЕсли;
	КонецЕсли;
	
	СуммаОкругления = 0; 
	СуммаБезОкругления = СуммаИтого + СуммаОкругления;
	
	ОсталосьОплатитьСОкруглением = СуммаИтого - СуммаОплаченоНал - СуммаОплаченоБН - СуммаОплаченоБезнал
			- СуммаОплаченоВРассрочку - СуммаОплаченоЗачетАванса - СуммаОплаченоСертификатами
			- СуммаОплаченоСертификатамиНСПК - СуммаТоваровКЗамене - СуммаОплаченоКредитом;
			
	ОсталосьОплатить = ОсталосьОплатитьСОкруглением + СуммаОкругления;
	
	Для Каждого Соответствие Из СоответствияОплат Цикл
		ГруппаЭлементовПоляСуммы = Элементы[Соответствие.Значение.Группа];
		
		Если ПараметрыПересчета[Соответствие.Ключ] = Истина И НЕ Соответствие.Значение.Поле = "" Тогда
			Если Соответствие.Ключ = "ПоКомандеВРассрочку" Тогда
				ТекущийЭлемент = Элементы.СуммаОплаченоВРассрочку;
			ИначеЕсли Соответствие.Ключ = "ПоКомандеПредоплата" Тогда
				ТекущийЭлемент = Элементы.СуммаОплаченоПредоплата;
			ИначеЕсли Не СенсорныйЭкран Тогда
				ТекущийЭлемент = Элементы[Соответствие.Значение.Поле];
			КонецЕсли;
			Если Соответствие.Ключ = "ПоКомандеБН" Тогда
				ЭтотОбъект[Соответствие.Значение.Поле] = ОсталосьОплатить;
			ИначеЕсли Соответствие.Ключ = "ПоКомандеЗаменаТоваров" Тогда
				ЭтотОбъект[Соответствие.Значение.Поле] = СуммаБезОкругления;
			ИначеЕсли Соответствие.Ключ = "ПоКомандеЗачетАванса" И СуммаОплаченоЗачетАванса > 0 Тогда
				ЭтотОбъект[Соответствие.Значение.Поле] = СуммаОплаченоЗачетАванса;
			Иначе
				ЭтотОбъект[Соответствие.Значение.Поле] = ОсталосьОплатитьСОкруглением;
			КонецЕсли;
		КонецЕсли;
		
		Если Не (Соответствие.Ключ = "ПоКомандеВРассрочку" Или Соответствие.Ключ = "ПоКомандеПредоплата") Тогда
			Если НЕ ГруппаЭлементовПоляСуммы.Видимость И НЕ Соответствие.Значение.Поле = "" Тогда
				ЭтотОбъект[Соответствие.Значение.Поле] = 0; 
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	Если Не (Элементы.ГруппаОплатаПредоплата.Видимость Или Элементы.ГруппаОплатаВРассрочку.Видимость) Тогда
		СуммаОплаченоВРассрочку = 0;
	КонецЕсли;
	
	Если ПоКомандеБН Тогда
		
		Если НЕ ПараметрыПересчета.ПоКомандеПереключитьЧек = "" Тогда
			
			ОрганизацияЧека = ПредыдущаяОрганизация;
			СНОЧека = ПредыдущаяСНО;
			
			СтруктураОрганизацияИСНО = Новый Структура();
			СтруктураОрганизацияИСНО.Вставить("СистемаНалогообложения", СНОЧека);
			СтруктураОрганизацияИСНО.Вставить("Организация", ОрганизацияЧека);
			СтрокиОплатПоКарте = ТаблицаОплатКартой.НайтиСтроки(СтруктураОрганизацияИСНО);
			
			ИтераторУдаления = СтрокиОплатПоКарте.Количество() - 1;
			Если КоличествоДополнительныхКарт = 3 Тогда
				ИтераторУдаления = ИтераторУдаления - 1;
			КонецЕсли;
			
			Пока ИтераторУдаления >= 0 Цикл
				УдалитьРеквизитыОплатыКартой(ИтераторУдаления);
				ИтераторУдаления = ИтераторУдаления - 1;
			КонецЦикла;
			
			ТекущаяСтруктураОрганизацияИСНО = ВыбраннаяОрганизацияИСНО();
			СтрокиОплатПоКарте = ТаблицаОплатКартой.НайтиСтроки(ТекущаяСтруктураОрганизацияИСНО);
			КоличествоОплатПоКарте = СтрокиОплатПоКарте.Количество();
			
			Если КоличествоОплатПоКарте = 0 Тогда
				НоваяОплатаКартой = ТаблицаОплатКартой.Добавить();
				НоваяОплатаКартой.Сумма = ОсталосьОплатить;
				НоваяОплатаКартой.Организация = ВыбраннаяОрганизация;
				НоваяОплатаКартой.СистемаНалогообложения = ВыбраннаяСистемаНалогообложения;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ВыбранныйВидОплаты") Тогда
					НоваяОплатаКартой.ВидОплаты = ЭтотОбъект.ВыбранныйВидОплаты;
				КонецЕсли;
				Если ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации) И Не ЭтоЗаменаТоваров Тогда
					НоваяОплатаКартой.Оплачено = Истина;
				Иначе	
					НоваяОплатаКартой.Оплачено = Ложь;
				КонецЕсли;
				КоличествоОплатПоКарте = 1;
			КонецЕсли;
			
			ИтераторДобавления = 0;
			КоличествоДополнительныхКарт = 0;
			НаименованиеГруппыОплаты = "";
			
			Пока ИтераторДобавления < КоличествоОплатПоКарте Цикл
				Если СтрокиОплатПоКарте.Количество() > 0 Тогда
					СтрокаОплатыПоКарте = СтрокиОплатПоКарте.Получить(ИтераторДобавления);
					СуммаОплаты = СтрокаОплатыПоКарте.Сумма;
				Иначе
					СуммаОплаты = ОсталосьОплатить;
				КонецЕсли;
				Если ИтераторДобавления <> 0 Тогда
					УстановитьДоступностьЭлементаФормы(Элементы[НаименованиеГруппыОплаты], Ложь);
					НаименованиеРеквизитаПоляСуммы = "СуммаОплаченоБН_" + Строка(ИтераторДобавления);
					НаименованиеГруппыЭлементовПоляСуммы = "ГруппаОплатаКартой_" + Строка(ИтераторДобавления);
					НаименованиеГруппыОплаты = "ГруппаВидОплатыКартойГоризонтально_" + Строка(ИтераторДобавления);
				Иначе
					НаименованиеРеквизитаПоляСуммы = "СуммаОплаченоБН_0";
					НаименованиеГруппыЭлементовПоляСуммы = "ГруппаОплатаКартой";
					НаименованиеГруппыОплаты = "ГруппаВидОплатыКартойГоризонтально";
				КонецЕсли; 
				УстановитьДоступностьЭлементаФормы(Элементы[НаименованиеГруппыОплаты], Истина);
				УстановитьВидимостьЭлементаФормы(Элементы[НаименованиеГруппыЭлементовПоляСуммы], Истина);
				ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы[НаименованиеГруппыЭлементовПоляСуммы]);
				ЭтотОбъект[НаименованиеРеквизитаПоляСуммы] = СуммаОплаты;
				КоличествоДополнительныхКарт = КоличествоДополнительныхКарт + 1;
				Если КоличествоДополнительныхКарт < 3 И ИспользоватьОплатуНесколькимиКартами Тогда
					ДобавитьРеквизитыОплатыКартой(ИтераторДобавления + 1);;
				КонецЕсли;
				ИтераторДобавления = ИтераторДобавления + 1;
			КонецЦикла;
			
		Иначе
			
			ПозицияПодчеркивания = СтрНайти(ИмяТекущейКоманды, "_");
			ИндексЭлемента = "0";
			
			Если ПозицияПодчеркивания = 0 Тогда
				ГруппаЭлементовПоляСуммы = Элементы["ГруппаОплатаКартой"];
				ГруппаЭлементовПодсказка = Элементы["ГруппаПодсказкаОплатаКартой"];
				НаименованиеРеквизитаПоляСуммы = "СуммаОплаченоБН_0";
			Иначе
				ИндексЭлемента = Прав(ИмяТекущейКоманды, СтрДлина(ИмяТекущейКоманды) - ПозицияПодчеркивания);
				НаименованиеГруппыСуммы = "ГруппаОплатаКартой_" + Строка(ИндексЭлемента);
				НаименованиеГруппыПодсказки = "ГруппаПодсказкаОплатаКартой_" + Строка(ИндексЭлемента);
				НаименованиеРеквизитаПоляСуммы = "СуммаОплаченоБН_" + Строка(ИндексЭлемента);
				ГруппаЭлементовПоляСуммы = Элементы[НаименованиеГруппыСуммы];
				ГруппаЭлементовПодсказка = Элементы[НаименованиеГруппыПодсказки];
			КонецЕсли;
			ВидимостьОсновнойГруппыОплатыКартой = НЕ Элементы.ГруппаОплатаКартой.Видимость;
			ВидимостьГруппыОплатыКартой = НЕ ГруппаЭлементовПоляСуммы.Видимость;
			УстановитьВидимостьЭлементаФормы(ГруппаЭлементовПоляСуммы, ВидимостьГруппыОплатыКартой);
			Если ВидимостьГруппыОплатыКартой Тогда
				ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(ГруппаЭлементовПоляСуммы);
				ЭтотОбъект[НаименованиеРеквизитаПоляСуммы] = ОсталосьОплатить;
				КоличествоДополнительныхКарт = КоличествоДополнительныхКарт + 1;
			Иначе
				ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(ГруппаЭлементовПодсказка);
				ЭтотОбъект[НаименованиеРеквизитаПоляСуммы] = 0;
				КоличествоДополнительныхКарт = КоличествоДополнительныхКарт - 1;
			КонецЕсли;
			Если ВидимостьГруппыОплатыКартой И Не СенсорныйЭкран Тогда
				ТекущийЭлемент = Элементы[Соответствие.Значение.Поле];
			КонецЕсли;
			
			Если (ВидимостьГруппыОплатыКартой И Не ОсталосьОплатить = 0) ИЛИ ПриемАванса Тогда
				НоваяОплатаКартой = ТаблицаОплатКартой.Добавить();
				НоваяОплатаКартой.Сумма = ОсталосьОплатить;
				НоваяОплатаКартой.Организация = ВыбраннаяОрганизация;
				НоваяОплатаКартой.СистемаНалогообложения = ВыбраннаяСистемаНалогообложения; 
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ВыбранныйВидОплаты") Тогда
					НоваяОплатаКартой.ВидОплаты = ЭтотОбъект.ВыбранныйВидОплаты;
				КонецЕсли;
				Если ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации) И Не ЭтоЗаменаТоваров Тогда
					НоваяОплатаКартой.Оплачено = Истина;
				Иначе	
					НоваяОплатаКартой.Оплачено = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ВидимостьЭлементовВыдачиНаличных = ВыдаватьНаличныеНаКассе И ВидимостьОсновнойГруппыОплатыКартой И ЭтоОперацияПродажи;
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаРазделВыдачиНаличных, ВидимостьЭлементовВыдачиНаличных);
			
			Если ИспользоватьОплатуНесколькимиКартами И ВидимостьГруппыОплатыКартой И Не ПриемАванса Тогда
				Если КоличествоДополнительныхКарт < 3 Тогда
					ДобавитьРеквизитыОплатыКартой(Число(ИндексЭлемента) + 1);
				КонецЕсли;
				Если ИндексЭлемента = "1" Тогда
					УстановитьДоступностьЭлементаФормы(Элементы.ГруппаВидОплатыКартойГоризонтально, Ложь);
				ИначеЕсли ИндексЭлемента <> "0" Тогда
					ИндексПредыдущегоЭлемента = Строка(Число(ИндексЭлемента) - 1);
					НаименованиеЭлемента = "ГруппаВидОплатыКартойГоризонтально_" + ИндексПредыдущегоЭлемента;
					УстановитьДоступностьЭлементаФормы(Элементы[НаименованиеЭлемента], Ложь);
				КонецЕсли;
			ИначеЕсли ИспользоватьОплатуНесколькимиКартами И НЕ ВидимостьГруппыОплатыКартой И Не ПриемАванса Тогда
				Если КоличествоДополнительныхКарт < 2 Тогда
					УдалитьРеквизитыОплатыКартой(ИндексЭлемента);
				КонецЕсли;
				Если ИндексЭлемента = "1" Тогда
					УстановитьДоступностьЭлементаФормы(Элементы.ГруппаВидОплатыКартойГоризонтально, Истина);
				ИначеЕсли ИндексЭлемента <> "0" Тогда
					ИндексПредыдущегоЭлемента = Строка(Число(ИндексЭлемента) - 1);
					НаименованиеЭлемента =  "ГруппаВидОплатыКартойГоризонтально_" + ИндексПредыдущегоЭлемента;
					УстановитьДоступностьЭлементаФормы(Элементы[НаименованиеЭлемента], Истина);
				КонецЕсли;
			КонецЕсли;
			
			ТекущаяСтруктураОрганизацияИСНО = ВыбраннаяОрганизацияИСНО();
			СтрокиОплатПоКарте = ТаблицаОплатКартой.НайтиСтроки(ТекущаяСтруктураОрганизацияИСНО);
			
			Если СтрокиОплатПоКарте.Количество() >= Число(ИндексЭлемента) + 1 И НЕ ВидимостьГруппыОплатыКартой Тогда
				ИндексСтрокиОплаты = Число(ИндексЭлемента);
				ТаблицаОплатКартой.Удалить(СтрокиОплатПоКарте.Получить(ИндексСтрокиОплаты));
			КонецЕсли; 
			
			Если НЕ ВидимостьОсновнойГруппыОплатыКартой Тогда
				
				УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыдачиНаличных, ВидимостьЭлементовВыдачиНаличных);
				УстановитьВидимостьЭлементаФормы(Элементы.ГруппаРазделДенежныйЯщик, ВидимостьЭлементовВыдачиНаличных);
				
				ОчиститьРеквизитыQRКодаПлатежнойКарты();
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ПоКомандеВРассрочку Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ДокументРасчета) Тогда
			УстановитьДоступностьЭлементаФормы(Элементы.Предоплата, НЕ Элементы.Предоплата.Доступность);
		КонецЕсли;
		НастроитьПолеВводаСуммыВРассрочку();
		
	ИначеЕсли ПоКомандеПредоплата Тогда
		
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаВРассрочку, НЕ Элементы.ОплатаВРассрочку.Доступность);
		НастроитьПолеВводаСуммыВРассрочку();
		
	ИначеЕсли ПоКомандеОплатитьСертификатом ИЛИ ПриИзмененииСуммыОплатыСертификатом Тогда
		
		СуммаИтогоОсталосьОплатить = СуммаБезОкругления - СуммаОплаченоНал - СуммаОплаченоБН - СуммаОплаченоБезнал
			- СуммаОплаченоВРассрочку - СуммаОплаченоЗачетАванса - СуммаТоваровКЗамене - СуммаОплаченоКредитом;
			
		РассчитатьСуммуОплатыСертификатами(СуммаИтогоОсталосьОплатить, СуммаБезОкругления);

	ИначеЕсли ПоКомандеОплатитьСертификатомНСПК Тогда
		
		УстановитьЗаголовкиОплаты();
		ПодготовитьПредварительноеОдобрениеНСПК();
		
	ИначеЕсли ПоКомандеОтменитьОплатуСертификатомНСПК Тогда
		
		ТаблицаТоваровФСС.Очистить();
		СуммаОплаченоСертификатамиНСПК = 0;
		СуммаОплаченоНал = 0;
		СуммаОплаченоБН = 0;
		СуммаОплаченоВРассрочку = 0;
		ТабличныйДокументСертификатНСПК = Неопределено;
		ПредварительноеОдобрениеНСПКПолучено = Ложь;
		
	ИначеЕсли ПоКомандеЗаменаТоваров Тогда
		
		СуммаБезОкругления = 0;
		СуммаБезСкидки = 0;
		СуммаИтого = 0;
		
	КонецЕсли;
	
	НетПробитыхЧеков = ПробитыеЧеки.Количество() = 0;
	
	ДоступностьЭлементов = (НЕ Элементы.ГруппаОплатаНал.Видимость И НЕ Элементы.ГруппаОплатаКартой.Видимость
								И (НЕ Элементы.ГруппаОплатаВРассрочку.Видимость ИЛИ ПриемАвансаПоЗаказу)
								И НЕ Элементы.ГруппаОплатаСертификатом.Видимость
								И НЕ Элементы.ГруппаСуммаОплатаСертификатамиНСПК.Видимость
								И НЕ Элементы.ГруппаОплатаКредитом.Видимость
								И НЕ ПоКомандеОплатитьСертификатом
								И НЕ ПоКомандеОплатаQRКодом)
							ИЛИ ПоКомандеОтменитьОплатуQRКодом
							ИЛИ ПоКомандеОтменитьОплатуСертификатомНСПК
							ИЛИ ПоКомандеЗаменаТоваров
							ИЛИ ПоКомандеОтменитьОплатуСертификатом;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаБонусами, ДоступностьЭлементов И НетПробитыхЧеков);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатитьБонусами, КоличествоБонусов > 0 И ДоступностьЭлементов
		И НетПробитыхЧеков);
	
	Если НетПробитыхЧеков Тогда
		НастроитьЭлементыФормы(Элементы.Страницы.ТекущаяСтраница, Истина);
	Иначе
		
		Для Каждого ЭлементГруппы Из Элементы.ГруппаОперации.ПодчиненныеЭлементы Цикл
			
			Если НЕ ЭлементГруппы = Элементы.УдалитьЧек И НЕ ЭлементГруппы = Элементы.ОтложитьЧек Тогда
				УстановитьДоступностьЭлементаФормы(ЭлементГруппы, Ложь);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПриИзмененииБНОплаты Тогда
		
		ПозицияПодчеркивания = СтрНайти(ИмяТекущейКоманды, "_");
		Если ПозицияПодчеркивания = 0 Тогда
			ИндексЭлемента = "0";
		Иначе
			ИндексЭлемента = Прав(ИмяТекущейКоманды, СтрДлина(ИмяТекущейКоманды) - ПозицияПодчеркивания);
		КонецЕсли;
		
		ТекущаяСтруктураОрганизацияИСНО = ВыбраннаяОрганизацияИСНО();
		СтрокиОплатПоКарте = ТаблицаОплатКартой.НайтиСтроки(ТекущаяСтруктураОрганизацияИСНО);
		
		ИндексСтрокиОплаты = Число(ИндексЭлемента);
		НаименованиеРеквизитаПоляСуммы = "СуммаОплаченоБН_" + ИндексЭлемента;
			
		Если СтрокиОплатПоКарте.Количество() >= Число(ИндексЭлемента) + 1 Тогда
			СтрокаТаблицыЗначений = СтрокиОплатПоКарте.Получить(ИндексСтрокиОплаты);
			СтрокаТаблицыЗначений.Сумма = ЭтотОбъект[НаименованиеРеквизитаПоляСуммы];
		ИначеЕсли СуммаОплаченоВРассрочку <> 0 Тогда
			НоваяОплатаКартой = ТаблицаОплатКартой.Добавить();
			НоваяОплатаКартой.Сумма = ЭтотОбъект[НаименованиеРеквизитаПоляСуммы];
			НоваяОплатаКартой.Организация = ВыбраннаяОрганизация;
			НоваяОплатаКартой.СистемаНалогообложения = ВыбраннаяСистемаНалогообложения;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ВыбранныйВидОплаты") Тогда
				НоваяОплатаКартой.ВидОплаты = ЭтотОбъект.ВыбранныйВидОплаты;
			КонецЕсли;
			Если ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации) И Не ЭтоЗаменаТоваров Тогда
				НоваяОплатаКартой.Оплачено = Истина;
			Иначе	
				НоваяОплатаКартой.Оплачено = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		СуммаБНПоОрганизации = 0;
		Для Каждого Оплата ИЗ СтрокиОплатПоКарте Цикл
			СуммаБНПоОрганизации = СуммаБНПоОрганизации + Оплата.Сумма;
		КонецЦикла;
		
		СуммаОплаченоБН = Мин(СуммаБезОкругления, СуммаБНПоОрганизации);
		СуммаОплаченоБН = Макс(0, СуммаБНПоОрганизации);
		
		Если ЗначениеЗаполнено(ЧекККМПродажа) И НЕ ЭтоОперацияПродажи И ПоКомандеБН Тогда
			
			СуммаБНОплатыПоЭквайрингуВЧекеПродажи = СуммаБНОплатыСПодключеннымЭквайрингом(ЧекККМПродажа);
			
			Если СуммаБНОплатыПоЭквайрингуВЧекеПродажи > 0 И НЕ ЕстьОплатаВстречнымПредоставлением И НЕ ЭтоЗаменаТоваров Тогда
				СуммаОплаченоБН = Мин(СуммаОплаченоБН, СуммаБНОплатыПоЭквайрингуВЧекеПродажи);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПриемАванса Тогда
		РассчитатьСуммыОплатыАванса();
	КонецЕсли;
	
	СуммаОплаченоНал = Макс(0, СуммаОплаченоНал);
	
	ЭтоОперацияПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	
	ПроверкаНаРасчетСкидок = Истина;
	Если ИспользоватьАвтоматическиеСкидки Тогда
		ПроверкаНаРасчетСкидок = СкидкиРассчитаны;
	КонецЕсли;
	
	Если ЭтоОперацияПродажи И ПроверкаНаРасчетСкидок Тогда
		
		Если ОкруглятьПриПроизвольномВидеОплаты Тогда
			ОкруглитьСуммуЧекаВПользуПокупателя();
		Иначе
			
			Если СуммаОплаченоНал >= Цел(СуммаИтого) Тогда
				ОкруглитьСуммуЧекаВПользуПокупателя();
			Иначе
				ОтменитьОкругление();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПоКомандеНал И Элементы.ГруппаОплатаНал.Видимость Тогда
		СуммаОплаченоНал = СуммаИтого - СуммаОплаченоБН - СуммаОплаченоБезнал
			- СуммаОплаченоВРассрочку - СуммаОплаченоЗачетАванса - СуммаОплаченоСертификатами 
			- СуммаОплаченоСертификатамиНСПК - СуммаТоваровКЗамене - СуммаОплаченоКредитом;
	КонецЕсли;
	СуммаОплаченоНал = Макс(0, СуммаОплаченоНал);
	
	Если (Элементы.Предоплата.Доступность И НЕ Элементы.ОплатаВРассрочку.Доступность)
			ИЛИ ПриемАвансаПоЗаказу Тогда
		СуммаОплаченоВРассрочку = СуммаИтого - СуммаОплаченоНал - СуммаОплаченоБН
			- СуммаОплаченоБезнал - СуммаОплаченоЗачетАванса - СуммаОплаченоСертификатамиНСПК
			- СуммаТоваровКЗамене - СуммаОплаченоКредитом - СуммаОплаченоСБП - СуммаОплаченоЮКасса;
	КонецЕсли;
		
	Если ПоКомандеОплатитьСертификатом Или ПоКомандеОтменитьОплатуСертификатом Или ПриИзмененииСуммыОплатыСертификатом Тогда
		Если СуммаОплаченоСертификатами = 0 И Элементы.ГруппаОплатаСертификатом.Видимость Тогда
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаСертификатом, Ложь);
		ИначеЕсли Не (СуммаОплаченоСертификатами = 0 Или Элементы.ГруппаОплатаСертификатом.Видимость) Тогда
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаСертификатом, Истина);
		КонецЕсли;
	КонецЕсли;
	
	ПроинформироватьПользователяОКоличествеЧеков();
	РассчитатьСуммыОплаты();
	НастроитьДоступностьПробитьЧек();
	ЗаполнитьТаблицуОплат();
	ВывестиИнформациюНаДисплейПокупателяОВнесеннойСуммеОплаты();
	ОтобразитьКнопкиОрганизацийИСНО();
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКнопкиОтменыВидовОплат,
		Объект.Оплата.Количество() > (1+Число(ПриемАвансаПоЗаказу)));
		
	ДоступныПлатежныеСистемы = (СуммаЗаполненныхОплат < СуммаИтого) И НЕ Элементы.ГруппаСуммаОплатаСертификатамиНСПК.Видимость;
	УстановитьДоступностьОплатыПлатежнымиСистемами(Элементы.ГруппаВидОплатыСБП,
		Элементы.ГруппаВидОплатыЮКасса, ДоступныПлатежныеСистемы);
	
	ДоступностьКомандОплатыПодарочнымСертификатом = (СуммаКОплате > 0 И ЭтоОперацияПродажи);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаДобавитьСертификат, ДоступностьКомандОплатыПодарочнымСертификатом);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаУдалитьСертификаты, ЭтоОперацияПродажи);
	
	Если ОткрытаСтраницаИнфоОшибка И ПоКомандеПереключитьЧек = "" Тогда
		ОплатаБезДеленияПоЧекам = Ложь;
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаИнфоОшибка);
	ИначеЕсли ОткрытаСтраницаИнфоОшибка И НЕ ПоКомандеПереключитьЧек = "" Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура РаспределитьТоварыПоПартиямНаСервере()
	
	ОбщегоНазначенияРМКПереопределяемый.ВыполнитьРаспределениеТоваровПоПартиям(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеОтчетаБезГашения

&НаКлиенте
Процедура СнятьОтчетБезГашенияКлиент()

	Если Не РаботаСЧекомЗавершена() Тогда
		Возврат;
	КонецЕсли;

	
	Если ТаблицаКассККМОрганизаций.Количество() > 1 И ТекущаяОперация = "" Тогда
		
		ТекущаяОперация = "ОтчетБезГашения";
		ПереключитьНаСтраницуВыбораКассыККМ();
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СнятиеОтчетаБезГашенияЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Уверены, что хотите снять отчет без гашения (X - отчет)?'");
	ЗаголовокВопроса = НСтр("ru='Отчет без гашения'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопроса);

КонецПроцедуры

&НаКлиенте
Процедура СнятиеОтчетаБезГашенияЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПроизвестиСнятиеОтчетаБезГашения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвестиСнятиеОтчетаБезГашения()

	ОповещениеОФормированияОтчетаБезГашения = Новый ОписаниеОповещения("ЗавершитьФормированиеОтчетаБезГашения",
		ЭтотОбъект);
		
	ПараметрыОперации = МенеджерОборудованияРМККлиентСервер.ПараметрыОткрытияЗакрытияСмены();
	ДополнительныеПараметрыДляПечати = ДополнительныеПараметрыОткрытияЗакрытияСмены();
	ДополнительныеПараметрыДляПечати.Пользователь = Объект.ПользовательБД;
	ДополнительныеПараметрыДляПечати.Кассир = Объект.Кассир;
	ДополнительныеПараметрыДляПечати.КассаККМ = Объект.КассаККМ;
	ДополнительныеПараметрыДляПечати.ВариантЗаполненияМестаРасчетов = ВариантЗаполненияМестаРасчетов;
	
	ЗаполнитьПараметрыКассираДляПечати(ПараметрыОперации, ДополнительныеПараметрыДляПечати);
	
	Доступность = Ложь;
	МенеджерОборудованияРМККлиент.НачатьФормированиеОтчетаБезГашения(
		ОповещениеОФормированияОтчетаБезГашения,
		УникальныйИдентификатор,
		ПодключаемоеОборудование,
		ПараметрыОперации);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьФормированиеОтчетаБезГашения(Результат, Параметры) Экспорт
	
	Доступность = Истина;
	
	Если ЕстьСвойство(Результат, "Результат") И НЕ Результат.Результат Тогда
		
		ТекстОшибки = НСтр("ru = 'При снятии отчета на фискальном регистраторе произошла ошибка.
		|%1
		|Отчет на фискальном регистраторе не сформирован.'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Результат.ОписаниеОшибки);
		
		ЗаголовокОшибки = НСтр("ru = 'Ошибка печати отчета без гашения'");
		
		ПоказатьПредупреждение(, ТекстОшибки, , ЗаголовокОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область Выдача_наличных_на_кассе

&НаКлиенте
Процедура ОткрытьДенежныйЯщикКлиент()

	ЗавершениеОткрытияДенежногоЯщика = Новый ОписаниеОповещения("ЗавершитьОткрытиеДенежногоЯщика", ЭтотОбъект);
	МенеджерОборудованияРМККлиент.НачатьОткрытиеДенежногоЯщика(ЗавершениеОткрытияДенежногоЯщика,
		УникальныйИдентификатор, ПодключаемоеОборудование);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОткрытиеДенежногоЯщика(РезультатВыполнения, ПараметрыДействия) Экспорт

	Если ЕстьСвойство(РезультатВыполнения, "Результат") И НЕ РезультатВыполнения.Результат Тогда
		
		ЗаголовокОшибки = НСтр("ru = 'При открытии денежного ящика произошла ошибка'");
		ТелоОшибки = РезультатВыполнения.ОписаниеОшибки;
		ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТелоОшибки);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьДанныеВыдачиНаличныхКлиент()

	ТекущаяВидимостьЭлементов = Элементы.ГруппаВыдачиНаличных.Видимость;
	Если ТекущаяВидимостьЭлементов Тогда
		СуммаНаличныхКВыдаче = 0;
	КонецЕсли;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыдачиНаличных, Не ТекущаяВидимостьЭлементов);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаРазделДенежныйЯщик, Не ТекущаяВидимостьЭлементов);
	
КонецПроцедуры
	
#КонецОбласти

&НаКлиенте
Процедура ПодготовитьДанныеЧековДляФискализации(ИсходныеДанные)
	
	ОповещениеПриЗавершении = ИсходныеДанные.ОповещениеОЗавершении;
	ИдентификаторУстройстваФР = ИсходныеДанные.ИдентификаторУстройстваФР;
	Если ИсходныеДанные.ИдентификаторУстройстваФР = "АвтономнаяККТ" Тогда
		БумажныйЧек = Ложь;
	Иначе
		БумажныйЧек = ИсходныеДанные.БумажныйЧек;
	КонецЕсли;
	
	Доступность = Ложь;
	
	Если НЕ ЭтоЧекКоррекции Тогда
		
		ПробитыеЧекиПоСНО = ПробитыеЧеки.НайтиСтроки(ВыбраннаяОрганизацияИСНО());
		
		Если ПробитыеЧекиПоСНО.Количество() = 0 И ОжидаемоеКоличествоЧеков > 0 Тогда
			
			ДополнительныеДанные = ДополнительныеДанныеДляФискализации(БумажныйЧек);
			Контекст = Новый Структура();
			ФискализироватьЧек(Контекст, ДополнительныеДанные, ОповещениеПриЗавершении, ВыбраннаяСистемаНалогообложения);
			
		КонецЕсли;
		
	Иначе
		
		ОтборПоВидуОперации = Новый Структура("Возврат", Истина);
		ПробитыеЧекиПоВидуОперации = ПробитыеЧеки.НайтиСтроки(ОтборПоВидуОперации);
		
		Если ПробитыеЧекиПоВидуОперации.Количество() = 0 И ОжидаемоеКоличествоЧеков > 0 Тогда
			
			СистемаНалогообложения = СистемаНалогообложенияЧека(ЧекККМПродажа);
			Объект.ВидОперации = ОбщегоНазначенияРМККлиент.ВидТекущейОперации(Истина);
			ДополнительныеДанные = ДополнительныеДанныеДляФискализации(БумажныйЧек);
			Контекст = Новый Структура();
			ФискализироватьЧек(Контекст, ДополнительныеДанные, ОповещениеПриЗавершении, СистемаНалогообложения);
			
			Если ДополнительныеДанные.Отказ Тогда
				Возврат;
			КонецЕсли;
			
		Иначе
			ПробитьЧекКоррекцииПродажи();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекКоррекцииПродажи()
	
	Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПробитьЧекНаКлиентеЗавершение", ЭтотОбъект);
	
	ОтборПоВидуОперации = Новый Структура("Возврат", Ложь);
	ПробитыеЧекиПоВидуОперации = ПробитыеЧеки.НайтиСтроки(ОтборПоВидуОперации);
	
	Если ПробитыеЧекиПоВидуОперации.Количество() = 0 И ОжидаемоеКоличествоЧеков > 0 Тогда
		
		Объект.ВидОперации = ОбщегоНазначенияРМККлиент.ВидТекущейОперации();
		
		ДополнительныеДанные = ДополнительныеДанныеДляФискализации();
		Контекст = Новый Структура();
		ФискализироватьЧек(Контекст, ДополнительныеДанные, ОповещениеПриЗавершении,
		СистемаНалогообложенияЧекаКоррекции);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекЗаменыТоваровПродажи()
	
	Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПробитьЧекНаКлиентеЗавершение", ЭтотОбъект);
	
	ОтборПоВидуОперации = Новый Структура("Возврат", Ложь);
	ПробитыеЧекиПоВидуОперации = ПробитыеЧеки.НайтиСтроки(ОтборПоВидуОперации);
	
	Если ПробитыеЧекиПоВидуОперации.Количество() = 0 И ОжидаемоеКоличествоЧеков > 0 Тогда
		
		Объект.ВидОперации = ОбщегоНазначенияРМККлиент.ВидТекущейОперации();
		СтруктураОтбора = Новый Структура("ТоварКЗамене", Истина);
		ТоварыКЗамене = Объект.Товары.НайтиСтроки(СтруктураОтбора);
		Для Каждого ТоварКЗамене Из ТоварыКЗамене Цикл
			Объект.Товары.Удалить(ТоварКЗамене);
		КонецЦикла;
		
		ДополнительныеДанные = ДополнительныеДанныеДляФискализации();
		Контекст = Новый Структура();
		ФискализироватьЧек(Контекст, ДополнительныеДанные, ОповещениеПриЗавершении,
			ВыбраннаяСистемаНалогообложения);
		ОбработатьИзменениеТаблицыТоваровНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПечатьНефискальныхДокументов

&НаКлиенте
Процедура РаспечататьТоварныйЧекКлиент()
	
	КассыККМИОрганизации = ПодключенныеКассыККМИОрганизации();
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("МассивКассККМ", КассыККМИОрганизации.МассивКассККМ);
	ПараметрыОткрытия.Вставить("МассивОрганизаций", КассыККМИОрганизации.МассивОрганизаций);
	ПараметрыОткрытия.Вставить("ТорговыйОбъект", Объект.ТорговыйОбъект);
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Чеки для печати'"));
	ПараметрыОткрытия.Вставить("РежимПечатиЧека", "ПечатьТоварногоЧека");
	ПараметрыОткрытия.Вставить("ВыводитьКомментарийКЧеку", ВыводитьКомментарийКЧеку);
	
	ОбработчикОповещенияОткрытияФормыВыбора = Новый ОписаниеОповещения(
		"ОповещениеОткрытьФормуВыбораЧекаПриПечатиПробитогоЧека", ЭтотОбъект);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораЧека",
		ПараметрыОткрытия, ЭтотОбъект, , , , ОбработчикОповещенияОткрытияФормыВыбора, Режим)
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьТоварныйЧекПоФискальномуЧеку(ЧекККМ)
	
	ЭтоПечатьТоварногоЧекаНаКассовомОборудовании = (СпособФормированияТоварногоЧека = 2);
	ЭтоПечатьТоварногоЧекаНаОфисномПринтере = (СпособФормированияТоварногоЧека = 1);
	
	Если ЭтоПечатьТоварногоЧекаНаКассовомОборудовании
		И (ЗначениеЗаполнено(ПринтерЧеков) ИЛИ ЗначениеЗаполнено(ПодключаемоеОборудование))
		И ЗначениеЗаполнено(ЧекККМ) Тогда
		
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗавершитьПовторнуюПечатьФискальногоЧека", ЭтотОбъект);
		МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(ЧекККМ);
		
		ОборудованиеВывода = ?(ЗначениеЗаполнено(ПринтерЧеков), ПринтерЧеков, ПодключаемоеОборудование);
		
		ШиринаЛенты = ШиринаЛенты(ОборудованиеВывода);
		ТекстЧека = ПодготовитьТекстТоварногоЧека(МассивДокументов, ШиринаЛенты);
		
		ПараметрыОперации = Новый Структура();
		ПараметрыОперации.Вставить("СтрокиТекста", ТекстЧека);
		
		МенеджерОборудованияРМККлиент.
			НачатьПечатьТекста(ОповещениеПриЗавершении, УникальныйИдентификатор, ОборудованиеВывода, ПараметрыОперации);
			
	ИначеЕсли ЭтоПечатьТоварногоЧекаНаОфисномПринтере И ЗначениеЗаполнено(ЧекККМ) Тогда
		СформироватьПечатнуюФормуТоварногоЧека(ЧекККМ);
	Иначе
		
		ТекстЗаголовка = НСтр("ru = 'Ошибка печати товарного чека'");
		ТекстСообщения = НСтр("ru = 'Не удалось распечатать товарный чек.'");
		ПоказатьПредупреждение(, ТекстСообщения, , ТекстЗаголовка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПечатнуюФормуТоварногоЧека(ЧекККМ)
	
	ОбщегоНазначенияРМККлиентПереопределяемый.СформироватьПечатнуюФормуТоварногоЧека(ЧекККМ, ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодготовитьТекстТоварногоЧека(МассивЧеков, ШиринаЛенты = Неопределено)
	
	ТекстЧека = "";
	Если ШиринаЛенты = Неопределено Тогда
		ОбщегоНазначенияРМКПереопределяемый.СформироватьТекстТоварногоЧека(МассивЧеков, ТекстЧека);
	Иначе
		ОбщегоНазначенияРМКПереопределяемый.СформироватьТекстТоварногоЧека(МассивЧеков, ТекстЧека, ШиринаЛенты);
	КонецЕсли;
	
	Возврат ТекстЧека;
	
КонецФункции

&НаКлиенте
Процедура НапечататьЗаказПокупателя(ЧекККМ)
	
	ЭтоПечатьТоварногоЧекаНаКассовомОборудовании = (СпособПечатиЗаказаПокупателя = 2);
	ЭтоПечатьТоварногоЧекаНаОфисномПринтере = (СпособПечатиЗаказаПокупателя = 1);
	
	Если ЭтоПечатьТоварногоЧекаНаКассовомОборудовании
		И (ЗначениеЗаполнено(ПринтерЧеков) ИЛИ ЗначениеЗаполнено(ПодключаемоеОборудование))
		И ЗначениеЗаполнено(ЧекККМ) Тогда
		
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗавершитьПовторнуюПечатьФискальногоЧека", ЭтотОбъект);
		МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(ЧекККМ);
		
		ОборудованиеВывода = ?(ЗначениеЗаполнено(ПринтерЧеков), ПринтерЧеков, ПодключаемоеОборудование);
		
		ШиринаЛенты = ШиринаЛенты(ОборудованиеВывода);
		ТекстЧека = ПодготовитьТекстЗаказа(МассивДокументов, ШиринаЛенты);
		
		ПараметрыОперации = Новый Структура();
		ПараметрыОперации.Вставить("СтрокиТекста", ТекстЧека);
		
		МенеджерОборудованияРМККлиент.
			НачатьПечатьТекста(ОповещениеПриЗавершении, УникальныйИдентификатор, ОборудованиеВывода, ПараметрыОперации);
			
	ИначеЕсли ЭтоПечатьТоварногоЧекаНаОфисномПринтере И ЗначениеЗаполнено(ЧекККМ) Тогда
		СформироватьПечатнуюФормуЗаказаПокупателя(ЧекККМ);
	Иначе
		
		ТекстЗаголовка = НСтр("ru = 'Ошибка печати товарного чека'");
		ТекстСообщения = НСтр("ru = 'Не удалось распечатать товарный чек.'");
		ПоказатьПредупреждение(, ТекстСообщения, , ТекстЗаголовка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПечатнуюФормуЗаказаПокупателя(ЧекККМ)
	
	ОбщегоНазначенияРМККлиентПереопределяемый.СформироватьПечатнуюФормуЗаказаПокупателя(ЧекККМ, ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодготовитьТекстЗаказа(МассивЧеков, ШиринаЛенты = Неопределено)
	
	ТекстЧека = "";
	Если ШиринаЛенты = Неопределено Тогда
		ОбщегоНазначенияРМКПереопределяемый.СформироватьТекстЗаказа(МассивЧеков, ТекстЧека);
	Иначе
		ОбщегоНазначенияРМКПереопределяемый.СформироватьТекстЗаказа(МассивЧеков, ТекстЧека, ШиринаЛенты);
	КонецЕсли;
	
	Возврат ТекстЧека;
	
КонецФункции 

&НаКлиенте
Функция ШиринаЛенты(ОборудованиеВывода)
	
	ШиринаЛенты = Неопределено;
	ПараметрыОборудования = МенеджерОборудованияРМККлиент.ПолучитьПодключенноеУстройство(ОборудованиеВывода);
	Если ПараметрыОборудования = Неопределено Тогда 
		ШиринаЛенты = Неопределено;
	ИначеЕсли ПараметрыОборудования.ТипыОборудования.ККТ 
		Или ПараметрыОборудования.ТипыОборудования.ПринтерЧеков
		Или ПараметрыОборудования.ТипыОборудования.ФискальныйРегистратор Тогда
		ШиринаЛенты = ПараметрыОборудования.ШиринаСтроки;
	КонецЕсли;
	
	Возврат ШиринаЛенты;
	
КонецФункции

#КонецОбласти

#Область Интерактивный_запуск_обмена_СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьУзлыОбмена()

	УзлыОбмена.Очистить();
	Результат = Новый Массив;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьУзлыОбменаРМК(Результат);
	
	Если ЗначениеЗаполнено(Результат) Тогда
		УзлыОбмена.ЗагрузитьЗначения(Результат);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РучныеСкидкиИОкругление

&НаКлиенте
Функция ДопустимоПрименениеСкидкиПоСтроке(СтрокаЧека, СкидкиРазрешены, ТекущийТоварСкидка)
	
	Возврат СкидкиРазрешены И Не (СтрокаЧека.РассчитанаСкидка Или ТекущийТоварСкидка = 0
		Или СтрокаЧека.Сумма = СтрокаЧека.СуммаСкидкиОплатыБонусом);
	
КонецФункции

&НаКлиенте
Функция СуммаРучнойСкидкиНаПозицию(СтрокаЧека)
	
	Результат = 0;
	
	Если ТипЗнч(СтрокаЧека) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		
		Если ЭтоСоставляющаяНабора(СтрокаЧека) Тогда
			
			СоставНабора = СоставНабораПоЭлементуНабора(СтрокаЧека, Объект.Товары);
			
			Для Каждого ПозицияНабора Из СоставНабора Цикл
				Результат = Результат + ПозицияНабора.СуммаСкидкиНаценки;
			КонецЦикла;
			
		Иначе
			Результат = СтрокаЧека.СуммаСкидкиНаценки;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Устанавливает текущей заданную страницу, меняет активность элементов формы.
//
// Параметры:
//  АктивнаяСтраница - ЭлементФормы - страница для установки текущей;
//  АктивностьЭлементовУправленияФормы - Булево - новое значение элементов формы.
//
&НаКлиенте
Процедура НастроитьИнтерфейсПримененияСкидкиНаЧек(АктивнаяСтраница, АктивностьЭлементовУправленияФормы)

	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(АктивнаяСтраница);
	УстановитьДоступностьЭлементаФормы(Элементы.ПанельУправленияЧеком, АктивностьЭлементовУправленияФормы);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, АктивностьЭлементовУправленияФормы);
	УстановитьДоступностьЭлементаФормы(Элементы.ПанельИзбранныхТоваров , АктивностьЭлементовУправленияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияСкидкиВСтрокеКорзины(СтрокаКорзины, ЗначениеСкидки, ЭтоСкидкаПроцентом = Истина)
	
	ЭтоПрименениеСкидки = (ЗначениеСкидки <> 0);
	
	СтрокаКорзины.РассчитанаСкидка = ЭтоПрименениеСкидки;
	
	Если ЭтоПрименениеСкидки Тогда
		
		Если ЭтоСкидкаПроцентом Тогда
			
			СтрокаКорзины.ПроцентСкидкиНаценки = ЗначениеСкидки;
			СтрокаКорзины.СуммаСкидкиНаценки = 0;
			
		Иначе
			
			СтрокаКорзины.СуммаСкидкиНаценки = ЗначениеСкидки;
			СтрокаКорзины.ПроцентСкидкиНаценки = 0;
			
		КонецЕсли;
			
	Иначе
		
		СтрокаКорзины.СуммаСкидкиНаценки = ЗначениеСкидки;
		СтрокаКорзины.ПроцентСкидкиНаценки = ЗначениеСкидки;
		
	КонецЕсли;
		
КонецПроцедуры

// Вычисляет сумму округления и распределяет ее между позициями корзины.
//
&НаКлиенте
Процедура ОкруглитьСуммуЧекаВПользуПокупателя()
	
	Если ТочностьОкругления > 0.01 Тогда
		
		ОтменитьОкругление();
		РассчитатьСуммуОкругленияВПользуПокупателя();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОкругление()
	
	СуммаОкругленияВПользуПокупателя = Объект.Товары.Итог("СуммаОкругленияВПользуПокупателя");
	
	Если СуммаОкругленияВПользуПокупателя > 0 Тогда
		
		Для Каждого СтрокаКорзины Из Объект.Товары Цикл
			
			Если СтрокаКорзины.Оплачена Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаКорзины.СуммаСкидкиНаценки = СтрокаКорзины.СуммаСкидкиНаценки - СтрокаКорзины.СуммаОкругленияВПользуПокупателя;
			СтрокаКорзины.СуммаОкругленияВПользуПокупателя = 0;
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаКорзины.ПолучитьИдентификатор());
			
		КонецЦикла;
		
		ПересчитатьИтогиТабличнойЧастиТовары(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуОкругленияВПользуПокупателя()
	
	РазличныеОрганизацииИСНО = РазличныеСНОВСпискеПокупок();
	Для Каждого ОрганизацияИСНОЧека Из РазличныеОрганизацииИСНО Цикл
	
		СуммаДоОкругления					= 0;
		СуммаТоваровБезОкругления			= 0;
		МассивКоэффициентов					= Новый Массив;
		ТочностьОкругленияПриРаспределении	= 2;
		РаспределенныеОкругления			= Новый Массив;
		
		ОтборСтрок = ОрганизацияИСНОЧека;
		ОтборСтрок.Вставить("Оплачена", Ложь);
		СтрокиСОтбором = Объект.Товары.НайтиСтроки(ОтборСтрок);
		
		ТоварыБезЗапрета = Объект.Товары.НайтиСтроки(Новый Структура("ЗапретРучныхСкидок,Подарок", Ложь, Ложь));
		ЕстьТоварыБезЗапрета = ТоварыБезЗапрета.Количество() > 0;
		КоличествоПродукцииБезОкругления = 0;
		
		Для каждого СтрокаКорзины Из СтрокиСОтбором Цикл
			
			Если СтрокаКорзины.ЭтоТабачнаяПродукция
				ИЛИ СтрокаКорзины.ЭтоПодарочныйСертификат Тогда
				КоличествоПродукцииБезОкругления = КоличествоПродукцииБезОкругления + 1;
			КонецЕсли;
			
			СуммаДоОкругления = СуммаДоОкругления + СтрокаКорзины.Сумма;
			
			Если (Не (СтрокаКорзины.ЗапретРучныхСкидок Или СтрокаКорзины.Подарок) ИЛИ НЕ ЕстьТоварыБезЗапрета)
				И НЕ СтрокаКорзины.ЭтоТабачнаяПродукция И НЕ СтрокаКорзины.ЭтоПодарочныйСертификат Тогда
				
				МассивКоэффициентов.Добавить(СтрокаКорзины.Сумма);
				
			КонецЕсли;
			
		КонецЦикла;
		
		СуммаПослеОкругления = Цел(СуммаДоОкругления / ТочностьОкругления) * ТочностьОкругления;
		СуммаОкругленийВЧеке = СуммаДоОкругления - СуммаПослеОкругления;
		
		Если СуммаОкругленийВЧеке > 0 И СуммаПослеОкругления > 0 И СтрокиСОтбором.Количество() > КоличествоПродукцииБезОкругления Тогда
			
			ИндексСтрокиДляРаспределенияПогрешностиОкругления = -1;
			СуммаСтрокиДляРаспределенияПогрешностиОкругления = 0;
			Итератор = 0;
			
			РаспределенныеОкругления = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
				СуммаОкругленийВЧеке, МассивКоэффициентов, ТочностьОкругленияПриРаспределении);
				
			ДоступныДанныеРаспределения = ЗначениеЗаполнено(РаспределенныеОкругления);
				
			ИдентификаторТекущейСтрокиДоРасчетаОкруглений = ТекущийТоварИдентификатор;
			
			СуммаПоСтрокам = 0;
			Для Каждого СтрокаКорзины Из СтрокиСОтбором Цикл
				
				ТекущийТоварИдентификатор = СтрокаКорзины.ПолучитьИдентификатор();
				
				Если (СтрокаКорзины.ЗапретРучныхСкидок Или СтрокаКорзины.Подарок) И ЕстьТоварыБезЗапрета 
					ИЛИ СтрокаКорзины.ЭтоТабачнаяПродукция ИЛИ СтрокаКорзины.ЭтоПодарочныйСертификат Тогда
					
					СуммаПоСтрокам = СуммаПоСтрокам + СтрокаКорзины.Сумма;
					Продолжить;
					
				КонецЕсли;
				
				Если ДоступныДанныеРаспределения Тогда
					
					Если СтрокаКорзины.Сумма > СуммаСтрокиДляРаспределенияПогрешностиОкругления Тогда
						
						СуммаСтрокиДляРаспределенияПогрешностиОкругления = СтрокаКорзины.Сумма;
						ИндексСтрокиДляРаспределенияПогрешностиОкругления = Итератор;
						
					КонецЕсли;
					
					ЗначениеСкидкиОкруглением = РаспределенныеОкругления[Итератор];
					СтрокаКорзины.СуммаОкругленияВПользуПокупателя = ЗначениеСкидкиОкруглением;
					
					Итератор = Итератор + 1;
					
				КонецЕсли;
				
				РассчитатьСуммуВСтрокеТабличнойЧасти(ТекущийТоварИдентификатор);
				
				СуммаПоСтрокам = СуммаПоСтрокам + СтрокаКорзины.Сумма;
				
			КонецЦикла;
			
			Погрешность = СуммаПослеОкругления + СуммаТоваровБезОкругления - СуммаПоСтрокам;
			
			Если Погрешность <> 0 И ИндексСтрокиДляРаспределенияПогрешностиОкругления >= 0 Тогда
				
				СтрокаКорзины = Объект.Товары.Получить(ИндексСтрокиДляРаспределенияПогрешностиОкругления);
				СтрокаКорзины.СуммаСкидкиНаценки = СтрокаКорзины.СуммаСкидкиНаценки - Погрешность;
				СтрокаКорзины.Сумма = СтрокаКорзины.Сумма + Погрешность;
				ПересчитатьСуммы(СтрокаКорзины);
				
			КонецЕсли;
			
			ТекущийТоварИдентификатор = ИдентификаторТекущейСтрокиДоРасчетаОкруглений;
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФФД12

&НаКлиенте
Процедура ДобавитьТоварПоДаннымМарки(ЭтоОбработкаСопоставленияТовара, СтруктураОтложенногоПоказаПредупреждения = Неопределено)

	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	ЭтоВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
	Если Не ЭтоВозврат Тогда
		РассчитатьСуммуОплатыБонусами(СтруктураОтложенногоПоказаПредупреждения);
	КонецЕсли;
	ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
	НастроитьДоступностьПробитьЧек();

	Если ЭтоОбработкаСопоставленияТовара Тогда
		
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		ДанныеДляРучногоСопоставления = Неопределено;
		
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Функция КонтекстПроверкиКонтрольнойМарки()
	
	КонтекстПроверкиКонтрольнойМарки = Новый Структура();
	КонтекстПроверкиКонтрольнойМарки.Вставить("КодМаркировки", "");
	КонтекстПроверкиКонтрольнойМарки.Вставить("ОсобенностьУчета", Неопределено);
	КонтекстПроверкиКонтрольнойМарки.Вставить("КонтекстВызова", "");
	КонтекстПроверкиКонтрольнойМарки.Вставить("РезультатЛокальнойПроверки", РезультатЛокальнойПроверки());
	КонтекстПроверкиКонтрольнойМарки.Вставить("РезультатУдаленнойПроверки", РезультатУдаленнойПроверки());
	КонтекстПроверкиКонтрольнойМарки.Вставить("ИдентификаторЗапроса", "");
	КонтекстПроверкиКонтрольнойМарки.Вставить("ЭтоОбработкаСопоставленияТовара", Ложь);
	КонтекстПроверкиКонтрольнойМарки.Вставить("Организация", Неопределено);
	
	КонтекстПроверкиКонтрольнойМарки.Вставить("ПроверкаМаркиВБиблиотекеГосИС", Ложь);
	КонтекстПроверкиКонтрольнойМарки.Вставить("ПодтверждениеПродажиМаркиГосИС", Ложь);
	
	Возврат КонтекстПроверкиКонтрольнойМарки;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьКонтрольнуюМарку(КонтекстПроверкиКонтрольнойМарки)
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если ЕстьСвойство(КонтекстПроверкиКонтрольнойМарки, "КодМаркировки")
		И ЗначениеЗаполнено(КонтекстПроверкиКонтрольнойМарки.КодМаркировки) Тогда

		РассчитатьСуммуВСтрокеТабличнойЧасти(ТекущийТоварИдентификатор);
		
		ОтборПоКодуМарки = Новый Структура();
		ОтборПоКодуМарки.Вставить("КодМаркировки", КонтекстПроверкиКонтрольнойМарки.КодМаркировки);
		РезультатПоиска = Объект.Товары.НайтиСтроки(ОтборПоКодуМарки);
		
		ТребуетсяПроверкаКодаМаркировкиДляСтрок = Ложь;
		Если РезультатПоиска.Количество() = 0 Тогда
			ТребуетсяПроверкаКодаМаркировкиДляСтрок = Истина;
		Иначе
			Для Каждого СтрокаРезультата Из РезультатПоиска Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаРезультата.КонтрольнаяМарка)
					Или СтрокаРезультата.ТребуетсяПроверкаКодаМаркировки Тогда
						ТребуетсяПроверкаКодаМаркировкиДляСтрок = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ТребуетсяПроверкаКодаМаркировкиДляСтрок Тогда
			
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
			ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект,
				Элементы.ГруппаПодтвержденияКонтрольнойМарки);
			ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПодтверждениеПродажиОжиданиеПроверки);
			
			УстановитьДоступностьЭлементовРабочейОбластиФормы(Ложь);
			
			ВременныйКонтекстПроверкиМарки = КонтекстПроверкиКонтрольнойМарки;
			
			Отбор = Новый Структура("Организация", ВременныйКонтекстПроверкиМарки.Организация);
			СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
			Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
			Сутки = 86400;
			
			СменаВалидна = ((Дата - СтрокаКассы.НачалоКассовойСмены) < Сутки);
			
		Иначе
			
			Если РезультатПоиска.Количество() > 0 Тогда
				Элементы.Товары.ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеТекущегоСостоянияККТЗавершение(РезультатВыполнения, Контекст) Экспорт
	
	Если РезультатВыполнения.Результат И РезультатВыполнения.СтатусСмены = 2 Тогда
		// Замедление до секунды, чтобы касса успевала отработать
		ПодключитьОбработчикОжидания("ЗапроситьКонтрольныеМарки", 1, Истина);
	Иначе
		
		ОтборДляПоискаПоМарке = Новый Структура("КодМаркировки",
			ВременныйКонтекстПроверкиМарки.КодМаркировки);
		
		СтрокиКУдалению = Объект.Товары.НайтиСтроки(ОтборДляПоискаПоМарке);
		
		Если СтрокиКУдалению.Количество() > 0 Тогда
			Объект.Товары.Удалить(СтрокиКУдалению[0]);
		КонецЕсли;
		
		ПересчитатьИтогиТабличнойЧастиТовары();
		РассчитатьСуммуОплатыБонусами();
		
		Если Объект.Товары.Количество() = 0 Тогда
			СоздатьНовыйНабор();
		КонецЕсли;
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
		
		ВременныйКонтекстПроверкиМарки = Неопределено;
		ОжидатьВводМарки = Ложь;
		ДанныеДляРучногоСопоставления = Неопределено;
		УстановитьДоступностьЭлементовРабочейОбластиФормы(Истина);
		
		ТекстЗаголовка = НСтр("ru = 'Ошибка добавления маркированного товара.'");
		ТекстСообщения = НСтр("ru = 'Кассовая смена закрыта или истекла.'");
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
		ОбработатьИзменениеТаблицыТоваровНаКлиенте();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗапросКонтрольныхМарок(РезультатВыполнения, Контекст) Экспорт
	
	ЕстьДанныеОтвета = ЕстьСвойство(РезультатВыполнения, "Результат");
	
	Если ЕстьДанныеОтвета И РезультатВыполнения.Результат Тогда
		
		ДанныеПроверки = ДанныеПроверкиКодаМаркировки(РезультатВыполнения);
		
		Если ЗначениеЗаполнено(ДанныеПроверки) И ТипЗнч(ДанныеПроверки) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(Контекст.РезультатЛокальнойПроверки, ДанныеПроверки);
		КонецЕсли;
		
	ИначеЕсли ЕстьДанныеОтвета Тогда
		
		Если Не Контекст.КонтекстВызова = "ПроверитьКодыМаркировкиПриПродолженииЧека"
			И Не Контекст.КонтекстВызова = "ПроверитьКодыМаркировкиПередПробитиемЧека" Тогда
			ОтборДляПоискаПоМарке = Новый Структура("КодМаркировки",
				ВременныйКонтекстПроверкиМарки.КодМаркировки);
			
			СтрокиКУдалению = Объект.Товары.НайтиСтроки(ОтборДляПоискаПоМарке);
			
			Если СтрокиКУдалению.Количество() > 0 Тогда
				Объект.Товары.Удалить(СтрокиКУдалению[0]);
			КонецЕсли;
			
			ПересчитатьИтогиТабличнойЧастиТовары();
			РассчитатьСуммуОплатыБонусами();
			
			Если Объект.Товары.Количество() = 0 Тогда
				СоздатьНовыйНабор();
			КонецЕсли;
		КонецЕсли;
		
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		
		УстановитьДоступностьЭлементовРабочейОбластиФормы(Истина);
		
		Если ЕстьСвойство(РезультатВыполнения, "ТекущаяСменаНеВалидна") Тогда
			ТекстСообщения = НСтр("ru = 'Кассовая смена закрыта или истекла.'");
		Иначе
			Если ЕстьСвойство(РезультатВыполнения, "ОписаниеОшибки") Тогда
				ТекстСообщения = СтрШаблон("%1", РезультатВыполнения.ОписаниеОшибки);
			Иначе
				ТекстСообщения = НСтр("ru = 'Не удалось завершить запрос контрольной марки.'");
			КонецЕсли;
		КонецЕсли;
		
		ТекстЗаголовка = НСтр("ru = 'Ошибка добавления маркированного товара.'");
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
		
		Если Контекст.КонтекстВызова = "ПроверитьКодыМаркировкиПриПродолженииЧека" Тогда
			ПараметрыПроверкиКодовМаркировки.ЕстьОшибки = Истина;
			ПроверитьКодМаркировкиПриПродолженииЧека();
		ИначеЕсли Контекст.КонтекстВызова = "ПроверитьКодыМаркировкиПередПробитиемЧека" Тогда
			ПараметрыПроверкиКодовМаркировки.ЕстьОшибки = Истина;
			ПроверитьКодыМаркировкиПередПробитием();
		Иначе
			ОбработатьИзменениеТаблицыТоваровНаКлиенте();
		КонецЕсли;
		
		ВременныйКонтекстПроверкиМарки = Неопределено;
		ОжидатьВводМарки = Ложь;
		ДанныеДляРучногоСопоставления = Неопределено;
		
		Возврат;
		
	КонецЕсли;
	
	// Замедление, чтобы касса успевала отработать
	ЗаполнитьЗначенияСвойств(ВременныйКонтекстПроверкиМарки, Контекст);
	ВременныйКонтекстПроверкиМарки = Контекст;
	Если ОжидатьПолученияОтветаИСМП Тогда
		ПодключитьОбработчикОжидания("ПолучитьРезультатыЗапросаКМ", 0.3, Истина);
	Иначе
		ПолучитьРезультатыЗапросаКМ();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПолучениеРезультатовЗапросаПроверкиКодаМаркировкиОтИСМП(РезультатВыполнения, Контекст) Экспорт
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
		
		ДанныеРезультатаПроверки = ДанныеПроверкиКодаМаркировки(РезультатВыполнения);
		
		Если ЗначениеЗаполнено(ДанныеРезультатаПроверки) Тогда
			
			ЗаполнитьРезультатУдаленнойПроверки(Контекст.РезультатУдаленнойПроверки, ДанныеРезультатаПроверки);
			ЗаполнитьЗначенияСвойств(ВременныйКонтекстПроверкиМарки, Контекст);
			
			РезультатПроверкиККМ = Контекст.РезультатЛокальнойПроверки;
			РезультатПроверкиИСМП = Контекст.РезультатУдаленнойПроверки;
			
			ТребуетсяПовторнаяУдаленнаяПроверка = ТребуетсяПовторныйЗапросВОИСМ(РезультатПроверкиИСМП);
			ПроведенаПроверкаОИСМ = ?(ЕстьСвойство(РезультатВыполнения, "РезультатПроверкиОИСМ"),
				РезультатВыполнения.РезультатПроверкиОИСМ, Ложь);
			
			Если ТребуетсяПовторнаяУдаленнаяПроверка Тогда
				
				Контекст.РезультатУдаленнойПроверки = РезультатУдаленнойПроверки();
				ВременныйКонтекстПроверкиМарки = Контекст;
				// Замедление до секунды, чтобы касса успевала отработать
				ПодключитьОбработчикОжидания("ПолучитьРезультатыЗапросаКМ", 0.3, Истина);
				
			ИначеЕсли ПроведенаПроверкаОИСМ Или Не ОжидатьПолученияОтветаИСМП
				Или ВременныйКонтекстПроверкиМарки.КонтекстВызова = "ПроверитьКодыМаркировкиПриПродолженииЧека" Тогда
				НачатьПодтверждениеМарки(Контекст);
			Иначе
				
				ОбщегоНазначенияРМККлиентПереопределяемый.ОбработатьОшибкуПроверкиКодаМаркировки(ЭтотОбъект,
					РезультатПроверкиККМ, РезультатПроверкиИСМП);
				
				СтраницаДиалога = Элементы.ПодтверждениеПродажиБезПроверкиМарки;
				ОбработатьОшибкуПроверкиМарки(Контекст, СтраницаДиалога);
				
			КонецЕсли;
			
		Иначе
			
			ТекстЗаголовка = НСтр("ru = 'Не удалось получить данные ответа проверки кода маркировки в ИСМП.'");
			ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
			
			Если ВременныйКонтекстПроверкиМарки.КонтекстВызова = "ПроверитьКодыМаркировкиПриПродолженииЧека" Тогда
				ПараметрыПроверкиКодовМаркировки.ЕстьОшибки = Истина;
				ПроверитьКодМаркировкиПриПродолженииЧека();
			ИначеЕсли ВременныйКонтекстПроверкиМарки.КонтекстВызова = "ПроверитьКодыМаркировкиПередПробитиемЧека" Тогда
				ПараметрыПроверкиКодовМаркировки.ЕстьОшибки = Истина;
				ПроверитьКодыМаркировкиПередПробитием();
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВременныйКонтекстПроверкиМарки.КонтекстВызова = "ПроверитьКодыМаркировкиПриПродолженииЧека" Тогда
		ПараметрыПроверкиКодовМаркировки.ЕстьОшибки = Истина;
		ТекстСообщения = СтрШаблон( НСтр("ru = 'Удаленная проверка кода маркировки завершилась с ошибкой: %1.'"),
			РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ПроверитьКодМаркировкиПриПродолженииЧека();
	ИначеЕсли ВременныйКонтекстПроверкиМарки.КонтекстВызова = "ПроверитьКодыМаркировкиПередПробитиемЧека" Тогда
		ПараметрыПроверкиКодовМаркировки.ЕстьОшибки = Истина;
		ТекстСообщения = СтрШаблон( НСтр("ru = 'Удаленная проверка кода маркировки завершилась с ошибкой: %1.'"),
			РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ПроверитьКодыМаркировкиПередПробитием();
		
	Иначе
		
		ОбщегоНазначенияРМККлиентПереопределяемый.ОбработатьОшибкуПроверкиКодаМаркировки(ЭтотОбъект);
		
		СтраницаДиалога = Элементы.ПодтверждениеПродажиБезПроверкиМарки;
		ОбработатьОшибкуПроверкиМарки(Контекст, СтраницаДиалога);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборТовара(ТекущийВыбор, ДействующиеЗапретыПродаж = Неопределено)
	
	КодМарки = ?(ЕстьСвойство( ДанныеДляРучногоСопоставления, "КодМарки"),
			ДанныеДляРучногоСопоставления.КодМарки, "");
			
	ОсобенностьУчета = Неопределено;
	Если ТекущийВыбор.Свойство("ОсобенностьУчета") Тогда
		ОсобенностьУчета = ТекущийВыбор.ОсобенностьУчета;
	КонецЕсли;
	
	ПсевдоСтрока = Новый Структура;
	ПсевдоСтрока.Вставить("Номенклатура", ТекущийВыбор.Номенклатура);
	ПсевдоСтрока.Вставить("Организация");
	Если ТекущийВыбор.Свойство("Организация") Тогда
		ПсевдоСтрока.Организация = ТекущийВыбор.Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодМарки) Тогда
		ЗаполнитьОрганизациюПродажи(ПсевдоСтрока);
		Если НЕ ЗначениеЗаполнено(ПсевдоСтрока.Организация) Тогда
			ПсевдоСтрока.Организация = ОсновнаяОрганизация;
		Иначе
			
			ОтборПоОрганизации = Новый Структура("Организация", ПсевдоСтрока.Организация);
			КассыККМПоОрганизации = ТаблицаКассККМОрганизаций.НайтиСтроки(ОтборПоОрганизации);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ПроверкаМаркиВозможна(КодМарки, ОсобенностьУчета, ПсевдоСтрока.Организация) Тогда
		
		КонтекстПроверкиКонтрольнойМарки = КонтекстПроверкиКонтрольнойМарки();
		ЗаполнитьЗначенияСвойств(КонтекстПроверкиКонтрольнойМарки, ТекущийВыбор);
		КонтекстПроверкиКонтрольнойМарки.Организация = ПсевдоСтрока.Организация;
		КонтекстПроверкиКонтрольнойМарки.КодМаркировки = КодМарки;
		КонтекстПроверкиКонтрольнойМарки.КонтекстВызова = "ОбработатьВыборТовара";
		
		КонтекстПроверкиКонтрольнойМарки.Вставить("ТекущийВыбор", ТекущийВыбор);
		КонтекстПроверкиКонтрольнойМарки.Вставить("ДействующиеЗапретыПродаж", ДействующиеЗапретыПродаж);
		
		ОбработатьКонтрольнуюМарку(КонтекстПроверкиКонтрольнойМарки);
		
	Иначе
		ОбработатьВыборТовараНаКлиенте(ТекущийВыбор, ДействующиеЗапретыПродаж);
		Если Не (ТекущийВыбор.Свойство("ПропуститьКонтроль") И ТекущийВыбор.ПропуститьКонтроль = Истина) Тогда
			ЭтапыКонтроляПродаж = ИнтерфейсРМКСлужебныйКлиент.ЭтапыКонтроляПродаж();
			ИнтерфейсРМКСлужебныйКлиент.ВыполнитьПроверкиКонтроляПродаж(ЭтотОбъект, ЭтапыКонтроляПродаж.ДобавлениеТовара);
		КонецЕсли;
	КонецЕсли;
	
	ОтобразитьСопутствующиеТоварыПриДобавленииНоменклатуры(ТекущийВыбор);
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеЗапросаКМ(ПроверяемыйКодМарки, Количество = 1)
	
	ПараметрыЗапроса = МенеджерОборудованияРМККлиентСервер.ПараметрыЗапросКМ();
	ЭтоВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
	
	СтатусыМаркированногоТовара = МенеджерОборудованияРМККлиент.ПланируемыеСтатусыМаркированногоТовара();
	
	ПланируемыйСтатусТовара = СтатусыМаркированногоТовара.Получить("ШтучныйТоварРеализован");
	
	Если ЭтоВозврат Тогда
		ПланируемыйСтатусТовара = СтатусыМаркированногоТовара.Получить("ШтучныйТоварВозвращен");
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если Не ТекущаяСтрока = Неопределено Тогда
		
		ПараметрыЗапроса.Наименование = ТекущаяСтрока.ПредставлениеНоменклатураХарактеристика;
		Если ТекущаяСтрока.ПоштучноеВыбытие Тогда
			
			ПланируемыйСтатусТовара = СтатусыМаркированногоТовара.Получить("МерныйТоварВСтадииРеализации");
			
			Если ЭтоВозврат Тогда
				ПланируемыйСтатусТовара = СтатусыМаркированногоТовара.Получить("ЧастьТовараВозвращена");
			КонецЕсли;
			
			Если ОбщегоНазначенияРМККлиентСервер.ЭтоПивнаяПродукция(ТекущаяСтрока.ОсобенностьУчета) Тогда
				Количество = ТекущаяСтрока.Количество;
				ПараметрыЗапроса.МераКоличестваПредметаРасчета = МенеджерОборудованияРМККлиент.МераКоличестваПредметаРасчетаЛитр();
			Иначе
				ПараметрыЗапроса.ДробноеКоличество.Числитель = ТекущаяСтрока.ЧастичноеВыбытиеКоличество;
				ПараметрыЗапроса.ДробноеКоличество.Знаменатель = ТекущаяСтрока.КоличествоВПотребительскойУпаковке;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ИдентификаторТекущейСессииПроверкиМарок		= Строка(Новый УникальныйИдентификатор);
	ПараметрыЗапроса.ИдентификаторЗапроса		= ИдентификаторТекущейСессииПроверкиМарок;
	ПараметрыЗапроса.ПланируемыйСтатусТовара	= ПланируемыйСтатусТовара;
	ПараметрыЗапроса.КонтрольнаяМарка			= ПроверяемыйКодМарки;
	ПараметрыЗапроса.ОжидатьПолучениеОтветаОИСМ	= ОжидатьПолученияОтветаИСМП;
	ПараметрыЗапроса.Количество					= Количество;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПривестиКодМаркировкиКBase64(КодМаркировки)
	
	СимволGS1 = МенеджерОборудованияРМККлиентСервер.РазделительGS1();
	Разделитель = МенеджерОборудованияРМККлиентСервер.ЭкранированныйСимволGS1();
	КодМаркировкиОригинал = СтрЗаменить(КодМаркировки, Разделитель, СимволGS1);
	
	Возврат МенеджерОборудованияРМККлиентСервер.ШтрихкодВBase64(КодМаркировкиОригинал);
	
КонецФункции

&НаКлиенте
Функция ПроверкаМаркиВозможна(КодМарки, ОсобенностьУчета, Организация)
	
	Результат = Ложь;
	
	Если НЕ ЗначениеЗаполнено(КодМарки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Отбор = Новый Структура("Организация", Организация);
	СтрокиКасс = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор);
	Если СтрокиКасс.Количество() = 0 Тогда
		Отбор = Новый Структура("Организация", ОсновнаяОрганизация);
		СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
	Иначе
		СтрокаКассы = СтрокиКасс[0];
	КонецЕсли;
	
	ПоддерживаетПроверкуКодовМаркировки = СтрокаКассы.ПоддерживаетПроверкуКодовМаркировки;
	
	Если НЕ ПоддерживаетПроверкуКодовМаркировки Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЭтоАлкогольнаяМаркированнаяПродукция =
		(ОсобенностьУчета = ОбщегоНазначенияРМККлиент.ОсобенностьУчетаАлкоголь());
	ЭтоИзделиеИзНатуральногоМеха =
		(ОсобенностьУчета = ОбщегоНазначенияРМККлиент.ОсобенностьУчетаГИСМ());
		
	Результат = НЕ(ЭтоАлкогольнаяМаркированнаяПродукция ИЛИ ЭтоИзделиеИзНатуральногоМеха);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОсобенностьУчетаНоменклатуры(Номенклатура)
	
	ОтборПоТовару = Новый Структура("Номенклатура", Номенклатура);
	СтрокиКорзины = Объект.Товары.НайтиСтроки(ОтборПоТовару);
	Результат = ?(СтрокиКорзины.Количество() > 0,
		СтрокиКорзины[0].ОсобенностьУчета,
		Неопределено);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция РезультатЛокальнойПроверки()

	Результат = Новый Структура();
	Результат.Вставить("КодМаркировкиПроверен", Ложь);
	Результат.Вставить("РезультатПроверки", Ложь);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция РезультатУдаленнойПроверки()

	Результат = Новый Структура();
	Результат.Вставить("РезультатПроверкиОИСМ", Ложь);
	Результат.Вставить("КодОбработкиЗапроса", -1);
	Результат.Вставить("КодРезультатаПроверкиОИСМ", -1);
	Результат.Вставить("РезультатПроверкиСведенийОТоваре", "");
	Результат.Вставить("РезультатПроверкиСведенийОТовареПФ", "");
	Результат.Вставить("РезультатОбработкиЗапроса",
		НСтр("ru = 'Ответ из ""Честного знака"" не получен'"));
	Результат.Вставить("РезультатПроверкиОИСМПредставление", "");
	Результат.Вставить("СтатусОбработкиЗапроса",
		МенеджерОборудованияРМККлиент.СтатусОбработкиЗапросаПоУмолчанию());
	Результат.Вставить("СтатусРезультата",
		МенеджерОборудованияРМККлиент.СтатусРезультатаПоУмолчанию());
	Результат.Вставить("СтатусТовара",
		МенеджерОборудованияРМККлиент.СтатусТовараПоУмолчанию());
			
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ДанныеПроверкиКодаМаркировки(ИсходныеДанные)

	Результат = Неопределено;
	
	Если ТипЗнч(ИсходныеДанные) = Тип("Структура")
		И ЗначениеЗаполнено(ИсходныеДанные) Тогда
			Результат = ИсходныеДанные;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьРезультатУдаленнойПроверки(РезультатПроверки, ИсходныеДанные)

	ЗаполнитьЗначенияСвойств(РезультатПроверки, ИсходныеДанные);
	
	Если ЕстьСвойство(ИсходныеДанные, "КодОбработкиЗапроса")
		И ТипЗнч(ИсходныеДанные.КодОбработкиЗапроса) = Тип("Число") Тогда
		
			КодОбработкиЗапроса = ИсходныеДанные.КодОбработкиЗапроса;
			
			Если КодОбработкиЗапроса = 0 Тогда
				РезультатОбработкиЗапроса = НСтр("ru = 'Формат запроса и кода маркировки корректны'");
			ИначеЕсли КодОбработкиЗапроса = 1 Тогда
				РезультатОбработкиЗапроса = НСтр("ru = 'Некорректный формат запроса'");
			ИначеЕсли КодОбработкиЗапроса = 2 Тогда
				РезультатОбработкиЗапроса = НСтр("ru = 'Некорректный формат кода маркировки'");
			Иначе
				РезультатОбработкиЗапроса = НСтр("ru = 'Ответ из ""Честного знака"" не распознан'");
			КонецЕсли;
			
			РезультатПроверки.РезультатОбработкиЗапроса = РезультатОбработкиЗапроса;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ТребуетсяПовторныйЗапросВОИСМ(ДанныеОИСМ)

	Результат = Ложь;
	
	Если ЕстьСвойство(ДанныеОИСМ, "СтатусРезультата") Тогда
		Результат = (ДанныеОИСМ.СтатусРезультата = МенеджерОборудованияРМККлиент.СтатусРезультатаОжидается());
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура НачатьПодтверждениеМарки(Контекст)
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПодтверждениеКонтрольнойМарки(РезультатВыполнения, Контекст) Экспорт
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗакрытиеСессииПроверкиКонтрольныхМарок(РезультатВыполнения, ПараметрыВыполнения) Экспорт

	Если ЕстьСвойство(РезультатВыполнения, "Результат") И НЕ РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = НСтр("ru = 'Не удалось закрыть сессию проверки кода маркировки'");
		
		Если ЕстьСвойство(РезультатВыполнения, "ОписаниеОшибки") Тогда
			ТекстСообщения= СтрШаблон("%1: %2", ТекстСообщения, РезультатВыполнения.ОписаниеОшибки);
		КонецЕсли;
		
		ТекстЗаголовка = НСтр("ru = 'Ошибка закрытия сессии проверки кода маркировки'");
		ПоказатьПредупреждение(, ТекстСообщения, , ТекстЗаголовка);
		
	КонецЕсли;
	
	ВременныйКонтекстПроверкиМарки = Неопределено;
	ИдентификаторТекущейСессииПроверкиМарок = "";
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборТовараСервер(ТекущийВыбор, ДополнительныеДанные = Неопределено)
	
	МассивТоваров = Новый Массив;
	МассивТоваров.Добавить(ТекущийВыбор.Номенклатура);
	Если ТекущийВыбор.Свойство("Характеристика") И Не ДополнительныеДанные = Неопределено Тогда
		ДополнительныеДанные.Характеристика = ТекущийВыбор.Характеристика;
	КонецЕсли;
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьТаблицуТовары(МассивТоваров, ТаблицаТовары, ДополнительныеДанные);
	
	ЕстьСерияПартия = Ложь;
	ДобавлятьСерийныйТоварНовойСтрокой = Истина;
	Если ЕстьСвойство(ТекущийВыбор, "Серия") Или ЕстьСвойство(ТекущийВыбор, "Партия") Тогда
		ЕстьСерияПартия = Истина;
	КонецЕсли;
	Если ЕстьСвойство(ТекущийВыбор, "УникальностьСерии") И ЕстьСвойство(ТекущийВыбор, "Серия") Тогда
		Если Не ТекущийВыбор.УникальностьСерии И ЗначениеЗаполнено(ТекущийВыбор.Серия) Тогда
			ДобавлятьСерийныйТоварНовойСтрокой = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
		
		Если СтрокаТаблицы.Маркируемый Тогда
			
			Если ЭтоЧекКоррекции Тогда
				Возврат;
			КонецЕсли;
			ДобавитьСтрокуВТабличнуюЧасть(СтрокаТаблицы, ТекущийВыбор, Истина);
			Возврат;
			
		ИначеЕсли (СтрокаТаблицы.НеобходимоДобавитьСтроку И Не ЕстьСерияПартия) ИЛИ РежимВыбораПодарка Тогда
			
			ДобавитьСтрокуВТабличнуюЧасть(СтрокаТаблицы, ТекущийВыбор);
			Возврат;
			
		ИначеЕсли ЕстьСерияПартия И ДобавлятьСерийныйТоварНовойСтрокой И СтрокаТаблицы.НеобходимостьВводаСерии Тогда
			
			ДобавитьСтрокуВТабличнуюЧасть(СтрокаТаблицы, ТекущийВыбор);
			Возврат
			
		ИначеЕсли СтрокаТаблицы.ЭтоНабор Тогда
			
			ДобавитьНаборВТабличнуюЧасть(ТекущийВыбор, ДополнительныеДанные);
			Возврат;
			
		Иначе
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Номенклатура", ТекущийВыбор.Номенклатура);
		Если ТекущийВыбор.Свойство("Характеристика") Тогда
			СтруктураПоиска.Вставить("Характеристика", ТекущийВыбор.Характеристика);
		КонецЕсли;
		Если ТекущийВыбор.Свойство("Партия") Тогда
			ПартияВТаблице = Метаданные.ОпределяемыеТипы.ПартияРМК.Тип.ПривестиЗначение(ТекущийВыбор.Партия);
			СтруктураПоиска.Вставить("Партия", ПартияВТаблице);
		КонецЕсли;
		Если ТекущийВыбор.Свойство("Серия") Тогда
			СерияВТаблице = Метаданные.ОпределяемыеТипы.СерияРМК.Тип.ПривестиЗначение(ТекущийВыбор.Серия);
			СтруктураПоиска.Вставить("Серия", СерияВТаблице);
		КонецЕсли;
		УпаковкаВТаблице = Метаданные.ОпределяемыеТипы.УпаковкаРМК.Тип.ПривестиЗначение(ТекущийВыбор.Упаковка);
		СтруктураПоиска.Вставить("Упаковка", УпаковкаВТаблице);
		СтруктураПоиска.Вставить("ЭтоНабор", Ложь);
		СтруктураПоиска.Вставить("ТоварКЗамене", Ложь);
		СтруктураПоиска.Вставить("ЗаказПокупателя", Метаданные.ОпределяемыеТипы.ЗаказПокупателяРМК.Тип.ПривестиЗначение(Неопределено));
		
		МассивСтрок = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрок.Количество() = 0 Или ДобавитьТоварОтдельнойСтрокой(СтрокаТаблицы) Тогда
			ДобавитьСтрокуВТабличнуюЧасть(СтрокаТаблицы, ТекущийВыбор);
		Иначе
			ИзменитьСтрокуВТабличнойЧасти(МассивСтрок[0], ТекущийВыбор);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПодтверждениеНеВыбытияКонтрольнойМарки(РезультатВыполнения, Контекст) Экспорт
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
		
		ОтборДляПоискаПоМарке = Новый Структура("КодМаркировки",
		Контекст.КодМаркировки);
		
		СтрокиКУдалению = Объект.Товары.НайтиСтроки(ОтборДляПоискаПоМарке);
		
		Если СтрокиКУдалению.Количество() > 0 Тогда
			
			ВозможноЗакрытьСессиюРегистрацииМарок = ККМПоддерживаетПроверкуКодовМаркировки
				И ЗначениеЗаполнено(СтрокиКУдалению[0].КодМаркировки)
				И ЗначениеЗаполнено(ИдентификаторТекущейСессииПроверкиМарок)
				И ВозможноЗакрытьСессиюРегистрацииМарок();
			
			Если ВозможноЗакрытьСессиюРегистрацииМарок Тогда
				ЗакрытьСессиюРегистрацииМарок();
			КонецЕсли;
				
			Объект.Товары.Удалить(СтрокиКУдалению[0]);
			
		КонецЕсли;
		
		ПересчитатьИтогиТабличнойЧастиТовары();
		РассчитатьСуммуОплатыБонусами();
		
		Если Объект.Товары.Количество() > 0 Тогда
			ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
		Иначе
			СоздатьНовыйНабор();
			НастроитьЭлементыФормы(Элементы.Страницы.ТекущаяСтраница, Ложь);
		КонецЕсли;
		
		ОбработатьИзменениеТаблицыТоваровНаКлиенте();
		ВременныйКонтекстПроверкиМарки = Неопределено;
		
	Иначе
		
		Если ЕстьСвойство(РезультатВыполнения, "ОписаниеОшибки") Тогда
			
			ТекстЗаголовка = НСтр("ru = 'Подтверждение не выбытия контрольной марки завершено с ошибкой.'");
			ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ВозможноЗакрытьСессиюРегистрацииМарок(ПриУдаленииВсехСтрок = Ложь)
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("Оплачена", Ложь);
	НеоплаченныеПозиции = Объект.Товары.НайтиСтроки(ОтборСтрок);
	
	ОтборСтрок.Вставить("КодМаркировки", "");
	НеоплаченныеПозицииБезМарок = Объект.Товары.НайтиСтроки(ОтборСтрок);
	
	КоличествоНеоплаченныхПозицийСМарками =
	НеоплаченныеПозиции.Количество() - НеоплаченныеПозицииБезМарок.Количество();
	
	Если ПриУдаленииВсехСтрок Тогда
		Возврат КоличествоНеоплаченныхПозицийСМарками > 0;
	КонецЕсли;
	
	Возврат КоличествоНеоплаченныхПозицийСМарками <= 1;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОрганизациюПродажи(НоваяСтрока)
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьОрганизациюПродажи(НоваяСтрока, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборТовараНаКлиенте(Знач ТекущийВыбор, Знач ДействующиеЗапретыПродаж = Неопределено)
	
	ЕстьХарактеристика = ТекущийВыбор.Свойство("Характеристика");
	ЕстьСерия = ТекущийВыбор.Свойство("Серия");
	ЕстьПартия = ТекущийВыбор.Свойство("Партия");
	
	ПартияВТаблице = Неопределено;
	Если ТекущийВыбор.Свойство("Партия") Тогда
		Типы = Новый Массив;
		Типы.Добавить(ТипЗнч(ПустаяСтрокаТаблицыТоваров.Партия));
		ОписаниеТипа = Новый ОписаниеТипов(Типы);
		ПартияВТаблице = ОписаниеТипа.ПривестиЗначение(ТекущийВыбор.Партия);
	КонецЕсли;
	
	СерияВТаблице = Неопределено;
	Если ТекущийВыбор.Свойство("Серия") Тогда
		Типы = Новый Массив;
		Типы.Добавить(ТипЗнч(ПустаяСтрокаТаблицыТоваров.Серия));
		ОписаниеТипа = Новый ОписаниеТипов(Типы);
		СерияВТаблице = ОписаниеТипа.ПривестиЗначение(ТекущийВыбор.Серия);
	КонецЕсли;
	
	УпаковкаВТаблице = Неопределено;
	Типы = Новый Массив;
	Типы.Добавить(ТипЗнч(ПустаяСтрокаТаблицыТоваров.Упаковка));
	ОписаниеТипа = Новый ОписаниеТипов(Типы);
	УпаковкаВТаблице = ОписаниеТипа.ПривестиЗначение(ТекущийВыбор.Упаковка);

	СтрокаТовара = Неопределено;
	Если ТекущийВыбор.Свойство("СтрокаТовара") Тогда
		СтрокаТовара = ТекущийВыбор.СтрокаТовара;
		ТекущийВыбор = ТекущийВыбор.СтруктураНайденнойНоменклатуры;
	ИначеЕсли ТекущийВыбор.Свойство("ИндексКэшаСтрокиТовара")
			И ЗначениеЗаполнено(ТекущийВыбор.ИндексКэшаСтрокиТовара) Тогда
		КэшПлитки = КэшиСтрокТоваров.КэшПлитки;
		СтрокаТовара = КэшПлитки[ТекущийВыбор.ИндексКэшаСтрокиТовара - 1];
	Иначе
		Если Не КэшиСтрокТоваров = Неопределено Тогда
			Для НомерКэша = 1 По 2 Цикл
				
				Если НомерКэша = 1 И КэшиСтрокТоваров.Свойство("КэшКорзины") Тогда
					КэшПоиска = КэшиСтрокТоваров.КэшКорзины;
				ИначеЕсли НомерКэша = 2 И КэшиСтрокТоваров.Свойство("КэшПлитки") Тогда
					КэшПоиска = КэшиСтрокТоваров.КэшПлитки;
				Иначе
					Продолжить;
				КонецЕсли;
				
				Для Каждого СтрокаКэша Из КэшПоиска Цикл
					
					Если Не ТекущийВыбор.Номенклатура = СтрокаКэша.Номенклатура Тогда
						Продолжить;
					КонецЕсли;
					Если Не УпаковкаВТаблице = СтрокаКэша.Упаковка Тогда
						Продолжить;
					КонецЕсли;
					Если ЕстьХарактеристика Тогда
						Если Не ТекущийВыбор.Характеристика = СтрокаКэша.Характеристика Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					Если ЕстьСерия Тогда
						Если Не СерияВТаблице = СтрокаКэша.Серия Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					Если ЕстьПартия Тогда
						Если Не ПартияВТаблице = СтрокаКэша.Партия Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					СтрокаТовара = СтрокаКэша;
					Прервать;
					
				КонецЦикла;
				
				Если Не СтрокаТовара = Неопределено Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаТовара = Неопределено Тогда
		РеквизитыФормыРМК = СтруктураРеквизитовФормыРМКДляДобавленияСтроки();
		ТекущийВыбор.Вставить("РеквизитыФормыРМК", РеквизитыФормыРМК);
		Данныетовара = СтрокаТовараНаСервере(ТекущийВыбор, Истина);
		СтрокаТовара = Данныетовара.СтрокаТовара;
		Если КэшиСтрокТоваров.Свойство("КэшКорзины") Тогда
			Если СтрокаТовара.ДобавлятьСтрокуВКэшСтрок Тогда
				КэшиСтрокТоваров.КэшКорзины.Добавить(СтрокаТовара);
			КонецЕсли;
		КонецЕсли;
		Если Не Данныетовара.ДанныеКонтроляПродаж = Неопределено Тогда
			ИнтерфейсРМКСлужебныйКлиентСервер.ДобавитьНовыеДанныеКэшаПродаж(КэшКонтроляПродаж,
				Данныетовара.ДанныеКонтроляПродаж);
		КонецЕсли;
	Иначе
		СтрокаТовара.КодМаркировки = "";
		СтрокаТовара.ТребуетсяПроверкаКодаМаркировки = Ложь;
		СтрокаТовара.СтрокаТовараПолученаИзКэша = Истина;
		СтрокаТовара.Подарок = Ложь;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из ТекущийВыбор Цикл
		Если ЗначениеЗаполнено(ЭлементСтруктуры.Значение) Тогда
			Если ЭлементСтруктуры.Ключ = "Партия"
				Или ЭлементСтруктуры.Ключ = "Серия"
				Или ЭлементСтруктуры.Ключ = "Упаковка"
				Или ЭлементСтруктуры.Ключ = "Организация"
				Или ЭлементСтруктуры.Ключ = "СистемаНалогообложения"
				Или ЭлементСтруктуры.Ключ = "СтавкаНДС" Тогда
					Продолжить;
			КонецЕсли;
			СтрокаТовара.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ЕстьСерияПартия = Ложь;
	ДобавлятьСерийныйТоварНовойСтрокой = Истина;
	Если ЕстьСвойство(ТекущийВыбор, "Серия") Или ЕстьСвойство(ТекущийВыбор, "Партия") Тогда
		ЕстьСерияПартия = Истина;
	КонецЕсли;
	Если ЕстьСвойство(ТекущийВыбор, "УникальностьСерии") И ЕстьСвойство(ТекущийВыбор, "Серия") Тогда
		Если Не ТекущийВыбор.УникальностьСерии И ЗначениеЗаполнено(ТекущийВыбор.Серия) Тогда
			ДобавлятьСерийныйТоварНовойСтрокой = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаТаблицы = СтрокаТовара;
	
	Если СтрокаТаблицы.Маркируемый Тогда
		
		Если ЭтоЧекКоррекции Тогда
			Возврат;
		КонецЕсли;
		ДобавитьСтрокуВТабличнуюЧастьНаКлиенте(СтрокаТаблицы, Истина);
		Возврат;
		
	ИначеЕсли (СтрокаТаблицы.НеобходимоДобавитьСтроку И Не ЕстьСерияПартия) ИЛИ РежимВыбораПодарка Тогда
		
		ДобавитьСтрокуВТабличнуюЧастьНаКлиенте(СтрокаТаблицы);
		Возврат;
		
	ИначеЕсли ЕстьСерияПартия И ДобавлятьСерийныйТоварНовойСтрокой И СтрокаТаблицы.НеобходимостьВводаСерии Тогда
		
		ДобавитьСтрокуВТабличнуюЧастьНаКлиенте(СтрокаТаблицы);
		Возврат
		
	ИначеЕсли СтрокаТаблицы.ЭтоНабор Тогда
		
		ДополнительныеДанные = ШаблонДополнительныхДанныхЗапросаКонтроляПродаж(ЭтотОбъект);
		ДобавитьНаборВТабличнуюЧасть(ТекущийВыбор, ДополнительныеДанные);
		Если Не ДополнительныеДанные.ДанныеКонтроляПродаж = Неопределено Тогда
			ИнтерфейсРМКСлужебныйКлиентСервер.ДобавитьНовыеДанныеКэшаПродаж(КэшКонтроляПродаж,
				ДополнительныеДанные.ДанныеКонтроляПродаж);
		КонецЕсли;
		Возврат;
		
	Иначе
	КонецЕсли;
	
	Если ДобавитьТоварОтдельнойСтрокойНаКлиенте(СтрокаТаблицы) Тогда
		ДобавитьСтрокуВТабличнуюЧастьНаКлиенте(СтрокаТаблицы);
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицыТоваров Из Объект.Товары Цикл
		
		Если СтрокаТаблицыТоваров.ЭтоНабор Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицыТоваров.ТоварКЗамене Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыТоваров.ЗаказПокупателя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ТекущийВыбор.Номенклатура = СтрокаТаблицыТоваров.Номенклатура Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не УпаковкаВТаблице = СтрокаТаблицыТоваров.Упаковка Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЕстьХарактеристика Тогда
			Если Не ТекущийВыбор.Характеристика = СтрокаТаблицыТоваров.Характеристика Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьСерия Тогда
			Если Не СерияВТаблице = СтрокаТаблицыТоваров.Серия Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьПартия Тогда
			Если Не ПартияВТаблице = СтрокаТаблицыТоваров.Партия Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицыТоваров.Подарок Тогда
			Продолжить;
		КонецЕсли;

		ИзменитьСтрокуВТабличнойЧастиНаКлиенте(СтрокаТаблицыТоваров, ТекущийВыбор);
		Возврат;
		
	КонецЦикла;
	
	ДобавитьСтрокуВТабличнуюЧастьНаКлиенте(СтрокаТаблицы);
	
КонецПроцедуры

&НаСервере
Функция СтрокаТовараНаСервере(Знач ТекущийВыбор, Знач ДополнятьСтрокуВычисляемымиДанными = Ложь)
	
	ДополнительныеДанные = ШаблонДополнительныхДанныхЗапросаКонтроляПродаж(ЭтотОбъект);
	ДополнительныеДанные.Вставить("Характеристика", Неопределено);
	Если ТекущийВыбор.Свойство("Характеристика") Тогда
		ДополнительныеДанные.Характеристика = ТекущийВыбор.Характеристика;
	КонецЕсли;
	
	СтрокаТовара = ПродажиРМК.СтрокаТовара(ТекущийВыбор, ДополнительныеДанные);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТовара, "Маркируемый")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТовара, "НеобходимостьВводаКодаМаркировки")
		И СтрокаТовара.Маркируемый Тогда
		СтрокаТовара.НеобходимостьВводаКодаМаркировки = Истина;
	КонецЕсли;
	
	Если ДополнятьСтрокуВычисляемымиДанными Тогда
		ДополнитьСтрокуТовараВычисляемымиДанными(СтрокаТовара);
	КонецЕсли;
	
	РезультатФункции = Новый Структура();
	РезультатФункции.Вставить("СтрокаТовара", СтрокаТовара);
	РезультатФункции.Вставить("ДанныеКонтроляПродаж", ДополнительныеДанные.ДанныеКонтроляПродаж);
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти

#Область Эквайринг

&НаСервере
Процедура ЗаполнитьЭквайринговыеТерминалы(ТерминалБезПодключения)
	
	УстановитьПривилегированныйРежим(Истина);
	Если ИспользоватьОплатуПлатежнымиКартами Тогда
		
		Запрос = Новый Запрос;
		ОбщегоНазначенияРМКПереопределяемый.СформироватьЗапросДанныеЭквайринговыхТерминалов(Запрос, ЭтотОбъект);
		
		Если Не ЗначениеЗаполнено(Запрос.Текст) Тогда
			
			НастроитьФормуБезОплатыКартой();
			Возврат;
			
		КонецЕсли;
		
		ВозможностьВыдачиНаличных = Новый Соответствие;
		
		Для Каждого Строка Из ТаблицаТерминалы Цикл
			ВозможностьВыдачиНаличных.Вставить(Строка.ПодключаемоеОборудование,
				Строка.ПоддерживаетВыдачуНаличных);
		КонецЦикла;
		
		ТаблицаТерминалы.Очистить();
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если РежимКассыСамообслуживания Тогда
				Если Не (ЗначениеЗаполнено(Выборка.ПодключаемоеОборудование) И ПодключаемоеОборудованиеИспользуется(Выборка.ПодключаемоеОборудование)) Тогда
					ТерминалБезПодключения = Истина;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НовыйТерминал = ТаблицаТерминалы.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйТерминал, Выборка);
			СведенияОВыдачеНаличных = ВозможностьВыдачиНаличных.Получить(НовыйТерминал.ПодключаемоеОборудование);
			ТерминалПоддерживаетВыдачуНаличных = ?(СведенияОВыдачеНаличных = Неопределено, Ложь, СведенияОВыдачеНаличных);
			НовыйТерминал.ПоддерживаетВыдачуНаличных = ТерминалПоддерживаетВыдачуНаличных;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТаблицаТерминалы.Количество() = 0 Или Не ИспользоватьОплатуПлатежнымиКартами Тогда
		НастроитьФормуБезОплатыКартой();
		ИспользоватьОплатуПлатежнымиКартами = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуБезОплатыКартой()
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВидОплатыКартой, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ПодменюКарта, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeКарта, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиОплатуПоКарте()
	
	ДанныеТерминалов = ОбщегоНазначенияРМККлиент.ДанныеТекущихЭквайринговыхТерминалов(ЭтотОбъект);
	Если ЗначениеЗаполнено(РеквизитыQRПлатежнойКарты) Тогда
		ДанныеТерминаловСОплатойПоQRКоду = Новый Массив();
		Для Каждого Терминал Из ДанныеТерминалов Цикл
			Если Терминал.ПоддерживаетОплатуПоQRКоду Тогда
				ДанныеТерминаловСОплатойПоQRКоду.Добавить(Терминал);
			КонецЕсли;
		КонецЦикла;
		Если ДанныеТерминаловСОплатойПоQRКоду.Количество()>0 Тогда
			ДанныеТерминалов = ДанныеТерминаловСОплатойПоQRКоду;
		КонецЕсли;
	КонецЕсли;
	
	КоличествоАктивныхТерминаловПоОрганизации = ДанныеТерминалов.Количество();
	
	Если КоличествоАктивныхТерминаловПоОрганизации = 0 Тогда
		
		ТекстЗаголовка = НСтр("ru = 'При выполнении операции возникла ошибка'");
		ТекстСообщения = НСтр("ru = 'Не удалось определить эквайринговый терминал.
		|Оплата по карте не была произведена.'");
		СброситьОплатуПриОшибке();
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
		Возврат;
		
	ИначеЕсли КоличествоАктивныхТерминаловПоОрганизации = 1 Тогда
		ВыполнитьОплатуПоКарте(ДанныеТерминалов[0]);
	Иначе
		
		ЧастичнаяОтменаДоступна = Ложь;
		Если ЗначениеЗаполнено(ЭквайринговыйТерминалВыполненияОперации) Тогда
			
			ЭквайринговыйТерминалПродажи = ЭквайринговыйТерминалВыполненияОперации;
			ОтборПоиска = Новый Структура();
			ОтборПоиска.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминалПродажи);
			Результат = ТаблицаТерминалы.НайтиСтроки(ОтборПоиска);
			
			Если Результат.Количество() > 0 Тогда
				
				ДанныеТерминалов = Результат[0];
				ЧастичнаяОтменаДоступна = ДанныеТерминалов.ЧастичнаяОтмена;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЭтоСторноОплатыПоКарте(ЧекККМПродажа, СуммаОплаченоБН, КассоваяСмена, ЭквайринговыйТерминалВыполненияОперации, ЧастичнаяОтменаДоступна) Тогда
			ПерейтиКВыборуТерминала(ДанныеТерминалов);
		Иначе
			ВыполнитьОплатуПоКарте(ДанныеТерминалов);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОплатуПоКарте(ДанныеТерминала)
	
	Если ДанныеТерминала.ИспользоватьБезПодключенияОборудования
		И НЕ ЗначениеЗаполнено(ДанныеТерминала.ПодключаемоеОборудование) Тогда
			ПерейтиНаСтраницуВопросЭквайринговаяОперация(ДанныеТерминала);
	Иначе
		ПровестиОплатуПоКартеПродолжение(ДанныеТерминала);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКВыборуТерминала(ДанныеТерминалов)
	
	ДанныеТерминалов = ОбщегоНазначенияРМККлиент.ДанныеТекущихЭквайринговыхТерминалов(ЭтотОбъект);
	
	ДанныеДляЗагрузки = Новый Массив();
	
	Для каждого Строка Из ДанныеТерминалов Цикл
		ДанныеДляЗагрузки.Добавить(Строка.ЭквайринговыйТерминал);
	КонецЦикла;
	
	ЭлементПереключателя = Элементы.ЭквайринговыйТерминалВыполненияОперации;
	ЭлементПереключателя.СписокВыбора.Очистить();
	ЭлементПереключателя.СписокВыбора.ЗагрузитьЗначения(ДанныеДляЗагрузки);
	
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПанельУправленияЧеком);
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаВыборЭквайринговогоТерминала);
	ТекущийЭлемент = Элементы.ЭквайринговыйТерминалВыполненияОперации;
	ЗаблокироватьОплатуИПробитиеЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиОплатуПоКартеПродолжение(ДанныеЭТ)
	
	ПерейтиНаСтраницуЭквайринговаяОперация();
	
	ЭтоОперацияПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	Если ЭтоОперацияПродажа Или ЭтоЗаменаТоваров Тогда
		ОплатитьКартой(ДанныеЭТ);
	Иначе
		
		Отказ = Ложь;
		ТекстОшибки = "";
		
		ДополнительныеДанные = ДополнительныеДанныеДляФискализации();
		ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьДополнительныеДанныеДляПробитияЧека(ЭтотОбъект,
			ДополнительныеДанные);
		ЗаписатьЧекККМПередПробитием(ДополнительныеДанные, Отказ, ТекстОшибки);
		ОбновитьРеквизитыФормыПослеПодготовкиДанныхДляЧека(ДополнительныеДанные);
		
		Если Отказ Тогда
			
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
			ПараметрыОшибки = Новый Структура;
			ПараметрыОшибки.Вставить("ОшибкаФормированияИсходныхДанных", Истина);
			ОткрытьСтраницуИнфоОшибка(Неопределено, ТекстОшибки, ПараметрыОшибки);
			
		Иначе
		
			Если ЭтоСторноОплатыПоКарте(ЧекККМПродажа, СуммаОплаченоБН, КассоваяСмена, ДанныеЭТ.ЭквайринговыйТерминал, ДанныеЭТ.ЧастичнаяОтмена) Тогда
				ВыполнитьСторноОплатыПоКарте(ДанныеЭТ, Истина);
			Иначе
				ВернутьОплатуПоКарте(ДанныеЭТ);
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуВопросЭквайринговаяОперация(ДанныеЭТ)
	
	СтруктураОтбора = ВыбраннаяОрганизацияИСНО();
	Если ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации) ИЛИ ЭтоЗаменаТоваров Тогда
		СтруктураОтбора.Вставить("Оплачено", Ложь);
	Иначе
		СтруктураОтбора.Вставить("Оплачено", Истина);
	КонецЕсли;
	
	СтрокиОплаты = ТаблицаОплатКартой.НайтиСтроки(СтруктураОтбора);
	Если СтрокиОплаты.Количество() > 0 Тогда
		СтрокаДляОплаты = СтрокиОплаты[0]; 
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ТаблицаПлатежныхКарт") Тогда
		
		ИмяКомандыОплаты = СтрокаДляОплаты.ВидОплаты;
		ОтборДляПоискаИмениКоманды = Новый Структура();
		ОтборДляПоискаИмениКоманды.Вставить("ИмяКоманды", ИмяКомандыОплаты);
		
		РезультатОтбора = ЭтотОбъект.ТаблицаПлатежныхКарт.НайтиСтроки(ОтборДляПоискаИмениКоманды);
		
		ВидПлатежнойКарты = ?(РезультатОтбора.Количество(), РезультатОтбора[0].ВидОплаты, "");
		
		ПараметрыПоиска = Новый Структура;
		Если Объект.Оплата.Количество() > 0 Тогда
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект.Объект.Оплата[0], "ВидПлатежнойКарты") Тогда 
				ПараметрыПоиска.Вставить("ВидПлатежнойКарты", ВидПлатежнойКарты);
			Иначе
				ПараметрыПоиска.Вставить("ВидОплаты", ВидПлатежнойКарты);
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
		ПараметрыПоиска.Вставить("Сумма", СтрокаДляОплаты.Сумма);
		
	Иначе
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Сумма", СтрокаДляОплаты.Сумма);
		
	КонецЕсли;
	
	МассивОплат = Объект.Оплата.НайтиСтроки(ПараметрыПоиска);
	Если МассивОплат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОплаты = МассивОплат[0];
	СтрокаОплаты.ЭквайринговыйТерминал = ДанныеЭТ.ЭквайринговыйТерминал;
	СтрокаОплаты.ПроцентКомиссии = ДанныеЭТ.ПроцентКомиссииПриПродаже;
	СтрокаОплаты.СуммаКомиссии = СтрокаОплаты.Сумма * СтрокаОплаты.ПроцентКомиссии / 100;
	СуммаТекущейОплатыКартой = СтрокаОплаты.Сумма;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, Ложь);
	
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПанельУправленияЧеком);
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаВопросЭквайринговаяОперация);
	УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧек, Ложь);
	ТекущийЭлемент = Элементы.ОтветДа;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуЭквайринговаяОперация()
	
	УстановитьДоступностьЭлементовРедактированияЧека(Ложь);
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаЭквайринговаяОперация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуСторноЭквайринг(ТекстЗаголовка, ТекстСообщения)
	
	УстановитьДоступностьЭлементовРедактированияЧека(Ложь);
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаСторноЭквайринг);
	
	Элементы.ЗаголовокСторноЭквайринг.Заголовок = ТекстЗаголовка;
	Элементы.ТекстСторноЭквайринг.Заголовок = ТекстСообщения;
	ЗаблокироватьОплатуИПробитиеЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьКартой(ТекущийТерминал)
	
	СтруктураОтбора = ВыбраннаяОрганизацияИСНО();
	СтруктураОтбора.Вставить("Оплачено", Ложь);
	
	СтрокиОплаты = ТаблицаОплатКартой.НайтиСтроки(СтруктураОтбора);
	Если СтрокиОплаты.Количество() > 0 Тогда
		СтрокаДляОплаты = СтрокиОплаты[0];
	ИначеЕсли ТранзакцияПоКартеЗавершена Тогда
		
		ТипОплаты = "Карта";
		НачатьПечатьЧека(); 
		Возврат;
		
	Иначе
		
		ТекстЗаголовка = НСтр("ru = 'При выполнении операции возникла ошибка'");
		ТекстСообщения = НСтр("ru = 'При оплате картой возникла ошибка, перезаполните оплаты.'");
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОперации = МенеджерОборудованияРМККлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
	ПараметрыОперации.ТипТранзакции = НСтр("ru = 'AuthorizeSales'");
	ПараметрыОперации.СуммаОперации = СтрокаДляОплаты.Сумма;
	ПараметрыОперации.НомерЧека = НСтр("ru = ' '");
	ПараметрыОперации.РеквизитыКартыQR = РеквизитыQRПлатежнойКарты;
	
	ПараметрыДействия = Новый Структура();
	ПараметрыДействия.Вставить("ДанныеТерминала", ТекущийТерминал);

	Доступность = Ложь;
	
	ВозможнаВыдачаНаличных = СуммаНаличныхКВыдаче > 0 И ВыдаватьНаличныеНаКассе
		И ТекущийТерминал.ПоддерживаетВыдачуНаличных;
	КонтекстДополнительнойПроверки = Новый Структура();
	КонтекстДополнительнойПроверки.Вставить("ДанныеТерминала", ТекущийТерминал);
	КонтекстДополнительнойПроверки.Вставить("КонтекстФормы", ЭтотОбъект);
	ОбщегоНазначенияРМККлиент.
		ПроверитьДополнительныеУсловияВыполненияВыдачиНаличных(ВозможнаВыдачаНаличных, КонтекстДополнительнойПроверки);

	ВыполнитьОперациюПакетнойФискализации = НЕ ТекущийТерминал.ИспользоватьБезПодключенияОборудования
		И (ВозможнаВыдачаНаличных ИЛИ ПечататьКороткийСлипЧек) И ТаблицаОплатКартой.Количество() = 1;
	
	Если ВыполнитьОперациюПакетнойФискализации Тогда
		
		ЭквайринговыйТерминалВыполненияОперации = ТекущийТерминал.ЭквайринговыйТерминал;
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("ВидОплаты", ТекущийТерминал.ВидОплаты);
		МассивОплат = Объект.Оплата.НайтиСтроки(СтруктураПоиска);
	
		Если МассивОплат.Количество() > 0 Тогда
			
			СтрокаОплаты = МассивОплат[0];
			СтрокаОплаты.ЭквайринговыйТерминал = ТекущийТерминал.ЭквайринговыйТерминал;
			СтрокаОплаты.ПроцентКомиссии = ТекущийТерминал.ПроцентКомиссииПриПродаже;
			СтрокаОплаты.СуммаКомиссии = СтрокаОплаты.Сумма * СтрокаОплаты.ПроцентКомиссии / 100;
		КонецЕсли;
		
		НачатьПечатьЧека(Истина);

		
	Иначе
	
		ЭквайринговыйТерминалВыполненияОперации = ТекущийТерминал.ЭквайринговыйТерминал;
		ЭквайринговыйТерминал = ТекущийТерминал.ПодключаемоеОборудование;
		Оповещение = Новый ОписаниеОповещения("ОплатитьКартойЗавершение", ЭтотОбъект, ПараметрыДействия);
		МенеджерОборудованияРМККлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение,
			УникальныйИдентификатор,
			ЭквайринговыйТерминал,
			ПараметрыОперации, ,
			ПодключаемоеОборудование);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьКартойЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Доступность = Истина;
	
	ДанныеТерминала = ДополнительныеПараметры.ДанныеТерминала;
	
	ОчиститьРеквизитыQRКодаПлатежнойКарты();
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("ВидОплаты", ДанныеТерминала.ВидОплаты);
	Если ЕстьСвойство(РезультатВыполнения, "СуммаОперации") Тогда
		СтруктураПоиска.Вставить("Сумма", РезультатВыполнения.СуммаОперации);
	КонецЕсли;
	
	МассивОплат = Объект.Оплата.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаОплаты Из МассивОплат Цикл
		
		Если ЗначениеЗаполнено(СтрокаОплаты.ЭквайринговыйТерминал) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаОплаты.ЭквайринговыйТерминал = ДанныеТерминала.ЭквайринговыйТерминал;
		СтрокаОплаты.ПроцентКомиссии = ДанныеТерминала.ПроцентКомиссииПриПродаже;
		СтрокаОплаты.СуммаКомиссии = СтрокаОплаты.Сумма * СтрокаОплаты.ПроцентКомиссии / 100;
		
		Если ЕстьСвойство(РезультатВыполнения, "НомерКарты") Тогда
			СтрокаОплаты.НомерПлатежнойКарты = РезультатВыполнения.НомерКарты;
		КонецЕсли;
		Если ЕстьСвойство(РезультатВыполнения, "НомерЧекаЭТ") Тогда
			СтрокаОплаты.НомерЧекаЭТ = РезультатВыполнения.НомерЧекаЭТ;
		КонецЕсли;
		Если ЕстьСвойство(РезультатВыполнения, "СсылочныйНомер") Тогда
			СтрокаОплаты.СсылочныйНомер = РезультатВыполнения.СсылочныйНомер;
		КонецЕсли;
		Если ЕстьСвойство(РезультатВыполнения, "ВидОплатыНаТерминалеКод") Тогда
			СтрокаОплаты.КодСпособаОплатыЭТ = Число(РезультатВыполнения.ВидОплатыНаТерминалеКод);
		КонецЕсли;
		Прервать
		
	КонецЦикла;
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
		
		ПроверитьСуммуОплатыЧека(РезультатВыполнения.СуммаОперации);
		ТипОплаты = "Карта";
		НачатьПечатьЧека();
		
	Иначе
		
		ОтразитьОстаткиНаличныхДенежныхСредствНаФорме(Объект.Организация, Объект.КассаККМ, Истина);
		
		ТранзакцияПоКартеЗавершена = Ложь;
		ТипОплаты = "";
		
		ТекстЗаголовка = НСтр("ru = 'При выполнении операции возникла ошибка'");
		ТекстСообщения = НСтр("ru = '""%ОписаниеОшибки%"".
			|Оплата по карте не была произведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		
		СтруктураОтбора = ВыбраннаяОрганизацияИСНО();
		СтруктураОтбора.Вставить("Оплачено", Истина);
		СтрокиОплаты = ТаблицаОплатКартой.НайтиСтроки(СтруктураОтбора);
		
		Если СтрокиОплаты.Количество() = 0 Тогда
			ТипОплаты = "";
			СброситьОплатуПриОшибке();
			
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
			
			ВывестиИнформациюНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.Ошибка, РезультатВыполнения.ОписаниеОшибки);
			
		Иначе
			ОбработатьОтменуОплаты(ТекстЗаголовка, ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораВидаПлатежнойКарты(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураКоманды = Новый Структура;
	СтруктураКоманды.Вставить("Имя", Результат.Значение);
	
	Если (РежимРаботыСЧеком = РежимыРаботыСЧеком.Оплата
		Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ВозвратКоррекция
		Или Элементы.ГруппаОплатаКартой.Видимость)
		И Не ПриемАванса Тогда
		
		ОплатаКартойЗавершение(КодВозвратаДиалога.Нет, СтруктураКоманды);
		
		Если СтруктураКоманды.РезультатОперации Тогда
			Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ПробитьЧек")
				И ДополнительныеПараметры.ПробитьЧек = Истина Тогда
				
				КомандаПробитияЧека = Команды.ПробитьЧек;
				ПробитьЧек(КомандаПробитияЧека);
				
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		НеобходимПересчетАвтоматическихСкидок = ОпределитьНеобходимостьПересчетаАвтоматическихСкидок();
		Если НеобходимПересчетАвтоматическихСкидок И ВопросПоРасчетуСкидок Тогда
			ЗадатьВопросПоРасчетуСкидок("ОплатаКартойЗавершение", СтруктураКоманды, Истина);
		Иначе
			ОплатаКартойЗавершение(?(ВопросПоРасчетуСкидок Или СкидкиРассчитаны, КодВозвратаДиалога.Нет, КодВозвратаДиалога.Да), СтруктураКоманды);
			УстановитьФокусВПолеВводаСуммыКартой();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоСторноОплатыПоКарте(ЧекККМПродажа, СуммаОплаченоБН, ТекущаяКассоваяСмена, ЭквайринговыйТерминал, ЧастичнаяОтмена)
	
	ПараметрыСторно = Новый Структура;
	ПараметрыСторно.Вставить("ЧекККМПродажа", ЧекККМПродажа);
	ПараметрыСторно.Вставить("СуммаИтого", СуммаОплаченоБН);
	ПараметрыСторно.Вставить("КассоваяСмена", ТекущаяКассоваяСмена);
	ПараметрыСторно.Вставить("Результат", Ложь);
	ПараметрыСторно.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
	ПараметрыСторно.Вставить("ЧастичнаяОтменаДоступна", ЧастичнаяОтмена);
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакЭтоСторно(ПараметрыСторно);
	
	Возврат ПараметрыСторно.Результат;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьСторноОплатыПоКарте(ДанныеТерминала, ПечататьЧекНаВозврат = Ложь, ДанныеОшибки = Неопределено)
	
	Доступность = Ложь;
	СтруктураОтбора = ВыбраннаяОрганизацияИСНО();
	СтруктураОтбора.Вставить("Оплачено", Истина);
	
	СтрокиОплаты = ТаблицаОплатКартой.НайтиСтроки(СтруктураОтбора);
	Если СтрокиОплаты.Количество() > 0 Тогда
		СтрокаДляОплаты = СтрокиОплаты[0];
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("Сумма", СтрокаДляОплаты.Сумма);
	СтруктураПоиска.Вставить("ВидОплаты", ДанныеТерминала.ВидОплаты);
	
	МассивОплат = Объект.Оплата.НайтиСтроки(СтруктураПоиска);
	Если МассивОплат.Количество() > 0 Тогда
		
		СтрокаОплаты = МассивОплат[0];
		
		ПараметрыОперации = МенеджерОборудованияРМККлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
		ПараметрыОперации.ТипТранзакции = НСтр("ru = 'AuthorizeVoid'");
		ПараметрыОперации.СуммаОперации = СтрокаОплаты.Сумма;
		ПараметрыОперации.НомерЧекаЭТ = СтрокаОплаты.НомерЧекаЭТ;
		ПараметрыОперации.СсылочныйНомер = СтрокаОплаты.СсылочныйНомер;
		ПараметрыОперации.РеквизитыКартыQR = РеквизитыQRПлатежнойКарты;
		ПараметрыОперации.ДокументОснование = ЧекККМВОбработке;
		ПараметрыОперации.ВидОплатыНаТерминале = МенеджерОборудованияРМККлиент.СпособОплатыЭТ(СтрокаОплаты.КодСпособаОплатыЭТ);
		
		СтруктураПоискаТерминала = Новый Структура();
		СтруктураПоискаТерминала.Вставить("ЭквайринговыйТерминал", ДанныеТерминала.ЭквайринговыйТерминал);
		
		Терминал = Неопределено;
		МассивТерминалов = ТаблицаТерминалы.НайтиСтроки(СтруктураПоискаТерминала);
		
		КоличествоТерминалов = МассивТерминалов.Количество();
		
		Если КоличествоТерминалов > 0 Тогда
			
			Терминал = МассивТерминалов[0].ПодключаемоеОборудование;
			
			ПараметрДействия = Новый Структура();
			ПараметрДействия.Вставить("ПечататьЧекНаВозврат", ПечататьЧекНаВозврат);
			ПараметрДействия.Вставить("СтрокаОплаты", СтрокаОплаты);
			ПараметрДействия.Вставить("ТекущийТерминал", МассивТерминалов[0]);
			ПараметрДействия.Вставить("ДанныеОшибки", ДанныеОшибки);
			
			Оповещение = Новый ОписаниеОповещения("ВыполнитьСторноОплатыПоКартеЗавершение", ЭтотОбъект, ПараметрДействия);
			МенеджерОборудованияРМККлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение,
				УникальныйИдентификатор, Терминал, ПараметрыОперации, , ПодключаемоеОборудование);
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСторноОплатыПоКартеЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Доступность = Истина;
	
	ПечататьЧекНаВозврат = ДополнительныеПараметры.ПечататьЧекНаВозврат;
	СтрокаОплаты = ДополнительныеПараметры.СтрокаОплаты;
	ДанныеТерминала = ДополнительныеПараметры.ТекущийТерминал;
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
		
		ПроверитьСуммуОплатыЧека(РезультатВыполнения.СуммаОперации, Ложь);
		
		Если (ПечататьЧекНаВозврат И ТранзакцияПоКартеЗавершена) ИЛИ Не ТранзакцияПоКартеЗавершена Тогда
			
			ТипОплаты = "Карта";
			
			СтрокаОплаты.ЭквайринговыйТерминал = ДанныеТерминала.ЭквайринговыйТерминал;
			СтрокаОплаты.ПроцентКомиссии = ДанныеТерминала.ПроцентКомиссииПриОтмене;
			СтрокаОплаты.СуммаКомиссии = СтрокаОплаты.Сумма * СтрокаОплаты.ПроцентКомиссии / 100;
			
			НачатьПечатьЧека();
			
		Иначе
			
			ТранзакцияПоКартеЗавершена = Ложь;
			ТипОплаты = "";
			
			Если ЕстьСвойство(ДополнительныеПараметры, "ДанныеОшибки")
				И ЗначениеЗаполнено(ДополнительныеПараметры.ДанныеОшибки) Тогда
				
				ДанныеОшибки = ДополнительныеПараметры.ДанныеОшибки;
				ОткрытьСтраницуИнфоОшибка(ДанныеОшибки.ТекстЗаголовка, ДанныеОшибки.ТекстСообщения);
				
			Иначе
				
				СброситьОплатуПриОшибке();
				РассчитатьСуммыОплаты();
				НастроитьДоступностьПробитьЧек();
				ПерейтиНаСтраницуОплата();
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ПараметрыДляЗаписиЧека = Новый Структура;
		ПараметрыДляЗаписиЧека.Вставить("Результат", Ложь);
		ПараметрыДляЗаписиЧека.Вставить("ЧекККМСсылка", ЧекККМВОбработке);
		ПробитьЧекЗавершение(ПараметрыДляЗаписиЧека);
		
		ТранзакцияПоКартеЗавершена = Ложь;
		ТипОплаты = "";
		
		ТекстЗаголовка = НСтр("ru = 'При выполнении операции возникла ошибка'");
		ТекстСообщения = НСтр("ru = '""%ОписаниеОшибки%"".
									|Отмена платежа по карте не была произведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
			
		СброситьОплатуПриОшибке();
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
		УстановитьДоступностьЭлементовРедактированияЧека(Истина);
		
		ВывестиИнформациюНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.Ошибка, РезультатВыполнения.ОписаниеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьОплатуПоКарте(ТекущийЭквайринговыйТерминал)
	
	Доступность = Ложь;
	
	СтруктураОтбора = ВыбраннаяОрганизацияИСНО();
	СтруктураОтбора.Вставить("Оплачено", Истина);
	
	СтрокиОплаты = ТаблицаОплатКартой.НайтиСтроки(СтруктураОтбора);
	Если СтрокиОплаты.Количество() > 0 Тогда
		СтрокаДляОплаты = СтрокиОплаты[0];
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("Сумма", СтрокаДляОплаты.Сумма);
	СтруктураПоиска.Вставить("ВидОплаты", ТекущийЭквайринговыйТерминал.ВидОплаты);
	
	МассивОплат = Объект.Оплата.НайтиСтроки(СтруктураПоиска);
	Если МассивОплат.Количество() > 0 Тогда
		
		ВернутьОплатуПоКартеДляСтрокиОплаты(МассивОплат[0], ТекущийЭквайринговыйТерминал);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьОплатуПоКартеЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Доступность = Истина;
	
	СтрокаОплаты = ДополнительныеПараметры.СтрокаОплаты;
	ТекущийТерминал = ДополнительныеПараметры.ТекущийТерминал;
	
	Если ТекущийТерминал = Неопределено Тогда
		
		ТранзакцияПоКартеЗавершена = Ложь;
		ТипОплаты = "";
		
		ТекстЗаголовка = НСтр("ru = 'При выполнении операции возникла ошибка'");
		ТекстСообщения = НСтр("ru = 'Не удалось определить эквайринговый терминал.'");
		
		ПерейтиНаСтраницуСторноЭквайринг(ТекстЗаголовка, ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаОплаты.ЭквайринговыйТерминал = ТекущийТерминал.ЭквайринговыйТерминал;
	СтрокаОплаты.ПроцентКомиссии = ТекущийТерминал.ПроцентКомиссииПриВозврате;
	СтрокаОплаты.СуммаКомиссии = СтрокаОплаты.Сумма * СтрокаОплаты.ПроцентКомиссии / 100;
	
	Если ЕстьСвойство(РезультатВыполнения, "НомерКарты") Тогда
		СтрокаОплаты.НомерПлатежнойКарты = РезультатВыполнения.НомерКарты;
	КонецЕсли;
	Если ЕстьСвойство(РезультатВыполнения, "НомерЧекаЭТ") Тогда
		СтрокаОплаты.НомерЧекаЭТ = РезультатВыполнения.НомерЧекаЭТ;
	КонецЕсли;
	Если ЕстьСвойство(РезультатВыполнения, "СсылочныйНомер") Тогда
		СтрокаОплаты.СсылочныйНомер = РезультатВыполнения.СсылочныйНомер;
	КонецЕсли;

	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
		
		ПроверитьСуммуОплатыЧека(РезультатВыполнения.СуммаОперации, Ложь);
		ТипОплаты = "Карта";
		НачатьПечатьЧека();
		
	Иначе
		
		ПараметрыДляЗаписиЧека = Новый Структура;
		ПараметрыДляЗаписиЧека.Вставить("Результат", Ложь);
		ПараметрыДляЗаписиЧека.Вставить("ЧекККМСсылка", ЧекККМВОбработке);
		ПробитьЧекЗавершение(ПараметрыДляЗаписиЧека);
		
		ТранзакцияПоКартеЗавершена = Ложь;
		ТипОплаты = "";
		
		ТекстЗаголовка = НСтр("ru = 'При выполнении операции возникла ошибка'");
		ТекстСообщения = НСтр("ru = '""%ОписаниеОшибки%"".
			|Оплата по карте не была произведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		
		ПерейтиНаСтраницуСторноЭквайринг(ТекстЗаголовка, ТекстСообщения);
		
		ВывестиИнформациюНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.Ошибка, РезультатВыполнения.ОписаниеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СверкаИтоговЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполнитьСверкуИтогов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверкуИтогов(ОрганизацияОтбор = Неопределено, ЗакрытиеСмены = Ложь)
	
	Для Каждого Терминал Из ТаблицаТерминалы Цикл
		
		Если Не ОрганизацияОтбор = Неопределено Тогда
			Если Не Терминал.Организация = ОрганизацияОтбор Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Терминал.ИспользоватьБезПодключенияОборудования
			И ЗначениеЗаполнено(Терминал.ПодключаемоеОборудование) Тогда
			
			Если ЗакрытиеСмены Тогда
				УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
			Иначе
				Доступность = Ложь;
			КонецЕсли;
			
			ПараметрыЗавершенияСверки = Новый Структура("ЗакрытиеСмены", ЗакрытиеСмены);
			Оповещение = Новый ОписаниеОповещения("ВыполнитьСверкуИтоговЗавершение", ЭтотОбъект, ПараметрыЗавершенияСверки);
			
			Отбор = Новый Структура("Организация", Терминал.Организация);
			НайденыСтрокиКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор);
			Если НайденыСтрокиКассы.Количество() > 0 Тогда
				СтрокаКассы = НайденыСтрокиКассы[0];
				ПодключаемоеОборудованиеДляСверки = СтрокаКассы.ИдентификаторУстройства;
			Иначе
				ПодключаемоеОборудованиеДляСверки = ПодключаемоеОборудование;
			КонецЕсли;
			
			ЭквайринговыйТерминал = Терминал.ПодключаемоеОборудование;
			ПараметрыОперации = МенеджерОборудованияРМККлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
			МенеджерОборудованияРМККлиент.НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале(Оповещение,
				УникальныйИдентификатор, ЭквайринговыйТерминал, ПараметрыОперации, , ПодключаемоеОборудованиеДляСверки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверкуИтоговЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Если ДополнительныеПараметры.ЗакрытиеСмены Тогда
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	Иначе
		Доступность = Истина;
	КонецЕсли;
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И НЕ РезультатВыполнения.Результат Тогда
		
		ТекстЗаголовка = НСтр("ru = 'При выполнении операции произошла ошибка'");
		ТекстСообщения = НСтр("ru = '""%ОписаниеОшибки%"".
										|Операция сверки итогов не была проведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьОплатуПриОшибке()
	
	СуммаОплаченоНал = 0;
	СуммаОплаченоБН = 0;
	СуммаОплаченоСБП = 0;
	СуммаОплаченоЮКасса = 0;
	СуммаОплаченоБезнал = 0;
	СуммаОплаченоВРассрочку = 0;
	СуммаОплаченоСертификатамиНСПК = 0;
	Сдача = 0;
	
	Объект.Оплата.Очистить();
	ПодключитьОбработчикОжидания("ОбработкаВыводаОжиданияОплатыНаДисплейПокупателя", 5, Истина);

	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаНал, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаКартой, Ложь);
	ОтложенныйЧекПолностьюОплачен = Ложь;
	ПараметрыОплатыПлатежнойСистемой = Неопределено; 
	ОчиститьТаблицуПлатежныхКарт();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверткуИтоговЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Доступность = Истина;
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И Не РезультатВыполнения.Результат Тогда
		
		ТекстЗаголовка = НСтр("ru = 'При выполнении операции произошла ошибка'");
		ТекстСообщения = НСтр("ru = '""%ОписаниеОшибки%"".
										|Операция сверки итогов не была проведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьОплатуПоКартеДляСтрокиОплаты(СтрокаОплаты, ТекущийЭквайринговыйТерминал)
	
	ПараметрыОперации = МенеджерОборудованияРМККлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
	ПараметрыОперации.ТипТранзакции = НСтр("ru = 'AuthorizeRefund'");
	ПараметрыОперации.СуммаОперации = СтрокаОплаты.Сумма;
	ПараметрыОперации.НомерЧека = НСтр("ru = ' '");
	ПараметрыОперации.ДокументОснование = ЧекККМВОбработке;
	ПараметрыОперации.ВидОплатыНаТерминале = МенеджерОборудованияРМККлиент.СпособОплатыЭТ(СтрокаОплаты.КодСпособаОплатыЭТ);
	
	ЭквайринговыйТерминал = Неопределено;
	ТекущийТерминал = Неопределено;
		
	Если ЭтоВозвратБезОснования Тогда
		
		ТекущийТерминал = ТекущийЭквайринговыйТерминал;
		ЭквайринговыйТерминал = ТекущийЭквайринговыйТерминал.ПодключаемоеОборудование;
		
	Иначе
		
		СтруктураПоискаТерминала = Новый Структура();
		СтруктураПоискаТерминала.Вставить("ЭквайринговыйТерминал", СтрокаОплаты.ЭквайринговыйТерминал);
		
		МассивТерминалов = ТаблицаТерминалы.НайтиСтроки(СтруктураПоискаТерминала);
		Если МассивТерминалов.Количество() > 0 Тогда
			
			ТекущийТерминал = МассивТерминалов[0];
			ЭквайринговыйТерминал = ТекущийТерминал.ПодключаемоеОборудование;
			
		Иначе
			
			ТекущийТерминал = ТекущийЭквайринговыйТерминал;
			ЭквайринговыйТерминал = ТекущийЭквайринговыйТерминал.ПодключаемоеОборудование;
			
		КонецЕсли;
		
	КонецЕсли;
		
	ПараметрДействия = Новый Структура();
	ПараметрДействия.Вставить("СтрокаОплаты", СтрокаОплаты);
	ПараметрДействия.Вставить("ТекущийТерминал", ТекущийТерминал);
	ЗаполнитьЗначенияСвойств(ПараметрыОперации, СтрокаОплаты);
	
	Оповещение = Новый ОписаниеОповещения("ВернутьОплатуПоКартеЗавершение", ЭтотОбъект, ПараметрДействия);
	МенеджерОборудованияРМККлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение,
		УникальныйИдентификатор, ЭквайринговыйТерминал, ПараметрыОперации, , ПодключаемоеОборудование);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьЧекККМПередПробитием(ДополнительныеДанные, Отказ, ТекстОшибки)
	
	РеквизитыФормы = ДополнительныеДанные.РеквизитыФормы;
	Если Не РеквизитыФормы.ЭтоЧекКоррекции Тогда
		СистемаНалогообложения = РеквизитыФормы.ВыбраннаяСистемаНалогообложения;
	Иначе
		СистемаНалогообложения = СистемаНалогообложенияЧека(РеквизитыФормы.ЧекККМПродажа);
	КонецЕсли;
	ИнтерфейсРМКСлужебный.ПреобразоватьМассивыСтруктурДанныхЧекаВТаблицы(РеквизитыФормы);
	ОбщегоНазначенияРМКПереопределяемый.ЗаписатьЧекККМПередПробитием(РеквизитыФормы,
		Отказ, ТекстОшибки, СистемаНалогообложения);
	ИнтерфейсРМКСлужебный.ПреобразоватьТаблицыЧекаВСтруктурыДанных(РеквизитыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронныеПрикассовыеВесы

&НаКлиенте
Функция ЭлектронныеВесыДоступны()
	Возврат ТаблицаЭлектронныхВесов.Количество() И НЕ ЭлектронныеВесыЗаняты;
КонецФункции

&НаКлиенте
Процедура ЗапроситьПраваНаПолучениеВеса()
	
	НеобходимоеПраво = "ВводВесаТовара";
	ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьВводВесаВРежимеКСО()
	
	Если ЗначениеЗаполнено(ТаблицаЭлектронныхВесов) Тогда
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
		ЗапуститьПолучениеВеса(ТекущаяСтрока.Номенклатура);
	Иначе
		УстановитьДоступностьВводаВесаВесовогоТовара();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПолучениеВеса(Товар)
	
	ЭлектронныеВесыЗаняты = Истина;
	ПараметрыВзвешивания = Новый Структура();
	ПараметрыВзвешивания.Вставить("Товар", Товар);
	ПараметрыОперации = Новый Структура();
	
	Если ТаблицаЭлектронныхВесов.Количество() > 1 Тогда
		ИдентификаторВесов = Неопределено;
	Иначе
		ИдентификаторВесов = ТаблицаЭлектронныхВесов[0].ЭлектронныеВесы;
	КонецЕсли;
	
	ОповещениеЗавершенияВзвешивания = Новый ОписаниеОповещения("ПолучитьВесСЭлектронныхВесовЗавершение",
		ЭтотОбъект, ПараметрыВзвешивания);
		
	МенеджерОборудованияРМККлиент.НачатьПолученияВесаСЭлектронныхВесов(ОповещениеЗавершенияВзвешивания,
		УникальныйИдентификатор, ИдентификаторВесов, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьВводаВесаВесовогоТовара()

	Элемент = Элементы.ТекущийТоварКоличество;
	ЭтоВводСуммы = ЭтоПолеВводаДробнойСуммы(Элемент.ТекстРедактирования);
	ПереключитьЦифровуюПанельДляВводаСумм(Элемент, Не ЭтоВводСуммы);
	
	УстановитьДоступностьЭлементаФормы(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВесТекущегоТовара(ЗапросВесаСПовышениемПрав = Ложь)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		ЗаполнитьВесТекущегоТовара(ТекущаяСтрока, ЗапросВесаСПовышениемПрав);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВесТекущегоТовара(ТекущаяСтрока, ЗапросВесаСПовышениемПрав = Ложь)
	
	Товар = ТекущаяСтрока.Номенклатура;
	Если ЗначениеЗаполнено(ТаблицаЭлектронныхВесов) Тогда
		
		Если Не ЭлектронныеВесыЗаняты Тогда
			Если ТекущаяСтрока.Количество > 0 И РежимКассыСамообслуживания Тогда
				ЗапроситьПраваНаПолучениеВеса();
				ЗапросВесаСПовышениемПрав = Истина;
			Иначе
				ЗапуститьПолучениеВеса(Товар);
			КонецЕсли;
		КонецЕсли;
			
	ИначеЕсли РежимКассыСамообслуживания Тогда
		
		ЗапроситьПраваНаПолучениеВеса();
		ЗапросВесаСПовышениемПрав = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВесСЭлектронныхВесов(ТекущаяСтрока, ВесТовара)
	
	Если РежимКассыСамообслуживания Или ОбновлятьКоличествоПриПовторномПолученииВеса Тогда
		ТекущаяСтрока.Количество = ВесТовара;
		ТекущийТоварКоличество = ВесТовара;
	Иначе
		ТекущаяСтрока.Количество = ТекущаяСтрока.Количество + ВесТовара;
		ТекущийТоварКоличество = ТекущийТоварКоличество + ВесТовара;
	КонецЕсли;
	ПересчетКоличестваТовара(ТекущаяСтрока);
	ПересчитатьСуммы(ТекущаяСтрока, Истина);
	РассчитатьСуммуОплатыБонусами();
	ОбновитьИнформациюНаДисплееПокупателя(ТипыОперацийДисплеяПокупателя.ИзменениеКоличества);
	ЗакрытьСтраницуСОшибкойКоличества();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВесСЭлектронныхВесовЗавершение(Результат, ПараметрыВзвешивания) Экспорт
	
	ЭлектронныеВесыЗаняты = Ложь;
	
	Если ЕстьСвойство(Результат, "Результат") И Результат.Результат Тогда
		
		ВесТовара = Результат.Вес;
		
		Если ЕстьСвойство(ПараметрыВзвешивания, "Товар") Тогда
			
			ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
			
			Если ТекущаяСтрока <> Неопределено И ТекущаяСтрока.Свойство("Количество") Тогда
				
				Если ТекущаяСтрока.Количество > 0 И ВесТовара = 0 Тогда
					
					ТекстОповещенияПользователя = НСтр("ru = 'Электронные весы вернули нулевой вес'");
					ВывестиПредупреждениеОшибкиПолученияВеса(ТекстОповещенияПользователя);
					
				ИначеЕсли ВесТовара > 0 Тогда
					
					УстановитьВесСЭлектронныхВесов(ТекущаяСтрока, ВесТовара);
					
				ИначеЕсли ТекущаяСтрока.Количество = 0 И ВесТовара = 0 И ОжиданиеКонтроляВеса Тогда
					
					ЕстьНезаполненныеДанные();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'При взвешивании товара произошла ошибка. Пожалуйста, повторите попытку.'");
		
		Если ЕстьСвойство(Результат, "ОписаниеОшибки") И ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
			ТекстПредупреждения = Результат.ОписаниеОшибки;
		КонецЕсли;
		
		ВывестиПредупреждениеОшибкиПолученияВеса(ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиПредупреждениеОшибкиПолученияВеса(ТекстПредупреждения)
	
	Если РежимКассыСамообслуживания Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Не указан вес.'");
		ТекстНачало = СтрШаблон("%1 ", НСтр("ru = 'Нажмите кнопку'"));
		ТекстВесПродолжение = СтрШаблон(" %1", НСтр("ru = 'для получения веса.'"));
		ТекстОшибки = Новый ФорматированнаяСтрока(ТекстПредупреждения, ТекстНачало,
			БиблиотекаКартинок.Scales, ТекстВесПродолжение);
		ПараметрыОшибки = Новый Структура;
		ПараметрыОшибки.Вставить("НеВызыватьЗаменуПрав", Истина);
		ПараметрыОшибки.Вставить("ЭтоПредупреждение", Истина);
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки, ПараметрыОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКПараметрамТарирования()

	Если ЭлектронныеВесыДоступны() Тогда
		ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
		
		ПараметрыОткрытия = Новый Структура("ВесТары,ТаблицаЭлектронныхВесов,ЭлектронныеВесыЗаняты",
			ВесТары, ТаблицаЭлектронныхВесов, ЭлектронныеВесыЗаняты);
		
		ОповещениеОЗавершенииРаботыСПараметрамиТарирования = Новый ОписаниеОповещения(
			"ЗавершениеРаботыСПараметрамиТарирования", ЭтотОбъект);
		
		ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаТарированияЭлектронныхВесов",
			ПараметрыОткрытия, ЭтотОбъект, , , , ОповещениеОЗавершенииРаботыСПараметрамиТарирования,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеРаботыСПараметрамиТарирования(РезультатВыполнения, Параметры) Экспорт
	
	Если ЕстьСвойство(РезультатВыполнения, "ВесТары")
		И ЕстьСвойство(РезультатВыполнения, "ЭлектронныеВесыЗаняты") Тогда
		
			ВесТары = РезультатВыполнения.ВесТары;
			ЭлектронныеВесыЗаняты = РезультатВыполнения.ЭлектронныеВесыЗаняты;
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Наборы

&НаКлиенте
Функция ЭтоСоставляющаяНабора(СтрокаТаблицыТовары)
	Возврат ?(СтрокаТаблицыТовары = Неопределено, Ложь, СтрокаТаблицыТовары.НомерНабора > 0);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СоставНабораПоЭлементуНабора(СтрокаТаблицыТовары, ТаблицаТовары)

	Результат = Новый Массив();
	
	Если Не СтрокаТаблицыТовары = Неопределено
		И ТипЗнч(СтрокаТаблицыТовары) = Тип("ДанныеФормыЭлементКоллекции")
		И ТипЗнч(ТаблицаТовары) = Тип("ДанныеФормыКоллекция") Тогда
		
		ИдентификаторНабора = СтрокаТаблицыТовары.НомерНабора;
		ОтборДляПоиска = Новый Структура();
		ОтборДляПоиска.Вставить("НомерНабора", ИдентификаторНабора);
		
		Результат = ТаблицаТовары.НайтиСтроки(ОтборДляПоиска);
		
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МаксимальныйНомерНабора(ТаблицаТовары)
	
	МаксимальныйНомерНабора = 0;
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		ТекущийНомерНабора = СтрокаТовары.НомерНабора;
		Если ТекущийНомерНабора > МаксимальныйНомерНабора Тогда
			МаксимальныйНомерНабора = ТекущийНомерНабора;
		КонецЕсли;
	КонецЦикла;
	МаксимальныйНомерНабора = МаксимальныйНомерНабора + 1;
	
	Возврат МаксимальныйНомерНабора;
	
КонецФункции

&НаСервере
Процедура ДобавитьНаборВТабличнуюЧасть(ТекущийВыбор, ДополнительныеДанные)
	
	ТаблицаСоставНабора = Новый ТаблицаЗначений;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьСоставНабора(ТекущийВыбор,
		ТаблицаСоставНабора, ЭтотОбъект, ДополнительныеДанные);
	
	МаксимальныйНомерНабора = МаксимальныйНомерНабора(Объект.Товары);
	ВНабореЕстьПострочныйТовар = ВНабореЕстьПострочныйТовар(ТаблицаСоставНабора);
	
	Если ВНабореЕстьПострочныйТовар Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаСоставНабора Цикл
			ДобавитьКомплектующуюНабораВТабличнуюЧасть(СтрокаТаблицы, МаксимальныйНомерНабора);
		КонецЦикла;
		
	Иначе
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НоменклатураНабора", ТекущийВыбор.Номенклатура);
		Если ТекущийВыбор.Свойство("Характеристика") Тогда
			СтруктураПоиска.Вставить("ХарактеристикаНабора", ТекущийВыбор.Характеристика);
		КонецЕсли;
		МассивСтрокТоваров = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрокТоваров.Количество() = 0 ИЛИ ДобавлятьВсеТоварыОтдельнойСтрокой Тогда
			
			Для Каждого СтрокаТаблицы Из ТаблицаСоставНабора Цикл
				ДобавитьКомплектующуюНабораВТабличнуюЧасть(СтрокаТаблицы, МаксимальныйНомерНабора);
			КонецЦикла;
			
		Иначе
			
			Для Каждого СтрокаМассива Из МассивСтрокТоваров Цикл
				СтароеКоличествоНаборов = СтрокаМассива.КоличествоНаборов;
				НовоеКоличествоНаборов = СтароеКоличествоНаборов + 1;
				КоэффициентПересчета = НовоеКоличествоНаборов / СтароеКоличествоНаборов;
				СтрокаМассива.КоличествоНаборов = НовоеКоличествоНаборов;
				СтрокаМассива.Количество = СтрокаМассива.Количество * КоэффициентПересчета;
				СтрокаМассива.КоличествоУпаковок = СтрокаМассива.КоличествоУпаковок * КоэффициентПересчета;
				
				ОбщегоНазначенияРМККлиентСервер.ПересчитатьСуммуВСтроке(ЭтотОбъект, СтрокаМассива, ,
					ИспользоватьАвтоматическиеСкидки);
				ОбщегоНазначенияРМККлиентСервер.РассчитатьСуммуНДС(Объект, СтрокаМассива);
				ОбщегоНазначенияРМККлиентСервер.СуммаДокумента(Объект);
				
				ТекущийТоварКоличество = НовоеКоличествоНаборов;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомплектующуюНабораВТабличнуюЧасть(СтрокаКомплектующая, НомерНабора)

	НоваяСтрока = Объект.Товары.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКомплектующая);
	НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	НоваяСтрока.НеобходимостьВводаКодаМаркировки = СтрокаКомплектующая.Маркируемый;
	НоваяСтрока.НомерНабора = НомерНабора;
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьОрганизациюПродажи(НоваяСтрока, ЭтотОбъект);
	Если Не ЗначениеЗаполнено(НоваяСтрока.Организация) Тогда
		НоваяСтрока.Организация = ОсновнаяОрганизация;
	Иначе
		ОтборПоОрганизации = Новый Структура("Организация", НоваяСтрока.Организация);
		КассыККМПоОрганизации = ТаблицаКассККМОрганизаций.НайтиСтроки(ОтборПоОрганизации);
		Если КассыККМПоОрганизации.Количество() = 0 Тогда
			НоваяСтрока.ОплатаНедоступна = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НоваяСтрока.СистемаНалогообложения) Тогда
		НоваяСтрока.СистемаНалогообложения = ОбщегоНазначенияРМК.СНОККТДляОрганизации(ЭтотОбъект, НоваяСтрока);
	КонецЕсли;
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьВозможностьОплатыЭС(НоваяСтрока, ЭтотОбъект);
	
	СтавкаНДС = ПродажиРМК.АктуальнаяСтавкаНДСДляТовара(Объект, НоваяСтрока, НоваяСтрока.СистемаНалогообложения);
	НоваяСтрока.СтавкаНДС = СтавкаНДС;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ПолучитьВес, НоваяСтрока.Весовой);
	
	НоваяСтрока.ПредставлениеКодАртикул = ПолучитьПредставлениеКодАртикул(СтрокаКомплектующая, ИспользоватьКод, ИспользоватьАртикул);
	
	ПредставлениеХарактеристики = "";
	Если ЗначениеЗаполнено(СтрокаКомплектующая.Характеристика) Тогда
		ПредставлениеХарактеристики = " (" + Строка(СтрокаКомплектующая.Характеристика) + ")";
	КонецЕсли;
	
	ПредставлениеТовара = СтрШаблон("%1%2", СтрокаКомплектующая.Наименование, ПредставлениеХарактеристики);
	НоваяСтрока.ПредставлениеНоменклатураХарактеристика = ПредставлениеТовара;
	ШтрихкодированиеРМК.ЗаполнитьПредставлениеЕдиницыИзмерения(НоваяСтрока);
	
	ТекущийТоварКоличество = НоваяСтрока.КоличествоУпаковок;
	Элементы.Товары.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	ДоступныРучныеСкидки = ДопускаетсяПрименениеСкидок И (Объект.Товары.Количество() > 0);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРучнаяСкидкаНаТовар, ДоступныРучныеСкидки);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, ДоступныРучныеСкидки);
	ПодготовитьИнтерфейсДобавленияТовараБезКонтрольнойМаркиНаСервере(НоваяСтрока);
	
	ДобавленаНоваяСтрокаКорзины = Истина;
	
	СписокДобавленныхСтрокТоваров.Добавить(НоваяСтрока.ПолучитьИдентификатор());
	ДополнитьСтрокуТовараВычисляемымиДанными(НоваяСтрока);
	
	ОбщегоНазначенияРМККлиентСервер.ПересчитатьСуммуВСтроке(ЭтотОбъект, НоваяСтрока, , ИспользоватьАвтоматическиеСкидки);
	ОбщегоНазначенияРМККлиентСервер.РассчитатьСуммуНДС(Объект, НоваяСтрока);
	ОбщегоНазначенияРМККлиентСервер.СуммаДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВНабореЕстьПострочныйТовар(СписокТоваров)
	
	ВНабореЕстьПострочныйТовар = Ложь;
	
	Для Каждого СтрокаТовара Из СписокТоваров Цикл
		Если СтрокаТовара.НеобходимостьВводаСерии Или СтрокаТовара.НеобходимостьВводаКодаМаркировки Тогда
			ВНабореЕстьПострочныйТовар = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВНабореЕстьПострочныйТовар;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьКоличествоНабора(ТекущаяСтрока, УвеличитьКоличество, НовоеКоличество = 0)
	
	МаксимальныйНомерНабора = МаксимальныйНомерНабора(Объект.Товары);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерНабора", ТекущаяСтрока.НомерНабора);
	МассивСтрокНабора = Объект.Товары.НайтиСтроки(СтруктураПоиска);
	
	ВНабореЕстьПострочныйТовар = ВНабореЕстьПострочныйТовар(МассивСтрокНабора);
	
	Если ВНабореЕстьПострочныйТовар Тогда
		
		Если УвеличитьКоличество Тогда
			Для Каждого СтрокаМассива Из МассивСтрокНабора Цикл
				НоваяСтрока = Объект.Товары.Добавить();
				ИсключаяСвойства = "Серия, Партия, КодМаркировки, ПроцентАвтоматическойСкидки, ПроцентСкидкиНаценки,
					|СуммаАвтоматическойСкидки, СуммаСкидкиНаценки, СуммаСкидкиОплатыБонусом, Продавец, РассчитанаСкидка,
					|КонтрольнаяМарка, КонтрольнаяМаркаОбработана, Оплачена, СуммаСкидокОбщая";
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассива, , ИсключаяСвойства);
				НоваяСтрока.НомерНабора = МаксимальныйНомерНабора;
				НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
				
				ПересчитатьСуммы(НоваяСтрока);
			КонецЦикла;
		Иначе
			Для Каждого СтрокаМассива Из МассивСтрокНабора Цикл
				Объект.Товары.Удалить(СтрокаМассива);
			КонецЦикла;
			ПересчитатьИтогиТабличнойЧастиТовары();
		КонецЕсли;
		
	Иначе
		Для Каждого СтрокаМассива Из МассивСтрокНабора Цикл
			ИзменитьКоличествоКомплектующихНабора(СтрокаМассива, УвеличитьКоличество, НовоеКоличество);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 И Не ЭтоЧекКоррекции Тогда
		ИнициализироватьИнтерфейсРабочегоМестаКассира();
	КонецЕсли;
	
	ОбработатьИзменениеТаблицыТоваровНаКлиенте();
	ОбновитьИнформациюНаДисплееПокупателя(ТипыОперацийДисплеяПокупателя.ИзменениеКоличества);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКоличествоКомплектующихНабора(ТекущаяСтрока, УвеличитьКоличество, НовоеКоличество)
	
	СтароеКоличествоНаборов = ТекущаяСтрока.КоличествоНаборов;
	
	Если УвеличитьКоличество Тогда
		НовоеКоличествоНаборов = ?(НовоеКоличество = 0, СтароеКоличествоНаборов + 1, НовоеКоличество);
	Иначе
		НовоеКоличествоНаборов = ?(НовоеКоличество = 0, СтароеКоличествоНаборов - 1, НовоеКоличество);
		Если Не ТекущаяСтрока.Весовой И НовоеКоличествоНаборов = 0 Тогда
			Объект.Товары.Удалить(ТекущаяСтрока);
			ПересчитатьИтогиТабличнойЧастиТовары();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	КоэффициентПересчета = НовоеКоличествоНаборов / СтароеКоличествоНаборов;
	ТекущаяСтрока.Количество = ТекущаяСтрока.Количество * КоэффициентПересчета;
	ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок * КоэффициентПересчета;
	ТекущаяСтрока.КоличествоНаборов = НовоеКоличествоНаборов;
	ТекущийТоварКоличество = НовоеКоличествоНаборов;
	ПересчитатьСуммы(ТекущаяСтрока, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОплатаQRКодом

&НаКлиенте
Процедура НачатьОплатуВозвратПлатежнойСистемой(ПлатежнаяСистемаККТ, АвтономнаяККТСБП = Ложь, АктивацияNFC = Ложь)
	
	Перем ТекстОшибки;
	
	Элементы.ГруппаПлатежнаяСистема.Доступность = Истина;
	ЭтоОперацияПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	
	ТипыПлатежныхСистемККТ = МенеджерОборудованияРМККлиент.ТипыПлатежнойСистемыККТ();
	Если СуммаКОплате = 0 Тогда 
		
		Если ПлатежнаяСистемаККТ = ТипыПлатежныхСистемККТ.Получить("ЮКасса") Тогда
			ТекстОшибки = НСтр("ru = 'Нулевая сумма оплаты по ЮКассе.'");
		Иначе
			ТекстОшибки = НСтр("ru = 'Нулевая сумма оплаты по СБП.'");
		КонецЕсли;
		
	ИначеЕсли ЭтоОперацияПродажа
		И ПлатежнаяСистемаККТ = ТипыПлатежныхСистемККТ.Получить("ЮКасса") Тогда
		ЗаписатьЧекПередОплатойПлатежнойСистемы(ВыбраннаяСистемаНалогообложения, ТекстОшибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда

		Если Не АктивацияNFC Тогда
			ОткрытьСтраницуИнфоОшибка(НСтр("ru = 'Ошибки оплаты'"), ТекстОшибки);
		КонецЕсли;
		
		ТипОплаты = "";
		
	Иначе
		ПроверитьЗапуститьОплатуВозвратПлатежнойСистемой(АвтономнаяККТСБП, АктивацияNFC);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗапуститьОплатуВозвратПлатежнойСистемой(АвтономнаяККТСБП, АктивацияNFC = Ложь)
	
	Если СразуОтправлятьНаПечатьЧека() Или АвтономнаяККТСБП Или АктивацияNFC Тогда
		ЗапуститьОплатуВозвратПлатежнойСистемой(АвтономнаяККТСБП, АктивацияNFC);
	Иначе
		ПараметрыОплатыПлатежнойСистемой = Новый Структура;
		ПараметрыОплатыПлатежнойСистемой.Вставить("АвтономнаяККТ", АвтономнаяККТСБП);
		ПерейтиНаСтраницуОтправкиЭлектронногоЧека();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОплатуВозвратПлатежнойСистемой(АвтономнаяККТСБП, АктивацияNFC = Ложь)
	
	Если Не АктивацияNFC Тогда
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.ПлатежныеСистемы_ВыбраннаяКоманда) Тогда
		НомерВидаОплаты = Число(Прав(ЭтотОбъект.ПлатежныеСистемы_ВыбраннаяКоманда,1));
		ВариантыВыбора  = Элементы.ПлатежнаяСистема_ИдентификаторПС.СписокВыбора.ВыгрузитьЗначения();
		
		ИнициализацияПанелиДействийПлатежнойСистемы(ВариантыВыбора[НомерВидаОплаты-1], АвтономнаяККТСБП, АктивацияNFC);
	Иначе
		ИнициализацияПанелиДействийПлатежнойСистемы(ПлатежнаяСистема_ИдентификаторПС, АвтономнаяККТСБП, АктивацияNFC);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЭтапОплатыПлатежнойСистемой()
	
	ОповещениеЗавершитьОплату 				= Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
	
	ТекущийСлойПанелиПлатежнойСистемы = ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиДействийПлатежнойСистемы);
	Если ТекущийСлойПанелиПлатежнойСистемы = Элементы.ГруппаОсновнаяСтраница Тогда
		
		Если ПлатежнаяСистема_НоваяЗаявка.ВидОперацииПродажа Тогда
		
			Если ПлатежнаяСистема_НоваяЗаявка.Оплачивается Тогда
				ПодключитьОбработчикОжидания("ОпределитьСтатусОплаты", 0.1, Истина);
			Иначе
				ПодключитьОбработчикОжидания("ПолучитьИдентификаторОплаты", 0.1, Истина);
			КонецЕсли;
			
		Иначе
			
			Если ПлатежнаяСистема_НоваяЗаявка.Оплачивается Тогда
				
				ПодключитьОбработчикОжидания("ОпределитьСтатусВозврата", 0.1, Истина);
				
			ИначеЕсли ЗначениеЗаполнено(ПлатежнаяСистема_НоваяЗаявка.ДокументОплаты)
				И Не ЗначениеЗаполнено(ПлатежнаяСистема_ИдентификаторОплаты) Тогда
				
				ПодключитьОбработчикОжидания("ОпределитьСтатусОплаты", 0.1, Истина);
				
			Иначе
				
				ПодключитьОбработчикОжидания("ВыполнитьВозвратПлатежнойСистемой", 0.1, Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТекущийСлойПанелиПлатежнойСистемы = Элементы.ГруппаПодтверждение Тогда
		
		ИнтеграцияСПлатежнымиСистемамиРМККлиент.ПодтвердитьВозврат(ЭтотОбъект, ОповещениеЗавершитьОплату);
		
	ИначеЕсли ТекущийСлойПанелиПлатежнойСистемы = Элементы.ГруппаQRКод Тогда
		
		ИнтеграцияСПлатежнымиСистемамиРМККлиент.ПечатьПречека(ЭтотОбъект, Истина, ПлатежнаяСистема_НоваяЗаявка.ПодключаемоеОборудование);
		
	ИначеЕсли ТекущийСлойПанелиПлатежнойСистемы = Элементы.ГруппаВыполняется
		ИЛИ ТекущийСлойПанелиПлатежнойСистемы = Элементы.ГруппаQRКодПовтор
		ИЛИ ТекущийСлойПанелиПлатежнойСистемы = Элементы.ГруппаОшибкаПолученияСтатуса Тогда
		
		Если ПлатежнаяСистема_НоваяЗаявка.ВидОперацииПродажа Тогда
			ПодключитьОбработчикОжидания("ОпределитьСтатусОплаты", 0.1, Истина);
		Иначе
			ПодключитьОбработчикОжидания("ОпределитьСтатусВозврата", 0.1, Истина);
		КонецЕсли;
		
	ИначеЕсли ТекущийСлойПанелиПлатежнойСистемы = Элементы.ГруппаОшибка Тогда
		
		СанкционироватьЗакрытиеОперацииПлатежнойСистемой();
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОповещениеЗавершитьОплату, "ЗакрытьЧек");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОплатуПринудительно()
	
	ОповещениеЗавершитьОплату 				= Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
	ТребуетсяПодтверждениеАдминистратором 	= Не ЕстьПравоНаДействие("РазрешитьОплатуВозвратБезПодтвержденияОтПлатежнойСистемы");
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевРазделПлатежнаяСистема) = Элементы.ГруппаПодтверждениеОплаты Тогда
		
		Если ТребуетсяПодтверждениеАдминистратором Тогда
			
			Если НЕ ЗначениеЗаполнено(КодДляЗаменыПрав) Тогда
				Возврат;
			КонецЕсли;
	
			ПлатежнаяСистема_НоваяЗаявка.БылоПодтверждениеКодомАдминистратора = Ложь;
			ПользовательДоЗаменыПрав = Объект.ПользовательБД;
			КассирДоЗаменыПрав = Объект.Кассир;
	
			ЗаменитьПраваИВыполнитьТребуемоеДействие(КодДляЗаменыПрав);
			ОбработатьИзменениеТаблицыТоваровНаКлиенте();
			
			Если ПлатежнаяСистема_НоваяЗаявка.БылоПодтверждениеКодомАдминистратора Тогда
				ИнтеграцияСПлатежнымиСистемамиРМККлиент.ПодтвердитьОплату(ЭтотОбъект, ОповещениеЗавершитьОплату);
			Иначе
				
				УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияТекстПодтверждениеОплатыОшибка, Истина);
				ПодключитьОбработчикОжидания("СкрытьОшибкиПлатежнойСистемы", 5, Истина);
				
			КонецЕсли;
		
		Иначе
			ИнтеграцияСПлатежнымиСистемамиРМККлиент.ПодтвердитьОплату(ЭтотОбъект, ОповещениеЗавершитьОплату);
		КонецЕсли;
		
	ИначеЕсли ПлатежнаяСистема_НоваяЗаявка.ВидОперацииПродажа Тогда
		
		ТекущаяОперация  = "ПодтвердитьОплатуПлатежнойСистемой";
		КодДляЗаменыПрав = "";
		
		ТекстИнформации  = НСтр("ru = 'Проверьте выполнение операции оплаты платежной системы.'") + Символы.ПС;
		ТекстИнформации  = ТекстИнформации + НСтр("ru = 'Сумма операции:'")
			+ " "+ ПлатежнаяСистема_НоваяЗаявка.ИтогПоОрганизации + Символы.ПС;
		
		Если ТребуетсяПодтверждениеАдминистратором Тогда
			
			ИнтеграцияСПлатежнымиСистемамиРМККлиент.ВывестиИнформацию(ЭтотОбъект,
				НСтр("ru = 'Попросите администратора подтвердить оплату'"),
				ТекстИнформации, 
																"ПодтверждениеОплаты");
																
			Элементы.КодДляПодтвержденияОплаты.Видимость = Истина;
			ТекущийЭлемент 					 = Элементы.КодДляПодтвержденияОплаты;
			
		Иначе
			
			Элементы.КодДляПодтвержденияОплаты.Видимость = Ложь;
			
			ИнтеграцияСПлатежнымиСистемамиРМККлиент.ВывестиИнформацию(ЭтотОбъект, 
				НСтр("ru = 'Операция оплаты прошла успешно?'"), 
				ТекстИнформации, 
				"ПодтверждениеОплаты");
		КонецЕсли;
		
	Иначе
		
		КодДляЗаменыПрав = "";
		ТекущаяОперация  = "ПодтвердитьОплатуПлатежнойСистемой";
		
		ТекстИнформации  = НСтр("ru = 'Проверьте выполнение операции возврата платежной системы.'") + Символы.ПС;
		ТекстИнформации  = ТекстИнформации + НСтр("ru = 'Сумма операции:'")
			+ " "+ ПлатежнаяСистема_НоваяЗаявка.ИтогПоОрганизации + Символы.ПС;
		
		Если ТребуетсяПодтверждениеАдминистратором Тогда
			
			ИнтеграцияСПлатежнымиСистемамиРМККлиент.ВывестиИнформацию(ЭтотОбъект,
				НСтр("ru = 'Попросите администратора подтвердить возврат'"),
				ТекстИнформации,
				"ПодтверждениеОплаты");
			
			Элементы.КодДляПодтвержденияОплаты.Видимость = Истина;
			ТекущийЭлемент 					 = Элементы.КодДляПодтвержденияОплаты;
			
		Иначе
			
			Элементы.КодДляПодтвержденияОплаты.Видимость = Ложь;
			
			ИнтеграцияСПлатежнымиСистемамиРМККлиент.ВывестиИнформацию(ЭтотОбъект, 
				НСтр("ru = 'Операция возврата прошла успешно?'"),
				ТекстИнформации,
				"ПодтверждениеОплаты");
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОплатуВозвратПлатежнойСистемой(Действие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Действие = "ОтложитьЧек" Тогда
		
		Объект.Оплачивается = Истина;
		СтрокиНаУдаления 	= Объект.Товары.НайтиСтроки(Новый Структура("Оплачена", Истина));
		
		Для Каждого СтрокаНаУдаление Из СтрокиНаУдаления Цикл
			Объект.Товары.Удалить(СтрокаНаУдаление);
		КонецЦикла;
		
		ЭтоОперацияПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
		Если ЭтоОперацияПродажа Тогда
			ОтложенныйЧек = ПлатежнаяСистема_НоваяЗаявка.ДокументОплаты;
		Иначе
			ОтложенныйЧек = ПлатежнаяСистема_НоваяЗаявка.ДокументВозврата;
		КонецЕсли;
		
		ОтложитьЧек(Команды.ОтложитьЧек);
		СанкционироватьЗакрытиеОперацииПлатежнойСистемой();
		
	ИначеЕсли Действие = "ОтменитьЧек" Тогда

		ПлатежнаяСистема_СанкционированноеЗакрытие = Истина;
		СанкционироватьЗакрытиеОперацииПлатежнойСистемой();
		
	ИначеЕсли Действие = "ЗакрытьЧек"
		ИЛИ Действие = "Да" 
		ИЛИ Действие = "ДобавитьВидОплаты" Тогда
		
		Если Действие = "ДобавитьВидОплаты" Тогда
			ПлатежнаяСистема_НоваяЗаявка.БылоПодтверждениеПлатежнойСистемы = Истина;
		КонецЕсли;
		
		#Область ПробитиеЧека
		Если ОтменаПлатежаСБП И ТекущаяОперация = "ВозвратОплаты" Тогда
			
			СброситьОплатуПриОшибке();
			РассчитатьСуммыОплаты();
			НастроитьДоступностьПробитьЧек();
			ПерейтиНаСтраницуОплата();
			
		ИначеЕсли ОтменаПлатежаСБП И ТекущаяОперация = "УдалитьЧекРМК" Тогда
			
			Если КодДляЗаменыПрав = "" Тогда
				УдалитьЧекКлиент();
			Иначе
				ЗаменитьПраваИВыполнитьТребуемоеДействие(КодДляЗаменыПрав);
				НастроитьФормуПослеЗаменыПрав();
			КонецЕсли; 
			
		Иначе
			
			ТипыПлатежныхСистем = МенеджерОборудованияРМККлиент.ТипыПлатежнойСистемыККТ();
			Если ПлатежнаяСистема_НоваяЗаявка.ТипПлатежнойСистемы = ТипыПлатежныхСистем.Получить("ЮКасса") Тогда
				СуммаОплаченоЮКасса = ПлатежнаяСистема_НоваяЗаявка.ИтогПоОрганизации;
			Иначе
				СуммаОплаченоСБП = ПлатежнаяСистема_НоваяЗаявка.ИтогПоОрганизации;
			КонецЕсли;
			
			Если ПлатежнаяСистема_НоваяЗаявка.ВидОперацииПродажа Тогда
				ЧекККМВОбработке = ПлатежнаяСистема_НоваяЗаявка.ДокументОплаты;
				ОтложенныйЧек	 = ПлатежнаяСистема_НоваяЗаявка.ДокументОплаты;
			Иначе
				ЧекККМВОбработке = ПлатежнаяСистема_НоваяЗаявка.ДокументВозврата;
				ОтложенныйЧек	 = ПлатежнаяСистема_НоваяЗаявка.ДокументВозврата;
			КонецЕсли;
		
			Если ПлатежнаяСистема_НоваяЗаявка.БылоПодтверждениеПлатежнойСистемы
				И ПлатежнаяСистема_НоваяЗаявка.ВидОперацииПродажа Тогда
				
				СсылочныйНомерСБП =
					ИнтеграцияСПлатежнымиСистемамиРМКВызовСервера.ИдентификаторыОперацииОплаты(
						ПлатежнаяСистема_НоваяЗаявка.Интеграция,
						ПлатежнаяСистема_НоваяЗаявка.ДокументОплаты);
						
				ПлатежнаяСистема_НоваяЗаявка.СсылочныйНомер = ?(ЗначениеЗаполнено(СсылочныйНомерСБП), 
					СсылочныйНомерСБП, 
					ПлатежнаяСистема_НоваяЗаявка.СсылочныйНомер);
				
			Иначе
				ПлатежнаяСистема_НоваяЗаявка.СсылочныйНомер = "";
			КонецЕсли;
		
			ЗаполнитьТаблицуОплат();
			РассчитатьСуммыОплаты();
			НастроитьДоступностьПробитьЧек();
			
			ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаЗавершение);
			ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.НастроитьФормуПоИнтеграции(ЭтотОбъект);
			
			ПодготовитьКПечатиЧека(ПлатежнаяСистема_НоваяЗаявка.АвтономнаяККТ);
			
		КонецЕсли;
		#КонецОбласти
		
	КонецЕсли;
	ОчиститьQRКодНаДисплееПокупателя();
	ВывестиИнформациюНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.Оплата);
	ОбработатьИзменениеТаблицыТоваровНаКлиенте();
	Если Не РежимЦифровойПанели = РежимыЦифровойПанели.Пустой Тогда
		ЗакрытьФормуДанныеПокупателяКлиент();
	КонецЕсли;
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИдентификаторОплаты()
	
	ОповещениеЗавершитьОплату = Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
	
	Если РежимКассыСамообслуживания Тогда

		ИнтеграцияСПлатежнымиСистемамиРМККлиент.ПолучитьИдентификаторОплаты(
			ЭтотОбъект, 
			ОповещениеЗавершитьОплату, 
			Ложь,
			Элементы.ГруппаПанельДействийNFC.Видимость);
			
	Иначе
		ИнтеграцияСПлатежнымиСистемамиРМККлиент.ПолучитьИдентификаторОплаты(ЭтотОбъект, ОповещениеЗавершитьОплату);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВозвратПлатежнойСистемой()
	
	ОповещениеЗавершитьОплату = Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
	ИнтеграцияСПлатежнымиСистемамиРМККлиент.ВозвратОплаты(ЭтотОбъект, ОповещениеЗавершитьОплату);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьСтатусОплаты()
	
	Если Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевРазделПлатежнаяСистема) = Элементы.ГруппаПанельДействий Тогда
		
		ПлатежнаяСистема_НоваяЗаявка.ОпределитьСтатусОплатыПозже = Истина;
		Возврат;
		
	КонецЕсли;
	
	ОповещениеЗавершитьОплату  = Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
	ОповещениеЗакрытьПанельNFC = Новый ОписаниеОповещения("ЗакрытьПанельNFC", ЭтотОбъект);     

	ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОпределитьСтатусОплаты(
		ЭтотОбъект, 
		ОповещениеЗавершитьОплату,
		Элементы.ГруппаПанельДействийNFC.Видимость,
		ОповещениеЗакрытьПанельNFC);
		
	ПлатежнаяСистема_НоваяЗаявка.ОпределитьСтатусОплатыПозже = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьСтатусВозврата()
	
	Если Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевРазделПлатежнаяСистема) = Элементы.ГруппаПанельДействий Тогда
		ПлатежнаяСистема_НоваяЗаявка.ОпределитьСтатусВозвратаПозже = Истина;
		Возврат;
	КонецЕсли;
	
	ОповещениеЗавершитьОплату = Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
	
	ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОпределитьСтатусВозврата(ЭтотОбъект, ОповещениеЗавершитьОплату);
	
	ПлатежнаяСистема_НоваяЗаявка.ОпределитьСтатусВозвратаПозже = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьОплатыQRКодом(ИнициализацияФормы = Ложь)
	
	ТипыПлатежныхСистем = МенеджерОборудованияРМККлиент.ТипыПлатежнойСистемыККТ();
	
	КлючПоискаОплатаСБП 	= Новый Структура("ПлатежнаяСистема",
		ТипыПлатежныхСистем.Получить("СистемаБыстрыхПлатежей"));
	КлючПоискаОплатаЮКасса 	= Новый Структура("ПлатежнаяСистема",
		ТипыПлатежныхСистем.Получить("ЮКасса"));
		
	ПлатежнаяСистема_ИдентификаторОплаты	= "";
	ПлатежнаяСистема_ИдентификаторПС		= "";
	
	Если ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации) Тогда
		
		Если ЗначениеЗаполнено(ЧекККМПродажа) Тогда
			
			ПараметрыВозврата =
				ИнтеграцияСПлатежнымиСистемамиРМКВызовСервера.ПолучитьПараметрыДокументаОплаты(ЧекККМПродажа);
			ПлатежнаяСистема_ВозможенВозврат = ЗначениеЗаполнено(ПараметрыВозврата.ВидОплатыВозврата);
			
			Если ПлатежнаяСистема_ВозможенВозврат Тогда
				
				Если ПлатежнаяСистема_ВидыОплат.НайтиСтроки(Новый Структура("ИдентификаторПС, Организация",
						ПараметрыВозврата.ИдентификаторПС, ПараметрыВозврата.Организация)).Количество() Тогда
					
					КлючПоискаОплатаСБП.Вставить("ИдентификаторПС", 	ПараметрыВозврата.ИдентификаторПС);
					КлючПоискаОплатаСБП.Вставить("Организация", 		ПараметрыВозврата.Организация);
					
					КлючПоискаОплатаЮКасса.Вставить("ИдентификаторПС", 	ПараметрыВозврата.ИдентификаторПС);
					КлючПоискаОплатаЮКасса.Вставить("Организация",		ПараметрыВозврата.Организация);
					
					ПлатежнаяСистема_ИдентификаторОплаты = ПараметрыВозврата.ИдентификаторОплаты;
					ПлатежнаяСистема_ИдентификаторПС 	 = ПараметрыВозврата.ИдентификаторПС;

					ПлатежныеСистемы_ОснованиеПродажи 	 = ?(ПараметрыВозврата.Свойство("ОснованиеПродажи"),
						ПараметрыВозврата.ОснованиеПродажи,
						ЧекККМПродажа);
					
					ПлатежныеСистемы_СуммаКВозврату 	 = ?(ПараметрыВозврата.Свойство("СуммаКВозврату"),
						ПараметрыВозврата.СуммаКВозврату,
						СуммаКОплате);
						
				КонецЕсли;
				
			Иначе
				
				КлючПоискаОплатаСБП 	= Неопределено;
				КлючПоискаОплатаЮКасса 	= Неопределено;
				
			КонецЕсли;
			
		Иначе
			ПлатежнаяСистема_ВозможенВозврат = Истина;
		КонецЕсли;

		ИспользоватьОплатуСПБ 	 = КлючПоискаОплатаСБП 	<> Неопределено
			И ПлатежнаяСистема_ВидыОплат.НайтиСтроки(КлючПоискаОплатаСБП).Количество() > 0
			И ИнтеграцияСПлатежнымиСистемамиРМККлиент.ВозвратВозможен(КлючПоискаОплатаСБП.ПлатежнаяСистема);
		
		ИспользоватьОплатуЮКасса = КлючПоискаОплатаЮКасса <> Неопределено
			И ПлатежнаяСистема_ВидыОплат.НайтиСтроки(КлючПоискаОплатаЮКасса).Количество() > 0
			И ИнтеграцияСПлатежнымиСистемамиРМККлиент.ВозвратВозможен(КлючПоискаОплатаЮКасса.ПлатежнаяСистема);
		
	Иначе
		
		ИспользоватьОплатуСПБ 	 = ПлатежнаяСистема_ВидыОплат.НайтиСтроки(КлючПоискаОплатаСБП).Количество() > 0;
		ИспользоватьОплатуЮКасса = ПлатежнаяСистема_ВидыОплат.НайтиСтроки(КлючПоискаОплатаЮКасса).Количество() > 0;
			
	КонецЕсли;
	
	Если ИнициализацияФормы Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВидОплатыСБП, ИспользоватьОплатуСПБ);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВидОплатыЮКасса, ИспользоватьОплатуЮКасса);
		
	Иначе
		
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСБП,  	ИспользоватьОплатуСПБ);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаЮКасса, 	ИспользоватьОплатуЮКасса);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьЧекПередОплатойПлатежнойСистемы(СистемаНалогообложения, ТекстОшибки, Отказ = Ложь)

	ОбщегоНазначенияРМКПереопределяемый.ЗаписатьЧекККМПередПробитием(ЭтотОбъект, Отказ, ТекстОшибки,
		СистемаНалогообложения);

	Возврат Не Отказ;
		
КонецФункции

&НаКлиенте
Процедура ПродолжитьОплачиваемыйЧекQRКодом(СледующийЧек = Ложь)
	
 	Если СледующийЧек 
		И ПлатежнаяСистема_ОжидаемоеКоличествоЧеков > 0 Тогда
		
		Если ЗначениеЗаполнено(ПлатежнаяСистема_ИдентификаторПС) 
			И ЗначениеЗаполнено(ВыбраннаяОрганизация) Тогда
			
			ПлатежнаяСистема    = ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОпределитьПлатежнуюСистему(ЭтотОбъект, ПлатежнаяСистема_ВидыОплат);
			
			Ключ 				= Новый Структура("ПлатежнаяСистема, Организация", ПлатежнаяСистема, ВыбраннаяОрганизация);
			СтрокиОплаты 		= ПлатежнаяСистема_ВидыОплат.НайтиСтроки(Ключ);
		
			Если СтрокиОплаты.Количество() Тогда
				
				ПлатежнаяСистема_СанкционированноеЗакрытие 	= Ложь;
				ЧекККМВОбработке 							= Неопределено;
				
				ОбработатьПробитиеЧекаНаКлиенте(СтрокиОплаты[0].ПлатежнаяСистема);
			
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Объект.Оплачивается Тогда
		
		СтруктураОплаты			   		  =
			ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОпределитьПараметрыОплатыПоОперациямДокумента(ЭтотОбъект,
				ПлатежнаяСистема_ВидыОплат, ОтложенныйЧек);
		ПлатежнаяСистема_ИдентификаторПС  = СтруктураОплаты.ИдентификаторПС;
		ПлатежнаяСистемаККТ 	   		  = СтруктураОплаты.ПлатежнаяСистема;

		Если ЗначениеЗаполнено(ПлатежнаяСистема_ИдентификаторПС) Тогда
			ОплатаQRКодом(ПлатежнаяСистемаККТ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СанкционироватьЗакрытиеОперацииПлатежнойСистемой(ОтменитьОплатуQRКодом = Истина)
	
	ОтключитьОбработчикОжидания("ОпределитьСтатусВозврата");
	ОтключитьОбработчикОжидания("ОпределитьСтатусОплаты");
	ОтключитьОбработчикОжидания("ПолучитьИдентификаторОплаты");
	ОтключитьОбработчикОжидания("ВыполнитьВозвратПлатежнойСистемой");
	ОтключитьОбработчикОжидания("ЗакрытьNFCВФоне");
	
	ТипОплаты = "";
	ТекущаяОперация = "";
	ПлатежнаяСистема_СанкционированноеЗакрытие = Ложь;
	ПлатежнаяСистема_ОжидаемоеКоличествоЧеков = 0;
	
	Элементы.ГруппаСписокОрганизацийПоКорзине.Доступность = Истина;
	Элементы.ГруппаСБПДополнительнаяПанель.Видимость 	  = Истина;
	
	ЗакрытьПанельNFC("Выйти");
	
	Если ОтменитьОплатуQRКодом Тогда 
		
		СуммаОплаченоСБП = 0;
		СуммаОплаченоЮКасса = 0;
		
		ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
		ПараметрыПересчета.ПоКомандеОтменитьОплатуQRКодом = Истина;
		РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаСБП, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаЮКасса, Ложь);
		
		ПлатежныеСистемы_ВыбраннаяКоманда = "";
		
	КонецЕсли;

	Если Не ФормаЗамороженаПослеПробитияЧека() Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьОшибкиПлатежнойСистемы()
	УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияТекстПодтверждениеОплатыОшибка, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОплатаQRКодом(ПлатежнаяСистемаККТ, АктивацияNFC = Ложь)
	
	ПлатежнаяСистема_СанкционированноеЗакрытие = Ложь;
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеОплатаQRКодом = Истина;
		
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
		
	Если НЕ ЗначениеЗаполнено(ВыбраннаяОрганизация) Тогда
		
		ПлатежнаяСистема_ОжидаемоеКоличествоЧеков = ОжидаемоеКоличествоЧеков - ПробитыеЧеки.Количество();
		
		Если ПлатежнаяСистема_ОжидаемоеКоличествоЧеков > 1
			И ПлатежнаяСистема_ВидыОплат.
				НайтиСтроки(Новый Структура("Организация, ПлатежнаяСистема",
					ВыбраннаяОрганизация, ПлатежнаяСистемаККТ)).Количество() = 0 Тогда
			
				ПлатежнаяСистема_ОжидаемоеКоличествоЧеков = ПлатежнаяСистема_ОжидаемоеКоличествоЧеков - 1;
				ПереключитьЧекПродажи(Команды.ПереключитьЧекОрганизация2);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ОткрытаСтраницаИнфоОшибка() Тогда
		
		Если АктивацияNFC Тогда
			НачатьОплатуВозвратПлатежнойСистемой(ПлатежнаяСистемаККТ, , АктивацияNFC);
		ИначеЕсли (ПриемАванса 
				ИЛИ ПриемАвансаПоЗаказу 
				ИЛИ ЭтоОплатаРассрочки
				ИЛИ Объект.ОперацияСДенежнымиСредствами) 
			И Не ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации) Тогда
			
			ЭлементГруппыОплаты = Неопределено;
			ПолеСуммы = Неопределено;
			ТипыПлатежныхСистем = МенеджерОборудованияРМККлиент.ТипыПлатежнойСистемыККТ();
			Если ПлатежнаяСистемаККТ = ТипыПлатежныхСистем.Получить("ЮКасса") Тогда
				ЭлементГруппыОплаты = Элементы.ГруппаОплатаЮКасса;
				СуммаОплаченоЮКасса = СуммаКОплате;
				ПолеСуммы = Элементы.СуммаОплаченоЮКасса;
			Иначе
				ЭлементГруппыОплаты = Элементы.ГруппаОплатаСБП;
				СуммаОплаченоСБП = СуммаКОплате;
				ПолеСуммы = Элементы.СуммаОплаченоСБП;
			КонецЕсли;
			
			Если Элементы.СуммаОплаченоВРассрочку.Доступность 
				И Не ПриемАванса И Не ПриемАвансаПоЗаказу Тогда
				СуммаОплаченоQRКодомПриИзменении(СуммаКОплате, ЭлементГруппыОплаты);
			Иначе
				УстановитьВидимостьЭлементаФормы(ЭлементГруппыОплаты, Истина);
				ТекущийЭлемент = ПолеСуммы;
			КонецЕсли;
			
		ИначеЕсли СуммаКОплате = 0
			И (СуммаОплаченоСБП > 0 Или СуммаОплаченоЮКасса > 0) Тогда
			ОбработатьПробитиеЧекаНаКлиенте(Команды.ПробитьЧек);
		Иначе
			РежимРаботыСЧеком = РежимыРаботыСЧеком.Оплата;
			ЭтоОперацияПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
			ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьДоступностьМаркетинговыхКомандПоЭтапуРаботыСЧеком(ЭтотОбъект,
				ЭтоОперацияПродажи);
			ОбработатьПробитиеЧекаНаКлиенте(ПлатежнаяСистемаККТ);
		КонецЕсли;

	Иначе
		ТипОплаты = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьQRКодПлатежнойСистемы(ШтрихКод)
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиДействийПлатежнойСистемы) = Элементы.ГруппаОсновнаяСтраница
		И Элементы.ИдентификаторОплаты.Видимость Тогда
		
		ПлатежнаяСистема_ИдентификаторОплаты = ШтрихКод;
		ПриИзмененииИдентификатораОплаты();
		
	ИначеЕсли ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевРазделПлатежнаяСистема) = Элементы.ГруппаПодтверждениеОплаты
		И Элементы.КодДляПодтвержденияОплаты.Видимость Тогда
		
		КодДляЗаменыПрав = ШтрихКод;
		ЗавершитьОплатуПринудительно();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииИдентификатораОплаты()
	
	ПлатежнаяСистема_НоваяЗаявка.ИдентификаторОплаты = ПлатежнаяСистема_ИдентификаторОплаты;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыборПлатежнойСистемы(Результат, ПараметрыВыбора) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПлатежныеСистемы_ВыбраннаяКоманда = Результат.Значение;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Имя", ПараметрыВыбора.КомандаИмя);
	
	НеобходимПересчетАвтоматическихСкидок = ОпределитьНеобходимостьПересчетаАвтоматическихСкидок();
	Если НеобходимПересчетАвтоматическихСкидок И ВопросПоРасчетуСкидок Тогда
		ЗадатьВопросПоРасчетуСкидок("ОплатаQRКодомЗавершение", ДополнительныеПараметры, Истина);
	Иначе
		ОплатаQRКодомЗавершение(?(ВопросПоРасчетуСкидок Или СкидкиРассчитаны, КодВозвратаДиалога.Нет, КодВозвратаДиалога.Да), ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияПанелиДействийПлатежнойСистемы(ВыбранныйИдентификаторПС = Неопределено, АвтономнаяККТСБП = Ложь, АктивацияNFC = Ложь)
	
	ПереданныеПараметры = ИнициализацияПараметровПанелиПлатежнойСистемы(ВыбранныйИдентификаторПС, АвтономнаяККТСБП);
	
	Если АктивацияNFC Тогда

		ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.ИнициализироватьПараметры(
			ЭтотОбъект, 
			ПереданныеПараметры, 
			ПлатежнаяСистема_ВидыОплат);

		НастройкиИнтеграции = ПлатежнаяСистема_НоваяЗаявка.НастройкиИнтеграции;
			
		Если НастройкиИнтеграции.КассовыеСсылки
			И НастройкиИнтеграции.НастройкиКассовойСсылки.ИспользоватьКассовыйQRКодСБП 
			И ЗначениеЗаполнено(ПлатежнаяСистема_НоваяЗаявка.СпособОплатыПлатежнойСистемы) Тогда
			
			СпособОплаты	= ПлатежнаяСистема_НоваяЗаявка.СпособОплатыПлатежнойСистемы;
			КассовыеСсылки 	= НастройкиИнтеграции.НастройкиКассовойСсылки.СпособыОплаты.Получить(СпособОплаты);
			
			Если ЗначениеЗаполнено(КассовыеСсылки) Тогда
				
				ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПанельДействийNFC);
				ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПанельДействий);
				
				ИнтеграцияСПлатежнымиСистемамиРМККлиент.ЗапуститьФоновыеЗадания(ЭтотОбъект, АктивацияNFC);
				
			КонецЕсли;
			
		КонецЕсли;       
		
		Если Не Элементы.ГруппаПанельДействийNFC.Видимость Тогда
			ТипОплаты = "";
		КонецЕсли;
		
	ИначеЕсли Элементы.ГруппаПанельДействийNFC.Видимость 
		И Не ВыбранныйИдентификаторПС = "ЮКасса" Тогда

		ЗакрытьПанельNFC("Выйти");
		ОпределитьСтатусОплаты();
		
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаПлатежнаяСистема);
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПанельДействий);
		
	Иначе
		
		ТекущаяОперация 	= "Оплата QR-кодом";
		
		Элементы.ГруппаСБПДополнительнаяПанель.Видимость = ПереданныеПараметры.ВидОперацииПродажа;
		
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаПлатежнаяСистема);
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПанельДействий);
	
		ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.ИнициализироватьПараметры(
			ЭтотОбъект, 
			ПереданныеПараметры, 
			ПлатежнаяСистема_ВидыОплат);
			
		ИнтеграцияСПлатежнымиСистемамиРМККлиент.ЗапуститьФоновыеЗадания(ЭтотОбъект);
	
		Элементы.ГруппаСписокОрганизацийПоКорзине.Доступность = Ложь;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьQRКодНаДисплееПокупателя()
	
	МенеджерОборудованияРМККлиент.ОчиститьQRКодНаДисплеяхПокупателя(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОплатаСертификатомНСПК

&НаКлиенте
Процедура ПроверитьСертификатНСПКНаКлиенте()
	
	ТоварныеПозиции = Новый Массив();
	ДополнительныеПараметры = Новый Структура();
	
	ЭтоВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
	
	Если ПредварительноеОдобрениеНСПКПолучено Тогда
		СледующаяОперация = "ОплатитьЭлектроннымСертификатом";
		Если ЭтоВозврат Тогда
			СледующаяОперация = "ВернутьЭлектроннымСертификатом";
		КонецЕсли;
	Иначе
		СледующаяОперация = "ПредварительноеОдобрениеИспользования";
		Если ЭтоВозврат Тогда
			СледующаяОперация = "ПредварительноеОдобрениеВозврата";
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("СледующаяОперация", СледующаяОперация);
	
	Если ПредварительноеОдобрениеНСПКПолучено Тогда
		
		Если СуммаОплаченоНал > 0 Тогда
			Отказ = Ложь;
			СкорректироватьНаличныеДенежныеСредстваВКассеККМКлиент(Отказ, Объект.Организация, Объект.КассаККМ, СуммаОплаченоНал, Ложь);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если СуммаОплаченоБН > 0 Тогда
			
			ЗаголовокПредупреждения = НСтр("ru='Оплата с карты МИР'");
			ШаблонПредупреждения = НСтр("ru='С карты МИР покупателя будет списано'");
			Если ЭтоВозврат Тогда
				ЗаголовокПредупреждения = НСтр("ru='Возврат на карту МИР'");
				ШаблонПредупреждения = НСтр("ru='На карту МИР покупателя будет возвращено'");
			КонецЕсли;
			
			ПараметрыОповещения = Новый Структура("ЭтоВозврат, СледующаяОперация", ЭтоВозврат, СледующаяОперация);
			ОписаниеОповещенияОплаты = Новый ОписаниеОповещения("ВыполнитьОперациюЭлектронныйСертификат", ЭтотОбъект, ПараметрыОповещения);
			ПоказатьВопрос(ОписаниеОповещенияОплаты,
				СтрШаблон(НСтр("ru='%1 %2 рублей. Продолжить?'"), ШаблонПредупреждения, СуммаОплаченоБН),
			РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, ЗаголовокПредупреждения);
		Иначе
			Если ЭтоВозврат Тогда
				ВернутьЭлектронныйСертификат(СледующаяОперация);
			Иначе
				ОплатитьЭлектроннымСертификатом(СледующаяОперация);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Для Каждого СтрокаТоваров Из ТаблицаТоваровФСС Цикл
			ТоварнаяПозиция = Новый Структура();
			ТоварнаяПозиция.Вставить("НомерПозиции", СтрокаТоваров.НомерПозиции);
			ТоварнаяПозиция.Вставить("Артикул", СтрокаТоваров.Артикул);
			ТоварнаяПозиция.Вставить("КодТовараТРУ", СтрокаТоваров.КодТРУ);
			ТоварнаяПозиция.Вставить("Количество", СтрокаТоваров.Количество);
			ТоварнаяПозиция.Вставить("Цена", СтрокаТоваров.Цена);
			ТоварнаяПозиция.Вставить("НомерПозицииВозврата", СтрокаТоваров.НомерПозицииВозврата);
			ТоварныеПозиции.Добавить(ТоварнаяПозиция);
		КонецЦикла;
		ДополнительныеПараметры.Вставить("ТоварныеПозиции", ТоварныеПозиции);
		
		Если ЭтоВозврат Тогда
			ДополнительныеПараметры.Вставить("ИдентификаторКорзины", ИдентификаторКорзиныНСПК);
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОперациюНСПКЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		МенеджерОборудованияРМККлиент.НачатьПолучениеПараметровКарты(ОписаниеОповещения, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперациюЭлектронныйСертификат(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если НЕ (ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ЭтоВозврат")
			И ДополнительныеПараметры.Свойство("СледующаяОперация")) Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыполнения = КодВозвратаДиалога.Да Тогда
		
		ЭтоВозврат = ДополнительныеПараметры.ЭтоВозврат;
		СледующаяОперация = ДополнительныеПараметры.СледующаяОперация;
		
		Если ЭтоВозврат Тогда
			ВернутьЭлектронныйСертификат(СледующаяОперация);
		Иначе
			ОплатитьЭлектроннымСертификатом(СледующаяОперация);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьЭлектроннымСертификатом(СледующаяОперация)
	
	ПараметрыОперации = МенеджерОборудованияРМККлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
	ПараметрыОперации.ТипТранзакции  = "PayElectronicCertificate";
	ПараметрыОперации.ИдентификаторКорзины = ИдентификаторКорзиныНСПК;
	ПараметрыОперации.СуммаЭлектронногоСертификата = СуммаОплаченоСертификатамиНСПК;
	ПараметрыОперации.СуммаСобственныхСредств = СуммаОплаченоБН;
	
	ПараметрыОперации.Вставить("СледующаяОперация", СледующаяОперация);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОперациюНСПКЗавершение", ЭтотОбъект, ПараметрыОперации);
	МенеджерОборудованияРМККлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(
		ОписаниеОповещения,
		УникальныйИдентификатор,
		Неопределено,
		ПараметрыОперации,
		Неопределено,
		Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьЭлектронныйСертификат(СледующаяОперация)
	
	ПараметрыОперации = МенеджерОборудованияРМККлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
	ПараметрыОперации.ТипТранзакции  = "ReturnElectronicCertificate";
	ПараметрыОперации.ИдентификаторКорзины = ИдентификаторКорзиныНСПК;
	ПараметрыОперации.СуммаЭлектронногоСертификата = СуммаОплаченоСертификатамиНСПК;
	ПараметрыОперации.СуммаСобственныхСредств = СуммаОплаченоБН;
	
	ПараметрыОперации.Вставить("СледующаяОперация", СледующаяОперация);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОперациюНСПКЗавершение", ЭтотОбъект, ПараметрыОперации);
	МенеджерОборудованияРМККлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(
		ОписаниеОповещения,
		УникальныйИдентификатор,
		Неопределено,
		ПараметрыОперации,
		Неопределено,
		Неопределено);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперациюНСПКЗавершение(РезультатВыполнения, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ (ТипЗнч(РезультатВыполнения) = Тип("Структура") И РезультатВыполнения.Свойство("Результат")) Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыполнения.Результат Тогда
		
		ХешНомерКарты = ?(РезультатВыполнения.Свойство("ХешНомерКарты"), РезультатВыполнения.ХешНомерКарты, "");
		НомерКарты = ?(РезультатВыполнения.Свойство("НомерКарты"), РезультатВыполнения.НомерКарты, "");
		СсылкаНаПлатежныйСчет = ?(РезультатВыполнения.Свойство("СсылкаНаПлатежныйСчет"), РезультатВыполнения.СсылкаНаПлатежныйСчет, "");
		
		Если НЕ ДополнительныеПараметры = Неопределено И ДополнительныеПараметры.Свойство("СледующаяОперация") Тогда
			
			Если ДополнительныеПараметры.СледующаяОперация = "ПредварительноеОдобрениеИспользования" Тогда
				СогласоватьЭСНСПК(ДополнительныеПараметры.ТоварныеПозиции, ХешНомерКарты, СсылкаНаПлатежныйСчет);
			ИначеЕсли ДополнительныеПараметры.СледующаяОперация = "ПредварительноеОдобрениеВозврата" Тогда
				СогласоватьВозвратЭСНСПК(ДополнительныеПараметры.ТоварныеПозиции, ХешНомерКарты, СсылкаНаПлатежныйСчет);
			ИначеЕсли ДополнительныеПараметры.СледующаяОперация = "ПолучениеИдентификаторовКорзинПокупокТСП" Тогда
				ПолучитьИдентификаторыКорзинПокупокТСП(ХешНомерКарты, СсылкаНаПлатежныйСчет);
			ИначеЕсли ДополнительныеПараметры.СледующаяОперация = "ПолучениеСпискаСертификатов" Тогда
				ПолучитьСертификатыЭСНСПК(ХешНомерКарты, СсылкаНаПлатежныйСчет);
			ИначеЕсли ДополнительныеПараметры.СледующаяОперация = "ПолучениеСпискаТоваров" Тогда
				ПолучитьТоварыЭСНСПК(ХешНомерКарты, СсылкаНаПлатежныйСчет);
			ИначеЕсли ДополнительныеПараметры.СледующаяОперация = "ЗавершитьОтменуОплаты" Тогда
				
				СброситьОплатуПриОшибке();
				РассчитатьСуммыОплаты();
				НастроитьДоступностьПробитьЧек();
				ПерейтиНаСтраницуОплата(); 
				
				ЭтоВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
				НастроитьЭлементыВРежимеПроверкаСертификатаНСПК(Ложь, ЭтоВозврат);
				
			Иначе
				
				ДанныеЭТ = ОбщегоНазначенияРМККлиент.ДанныеТекущегоЭквайринговогоТерминала(ЭтотОбъект);
				Если ДанныеЭТ = Неопределено Тогда
					ЗаголовокОшибки = НСтр("ru='Оплата ЭС (ФЗ-491)'");
					ТекстСообщения = НСтр("ru='Не определен текущий эквайринговый терминал.'");
					ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстСообщения);
					Возврат;
				КонецЕсли;
				
				СтруктураПоискаПК = Новый Структура();
				СтруктураПоискаПК.Вставить("ВидОплаты", ОбщегоНазначенияРМККлиент.ВидОплатыПлатежнаяКартаНСПК());
				Если ЕстьСвойство(РезультатВыполнения, "СуммаОперации") Тогда
					СтруктураПоискаПК.Вставить("Сумма", РезультатВыполнения.СуммаСобственныхСредств);
				КонецЕсли;
				МассивОплатПК = Объект.Оплата.НайтиСтроки(СтруктураПоискаПК);
				Если МассивОплатПК.Количество() > 0 Тогда
					
					СтрокаОплаты = МассивОплатПК[0];
					СтрокаОплаты.ЭквайринговыйТерминал = ДанныеЭТ.ЭквайринговыйТерминал;
					СтрокаОплаты.НомерПлатежнойКарты = РезультатВыполнения.НомерКарты;
					СтрокаОплаты.НомерЧекаЭТ = РезультатВыполнения.НомерЧекаЭТ;
					СтрокаОплаты.СсылочныйНомер = РезультатВыполнения.СсылочныйНомер;
					
					ЭтоВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
					Если ЭтоВозврат Тогда
						СтрокаОплаты.ПроцентКомиссии = ДанныеЭТ.ПроцентКомиссииПриВозврате;
					Иначе
						СтрокаОплаты.ПроцентКомиссии = ДанныеЭТ.ПроцентКомиссииПриПродаже;
					КонецЕсли;
					СтрокаОплаты.СуммаКомиссии = СтрокаОплаты.Сумма * СтрокаОплаты.ПроцентКомиссии / 100;
					
				КонецЕсли;
				
				СтруктураПоискаЭС = Новый Структура();
				СтруктураПоискаЭС.Вставить("ВидОплаты", ВидОплатыНСПК);
				
				Если ЕстьСвойство(РезультатВыполнения, "СуммаЭлектронногоСертификата") Тогда
					СтруктураПоискаЭС.Вставить("Сумма", РезультатВыполнения.СуммаЭлектронногоСертификата);
				КонецЕсли;
				МассивОплатЭС = Объект.Оплата.НайтиСтроки(СтруктураПоискаЭС);
				
				Если МассивОплатЭС.Количество() > 0 Тогда
					
					СтрокаОплаты = МассивОплатЭС[0];
					СтрокаОплаты.ВидОплаты = ВидОплатыНСПК;
					СтрокаОплаты.ЭквайринговыйТерминал = ДанныеЭТ.ЭквайринговыйТерминал;
					СтрокаОплаты.НомерПлатежнойКарты = РезультатВыполнения.НомерКарты;
					СтрокаОплаты.НомерЧекаЭТ = РезультатВыполнения.НомерЧекаЭТ;
					СтрокаОплаты.СсылочныйНомер = РезультатВыполнения.ИдентификаторКорзины;
					
					ЭтоВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
					Если ЭтоВозврат Тогда
						СтрокаОплаты.ПроцентКомиссии = ДанныеЭТ.ПроцентКомиссииПриВозврате;
					Иначе
						СтрокаОплаты.ПроцентКомиссии = ДанныеЭТ.ПроцентКомиссииПриПродаже;
					КонецЕсли;
					СтрокаОплаты.СуммаКомиссии = СтрокаОплаты.Сумма * СтрокаОплаты.ПроцентКомиссии / 100;
					
				КонецЕсли;
				
				ТипОплаты = "НСПК";
				ТранзакцияПоКартеЗавершена = Истина;
				НачатьПечатьЧека();
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Объект.Оплата.Очистить();
		ПредварительноеОдобрениеНСПКПолучено = Ложь;
		ОплатитьСертификатомНСПКНаКлиенте();
		УстановитьДоступностьЭлементаФормы(Элементы.ПроверитьСертификатНСПК, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧекНСПК, Ложь);
		
		ЗаголовокОшибки = НСтр("ru='Оплата электронным сертификатом'");
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
		ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстСообщения);
		
		ВывестиИнформациюНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.Ошибка, РезультатВыполнения.ОписаниеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеИдентификатораКорзиныЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если НЕ (ТипЗнч(РезультатВыполнения) = Тип("Структура") И РезультатВыполнения.Свойство("Результат")) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьОшибка = Ложь;
	ЗаголовокОшибки = НСтр("ru = 'Оплата электронным сертификатом'");
	Если РезультатВыполнения.Результат Тогда
		ИдентификаторКорзиныНСПК = РезультатВыполнения.ИдентификаторКорзины;
	Иначе
		ЕстьОшибка = Истина;
		ТекстОшибки = НСтр("ru = 'Не удалось получить идентификатор корзины по фискальному признаку чека'");
	КонецЕсли;
	
	Если НЕ ЕстьОшибка И НЕ СтрДлина(ИдентификаторКорзиныНСПК) = 24 Тогда
		ЕстьОшибка = Истина;
		ТекстОшибки = НСтр("ru = 'Идентификатор корзины должен состоять из 24 символов.'");
	КонецЕсли;
	
	Если ЕстьОшибка Тогда
		ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстОшибки);
		
	Иначе
		ОплатитьСертификатомНСПКНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьЭСНСПК(ТоварныеПозиции, ХешНомерКарты, СсылкаНаПлатежныйСчет)
	
	ПараметрыОперации = ПолучитьПараметрыОперацииНСПКНаСервере(Объект.КассаККМ, "");
	
	ПараметрыОперации.ХешНомерКарты = ХешНомерКарты;
	ПараметрыОперации.СсылкаНаПлатежныйСчет = СсылкаНаПлатежныйСчет;
	ПараметрыОперации.ТоварныеПозиции = ТоварныеПозиции;
	
	ПредварительноеОдобрениеНСПКПолучено = Ложь;
	ОповещениеМетода = Новый ОписаниеОповещения("ПредварительноеОдобрениеНСПКЗавершение", ЭтотОбъект, ПараметрыОперации);
	МенеджерОборудованияРМККлиент.НачатьПредварительноеОдобрениеИспользования(ОповещениеМетода, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьВозвратЭСНСПК(ТоварныеПозиции, ХешНомерКарты, СсылкаНаПлатежныйСчет)
	
	ПараметрыОперации = ПолучитьПараметрыОперацииНСПКНаСервере(Объект.КассаККМ, ИдентификаторКорзиныНСПК);
	
	ПараметрыОперации.ХешНомерКарты = ХешНомерКарты;
	ПараметрыОперации.СсылкаНаПлатежныйСчет = СсылкаНаПлатежныйСчет;
	
	ДополнительныеПараметры = Новый Структура("ПараметрыОперации, ТоварныеПозиции", ПараметрыОперации, ТоварныеПозиции);
	ПредварительноеОдобрениеНСПКПолучено = Ложь;
	ОповещениеМетода = Новый ОписаниеОповещения("ПолучениеСоставаКорзиныНСПКЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	МенеджерОборудованияРМККлиент.НачатьПолучениеСоставаКорзины(ОповещениеМетода, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительноеОдобрениеНСПКЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Если НЕ (ТипЗнч(РезультатВыполнения) = Тип("Структура") И РезультатВыполнения.Свойство("Результат")) Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыполнения.Результат Тогда
		
		ПредварительноеОдобрениеНСПКПолучено = Истина;
		ОбработатьРезультатНСПКНаСервере(РезультатВыполнения,
			ДополнительныеПараметры.Свойство("СохранитьИдентификаторКорзиныНСПК"));
			
	Иначе
		
		ЗаголовокОшибки = НСтр("ru='Оплата электронным сертификатом'");
		ТекстСообщения =
			СтрШаблон(НСтр("ru='Ошибка: (%1) %2'"), РезультатВыполнения.КодРезультата, РезультатВыполнения.ОписаниеОшибки);
		ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстСообщения);
		
	КонецЕсли;

	АктивныйСлойГруппы
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
	
	Если ПредварительноеОдобрениеНСПКПолучено 
		И НЕ АктивныйСлойГруппы = Элементы.ГруппаСторноЭквайринг
		И НЕ АктивныйСлойГруппы = Элементы.ГруппаИнфоОшибка Тогда
		
			РассчитатьСуммыОплаты();
		
			ЭтоВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
			Если НЕ ЭтоВозврат Тогда
				
				УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
				УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
				
			КонецЕсли;
			
			УстановитьДоступностьЭлементаФормы(Элементы.ПроверитьСертификатНСПК, Ложь);
			ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаКомандПробитияЧекаНСПК);
			
			ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
			ПараметрыПересчета.ПоКомандеБН = НЕ Элементы.ГруппаОплатаКартой.Видимость
				И НЕ Элементы.ГруппаОплатаПредоплата.Видимость И НЕ ЭтоВозврат;
			ПараметрыПересчета.ПриИзмененииБНОплаты = Истина;
			РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
			
	КонецЕсли;
	
	УстановитьЗаголовкиОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеСоставаКорзиныНСПКЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Если НЕ (ТипЗнч(РезультатВыполнения) = Тип("Структура") И РезультатВыполнения.Свойство("Результат")) Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыполнения.Результат Тогда
	
		РезультатВыполнения.Вставить("ПредыдущаяПокупка", Истина);
		
		ОбработатьРезультатНСПКНаСервере(РезультатВыполнения, Истина);
		
		РезультатВыполнения.Удалить("ПредыдущаяПокупка");
		
		Если НЕ РезультатВыполнения.Результат Тогда
			Возврат;
		КонецЕсли;
		
		ТоварныеПозиции = ДополнительныеПараметры.ТоварныеПозиции;
		// Удаление строк, которых не было в оригинальной продаже ЭС.
		СтрокиНеИзВозврата = ТаблицаТоваровФСС.НайтиСтроки(Новый Структура("НомерПозицииВозврата", 999));
		
		Для каждого СтрокаНеИзВозврата Из СтрокиНеИзВозврата Цикл
			КоличествоТоварныхПозиций = ТоварныеПозиции.Количество();
			Для Индекс = 1 По КоличествоТоварныхПозиций Цикл
				СтрокаТовара = ТоварныеПозиции[КоличествоТоварныхПозиций - Индекс];
				Если СтрокаТовара.Артикул = СтрокаНеИзВозврата.Артикул Тогда
					ТоварныеПозиции.Удалить(КоличествоТоварныхПозиций - Индекс);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Заполнение номера позиции в оригинальной продаже ЭС.
		Для каждого СтрокаПодтверждения Из ТоварныеПозиции Цикл
			СтрокаФСС = ТаблицаТоваровФСС.НайтиПоИдентификатору(СтрокаПодтверждения.НомерПозиции);
			Если НЕ СтрокаФСС = Неопределено Тогда
				СтрокаПодтверждения.НомерПозицииВозврата = СтрокаФСС.НомерПозицииВозврата;
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыОперации = ДополнительныеПараметры.ПараметрыОперации;
		ПараметрыОперации.ТоварныеПозиции = ТоварныеПозиции;
		
		ПредварительноеОдобрениеНСПКПолучено = Ложь;
		ОповещениеМетода = Новый ОписаниеОповещения("ПредварительноеОдобрениеНСПКЗавершение", ЭтотОбъект, ПараметрыОперации);
		МенеджерОборудованияРМККлиент.НачатьПредварительноеОдобрениеВозврата(ОповещениеМетода, ПараметрыОперации);
		
	Иначе
		ЗаголовокОшибки = НСтр("ru='Оплата электронным сертификатом'");
		ТекстСообщения =
			СтрШаблон(НСтр("ru='Ошибка: (%1) %2'"), РезультатВыполнения.КодРезультата, РезультатВыполнения.ОписаниеОшибки);
		ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыОперацииНСПКНаСервере(КассаККМ, ИдентификаторКорзиныНСПК)
	
	ПараметрыОперации = МенеджерОборудованияРМК.ПараметрыОперацииНСПК();
	ЭлектронныеСертификатыНСПКРМКПереопределяемый.ЗаполнитьПараметрыОперацииНСПКПоКассеККМ(ПараметрыОперации, КассаККМ, ИдентификаторКорзиныНСПК);
	
	Возврат ПараметрыОперации;
	
КонецФункции

&НаСервере
Процедура ОбработатьРезультатНСПКНаСервере(РезультатВыполнения, СохранитьИдентификаторКорзиныНСПК = Ложь)
	
	Если НЕ ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("ИдентификаторКорзины") И НЕ ПустаяСтрока(РезультатВыполнения.ИдентификаторКорзины) 
		И НЕ СохранитьИдентификаторКорзиныНСПК Тогда
		ИдентификаторКорзиныНСПК = РезультатВыполнения.ИдентификаторКорзины;
	КонецЕсли;
	Если РезультатВыполнения.Свойство("СуммаСертификатами") Тогда
		
		СуммаОплаченоСертификатамиНСПК = РезультатВыполнения.СуммаСертификатами;
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("ТоварныеПозиции") И РезультатВыполнения.ТоварныеПозиции.Количество() > 0 Тогда
		Для Каждого ТоварнаяПозиция Из РезультатВыполнения.ТоварныеПозиции Цикл
			
			СтрокаТовара = Неопределено;
			
			Если РезультатВыполнения.Свойство("ПредыдущаяПокупка") Тогда
				СтрокиТоваров = ТаблицаТоваровФСС.НайтиСтроки(Новый Структура("Артикул", ТоварнаяПозиция.Артикул));
				Если СтрокиТоваров.Количество() > 0 Тогда
					СтрокаТовара = СтрокиТоваров[0];
				КонецЕсли;
			Иначе
				СтрокаТовара = ТаблицаТоваровФСС.НайтиПоИдентификатору(ТоварнаяПозиция.НомерПозиции);
			КонецЕсли;
			
			Если СтрокаТовара = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если РезультатВыполнения.Свойство("ПредыдущаяПокупка") Тогда
				СтрокаТовара.НомерПозицииВозврата = ТоварнаяПозиция.НомерПозиции;
			КонецЕсли;
			
			СтрокаТовара.КоличествоФСС = ТоварнаяПозиция.Количество;
			СтрокаТовара.ЦенаФСС = ТоварнаяПозиция.Цена;
			СтрокаТовара.СуммаФСС = СтрокаТовара.КоличествоФСС*СтрокаТовара.ЦенаФСС;
			
			Если ТоварнаяПозиция.Свойство("Сертификаты") И ТоварнаяПозиция.Сертификаты.Количество() > 0 Тогда
				
				КоличествоПоСертификату = 0;
				СуммаПоСертификату = 0;
				МаксимальнаяЦена = 0;
				Для Каждого Сертификат Из ТоварнаяПозиция.Сертификаты Цикл
					СтрокаСертификата = СтрокаТовара.Сертификаты.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаСертификата, Сертификат);
					КоличествоПоСертификату = КоличествоПоСертификату + СтрокаСертификата.Количество;
					СуммаПоСертификату = СуммаПоСертификату + (СтрокаСертификата.Количество * СтрокаСертификата.Цена);
					МаксимальнаяЦена = Макс(МаксимальнаяЦена, СтрокаСертификата.МаксимальнаяЦена);
				КонецЦикла;
				
				СтрокаТовара.МаксимальнаяЦена = МаксимальнаяЦена;
				СтрокаТовара.КоличествоФСС = КоличествоПоСертификату;
				СтрокаТовара.СуммаФСС = СуммаПоСертификату;
				СтрокаТовара.ЦенаФСС =
					?(КоличествоПоСертификату = 0, СуммаПоСертификату, Окр(СуммаПоСертификату/КоличествоПоСертификату, 2));
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВывестиПредварительноеОдобрениеНСПКНаПечать();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовкиОплаты()
	
	ЭтоВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
	
	Если ЭтоВозврат Тогда
		ЗаголовокОплаты = НСтр("ru = 'Вернуть'");
	Иначе
		ЗаголовокОплаты = НСтр("ru = 'Пробить чек'");
	КонецЕсли;
	
	Элементы.ПробитьЧекНСПК.Заголовок = ЗаголовокОплаты;

КонецПроцедуры

&НаКлиенте
Функция ЕстьВозможностьОплатыСертификатомНСПК()
	
	ЗаголовокОшибки = НСтр("ru = 'Оплата электронным сертификатом'");
	ПараметрыОшибки = Новый Структура("ЭтоПредупреждение", Истина);
	
	Для Каждого СтрокаОплаты ИЗ Объект.Оплата Цикл
		ЭтоОплатаВРассрочку = ОбщегоНазначенияРМККлиент.ЭтоОплатаВРассрочку(СтрокаОплаты.ВидОплаты);
		
		Если Не ЭтоОплатаВРассрочку Тогда
			ТекстОшибки = НСтр("ru = 'Удалите другие виды оплаты из документа. Совместное использование с другими видами оплат не поддерживается.'");
			ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстОшибки, ПараметрыОшибки);
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокиДляОплатыЭС = Объект.Товары.НайтиСтроки(Новый Структура("ВозможнаОплатаЭС", Истина));
	Если СтрокиДляОплатыЭС.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'В документе не выбраны товары из перечня ТРУ, либо у товаров не указан код ТРУ.'");
		ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстОшибки, ПараметрыОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	ТекстОшибки = ПроверитьВозможностьОплатыНСПКНаСервере();
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстОшибки, ПараметрыОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура НастроитьЭлементыВРежимеПроверкаСертификатаНСПК(РежимОплаты = Истина, ЭтоВозврат = Ложь)
	
	ДобавленаНоваяСтрокаКорзины = Ложь;
	Если РежимОплаты Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПодтверждениеНСПК);
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаОплатаСертификатамиНСПК, Истина);
		Если Не ЭтоВозврат Тогда
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.Предоплата, ЗначениеЗаполнено(Объект.Контрагент));
		КонецЕсли;
		
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКредитом, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаБонусами, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ПодготовитьДанныеВыдачиНаличных, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатомНСПК, Ложь);
		
		УстановитьДоступностьОплатыПлатежнымиСистемами(Элементы.ГруппаВидОплатыСБП, Элементы.ГруппаВидОплатыЮКасса, Ложь);
		
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПроверкаНСПК);
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ОбластьОперативногоУправленияЧеком);
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаКомандПробитияЧекаНСПК);
		
		УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧекНСПК, Ложь);
	Иначе
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаЛевоОбщая);
		
		Если Не ЭтоВозврат Тогда
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.Предоплата, Истина);

			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКредитом, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатаБонусами, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ПодготовитьДанныеВыдачиНаличных, Истина);
			
			УстановитьДоступностьОплатыПлатежнымиСистемами(Элементы.ГруппаВидОплатыСБП, Элементы.ГруппаВидОплатыЮКасса, Истина);
			
		КонецЕсли;
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаНал, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаКартой, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаОплатаСертификатамиНСПК, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаРазделВыдачиНаличных, Ложь);
		
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаДополнительноеУправлениеЧеком);
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаКомандПробитияЧека);
		
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатомНСПК, Истина);
	КонецЕсли;
	УстановитьДоступностьЭлементаФормы(Элементы.ПроверитьСертификатНСПК, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьПредварительноеОдобрениеНСПК()
	
	ТаблицаТоваровФСС.Очистить();
	ЗаполнитьТаблицуТоваровФСС(Объект.Товары);
	ВывестиПредварительноеОдобрениеНСПКНаПечать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуТоваровФСС(Товары)
	
	Если ЗначениеЗаполнено(ВыбраннаяОрганизация) Тогда
		ТоварныеПозиции = Товары.НайтиСтроки(
			Новый Структура("ВозможнаОплатаЭС, Организация", Истина, ВыбраннаяОрганизация));
	Иначе
		ТоварныеПозиции = Товары.НайтиСтроки(Новый Структура("ВозможнаОплатаЭС", Истина));
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из ТоварныеПозиции Цикл
		ТоварныеСтроки = ТаблицаТоваровФСС.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТовара.Номенклатура));
		Если ТоварныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = ТаблицаТоваровФСС.Добавить();
			НоваяСтрока.НомерПозиции = НоваяСтрока.ПолучитьИдентификатор();
			НоваяСтрока.НомерПозицииВозврата = 999;
			НоваяСтрока.Артикул = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовара.Номенклатура, "Код");
			НоваяСтрока.КодТРУ = СтрокаТовара.КодТРУ;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара,, "Артикул");
		Иначе
			НоваяСтрока = ТоварныеСтроки[0];
			НоваяСтрока.Количество = НоваяСтрока.Количество + СтрокаТовара.Количество;
			НоваяСтрока.Сумма = НоваяСтрока.Сумма + СтрокаТовара.Сумма;
			НоваяСтрока.Цена =
				?(НоваяСтрока.Количество = 0, НоваяСтрока.Сумма, Окр(НоваяСтрока.Сумма/НоваяСтрока.Количество, 2));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПредварительноеОдобрениеНСПКНаПечать()
	
	Таб = Новый ТабличныйДокумент();
	
	Макет = ПолучитьОбщийМакет("ПФ_MXL_ДанныеПроверкиТоваровФСС");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	
	ЭтоОперацияВозврат = Не ОбщегоНазначенияРМК.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	Если ЭтоОперацияВозврат Тогда
		ЗаголовокТаблицы = НСтр("ru = 'Товары к возврату на электронный сертификат'");
	Иначе
		ЗаголовокТаблицы = НСтр("ru = 'Товары к оплате электронным сертификатом'");
	КонецЕсли;
	
	УстановитьПараметрМакетаНСПК(ОбластьЗаголовок, "ЗаголовокТаблицы", ЗаголовокТаблицы);
	
	Таб.Вывести(ОбластьЗаголовок);
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	Таб.Вывести(ОбластьШапка);
	
	СуммаЧекФСС = 0;
	Для Каждого СтрокаТоваров Из ТаблицаТоваровФСС Цикл
		
		ОбластьДанныхСтроки = Макет.ПолучитьОбласть("Строка");
		УстановитьПараметрМакетаНСПК(
			ОбластьДанныхСтроки,
			"Наименование",
			СтрШаблон("%1, %2", СтрокаТоваров.Артикул, СокрЛП(СтрокаТоваров.Номенклатура)));
		ОбластьДанныхСтроки.Параметры.Заполнить(СтрокаТоваров);
		Таб.Вывести(ОбластьДанныхСтроки);
		
		СуммаЧекФСС = СуммаЧекФСС + СтрокаТоваров.Сумма;
	КонецЦикла;
	
	ОбластьПодвалФСС = Макет.ПолучитьОбласть("ПодвалФСС");
	УстановитьПараметрМакетаНСПК(ОбластьПодвалФСС, "Сумма", СуммаЧекФСС);
	УстановитьПараметрМакетаНСПК(ОбластьПодвалФСС, "СуммаФСС", СуммаОплаченоСертификатамиНСПК);
	Таб.Вывести(ОбластьПодвалФСС);
	
	Если НЕ ЭтоОперацияВозврат Тогда
		
		ОбластьПрочиеТовары = Макет.ПолучитьОбласть("ПрочиеТовары");
		УстановитьПараметрМакетаНСПК(ОбластьПрочиеТовары, "Сумма", СуммаИтого - СуммаЧекФСС);
		Таб.Вывести(ОбластьПрочиеТовары);
		
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		УстановитьПараметрМакетаНСПК(ОбластьПодвал, "Сумма", СуммаИтого);
		Таб.Вывести(ОбластьПодвал);
	КонецЕсли;
	
	ТабличныйДокументСертификатНСПК.Очистить();
	ТабличныйДокументСертификатНСПК = Таб;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПараметрМакетаНСПК(ОбластьМакета, ИмяПараметра, ЗначениеПараметра)
	
	ОбластьМакета.Параметры.Заполнить(Новый Структура(ИмяПараметра, ЗначениеПараметра));
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьОплатыНСПКНаСервере()
	
	ТекстОшибки = Неопределено;
	ЭлектронныеСертификатыНСПКРМКПереопределяемый.ПроверитьВозможностьОплатыНСПК(ТекстОшибки, ЭтотОбъект);
	Возврат ТекстОшибки;
	
КонецФункции

&НаКлиенте
Процедура ПередатьДанныеФискальногоЧекаНСПК()
	
	ПараметрыОперации = ПолучитьПараметрыФискальнойОперацииНСПКНаСервере(ЧекККМВОбработке);
	Если ПараметрыОперации = Неопределено Тогда
		Сообщение = СтрШаблон(НСтр("ru = 'Отсутствуют данные о фискализации чека: %1'"), СокрЛП(ЧекККМВОбработке));
		ПоказатьПредупреждение(,Сообщение, , НСтр("ru = 'Оплата сертификатом (ФЗ-491)'"));
	Иначе
		ОповещениеМетода = Новый ОписаниеОповещения("ПередатьДанныеФискальногоЧекаНСПКЗавершение", ЭтотОбъект, ПараметрыОперации);
		МенеджерОборудованияРМККлиент.НачатьПередачуДанныхФискальногоЧека(ОповещениеМетода, ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФискальнойОперацииНСПКНаСервере(ЧекККМ)
	
	ПараметрыФискальнойОперации = МенеджерОборудованияРМК.ПараметрыОперацииНСПК();
	ЭлектронныеСертификатыНСПКРМКПереопределяемый.ЗаполнитьПараметрыФискальнойОперацииНСПК(ПараметрыФискальнойОперации, ЧекККМ);
	
	Возврат ПараметрыФискальнойОперации;
	
КонецФункции

&НаКлиенте
Процедура ПередатьДанныеФискальногоЧекаНСПКЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	РезультатПередачи = Новый Структура("Результат, КодРезультата, ОписаниеОшибки", Ложь, 999, "");
	ЗаполнитьЗначенияСвойств(РезультатПередачи, РезультатВыполнения);
	
	Если Не РезультатПередачи.Результат Тогда
		Сообщение = СтрШаблон(
			НСтр("ru = 'При отправке подтверждения операции %1 на сервер НСПК произошла ошибка (код %2):
			|%3'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()),
			ДополнительныеПараметры.ИдентификаторКорзины,
			Строка(РезультатПередачи.КодРезультата),
			РезультатПередачи.ОписаниеОшибки);
			
			ПоказатьПредупреждение(,Сообщение, , НСтр("ru = 'Оплата сертификатом (ФЗ-491)'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОплатуСертификатомНСПКНаКлиенте(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	ЭтоВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
	ЭтоВозвратБезОснования = Ложь;
	Если ЭтоВозврат И НЕ ЗначениеЗаполнено(ЧекККМПродажа) Тогда
		ЭтоВозвратБезОснования = Истина;
		ИдентификаторКорзиныНСПК = Неопределено;
	КонецЕсли;
	
	Если ЭтоВозвратБезОснования Тогда
		
		СтрокиДляОплатыЭС = Объект.Товары.НайтиСтроки(Новый Структура("ВозможнаОплатаЭС", Ложь));
		Если СтрокиДляОплатыЭС.Количество() > 0 Тогда
			ЗаголовокОшибки = НСтр("ru = 'Оплата электронным сертификатом'");
			ТекстОшибки = НСтр("ru = 'При возврате без основания в документе должны быть выбраны товары только из классификатора ФСС.'");
			ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстОшибки);
			Возврат;
		КонецЕсли;
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект,
			Элементы.ГруппаПанельИдентификаторКорзиныНСПК);
		
	Иначе
		ОплатитьСертификатомНСПКНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИдентификаторыКорзинПокупокНСПКВопрос(Результат, ПараметрыОперации)Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СледующаяОперация", "ПолучениеИдентификаторовКорзинПокупокТСП");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОперациюНСПКЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		МенеджерОборудованияРМККлиент.НачатьПолучениеПараметровКарты(ОписаниеОповещения, УникальныйИдентификатор);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИдентификаторыКорзинПокупокТСП(ХешНомерКарты, СсылкаНаПлатежныйСчет)
	
	ПараметрыОперации = ПолучитьПараметрыОперацииНСПКНаСервере(Объект.КассаККМ, "");
	ПараметрыОперации.ХешНомерКарты = ХешНомерКарты;
	ПараметрыОперации.СсылкаНаПлатежныйСчет = СсылкаНаПлатежныйСчет;
	ПараметрыОперации.КодТовараТРУ = Элементы.Товары.ТекущиеДанные.КодТРУ;
	ОповещениеМетода = Новый ОписаниеОповещения("ПолучитьИдентификаторыКорзинПокупокТСПЗавершение", ЭтотОбъект, ПараметрыОперации);
	МенеджерОборудованияРМККлиент.НачатьПолучениеСпискаИдентификаторовКорзинПокупокТСП(ОповещениеМетода, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИдентификаторыКорзинПокупокТСПЗавершение(Результат, ПараметрыОперации) Экспорт
	
	Если НЕ (ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Результат")) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Результат Тогда
		Если Результат.ИдентификаторыКорзинПокупок.Количество() = 1 Тогда
			ИдентификаторКорзиныНСПК = Результат.ИдентификаторыКорзинПокупок[0].ИдентификаторКорзины;
		ИначеЕсли Результат.ИдентификаторыКорзинПокупок.Количество() > 1 Тогда
			
			ЭлементВыбор = Элементы.ИдентификаторКорзиныНСПК;
			ЭлементВыбор.СписокВыбора.Очистить();
			Для Каждого ИдентификаторКорзины Из Результат.ИдентификаторыКорзинПокупок Цикл
				ЭлементВыбор.СписокВыбора.Вставить(0, ИдентификаторКорзины.ИдентификаторКорзины, Строка(ИдентификаторКорзины.ДатаАвторизации));
			КонецЦикла;
			ЭлементВыбор.КнопкаВыпадающегоСписка = Истина;
			ЭлементВыбор.ПодсказкаВвода = Нстр("ru='Выберите ИД продажи'");
			
		КонецЕсли;
			
	Иначе
		
		ТекстСообщения =
			СтрШаблон(НСтр("ru='Ошибка: (%1) %2'"), Результат.КодРезультата, Результат.ОписаниеОшибки);
			
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСертификатыЭСНСПК(ХешНомерКарты, СсылкаНаПлатежныйСчет)
	
	ПараметрыОперации = ПолучитьПараметрыОперацииНСПКНаСервере(Объект.КассаККМ, "");
	ПараметрыОперации.ХешНомерКарты = ХешНомерКарты;
	ПараметрыОперации.СсылкаНаПлатежныйСчет = СсылкаНаПлатежныйСчет;
	ОповещениеМетода = Новый ОписаниеОповещения("ПолучитьСертификатыЭСНСПКЗавершение", ЭтотОбъект, ПараметрыОперации);
	МенеджерОборудованияРМККлиент.НачатьПолучениеСпискаСертификатов(ОповещениеМетода, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСертификатыЭСНСПКЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// Не используемый функционал
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТоварыЭСНСПК(ХешНомерКарты, СсылкаНаПлатежныйСчет)
	
	ПараметрыОперации = ПолучитьПараметрыОперацииНСПКНаСервере(Объект.КассаККМ, "");
	ПараметрыОперации.ХешНомерКарты = ХешНомерКарты;
	ПараметрыОперации.СсылкаНаПлатежныйСчет = СсылкаНаПлатежныйСчет;
	ОповещениеМетода = Новый ОписаниеОповещения("ПолучитьТоварыЭСНСПКЗавершение", ЭтотОбъект, ПараметрыОперации);
	МенеджерОборудованияРМККлиент.НачатьПолучениеСпискаСертификатов(ОповещениеМетода, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТоварыЭСНСПКЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ (ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Результат")) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Результат Тогда
		Если Результат.ТоварныеПозиции.Количество() > 0 Тогда
			
			МассивТРУ = Новый Массив;
			
			Для Каждого Товар Из Результат.ТоварныеПозиции Цикл
				МассивТРУ.Добавить(Товар.КодТовараТРУ);
			КонецЦикла;
			
			ЗаполнитьНоменклатуруПоТРУ(МассивТРУ);
			
		КонецЕсли;
	Иначе
		
		ТекстСообщения =
			СтрШаблон(НСтр("ru='Ошибка: (%1) %2'"), Результат.КодРезультата, Результат.ОписаниеОшибки);
			
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьНоменклатуруПоТРУ(МассивТРУ) Экспорт
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьНоменклатуруПоТРУ(ЭтотОбъект, МассивТРУ);
КонецПроцедуры
#КонецОбласти

#Область SMSПодтверждениеНомераТелефона

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыПроверкиПоSMSКоду()
	
	ПараметрыПроверкиПоSMS = Новый Структура();
	ПараметрыПроверкиПоSMS.Вставить("КодПодтверждения", "");
	ПараметрыПроверкиПоSMS.Вставить("ВариантПроверки", "");
	ПараметрыПроверкиПоSMS.Вставить("ПопытокВвода", 0);
	
	Возврат ПараметрыПроверкиПоSMS;
	
КонецФункции

&НаКлиенте
Процедура ПереключитьНаСтраницуВводаКодаSMS(ПриОплатеБонусами = Ложь, ПриЗаведенииКарты = Ложь)
	
	Если ПриЗаведенииКарты Тогда
		
		ПараметрыВводаКодаSMS = ПараметрыПроверкиПоSMSКоду();
		ПараметрыВводаКодаSMS.ВариантПроверки = "ПриЗаведенииКарты";
		
	Иначе
		
		Если ПараметрыВводаКодаSMS = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	КонецЕсли;
	
	ПоказатьКнопкуОтправитьСМС = Истина;
	Если ВертикальнаяОриентация Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ОтменитьЗаведениеКарты, Ложь);
		Если ПриЗаведенииКарты Тогда
			ПоказатьКнопкуОтправитьСМС = Ложь;
			УстановитьВидимостьЭлементаФормы(Элементы.СоздатьКарту, Ложь);
			ИнтерфейсРМКСлужебныйКлиентСервер.ВключитьДополнительнуюКоманднуюПанельУправленияЧеком(Элементы.ГруппаКомандПодтверждениеСозданияКарты);
		КонецЕсли;
	Иначе
		УстановитьВидимостьЭлементаФормы(Элементы.ОтменитьЗаведениеКарты, ПриЗаведенииКарты);
	КонецЕсли;
	УстановитьВидимостьЭлементаФормы(Элементы.ОтправитьSMSСКодомПроверки, ПоказатьКнопкуОтправитьСМС);
	
	Если ПараметрыВводаКодаSMS.ВариантПроверки = "ПриВыборе" Тогда
		ВвестиДанныеПокупателяКлиент();
	ИначеЕсли ПараметрыВводаКодаSMS.ВариантПроверки = "ПриОплатеБонусами" Тогда
		Если ПриОплатеБонусами Тогда
			ВвестиДанныеПокупателяКлиент();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ЗакрытьФормуДанныеПокупателя, ПриОплатеБонусами);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаВыборМеню, Ложь);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПодтверждениеСМС);
	
	НастроитьЦифровуюПанель();
	
	УстановитьДоступностьГруппыСозданияРеквизитов(Ложь);
	
	СформироватьСообщениеИОтправитьSMS();
	
КонецПроцедуры

&НаКлиенте
Процедура КодПодтвержденияВведенныйИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Введено4Цифры = СтрДлина(СокрЛП(Текст)) = 4;
	
	Если Введено4Цифры Тогда
		
		ТекущийЭлемент = Элементы.ОтправитьSMSСКодомПроверки;
		КодПроверкиИзSMS = Текст;
		ПроверитьВведенныйКодИзSMS();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВведенныйКодИзSMS()
	
	Если ПараметрыВводаКодаSMS = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КодПроверкиИзSMS = ПараметрыВводаКодаSMS.КодПодтверждения Тогда
		
		ОбработатьУспешноВведенныйКодИзSMS();
		
	Иначе
		
		ОбработатьОшибочноВведенныйКодИзSMS();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУспешноВведенныйКодИзSMS()
	
	Если Не РежимКассыСамообслуживания Тогда
		ЗаголовокСообщения = НСтр("ru='Верный код.'");
		ТекстПояснения = НСтр("ru='Номер телефона подтвержден.'");
		КартинкаСообщения = БиблиотекаКартинок.Успешно32;
		ПоказатьОповещениеПользователя(ЗаголовокСообщения, , ТекстПояснения , КартинкаСообщения);
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ЗакрытьФормуДанныеПокупателя, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаВыборМеню, Истина);
	
	Если ПараметрыВводаКодаSMS.ВариантПроверки = "ПриЗаведенииКарты" Тогда
		СоздатьКартуКлиент();
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПустаяДополнительнаяГруппа);
		Если ВертикальнаяОриентация Тогда
			ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаДополнительнаяКоманднаяПанельПустая);
		КонецЕсли;
	ИначеЕсли ПараметрыВводаКодаSMS.ВариантПроверки = "ПриВыборе" Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ДополнительнаяГруппаКартаНайдена);
		ОтобразитьПродолжениеНаКнопкеЗакрытьДанныеПокупателяПриНеобходимости();
	ИначеЕсли ПараметрыВводаКодаSMS.ВариантПроверки = "ПриОплатеБонусами" Тогда
		Если ОткрытДиалогВводаБонусов Тогда
			ОплатитьБонусамиПриПереходеКОплатеКлиент();
		Иначе
			ОплатитьБонусамиКлиент();
		КонецЕсли;
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПустаяДополнительнаяГруппа);
	КонецЕсли;
	
	ПараметрыВводаКодаSMS = Неопределено;
	Элементы.ОплатитьБонусами.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	
	НастроитьЦифровуюПанель();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибочноВведенныйКодИзSMS()
	
	Если Не РежимКассыСамообслуживания Тогда
		ЗаголовокСообщения = НСтр("ru='Неверный код.'");
		ТекстПояснения = НСтр("ru='Повторите ввод кода или отправьте SMS повторно или отмените ввод карты.'");
		КартинкаСообщения = БиблиотекаКартинок.Ошибка32;
		ПоказатьОповещениеПользователя(ЗаголовокСообщения, ,ТекстПояснения , КартинкаСообщения);
	КонецЕсли;
	
	Попыток = ПараметрыВводаКодаSMS.ПопытокВвода;
	Попыток = Попыток + 1;
	ПараметрыВводаКодаSMS.ПопытокВвода = Попыток;
	
	ПодсказкаПоляВводаКода = Элементы.КодПроверкиИзSMSРасширеннаяПодсказка;
	ПодсказкаПоляВводаКода.Заголовок = НСтр("ru='Неверный код'");
	ПодсказкаПоляВводаКода.ЦветТекста = ЦветаФормы.ОсобыйТекст;
	
	ТекущийЭлемент = Элементы.КодПроверкиИзSMS;
	КодПроверкиИзSMS = "";
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСообщениеИОтправитьSMS()
	
	ПодсказкаПоляВводаКода = Элементы.КодПроверкиИзSMSРасширеннаяПодсказка;
	ПодсказкаПоляВводаКода.Заголовок = НСтр("ru='Введите код из SMS'");
	ПодсказкаПоляВводаКода.ЦветТекста = ЦветаФормы.Авто;
	
	РезультатОтправкиSMS = СформироватьСообщениеИОтправитьSMSСервер();
	
	Если РезультатОтправкиSMS.Результат Тогда
		
		ТекстПояснения = НСтр("ru='Введите код из SMS для подтверждения'");
		ЗаголовокСообщения = СтрШаблон(НСтр("ru='SMS с кодом отправлено на номер %1'"), РезультатОтправкиSMS.НомерТелефона);
		КартинкаСообщения = БиблиотекаКартинок.ОтправитьSMS;
		
	Иначе
		
		ТекстПояснения = РезультатОтправкиSMS.ОписаниеОшибки;
		ЗаголовокСообщения = СтрШаблон(НСтр("ru='Ошибка отправки SMS на номер %1'"), РезультатОтправкиSMS.НомерТелефона);
		КартинкаСообщения = БиблиотекаКартинок.Ошибка32;
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ЗаголовокСообщения, , ТекстПояснения, КартинкаСообщения);
	КодПроверкиИзSMS = "";
	ТекущийЭлемент = Элементы.КодПроверкиИзSMS;
	
КонецПроцедуры

&НаСервере
Функция СформироватьСообщениеИОтправитьSMSСервер()
	
	КодПодтверждения = СлучайноеЧетырехзначноеЧисло();
	
	ПараметрыВводаКодаSMS.КодПодтверждения = КодПодтверждения;
	ПараметрыВводаКодаSMS.ПопытокВвода = 0;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КодПодтверждения", КодПодтверждения);
	
	Если ПараметрыВводаКодаSMS.ВариантПроверки = "ПриЗаведенииКарты" Тогда
		
		ШаблонСообщения = ТекущаяНастройкаРМК.ШаблонSMSПриЗаведенииКарты;
		НомерТелефонаПолучателя = НоваяКартаТелефон;
		
	ИначеЕсли ПараметрыВводаКодаSMS.ВариантПроверки = "ПриОплатеБонусами" Тогда
		
		ШаблонСообщения = ТекущаяНастройкаРМК.ШаблонSMSПриСписанииБонусов;
		НомерТелефонаПолучателя = НайденнаяКартаТелефон;
		
	Иначе
		
		ШаблонСообщения = ТекущаяНастройкаРМК.ШаблонSMSПриПродаже;
		НомерТелефонаПолучателя = НайденнаяКартаТелефон;
		
	КонецЕсли;
	
	ТекстСообщения = "";
	ОбщегоНазначенияРМКПереопределяемый.СформироватьТекстСообщения(ШаблонСообщения,
		ДополнительныеПараметры,
		ТекстСообщения);
	
	РезультатОтправки = ОтправитьSMS(ТекстСообщения, НомерТелефонаПолучателя);
	
	Возврат РезультатОтправки;
	
КонецФункции

// Отправляет SMS сообщение на указанный номер телефона.
//
// Параметры:
//  ТекстСообщения - Строка - Текст SMS.
//  НомерТелефона - Строка - Номер телефона получателя.
//
// Возвращаемое значение:
//  РезультатОтправки - Структура со свойствами:
//   Результат - Булево - Истина при успешной отправке.
//   ОписаниеОшибки - Строка - Текст ошибки.
//   НомерТелефона - Строка - Номер телефона получателя.
//
&НаСервереБезКонтекста
Функция ОтправитьSMS(ТекстСообщения, НомерТелефона)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатОтправки = Новый Структура;
	РезультатОтправки.Вставить("Результат", Ложь);
	РезультатОтправки.Вставить("ОписаниеОшибки", "");
	РезультатОтправки.Вставить("НомерТелефона", НомерТелефона);
	
	Если Не ЗначениеЗаполнено(ТекстСообщения) Тогда
		РезультатОтправки.ОписаниеОшибки =
			НСтр("ru = 'Не сформирован текст сообщения для отправки.'");
		Возврат РезультатОтправки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерТелефона) Тогда
		
		МассивНомеров = Новый Массив;
		МассивНомеров.Добавить(НомерТелефона);
		ОбщегоНазначенияРМКПереопределяемый.ОтправитьSMS(МассивНомеров, ТекстСообщения, РезультатОтправки);
		
	Иначе
		РезультатОтправки.ОписаниеОшибки =
			НСтр("ru = 'Для владельца карты не задан номер телефона. Выслать код подтверждения не удалось'");
	КонецЕсли;
	
	Возврат РезультатОтправки;
	
КонецФункции

// Возвращает случайное число.
//
// Возвращаемое значение:
//  Строка - число в формате от 0 до 9999.
//
&НаСервереБезКонтекста
Функция СлучайноеЧетырехзначноеЧисло()
	
	Генератор = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	СлучайноеЧисло = Генератор.СлучайноеЧисло(0, 9999);
	
	Если СлучайноеЧисло < 1000 Тогда
		СлучайноеЧислоСтрокой = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка(СлучайноеЧисло), 4, "0");
	Иначе
		СлучайноеЧислоСтрокой = Формат(СлучайноеЧисло, "ЧГ=0");
	КонецЕсли;
	
	Возврат СлучайноеЧислоСтрокой;
	
КонецФункции

#КонецОбласти

#Область ЗаменаТоваров

&НаКлиенте
Процедура НастроитьЭлементыВРежимеЗаменаТоваров()
	
	СформироватьЗаголовок(НСтр("ru='Замена товаров'"));
	
	ПереключитьНаСледующийЧек("НаСледующий");
	Элементы.Товары.ОтборСтрок = Неопределено;
	
	СуммаОплаченоНал = 0;
	СуммаОплаченоБН = 0;
	
	СуммаОплаченоЗачетАванса = 0;
	СуммаОплаченоБезнал = 0;
	
	Элементы.СуммаОплаченоНал.Подсказка = НСтр("ru = 'Наличные'");
	Элементы.СуммаОплаченоБН.Подсказка = НСтр("ru = 'Карта'");
	Элементы.СуммаОплаченоБонусами.Подсказка = НСтр("ru = 'Бонусы'");
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаНал, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаКартой, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаВРассрочку, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаЗачетАванса, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаБезнал, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаКредитом, Ложь);
	
	Для Каждого СтрокаТоваров Из Объект.Товары Цикл
		
		СтрокаТоваров.ТоварКЗамене = Истина;
		
	КонецЦикла;
	
	Если СуммаОплаченоВРассрочку > 0 Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВидОплатыНаличнымиГоризонтально, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВидОплатыКартой, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСБП, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатаЮКасса, Ложь);
		СуммаОплаченоВРассрочку = 0;
	КонецЕсли;
	
	ЭтоЗаменаТоваров = Истина;
	НастроитьЭлементыВРежимеПродажа();
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварЦенаИзКарточки, Истина);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВидОплатыНСПК, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, Ложь);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ОтложитьЧек, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeКарта, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeНаличные, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ПоказатьРассчитанныеСкидки, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ПодборТоваровПрикладнаяФорма

&НаКлиенте
Процедура ОбработкаПодбораТоваров(РезультатПодбора, ДополнительныПараметры) Экспорт
	
	Если ТипЗнч(РезультатПодбора) = Тип("Структура")
		И РезультатПодбора.Свойство("АдресКорзиныВХранилище")
		И ЗначениеЗаполнено(РезультатПодбора.АдресКорзиныВХранилище) Тогда
		
		ОбработкаПодбораТоваровНаСервере(РезультатПодбора, КэшКонтроляПродаж);
		ЭтапыКонтроляПродаж = ИнтерфейсРМКСлужебныйКлиент.ЭтапыКонтроляПродаж();
		ИнтерфейсРМКСлужебныйКлиент.ВыполнитьПроверкиКонтроляПродаж(ЭтотОбъект, ЭтапыКонтроляПродаж.ДобавлениеТовара);
		СформироватьЗаголовок();
		ПересчитатьИтогиТабличнойЧастиТовары();
		НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
		УстановитьАктивностьСтроки();
		
		ЗапуститьОбработкуРезультатаКонтроляПродажПриСерверномДобавлении(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораТоваровНаСервере(РезультатПодбора, ДанныеКонтроляПродаж)
	
	ДополнительныеДанные = ШаблонДополнительныхДанныхЗапросаКонтроляПродаж(ЭтотОбъект);
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПоПодборуТоваров(РезультатПодбора, ЭтотОбъект, ДополнительныеДанные);
	Если Не ДополнительныеДанные.ДанныеКонтроляПродаж = Неопределено Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.ДобавитьНовыеДанныеКэшаПродаж(ДанныеКонтроляПродаж,
			ДополнительныеДанные.ДанныеКонтроляПродаж);
	КонецЕсли;
	ДополнитьСведенияОНоменклатуре();
	ОбработкаПодбораНаборовЗавершение(ДанныеКонтроляПродаж);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораНаборовЗавершение(ДанныеКонтроляПродаж)
	
	СтрокиНаборов = Объект.Товары.НайтиСтроки(Новый Структура("ЭтоНабор, НомерНабора", Истина, 0));

	ДополнительныеДанные = ШаблонДополнительныхДанныхЗапросаКонтроляПродаж(ЭтотОбъект);
	
	Для каждого СтрокаТовара Из СтрокиНаборов Цикл
		Если СтрокаТовара.ЭтоНабор Тогда
			ДанныеНабора = Новый Структура();
			ДанныеНабора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
			ДанныеНабора.Вставить("Характеристика", СтрокаТовара.Характеристика);
			ДанныеНабора.Вставить("Цена", СтрокаТовара.Цена);
			Для к = 1 По СтрокаТовара.КоличествоУпаковок Цикл
				ДобавитьНаборВТабличнуюЧасть(ДанныеНабора, ДополнительныеДанные);
				Если Не ДополнительныеДанные.ДанныеКонтроляПродаж = Неопределено Тогда
					ИнтерфейсРМКСлужебныйКлиентСервер.ДобавитьНовыеДанныеКэшаПродаж(ДанныеКонтроляПродаж,
						ДополнительныеДанные.ДанныеКонтроляПродаж);
					ДополнительныеДанные.ДанныеКонтроляПродаж = Неопределено;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Объект.Товары.Удалить(СтрокаТовара);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаявлениеНаВозврат

&НаКлиенте
Процедура ВвестиПерсональныеДанныеЗаявителя()
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ЗаголовокПредупреждения = НСтр("ru = 'Печать заявления на возврат'");
		ТекстПредупреждения = НСтр("ru = 'Пожалуйста, заполните перечень возвращаемых товаров.'");
		ПоказатьПредупреждение(, ТекстПредупреждения, , ЗаголовокПредупреждения);
		Возврат;
	
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Организация", Объект.Организация);
	
	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		ПараметрыОткрытия.Вставить("ДисконтнаяКартаКлиента", Объект.ДисконтнаяКарта);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьЗаявленияНаВозвратЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВводаДанныхДляЗаявления",
		ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПечатьЗаявленияНаВозвратЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		СведенияЗаявителя = Результат;
		
		ДанныеЗаявленияНаВозврат = ДанныеЗаявленияНаВозврат(СведенияЗаявителя);
		СформироватьЗаявлениеНаВозврат(ДанныеЗаявленияНаВозврат);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ДанныеЗаявленияНаВозврат(ИсходныеДанные)

	СведенияЗаявления = ОбщегоНазначенияРМККлиент.СтруктураЗаявленияНаВозврат();
	
	ТабличнаяЧастьЗаявления = Новый Массив();
	
	Для Каждого СтрокаТоваров Из Объект.Товары Цикл
	
		ДанныеСтроки = ОбщегоНазначенияРМККлиент.СтрокаЗаявленияНаВозврат();
		ДанныеСтроки.Номер = СтрокаТоваров.НомерСтроки;
		ДанныеСтроки.Номенклатура = СтрокаТоваров.ПредставлениеНоменклатураХарактеристика;
		ДанныеСтроки.Количество = СтрокаТоваров.Количество;
		ДанныеСтроки.ПредставлениеЕдиницыИзмерения = СтрокаТоваров.ПредставлениеЕдиницыИзмерения;
		ДанныеСтроки.Сумма = СтрокаТоваров.Сумма;
		ТабличнаяЧастьЗаявления.Добавить(ДанныеСтроки);
	
	КонецЦикла;
	
	СведенияЗаявления.Товары = ТабличнаяЧастьЗаявления;
	СведенияЗаявления.ФИОПокупателя = ИсходныеДанные.ФИОПокупателя;
	СведенияЗаявления.ДатаРождения = ИсходныеДанные.ДатаРождения;
	СведенияЗаявления.УдостоверениеЛичности = ИсходныеДанные.УдостоверениеЛичности;
	СведенияЗаявления.СуммаДокумента = СуммаИтого;
	СведенияЗаявления.ЧекПродажи = ЧекККМПродажа;
	СведенияЗаявления.Магазин = Объект.ТорговыйОбъект;
	СведенияЗаявления.ЧекНомер = 0;
	СведенияЗаявления.ЧекДата = Дата(1, 1, 1);
	СведенияЗаявления.Кому = ИсходныеДанные.Кому;
	СведенияЗаявления.ФИОРуководителя = ИсходныеДанные.ФИОРуководителя;
	СведенияЗаявления.ОтКого = ИсходныеДанные.ФИОПокупателя;
	СведенияЗаявления.Дата = Дата(1, 1, 1);
	
	Возврат СведенияЗаявления;
	
КонецФункции

&НаКлиенте
Процедура СформироватьЗаявлениеНаВозврат(ДанныеЗаявленияНаВозврат)
	
	ИдентификаторПечатнойФормы = "ЗаявлениеНаВозврат";
	МодульУправлениеПечатьюКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеПечатьюКлиент");
	КоллекцияПечатныхФорм = МодульУправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
	СформироватьЗаявлениеНаВозвратСервер(ДанныеЗаявленияНаВозврат, КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы);
	ОбластиОбъектов = Новый СписокЗначений;
	МодульУправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм, ОбластиОбъектов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьЗаявлениеНаВозвратСервер(ДанныеЗаявленияНаВозврат, КоллекцияПечатныхФорм,
	ИдентификаторПечатнойФормы)
	
	ДополнитьИсходныеДанныеЗаявленияНаВозврат(ДанныеЗаявленияНаВозврат);
	Макет = ОбщегоНазначенияРМК.МакетЗаявленияНаВозврат(ДанныеЗаявленияНаВозврат);
	БуферКоллекцииПечатныхФорм = ПодготовитьКоллекциюПечатныхФорм(ИдентификаторПечатнойФормы);
	СинонимМакета = НСтр("ru = 'Заявление на возврат'");
	
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(БуферКоллекцииПечатныхФорм,
		"ЗаявлениеНаВозврат",
		СинонимМакета,
		Макет, ,
		"ОбщийМакет.ПФ_MXL_ЗаявлениеНаВозвратРМК");
	
	Если БуферКоллекцииПечатныхФорм.Количество() > 0
		И КоллекцияПечатныхФорм.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(КоллекцияПечатныхФорм[0], БуферКоллекцииПечатныхФорм[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодготовитьКоллекциюПечатныхФорм(Знач Идентификаторы)
	
	Результат = ОбщегоНазначенияРМК.ПодготовитьКоллекциюПечатныхФорм(Идентификаторы);
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьИсходныеДанныеЗаявленияНаВозврат(ДанныеЗаявленияНаВозврат)
	ОбщегоНазначенияРМК.ДополнитьИсходныеДанныеЗаявленияНаВозврат(ДанныеЗаявленияНаВозврат);
КонецПроцедуры

#КонецОбласти

#Область ПродажаСВыдачейНаличных

&НаКлиенте
Процедура ЗаменитьЧекВыдачиНаличныхНаЧекВозвратаНаКлиенте(СсылкаНаЧекВыдачиНаличных, ЧекПродажиПриВыдачеНаличных,
	НомерЧекаККМ, НомерСменыККМ, ПараметрыЭквайринговойОперации)
		ЗаменитьЧекВыдачиНаличныхНаЧекВозвратаСервер(СсылкаНаЧекВыдачиНаличных, ЧекПродажиПриВыдачеНаличных,
			НомерЧекаККМ, НомерСменыККМ, ПараметрыЭквайринговойОперации);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоОшибкаФискализацииЧекаВыдачиВПакетномРежиме(ДанныеПакетнойОперации)

	Возврат ЕстьСвойство(ДанныеПакетнойОперации, "РезультатФискализацииЧека")
			И ЕстьСвойство(ДанныеПакетнойОперации.РезультатФискализацииЧека, "Результат")
			И ДанныеПакетнойОперации.РезультатФискализацииЧека.Результат
			И ЕстьСвойство(ДанныеПакетнойОперации, "РезультатВыполненияЭквайринговойОперации")
			И ЗначениеЗаполнено(ДанныеПакетнойОперации.РезультатВыполненияЭквайринговойОперации)
			И ЕстьСвойство(ДанныеПакетнойОперации, "ПараметрыЭквайринговойОперации")
			И ЗначениеЗаполнено(ДанныеПакетнойОперации.ПараметрыЭквайринговойОперации)
			И ЕстьСвойство(ДанныеПакетнойОперации, "РезультатФискализацииЧекаВыдачи")
			И ЗначениеЗаполнено(ДанныеПакетнойОперации.РезультатФискализацииЧекаВыдачи)
			И НЕ ДанныеПакетнойОперации.РезультатФискализацииЧекаВыдачи.Результат;

КонецФункции

&НаСервереБезКонтекста
Процедура ЗаменитьЧекВыдачиНаличныхНаЧекВозвратаСервер(СсылкаНаЧекВыдачиНаличных, ЧекПродажиПриВыдачеНаличных,
	НомерЧекаККМ, НомерСменыККМ, ПараметрыЭквайринговойОперации)
		ОбщегоНазначенияРМК.ЗаменитьЧекВыдачиНаЧекВозврата(СсылкаНаЧекВыдачиНаличных,
			ЧекПродажиПриВыдачеНаличных, НомерЧекаККМ, НомерСменыККМ, ПараметрыЭквайринговойОперации);
КонецПроцедуры
	
#КонецОбласти

#Область СтандартныеПодсистемы_ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура НастроитьГруппуДанныеДляТекущейСтроки(ТекущаяСтрока)
	
	УказанОтветственныйЗаПродажу = ЗначениеЗаполнено(ТекущаяСтрока.ПродавецПредставление);
	Если УказанОтветственныйЗаПродажу Тогда
		АктивнаяСтраница = Элементы.СтраницаПродавецВыбран;
		ТекущийПродавец = СтрШаблон("%1 %2", НСтр("ru = 'Продавец:'"), ТекущаяСтрока.ПродавецПредставление);
	Иначе
		АктивнаяСтраница = Элементы.СтраницаДобавлениеПродавца;
		ТекущийПродавец = "";
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(АктивнаяСтраница);
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаПродавецВыбран, УказанОтветственныйЗаПродажу);
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаДобавлениеПродавца, НЕ УказанОтветственныйЗаПродажу);
	
	Если ИспользоватьВыборСкладаПриПродаже Тогда
		
		СкладУказан = ЗначениеЗаполнено(ТекущаяСтрока.ТорговыйОбъект);
		Если СкладУказан Тогда
			АктивнаяСтраница = Элементы.СтраницаСкладВыбран;
			ТекущийСклад = СтрШаблон("%1 %2", НСтр("ru = 'Склад:'"), ТекущаяСтрока.ТорговыйОбъект);
		Иначе
			АктивнаяСтраница = Элементы.СтраницаДобавлениеСклада;
			ТекущийСклад = "";
		КонецЕсли;
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(АктивнаяСтраница);
		УстановитьВидимостьЭлементаФормы(Элементы.СтраницаСкладВыбран, СкладУказан);
		УстановитьВидимостьЭлементаФормы(Элементы.СтраницаДобавлениеСклада, Не СкладУказан);
		
		ЯчейкаУказана = ЗначениеЗаполнено(ТекущаяСтрока.Ячейка);
		Если ЯчейкаУказана Тогда
			АктивнаяСтраница = Элементы.СтраницаЯчейкаВыбрана;
			ТекущаяЯчейка = СтрШаблон("%1 %2", НСтр("ru = 'Ячейка:'"), ТекущаяСтрока.Ячейка);
		Иначе
			АктивнаяСтраница = Элементы.СтраницаДобавлениеЯчейки;
			ТекущаяЯчейка = "";
		КонецЕсли;
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(АктивнаяСтраница);
		УстановитьВидимостьЭлементаФормы(Элементы.СтраницаЯчейкаВыбрана, ЯчейкаУказана);
		УстановитьВидимостьЭлементаФормы(Элементы.СтраницаДобавлениеЯчейки, Не ЯчейкаУказана);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьГруппуПримененныеУправляемыеСкидки(ТекущаяСтрока) 
	
	ГруппаУправляемыхСкидок = Элементы.Найти("ГруппаПримененныеУправляемыеСкидки");
	Если Не ГруппаУправляемыхСкидок = Неопределено И Не ГруппаУправляемыхСкидок.Видимость Тогда
		// Управлямые скидки не доступны
		Возврат;
	КонецЕсли;	
	ИдентификаторыСкрытыхСтрокСкидок = Новый Массив;
	ИдентификаторыВидимыхСтрокСкидок = Новый Массив;
	ИдентификаторТекущейСтрокиТовара = ТекущаяСтрока.ИдентификаторСтроки;
	Для Каждого СтрокаСкидки Из ТаблицаВыбранныхУправляемыхСкидок Цикл
		Если ЗначениеЗаполнено(СтрокаСкидки.ИдентификаторСтроки) 
			И СтрокаСкидки.ИдентификаторСтроки <> ИдентификаторТекущейСтрокиТовара Тогда
			ИдентификаторыСкрытыхСтрокСкидок.Добавить(СтрокаСкидки.ПолучитьИдентификатор());
		Иначе
			ИдентификаторыВидимыхСтрокСкидок.Добавить(СтрокаСкидки.ПолучитьИдентификатор());
		КонецЕсли;		
	КонецЦикла;
	ЦелеваяВидимость = Ложь;
	Для Каждого ИдентификаторСкрыть Из ИдентификаторыСкрытыхСтрокСкидок Цикл
		ГруппаТекущейСкидки = Элементы.Найти("ГруппаПримененныеУправляемыеСкидки_"+ИдентификаторСкрыть);
		Если Не ГруппаТекущейСкидки = Неопределено И Не ГруппаТекущейСкидки.Видимость = ЦелеваяВидимость Тогда
			ГруппаТекущейСкидки.Видимость = ЦелеваяВидимость;
		КонецЕсли;
	КонецЦикла;
	ЦелеваяВидимость = Истина;
	Для Каждого ИдентификаторПоказать Из ИдентификаторыВидимыхСтрокСкидок Цикл
		ГруппаТекущейСкидки = Элементы.Найти("ГруппаПримененныеУправляемыеСкидки_"+ИдентификаторПоказать);
		Если Не ГруппаТекущейСкидки = Неопределено И Не ГруппаТекущейСкидки.Видимость = ЦелеваяВидимость Тогда
			ГруппаТекущейСкидки.Видимость = ЦелеваяВидимость;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыборПродавцаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ОбработатьВыборПродавца(Результат);
	
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаПродавецВыбран, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаДобавлениеПродавца, Ложь);
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПродавецВыбран);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПродавцаВНаборе(Продавец, ПродавецПредставление, НомерНабора)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерНабора", НомерНабора);
	МассивТоваров = Объект.Товары.НайтиСтроки(СтруктураПоиска);
	Если МассивТоваров.Количество() > 0 Тогда
		Для Каждого СтрокаМассива Из МассивТоваров Цикл
			Если ВыборПродавцаИзСписка Тогда
				СтрокаМассива.ИдентификаторПродавца = Продавец;
				СтрокаМассива.ПродавецПредставление = ПродавецПредставление;
			Иначе
				СтрокаМассива.Продавец = Продавец;
				СтрокаМассива.ПродавецПредставление = Продавец;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкладВНаборе(Склад, НомерНабора)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерНабора", НомерНабора);
	МассивТоваров = Объект.Товары.НайтиСтроки(СтруктураПоиска);
	Если МассивТоваров.Количество() > 0 Тогда
		Для Каждого СтрокаМассива Из МассивТоваров Цикл
			СтрокаМассива.ТорговыйОбъект = Склад;
			ДанныеСтроки = Новый Структура("Номенклатура, Характеристика, ТорговыйОбъект, КоличествоОстаток, СистемаНалогообложения", 
				СтрокаМассива.Номенклатура, СтрокаМассива.Характеристика, СтрокаМассива.ТорговыйОбъект, СтрокаМассива.КоличествоОстаток);
			ЗаполнитьДанныеСтрокиПоСкладу(ДанныеСтроки);
			СтрокаМассива.КоличествоОстаток = ДанныеСтроки.КоличествоОстаток;
			Если ЗначениеЗаполнено(ДанныеСтроки.СистемаНалогообложения) Тогда
				СтрокаМассива.СистемаНалогообложения = ДанныеСтроки.СистемаНалогообложения;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЯчейкуВНаборе(Ячейка, НомерНабора)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерНабора", НомерНабора);
	МассивТоваров = Объект.Товары.НайтиСтроки(СтруктураПоиска);
	Если МассивТоваров.Количество() > 0 Тогда
		Для Каждого СтрокаМассива Из МассивТоваров Цикл
			СтрокаМассива.Ячейка = Ячейка;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуОплат()
	ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьТаблицуОплат(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыОплаты()
	
	СуммаИтого = СуммаБезСкидки - СуммаСкидки - СуммаБонусов;
	СуммаЗаполненныхОплат = СуммаОплаченоНал + СуммаОплаченоБН + СуммаОплаченоБезнал + СуммаОплаченоВРассрочку 
		+ СуммаОплаченоЗачетАванса + СуммаОплаченоСертификатами + СуммаОплаченоСБП + СуммаОплаченоЮКасса 
		+ СуммаОплаченоСертификатамиНСПК + СуммаТоваровКЗамене + СуммаОплаченоКредитом;
	СуммаКОплатеВсего = СуммаИтого - СуммаЗаполненныхОплат;
	
	СуммаКОплате = СуммаКОплатеВсего;
	Сдача = ?(СуммаОплаченоНал = 0, 0, ?(СуммаКОплатеВсего >0, 0, -1 * СуммаКОплатеВсего));
	
	ОбновитьМаксимальныеСуммыСертификатов();
	АктуализироватьИзменениеЭтапаРаботыСЧекомПриИзмененииОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаголовок(ТекстЗаголовка = "")
	ОбщегоНазначенияРМККлиентПереопределяемый.СформироватьЗаголовокПрограммы(ТекстЗаголовка, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЧекаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыбратьПользователяДоЗаменыПрав();
	
	Если Результат = Неопределено Тогда
		
		ЭтоЧекКоррекции = Ложь;
		ТекущаяОперация = "";
		
		Если НачинатьНовыйЧекВРежимеСкупка Тогда
			ОформитьРежимНовогоЧека("Скупка");
		Иначе
			ОформитьРежимНовогоЧека("Продажа");
		КонецЕсли;
		
		ВывестиИнформациюНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.НачалоРаботы);
		
	Иначе
		
		ЭтоВозвратПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
		ЭтоВозвратСкупки = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозвратСкупки(Объект.ВидОперации);
		
		Если ЕстьСвойство(Результат, "ЧекККМ") Тогда
			ТекущаяОперация = "";
			
			ДополнительныеДанные = ШаблонДополнительныхДанныхЗапросаКонтроляПродаж(ЭтотОбъект);
			ЗаполнитьНаОснованииЧекаККМ(Результат.ЧекККМ, ДополнительныеДанные);
			Если Не ДополнительныеДанные.ДанныеКонтроляПродаж = Неопределено Тогда
				ИнтерфейсРМКСлужебныйКлиентСервер.ДобавитьНовыеДанныеКэшаПродаж(КэшКонтроляПродаж,
					ДополнительныеДанные.ДанныеКонтроляПродаж);
			КонецЕсли;
			ЭтапыКонтроляПродаж = ИнтерфейсРМКСлужебныйКлиент.ЭтапыКонтроляПродаж();
			ИнтерфейсРМКСлужебныйКлиент.ВыполнитьПроверкиКонтроляПродаж(ЭтотОбъект, ЭтапыКонтроляПродаж.ОткрытиеЧека);
			ИнтерфейсРМКСлужебныйКлиент.ОчиститьРезультатКонтроляПродаж(РезультатКонтроляПродаж);
			
			Если (Не ЗначениеЗаполнено(Объект.ДисконтнаяКарта))
					И ИнтерфейсРМКСлужебныйКлиентСервер.ПараметрыКартыЗаполнены(ПараметрыКартыЛояльности) Тогда
				
				ДозаполнитьДанныеКартыССервераЛояльности();
				
			КонецЕсли;
			
			Если ЭтоВозвратПродажи Тогда
				ПеренестиПодаркиПриВозврате();
				Если НЕ (РежимКассыСамообслуживания
					И ТаблицаПодаркиБезВыбора.Количество() = 0) Тогда
					РежимВыбораПодарка = Истина;
					ПодключитьОбработчикОжидания("ВыдатьПодарок", 0.1 , Истина);
					ИмяМетода = "ПересчитатьСкидкиПриВозврате";
				Иначе
					ПересчитатьСкидкиПриВозврате();
				КонецЕсли;
			КонецЕсли;
			
			ИзменитьКартинкуВводПокупателя();
			УстановитьАктивностьСтроки();
			ПересчитатьИтогиТабличнойЧастиТовары(Ложь);
			НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
			
			// Промокоды
			СтрокиПромокодов = ТаблицаПримененныхПромокодов.НайтиСтроки(Новый Структура("ЭтоАктивацияПромокода", Ложь));
			Для Каждого СтрокаПромокода Из СтрокиПромокодов Цикл
				ОписаниеСкидкиПромокода = Строка(СтрокаПромокода.СкидкаНаценка);
				Если Не ЗначениеЗаполнено(СтрокаПромокода.УникальныйИдентификатор) Тогда
					СтрокаПромокода.УникальныйИдентификатор = СтрЗаменить(Новый УникальныйИдентификатор, "-", "_");
				КонецЕсли;
				ДобавитьРеквизитыПромокода(СтрокаПромокода.Промокод);
			КонецЦикла;
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПримененныеПромокоды, СтрокиПромокодов.Количество() > 0);

			ИмяРегистрируемойОперации = "";
			Если ЭтоВозвратПродажи Тогда
				ПроверитьВозможностьВозвратаВПлатежнойСистемеПродажи();
				НастроитьЭлементыВРежимеВозврат();
				ИмяРегистрируемойОперации = "НачалоВозврата";
			ИначеЕсли ЭтоЧекКоррекции Тогда
				НастроитьЭлементыВРежимеВозврат();
			ИначеЕсли ЭтоВозвратСкупки Тогда
				НастроитьЭлементыВРежимеВозвратСкупки();
				ИмяРегистрируемойОперации = "НачалоВозвратаСкупки";
			Иначе
			КонецЕсли;
			Если ЭтоЧекКоррекции Тогда
				ИмяРегистрируемойОперации = "НачалоКоррекции";
			КонецЕсли;
			
			
			ПерерасчитатьСуммыОплаты();
			РассчитатьСуммыОплаты();
			НастроитьДоступностьПробитьЧек();
			
			ПараметрыПродолжения = Новый Структура;
			ПараметрыПродолжения.Вставить("ИмяРегистрируемойОперации", ИмяРегистрируемойОперации);
			ПараметрыПродолжения.Вставить("ЧекККМ", Результат.ЧекККМ);
			
			ОповещениеПродолжения = Новый ОписаниеОповещения(
				"ВыборЧекаЗавершениеПродолжение",
				ЭтотОбъект,
				ПараметрыПродолжения);
			
			Если ЭтоВозвратПродажи И ОжидатьВводМарки Тогда
				ВыполнитьОбработкуОповещения(ОповещениеПродолжения, Неопределено);
			Иначе
				ПереключитьВРежимОплатыНаКлиенте(, Ложь,, ОповещениеПродолжения);
			КонецЕсли;
			
		Иначе
			
			Если ЭтоВозвратПродажи Тогда
				НастроитьФормуВРежимВозвратБезЧека();
			ИначеЕсли ЭтоВозвратСкупки Тогда
				НастроитьФормуВРежимВозвратСкупкиБезЧека();
			Иначе
			КонецЕсли;
			
		КонецЕсли;
		
		СформироватьЗаголовок();
		УстановитьВидимостьЭлементаФормы(Элементы.РаспечататьЗаявлениеНаВозврат, ЭтоВозвратПродажи);
		ОтразитьОстаткиНаличныхДенежныхСредствНаФорме(Объект.Организация, Объект.КассаККМ);
		
	КонецЕсли;
	
	ТекущаяОперация = "";
	СформироватьЗаголовокВводКассира();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЧекаЗавершениеПродолжение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Не ДополнительныеПараметры.ИмяРегистрируемойОперации = "" Тогда
		ЗарегистрироватьНачалоРаботыССуществующимЧеком(ДополнительныеПараметры.ИмяРегистрируемойОперации,
			ДополнительныеПараметры.ЧекККМ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаОснованииЧекаККМ(ЧекПродажи, ДополнительныеПараметры = Неопределено)
	
	ВыбраннаяСистемаНалогообложения = СистемаНалогообложенияЧека(ЧекПродажи);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЧекПродажи, "Организация") Тогда
		ВыбраннаяОрганизация = ЧекПродажи.Организация;
	Иначе
		ВыбраннаяОрганизация = ОсновнаяОрганизация;
	КонецЕсли;
	
	Отбор = Новый Структура("Организация", ВыбраннаяОрганизация);
	СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
	
	ПодключаемоеОборудование = СтрокаКассы.ИдентификаторУстройства;
	Объект.Организация = СтрокаКассы.Организация;
	Объект.КассаККМ = СтрокаКассы.КассаККМ;
	КассоваяСмена = СтрокаКассы.КассоваяСмена;
	ККМПоддерживаетПроверкуКодовМаркировки = СтрокаКассы.ПоддерживаетПроверкуКодовМаркировки;
	
	Если ЭтоЧекКоррекции Тогда
		
		СистемаНалогообложенияЧекаКоррекции = СистемаНалогообложенияЧека(ЧекПродажи);
		СНОКассы = СистемыНалогообложенияДоступныеВКассеККМ(ПодключаемоеОборудование);
		СписокВыборкаСНО = Элементы.СистемаНалогообложенияЧекаКоррекции.СписокВыбора;
		СписокВыборкаСНО.Очистить();
		СписокВыборкаСНО.ЗагрузитьЗначения(СНОКассы);
		ОднаСНО = СНОКассы.Количество() = 1;
		УстановитьВидимостьЭлементаФормы(Элементы.СистемаНалогообложенияЧекаКоррекции, НЕ ОднаСНО);
		ЭтоОбщаяСНО = МенеджерОборудованияРМККлиентСервер.ЭтоОСН(СистемаНалогообложенияЧекаКоррекции);
		УстановитьВидимостьЭлементаФормы(Элементы.ТоварыСтавкаНДС, ЭтоОбщаяСНО);
		УстановитьВидимостьЭлементаФормы(Элементы.ТоварыСтавкаНДСПереключатель, ЭтоОбщаяСНО);
		
	КонецЕсли;
	
	ЗаполнитьДанныеНаОснованииЧекаККМ(ЧекПродажи, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИтогиТабличнойЧастиТовары(ОбнулитьСуммыОплат = Истина, ОбнулитьПодарочныеСертификаты = Истина)
	
	ПересчитатьКоличествоВПлитках();
	
	СуммаБезСкидки = 0;
	СуммаСкидки = 0;
	СуммаБонусов = 0;
	
	СтрокиТоваров = Объект.Товары.НайтиСтроки(Новый Структура(Элементы.Товары.ОтборСтрок));
	
	Для Каждого СтрокаТовары Из СтрокиТоваров Цикл
		
		Если СтрокаТовары.ТоварКЗамене 
			Или СтрокаТовары.ПроцентАвтоматическойСкидки = 100 Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаБезСкидки = СуммаБезСкидки + СтрокаТовары.СуммаБезСкидки;
		СуммаСкидки = СуммаСкидки
			+ СтрокаТовары.СуммаАвтоматическойСкидки
			+ СтрокаТовары.СуммаСкидкиНаценки;
			
		СуммаБонусов = СуммаБонусов + СтрокаТовары.СуммаСкидкиОплатыБонусом;
		
		СуммаСкидкиИтог = СтрокаТовары.СуммаСкидкиНаценки
			+ СтрокаТовары.СуммаАвтоматическойСкидки
			+ СтрокаТовары.СуммаСкидкиОплатыБонусом;
			
		Если Не СтрокаТовары.СуммаСкидокОбщая = СуммаСкидкиИтог Тогда
			СтрокаТовары.СуммаСкидокОбщая = СуммаСкидкиИтог;
		КонецЕсли;
		
		СтрокаТовары.СуммаСкидокОбщая = СтрокаТовары.СуммаСкидкиНаценки
			+ СтрокаТовары.СуммаАвтоматическойСкидки
			+ СтрокаТовары.СуммаСкидкиОплатыБонусом;
			
		СтрокаТовары.ПроцентСкидкиОбщий = ?(СтрокаТовары.СуммаБезСкидки = 0, 0, СтрокаТовары.СуммаСкидокОбщая/СтрокаТовары.СуммаБезСкидки) * 100;
		
		Если СтрокаТовары.ПроцентСкидкиОбщий = 0 Тогда
			СтрокаТовары.ИндексКартинкиПроцентов = -1;
		Иначе
			СтрокаТовары.ИндексКартинкиПроцентов = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	СуммаКОплате = СуммаБезСкидки - СуммаСкидки - СуммаБонусов;
	
	СуммаИтого = СуммаКОплате;
	
	Если (РежимРаботыСЧеком = РежимыРаботыСЧеком.Оплата Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ВозвратКоррекция)
			И ОбнулитьСуммыОплат И НЕ ОтложенныйЧекПолностьюОплачен Тогда
		
		ОбнулитьПеременныеСуммОплат(ОбнулитьПодарочныеСертификаты);
		
	КонецЕсли;
		
	ПроверитьПревышениеСуммыЗачетаАванса();
	НастроитьДоступностьПробитьЧек();
	НастроитьЗаголовокКнопкиОплаты();
	НастроитьЗаголовокКнопкиСкидки();
	НастроитьШиринуКолонкиНомерСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчетКоличестваТовара(ТекущаяСтрока)
	
	ТекущаяСтрока.Количество = ТекущийТоварКоличество;
	ТекущаяСтрока.КоличествоУпаковок = ТекущийТоварКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(ИдентификаторСтроки = Неопределено)
	
	ТекущаяСтрока = ?((ИдентификаторСтроки <> Неопределено),
		Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки),
		Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор));
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийТоварЦенаИзКарточки = ТекущаяСтрока.Цена;
	
	ПересчитатьСуммы(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДанныеПриИзмененииКоличества(УвеличитьКоличество = Ложь)
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УвеличитьКоличество", УвеличитьКоличество);
	
	Если УвеличитьКоличество Или УменьшениеКоличестваТовараВозможно() Тогда
		ПроверитьПравоИПересчитатьИзменениеКоличества(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОтложитьЧекЗавершение(Результат) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(ОтложенныйЧек) Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьЧекКлиент();
	
КонецПроцедуры

&НаКлиенте
Функция ПримененыСкидки()

	Возврат СкидкиРассчитаны
		ИЛИ (Элементы.Товары.ТекущиеДанные <> Неопределено И Элементы.Товары.ТекущиеДанные.РассчитанаСкидка);

КонецФункции

&НаСервере
Процедура ПродолжитьЧек(ДанныеКонтроляПродаж)
	
	ДополнительныеДанные = ШаблонДополнительныхДанныхЗапросаКонтроляПродаж(ЭтотОбъект);
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьДанныеИзОтложенногоЧека(ЭтотОбъект, ОтложенныйЧек, ДополнительныеДанные);
	ДополнитьСведенияОНоменклатуре();
	
	Если Не ДополнительныеДанные.ДанныеКонтроляПродаж = Неопределено Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.ДобавитьНовыеДанныеКэшаПродаж(ДанныеКонтроляПродаж,
			ДополнительныеДанные.ДанныеКонтроляПродаж);
	КонецЕсли;
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеЛояльностиЗаполнены(ЭтотОбъект) Тогда
		
		НайденнаяКартаЛояльности = Неопределено;
		Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			ШтрихкодированиеРМКПереопределяемый.ЗаполнитьДанныеНайденнойКартыЛояльности(Объект.ДисконтнаяКарта, НайденнаяКартаЛояльности);
		ИначеЕсли ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ШтрихкодированиеРМКПереопределяемый.ЗаполнитьДанныеНайденнойКартыЛояльности(Объект.Контрагент, НайденнаяКартаЛояльности);
		Иначе
			НайденнаяКартаЛояльности = ЭтотОбъект.ПараметрыКартыЛояльности;
		КонецЕсли;
		
		Если НЕ НайденнаяКартаЛояльности = Неопределено Тогда
			ШтрихкодированиеРМК.ЗаполнитьФормуПоДисконтнойКарте(ЭтотОбъект, НайденнаяКартаЛояльности);
		КонецЕсли;
			
	КонецЕсли;
	
	Если Объект.Оплата.Количество() > 0 Тогда
		Для Каждого Оплата Из Объект.Оплата Цикл
			Если СуммаОплаченоБН <> 0 Тогда
				ТипОплаты = "Карта";
			ИначеЕсли СуммаОплаченоСБП <> 0 Или СуммаОплаченоЮКасса <> 0 Тогда
				ТипОплаты = "СБП";
			ИначеЕсли СуммаОплаченоСертификатамиНСПК <> 0 Тогда
				ТипОплаты = "НСПК";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОтложенныйЧекОбъект = ОтложенныйЧек.ПолучитьОбъект();
	ДокументЗаблокирован = Истина;
	
	Попытка
		ОтложенныйЧекОбъект.Заблокировать();
	Исключение
		
		ДокументЗаблокирован = Ложь;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка блокировки документа.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, ,
			ОтложенныйЧекОбъект,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
	КонецПопытки;
	
	Если ДокументЗаблокирован Тогда
		ОбщегоНазначенияРМКПереопределяемый.УстановитьСтатусЧека(ОтложенныйЧекОбъект);
		ОтложенныйЧекОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли; 
	
	// Промокоды
	СтрокиПромокодов = ТаблицаПримененныхПромокодов.НайтиСтроки(Новый Структура("ЭтоАктивацияПромокода", Ложь));
	Для Каждого СтрокаПромокода Из СтрокиПромокодов Цикл
		ОписаниеСкидкиПромокода = Строка(СтрокаПромокода.СкидкаНаценка);
		Если Не ЗначениеЗаполнено(СтрокаПромокода.УникальныйИдентификатор) Тогда
			СтрокаПромокода.УникальныйИдентификатор = СтрЗаменить(Новый УникальныйИдентификатор, "-", "_");
		КонецЕсли;
		ДобавитьРеквизитыПромокода(СтрокаПромокода.Промокод);
	КонецЦикла;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПримененныеПромокоды, СтрокиПромокодов.Количество() > 0);
	
	//Продавцы
	ЗаполнитьДанныеПродавца();
	
	//Серии
	ЗаполнитьДанныеСерии();
	ЗарегистрироватьОткрытиеОтложенногоЧека();
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСведенияОНоменклатуре()
	ОбщегоНазначенияРМКПереопределяемый.ДополнитьСведенияОТоварах(ЭтотОбъект);
	ЗаполнитьДанныеСерии();
	ДополнитьСтрокиТовараВычисляемымиДанными();
КонецПроцедуры

&НаСервере
Процедура ОтложитьЧекСервер()
	
	ЧекСоздан = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.СоздатьОтложенныйЧек(ЭтотОбъект, ЧекСоздан);
	
	Если ЧекСоздан И ОжидаемоеКоличествоЧеков <= 1 Тогда
		СоздатьНовыйНабор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНовыйНабор(ПараметрыЗавершения = Неопределено)
	
	Элементы.ГруппаИнфо.ЦветФона = ЦветаФормы.ФонРежимаПродажа;
	
	Объект.ВидОперации = ОбщегоНазначенияРМК.ВидТекущейОперации();
	Объект.Контрагент = Неопределено;
	Объект.ДисконтнаяКарта = Неопределено;
	Объект.СуммаДокумента = 0;
	Объект.ОперацияСДенежнымиСредствами = Ложь;
	Объект.ДокументРасчета = Неопределено;
	Объект.ЗаказПокупателя = Неопределено;
	
	Если КопированиеПродажи Тогда
		ОчиститьЛишниеДанныеПриКопированииПродажи();
	Иначе
		Объект.Товары.Очистить();
	КонецЕсли;
	Объект.Оплата.Очистить();
	
	ТекущийТоварИдентификатор = 0;
	ТекущийТоварКоличество = 0;
	ТекущийТоварСкидка = 0;
	ТекущийТоварСуммаСкидки = 0;
	ТекущийТоварЦенаИзКарточки = 0;
	
	РучноеСопоставлениеТовара = Ложь;
	ДанныеДляРучногоСопоставления = Неопределено;
	КодМаркиВРаботе = НСтр("ru = ''");
	
	РежимЗаказа = Ложь;
	Сдача = 0;
	ОплатаБезДеленияПоЧекам = Ложь;
	СдачаПриОшибкеПробитияЧека = 0;
	СуммаБезСкидки = 0;
	СуммаИтого = 0;
	СуммаОплаченоБН = 0;
	СуммаОплаченоНал = 0;
	СуммаОплаченоКредитом = 0;
	ПараметрыОплатыКредитом = Неопределено;
	СуммаОплаченоВРассрочку = 0;
	СуммаОплаченоЗачетАванса = 0;
	СуммаОплаченоСертификатами = 0;
	СуммаОстаткаСертификатов = 0;
	СуммаСертификата = 0;
	СуммаОплаченоСертификатамиНСПК = 0;
	СуммаТоваровКЗамене = 0;
	СуммаПодарковКРаспределению = 0;
	ПредварительноеОдобрениеНСПКПолучено = Ложь;
	ПримененаСкидкаНаЧек = Ложь;
	ИспользоватьАвтоматическиеСкидки = Ложь;
	ПараметрыКартыЛояльности = Неопределено;
	
	СуммаОплаченоБезнал = 0;
	ЗначениеСкидкиНаЧек = 0;
	СуммаОплаченоБонусами = 0;
	СуммаСкидки = 0;
	СуммаБонусов = 0;
	ТекущийТоварОстаток = "";
	КонтрагентВыбран = Ложь;
	#Область ВыборХарактеристики
	РежимВыбораХарактеристики = Ложь;
	УстановитьВидимостьЭлементаФормы(Элементы.ПлиткаПанельПодбораЗначений, Ложь);
	Элементы.СтраницыПанелиИзбранноеПодбор.ТекущаяСтраница = Элементы.СтраницаИзбранныхТоваров;
	#КонецОбласти
	
	#Область СписаниеБалловПоВладельцу
	СписатьБаллыПоВладельцу = Ложь;
	ОбъединитьКарты = Ложь;
	ТаблицаВыбранныхКарт.Очистить();
	ПроцентБонуснойПрограммы = 0;
	БонуснаяПрограмма = "";
	#КонецОбласти

	УстановитьДоступностьЭлементаФормы(Элементы.ЗначениеСкидкиНаЧек, Истина);
	Элементы.СкидкаНаЧекПроцентом.ЦветФона = ЦветаФормы.Авто;
	Элементы.СкидкаНаЧекСуммой.ЦветФона = ЦветаФормы.Авто;
	Элементы.ПоказатьСкидкиНаЧекРасширеннаяПодсказка.Заголовок = "0,00";
	
	#Область ОплатаQRКодом_ОбнулениеПараметров
	Объект.Оплачивается = Ложь;
	СуммаОплаченоСБП 						= 0;
	СуммаОплаченоЮКасса						= 0;
	ДокументОплаты 		 						= Неопределено;
	ДокументВозврата 	 						= Неопределено;
	ПлатежнаяСистема_ИдентификаторПС			= "";
	ПлатежнаяСистема_ВидОплаты  				= Неопределено;
	ПлатежнаяСистема_БанкКлиента    			= "";
	ПлатежнаяСистема_ВозможенВозврат    		= Ложь;
	ПлатежнаяСистема_ИдентификаторОплаты		= "";
	ПлатежнаяСистема_ОжидаемоеКоличествоЧеков   = 0;
	#КонецОбласти
	
	СуммаОстаткаДокументаРасчета = 0;
	ЭтоВозвратАванса = Ложь;
	ЭтоЗачетАванса = Ложь;
	ЭтоОплатаРассрочки = Ложь;
	ЭтоВнесениеПредоплатыПоЗаказу = Ложь;
	СкидкиРассчитаны = Ложь;
	ЭтоЗаменаТоваров = Ложь;
	ОтменаПлатежаСБП = Ложь;
	
	ЭтоЧекКоррекции = Ложь;
	СуммаКОплате = 0; 
	ТипОплаты = "";
	
	РеквизитыQRПлатежнойКарты = "";
	Элементы.ОплатаКартой.Отображение = ОтображениеКнопки.Текст;
	
	НомерСертификата = "";
	ПодарочныйСертификат = Неопределено;
	СостояниеПодтвержденияВозраста = "";
	ИдентификаторТекущейСессииПроверкиМарок = "";
	ДанныеДобавляемогоТовара = Неопределено;
	
	ВыбраннаяОрганизация = Неопределено;
	ВыбраннаяСистемаНалогообложения = Неопределено;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСписокЧековПродажи, Ложь);
	Элементы.Товары.ОтборСтрок = Неопределено;
	
	Элементы.ТекущийТоварСерияПартия.Заголовок = НСтр("ru = ''");
	Элементы.УказатьСерии.Картинка = Новый Картинка();
	Элементы.УказатьХарактеристику.Картинка = Новый Картинка();
	
	Для Каждого ЭлементГруппы Из Элементы.ГруппаОперации.ПодчиненныеЭлементы Цикл
		УстановитьДоступностьЭлементаФормы(ЭлементГруппы, Истина);
	КонецЦикла;
	
	ЭквайринговыйТерминалВыполненияОперации = Неопределено;
	
	Если ИспользоватьПанельИзбранныхТоваров Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ПанельИзбранныхТоваров, Истина);
	КонецЕсли;
	УстановитьВидимостьЭлементаФормы(Элементы.ТоварыСтавкаНДС, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ТоварыСтавкаНДСПереключатель, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.СистемаНалогообложенияЧекаКоррекции, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ОтложитьЧек, Не РежимКассыСамообслуживания);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeКарта, ИспользоватьОплатуПлатежнымиКартами);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeНаличные, ИспользоватьОплатуНаличными);
	УстановитьВидимостьЭлементаФормы(Элементы.ОтменитьИзмененияЧека, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаВидовОплат, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОтправкаЧекаСводно, Истина);
	
	УстановитьВидимостьЭлементаФормы(Элементы.УказатьСерии, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.УказатьХарактеристику, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ТекущийТоварСерияПартия, Ложь);
	
	РазрешеноИзменятьЦену = НЕ (СписокРолейПользователя.НайтиПоЗначению("ПравоИзменятьЦенуРМК") = Неопределено);
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварЦенаИзКарточки, РазрешеноИзменятьЦену);
	
	#Область ОплатаQRКодом_ОбнулениеПараметров
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСБП, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаЮКасса, Истина);
	#КонецОбласти
	
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатомНСПК, ИспользоватьОплатуСертификатамиНСПК);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВидОплатыНСПК, ИспользоватьОплатуСертификатамиНСПК);
	УстановитьВидимостьКнопкиМирТовары(Элементы, ИспользоватьОплатуСертификатамиНСПК);
	УстановитьВидимостьЭлементаФормы(Элементы.ПробитьЧек, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКнопкиРасчетаСкидок, Ложь);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаЗаменаТоваров, Ложь);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКартой, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКоманднаяПанельКарта, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаНаличными, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаВРассрочку, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.Предоплата, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ЗачетАванса, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаКредитом, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаБонусами, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.Безнал, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаКартой, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаБезнал, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаНал, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаБонусами, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.Каталог, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.НайтиВЧеке, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.УдалитьЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРедактированияСтрокиКорзины, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ПанельИзбранныхТоваров, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОткрытьПанельИзбранныхТоваров, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОткрытьПлиточныйИнтерфейсКаталога, Истина);
	
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.УправляемыеСкидки, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварУправляемая, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварСкидка, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварСумма, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварПроцент, Истина);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.РассчитатьСкидки, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОтменаРасчетаСкидок, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаПромокоды, Истина);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаКартой, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаНал, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаБезнал, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаВРассрочку, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаПредоплата, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаЗачетАванса, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВидОплатыЗачетАванса, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаКредитом, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаОплатаСертификатамиНСПК, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаСертификатом, Ложь);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьГруппыОперации(Элементы);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаТоваровКЗамене, Ложь);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаСертификатами, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаОплатаСертификатами, Ложь);
	
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаДобавлениеПродавца, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.СтраницаПродавецВыбран, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКнопкиОтменыВидовОплат, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ЗапроситьБалансСертификата, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ВернутьсяВРежимПодбораТовара, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ВвестиДанныеПокупателя, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОтправкаЧекаПочта, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ОтправкаЧекаТелефон, Истина);
	
	ТекущийПродавец = "";
	
	Если ЗавершатьСессиюКассираПослеПродажи Тогда
		СменитьКассираСервер();
	Иначе
		
		Если Объект.Товары.Количество() = 0 Тогда
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнфо, Ложь);
			Если РежимНачальнойСтраницы = 1 Тогда
				ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
			Иначе
				ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПустая);
			КонецЕсли;
			ПоказатьСообщениеЗавершенияОплаты(ПараметрыЗавершения);
		Иначе
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		КонецЕсли;
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаЛевоОбщая);
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПанельУправленияЧеком);
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
		
	КонецЕсли;
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьРежимРаботыПустойЧек(ЭтотОбъект);
	
	Если ДанныеПакета = Неопределено Или РежимКассыСамообслуживания Тогда
		Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКЗаставкаПродажа;
	Иначе
		Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКQRПакет;
	КонецЕсли;
	Элементы.ДекорацияТекстПустойСтраницы.Заголовок = ТекстПустойСтраницыВРежимеПродажи(РежимКассыСамообслуживания);
	ТекущийТоварНаименование = "";
	ТекущийКодАртикул = "";
	Элементы.ТекущийТоварПоставщик.Заголовок = "";
	
	Элементы.СуммаОплаченоНал.Подсказка = НСтр("ru = 'Наличные'");
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПодсказкаНаличныеВКассеОплатаНаличными, Ложь);
	
	Элементы.СуммаОплаченоБН.Подсказка = НСтр("ru = 'Карта'");
	Элементы.СуммаОплаченоБонусами.Подсказка = НСтр("ru = 'Бонусы'");
	Элементы.Предоплата.Заголовок = НСтр("ru = 'Предоплата'");
	Элементы.ЗачетАванса.Заголовок = НСтр("ru = 'Зачет аванса'");
	ИзменитьКартинкуВводПокупателяБезКонтекста(ЭтотОбъект);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнформацияПокупателя, Ложь);
	
	Элементы.ДекорацияКоличествоЧеков.Заголовок = НСтр("ru = ''");
	ПробитыеЧеки.Очистить();
	ОжидаемоеКоличествоЧеков = 0;
	ЭтоВозвратБезОснования = Ложь;
	ВыбранБанковскийПлатеж = Ложь;
	ЭтоОплатаВстречнымПредоставлением = Ложь;
	ЕстьОплатаВстречнымПредоставлением = Ложь;
	ПриемАванса = Ложь;
	ПриемАвансаПоЗаказу = Ложь;
	ОтложенныйЧекПолностьюОплачен = Ложь;
	ПредупреждениеОПродукцииБезОплатыБонусамиПоказано = Ложь;
	
	ВыборСерии = Неопределено;
	ВыборСерииИдентификатор = Неопределено;
	ВыборКодаМаркировки = Неопределено;
	ЧекККМВОбработке = Неопределено;
	ЧекККМПродажа = Неопределено;
	РежимВыбораПодарка = Ложь;
	РежимВыбораПодарочногоСертификата = Ложь;
	ЭтоСерийныйПодарочныйСертификат = Ложь;
	ИдентификаторКорзиныНСПК = Неопределено;
	
	ОбщегоНазначенияРМКПереопределяемый.ОчиститьОтложенныйЧек(ОтложенныйЧек);
	ОсобенностиУчетаВозвращаемойМаркируемойПродукции = Новый СписокЗначений;
	
	ОчиститьДанныеПокупателя(); 
	ОчиститьТаблицуПлатежныхКарт();
	ОчиститьТаблицуПодарочныхСертификатов();
	ОчиститьТаблицуПримененныхПромокодов();
	ОчиститьТаблицуВыбранныхУправляемыхСкидок();
	
	ТаблицаСкидкиНаценки.Очистить();
	ТаблицаБонусныеБаллы.Очистить();
	ТаблицаБонусныеБаллыЧекаПродажи.Очистить();
	
	ПараметрыВводаКодаSMS = Неопределено;
	Элементы.ОплатитьБонусами.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	СписокДобавленныхСтрокТоваров.Очистить();
	ТаблицаСообщений.Очистить();
	ПодтвержденныеВидыКонтроляВЧеке.Очистить();
	ПодтвержденныйВозрастПокупателя = 0;
	
	УстановитьВидимостьЭлементаФормы(Элементы.РаспечататьЗаявлениеНаВозврат, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаРазделВыдачиНаличных, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыдачиНаличных, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаРазделДенежныйЯщик, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ПанельВводаНаличных, Ложь);
	СуммаНаличныхКВыдаче = 0;
	
	ПечататьБумажныйЧек = ПроверитьВозможностьПечатиБумажногоЧека(ТекущаяНастройкаРМК);
	
	ПараметрыТекущейОперации = Неопределено;
	ПараметрыИнфоОшибки = Неопределено;
	
	Для Каждого СтрокаКассыККМ Из ТаблицаКассККМОрганизаций Цикл
		// 0-нужен контроль, 1-результат отрицательный, 2-пропускать контроль
		СтрокаКассыККМ.СтатусКонтроляВремениНачалаСмены = 0;
	КонецЦикла;
	
	ТранзакцияПоКартеЗавершена = Ложь;
	ИгнорироватьЗапретПодбора = Ложь;
	
	КомментарийКЧеку = "";
	ТекущийКомментарийКЧеку = "";
	УстановитьИконкуКомментарияКЧеку(Элементы.ВвестиКомментарийКЧеку, КомментарийКЧеку);
	УстановитьДоступностьОплатыПлатежнымиСистемами(Элементы.ГруппаВидОплатыСБП, Элементы.ГруппаВидОплатыЮКасса, Истина);
	
	ОбщегоНазначенияРМКПереопределяемый.НастроитьФормуПриСозданииНовогоНабора(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КоличествоОтложенныхЧеков(СтруктураПараметров, ОтложенныйЧек)
	
	КоличествоЧеков = 0;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьКоличествоОтложенныхЧеков(СтруктураПараметров,
		ОтложенныйЧек,
		КоличествоЧеков);
	
	Возврат КоличествоЧеков;
	
КонецФункции

&НаКлиенте
Процедура ВыборОтложенногоЧекаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЕстьСвойство(Результат, "ЧекККМ") Тогда
		
		ОтложенныйЧек = Результат.ЧекККМ;
		ПродолжитьЧекКлиент();
		
		ВывестиИнформациюНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.СписокТоваров);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЧекКлиент(ОтменитьРежимПлитки = Ложь)
	
	ПараметрыОперации = ИнтерфейсРМКСлужебныйКлиентСервер.ПодготовитьПараметрыОперацииНаРабочемМестеКассира(ЭтотОбъект);
	ПараметрыОперации.РегистрируемаяОперация
		= ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ОперацииРабочегоМестаКассира.УдалениеЧека");
	ПараметрыОперации.Сумма = Объект.Товары.Итог("Сумма");
	
	ЗакрытьПанельNFC();
	
	Если ЗначениеЗаполнено(ОтложенныйЧек) Тогда
		АннулироватьЧек(ОтложенныйЧек);
	КонецЕсли;
	
	Если ККМПоддерживаетПроверкуКодовМаркировки
		И ЗначениеЗаполнено(ИдентификаторТекущейСессииПроверкиМарок)
		И ВозможноЗакрытьСессиюРегистрацииМарок(Истина) Тогда
		ЗакрытьСессиюРегистрацииМарок();
	КонецЕсли;
	
	ПереключатьсяВРежимПлитки = ОсновнойПодборПлиточный И Не ОтменитьРежимПлитки;
	РазблокироватьОбъектСервераЛояльности("clientbonuses");
	СписатьРазблокироватьПодарочныеСертификаты();
	ОчиститьДанныеПромокодов(Истина);
	ОчиститьТаблицуПлатежныхКарт();
	ТаблицаПодарков.Очистить();
	НастроитьВидимостьВводаПромокода(Истина);
	ВывестиИнформациюНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.Аннулирование);
	ИнициализироватьИнтерфейсРабочегоМестаКассира();
	СформироватьЗаголовок(НСтр("ru='Продажа'"));
	ТекущаяОперация = "";
	
	Если РегистрироватьДействияКассира(ЭтотОбъект) Тогда
		ЗаписатьОперациюНаРабочемМестеКассира(ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЧекКлиент()
	
	ПродолжитьЧекКлиентЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЧекКлиентЗавершение()
	
	ПродолжитьЧек(КэшКонтроляПродаж);
	ЭтапыКонтроляПродаж = ИнтерфейсРМКСлужебныйКлиент.ЭтапыКонтроляПродаж();
	ИнтерфейсРМКСлужебныйКлиент.ВыполнитьПроверкиКонтроляПродаж(ЭтотОбъект, ЭтапыКонтроляПродаж.ОткрытиеЧека);
	ИнтерфейсРМКСлужебныйКлиент.ОчиститьРезультатКонтроляПродаж(РезультатКонтроляПродаж);
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеЛояльностиЗаполнены(ЭтотОбъект) Тогда
		Если (Не ЗначениеЗаполнено(Объект.ДисконтнаяКарта))
				И ИнтерфейсРМКСлужебныйКлиентСервер.ПараметрыКартыЗаполнены(ПараметрыКартыЛояльности) Тогда
			ДозаполнитьДанныеКартыССервераЛояльности();
		Иначе
			ЗавершитьВводШтрихкодаНайденаКарта(КодВозвратаДиалога.Нет);
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
		НастроитьФормуВРежимПродажаПоЗаказу();
	КонецЕсли;
	Если ТаблицаСкидкиНаценки.Количество() > 0 Тогда
		СкидкиРассчитаны = Истина;
	КонецЕсли;
	Если Объект.Товары.Количество() > 0 Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнфо, Истина);
	КонецЕсли;
	
	// Проверим, есть ли строки с марками, требующими запроса на ККТ.
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("НеобходимостьВводаКодаМаркировки", Истина);
	МаркируемыеТовары = Объект.Товары.НайтиСтроки(ПараметрыПоиска);
	
	СтрокиСКодомМаркировки = Новый Массив;
	КодыДляПроверки = Новый Соответствие;
	Для Каждого СтрокаТовара Из МаркируемыеТовары Цикл
		Если ЗначениеЗаполнено(СтрокаТовара.КодМаркировки) Тогда
			СтрокиСКодомМаркировки.Добавить(СтрокаТовара);
			КодыДляПроверки.Вставить(СтрокаТовара, СтрокаТовара.КодМаркировки);
			СтрокаТовара.КодМаркировки = "";
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокиСКодомМаркировки.Количество() Тогда
		ПараметрыПроверкиКодовМаркировки = Новый Структура;
		ПараметрыПроверкиКодовМаркировки.Вставить("ЕстьОшибки", Ложь);
		ПараметрыПроверкиКодовМаркировки.Вставить("КодыДляПроверки", КодыДляПроверки);
		ПараметрыПроверкиКодовМаркировки.Вставить("СтрокиСКодомМаркировки", СтрокиСКодомМаркировки);
		ПроверитьКодМаркировкиПриПродолженииЧека();
	Иначе
		ПродолжитьЧекКлиентПослеПроверкиКодовМаркировки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРолейПользователя()
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьТаблицуРолейПользователя(ЭтотОбъект);
	ИнтеграцияСПлатежнымиСистемамиРМКПереопределяемый.ЗаполнитьТаблицуРолейПользователя(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьПравоНаДействие(НаименованиеРоли = "")
	Возврат НЕ СписокРолейПользователя.НайтиПоЗначению(НаименованиеРоли) = Неопределено;
КонецФункции

&НаСервере
Процедура ЗаменитьПраваИВыполнитьТребуемоеДействие(Штрихкод)
	
	ВыполнитьПоискКассира(Штрихкод);
	ЗаполнитьТаблицуРолейПользователя();
	ВыполнитьТекущуюОперацию();
	ВыбратьПользователяДоЗаменыПрав();
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьПользователяДоЗаменыПрав()
	
	Объект.ПользовательБД = ?(ЗначениеЗаполнено(ПользовательДоЗаменыПрав),
		ПользовательДоЗаменыПрав,
		Объект.ПользовательБД);
		
	Объект.Кассир = ?(ЗначениеЗаполнено(КассирДоЗаменыПрав),
		КассирДоЗаменыПрав,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПользовательБД, "ФизическоеЛицо"));
		
	ЗаполнитьТаблицуРолейПользователя();
	КодДляЗаменыПрав = "";
	
КонецПроцедуры

&НаСервере
Функция ОперацииВыполняемыеПоУмолчанию()
	
	ОперацииВыполненныеПоУмолчанию = Новый Массив;
	ОперацииВыполненныеПоУмолчанию.Добавить("ВводВесаТовара");
	ОперацииВыполненныеПоУмолчанию.Добавить("ВыборПриПоискеПоШтрихкодуРМК");
	ОперацииВыполненныеПоУмолчанию.Добавить("ПодтверждениеВозрастаРМК");
	ОперацииВыполненныеПоУмолчанию.Добавить("ОбработкаЗапретаПродажРМК");
	ОперацииВыполненныеПоУмолчанию.Добавить("ВыборСерииРМК");
	ОперацииВыполненныеПоУмолчанию.Добавить("РучноеПодтверждениеМаркиРМК");
	ОперацииВыполненныеПоУмолчанию.Добавить("ПоказатьНастройки");
	ОперацииВыполненныеПоУмолчанию.Добавить("ОткрытиеСлужебныхДействийКСО");
	
	Возврат ОперацииВыполненныеПоУмолчанию;
	
КонецФункции

&НаСервере
Процедура ВыполнитьТекущуюОперацию()
	
	Если ТекущаяОперация = "" Тогда
		Возврат;
	КонецЕсли;
	
	ОперацииВыполняемыеПоУмолчанию = ОперацииВыполняемыеПоУмолчанию();
	ТекущаяОперацияВыполнена = Ложь;
	
	Если ТекущаяОперация = "ЧекНаВозвратРМК" Или ТекущаяОперация = "ВозвратБезЧекаРМК" Тогда
		
		Если Не СписокРолейПользователя.НайтиПоЗначению("ПравоЧекНаВозвратРМК") = Неопределено Тогда
			ТекущаяОперацияВыполнена = Истина;
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "ЧекКоррекцииРМК" Тогда
		
		Если Не СписокРолейПользователя.НайтиПоЗначению("ПравоЧекКоррекцииРМК") = Неопределено Тогда
			ТекущаяОперацияВыполнена = Истина;
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "УдалитьСтрокуРМК" Тогда
		
		Если НЕ СписокРолейПользователя.НайтиПоЗначению("ПравоУдалитьСтрокуРМК") = Неопределено Тогда
			
			СуммаДляРегистрации = Объект.Товары.Итог("Сумма");
			ТекущаяОперацияВыполнена = Истина;
			Строка = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
			УдалитьСтрокуТовара(ЭтотОбъект, Строка, Объект.Товары);
			Если Объект.Товары.Количество() = 0 Тогда
				ЗарегистрироватьУдалениеЧека(СуммаДляРегистрации);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "УдалитьЧекРМК" Тогда
		
		Если НЕ СписокРолейПользователя.НайтиПоЗначению("ПравоУдалитьЧекРМК") = Неопределено Тогда
			
			СуммаДляРегистрации = Объект.Товары.Итог("Сумма");
			ТекущаяОперацияВыполнена = Истина;
			Если ЗначениеЗаполнено(ОтложенныйЧек) Тогда
				АннулироватьЧек(ОтложенныйЧек);
			КонецЕсли;
			
			СоздатьНовыйНабор();
			ЗарегистрироватьУдалениеЧека(СуммаДляРегистрации);
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "ОтложитьЧекРМК" Тогда
		
		Если Не СписокРолейПользователя.НайтиПоЗначению("ПравоОтложитьЧекРМК") = Неопределено Тогда
			ТекущаяОперацияВыполнена = Истина;
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "ПродолжитьЧекРМК" Или ТекущаяОперация = "ПодтверждениеТовараКСО" Тогда
		
		Если Не СписокРолейПользователя.НайтиПоЗначению("ПравоПродолжитьЧекРМК") = Неопределено Тогда
			ТекущаяОперацияВыполнена = Истина;
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "РедактироватьКартуРМК" Тогда
		
		Если НЕ СписокРолейПользователя.НайтиПоЗначению("ПравоРедактироватьКартуРМК") = Неопределено Тогда
			
			ТекущаяОперацияВыполнена = Истина;
			НомерКартыДоИзменения = НайденнаяКартаНомер;
			ИзменитьДоступностьПолейНайденнойКарты();
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "ПодтвердитьОплатуПлатежнойСистемой" Тогда
		
		Если НЕ СписокРолейПользователя.
			НайтиПоЗначению("РазрешитьОплатуВозвратБезПодтвержденияОтПлатежнойСистемы") = Неопределено Тогда
			
			ТекущаяОперацияВыполнена = Истина;
			ПлатежнаяСистема_НоваяЗаявка.БылоПодтверждениеКодомАдминистратора = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "ИзменениеКоличестваВМеньшуюСторону"
			Или ТекущаяОперация = "УменьшениеКоличестваНаЕдиницу" Тогда
		
		Если НЕ СписокРолейПользователя.НайтиПоЗначению("ПравоУдалитьСтрокуРМК") = Неопределено Тогда
			ТекущаяОперацияВыполнена = Истина;
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "ПродолжитьБезРасчетаСкидок" Тогда
		
		Если НЕ СписокРолейПользователя.НайтиПоЗначению("ПравоУдалитьЧекРМК") = Неопределено Тогда
			ТекущаяОперацияВыполнена = Истина;
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "ИзменениеОстаткаЧастичноеВыбытиеРМК" Тогда
		
		Если НЕ СписокРолейПользователя.НайтиПоЗначению("ПравоИзменятьОстатокЧастичноеВыбытиеРМК") = Неопределено Тогда
			ТекущаяОперацияВыполнена = Истина;
		КонецЕсли;
		
	Иначе
		ТекущаяОперацияВыполнена = (Не ОперацииВыполняемыеПоУмолчанию.Найти(ТекущаяОперация) = Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммыПослеУдаленияСтроки()
	
	ПересчитатьИтогиТабличнойЧастиТовары();
	РассчитатьСуммуОплатыБонусами();
	
	Если Объект.Товары.Количество() = 0 И НЕ ЭтоЧекКоррекции Тогда
		
		Если ЗначениеЗаполнено(ОтложенныйЧек) Тогда
			АннулироватьЧек(ОтложенныйЧек);
		КонецЕсли;
		
		ПереключатьсяВРежимПлитки = ОсновнойПодборПлиточный;
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнфо, Ложь);
		Если РежимНачальнойСтраницы = 1 Тогда
			НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Ложь);
		Иначе
			НастроитьЭлементыФормы(Элементы.СтраницаПустая, Ложь);
		КонецЕсли;
		СформироватьЗаголовок(НСтр("ru='Продажа'"));
		РазблокироватьОбъектСервераЛояльности("clientbonuses");
		СписатьРазблокироватьПодарочныеСертификаты();
		ИнициализироватьИнтерфейсРабочегоМестаКассира();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЧекНаВозврат()
	
	ВывестиИнформациюНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.ВозвратТовара);
	СформироватьЗаголовок(НСтр("ru='Возврат'"));
	
	КассыККМИОрганизации = ПодключенныеКассыККМИОрганизации();
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("МассивКассККМ", КассыККМИОрганизации.МассивКассККМ);
	ПараметрыОткрытия.Вставить("МассивОрганизаций", КассыККМИОрганизации.МассивОрганизаций);
	ПараметрыОткрытия.Вставить("ТорговыйОбъект", Объект.ТорговыйОбъект);
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Чеки для возврата'"));
	ПараметрыОткрытия.Вставить("ВозвратПродажи", Истина);
	ПараметрыОткрытия.Вставить("ВыводитьКомментарийКЧеку", ВыводитьКомментарийКЧеку);
	ПараметрыОткрытия.Вставить("СочетаниеКлавишВозвратБезЧека", Элементы.КомандаВозвратБезЧека.СочетаниеКлавиш);
	
	Объект.ВидОперации = ОбщегоНазначенияРМККлиент.ВидТекущейОперации(Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборЧекаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораЧека",
		ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Функция ПодключенныеКассыККМИОрганизации()
	
	МассивКассККМ = Новый Массив;
	МассивОрганизаций = Новый Массив;
	
	Для Каждого СтрокаКасс Из ТаблицаКассККМОрганизаций Цикл
		
		МассивКассККМ.Добавить(СтрокаКасс.КассаККМ);
		МассивОрганизаций.Добавить(СтрокаКасс.Организация);
		
	КонецЦикла;
	
	СтруктураКассККМИОрганизаций = Новый Структура();
	СтруктураКассККМИОрганизаций.Вставить("МассивКассККМ", МассивКассККМ);
	СтруктураКассККМИОрганизаций.Вставить("МассивОрганизаций", МассивОрганизаций);
	
	Возврат СтруктураКассККМИОрганизаций;
	
КонецФункции

&НаКлиенте
Процедура НайтиТоварВЧеке(Штрихкод)
	
	Если НЕ ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат;
	КонецЕсли;
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	РезультатПоиска = ВыполнитьПоискИВыделениеТовараВЧеке(Штрихкод);
	
	Если ОткрытаСтраницаНайтиТоварВЧеке() Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево,
			(Не ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатой(ЭтотОбъект)));
		ШтрихкодДляПоиска = НСтр("ru = ''");
	КонецЕсли;
	
	Если Не РезультатПоиска.ТоварНайден Тогда
		ВывестиПредупреждениеОбОтсутствииТовараВчеке(РезультатПоиска.ЭтоКодМаркировки)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиПредупреждениеОбОтсутствииТовараВчеке(ЭтоКодМаркировки)
	
	ТекстЗаголовка = НСтр("ru = 'Товар в чеке не найден'");
	ТипОбъектаПоиска = ?(ЭтоКодМаркировки, НСтр("ru = 'коду маркировки'"), НСтр("ru = 'штрихкоду'"));
	ТекстОшибки = СтрШаблон(НСтр("ru = 'По указанному %1 товар в чеке не найден'"), ТипОбъектаПоиска);
	
	ПараметрыОшибки = Новый Структура;
	ПараметрыОшибки.Вставить("НеВызыватьЗаменуПрав", Истина);
	ПараметрыОшибки.Вставить("ЭтоПредупреждение", Истина);
	ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки, ПараметрыОшибки);
	УстановитьДоступностьЭлементаФормы(Элементы.НайтиВЧеке, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.НайтиПоШтрихкодуКСО, Ложь);
	
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьПоискИВыделениеТовараВЧеке(Штрихкод)
	
	РезультатПоиска = Новый Структура("ТоварНайден,ЭтоКодМаркировки", Ложь, Ложь);
	
	СтрокиТоваров = Элементы.Товары; 
	СтрокиТоваров.ВыделенныеСтроки.Очистить();
	
	МассивСтрокШтрихкод = Объект.Товары.НайтиСтроки(Новый Структура("Штрихкод", Штрихкод));
	ВыделитьОтобранныеСтроки(СтрокиТоваров, МассивСтрокШтрихкод);
	
	МассивСтрокКодМаркировки = Объект.Товары.НайтиСтроки(Новый Структура("КодМаркировки", Штрихкод));
	ВыделитьОтобранныеСтроки(СтрокиТоваров, МассивСтрокКодМаркировки);
	
	ФильтрПоискаПоШтрихкоду = Новый Структура;
	ФильтрПоискаПоШтрихкоду.Вставить("Номенклатура");
	
	СтруктураПараметровКлиента = ДанныеПоискаПоШтрихкодуСервер(Штрихкод);
	РезультатПоиска.ЭтоКодМаркировки = СтруктураПараметровКлиента.ПараметрыШтрихкода.ЭтоКодМаркировки;
	
	Если СтруктураПараметровКлиента.ЗначенияПоиска.Количество() > 0
		И Не СтруктураПараметровКлиента.ПараметрыШтрихкода.ЭтоКодМаркировки Тогда
		Для Каждого СтрокаПоШтрихкоду Из СтруктураПараметровКлиента.ЗначенияПоиска Цикл
			
			МассивСтрокПоНоменклатуре = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаПоШтрихкоду.Владелец));
			ВыделитьОтобранныеСтроки(СтрокиТоваров, МассивСтрокПоНоменклатуре);
			
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиТоваров.ВыделенныеСтроки.Количество() = 0 И РезультатПоиска.ЭтоКодМаркировки Тогда
		НормализованныйКодМаркировки = ПолучитьНормализованныйКодМаркировки(Штрихкод);
		МассивСтрокКодМаркировки = Объект.Товары.НайтиСтроки(Новый Структура("КодМаркировки", НормализованныйКодМаркировки));
		ВыделитьОтобранныеСтроки(СтрокиТоваров, МассивСтрокКодМаркировки);
	КонецЕсли;
	
	РезультатПоиска.ТоварНайден = (СтрокиТоваров.ВыделенныеСтроки.Количество() > 0);
	Возврат РезультатПоиска;
	
КонецФункции

&НаКлиенте
Процедура СформироватьТекстВводМарки()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.ЭтоНабор Тогда
		ПредставлениеТовара = ТекущаяСтрока.ПредставлениеНоменклатураХарактеристика;
	Иначе
		ПредставлениеТовара = ТекущийТоварНаименование;
	КонецЕсли;
	
	ТекстДекорации = СтрШаблон("%1%2%3",
		НСтр("ru='Отсканируйте марку'"),
		Символы.ПС,
		ПредставлениеТовара);
	
	Если Элементы.ДекорацияТекстВводМарки.Заголовок = ТекстДекорации Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ДекорацияТекстВводМарки.Заголовок = ТекстДекорации;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьВводаМарки(ПараметрыДляОбработкиШтрихкода)
	
	Если ОткрытСлойОжиданияМарки() Тогда
		
		Если НЕ Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		
			ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
			ПараметрыДляОбработкиШтрихкода.Вставить("ТекущаяНоменклатура", ТекущаяСтрока.Номенклатура);
			ПараметрыДляОбработкиШтрихкода.Вставить("ТекущаяХарактеристика", ТекущаяСтрока.Характеристика);
			ПараметрыДляОбработкиШтрихкода.Вставить("НомерСтроки", ТекущаяСтрока.ПолучитьИдентификатор());
			ПараметрыДляОбработкиШтрихкода.Вставить("НеобходимоВвестиМарку");
			ПараметрыДляОбработкиШтрихкода.Вставить("ТекущаяНоменклатураОсобенностьУчета", ТекущаяСтрока.ОсобенностьУчета);
			Если ТекущаяСтрока.ОсобенностьУчета = ОбщегоНазначенияРМККлиент.ОсобенностьУчетаАлкоголь() Тогда
				ПараметрыДляОбработкиШтрихкода.Вставить("НеобходимоВвестиМаркуАлкоголя", Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварБезМарки()
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.НеобходимостьВводаКодаМаркировки = Ложь;
	
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
	ОжидатьВводМарки = ТекущиеДанные.НеобходимостьВводаКодаМаркировки;
	ОграничитьДоступностьЭлементовПриОжиданииМарки(ОжидатьВводМарки);
	ОбщегоНазначенияРМККлиентСервер.УстановитьНомерКартинкиСтрокиТовара(ТекущиеДанные);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ОсобенностьУчета)
		И (ОсобенностиУчетаВозвращаемойМаркируемойПродукции.НайтиПоЗначению(ТекущиеДанные.ОсобенностьУчета)
			= Неопределено) Тогда
				ОсобенностиУчетаВозвращаемойМаркируемойПродукции.Добавить(ТекущиеДанные.ОсобенностьУчета);
	КонецЕсли;
	
	УстановитьФокусНаТовареТребующемВводаМарки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСменуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СформироватьЗаголовок(НСтр("ru='Продажа'"));
	Элементы.ДекорацияВыемка.Картинка = БиблиотекаКартинок.РМКЗаставкаВыемкаВнесение;
	Элементы.ДекорацияТекстИнфоВыемка.Заголовок = НСтр("ru='Чтобы начать продажу, выйдите из процесса выемки'");
	Элементы.ОтменаВыемки.Заголовок = НСтр("ru=''");
	
	ПредлагатьОткрытьСмену = Истина;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ПредлагатьОткрытьСмену") Тогда
		ПредлагатьОткрытьСмену = ДополнительныеПараметры.ПредлагатьОткрытьСмену;
	КонецЕсли;
	
	ЗакрытиеСменыПереопределено = Ложь;
	ОбщегоНазначенияРМККлиентПереопределяемый.ЗакрытьСмену(ЭтотОбъект, ЗакрытиеСменыПереопределено);
	
	Если ЗакрытиеСменыПереопределено Тогда
		
		Если ТаблицаКассККМОрганизаций.Количество() = 1 Тогда
			
			Если Не ФизЛицоПользователяЗаполнено Тогда
				ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаВводКассира);
				УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
				ВывестиИнформациюНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.Сервис);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	ЗакрытьСменуСтандартно(ПредлагатьОткрытьСмену, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСменуСтандартно(ПредлагатьОткрытьСмену, ДополнительныеПараметры)
	
	ПараметрыЗавершения = Новый Структура();
	ПараметрыЗавершения.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	ПараметрыЗавершения.Вставить("ПредыдущаяСтраница", Элементы.Страницы.ТекущаяСтраница);
	
	Элементы.ЗаголовокОжидания.Заголовок = НСтр("ru='Выполняется закрытие смены.'");
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОжидание);
	
	ОповещениеЗакрытияСменыСтандартно = Новый ОписаниеОповещения("ЗакрытьСменуСверкаИтогов", ЭтотОбъект,
		ПараметрыЗавершения);
	ВыполнитьОбработкуОповещения(ОповещениеЗакрытияСменыСтандартно, ПредлагатьОткрытьСмену);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСменуСтандартноЗавершение(ПредлагатьОткрытьСмену, ПараметрыЗавершения) Экспорт
	
	ВыполнитьСверкуИтогов(Объект.Организация, Истина);
	
	СтруктураДляПроверкиКассовойСмены = СформироватьСтруктуруДляПроверкиКассовойСмены();
	ЗаархивироватьЧекиККМ(СтруктураДляПроверкиКассовойСмены);
	
	Если СтруктураДляПроверкиКассовойСмены.Отказ Тогда
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(ПараметрыЗавершения.ПредыдущаяСтраница);
		ПоказатьПредупреждение(, СтруктураДляПроверкиКассовойСмены.ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОперации = МенеджерОборудованияРМККлиентСервер.ПараметрыОткрытияЗакрытияСмены();
	Если ТаблицаКассККМОрганизаций.Количество() = 1 Тогда
		ПараметрыОперации.КассаККМ = Объект.КассаККМ;
	Иначе
		ПараметрыОперации.КассаККМ = КассаККМДляОперации;
	КонецЕсли;
	ДополнительныеПараметрыДляПечати = ДополнительныеПараметрыОткрытияЗакрытияСмены();
	ДополнительныеПараметрыДляПечати.Пользователь = Объект.ПользовательБД;
	ДополнительныеПараметрыДляПечати.Кассир = Объект.Кассир;
	ДополнительныеПараметрыДляПечати.КассаККМ = Объект.КассаККМ;
	ДополнительныеПараметрыДляПечати.ВариантЗаполненияМестаРасчетов = ВариантЗаполненияМестаРасчетов;
	
	ЗаполнитьПараметрыКассираДляПечати(ПараметрыОперации, ДополнительныеПараметрыДляПечати);
	
	ПараметрыПродолженияЗакрытия = Новый Структура();
	ПараметрыПродолженияЗакрытия.Вставить("ПредлагатьОткрытьСмену", ПредлагатьОткрытьСмену);
	ПараметрыПродолженияЗакрытия.Вставить("ПредыдущаяСтраница", ПараметрыЗавершения.ПредыдущаяСтраница);
	Оповещение = Новый ОписаниеОповещения("ПродолжитьЗакрытиеСменыОкончаниеФискальныйОтчетПечатьЗавершение",
		ЭтотОбъект,
		ПараметрыПродолженияЗакрытия);
		
	МенеджерОборудованияРМККлиент.НачатьЗакрытиеСменыНаФискальномУстройстве(Оповещение,
		УникальныйИдентификатор, ПодключаемоеОборудование, ПараметрыОперации,
		ПараметрыЗавершения.ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗаархивироватьЧекиККМ(СтруктураПараметров)
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаархивироватьЧекиККМ(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьБумажногоЧекаВместоЭлектронногоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТекущийЧекЭлектронный = Ложь;
		ПечататьБумажныйЧек = Истина;
		ЗакрытьФормуДанныеПокупателяКлиент();
		НачатьПечатьЧека();
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'Чек не был пробит. Пожалуйста, повторите пробитие чека.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискКассираКлиент(Штрихкод)
	
	НайтиКассираИПерезаполнитьПрава(Штрихкод);
	Если Не ЗначениеЗаполнено(Объект.Кассир) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяОперация = "ЧекНаВозвратРМК" Тогда
		
		Если НЕ СписокРолейПользователя.НайтиПоЗначению("ПравоЧекНаВозвратРМК") = Неопределено Тогда
			
			ОткрытьОбщуюСтраницу(Истина);
			ВыбратьЧекНаВозврат();
			СформироватьЗаголовокВводКассира();
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "ВозвратБезЧекаРМК" Тогда
		
		Если НЕ СписокРолейПользователя.НайтиПоЗначению("ПравоЧекНаВозвратРМК") = Неопределено Тогда
			
			ОткрытьОбщуюСтраницу(Истина);
			ПереключитьФормуВРежимВозвратБезЧека();
			СформироватьЗаголовокВводКассира();
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяОперация = "ЧекКоррекцииРМК" Тогда
		
		Если НЕ СписокРолейПользователя.НайтиПоЗначению("ПравоЧекКоррекцииРМК") = Неопределено Тогда
			
			ОткрытьОбщуюСтраницу(Истина);
			ВыбратьЧекКоррекции();
			СформироватьЗаголовокВводКассира();
			
		КонецЕсли;
		
	Иначе
		ОткрытьОбщуюСтраницу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗакрытиеСменыОкончаниеФискальныйОтчетПечатьЗавершение(РезультатВыполнения,
	ПараметрыВыполнения) Экспорт

	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(ПараметрыВыполнения.ПредыдущаяСтраница);
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И НЕ РезультатВыполнения.Результат Тогда
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучениеТекущегоСостоянияККТПриЗакрытии", ЭтотОбъект);
		МенеджерОборудованияРМККлиент.НачатьПолучениеТекущегоСостоянияФискальногоУстройства(
			ОповещениеОЗавершении, УникальныйИдентификатор, РезультатВыполнения.ИдентификаторУстройства);
		
		ТекстЗаголовка = НСтр("ru = 'При снятии отчета на фискальном регистраторе произошла ошибка.'");
		ТекстСообщения =
			СтрШаблон(НСтр("ru = '""%1""
				|Отчет на фискальном регистраторе не сформирован.'"), РезультатВыполнения.ОписаниеОшибки);
		
		ПоказатьПредупреждение(, ТекстСообщения, , ТекстЗаголовка);
		
	Иначе
		ИзменитьСостояниеКассовойСмены(ПараметрыВыполнения.ПредлагатьОткрытьСмену);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеКассовойСмены(ПредлагатьОткрытьСмену = Истина)
	
	ИзменитьСостояниеКассовойСменыВызовСервера();
	НастроитьСтраницуВыбораКассККМ();
	
	Если ТаблицаКассККМОрганизаций.Количество() > 1 Тогда
		ПриПереключенииКассыККМ();
	Иначе
		
		СменаОткрыта = Ложь;
		Если ТаблицаКассККМОрганизаций.Количество() = 1 Тогда
			СменаОткрыта = ЗначениеЗаполнено(ТаблицаКассККМОрганизаций[0].НачалоКассовойСмены);
		КонецЕсли;
		
		Если Не СменаОткрыта Тогда
			Если ФизЛицоПользователяЗаполнено Или ЗначениеЗаполнено(Объект.Кассир) Тогда
				Если ПредлагатьОткрытьСмену = Истина Тогда
					ПроверитьКассовуюСменуИНайтиКассира();
				КонецЕсли;
			Иначе	
				Объект.Кассир = Неопределено;
				ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаВводКассира);
				УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
				ВывестиИнформациюНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.Сервис);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыЗакрытияСменыПриАвтоматическойВыемке = ОбщегоНазначенияРМККлиент.ПараметрыЗакрытияСменыПриАвтоматическойВыемке();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуВТабличнуюЧасть(ДанныеТовара, ТекущийВыбор, НеобходимВводМаркировки = Ложь)
	
	НоваяСтрока = Объект.Товары.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеТовара);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущийВыбор);
	
	Если НЕ ИспользоватьВыборСкладаПриПродаже Тогда
		НоваяСтрока.ТорговыйОбъект = Объект.ТорговыйОбъект;
	КонецЕсли;
	
	Если РежимВыбораПодарка Тогда
		ВладелецПодарка = Неопределено;
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
		СтруктураОтбора.Вставить("Характеристика", НоваяСтрока.Характеристика);
		Если ЗначениеЗаполнено(НоваяСтрока.ВладелецПодарка) Тогда
			СтруктураОтбора.Вставить("ВладелецПодарка", НоваяСтрока.ВладелецПодарка);
		КонецЕсли;
		СтрокиПодарков = ТаблицаПодарков.НайтиСтроки(СтруктураОтбора);
		
		Если СтрокиПодарков.Количество() Тогда
			НоваяСтрока.Подарок = Истина;
			НоваяСтрока.ПроцентСкидкиНаценки = 100;
			Если ЗначениеЗаполнено(НоваяСтрока.ВладелецПодарка) Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиПодарков[0], "ВыводитьПодарокВЧек");
			Иначе
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиПодарков[0], "Количество, КоличествоУпаковок, ВыводитьПодарокВЧек, ВладелецПодарка");
			КонецЕсли;
			
			СкидкаВладельцаПодарка = СкидкаПоТекущемуВладельцуПодарка();
			СтрокиСкидкиПодарка = ТаблицаСкидкиНаценки.НайтиСтроки(Новый Структура("СкидкаНаценка", СкидкаВладельцаПодарка));
			Для Каждого СтрокаСкидкиПодарка Из СтрокиСкидкиПодарка Цикл
				СтрокаСкидкиПодарка.Сумма = СтрокиПодарков[0].Сумма;
			КонецЦикла;
		КонецЕсли;
		
		ОчиститьПодаркиПоТекущемуВладельцу(Ложь);
	КонецЕсли;
	
	Если НоваяСтрока.Подарок Тогда
		КоличествоТоваров = Объект.Товары.Количество();
		Если КоличествоТоваров > 0 Тогда
			СтрокаТаблицы = Объект.Товары[КоличествоТоваров - 2];
			НоваяСтрока.Продавец = СтрокаТаблицы.Продавец;
			НоваяСтрока.ПродавецПредставление = СтрокаТаблицы.ПродавецПредставление;
		КонецЕсли;
		НоваяСтрока.ПроцентСкидкиНаценки = 100;
		НоваяСтрока.СуммаАвтоматическойСкидки = НоваяСтрока.Цена * НоваяСтрока.КоличествоУпаковок;
		НоваяСтрока.СуммаБезСкидки= НоваяСтрока.Цена * НоваяСтрока.КоличествоУпаковок;
		НоваяСтрока.ОтображаетсяСкидкаПроцентом = Истина;
	КонецЕсли;
	
	НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	НоваяСтрока.НеобходимостьВводаКодаМаркировки = НеобходимВводМаркировки;
	
	Если ЭтоВнесениеПредоплатыПоЗаказу Или ЭтоОплатаРассрочки Или РежимЗаказа Тогда
		НоваяСтрока.НеобходимостьВводаКодаМаркировки = Ложь;
		НоваяСтрока.ПроверятьЗаполнениеСерий = Ложь;
		Если Не РежимЗаказа Тогда
			НоваяСтрока.НеобходимостьВводаСерии = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НоваяСтрока.ПоштучноеВыбытие Тогда
		НоваяСтрока.ЧастичноеВыбытиеВариантУчета = ДанныеТовара.ВариантЧастичногоВыбытия;
		НоваяСтрока.ЧастичноеВыбытиеНоменклатура = НоваяСтрока.Номенклатура;
		НоваяСтрока.ЧастичноеВыбытиеХарактеристика = НоваяСтрока.Характеристика;
		НоваяСтрока.ЧастичноеВыбытиеКоличество = НоваяСтрока.Количество;
	КонецЕсли;
	
	Отказ = Ложь;
	Если РучноеСопоставлениеТовара И ЗначениеЗаполнено(ДанныеДляРучногоСопоставления) Тогда
		ЗаполнитьДанныеРучногоСопоставления(НоваяСтрока, ДанныеТовара.ОсобенностьУчета, Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодМаркиВРаботе) Тогда
		НоваяСтрока.КодМаркировки = КодМаркиВРаботе;
	КонецЕсли;
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьОрганизациюПродажи(НоваяСтрока, ЭтотОбъект);
	Если НЕ ЗначениеЗаполнено(НоваяСтрока.Организация) Тогда
		НоваяСтрока.Организация = ОсновнаяОрганизация;
	Иначе
		
		ОтборПоОрганизации = Новый Структура("Организация", НоваяСтрока.Организация);
		КассыККМПоОрганизации = ТаблицаКассККМОрганизаций.НайтиСтроки(ОтборПоОрганизации);
		Если КассыККМПоОрганизации.Количество() = 0 Тогда
			НоваяСтрока.ОплатаНедоступна = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НоваяСтрока.СистемаНалогообложения) Тогда
		НоваяСтрока.СистемаНалогообложения = ОбщегоНазначенияРМК.СНОККТДляОрганизации(ЭтотОбъект, НоваяСтрока);
	КонецЕсли;
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьВозможностьОплатыЭС(НоваяСтрока, ЭтотОбъект);
	
	СтавкаНДС = ПродажиРМК.АктуальнаяСтавкаНДСДляТовара(Объект, НоваяСтрока, НоваяСтрока.СистемаНалогообложения);
	НоваяСтрока.СтавкаНДС = СтавкаНДС;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ПолучитьВес, НоваяСтрока.Весовой);
	
	ОбщегоНазначенияРМКПереопределяемый.СкорректироватьЦенуПодарочногоСертификата(ЭтотОбъект, НоваяСтрока);
	
	Если НЕ Отказ Тогда
		
		НоваяСтрока.ПредставлениеКодАртикул = ПолучитьПредставлениеКодАртикул(ДанныеТовара, ИспользоватьКод, ИспользоватьАртикул);
		
		ПредставлениеХарактеристики = "";
		Если ТекущийВыбор.Свойство("Характеристика") Тогда
			Если ЗначениеЗаполнено(ТекущийВыбор.Характеристика) Тогда
				ПредставлениеХарактеристики = " (" + Строка(ТекущийВыбор.Характеристика) + ")";
			КонецЕсли;
		КонецЕсли;
		
		ПредставлениеТовара = СтрШаблон("%1%2", ДанныеТовара.Наименование, ПредставлениеХарактеристики);
		НоваяСтрока.ПредставлениеНоменклатураХарактеристика = ПредставлениеТовара;
		ШтрихкодированиеРМК.ЗаполнитьПредставлениеЕдиницыИзмерения(НоваяСтрока);
		
		Если ЗначениеЗаполнено(НоваяСтрока.Упаковка) Тогда
			НоваяСтрока.ПредставлениеНоменклатураХарактеристика = СтрШаблон("%1 - %2", ПредставлениеТовара, НоваяСтрока.ПредставлениеЕдиницыИзмерения);
		КонецЕсли;
		
		ТекущийТоварКоличество = НоваяСтрока.КоличествоУпаковок;
		
		Элементы.Товары.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
		ДоступныРучныеСкидки = ДопускаетсяПрименениеСкидок И (Объект.Товары.Количество() > 0);
		
		Если Не РежимПлитки Тогда
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРучнаяСкидкаНаТовар, ДоступныРучныеСкидки);
			УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, ДоступныРучныеСкидки);
			УстановитьДоступностьЭлементаФормы(Элементы.УправляемыеСкидки, ОбщегоНазначенияРМК.ЭтоВидОперацииПродажа(Объект.ВидОперации));
			УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварУправляемая, ОбщегоНазначенияРМК.ЭтоВидОперацииПродажа(Объект.ВидОперации));
		КонецЕсли;
		
		ДобавленаНоваяСтрокаКорзины = Истина;
		
		ОбщегоНазначенияРМКПереопределяемый.ПереопределитьПараметрыЗаполненияСерийИПартий(НоваяСтрока, ЭтотОбъект);
		
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая Тогда
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		КонецЕсли;
		УстановитьТекущийЭлементКоличество(ЭтотОбъект);
		
	КонецЕсли;
	ДополнитьСтрокуТовараВычисляемымиДанными(НоваяСтрока);
	ПодготовитьИнтерфейсДобавленияТовараБезКонтрольнойМаркиНаСервере(НоваяСтрока);
	СписокДобавленныхСтрокТоваров.Добавить(НоваяСтрока.ПолучитьИдентификатор());
	Если ИспользоватьКассираКакПродавца Тогда
		ЗаполнитьПродавцаИзКассира(НоваяСтрока);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИзменитьСтрокуВТабличнойЧасти(НайденнаяСтрока, ТекущийВыбор)
	
	Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.ИдентификаторСтроки) Тогда
		НайденнаяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Если РучноеСопоставлениеТовара И ЗначениеЗаполнено(ДанныеДляРучногоСопоставления) Тогда
		Отказ = Ложь;
		ЗаполнитьДанныеРучногоСопоставления(НайденнаяСтрока, НайденнаяСтрока.ОсобенностьУчета, Отказ);
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
	КонецЕсли;
	
	ДобавленВесовойНефасованныйТовар = НайденнаяСтрока.Весовой И Не НайденнаяСтрока.Фасованный;
	Если Не ДобавленВесовойНефасованныйТовар Тогда
		
		НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + 1;
		НайденнаяСтрока.КоличествоУпаковок = НайденнаяСтрока.КоличествоУпаковок + 1;
		
	Иначе
		
		Если ТекущийВыбор.Свойство("Количество") Тогда
			НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + ТекущийВыбор.Количество;
		КонецЕсли;
		
		Если ТекущийВыбор.Свойство("КоличествоУпаковок") Тогда
			НайденнаяСтрока.КоличествоУпаковок = НайденнаяСтрока.КоличествоУпаковок + ТекущийВыбор.КоличествоУпаковок;
		КонецЕсли;
		
	КонецЕсли;
	
	ШтрихкодированиеРМК.ЗаполнитьПредставлениеЕдиницыИзмерения(НайденнаяСтрока);
	
	ТекущийТоварКоличество = НайденнаяСтрока.КоличествоУпаковок;
	
	Элементы.Товары.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
	
	УстановитьТекущийЭлементКоличество(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекущуюНастройкуРМК()
	
	Если НЕ ЗначениеЗаполнено(РабочееМесто)Тогда
		РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	КонецЕсли;
	ДоступноИзменениеНастройкиРМК = ПравоДоступа("Добавление", Метаданные.Справочники.НастройкиРабочегоМестаКассира);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиРабочегоМестаКассира.Ссылка КАК Ссылка,
	|	НастройкиРабочегоМестаКассира.ПечататьБумажныйЧек КАК ПечататьБумажныйЧек,
	|	НастройкиРабочегоМестаКассира.МаксимальныйПроцентРучнойСкидки КАК МаксимальныйПроцентРучнойСкидки,
	|	НастройкиРабочегоМестаКассира.ТочностьОкругления КАК ТочностьОкругления,
	|	НастройкиРабочегоМестаКассира.ОкруглятьПриПроизвольномВидеОплаты КАК ОкруглятьПриПроизвольномВидеОплаты,
	|	НастройкиРабочегоМестаКассира.ОкруглятьЧекВПользуПокупателяПострочно КАК ОкруглятьЧекВПользуПокупателяПострочно,
	|	НастройкиРабочегоМестаКассира.ОжидатьРезультатПроверкиМарок КАК ОжидатьРезультатПроверкиМарок,
	|	НастройкиРабочегоМестаКассира.ИспользоватьНовыйПодборТоваров КАК ИспользоватьНовыйПодборТоваров,
	|	НастройкиРабочегоМестаКассира.ЗакрыватьПодборПриВыбореТовара КАК ЗакрыватьПодборПриВыбореТовара,
	|	НастройкиРабочегоМестаКассира.ПоказыватьАртикулНоменклатуры КАК ПоказыватьАртикулНоменклатуры,
	|	НастройкиРабочегоМестаКассира.ПоказыватьКодНоменклатуры КАК ПоказыватьКодНоменклатуры,
	|	НастройкиРабочегоМестаКассира.ОтправлятьSMSКодПриЗаведенииКарты КАК ОтправлятьSMSКодПриЗаведенииКарты,
	|	НастройкиРабочегоМестаКассира.КонтролироватьЕМРЦ КАК КонтролироватьЕМРЦ,
	|	НастройкиРабочегоМестаКассира.ИспользоватьРежимСкупки КАК ИспользоватьРежимСкупки,
	|	НастройкиРабочегоМестаКассира.ВопросПоРасчетуСкидок КАК ВопросПоРасчетуСкидок,
	|	НастройкиРабочегоМестаКассира.РазрешитьВыборСклада КАК РазрешитьВыборСклада,
	|	НастройкиРабочегоМестаКассира.ВремяНачалаСмены КАК ВремяНачалаСмены,
	|	НастройкиРабочегоМестаКассира.ВариантЗаполненияМестаРасчетов КАК ВариантЗаполненияМестаРасчетов,
	|	НастройкиРабочегоМестаКассира.ВариантЗаполненияКассира КАК ВариантЗаполненияКассира,
	|	НастройкиРабочегоМестаКассира.ВыдаватьНаличныеНаКассе КАК ВыдаватьНаличныеНаКассе,
	|	НастройкиРабочегоМестаКассира.ЗавершатьСессиюКассираПослеПродажи КАК ЗавершатьСессиюКассираПослеПродажи,
	|	НастройкиРабочегоМестаКассира.ЗапускатьОбменИзИнтерфейсаРМК КАК ЗапускатьОбменИзИнтерфейсаРМК,
	|	НастройкиРабочегоМестаКассира.НаименованиеПользователяПриЗапросеПрав КАК НаименованиеПользователяПриЗапросеПрав,
	|	НастройкиРабочегоМестаКассира.СтруктураПлиточногоИнтерфейсаПодбора КАК СтруктураПлиточногоИнтерфейсаПодбора,
	|	НастройкиРабочегоМестаКассира.СпособФормированияТоварногоЧека КАК СпособФормированияТоварногоЧека,
	|	НастройкиРабочегоМестаКассира.ИспользоватьСтрокуБыстрогоДобавленияТовара КАК ИспользоватьБыстроеДобавлениеТовара,
	|	НастройкиРабочегоМестаКассира.ДобавлятьВсеТоварыОтдельнойСтрокой КАК ДобавлятьВсеТоварыОтдельнойСтрокой,
	|	НастройкиРабочегоМестаКассира.ОставлятьПоследнийЧекНаЭкране КАК ОставлятьПоследнийЧекНаЭкране,
	|	НастройкиРабочегоМестаКассира.ИспользоватьОплатуНаличными КАК ИспользоватьОплатуНаличными,
	|	НастройкиРабочегоМестаКассира.КонтролироватьОстатокНаличных КАК КонтролироватьОстатокНаличных,
	|	НастройкиРабочегоМестаКассира.ИспользоватьОплатуПлатежнымиСистемами КАК ИспользоватьОплатуПлатежнымиСистемами,
	|	НастройкиРабочегоМестаКассира.ИспользоватьОплатуБонусами КАК ИспользоватьОплатуБонусами,
	|	НастройкиРабочегоМестаКассира.ИспользоватьОплатуСертификатами КАК ИспользоватьОплатуСертификатами,
	|	НастройкиРабочегоМестаКассира.ИспользоватьПанельВводаНаличныхКупюр КАК ИспользоватьПанельВводаНаличныхКупюр,
	|	НастройкиРабочегоМестаКассира.ИспользоватьПромокоды КАК ИспользоватьПромокоды,
	|	НастройкиРабочегоМестаКассира.ВертикальнаяОриентация КАК ВертикальнаяОриентация,
	|	НастройкиРабочегоМестаКассира.ОтображатьНумерациюСтрок КАК ОтображатьНумерациюСтрок,
	|	НастройкиРабочегоМестаКассира.СуммаПодтвержденияСписанияБонусов КАК СуммаПодтвержденияСписанияБонусов,
	|	НастройкиРабочегоМестаКассира.ВыдаватьПодарокНаКассе КАК ВыдаватьПодарокНаКассе,
	|	НастройкиРабочегоМестаКассира.РаботаВРежимеМедленногоСоединения КАК РаботаВРежимеМедленногоСоединения,
	|	НастройкиРабочегоМестаКассира.РазрешитьЗапускРезервногоКопированияИзФормыРМК КАК РазрешитьЗапускРезервногоКопированияИзФормыРМК,
	|	НастройкиРабочегоМестаКассира.РежимОтображенияСкидки КАК РежимОтображенияСкидки,
	|	НастройкиРабочегоМестаКассира.ОтправлятьSMSКодПриПродаже КАК ОтправлятьSMSКодПриПродаже,
	|	НастройкиРабочегоМестаКассира.РазрешитьВводКомментарияКЧеку КАК РазрешитьВводКомментарияКЧеку,
	|	НастройкиРабочегоМестаКассира.ОтображатьОстаток КАК ОтображатьОстаток,
	|	НастройкиРабочегоМестаКассира.РазрешитьБыстроеДобавлениеПакета КАК РазрешитьБыстроеДобавлениеПакета,
	|	НастройкиРабочегоМестаКассира.НоменклатураПакет КАК НоменклатураПакет,
	|	НастройкиРабочегоМестаКассира.СоздаватьЗаказы КАК СоздаватьЗаказы,
	|	НастройкиРабочегоМестаКассира.ПокупательНовогоЗаказа КАК ПокупательНовогоЗаказа,
	|	НастройкиРабочегоМестаКассира.СпособПечатиЗаказаПокупателя КАК СпособПечатиЗаказаПокупателя,
	|	НастройкиРабочегоМестаКассира.ПечататьЗаказПриСоздании КАК ПечататьЗаказПриСоздании,
	|	НастройкиРабочегоМестаКассира.НастроитьКассировДляВхода КАК НастроитьКассировДляВхода,
	|	НастройкиРабочегоМестаКассира.МаксимальныйПроцентРучнойНаценки КАК МаксимальныйПроцентРучнойНаценки,
	|	НастройкиРабочегоМестаКассира.ИспользоватьКассираКакПродавца КАК ИспользоватьКассираКакПродавца,
	|	НастройкиРабочегоМестаКассира.РазрешитьВыборПродавца КАК РазрешитьВыборПродавца,
	|	НастройкиРабочегоМестаКассира.ЗапретитьЧастичнуюОтгрузкуЗаказа КАК ЗапретитьЧастичнуюОтгрузкуЗаказа,
	|	НастройкиРабочегоМестаКассира.РазрешитьПродажуСверхЗаказа КАК РазрешитьПродажуСверхЗаказа,
	|	НастройкиРабочегоМестаКассира.ИспользоватьОплатуПлатежнымиКартами КАК ИспользоватьОплатуПлатежнымиКартами,
	|	НастройкиРабочегоМестаКассира.ВестиЖурналДействийКассира КАК ВестиЖурналДействийКассира,
	|	НастройкиРабочегоМестаКассира.ЗапретитьПробитиеЧекаБезРасчетаСкидок КАК ЗапретитьПробитиеЧекаБезРасчетаСкидок,
	|	НастройкиРабочегоМестаКассира.МаксимальноеКоличествоРаспознанныхТоваров КАК МаксимальноеКоличествоРаспознанныхТоваров,
	|	НастройкиРабочегоМестаКассира.ОбучатьУстройствоРаспознаванияВоВремяПродажи КАК ОбучатьУстройствоРаспознаванияВоВремяПродажи,
	|	НастройкиРабочегоМестаКассира.ПечатьКопииЧека КАК ПечатьКопииЧека,
	|	НастройкиРабочегоМестаКассира.ПечатьТоварногоЧека КАК ПечатьТоварногоЧека,
	|	НастройкиРабочегоМестаКассира.ПечатьЗаказаПриПробитииЧека КАК ПечатьЗаказаПриПробитииЧека,
	|	НастройкиРабочегоМестаКассира.КоличествоДнейХраненияОтложенныхЧеков КАК КоличествоДнейХраненияОтложенныхЧеков,
	|	НастройкиРабочегоМестаКассира.УдалятьНепробитыеЧеки КАК УдалятьНепробитыеЧеки,
	|	НастройкиРабочегоМестаКассира.ЛокальныйКонтрольКлючаИСМП КАК ЛокальныйКонтрольКлючаИСМП,
	|	НастройкиРабочегоМестаКассира.РежимНачальнойСтраницы КАК РежимНачальнойСтраницы,
	|	НастройкиРабочегоМестаКассира.РежимНачальнойСтраницы = 2 КАК ОсновнойПодборПлиточный,
	|	НастройкиРабочегоМестаКассира.НапоминатьПроВводКартыЛояльности КАК НапоминатьПроВводКартыЛояльности,
	|	НастройкиРабочегоМестаКассира.ЗапретитьСопоставлениеТовара КАК ЗапретитьСопоставлениеТовара,
	|	НастройкиРабочегоМестаКассира.ПроизводитьПолныйРасчетСкидок КАК ПроизводитьПолныйРасчетСкидок,
	|	НастройкиРабочегоМестаКассира.ИспользоватьОплатуНесколькимиКартами КАК ИспользоватьОплатуНесколькимиКартами,
	|	НастройкиРабочегоМестаКассира.СкрыватьQRОплатыНаличными КАК СкрыватьQRОплатыНаличными,
	|	НастройкиРабочегоМестаКассира.СкрыватьQRОплатыКартой КАК СкрыватьQRОплатыКартой,
	|	НастройкиРабочегоМестаКассира.ОбновлятьКоличествоПриПовторномПолученииВеса КАК ОбновлятьКоличествоПриПовторномПолученииВеса
	|ИЗ
	|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
	|ГДЕ
	|	НЕ НастройкиРабочегоМестаКассира.ПометкаУдаления
	|	И НастройкиРабочегоМестаКассира.РабочееМесто = &РабочееМесто");
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	
	ВыборкаНастроек = Запрос.Выполнить().Выбрать();
	КоличествоНастроек = ВыборкаНастроек.Количество();
	
	Если КоличествоНастроек = 1 И ВыборкаНастроек.Следующий() Тогда
		
		ТекущаяНастройкаРМК = ВыборкаНастроек.Ссылка;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаНастроек, ,
			"ВертикальнаяОриентация,ИспользоватьПромокоды,ВестиЖурналДействийКассира");
		
		Если СоздаватьЗаказы И ЕстьПравоСозданияЗаказов Тогда
			УстановитьВидимостьЭлементаФормы(Элементы.ПродажаПоЗаказу, Истина);
			УстановитьВидимостьЭлементаФормы(Элементы.Заказ, Истина);
		КонецЕсли;
		
		ТекстПодсказкиРучнаяСкидка = "";
		Если МаксимальныйПроцентРучнойСкидки > 0 Тогда
			ТекстПодсказкиРучнаяСкидка = СтрШаблон(НСтр("ru = 'Максимальная ручная скидка: %1%%'"), МаксимальныйПроцентРучнойСкидки);
		КонецЕсли;
		МаксимальныйПроцентРучнойНаценки =  - ТекущаяНастройкаРМК.МаксимальныйПроцентРучнойНаценки;
		Если МаксимальныйПроцентРучнойНаценки < 0 Тогда
			Если МаксимальныйПроцентРучнойСкидки > 0 Тогда
				Элементы.ПодписьЭлементаЗакрытияПанели.Заголовок = НСтр("ru = 'Скидка/Наценка на чек'");
				Элементы.ДекорацияТекущийТоварСкидка.Заголовок = НСтр("ru = 'Скидка/Наценка'");
				ТекстПодсказкиРучнаяСкидка = ТекстПодсказкиРучнаяСкидка + Символы.ПС;
			Иначе
				Элементы.ПодписьЭлементаЗакрытияПанели.Заголовок = НСтр("ru = 'Наценка на чек'");
				Элементы.ДекорацияТекущийТоварСкидка.Заголовок = НСтр("ru = 'Наценка'")
			КонецЕсли;
			ТекстПодсказкиРучнаяСкидка = ТекстПодсказкиРучнаяСкидка + СтрШаблон(НСтр("ru = 'Максимальная ручная наценка: %1%%'"), ТекущаяНастройкаРМК.МаксимальныйПроцентРучнойНаценки);
		КонецЕсли;
		
		Элементы.ТекущийТоварСкидка.Подсказка = ТекстПодсказкиРучнаяСкидка;
		Элементы.ЗначениеСкидкиНаЧек.Подсказка = ТекстПодсказкиРучнаяСкидка;
	
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьВводДисконтныхКарт(ВводДисконтныхКарт);
		Если Не ВводДисконтныхКарт Тогда
			ИспользоватьОплатуБонусами = Ложь;
			НапоминатьПроВводКартыЛояльности = Ложь;
		КонецЕсли;
		
		ТочностьОкругления = 0;
		Если ЗначениеЗаполнено(ВыборкаНастроек.ТочностьОкругления) Тогда
			ТочностьОкругления = Число(Строка(ВыборкаНастроек.ТочностьОкругления));
		КонецЕсли;
		
		ОжидатьПолученияОтветаИСМП = ВыборкаНастроек.ОжидатьРезультатПроверкиМарок;
		ЛокальныйКонтрольКлючаИСМП = ВыборкаНастроек.ЛокальныйКонтрольКлючаИСМП;
		ИспользоватьВыборСкладаПриПродаже = ВыборкаНастроек.РазрешитьВыборСклада;
		ИспользоватьКассираКакПродавца = ВыборкаНастроек.ИспользоватьКассираКакПродавца И ВыборкаНастроек.РазрешитьВыборПродавца;
		ИспользоватьОплатуПлатежнымиКартами = ВыборкаНастроек.ИспользоватьОплатуПлатежнымиКартами;
		ИспользоватьОплатуНесколькимиКартами = ВыборкаНастроек.ИспользоватьОплатуНесколькимиКартами;
		ИспользоватьКод =  ВыборкаНастроек.ПоказыватьКодНоменклатуры;
		ИспользоватьАртикул = ВыборкаНастроек.ПоказыватьАртикулНоменклатуры;
		ИспользоватьКодАртикул = ИспользоватьКод ИЛИ ИспользоватьАртикул;
		ПолныйРасчетСкидок = РежимКассыСамообслуживания Или ВыборкаНастроек.ПроизводитьПолныйРасчетСкидок;
		
		УстановитьВидимостьЭлементаФормы(Элементы.СписокТоваровАртикул, ВыборкаНастроек.ПоказыватьАртикулНоменклатуры);
		УстановитьВидимостьЭлементаФормы(Элементы.ДополнительныйСписокТоваровАртикул, ВыборкаНастроек.ПоказыватьАртикулНоменклатуры);
		УстановитьВидимостьЭлементаФормы(Элементы.СписокТоваровКод, ВыборкаНастроек.ПоказыватьКодНоменклатуры);
		УстановитьВидимостьЭлементаФормы(Элементы.ДополнительныйСписокТоваровКод, ВыборкаНастроек.ПоказыватьКодНоменклатуры);
		
		УстановитьВидимостьЭлементаФормы(Элементы.ТоварыПредставлениеКодАртикул, ИспользоватьКодАртикул);
		УстановитьВидимостьЭлементаФормы(Элементы.ТоварыМиниСписокКодАртикул, ИспользоватьКодАртикул); 
		УстановитьВидимостьЭлементаФормы(Элементы.ТекущийКодАртикул, ИспользоватьКодАртикул);	
		
		УстановитьВидимостьЭлементаФормы(Элементы.Скупка, ВыборкаНастроек.ИспользоватьРежимСкупки);
		УстановитьВидимостьЭлементаФормы(Элементы.ВозвратСкупки, ВыборкаНастроек.ИспользоватьРежимСкупки);
		
		ИспользоватьВводПоСтроке = ВыборкаНастроек.ИспользоватьБыстроеДобавлениеТовара И Не РежимКассыСамообслуживания;
		УстановитьВидимостьЭлементаФормы(Элементы.ВводТовараПоСтроке, ИспользоватьВводПоСтроке);
		
		ДоступнаОтправкаSMS = Ложь;
		ОбщегоНазначенияРМКПереопределяемый.ПроверитьВозможностьОтправкиSMS(ДоступнаОтправкаSMS);
		ОтправлятьSMSКодПриЗаведенииКарты = ВыборкаНастроек.ОтправлятьSMSКодПриЗаведенииКарты И ДоступнаОтправкаSMS;
		
		Если ОтправлятьSMSКодПриЗаведенииКарты Тогда
			Элементы.СоздатьКарту.Заголовок = НСтр("ru = 'К подтверждению номера'");
		КонецЕсли;
		
		ФормаПлиточногоИнтерфейсаДоступна = ЗначениеЗаполнено(СтруктураПлиточногоИнтерфейсаПодбора);
		УстановитьВидимостьЭлементаФормы(Элементы.ОткрытьПлиточныйИнтерфейсКаталога, ФормаПлиточногоИнтерфейсаДоступна);
		
		РазрешитьБыстроеДобавлениеПакета = ВыборкаНастроек.РазрешитьБыстроеДобавлениеПакета = Истина
			И ЗначениеЗаполнено(ВыборкаНастроек.НоменклатураПакет);
		Если РазрешитьБыстроеДобавлениеПакета Тогда
			Если Не РежимКассыСамообслуживания Тогда
				Элементы.ДекорацияПустойЧекПродажа.Картинка = БиблиотекаКартинок.РМКQRПакет;
			КонецЕсли;
			ДанныеПакета = ПодготовитьДанныеВыбораНоменклатуры(ВыборкаНастроек.НоменклатураПакет);
		КонецЕсли;
		УстановитьВидимостьЭлементаФормы(Элементы.ДобавитьПакет, РазрешитьБыстроеДобавлениеПакета);
		
		Если РежимКассыСамообслуживания Тогда
			ИспользоватьОплатуНаличными = Ложь;
			ИспользоватьОплатуСертификатамиНСПК = Ложь;
			ВопросПоРасчетуСкидок = Ложь;
			Если ОсновнойПодборПлиточный Тогда
				ЗакрыватьПодборПриВыбореТовара = Ложь;
			КонецЕсли;
			ВыводитьКомментарийКЧеку = Ложь;
		Иначе
			ВыдаватьПодарокНаКассе = Истина;
			ВыводитьКомментарийКЧеку = ВыборкаНастроек.РазрешитьВводКомментарияКЧеку;
			ВестиЖурналДействийКассира = ВыборкаНастроек.ВестиЖурналДействийКассира;
		КонецЕсли;
		ИспользоватьПромокоды = ВыборкаНастроек.ИспользоватьПромокоды;
		
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакИспользованияПродавцовВРМК(НеИспользоватьПродавцов);
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакИспользованияСерийВРМК(СерииНеВыгружаются);
		ИспользоватьДисконтныеКарты = Истина;
		Если Не РежимКассыСамообслуживания
			И НЕ ПечататьБумажныйЧек Тогда
			ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакИспользованияДисконтныхКарт(ИспользоватьДисконтныеКарты);
		КонецЕсли;
		
		УстановитьВидимостьЭлементаФормы(Элементы.ВыборСерии, НЕ СерииНеВыгружаются);
		УстановитьВидимостьЭлементаФормы(Элементы.ВыборСерииИдентификатор, СерииНеВыгружаются);
		УстановитьВидимостьЭлементаФормы(Элементы.ВвестиКомментарийКЧеку, ВыводитьКомментарийКЧеку);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВидОплатыБонусы, ИспользоватьОплатуБонусами);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаБонусов, ИспользоватьОплатуБонусами);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВидОплатыСертификатом, ИспользоватьОплатуСертификатами);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаСертификата, ИспользоватьОплатуСертификатами);
		
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакКонтролироватьОстатокНаличных(КонтролироватьОстатокНаличных);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВидОплатыНаличными, ИспользоватьОплатуНаличными);
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСдача, ИспользоватьОплатуНаличными);
		
		УстановитьВидимостьЭлементаФормы(Элементы.Внесение, ИспользоватьОплатуНаличными);
		УстановитьВидимостьЭлементаФормы(Элементы.Выемка, ИспользоватьОплатуНаличными);
		УстановитьВидимостьЭлементаФормы(Элементы.ОткрытьДенежныйЯщик, ИспользоватьОплатуНаличными);
		
		ОбщегоНазначенияРМКПереопределяемый.ДополнитьНастройкиОтображенияОстатков(ЭтотОбъект);
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакПересчетаСкидок(ВыполнитьПересчетАвтоматическихСкидок);
		УстановитьВидимостьЭлементаФормы(Элементы.ТекущийТоварОстаток, ОтображатьОстаток И Не РежимКассыСамообслуживания);
		
		УстановитьВидимостьЭлементаФормы(Элементы.ТоварыНомерСтроки, ОтображатьНумерациюСтрок);
		
		Если Не ВертикальнаяОриентация = ВыборкаНастроек.ВертикальнаяОриентация Тогда
			ВертикальнаяОриентация = ВыборкаНастроек.ВертикальнаяОриентация;
			ИнтерфейсРМКСлужебный.НастроитьПанельУправленияЧеком(ЭтотОбъект, ВертикальнаяОриентация);
		КонецЕсли;
		
		ИспользоватьПанельВводаНаличныхКупюр
			= ВыборкаНастроек.ИспользоватьОплатуНаличными И ВыборкаНастроек.ИспользоватьПанельВводаНаличныхКупюр;
		ИнтерфейсРМКСлужебный.ПодготовитьПанельВводаНаличныхКупюр(ЭтотОбъект,
			ИспользоватьПанельВводаНаличныхКупюр, ВертикальнаяОриентация);
		
		НастроитьОтображениеСкидки();
		
		ЕстьПравоНаРезервноеКопирование = ВыборкаНастроек.РазрешитьЗапускРезервногоКопированияИзФормыРМК;
		
		Если ЕстьПравоНаРезервноеКопирование Тогда
			
			РезультатПроверки 				= ПроверитьРаботуОблачногоАрхива();

			ЕстьПравоНаРезервноеКопирование = РезультатПроверки.СозданиеРезервнойКопииДоступно
				И РезультатПроверки.ПодключениеОблачногоАрхиваВыполнено;

		КонецЕсли;
		
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакЗапретаСопоставленияТовара(ЗапретитьСопоставлениеТовара);
		
		УстановитьВидимостьЭлементаФормы(Элементы.СохранитьРезервнуюКопию,
			ЕстьПравоНаРезервноеКопирование);
			
		УстановитьВидимостьЭлементаФормы(Элементы.СохранитьРезервнуюКопиюИзРежимаВыбораКассы,
			ЕстьПравоНаРезервноеКопирование);
			
		ИспользуетсяОборудованиеРозлива = ОбщегоНазначенияРМК.ВестиУчетМаркируемойПродукции()
			И ОбщегоНазначенияРМК.ВедетсяУчетПивнойПродукцииВРозлив();
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаЕщеОборудованиеРозлива,
			ИспользуетсяОборудованиеРозлива);
			
		ПеренестиЭлементыГруппыОтправитьЧек();
		
		СкрыватьQRОплатыНаличными = ВыборкаНастроек.СкрыватьQRОплатыНаличными;
		Если СкрыватьQRОплатыНаличными Тогда
			Элементы.ОплатаНаличнымиВТихомРежиме.Картинка = БиблиотекаКартинок.РМКНаличные;
		КонецЕсли;
		
		СкрыватьQRОплатыКартой = ВыборкаНастроек.СкрыватьQRОплатыКартой ИЛИ РежимКассыСамообслуживания;
		Если СкрыватьQRОплатыКартой Тогда
			Элементы.ОплатаКартойВТихомРежиме.Картинка = БиблиотекаКартинок.РМКПластиковаяКарта;
		КонецЕсли;
		
	КонецЕсли;
	СенсорныйЭкран = СенсорныйЭкран();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьОбщуюВозможностьРаботы(Отказ, ДанныеПроверки)
	
	Если РежимКассыСамообслуживания И Не ФизЛицоПользователяЗаполнено Тогда
		ЗарегистрироватьОшибкуОпределенияКассира(Отказ, ДанныеПроверки);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РабочееМесто) Тогда
		ДанныеПроверки.ОшибкаЗапуска = "РабочееМесто";
		ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка определения рабочего места'");
		ДанныеПроверки.ТекстСообщения = НСтр("ru = 'Не смогли определить рабочее место.
									|Обратитесь к администратору системы.'");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяНастройкаРМК) Тогда
		ДанныеПроверки.ОшибкаЗапуска = "НастройкаРМК";
		ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Настройки РМК.'");
		ДанныеПроверки.ТекстСообщения = НСтр("ru = 'Не удалось определить настройки РМК.
									|Обратитесь к администратору системы.'");
		ОбщегоНазначенияРМККлиентСерверПереопределяемый.ЗаполнитьТекстОшибкиПриОпределенииНастройкиРМК(ДанныеПроверки.ТекстСообщения);
		Отказ = Истина;
		Возврат;
	ИначеЕсли РежимКассыСамообслуживания Тогда
		СценарийИспользованияРМК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяНастройкаРМК, "СценарийИспользования");
		Если Не СценарийИспользованияРМК = Перечисления.СценарииИспользованияРМК.ТерминалСамообслуживания Тогда
			ЗарегистрироватьОшибкуОпределенияНастройкиРМКДЛяРежимаКСО(Отказ, ДанныеПроверки);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	НастроеныСотрудникиДляОтменыЧека = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ПроверитьНаличиеКодаПодтвержденияУСотрудниковСПравамиОтменыЧека(НастроеныСотрудникиДляОтменыЧека);
	Если РежимКассыСамообслуживания И Не НастроеныСотрудникиДляОтменыЧека Тогда
		ЗарегистрироватьОшибкуРегистрацииСтаршегоСотрудника(Отказ, ДанныеПроверки);
		Возврат;
	КонецЕсли;
	
	ВалютаЗаполненаПравильно = Истина;
	ОбщегоНазначенияРМКПереопределяемый.ПроверитьВозможностьРаботыСВалютой(ВалютаЗаполненаПравильно, ЭтотОбъект);
	Если Не ВалютаЗаполненаПравильно Тогда
		ДанныеПроверки.ОшибкаЗапуска = "Валюта";
		ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Настройки валюты.'");
		ДанныеПроверки.ТекстСообщения = НСтр("ru = 'В настройках программы и в данных торгового объекта указаны разные валюты.
									|Обратитесь к администратору системы.'");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ОбщегоНазначенияРМКПереопределяемый.СформироватьЗапросДанныеОрганизаций(Запрос, ЭтотОбъект);
	Если Не ЗначениеЗаполнено(Запрос.Текст) Тогда
		ДанныеПроверки.ОшибкаЗапуска = "КассаККМ";
		ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка определения доступных касс ККМ'");
		ДанныеПроверки.ТекстСообщения = НСтр("ru = 'Не сформирован запрос для получения данных организаций'");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ОбщегоНазначенияРМКПереопределяемый.СформироватьЗапросДанныеКассыККМ(Запрос, ЭтотОбъект);
	Если Не ЗначениеЗаполнено(Запрос.Текст) Тогда
		ДанныеПроверки.ОшибкаЗапуска = "КассаККМ";
		ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка определения доступных касс ККМ'");
		ДанныеПроверки.ТекстСообщения = НСтр("ru = 'Не сформирован запрос для получения данных Касс ККМ'");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ПодключенныеККМПроверка = РезультатЗапроса.Выгрузить();
	ПодключенныеККМПроверка.Колонки.Добавить("Количество");
	ПодключенныеККМПроверка.ЗаполнитьЗначения(1, "Количество");
	ПодключенныеККМПроверкаККТ = ПодключенныеККМПроверка.Скопировать();
	
	ПодключенныеККМПроверка.Свернуть("Организация", "Количество");
	Для Каждого СтрокаОрганизации Из ПодключенныеККМПроверка Цикл
		Если СтрокаОрганизации.Количество > 1 Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("Организация", СтрокаОрганизации.Организация);
			ПодключенныеКассыККМ = ПодключенныеККМПроверкаККТ.НайтиСтроки(Отбор);
			Для Каждого ПодключеннаяКасса Из ПодключенныеКассыККМ Цикл
				СтрокаКассККМ = "";
				СтрокаКассККМ = СтрокаКассККМ + СтрШаблон(НСтр("ru = '%1, '"), ПодключеннаяКасса.КассаККМ);
			КонецЦикла;
			
			ДанныеПроверки.ОшибкаЗапуска = "КассаККМ";
			ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка определения доступных касс ККМ'");
			ДанныеПроверки.ТекстСообщения = СтрШаблон(НСтр("ru = 'На организацию: %1 подключено несколько касс ККМ. Допустима одна.
				|Обратитесь к администратору системы.
				|Подключенные кассы: %2.'"), СтрокаОрганизации.Организация, СтрокаКассККМ);
			ДанныеПроверки.ТекстСообщения = СтрЗаменить(ДанныеПроверки.ТекстСообщения, ", .", ".");
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
		Если ИспользоватьРазрешительныйРежимГосИС Тогда
			Если ПараметрыОткрытияФормыГосИС = Неопределено Тогда
				ПараметрыОткрытияФормыГосИС = Новый Структура;
			КонецЕсли;
			ПараметрыОбновленияКлючаСессии = ПараметрыОбновленияКлючаСессии();
			
			ПараметрыОбновленияКлючаСессии.Организация = СтрокаОрганизации.Организация;
			ПараметрыОбновленияКлючаСессии.ПараметрыИСМП.ЛокальныйКонтрольКлючаИСМП = ЛокальныйКонтрольКлючаИСМП;
			ПараметрыОбновленияКлючаСессии.ПараметрыИСМП.ИспользоватьРазрешительныйРежимГосИС = ИспользоватьРазрешительныйРежимГосИС;
			Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
				ПараметрыПодключения = ОбщегоНазначенияРМК.ЗначенияПараметровСервераЛояльности(ТекущаяНастройкаРМК);
				ПараметрыОбновленияКлючаСессии.ПараметрыСервераЛояльности = ПараметрыПодключения;
			КонецЕсли;
			РезультатОбновленияКлюча = ТребуетсяОбновлениеКлючаСессииСервер(ПараметрыОбновленияКлючаСессии);
			
			Если РезультатОбновленияКлюча.ТребуетсяОбновлениеКлючаСессии Или РезультатОбновленияКлюча.Ошибка Тогда
				Если ПараметрыОткрытияФормыГосИС.Свойство("РезультатыОбновленияКлючаСессии") Тогда
					ПараметрыОткрытияФормыГосИС.РезультатыОбновленияКлючаСессии.Добавить(РезультатОбновленияКлюча);
				Иначе
					РезультатыОбновления = Новый Массив;
					РезультатыОбновления.Добавить(РезультатОбновленияКлюча);
					ПараметрыОткрытияФормыГосИС.Вставить("РезультатыОбновленияКлючаСессии", РезультатыОбновления);
				КонецЕсли;
			Иначе
				СтандартнаяОбработка = Истина;
				ТребуетсяОбновлениеСпискаCDNПлощадок = Ложь;
				ОбщегоНазначенияРМКПереопределяемый.ТребуетсяОбновлениеСпискаCDNПлощадок(ТребуетсяОбновлениеСпискаCDNПлощадок, СтандартнаяОбработка);
				Если СтандартнаяОбработка И ТребуетсяОбновлениеСпискаCDNПлощадок Тогда
					ПараметрыОбновленияCDN = Новый Структура;
					ПараметрыОбновленияCDN.Вставить("Организация", СтрокаОрганизации.Организация);
					ПараметрыОбновленияCDN.Вставить("ТребуетсяОбновлениеСпискаCDNПлощадок", ТребуетсяОбновлениеСпискаCDNПлощадок);
					ПараметрыОткрытияФормыГосИС.Вставить("РезультатОбновленияСпискаCDNПлощадок", ПараметрыОбновленияCDN);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПодключенныеККМПроверкаККТ.Свернуть("ПодключаемоеОборудование", "Количество");
	Для Каждого СтрокаОборудования Из ПодключенныеККМПроверкаККТ Цикл
		Если СтрокаОборудования.Количество > 1 И ЗначениеЗаполнено(СтрокаОборудования.ПодключаемоеОборудование) Тогда
			ДанныеПроверки.ОшибкаЗапуска = "КассаККМ";
			ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка определения доступных касс ККМ'");
			ДанныеПроверки.ТекстСообщения = СтрШаблон(НСтр("ru = 'Подключаемое оборудование: %1 установлено к нескольким кассам ККМ.
				|Обратитесь к администратору системы.'"), СтрокаОборудования.ПодключаемоеОборудование);
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ТекущаяНастройкаРМК.ПродажиСНесколькихКассККМ И НЕ ЗначениеЗаполнено(ТекущаяНастройкаРМК.ОсновнаяКассаККМ) Тогда
		ДанныеПроверки.ОшибкаЗапуска = "КассаККМ";
		ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка определения доступных касс ККМ'");
		ДанныеПроверки.ТекстСообщения = НСтр("ru = 'Не определена касса ККМ используемая по умолчанию.
			|Обратитесь к администратору системы.'");
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	ЭтоРМКБазовая = Метаданные.Имя = "РМКБазовая";
	Если Выборка.Количество() > 2 И ЭтоРМКБазовая Тогда
		ДанныеПроверки.ОшибкаЗапуска = "КассаККМ";
		ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка определения доступных касс ККМ'");
		ДанныеПроверки.ТекстСообщения = НСтр("ru = 'Нельзя подключить более 2-х касс ККМ.
			|Обратитесь к администратору системы.'");
		Отказ = Истина;
		Возврат;
		
	ИначеЕсли Выборка.Количество() > 1 И НЕ ТекущаяНастройкаРМК.ПродажиСНесколькихКассККМ Тогда
		ДанныеПроверки.ОшибкаЗапуска = "КассаККМ";
		ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка определения доступных касс ККМ'");
		ДанныеПроверки.ТекстСообщения = НСтр("ru = 'Настроено несколько элементов подключаемого оборудования для касс ККМ
			|при отключенной возможность использования нескольких касс.
			|Обратитесь к администратору.'");
		Отказ = Истина;
		Возврат;
		
	ИначеЕсли Выборка.Количество() > 0 Тогда
		
		ТаблицаКассККМОрганизаций.Очистить();
		
		#Область ОплатаQRКодом_ПараметрыОрганизации
		ПлатежнаяСистема_ВидыОплат.Очистить();
		#КонецОбласти
		
		НомерПП = 0;
		Пока Выборка.Следующий() Цикл
			
			ОсновнаяОрганизация = Выборка.Организация;
			
			Если НЕ Выборка.ИспользоватьБезПодключенияОборудования Тогда
				Если (Не РежимКассыСамообслуживания)
					Или (ЗначениеЗаполнено(Выборка.ПодключаемоеОборудование) 
					И ПодключаемоеОборудованиеИспользуется(Выборка.ПодключаемоеОборудование)) Тогда
					
					ОписаниеПоследнейКассовойСмены = КассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(Выборка.ПодключаемоеОборудование);
					
				Иначе
					ЗарегистрироватьОшибкуПодключаемогоОборудованияККМ(Отказ, ДанныеПроверки);
					Возврат;
				КонецЕсли;
			Иначе
				ОписаниеПоследнейКассовойСмены = КассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(Выборка.КассаККМ);
			КонецЕсли;
			
			Объект.КассаККМ = Выборка.КассаККМ;
			Объект.Организация = Выборка.Организация;
			ПодключаемоеОборудование = Выборка.ПодключаемоеОборудование;
			
			ККМПоддерживаетПроверкуКодовМаркировки = Ложь;
			ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьНеобходимостьПроверкиМаркиНаККТ(ККМПоддерживаетПроверкуКодовМаркировки,
				ПодключаемоеОборудование);
			
			ТекущаяОрганизация = Объект.Организация;
			
			НалогообложениеНДС = Неопределено;
			ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьСНОНДСДляОрганизации(НалогообложениеНДС, ЭтотОбъект);
			Объект.НалогообложениеНДС = НалогообложениеНДС;
			
			СистемаНалогообложенияОрганизацииПоУмолчанию = ОбщегоНазначенияРМК.СНОККТДляОрганизации(ЭтотОбъект);
			
			СтрокаКассККМ = ТаблицаКассККМОрганизаций.Добавить();
			НомерПП = НомерПП + 1;
			СтрокаКассККМ.ИмяКнопки                            = "ВыбратьКассуККМ"+НомерПП;
			СтрокаКассККМ.КассаККМ                             = Объект.КассаККМ;
			СтрокаКассККМ.ПоддерживаетПроверкуКодовМаркировки  = ККМПоддерживаетПроверкуКодовМаркировки;
			СтрокаКассККМ.ИдентификаторУстройства              = ПодключаемоеОборудование;
			СтрокаКассККМ.Организация                          = Объект.Организация;
			СтрокаКассККМ.ИспользоватьБезПодключенияОборудования = Выборка.ИспользоватьБезПодключенияОборудования;
			СтрокаКассККМ.СверятьСДаннымиОФД                     = Выборка.СверятьДанныеССервисомОФД;
			
			#Область ОплатаQRКодом_ПараметрыОрганизации
			Если ИспользоватьОплатуПлатежнымиСистемами Тогда
				
				НастройкиИнтеграцииОрганизации =
					РегистрыСведений.СоответствиеНастроекИнтеграцииРМК.НастройкиИнтеграции(
						СтрокаКассККМ.Организация,
						Объект.ТорговыйОбъект);
			
				Если ЗначениеЗаполнено(НастройкиИнтеграцииОрганизации) Тогда
				
					СтрокаКассККМ.ВозможнаОплатаQRКодом = Истина;
				
					Для Каждого Настройка Из НастройкиИнтеграцииОрганизации Цикл 
						ЗаполнитьЗначенияСвойств(ПлатежнаяСистема_ВидыОплат.Добавить(), Настройка);
					КонецЦикла;
				
				Иначе
					СтрокаКассККМ.ВозможнаОплатаQRКодом = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			#КонецОбласти
			
			Если ИспользоватьОплатуНаличными Тогда
				ДенежныеСредстваВКассеККМ = ОбщегоНазначенияРМК.ПолучитьНаличныеДенежныеСредстваВКассеККМ(СтрокаКассККМ.Организация, СтрокаКассККМ.КассаККМ);
				СтрокаКассККМ.ДенежныеСредстваВКассеККМ = ДенежныеСредстваВКассеККМ;
				СтрокаКассККМ.ДенежныеСредстваВКассеККМНаНачало = ДенежныеСредстваВКассеККМ;
				
				ПараметрыВыемкиПриЗакрытииСмены = ОбщегоНазначенияРМК.ПолучитьПараметрыВыемкиПриЗакрытииСмены(СтрокаКассККМ.Организация, СтрокаКассККМ.КассаККМ);
				СтрокаКассККМ.ТребуетсяВыемкаПриЗакрытииСмены = ПараметрыВыемкиПриЗакрытииСмены.ТребуетсяВыемкаПриЗакрытииСмены;
				СтрокаКассККМ.МинимальныйОстатокНаличныхВКассе = ПараметрыВыемкиПриЗакрытииСмены.МинимальныйОстатокНаличныхВКассе;
			КонецЕсли;
			
			Если НЕ ОписаниеПоследнейКассовойСмены = Неопределено Тогда
				
				КассоваяСмена                     = ОписаниеПоследнейКассовойСмены.КассоваяСмена;
				СтрокаКассККМ.КассоваяСмена       = ОписаниеПоследнейКассовойСмены.КассоваяСмена;
				СтрокаКассККМ.НачалоКассовойСмены = ОписаниеПоследнейКассовойСмены.НачалоКассовойСмены;
				СтрокаКассККМ.ДатаИстеченияСрокаДействия = ОписаниеПоследнейКассовойСмены.ДатаИстеченияСрокаДействия;
				СтрокаКассККМ.Открыта = Истина;
				
				Если НЕ МенеджерОборудованияРМК.КассоваяСменаОткрыта(ОписаниеПоследнейКассовойСмены.Статус) Тогда
					СтрокаКассККМ.НачалоКассовойСмены = Неопределено;
					СтрокаКассККМ.Открыта = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СистемаНалогообложенияОрганизацииПоУмолчанию) Тогда
				ЗарегистрироватьОшибкуОпределенияСНО(СтрокаКассККМ.Организация, Отказ, ДанныеПроверки);
				Возврат;
			КонецЕсли;
			
			Если Не ТекущаяНастройкаРМК.ПродажиСНесколькихКассККМ Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Выборка.Количество() > 1 И ТекущаяНастройкаРМК.ПродажиСНесколькихКассККМ Тогда
			
			ОтборПоКассеККМ = Новый Структура("КассаККМ", ТекущаяНастройкаРМК.ОсновнаяКассаККМ);
			
			Если ЗначениеЗаполнено(ТекущаяНастройкаРМК.ОсновнаяКассаККМ) Тогда
				
				СтрокиПоКассеККМ = ТаблицаКассККМОрганизаций.НайтиСтроки(ОтборПоКассеККМ);
				Если СтрокиПоКассеККМ.Количество() = 0 Тогда
					ЗарегистрироватьОшибкуОпределенияДоступныхКассККМ(Отказ, ДанныеПроверки);
					Возврат;
				Иначе
					ОсновнаяОрганизация = СтрокиПоКассеККМ[0].Организация;
					Объект.Организация = ОсновнаяОрганизация;
					СистемаНалогообложенияОрганизацииПоУмолчанию = ОбщегоНазначенияРМК.СНОККТДляОрганизации(ЭтотОбъект);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбщегоНазначенияРМКПереопределяемый.ПроверитьНастройкиКассККМ(ЭтотОбъект, Отказ, ДанныеПроверки.ТекстЗаголовка, ДанныеПроверки.ТекстСообщения);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ТерминалБезПодключения = Ложь;
		ЗаполнитьЭквайринговыеТерминалы(ТерминалБезПодключения);
		ПроверитьЗаполнениеВидовОплатДляКассыСамообслуживания(ТерминалБезПодключения, Отказ, ДанныеПроверки);
		
		Если ТаблицаКассККМОрганизаций.Количество() = 1 Тогда
			Если ТаблицаКассККМОрганизаций[0].Открыта Тогда
				Элементы.ЗакрытьСмену.Заголовок = НСтр("ru = 'Закрыть смену (Z-отчет)'");
			Иначе
				Элементы.ЗакрытьСмену.Заголовок = НСтр("ru = 'Открыть смену'");
			КонецЕсли;
		Иначе
			Элементы.ЗакрытьСмену.Заголовок = НСтр("ru = 'Открыть/закрыть смену'");
		КонецЕсли;
		
	Иначе
		Если Не ЗначениеЗаполнено(Объект.ТорговыйОбъект) Тогда
			ДанныеПроверки.ОшибкаЗапуска = "ТорговыйОбъект";
			ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Выбор магазина.'");
			ДанныеПроверки.ТекстСообщения = НСтр("ru = 'Для запуска РМК необходимо выбрать магазин.'");
		Иначе
			ДанныеПроверки.ОшибкаЗапуска = "КассаККМ";
			ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка определения доступных касс ККМ'");
			ДанныеПроверки.ТекстСообщения = СтрШаблон(НСтр("ru = 'Для магазина ""%1"" и рабочего места ""%2""
				|не удалось определить доступную кассу ККМ.'"), Объект.ТорговыйОбъект, РабочееМесто);
			ОбщегоНазначенияРМККлиентСерверПереопределяемый.ЗаполнитьТекстОшибкиПриОпределенииКассы(ДанныеПроверки.ТекстСообщения);
		КонецЕсли;
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПроверитьНастройкиПользователя(Отказ, ДанныеПроверки.ТекстЗаголовка, ДанныеПроверки.ТекстСообщения);
	ПроверитьИспользованиеНДССверху(ЭтотОбъект, Отказ, ДанныеПроверки.ТекстЗаголовка, ДанныеПроверки.ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьОшибкуОпределенияСНО(ОрганизацияККМ, Отказ, ДанныеПроверки)
	ДанныеПроверки.ОшибкаЗапуска = "СНО";
	ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка определения СНО.'");
	ДанныеПроверки.ТекстСообщения = СтрШаблон(НСтр("ru = 'У организации: %1 не задана СНО по умолчанию.
		|Обратитесь к администратору системы.'"), ОрганизацияККМ);
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьОшибкуОпределенияДоступныхКассККМ(Отказ, ДанныеПроверки)
	ДанныеПроверки.ОшибкаЗапуска = "КассаККМ";
	ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка определения доступных касс ККМ'");
	ДанныеПроверки.ТекстСообщения = НСтр("ru = 'Не подключена касса ККМ используемая по умолчанию.
		|Обратитесь к администратору системы.'");
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьОшибкуОпределенияКассира(Отказ, ДанныеПроверки)
	ДанныеПроверки.ОшибкаЗапуска = "Кассир";
	ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка определения кассира'");
	ДанныеПроверки.ТекстСообщения = НСтр("ru = 'Не смогли определить кассира КСО.
		|Обратитесь к администратору системы.'");
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьОшибкуПодключаемогоОборудованияККМ(Отказ, ДанныеПроверки)
	ДанныеПроверки.ОшибкаЗапуска = "КассаККМ";
	ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка определения подключаемого оборудования кассы ККМ'");
	ДанныеПроверки.ТекстСообщения = НСтр("ru = 'Подключаемое оборудование не настроено на кассе ККМ.
		|Обратитесь к администратору системы.'");
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьОшибкуРегистрацииСтаршегоСотрудника(Отказ, ДанныеПроверки)
	ДанныеПроверки.ОшибкаЗапуска = "СтаршийКассир";
	ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка определения старшего кассира'");
	ДанныеПроверки.ТекстСообщения = НСтр("ru = 'На рабочем месте нет сотрудника с правами старшего кассира и выше, у которого введен код подтверждения.
		|Обратитесь к администратору системы.'");
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Функция ПодключаемоеОборудованиеИспользуется(ПроверяемоеПодключаемоеОборудование)
	РезультатФункции = Истина;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакИспользованияПодключаемогоОборудования(ПроверяемоеПодключаемоеОборудование, РезультатФункции);
	Возврат РезультатФункции;
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеВидовОплатДляКассыСамообслуживания(ТерминалБезПодключения, Отказ, ДанныеПроверки)
	Если РежимКассыСамообслуживания Тогда
		Если ПлатежнаяСистема_ВидыОплат.Количество() = 0 И Не ИспользоватьОплатуПлатежнымиКартами Тогда
			Если ТерминалБезПодключения Тогда
				ДанныеПроверки.ОшибкаЗапуска = "ЭквайринговыйТерминал";
				ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка настройки оплаты банковскими картами'");
				ДанныеПроверки.ТекстСообщения = НСтр("ru = 'В режиме КСО можно использовать только эквайринговые терминалы
					|с настроенным подключенным оборудованием.
					|Обратитесь к администратору системы.'");
			Иначе
				ДанныеПроверки.ОшибкаЗапуска = "ВидыОплат";
				ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Ошибка настройки видов оплат'");
				ДанныеПроверки.ТекстСообщения = НСтр("ru = 'Не настроен ни один вид оплаты на рабочем месте.
					|Обратитесь к администратору системы.'");
			КонецЕсли;
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СоздатьКнопкиОрганизацийНаФорме()
	
	// Кнопки на странице выбора кассы
	НомерПП = 0;
	НомерППГруппы = 0;
	КоличествоКассККМ = ТаблицаКассККМОрганизаций.Количество();
	ЧетноеКоличествоКассККМ = КоличествоКассККМ%2 = 0;
	НомерПоследнейГруппы = Окр(КоличествоКассККМ / 2);
	
	ГруппыКассККМ = Элементы.ГруппаКассыККМ.ПодчиненныеЭлементы;
	КоличествоГрупп = ГруппыКассККМ.Количество();
	Для НомерГруппы = 0 По КоличествоГрупп - 1 Цикл
		Элементы.Удалить(ГруппыКассККМ[0]);
	КонецЦикла;
	
	Для Каждого СтрокаКассККМ Из ТаблицаКассККМОрганизаций Цикл
		
		НомерПП = НомерПП + 1;
		ИмяКоманды = СтрокаКассККМ.ИмяКнопки;
		НоваяКоманда = Команды.Найти(ИмяКоманды);
		Если НоваяКоманда = Неопределено Тогда
			НоваяКоманда = Команды.Добавить(ИмяКоманды);
		КонецЕсли;
		НоваяКоманда.Действие = "ВыбратьКассуККМ";
		
		Если (НомерПП+1)%2 = 0 Тогда
			НомерППГруппы = НомерППГруппы + 1;
			ИмяГруппы = СтрШаблон("%1%2", "ГруппаКассыККМГруппа", НомерППГруппы);
			ГруппаОрганизацийГоризонтальная = Элементы.Найти(ИмяГруппы);
			Если ГруппаОрганизацийГоризонтальная = Неопределено Тогда
				ГруппаОрганизацийГоризонтальная = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ГруппаКассыККМ);
			КонецЕсли;
			ГруппаОрганизацийГоризонтальная.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаОрганизацийГоризонтальная.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаОрганизацийГоризонтальная.Ширина = 40;
			ГруппаОрганизацийГоризонтальная.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаОрганизацийГоризонтальная.ОтображатьЗаголовок = Ложь;
			ГруппаОрганизацийГоризонтальная.РастягиватьПоГоризонтали = Истина;
		КонецЕсли;
		
		Если Не ЧетноеКоличествоКассККМ И НомерПоследнейГруппы = НомерППГруппы Тогда
			ИмяДекорации = "ВыбратьКассуККМСмещениеЛево";
			ДекорацияСмещение = Элементы.Найти(ИмяДекорации);
			Если ДекорацияСмещение = Неопределено Тогда
				ДекорацияСмещение = Элементы.Добавить("ВыбратьКассуККМСмещениеЛево", Тип("ДекорацияФормы"),
					ГруппаОрганизацийГоризонтальная);
			КонецЕсли;
			ДекорацияСмещение.Ширина = 1;
		КонецЕсли;
		
		КнопкаКассы = Элементы.Найти(ИмяКоманды);
		Если КнопкаКассы = Неопределено Тогда
			КнопкаКассы = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаОрганизацийГоризонтальная);
		КонецЕсли;
		КнопкаКассы.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		КнопкаКассы.Ширина = 2;
		КнопкаКассы.Высота = 8;
		КнопкаКассы.РастягиватьПоГоризонтали = Истина;
		КнопкаКассы.Отображение = ОтображениеКнопки.КартинкаИТекст;
		
		КнопкаКассы.ИмяКоманды = ИмяКоманды;
		КнопкаКассы.Шрифт = Элементы.ТекстПредупреждениеОшибка.Шрифт;
		
		Если Не ЧетноеКоличествоКассККМ И НомерПоследнейГруппы = НомерППГруппы Тогда
			ИмяДекорации = "ВыбратьКассуККМСмещениеПраво";
			ДекорацияСмещение = Элементы.Найти(ИмяДекорации);
			Если ДекорацияСмещение = Неопределено Тогда
				ДекорацияСмещение = Элементы.Добавить(ИмяДекорации, Тип("ДекорацияФормы"),
					ГруппаОрганизацийГоризонтальная);
			КонецЕсли;
			ДекорацияСмещение.Ширина = 1;
		КонецЕсли;
		
	КонецЦикла;
	
	// Кнопки на панели оплаты
	КоличествоКнопокОрганизаций = 1;
	Запрос = Новый Запрос;
	ОбщегоНазначенияРМКПереопределяемый.СформироватьЗапросДанныеОрганизаций(Запрос, ЭтотОбъект);
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		КоличествоКнопокОрганизаций = Запрос.Выполнить().Выбрать().Количество();
	КонецЕсли;
	
	НомерППГруппы = 0;
	Для НомерПП = 1 По КоличествоКнопокОрганизаций Цикл
		
		КомандаИмя = "ПереключитьЧекОрганизация"+НомерПП;
		НоваяКоманда = Команды.Найти(КомандаИмя);
		Если НоваяКоманда = Неопределено Тогда
			НоваяКоманда = Команды.Добавить(КомандаИмя);
		КонецЕсли;
		НоваяКоманда.Действие = "ПереключитьЧекПродажи";
		
		Если (НомерПП+1)%2 = 0 Тогда
			НомерППГруппы = НомерППГруппы + 1;
			ИмяГруппы = СтрШаблон("%1%2", "ГруппаСписокОрганизацийПоКорзинеГруппа", НомерППГруппы);
			ГруппаОрганизацийГоризонтальная = Элементы.Найти(ИмяГруппы);
			Если ГруппаОрганизацийГоризонтальная = Неопределено Тогда
				ГруппаОрганизацийГоризонтальная = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"),
					Элементы.ГруппаСписокОрганизацийПоКорзине);
			КонецЕсли;
			ГруппаОрганизацийГоризонтальная.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаОрганизацийГоризонтальная.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаОрганизацийГоризонтальная.Ширина = 12;
			ГруппаОрганизацийГоризонтальная.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаОрганизацийГоризонтальная.ОтображатьЗаголовок = Ложь;
			ГруппаОрганизацийГоризонтальная.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
		КонецЕсли;
		
		ИмяКнопки = "ПереключитьЧекОрганизация"+НомерПП;
		КнопкаКассы = Элементы.Найти(ИмяКнопки);
		Если КнопкаКассы = Неопределено Тогда
			КнопкаКассы = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ГруппаОрганизацийГоризонтальная);
		КонецЕсли;
		КнопкаКассы.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		КнопкаКассы.Ширина = 12;
		КнопкаКассы.ИмяКоманды = КомандаИмя;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНастройкиПользователя(Отказ, ТекстЗаголовка, ТекстСообщения)
	
	ОбщегоНазначенияРМКПереопределяемый.ПроверитьНастройкиПользователя(Отказ, ТекстЗаголовка, ТекстСообщения);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	НастроитьДоступностьСозданияКодаДоступа();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИспользованиеНДССверху(Форма, Отказ, ТекстЗаголовка, ТекстСообщения)
	
	ОбщегоНазначенияРМКПереопределяемый.ПроверитьИспользованиеНДССверху(Форма, Отказ, ТекстЗаголовка, ТекстСообщения);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КодДоступаПользователяУказан()
	
	Результат = Ложь;
	Запрос = Новый Запрос;
	ОбщегоНазначенияРМКПереопределяемый.СформироватьЗапросПолученияКодовДоступаПользователя(Запрос, ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		КоличествоПаролейПользователя = Выборка.Количество();
		Результат = (КоличествоПаролейПользователя > 0);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПроверитьВозможностьРаботы(Отказ = Ложь)
	
	ПустаяСтрока = НСтр("ru = ''");
	ТекстЗаголовка = ПустаяСтрока;
	ТекстСообщения = ПустаяСтрока;
	ОшибкаЗапуска = ПустаяСтрока;
	ДанныеПроверки = Новый Структура("ТекстЗаголовка,ТекстСообщения,ОшибкаЗапуска", ТекстЗаголовка, ТекстСообщения, ОшибкаЗапуска);
	
	ПроверитьОбщуюВозможностьРаботы(Отказ, ДанныеПроверки);
	Если Отказ Тогда
		ПараметрыОткрытияФормы = Новый Структура();
		ПараметрыОткрытияФормы.Вставить("ТекстЗаголовка", ДанныеПроверки.ТекстЗаголовка);
		ПараметрыОткрытияФормы.Вставить("ТекстСообщения", ДанныеПроверки.ТекстСообщения);
		ПараметрыОткрытияФормы.Вставить("ОшибкаЗапуска", ДанныеПроверки.ОшибкаЗапуска);
		
		ТаблицаКассККМОрганизаций.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСменуКлиент(ДанныеДляОткрытияСмены = неопределено)
	
	Отбор = Новый Структура("КассаККМ", Объект.КассаККМ);
	СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
	
	Если СтрокаКассы.ИспользоватьБезПодключенияОборудования Тогда 
		ИспользоватьКассуККМБезПодключенияОборудования = Истина;
	Иначе
		СохранятьПодключение = Истина;
		ИдентификаторУстройства = ПодключаемоеОборудование;
		ИспользоватьКассуККМБезПодключенияОборудования = Ложь;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("КассаККМ", Объект.КассаККМ);
	ДополнительныеПараметры.Вставить("Магазин", Объект.ТорговыйОбъект);
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ДополнительныеПараметры.Вставить("ОставитьПодключенным", СохранятьПодключение);
	ПараметрыОперации = МенеджерОборудованияРМККлиентСервер.ПараметрыОткрытияЗакрытияСмены();
	
	ДополнительныеПараметрыДляПечати = ДополнительныеПараметрыОткрытияЗакрытияСмены();
	ДополнительныеПараметрыДляПечати.Пользователь = Объект.ПользовательБД;
	ДополнительныеПараметрыДляПечати.Кассир = Объект.Кассир;
	ДополнительныеПараметрыДляПечати.КассаККМ = Объект.КассаККМ;
	ДополнительныеПараметрыДляПечати.ВариантЗаполненияМестаРасчетов = ВариантЗаполненияМестаРасчетов;
	
	Если ИспользоватьПодключаемоеОборудование
		И НЕ ИспользоватьКассуККМБезПодключенияОборудования
		И ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		
		Доступность = Ложь;
		ЗаполнитьПараметрыКассираДляПечати(ПараметрыОперации, ДополнительныеПараметрыДляПечати);
		
	ИначеЕсли ИспользоватьКассуККМБезПодключенияОборудования Тогда
		ПараметрыОперации.КассаККМ = Объект.КассаККМ;
		ПараметрыОперации.АвтономнаяККТ = Истина;
	КонецЕсли;
	
	Контекст = Новый Структура("КассаККМ", Объект.КассаККМ);
	Оповещение = Новый ОписаниеОповещения("ОткрытьСменуЗавершение", ЭтотОбъект, Контекст);
			
	МенеджерОборудованияРМККлиент.НачатьОткрытиеСменыНаФискальномУстройстве(Оповещение,
		УникальныйИдентификатор, ИдентификаторУстройства, ПараметрыОперации, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСменуЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Доступность = Истина;
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
		
		ОписаниеПоследнейКассовойСмены = КассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(Объект.КассаККМ);
		
		Если ЕстьСвойство(ОписаниеПоследнейКассовойСмены, "КассоваяСмена") Тогда
			КассоваяСмена = ОписаниеПоследнейКассовойСмены.КассоваяСмена;
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'Кассовая смена в системе открыта'");
		ПоказатьПредупреждение(, ТекстСообщения);
		
		Оповестить("ИзменениеСостоянияКассовойСмены", Параметры.КассаККМ);
		
	Иначе
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучениеТекущегоСостоянияККТПриОткрытии", ЭтотОбъект);
		МенеджерОборудованияРМККлиент.НачатьПолучениеТекущегоСостоянияФискальногоУстройства(
			ОповещениеОЗавершении, УникальныйИдентификатор, РезультатВыполнения.ИдентификаторУстройства);
		
		ТекстЗаголовка = НСтр("ru = 'Ошибка открытия смены'");
		
		ЛокализованныйТекстСообщения = СтрШаблон(НСтр("ru = 'При открытии смены произошла ошибка.
			|%1
			|Смена не открыта на фискальном устройстве.'"), РезультатВыполнения.ОписаниеОшибки);
		ПоказатьПредупреждение(, ЛокализованныйТекстСообщения, , ТекстЗаголовка);
		
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыборКассыККМ Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнфо, Ложь);
		Если РежимНачальнойСтраницы = 1 Тогда
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		Иначе
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПустая);
		КонецЕсли;
		
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПанельУправленияЧеком);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
		ПроверитьКассовуюСменуИНайтиКассира();
		
	КонецЕсли;
	ЗаполнитьКэшКонтроляПродажПоДаннымПлиткиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперациюВыемкаЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	ВосстановитьЭлементыПослеВнесенияИлиВыемки();
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
		
		Если СуммаВнесение = 0 Тогда
			
			Если ЕстьСвойство(РезультатВыполнения, "СуммаВнесения") Тогда
				СуммаВнесение = РезультатВыполнения.СуммаВнесения;
			КонецЕсли;
			
		КонецЕсли;
		
		Отказ = Ложь;
		ТекстОшибки = "";
		
		СоздатьВыемкуДС(Отказ, ТекстОшибки);
		
		Если Отказ Тогда
			
			ОтразитьОстаткиНаличныхДенежныхСредствНаФорме(Объект.Организация, Объект.КассаККМ, Истина);
			
			Если ПустаяСтрока(ТекстОшибки) Тогда
				ТекстОшибки = НСтр("ru='Ошибка формирования документа внесения'");
			КонецЕсли;
			
			Доступность = Истина;
			
			ТекстЗаголовка = НСтр("ru = 'Ошибка пробития чека.'");
			ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПанельУправленияЧеком);
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
			
			Возврат;
			
		КонецЕсли;
		
		ОтразитьОстаткиНаличныхДенежныхСредствНаФорме(Объект.Организация, Объект.КассаККМ);
		
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Произведена выемка в размере %1 %2'"), СуммаВыемка, ПредставлениеВалюты);
		ПоказатьОповещениеПользователя(НСтр("ru='Выемка'"), , ТекстПояснения, БиблиотекаКартинок.РМКВыемка);
		
		Если ПараметрыЗакрытияСменыПриАвтоматическойВыемке.ВыемкаПриЗакрытииСмены Тогда
			ЗакрытьСменуЗавершение(Неопределено, ПараметрыЗакрытияСменыПриАвтоматическойВыемке.ДополнительныеПараметры);
			ПараметрыЗакрытияСменыПриАвтоматическойВыемке.ВыемкаПриЗакрытииСмены = Ложь;
		КонецЕсли;
		
	Иначе
		
		ОтразитьОстаткиНаличныхДенежныхСредствНаФорме(Объект.Организация, Объект.КассаККМ, Истина);
		
		ТекстОшибки = НСтр("ru='Ошибка выемки'");
		Если ЕстьСвойство(РезультатВыполнения, "ТекстСообщения") Тогда
			ТекстОшибки = РезультатВыполнения.ТекстСообщения;
		КонецЕсли;
		Если ЕстьСвойство(РезультатВыполнения, "ОписаниеОшибки") Тогда
			ТекстОшибки = РезультатВыполнения.ОписаниеОшибки;
		КонецЕсли;
		
		ПоказатьПредупреждение(, ТекстОшибки, , НСтр("ru='Ошибка выемки ДС.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперациюВнесениеЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	ВосстановитьЭлементыПослеВнесенияИлиВыемки();
	
	Если ЕстьСвойство(РезультатВыполнения, "Результат") И РезультатВыполнения.Результат Тогда
		
		Если СуммаВнесение = 0 Тогда
			
			Если ЕстьСвойство(РезультатВыполнения, "СуммаВнесения") Тогда
				СуммаВнесение = РезультатВыполнения.СуммаВнесения;
			КонецЕсли;
			
		КонецЕсли;
		
		Отказ = Ложь;
		ТекстОшибки = "";
		
		СоздатьВнесениеДС(Отказ, ТекстОшибки);
		
		Если Отказ Тогда
			
			ОтразитьОстаткиНаличныхДенежныхСредствНаФорме(Объект.Организация, Объект.КассаККМ, Истина);
			
			Если ПустаяСтрока(ТекстОшибки) Тогда
				ТекстОшибки = НСтр("ru='Ошибка формирования документа внесения'");
			КонецЕсли;
			
			Доступность = Истина;
			
			ТекстЗаголовка = НСтр("ru = 'Ошибка пробития чека.'");
			ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПанельУправленияЧеком);
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
			
			Возврат;
			
		КонецЕсли;
		
		ОтразитьОстаткиНаличныхДенежныхСредствНаФорме(Объект.Организация, Объект.КассаККМ);
		
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Произведено внесение в размере %1 %2'"), СуммаВнесение, ПредставлениеВалюты);
		ПоказатьОповещениеПользователя(НСтр("ru='Внесение'"), , ТекстПояснения, БиблиотекаКартинок.РМКВнесение);
		
	Иначе
		
		ОтразитьОстаткиНаличныхДенежныхСредствНаФорме(Объект.Организация, Объект.КассаККМ, Истина);
		
		ТекстОшибки = НСтр("ru='Ошибка выемки'");
		
		Если ЕстьСвойство(РезультатВыполнения, "ТекстСообщения") Тогда
			ТекстОшибки = РезультатВыполнения.ТекстСообщения;
		КонецЕсли;
		Если ЕстьСвойство(РезультатВыполнения, "ОписаниеОшибки") Тогда
			ТекстОшибки = РезультатВыполнения.ОписаниеОшибки;
		КонецЕсли;
		
		ПоказатьПредупреждение(, ТекстОшибки, , НСтр("ru='Ошибка внесения'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВнесениеДС(Отказ, ТекстОшибки)
	
	ОбщегоНазначенияРМКПереопределяемый.СоздатьВнесениеДС(ЭтотОбъект, Отказ, ТекстОшибки);
	Если НЕ Отказ Тогда
		ОтразитьИзменениеНаличныхДенежныхСредствКлиентСервер(Объект.Организация, Объект.КассаККМ, ТаблицаКассККМОрганизаций);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВыемкуДС(Отказ, ТекстОшибки)
	
	ОбщегоНазначенияРМКПереопределяемый.СоздатьВыемкуДС(ЭтотОбъект, Отказ, ТекстОшибки);
	Если НЕ Отказ Тогда
		ОтразитьИзменениеНаличныхДенежныхСредствКлиентСервер(Объект.Организация, Объект.КассаККМ, ТаблицаКассККМОрганизаций);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеРучногоСопоставления(ТекущаяСтрока, ОсобенностьУчета, Отказ)
	
	ПараметрыШтрихкодирования = Новый Структура();
	ПараметрыШтрихкодирования.Вставить("Объект", Объект);
	ПараметрыШтрихкодирования.Вставить("КонтролироватьЕМРЦ", КонтролироватьЕМРЦ);
	ПараметрыШтрихкодирования.Вставить("УчитыватьМРЦ", УчитыватьМРЦ);
	
	Если ЕстьСвойство(ДанныеДляРучногоСопоставления, "КодМарки") Тогда
		
		ШтрихкодированиеРМК.РазобратьМаркуИЗаполнитьДанные(ТекущаяСтрока,
			ДанныеДляРучногоСопоставления.КодМарки,
			ОсобенностьУчета,
			ПараметрыШтрихкодирования);
			
	КонецЕсли;
	
	Если ЕстьСвойство(ПараметрыШтрихкодирования, "УпаковкаНеНайдена") Тогда
		
		Отказ = Истина;
		ДанныеДляРучногоСопоставления = Неопределено;
		ЗавершитьВводШтрихкодаУпаковкаНеНайдена(ПараметрыШтрихкодирования.НоменклатураБезУпаковки);
		
	Иначе
		
		Если ЕстьСвойство(ДанныеДляРучногоСопоставления, "EAN") Тогда
			ТекущаяСтрока.Штрихкод = ДанныеДляРучногоСопоставления.EAN;
		КонецЕсли;
		Если ЕстьСвойство(ДанныеДляРучногоСопоставления, "Штрихкод") 
			И ЕстьСвойство(ДанныеДляРучногоСопоставления, "ТоварНеНайденПоШтрихкоду")
			И НЕ ЗначениеЗаполнено(ТекущаяСтрока.Штрихкод) Тогда
			ТекущаяСтрока.Штрихкод = ДанныеДляРучногоСопоставления.Штрихкод;
		КонецЕсли;
		Если ЕстьСвойство(ДанныеДляРучногоСопоставления, "КодМарки") Тогда
			ТекущаяСтрока.КодМаркировки = ДанныеДляРучногоСопоставления.КодМарки;
		КонецЕсли;
		
		СоздатьЗаписьВШтрихкоды(ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура СоздатьЗаписьВШтрихкоды(ТекущаяСтрока)
	ОбщегоНазначенияРМКПереопределяемый.ЗаписатьШтрихкод(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВводШтрихкодаНеверныйКод()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаНеверноОтсканированныйШтрихкод);
	Если ТекущаяСтрока.ЭтоНабор Тогда
		ПредставлениеТовара = ТекущаяСтрока.ПредставлениеНоменклатураХарактеристика;
	Иначе
		ПредставлениеТовара = ТекущийТоварНаименование;
	КонецЕсли;
	
	Элементы.ДекорацияТекстНеправильныйШтрихкод.Заголовок = СтрШаблон("%1%2%3",
		НСтр("ru='Отсканируйте марку'"),
		Символы.ПС,
		ПредставлениеТовара);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВводШтрихкодаМаркаНайденаВЧеке(ПараметрыШтрихкода)
	
	ТекстЗаголовка = НСтр("ru = 'Ошибка ввода кода маркировки.'");
	ТекстОшибки = НСтр("ru = 'Товар с таким кодом маркировки уже добавлен в чек'");
	ПоказатьПредупреждение(, ТекстОшибки, , ТекстЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВводШтрихкодаМаркаВведена(КонтекстПроверкиКонтрольнойМарки)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		НастроитьТекущееКоличество(ТекущаяСтрока);
		НастроитьДоступностьКомандИзмененияКоличества(ТекущаяСтрока);
	КонецЕсли;
	
	КонтекстПроверкиКонтрольнойМарки.КонтекстВызова = "ЗавершитьВводШтрихкодаМаркаВведена";
	
	ПроверкаМаркиВБиблиотекеГосИС = ИспользоватьРазрешительныйРежимГосИС
		И НЕ ТекущаяСтрока = Неопределено
		И КонтекстПроверкиКонтрольнойМарки.ПроверкаМаркиВБиблиотекеГосИС;
	
	Если ПроверкаМаркиВБиблиотекеГосИС И КонтекстПроверкиКонтрольнойМарки.ПодтверждениеПродажиМаркиГосИС Тогда
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект,
			Элементы.ГруппаПодтвержденияКонтрольнойМарки);
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПодтверждениеПродажиОжиданиеПроверки);
		УстановитьДоступностьЭлементовРабочейОбластиФормы(Ложь);
		
		ВременныйКонтекстПроверкиМарки = КонтекстПроверкиКонтрольнойМарки;
		СтраницаДиалога = Элементы.ПодтверждениеПродажиБезПроверкиМарки;
		ОбработатьОшибкуПроверкиМарки(КонтекстПроверкиКонтрольнойМарки, СтраницаДиалога);
		
	ИначеЕсли ПроверкаМаркиВБиблиотекеГосИС И Не КонтекстПроверкиКонтрольнойМарки.ПодтверждениеПродажиМаркиГосИС Тогда
		ОбработатьУспешноеДобавлениеМарки(КонтекстПроверкиКонтрольнойМарки);
	Иначе
		Если ПроверкаМаркиВозможна(КонтекстПроверкиКонтрольнойМарки.КодМаркировки,
				КонтекстПроверкиКонтрольнойМарки.ОсобенностьУчета, КонтекстПроверкиКонтрольнойМарки.Организация) Тогда
			
			ОбработатьКонтрольнуюМарку(КонтекстПроверкиКонтрольнойМарки);
			
		Иначе
			ОбработатьУспешноеДобавлениеМарки(КонтекстПроверкиКонтрольнойМарки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьВводШтрихкодаУпаковкаНеНайдена(ТекущаяНоменклатура)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая
		ИЛИ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоискТовара Тогда
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 Тогда
		ТекущийТоварНаименование = НСтр("ru = ''");
	КонецЕсли;
	
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаИнфоОшибка);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	
	ТекстЗаголовка = НСтр("ru='Сообщите администратору.
								|Не найдена упаковка'");
	ТекстОшибки = СтрЗаменить(НСтр("ru='Для товара %1 не найдена упаковка'"), "%1", ТекущаяНоменклатура.Наименование);
	
	Элементы.ТекстПредупреждениеЗаголовок.Заголовок = ТекстЗаголовка;
	Элементы.ТекстПредупреждениеОшибка.Заголовок = ТекстОшибки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВводШтрихкода(ПараметрыДляОбработкиШтрихкода)
	
	Если НЕ ОжидатьВводМарки Тогда
		Элементы.Товары.ТекущаяСтрока = ПараметрыДляОбработкиШтрихкода.ИдентификаторСтроки;
	КонецЕсли;
	
	Если НЕ Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
		
		Если ПолныйРасчетСкидок Тогда
			ВызватьПолныйАвтоматическийРасчетСкидок();
		ИначеЕсли СкидкиРассчитаны Тогда
			ОтменитьСкидки();
		КонецЕсли;
		
		ДанныеСтроки = Элементы.Товары.ТекущиеДанные;
		
		КодМаркировки = ДанныеСтроки.КодМаркировки;
		ОсобенностьУчета = ДанныеСтроки.ОсобенностьУчета;
		Организация = ДанныеСтроки.Организация;
		
		ПроверкаМаркиВБиблиотекеГосИС = ИспользоватьРазрешительныйРежимГосИС
			И ПараметрыДляОбработкиШтрихкода.Свойство("ПроверкаМаркиВБиблиотекеГосИС");
		
		ПодтверждениеПродажиМаркиГосИС = ПараметрыДляОбработкиШтрихкода.Свойство("ПодтверждениеПродажиМаркиГосИС");
		
		Если ПроверкаМаркиВБиблиотекеГосИС И Не ПодтверждениеПродажиМаркиГосИС Тогда
			Если ПроверкаМаркиВозможна(КодМаркировки, ОсобенностьУчета, Организация) Тогда
				ДанныеСтроки.КонтрольнаяМарка = ДанныеСтроки.КодМаркировки;
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ПолныйКодМаркировки", ДанныеСтроки.КодМаркировки);
				ОписаниеКодаМаркировки = ДанныеСтроки.КодыМаркировкиПоДаннымИБ.НайтиСтроки(ПараметрыОтбора);
				Если ДанныеСтроки.ПоштучноеВыбытие И ОписаниеКодаМаркировки.Количество() = 0 Тогда
					
					Если ОбщегоНазначенияРМККлиентСервер.ЭтоПивнаяПродукция(ДанныеСтроки.ОсобенностьУчета) Тогда
						ТребуетсяПодключениеКега = Истина;
						Для Каждого КодМаркировкиПоДаннымИБ Из ДанныеСтроки.КодыМаркировкиПоДаннымИБ Цикл
							ДанныеМаркировки = МенеджерОборудованияРМККлиентСервер.РазобратьШтриховойКодТовара(КодМаркировкиПоДаннымИБ.ПолныйКодМаркировки);
							Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ДанныеМаркировки, "GTIN")
								И ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ДанныеМаркировки, "СерийныйНомер")
								И СтрНайти(ДанныеСтроки.КодМаркировки, ДанныеМаркировки.GTIN) > 0
								И СтрНайти(ДанныеСтроки.КодМаркировки, ДанныеМаркировки.СерийныйНомер) > 0 Тогда
								ТребуетсяПодключениеКега = Ложь;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если ТребуетсяПодключениеКега Тогда
							ПодключитьКегКОборудованиюРозливаКлиент(ДанныеСтроки);
						КонецЕсли;
					Иначе
						ЭтоПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
						Если ЭтоПродажа Тогда
							ВскрытьПотребительскуюУпаковкуКлиент(ДанныеСтроки);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Если Не ПроверкаМаркиВБиблиотекеГосИС И ДанныеСтроки.ПоштучноеВыбытие Тогда
				ДанныеСтроки.КонтрольнаяМарка = ДанныеСтроки.КодМаркировки;
				
				ЭтоПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
				Если ЭтоПродажа Тогда
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("ПолныйКодМаркировки", ДанныеСтроки.КодМаркировки);
					ОписаниеКодаМаркировки = ДанныеСтроки.КодыМаркировкиПоДаннымИБ.НайтиСтроки(ПараметрыОтбора);
					Если ОписаниеКодаМаркировки.Количество() = 0 Тогда
						ВскрытьПотребительскуюУпаковкуКлиент(ДанныеСтроки);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПроверкаМаркиВБиблиотекеГосИС
			И ПроверкаМаркиВозможна(КодМаркировки, ОсобенностьУчета, Организация)
			И Не ДанныеСтроки.ТребуетсяПроверкаКодаМаркировки Тогда
			
			КонтекстПроверкиКонтрольнойМарки = КонтекстПроверкиКонтрольнойМарки();
			ЗаполнитьЗначенияСвойств(КонтекстПроверкиКонтрольнойМарки, ДанныеСтроки);
			КонтекстПроверкиКонтрольнойМарки.КонтекстВызова = "ЗавершитьВводШтрихкода";
			ОбработатьКонтрольнуюМарку(КонтекстПроверкиКонтрольнойМарки);
			
		ИначеЕсли ПроверкаМаркиВБиблиотекеГосИС И ПодтверждениеПродажиМаркиГосИС Тогда
			
			КонтекстПроверкиКонтрольнойМарки = КонтекстПроверкиКонтрольнойМарки();
			ЗаполнитьЗначенияСвойств(КонтекстПроверкиКонтрольнойМарки, ДанныеСтроки);
			КонтекстПроверкиКонтрольнойМарки.КонтекстВызова = "ЗавершитьВводШтрихкода";
			КонтекстПроверкиКонтрольнойМарки.ПроверкаМаркиВБиблиотекеГосИС = Истина;
			КонтекстПроверкиКонтрольнойМарки.ПодтверждениеПродажиМаркиГосИС = Истина;
			
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
			ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект,
				Элементы.ГруппаПодтвержденияКонтрольнойМарки);
			ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ПодтверждениеПродажиОжиданиеПроверки);
			
			УстановитьДоступностьЭлементовРабочейОбластиФормы(Ложь);
			
			ВременныйКонтекстПроверкиМарки = КонтекстПроверкиКонтрольнойМарки;
			СтраницаДиалога = Элементы.ПодтверждениеПродажиБезПроверкиМарки;
			ОбработатьОшибкуПроверкиМарки(КонтекстПроверкиКонтрольнойМарки, СтраницаДиалога);
			
		Иначе
			
			ТекущийТоварКоличество = ДанныеСтроки.КоличествоУпаковок;
			РассчитатьСуммуВСтрокеТабличнойЧасти();
			РассчитатьСуммуОплатыБонусами();
			НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
			
			ЕстьНезаполненныеДанные();
			
		КонецЕсли;
		
		ТребуетсяВводВеса = ДанныеСтроки.Весовой И ДанныеСтроки.Количество = 0
			И ПараметрыДляОбработкиШтрихкода.Свойство("ДобавлятьВесСПодключенныхВесов");
		Если ТребуетсяВводВеса И Не ДанныеСтроки.НеобходимостьВводаКодаМаркировки Тогда
			ВесТекущегоТовара();
		КонецЕсли;
		
		НастроитьДоступностьПробитьЧек();
		ОбновитьИнформациюНаДисплееПокупателя(ТипыОперацийДисплеяПокупателя.ДобавлениеТовара);
		
	КонецЕсли;
	ЗапуститьОбработкуРезультатаКонтроляПродажПриДобавлении();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВводШтрихкодаНабора()
	
	ЕстьНезаполненныеДанные();
	
	Если НЕ ЗначениеЗаполнено(ВременныйКонтекстПроверкиМарки) Тогда
	
		ОбновитьИнформациюНаДисплееПокупателя(ТипыОперацийДисплеяПокупателя.ДобавлениеТовара);
		
		Если Объект.Товары.Количество() > 0 Тогда
			НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
		КонецЕсли;
			
		РассчитатьСуммуВСтрокеТабличнойЧасти();
		РассчитатьСуммуОплатыБонусами();
		
		РучноеСопоставлениеТовара = Ложь;
		ДанныеДляРучногоСопоставления = Неопределено;
		КодМаркиВРаботе = НСтр("ru = ''");
		
	КонецЕсли;
	ЗапуститьОбработкуРезультатаКонтроляПродажПриДобавлении();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВводШтрихкодаЗаполнитьТаблицуДляВыбора(ПараметрыШтрихкода)
	
	Адрес = ПараметрыШтрихкода.ТаблицаДляВыбораНоменклатуры;
	
	Если ЕстьСвойство(ПараметрыШтрихкода, "КодМарки") Тогда
		КодМаркиВРаботе = ПараметрыШтрихкода.КодМарки;
	КонецЕсли;
	
	ОткрытьКаталогКлиент();
	ЗаполнитьДанныеТаблицыДляВыбораНоменклатуры(Адрес);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьОшибкуЕГАИС(ПараметрыШтрихкода)
	
	ТекстЗаголовка = НСтр("ru = 'Ошибка ЕГАИС.'");
	ТекстОшибки = ПараметрыШтрихкода.ОшибкаЕГАИС;
	
	Если Объект.Товары.Количество() = 0 Тогда
		ПоказатьПредупреждение(, ТекстОшибки, , ТекстЗаголовка);
	Иначе
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеТаблицыДляВыбораНоменклатуры(Адрес)
	
	ТаблицаДляВыбора = ПолучитьИзВременногоХранилища(Адрес);
	
	СписокНоменклатуры = Новый СписокЗначений;
	СписокХарактеристик = Новый СписокЗначений;
	
	Если НЕ ТаблицаДляВыбора.Колонки.Найти("ВладелецПодарка") = Неопределено 
		И ТаблицаДляВыбора.Количество() Тогда
		
		ТекущийВладелецПодарка = ТаблицаДляВыбора[0].ВладелецПодарка;
		СтруктураОтбора = Новый Структура("ВладелецПодарка", ТекущийВладелецПодарка);
		
		ТаблицаДляВыбора = ТаблицаДляВыбора.НайтиСтроки(СтруктураОтбора);
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДляВыбора Цикл
		
		СписокНоменклатуры.Добавить(СтрокаТаблицы.Номенклатура);
		СписокХарактеристик.Добавить(СтрокаТаблицы.Характеристика);
		
	КонецЦикла;
	
	ЭлементОтбора = СписокТоваров.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = СписокНоменклатуры;
	
	// Проверка, на случай, если в конфигурации отключено использование характеристик в настройках
	ДоступноеПолеОтбора = СписокТоваров.Отбор.ДоступныеПоляОтбора.Элементы.Найти("Характеристика");
	Если ДоступноеПолеОтбора <> Неопределено Тогда
		ЭлементОтбора = СписокТоваров.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Характеристика");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение = СписокХарактеристик;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПодаркиПоТекущемуВладельцу(ОчищатьСкидки)
	
	Если ЗначениеЗаполнено(ТекущийВладелецПодарка) Тогда
		ТаблицаПодарковКУдалению = ТаблицаПодарков.НайтиСтроки(Новый Структура("ВладелецПодарка", ТекущийВладелецПодарка));
		Для Каждого СтрокаПодарка Из ТаблицаПодарковКУдалению Цикл
			ТаблицаПодарков.Удалить(СтрокаПодарка);
		КонецЦикла;
		
		Если ОчищатьСкидки Тогда
			СкидкаНаценка = СкидкаПоТекущемуВладельцуПодарка();
			ТаблицаСкидокКУдалению = ТаблицаСкидкиНаценки.НайтиСтроки(Новый Структура("СкидкаНаценка", СкидкаНаценка));
			Для Каждого СтрокаСкидки Из ТаблицаСкидокКУдалению Цикл
				ТаблицаСкидкиНаценки.Удалить(СтрокаСкидки);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ТекущийВладелецПодарка = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКоличествоВесовогоТовара(ТекущаяСтрока, УвеличитьКоличество)
	
	Если УвеличитьКоличество Тогда
		
		ТекущийЭлемент = Элементы.ТекущийТоварКоличество;
		УстановитьТолькоПросмотрЭлементаФормы(Элементы.ТекущийТоварКоличество, Ложь);
		
	Иначе
		
		ТекущийТоварКоличество = 0;
		ТекущаяСтрока.Количество = 0;
		ТекущаяСтрока.КоличествоУпаковок = 0;
		
	КонецЕсли;
	
	ПересчитатьСуммы(ТекущаяСтрока, Истина);
	ПересчетКоличестваТовара(ТекущаяСтрока);
	ВызватьПолныйАвтоматическийРасчетСкидок();
	РассчитатьСуммуОплатыБонусами();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьГорячиеКлавиши()
	
	Если РежимКассыСамообслуживания Или НЕ ЗначениеЗаполнено(ТекущаяНастройкаРМК) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменКомандСкидок = МассивКомандДляЗаполнения();
	МассивКомандФормыВыбора = МассивКомандФормаВыбораКонтрагента();
	Итератор = 0;
	Для Каждого Команда Из ТекущаяНастройкаРМК.ГорячиеКлавиши Цикл
		
		КомандаНаФорме = Элементы.Найти(Команда.ИмяКнопки);
		Если НЕ КомандаНаФорме = Неопределено Тогда
			
			СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша[Команда.Клавиша],
				Команда.АкселераторAlt,
				Команда.АкселераторCtrl,
				Команда.АкселераторShift);
				
			ТекстСочетания = ВернутьТекстСочетанияКлавиш(СочетаниеКлавиш);
				
			Если Команда.ИмяКнопки = "ПробитьЧек" Тогда
				Элементы.ОсновнаяКомандаРаботыСЧеком.СочетаниеКлавиш = СочетаниеКлавиш;
			ИначеЕсли Команда.ИмяКнопки = "ОплатаКартой" Тогда
				Элементы.КомандаОплатыКартой.СочетаниеКлавиш = СочетаниеКлавиш;
			ИначеЕсли Команда.ИмяКнопки = "ОплатаНаличными" Тогда
				Элементы.КомандаОплатыНаличными.СочетаниеКлавиш = СочетаниеКлавиш;
			ИначеЕсли Команда.ИмяКнопки = "ОплатаБонусами" Тогда
				Элементы.КомандаОплатыБонусами.СочетаниеКлавиш = СочетаниеКлавиш;
			Иначе
				КомандаНаФорме.СочетаниеКлавиш = СочетаниеКлавиш;
			КонецЕсли;
			
			ЗаполнитьПодсказки(Команда, ТекстСочетания);
			
		КонецЕсли;
		
		Если НЕ МассивКомандФормыВыбора.Найти(Команда.ИмяКнопки) = Неопределено Тогда
			
			СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша[Команда.Клавиша],
				Команда.АкселераторAlt,
				Команда.АкселераторCtrl,
				Команда.АкселераторShift);
				
			СписокКомандФормаВыбора.Добавить(СочетаниеКлавиш, Команда.ИмяКнопки);
		КонецЕсли;
		
		Если НЕ МассивИменКомандСкидок.Найти(Команда.ИмяКнопки) = Неопределено Тогда
			Итератор = Итератор + 1;
			ЗаполнитьДанныеГорячиеКлавиши(Команда.ЗаголовокКнопки, Итератор, ТекстСочетания);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьТиповыеГорячиеКлавиши()
	
	СочетаниеКлавишИзСтроки = ЗначениеИзСтрокиВнутр("{""#"",69cf4251-8759-11d5-bf7e-0050bae2bc79,1,{0,27,0}}");
	
	Если НЕ СочетаниеКлавишИзСтроки = Неопределено Тогда
		Команды.ГорячаяКлавишаESC.СочетаниеКлавиш = СочетаниеКлавишИзСтроки;
	КонецЕсли;
	
	СочетаниеКлавишиDel = ЗначениеИзСтрокиВнутр("{""#"",69cf4251-8759-11d5-bf7e-0050bae2bc79,1,{0,46,0}}");
	Если Не СочетаниеКлавишиDel = Неопределено Тогда
		Элементы.ГорячаяКлавишаDel.СочетаниеКлавиш = СочетаниеКлавишиDel;
	КонецЕсли;
	
	СочетаниеКлавишиEnter = ЗначениеИзСтрокиВнутр("{""#"",69cf4251-8759-11d5-bf7e-0050bae2bc79,1,{0,13,0}}");
	Если Не СочетаниеКлавишиEnter = Неопределено Тогда
		Элементы.ГорячаяКлавишаEnter.СочетаниеКлавиш = СочетаниеКлавишиEnter;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСменуКлиент()
	
	Если Не РаботаСЧекомЗавершена() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаКассККМОрганизаций.Количество() > 1 Тогда
		
		ПереключитьНаСтраницуВыбораКассыККМ();
		Возврат;
		
	ИначеЕсли ТаблицаКассККМОрганизаций.Количество() = 1 Тогда
		
		ПроверитьКоличествоНепробитыхЧеков();
		
		Если ТаблицаКассККМОрганизаций[0].Открыта Тогда
			
			ПараметрыЗакрытияСмены = Новый Структура();
			ПараметрыЗакрытияСмены.Вставить("ПредлагатьОткрытьСмену", Ложь);
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытьСменуПродолжение", ЭтотОбъект, ПараметрыЗакрытияСмены);
			
			Если ТаблицаКассККМОрганизаций[0].КоличествоОтложенныхИНепробитыхЧеков <> 0 Тогда
				
				ТекстЗаголовка = НСтр("ru = 'Проверка непробитых чеков.'");
				ТекстВопроса = СтрШаблон(НСтр("ru = 'Имеются непробитые и отложенные чеки в количестве: %1.
													|Закрыть смену?'"), ТаблицаКассККМОрганизаций[0].КоличествоОтложенныхИНепробитыхЧеков);
				КнопкаПоУмолчанию = КодВозвратаДиалога.Нет;
				
				СписокКнопок = Новый СписокЗначений;
				СписокКнопок.Добавить(КодВозвратаДиалога.Да, "Закрыть");
				СписокКнопок.Добавить(КодВозвратаДиалога.Нет, "Отменить");
				
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок, , КнопкаПоУмолчанию, ТекстЗаголовка);
				
			Иначе
				
				ТекстВопроса = НСтр("ru='Уверены, что хотите закрыть смену?'");
				ЗаголовокВопроса = НСтр("ru='Закрытие смены'");
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопроса);
				
			КонецЕсли;
			
		Иначе
			ОткрытьСменуКлиент();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СверкаИтоговКлиент()
	
	Если Не РаботаСЧекомЗавершена() Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СверкаИтоговЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Уверены, что хотите выполнить сверку итогов?'");
	ЗаголовокВопроса = НСтр("ru='Сверка итогов'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторнаяПечатьЧекаКлиент()
	
	КассыККМИОрганизации = ПодключенныеКассыККМИОрганизации();
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("МассивКассККМ", КассыККМИОрганизации.МассивКассККМ);
	ПараметрыОткрытия.Вставить("МассивОрганизаций", КассыККМИОрганизации.МассивОрганизаций);
	ПараметрыОткрытия.Вставить("ТорговыйОбъект", Объект.ТорговыйОбъект);
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Чеки для повторной печати'"));
	ПараметрыОткрытия.Вставить("РежимПечатиЧека", "ПечатьПробитогоЧека");
	ПараметрыОткрытия.Вставить("ВыводитьКомментарийКЧеку", ВыводитьКомментарийКЧеку);
	
	ОбработчикОповещенияОткрытияФормыВыбора = Новый ОписаниеОповещения(
		"ОповещениеОткрытьФормуВыбораЧекаПриПечатиПробитогоЧека", ЭтотОбъект);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораЧека",
		ПараметрыОткрытия, ЭтотОбъект, , , , ОбработчикОповещенияОткрытияФормыВыбора, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммы(ТекущаяСтрока, ОбнулитьСуммыОплат = Ложь)
	
	ОбщегоНазначенияРМККлиентСервер.ПересчитатьСуммуВСтроке(ЭтотОбъект, ТекущаяСтрока, , ИспользоватьАвтоматическиеСкидки);
	ОбщегоНазначенияРМККлиентСервер.РассчитатьСуммуНДС(Объект, ТекущаяСтрока);
	ОбщегоНазначенияРМККлиентСервер.СуммаДокумента(Объект);
	ПересчитатьИтогиТабличнойЧастиТовары(ОбнулитьСуммыОплат);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьСвойство(Объект, ИмяРеквизита)
	Возврат ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(Объект, ИмяРеквизита);
КонецФункции

&НаСервере
Процедура ОчиститьДанныеПокупателя()
	
	РассчитыватьБонусы = Ложь;
	Объект.ДисконтнаяКарта = Неопределено;
	Если НЕ КонтрагентВыбран Тогда
		Объект.Контрагент = Неопределено;
	КонецЕсли;
	ПараметрыКартыЛояльности = Неопределено;
	ЛитералПустойСтроки = НСтр("ru = ''");
	
	НеобходимоПерезаполнитьТаблицуУправляемыхСкидок = Истина;
	
	Если НЕ ИспользоватьСерверЛояльностиПолучательДанных Тогда
		
		НайденнаяКартаДатаРождения = ЛитералПустойСтроки;
		НайденнаяКартаНомер = ЛитералПустойСтроки;
		НайденнаяКартаПочта = ЛитералПустойСтроки;
		НайденнаяКартаТелефон = ЛитералПустойСтроки;
		НайденнаяКартаФИО = ЛитералПустойСтроки;
		НайденнаяКартаСуммаПродаж = ЛитералПустойСтроки;
		НайденнаяКартаНеДействительна = Ложь;
		
	КонецЕсли;
	
	ОтправкаЧекаПочта = ЛитералПустойСтроки;
	ОтправкаЧекаТелефон = ЛитералПустойСтроки;
	
	КоличествоБонусов = 0;
	БонусыДоступноКОплате = 0;
	ПроцентОплатыБонусами = 0;
	КурсБонусов = 1;
	// Неопределено - не задано, используется стандартный расчет по проценту, если число - то это получено с сервера лояльности
	ТаблицаСуммМаксимальнойОплатыбонусами.Очистить(); 
	Элементы.СуммаОплаченоБонусами.МаксимальноеЗначение = 0;
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаБонусами, Ложь);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьДоступныхБонусов(Элементы, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ЗакрытьФормуДанныеПокупателя, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаВыборМеню, Истина);
	ПараметрыВводаКодаSMS = Неопределено;
	Элементы.ГруппаВидОплатыБонусы.РасширеннаяПодсказка.Заголовок = "";
	РежимПанелиДанныеПокупателя = 0;
	ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьДоступностьСозданияКарты(ЭтотОбъект, Истина, Истина);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеКартыСервер()
	
	КартаЛояльности = Объект.ДисконтнаяКарта;
	ИсходныеДанные = Новый Структура();
	ИсходныеДанные.Вставить("НомерКартыДоИзменения", НомерКартыДоИзменения);
	ИсходныеДанные.Вставить("МагнитныйКодКартыЛояльности", НайденнаяКартаНомер);
	ИсходныеДанные.Вставить("НовыйEmailКлиента", НайденнаяКартаПочта);
	ИсходныеДанные.Вставить("НовыйНомерТелефонаКлиента", НайденнаяКартаТелефон);
	ОбщегоНазначенияРМКПереопределяемый.СохранитьДанныеКартыЛояльности(КартаЛояльности, ИсходныеДанные);
	
	ИзменитьДоступностьПолейНайденнойКарты();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаменитьСимволGS1(Штрихкод)
	
	СимволGS1 = МенеджерОборудованияРМККлиентСервер.РазделительGS1();
	Разделитель = МенеджерОборудованияРМККлиентСервер.ЭкранированныйСимволGS1();
	
	Штрихкод = СтрЗаменить(Штрихкод, СимволGS1, Разделитель);
	
КонецПроцедуры

&НаКлиенте
Процедура УточнитьПравильностьНоменклатурыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
		Если НЕ ТекущаяСтрока = Неопределено Тогда
			
			ТекущаяСтрока.КодМаркировки = ДополнительныеПараметры.Штрихкод;
			
			КонтекстПроверкиКонтрольнойМарки = КонтекстПроверкиКонтрольнойМарки();
			ЗаполнитьЗначенияСвойств(КонтекстПроверкиКонтрольнойМарки, ТекущаяСтрока);
			
			ЗавершитьВводШтрихкодаМаркаВведена(КонтекстПроверкиКонтрольнойМарки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьИнтерфейсРабочегоМестаКассира(ОчищатьДисплейПокупателя = Истина)
	
	Интервал = ?(ОчищатьДисплейПокупателя, 0.5, 15);
	ПодключитьОбработчикОжидания("ОбработкаПростояДисплеяПокупателя", Интервал, Истина);
	ОчиститьДанныеКартыЛояльности();
	СоздатьНовыйНабор(ПараметрыПустойСтраницы);
	НачатьЗавершениеСообщенияОбОплате();
	ПривестиПараметрыПробитияЧекаКЗначениямПоУмолчанию();
	ОбновитьДанныеИзбранныхИПлиток();
	НастроитьКомандыОплаты();
	ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
	Если НачинатьНовыйЧекВРежимеСкупка Тогда
		ПереключитьРежимНаСкупка();
	Иначе
		СформироватьЗаголовок();
	КонецЕсли;
	СформироватьЗаголовокКнопокРассчитатьСкидки();
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	НастроитьЭлементыФормы(Элементы.Страницы.ТекущаяСтраница, Ложь);
	НастроитьВидимостьОплатыQRКодом(Истина);
	ОбработатьИзменениеТаблицыТоваровНаКлиенте();
	
	ПлиткаДомойКлиент();
	ОчиститьКэшСтрокТоваровКорзины();
	ИнтерфейсРМКСлужебныйКлиент.ОчиститьКэшКонтроляПродаж(КэшКонтроляПродаж, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СистемыНалогообложенияДоступныеВКассеККМ(ИдентификаторУстройства)
	
	СистемыНалогообложения = Новый Массив();
	
	Если ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		
		ПараметрыРегистрацииУстройства =
			МенеджерОборудованияРМК.ПараметрыРегистрацииУстройства(ИдентификаторУстройства);
		
		Если ПараметрыРегистрацииУстройства.Свойство("КодыСистемыНалогообложения")
			И ЗначениеЗаполнено(ПараметрыРегистрацииУстройства.КодыСистемыНалогообложения) Тогда
			
			ПрименяемыеКодыНалогообложения = ПараметрыРегистрацииУстройства.КодыСистемыНалогообложения;
			
			МассивКодовСНО = СтрРазделить(ПрименяемыеКодыНалогообложения, ",");
			
			Для Каждого КодСНО Из МассивКодовСНО Цикл
				
				Если КодСНО = "3" Тогда
					Продолжить;
				КонецЕсли;
				
				СНО = МенеджерОборудованияРМККлиентСервер.СистемаНалогообложенияККТПоКоду(Число(КодСНО));
				СистемыНалогообложения.Добавить(СНО);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СистемыНалогообложения;
	
КонецФункции

&НаСервереБезКонтекста
Функция СуммаБНОплатыСПодключеннымЭквайрингом(ЧекККМ)
	
	СуммаОплат = 0;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьСуммуБНОплатыЧекаККМ(ЧекККМ, СуммаОплат);
	
	Возврат СуммаОплат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СистемаНалогообложенияЧека(ЧекККМ)
	Возврат ОбщегоНазначенияРМК.СистемаНалогообложенияЧека(ЧекККМ);
КонецФункции

&НаСервере
Процедура СопоставитьСТекущейСтрокой(Отказ)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	ЗаполнитьДанныеРучногоСопоставления(ТекущаяСтрока, ТекущаяСтрока.ОсобенностьУчета, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораЗаказаПокупателя(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		ОформитьРежимНовогоЧека("Продажа");
		Возврат;
		
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если ЕстьСвойство(Результат, "ПечатьЗаказа") Тогда
			ОформитьРежимНовогоЧека("Продажа");
			Если Результат.ПечатьЗаказа Тогда
				НапечататьЗаказПокупателя(Результат.ДокументЗаказ);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Отказ = Ложь;
	ОписаниеОшибки = "";
	ДополнительныеДанные = ШаблонДополнительныхДанныхЗапросаКонтроляПродаж(ЭтотОбъект);
	ЗаполнитьДанныеИзЗаказаПокупателя(Результат, ДополнительныеДанные, Отказ, ОписаниеОшибки);
	Если Не ДополнительныеДанные.ДанныеКонтроляПродаж = Неопределено Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.ДобавитьНовыеДанныеКэшаПродаж(КэшКонтроляПродаж,
			ДополнительныеДанные.ДанныеКонтроляПродаж);
	КонецЕсли;
	ЭтапыКонтроляПродаж = ИнтерфейсРМКСлужебныйКлиент.ЭтапыКонтроляПродаж();
	ИнтерфейсРМКСлужебныйКлиент.ВыполнитьПроверкиКонтроляПродаж(ЭтотОбъект, ЭтапыКонтроляПродаж.ОткрытиеЧека);
	ИнтерфейсРМКСлужебныйКлиент.ОчиститьРезультатКонтроляПродаж(РезультатКонтроляПродаж);
	
	Если НЕ Отказ Тогда
		СформироватьЗаголовок();
		ПересчитатьКэшСкидкиНаценки();
		УстановитьАктивностьСтроки();
		ПересчитатьИтогиТабличнойЧастиТовары(Ложь);
		НастроитьФормуВРежимПродажаПоЗаказу();
		Если ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеЛояльностиЗаполнены(ЭтотОбъект) Тогда
			ЗавершитьВводШтрихкодаНайденаКарта(КодВозвратаДиалога.Нет);
		КонецЕсли;
		ЭтоВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
		Если ЭтоВозврат Тогда
			Элементы.ГруппаИнфо.ЦветФона = ЦветаФормы.ФонРежимаВозврат;
		КонецЕсли;
		Если СуммаОплаченоВРассрочку > 0 Тогда
			ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
			ПараметрыПересчета.ПоКомандеПредоплата = Истина;
			РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
		ИначеЕсли СуммаОплаченоЗачетАванса > 0 Тогда
			РассчитатьСуммыОплаты();
		КонецЕсли;
		ОбщегоНазначенияРМККлиентПереопределяемый.ПослеВыбораЗаказаПокупателя(ЭтотОбъект);
	Иначе
		ОформитьРежимНовогоЧека("Продажа");
		ПоказатьПредупреждение(, ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыборДокументаБезналичнойОплаты(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		ОформитьРежимНовогоЧека("Продажа");
		Возврат;
		
	КонецЕсли;
	
	ЭтоДокументБезналичнойОплаты = Ложь;
	Если ЕстьСвойство(Результат, "ДокументРасчета") Тогда
		ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьПризнакЭтоДокументБезналичнойОплаты(
			Результат.ДокументРасчета,
			ЭтоДокументБезналичнойОплаты);
	КонецЕсли;
	
	Если ЭтоДокументБезналичнойОплаты Тогда
		
		ДополнительныеДанные = ШаблонДополнительныхДанныхЗапросаКонтроляПродаж(ЭтотОбъект);
		ЗаполнитьДанныеПоДокументуБезналичнойОплаты(Результат, ДополнительныеДанные);
		Если Не ДополнительныеДанные.ДанныеКонтроляПродаж = Неопределено Тогда
			ИнтерфейсРМКСлужебныйКлиентСервер.ДобавитьНовыеДанныеКэшаПродаж(КэшКонтроляПродаж,
				ДополнительныеДанные.ДанныеКонтроляПродаж);
		КонецЕсли;
		ЭтапыКонтроляПродаж = ИнтерфейсРМКСлужебныйКлиент.ЭтапыКонтроляПродаж();
		ИнтерфейсРМКСлужебныйКлиент.ВыполнитьПроверкиКонтроляПродаж(ЭтотОбъект, ЭтапыКонтроляПродаж.ОткрытиеЧека);
		ИнтерфейсРМКСлужебныйКлиент.ОчиститьРезультатКонтроляПродаж(РезультатКонтроляПродаж);
		
		СформироватьЗаголовок();
		УстановитьАктивностьСтроки();
		ПересчитатьИтогиТабличнойЧастиТовары(Ложь);
		РассчитатьСуммыОплаты();
		НастроитьФормуВРежимБанковскогоПлатежа();
		НастроитьДоступностьПробитьЧек();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыборДокументаРасчета(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		ОформитьРежимНовогоЧека("Продажа");
		ЭтоЗачетАванса = Ложь;
		ЭтоОплатаРассрочки = Ложь;
		Возврат;
		
	КонецЕсли;
	
	ОбработатьВыборДокументаРасчета(Результат, КэшКонтроляПродаж);
	ЭтапыКонтроляПродаж = ИнтерфейсРМКСлужебныйКлиент.ЭтапыКонтроляПродаж();
	ИнтерфейсРМКСлужебныйКлиент.ВыполнитьПроверкиКонтроляПродаж(ЭтотОбъект, ЭтапыКонтроляПродаж.ОткрытиеЧека);
	ИнтерфейсРМКСлужебныйКлиент.ОчиститьРезультатКонтроляПродаж(РезультатКонтроляПродаж);
	
	СформироватьЗаголовок();
	УстановитьАктивностьСтроки();
	
	Если РежимЦифровойПанели = РежимыЦифровойПанели.ДанныеПокупателя Тогда
		ЗакрытьФормуДанныеПокупателяСОтменойПробитияЧека();
	КонецЕсли;
	
	ПересчитатьИтогиТабличнойЧастиТовары(Ложь);
	РассчитатьСуммыОплаты();
	НастроитьФормуВРежимДокументРасчета();
	НастроитьДоступностьПробитьЧек();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборДокументаРасчета(Результат, ДанныеКонтроляПродаж)
	
	ДополнительныеДанные = ШаблонДополнительныхДанныхЗапросаКонтроляПродаж(ЭтотОбъект);
	ОбщегоНазначенияРМКПереопределяемый.ОбработатьВыборДокументаРасчета(Результат, ЭтотОбъект, ДополнительныеДанные);
	ДополнитьСведенияОНоменклатуре();
	Если Не ДополнительныеДанные.ДанныеКонтроляПродаж = Неопределено Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.ДобавитьНовыеДанныеКэшаПродаж(ДанныеКонтроляПродаж,
			ДополнительныеДанные.ДанныеКонтроляПродаж);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуВРежимБанковскогоПлатежа()
	
	ВыбранБанковскийПлатеж = Истина;
	
	НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
	
	УстановитьДоступностьЭлементаФормы(Элементы.Каталог, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.УправляемыеСкидки, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварУправляемая, Ложь);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ПанельИзбранныхТоваров, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаВидовОплат, Ложь);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаБонусами, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуВРежимДокументРасчета()
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнфо, Ложь);
	Если РежимНачальнойСтраницы = 1 Тогда
		ТекущаяСтраница = Элементы.СтраницаОбщая;
	Иначе
		ТекущаяСтраница = Элементы.СтраницаПустая;
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		ТекущаяСтраница = Элементы.СтраницаОбщая;
	КонецЕсли;
	
	НастроитьЭлементыФормы(ТекущаяСтраница, Истина);
	
	Если ЭтоЗачетАванса ИЛИ ЭтоОплатаРассрочки Тогда
		
		СуммаОплаченоЗачетАванса = СуммаОстаткаДокументаРасчета;
		ОплатаЗачетАвансаКлиент();
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаЗачетАванса, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.ЗачетАванса, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаЗачетАванса, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВидОплатыЗачетАванса, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.Предоплата, Ложь);
		ЗаполнитьТаблицуОплат();
		
	КонецЕсли;
	
	Если ЭтоОплатаРассрочки И СуммаОплаченоЗачетАванса = 0 Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаЗачетАванса, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуВРежимПродажаПоЗаказу()
	
	Элементы.ГруппаИнфо.ЦветФона = ЦветаФормы.ФонРежимаПродажа;
	
	НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОплатаЗачетАванса, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ЗачетАванса, Ложь);
	
	Если ЭтоЗачетАванса Или ЭтоОплатаРассрочки Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВидОплатыЗачетАванса, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаЗачетАванса, Истина);
	КонецЕсли;
	
	Если ЭтоВнесениеПредоплатыПоЗаказу Или ЭтоОплатаРассрочки Тогда
		Элементы.ГруппаИнфо.ЦветФона = ЦветаФормы.ФонРежимаПредоплата;
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаВРассрочку, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.Предоплата, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРучнаяСкидкаНаТовар, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.УправляемыеСкидки, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварУправляемая, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКнопкиРасчетаСкидок, Ложь);
	ИспользоватьАвтоматическиеСкидки = Ложь;
	
	Если ИспользоватьАвтоматическиеСкидкиПриПродажеПоЗаказу Тогда
		ИспользоватьАвтоматическиеСкидки = Истина;
		СкидкиРассчитаны = Истина;
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКнопкиРасчетаСкидок, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеИзЗаказаПокупателя(ЗаказПокупателя, ДополнительныеДанные, Отказ, ОписаниеОшибки)
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПоЗаказу(ЗаказПокупателя, ЭтотОбъект, Отказ, ОписаниеОшибки,
		ДополнительныеДанные);
	ДополнитьСведенияОНоменклатуре();
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеЛояльностиЗаполнены(ЭтотОбъект) Тогда
		
		НайденнаяКартаЛояльности = Неопределено;
		Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			ШтрихкодированиеРМКПереопределяемый.ЗаполнитьДанныеНайденнойКартыЛояльности(Объект.ДисконтнаяКарта, НайденнаяКартаЛояльности);
		ИначеЕсли ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ШтрихкодированиеРМКПереопределяемый.ЗаполнитьДанныеНайденнойКартыЛояльности(Объект.Контрагент, НайденнаяКартаЛояльности);
		КонецЕсли;
		
		Если НЕ НайденнаяКартаЛояльности = Неопределено Тогда
			ШтрихкодированиеРМК.ЗаполнитьФормуПоДисконтнойКарте(ЭтотОбъект, НайденнаяКартаЛояльности);
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоДокументуБезналичнойОплаты(ДанныеВыбора, ДополнительныеДанные)
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПоДокументуБезналичнойОплаты(ДанныеВыбора, ЭтотОбъект,
		ДополнительныеДанные);
	ДополнитьСведенияОНоменклатуре();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеНаОснованииЧекаККМ(ЧекККМ, ДополнительныеПараметры = Неопределено)
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьНаОснованииЧекаККМ(ЭтотОбъект, ЧекККМ, ДополнительныеПараметры);
	ДополнитьСведенияОНоменклатуре();
	
	ИтераторДобавления = 0;
	Для Каждого СтрокаОплаты Из ТаблицаОплатКартой Цикл
		Если ИтераторДобавления <> 0 Тогда
			НаименованиеРеквизитаПоляСуммы = "СуммаОплаченоБН_" + Строка(ИтераторДобавления);
			НаименованиеГруппыЭлементовПоляСуммы = "ГруппаОплатаКартой_" + Строка(ИтераторДобавления);
			НаименованиеГруппыОплаты = "ГруппаВидОплатыКартойГоризонтально_" + Строка(ИтераторДобавления);
		Иначе
			НаименованиеРеквизитаПоляСуммы = "СуммаОплаченоБН_0";
			НаименованиеГруппыЭлементовПоляСуммы = "ГруппаОплатаКартой";
			НаименованиеГруппыОплаты = "ГруппаВидОплатыКартойГоризонтально";
		КонецЕсли; 
		КоличествоДополнительныхКарт = КоличествоДополнительныхКарт + 1;
		УстановитьДоступностьЭлементаФормы(Элементы[НаименованиеГруппыОплаты], Истина);
		УстановитьВидимостьЭлементаФормы(Элементы[НаименованиеГруппыЭлементовПоляСуммы], Истина);
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы[НаименованиеГруппыЭлементовПоляСуммы]);
		ЭтотОбъект[НаименованиеРеквизитаПоляСуммы] = СтрокаОплаты.Сумма;
		Если КоличествоДополнительныхКарт < 3 И ИспользоватьОплатуНесколькимиКартами Тогда
			ДобавитьРеквизитыОплатыКартой(ИтераторДобавления + 1);
		КонецЕсли;
		ИтераторДобавления = ИтераторДобавления + 1;
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		
		ТекущаяСтрока.ОтображаетсяСкидкаПроцентом = ЗначениеЗаполнено(ТекущаяСтрока.ПроцентСкидкиНаценки);
		ТекущаяСтрока.ОтображаетсяСкидкаСуммой =
			НЕ ТекущаяСтрока.ОтображаетсяСкидкаПроцентом И ЗначениеЗаполнено(ТекущаяСтрока.СуммаСкидкиНаценки);
			
		Если СерииНеВыгружаются И ЗначениеЗаполнено(ТекущаяСтрока.Серия) Тогда
			ТекущаяСтрока.ИдентификаторСерий = Строка(ТекущаяСтрока.Серия.УникальныйИдентификатор());
		КонецЕсли;
			
	КонецЦикла;
	
	Если Не ЭтоЧекКоррекции И Объект.Товары.Количество() > 0 Тогда
		
		АктуализироватьСНО = Истина;
		СНОНовая = Неопределено;
		ТаблицаТоваровЧекаПродажи = Объект.Товары.Выгрузить();
		
		Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
			
			ОрганизацияВСтрокеЧекаПродажи = ТекущаяСтрока.Организация;
			ТекущаяСтрока.Организация = Неопределено;
			ТекущаяСтрока.СистемаНалогообложения = Неопределено;
			
			МассивТоваров = Новый Массив;
			МассивТоваров.Добавить(ТекущаяСтрока.Номенклатура);
			ТаблицаТовары = Новый ТаблицаЗначений;
			ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьТаблицуТовары(МассивТоваров, ТаблицаТовары);
			
			Если ТаблицаТовары.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТаблицаТовары[0]);
			КонецЕсли;
			
			ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьОрганизациюПродажи(ТекущаяСтрока, ЭтотОбъект);
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Организация) Тогда
				ТекущаяСтрока.Организация = ОсновнаяОрганизация;
			КонецЕсли;
			
			Если ОрганизацияВСтрокеЧекаПродажи = ТекущаяСтрока.Организация Тогда
				
				Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.СистемаНалогообложения) Тогда
					ТекущаяСтрока.СистемаНалогообложения = ОбщегоНазначенияРМК.СНОККТДляОрганизации(ЭтотОбъект, ТекущаяСтрока);
				КонецЕсли;
				
				Если СНОНовая = Неопределено Тогда
					СНОНовая = ТекущаяСтрока.СистемаНалогообложения;
				Иначе
					Если Не СНОНовая = ТекущаяСтрока.СистемаНалогообложения Тогда
						АктуализироватьСНО = Ложь;
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				АктуализироватьСНО = Ложь;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СНОНовая = Неопределено Тогда
			АктуализироватьСНО = Ложь;
		КонецЕсли;
		
		Объект.Товары.Загрузить(ТаблицаТоваровЧекаПродажи);
		
		Если АктуализироватьСНО Тогда
			ВыбраннаяСистемаНалогообложения = СНОНовая;
			Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
				ТекущаяСтрока.СистемаНалогообложения = СНОНовая;
				СтавкаНДС = ПродажиРМК.АктуальнаяСтавкаНДСДляТовара(Объект, ТекущаяСтрока, ТекущаяСтрока.СистемаНалогообложения);
				Если Не ТекущаяСтрока.СтавкаНДС = СтавкаНДС Тогда
					ТекущаяСтрока.СтавкаНДС = СтавкаНДС;
					ОбщегоНазначенияРМККлиентСервер.РассчитатьСуммуНДС(Объект, ТекущаяСтрока);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеЛояльностиЗаполнены(ЭтотОбъект) Тогда
		
		НайденнаяКартаЛояльности = Неопределено;
		Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			ШтрихкодированиеРМКПереопределяемый.ЗаполнитьДанныеНайденнойКартыЛояльности(Объект.ДисконтнаяКарта,
				НайденнаяКартаЛояльности);
		ИначеЕсли ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ШтрихкодированиеРМКПереопределяемый.ЗаполнитьДанныеНайденнойКартыЛояльности(Объект.Контрагент,
				НайденнаяКартаЛояльности);
		Иначе
			НайденнаяКартаЛояльности = ЭтотОбъект.ПараметрыКартыЛояльности;
		КонецЕсли;
		
		Если НЕ НайденнаяКартаЛояльности = Неопределено Тогда
			ШтрихкодированиеРМК.ЗаполнитьФормуПоДисконтнойКарте(ЭтотОбъект, НайденнаяКартаЛояльности);
		КонецЕсли;
			
	КонецЕсли;
	
	ЗаполнитьДанныеПродавца();
КонецПроцедуры

&НаКлиенте
Функция СтруктураПараметровПересчетаСуммОплаты()
	
	ПараметрыПересчета = Новый Структура;
	ПараметрыПересчета.Вставить("ПоКомандеНал", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеБН", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеБезнал", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеВРассрочку", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеЗачетАванса", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеКредит", Ложь);
	ПараметрыПересчета.Вставить("ПриИзмененииБНОплаты", Ложь);
	ПараметрыПересчета.Вставить("ПересчитыватьОкругление", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеПредоплата", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеПереключитьЧек", "");
	ПараметрыПересчета.Вставить("ПоКомандеОплатитьСертификатом", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеОтменитьОплатуСертификатом", Ложь);
	ПараметрыПересчета.Вставить("ПриИзмененииСуммыОплатыСертификатом", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеОплатаQRКодом", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеОтменитьОплатуQRКодом", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеОплатитьСертификатомНСПК", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеОтменитьОплатуСертификатомНСПК", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеЗаменаТоваров", Ложь);
	ПараметрыПересчета.Вставить("ПоКомандеОплатитьВсюСуммуБонусами", Ложь);
	
	Возврат ПараметрыПересчета;
	
КонецФункции

&НаКлиенте
Процедура СписокТоваровВыборКлиент(ДанныеВыбора, ВесТовара = 0, ПропуститьКонтроль = Ложь)
	
	ДанныеДобавляемогоТовара = Новый Структура();
	ДанныеДобавляемогоТовара.Вставить("Номенклатура", ДанныеВыбора.Номенклатура);
	ДанныеДобавляемогоТовара.Вставить("Цена", ДанныеВыбора.Цена);
	ДанныеДобавляемогоТовара.Вставить("ВыборТовараВручную", Истина);
	ДанныеДобавляемогоТовара.Вставить("ПропуститьКонтроль", ПропуститьКонтроль);
	
	Если ДанныеВыбора.Свойство("Характеристика") Тогда
		ДанныеДобавляемогоТовара.Вставить("Характеристика", ДанныеВыбора.Характеристика);
	КонецЕсли;
	
	Если ДанныеВыбора.Свойство("Серия")
		И НЕ СерииНеВыгружаются Тогда
		ДанныеДобавляемогоТовара.Вставить("Серия", ДанныеВыбора.Серия);
	КонецЕсли;
	
	Если ДанныеВыбора.Свойство("Упаковка") Тогда
		ДанныеДобавляемогоТовара.Вставить("Упаковка", ДанныеВыбора.Упаковка);
	КонецЕсли;
	
	Если ДанныеВыбора.Свойство("ОсобенностьУчета") Тогда
		ДанныеДобавляемогоТовара.Вставить("ОсобенностьУчета", ДанныеВыбора.ОсобенностьУчета);
	КонецЕсли;
	
	Если ДанныеВыбора.Свойство("ВидНоменклатуры") Тогда
		ДанныеДобавляемогоТовара.Вставить("ВидНоменклатуры", ДанныеВыбора.ВидНоменклатуры);
	КонецЕсли;
	
	Если ДанныеВыбора.Свойство("Организация") Тогда
		ДанныеДобавляемогоТовара.Вставить("Организация", ДанныеВыбора.Организация);
	КонецЕсли;
	Если ДанныеВыбора.Свойство("Количество") Тогда
		ДанныеДобавляемогоТовара.Вставить("Количество", ДанныеВыбора.Количество);
	КонецЕсли;
	Если ДанныеВыбора.Свойство("КоличествоУпаковок") Тогда
		ДанныеДобавляемогоТовара.Вставить("КоличествоУпаковок", ДанныеВыбора.КоличествоУпаковок);
	КонецЕсли;
	Если ДанныеВыбора.Свойство("ВладелецПодарка") Тогда
		ДанныеДобавляемогоТовара.Вставить("ВладелецПодарка", ДанныеВыбора.ВладелецПодарка);
	КонецЕсли;
	Если ДанныеВыбора.Свойство("Подарок") Тогда
		ДанныеДобавляемогоТовара.Вставить("Подарок", ДанныеВыбора.Подарок);
	КонецЕсли;
	Если ДанныеВыбора.Свойство("ОбластьПредоставленияДокумент") Тогда
		ДанныеДобавляемогоТовара.Вставить("ОбластьПредоставленияДокумент", ДанныеВыбора.ОбластьПредоставленияДокумент);
	КонецЕсли;
	Если ДанныеВыбора.Свойство("ВыводитьПодарокВЧек") Тогда
		ДанныеДобавляемогоТовара.Вставить("ВыводитьПодарокВЧек", ДанныеВыбора.ВыводитьПодарокВЧек);
	КонецЕсли;
	Если ВесТовара > 0 Тогда
		ДанныеДобавляемогоТовара.Вставить("Количество", ВесТовара);
		ДанныеДобавляемогоТовара.Вставить("КоличествоУпаковок", ВесТовара);
	КонецЕсли;
	
	Если ДанныеВыбора.Свойство("ИндексКэшаСтрокиТовара") Тогда
		Если Не КэшиСтрокТоваров = Неопределено Тогда
			Если КэшиСтрокТоваров.Свойство("КэшПлитки") Тогда
				Если ДанныеВыбора.ИндексКэшаСтрокиТовара > 0 Тогда
					ДанныеДобавляемогоТовара.Вставить("ИндексКэшаСтрокиТовара", ДанныеВыбора.ИндексКэшаСтрокиТовара);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЭтоОбработкаСопоставленияТовара = Ложь;
	Если ЗначениеЗаполнено(ВременныйКонтекстПроверкиМарки) Тогда
		Если ЕстьСвойство(ВременныйКонтекстПроверкиМарки, "ЭтоОбработкаСопоставленияТовара") 
			И ВременныйКонтекстПроверкиМарки.ЭтоОбработкаСопоставленияТовара Тогда
			ЭтоОбработкаСопоставленияТовара = Истина;
		КонецЕсли;
	Иначе
		Если НЕ ДанныеДляРучногоСопоставления = Неопределено Тогда
			ЭтоОбработкаСопоставленияТовара = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОбработатьКакРучнойПодбор = (Не ПоискТоваровОткрытИзСтрокиВвода);
	Если ПоискТоваровОткрытИзСтрокиВвода 
		Или (ИспользоватьНовыйПодборТоваров И (ЗакрыватьПодборПриВыбореТовара ИЛИ ЭтоОбработкаСопоставленияТовара)) Тогда
		
		ЗакрытьПоискТоваровКлиент();
		Если ЭтоОбработкаСопоставленияТовара Тогда
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьРазрешительныйРежимГосИС
		И ЭтоОбработкаСопоставленияТовара И НЕ ДанныеДляРучногоСопоставления = Неопределено
		И ДанныеДляРучногоСопоставления.Свойство("ТоварНеНайденПоМарке")
		И ДанныеДляРучногоСопоставления.Свойство("КодМарки")
		И ДанныеДляРучногоСопоставления.Свойство("EAN")
		И Не Лев(ДанныеДляРучногоСопоставления.EAN, 2) = "29" Тогда
		
		КодМаркировки = ДанныеДляРучногоСопоставления.КодМарки;
		
		СимволGS1 = МенеджерОборудованияРМККлиентСервер.РазделительGS1();
		Разделитель = МенеджерОборудованияРМККлиентСервер.ЭкранированныйСимволGS1();
		Штрихкод = СтрЗаменить(КодМаркировки, Разделитель, СимволGS1);
		РеквизитыФормыРМК = СтруктураРеквизитовФормыРМКДляДобавленияСтроки();
		ИдентификаторСтроки = 0;
		
		ПараметрыДляОбработкиШтрихкода = Новый Структура();
		ПараметрыДляОбработкиШтрихкода.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
		ПроверитьНеобходимостьВводаМарки(ПараметрыДляОбработкиШтрихкода);
		ДополнитьПараметрыДляОбработкиШтрихкода(ПараметрыДляОбработкиШтрихкода);
		
		СтандартнаяОбработка = Истина;
		ОбщегоНазначенияРМККлиентПереопределяемый.ПоискПоШтрихкодуРазрешительныйРежим(
			ЭтотОбъект, Штрихкод, РеквизитыФормыРМК, ПараметрыДляОбработкиШтрихкода, СтандартнаяОбработка);
		
		Если СтандартнаяОбработка Тогда
			
			ДанныеРучногоСопоставления = Новый Структура;
			ДанныеРучногоСопоставления.Вставить("Номенклатура");
			ДанныеРучногоСопоставления.Вставить("Характеристика");
			ДанныеРучногоСопоставления.Вставить("Упаковка");
			ДанныеРучногоСопоставления.Вставить("Серия");
			ДанныеРучногоСопоставления.Вставить("Штрихкод");
			
			ЗаполнитьЗначенияСвойств(ДанныеРучногоСопоставления, ДанныеВыбора);
			ДанныеРучногоСопоставления.Штрихкод = ДанныеДляРучногоСопоставления.EAN;
			
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСКлиент");
			ДанныеПараметровСканирования = Модуль.ПараметрыСканирования(ЭтотОбъект);
			
			ДанныеСоСканера = Новый Массив();
			ДанныеСоСканера.Добавить(Штрихкод);
			ДанныеСоСканера.Добавить(Неопределено);
			ДанныеШтрихкода = МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(ДанныеСоСканера);
			
			ПараметрыПоискаРМК = РеквизитыФормыРМК;
			ШтрихкодОригинальный = Штрихкод;
			ЗаменитьСимволGS1(ШтрихкодОригинальный);
			ПараметрыПоискаРМК.Вставить("ШтрихкодОригинальный", ШтрихкодОригинальный);
			ПараметрыДляОбработкиШтрихкода.Вставить("Штрихкод", ШтрихкодОригинальный);
			ПараметрыПоискаРМК.Вставить("ПараметрыДляОбработкиШтрихкода", ПараметрыДляОбработкиШтрихкода);
			ПараметрыПоискаРМК.Вставить("ДанныеРучногоСопоставления", ДанныеРучногоСопоставления);
			ДанныеПараметровСканирования.ДополнительныеПараметры.Вставить("ПараметрыПоискаРМК", ПараметрыПоискаРМК);
			
			ИмяРеквизитаПараметрыСканирования = "ПараметрыСканирования";
			ЭтотОбъект[ИмяРеквизитаПараметрыСканирования] = ДанныеПараметровСканирования;
			
			Модуль.ОбработатьДанныеШтрихкода("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, ДанныеШтрихкода, ДанныеПараметровСканирования);
			
		КонецЕсли;
		ПропуститьКонтроль = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	СписокТоваровВыборПродолжение(ОбработатьКакРучнойПодбор);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПолеВводаСуммыВРассрочку()
	
	ЭтоОперацияПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	
	ЗаголовокПредоплаты = НСтр("ru = 'Предоплата'");
	Если ЭтоОперацияПродажи Тогда
		
		Если Элементы.Предоплата.Доступность Тогда
			Элементы.СуммаОплаченоВРассрочку.Заголовок = НСтр("ru = 'Потом'");
			Элементы.СуммаОплаченоВРассрочку.Подсказка = НСтр("ru = 'Потом'");
			Элементы.СуммаОплаченоВРассрочку.Доступность = Ложь;
		КонецЕсли;
		
		Если Элементы.ОплатаВРассрочку.Доступность Тогда
			Элементы.СуммаОплаченоВРассрочку.Заголовок = НСтр("ru = 'Рассрочка'");
			Элементы.СуммаОплаченоВРассрочку.Подсказка = НСтр("ru = 'Рассрочка'");
			Элементы.СуммаОплаченоВРассрочку.Доступность = Истина;
		КонецЕсли;
		
		Если Элементы.ГруппаОплатаПредоплата.Видимость Тогда
			ЗаголовокПредоплаты = НСтр("ru = 'Потом'");;
		КонецЕсли;
		
	Иначе
		
		Если Элементы.Предоплата.Доступность Тогда
			Элементы.СуммаОплаченоВРассрочку.Заголовок = НСтр("ru = 'Возврат предоплаты'");
			Элементы.СуммаОплаченоВРассрочку.Подсказка = НСтр("ru = 'Возврат предоплаты'");
			Элементы.СуммаОплаченоВРассрочку.Доступность = Ложь;
		КонецЕсли;
		
		Если Элементы.ОплатаВРассрочку.Доступность Тогда
			Элементы.СуммаОплаченоВРассрочку.Заголовок = НСтр("ru = 'Возврат рассрочки'");
			Элементы.СуммаОплаченоВРассрочку.Подсказка = НСтр("ru = 'Возврат рассрочки'");
			Элементы.СуммаОплаченоВРассрочку.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	Элементы.Предоплата.Заголовок = ЗаголовокПредоплаты;
	
	ОбщегоНазначенияРМККлиентПереопределяемый.НастроитьПолеВводаСуммыВРассрочку(ЭтотОбъект, ЭтоОперацияПродажи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуДанныеПокупателяКлиент()
	
	Если ОбщегоНазначенияРМККлиент.ЗапрещенаПредоплатаБезКонтрагента()
		И (ПриемАванса Или ПриемАвансаПоЗаказу) И НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Для приема аванса необходимо указать контрагента'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	Если Не ПараметрыВводаКодаSMS = Неопределено И ПараметрыВводаКодаSMS.ВариантПроверки = "ПриВыборе" Тогда
		ОтменитьВводКартыКлиент();
	КонецЕсли;
	
	ПредыдущийСлой = Элементы.ОбластьОперативногоУправленияЧеком;
	Если Не ПредыдущийСлойДоДанныхПокупателя = Неопределено Тогда
		ПредыдущийСлой = ПредыдущийСлойДоДанныхПокупателя;
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
	ЭтоОперацияПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьДоступностьЭлементовФормыПриПереключенииРежима(ЭтотОбъект,
		ЭтоОперацияПродажи, Ложь);
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, ПредыдущийСлой);
	ВернутьОсновнуюКоманднуюПанельЧека();
	УстановитьВидимостьЭлементаФормы(Элементы.ПанельИтоговПоЧекам, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаЦифроваяПанель, Ложь);
	РежимЦифровойПанели = РежимыЦифровойПанели.Пустой;
	
	Если ПредыдущийСлой = Элементы.ОбластьОперативногоУправленияЧеком
		И ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатойИлиКоррекцией(ЭтотОбъект) Тогда
		
		УстановитьФокусНаЭлементеФормыПриВводеОплаты();
		
	КонецЕсли;
	ЭлементВводаДанныхПокупателя = Неопределено;
	НастроитьДоступностьГорячейКлавишиEnter();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВводШтрихкодаНайденаКарта(Результат, ЗапросДанныхБонусов = Истина) Экспорт
	
	Если ЗапросДанныхБонусов
		И НЕ КонтрагентВыбран Тогда
		ЗапроситьДанныеБонусов();
		ЗапроситьДанныеПродаж();
	КонецЕсли;
	
	НеобходимоПерезаполнитьТаблицуУправляемыхСкидок = Истина;
	ИзменитьКартинкуВводПокупателя();
	НастроитьЦифровуюПанель();
	УстановитьТекущийЭлементПослеВводаКарты();
	
	ДанныеЗаполнены = ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеЛояльностиЗаполнены(ЭтотОбъект);
	ПереключитьНаСтраницуПоискКарты(ДанныеЗаполнены);
	
	ПереключитьНаСтраницуВводаКодаSMS();
	
	Если ЭтоЗачетАванса
		И Объект.Товары.Количество() = 0
		И ОбщегоНазначенияРМККлиент.ЗапрещенаПредоплатаБезКонтрагента() Тогда
		
		ОбщегоНазначенияРМККлиентПереопределяемый.ВыбратьДокументРасчета(ЭтотОбъект);
		
	ИначеЕсли ЭтоОплатаРассрочки
		И Объект.Товары.Количество() = 0
		И ОбщегоНазначенияРМККлиент.ЗапрещенаПредоплатаБезКонтрагента() Тогда
		
		ВыбратьДокументОплатыРассрочки();
		
	КонецЕсли;
	
	Если ДанныеЗаполнены И ЗначениеЗаполнено(ДисплейПокупателя)
		И Не РежимКассыСамообслуживания Тогда
		ЗаполнитьДанныеОКартеЛояльностиВДисплейПокупателя();
		НачатьОтображениеИнформацииНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.Информация);
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентПереопределяемый.ПровестиОпросВладельцаКарты(ЭтотОбъект);
	ЗавершитьПоискКартыПриПереходеКОплате();
	Если Результат = КодВозвратаДиалога.Да Тогда
		РассчитатьСкидкиКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОпросПоДисконтнойКарте(РезультатВыполнения, ПараметрыВыполнения) Экспорт
	
	ЗаполнитьФормуПоДисконтнойКарте();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФормуПоДисконтнойКарте()
	
	НайденнаяКартаЛояльности = Неопределено;
	Если ЗначениеЗаполнено(Объект.Контрагент) И Не ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		ШтрихкодированиеРМКПереопределяемый.ЗаполнитьДанныеНайденнойКартыЛояльности(
			Объект.Контрагент, НайденнаяКартаЛояльности);
	Иначе
		ШтрихкодированиеРМКПереопределяемый.ЗаполнитьДанныеНайденнойКартыЛояльности(
			Объект.ДисконтнаяКарта, НайденнаяКартаЛояльности);
	КонецЕсли;
	
	Если НЕ НайденнаяКартаЛояльности = Неопределено Тогда
		ШтрихкодированиеРМК.ЗаполнитьФормуПоДисконтнойКарте(ЭтотОбъект, НайденнаяКартаЛояльности);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементПослеВводаКарты()
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека) = Элементы.ГруппаДанныеПокупателя Тогда
		Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			Если Не КоличествоБонусов = 0 Тогда
				ТекущийЭлемент = Элементы.ОплатитьБонусами;
			Иначе
				ТекущийЭлемент = Элементы.ЗакрытьФормуДанныеПокупателя;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьНезаполненныеДанные(СкрытьОшибкуВеса = Ложь)
	
	ЕстьНезаполненныеДанные = Ложь;
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		НеЗаполненаСерия = Ложь;
		НеЗаполненаМарка = Ложь;
		НеЗаполненаПартия = Ложь;
		НеЗаполненаХарактеристика = Ложь;
		
		Если СтрокаТовары.ПроверятьЗаполнениеХарактеристики
			И Не ЗначениеЗаполнено(СтрокаТовары.Характеристика) Тогда
			НеЗаполненаХарактеристика = Истина;
			ВыборХарактеристики(СтрокаТовары);
		КонецЕсли;
		
		Если СтрокаТовары.НеобходимостьВводаКодаМаркировки И Не ЗначениеЗаполнено(СтрокаТовары.КодМаркировки)
			И НЕ ЭтоЧекКоррекции Тогда
			НеЗаполненаМарка = Истина;
		КонецЕсли;
		
		Если СтрокаТовары.ПроверятьЗаполнениеСерий И Не ЗначениеЗаполнено(СтрокаТовары.СерияПредставление)
			И Не РежимВыбораХарактеристики Тогда
			НеЗаполненаСерия = Истина;
			Если Не НеЗаполненаМарка Тогда
				ОткрытьСтраницуСерии(СтрокаТовары);
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТовары.ПроверятьЗаполнениеПартий
			И Не ЗначениеЗаполнено(СтрокаТовары.Партия) И Не РежимВыбораХарактеристики Тогда
			НеЗаполненаПартия = Истина;
			Если Не НеЗаполненаМарка Тогда
				ОткрытьСтраницуСерии(СтрокаТовары);
			КонецЕсли;
		КонецЕсли;
		
		Если НеЗаполненаМарка Или НеЗаполненаСерия
			Или НеЗаполненаПартия Или НеЗаполненаХарактеристика Тогда
			Если РежимПоказаСкидок Тогда
				РежимПоказаСкидок = Ложь;
				ПереключитьРежимНаПоказСкидок(Ложь);
			КонецЕсли;
			Элементы.Товары.ТекущаяСтрока = СтрокаТовары.ПолучитьИдентификатор();
			ЕстьНезаполненныеДанные = Истина;
			Прервать;
		КонецЕсли;
		
		Если СтрокаТовары.Количество = 0 Тогда
			
			Если ДобавленаНоваяСтрокаКорзины
				И ТекущийТоварИдентификатор <> СтрокаТовары.ПолучитьИдентификатор() Тогда
					РассчитатьСуммуВСтрокеТабличнойЧасти(ТекущийТоварИдентификатор);
			КонецЕсли;
			
			ЕстьНезаполненныеДанные = Истина;
			Элементы.Товары.ТекущаяСтрока = СтрокаТовары.ПолучитьИдентификатор();
			
			ЭтоВесовойНефасованныйТовар = СтрокаТовары.Весовой И Не СтрокаТовары.Фасованный;
			Если Не (ЭтоВесовойНефасованныйТовар И (СкрытьОшибкуВеса Или ЭлектронныеВесыЗаняты)
					И ТекущийТоварИдентификатор = СтрокаТовары.ПолучитьИдентификатор()) Тогда
					
				ТекстЗаголовка = НСтр("ru = 'Не указан вес.'");
				Если ЭтоВесовойНефасованныйТовар И РежимКассыСамообслуживания Тогда
					ТекстВес = СтрШаблон("%1 ", НСтр("ru = 'В строке не указан вес. Нажмите кнопку'"));
					Если ЗначениеЗаполнено(ТаблицаЭлектронныхВесов) Тогда
						ТекстВесПродолжение = СтрШаблон(" %1", НСтр("ru = 'для получения веса.'"));
					Иначе
						ТекстВесПродолжение = СтрШаблон(" %1", НСтр("ru = 'для ввода веса.'"));
					КонецЕсли;
					ТекстОшибки = Новый ФорматированнаяСтрока(ТекстВес, БиблиотекаКартинок.Scales, ТекстВесПродолжение);
				Иначе
					ТекстОшибки = ?(ЭтоВесовойНефасованныйТовар, НСтр("ru = 'В строке не указан вес.'"),
						НСтр("ru = 'В строке не указано количество.'"));
				КонецЕсли;
				ПараметрыОшибки = Новый Структура;
				ПараметрыОшибки.Вставить("НеВызыватьЗаменуПрав", Истина);
				ПараметрыОшибки.Вставить("ЭтоПредупреждение", Истина);
				ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки, ПараметрыОшибки);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПриемАванса И Не ПриемАвансаПоЗаказу Тогда
			
			Если СтрокаТовары.Цена = 0 Тогда
				
				Если ДобавленаНоваяСтрокаКорзины
					И ТекущийТоварИдентификатор <> СтрокаТовары.ПолучитьИдентификатор() Тогда
						РассчитатьСуммуВСтрокеТабличнойЧасти(ТекущийТоварИдентификатор);
				КонецЕсли;
				
				ЕстьНезаполненныеДанные = Истина;
				ТекущийЭлемент = Элементы.ТекущийТоварЦенаИзКарточки;
				Элементы.Товары.ТекущаяСтрока = СтрокаТовары.ПолучитьИдентификатор();
				
				ТекстЗаголовка = НСтр("ru = 'Укажите цену'");
				ТекстОшибки = НСтр("ru = 'В строке не указана цена.'");
				ПараметрыОшибки = Новый Структура;
				ПараметрыОшибки.Вставить("ЭтоПредупреждение", Истина);
				ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки, ПараметрыОшибки);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьНезаполненныеДанные Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьНезаполненныеДанные;
	
КонецФункции

&НаСервере
Процедура СоздатьЛокальноКартуЛояльности(СтруктураРезультат)
	ОбщегоНазначенияРМКПереопределяемый.СоздатьЛокальноКартуЛояльности(СтруктураРезультат, ЭтотОбъект);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодарочныйСертификатПоГУИД(ГУИД)
	
	ПодарочныйСертификат = Неопределено;
	ОбщегоНазначенияРМКПереопределяемый.ПодарочныйСертификатПоГУИД(ГУИД, ПодарочныйСертификат);
	Возврат ПодарочныйСертификат;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьДанныеПодарочногоСертификата(РазблокироватьСертификат = Ложь)
	
	Если РазблокироватьСертификат Тогда 
		РазблокироватьОбъектСервераЛояльности("giftcard");
	КонецЕсли;
	
	НомерСертификата = "";
	ПодарочныйСертификат = Неопределено;
	СуммаОстаткаСертификатов = 0;
	СуммаСертификата = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьОплатыПодарочнымиСертификатами(ОтменитьОплатуСертификатами = Ложь, ОплатитьСертификатом = Ложь)
	
	Если Элементы.НайтиСертификат.Видимость Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаСертификатами, Ложь);
		Если ТаблицаПодарочныхСертификатов.Количество() = 0 Тогда
			ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект,
				Элементы.ГруппаДополнительноеУправлениеЧеком);
		КонецЕсли;
		
	Иначе
		
		УстановитьВидимостьЭлементаФормы(Элементы.НайтиСертификат, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияОплатаСертификатами, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.НомерСертификата, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияСуммаСертификата, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ОплатитьСертификатом, Ложь);
		
	КонецЕсли;
	
	Если ОтменитьОплатуСертификатами Тогда
		
		ЕстьСертификаты = (ТаблицаПодарочныхСертификатов.Количество() > 0);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаСертификатами, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаОплатаСертификатами, ЕстьСертификаты);
		
	КонецЕсли;
	
	Если ОплатитьСертификатом Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаОплатаСертификатами, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаСертификатами, Ложь);
		
	КонецЕсли; 
	
	Для Каждого СтрокаОплатыПодарочнымСертификатом Из ТаблицаПодарочныхСертификатов Цикл
		
		ПоследнийЭлементСуммы = Неопределено;
		ИмяГруппы = "ГруппаСуммаОплатаСертификатом_" + СтрокаОплатыПодарочнымСертификатом.УникальныйИдентификатор;
		Если НЕ Элементы.Найти(ИмяГруппы) = Неопределено Тогда
			Если СтрокаОплатыПодарочнымСертификатом.Организация = ВыбраннаяОрганизация И
				СтрокаОплатыПодарочнымСертификатом.СистемаНалогообложения = ВыбраннаяСистемаНалогообложения Тогда
				
				Элементы[ИмяГруппы].Видимость = Истина;
				ИмяЭлементаСуммы = "СуммаСертификата_" + СтрокаОплатыПодарочнымСертификатом.УникальныйИдентификатор;
				Если Не Элементы.Найти(ИмяЭлементаСуммы) = Неопределено Тогда
					ПоследнийЭлементСуммы = Элементы[ИмяЭлементаСуммы];
				КонецЕсли;
				
			Иначе
				Элементы[ИмяГруппы].Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если (Не ПоследнийЭлементСуммы = Неопределено) И (Не СенсорныйЭкран) Тогда
			ТекущийЭлемент = ПоследнийЭлементСуммы;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ВыбраннаяОрганизацияИСНО()
	
	СтруктураОрганизацииИСНО = Новый Структура();
	СтруктураОрганизацииИСНО.Вставить("Организация", ВыбраннаяОрганизация);
	СтруктураОрганизацииИСНО.Вставить("СистемаНалогообложения", ВыбраннаяСистемаНалогообложения);
	
	Возврат СтруктураОрганизацииИСНО;
	
КонецФункции

&НаКлиенте
Процедура ЗакрытьПриложениеПриОшибке(Результат) Экспорт
	
	РежимОсновногоОкна = КлиентскоеПриложение.ПолучитьРежимОсновногоОкна();
	Если РежимОсновногоОкна = РежимОсновногоОкнаКлиентскогоПриложения.РабочееМесто
		Или РежимОсновногоОкна = РежимОсновногоОкнаКлиентскогоПриложения.Киоск Тогда
		ЗавершитьРаботуСистемы(Не Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗавершение);
	Иначе
		Если ЗначениеЗаполнено(ТорговыйОбъектДляВхода) Или Не ЗначениеЗаполнено(ТекущаяНастройкаРМК) Тогда
			Если ЭтотОбъект.Открыта() Тогда
				ЭтотОбъект.Закрыть();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизиты(ТекущийНомерСертификата)
	
	ОтборПоНомеру = Новый Структура("НомерСертификата, ПодарочныйСертификат", ТекущийНомерСертификата, ПодарочныйСертификат);
	СтрокиРаспределенныхСертификатов = ТаблицаПодарочныхСертификатов.НайтиСтроки(ОтборПоНомеру);
	
	Для Каждого СтрокиРаспределенногоСертификата Из СтрокиРаспределенныхСертификатов Цикл
		
		// Добавляем реквизиты на форму
		ДобавляемыеРеквизиты = Новый Массив;
		
		ТипРеквизита  = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2));
		ИмяРеквизита  = "СуммаСертификата_" + СтрокиРаспределенногоСертификата.УникальныйИдентификатор;
		РеквизитФормы = Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита);
		
		ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
		ИмяГруппы = "ГруппаСуммаОплатаСертификатом_" + СтрокиРаспределенногоСертификата.УникальныйИдентификатор;
		ИмяЭлемента = "СуммаСертификата_" + СтрокиРаспределенногоСертификата.УникальныйИдентификатор;
		ИмяДекорации = "ДекорацияУдалитьСертификат_" + СтрокиРаспределенногоСертификата.УникальныйИдентификатор;
		ИмяДекорацииПодсказки = "ДекорацияПодсказкаСертификат" + СтрокиРаспределенногоСертификата.УникальныйИдентификатор;
		
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		ЭтотОбъект[ИмяРеквизита] = СуммаСертификата;
		
		// Добавляем поля ввода для новых реквизитов
		ГруппаЭлементов = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ГруппаСуммаОплатаСертификатами);
		ГруппаЭлементов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЭлементов.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаЭлементов.ОтображатьЗаголовок = Ложь;
		Элементы.Переместить(ГруппаЭлементов, ГруппаЭлементов.Родитель, Элементы.ГруппаДобавитьСертификат);
		
		ПараметрыУвеличенногоИнтерфейса = ИнтерфейсРМКСлужебный.ПараметрыУвеличенногоИнтерфейса(ВидОтображения);
		ШрифтСертификата = ?(ВидОтображения = Перечисления.ВидыОтображения.Увеличенный, ПараметрыУвеличенногоИнтерфейса.ШрифтСуммОплат, ШрифтыСтиля.ШрифтОбычныйПолужирный12РМК);
	
		ДекорацияПодсказка = Элементы.Добавить(ИмяДекорацииПодсказки, Тип("ДекорацияФормы"), Элементы[ИмяГруппы]);
		ДекорацияПодсказка.Вид = ВидДекорацииФормы.Надпись;
		ДекорацияПодсказка.Ширина = 11;
		ДекорацияПодсказка.РастягиватьПоГоризонтали = Истина;
		ДекорацияПодсказка.Шрифт = ШрифтСертификата;
		ДекорацияПодсказка.ЦветТекста = ЦветаСтиля.ЦветТекстаКнопки;
	
		ДекорацияУдалить = Элементы.Добавить(ИмяДекорации, Тип("ДекорацияФормы"), Элементы[ИмяГруппы]);
		ДекорацияУдалить.Вид = ВидДекорацииФормы.Картинка;
		ДекорацияУдалить.Картинка = БиблиотекаКартинок.ОформлениеКрест;
		ДекорацияУдалить.УстановитьДействие("Нажатие", "ДекорацияУдалитьСертификатНажатие");
		ДекорацияУдалить.Гиперссылка = Истина;
		ДекорацияУдалить.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
		
		ПолеСуммаСертификата = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Элементы[ИмяГруппы]);
		ПолеСуммаСертификата.ПутьКДанным = ИмяРеквизита;
		ПолеСуммаСертификата.Вид = ВидПоляФормы.ПолеВвода;
		ПолеСуммаСертификата.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеСуммаСертификата.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		ПолеСуммаСертификата.КнопкаВыбора = Истина;
		Если ВидОтображения = Перечисления.ВидыОтображения.Увеличенный Тогда
			ПолеСуммаСертификата.Ширина = 8;
		Иначе
			ПолеСуммаСертификата.Ширина = 7;
		КонецЕсли;
		ПолеСуммаСертификата.Шрифт = ШрифтСертификата;
		ПолеСуммаСертификата.РастягиватьПоГоризонтали = Ложь;
		ПолеСуммаСертификата.МаксимальноеЗначение = ЭтотОбъект[ИмяРеквизита];
		ПолеСуммаСертификата.УстановитьДействие("ПриИзменении", "СуммаОплатаСертификатамиПриИзменении");
		ПолеСуммаСертификата.УстановитьДействие("НачалоВыбора", "СуммаОплатаСертификатамиНачалоВыбора");
		ПолеСуммаСертификата.УстановитьДействие("АвтоПодбор", "СуммаОплатаСертификатамиАвтоПодбор");
		
		ЧастиСтроки = Новый Массив;
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Сертификат'") + Символы.ПС, Новый Шрифт("Arial", 10, Истина)));
		
		СтрокаПодсказки = Новый ФорматированнаяСтрока(СтрШаблон(НСтр("ru = '*%1, не более %2 р.'"),
			Прав(ТекущийНомерСертификата, 4),
			Формат(ЭтотОбъект[ИмяРеквизита], "ЧЦ=10; ЧДЦ=2; ЧГ=0")), 
			Новый Шрифт("Arial", 8, Ложь, , , , 85));
		
		ЧастиСтроки.Добавить(СтрокаПодсказки);
		ТекстПодсказки = Новый ФорматированнаяСтрока(ЧастиСтроки);
		ДекорацияПодсказка.Заголовок = ТекстПодсказки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементФормы(ИмяЭлемента)
	
	ЭлементФормы = Элементы.Найти(ИмяЭлемента);
	
	Если ЭлементФормы <> Неопределено Тогда 
		Элементы.Удалить(ЭлементФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КонтрольОстатковПройден(ТекстОшибки)
	
	ТребуетсяКонтрольОстатков = Ложь;
	КонтрольОстатковПройден = Истина;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьНеобходимостьКонтролироватьОстатки(ТребуетсяКонтрольОстатков);
	Если ТребуетсяКонтрольОстатков Тогда
		ОбщегоНазначенияРМКПереопределяемый.ПроверитьНаличиеТоваров(ЭтотОбъект, КонтрольОстатковПройден, ТекстОшибки);
	КонецЕсли;
	
	Возврат КонтрольОстатковПройден;
	
КонецФункции

&НаСервереБезКонтекста
Процедура АннулироватьЧек(ОтложенныйЧек)
	ОбщегоНазначенияРМКПереопределяемый.АннулироватьЧек(ОтложенныйЧек);
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицуПодарочныхСертификатов()
	
	Для Каждого СтрокаТаблицы Из ТаблицаПодарочныхСертификатов Цикл
		УдалитьПодарочныйСертификат(СтрокаТаблицы.УникальныйИдентификатор);
	КонецЦикла;
	
	ТаблицаПодарочныхСертификатов.Очистить();
	УстановитьВидимостьКомандыУдаленияВсехСертификатов(Элементы.ГруппаУдалитьСертификаты, ТаблицаПодарочныхСертификатов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьБонусамиКлиент()
	
	РассчитыватьБонусы = Истина;
	
	ЗакрытьФормуЦифровойПанели();
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаБонусами, Истина);
	Элементы.СтраницыОплатаБонусами.ТекущаяСтраница = Элементы.ГруппаОплатаБонусами;
	Если РежимРаботыСЧеком = РежимыРаботыСЧеком.ЧекПустой Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ВводТоваров Тогда
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
	КонецЕсли;
	
	РассчитатьСуммуОплатыБонусами(, Истина);
	
	Если СуммаОплаченоБонусами > 0 Тогда
		
		ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
		ПараметрыПересчета.ПоКомандеОплатитьВсюСуммуБонусами = Истина;
		РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
		
	Иначе
		
		АктуализироватьИзменениеЭтапаРаботыСЧекомПриИзмененииОплаты();
		
	КонецЕсли;
	Если Не СенсорныйЭкран Тогда
		ТекущийЭлемент = Элементы.СуммаОплаченоБонусами;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыЛокальногоСозданияКартыЛояльности()
	
	ПараметрыСоздания = СерверЛояльностиПолучательДанныхКлиентСервер.РезультатВыполненияЗапросаПоУмолчанию();
	ПараметрыСоздания.Вставить("ТекстСообщения", НСтр("ru = ''"));
	ПараметрыСоздания.Вставить("КартинкаСообщения");
	ПараметрыСоздания.Вставить("Пояснение", НСтр("ru = ''"));
	
	Возврат ПараметрыСоздания;
	
КонецФункции

&НаКлиенте
Процедура СоздатьКартуКлиент()
	
	СтруктураРезультат = Неопределено;
	ПоказатьТиповоеОповещение = Истина;
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		ЗначенияПараметровМетода = ПараметрыМетодовБонуснойПодсистемы(Истина);
		ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаВыдатьКартуКлиенту(ПараметрыПодключенияКСерверуЛояльности, ЗначенияПараметровМетода);
		СтруктураРезультат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
		ОбработатьРезультатСозданияКартыНаКлиенте(СтруктураРезультат, ПоказатьТиповоеОповещение);
	ИначеЕсли ОбщегоНазначенияРМККлиент.СоздаватьЛокальноКартуЛояльности() Тогда
		СтруктураРезультат = ПараметрыЛокальногоСозданияКартыЛояльности();
		СоздатьЛокальноКартуЛояльности(СтруктураРезультат);
		УстановитьВидимостьЭлементаФормы(Элементы.ПечатьСогласияПД, Не СтруктураРезультат.ЕстьОшибки);
		Если СтруктураРезультат.ЕстьОшибки Тогда
			ПоказатьОповещениеПользователя(СтруктураРезультат.ТекстОшибки, , СтруктураРезультат.Пояснение,
				БиблиотекаКартинок.Ошибка32);
		ИначеЕсли ЗначениеЗаполнено(СтруктураРезультат.ТекстСообщения) И ЗначениеЗаполнено(СтруктураРезультат.КартинкаСообщения) Тогда
			ПоказатьОповещениеПользователя(СтруктураРезультат.ТекстСообщения, , СтруктураРезультат.Пояснение,
				СтруктураРезультат.КартинкаСообщения);
			ПоказатьТиповоеОповещение = Ложь;
		Иначе
			ПоказатьОповещениеПользователя(НСтр("ru = 'Карта успешно создана'"), , , БиблиотекаКартинок.Успешно32);
		КонецЕсли;
		ИзменитьКартинкуВводПокупателя();
		Если ЗначениеЗаполнено(СтруктураРезультат.ТекстСообщения) Тогда
			ИнтерфейсРМКСлужебныйКлиент.УстановитьТекстДекорацииОПерсональныхДанных(Элементы.ДекорацияТекстОПерсональныхДанных,
				СтруктураРезультат.ТекстСообщения);
		ИначеЕсли ЗначениеЗаполнено(СтруктураРезультат.ТекстОшибки) Тогда
			ИнтерфейсРМКСлужебныйКлиент.УстановитьТекстДекорацииОПерсональныхДанных(Элементы.ДекорацияТекстОПерсональныхДанных,
				СтруктураРезультат.ТекстОшибки);
		КонецЕсли;
	Иначе
		СтруктураРезультат = СерверЛояльностиПолучательДанныхКлиентСервер.РезультатВыполненияЗапросаПоУмолчанию();
		СтруктураРезультат.ТекстОшибки = НСтр("ru = 'Не предусмотрено локальное создание карт лояльности в этой базе.'");
		ОбработатьРезультатСозданияКартыНаКлиенте(СтруктураРезультат, ПоказатьТиповоеОповещение);
	КонецЕсли;
	НеобходимоПерезаполнитьТаблицуУправляемыхСкидок = Не СтруктураРезультат.ЕстьОшибки;
	УстановитьДоступностьГруппыСозданияРеквизитов(СтруктураРезультат.ЕстьОшибки);
	Если НЕ СтруктураРезультат.ЕстьОшибки Тогда
		ЗаполнитьДанныеДляОтправкиЧека(НоваяКартаПочта, НоваяКартаТелефон);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатСозданияКартыНаКлиенте(СтруктураРезультат, ПоказатьТиповоеОповещение)
	
	Если НЕ СтруктураРезультат.ЕстьОшибки Тогда
		
		Если ЗначениеЗаполнено(СтруктураРезультат.ДанныеОтвета) Тогда
			ДанныеОтвета = Неопределено;
			СтрокаJSON = СтруктураРезультат.ДанныеОтвета;
			СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
		КонецЕсли;
		
		Если ТипЗнч(ДанныеОтвета) = Тип("Структура") И ДанныеОтвета.Свойство("Error") И ДанныеОтвета.Error Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Не удалось создать карту'");
			Если ДанныеОтвета.Свойство("ErrorMessage") Тогда
				ТекстПредупреждения = ДанныеОтвета.ErrorMessage;
			КонецЕсли;
			СтруктураРезультат.ЕстьОшибки = Истина;
			ПоказатьТиповоеОповещение = Ложь;
			УстановитьВидимостьЭлементаФормы(Элементы.ПечатьСогласияПД, Не СтруктураРезультат.ЕстьОшибки);
			
			ИнтерфейсРМКСлужебныйКлиент.УстановитьТекстДекорацииОПерсональныхДанных(Элементы.ДекорацияТекстОПерсональныхДанных, ТекстПредупреждения);
			
		ИначеЕсли ТипЗнч(ДанныеОтвета) = Тип("Структура") И ДанныеОтвета.Свойство("ElseClient") И ДанныеОтвета.ElseClient Тогда
			
			ТекстСообщения = НСтр("ru = 'Клиент с таким e-mail, но другим телефоном уже существует'");
			КартинкаСообщения = БиблиотекаКартинок.Предупреждение32;
			
			ВывестиДанныеСервераЛояльностиОСуществующейКарте(ДанныеОтвета, ТекстСообщения, Истина);
			ПоказатьТиповоеОповещение = Ложь;
			
		ИначеЕсли ТипЗнч(ДанныеОтвета) = Тип("Структура") И ДанныеОтвета.Свойство("ExistingCard")
				И ДанныеОтвета.ExistingCard Тогда
			
			ТекстСообщения = НСтр("ru = 'Карта уже существует'");
			КартинкаСообщения = БиблиотекаКартинок.Предупреждение32;
			ВывестиДанныеСервераЛояльностиОСуществующейКарте(ДанныеОтвета, ТекстСообщения);
			ПоказатьТиповоеОповещение = Ложь;
			
		Иначе
			ТекстСообщения = НСтр("ru = 'Карта успешно создана'");
			КартинкаСообщения = БиблиотекаКартинок.Успешно32;
			
			Если ТипЗнч(ДанныеОтвета) = Тип("Структура") Тогда
				ЗаполнитьДанныеСозданнойКартыНаСервереЛояльности(ДанныеОтвета);
			КонецЕсли;
		КонецЕсли;
		
		Если ПоказатьТиповоеОповещение Тогда
			ПоказатьОповещениеПользователя(ТекстСообщения, , , КартинкаСообщения);
		КонецЕсли;
		
	Иначе
		
		ДополнительноеПояснение = НСтр("ru = ''");
		
		Если ЕстьСвойство(СтруктураРезультат, "ТекстОшибки") Тогда
			ДополнительноеПояснение = СтрШаблон(НСтр("ru = 'по причине: %1'"), СтруктураРезультат.ТекстОшибки);
		КонецЕсли;
		
		ТекстПредупреждения = СтрШаблон("%1 %2", НСтр("ru = 'Не удалось создать карту'"), ДополнительноеПояснение);
		ИнтерфейсРМКСлужебныйКлиент.УстановитьТекстДекорацииОПерсональныхДанных(Элементы.ДекорацияТекстОПерсональныхДанных, ТекстПредупреждения);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиДанныеПокупателяКлиент(ГруппаОперацийДоступна = Ложь)
	
	Если (РежимРаботыСЧеком = РежимыРаботыСЧеком.ВводТоваров Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ЧекПустой)
		И ЕстьНезаполненныеДанные() Тогда
		
		ТоварыПриАктивизацииСтроки(Элементы.Товары);
		Возврат;
		
	КонецЕсли;
	
	СтрокаПоискаКарты = НСтр("ru = ''");
	ИнтерфейсРМКСлужебныйКлиент.ОчиститьПоляВводаНовойКартыПриНеобходимости(ЭтотОбъект);
	ОтправлятьРассылкиПоПочте = Ложь;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, ГруппаОперацийДоступна);
	
	ДанныеЗаполнены = ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеЛояльностиЗаполнены(ЭтотОбъект);
	
	НетДанныхВРежимеКСО = (РежимКассыСамообслуживания И Не ДанныеЗаполнены);
	Если РежимПанелиДанныеПокупателя = 1 Или ПроцессПереходаКОплате Или НетДанныхВРежимеКСО Тогда
		РежимПанелиДанныеПокупателя = 0;
	КонецЕсли;
	
	ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьДоступностьГруппДанныхПокупателя(ЭтотОбъект);
	ПоказатьПанельВводаДанныхПокупателя();
	Если ОткрытДиалогВводаБонусов Тогда
		ПереключитьНаСтраницуВводаОплатыБонусами();
	ИначеЕсли РежимПанелиДанныеПокупателя = 0 Тогда
		ПереключитьНаСтраницуПоискКарты(ДанныеЗаполнены);
	Иначе
		ПереключитьНаСтраницуОтправкаЧека();
	КонецЕсли;
	НастроитьДоступностьГорячейКлавишиEnter();
	
КонецПроцедуры

&НаКлиенте
Функция ДополнительныеДанныеДляФискализации(БумажныйЧек = Неопределено)
	
	ИдентификаторУстройстваФР = ПодключаемоеОборудование;
	
	ЕстьПродукцияЕГАИС = Ложь;
	ТранспортныйМодуль = Неопределено;
	Отказ = Ложь;
	ТекстОшибки = НСтр("ru = ''");
	
	ДополнительныеДанные = Новый Структура();
	ДополнительныеДанные.Вставить("ЕстьПродукцияЕГАИС", ЕстьПродукцияЕГАИС);
	ДополнительныеДанные.Вставить("Отказ", Отказ);
	ДополнительныеДанные.Вставить("ТекстОшибки", ТекстОшибки);
	ДополнительныеДанные.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
	ДополнительныеДанные.Вставить("ИдентификаторУстройстваФР", ИдентификаторУстройстваФР);
	ДополнительныеДанные.Вставить("ПечататьБумажныйЧек", ?(БумажныйЧек = Неопределено,
		ПечататьБумажныйЧек,
		БумажныйЧек));
	ДополнительныеДанные.Вставить("ШиринаЛенты", ШиринаЛенты(ИдентификаторУстройстваФР));
	
	РеквизитыФормы = Новый Структура();
	РеквизитыФормы.Вставить("ВидОперации", Объект.ВидОперации);
	РеквизитыФормы.Вставить("ЭтоВозвратБезОснования", ЭтоВозвратБезОснования);
	РеквизитыФормы.Вставить("ЭтоЧекКоррекции", ЭтоЧекКоррекции);
	РеквизитыФормы.Вставить("ЧекККМВОбработке", ЧекККМВОбработке);
	РеквизитыФормы.Вставить("ЧекККМПродажа", ЧекККМПродажа);
	РеквизитыФормы.Вставить("ПечататьБумажныйЧек", ПечататьБумажныйЧек);
	РеквизитыФормы.Вставить("ОсобенностиУчетаВозвращаемойМаркируемойПродукции",
		ОсобенностиУчетаВозвращаемойМаркируемойПродукции);
	РеквизитыФормы.Вставить("ВариантЗаполненияМестаРасчетов", ВариантЗаполненияМестаРасчетов);
	РеквизитыФормы.Вставить("ВариантЗаполненияКассира", ВариантЗаполненияКассира);
	РеквизитыФормы.Вставить("ПечатьКопииЧека", ПечатьКопииЧека);
	РеквизитыФормы.Вставить("ПринтерЧеков", ПринтерЧеков);
	РеквизитыФормы.Вставить("ПечатьТоварногоЧека", ПечатьТоварногоЧека);
	РеквизитыФормы.Вставить("ПечатьЗаказаПриПробитииЧека", ПечатьЗаказаПриПробитииЧека);
	РеквизитыФормы.Вставить("СпособФормированияТоварногоЧека", СпособФормированияТоварногоЧека);
	РеквизитыФормы.Вставить("СпособПечатиЗаказаПокупателя", СпособПечатиЗаказаПокупателя);
	РеквизитыФормы.Вставить("ТекущаяНастройкаРМК", ТекущаяНастройкаРМК);
	РеквизитыФормы.Вставить("ККМПоддерживаетПроверкуКодовМаркировки", ККМПоддерживаетПроверкуКодовМаркировки);
	РеквизитыФормы.Вставить("ВыбраннаяСистемаНалогообложения", ВыбраннаяСистемаНалогообложения);
	
	ОбъектСтруктурой = Новый Структура();
	ОбъектСтруктурой.Вставить("ВидОперации", Объект.ВидОперации);
	РеквизитыФормы.Вставить("Объект", ОбъектСтруктурой);
	
	ДополнительныеДанные.Вставить("РеквизитыФормы", РеквизитыФормы);
	
	Возврат ДополнительныеДанные;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокСерийИПартий()
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	ВидОперации = Объект.ВидОперации;
	МассивСерий = Новый Массив;
	Если СерииНеВыгружаются Тогда
		Элементы.ВыборСерииИдентификатор.СписокВыбора.Очистить();
		МассивУжеДобавленныхСерий = Объект.Товары.Выгрузить().ВыгрузитьКолонку("ИдентификаторСерий");
		СтрокаМассива = МассивУжеДобавленныхСерий.Найти(ТекущаяСтрока.ИдентификаторСерий);
		Если НЕ СтрокаМассива = Неопределено Тогда
			МассивУжеДобавленныхСерий.Удалить(СтрокаМассива);
		КонецЕсли;
		ОбщегоНазначенияРМК.ЗаполнитьСписокВыбораСерийНоменклатурыБСЛ(
			ТекущаяСтрока.Номенклатура,
			ТекущаяСтрока.Характеристика,
			МассивСерий,
			МассивУжеДобавленныхСерий,
			ЭтотОбъект);
		Для Каждого СтрокаМассива Из МассивСерий Цикл
			Элементы.ВыборСерииИдентификатор.СписокВыбора.Добавить(СтрокаМассива.ИдентификаторСерий, СтрокаМассива.СерияПредставление);
		КонецЦикла;
	Иначе
		МассивУжеДобавленныхСерий = Объект.Товары.Выгрузить().ВыгрузитьКолонку("Серия");
		СтрокаМассива = МассивУжеДобавленныхСерий.Найти(ТекущаяСтрока.Серия);
		Если НЕ СтрокаМассива = Неопределено Тогда
			МассивУжеДобавленныхСерий.Удалить(СтрокаМассива);
		КонецЕсли;
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьСписокВыбораСерийНоменклатуры(
			ТекущаяСтрока.Номенклатура,
			ТекущаяСтрока.Характеристика,
			МассивСерий,
			МассивУжеДобавленныхСерий,
			ВидОперации,
			Объект.ТорговыйОбъект);
		Элементы.ВыборСерии.СписокВыбора.ЗагрузитьЗначения(МассивСерий);
	КонецЕсли;
		
		
	Если МассивСерий.Количество() > 0 Тогда
		МассивТипов = Новый Массив();
		МассивТипов.Добавить(ТипЗнч(МассивСерий[0]));
		ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
		Если СерииНеВыгружаются Тогда
			Элементы.ВыборСерииИдентификатор.ОграничениеТипа = ОписаниеТипа;
		Иначе
			Элементы.ВыборСерии.ОграничениеТипа = ОписаниеТипа;
		КонецЕсли;
	КонецЕсли;
	
	МассивПартий = Новый Массив;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьСписокВыбораПартийНоменклатуры(
		ТекущаяСтрока.Номенклатура,
		МассивПартий);
	
	Элементы.ВыборПартии.СписокВыбора.ЗагрузитьЗначения(МассивПартий);
	
	ОбщегоНазначенияРМКПереопределяемый.ПереопределитьПараметрыЗаполненияСерийИПартий(ТекущаяСтрока, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьСтрокуТовара(Форма, ТекущаяСтрока, ТаблицаТовары)
	
	ОбщегоНазначенияРМККлиентСервер.УдалитьСтрокуТовара(Форма, ТекущаяСтрока, ТаблицаТовары);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЧекНаВозвратСкупки()
	
	СформироватьЗаголовок(НСтр("ru='Возврат скупки'"));
	
	КассыККМИОрганизации = ПодключенныеКассыККМИОрганизации();
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("МассивКассККМ", КассыККМИОрганизации.МассивКассККМ);
	ПараметрыОткрытия.Вставить("МассивОрганизаций", КассыККМИОрганизации.МассивОрганизаций);
	ПараметрыОткрытия.Вставить("ТорговыйОбъект", Объект.ТорговыйОбъект);
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Чеки для возврата скупки'"));
	ПараметрыОткрытия.Вставить("ВозвратСкупки", Истина);
	ПараметрыОткрытия.Вставить("ВыводитьКомментарийКЧеку", ВыводитьКомментарийКЧеку);
	
	Объект.ВидОперации = ОбщегоНазначенияРМККлиент.ВидТекущейОперации(Истина, Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборЧекаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораЧека",
		ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокументОплатыРассрочки()

	СформироватьЗаголовок(НСтр("ru='Оплата рассрочки'"));
	
	КассыККМИОрганизации = ПодключенныеКассыККМИОрганизации();
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("МассивКассККМ", КассыККМИОрганизации.МассивКассККМ);
	ПараметрыОткрытия.Вставить("МассивОрганизаций", КассыККМИОрганизации.МассивОрганизаций);
	ПараметрыОткрытия.Вставить("ТорговыйОбъект", Объект.ТорговыйОбъект);
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Чеки для оплаты рассрочки'"));
	ПараметрыОткрытия.Вставить("ВыборДокументаРассрочки", Истина);
	ПараметрыОткрытия.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыОткрытия.Вставить("ВыводитьКомментарийКЧеку", ВыводитьКомментарийКЧеку);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеВыборДокументаРасчета", ЭтотОбъект);
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораЧека",
		ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияРМКПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
КонецПроцедуры

&НаСервере
Процедура НастроитьДоступностьСозданияКодаДоступа()
	
	КодДоступаУказан = КодДоступаПользователяУказан();
	ДоступностьКоманды = Не КодДоступаУказан И ЗначениеЗаполнено(КассирДляВхода);
	УстановитьДоступностьЭлементаФормы(Элементы.ОткрытьФормуСозданияКодаДоступа, ДоступностьКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьДанныеБонусов()
	
	Если Не ИспользоватьОплатуБонусами Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		
		Если (ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Или ЗначениеЗаполнено(Объект.Контрагент)
				Или ИнтерфейсРМКСлужебныйКлиентСервер.ПолученИдентификаторКартыЛояльности(ПараметрыКартыЛояльности)) Тогда
				
			ЗначенияПараметровМетода = ПараметрыМетодовБонуснойПодсистемы();
			ПараметрыВыполненияЗапроса
				= СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаПолучитьБонусыКлиента(ПараметрыПодключенияКСерверуЛояльности,
					ЗначенияПараметровМетода);
			Результат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
			
			Если Результат.ЕстьОшибки Тогда
				
				ДополнительноеПояснение = НСтр("ru = ''");
				
				Если ЕстьСвойство(Результат, "ТекстОшибки") Тогда
					ДополнительноеПояснение = СтрШаблон(НСтр("ru = ' по причине: %1'"), Результат.ТекстОшибки);
				КонецЕсли;
				
				ТекстПредупреждения = СтрШаблон("%1 %2",
					НСтр("ru = 'Не удалось получить сведения о бонусном балансе клиента'"),
						ДополнительноеПояснение);
				ПоказатьПредупреждение(, ТекстПредупреждения);
			
				Возврат;
				
			КонецЕсли;
			
			СтрокаJSON = Результат.ДанныеОтвета;
			Если НЕ СтрНачинаетсяС(СокрЛ(СтрокаJSON), "{") Тогда
				Элементы.ДекорацияВозможноОплатитьБонусами.Заголовок = СтрокаJSON;
				ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьДоступныхБонусов(Элементы, Истина);
				Возврат;
			КонецЕсли;
			
			ДанныеОтвета = Неопределено;
			СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
			
			Если НЕ ДанныеОтвета = Неопределено И ДанныеОтвета.Свойство("ClientNotFound") 
				И НЕ ДанныеОтвета.ClientNotFound Тогда
				
				ИнтерфейсРМКСлужебныйКлиентСервер.ОтобразитьИнформациюОБонусныхБаллах(ЭтотОбъект, ДанныеОтвета);
				Если (Не ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеДисконтнойКартыЗаполнены(ЭтотОбъект))
						И ДанныеОтвета.Свойство("CardRef") И ЗначениеЗаполнено(ДанныеОтвета.CardRef) Тогда
					
					ДополнитьПараметрыКартыКлиента(ДанныеОтвета);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
			
	ИначеЕсли ОбщегоНазначенияРМККлиент.ИспользоватьЗапросБонусовЛокально() Тогда
		
		ДобавитьЛокальнуюКартуКонтрагентаПриНеобходимости();
		ЗапроситьДанныеБонусовЛокально();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗапроситьДанныеБонусовЛокально()
	
	ОбщегоНазначенияРМКПереопределяемый.НайтиБонусыЛокально(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьБонусыПоТоварам(СтруктураОтложенногоПоказаПредупреждения = Неопределено)
	
	ЕстьТоварЗапрещенныйДляОплатыБонусами = Ложь;
	ЕстьНеНулевойТоварЗапрещенныйДляОплатыБонусами = Ложь;
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивКоэффициентов = Новый Массив;

	Если Объект.Товары.Количество() = 1 Тогда 
		МассивКоэффициентов.Добавить(Объект.Товары.Количество());
	Иначе
		
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			СуммаПослеСкидок = СтрокаТовары.СуммаБезСкидки
				- СтрокаТовары.СуммаАвтоматическойСкидки - СтрокаТовары.СуммаСкидкиНаценки;
			Предел = СуммаПослеСкидок;
			ОтборПределов = Новый Структура("ИдентификаторСтроки", СтрокаТовары.ИдентификаторСтроки);
			СтрокиОграниченияОплатыБонусами = ТаблицаСуммМаксимальнойОплатыбонусами.НайтиСтроки(ОтборПределов);
			Если СтрокиОграниченияОплатыБонусами.Количество() > 0 Тогда
				Предел = 0;
			КонецЕсли;
			Для Каждого СтрокаОграничения Из СтрокиОграниченияОплатыБонусами Цикл
				Предел = Предел + СтрокаОграничения.Сумма;
			КонецЦикла;
			ВозможноОплатитьБонусами = Мин(СуммаПослеСкидок, Предел);
			Если СтрокаТовары.ЗапретОплатыБонусамиСкидками Или СтрокаТовары.Подарок Тогда
				ЕстьТоварЗапрещенныйДляОплатыБонусами = Истина;
				Если ВозможноОплатитьБонусами > 0 Тогда
					ЕстьНеНулевойТоварЗапрещенныйДляОплатыБонусами = Истина;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			МассивКоэффициентов.Добавить(ВозможноОплатитьБонусами);
			
		КонецЦикла;
		
	КонецЕсли;
	
	РаспределенныеБонусы = 
		ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(СуммаОплаченоБонусами,
			МассивКоэффициентов, 2);
	
	БонусыРаспределены = ЗначениеЗаполнено(РаспределенныеБонусы);
	
	Индекс						= 0;
	СуммаБонусов				= 0;
	СуммаРаспределенияБонусов	= 0;
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		СуммаПослеСкидок = СтрокаТовары.СуммаБезСкидки
				- СтрокаТовары.СуммаАвтоматическойСкидки - СтрокаТовары.СуммаСкидкиНаценки;
		Предел = СуммаПослеСкидок;
		ОтборПределов = Новый Структура("ИдентификаторСтроки", СтрокаТовары.ИдентификаторСтроки);
		СтрокиОграниченияОплатыБонусами = ТаблицаСуммМаксимальнойОплатыбонусами.НайтиСтроки(ОтборПределов);
		Если СтрокиОграниченияОплатыБонусами.Количество() > 0 Тогда
			Предел = 0;
		КонецЕсли;
		Для Каждого СтрокаОграничения Из СтрокиОграниченияОплатыБонусами Цикл
			Предел = Предел + СтрокаОграничения.Сумма;
		КонецЦикла;
		ВозможноОплатитьБонусами = Мин(СуммаПослеСкидок, Предел);
		Если СтрокаТовары.ЗапретОплатыБонусамиСкидками Или СтрокаТовары.Подарок Тогда
			ЕстьТоварЗапрещенныйДляОплатыБонусами = Истина;
			Если ВозможноОплатитьБонусами > 0 Тогда
				ЕстьНеНулевойТоварЗапрещенныйДляОплатыБонусами = Истина;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если БонусыРаспределены Тогда
			
			СуммаРаспределенияБонусов = Мин(ВозможноОплатитьБонусами, РаспределенныеБонусы[Индекс]);
			
			Индекс = Индекс + 1;
			
		КонецЕсли;
		
		СтрокаТовары.СуммаСкидкиОплатыБонусом = СуммаРаспределенияБонусов;
		СуммаБонусов = СуммаБонусов + СуммаРаспределенияБонусов;
		
		ОбщегоНазначенияРМККлиентСервер.ПересчитатьСуммуВСтроке(ЭтотОбъект, СтрокаТовары,, ИспользоватьАвтоматическиеСкидки);
		ОбщегоНазначенияРМККлиентСервер.РассчитатьСуммуНДС(Объект, СтрокаТовары);
		
	КонецЦикла;
	
	СуммаОплаченоБонусами = СуммаБонусов;
	ЭтоОплатаВстречнымПредоставлением = (СуммаИтого = СуммаБонусов);
	
	Если ЕстьНеНулевойТоварЗапрещенныйДляОплатыБонусами И (Не ПредупреждениеОПродукцииБезОплатыБонусамиПоказано)
			И КоличествоБонусов > 0 Тогда
		
		Если СтруктураОтложенногоПоказаПредупреждения = Неопределено
				Или (Не СтруктураОтложенногоПоказаПредупреждения.ОтложенноеПредупреждение) Тогда
			ВывестиПредупреждениеОНевозможностиОплатыБонусами();
		Иначе
			СтруктураОтложенногоПоказаПредупреждения.Вставить("ПредупреждениеНужно", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	РаспределитьСуммуБонусовПоДисконтнымКартам();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПараметрыКассираДляПечати(ПараметрыОперации, ДополнительныеПараметрыДляПечати)
	ПараметрыОперации.Кассир = НСтр("ru='Администратор'");
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПараметрыКассираДляПечати(ПараметрыОперации, ДополнительныеПараметрыДляПечати);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПредставлениеТовара(ТекущаяСтрока)
	
	ПредставлениеТовара = "";
	Если ТекущаяСтрока.ЭтоНабор Тогда
		ПредставлениеХарактеристики = "";
		Если ЗначениеЗаполнено(ТекущаяСтрока.ХарактеристикаНабора) Тогда
			ПредставлениеХарактеристики = " (" + Строка(ТекущаяСтрока.ХарактеристикаНабора) + ")";
		КонецЕсли;
		ПредставлениеТовара = СтрШаблон("%1%2", ТекущаяСтрока.НоменклатураНабора, ПредставлениеХарактеристики);
	ИначеЕсли ТекущаяСтрока.НеобходимостьВводаКодаМаркировки И ЗначениеЗаполнено(ТекущаяСтрока.КодМаркировки)
		И ТекущаяСтрока.ПоштучноеВыбытие И ОбщегоНазначенияРМККлиентСервер.ЭтоПивнаяПродукция(ТекущаяСтрока.ОсобенностьУчета) Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ПолныйКодМаркировки", ТекущаяСтрока.КодМаркировки);
		ОписаниеКодаМаркировки = ТекущаяСтрока.КодыМаркировкиПоДаннымИБ.НайтиСтроки(ПараметрыОтбора);
		Если ОписаниеКодаМаркировки.Количество() = 0 Тогда
			ПредставлениеКодаМаркировки = ТекущаяСтрока.КодМаркировки;
		Иначе
			ПредставлениеКодаМаркировки = ОписаниеКодаМаркировки[0].КодМаркировкиПредставление;
		КонецЕсли;

		ПредставлениеТовара = СтрШаблон("%1 %2", ТекущаяСтрока.ПредставлениеНоменклатураХарактеристика, ПредставлениеКодаМаркировки);
	Иначе
		ПредставлениеТовара = ТекущаяСтрока.ПредставлениеНоменклатураХарактеристика;
	КонецЕсли;
	
	ТекущийТоварНаименование = ПредставлениеТовара;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьТекущуюЦену(ТекущаяСтрока)
	
	РазрешеноРедактироватьЦену = Ложь;
	Если ТекущаяСтрока.ЭтоНабор И ТекущаяСтрока.ЦенаНабораСводно Тогда
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("НомерНабора", ТекущаяСтрока.НомерНабора);
		
		ЦенаИтого = 0;
		СтрокиНабора = Объект.Товары.НайтиСтроки(ПараметрыПоиска);
		Для Каждого СтрокаНабора Из СтрокиНабора Цикл
			ЦенаИтого = ЦенаИтого + СтрокаНабора.Цена * СтрокаНабора.Количество / СтрокаНабора.КоличествоНаборов;
		КонецЦикла;
		
		ТекущийТоварЦенаИзКарточки = ЦенаИтого;
	ИначеЕсли ТекущаяСтрока.ПроизвольныйПодарочныйСертификат Тогда
		ТекущийТоварЦенаИзКарточки = ТекущаяСтрока.Цена;
		РазрешеноРедактироватьЦену = Истина;
	Иначе
		ТекущийТоварЦенаИзКарточки = ТекущаяСтрока.Цена;
		ЭтоОперацияПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
		ЭтоОперацияСкупка = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииСкупка(Объект.ВидОперации);
		ЭтоВозвратПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
		
		Если (ЭтоОперацияПродажа И НЕ ПриемАванса И НЕ ПриемАвансаПоЗаказу)
				ИЛИ ЭтоОперацияСкупка
				ИЛИ ЭтоЗаменаТоваров Тогда
				
			РазрешеноРедактироватьЦену = ПравоИзменятьЦенуРМК;
		Иначе
			РазрешеноРедактироватьЦену = ?(ПравоИзменятьЦенуРМК, (НЕ ЭтоВозвратПродажи ИЛИ ЭтоВозвратБезОснования), Ложь);
		КонецЕсли;
	КонецЕсли;
	ОбщегоНазначенияРМККлиентПереопределяемый.ПереопределитьРазрешениеРедактироватьЦенуДляТекущейСтроки(ЭтотОбъект,
		ТекущаяСтрока, РазрешеноРедактироватьЦену);
	УстановитьДоступностьЭлементаФормы(Элементы.ТекущийТоварЦенаИзКарточки, РазрешеноРедактироватьЦену);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьТекущееКоличество(ТекущаяСтрока)
	
	Если ТекущаяСтрока.ЭтоНабор Тогда
		ТекущийТоварКоличество = ТекущаяСтрока.КоличествоНаборов;
	Иначе
		ТекущийТоварКоличество = ТекущаяСтрока.КоличествоУпаковок;
	КонецЕсли;
	
	МинимальноеЗначениеПоляВводаКоличества = ?(ТекущаяСтрока.ЭтоНабор, 1, 0);
	Если Не Элементы.ТекущийТоварКоличество.МинимальноеЗначение = МинимальноеЗначениеПоляВводаКоличества Тогда
		Элементы.ТекущийТоварКоличество.МинимальноеЗначение = МинимальноеЗначениеПоляВводаКоличества;
	КонецЕсли;
	
	ЗапретДробногоКоличества = ТекущаяСтрока.ЗапретитьВводДробногоКоличества Или ТекущаяСтрока.ЭтоНабор;
	НовыйФормат = ?(ЗапретДробногоКоличества, "ЧДЦ=0", "");
	Если Не Элементы.ТекущийТоварКоличество.ФорматРедактирования = НовыйФормат Тогда
		Элементы.ТекущийТоварКоличество.ФорматРедактирования = НовыйФормат;
		Если РежимВводаСимволовИСумм(РежимЦифровойПанели, РежимыЦифровойПанели)
				И ЭлементВводаСуммы = Элементы.ТекущийТоварКоличество Тогда
				
			ЭтоВводСуммы = ЭтоПолеВводаДробнойСуммы(ЭлементВводаСуммы.ТекстРедактирования);
			СменитьЭлементВводаСуммы(ЭлементВводаСуммы, Не ЭтоВводСуммы);
				
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентПереопределяемый.ПереопределитьНастройкуТекущегоКоличества(ЭтотОбъект,
		ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПодсказкуДляВыбораСерийИПартий(ТекущаяСтрока)
	
	ТекстПодсказки = "";
	
	Если ТекущаяСтрока.НеобходимостьВводаСерии И ТекущаяСтрока.ИспользоватьПартии Тогда
		ТекстПодсказки = НСтр("ru = 'Указать серию и партию.'");
	ИначеЕсли ТекущаяСтрока.НеобходимостьВводаСерии Тогда
		ТекстПодсказки = НСтр("ru = 'Указать серию.'");
	ИначеЕсли ТекущаяСтрока.ИспользоватьПартии Тогда
		ТекстПодсказки = НСтр("ru = 'Указать партию.'");
	КонецЕсли;
	
	Элементы.УказатьСерии.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
	
КонецПроцедуры

&НаКлиенте
Процедура СкорректироватьТекущееКоличество(ТекущаяСтрока)
	
	Если ТекущаяСтрока.ПоштучноеВыбытие Тогда
		Если ОбщегоНазначенияРМККлиентСервер.ЭтоПивнаяПродукция(ТекущаяСтрока.ОсобенностьУчета) Тогда
			НовоеКоличество = ТекущийТоварКоличество;
		Иначе
			НовоеКоличество = Окр(ТекущийТоварКоличество);
			Если Не ТекущаяСтрока.КоличествоВПотребительскойУпаковке = 0
				И ТекущаяСтрока.КоличествоВПотребительскойУпаковке < ТекущийТоварКоличество Тогда
				
				НовоеКоличество = ТекущаяСтрока.КоличествоВПотребительскойУпаковке;
			КонецЕсли;
		КонецЕсли;

		Если ЗначениеЗаполнено(ТекущаяСтрока.КодМаркировки) Тогда
			ТекущаяСтрока.ТребуетсяПроверкаКодаМаркировки = Истина;
		КонецЕсли;
		ТекущийТоварКоличество = НовоеКоличество;
		ТекущаяСтрока.Количество = НовоеКоличество;
		ТекущаяСтрока.КоличествоУпаковок = НовоеКоличество;
		ТекущаяСтрока.ЧастичноеВыбытиеКоличество = НовоеКоличество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСкладаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьСвойство(Результат, "ДанныеСтроки") И ЗначениеЗаполнено(Результат.ДанныеСтроки) Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Склад = Результат.ДанныеСтроки;
		Если ТекущиеДанные.ЭтоНабор Тогда
			НомерНабора = ТекущиеДанные.НомерНабора;
			ЗаполнитьСкладВНаборе(Склад, НомерНабора);
		Иначе
			ТекущиеДанные.ТорговыйОбъект = Склад;
			ДанныеСтроки = Новый Структура("Номенклатура, Характеристика, ТорговыйОбъект, КоличествоОстаток, СистемаНалогообложения", 
				ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика, ТекущиеДанные.ТорговыйОбъект, ТекущиеДанные.КоличествоОстаток);
			ЗаполнитьДанныеСтрокиПоСкладу(ДанныеСтроки);
			ТекущиеДанные.КоличествоОстаток = ДанныеСтроки.КоличествоОстаток;
			Если ЗначениеЗаполнено(ДанныеСтроки.СистемаНалогообложения) Тогда
				ТекущиеДанные.СистемаНалогообложения = ДанныеСтроки.СистемаНалогообложения;
			КонецЕсли;
		КонецЕсли;
		
		УстановитьВидимостьЭлементаФормы(Элементы.СтраницаСкладВыбран, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.СтраницаДобавлениеСклада, Ложь);
		ТекущийСклад = СтрШаблон("%1 %2", НСтр("ru = 'Склад:'"), Склад);
		Если ОтображатьОстаток Тогда
			ТекущийТоварОстаток = СтрШаблон(НСтр("ru = 'Доступно: %1 %2'"),ТекущиеДанные.КоличествоОстаток, ТекущиеДанные.ПредставлениеЕдиницыИзмерения);
		КонецЕсли;
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаСкладВыбран);
		
		ПартииПодобраны = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЯчейкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьСвойство(Результат, "ДанныеСтроки") И ЗначениеЗаполнено(Результат.ДанныеСтроки) Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Ячейка = Результат.ДанныеСтроки;
		Если ТекущиеДанные.ЭтоНабор Тогда
			НомерНабора = ТекущиеДанные.НомерНабора;
			ЗаполнитьЯчейкуВНаборе(Ячейка, НомерНабора);
		Иначе
			ТекущиеДанные.Ячейка = Ячейка;
		КонецЕсли;
		
		УстановитьВидимостьЭлементаФормы(Элементы.СтраницаЯчейкаВыбрана, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.СтраницаДобавлениеЯчейки, Ложь);
		ТекущаяЯчейка = СтрШаблон("%1 %2", НСтр("ru = 'Ячейка:'"), Ячейка);
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаЯчейкаВыбрана);
		
		ПартииПодобраны = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборНастройкиРМКЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ЗакрытьПриложениеПриОшибке(Истина);
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СоздатьНастройкуРМК();
	Иначе
		ЗакрытьПриложениеПриОшибке(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНастройкуРМК()
	
	Оповещение = Новый ОписаниеОповещения("СозданиеНастройкиРМКЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.НастройкиРабочегоМестаКассира", ,
		ЭтотОбъект,
		УникальныйИдентификатор, , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеНастройкиРМКЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЗакрытьПриложениеПриОшибке(Истина);
	Возврат;
	
	ЗаполнитьТекущуюНастройкуРМК();
	Если ЗначениеЗаполнено(ТекущаяНастройкаРМК) Тогда
		ПриОткрытииФормыПродолжение();
	Иначе
		ОповеститьПользователяОбОтсутствииНастройкиРМК();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииФормыПродолжение()
	
	НастроитьВспомогательноеПодключаемоеОборудование();
	ПодключитьОбработчикОжидания("ИнициализироватьФормуРабочегоМестаКассира", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВспомогательноеПодключаемоеОборудование()

	Если ИспользоватьПодключаемоеОборудование Тогда
		
		ОповещениеПодключенияОборудования = Новый ОписаниеОповещения(
			"ЗавершитьПодключениеОборудования",
			ЭтотОбъект);
			
			
		МенеджерОборудованияРМККлиент.ПодключитьОборудованиеПоТипу(
			ОповещениеПодключенияОборудования,
			УникальныйИдентификатор,
			ПоддерживаемыеТипыПодключаемогоОборудования);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПользователяОбОтсутствииНастройкиРМК()
	
	ТекстЗаголовка = НСтр("ru = 'Настройки РМК'");
	Если ДоступноИзменениеНастройкиРМК Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось определить настройки РМК.
									|Создать настройки?'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Создать'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отменить'"));
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось определить настройки РМК.
							|Обратитесь к администратору системы.'");
		Кнопки = РежимДиалогаВопрос.ОК;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ВыборНастройкиРМКЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение,
		ТекстСообщения,
		Кнопки, , ,
		ТекстЗаголовка);
	
КонецПроцедуры

&НаСервере
Процедура ПродолжитьЗаполнениеФормы()
	
	НастроитьФормуПоТекущемуПользователю();
	НастроитьТиповыеГорячиеКлавиши();
	НастроитьГорячиеКлавиши();
	НастроитьВидОтображения();
	ОбновитьЦеныИзбранныхИПлиток();
	ИнтерфейсРМКСлужебный.УстановитьУсловноеОформление(ЭтотОбъект);
	НастроитьРежимКассыСамообслуживанияПервоначально();
	НастроитьРежимКассыСамообслуживания();
	ИнтерфейсРМКСлужебный.НастроитьИспользованиеКнопокВыбораПолей(ЭтотОбъект);
	
	Если ИспользоватьОплатуПлатежнымиКартами Тогда
		ОбщегоНазначенияРМКПереопределяемый.НастроитьОплатуПлатежнымиКартами(ЭтотОбъект);
	КонецЕсли;
	
	Если ЗапускатьОбменИзИнтерфейсаРМК Тогда
		ЗаполнитьУзлыОбмена();
	КонецЕсли;
	
	СоздатьКнопкиОрганизацийНаФорме();
	НастроитьДоступностьСозданияКодаДоступа();
	ИнтерфейсРМКСлужебный.НастроитьЭлементыФормыПоТекущейНастройке(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеКодаДоступаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПрерватьСозданиеКодаДоступа = Результат = Неопределено
		И ((ДополнительныеПараметры = Неопределено)
		ИЛИ (ЗначениеЗаполнено(ДополнительныеПараметры)
		И НЕ ЕстьСвойство(ДополнительныеПараметры, "КодДоступа")
		ИЛИ НЕ ЗначениеЗаполнено(ДополнительныеПараметры.КодДоступа)));
		
	Если ПрерватьСозданиеКодаДоступа Тогда
		Возврат;
	КонецЕсли;
	
	КодКассира = ?(ЗначениеЗаполнено(Результат), Результат, ДополнительныеПараметры.КодДоступа);
	УстановитьДоступностьЭлементаФормы(Элементы.ОткрытьФормуСозданияКодаДоступа, НЕ ЗначениеЗаполнено(КодКассира));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФормуПриСозданииНаСервере()
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьДанныеДляРМК(ЭтотОбъект);
	ЗаполнитьТекущуюНастройкуРМК();
	ИнтерфейсРМКСлужебный.ПрименитьНастройкуПорядкаОбластей(ЭтотОбъект);
	АктуализироватьПереченьГруппыКомандЕще();
	ЗаполнитьДанныеССервераЛояльности();
	ИспользоватьРазрешительныйРежимГосИС = ИспользоватьРазрешительныйРежимПродажиГосИС();
	
	Если ЗначениеЗаполнено(Объект.ТорговыйОбъект) Или РежимКассыСамообслуживания Тогда 
		ЕстьОшибкиЗаполненияДанныхРМК = Ложь;
		ПроверитьВозможностьРаботы(ЕстьОшибкиЗаполненияДанныхРМК);
		Если ЕстьОшибкиЗаполненияДанныхРМК Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПродолжитьЗаполнениеФормы();
	НастроитьПодсказкуПлатежнойСистемыВозврата();
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьТорговыйОбъект()
	
	ПараметрыОткрытияФормы = Неопределено;
	
	Объект.ТорговыйОбъект = ТорговыйОбъектДляВхода;
	ЗаполнитьФормуПриСозданииНаСервере();
	МенеджерОборудованияРМККлиент.ОбновитьВозможностиЭквайринговыхТерминалов(ЭтотОбъект);
	
	Если Не ПараметрыОткрытияФормы = Неопределено Тогда
		ПроверитьФормуПриОткрытии();
	КонецЕсли;
	
	ЗаполнитьКнопкиИзбранныхПозиций();
	ЗаполнитьКнопкиПлиток();
	ЗаполнитьКэшПлитки();
	ОтразитьОстаткиНаличныхДенежныхСредствНаФорме(Объект.Организация, Объект.КассаККМ);
	
	Если Не ПараметрыОткрытияФормыГосИС = Неопределено Тогда
		ОбработатьПараметрыГосИС();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФормуПриОткрытии(Отказ = Ложь, ОтложеннаяПроверкаКассовойСмены = Неопределено)
	
	ПриОткрытииФормыПродолжение();
	Если ЕстьСвойство(ПараметрыОткрытияФормы, "ТекстСообщения")
		И ЕстьСвойство(ПараметрыОткрытияФормы, "ТекстЗаголовка") Тогда
		
		Если РежимКассыСамообслуживания Или ПараметрыОткрытияФормы.ОшибкаЗапуска = "НастройкаКСО" Тогда
			
			ИнтерфейсРМКСлужебныйКлиентСервер.ВывестиОшибкуОткрытияРабочегоМеста(Элементы,
				ПараметрыОткрытияФормы.ТекстЗаголовка,
				ПараметрыОткрытияФормы.ТекстСообщения);
		
		Иначе
		
			Если ПараметрыОткрытияФормы.ОшибкаЗапуска = "НастройкаРМК" Тогда
				ОповеститьПользователяОбОтсутствииНастройкиРМК();
			Иначе
				Если ПараметрыОткрытияФормы.ОшибкаЗапуска = "КассаККМ"
					Или ПараметрыОткрытияФормы.ОшибкаЗапуска = "РабочееМесто"
					Или ПараметрыОткрытияФормы.ОшибкаЗапуска = "СНО"
					Или ПараметрыОткрытияФормы.ОшибкаЗапуска = "Валюта" Тогда
					Отказ = Истина;
				КонецЕсли;
				Если ПараметрыОткрытияФормы.ОшибкаЗапуска = "Палитра" Тогда
					Оповещение = Неопределено;
				Иначе
					Оповещение = Новый ОписаниеОповещения("ЗакрытьПриложениеПриОшибке", ЭтотОбъект);
				КонецЕсли;
				ПоказатьПредупреждение(Оповещение,
					ПараметрыОткрытияФормы.ТекстСообщения, ,
					ПараметрыОткрытияФормы.ТекстЗаголовка);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЕстьСвойство(ПараметрыОткрытияФормы, "ПроверитьКассовуюСмену") Тогда
		Если ОтложеннаяПроверкаКассовойСмены = Неопределено Тогда
			ПроверитьКассовуюСменуИНайтиКассира();
		Иначе
			ОтложеннаяПроверкаКассовойСмены = Истина;
		КонецЕсли;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПараметрыГосИС()
	Если ПараметрыОткрытияФормыГосИС.Свойство("РезультатыОбновленияКлючаСессии") Тогда
		Для каждого РезультатОбновленияКлючаСессии Из ПараметрыОткрытияФормыГосИС.РезультатыОбновленияКлючаСессии Цикл
			ЛокальноеОбновление = РезультатОбновленияКлючаСессии.ПараметрыОбновленияКлючаСессии.ПараметрыИСМП.ЛокальныйКонтрольКлючаИСМП;
			Если ЛокальноеОбновление Тогда
				ОрганизацияКлюча = РезультатОбновленияКлючаСессии.ПараметрыОбновленияКлючаСессии.Организация;
				ИнтерфейсАвторизацииИСМПКлиент.ЗапроситьКлючСессии(
					ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессииИСМПРозница(ОрганизацияКлюча));
			КонецЕсли;
			
			Если РезультатОбновленияКлючаСессии.Ошибка Тогда
				ТекстЗаголовка = НСтр("ru = 'Обновление ключа авторизации.'");
				ТекстСообщения = РезультатОбновленияКлючаСессии.ОписаниеОшибки;
				ПоказатьПредупреждение(, ТекстСообщения, , ТекстЗаголовка);
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыОткрытияФормыГосИС.Удалить("РезультатыОбновленияКлючаСессии");
	ИначеЕсли ПараметрыОткрытияФормыГосИС.Свойство("РезультатОбновленияСпискаCDNПлощадок") Тогда
		Если ПараметрыОткрытияФормыГосИС.РезультатОбновленияСпискаCDNПлощадок.ТребуетсяОбновлениеСпискаCDNПлощадок Тогда
			ОрганизацияCDN = ПараметрыОткрытияФормыГосИС.РезультатОбновленияСпискаCDNПлощадок.Организация;
			ОбщегоНазначенияРМККлиентПереопределяемый.АктуализацияСпискаCDNПлощадок(ОрганизацияCDN, УникальныйИдентификатор);
		КонецЕсли;
		
		ПараметрыОткрытияФормыГосИС.Удалить("РезультатОбновленияСпискаCDNПлощадок");
	КонецЕсли;
	
	Если ПараметрыОткрытияФормыГосИС.Количество() = 0 Тогда
		ПараметрыОткрытияФормыГосИС = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СменитьМагазинИлиКассира(СменитьМагазин = Ложь)
	
	ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
	КассирДоЗаменыПрав = Объект.Кассир;
	Объект.Кассир = Неопределено;
	КассирДляВхода = Неопределено;
	КодКассира = НСтр("ru = ''");
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаВводКассира);
	НастроитьДоступностьГорячейКлавишиEnter();
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОперации, Ложь);
	ВывестиИнформациюНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.Сервис);
	
	Если Не СменитьМагазин Тогда
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаВыборМагазинаДляВхода, Ложь);
		ТекущийЭлемент = Элементы.КодКассира;
	Иначе
		ТекущийЭлемент = Элементы.ТорговыйОбъектДляВхода;
	КонецЕсли;
	НеобходимоПерезаполнитьТаблицуУправляемыхСкидок = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРежимВыбораПодарочногоСертификатаКлиент(Номенклатура)
	
	ПодарочныйСертификат = Номенклатура;
	ЭтоСерийныйПодарочныйСертификат = ИспользованиеСерий(ПодарочныйСертификат);
	
	Если Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевЛеваяВерхняяВспомогательнаяПанель) = Элементы.ГруппаПоискСертификатов Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаПоискСертификатов);
	КонецЕсли;
	Если ЭтоСерийныйПодарочныйСертификат Тогда
		НомерСертификата = "";
		СуммаОстаткаСертификатов = 0;
		СуммаСертификата = 0;
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаСертификатами, Истина);
	Иначе
		НомерСертификата = Неопределено;
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаСертификатами, Истина);
		НайтиСертификатКлиент();
	КонецЕсли;
	
	РежимВыбораПодарочногоСертификата = Ложь;
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьГруппыОперации(Элементы);
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	
	СписокТоваров.Отбор.Элементы.Очистить();
	ВосстановитьОтображениеКаталогаПоНастройкам();
	ИзменитьСостояниеЗаголовкаСтраницыПоискаТовара(, Истина);
	Если ЭтоСерийныйПодарочныйСертификат Тогда
		ТекущийЭлемент = Элементы.НомерСертификата;
	Иначе
		ТекущийЭлемент = Элементы.ОтменаПоискаСертификата;
	КонецЕсли;
	ТекущийЭлемент = Элементы.ГруппаОплатаСертификатами;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьИнтерфейсРежимаКассыСамообслуживанияКлиент()
	Если РежимКассыСамообслуживания Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьИнтерфейсРежимаКассыСамообслуживания(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НастроитьИнтерфейсРежимаКассыСамообслуживания()
	Если РежимКассыСамообслуживания Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьИнтерфейсРежимаКассыСамообслуживания(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НастроитьРазмерыКомандВРежимеКассыСамообслуживания()
	Если РежимКассыСамообслуживания Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьРазмерыКомандВРежимеКассыСамообслуживания(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НастроитьРежимКассыСамообслуживания()
	НастроитьИнтерфейсРежимаКассыСамообслуживания();
	НастроитьРазмерыКомандВРежимеКассыСамообслуживания();
КонецПроцедуры

&НаКлиенте
Процедура ВыборКассираЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КассирДляВхода = РезультатВыполнения;
	КассирПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КассирПриИзмененииКлиент()
	
	НастроитьДоступностьСозданияКодаДоступа();
	Если ЗначениеЗаполнено(КассирДляВхода) Тогда
		ТекущийЭлемент = Элементы.КодКассира;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЧекПродолжение(ДействиеСотрудника = Ложь)
	
	НеобходимоеПраво = "ПравоУдалитьЧекРМК";
	Если ДействиеСотрудника Тогда
		ПравоНаДействие = Истина;
	Иначе
		ПравоНаДействие = ЕстьПравоНаДействие(НеобходимоеПраво);
	КонецЕсли;
	ТекущаяОперация = "УдалитьЧекРМК";
	
	ЗакрытьФормуЦифровойПанели();
	Если Объект.Оплата.Количество() > 0 Тогда
		
		Если ПравоНаДействие Тогда
			ВыполнитьОтменуОплатыКлиент();
		Иначе
			
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
			ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		Если Не ТипОплаты = "СБП"
			ИЛИ Элементы.ГруппаПанельДействийNFC.Видимость Тогда
			Если ПравоНаДействие Тогда
				УдалитьЧекКлиент();
				ОбработатьИзменениеТаблицыТоваровНаКлиенте();
			Иначе
				
				ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
				ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
				
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОчиститьДанныеКартыЛояльности();
		СоздатьНовыйНабор();
		ПривестиПараметрыПробитияЧекаКЗначениямПоУмолчанию();
		ПереключатьсяВРежимПлитки = ОсновнойПодборПлиточный;
		ПереключитьВРежимПлитки();
		СформироватьЗаголовок(НСтр("ru='Продажа'"));
		ОбработатьИзменениеТаблицыТоваровНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьЗапросаБалансаСертификата()
	
	ВидимостьЗапросаБаланса = Ложь;
	
	ЭтоПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	ЗапрашиватьБаланс = Ложь;
	ОбщегоНазначенияРМККлиентПереопределяемый.ОпределитьНеобходимостьЗапросаБалансаСертификата(ЗапрашиватьБаланс);
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	ТипНоменклатурыСертификат = ОбщегоНазначенияРМККлиент.ТипНоменклатурыПодарочныйСертификат();
	
	ВидимостьЗапросаБаланса = НЕ ЭтоПродажа 
		И ЗапрашиватьБаланс 
		И НЕ ТекущаяСтрока = Неопределено
		И ТекущаяСтрока.ТипНоменклатуры = ТипНоменклатурыСертификат
		И ТекущаяСтрока.НеобходимостьВводаСерии;
		
	Если НЕ Элементы.ЗапроситьБалансСертификата.Видимость = ВидимостьЗапросаБаланса Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ЗапроситьБалансСертификата, ВидимостьЗапросаБаланса);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗапроситьБалансСертификатаСервер()
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СерииНеВыгружаются Тогда
		Серия = ТекущаяСтрока.ИдентификаторСерий;
	Иначе
		Серия = ТекущаяСтрока.Серия;
	КонецЕсли;
	СерияЗаполнена = ЗначениеЗаполнено(Серия);
	
	Если НЕ СерияЗаполнена Тогда
		ТекстСообщения = НСтр("ru = 'Серия не заполнена'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПараметрыСертификата = Новый Структура;
	ПараметрыСертификата.Вставить("БалансСертификата", 0);
	ПараметрыСертификата.Вставить("Сертификат", ТекущаяСтрока.Номенклатура);
	ПараметрыСертификата.Вставить("Серия", Серия);
	ПараметрыСертификата.Вставить("СерииНеВыгружаются", СерииНеВыгружаются);
	
	ОбщегоНазначенияРМКПереопределяемый.ЗапроситьБалансСертификата(ПараметрыСертификата);
	
	Если НЕ ПараметрыСертификата.БалансСертификата = 0 Тогда
		ТекущийТоварЦенаИзКарточки = ПараметрыСертификата.БалансСертификата;
		ДобавитьСертификатВТаблицу(ЭтотОбъект, ПараметрыСертификата.БалансСертификата, ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПараметрыПодключенияКСерверуЛояльности()
	
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		ОбновитьПараметрыПодключенияКСерверуЛояльностиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыПодключенияКСерверуЛояльностиНаКлиенте()
	
	ПараметрыПодключенияКСерверуЛояльности = ОбщегоНазначенияРМКВызовСервера.ЗначенияПараметровСервераЛояльности(ТекущаяНастройкаРМК);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварПоСтрокеКлиент()
	
	Если Не ЗначениеЗаполнено(ВводТовараПоСтроке) Тогда
		Возврат;
	КонецЕсли;
	ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
	
	ТребуетсяПовышениеПрав = Ложь;
	ОбновитьКоличествоВРедактируемойСтроке(ТребуетсяПовышениеПрав);
	Если Не ТребуетсяПовышениеПрав Тогда
		ДобавитьТоварПоСтрокеКлиентПродолжение();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТоварПоСтроке(ЭтоТоварСХарактеристикой, ДанныеКонтроляПродаж)
	
	ЭтоТоварСХарактеристикой = ОбщегоНазначенияРМК.ТребуетсяВводХарактеристикиДляНоменклатуры(ВводТовараПоСтроке);
	Если ЭтоТоварСХарактеристикой Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчетаЦены = ОбщегоНазначенияРМК.ПараметрыРасчетаЦены();
	ПараметрыРасчетаЦены.ВидЦены = РозничныйВидЦены;
	ПараметрыРасчетаЦены.ТорговыйОбъект = Объект.ТорговыйОбъект;
	ПараметрыРасчетаЦены.Организация = Объект.Организация;
	ПараметрыРасчетаЦены.Номенклатура = ВводТовараПоСтроке;
	
	ОбщегоНазначенияРМКПереопределяемый.РассчитатьЦенуВыбранногоТовара(ПараметрыРасчетаЦены);
	
	ПараметрыДобавленияТовара = Новый Структура;
	ПараметрыДобавленияТовара.Вставить("Номенклатура", ВводТовараПоСтроке);
	ПараметрыДобавленияТовара.Вставить("Цена", ПараметрыРасчетаЦены.Цена);
	ПараметрыДобавленияТовара.Вставить("Упаковка");
	
	ДополнительныеДанные = ШаблонДополнительныхДанныхЗапросаКонтроляПродаж(ЭтотОбъект);
	ДополнительныеДанные.Вставить("Характеристика", Неопределено);
	
	ОбработатьВыборТовараСервер(ПараметрыДобавленияТовара, ДополнительныеДанные);
	Если Не ДополнительныеДанные.ДанныеКонтроляПродаж = Неопределено Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.ДобавитьНовыеДанныеКэшаПродаж(ДанныеКонтроляПродаж,
			ДополнительныеДанные.ДанныеКонтроляПродаж);
	КонецЕсли;
	
	ВводТовараПоСтроке = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложитьЧекКлиент()
	
	Если ОжидаемоеКоличествоЧеков > 1 И ОтложенныйЧекПолностьюОплачен Тогда
		
		Если ККМПоддерживаетПроверкуКодовМаркировки
			И ЗначениеЗаполнено(ИдентификаторТекущейСессииПроверкиМарок)
			И ВозможноЗакрытьСессиюРегистрацииМарок(Истина) Тогда
			ЗакрытьСессиюРегистрацииМарок();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЧекККМВОбработке) Тогда
			ОтложенныйЧек = ЧекККМВОбработке;
		КонецЕсли;
		ВыполнитьОтменуОплатыКлиент();
		ОчиститьДанныеПромокодов(Истина);
		РазблокироватьОбъектСервераЛояльности("clientbonuses");
		СписатьРазблокироватьПодарочныеСертификаты();
		
		ОтложитьЧекСервер();
		
		НастроитьВидимостьВводаПромокода(Истина);
		ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
		
		СтрокиНаУдаления = Объект.Товары.НайтиСтроки(Новый Структура("Оплачена", Истина));
		
		Если СтрокиНаУдаления.Количество() > 0 Тогда
			
			Для Каждого СтрокаНаУдаление Из СтрокиНаУдаления Цикл
				Объект.Товары.Удалить(СтрокаНаУдаление);
			КонецЦикла;
			
		КонецЕсли;
		
		Объект.Оплата.Очистить();
		
		ОжидаемоеКоличествоЧеков = ОжидаемоеКоличествоЧеков - 1;
		
		Если ПробитыеЧеки.Количество() > 0 Тогда 
			ПробитыеЧеки.Очистить();
		КонецЕсли;
		
		ЧекККМВОбработке = Неопределено;
		ОтложенныйЧек = Неопределено;
		ОтложенныйЧекПолностьюОплачен = Ложь;
		ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
		ПараметрыПересчета.ПоКомандеПереключитьЧек = "НаСледующий";
		РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
		
	Иначе
		
		СтрокиНаУдаления = Объект.Товары.НайтиСтроки(Новый Структура("Оплачена", Истина));
		
		Если СтрокиНаУдаления.Количество() > 0 Тогда
			
			Для Каждого СтрокаНаУдаление Из СтрокиНаУдаления Цикл
				Объект.Товары.Удалить(СтрокаНаУдаление);
			КонецЦикла;
			
		КонецЕсли;
		
		Если Объект.Товары.Количество() = 0 Тогда
			ОбработатьИзменениеТаблицыТоваровНаКлиенте();
			Возврат;
		КонецЕсли;
		
		ЧекОплачивается = Ложь;
		Если СуммаОплаченоСБП > 0 Или СуммаОплаченоЮКасса > 0 Тогда
			ЧекОплачивается = Истина
		КонецЕсли;
		
		Если ККМПоддерживаетПроверкуКодовМаркировки
			И ЗначениеЗаполнено(ИдентификаторТекущейСессииПроверкиМарок)
			И ВозможноЗакрытьСессиюРегистрацииМарок(Истина) Тогда
			ЗакрытьСессиюРегистрацииМарок();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЧекККМВОбработке) Тогда
			ОтложенныйЧек = ЧекККМВОбработке;
		КонецЕсли;
		ВыполнитьОтменуОплатыКлиент();
		Если ЧекОплачивается Тогда
			Объект.Оплачивается = Истина;
		Иначе
			Объект.Оплата.Очистить();
		КонецЕсли;
		ОжидаемоеКоличествоЧеков = 1;
		ОчиститьДанныеПромокодов(Истина);
		ТаблицаПодарков.Очистить();
		РазблокироватьОбъектСервераЛояльности("clientbonuses");
		СписатьРазблокироватьПодарочныеСертификаты();
		ПроверитьОчиститьКартуЛояльностиПриОткладыванииЧека();
		
		ОтложитьЧекСервер();
		ОчиститьДанныеКартыЛояльности();
		ТекущаяОперация = "";
		
		ПереключатьсяВРежимПлитки = ОсновнойПодборПлиточный;
		ВывестиИнформациюНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.ОтложитьЧек);
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнфо, Ложь);
		Если РежимНачальнойСтраницы = 1 Тогда
			НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Ложь);
		Иначе
			НастроитьЭлементыФормы(Элементы.СтраницаПустая, Ложь);
		КонецЕсли;
		Если НачинатьНовыйЧекВРежимеСкупка Тогда
			ПереключитьРежимНаСкупка();
		Иначе
			СформироватьЗаголовок(НСтр("ru='Продажа'"));
		КонецЕсли;
		
		НастроитьВидимостьВводаПромокода(Истина);
		ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтменитьОтложитьЧекЗавершение", ЭтотОбъект);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Чек отложен'"), ОписаниеОповещения, "Отменить");
		
	КонецЕсли;
	ОбработатьИзменениеТаблицыТоваровНаКлиенте();
	ПривестиПараметрыПробитияЧекаКЗначениямПоУмолчанию();
	
	ПлиткаДомойКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложенныеЧекиКлиент()
	
	ТекущаяОперация = "";
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='Перед выбором отложенного чека необходимо пробить,
										|удалить или отложить текущий чек.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	КассыККМИОрганизации = ПодключенныеКассыККМИОрганизации();
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("МассивКассККМ", КассыККМИОрганизации.МассивКассККМ);
	ПараметрыОткрытия.Вставить("МассивОрганизаций", КассыККМИОрганизации.МассивОрганизаций);
	ПараметрыОткрытия.Вставить("ТорговыйОбъект", Объект.ТорговыйОбъект);
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Отложенные чеки'"));
	ПараметрыОткрытия.Вставить("ВыборОтложенногоЧека", Истина);
	ПараметрыОткрытия.Вставить("ВыводитьКомментарийКЧеку", ВыводитьКомментарийКЧеку);
	
	КоличествоОтложенныхЧеков = КоличествоОтложенныхЧеков(ПараметрыОткрытия, ОтложенныйЧек);
	
	Если КоличествоОтложенныхЧеков = 0 Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Нет отложенных чеков.'"));
		Возврат;
		
	КонецЕсли;
	
	Если КоличествоОтложенныхЧеков = 1 И ЗначениеЗаполнено(ОтложенныйЧек) Тогда
		
		ПродолжитьЧекКлиент();
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборОтложенногоЧекаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораЧека",
		ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьПараметрыПустойСтраницы(СуммаПродаж)
	Если РежимКассыСамообслуживания Тогда
		СуммаПродажСтрокой = ПодготовитьСуммуПродажСтрокой(СуммаПродаж);
		
		ВремяОтображения = 5;
		ПараметрыПустойСтраницы = Новый Структура;
		ПараметрыПустойСтраницы.Вставить("СуммаПродаж", СуммаПродажСтрокой);
		ПараметрыПустойСтраницы.Вставить("ВремяОтображения", ВремяОтображения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьСуммуПродажСтрокой(СуммаПродаж)
	ПодписьЦелаяЧасть = НСтр("ru = 'руб.'");
	ПодписьДробнаяЧасть = НСтр("ru = 'коп.'");
	СуммаЦелая = Цел(СуммаПродаж);
	СуммаПродажСтрокой = СтрШаблон("%1 %2", Формат(СуммаЦелая, "ЧДЦ=0"), ПодписьЦелаяЧасть);
	ДробнаяЧасть = Цел((СуммаПродаж - СуммаЦелая) * 100);
	Если ДробнаяЧасть > 0 Тогда
		СуммаПродажСтрокой = СтрШаблон("%1 %2 %3", СуммаПродажСтрокой, Формат(ДробнаяЧасть, "ЧДЦ=0"), ПодписьДробнаяЧасть);
	КонецЕсли;
	Возврат СуммаПродажСтрокой;
КонецФункции

&НаКлиенте
Функция ПолучитьСуммуПробитыхЧеков()
	
	РезультатФункции = 0;
	Для Каждого СтрокаЧека Из ПробитыеЧеки Цикл
		РезультатФункции = РезультатФункции + СтрокаЧека.СуммаЧека;
	КонецЦикла;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьДействияПослеПробитияПоследнегоЧека(НужноЗаморозитьФорму)

	ВыполнитьПечатьКопииЧека = (ТекущийЧекЭлектронный И ХочуБумажныйЧек);
	НужноЗаморозитьФорму = (ОставлятьПоследнийЧекНаЭкране И Не РежимКассыСамообслуживания);
	Если ВыполнитьПечатьКопииЧека Тогда
		ПараметрыПечати = ПодготовитьПараметрыПечатиКопийЧеков(НужноЗаморозитьФорму);
		ВыполнитьПечатьКопииЧекаПоПорядку(ПараметрыПечати);
	ИначеЕсли Не НужноЗаморозитьФорму Тогда
		СуммаПродаж = ПолучитьСуммуПробитыхЧеков();
		ПодготовитьПараметрыПустойСтраницы(СуммаПродаж);
	КонецЕсли;
	ПривестиПараметрыПробитияЧекаКЗначениямПоУмолчанию();
	
	Если Не (НужноЗаморозитьФорму Или ВыполнитьПечатьКопииЧека) Тогда
		ПоказатьПустуюСтраницуПослеПробитияЧека();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивПробитыхЧеков(СуммаПродаж)
	
	МассивЧеков = Новый Массив;

	Для Каждого СтрокаЧека Из ПробитыеЧеки Цикл
		МассивЧеков.Добавить(СтрокаЧека.ЧекККМ);
		СуммаПродаж = СуммаПродаж + СтрокаЧека.СуммаЧека;
	КонецЦикла;
	
	Возврат МассивЧеков;
	
КонецФункции

&НаКлиенте
Функция ПодготовитьПараметрыПечатиКопийЧеков(НужноЗаморозитьФорму)

	СуммаПродаж = 0;
	МассивЧеков = ПолучитьМассивПробитыхЧеков(СуммаПродаж);
	Если Не НужноЗаморозитьФорму Тогда
		ПодготовитьПараметрыПустойСтраницы(СуммаПродаж);
	КонецЕсли;
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ПечатьПослеПробития", Истина);
	ПараметрыПечати.Вставить("НужноЗаморозитьФорму", НужноЗаморозитьФорму);
	ПараметрыПечати.Вставить("МассивЧеков", МассивЧеков);
	ПараметрыПечати.Вставить("ИндексЧека", 0);
	
	Возврат ПараметрыПечати;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПечатьКопииЧекаПоПорядку(ПараметрыПечати)
	
	Если ПараметрыПечати.ИндексЧека < ПараметрыПечати.МассивЧеков.Количество() Тогда
		
		ЧекДляПечати = ПараметрыПечати.МассивЧеков[ПараметрыПечати.ИндексЧека];
		НапечататьФискальныйЧекБезФискализации(ЧекДляПечати, ПараметрыПечати);
		
	ИначеЕсли Не ПараметрыПечати.НужноЗаморозитьФорму Тогда
		ПоказатьПустуюСтраницуПослеПробитияЧека();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПривестиПараметрыПробитияЧекаКЗначениямПоУмолчанию()
	
	ПробитиеСоСтраницыОтправкиЧека = Ложь;
	ПараметрыОплатыПлатежнойСистемой = Неопределено;
	УстановитьПризнакХочуБумажныйЧек(ПечататьБумажныйЧек);
	ТекущийЧекЭлектронный = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПустуюСтраницуПослеПробитияЧека()
	
	ПереключатьсяВРежимПлитки = ОсновнойПодборПлиточный;
	
	ОчищатьДисплейПокупателя = Ложь;
	ИнициализироватьИнтерфейсРабочегоМестаКассира(ОчищатьДисплейПокупателя);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости()
	Если ФормаЗамороженаПослеПробитияЧека() Тогда
		РазморозитьФормуПослеПробитияЧека();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ФормаЗамороженаПослеПробитияЧека()
	Возврат РежимРаботыСЧеком = РежимыРаботыСЧеком.ПродолжениеПослеПробития;
КонецФункции

&НаКлиенте
Процедура ПробитьТекущийЧекКлиент()
	Если ПробитыеЧеки.Количество() > 0 Тогда
		ТекущийЧек = ПробитыеЧеки[ПробитыеЧеки.Количество() - 1].ЧекККМ;
		НапечататьФискальныйЧекБезФискализации(ТекущийЧек);
	ИначеЕсли РежимРаботыСЧеком = РежимыРаботыСЧеком.Проверка И ЗначениеЗаполнено(ЧекККМПродажа) Тогда
		НапечататьФискальныйЧекБезФискализации(ЧекККМПродажа);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьТекущийТоварныйЧекКлиент()
	Если ПробитыеЧеки.Количество() > 0 Тогда
		ТекущийЧек = ПробитыеЧеки[ПробитыеЧеки.Количество() - 1].ЧекККМ;
		НапечататьТоварныйЧекПоФискальномуЧеку(ТекущийЧек);
	ИначеЕсли РежимРаботыСЧеком = РежимыРаботыСЧеком.Проверка И ЗначениеЗаполнено(ЧекККМПродажа) Тогда
		НапечататьТоварныйЧекПоФискальномуЧеку(ЧекККМПродажа);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВозвратТекущегоЧекаНаКлиенте(Команда)
	
	Объект.ВидОперации = ОбщегоНазначенияРМККлиент.ВидТекущейОперации(Истина);
	ТекущийЧек = ПолучитьЧекДляВозврата();
	Если ЗначениеЗаполнено(ТекущийЧек) Тогда
		
		Если РежимРаботыСЧеком = РежимыРаботыСЧеком.Проверка Тогда
			ПерейтиКСВозвратуЧекаПроверки(ТекущийЧек);
		Иначе
			ВыполнитьВозвратЗамороженногоЧека(ТекущийЧек);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВозвратЗамороженногоЧека(ТекущийЧек)
	
	РазморозитьФормуПослеПробитияЧека(Истина);
	ОбнулитьПеременныеСуммОплат();
	Элементы.Предоплата.Заголовок = НСтр("ru = 'Предоплата'");
	НужноОтработатьВыборОрганизации = (ПробитыеЧеки.Количество() > 1);
	ПробитыеЧеки.Очистить();
	Объект.Товары.Очистить();
	Объект.Оплата.Очистить();

	ДополнительныеДанные = ШаблонДополнительныхДанныхЗапросаКонтроляПродаж(ЭтотОбъект);
	ЗаполнитьНаОснованииЧекаККМ(ТекущийЧек, ДополнительныеДанные);
	Если Не ДополнительныеДанные.ДанныеКонтроляПродаж = Неопределено Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.ДобавитьНовыеДанныеКэшаПродаж(КэшКонтроляПродаж,
			ДополнительныеДанные.ДанныеКонтроляПродаж);
	КонецЕсли;
	ЭтапыКонтроляПродаж = ИнтерфейсРМКСлужебныйКлиент.ЭтапыКонтроляПродаж();
	ИнтерфейсРМКСлужебныйКлиент.ВыполнитьПроверкиКонтроляПродаж(ЭтотОбъект, ЭтапыКонтроляПродаж.ОткрытиеЧека);
	ИнтерфейсРМКСлужебныйКлиент.ОчиститьРезультатКонтроляПродаж(РезультатКонтроляПродаж);
	
	ПроверитьВозможностьВозвратаВПлатежнойСистемеПродажи();
	УстановитьДоступностьЭлементаФормы(Элементы.ПроверитьСертификатНСПК, Истина);
	ПредварительноеОдобрениеНСПКПолучено = Ложь;
	НастроитьЭлементыВРежимеВозврат();
	УстановитьВидимостьЭлементаФормы(Элементы.РаспечататьЗаявлениеНаВозврат, Истина);
	УстановитьДоступностьЭлементаФормы(Элементы.УдалитьЧек, Истина);
	Панель = Элементы.ПанельИзбранныхТоваров;
	Если Не Панель.Скрыта() Тогда
		Панель.Скрыть();
	КонецЕсли;
	Если НужноОтработатьВыборОрганизации Тогда
		КомандаПереключенияОрганизации = ЭтаФорма.Команды.Найти("ПереключитьЧекОрганизация1");
		Если Не КомандаПереключенияОрганизации = Неопределено Тогда
			ПереключитьЧекПродажи(КомандаПереключенияОрганизации);
		КонецЕсли;
	КонецЕсли;
	
	ОповещениеПродолжения = Новый ОписаниеОповещения(
		"ВыполнитьВозвратЗамороженногоЧекаПродолжение",
		ЭтотОбъект);
	
	ПереключитьВРежимОплатыНаКлиенте(, Ложь,, ОповещениеПродолжения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВозвратЗамороженногоЧекаПродолжение(Отказ, ДополнительныеПараметры) Экспорт
	
	УстановитьАктивностьСтроки();
	НастроитьДоступностьПробитьЧек();
	Если СуммаНаличныхКВыдаче <> 0 Тогда
		СуммаНаличныхКВыдаче = 0;
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыдачиНаличных, Ложь);
	КонецЕсли;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаРазделВыдачиНаличных, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаРазделДенежныйЯщик, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ВернутьсяВРежимПодбораТовара, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьВозвратаВПлатежнойСистемеПродажи()
	Если Объект.Оплата.Количество()
			И ЗначениеЗаполнено(Объект.Оплата[0].ИдентификаторПлатежнойСистемы) Тогда
					
		ТекстПредупреждения				= "";
		КлючОпределенияПлатежнойСистемы = Новый Структура(
			"ИдентификаторПС", 
			Объект.Оплата[0].ИдентификаторПлатежнойСистемы);
		
		Если ПлатежнаяСистема_ВидыОплат.НайтиСтроки(КлючОпределенияПлатежнойСистемы).Количество() Тогда
			
			СтрокаОплаты = ПлатежнаяСистема_ВидыОплат.НайтиСтроки(КлючОпределенияПлатежнойСистемы);
			СтрокаОплаты = ?(СтрокаОплаты.Количество(), СтрокаОплаты[0], Неопределено);
			
			Если Не ИнтеграцияСПлатежнымиСистемамиРМККлиент.ВозвратВозможен(
					СтрокаОплаты.ПлатежнаяСистема, 
					ТекстПредупреждения) Тогда
					
				ПоказатьПредупреждение(, ТекстПредупреждения);
				Объект.Оплата.Очистить();
				
			КонецЕсли;
				
		КонецЕсли;
			
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ОбработатьПробитиеЧекаНаКлиенте(Команда)
	
	ЭтоОперацияПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	Если ЗначениеЗаполнено(Объект.ЗаказПокупателя) И ЭтоОперацияПродажи И Не ЭтоЧекКоррекции Тогда
		ТекстОшибки = "";
		ПроверитьСоответствиеЗаказу(ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстЗаголовка = НСтр("ru = 'Контроль заказа.'");
			ПараметрыОшибки = Новый Структура("ЭтоПредупреждение", Истина);
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки, ПараметрыОшибки);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОплатаЗаполненаВерно = Истина;
	
	СтруктураОшибки = Новый Структура;
	СтруктураОшибки.Вставить("ТекстЗаголовка", "");
	СтруктураОшибки.Вставить("ТекстОшибки", "");
	
	ПроверитьЗаполнениеОплатПередПробитиемЧека(ОплатаЗаполненаВерно, СтруктураОшибки);
	Если НЕ ОплатаЗаполненаВерно Тогда
		ОткрытьСтраницуИнфоОшибка(СтруктураОшибки.ТекстЗаголовка, СтруктураОшибки.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыбраннаяСистемаНалогообложения) Тогда
		СтруктураОшибки.ТекстЗаголовка = НСтр("ru = 'Ошибка.'");
		СтруктураОшибки.ТекстОшибки = НСтр("ru = 'Не заполнена система налогообложения.'");
		ОткрытьСтраницуИнфоОшибка(СтруктураОшибки.ТекстЗаголовка, СтруктураОшибки.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если ЭтоЗаменаТоваров И НЕ КонтрольОстатковПройден(СтруктураОшибки.ТекстОшибки) Тогда
		СтруктураОшибки.ТекстЗаголовка = НСтр("ru = 'Контроль остатков.
			|Измените количество или удалите товар.'");
		ОткрытьСтраницуИнфоОшибка(СтруктураОшибки.ТекстЗаголовка, СтруктураОшибки.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ЭтапыКонтроляПродаж = ИнтерфейсРМКСлужебныйКлиент.ЭтапыКонтроляПродаж();
	ИнтерфейсРМКСлужебныйКлиент.ВыполнитьПроверкиКонтроляПродаж(ЭтотОбъект, ЭтапыКонтроляПродаж.ПробитиеЧека);
	
	ЗапуститьОбработкуРезультатаКонтроляПродажПриПробитииЧека(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеТекущегоСостоянияККТПриЗакрытии(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыполнения = Неопределено И ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		Если РезультатВыполнения.Свойство("Результат") И РезультатВыполнения.Свойство("СтатусСмены") Тогда
			Если РезультатВыполнения.Результат И РезультатВыполнения.СтатусСмены = 1 Тогда //1-закрыта
				
				ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытьКассовуюСменуВручную", ЭтотОбъект, РезультатВыполнения);
				ТекстВопроса = НСтр("ru='Актуализировать кассовую смену в программе?
					|Кассовая смена в программе будет закрыта, при этом отчет о закрытии смены не будет распечатан.'");
				ЗаголовокВопроса = НСтр("ru='На ККТ смена уже была закрыта ранее.'");
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопроса);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКассовуюСменуВручную(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		РезультатВыполнения = ДополнительныеПараметры;
		
		Отбор = Новый Структура("ИдентификаторУстройства", РезультатВыполнения.ИдентификаторУстройства);
		СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
		
		ПодключаемоеОборудование = СтрокаКассы.ИдентификаторУстройства;
		Объект.Организация = СтрокаКассы.Организация;
		Объект.КассаККМ = СтрокаКассы.КассаККМ;
		КассоваяСмена = СтрокаКассы.КассоваяСмена;
		ККМПоддерживаетПроверкуКодовМаркировки = СтрокаКассы.ПоддерживаетПроверкуКодовМаркировки;
		
		Отказ = Ложь;
		ЗакрытьКассовуюСменуВДокументеБезТО(Отказ);
		
		Если Не Отказ Тогда
			Оповестить("ИзменениеСостоянияКассовойСмены", Объект.КассаККМ);
		Иначе
			
			ТекстЗаголовка = НСтр("ru = 'Ошибка закрытия смены'");
			ТекстОшибки = НСтр("ru = 'При закрытии смены произошла ошибка. Смена не закрыта.'");
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗакрытьКассовуюСменуВДокументеБезТО(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		ДокументКассоваяСмена = КассоваяСмена.ПолучитьОбъект();
		ДокументКассоваяСмена.Статус = МенеджерОборудованияРМК.СтатусЗакрытойСмены();
		ДокументКассоваяСмена.ОкончаниеКассовойСмены = ТекущаяДатаСеанса();
		ДокументКассоваяСмена.Записать(РежимЗаписиДокумента.Проведение);
		
	Исключение
		
		Отказ = Истина;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при записи документа ""Кассовая смена"".'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеТекущегоСостоянияККТПриОткрытии(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыполнения = Неопределено И ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		Если РезультатВыполнения.Свойство("Результат") И РезультатВыполнения.Свойство("СтатусСмены") Тогда
			Если РезультатВыполнения.Результат 
				И (РезультатВыполнения.СтатусСмены = 2 ИЛИ РезультатВыполнения.СтатусСмены = 3) Тогда //2-открыта, 3-просрочена
			
				ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьКассовуюСменуВручную", ЭтотОбъект, РезультатВыполнения);
				ТекстВопроса = НСтр("ru='Актуализировать кассовую смену в программе?
					|Кассовая смена в программе будет открыта, при этом чек об открытии смены не будет распечатан.'");
				ЗаголовокВопроса = НСтр("ru='На ККТ смена уже была открыта ранее.'");
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопроса);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКассовуюСменуВручную(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		РезультатВыполнения = ДополнительныеПараметры;
		
		Отбор = Новый Структура("ИдентификаторУстройства", РезультатВыполнения.ИдентификаторУстройства);
		СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
		
		ПодключаемоеОборудование = СтрокаКассы.ИдентификаторУстройства;
		Объект.Организация = СтрокаКассы.Организация;
		Объект.КассаККМ = СтрокаКассы.КассаККМ;
		КассоваяСмена = СтрокаКассы.КассоваяСмена;
		ККМПоддерживаетПроверкуКодовМаркировки = СтрокаКассы.ПоддерживаетПроверкуКодовМаркировки;
		
		НомерСменыККТ = РезультатВыполнения.НомерСменыККТ;
		Отказ = Ложь;
		СоздатьДокументКассоваяСменаБезТО(НомерСменыККТ, Отказ);
		
		Если Не Отказ Тогда
			Оповестить("ИзменениеСостоянияКассовойСмены", Объект.КассаККМ);
		Иначе
			
			ТекстЗаголовка = НСтр("ru = 'Ошибка открытия смены'");
			ТекстОшибки = НСтр("ru = 'При открытии смены произошла ошибка. Смена не открыта.'");
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументКассоваяСменаБезТО(НомерСменыККТ, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		НоваяКассоваяСмена = Документы.КассоваяСмена.СоздатьДокумент();
		РеквизитыКассыККМ = ПродажиРМК.РеквизитыКассыККМ(Объект.КассаККМ, РабочееМесто);
		ЗаполнитьЗначенияСвойств(НоваяКассоваяСмена, РеквизитыКассыККМ);
		
		ДатаОткрытияКассовойСмены = ТекущаяДатаСеанса();
		
		НоваяКассоваяСмена.Дата = ДатаОткрытияКассовойСмены;
		НоваяКассоваяСмена.Статус = МенеджерОборудованияРМК.СтатусОткрытойСмены();
		НоваяКассоваяСмена.НачалоКассовойСмены = ДатаОткрытияКассовойСмены;
		НоваяКассоваяСмена.ОкончаниеКассовойСмены = '00010101';
		
		НоваяКассоваяСмена.НомерСменыККТ = НомерСменыККТ;
		НоваяКассоваяСмена.ФискальноеУстройство = ПодключаемоеОборудование;
		
		Если НоваяКассоваяСмена.ПроверитьЗаполнение() Тогда
			
			НоваяКассоваяСмена.Записать(РежимЗаписиДокумента.Проведение);
			КассоваяСмена = НоваяКассоваяСмена.Ссылка;
			
		КонецЕсли;
		
	Исключение
		
		Отказ = Истина;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при записи документа ""Кассовая смена"".'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьНеобходимостьПересчетаАвтоматическихСкидок(ИзменяемыйВидОплаты = Неопределено)
	НеобходимостьПересчетаПоВидуОплаты = Ложь;
	Если ЗначениеЗаполнено(ИзменяемыйВидОплаты)
		И ТаблицаСкидокЗависяшихОтВидаОплаты.Количество() > 0 Тогда
		НеобходимостьПересчетаПоВидуОплаты = Истина;
	КонецЕсли;
	ВыполнитьРасчетСкидок = ПолныйРасчетСкидок И НЕ РежимРаботыСЧеком = РежимыРаботыСЧеком.ПереходКОплате;
	Результат = ИспользоватьАвтоматическиеСкидки И (Не СкидкиРассчитаны Или ВыполнитьРасчетСкидок Или НеобходимостьПересчетаПоВидуОплаты);
	Возврат Результат
КонецФункции

&НаКлиенте
Процедура ВывестиОтчетЗаСменуКлиент()
	
	ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
	ОжидатьОтветаОтОборудования = Ложь;
	ПодготовитьДанныеДляОтчетаЗаСменуНаКлиенте(ОжидатьОтветаОтОборудования);
	Если (Не ОжидатьОтветаОтОборудования) И ДанныеДляОтчетаЗаСмену.ДанныеОборудования.Количество() > 0 Тогда
		СформироватьОтчетЗаСмену();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДатыОкончанияКассовыхСмен(ЗакрытыеКассовыеСмены)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ЗакрытыеКассовыеСмены, "ОкончаниеКассовойСмены");
КонецФункции	

&НаКлиенте
Функция ОтобратьСтрокиКассДляОтчетаЗаСмену()
	Перем ДатыОкончанияКассовыхСмен;
	
	МассивСтрокТаблицыКассККМ = Новый Массив;
	
	ТекущаяДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	НачалоТекущегоДня = НачалоДня(ТекущаяДатаСеанса);
	НачалоПредыдущегоДня = НачалоДня(НачалоТекущегоДня - 1);
	ДатаВремяГраницыЗакрытияСмены = НачалоТекущегоДня;
	Если (ТекущаяДатаСеанса - НачалоТекущегоДня) <= (ВремяНачалаСмены - Дата(1,1,1)) Тогда
		ДатаВремяГраницыЗакрытияСмены = НачалоПредыдущегоДня + (ВремяНачалаСмены - Дата(1,1,1));
	КонецЕсли;
	
	ИсключениеЗакрытыхДоГраницыКасс = Ложь;
	ЗакрытыеКассовыеСмены = Новый Массив;
	СтрокиЗакрытыхКассовыхСмен = ТаблицаКассККМОрганизаций.НайтиСтроки(Новый Структура("Открыта", Ложь));
	Если СтрокиЗакрытыхКассовыхСмен.Количество() > 0 Тогда
		Для Каждого СтрокаКассовойСмены Из СтрокиЗакрытыхКассовыхСмен Цикл
			ЗакрытыеКассовыеСмены.Добавить(СтрокаКассовойСмены.КассоваяСмена);
		КонецЦикла;
		ДатыОкончанияКассовыхСмен = ПолучитьДатыОкончанияКассовыхСмен(ЗакрытыеКассовыеСмены);
	КонецЕсли;
	
	Для Каждого СтрокаКассы Из ТаблицаКассККМОрганизаций Цикл
		Если ИсключениеЗакрытыхДоГраницыКасс Тогда
			Если СтрокаКассы.Открыта
					Или ПолучитьДатуОкончанияКассовойСмены(ДатыОкончанияКассовыхСмен, СтрокаКассы.КассоваяСмена)
						>= ДатаВремяГраницыЗакрытияСмены Тогда
				МассивСтрокТаблицыКассККМ.Добавить(СтрокаКассы);
			КонецЕсли;
		Иначе
			Если СтрокаКассы.Открыта
					Или ПолучитьДатуОкончанияКассовойСмены(ДатыОкончанияКассовыхСмен, СтрокаКассы.КассоваяСмена)
						>= НачалоПредыдущегоДня Тогда
				Если СтрокаКассы.Открыта
						Или ПолучитьДатуОкончанияКассовойСмены(ДатыОкончанияКассовыхСмен, СтрокаКассы.КассоваяСмена)
							>= ДатаВремяГраницыЗакрытияСмены Тогда
					ИсключениеЗакрытыхДоГраницыКасс = Истина;
					Если МассивСтрокТаблицыКассККМ.Количество() > 0 Тогда
						МассивСтрокТаблицыКассККМ.Очистить();
					КонецЕсли;
				КонецЕсли;
				МассивСтрокТаблицыКассККМ.Добавить(СтрокаКассы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСтрокТаблицыКассККМ;
	
КонецФункции

&НаКлиенте
Функция ПолучитьДатуОкончанияКассовойСмены(ДатыОкончанияКассовыхСмен, КассоваяСмена)
	
	ДатаОкончанияКассовойСмены = Дата(1,1,1);
	
	Если ЗначениеЗаполнено(ДатыОкончанияКассовыхСмен[КассоваяСмена]) Тогда
		ДатаОкончанияКассовойСмены = ДатыОкончанияКассовыхСмен[КассоваяСмена];
	КонецЕсли;
	
	Возврат ДатаОкончанияКассовойСмены;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруДанныхКассовогоОборудования()
	
	СтруктураДанныхКассовогоОборудования = Новый Структура();
	СтруктураДанныхКассовогоОборудования.Вставить("КоличествоНепереданныхФД", 0);
	СтруктураДанныхКассовогоОборудования.Вставить("НомерПервогоНепереданногоФД", "");
	СтруктураДанныхКассовогоОборудования.Вставить("ДатаПервогоНепереданногоФД", Дата(1,1,1));
	СтруктураДанныхКассовогоОборудования.Вставить("ТекстОшибки", "");
	Возврат СтруктураДанныхКассовогоОборудования;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруДанныхЭквайринговогоОборудования()
	
	Возврат Новый Структура();
	
КонецФункции

&НаКлиенте
Процедура ДобавитьСтрокуТерминалаВДанныеЭквайринговыхТерминалов(ДанныеЭквайринговыхТерминалов, КассаТерминала, СтрокаТерминала, ОжидатьОтветаОтОборудования)
	
	ДанныеПоЭквайринговомуТерминалу = Новый Структура();
	ДанныеПоЭквайринговомуТерминалу.Вставить("Терминал", СтрокаТерминала.ЭквайринговыйТерминал);
	ДанныеПоЭквайринговомуТерминалу.Вставить("ИдентификаторУстройства", СтрокаТерминала.ПодключаемоеОборудование);
	ДанныеПоЭквайринговомуТерминалу.Вставить("ДанныеОборудования", ПолучитьСтруктуруДанныхЭквайринговогоОборудования());
	ДанныеПоЭквайринговомуТерминалу.Вставить("ДанныеОборудованияПолучены", Истина);	
	ДанныеЭквайринговыхТерминалов.Добавить(ДанныеПоЭквайринговомуТерминалу);
	Если Не ДанныеПоЭквайринговомуТерминалу.ДанныеОборудованияПолучены Тогда
		ОжидатьОтветаОтОборудования = Истина;
	КонецЕсли;		
	
КонецПроцедуры	

&НаКлиенте
Процедура ДобавитьСтрокуКассыВДанныеДляОтчетаЗаСмену(СтрокаКассы, ОжидатьОтветаОтОборудования)
	
	СтруктураДанныхКассы = Новый Структура();
	
	ДанныеПоКассе = Новый Структура();
	ДанныеПоКассе.Вставить("Касса", СтрокаКассы.КассаККМ);
	ДанныеПоКассе.Вставить("КассоваяСмена", СтрокаКассы.КассоваяСмена);
	ДанныеПоКассе.Вставить("СтатусКассовойСмены", ?(СтрокаКассы.Открыта, "Открыта", "Закрыта"));
	ДанныеПоКассе.Вставить("ИдентификаторУстройства", СтрокаКассы.ИдентификаторУстройства);
	ДанныеПоКассе.Вставить("ДанныеОборудования", ПолучитьСтруктуруДанныхКассовогоОборудования());
	ДанныеПоКассе.Вставить("ДанныеОборудованияПолучены", СтрокаКассы.ИспользоватьБезПодключенияОборудования);
	
	ДанныеЭквайринговыхТерминалов = Новый Массив;
	ДанныеТерминалов = ОбщегоНазначенияРМККлиент.ДанныеТекущихЭквайринговыхТерминаловПоОрганизации(ЭтотОбъект, СтрокаКассы.Организация);
	Для Каждого СтрокаТерминала Из ДанныеТерминалов Цикл
		ДобавитьСтрокуТерминалаВДанныеЭквайринговыхТерминалов(ДанныеЭквайринговыхТерминалов, СтрокаКассы.КассаККМ, СтрокаТерминала, ОжидатьОтветаОтОборудования);
	КонецЦикла;
	
    СтруктураДанныхКассы.Вставить("ДанныеПоКассе", ДанныеПоКассе);
	СтруктураДанныхКассы.Вставить("ДанныеЭквайринговыхТерминалов", ДанныеЭквайринговыхТерминалов);
	ДанныеДляОтчетаЗаСмену.ДанныеОборудования.Добавить(СтруктураДанныхКассы);
	
	Если Не ДанныеПоКассе.ДанныеОборудованияПолучены Тогда
		ОжидатьОтветаОтОборудования = Истина;
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросыДанныхПоОборудованию()
	
	Для Каждого СтруктураДанныхКассы Из ДанныеДляОтчетаЗаСмену.ДанныеОборудования Цикл
		Если Не СтруктураДанныхКассы.ДанныеПоКассе.ДанныеОборудованияПолучены Тогда
			ДанныеПоКассе = СтруктураДанныхКассы.ДанныеПоКассе;
			Для Каждого ДанныеЭквайринговыхТерминалов Из СтруктураДанныхКассы.ДанныеЭквайринговыхТерминалов Цикл
				Если Не ДанныеЭквайринговыхТерминалов.ДанныеОборудованияПолучены Тогда
					
					ПараметрыСопоставления = Новый Структура("Касса,Терминал", ДанныеПоКассе.Касса, ДанныеЭквайринговыхТерминалов.Терминал);
					ОповещениеОПолученииСостояния = Новый ОписаниеОповещения("ЗапросДанныхЭквайринговогоТерминалаДляОтчетаЗаСменуЗавершение",
						ЭтотОбъект, ПараметрыСопоставления); 
					// Отправить запрос по эквайринговому терминалу	
					
				КонецЕсли;
			КонецЦикла;
			ПараметрыСопоставления = Новый Структура("Касса", ДанныеПоКассе.Касса);
			ОповещениеОПолученииСостояния = Новый ОписаниеОповещения("ЗапросДанныхКассыККМДляОтчетаЗаСменуЗавершение",
				ЭтотОбъект, ПараметрыСопоставления);
			МенеджерОборудованияРМККлиент.НачатьПолучениеТекущегоСостоянияФискальногоУстройства(ОповещениеОПолученииСостояния,
				УникальныйИдентификатор, ДанныеПоКассе.ИдентификаторУстройства);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьДанныеДляОтчетаЗаСменуНаКлиенте(ОжидатьОтветаОтОборудования)

	МассивСтрокКассККМ = ОтобратьСтрокиКассДляОтчетаЗаСмену();
	
	ДанныеДляОтчетаЗаСмену = Новый Структура();
	ДанныеДляОтчетаЗаСмену.Вставить("КассирРМК", Объект.Кассир);
	ДанныеДляОтчетаЗаСмену.Вставить("НастройкаРМК", ТекущаяНастройкаРМК);
	ДанныеДляОтчетаЗаСмену.Вставить("ПредставлениеВалюты", ПредставлениеВалюты);
	ДанныеДляОтчетаЗаСмену.Вставить("ДанныеОборудования", Новый Массив());

	Если МассивСтрокКассККМ.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нет ни одной актуальной кассовой смены'"));
	Иначе	
		Для Каждого СтрокаКассы Из МассивСтрокКассККМ Цикл
			ДобавитьСтрокуКассыВДанныеДляОтчетаЗаСмену(СтрокаКассы, ОжидатьОтветаОтОборудования);
		КонецЦикла;
		ОтправитьЗапросыДанныхПоОборудованию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросДанныхКассыККМДляОтчетаЗаСменуЗавершение(Результат, ДополнительныеПараметры) Экспорт

	КоличествоКасс = ДанныеДляОтчетаЗаСмену.ДанныеОборудования.Количество();
	КассаНайдена = Ложь;
	ТребуетсяОжидание = Ложь;
	ИндексКассы = 0;
	Пока ИндексКассы < КоличествоКасс И (Не (КассаНайдена И ТребуетсяОжидание)) Цикл
		СтрокаКассовогоОборудования = ДанныеДляОтчетаЗаСмену.ДанныеОборудования.Получить(ИндексКассы);
		Если СтрокаКассовогоОборудования.ДанныеПоКассе.Касса = ДополнительныеПараметры.Касса Тогда
			КассаНайдена = Истина;
			СтрокаКассовогоОборудования.ДанныеПоКассе.ДанныеОборудованияПолучены = Истина;
			Если Результат.Результат Тогда
				ЗаполнитьЗначенияСвойств(СтрокаКассовогоОборудования.ДанныеПоКассе.ДанныеОборудования, Результат.ФискальныеДанные);
			Иначе
				СтрокаКассовогоОборудования.ДанныеПоКассе.ДанныеОборудования.ТекстОшибки = Результат.ОписаниеОшибки;
			КонецЕсли;	
		Иначе
			Если Не СтрокаКассовогоОборудования.ДанныеПоКассе.ДанныеОборудованияПолучены Тогда
				ТребуетсяОжидание = Истина;
			КонецЕсли;	
		КонецЕсли;
		Если Не ТребуетсяОжидание Тогда
			КоличествоТерминалов = СтрокаКассовогоОборудования.ДанныеЭквайринговыхТерминалов.Количество();
			ИндексТерминала = 0;
			Пока ИндексТерминала < КоличествоТерминалов И Не ТребуетсяОжидание Цикл
				СтрокаЭквайринговогоТерминала = СтрокаКассовогоОборудования.ДанныеЭквайринговыхТерминалов.Получить(ИндексТерминала);
				Если Не СтрокаЭквайринговогоТерминала.ДанныеОборудованияПолучены Тогда
					ТребуетсяОжидание = Истина;
				КонецЕсли;	
				ИндексТерминала = ИндексТерминала + 1;
			КонецЦикла;	
		КонецЕсли;		
		ИндексКассы = ИндексКассы + 1;
	КонецЦикла;
	Если Не ТребуетсяОжидание Тогда
		СформироватьОтчетЗаСмену();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросДанныхЭквайринговогоТерминалаДляОтчетаЗаСменуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КоличествоКасс = ДанныеДляОтчетаЗаСмену.ДанныеОборудования.Количество();
	ТерминалНайден = Ложь;
	ТребуетсяОжидание = Ложь;
	ИндексКассы = 0;
	Пока ИндексКассы < КоличествоКасс И (Не (ТерминалНайден И ТребуетсяОжидание)) Цикл
		СтрокаКассовогоОборудования = ДанныеДляОтчетаЗаСмену.ДанныеОборудования.Получить(ИндексКассы);
		Если Не СтрокаКассовогоОборудования.ДанныеПоКассе.ДанныеОборудованияПолучены Тогда
			ТребуетсяОжидание = Истина;
		КонецЕсли; 
		Если СтрокаКассовогоОборудования.ДанныеПоКассе.Касса = ДополнительныеПараметры.Касса
			Или (Не ТребуетсяОжидание) Тогда
			
			КоличествоТерминалов = СтрокаКассовогоОборудования.ДанныеЭквайринговыхТерминалов.Количество();
			ИндексТерминала = 0;
			Пока ИндексТерминала < КоличествоТерминалов И (Не (ТерминалНайден И ТребуетсяОжидание)) Цикл
				СтрокаЭквайринговогоТерминала = СтрокаКассовогоОборудования.ДанныеЭквайринговыхТерминалов.Получить(ИндексТерминала);
				Если СтрокаКассовогоОборудования.ДанныеПоКассе.Касса = ДополнительныеПараметры.Касса
					И СтрокаЭквайринговогоТерминала.Терминал = ДополнительныеПараметры.Терминал Тогда
					
					ТерминалНайден = Истина;
					СтрокаЭквайринговогоТерминала.ДанныеОборудованияПолучены = Истина;
					// Заполнить данные терминала
					
				Иначе	
					Если Не СтрокаЭквайринговогоТерминала.ДанныеОборудованияПолучены Тогда
						ТребуетсяОжидание = Истина;
					КонецЕсли;
				КонецЕсли;	
				ИндексТерминала = ИндексТерминала + 1;
			КонецЦикла;				
		КонецЕсли;	
		ИндексКассы = ИндексКассы + 1;
	КонецЦикла;
	Если Не ТребуетсяОжидание Тогда
		СформироватьОтчетЗаСмену();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетЗаСмену()
	
	ДанныеМакетаОтчетаЗаСмену = Новый Структура();
	ДанныеМакетаОтчетаЗаСмену.Вставить("ИдентификаторПечатнойФормы", "ОтчетЗаСмену");
	ДанныеМакетаОтчетаЗаСмену.Вставить("СинонимМакета", НСтр("ru = 'Отчет за смену'"));
	ДанныеМакетаОтчетаЗаСмену.Вставить("ПолноеИмяМакета", "ОбщийМакет.ПФ_MXL_ОтчетЗаСменуРМК");
	ДанныеДляОтчетаЗаСмену.Вставить("ДанныеМакета", ДанныеМакетаОтчетаЗаСмену);
	ДанныеДляОтчетаЗаСмену.Вставить("ДанныеДляОтчетаПоОФД", ДанныеДляОтчетаПоОФД);
	ДанныеДляОтчетаЗаСмену.Вставить("ИспользоватьОплатуНаличными", ИспользоватьОплатуНаличными И ПравоПросмотраОстаткаНаличныхРМК);
	
	ТабличныйДокументОтчетЗаСмену = СформироватьОтчетЗаСменуСервер(ДанныеДляОтчетаЗаСмену); 

	ДанныеДляОтчетаЗаСмену.ДанныеОборудования.Очистить();
	ДанныеДляОтчетаЗаСмену = Неопределено;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ПереданныйТабличныйДокумент", ТабличныйДокументОтчетЗаСмену);
	ПараметрыОткрытия.Вставить("ПредставлениеОтчета", НСтр("ru = 'Отчет за смену'")); 
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаПечатногоДокумента", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьОтчетЗаСменуСервер(КлиентскиеДанныеОтчетаЗаСмену)
	
	СерверныеДанныеОтчетаЗаСмену = ОбщегоНазначенияРМК.ПолучитьДанныеОтчетаЗаСмену(КлиентскиеДанныеОтчетаЗаСмену);
	Макет = СформироватьМакетОтчетаЗаСмену(КлиентскиеДанныеОтчетаЗаСмену, СерверныеДанныеОтчетаЗаСмену);
	Возврат Макет;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьМакетОтчетаЗаСмену(КлиентскиеДанныеОтчетаЗаСмену, СерверныеДанныеОтчетаЗаСмену)
		
	ОтчетЗаСмену = Новый ТабличныйДокумент;
	ИмяМакета = сред(КлиентскиеДанныеОтчетаЗаСмену.ДанныеМакета.ПолноеИмяМакета, 12);
	Макет = ПолучитьОбщийМакет(ИмяМакета);
	ОбластьОтступ = Макет.ПолучитьОбласть("Отступ");
	ОбластьРазделитель = Макет.ПолучитьОбласть("Разделитель");
	
	КоличествоКасс = СерверныеДанныеОтчетаЗаСмену.ТаблицаКасс.Количество();
	ИндексКассы = 0;
	Пока ИндексКассы < КоличествоКасс Цикл
		СтрокаКассы = СерверныеДанныеОтчетаЗаСмену.ТаблицаКасс.Получить(ИндексКассы);
		ВывестиРазделПоКассеОтчетаЗаСмену(Макет, ОтчетЗаСмену, КлиентскиеДанныеОтчетаЗаСмену, СерверныеДанныеОтчетаЗаСмену, СтрокаКассы);
		ИндексКассы = ИндексКассы + 1;
		Если ИндексКассы < КоличествоКасс Тогда
			ОтчетЗаСмену.Вывести(ОбластьОтступ);
			ОтчетЗаСмену.Вывести(ОбластьРазделитель);
		КонецЕсли;
	КонецЦикла;
	
	ОбластьДатаОтчета = Макет.ПолучитьОбласть("ДатаОтчета");
	ОбластьДатаОтчета.Параметры.ДатаВремяФормирования = ТекущаяДатаСеанса();
	ОтчетЗаСмену.Вывести(ОбластьДатаОтчета);
	
	ОтчетЗаСмену.АвтоМасштаб = Истина;
	ОтчетЗаСмену.Защита = Истина;
	Возврат ОтчетЗаСмену;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВывестиРазделПоКассеОтчетаЗаСмену(Макет, ОтчетЗаСмену, КлиентскиеДанныеОтчетаЗаСмену, СерверныеДанныеОтчетаЗаСмену, СтрокаКассы)
    Перем КлиентскиеДанныеКассы;
		
	Если СерверныеДанныеОтчетаЗаСмену.ТаблицаКасс.Количество() = 1 Тогда
		КлиентскиеДанныеКассы = КлиентскиеДанныеОтчетаЗаСмену.ДанныеОборудования[0];
	Иначе
		КлиентскиеДанныеКассы = ПолучитьКлиентскиеДанныеКассы(КлиентскиеДанныеОтчетаЗаСмену.ДанныеОборудования, СтрокаКассы.Касса);
	КонецЕсли;
	
	ОбластьОтборКасса = Макет.ПолучитьОбласть("ОтборКасса");
	ОбластьОтборКасса.Параметры.ОрганизацияПредставление = СтрокаКассы.ОрганизацияПредставление;
	ОбластьОтборКасса.Параметры.РегистрационныйНомерККТ = СтрокаКассы.РегистрационныйНомерККТ;
	ОбластьОтборКасса.Параметры.НомерСмены = СтрокаКассы.НомерКассовойСмены;
	ОбластьОтборКасса.Параметры.ДатаСмены = Формат(СтрокаКассы.ДатаКассовойСмены, "ДЛФ=ДВ");
	ОбластьОтборКасса.Параметры.СтатусСмены = КлиентскиеДанныеКассы.ДанныеПоКассе.СтатусКассовойСмены;
	ОтчетЗаСмену.Вывести(ОбластьОтборКасса);
	ВывестиВРазделСуммыЗаСмену(Макет, ОтчетЗаСмену, КлиентскиеДанныеОтчетаЗаСмену.ДанныеДляОтчетаПоОФД,КлиентскиеДанныеОтчетаЗаСмену.ПредставлениеВалюты, СерверныеДанныеОтчетаЗаСмену, СтрокаКассы.Касса);
	ВывестиРазделУчетаНаличных(Макет, ОтчетЗаСмену, КлиентскиеДанныеОтчетаЗаСмену, СерверныеДанныеОтчетаЗаСмену, СтрокаКассы.Касса);
	ВывестиРазделОшибокИОтложенныхЧековКассыОтчетаЗаСмену(Макет, ОтчетЗаСмену, КлиентскиеДанныеКассы, СерверныеДанныеОтчетаЗаСмену, СтрокаКассы.Касса);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВывестиВРазделСуммыЗаСмену(Макет, ОтчетЗаСмену, ДанныеОФД, ПредставлениеВалюты, СерверныеДанныеОтчетаЗаСмену, ОтборКасса)
	
	СуммаПродаж = 0;
	СуммаВозвратов = 0;
	ТаблицаВидовОплат = СерверныеДанныеОтчетаЗаСмену.ТаблицаСумм.СкопироватьКолонки("ВидОплаты,СуммаПродаж,СуммаВозвратов");
	ТаблицаКассиров = СерверныеДанныеОтчетаЗаСмену.ТаблицаСумм.СкопироватьКолонки("Кассир,ПорядокКассира,СуммаПродаж,СуммаВозвратов");
	
	Для Каждого СтрокаТаблицыСумм Из СерверныеДанныеОтчетаЗаСмену.ТаблицаСумм Цикл
		Если ОтборКасса = СтрокаТаблицыСумм.Касса Тогда
			
			НоваяСтрокаВидаОплаты = ТаблицаВидовОплат.Добавить();
			НоваяСтрокаКассира = ТаблицаКассиров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаВидаОплаты, СтрокаТаблицыСумм);
			ЗаполнитьЗначенияСвойств(НоваяСтрокаКассира, СтрокаТаблицыСумм);
			СуммаПродаж = СуммаПродаж + СтрокаТаблицыСумм.СуммаПродаж;
			СуммаВозвратов = СуммаВозвратов + СтрокаТаблицыСумм.СуммаВозвратов;
			
		КонецЕсли;
	КонецЦикла;
	ТаблицаВидовОплат.Свернуть("ВидОплаты", "СуммаПродаж,СуммаВозвратов");
	ТаблицаКассиров.Сортировать("ПорядокКассира,Кассир");
	ТаблицаКассиров.Свернуть("Кассир", "СуммаПродаж,СуммаВозвратов");
	
	ОбластьШапкаСумм = Макет.ПолучитьОбласть("ШапкаСумм");
	ОбластьШапкаСумм.Параметры.СуммаПродажЗаСмену = СуммаПродаж;
	ОбластьШапкаСумм.Параметры.СуммаВозвратовЗаСмену = СуммаВозвратов;
	ОбластьШапкаСумм.Параметры.ПредставлениеВалюты = ПредставлениеВалюты;
	Если ЗначениеЗаполнено(ДанныеОФД) И ОтборКасса = ДанныеОФД.КассаККМ Тогда
		ОбластьШапкаСумм.Параметры.СуммаВозвратовЗаСменуОФД = ДанныеОФД.СуммаВозвратаПрихода;
		ОбластьШапкаСумм.Параметры.СуммаПродажЗаСменуОФД = ДанныеОФД.СуммаПрихода;
	КонецЕсли;
	ОтчетЗаСмену.Вывести(ОбластьШапкаСумм);
	
	ОбластьГруппировкаСумм = Макет.ПолучитьОбласть("ГруппировкаСумм");
	ОбластьГруппировкаСумм.Параметры.ТекстГруппировки = НСтр("ru='По видам оплаты'");
	ОтчетЗаСмену.Вывести(ОбластьГруппировкаСумм);
	
	ОбластьСтрокаСумм = Макет.ПолучитьОбласть("СтрокаСумм");
	Для Каждого СтрокаВидаОплаты Из ТаблицаВидовОплат Цикл
		ОбластьСтрокаСумм.Параметры.ПредставлениеЭлементаГруппировки = СтрокаВидаОплаты.ВидОплаты;
		ОбластьСтрокаСумм.Параметры.СуммаПродаж = СтрокаВидаОплаты.СуммаПродаж;
		ОбластьСтрокаСумм.Параметры.СуммаВозвратов = СтрокаВидаОплаты.СуммаВозвратов;		
		Если ЗначениеЗаполнено(ДанныеОФД) И ОтборКасса = ДанныеОФД.КассаККМ Тогда
			Если СтрокаВидаОплаты.ВидОплаты = "Наличные" Тогда
				ОбластьСтрокаСумм.Параметры.СуммаПоДаннымОФД = ДанныеОФД.СуммаНаличными;
			ИначеЕсли СтрокаВидаОплаты.ВидОплаты = "Платежная карта" Тогда 
				ОбластьСтрокаСумм.Параметры.СуммаПоДаннымОФД = ДанныеОФД.СуммаЭлектронными;
			КонецЕсли;
		КонецЕсли;
		ОтчетЗаСмену.Вывести(ОбластьСтрокаСумм);
	КонецЦикла;
	
	ОбластьОтступ = Макет.ПолучитьОбласть("Отступ");
	ОтчетЗаСмену.Вывести(ОбластьОтступ);
	ОбластьГруппировкаСумм.Параметры.ТекстГруппировки = НСтр("ru='По кассирам'");
	ОтчетЗаСмену.Вывести(ОбластьГруппировкаСумм);
	Для Каждого СтрокаКассира Из ТаблицаКассиров Цикл
		ОбластьСтрокаСумм.Параметры.ПредставлениеЭлементаГруппировки = СтрокаКассира.Кассир;
		ОбластьСтрокаСумм.Параметры.СуммаПродаж = СтрокаКассира.СуммаПродаж;
		ОбластьСтрокаСумм.Параметры.СуммаВозвратов = СтрокаКассира.СуммаВозвратов;
		ОтчетЗаСмену.Вывести(ОбластьСтрокаСумм);
	КонецЦикла;	
	ВывестиПродавцовВРазделСуммыЗаСмену(Макет, ОтчетЗаСмену, СерверныеДанныеОтчетаЗаСмену, ОтборКасса);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВывестиПродавцовВРазделСуммыЗаСмену(Макет, ОтчетЗаСмену, СерверныеДанныеОтчетаЗаСмену, ОтборКасса)
	Перем КоллекцияСуммПродавцов;

	Если СерверныеДанныеОтчетаЗаСмену.ТаблицаСуммПоПродавцам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СерверныеДанныеОтчетаЗаСмену.ТаблицаКасс.Количество() = 1 Тогда
		КоллекцияСуммПродавцов = СерверныеДанныеОтчетаЗаСмену.ТаблицаСуммПоПродавцам;
	Иначе                                                                                        
		ОтборСтрокКассы = Новый Структура("Касса", ОтборКасса);
		КоллекцияСуммПродавцов = СерверныеДанныеОтчетаЗаСмену.ТаблицаСуммПоПродавцам.НайтиСтроки(ОтборСтрокКассы);
	КонецЕсли;
	Если КоллекцияСуммПродавцов.Количество() > 0 Тогда
		ОбластьОтступ = Макет.ПолучитьОбласть("Отступ");
		ОтчетЗаСмену.Вывести(ОбластьОтступ);
		ОбластьГруппировкаСумм = Макет.ПолучитьОбласть("ГруппировкаСумм");
		ОбластьГруппировкаСумм.Параметры.ТекстГруппировки = НСтр("ru='По продавцам'");
		ОтчетЗаСмену.Вывести(ОбластьГруппировкаСумм);
		ОбластьСтрокаСумм = Макет.ПолучитьОбласть("СтрокаСумм");
		Для Каждого СтрокаПродавца Из КоллекцияСуммПродавцов Цикл
			ОбластьСтрокаСумм.Параметры.ПредставлениеЭлементаГруппировки = СтрокаПродавца.Продавец;
			ОбластьСтрокаСумм.Параметры.СуммаПродаж = СтрокаПродавца.СуммаПродаж;
			ОбластьСтрокаСумм.Параметры.СуммаВозвратов = СтрокаПродавца.СуммаВозвратов;
			ОтчетЗаСмену.Вывести(ОбластьСтрокаСумм);
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьКлиентскиеДанныеКассы(МассивДанныхОборудования, ОтборКасса)
	
	ДанныеКассы = Неопределено;
	КоличествоКасс = МассивДанныхОборудования.Количество();
	ИндексКассы = 0;
	Пока ИндексКассы < КоличествоКасс И ДанныеКассы = Неопределено Цикл
		ЭлементМассива = МассивДанныхОборудования[ИндексКассы];
		Если ЭлементМассива.ДанныеПоКассе.Касса = ОтборКасса Тогда
			ДанныеКассы = ЭлементМассива;
		КонецЕсли;	
		ИндексКассы = ИндексКассы + 1;
	КонецЦикла;	
	Возврат ДанныеКассы;
	
КонецФункции	

&НаСервереБезКонтекста
Процедура ВывестиРазделОшибокИОтложенныхЧековКассыОтчетаЗаСмену(Макет, ОтчетЗаСмену, КлиентскиеДанныеКассы, СерверныеДанныеОтчетаЗаСмену, ОтборКасса)
	Перем КоллекцияОшибок, КоллекцияНеПробитых, ОбластьНеОтправленныеЧеки;
	
	КоллекцияОшибок = Неопределено;	
	Если СерверныеДанныеОтчетаЗаСмену.ТаблицаКасс.Количество() = 1 Тогда
		КоллекцияОшибок = СерверныеДанныеОтчетаЗаСмену.ТаблицаОшибочныхЧеков;
		КоллекцияНеПробитых = СерверныеДанныеОтчетаЗаСмену.ТаблицаОтложенныхЧеков;
	Иначе
		ОтборСтрокКассы = Новый Структура("Касса", ОтборКасса);
		КоллекцияОшибок = СерверныеДанныеОтчетаЗаСмену.ТаблицаОшибочныхЧеков.НайтиСтроки(ОтборСтрокКассы);
		КоллекцияНеПробитых = СерверныеДанныеОтчетаЗаСмену.ТаблицаОтложенныхЧеков.НайтиСтроки(ОтборСтрокКассы);
	КонецЕсли;
	
	Если КлиентскиеДанныеКассы.ДанныеПоКассе.ДанныеОборудования.ТекстОшибки = "" Тогда
		ОбластьНеОтправленныеЧеки = Макет.ПолучитьОбласть("НеОтправленныеЧеки");
		ОбластьНеОтправленныеЧеки.Параметры.КоличествоНеОтправленных = КлиентскиеДанныеКассы.ДанныеПоКассе.ДанныеОборудования.КоличествоНепереданныхФД;
		ДатаВремяНеОтправленного = Дата(1,1,1);
		Если КлиентскиеДанныеКассы.ДанныеПоКассе.ДанныеОборудования.КоличествоНепереданныхФД > 0 Тогда
			ДатаВремяНеОтправленного = КлиентскиеДанныеКассы.ДанныеПоКассе.ДанныеОборудования.ДатаПервогоНепереданногоФД;		
		КонецЕсли;	
		ОбластьНеОтправленныеЧеки.Параметры.ДатаВремяНеОтправленного = ДатаВремяНеОтправленного;
		ОбластьНеОтправленныеЧеки.Параметры.НомерНеОтправленного = КлиентскиеДанныеКассы.ДанныеПоКассе.ДанныеОборудования.НомерПервогоНепереданногоФД;
	Иначе
		ОбластьНеОтправленныеЧеки = Макет.ПолучитьОбласть("НеОтправленныеЧекиОшибка");
		ОбластьНеОтправленныеЧеки.Параметры.ТекстОшибки = КлиентскиеДанныеКассы.ДанныеПоКассе.ДанныеОборудования.ТекстОшибки;
	КонецЕсли;	
	ОтчетЗаСмену.Вывести(ОбластьНеОтправленныеЧеки);
	
	Если КоллекцияОшибок.Количество() > 0 Или КоллекцияНеПробитых.Количество() > 0 Тогда
		ОбластьКоличественныеПоказателиШапка = Макет.ПолучитьОбласть("КоличественныеПоказателиШапка");
		ОтчетЗаСмену.Вывести(ОбластьКоличественныеПоказателиШапка);
		ВывестиДанныеОшибочныхИНеПробитыхЧековОтчетаЗаСмену(Макет, ОтчетЗаСмену, КоллекцияОшибок, "Ошибки");
		Если КоллекцияОшибок.Количество() > 0 И КоллекцияНеПробитых.Количество() > 0 Тогда
			ОбластьОтступ = Макет.ПолучитьОбласть("Отступ");
			ОтчетЗаСмену.Вывести(ОбластьОтступ);
		КонецЕсли;
		ВывестиДанныеОшибочныхИНеПробитыхЧековОтчетаЗаСмену(Макет, ОтчетЗаСмену, КоллекцияНеПробитых, "НеПробитыеЧеки");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьРасшифровкуРаздела(ГруппаРаздела, КодРаздела, МассивОшибочныхЧеков)

	ТекстСБП = НСтр("ru='СБП'");
	Если ГруппаРаздела = "НеПробитыеЧеки" И (Не КодРаздела = ТекстСБП) Тогда
		КодРаздела = "";
	КонецЕсли;	
	
	ДанныеРасшифровки = Новый Структура();
	ДанныеРасшифровки.Вставить("ГруппаРаздела", ГруппаРаздела);
	ДанныеРасшифровки.Вставить("ИмяРаздела", КодРаздела);
	ДанныеРасшифровки.Вставить("МассивЧеков", МассивОшибочныхЧеков);
	
	РезультатФункции = Новый Структура();
	РезультатФункции.Вставить("ИмяОтчета", "ОтчетЗаСмену");
	РезультатФункции.Вставить("ДанныеРасшифровки", ДанныеРасшифровки);
	Возврат РезультатФункции;
	
КонецФункции	

&НаСервереБезКонтекста
Процедура ДобавитьРазделКоличественныхЧеков(Макет, ЧастьОтчета, КодРаздела, ЧекиПродаж, ЧекиВозвратов, ГруппаРаздела)
		
	ОбластьРаздел = Макет.ПолучитьОбласть("КоличественныеПоказателиРаздел");
	ОбластьРаздел.Параметры.ИмяРаздела = КодРаздела;
	ОбластьРаздел.Параметры.КоличествоПродаж = ЧекиПродаж.Количество();
	ОбластьРаздел.Параметры.КоличествоВозвратов = ЧекиВозвратов.Количество();
	ОбластьРаздел.Параметры.ЧекиПродаж = СформироватьРасшифровкуРаздела(ГруппаРаздела, КодРаздела, ЧекиПродаж);
	ОбластьРаздел.Параметры.ЧекиВозвратов = СформироватьРасшифровкуРаздела(ГруппаРаздела, КодРаздела, ЧекиВозвратов);
	ЧастьОтчета.Вывести(ОбластьРаздел);
	ЧекиПродаж = Новый Массив();
	ЧекиВозвратов = Новый Массив();
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура ВывестиДанныеОшибочныхИНеПробитыхЧековОтчетаЗаСмену(Макет, ОтчетЗаСмену, КоллекцияЧеков, ГруппаРаздела)
	
	КоличествоПродаж = 0;
	КоличествоВозвратов = 0;	
	ЧекиПродаж = Новый Массив();
	ЧекиВозвратов = Новый Массив();
	
	ЧастьОтчета = Новый ТабличныйДокумент;	
	
	КодРаздела = "";
	Для Каждого СтрокаЧека Из КоллекцияЧеков Цикл
		Если Не КодРаздела = СтрокаЧека.КодРаздела Тогда
			Если Не КодРаздела = "" Тогда
				ДобавитьРазделКоличественныхЧеков(Макет, ЧастьОтчета, КодРаздела, ЧекиПродаж, ЧекиВозвратов, ГруппаРаздела);
			КонецЕсли;
			КодРаздела = СтрокаЧека.КодРаздела;
		КонецЕсли;	
		
		ДанныеЧекаВРасшифровку = Новый Структура();
		ДанныеЧекаВРасшифровку.Вставить("ИмяРаздела", СтрокаЧека.КодРаздела);
		ДанныеЧекаВРасшифровку.Вставить("Чек", СтрокаЧека.ЧекСсылка);
		Если ГруппаРаздела = "Ошибки" Тогда
			ДанныеЧекаВРасшифровку.Вставить("ТекстОшибки", СтрокаЧека.ТекстОшибки);
		КонецЕсли;	
		
		Если СтрокаЧека.ЭтоПродажа Тогда
			КоличествоПродаж = КоличествоПродаж + 1;
			ЧекиПродаж.Добавить(ДанныеЧекаВРасшифровку);
		Иначе
			КоличествоВозвратов = КоличествоВозвратов + 1;
			ЧекиВозвратов.Добавить(ДанныеЧекаВРасшифровку);
		КонецЕсли;	
	КонецЦикла;
	Если Не КодРаздела = "" Тогда
		ДобавитьРазделКоличественныхЧеков(Макет, ЧастьОтчета, КодРаздела, ЧекиПродаж, ЧекиВозвратов, ГруппаРаздела);		
	КонецЕсли;
	Если КоличествоПродаж + КоличествоВозвратов > 0 Тогда
		ОбластьКоличественныеПоказателиГруппа = Макет.ПолучитьОбласть("КоличественныеПоказателиГруппа");
		ОбластьКоличественныеПоказателиГруппа.Параметры.КоличествоПродаж = КоличествоПродаж;
		ОбластьКоличественныеПоказателиГруппа.Параметры.КоличествоВозвратов = КоличествоВозвратов;
		ОбластьКоличественныеПоказателиГруппа.Параметры.ИмяГруппыРаздела = ?(ГруппаРаздела = "Ошибки", НСтр("ru='Ошибочные чеки'"), НСтр("ru='Отложенные чеки'"));
		ОтчетЗаСмену.Вывести(ОбластьКоличественныеПоказателиГруппа);
		ОтчетЗаСмену.Вывести(ЧастьОтчета);
	КонецЕсли;	
		
КонецПроцедуры	

&НаКлиенте
Функция ПолучитьЧекДляВозврата()
	
	ТекущийЧек = Неопределено;
	
	Если ПробитыеЧеки.Количество() = 1 Тогда
		ТекущийЧек = ПробитыеЧеки[0].ЧекККМ;
	ИначеЕсли ПробитыеЧеки.Количество() > 1 Тогда
		СтруктураОрганизацияИСНО = ВыбраннаяОрганизацияИСНО();
		СтрокиПробитыхЧеков = ПробитыеЧеки.НайтиСтроки(СтруктураОрганизацияИСНО);
		Если СтрокиПробитыхЧеков.Количество() > 0 Тогда
			ТекущийЧек = СтрокиПробитыхЧеков[СтрокиПробитыхЧеков.Количество() - 1].ЧекККМ;
		КонецЕсли;
	ИначеЕсли РежимРаботыСЧеком = РежимыРаботыСЧеком.Проверка И ЗначениеЗаполнено(ЧекККМПродажа) Тогда
		ТекущийЧек = ЧекККМПродажа;
	КонецЕсли;
	
	Возврат ТекущийЧек;
	
КонецФункции	

&НаКлиенте
Процедура НастроитьЦифровуюПанель()
	
	ВидимостьКнопокЦифр = Истина;
	ВидимостьКнопкиСправаВнизу = Ложь;
	
	ДоступностьЦифровойКлавиатуры = (ВводДисконтныхКарт И Не РежимРаботыСЧеком = РежимыРаботыСЧеком.Оплата);
	ГруппаСлоевДанныхПокупателя = Элементы.ГруппаСлоевДанныеПокупателяОсновнаяОбласть;
	ТекущийСлойДанныхПокупателя
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ГруппаСлоевДанныхПокупателя);
	ДополнительнаяОбластьДанныхПокупателя = Элементы.ГруппаСлоевДанныеПокупателяДополнительнаяОбласть;
	ТекущийДополнительныйСлой
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ДополнительнаяОбластьДанныхПокупателя);	
	Если ТекущийСлойДанныхПокупателя = Элементы.ГруппаПоискКарты
			Или ТекущийСлойДанныхПокупателя = Элементы.ГруппаКартаНеНайдена Тогда
		ВидимостьКнопокЦифр = ДоступностьЦифровойКлавиатуры;
		ВидимостьКнопкиСправаВнизу = Истина;
	ИначеЕсли ТекущийСлойДанныхПокупателя = Элементы.ГруппаВводОплатыБонусами Тогда
		ВидимостьКнопкиСправаВнизу = Элементы.СуммаКОплатеБонусами.Доступность;
		Если РежимЦифровойПанели = РежимыЦифровойПанели.Пустой Тогда
			ВидимостьКнопокЦифр = Ложь;
		КонецЕсли;
	ИначеЕсли ТекущийСлойДанныхПокупателя = Элементы.ОсновнаяГруппаКартаНайдена Тогда
		Если Не ТекущийДополнительныйСлой = Элементы.ГруппаПодтверждениеСМС Тогда
			ВидимостьКнопокЦифр = Ложь;
		КонецЕсли;
	ИначеЕсли ТекущийСлойДанныхПокупателя = Элементы.ОсновнаяГруппаСозданиеКарты Тогда
		Если ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеДисконтнойКартыЗаполнены(ЭтотОбъект) Тогда
			ВидимостьКнопокЦифр = Ложь;
		Иначе
			ВидимостьКнопокЦифр = ДоступностьЦифровойКлавиатуры;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьЭлементаФормы(Элементы.ЦифроваяПанельПоиск, ВидимостьКнопкиСправаВнизу);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаЦифроваяПанель, ВидимостьКнопокЦифр);
	
	НастроитьКнопкиЦифровойПанели();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВыбранногоКонтрагента(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Контрагент = Результат;
	КонтрагентВыбран = Истина;
	ЗаполнитьФормуПоДисконтнойКарте();
	Если КонтрагентВыбран Тогда
		ЗапроситьДанныеКарты();
	КонецЕсли;
	ЗавершитьВводШтрихкодаНайденаКарта(КодВозвратаДиалога.Да, Ложь);
	НастроитьКомандыОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеТаблицыТоваровНаКлиенте(ДоступенРежимОплаты = Неопределено)
	
	ПроверитьЗарегистрироватьНовыйЧек();
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если Объект.Товары.Количество() > 0 Тогда
		ВызватьПолныйАвтоматическийРасчетСкидок();
	КонецЕсли;
	ОбновитьСостояниеЭлементовПриИзмененииТаблицыТоваров(ДоступенРежимОплаты);
	ПартииПодобраны = Ложь;
	ИгнорироватьЗапретПодбора = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеЭлементовПриИзмененииТаблицыТоваров(ДоступенРежимОплаты = Неопределено)
	
	ЧекПустой = Ложь;
	ПереходКОплатеДоступен = Ложь;
	Если ФормаЗамороженаПослеПробитияЧека() Тогда
		ЧекПустой = Истина;
	ИначеЕсли Объект.Товары.Количество() = 0 Тогда
		ЧекПустой = Истина;
		РежимРаботыСЧеком = РежимыРаботыСЧеком.ЧекПустой;
	ИначеЕсли Не ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатойИлиКоррекцией(ЭтотОбъект) Тогда
		
		Если РежимРаботыСЧеком = РежимыРаботыСЧеком.ЧекПустой Тогда
			РежимРаботыСЧеком = РежимыРаботыСЧеком.ВводТоваров;
		КонецЕсли;
		ПереходКОплатеДоступен = ДоступенРежимОплаты;
		
	КонецЕсли;
	Если ЧекПустой Тогда
		ОтказОтОплатыБонусами = Ложь;
	КонецЕсли;
	
	Если Не РежимПлитки Тогда
		УстановитьПодсказкуКнопкиОтложитьЧек(Элементы.ОтложитьЧекРасширеннаяПодсказка, ЧекПустой);
	КонецЕсли;
	УстановитьВидимостьКомандыУдалитьЧек();
	УстановитьДоступностьЭлементаФормы(Элементы.УдалитьЧек, РежимКассыСамообслуживания Или Не ЧекПустой);
	ИнтерфейсРМКСлужебныйКлиент.НастроитьДоступностьРежимаОплаты(ЭтотОбъект, ПереходКОплатеДоступен);
	ПереключитьРежимПоказаОстатков(Ложь);
	ПереключитьРежимНаПоказСкидок(Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПодсказкуКнопкиОтложитьЧек(ЭлементПодсказка, ЧекПустой)
	
	ЭлементПодсказка.Заголовок = ?(ЧекПустой, НСтр("ru='Отложенные чеки'"), НСтр("ru='Отложить чек'"));
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивУправляемыхСкидок(ОбластьДействия = Неопределено)
	
	ЭтоОперацияВозврат = НЕ ОбщегоНазначенияРМК.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	СтрокиПоОтбору = Неопределено;
	Если ЗначениеЗаполнено(ОбластьДействия) Тогда
		СтрокиПоОтбору = ТаблицаУправляемыхСкидок.НайтиСтроки(Новый Структура("ОбластьДействия, ПриВозврате", ОбластьДействия, ЭтоОперацияВозврат));
	КонецЕсли;
	КопияТаблицаУправляемыхСкидок = ТаблицаУправляемыхСкидок.Выгрузить(СтрокиПоОтбору);
	МассивУправляемыхСкидок = ОбщегоНазначения.ТаблицаЗначенийВМассив(КопияТаблицаУправляемыхСкидок);
	Возврат МассивУправляемыхСкидок;
	
КонецФункции

&НаКлиенте
Процедура ВывестиСообщениеОбОшибкеАвторизации(ТипОшибки)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТипОшибки", ТипОшибки);
	СтандартнаяОбработка = Истина;
	ОбщегоНазначенияРМККлиентПереопределяемый.ВывестиСообщениеОбОшибкеАвторизации(
		СтруктураПараметров, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипОшибки = "ПустойМагазин" Тогда
		СообщениеОбОшибке = НСтр("ru = 'Не выбран магазин'");
	ИначеЕсли ТипОшибки = "ПустойКод" Тогда
		СообщениеОбОшибке = НСтр("ru = 'Не введен код кассира'");
	ИначеЕсли ТипОшибки = "НеУстановленКод" Тогда
		СообщениеОбОшибке = НСтр("ru = 'Выбранному кассиру не установлен код идентификации'");
	ИначеЕсли ТипОшибки = "НеВерныйКод" Тогда
		СообщениеОбОшибке = НСтр("ru = 'Введен неверный код кассира'");
	ИначеЕсли ТипОшибки = "НеОпределенКассир" Тогда
		СообщениеОбОшибке = НСтр("ru = 'По введенному коду не определен кассир'");
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Ошибка авторизации'");
	КонецЕсли;
	
	ПоказатьПредупреждение( ,СообщениеОбОшибке);
	
КонецПроцедуры

&НаСервере
Функция СуществуетКодАвторизацииУКассира(КассирДляПроверки)
	
	КодСуществует = Истина;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьСуществованиеКодаУКассира(КассирДляПроверки, КодСуществует);
	
	Возврат КодСуществует;
	
КонецФункции

&НаКлиенте
Процедура НастроитьКнопкиЦифровойПанели()
	
	Если РежимКассыСамообслуживания Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнойТекущийСлой = ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевДанныеПокупателяОсновнаяОбласть);
	ДополнительныйТекущийСлой = ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевДанныеПокупателяДополнительнаяОбласть);
	Если Не ДополнительныйТекущийСлой = Элементы.ГруппаПодтверждениеСМС
		И (Не РежимВводаСимволовИСумм(РежимЦифровойПанели, РежимыЦифровойПанели))
		И (ОсновнойТекущийСлой = Элементы.ГруппаПоискКарты Или ОсновнойТекущийСлой = Элементы.ГруппаКартаНеНайдена)
		И СтрокаПоискаКарты = "" Тогда
			Элементы.ЦифроваяПанельОчистить.Заголовок = "*";
			Элементы.ЦифроваяПанельОчистить.ЦветТекста = ЦветаФормы.Авто;
	Иначе
		Элементы.ЦифроваяПанельОчистить.Заголовок = "Х";
		Элементы.ЦифроваяПанельОчистить.ЦветТекста = ЦветаФормы.ОсобыйТекст;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиПредупреждениеОНевозможностиОплатыБонусами()
	
	ПредупреждениеОПродукцииБезОплатыБонусамиПоказано = Истина;
	Если РезультатКонтроляПродаж.НеВыводитьЗапретБонусов Тогда
		Возврат;
	КонецЕсли;
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();

	ТекстЗаголовка = НСтр("ru='Внимание'");
	ТекстОшибки = НСтр("ru = 'Бонусами нельзя оплатить алкогольную и табачную продукцию, подарочные сертификаты и подарки.'");
	Если Не РезультатКонтроляПродаж.ТекстПредупрежденияЗапретаОплатыБонусами = "" Тогда
		ТекстОшибки = РезультатКонтроляПродаж.ТекстПредупрежденияЗапретаОплатыБонусами;
	КонецЕсли;
	ПараметрыОшибки = Новый Структура("ЭтоПредупреждение", Истина);
	ПараметрыОшибки.Вставить("НеВызыватьЗаменуПрав", Истина);
	ПараметрыОшибки.Вставить("ОткрытоПредупреждениеОЗапретеОплатыБонусами", Истина);
	ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки, ПараметрыОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРежим(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаРежимЗавершение", ЭтотОбъект);
	ПоказатьВыборИзМеню(ОписаниеОповещения, СписокКомандРежим, Элементы.КомандаРежим);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРежимЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = "Продажа" Тогда
		ПереключитьРежимНаПродажа();
	ИначеЕсли Результат.Значение = "Возврат" Тогда
		ПереключитьРежимНаВозврат();
	ИначеЕсли Результат.Значение = "Скупка" Тогда
		ПереключитьРежимНаСкупка();
	ИначеЕсли Результат.Значение = "ВозвратСкупки" Тогда
		ПереключитьРежимНаВозвратСкупки();
	ИначеЕсли Результат.Значение = "Заказ" Тогда
		ПереключитьРежимНаЗаказ();
	ИначеЕсли Результат.Значение = "ЧекКоррекции" Тогда
		ПереключитьРежимНаЧекКоррекции();
	ИначеЕсли Результат.Значение = "ПроверкаЧека" Тогда
		ПерейтиКВыборуЧекаДляПроверки();
	Иначе
		ПодключаемаяКоманда = Команды.Найти(Результат.Значение);
		Если ТипЗнч(ПодключаемаяКоманда) = Тип("КомандаФормы") Тогда
			Подключаемый_ВыполнитьКоманду(ПодключаемаяКоманда);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЕще(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаЕщеЗавершение", ЭтотОбъект);
	ПоказатьВыборИзМеню(ОписаниеОповещения, СписокКомандЕще, Элементы.КомандаЕще);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЕщеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = "Внесение" Тогда
		ОткрытьСтраницуВнесенияДенежныхСредств();
	ИначеЕсли Результат.Значение = "Выемка" Тогда
		ОткрытьСтраницуВыемкиДенежныхСредств();
	ИначеЕсли Результат.Значение = "ПовторнаяПечатьЧека" Тогда
		ПовторнаяПечатьЧекаКлиент();
	ИначеЕсли Результат.Значение = "РаспечататьТоварныйЧек" Тогда
		ПечатьТоварногоЧекаКлиент();
	ИначеЕсли Результат.Значение = "ОткрытьПараметрыТарирования" Тогда
		ПерейтиКПараметрамТарирования();
	ИначеЕсли Результат.Значение = "ОбучениеУстройствРаспознавания" Тогда
		ОткрытьФормуОбученияУстройствРаспознавания();
	ИначеЕсли Результат.Значение = "ПродажаПоЗаказу" Тогда
		ПродажаПоЗаказуКлиент();
	ИначеЕсли Результат.Значение = "БезналичныеПлатежи" Тогда
		БезналичныеПлатежиКлиент();
	ИначеЕсли Результат.Значение = "ПриемАванса" Тогда
		ПриемАвансаКлиент();
	ИначеЕсли Результат.Значение = "ДокументРасчета" Тогда
		ДокументРасчетаКлиент();
	ИначеЕсли Результат.Значение = "ОплатаРассрочки" Тогда
		ОплатаРассрочкиКлиент();
	ИначеЕсли Результат.Значение = "РаспечататьЗаявлениеНаВозврат" Тогда
		РаспечататьЗаявлениеНаВозвратКлиент();
	ИначеЕсли Результат.Значение = "НайтиПоШтрихкоду" Тогда
		НайтиПоШтрихкодуКлиент();
	ИначеЕсли Результат.Значение = "СписатьАлкогольнуюПродукцию" Тогда
		СписатьАлкогольнуюПродукциюКлиент();
	ИначеЕсли Результат.Значение = "СменитьКассира" Тогда
		СменитьМагазинИлиКассира();
	ИначеЕсли Результат.Значение = "СменитьМагазин" Тогда
		СменитьМагазинИлиКассира(Истина);
	ИначеЕсли Результат.Значение = "ОтправитьПодтверждениеНСПК" Тогда
		ОтправитьПодтверждениеНСПККлиент();
	ИначеЕсли Результат.Значение = "СписокСертификатовНСПК" Тогда
		СписокСертификатовНСПККлиент();
	ИначеЕсли Результат.Значение = "ОбновитьОграниченияПродаж" Тогда
		ОбновитьОграниченияПродажИнтерактивно();
	ИначеЕсли Результат.Значение = "ОткрытьФормуОбменаДанными" Тогда
		ЗапуститьОбменДаннымиКлиент();
	ИначеЕсли Результат.Значение = "ОткрытьДенежныйЯщик" Тогда
		ДенежныйЯщикКлиент();
	ИначеЕсли Результат.Значение = "ПодключитьКегКОборудованиюРозлива" Тогда
		ПодключитьКегКОборудованиюРозливаКлиент();
	ИначеЕсли Результат.Значение = "ОтключитьКегОтОборудованияРозлива" Тогда
		ОтключитьКегОтОборудованияРозливаКлиент();
	ИначеЕсли Результат.Значение = "ЗакрытьСмену" Тогда
		ЗакрытьСменуКлиент();
	ИначеЕсли Результат.Значение = "СнятьОтчетБезГашения" Тогда
		ОтчетБезГашенияКлиент();
	ИначеЕсли Результат.Значение = "СверкаИтогов" Тогда
		СверкаИтоговКлиент();
	ИначеЕсли Результат.Значение = "ОтчетЗаСмену" Тогда
		ВывестиОтчетЗаСменуКлиент();
	ИначеЕсли Результат.Значение = "ЗавершитьРаботуРМК" Тогда
		ЗавершитьРаботуРМККлиент();
	Иначе
		ПодключаемаяКоманда = Команды.Найти(Результат.Значение);
		Если ТипЗнч(ПодключаемаяКоманда) = Тип("КомандаФормы") Тогда
			Подключаемый_ВыполнитьКоманду(ПодключаемаяКоманда);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьТоварногоЧекаКлиент()
	
	Если ПечататьТоварныйЧек() Тогда
		РаспечататьТоварныйЧекКлиент();
	Иначе
		
		ТекстЗаголовка = НСтр("ru = 'Печать товарного чека.'");
		ТекстСообщения = НСтр("ru = 'Не удалось распечатать товарный чек.'");
		ПоказатьПредупреждение(, ТекстСообщения, , ТекстЗаголовка);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ПечататьТоварныйЧек()
	
	ПечататьТоварныйЧек = Ложь;
	
	ЭтоПечатьТоварногоЧекаНаКассовомОборудовании = (СпособФормированияТоварногоЧека = 2);
	ЭтоПечатьТоварногоЧекаНаОфисномПринтере = (СпособФормированияТоварногоЧека = 1);
	Если (ЭтоПечатьТоварногоЧекаНаКассовомОборудовании
		И (ЗначениеЗаполнено(ПринтерЧеков) ИЛИ ЗначениеЗаполнено(ПодключаемоеОборудование)))
		Или ЭтоПечатьТоварногоЧекаНаОфисномПринтере Тогда
		ПечататьТоварныйЧек = Истина;
	КонецЕсли;
	
	Возврат ПечататьТоварныйЧек;
	
КонецФункции

&НаКлиенте
Процедура ПродажаПоЗаказуКлиент()
	
	Если Не РаботаСЧекомЗавершена() Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентПереопределяемый.ВыбратьДокументЗаказПокупателя(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БезналичныеПлатежиКлиент()
	
	Если РаботаСЧекомЗавершена() Тогда
		ОбщегоНазначенияРМККлиентПереопределяемый.ВыбратьДокументБезналичнойОплаты(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриемАвансаКлиент()
	
	Если Не РаботаСЧекомЗавершена() Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоОперацияСкупка = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииСкупка(Объект.ВидОперации);
	Если ЭтоОперацияСкупка Тогда
		ПереключитьРежимНаПродажа();
	КонецЕсли;
	
	СформироватьЗаголовок(НСтр("ru='Прием аванса'"));
	
	ПриемАванса = Истина;
	Объект.ОперацияСДенежнымиСредствами = Истина;
	
	НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Ложь);
	
	ИспользуютсяДокументыРасчета = Элементы.ДокументРасчета.Видимость;
	
	Если ИспользуютсяДокументыРасчета Тогда
		РежимПанелиДанныеПокупателя = 0;
		ВвестиДанныеПокупателяКлиент(Истина);
	Иначе
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.Каталог, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.УправляемыеСкидки, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварУправляемая, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.НайтиВЧеке, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ПанельИзбранныхТоваров, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОткрытьПанельИзбранныхТоваров, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОткрытьПлиточныйИнтерфейсКаталога, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРедактированияСтрокиКорзины, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаВРассрочку, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.Предоплата, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ЗачетАванса, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.УдалитьЧек, Истина);
	
	Объект.Товары.Очистить();
	
	НоваяСтрокаТовары = Объект.Товары.Добавить();
	НоваяСтрокаТовары.ПредставлениеНоменклатураХарактеристика = НСтр("ru = 'Аванс'");
	НоваяСтрокаТовары.ПредставлениеЕдиницыИзмерения = НСтр("ru = 'шт'");
	НоваяСтрокаТовары.Количество = 1;
	НоваяСтрокаТовары.КоличествоУпаковок = 1;
	НоваяСтрокаТовары.СистемаНалогообложения = СистемаНалогообложенияОрганизацииПоУмолчанию;
	НоваяСтрокаТовары.Организация = ОсновнаяОрганизация;
	ОбщегоНазначенияРМККлиентСервер.УстановитьНомерКартинкиСтрокиТовара(НоваяСтрокаТовары);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументРасчетаКлиент()
	
	Если Не РаботаСЧекомЗавершена() Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ДокументРасчета) Тогда
		СоздатьНовыйНабор();
		Возврат;
	Иначе
		ОбщегоНазначенияРМККлиентПереопределяемый.ВыбратьДокументРасчета(ЭтотОбъект);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент)
		И ОбщегоНазначенияРМККлиент.ЗапрещенаПредоплатаБезКонтрагента() Тогда
		
		НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Ложь);
		
		ПоказатьПанельВводаДанныхПокупателя();
		РежимПанелиДанныеПокупателя = 0;
		ПереключитьНаСтраницуПоискКарты();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаРассрочкиКлиент()
	
	Если Не РаботаСЧекомЗавершена() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументРасчета) Тогда
		СоздатьНовыйНабор();
		Возврат;
	Иначе
		
		ЭтоОплатаРассрочки = Истина;
		
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент)
			И ОбщегоНазначенияРМККлиент.ЗапрещенаПредоплатаБезКонтрагента() Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Для оплаты рассрочки необходимо указать контрагента'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			
			НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Ложь);
			
			ПоказатьПанельВводаДанныхПокупателя();
			РежимПанелиДанныеПокупателя = 0;
			ПереключитьНаСтраницуПоискКарты();
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВыбратьДокументОплатыРассрочки();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьЗаявлениеНаВозвратКлиент()
	
	Если ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации) Тогда
		ВвестиПерсональныеДанныеЗаявителя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоШтрихкодуКлиент()
	
	ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	СкрытьКомандуВыходаПриНеобходимости();
	Если ОткрытаСтраницаЗаменыПрав() Тогда
		Возврат;
	КонецЕсли;
	Если ПрерватьОбработкуОповещения() Тогда
		Возврат;
	КонецЕсли;
	
	ПереключитьРежимПоказаОстатков(Ложь);

	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	КонецЕсли;
	НастроитьДоступностьЭлементовПриПоискеПоШтрихкоду(Ложь);
	ПредыдущийСлойДоДанныхПокупателя
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
	ШтрихкодДляПоиска = НСтр("ru = ''");
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаНайтиПоШтрихкоду);
	ПереключитьЦифровуюПанельДляВводаСумм(Элементы.РучнойШтрихкодДляПоиска, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаНайтиПоШтрихкодуКлиент()
	
	ЗакрытьГруппуНайтиПоШтрихкодуКлиент();
	ВернутьсяНаСтраницуСтартаПродажПриНеобходимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьГруппуНайтиПоШтрихкодуКлиент()
	
	ПредыдущийСлой = Элементы.ОбластьОперативногоУправленияЧеком;
	Если Не (ПредыдущийСлойДоДанныхПокупателя = Неопределено
			Или ПредыдущийСлойДоДанныхПокупателя = Элементы.ГруппаНайтиПоШтрихкоду) Тогда
				
		ПредыдущийСлой = ПредыдущийСлойДоДанныхПокупателя;
			
	КонецЕсли;
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, ПредыдущийСлой);
	ВыполнитьНастройкуЭлементовПослеЗакрытияПоискаПоШтрихкоду();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуНаКлиенте(Знач ДанныеШтрихкода)
	
	Если ДанныеШтрихкода = "" Тогда
		ТекущийЭлемент = Элементы.РучнойШтрихкодДляПоиска;
		Элементы.РучнойШтрихкодДляПоиска.ПодсказкаВвода = НСтр("ru = 'Введите штрихкод'");
		Возврат;
	КонецЕсли;

	ЗакрытьГруппуНайтиПоШтрихкодуКлиент();
	ВыполнитьПоискШтрихкода(ДанныеШтрихкода);
	ВернутьсяНаСтраницуСтартаПродажПриНеобходимости();
	
КонецПроцедуры

&НаКлиенте
Процедура СписатьАлкогольнуюПродукциюКлиент()
	
	ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
	ОбщегоНазначенияРМККлиентПереопределяемый.СписатьАлкогольнуюПродукцию(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПодтверждениеНСПККлиент()
	
	ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
	ОбщегоНазначенияРМККлиентПереопределяемый.ОткрытьСписокЧековСОшибкамиНСПК(ЭтотОбъект, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСертификатовНСПККлиент()
	
	ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
	ДополнительныеПараметры = Новый Структура; 
	ДополнительныеПараметры.Вставить("СледующаяОперация", "ПолучениеСпискаСертификатов");
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОперациюНСПКЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	МенеджерОборудованияРМККлиент.НачатьПолучениеПараметровКарты(ОписаниеОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОбменДаннымиКлиент()
	
	Если РаботаСЧекомЗавершена() Тогда
		ОткрытьФормуОбменаДаннымиКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДенежныйЯщикКлиент()
	
	ЗаголовокПредупреждения = НСтр("ru = 'Не удалось открыть денежный ящик.'");
	Если РаботаСЧекомЗавершена(ЗаголовокПредупреждения) Тогда
		ОткрытьДенежныйЯщикКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетБезГашенияКлиент()
	
	Если ИспользоватьПодключаемоеОборудование И ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
		СнятьОтчетБезГашенияКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтрокуТовараВычисляемымиДанными(СтрокаТовара)
	Если Не СтрокаТовара = Неопределено Тогда
		СтрокаТовара.ЭтоТабачнаяПродукция = ЭтоТабачнаяПродукция(СтрокаТовара.ОсобенностьУчета);
		СтрокаТовара.ЭтоАлкогольнаяПродукция = ЭтоАлкогольнаяПродукция(СтрокаТовара.ОсобенностьУчета);
		СтрокаТовара.ЭтоПодарочныйСертификат = ЭтоПодарочныйСертификат(СтрокаТовара.ТипНоменклатуры);
		СтрокаТовара.ЭтоПивнаяПродукция = ЭтоПивнаяПродукция(СтрокаТовара.ОсобенностьУчета);
		Если СтрокаТовара.НеобходимостьВводаКодаМаркировки И Не ЗначениеЗаполнено(СтрокаТовара.КодМаркировки)
			И СтрокаТовара.ПоштучноеВыбытие
			И ОбщегоНазначенияРМК.ЭтоВидОперацииПродажа(Объект.ВидОперации) Тогда
			ЗаполнитьДанныеКодовМаркировкиДляВыбора(СтрокаТовара);
			
			Если СтрокаТовара.Свойство("КодыМаркировкиПоДаннымИБ") Тогда
				КодыМаркировкиДоступныеДляВыбора = КодыМаркировкиДоступныеДляВыбора(СтрокаТовара.КодыМаркировкиПоДаннымИБ, Объект.Товары);
				Если КодыМаркировкиДоступныеДляВыбора.Количество() = 1 Тогда
					СтрокаТовара.КодМаркировки = КодыМаркировкиДоступныеДляВыбора.Получить(0).Значение;
					СтрокаТовара.ТребуетсяПроверкаКодаМаркировки = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ОбщегоНазначенияРМККлиентСервер.УстановитьНомерКартинкиСтрокиТовара(СтрокаТовара);
		Если ОтображатьОстаток Тогда
			ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьКолонкуОстаток(СтрокаТовара, Объект.ТорговыйОбъект);
		КонецЕсли; 
		ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТовара.НоменклатураНабора,
			"Код, Артикул"); 
		СтрокаТовара.КодНабора     = ДанныеНоменклатуры.Код;
		СтрокаТовара.АртикулНабора = ДанныеНоменклатуры.Артикул;
		СтрокаТовара.ПредставлениеКодАртикул = ПолучитьПредставлениеКодАртикул(СтрокаТовара, ИспользоватьКод, ИспользоватьАртикул);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтрокиТовараВычисляемымиДанными()

	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		ДополнитьСтрокуТовараВычисляемымиДанными(СтрокаТовара);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоНалПриИзмененииНаКлиенте()
	Если Не РежимЦифровойПанели = РежимыЦифровойПанели.ВводСуммОплаты Тогда
		ОбновлятьСуммуАванса = Ложь;
	КонецЕсли;
	ЗачестьОплатуНаличными();
	ОбнулитьСчетчикНажатийКупюр();
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьПанельВводаНаличных(ВидимостьПанелиВводаНаличных)
	
	Если ИспользоватьПанельВводаНаличных Тогда
		
		Если ВертикальнаяОриентация Тогда
			Если ВидимостьПанелиВводаНаличных Тогда
				ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ПанельВводаНаличныхВертикальная);
			ИначеЕсли ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевЛеваяВерхняяВспомогательнаяПанель) = Элементы.ПанельВводаНаличныхВертикальная Тогда
				ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект,
					Элементы.ГруппаДополнительноеУправлениеЧеком);
			КонецЕсли;
		Иначе
			УстановитьВидимостьЭлементаФормы(Элементы.ПанельВводаНаличных, ВидимостьПанелиВводаНаличных);
		КонецЕсли;
		
		СчетчикНажатийНаКупюры = Новый Структура;
		Если ВидимостьПанелиВводаНаличных Тогда
			ОбновитьОтображениеКоличестваНажатийНаКупюры();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеДекорацииКупюры(ДекорацияКупюры, НоминалКупюры)
	
	КоличествоНажатий = 0;
	Если Не СчетчикНажатийНаКупюры.Свойство("Номинал" + НоминалКупюры, КоличествоНажатий) Тогда
		КоличествоНажатий = 0;
	КонецЕсли;
	УстановитьЗаголовокДекорацииКупюры(ДекорацияКупюры, КоличествоНажатий);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокДекорацииКупюры(ДекорацияКупюры, КоличествоНажатий)
	
	ЗаголовокДекорации = "";
	Если КоличествоНажатий > 0 Тогда
		ЗаголовокДекорации = "x" + Формат(КоличествоНажатий, "ЧГ=");
	КонецЕсли;
	ДекорацияКупюры.Заголовок = ЗаголовокДекорации;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеКоличестваНажатийНаКупюры()
	
	Если ВертикальнаяОриентация Тогда
		ОбновитьОтображениеКоличестваНажатийВГруппеКупюр(Элементы.ГруппаКупюрРяд1);
		ОбновитьОтображениеКоличестваНажатийВГруппеКупюр(Элементы.ГруппаКупюрРяд2);
	Иначе
		ОбновитьОтображениеКоличестваНажатийВГруппеКупюр(Элементы.ГруппаКупюр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьСчетчикНажатийКупюр()
	Если ИспользоватьПанельВводаНаличных Тогда
		СчетчикНажатийНаКупюры = Новый Структура;
		ОбновитьОтображениеКоличестваНажатийНаКупюры();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВыбраннуюСуммуВНаличные(ТекущаяСумма, ЭтоНачалоВвода)
	
	Если ЭтоНачалоВвода Тогда
		СуммаОплаченоНал = ТекущаяСумма;
	Иначе
		СуммаОплаченоНал = СуммаОплаченоНал + ТекущаяСумма;
	КонецЕсли;
	ЗачестьОплатуНаличными();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеКупюры(НоминалКупюры)
	
	Если Не ФормаЗамороженаПослеПробитияЧека() Тогда
		ЭтоНачалоВвода = (СчетчикНажатийНаКупюры.Количество() = 0);
		КлючСтруктуры = "Номинал" + НоминалКупюры;
		КоличествоНажатий = 0;
		Если СчетчикНажатийНаКупюры.Свойство(КлючСтруктуры, КоличествоНажатий) Тогда
			КоличествоНажатий = КоличествоНажатий + 1;
		Иначе
			КоличествоНажатий = 1;
		КонецЕсли;
		Если СчетчикНажатийНаКупюры.Количество() = 0 И СуммаБезСкидки = 0 И ПриемАванса Тогда
			ОбновлятьСуммуАванса = Истина;
		КонецЕсли;
		СчетчикНажатийНаКупюры.Вставить(КлючСтруктуры, КоличествоНажатий);
		ДекорацияКупюры = Элементы.Найти("КоличествоНажатийКупюры"+НоминалКупюры);
		Если Не ДекорацияКупюры = Неопределено Тогда
			УстановитьЗаголовокДекорацииКупюры(ДекорацияКупюры, КоличествоНажатий);
		КонецЕсли;
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		ТекущаяСумма = ОписаниеТипа.ПривестиЗначение(НоминалКупюры);
		Если ТекущаяСумма = 0 Тогда
			ЗаписатьОшибкуОбработкиНажатияКупюры(НСтр("ru = 'Не корректный номинал купюры:'") + НоминалКупюры);
		Иначе
			ПеренестиВыбраннуюСуммуВНаличные(ТекущаяСумма, ЭтоНачалоВвода);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОшибкуОбработкиНажатияКупюры(ПодробноеПредставлениеОшибки)
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Выбор номинала купюры.Ошибка обработки нажатия купюры'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеПромокодов(РазблокироватьПромокод = Ложь)
	
	Если РазблокироватьПромокод Тогда
		РазблокироватьПромокоды();
	КонецЕсли;
	
	ВведенныйПромокод = "";
	Элементы.ПодсказкаПромокодПричинаОтказа.Заголовок = "";
	
	ПромокодДоступен = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьВводаПромокода(ОтменитьВводПромокода = Ложь, ПрименитьПромокод = Ложь)
	
	СкрытьГруппуВводаПромокода = Ложь;
	Если Элементы.НайтиПромокод.Видимость Тогда
		
		СкрытьГруппуВводаПромокода = Истина;
		
	Иначе
		
		УстановитьВидимостьЭлементаФормы(Элементы.НайтиПромокод, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияВводПромокода, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ВведенныйПромокод, Истина);
		Если НЕ РежимКассыСамообслуживания Тогда
			УстановитьТолькоПросмотрЭлементаФормы(Элементы.ВведенныйПромокод, Ложь);
		КонецЕсли;
		УстановитьВидимостьЭлементаФормы(Элементы.ПодсказкаПромокодПричинаОтказа, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ПрименитьПромокод, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ОписаниеНайденнойСкидки, Ложь);

		ПромокодДоступен = Истина; // Отключим подсветку истекших промокодов, пока не выполним проверку следующего кода
		
	КонецЕсли;
	
	Если ОтменитьВводПромокода Тогда
		
		ПредъявленныеПромокоды = ТаблицаПримененныхПромокодов.НайтиСтроки(Новый Структура("ЭтоАктивацияПромокода", Ложь));
		ЕстьПромокоды = (ПредъявленныеПромокоды.Количество() > 0);
		СкрытьГруппуВводаПромокода = Истина;
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПримененныеПромокоды, ЕстьПромокоды);
		
	КонецЕсли;
	
	Если ПрименитьПромокод Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПримененныеПромокоды, Истина);
		СкрытьГруппуВводаПромокода = Истина;
		
	КонецЕсли;
	Если СкрытьГруппуВводаПромокода Тогда
		СкрытьГруппуВводаПромокода();
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитыПромокода(ТекущийПромокод)
	
	// Добавляем реквизиты на форму
	ДобавляемыеРеквизиты = Новый Массив;
	
	СтрокиПромокода = ТаблицаПримененныхПромокодов.НайтиСтроки(Новый Структура("Промокод, ЭтоАктивацияПромокода", ТекущийПромокод, Ложь));
	Если СтрокиПромокода.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	СтрокаПромокода = СтрокиПромокода[0];
	ИдентификаторСтроки = СтрокаПромокода.УникальныйИдентификатор;
	ТипРеквизита  = Метаданные.ОпределяемыеТипы.ПромокодРМК.Тип;
	ИмяРеквизита  = "ПримененныйПромокод_" + ИдентификаторСтроки;
	РеквизитФормы = Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита);
	
	ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
	ИмяГруппы = "ГруппаПримененныеПромокоды_"+ИдентификаторСтроки;
	ИмяЭлемента = "ПримененныйПромокод_" + ИдентификаторСтроки;
	ИмяКомандыУдалитьПромокод = "УдалитьПромокод_" + ИдентификаторСтроки;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	ЭтотОбъект[ИмяРеквизита] = ТекущийПромокод;
	
	// Добавляем поля ввода для новых реквизитов
	ГруппаЭлементов = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ГруппаПримененныеПромокоды);
	ГруппаЭлементов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЭлементов.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаЭлементов.ОтображатьЗаголовок = Ложь;
	Элементы.Переместить(ГруппаЭлементов, ГруппаЭлементов.Родитель, Элементы.ГруппаДобавитьПромокод);
	
	ПолеПромокода = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Элементы[ИмяГруппы]);
	ПолеПромокода.ПутьКДанным = ИмяРеквизита;
	ПолеПромокода.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеПромокода.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеПромокода.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	ПолеПромокода.Шрифт = ШрифтыСтиля.ШрифтОбычный12РМК;
	ПолеПромокода.РастягиватьПоГоризонтали = Истина;
	ПолеПромокода.РасширеннаяПодсказка.Шрифт = ПолеПромокода.Шрифт;
	ПолеПромокода.Ширина = 20;
	ПолеПромокода.РасширеннаяПодсказка.Ширина = 20;
	ПолеПромокода.Подсказка = ОписаниеСкидкиПромокода;
	
	КомандаУдалитьПромокод = Команды.Добавить(ИмяКомандыУдалитьПромокод);
	КомандаУдалитьПромокод.Действие = "ДекорацияУдалитьПромокодНажатие";
	КомандаУдалитьПромокод.Картинка = БиблиотекаКартинок.ОформлениеКрест;
	КомандаУдалитьПромокод.Отображение = ОтображениеКнопки.Картинка;	
	КомандаУдалитьПромокод.Заголовок = "";

	//ДекорацияУдалить = Элементы.Добавить(ИмяДекорации, Тип("ДекорацияФормы"), Элементы[ИмяГруппы]);
	КнопкаУдалитьПромокод = Элементы.Добавить(ИмяКомандыУдалитьПромокод, Тип("КнопкаФормы"), Элементы[ИмяГруппы]);
	КнопкаУдалитьПромокод.ИмяКоманды = ИмяКомандыУдалитьПромокод;
	КнопкаУдалитьПромокод.Видимость = ОбщегоНазначенияРМК.ЭтоВидОперацииПродажа(Объект.ВидОперации);

	//ДекорацияУдалить.Вид = ВидДекорацииФормы.Картинка;
	//ДекорацияУдалить.УстановитьДействие("Нажатие", );
	//ДекорацияУдалить.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
		
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицуПримененныхПромокодов()
	
	ПредъявленныеПромокоды = ТаблицаПримененныхПромокодов.НайтиСтроки(Новый Структура("ЭтоАктивацияПромокода", Ложь));
	Для Каждого СтрокаТаблицы Из ПредъявленныеПромокоды Цикл
		УдалитьПромокод(СтрокаТаблицы.УникальныйИдентификатор);
	КонецЦикла;
	
	ТаблицаПримененныхПромокодов.Очистить();
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПримененныеПромокоды, Ложь);
	
КонецПроцедуры

Процедура ДобавитьРеквизитыУправляемойСкидки(СкидкаНаценка, ИдентификаторСтрокиТоваров)
	
	СтрокиСкидок = ТаблицаВыбранныхУправляемыхСкидок.НайтиСтроки(Новый Структура("СкидкаНаценка, ИдентификаторСтроки", СкидкаНаценка, ИдентификаторСтрокиТоваров));
	Если СтрокиСкидок.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	СтрокаСкидок = СтрокиСкидок[0];
	ИдентификаторСтроки = СтрокаСкидок.ПолучитьИдентификатор();
	СтрокиПараметровСкидок = ТаблицаУправляемыхСкидок.НайтиСтроки(Новый Структура("СкидкаНаценка", СкидкаНаценка));
	Если СтрокиПараметровСкидок.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	ПараметрыТекущейСкидки = СтрокиПараметровСкидок[0];

	ИмяГруппы = "ГруппаПримененныеУправляемыеСкидки_"+ИдентификаторСтроки;
	ИмяКоманды = "КомандаУдалитьУправляемуюСкидку_" + ИдентификаторСтроки;
	
	ПредставлениеСкидки = Строка(СкидкаНаценка);
	ДлинаЗаголовка = 10;
	Если СтрДлина(ПредставлениеСкидки ) > ДлинаЗаголовка + 3 Тогда
		ПредставлениеСкидки = Лев(ПредставлениеСкидки, ДлинаЗаголовка) + "...";
	КонецЕсли;
	ПредставлениеСкидки = ПредставлениеСкидки + " ×";
	
	КомандаУдалить = Команды.Добавить(ИмяКоманды);
	КомандаУдалить.Действие = "ДекорацияУдалитьУправляемуюСкидкуНажатие";
	Если ПараметрыТекущейСкидки.ОбластьДействия = "На строку" Тогда
		КомандаУдалить.Картинка = БиблиотекаКартинок.МетаданныеВнешниеИсточникиТаблицы;
	Иначе
		КомандаУдалить.Картинка = БиблиотекаКартинок.Документ;
	КонецЕсли;
	КомандаУдалить.Отображение = ОтображениеКнопки.КартинкаИТекст;	
	КомандаУдалить.Заголовок = ПредставлениеСкидки;
	
	// Добавляем поля ввода для новой кнопки
	ГруппаЭлементов = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ГруппаПримененныеУправляемыеСкидки);
	ГруппаЭлементов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЭлементов.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаЭлементов.ОтображатьЗаголовок = Ложь;
	
	Если ПараметрыТекущейСкидки.ОбластьДействия = "На документ" Тогда
		// На форме присутствует невидимая группа ГруппаПримененныеУправляемыеСкидкиГоризонтально, скидки на документ будут перед ней, на строку - после нее
		// Тогда скидки на документ будут отображены в одном и том же порядке для всех строк, и не будут "скакать" при переключении между строками
		Элементы.Переместить(ГруппаЭлементов, Элементы.ГруппаПримененныеУправляемыеСкидки, Элементы.ГруппаПримененныеУправляемыеСкидкиГоризонтально);
	КонецЕсли;
		

	// Добавляем кнопку, отображающую примененную скидку (при нажатии скидка будет отменена)
	КнопкаУдалитьСкидку = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы[ИмяГруппы]);
	КнопкаУдалитьСкидку.ИмяКоманды = ИмяКоманды;
	КнопкаУдалитьСкидку.Фигура = ФигураКнопки.Овал;
	КнопкаУдалитьСкидку.ПоложениеКартинки = ПоложениеКартинкиКнопкиФормы.Лево;
	КнопкаУдалитьСкидку.ЦветФона = ЦветаСтиля.ЦветАктивнойКнопкиРМК;
	КнопкаУдалитьСкидку.ЦветРамки = КнопкаУдалитьСкидку.ЦветФона;
	//
	Элементы.ГруппаПримененныеУправляемыеСкидки.Видимость = Истина
		
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицуВыбранныхУправляемыхСкидок()
	
	Для Каждого СтрокаТаблицы Из ТаблицаВыбранныхУправляемыхСкидок Цикл
		УдалитьУправляемуюСкидку(СтрокаТаблицы.ПолучитьИдентификатор());
	КонецЦикла;
	
	ТаблицаВыбранныхУправляемыхСкидок.Очистить();
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаПримененныеУправляемыеСкидки, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РазблокироватьПромокоды(ИдентификаторСтроки = Неопределено, Промокод = "")
	
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		
		Если ЗначениеЗаполнено(Промокод) Тогда
			ВведенныйПромокод = Промокод;
			РазблокироватьОбъектСервераЛояльности("promocode");
		Иначе
			Если ЗначениеЗаполнено(ИдентификаторСтроки) Тогда
				Отбор = Новый Структура("УникальныйИдентификатор", ИдентификаторСтроки);
				СписокПромокодов = ТаблицаПримененныхПромокодов.НайтиСтроки(Отбор);
			Иначе
				СписокПромокодов = ТаблицаПримененныхПромокодов;
			КонецЕсли;
			
			Для Каждого СтрокаПромокода Из СписокПромокодов Цикл
				
				Если НЕ СтрокаПромокода.ЭтоАктивацияПромокода Тогда
					
					ВведенныйПромокод = СтрокаПромокода.Промокод;
					РазблокироватьОбъектСервераЛояльности("promocode");
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуЦифровойПанели()
	
	Если РежимЦифровойПанели = РежимыЦифровойПанели.ВводСуммОплаты Тогда
		СкрытьЦифровуюПанельДляВводаСумм();
	ИначеЕсли РежимЦифровойПанели = РежимыЦифровойПанели.ВводСимволов Тогда
		ОтменитьВводНаПанели();
	ИначеЕсли РежимЦифровойПанели = РежимыЦифровойПанели.ДанныеПокупателя Тогда
		ЗакрытьФормуДанныеПокупателяРасчетСкидокПриНеобходимости();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеКоличестваНажатийВГруппеКупюр(ЭлементГруппаКупюр)
	
	Для Каждого ГруппаКупюры Из ЭлементГруппаКупюр.ПодчиненныеЭлементы Цикл
		НоминалКупюры = сред(ГруппаКупюры.Имя, 13);
		ГруппаДекорацииКупюры = ГруппаКупюры.ПодчиненныеЭлементы.Найти("ГруппаДекорацийКупюры"+НоминалКупюры);
		ДекорацияКупюры = ГруппаДекорацииКупюры.ПодчиненныеЭлементы.Найти("КоличествоНажатийКупюры"+НоминалКупюры);
		ОбновитьОтображениеДекорацииКупюры(ДекорацияКупюры, НоминалКупюры);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУдалитьЮКассаВерНажатие(Элемент)
	
	СанкционироватьЗакрытиеОперацииПлатежнойСистемой();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменаТоваровНаКлиенте()
	
	Если ЭтоЗаменаТоваров Тогда
		ЗаменаТоваровОтключить();
	Иначе
		ЗаменаТоваровВключить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменаТоваровВключить()
	
	МаркированныйТовар = Объект.Товары.НайтиСтроки(Новый Структура("НеобходимостьВводаКодаМаркировки", Истина));
	Если МаркированныйТовар.Количество() > 0 Тогда
		ЗаголовокОшибки = НСтр("ru = 'Замена товара.'");
		ТекстОшибки = НСтр("ru = 'Замена маркированного товара не поддерживается.'");
		ПараметрыОшибки = Новый Структура("ЭтоПредупреждение", Истина);
		ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстОшибки, ПараметрыОшибки);
		Возврат;
	КонецЕсли;
	
	Объект.Оплата.Очистить();
	ОчиститьТаблицуПлатежныхКарт();
	
	НастроитьЭлементыВРежимеЗаменаТоваров();
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеЗаменаТоваров = Истина;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменаТоваровОтключить()
	
	СформироватьЗаголовок(НСтр("ru='Возврат'"));
	
	СуммаТоваровКЗамене = 0;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаТоваровКЗамене, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeКарта, ИспользоватьОплатуПлатежнымиКартами);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCodeНаличные, ИспользоватьОплатуНаличными);
	УстановитьВидимостьЭлементаФормы(Элементы.ОтложитьЧек, Истина);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ОплатаСертификатом, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаКнопкиРасчетаСкидок, ИспользоватьАвтоматическиеСкидки);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВидОплатыНСПК, ИспользоватьОплатуСертификатамиНСПК);
	
	Результат = Новый Структура;
	Результат.Вставить("ЧекККМ", ЧекККМПродажа);
	ДополнительныеПараметры = Неопределено;
	ВыборЧекаЗавершение(Результат, ДополнительныеПараметры);
	
	ЭтоЗаменаТоваров = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСуммуПодарочногоСертификата(ИдентификаторСертификата, ИмяЭлементаСуммыСертификата)
	
	Отбор = Новый Структура();
	Отбор.Вставить("УникальныйИдентификатор", ИдентификаторСертификата);
	СтрокиТаблицыПоИдентификатору = ТаблицаПодарочныхСертификатов.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаТаблицыПоИдентификатору Из СтрокиТаблицыПоИдентификатору Цикл
			
		МаксимальноВозможнаяСумма = СтрокаТаблицыПоИдентификатору.ЛимитСертификата;
			
		НомерСертификата = СтрокаТаблицыПоИдентификатору.НомерСертификата;
		ОтборПоНомеру = Новый Структура();
		ОтборПоНомеру.Вставить("НомерСертификата", НомерСертификата);
		СтрокиТаблицыПоНомеру = ТаблицаПодарочныхСертификатов.НайтиСтроки(ОтборПоНомеру);
		Для Каждого СтрокаТаблицыПоНомеру Из СтрокиТаблицыПоНомеру Цикл
			Если СтрокаТаблицыПоНомеру.УникальныйИдентификатор = ИдентификаторСертификата Тогда
				Продолжить;
			КонецЕсли;
			МаксимальноВозможнаяСумма = МаксимальноВозможнаяСумма - СтрокаТаблицыПоНомеру.СуммаСертификата;
		КонецЦикла;
			
		СуммаСертификата = Мин(ЭтотОбъект[ИмяЭлементаСуммыСертификата], МаксимальноВозможнаяСумма);
		СтрокаТаблицыПоИдентификатору.СуммаСертификата = СуммаСертификата;
		ЭтотОбъект[ИмяЭлементаСуммыСертификата] = СуммаСертификата;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьВводОплатыВРассрочку()
	
	ТекстПредупреждения = НСтр("ru = 'Для оплаты в рассрочку необходимо указать контрагента'");
	Если Не ПереключитьНаВыборКонтрагента(ТекстПредупреждения) Тогда
		Если РежимРаботыСЧеком = РежимыРаботыСЧеком.Оплата Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ВозвратКоррекция Тогда
			ОплатаВРассрочкуЗавершение(КодВозвратаДиалога.Нет);
		Иначе
			НеобходимПересчетАвтоматическихСкидок = ОпределитьНеобходимостьПересчетаАвтоматическихСкидок();
			Если НеобходимПересчетАвтоматическихСкидок И ВопросПоРасчетуСкидок Тогда 
				ЗадатьВопросПоРасчетуСкидок("ОплатаВРассрочкуЗавершение", , Истина);
			Иначе
				ОплатаВРассрочкуЗавершение(?(ВопросПоРасчетуСкидок Или СкидкиРассчитаны, КодВозвратаДиалога.Нет, КодВозвратаДиалога.Да));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьВводПредоплаты()
	
	ТекстПредупреждения = НСтр("ru = 'Для предоплаты необходимо указать контрагента'");
	Если Не ПереключитьНаВыборКонтрагента(ТекстПредупреждения) Тогда
		Если РежимРаботыСЧеком = РежимыРаботыСЧеком.Оплата Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ВозвратКоррекция Тогда
			ПредоплатаЗавершение(КодВозвратаДиалога.Нет);
		Иначе
			НеобходимПересчетАвтоматическихСкидок = ОпределитьНеобходимостьПересчетаАвтоматическихСкидок();
			Если НеобходимПересчетАвтоматическихСкидок И ВопросПоРасчетуСкидок Тогда
				ЗадатьВопросПоРасчетуСкидок("ПредоплатаЗавершение", , Истина);
			Иначе 
				ПредоплатаЗавершение(?(ВопросПоРасчетуСкидок Или СкидкиРассчитаны, КодВозвратаДиалога.Нет, КодВозвратаДиалога.Да));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ФункцииПроцедурыВертикальнаяОриентация

#Область ОбработчикиКомандВертикальнаяОриентация

&НаКлиенте
Процедура ВернутьсяВРежимПодбораТовара(Команда)
	
	ПереключитьВРежимВводаТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВРежимОплаты(Команда)
	
	ПерейтиВРежимОплатыПоКнопкеОплатить();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЦифровойПанелиПоиск(Команда)
	
	Если РежимЦифровойПанели = РежимыЦифровойПанели.ВводСуммОплаты Или ЭтоЧисловоеПолеДанныхПокупателя() Тогда
		ПеревестиКурсорНаВводДробнойЧасти();
	ИначеЕсли РежимЦифровойПанели = РежимыЦифровойПанели.ДанныеПокупателя Тогда
		ОбработатьШтрихкодКлиент(СтрокаПоискаКарты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеСертификаты(Команда)
	
	УдалитьВсеПодарочныеСертификаты();
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийВертикальнаяОриентация

&НаКлиенте
Процедура СуммаОплаченоСБППриИзменении(Элемент)

	СуммаОплаченоQRКодомПриИзменении(СуммаОплаченоСБП, Элементы.ГруппаОплатаСБП);

КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоЮКассаПриИзменении(Элемент)

	СуммаОплаченоQRКодомПриИзменении(СуммаОплаченоЮКасса, Элементы.ГруппаОплатаЮКасса);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоНалАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
			Ожидание, СтандартнаяОбработка)
	ВосстановитьПанельВводаНаличных();
	СменитьПереключитьЦифровуюПанель(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплатаСертификатамиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
			Ожидание, СтандартнаяОбработка)
	СменитьЭлементВводаСуммы(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоБНАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
			Ожидание, СтандартнаяОбработка)
	СменитьПереключитьЦифровуюПанель(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоСБПАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
			Ожидание, СтандартнаяОбработка)
	СменитьЭлементВводаСуммы(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоЮКассаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
			Ожидание, СтандартнаяОбработка)
	СменитьЭлементВводаСуммы(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоПредоплатаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
			Ожидание, СтандартнаяОбработка)
	СменитьЭлементВводаСуммы(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоВРассрочкуАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
			Ожидание, СтандартнаяОбработка)
	СменитьЭлементВводаСуммы(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоЗачетАвансаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
			Ожидание, СтандартнаяОбработка)
	СменитьЭлементВводаСуммы(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоКредитомАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
			Ожидание, СтандартнаяОбработка)
	СменитьЭлементВводаСуммы(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоБонусамиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
			Ожидание, СтандартнаяОбработка)
	СменитьПереключитьЦифровуюПанель(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаНаличныхКВыдачеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
			Ожидание, СтандартнаяОбработка)
	СменитьЭлементВводаСуммы(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплаченоКредитомНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПереключитьЦифровуюПанельДляВводаСумм(Элемент);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементыДанныхПокупателя

&НаКлиенте
Процедура СтрокаПоискаКартыАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СменитьЭлементВводаДанныхПокупателя(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПовторныйПоискКартыАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СменитьЭлементВводаДанныхПокупателя(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаЧекаПочтаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЭлементВводаДанныхПокупателя = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаЧекаТелефонАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СменитьЭлементВводаДанныхПокупателя(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НоваяКартаНомерАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СменитьЭлементВводаДанныхПокупателя(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НоваяКартаТелефонАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СменитьЭлементВводаДанныхПокупателя(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НоваяКартаФИОАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)

	Если Не НеИспользоватьПодборФИО 
		И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПодборФИО") Тогда
		АвтоПодбор(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;

	ОбработатьПотерюФокусаДатыРождения();
	ЭлементВводаДанныхПокупателя = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяКартаПочтаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ОбработатьПотерюФокусаДатыРождения();
	ЭлементВводаДанныхПокупателя = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура НоваяКартаДатаРожденияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СменитьЭлементВводаДанныхПокупателя(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НоваяКартаДатаРожденияИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	ОписаниеТипаДата = Новый ОписаниеТипов("Дата");
	МассивЦифрДаты = ИнтерфейсРМКСлужебныйКлиентСервер.СформироватьМассивЦифрДаты(Текст);
	Если ИнтерфейсРМКСлужебныйКлиентСервер.МассивЦифрЗаполненПолностью(МассивЦифрДаты) Тогда
		ДатаКаноническаяСтрока = ИнтерфейсРМКСлужебныйКлиентСервер.СформироватьКаноническуюСтрокуДатыИзМассиваЦифр(МассивЦифрДаты);
		ПолученнаяДата = ОписаниеТипаДата.ПривестиЗначение(ДатаКаноническаяСтрока);
		Если Не ЗначениеЗаполнено(ПолученнаяДата) Тогда
			ВернутьПредыдущееЗначениеТекстаДаты(Элемент);
		Иначе
			ТекстДатыРожденияСозданиеКарты = Текст;
		КонецЕсли;
	Иначе
		Если ИнтерфейсРМКСлужебныйКлиент.НекорректноВведеныЦифрыДаты(МассивЦифрДаты) Тогда
			ВернутьПредыдущееЗначениеТекстаДаты(Элемент);
		Иначе
			ТекстДатыРожденияСозданиеКарты = Текст;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяКартаВидКартыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработатьПотерюФокусаДатыРождения();
	ЭлементВводаДанныхПокупателя = Неопределено;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПоказатьПанельВводаДанныхПокупателя()
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	РежимЦифровойПанели = РежимыЦифровойПанели.ДанныеПокупателя;
	ТекущийСлой = ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
	Если Не ТекущийСлой = Элементы.ГруппаДанныеПокупателя Тогда
		ПредыдущийСлойДоДанныхПокупателя = ТекущийСлой;
	КонецЕсли;
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевДанныеПокупателяОсновнаяОбласть) = Элементы.ОсновнаяГруппаСозданиеКарты Тогда
		ИнтерфейсРМКСлужебныйКлиент.УстановитьТекстДекорацииОПерсональныхДанных(Элементы.ДекорацияТекстОПерсональныхДанных);
	КонецЕсли;
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаДанныеПокупателя);
	УстановитьВидимостьЭлементаФормы(Элементы.ПанельИтоговПоЧекам, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаЦифроваяПанель, Истина);
	Если Не ОткрытДиалогВводаБонусов Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаКомандЦифроваяПанель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗаголовкиКнопокПоискаОтменыКарты(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И Не ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		Элементы.ДекорацияКартаНайденаЗаголовок.Заголовок = НСтр("ru = 'Покупатель найден'");
		Элементы.ОтменитьВводКарты.Заголовок = НСтр("ru = 'Отменить выбор покупателя'");
	Иначе
		
		ЗаголовокДекорацииКартаНайдена = НСтр("ru = 'Карта найдена'");
		Если Не ЗначениеЗаполнено(Объект.ДисконтнаяКарта)
				И ИнтерфейсРМКСлужебныйКлиентСервер.СохраненТолькоНомерКартыЛояльности(Форма.ПараметрыКартыЛояльности) Тогда
				
			ЗаголовокДекорацииКартаНайдена = НСтр("ru = 'Карта не найдена.
				|Номер карты сохранен в чеке'");
				
		КонецЕсли;
		Элементы.ДекорацияКартаНайденаЗаголовок.Заголовок = ЗаголовокДекорацииКартаНайдена;
		Элементы.ОтменитьВводКарты.Заголовок = НСтр("ru = 'Отменить ввод карты'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВыключитьГруппуДанныхПокупателя(ИмяГруппы, ИмяПоля, КоличествоОтображаемыхПолей, СчетчикВключенныхПолей)
	Если СчетчикВключенныхПолей >= КоличествоОтображаемыхПолей Тогда
		УстановитьВидимостьЭлементаФормы(Элементы[ИмяГруппы], Ложь);
	Иначе
		Если ЗначениеЗаполнено(ЭтотОбъект[ИмяПоля]) Тогда
			УстановитьВидимостьЭлементаФормы(Элементы[ИмяГруппы], Истина);
			СчетчикВключенныхПолей = СчетчикВключенныхПолей + 1;
		Иначе
			УстановитьВидимостьЭлементаФормы(Элементы[ИмяГруппы], Ложь);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОплатуКартой(Команда, ДополнительныеПараметры = Неопределено)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ТаблицаПлатежныхКарт") Тогда
		
		ПозицияПодчеркивания = СтрНайти(ТекущийЭлемент.Имя, "_");
		
		Если ПозицияПодчеркивания <> 0 Тогда
			ИндексЭлемента = Прав(ТекущийЭлемент.Имя, СтрДлина(ТекущийЭлемент.Имя) - ПозицияПодчеркивания);
			НаименованиеГруппыСуммы = "ГруппаОплатаКартой_" + Строка(ИндексЭлемента);
			ГруппаЭлементовПоляСуммы = Элементы[НаименованиеГруппыСуммы];
		Иначе
			ГруппаЭлементовПоляСуммы = Элементы.ГруппаОплатаКартой;
		КонецЕсли;
		
		СписокВидовПлатежныхКарт = Новый СписокЗначений;
		
		Если ЭтотОбъект.ТаблицаПлатежныхКарт.Количество() > 1 И НЕ ГруппаЭлементовПоляСуммы.Видимость Тогда
			
			Итератор = 0;
			
			Для Каждого СтрокаТаблицыТерминалов Из ЭтотОбъект.ТаблицаПлатежныхКарт Цикл
				
				НазваниеКоманды = СтрШаблон("ОплатаКартой_%1", Итератор);
				СписокВидовПлатежныхКарт.Добавить(НазваниеКоманды, СтрокаТаблицыТерминалов.ВидОплаты);
				Итератор = Итератор + 1;
				
			КонецЦикла;
			
			Оповещение = Новый ОписаниеОповещения("ПослеВыбораВидаПлатежнойКарты", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВыборИзМеню(Оповещение, СписокВидовПлатежныхКарт, Элементы.ОплатаКартой);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Новый Структура("Значение", Команда.Имя);
	ПослеВыбораВидаПлатежнойКарты(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьВРежимОплатыНаКлиенте(НазначенныйРежим = Неопределено, БлокироватьРедактированиеЧека = Истина, Отказ = Ложь, ОповещениеПродолжения = Неопределено) Экспорт
	
	// Проверим, есть ли строки с марками, требующими запроса на ККТ.
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ТребуетсяПроверкаКодаМаркировки", Истина);
	МаркируемыеТовары = Объект.Товары.НайтиСтроки(ПараметрыПоиска);
	
	СтрокиСКодомМаркировки = Новый Массив;
	КодыДляПроверки = Новый Соответствие;
	Для Каждого СтрокаТовара Из МаркируемыеТовары Цикл
		Если Не ЗначениеЗаполнено(СтрокаТовара.КодМаркировки) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиСКодомМаркировки.Добавить(СтрокаТовара);
		КодыДляПроверки.Вставить(СтрокаТовара, СтрокаТовара.КодМаркировки);
		СтрокаТовара.КодМаркировки = "";
		
	КонецЦикла;
	
	Если СтрокиСКодомМаркировки.Количество() Тогда
		ПараметрыПроверкиКодовМаркировки = Новый Структура;
		ПараметрыПроверкиКодовМаркировки.Вставить("ЕстьОшибки", Ложь);
		ПараметрыПроверкиКодовМаркировки.Вставить("КодыДляПроверки", КодыДляПроверки);
		ПараметрыПроверкиКодовМаркировки.Вставить("СтрокиСКодомМаркировки", СтрокиСКодомМаркировки);
		ПараметрыПроверкиКодовМаркировки.Вставить("НазначенныйРежим", НазначенныйРежим);
		ПараметрыПроверкиКодовМаркировки.Вставить("БлокироватьРедактированиеЧека", БлокироватьРедактированиеЧека);
		ПараметрыПроверкиКодовМаркировки.Вставить("Отказ", Отказ);
		ПараметрыПроверкиКодовМаркировки.Вставить("ОповещениеПродолжения", ОповещениеПродолжения);
		ПроверитьКодыМаркировкиПередПробитием();
	Иначе
		ПереключитьВРежимОплатыНаКлиентеПродолжение(НазначенныйРежим, БлокироватьРедактированиеЧека, Отказ, ОповещениеПродолжения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьВРежимВводаТоваров()
	
	РежимРаботыСЧеком = РежимыРаботыСЧеком.ВводТоваров;
	ЭтоОперацияПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	ВсеСуммыПересчитаны = Ложь;
	ОтменитьВведенныеОплаты(ВсеСуммыПересчитаны);
	УстановитьВидимостьЭлементаФормы(Элементы.ПанельВидовОплат, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнформацияПокупателя, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCode, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОтправкаЧекаСводно, Истина);
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаКомандПереходаКОплате);
	ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьДоступностьЭлементовФормыПриПереключенииРежима(ЭтотОбъект,
		ЭтоОперацияПродажи, (Не ВсеСуммыПересчитаны));
	ВыключитьОтображениеЧекаПоОрганизациям();
	Если ИспользоватьПанельИзбранныхТоваров Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ПанельИзбранныхТоваров, Истина);
	КонецЕсли;
	
	ВывестиИнформациюНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.СписокТоваров);

	ЗакрытьПанельNFC();
	
	Если Не ЕстьНезаполненныеДанные() И ОсновнойПодборПлиточный И ЭтоОперацияПродажи Тогда
		ОткрытьПлиточныйИнтерфейсКаталога(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура АктивироватьГруппуВводаПромокода()
	УстановитьТолькоПросмотрЭлементаФормы(Элементы.ВведенныйПромокод, РежимКассыСамообслуживания);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВводПромокода, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаДобавитьПромокод, Ложь);
КонецПроцедуры

&НаКлиенте 
Процедура СкрытьГруппуВводаПромокода()
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВводПромокода, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаДобавитьПромокод, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОтображениеЧекаПоОрганизациям()
	
	ПереключитьНаСледующийЧек("НаСледующий");
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСписокЧековПродажи, Истина);
	Если РазличныеСНОВСпискеПокупок().Количество() > 1 Тогда
		ОплатаБезДеленияПоЧекам = Истина;
	КонецЕсли;
	Элементы.Товары.ОтборСтрок = Неопределено;
	ПересчитатьИтогиТабличнойЧастиТовары(Ложь);
	ПроинформироватьПользователяОКоличествеЧеков();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьОтображениеЧекаПоОрганизациям()
	
	ВыбраннаяОрганизация = Неопределено;
	ВыбраннаяСистемаНалогообложения = Неопределено;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСписокЧековПродажи, Ложь);
	Элементы.Товары.ОтборСтрок = Неопределено;
	ПересчитатьИтогиТабличнойЧастиТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаОплатуСертификатомЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИмяМетода = "ПереключитьНаОплатуСертификатом";
		РассчитатьСкидкиКлиент();
	Иначе
		ПереключитьНаОплатуСертификатом();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаОплатуСертификатом(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	ГруппаСлоевВспомогательнаяПанель = Элементы.ГруппаСлоевЛеваяВерхняяВспомогательнаяПанель;
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ГруппаСлоевВспомогательнаяПанель)
		= Элементы.ГруппаПоискСертификатов Тогда
		
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаДополнительноеУправлениеЧеком);
		
	Иначе
		Если ТаблицаПодарочныхСертификатов.Количество() = 0 Тогда
			ОткрытьФормуВыбораПодарочногоСертификата();
		Иначе
			ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаПоискСертификатов);
			ПолеСуммы = ПолучитьПоследнееВидимоеПолеСуммыСертификата();
			Если (Не ПолеСуммы = Неопределено) И Не СенсорныйЭкран Тогда
				ТекущийЭлемент = ПолеСуммы;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуПодарочногоСертификата(УникальныйИдентификаторСертификата, УдалитьСтрокуТаблицы = Истина)
	
	ИдентификаторСертификата = УникальныйИдентификаторСертификата;
	
	ЭтоСерийныйПодарочныйСертификат = Ложь;
	РазблокироватьСертификат = Ложь;
	
	ОтборПоИдентификатору = Новый Структура("УникальныйИдентификатор", ИдентификаторСертификата);
	СтрокиПоИдентификатору = ТаблицаПодарочныхСертификатов.НайтиСтроки(ОтборПоИдентификатору);
	
	Для Каждого СтрокаПоИдентификатору Из СтрокиПоИдентификатору Цикл
		Если СтрокаПоИдентификатору.ЭтоСерийныйПодарочныйСертификат Тогда
			
			ЭтоСерийныйПодарочныйСертификат = Истина;
			ОтборПоНомеру = Новый Структура("НомерСертификата, ПодарочныйСертификат", 
				СтрокаПоИдентификатору.НомерСертификата,
				СтрокаПоИдентификатору.ПодарочныйСертификат);
			СтрокиПоНомеру = ТаблицаПодарочныхСертификатов.НайтиСтроки(ОтборПоНомеру);
			РазблокироватьСертификат = СтрокиПоНомеру.Количество() = 1;
			
			НомерСертификата = СтрокаПоИдентификатору.НомерСертификата;
			ПодарочныйСертификат = СтрокаПоИдентификатору.ПодарочныйСертификат;
			
		КонецЕсли;
	КонецЦикла;
	
	УдалитьПодарочныйСертификат(ИдентификаторСертификата, УдалитьСтрокуТаблицы);
	ОчиститьДанныеПодарочногоСертификата(ЭтоСерийныйПодарочныйСертификат И РазблокироватьСертификат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммыОплатыПриРедактированииСертификатов()
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеОтменитьОплатуСертификатом = (ТаблицаПодарочныхСертификатов.Количество() = 0);
	ПараметрыПересчета.ПриИзмененииСуммыОплатыСертификатом = Истина;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеПодарочныеСертификаты(БезПересчетаСумм = Ложь)
	
	КоличествоПодарочныхСертификатов = ТаблицаПодарочныхСертификатов.Количество();
	Итератор = 0;
	Пока Итератор < КоличествоПодарочныхСертификатов Цикл
		ИндексСтроки = КоличествоПодарочныхСертификатов - Итератор - 1; 
		СтрокаСертификата = ТаблицаПодарочныхСертификатов.Получить(ИндексСтроки);
		ЭтоСерийныйПодарочныйСертификат = СтрокаСертификата.ЭтоСерийныйПодарочныйСертификат;
		УдалитьСтрокуПодарочногоСертификата(СтрокаСертификата.УникальныйИдентификатор, Ложь);
		Итератор = Итератор + 1;
	КонецЦикла;
	ТаблицаПодарочныхСертификатов.Очистить();
	Если БезПересчетаСумм Тогда
		СуммаОплаченоСертификатами = 0;
	Иначе
		ПересчитатьСуммыОплатыПриРедактированииСертификатов();
	КонецЕсли;
	УстановитьВидимостьКомандыУдаленияВсехСертификатов(Элементы.ГруппаУдалитьСертификаты, ТаблицаПодарочныхСертификатов);
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаОплатаСертификатами, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаСертификатами, Ложь);
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевЛеваяВерхняяВспомогательнаяПанель) = Элементы.ГруппаПоискСертификатов Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаДополнительноеУправлениеЧеком);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМаксимальныеСуммыСертификатов()
	Для Каждого СтрокаПодарочногоСертификата Из ТаблицаПодарочныхСертификатов Цикл
		ИмяРеквизита = "СуммаСертификата_" + СтрокаПодарочногоСертификата.УникальныйИдентификатор;
		РеквизитСуммы = Элементы.Найти(ИмяРеквизита);
		Если НЕ РеквизитСуммы = Неопределено Тогда
			СуммаТекущегоПоля = ЭтаФорма[ИмяРеквизита];
			Если Не РеквизитСуммы = Неопределено Тогда
				РеквизитСуммы.МаксимальноеЗначение = Макс(0, Мин(СуммаКОплате + СуммаТекущегоПоля, СтрокаПодарочногоСертификата.БалансСертификата));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьПанельВводаНаличных()
	
	Если ВертикальнаяОриентация И ИспользоватьПанельВводаНаличных Тогда
		Если Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевЛеваяВерхняяВспомогательнаяПанель) = Элементы.ПанельВводаНаличныхВертикальная Тогда
			ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ПанельВводаНаличныхВертикальная);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПереключитьНаВыборКонтрагента(ТекстПредупреждения)
	
	РезультатФункции = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент)
		И ОбщегоНазначенияРМККлиент.ЗапрещенаПредоплатаБезКонтрагента() Тогда
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Ложь);
		ПоказатьПанельВводаДанныхПокупателя();
		ПереключитьНаСтраницуПоискКарты();
		РезультатФункции = Истина;
		
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция ПоказатьОшибкуУдаленияПредоплатыРассрочки()
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	РезультатФункции = Ложь;
	Если ПриемАвансаПоЗаказу Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Ошибка удаления вида оплаты.'");
		ТекстОшибки = НСтр("ru = 'По заказ-наряду можно принять только аванс'");
		ПараметрыОшибки = Новый Структура("ЭтоПредупреждение", Истина);
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки, ПараметрыОшибки);
		
		РезультатФункции = Истина;
		
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

#Область ОбработкаКомандЦифровойПанели

&НаКлиенте
Процедура ПеревестиКурсорНаВводДробнойЧасти()
	
	Если Не ЭлементВводаСуммы = Неопределено Тогда
		ИмяЭлемента = ЭлементВводаСуммы.Имя;
		НачалоВыделения = 0;
		НачалоСтроки = 0;
		КонецВыделения = 0;
		КонецСтроки = 0;
		ЭлементВВодаСуммы.ПолучитьГраницыВыделения(НачалоСтроки, НачалоВыделения, КонецСтроки, КонецВыделения);
		СимволРазделителя = ИнтерфейсРМКСлужебныйКлиентСервер.РазделительДробнойЧасти();
		ПозицияРазделителя = СтрНайти(ЭлементВВодаСуммы.ТекстРедактирования, СимволРазделителя);
		Если АктивироватьЭлементВводаСуммаПриВозможности(ИмяЭлемента) Тогда
			Если ПозицияРазделителя > 0 И ПозицияРазделителя >= НачалоВыделения Тогда
				НоваяПозицияКурсора = ПозицияРазделителя + 1;
				ЭлементВВодаСуммы.УстановитьГраницыВыделения(НоваяПозицияКурсора, НоваяПозицияКурсора);
			Иначе
				ЭлементВВодаСуммы.УстановитьГраницыВыделения(НачалоВыделения, КонецВыделения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьЦифруВПолеСуммыОплаты(СимволЦифры)
	
	Если (Не ЭлементВводаСуммы = Неопределено) И ЭлементВводаСуммы.Доступность Тогда
		
		НачалоВыделения = 0;
		НачалоСтроки = 0;
		КонецВыделения = 0;
		КонецСтроки = 0;
		ВводСЦифровойКлавиатуры = Истина;
		Если РежимЦифровойПанели = РежимыЦифровойПанели.ВводСимволов Тогда
			ЭлементВВодаСуммы.ПолучитьГраницыВыделения(НачалоСтроки, НачалоВыделения, КонецСтроки, КонецВыделения);
			Если ЭтоПолеСтрокиЦифр(ЭлементВВодаСуммы) Тогда
				ЭлементВводаСуммы.УстановитьГраницыВыделения(КонецВыделения, КонецВыделения);
			КонецЕсли;
			ЭлементВводаСуммы.ВыделенныйТекст = СимволЦифры;
			ДлинаТекста = СтрДлина(ЭлементВводаСуммы.ТекстРедактирования);
			ЭлементВводаСуммы.УстановитьГраницыВыделения(ДлинаТекста + 1, ДлинаТекста + 1);
		Иначе
			ИмяЭлемента = ЭлементВводаСуммы.Имя;
			СимволРазделителя = ИнтерфейсРМКСлужебныйКлиентСервер.РазделительДробнойЧасти();
			ПозицияРазделителя = СтрНайти(ЭлементВВодаСуммы.ТекстРедактирования, СимволРазделителя);
			ЭлементВВодаСуммы.ПолучитьГраницыВыделения(НачалоСтроки, НачалоВыделения, КонецСтроки, КонецВыделения);
			ВводДробнойЧасти = (НачалоВыделения > ПозицияРазделителя);
			ЭлементВВодаСуммы.ВыделенныйТекст = СимволЦифры;
			ДлинаТекста = СтрДлина(ЭлементВВодаСуммы.ТекстРедактирования);
			ПозицияРазделителя = СтрНайти(ЭлементВВодаСуммы.ТекстРедактирования, СимволРазделителя);
			Если АктивироватьЭлементВводаСуммаПриВозможности(ИмяЭлемента) Тогда
				Если ВводДробнойЧасти Тогда
					ПозицияВыделения = Мин(ДлинаТекста + 1, НачалоВыделения + 1);
					ЭлементВВодаСуммы.УстановитьГраницыВыделения(ПозицияВыделения, ПозицияВыделения);
				Иначе
					ЭлементВВодаСуммы.УстановитьГраницыВыделения(ПозицияРазделителя, ПозицияРазделителя);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ВводСЦифровойКлавиатуры = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоПолеСтрокиЦифр(ЭлементПроверки)
	РезультатФункции = Ложь;
	Если ЭлементПроверки = Элементы.РучнойШтрихкодДляПоиска Или ЭлементПроверки = Элементы.ШтрихкодДляПоиска
			Или ЭлементПроверки = Элементы.НомерСертификата Тогда
		РезультатФункции = Истина;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Процедура ОчиститьТекстРедактированияПоляФормы()
	
	Если (Не ЭлементВводаСуммы = Неопределено) И ЭлементВводаСуммы.Доступность Тогда
		ВводСЦифровойКлавиатуры = Истина;
		ИмяЭлемента = ЭлементВводаСуммы.Имя;
		ДлинаТекста = СтрДлина(ЭлементВводаСуммы.ТекстРедактирования);
		ЭлементВводаСуммы.УстановитьГраницыВыделения(1,ДлинаТекста+1);
		ЭлементВводаСуммы.ВыделенныйТекст = "";
		АктивироватьЭлементВводаСуммаПриВозможности(ИмяЭлемента);
		ВводСЦифровойКлавиатуры = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция АктивироватьЭлементВводаСуммаПриВозможности(ИмяЭлемента)
	
	РезультатФункции = Ложь;
	Если Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
		СкрытьЦифровуюПанельДляВводаСумм();
	Иначе
		ТекущийЭлемент = ЭлементВводаСуммы;
		РезультатФункции = Истина;
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьКомандуЦифровойПанелиПриВводеСуммыОплаты(Команда)
	
	ИмяКоманды = Команда.Имя;
	Если ИмяКоманды = "ЦифроваяПанельОчистить" Тогда
		ОчиститьТекстРедактированияПоляФормы();
	ИначеЕсли Лев(ИмяКоманды, 19) = "ЦифроваяПанельЦифра" Тогда
		Цифра = Прав(ИмяКоманды, 1);
		ВставитьЦифруВПолеСуммыОплаты(Цифра);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКомандуЦифровойПанелиДанныеПокупателя(Команда)
	
	ОбластьДанныхПокупателя = Элементы.ГруппаСлоевДанныеПокупателяОсновнаяОбласть;
	ОсновнойТекущийСлой = ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ОбластьДанныхПокупателя);
	ДополнительныйТекущийСлой = ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевДанныеПокупателяДополнительнаяОбласть);
	Если ДополнительныйТекущийСлой = Элементы.ГруппаПодтверждениеСМС Тогда
		ТекстВвода = КодПроверкиИзSMS;
	Иначе
		ТекстВвода = ?(ЭлементВводаДанныхПокупателя = Неопределено, "", ЭлементВводаДанныхПокупателя.ТекстРедактирования);
	КонецЕсли;
	
	ИмяКоманды = Команда.Имя;
	Если ИмяКоманды = "ЦифроваяПанельПоиск" Тогда
		ОбработатьШтрихкодКлиент(СтрокаПоискаКарты);
		Возврат;
	ИначеЕсли ИмяКоманды = "ЦифроваяПанельОчистить" Тогда
		Если Не ДополнительныйТекущийСлой = Элементы.ГруппаПодтверждениеСМС
			И (Не РежимКассыСамообслуживания)
			И (ОсновнойТекущийСлой = Элементы.ГруппаПоискКарты Или ОсновнойТекущийСлой = Элементы.ГруппаКартаНеНайдена)
			И ТекстВвода = "" Тогда
			
			ТекстВвода = "*";
			
		Иначе
			
			ТекстВвода = "";
			
		КонецЕсли;
	Иначе
		Цифра = Прав(ИмяКоманды, 1);
		Если ДополнительныйТекущийСлой = Элементы.ГруппаПодтверждениеСМС Тогда
			ТекстВвода = СокрЛП(ТекстВвода) + Цифра;
		ИначеЕсли (Не ТекстВвода = "") И ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоПолеТелефонаСМаской(ЭлементВводаДанныхПокупателя) Тогда
			ТекстВвода = ТолькоЦифрыТелефонаБезКодаСтраны(ТекстВвода) + Цифра;
		ИначеЕсли ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоПолеДатыСМаской(ЭлементВводаДанныхПокупателя) Тогда
			ТекстВвода = ИнтерфейсРМКСлужебныйКлиентСервер.ДобавитьЦифруКТекстуДаты(ТекстВвода, Цифра);
		Иначе
			ТекстВвода = СокрЛП(ТекстВвода) + Цифра;
		КонецЕсли;
		Если Элементы.ЦифроваяПанельПоиск.Видимость Тогда
			ТекущийЭлемент = Элементы.ЦифроваяПанельПоиск;
		ИначеЕсли ОсновнойТекущийСлой = Элементы.ГруппаОтправкаЧека Тогда
			УстановитьАктивностьНаКнопкеОтправкиПробитияЧека();
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныйТекущийСлой = Элементы.ГруппаПодтверждениеСМС Тогда
		КодПроверкиИзSMS = ТекстВвода;
		Введено4Цифры = СтрДлина(СокрЛП(ТекстВвода)) = 4;
		Если Введено4Цифры Тогда
			ТекущийЭлемент = Элементы.ОтправитьSMSСКодомПроверки;
			ПроверитьВведенныйКодИзSMS();
		КонецЕсли;
	ИначеЕсли Не ЭлементВводаДанныхПокупателя = Неопределено Тогда
		
		ДлинаТекста = СтрДлина(ЭлементВводаДанныхПокупателя.ТекстРедактирования);
		ЭлементВводаДанныхПокупателя.УстановитьГраницыВыделения(1, ДлинаТекста + 1);
		ЭлементВводаДанныхПокупателя.ВыделенныйТекст = ТекстВвода;
		Если ТекстВвода = "" И Не ЭлементВводаДанныхПокупателя = Элементы.ОтправкаЧекаТелефон Тогда
			ТекущийЭлемент = ЭлементВводаДанныхПокупателя;
		КонецЕсли;
		
	КонецЕсли;
	
	НастроитьКнопкиЦифровойПанели();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТолькоЦифрыТелефонаБезКодаСтраны(ТекстПоля)
	
	КодСтраны = ИнтерфейсРМКСлужебныйКлиентСервер.ТелефонныйКодСтраны();
	ДлинаКодаСтраны = СтрДлина(КодСтраны);
	ТекстТолькоЦифры = СокрЛП(ТекстПоля);
	Если СтрДлина(ТекстТолькоЦифры) >= ДлинаКодаСтраны И Лев(ТекстТолькоЦифры, ДлинаКодаСтраны) = КодСтраны Тогда
		ТекстТолькоЦифры = Сред(ТекстТолькоЦифры, ДлинаКодаСтраны + 1);
	КонецЕсли;
	Возврат ИнтерфейсРМКСлужебныйКлиентСервер.ТолькоЦифры(ТекстТолькоЦифры);
	
КонецФункции

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьКомандыУдаленияВсехСертификатов(ЭлементГруппаУдаления, ТаблицаСертификатов)
	УстановитьВидимостьЭлементаФормы(ЭлементГруппаУдаления, ТаблицаСертификатов.Количество() > 1);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКнопкиЦифровойПанелиДляВводаСумм(ТребуетсяРазделитель)
	Элементы.ЦифроваяПанельПоиск.Отображение = ОтображениеКнопки.Текст;
	Элементы.ЦифроваяПанельПоиск.ЦветФона = Новый Цвет;
	УстановитьВидимостьЭлементаФормы(Элементы.ЦифроваяПанельПоиск, ТребуетсяРазделитель);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКнопкиЦифровойПанелиВРежимеДанныхПокупателя()
	Элементы.ЦифроваяПанельПоиск.Отображение = ОтображениеКнопки.Картинка;
	Элементы.ЦифроваяПанельПоиск.Картинка = БиблиотекаКартинок["Search"];
	Элементы.ЦифроваяПанельПоиск.ЦветФона = Новый Цвет(250, 204, 31);
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьЦифровуюПанельДляВводаСумм(Элемент, ВводСимволов = Ложь)
	
	ПереключениеЦифровойПанели = Истина;
	ВводСЦифровойКлавиатуры = Истина;
	ДлинаТекста = СтрДлина(Элемент.ТекстРедактирования);
	Элемент.УстановитьГраницыВыделения(1,ДлинаТекста+1);
	Элемент.ВыделенныйТекст = Элемент.ТекстРедактирования;
	Элемент.УстановитьГраницыВыделения(1,ДлинаТекста+1);
	ВводСЦифровойКлавиатуры = Ложь;
	
	Если РежимВводаСимволовИСумм(РежимЦифровойПанели, РежимыЦифровойПанели) Тогда
		СкрытьЦифровуюПанельДляВводаСумм();
	Иначе
		ВключитьЦифровуюПанельДляВводаСумм(Элемент, ВводСимволов);
	КонецЕсли;
	ТекущийЭлемент = Элемент;
	ПереключениеЦифровойПанели = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоВводШтрихкода()
	РезультатФункции = (ЭлементВводаСуммы = Элементы.РучнойШтрихкодДляПоиска
			Или ЭлементВводаСуммы = Элементы.ШтрихкодДляПоиска);
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Функция ЭтоУвеличенныйВидВРежимеКассираИГоризонтальнойОриентации()
	РезультатФункции = (ВидОтображения = ПредопределенноеЗначение("Перечисление.ВидыОтображения.Увеличенный")
						И Не (РежимКассыСамообслуживания Или ВертикальнаяОриентация));
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Функция ТребуетсяВсегдаСжатиеИтоговВГоризонтальнойОриентации()
	РезультатФункции = (ЭлементВводаСуммы = Элементы.НомерСертификата 
			Или (ЭтоВводШтрихкода() И ЭтоУвеличенныйВидВРежимеКассираИГоризонтальнойОриентации()));
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Процедура ВключитьЦифровуюПанельДляВводаСумм(Элемент, ВводСимволов)
	
	РежимЦифровойПанели = ?(ВводСимволов, РежимыЦифровойПанели.ВводСимволов, РежимыЦифровойПанели.ВводСуммОплаты);
	ЭлементВводаСуммы = Элемент;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаЦифроваяПанель, Истина);
	НастроитьКнопкиЦифровойПанелиДляВводаСумм(Не ВводСимволов);
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаКомандЦифроваяПанель);
	НастроитьКнопкиЦифровойПанели();
	УстановитьВидимостьДополнительнойИнформацииВРежимеЦифровойПанели(Ложь);
	ТребуетсяСжатиеВГоризонтальнойОриентации = ТребуетсяВсегдаСжатиеИтоговВГоризонтальнойОриентации();
	СжатьПанельИтоговПоЧекам(ТребуетсяСжатиеВГоризонтальнойОриентации);
	
	ОбновлятьСуммуАванса = (ПриемАванса И СуммаБезСкидки = 0);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьЦифровуюПанельДляВводаСумм()
	
	ОбновитьДоступностьИзмененияКоличества = (ЭлементВводаСуммы = Элементы.ТекущийТоварКоличество);
	РежимЦифровойПанели = РежимыЦифровойПанели.Пустой;
	ОбновлятьСуммуАванса = Ложь;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаЦифроваяПанель, Ложь);
	УстановитьВидимостьДополнительнойИнформацииВРежимеЦифровойПанели(Истина);
	ВосстановитьПанельИтоговПоЧекам();
	
	НастроитьКнопкиЦифровойПанелиВРежимеДанныхПокупателя();
	ВернутьОсновнуюКоманднуюПанельЧека();
	Если ОбновитьДоступностьИзмененияКоличества Тогда
		ОбновитьДоступностьИзмененияКоличества();
	КонецЕсли;
	ОбновитьКоличествоВРедактируемойСтроке();
	ЭлементВводаСуммы = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьИзмененияКоличества()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если Не ТекущаяСтрока = Неопределено Тогда
		НастроитьДоступностьКомандИзмененияКоличества(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости()
	
	Если РежимВводаСимволовИСумм(РежимЦифровойПанели, РежимыЦифровойПанели) Тогда
		СкрытьЦифровуюПанельДляВводаСумм();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьЭлементВводаСуммы(Элемент, ВводСимволов = Ложь)
	
	НовыйРежимЦифровойПанели = ?(ВводСимволов, РежимыЦифровойПанели.ВводСимволов, РежимыЦифровойПанели.ВводСуммОплаты);
	Если РежимВводаСимволовИСумм(РежимЦифровойПанели, РежимыЦифровойПанели) 
		И Не (ЭлементВводаСуммы = Элемент И РежимЦифровойПанели = НовыйРежимЦифровойПанели) Тогда
		
		ТребуетсяПовышениеПрав = Ложь;
		ОбновитьКоличествоВРедактируемойСтроке(ТребуетсяПовышениеПрав);
		Если ТребуетсяПовышениеПрав Тогда
			ТекущийЭлемент = ЭлементВводаСуммы;
		Иначе
			
			Если Не НовыйРежимЦифровойПанели = РежимЦифровойПанели Тогда
				РежимЦифровойПанели = НовыйРежимЦифровойПанели;
				УстановитьВидимостьЭлементаФормы(Элементы.ЦифроваяПанельПоиск, (Не ВводСимволов));
			КонецЕсли;
			ЭлементВводаСуммы = Элемент;
			
		КонецЕсли;
	КонецЕсли;
	
	Если РежимРаботыСЧеком = РежимыРаботыСЧеком.Оплата Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ПереходКОплате Тогда
		НастроитьДоступностьПробитьЧек(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьПереключитьЦифровуюПанель(Элемент, ВводСимволов = Ложь)
	
	Если СенсорныйЭкран И Не РежимВводаСимволовИСумм(РежимЦифровойПанели, РежимыЦифровойПанели) Тогда
		ПереключитьЦифровуюПанельДляВводаСумм(Элемент, ВводСимволов);
	Иначе
		СменитьЭлементВводаСуммы(Элемент, ВводСимволов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьЭлементВводаДанныхПокупателя(Элемент)
	Если Не ЭлементВводаДанныхПокупателя = Элемент Тогда
		ОбработатьПотерюФокусаДатыРождения();
		ЭлементВводаДанныхПокупателя = Элемент;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПотерюФокусаДатыРождения()
	Если (Не ЭлементВводаДанныхПокупателя = Неопределено)
			И ЭлементВводаДанныхПокупателя = Элементы.НоваяКартаДатаРождения Тогда
		ИнтерфейсРМКСлужебныйКлиент.СкорректироватьДатуРожденияПриНеобходимости(ЭтотОбъект, "НоваяКартаДатаРождения");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВернутьОсновнуюКоманднуюПанельЧека()
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатойИлиКоррекцией(ЭтотОбъект) Тогда
		Если СуммаОплаченоСертификатамиНСПК > 0 Тогда
			ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаКомандПробитияЧекаНСПК);
		Иначе
			ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаКомандПробитияЧека);
		КонецЕсли;
	ИначеЕсли РежимРаботыСЧеком = РежимыРаботыСЧеком.Проверка Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаКомандПродолженияПослеПробития);
	ИначеЕсли Не РежимРаботыСЧеком = РежимыРаботыСЧеком.ПродолжениеПослеПробития Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаКомандПереходаКОплате);
		ИнтерфейсРМКСлужебныйКлиент.НастроитьДоступностьРежимаОплаты(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПеречисленияФормы()
	ИнициализироватьРежимыЦифровойПанели();
	ИнициализироватьРежимыРаботыСЧеком();
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьКлиентскиеПеречисленияФормы()
	ИнтерфейсРМКСлужебныйКлиент.ИнициализироватьТипыПостроенияПлитки(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРежимыЦифровойПанели()

	РежимыЦифровойПанели = Новый Структура;
	РежимыЦифровойПанели.Вставить("Пустой", 0);
	РежимыЦифровойПанели.Вставить("ДанныеПокупателя", 1);
	РежимыЦифровойПанели.Вставить("ВводСуммОплаты", 2);
	РежимыЦифровойПанели.Вставить("ВводСимволов", 3);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РежимВводаСимволовИСумм(РежимЦифровойПанели, РежимыЦифровойПанели)
	
	РезультатФункции = Ложь;
	Если РежимЦифровойПанели = РежимыЦифровойПанели.ВводСуммОплаты
			Или РежимЦифровойПанели = РежимыЦифровойПанели.ВводСимволов Тогда
		РезультатФункции = Истина;
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьРежимыРаботыСЧеком()
	
	РежимыРаботыСЧеком = Новый Структура;
	РежимыРаботыСЧеком.Вставить("ЧекПустой", 0);
	РежимыРаботыСЧеком.Вставить("ВводТоваров", 1);
	РежимыРаботыСЧеком.Вставить("ВозвратКоррекция", 2);
	РежимыРаботыСЧеком.Вставить("ПереходКОплате", 3);
	РежимыРаботыСЧеком.Вставить("Оплата", 4);
	РежимыРаботыСЧеком.Вставить("ПродолжениеПослеПробития", 5);
	РежимыРаботыСЧеком.Вставить("Проверка", 6);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПоследнееВидимоеПолеСуммыСертификата()
	
	РезультатФункции = Неопределено;
	
	ИмяГруппыОплаты = "ГруппаСуммаОплатаСертификатом_";
	Для Каждого ГруппаСуммы Из Элементы.ГруппаСуммаОплатаСертификатами.ПодчиненныеЭлементы Цикл
		Если СтрНайти(ГруппаСуммы.Имя, ИмяГруппыОплаты) = 1 И ГруппаСуммы.Видимость Тогда
			УникальнаяЧастьИмени = Сред(ГруппаСуммы.Имя, СтрДлина(ИмяГруппыОплаты) + 1);
			ИмяПоляСуммы = СтрШаблон("СуммаСертификата_%1", УникальнаяЧастьИмени);
			Если Не Элементы.Найти(ИмяПоляСуммы) = Неопределено Тогда
				РезультатФункции = Элементы[ИмяПоляСуммы];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ПереключитьВРежимОплатыНаКлиентеПродолжение(НазначенныйРежим, БлокироватьРедактированиеЧека, Отказ, ОповещениеПродолжения)
	
	ПереключитьРежимПоказаОстатков(Ложь);
	ПереключитьРежимНаПоказСкидок(Ложь);
	ЭтоПроверкаЧека = (НазначенныйРежим = РежимыРаботыСЧеком.Проверка);
	
	ЭтоОперацияПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	ЭтоПродажаПоЗаказу = ЗначениеЗаполнено(Объект.ЗаказПокупателя) И ЭтоОперацияПродажи;
	Если ЭтоПродажаПоЗаказу И Не ЭтоЧекКоррекции И Не ЭтоПроверкаЧека Тогда
		ТекстОшибки = "";
		ПроверитьСоответствиеЗаказу(ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстЗаголовка = НСтр("ru = 'Контроль заказа.'");
			ПараметрыОшибки = Новый Структура("ЭтоПредупреждение", Истина);
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки, ПараметрыОшибки);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НеобходимВводСклада И Не ЭтоПроверкаЧека Тогда
		Для Каждого СтрокаТоваров Из Объект.Товары Цикл
			Если НЕ СтрокаТоваров.ТипНоменклатуры = ОбщегоНазначенияРМККлиент.ТипНоменклатурыТовар() Тогда
				Продолжить;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаТоваров.ТорговыйОбъект) Тогда
				Элементы.Товары.ТекущаяСтрока = СтрокаТоваров.ПолучитьИдентификатор();
				ТекстОшибки = "";
				ТекстЗаголовка = НСтр("ru = 'Укажите склад.'");
				ПараметрыОшибки = Новый Структура("ЭтоПредупреждение", Истина);
				ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки, ПараметрыОшибки);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НазначенныйРежим = Неопределено Тогда
		Если БлокироватьРедактированиеЧека Тогда
			РежимРаботыСЧеком = РежимыРаботыСЧеком.ПереходКОплате;
		Иначе
			РежимРаботыСЧеком = РежимыРаботыСЧеком.ВозвратКоррекция;
		КонецЕсли;
	Иначе
		РежимРаботыСЧеком = НазначенныйРежим;
	КонецЕсли;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнформацияПокупателя, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаQRCode, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОтправкаЧекаСводно, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ПанельВидовОплат, Истина);
	Если НЕ ЗначениеЗаполнено(ИдентификаторКорзиныНСПК) Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаКомандПробитияЧека);
	Иначе
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаКомандПробитияЧекаНСПК);
	КонецЕсли;
	
	Если БлокироватьРедактированиеЧека Тогда
		ЭтоОперацияПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
		ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьДоступностьЭлементовФормыПриПереключенииРежима(ЭтотОбъект,
			ЭтоОперацияПродажи);
		ВключитьОтображениеЧекаПоОрганизациям();
		Если ИспользоватьПанельИзбранныхТоваров Тогда
			УстановитьВидимостьЭлементаФормы(Элементы.ПанельИзбранныхТоваров, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ОткрытыСообщенияОбОшибках =
		(ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ГруппаИнфоОшибка);
	Если ОткрытыСообщенияОбОшибках Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуОплат();
	Если Не ЭтоОперацияПродажи Тогда
		РассчитатьСуммыОплаты();
	КонецЕсли;
	НастроитьДоступностьПробитьЧек();
	АктивироватьNFCСсылку();
	
	Если Не РежимРаботыСЧеком = РежимыРаботыСЧеком.Проверка Тогда
		ВывестиИнформациюНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.Оплата);
	КонецЕсли;
	
	Если Не ОповещениеПродолжения = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПродолжения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоПодбор(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Пол = 0) Экспорт
	
	ТекстДляАвтоПодбора = СокрЛП(Текст);
	Если СтрДлина(ТекстДляАвтоПодбора) < 1 Тогда
		Возврат;
	КонецЕсли;

	ДанныеВыбора 			= Новый СписокЗначений;    
	ДанныеКлассификатора    = Новый Массив;
	ДанныеФИО  				= Новый Структура;
	
	ДанныеФИО.Вставить("Фамилия",       "");
	ДанныеФИО.Вставить("Имя",           "");
	ДанныеФИО.Вставить("Отчество",      "");
	ДанныеФИО.Вставить("Представление", Текст);
	
	ДанныеПредставления = СтрРазделить(ТРег(Текст), " ", Ложь);
	
	Если ДанныеПредставления.Количество() > 2 Тогда

		ДанныеФИО.Имя      = ДанныеПредставления[0];
		ДанныеФИО.Фамилия  = ДанныеПредставления[1];
		ДанныеФИО.Отчество = ДанныеПредставления[2];
		
		ВидДанных          = "Отчество";
		
	ИначеЕсли ДанныеПредставления.Количество() = 2 И Прав(Текст, 1) = " " Тогда

		ДанныеФИО.Имя      = ДанныеПредставления[0];
		ДанныеФИО.Фамилия  = ДанныеПредставления[1];
		
		ВидДанных          = "Отчество";
		
	ИначеЕсли ДанныеПредставления.Количество() = 2 Тогда

		ДанныеФИО.Имя      = ДанныеПредставления[0];
		ДанныеФИО.Фамилия  = ДанныеПредставления[1];
		
		ВидДанных          = "Фамилия";
		
	ИначеЕсли ДанныеПредставления.Количество() = 1 И Прав(Текст, 1) = " " Тогда

		ДанныеФИО.Имя  	   = ДанныеПредставления[0];
		ДанныеПредставления.Добавить("");
		
		ВидДанных          = "Фамилия";
		
	Иначе

		ВидДанных          = "Имя";
		ДанныеФИО.Имя  	   = ТРег(СокрЛП(Текст));
		
	КонецЕсли;
	
	Если ВидДанных <> "Отчество" Тогда

		МодульПодборФИОКлиент 	= ОбщегоНазначенияКлиент.ОбщийМодуль("ПодборФИОКлиент");
		ДанныеВидаДанных 		= МодульПодборФИОКлиент.Подобрать(ВидДанных, ДанныеФИО, 0);
		
		Для Каждого ЗначениеВидаДанных Из ДанныеВидаДанных Цикл
			ДанныеПредставления[ДанныеПредставления.Количество()-1] = ЗначениеВидаДанных;
			ДанныеКлассификатора.Добавить(СтрСоединить(ДанныеПредставления, " "));
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ЗначениеКлассификатора Из ДанныеКлассификатора Цикл
		ДанныеВыбора.Добавить(ЗначениеКлассификатора, ЗначениеКлассификатора);
	КонецЦикла;
	
	Если ДанныеВыбора.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
 
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОчиститьЛишниеДанныеПриКопированииПродажи()
	
	ПустойРезерв = Метаданные.ОпределяемыеТипы.РезервРМК.Тип.ПривестиЗначение();
	Для каждого СтрокаТовара Из Объект.Товары Цикл
		СтрокаТовара.КодМаркировки = "";
		СтрокаТовара.Штрихкод = "";
		СтрокаТовара.КонтрольнаяМарка = "";
		СтрокаТовара.КонтрольнаяМаркаОбработана = Ложь;
		СтрокаТовара.Оплачена = Ложь;
		СтрокаТовара.ТоварКЗамене = Ложь;
		СтрокаТовара.Резерв = ПустойРезерв;
		Если СтрокаТовара.УникальностьСерии Тогда
			СтрокаТовара.Серия = Неопределено;
		КонецЕсли;
	КонецЦикла;
	КопированиеПродажи = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьОшибкуОпределенияНастройкиРМКДЛяРежимаКСО(Отказ, ДанныеПроверки)
	ДанныеПроверки.ОшибкаЗапуска = "НастройкаКСО";
	ДанныеПроверки.ТекстЗаголовка = НСтр("ru = 'Настройки РМК.'");
	ДанныеПроверки.ТекстСообщения = НСтр("ru = 'Рабочее место кассира не настроено для 
		|запуска в режиме ""Кассы самообслуживания"".
		|Обратитесь к администратору системы.'");
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура НастроитьРежимКассыСамообслуживанияПервоначально()
	Если РежимКассыСамообслуживания Тогда
		ИнтерфейсРМКСлужебный.НастроитьПервоначальныйИнтерфейсРежимаКассыСамообслуживания(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьЧекНаКлиенте()
	
	КопированиеПродажи = Истина;
	РазморозитьФормуПослеПробитияЧека();
	ОтменитьПримененныеБонусы(Ложь);
	ОтменитьСкидки(Истина);
	ОпределитьИспользованиеАвтоматическихСкидок();
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		ОбщегоНазначенияРМККлиентСервер.УстановитьНомерКартинкиСтрокиТовара(СтрокаТовара);
	КонецЦикла;
	ЕстьНеЗаполненныеДанные = ЕстьНезаполненныеДанные();
	ОбработатьИзменениеТаблицыТоваровНаКлиенте(Не ЕстьНеЗаполненныеДанные);
	ЗарегистрироватьНовуюПродажу();
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбщая Тогда
		УстановитьДоступностьЭлементаФормы(Элементы.УдалитьЧек, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ВвестиКомментарийКЧеку, Истина);
	КонецЕсли;
	ОтказОтОплатыБонусами = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКомандыУдалитьЧек(ЗначениеВРежимеКассира = Неопределено)
	
	Если РежимКассыСамообслуживания Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.УдалитьЧек, Не РежимРаботыСЧеком = РежимыРаботыСЧеком.ЧекПустой);
	ИначеЕсли Не ЗначениеВРежимеКассира = Неопределено Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.УдалитьЧек, ЗначениеВРежимеКассира);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьПредыдущийСлойПанелиОплаты(ТекущийАктивныйСлой)
	
	ПредыдущийСлой = Элементы.ОбластьОперативногоУправленияЧеком;
	Если Не (ПредыдущийСлойДоДанныхПокупателя = Неопределено Или ПредыдущийСлойДоДанныхПокупателя = ТекущийАктивныйСлой) Тогда
		ПредыдущийСлой = ПредыдущийСлойДоДанныхПокупателя;
	КонецЕсли;
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, ПредыдущийСлой);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПарольКассираКлиент()
	
	СкрытьОшибкуЗаменыПравПриНеобходимости();
	ВернутьСостояниеДоНачалаОперации();
	ТекущаяОперация = "";
	ВернутьПредыдущийСлойПанелиОплаты(Элементы.ГруппаЗаменаПрав);
	ГруппаОсновнаяКоманднаяПанель = Элементы.ГруппаСлоевОсновнаяКоманднаяПанельУправленияЧеком;
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ГруппаОсновнаяКоманднаяПанель)
				= Элементы.ГруппаКомандПродолжитьБезРасчета Тогда
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКомандПродолжитьБезРасчета, Истина);
	Иначе
		НастроитьДоступностьЭлементовПриПоискеПоШтрихкоду(Истина);
	КонецЕсли;
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатой(ЭтотОбъект) Тогда
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Ложь);
	КонецЕсли;
	СкрытьКомандуВыходаПриНеобходимости();
	
	Если Не ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатойИлиКоррекцией(ЭтотОбъект) Тогда
		ИнтерфейсРМКСлужебныйКлиент.НастроитьДоступностьРежимаОплаты(ЭтотОбъект);
	КонецЕсли;
	
	ОткрытыСообщенияОбОшибках
		= (ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ГруппаИнфоОшибка);
	
	Если НЕ ОткрытыСообщенияОбОшибках Тогда
		Если ОжидатьВводМарки Тогда
			УстановитьФокусНаТовареТребующемВводаМарки();
			ТоварыПриАктивизацииСтроки(Элементы.Товары);
		Иначе
			ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
			Если Не ЕстьНезаполненныеДанные() И ОсновнойПодборПлиточный
					И ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыДоОплаты(ЭтотОбъект) Тогда
				ОткрытьПлиточныйИнтерфейсКаталога(Неопределено);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ПогаситьСветовойСигналОбОшибкеНаДисплее();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуПоискаТовараПоШтрихкоду(ПараметрыШтрихкода)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	КонецЕсли;
	ШтрихкодУрезанный = СтрШаблон("%1%2", Лев(ПараметрыШтрихкода.Штрихкод, 25),
		?(СтрДлина(ПараметрыШтрихкода.Штрихкод) > 25, "...", ""));
	ТекстЗаголовка = НСтр("ru = 'Товар с указанным штрихкодом не найден.'");
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Не найден товар по штрихкоду: %1'"), ШтрихкодУрезанный);
	ПараметрыОшибки = Новый Структура();
	ПараметрыОшибки.Вставить("ЭтоПредупреждение", Истина);
	ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения, ПараметрыОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуПолученияКартыКлиента(ТекстОшибки)
	
	УстановитьДоступностьКомандПанелиПокупателя(Ложь);
	ПараметрыОшибки = Новый Структура("НеВызыватьЗаменуПрав", Истина);
	ТекстЗаголовка = НСтр("ru = 'Ошибка получения карт клиента.'");
	ТекстСообщения = ТекстОшибки;
	ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения, ПараметрыОшибки);
	
КонецПроцедуры

&НаКлиенте
Функция ДоступнаОтменаОперацииЗаменыПрав()
	
	Возврат (ТекущаяОперация = "УдалитьСтрокуРМК"
			Или ТекущаяОперация = "ОткрытиеСлужебныхДействийКСО"
			Или ТекущаяОперация = "УдалитьЧекРМК"
			Или ТекущаяОперация = "ОтложитьЧекРМК"
			Или ТекущаяОперация = "ПродолжитьЧекРМК"
			Или ТекущаяОперация = "ВводВесаТовара"
			Или ТекущаяОперация = "ПродолжитьБезРасчетаСкидок"
			Или ТекущаяОперация = "ИзменениеКоличестваВМеньшуюСторону"
			Или ТекущаяОперация = "УменьшениеКоличестваНаЕдиницу"
			Или ТекущаяОперация = "ИзменениеОстаткаЧастичноеВыбытиеРМК");
	
КонецФункции

&НаКлиенте
Процедура ВернутьСостояниеДоНачалаОперации()

	Если ТекущаяОперация = "ИзменениеКоличестваВМеньшуюСторону" Тогда
			ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
		Если Не ТекущаяСтрока = Неопределено Тогда
			ТекущийТоварКоличество = ТекущаяСтрока.Количество;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьИзменениеЭтапаРаботыСЧекомПриИзмененииОплаты()
	УстановитьЭтапРаботыСЧеком();
	ЭтоОперацияПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьДоступностьМаркетинговыхКомандПоЭтапуРаботыСЧеком(ЭтотОбъект,
		ЭтоОперацияПродажи);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЭтапРаботыСЧеком()
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатой(ЭтотОбъект) Тогда
		Если (СуммаЗаполненныхОплат - СуммаОплаченоЗачетАванса) > 0
				Или СуммаОплаченоБонусами > 0 Или ПробитыеЧеки.Количество() > 0 Тогда
				
			РежимРаботыСЧеком = РежимыРаботыСЧеком.Оплата;
			
		Иначе
			
			РежимРаботыСЧеком = РежимыРаботыСЧеком.ПереходКОплате;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьПредыдущееЗначениеТекстаДаты(ЭлементВводаДаты)
	ДлинаТекстаДаты = 10;
	ЭлементВводаДаты.УстановитьГраницыВыделения(1,ДлинаТекстаДаты + 1);
	ЭлементВводаДаты.ВыделенныйТекст = ТекстДатыРожденияСозданиеКарты;
КонецПроцедуры

&НаКлиенте
Функция ПараметрыРазмеровКомандУправленияЧеком(ВысотаКоманды, ШиринаКоманды)
	
	ПараметрыРазмеров = Новый Структура;
	ПараметрыРазмеров.Вставить("ВысотаКоманды", ВысотаКоманды);
	ПараметрыРазмеров.Вставить("ШиринаКоманды", ШиринаКоманды);
	ПараметрыРазмеров.Вставить("ВысотаКомандыОперации", ВысотаКоманды);
	ПараметрыРазмеров.Вставить("ШиринаКомандыОперации", ШиринаКоманды);
	
	Возврат ПараметрыРазмеров;
	
КонецФункции

&НаКлиенте
Процедура ЗаблокироватьОплатуИПробитиеЧека()
	УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧек, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ПробитьЧекНСПК, Ложь);
	УстановитьДоступностьЭлементаФормы(Элементы.ПерейтиКОплате, Ложь);
КонецПроцедуры

&НаСервере
Процедура СерверныйВызов()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыйтиИзРежимаПлитки()
	ПереключатьсяВРежимПлитки = Ложь;
	Если РежимПлитки Тогда
		ПереключитьНаРежимПлиткиИзПалитры();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ОткрытаСтраницаИнфоОшибка()
	
	РезультатФункции
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ГруппаИнфоОшибка;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция ОткрытаСтраницаНайтиПоШтрихкоду()
	
	РезультатФункции
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ГруппаНайтиПоШтрихкоду;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция ОткрытаСтраницаНайтиТоварВЧеке()
	
	РезультатФункции
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ГруппаНайтиВЧеке;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция ОткрытаСтраницаПоискаТовара()
	Возврат (Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоискТовара);
КонецФункции

&НаКлиенте
Функция ОткрытаСтраницаПоискаКарты(АктивныйСлойСлужебнойГруппы = Неопределено,
		АктивныйСлойГруппыДанныхПокупателя = Неопределено)
	
	Если АктивныйСлойСлужебнойГруппы = Неопределено Тогда
		АктивныйСлойСлужебнойГруппы
			= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
	КонецЕсли;
	Если АктивныйСлойГруппыДанныхПокупателя = Неопределено Тогда
		АктивныйСлойГруппыДанныхПокупателя
			= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевДанныеПокупателяОсновнаяОбласть);
	КонецЕсли;
	ОткрытаСтраницаПоискаКарты = (АктивныйСлойСлужебнойГруппы = Элементы.ГруппаДанныеПокупателя 
		И (АктивныйСлойГруппыДанныхПокупателя = Элементы.ГруппаПоискКарты
			Или АктивныйСлойГруппыДанныхПокупателя = Элементы.ГруппаКартаНеНайдена));
			
	Возврат ОткрытаСтраницаПоискаКарты;
	
КонецФункции

&НаКлиенте
Функция ОткрытаСтраницаОтправкиЧека()
	
	РезультатФункции =
		(ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ГруппаДанныеПокупателя)
		И (ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевДанныеПокупателяОсновнаяОбласть)
			= Элементы.ГруппаОтправкаЧека);
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция ОткрытаСтраницаЗаменыПрав()
	РезультатФункции
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ГруппаЗаменаПрав;
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Функция ОткрытаСтраницаВнесения()
	
	РезультатФункции
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиУправления)
			= Элементы.ГруппаВнесение;
			
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция ОткрытаСтраницаВыемки()
	
	РезультатФункции
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиУправления)
			= Элементы.ГруппаВыемка;
			
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура НайтиТоварРасшифровкеСкидок(Штрихкод)
	
	Если НЕ ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	ФильтрПоискаПоШтрихкоду = Новый Структура;
	ФильтрПоискаПоШтрихкоду.Вставить("Номенклатура");
	
	СтруктураПараметровКлиента = ДанныеПоискаПоШтрихкодуСервер(Штрихкод);
	ИдентификаторСтроки = Неопределено;
	
	Если СтруктураПараметровКлиента.ЗначенияПоиска.Количество() > 0 Тогда
		СтрокаРезультата = СтруктураПараметровКлиента.ЗначенияПоиска[0];
		ЭлементыДерева = ДеревоСкидок.ПолучитьЭлементы();
		Для Каждого Элемент Из ЭлементыДерева Цикл
			Если Элемент.НоменклатураПредставление = СтрокаРезультата.Владелец Тогда
				ИдентификаторСтроки = Элемент.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Элементы.ДеревоСкидок.ТекущаяСтрока = ИдентификаторСтроки;
	ШтрихкодДляПоиска = НСтр("ru = ''");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокТоваровСервер()
	
	ИнтерфейсРМКСлужебный.ОбновитьСписокТоваров(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьЭлементовГруппыПоискаТовара(ДляДополнительногоСписка = Ложь, ДляПодарков = Ложь, ДляХарактеристки = Ложь)
	
	УстановитьВидимостьЭлементаФормы(Элементы.ДополнениеСтрокаПоиска, Не ДляДополнительногоСписка И Не ДляПодарков);
	УстановитьВидимостьЭлементаФормы(Элементы.ДополнениеДополнительнаяСтрокаПоиска, ДляДополнительногоСписка);
	УстановитьВидимостьЭлементаФормы(Элементы.СписокТоваровОбновить, НЕ ДляПодарков);
	УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияПоискПодарки, ДляПодарков);
	ОтображатьКнопкуМирТовары = Не ДляДополнительногоСписка И Не ДляПодарков И ИспользоватьОплатуСертификатамиНСПК;
	УстановитьВидимостьКнопкиМирТовары(Элементы, ОтображатьКнопкуМирТовары);
	УстановитьВидимостьЭлементаФормы(Элементы.ДополнительныйСписокТоваровНоменклатура, Не ДляХарактеристки);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступностьЭлементовПриПоискеПоШтрихкоду(ЗначениеДоступности, ОшибкаРасчетаСкидок = Ложь)
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.ПанельИтоговПоЧекам, ЗначениеДоступности);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКомандПробитияЧека, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКомандПереходаКОплате, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКомандПовторногоДействия, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКомандПробитияЧекаНСПК, ЗначениеДоступности);
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаКомандПродолжитьБезРасчета,
		ОшибкаРасчетаСкидок Или ЗначениеДоступности);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуЭлементовПослеЗакрытияПоискаПоШтрихкоду()
	
	ШтрихкодДляПоиска = НСтр("ru = ''");
	НастроитьДоступностьЭлементовПриПоискеПоШтрихкоду(Истина);
	Элементы.РучнойШтрихкодДляПоиска.ПодсказкаВвода = НСтр("ru = ''");
	Если РежимРаботыСЧеком = РежимыРаботыСЧеком.ВводТоваров Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ЧекПустой Тогда
		ИнтерфейсРМКСлужебныйКлиент.НастроитьДоступностьРежимаОплаты(ЭтотОбъект);
	КонецЕсли;
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФильтрДляВводаМарки(ФильтрПоискаПоШтрихкоду, ТоварыТекущиеДанные)
	
	Если НЕ ТоварыТекущиеДанные = Неопределено Тогда
		Если ЗначениеЗаполнено(ТоварыТекущиеДанные.Номенклатура) И ОжидатьВводМарки Тогда
			ФильтрПоискаПоШтрихкоду.Вставить("НоменклатураДляВводаМарки", ТоварыТекущиеДанные.Номенклатура);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция БылОткрытСлойОжиданияМаркиДоГруппыВводаШтрихкода(ТекущийСлойСлужебнойИнформацииЧека)
	
	РезультатФункции = Ложь;
	
	Если ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаНайтиПоШтрихкоду
		И (ПредыдущийСлойДоДанныхПокупателя = Элементы.ГруппаОтсканироватьМарку
			ИЛИ ПредыдущийСлойДоДанныхПокупателя = Элементы.ГруппаНеверноОтсканированныйШтрихкод) Тогда
			
		РезультатФункции = Истина;
			
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция ОткрытСлойОжиданияМарки()
	
	РезультатФункции = Ложь;
	
	ТекущийСлойСлужебнойИнформацииЧека
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
	Если ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаОтсканироватьМарку
		ИЛИ ТекущийСлойСлужебнойИнформацииЧека = Элементы.ГруппаНеверноОтсканированныйШтрихкод
		ИЛИ БылОткрытСлойОжиданияМаркиДоГруппыВводаШтрихкода(ТекущийСлойСлужебнойИнформацииЧека) Тогда
		
		РезультатФункции = Истина;
		
	КонецЕсли;
	Возврат РезультатФункции;
		
КонецФункции

&НаКлиенте
Процедура ОтменитьВводНаПанели()
	
	Если ЭлементВводаСуммы = Элементы.РучнойШтрихкодДляПоиска Тогда
		ОтменаНайтиПоШтрихкодуКлиент();
	ИначеЕсли ЭлементВводаСуммы = Элементы.ШтрихкодДляПоиска Тогда
		НайтиВЧекеНажатие();
	Иначе
		СкрытьЦифровуюПанельДляВводаСумм();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРучногоСопоставленияТовараПриВозможности(ПараметрыДляОбработкиШтрихкода)
	
	Если НЕ ПараметрыДляОбработкиШтрихкода = Неопределено
		И ПараметрыДляОбработкиШтрихкода.Свойство("НекорректнаяМарка") Тогда
			ПоказатьОшибкуНекорректнойМарки(ПараметрыДляОбработкиШтрихкода);
			Возврат;
	КонецЕсли;
	
	Если РежимКассыСамообслуживания ИЛИ ЗапретитьСопоставлениеТовара Тогда
		ПоказатьОшибкуПоискаТовараПоШтрихкоду(ПараметрыДляОбработкиШтрихкода);
	Иначе
		НастроитьФормуДляРучногоСопоставленияТовара(ПараметрыДляОбработкиШтрихкода);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакиПоУмолчаниюПриСоздании()
	ВертикальнаяОриентация = Истина;
	ИспользоватьСлои = Истина;
КонецПроцедуры

&НаКлиенте
Функция ДоступноСохранениеКартБезСервераЛояльности(ФильтрПоискаКарты)
	
	Возврат (ЗапоминатьНомерКартыЛояльности И ФильтрПоискаКарты.Свойство("ИнформационныеКарты"));
	
КонецФункции

&НаКлиенте
Функция СохранятьНомерКартыЛояльности(ФильтрПоискаКарты, СерверЛояльностиНеДоступен = Ложь)
	
	РезультатФункции = Ложь;
	
	Если ДоступноСохранениеКартБезСервераЛояльности(ФильтрПоискаКарты)
			И Не (ОтправлятьSMSКодПриПродаже = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиSMSПриПродаже.ПриВыборе")
				И РежимКассыСамообслуживания) Тогда
		
		РезультатФункции = Истина;
		
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьВводКартыЛояльностиПоШтрихкоду(ЗапросКСерверуЛояльности = Истина)
	
	Если ВопросПоРасчетуСкидок 
		И НЕ ПолныйРасчетСкидок Тогда
		ЗадатьВопросПоРасчетуСкидок("ЗавершитьВводШтрихкодаНайденаКарта", ЗапросКСерверуЛояльности, Истина);
	Иначе
		ЗавершитьВводШтрихкодаНайденаКарта(КодВозвратаДиалога.Да, ЗапросКСерверуЛояльности);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНомерКартыЛокально(Штрихкод)
	
	ОчиститьДанныеПокупателя();
	ПараметрыКартыЛояльности = ИнтерфейсРМКСлужебныйКлиентСервер.ПараметрыКартыЛояльности();
	ПараметрыКартыЛояльности.КодКарты = СокрЛП(Штрихкод);
	ШтрихкодированиеРМК.ЗаполнитьФормуПоДисконтнойКарте(ЭтотОбъект, ПараметрыКартыЛояльности);
	
КонецПроцедуры

&НаКлиенте
Функция ЗапроситьКартыССервераЛояльности(СтруктураПараметровКлиента)
	
	ПустойМассив = Новый Массив;
	РезультатФункции = Новый Структура("ДанныеКарт,ТекстОшибки", ПустойМассив, "");
	
	ЗначенияПараметровМетода = ПараметрыМетодаНайтиКартуКлиента(СтруктураПараметровКлиента);
	ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаНайтиКартуКлиента(ПараметрыПодключенияКСерверуЛояльности, ЗначенияПараметровМетода);
	Результат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
	
	ТекстОшибки = "";
	ТекстОшибкиПоУмолчанию = НСтр("ru = 'Не удалось подключиться к серверу лояльности. Обратитесь к администратору'");
	Если Результат.ЕстьОшибки Тогда
		
		Если РежимКассыСамообслуживания Тогда
			ТекстОшибки = ТекстОшибкиПоУмолчанию;
		Иначе
			ДополнительноеПояснение = НСтр("ru = ''");
			Если ЕстьСвойство(Результат, "ТекстОшибки") Тогда
				ДополнительноеПояснение = СтрШаблон(" %1 %2", НСтр("ru = 'по причине:'"), Результат.ТекстОшибки);
			КонецЕсли;
			ТекстОшибки = СтрШаблон("%1 %2",
				НСтр("ru = 'Не удалось получить карты клиента'"),
					ДополнительноеПояснение);
		КонецЕсли;
			
	Иначе
		СтрокаJSON = Результат.ДанныеОтвета;
		Если СтрНачинаетсяС(СокрЛ(СтрокаJSON), "{") Тогда
			
			ДанныеОтвета = Неопределено;
			СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
			РезультатФункции.Вставить("ДанныеКарт", ДанныеОтвета.LoyaltyCardsList);
			
		Иначе
			ТекстОшибки = ТекстОшибкиПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	РезультатФункции.Вставить("ТекстОшибки", ТекстОшибки);
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПолучениеКартССервераЛояльности(СтруктураПараметровКлиента)
	
	РезультатЗапросаКарт = ЗапроситьКартыССервераЛояльности(СтруктураПараметровКлиента);
	ШтрихкодОригинал = СтруктураПараметровКлиента.ПараметрыШтрихкода.ШтрихкодОригинал;
	Если РезультатЗапросаКарт.ДанныеКарт.Количество() > 1 Тогда
		ПоказатьВыборКартКлиентаССервераЛояльности(РезультатЗапросаКарт.ДанныеКарт, ШтрихкодОригинал);
	ИначеЕсли РезультатЗапросаКарт.ДанныеКарт.Количество() = 1 Тогда
		ОбработатьВыборКартыКлиентаСервераЛояльности(РезультатЗапросаКарт.ДанныеКарт[0], ШтрихкодОригинал, Ложь);
	Иначе
		ОбработатьПустойРезультатЗапросаКартССервераЛояльности(СтруктураПараметровКлиента, РезультатЗапросаКарт.ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДозаполнитьДанныеКартыССервераЛояльности()
	
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		ЭтоПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
		
		СтруктураПараметров = ПодготовитьСтруктуруПараметровДляДозаполненияКартыЛояльности();
		РезультатЗапросаКарт = ЗапроситьКартыССервераЛояльности(СтруктураПараметров);
		Если РезультатЗапросаКарт.ДанныеКарт.Количество() >= 1 Тогда
			ЗаполнитьДанныеКартыНаФормеВЧеке(РезультатЗапросаКарт.ДанныеКарт[0]);
			Если ЭтоПродажа Тогда
				ЗавершитьВводШтрихкодаНайденаКарта(КодВозвратаДиалога.Нет, РезультатЗапросаКарт.ДанныеКарт.Количество() > 1);
			КонецЕсли;
		ИначеЕсли ЭтоПродажа И ЗначениеЗаполнено(ПараметрыКартыЛояльности.ИдентификаторКарты) Тогда
			ОчиститьДанныеПокупателя();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьСтруктуруПараметровДляДозаполненияКартыЛояльности()
	
	ШтрихкодПоиска = "";
	ФильтрПоиска = Новый Структура();
	Если ЗначениеЗаполнено(ПараметрыКартыЛояльности.ИдентификаторКарты) Тогда
		ШтрихкодПоиска = ПараметрыКартыЛояльности.ИдентификаторКарты;
		ФильтрПоиска.Вставить("УникальныйИдентификаторКарты");
	Иначе
		ШтрихкодПоиска = ПараметрыКартыЛояльности.КодКарты;
		ФильтрПоиска.Вставить("ИнформационныеКарты");
	КонецЕсли;
	
	ПараметрыШтрихкода = Новый Структура();
	ПараметрыШтрихкода.Вставить("ШтрихкодОригинал", ШтрихкодПоиска);
	ПараметрыШтрихкода.Вставить("ФильтрПоискаПоШтрихкоду", ФильтрПоиска);
	
	СтруктураПараметровКлиента = Новый Структура;
	СтруктураПараметровКлиента.Вставить("ПараметрыШтрихкода", ПараметрыШтрихкода);
	
	Возврат СтруктураПараметровКлиента;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьВыборКартКлиентаССервераЛояльности(ДанныеКарт, ШтрихкодОригинал)
	
	ЗначенияПоиска = Новый Массив;
	МассивКонтрагентов = Новый Массив;
	Для Каждого ОписаниеКарты Из ДанныеКарт Цикл
		НомерКарты = ?(ЗначениеЗаполнено(ОписаниеКарты.Barcode), ОписаниеКарты.Barcode, ОписаниеКарты.MagneticCode);
		
		ДанныеПоиска = Новый Структура();
		ДанныеПоиска.Вставить("Владелец",
			СтрШаблон("%1(%2), %3", ОписаниеКарты.ClientName, НомерКарты, ОписаниеКарты.Phone));
		ДанныеПоиска.Вставить("ТипОбъекта", НСтр("ru = 'Карта лояльности'"));
		ДанныеПоиска.Вставить("Остаток", ОписаниеКарты.BonusData.BonusCount);
		ДанныеПоиска.Вставить("ПродажиОборот", ОписаниеКарты.SellCount);
		ДанныеПоиска.Вставить("ДополнительныеДанные", ОписаниеКарты);
		ДанныеПоиска.Вставить("Характеристика", Неопределено);
		ДанныеПоиска.Вставить("Упаковка", Неопределено);
		ДанныеПоиска.Вставить("СерияНоменклатуры", Неопределено);
		
		ЗначенияПоиска.Добавить(ДанныеПоиска);
		Если МассивКонтрагентов.Найти(ОписаниеКарты.ClientGUID) = Неопределено Тогда
			МассивКонтрагентов.Добавить(ОписаниеКарты.ClientGUID);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивКонтрагентов.Количество() = 1
		И ИспользоватьБонусыКонтрагентов Тогда
		ОткрытьФормуСписанияБонусныхБаллов(ЗначенияПоиска, ШтрихкодОригинал);
	Иначе
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ИспользоватьНовыйАлгоритмПоискаПоШтрихкоду", Истина);
		СтруктураПараметров.Вставить("ДанныеПО", ШтрихкодОригинал);
		СтруктураПараметров.Вставить("ПоказыватьБонусы", ИспользоватьОплатуБонусами);
		СтруктураПараметров.Вставить("ЗначенияПоиска", ЗначенияПоиска);
	
		РаботаСоШтрихкодамиКлиентПереопределяемый.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметров, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборКартыКлиентаСервераЛояльности(ВыбранноеОписаниеКарты, ШтрихкодОригинал,
		ЗапросНаБлокировку = Истина) Экспорт
	Если ВыбранноеОписаниеКарты.Свойство("Valid") Тогда
		Если НЕ ВыбранноеОписаниеКарты.Valid Тогда
			ОписаниеШтрихкода = Новый Структура("Штрихкод", ШтрихкодОригинал);
			ОткрытьФормуИнформацииОКарте(ОписаниеШтрихкода);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	СохранитьДанныеКартыВЧеке(ВыбранноеОписаниеКарты, ШтрихкодОригинал);
	Если ЗапросНаБлокировку И ВыбранноеОписаниеКарты.BonusData.BonusCount <= 0 Тогда
		ЗапросНаБлокировку = Ложь;
	КонецЕсли;
	ЗавершитьВводКартыЛояльностиПоШтрихкоду(ЗапросНаБлокировку);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеКартыВЧеке(ВыбранноеОписаниеКарты, ШтрихкодОригинал)
	
	ОчиститьДанныеПокупателя();
	КонтрагентВыбран = Ложь;
	ЗаполнитьДанныеКартыНаФормеВЧеке(ВыбранноеОписаниеКарты);
	ПодготовитьИЗаполнитьПараметрыВводаКодаSMS(ВыбранноеОписаниеКарты, ШтрихкодОригинал);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеКартыНаФормеВЧеке(ВыбранноеОписаниеКарты)
	
	ЭтоПродажа = ОбщегоНазначенияРМК.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	
	ПараметрыКартыЛояльности = ИнтерфейсРМКСлужебный.ЗаполнитьПараметрыКартыЛояльности(ВыбранноеОписаниеКарты);
	ШтрихкодированиеРМК.ЗаполнитьФормуПоДисконтнойКарте(ЭтотОбъект, ПараметрыКартыЛояльности);
	Если ЭтоПродажа И ИспользоватьОплатуБонусами Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.ОтобразитьИнформациюОБонусныхБаллах(ЭтотОбъект, ВыбранноеОписаниеКарты.BonusData);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьИЗаполнитьПараметрыВводаКодаSMS(ВыбранноеОписаниеКарты, ШтрихкодОригинал)
	
	ШаблонШтрихкода = ШаблонШтрихкодаПоТипуПоискаСервераЛояльности(ВыбранноеОписаниеКарты.SearchType);
	СтрокаРезультата = Новый Структура();
	СтрокаРезультата.Вставить("Штрихкод", ШтрихкодОригинал);
	СтрокаРезультата.Вставить("ШаблонШтрихкода", ШаблонШтрихкода);
	ЗаполнитьПараметрыВводаКодаSMS(СтрокаРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыВводаКодаSMS(СтрокаРезультата)

	ЭтоПродажа = ОбщегоНазначенияРМК.ЭтоВидОперацииПродажа(Объект.ВидОперации);
		
	Если ДоступнаОтправкаSMS
		И ЗначениеЗаполнено(ОтправлятьSMSКодПриПродаже)
		И ЭтоПродажа
		И НЕ ЭтоЧекКоррекции
		И ((СтрокаРезультата.Свойство("ШаблонШтрихкода")
			И СтрокаРезультата.ШаблонШтрихкода = Перечисления.ШаблоныШтрихкодов.Телефон)
			ИЛИ (РежимКассыСамообслуживания И ЗначениеЗаполнено(НайденнаяКартаТелефон))) Тогда
		
		ПараметрыВводаКодаSMS = ПараметрыПроверкиПоSMSКоду();
		ПараметрыВводаКодаSMS.Вставить("КартаНайденаПоНомеруТелефона", Истина);
			
		Если ОтправлятьSMSКодПриПродаже = Перечисления.ВариантыОтправкиSMSПриПродаже.ПриВыборе Тогда
			ПараметрыВводаКодаSMS.ВариантПроверки = "ПриВыборе";
		Иначе
			ПараметрыВводаКодаSMS.ВариантПроверки = "ПриОплатеБонусами";
			Элементы.ОплатитьБонусами.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ШаблонШтрихкодаПоТипуПоискаСервераЛояльности(ТипПоиска)
	
	РезультатФункции = Перечисления.ШаблоныШтрихкодов.ПустаяСсылка();
	Если ТипПоиска = "Телефон" Тогда
		РезультатФункции = Перечисления.ШаблоныШтрихкодов.Телефон;
	ИначеЕсли ТипПоиска = "КодКарты" Тогда
		РезультатФункции = Перечисления.ШаблоныШтрихкодов.Карта;
	ИначеЕсли ТипПоиска = "АдресЭП" Тогда
		РезультатФункции = Перечисления.ШаблоныШтрихкодов.АдресЭП;
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПустойРезультатЗапросаКартССервераЛояльности(СтруктураПараметровКлиента, ТекстОшибки)
	
	ШтрихкодПоиска = СтруктураПараметровКлиента.ПараметрыШтрихкода.ШтрихкодОригинал;
	ФильтрПоиска = СтруктураПараметровКлиента.ПараметрыШтрихкода.ФильтрПоискаПоШтрихкоду;
	
	Если Не ТекстОшибки = "" И СохранятьНомерКартыЛояльности(ФильтрПоиска) Тогда
		СохранитьНомерКартыЛокально(ШтрихкодПоиска);
		ЗавершитьВводШтрихкодаНайденаКарта(КодВозвратаДиалога.Нет, Ложь);
	Иначе
		ПереключитьНаСтраницуПоискКартыКартаНеНайдена();
	КонецЕсли;
	Если Не ТекстОшибки = "" Тогда
		ПоказатьОшибкуПолученияКартыКлиента(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандПанелиПокупателя(ЗначениеДоступности)
	
	УстановитьДоступностьЭлементаФормы(Элементы.ЗакрытьФормуДанныеПокупателя, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЦифроваяПанель, ЗначениеДоступности);
	
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяНастройкаКнопокЦифровойПанели(Текст)
	
	РезультатФункции = Ложь;
	Если (Не РежимКассыСамообслуживания) И (СтрокаПоискаКарты = "" И Не Текст = "")
			Или (Не СтрокаПоискаКарты = "" И Текст = "") Тогда
		
		РезультатФункции = Истина;
		
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ДополнитьПараметрыКартыКлиента(ДанныеОтвета)
	
	НомерКартыКлиента = ?(ЗначениеЗаполнено(ДанныеОтвета.Barcode), ДанныеОтвета.Barcode, ДанныеОтвета.MagneticCode);
	Если ПараметрыКартыЛояльности = Неопределено Тогда
		ПараметрыКартыЛояльности = ИнтерфейсРМКСлужебныйКлиентСервер.ПараметрыКартыЛояльности();
	КонецЕсли;
	ПараметрыКартыЛояльности.ИдентификаторКарты = ДанныеОтвета.CardRef;
	ПараметрыКартыЛояльности.КодКарты = НомерКартыКлиента;
	Если ДанныеОтвета.Свойство("BonusRate") Тогда
		КурсБонусов = ДанныеОтвета.BonusRate;
	КонецЕсли;
	
	НайденнаяКартаНомер = НомерКартыКлиента;
	НоваяКартаНомер = НомерКартыКлиента;
	ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьДоступностьСозданияКарты(ЭтотОбъект, Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЛокальнуюКартуКонтрагента()
	
	ДанныеКартыКлиента = Новый Структура;
	ДанныеКартыКлиента.Вставить("Карта", Неопределено);
	ДанныеКартыКлиента.Вставить("НомерКарты", "");
	ДанныеКартыКлиента.Вставить("КартаНедействительна", Ложь);
	ДанныеКартыКлиента.Вставить("ПродажиОборот", 0);
	ДанныеКартыКлиента.Вставить("ДатаРождения", Дата('00010101'));
	АдресТаблицыДанныеКлиента = ОписаниеТаблицыДанныеКартыКлиента();
	ОбщегоНазначенияРМКВызовСервера.ПолучитьДанныеЛокальнойКартыКонтрагента(Объект.Контрагент, АдресТаблицыДанныеКлиента);
	
	ОткрытьФормуСписанияБаллов = Ложь;
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИспользоватьОплатуБонусами", ИспользоватьОплатуБонусами);
	ПолучатьДанные = Ложь;
	Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
		ПолучатьДанные = ПроверитьСоединениеССерверомЛояльности();
	Иначе
		ПолучатьДанные = Истина;
	КонецЕсли;
	СтруктураНастроек.Вставить("ПолучатьДанные", ПолучатьДанные);

	ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьПризнакОткрытияФормыСписанияБаллов(СтруктураНастроек, ОткрытьФормуСписанияБаллов);
	
	ЗначенияПоиска = Новый Массив;
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("АдресТаблицы", АдресТаблицыДанныеКлиента);
	СтруктураДанных.Вставить("ОткрытьФормуСписанияБаллов", ОткрытьФормуСписанияБаллов);
	ПолучитьДанныеКартыКлиента(СтруктураДанных, ДанныеКартыКлиента, ЗначенияПоиска);
	
	Если ОткрытьФормуСписанияБаллов
		И ЗначенияПоиска.Количество() > 0 Тогда
		ОжидаетсяОбработкаПослеВыбораВладельца = Истина;
		ОткрытьФормуСписанияБонусныхБалловЛокально(ЗначенияПоиска, "");
	ИначеЕсли ЗначенияПоиска.Количество() > 0 Тогда
		ОжидаетсяОбработкаПослеВыбораВладельца = Истина;
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ИспользоватьНовыйАлгоритмПоискаПоШтрихкоду", Истина);
		СтруктураПараметров.Вставить("ДанныеПО", Объект.Контрагент);
		СтруктураПараметров.Вставить("ВыборКонтрагента", Истина);
		СтруктураПараметров.Вставить("ПоказыватьБонусы", ИспользоватьОплатуБонусами);
		СтруктураПараметров.Вставить("ЗначенияПоиска", ЗначенияПоиска);
		
		РаботаСоШтрихкодамиКлиентПереопределяемый.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметров, Истина);
	Иначе
		Если ДанныеКартыКлиента.КартаНедействительна Тогда
			ПараметрыДляОбработкиШтрихкода = Новый Структура("Штрихкод", ДанныеКартыКлиента.НомерКарты);
			ОткрытьФормуИнформацииОКарте(ПараметрыДляОбработкиШтрихкода);
		Иначе
			ИнтерфейсРМКСлужебныйКлиент.ДополнитьФормуЛокальнойКартойКлиента(ЭтотОбъект, ДанныеКартыКлиента);
			ЗапроситьЛокальныеДанныеКарты();
		КонецЕсли;
	КонецЕсли;
	
	КонтрагентВыбран = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиДанныеСервераЛояльностиОСуществующейКарте(ДанныеОтвета, ТекстСообщения, ТолькоКлиент = Ложь)
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Если (Не ТолькоКлиент) И ДанныеОтвета.Свойство("CardID") Тогда
			НоваяКартаНомер = ДанныеОтвета.CardID;
		Иначе
			НоваяКартаНомер = "";
		КонецЕсли;
				
		Если ДанныеОтвета.Свойство("Client") Тогда
			НоваяКартаФИО = ДанныеОтвета.Client;
		Иначе
			НоваяКартаФИО = "";
		КонецЕсли;
				
		Если ДанныеОтвета.Свойство("PhoneNumber") Тогда
			МаскаТелефона = ИнтерфейсРМКСлужебныйКлиентСервер.МаскаВводаТелефона();
			НоваяКартаТелефон = ИнтерфейсРМКСлужебныйКлиентСервер.ПривестиЗначениеКМаскеТелефона(ДанныеОтвета.PhoneNumber,
				МаскаТелефона);
		КонецЕсли;
				
		Если ДанныеОтвета.Свойство("Email") Тогда
			НоваяКартаПочта = ДанныеОтвета.Email;
		Иначе
			НоваяКартаПочта = "";
		КонецЕсли;
		
		СтрокаXMLТолькоЧастьДата = Лев(ДанныеОтвета.DateOfBirth, 10);
		СтрокаДатыДляПреобразования = СтрЗаменить(СтрокаXMLТолькоЧастьДата, "-", "");
		ДатаРожденияКлиента = Дата(СтрокаДатыДляПреобразования);
		Если ДанныеОтвета.Свойство("DateOfBirth") Тогда
			НоваяКартаДатаРождения = ?(ЗначениеЗаполнено(ДатаРожденияКлиента),
				Формат(ДатаРожденияКлиента, "ДЛФ=D"), "");
		Иначе
			НоваяКартаДатаРождения = "";
		КонецЕсли;
	КонецЕсли;
			
	ИнтерфейсРМКСлужебныйКлиент.УстановитьТекстДекорацииОПерсональныхДанных(Элементы.ДекорацияТекстОПерсональныхДанных,
		ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеСозданнойКартыНаСервереЛояльности(ДанныеОтвета)
	ИнтерфейсРМКСлужебныйКлиент.ЗаполнитьПараметрыСозданнойКартыНаСервереЛояльности(ЭтотОбъект, ДанныеОтвета);
	ИзменитьКартинкуВводПокупателя();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьГруппыСозданияРеквизитов(ДоступностьГруппы)
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРеквизитовКарты, ДоступностьГруппы);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаНоваяКартаТелефон, ДоступностьГруппы);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаНоваяКартаФИО, ДоступностьГруппы);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаНоваяКартаПочта, ДоступностьГруппы);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаНоваяКартаДатаРождения, ДоступностьГруппы);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаНоваяКартаВидКарты, ДоступностьГруппы);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьМаскуВводаДатыРожденияНовойКарты(ЭтотОбъект);
КонецПроцедуры

#Область ПлиточныйИнтерфейс

&НаКлиенте
Процедура ПерейтиВОплатуЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИмяМетода = "ПерейтиВОплатуНаКлиенте";
		РассчитатьСкидкиКлиент();
	Иначе
		ПерейтиВОплатуНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВОплатуНаКлиенте(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПереключатьсяВРежимПлитки = Ложь;
	ПереключитьНаРежимПлиткиИзПалитры();
	ПерейтиВРежимОплатыПоКнопкеОплатить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьВРежимПлитки()
	
	Если ПереключатьсяВРежимПлитки Тогда
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая Тогда
			
			Если Не ОсновнойПодборПлиточный Тогда
				Возврат;
			КонецЕсли;
				
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
			
			Если Не РежимПлитки Тогда
				ПереключитьНаРежимПлиткиИзПалитры();
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		Если РежимПлитки Тогда
			ПереключитьНаРежимПлиткиИзПалитры();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаРежимПлитки(НовыйТипПостроенияПлитки, ТоварыКВыбору = Неопределено)
	Перем ПараметрыРазмеров;
	
	РежимПлитки = Не РежимПлитки;
	ОбычныйРежим = Не РежимПлитки;
	
	Если РежимПлитки Тогда
		Если НовыйТипПостроенияПлитки = ТипыПостроенияПлитки.РаспознанныйВесовойТовар
				Или Не ТипПостроенияПлитки = НовыйТипПостроенияПлитки Тогда
			ТипПостроенияПлитки = НовыйТипПостроенияПлитки;
			ИнтерфейсРМКСлужебныйКлиент.ПодготовитьДанныеДляПлитки(ЭтотОбъект, ТоварыКВыбору);
			ПлиткаДомойКлиент();
		ИначеЕсли Не ОсновнойПодборПлиточный Тогда
			ПлиткаДомойКлиент();
		КонецЕсли;
	Иначе
		ТипПостроенияПлиткиДоРаспознавания = Неопределено;
	КонецЕсли;
	
	ПараметрыИнтерфейсаПлитки = ИнтерфейсРМКСлужебныйКлиентСервер.ПараметрыПлиточногоИнтерфейса();
	ВысотаКнопокПлитки = ПараметрыИнтерфейсаПлитки.ВысотаКоманды;
	ШиринаКнопокПлитки = ПараметрыИнтерфейсаПлитки.ШиринаКоманды;
	ШиринаКнопокПлиткиСНадписью = ПараметрыИнтерфейсаПлитки.ШиринаКомандыСНадписью;
	ШиринаКнопок = ?(ОбычныйРежим, Элементы.СкидкаТекущийТоварПроцент.Ширина, ШиринаКнопокПлитки);
	ВысотаКнопок = ?(ОбычныйРежим, Элементы.СкидкаТекущийТоварПроцент.Высота, ВысотаКнопокПлитки);
	ШиринаКнопокПлиткиОперация = ?(РежимКассыСамообслуживания, ШиринаКнопокПлиткиСНадписью, ШиринаКнопокПлитки);
	
	Если ОбычныйРежим Тогда
		Элементы.ПлиткаГруппаОбщая.Видимость = РежимПлитки;
		Элементы.ГруппаОбщая.Видимость = ОбычныйРежим;
		Элементы.ГруппаУправленияЧекомВер.Видимость = (ОбычныйРежим И ВертикальнаяОриентация);
		
		Если ЭтоТипПостроенияПлиткиСВесовымТоваром(ТипПостроенияПлитки, ТипыПостроенияПлитки) Тогда
			
			ИнтерфейсРМКСлужебныйКлиент.НастроитьОтображениеОтбораВесовогоТовара(ЭтотОбъект, Ложь);
			РаспознаваниеБыло = Ложь;
			ТекущиеЭлектронныеВесы = Неопределено;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗакрыватьПодборПриВыбореТовара Тогда
		
		Если РежимКассыСамообслуживания И ОбычныйРежим Тогда
			ПараметрыРазмеров = ИнтерфейсРМКСлужебныйКлиентСервер.ПараметрыРазмеровКомандУправленияЧекомДляКСО();
		Иначе
			ПараметрыРазмеров = ПараметрыРазмеровКомандУправленияЧеком(ВысотаКнопок, ШиринаКнопок);
		КонецЕсли;
		ПараметрыРазмеров.Вставить("ШиринаКомандыСНадписью", ПараметрыИнтерфейсаПлитки.ШиринаКомандыСНадписью);
		ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьРазмерКомандУправленияСоставомЧека(ЭтотОбъект, ПараметрыРазмеров);
		
		Элементы.КолонкиОбычногоРежима.Видимость = ОбычныйРежим;
		Элементы.КолонкиРежимаПлитки.Видимость = РежимПлитки;
		Элементы.ГруппаИнфо.Видимость = ОбычныйРежим;
		Элементы.ПлиткаГруппаИнфо.Видимость = РежимПлитки;
		
		Элементы.Товары.Ширина = ?(ОбычныйРежим, 0, 26);
		Элементы.ПлиткаГруппаНиз.Видимость = РежимПлитки;
		Элементы.ПлиткаГруппаОплатить.Видимость = РежимПлитки;
		
		Элементы.ОтложитьЧек.Ширина = ШиринаКнопок;
		Элементы.ОтложитьЧек.Высота = ВысотаКнопок;
		
		Элементы.ПанельИзбранныхТоваров.ОтображатьЗаголовок = ОбычныйРежим;
		Элементы.ГруппаРядовКнопокБыстрыхТоваров.Видимость = ОбычныйРежим
		
	КонецЕсли;
	
	Если РежимПлитки Тогда
		Элементы.ПлиткаГруппаОбщая.Видимость = РежимПлитки;
		Элементы.ГруппаОбщая.Видимость = ОбычныйРежим;
		Элементы.ГруппаУправленияЧекомВер.Видимость = (ОбычныйРежим И ВертикальнаяОриентация);
	КонецЕсли;
	
	Элементы.ПерейтиНазад.Ширина = ШиринаКнопок;
	Элементы.ПерейтиДалее.Ширина = ШиринаКнопок;
	Элементы.ПерейтиНаНачальнуюСтраницу.Ширина = ШиринаКнопок;
	
	Элементы.ОткрытьПлиточныйИнтерфейсКаталога.Ширина
		= ?(ОбычныйРежим И Не РежимКассыСамообслуживания, Элементы.Каталог.Ширина, ШиринаКнопокПлиткиОперация);
	
	Элементы.ПерейтиНазад.Высота = ВысотаКнопок;
	Элементы.ПерейтиДалее.Высота = ВысотаКнопок;
	Элементы.ПерейтиНаНачальнуюСтраницу.Высота = ВысотаКнопок;
	Элементы.ОткрытьПлиточныйИнтерфейсКаталога.Высота
		= ?(ОбычныйРежим И Не РежимКассыСамообслуживания, Элементы.Каталог.Высота, ВысотаКнопокПлитки);
	УстановитьВидимостьКнопкиЗакрытияПлитки();
	
	РежимПлиткиБезЗакрытияПриВыборе = РежимПлитки И Не ЗакрыватьПодборПриВыбореТовара;
	
	Элементы.ПодгруппаОперации1.Видимость = ОбычныйРежим;
	Элементы.ПодгруппаОперации2.Видимость = ОбычныйРежим;
	Элементы.ПодгруппаОперации3.Видимость = ОбычныйРежим;
	Элементы.ПодгруппаОперации0.Видимость = РежимПлитки;
	УстановитьВидимостьЭлементаФормы(Элементы.ПодгруппаОперацииВесовойТовар, РежимПлитки И ЕстьВесовойТоварВПлитке);
	
	Элементы.ВвестиКомментарийКЧеку.Видимость = ВыводитьКомментарийКЧеку И Не РежимПлитки;
	Элементы.ОтложитьЧек.Видимость = (Не РежимКассыСамообслуживания) И (ОбычныйРежим Или РежимПлиткиБезЗакрытияПриВыборе);
	Элементы.ГруппаЛево.Видимость = ОбычныйРежим Или РежимПлиткиБезЗакрытияПриВыборе;
	УстановитьВидимостьКомандыУдалитьЧек(ОбычныйРежим Или РежимПлиткиБезЗакрытияПриВыборе);
	
	Если Не ЗакрыватьПодборПриВыбореТовара Тогда
		ПереключитьНаРежимПлиткиСервер();
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентПереопределяемый.ПереопределитьОткрытиеПлиточногоИнтерфейса(ЭтотОбъект, НовыйТипПостроенияПлитки);
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьНаРежимПлиткиСервер()
	
	Если РежимПлитки Тогда
		Элементы.Переместить(Элементы.ТекущийТоварУменьшитьКоличество, Элементы.ПлиткаИнфоТекущейСтроки);
		Элементы.Переместить(Элементы.ТекущийТоварУвеличитьКоличество, Элементы.ПлиткаИнфоТекущейСтроки);
		Элементы.Переместить(Элементы.ПолучитьВес, Элементы.ПлиткаИнфоТекущейСтроки);
		Элементы.Переместить(Элементы.УдалитьТовар, Элементы.ПлиткаИнфоТекущейСтроки);
		Элементы.Переместить(Элементы.ГруппаУправления, Элементы.ПанельУправленияПодбором);
		Элементы.Переместить(Элементы.ГруппаЛево, Элементы.ГруппаРаботаСТоварамиПлитки);
	Иначе
		Элементы.Переместить(Элементы.ПолучитьВес, Элементы.ГруппаУправлениеТоваром, Элементы.ДекорацияПоштучноеВыбытие);
		Элементы.Переместить(Элементы.ТекущийТоварУменьшитьКоличество, Элементы.ГруппаУправлениеТоваром, Элементы.ТекущийТоварКоличество);
		Элементы.Переместить(Элементы.ТекущийТоварУвеличитьКоличество, Элементы.ГруппаУправлениеТоваром, Элементы.ПолучитьВес);
		Элементы.Переместить(Элементы.УдалитьТовар, Элементы.ГруппаТекущийТовар);
		Элементы.Переместить(Элементы.ГруппаУправления, Элементы.ГруппаУправленияСтатическая);
		Элементы.Переместить(Элементы.ГруппаЛево, Элементы.ГруппаЛевоОболочкаПорядка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКоличествоВПлитках()
	
	Если ДанныеДляПлитки.Количество() = 0 Или ДанныеКнопокПлиток.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивИндексовНайденныхПозиций = Новый Массив;
	Если Не ЗакрыватьПодборПриВыбореТовара Тогда
		ТаблицаТовары = Объект.Товары;
		МассивИндексовНайденныхПозиций = Новый Массив;
		Для Каждого СтрокаТовара Из ТаблицаТовары Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТовара.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			Индекс = 0;
			Для Каждого ДанныеПлитки Из ДанныеКнопокПлиток Цикл
				Если СтрокаТовара.Номенклатура = ДанныеПлитки.Номенклатура
					И СтрокаТовара.Характеристика = ДанныеПлитки.Характеристика Тогда
					МассивИндексовНайденныхПозиций.Добавить(Индекс);
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	Индекс = 0;
	Для Каждого ДанныеПлитки Из ДанныеКнопокПлиток Цикл
		Если Не МассивИндексовНайденныхПозиций.Найти(Индекс) = Неопределено ИЛИ ДанныеПлитки.ЭтоТекущаяКатегория Тогда
			СтраницаЛинии = Элементы["Плитка_Элемент05_" + Индекс];
		Иначе
			СтраницаЛинии = Элементы["Плитка_Элемент03_" + Индекс];
		КонецЕсли;
		
		Элементы["Плитка_Элемент02_" + Индекс].ТекущаяСтраница = СтраницаЛинии;
		Если ЗакрыватьПодборПриВыбореТовара Тогда
			Прервать;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПлиткаВыбор(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ФормаРМКИнициализирована = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЭлементаБезИндекса = Лев(Элемент.Имя, 16);
	НомерНажатой = Сред(Элемент.Имя, 18);
	
	Если ИмяЭлементаБезИндекса = "Плитка_Элемент25" Тогда
		Элементы["Плитка_Элемент20_"+НомерНажатой].ТекущаяСтраница = Элементы["Плитка_Элемент22_"+НомерНажатой];
	ИначеЕсли ИмяЭлементаБезИндекса = "Плитка_Элемент26" Тогда
		Элементы["Плитка_Элемент20_"+НомерНажатой].ТекущаяСтраница = Элементы["Плитка_Элемент21_"+НомерНажатой];
	ИначеЕсли ИмяЭлементаБезИндекса = "Плитка_Элемент35" Тогда
		Элементы["Плитка_Элемент30_"+НомерНажатой].ТекущаяСтраница = Элементы["Плитка_Элемент32_"+НомерНажатой];
	ИначеЕсли ИмяЭлементаБезИндекса = "Плитка_Элемент36" Тогда;
		Элементы["Плитка_Элемент30_"+НомерНажатой].ТекущаяСтраница = Элементы["Плитка_Элемент31_"+НомерНажатой];
	КонецЕсли;
	
	НомерНажатой = Число(НомерНажатой);
	СтрокаНажатойКнопки = ДанныеКнопокПлиток.Получить(НомерНажатой);
	СтраницаПрежняя = Не СтрокаНажатойКнопки.ИмеетсяВложенность;
	
	ОткрытаФормаПодтверждения = Ложь;
	ВыбратьЭлементИзИзбранногоИПлитки(СтрокаНажатойКнопки, Истина, ОткрытаФормаПодтверждения);
	
	Если Не ОткрытаФормаПодтверждения Тогда
		НастроитьТекущийЭлементПослеВыбораИзПлитки(СтраницаПрежняя, НомерНажатой);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьТекущийЭлементПослеВыбораИзПлитки(СтраницаПрежняя, НомерНажатой)
	
	Если Не РежимПлитки И ЗакрыватьПодборПриВыбореТовара И Не ОжидатьВводМарки Тогда
		Если ТекущийЭлемент = Элементы.ОткрытьПлиточныйИнтерфейсКаталога Тогда
			УстановитьТекущийЭлементКоличество(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиУправления) = Элементы.ПанельУправленияЧеком
		Или Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека) = Элементы.ОбластьОперативногоУправленияЧеком
		Или Не Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбщая Тогда
		
		ВыйтиИзРежимаПлитки();
		
		Если Не РежимПлитки И Не ОжидатьВводМарки Тогда
			Если ТекущийЭлемент = Элементы.ОткрытьПлиточныйИнтерфейсКаталога Тогда
				УстановитьТекущийЭлементПриНезаполненнойЦенеИлиКоличестве();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если РежимПлитки Тогда
		Если СтраницаПрежняя Тогда
			ТекущийЭлемент = Элементы["Плитка_Элемент09_"+НомерНажатой];
		Иначе
			Если ДанныеКнопокПлиток[0].ЭтоКатегория Тогда
				ТекущийЭлемент = Элементы["Плитка_Элемент69_0"];
			Иначе
				ТекущийЭлемент = Элементы["Плитка_Элемент09_0"];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьПлиточныйИнтерфейсПодбора()
	
	ТекущийПервыйИндексПлитки = -1;
	ТекущаяСтраницаКнопок = -1;
	
	ЗаполнитьСтруктуруИзбранныхИПлиток();
	
	ЕстьЭлементыПлитки = ТекущийПервыйИндексПлитки > -1;
	Если ЕстьЭлементыПлитки Тогда
		Попытка
			ИнтерфейсРМКСлужебный.СформироватьЭлементыПлиток(ЭтотОбъект);
		Исключение
			СохранитьСообщениеОбОшибкеОткрытияПлитки();
			ОткатитьПлиточныйИнтерфейсПодбора();
		КонецПопытки;
	Иначе
		Элементы.ГруппаУведомленияОПустойСтруктуре.Видимость = Истина;
	КонецЕсли;
	
	ЕстьИзбранныеПозиции = ТекущаяСтраницаКнопок > -1;
	Если ЕстьИзбранныеПозиции Тогда
		
		ИсходныеДанныеГорячейКлавиши = ДанныеВедущейКомбинацииГорячихКлавиш();
		
		ВедущаяКомбинацияСтрокой = ИсходныеДанныеГорячейКлавиши.ВедущаяКомбинацияСтрокой;
		
		Если НЕ ПустаяСтрока(ВедущаяКомбинацияСтрокой) Тогда
			ЗаголовокИзбранныхТоваров = СтрШаблон(НСтр("ru = 'Быстрые товары (%1 номер товара)'"),
				ВедущаяКомбинацияСтрокой);
		Иначе
			ЗаголовокИзбранныхТоваров = НСтр("ru = 'Быстрые товары'");
		КонецЕсли;
		
		Элементы.ПанельИзбранныхТоваров.Заголовок = ЗаголовокИзбранныхТоваров;
		
		ИнтерфейсРМКСлужебный.СформироватьЭлементыПанелиИзбранныхПозиций(ЭтотОбъект, ИсходныеДанныеГорячейКлавиши);
		ИспользоватьПанельИзбранныхТоваров = Истина;
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементаФормы(Элементы.ПанельИзбранныхТоваров, ЕстьИзбранныеПозиции);
	УстановитьВидимостьЭлементаФормы(Элементы.ОткрытьПанельИзбранныхТоваров, ЕстьИзбранныеПозиции);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСообщениеОбОшибкеОткрытияПлитки()
	Если ПараметрыОткрытияФормы = Неопределено
			Или (Не ПараметрыОткрытияФормы.Свойство("ТекстСообщения")) Или ПараметрыОткрытияФормы.ТекстСообщения = "" Тогда
		ПредставлениеПлитки = Строка(СтруктураПлиточногоИнтерфейсаПодбора);
		ТекстСообщения
			= СтрШаблон(НСтр("ru = 'Проверьте корректность заполнения плиточного интерфейса ""%1"" и перезапишите его.
		|Рабочее место кассира открыто без использования плиточного интерфейса.'"), ПредставлениеПлитки);
		Если ПараметрыОткрытияФормы = Неопределено Тогда
			ПараметрыОткрытияФормы = Новый Структура();
		КонецЕсли;
		ПараметрыОткрытияФормы.Вставить("ТекстЗаголовка", НСтр("ru = 'Ошибка заполнения палитры товаров.'"));
		ПараметрыОткрытияФормы.Вставить("ТекстСообщения", ТекстСообщения);
		ПараметрыОткрытияФормы.Вставить("ОшибкаЗапуска", "Палитра");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОткатитьПлиточныйИнтерфейсПодбора()
	СтруктураПлиточногоИнтерфейсаПодбора = Неопределено;
	ОсновнойПодборПлиточный = Ложь;
	УстановитьВидимостьЭлементаФормы(Элементы.ОткрытьПлиточныйИнтерфейсКаталога, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуВправо()
	
	КоличествоПлиток = КоличествоЭлементовВРяду * КоличествоРядовНаСтранице;
	ТекущийПервыйИндексПлитки = ТекущийПервыйИндексПлитки + КоличествоПлиток;
	ЗаполнитьКнопкиПлиток();
	ПересчитатьКоличествоВПлитках();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуВлево()
	
	КоличествоПлиток = КоличествоЭлементовВРяду * КоличествоРядовНаСтранице;
	ТекущийПервыйИндексПлитки = ТекущийПервыйИндексПлитки - КоличествоПлиток;
	ЗаполнитьКнопкиПлиток();
	ПересчитатьКоличествоВПлитках();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЭлементИзИзбранногоИПлитки(СтрокаНажатойКнопки, ВыборИзПлитки, ОткрытаФормаПодтверждения = Ложь)
	
	СтраницаПрежняя = Не СтрокаНажатойКнопки.ИмеетсяВложенность;
	ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
	Если НЕ ЗначениеЗаполнено(Объект.Кассир) Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаВводКассира);
		Возврат;
	КонецЕсли;
	
	БылаЗаморожена = ФормаЗамороженаПослеПробитияЧека();
	
	Если СтрокаНажатойКнопки.ЭтоКатегория ИЛИ СтрокаНажатойКнопки.ЭтоТекущаяКатегория Тогда
		Если ВыборИзПлитки Тогда
			ТекущийПервыйИндексПлитки = СтрокаНажатойКнопки.ПервыйИндексПлитки;
			ЗаполнитьКнопкиПлиток();
			ПересчитатьКоличествоВПлитках();
		Иначе
			ТекущаяСтраницаКнопок = СтрокаНажатойКнопки.ПервыйИндексПлитки;
			ЗаполнитьКнопкиИзбранныхПозицийСРазморозкой(БылаЗаморожена);
			Элементы.ПанельИзбранныхТоваров.Заголовок = ЗаголовокИзбранныхТоваров;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ИндексВОпорныхДанных = СтрокаНажатойКнопки.ПервыйИндексПлитки;
	
	Если ВыборИзПлитки Тогда
		СтрокаДанныхДляПлитки = ДанныеДляПлитки[ИндексВОпорныхДанных];
		ИндексВОпорныхДанных = СтрокаДанныхДляПлитки.ИндексИзОпорныхДанных;
	КонецЕсли;
	
	СтрокаПозиции = ОпорныеДанные[ИндексВОпорныхДанных];
	
	Если СтрокаПозиции.ЭтоКатегория Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("СтрокаНажатойКнопки", СтрокаНажатойКнопки);
	ДополнительныеПараметры.Вставить("БылаЗаморожена", БылаЗаморожена);
	ДополнительныеПараметры.Вставить("ИндексВОпорныхДанных", ИндексВОпорныхДанных);
	ДополнительныеПараметры.Вставить("СтраницаПрежняя", СтраницаПрежняя);
	
	Если ВыборИзПлитки И СтрокаПозиции.Весовой И ТаблицаЭлектронныхВесов.Количество() > 0 Тогда
		ОткрытаФормаПодтверждения = Истина;
		ОткрытьФормуПодтвержденияВесовогоТовара(СтрокаПозиции, ДополнительныеПараметры);
	Иначе
		ВыбратьЭлементИзИзбранногоИПлиткиЗавершение(ВыборИзПлитки, СтрокаПозиции, ДополнительныеПараметры);
		ЗапуститьОбработкуРезультатаКонтроляПродажПриДобавлении(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЭлементИзИзбранногоИПлиткиЗавершение(ВыборИзПлитки, СтрокаПозиции, ДополнительныеПараметры)
	
	СтрокаНажатойКнопки = ДополнительныеПараметры.СтрокаНажатойКнопки;
	Если ВыборИзПлитки И ЗакрыватьПодборПриВыбореТовара Тогда
		ВыйтиИзРежимаПлитки();
	КонецЕсли;
	
	МассивДанных = Новый Массив;
	ОбщегоНазначенияРМККлиентПереопределяемый.ДозаполнитьДанныеРучногоВыбора(СтрокаПозиции,
		МассивДанных, ЭтотОбъект);
		
	ВесТовара = 0;
	Если ДополнительныеПараметры.Свойство("ВесТовара") Тогда
		ВесТовара = ДополнительныеПараметры.ВесТовара;
	КонецЕсли;
	Для Каждого СтрокаМассива Из МассивДанных Цикл
		СписокТоваровВыборКлиент(СтрокаМассива, ВесТовара);
	КонецЦикла;
	
	Если ВыборИзПлитки И ТипПостроенияПлитки = ТипыПостроенияПлитки.РаспознанныйВесовойТовар
			И Не ЗакрыватьПодборПриВыбореТовара Тогда
			
		НовыйТипПостроения = ТипыПостроенияПлитки.ПоПалитре;
		Если ТипПостроенияПлиткиДоРаспознавания = ТипыПостроенияПлитки.ВесовойТовар Тогда
			НовыйТипПостроения = ТипПостроенияПлиткиДоРаспознавания;
		КонецЕсли;
		ПерестроитьПлиткуПоТипуПостроения(НовыйТипПостроения);
		ДополнительныеПараметры.СтраницаПрежняя = Ложь;
		
	ИначеЕсли СтрокаНажатойКнопки.ИмеетсяВложенность Тогда
		Если ВыборИзПлитки Тогда
			Если НЕ ЗакрыватьПодборПриВыбореТовара Тогда
				ТекущийПервыйИндексПлитки = СтрокаНажатойКнопки.ПервыйИндексПлитки;
				ЗаполнитьКнопкиПлиток();
				ПересчитатьКоличествоВПлитках();
			КонецЕсли;
		Иначе
			ТекущаяСтраницаКнопок = СтрокаНажатойКнопки.ПервыйИндексПлитки;
			ЗаполнитьКнопкиИзбранныхПозицийСРазморозкой(ДополнительныеПараметры.БылаЗаморожена);
			Элементы.ПанельИзбранныхТоваров.Заголовок = НСтр("ru='Сопутствующие товары'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодтвержденияВесовогоТовара(СтрокаПозиции, ДополнительныеПараметры)

	Доступность = Ложь;
	
	ЭлектронныеВесы = ТекущиеЭлектронныеВесы;
	Если ЭлектронныеВесы = Неопределено И ТаблицаЭлектронныхВесов.Количество() = 1 Тогда
		ЭлектронныеВесы = ТаблицаЭлектронныхВесов[0].ЭлектронныеВесы;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ТекущиеЭлектронныеВесы", ЭлектронныеВесы);
	ПараметрыОткрытия.Вставить("ИдентификаторФормыВладельца", УникальныйИдентификатор);
	ПараметрыОткрытия.Вставить("НаименованиеПозиции", СтрокаПозиции.ИмяЭлемента);
	ПараметрыОткрытия.Вставить("АдресИзображения", СтрокаПозиции.АдресИзображения);
	ДополнительныеПараметры.Вставить("ТекущиеЭлектронныеВесы", ЭлектронныеВесы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодтверждениеВесовогоТовараЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаДобавленияВесовогоТовара",
		ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеВесовогоТовараЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Доступность = Истина;
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("ВесТовара") Тогда
		СтрокаПозиции = ОпорныеДанные[ДополнительныеПараметры.ИндексВОпорныхДанных];
		ДополнительныеПараметры.Вставить("ВесТовара", Результат.ВесТовара);
		
		ТекущееУстройствоРаспознавания = Неопределено;
		Если ТребуетсяПодтверждениеРаспознаванияВыбранногоТовара(СтрокаПозиции, ДополнительныеПараметры,
				ТекущееУстройствоРаспознавания) Тогда
			
			ОтправитьПодтверждениеРаспознаванияВыбранногоТовара(СтрокаПозиции.SKU, ТекущееУстройствоРаспознавания);
			
		КонецЕсли;
		
		ВыбратьЭлементИзИзбранногоИПлиткиЗавершение(Истина, СтрокаПозиции, ДополнительныеПараметры);
		НомерНажатой = ДанныеКнопокПлиток.Индекс(ДополнительныеПараметры.СтрокаНажатойКнопки);
		НастроитьТекущийЭлементПослеВыбораИзПлитки(ДополнительныеПараметры.СтраницаПрежняя, НомерНажатой);
		РаспознаваниеБыло = Ложь;
		ЗапуститьОбработкуРезультатаКонтроляПродажПриДобавлении(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруИзбранныхИПлиток()
	
	Если ЗначениеЗаполнено(СтруктураПлиточногоИнтерфейсаПодбора)
		Или ЗначениеЗаполнено(ТекущаяНастройкаРМК.СтруктураБыстрыхТоваров) Тогда
		
		ИнтерфейсРМКСлужебный.ЗаполнитьОпорныеДанныеПанелиПлиточногоИнтерфейса(ЭтотОбъект);
		ОбщегоНазначенияРМК.ДополнитьОпорныеДанныеПанелиДляПостроенияПлиточногоИнтерфейса(ЭтотОбъект);
		ИнтерфейсРМКСлужебный.НастроитьЭлементыВесовогоТовараВПлитке(ЭтотОбъект);
		
	КонецЕсли
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция СкидкаПоТекущемуВладельцуПодарка()
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(ТекущийВладелецПодарка) Тогда
		
		ОписаниеТипаСкидкаНаценка = Метаданные.ОпределяемыеТипы.СкидкаНаценкаРМК.Тип;
		
		СтруктураСкидки = Новый Структура("Ссылка", ТекущийВладелецПодарка);
		Результат = ОбщегоНазначенияРМК.ПолучитьДесериализованноеСсылочноеЗначение(СтруктураСкидки, "Ссылка", ОписаниеТипаСкидкаНаценка);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьКнопкиИзбранныхПозицийСРазморозкой(БылаЗаморожена)
	
	ЗаполнитьКнопкиИзбранныхПозиций();
	Если БылаЗаморожена Тогда
		НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьРаботуОблачногоАрхива()
	
	Результат = Новый Структура();
	Результат.Вставить("СозданиеРезервнойКопииДоступно", 		Ложь);
	Результат.Вставить("ПодключениеОблачногоАрхиваВыполнено", 	Ложь);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив20") Тогда

		МодульОблачныйАрхив20 = ОбщегоНазначения.ОбщийМодуль("ОблачныйАрхив20");
		
		Результат.СозданиеРезервнойКопииДоступно		= МодульОблачныйАрхив20.СозданиеРезервнойКопииДоступно();
		Результат.ПодключениеОблачногоАрхиваВыполнено	= МодульОблачныйАрхив20.ПодключениеОблачногоАрхиваВыполнено();
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВвестиКомментарийКЧекуКлиент()
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
		= Элементы.ГруппаВвестиКомментарийКЧеку Тогда
		
		ПодтвердитьВводКомментарияКЧеку(Неопределено);
		
	Иначе
	
		ПредыдущийСлойДоДанныхПокупателя
			= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаВвестиКомментарийКЧеку);

		ТекущийКомментарийКЧеку = КомментарийКЧеку;
		ТекущийЭлемент = Элементы.КомментарийКЧеку;
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПакетКлиент()
	
		ДанныеДобавляемогоТовара = Новый Структура;
		ДанныеДобавляемогоТовара.Вставить("Номенклатура");
		ДанныеДобавляемогоТовара.Вставить("Характеристика");
		ДанныеДобавляемогоТовара.Вставить("Упаковка");
		ДанныеДобавляемогоТовара.Вставить("Цена");
		ДанныеДобавляемогоТовара.Вставить("ОсобенностьУчета");
		ДанныеДобавляемогоТовара.Вставить("ВидНоменклатуры");
		ДанныеДобавляемогоТовара.Вставить("ВыборТовараВручную");
		
		ЗаполнитьЗначенияСвойств(ДанныеДобавляемогоТовара, ДанныеПакета);
		
		СписокТоваровВыборПродолжение();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьИконкуКомментарияКЧеку(Элемент, КомментарийКЧеку)
	
	Если ЗначениеЗаполнено(КомментарийКЧеку) Тогда
		КартинкаКомментария = БиблиотекаКартинок.РМККомментарийЗаполнен;
	Иначе	
		КартинкаКомментария = БиблиотекаКартинок.РМККомментарийПустой;
	КонецЕсли;
	
	Элемент.Картинка = КартинкаКомментария;
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьСтруктуруПараметровДляПоискаПоМагнитномуКоду(МагнитныйКод)
	
	ФильтрПоиска = Новый Структура();
	ФильтрПоиска.Вставить("ИнформационныеКарты");
	
	ПараметрыШтрихкода = Новый Структура();
	ПараметрыШтрихкода.Вставить("ШтрихкодОригинал", МагнитныйКод);
	ПараметрыШтрихкода.Вставить("ФильтрПоискаПоШтрихкоду", ФильтрПоиска);
	
	СтруктураПараметровКлиента = Новый Структура;
	СтруктураПараметровКлиента.Вставить("ПараметрыШтрихкода", ПараметрыШтрихкода);
	
	Возврат СтруктураПараметровКлиента;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьЛокальнуюКартуКонтрагентаПриНеобходимости()

	Если ЗначениеЗаполнено(Объект.Контрагент)
			И Не ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеДисконтнойКартыЗаполнены(ЭтотОбъект) Тогда
		
		ДобавитьЛокальнуюКартуКонтрагента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьГруппуПлатежныеСистемы()
	
	ТекущийСлойРазделаПлатежнойСистемы 
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевРазделПлатежнаяСистема);   
		
	Если ТекущийСлойРазделаПлатежнойСистемы = Элементы.ГруппаПодтверждениеОплаты
		ИЛИ ТекущийСлойРазделаПлатежнойСистемы = Элементы.ГруппаВопросОтложитьЧек
		ИЛИ ТекущийСлойРазделаПлатежнойСистемы = Элементы.ГруппаВопросПредупреждение Тогда
		
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПанельДействий);

		Элементы.ГруппаСБПДополнительнаяПанель.Видимость = Истина;
		
		Если ПлатежнаяСистема_НоваяЗаявка.ОпределитьСтатусВозвратаПозже Тогда
			ОпределитьСтатусВозврата();
		КонецЕсли;
		
		Если ПлатежнаяСистема_НоваяЗаявка.ОпределитьСтатусОплатыПозже Тогда
			ОпределитьСтатусОплаты();
		КонецЕсли;
		
	ИначеЕсли ТекущийСлойРазделаПлатежнойСистемы = Элементы.ГруппаПанельДействий Тогда
		
		СлойПлатежнойСистемы = ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(
			Элементы.ГруппаСлоевПанелиДействийПлатежнойСистемы);
			
		ГруппаИнструкция 		= Элементы.ГруппаИнструкция;
		ГруппаИнструкцияПовтор  = Элементы.ГруппаИнструкцияПовтор;
			
		Если ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.ТекущаяСтраница(ГруппаИнструкцияПовтор, СлойПлатежнойСистемы) 
			ИЛИ ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.ТекущаяСтраница(ГруппаИнструкция, СлойПлатежнойСистемы) Тогда
			
			КомандаИнструкция(Элементы.КомандаПлатежнаяСистема_Инструкция);
			
		Иначе	
			
			ОтменаДействия = Ложь;
			ОповещениеЗавершитьОтмену = Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
		
			ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОбработкаПрерыванияОперацииПлатежнойСистемы(ЭтотОбъект,
				ОтменаДействия, ОповещениеЗавершитьОтмену);
		
			Если НЕ ОтменаДействия Тогда
				СанкционироватьЗакрытиеОперацииПлатежнойСистемой();
			Иначе

				Элементы.ГруппаСБПДополнительнаяПанель.Видимость 		= Ложь;
				Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевРазделПлатежнаяСистема)
					= Элементы.ГруппаВопросПредупреждение Тогда
					ТекущийЭлемент = Элементы.КомандаЗакрытьПринудительно;
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		СанкционироватьЗакрытиеОперацииПлатежнойСистемой();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеСуммОплат(ОбнулитьПодарочныеСертификаты = Истина)
	
	СуммаОплаченоНал = 0;
	СуммаОплаченоБН = 0;
	СуммаОплаченоБезнал = 0;
	СуммаОплаченоВРассрочку = 0;
	СуммаОплаченоСБП = 0;
	СуммаОплаченоЮКасса = 0;
	СуммаОплаченоСертификатамиНСПК = 0;
	СуммаОплаченоКредитом = 0;
	СуммаОплаченоБН_0 = 0;
	Если ОбнулитьПодарочныеСертификаты Тогда
		УдалитьВсеПодарочныеСертификаты(Истина);
	КонецЕсли;
	ОчиститьТаблицуПлатежныхКарт();
	
КонецПроцедуры

&НаСервере
Функция ПерезаполнитьИзбранное()
	Возврат ОбщегоНазначенияРМКПереопределяемый.ПерезаполнитьИзбранное(ОтображатьОстаток);
КонецФункции

&НаСервере
Функция ПерезаполнитьПлиточныйИнтерфейс()
	Возврат ОбщегоНазначенияРМКПереопределяемый.ПерезаполнитьПлиточныйИнтерфейс(ОтображатьОстаток);
КонецФункции

&НаСервере
Процедура ЗаполнитьПодсказки(Команда, ТекстСочетания)
	ЗаголовокДекорации = "ДекорацияПодсказка" + Команда.ИмяКнопки;
	ЭлементДекорации = Элементы.Найти(ЗаголовокДекорации);
	Если ЭлементДекорации <> Неопределено Тогда
		ЭлементДекорации.Заголовок = ТекстСочетания;
	КонецЕсли;
	
	ЭлементВвода = Элементы.Найти(Команда.ИмяКнопки);
	Если ЭлементВвода <> Неопределено И ТипЗнч(ЭлементВвода) = Тип("ПолеФормы") Тогда
		ЭлементВвода.ПодсказкаВвода = ТекстСочетания;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВернутьТекстСочетанияКлавиш(СочетаниеКлавиш)
	СочетаниеКлавишAlt = ?(СочетаниеКлавиш.Alt, "Alt + ", "");
	СочетаниеКлавишCtrl = ?(СочетаниеКлавиш.Ctrl, "Ctrl + ", "");
	СочетаниеКлавишShift = ?(СочетаниеКлавиш.Shift, "Shift + ", "");
	СочетаниеКлавишКлавиша = Строка(СочетаниеКлавиш.Клавиша);
	
	ТекстСочетания = СочетаниеКлавишAlt + СочетаниеКлавишCtrl + СочетаниеКлавишShift + СочетаниеКлавишКлавиша;
	
	Если ТекстСочетания = "Нет" Тогда
		ТекстСочетания = "";
	КонецЕсли;
	
	Возврат ТекстСочетания;
КонецФункции

&НаСервере
Функция СенсорныйЭкран()
	Возврат РежимКассыСамообслуживания;
КонецФункции

&НаКлиенте
Функция ЭтоПолеВводаДробнойСуммы(ШаблонТекста)
	СимволРазделителя = ИнтерфейсРМКСлужебныйКлиентСервер.РазделительДробнойЧасти();
	Возврат (СтрНайти(ШаблонТекста, СимволРазделителя) > 0);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОплатыПлатежнымиСистемами(ГруппаСБП, ГруппаЮКасса, ЗначениеДоступности)
	Если ГруппаСБП.Видимость Тогда
		УстановитьДоступностьЭлементаФормы(ГруппаСБП, ЗначениеДоступности);
	КонецЕсли;
	Если ГруппаЮКасса.Видимость Тогда
		УстановитьДоступностьЭлементаФормы(ГруппаЮКасса, ЗначениеДоступности);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СжатьПанельИтоговПоЧекам(ТребуетсяСжатиеВГоризонтальнойОриентации)
	
	ИнтерфейсРМКСлужебный.СжатьПанельИтоговПоЧекам(ЭтотОбъект, ТребуетсяСжатиеВГоризонтальнойОриентации);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьПанельИтоговПоЧекам()
	
	ИнтерфейсРМКСлужебный.ВосстановитьПанельИтоговПоЧекам(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДополнительнойИнформацииВРежимеЦифровойПанели(ЗначениеВидимости)
	
	Если (РежимРаботыСЧеком = РежимыРаботыСЧеком.ВводТоваров Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ЧекПустой)
			И Элементы.ГруппаДополнительнаяИнформацияПоЧеку.Видимость И Не ВертикальнаяОриентация Тогда
			
		Элементы.ГруппаИнформацияПокупателя.Видимость = ЗначениеВидимости;
		Элементы.ГруппаQRCode.Видимость = ЗначениеВидимости;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьТоварОтдельнойСтрокой(СтрокаТовара)
	
	РезультатФункции = ДобавлятьВсеТоварыОтдельнойСтрокой
		Или (РежимКассыСамообслуживания И СтрокаТовара.Весовой);
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура СкрытьКомандуВыходаПриНеобходимости()
	
	Если РежимКассыСамообслуживания И РежимРаботыСЧеком = РежимыРаботыСЧеком.ЧекПустой
		И Элементы.УдалитьЧек.Видимость Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.УдалитьЧек, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСоответствиеЗаказу(ТекстОшибки)
	ОбщегоНазначенияРМКПереопределяемый.ПроверитьСоответствиеЗаказу(ЭтотОбъект, ТекстОшибки);
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьДанныеПродаж()
	
	Если ИспользоватьСерверЛояльностиПолучательДанных И ИспользоватьЗапросПродажСЛ И ВводДисконтныхКарт Тогда
		
		Если (ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Или ЗначениеЗаполнено(Объект.Контрагент)
			Или ИнтерфейсРМКСлужебныйКлиентСервер.ПолученИдентификаторКартыЛояльности(ПараметрыКартыЛояльности)) Тогда
			
			ЗначенияПараметровМетода = ПараметрыМетодовБонуснойПодсистемы();
			ПараметрыВыполненияЗапроса
				= СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаПолучитьОборотыПродаж(ПараметрыПодключенияКСерверуЛояльности,
						ЗначенияПараметровМетода);
			Результат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
			
			Если Результат.ЕстьОшибки Тогда
				ДополнительноеПояснение = НСтр("ru = ''");
				
				Если ЕстьСвойство(Результат, "ТекстОшибки") Тогда
					ДополнительноеПояснение = СтрШаблон(НСтр("ru = 'по причине: %1'"), Результат.ТекстОшибки);
				КонецЕсли;
				
				ТекстПредупреждения = СтрШаблон("%1 %2",
					НСтр("ru = 'Не удалось получить сведения о бонусном балансе клиента'"),
						ДополнительноеПояснение);
				ПоказатьПредупреждение(, ТекстПредупреждения);
			
				Возврат;
			КонецЕсли;
			
			СтрокаJSON = Результат.ДанныеОтвета;
			ДанныеОтвета = Неопределено;
			СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
			
			Если НЕ ДанныеОтвета = Неопределено И ДанныеОтвета.Свойство("ClientNotFound")
				И НЕ ДанныеОтвета.ClientNotFound Тогда
				
				ИнтерфейсРМКСлужебныйКлиентСервер.ОтобразитьИнформациюОПродажах(ЭтотОбъект, ДанныеОтвета);
				
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		ЗаполнитьДанныеПродажЛокально();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьПравоУменьшенияКоличества(ТекущаяСтрока)
	
	НеобходимоеПраво = "ПравоУдалитьСтрокуРМК";
	Возврат (ТекущаяСтрока.РазрешеноУменьшатьКоличество Или РежимКассыСамообслуживания
		Или ЕстьПравоНаДействие(НеобходимоеПраво) Или ЭтоВесовойТоварВРежимеКСО(ТекущаяСтрока));
	
КонецФункции

&НаКлиенте
Функция УменьшениеКоличестваТовараТекущейСтрокиВозможно(ТекущаяСтрока)
	
	Возврат (ТекущийТоварКоличество > 1 Или (ТекущийТоварКоличество > 0 И ТекущаяСтрока.Весовой));
	
КонецФункции

&НаКлиенте
Функция УменьшениеКоличестваТовараВозможно()
	
	РезультатФункции = Ложь;
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	Если (Не ТекущаяСтрока = Неопределено) И УменьшениеКоличестваТовараТекущейСтрокиВозможно(ТекущаяСтрока) Тогда
		РезультатФункции = Истина;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура СохранитьРазрешениеНаУменьшениеКоличестваТекущейСтроки(ТекущаяСтрокаРедактирования = Неопределено)
	
	Если ТекущаяСтрокаРедактирования = Неопределено Тогда
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	Иначе
		ТекущаяСтрока = ТекущаяСтрокаРедактирования;
	КонецЕсли;
	
	Если Не ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока.РазрешеноУменьшатьКоличество = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПропуститьОбновлениеТаблицыДляОперации()

	ОперацииБезОбновления = Новый Массив;
	ОперацииБезОбновления.Добавить("ВводВесаТовара");
	ОперацииБезОбновления.Добавить("ОткрытиеСлужебныхДействийКСО");
	ОперацииБезОбновления.Добавить("ПоказатьНастройки");
	ОперацииБезОбновления.Добавить("ИзменениеКоличестваВМеньшуюСторону");
	ОперацииБезОбновления.Добавить("УменьшениеКоличестваНаЕдиницу");
	ОперацииБезОбновления.Добавить("ПродолжитьБезРасчетаСкидок");
	
	Пропускать = Ложь;
	Если Не ОперацииБезОбновления.Найти(ТекущаяОперация) = Неопределено Тогда
		Пропускать = Истина;
	КонецЕсли;
	Возврат Пропускать;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьПравоИПересчитатьИзменениеКоличества(ДополнительныеПараметры)
	
	ТекущаяСтрока = Объект.Товары.Получить(ТекущийТоварИндексСтроки);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.УвеличитьКоличество Или ЕстьПравоУменьшенияКоличества(ТекущаяСтрока) Тогда
		ПересчитатьИзменениеКоличестваСВопросомОСкидках(ДополнительныеПараметры);
	Иначе
		НеобходимоеПраво = "УменьшениеКоличестваНаЕдиницу";
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИзменениеКоличестваСВопросомОСкидках(ДополнительныеПараметры)
	
	Если СкидкиРассчитаны И Не РежимКассыСамообслуживания Тогда
		ЗадатьВопросПоРасчетуСкидок("ПересчитатьДанныеПриИзмененииКоличестваЗавершение", ДополнительныеПараметры);
	Иначе 
		ПересчитатьДанныеПриИзмененииКоличестваЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОбработатьИзменениеКоличестваТовара(ТекущаяСтрокаРедактирования = Неопределено, ТребуетсяПовышениеПрав = Ложь)
	
	Если ТекущаяСтрокаРедактирования = Неопределено Тогда
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	Иначе
		ТекущаяСтрока = ТекущаяСтрокаРедактирования;
	КонецЕсли;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоУменьшение = (ТекущийТоварКоличество < ТекущаяСтрока.Количество);
	Если ЭтоУменьшение И Не ЕстьПравоУменьшенияКоличества(ТекущаяСтрока) Тогда
		НеобходимоеПраво = "ИзменениеКоличестваВМеньшуюСторону";
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
		ТребуетсяПовышениеПрав = Истина;
	Иначе
		ОбработатьИзменениеКоличестваТовара(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеКоличестваТовара(ТекущаяСтрокаРедактирования = Неопределено)
	
	Если ТекущаяСтрокаРедактирования = Неопределено Тогда
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	Иначе
		ТекущаяСтрока = ТекущаяСтрокаРедактирования;
	КонецЕсли;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПримененыСкидки() Тогда
		ОтменитьСкидки();
	КонецЕсли;
	
	Если ТекущаяСтрока.ЭтоНабор Тогда
		УвеличитьКоличествоНабора = Неопределено;
		Если ТекущийТоварКоличество > ТекущаяСтрока.Количество Тогда
			УвеличитьКоличествоНабора = Истина;
		ИначеЕсли ТекущийТоварКоличество < ТекущаяСтрока.Количество Тогда
			УвеличитьКоличествоНабора = Ложь;
		КонецЕсли;
		Если Не УвеличитьКоличествоНабора = Неопределено Тогда
			ИзменитьКоличествоНабора(ТекущаяСтрока, УвеличитьКоличествоНабора, ТекущийТоварКоличество);
		КонецЕсли;
	Иначе
		ТекущаяСтрока.Количество = ТекущийТоварКоличество;
		ТекущаяСтрока.КоличествоУпаковок = ТекущийТоварКоличество;
		СкорректироватьТекущееКоличество(ТекущаяСтрока);
		ПересчитатьСуммы(ТекущаяСтрока, Истина);
	КонецЕсли;
	
	ТекущаяСтрокаРедактированияКоличества = Неопределено;
	ВызватьПолныйАвтоматическийРасчетСкидок();
	РассчитатьСуммуОплатыБонусами();
	ОбновитьИнформациюНаДисплееПокупателя(ТипыОперацийДисплеяПокупателя.ИзменениеКоличества);
	ЗакрытьСтраницуСОшибкойКоличества();
	Если ТекущаяСтрока.ПоштучноеВыбытие Тогда
		ЗаполнитьЧастичноеВыбытиеОстатокПоСтроке(ТекущаяСтрока, Объект.Товары, ИндексКартинкиПоштучноеВыбытие);
		ВывестиПредупреждениеОстаткаЧастичноеВыбытие(ТекущаяСтрока);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКоличествоВРедактируемойСтроке(ТребуетсяПовышениеПрав = Ложь)
	
	Если Не ОбновлениеКоличестваЗапущено Тогда
		ОбновлениеКоличестваЗапущено = Истина;
		Если Не ТекущаяСтрокаРедактированияКоличества = Неопределено Тогда 
			Если (Не ТекущийТоварКоличество = ТекущаяСтрокаРедактированияКоличества.Количество)
				И ЭлементВводаСуммы = Элементы.ТекущийТоварКоличество Тогда
					
				ПроверитьОбработатьИзменениеКоличестваТовара(ТекущаяСтрокаРедактированияКоличества, ТребуетсяПовышениеПрав);
				
			КонецЕсли;
		КонецЕсли;
		ОбновлениеКоличестваЗапущено = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьНеЗавершенныеДействияПоТекущейСтроке()

	РезультатФункции = Ложь;
	ТребуетсяПовышениеПрав = Ложь;
	ОбновитьКоличествоВРедактируемойСтроке(ТребуетсяПовышениеПрав);
	Если Не (ТекущаяСтрокаРедактированияКоличества = Неопределено
			Или ТекущийТоварКоличество = ТекущаяСтрокаРедактированияКоличества.Количество) Тогда
		
		Элементы.Товары.ТекущаяСтрока = ТекущаяСтрокаРедактированияКоличества.ПолучитьИдентификатор();
		РезультатФункции = Истина;
		
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ОтменитьРедактированиеКоличестваТовараПриНеобходимости()

	Если Не ТекущаяСтрокаРедактированияКоличества = Неопределено Тогда
		
		АктивныйСлойСлужебнойИнформацииЧека
			= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
		Если Не АктивныйСлойСлужебнойИнформацииЧека = Элементы.ГруппаЗаменаПрав Тогда
			ТекущаяСтрокаРедактированияКоличества = Неопределено; 
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПлиточныйИнтерфейсКаталогаПродолжение(НовыйТипПостроенияПлитки, ТоварыКВыбору);
	
	ТекущийРежимПлитки = РежимПлитки;
	ПоказатьПустуюСтраницуПослеПробитияПриНеобходимости();
	Если ТекущийРежимПлитки = РежимПлитки Тогда
		ПереключитьНаРежимПлитки(НовыйТипПостроенияПлитки, ТоварыКВыбору);
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая И РежимПлитки Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	КонецЕсли;
	
	Если РежимПлитки И ОсновнойПодборПлиточный Тогда
		ПереключатьсяВРежимПлитки = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварПоСтрокеКлиентПродолжение();
	
	Если СкидкиРассчитаны Тогда
		ОтменитьСкидки();
	КонецЕсли;
	
	ЭтоТоварСХарактеристикой = Ложь;
	ДобавитьТоварПоСтроке(ЭтоТоварСХарактеристикой, КэшКонтроляПродаж);
	ЭтапыКонтроляПродаж = ИнтерфейсРМКСлужебныйКлиент.ЭтапыКонтроляПродаж();
	ИнтерфейсРМКСлужебныйКлиент.ВыполнитьПроверкиКонтроляПродаж(ЭтотОбъект, ЭтапыКонтроляПродаж.ДобавлениеТовара);

	Если ЭтоТоварСХарактеристикой Тогда
		
		ЭлементОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(
			СписокТоваров.Отбор.Элементы, "ЗначениеВводаТовараПоСтроке");
			
		Если ЭлементОтбора = Неопределено Тогда
			ЭлементОтбора = СписокТоваров.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Представление = "ЗначениеВводаТовараПоСтроке";
		КонецЕсли;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ВводТовараПоСтроке;
		
		ПоискТоваровОткрытИзСтрокиВвода = Истина;
		ОткрытьКаталогКлиент();
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекущаяСтрока.Весовой И Не ТекущаяСтрока.Фасованный И Не ТекущаяСтрока.НеобходимостьВводаКодаМаркировки Тогда
		ВесТекущегоТовара();
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
	КонецЕсли;
	ПересчитатьСуммы(ТекущаяСтрока);
	
	ЗапуститьОбработкуРезультатаКонтроляПродажПриСерверномДобавлении();
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогПродолжение();
	
	Если СкидкиРассчитаны 
		И Не ПолныйРасчетСкидок Тогда
		ЗадатьВопросПоРасчетуСкидок("ОткрытьКаталогЗавершение");
	Иначе
		ОткрытьКаталогЗавершение(КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДополнительныеПараметрыОткрытияЗакрытияСмены()
	
	ДополнительныеПараметрыОткрытияЗакрытияСмены = Новый Структура();
	ДополнительныеПараметрыОткрытияЗакрытияСмены.Вставить("Пользователь");
	ДополнительныеПараметрыОткрытияЗакрытияСмены.Вставить("Кассир");
	ДополнительныеПараметрыОткрытияЗакрытияСмены.Вставить("КассаККМ");
	ДополнительныеПараметрыОткрытияЗакрытияСмены.Вставить("ВариантЗаполненияМестаРасчетов");
	
	Возврат ДополнительныеПараметрыОткрытияЗакрытияСмены;
	
КонецФункции

&НаКлиенте
Процедура СоздатьЗаказИРаспечатать(СозданныйЗаказ = Неопределено, ОтменитьРежимПлитки = Ложь)
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстЗаголовка = НСтр("ru = 'Ошибка создания заказа.'");
		ТекстСообщения = НСтр("ru = 'Необходимо выбрать покупателя.'");
		ПоказатьПредупреждение(, ТекстСообщения, , ТекстЗаголовка);
		Возврат;
	ИначеЕсли Объект.Товары.Количество() = 0 Тогда
		ТекстЗаголовка = НСтр("ru = 'Ошибка создания заказа.'");
		ТекстСообщения = НСтр("ru = 'Список товаров пуст.'");
		ПоказатьПредупреждение(, ТекстСообщения, , ТекстЗаголовка);
		Возврат;
	КонецЕсли;
	
	СоздатьЗаказНаСервере();
	СозданныйЗаказ = Объект.ЗаказПокупателя;
	Если ПечататьЗаказПриСоздании Тогда
		НапечататьЗаказПокупателя(СозданныйЗаказ);
	КонецЕсли;
	УдалитьЧекКлиент(ОтменитьРежимПлитки);
	ПереключитьРежимНаПродажа();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимНаЗаказ()
	
	Если Не РаботаСЧекомЗавершена() Тогда
		Возврат;
	КонецЕсли;
	
	ОформитьРежимНовогоЧека("Заказ");
	
	Элементы.ГруппаИнфо.ЦветФона = ЦветаФормы.ФонРежимаЗаказ;
	
	Если ЗначениеЗаполнено(ПокупательНовогоЗаказа) Тогда
		Объект.Контрагент = ПокупательНовогоЗаказа;
		ЗаполнитьФормуПоДисконтнойКарте();
		ИзменитьКартинкуВводПокупателя();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаказНаСервере()
	ОбщегоНазначенияРМКПереопределяемый.СоздатьЗаказПокупателя(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОчиститьКартуЛояльностиПриОткладыванииЧека()
	
	Если ТребуетсяОчисткаКартыЛояльностиПриОткладыванииЧека() Тогда
		ОчиститьКартуЛояльностиПриОткладыванииЧека();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяОчисткаКартыЛояльностиПриОткладыванииЧека()
	
	РезультатФункции = Ложь;
	ЭтоПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	
	Если ЭтоПродажа И ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеДисконтнойКартыЗаполнены(ЭтотОбъект)
			И ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыДоОплаты(ЭтотОбъект)
			И (Не Объект.Оплачивается) 
			И (Не ЗначениеЗаполнено(Объект.ЗаказПокупателя)) Тогда
			
		РезультатФункции = Истина;
			
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьКартуЛояльностиПриОткладыванииЧека()
	
	Если СкидкиРассчитаны Тогда
		ОтменитьСкидки();
	КонецЕсли;
	Объект.ДисконтнаяКарта = Неопределено;
	Объект.Контрагент = Неопределено;
	ПараметрыКартыЛояльности = Неопределено;
	КоличествоБонусов = 0;
	БонусыДоступноКОплате = 0;
	ПроцентОплатыБонусами = 0;
	КурсБонусов = 1;
	// Неопределено - не задано, используется стандартный расчет по проценту, если число - то это получено с сервера лояльности
	ТаблицаСуммМаксимальнойОплатыбонусами.Очистить();
	ПараметрыВводаКодаSMS = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПризнакХочуБумажныйЧек(ЗначениеПризнака)
	
	ХочуБумажныйЧек = ЗначениеПризнака;
	ЭлементФлаг = Элементы.ДекорацияХочуБумажныйЧекФлаг;
	ЭлементФлаг.Картинка = ?(ХочуБумажныйЧек, БиблиотекаКартинок.РМКВыборБелыйФон, БиблиотекаКартинок.РМКБелыйФон);
	
	ИнтерфейсРМКСлужебныйКлиент.НастроитьСвойстваКнопкиПробитьИОтправить(ЭтотОбъект);
	НастроитьКомандыОплаты();
	
КонецПроцедуры

&НаКлиенте
Функция СразуОтправлятьНаПечатьЧека()
	
	ЭтапДляОтправкиСразуНаПечатьЧека
		= (ПробитиеСоСтраницыОтправкиЧека Или ТипЗнч(ПараметрыОплатыПлатежнойСистемой) = Тип("Структура"));
	
	Возврат (ПечататьБумажныйЧек Или ЭтапДляОтправкиСразуНаПечатьЧека
		Или ЭтоОплатаПоСсылкеNFC() Или ЗаполненаКонтактнаяИнформацияВРежимеКассира() Или Не ИспользоватьДисконтныеКарты);
	
КонецФункции

&НаКлиенте
Процедура ЗакрытьФормуДанныеПокупателяСОтменойПробитияЧека(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	Перем РезультатОбработки;
	
	ТипОплаты = "";
	Если ТипЗнч(ПараметрыОплатыПлатежнойСистемой) = Тип("Структура") Тогда
		СброситьОплатуПриОшибке();
		ПараметрыОплатыПлатежнойСистемой = Неопределено;
	КонецЕсли;
	ПропуститьЗакрытиеФормы = Ложь;
	Если ПанельПокупателяВПроцессеПереходаКОплате Тогда
		ВозможныеРезультаты = ВозможныеРезультатыОбработкиЛояльностиПриПереходеКОплате();
		РезультатОбработки = ОпределитьВыборДанныхЛояльностиПриПереходеКОплате();
		Если РезультатОбработки = ВозможныеРезультаты.ПереключитьНаДиалогВводаБонусов Тогда
			ПропуститьЗакрытиеФормы = Истина;
		КонецЕсли;
	КонецЕсли;
	Если Не ПропуститьЗакрытиеФормы Тогда
		ЗакрытьФормуДанныеПокупателяКлиент();
	КонецЕсли;
	Если ПанельПокупателяВПроцессеПереходаКОплате Тогда
		ОбработатьВыборДанныхЛояльностиПриПереходеКОплате(РезультатОбработки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧекКлиент()
	
	ЗакрытьФормуДанныеПокупателяКлиент();
	ПробитиеСоСтраницыОтправкиЧека = Истина;
	Если (Не ТипЗнч(ПараметрыОплатыПлатежнойСистемой) = Тип("Структура"))
		И (Не ЗначениеЗаполнено(ВыбраннаяСистемаНалогообложения) Или Не Элементы.ПробитьЧек.Доступность) Тогда
		
		ОткрытьПанельВводаОплат();
		
	Иначе
		
		Если ТипЗнч(ПараметрыОплатыПлатежнойСистемой) = Тип("Структура") Тогда
			ЗапуститьОплатуВозвратПлатежнойСистемой(ПараметрыОплатыПлатежнойСистемой.АвтономнаяККТ);
		Иначе
			ПробитоЧеков = ПробитыеЧеки.Количество();
			Если ЭтоЧекКоррекции ИЛИ ЭтоЗаменаТоваров Тогда
				ОжидаемоеКоличествоЧеков = 2 - ПробитоЧеков;
			Иначе
				СистемыНалогообложенияПродажТоваровКорзины = РазличныеСНОВСпискеПокупок();
				ОжидаемоеКоличествоЧеков = СистемыНалогообложенияПродажТоваровКорзины.Количество() - ПробитоЧеков;
			КонецЕсли;
			
			НачатьПечатьЧека();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПанельВводаОплат()
	
	Если РежимРаботыСЧеком = РежимыРаботыСЧеком.ВводТоваров Тогда
		Если Элементы.ПерейтиКОплате.Доступность Тогда
			ВыполнитьПереходКОплатеПослеПроверки();
		Иначе
			ЕстьНезаполненныеДанные();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекстСообщенияЗавершенияОплаты(СуммаСтрокой)
	
	РезультатФункции = 
	СтрШаблон(НСтр("ru = 'Чек на сумму %1 успешно оплачен.
	|Спасибо за покупку. Будем рады видеть вас снова!'"), СуммаСтрокой);
	Возврат РезультатФункции;
	
КонецФункции

&НаСервере
Процедура ПоказатьСообщениеЗавершенияОплаты(ПараметрыЗавершения)
	Если ТипЗнч(ПараметрыЗавершения) = Тип("Структура") Тогда
		Элементы.НадписьОкончаниеЧека.Заголовок = ТекстСообщенияЗавершенияОплаты(ПараметрыЗавершения.СуммаПродаж);
		Элементы.СтраницыСтартовогоОкна.ТекущаяСтраница = Элементы.СтраницаОкончанияПродажи;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкрытьСообщениеЗавершенияОплаты()
	Элементы.НадписьОкончаниеЧека.Заголовок = "";
	Элементы.СтраницыСтартовогоОкна.ТекущаяСтраница = Элементы.СтраницаНачалаПродажи;
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗавершениеСообщенияОбОплате();
	Если ТипЗнч(ПараметрыПустойСтраницы) = Тип("Структура") Тогда
		ПодключитьОбработчикОжидания("СкрытьСообщениеЗавершенияОплаты", ПараметрыПустойСтраницы.ВремяОтображения, Истина);
		ПараметрыПустойСтраницы = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеВыбораНоменклатуры(Номенклатура)
	
	ДанныеВыбора = Новый Структура;
	ДанныеВыбора.Вставить("Номенклатура", Номенклатура);
	ДанныеВыбора.Вставить("Характеристика");
	ДанныеВыбора.Вставить("Упаковка");
	ДанныеВыбора.Вставить("Цена");
	ДанныеВыбора.Вставить("ОсобенностьУчета");
	ДанныеВыбора.Вставить("ВидНоменклатуры");
	ДанныеВыбора.Вставить("ВыборТовараВручную");
	
	ОбщегоНазначенияРМКПереопределяемый.ПодготовитьДанныеВыбораНоменклатуры(ЭтотОбъект, ДанныеВыбора);
	
	Возврат ДанныеВыбора;
	
КонецФункции

&НаКлиенте
Процедура ВернутьсяНаСтраницуСтартаПродажПриНеобходимости()
	
	ГруппаСлоевСлужебнаяИнформация = Элементы.ГруппаСлоевСлужебнаяИнформацияЧека;
	ОткрытаСлужебнаяСтраница = (Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводКассира)
		Или (Не ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ГруппаСлоевСлужебнаяИнформация)
			= Элементы.ОбластьОперативногоУправленияЧеком);
	
	Если Объект.Товары.Количество() = 0 И Не ОткрытаСлужебнаяСтраница Тогда 
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнфо, Ложь);
		Если РежимНачальнойСтраницы = 1 Тогда
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		Иначе
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаПустая);
		КонецЕсли;
		УстановитьДоступностьЭлементаФормы(Элементы.НайтиВЧеке, Ложь);
		Если Не РежимКассыСамообслуживания Тогда
			УстановитьДоступностьЭлементаФормы(Элементы.УдалитьЧек, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РежимДопускаетРедактированиеСписка()
	Возврат Не (ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыСОплатой(ЭтотОбъект)
		Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ПродолжениеПослеПробития
		Или РежимРаботыСЧеком = РежимыРаботыСЧеком.Проверка);
КонецФункции

&НаКлиенте
Функция ГруппаРедактированияСтрокиТовараДоступна()
	Возврат Элементы.ГруппаЛево.Доступность И Элементы.ГруппаРедактированияСтрокиКорзины.Доступность;
КонецФункции

&НаКлиенте
Процедура АктивироватьДоступныйЭлементСтрокиТовараПоПриоритету()
	
	Если Элементы.ТекущийТоварКоличество.Доступность И Элементы.ТекущийТоварКоличество.Видимость Тогда
		ТекущийЭлемент = Элементы.ТекущийТоварКоличество;
	ИначеЕсли Элементы.ТекущийТоварЦенаИзКарточки.Доступность И Элементы.ТекущийТоварЦенаИзКарточки.Видимость Тогда
		ТекущийЭлемент = Элементы.ТекущийТоварЦенаИзКарточки;
	ИначеЕсли Элементы.ПоказатьОстатки.Видимость И Элементы.ПоказатьОстатки.Доступность Тогда
		ТекущийЭлемент = Элементы.ПоказатьОстатки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьСписокТоваровНаКлиенте()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбщая И (Не РежимПоказаСкидок) 
		И (Не РежимПоказаОстатков) И (Не РежимПлитки) И РежимДопускаетРедактированиеСписка() Тогда
			
		Если ТекущийЭлемент = Элементы.Товары Тогда
			Если ГруппаРедактированияСтрокиТовараДоступна() Тогда
				АктивироватьДоступныйЭлементСтрокиТовараПоПриоритету();
			КонецЕсли;
		Иначе
			ТекущийЭлемент = Элементы.Товары;
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьКнопкиМирТовары(Элементы, ЗначениеВидимости)
	УстановитьВидимостьЭлементаФормы(Элементы.МирТовары, ЗначениеВидимости);
	УстановитьВидимостьЭлементаФормы(Элементы.КомандаМирТовары, ЗначениеВидимости);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеРежимаПанелиДанныхПокупателя()
	
	Если РежимПанелиДанныеПокупателя = 0 Тогда
		ДанныеЗаполнены = ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеЛояльностиЗаполнены(ЭтотОбъект);
		ПереключитьНаСтраницуПоискКарты(ДанныеЗаполнены);
	ИначеЕсли РежимПанелиДанныеПокупателя = 1 Тогда
		ПереключитьНаСтраницуСозданиеКарты();
	ИначеЕсли РежимПанелиДанныеПокупателя = 2 Тогда
		ПереключитьНаСтраницуОтправкаЧека();
	КонецЕсли;
	НастроитьДоступностьГорячейКлавишиEnter();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНомерСледующейПанелиПокупателя()
	НомерВыбраннойПанели = -1;
	
	НомерСледующейПанели = РежимПанелиДанныеПокупателя + 1;
	СписокПанелей = Элементы.РежимПанелиДанныеПокупателя.СписокВыбора;
	КоличествоПанелей = СписокПанелей.Количество();
	НомерЭлемента = 0;
	Пока НомерЭлемента < КоличествоПанелей И НомерВыбраннойПанели < 0 Цикл
		ПанельПокупателя = СписокПанелей[НомерЭлемента];
		Если ПанельПокупателя.Значение >= НомерСледующейПанели Тогда
			НомерВыбраннойПанели = ПанельПокупателя.Значение;
		КонецЕсли;
		НомерЭлемента = НомерЭлемента + 1;
	КонецЦикла;
	Если НомерВыбраннойПанели = -1 И КоличествоПанелей > 0 Тогда
		НомерВыбраннойПанели = СписокПанелей[0].Значение;
	КонецЕсли;
	
	Возврат НомерВыбраннойПанели;
КонецФункции

&НаКлиенте
Процедура УдалитьТоварНаКлиенте()
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.УправляемыеСкидки, Ложь);
		УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварУправляемая, Ложь);
		
		Возврат;
		
	КонецЕсли;
	
	НеобходимоеПраво = "ПравоУдалитьСтрокуРМК";
	
	Если ЕстьПравоНаДействие(НеобходимоеПраво) Тогда
		
		Если СкидкиРассчитаны И Не РежимКассыСамообслуживания Тогда
			ЗадатьВопросПоРасчетуСкидок("УдалитьТоварЗавершение");
		Иначе
			УдалитьТоварЗавершение(КодВозвратаДиалога.Да, Неопределено);
		КонецЕсли;
		
	Иначе
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьГорячуюКлавишуDel()
	
	Если РежимДопускаетРедактированиеСписка() И ГруппаРедактированияСтрокиТовараДоступна()
		И Не РежимЦифровойПанели = РежимыЦифровойПанели.ДанныеПокупателя Тогда
		
		УдалитьТоварНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьГорячуюКлавишуEnter()
	
	МассивКнопокЦифровойПанели = ЭлементыКнопокЦифровойПанели();
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводКассира Тогда
		Если ТекущийЭлемент = Элементы.ТорговыйОбъектДляВхода Тогда
			ТекущийЭлемент = Элементы.КассирДляВхода;
		ИначеЕсли ТекущийЭлемент = Элементы.КассирДляВхода Тогда
			ТекущийЭлемент = Элементы.КодКассира;
		ИначеЕсли ТекущийЭлемент = Элементы.КодКассира Тогда
			ВойтиКлиент();
		ИначеЕсли ТекущийЭлемент = Элементы.Войти Тогда
			ВойтиКлиент();
		ИначеЕсли ТекущийЭлемент = Элементы.ЗавершитьРаботу Тогда
			ЗавершитьРаботуКлиент();
		КонецЕсли;
	ИначеЕсли РежимЦифровойПанели = РежимыЦифровойПанели.ДанныеПокупателя Тогда
		Если АктивноПолеВводаСуммыКОплатеБонусами() Тогда
			ОплатитьБонусамиВПроцессеПереходаКОплатеКлиент();
		ИначеЕсли РежимПанелиДанныеПокупателя = 0 Тогда
			Если АктивноПолеВводаПоискаКарты() Тогда
				ОбработатьШтрихкодКлиент(СтрокаПоискаКарты);
			ИначеЕсли ТекущийЭлемент = Элементы.ВыбратьКонтрагента
					Или ТекущийЭлемент = Элементы.ВыбратьКонтрагентаКартаНеНайдена Тогда
				ВыбратьКонтрагентаКлиент();
			ИначеЕсли ТекущийЭлемент = Элементы.ЗакрытьФормуДанныеПокупателя Тогда
				ЗакрытьФормуЦифровойПанели();
			ИначеЕсли ТекущийЭлемент = Элементы.ЦифроваяПанельПоиск Тогда
				КомандаЦифровойПанелиПоиск(Неопределено);
			ИначеЕсли ТекущийЭлемент = Элементы.ОтменитьВводКарты Тогда
				ОтменитьВводКартыКлиент();
			ИначеЕсли ТекущийЭлемент = Элементы.ОплатитьБонусами Тогда
				ОплатитьБонусами(Неопределено);
			ИначеЕсли Не МассивКнопокЦифровойПанели.Найти(ТекущийЭлемент) = Неопределено Тогда
				КомандаКнопкиЦифровойПанели(Команды.Найти(ТекущийЭлемент.ИмяКоманды));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭлементыКнопокЦифровойПанели()
	
	РезультатФункции = Новый Массив;
	
	РезультатФункции.Добавить(Элементы.ЦифроваяПанельОчистить);
	РезультатФункции.Добавить(Элементы.ЦифроваяПанельЦифра0);
	Для НомерКнопки = 0 По 9 Цикл
		
		ЭлементКнопка = Элементы[СтрШаблон("ЦифроваяПанельЦифра%1", Формат(НомерКнопки, "ЧН=0"))];
		РезультатФункции.Добавить(ЭлементКнопка);
		
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция КнопкаОплатыБонусамиДоступна()
	Возврат (Элементы.ГруппаВидОплатыБонусы.Видимость И Элементы.ОплатаБонусами.Доступность);
КонецФункции

&НаКлиенте
Функция АктивноПолеВводаПоискаКарты()
	Возврат (ТекущийЭлемент = Элементы.СтрокаПоискаКарты Или ТекущийЭлемент = Элементы.СтрокаПовторныйПоискКарты);
КонецФункции

&НаКлиенте
Функция КнопкаОплатитьБонусамиДоступна()
	Возврат (Элементы.ОплатитьБонусами.Видимость И Элементы.ОплатитьБонусами.Доступность);
КонецФункции

&НаКлиенте
Функция ОткрытаГруппаПроверкиДобавленияСертификата()
	СлоиВспомогательнойПанели = Элементы.ГруппаСлоевЛеваяВерхняяВспомогательнаяПанель;
	Возврат (ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(СлоиВспомогательнойПанели)
		= Элементы.ГруппаПоискСертификатов И Элементы.ГруппаОплатаСертификатами.Видимость);
КонецФункции

&НаКлиенте
Функция НеобходимаГорячаяКлавишаВводаНаДанныхПокупателя()
	
	Возврат (РежимЦифровойПанели = РежимыЦифровойПанели.ДанныеПокупателя
		И (ОткрытДиалогВводаБонусов Или РежимПанелиДанныеПокупателя = 0));
	
КонецФункции

&НаКлиенте
Процедура НастроитьДоступностьГорячейКлавишиEnter()
	
	ВидимостьКлавишиEnter = (Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводКассира
		Или НеобходимаГорячаяКлавишаВводаНаДанныхПокупателя());
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГорячаяКлавишаEnter, ВидимостьКлавишиEnter);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКонтрагентаКлиент()
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("УстановитьВыбранногоКонтрагента", ЭтотОбъект);
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОписаниеОповещенияОЗакрытии", ОписаниеОповещенияОЗакрытии);
	
	СтандартнаяОбработка = Истина;
	ОбщегоНазначенияРМККлиентПереопределяемый.ОткрытьФормуВыбораКонтрагента(СтруктураПараметров, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВводКартыКлиент()
	
	РассчитатьСкидкиОтложенно = Ложь;
	Если (РежимРаботыСЧеком = РежимыРаботыСЧеком.ПереходКОплате И Не ВопросПоРасчетуСкидок)
		Или (РежимКассыСамообслуживания И Не РаботаВРежимеМедленногоСоединения) Тогда
		
		РассчитатьСкидкиОтложенно = Истина;
		
	ИначеЕсли СкидкиРассчитаны Тогда
		ОтменитьСкидки();
	КонецЕсли;
	
	СтрокаПоискаКарты = "";
	КонтрагентВыбран = Ложь;
	РазблокироватьОбъектСервераЛояльности("clientbonuses");
	ОтменитьОплатуБонусами();
	ОчиститьДанныеПокупателя();
	ОчиститьДанныеКартыЛояльности();
	НастроитьКомандыОплаты();
	ИнтерфейсРМКСлужебныйКлиент.ОчиститьПоляВводаНовойКарты(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(ДисплейПокупателя)
		И Не РежимКассыСамообслуживания Тогда
		ОбновитьИнформациюНаДисплееПокупателя(ТипыОперацийДисплеяПокупателя.ДобавлениеТовара);
	КонецЕсли;
	ИзменитьКартинкуВводПокупателя();
	Если Не ИспользоватьДисконтныеКарты Тогда
		ЗакрытьФормуЦифровойПанели();
	Иначе
		ВосстановитьДиалогВводаКартыЛояльностиПередОплатой();
		ПереключитьНаСтраницуПоискКарты();
		ТекущийЭлемент = Элементы.СтрокаПоискаКарты;
	КонецЕсли;
	
	ТекущийЭлемент = Элементы.СтрокаПоискаКарты;
	Если РассчитатьСкидкиОтложенно Тогда
		РассчитатьСкидкиКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложитьЧекПроверкаПрав()
	
	НеобходимоеПраво = "ПравоОтложитьЧекРМК";
	ПравоНаДействие = ЕстьПравоНаДействие(НеобходимоеПраво);
	ТекущаяОперация = "ОтложитьЧекРМК";
	ЗакрытьФормуЦифровойПанели();
	
	Если ПравоНаДействие Тогда
		ОтложитьЧекКлиент();
	Иначе
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложенныеЧекиПроверкаПрав()
	
	НеобходимоеПраво = "ПравоПродолжитьЧекРМК";
	ПравоНаДействие = ЕстьПравоНаДействие(НеобходимоеПраво);
	ТекущаяОперация = "ПродолжитьЧекРМК";
	
	Если ПравоНаДействие Тогда
		ОтложенныеЧекиКлиент();
	Иначе
		
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьДанныеКарты()
	
	ПустойРезультат = НЕ ЗначениеЗаполнено(Объект.ДисконтнаяКарта) И ЗначениеЗаполнено(Объект.Контрагент);
	
	Если ПустойРезультат И ВводДисконтныхКарт И ИспользоватьСерверЛояльностиПолучательДанных Тогда
		Если ФильтрПоискаПоШтрихкоду = Неопределено Тогда
			ФильтрПоискаПоШтрихкоду = Новый Структура;
			ФильтрПоискаПоШтрихкоду.Вставить("ИнформационныеКарты");
		КонецЕсли;
		ФильтрПоискаПоШтрихкоду.Вставить("УникальныйИдентификаторВладельцаКарты");
		ШтрихкодПоиска = Строка(Объект.Контрагент.УникальныйИдентификатор());
		ПараметрыДляОбработкиШтрихкода = Новый Структура();
		ПараметрыДляОбработкиШтрихкода.Вставить("Штрихкод", ШтрихкодПоиска);
		
		СтруктураПараметровКлиента = ДанныеПоискаПоШтрихкодуСервер(ШтрихкодПоиска);
		СтруктураПараметровКлиента.Вставить("ПараметрыДляОбработкиШтрихкода", ПараметрыДляОбработкиШтрихкода);
		СтруктураПараметровКлиента.Вставить("ВыборКлиента", Истина);
		
		РезультатЗапросаКарт = ЗапроситьКартыССервераЛояльности(СтруктураПараметровКлиента);
		Если РезультатЗапросаКарт.ДанныеКарт.Количество() > 1 Тогда
			ПустойРезультат = Ложь;
			ПоказатьВыборКартКлиентаССервераЛояльности(РезультатЗапросаКарт.ДанныеКарт, Объект.Контрагент);
			ОжидаетсяОбработкаПослеВыбораВладельца = Истина;
		ИначеЕсли РезультатЗапросаКарт.ДанныеКарт.Количество() = 1 Тогда
			ПустойРезультат = Ложь;
			ОбработатьВыборКартыКлиентаСервераЛояльности(РезультатЗапросаКарт.ДанныеКарт[0], ШтрихкодПоиска, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустойРезультат И ВводДисконтныхКарт Тогда
		ДобавитьЛокальнуюКартуКонтрагентаПриНеобходимости();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеКартыКлиента(СтруктураДанных, ДанныеКартыКлиента, ЗначенияПоиска)
	
	ТаблицаДанныеКартыКонтрагента = ПолучитьИзВременногоХранилища(СтруктураДанных.АдресТаблицы);
	Если ТаблицаДанныеКартыКонтрагента = Неопределено Тогда
		
		ДанныеКартыКлиента.Карта = Неопределено;
		ДанныеКартыКлиента.НомерКарты = "";
		ДанныеКартыКлиента.КартаНедействительна = Ложь;
		ДанныеКартыКлиента.ПродажиОборот = 0;
		ДанныеКартыКлиента.ДатаРождения = Дата('00010101');
		
	ИначеЕсли ТаблицаДанныеКартыКонтрагента.Количество() > 1 Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаДанныеКартыКонтрагента Цикл
			Если СтруктураДанных.ОткрытьФормуСписанияБаллов Тогда
				ДанныеКарты = Новый Структура("Карта, Остаток, ПродажиОборот", Неопределено, 0);
				ДанныеКарты.Карта = СтрокаТаблицы.Карта;
				ДанныеКарты.Остаток = СтрокаТаблицы.Остаток;
				ДанныеКарты.ПродажиОборот = СтрокаТаблицы.ПродажиОборот;
				ЗначенияПоиска.Добавить(ДанныеКарты);
			Иначе
				ДанныеКарты = Новый Структура;
				ДанныеКарты.Вставить("Карта", СтрокаТаблицы.Карта);
				ДанныеКарты.Вставить("НомерКарты", СтрокаТаблицы.НомерКарты);
				ДанныеКарты.Вставить("КартаНедействительна", СтрокаТаблицы.КартаНедействительна);
				ДанныеКарты.Вставить("ПродажиОборот", СтрокаТаблицы.ПродажиОборот);
				ДанныеКарты.Вставить("ДатаРождения", СтрокаТаблицы.ДатаРождения);
				ДанныеПоиска = Новый Структура();
				ДанныеПоиска.Вставить("Владелец", СтрШаблон("%1(%2), %3", Объект.Контрагент, СтрокаТаблицы.НомерКарты, СтрокаТаблицы.НомерТелефона));
				ДанныеПоиска.Вставить("ТипОбъекта", НСтр("ru = 'Карта лояльности'"));
				ДанныеПоиска.Вставить("Остаток", СтрокаТаблицы.Остаток);
				ДанныеПоиска.Вставить("ДополнительныеДанные", ДанныеКарты);
				ДанныеПоиска.Вставить("Характеристика", Неопределено);
				ДанныеПоиска.Вставить("Упаковка", Неопределено);
				ДанныеПоиска.Вставить("СерияНоменклатуры", Неопределено);
				
				ЗначенияПоиска.Добавить(ДанныеПоиска);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТаблицаДанныеКартыКонтрагента.Количество() > 0 Тогда
		ДанныеКарты = ТаблицаДанныеКартыКонтрагента[0];
		ДанныеКартыКлиента.КартаНедействительна = ДанныеКарты.КартаНедействительна;
		ДанныеКартыКлиента.Карта = ДанныеКарты.Карта;
		ДанныеКартыКлиента.НомерКарты = ДанныеКарты.НомерКарты;
		ДанныеКартыКлиента.ПродажиОборот = ДанныеКарты.ПродажиОборот;
		ДанныеКартыКлиента.ДатаРождения = ДанныеКарты.ДатаРождения;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОписаниеТаблицыДанныеКартыКлиента()
	
	ОписаниеТипаКартаЛояльности = Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ДисконтнаяКартаРМК.Тип);
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТипаДата = Новый ОписаниеТипов("Дата");
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,2));
	
	ТаблицаДанныеКартыКлиента = Новый ТаблицаЗначений;
	ТаблицаДанныеКартыКлиента.Колонки.Добавить("Карта", ОписаниеТипаКартаЛояльности);
	ТаблицаДанныеКартыКлиента.Колонки.Добавить("НомерКарты", ОписаниеТипаСтрока);
	ТаблицаДанныеКартыКлиента.Колонки.Добавить("НомерТелефона", ОписаниеТипаСтрока);
	ТаблицаДанныеКартыКлиента.Колонки.Добавить("КартаНедействительна", ОписаниеТипаБулево);
	ТаблицаДанныеКартыКлиента.Колонки.Добавить("Остаток", ОписаниеТипаЧисло);
	ТаблицаДанныеКартыКлиента.Колонки.Добавить("ПродажиОборот", ОписаниеТипаЧисло);
	ТаблицаДанныеКартыКлиента.Колонки.Добавить("ДатаРождения", ОписаниеТипаДата);
	
	АдресТаблицыДанныеКлиента = ПоместитьВоВременноеХранилище(ТаблицаДанныеКартыКлиента);
	Возврат АдресТаблицыДанныеКлиента;
	
КонецФункции

&НаКлиенте
Процедура ПлиткаДомойКлиент()
	
	ТекущийПервыйИндексПлитки = 0;
	ЗаполнитьКнопкиПлиток();
	ПересчитатьКоличествоВПлитках();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПродажЛокально()
	ВладелецШтрихкода = Объект.ДисконтнаяКарта;
	НайденнаяКартаЛояльности = Неопределено;
	ШтрихкодированиеРМКПереопределяемый.ЗаполнитьДанныеНайденнойКартыЛояльности(ВладелецШтрихкода,НайденнаяКартаЛояльности);
	Если НайденнаяКартаЛояльности.Свойство("СуммаПродаж") Тогда
		СуммаПродаж = НайденнаяКартаЛояльности.СуммаПродаж;
		НайденнаяКартаСуммаПродаж = Формат(НайденнаяКартаЛояльности.СуммаПродаж, "ЧДЦ=2");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаРежимПлиткиИзПалитры()
	ПереключитьНаРежимПлитки(ТипыПостроенияПлитки.ПоПалитре);
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаРежимПлиткиВесовогоТовара(ИдентификаторУстройства)
	
	Если (Не РежимПлитки) Или Не РаспознаваниеБыло Тогда
		
		УстройствоРаспознавания = ПолучитьУстройствоРаспознаванияЭлектронныхВесов(ИдентификаторУстройства);
		Если Не УстройствоРаспознавания = Неопределено Тогда
			ОтправитьЗапросНаРаспознаваниеТовара(УстройствоРаспознавания, ИдентификаторУстройства);
		ИначеЕсли Не РежимПлитки Тогда
			ОткрытьПлиточныйИнтерфейс(ТипыПостроенияПлитки.ВесовойТовар);
			Если РежимПлитки Тогда
				ТекущиеЭлектронныеВесы = ИдентификаторУстройства;
			КонецЕсли;
		ИначеЕсли ТипПостроенияПлитки = ТипыПостроенияПлитки.ПоПалитре Тогда
			ПерестроитьПлиткуПоТипуПостроения(ТипыПостроенияПлитки.ВесовойТовар);
			ТекущиеЭлектронныеВесы = ИдентификаторУстройства;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаРежимПлиткиВесовогоТовараПриВозможности(ИдентификаторУстройства)
	
	Если Не РежимПлитки Тогда
		ОткрытаОбластьПоУмолчанию
			= (ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиУправления)
				= Элементы.ПанельУправленияЧеком
				И ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
				= Элементы.ОбластьОперативногоУправленияЧеком);
				
		Если Не ((Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбщая И ОткрытаОбластьПоУмолчанию)
				Или Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьВесовойТоварВПлитке Тогда
		ЭтоПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
		Если ЭтоПродажа Тогда
			ПереключитьНаРежимПлиткиВесовогоТовара(ИдентификаторУстройства);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКнопкиЗакрытияПлитки()
	ЗначениеВидимости = (РежимПлитки И ЭтоТипПостроенияПлиткиСВесовымТоваром(ТипПостроенияПлитки, ТипыПостроенияПлитки)
			И Не ОсновнойПодборПлиточный);
	УстановитьВидимостьЭлементаФормы(Элементы.ЗакрытьПлиточныйИнтерфейс, ЗначениеВидимости);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФокусВПолеВводаСуммыКартой()
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ОбластьОперативногоУправленияЧеком
			И Элементы.ГруппаОплатаКартой.Видимость И Не СенсорныйЭкран Тогда
		ТекущийЭлемент = Элементы.СуммаОплаченоБН;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПлиточныйИнтерфейс(НовыйТипПостроенияПлитки, ТоварыКВыбору = Неопределено)
	
	ТребуетсяПовышениеПрав = Ложь;
	ОбновитьКоличествоВРедактируемойСтроке(ТребуетсяПовышениеПрав);
	Если Не ТребуетсяПовышениеПрав Тогда
		ОткрытьПлиточныйИнтерфейсКаталогаПродолжение(НовыйТипПостроенияПлитки, ТоварыКВыбору);
		Если РежимПлитки Тогда
			
			ВесовойРежим = (НовыйТипПостроенияПлитки = ТипыПостроенияПлитки.ВесовойТовар
				Или НовыйТипПостроенияПлитки = ТипыПостроенияПлитки.РаспознанныйВесовойТовар);
			
			ИнтерфейсРМКСлужебныйКлиент.НастроитьОтображениеОтбораВесовогоТовара(ЭтотОбъект, ВесовойРежим);
			
		Иначе
			ВернутьсяНаСтраницуСтартаПродажПриНеобходимости();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолучениеВесаОтЭлектронныхВесов(ВесТовара, ИдентификаторУстройства)
	
	Если Доступность И (ИнтерфейсРМКСлужебныйКлиентСервер.ЭтоЭтапРаботыДоОплаты(ЭтотОбъект)
			Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ВозвратКоррекция) Тогда
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
		Если (Не ТекущаяСтрока = Неопределено) И ТекущаяСтрока.Весовой И ТекущаяСтрока.Количество <= 0 Тогда
			УстановитьВесСЭлектронныхВесов(ТекущаяСтрока, ВесТовара)
		ИначеЕсли Не ЕстьНезаполненныеДанные() Тогда
			ПереключитьНаРежимПлиткиВесовогоТовараПриВозможности(ИдентификаторУстройства);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКодМаркировкиПриПродолженииЧека()
	
	Если ПараметрыПроверкиКодовМаркировки.ЕстьОшибки Или ПараметрыПроверкиКодовМаркировки.СтрокиСКодомМаркировки.Количество() = 0 Тогда
		Если ПараметрыПроверкиКодовМаркировки.ЕстьОшибки Тогда
			ПараметрыПроверкиКодовМаркировки.ТекущаяСтрока.КодМаркировки = "";
		КонецЕсли;
		
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
		ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
		НастроитьДоступностьПробитьЧек();
		
		ПродолжитьЧекКлиентПослеПроверкиКодовМаркировки();
	Иначе
		
		СтрокаТовара = ПараметрыПроверкиКодовМаркировки.СтрокиСКодомМаркировки[0];
		КодМаркировки = ПараметрыПроверкиКодовМаркировки.КодыДляПроверки.Получить(СтрокаТовара);
		СтрокаТовара.КодМаркировки = КодМаркировки;
		
		Элементы.Товары.ТекущаяСтрока = СтрокаТовара.ПолучитьИдентификатор();
		
		ПараметрыПроверкиКодовМаркировки.Вставить("ТекущаяСтрока", СтрокаТовара);
		ПараметрыПроверкиКодовМаркировки.СтрокиСКодомМаркировки.Удалить(0);
		
		Если ПроверкаМаркиВозможна(КодМаркировки, СтрокаТовара.ОсобенностьУчета, СтрокаТовара.Организация) Тогда
			Если ИспользоватьРазрешительныйРежимГосИС Тогда
				СимволGS1 = МенеджерОборудованияРМККлиентСервер.РазделительGS1();
				Разделитель = МенеджерОборудованияРМККлиентСервер.ЭкранированныйСимволGS1();
				Штрихкод = СтрЗаменить(КодМаркировки, Разделитель, СимволGS1);
				РеквизитыФормыРМК = СтруктураРеквизитовФормыРМКДляДобавленияСтроки();
				ИдентификаторСтроки = СтрокаТовара.ПолучитьИдентификатор();
				
				ПараметрыДляОбработкиШтрихкода = Новый Структура();
				ПараметрыДляОбработкиШтрихкода.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
				ПараметрыДляОбработкиШтрихкода.Вставить("ЭтоПроверкаМарки", Истина);
				ПараметрыДляОбработкиШтрихкода.Вставить("ВызовИзПродолженияЧека", Истина);
				ПроверитьНеобходимостьВводаМарки(ПараметрыДляОбработкиШтрихкода);
				
				ДополнитьПараметрыДляОбработкиШтрихкода(ПараметрыДляОбработкиШтрихкода);
				СтандартнаяОбработка = Истина;
				ОбщегоНазначенияРМККлиентПереопределяемый.ПоискПоШтрихкодуРазрешительныйРежим(
					ЭтотОбъект, Штрихкод, РеквизитыФормыРМК, ПараметрыДляОбработкиШтрихкода, СтандартнаяОбработка);
			
				Если СтандартнаяОбработка Тогда
					
					ДанныеРучногоСопоставления = Новый Структура;
					ДанныеРучногоСопоставления.Вставить("Номенклатура");
					ДанныеРучногоСопоставления.Вставить("Характеристика");
					ДанныеРучногоСопоставления.Вставить("Упаковка");
					ДанныеРучногоСопоставления.Вставить("Серия");
					ДанныеРучногоСопоставления.Вставить("Штрихкод");
					ДанныеРучногоСопоставления.Вставить("Количество");
					
					ЗаполнитьЗначенияСвойств(ДанныеРучногоСопоставления, СтрокаТовара);
					ДанныеРучногоСопоставления.Штрихкод = "";
					
					Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСКлиент");
					ДанныеПараметровСканирования = Модуль.ПараметрыСканирования(ЭтотОбъект);
					
					ПараметрыДляОбработкиШтрихкода.Вставить("ЧастичноеВыбытие", ДанныеПараметровСканирования.ТребуетсяЧастичноеВыбытие);
					ПараметрыДляОбработкиШтрихкода.Вставить("ЧастичноеВыбытиеКоличество", СтрокаТовара.ЧастичноеВыбытиеКоличество);
					
					ДанныеСоСканера = Новый Массив();
					ДанныеСоСканера.Добавить(Штрихкод);
					ДанныеСоСканера.Добавить(Неопределено);
					ДанныеШтрихкода = МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(ДанныеСоСканера);
					
					ПараметрыПоискаРМК = РеквизитыФормыРМК;
					ШтрихкодОригинальный = Штрихкод;
					ЗаменитьСимволGS1(ШтрихкодОригинальный);
					ПараметрыПоискаРМК.Вставить("ШтрихкодОригинальный", ШтрихкодОригинальный);
					ПараметрыДляОбработкиШтрихкода.Вставить("Штрихкод", ШтрихкодОригинальный);
					ПараметрыПоискаРМК.Вставить("ПараметрыДляОбработкиШтрихкода", ПараметрыДляОбработкиШтрихкода);
					ПараметрыПоискаРМК.Вставить("ДанныеРучногоСопоставления", ДанныеРучногоСопоставления);
					ДанныеПараметровСканирования.ДополнительныеПараметры.Вставить("ПараметрыПоискаРМК", ПараметрыПоискаРМК);
					
					ИмяРеквизитаПараметрыСканирования = "ПараметрыСканирования";
					ЭтотОбъект[ИмяРеквизитаПараметрыСканирования] = ДанныеПараметровСканирования;
					
					Модуль.ОбработатьДанныеШтрихкода("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, ДанныеШтрихкода, ДанныеПараметровСканирования);
					
				КонецЕсли;
			
			Иначе
				КонтекстПроверкиКонтрольнойМарки = КонтекстПроверкиКонтрольнойМарки();
				ЗаполнитьЗначенияСвойств(КонтекстПроверкиКонтрольнойМарки, СтрокаТовара);
				КонтекстПроверкиКонтрольнойМарки.КонтекстВызова = "ПроверитьКодыМаркировкиПриПродолженииЧека";
				КонтекстПроверкиКонтрольнойМарки.КодМаркировки = КодМаркировки;
				
				ВременныйКонтекстПроверкиМарки = КонтекстПроверкиКонтрольнойМарки;
				ОбработатьКонтрольнуюМарку(КонтекстПроверкиКонтрольнойМарки);
			КонецЕсли;
		Иначе
			// Перейдем к следующей марке.
			ПроверитьКодМаркировкиПриПродолженииЧека();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЧекКлиентПослеПроверкиКодовМаркировки()
	
	УстановитьАктивностьСтроки();
	
	ОтменитьПримененныеБонусы(Ложь);
	ПересчитатьИтогиТабличнойЧастиТовары();
	НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Истина);
	НастроитьЭлементыФормыПоОтложенномуЧеку();
	
	ЭтоОперацияВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
	ЭтоОперацияСкупка = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииСкупка(Объект.ВидОперации);
	ЭтоОперацияВозвратСкупки = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозвратСкупки(Объект.ВидОперации);
	
	Если ЭтоОперацияВозврат Тогда
		НастроитьЭлементыВРежимеВозврат();
	ИначеЕсли ЭтоОперацияСкупка Тогда
		НастроитьЭлементыВРежимеСкупка();
	ИначеЕсли ЭтоОперацияВозвратСкупки Тогда
		НастроитьЭлементыВРежимеВозвратСкупки();
	КонецЕсли;
	
	Если ВыбранБанковскийПлатеж Тогда
		
		НастроитьФормуВРежимБанковскогоПлатежа();
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаБезнал, Истина);
		СуммаОплаченоБезнал = СуммаИтого;
		РассчитатьСуммыОплаты();
		НастроитьДоступностьПробитьЧек();
		
	КонецЕсли;
	
	Если Не ОтложенныйЧекПолностьюОплачен Тогда
		Если объект.Оплачивается Тогда
			ПереключитьВРежимОплатыНаКлиенте();
		КонецЕсли;
		ПродолжитьОплачиваемыйЧекQRКодом();
	КонецЕсли;
	ОбработатьИзменениеТаблицыТоваровНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСветовойСигналОбОшибкеНаДисплей()
	ВывестиИнформациюНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.Ошибка);
КонецПроцедуры

&НаКлиенте
Процедура ПогаситьСветовойСигналОбОшибкеНаДисплее()
	ВывестиСветовойСигналНаДисплей("РабочееМестоРаботает");
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСветовойСигналНаДисплей(ИмяСтатуса)
	
	ПараметрыОперации = МенеджерОборудованияРМККлиент.ПараметрыОперацииДисплейПокупателя();
	Если ПараметрыОперации.Свойство("СтатусРабочегоМеста") Тогда
		ПолноеИмяСтатуса = СтрШаблон("Перечисление.СтатусРабочегоМестаНаДисплее.%1", ИмяСтатуса);
		СтатусРабочегоМеста = ПредопределенноеЗначение(ПолноеИмяСтатуса);
		ПараметрыОперации.СтатусРабочегоМеста = СтатусРабочегоМеста;
			
		МенеджерОборудованияРМККлиент.НачатьВыводСтатусаРабочегоМестаНаДисплейПокупателя(Неопределено,
			УникальныйИдентификатор, Неопределено, ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСПродавцами

&НаСервере
Процедура ЗаполнитьТаблицуСотрудников()
	
	НоваяТаблицаСотрудников = ТаблицаСотрудников.Выгрузить();
	НоваяТаблицаСотрудников.Очистить();
	ВыборПродавцаИзСписка = ИспользоватьСерверЛояльностиПолучательДанных И НеИспользоватьПродавцов;
	Если ВыборПродавцаИзСписка Тогда
		
		ПараметрыПодключения = ОбщегоНазначенияРМК.ЗначенияПараметровСервераЛояльности(ТекущаяНастройкаРМК);
		ЗначенияПараметровМетода = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыМетодовБонуснойПодсистемы();
		СтруктураПараметровЗапросаСотрудников = ПолучитьСтруктуруПараметровЗапросаСотрудников();
		
		ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.
									ПараметрыЗапросаПолучитьТаблицуСотрудников(ПараметрыПодключения, СтруктураПараметровЗапросаСотрудников);
		Результат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
		
		Если Не Результат.ЕстьОшибки Тогда
			СтрокаJSON = Результат.ДанныеОтвета;
			ДанныеОтвета = Неопределено;
			Если СтрокаJSON <> Неопределено Тогда
				СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
				Если ДанныеОтвета <> Неопределено И ТипЗнч(ДанныеОтвета) = Тип("Массив") Тогда
					Для Каждого СтрокаМассива Из ДанныеОтвета Цикл
						НоваяСтрока = ТаблицаСотрудников.Добавить();
						НоваяСтрока.СотрудникПредставление = СтрокаМассива.EmployeeDescription;
						НоваяСтрока.ИдентификаторСотрудника = СтрокаМассива.EmployeeID;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруПараметровЗапросаСотрудников()
	
	ТорговыйОбъект 		 = Объект.ТорговыйОбъект;

	СтруктураПараметров = СерверЛояльностиПолучательДанныхКлиентСервер.СтруктураПараметровЗапросаСотрудников();
	СтруктураПараметров.Вставить("Store", Строка(ТорговыйОбъект.УникальныйИдентификатор()));
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ВернутьАдресХранилищаТаблицаСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаСотрудников.Выгрузить(),УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПродавцаИзКассира(ТекущиеДанные)
	ТекущиеДанные.Продавец = Объект.Кассир;
	ТекущиеДанные.ПродавецПредставление = Строка(Объект.Кассир);
	ТекущийПродавец = СтрШаблон("%1 %2", НСтр("ru = 'Продавец:'"), ТекущиеДанные.ПродавецПредставление);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПродавца(Результат)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ВыделенныеСтроки Цикл
		ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(СтрокаТаблицы);
		Продавец = Результат;
		ПродавецПредставление = ?(Результат = Неопределено, "", Строка(Результат));
		Если ВыборПродавцаИзСписка Тогда
			СтрокиТаблицы = ТаблицаСотрудников.НайтиСтроки(Новый Структура("ИдентификаторСотрудника", Продавец));
			Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
				ПродавецПредставление = СтрокаТаблицы.СотрудникПредставление;
			КонецЦикла;
		КонецЕсли;
		
		Если ТекущиеДанные.ЭтоНабор Тогда
			НомерНабора = ТекущиеДанные.НомерНабора;
			ЗаполнитьПродавцаВНаборе(Продавец, ПродавецПредставление, НомерНабора);
		Иначе
			Если ВыборПродавцаИзСписка Тогда
				ТекущиеДанные.ИдентификаторПродавца = Продавец;
				ТекущиеДанные.ПродавецПредставление = ПродавецПредставление;
			Иначе
				ТекущиеДанные.Продавец = Продавец;
				ТекущиеДанные.ПродавецПредставление = Продавец;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Результат = Неопределено Тогда
			ТекущийПродавец = СтрШаблон("%1 %2", НСтр("ru = 'Продавец:'"), ПродавецПредставление);
		Иначе
			ТекущийПродавец = "";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПродавца()
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		Если НЕ СтрокаТаблицы.Продавец.Пустая() Тогда
			СтрокаТаблицы.ПродавецПредставление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Продавец, "Наименование");
		ИначеЕсли НЕ ПустаяСтрока(СтрокаТаблицы.ИдентификаторПродавца) Тогда
			СтруктураПоиска = Новый Структура("ИдентификаторСотрудника", СтрокаТаблицы.ИдентификаторПродавца);
			СтрокиСотрудники = ТаблицаСотрудников.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаПоиска Из СтрокиСотрудники Цикл
				СтрокаТаблицы.ПродавецПредставление = СтрокаПоиска.СотрудникПредставление;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти

&НаКлиенте
Функция ПолеВводаСозданияКартыДоступноИВидимо(ПолеВвода)
	РезультатФункции = (ПолеВвода.Доступность И ПолеВвода.Видимость
		И ПолеВвода.Родитель.Доступность И ПолеВвода.Родитель.Видимость);
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Процедура УстановитьАктивностьНаКнопкеОтправкиПробитияЧека()
	
	ТекущаяСтраницаОтправкиЧека = Элементы.ГруппаСтраницыКнопкиОтправитьЧек.ТекущаяСтраница;
	Если ТекущаяСтраницаОтправкиЧека = Элементы.ГруппаСтраницаКнопкаПробитьЧек Тогда
		ТекущийЭлемент = Элементы.ОтправкаПробитьЧек;
	ИначеЕсли ТекущаяСтраницаОтправкиЧека = Элементы.ГруппаСтраницаКнопкаОтправитьЧек Тогда
		ТекущийЭлемент = Элементы.ОтправкаОтправитьЧек;
	Иначе
		ТекущийЭлемент = Элементы.ОтправитьЧек;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоПолучениеСтабильногоВеса(ИмяСобытия, Параметр)
	Возврат (ИмяСобытия = "Weighting" И Параметр.Вес > 0 И Параметр.Стабилизация = Истина);
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеССервераЛояльности()
	
	ЗаполнитьТаблицуУправляемыхСкидок();
	ЗаполнитьТаблицуСотрудников();
	ЗаполнитьТаблицуВидовКарт();
	ЗаполнитьТаблицуСкидокЗависящихОтВидаОплаты();
	Если ЗначениеЗаполнено(Объект.ТорговыйОбъект) И ИспользоватьКонтрольПродаж
			И ИспользоватьСерверЛояльностиПолучательДанных Тогда
		ОбновитьКалендарныеОграниченияПродаж();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеЛояльностиИПерейтиВРежимОплаты(Результат, ДополнительныеПараметры) Экспорт
	
	ЭтоПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	ПроцессПереходаКОплате = Истина;
	МаксимальноВозможнаяСуммаОплатыБонусами = 0;
	Если Не ЭтоПродажа Тогда
		ПроцессПереходаКОплате = Ложь;
		ПереключитьВРежимОплатыНаКлиенте();
	ИначеЕсли ТребуетсяЗапросКартыЛояльности() Тогда
		ПоказатьДиалогВводаКартыЛояльностиПередОплатой();
	Иначе
		ПоказатьВводБонусовПриНеобходимостиИПерейтиКОплате();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВводБонусовПриНеобходимостиИПерейтиКОплате()

	НеобходимПересчетАвтоматическихСкидок = ОпределитьНеобходимостьПересчетаАвтоматическихСкидок();
	Если НеобходимПересчетАвтоматическихСкидок И ВопросПоРасчетуСкидок Тогда
		ЗадатьВопросПоРасчетуСкидок("ПоказатьВводБонусовПриНеобходимостиИПерейтиКОплатеЗавершение", , Истина);
	Иначе
		КодВозвратаОтвет = ?(НеобходимПересчетАвтоматическихСкидок, КодВозвратаДиалога.Да, КодВозвратаДиалога.Нет);
		ПоказатьВводБонусовПриНеобходимостиИПерейтиКОплатеЗавершение(КодВозвратаОтвет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВводБонусовПриНеобходимостиИПерейтиКОплатеЗавершение(Результат,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИмяМетода = "ПоказатьВводБонусовПриНеобходимостиИПерейтиКОплатеКлиент";
		РассчитатьСкидкиКлиент(Истина);
	Иначе
		ПоказатьВводБонусовПриНеобходимостиИПерейтиКОплатеКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВводБонусовПриНеобходимостиИПерейтиКОплатеКлиент(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	МаксимальноВозможнаяСуммаОплатыБонусами = 0;
	Если ТребуетсяЗапросОплатыБонусами(МаксимальноВозможнаяСуммаОплатыБонусами) Тогда
		ПоказатьДиалогВводаБонусовПередОплатой(МаксимальноВозможнаяСуммаОплатыБонусами);
	Иначе
		ВыполнитьПереходКОплатеПослеПроверкиКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяЗапросКартыЛояльности()
	
	РезультатФункции = Ложь;
	
	Если НапоминатьПроВводКартыЛояльности И (Не ОтказОтОплатыБонусами)
		И (Не ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеЛояльностиЗаполнены(ЭтотОбъект)) Тогда
		РезультатФункции = Истина;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция ТребуетсяЗапросОплатыБонусами(МаксимальноВозможнаяСуммаОплатыБонусами)
	
	Если Не ОтказОтОплатыБонусами Тогда
		Если СуммаМожноПрименитьБонусов > 0 Тогда
			МаксимальноВозможнаяСуммаОплатыБонусами = СуммаМожноПрименитьБонусов;
		Иначе
			МаксимальноВозможнаяСуммаОплатыБонусами
				= ИнтерфейсРМКСлужебныйКлиент.ПолучитьМаксимальноВозможнуюСуммуОплатыБонусами(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	Возврат (МаксимальноВозможнаяСуммаОплатыБонусами > 0 И Не ОтказОтОплатыБонусами);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьДиалогВводаКартыЛояльностиПередОплатой()
	
	ПанельПокупателяВПроцессеПереходаКОплате = Истина;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыборМеню, Ложь);
	Элементы.ДекорацияКартаНеНайденаТекст.Высота = 2;
	УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияНапоминаниеВводКарты, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияПоискКартыЗаголовок, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСлоевОсновнаяКоманднаяПанельУправленияЧеком, Ложь);
	Если РежимКассыСамообслуживания Или Не ВертикальнаяОриентация Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ОтказатьсяОтВводаКартыПоиск, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ОтказатьсяОтВводаКартыНеНайдена, Истина);
	КонецЕсли;
	ВвестиДанныеПокупателяКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогВводаБонусовПередОплатой(МаксимальноВозможнаяСуммаОплатыБонусами)
	
	ПанельПокупателяВПроцессеПереходаКОплате = Истина;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыборМеню, Ложь);
	ПодготовитьДиалогВводаБонусов(МаксимальноВозможнаяСуммаОплатыБонусами);
	Если Не РежимКассыСамообслуживания Тогда
		ЗаполнитьДанныеДисплеяПокупателяОплатыБонусами(МаксимальноВозможнаяСуммаОплатыБонусами);
	КонецЕсли;
	ВвестиДанныеПокупателяКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаДиалогВводаБонусов()
	
	ПодготовитьДиалогВводаБонусов(СуммаМожноПрименитьБонусов);
	ПереключитьНаСтраницуВводаОплатыБонусами();
	НастроитьДоступностьГорячейКлавишиEnter();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьДиалогВводаБонусов(МаксимальноВозможнаяСуммаОплатыБонусами)
	
	ОткрытДиалогВводаБонусов = Истина;
	
	СуммаКОплатеБонусами = МаксимальноВозможнаяСуммаОплатыБонусами;
	СуммаМожноПрименитьБонусов = МаксимальноВозможнаяСуммаОплатыБонусами;
	Элементы.СуммаКОплатеБонусами.РасширеннаяПодсказка.Заголовок
		= ФорматированнаяПодсказкаМаксимальноДоступныхБонусов(МаксимальноВозможнаяСуммаОплатыБонусами);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВводДанныхЛояльностиИПродолжитьПереходКОплате(ПропуститьРасчетСкидок = Ложь)
	
	ПанельПокупателяВПроцессеПереходаКОплате = Ложь;
	Если ОткрытДиалогВводаБонусов Тогда
		НастроитьКнопкиЦифровойПанелиВРежимеДанныхПокупателя();
		ВыключитьОшибкуСуммыБонусов();
		ОткрытДиалогВводаБонусов = Ложь;
		ЭлементВводаСуммы = Неопределено;
		Если Не Элементы.СуммаКОплатеБонусами.Доступность Тогда
			УстановитьДоступностьЭлементаФормы(Элементы.СуммаКОплатеБонусами, Истина);
			УстановитьДоступностьЭлементаФормы(Элементы.ОплатитьБонусамиВПроцессеПереходаКОплате, Истина);
			Если Не ВертикальнаяОриентация Тогда
				Элементы.ГруппаВводОплатыБонусами.РастягиватьПоВертикали = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДекорацияКартаНеНайденаТекст.Высота = 0;
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаВыборМеню, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияНапоминаниеВводКарты, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияПоискКартыЗаголовок, Истина);
	Элементы.ЗакрытьФормуДанныеПокупателя.Заголовок
		= ИнтерфейсРМКСлужебныйКлиентСервер.НаименованиеКнопкиЗакрытияДанныхПокупателя(РежимКассыСамообслуживания);
	ВосстановитьСостоянияНаПанелиПокупателяПослеПереходаКОплате();
	Элементы.ЗакрытьФормуДанныеПокупателя.ЦветФона = Новый Цвет();
	НастроитьДополнительнуюПанельКартаНайдена();
	Если ПропуститьРасчетСкидок Тогда
		ВыполнитьПереходКОплатеПослеПроверкиКлиент();
	Иначе
		ВыполнитьПереходКОплатеПослеПроверки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьСостоянияНаПанелиПокупателяПослеПереходаКОплате()

	ИзменитьВидимостьЭлементаПриНеобходимости(Элементы.ГруппаСлоевОсновнаяКоманднаяПанельУправленияЧеком, Истина);
	ИзменитьВидимостьЭлементаПриНеобходимости(Элементы.ОтказатьсяОтВводаКартыПоиск, Ложь);
	ИзменитьВидимостьЭлементаПриНеобходимости(Элементы.ОтказатьсяОтВводаКартыНеНайдена, Ложь);
	ИзменитьВидимостьЭлементаПриНеобходимости(Элементы.ОтказатьсяОтОплатыБонусами, Истина);
	ИзменитьВидимостьЭлементаПриНеобходимости(Элементы.ОтказатьсяОтОплатыБонусамиСМС, Ложь);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьВидимостьЭлементаПриНеобходимости(Элемент, НовоеЗначение)
	
	Если Не Элемент.Видимость = НовоеЗначение Тогда
		УстановитьВидимостьЭлементаФормы(Элемент, НовоеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьВыборДанныхЛояльностиПриПереходеКОплате()
	
	РезультатФункции = 0;
	ВозможныеРезультаты = ВозможныеРезультатыОбработкиЛояльностиПриПереходеКОплате();
	
	ГруппаСлоевОсновнойОбласти = Элементы.ГруппаСлоевДанныеПокупателяОсновнаяОбласть;
	ТекущаяОсновнаяГруппаДанныхПокупателя
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ГруппаСлоевОсновнойОбласти);
	Если ТекущаяОсновнаяГруппаДанныхПокупателя = Элементы.ОсновнаяГруппаКартаНайдена Тогда
		ГруппаСлоевДполпнительнойОбласти = Элементы.ГруппаСлоевДанныеПокупателяДополнительнаяОбласть;
		ТекущаяДополнительнаяГруппаДанныхПокупателя
			= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ГруппаСлоевДполпнительнойОбласти);
		Если ТекущаяДополнительнаяГруппаДанныхПокупателя = Элементы.ГруппаПодтверждениеСМС Тогда
			РезультатФункции = ВозможныеРезультаты.ЗавершитьВвод;
		Иначе
			Элементы.ЗакрытьФормуДанныеПокупателя.ЦветФона = Новый Цвет();
			МаксимальноВозможнаяСуммаОплатыБонусами = 0;
			Если ТребуетсяЗапросОплатыБонусами(МаксимальноВозможнаяСуммаОплатыБонусами) Тогда
				РезультатФункции = ВозможныеРезультаты.ПереключитьНаДиалогВводаБонусов;
			Иначе
				РезультатФункции = ВозможныеРезультаты.ЗавершитьВвод;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТекущаяОсновнаяГруппаДанныхПокупателя = Элементы.ГруппаВводОплатыБонусами Тогда
		РезультатФункции = ВозможныеРезультаты.ЗавершитьВводОплатыБонусами;
	Иначе
		РезультатФункции = ВозможныеРезультаты.ЗавершитьВвод;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВыборДанныхЛояльностиПриПереходеКОплате(РезультатВыбора)
	
	ВозможныеРезультаты = ВозможныеРезультатыОбработкиЛояльностиПриПереходеКОплате();
	Если РезультатВыбора = ВозможныеРезультаты.ЗавершитьВвод Тогда
		ЗавершитьВводДанныхЛояльностиИПродолжитьПереходКОплате();
	ИначеЕсли РезультатВыбора = ВозможныеРезультаты.ЗавершитьВводОплатыБонусами Тогда
		ЗавершитьВводДанныхЛояльностиИПродолжитьПереходКОплате(Истина);
		Элементы.СуммаКОплатеБонусами.РасширеннаяПодсказка.Заголовок = "";
		СуммаКОплатеБонусами = 0;
	ИначеЕсли ВозможныеРезультаты.ПереключитьНаДиалогВводаБонусов Тогда
		ПереключитьНаДиалогВводаБонусов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВозможныеРезультатыОбработкиЛояльностиПриПереходеКОплате()
	
	РезультатыВыбора = Новый Структура();
	РезультатыВыбора.Вставить("ЗавершитьВвод", 1);
	РезультатыВыбора.Вставить("ЗавершитьВводОплатыБонусами", 2);
	РезультатыВыбора.Вставить("ПереключитьНаДиалогВводаБонусов", 3);
	
	Возврат РезультатыВыбора;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПереходКОплатеПослеПроверки()
	
	ПереключитьРежимНаПоказСкидок(Ложь);
	ПереключитьРежимПоказаОстатков(Ложь);
	
	НеобходимПересчетАвтоматическихСкидок = ОпределитьНеобходимостьПересчетаАвтоматическихСкидок();
	Если НеобходимПересчетАвтоматическихСкидок И ВопросПоРасчетуСкидок Тогда
		ЗадатьВопросПоРасчетуСкидок("ВыполнитьПереходКОплатеПослеПроверкиЗавершение", , Истина);
	Иначе
		КодВозвратаОтвет = ?(НеобходимПересчетАвтоматическихСкидок, КодВозвратаДиалога.Да, КодВозвратаДиалога.Нет);
		ВыполнитьПереходКОплатеПослеПроверкиЗавершение(КодВозвратаОтвет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПереходКОплатеПослеПроверкиЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИмяМетода = "ВыполнитьПереходКОплатеПослеПроверкиКлиент";
		РассчитатьСкидкиКлиент(Истина);
	Иначе
		ВыполнитьПереходКОплатеПослеПроверкиКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПереходКОплатеПослеПроверкиКлиент(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПроцессПереходаКОплате = Ложь;
	Если ИспользуемыеВидыОплат.Количество() > 1 Тогда
		ПереключитьВРежимОплатыНаКлиенте();
	ИначеЕсли ИспользуемыеВидыОплат.Количество() = 1 Тогда
		ИмяГруппыВидаОплаты = СтрШаблон("%1%2", ИнтерфейсРМКСлужебныйКлиент.ОбщаяЧастьИмениГруппВидовОплат(),
			ИспользуемыеВидыОплат[0]);
		Если Элементы.ГруппаВидОплатыКартой.Имя = ИмяГруппыВидаОплаты Тогда
			ОплатитьКартойИПробитьЧекВТихомРежиме();
		ИначеЕсли Элементы.ГруппаВидОплатыНаличнымиГоризонтально.Имя = ИмяГруппыВидаОплаты Тогда
			ОплатитьНаличнымиИПробитьЧекВТихомРежиме();
		ИначеЕсли Элементы.ГруппаВидОплатыСБП.Имя = ИмяГруппыВидаОплаты Тогда
			ОплатитьСБППробитьЧекВТихомРежиме();
		ИначеЕсли Элементы.ГруппаВидОплатыЮКасса.Имя = ИмяГруппыВидаОплаты Тогда
			ОплатитьЮКассаПробитьЧекВТихомРежиме();
		Иначе
			ПереключитьВРежимОплатыНаКлиенте();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РежимДопускаетВыборПодарка(ОткрыватьФормуВыбораПодарков = Ложь)
	Возврат (ЭтоКассирБезПоказаСкидок(ОткрыватьФормуВыбораПодарков) Или ВключенаВыдачаПодарковНаКассеСамообслуживания());
КонецФункции

&НаКлиенте
Функция ЭтоКассирБезПоказаСкидок(ОткрыватьФормуВыбораПодарков = Ложь)
	Возврат (НЕ (РежимПоказаСкидок Или РежимКассыСамообслуживания) ИЛИ РежимПоказаСкидок И ОткрыватьФормуВыбораПодарков);
КонецФункции

&НаКлиенте
Функция ВключенаВыдачаПодарковНаКассеСамообслуживания()
	Возврат (ВыдаватьПодарокНаКассе И РежимКассыСамообслуживания);
КонецФункции

&НаКлиенте
Процедура ОпределитьИспользуемыеВидыОплат()
	
	Если ИспользуемыеВидыОплат = Неопределено Тогда
		ИнтерфейсРМКСлужебныйКлиент.ОпределитьИспользуемыеВидыОплат(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьСБППробитьЧекВТихомРежиме()
	
	ОповещениеПродолжения = Новый ОписаниеОповещения(
		"ОплатитьПробитьЧекВТихомРежимеПродолжение",
		ЭтотОбъект,
		Новый Структура("КомандаОплаты", ЭтотОбъект.Команды.Найти(Элементы.ОплатаСБП.ИмяКоманды)));
	
	ПереключитьВРежимОплатыНаКлиенте(,,,ОповещениеПродолжения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьЮКассаПробитьЧекВТихомРежиме()
	
	ОповещениеПродолжения = Новый ОписаниеОповещения(
		"ОплатитьПробитьЧекВТихомРежимеПродолжение",
		ЭтотОбъект,
		Новый Структура("КомандаОплаты", ЭтотОбъект.Команды.Найти(Элементы.ОплатаЮКасса.ИмяКоманды)));
	
	ПереключитьВРежимОплатыНаКлиенте(,,,ОповещениеПродолжения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьПробитьЧекВТихомРежимеПродолжение(Результат, ДополнительныеПараметры) Экспорт
	КомандаОплатаQRКодом(ДополнительныеПараметры.КомандаОплаты);
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьКлиентскиеПеременные()
	
	ТекущиеЭлектронныеВесы = Неопределено;
	РаспознаваниеБыло = Ложь;
	ОжиданиеКонтроляВеса = Истина;
	ПанельПокупателяВПроцессеПереходаКОплате = Ложь;
	ОткрытДиалогВводаБонусов = Ложь;
	ОтказОтОплатыБонусами = Ложь;
	ВключеноИспользованиеАвтоматическихСкидок = Ложь;
	ДатаВремяПереходаКДействиямСотрудника = Дата(1, 1, 1);
	ДанныеДляОбработки = Новый Структура();
	ТипыОперацийДисплеяПокупателя = МенеджерОборудованияРМККлиент.ТипыОперацийДисплеяПокупателя();
	КэшКонтроляПродаж = ИнтерфейсРМКСлужебныйКлиентСервер.ШаблонКэшаКонтроляПродаж();
	РезультатКонтроляПродаж = ИнтерфейсРМКСлужебныйКлиент.ШаблонРезультатаКонтроляПродаж();
	ОткрытоПредупреждениеОЗапретеОплатыБонусами = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьДекорациюВводКарты()
	Если ПроцессПереходаКОплате Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияНапоминаниеВводКарты, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПоискКартыПриПереходеКОплате()
	Если ПроцессПереходаКОплате Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияНапоминаниеВводКарты, Ложь);
		ГруппаСлоевДполпнительнойОбласти = Элементы.ГруппаСлоевДанныеПокупателяДополнительнаяОбласть;
		ТекущаяДополнительнаяГруппаДанныхПокупателя
			= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ГруппаСлоевДполпнительнойОбласти);
		Если ТекущаяДополнительнаяГруппаДанныхПокупателя = Элементы.ГруппаПодтверждениеСМС Тогда
			
		Иначе
			ОтобразитьПродолжениеНаКнопкеЗакрытьДанныеПокупателя();
		КонецЕсли;
		НастроитьДополнительнуюПанельКартаНайдена();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПродолжениеНаКнопкеЗакрытьДанныеПокупателя()
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСлоевОсновнаяКоманднаяПанельУправленияЧеком, Истина);
	Элементы.ЗакрытьФормуДанныеПокупателя.Заголовок = НаименованиеКнопкиЗакрытьДанныеПокупателяУспешноеПродолжение();
	Элементы.ЗакрытьФормуДанныеПокупателя.ЦветФона = Элементы.ПробитьЧек.ЦветФона;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПродолжениеНаКнопкеЗакрытьДанныеПокупателяПриНеобходимости()
	
	Если ПроцессПереходаКОплате Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСлоевОсновнаяКоманднаяПанельУправленияЧеком, Истина);
		Элементы.ЗакрытьФормуДанныеПокупателя.Заголовок = НаименованиеКнопкиЗакрытьДанныеПокупателяУспешноеПродолжение();
		Элементы.ЗакрытьФормуДанныеПокупателя.ЦветФона = Элементы.ПробитьЧек.ЦветФона;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НаименованиеКнопкиЗакрытьДанныеПокупателяУспешноеПродолжение()
	Возврат НСтр("ru = 'Продолжить'");
КонецФункции

&НаКлиенте
Процедура ВосстановитьДиалогВводаКартыЛояльностиПередОплатой()
	
	Если ПроцессПереходаКОплате Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияНапоминаниеВводКарты, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСлоевОсновнаяКоманднаяПанельУправленияЧеком, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДополнительнуюПанельКартаНайдена()
	
	ВысотаОтступа = 3;
	УстановитьВидимостьЭлементаФормы(Элементы.ОплатитьБонусами, Не ПанельПокупателяВПроцессеПереходаКОплате);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаДоступноКОплате, Не ПанельПокупателяВПроцессеПереходаКОплате);
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаМожноПрименить, ПанельПокупателяВПроцессеПереходаКОплате);
	Элементы.ДекорацияИнформацияОБонусахОтступ.Высота = ?(ПанельПокупателяВПроцессеПереходаКОплате, 1, ВысотаОтступа);
	Если ПанельПокупателяВПроцессеПереходаКОплате Тогда
		МаксимальноВозможнаяСуммаОплатыБонусами
			= ИнтерфейсРМКСлужебныйКлиент.ПолучитьМаксимальноВозможнуюСуммуОплатыБонусами(ЭтотОбъект);
		СуммаМожноПрименитьБонусов = МаксимальноВозможнаяСуммаОплатыБонусами;
	Иначе
		СуммаМожноПрименитьБонусов = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьБонусамиВПроцессеПереходаКОплатеКлиент()
	
	Если СуммаКОплатеБонусами > СуммаМожноПрименитьБонусов Тогда
		ДоступноБонусовСтрокой = Формат(СуммаМожноПрименитьБонусов, "ЧДЦ=2");
		ТекстЗаголовка = СтрШаблон(НСтр("ru = 'К оплате бонусами доступно не более %1 %2'"), 
			ДоступноБонусовСтрокой, 
			ПредставлениеВалюты);
		ВключитьОшибкуСуммыБонусов(ТекстЗаголовка);
	ИначеЕсли СуммаКОплатеБонусами = 0 Тогда
		ТекстЗаголовка = НСтр("ru = 'Не заполнены бонусы'");
		ВключитьОшибкуСуммыБонусов(ТекстЗаголовка);
	ИначеЕсли (Не ПараметрыВводаКодаSMS = Неопределено)
			И ПараметрыВводаКодаSMS.ВариантПроверки = "ПриОплатеБонусами" Тогда
		УстановитьДоступностьЭлементаФормы(Элементы.СуммаКОплатеБонусами, Ложь);
		Если Не ВертикальнаяОриентация Тогда
			УстановитьВидимостьЭлементаФормы(Элементы.ОтказатьсяОтОплатыБонусами, Ложь);
			УстановитьВидимостьЭлементаФормы(Элементы.ОтказатьсяОтОплатыБонусамиСМС, Истина);
			Элементы.ГруппаВводОплатыБонусами.РастягиватьПоВертикали = Ложь;
		КонецЕсли;
		ВыключитьОшибкуСуммыБонусов();
		ПереключитьНаСтраницуВводаКодаSMS(Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ОплатитьБонусамиВПроцессеПереходаКОплате, Ложь);
		ЭлементВводаДанныхПокупателя = Неопределено;
		ЭлементВводаСуммы = Неопределено;
	Иначе
		ОплатитьБонусамиПриПереходеКОплатеКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОшибкуСуммыБонусов(ТекстЗаголовка)
	
	Если Не Элементы.ДекорацияОшибкаСуммыБонусов.Видимость Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияОшибкаСуммыБонусов, Истина);
	КонецЕсли;
	Элементы.ДекорацияОшибкаСуммыБонусов.Заголовок = ТекстЗаголовка;
	Элементы.СуммаКОплатеБонусами.ЦветРамки = WebЦвета.Красный;
	ТекущийЭлемент = Элементы.СуммаКОплатеБонусами;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьОшибкуСуммыБонусов()
	
	Если Элементы.ДекорацияОшибкаСуммыБонусов.Видимость Тогда
		Элементы.ДекорацияОшибкаСуммыБонусов.Заголовок = "";
		УстановитьВидимостьЭлементаФормы(Элементы.ДекорацияОшибкаСуммыБонусов, Ложь);
		Элементы.СуммаКОплатеБонусами.ЦветРамки = Новый Цвет();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция АктивноПолеВводаСуммыКОплатеБонусами()
	
	РезультатФункции = Ложь;
	ОбластьДанныхПокупателя = Элементы.ГруппаСлоевДанныеПокупателяОсновнаяОбласть;
	ОсновнойТекущийСлой = ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ОбластьДанныхПокупателя);
	Если ОсновнойТекущийСлой = Элементы.ГруппаВводОплатыБонусами И ТекущийЭлемент = Элементы.СуммаКОплатеБонусами Тогда
		РезультатФункции = Истина;
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция ФорматированнаяПодсказкаМаксимальноДоступныхБонусов(МаксимальноВозможнаяСуммаОплатыБонусами)
	
	Возврат СтрШаблон(НСтр("ru = '%1до %2 р.'"), " ", Формат(МаксимальноВозможнаяСуммаОплатыБонусами, "ЧЦ=10; ЧДЦ=2"));
	
КонецФункции

&НаКлиенте
Процедура ПереключитьНаСтраницуВводаОплатыБонусами()
	
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаВводОплатыБонусами);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаПустаяДополнительнаяГруппа);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаКомандОплатитьБонусами);
	НастроитьЦифровуюПанель();
	НастроитьКнопкиЦифровойПанелиДляВводаСумм(Истина);
	ТекущийЭлемент = Элементы.СуммаКОплатеБонусами;
	ЭлементВводаДанныхПокупателя = ТекущийЭлемент;
	ЭлементВводаСуммы = ТекущийЭлемент;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоЧисловоеПолеДанныхПокупателя()
	
	РезультатФункции = Ложь;
	
	ЧисловыеПоляДанныхПокупателя = Новый Массив;
	ЧисловыеПоляДанныхПокупателя.Добавить(Элементы.СуммаКОплатеБонусами);
	Если Не ЧисловыеПоляДанныхПокупателя.Найти(ЭлементВводаСуммы) = Неопределено Тогда
		РезультатФункции = Истина;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ОплатитьБонусамиПриПереходеКОплатеКлиент()
	
	ЗакрытьФормуДанныеПокупателяКлиент();
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаБонусами, Истина);
	Элементы.СтраницыОплатаБонусами.ТекущаяСтраница = Элементы.ГруппаОплатаБонусами;
	Если РежимРаботыСЧеком = РежимыРаботыСЧеком.ЧекПустой Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ВводТоваров Тогда
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
		УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, Истина);
	КонецЕсли;
	
	РассчитыватьБонусы = Истина;
	ПрименитьСуммуОплатыБонусами();
	
	ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
	ПараметрыПересчета.ПоКомандеОплатитьВсюСуммуБонусами = Истина;
	РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
	СуммаКОплатеБонусами = 0;
	ЗавершитьВводДанныхЛояльностиИПродолжитьПереходКОплате(Истина);
	Элементы.СуммаКОплатеБонусами.РасширеннаяПодсказка.Заголовок = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьСуммуОплатыБонусами()
	
	СуммаБонусов = СуммаКОплатеБонусами;
	СуммаОплаченоБонусами = СуммаКОплатеБонусами;
	ПредупреждениеОПродукцииБезОплатыБонусамиПоказано = Истина;
	РаспределитьБонусыПоТоварам();
	ПересчитатьИтогиТабличнойЧастиТовары(Ложь);
	
	РаспределенныеБонусы = Объект.Товары.Итог("СуммаСкидкиОплатыБонусом");
	НастроитьЭлементыВидаОплатыБонусами(СуммаМожноПрименитьБонусов);
	
КонецПроцедуры
	
&НаКлиенте
Процедура НастроитьЭлементыВидаОплатыБонусами(МаксимальноеКоличествоБонусовКИспользованию)
	
	СоставляющаяПодсказки = "";
	Если МаксимальноеКоличествоБонусовКИспользованию > 0 Тогда
		СоставляющаяПодсказки
				= ФорматированнаяПодсказкаМаксимальноДоступныхБонусов(МаксимальноеКоличествоБонусовКИспользованию);
	КонецЕсли;
	Элементы.ГруппаВидОплатыБонусы.РасширеннаяПодсказка.Заголовок = СоставляющаяПодсказки;
	Элементы.СуммаОплаченоБонусами.МаксимальноеЗначение = МаксимальноеКоличествоБонусовКИспользованию;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОсновнуюКомандуДанныхПокупателя()
	
	ГруппаСлоевДполпнительнойОбласти = Элементы.ГруппаСлоевДанныеПокупателяДополнительнаяОбласть;
	ТекущаяДополнительнаяГруппаДанныхПокупателя
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ГруппаСлоевДполпнительнойОбласти);
	Если Не ТекущаяДополнительнаяГруппаДанныхПокупателя = Элементы.ГруппаПодтверждениеСМС Тогда
		
		Если ПроцессПереходаКОплате Тогда
			
			ГруппаСлоевОсновнойОбласти = Элементы.ГруппаСлоевДанныеПокупателяОсновнаяОбласть;
			ТекущаяОсновнаяГруппаДанныхПокупателя
				= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ГруппаСлоевОсновнойОбласти);
			Если ТекущаяОсновнаяГруппаДанныхПокупателя = Элементы.ОсновнаяГруппаКартаНайдена Тогда
				ЗакрытьФормуДанныеПокупателяСОтменойПробитияЧека();
			ИначеЕсли ТекущаяОсновнаяГруппаДанныхПокупателя = Элементы.ГруппаВводОплатыБонусами Тогда
				ОплатитьБонусамиВПроцессеПереходаКОплатеКлиент();
			КонецЕсли;
			
		Иначе
			
			ЗакрытьФормуЦифровойПанели();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуЗакрытияЦифровойПанели()
	
	МожноЗакрыть = Истина;
	Если РежимЦифровойПанели = РежимыЦифровойПанели.ДанныеПокупателя Тогда
		
		ГруппаСлоевОсновнойОбласти = Элементы.ГруппаСлоевДанныеПокупателяОсновнаяОбласть;
		ТекущаяОсновнаяГруппаДанныхПокупателя
			= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ГруппаСлоевОсновнойОбласти);
			
		ГруппаСлоевДполпнительнойОбласти = Элементы.ГруппаСлоевДанныеПокупателяДополнительнаяОбласть;
		ТекущаяДополнительнаяГруппаДанныхПокупателя
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(ГруппаСлоевДполпнительнойОбласти);
			
		Если ПроцессПереходаКОплате И ТекущаяОсновнаяГруппаДанныхПокупателя = Элементы.ОсновнаяГруппаКартаНайдена
				И Не ТекущаяДополнительнаяГруппаДанныхПокупателя = Элементы.ГруппаПодтверждениеСМС Тогда
				
			МожноЗакрыть = Ложь;
				
		КонецЕсли;
	КонецЕсли;
	
	Если МожноЗакрыть Тогда
		ЗакрытьФормуЦифровойПанели();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяОтОплатыБонусамиКлиент()
	
	ЗакрытьФормуДанныеПокупателяКлиент();
	ЗавершитьВводДанныхЛояльностиИПродолжитьПереходКОплате(Истина);
	Элементы.СуммаКОплатеБонусами.РасширеннаяПодсказка.Заголовок = "";
	СуммаКОплатеБонусами = 0;
	ОтказОтОплатыБонусами = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаголовокСкидкиНаЧек()
	Если МаксимальныйПроцентРучнойНаценки < 0 Тогда
		Если МаксимальныйПроцентРучнойСкидки > 0 Тогда
			Элементы.ПодписьЭлементаЗакрытияПанели.Заголовок = НСтр("ru = 'Скидка/Наценка на чек'");
		Иначе
			Элементы.ПодписьЭлементаЗакрытияПанели.Заголовок = НСтр("ru = 'Наценка на чек'");
		КонецЕсли;
	Иначе
		Элементы.ПодписьЭлементаЗакрытияПанели.Заголовок = НСтр("ru = 'Скидка на чек'");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаголовокСкидкиНаСтроку()
	ЗаголовокУстановлен = Ложь;
	Если ЗначениеСкидкиНаСтроку < 0 Тогда
		Элементы.ДекорацияТекущийТоварСкидка.Заголовок = НСтр("ru = 'Наценка'");
		ЗаголовокУстановлен = Истина;
	ИначеЕсли ЗначениеСкидкиНаСтроку > 0 Тогда
		Элементы.ДекорацияТекущийТоварСкидка.Заголовок = НСтр("ru = 'Скидка'");
		ЗаголовокУстановлен = Истина;
	КонецЕсли;
	
	Если ЗаголовокУстановлен Тогда
		Возврат;
	КонецЕсли;
	
	Если МаксимальныйПроцентРучнойНаценки < 0 Тогда
		Если МаксимальныйПроцентРучнойСкидки > 0 Тогда
			Элементы.ДекорацияТекущийТоварСкидка.Заголовок = НСтр("ru = 'Скидка/Наценка'");
		Иначе
			Элементы.ДекорацияТекущийТоварСкидка.Заголовок = НСтр("ru = 'Наценка'");
		КонецЕсли;
	Иначе
		Элементы.ДекорацияТекущийТоварСкидка.Заголовок = НСтр("ru = 'Скидка'");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ИнициализацияПараметровПанелиПлатежнойСистемы(ВыбранныйИдентификаторПС = Неопределено, АвтономнаяККТСБП = Ложь)
	
	Если ВыбранныйИдентификаторПС <> Неопределено Тогда
		
		ПлатежнаяСистема_ИдентификаторПС = ВыбранныйИдентификаторПС;
		ПлатежнаяСистема_ВидОплаты = ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОпределитьВидОплаты(ЭтотОбъект,
			ПлатежнаяСистема_ВидыОплат);
		ПлатежнаяСистема_СпособОплаты = ИнтеграцияСПлатежнымиСистемамиРМККлиент.ОпределитьСпособОплаты(ЭтотОбъект,
			ПлатежнаяСистема_ВидыОплат, ВыбраннаяОрганизация);
		
	КонецЕсли;
	
	ТекущаяОперация = "Оплата QR-кодом";
	
	ПереданныеПараметры = ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.ПараметрыИнициализации();
	
	ДокументОплачивается = ЗначениеЗаполнено(ОтложенныйЧек) И Объект.Оплачивается;
	ЭтоОперацияПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	Если ЭтоОперацияПродажа Тогда

		ПереданныеПараметры.ДокументОплаты 			= ?(ДокументОплачивается, ОтложенныйЧек, ЧекККМВОбработке);     
		
		ШаблонДекорации					   	  		= НСтр("ru = 'Сумма оплаты: %1 %2'");
		
		Элементы.ДекорацияСуммаЧека.Заголовок 		= СтрШаблон(
			ШаблонДекорации, 
			Формат(СуммаКОплате, "ЧДЦ=2; ЧГ="), 
			ПредставлениеВалюты);
		
		Элементы.ДекорацияСуммаЧекаПовтор.Заголовок = СтрШаблон(
			ШаблонДекорации, 
			Формат(СуммаКОплате, "ЧДЦ=2; ЧГ="), 
			ПредставлениеВалюты);
		
	Иначе
		
		ПереданныеПараметры.ДокументВозврата 	= ?(ДокументОплачивается, ОтложенныйЧек, ЧекККМВОбработке);
		ПереданныеПараметры.ДокументОплаты 		= ЭтотОбъект.ПлатежныеСистемы_ОснованиеПродажи;
		ПереданныеПараметры.ИдентификаторОплаты = ПлатежнаяСистема_ИдентификаторОплаты;
		
	КонецЕсли;
	
	ПереданныеПараметры.ИтогПоОрганизации = СуммаКОплате;
	ПереданныеПараметры.НомерДокумента = 1;
	ПереданныеПараметры.ВидОперации = Объект.ВидОперации;
	ПереданныеПараметры.Оплачивается = ДокументОплачивается;
	ПереданныеПараметры.ИдентификаторПС = ПлатежнаяСистема_ИдентификаторПС;
	ПереданныеПараметры.ВидОплатыПлатежнойСистемы = ПлатежнаяСистема_ВидОплаты;
	ПереданныеПараметры.СпособОплатыПлатежнойСистемы = ПлатежнаяСистема_СпособОплаты;
	ПереданныеПараметры.Магазин = Объект.ТорговыйОбъект;
	ПереданныеПараметры.Организация = ВыбраннаяОрганизация;
	ПереданныеПараметры.КассаККМ = Объект.КассаККМ;
	ПереданныеПараметры.ВидОперацииПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
	ПереданныеПараметры.ПодключаемоеОборудование = ПодключаемоеОборудование;
    ПереданныеПараметры.АвтономнаяККТ = АвтономнаяККТСБП;
	
	ПереданныеПараметры.РазрешитьОплатуВозвратБезПодтвержденияОтПлатежнойСистемы = Истина; // Обрабатывается отдельным правом
	
	Для Каждого СтрокаТоваров Из Объект.Товары Цикл
		
		Если СтрокаТоваров.Организация = ВыбраннаяОрганизация Тогда
		
			НоваяСтрока = ИнтеграцияСПлатежнымиСистемамиРМККлиентСервер.СтрокаТоваров();
		
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров);
		
			НоваяСтрока.Наименование = СтрокаТоваров.ПредставлениеНоменклатураХарактеристика;
			НоваяСтрока.ЕдиницаИзмерения = СтрокаТоваров.ПредставлениеЕдиницыИзмерения;
			НоваяСтрока.СуммаСкидки = СтрокаТоваров.СуммаСкидкиНаценки;
		
			ПереданныеПараметры.Товары.Добавить(НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПереданныеПараметры;
	
КонецФункции

&НаКлиенте
Процедура АктивироватьNFCСсылку()
	
	ОплатаСБПНастроена = Не Элементы.ПробитьЧек.Доступность 
		И Элементы.ОплатаСБП.Видимость
		И Элементы.ОплатаСБП.Доступность;
		
	ЭтоКСОВВертикальнойОриентации = (РежимКассыСамообслуживания И ВертикальнаяОриентация);
	
	Если ОплатаСБПНастроена 
			И ЭтоКСОВВертикальнойОриентации
			И ИспользуемыеВидыОплат.Количество() > 1 Тогда
		
		КомандаОплатаQRКодом(Новый Структура("Имя", "КомандаПлатежнаяСистема_АктивацияNFC"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельNFC(РезультатВыполнения = "ДеактивироватьNFC", Параметры = Неопределено) Экспорт

	Если Не Элементы.ГруппаПанельДействийNFC.Видимость Тогда
		Возврат
	КонецЕсли;

	ОповещениеЗавершитьОтмену = Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
	
	Если РезультатВыполнения = "НетОплатыЧерезNFC" Тогда

		ПодключитьОбработчикОжидания("ЗакрытьNFCВФоне", 5, Истина);
		
	ИначеЕсли РезультатВыполнения = "ДеактивироватьNFC" Тогда

		СанкционироватьЗакрытиеОперацииПлатежнойСистемой();

		ИнтеграцияСПлатежнымиСистемамиРМККлиент.ПрерватьОперацию(ЭтотОбъект, ОповещениеЗавершитьОтмену);
		
	Иначе
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаДополнительноеУправлениеЧеком);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьNFCВФоне()
	
	ЗакрытьПанельNFC();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОперацийСотрудника()
	
	ОповещениеВыбораОперации = Новый ОписаниеОповещения("ВыборОперацииСотрудникаЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Масштаб", Масштаб);
	ПараметрыОткрытия.Вставить("ТекущаяНастройкаРМК", ТекущаяНастройкаРМК);
	ПараметрыОткрытия.Вставить("ОбучениеУстройствРаспознавания", Элементы.ОбучениеУстройствРаспознавания.Видимость);
	
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаОперацийСотрудникаВКСО",
		ПараметрыОткрытия, ЭтотОбъект, ,ЭтотОбъект.Окно , , ОповещениеВыбораОперации, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьВыбранноеДействие(РезультатОтвета, ВозможныеОперации)
	
	РезультатФункции = ВозможныеОперации.ПродолжитьРаботу;
	Если Не РезультатОтвета = Неопределено Тогда
		РезультатФункции = РезультатОтвета;
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ВыборОперацииСотрудникаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВозможныеОперации = ИнтерфейсРМКСлужебныйКлиент.ВозможныеОперацииСотрудникаВКСО();
	ВыбранноеДействие = ПолучитьВыбранноеДействие(Результат, ВозможныеОперации);
	Если ВыбранноеДействие = ВозможныеОперации.ЗавершитьРаботу Тогда
		ЗакрытьПриложениеПриОшибке(Истина);
	ИначеЕсли ВыбранноеДействие = ВозможныеОперации.ПроверитьЧек Тогда
		ВыбратьЧекДляПроверки();
	ИначеЕсли ВыбранноеДействие = ВозможныеОперации.ОбучитьУстройстваРаспознавания Тогда
		ОткрытьФормуОбученияУстройствРаспознавания();
	Иначе
		ВернутьсяНаСтраницуСтартаПродажПриНеобходимости();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКВыборуЧекаДляПроверки()

	Если Не РаботаСЧекомЗавершена() Тогда
		Возврат;
	КонецЕсли;
	
	ВыбратьЧекДляПроверки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЧекДляПроверки()
	
	КассыККМИОрганизации = ПодключенныеКассыККМИОрганизации();
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("МассивКассККМ", КассыККМИОрганизации.МассивКассККМ);
	ПараметрыОткрытия.Вставить("МассивОрганизаций", КассыККМИОрганизации.МассивОрганизаций);
	ПараметрыОткрытия.Вставить("ТорговыйОбъект", Объект.ТорговыйОбъект);
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Чеки для проверки'"));
	ПараметрыОткрытия.Вставить("ПроверкаЧека", Истина);
	ПараметрыОткрытия.Вставить("РежимКассыСамообслуживания", РежимКассыСамообслуживания);
	ПараметрыОткрытия.Вставить("Масштаб", Масштаб);
	ПараметрыОткрытия.Вставить("ВертикальнаяОриентация", ВертикальнаяОриентация);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборЧекаДляПроверкиЗавершение", ЭтотОбъект);
	
	РодительскоеОкно = ?(РежимКассыСамообслуживания, ЭтотОбъект.Окно, Неопределено);
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораЧека",
		ПараметрыОткрытия, ЭтотОбъект, , РодительскоеОкно, , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЧекаДляПроверкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("ЧекККМ") Тогда
		
		ПоказатьЧекДляПроверки(Результат.ЧекККМ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЧекДляПроверки(ЧекККМНаПроверку)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПереноситьКодыМаркировки", Истина);
	
	ЗаполнитьНаОснованииЧекаККМ(ЧекККМНаПроверку, ДополнительныеПараметры);
	Если (Не ЗначениеЗаполнено(Объект.ДисконтнаяКарта))
			И ИнтерфейсРМКСлужебныйКлиентСервер.ПараметрыКартыЗаполнены(ПараметрыКартыЛояльности) Тогда
		
		ДозаполнитьДанныеКартыССервераЛояльности();
		
	КонецЕсли;
	ИзменитьКартинкуВводПокупателя();
	УстановитьАктивностьСтроки();
	ПересчитатьИтогиТабличнойЧастиТовары(Ложь);
	
	ОповещениеПродолжения = Новый ОписаниеОповещения(
		"ПоказатьЧекДляПроверкиПродолжение",
		ЭтотОбъект);
	
	ПереключитьВРежимОплатыНаКлиенте(РежимыРаботыСЧеком.Проверка, Ложь,, ОповещениеПродолжения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЧекДляПроверкиПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьВидыОплатДляЧекаПроверки();
	ИнтерфейсРМКСлужебныйКлиентСервер.СкрытьКнопкиНулевыхВидовОплат(ЭтотОбъект);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаВидовОплат, Ложь);
	НастроитьФормуДляПроверкиЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидыОплатПлатежнойСистемыДляЧекаПроверки()
	
	КлючПоискаОплатаСБП 	= Новый Структура("ПлатежнаяСистема",
		ПредопределенноеЗначение("Перечисление.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей"));
	КлючПоискаОплатаЮКасса 	= Новый Структура("ПлатежнаяСистема",
		ПредопределенноеЗначение("Перечисление.ТипыПлатежнойСистемыККТ.ЮКасса"));
	ИспользоватьОплатуСПБ 	 = ПлатежнаяСистема_ВидыОплат.НайтиСтроки(КлючПоискаОплатаСБП).Количество() > 0;
	ИспользоватьОплатуЮКасса = ПлатежнаяСистема_ВидыОплат.НайтиСтроки(КлючПоискаОплатаЮКасса).Количество() > 0;
	
	Если ИспользоватьОплатуСПБ Или ИспользоватьОплатуЮКасса Тогда
		
		ПараметрыВозврата =
			ИнтеграцияСПлатежнымиСистемамиРМКВызовСервера.ПолучитьПараметрыДокументаОплаты(ЧекККМПродажа);
		ЕстьОплатаПлатежнойСистемой = ЗначениеЗаполнено(ПараметрыВозврата.ВидОплатыВозврата);
		
		Если ЕстьОплатаПлатежнойСистемой Тогда
		
			КлючПоискаОплатаСБП.Вставить("ИдентификаторПС", 	ПараметрыВозврата.ИдентификаторПС);
			КлючПоискаОплатаСБП.Вставить("Организация", 		ПараметрыВозврата.Организация);
			
			КлючПоискаОплатаЮКасса.Вставить("ИдентификаторПС", 	ПараметрыВозврата.ИдентификаторПС);
			КлючПоискаОплатаЮКасса.Вставить("Организация",		ПараметрыВозврата.Организация);
			
			ОплаченоСПБ = ПлатежнаяСистема_ВидыОплат.НайтиСтроки(КлючПоискаОплатаСБП).Количество() > 0;
			ОплаченоЮКасса = ПлатежнаяСистема_ВидыОплат.НайтиСтроки(КлючПоискаОплатаЮКасса).Количество() > 0;
			ВывестиСуммуОплатыПлатежнойСистемой(ОплаченоСПБ, ОплаченоЮКасса, ПараметрыВозврата.СуммаКВозврату);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСуммуОплатыПлатежнойСистемой(ОплаченоСПБ, ОплаченоЮКасса, СуммаОплаты)
	
	Если ОплаченоСПБ Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаСБП, Истина);
		СуммаОплаченоСБП = СуммаОплаты;
		
	ИначеЕсли ОплаченоЮКасса Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаЮКасса, Истина);
		СуммаОплаченоЮКасса = СуммаОплаты;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидОплатыВРежимеКассира(СтрокаОплаты)
	
	Если РежимКассыСамообслуживания Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоОплатаЗачетАванса = ОбщегоНазначенияРМККлиент.ЭтоОплатаЗачетомАванса(СтрокаОплаты.ВидОплаты);
	ЭтоОплатаБезналичными = ОбщегоНазначенияРМККлиент.ЭтоОплатаБезналичными(СтрокаОплаты.ВидОплаты);
	ЭтоОплатаВРассрочку = ОбщегоНазначенияРМККлиент.ЭтоОплатаВРассрочку(СтрокаОплаты.ВидОплаты);
	ЭтоОплатаКредитом = ОбщегоНазначенияРМККлиент.ЭтоОплатаКредитом(СтрокаОплаты.ВидОплаты);
	ЭтоОплатаПодарочнымСертификатом = ОбщегоНазначенияРМККлиент.ЭтоОплатаПодарочнымСертификатом(СтрокаОплаты.ВидОплаты);
	
	Если ЭтоОплатаВРассрочку Тогда
		Если Объект.ОперацияСДенежнымиСредствами Тогда
			
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаПредоплата, Истина);
			СуммаОплаченоПредоплата = СтрокаОплаты.Сумма;
			
		КонецЕсли;
		Если Не Объект.ОперацияСДенежнымиСредствами И Не ЗначениеЗаполнено(Объект.ДокументРасчета) Тогда
				
				УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаВРассрочку, Истина);
				СуммаОплаченоВРассрочку = СтрокаОплаты.Сумма;
				
		КонецЕсли;
	КонецЕсли;
		
	Если ЭтоОплатаЗачетАванса Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаЗачетАванса, Истина);
		СуммаОплаченоЗачетАванса = СтрокаОплаты.Сумма;
		
	КонецЕсли;
	Если ЭтоОплатаБезналичными Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаБезнал, Истина);
		СуммаОплаченоБезнал = СтрокаОплаты.Сумма;
		
	КонецЕсли;
	Если ЭтоОплатаКредитом Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаКредитом, Истина);
		СуммаОплаченоКредитом = СтрокаОплаты.Сумма;
	
	КонецЕсли;
	Если СтрокаОплаты.ВидОплаты = ВидОплатыНСПК И ЗначениеЗаполнено(ВидОплатыНСПК) Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаСуммаОплатаСертификатамиНСПК, Истина);
		СуммаОплаченоСертификатамиНСПК = СтрокаОплаты.Сумма;
		
	КонецЕсли;
	Если ЭтоОплатаПодарочнымСертификатом Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаСертификатом, Истина);
		СуммаОплаченоСертификатом = СтрокаОплаты.Сумма;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидыОплатДляЧекаПроверки()
	
	ТаблицаОплатКартой.Очистить();
	ИндексОплатыКартой = 0;
	СуммаОплаченоБН = 0;
	
	Для Каждого СтрокаОплаты Из Объект.Оплата Цикл
		
		ЭтоОплатаНаличными = ОбщегоНазначенияРМККлиент.ЭтоОплатаНаличными(СтрокаОплаты.ВидОплаты);
		ЭтоОплатаПлатежнойКартой = ОбщегоНазначенияРМККлиент.ЭтоОплатаПлатежнойКартой(СтрокаОплаты.ВидОплаты);
		
		Если ЭтоОплатаНаличными Тогда
			
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаНал, Истина);
			СуммаОплаченоНал = СтрокаОплаты.Сумма;
			
		КонецЕсли;
		
		Если ЭтоОплатаПлатежнойКартой Тогда
			
			Если ИндексОплатыКартой <> 0 Тогда;
				НаименованиеРеквизитаПоляСуммы = "СуммаОплаченоБН_" + Строка(ИндексОплатыКартой);
				НаименованиеГруппыЭлементовПоляСуммы = "ГруппаОплатаКартой_" + Строка(ИндексОплатыКартой);
				НаименованиеГруппыОплаты = "ГруппаВидОплатыКартойГоризонтально_" + Строка(ИндексОплатыКартой);
			Иначе
				НаименованиеРеквизитаПоляСуммы = "СуммаОплаченоБН_0";
				НаименованиеГруппыЭлементовПоляСуммы = "ГруппаОплатаКартой";
				НаименованиеГруппыОплаты = "ГруппаВидОплатыКартойГоризонтально";
			КонецЕсли; 
			УстановитьДоступностьЭлементаФормы(Элементы[НаименованиеГруппыОплаты], Истина);
			УстановитьВидимостьЭлементаФормы(Элементы[НаименованиеГруппыЭлементовПоляСуммы], Истина);
			ЭтотОбъект[НаименованиеРеквизитаПоляСуммы] = СтрокаОплаты.Сумма;
			
			НоваяОплатаКартой = ТаблицаОплатКартой.Добавить();
			НоваяОплатаКартой.Сумма = СтрокаОплаты.Сумма;
			НоваяОплатаКартой.Организация = ВыбраннаяОрганизация;
			НоваяОплатаКартой.СистемаНалогообложения = ВыбраннаяСистемаНалогообложения;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ВыбранныйВидОплаты") Тогда
				НоваяОплатаКартой.ВидОплаты = ЭтотОбъект.ВыбранныйВидОплаты;
			КонецЕсли;
			Если ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации) И Не ЭтоЗаменаТоваров Тогда
				НоваяОплатаКартой.Оплачено = Истина;
			КонецЕсли;
			СуммаОплаченоБН = СуммаОплаченоБН + СтрокаОплаты.Сумма;
			ИндексОплатыКартой = ИндексОплатыКартой + 1;
			
		КонецЕсли;
		
		ЗаполнитьВидОплатыВРежимеКассира(СтрокаОплаты);
		
	КонецЦикла;
	
	ЗаполнитьВидыОплатПлатежнойСистемыДляЧекаПроверки();
	Если СуммаБонусов > 0 Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаБонусами, Истина);
		СуммаОплаченоБонусами = СуммаБонусов;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормуДляПроверкиЧека(ЗаблокироватьПродажу = Истина)
	
	ДоступностьОпераций = Не ЗаблокироватьПродажу;
	УстановитьДоступностьЭлементаФормы(Элементы.ОткрытьПанельИзбранныхТоваров, ДоступностьОпераций);
	УстановитьДоступностьЭлементаФормы(Элементы.ОткрытьПлиточныйИнтерфейсКаталога, ДоступностьОпераций);
	УстановитьДоступностьЭлементаФормы(Элементы.ДобавитьПакет, ДоступностьОпераций);
	УстановитьДоступностьЭлементаФормы(Элементы.ВвестиДанныеПокупателя, ДоступностьОпераций);
	УстановитьДоступностьЭлементаФормы(Элементы.РассчитатьСкидки, ДоступностьОпераций);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаИнфо, ДоступностьОпераций);
	Если Не РежимКассыСамообслуживания Тогда
		УстановитьДоступностьЭлементаФормы(Элементы.Каталог, ДоступностьОпераций);
		УстановитьДоступностьЭлементаФормы(Элементы.ПоказатьСкидкиНаЧек, ДоступностьОпераций);
		УстановитьДоступностьЭлементаФормы(Элементы.ВводТовараПоСтроке, ДоступностьОпераций);
		УстановитьДоступностьЭлементаФормы(Элементы.ОтложитьЧек, ДоступностьОпераций);
	КонецЕсли;
	
	Если ЗаблокироватьПродажу Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаКомандПродолженияПослеПробития);
		Если РежимКассыСамообслуживания Тогда
			ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаДополнительнаяКоманднаяПанельПустая);
		Иначе
			НастроитьДополнительныеКомандыПроверкиЧека();
		КонецЕсли;
		УстановитьДоступностьЭлементаФормы(Элементы.ПанельИзбранныхТоваров, Ложь);
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		УстановитьДоступностьЭлементаФормы(Элементы.НайтиВЧеке, Истина);
	Иначе
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьТекущийСлойГруппы(Элементы.ГруппаДополнительнаяКоманднаяПанельПустая);
	КонецЕсли;
	Если ИспользоватьПанельИзбранныхТоваров И Не Элементы.ПанельИзбранныхТоваров.Скрыта() = ЗаблокироватьПродажу Тогда
		ОткрытьЗакрытьПанельИзбранныхТоваров();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДополнительныеКомандыПроверкиЧека()
	
	РаспечаткаТоварногоЧекаДоступна = РаспечаткаТоварногоЧекаДоступна();
	ГруппаДополнительныхКоманд = Элементы.ГруппаКомандПродолженияПослеПробитияДополнительно;
	ИнтерфейсРМКСлужебныйКлиентСервер.ВключитьДополнительнуюКоманднуюПанельУправленияЧеком(ГруппаДополнительныхКоманд);

	УстановитьВидимостьЭлементаФормы(Элементы.ВыполнитьВозвратТекущегоЧека, ЕстьПравоНаДействие("ПравоЧекНаВозвратРМК"));
	УстановитьВидимостьЭлементаФормы(Элементы.РаспечататьТекущийТоварныйЧек, РаспечаткаТоварногоЧекаДоступна);
	УстановитьВидимостьЭлементаФормы(Элементы.ПробитьТекущийЧекПовторно, Истина);
	УстановитьВидимостьЭлементаФормы(Элементы.РаспечататьТекущееЗаявлениеНаВозврат, Ложь);
	УстановитьВидимостьЭлементаФормы(Элементы.ПовторитьЧек, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РазморозитьФормуПослеПроверкиЧека()
	
	ИнтерфейсРМКСлужебныйКлиентСервер.ВосстановитьКнопкиВидовОплат(ЭтотОбъект);
	НастроитьФормуДляПроверкиЧека(Ложь);
	ПоказатьПустуюСтраницуПослеПробитияЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗакрытьПанельИзбранныхТоваров()
	
	Панель = Элементы.ПанельИзбранныхТоваров;
	ПанельСкрыта = Панель.Скрыта();
	
	ДопустимоСворачиватьПанельИзбранныхТоваров = (Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбщая);

	Если ДопустимоСворачиватьПанельИзбранныхТоваров Тогда
		
		Если ПанельСкрыта Тогда
			Панель.Показать();
		Иначе
			Панель.Скрыть();
		КонецЕсли;
		
	Иначе
		Панель.Показать();
	КонецЕсли;
	
	Элементы.ПлиткаПанельИзбранныхТоваров.Видимость = Не Панель.Скрыта();

	Если Панель.Скрыта() Тогда
		ВернутьсяНаСтраницуСтартаПродажПриНеобходимости();
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПослеПробитияЧекаКлиент()
	
	Если РежимРаботыСЧеком = РежимыРаботыСЧеком.Проверка Тогда
		РазморозитьФормуПослеПроверкиЧека();
	Иначе
		РазморозитьФормуПослеПробитияЧека();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСВозвратуЧекаПроверки(Знач ЧекНаВозврат)
	
	Результат = Новый Структура("ЧекККм", ЧекНаВозврат);
	РазморозитьФормуПослеПроверкиЧека();
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаВидовОплат, Истина);
	Объект.ВидОперации = ОбщегоНазначенияРМККлиент.ВидТекущейОперации(Истина);
	КассирДоЗаменыПрав = Объект.Кассир;
	ВыборЧекаЗавершение(Результат, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Функция РаспечаткаТоварногоЧекаДоступна()
	
	ЭтоПечатьТоварногоЧекаНаКассовомОборудовании = (СпособФормированияТоварногоЧека = 2);
	ЭтоПечатьТоварногоЧекаНаОфисномПринтере = (СпособФормированияТоварногоЧека = 1);
	РаспечаткаТоварногоЧекаДоступна = Ложь;
	Если (ЭтоПечатьТоварногоЧекаНаКассовомОборудовании
			И (ЗначениеЗаполнено(ПринтерЧеков) ИЛИ ЗначениеЗаполнено(ПодключаемоеОборудование)))
			Или ЭтоПечатьТоварногоЧекаНаОфисномПринтере Тогда
		РаспечаткаТоварногоЧекаДоступна = Истина;
	КонецЕсли;
	Возврат РаспечаткаТоварногоЧекаДоступна;
	
КонецФункции

&НаКлиенте
Процедура УстановитьИспользованиеАвтоподбораПартий()
	
	ПартииПодобраны = Ложь;
	ИспользоватьАвтоподборПартий = Ложь;
	ОбщегоНазначенияРМККлиентПереопределяемый.ИспользуетсяАвтоподборПартий(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПанельИзбранныхТоваровКлиент()
	
	СкрытьКомандуВыходаПриНеобходимости();
	ОткрытьЗакрытьПанельИзбранныхТоваров();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЦеныИзбранныхИПлиток()
	
	Если ОпорныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияРМК.ДополнитьОпорныеДанныеПанелиДляПостроенияПлиточногоИнтерфейса(ЭтотОбъект);
	ИнтерфейсРМКСлужебный.НастроитьЭлементыВесовогоТовараВПлитке(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеИзбранныхИПлиток()
	
	ОбновитьДанныеИзбранных = Ложь;
	ОбновитьДанныеПлиток = Ложь;
	
	Если ИспользоватьПанельИзбранныхТоваров Тогда
		ОбновитьДанныеИзбранных = ПерезаполнитьИзбранное();
	КонецЕсли;
	
	ФормаПлиточногоИнтерфейсаДоступна = ЗначениеЗаполнено(СтруктураПлиточногоИнтерфейсаПодбора);
	Если ФормаПлиточногоИнтерфейсаДоступна Тогда
		ОбновитьДанныеПлиток = ПерезаполнитьПлиточныйИнтерфейс();
	КонецЕсли;
	
	Если ОбновитьДанныеИзбранных Или ОбновитьДанныеПлиток Тогда
		ОбновитьЦеныИзбранныхИПлиток();
	КонецЕсли;
	
	Если ОбновитьДанныеИзбранных Тогда
		ЗаполнитьКнопкиИзбранныхПозиций();
	КонецЕсли;
	
	Если ОбновитьДанныеПлиток Тогда
		ЗаполнитьКнопкиПлиток();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭтоТабачнаяПродукция(ОсобенностьУчета)
	
	Возврат ОбщегоНазначенияРМК.ЭтоАльтернативныйТабак(ОсобенностьУчета)
		Или ОбщегоНазначенияРМК.ЭтоТабачнаяПродукция(ОсобенностьУчета);
		
КонецФункции

&НаСервере
Функция ЭтоАлкогольнаяПродукция(ОсобенностьУчета)
	
	Возврат ОбщегоНазначенияРМК.ЭтоАлкогольнаяПродукция(ОсобенностьУчета);
		
КонецФункции

&НаСервере
Функция ЭтоПодарочныйСертификат(ТипНоменклатуры)
	
	Возврат ОбщегоНазначенияРМК.ЭтоТипНоменклатурыПодарочныйСертификат(ТипНоменклатуры);
		
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанныеОКартеЛояльностиВДисплейПокупателя()
	ИнформацияОКартеЛояльности = НСтр("ru = 'Информация о покупателе:'");
	
	ШаблонДваПараметра = НСтр("ru = '%1 %2'");
	ШаблонТриПараметра = НСтр("ru = '%1 %2 %3'");
	Если ЗначениеЗаполнено(НайденнаяКартаНомер) Тогда
		ТекстНомерКарты = СтрШаблон(ШаблонДваПараметра,НСтр("ru = '№ карты:'"), НайденнаяКартаНомер);
		ДобавитьТекстИнформацииОПокупателе(ИнформацияОКартеЛояльности, ТекстНомерКарты);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НайденнаяКартаТелефон) Тогда
		ПредставлениеНомера = "****" + Прав(НайденнаяКартаТелефон,4);
		ТекстНомерТелефона = СтрШаблон(ШаблонДваПараметра, НСтр("ru = '№ телефона:'"), ПредставлениеНомера);
		ДобавитьТекстИнформацииОПокупателе(ИнформацияОКартеЛояльности, ТекстНомерТелефона);
	КонецЕсли;
	
	ФорматЧисла = "ЧДЦ=2; ЧН=0,00; ЧРГ='''";
	Если ЗначениеЗаполнено(НайденнаяКартаСуммаПродаж) Тогда
		ТекстСуммаПродаж = СтрШаблон(ШаблонТриПараметра, НСтр("ru = 'Сумма продаж:'"), Формат(СуммаПродаж, ФорматЧисла), ПредставлениеВалюты);
		ДобавитьТекстИнформацииОПокупателе(ИнформацияОКартеЛояльности, ТекстСуммаПродаж);
	КонецЕсли;
	
	Если ИспользоватьОплатуБонусами Тогда
		ТекстСуммаБонусов = СтрШаблон(ШаблонДваПараметра, НСтр("ru = 'Остаток бонусов:'"), Формат(КоличествоБонусов, ФорматЧисла));
		ТекстСуммаБонусов = ТекстСуммаБонусов + Символы.ПС + СтрШаблон(ШаблонТриПараметра,НСтр("ru = 'Доступно к оплате бонусами:'"), Формат(БонусыДоступноКОплате, ФорматЧисла), ПредставлениеВалюты);
		ДобавитьТекстИнформацииОПокупателе(ИнформацияОКартеЛояльности, ТекстСуммаБонусов);
	КонецЕсли;
	
	ДанныеКПередачеВДисплейПокупателя.Информация = ИнформацияОКартеЛояльности;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТекстИнформацииОПокупателе(ИнформацияОКартеЛояльности, ТекстОтображения)
	ШаблонТекста = НСтр("ru = '%1%2%3'");
	ИнформацияОКартеЛояльности = СтрШаблон(ШаблонТекста,ИнформацияОКартеЛояльности,Символы.ПС,ТекстОтображения);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеДисплеяПокупателяОплатыБонусами(МаксимальноВозможнаяСуммаОплатыБонусами)
	ШаблонТекста = НСтр("ru = '%1 %2 %3'");
	ТекстСуммаБонусов = СтрШаблон(ШаблонТекста, НСтр("ru = 'Доступно к оплате бонусами:'"), Формат(БонусыДоступноКОплате, "ЧДЦ=2; ЧН=0,00; ЧРГ='''"), ПредставлениеВалюты);
	ДанныеКПередачеВДисплейПокупателя.Информация = ТекстСуммаБонусов;
	
	НачатьОтображениеИнформацииНаДисплейПокупателя(ТипыОперацийДисплеяПокупателя.Информация);
КонецПроцедуры

&НаКлиенте
Процедура ВойтиКлиент()
	
	Если Не ЗначениеЗаполнено(ТорговыйОбъектДляВхода) И Элементы.ГруппаВыборМагазинаДляВхода.Видимость
		И Не ЗначениеЗаполнено(ТекущаяОперация) Тогда
		ТекущийЭлемент = Элементы.ТорговыйОбъектДляВхода;
		ВывестиСообщениеОбОшибкеАвторизации("ПустойМагазин");
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(КодКассира) Тогда
		ТекущийЭлемент = Элементы.КодКассира;
		ВывестиСообщениеОбОшибкеАвторизации("ПустойКод");
		Возврат;
	КонецЕсли;
	
	ОбработатьШтрихкодКлиент(КодКассира);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРаботуКлиент()
	
	Если ТекущаяОперация = "ЧекНаВозвратРМК" Или ТекущаяОперация = "ВозвратБезЧекаРМК"
			Или ТекущаяОперация = "ЧекКоррекцииРМК" Тогда
		
		ТекущаяОперация = "";
		ОткрытьОбщуюСтраницу(Истина);
		СформироватьЗаголовокВводКассира();
		ПереключитьРежимНаПродажа();
		
	ИначеЕсли ТекущаяОперация = "ОткрытиеСлужебныхДействийКСО" Тогда
		
		ТекущаяОперация = "";
		ОткрытьОбщуюСтраницу();
		СкрытьКомандуВыходаПриНеобходимости();
		
	Иначе
		Если РаботаСЧекомЗавершена(Неопределено) Тогда
			ЗакрытьПриложениеПриОшибке(Истина);
		ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводКассира Тогда
			
			Объект.Кассир = КассирДоЗаменыПрав;
			КассирДляВхода = КассирДоЗаменыПрав;
			КассирДоЗаменыПрав = Неопределено;
			
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
			ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьГруппыОперации(Элементы);
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоЗапускРабочегоМестаПриСтарте()
	
	РезультатФункции = Ложь;
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		ТекущийРежимОкна = КлиентскоеПриложение.ПолучитьРежимОсновногоОкна();
		Если ТекущийРежимОкна = РежимОсновногоОкнаКлиентскогоПриложения.Киоск
			Или ТекущийрежимОкна = РежимОсновногоОкнаКлиентскогоПриложения.РабочееМесто
			Или ТекущийРежимОкна = РежимОсновногоОкнаКлиентскогоПриложения.ПолноэкранноеРабочееМесто Тогда
			
			РезультатФункции = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьСерверныеДействияДляКлиента()
	
	ПараметрыРМК = Новый Структура();
	ПараметрыРМК.Вставить("РабочееМесто", РабочееМесто);
	ПараметрыРМК.Вставить("ЗапускПриСтарте", ЭтоЗапускРабочегоМестаПриСтарте());
	ПараметрыРМК.Вставить("ВестиЖурналДействийКассира", ВестиЖурналДействийКассира);
	ДополнительныеДанные = ВыполнитьДействияИПолучитьДанныеДляКлиента(ПараметрыРМК);
	Если ДополнительныеДанные.Свойство("УстройстваРаспознаванияОнлайнВесов") Тогда
		ДанныеДляОбработки.Вставить("УстройстваРаспознаванияОнлайнВесов", ДополнительныеДанные.УстройстваРаспознаванияОнлайнВесов);
	КонецЕсли;
	РеквизитыОбъекта = ДополнительныеДанные.РеквизитыОбъекта;
	КолонкиТаблицФормы = ДополнительныеДанные.КолонкиТаблицФормы;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьДействияИПолучитьДанныеДляКлиента(ПараметрыРМК)
	
	ДополнительныеДанные = Новый Структура();
	РабочееМесто = ПараметрыРМК.РабочееМесто;
	
	УстройстваРаспознаванияОнлайнВесов
		= ИнтерфейсРМКСлужебный.ПолучитьУстройстваРаспознаванияЭлектронныхВесовДляПодключения(РабочееМесто);
	Если УстройстваРаспознаванияОнлайнВесов.Количество() > 0 Тогда
		ДополнительныеДанные.Вставить("УстройстваРаспознаванияОнлайнВесов", УстройстваРаспознаванияОнлайнВесов);
	КонецЕсли;
	
	Если ПараметрыРМК.ВестиЖурналДействийКассира Тогда
		ИнтерфейсРМКСлужебный.ВыполнитьАнализИРегистрациюАварийногоЗавершенияЧеков(ПараметрыРМК);
	КонецЕсли;
	ДополнительныеДанные.Вставить("РеквизитыОбъекта",
		ИнтерфейсРМКСлужебный.ПолучитьРеквизитыОбработкиРабочееМестоКассира());
	КолонкиТаблицФормы = Новый Структура();
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьКолонкиТаблицФормыРабочегоМестаКассира(КолонкиТаблицФормы);
	ДополнительныеДанные.Вставить("КолонкиТаблицФормы", КолонкиТаблицФормы);
	
	Возврат ДополнительныеДанные;
	
КонецФункции

&НаКлиенте
Функция ПодключениеЭлектронныхВесовСРаспознавателемЗавершено()

	РезультатФункции = Ложь;
	Если ДанныеДляОбработки.Свойство("УстройстваРаспознаванияОнлайнВесов") Тогда
		КоличествоСтрок = ДанныеДляОбработки.УстройстваРаспознаванияОнлайнВесов.Количество();
		РезультатФункции = (КоличествоСтрок > 0);
		ИндексСтроки = 0;
		Пока ИндексСтроки < КоличествоСтрок И РезультатФункции Цикл
			СтрокаКомплектации = ДанныеДляОбработки.УстройстваРаспознаванияОнлайнВесов[ИндексСтроки];
			Если Не СтрокаКомплектации.ВесыОбработаны Тогда
				РезультатФункции = Ложь;
			КонецЕсли;
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ПодключитьУстройстваРаспознавания()
	
	УстройстваРаспознавания = Новый Массив;
	Для Каждого СтрокаКомплектации Из ДанныеДляОбработки.УстройстваРаспознаванияОнлайнВесов Цикл
		ОтборВесов = Новый Структура("ЭлектронныеВесы", СтрокаКомплектации.ЭлектронныеВесы);
		СтрокиВесов = ТаблицаЭлектронныхВесов.НайтиСтроки(ОтборВесов);
		Если СтрокиВесов.Количество() > 0
				И УстройстваРаспознавания.Найти(СтрокаКомплектации.УстройствоРаспознавания) = Неопределено Тогда
				
			УстройстваРаспознавания.Добавить(СтрокаКомплектации.УстройствоРаспознавания);
			
		Иначе
			
			СтрокаКомплектации.УстройствоРаспознаванияОбработано = Истина;
			
		КонецЕсли;
		СтрокаКомплектации.ВесыОбработаны = Ложь;
	КонецЦикла;
	
	Если УстройстваРаспознавания.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ЗавершитьПодключениеОборудования", ЭтотОбъект);
		МенеджерОборудованияРМККлиент.ПодключитьОборудованиеПоИдентификатору(Оповещение, УникальныйИдентификатор,
			УстройстваРаспознавания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьОпорныеДанныеПлиткиВесовымТоваромПриНеобходимости(КоличествоЭлектронныхвесовДо,
		КоличествоЭлектронныхвесовПосле)
		
	Если КоличествоЭлектронныхвесовДо = 0 И КоличествоЭлектронныхвесовПосле > 0
			И Не ЗначениеЗаполнено(СтруктураПлиточногоИнтерфейсаПодбора) Тогда
			
		ДополнитьОпорныеДанныеПлиткиВесовымТоваромНаСервере();
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ДополнитьОпорныеДанныеПлиткиВесовымТоваромНаСервере()
	
	ОбщегоНазначенияРМК.ДополнитьОпорныеДанныеПлиткиВесовымТоваром(ЭтотОбъект);
	Если ДанныеКнопокПлиток.Количество() = 0 Тогда
		ИсточникиДанныхПлитки = ИнтерфейсРМКСлужебныйКлиентСервер.ИсточникиДанныхДляПлитки();
		ОтборСтрок = Новый Структура("ИсточникПлитки", ИсточникиДанныхПлитки.ВесовойТовар);
		СтрокиВесовогоТовара = ОпорныеДанные.НайтиСтроки(ОтборСтрок);
		Если СтрокиВесовогоТовара.Количество() > 0 Тогда
			ИнтерфейсРМКСлужебный.НастроитьКоличествоЭлементовПлитки(ЭтотОбъект);
			ИнтерфейсРМКСлужебный.СформироватьЭлементыПлиток(ЭтотОбъект);
			Элементы.ГруппаУведомленияОПустойСтруктуре.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	ИнтерфейсРМКСлужебный.НастроитьЭлементыВесовогоТовараВПлитке(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьТипПостроенияПлитки()
	
	ВключитьОтборВесовогоТовара = (ТипПостроенияПлитки = ТипыПостроенияПлитки.ПоПалитре);
	Если (Не ВключитьОтборВесовогоТовара) Или ТаблицаЭлектронныхВесов.Количество() = 0
			Или (Не ЭлектронныеВесыЗаняты) Тогда
			
		РаспознаваниеБыло = Ложь;
		Если ВключитьОтборВесовогоТовара Тогда
			ИнтерфейсРМКСлужебныйКлиент.НастроитьОтображениеОтбораВесовогоТовара(ЭтотОбъект, Истина);
			НачатьВыборВесовогоТовара();
		Иначе
			ПерестроитьПлиткуПоТипуПостроения(ТипыПостроенияПлитки.ПоПалитре);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПерестроитьПлиткуПоТипуПостроения(НовыйТипПостроенияПлитки, ТоварыКВыбору = Неопределено)
	
	ВесовойРежимДо = ЭтоТипПостроенияПлиткиСВесовымТоваром(ТипПостроенияПлитки, ТипыПостроенияПлитки);
		
	ВесовойРежимПосле = (НовыйТипПостроенияПлитки = ТипыПостроенияПлитки.ВесовойТовар
		Или НовыйТипПостроенияПлитки = ТипыПостроенияПлитки.РаспознанныйВесовойТовар);
	
	ТипПостроенияПлитки = НовыйТипПостроенияПлитки;
	ИнтерфейсРМКСлужебныйКлиент.ПодготовитьДанныеДляПлитки(ЭтотОбъект, ТоварыКВыбору);
	ПлиткаДомойКлиент();
	Если Не НовыйТипПостроенияПлитки = ТипыПостроенияПлитки.РаспознанныйВесовойТовар Тогда
		ТипПостроенияПлиткиДоРаспознавания = Неопределено;
	КонецЕсли;
	
	Если Не ВесовойРежимДо = ВесовойРежимПосле Тогда
		ИнтерфейсРМКСлужебныйКлиент.НастроитьОтображениеОтбораВесовогоТовара(ЭтотОбъект, ВесовойРежимПосле);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьУстройствоРаспознавания()
	
	РезультатФункции = Ложь;
	КоличествоВесов = ТаблицаЭлектронныхВесов.Количество();
	ИндексУстройства = 0;
	Пока ИндексУстройства < КоличествоВесов И Не РезультатФункции Цикл
		СтрокаЭлектронныхВесов = ТаблицаЭлектронныхВесов.Получить(ИндексУстройства);
		Если ЗначениеЗаполнено(СтрокаЭлектронныхВесов.УстройствоРаспознавания) Тогда
			РезультатФункции = Истина;
		КонецЕсли;
		ИндексУстройства = ИндексУстройства + 1;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура НачатьВыборВесовогоТовара()
	
	Если ЕстьУстройствоРаспознавания() Тогда
		
		ЭлектронныеВесыЗаняты = Истина;
		ПараметрыОперации = Новый Структура();
		ИдентификаторВесов = Неопределено;
		Если ТаблицаЭлектронныхВесов.Количество() = 1 Тогда
			ИдентификаторВесов = ТаблицаЭлектронныхВесов[0].ЭлектронныеВесы;
		КонецЕсли;
		ОповещениеЗавершенияВзвешивания = Новый ОписаниеОповещения("ПроверитьНаличиеТовараНаВесахЗавершение", ЭтотОбъект);
		
		ВывестиСтраницуОжиданияРаспознавания();
		МенеджерОборудованияРМККлиент.НачатьПолученияВесаСЭлектронныхВесов(ОповещениеЗавершенияВзвешивания,
			УникальныйИдентификатор, ИдентификаторВесов, ПараметрыОперации);
		
	Иначе
		
		ПерестроитьПлиткуПоТипуПостроения(ТипыПостроенияПлитки.ВесовойТовар);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеТовараНаВесахЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЭлектронныеВесыЗаняты = Ложь;
	УстройствоРаспознавания = Неопределено;
	ЭлектронныеВесы = Неопределено;
	Если ЕстьСвойство(Результат, "Результат") И Результат.Результат Тогда
		
		Если Результат.Вес > 0 И ЗначениеЗаполнено(Результат.ИдентификаторУстройства) Тогда
			
			ОтборЭлектронныхВесов = Новый Структура("ЭлектронныеВесы", Результат.ИдентификаторУстройства);
			СтрокиЭлектронныхВесов = ТаблицаЭлектронныхВесов.НайтиСтроки(ОтборЭлектронныхВесов);
			Если СтрокиЭлектронныхВесов.Количество() > 0
					И ЗначениеЗаполнено(СтрокиЭлектронныхВесов[0].УстройствоРаспознавания) Тогда
					
				УстройствоРаспознавания = СтрокиЭлектронныхВесов[0].УстройствоРаспознавания;
				
			КонецЕсли;
			ЭлектронныеВесы = Результат.ИдентификаторУстройства;
			
		КонецЕсли;
		
	КонецЕсли;
	Если УстройствоРаспознавания = Неопределено Тогда
		ПерестроитьПлиткуПоТипуПостроения(ТипыПостроенияПлитки.ВесовойТовар);
		ТекущиеЭлектронныеВесы = ЭлектронныеВесы;
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	Иначе
		ОтправитьЗапросНаРаспознаваниеТовара(УстройствоРаспознавания, ЭлектронныеВесы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросНаРаспознаваниеТовара(УстройствоРаспознавания, ЭлектронныеВесы)
	
	ПараметрыОперации = Новый Структура();
	ПараметрыОперации.Вставить("ПроводитьОбучение", ОбучатьУстройствоРаспознаванияВоВремяПродажи);
	ПараметрыОперации.Вставить("КоличествоВариантов", 7);
	
	ДополнительныеПараметры = Новый Структура("ЭлектронныеВесы", ЭлектронныеВесы);
	
	ОповещениеРаспознавания = Новый ОписаниеОповещения("ОбработкаРаспознаванияЗавершение", ЭтотОбъект, ДополнительныеПараметры);

	ВывестиСтраницуОжиданияРаспознавания();
	МенеджерОборудованияРМККлиент.НачатьРаспознавание(ОповещениеРаспознавания, УникальныйИдентификатор,
		УстройствоРаспознавания, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРаспознаванияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОграничениеРаспознанныхТоваровПоУмолчанию  = 7;
	Если МаксимальноеКоличествоРаспознанныхТоваров > 0 Тогда
		ОграничениеКоличества = МаксимальноеКоличествоРаспознанныхТоваров;
	Иначе
		ОграничениеКоличества = ОграничениеРаспознанныхТоваровПоУмолчанию;
	КонецЕсли;
	ПараметрыПолученияТоваров = Новый Структура("ВесовыеТовары", Новый Массив);
	ПараметрыПолученияТоваров.Вставить("РаспознанныеТовары", Новый Массив);
	ПараметрыПолученияТоваров.Вставить("ОграничениеКоличества", ОграничениеКоличества);
	Если Результат.Свойство("Результат") И Результат.Результат И Результат.РаспознанныеТовары.Количество() > 0 Тогда
		ВесовыеТовары = ОтобратьВесовыеТоварыОпорныхДанных();
		
		ПараметрыПолученияТоваров.Вставить("ВесовыеТовары", ВесовыеТовары);
		ПараметрыПолученияТоваров.Вставить("РаспознанныеТовары", Результат.РаспознанныеТовары);
		
	КонецЕсли;

	Если ПараметрыПолученияТоваров.ВесовыеТовары.Количество() > 0
			И ПараметрыПолученияТоваров.РаспознанныеТовары.Количество() > 0 Тогда
		ОбщегоНазначенияРМККлиент.ДополнитьПараметрыДляПолученияРаспознанныхТоваров(ЭтотОбъект, ПараметрыПолученияТоваров);
		ТоварыКВыбору = ПолучитьТоварыПоДаннымРаспознавания(ПараметрыПолученияТоваров);
		ПостроитьПлиткуПоРезультатамРаспознавания(ТоварыКВыбору, ДополнительныеПараметры.ЭлектронныеВесы);
	Иначе
		Если РежимПлитки Тогда
			Если ТипПостроенияПлитки = ТипыПостроенияПлитки.ПоПалитре Тогда
				ПерестроитьПлиткуПоТипуПостроения(ТипыПостроенияПлитки.ВесовойТовар);
				ТекущиеЭлектронныеВесы = ДополнительныеПараметры.ЭлектронныеВесы;
			КонецЕсли;
			РаспознаваниеБыло = Истина;
		Иначе
			ОткрытьПлиточныйИнтерфейсПослеРаспознавания(ТипыПостроенияПлитки.ВесовойТовар,
				ДополнительныеПараметры.ЭлектронныеВесы);
		КонецЕсли;
	КонецЕсли;
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТоварыПоДаннымРаспознавания(ПараметрыПолученияТоваров)
	
	Возврат ОбщегоНазначенияРМК.ПолучитьТоварыПоДаннымРаспознавания(ПараметрыПолученияТоваров);
	
КонецФункции

&НаКлиенте
Процедура ПостроитьПлиткуПоРезультатамРаспознавания(ТоварыКВыбору, ЭлектронныеВесы)
	
	Если ТоварыКВыбору.Количество() > 0 Тогда
		Если РежимПлитки Тогда
			ТипПостроенияПлиткиДоРаспознавания = ТипПостроенияПлитки;
			ПерестроитьПлиткуПоТипуПостроения(ТипыПостроенияПлитки.РаспознанныйВесовойТовар, ТоварыКВыбору);
			РаспознаваниеБыло = Истина;
			ТекущиеЭлектронныеВесы = ЭлектронныеВесы;
		Иначе
			ОткрытьПлиточныйИнтерфейсПослеРаспознавания(ТипыПостроенияПлитки.РаспознанныйВесовойТовар,
				ЭлектронныеВесы, ТоварыКВыбору);
		КонецЕсли;
	Иначе
		Если РежимПлитки Тогда
			Если ТипПостроенияПлитки = ТипыПостроенияПлитки.ПоПалитре Тогда
				ПерестроитьПлиткуПоТипуПостроения(ТипыПостроенияПлитки.ВесовойТовар);
				ТекущиеЭлектронныеВесы = ЭлектронныеВесы;
			КонецЕсли;
			РаспознаваниеБыло = Истина;
		Иначе
			ОткрытьПлиточныйИнтерфейсПослеРаспознавания(ТипыПостроенияПлитки.ВесовойТовар, ЭлектронныеВесы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПлиточныйИнтерфейсПослеРаспознавания(НовыйТипПостроенияПлитки,
		ЭлектронныеВесы, ТоварыКВыбору = Неопределено)
	
	ОткрытьПлиточныйИнтерфейс(НовыйТипПостроенияПлитки, ТоварыКВыбору);
	Если РежимПлитки Тогда
		РаспознаваниеБыло = Истина;
		ТекущиеЭлектронныеВесы = ЭлектронныеВесы;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОтобратьВесовыеТоварыОпорныхДанных()
	
	РезультатФункции = Новый Массив;
	
	ОтборСтрок = Новый Структура("Весовой", Истина);
	СтрокиВесовыхТоваров = ОпорныеДанные.НайтиСтроки(ОтборСтрок);
	Для Каждого СтрокаОпорныхДанных Из СтрокиВесовыхТоваров Цикл
		Если ЗначениеЗаполнено(СтрокаОпорныхДанных.Номенклатура) Тогда
			ДанныеВесовогоТовара = Новый Структура();
			ДанныеВесовогоТовара.Вставить("Номенклатура", СтрокаОпорныхДанных.Номенклатура);
			ДанныеВесовогоТовара.Вставить("Характеристика", СтрокаОпорныхДанных.Характеристика);
			РезультатФункции.Добавить(ДанныеВесовогоТовара);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатФункции
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоТипПостроенияПлиткиСВесовымТоваром(ТипПостроенияПлитки, ТипыПостроенияПлитки)
	
	Возврат (ТипПостроенияПлитки = ТипыПостроенияПлитки.ВесовойТовар
		Или ТипПостроенияПлитки = ТипыПостроенияПлитки.РаспознанныйВесовойТовар);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНормализованныйКодМаркировки(КодМаркировки)
	
	Возврат ОбщегоНазначенияРМК.ПолучитьНормализованныйКодМаркировки(КодМаркировки);
	
КонецФункции

&НаКлиенте
Процедура ВыделитьОтобранныеСтроки(СтрокиТоваров, МассивОтобранныхСтрок)
	
	Для Каждого НайденнаяСтрока Из МассивОтобранныхСтрок Цикл
		
		ИдентификаторНайденнойСтроки = НайденнаяСтрока.ПолучитьИдентификатор();
		Если СтрокиТоваров.ВыделенныеСтроки.Количество() = 0 Тогда
			СтрокиТоваров.ТекущаяСтрока = ИдентификаторНайденнойСтроки;
		КонецЕсли;
		СтрокиТоваров.ВыделенныеСтроки.Добавить(ИдентификаторНайденнойСтроки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСменуПроверкаНепробитыхЧековПродолжениеВопрос(Результат, ДополнительныеПараметры) Экспорт
	
	КассыККМИОрганизации = ПодключенныеКассыККМИОрганизации();
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("МассивКассККМ", КассыККМИОрганизации.МассивКассККМ);
	ПараметрыОткрытия.Вставить("МассивОрганизаций", КассыККМИОрганизации.МассивОрганизаций);
	ПараметрыОткрытия.Вставить("ТорговыйОбъект", Объект.ТорговыйОбъект);
	ПараметрыОткрытия.Вставить("КассоваяСмена", КассоваяСмена);
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Непробитые чеки'"));
	ПараметрыОткрытия.Вставить("ВыборНепробитогоЧека", Истина);
	ПараметрыОткрытия.Вставить("ВыводитьКомментарийКЧеку", ВыводитьКомментарийКЧеку);
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(ДополнительныеПараметры.ПредыдущаяСтраница);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборОтложенногоЧекаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаВыбораЧека",
	ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКоличествоНепробитыхЧеков()
	
	ОбщегоНазначенияРМКПереопределяемый.ПроверитьКоличествоНепробитыхЧеков(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСменуСверкаИтогов(ПредлагатьОткрытьСмену, ПараметрыЗавершения) Экспорт
	
	Если ТаблицаКассККМОрганизаций.Количество() = 1 Тогда
		КассаККМСверки = Объект.КассаККМ;
	Иначе
		КассаККМСверки = КассаККМДляОперации;
	КонецЕсли;
	
	ОповещениеЗакрытияСменыСтандартно = Новый ОписаниеОповещения("ЗакрытьСменуСтандартноПродолжение", ЭтотОбъект,
		ПараметрыЗавершения);
	
	Отбор = Новый Структура();
	Отбор.Вставить("КассаККМ", КассаККМСверки);
	
	КассыККМДляСверки = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор);
	СверятьСДаннымиОФД = КассыККМДляСверки[0].СверятьСДаннымиОФД;
	Если СверятьСДаннымиОФД Тогда
		ОбщегоНазначенияРМККлиент.СверитьСДаннымиОФД(ЭтаФорма, ОповещениеЗакрытияСменыСтандартно, ПредлагатьОткрытьСмену, КассаККМСверки);
	Иначе
		ЗакрытьСменуСтандартноЗавершение(ПредлагатьОткрытьСмену, ПараметрыЗавершения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСменуСтандартноПродолжение(ПараметрыСверкиИЗакрытия, ПараметрыЗавершения) Экспорт
	
	Если ПараметрыСверкиИЗакрытия.ЕстьРасхожденияВСверке Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Проверка данных в ОФД.'");
		ТекстВопроса = НСтр("ru = 'Данные смены в сервисе ОФД и в базе различаются. Продолжить закрытие смены?'");
		КнопкаПоУмолчанию = КодВозвратаДиалога.Нет;
		ПараметрыЗавершения.Вставить("ДанныеСверки", ПараметрыСверкиИЗакрытия.ДанныеСверки);
		ПараметрыЗавершения.Вставить("ПредлагатьОткрытьСмену", ПараметрыСверкиИЗакрытия.ПредлагатьОткрытьСмену);
		
		ОповещениеЗавершения = Новый ОписаниеОповещения("ЗакрытьСменуСтандартноПродолжениеВопрос", ЭтотОбъект, ПараметрыЗавершения);
		ПоказатьВопрос(ОповещениеЗавершения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КнопкаПоУмолчанию, ТекстЗаголовка);
		
	Иначе
		
		ЗакрытьСменуСтандартноЗавершение(ПараметрыСверкиИЗакрытия.ПредлагатьОткрытьСмену, ПараметрыЗавершения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСменуСтандартноПродолжениеВопрос(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗакрытьСменуСтандартноЗавершение(ДополнительныеПараметры.ПредлагатьОткрытьСмену, ДополнительныеПараметры);
		
	Иначе
		
		ДанныеДляОтчетаПоОФД = ДополнительныеПараметры.ДанныеСверки;
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(ДополнительныеПараметры.ПредыдущаяСтраница);
		ВывестиОтчетЗаСменуКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоОплатаПоСсылкеNFC()
	Возврат (ТипОплаты = "СБП" И Элементы.ГруппаПанельДействийNFC.Видимость);
КонецФункции

&НаКлиенте
Функция ЗаполненаКонтактнаяИнформацияВРежимеКассира()
	
	Возврат ((Не РежимКассыСамообслуживания)
		И ИнтерфейсРМКСлужебныйКлиент.ЗаполненаКонтактнаяИнформацияДляОтправкиЧека(ЭтотОбъект));
		
КонецФункции

&НаКлиенте
Процедура ПроверитьКодыМаркировкиПередПробитием()
	
	Если ПараметрыПроверкиКодовМаркировки.Свойство("ТекущаяСтрока") Тогда
		ПараметрыПроверкиКодовМаркировки.ТекущаяСтрока.ТребуетсяПроверкаКодаМаркировки = Ложь;
		ОбщегоНазначенияРМККлиентСервер.УстановитьНомерКартинкиСтрокиТовара(ПараметрыПроверкиКодовМаркировки.ТекущаяСтрока);
	КонецЕсли;
	
	Если ПараметрыПроверкиКодовМаркировки.СтрокиСКодомМаркировки.Количество() = 0 Тогда
		
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
		ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
		
		ПереключитьВРежимОплатыНаКлиентеПродолжение(ПараметрыПроверкиКодовМаркировки.НазначенныйРежим,
			ПараметрыПроверкиКодовМаркировки.БлокироватьРедактированиеЧека,
			ПараметрыПроверкиКодовМаркировки.Отказ,
			ПараметрыПроверкиКодовМаркировки.ОповещениеПродолжения);
		
	ИначеЕсли ПараметрыПроверкиКодовМаркировки.ЕстьОшибки Тогда
		
		ПараметрыПроверкиКодовМаркировки.ТекущаяСтрока.КодМаркировки = "";
		ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
		
	Иначе
		
		СтрокаТовара = ПараметрыПроверкиКодовМаркировки.СтрокиСКодомМаркировки[0];
		КодМаркировки = ПараметрыПроверкиКодовМаркировки.КодыДляПроверки.Получить(СтрокаТовара);
		СтрокаТовара.КодМаркировки = КодМаркировки;
		
		Элементы.Товары.ТекущаяСтрока = СтрокаТовара.ПолучитьИдентификатор();
		
		ПараметрыПроверкиКодовМаркировки.Вставить("ТекущаяСтрока", СтрокаТовара);
		ПараметрыПроверкиКодовМаркировки.СтрокиСКодомМаркировки.Удалить(0);
		
		Если ПроверкаМаркиВозможна(КодМаркировки, СтрокаТовара.ОсобенностьУчета, СтрокаТовара.Организация) Тогда
			Если ИспользоватьРазрешительныйРежимГосИС Тогда
				СимволGS1 = МенеджерОборудованияРМККлиентСервер.РазделительGS1();
				Разделитель = МенеджерОборудованияРМККлиентСервер.ЭкранированныйСимволGS1();
				Штрихкод = СтрЗаменить(КодМаркировки, Разделитель, СимволGS1);
				РеквизитыФормыРМК = СтруктураРеквизитовФормыРМКДляДобавленияСтроки();
				ИдентификаторСтроки = СтрокаТовара.ПолучитьИдентификатор();
				
				ПараметрыДляОбработкиШтрихкода = Новый Структура();
				ПараметрыДляОбработкиШтрихкода.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
				ПараметрыДляОбработкиШтрихкода.Вставить("ЭтоПроверкаМарки", Истина);
				ПроверитьНеобходимостьВводаМарки(ПараметрыДляОбработкиШтрихкода);
				
				ДополнитьПараметрыДляОбработкиШтрихкода(ПараметрыДляОбработкиШтрихкода);
				СтандартнаяОбработка = Истина;
				ОбщегоНазначенияРМККлиентПереопределяемый.ПоискПоШтрихкодуРазрешительныйРежим(
					ЭтотОбъект, Штрихкод, РеквизитыФормыРМК, ПараметрыДляОбработкиШтрихкода, СтандартнаяОбработка);
			
				Если СтандартнаяОбработка Тогда
					
					ДанныеРучногоСопоставления = Новый Структура;
					ДанныеРучногоСопоставления.Вставить("Номенклатура");
					ДанныеРучногоСопоставления.Вставить("Характеристика");
					ДанныеРучногоСопоставления.Вставить("Упаковка");
					ДанныеРучногоСопоставления.Вставить("Серия");
					ДанныеРучногоСопоставления.Вставить("Штрихкод");
					ДанныеРучногоСопоставления.Вставить("Количество");
					
					ЗаполнитьЗначенияСвойств(ДанныеРучногоСопоставления, СтрокаТовара);
					ДанныеРучногоСопоставления.Штрихкод = "";
					
					Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСКлиент");
					ДанныеПараметровСканирования = Модуль.ПараметрыСканирования(ЭтотОбъект);
					
					ПараметрыДляОбработкиШтрихкода.Вставить("ЧастичноеВыбытие", ДанныеПараметровСканирования.ТребуетсяЧастичноеВыбытие);
					ПараметрыДляОбработкиШтрихкода.Вставить("ЧастичноеВыбытиеКоличество", СтрокаТовара.ЧастичноеВыбытиеКоличество);
					
					ДанныеСоСканера = Новый Массив();
					ДанныеСоСканера.Добавить(Штрихкод);
					ДанныеСоСканера.Добавить(Неопределено);
					ДанныеШтрихкода = МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(ДанныеСоСканера);
					
					ПараметрыПоискаРМК = РеквизитыФормыРМК;
					ШтрихкодОригинальный = Штрихкод;
					ЗаменитьСимволGS1(ШтрихкодОригинальный);
					ПараметрыПоискаРМК.Вставить("ШтрихкодОригинальный", ШтрихкодОригинальный);
					ПараметрыДляОбработкиШтрихкода.Вставить("Штрихкод", ШтрихкодОригинальный);
					ПараметрыПоискаРМК.Вставить("ПараметрыДляОбработкиШтрихкода", ПараметрыДляОбработкиШтрихкода);
					ПараметрыПоискаРМК.Вставить("ДанныеРучногоСопоставления", ДанныеРучногоСопоставления);
					ДанныеПараметровСканирования.ДополнительныеПараметры.Вставить("ПараметрыПоискаРМК", ПараметрыПоискаРМК);
					
					ИмяРеквизитаПараметрыСканирования = "ПараметрыСканирования";
					ЭтотОбъект[ИмяРеквизитаПараметрыСканирования] = ДанныеПараметровСканирования;
					
					Модуль.ОбработатьДанныеШтрихкода("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, ДанныеШтрихкода, ДанныеПараметровСканирования);
					
				КонецЕсли;
			
			Иначе
				КонтекстПроверкиКонтрольнойМарки = КонтекстПроверкиКонтрольнойМарки();
				ЗаполнитьЗначенияСвойств(КонтекстПроверкиКонтрольнойМарки, СтрокаТовара);
				КонтекстПроверкиКонтрольнойМарки.КонтекстВызова = "ПроверитьКодыМаркировкиПередПробитиемЧека";
				КонтекстПроверкиКонтрольнойМарки.КодМаркировки = КодМаркировки;
				
				ВременныйКонтекстПроверкиМарки = КонтекстПроверкиКонтрольнойМарки;
				ОбработатьКонтрольнуюМарку(КонтекстПроверкиКонтрольнойМарки);
			КонецЕсли;
		Иначе
			// Перейдем к следующей марке.
			ПроверитьКодыМаркировкиПередПробитием();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьЛокальныеДанныеКарты()
	Если ОбщегоНазначенияРМККлиент.ИспользоватьЗапросБонусовЛокально() Тогда
		Если ИспользоватьОплатуБонусами Тогда
			ЗапроситьДанныеБонусовЛокально();
		КонецЕсли;
		ЗаполнитьДанныеПродажЛокально();
	КонецЕсли;
КонецПроцедуры

#Область РаботаСОборудованиемРозлива

&НаКлиенте
Процедура ВыбратьКодМаркировкиДляТекущейСтроки()
	
	СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
		Возврат;
	КонецЕсли;
	
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
	ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
	
	ВыбранноеЗначение = Элементы.ВыборКодаМаркировки.СписокВыбора.НайтиПоЗначению(ВыборКодаМаркировки);
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		ТекущаяСтрока.КодМаркировки = ВыборКодаМаркировки;
		ТекущаяСтрока.ТребуетсяПроверкаКодаМаркировки = Истина;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ПолныйКодМаркировки", ТекущаяСтрока.КодМаркировки);
		ОписаниеКодаМаркировки = ТекущаяСтрока.КодыМаркировкиПоДаннымИБ.НайтиСтроки(ПараметрыОтбора);
		Если ОписаниеКодаМаркировки.Количество() <> 0 Тогда
			ТекущаяСтрока.ЧастичноеВыбытиеОстаток = ОписаниеКодаМаркировки[0].ОстатокПоКодуМаркировки;
		КонецЕсли;
		НастроитьДоступностьКомандИзмененияКоличества(ТекущаяСтрока);
		ВывестиПредупреждениеОстаткаЧастичноеВыбытие(ТекущаяСтрока);
	КонецЕсли;
	
	Если ЭтоЗаменаТоваров Тогда
		НастроитьДоступностьПробитьЧек();
	Иначе
		ИнтерфейсРМКСлужебныйКлиент.НастроитьДоступностьРежимаОплаты(ЭтотОбъект);
	КонецЕсли;
	
	НастроитьПредставлениеТовара(ТекущаяСтрока);
	ОбщегоНазначенияРМККлиентСервер.УстановитьНомерКартинкиСтрокиТовара(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьКегКОборудованиюРозливаКлиент(СтрокаТовара = Неопределено)
	
	РежимРаботыСОборудованиемРозлива = Истина;
	ОбработкаОповещения = Новый ОписаниеОповещения("РаботаСОборудованиемРозливаЗавершение", ЭтотОбъект);
	ОбщегоНазначенияРМККлиентПереопределяемый.ПодключитьКегКОборудованиюРозлива(ЭтотОбъект, СтрокаТовара, ОбработкаОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьКегОтОборудованияРозливаКлиент()
	
	ОбработкаОповещения = Новый ОписаниеОповещения("РаботаСОборудованиемРозливаЗавершение", ЭтотОбъект);
	ОбщегоНазначенияРМККлиентПереопределяемый.ОтключитьКегОтОборудованияРозлива(ЭтотОбъект, ОбработкаОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботаСОборудованиемРозливаЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	РежимРаботыСОборудованиемРозлива = Ложь;
	
	СтрокиСПивнойПродукцией = Новый Массив;
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ПоштучноеВыбытие", Истина);
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		Если СтрокаТовара.ПоштучноеВыбытие И ОбщегоНазначенияРМККлиентСервер.ЭтоПивнаяПродукция(СтрокаТовара.ОсобенностьУчета) Тогда
			СтрокиСПивнойПродукцией.Добавить(СтрокаТовара.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
	Если Не СтрокиСПивнойПродукцией.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	// Обновим кэш кодов маркировки.
	РаботаСОборудованиемРозливаЗавершениеНаСервере(СтрокиСПивнойПродукцией);
	
	СтрокаТовара = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ИдентификаторТекущейСтроки") Тогда
		СтрокаТовара = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
	ИначеЕсли Не Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
		СтрокаТовара = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	КонецЕсли;
	
	Если Не СтрокаТовара = Неопределено
		И СтрокаТовара.НеобходимостьВводаКодаМаркировки И СтрокаТовара.ПоштучноеВыбытие
		И ОбщегоНазначенияРМККлиентСервер.ЭтоПивнаяПродукция(СтрокаТовара.ОсобенностьУчета) Тогда
		ЗаполнитьКодыМаркировкиДоступныеДляВыбора(СтрокаТовара);
		НастроитьДоступностьКомандИзмененияКоличества(СтрокаТовара);
		НастроитьПредставлениеТовара(СтрокаТовара);
		НастроитьКомандуУказатьМарку(СтрокаТовара);
		ВывестиПредупреждениеОстаткаЧастичноеВыбытие(СтрокаТовара);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РаботаСОборудованиемРозливаЗавершениеНаСервере(СтрокиСПивнойПродукцией)
	
	Для Каждого ИдентификаторСтроки Из СтрокиСПивнойПродукцией Цикл
		ЗаполнитьДанныеКодовМаркировкиДляВыбора(Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки));
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеКодовМаркировкиДляВыбора(СтрокаТовара)
	
	Если СтрокаТовара.Свойство("КодыМаркировкиПоДаннымИБ") Тогда
		СтрокаТовара.КодыМаркировкиПоДаннымИБ.Очистить();
		КодыМаркировкиПоДаннымИБ = ОбщегоНазначенияРМК.КодыМаркировкиПоДаннымИБ(ЭтотОбъект, СтрокаТовара);
		Для Каждого КодМаркировкиПоДаннымИБ Из КодыМаркировкиПоДаннымИБ Цикл
			КодМаркировки = МенеджерОборудованияКлиентСервер.Base64ВШтрихкод(КодМаркировкиПоДаннымИБ.ПолныйКодМаркировки);
			ЗаменитьСимволGS1(КодМаркировки);
			
			НоваяСтрокаМарки = СтрокаТовара.КодыМаркировкиПоДаннымИБ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаМарки, КодМаркировкиПоДаннымИБ);
			НоваяСтрокаМарки.ПолныйКодМаркировки = КодМаркировки;
		КонецЦикла;
	Иначе
		МассивКодовМаркировки = Новый Массив;
		КодыМаркировкиПоДаннымИБ = ОбщегоНазначенияРМК.КодыМаркировкиПоДаннымИБ(ЭтотОбъект, СтрокаТовара);
		Для Каждого КодМаркировкиПоДаннымИБ Из КодыМаркировкиПоДаннымИБ Цикл
			ДанныеКодаМаркировки = Новый Структура;
			ДанныеКодаМаркировки.Вставить("ПолныйКодМаркировки");
			ДанныеКодаМаркировки.Вставить("КодМаркировкиПредставление");
			ДанныеКодаМаркировки.Вставить("ОстатокПоКодуМаркировки");
			
			КодМаркировки = МенеджерОборудованияКлиентСервер.Base64ВШтрихкод(КодМаркировкиПоДаннымИБ.ПолныйКодМаркировки);
			ЗаменитьСимволGS1(КодМаркировки);
			
			ЗаполнитьЗначенияСвойств(ДанныеКодаМаркировки, КодМаркировкиПоДаннымИБ);
			ДанныеКодаМаркировки.ПолныйКодМаркировки = КодМаркировки;
			МассивКодовМаркировки.Добавить(ДанныеКодаМаркировки);
		КонецЦикла;
		СтрокаТовара.Вставить("КодыМаркировкиПоДаннымИБ", МассивКодовМаркировки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКодыМаркировкиДоступныеДляВыбора(СтрокаТовара)
	
	ВыборКодаМаркировки = Неопределено;
	Если ЗначениеЗаполнено(СтрокаТовара.КодМаркировки) Тогда
		ВыборКодаМаркировки = СтрокаТовара.КодМаркировки;
	КонецЕсли;
	Элементы.ВыборКодаМаркировки.СписокВыбора.Очистить();
	КодыМаркировкиДоступныеДляВыбора = КодыМаркировкиДоступныеДляВыбора(СтрокаТовара.КодыМаркировкиПоДаннымИБ, Объект.Товары);
	ОбщегоНазначенияКлиентСервер.ДополнитьСписок(Элементы.ВыборКодаМаркировки.СписокВыбора, КодыМаркировкиДоступныеДляВыбора);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КодыМаркировкиДоступныеДляВыбора(КодыМаркировки, Товары)
	
	ВыводитьОстатокВПредставлении = Истина;
	ОбщегоНазначенияРМККлиентСерверПереопределяемый.ВыводитьОстатокВПредставлении(ВыводитьОстатокВПредставлении);
	
	КодыМаркировкиДоступныеДляВыбора = Новый СписокЗначений;
	Для Каждого ЭлементСписка Из КодыМаркировки Цикл
		Если ВыводитьОстатокВПредставлении Тогда
			ПредставлениеКодаМаркировки = СтрШаблон(НСтр("ru = '%1 (Остаток %2 л.)'"), ЭлементСписка.КодМаркировкиПредставление, ЭлементСписка.ОстатокПоКодуМаркировки);
		Иначе
			ПредставлениеКодаМаркировки = ЭлементСписка.КодМаркировкиПредставление;
		КонецЕсли;
		КодыМаркировкиДоступныеДляВыбора.Добавить(ЭлементСписка.ПолныйКодМаркировки, ПредставлениеКодаМаркировки);
	КонецЦикла;
	
	Возврат КодыМаркировкиДоступныеДляВыбора;
	
КонецФункции

&НаКлиенте
Процедура ВывестиПредупреждениеОстаткаЧастичноеВыбытие(ТекущаяСтрока)
	
	СтандартнаяОбработка = Истина;
	
	ОбщегоНазначенияРМККлиентПереопределяемый.ВывестиПредупреждениеОстаткаЧастичноеВыбытие(ТекущаяСтрока, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
	
		Если ТекущаяСтрока.КоличествоВПотребительскойУпаковке = 0 Или Не ЗначениеЗаполнено(ТекущаяСтрока.КодМаркировки) Тогда
			Возврат;
		КонецЕсли;
		
		КодМаркировки = ТекущаяСтрока.КодМаркировки;
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ПолныйКодМаркировки", КодМаркировки);
		ОписаниеКодаМаркировки = ТекущаяСтрока.КодыМаркировкиПоДаннымИБ.НайтиСтроки(ПараметрыОтбора);
		Если ОписаниеКодаМаркировки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ПроцентОстатка = ((ТекущаяСтрока.ЧастичноеВыбытиеОстаток - ТекущаяСтрока.Количество) * 100) / ТекущаяСтрока.КоличествоВПотребительскойУпаковке;
		
		ВыбытиеБутылки = Ложь;
		ТекстыОшибокКонтроляОстатковЧастичногоВыбытия = Неопределено;
		ОбщегоНазначенияРМККлиентПереопределяемый.ТекстыОшибокКонтроляОстатковЧастичногоВыбытия(ТекстыОшибокКонтроляОстатковЧастичногоВыбытия);
		
		Если ПроцентОстатка > 0 И ПроцентОстатка < 20 Тогда
			ИндексКартинкиПоштучноеВыбытие = 1;
			
			ТекстЗаголовка = НСтр("ru = 'Контроль остатков'");
			
			Если ТекстыОшибокКонтроляОстатковЧастичногоВыбытия = Неопределено Тогда
				ТекстОшибки = НСтр("ru = 'Предупреждение по остатку частичного выбытия.'");
			Иначе
				ТекстОшибки = ТекстыОшибокКонтроляОстатковЧастичногоВыбытия.Получить(ТекущаяСтрока.ОсобенностьУчета).Предупреждение;
			КонецЕсли;
			
			ПараметрыОшибки = Новый Структура;
			ПараметрыОшибки.Вставить("ЭтоПредупреждение", Истина);
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки, ПараметрыОшибки);
		ИначеЕсли ПроцентОстатка <= 0 Тогда
			ВыбытиеБутылки = Истина;
			
			ТекстЗаголовка = НСтр("ru = 'Контроль остатков'");
			
			Если ТекстыОшибокКонтроляОстатковЧастичногоВыбытия = Неопределено Тогда
				ТекстОшибки = НСтр("ru = 'Критический остаток частичного выбытия.'");
			Иначе
				ТекстОшибки = ТекстыОшибокКонтроляОстатковЧастичногоВыбытия.Получить(ТекущаяСтрока.ОсобенностьУчета).КритическийОстаток;
			КонецЕсли;
			
			ПараметрыОшибки = Новый Структура;
			ПараметрыОшибки.Вставить("ЭтоПредупреждение", Истина);
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки, ПараметрыОшибки);
		КонецЕсли;
		
		Если ТекущаяСтрока.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная") Тогда
			ТекущаяСтрока.ВыбытиеБутылки = ВыбытиеБутылки;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьЧастичноеВыбытиеОстатокПоСтроке(ТекущаяСтрока, Товары, ИндексКартинкиПоштучноеВыбытие)
	
	СтандартнаяОбработка = Истина;
	
	ОбщегоНазначенияРМККлиентСерверПереопределяемый.ЗаполнитьЧастичноеВыбытиеОстатокПоСтроке(ТекущаяСтрока, Товары, ИндексКартинкиПоштучноеВыбытие, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
	
		КодМаркировки = ТекущаяСтрока.КодМаркировки;
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ПолныйКодМаркировки", КодМаркировки);
		ОписаниеКодаМаркировки = ТекущаяСтрока.КодыМаркировкиПоДаннымИБ.НайтиСтроки(ПараметрыОтбора);
		ИспользованныйОстатокЧастичногоВыбытия = 0;
		Если ОписаниеКодаМаркировки.Количество() > 0 Тогда
			
			ОтборТоварыПоКодуМаркировки = Новый Структура;
			ОтборТоварыПоКодуМаркировки.Вставить("КодМаркировки", КодМаркировки);
			ТоварыПоКодуМаркировки = Товары.НайтиСтроки(ОтборТоварыПоКодуМаркировки);
			Если ТоварыПоКодуМаркировки.Количество() > 1 Тогда
				
				Для каждого СтрокаКодМаркировки Из ТоварыПоКодуМаркировки Цикл
					Если СтрокаКодМаркировки = ТекущаяСтрока Тогда
						Продолжить;
					КонецЕсли;
					ИспользованныйОстатокЧастичногоВыбытия = ИспользованныйОстатокЧастичногоВыбытия + СтрокаКодМаркировки.Количество;
				КонецЦикла;
				
			КонецЕсли;
			ТекущаяСтрока.ЧастичноеВыбытиеОстаток = ОписаниеКодаМаркировки[0].ОстатокПоКодуМаркировки - ИспользованныйОстатокЧастичногоВыбытия;
			
		Иначе
			
			ТекущаяСтрока.ЧастичноеВыбытиеОстаток = ТекущаяСтрока.КоличествоВПотребительскойУпаковке;
			Возврат;
			
		КонецЕсли;
		
		ИндексКартинкиПоштучноеВыбытие = 0;
		
		Если Не ТекущаяСтрока.КоличествоВПотребительскойУпаковке = 0 Тогда
			
			ПроцентОстатка = ((ТекущаяСтрока.ЧастичноеВыбытиеОстаток - ТекущаяСтрока.Количество) * 100) / ТекущаяСтрока.КоличествоВПотребительскойУпаковке;
			
			Если ПроцентОстатка >= 80 Тогда
				ИндексКартинкиПоштучноеВыбытие = 5;
			ИначеЕсли ПроцентОстатка >= 60 И ПроцентОстатка < 80 Тогда
				ИндексКартинкиПоштучноеВыбытие = 4;
			ИначеЕсли ПроцентОстатка >= 40 И ПроцентОстатка < 60 Тогда
				ИндексКартинкиПоштучноеВыбытие = 3;
			ИначеЕсли ПроцентОстатка >= 20 И ПроцентОстатка < 40 Тогда
				ИндексКартинкиПоштучноеВыбытие = 2;
			ИначеЕсли ПроцентОстатка > 0 И ПроцентОстатка < 20 Тогда
				ИндексКартинкиПоштучноеВыбытие = 1;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВскрытьПотребительскуюУпаковкуКлиент(СтрокаТовара = Неопределено)
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ВскрытьПотребительскуюУпаковкуЗавершение", ЭтотОбъект);
	ОбщегоНазначенияРМККлиентПереопределяемый.ВскрытьПотребительскуюУпаковку(ЭтотОбъект, СтрокаТовара, ОбработкаОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВскрытьПотребительскуюУпаковкуЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	СтрокиСПоштучнымВыбытием = Новый Массив;
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ПоштучноеВыбытие", Истина);
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		Если СтрокаТовара.ПоштучноеВыбытие И Не ОбщегоНазначенияРМККлиентСервер.ЭтоПивнаяПродукция(СтрокаТовара.ОсобенностьУчета) Тогда
			СтрокиСПоштучнымВыбытием.Добавить(СтрокаТовара.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
	Если Не СтрокиСПоштучнымВыбытием.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	// Обновим кэш кодов маркировки.
	РаботаСОборудованиемРозливаЗавершениеНаСервере(СтрокиСПоштучнымВыбытием);
	
	СтрокаТовара = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ИдентификаторТекущейСтроки") Тогда
		СтрокаТовара = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
	ИначеЕсли Не Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
		СтрокаТовара = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	КонецЕсли;
	
	Если Не СтрокаТовара = Неопределено
		И СтрокаТовара.НеобходимостьВводаКодаМаркировки И СтрокаТовара.ПоштучноеВыбытие Тогда
		
		Если СтрокаТовара.КодыМаркировкиПоДаннымИБ.Количество() = 0 Тогда
			СтрокаТовара.КодМаркировки = "";
			СтрокаТовара.КонтрольнаяМарка = "";
			ОбщегоНазначенияРМККлиентСервер.УстановитьНомерКартинкиСтрокиТовара(СтрокаТовара);
			СкрытьЦифровуюПанельДляВводаСуммПриНеобходимости();
			ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаОтсканироватьМарку);
			СформироватьТекстВводМарки();
			ОграничитьДоступностьЭлементовПриОжиданииМарки(Истина);
			ИнтерфейсРМКСлужебныйКлиент.НастроитьДоступностьРежимаОплаты(ЭтотОбъект);
			УстановитьФокусНаТовареТребующемВводаМарки();
		Иначе
			ЗаполнитьКодыМаркировкиДоступныеДляВыбора(СтрокаТовара);
			НастроитьДоступностьКомандИзмененияКоличества(СтрокаТовара);
			НастроитьПредставлениеТовара(СтрокаТовара);
			НастроитьКомандуУказатьМарку(СтрокаТовара);
			ВывестиПредупреждениеОстаткаЧастичноеВыбытие(СтрокаТовара);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОткрытьФормуОбученияУстройствРаспознавания()
	
	ПараметрыОткрытия = Новый Структура("НастройкаРМК", ТекущаяНастройкаРМК);
	ПараметрыОткрытия.Вставить("Масштаб", Масштаб);
	ПараметрыОткрытия.Вставить("ТорговыйОбъект", Объект.ТорговыйОбъект);
		
	ОткрытьФорму("Обработка.РабочееМестоКассира.Форма.ФормаОбученияУстройствРаспознавания",
		ПараметрыОткрытия, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоДобавлениеТовараВНовыйЧек()
	
	ПервоеДобавлениеТовара = (РежимРаботыСЧеком = РежимыРаботыСЧеком.ЧекПустой И Объект.Товары.Количество() > 0);
	ЭтоНовыйЧек = (Не (ЭтоЧекКоррекции Или ЗначениеЗаполнено(ОтложенныйЧек)));
	Возврат (ЭтоНовыйЧек И ПервоеДобавлениеТовара);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РегистрироватьДействияКассира(Форма)
	
	Возврат ИнтерфейсРМКСлужебныйКлиентСервер.РегистрироватьДействияКассира(Форма);
	
КонецФункции

&НаКлиенте
Процедура ПроверитьЗарегистрироватьНовыйЧек(ПереходКСледующемуЧеку = Ложь)
	
	Если РегистрироватьДействияКассира(ЭтотОбъект) И (ПереходКСледующемуЧеку Или ЭтоДобавлениеТовараВНовыйЧек()) Тогда
		ПараметрыОперации = ИнтерфейсРМКСлужебныйКлиентСервер.ПодготовитьПараметрыОперацииНаРабочемМестеКассира(ЭтотОбъект);
		Если ПереходКСледующемуЧеку И ЭтоЧекКоррекции Тогда
			ПараметрыОперации.РегистрируемаяОперация
				= ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ОперацииРабочегоМестаКассира.НачалоКоррекции");
		ИначеЕсли ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации) Тогда
			ПараметрыОперации.РегистрируемаяОперация
				= ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ОперацииРабочегоМестаКассира.НачалоВозврата");
		ИначеЕсли ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозвратСкупки(Объект.ВидОперации) Тогда
			ПараметрыОперации.РегистрируемаяОперация
				= ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ОперацииРабочегоМестаКассира.НачалоВозвратаСкупки");
		ИначеЕсли ОбщегоНазначенияРМККлиент.ЭтоВидОперацииСкупка(Объект.ВидОперации) Тогда
			ПараметрыОперации.РегистрируемаяОперация
				= ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ОперацииРабочегоМестаКассира.НачалоСкупки");
		Иначе
			ПараметрыОперации.РегистрируемаяОперация
				= ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ОперацииРабочегоМестаКассира.НачалоПродажи");
		КонецЕсли;
		ЗаписатьОперациюНаРабочемМестеКассира(ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьНовуюПродажу()
	
	Если РегистрироватьДействияКассира(ЭтотОбъект) Тогда
		ПолноеИмяОперации = "Перечисление.ОперацииРабочегоМестаКассира.НачалоПродажи";
		ПараметрыОперации = ИнтерфейсРМКСлужебныйКлиентСервер.ПодготовитьПараметрыОперацииНаРабочемМестеКассира(ЭтотОбъект);
		ПараметрыОперации.РегистрируемаяОперация = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(ПолноеИмяОперации);
		
		ЗаписатьОперациюНаРабочемМестеКассира(ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьРаботуСЧекомБезРасчетаСкидок()
	
	Если РегистрироватьДействияКассира(ЭтотОбъект) Тогда
		ПолноеИмяОперации = "Перечисление.ОперацииРабочегоМестаКассира.ПродолжениеБезРасчетаСкидок";
		ПараметрыОперации = ИнтерфейсРМКСлужебныйКлиентСервер.ПодготовитьПараметрыОперацииНаРабочемМестеКассира(ЭтотОбъект);
		ПараметрыОперации.РегистрируемаяОперация = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(ПолноеИмяОперации);
		ПараметрыОперации.Сумма = СуммаБезСкидки;
		
		ЗаписатьОперациюНаРабочемМестеКассира(ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьНачалоРаботыССуществующимЧеком(ИмяРегистрируемойОперации, ЧекККМ)
	
	Если РегистрироватьДействияКассира(ЭтотОбъект) Тогда
		ПолноеИмяОперации = СтрШаблон("Перечисление.ОперацииРабочегоМестаКассира.%1", ИмяРегистрируемойОперации);
		ПараметрыОперации = ИнтерфейсРМКСлужебныйКлиентСервер.ПодготовитьПараметрыОперацииНаРабочемМестеКассира(ЭтотОбъект);
		ПараметрыОперации.РегистрируемаяОперация = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(ПолноеИмяОперации);
		ПараметрыОперации.Чек = ЧекККМ;
		ПараметрыОперации.Сумма = Объект.СуммаДокумента;
		
		ЗаписатьОперациюНаРабочемМестеКассира(ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьПробитиеЧека()
	
	ЗарегистрироватьПробиваемыйЧек("Перечисление.ОперацииРабочегоМестаКассира.ПробитиеЧека");
	
	ТребуетсяОтразитьИзменениеНаличных = Ложь;
	ОбщегоНазначенияРМККлиентПереопределяемый.ТребуетсяОтразитьИзменениеНаличных(ТребуетсяОтразитьИзменениеНаличных);
	Если ТребуетсяОтразитьИзменениеНаличных И
		(СуммаОплаченоНал > 0 ИЛИ СуммаНаличныхКВыдаче > 0) Тогда
			ОтразитьИзменениеНаличныхДенежныхСредствКлиентСервер(Объект.Организация, Объект.КассаККМ, ТаблицаКассККМОрганизаций);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьОтправкуЧекаНаФискализацию()
	
	ЗарегистрироватьПробиваемыйЧек("Перечисление.ОперацииРабочегоМестаКассира.ОтправкаНаПробитиеЧека");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьПробиваемыйЧек(ИмяРегистрируемойОперации)
	
	Если РегистрироватьДействияКассира(ЭтотОбъект) Тогда
		ПараметрыОперации = ИнтерфейсРМКСлужебныйКлиентСервер.ПодготовитьПараметрыОперацииНаРабочемМестеКассира(ЭтотОбъект);
		ПараметрыОперации.РегистрируемаяОперация = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(ИмяРегистрируемойОперации);
		ПараметрыОперации.Чек = ЧекККМВОбработке;
		ПараметрыОперации.Сумма = СуммаБезСкидки;
		
		ЗаписатьОперациюНаРабочемМестеКассира(ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьУдалениеЧека(СуммаДляРегистрации)
	
	Если РегистрироватьДействияКассира(ЭтотОбъект) Тогда
		ПараметрыОперации = ИнтерфейсРМКСлужебныйКлиентСервер.ПодготовитьПараметрыОперацииНаРабочемМестеКассира(ЭтотОбъект);
		ПараметрыОперации.РегистрируемаяОперация = Перечисления.ОперацииРабочегоМестаКассира.УдалениеЧека;
		ПараметрыОперации.Сумма = СуммаДляРегистрации;
		
		ЗаписатьОперациюНаРабочемМестеКассира(ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьОткрытиеОтложенногоЧека()

	Если РегистрироватьДействияКассира(ЭтотОбъект) Тогда
		ПараметрыОперации = ИнтерфейсРМКСлужебныйКлиентСервер.ПодготовитьПараметрыОперацииНаРабочемМестеКассира(ЭтотОбъект);
		ПараметрыОперации.РегистрируемаяОперация = Перечисления.ОперацииРабочегоМестаКассира.ОткрытиеОтложенногоЧека;
		ПараметрыОперации.Чек = ОтложенныйЧек;
		ПараметрыОперации.Сумма = Объект.СуммаДокумента;
		
		ЗаписатьОперациюНаРабочемМестеКассира(ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОперациюНаРабочемМестеКассира(ПараметрыОперации)
	
	РегистрыСведений.ЖурналДействийКассира.ЗарегистрироватьОперацию(ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуВТабличнуюЧастьНаКлиенте(Знач ДанныеТовара, Знач НеобходимВводМаркировки = Ложь)
	
	НоваяСтрока = Объект.Товары.Добавить();
	
	Если ДанныеТовара.Свойство("КодыМаркировкиПоДаннымИБ") И ТипЗнч(ДанныеТовара.КодыМаркировкиПоДаннымИБ) = Тип("Массив") Тогда
		Для каждого КодМаркировкиПоДаннымИБ Из ДанныеТовара.КодыМаркировкиПоДаннымИБ Цикл
			НовыйКодМаркировки = НоваяСтрока.КодыМаркировкиПоДаннымИБ.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйКодМаркировки, КодМаркировкиПоДаннымИБ);
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеТовара, , "КодыМаркировкиПоДаннымИБ");
	Иначе
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеТовара);
	КонецЕсли;
	
	Если НЕ ИспользоватьВыборСкладаПриПродаже Тогда
		НоваяСтрока.ТорговыйОбъект = Объект.ТорговыйОбъект;
	КонецЕсли;
	
	Если НоваяСтрока.Подарок Тогда
		КоличествоТоваров = Объект.Товары.Количество();
		Если КоличествоТоваров > 0 Тогда
			СтрокаТаблицы = Объект.Товары[КоличествоТоваров - 2];
			НоваяСтрока.Продавец = СтрокаТаблицы.Продавец;
			НоваяСтрока.ПродавецПредставление = СтрокаТаблицы.ПродавецПредставление;
			НоваяСтрока.ТорговыйОбъект = СтрокаТаблицы.ТорговыйОбъект;
		КонецЕсли;
		СуммаПодарка = НоваяСтрока.Цена * НоваяСтрока.КоличествоУпаковок;
		НоваяСтрока.СуммаБезСкидки = СуммаПодарка;
		Если ДанныеТовара.ОбластьПредоставленияДокумент
			И ДанныеТовара.ВыводитьПодарокВЧек Тогда
			СуммаПодарковКРаспределению = СуммаПодарковКРаспределению + СуммаПодарка;
		Иначе
			НоваяСтрока.ПроцентАвтоматическойСкидки = 100;
			НоваяСтрока.СуммаАвтоматическойСкидки = НоваяСтрока.Цена * НоваяСтрока.КоличествоУпаковок;
			НоваяСтрока.ОтображаетсяСкидкаПроцентом = Истина;
		КонецЕсли;
		Если РежимВыбораПодарка Тогда
			ОчиститьПодаркиПоТекущемуВладельцу(Ложь);
		КонецЕсли;
	КонецЕсли;
	
	НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	НоваяСтрока.НеобходимостьВводаКодаМаркировки = НеобходимВводМаркировки;
	
	Если ЭтоВнесениеПредоплатыПоЗаказу Или ЭтоОплатаРассрочки Или РежимЗаказа Тогда
		НоваяСтрока.НеобходимостьВводаКодаМаркировки = Ложь;
		НоваяСтрока.ПроверятьЗаполнениеСерий = Ложь;
		Если Не РежимЗаказа Тогда
			НоваяСтрока.НеобходимостьВводаСерии = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НоваяСтрока.ПоштучноеВыбытие Тогда
		НоваяСтрока.ЧастичноеВыбытиеВариантУчета = ДанныеТовара.ВариантЧастичногоВыбытия;
		НоваяСтрока.ЧастичноеВыбытиеНоменклатура = НоваяСтрока.Номенклатура;
		НоваяСтрока.ЧастичноеВыбытиеХарактеристика = НоваяСтрока.Характеристика;
		НоваяСтрока.ЧастичноеВыбытиеКоличество = НоваяСтрока.Количество;
		ЗаполнитьЧастичноеВыбытиеОстатокПоСтроке(НоваяСтрока, Объект.Товары, ИндексКартинкиПоштучноеВыбытие);
	КонецЕсли;
	
	Отказ = Ложь;
	Если РучноеСопоставлениеТовара И ЗначениеЗаполнено(ДанныеДляРучногоСопоставления) Тогда
		НоваяСтрокаИндекс = НоваяСтрока.НомерСтроки-1;
		ЗаполнитьДанныеРучногоСопоставленияСКлиента(НоваяСтрокаИндекс, ДанныеТовара.ОсобенностьУчета, Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодМаркиВРаботе) Тогда
		НоваяСтрока.КодМаркировки = КодМаркиВРаботе;
	КонецЕсли;
	
	УстановитьДоступностьЭлементаФормы(Элементы.ПолучитьВес, НоваяСтрока.Весовой);
	
	Если НЕ Отказ Тогда
		
		НоваяСтрока.ПредставлениеКодАртикул = ПолучитьПредставлениеКодАртикул(ДанныеТовара, ИспользоватьКод, ИспользоватьАртикул);
		
		ПредставлениеХарактеристики = "";
		Если ДанныеТовара.Свойство("Характеристика") Тогда
			Если ЗначениеЗаполнено(ДанныеТовара.Характеристика) Тогда
				ПредставлениеХарактеристики = " (" + Строка(ДанныеТовара.Характеристика) + ")";
			ИначеЕсли ДанныеТовара.ПроверятьЗаполнениеХарактеристики Тогда
				ПредставлениеХарактеристики = НСтр("ru = '(Характеристика не выбрана)'");
			КонецЕсли;
		КонецЕсли;
		
		ПредставлениеТовара = СтрШаблон("%1%2", ДанныеТовара.Наименование, ПредставлениеХарактеристики);
		НоваяСтрока.ПредставлениеНоменклатураХарактеристика = ПредставлениеТовара;
		
		Если НоваяСтрока.НеобходимостьВводаСерии
			И ЗначениеЗаполнено(НоваяСтрока.Серия) Тогда
			НоваяСтрока.СерияПредставление = Строка(НоваяСтрока.Серия);
		КонецЕсли;
			
		Если ЗначениеЗаполнено(НоваяСтрока.Упаковка) Тогда
			НоваяСтрока.ПредставлениеНоменклатураХарактеристика = СтрШаблон("%1 - %2", ПредставлениеТовара, НоваяСтрока.ПредставлениеЕдиницыИзмерения);
		КонецЕсли;
		
		ТекущийТоварКоличество = НоваяСтрока.КоличествоУпаковок;
		ТекущийТоварИдентификатор = НоваяСтрока.ПолучитьИдентификатор();
		
		ДоступныРучныеСкидки = ДопускаетсяПрименениеСкидок И (Объект.Товары.Количество() > 0);
		
		Если Не РежимПлитки Тогда
			УстановитьДоступностьЭлементаФормы(Элементы.ГруппаРучнаяСкидкаНаТовар, ДоступныРучныеСкидки);
			УстановитьДоступностьЭлементаФормы(Элементы.СкидкаНаЧек, ДоступныРучныеСкидки);
			УстановитьДоступностьЭлементаФормы(Элементы.УправляемыеСкидки, ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации));
			УстановитьДоступностьЭлементаФормы(Элементы.СкидкаТекущийТоварУправляемая, ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации));
		КонецЕсли;
		
		ПодготовитьИнтерфейсДобавленияТовараБезКонтрольнойМарки(НоваяСтрока);
		ДобавленаНоваяСтрокаКорзины = Истина;
		
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая Тогда
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
		КонецЕсли;
		Элементы.Товары.ТекущаяСтрока = ТекущийТоварИдентификатор;
		УстановитьТекущийЭлементКоличество(ЭтотОбъект);
		
	КонецЕсли;
	
	Если ИспользоватьКассираКакПродавца Тогда
		ЗаполнитьПродавцаИзКассираНаКлиенте(НоваяСтрока)
	КонецЕсли;
	
	Если Не Отказ И ДанныеТовара.СтрокаТовараПолученаИзКэша Тогда
		ОбновитьДанныеРазливногоПива = Ложь;
		СтрокаТовара = НоваяСтрока;
		Если СтрокаТовара.НеобходимостьВводаКодаМаркировки И Не ЗначениеЗаполнено(СтрокаТовара.КодМаркировки)
			И СтрокаТовара.ПоштучноеВыбытие И СтрокаТовара.ЭтоПивнаяПродукция
			И ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации) Тогда
				ОбновитьДанныеРазливногоПива = Истина;
		КонецЕсли;
		Если (ОтображатьОстаток И Не ИспользуютсяСтатическиеОстаткиТоваров)
			Или ОбновитьДанныеРазливногоПива Тогда
			ДополнитьСтрокуНаСервереПослеДобавленияНаКлиенте(ОбновитьДанныеРазливногоПива);
			Если ОбновитьДанныеРазливногоПива Тогда
				ОграничитьДоступностьЭлементовПриОжиданииМарки(Не ЗначениеЗаполнено(СтрокаТовара.КодМаркировки));
				ТоварыПриАктивизацииСтроки(Элементы.Товары);
				ВывестиПредупреждениеОстаткаЧастичноеВыбытие(СтрокаТовара);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	СписокДобавленныхСтрокТоваров.Добавить(НоваяСтрока.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПродавцаИзКассираНаКлиенте(ТекущиеДанные)
	ТекущиеДанные.Продавец = Объект.Кассир;
	ТекущиеДанные.ПродавецПредставление = Строка(Объект.Кассир);
	ТекущийПродавец = СтрШаблон("%1 %2", НСтр("ru = 'Продавец:'"), ТекущиеДанные.ПродавецПредставление);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтрокуВТабличнойЧастиНаКлиенте(НайденнаяСтрока, ТекущийВыбор)
	
	Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.ИдентификаторСтроки) Тогда
		НайденнаяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Если РучноеСопоставлениеТовара И ЗначениеЗаполнено(ДанныеДляРучногоСопоставления) Тогда
		Отказ = Ложь;
		НайденнаяСтрокаИндекс = НайденнаяСтрока.НомерСтроки-1;
		ЗаполнитьДанныеРучногоСопоставленияСКлиента(НайденнаяСтрокаИндекс, НайденнаяСтрока.ОсобенностьУчета, Отказ);
		ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ОбластьОперативногоУправленияЧеком);
	КонецЕсли;
	
	ДобавленВесовойНефасованныйТовар = НайденнаяСтрока.Весовой И Не НайденнаяСтрока.Фасованный;
	Если Не ДобавленВесовойНефасованныйТовар Тогда
		
		НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + 1;
		НайденнаяСтрока.КоличествоУпаковок = НайденнаяСтрока.КоличествоУпаковок + 1;
		
	Иначе
		
		Если ТекущийВыбор.Свойство("Количество") Тогда
			НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + ТекущийВыбор.Количество;
		КонецЕсли;
		
		Если ТекущийВыбор.Свойство("КоличествоУпаковок") Тогда
			НайденнаяСтрока.КоличествоУпаковок = НайденнаяСтрока.КоличествоУпаковок + ТекущийВыбор.КоличествоУпаковок;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущийТоварКоличество = НайденнаяСтрока.КоличествоУпаковок;
	
	Элементы.Товары.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
	
	УстановитьТекущийЭлементКоличество(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеРучногоСопоставленияСКлиента(ТекущаяСтрокаИндекс, ОсобенностьУчета, Отказ)
	
	ТекущаяСтрока = Объект.Товары[ТекущаяСтрокаИндекс];
	
	ПараметрыШтрихкодирования = Новый Структура();
	ПараметрыШтрихкодирования.Вставить("Объект", Объект);
	ПараметрыШтрихкодирования.Вставить("КонтролироватьЕМРЦ", КонтролироватьЕМРЦ);
	ПараметрыШтрихкодирования.Вставить("УчитыватьМРЦ", УчитыватьМРЦ);
	
	Если ЕстьСвойство(ДанныеДляРучногоСопоставления, "КодМарки") Тогда
		
		ШтрихкодированиеРМК.РазобратьМаркуИЗаполнитьДанные(ТекущаяСтрока,
			ДанныеДляРучногоСопоставления.КодМарки,
			ОсобенностьУчета,
			ПараметрыШтрихкодирования);
			
	КонецЕсли;
	
	Если ЕстьСвойство(ПараметрыШтрихкодирования, "УпаковкаНеНайдена") Тогда
		
		Отказ = Истина;
		ДанныеДляРучногоСопоставления = Неопределено;
		ЗавершитьВводШтрихкодаУпаковкаНеНайдена(ПараметрыШтрихкодирования.НоменклатураБезУпаковки);
		
	Иначе
		
		Если ЕстьСвойство(ДанныеДляРучногоСопоставления, "EAN") Тогда
			ТекущаяСтрока.Штрихкод = ДанныеДляРучногоСопоставления.EAN;
		КонецЕсли;
		Если ЕстьСвойство(ДанныеДляРучногоСопоставления, "Штрихкод") 
			И ЕстьСвойство(ДанныеДляРучногоСопоставления, "ТоварНеНайденПоШтрихкоду")
			И НЕ ЗначениеЗаполнено(ТекущаяСтрока.Штрихкод) Тогда
			ТекущаяСтрока.Штрихкод = ДанныеДляРучногоСопоставления.Штрихкод;
		КонецЕсли;
		Если ЕстьСвойство(ДанныеДляРучногоСопоставления, "КодМарки") Тогда
			ТекущаяСтрока.КодМаркировки = ДанныеДляРучногоСопоставления.КодМарки;
		КонецЕсли;
		
		СоздатьЗаписьВШтрихкоды(ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКэшСтрокТоваровКорзины()
	
	Если КэшиСтрокТоваров.Свойство("КэшКорзины") Тогда
		КэшиСтрокТоваров.КэшКорзины.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКэшПлитки()
	
	Если КэшиСтрокТоваров.Свойство("КэшПлитки") Тогда
		РеквизитыФормыРМК = СтруктураРеквизитовФормыРМКДляДобавленияСтроки();
		Если РеквизитыФормыРМК.МассивОрганизаций.Количество() > 0 Тогда
			ИнтерфейсРМКСлужебныйКлиент.ОчиститьКэшКонтроляПродаж(КэшКонтроляПродаж);
			КэшиСтрокТоваров.КэшПлитки = КэшОпорныхДанныхПлитки(РеквизитыФормыРМК, КэшКонтроляПродаж);
			ДатаОбновленияКэшаКонтроляПродажПлитки = ОбщегоНазначенияКлиент.ДатаСеанса();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДобавитьТоварОтдельнойСтрокойНаКлиенте(СтрокаТовара)
	
	РезультатФункции = ДобавлятьВсеТоварыОтдельнойСтрокой
		Или (РежимКассыСамообслуживания И СтрокаТовара.Весовой);
	Возврат РезультатФункции;
	
КонецФункции

&НаСервере
Функция СтруктураПустойСтрокиТаблицыТоваров()
	
	СтруктураПустойСтрокиТаблицыТоваров = Новый Структура;
	ТаблицаТоваров = Объект.Товары.Выгрузить();
	ПустаяСтрокаТоваров = ТаблицаТоваров.Добавить();
	Для Каждого Колонка Из ТаблицаТоваров.Колонки Цикл
		ЗначениеКолонки = ПустаяСтрокаТоваров[Колонка.Имя];
		Если Колонка.Имя = "КартинкаПроцентов"
			Или Колонка.Имя = "КодыМаркировкиПоДаннымИБ" Тогда
			ЗначениеКолонки = Неопределено;
		КонецЕсли;
		СтруктураПустойСтрокиТаблицыТоваров.Вставить(Колонка.Имя, ЗначениеКолонки);
	КонецЦикла;
	
	Возврат СтруктураПустойСтрокиТаблицыТоваров;
	
КонецФункции

&НаСервере
Функция КэшОпорныхДанныхПлитки(РеквизитыФормыРМК, ДанныеКонтроляПродаж)
	
	ИменаРеквизитовСтрокиОпорныхДанных = "Номенклатура, Характеристика, Упаковка";
	СтруктураСтрокиОпорныхДанных = Новый Структура(ИменаРеквизитовСтрокиОпорныхДанных);
	СтруктураСтрокиОпорныхДанных.Вставить("РеквизитыФормыРМК", РеквизитыФормыРМК);
	
	ПустаяСтрокаТаблицыТоваров = ОбщегоНазначения.СкопироватьРекурсивно(РеквизитыФормыРМК.ПустаяСтрокаТаблицыТоваров);
	КэшПлитки = Новый Массив;
	ИсточникиДанныхПлитки = ИнтерфейсРМКСлужебныйКлиентСервер.ИсточникиДанныхДляПлитки();
	
	Для Каждого СтрокаОпорныхДанных Из ОпорныеДанные Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаОпорныхДанных.Номенклатура)
				Или СтрокаОпорныхДанных.ИсточникПлитки = ИсточникиДанныхПлитки.ВесовойТовар Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТовара = Неопределено;
		Индекс = 0;
		Для Каждого СтрокаКэша Из КэшПлитки Цикл
			
			Индекс = Индекс + 1;
			
			Если Не СтрокаОпорныхДанных.Номенклатура = СтрокаКэша.Номенклатура Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не СтрокаОпорныхДанных.Упаковка = СтрокаКэша.Упаковка Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не СтрокаОпорныхДанных.Характеристика = СтрокаКэша.Характеристика Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТовара = СтрокаКэша;
			Прервать;
			
		КонецЦикла;
		
		Если СтрокаТовара = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтруктураСтрокиОпорныхДанных, СтрокаОпорныхДанных);
			
			ПустаяСтрокаТаблицыТоваровДляЗаполнения = ОбщегоНазначения.СкопироватьРекурсивно(ПустаяСтрокаТаблицыТоваров);
			РеквизитыФормыРМК.Вставить("ПустаяСтрокаТаблицыТоваров" ,ПустаяСтрокаТаблицыТоваровДляЗаполнения);
			
			СтруктураСтрокиОпорныхДанных.Вставить("РеквизитыФормыРМК", РеквизитыФормыРМК);
			ДанныеТовара = СтрокаТовараНаСервере(СтруктураСтрокиОпорныхДанных);
			СтрокаТовара = ДанныеТовара.СтрокаТовара;
			Если СтрокаТовара.Свойство("ДобавлятьСтрокуВКэшСтрок") И СтрокаТовара.ДобавлятьСтрокуВКэшСтрок Тогда
				КэшПлитки.Добавить(СтрокаТовара);
				Индекс = Индекс + 1;
			КонецЕсли;
			Если Не Данныетовара.ДанныеКонтроляПродаж = Неопределено Тогда
				ИнтерфейсРМКСлужебныйКлиентСервер.ДобавитьНовыеДанныеКэшаПродаж(ДанныеКонтроляПродаж,
					Данныетовара.ДанныеКонтроляПродаж, Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТовара.Свойство("ДобавлятьСтрокуВКэшСтрок") И СтрокаТовара.ДобавлятьСтрокуВКэшСтрок Тогда
			СтрокаОпорныхДанных.ИндексКэшаСтрокиТовара = Индекс;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КэшПлитки;
	
КонецФункции

&НаКлиенте
Процедура СкрытьКомандуЗавершенияРаботыПриНеобходимости()
	
	СкрытьКоманду = Истина;
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		ТекущийРежимОкна = КлиентскоеПриложение.ПолучитьРежимОсновногоОкна();
		Если ТекущийРежимОкна = РежимОсновногоОкнаКлиентскогоПриложения.Киоск
			Или ТекущийРежимОкна = РежимОсновногоОкнаКлиентскогоПриложения.ПолноэкранноеРабочееМесто Тогда
			
			СкрытьКоманду = Ложь;
			
		КонецЕсли;
	КонецЕсли;
	Если СкрытьКоманду Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ЗавершитьРаботуРМК, Ложь);
		ИмяКомандыЗавершения = "ЗавершитьРаботуРМК";
		ЭлементСпискаКоманд = СписокКомандЕще.НайтиПоЗначению(ИмяКомандыЗавершения);
		
		Если Не ЭлементСпискаКоманд = Неопределено Тогда
			СписокКомандЕще.Удалить(ЭлементСпискаКоманд);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРаботуРМККлиент()
	
	Если Объект.Товары.Количество() = 0 Или ФормаЗамороженаПослеПробитияЧека() Тогда
		
		ЗавершитьРаботуСистемы(Истина);
		
	Иначе
		
		ТекстПредупреждения =
			НСтр("ru = 'Перед закрытием программы необходимо пробить, отложить или удалить текущий чек.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

#Область СкидкиПриВозврате
&НаКлиенте
Функция ПроверитьВидОплаты(ВидОплаты)
	РазрешенныйВид = Ложь;
	ОбщегоНазначенияРМККлиентПереопределяемый.ОпределитьВидОплатыРазрешенныйВид(РазрешенныйВид,ВидОплаты);
	Возврат РазрешенныйВид;
КонецФункции

&НаКлиенте
Процедура НастроитьЭлементыПриПереходеКОплате(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	ИтогиОплаты = Объект.Оплата.Итог("Сумма");
	РазницаОплаты = СуммаИтого - ИтогиОплаты;
	КоличествоОплат = 0;
	СуммаРаспределено = 0;
	Для Каждого Строка Из Объект.Оплата Цикл
		РазрешенныйВид = ПроверитьВидОплаты(Строка.ВидОплаты);
		Если РазрешенныйВид Тогда
			ПроцентРаспределения = Строка.Сумма/ИтогиОплаты;
			СуммаОтОплаты = РазницаОплаты * ПроцентРаспределения;
			Строка.Сумма = Строка.Сумма + СуммаОтОплаты;
			СуммаРаспределено = СуммаРаспределено + СуммаОтОплаты;
		КонецЕсли;
	КонецЦикла;
	СуммаРаспределено = Окр(СуммаРаспределено, 2, РежимОкругления.Окр15как20);
	РазницаОплаты = РазницаОплаты - СуммаРаспределено;
	Для Каждого Строка Из Объект.Оплата Цикл
		РазрешенныйВид = ПроверитьВидОплаты(Строка.ВидОплаты);
		Если РазрешенныйВид И РазницаОплаты <> 0 Тогда
			Строка.Сумма = Строка.Сумма + РазницаОплаты;
			РазницаОплаты = 0;
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьВидыОплатДляЧекаВозврата();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСкидкиЗавершениеПриВозврате(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИмяМетода = "НастроитьЭлементыПриПереходеКОплате";
		РассчитатьСкидкиКлиент(Истина);
	Иначе
		НастроитьЭлементыПриПереходеКОплате();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСкидкиПриВозврате(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ ИспользоватьАвтоматическиеСкидки Тогда
		Возврат;
	КонецЕсли;
	
	НеобходимПересчетАвтоматическихСкидок = ОпределитьНеобходимостьПересчетаАвтоматическихСкидок();
	Если НеобходимПересчетАвтоматическихСкидок И ВопросПоРасчетуСкидок Тогда
		ЗадатьВопросПоРасчетуСкидок("ПересчитатьСкидкиЗавершениеПриВозврате", , Истина);
	Иначе
		КодВозвратаОтвет = ?(НеобходимПересчетАвтоматическихСкидок, КодВозвратаДиалога.Да, КодВозвратаДиалога.Нет);
		ПересчитатьСкидкиЗавершениеПриВозврате(КодВозвратаОтвет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидыОплатДляЧекаВозврата()
	
	ТаблицаОплатКартой.Очистить();
	ИндексОплатыКартой = 0;
	СуммаОплаченоБН = 0;
	
	Для Каждого СтрокаОплаты Из Объект.Оплата Цикл
		
		ЭтоОплатаНаличными = ОбщегоНазначенияРМККлиент.ЭтоОплатаНаличными(СтрокаОплаты.ВидОплаты);
		ЭтоОплатаПлатежнойКартой = ОбщегоНазначенияРМККлиент.ЭтоОплатаПлатежнойКартой(СтрокаОплаты.ВидОплаты);
		
		Если ЭтоОплатаНаличными Тогда
			
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаНал, Истина);
			СуммаОплаченоНал = СтрокаОплаты.Сумма;
			
		КонецЕсли;
		
		Если ЭтоОплатаПлатежнойКартой Тогда
			
			Если ИндексОплатыКартой <> 0 Тогда;
				НаименованиеРеквизитаПоляСуммы = "СуммаОплаченоБН_" + Строка(ИндексОплатыКартой);
				НаименованиеГруппыЭлементовПоляСуммы = "ГруппаОплатаКартой_" + Строка(ИндексОплатыКартой);
				НаименованиеГруппыОплаты = "ГруппаВидОплатыКартойГоризонтально_" + Строка(ИндексОплатыКартой);
			Иначе
				НаименованиеРеквизитаПоляСуммы = "СуммаОплаченоБН_0";
				НаименованиеГруппыЭлементовПоляСуммы = "ГруппаОплатаКартой";
				НаименованиеГруппыОплаты = "ГруппаВидОплатыКартойГоризонтально";
			КонецЕсли; 
			УстановитьДоступностьЭлементаФормы(Элементы[НаименованиеГруппыОплаты], Истина);
			УстановитьВидимостьЭлементаФормы(Элементы[НаименованиеГруппыЭлементовПоляСуммы], Истина);
			ЭтотОбъект[НаименованиеРеквизитаПоляСуммы] = СтрокаОплаты.Сумма;
			
			НоваяОплатаКартой = ТаблицаОплатКартой.Добавить();
			НоваяОплатаКартой.Сумма = СтрокаОплаты.Сумма;
			НоваяОплатаКартой.Организация = ВыбраннаяОрганизация;
			НоваяОплатаКартой.СистемаНалогообложения = ВыбраннаяСистемаНалогообложения;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ВыбранныйВидОплаты") Тогда
				НоваяОплатаКартой.ВидОплаты = ЭтотОбъект.ВыбранныйВидОплаты;
			КонецЕсли;
			Если ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации) И Не ЭтоЗаменаТоваров Тогда
				НоваяОплатаКартой.Оплачено = Истина;
			КонецЕсли;
			СуммаОплаченоБН = СуммаОплаченоБН + СтрокаОплаты.Сумма;
			ИндексОплатыКартой = ИндексОплатыКартой + 1;
			
		КонецЕсли;
		
		ЗаполнитьВидОплатыВРежимеКассира(СтрокаОплаты);
		
	КонецЦикла;
	
	Если СуммаБонусов > 0 Тогда
		
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОплатаБонусами, Истина);
		Элементы.СтраницыОплатаБонусами.ТекущаяСтраница = Элементы.ГруппаОплатаБонусами;
		СуммаОплаченоБонусами = СуммаБонусов;
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

&НаКлиенте
Процедура ПродолжитьБезРасчетаКлиент()
	
	ИспользоватьАвтоматическиеСкидки = Ложь;
	ЗакрытьСтраницуИнфоОшибкаНаКлиенте();
	Если ЗначениеЗаполнено(ИмяМетода) Тогда
		ВыполнитьОтложенныйМетод();
	КонецЕсли;
	ЗарегистрироватьРаботуСЧекомБезРасчетаСкидок();
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьПравоПродолжитьБезРасчетаСкидок()
	
	НеобходимоеПраво = "ПравоУдалитьЧекРМК";
	Возврат ((Не ЗапретитьПробитиеЧекаБезРасчетаСкидок) Или ЕстьПравоНаДействие(НеобходимоеПраво));
	
КонецФункции

&НаКлиенте
Процедура ПродолжитьБезРасчетаПроверкаПрав()
	
	Если ЕстьПравоПродолжитьБезРасчетаСкидок() Тогда
		ПродолжитьБезРасчетаКлиент();
	Иначе
		НеобходимоеПраво = "ПродолжитьБезРасчетаСкидок";
		ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеКодАртикул(ТекущаяСтрока, ИспользоватьКод, ИспользоватьАртикул, ЭтоИнфоЗаголовок = Ложь)
	ПредставлениеКодАртикул = "";
	Если ИспользоватьКод ИЛИ ИспользоватьАртикул Тогда
		ИспользоватьЗаголовок = ИспользоватьКод И ИспользоватьАртикул;
		ПредставлениеКодАртикул = "%1%2%3%4";
		ЗаголовокКод		= "";
		ЗаголовокАртикул	= "";
		КодТовара			= "";
		АртикулТовара		= "";
		
		Если ЭтоИнфоЗаголовок И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока,"ЭтоНабор")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока,"КодНабора")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока,"АртикулНабора")
			И ТекущаяСтрока.ЭтоНабор Тогда
			КодТовара		= ТекущаяСтрока.КодНабора;
			АртикулТовара	= ТекущаяСтрока.АртикулНабора;
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока,"Код")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока,"Артикул") Тогда
			КодТовара		= ТекущаяСтрока.Код;
			АртикулТовара	= ТекущаяСтрока.Артикул;
		КонецЕсли;
		
		Если ИспользоватьКод И ЗначениеЗаполнено(КодТовара) Тогда
			Если ИспользоватьЗаголовок ИЛИ ЭтоИнфоЗаголовок Тогда
				ЗаголовокКод = НСтр("ru = 'Код: '");
			КонецЕсли;
		Иначе
			КодТовара = "";
		КонецЕсли;
		Если ИспользоватьАртикул И ЗначениеЗаполнено(АртикулТовара) Тогда
			Если (ИспользоватьЗаголовок ИЛИ ЭтоИнфоЗаголовок) И ЗначениеЗаполнено(КодТовара) Тогда
				ЗаголовокАртикул = НСтр("ru = ', Арт.: '");
			ИначеЕсли (ИспользоватьЗаголовок ИЛИ ЭтоИнфоЗаголовок) Тогда
				ЗаголовокАртикул = НСтр("ru = 'Арт.: '");
			КонецЕсли;
		Иначе
			АртикулТовара = "";
		КонецЕсли;

		ПредставлениеКодАртикул = СтрШаблон(ПредставлениеКодАртикул, ЗаголовокКод, КодТовара, ЗаголовокАртикул, АртикулТовара);
	КонецЕсли;
	
	Возврат ПредставлениеКодАртикул;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьОшибкуНекорректнойМарки(ПараметрыШтрихкода)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	КонецЕсли;
	ШтрихкодУрезанный = СтрШаблон("%1%2", Лев(ПараметрыШтрихкода.Штрихкод, 50),
		?(СтрДлина(ПараметрыШтрихкода.Штрихкод) > 50, "...", ""));
	ТекстЗаголовка = НСтр("ru = 'Марка некорректная.'");
	ТекстСообщения = СтрШаблон(НСтр("ru = '%1
		|Попробуйте отсканировать снова.'"), ШтрихкодУрезанный);
	ПараметрыОшибки = Новый Структура();
	ПараметрыОшибки.Вставить("ЭтоПредупреждение", Истина);
	ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения, ПараметрыОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИнформациюОКарте(ПараметрыШтрихкода)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	КонецЕсли;
	ШтрихкодУрезанный = СтрШаблон("%1%2", Лев(ПараметрыШтрихкода.Штрихкод, 25),
		?(СтрДлина(ПараметрыШтрихкода.Штрихкод) > 25, "...", ""));
	ТекстЗаголовка = НСтр("ru = 'Информация о карте'");
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Дисконтная карта недействительна: %1'"), ШтрихкодУрезанный);
	ПараметрыОшибки = Новый Структура();
	ПараметрыОшибки.Вставить("ЭтоПредупреждение", Истина);
	ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения, ПараметрыОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуИнформацииОКарте(ПараметрыДляОбработкиШтрихкода)
	
	ПоказатьИнформациюОКарте(ПараметрыДляОбработкиШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьУстройствоРаспознаванияЭлектронныхВесов(ИдентификаторЭлектронныхВесов)
	
	УстройствоРаспознавания = Неопределено;
	
	ОтборВесов = Новый Структура("ЭлектронныеВесы", ИдентификаторЭлектронныхВесов);
	СтрокиВесов = ТаблицаЭлектронныхВесов.НайтиСтроки(ОтборВесов);
	Если СтрокиВесов.Количество() > 0 И ЗначениеЗаполнено(СтрокиВесов[0].УстройствоРаспознавания) Тогда
		УстройствоРаспознавания = СтрокиВесов[0].УстройствоРаспознавания;
	КонецЕсли;
	
	Возврат УстройствоРаспознавания;
	
КонецФункции

&НаКлиенте
Функция ТребуетсяПодтверждениеРаспознаванияВыбранногоТовара(СтрокаПозиции, ДополнительныеПараметры, 
		ТекущееУстройствоРаспознавания)
	
	РезультатФункции = Ложь;
	
	Если ТипПостроенияПлитки = ТипыПостроенияПлитки.РаспознанныйВесовойТовар
			И ОбучатьУстройствоРаспознаванияВоВремяПродажи И Не СтрокаПозиции.SKU = 0 Тогда
			
		ТекущееУстройствоРаспознавания
			= ПолучитьУстройствоРаспознаванияЭлектронныхВесов(ДополнительныеПараметры.ТекущиеЭлектронныеВесы);
		Если Не ТекущееУстройствоРаспознавания = Неопределено Тогда
			РезультатФункции = Истина;
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьПодтверждениеРаспознаванияВыбранногоТовара(SKU, ТекущееУстройствоРаспознавания)
	
	МенеджерОборудованияРМККлиент.ПодтвердитьРаспознавание(Неопределено, УникальныйИдентификатор,
		ТекущееУстройствоРаспознавания, SKU);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуДанныеПокупателяРасчетСкидокПриНеобходимости()
	
	Если ПанельПокупателяВПроцессеПереходаКОплате Тогда
		
		НеобходимПересчетАвтоматическихСкидок = ОпределитьНеобходимостьПересчетаАвтоматическихСкидок();
		Если НеобходимПересчетАвтоматическихСкидок И ВопросПоРасчетуСкидок Тогда
			ЗадатьВопросПоРасчетуСкидок("ЗакрытьФормуДанныеПокупателяЗавершение", , Истина);
		Иначе
			КодВозвратаОтвет = ?(НеобходимПересчетАвтоматическихСкидок, КодВозвратаДиалога.Да, КодВозвратаДиалога.Нет);
			ЗакрытьФормуДанныеПокупателяЗавершение(КодВозвратаОтвет);
		КонецЕсли;
		
	Иначе
		ЗакрытьФормуДанныеПокупателяСОтменойПробитияЧека();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуДанныеПокупателяЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИмяМетода = "ЗакрытьФормуДанныеПокупателяСОтменойПробитияЧека";
		РассчитатьСкидкиКлиент(Истина);
	Иначе
		ЗакрытьФормуДанныеПокупателяСОтменойПробитияЧека();
	КонецЕсли;
	
КонецПроцедуры

#Область УправляемыеСкидки

&НаСервере
Процедура ЗаполнитьПараметрыУправляемыеСкидки(ЗначенияПараметровМетода)
	
	ЗначенияПараметровМетода.MaxSale = МаксимальныйПроцентРучнойСкидки;
	ЗначенияПараметровМетода.MaxMarkup = МаксимальныйПроцентРучнойНаценки;
	ЗначенияПараметровМетода.Store = СерверЛояльностиПолучательДанныхКлиентСервер.ПолучитьСтруктуруСсылки(Объект.ТорговыйОбъект).Ref;
	ЗначенияПараметровМетода.Client = СерверЛояльностиПолучательДанныхКлиентСервер.ПолучитьСтруктуруСсылки(Объект.Контрагент).Ref;
	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		ЗначенияПараметровМетода.CardGUID = СерверЛояльностиПолучательДанныхКлиентСервер.ПолучитьСтруктуруСсылки(Объект.ДисконтнаяКарта).Ref;
	Иначе
		ЗначенияПараметровМетода.ClientCardID = НайденнаяКартаНомер;
	КонецЕсли;
	ЗначенияПараметровМетода.UseSelection = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуУправляемыхСкидок()
	
	НоваяТаблицаУправляемыхСкидок = ТаблицаУправляемыхСкидок.Выгрузить();
	НоваяТаблицаУправляемыхСкидок.Очистить();
	
	Если ИспользоватьСерверЛояльностиПолучательДанных И Не РежимКассыСамообслуживания Тогда
		
		ПараметрыПодключения = ОбщегоНазначенияРМК.ЗначенияПараметровСервераЛояльности(ТекущаяНастройкаРМК);
		ЗначенияПараметровМетода = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыМетодаЗаполненияУправляемыхСкидок();
		ЗаполнитьПараметрыУправляемыеСкидки(ЗначенияПараметровМетода);
		ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.
									ПараметрыЗапросаПолучитьТаблицуУправляемыхСкидок(ПараметрыПодключения, ЗначенияПараметровМетода);
		Результат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
		
		Если Не Результат.ЕстьОшибки Тогда
			СтрокаJSON = Результат.ДанныеОтвета;
			ДанныеОтвета = Неопределено;
			Если СтрокаJSON <> Неопределено Тогда
				СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
				Если ДанныеОтвета <> Неопределено И ТипЗнч(ДанныеОтвета) = Тип("Массив") Тогда
					Для каждого СтрокаМассива Из ДанныеОтвета Цикл
						НоваяСтрока = НоваяТаблицаУправляемыхСкидок.Добавить();
						
						Если СтрокаМассива.Свойство("DiscountValue") Тогда
							
							НоваяСтрока.ЗначениеСкидки = СтрокаМассива.DiscountValue;
							НоваяСтрока.Представление = СтрокаМассива.DiscountDescription;
							НоваяСтрока.ТипСкидки = СтрокаМассива.DiscoutType;
							НоваяСтрока.ОбластьДействия = СтрокаМассива.ApplicationArea;
							НоваяСтрока.ИдентификаторСкидки = СтрокаМассива.DiscountID;
							НоваяСтрока.СкидкаНаценка = СтрокаМассива.DiscountRef;
							Если СтрокаМассива.Свойство("Return") Тогда
								НоваяСтрока.ПриВозврате = СтрокаМассива.Return;
							КонецЕсли;
							Если СтрокаМассива.Свойство("Bonuses") Тогда
								НоваяСтрока.ЭтоПравилоНачисленияБонусов = СтрокаМассива.Bonuses;
							КонецЕсли;
							
							Если НЕ ЗначениеЗаполнено(НоваяСтрока.СкидкаНаценка) Тогда
								ОписаниеТипаСкидкаНаценка = Метаданные.ОпределяемыеТипы.СкидкаНаценкаРМК.Тип;
								НоваяСтрока.СкидкаНаценка = ОбщегоНазначенияРМК.ПолучитьДесериализованноеСсылочноеЗначение(СтрокаМассива, "DiscountID", ОписаниеТипаСкидкаНаценка);
							КонецЕсли;
							
						Иначе
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассива);
							
							Если НЕ ЗначениеЗаполнено(НоваяСтрока.СкидкаНаценка) Тогда
								ОписаниеТипаСкидкаНаценка = Метаданные.ОпределяемыеТипы.СкидкаНаценкаРМК.Тип;
								НоваяСтрока.СкидкаНаценка = ОбщегоНазначенияРМК.ПолучитьДесериализованноеСсылочноеЗначение(СтрокаМассива, "ИдентификаторСкидки", ОписаниеТипаСкидкаНаценка);
							КонецЕсли;
						
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Не РежимКассыСамообслуживания Тогда
		ПараметрыУправляемыхСкидок = Новый Структура();
		ЗаполнитьПараметрыУправляемыхСкидокЛокально(ПараметрыУправляемыхСкидок);
		СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.
			ЗаполнитьТаблицуУправляемыхСкидок(НоваяТаблицаУправляемыхСкидок, ПараметрыУправляемыхСкидок);
	КонецЕсли;
	
	Если НоваяТаблицаУправляемыхСкидок.Количество() > 0 Тогда
		ТаблицаУправляемыхСкидок.Очистить();
		ТаблицаУправляемыхСкидок.Загрузить(НоваяТаблицаУправляемыхСкидок);
		// Заполнение по-умолчанию, если ответ пришел в старом формате.
		Для Каждого СтрокаСкидки Из ТаблицаУправляемыхСкидок Цикл
			Если Не ЗначениеЗаполнено(СтрокаСкидки.ТипСкидки) Тогда
				СтрокаСкидки.ТипСкидки = "Ручная";
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаСкидки.ОбластьДействия) Тогда
				СтрокаСкидки.ОбластьДействия = "На документ";
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаСкидки.ИдентификаторСкидки) Тогда
				СтрокаСкидки.ИдентификаторСкидки = Лев(СтрокаСкидки.Представление ,36);
			КонецЕсли;
		КонецЦикла;
		Если ТаблицаУправляемыхСкидок.Количество() = 1 Тогда
			Элементы.УправляемыеСкидки.Заголовок = ТаблицаУправляемыхСкидок[0].Представление;
		Иначе
			Элементы.УправляемыеСкидки.Заголовок = НСтр("ru = 'Управляемые скидки'");
		КонецЕсли;
	Иначе
		УстановитьВидимостьЭлементаФормы(Элементы.УправляемыеСкидки, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.СкидкаТекущийТоварУправляемая, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыУправляемыхСкидокЛокально(ПараметрыУправляемыхСкидок)
	ПараметрыУправляемыхСкидок = Новый Структура();
	ПараметрыУправляемыхСкидок.Вставить("МаксимальныйПроцентСкидки", МаксимальныйПроцентРучнойСкидки);
	ПараметрыУправляемыхСкидок.Вставить("МаксимальныйПроцентНаценки", МаксимальныйПроцентРучнойНаценки);
	ПараметрыУправляемыхСкидок.Вставить("Магазин", Объект.ТорговыйОбъект.УникальныйИдентификатор());
	ПараметрыУправляемыхСкидок.Вставить("Клиент", Объект.Контрагент.УникальныйИдентификатор());
	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		ПараметрыУправляемыхСкидок.Вставить("УникальныйИдентификаторКарты", Объект.ДисконтнаяКарта.УникальныйИдентификатор());
	Иначе
		ПараметрыУправляемыхСкидок.Вставить("ИдентификаторКартыКлиента",НайденнаяКартаНомер);
	КонецЕсли;
	ПараметрыУправляемыхСкидок.Вставить("ИспользоватьОтборы",Истина);
КонецПроцедуры

#КонецОбласти

#Область ГосИС

&НаСервере
Функция ИспользоватьРазрешительныйРежимПродажиГосИС()
	
	Возврат ОбщегоНазначенияРМК.ИспользоватьРазрешительныйРежимПродажиГосИС(Этотобъект);
	
Конецфункции

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныеШтрихкода, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеШтрихкода.Свойство("ДанныеПО") Тогда
		
		ПараметрыДляОбработкиШтрихкода = ДанныеШтрихкода.ПараметрыДляОбработкиШтрихкода;
		
		СтруктураПараметровКлиента = ДанныеШтрихкода;
		СтруктураПараметровКлиента.Вставить("ОтображатьОстаток", ОтображатьОстаток);
		СтруктураПараметровКлиента.Вставить("ТорговыйОбъект", ТорговыйОбъектДляВхода);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ПараметрыДляОбработкиШтрихкода);
		
		ОбработатьШтрихкодЗавершение(ПараметрыДляОбработкиШтрихкода);
		
		Возврат;
	КонецЕсли;
	
	Если ДанныеШтрихкода.Свойство("ТребуетсяАвторизацияИСМПРозница") Тогда
		ПараметрыОбновленияКлючаСессии = ПараметрыОбновленияКлючаСессии();
		ПараметрыОбновленияКлючаСессии.Организация = Объект.Организация;
		ПараметрыОбновленияКлючаСессии.ПараметрыИСМП.ЛокальныйКонтрольКлючаИСМП = ЛокальныйКонтрольКлючаИСМП;
		ПараметрыОбновленияКлючаСессии.ПараметрыИСМП.ИспользоватьРазрешительныйРежимГосИС = ИспользоватьРазрешительныйРежимГосИС;
		ПараметрыОбновленияКлючаСессии.ПараметрыСервераЛояльности = ПараметрыПодключенияКСерверуЛояльности;
		РезультатОбновленияКлюча = ТребуетсяОбновлениеКлючаСессииСервер(ПараметрыОбновленияКлючаСессии);
		Если РезультатОбновленияКлюча.ТребуетсяОбновлениеКлючаСессии Тогда
			ЗаголовокОшибки = НСтр("ru = 'Ошибка обновления ключа авторизации ИС ""Честный знак""'");
			ТекстСообщения = РезультатОбновленияКлюча.ОписаниеОшибки;
			ПараметрыОшибки = Новый Структура("ЭтоПредупреждение", Истина);
			ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстСообщения, ПараметрыОшибки);
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	Если ДанныеШтрихкода.Свойство("ТребуетсяУточнениеВеса") Тогда
		// Обработка взвешивания
		ЗаголовокОшибки = НСтр("ru='Уточнение веса'");
		ТекстСообщения = НСтр("ru='Необходимо взвесить товар'");
		ПараметрыОшибки = Новый Структура("ЭтоПредупреждение", Истина);
		ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстСообщения, ПараметрыОшибки);
		
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.ТекстОшибки) Тогда
		ЗаголовокОшибки = НСтр("ru='Предупреждение'");
		ТекстСообщения = ДанныеШтрихкода.ТекстОшибки;
		ПараметрыОшибки = Новый Структура("ЭтоПредупреждение", Истина);
		ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстСообщения, ПараметрыОшибки);

		Возврат;
	КонецЕсли;
	
	Отказ = ПроверитьВозможностьДобавленияВСлучаеУточненияШтрихкода(ДанныеШтрихкода);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	СтруктураПараметровКлиента = ДанныеШтрихкода.ВнешниеДанныеПоШтрихкодам[0];
	СтруктураПараметровКлиента.Вставить("ОтображатьОстаток", ОтображатьОстаток);
	СтруктураПараметровКлиента.Вставить("ТорговыйОбъект", ТорговыйОбъектДляВхода);
	ПараметрыДляОбработкиШтрихкода = СтруктураПараметровКлиента.ПараметрыДляОбработкиШтрихкода;
	
	Если СтруктураПараметровКлиента.ПараметрыДляОбработкиШтрихкода.Свойство("ЭтоПроверкаМарки") Тогда
		СтрокаТовара = Объект.Товары.НайтиПоИдентификатору(СтруктураПараметровКлиента.ПараметрыДляОбработкиШтрихкода.ИдентификаторСтроки);
		Если Не СтрокаТовара = Неопределено И ЗначениеЗаполнено(ДанныеШтрихкода.РазрешительныйРежимДатаЗапросаГИСМТ)
				И ЗначениеЗаполнено(ДанныеШтрихкода.РазрешительныйРежимИдентификаторЗапросаГИСМТ) Тогда
			СтрокаТовара.РазрешительныйРежимДатаЗапросаГИСМТ = ДанныеШтрихкода.РазрешительныйРежимДатаЗапросаГИСМТ;
			СтрокаТовара.РазрешительныйРежимИдентификаторЗапросаГИСМТ = ДанныеШтрихкода.РазрешительныйРежимИдентификаторЗапросаГИСМТ;
			
			Если СтруктураПараметровКлиента.ПараметрыДляОбработкиШтрихкода.Свойство("ВызовИзПродолженияЧека") Тогда
				ПроверитьКодМаркировкиПриПродолженииЧека();
			Иначе
				СтрокаТовара.ТребуетсяПроверкаКодаМаркировки = Ложь;
				ПроверитьКодыМаркировкиПередПробитием();
			КонецЕсли;
		Иначе
			КонтекстПроверкиКонтрольнойМарки = КонтекстПроверкиКонтрольнойМарки();
			ЗаполнитьЗначенияСвойств(КонтекстПроверкиКонтрольнойМарки, СтрокаТовара);
			Если СтруктураПараметровКлиента.ПараметрыДляОбработкиШтрихкода.Свойство("ВызовИзПродолженияЧека") Тогда
				КонтекстПроверкиКонтрольнойМарки.КонтекстВызова = "ПроверитьКодыМаркировкиПриПродолженииЧека";
			Иначе
				КонтекстПроверкиКонтрольнойМарки.КонтекстВызова = "ПроверитьКодыМаркировкиПередПробитиемЧека";
			КонецЕсли;
			КонтекстПроверкиКонтрольнойМарки.КодМаркировки = СтруктураПараметровКлиента.ПараметрыДляОбработкиШтрихкода.Штрихкод;
			
			ВременныйКонтекстПроверкиМарки = КонтекстПроверкиКонтрольнойМарки;
			ОбработатьКонтрольнуюМарку(КонтекстПроверкиКонтрольнойМарки);
		КонецЕсли;
	Иначе
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ПараметрыДляОбработкиШтрихкода);
		ОбработатьШтрихкодЗавершение(ПараметрыДляОбработкиШтрихкода);
		
		Если СтруктураПараметровКлиента.ЗначенияПоиска.Количество() > 0
			И ДанныеШтрихкода.Свойство("Номенклатура") И ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
			РучноеСопоставлениеТовара = Ложь;
			ДанныеДляРучногоСопоставления = Неопределено;
			КодМаркиВРаботе = НСтр("ru = ''");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Параметры обновления ключа сессии.
// 
// Возвращаемое значение:
//  Структура - Параметры обновления ключа сессии:
// * Организация - ОпределяемыйТип.ОрганизацияРМК - Организация для получения токена 
// * ПараметрыИСМП - Структура - Параметры ИС МП:
// ** ОжидатьПолученияОтветаИСМП - Булево - Настройка РМК
// ** ЛокальныйКонтрольКлючаИСМП - Булево - Настройка РМК
// ** ТипТокенаАвторизации - ПеречислениеСсылка.ТипыТокеновАвторизации
// * ПараметрыСервераЛояльности - Структура - см. Перем. ПараметрыПодключенияКСерверуЛояльности
&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыОбновленияКлючаСессии()
	ПараметрыОбновленияКлючаСессии = Новый Структура;
	ПараметрыИСМП = Новый Структура();
	
	ПараметрыИСМП.Вставить("ИспользоватьРазрешительныйРежимГосИС", Ложь);
	ПараметрыИСМП.Вставить("ЛокальныйКонтрольКлючаИСМП", Истина);

	ПараметрыОбновленияКлючаСессии.Вставить("Организация");	
	ПараметрыОбновленияКлючаСессии.Вставить("ПараметрыИСМП", ПараметрыИСМП);	
	ПараметрыОбновленияКлючаСессии.Вставить("ПараметрыСервераЛояльности", Неопределено);
	
	Возврат ПараметрыОбновленияКлючаСессии;
КонецФункции

// Требуется обновление ключа сессии сервер.
// 
// Параметры:
//  ПараметрыОбновленияКлючаСессии - Структура - см. ПараметрыОбновленияКлючаСессии()
&НаСервереБезКонтекста
Функция ТребуетсяОбновлениеКлючаСессииСервер(ПараметрыОбновленияКлючаСессии)
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("ТребуетсяОбновлениеКлючаСессии", Истина);
	РезультатВыполнения.Вставить("Ошибка", Ложь);
	РезультатВыполнения.Вставить("ОписаниеОшибки");
	РезультатВыполнения.Вставить("ПараметрыОбновленияКлючаСессии", ПараметрыОбновленияКлючаСессии);
	
	Если ПараметрыОбновленияКлючаСессии.ПараметрыИСМП.ИспользоватьРазрешительныйРежимГосИС Тогда
		СтандартнаяОбработка = Истина;
		ОбщегоНазначенияРМКПереопределяемый.ТребуетсяОбновлениеКлючаСессии(СтандартнаяОбработка, РезультатВыполнения);
	
		Если СтандартнаяОбработка Тогда
			Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
				МодульИнтерфейсАвторизацииИСМПВызовСервера = ОбщегоНазначения.ОбщийМодуль("ИнтерфейсАвторизацииИСМПВызовСервера");
				МодульИнтерфейсИСМПОбщегоНазначенияКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ИнтерфейсИСМПОбщегоНазначенияКлиентСервер");
				
				РезультатВыполнения.ТребуетсяОбновлениеКлючаСессии = МодульИнтерфейсАвторизацииИСМПВызовСервера.ТребуетсяОбновлениеКлючаСессииРозница(
					МодульИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессииИСМПРозница(ПараметрыОбновленияКлючаСессии.Организация));
			КонецЕсли;
		КонецЕсли;
		
		Если РезультатВыполнения.ТребуетсяОбновлениеКлючаСессии Тогда
			Если Не ПараметрыОбновленияКлючаСессии.ПараметрыИСМП.ЛокальныйКонтрольКлючаИСМП Тогда
				Если ЗначениеЗаполнено(ПараметрыОбновленияКлючаСессии.ПараметрыСервераЛояльности) Тогда
					ТекстПредупреждения = СтрШаблон(НСтр("ru = 'Для организации: %1 не удалось получить ключ авторизации ИС ""Честный знак"" через сервер лояльности.
						|Обратитесь к администратору системы.'"), Строка(ПараметрыОбновленияКлючаСессии.Организация));
					СтруктураПараметровЗапроса = Новый Структура;
					СтруктураПараметровЗапроса.Вставить("Organization", СерверЛояльностиПолучательДанныхКлиентСервер.ПолучитьСтруктуруСсылки(ПараметрыОбновленияКлючаСессии.Организация));
					
					ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.
												ПараметрыЗапросаПолучитьТокенАвторизацииГосИС(ПараметрыОбновленияКлючаСессии.ПараметрыСервераЛояльности, СтруктураПараметровЗапроса);
					Результат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
					
					Если Не Результат.ЕстьОшибки И ЗначениеЗаполнено(Результат.ДанныеОтвета) Тогда
						ДанныеОтвета = Неопределено;
						СтрокаJSON = Результат.ДанныеОтвета;
						СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
					Иначе
						РезультатВыполнения.Ошибка = Истина;
						РезультатВыполнения.ОписаниеОшибки = ТекстПредупреждения;
						
						Возврат РезультатВыполнения;
					КонецЕсли;
					
					Если ТипЗнч(ДанныеОтвета) = Тип("Структура") Тогда
						Если ДанныеОтвета.Свойство("Error") И ДанныеОтвета.Error Тогда
							Если ДанныеОтвета.Свойство("ErrorMessage") Тогда
								ТекстПредупреждения = ДанныеОтвета.ErrorMessage;
							КонецЕсли;
							
							РезультатВыполнения.Ошибка = Истина;
							РезультатВыполнения.ОписаниеОшибки = ТекстПредупреждения;
						Иначе
							СтандартнаяОбработка = Истина;
							ОбщегоНазначенияРМКПереопределяемый.УстановитьКлючСессии(СтандартнаяОбработка, ДанныеОтвета);
						
							Если СтандартнаяОбработка Тогда
								Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
									ОбщийМодульИнтерфейсАвторизацииИСМПВызовСервера = ОбщегоНазначения.ОбщийМодуль("ИнтерфейсАвторизацииИСМПВызовСервера");
									
									ПараметрыКлючаСессии = ОбщийМодульИнтерфейсАвторизацииИСМПВызовСервера.ПараметрыКлючаСессии();
									ПараметрыКлючаСессии.КлючСессии  = ДанныеОтвета.Token;
									ПараметрыКлючаСессии.ДействуетДо = Дата(2025, 03, 01);
									ТипТокенаАвторизации = Перечисления["ТипыТокеновАвторизации"]["ИСМПРозница"];
									ПараметрыЗапросаИСМП = ОбщийМодульИнтерфейсАвторизацииИСМПВызовСервера.ПараметрыЗапросаКлючаСессии(ТипТокенаАвторизации);
									ПараметрыЗапросаИСМП.Организация = ПараметрыОбновленияКлючаСессии.Организация;
									
									ОбщийМодульИнтерфейсАвторизацииИСМПВызовСервера.УстановитьКлючСессии(ПараметрыЗапросаИСМП, ПараметрыКлючаСессии);
									
									РезультатВыполнения.ТребуетсяОбновлениеКлючаСессии = Ложь;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					Иначе
						РезультатВыполнения.Ошибка = Истина;
						РезультатВыполнения.ОписаниеОшибки = ТекстПредупреждения;
					КонецЕсли;
				Иначе
					ТекстПредупреждения = СтрШаблон(НСтр("ru = 'Для организации: %1 не удалось получить ключ авторизации ИС ""Честный знак"".
						|Обратитесь к администратору системы.'"), Строка(ПараметрыОбновленияКлючаСессии.Организация));
					
					РезультатВыполнения.Ошибка = Истина;
					РезультатВыполнения.ОписаниеОшибки = ТекстПредупреждения;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		РезультатВыполнения.ТребуетсяОбновлениеКлючаСессии = Ложь;
	КонецЕсли;
	
	Возврат РезультатВыполнения;
КонецФункции

&НаКлиенте
Функция ПроверитьВозможностьДобавленияВСлучаеУточненияШтрихкода(ДанныеШтрихкода)
	
	Отказ = Ложь;
	ИмяРеквизитаДанныеДляУточненияСведенийПользователя = "ДанныеДляУточненияСведенийПользователя";
	ИмяРеквизитаПараметрыСканирования                  = "ПараметрыСканирования";
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, ИмяРеквизитаДанныеДляУточненияСведенийПользователя)
		И Не ЭтотОбъект[ИмяРеквизитаДанныеДляУточненияСведенийПользователя] = Неопределено Тогда
		
		ДанныеДляУточненияКода       = ЭтотОбъект[ИмяРеквизитаДанныеДляУточненияСведенийПользователя];
		ДанныеПараметровСканирования = ЭтотОбъект[ИмяРеквизитаПараметрыСканирования];
		
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСКлиент");
		ТекстСообщения = Модуль.ПроверитьНаНаличиеОшибокУточнения(ДанныеПараметровСканирования, ДанныеШтрихкода, ДанныеДляУточненияКода);
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			Отказ = Ложь;
			// Для Тестирования
			ПоказатьПредупреждение(, ТекстСообщения);
			// Для Тестирования
		Иначе
			ЭтотОбъект[ИмяРеквизитаДанныеДляУточненияСведенийПользователя] = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ПроверкаКодаМаркировкиПриСканированииЗавершение(ДанныеШтрихкода, ДополнительныеПараметры = Неопределено) Экспорт
	
	ЗакрытьСтраницуИнфоОшибкаНаКлиенте();
	ИмяРеквизитаКодМаркировкиДляУточнения = "КодМаркировкиДляУточнения";
	РезультатОбработкиШтрихкода = ЭтотОбъект[ИмяРеквизитаКодМаркировкиДляУточнения].РезультатОбработкиШтрихкода;
	
	ДанныеШтрихкодаЗавершение = РезультатОбработкиШтрихкода.ДанныеШтрихкода;
	Если ДанныеШтрихкодаЗавершение.Свойство("ВнешниеДанныеПоШтрихкодам") Тогда
		
		ВнешниеДанныеПоШтрихкодам = ДанныеШтрихкодаЗавершение.ВнешниеДанныеПоШтрихкодам[0];
		ВнешниеДанныеПоШтрихкодам.ПараметрыДляОбработкиШтрихкода.Вставить("ПроверкаМаркиВБиблиотекеГосИС", Истина);
		
		Если ДанныеШтрихкодаЗавершение.Свойство("РазрешительныйРежимИдентификаторЗапросаГИСМТ") Тогда
			Для Каждого СтрокаТовара Из ВнешниеДанныеПоШтрихкодам.ЗначенияПоиска Цикл
				СтрокаТовара.Вставить("РазрешительныйРежимИдентификаторЗапросаГИСМТ",
					ДанныеШтрихкодаЗавершение.РазрешительныйРежимИдентификаторЗапросаГИСМТ);
				СтрокаТовара.Вставить("РазрешительныйРежимДатаЗапросаГИСМТ",
					ДанныеШтрихкодаЗавершение.РазрешительныйРежимДатаЗапросаГИСМТ);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	ПоискПоШтрихкодуЗавершение(ДанныеШтрихкодаЗавершение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУточненияДанных()
	
	ИмяРеквизитаКодМаркировкиДляУточнения              = "КодМаркировкиДляУточнения";
	ИмяРеквизитаДанныеДляУточненияСведенийПользователя = "ДанныеДляУточненияСведенийПользователя";
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, ИмяРеквизитаКодМаркировкиДляУточнения)
		И ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизитаКодМаркировкиДляУточнения]) Тогда
		
		РезультатОбработкиШтрихкода = ЭтотОбъект[ИмяРеквизитаКодМаркировкиДляУточнения].РезультатОбработкиШтрихкода;
		Если РезультатОбработкиШтрихкода.ОткрытьФормуВводаКодаМаркировки Тогда
			
			НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Ложь);
			ПараметрыУточнения = ОбщегоНазначенияРМККлиент.Подключаемый_ОбработатьУточнениеКодаМаркировки(ЭтотОбъект);
			
			// 1. Сканирование GTIN, который сопоставлен с номенклатурой.
			ДанныеДляУточнения = ПараметрыУточнения.ДанныеДляУточненияСведенийПользователя;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, ИмяРеквизитаДанныеДляУточненияСведенийПользователя) Тогда
				ЭтотОбъект[ИмяРеквизитаДанныеДляУточненияСведенийПользователя] = ДанныеДляУточнения;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеДляУточнения.Номенклатура) Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Отсканирован GTIN и найдена номенклатура по GTIN.
					|Отсканируйте КМ.'"));
			КонецЕсли;
			
		ИначеЕсли РезультатОбработкиШтрихкода.ТребуетсяУточнениеДанных Тогда
			
			НастроитьЭлементыФормы(Элементы.СтраницаОбщая, Ложь);
			
			// 2. Сканирование GTIN, который сопоставлен с несколькими номенклатурными позициями
			СписокНоменклатурыДляВыбораПоGTIN = РезультатОбработкиШтрихкода.ДанныеШтрихкода.СписокНоменклатуры;
			НетНоменклатуры = СписокНоменклатурыДляВыбораПоGTIN.Количество() = 0;
			
			Если СписокНоменклатурыДляВыбораПоGTIN.Количество() > 1 Или НетНоменклатуры = Истина Тогда
			
				ДанныеШтрихкода = РезультатОбработкиШтрихкода.ДанныеШтрихкода;
				
				ИдентификаторСтроки = 0;
				Штрихкод = МенеджерОборудованияКлиентСервер.Base64ВШтрихкод(ДанныеШтрихкода.ШтрихкодBase64);
				ЗаменитьСимволGS1(Штрихкод);
				
				ПараметрыДляОбработкиШтрихкода = Новый Структура();
				ПараметрыДляОбработкиШтрихкода.Вставить("Штрихкод", Штрихкод);
				ПараметрыДляОбработкиШтрихкода.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
				ПроверитьНеобходимостьВводаМарки(ПараметрыДляОбработкиШтрихкода);
				
				ДополнитьПараметрыДляОбработкиШтрихкода(ПараметрыДляОбработкиШтрихкода);
				
				Если НетНоменклатуры И ДанныеШтрихкода.ЭтоКодВводаОстатков Тогда
					ДанныеМаркировки = Новый Структура;
					ДанныеМаркировки.Вставить("Разобран", Истина);
					ДанныеМаркировки.Вставить("EAN", ДанныеШтрихкода.EAN);
					
					ПараметрыШтрихкода = Новый Структура;
					ПараметрыШтрихкода.Вставить("ДанныеМаркировки", ДанныеМаркировки);
					ПараметрыШтрихкода.Вставить("ЭтоКодМаркировки", Истина);
					ПараметрыШтрихкода.Вставить("НекорректнаяМарка", Ложь);
					
					СтруктураПараметровКлиента = Новый Структура;
					СтруктураПараметровКлиента.Вставить("ЗначенияПоиска", Новый Массив);
					СтруктураПараметровКлиента.Вставить("ПараметрыШтрихкода", ПараметрыШтрихкода);
					
				Иначе
					
					СтруктураПараметровКлиента = ДанныеШтрихкода.ВнешниеДанныеПоШтрихкодам[0];
					
				КонецЕсли;
				
				СтруктураПараметровКлиента.Вставить("ПараметрыДляОбработкиШтрихкода", ПараметрыДляОбработкиШтрихкода);
				СтруктураПараметровКлиента.Вставить("ОтображатьОстаток", ОтображатьОстаток);
				СтруктураПараметровКлиента.Вставить("ТорговыйОбъект", ТорговыйОбъектДляВхода);
				ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ПараметрыДляОбработкиШтрихкода);
				
				ОбработатьШтрихкодЗавершение(ПараметрыДляОбработкиШтрихкода);
			КонецЕсли;
			
		ИначеЕсли РезультатОбработкиШтрихкода.ТребуетсяУточнениеСоставаУпаковки Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Требуется уточнение состава упаковки.'"));
		
		ИначеЕсли РезультатОбработкиШтрихкода.ДанныеШтрихкода.ТребуетсяУточнениеЧастичногоВыбытия Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Требуется уточнение частичного выбытия.'"));
			
		ИначеЕсли РезультатОбработкиШтрихкода.ТребуетсяПроверкаСредствамиККТ
				И Не РезультатОбработкиШтрихкода.ПроверкаСредствамиККТЗавершена
				И Не РезультатОбработкиШтрихкода.ТребуетсяУточнениеДанных Тогда
			
			ИсходныйРезультатВыбора = Неопределено;
			ДанныеШтрихкода = РезультатОбработкиШтрихкода.ДанныеШтрихкода;
			СтруктураПараметровКлиента = ДанныеШтрихкода.ВнешниеДанныеПоШтрихкодам[0];
			ПараметрыДляОбработкиШтрихкода = СтруктураПараметровКлиента.ПараметрыДляОбработкиШтрихкода;
			
			Если ПараметрыДляОбработкиШтрихкода.Свойство("ЧастичноеВыбытие") Тогда
			
				ДанныеВыбора = Новый Структура();
				ДанныеВыбора.Вставить("Номенклатура", РезультатОбработкиШтрихкода.ДанныеШтрихкода.Номенклатура);
				ДанныеВыбора.Вставить("ЧастичноеВыбытие", ПараметрыДляОбработкиШтрихкода.ЧастичноеВыбытие);
				ДанныеВыбора.Вставить("Количество", ПараметрыДляОбработкиШтрихкода.ЧастичноеВыбытиеКоличество);
				
				ИсходныйРезультатВыбора = Новый Структура();
				ИсходныйРезультатВыбора.Вставить("ДанныеВыбора", ДанныеВыбора);
				
			КонецЕсли;
			
			ОповещениеОбОкончанииПроверкиСредствамиККТ = Новый ОписаниеОповещения(
				"ПроверкаКодаМаркировкиПриСканированииЗавершение",
				ЭтотОбъект);
				
			КодМаркировкиДляУточненияРеквизит = ЭтотОбъект[ИмяРеквизитаКодМаркировкиДляУточнения];
			ОбщегоНазначенияРМККлиент.ПроверкаКодаМаркировкиСредствамиККТПоДаннымШтрихкода(
				КодМаркировкиДляУточненияРеквизит.ПараметрыСканирования,
				РезультатОбработкиШтрихкода,
				ЭтотОбъект,
				ОповещениеОбОкончанииПроверкиСредствамиККТ);
			
		ИначеЕсли РезультатОбработкиШтрихкода.ТребуетсяУточнениеКоэффициентовУпаковок Тогда
			
			НоменклатураДляУточнения = "";
			Если РезультатОбработкиШтрихкода.ДанныеШтрихкода.Свойство("Номенклатура") Тогда
				НоменклатураДляУточнения = Строка(РезультатОбработкиШтрихкода.ДанныеШтрихкода.Номенклатура);
			КонецЕсли;
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'В карточке товара: ""%1"" требуется указать вид упаковки по GTIN.'"), НоменклатураДляУточнения);
			ПоказатьПредупреждение(, ТекстОшибки);
			
		Иначе
			
			ПоказатьПредупреждение(, НСтр("ru = 'Непредвиденная ситуация. Требуется уточнение по товару.'"));
			
		КонецЕсли;
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Непредвиденная ситуация. Код маркировки для уточнения отсутствует.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнениеШагаПроверкиСредствамиККТ()

	ОбщегоНазначенияРМККлиент.ВыполнениеШагаПроверкиСредствамиККТ(ЭтотОбъект, ПараметрыПроверкиСредствамиККТ);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СообщитьОНевозможностиПодбора()
	
	// Сценарий: есть текущий результат обработки кода маркировки
	ИмяРеквизитаКодМаркировкиДляУточнения = "КодМаркировкиДляУточнения";
	
	РезультатОбработкиШтрихкода = ЭтотОбъект[ИмяРеквизитаКодМаркировкиДляУточнения].РезультатОбработкиШтрихкода;
	Если ЗначениеЗаполнено(РезультатОбработкиШтрихкода.ТекстОшибки) Тогда
		
		ЗаголовокОшибки = НСтр("ru='Предупреждение'");
		ТекстСообщения = РезультатОбработкиШтрихкода.ТекстОшибки;
		ПараметрыОшибки = Новый Структура("ЭтоПредупреждение", Истина);
		ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстСообщения, ПараметрыОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКэшОсобенностейУчетаБезМарки()
	ОбщегоНазначенияРМКПереопределяемый.ОбновитьКэшОсобенностейУчетаБезМарки(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВывестиСтраницуОжиданияРаспознавания()
	
	Элементы.ЗаголовокОжидания.Заголовок = НСтр("ru='Распознаем товары на весах.'");
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОжидание);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуЗаменыПрав(ТекстОшибки)
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевПанелиУправления)
			= Элементы.ПанельУправленияЧеком
		И ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека)
			= Элементы.ГруппаЗаменаПрав Тогда
			
		Элементы.ДекорацияОшибкаЗаменаПрав.Заголовок = ТекстОшибки;
		Элементы.СтраницыИнформацияЗаменаПрав.ТекущаяСтраница = Элементы.СтраницаОшибкаЗаменаПрав;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьОшибкуЗаменыПравПриНеобходимости()
	
	Если Элементы.СтраницыИнформацияЗаменаПрав.ТекущаяСтраница = Элементы.СтраницаОшибкаЗаменаПрав Тогда
		Элементы.СтраницыИнформацияЗаменаПрав.ТекущаяСтраница = Элементы.СтраницаТекстЗаменаПрав;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовРедактированияЧека(ЗначениеДоступности)
	
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаЛево, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, ЗначениеДоступности);
	
КонецПроцедуры

&НаСервере
Функция ЭтоПивнаяПродукция(ОсобенностьУчета)
	
	Возврат ОбщегоНазначенияРМККлиентСервер.ЭтоПивнаяПродукция(ОсобенностьУчета);
	
КонецФункции

&НаСервере
Процедура ДополнитьСтрокуНаСервереПослеДобавленияНаКлиенте(ОбновитьДанныеРазливногоПива)
	
	СтрокаТовара = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	
	Если ОбновитьДанныеРазливногоПива Тогда
		ЗаполнитьДанныеКодовМаркировкиДляВыбора(СтрокаТовара);
		
		КодыМаркировкиДоступныеДляВыбора = КодыМаркировкиДоступныеДляВыбора(СтрокаТовара.КодыМаркировкиПоДаннымИБ, Объект.Товары);
		Если КодыМаркировкиДоступныеДляВыбора.Количество() = 1 Тогда
			СтрокаТовара.КодМаркировки = КодыМаркировкиДоступныеДляВыбора.Получить(0).Значение;
			СтрокаТовара.ТребуетсяПроверкаКодаМаркировки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТовара.ТорговыйОбъект) Тогда
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьСНОСтрокиПоСкладу(СтрокаТовара, ЭтотОбъект);
	КонецЕсли;
	
	Если ОтображатьОстаток И Не ИспользуютсяСтатическиеОстаткиТоваров Тогда
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьКолонкуОстаток(СтрокаТовара, Объект.ТорговыйОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСтрокиПоСкладу(СтрокаТаблицы)
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьСНОСтрокиПоСкладу(СтрокаТаблицы, ЭтотОбъект);
	
	Если ОтображатьОстаток Тогда
		ТорговыйОбъектОстатки = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ТорговыйОбъект), Объект.ТорговыйОбъект, СтрокаТаблицы.ТорговыйОбъект);
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьКолонкуОстаток(СтрокаТаблицы, ТорговыйОбъектОстатки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСменуПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТребуетсяВыемкаПриЗакрытииСмены = Ложь;
		ДенежныеСредстваВКассеККМ = 0;
		МинимальныйОстатокНаличныхВКассе = 0;
		СтруктураОтбора = Новый Структура("Организация, КассаККМ", Объект.Организация, Объект.КассаККМ);
		СтрокиКассККМ = ТаблицаКассККМОрганизаций.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаКассыККМ Из СтрокиКассККМ Цикл
			Если СтрокаКассыККМ.ТребуетсяВыемкаПриЗакрытииСмены Тогда
				ДенежныеСредстваВКассеККМ = СтрокаКассыККМ.ДенежныеСредстваВКассеККМ;
				МинимальныйОстатокНаличныхВКассе = СтрокаКассыККМ.МинимальныйОстатокНаличныхВКассе;
				
				ТребуетсяВыемкаПриЗакрытииСмены = СтрокаКассыККМ.ТребуетсяВыемкаПриЗакрытииСмены И (ДенежныеСредстваВКассеККМ - МинимальныйОстатокНаличныхВКассе > 0);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ТребуетсяВыемкаПриЗакрытииСмены Тогда
			ПараметрыЗакрытияСменыПриАвтоматическойВыемке.ВыемкаПриЗакрытииСмены = Истина;
			ПараметрыЗакрытияСменыПриАвтоматическойВыемке.ДополнительныеПараметры = ДополнительныеПараметры;
			СуммаВыемка = ДенежныеСредстваВКассеККМ - МинимальныйОстатокНаличныхВКассе;
			
			ОткрытьСтраницуВыемкиДенежныхСредств();
		Иначе
			ЗакрытьСменуЗавершение(Результат, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСостояниеКассовойСменыВызовСервера()
	
	ПроверитьВозможностьРаботы();
	
	Если ИспользоватьОплатуНаличными Тогда
		СписокСмен = ТаблицаКассККМОрганизаций;
		Если ЗначениеЗаполнено(КассаККМДляОперации) Тогда
			Отбор = Новый Структура("КассаККМ", КассаККМДляОперации);
			СтрокиКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор);
			Если ЗначениеЗаполнено(СтрокиКассы) Тогда
				СписокСмен = СтрокиКассы;
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьНаличныеДенежныеСредстваСмены(СписокСмен);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВывестиРазделУчетаНаличных(Макет, ОтчетЗаСмену, КлиентскиеДанныеОтчетаЗаСмену, СерверныеДанныеОтчетаЗаСмену, ОтборКасса)
	
	НаличныеНаНачалоСмены = 0;
	СуммаВнесений = 0;
	СуммаВыемок = 0;
	ПриходНаличных = 0;
	РасходНаличных = 0;
	ТекущийОстатокНаличных = 0;
	ИтогоНаличных = 0;
	
	ОтборСтрокКассы = Новый Структура("Касса", ОтборКасса);
	
	Кассы = СерверныеДанныеОтчетаЗаСмену.ТаблицаКасс.НайтиСтроки(ОтборСтрокКассы);
	Если Кассы.Количество() > 0 Тогда
		СтрокаКассы = Кассы[0];
		НаличныеНаНачалоСмены = СтрокаКассы.НаличныеНаНачало;
		ТекущийОстатокНаличных = СтрокаКассы.НаличныеТекущийОстаток;
		СуммаВнесений = СтрокаКассы.СуммаВнесений;
		СуммаВыемок = СтрокаКассы.СуммаВыемок;
	КонецЕсли;
	Суммы = СерверныеДанныеОтчетаЗаСмену.ТаблицаСумм.НайтиСтроки(ОтборСтрокКассы);
	Для Каждого СтрокаСуммы Из Суммы Цикл
		
		Если СтрокаСуммы.ВидОплаты = "Наличные" Тогда
			ПриходНаличных = ПриходНаличных + СтрокаСуммы.СуммаПродаж;
			РасходНаличных = РасходНаличных + СтрокаСуммы.СуммаВозвратов;
		КонецЕсли;
		РасходНаличных = РасходНаличных + СтрокаСуммы.СуммаВыдачиНаличных;
		
	КонецЦикла;
	
	Если КлиентскиеДанныеОтчетаЗаСмену.ИспользоватьОплатуНаличными Тогда
	
		ОбластьУчетНаличных = Макет.ПолучитьОбласть("УчетНаличных");
		ОбластьУчетНаличных.Параметры.НаличныеНаНачалоСмены = НаличныеНаНачалоСмены;
		ОбластьУчетНаличных.Параметры.СуммаВнесений = СуммаВнесений;
		ОбластьУчетНаличных.Параметры.СуммаВыемок = -СуммаВыемок;
		ОбластьУчетНаличных.Параметры.ПриходНаличных = ПриходНаличных;
		ОбластьУчетНаличных.Параметры.РасходНаличных = -РасходНаличных;
		ОбластьУчетНаличных.Параметры.ИтогоНаличных = НаличныеНаНачалоСмены + СуммаВнесений - СуммаВыемок + ПриходНаличных - РасходНаличных;
		
		ОбластьУчетНаличных.Параметры.ТекущийОстатокНаличных = ТекущийОстатокНаличных;
		
		ОтчетЗаСмену.Вывести(ОбластьУчетНаличных);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьПолныйАвтоматическийРасчетСкидок()
	
	Если (РежимРаботыСЧеком = РежимыРаботыСЧеком.ВводТоваров Или РежимРаботыСЧеком = РежимыРаботыСЧеком.ЧекПустой)
		И ПолныйРасчетСкидок
		И Не РаботаВРежимеМедленногоСоединения Тогда
		
		РассчитатьСкидкиКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеДляОтправкиЧека(ПочтаКонтрагента, ТелефонКонтрагента)
	
	ОтправкаЧекаПочта	= ПочтаКонтрагента;
	ОтправкаЧекаТелефон	= ТелефонКонтрагента;
		
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицуПлатежныхКарт()
	
	Если КоличествоДополнительныхКарт = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИндексСтроки = 0;
	Пока ИндексСтроки < КоличествоДополнительныхКарт Цикл
		Если ИспользоватьОплатуНесколькимиКартами И ИндексСтроки < 2 Тогда
			УдалитьРеквизитыОплатыКартой(Строка(ИндексСтроки));
		КонецЕсли;
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	
	ТаблицаОплатКартой.Очистить();
	КоличествоДополнительныхКарт = 0;
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаВидОплатыКартойГоризонтально, Истина);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПодсказкуПлатежнойСистемыВозврата()

	ДанныеВыбора	= Новый СписокЗначений;
	
	ИнтеграцияСПлатежнымиСистемамиРМКВызовСервера.ПодобратьПлатежнуюСистему(ДанныеВыбора, "#топ");
	
	Если ДанныеВыбора.Количество()
		И Не ЗначениеЗаполнено(Элементы.ПлатежнаяСистемаРасширеннаяПодсказка.Заголовок) Тогда
		
		МассивСтрок 	= Новый Массив;
		МассивСтрок.Добавить(НСтр("ru = 'Заполните банк карты покупателя. Например, '"));
		
		Для Каждого ЗначениеСписка Из ДанныеВыбора Цикл

			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ЗначениеСписка.Представление,,,, ЗначениеСписка.Значение));
			МассивСтрок.Добавить(НСтр("ru = ', '"));
			
		КонецЦикла;
		
		МассивСтрок.Удалить(МассивСтрок.ВГраница());
		МассивСтрок.Добавить(НСтр("ru = '.'"));
		
		Элементы.ПлатежнаяСистемаРасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитыОплатыКартой(ИндексЭлемента)
	
	ПараметрыУвеличенногоИнтерфейса = ИнтерфейсРМКСлужебный.ПараметрыУвеличенногоИнтерфейса(ВидОтображения);
	ШрифтСуммы = ?(ВидОтображения = Перечисления.ВидыОтображения.Увеличенный, ПараметрыУвеличенногоИнтерфейса.ШрифтСуммОплат, ШрифтыСтиля.ШрифтОбычныйПолужирныйРМК);
	
	// Добавляем реквизиты на форму
	ДобавляемыеРеквизиты = Новый Массив;
	
	ТипРеквизита  = Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.НеотрицательноеЧисло15_2_РМК.Тип);
	ИмяРеквизита  = "СуммаОплаченоБН_" + ИндексЭлемента;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, ИмяРеквизита) Тогда
		Возврат;
	КонецЕсли;
	РеквизитФормы = Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита);
	
	ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	ЭтотОбъект[ИмяРеквизита] = 0;
	
	ИмяГруппы = "ГруппаВидОплатыКартойГоризонтально_" + ИндексЭлемента;
	ГруппаЭлементов = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ГруппаВидОплатыКартой);
	ГруппаЭлементов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЭлементов.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаЭлементов.ОтображатьЗаголовок = Ложь;
	ГруппаЭлементов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	ИмяКнопки = "ОплатаКартой_" + ИндексЭлемента;
	НоваяКнопка = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ГруппаЭлементов);
	НоваяКнопка.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	НоваяКнопка.ИмяКоманды = "ОплатаКартой";
	НоваяКнопка.Шрифт = ШрифтыСтиля.ШрифтОбычныйПолужирныйРМК;
	НоваяКнопка.Ширина = 12;
	Если ВидОтображения = Перечисления.ВидыОтображения.Увеличенный Тогда
		НоваяКнопка.Высота = 2;
	КонецЕсли;
	
	ИмяГруппыСтраниц = "СтраницыОплатыКартой_" + ИндексЭлемента;
	ГруппаСтраниц = Элементы.Добавить(ИмяГруппыСтраниц, Тип("ГруппаФормы"), ГруппаЭлементов);
	ГруппаСтраниц.Вид = ВидГруппыФормы.Страницы;
	ГруппаСтраниц.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	ГруппаСтраниц.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	
	ИмяГруппыОплаты = "ГруппаОплатаКартой_" + ИндексЭлемента;
	ГруппаЭлементовОплаты = Элементы.Добавить(ИмяГруппыОплаты, Тип("ГруппаФормы"), ГруппаСтраниц);
	ГруппаЭлементовОплаты.Вид = ВидГруппыФормы.Страница; 
	ГруппаЭлементовОплаты.Видимость = Ложь;
	ГруппаЭлементовОплаты.ОтображатьЗаголовок = Ложь;
	ГруппаЭлементовОплаты.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	ПолеСуммаОплатыБН = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), ГруппаЭлементовОплаты);
	ПолеСуммаОплатыБН.ПутьКДанным = ИмяРеквизита;
	ПолеСуммаОплатыБН.Вид = ВидПоляФормы.ПолеВвода;
	ПолеСуммаОплатыБН.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеСуммаОплатыБН.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	ПолеСуммаОплатыБН.КнопкаВыбора = Истина;
	Если ВидОтображения = Перечисления.ВидыОтображения.Увеличенный Тогда
		ПолеСуммаОплатыБН.Ширина = 10;
	Иначе
		ПолеСуммаОплатыБН.Ширина = 9;
	КонецЕсли;
	ПолеСуммаОплатыБН.Шрифт = ШрифтСуммы;
	ПолеСуммаОплатыБН.РастягиватьПоГоризонтали = Ложь;
	ПолеСуммаОплатыБН.КартинкаКнопкиВыбора = БиблиотекаКартинок.РМКЦифроваяПанель;
	ПолеСуммаОплатыБН.УстановитьДействие("ПриИзменении", "СуммаОплаченоБНПриИзменении");
	ПолеСуммаОплатыБН.УстановитьДействие("НачалоВыбора", "СуммаОплаченоБННачалоВыбора");
	ПолеСуммаОплатыБН.УстановитьДействие("АвтоПодбор", "СуммаОплаченоБНАвтоПодбор");
	ПолеСуммаОплатыБН.УстановитьДействие("ОкончаниеВводаТекста", "СуммаОплаченоБНОкончаниеВводаТекста");
	
	ИмяГруппыПодсказки = "ГруппаПодсказкаОплатаКартой_" + ИндексЭлемента;
	ГруппаЭлементовПодсказки = Элементы.Добавить(ИмяГруппыПодсказки, Тип("ГруппаФормы"), ГруппаСтраниц);
	ГруппаЭлементовПодсказки.Вид = ВидГруппыФормы.Страница;
	ГруппаЭлементовПодсказки.ОтображатьЗаголовок = Ложь;
	ГруппаЭлементовПодсказки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьРеквизитыОплатыКартой(ИндексОплатыКартой)
	
	ИндексЧислом = Число(ИндексОплатыКартой);
	ИндексУдаления = Строка(ИндексЧислом + 1);
	НаименованиеУдаляемогоРеквизита = "СуммаОплаченоБН_" + ИндексУдаления;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, НаименованиеУдаляемогоРеквизита) Тогда
		
		УдаляемыеРеквизиты = Новый Массив;
		УдаляемыеРеквизиты.Добавить("СуммаОплаченоБН_" + ИндексУдаления);
		ИзменитьРеквизиты(, УдаляемыеРеквизиты);
		
		УдалитьЭлементФормы("ГруппаВидОплатыКартойГоризонтально_" + ИндексУдаления);
		УдалитьЭлементФормы("ОплатаКартой_" + ИндексУдаления);
		УдалитьЭлементФормы("СтраницыОплатыКартой_" + ИндексУдаления);
		УдалитьЭлементФормы("ГруппаОплатаКартой_" + ИндексУдаления);
		УдалитьЭлементФормы("ГруппаПодсказкаОплатаКартой_" + ИндексУдаления); 
		УдалитьЭлементФормы("СуммаОплаченоБН_" + ИндексУдаления);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСуммуОплатыЧека(СуммаОперации, ЭтоПродажа = Истина)
	
	СтруктураОтбора = ВыбраннаяОрганизацияИСНО();
	СтруктураОтбора.Вставить("Сумма", СуммаОперации);
	СтруктураОтбора.Вставить("Оплачено", Не ЭтоПродажа);
	СтрокиОплаты = ТаблицаОплатКартой.НайтиСтроки(СтруктураОтбора);
	Если СтрокиОплаты.Количество() > 0 Тогда
		СтрокаОплатыКартой = СтрокиОплаты[0];
		СтрокаОплатыКартой.Оплачено = ЭтоПродажа;
	КонецЕсли;
	
	Отказ = Ложь;
	ТекстОшибки = "";
	
	ДополнительныеДанные = ДополнительныеДанныеДляФискализации();
	ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьДополнительныеДанныеДляПробитияЧека(ЭтотОбъект,
		ДополнительныеДанные);
	ЗаписатьЧекККМПередПробитием(ДополнительныеДанные, Отказ, ТекстОшибки);
	ОбновитьРеквизитыФормыПослеПодготовкиДанныхДляЧека(ДополнительныеДанные);
	
	СтруктураОтбора = ВыбраннаяОрганизацияИСНО();
	СтруктураОтбора.Вставить("Оплачено", ЭтоПродажа);
	
	СуммаОплаченоБНЧастично = 0;
	СтрокиОплаты = ТаблицаОплатКартой.НайтиСтроки(СтруктураОтбора);
	Для Каждого СтрокаОплаты Из СтрокиОплаты Цикл
		СуммаОплаченоБНЧастично = СуммаОплаченоБНЧастично + СтрокаОплаты.Сумма;
	КонецЦикла;
	Если СуммаОплаченоБН = СуммаОплаченоБНЧастично Тогда
		ТранзакцияПоКартеЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыФормыПослеПодготовкиДанныхДляЧека(ДополнительныеДанные)
	
	ЧекККМВОбработке = ДополнительныеДанные.РеквизитыФормы.ЧекККМВОбработке;
	ОбщегоНазначенияРМККлиентПереопределяемый.ОбновитьРеквизитыФормыПослеПодготовкиДанныхДляЧека(ЭтотОбъект,
		ДополнительныеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ВыдачаПодарков
&НаКлиенте
Процедура ВыдатьПодарок()

	Доступность = Истина;
	Если ТаблицаПодаркиБезВыбора.Количество() = 0 Тогда
		Если ТаблицаПодарков.Количество() = 0 Тогда
			РежимВыбораПодарка = Ложь;
			ВыполнитьОтложенныйМетод();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭтоВозвратПродажи = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
	СтрокаПодарок = ТаблицаПодаркиБезВыбора[0];
	ПараметрыВыбораПодарка = Новый Структура;
	ПараметрыВыбораПодарка.Вставить("СтрокаПодарок", СтрокаПодарок);
	ОбработкаВыбора = Новый ОписаниеОповещения("ОбработатьВыборПодарка", ЭтаФорма, ПараметрыВыбораПодарка);
	
	Если ЭтоВозвратПродажи Тогда
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Вернуть подарок %1?'"), СтрокаПодарок.Номенклатура);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Вернуть'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена'"));
	Иначе
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Выдать подарок %1?'"), СтрокаПодарок.Номенклатура);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Выдать'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена'"));
	КонецЕсли;
	ПоказатьВопрос(ОбработкаВыбора,ТекстВопроса,СписокКнопок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыдатьПодарокКассаСамообслуживания()
	Если ТаблицаПодаркиБезВыбора.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаПодаркиБезВыбора Цикл
		ОбработатьВыдачуПодарка(СтрокаТаблицы);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПодарковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные.Уровень = 1 Тогда
		Возврат;
	КонецЕсли;
	ТекущийВладелецПодарка = ТекущиеДанные.ВладелецПодарка;
	РежимВыбораПодарка = Истина;
	ОбработатьВыдачуПодарка(ТекущиеДанные);
	Если СуммаПодарковКРаспределению <> 0 Тогда
		РаспределитьСуммуПодарка();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПодарка(Результат, ДополнительныеПараметры) Экспорт
	
	СтрокаТаблицы = ДополнительныеПараметры.СтрокаПодарок;
	Если Результат = КодВозвратаДиалога.Да Тогда
		ТекущийВладелецПодарка = СтрокаТаблицы.ВладелецПодарка;
		ОбработатьВыдачуПодарка(СтрокаТаблицы);
	КонецЕсли;
	ТаблицаПодаркиБезВыбора.Удалить(СтрокаТаблицы);
	ПерейтиКВыдачеСледующегоПодарка();
	ПерезаполнитьТаблицуСкидок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыдачуПодарка(СтрокаТаблицы)
	СтруктураВыбора = ПодготовитьДанныеВыбораНоменклатуры(СтрокаТаблицы.Номенклатура);
	СтруктураВыбора.Вставить("Количество");
	СтруктураВыбора.Вставить("КоличествоУпаковок");
	СтруктураВыбора.Вставить("ВладелецПодарка");
	СтруктураВыбора.Вставить("ОбластьПредоставленияДокумент");
	СтруктураВыбора.Вставить("ВыводитьПодарокВЧек");
	СтруктураВыбора.Вставить("ВладелецПодарка");
	СтруктураВыбора.Вставить("МинимальнаяЦена");
	ЗаполнитьЗначенияСвойств(СтруктураВыбора, СтрокаТаблицы,,"Упаковка");
	СтруктураВыбора.Вставить("Подарок", Истина);
	
	СписокТоваровВыборКлиент(СтруктураВыбора);
	КоличествоТоваров = Объект.Товары.Количество();
	Если КоличествоТоваров > 0 Тогда
		ТекущаяСтрока = Объект.Товары[КоличествоТоваров - 1];
		ОбщегоНазначенияРМККлиентСервер.ПересчитатьСуммуВСтроке(ЭтотОбъект, ТекущаяСтрока, ,
			ИспользоватьАвтоматическиеСкидки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСкидкуНаПодарок(СтрокаТоваров, СуммаСкидки)
	СтрокаТоваров.СуммаАвтоматическойСкидки = СтрокаТоваров.СуммаАвтоматическойСкидки - СуммаСкидки;
	СтрокаТоваров.СуммаАвтоматическойСкидкиЧекаПродажи = СтрокаТоваров.СуммаАвтоматическойСкидкиЧекаПродажи - СуммаСкидки;
	СтрокаТоваров.ПроцентАвтоматическойСкидки = ?(СтрокаТоваров.СуммаБезСкидки = 0, 0, СтрокаТоваров.СуммаАвтоматическойСкидки/СтрокаТоваров.СуммаБезСкидки * 100);
	СтрокаТоваров.ОтображаетсяСкидкаПроцентом = Истина;
	ОбщегоНазначенияРМККлиентСервер.ПересчитатьСуммуВСтроке(ЭтотОбъект, СтрокаТоваров, , ИспользоватьАвтоматическиеСкидки);
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКВыдачеСледующегоПодарка()
	
	Если ТаблицаПодаркиБезВыбора.Количество() > 0 Тогда
		ПодключитьОбработчикОжидания("ВыдатьПодарок", 0.1, Истина);
	ИначеЕсли ТаблицаПодаркиБезВыбора.Количество() = 0 И Не ОткрытаСтраницаПоискаТовара() Тогда
		РежимВыбораПодарка = Ложь;
		ВыполнитьОтложенныйМетод();
		Если НЕ СуммаПодарковКРаспределению = 0 Тогда
			РаспределитьСуммуПодарка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПодаркиПриВозврате()
	
	ТаблицаПодаркиБезВыбора.Очистить();
	МассивСтрокКУдалению = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		Если НЕ СтрокаТаблицы.Подарок Тогда
			Если СтрокаТаблицы.СуммаАвтоматическойСкидки <> 0 Тогда
				ОтменитьСкидкуНаПодарок(СтрокаТаблицы, СтрокаТаблицы.СуммаСкидкиПодарок);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		МассивСтрокКУдалению.Добавить(СтрокаТаблицы);
		НоваяСтрока = ТаблицаПодаркиБезВыбора.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.Сумма = НоваяСтрока.Цена * НоваяСтрока.КоличествоУпаковок;
		НоваяСтрока.ВладелецПодарка = СтрокаТаблицы.ИдентификаторСтроки;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
		Объект.Товары.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьСкидкуНаПодарок(СтрокаТоваров, СуммаСкидки)
	СтрокаТоваров.СуммаАвтоматическойСкидки = СтрокаТоваров.СуммаАвтоматическойСкидки + СуммаСкидки;
	СтрокаТоваров.ПроцентАвтоматическойСкидки = ?(СтрокаТоваров.СуммаБезСкидки = 0, 0, СтрокаТоваров.СуммаАвтоматическойСкидки/СтрокаТоваров.СуммаБезСкидки * 100);
	СтрокаТоваров.ОтображаетсяСкидкаПроцентом = Истина;
	ОбщегоНазначенияРМККлиентСервер.ПересчитатьСуммуВСтроке(ЭтотОбъект, СтрокаТоваров, , ИспользоватьАвтоматическиеСкидки);
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьСуммуПодарка()
	
	СуммаКРаспределению = СуммаПодарковКРаспределению;
	ПримененнаяСуммаСкидки = 0;
	СуммаУжеРаспределенныхПодарков = 0;
	СуммаИтоги = 0;
	
	Для Каждого СтрокаТоваров Из Объект.Товары Цикл
		Если СтрокаТоваров.ЭтоПодарочныйСертификат
			Или СтрокаТоваров.ПроцентСкидкиОбщий = 100 Тогда
			Продолжить;
		КонецЕсли;
		СуммаИтоги = СуммаИтоги + СтрокаТоваров.Цена * СтрокаТоваров.КоличествоУпаковок;
		СуммаУжеРаспределенныхПодарков = СуммаУжеРаспределенныхПодарков + СтрокаТоваров.СуммаСкидкиПодарок;
		Если СтрокаТоваров.СуммаАвтоматическойСкидки <> 0 Тогда
			ПрименитьСкидкуНаПодарок(СтрокаТоваров, -1 * СтрокаТоваров.СуммаСкидкиПодарок);
		КонецЕсли;
	КонецЦикла;
	
	СуммаКРаспределению = СуммаКРаспределению + СуммаУжеРаспределенныхПодарков;
	Для Каждого СтрокаТоваров Из Объект.Товары Цикл
		Если СтрокаТоваров.ЭтоПодарочныйСертификат
			Или СтрокаТоваров.ПроцентСкидкиОбщий = 100 Тогда
			Продолжить;
		КонецЕсли;
		СуммаСтроки = СтрокаТоваров.Цена * СтрокаТоваров.КоличествоУпаковок;
		Если СуммаИтоги <> 0 Тогда
			СуммаСкидки = Окр(СуммаСтроки * (СуммаКРаспределению / СуммаИтоги), 2); 
		Иначе
			СуммаСкидки = 0;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТоваров.МинимальнаяЦена) Тогда
			МинимальнаяСумма = СтрокаТоваров.Количество * СтрокаТоваров.МинимальнаяЦена;
			МаксимальнаяСкидка = СтрокаТоваров.Сумма - МинимальнаяСумма; 
			СуммаСкидки = Мин(МаксимальнаяСкидка, СуммаСкидки);
			СуммаСкидки = Макс(0, СуммаСкидки);
		КонецЕсли;
		СтрокаТоваров.СуммаБезСкидки = СуммаСтроки;
		ПрименитьСкидкуНаПодарок(СтрокаТоваров, СуммаСкидки);
		СтрокаТоваров.СуммаСкидкиПодарок = СуммаСкидки;
		ПримененнаяСуммаСкидки = ПримененнаяСуммаСкидки + СуммаСкидки;
	КонецЦикла;
	СуммаКРаспределению = СуммаКРаспределению - ПримененнаяСуммаСкидки;
	
	Если СуммаКРаспределению <> 0 
		И Объект.Товары.Количество() > 0 Тогда
		СтрокаТаблицы = Объект.Товары[0];
		ПрименитьСкидкуНаПодарок(СтрокаТаблицы, СуммаКРаспределению);
		СтрокаТаблицы.СуммаСкидкиПодарок = СтрокаТаблицы.СуммаСкидкиПодарок + СуммаКРаспределению;
	КонецЕсли;
	
	СуммаПодарковКРаспределению = 0;
	ПересчитатьИтогиТабличнойЧастиТовары(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораПодарков()
	
	Если ТаблицаПодарков.Количество() = 0 Тогда
		Если ТаблицаПодаркиБезВыбора.Количество() = 0 Тогда
		
			РежимВыбораПодарка = Ложь;
			ВыполнитьОтложенныйМетод();
		ИначеЕсли ТаблицаПодаркиБезВыбора.Количество() > 0 Тогда
			ПодключитьОбработчикОжидания("ВыдатьПодарок", 0.1, Истина);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаСписокТоваровПодарки);
	НастроитьВидимостьЭлементовГруппыПоискаТовара(Ложь, Истина);
	ТаблицаПодаркиНаВыбор.Очистить();
	ЗаголовокСтраницы = НСтр("ru = 'Выберите подарок'");
	РежимВыбораПодарка = Истина;
	ИзменитьСостояниеЗаголовкаСтраницыПоискаТовара(ЗаголовокСтраницы, Истина);
	ПоискТоваровОткрытИзСтрокиВвода = Истина;
	ОткрытьКаталогКлиент();
	ТекущийВладелецПодарка = ТаблицаПодарков[0].ВладелецПодарка;
	СтруктураОтбора = Новый Структура("ВладелецПодарка", ТекущийВладелецПодарка);
	
	ТаблицаДляВыбора = ТаблицаПодарков.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого СтрокаТаблицы Из ТаблицаДляВыбора Цикл
		НоваяСтрока = ТаблицаПодаркиНаВыбор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьПодарки()
	
	Если ТаблицаПодарков.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокКУдалению = Новый Массив;
	
	КоличествоТоваров = Объект.Товары.Количество();
	Если КоличествоТоваров > 0 Тогда
		Продавец = Объект.Товары[КоличествоТоваров - 1].Продавец;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаПодарков Цикл
		
		Если СтрокаТаблицы.ВыборИзСписка Тогда
			Продолжить;
		КонецЕсли;
		
		МассивТоваров = Новый Массив;
		МассивТоваров.Добавить(СтрокаТаблицы.Номенклатура);
		
		ТаблицаТовары = Новый ТаблицаЗначений;
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьТаблицуТовары(МассивТоваров, ТаблицаТовары);
		
		ВидНоменклатуры = Неопределено;
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьВидНоменклатуры(СтрокаТаблицы.Номенклатура, ВидНоменклатуры);
		
		ТипНоменклатуры = Неопределено;
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьТипНоменклатуры(СтрокаТаблицы.Номенклатура, ТипНоменклатуры);
	
		Для Каждого СтрокаТовара Из ТаблицаТовары Цикл
			НоваяСтрока = ТаблицаПодаркиБезВыбора.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
		
		МассивСтрокКУдалению.Добавить(СтрокаТаблицы);
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
		ТаблицаПодарков.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ОтображатьСкидкиВЧеке(ЭтоОперацияПродажа, ЭтоОперацияВозврат)
	
	РезультатФункции = Истина;
	Если ЭтоОперацияПродажа Тогда
		РезультатФункции = ВключеноИспользованиеАвтоматическихСкидок
			Или (ДопускаетсяПрименениеСкидок И Не РежимКассыСамообслуживания);
	ИначеЕсли ЭтоОперацияВозврат Тогда
		РезультатФункции = ИспользоватьАвтоматическиеСкидкиПриВозврате
			Или ДопускаетсяПрименениеСкидок Или ВЧекеПрисутствуетСкидка();
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция ВЧекеПрисутствуетСкидка()
	
	РезультатФункции = Ложь;
	КоличествоСтрок = Объект.Товары.Количество();
	ИндексСтроки = 0;
	Пока ИндексСтроки < КоличествоСтрок И Не РезультатФункции Цикл
		СтрокаТовара = Объект.Товары.Получить(ИндексСтроки);
		Если Не СтрокаТовара.СуммаСкидокОбщая = 0 Тогда
			РезультатФункции = Истина;
		КонецЕсли;
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти

#Область КомандыНастройкиКаталога

&НаКлиенте
Процедура НастройкаКаталогаОткрытьНастройки(Команда)
	Элементы.ГруппаНастройкиКаталогаВсплывающая.Показать();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКаталогаЗакрыть(Команда)
	Элементы.ГруппаНастройкиКаталогаВсплывающая.Скрыть();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКаталогаОткрытьРасширеннуюФорму(Команда)
	
	ЗакрытьПоискТоваровКлиент();
	ОбщегоНазначенияРМККлиентПереопределяемый.ОткрытьФормуПодбораТоваров(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКаталогаБезИерархии(Команда)
	
	Если НастройкаКаталогаВариантОтображения = 0 Тогда
		Возврат;
	КонецЕсли;
	НастройкаКаталогаВариантОтображения = 0;
	НастроитьОтображениеКаталога();
	ЗакрытьНастройкиКаталога();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКаталогаИерархияСписок(Команда)
	
	Если НастройкаКаталогаВариантОтображения = 1 Тогда
		Возврат;
	КонецЕсли;
	НастройкаКаталогаВариантОтображения = 1;
	НастроитьОтображениеКаталога();
	ЗакрытьНастройкиКаталога();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКаталогаИерархияДерево(Команда)
	
	Если НастройкаКаталогаВариантОтображения = 2 Тогда
		Возврат;
	КонецЕсли;
	НастройкаКаталогаВариантОтображения = 2;
	НастроитьОтображениеКаталога();
	ЗакрытьНастройкиКаталога();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКаталогаИерархияГрупп(Команда)
	
	Если НастройкаКаталогаВариантОтображения = 3 Тогда
		Возврат;
	КонецЕсли;
	НастройкаКаталогаВариантОтображения = 3;
	НастроитьОтображениеКаталога();
	ЗакрытьНастройкиКаталога();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКаталогаИерархияКатегорий(Команда)
	
	Если НастройкаКаталогаВариантОтображения = 4 Тогда
		Возврат;
	КонецЕсли;
	НастройкаКаталогаВариантОтображения = 4;
	НастроитьОтображениеКаталога();
	ЗакрытьНастройкиКаталога();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКаталогаВсеПоляПоиска(Команда)
	НастройкаКаталогаВключитьВсеПоляПоиска();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКаталогаВсеПоляВидимость(Команда)
	НастройкаКаталогаВключитьВидимостьВсехПолей();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКаталогаПоУмолчанию(Команда)
	
	НастройкаКаталогаВариантОтображения = 0;
	НастройкаКаталогаОбъединятьПоНоменклатуре = Ложь;
	НастройкаКаталогаСкрыватьНеактуальныеСтроки = Ложь;
	
	НастроитьОтображениеНеактуальныхСтрокВКаталоге();
	НастроитьКнопкуСкрытьНеактуальныеСтроки();
	НастроитьКнопкуОбъединитьПоНоменклатуре();
	НастроитьОтображениеКаталога();
	НастройкаКаталогаВключитьВидимостьВсехПолей();
	НастройкаКаталогаОтключитьВидимостьДополнительныхПолей();
	НастройкаКаталогаВключитьВсеПоляПоиска();
	СброситьНастройкиОтбораКаталога();
	ЗакрытьНастройкиКаталога();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПолеПоискаКаталога(Команда)
	
	ИмяПоля = СтрЗаменить(Команда.Имя,"ПолеПоискаКаталога_", "");
	
	СтруктураОтбора = Новый Структура("ИмяПоля", ИмяПоля);
	СтрокиПолей = НастройкаКаталогаНастройкиПолей.НайтиСтроки(СтруктураОтбора);
	Если СтрокиПолей.Количество() > 0 Тогда
		СтрокаПоля = СтрокиПолей[0];
		СтрокаПоля.ИспользоватьПоискПоСтроке = Не СтрокаПоля.ИспользоватьПоискПоСтроке;
		ИменаПолей = Новый Массив;
		ИменаПолей.Добавить(ИмяПоля);
		НастроитьИспользованиеПоискаПолейКаталога(ИменаПолей, СтрокаПоля.ИспользоватьПоискПоСтроке);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВидимостьПоляКаталога(Команда)
	
	ИмяПоля = СтрЗаменить(Команда.Имя,"ВидимостьПоляКаталога_", "");
	
	СтруктураОтбора = Новый Структура("ИмяПоля", ИмяПоля);
	СтрокиПолей = НастройкаКаталогаНастройкиПолей.НайтиСтроки(СтруктураОтбора);
	Если СтрокиПолей.Количество() > 0 Тогда
		СтрокаПоля = СтрокиПолей[0];
		СтрокаПоля.Видимость = Не СтрокаПоля.Видимость;
		ИменаПолей = Новый Массив;
		ИменаПолей.Добавить(ИмяПоля);
		НастроитьВидимостьПолейКаталога(ИменаПолей, СтрокаПоля.Видимость);
		Если СтрокаПоля.ИспользоватьПоискПоСтроке Тогда
			НастроитьИспользованиеПоискаПолейКаталога(ИменаПолей, СтрокаПоля.Видимость);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКаталогаНеСохранятьОтбор(Команда)
	
	НастройкаКаталогаСбрасыватьОтбор = Не НастройкаКаталогаСбрасыватьОтбор;
	НастроитьКнопкуНеСохранятьОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКаталогаПерейтиВГруппуНоменклатуры(Команда)
	
	ТекущиеДанныеСпискаТоваров = Элементы.СписокТоваров.ТекущиеДанные;
	Если ТекущиеДанныеСпискаТоваров = Неопределено Тогда
		ЗакрытьНастройкиКаталога();
		Возврат;
	КонецЕсли;
	
	Элементы.ОтборГруппа.ТекущаяСтрока = ТекущиеДанныеСпискаТоваров.Родитель;
	Элементы.ОтборКатегория.ТекущаяСтрока = ТекущиеДанныеСпискаТоваров.ВидНоменклатуры;
	ЗакрытьНастройкиКаталога();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКаталогаСброситьОтбор(Команда)
	СброситьНастройкиОтбораКаталога();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКаталогаОбъединитьПоНоменклатуре(Команда)
	
	НастройкаКаталогаОбъединятьПоНоменклатуре = Не НастройкаКаталогаОбъединятьПоНоменклатуре;
	НастроитьКнопкуОбъединитьПоНоменклатуре();
	НастроитьОтображениеОбъединеннойНоменклатурыВКаталоге();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКаталогаСкрытьНеактуальныеСтроки(Команда)
	
	НастройкаКаталогаСкрыватьНеактуальныеСтроки = Не НастройкаКаталогаСкрыватьНеактуальныеСтроки;
	НастроитьКнопкуСкрытьНеактуальныеСтроки();
	НастроитьОтображениеНеактуальныхСтрокВКаталоге();
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольПродаж

&НаКлиенте
Функция ПодготовитьТоварыПлиткиИзОпорныхДанных()
	
	ТоварыПлитки = Новый Массив;
	ИсточникиДанныхПлитки = ИнтерфейсРМКСлужебныйКлиентСервер.ИсточникиДанныхДляПлитки();
	Для Каждого СтрокаОпорныхДанных Из ОпорныеДанные Цикл
		
		Если ЗначениеЗаполнено(СтрокаОпорныхДанных.Номенклатура) 
				И Не СтрокаОпорныхДанных.ИсточникПлитки = ИсточникиДанныхПлитки.ВесовойТовар Тогда
			СтрокаТовара = Новый Структура();
			СтрокаТовара.Вставить("Номенклатура", СтрокаОпорныхДанных.Номенклатура);
			СтрокаТовара.Вставить("Характеристика", СтрокаОпорныхДанных.Характеристика);
			ТоварыПлитки.Добавить(СтрокаТовара);
		КонецЕсли;
		
	КонецЦикла;
	Возврат ТоварыПлитки;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьКэшКонтроляПродажПоДаннымПлиткиКлиент()
	
	Сутки = 86400;
	Половина = 0.5;
	ДатаВремяЗаполнения = ОбщегоНазначенияКлиент.ДатаСеанса();
	ДатаВремяАктуальности = ДатаВремяЗаполнения - Половина * Сутки;
	
	Если ЗначениеЗаполнено(ДатаОбновленияКэшаКонтроляПродажПлитки)
			И ДатаОбновленияКэшаКонтроляПродажПлитки < ДатаВремяАктуальности Тогда
		
		ОбновитьКэшКонтроляПродажПоДаннымПлитки(ДатаВремяЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКэшКонтроляПродажПоДаннымПлитки(ДатаВремяЗаполнения)
	
	Если ДатаВремяЗаполнения = Неопределено Тогда
		ДатаВремяЗаполнения = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	ТоварыПлитки = ПодготовитьТоварыПлиткиИзОпорныхДанных();
	ДополнительныеДанные = Новый Структура("ТорговыйОбъект", Объект.ТорговыйОбъект);
	ДополнительныеДанные.Вставить("РежимКассыСамообслуживания", РежимКассыСамообслуживания);
	ИнтерфейсРМКСлужебныйКлиент.ОчиститьКэшКонтроляПродаж(КэшКонтроляПродаж);
	ЗаполнитьКэшКонтроляПродажПоДаннымПлитки(КэшКонтроляПродаж, ТоварыПлитки, ДополнительныеДанные);
	
	ДатаОбновленияКэшаКонтроляПродажПлитки = ДатаВремяЗаполнения;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьКэшКонтроляПродажПоДаннымПлитки(ДанныеКонтроляПродаж, ТоварыПлитки, ДополнительныеДанные)
	
	ИменаКолонок = "Номенклатура,Характеристика";
	ТаблицаТоваров = Справочники.ПалитраТоваровРМК.ПустаяСсылка().Состав.ВыгрузитьКолонки(ИменаКолонок);
	Для Каждого ДанныеТовараПлитки Из ТоварыПлитки Цикл
		НоваяСтрока = ТаблицаТоваров.Добавить();
		НоваяСтрока.Номенклатура = ДанныеТовараПлитки.Номенклатура;
		НоваяСтрока.Характеристика = ДанныеТовараПлитки.Характеристика;
	КонецЦикла;
	ПредварительныеДанныеКонтроля
		= ОбщегоНазначенияРМК.ПолучитьДанныеКонтроляПродаж(ТаблицаТоваров, ДополнительныеДанные);
	ИнтерфейсРМКСлужебныйКлиентСервер.ДобавитьНовыеДанныеКэшаПродаж(ДанныеКонтроляПродаж,
		ПредварительныеДанныеКонтроля, Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ШаблонДополнительныхДанныхЗапросаКонтроляПродаж(Форма)
	
	ДанныеКонтроляПродаж = ?(Форма.ИспользоватьКонтрольПродаж, Новый Структура, Неопределено);
	
	ДополнительныеДанные = Новый Структура("ДанныеКонтроляПродаж", ДанныеКонтроляПродаж);
	ДополнительныеДанные.Вставить("ТорговыйОбъект", Форма.Объект.ТорговыйОбъект);
	ДополнительныеДанные.Вставить("РежимКассыСамообслуживания", Форма.РежимКассыСамообслуживания);
	
	Возврат ДополнительныеДанные;
	
КонецФункции

&НаКлиенте
Функция ЗапретРучныхСкидокПоСтроке()
	
	РезультатФункции = Ложь;
	ТекущиеДанные = Объект.Товары.Получить(ТекущийТоварИндексСтроки);
	Если ТекущиеДанные = Неопределено Тогда
		РезультатФункции = Истина;
	ИначеЕсли ТекущиеДанные.ЗапретРучныхСкидок Или ТекущиеДанные.Подарок Тогда
		РезультатФункции = Истина;
		ТекстПредупреждения = СтрШаблон(НСтр("ru = 'Для %1 установлен запрет применения ручных скидок.'"),
			ТекущиеДанные.ПредставлениеНоменклатураХарактеристика);
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура СкидкаТекущийТоварПроцентКлиент()
	
	Если СкидкиРассчитаны И РаботаВРежимеМедленногоСоединения Тогда
		ЗадатьВопросПоРасчетуСкидок("СкидкаТекущийТоварПроцентЗавершение");
	Иначе
		СкидкаТекущийТоварПроцентЗавершение(КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаТекущийТоварСуммаКлиент()
	
	Если СкидкиРассчитаны И РаботаВРежимеМедленногоСоединения Тогда
		ЗадатьВопросПоРасчетуСкидок("СкидкаТекущийТоварСуммаЗавершение");
	Иначе
		СкидкаТекущийТоварСуммаЗавершение(КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьНаСтраницуПодтвержденияОперации()
	
	ТекущаяСтрокаОграничения = РезультатКонтроляПродаж.ОграниченияПродаж[0];
	ПредыдущийСлойДоДанныхПокупателя
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПолучитьТекущийСлойГруппы(Элементы.ГруппаСлоевСлужебнаяИнформацияЧека);
	ИнтерфейсРМКСлужебныйКлиентСервер.АктивизироватьСлойГруппы(ЭтотОбъект, Элементы.ГруппаИнфоПодтверждение);
	НастроитьДоступностьЭлементовПриПоискеПоШтрихкоду(Ложь);
	Элементы.ДекорацияТекстИнфоПредупреждение.Заголовок = ТекущаяСтрокаОграничения.ТекстПредупреждения;
	
	ТекущийЭлемент = Элементы.ПодтвердитьОперациюСотрудником;
	Если РежимПлитки Тогда
		ПереключатьсяВРежимПлитки = Ложь;
		ПереключитьНаРежимПлиткиИзПалитры();
	КонецЕсли;
	ТекущаяОперация = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьОперациюСотрудникомКлиент()
	
	ВернутьПредыдущийСлойПанелиОплаты(Элементы.ГруппаИнфоПодтверждение);
	НастроитьДоступностьЭлементовПриПоискеПоШтрихкоду(Истина);
	
	РезультатКонтроляПродаж.НужнаПроверкаДоступностиОплаты = Истина;
	РезультатКонтроляПродаж.ОграниченияПродаж.Удалить(0);
	ОбработатьРезультатКонтроляПродаж();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОперациюСотрудникомКлиент()
	
	ВернутьПредыдущийСлойПанелиОплаты(Элементы.ГруппаИнфоПодтверждение);
	НастроитьДоступностьЭлементовПриПоискеПоШтрихкоду(Истина);
	
	Если Не РезультатКонтроляПродаж.ОповещениеПриОтказе = Неопределено Тогда
		ВыполнитьОбработкуОповещения(РезультатКонтроляПродаж.ОповещениеПриОтказе);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатКонтроляПродаж(ПараметрыВызова = Неопределено)
	
	Если РезультатКонтроляПродаж.ОграниченияПродаж.Количество() = 0 Тогда
		Если Не РезультатКонтроляПродаж.ОповещениеПриУспехе = Неопределено Тогда
			ПараметрыМетода = Новый Структура("НуженПересчет", РезультатКонтроляПродаж.НуженПересчет);
			ПараметрыМетода.Вставить("БылоУдалениеСтрок", РезультатКонтроляПродаж.БылоУдалениеСтрок);
			ПараметрыМетода.Вставить("НужнаПроверкаДоступностиОплаты", РезультатКонтроляПродаж.НужнаПроверкаДоступностиОплаты);
			ПараметрыМетода.Вставить("ДобавлениеПодбором", РезультатКонтроляПродаж.ДобавлениеПодбором);
			ПараметрыМетода.Вставить("ДобавлениеИзПлитки", РезультатКонтроляПродаж.ДобавлениеИзПлитки);
			ВыполнитьОбработкуОповещения(РезультатКонтроляПродаж.ОповещениеПриУспехе, ПараметрыМетода);
		КонецЕсли;
		ИнтерфейсРМКСлужебныйКлиент.ОчиститьРезультатКонтроляПродаж(РезультатКонтроляПродаж);
	Иначе
		ТекущаяСтрокаОграничения = РезультатКонтроляПродаж.ОграниченияПродаж[0];
		Если ТекущаяСтрокаОграничения.ТипКонтроля = ПредопределенноеЗначение("Перечисление.ТипыКонтроля.ЗапретПодбора") Тогда
			
			ОткрытьСтраницуЗапретаПродажиПоВремени(ТекущаяСтрокаОграничения);
			Оповестить("ЗакрытьФормуПодбораИзНовогоРМК");
			
		ИначеЕсли ТекущаяСтрокаОграничения.ТипКонтроля
				= ПредопределенноеЗначение("Перечисление.ТипыКонтроля.КонтрольСотрудникомНаКСО") Тогда
				
			НеобходимоеПраво = "ПравоПодтвержденияТовараКСО";
			ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
			ПредложитьЗаменитьПраваКассира(НеобходимоеПраво);
			Оповестить("ЗакрытьФормуПодбораИзНовогоРМК");
			
		ИначеЕсли ТекущаяСтрокаОграничения.ТипКонтроля
				= ПредопределенноеЗначение("Перечисление.ТипыКонтроля.ПроверкаПокупателя") Тогда
				
			Если ТекущаяСтрокаОграничения.ВозрастКонтроля > 0 И ТекущаяСтрокаОграничения.ВозрастКонтроля <= ПодтвержденныйВозрастПокупателя Тогда
				РезультатКонтроляПродаж.ОграниченияПродаж.Удалить(0);
				ОбработатьРезультатКонтроляПродаж();
			Иначе
				ПереключитьНаСтраницуПодтвержденияВозраста(ТекущаяСтрокаОграничения);
				Оповестить("ЗакрытьФормуПодбораИзНовогоРМК");
			КонецЕсли;
			
		Иначе
			РезультатКонтроляПродаж.ОграниченияПродаж.Удалить(0);
			ОбработатьРезультатКонтроляПродаж();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТоварПоРезультатамКонтроля(Результат, Дополнительныепараметры) Экспорт
	
	СтрокаОграничения = РезультатКонтроляПродаж.ОграниченияПродаж.Получить(0);
	УдалитьТоварИзОстальныхСтрокОграничений(СтрокаОграничения.СтрокиТоваров);
	
	КоличествоСтрок = СтрокаОграничения.СтрокиТоваров.Количество();
	ИндексСтроки = 0;
	Пока ИндексСтроки < КоличествоСтрок Цикл
		ТекущийИндекс = КоличествоСтрок - ИндексСтроки - 1;
		ИдентификаторУдаляемойСтроки = СтрокаОграничения.СтрокиТоваров.Получить(ТекущийИндекс);
		СтрокаТовара = Объект.Товары.НайтиПоИдентификатору(ИдентификаторУдаляемойСтроки);
		
		Если СтрокаТовара.НеобходимостьВводаКодаМаркировки Тогда
			ОжидатьВводМарки = Ложь;
		КонецЕсли;
		Объект.Товары.Удалить(СтрокаТовара);
		
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	Если КоличествоСтрок > 0 Тогда
		РезультатКонтроляПродаж.БылоУдалениеСтрок = Истина;
	КонецЕсли;
	РезультатКонтроляПродаж.ОграниченияПродаж.Удалить(0);
	ОбработатьРезультатКонтроляПродаж();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТоварИзОстальныхСтрокОграничений(УдаляемыеСтрокиТовара)
	
	КоличествоОграничений = РезультатКонтроляПродаж.ОграниченияПродаж.Количество();
	ИндексОграничения = 1;
	Пока ИндексОграничения < КоличествоОграничений Цикл
		ТекущийИндекс = КоличествоОграничений - ИндексОграничения;
		ОбрабатываемоеОграничение = РезультатКонтроляПродаж.ОграниченияПродаж.Получить(ТекущийИндекс);
		КоличествоСтрокТоваров = ОбрабатываемоеОграничение.СтрокиТоваров.Количество();
		ИндексСтроки = 0;
		Пока ИндексСтроки < КоличествоСтрокТоваров Цикл
			ТекущийИндексСтрокиТовара = КоличествоСтрокТоваров - ИндексСтроки - 1;
			ИдентификаторСтрокиТовара = ОбрабатываемоеОграничение.СтрокиТоваров.Получить(ТекущийИндексСтрокиТовара);
			Если Не УдаляемыеСтрокиТовара.Найти(ИдентификаторСтрокиТовара) = Неопределено Тогда
				ОбрабатываемоеОграничение.СтрокиТоваров.Удалить(ТекущийИндексСтрокиТовара);
			КонецЕсли;
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
		Если ОбрабатываемоеОграничение.СтрокиТоваров.Количество() = 0 Тогда
			РезультатКонтроляПродаж.ОграниченияПродаж.Удалить(ТекущийИндекс);
		КонецЕсли;
		
		ИндексОграничения = ИндексОграничения + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьТоварСЗапретомОплатыБонусами()
	
	РезультатФункции = Ложь;
	
	КоличествоТовара = Объект.Товары.Количество();
	ИндексСтроки = 0;
	Пока ИндексСтроки < КоличествоТовара И Не РезультатФункции Цикл
		Строкатовара = Объект.Товары.Получить(ИндексСтроки);
		Если Строкатовара.ЗапретОплатыБонусамиСкидками Тогда
			РезультатФункции = Истина;
		КонецЕсли;
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ОтменитьПредупреждениеОЗапретеОплатыБонусамиПриНеобходимости()
	
	Если ОткрытоПредупреждениеОЗапретеОплатыБонусами И Не ЕстьТоварСЗапретомОплатыБонусами() Тогда
		ПредупреждениеОПродукцииБезОплатыБонусамиПоказано = Ложь;
		Если ОткрытаСтраницаИнфоОшибка() Тогда
			ЗакрытьСтраницуИнфоОшибкаНаКлиенте();
		КонецЕсли;
		ОткрытоПредупреждениеОЗапретеОплатыБонусами = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеТоваровЗавершениеОбработкиКонтроляПродаж(Результат, Дополнительныепараметры) Экспорт
	
	РезультатСтруктурой = (ТипЗнч(Результат) = Тип("Структура"));
	НуженПересчет = ?(РезультатСтруктурой И Результат.Свойство("НуженПересчет"), Результат.НуженПересчет, Ложь);
	НужнаПроверкаДоступностиОплаты = ?(РезультатСтруктурой И Результат.Свойство("НужнаПроверкаДоступностиОплаты"),
		Результат.НужнаПроверкаДоступностиОплаты, Ложь);
	БылоУдалениеСтрок
		= ?(РезультатСтруктурой И Результат.Свойство("БылоУдалениеСтрок"), Результат.БылоУдалениеСтрок, Ложь);
	ДобавлениеПодбором
		= ?(РезультатСтруктурой И Результат.Свойство("ДобавлениеПодбором"), Результат.ДобавлениеПодбором, Ложь);
	ДобавлениеИзПлитки
		= ?(РезультатСтруктурой И Результат.Свойство("ДобавлениеИзПлитки"), Результат.ДобавлениеИзПлитки, Ложь);
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ЕстьНезаполненныеДанные = Ложь;
		ТекущаяОперация = "";
		
		Если Не Элементы.ГруппаИнфо.Видимость И Не РежимПлитки Тогда
			УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнфо, Истина);
		КонецЕсли;
		
		Если БылоУдалениеСтрок Тогда
			ПересчитатьИтогиТабличнойЧастиТовары();
			ОтменитьПредупреждениеОЗапретеОплатыБонусамиПриНеобходимости();
			ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
		КонецЕсли;
			
		Если НуженПересчет Тогда
			
			ЕстьНезаполненныеДанные = ЕстьНезаполненныеДанные();
			ОбработатьИзменениеТаблицыТоваровНаКлиенте(Не ЕстьНезаполненныеДанные);
			ОбновитьИнформациюНаДисплееПокупателя(ТипыОперацийДисплеяПокупателя.ДобавлениеТовара);
			
		ИначеЕсли Не РежимПлитки Тогда
			
			ЕстьНезаполненныеДанные = ЕстьНезаполненныеДанные();
			Если (Не ЕстьНезаполненныеДанные) И БылоУдалениеСтрок И ОткрытаСтраницаИнфоОшибка() Тогда
				ЗакрытьСтраницуИнфоОшибкаНаКлиенте();
			КонецЕсли;
			
		КонецЕсли;
		
		ВозвратВПлиткуВозможен = ДобавлениеИзПлитки И (Не РежимПлитки) И (Не ЕстьНезаполненныеДанные);
		Если ОсновнойПодборПлиточный И ВозвратВПлиткуВозможен И Не ЗакрыватьПодборПриВыбореТовара Тогда
			ОткрытьПлиточныйИнтерфейсКаталога(Неопределено);
		КонецЕсли;
		
		Если НужнаПроверкаДоступностиОплаты Тогда
			ИнтерфейсРМКСлужебныйКлиент.НастроитьДоступностьРежимаОплаты(ЭтотОбъект);
		КонецЕсли;
		
		Если ЕстьНезаполненныеДанные Тогда
			ТоварыПриАктивизацииСтроки(Элементы.Товары);
		ИначеЕсли БылоУдалениеСтрок Тогда
			УстановитьАктивностьСтроки(Истина);
		ИначеЕсли Не Элементы.Товары.ТекущиеДанные = Неопределено Тогда
			НастроитьПредставлениеТовара(Элементы.Товары.ТекущиеДанные);
		КонецЕсли;
		
		Если Не БылоУдалениеСтрок Тогда
			ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
			Если (Не ДобавлениеПодбором) И (Не ТекущаяСтрока = Неопределено) И ТекущаяСтрока.ПоштучноеВыбытие
					И ОбщегоНазначенияРМККлиентСервер.ЭтоПивнаяПродукция(ТекущаяСтрока.ОсобенностьУчета) Тогда
				
				ВывестиПредупреждениеОстаткаЧастичноеВыбытие(ТекущаяСтрока);
				
			КонецЕсли;
		КонецЕсли;
		Если ОткрытоПредупреждениеОЗапретеОплатыБонусами И Не ОткрытаСтраницаИнфоОшибка() Тогда
			ВывестиПредупреждениеОНевозможностиОплатыБонусами();
		КонецЕсли;
		
	Иначе
		
		СоздатьНовыйНабор();
		ОграничитьДоступностьЭлементовПриОжиданииМарки(Ложь);
		ПереключатьсяВРежимПлитки = ОсновнойПодборПлиточный;
		ПереключитьВРежимПлитки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПробитиеЧекаНаКлиентеПослеКонтроляПродаж(Результат, Команда) Экспорт
	
	СтруктураОшибки = Новый Структура;
	СтруктураОшибки.Вставить("ТекстЗаголовка", "");
	СтруктураОшибки.Вставить("ТекстОшибки", "");
	
	ПробитоЧеков = ПробитыеЧеки.Количество();
	
	Если ЭтоОплатаВстречнымПредоставлением И НЕ Элементы.ГруппаОплатаНал.Видимость 
		И НЕ Элементы.ГруппаОплатаКартой.Видимость И НЕ Элементы.ГруппаСуммаОплатаСертификатами.Видимость Тогда
		
			ПараметрыПересчета = СтруктураПараметровПересчетаСуммОплаты();
			ПараметрыПересчета.ПоКомандеНал = Истина;
			РассчитатьСуммыОплатыПриРедактировании(ПараметрыПересчета);
		
	КонецЕсли;
	
	Если НЕ ЭтоЧекКоррекции Тогда
		
		СистемыНалогообложенияПродажТоваровКорзины = РазличныеСНОВСпискеПокупок();
		
		Если ЭтоЗаменаТоваров Тогда
			
			Если СистемыНалогообложенияПродажТоваровКорзины.Количество() > 1 Тогда
				СтруктураОшибки.ТекстЗаголовка = НСтр("ru = 'Ошибка.'");
				СтруктураОшибки.ТекстОшибки = НСтр("ru = 'Выбранные товары имеют разные системы налогообложения.'");
				ОткрытьСтраницуИнфоОшибка(СтруктураОшибки.ТекстЗаголовка, СтруктураОшибки.ТекстОшибки);
				Возврат;
			КонецЕсли;
			
			СписокОрганизаций = Новый СписокЗначений;
			Для Каждого СтрокаТовара Из Объект.Товары Цикл
				Если СписокОрганизаций.НайтиПоЗначению(СтрокаТовара.Организация) = Неопределено Тогда
					СписокОрганизаций.Добавить(СтрокаТовара.Организация);
				КонецЕсли;
			КонецЦикла;
			Если СписокОрганизаций.Количество() > 1 Тогда
				СтруктураОшибки.ТекстЗаголовка = НСтр("ru = 'Ошибка.'");
				СтруктураОшибки.ТекстОшибки = НСтр("ru = 'Выбранные товары относятся к разным организациям.'");
				ОткрытьСтраницуИнфоОшибка(СтруктураОшибки.ТекстЗаголовка, СтруктураОшибки.ТекстОшибки);
				Возврат;
			КонецЕсли;
			
			ОжидаемоеКоличествоЧеков = 2 - ПробитоЧеков;
			
		Иначе
			Если ЭтоОплатаВстречнымПредоставлением Тогда
				
				ЭтоПродажа = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииПродажа(Объект.ВидОперации);
				Если ЭтоПродажа Тогда
					Для каждого СтрокаТовары  Из Объект.Товары Цикл
						
						СтрокаТовары.Сумма		= 0;
						СтрокаТовары.СуммаНДС	= 0;
						
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
			ОжидаемоеКоличествоЧеков = СистемыНалогообложенияПродажТоваровКорзины.Количество() - ПробитоЧеков;
		КонецЕсли;
		
	Иначе
		
		СистемыНалогообложенияПродажТоваровКорзины = Новый Массив();
		СтруктураОрганизацийИСНО = Новый Структура("Организация, СистемаНалогообложения");
		СтруктураОрганизацийИСНО.Организация = ВыбраннаяОрганизация;
		СтруктураОрганизацийИСНО.СистемаНалогообложения = СистемаНалогообложенияЧекаКоррекции;
		СистемыНалогообложенияПродажТоваровКорзины.Добавить(СтруктураОрганизацийИСНО);
		ОжидаемоеКоличествоЧеков = 2 - ПробитоЧеков;
		
	КонецЕсли;
	
	АвтономнаяККТ = Ложь;
	
	Если ОжидаемоеКоличествоЧеков > 0 Тогда
		
		Отбор = Новый Структура("КассаККМ", Объект.КассаККМ);
		СтрокаКассы = ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
		Если СтрокаКассы.ИспользоватьБезПодключенияОборудования Тогда
			Если НЕ ЭтоЧекКоррекции Тогда
				ПродолжитьФормированиеЧеков = Истина;
				АвтономнаяККТ = Истина;
			Иначе
				ПродолжитьФормированиеЧеков = Ложь;
				ЗаголовокОшибки = НСтр("ru = 'Ошибка.'");
				ТекстОшибки = НСтр("ru = 'Нельзя пробить чек коррекции на кассе без подключения оборудования.'");
				ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстОшибки);
				ПодключитьОбработчикОжидания("ОбработкаВыводаОжиданияОплатыНаДисплейПокупателя", 5, Истина);
				Возврат;
			КонецЕсли;
		Иначе
			РезультатПроверки = КассаПоддерживаетОперацииПоСНОИзСпискаПокупок(
			ПодключаемоеОборудование, СистемыНалогообложенияПродажТоваровКорзины);
			
			ПродолжитьФормированиеЧеков = НЕ РезультатПроверки.Ошибка;
			АвтономнаяККТ = Ложь;
		КонецЕсли;
		
		Если НЕ ПродолжитьФормированиеЧеков Тогда
			
			ЗаголовокОшибки = НСтр("ru = 'Ошибка пробития чека'");
			ТекстОшибки = РезультатПроверки.ТекстОшибки;
			ОткрытьСтраницуИнфоОшибка(ЗаголовокОшибки, ТекстОшибки);
			ПодключитьОбработчикОжидания("ОбработкаВыводаОжиданияОплатыНаДисплейПокупателя", 5, Истина);
			Возврат;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если ТипЗнч(Команда) = Тип("ПеречислениеСсылка.ТипыПлатежнойСистемыККТ") Тогда
		НачатьОплатуВозвратПлатежнойСистемой(Команда);
	Иначе
		ПодготовитьКПечатиЧека(АвтономнаяККТ);
	КонецЕсли;
	
	ВывестиСообщения(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьЗапрещенныйТоварИЗавершитьКонтроль(Результат, ДополнительныеПараметры) Экспорт
	
	СтрокаОграничения = РезультатКонтроляПродаж.ОграниченияПродаж.Получить(0);
	Если СтрокаОграничения.СтрокиТоваров.Количество() > 0 Тогда
		Элементы.Товары.ТекущаяСтрока = СтрокаОграничения.СтрокиТоваров[0];
	КонецЕсли;
	ИнтерфейсРМКСлужебныйКлиент.ОчиститьРезультатКонтроляПродаж(РезультатКонтроляПродаж);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВРежимОплатыПоКнопкеОплатить()
	
	ЭтапыКонтроляПродаж = ИнтерфейсРМКСлужебныйКлиент.ЭтапыКонтроляПродаж();
	ИнтерфейсРМКСлужебныйКлиент.ВыполнитьПроверкиКонтроляПродаж(ЭтотОбъект, ЭтапыКонтроляПродаж.ПробитиеЧека);
	
	ЗапуститьОбработкуРезультатаКонтроляПродажПриПереходеКОплате();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОбработкуРезультатаКонтроляПродажПриПереходеКОплате()
	
	ОповещениеПриУспехе
		= Новый ОписаниеОповещения("ПолучитьДанныеЛояльностиИПерейтиВРежимОплаты", ЭтотОбъект);
	ОповещениеПриОтказе = Новый ОписаниеОповещения("ВыделитьЗапрещенныйТоварИЗавершитьКонтроль", ЭтотОбъект);
	РезультатКонтроляПродаж.ОповещениеПриУспехе = ОповещениеПриУспехе;
	РезультатКонтроляПродаж.ОповещениеПриОтказе = ОповещениеПриОтказе;
	ОбработатьРезультатКонтроляПродаж();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОбработкуРезультатаКонтроляПродажПриПробитииЧека(Команда)
	
	ОповещениеПриУспехе
		= Новый ОписаниеОповещения("ОбработатьПробитиеЧекаНаКлиентеПослеКонтроляПродаж", ЭтотОбъект, Команда);
	ОповещениеПриОтказе = Новый ОписаниеОповещения("ВыделитьЗапрещенныйТоварИЗавершитьКонтроль", ЭтотОбъект);
	РезультатКонтроляПродаж.ОповещениеПриУспехе = ОповещениеПриУспехе;
	РезультатКонтроляПродаж.ОповещениеПриОтказе = ОповещениеПриОтказе;
	ОбработатьРезультатКонтроляПродаж();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОбработкуРезультатаКонтроляПродажПриДобавлении(ДобавлениеИзПлитки = Ложь)
	
	РезультатКонтроляПродаж.ДобавлениеИзПлитки = ДобавлениеИзПлитки;
	ОповещениеПриУспехе = Новый ОписаниеОповещения("ДобавлениеТоваровЗавершениеОбработкиКонтроляПродаж", ЭтотОбъект);
	ОповещениеПриОтказе = Новый ОписаниеОповещения("УдалитьТоварПоРезультатамКонтроля", ЭтотОбъект);
	РезультатКонтроляПродаж.ОповещениеПриУспехе = ОповещениеПриУспехе;
	РезультатКонтроляПродаж.ОповещениеПриОтказе = ОповещениеПриОтказе;
	ОбработатьРезультатКонтроляПродаж();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОбработкуРезультатаКонтроляПродажПриСерверномДобавлении(ДобавлениеПодбором = Ложь)
	
	РезультатКонтроляПродаж.НуженПересчет = Истина;
	РезультатКонтроляПродаж.ДобавлениеПодбором = ДобавлениеПодбором;
	ЗапуститьОбработкуРезультатаКонтроляПродажПриДобавлении();
	
КонецПроцедуры

#КонецОбласти

#Область УчетНаличных

&НаКлиенте
Процедура СкорректироватьНаличныеДенежныеСредстваВКассеККМКлиент(Отказ, Организация, КассаККМ, Знач Сумма, ЭтоВнесениеВыемка = Ложь)
	
	Если ИспользоватьОплатуНаличными Тогда
		
		//Для случаев полной оплаты наличными сразу нескольких чеков
		//выполняем контроль наличных по всем наличным в кассе для первого чека
		ПервыйЧекОплатыНаличными = ОплатаБезДеленияПоЧекам И ПробитыеЧеки.Количество() = 0;
		
		Если НЕ ЭтоВнесениеВыемка Тогда
			ЭтоВозврат = ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(Объект.ВидОперации);
			Если ЭтоВозврат И НЕ ЭтоЗаменаТоваров Тогда
				Сумма = - Сумма;
				Сдача = - Сдача;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("Организация, КассаККМ", Организация, КассаККМ);
		СтрокиКассККМ = ТаблицаКассККМОрганизаций.НайтиСтроки(СтруктураОтбора);
		Если ЗначениеЗаполнено(СтрокиКассККМ) Тогда
			
			СтрокаКассыККМ = СтрокиКассККМ[0];
			
			НеобходимКонтрольВыемки = ОбщегоНазначенияРМККлиент.НеобходимДополнительныйКонтрольВыемки() И ЭтоВнесениеВыемка;
			
			Если (КонтролироватьОстатокНаличных ИЛИ НеобходимКонтрольВыемки) И (Сумма < 0 ИЛИ Сдача > 0) Тогда
				
				Отказ = Ложь;
				
				ПараметрыОшибки = Новый Структура;
				ПараметрыОшибки.Вставить("ЭтоПредупреждение", Истина);
				ТекстЗаголовка = НСтр("ru = 'При выполнении операции возникла ошибка'");
				
				НаличныеВКассе = СтрокаКассыККМ.ДенежныеСредстваВКассеККМ;
				
				Если ПервыйЧекОплатыНаличными Тогда
					НаличныеВКассе = ТаблицаКассККМОрганизаций.Итог("ДенежныеСредстваВКассеККМ");
				КонецЕсли;
				
				Если Сдача > НаличныеВКассе Тогда
					Отказ = Истина;
					Если ПравоПросмотраОстаткаНаличныхРМК Тогда
						ТекстСообщения = СтрШаблон(НСтр("ru = 'Для выдачи сдачи в кассе не хватает средств: %1 %2'"), Сдача - НаличныеВКассе, ПредставлениеВалюты);
					Иначе
						ТекстСообщения = НСтр("ru = 'Для выдачи сдачи в кассе не хватает средств.'");
					КонецЕсли;
				КонецЕсли;
				Если -Сумма > НаличныеВКассе Тогда
					Отказ = Истина;
					Если ПравоПросмотраОстаткаНаличныхРМК Тогда
						ТекстСообщения = СтрШаблон(НСтр("ru = 'В кассе не хватает средств: %1 %2'"), -Сумма - НаличныеВКассе, ПредставлениеВалюты);
					Иначе
						ТекстСообщения = НСтр("ru = 'В кассе не хватает средств.'");
					КонецЕсли;
				КонецЕсли;
				
				Если Отказ Тогда
					
					Если ЭтоВнесениеВыемка Тогда
						ВосстановитьЭлементыПослеВнесенияИлиВыемки();
					КонецЕсли;
					
					ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстСообщения, ПараметрыОшибки);
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаКассыККМ.ДенежныеСредстваВКассеККМ = СтрокаКассыККМ.ДенежныеСредстваВКассеККМ + Сумма - Сдача;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьОстаткиНаличныхДенежныхСредствНаФорме(Организация, КассаККМ, Ошибка = Ложь)
	
	Если ИспользоватьОплатуНаличными Тогда
		
		ДенежныеСредстваВКассе = 0;
		МинимальныйОстатокНаличных = 0;
		
		СтруктураОтбора = Новый Структура("Организация, КассаККМ", Организация, КассаККМ);
		СтрокиКассККМ = ТаблицаКассККМОрганизаций.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаКассККМ Из СтрокиКассККМ Цикл
			Если Ошибка Тогда
				СтрокаКассККМ.ДенежныеСредстваВКассеККМ = СтрокаКассККМ.ДенежныеСредстваВКассеККМНаНачало;
			Иначе
				//Для случаев полной оплаты наличными сразу нескольких чеков
				//по первому чеку корректируем наличные в кассе ккм из пробитого чека
				Если ОплатаБезДеленияПоЧекам И ПробитыеЧеки.Количество() = 1 Тогда
					СтруктураОтбора = Новый Структура("ЧекККМ", ЧекККМВОбработке);
					СуммыПробитогоЧека = ПробитыеЧеки.НайтиСтроки(СтруктураОтбора);
					Если ЗначениеЗаполнено(СуммыПробитогоЧека) Тогда
						СтрокаПробитогоЧека = СуммыПробитогоЧека[0];
						СтрокаКассККМ.ДенежныеСредстваВКассеККМ = СтрокаКассККМ.ДенежныеСредстваВКассеККМНаНачало + СтрокаПробитогоЧека.ПринятоНаличными - СтрокаПробитогоЧека.Сдача;
					КонецЕсли;
				КонецЕсли;
				
				СтрокаКассККМ.ДенежныеСредстваВКассеККМНаНачало = СтрокаКассККМ.ДенежныеСредстваВКассеККМ;
			КонецЕсли;
			
			ДенежныеСредстваВКассе = ДенежныеСредстваВКассе + СтрокаКассККМ.ДенежныеСредстваВКассеККМ;
			МинимальныйОстатокНаличных = МинимальныйОстатокНаличных + СтрокаКассККМ.МинимальныйОстатокНаличныхВКассе;
		КонецЦикла;
		
		ДенежныеСредстваВсего = ТаблицаКассККМОрганизаций.Итог("ДенежныеСредстваВКассеККМ");
		
		ТекстПодсказки = СтрШаблон(НСтр("ru='Наличные в кассе: %1 %2'"), ДенежныеСредстваВКассе, ПредставлениеВалюты);
		Элементы.ДекорацияПодсказкаНаличныеВКассеОплатаНаличными.Заголовок = ТекстПодсказки;
		
		Если ПравоПросмотраОстаткаНаличныхРМК Тогда
			
			Элементы.ДекорацияПодсказкаНаличныеВКассеДенежныйЯщик.Заголовок = ТекстПодсказки;
			Элементы.ДекорацияПодсказкаНаличныеВКассеДенежныйЯщик.Видимость = Истина;
			
			Если МинимальныйОстатокНаличных > 0 Тогда
				ТекстПодсказки = ТекстПодсказки + Символы.ПС + СтрШаблон(НСтр("ru='Минимальный остаток: %1 %2'"), МинимальныйОстатокНаличных, ПредставлениеВалюты);
			КонецЕсли;
			Если ТаблицаКассККМОрганизаций.Количество() > 1 Тогда
				ТекстПодсказки = ТекстПодсказки + Символы.ПС + СтрШаблон(НСтр("ru='Наличные всего: %1 %2'"), ДенежныеСредстваВсего, ПредставлениеВалюты);
			КонецЕсли;
			
			Элементы.СуммаВыемка.Подсказка = ТекстПодсказки;
			Элементы.СуммаВнесение.Подсказка = ТекстПодсказки;
			
			ТекстЗаголовка = СтрШаблон(НСтр("ru='Денежный ящик: %1 %2'"), ДенежныеСредстваВсего, ПредставлениеВалюты);
			Элементы.ОткрытьДенежныйЯщик.Заголовок = ТекстЗаголовка;
			
			ДенежныйЯщикУвеличенныйМасштаб = СписокКомандЕще.НайтиПоЗначению("ОткрытьДенежныйЯщик");
			Если НЕ ДенежныйЯщикУвеличенныйМасштаб = Неопределено Тогда
				ДенежныйЯщикУвеличенныйМасштаб.Представление = ТекстЗаголовка;
			КонецЕсли;
			
		Иначе
			
			ПустаяСтрока = НСтр("ru=''");
			
			Элементы.ДекорацияПодсказкаНаличныеВКассеДенежныйЯщик.Заголовок = ПустаяСтрока;
			Элементы.ДекорацияПодсказкаНаличныеВКассеДенежныйЯщик.Видимость = Ложь;
			
			ТекстПодсказки = ПустаяСтрока;
			Если МинимальныйОстатокНаличных > 0 Тогда
				ТекстПодсказки = СтрШаблон(НСтр("ru='Минимальный остаток: %1 %2'"), МинимальныйОстатокНаличных, ПредставлениеВалюты);
			КонецЕсли;
			Элементы.СуммаВыемка.Подсказка = ТекстПодсказки;
			Элементы.СуммаВнесение.Подсказка = ТекстПодсказки;
			
			ЗаголовокДенежныйЯщик = НСтр("ru='Открыть денежный ящик'");
			Элементы.ОткрытьДенежныйЯщик.Заголовок = ЗаголовокДенежныйЯщик;
			
			ДенежныйЯщикУвеличенныйМасштаб = СписокКомандЕще.НайтиПоЗначению("ОткрытьДенежныйЯщик");
			Если НЕ ДенежныйЯщикУвеличенныйМасштаб = Неопределено Тогда
				ДенежныйЯщикУвеличенныйМасштаб.Представление = ЗаголовокДенежныйЯщик;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтразитьИзменениеНаличныхДенежныхСредствКлиентСервер(Организация, КассаККМ, ТаблицаКассККМ)
	
	СтруктураОтбора = Новый Структура("Организация, КассаККМ", Организация, КассаККМ);
	СтрокиКассККМ = ТаблицаКассККМ.НайтиСтроки(СтруктураОтбора);
	Если ЗначениеЗаполнено(СтрокиКассККМ) Тогда
		СтрокаКассыККМ = СтрокиКассККМ[0];
		ОтразитьИзменениеНаличныхДенежныхСредствСервер(Организация, КассаККМ, СтрокаКассыККМ.ДенежныеСредстваВКассеККМ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтразитьИзменениеНаличныхДенежныхСредствСервер(Организация, КассаККМ, Сумма)
	
	ОбщегоНазначенияРМКПереопределяемый.ОтразитьИзменениеНаличныхДенежныхСредств(Организация, КассаККМ, Сумма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗафиксироватьНаличныеДенежныеСредстваСмены(СписокСмен)
	
	ОбщегоНазначенияРМКПереопределяемый.ЗафиксироватьНаличныеДенежныеСредстваСмены(СписокСмен);
	
КонецПроцедуры

#КонецОбласти

#Область ВидыКартЛояльности
&НаКлиенте
Процедура ЗаполнитьВидКарты(Штрихкод, Результат)
	ДлинаКода = СтрДлина(Штрихкод);
	ИдентификаторВидаКарты = НСтр("ru = ''");
	СтрокиТаблицы = ТаблицаВидыКарт.НайтиСтроки(Новый Структура("ДлинаДиапазона", ДлинаКода));
	Для Каждого СтрокаМассив Из СтрокиТаблицы Цикл
		Если СтрокаМассив.НачалоДиапазона <= Штрихкод
			И СтрокаМассив.КонецДиапазона >= Штрихкод Тогда
				ИдентификаторВидаКарты = СтрокаМассив.Идентификатор;
		КонецЕсли;
	КонецЦикла;
	Если Не ПустаяСтрока(ИдентификаторВидаКарты) Тогда
		НоваяКартаВидКарты = ИдентификаторВидаКарты;
		ЗаполнитьНастройкиВидаКарты();
		Результат = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНастройкиВидаКарты()
	Если НоваяКартаВидКарты <> "" Тогда
		ДанныеВидаКарты = ДанныеВидаКарты(НоваяКартаВидКарты);
		ПроверкаЗаполненностиНомера = (ДанныеВидаКарты.ГенерироватьНомер ИЛИ ДанныеВидаКарты.ПрисваиватьНомерКартыКНомеруТелефона)
			И ДанныеВидаКарты.ЭтоИменнаяКарта;
		Элементы.НоваяКартаФИО.АвтоОтметкаНезаполненного = ДанныеВидаКарты.ЭтоИменнаяКарта;
		Элементы.НоваяКартаТелефон.АвтоОтметкаНезаполненного = ДанныеВидаКарты.ЭтоИменнаяКарта ИЛИ ОтправлятьSMSКодПриЗаведенииКарты;
		Элементы.НоваяКартаНомер.АвтоОтметкаНезаполненного = НЕ ПроверкаЗаполненностиНомера;
		УстановитьДоступностьЭлементаФормы(Элементы.НоваяКартаНомер, Истина);
		Если НЕ ДанныеВидаКарты.ЭтоИменнаяКарта Тогда
			Элементы.НоваяКартаФИО.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		Если НЕ (ДанныеВидаКарты.ЭтоИменнаяКарта ИЛИ ОтправлятьSMSКодПриЗаведенииКарты) Тогда
			Элементы.НоваяКартаТелефон.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
		Если ПроверкаЗаполненностиНомера Тогда
			Элементы.НоваяКартаНомер.ОтметкаНезаполненного = Ложь;
			Если ДанныеВидаКарты.ПрисваиватьНомерКартыКНомеруТелефона Тогда
				Элементы.НоваяКартаНомер.ПодсказкаВвода = НСтр("ru = 'Номер телефона'");
				УстановитьДоступностьЭлементаФормы(Элементы.НоваяКартаНомер, Ложь);
			Иначе
				Если ПустаяСтрока(ДанныеВидаКарты.ПредставлениеШаблона) Тогда
					Элементы.НоваяКартаНомер.ПодсказкаВвода = НСтр("ru = 'Сгенерированный номер'");
				Иначе
					Элементы.НоваяКартаНомер.ПодсказкаВвода = ДанныеВидаКарты.ПредставлениеШаблона;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Элементы.НоваяКартаНомер.ПодсказкаВвода = НСтр("ru = 'Номер карты'");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуВидовКарт()
	
	ТаблицаВидыКарт.Очистить();
	Элементы.НоваяКартаВидКарты.СписокВыбора.Очистить();
	
	Если Не РежимКассыСамообслуживания Тогда
		Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
			ПараметрыПодключения = ОбщегоНазначенияРМК.ЗначенияПараметровСервераЛояльности(ТекущаяНастройкаРМК);
			ЗначениеПараметровВидовКарт = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыМетодаЗаполненияВидовКарт();
			ЗаполнитьПараметрыВидовКарт(ЗначениеПараметровВидовКарт);
			ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаПолучитьВидыКарт(ПараметрыПодключения,ЗначениеПараметровВидовКарт);
			СтруктураРезультат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
			
			Если СтруктураРезультат.Свойство("ЕстьОшибки") И НЕ СтруктураРезультат.ЕстьОшибки Тогда
				СтрокаJSON = СтруктураРезультат.ДанныеОтвета;
				ДанныеОтвета = Неопределено;
				Если СтрокаJSON <> Неопределено Тогда
					СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
					Если ДанныеОтвета <> Неопределено И ТипЗнч(ДанныеОтвета) = Тип("Массив") Тогда
						Для каждого СтрокаМассива Из ДанныеОтвета Цикл
							ВидКарты = ТаблицаВидыКарт.Добавить();
							
							Если СтрокаМассива.Свойство("CardTypeID") Тогда
								ВидКарты.Идентификатор = СтрокаМассива.CardTypeID;
								ВидКарты.Наименование = СтрокаМассива.CardTypeDescription;
								ВидКарты.ЭтоИменнаяКарта = СтрокаМассива.IsPerson;
								Если СтрокаМассива.Свойство("GenerateNumer") Тогда
									ВидКарты.ГенерироватьНомер = СтрокаМассива.GenerateNumer;
								КонецЕсли;
								Если СтрокаМассива.Свойство("NumberToPhone") Тогда
									ВидКарты.ПрисваиватьНомерКартыКНомеруТелефона = СтрокаМассива.NumberToPhone;
								КонецЕсли;
								Если СтрокаМассива.Свойство("TemplateRepresentation") Тогда
									ВидКарты.ПредставлениеШаблона = СтрокаМассива.TemplateRepresentation;
								КонецЕсли;
								Если СтрокаМассива.Свойство("LengthRange") Тогда
									ВидКарты.НачалоДиапазона = СтрокаМассива.BeginRange;
									ВидКарты.КонецДиапазона = СтрокаМассива.EndRange;
									ВидКарты.ДлинаДиапазона = СтрокаМассива.LengthRange;
								КонецЕсли;
							Иначе
								ЗаполнитьЗначенияСвойств(ВидКарты, СтрокаМассива);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ПараметрыВидовКарт = Новый Структура();
			ЗаполнитьПараметрыВидовКартЛокально(ПараметрыВидовКарт);
			СерверЛояльностиПолучательДанныхКлиентСерверПереопределяемый.ЗаполнитьТаблицуВидовКарт(ТаблицаВидыКарт, ПараметрыВидовКарт);
		КонецЕсли;
	КонецЕсли;
	
	ОбработатьРезультатПолученияВидовКарт(ТаблицаВидыКарт);
КонецПроцедуры

&НаКлиенте
Процедура НоваяКартаВидКартыПриИзменении(Элемент)
	ЗаполнитьНастройкиВидаКарты();
КонецПроцедуры

&НаКлиенте
Функция ДанныеВидаКарты(ИдентификаторВидаКарты) Экспорт
	ДанныеВидаКарты = Новый Структура("Идентификатор, Наименование, ЭтоИменнаяКарта, ГенерироватьНомер, ПрисваиватьНомерКартыКНомеруТелефона, ПредставлениеШаблона",,, Истина, Ложь, Ложь, "");
	ПараметрыПоиска = Новый Структура("Идентификатор", ИдентификаторВидаКарты);
	НайденныеВиды = ТаблицаВидыКарт.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеВиды.Количество() <> 0 Тогда
		ЗаполнитьЗначенияСвойств(ДанныеВидаКарты, НайденныеВиды[0]);
	КонецЕсли;
	
	Возврат ДанныеВидаКарты;
КонецФункции // ДанныеВидаКарты()

&НаКлиенте
Процедура НоваяКартаНомерПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(НоваяКартаВидКарты) Тогда
		ВидКартыЗаполнен = Ложь;
		ЗаполнитьВидКарты(НоваяКартаНомер, ВидКартыЗаполнен);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСозданиеКарты()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПустая Тогда
		ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	КонецЕсли;
	
	ВвестиДанныеПокупателяКлиент();
	РежимПанелиДанныеПокупателя = 1;
	ОбработатьИзменениеРежимаПанелиДанныхПокупателя();
КонецПроцедуры
#КонецОбласти

#Область ЗаполнениеХарактеристики

&НаСервере
Процедура ЗаполнитьДанныеПлиткиВыбора(ТекущаяСтрока)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура);
	СтруктураПараметров.Вставить("Характеристика", ТекущаяСтрока.Характеристика);
	СтруктураПараметров.Вставить("ВидЦены", РозничныйВидЦены);
	СтруктураПараметров.Вставить("ТорговыйОбъект", Объект.ТорговыйОбъект);
	
	ОбщегоНазначенияРМК.ЗаполнитьДанныеПлиткиВыбораЗначений(СтруктураПараметров, ДанныеПлиткиПодбораЗначений);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЭлементыПодбораЗначений()
	ИнтерфейсРМКСлужебный.СформироватьЭлементыПодбораЗначений(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьПлиткуВыбораЗначенийПоТаблице()
	
	ИнтерфейсРМКСлужебныйКлиент.ПостроитьПлиткуВыбораЗначений(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗначениеВыбор(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИмяЭлементаНажатие = Элемент.Имя;
	МассивЭлементов = ДанныеКомандВыбораЗначений.НайтиСтроки(Новый Структура("ИмяКоманды", ИмяЭлементаНажатие));
	
	Если МассивЭлементов.Количество() > 0 Тогда
		ДополнительныеПараметры = Новый Структура("ЗначениеВыбора, Цена", МассивЭлементов[0].Значение, МассивЭлементов[0].Цена);
		Если Не ПустаяСтрока(МассивЭлементов[0].ИмяДействия) Тогда
			ОтложенноеОповещение = Новый ОписаниеОповещения(МассивЭлементов[0].ИмяДействия, ЭтаФорма, ДополнительныеПараметры);
			ВыполнитьОбработкуОповещения(ОтложенноеОповещение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеВыборХарактеристики(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрока.Характеристика = ДополнительныеПараметры.ЗначениеВыбора;
	ЦенаНовая = ДополнительныеПараметры.Цена;
	Если ЦенаНовая > 0
		И ЦенаНовая <> ТекущаяСтрока.Цена Тогда
		ТекущийТоварЦенаИзКарточки = ЦенаНовая;
		ЦенаИзКарточкиПриИзмененииЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
	ТекстЗаголовкаХарактеристики = "";
	Если ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
		ПредставлениеХарактеристики = "";
		ПредставлениеХарактеристики = " (" + Строка(ТекущаяСтрока.Характеристика) + ")";
	Иначе
		ПредставлениеХарактеристики = НСтр("ru = '(Характеристика не выбрана)'");
	КонецЕсли;
	ПредставлениеТовара = СтрШаблон("%1%2", ТекущаяСтрока.Номенклатура, ПредставлениеХарактеристики);
	ТекущаяСтрока.ПредставлениеНоменклатураХарактеристика = ПредставлениеТовара;
	НастроитьПредставлениеТовара(ТекущаяСтрока);
	
	СброситьПараметрыВыбораХарактеристики();
	НастроитьКомандуУказатьСерии(ТекущаяСтрока);
	ЕстьНезаполненныеДанные();
КонецПроцедуры

&НаКлиенте
Процедура СброситьПараметрыВыбораХарактеристики()
	РежимВыбораХарактеристики = Ложь;
	УстановитьВидимостьЭлементаФормы(Элементы.ПлиткаПанельПодбораЗначений, Ложь);
	Элементы.СтраницыПанелиИзбранноеПодбор.ТекущаяСтраница = Элементы.СтраницаИзбранныхТоваров;
	УстановитьДоступностьЭлементовРедактированияЧекаПриВыборе(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеХарактеристики(Результат, ДополнительныеПараметры) Экспорт
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаДополнительныйСписокТоваров);
	НастроитьВидимостьЭлементовГруппыПоискаТовара(Истина, Ложь, Истина);
	ЗаголовокСтраницы = НСтр("ru = 'Выберите характеристику для %1'");
	ЗаголовокСтраницы = СтрШаблон(ЗаголовокСтраницы, ТекущаяСтрока.Номенклатура);
	ИзменитьСостояниеЗаголовкаСтраницыПоискаТовара(ЗаголовокСтраницы, Истина);
	ОткрытьКаталогКлиент();
	ЗаполнитьДанныеТаблицыДляВыбораНоменклатурыПоЗначению(ТекущаяСтрока.Номенклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовРедактированияЧекаПриВыборе(ЗначениеДоступности)
	
	УстановитьДоступностьЭлементаФормы(Элементы.ПлиткаГруппаИнфо, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаИнфо, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.ПанельТаблицыТоваров, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаОперации, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.СменитьКассира, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаУправленияЧекомВер, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаУправленияЧекомГор, ЗначениеДоступности);
	УстановитьДоступностьЭлементаФормы(Элементы.ГруппаСтраницаОперации, ЗначениеДоступности);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборХарактеристики(ТекущаяСтрока = Неопределено)
	Если ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТекущийТоварИдентификатор);
	КонецЕсли;
	
	Если ТекущаяСтрока = Неопределено
		Или РежимВыбораХарактеристики Тогда
		Возврат;
	КонецЕсли;
	
	РежимВыбораХарактеристики = Истина;
	СтруктураСтроки = Новый Структура("Номенклатура, Характеристика", ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика);
	ЗаполнитьДанныеПлиткиВыбора(СтруктураСтроки);
	Если ДанныеПлиткиПодбораЗначений.Количество() > 0 Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ПлиткаПанельПодбораЗначений, Истина);
		Элементы.СтраницыПанелиИзбранноеПодбор.ТекущаяСтраница = Элементы.СтраницаПанельПодбора;
		УстановитьДоступностьЭлементовРедактированияЧекаПриВыборе(Ложь);
		ПостроитьПлиткуВыбораЗначенийПоТаблице();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеТаблицыДляВыбораНоменклатурыПоЗначению(ЗначениеОтбора)
	
	Если РежимВыбораХарактеристики Тогда
		ЭлементОтбора = СписокТоваров.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ЗначениеОтбора;
		
		// Проверка, на случай, если в конфигурации отключено использование характеристик в настройках
		ДоступноеПолеОтбора = СписокТоваров.Отбор.ДоступныеПоляОтбора.Элементы.Найти("Характеристика");
		Если ДоступноеПолеОтбора <> Неопределено Тогда
			ЭлементОтбора = СписокТоваров.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Характеристика");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначенияХарактеристики(Команда)
	
	ВыборХарактеристики();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРежимВыбораХарактеристики(СтруктураСтроки)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрока.Характеристика = СтруктураСтроки.Характеристика;
	ЦенаНовая = СтруктураСтроки.Цена;
	Если ЦенаНовая > 0
		И ЦенаНовая <> ТекущаяСтрока.Цена Тогда
		ТекущийТоварЦенаИзКарточки = ЦенаНовая;
		ЦенаИзКарточкиПриИзмененииЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
	ТекстЗаголовкаХарактеристики = "";
	Если ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
		ПредставлениеХарактеристики = "";
		ПредставлениеХарактеристики = " (" + Строка(ТекущаяСтрока.Характеристика) + ")";
	Иначе
		ПредставлениеХарактеристики = НСтр("ru = '(Характеристика не выбрана)'");
	КонецЕсли;
	ПредставлениеТовара = СтрШаблон("%1%2", ТекущаяСтрока.Номенклатура, ПредставлениеХарактеристики);
	ТекущаяСтрока.ПредставлениеНоменклатураХарактеристика = ПредставлениеТовара;
	НастроитьПредставлениеТовара(ТекущаяСтрока);
	
	СброситьПараметрыВыбораХарактеристики();
	ВводТовараПоСтроке = Неопределено;
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьГруппыОперации(Элементы);
	ОбщегоНазначенияРМККлиентСервер.УстановитьТекущуюСтраницу(Элементы.СтраницаОбщая);
	СписокТоваров.Отбор.Элементы.Очистить();
	ВосстановитьОтображениеКаталогаПоНастройкам();
	ИзменитьСостояниеЗаголовкаСтраницыПоискаТовара(, Истина);

	НастроитьВидимостьЭлементовГруппыПоискаТовара();
	ЗакрытьПоискТоваровКлиент();
	НастроитьКомандуУказатьСерии(ТекущаяСтрока);
	СброситьПараметрыВыбораХарактеристики();
	ЕстьНезаполненныеДанные();
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКаринкуУказатьХарактеристику(ТекущаяСтрока)
	Если ТекущаяСтрока.ПроверятьЗаполнениеХарактеристики И Не ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
		Элементы.УказатьХарактеристику.Картинка = БиблиотекаКартинок.ХарактеристикаНеУказанаРМК;
	ИначеЕсли ТекущаяСтрока.ПроверятьЗаполнениеХарактеристики И ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
		Элементы.УказатьХарактеристику.Картинка = БиблиотекаКартинок.ХарактеристикаУказанаРМК;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область НастройкиКаталога

&НаСервере
Процедура СоздатьЭлементыНастроекКаталога()
	
	Если НеИспользоватьНастройкиКаталога Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаНастройкиКаталога, Ложь);
		Возврат;
	КонецЕсли;
	
	НастройкаКаталогаИменаПолей.Очистить();
	КолонкиСписка = Элементы.СписокТоваров.ПодчиненныеЭлементы;
	Для Каждого КолонкаСписка Из КолонкиСписка Цикл
		Если Не КолонкаСписка.Видимость Тогда
			Продолжить;
		КонецЕсли;
		Если КолонкаСписка.Вид = ВидГруппыФормы.ГруппаКолонок Тогда
			Для Каждого КолонкаГруппы Из КолонкаСписка.ПодчиненныеЭлементы Цикл
				Если КолонкаГруппы.Видимость И ЗначениеЗаполнено(КолонкаГруппы.ПутьКДанным) Тогда
					ИмяКолонки = СтрЗаменить(КолонкаГруппы.ПутьКДанным, "СписокТоваров.", "");
					НастройкаКаталогаИменаПолей.Добавить(ИмяКолонки);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если ЗначениеЗаполнено(КолонкаСписка.ПутьКДанным) Тогда
				ИмяКолонки = СтрЗаменить(КолонкаСписка.ПутьКДанным, "СписокТоваров.", "");
				НастройкаКаталогаИменаПолей.Добавить(ИмяКолонки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ИмяРодительскойГруппы = "ГруппаНастройкиКаталогаПоляПоиска";
	ЭлементГруппаПолей = Элементы[ИмяРодительскойГруппы];
	Для Каждого ИмяПоляКаталога Из НастройкаКаталогаИменаПолей Цикл
		
		ИмяКолонки = ИмяПоляКаталога.Значение;
		ИмяГруппыПоля = "ГруппаПоля_" + ИмяКолонки;
		ГруппаПоляПоиска = Элементы.Добавить(ИмяГруппыПоля, Тип("ГруппаФормы"), ЭлементГруппаПолей);
		ГруппаПоляПоиска.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаПоляПоиска.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаПоляПоиска.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
		ГруппаПоляПоиска.ОтображатьЗаголовок = Ложь;
		ГруппаПоляПоиска.Отображение = ОтображениеОбычнойГруппы.Нет;
		
		ИмяКоманды = "ВидимостьПоляКаталога_" + ИмяКолонки;
		НоваяКоманда = Команды.Добавить(ИмяКоманды);
		НоваяКоманда.Действие = "КомандаВидимостьПоляКаталога";
		НоваяКоманда.Заголовок = ИмяКолонки;
		
		КнопкаПолеПоискаКаталога = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаПоляПоиска);
		КнопкаПолеПоискаКаталога.ИмяКоманды = ИмяКоманды;
		КнопкаПолеПоискаКаталога.РастягиватьПоГоризонтали = Истина;
		КнопкаПолеПоискаКаталога.Высота = 2;
		КнопкаПолеПоискаКаталога.Картинка = БиблиотекаКартинок.ПоказатьПароль;
		КнопкаПолеПоискаКаталога.Отображение = ОтображениеКнопки.КартинкаИТекст;
		КнопкаПолеПоискаКаталога.ПоложениеКартинки = ПоложениеКартинкиКнопкиФормы.Лево;
		
		ИмяКоманды = "ПолеПоискаКаталога_" + ИмяКолонки;
		НоваяКоманда = Команды.Добавить(ИмяКоманды);
		НоваяКоманда.Действие = "КомандаПолеПоискаКаталога";
		НоваяКоманда.Заголовок = ИмяКолонки;
		
		КнопкаПолеПоискаКаталога = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаПоляПоиска);
		КнопкаПолеПоискаКаталога.ИмяКоманды = ИмяКоманды;
		КнопкаПолеПоискаКаталога.Высота = 2;
		КнопкаПолеПоискаКаталога.Ширина = 5;
		КнопкаПолеПоискаКаталога.Картинка = БиблиотекаКартинок.Найти;
		КнопкаПолеПоискаКаталога.Отображение = ОтображениеКнопки.Картинка;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПоляКаталогаПриОткрытии()
	
	ИменаПолейСкрытияВидимости = Новый Массив;
	ИменаПолейИсключенияПоиска = Новый Массив;
	Для Каждого СтрокаПоля Из НастройкаКаталогаНастройкиПолей Цикл
		Если Не СтрокаПоля.Видимость Тогда
			ИменаПолейСкрытияВидимости.Добавить(СтрокаПоля.ИмяПоля);
		КонецЕсли;
		Если Не СтрокаПоля.ИспользоватьПоискПоСтроке Или Не СтрокаПоля.Видимость Тогда
			ИменаПолейИсключенияПоиска.Добавить(СтрокаПоля.ИмяПоля);
		КонецЕсли;
	КонецЦикла;
	
	Если ИменаПолейСкрытияВидимости.Количество() > 0 Тогда
		НастроитьВидимостьПолейКаталога(ИменаПолейСкрытияВидимости, Ложь);
	КонецЕсли;
	
	Если ИменаПолейИсключенияПоиска.Количество() > 0 Тогда
		НастроитьИспользованиеПоискаПолейКаталога(ИменаПолейИсключенияПоиска, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьПолейКаталога(ИменаПолей, Видимость)
	
	Для Каждого ИмяПоля Из ИменаПолей Цикл
		Элементы["ВидимостьПоляКаталога_" + ИмяПоля].Картинка = ?(Видимость,
			БиблиотекаКартинок.ПоказатьПароль, БиблиотекаКартинок.СкрытьПароль);
		Элементы["СписокТоваров" + ИмяПоля].Видимость = Видимость;
		Элементы["ПолеПоискаКаталога_" + ИмяПоля].Доступность = Видимость;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьИспользованиеПоискаПолейКаталога(ИменаПолей, ИспользоватьПоиск)
	
	Для Каждого ИмяПоля Из ИменаПолей Цикл
		ОграничениеПоиска = Не ИспользоватьПоиск;
		Элементы["ПолеПоискаКаталога_" + ИмяПоля].Картинка = ?(ОграничениеПоиска,
			БиблиотекаКартинок.ОтменитьПоиск, БиблиотекаКартинок.Найти);
		ПолеСписка = СписокТоваров.Поля.Найти(ИмяПоля);
		Если Не ПолеСписка = Неопределено Тогда
			ПолеСписка.ОграничениеИспользования.Условие = ОграничениеПоиска;
			ПолеСписка.ОграничениеИспользованияРеквизитов.Условие = ОграничениеПоиска;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьТаблицуНастроекПолейКатолога()
	
	СтрокиДляУдаления = Новый Массив;
	ПорядковыйНомер = 0;
	
	Для Каждого ИмяПоляКаталога Из НастройкаКаталогаИменаПолей Цикл
		
		ПорядковыйНомер = ПорядковыйНомер + 1;
		ИмяКолонки = ИмяПоляКаталога.Значение;
		Отбор = Новый Структура("ИмяПоля", ИмяКолонки);
		СтрокиПолей = НастройкаКаталогаНастройкиПолей.НайтиСтроки(Отбор);
		
		Если СтрокиПолей.Количество() = 0 Тогда
			СтрокаПоля = НастройкаКаталогаНастройкиПолей.Добавить();
			СтрокаПоля.ИмяПоля = ИмяКолонки;
			СтрокаПоля.ИспользоватьПоискПоСтроке = Истина;
			СтрокаПоля.Видимость = ?(ИмяКолонки = "SKU", Ложь, Истина);
			СтрокаПоля.Порядок = ПорядковыйНомер;
		Иначе
			СтрокаПоляСопоставлена = Ложь;
			Для Каждого СтрокаПоля Из СтрокиПолей Цикл
				Если СтрокаПоляСопоставлена Тогда
					СтрокиДляУдаления.Добавить(СтрокаПоля);
				Иначе
					СтрокаПоля.Порядок = ПорядковыйНомер;
					СтрокаПоляСопоставлена = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаПоля Из НастройкаКаталогаНастройкиПолей Цикл
		Если НастройкаКаталогаИменаПолей.НайтиПоЗначению(СтрокаПоля.ИмяПоля) = Неопределено Тогда
			СтрокиДляУдаления.Добавить(СтрокаПоля);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
		НастройкаКаталогаНастройкиПолей.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
	НастройкаКаталогаНастройкиПолей.Сортировать("Порядок");
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтображениеКаталогаПриОткрытии()
	
	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаИнформацияПоПозиции, Не ЗакрыватьПодборПриВыбореТовара);
	
	Если НеИспользоватьНастройкиКаталога Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкаКаталогаСкрыватьНеактуальныеСтроки Тогда
		НастроитьОтображениеНеактуальныхСтрокВКаталоге();
	КонецЕсли;
	НастроитьОтображениеКаталога();
	АктуализироватьТаблицуНастроекПолейКатолога();
	НастроитьПоляКаталогаПриОткрытии();
	НастроитьКнопкуНеСохранятьОтбор();
	НастроитьКнопкуОбъединитьПоНоменклатуре();
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьНастройкиОтбораКаталога()
	
	ИменаПолей = Новый Массив;
	Для Каждого СтрокаПоля Из НастройкаКаталогаНастройкиПолей Цикл
		Если СтрокаПоля.ИспользоватьПоискПоСтроке И СтрокаПоля.Видимость Тогда
			ИменаПолей.Добавить(СтрокаПоля.ИмяПоля);
		КонецЕсли;
	КонецЦикла;
	
	Если ИменаПолей.Количество() > 0 Тогда
		НастроитьИспользованиеПоискаПолейКаталога(ИменаПолей, Ложь);
		НастроитьИспользованиеПоискаПолейКаталога(ИменаПолей, Истина);
	КонецЕсли;
	УдалитьПользовательскиеОтборыКаталога();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтображениеКаталога()
	
	УдалитьОтборКаталогаПоОбщейСтрокеНоменклатуры();
	
	Если НастройкаКаталогаВариантОтображения = 0 Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОтоборИерархия, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОтоборКатегория, Ложь);
		НастроитьОтображениеОбъединеннойНоменклатурыВКаталоге();
		УстановитьИерархиюКаталога(Ложь);
		УстановитьОтборКаталогаПоДереву(Ложь, Ложь);
	ИначеЕсли НастройкаКаталогаВариантОтображения = 1 Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОтоборИерархия, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОтоборКатегория, Ложь);
		НастроитьОтображениеОбъединеннойНоменклатурыВКаталоге();
		УстановитьИерархиюКаталога(Истина, Ложь);
		УстановитьОтборКаталогаПоДереву(Ложь, Ложь);
	ИначеЕсли НастройкаКаталогаВариантОтображения = 2 Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОтоборИерархия, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОтоборКатегория, Ложь);
		НастроитьОтображениеОбъединеннойНоменклатурыВКаталоге();
		УстановитьИерархиюКаталога(Истина, Истина);
		УстановитьОтборКаталогаПоДереву(Ложь, Ложь);
	ИначеЕсли НастройкаКаталогаВариантОтображения = 3 Тогда
	//	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОтоборИерархия, Истина);
	//	УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОтоборКатегория, Ложь);
		НастроитьОтображениеОбъединеннойНоменклатурыВКаталоге();
		УстановитьИерархиюКаталога(Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОтоборИерархия, Истина);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОтоборКатегория, Ложь);
	//	УстановитьОтборКаталогаПоДереву(Ложь, Истина);
	ИначеЕсли НастройкаКаталогаВариантОтображения = 4 Тогда
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОтоборИерархия, Ложь);
		УстановитьВидимостьЭлементаФормы(Элементы.ГруппаОтоборКатегория, Истина);
		НастроитьОтображениеОбъединеннойНоменклатурыВКаталоге();
		УстановитьИерархиюКаталога(Ложь);
		УстановитьОтборКаталогаПоДереву(Истина, Ложь);
	КонецЕсли;
	
	МассивИменКнопок = Новый Массив;
	МассивИменКнопок.Добавить("НастройкаКаталогаБезИерархии");
	МассивИменКнопок.Добавить("НастройкаКаталогаИерархияСписок");
	МассивИменКнопок.Добавить("НастройкаКаталогаИерархияДерево");
	МассивИменКнопок.Добавить("НастройкаКаталогаИерархияГрупп");
	МассивИменКнопок.Добавить("НастройкаКаталогаИерархияКатегорий");
	
	ЦветАктивнойКнопки = ЦветаФормы.АктивнаяКнопка;
	ЦветНеАктивнойКнопки = ЦветаФормы.Авто;
	
	НомерЭлемента = 0;
	Для Каждого ИмяЭлементаКнопки Из МассивИменКнопок Цикл
		Элементы[ИмяЭлементаКнопки].ЦветФона =
			?(НомерЭлемента = НастройкаКаталогаВариантОтображения, ЦветАктивнойКнопки, ЦветНеАктивнойКнопки);
		НомерЭлемента = НомерЭлемента + 1 ;
	КонецЦикла;
	
	УстановитьДоступностьЭлементаФормы(Элементы.НастройкаКаталогаПерейтиВГруппуНоменклатуры,
		НастройкаКаталогаВариантОтображения >=3);
		
	ДоступноПереключение = (НастройкаКаталогаВариантОтображения = 0 Или НастройкаКаталогаВариантОтображения = 3
		Или НастройкаКаталогаВариантОтображения = 4);
	УстановитьДоступностьЭлементаФормы(Элементы.НастройкаКаталогаОбъединитьПоНоменклатуре, ДоступноПереключение);
	
Конецпроцедуры

&НаКлиенте
Процедура УстановитьОтборКаталогаПоОбщейСтрокеНоменклатуры(Номенклатура)
	
	ПравоеЗначение = Номенклатура;
	Сравнение = ВидСравненияКомпоновкиДанных.Равно;
	Использование = Не Номенклатура = Неопределено;
	Представление = "Иерархия по номенклатуре";
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЭтотОбъект["СписокТоваров"],
		"Номенклатура",
		ПравоеЗначение,
		Сравнение,
		Представление,
		Использование);
		
	НастроитьОтображениеОбъединеннойНоменклатурыВКаталоге(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОтборКаталогаПоОбщейСтрокеНоменклатуры(ВернутьВариантОтображения = Ложь)
	
	Если Не ОбщаяСтрокаНоменклатурыВИерархии = Неопределено Тогда
		УстановитьОтборКаталогаПоОбщейСтрокеНоменклатуры(Неопределено);
		УстановитьИерархиюКаталога(Ложь);
		Если ВернутьВариантОтображения Тогда
			НастроитьОтображениеОбъединеннойНоменклатурыВКаталоге();
			Если (ВариантОтображенияКаталогаДоВыбораОбщейСтроки = 1 Или
				ВариантОтображенияКаталогаДоВыбораОбщейСтроки = 2) Тогда
				УстановитьИерархиюКаталога(Истина, ВариантОтображенияКаталогаДоВыбораОбщейСтроки = 2);
			КонецЕсли;
			Элементы.СписокТоваров.ТекущаяСтрока = ОбщаяСтрокаНоменклатурыВИерархии;
		КонецЕсли;
		ОбщаяСтрокаНоменклатурыВИерархии = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИерархиюКаталога(ИспользоватьИерархию, РежимДерево = Ложь)
	
	Если ИспользоватьИерархию Тогда
		ЭтотОбъект.СписокТоваров.ОсновнаяТаблица = "Справочник.Номенклатура";
		ЭтотОбъект.Элементы.СписокТоваров.Отображение =
			?(РежимДерево, ОтображениеТаблицы.Дерево, ОтображениеТаблицы.ИерархическийСписок);
	Иначе
		ЭтотОбъект.СписокТоваров.ОсновнаяТаблица = "";
		ЭтотОбъект.Элементы.СписокТоваров.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтображениеОбъединеннойНоменклатурыВКаталоге(СвернутьПоНоменклатуре = Неопределено)
	
	Если СвернутьПоНоменклатуре = Неопределено Тогда
		Если НастройкаКаталогаВариантОтображения = 1 Или НастройкаКаталогаВариантОтображения = 2 Тогда
			СвернутьПоНоменклатуре = Истина;
		Иначе
			СвернутьПоНоменклатуре = НастройкаКаталогаОбъединятьПоНоменклатуре;
		КонецЕсли;
	КонецЕсли;
	
	ПравоеЗначение = 2;
	Если СвернутьПоНоменклатуре Тогда
		Сравнение = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	Иначе
		Сравнение = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	КонецЕсли;
	
	Представление = "Иерархия по видам строк";
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЭтотОбъект["СписокТоваров"],
		"ВидСтроки",
		ПравоеЗначение,
		Сравнение,
		Представление,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтображениеНеактуальныхСтрокВКаталоге()
	
	Возврат;
	
	Если Не Элементы.НастройкаКаталогаСкрытьНеактуальныеСтроки.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	ПравоеЗначение = Ложь;
	Сравнение = ВидСравненияКомпоновкиДанных.Равно;
	Представление = "СкрыватьНеактуальные";
	Использование = НастройкаКаталогаСкрыватьНеактуальныеСтроки;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЭтотОбъект["СписокТоваров"],
		"Неактуальная",
		ПравоеЗначение,
		Сравнение,
		Представление,
		Использование);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьОтображениеКаталогаПоНастройкам()
	
	Если НеИспользоватьНастройкиКаталога Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкаКаталогаСкрыватьНеактуальныеСтроки Тогда
		НастроитьОтображениеНеактуальныхСтрокВКаталоге();
	КонецЕсли;
	НастроитьОтображениеОбъединеннойНоменклатурыВКаталоге();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборКаталогаПоДереву(ПоКатегории, ПоГруппе)
	
	Если Элементы.ОтборКатегория.ТекущиеДанные = Неопределено Тогда
		ПоКатегории = Ложь;
		ПравоеЗначение = Неопределено;
	Иначе
		ПравоеЗначение = Элементы.ОтборКатегория.ТекущиеДанные.Ссылка;
	КонецЕсли;
	Сравнение = ВидСравненияКомпоновкиДанных.ВИерархии;
	
	Представление = "Отобор по категории";
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЭтотОбъект["СписокТоваров"],
		"ВидНоменклатуры",
		ПравоеЗначение,
		Сравнение,
		Представление,
		ПоКатегории);
		
	Если Элементы.ОтборГруппа.ТекущиеДанные = Неопределено Тогда
		ПоГруппе = Ложь;
		ПравоеЗначение = Неопределено;
	Иначе
		ПравоеЗначение = Элементы.ОтборГруппа.ТекущиеДанные.Ссылка;
	КонецЕсли;
	Сравнение = ВидСравненияКомпоновкиДанных.ВИерархии;
	
	Представление = "Отобор по группе";
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЭтотОбъект["СписокТоваров"],
		"Родитель",
		ПравоеЗначение,
		Сравнение,
		Представление,
		ПоГруппе);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройкиКаталога()
	Элементы.ГруппаНастройкиКаталогаВсплывающая.Скрыть();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКаталогаВключитьВидимостьВсехПолей()
	
	ИменаПолей = Новый Массив;
	ИменаПолейПоиска = Новый Массив;
	Для Каждого СтрокаПоля Из НастройкаКаталогаНастройкиПолей Цикл
		Если СтрокаПоля.ИмяПоля = "SKU" Тогда
			Продолжить;
		КонецЕсли;
		Если Не СтрокаПоля.Видимость Тогда
			СтрокаПоля.Видимость = Не СтрокаПоля.Видимость;
			ИменаПолей.Добавить(СтрокаПоля.ИмяПоля);
			Если СтрокаПоля.ИспользоватьПоискПоСтроке Тогда
				ИменаПолейПоиска.Добавить(СтрокаПоля.ИмяПоля);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ИменаПолей.Количество() > 0 Тогда
		НастроитьВидимостьПолейКаталога(ИменаПолей, Истина);
	КонецЕсли;
	
	Если ИменаПолейПоиска.Количество() > 0 Тогда
		НастроитьИспользованиеПоискаПолейКаталога(ИменаПолейПоиска, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКаталогаОтключитьВидимостьДополнительныхПолей()
	
	ИменаПолей = Новый Массив;
	ИменаПолейПоиска = Новый Массив;
	Для Каждого СтрокаПоля Из НастройкаКаталогаНастройкиПолей Цикл
		Если Не СтрокаПоля.ИмяПоля = "SKU" Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаПоля.Видимость Тогда
			СтрокаПоля.Видимость = Не СтрокаПоля.Видимость;
			ИменаПолей.Добавить(СтрокаПоля.ИмяПоля);
			Если СтрокаПоля.ИспользоватьПоискПоСтроке Тогда
				ИменаПолейПоиска.Добавить(СтрокаПоля.ИмяПоля);
			КонецЕсли;
		КонецЕсли;
		Если Не СтрокаПоля.ИспользоватьПоискПоСтроке Тогда
			СтрокаПоля.ИспользоватьПоискПоСтроке = Не СтрокаПоля.ИспользоватьПоискПоСтроке;
		КонецЕсли;
	КонецЦикла;
	
	Если ИменаПолей.Количество() > 0 Тогда
		НастроитьВидимостьПолейКаталога(ИменаПолей, Ложь);
	КонецЕсли;
	
	Если ИменаПолейПоиска.Количество() > 0 Тогда
		НастроитьИспользованиеПоискаПолейКаталога(ИменаПолейПоиска, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКаталогаВключитьВсеПоляПоиска()
	
	ИменаПолей = Новый Массив;
	Для Каждого СтрокаПоля Из НастройкаКаталогаНастройкиПолей Цикл
		Если Не СтрокаПоля.ИспользоватьПоискПоСтроке И СтрокаПоля.Видимость Тогда
			СтрокаПоля.ИспользоватьПоискПоСтроке = Не СтрокаПоля.ИспользоватьПоискПоСтроке;
			ИменаПолей.Добавить(СтрокаПоля.ИмяПоля);
		КонецЕсли;
	КонецЦикла;
	
	Если ИменаПолей.Количество() > 0 Тогда
		НастроитьИспользованиеПоискаПолейКаталога(ИменаПолей, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборГруппаПриАктивизацииСтроки(Элемент)
	УстановитьОтборКаталогаПоДереву(Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтборКатегорияПриАктивизацииСтроки(Элемент)
	УстановитьОтборКаталогаПоДереву(Истина, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура СписокТоваровПриАктивизацииСтроки(Элемент)
	
	ОбновитьНадписьПоПозицииВКаталоге();
	
	Если НеИспользоватьНастройкиКаталога
		Или Элементы.СписокТоваров.ТекущиеДанные = Неопределено Тогда
		НастройкаКаталогаТекущаяГруппа = Неопределено;
		НастройкаКаталогаТекущаяКатегория = Неопределено;
		Возврат;
	КонецЕсли;
	
	НастройкаКаталогаТекущаяГруппа = Элементы.СписокТоваров.ТекущиеДанные.Родитель;
	НастройкаКаталогаТекущаяКатегория = Элементы.СписокТоваров.ТекущиеДанные.ВидНоменклатуры;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПользовательскиеОтборыКаталога()
	
	ЭлементыПользовательскихНастроек = СписокТоваров.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	Для Каждого СтрокаНастройки Из ЭлементыПользовательскихНастроек Цикл
		Если ТипЗнч(СтрокаНастройки) = Тип("ОтборКомпоновкиДанных") Тогда
			СтрокаНастройки.Элементы.Очистить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьПоПозицииВКаталоге()
	
	Если Не ЗакрыватьПодборПриВыбореТовара Тогда
		
		НастройкаКаталогаИнформацияПоПозиции = "";
		
		ТекущиеДанныеСпискаТоваров = Элементы.СписокТоваров.ТекущиеДанные;
		Если ТекущиеДанныеСпискаТоваров = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ОтборПоПозиции = Новый Структура("Номенклатура, Характеристика");
		ЗаполнитьЗначенияСвойств(ОтборПоПозиции, ТекущиеДанныеСпискаТоваров);
		СтрокиПоПозиции = Объект.Товары.НайтиСтроки(ОтборПоПозиции);
		КоличествоПозиции = 0;
		СуммаПозиции = 0;
		ПредставлениеЕдиницыИзмерения = "";
		
		Если СтрокиПоПозиции.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого СтрокаТовара Из СтрокиПоПозиции Цикл
			КоличествоПозиции = КоличествоПозиции + СтрокаТовара.Количество;
			СуммаПозиции = СуммаПозиции + СтрокаТовара.Сумма;
			ПредставлениеЕдиницыИзмерения = СтрокаТовара.ПредставлениеЕдиницыИзмерения;
		КонецЦикла;
		
		ТекстИнформации = СтрШаблон(НСтр("ru = 'Количество в чеке: %1 %2,   на сумму %3 %4'"),
			КоличествоПозиции, ПредставлениеЕдиницыИзмерения, СуммаПозиции, ПредставлениеВалюты);
		
		НастройкаКаталогаИнформацияПоПозиции = ТекстИнформации;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКнопкуНеСохранятьОтбор()
	
	Элементы.НастройкаКаталогаНеСохранятьОтбор.Картинка =
		?(НастройкаКаталогаСбрасыватьОтбор,
		БиблиотекаКартинок.РМКАктивныйВыбор, БиблиотекаКартинок.РМКНеактивныйВыбор);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКнопкуОбъединитьПоНоменклатуре()
	
	Элементы.НастройкаКаталогаОбъединитьПоНоменклатуре.Картинка =
		?(НастройкаКаталогаОбъединятьПоНоменклатуре,
		БиблиотекаКартинок.РМКАктивныйВыбор, БиблиотекаКартинок.РМКНеактивныйВыбор);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКнопкуСкрытьНеактуальныеСтроки()
	
	Элементы.НастройкаКаталогаСкрытьНеактуальныеСтроки.Картинка =
		?(НастройкаКаталогаСкрыватьНеактуальныеСтроки,
		БиблиотекаКартинок.СкрытьПароль, БиблиотекаКартинок.ПоказатьПароль);
	
КонецПроцедуры

#КонецОбласти

#Область СписаниеБалловПоВладельцу
&НаКлиенте
Процедура ЗавершениеОбработкиВыбораДисконтнойКартыЛокально(Результат, ДополнительныеПараметры) Экспорт
	
		
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	РеквизитыДисконтнойКарты = Результат.РеквизитыДисконтнойКарты;
	
	Если РеквизитыДисконтнойКарты.КартаНедействительна Тогда
		ПараметрыДляОбработкиШтрихкода = Новый Структура("Штрихкод",РеквизитыДисконтнойКарты.НомерКарты);
		ОткрытьФормуИнформацииОКарте(ПараметрыДляОбработкиШтрихкода);
	Иначе
		ИнтерфейсРМКСлужебныйКлиент.ДополнитьФормуЛокальнойКартойКлиента(ЭтотОбъект, РеквизитыДисконтнойКарты);
	КонецЕсли;
	ЗаполнитьФормуПоДисконтнойКарте();
	БонуснаяПрограмма = РеквизитыДисконтнойКарты.БонуснаяПрограмма;
	СписатьБаллыПоВладельцу = РеквизитыДисконтнойКарты.СписатьБаллыПоВладельцу;
	ОбъединитьКарты = РеквизитыДисконтнойКарты.ОбъединитьКарты;
	
	ТаблицаВыбранныхКарт.Очистить();
	Если СписатьБаллыПоВладельцу
		Или ОбъединитьКарты Тогда
		КартаНачисленияДобавлена = Ложь;
		МассивВыбранныхКарт = Результат.МассивВыбранныхКарт;
		КартаНачисленияВТаблице = Ложь;
		Для Каждого СтрокаМассива Из МассивВыбранныхКарт Цикл
			НоваяСтрока = ТаблицаВыбранныхКарт.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассива);
			Если ОбъединитьКарты
				И НоваяСтрока.ИдентификаторКарты = РеквизитыДисконтнойКарты.ИдентификаторКарты Тогда
				НоваяСтрока.КартаНачисления = Истина;
				КартаНачисленияДобавлена = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ОбъединитьКарты
			И Не КартаНачисленияДобавлена Тогда
			НоваяСтрока = ТаблицаВыбранныхКарт.Добавить();
			НоваяСтрока.ДисконтнаяКарта = РеквизитыДисконтнойКарты.Карта;
			НоваяСтрока.КурсБонусов = РеквизитыДисконтнойКарты.КурсБонусов;
			НоваяСтрока.ИдентификаторКарты = РеквизитыДисконтнойКарты.ИдентификаторКарты;
			НоваяСтрока.КодКарты = РеквизитыДисконтнойКарты.НомерКарты;
			НоваяСтрока.КартаНачисления = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЗавершитьВводКартыЛояльностиПоШтрихкоду();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОбработкиВыбораДисконтнойКарты(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	РеквизитыДисконтнойКарты = Результат.РеквизитыДисконтнойКарты;
	Если РеквизитыДисконтнойКарты.КартаНедействительна Тогда
		ПараметрыДляОбработкиШтрихкода = Новый Структура("Штрихкод",РеквизитыДисконтнойКарты.НомерКарты);
		ОткрытьФормуИнформацииОКарте(ПараметрыДляОбработкиШтрихкода);
	Иначе
		ИнтерфейсРМКСлужебныйКлиент.ДополнитьФормуЛокальнойКартойКлиента(ЭтотОбъект, РеквизитыДисконтнойКарты);
		ПроцентБонуснойПрограммы = РеквизитыДисконтнойКарты.МаксимальныйПроцентОплаты;
		БонуснаяПрограмма = РеквизитыДисконтнойКарты.БонуснаяПрограмма;
	КонецЕсли;
	
	СписатьБаллыПоВладельцу = РеквизитыДисконтнойКарты.СписатьБаллыПоВладельцу;
	ОбъединитьКарты = РеквизитыДисконтнойКарты.ОбъединитьКарты;
	ТаблицаВыбранныхКарт.Очистить();
	Если СписатьБаллыПоВладельцу
		Или ОбъединитьКарты Тогда
		КартаНачисленияДобавлена = Ложь;
		МассивВыбранныхКарт = Результат.МассивВыбранныхКарт;
		КартаНачисленияВТаблице = Ложь;
		Для Каждого СтрокаМассива Из МассивВыбранныхКарт Цикл
			НоваяСтрока = ТаблицаВыбранныхКарт.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассива);
			ПолучитьОстатокБонусов(НоваяСтрока);
			Если ОбъединитьКарты
				И НоваяСтрока.ИдентификаторКарты = РеквизитыДисконтнойКарты.ИдентификаторКарты Тогда
				НоваяСтрока.КартаНачисления = Истина;
				КартаНачисленияДобавлена = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ОбъединитьКарты
			И Не КартаНачисленияДобавлена Тогда
			НоваяСтрока = ТаблицаВыбранныхКарт.Добавить();
			НоваяСтрока.ДисконтнаяКарта = РеквизитыДисконтнойКарты.Карта;
			НоваяСтрока.КурсБонусов = РеквизитыДисконтнойКарты.КурсБонусов;
			НоваяСтрока.ИдентификаторКарты = РеквизитыДисконтнойКарты.ИдентификаторКарты;
			НоваяСтрока.КодКарты = РеквизитыДисконтнойКарты.НомерКарты;
			ПолучитьОстатокБонусов(НоваяСтрока);
			НоваяСтрока.КартаНачисления = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОбработатьВыборКартыКлиентаСервераЛояльности(РеквизитыДисконтнойКарты.ДополнительныеДанные, РеквизитыДисконтнойКарты.НомерКарты, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСписанияБонусныхБаллов(ЗначенияПоиска, ВведеныйНомер)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Контрагент", Объект.Контрагент);
	СтруктураПараметров.Вставить("ПоказыватьБонусы", ИспользоватьОплатуБонусами);
	СтруктураПараметров.Вставить("СуммаДокумента", СуммаБезСкидки);
	СтруктураПараметров.Вставить("НомерВыбраннойКарты", ВведеныйНомер);
	СтруктураПараметров.Вставить("ГорячиеКлавиши", СписокКомандФормаВыбора);

	МассивДисконтныхКарт = Новый Массив;
	Для Каждого СтрокаПоиска Из ЗначенияПоиска Цикл
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("ДисконтнаяКарта",?(ЕстьСвойство(СтрокаПоиска, "Карта"), СтрокаПоиска.Карта, СтрокаПоиска.Владелец));
		СтруктураСтроки.Вставить("ОстатокБонусныхБаллов", СтрокаПоиска.Остаток);
		СтруктураСтроки.Вставить("ПродажиОборот", СтрокаПоиска.ПродажиОборот);
		СтруктураСтроки.Вставить("ДополнительныеДанные", СтрокаПоиска.ДополнительныеДанные);
		МассивДисконтныхКарт.Добавить(СтруктураСтроки);
	КонецЦикла;
	СтруктураПараметров.Вставить("МассивДисконтныхКарт", МассивДисконтныхКарт);
	
	ОписаниеОповещенияЗавершениеВыбора = Новый ОписаниеОповещения("ЗавершениеОбработкиВыбораДисконтнойКарты", ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДисконтнойКартыПоВладельцу", СтруктураПараметров, ЭтотОбъект,
				, , , ОписаниеОповещенияЗавершениеВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)
				
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСписанияБонусныхБалловЛокально(ЗначенияПоиска, ВведеныйНомер)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Контрагент", Объект.Контрагент);
	СтруктураПараметров.Вставить("ПоказыватьБонусы", ИспользоватьОплатуБонусами);
	СтруктураПараметров.Вставить("СуммаДокумента", СуммаБезСкидки);
	СтруктураПараметров.Вставить("НомерВыбраннойКарты", ВведеныйНомер);
	СтруктураПараметров.Вставить("ГорячиеКлавиши", СписокКомандФормаВыбора);

	МассивДисконтныхКарт = Новый Массив;
	Для Каждого СтрокаПоиска Из ЗначенияПоиска Цикл
		СтруктураСтроки = Новый Структура("ДисконтнаяКарта, ОстатокБонусныхБаллов, ПродажиОборот");
		СтруктураСтроки.ДисконтнаяКарта = ?(ЕстьСвойство(СтрокаПоиска, "Карта"), СтрокаПоиска.Карта, СтрокаПоиска.Владелец);
		СтруктураСтроки.ОстатокБонусныхБаллов = СтрокаПоиска.Остаток;
		СтруктураСтроки.ПродажиОборот = СтрокаПоиска.ПродажиОборот;
		МассивДисконтныхКарт.Добавить(СтруктураСтроки);
	КонецЦикла;
	СтруктураПараметров.Вставить("МассивДисконтныхКарт", МассивДисконтныхКарт);
	
	ОписаниеОповещенияЗавершениеВыбора = Новый ОписаниеОповещения("ЗавершениеОбработкиВыбораДисконтнойКартыЛокально", ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораДисконтнойКартыПоВладельцу", СтруктураПараметров, ЭтотОбъект,
				, , , ОписаниеОповещенияЗавершениеВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

		
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьСуммуБонусовПоДисконтнымКартам()
	Если СуммаБонусов > 0 И СписатьБаллыПоВладельцу Тогда
		ОбщийИтогБонусов = 0;
		Для Каждого СтрокаТаблицы Из ТаблицаВыбранныхКарт Цикл
			ОбщийИтогБонусов = ОбщийИтогБонусов + СтрокаТаблицы.ОстатокБонусныхБаллов * СтрокаТаблицы.КурсБонусов;
		КонецЦикла;
		
		СуммаБонусовКРаспределению = СуммаБонусов;
		СуммаРаспределено = 0;
		Для Каждого СтрокаТаблицы Из ТаблицаВыбранныхКарт Цикл
			СуммаРаспределения = Окр(СуммаБонусовКРаспределению * СтрокаТаблицы.ОстатокБонусныхБаллов * СтрокаТаблицы.КурсБонусов/ОбщийИтогБонусов, 2, РежимОкругления.Окр15как20);
			СтрокаТаблицы.СуммаРаспределения = СуммаРаспределения/СтрокаТаблицы.КурсБонусов;
			СуммаРаспределено = СуммаРаспределено + СуммаРаспределения;
		КонецЦикла;
		РазницаРаспределения = СуммаБонусовКРаспределению - СуммаРаспределено;
		
		Если ТаблицаВыбранныхКарт.Количество() > 0 
			И РазницаРаспределения <> 0 Тогда
			ТаблицаВыбранныхКарт[0].СуммаРаспределения = ТаблицаВыбранныхКарт[0].СуммаРаспределения + РазницаРаспределения;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьСуммуБонусовПоДисконтнымКартамПриВозврате()
	Если СуммаБонусов > 0 И ТаблицаВыбранныхКарт.Количество() > 0 Тогда
		ОбщийИтогБонусовРаспределено = 0;
		Для Каждого СтрокаТаблицы Из ТаблицаВыбранныхКарт Цикл
			ОбщийИтогБонусовРаспределено = ОбщийИтогБонусовРаспределено + СтрокаТаблицы.СуммаРаспределения * СтрокаТаблицы.КурсБонусов;
		КонецЦикла;
		
		СуммаБонусовКРаспределению = СуммаБонусов;
		СуммаРаспределено = 0;
		Для Каждого СтрокаТаблицы Из ТаблицаВыбранныхКарт Цикл
			КурсБонусов = ?(СтрокаТаблицы.КурсБонусов = 0, 1, СтрокаТаблицы.КурсБонусов);
			СуммаРаспределения = Окр(СуммаБонусовКРаспределению * СтрокаТаблицы.СуммаРаспределения * КурсБонусов/ОбщийИтогБонусовРаспределено, 2, РежимОкругления.Окр15как20);
			СтрокаТаблицы.СуммаРаспределения = СуммаРаспределения;
			СуммаРаспределено = СуммаРаспределено + СуммаРаспределения;
		КонецЦикла;
		РазницаРаспределения = СуммаБонусовКРаспределению - СуммаРаспределено;
		
		Если ТаблицаВыбранныхКарт.Количество() > 0 
			И РазницаРаспределения <> 0 Тогда
			ТаблицаВыбранныхКарт[0].СуммаРаспределения = ТаблицаВыбранныхКарт[0].СуммаРаспределения + (РазницаРаспределения/СтрокаТаблицы.КурсБонусов);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазблокироватьБонусыТаблицыВыбранныхКарт()
	Для Каждого СтрокаТаблицы Из ТаблицаВыбранныхКарт Цикл
		Если ИспользоватьСерверЛояльностиПолучательДанных Тогда
			ЗначенияПараметровМетода = Неопределено;
			ЗаполнитьДанныеБонуснойКарты(СтрокаТаблицы, ЗначенияПараметровМетода);
			РазблокироватьБонусыКартыСерверЛояльности(ЗначенияПараметровМетода);
		Иначе
			ПараметрыОбъекта = Новый Структура;
			ПараметрыОбъекта.Вставить("ДисконтнаяКарта", СтрокаТаблицы.ДисконтнаяКарта);
			ОбщегоНазначенияРМККлиентПереопределяемый.РазблокироватьОбъектСервераЛояльности("clientbonuses", ПараметрыОбъекта);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазблокироватьБонусыКартыСерверЛояльности(ЗначенияПараметровМетода)
	ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаРазблокироватьБонусыКлиента(ПараметрыПодключенияКСерверуЛояльности, ЗначенияПараметровМетода);
	Результат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
	Если Не Результат.ДанныеОтвета = НСтр("ru = 'Бонусы разблокированы'") Тогда
		ПоказатьПредупреждение(,
		НСтр("ru = 'Не удалось разблокировать бонусы. Пожалуйста, обратитесь к администратору'"));
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьДанныеБонуснойКарты(ПараметрыКартыЛояльности, ПараметрыВыполненияМетода)
	ПараметрыВыполненияМетода	= СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыМетодовБонуснойПодсистемы();
	ПараметрыВыполненияМетода.CardGUID 	= ПараметрыКартыЛояльности.ИдентификаторКарты;
	ПараметрыВыполненияМетода.ClientCardID = ПараметрыКартыЛояльности.КодКарты;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОстатокБонусов(ПараметрыЗапросаКлиента)
	ЗначенияПараметровМетода = Неопределено;
	ЗаполнитьДанныеБонуснойКарты(ПараметрыЗапросаКлиента, ЗначенияПараметровМетода);
	ПараметрыВыполненияЗапроса
		= СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаПолучитьБонусыКлиента(ПараметрыПодключенияКСерверуЛояльности,ЗначенияПараметровМетода);
	Результат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
	
	Если Результат.ЕстьОшибки Тогда
		
		ДополнительноеПояснение = НСтр("ru = ''");
		
		Если ЕстьСвойство(Результат, "ТекстОшибки") Тогда
			ДополнительноеПояснение = СтрШаблон(НСтр("ru = ' по причине: %1'"), Результат.ТекстОшибки);
		КонецЕсли;
		
		ТекстПредупреждения = СтрШаблон("%1 %2",
			НСтр("ru = 'Не удалось получить сведения о бонусном балансе клиента'"),
			ДополнительноеПояснение);
			ПоказатьПредупреждение(, ТекстПредупреждения);
		
		Возврат;
		
	КонецЕсли;
			
	СтрокаJSON = Результат.ДанныеОтвета;
	Если НЕ СтрНачинаетсяС(СокрЛ(СтрокаJSON), "{") Тогда
		Элементы.ДекорацияВозможноОплатитьБонусами.Заголовок = СтрокаJSON;
		ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьДоступныхБонусов(Элементы, Истина);
		Возврат;
	КонецЕсли;
	
	ДанныеОтвета = Неопределено;
	СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
	Если НЕ ДанныеОтвета = Неопределено И ДанныеОтвета.Свойство("ClientNotFound") 
				И НЕ ДанныеОтвета.ClientNotFound Тогда
		ПараметрыЗапросаКлиента.ОстатокБонусныхБаллов = ДанныеОтвета.BonusCount;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписатьБонусыТаблицыВыбранныхКарт()
	Для Каждого СтрокаТаблицы Из ТаблицаВыбранныхКарт Цикл
		ЗначенияПараметровМетода = Неопределено;
		ЗаполнитьДанныеБонуснойКарты(СтрокаТаблицы, ЗначенияПараметровМетода);
		ЗначенияПараметровМетода.Вставить("BonusesCount", Строка(СтрокаТаблицы.СуммаРаспределения));
		
		ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаСписатьБонусыКлиента(ПараметрыПодключенияКСерверуЛояльности, ЗначенияПараметровМетода);
		Результат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
		
		СтрокаОтвета = Результат.ДанныеОтвета;
		
		Если НЕ СтрокаОтвета = НСтр("ru = 'Бонусы успешно списаны'") Тогда
			РазблокироватьБонусыКартыСерверЛояльности(ЗначенияПараметровМетода);
		КонецЕсли;
	КонецЦикла;
	Если ОжидаемоеКоличествоЧеков < 1 Тогда
		ОчиститьДанныеКартыЛояльности();
	КонецЕсли;
	ЗначенияПараметровМетода = ПараметрыМетодовБонуснойПодсистемы();
	РазблокироватьБонусыКартыСерверЛояльности(ЗначенияПараметровМетода);
КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьДисконтныеКартыСерверЛояльности()
	ЗначенияПараметровМетода = Неопределено;
	СтруктураПараметров = СерверЛояльностиПолучательДанныхКлиентСервер.СтруктураПараметровОбъединенияКарт();
	СтруктураПараметров.BonusProgramm = БонуснаяПрограмма;
	ОбщийОстатокБонуснов = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаВыбранныхКарт Цикл
		Если НЕ СтрокаТаблицы.КартаНачисления Тогда
			ОбщийОстатокБонуснов = ОбщийОстатокБонуснов + СтрокаТаблицы.ОстатокБонусныхБаллов * СтрокаТаблицы.КурсБонусов / КурсБонусов;
		КонецЕсли;
	КонецЦикла;
	МассивКарт = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаВыбранныхКарт Цикл
		Если СтрокаТаблицы.КартаНачисления Тогда
			СтруктураПараметров.BonusCardGUID = СтрокаТаблицы.ИдентификаторКарты;
			СтруктураПараметров.BonusCardNumber = СтрокаТаблицы.КодКарты;
			Продолжить;
		КонецЕсли;
		СтруктураСтроки = СерверЛояльностиПолучательДанныхКлиентСервер.СтруктураСтрокиБонуснойКарты();
		СтруктураСтроки.CardGUID = СтрокаТаблицы.ИдентификаторКарты;
		СтруктураСтроки.CardNumber = СтрокаТаблицы.КодКарты;
		СтруктураСтроки.BonusesCount = СтрокаТаблицы.ОстатокБонусныхБаллов;
		МассивКарт.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	СтруктураПараметров.BonusCards = МассивКарт;
	
	ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаОбъединитьБонусныеКарты(ПараметрыПодключенияКСерверуЛояльности, СтруктураПараметров);
	Результат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
	Если Результат.ЕстьОшибки Тогда
		ТекстЗаголовка = НСтр("ru = 'Ошибка объединения бонусных карт.'");
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ДанныеОтвета = Неопределено;
	СтрокаJSON = Результат.ДанныеОтвета;
	СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
	
	Если НЕ ДанныеОтвета = Неопределено Тогда 
		Для Каждого СтрокаТаблицы Из ТаблицаВыбранныхКарт Цикл
			Если НЕ СтрокаТаблицы.КартаНачисления Тогда
				ЗаполнитьДанныеБонуснойКарты(СтрокаТаблицы, ЗначенияПараметровМетода);
				РазблокироватьБонусыКартыСерверЛояльности(ЗначенияПараметровМетода);
			КонецЕсли;
		КонецЦикла;

		Если ДанныеОтвета.Свойство("Error") И ДанныеОтвета.Error Тогда 
			
			ТекстЗаголовка = НСтр("ru = 'Ошибка объединения бонусных карт.'");
			ТекстОшибки = СтрШаблон(НСтр("ru = '%1'"), ДанныеОтвета.ErrorMessage);
			ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьДисконтныеКарты()
	СтруктураОтвета = Новый Структура("Error, ErrorMassege", Ложь, "");
	
	ОбъединитьДисконтныеКартыЛокально(СтруктураОтвета);
	Если СтруктураОтвета.Error Тогда
		ТекстЗаголовка = НСтр("ru = 'ООшибка объединения бонусных карт.'");
		ТекстОшибки = СтрШаблон(НСтр("ru = '%1'"), СтруктураОтвета.ErrorMessage);
		ОткрытьСтраницуИнфоОшибка(ТекстЗаголовка, ТекстОшибки);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбъединитьДисконтныеКартыЛокально(СтруктураОтвета)
	ОбщегоНазначенияРМКПереопределяемый.ОбъединитьБонусныеБаллы(БонуснаяПрограмма, Объект.ДисконтнаяКарта, ТаблицаВыбранныхКарт, СтруктураОтвета);
КонецПроцедуры

&НаСервере
Функция МассивКомандФормаВыбораКонтрагента()
	МассивИменКоманд = Новый Массив;
	МассивИменКоманд.Добавить("ВыбратьВсе");
	МассивИменКоманд.Добавить("ВыбратьКарту");
	МассивИменКоманд.Добавить("ОбъединитьИВыбрать");
	МассивИменКоманд.Добавить("УстановитьОсновнуюКарту"); 
	Возврат МассивИменКоманд;
КонецФункции

#КонецОбласти
