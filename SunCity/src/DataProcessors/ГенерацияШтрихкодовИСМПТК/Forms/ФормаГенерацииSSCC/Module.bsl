
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ВозвращатьАдресВременногоХранилища = НЕ Параметры.НеВозвращатьАдресВременногоХранилища;
	
	МожноСгенерироватьНовыйШтрихкод = Истина;
	
	Если ВозвращатьАдресВременногоХранилища Тогда
		Если ЭтоАдресВременногоХранилища(Параметры.АдресПредыдущихШтрихкодов) Тогда
			АдресПредыдущихШтрихкодов = Параметры.АдресПредыдущихШтрихкодов;
			ПоследниеШтрихкоды = ПолучитьИзВременногоХранилища(АдресПредыдущихШтрихкодов);
			Если НЕ ПоследниеШтрихкоды = Неопределено И НЕ ЗначениеЗаполнено(Параметры.Штрихкод) Тогда
				ТипУпаковки  = ПоследниеШтрихкоды.Получить("ПоследнийТипУпаковки");
				ТипШтрихкода = ПоследниеШтрихкоды.Получить("ПоследнийТипШтрихкода");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ТипУпаковки) Тогда
		ТипУпаковки = Параметры.ТипУпаковки;
		Элементы.ТипУпаковки.ТолькоПросмотр = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТипУпаковки) Тогда
		ТипУпаковки = Перечисления.ТипыУпаковокИСМПТК.МонотоварнаяУпаковка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ТипШтрихкода) Тогда
		ТипШтрихкода = Параметры.ТипШтрихкода;
		Элементы.ТипШтрихкода.ТолькоПросмотр = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТипШтрихкода) Тогда
		ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.SSCC;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаГенерации) Тогда
		ДатаГенерации = ТекущаяДата;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Организация = Параметры.Организация;
	КонецЕсли;
	
	ЗаполнитьСерийныйНомерПоДаннымИБ(Истина);
			
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЦифраРасширенияПриИзменении(Элемент)
	
	ЗаполнитьСерийныйНомерПоДаннымИБ(Ложь);
	Если МожноСгенерироватьНовыйШтрихкод Тогда
		Информация = "";
		ГенерацияШтрихкода();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПрефиксКомпанииGS1ПриИзменении(Элемент)
	
	ЗаполнитьСерийныйНомерПоДаннымИБ(Ложь);
	Если МожноСгенерироватьНовыйШтрихкод Тогда
		Информация = "";
		ГенерацияШтрихкода();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СерийныйНомерSSCCПриИзменении(Элемент)
	
	ИнтервалНомеров = ВыполнитьПроверкуИнтерваловГенерации(Ложь);
	НачалоИнтервала = ИнтервалНомеров.НачалоИнтервала;
	КонецИнтервала  = ИнтервалНомеров.КонецИнтервала;
	НовыйНомерСерии = СерийныйНомерSSCC;
	
	Если НовыйНомерСерии >= НачалоИнтервала И НовыйНомерСерии <= КонецИнтервала Тогда //Новая серия входит в допустимый интервал, включая его границы
		МожноСгенерироватьНовыйШтрихкод = Истина;
		Информация = "";
		ГенерацияШтрихкода();
	Иначе
		МожноСгенерироватьНовыйШтрихкод = Ложь;
		Информация = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНевозможноСгенерироватьШтрихкодТранспортнойУпаковки();
		Штрихкод = "";
	КонецЕсли;
	
	УправлениеФормой();	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлятьСкобочкиДляAIDПриИзменении(Элемент)
	
	Если МожноСгенерироватьНовыйШтрихкод Тогда
		Информация = "";
		ГенерацияШтрихкода();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Готово(Команда)
	
	Если НЕ ПроверкаКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	//Возвращаем в форму сгенерированный код
	ВозвращаемыеПараметры = Новый Структура;
	ВозвращаемыеПараметры.Вставить("Штрихкод", Штрихкод);
	
	//Формируем запись в РС
	Если ЗначениеЗаполнено(Штрихкод) Тогда
		СформироватьЗаписьВРегистреШтрихкодыSSCCИСМПТК();
	КонецЕсли;
	
	Закрыть(ВозвращаемыеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеФормой()
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаГотово", "Доступность", МожноСгенерироватьНовыйШтрихкод);	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПечатьЭтикетокШтрихкода", "Доступность", ПравоДоступа("Просмотр", Метаданные.Обработки.ПечатьКодовМаркировкиИСМПТК));
				
КонецПроцедуры

&НаСервере
Процедура ГенерацияШтрихкода()
	
	Штрихкод       = "";
	ДлинаШтрихкода = 0;
	
	Если ЗначениеЗаполнено(ТипУпаковки)
		И ЗначениеЗаполнено(ТипШтрихкода) Тогда
		
		Если ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.SSCC") Тогда
			
			ПараметрыШтрихкода = Новый Структура;
			ПараметрыШтрихкода.Вставить("ЦифраРасширения",    ЦифраРасширения);
			ПараметрыШтрихкода.Вставить("ПрефиксКомпанииGS1", ПрефиксКомпанииGS1);
			ПараметрыШтрихкода.Вставить("СерийныйНомерSSCC",  СерийныйНомерSSCC);
			
			Штрихкод = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодSSCC(ПараметрыШтрихкода, ДобавлятьСкобочкиДляAID);
			
			ДлинаШтрихкода = СтрДлина(Штрихкод);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаКлиент()
	
	Отказ = Ложь;
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(ТипУпаковки) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Тип упаковки"".'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения,,"ТипУпаковки",,Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипШтрихкода) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Тип штрихкода"".'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения,,"ТипШтрихкода",,Отказ);
	КонецЕсли;
	
	Если ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.SSCC") Тогда
		Если НЕ ЗначениеЗаполнено(ПрефиксКомпанииGS1) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Префикс компании GS1"".'");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения,,"ПрефиксКомпанииGS1",,Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СерийныйНомерSSCC) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Серийный номер"".'");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения,,"СерийныйНомерSSCC",,Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСерийныйНомерПоДаннымИБ(ПроверкаПриОткрытии = Ложь) Экспорт
	
	ИнтервалНомеров = ВыполнитьПроверкуИнтерваловГенерации(ПроверкаПриОткрытии);
	НачалоИнтервала = ИнтервалНомеров.НачалоИнтервала;
	КонецИнтервала  = ИнтервалНомеров.КонецИнтервала;
	НовыйНомерСерии = ИнтервалНомеров.НовыйНомерСерии;	
	ДанныеПредыдущегоКода = ИнтервалНомеров.ДанныеПредыдущегоКода;
	
	Если НовыйНомерСерии >= НачалоИнтервала И НовыйНомерСерии <= КонецИнтервала Тогда //Новая серия входит в допустимый интервал, включая его границы
		//4.Заполняем данные формы для генерации
		МожноСгенерироватьНовыйШтрихкод = Истина;
		ДанныеПредыдущегоКода.Вставить("СерийныйНомерSSCC", НовыйНомерСерии);
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеПредыдущегоКода); 
		ГенерацияШтрихкода();
	Иначе
		//4.Выводим сообщение о недопустимости генерации нового штрихкода
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеПредыдущегоКода);
		СерийныйНомерSSCC = НовыйНомерСерии;
		МожноСгенерироватьНовыйШтрихкод = Ложь;
		Информация = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНевозможноСгенерироватьШтрихкодТранспортнойУпаковки();
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПроверкуИнтерваловГенерации(ПроверкаПриОткрытии)
	
	//1.Проверяем константу ИнтервалГенерацииСерийШтрихкодаSSCCИСМПТК - интервал допустимых серий
	ИнтервалНомеров = Константы.ИнтервалГенерацииСерийШтрихкодаSSCCИСМПТК.Получить().Получить();
	Если ТипЗнч(ИнтервалНомеров) = Тип("Структура") Тогда 
		НачалоИнтервала = ИнтервалНомеров.НачалоИнтервала;
		КонецИнтервала  = ИнтервалНомеров.КонецИнтервала;
	Иначе
		НачалоИнтервала = 1;
		КонецИнтервала  = 9999999;
	КонецЕсли;
	
	//2.Проверяем РС ШтрихкодыSSCCИСМПТК - какое значение использовалось при прошлой генерации
	Запрос = Новый Запрос();
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ШтрихкодыSSCCИСМПТК.ЦифраРасширения) КАК ЦифраРасширения,
	|	ШтрихкодыSSCCИСМПТК.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ЦифрыРасширения
	|ИЗ
	|	РегистрСведений.ШтрихкодыSSCCИСМПТК КАК ШтрихкодыSSCCИСМПТК
	|ГДЕ
	|	ШтрихкодыSSCCИСМПТК.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ШтрихкодыSSCCИСМПТК.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыSSCCИСМПТК.ПрефиксКомпанииGS1 КАК ПрефиксКомпанииGS1,
	|	ШтрихкодыSSCCИСМПТК.СерийныйНомерSSCC КАК СерийныйНомерSSCC,
	|	ШтрихкодыSSCCИСМПТК.ЦифраРасширения КАК ЦифраРасширения,
	|	ШтрихкодыSSCCИСМПТК.Организация КАК Организация,
	|	ШтрихкодыSSCCИСМПТК.ТипШтрихкода КАК ТипШтрихкода,
	|	ШтрихкодыSSCCИСМПТК.ТипУпаковки КАК ТипУпаковки,
	|	ВТ_ЦифрыРасширения.ЦифраРасширения КАК ЦифраРасширенияРазличных
	|ИЗ
	|	РегистрСведений.ШтрихкодыSSCCИСМПТК КАК ШтрихкодыSSCCИСМПТК
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦифрыРасширения КАК ВТ_ЦифрыРасширения
	|		ПО ШтрихкодыSSCCИСМПТК.Организация = ВТ_ЦифрыРасширения.Организация
	|ГДЕ
	|	ШтрихкодыSSCCИСМПТК.Организация = &Организация
	|	%УсловиеПрефикс%
	|	%УсловиеЦифраРасширения%
	|
	|СГРУППИРОВАТЬ ПО
	|	ШтрихкодыSSCCИСМПТК.ЦифраРасширения,
	|	ШтрихкодыSSCCИСМПТК.ПрефиксКомпанииGS1,
	|	ШтрихкодыSSCCИСМПТК.СерийныйНомерSSCC,
	|	ШтрихкодыSSCCИСМПТК.Организация,
	|	ШтрихкодыSSCCИСМПТК.ТипШтрихкода,
	|	ШтрихкодыSSCCИСМПТК.ТипУпаковки,
	|	ВТ_ЦифрыРасширения.ЦифраРасширения
	|
	|УПОРЯДОЧИТЬ ПО
	|	СерийныйНомерSSCC";

	НужноУсловиеПрефикса = Не ПроверкаПриОткрытии;
	НужноУсловиеЦифрыРасширения = Не ПроверкаПриОткрытии;
	
	Если НужноУсловиеПрефикса Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеПрефикс%", "И ШтрихкодыSSCCИСМПТК.ПрефиксКомпанииGS1 = &ПрефиксКомпанииGS1");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеПрефикс%", "");
	КонецЕсли;
	Если НужноУсловиеЦифрыРасширения Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеЦифраРасширения%", "И ШтрихкодыSSCCИСМПТК.ЦифраРасширения = &ЦифраРасширения");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеЦифраРасширения%", "");
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация", Организация);
	Если НужноУсловиеПрефикса Тогда
		Запрос.УстановитьПараметр("ПрефиксКомпанииGS1", ПрефиксКомпанииGS1);
	КонецЕсли;
	Если НужноУсловиеЦифрыРасширения Тогда
		Запрос.УстановитьПараметр("ЦифраРасширения", ЦифраРасширения);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПоследнийНомерСерии = 0; //Если это первая генерация ШК
	ДанныеПредыдущегоКода = Новый Структура();
	
	Информация = НСтр("ru = 'Для генерации требуется заполнить поля ""Цифра расширения"" и ""Префикс компании GS1"".'")
			   + Символы.ПС 
			   + НСтр("ru = 'Серийный номер будет подобран автоматически.'");
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЦифраРасширенияРазличных <> 1 И ПроверкаПриОткрытии Тогда
			//не можем подобрать данные для заполнения 
			Прервать;
		Иначе
			ПоследнийНомерСерии = Выборка.СерийныйНомерSSCC;
			ДанныеПредыдущегоКода.Вставить("ПрефиксКомпанииGS1", Выборка.ПрефиксКомпанииGS1);
			ДанныеПредыдущегоКода.Вставить("ЦифраРасширения", 	 Выборка.ЦифраРасширения);
			ДанныеПредыдущегоКода.Вставить("ТипШтрихкода",		 Выборка.ТипШтрихкода);
			ДанныеПредыдущегоКода.Вставить("ТипУпаковки", 		 Выборка.ТипУпаковки);
			ДанныеПредыдущегоКода.Вставить("Организация",		 Выборка.Организация);
		КонецЕсли;
	КонецЦикла;
	
	//3.Получаем номер серии для генерации и проверяем, входит ли он в допустимый интервал генерации
	// Если это первая генерация в базе, первым номером должны взять начальную границу допустимого интервала
	Если ПоследнийНомерСерии = 0 Тогда //В РС еще нет записей, это первая генерация
		НовыйНомерСерии = НачалоИнтервала;
	Иначе //В РС уже есть какие-то данные, продолжаем последовательность
		НовыйНомерСерии = ПоследнийНомерСерии + 1;
	КонецЕсли;
	
	ДанныеИнтервалов = Новый Структура();
	ДанныеИнтервалов.Вставить("НачалоИнтервала", НачалоИнтервала);
	ДанныеИнтервалов.Вставить("КонецИнтервала",  КонецИнтервала);
	ДанныеИнтервалов.Вставить("НовыйНомерСерии", НовыйНомерСерии);
	ДанныеИнтервалов.Вставить("ДанныеПредыдущегоКода", ДанныеПредыдущегоКода);
	
	Возврат ДанныеИнтервалов;
	
КонецФункции

&НаСервере
Процедура СформироватьЗаписьВРегистреШтрихкодыSSCCИСМПТК() Экспорт
	
	НаборЗаписей = РегистрыСведений.ШтрихкодыSSCCИСМПТК.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Отбор.СерийныйНомерSSCC.Установить(СерийныйНомерSSCC);
	НаборЗаписей.Отбор.ПрефиксКомпанииGS1.Установить(ПрефиксКомпанииGS1);
	НаборЗаписей.Отбор.ЦифраРасширения.Установить(ЦифраРасширения);
	НаборЗаписей.Прочитать(); 
	
	Если НаборЗаписей.Количество() = 0 Тогда
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ЭтотОбъект);
	Иначе
		Стараязапись = НаборЗаписей[0];
		ЗаполнитьЗначенияСвойств(Стараязапись, ЭтотОбъект);
	КонецЕсли;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ВызватьИсключение НСтр("ru = 'Не удалось записать данные штрихкода в регистр!'");
	КонецПопытки;
				
КонецПроцедуры

#КонецОбласти 

#Область ПечатьSSCC

&НаКлиенте
Процедура ПечатьЭтикетокШтрихкода(Команда)
	
	Если Не ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеВопросПечати = Новый ОписаниеОповещения("ОбработкаОтветаПользователяПриПечати", ЭтотОбъект);
	
	ПоказатьВопрос(ОповещениеВопросПечати, НСтр("ru = 'Штрихкод будет распечатан и записан в регистр. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаПользователяПриПечати(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	//Сохраняем код
	СформироватьЗаписьВРегистреШтрихкодыSSCCИСМПТК();
	
	//Выводим на печать
	ДанныеПечати = ПодготовитьДанныеДляПечати();
	
	Если ДанныеПечати.ОбъектыПечати.Количество() = 0 Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНетДанныхДляПечати();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПечатьКодовМаркировкиИСМПТККлиент.НапечататьSSCC(ДанныеПечати, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте 
Функция ПодготовитьДанныеДляПечати()
	
	ОбъектыПечати = Новый Массив;
	
	ПараметрыШтрихкода = ПечатьКодовМаркировкиИСМПТККлиентСервер.СтруктураПечатиЭтикеткиSSCC();
	
	ПараметрыШтрихкода.Организация        = Организация;
	ПараметрыШтрихкода.ЦифраРасширения    = ЦифраРасширения;
	ПараметрыШтрихкода.ПрефиксКомпанииGS1 = ПрефиксКомпанииGS1;
	ПараметрыШтрихкода.СерийныйНомерSSCC  = СерийныйНомерSSCC;
	ПараметрыШтрихкода.Штрихкод     	  = Штрихкод;
	ПараметрыШтрихкода.ТипШтрихкода       = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.SSCC");
	ПараметрыШтрихкода.ШаблонЭтикетки 	  = ПечатьКодовМаркировкиИСМПТККлиентСервер.ПолучитьШаблонЭтикеткиSSCC();
	ПараметрыШтрихкода.Количество         = 1;
	
	ОбъектыПечати.Добавить(ПараметрыШтрихкода);
	
	ИтоговаяСтруктура = Новый Структура;
	ИтоговаяСтруктура.Вставить("ОбъектыПечати",              ОбъектыПечати);
	ИтоговаяСтруктура.Вставить("КаждаяЭтикеткаНаНовомЛисте", Истина);
	ИтоговаяСтруктура.Вставить("ЕстьПечатьЭтикетокИЦенников", ПроверитьНаличиеМенеджераПечати());
	
	Возврат ИтоговаяСтруктура;
	
КонецФункции

&НаСервере
Функция ПроверитьНаличиеМенеджераПечати()
	
	Возврат ?(Метаданные.НайтиПоПолномуИмени("Обработка.ПечатьКодовМаркировкиИСМПТК") <> Неопределено, Истина, Ложь);
	
КонецФункции

#КонецОбласти

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	
	ОбщегоНазначенияИСМПТКПереопределяемый.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти