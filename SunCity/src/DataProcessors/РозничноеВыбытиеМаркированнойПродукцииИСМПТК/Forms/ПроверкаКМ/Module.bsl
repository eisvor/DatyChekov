
#Область ОбработчикиСобытийФормы

//Обязательные параметры открытия формы:
//СписокКМ - Данные табличной части КодыМаркировкиИСМПТК
//ТоварыЧека - Данные табличной части Товары
//Организация - СправочникСсылка, значение одноименного реквизита документа.
//ОбъединятьСтрокиСОдинаковымиТоварами - Булево. Для ЧекаККМ всегда Истина, при вызове из РМК - по значению Настройки РМК.
//РедактированиеФормыНедоступно - Булево. Для нового Чека и РМК = Ложь, при вызове из формы списка Чеков = Истина (возможен пересмотр использования в след.версиях).
//ВызовИзФормыСпискаЧеков - Булево. Определяет вызов из формы списка документа.
//ДанныеВозвращаемогоКода - Неопределено, если открытие не из чека на возврат. В обратном случае - стурктура "ДанныеМаркировки, ДанныеНоменклатуры", где ДанныеМаркировки это результат разбора КМ.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//См.состав обязательных параметров открытия в описании процедуры.
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
		
#Область ОбщиеДанные

	ТолькоПросмотр = Параметры.РедактированиеФормыНедоступно;
	Если ТолькоПросмотр Тогда
		ЭтаФорма.Заголовок = НСтр("ru = 'Проверка и редактирование списка кодов маркировки (только просмотр)'");
	Иначе
		ЭтаФорма.Заголовок = НСтр("ru = 'Проверка и редактирование списка кодов маркировки'");
	КонецЕсли;
	ВызовИзСписка = Параметры.ВызовИзФормыСпискаЧеков;
	Организация   = Параметры.Организация;
	ОбъединятьСтрокиСОдинаковымиТоварами = Параметры.ОбъединятьСтрокиСОдинаковымиТоварами;
	
	СобытияФормИСМПТКПереопределяемый.ПриСозданииНаСервере_НастроитьПодключаемоеОборудование(ЭтаФорма);
	ПодготовитьФормуНаСервере();

#КонецОбласти
		
#Область ЗаполнениеДанныхТовары

	Если Не ВызовИзСписка Тогда
		//Если вызов из РМК или нового ЧекаККМ - заполняем таблицу товаров для последующей связи.	
		ТаблицаТоваровЧека = Параметры.ТоварыЧека.Выгрузить();
		ТаблицаТоваровЧека.Свернуть("Номенклатура, Характеристика, Упаковка");
		ТоварыЧекаДляПоиска = Параметры.ТоварыЧека.Выгрузить();
	Иначе
		//в этом случае Параметры.ТоварыЧека - массив
		ТаблицаТоваровЧека  = Параметры.ТоварыЧека;
		ТоварыЧекаДляПоиска = Новый ТаблицаЗначений;
		ТоварыЧекаДляПоиска.Колонки.Добавить("Номенклатура");
		ТоварыЧекаДляПоиска.Колонки.Добавить("Характеристика");
		ТоварыЧекаДляПоиска.Колонки.Добавить("Упаковка");
		ТоварыЧекаДляПоиска.Колонки.Добавить("КлючСвязи");
		ТоварыЧекаДляПоиска.Колонки.Добавить("НомерСтроки");
		Для Каждого Товар Из ТаблицаТоваровЧека Цикл
			НоваяСтрочкаТовар = ТоварыЧекаДляПоиска.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрочкаТовар, Товар);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из ТаблицаТоваровЧека Цикл
		НоваяСтрока = ТоварыЧека.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара);
	КонецЦикла;
	
#КонецОбласти
			
#Область ЗаполнениеДанныхКодыМаркировки

	//Заполняем реквизиты по полученным из источника данным
	Для Каждого СтрокаКМ Из Параметры.СписокКМ Цикл		
		
		НоваяСтрокаСписка = СписокКМ.Добавить();
		НоваяСтрокаСписка.КодМаркировкиНормализованный = СтрокаКМ.КодМаркировки;
		СтруктураКодовМаркировки = РозничноеВыбытиеИСМПТКВызовСервера.ПолучитьКодыМаркировкиПриРозничнойПродаже(Новый Структура("Штрихкод, ФорматBase64", СтрокаКМ.КодМаркировки, Ложь));
		Если ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда
			КодИдентификации = "";
			GTIN = "";
			EAN  = "";
		Иначе
			КодИдентификации = СтруктураКодовМаркировки.КодИдентификации;
			GTIN = СтруктураКодовМаркировки.GTIN;
			EAN	 = СтруктураКодовМаркировки.EAN;
		КонецЕсли;
		
		НоваяСтрокаСписка.КодИдентификации = КодИдентификации;
		НоваяСтрокаСписка.GTIN = GTIN;
		НоваяСтрокаСписка.EAN  = EAN;
		
		//Из чека не может прийти код с не заполненной номенклатурой, т.к. добвление КМ всегда в связке с добавлением товара.
		//Но на случай использования формы в иных механизмах оставляем проверку.
		Если Не ЗначениеЗаполнено(СтрокаКМ.Номенклатура) Тогда
			ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(НоваяСтрокаСписка.EAN); //Возвращается структура или Неопределено
			Если Не ДанныеНоменклатуры = Неопределено Тогда
				Номенклатура     	 = ДанныеНоменклатуры.Номенклатура; 
				БазоваяЕИ		 	 = ДанныеНоменклатуры.БазоваяЕдиницаИзмерения;
				Упаковка		 	 = ДанныеНоменклатуры.Упаковка;
				ИспользуютсяУпаковки = ДанныеНоменклатуры.ИспользуютсяУпаковки;
				УпаковкаНеШтучная    = ДанныеНоменклатуры.УпаковкаНеШтучная;
				
				//Штучную упаковку считаем упаковкой, несмотря на то, что ее коэф-т = 1 и ЕИ может совпадать с базовой ЕИ товара. 
				//Если при регистрации ШК вообще не указана упаковка, в форме Проверки КМ отображаем базовую единицу номенклатуры, однако при закрытии формы 
				//и заполнении данных в документе сопоставлять такие строки вероятно нужно будет с пустым значением единицы измерения, 
				//т.к. в типовых конфигурациях в большинстве своем в ТЧ документа указывается значение только упаковки 
				//(измерение количества в базовой ЕИ подразумевается при пустом поле Упаковка).
				ЕдиницаИзмерения = ?(ИспользуютсяУпаковки, Упаковка, БазоваяЕИ); 
			КонецЕсли;
		Иначе
			Номенклатура     = СтрокаКМ.Номенклатура;
			Характеристика   = СтрокаКМ.Характеристика;
			ЕдиницаИзмерения = СтрокаКМ.ЕдиницаИзмерения;
		КонецЕсли;
		
		ВидПродукцииШК = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);
		
		НоваяСтрокаСписка.Номенклатура	   = Номенклатура;
		НоваяСтрокаСписка.Характеристика   = Характеристика;
		НоваяСтрокаСписка.ЕдиницаИзмерения = ЕдиницаИзмерения;
		НоваяСтрокаСписка.ВидПродукции 	   = ВидПродукцииШК;	
		НоваяСтрокаСписка.КлючСвязи		   = СтрокаКМ.КлючСвязи;
		
		//Реквизит Статус кода определяет необходимость изменения тоговой таблицы марок в Чеке.
		//1) По умолчанию при открытии формы проверки и редактирования все КМ, которые пришли из Чека, считаются сохраняемыми в документе, 
		//т.е. статус кода = 1.
		//2) Если пользователь удаляет строку КМ статус кода переходит в значение 2 - строка для удаления. 
		//При закрытии формы количество товара не уменьшается.
		//3) Если пользователь добавляет новый код маркировки статус кода устанавливается в значение 3 - добавленный новый код. 
		//При закрытии формы количество нужно будет увеличить, если общее число КМ по нему превышает количество единиц товара в чеке. 
		НоваяСтрокаСписка.СтатусКода = "1_исходный"; //Статус "Уже указан в чеке"
		
		НайденныеСтрокиВТоварах = ТоварыЧекаДляПоиска.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаКМ.КлючСвязи)); 
		Если Не НайденныеСтрокиВТоварах.Количество() = 0 Тогда 
			НоваяСтрокаСписка.НомерСтрокиТоваров = Строка(НайденныеСтрокиВТоварах[0].НомерСтроки);
		Иначе
			НоваяСтрокаСписка.НомерСтрокиТоваров = НСтр("ru = 'Не определен'");
		КонецЕсли;
		
	КонецЦикла;
	
#КонецОбласти

#Область ЗаполнениеДополнительныхДанных

	//Открытие из формы Чека Возврата
	Если Не Параметры.ДанныеВозвращаемогоКода = Неопределено Тогда
		
		ДанныеРазбораКМ	    = Параметры.ДанныеВозвращаемогоКода.ДанныеМаркировки;
		ДанныеНоменклатуры  = Параметры.ДанныеВозвращаемогоКода.ДанныеНоменклатуры;
		
		КодМаркировкиBase64 = ДанныеРазбораКМ.ШтрихкодBase64;
		НормализованныйКМ   = РозничноеВыбытиеИСМПТКВызовСервера.НормализованныйШтрихкод(КодМаркировкиBase64);
		ИсходныеДанныеКМ 	= Новый Структура("Штрихкод, Количество, ФорматBase64", КодМаркировкиBase64, 1, Истина);
		СтруктураКодовМаркировки = РозничноеВыбытиеИСМПТКВызовСервера.ПолучитьКодыМаркировкиПриРозничнойПродаже(ИсходныеДанныеКМ);
		
		НоваяСтрокаСписка = СписокКМ.Добавить();
		НоваяСтрокаСписка.КодМаркировкиНормализованный = НормализованныйКМ;
		НоваяСтрокаСписка.КодИдентификации = СтруктураКодовМаркировки.КодИдентификации;
		НоваяСтрокаСписка.GTIN = ДанныеРазбораКМ.GTIN;
		НоваяСтрокаСписка.EAN  = ДанныеРазбораКМ.EAN;
		
		ВидПродукцииШК = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(ДанныеНоменклатуры.Номенклатура);
		
		НоваяСтрокаСписка.Номенклатура	     = ДанныеНоменклатуры.Номенклатура;
		НоваяСтрокаСписка.Характеристика     = ДанныеНоменклатуры.Характеристика;
		НоваяСтрокаСписка.ЕдиницаИзмерения   = ?(ДанныеНоменклатуры.ИспользуютсяУпаковки, ДанныеНоменклатуры.Упаковка, ДанныеНоменклатуры.БазоваяЕдиницаИзмерения);
		НоваяСтрокаСписка.ВидПродукции 	     = ВидПродукцииШК;
		НоваяСтрокаСписка.КлючСвязи 	     = 0; //значение необходимо установить при закрытии формы и переносе в документ
		НоваяСтрокаСписка.СтатусКода	     = "1_добавлен";
		НоваяСтрокаСписка.НомерСтрокиТоваров = НСтр("ru = 'Добавлен'");
		
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДобавленНовыйКодМаркировкиСПараметром();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодИдентификации%", СтруктураКодовМаркировки.КодИдентификации);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
#КонецОбласти

	ЗаполнитьПризнакИспользованияХарактеристик();
	УстановитьУсловноеОформлениеХарактеристикНоменклатуры();
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	//Устанавливаем условное оформление списка кодов
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы И ИспользуютсяСканерыШтрихкода Тогда
		ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			
			//Если форма открыта из списка Чеков ККМ, то редактировать в ней данные не разрешаем.
			Если ТолькоПросмотр Тогда
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияФормаЗаблокированаВводНевозможен();
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);	
				Возврат;
			КонецЕсли;
	
			ОбработкаСобытияСканераОбщая(Параметр);	
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
		
	//Если форма открыта из списка Чеков ККМ, то редактировать в ней данные не разрешаем.
	Если ТолькоПросмотр Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияФормаЗаблокированаВводНевозможен();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);	
		Возврат;
	КонецЕсли;
	
	Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентПереопределяемый.ОбрабатыватьВнешнееСобытиеТО() Тогда 
		Возврат;
	КонецЕсли;
	
	Параметр = Новый Массив;
	Параметр.Добавить(Данные);
	Параметр.Добавить(Неопределено);
	
	Если ВводДоступен() Тогда
		Если Событие = "Штрихкод" ИЛИ Событие = "ПолученШтрихкод" 
			И Не ТолькоПросмотр Тогда
			ОбработкаСобытияСканераОбщая(Параметр);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСобытияСканераОбщая(Параметр)
	
	Если ЗначениеЗаполнено(Параметр) Тогда 
		ЭтоОбычныйШтрихкод = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверитьКорректностьGTIN(Параметр[0]);
		Если ЭтоОбычныйШтрихкод Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо отсканировать код маркировки!'");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ИначеЕсли Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверкаФорматаТранспортногоКодаПройденаУспешно(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр)) Тогда
			Возврат;
		Иначе
			ОбработатьКодМаркировки(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));	
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЭлементовФормы

&НаКлиенте
Процедура СписокКМПередУдалением(Элемент, Отказ)
	
	//Если форма открыта из списка Чеков ККМ, то редактировать в ней данные не разрешаем.
	Если ТолькоПросмотр Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	          	
	#Область Комментарий
	//Принцип удаления кодов в списке:
	//Коды, присутствующие в документе, при открытии формы имеют статус кода = 1 ("присутствует в документе"). 
	//Если по инициативе пользователя удаляется такая строка, статус кода меняется на значение = 2 ("для удаления"), но
	//саму строку в таблице до закрытия формы не удаляем, т.к. она нужна для подсчет итогового количества и может потребоваться 
	//для установки ключа связи новых строк.
	//Если же пользователь удаляет строку с кодом, который был добавлен уже в форме проверки КМ, т.е. строку где статус кода = 3 ("новый КМ"),
	//удаляем ее сразу, т.к. ее значение не принципиально при подсчете итогов.
	#КонецОбласти
	
	ТекущиеДанные = Элементы.СписокКМ.ТекущиеДанные;
	Если ТекущиеДанные.СтатусКода = "1_исходный" Тогда
		ТекущиеДанные.СтатусКода = "2_удалить";  	//Меняем значение статуса кода на "Удалить из документа"
		Отказ = Истина; //Саму строку не удаляем в таблице, она нужна для переноса результатов в чек
	КонецЕсли;
	
	УстановитьУсловноеОформление(); //Условное оформление: не показывать строки со статусом кода на удаление
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверкаЗавершена(Команда)
	
	НужноОповеститьОбИзменениях = Ложь;
	
	//Подсчитываем итоги и при необходимости оповещаем пользователя перед закрытием формы, что в Чеке будут изменения.
	КоличествоНеизмененныхСтрок = СписокКМ.НайтиСтроки(Новый Структура("СтатусКода", "1_исходный")).Количество();
	КоличествоСтрокВсего		= СписокКМ.Количество();
	
	Если Не КоличествоНеизмененныхСтрок = КоличествоСтрокВсего Тогда
		НужноОповеститьОбИзменениях = Истина;
	КонецЕсли;
	
	//Оповещаем пользователя
	Если НужноОповеститьОбИзменениях Тогда
		ТекстВопроса = НСтр("ru = 'После закрытия формы в формируемый чек будут внесены изменения. Продолжить?'");
		Оповещение   = Новый ОписаниеОповещения("ПослеВыводаОповещенияПередЗакрытиемФормы", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	Иначе
		ЭтаФорма.Закрыть(СписокКМ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	
&НаКлиенте
Процедура ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Для передачи на сервер КМ, в составе которого есть символы GS (29), требуется дополнительное кодирование
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
	ИсходныеДанные.Вставить("ФорматBase64", Истина);	
	СтруктураКодовМаркировки = РозничноеВыбытиеИСМПТКВызовСервера.ПолучитьКодыМаркировкиПриРозничнойПродаже(ИсходныеДанные);
	
	//Если удалось разобрать код, вернется структура. Если нет - текст сообщения об ошибке.
	Если ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СтруктураКодовМаркировки);
		Возврат;
	КонецЕсли;
	
	//Проверяем наличие отсканированного кода в исходной таблице чека
	СтрокиНайденныхКодов = НайтиПоКодуВСпискеКМ(СтруктураКодовМаркировки.КодИдентификации);
	Если Не СтрокиНайденныхКодов = Неопределено Тогда 
		
		//Код обнаружен в списке. Проверяем его статус кода:
		//1) если значение 1_исходный - код изначально присутствовал в Чеке. Нужно уточнить у пользователя хочет ли он удалить этот код. 
		//В случае согласия переводим статус кода в 2.
		//2) если значение 2_удалить - код имеет статус "Удалить", т.е. это код из первоначального чека и пользователь уже пометил его на удаление. 
		//Возвращаем код в статус 1 и выводим на форму.
		//3) если значение 1_добавлен - код изначально отсутствует в Чеке, добавлен пользователем при сверке. Выводим его в таблицу. 
			
		Для Каждого НайденнаяСтрокаКМ Из СтрокиНайденныхКодов Цикл
			Если НайденнаяСтрокаКМ.СтатусКода    = "1_исходный"
				Или НайденнаяСтрокаКМ.СтатусКода = "1_добавлен" Тогда
				ТекстВопроса = НСтр("ru = 'Отсканированный код маркировки уже указан в документе. Удалить его?'"); 
				ДополнительныеПараметры = Новый Структура("СтрокаСпискаКМ", НайденнаяСтрокаКМ); 
				Оповещение   			= Новый ОписаниеОповещения("ПослеЗакрытияВопросаПовторныйВводКМ", ЭтотОбъект, ДополнительныеПараметры);
				ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);     
			Иначе
				НайденнаяСтрокаКМ.СтатусКода = "1_исходный";
			КонецЕсли;
		КонецЦикла;
	Иначе
		
		Если Не ОбъединятьСтрокиСОдинаковымиТоварами Тогда
			//Для РМК в случае отключенной настройки объединения строк не позволяем в форме проверки КМ добавлять новые коды, т.к.
			//в этом случае нужно добавлять также новые строки товаров в РМК, а это вызов стандратного механизма и если добавлены 
			//КМ номенклатуры, открывающей дополнительные уточняющие окна, например для выбора упаковок, возникает некрасивая ситуация, 
			//когда пользователь вынужден несколько раз выбирать одно и тоже значение для товара.
			ТекстСообщения = НСтр("ru = 'Это новый код маркировки!'")
						   + Символы.ПС
						   + НСтр("ru = 'Отсканируйте его в форме заполняемого чека.'"); 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		//Код не обнаружен в списке. 
		НормализованныйКМ  = РозничноеВыбытиеИСМПТКВызовСервера.НормализованныйШтрихкод(СтруктураКодовМаркировки.КодМаркировки);
		ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(СтруктураКодовМаркировки.EAN); //Возвращается структура или Неопределено
		
		Если Не ДанныеНоменклатуры = Неопределено Тогда
			Номенклатура     	    = ДанныеНоменклатуры.Номенклатура; //может быть пустое знаечние, если обнаружено несколько одинаковых ШК в регистре (если позволяет конфигурация)
			Характеристика     	    = ДанныеНоменклатуры.Характеристика;
			БазоваяЕдиницаИзмерения = ДанныеНоменклатуры.БазоваяЕдиницаИзмерения;
			Упаковка		 	 	= ДанныеНоменклатуры.Упаковка;
			ИспользуютсяУпаковки 	= ДанныеНоменклатуры.ИспользуютсяУпаковки;
			УпаковкаНеШтучная    	= ДанныеНоменклатуры.УпаковкаНеШтучная;
		Иначе
			//Если данные в регистре ШК вообще не нашлись.
			ТекстСообщения = НСтр("ru = 'Внимание: для штрихкода %1 не удалось определить номенклатуру. Добавить код маркировки невозможно.'");
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтруктураКодовМаркировки.EAN);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		//Сначала проверяем, смогли ли однозначно определить товарную позицию. 
		//В случае с использованием нескольких неуникальных штрихкодов для номенклатуры нужно открывать форму уточнения данных (типовой механизм).
		Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда 
			РозничноеВыбытиеИСМПТККлиентПереопределяемый.ОткрытьФормуУточненияДанныхТоварнойПозиции(ЭтаФорма, НормализованныйКМ);
			Возврат;
		Иначе
			ВидПродукцииШК = РозничноеВыбытиеИСМПТККлиент.ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);
			//Выполняем проверку на особенности учета связанной номенклатуры:
			//если отсканирован КМ и для него найдена номенклатура, но она не имеет особенностей учета по маркировке,
			//нужно предупредить пользователя о проблемах в настройках учета.
			Если Не ЗначениеЗаполнено(ВидПродукцииШК) Тогда
				ТекстОшибки = НСтр("ru = 'Внимание! Был отсканирован код маркировки ""%1"", связанный с номенклатурой ""%2"".'")
							+ НСтр("ru = 'Данная номенклатура не имеет особенностей учета по маркировке! Необходимо изменить вид номенклатуры на ""Товар с особенностями учета"" соответствующей товарной группы!'");
				ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, НормализованныйКМ, Номенклатура);
				ИмяСобытия = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИмяСобытияРозничнаяПродажа();
				ОбщегоНазначенияИСМПТКВызовСервера.СоздатьЗаписьЖурналаРегистрации(ИмяСобытия, "Предупреждение",,, ТекстОшибки);
				ТекстСообщения = НСтр("ru = 'Внимание! Обнаружены проблемы в настройках учета маркируемой продукции! Требуется сообщить Администратору.'") + " "
							   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПодробностиВЖурналеРегистрации(); 
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			//Структуру отбора для данных Чека формируем по данным ном-ры, которые подобрались из отсканированного кода маркировки.
			СтруктураОтбораТоваровЧека = Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика);
			Если ИспользуютсяУпаковки Тогда //Это значит, что ШК зарегистрирован с упаковкой
				//В этом случае необходимо учесть в отборе упаковку, т.к. при переносе данных нужно будет сопоставлять КМ именно с той стройкой чека, 
				//где у товара также выбрана эта упаковка. Штучную упаковку считаем упаковкой, не сопоставляем ее с базовой ЕИ несмотря на коэф-т 1.
				СтруктураОтбораТоваровЧека.Вставить("Упаковка", Упаковка);
			Иначе
				//Если же упаковка в строке Чека не указана, нужно учесть в отборе пустую ссылку, т.к. в форме ПроверкаКМ коды, относящиеся к ШК без указанной упаковки,
				//в поле ЕдиницаИзмерения будут иметь значение базовой ЕИ ном-ры, а в таблице Чека соответствующая им ном-ра будет с пусты значением поля Упаковка.
				//Если в этом случае не устанавливать отбор по пустой ссылке (вообще не устанавливать отбор по упаковке), 
				//то КМ с базовой ЕИ при переносе в Чек будет сопоставляться со строкой без выбранной упаковки, так и со строками с упаковкой, что не является правильным.
				СтруктураОтбораТоваровЧека.Вставить("Упаковка", РозничноеВыбытиеИСМПТКПереопределяемый.ПолучитьПустуюСсылкуУпаковкиНоменклатуры());
			КонецЕсли;
			
			НайденнаяСтрокаТоваров = ТоварыЧека.НайтиСтроки(СтруктураОтбораТоваровЧека);
			Если НайденнаяСтрокаТоваров.Количество() = 0 Тогда
				//Если не определился товар в чеке, код не добавляем, т.к. это новая товарная позиция, которая должна добавляться через форму самого Чека.
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОтсканируйтеКМНапрямуюВЧекеККМ(); 
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли;
			
			//Если номенклатура нашлась, добавляем код в таблицу со статусом кода 1_добавлен.
			НоваяСтрокаСписка = СписокКМ.Добавить();
			НоваяСтрокаСписка.КодМаркировкиНормализованный = НормализованныйКМ;
			НоваяСтрокаСписка.КодИдентификации   = СтруктураКодовМаркировки.КодИдентификации;
			НоваяСтрокаСписка.GTIN	  		     = СтруктураКодовМаркировки.GTIN;
			НоваяСтрокаСписка.EAN			     = СтруктураКодовМаркировки.EAN;
			
			НоваяСтрокаСписка.Номенклатура	     = Номенклатура;
			НоваяСтрокаСписка.Характеристика     = Характеристика;
			НоваяСтрокаСписка.ЕдиницаИзмерения   = ?(ИспользуютсяУпаковки, Упаковка, БазоваяЕдиницаИзмерения);
			НоваяСтрокаСписка.ВидПродукции 	     = ВидПродукцииШК;
			НоваяСтрокаСписка.КлючСвязи 	     = 0; //значение необходимо установить при закрытии формы и переносе в документ
			НоваяСтрокаСписка.СтатусКода	     = "1_добавлен";
			НоваяСтрокаСписка.НомерСтрокиТоваров = "Добавлен";
			
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДобавленНовыйКодМаркировкиСПараметром(); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодИдентификации%", СтруктураКодовМаркировки.КодИдентификации);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);		
			
			ЗаполнитьПризнакИспользованияХарактеристик();
			УстановитьУсловноеОформлениеХарактеристикНоменклатуры();
				
		КонецЕсли;
	КонецЕсли;
		
	УстановитьУсловноеОформление();
			
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКодМаркировкиПослеУточненияДанных(ДанныеНоменклатуры) Экспорт
	
	ДанныеМаркировки  = ДанныеНоменклатуры.ДанныеМаркировки;
	НормализованныйКМ = ДанныеМаркировки.КодМаркировки;
	КодИдентификации  = ДанныеМаркировки.НормализованныйКодМаркировки;
	СоставКодаМаркировки = ДанныеМаркировки.СоставКодаМаркировки;
	
	Номенклатура   = ДанныеНоменклатуры.Номенклатура;
	Характеристика = ДанныеНоменклатуры.Характеристика;
	Упаковка 	   = ДанныеНоменклатуры.Упаковка;
	БазоваяЕИНоменклатуры = ПолучитьБазовуюЕИНоменклатуры(Номенклатура);
	
	Если Упаковка = БазоваяЕИНоменклатуры Тогда
		//Она не должна участвовать в отборе товаров, вместо нее отбор по пустой ссылке упаковок
		УпаковкаДляОтбора = РозничноеВыбытиеИСМПТКПереопределяемый.ПолучитьПустуюСсылкуУпаковкиНоменклатуры();
	Иначе
		УпаковкаДляОтбора = Упаковка;
	КонецЕсли;
		
	НайденныеСтрокиВЧеке = ТоварыЧека.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Упаковка", Номенклатура, Характеристика, УпаковкаДляОтбора));
	ВидПродукцииШК 		 = РозничноеВыбытиеИСМПТККлиент.ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);
	
	Если НайденныеСтрокиВЧеке.Количество() = 0 Тогда
		//Прежде чем добавить код, проверяем, что по всем параметрам (Ном + Хар + Упак) он совпадает с какой-либо строкой чека.
		//Если в Чеке такого товара нет, то добавление новой строки не выполняем.
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОтсканируйтеКМНапрямуюВЧекеККМ(); 
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	ИначеЕсли Не Номенклатура = Неопределено
		И Не ЗначениеЗаполнено(ВидПродукцииШК) Тогда
		
		//Выполняем проверку на особенности учета связанной номенклатуры:
		//если отсканирован КМ и для него найдена номенклатура, но она не имеет особенностей учета по маркировке,
		//добавлять такой код в таблицу нельзя.
		ТекстСообщения = НСтр("ru = 'Внимание: код маркировки относится к номенклатуре %1, которая не имеет особенностей учета. Добавить код маркировки невозможно.'");
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Номенклатура);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	Иначе
		НоваяСтрокаСписка = СписокКМ.Добавить();
		НоваяСтрокаСписка.КодМаркировкиНормализованный = НормализованныйКМ;
		НоваяСтрокаСписка.КодИдентификации   = КодИдентификации;
		НоваяСтрокаСписка.GTIN	  		     = СоставКодаМаркировки.GTIN;
		НоваяСтрокаСписка.EAN			     = СоставКодаМаркировки.EAN;
		
		ВидПродукцииШК = РозничноеВыбытиеИСМПТККлиент.ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);
		
		НоваяСтрокаСписка.Номенклатура	     = Номенклатура;
		НоваяСтрокаСписка.Характеристика     = Характеристика;
		НоваяСтрокаСписка.ЕдиницаИзмерения   = Упаковка;
		НоваяСтрокаСписка.ВидПродукции 	     = ВидПродукцииШК;
		НоваяСтрокаСписка.КлючСвязи 	     = 0; //значение необходимо установить при закрытии формы и переносе в документ
		НоваяСтрокаСписка.СтатусКода	     = "1_добавлен";
		НоваяСтрокаСписка.НомерСтрокиТоваров = "Добавлен";
		
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДобавленНовыйКодМаркировкиСПараметром(); 
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодИдентификации%", КодИдентификации);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);		
			
		ЗаполнитьПризнакИспользованияХарактеристик();
		УстановитьУсловноеОформлениеХарактеристикНоменклатуры();
		
		УстановитьУсловноеОформление();
	КонецЕсли;                        		
	
КонецПроцедуры

&НаКлиенте
Функция НайтиПоКодуВСпискеКМ(КодИдентификации)
	
	СтруктураПоиска = Новый Структура("КодИдентификации", КодИдентификации);
	НайденныеСтроки = СписокКМ.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
функция ПолучитьНоменклатуруПоШтрихкоду(Штрихкод)
	
	Возврат РозничноеВыбытиеИСМПТКПереопределяемый.ПолучитьНоменклатуруПоШтрихкодуВРозничномКонтуре(Штрихкод);
		
КонецФункции

&НаСервере
Функция ПолучитьБазовуюЕИНоменклатуры(Номенклатура)
	
	Возврат РозничноеВыбытиеИСМПТКПереопределяемый.ПолучитьЗначениеБазовойЕИНоменклатуры(Номенклатура);
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПроверкаЗавершена", "Видимость", Не ТолькоПросмотр);	
	Если ТолькоПросмотр Тогда
		ЭтаФорма.Заголовок = НСтр("ru = 'Просмотр списка кодов маркировки чека'"); 
	КонецЕсли;
	
	УстановитьОтборТабличнойЧасти(Элементы.СписокКМ, Новый Структура("СтатусКода", "1_")); 
				
	//Характеристики
	ХарактеристикиИспользуются = ОбщегоНазначенияИСМПТКПереопределяемый.ПроверитьИспользованиеХарактеристик();
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыХарактеристика", "Видимость", ХарактеристикиИспользуются);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборТабличнойЧасти(Таблица, Знач ДанныеОтбора, ДополнитьОтбор = Ложь)
	
	Если Не ДополнитьОтбор
		ИЛИ Таблица.ОтборСтрок = Неопределено Тогда
		Таблица.ОтборСтрок = Новый ФиксированнаяСтруктура(ДанныеОтбора);
	Иначе
		Для Каждого ЭлементСтруктурыОтбора Из Таблица.ОтборСтрок Цикл
			Если ДанныеОтбора.Свойство(ЭлементСтруктурыОтбора.Ключ) = Неопределено Тогда
				ДанныеОтбора.Вставить(ЭлементСтруктурыОтбора.Ключ, ЭлементСтруктурыОтбора.Значение);
			КонецЕсли;
		КонецЦикла;
		Таблица.ОтборСтрок = Новый ФиксированнаяСтруктура(ДанныеОтбора);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ИспользуютсяСканерыШтрихкода = (ОбщегоНазначенияИСМПТКВызовСервераПереопределяемый.ОборудованиеПоПараметрам("СканерШтрихкода").Количество() > 0);
	Иначе
		ИспользуютсяСканерыШтрихкода = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПовторныйВводКМ(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Параметры.СтрокаСпискаКМ.СтатусКода = "1_исходный" Тогда 
			Параметры.СтрокаСпискаКМ.СтатусКода  = "2_удалить"; //Изначально имеющийся в длокументе код сохраняем в таблице в скрытом виде
		Иначе
			//Если код был добавлен в список уже в форме проверки, удаляем его сразу
			НайденныеСтроки = СписокКМ.НайтиСтроки(Новый Структура("КодИдентификации", Параметры.СтрокаСпискаКМ.КодИдентификации));
			СписокКМ.Удалить(НайденныеСтроки[0]);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьУсловноеОформление();

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеХарактеристикНоменклатуры() Экспорт
	
	ДанныеНоменклатура = Новый Структура();
	ДанныеНоменклатура.Вставить("Использовать",   Истина);
	ДанныеНоменклатура.Вставить("ИмяПоля", 	 	  "СписокКМНоменклатура");
	ДанныеНоменклатура.Вставить("ПутьКПолю", 	  "СписокКМ.Номенклатура");
	
	ДанныеХарактеристика = Новый Структура();
	ДанныеХарактеристика.Вставить("Использовать", Истина);
	ДанныеХарактеристика.Вставить("ИмяПоля",   	  "СписокКМХарактеристика");
	ДанныеХарактеристика.Вставить("ПутьКПолю", 	  "СписокКМ.ХарактеристикиИспользуются");
	
	РозничноеВыбытиеИСМПТКПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатурыВРабочемМесте(ЭтаФорма, ДанныеНоменклатура, ДанныеХарактеристика);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакИспользованияХарактеристик(НомерСтроки = Неопределено)
	
	РозничноеВыбытиеИСМПТКПереопределяемый.ЗаполнитьПризнакИспользованияХарактеристикВРабочемМесте(СписокКМ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыводаОповещенияПередЗакрытиемФормы(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		АдресХранилища = ПоместитьВХранилище();
		Закрыть(АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВХранилище()

	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СписокКМ.Выгрузить(), Новый УникальныйИдентификатор);
	
	Возврат АдресВоВременномХранилище;

КонецФункции

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыборДанныхПоискаПоКМ(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ДанныеДляЗаполнения = Результат.ЗначенияПоиска[0];
		ОбработатьКодМаркировкиПослеУточненияДанных(ДанныеДляЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ОповещениеОбработатьДанныеПоПолученнымШК(СтруктураРезультат) Экспорт
	
	ОбработатьКодМаркировкиПослеУточненияДанных(СтруктураРезультат);
	
КонецПроцедуры

#КонецОбласти