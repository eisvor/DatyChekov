
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Заголовок = НСтр("ru = 'Сканирование кода маркировки'");
		
	Номенклатура     = Параметры.Номенклатура;
	Характеристика   = Параметры.Характеристика;
	ЕдиницаИзмерения = Параметры.ЕдиницаИзмерения;
	
	//Специфика некоторых решений, допускающих регистрацию неуникальных ШК номенклатуры:
	//Открытие формы сканирования КМ может происходить уже после добавления товара в ТЧ документа (Чека).
	//В этом случае в Параметрах содержится дополнительный флаг - ОткрытиеПослеДобавления (Истина).
	//Его необходимо передать в структуре данных при закрытии формы, чтобы корректно обработать результат
	//выбора пользователя и не задублировать строку товаров.
	ОткрытиеПослеДобавления = ?(Параметры.Свойство("ОткрытиеПослеДобавления"), Параметры.ОткрытиеПослеДобавления, Ложь);
	
	Если ТипЗнч(Параметры.ДанныеШтрихкода) = Тип("Массив") Тогда
		ДанныешКПараметры = Параметры.ДанныеШтрихкода[0].Штрихкод;
	Иначе
		ДанныеШКПараметры = Параметры.ДанныеШтрихкода;
	КонецЕсли;
	ДанныеШтрихкода = ДанныеШКПараметры;
	ВидПродукции    = Параметры.ВидПродукции;
	Если Параметры.Свойство("КлючСвязиСтроки") Тогда 
		КлючСвязиСтроки = Параметры.КлючСвязиСтроки;
	Иначе
		КлючСвязиСтроки = Неопределено;
	КонецЕсли;
	
	УстановитьУсловноеОформлениеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование

	ОбновитьПредставленияНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	                                                                                                             
	// ПодключаемоеОборудование
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентПереопределяемый.ОбрабатыватьВнешнееСобытиеТО() Тогда 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() 
		И РозничноеВыбытиеИСМПТККлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
		Если ИмяСобытия = "ScanData" Или ИмяСобытия = "Штрихкод" Или ИмяСобытия = "ПолученШтрихкод" Тогда
			ОбработкаСобытияСканераОбщая(Параметр, ИмяСобытия, Источник);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСобытияСканераОбщая(Параметр, Событие, Источник, Данные = Неопределено)
	
	ДанныеМаркировкиСоСканера = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентПереопределяемый.ВнешнееСобытиеПреобразоватьДанныеСоСканераВСтруктуру(ЭтотОбъект, Источник, Событие, Данные, Параметр);
	
	Если ДанныеМаркировкиСоСканера = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверкаФорматаТранспортногоКодаПройденаУспешно(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр)) Тогда
		Возврат;
	КонецЕсли;
			
	//Проверяем, что отсканирован КМ
	ИсходныйШтрихкод = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(ДанныеМаркировкиСоСканера.Штрихкод);
	ДанныеМаркировки = РозничноеВыбытиеИСМПТКВызовСервера.РазобратьШтриховойКодТовара(ИсходныйШтрихкод, Истина);
	
	Если Не ДанныеМаркировки.Разобран Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось разобрать код маркировки!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;		
	ИначеЕсли ЗначениеЗаполнено(ДанныеМаркировки.ОписаниеОшибки) Тогда
		ТекстСообщения = НСтр("ru = 'При разборе данных произошла ошибка.'") 
					   + Символы.ПС
					   + ДанныеМаркировки.ОписаниеОшибки;
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ДанныеМаркировки.Свойство("ТипИдентификатораТовара") Тогда
		ЭтоКодМарки	 = РозничноеВыбытиеИСМПТККлиент.ЭтоКодМаркировки(ДанныеМаркировки.ТипИдентификатораТовара);
	Иначе
		ЭтоКодМарки  = Ложь;
	КонецЕсли;
	
	//Подменяем значение отсканированного КМ на закодированную строку, чтобы в дальнейшем не возникло проблемы при передачи клиент-сервер, 
	//т.к. КМ может содержать спецсимволы .
	ДанныеМаркировкиСоСканера.Штрихкод = ИсходныйШтрихкод;
	
	//Проверяем, с какой номенклатурой связан полученный штрихкод
	СтруктураОтбораДляПоискаШК = Новый Структура();
	СтруктураОтбораДляПоискаШК.Вставить("Номенклатура",   Номенклатура);
	СтруктураОтбораДляПоискаШК.Вставить("Характеристика", Характеристика);
	СтруктураОтбораДляПоискаШК.Вставить("Упаковка", 	  ЕдиницаИзмерения);
	СтруктураОтбораДляПоискаШК.Вставить("Штрихкод", 	  ДанныеМаркировки.EAN);
	ОтсканированныйШКСоответствует = ПроверитьСоответствиеШКНоменклатуре(СтруктураОтбораДляПоискаШК);
	НоменклатураПустаяСсылка   	   = ПолучитьПустуюСсылкуНоменклатура();
	
	Если Не ОтсканированныйШКСоответствует Тогда
		
		ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(ДанныеМаркировки.EAN);
		Если ДанныеНоменклатуры = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось определить номенклатуру по отсканированному штрихкоду.'");
			ВывестиСообщениеНаСтраницеВводаКодаМаркировки(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		НоменклатураПоШК     = ДанныеНоменклатуры.Номенклатура; 
		ВидПродукцииШК 	     = РозничноеВыбытиеИСМПТККлиент.ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);
		ЕдиницаИзмеренияПоШК = ДанныеНоменклатуры.Упаковка;
		ХарактеристикаПоШК   = ДанныеНоменклатуры.Характеристика;
		
		СтрокаДляПодстановки = ?(ЗначениеЗаполнено(ХарактеристикаПоШК), " (" + ХарактеристикаПоШК, "");
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияПоШК) Тогда
			СтрокаДляПодстановки = ?(ЗначениеЗаполнено(СтрокаДляПодстановки), 
									 СтрокаДляПодстановки + ", " + ЕдиницаИзмеренияПоШК + ")", 
									 " (" + ЕдиницаИзмеренияПоШК + ")");
		Иначе
			СтрокаДляПодстановки = ?(ЗначениеЗаполнено(СтрокаДляПодстановки), СтрокаДляПодстановки + ")", "");
		КонецЕсли;								 
		
		Если Не Номенклатура = НоменклатураПоШК 
			ИЛИ (Номенклатура = НоменклатураПоШК
				И Не ЕдиницаИзмерения = ЕдиницаИзмеренияПоШК
				И Не ВидПродукцииШК = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты")) Тогда //Разные ЕИ считаем разными товарами, только если работа не с ТГ Фармакология
			ТекстСообщения = НСтр("ru = 'Отсканированный штрихкод относится к другой номенклатуре: %Номенклатура%%Характеристики%!'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номенклатура%", 	 НоменклатураПоШК); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Характеристики%", СтрокаДляПодстановки);
			ВывестиСообщениеНаСтраницеВводаКодаМаркировки(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВидПродукцииШК)
			И ЭтоКодМарки Тогда
			//Номенклатура, связанная с отсканированным ШК, не имеет особенностей учета
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Невозможно добавить код маркировки: связанная с ним номенклатура (%1) не относится к маркируемой продукции.'"), НоменклатураПоШК);
			ВывестиСообщениеНаСтраницеВводаКодаМаркировки(ТекстСообщения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	Если НЕ ЭтоКодМарки Тогда
		//Номенклатура с особенностями учета, но отсканирован не код маркировки
		ТекстСообщения = НСтр("ru = 'Отсканированный штрихкод не соответствует формату кода маркировки!'"); 
		ВывестиСообщениеНаСтраницеВводаКодаМаркировки(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	АдресРезультатаОбработкиШтрихкода = ПоместитьВоВременноеХранилище(ДанныеМаркировкиСоСканера, УникальныйИдентификатор);
	КодМаркировкиОбработан = Истина;
	ЗакрытьФормуПриСканировании();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьБезМаркировки(Команда)
	
	ОбработатьБезВводаМарки = Истина;
	
	Комментарий = Нстр("ru='Отказ ввода кода маркировки по инициативе пользователя'");
	ДобавитьСообщениеДляЖурналаРегистрацииОНевозможностиВводаКодаМарки(Комментарий);
	
	ДанныеШтрихкодаБезМаркировки = ДанныеШтрихкода();
	ДанныеШтрихкодаБезМаркировки.Номенклатура            = Номенклатура;
	ДанныеШтрихкодаБезМаркировки.Характеристика          = Характеристика;
	ДанныеШтрихкодаБезМаркировки.Упаковка                = ЕдиницаИзмерения;
	ДанныеШтрихкодаБезМаркировки.Количество		         = 1;
	ДанныеШтрихкодаБезМаркировки.ТипУпаковки             = ПредопределенноеЗначение("Перечисление.ТипыУпаковокИСМПТК.МаркированныйТовар");
	ДанныеШтрихкодаБезМаркировки.ОбработатьБезМаркировки = Истина;
 	ДанныеШтрихкодаБезМаркировки.ВидыПродукции.Добавить(ВидПродукции);
	Если ТипЗнч(ДанныеШтрихкода) = Тип("Строка") Тогда
		//Значит изначально отсканировали не код маркировки, а ЕАН или иной штрихкод. Проверяем его формат
		Если РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПовтИсп.ЭтоEAN13(ДанныеШтрихкода)
			Или РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПовтИсп.ЭтоEAN8(ДанныеШтрихкода) Тогда
			EAN = ДанныеШтрихкода;
		Иначе
			EAN = "";
		КонецЕсли;		
	Иначе
		//Был отсканирован КМ, у него есть разобранная структура, которая в этом случае находится в параметре ДанныеШтрихкода - получаем сведения из них.
		EAN = ДанныеШтрихкода.EAN; 
	КонецЕсли;
	ДанныеШтрихкодаБезМаркировки.Штрихкод             = EAN;
	ДанныеШтрихкодаБезМаркировки.МаркируемаяПродукция = Ложь;
	
	ДобавитьБезМаркировкиЗавершение(ДанныеШтрихкодаБезМаркировки, Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ДобавитьБезМаркировкиЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеШтрихкода.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковокИСМПТК.МаркированныйТовар") Тогда
		
		ОбработатьШтрихкодКодаМаркировки(ДанныеШтрихкода, ДополнительныеПараметры);
		
	Иначе
		
		СообщитьОНесоответствииУказанногоШтрихкода(ДанныеШтрихкода.Штрихкод);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОНесоответствииУказанногоШтрихкода(Штрихкод)
	
	ТекстСообщения = НСтр("ru = 'Формат указанного штрихкода не соответствует формату кодов маркировки, установленному правилами маркировки товаров.'"); 
	ВывестиСообщениеНаСтраницеВводаКодаМаркировки(ТекстСообщения);
	ДобавитьСообщениеДляЖурналаРегистрацииОНевозможностиВводаКодаМарки(ТекстСообщения, Штрихкод);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодКодаМаркировки(ДанныеШтрихкода, ДополнительныеПараметры)

	НужноВывестиСообщениеОНесоответствии = Ложь;
	
	//Проверяем наличие информации о номенклатуре
	Если ДанныеШтрихкода.Свойство("Номенклатура") Тогда
		Если ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) И ДанныеШтрихкода.Номенклатура <> Номенклатура Тогда
			НужноВывестиСообщениеОНесоответствии = Истина;
		КонецЕсли;
	Иначе
		//Получаем и проверяем данные ном-ры по штрихкоду
		ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(ДанныеШтрихкода.Штрихкод);
		Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
			НоменклатураПоШК   = ДанныеНоменклатуры.Номенклатура; 
		Иначе
			НужноВывестиСообщениеОНесоответствии = Истина;
		КонецЕсли;
		
		Если НоменклатураПоШК <> Номенклатура Тогда
			НужноВывестиСообщениеОНесоответствии = Истина;
		КонецЕсли;
	КонецЕсли;	
		
	Если НужноВывестиСообщениеОНесоответствии Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Код маркировки не соответствует номенклатуре %1'"), Номенклатура);
		ВывестиСообщениеНаСтраницеВводаКодаМаркировки(ТекстСообщения);
		ДобавитьСообщениеДляЖурналаРегистрацииОНевозможностиВводаКодаМарки(ТекстСообщения, ДанныеШтрихкода.Штрихкод);
		Возврат;
	КонецЕсли;
	
	АдресРезультатаОбработкиШтрихкода = ПоместитьВоВременноеХранилище(ДанныеШтрихкода, УникальныйИдентификатор);
	КодМаркировкиОбработан = Истина;
	ЗакрытьФормуПриСканировании();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуПриСканировании()
	
	Если КодМаркировкиОбработан Тогда
		
		Результат = Новый Структура();
		РезультатОбработкиШтрихкода = Новый Структура();
		Если ОбработатьБезВводаМарки Тогда
			РезультатОбработкиШтрихкода.Вставить("ТребуетсяОбработкаШтрихкода", Истина);
			РезультатОбработкиШтрихкода.Вставить("ИсходныеДанные", 			ДанныеШтрихкодаБезМаркировки);
			РезультатОбработкиШтрихкода.Вставить("ОткрытиеПослеДобавления", ОткрытиеПослеДобавления);
			Результат.Вставить("ОбработчикОповещения", "ДобавлениеКМКакНемаркированногоТовараИСМПТК");
			Результат.Вставить("ДопДанные", РезультатОбработкиШтрихкода);
		Иначе
			РезультатОбработкиШтрихкода.Вставить("ТребуетсяОбработкаШтрихкода", Истина);
			РезультатОбработкиШтрихкода.Вставить("ИсходныеДанные", ДанныеМаркировкиСоСканера);
			Если Не КлючСвязиСтроки = Неопределено Тогда
				РезультатОбработкиШтрихкода.Вставить("КлючСвязиСтроки", КлючСвязиСтроки);
			КонецЕсли;
			РезультатОбработкиШтрихкода.Вставить("ОткрытиеПослеДобавления", ОткрытиеПослеДобавления);
			Результат.Вставить("ОбработчикОповещения", "ВводКодаМаркировкиПослеПредупрежденияИСМПТК");
			Результат.Вставить("ДопДанные", РезультатОбработкиШтрихкода);
		КонецЕсли;
		
	Иначе
		Результат = ПолучитьИзВременногоХранилища(АдресРезультатаОбработкиШтрихкода);
	КонецЕсли;
	Закрыть(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСообщениеНаСтраницеВводаКодаМаркировки(ТекстСообщения)
	
	ИмяЭлемента = "ИнформацияВводаКодаМаркировки";
	ДобавитьЭлементДекорацияНаФорму();
	Элементы[ИмяЭлемента].Заголовок = ТекстСообщения;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементДекорацияНаФорму()
	
	ИмяЭлемента = "ИнформацияВводаКодаМаркировки";
	
	Если Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
		Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), Элементы.ГруппаИнформация);
		Элементы[ИмяЭлемента].ЦветТекста = Новый Цвет(255, 0, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеШтрихкода()
	
	ДанныеШтрихкодаСтруктура = РозничноеВыбытиеИСМПТК.ИнициализироватьДанныеШтрихкода();
	
	Возврат ДанныеШтрихкодаСтруктура;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьПредставленияНоменклатуры()
	
	Представление = РозничноеВыбытиеИСМПТККлиентСервер.ПредставлениеНоменклатурыФорматированнойСтрокой(Номенклатура);
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСообщениеДляЖурналаРегистрацииОНевозможностиВводаКодаМарки(Комментарий, КодМаркировки = "")
	
	СтруктураСообщения = Новый Структура;
	
	СтруктураСообщения.Вставить("ИмяСобытия",     НСтр("ru='Отказ от сканирования кода маркировки'", ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.КодОсновногоЯзыка()));
	СтруктураСообщения.Вставить("Уровень",        "Информация");
	СтруктураСообщения.Вставить("Комментарий",    Комментарий);
	СтруктураСообщения.Вставить("Данные",         Неопределено);
	СтруктураСообщения.Вставить("СсылкаНаОбъект", Неопределено);
	СтруктураСообщения.Вставить("КодМаркировки",  КодМаркировки);
	
	РозничноеВыбытиеИСМПТККлиентПереопределяемый.ПриОпределенииИнформацииОбОтказеВводаКодаМаркиДляЖурналаРегистрации(ВладелецФормы, СтруктураСообщения);
	ДобавитьСообщениеДляЖурналаРегистрации(СтруктураСообщения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьСообщениеДляЖурналаРегистрации(СтруктураСообщения)
	
	Если СтруктураСообщения.СсылкаНаОбъект <> Неопределено Тогда
		МетаданныеОбъекта = СтруктураСообщения.СсылкаНаОбъект.Метаданные();
	КонецЕсли;
	
	УровеньЖурнала = Неопределено;
	Если СтруктураСообщения.Уровень = "Информация" Тогда
		УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
	ИначеЕсли СтруктураСообщения.Уровень = "Ошибка" Тогда
		УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
	ИначеЕсли СтруктураСообщения.Уровень = "Предупреждение" Тогда
		УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
	ИначеЕсли СтруктураСообщения.Уровень = "Примечание" Тогда
		УровеньЖурнала = УровеньЖурналаРегистрации.Примечание;
	КонецЕсли;
	
	РозничноеВыбытиеИСМПТКПереопределяемый.ДобавитьСообщениеДляЖурналаРегистрации(СтруктураСообщения.ИмяСобытия, УровеньЖурнала, МетаданныеОбъекта, СтруктураСообщения.Данные, СтруктураСообщения.Комментарий);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная") Тогда
		КартинкаВП = БиблиотекаКартинок.СканированиеМаркиОбувьИСМПТК;
		
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда
		КартинкаВП = БиблиотекаКартинок.СканированиеМаркиТабакИСМПТК;	
		
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция") Тогда
		КартинкаВП = БиблиотекаКартинок.СканированиеМаркиМолокоИСМПТК;
		
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность") Тогда
		КартинкаВП = БиблиотекаКартинок.СканированиеМаркиТекстильИСМПТК;
		
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") Тогда
		КартинкаВП = БиблиотекаКартинок.СканированиеМаркиЛекарстваИСМПТК;
		
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.БезалкогольныеНапитки") Тогда
		КартинкаВП = БиблиотекаКартинок.СканированиеМаркиВодаИНапиткиИСМПТК;
		
	Иначе
		КартинкаВП = БиблиотекаКартинок.СканированиеМаркиТабакИСМПТК; //по умолчанию
	КонецЕсли;
	
	Элементы.ДекорацияКартинка.Картинка = КартинкаВП;
	
КонецПроцедуры

&НаСервере
функция ПолучитьНоменклатуруПоШтрихкоду(Штрихкод)
	
	Возврат РозничноеВыбытиеИСМПТКПереопределяемый.ПолучитьНоменклатуруПоШтрихкодуВРозничномКонтуре(Штрихкод);
		
КонецФункции

&НаКлиенте
Функция ВозможностьВводаПоШК()
	
	Результат = Истина;
	
	Если ТолькоПросмотр Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Если НЕ Результат Тогда
		ОчиститьСообщения();
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияФормаЗаблокированаВводНевозможен();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПроверитьСоответствиеШКНоменклатуре(СтруктураПроверки)
	
	Возврат РозничноеВыбытиеИСМПТКПереопределяемый.ПроверитьСоответствиеШКНоменклатуре(СтруктураПроверки);
	
КонецФункции

&НаСервере
Функция ПолучитьПустуюСсылкуНоменклатура()
	
	Возврат ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьПустуюСсылкуНоменклатура();

КонецФункции

#КонецОбласти