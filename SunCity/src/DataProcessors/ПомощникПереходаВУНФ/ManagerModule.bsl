///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Выполняет анализ готовности информационной базы к переходу.
//
// Возвращаемое значение:
//  Структура - коллекция признаков готовности к переходу по разделам.
//
Функция АнализГотовностиКПереходу() Экспорт
	
	РезультатАнализа = Новый Структура;
	РезультатАнализа.Вставить("ЗарегистрированыИзмененияОбмена", Ложь);
	РезультатАнализа.Вставить("ПомеченыНаУдалениеОбъекты",       Ложь);
	РезультатАнализа.Вставить("ОткрытыКассовыеСмены",            Ложь);
	РезультатАнализа.Вставить("ИспользуетсяЕГАИС",               Ложь);
	РезультатАнализа.Вставить("ИспользуетсяИСМП",                Ложь);
	РезультатАнализа.Вставить("ИспользуетсяВЕТИС",               Ложь);
	
	// Проверим наличие незавершенных синхронизаций.
	УзлыОбмена = ОбменДаннымиСервер.УзлыОбменаБСП();
	Для Каждого СтрокаОбмена Из УзлыОбмена Цикл
		НомерОтправленного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОбмена.УзелИнформационнойБазы, "НомерОтправленного");
		ВыборкаИзменений   = ПланыОбмена.ВыбратьИзменения(СтрокаОбмена.УзелИнформационнойБазы, НомерОтправленного);
		Если ВыборкаИзменений.Следующий() Тогда
			РезультатАнализа.ЗарегистрированыИзмененияОбмена = Истина;
		КонецЕсли;
		Если РезультатАнализа.ЗарегистрированыИзмененияОбмена Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Проверим наличие объектов, помеченных на удаление.
	ПомеченныеНаУдаление = УдалениеПомеченныхОбъектов.ПомеченныеНаУдаление();
	Если ПомеченныеНаУдаление.Количество() > 0 Тогда
		РезультатАнализа.ПомеченыНаУдалениеОбъекты = Истина;
	КонецЕсли;
	
	// Проверим наличие незакрытых кассовых смен.
	НезакрытыеКассовыеСмены = РозничныеПродажиСервер.НезакрытыеКассовыеСмены();
	Если НезакрытыеКассовыеСмены.Количество() > 0 Тогда
		РезультатАнализа.ОткрытыКассовыеСмены = Истина;
	КонецЕсли;
	
	// Проверим использование ГОСИС.
	Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		РезультатАнализа.ИспользуетсяЕГАИС = Истина;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
		РезультатАнализа.ИспользуетсяИСМП = Истина;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИС") Тогда
		РезультатАнализа.ИспользуетсяВЕТИС = Истина;
	КонецЕсли;
	
	Возврат РезультатАнализа;
	
КонецФункции

// Выполняет http-метод внешнего интерфейса сервиса.
//
// Параметры:
//  АдресПрограммногоИнтерфейса - Строка - Адрес прогаммного интерфейса сервиса;
//  ПараметрыАвторизации - Структура - Логин, Пароль, КодАбонента;
//  Метод - Строка - Метод программного интерфейса;
//  Данные- Структура;
//  Таймаут - Число - Таймаут подключения;
//
// Возвращаемое значение:
//  Структура - См. ШаблонРезультата().
//
Функция ВыполнитьМетодВнешнегоИнтерфейса(АдресПрограммногоИнтерфейса, ПараметрыАвторизации, Метод, Данные = Неопределено, Таймаут = 30) Экспорт
	
	СтруктураURL = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресПрограммногоИнтерфейса);
	Соединение = Соединение(СтруктураURL.Хост, ПараметрыАвторизации.Логин, ПараметрыАвторизации.Пароль, Таймаут);
	Запрос = Новый HTTPЗапрос(СтрШаблон("%1/execute", СтруктураURL.ПутьНаСервере));
	
	Если Данные <> Неопределено Тогда
		ДанныеЗапроса = ОбщегоНазначения.СкопироватьРекурсивно(Данные); // Структура
	Иначе
		ДанныеЗапроса = Новый Структура;
	КонецЕсли; 
	
	СоставМетода = СтрРазделить(Метод,"/");
	ТипЗапроса = СоставМетода[0];
	СоставМетода.Удалить(0);
	Метод = СтрСоединить(СоставМетода, "/");
	
	РазделОсновное = Новый Структура;
	РазделОсновное.Вставить("type", ТипЗапроса);
	РазделОсновное.Вставить("method", Метод);
	Если ТипЗнч(ДанныеЗапроса) = Тип("Структура") Тогда
		ДанныеЗапроса.Вставить("general", РазделОсновное);
	КонецЕсли;
	
	Если ПараметрыАвторизации.Свойство("КодАбонента") Тогда
		РазделАвторизация = Новый Структура;
		РазделАвторизация.Вставить("account", ПараметрыАвторизации.КодАбонента);
		Если ТипЗнч(ДанныеЗапроса) = Тип("Структура") Тогда
			ДанныеЗапроса.Вставить("auth", РазделАвторизация);
		КонецЕсли;
	КонецЕсли; 
	
	Запрос.УстановитьТелоИзСтроки(РаботаВМоделиСервисаБТС.СтрокаИзСтруктурыJSON(ДанныеЗапроса));
	
	Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
	Возврат РезультатЗапроса(Ответ);
	
КонецФункции

// Выполняет выгрузку данных в соответствии с настройками.
//
// Параметры:
//  СпособПерехода - Число - 0 (в сервис), 1 (в файловую ИБ);
//  Этап - Строка - "СправочнаяИнформация", "Остатки";
//  Организации - Массив - СправочникСсылка.Организации;
//  ДатаОстатков - Дата;
//
// Возвращаемое значение:
//  Строка - Текст сообщения обмена.
//
Функция ВыгрузитьДанные(СпособПерехода, Этап, Организации, СтруктураПараметров) Экспорт
	
	КомпонентыОбмена = КомпонентыОбмена();
	
	// Устанавливаем параметры конвертации.
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	ПараметрыКонвертации.Вставить("ДатаОстатков", СтруктураПараметров.ДатаОстатков);
	ПараметрыКонвертации.Вставить("ВыгружатьСклады", СтруктураПараметров.ВыгружатьСклады);
	ПараметрыКонвертации.Вставить("ТолькоЦеныПравилЦенообразованияМагазинов", СтруктураПараметров.ТолькоЦеныПравилЦенообразованияМагазинов);
	ПараметрыКонвертации.Вставить("ВыгружаемаяКартинкаНоменклатуры", СтруктураПараметров.ВыгружаемаяКартинкаНоменклатуры);
	
	Если Этап = "СправочнаяИнформация" Тогда
		ПараметрыКонвертации.Вставить("ПереходНаНовуюРедакцию", Истина);
	КонецЕсли;
	
	// Открываем файл обмена.
	ИмяФайлаОбмена = ПолучитьИмяВременногоФайла("xml");
	ОбменДаннымиXDTOСервер.ОткрытьФайлВыгрузки(КомпонентыОбмена, ИмяФайлаОбмена);
	
	СценарийВыгрузки = Новый ТаблицаЗначений;
	СценарийВыгрузки.Колонки.Добавить("ИмяПОД");
	СценарийВыгрузки.Колонки.Добавить("ИмяОбъекта");

	Если Этап = "Остатки" Тогда
		// Выгрузка через сценарий.
		Для Каждого ПравилоОбработкиДанных Из КомпонентыОбмена.ПравилаОбработкиДанных Цикл
			
			Если СтрНайти(ПравилоОбработкиДанных.Имя, "_Остатки") = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаСценария = СценарийВыгрузки.Добавить();
			СтрокаСценария.ИмяПОД = ПравилоОбработкиДанных.Имя;
			СтрокаСценария.ИмяОбъекта = ПравилоОбработкиДанных.ИмяТаблицыДляВыборки;
		КонецЦикла;
		
		СтрокаСценария = СценарийВыгрузки.Добавить();
		СтрокаСценария.ИмяПОД = "Документ_НачислениеИСписаниеБонусныхБаллов_Отправка";

		КомпонентыОбмена.СценарийВыгрузки = СценарийВыгрузки;
		
		ОбменДаннымиXDTOСервер.ПроизвестиВыгрузкуДанных(КомпонентыОбмена);

	ИначеЕсли Этап = "КартинкиНоменклатуры" Тогда
		
		СтрокаСценария = СценарийВыгрузки.Добавить();
		СтрокаСценария.ИмяПОД = "Справочник_НоменклатураКартинки_Отправка";

		КомпонентыОбмена.СценарийВыгрузки = СценарийВыгрузки;
		
		ОбменДаннымиXDTOСервер.ПроизвестиВыгрузкуДанных(КомпонентыОбмена);

	ИначеЕсли Этап = "СправочнаяИнформация" Тогда
		
		// Обработчики перед конвертацией.
		Попытка
			КомпонентыОбмена.МенеджерОбмена.ПередКонвертацией(КомпонентыОбмена);
		Исключение
			ТекстОшибки = Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Событие: %1.
					|Обработчик: ПередКонвертацией.
					|
					|Ошибка выполнения обработчика.
					|%2.'"),
				КомпонентыОбмена.НаправлениеОбмена,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

			ОбменДаннымиXDTOСервер.ЗаписатьВПротоколВыполнения(КомпонентыОбмена, ТекстОшибки);
		КонецПопытки;
		
		// Формирование списка объектов к выгрузке.
		СписокДополнениеКВыгрузке = ОбъектыКВыгрузке();
		
		// Выгрузка объектов.
		Если СписокДополнениеКВыгрузке.Количество() > 0 Тогда
			Для Каждого ЭлементСписка Из СписокДополнениеКВыгрузке Цикл
				СсылкаВыгрузки = ЭлементСписка.Значение;
				Если СтруктураПараметров.ВыгружатьКартинкиОтдельно
					И ТипЗнч(СсылкаВыгрузки) = Тип("СправочникСсылка.НоменклатураПрисоединенныеФайлы") Тогда
					Продолжить;
				КонецЕсли;
				ПравилоОбработки = 
					КомпонентыОбмена.ПравилаОбработкиДанных.Найти(СсылкаВыгрузки.Метаданные(), "ОбъектВыборкиМетаданные");
				Если ПравилоОбработки = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СсылкаВыгрузки.ПолучитьОбъект(), ПравилоОбработки);
			КонецЦикла;
		КонецЕсли;
		
		// Выгрузка через сценарий.
		СтрокаСценария = СценарийВыгрузки.Добавить();
		СтрокаСценария.ИмяПОД = "Справочник_ШтрихкодыНоменклатуры_Отправка";
		СтрокаСценария.ИмяОбъекта = "РегистрСведений.Штрихкоды";
		
		СтрокаСценария = СценарийВыгрузки.Добавить();
		СтрокаСценария.ИмяПОД = "Справочник_СкидкиНаценки_Отправка";
		СтрокаСценария.ИмяОбъекта = "Справочник.СкидкиНаценки";

		СтрокаСценария = СценарийВыгрузки.Добавить();
		СтрокаСценария.ИмяПОД = "Справочник_УсловияПредоставленияСкидокНаценок_Отпр";
		СтрокаСценария.ИмяОбъекта = "Справочник.УсловияПредоставленияСкидокНаценок";

		СтрокаСценария = СценарийВыгрузки.Добавить();
		СтрокаСценария.ИмяПОД = "Справочник_СерийныеНомераПС_Отправка";
		СтрокаСценария.ИмяОбъекта = "Справочник.СерийныеНомера";

		СтрокаСценария = СценарийВыгрузки.Добавить();
		СтрокаСценария.ИмяПОД = "Справочник_СостояниеОплатыЗаказа_Отправка";
		СтрокаСценария.ИмяОбъекта = "РегистрСведений.СостояниеОплатыЗаказаПокупателя";

		СтрокаСценария = СценарийВыгрузки.Добавить();
		СтрокаСценария.ИмяПОД = "Справочник_СостояниеОтгрузкиЗаказа_Отправка";
		СтрокаСценария.ИмяОбъекта = "РегистрСведений.СостояниеДоставкиЗаказаПокупателя";

		СтрокаСценария = СценарийВыгрузки.Добавить();
		СтрокаСценария.ИмяПОД = "Справочник_КлассификаторОрганизацийЕГАИС_Отправка";
		СтрокаСценария.ИмяОбъекта = "Справочник.КлассификаторОрганизацийЕГАИС";

		СтрокаСценария = СценарийВыгрузки.Добавить();
		СтрокаСценария.ИмяПОД = "Справочник_КлассификаторАлкогольнойПродукцииЕГАИС_Отправка";
		СтрокаСценария.ИмяОбъекта = "Справочник.КлассификаторАлкогольнойПродукцииЕГАИС";
		
		СтрокаСценария = СценарийВыгрузки.Добавить();
		СтрокаСценария.ИмяПОД = "Справочник_ЦеновыеГруппы_Отправка";
		СтрокаСценария.ИмяОбъекта = "Справочник.ЦеновыеГруппы";

		КомпонентыОбмена.СценарийВыгрузки = СценарийВыгрузки;

		Для Каждого Строка Из КомпонентыОбмена.СценарийВыгрузки Цикл
			ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти(Строка.ИмяПОД, "Имя");
	
			Если ПравилоОбработки <> Неопределено Тогда
				ВыборкаДанных = ВыборкаДанных(КомпонентыОбмена, ПравилоОбработки);
				Для Каждого ОбъектВыборки Из ВыборкаДанных Цикл
					ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ОбъектВыборки, ПравилоОбработки);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;

		Если КомпонентыОбмена.ФлагОшибки Тогда
			ТекстСообщения = НСтр("ru='В ходе выполнения операции возникли ошибки'") + ": " + Символы.ПС
				+ КомпонентыОбмена.СтрокаСообщенияОбОшибке;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		// Обработчики после конвертации.
		Попытка
			КомпонентыОбмена.МенеджерОбмена.ПослеКонвертации(КомпонентыОбмена);
		Исключение
			ТекстОшибки = Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Событие: %1.
					|Обработчик: ПослеКонвертации.
					|
					|Ошибка выполнения обработчика.
					|%2.'"),
				КомпонентыОбмена.НаправлениеОбмена,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ОбменДаннымиXDTOСервер.ЗаписатьВПротоколВыполнения(КомпонентыОбмена, ТекстОшибки);
		КонецПопытки;
		
		КомпонентыОбмена.ФайлОбмена.ЗаписатьКонецЭлемента(); // Body
		КомпонентыОбмена.ФайлОбмена.ЗаписатьКонецЭлемента(); // Message

	КонецЕсли;

	// Формирование результата выгрузки.
	КомпонентыОбмена.ФайлОбмена.Закрыть();
	
	// Проверка выгрузки.
	Если КомпонентыОбмена.ФлагОшибки Тогда
		КомпонентыОбмена.ФайлОбмена = Неопределено;
		ВызватьИсключение КомпонентыОбмена.СтрокаСообщенияОбОшибке;
	КонецЕсли;
	
	РезультатВыгрузки = Новый ДвоичныеДанные(ИмяФайлаОбмена);
	
	ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаОбмена);

	Возврат РезультатВыгрузки;
	
КонецФункции

// Выполняет передачу данных на сервис с помощью веб-сервиса.
//
// Параметры:
//  ПараметрыПодключения - Структура - См. ОбщегоНазначения.ПараметрыПодключенияWSПрокси;
//  ИмяФайла - Строка - Полное имя передаваемого файла;
//  РазмерЧасти - Число - Размер части на которые будеи разьит файл обмена для передачи;
//
// Возвращаемое значение:
//  Строка - Идентификатор операции на сервисе.
//
Функция ПередатьДанные(ПараметрыПодключения, Знач ИмяФайла, Знач РазмерЧасти = 1024) Экспорт
	
	// Возвращаемое значение функции.
	ИдентификаторФайла = Неопределено;
	
	WSПрокси = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
	
	КаталогФайлов = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(КаталогФайлов);
	
	// Архивирование файла.
	ИмяНеразделенногоФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогФайлов, "data.zip");
	Архиватор = Новый ЗаписьZipФайла(ИмяНеразделенногоФайла,,,, УровеньСжатияZIP.Максимальный);
	Архиватор.Добавить(ИмяФайла);
	Архиватор.Записать();
	
	// Разделение файла на части.
	ИдентификаторСообщения = Строка(Новый УникальныйИдентификатор);
	
	КоличествоЧастей = 1;
	СообщениеОбОшибке = "";
	Если ЗначениеЗаполнено(РазмерЧасти) Тогда
		ИменаФайлов = РазделитьФайл(ИмяНеразделенногоФайла, РазмерЧасти * 1024);
		КоличествоЧастей = ИменаФайлов.Количество();
		Для НомерЧасти = 1 По КоличествоЧастей Цикл
			ИмяФайлаЧасти = ИменаФайлов[НомерЧасти - 1];
			ДанныеФайла = Новый ДвоичныеДанные(ИмяФайлаЧасти);
			WSПрокси.PutFilePart(ИдентификаторСообщения, НомерЧасти, ДанныеФайла, СообщениеОбОшибке);
		КонецЦикла;
	Иначе
		ДанныеФайла = Новый ДвоичныеДанные(ИмяНеразделенногоФайла);
		WSПрокси.PutFilePart(ИдентификаторСообщения, 1, ДанныеФайла, СообщениеОбОшибке);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли;
	
	УдалитьФайлы(КаталогФайлов);
	
	ИдентификаторОперации = "";
	WSПрокси.PutData(ИдентификаторСообщения, ИдентификаторОперации, СообщениеОбОшибке);
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли;
	
	Возврат ИдентификаторОперации;
	
КонецФункции

// Выполняет передачу данных на сервис с помощью менеджера сервиса.
//
// Параметры:
//  НомерОбласти - Число - Номер области, в которую передаются данные;
//  ИмяФайла - Строка - Полное имя передаваемого файла;
//  ПараметрыВызова - См. ДлительныеОперации.ПараметрыВыполненияФункции;
//
// Возвращаемое значение:
//  Строка - Идентификатор операции на сервисе.
//
Функция ПередатьДанныеСервис(НомерОбласти, ИмяФайла, ПараметрыВызова) Экспорт
	
	ОбщегоНазначенияРТ.ОчиститьРезультатОбменаФайлом();
	
	ИдентификаторОперации = РаспределенноеВыполнениеКоманд.ВыполнитьПередачуФайлаПриложению(ИмяФайла,
		НомерОбласти, Истина, ПараметрыВызова);
	
	Возврат Строка(ИдентификаторОперации);
	
КонецФункции

// Выполняет проверку состояния загрузка данных в сервис с помощью веб-сервиса.
//
// Параметры:
//  ПараметрыПодключения - Структура - См. ОбщегоНазначения.ПараметрыПодключенияWSПрокси;
//  ИдентификаторОперации - Строка - Идентификатор операции на сервисе;
//
// Возвращаемое значение:
//  Строка - Состояние загрузки.
//
Функция ПроверитьСостояниеЗагрузки(ПараметрыПодключения, ИдентификаторОперации) Экспорт
	
	WSПрокси = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
	
	СообщениеОбОшибке = "";
	СостояниеЗагрузки = WSПрокси.PutDataActionResult(ИдентификаторОперации, СообщениеОбОшибке);
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли;
	
	Возврат СостояниеЗагрузки;
	
КонецФункции

// Выполняет проверку состояния загрузка данных в сервис с помощью менеджера сервиса.
//
// Параметры:
//  ИдентификаторОперации - Строка - Идентификатор операции на сервисе;
//
// Возвращаемое значение:
//  Строка - Состояние загрузки.
//
Функция ПроверитьСостояниеЗагрузкиСервис(ИдентификаторОперации) Экспорт
	
	СостояниеЗагрузки = "Failed";
	
	РезультатОбменаФайлом = ОбщегоНазначенияРТ.РезультатОбменаФайлом();
	Если РезультатОбменаФайлом = Неопределено Тогда
		СостояниеЗагрузки = "Active";
	ИначеЕсли Строка(РезультатОбменаФайлом.ИдентификаторВызова) = ИдентификаторОперации Тогда
		Если РезультатОбменаФайлом.ВыполненУспешно Тогда
			СостояниеЗагрузки = "Completed";
		Иначе
			ВызватьИсключение РезультатОбменаФайлом.ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СостояниеЗагрузки;
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Возвращает HTTPСоединение
// 
// Параметры: 
//  Адрес - Строка
//  Логин - Строка
//  Пароль - Строка
//  Таймаут - Число
// 
// Возвращаемое значение: 
//  HTTPСоединение
Функция Соединение(Адрес, Логин = Неопределено, Пароль = Неопределено, Таймаут = 30) Экспорт

	ЧастиАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(Адрес);
	Соединение = Новый HTTPСоединение(ЧастиАдреса.Хост, 443, Логин, Пароль,, Таймаут,
		Новый ЗащищенноеСоединениеOpenSSL(,Новый СертификатыУдостоверяющихЦентровОС));
	
	Возврат Соединение;
	
КонецФункции

// Параметры:
//  Ответ - HTTPОтвет
//  ВключатьЗаголовки - Булево
// 
// Возвращаемое значение:
//  Структура:
//   * Заголовки - Массив из Строка
//   * Данные - Произвольный
//   * СообщениеОбОшибке - Строка
//   * Ошибка - Булево
//   * ТелоОтвета - Строка
//   * КодСостояния - Число
Функция РезультатЗапроса(Ответ, ВключатьЗаголовки = Ложь)
	
	СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
	
	Результат = ШаблонРезультата();
	
	Если ВключатьЗаголовки Тогда
		Заголовки = Новый Массив;
		Для Каждого Заголовок Из Ответ.Заголовки Цикл
			Заголовки.Добавить(СтрШаблон("%1:%2", Заголовок.Ключ, Заголовок.Значение));
		КонецЦикла; 	
		Результат.Вставить("Заголовки", Заголовки);
	КонецЕсли; 
	
	Результат.КодСостояния = Ответ.КодСостояния;
	Результат.ТелоОтвета = СтрокаОтвета;
	Результат.Ошибка = (Ответ.КодСостояния > 204);
	
	Если Ответ.КодСостояния = 401 Тогда
		Результат.СообщениеОбОшибке = НСтр("ru = 'Ошибка авторизации. Неправильно задан логин или пароль.'"); 
	ИначеЕсли Ответ.КодСостояния = 403 Тогда
		Результат.СообщениеОбОшибке = НСтр("ru = 'Ошибка авторизации. У пользователя нет доступа к программному интерфейсу.'");
	ИначеЕсли Ответ.КодСостояния = 404 Тогда
		Результат.СообщениеОбОшибке = НСтр("ru = 'Не найдено. Адрес сервиса указан не верно или сервис не найден.'");
	ИначеЕсли Ответ.КодСостояния >= 500 Тогда
		Результат.СообщениеОбОшибке = НСтр("ru = 'Внутренняя ошибка. Подробности в журнале регистрации.'");
	КонецЕсли;
	
	Если Результат.Ошибка Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Переход в облако'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			СтрокаОтвета);
		Если Не ПустаяСтрока(СтрокаОтвета) Тогда
			Попытка
				Результат.Данные = РаботаВМоделиСервисаБТС.СтруктураИзСтрокиJSON(СтрокаОтвета);	
				Если Результат.Данные.Свойство("message") Тогда
					Результат.СообщениеОбОшибке = Результат.Данные.message;
				ИначеЕсли Результат.Данные.Свойство("description") Тогда
					Результат.СообщениеОбОшибке = Результат.Данные.description;
				КонецЕсли; 
			Исключение
				// Если не удалось получить данные, не стараемся их возвращать.
			КонецПопытки;
		КонецЕсли; 
			
		Возврат Результат;
	ИначеЕсли Не ПустаяСтрока(СтрокаОтвета) Тогда
		Результат.Данные = РаботаВМоделиСервисаБТС.СтруктураИзСтрокиJSON(СтрокаОтвета);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ШаблонРезультата()
	
	Результат = Новый Структура;
	Результат.Вставить("КодСостояния", 0);
	Результат.Вставить("ТелоОтвета", "");
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("СообщениеОбОшибке", "");
	Результат.Вставить("Данные", Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Выполняет подготовку структуры КомпонентыОбмена.
// Параметры:
//   НаправлениеОбмена - Строка - Отправка или Получение.
//   ВерсияФорматаОбменаПриЗагрузке - Строка - версия формата, которая должна применяться.
//
// Возвращаемое значение:
//   Структура - компоненты обмена.
//
Функция КомпонентыОбмена()
	
	ВерсияФорматаОбмена = "1.14";
	
	КомпонентыОбмена = ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена("Отправка");
	
	КомпонентыОбмена.ЭтоОбменЧерезПланОбмена = Ложь;
	КомпонентыОбмена.КлючСообщенияЖурналаРегистрации = НСтр("ru = 'Перенос данных через буфер обмена'", ОбщегоНазначения.КодОсновногоЯзыка());
	КомпонентыОбмена.ВерсияФорматаОбмена = ВерсияФорматаОбмена;
	КомпонентыОбмена.XMLСхема = "http://v8.1c.ru/edi/edi_stnd/EnterpriseData/" + ВерсияФорматаОбмена;
	
	ВерсииФорматаОбмена = Новый Соответствие;
	ОбменДаннымиПереопределяемый.ПриПолученииДоступныхВерсийФормата(ВерсииФорматаОбмена);
	КомпонентыОбмена.МенеджерОбмена = ВерсииФорматаОбмена.Получить(ВерсияФорматаОбмена);
	Если КомпонентыОбмена.МенеджерОбмена = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не поддерживается версия формата обмена: <%1>.'"), ВерсияФорматаОбмена);
	КонецЕсли;
	
	ОбменДаннымиXDTOСервер.ИнициализироватьТаблицыПравилОбмена(КомпонентыОбмена);
	
	ОбменДаннымиXDTOСервер.ПослеИнициализацииКомпонентыОбмена(КомпонентыОбмена);
	
	Возврат КомпонентыОбмена;
	
КонецФункции

// Заполняет перечень доступных к выгрузке объектов метаданных в соответствии с компонентами обмена.
//
Процедура ЗаполнитьПравилаВыгрузки(ПравилаВыгрузкиСправочнойИнформации) Экспорт
	
	КомпонентыОбмена = КомпонентыОбмена();
	
	ПравилаВыгрузкиСправочнойИнформации.Строки.Очистить();
	
	Для Каждого СтрокаПОД Из КомпонентыОбмена.ПравилаОбработкиДанных Цикл
		
		ТекМД = СтрокаПОД.ОбъектВыборкиМетаданные;
		Если ТекМД = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекИмя = ТекМД.Имя;
		ТекСиноним = ТекМД.Синоним;
		ПолноеИмяМДСтрокой = "";
		НовСтрока = Неопределено;
		Если Метаданные.Справочники.Содержит(ТекМД) Тогда
			НовСтрока = ПравилаВыгрузкиСправочнойИнформации.Строки.Добавить();
			ПолноеИмяМДСтрокой = "Справочник." + ТекИмя;
			Представление = НСтр("ru = 'Справочник %1'");
		Иначе
			Продолжить;
		КонецЕсли;
		
		Представление = СтрЗаменить(Представление, "%1", ТекСиноним);
		НовСтрока.ЭтоГруппа = Ложь;
		НовСтрока.Наименование = ТекСиноним;
		НовСтрока.ПолноеИмяМетаданных = ПолноеИмяМДСтрокой;
		НовСтрока.Представление = Представление;
		
	КонецЦикла;
	
КонецПроцедуры

// Готовит список объектов, подлежащих выгрузке.
//
// Параметры:
//   Этап - Строка - "СправочнаяИнформация", "Остатки";
//
// Возвращаемое значение:
//   СписокЗначений - Любая ссылка.
//
Функция ОбъектыКВыгрузке() Экспорт
	
	СписокДополнениеКВыгрузке = Новый СписокЗначений;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивМетаданных = Новый Массив;
	
	СоставПланаОбмена = Метаданные.ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.Состав;
	Для Каждого Элемент Из СоставПланаОбмена Цикл
		ОбъектМетаданных = Элемент.Метаданные;
		Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
			МассивМетаданных.Добавить(ОбъектМетаданных.ПолноеИмя());
		КонецЕсли;
	КонецЦикла;
	
	ДополнитьСписокОбъектовКВыгрузке(МассивМетаданных, СписокДополнениеКВыгрузке);
	
	Возврат СписокДополнениеКВыгрузке;
	
КонецФункции

// Функция - "обертка" вызова обработчика ПОД ВыборкаДанных.
//
// Параметры:
//  КомпонентыОбмена - Структура - содержит все правила и параметры обмена.
//  ПравилоОбработки - СтрокаТаблицыЗначений - строка правил обработки данных, соответствующая обрабатываемому ПОД.
//
// Возвращаемое значение:
//  Произвольный - то, что вернет обработчик ВыборкаДанных, например, выборка результата запроса.
//
Функция ВыборкаДанных(КомпонентыОбмена, ПравилоОбработки)
	
	АлгоритмВыборки = ПравилоОбработки.ВыборкаДанных;
	Если ЗначениеЗаполнено(АлгоритмВыборки) Тогда
		
		МенеджерОбмена = КомпонентыОбмена.МенеджерОбмена;
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("КомпонентыОбмена", КомпонентыОбмена);
		
		Попытка
			ВыборкаДанных = МенеджерОбмена.ВыполнитьФункциюМодуляМенеджера(АлгоритмВыборки, СтруктураПараметров);
		Исключение
			
			ШаблонОписанияОшибки = НСтр("ru = 'Событие: %1.
					|Обработчик: %2.
					|ПОД: %3.
					|
					|Ошибка выполнения обработчика.
					|%4.'");
			
			ТекстОшибки = Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОписанияОшибки,
				КомпонентыОбмена.НаправлениеОбмена,
				"ВыборкаДанных",
				ПравилоОбработки.Имя,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ВыборкаДанных;
	
КонецФункции

Процедура ДополнитьСписокОбъектовКВыгрузке(МассивМетаданныхОтбор, СписокДополнениеКВыгрузке)
	ДанныеКомпоновки = ИнициализироватьКомпоновщик(МассивМетаданныхОтбор);
	
	// Сохраняем отборы.
	НастройкиОтборов = ДанныеКомпоновки.КомпоновщикНастроек.ПолучитьНастройки();
	
	// Нужный вариант.
	ДанныеКомпоновки.КомпоновщикНастроек.ЗагрузитьНастройки(
		ДанныеКомпоновки.СхемаКомпоновки.ВариантыНастроек["ПользовательскиеДанные"].Настройки);
	
	// Восстанавливаем отборы.
	ДобавитьЗначенияОтбораКомпоновки(ДанныеКомпоновки.КомпоновщикНастроек.Настройки.Отбор.Элементы, 
		НастройкиОтборов.Отбор.Элементы);
	
	НастройкиКомпоновщика = ДанныеКомпоновки.КомпоновщикНастроек.ПолучитьНастройки();

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(ДанныеКомпоновки.СхемаКомпоновки, НастройкиКомпоновщика,
		, , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	Процессор = Новый ПроцессорКомпоновкиДанных;
	Процессор.Инициализировать(Макет, , , Истина);
	
	Вывод = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Вывод.УстановитьОбъект(Новый ТаблицаЗначений);
	КоллекцияРезультат = Вывод.Вывести(Процессор);
	Для Каждого СтрокаТЗ Из КоллекцияРезультат Цикл
		Если ЗначениеЗаполнено(СтрокаТЗ.ОбъектСсылка) Тогда
			СписокДополнениеКВыгрузке.Добавить(СтрокаТЗ.ОбъектСсылка);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//  Устанавливает наборы данных в схему и инициализирует компоновщик.
//  Опирается на значения реквизитов:
//    "ДополнительнаяРегистрация", "ПериодОтбораВсехДокументов", "КомпоновщикОтбораВсехДокументов".
//
//  Параметры:
//      СписокИменМетаданных - Массив - имена метаданных (деревья значений группы ограничений, служебных
//                                      идентификаторов
//                                      "все документов" или "все НСИ"), для которых будет построена  схема. 
//                                      Если не указано, то для всего состава узла.
//
//      АдресСохраненияСхемы - Строка, УникальныйИдентификатор - адрес временного хранилища для сохранения схемы
//                             компоновки.
//
//  Возвращаемое значение:
//      Структура - поля:
//         * ТаблицаМетаданныхСоставаУзла - ТаблицаЗначений - описание состава узла.
//         * СхемаКомпоновки - СхемаКомпоновкиДанных - инициированное значение.
//         * КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - инициированное значение.
//
Функция ИнициализироватьКомпоновщик(СписокИменМетаданных = Неопределено, АдресСохраненияСхемы = Неопределено)
	
	СхемаКомпоновки = ПолучитьМакет("СхемаКомпоновкиДанных");
	ИсточникДанных = СхемаКомпоновки.ИсточникиДанных[0].Имя;

	// Наборы для каждого нужного вида метаданных.
	ЭлементыНабораИзменения = СхемаКомпоновки.НаборыДанных.РегистрацияИзменений.Элементы;
	Пока ЭлементыНабораИзменения.Количество() > 1 Цикл
		// [0] - Описание полей.
		ЭлементыНабораИзменения.Удалить(ЭлементыНабораИзменения[1]);
	КонецЦикла;
	
	// Дополнительные изменения.
	Для Каждого ПолноеИмяМетаданных Из СписокИменМетаданных Цикл
		
		ДобавляемыеТаблицы = СоставУкрупненнойГруппыМетаданных(ПолноеИмяМетаданных);
		Для Каждого ИмяДобавляемойТаблицы Из ДобавляемыеТаблицы Цикл
			ИмяНабора = "Дополнительно_" + СтрЗаменить(ИмяДобавляемойТаблицы, ".", "_");
			Набор = ЭлементыНабораИзменения.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
			Набор.ИсточникДанных = ИсточникДанных;
			Набор.АвтоЗаполнениеДоступныхПолей = Истина;
			Набор.Имя = ИмяНабора;
			
			Набор.Запрос = "
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	" + ИмяНабора + ".Ссылка           КАК ОбъектСсылка,
				|	ТИП(" + ИмяДобавляемойТаблицы + ") КАК ОбъектТип
				|ИЗ
				|	" + ИмяДобавляемойТаблицы + " КАК " + ИмяНабора + "
				|";
			
		КонецЦикла;
	КонецЦикла;
	
	// Общие параметры.
	Параметры = СхемаКомпоновки.Параметры;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(
		ПоместитьВоВременноеХранилище(СхемаКомпоновки, АдресСохраненияСхемы)));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	
	Возврат Новый Структура("СхемаКомпоновки,КомпоновщикНастроек", 
		СхемаКомпоновки, КомпоновщикНастроек);
КонецФункции

// Возвращает массив имен таблиц метаданных по составному типу параметра "ПолноеИмяМетаданных".
//
// Параметры:
//      ПолноеИмяМетаданных - Строка, ДеревоЗначений- имя таблицы (например "Справочник.Валюты") или имя
//                            предопределенной группы
//                            (например "ВсеДокументы") или дерево значений, описывающее группу.
//
// Возвращаемое значение:
//      Массив - имена метаданных.
//
Функция СоставУкрупненнойГруппыМетаданных(ПолноеИмяМетаданных) 
	ОбходМетаданных = Ложь;
	ТаблицыСостава = Новый Массив;
	Если ТипЗнч(ПолноеИмяМетаданных) <> Тип("Строка") Тогда
		// Дерево значений с группой отбора. Корень - описание, в строках - имена метаданных.
		Для Каждого СтрокаГруппы Из ПолноеИмяМетаданных.Строки Цикл
			Для Каждого СтрокаСоставаГруппы Из СтрокаГруппы.Строки Цикл
				ТаблицыСостава.Добавить(СтрокаСоставаГруппы.ПолноеИмяМетаданных);
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ПолноеИмяМетаданных = "ВсеДокументы" Тогда
		ОбходМетаданных = Истина;
		МетаОбъекты = Метаданные.Документы;
	ИначеЕсли ПолноеИмяМетаданных = "ВсеСправочники" Тогда
		ОбходМетаданных = Истина;
		МетаОбъекты = Метаданные.Справочники;
	ИначеЕсли ПолноеИмяМетаданных = "ВсеПланыВидовХарактеристик" Тогда
		ОбходМетаданных = Истина;
		МетаОбъекты = Метаданные.ПланыВидовХарактеристик;
	Иначе
		// Одиночная таблица метаданных.
		ТаблицыСостава.Добавить(ПолноеИмяМетаданных);
	КонецЕсли;
	Если ОбходМетаданных Тогда
		Для Каждого МетаОбъект Из МетаОбъекты Цикл
			ТаблицыСостава.Добавить(МетаОбъект.ПолноеИмя());
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицыСостава;
КонецФункции

// Добавляет отбор в конец отбора с возможной коррекцией полей.
//
//  Параметры:
//      ЭлементыПриемника - КоллекцияЭлементовОтбораКомпоновкиДанных - приемник.
//      ЭлементыИсточника - КоллекцияЭлементовОтбораКомпоновкиДанных - источник.
//      СоответствиеПолей - Соответствие - данные для коррекции полей.
//                          Ключ - исходный путь к данным поля, Значение - путь 
//                          для результата. Например для замены полей типа.
//                          "Ссылка.Наименование" -> "ОбъектСсылка.Наименование"
//                          надо передать Новый Структура("Ссылка", "ОбъектСсылка").
//
Процедура ДобавитьЗначенияОтбораКомпоновки(ЭлементыПриемника, ЭлементыИсточника, СоответствиеПолей = Неопределено) 
	
	Для Каждого Элемент Из ЭлементыИсточника Цикл
		
		Тип=ТипЗнч(Элемент);
		ЭлементОтбора = ЭлементыПриемника.Добавить(Тип);
		ЗаполнитьЗначенияСвойств(ЭлементОтбора, Элемент);
		Если Тип=Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ДобавитьЗначенияОтбораКомпоновки(ЭлементОтбора.Элементы, Элемент.Элементы, СоответствиеПолей);
			
		ИначеЕсли СоответствиеПолей<>Неопределено Тогда
			ИсходноеПолеСтрокой = Элемент.ЛевоеЗначение;
			Для Каждого КлючЗначение Из СоответствиеПолей Цикл
				КонтрольНовое     = НРег(КлючЗначение.Ключ);
				ДлинаКонтроля     = 1 + СтрДлина(КонтрольНовое);
				КонтрольИсходного = НРег(Лев(ИсходноеПолеСтрокой, ДлинаКонтроля));
				Если КонтрольИсходного=КонтрольНовое Тогда
					ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(КлючЗначение.Значение);
					Прервать;
				ИначеЕсли КонтрольИсходного=КонтрольНовое + "." Тогда
					ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(КлючЗначение.Значение + Сред(ИсходноеПолеСтрокой, ДлинаКонтроля));
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли