
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Организация") Тогда
		Организация = Параметры.Организация;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПрефиксыЭлементовФормы", "СписокКМ");
	СобытияФормИСМПТКПереопределяемый.ПриСозданииНаСервере_НастроитьПодключаемоеОборудование(ЭтаФорма, ДополнительныеПараметры);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКМЗагрузитьКодыМаркировкиИзМобильногоПриложения", "Видимость", ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.НастройкиПодключенияМобильноеПриложениеИСМПТК));
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой();
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы И ИспользуютсяСканерыШтрихкода Тогда
		ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработкаСобытияСканераОбщая(Параметр);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Не СобытияФормИСМПТККлиентПереопределяемый.ОбрабатыватьВнешнееСобытиеТО() Тогда 
		Возврат;
	КонецЕсли;
	
	Параметр = Новый Массив;
	Параметр.Добавить(Данные);
	Параметр.Добавить(Неопределено);
	
	Если ВводДоступен() Тогда
		Если Событие = "Штрихкод" ИЛИ Событие = "ПолученШтрихкод" Тогда
			ОбработкаСобытияСканераОбщая(Параметр);			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСобытияСканераОбщая(Параметр)
	
	Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверкаФорматаТранспортногоКодаПройденаУспешно(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр)) Тогда
		Возврат;
	КонецЕсли;
			
	ОбработатьКодМаркировки(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));	
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиОтображения

&НаКлиенте
Процедура ОтображатьПоляВТаблицеСписокКМПриИзменении(Элемент)
	
	УправлениеФормой();
				
КонецПроцедуры

&НаКлиенте
Процедура РежимОтображенияСтрокКМПриИзменении(Элемент)
	
	Если РежимОтображенияСтрокКМ = 2
		Или РежимОтображенияСтрокКМ = 3 Тогда 
		УстановитьОтборТабличнойЧасти(Элементы.СписокКМ, Новый Структура("ИндексКартинкиСостояниеСтроки", РежимОтображенияСтрокКМ-1));
	Иначе
		Элементы.СписокКМ.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическиЗапрашиватьИсториюДвиженияКМПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТаблицыКМ

&НаКлиенте
Процедура СписокКМПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокКМПослеУдаления(Элемент)
	
	КоличествоКМВсего = СписокКМ.Количество();
	ВыполнитьПроверкуСостоянийИПроинформироватьОбОшибках();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКМПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборПоКодуДляИстории();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКМПередУдалением(Элемент, Отказ)
	
	Если Не ИсторияДвиженияКМ.Количество() = 0 Тогда
		ИдентификаторУдаляемойСтроки = Элемент.ТекущиеДанные.ИдентификаторСтроки;
		СвязанныеСтрокиВИстории = ИсторияДвиженияКМ.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторУдаляемойСтроки));
		Если Не СвязанныеСтрокиВИстории.Количество() = 0 Тогда
			Для Каждого СтрокаТЧ Из СвязанныеСтрокиВИстории Цикл
				ИсторияДвиженияКМ.Удалить(СтрокаТЧ);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

#Область ТСД

&НаКлиенте
Процедура ЗагрузитьИзТСДПослеАвторизации(РезультатАвторизации, Штрихкоды) Экспорт
	
	Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	Если АвтоматическиЗапрашиватьИнформациюОСостоянииКМ 
		Или АвтоматическиЗапрашиватьИсториюДвиженияКМ Тогда
		Если ЕстьВсяИнформацияДляЗапроса() Тогда
			//Получаем/проверяем токен заранее, т.к. может потребоваться подпись ЭЦП, а процесс загрузки КМ будет выполняться в фоне
			ЗавершениеЗагрузкаКМИзФайлаПослеПолученияТокена = Новый ОписаниеОповещения("ЗавершениеЗагрузкаКМИзФайлаПослеПолученияТокена", ЭтаФорма);
			ПолучитьКлючАвторизации(ЗавершениеЗагрузкаКМИзФайлаПослеПолученияТокена);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьЗагрузкуДанныеИзТСД(Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект), УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСМПТККлиентПереопределяемый.ПриПолученииДанныхИзТСД(Новый ОписаниеОповещения("Подключаемый_ПолученыДанныеИзТСД", ЭтотОбъект), ЭтотОбъект, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, АвторизацияЗапрашивалась = Неопределено) Экспорт
	
	Если Штрихкоды.Количество() = 0 Тогда
		
		ПоказатьПредупреждение( ,РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВДанныхИзТСДНетИнформацииОКодахМаркировки());
		Возврат;
		
	КонецЕсли;
	
	СобытияФормИСМПТККлиент.ОповеститьОНачалеОбработкиДанныхТСД();
	ПараметрыСканирования = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПараметрыСканирования(ЭтотОбъект);
	СобытияФормИСМПТККлиент.ПреобразоватьШтрихкодыТСДВBase64(Штрихкоды);
	ЗагрузкаДанныхТСД = ОбработатьПолученныеДанныеТСДНаСервере(Штрихкоды, ПараметрыСканирования, Неопределено);
	
	ОбработатьПолученныеДанныеТСД();
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПолученныеДанныеТСДНаСервере(ШтрихкодыТСД, ПараметрыСканирования, КэшированныеЗначения)
	
	Результат = РаботаСДокументамиИСМПТК.ОбработатьПолученныеДанныеТСДВДокументе(ЭтотОбъект, ШтрихкодыТСД, ПараметрыСканирования);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Асинх Процедура ОбработатьПолученныеДанныеТСД()
	
	Если ЗагрузкаДанныхТСД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивКодовМаркировки = Новый Массив;
	
	Для НомерСтроки = 0 По ЗагрузкаДанныхТСД.Всего - 1 Цикл
		Штрихкод = ЗагрузкаДанныхТСД.ШтрихкодыТСД[НомерСтроки];
		ДанныеШтрихкода = Новый Структура("ШтрихКод, ФорматBase64, Количество", Штрихкод.Штрихкод, Ложь, 1);
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
		МассивКодовМаркировки.Добавить(ДанныеШтрихкода);
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура("ФормаОбъекта, МассивКодовМаркировки", ЭтотОбъект, МассивКодовМаркировки);
	
	ИнтеграцияИСМПТККлиент.ЗагрузитьКодыМаркировкиИзТСДЗавершение(Неопределено, СтруктураПараметров);
	
	//Проверяем, надо ли сразу заправшивать информацию о состоянии кода маркировки
	Если АвтоматическиЗапрашиватьИнформациюОСостоянииКМ Тогда 
		Если Не ЗначениеЗаполнено(Организация) Тогда
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоПроверкаВалидностиКодаИСМПТК");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		Токен = Ждать ИнтеграцияИСМПТККлиент.ПолучитьТокенАвторизации(Организация);
		ЗапроситьДанныеОСостоянииКодовСписком(Токен);
	КонецЕсли;
	
	//Проверяем, надо ли сразу заправшивать информацию о истории движения КМ
	Если АвтоматическиЗапрашиватьИсториюДвиженияКМ Тогда
		Если Не ЗначениеЗаполнено(Организация) Тогда
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоматическиЗапрашиватьИсториюДвиженияКМ");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		Токен = Ждать ИнтеграцияИСМПТККлиент.ПолучитьТокенАвторизации(Организация);
		ЗапроситьДанныеОИсторииДвиженияКодовСписком(Токен);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Файлы

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайла(Команда)
	
	Если Не СписокКМ.Количество() = 0 Тогда
		ЗагрузитьКодыМаркировкиИзФайлаПослеВопроса = Новый ОписаниеОповещения("ЗагрузитьКодыМаркировкиИзФайлаПослеВопроса", ЭтаФорма);
		ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВыполнитьОчисткуДанныхВТаблице();
		ПоказатьВопрос(ЗагрузитьКодыМаркировкиИзФайлаПослеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПроверитьОпциюАвтоматическогоЗапросаИПродолжитьЗагрузкуКМИзФайла();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайлаПослеВопроса(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		СписокКМ.Очистить();
	КонецЕсли;
	
	ПроверитьОпциюАвтоматическогоЗапросаИПродолжитьЗагрузкуКМИзФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОпциюАвтоматическогоЗапросаИПродолжитьЗагрузкуКМИзФайла()
	
	Если АвтоматическиЗапрашиватьИнформациюОСостоянииКМ 
		Или АвтоматическиЗапрашиватьИсториюДвиженияКМ Тогда
		Если ЕстьВсяИнформацияДляЗапроса() Тогда
			//Получаем/проверяем токен заранее, т.к. может потребоваться подпись ЭЦП, а процесс загрузки КМ будет выполняться в фоне
			ЗавершениеЗагрузкаКМИзФайлаПослеПолученияТокена = Новый ОписаниеОповещения("ЗавершениеЗагрузкаКМИзФайлаПослеПолученияТокена", ЭтаФорма);
			ПолучитьКлючАвторизации(ЗавершениеЗагрузкаКМИзФайлаПослеПолученияТокена);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	ИнтеграцияИСМПТККлиент.ЗагрузитьКодыМаркировкиИзФайла(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗавершениеЗагрузкаКМИзФайлаПослеПолученияТокена(РезультатВыполнения, Параметры) Экспорт
	
	ТокенАвторизацииВрем = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыполнитьПроцедуруФоновоВыполнено(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОперацияОтменена());
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		
		Если ОбработатьРезультатЗагрузкиКодов(Результат.АдресРезультата) Тогда 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОперацияЗагрузкиКМЗавершена());
			
			//Проверяем, надо ли сразу заправшивать информацию о состоянии кода маркировки
			Если АвтоматическиЗапрашиватьИнформациюОСостоянииКМ Тогда
				ЗапроситьДанныеОСостоянииКодовСписком();
			КонецЕсли;
			//Проверяем, надо ли сразу заправшивать информацию о истории движения
			Если АвтоматическиЗапрашиватьИсториюДвиженияКМ Тогда
				ЗапроситьДанныеОИсторииДвиженияКодовСписком();
			КонецЕсли;
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьРезультатЗагрузкиКодов(АдресРезультата)
	
	РезультатЗадания = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если РезультатЗадания.Свойство("МассивОшибок") И Не РезультатЗадания.МассивОшибок.Количество() = 0 Тогда
		Для Каждого ТекстОшибки Из РезультатЗадания.МассивОшибок Цикл 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		КонецЦикла;
	КонецЕсли;
	
	Если РезультатЗадания.Успешно И НЕ РезультатЗадания.ТаблицаПолученныхКодов.Количество() = 0 Тогда
		Для Каждого Строка Из РезультатЗадания.ТаблицаПолученныхКодов Цикл
			НайденныеСтроки = СписокКМ.НайтиСтроки(Новый Структура("КодИдентификации", Строка.КодИдентификации));
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = СписокКМ.Добавить();
				НоваяСтрока.ИдентификаторСтроки 	= Новый УникальныйИдентификатор;
				НоваяСтрока.ВыполненЗапросВладельца = Ложь;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЕсли;
		КонецЦикла;
		КоличествоКМВсего = СписокКМ.Количество();
		
		ЗаполнитьПризнакИспользованияХарактеристик();
		УстановитьУсловноеОформлениеХарактеристикНоменклатуры();
		ВыполнитьПроверкуСостоянийИПроинформироватьОбОшибках();
		
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
	ВыполнитьПроверкуСостоянийИПроинформироватьОбОшибках();

КонецФункции

#КонецОбласти

#Область МобильноеПриложение

&НаКлиенте
Процедура МобильноеПриложениеЗагрузитьТовары(Команда)
	
	Если Не СписокКМ.Количество() = 0 Тогда
		МобильноеПриложениеЗагрузитьТоварыПослеВопроса = Новый ОписаниеОповещения("МобильноеПриложениеЗагрузитьТоварыПослеВопроса", ЭтаФорма);
		ТекстВопроса = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВыполнитьОчисткуДанныхВТаблице();
		ПоказатьВопрос(МобильноеПриложениеЗагрузитьТоварыПослеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПроверитьОпциюАвтоматическогоЗапросаИПродолжитьМобильноеПриложениеЗагрузитьТовары();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МобильноеПриложениеЗагрузитьТоварыПослеВопроса(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		СписокКМ.Очистить();
	КонецЕсли;
	
	ПроверитьОпциюАвтоматическогоЗапросаИПродолжитьМобильноеПриложениеЗагрузитьТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОпциюАвтоматическогоЗапросаИПродолжитьМобильноеПриложениеЗагрузитьТовары()
	
	Если АвтоматическиЗапрашиватьИнформациюОСостоянииКМ 
		Или АвтоматическиЗапрашиватьИсториюДвиженияКМ Тогда
		Если ЕстьВсяИнформацияДляЗапроса() Тогда
			//Получаем/проверяем токен заранее, т.к. может потребоваться подпись ЭЦП, а процесс загрузки КМ будет выполняться в фоне
			ЗавершениеЗагрузкаКМИзФайлаПослеПолученияТокена = Новый ОписаниеОповещения("ЗавершениеЗагрузкаКМИзФайлаПослеПолученияТокена", ЭтаФорма);
			ПолучитьКлючАвторизации(ЗавершениеЗагрузкаКМИзФайлаПослеПолученияТокена);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("МобильноеПриложениеЗагрузитьТоварыОбработкаВыбора", ЭтотОбъект);
	Список = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.МобильноеПриложениеЗагрузитьТоварыНаСервере();
	Список.ПоказатьОтметкуЭлементов(ОповещениеПослеВыбораЭлемента, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВыборДокументаДляЗагрузки());
	
КонецПроцедуры

&НаКлиенте
Процедура МобильноеПриложениеЗагрузитьТоварыОбработкаВыбора(Элемент, Параметры) Экспорт
	
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.МобильноеПриложениеЗагрузитьТоварыОбработкаВыбораОбщая(ЭтотОбъект, Элемент, Параметры);
	
КонецПроцедуры

#КонецОбласти

#Область РучнойВвод

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	СобытияФормИСМПТККлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверкаФорматаТранспортногоКодаПройденаУспешно(ДанныеШтрихкода) Тогда
		Возврат;
	КонецЕсли;
	ОбработатьКодМаркировки(ДанныеШтрихкода);
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеКМВТаблицу

&НаКлиенте
Процедура ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Для передачи на сервер КМ, в составе которого есть символы GS (29), требуется дополнительное кодирование
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
	ИсходныеДанные.Вставить("ФорматBase64", Истина);	
	СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(ИсходныеДанные);
	
	//Если удалось разобрать код, вернется структура. Если нет - текст сообщения об ошибке.
	Если ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СтруктураКодовМаркировки);
		Возврат;
	КонецЕсли;
	
	ОтказатьВДобавлении = Ложь;
	Если Не НайтиПоКодуИдентификации(СтруктураКодовМаркировки.КодИдентификации) = Неопределено Тогда 
		
		ОтказатьВДобавлении = Истина;
		
	ИначеЕсли ОбщегоНазначенияИСМПТК.ПроверитьЗначениеКонстанты("ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК")
		И СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
		
		//В этом случае в таблице документа может находиться уже преобразованный SSCC, соответствующий обрабатываемому в данный момент штрихкоду,
		//т.е. нужна специфическая проверка на дублирование данных кода
		ОтказатьВДобавлении = ПроверитьНаличиеSSCCВДокументе(СтруктураКодовМаркировки.КодИдентификации);
		
	КонецЕсли;
	
	Если ОтказатьВДобавлении Тогда
		ПараметрыОткрытия = СобытияФормИСМПТККлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		ПараметрыОткрытия.Штрихкод    = ИсходныеДанные.Штрихкод;
		ПараметрыОткрытия.ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияКодМаркировкиУказанВДокументе();
		ОткрытьФорму(ОбщегоНазначенияИСМПТККлиент.ПолучитьИмяФормыИнформацияОНевозможностиДобавленияКМ(), ПараметрыОткрытия, ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	Если Не СтруктураКодовМаркировки = Неопределено Тогда
		ДобавитьНовыйКод(СтруктураКодовМаркировки);
	КонецЕсли;
	
	КоличествоКМВсего = СписокКМ.Количество();
	
КонецПроцедуры

&НаКлиенте
Функция НайтиПоКодуИдентификации(КодИдентификации)
	
	СтруктураПоиска = Новый Структура("КодИдентификации", КодИдентификации);
	
	НайденныеСтроки = СписокКМ.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьНовыйКод(СтруктураКодовМаркировки)
	
	СообщенияОбОшибках = Новый Соответствие();
	ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(СтруктураКодовМаркировки.EAN, СообщенияОбОшибках);
	Если Не СообщенияОбОшибках.Количество() = 0 Тогда
		Для Каждого СообщениеОшибка Из СообщенияОбОшибках Цикл 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СообщениеОшибка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
		Номенклатура   = ДанныеНоменклатуры.Номенклатура;
		Характеристика = ДанныеНоменклатуры.Характеристика;
	Иначе
		Номенклатура   = ДанныеНоменклатуры;
		Характеристика = Неопределено;
	КонецЕсли;
	
	СтруктураКодовМаркировки.Вставить("Номенклатура",   Номенклатура);
	СтруктураКодовМаркировки.Вставить("Характеристика", Характеристика);
	ЗавершитьДобавлениеКодаМаркировки(СтруктураКодовМаркировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьДобавлениеКодаМаркировки(СтруктураКодовМаркировки = Неопределено, ПараметрКоманды = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(СтруктураКодовМаркировки.Номенклатура) 
		И Не ЗначениеЗаполнено(СтруктураКодовМаркировки.ВидПродукции) Тогда
		
		ВидПродукции = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(СтруктураКодовМаркировки.Номенклатура);
		СтруктураКодовМаркировки.ВидПродукции = ВидПродукции;
	КонецЕсли;
	
	Если Не СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
		GTIN = СтруктураКодовМаркировки.GTIN;
	Иначе
		GTIN = СтруктураКодовМаркировки.GTINВерхнегоУровня;
	КонецЕсли;
	
	НоваяСтрока = СписокКМ.Добавить();
	НоваяСтрока.КодМаркировки 		= СтруктураКодовМаркировки.КодМаркировки;
	НоваяСтрока.КодИдентификации 	= СтруктураКодовМаркировки.КодИдентификации;
	НоваяСтрока.GTIN 				= GTIN;
	НоваяСтрока.EAN 				= СтруктураКодовМаркировки.EAN;
	НоваяСтрока.Номенклатура 		= СтруктураКодовМаркировки.Номенклатура;
	НоваяСтрока.Характеристика 		= СтруктураКодовМаркировки.Характеристика;
	НоваяСтрока.ВидПродукции		= СтруктураКодовМаркировки.ВидПродукции;
	НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	
	НоваяСтрока.ВыполненЗапросВладельца = Ложь;
	
	//Проверяем, надо ли сразу заправшивать информацию о состоянии кода маркировки
	Если АвтоматическиЗапрашиватьИнформациюОСостоянииКМ Тогда
		ДополнительныеПараметры = Новый Структура("КодИдентификации", СтруктураКодовМаркировки.КодИдентификации);
		ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере = Новый ОписаниеОповещения("ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере", ЭтаФорма, ДополнительныеПараметры);
		ПолучитьКлючАвторизации(ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере);	
	КонецЕсли;
	
	//Проверяем, надо ли сразу заправшивать информацию о истории движения КМ
	Если АвтоматическиЗапрашиватьИсториюДвиженияКМ Тогда
		ДополнительныеПараметры = Новый Структура("КодИдентификации, ИдентификаторСтроки", СтруктураКодовМаркировки.КодИдентификации, НоваяСтрока.ИдентификаторСтроки);
		ЗавершениеИсторияДвиженияКМПриДобавленииНаСервере = Новый ОписаниеОповещения("ЗавершениеИсторияДвиженияКМПриДобавленииНаСервере", ЭтаФорма, ДополнительныеПараметры);
		ПолучитьКлючАвторизации(ЗавершениеИсторияДвиженияКМПриДобавленииНаСервере);
	КонецЕсли;
	
	ЗаполнитьПризнакИспользованияХарактеристик();
	УстановитьУсловноеОформлениеХарактеристикНоменклатуры();
	
	ВыполнитьПроверкуСостоянийИПроинформироватьОбОшибках();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНоменклатуруПоШтрихкоду(EAN, СообщенияОбОшибках = Неопределено)
	
	Если СообщенияОбОшибках = Неопределено Тогда
		//Не во всех местах вызова функции нужно выводить пользователю сообщения, поэтому заменяеям на коллекцию-пустышку
		СообщенияОбОшибках = Новый Соответствие();
	КонецЕсли;
	
	Номенклатура = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьПустуюСсылкуНоменклатура();
	
	НайденныеСтроки = СписокКМ.НайтиСтроки(Новый Структура("EAN", EAN));
	Если Не НайденныеСтроки.Количество() = 0 Тогда 
		Номенклатура   = НайденныеСтроки[0].Номенклатура;
		Характеристика = НайденныеСтроки[0].Характеристика;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда 
		ДанныеНоменклатуры = Новый Структура();
		ДанныеНоменклатуры.Вставить("Номенклатура",   Номенклатура);
		ДанныеНоменклатуры.Вставить("Характеристика", Характеристика);
		Возврат ДанныеНоменклатуры;
	Иначе
		Возврат ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, EAN,, СообщенияОбОшибках);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОчисткаДанных

&НаКлиенте
Процедура ОчиститьДанные(Команда)
	
	ТекстВопроса = НСтр("ru = 'Все данные формы будут очищены. Продолжить?'");
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение   = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчиститьДанные", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчиститьДанные(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Организация = "";
		
		АвтоматическиЗапрашиватьИнформациюОСостоянииКМ = Ложь;
		АвтоматическиЗапрашиватьИсториюДвиженияКМ 	   = Ложь;
		АвтоматическиПодбиратьДокументыВБазе		   = Ложь;
		
		ОтображатьДанныеПроизводителяВладельца = Истина;
		ОтображатьДополнительныеДанныеКода 	   = Истина;
		
		РежимОтображенияСтрокКМ = 1;
		ПолеИнформация = "";
		
		ОчиститьСообщения();
		СписокКМ.Очистить();
		ИсторияДвиженияКМ.Очистить();
		
	КонецЕсли;
	
	УправлениеФормой();

КонецПроцедуры

#КонецОбласти

#Область ПодборДокументовВИстории

&НаКлиенте
Процедура ПодобратьДокументыВБазеПоДаннымСервера(Команда)
	
	//Определяем текущий код маркировки, для которого дополняем историю данных
	ТекущаяСтрока = Элементы.СписокКМ.ТекущиеДанные;
	Если Не ТекущаяСтрока = Неопределено Тогда
		
		ИдентификаторСтрокиДляОтбора = ТекущаяСтрока.ИдентификаторСтроки;
		ПодобратьДокументыВБазеНаСервере(ИдентификаторСтрокиДляОтбора);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьДокументыВБазеНаСервере(ИдентификаторКМ)
	
	СтрокиИстории = ИсторияДвиженияКМ.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторКМ));
	
	Если Не СтрокиИстории.Количество() = 0 Тогда
		Для Каждого СтрокаИстории Из СтрокиИстории Цикл
			
			СтатусКода 			= СтрокаИстории.СтатусКода;
			НомерДокументаИСМПТ = СтрокаИстории.НомерДокументаИСМПТ;
			
			ДанныеДокумента = РаботаСДокументамиИСМПТК.ИсторияКМ_ПолучитьССылкуДокумента(СтатусКода, НомерДокументаИСМПТ);
			
			Если Не ДанныеДокумента = Неопределено Тогда 
				СтрокаИстории.Документ      = ДанныеДокумента.Ссылка;
				СтрокаИстории.Представление = ДанныеДокумента.Представление;
				ЕстьПравоДоступаКДокументу  = Ложь;
				Выполнить("ЕстьПравоДоступаКДокументу = ПравоДоступа(""Просмотр"", Метаданные.Документы." + ДанныеДокумента.ТипДокумента + ");");
				
				//Если у пользователя есть право доступа к документу, выводится активная ссылка на него. Если права нет - только представление документа. 
				ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИсторияДвиженияКМДокумент", 
																				   "Видимость", ЕстьПравоДоступаКДокументу); 
				ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИсторияДвиженияКМПредставление",
																				   "Видимость", НЕ ЕстьПравоДоступаКДокументу);
				
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		ТекстОшибки = НСтр("ru = 'Не заполнены данные по истории движения кода маркировки.'"); 
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;	
		                                           
КонецПроцедуры

#КонецОбласти

#Область ПолучениеИнформацииПоКодам

&НаКлиенте
Процедура ПолучитьКлючАвторизации(СобытиеПослеАвторизации, ОповещениеПриОшибке = Ложь) Экспорт
	
	ИнтерфейсИСМПТККлиент.ПолучитьКлючАвторизацииОбщая(СобытиеПослеАвторизации, Организация, ОповещениеПриОшибке);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСостояниеКодовНаСервере(Команда)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияУкажитеОрганизацию(); 
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;	
	
	//Проверяем данные таблицы
	Если СписокКМ.Количество() = 0 Тогда
		ТекстОшибки = ТекстСообщенияНетКодовВТаблице(); 
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ЗавершениеПроверитьСостояниеКодовНаСервере = Новый ОписаниеОповещения("ЗавершениеПроверитьСостояниеКодовНаСервере", ЭтаФорма);
	ПолучитьКлючАвторизации(ЗавершениеПроверитьСостояниеКодовНаСервере);
	
КонецПроцедуры

&НаСервере
Процедура ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере(РезультатВыполнения, Параметры) Экспорт
	
	ТокенАвторизации = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
	
	МассивКМ = Новый Массив();
	МассивКМ.Добавить(Параметры.КодИдентификации);
	ОтветСервераСостояниеКМ = ИнтеграцияИСМПТК.ЗапроситьДанныеОСостоянииКМ(МассивКМ, Организация, ТокенАвторизации);
	
	ОбработатьОтветСервераПоСостояниюКМ(МассивКМ, ОтветСервераСостояниеКМ);
	
КонецПроцедуры

&НаСервере
Процедура ЗавершениеПроверитьСостояниеКодовНаСервере(РезультатВыполнения, Параметры) Экспорт
			
	ТокенАвторизацииВрем = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
	
	//Если по какой-то причине не удалось выполнить получение Токена, то и запрос на проверку статуса КМ не выполнялся,
	//об этом нужно предупредить и отметить непроверенные коды.
	Если ТокенАвторизацииВрем = Неопределено Тогда 
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНевозможноВыполнитьПроверкуСтатусаКМ_ВФоне();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЗапроситьДанныеОСостоянииКодовСписком(ТокенАвторизацииВрем);
	
КонецПроцедуры

&НаСервере
Процедура ЗапроситьДанныеОСостоянииКодовСписком(ТокенАвторизации = Неопределено)
	
	Токен = ?(ТокенАвторизации = Неопределено, ТокенАвторизацииВрем, ТокенАвторизации);
	
	МассивКМ = Новый Массив();
	Для Каждого СтрокаМарка Из СписокКМ Цикл
		МассивКМ.Добавить(СтрокаМарка.КодИдентификации);	
	КонецЦикла;
	
	ОтветСервераСостояниеКМ = ИнтеграцияИСМПТК.ЗапроситьДанныеОСостоянииКМ(МассивКМ, Организация, Токен);
	ОбработатьОтветСервераПоСостояниюКМ(МассивКМ, ОтветСервераСостояниеКМ);	
	
	//Очищаем данные реквизита после запроса
	ТокенАвторизацииВрем = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОтветСервераПоСостояниюКМ(МассивКМ, ОтветСервераСостояниеКМ)
	
	ЕстьКодыСОшибками = Ложь;
	
	Если ЗначениеЗаполнено(ОтветСервераСостояниеКМ.ТекстОшибки) Тогда
		
		Если ОтветСервераСостояниеКМ.РезультатОтправкиЗапроса.КодСостояния = 404 Тогда
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьВыполнитьЗапросИнформацияОтсутствуетНаСервереИСМПТ();
			Для Каждого СтрокТЧ Из СписокКМ Цикл
				СтрокТЧ.ИндексКартинкиСостояниеСтроки = 2;
			КонецЦикла;
		Иначе
			ТекстСообщения = НСтр("ru = 'При выполнении запроса для получения информации по кодам произошла ошибка!'"); 
		КонецЕсли;
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		ТекстСообщенияОбщий = НСтр("ru = 'При выполнении запроса по текущему статусу кода маркировки произошла ошибка.'");
		ТекстСообщения = ТекстСообщенияОбщий + " "
					   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПодробностиВЖурналеРегистрации(); 
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ТекстОшибки = ТекстСообщенияОбщий
					+ Символы.ПС
					+ ОтветСервераСостояниеКМ.ТекстОшибки;		
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "Обработки.РабочиеМестаИСМПТК.Формы.РабочееМестоПолучениеИнформацииОВладельцеИСостоянииКМ.ОбработатьОтветСервераПоСостояниюКМ");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	//В ином случае начинаем разбирать структуру ответа 
	ДанныеПоКодамСервер = ОтветСервераСостояниеКМ.ДанныеКМ;
	
	Для Каждого КИ Из МассивКМ Цикл
		
		//Проверяем, остался ли в ТЧ код маркировки, который передавали в запросе на сервер
		СтрокаТЧ = СписокКМ.НайтиСтроки(Новый Структура("КодИдентификации", КИ));
		Если СтрокаТЧ.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		//Разбираем ответ сервера
		НайденноеСоответствиеКода = ДанныеПоКодамСервер.Получить(КИ);
		
		Если НайденноеСоответствиеКода = Неопределено Тогда
			//Этот код не принадлежит организации, ничего не заполняем для него
			СтрокаТЧ[0].ВыполненЗапросВладельца = Истина;
			Продолжить;
		КонецЕсли;
		
		СтатусКМ		   = НайденноеСоответствиеКода.СтатусКМ;
		ДатаВводаВОборот   = НайденноеСоответствиеКода.ДатаВводаВОборот;
		НаименованиеТовара = НайденноеСоответствиеКода.НаименованиеТовара;
		
		Владелец 	   = НайденноеСоответствиеКода.Владелец;
		ВладелецИИНБИН = НайденноеСоответствиеКода.ВладелецИИНБИН;
		ВладелецСсылка = НайденноеСоответствиеКода.ВладелецСсылка;
		
		Производитель		= НайденноеСоответствиеКода.Производитель;
		ПроизводительИИНБИН = НайденноеСоответствиеКода.ПроизводительИИНБИН;
		ПроизводительСсылка = НайденноеСоответствиеКода.ПроизводительСсылка;
		
		ВидПродукции = НайденноеСоответствиеКода.ВидПродукции;
		
		//Заполняем строку таблицы
		СтрокаТЧ[0].СтатусКМ 				  = СтатусКМ;
		СтрокаТЧ[0].ДатаВводаВОборот 		  = ДатаВводаВОборот;
		СтрокаТЧ[0].НаименованиеПродукции	  = НаименованиеТовара;
		
		СтрокаТЧ[0].ПроизводительНаименование = Производитель;
		СтрокаТЧ[0].ПроизводительИИНБИН 	  = ПроизводительИИНБИН;
		СтрокаТЧ[0].Производитель			  = ПроизводительСсылка;
		
		СтрокаТЧ[0].ВладелецНаименование	  = Владелец; 
		СтрокаТЧ[0].ВладелецИИНБИН       	  = ВладелецИИНБИН;
		СтрокаТЧ[0].Владелец             	  = ВладелецСсылка;
		
		СтрокаТЧ[0].ВыполненЗапросВладельца   = Истина;
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ[0].Номенклатура) Тогда
			СтрокаТЧ[0].ВидПродукции 		  = ВидПродукции;
		КонецЕсли;
		
	КонецЦикла;

	ВыполнитьПроверкуСостоянийИПроинформироватьОбОшибках();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПроверкуСостоянийИПроинформироватьОбОшибках();
	
	//Если в таблице не осталось кодов, скрываем лишнюю информацию
	Если СписокКМ.Количество() = 0 Тогда
		ПолеИнформация = "";
		ИсторияДвиженияКМ.Очистить();
	КонецЕсли;		
	
	//Устанавливаем картинки состояния строки
	Для Каждого СтрокаСпискаКМ Из СписокКМ Цикл
		ИнтерфейсИСМПТККлиентСервер.УстановитьИндексКартинкиСостояниеСтрокиКМ(СтрокаСпискаКМ, Организация);
	КонецЦикла;
	
	//Проверяем наличие строк с предупреждением 
	НайденныеПроблемныеСтроки = СписокКМ.НайтиСтроки(Новый Структура("ИндексКартинкиСостояниеСтроки", 2));
	Если Не НайденныеПроблемныеСтроки.Количество() = 0 Тогда
		ПолеИнформация = НСтр("ru = 'В списке присутствуют коды маркировки, у которых выбранная организация не является текущим владельцем!'");  
	КонецЕсли;
	
	УправлениеФормой();	
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеИсторииДвиженияКодов

&НаКлиенте
Процедура ЗапроситьИсториюДвиженияКода(Команда)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияУкажитеОрганизацию(); 
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	//Проверяем данные таблицы
	Если СписокКМ.Количество() = 0 Тогда
		ТекстОшибки = ТекстСообщенияНетКодовВТаблице(); 
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ИсторияДвиженияКМ.Очистить();
	ЗапроситьИсториюДвиженияКодаОбщая();
	
КонецПроцедуры

&НаКлиенте
Функция ТекстСообщенияНетКодовВТаблице()
	
	Возврат НСтр("ru = 'В табличной части ""Коды маркировки для проверки"" отсутствуют коды маркировки.'");
	
КонецФункции	

&НаКлиенте
Процедура ЗапроситьИсториюДвиженияКодаАктивнойСтроки(Команда)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияУкажитеОрганизацию(); 
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.СписокКМ.ТекущиеДанные;
	Если Не ТекущаяСтрока = Неопределено Тогда 
		ИдентификаторСтроки = ТекущаяСтрока.ИдентификаторСтроки;
		//Очищаем данные, если они уже были запрошены ранее
		НайденныеСтрокиИстории = ИсторияДвиженияКМ.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
		Если Не НайденныеСтрокиИстории.Количество() = 0 Тогда
			Для Каждого СтрокаТЧ Из НайденныеСтрокиИстории Цикл
				ИсторияДвиженияКМ.Удалить(СтрокаТЧ);
			КонецЦикла;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура("КодИдентификации, ИдентификаторСтроки", ТекущаяСтрока.КодИдентификации, ИдентификаторСтроки);
		
		//Выполняем запрос истории движения
		ЗавершениеИсторияДвиженияКМПриДобавленииНаСервере = Новый ОписаниеОповещения("ЗавершениеИсторияДвиженияКМПриДобавленииНаСервере", ЭтаФорма, ДополнительныеПараметры);
		ПолучитьКлючАвторизации(ЗавершениеИсторияДвиженияКМПриДобавленииНаСервере);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьИсториюДвиженияКодаОбщая()
	
	ЗавершениеЗапроситьИсториюДвиженияКодаНаСервере = Новый ОписаниеОповещения("ЗавершениеЗапроситьИсториюДвиженияКодаНаСервере", ЭтаФорма);
	ПолучитьКлючАвторизации(ЗавершениеЗапроситьИсториюДвиженияКодаНаСервере);
	
КонецПроцедуры
	
&НаСервере
Процедура ЗавершениеЗапроситьИсториюДвиженияКодаНаСервере(РезультатВыполнения, Параметры) Экспорт
		
	ТокенАвторизации = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
	ЗапроситьДанныеОИсторииДвиженияКодовСписком(ТокенАвторизации);
	
КонецПроцедуры

&НаСервере
Процедура ЗавершениеИсторияДвиженияКМПриДобавленииНаСервере(РезультатВыполнения, Параметры) Экспорт
	
	ТокенАвторизации = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
	
	ДанныеСтроки = Новый Структура();
	ДанныеСтроки.Вставить("КИ", Параметры.КодИдентификации);
	ДанныеСтроки.Вставить("ИдентификаторСтроки", Параметры.ИдентификаторСтроки);
	
	ЗапроситьИсториюДвиженияКодаПоДаннымСервера(ДанныеСтроки, ТокенАвторизации);
	
КонецПроцедуры

&НаСервере
Процедура ЗапроситьДанныеОИсторииДвиженияКодовСписком(ТокенАвторизации = Неопределено)
	
	Токен = ?(ТокенАвторизации = Неопределено, ТокенАвторизацииВрем, ТокенАвторизации);
	
	Для Каждого СтрокаМарка Из СписокКМ Цикл
		
		ДанныеСтроки = Новый Структура();
		ДанныеСтроки.Вставить("КИ", СтрокаМарка.КодИдентификации);
		ДанныеСтроки.Вставить("ИдентификаторСтроки", СтрокаМарка.ИдентификаторСтроки);
		
		ЗапроситьИсториюДвиженияКодаПоДаннымСервера(ДанныеСтроки, Токен);
		
	КонецЦикла;
	
	//Очищаем данные реквизита после запроса
	ТокенАвторизацииВрем = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ЗапроситьИсториюДвиженияКодаПоДаннымСервера(ДанныеСтроки, Токен)
	
	КодИдентификации = ДанныеСтроки.КИ;
	Идентификатор	 = Данныестроки.ИдентификаторСтроки;
	
	ОтветСервераСостояниеКМ = ИнтеграцияИСМПТК.ЗапроситьДанныеИсторииКМ(КодИдентификации, Организация, Токен);
	
	Если ЗначениеЗаполнено(ОтветСервераСостояниеКМ.ТекстОшибки) Тогда
		
		Если ОтветСервераСостояниеКМ.РезультатОтправкиЗапроса.КодСостояния = 404 Тогда
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьВыполнитьЗапросИнформацияОтсутствуетНаСервереИСМПТ();
			Для Каждого СтрокТЧ Из СписокКМ Цикл
				СтрокТЧ.ИндексКартинкиСостояниеСтроки = 2;
			КонецЦикла;
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось получить историю движения для кода маркировки %1!.'"); 
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КодИдентификации);
		КонецЕсли;
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		ТекстСообщенияОбщий = НСтр("ru = 'При выполнении запроса по истории движения кода произошла ошибка.'");
		ТекстСообщения =  ТекстСообщенияОбщий + " "
					   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПодробностиВЖурналеРегистрации();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);                                              
		ТекстОшибки = ТекстСообщенияОбщий
					+ Символы.ПС
					+ ОтветСервераСостояниеКМ.ТекстОшибки;
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "Обработки.РабочиеМестаИСМПТК.Формы.РабочееМестоПолучениеИнформацииОВладельцеИСостоянииКМ.ЗапроситьИсториюДвиженияКодаПоДаннымСервера");			
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		Возврат;
	КонецЕсли;
			
	ДанныеПоИстории = ОтветСервераСостояниеКМ.ДанныеКМ;
	ИсторияДвиженияКода = ДанныеПоИстории.Получить(КодИдентификации);
	
	Если ИсторияДвиженияКода.Количество() = 0 Тогда
		//Нет информации по истории: скорее всего код ни разу не принадлежал Организации, поэтому получить его историю невозможно
		ТекстСообщения = НСтр("ru = 'По коду %1 не удалось получить историю движения: возможно, он никогда не состоял на балансе указанной организации.'"); 
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КодИдентификации);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	Иначе
		Для Каждого ДокументИстории Из ИсторияДвиженияКода Цикл
			
			СтатусКода 			 = ДокументИстории.СтатусКода;
			НомерДокументаИСМПТ  = ДокументИстории.НомерДокументаИСМПТ;
			ДатаДокументаИСМПТ   = ДокументИстории.ДатаДокументаИСМПТ;
			
			ВладелецНаименование = ДокументИстории.ВладелецНаименование;
			ВладелецСсылка		 = ДокументИстории.ВладелецСсылка;
			ВладелецИИНБИН		 = ДокументИстории.ВладелецИИНБИН;
			
			НоваяСтрокаИсторииКМ = ИсторияДвиженияКМ.Добавить();
			НоваяСтрокаИсторииКМ.СтатусКода			 = СтатусКода;
			НоваяСтрокаИсторииКМ.ДатаДокумента		 = ДатаДокументаИСМПТ;
			НоваяСтрокаИсторииКМ.НомерДокументаИСМПТ = НомерДокументаИСМПТ;
			
			НоваяСтрокаИсторииКМ.Владелец 			 = ВладелецНаименование;
			НоваяСтрокаИсторииКМ.ВладелецСсылка 	 = ВладелецСсылка;
			НоваяСтрокаИсторииКМ.ВладелецИИНБИН 	 = ВладелецИИНБИН;
			
			НоваяСтрокаИсторииКМ.ИдентификаторСтроки = Идентификатор;
					
		КонецЦикла;
		
		Если АвтоматическиПодбиратьДокументыВБазе Тогда 
			ПодобратьДокументыВБазеНаСервере(Идентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеФормой()
	
	//Отображение дополнительных сведений о коде в таблице
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДанныеКодаДополнительно", "Видимость", ОтображатьДополнительныеДанныеКода);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДанныеКодаСервер", 		 "Видимость", ОтображатьДополнительныеДанныеКода);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДанныеНоменклатуры",      "Видимость", ОтображатьДополнительныеДанныеКода);
	
	//Отображение производителя и владельца
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Производитель", "Видимость", ОтображатьДанныеПроизводителяВладельца);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Владелец", 	   "Видимость", ОтображатьДанныеПроизводителяВладельца);
	
	//Отображение характеристик в таблице
	ХарактеристикиИспользуются = ИнтеграцияИСМПТКПереопределяемый.ПроверитьИспользованиеХарактеристик();
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКМХарактеристика", "Видимость", ХарактеристикиИспользуются);			
		
	//Вывод Информации о кодах справочное поле
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаИнформация", "Видимость", ЗначениеЗаполнено(ПолеИнформация));
	
	//Таблица истории движения кодов
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИсторияДвиженияКода", "Видимость", Не ИсторияДвиженияКМ.Количество() = 0);
	
	//Автоподбор документов в базе - требует права доступа ко всем возможным документам, которые выступают регистраторами движений кода.
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АвтоматическиПодбиратьДокументыВБазе", "Доступность", АвтоматическиЗапрашиватьИсториюДвиженияКМ);
		
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ИспользуютсяСканерыШтрихкода = (ОбщегоНазначенияИСМПТКВызовСервераПереопределяемый.ОборудованиеПоПараметрам("СканерШтрихкода").Количество() > 0);
	Иначе
		ИспользуютсяСканерыШтрихкода = Ложь;
	КонецЕсли;
	
	//Значения по умолчанию
	РежимОтображенияСтрокКМ = 1;
	ОтображатьДополнительныеДанныеКода = Истина;
	ОтображатьДанныеПроизводителяВладельца = Истина;
	
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоКодуДляИстории()

	ТекущиеДанныеКода = Элементы.СписокКМ.ТекущиеДанные;
	Если ТекущиеДанныеКода <> Неопределено Тогда
		УстановитьОтборТабличнойЧасти(Элементы.ИсторияДвиженияКМ, Новый Структура("ИдентификаторСтроки", ТекущиеДанныеКода.ИдентификаторСтроки));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборТабличнойЧасти(Таблица, Знач ДанныеОтбора, ДополнитьОтбор = Ложь)
	
	Если Не ДополнитьОтбор
		ИЛИ Таблица.ОтборСтрок = Неопределено Тогда
		Таблица.ОтборСтрок = Новый ФиксированнаяСтруктура(ДанныеОтбора);
	Иначе
		Для Каждого ЭлементСтруктурыОтбора Из Таблица.ОтборСтрок Цикл
			Если ДанныеОтбора.Свойство(ЭлементСтруктурыОтбора.Ключ) = Неопределено Тогда
				ДанныеОтбора.Вставить(ЭлементСтруктурыОтбора.Ключ, ЭлементСтруктурыОтбора.Значение);
			КонецЕсли;
		КонецЦикла;
		Таблица.ОтборСтрок = Новый ФиксированнаяСтруктура(ДанныеОтбора);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакИспользованияХарактеристик(НомерСтроки = Неопределено)
	
	СобытияФормИСМПТКПереопределяемый.ЗаполнитьПризнакИспользованияХарактеристикВРабочемМесте(СписокКМ);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеХарактеристикНоменклатуры() Экспорт
	
	ДанныеНоменклатура = Новый Структура();
	ДанныеНоменклатура.Вставить("Использовать", Истина);
	ДанныеНоменклатура.Вставить("ИмяПоля", 	 	"СписокКМНоменклатура");
	ДанныеНоменклатура.Вставить("ПутьКПолю", 	"СписокКМ.Номенклатура");
	
	ДанныеХарактеристика = Новый Структура();
	ДанныеХарактеристика.Вставить("Использовать", Истина);
	ДанныеХарактеристика.Вставить("ИмяПоля",   	  "СписокКМХарактеристика");
	ДанныеХарактеристика.Вставить("ПутьКПолю", 	  "СписокКМ.ХарактеристикиИспользуются");
	
	РозничноеВыбытиеИСМПТКПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатурыВРабочемМесте(ЭтаФорма, ДанныеНоменклатура, ДанныеХарактеристика);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНаличиеSSCCВДокументе(КодИдентификации)
	
	ТаблицаМарок = СписокКМ.Выгрузить();
	Возврат Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ВыполнитьПроверкуТранспортногоКодаПоДокументу(КодИдентификации, ТаблицаМарок); 
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОПроблемеЗапросаВалидностиКМ() Экспорт
	
	//Если по какой-то причине не удалось выполнить получение Токена, то и запрос на проверку статуса КМ не выполнялся,
	//об этом нужно предупредить и отметить непроверенные коды.
	Если ТокенАвторизацииВрем = Неопределено Тогда 
		СообщитьОНевозможностиВыполнитьПроверкуСтатусаКМ("Фоновый");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОНевозможностиВыполнитьПроверкуСтатусаКМ(РежимЗапроса) Экспорт

	Если РежимЗапроса = "Ручной" Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНевозможноВыполнитьПроверкуСтатусаКМ_Вручную();
	Иначе	
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНевозможноВыполнитьПроверкуСтатусаКМ_ВФоне();
	КонецЕсли;
	ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьВсяИнформацияДляЗапроса() 

	Если Не ЗначениеЗаполнено(Организация) 
		И АвтоматическиЗапрашиватьИнформациюОСостоянииКМ Тогда
		
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоПроверкаВалидностиКодаИСМПТК");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
		
	ИначеЕсли Не ЗначениеЗаполнено(Организация)
		И АвтоматическиЗапрашиватьИсториюДвиженияКМ Тогда
		
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВключенАвтозапросНужнаОрганизацияДляВыполнения("АвтоматическиЗапрашиватьИсториюДвиженияКМ");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции

#КонецОбласти
