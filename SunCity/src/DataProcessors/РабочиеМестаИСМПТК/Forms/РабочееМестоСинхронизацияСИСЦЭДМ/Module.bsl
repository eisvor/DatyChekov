////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	РежимЗапуска = Параметры.РежимЗапуска;
	ВидыДокументов = "1,10"; //по умолчанию
	Если Параметры.Свойство("ВидыДокументов") И ЗначениеЗаполнено(Параметры.ВидыДокументов) Тогда
		ВидыДокументов = Параметры.ВидыДокументов;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("ВестиУчетПоСкладамИСЦЭДМ") Тогда
		Элементы.ТаблицаСтруктурнаяЕдиница.ВыбиратьТип = Ложь;
	КонецЕсли; 
	
	ОрганизацияОтбор = ?(Параметры.Свойство("ОрганизацияОтбор"), Параметры.ОрганизацияОтбор, Неопределено);
	ЗаполнитьТаблицуПрофилейДляСинхронизации(ОрганизацияОтбор);
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияСинхронизацияИСЦЭДМ() Тогда
		ОбновитьТаблицуПрофилейДляСинхронизации(); // Обновление даты синхронизации по результататм работы события
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ТаблицаСтруктурнаяЕдиницаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтруктурнаяЕдиницаПриИзменении(Элемент)
	
	Строка = Элементы.Таблица.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(Строка.СтруктурнаяЕдиница) Тогда 
		Возврат;
	КонецЕсли;
	
	Строка.Пометка = Истина;
	Строка.ДатаОкончанияСинхронизацииИСЦЭДМ = ПолучитьДатуСеанса();
	ТокенАвторизации = ПолучитьТокенАвторизации(Строка.СтруктурнаяЕдиница);
	Если ТокенАвторизации <> Неопределено Тогда
		Строка.ТокенАвторизацииИСЦЭДМ = ТокенАвторизации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКомментарийОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтруктурнаяЕдиницаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	Если Не ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("ВестиУчетПоСкладамИСЦЭДМ") Тогда
		Элементы.Таблица.ТекущиеДанные.СтруктурнаяЕдиница = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьПустоеЗначениеСтруктурнойЕдиницы();
	Иначе
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элементы.Таблица.ТекущиеДанные;
		
		ПараметрыОткрытияФормы = Новый Структура();
		Если Не ТекущиеДанные = Неопределено Тогда
			Если ТипЗнч(ТекущиеДанные.СтруктурнаяЕдиница) = Тип("СправочникСсылка.СкладыИСЦЭДМ") Тогда 
				ПараметрыОткрытияФормы.Вставить("ТРП", ТекущиеДанные.СтруктурнаяЕдиница);
				ПараметрыОткрытияФормы.Вставить("Организация", ПолучитьВладельцаТРП(ТекущиеДанные.СтруктурнаяЕдиница));
			Иначе
				ПараметрыОткрытияФормы.Вставить("ТРП", Неопределено);
				ПараметрыОткрытияФормы.Вставить("Организация", ТекущиеДанные.СтруктурнаяЕдиница);
			КонецЕсли;
		Иначе
			ПараметрыОткрытияФормы.Вставить("ТРП", Неопределено);
			ПараметрыОткрытияФормы.Вставить("Организация", Неопределено);
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораСтруктурногоПодразделения", ЭтаФорма);
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораТРПИСЦЭДМ", ПараметрыОткрытияФормы, ЭтаФорма, Истина,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	КонецЕсли;
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Синхронизировать(Команда)
	
	ОчиститьСообщения();
	МассивПрофилейИСЦЭДМ = ЗаполнитьСтруктуруПрофиляПолученияДанных();
	
	Если МассивПрофилейИСЦЭДМ.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Выберите хотя бы одну настройку для синхронизации с ИС ЦЭДМ!'");
		Сообщение.Поле = "Таблица";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("МассивПрофилейИСЦЭДМСДатойСинхронизации", МассивПрофилейИСЦЭДМ);
	
	СинхронизироватьИСЦЭДМ(ДополнительныеПараметры);
	
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		СтрокаТаблицы.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		СтрокаТаблицы.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ОбновитьТаблицуПрофилейДляСинхронизации()
	
	ЗаполнитьТаблицуПрофилейДляСинхронизации();
		
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСтруктуруПрофиляПолученияДанных()
	
	// Создать массив профилей ИС ЦЭДМ из помеченных строк таблицы.
	МассивПрофилейИСЦЭДМСДатойСинхронизации = Новый Массив;
	СтруктурныеЕдиницы = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		Если Не СтрокаТаблицы.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтрокиАвторизации  = Новый Структура();
		
		Если Не ТипЗнч(СтрокаТаблицы.СтруктурнаяЕдиница) = Тип("СправочникСсылка.СкладыИСЦЭДМ") Тогда 
			
			ДанныеСтрокиАвторизации.Вставить("СтруктурнаяЕдиница", СтрокаТаблицы.СтруктурнаяЕдиница);
			ДанныеСтрокиАвторизации.Вставить("Организация", СтрокаТаблицы.СтруктурнаяЕдиница);
			ДанныеСтрокиАвторизации.Вставить("ТокенАвторизации", СтрокаТаблицы.ТокенАвторизацииИСЦЭДМ);
			ДанныеСтрокиАвторизации.Вставить("ДатаНачалаСинхронизацииВходящихДокументовИСЦЭДМ", СтрокаТаблицы.ДатаНачалаСинхронизацииИСЦЭДМ);
			ДанныеСтрокиАвторизации.Вставить("ДатаОкончанияСинхронизацииИСЦЭДМ", СтрокаТаблицы.ДатаОкончанияСинхронизацииИСЦЭДМ);
			
			БИН = ОбщегоНазначенияИСМПТК.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.СтруктурнаяЕдиница, 
																			ИнтеграцияИСМПТКПереопределяемый.ПолучитьРеквизитИИНОрганизации());
			
			ДанныеСтрокиАвторизации.Вставить("БИН", БИН);
			
		Иначе
			
			ДанныеСтрокиАвторизации.Вставить("СтруктурнаяЕдиница", СтрокаТаблицы.СтруктурнаяЕдиница);
			ДанныеСтрокиАвторизации.Вставить("ТокенАвторизации", СтрокаТаблицы.ТокенАвторизацииИСЦЭДМ);
			ДанныеСтрокиАвторизации.Вставить("ДатаНачалаСинхронизацииВходящихДокументовИСЦЭДМ", СтрокаТаблицы.ДатаНачалаСинхронизацииИСЦЭДМ);
			ДанныеСтрокиАвторизации.Вставить("ДатаОкончанияСинхронизацииИСЦЭДМ", СтрокаТаблицы.ДатаОкончанияСинхронизацииИСЦЭДМ);
			
			БИН 		= ОбщегоНазначенияИСМПТК.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.СтруктурнаяЕдиница, "ИИНБИНСклада");
			Организация = ОбщегоНазначенияИСМПТК.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.СтруктурнаяЕдиница, "Организация");
			
			ДанныеСтрокиАвторизации.Вставить("БИН", БИН);
			ДанныеСтрокиАвторизации.Вставить("Организация", Организация);
			
		КонецЕсли;
		
		//виды получаемых документов
		ДанныеСтрокиАвторизации.Вставить("ВидыДокументов", ОбщегоНазначенияИСМПТККлиентСервер.МассивИзСтроки(ВидыДокументов,,Истина));
		
		МассивПрофилейИСЦЭДМСДатойСинхронизации.Добавить(ДанныеСтрокиАвторизации);

	КонецЦикла; 
	
	Возврат МассивПрофилейИСЦЭДМСДатойСинхронизации;

КонецФункции

&НаКлиенте
Процедура СинхронизироватьИСЦЭДМ(ДополнительныеПараметры) Экспорт

	ДлительнаяОперация = СинхронизироватьДанные(УникальныйИдентификатор, ДополнительныеПараметры);
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ПослеСинхронизацииДанных(ДлительнаяОперация, Неопределено);
		Возврат
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеСинхронизацииДанных", ЭтотОбъект);
	ПараметрыОжидания     = ОбщегоНазначенияИСМПТККлиентПереопределяемый.ПараметрыОжидания(ЭтаФорма); 
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.ТекстСообщения 	= РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокПолучениеДанныхССервераЦЭДМ();
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры 

&НаСервере
Функция СинхронизироватьДанные(Знач УникальныйИдентификатор, Знач ДополнительныеПараметры)
	
	НаименованиеЗадания = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокПолучениеДанныхССервераЦЭДМ();
	ИмяМетода           = "ИнтеграцияИСМПТК.ПолучитьНовыеДокументыИСЦЭДМ";
	ПараметрыВыполнения = ОбщегоНазначенияИСМПТКПереопределяемый.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	
	Возврат ОбщегоНазначенияИСМПТКПереопределяемый.ВыполнитьПроцедуру(ПараметрыВыполнения, ИмяМетода, ДополнительныеПараметры);
	
КонецФункции

&НаСервере
Функция СообщенияФоновогоЗадания(УникальныйИдентификатор)
	Возврат ОбщегоНазначенияИСМПТКПереопределяемый.СообщенияПользователю(Истина, УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура ПослеСинхронизацииДанных(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда // Пользователь отменил задание.
		Возврат;
	КонецЕсли;

	Если Результат.Статус = "Ошибка" Тогда
		ТекстОшибки = Результат.ПодробноеПредставлениеОшибки;
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "Обработки.РабочиеМестаИСМПТК.Формы.РабочееМестоСинхронизацияСИСЦЭДМ.ПослеСинхронизацииДанных");
		ОбщегоНазначенияИСМПТКВызовСервера.СоздатьЗаписьЖурналаРегистрации(ИмяСобытия, "Ошибка",,, ТекстОшибки);
		ТекстИсключения = НСтр("ru = 'Произошла ошибка при синхронизации с сервером ИС ЦЭДМ.'") + " " 
						+ РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПодробностиВЖурналеРегистрации();
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Сообщения = СообщенияФоновогоЗадания(УникальныйИдентификатор);
	
	Если Не Сообщения.Количество() = 0 Тогда 
		СообщениеПользователю = "";
		
		Для Каждого Сообщение Из Сообщения Цикл 
			СообщениеПользователю = СообщениеПользователю + Символы.ПС + Символы.ПС + Сообщение.Текст;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СообщениеПользователю) Тогда 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СообщениеПользователю);
		КонецЕсли; 
	КонецЕсли;
	
	//оповестить формы списка
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьАктПриемаПередачиИСЦЭДМ());
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьАктВнутреннегоПеремещенияИСЦЭДМ());
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОВвозеИзЕАЭСИСЦЭДМ());
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияЗаписьУведомлениеОРасхожденияхИСЦЭДМ());
	ИнтеграцияИСМПТККлиент.ОповеститьФормы(РаботаСДокументамиИСМПТККлиентСервер.ИмяСобытияСинхронизацияИСЦЭДМ());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПрофилейДляСинхронизации(ОрганизацияОтбор = Неопределено)
	
	// Данные по последним датам обмена по организациям, доступным пользователю
	ТекстПоОрганизациям = "ВЫБРАТЬ
		|	ПрофилиДоступаИСЦЭДМ.Организация КАК Организация,
		|	ПараметрыМетодовИСМПТК.ЗначениеПараметра КАК ДатаОбменаПоОрганизации
		|ПОМЕСТИТЬ ВТ_ОрганизацииПользователя
		|ИЗ
		|	РегистрСведений.ПрофилиДоступаИСЦЭДМ КАК ПрофилиДоступаИСЦЭДМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыМетодовИСМПТК КАК ПараметрыМетодовИСМПТК
		|		ПО ПрофилиДоступаИСЦЭДМ.Организация = ПараметрыМетодовИСМПТК.Организация
		|ГДЕ
		|	ПрофилиДоступаИСЦЭДМ.Пользователь = &Пользователь
		|	И ПараметрыМетодовИСМПТК.ИмяПараметра = &ИмяПараметра
		|	И ПараметрыМетодовИСМПТК.ИмяМетода = &ИмяМетода
		|	И ПараметрыМетодовИСМПТК.СкладЦЭДМ = ЗНАЧЕНИЕ(Справочник.СкладыИСЦЭДМ.ПустаяСсылка)
		|;
		| 
		|////////////////////////////////////////////////////////////////////////////////
		|";
	
	// Данные по последнему обмену по организации из установленного отбора в форме вызова
	ТекстПоОрганизацииИзОтбора = "ВЫБРАТЬ
	    |	ПрофилиДоступаИСЦЭДМ.Организация КАК Организация,
		|	ПараметрыМетодовИСМПТК.ЗначениеПараметра КАК ДатаОбменаПоОрганизации
		|ПОМЕСТИТЬ ВТ_ОрганизацияОтбор
		|ИЗ
		|	РегистрСведений.ПрофилиДоступаИСЦЭДМ КАК ПрофилиДоступаИСЦЭДМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыМетодовИСМПТК КАК ПараметрыМетодовИСМПТК
		|		ПО ПрофилиДоступаИСЦЭДМ.Организация = ПараметрыМетодовИСМПТК.Организация
		|ГДЕ
		|	ПараметрыМетодовИСМПТК.ИмяПараметра = &ИмяПараметра
		|	И ПараметрыМетодовИСМПТК.ИмяМетода = &ИмяМетода
		|	И ПараметрыМетодовИСМПТК.СкладЦЭДМ = ЗНАЧЕНИЕ(Справочник.СкладыИСЦЭДМ.ПустаяСсылка)
		|	И ПрофилиДоступаИСЦЭДМ.Организация = &ОрганизацияОтбор
		|	И ПрофилиДоступаИСЦЭДМ.Пользователь = &Пользователь
		|;
		| 
		|////////////////////////////////////////////////////////////////////////////////
		|";
	
	Если ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("ВестиУчетПоСкладамИСЦЭДМ") Тогда
		ТекстПоСкладам = "ВЫБРАТЬ
			|	ВТ_ОрганизацииПользователя.Организация КАК Организация,
			|	СкладыИСЦЭДМ.Ссылка КАК ТРП,
			|	ПараметрыМетодовИСМПТК.ЗначениеПараметра КАК ДатаОбменаПоТРП
			|ПОМЕСТИТЬ ВТ_ТРППользователя
			|ИЗ
			|	ВТ_ОрганизацииПользователя КАК ВТ_ОрганизацииПользователя
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкладыИСЦЭДМ КАК СкладыИСЦЭДМ
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыМетодовИСМПТК КАК ПараметрыМетодовИСМПТК
			|			ПО СкладыИСЦЭДМ.Ссылка = ПараметрыМетодовИСМПТК.СкладЦЭДМ
			|		ПО ВТ_ОрганизацииПользователя.Организация = СкладыИСЦЭДМ.Организация
			|ГДЕ
			|	ПараметрыМетодовИСМПТК.ИмяПараметра = &ИмяПараметра
			|	И ПараметрыМетодовИСМПТК.ИмяМетода = &ИмяМетода
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|"; 
		
		ТекстОбъединениеСклады = "ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ТРППользователя.ТРП,
		|	ВТ_ТРППользователя.ДатаОбменаПоТРП
		|ИЗ
		|	ВТ_ТРППользователя КАК ВТ_ТРППользователя
		|;
		|";
		
	Иначе
		ТекстПоСкладам = "";
		ТекстОбъединениеСклады = "
		|;
		|";
	КонецЕсли;
	
	ТекстОбъединениеДезСкладов = "ВЫБРАТЬ
		|	ВТ_ОрганизацииПользователя.Организация КАК Организация,
		|	ВТ_ОрганизацииПользователя.ДатаОбменаПоОрганизации КАК ДатаОбменаПоОрганизации
		|ПОМЕСТИТЬ ВТ_Итоги
		|ИЗ
		|	ВТ_ОрганизацииПользователя КАК ВТ_ОрганизацииПользователя
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ОрганизацияОтбор.Организация,
		|	ВТ_ОрганизацияОтбор.ДатаОбменаПоОрганизации
		|ИЗ
		|	ВТ_ОрганизацияОтбор КАК ВТ_ОрганизацияОтбор
		|";
	
	ТекстИтог = "
	    |////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Итоги.Организация КАК Организация,
		|	ВТ_Итоги.ДатаОбменаПоОрганизации КАК ДатаОбменаПоОрганизации
		|ИЗ
		|	ВТ_Итоги КАК ВТ_Итоги
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Итоги.Организация,
		|	ВТ_Итоги.ДатаОбменаПоОрганизации";
	
	ТекстЗапроса = ТекстПоОрганизациям + ТекстПоОрганизацииИзОтбора + ТекстПоСкладам 
				 + ТекстОбъединениеДезСкладов + ТекстОбъединениеСклады + ТекстИтог;
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Пользователь", 	  ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь());
	Запрос.УстановитьПараметр("ОрганизацияОтбор", ОрганизацияОтбор);
	Запрос.УстановитьПараметр("ИмяМетода",		  ИнтеграцияИСМПТК.ИмяМетодаДляВидаДокументовЦЭДМ(ВидыДокументов));
	Запрос.УстановитьПараметр("ИмяПараметра", 	  Перечисления.ИменаПараметровИСМПТК.СоздаватьСДаты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НайденныеСтроки = Таблица.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница", Выборка.Организация));
		Если НайденныеСтроки.Количество() = 0 Тогда 
			СтрокаТаблицы = Таблица.Добавить();
			СтрокаТаблицы.СтруктурнаяЕдиница = Выборка.Организация;
		Иначе 
			СтрокаТаблицы = НайденныеСтроки[0];
		КонецЕсли;
			
		СтрокаТаблицы.ДатаНачалаСинхронизацииИСЦЭДМ 	= Выборка.ДатаОбменаПоОрганизации;
		СтрокаТаблицы.ДатаОкончанияСинхронизацииИСЦЭДМ 	= ПолучитьДатуСеанса();
		
		Организация = ПолучитьОрганизациюИзСЕ(СтрокаТаблицы.СтруктурнаяЕдиница);
		НайденныеСтроки = Таблица.НайтиСтроки(Новый Структура("Организация", ПолучитьОрганизациюИзСЕ(Организация)));
		Если Не НайденныеСтроки.Количество() = 0 Тогда 
			СтрокаТаблицы.ТокенАвторизацииИСЦЭДМ = НайденныеСтроки[0].ТокенАвторизацииИСЦЭДМ;
		Иначе
			ТокенАвторизации 	= ПолучитьТокенАвторизации(СтрокаТаблицы.СтруктурнаяЕдиница);
			Если ТокенАвторизации <> Неопределено Тогда
				СтрокаТаблицы.ТокенАвторизацииИСЦЭДМ = ТокенАвторизации;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТаблицы.Организация 	= Организация;
		
	КонецЦикла;
	
	Если Не ОрганизацияОтбор = Неопределено
		И Таблица.НайтиСтроки(Новый Структура("СтруктурнаяЕдиница", ОрганизацияОтбор)).Количество() = 0
		И ИнтерфейсИСМПТК.ПроверитьНаличиеНастройкиПодключенияУПользователя(ОрганизацияОтбор) Тогда 
		// Новая организация для синхронизации, добавляем в таблицу отдельно
		
		СтрокаТаблицы = Таблица.Добавить(); 
		СтрокаТаблицы.СтруктурнаяЕдиница = ОрганизацияОтбор;
		СтрокаТаблицы.ДатаОкончанияСинхронизацииИСЦЭДМ = ПолучитьДатуСеанса();
		
		ТокенАвторизации 	= ПолучитьТокенАвторизации(СтрокаТаблицы.СтруктурнаяЕдиница);
		Если ТокенАвторизации <> Неопределено Тогда
			СтрокаТаблицы.ТокенАвторизацииИСЦЭДМ = ТокенАвторизации;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	ТекстЗаголовка = НСтр("ru='Получение с сервера документов ""%НаименованиеСписка%"".'");
	
	Элементы.ДекорацияПояснение.Видимость = Истина;
	Если ВидыДокументов = "2" Тогда
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НаименованиеСписка%", Метаданные.Документы.УведомлениеОВвозеИзЕАЭСИСЦЭДМ.ПредставлениеСписка);
	ИначеЕсли ВидыДокументов = "1,10" Тогда
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НаименованиеСписка%", Метаданные.Документы.АктПриемаПередачиИСЦЭДМ.ПредставлениеСписка);
	ИначеЕсли ВидыДокументов = "7000" Тогда
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НаименованиеСписка%", Метаданные.Документы.УведомлениеОРасхожденияхИСЦЭДМ.ПредставлениеСписка);
	ИначеЕсли ВидыДокументов = "6,7" Тогда
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НаименованиеСписка%", Метаданные.Документы.АктВнутреннегоПеремещенияИСЦЭДМ.ПредставлениеСписка);
	ИначеЕсли ВидыДокументов = "11" Тогда
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НаименованиеСписка%", Метаданные.Документы.ОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ.ПредставлениеСписка);
	Иначе
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НаименованиеСписка%", РаботаСТекстамиИСМПТККлиентСервер.НаименованиеИСЦЭДМ());
	КонецЕсли;
	
	Элементы.ДекорацияПояснение.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивВидовДокументов()
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(1); //Акт ПП
	МассивТипов.Добавить(10); //Аки ПП ЕД
	МассивТипов.Добавить(6); //Перемещение
	МассивТипов.Добавить(7); //Перемещение ЕД
	МассивТипов.Добавить(11); //Очет передачи КИ 
	МассивТипов.Добавить(7000);//Уведомление о расхождении 
	МассивТипов.Добавить(2);//Уведомление о ввозе из ЕАЭС
	
	Возврат МассивТипов;
	
КонецФункции	

&НаСервере
Функция ПолучитьВладельцаТРП(ТРП)
	
	Возврат ?(ЗначениеЗаполнено(ТРП), ТРП.Организация, Неопределено);
	
КонецФункции

&НаСервере
Функция ПолучитьТокенАвторизации(СтруктурнаяЕдиница)
	
	Возврат ИнтерфейсИСМПТК.ПолучитьТокенАвторизацииИСЦЭДМ(ПолучитьОрганизациюИзСЕ(СтруктурнаяЕдиница));
	
КонецФункции

&НаСервере
Функция ПолучитьОрганизациюИзСЕ(СтруктурнаяЕдиница)
	
	Если ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.СкладыИСЦЭДМ") Тогда
		Организация = ОбщегоНазначенияИСМПТК.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница, "Организация");
	Иначе 
		Организация = СтруктурнаяЕдиница;
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

&НаСервере
Функция ПолучитьТекущуюДату() Экспорт
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		НоваяСтрока = Таблица.НайтиПоИдентификатору(Элементы.Таблица.ТекущаяСтрока);
		НоваяСтрока.СтруктурнаяЕдиница = РезультатВыбора.Организация;		
		НоваяСтрока.ДатаОкончанияСинхронизацииИСЦЭДМ = ПолучитьДатуСеанса();
		
		НоваяСтрока.Пометка = Истина;
		ТокенАвторизации 	= ПолучитьТокенАвторизации(НоваяСтрока.СтруктурнаяЕдиница);
		Если ТокенАвторизации <> Неопределено Тогда
			НоваяСтрока.ТокенАвторизацииИСЦЭДМ = ТокенАвторизации;
		КонецЕсли;
		
	КонецЕсли;  	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДатуСеанса()
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции
	
