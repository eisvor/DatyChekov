
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Организация") Тогда
		Организация = Параметры.Организация;
		СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Организация, "Организация");
		ОрганизацияИдентификационныйНомер = СтруктураДанных.ОрганизацияИдентификационныйНомер;
	КонецЕсли;
	
	СформироватьСписокВыбораВидаПродукции();
	
	Ответственный = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь();
	УстановитьНачальныеНастройки();
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьГруппуДокументов(Команда)
	
	ОчиститьСообщения();
	
	ПрочитанныйФайл = Неопределено;
	//Выполнить проверки заполнения и прочитать файл
	Если Не МожноВводитьДокументы(ПрочитанныйФайл) Тогда
		Возврат;
	КонецЕсли;

	ДанныеШапки = Новый Структура();
	ДанныеШапки.Вставить("Организация",   Организация);
	ДанныеШапки.Вставить("ВидПродукции",  ВидПродукции);
	ДанныеШапки.Вставить("ВидУпаковки",   ВидУпаковки);
	ДанныеШапки.Вставить("Ответственный", Ответственный);
	ДанныеШапки.Вставить("ИдентификаторПроизводственногоЗаказа", ИдентификаторПроизводственногоЗаказа);
	ДанныеШапки.Вставить("ИдентификаторПроизводственнойЛинии", 	 ИдентификаторПроизводственнойЛинии);
	ДанныеШапки.Вставить("ОрганизацияИдентификационныйНомер", 	 ОрганизацияИдентификационныйНомер);
		
	КодАгрегатаПредыдущий = "";
	МассивУпаковок = Новый Массив();  //Элемент массива - структура для заполнения ТЧ в одном документе Агрегации
	СписокВложенныхТоваров = Новый СписокЗначений;  //Список вложенных кодов маркировки
		
	//Разбираем загруженный файл и формируем комплекты данных для заполнения документов.
	//Необходимо заполнить МассивУпаковок, каждый элемент которого содержит структуру, в которой находится два значения:
	//КодАгрегата (Base64) и МассивВложенныхТоваров (массив, каждый элемент - Base64). 
	Для НомерСтроки = 1 По ПрочитанныйФайл.КоличествоСтрок() Цикл
		
		СтрокаФайла = ПрочитанныйФайл.ПолучитьСтроку(НомерСтроки);
		
		//В зависимости от того, какой режим разбора строки выбран, определяем необходимые данные разбора и 
		//"разрезаем" строку на части
		Если СпособРазбораСтроки Тогда
			//Ищем по разделителю
			Если РежимРазделителя = 1 Или РежимРазделителя = 2 Или РежимРазделителя = 3 Тогда
				ПозицияРазделителя    = СтрНайти(СтрокаФайла, РазделительДляПоиска);
				КодАгрегатаИзСтроки   = Лев(СтрокаФайла,  ПозицияРазделителя - 1);
				КодМаркировкиИзСтроки = Сред(СтрокаФайла, ПозицияРазделителя + 1) 
			Иначе
				ДлинаПользовательскогоРазделителя = СтрДлина(ПользовательскийРазделитель);
				ПозицияРазделителя    = СтрНайти(СтрокаФайла, РазделительДляПоиска); 
				КодАгрегатаИзСтроки   = Лев(СтрокаФайла,  ПозицияРазделителя - 1);
				КодМаркировкиИзСтроки = Сред(СтрокаФайла, ПозицияРазделителя + ДлинаПользовательскогоРазделителя) 
			КонецЕсли;	
		Иначе
			//Ищем по длине строки
			КодАгрегатаИзСтроки   = Лев(СтрокаФайла,  ДлинаКодаАгрегата);
			КодМаркировкиИзСтроки = Сред(СтрокаФайла, ДлинаКодаАгрегата + 2)
		КонецЕсли;
		 
		КодАгрегатаИзСтрокиBase64 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(КодАгрегатаИзСтроки);
		КодВложенногоТовараBase64 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(КодМаркировкиИзСтроки);
		
		СтруктураКода 		 = Новый Структура("ШтрихКод, ФорматBase64", КодВложенногоТовараBase64, Истина);
		ДанныеКодаМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(СтруктураКода);
		
		Если ДанныеКодаМаркировки = Неопределено
			Или ТипЗнч(ДанныеКодаМаркировки) = Тип("Строка") Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось распознать код маркировки ""%1"" в строке номер %2 из загруженного файла. Этот код будет пропущен при создании документов.'");
			ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, КодМаркировкиИзСтроки, НомерСтроки);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
			Продолжить;
		КонецЕсли;		
		
		Если Не КодАгрегатаИзСтрокиBase64 = КодАгрегатаПредыдущий И Не КодАгрегатаПредыдущий = "" Тогда
			//Завершаем заполнение упаковки и готовимся формировать новую
			СтруктураОднойУпаковки = Новый Структура("КодАгрегата, МассивВложенныхТоваров", "", "");
			СтруктураОднойУпаковки.КодАгрегата = КодАгрегатаПредыдущий;
			СтруктураОднойУпаковки.МассивВложенныхТоваров = СписокВложенныхТоваров.Скопировать();
			
			//Выполняем проверку количества: если указанная Емкость упаковки меньше получившегося Количества по факту, 
			//создавать документ нельзя 
			Если Не ЕмкостьУпаковок = 0 И ЕмкостьУпаковок < СписокВложенныхТоваров.Количество() Тогда
				СообщитьКоличествоРасходится(Лев(СтрокаФайла, ДлинаКодаАгрегата));
				Возврат;
			КонецЕсли;
			
			МассивУпаковок.Добавить(СтруктураОднойУпаковки);
			СписокВложенныхТоваров.Очистить();
			//Начинаем заполнение новой упаковки
			СписокВложенныхТоваров.Добавить(КодВложенногоТовараBase64);
			
		Иначе
			//Продолжаем заполнение текущей упаковки
			СписокВложенныхТоваров.Добавить(КодВложенногоТовараBase64);
			
			//Если это последняя строка, то нужно добавить комплект в общую структуру
			Если НомерСтроки = ПрочитанныйФайл.КоличествоСтрок() Тогда
				СтруктураОднойУпаковки = Новый Структура("КодАгрегата, МассивВложенныхТоваров", "", "");
				СтруктураОднойУпаковки.КодАгрегата = КодАгрегатаИзСтрокиBase64;
				СтруктураОднойУпаковки.МассивВложенныхТоваров = СписокВложенныхТоваров;
				//Выполняем проверку количества: если указанная Емкость упаковки меньше получившегося Количества по факту, 
				//создавать документ нельзя 
				Если Не ЕмкостьУпаковок = 0 И ЕмкостьУпаковок < СписокВложенныхТоваров.Количество() Тогда
					СообщитьКоличествоРасходится(КодАгрегатаИзСтроки);
					Возврат;
				КонецЕсли;
				МассивУпаковок.Добавить(СтруктураОднойУпаковки);
			КонецЕсли;
			
		КонецЕсли;
				
		КодАгрегатаПредыдущий = КодАгрегатаИзСтрокиBase64;
		
	КонецЦикла;
	
	Если УдалятьAID Тогда 
		СкорректироватьКодыSSCC(МассивУпаковок);
	КонецЕсли;
	
	Если Не МассивУпаковок.Количество() = 0 Тогда
		СписокСозданныхАгрегаций = Новый Массив();
		
		///////Запуск фонового задания для создания документов
		ДлительнаяОперация = СоздатьДокументыАгрегацииВФоне(МассивУпаковок, ДанныеШапки, ЕмкостьУпаковок, СписокСозданныхАгрегаций);
		
		ПараметрыОжидания = ОбщегоНазначенияИСМПТККлиентПереопределяемый.ПараметрыОжидания(ЭтотОбъект); 
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.Интервал = 2;
		
		ОбщегоНазначенияИСМПТККлиентПереопределяемый.ОжидатьЗавершение(ДлительнаяОперация, Новый ОписаниеОповещения("ВыполнитьПроцедуруФоновоеВыполнено", ЭтотОбъект), ПараметрыОжидания);
		/////
	Иначе
		НаименованияАгрегации = ПолучитьПредставлениеДокументаАгрегация();
		ТекстОшибки = НСтр("ru = 'Не удалось сформировать ни одной упаковки по данным загруженного файла. Документы ""%НаименованиеДокумента%"" не будут созданы.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НаименованиеДокумента%", НаименованияАгрегации.ПредставлениеСписка()); 
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВидПродукцииПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Организация, "Организация");
	ОрганизацияИдентификационныйНомер = СтруктураДанных.ОрганизацияИдентификационныйНомер;
		
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	ОрганизацияИдентификационныйНомер = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр 	 = "CSV (Comma-Separated Values)(*.csv)|*.csv";
	Диалог.Заголовок = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокВыборФайла();
	Диалог.ИндексФильтра = 0;
	Диалог.ПредварительныйПросмотр 	   = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.МножественныйВыбор = Ложь;
	ОповещениеЗавершения 	  = Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтаФорма);
	Диалог.Показать(ОповещениеЗавершения);

КонецПроцедуры

&НаКлиенте
Процедура СпособРазбораСтрокиПриИзменении(Элемент)
	
	//Установим значение разделителя по-умолчанию при переключении кнопки
	Если СпособРазбораСтроки И РежимРазделителя = 0 Тогда
		РежимРазделителя = 1;
	КонецЕсли;		
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СообщитьКоличествоРасходится(КодАгрегата)
	
	ТекстПредупреждения = НСтр("ru = 'Количество фактически вложенных кодов в составе кода агрегата ""%1"" превышает указанную ёмкость упаковки!'")
						+ Символы.ПС 
						+ НСтр("ru = 'Операция по созданию группы документов прервана.'");
	ТекстПредупреждения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстПредупреждения, КодАгрегата);
	ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстПредупреждения);	
	
КонецПроцедуры

&НаКлиенте
Функция МожноВводитьДокументы(ПрочитанныйФайл)
	
	МожноВводитьДокументы = Истина;
	Если Не ВсеЗначенияЗаполнены() Тогда
		//Не заполнены некоторые реквизиты шапки, необходимые при создании документов
		ТекстПредупреждения = НСтр("ru = 'Заполните общие данные документа!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстПредупреждения);
		МожноВводитьДокументы = Ложь;
	КонецЕсли;
	
	Если Не СпособРазбораСтроки И ДлинаКодаАгрегата = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Укажите длину кода агрегата!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстПредупреждения);
		МожноВводитьДокументы = Ложь;
	КонецЕсли; 
	
	Если СпособРазбораСтроки И РежимРазделителя = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Укажите вид разделителя в файле!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстПредупреждения);
		МожноВводитьДокументы = Ложь;
	КонецЕсли; 
	
	Если СпособРазбораСтроки И РежимРазделителя = 4 
		И Не ЗначениеЗаполнено(ПользовательскийРазделитель) Тогда
		ТекстПредупреждения = НСтр("ru = 'Укажите значение пользовательского разделителя!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстПредупреждения);
		МожноВводитьДокументы = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПутьКФайлуЗагрузки) Тогда
		//Не выбран файл с данными по кодам маркировки
		ТекстПредупреждения = НСтр("ru = 'Не выбран файл для загрузки данных!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстПредупреждения);
		МожноВводитьДокументы = Ложь;
	Иначе
		//Файл выбран, но не соответствует формату содержания:
		//Строка в файле должна быть заполнена по шаблону "КодАгрегата + разделитель (,/;/табуляция) + КодМаркировкиТовара"
		ПрочитанныйФайл = Новый ТекстовыйДокумент;
		ПрочитанныйФайл.Прочитать(ПутьКФайлуЗагрузки);
						
		Если Не ПрочитанныйФайл.КоличествоСтрок() = 0 Тогда
			
			ПроверяемаяСтрока = ПрочитанныйФайл.ПолучитьСтроку(1);
			
			//В зависимости от того, какой режим разбора строки выбран, определяем необходимые данные разбора и 
			//"разрезаем" строку на части
			ФорматНеПодходит = Ложь;
			Если СпособРазбораСтроки Тогда
				//Ищем в строке разделитель
				Если РежимРазделителя = 1 Тогда
					РазделительДляПоиска = ",";
				ИначеЕсли РежимРазделителя = 2 Тогда
					РазделительДляПоиска = ";";
				ИначеЕсли РежимРазделителя = 3 Тогда
					РазделительДляПоиска = Символы.Таб;
				Иначе
					РазделительДляПоиска = ПользовательскийРазделитель;
				КонецЕсли;
				Разделитель = СтрНайти(ПроверяемаяСтрока, РазделительДляПоиска);
				Если Разделитель = 0 Тогда
					ФорматНеПодходит = Истина;	
				КонецЕсли;
			Иначе
				//Разрезаем по количеству символов
				Разделитель = Сред(ПроверяемаяСтрока, ДлинаКодаАгрегата + 1, 1);
				Если Не (Разделитель = "," Или Разделитель = ";" Или Разделитель = Символы.Таб) Тогда
					ФорматНеПодходит = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ФорматНеПодходит Тогда
				ТекстПредупреждения = НСтр("ru = 'Содержание выбранного файла не соответствует поддерживаемому формату загрузки!'") 
									+ Символы.ПС 
									+ НСтр("ru = 'Используйте файл формата "".CSV (с разделителями)"" и укажите корректные настройки разбора строки.'");
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстПредупреждения);
				МожноВводитьДокументы = Ложь;
			КонецЕсли;
				
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Выбранный файл не содержит данных!'");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстПредупреждения);
			МожноВводитьДокументы = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат МожноВводитьДокументы;
	
КонецФункции

&НаКлиенте
Функция ВсеЗначенияЗаполнены() 
	
	Если Не ЗначениеЗаполнено(ВидПродукции) Тогда
		Возврат Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(ВидУпаковки) Тогда 
		Возврат Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(Организация) Тогда 
		Возврат Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(ОрганизацияИдентификационныйНомер) Тогда 
		Возврат Ложь;
	ИначеЕсли  ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") 
		И Не ЗначениеЗаполнено(ИдентификаторПроизводственногоЗаказа) Тогда 
		Возврат Ложь;
	ИначеЕсли  ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") 
		И Не ЗначениеЗаполнено(ИдентификаторПроизводственнойЛинии) Тогда 
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыборФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		
		ПутьКФайлуЗагрузки = ВыбранныеФайлы[0];
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроцедуруФоновоеВыполнено(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОперацияОтменена());
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
	
 		РезультатЗадания = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если РезультатЗадания.Успешно И Не РезультатЗадания.СписокСозданныхАгрегаций.Количество() = 0 Тогда
			
			НаименованияАгрегации = ПолучитьПредставлениеДокументаАгрегация();
			
			ТекстСообщения = НСтр("ru='Создание группы документов ""%НаименованиеДокумента%"" прошло успешно!'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеДокумента%", НаименованияАгрегации.Представление);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
			ТекстЗаголовка = НСтр("ru = 'Сформированные документы ""%НаименованиеДокумента%"".'");
			ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НаименованиеДокумента%", НаименованияАгрегации.ПредставлениеСписка);
	
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Отбор", 	 Новый Структура("Ссылка", Новый ФиксированныйМассив(РезультатЗадания.СписокСозданныхАгрегаций)));
			ПараметрыФормы.Вставить("Заголовок", ТекстЗаголовка);
			
			ОткрытьФорму("Документ.АгрегацияКодовМаркировкиСУЗИСМПТК.Форма.ФормаСписка", ПараметрыФормы,, Истина);
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПредставлениеДокументаАгрегация()
	
	Наименования = Новый Структура();
	Наименования.Вставить("Представление", Метаданные.Документы.АгрегацияКодовМаркировкиСУЗИСМПТК.Представление());
	Наименования.Вставить("ПредставлениеСписка", Метаданные.Документы.АгрегацияКодовМаркировкиСУЗИСМПТК.ПредставлениеСписка);
	
	Возврат Наименования;
	
КонецФункции

&НаСервере
Функция СоздатьДокументыАгрегацииВФоне(МассивУпаковок, ДанныеШапки, ЕмкостьУпаковок, СписокСозданныхАгрегаций) Экспорт
	
	ПараметрыМетода = Новый Структура();
	ПараметрыМетода.Вставить("МассивУпаковок", 			 МассивУпаковок);
	ПараметрыМетода.Вставить("ДанныеШапки", 			 ДанныеШапки);
	ПараметрыМетода.Вставить("ЕмкостьУпаковок",   		 ЕмкостьУпаковок);
	ПараметрыМетода.Вставить("СписокСозданныхАгрегаций", СписокСозданныхАгрегаций);
	
	ТекстЗаголовка = НСтр("ru = 'Создание группы документов ""%НаименованиеДокумента%"".'");
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НаименованиеДокумента%", Метаданные.Документы.АгрегацияКодовМаркировкиСУЗИСМПТК.Представление());
	
	ПараметрыВыполнения = ОбщегоНазначенияИСМПТКПереопределяемый.ПараметрыВыполненияВФоне(УникальныйИдентификатор); 
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = ТекстЗаголовка;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
				
	ВыполняемыйМетод = "ИнтеграцияИСМПТК.СоздатьДокументыАгрегацииВФоне";
	
	Возврат ИнтеграцияИСМПТКПереопределяемый.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыМетода, ПараметрыВыполнения); 
	
КонецФункции

&НаСервере
Процедура УправлениеФормой() 
	
	Если ВидПродукции    = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.АльтернативныйТабак") 
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") 
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") Тогда
		Товар_ТабакФарма = Истина;
		Товар_ОбувьАлкоМолоко  = Ложь;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Алкогольная") 
		Или ВидПродукции   = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная")
		Или ВидПродукции   = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция") Тогда
		Товар_ТабакФарма = Ложь;
		Товар_ОбувьАлкоМолоко  = Истина;
	Иначе
		Товар_ТабакФарма = Ложь;
		Товар_ОбувьАлкоМолоко  = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПравоТабак", "Видимость", Товар_ТабакФарма);
	
	//Если СпособРазбораСтроки = Истина режим - по разделителю. Если Ложь - режим по длине строки 
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДлинаКодаАгрегата", "Видимость", НЕ СпособРазбораСтроки);
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРазделитель", "Видимость", СпособРазбораСтроки);
	
	//Значение пользовательского разделителя
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПользовательскийРазделитель", "Доступность", СпособРазбораСтроки И РежимРазделителя = 4);
	
	//Сообщение о пользовательском разделителе
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияПользовательскийРазделитель", "Видимость", СпособРазбораСтроки И РежимРазделителя = 4);
	//Сообщение о групповом коде агрегата и способе разбора
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияРазделитель", "Видимость", СпособРазбораСтроки И Не РежимРазделителя = 4);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьНачальныеНастройки() 
	
	УдалятьAID = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура  СкорректироватьКодыSSCC(МассивУпаковок)
	
	Для Каждого ЭлементУпаковки Из МассивУпаковок Цикл 
		
		КодАгрегатаИзСтрокиBase64 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(ЭлементУпаковки.КодАгрегата);
		
		Если РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ЭтоКодSSCC(КодАгрегатаИзСтрокиBase64) Тогда
			ЭлементУпаковки.КодАгрегата = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(Прав(КодАгрегатаИзСтрокиBase64, 18));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыОрганизацииКонтрагента(Ссылка, Реквизит) Экспорт
	
	Возврат ИнтеграцияИСМПТКПереопределяемый.ПолучитьРеквизитыОрганизацииКонтрагента(Ссылка, Реквизит);
	
КонецФункции

&НаКлиенте
Процедура РежимРазделителяПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокВыбораВидаПродукции()
	
	МассивВидовПродукции = РаботаСДокументамиИСМПТК.СформироватьСписокВыбораВидаПродукции();
	Элементы.ВидПродукции.СписокВыбора.ЗагрузитьЗначения(МассивВидовПродукции);

	Если МассивВидовПродукции.Количество() = 1 Тогда
		ВидПродукции = МассивВидовПродукции[0];
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти