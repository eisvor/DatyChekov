
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Организация") Тогда
		Организация = Параметры.Организация;
	КонецЕсли;
	
	УстановитьНачальныеНастройки();
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПутьКФайлуЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр 	 = "Все поддерживаемые форматы файлов(*.xls;*.xlsx;*.csv;)|*.xls;*.xlsx;*.csv;|CSV (Comma-Separated Values)(*.csv)|*.csv|Книга Excel 97 (*.xls)|*.xls|Книга Excel 2007 (*.xlsx)|*.xlsx";
	Диалог.Заголовок = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокВыборФайла();
	Диалог.ИндексФильтра = 0;
	Диалог.ПредварительныйПросмотр 	   = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.МножественныйВыбор = Истина;
	ОповещениеЗавершения 	  = Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтаФорма);
	Диалог.Показать(ОповещениеЗавершения);

КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		
		ДанныеФайлов.Очистить();
		СписокФайлов.Очистить();
		ОбщееКоличество = 0;
		
		Если ВыбранныеФайлы.Количество() = 1 Тогда
			ВыбранныеФайлыПредставление = ВыбранныеФайлы[0];
		Иначе
			ВыбранныеФайлыПредставление = НСтр("ru = 'Выбрано файлов: %Количество%.'");
			ВыбранныеФайлыПредставление = СтрЗаменить(ВыбранныеФайлыПредставление, "%Количество%", ВыбранныеФайлы.Количество());
		КонецЕсли;
		
		Для Каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
			//Заполняем информацию о файлах в подробностях 
			НоваяСтрокаИнфо = СписокФайлов.Добавить();
			НоваяСтрокаИнфо.Файл = ВыбранныйФайл;
		КонецЦикла;
		
		ПутьКФайлуЗагрузки = ВыбранныеФайлыПредставление;
		
	КонецЕсли;
		
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуЗагрузкиОчистка(Элемент, СтандартнаяОбработка)
	
	ДанныеФайлов.Очистить();
	СписокФайлов.Очистить();
	ДанныеИзмененыПользователем = Ложь;
	УстановитьНачальныеНастройки();
	УправлениеФормой();
	ОбщееКоличество = 0;
	ОчиститьСообщения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайлы(Команда)
	
	ОчиститьСообщения();

	Если СписокФайлов.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Файлы не выбраны!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;

	ОшибкаЗагрузки  = Ложь;
	ДанныеФайлов.Очистить();
		
	Для Каждого ВыбранныйФайл Из СписокФайлов Цикл
		Если СтрНайти(ВыбранныйФайл.Файл, ".csv") = 0 Тогда
			ПрочитатьФайлыExcel(ОшибкаЗагрузки, ВыбранныйФайл.Файл);
		Иначе
			ПрочитатьФайлыCSV(ОшибкаЗагрузки, ВыбранныйФайл.Файл);
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьПризнакИспользованияХарактеристик();
	УстановитьУсловноеОформлениеХарактеристикНоменклатуры();
		
	ОбщееКоличество = ДанныеФайлов.Количество();
		
	Если ОшибкаЗагрузки Тогда
		ТекстОшибки = НСтр("ru = 'Некоторые коды маркировки не удалось разобрать! Они были исключены из объединения.'");
		ОчиститьСообщения();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Если Не ДанныеФайлов.НайтиСтроки(Новый Структура("ВидУпаковки", ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая"))).Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Внимание! Для печати транспортных кодов SSCC будет использован предопределенный шаблон этикетки!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Распечатать(Команда)

	//Выполняем проверки обязательных данных
	ОтказПечати = Ложь;
	ВыполнитьПроверкиПередПечатью(ОтказПечати);
	Если ОтказПечати Тогда 
		//Прерываем процесс, т.к. найдены критичные ошибки
		Возврат;
	КонецЕсли;
	
	//Начинаем процесс печати
	ДанныеПечати = ПодготовитьДанныеДляПечати();
	Если Не ДанныеПечати.ОбъектыПечати.Количество() = 0 Тогда
		//Поддерживается печать однотипных штрихкодов - либо DataMatrix, либо SSCC. Определеяем по первому значению
		Если ДанныеПечати.ОбъектыПечати[0].ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.SSCC") Тогда
			ПечатьКодовМаркировкиИСМПТККлиент.НапечататьSSCC(ДанныеПечати, ЭтотОбъект);
		Иначе
			ПечатьКодовМаркировкиИСМПТККлиент.НапечататьЭтикеткиИСМП(ДанныеПечати, ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанные(Команда)
	
	ТекстВопроса = НСтр("ru = 'Все данные формы будут очищены. Продолжить?'");
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение   = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчиститьДанные", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчиститьДанные(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		СписокФайлов.Очистить();
		ДанныеФайлов.Очистить();
		ОчиститьСообщения();
		ПутьКФайлуЗагрузки = "";
		ОбщееКоличество = 0;
		Организация = Неопределено;
		ШаблонЭтикеткиПечати = Неопределено;
		УстановитьНачальныеНастройки();
		УправлениеФормой();
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДанныеФайловПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеФайловНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеФайлов.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ВидПродукции = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(ТекущиеДанные.Номенклатура);
		Шаблон = ПолучитьШаблонКМ(ВидПродукции);
		
		ТекущиеДанные.Шаблон = Шаблон;
		ТекущиеДанные.ВидПродукции = ВидПродукции;
		
		ЗаполнитьПризнакИспользованияХарактеристик();
		УстановитьУсловноеОформлениеХарактеристикНоменклатуры();
		
		ДанныеИзмененыПользователем = Истина;
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеФайловХарактеристикаПриИзменении(Элемент)
	
	ДанныеИзмененыПользователем = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонЭтикеткиПечатиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("Справочник.ХранилищеШаблоновИСМПТК.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеФормой() 

	Если ДанныеИзмененыПользователем Тогда
		ЗаголовокПредупреждения = НСтр("ru = 'Внимание! Данные таблицы были изменены вручную!'");
	Иначе
		ЗаголовокПредупреждения = "";
	КонецЕсли;
	
	ХарактеристикиИспользуются = ИнтеграцияИСМПТКПереопределяемый.ПроверитьИспользованиеХарактеристик();
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДанныеФайловХарактеристика", 
																	   "Видимость", ХарактеристикиИспользуются);
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияПредупреждениеТаблицаИзменилась", 
																	   "Заголовок", ЗаголовокПредупреждения);
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Распечатать", 
																	   "Доступность", ПравоДоступа("Просмотр", Метаданные.Обработки.ПечатьКодовМаркировкиИСМПТК));
	                                           
КонецПроцедуры

&НаСервере
Процедура УстановитьНачальныеНастройки() 
		
	ДанныеИзмененыПользователем = Ложь;
	РазмещениеЭтикетокНаЛисте = "Замостить";
	СпособВводаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗИСМПТК.Производство");
		
КонецПроцедуры

&НаКлиенте
Процедура ДанныеФайловПослеУдаления(Элемент)
	
	ДанныеИзмененыПользователем = Истина;
	ОбщееКоличество = ДанныеФайлов.Количество();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайлыCSV(ОшибкаЗагрузки, ВыбранныйФайл)
	
	ПрочитанныйФайл = Новый ТекстовыйДокумент;
	ПрочитанныйФайл.Прочитать(ВыбранныйФайл);
	
	КоличествоСтрокВФайле = ПрочитанныйФайл.КоличествоСтрок();
	Если КоличествоСтрокВФайле = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбнаруженыSSCC 		   = Ложь;
	ОбнаруженыDataMatrix   = Ложь;
	ОбнаруженыНеполныеSSCC = Ложь;
	
	НужноДобавлятьИдентификаторКодамSSCCПриПечатиИСМПТК = ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("ДобавлятьИдентификаторКодамSSCCПриПечатиИСМПТК");
	
	Для НомерСтроки = 1 По КоличествоСтрокВФайле Цикл
		
		СтрокаФайла = ПрочитанныйФайл.ПолучитьСтроку(НомерСтроки); //Полный КМ без кодировки
		//Проверка транспортных кодов
		
		ДлинаСтроки = СтрДлина(СтрокаФайла);
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(СтрокаФайла);
		
		ДанныеСтроки = Новый Структура();
		Данныестроки.Вставить("Штрихкод", СтрокаФайла);
		Данныестроки.Вставить("Base64",	  Истина);
		
		Если ОбщегоНазначенияИСМПТКВызовСервера.ЭтоКодSSCC(ДанныеСтроки) Тогда
			Если ДлинаСтроки = 18 Тогда
				ОбнаруженыНеполныеSSCC = Истина;
				ИсходныйШК  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(СтрокаФайла);
				СтрокаФайла = ?(НужноДобавлятьИдентификаторКодамSSCCПриПечатиИСМПТК, "00" + ИсходныйШК, ИсходныйШК);
				РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(СтрокаФайла);
			КонецЕсли;
		Иначе
			
			ДанныеМаркировки = РозничноеВыбытиеИСМПТКВызовСервера.РазобратьШтриховойКодТовара(СтрокаФайла, Истина);
			ЭтоКодМарки	 	 = ЭтоКодМаркировки(ДанныеМаркировки.ТипИдентификатораТовара);
			
			Если Не ЭтоКодМарки Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось определить формат штрихкода в строке № %1! Данная строка исключена из данных печати.'");
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, НомерСтроки); 
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьПоДаннымСтрокиФайла(СтрокаФайла, ОбнаруженыSSCC, ОбнаруженыDataMatrix);
		
	КонецЦикла;
	
	ВывестиСообщенияПослеЧтенияФайлов(ОбнаруженыSSCC, ОбнаруженыDataMatrix, ОбнаруженыНеполныеSSCC);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлыExcel(ОшибкаЗагрузки, ВыбранныйФайл)
	
	ПрочитанныйФайл = Новый ТабличныйДокумент;
	ПрочитанныйФайл.Прочитать(ВыбранныйФайл);
	
	КоличествоСтрокВФайле = ПрочитанныйФайл.ВысотаТаблицы;
	Если КоличествоСтрокВФайле = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбнаруженыSSCC = Ложь;
	ОбнаруженыDataMatrix = Ложь;
	ОбнаруженыНеполныеSSCC = Ложь;
	
	Для НомерСтроки = 1 По КоличествоСтрокВФайле Цикл
		
		СтрокаФайла = ПрочитанныйФайл.ПолучитьОбласть("R" + Формат(НомерСтроки, "ЧГ=0") + "C1").ТекущаяОбласть.Текст; //Полный КМ без кодировки
		//Проверка транспортных кодов
		Если ОбщегоНазначенияИСМПТКВызовСервера.ЭтоКодSSCC(СтрокаФайла) Тогда
			Если СтрДлина(СтрокаФайла) = 18 Тогда
				ОбнаруженыНеполныеSSCC = Истина;
				ПолныйКодМаркировкиBase64 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.СтрокуВBase64(
											?(ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("ДобавлятьИдентификаторКодамSSCCПриПечатиИСМПТК"), 	
											"00" + СтрокаФайла, СтрокаФайла));
			Иначе
				ПолныйКодМаркировкиBase64 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.СтрокуВBase64(СтрокаФайла);
			КонецЕсли;
		Иначе
			ПолныйКодМаркировкиBase64 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.СтрокуВBase64(СтрокаФайла);
		КонецЕсли;
		ЗаполнитьПоДаннымСтрокиФайла(ПолныйКодМаркировкиBase64, ОбнаруженыSSCC, ОбнаруженыDataMatrix);
		
	КонецЦикла;
	
	ВывестиСообщенияПослеЧтенияФайлов(ОбнаруженыSSCC, ОбнаруженыDataMatrix, ОбнаруженыНеполныеSSCC);
			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДаннымСтрокиФайла(ПолныйКодМаркировкиBase64, ОбнаруженыSSCC, ОбнаруженыDataMatrix)
	
	ИсходныеДанные = Новый Структура("Количество, Штрихкод", 1, ПолныйКодМаркировкиBase64);
	ИсходныеДанные.Вставить("ФорматBase64", Истина);
	СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(ИсходныеДанные);
	
	Если СтруктураКодовМаркировки = Неопределено 
		Или ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда //Если не удалось разобрать КМ, возвращается текст ошибки.
		ОшибкаЗагрузки = Истина;
		Возврат;
	КонецЕсли;
	
 	Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") 
		И Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверкаФорматаТранспортногоКодаПройденаУспешно(ИсходныеДанные, ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК")) Тогда
		Возврат;
	КонецЕсли;
		
	//Начинаем заполнять таблицу данных предпросмотра
	НоваяСтрока = ДанныеФайлов.Добавить();
	НоваяСтрока.КодМаркировки = ПолныйКодМаркировкиBase64; //ПолныйКодМаркировки в ПулеКМ
	
	Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
		НоваяСтрока.GTIN = СтруктураКодовМаркировки.GTINВерхнегоУровня;
		НоваяСтрока.EAN  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(СтруктураКодовМаркировки.GTINВерхнегоУровня);
	Иначе
		НоваяСтрока.GTIN = СтруктураКодовМаркировки.GTIN;
		НоваяСтрока.EAN  = СтруктураКодовМаркировки.EAN;
	КонецЕсли;
	
	НоваяСтрока.КодИдентификации = СтруктураКодовМаркировки.КодИдентификации;  //Поле КодМаркировки в ПулеКМ, нормализованный код маркировки из разбора КМ
	НоваяСтрока.ВидУпаковки  = СтруктураКодовМаркировки.ВидУпаковки; 
	НоваяСтрока.ВидПродукции = СтруктураКодовМаркировки.ВидПродукции;
	
	//Заполняем шаблон
	Шаблон = ПолучитьШаблонКМ(СтруктураКодовМаркировки.ВидПродукции);			
	НоваяСтрока.Шаблон = Шаблон;
		
	ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(НоваяСтрока.EAN);
	Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
		Номенклатура   = ДанныеНоменклатуры.Номенклатура;
		Характеристика = ДанныеНоменклатуры.Характеристика;
	Иначе
		Номенклатура   = ДанныеНоменклатуры;
		Характеристика = Неопределено;
	КонецЕсли;
	
	НоваяСтрока.Номенклатура   = Номенклатура;
	НоваяСтрока.Характеристика = Характеристика;
	
	Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
		ОбнаруженыSSCC = Истина;
	Иначе
		ОбнаруженыDataMatrix = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНоменклатуруПоШтрихкоду(EAN, СообщенияОбОшибках = Неопределено)
	
	Если СообщенияОбОшибках = Неопределено Тогда
		//Не во всех местах вызова функции нужно выводить пользователю сообщения, поэтому заменяеям на коллекцию-пустышку
		СообщенияОбОшибках = Новый Соответствие();
	КонецЕсли;
	
	Номенклатура = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьПустуюСсылкуНоменклатура();
	
	НайденныеСтроки = ДанныеФайлов.НайтиСтроки(Новый Структура("EAN", EAN));
	Если Не НайденныеСтроки.Количество() = 0 Тогда 
		Номенклатура   = НайденныеСтроки[0].Номенклатура;
		Характеристика = НайденныеСтроки[0].Характеристика;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда 
		СтруктураДанныхНоменклатуры = Новый Структура();
		СтруктураДанныхНоменклатуры.Вставить("Номенклатура",   Номенклатура);
		СтруктураДанныхНоменклатуры.Вставить("Характеристика", Характеристика);
		Возврат СтруктураДанныхНоменклатуры;
	Иначе
		Возврат ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, EAN,, СообщенияОбОшибках);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьШаблонКМ(ВидПродукции)
	
	Возврат ИнтеграцияИСМПТКПереопределяемый.ПолучитьШаблонКодаПоВидуПродукции(ВидПродукции);
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПроверкиПередПечатью(ОтказПечати)
	
	ОбнаруженыSSCC = Не (ДанныеФайлов.НайтиСтроки(Новый Структура("ВидУпаковки", ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая"))).Количество() = 0);
	ОбнаруженыDataMatrix = Не (ДанныеФайлов.НайтиСтроки(Новый Структура("ВидУпаковки", ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая"))).Количество() = 0
								И ДанныеФайлов.НайтиСтроки(Новый Структура("ВидУпаковки", ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская"))).Количество() = 0);

	Если ДанныеФайлов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет кодов маркировки для печати!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	    ОтказПечати = Истина;
	КонецЕсли;
	
	Если ОбнаруженыSSCC И ОбнаруженыDataMatrix Тогда
		ТекстСообщения = НСтр("ru = 'Таблица данных для печати содержит смешанную информацию по кодам DataMatrix и SSCC, такая печать не поддерживается!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ОтказПечати = Истина;	    
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияУкажитеОрганизацию();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	    //Выводим информативно, т.к. не для всех шаблонов печати организация является нужной. 
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ШаблонЭтикеткиПечати)
		И Не ОбнаруженыSSCC Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран шаблон печати этикетки!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	    ОтказПечати = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СпособВводаВОборот)
		И Не ОбнаруженыSSCC Тогда
		ТекстСообщения = НСтр("ru = 'Не указан способ ввода кода в оборот!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	    ОтказПечати = Истина;
	КонецЕсли;
	
	Если ОтказПечати Тогда
		ТекстСообщения = НСтр("ru = 'Печать прервана: были обнаружены ошибки в заполненных данных!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакИспользованияХарактеристик(НомерСтроки = Неопределено)
	
	СобытияФормИСМПТКПереопределяемый.ЗаполнитьПризнакИспользованияХарактеристикВРабочемМесте(ДанныеФайлов);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеХарактеристикНоменклатуры() Экспорт
	
	ДанныеНоменклатура = Новый Структура();
	ДанныеНоменклатура.Вставить("Использовать", Истина);
	ДанныеНоменклатура.Вставить("ИмяПоля", 	 	"ДанныеФайловНоменклатура");
	ДанныеНоменклатура.Вставить("ПутьКПолю", 	"ДанныеФайлов.Номенклатура");
	
	ДанныеХарактеристика = Новый Структура();
	ДанныеХарактеристика.Вставить("Использовать", Ложь);
	ДанныеХарактеристика.Вставить("ИмяПоля",   	  "ДанныеФайловХарактеристика");
	ДанныеХарактеристика.Вставить("ПутьКПолю", 	  "ДанныеФайлов.ХарактеристикиИспользуются");
	
	СобытияФормИСМПТКПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатурыВРабочемМесте(ЭтаФорма, ДанныеНоменклатура, ДанныеХарактеристика);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСообщенияПослеЧтенияФайлов(ОбнаруженыSSCC, ОбнаруженыDataMatrix, ОбнаруженыНеполныеSSCC)
	
	Если ОбнаруженыSSCC И ОбнаруженыDataMatrix Тогда
		ТекстСообщения = НСтр("ru = 'Внимание! В загруженных файлах обнаружены смешанные данные штрихкодов (DataMatrix и SSCC)! Такая печать не поддерживается, необходимо скорректировать таблицу предварительного просмотра данных печати и оставить только один формат штрихкодов.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;		
	
	Если ОбнаруженыНеполныеSSCC Тогда
		ТекстСообщения = НСтр("ru = 'Внимание! В загруженных файлах обнаружены 18-значные транспортные коды SSCC!'"); 
		Если Константы.ДобавлятьИдентификаторКодамSSCCПриПечатиИСМПТК.Получить() Тогда
			ТекстСообщения = ТекстСообщения + " " + НСтр("ru = 'При печати эти коды будут преобразованы путем добавления идентификатора (00).'");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Иначе
			ТекстСообщения = ТекстСообщения + " " + НСтр("ru = 'При печати эти коды сгенерированы не будут!'");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоКодМаркировки(ТипИдентификатораТовара) Экспорт
	
	ТипыШтрихкодовМарок = Новый СписокЗначений;
	ТипыШтрихкодовМарок.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовШКТовараИСМПТК.КодТовараВФорматеDataMatrixGS1"));
	
	Возврат НЕ ТипыШтрихкодовМарок.НайтиПоЗначению(ТипИдентификатораТовара) = Неопределено;
	
КонецФункции

#КонецОбласти

#Область ЗапросСоставаУпаковок

&НаКлиенте
Процедура ЗаполнитьДанныеПоКоличествуГрупповыхУпаковок(Команда)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияУкажитеОрганизацию();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если ДанныеФайлов.Количество() = 0
		Или (ДанныеФайлов.НайтиСтроки(Новый Структура("ВидУпаковки", ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая"))).Количество() = 0
			 И ДанныеФайлов.НайтиСтроки(Новый Структура("ВидУпаковки", ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая"))).Количество() = 0) Тогда
		ТекстОшибки = НСтр("ru = 'В таблице предварительного просмотра не обнаружено подходящих данных для запроса состава упаковок!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Возврат;
   	КонецЕсли;
			 
	ЗавершениеПолучитьДанныеПоГрупповымКодамМаркировки = Новый ОписаниеОповещения("ЗавершениеПолучитьДанныеПоГрупповымКодамМаркировки", ЭтаФорма);
	ПолучитьКлючАвторизации(ЗавершениеПолучитьДанныеПоГрупповымКодамМаркировки);
		
КонецПроцедуры

&НаСервере
Процедура ЗавершениеПолучитьДанныеПоГрупповымКодамМаркировки(РезультатВыполнения, Параметры) Экспорт
	
	СоответствиеГрупповыхКМ = Новый Соответствие;
	МассивГрупповыхКМ		= Новый Массив;
	
	СтруктураОтбора   = Новый Структура("ВидУпаковки", Перечисления.ВидыУпаковокИСМПТК.Групповая);
	СтрокиГрупповыхКМ = ДанныеФайлов.НайтиСтроки(СтруктураОтбора);
		
	Для Каждого ГрупповаяКМ Из СтрокиГрупповыхКМ Цикл 
		СоответствиеГрупповыхКМ.Вставить(Новый Структура("КИ, ВипУпаковки", ГрупповаяКМ.КодИдентификации, ГрупповаяКМ.ВидУпаковки), ГрупповаяКМ.ПолучитьИдентификатор());
		МассивГрупповыхКМ.Добавить(ГрупповаяКМ.КодИдентификации);
	КонецЦикла;
		
	СтруктураОтбора = Новый Структура("ВидУпаковки", Перечисления.ВидыУпаковокИСМПТК.Логистическая);
	МассивЛогистическихКМ = ДанныеФайлов.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого ЛогистическаяКМ Из МассивЛогистическихКМ Цикл 
		Если Константы.ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК.Получить() Тогда
			//В этом случае придется проверять каждый транспортный код в нескольких форматах (с/без идентификатора 00)
			//Подготавливаем данные для проверки кода в разных форматах
			ИсходныйФормат = ЛогистическаяКМ.КодИдентификации;
			Если СтрДлина(ИсходныйФормат) = 20 Тогда
				ПреобразованныйКод = Сред(ИсходныйФормат, 3); //18-значный SSCC
				ДополнительныйКод  = Неопределено;
			ИначеЕсли СтрДлина(ИсходныйФормат) = 18 Тогда
				ПреобразованныйКод = "00"   + ИсходныйФормат;
				ДополнительныйКод  = "(00)" + ИсходныйФормат;
			Иначе
				ПреобразованныйКод = Неопределено;
				ДополнительныйКод  = Неопределено;
			КонецЕсли;
			
			МассивГрупповыхКМДляПроверки = Новый Массив();
			МассивГрупповыхКМДляПроверки.Добавить(ИсходныйФормат);
			Если НЕ ПреобразованныйКод = Неопределено Тогда
				МассивГрупповыхКМДляПроверки.Добавить(ПреобразованныйКод);
			КонецЕсли;
			Если НЕ ДополнительныйКод = Неопределено Тогда
				МассивГрупповыхКМДляПроверки.Добавить(ДополнительныйКод);
			КонецЕсли;
			
			//Начинаем опрос сервера по каждому из сформированных кодов для проверки наличия на сервере информации по составу
			Для Каждого КодSSCC Из МассивГрупповыхКМДляПроверки Цикл
				СтруктураЗапрос = Новый Структура("Штрихкод, ВидУпаковки, ВидПродукции, ФорматBase64", 
										КодSSCC, Перечисления.ВидыУпаковокИСМПТК.Логистическая, Перечисления.ВидыПродукцииИСМПТК.Обувная, Ложь); //общие параметры у кодов одинаковые
										
				ТокенАвторизации = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
				ДанныеПоГрупповомуКоду = ИнтеграцияИСМПТКВызовСервера.ЗапроситьДанныеПоКодуАгрегации(СтруктураЗапрос, Организация, ТокенАвторизации, Ложь);	
				
				Если Не ЗначениеЗаполнено(ДанныеПоГрупповомуКоду.ТекстОшибки) Тогда
					
					Если Не КодSSCC = ИсходныйФормат 
						И Не Константы.ДобавлятьИдентификаторКодамSSCCПриПечатиИСМПТК.Получить() Тогда //Если эта опция включена, то коды были преобразованы в момент чтения файла - их нужно сохранять независимо от сервера
						//Нужно заменить исходное значение кода на тот, который вернул сервер, т.е. на зарегистрированное значение кода
					    СтрокаВДокументе = ДанныеФайлов.НайтиСтроки(Новый Структура("КодИдентификации", ИсходныйФормат));
						СтрокаВДокументе[0].КодИдентификации = КодSSCC;
						СтрокаВДокументе[0].КодМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(КодSSCC);
						СтрокаВДокументе[0].EAN = КодSSCC;
						СоответствиеГрупповыхКМ.Вставить(Новый Структура("КИ, ВипУпаковки", КодSSCC, ЛогистическаяКМ.ВидУпаковки), ЛогистическаяКМ.ПолучитьИдентификатор());
						МассивГрупповыхКМ.Добавить(КодSSCC);
					Иначе
						СоответствиеГрупповыхКМ.Вставить(Новый Структура("КИ, ВипУпаковки", ИсходныйФормат, ЛогистическаяКМ.ВидУпаковки), ЛогистическаяКМ.ПолучитьИдентификатор());
						МассивГрупповыхКМ.Добавить(ИсходныйФормат);
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СоответствиеГрупповыхКМ.Вставить(Новый Структура("КИ, ВипУпаковки", ЛогистическаяКМ.КодИдентификации, ЛогистическаяКМ.ВидУпаковки), ЛогистическаяКМ.ПолучитьИдентификатор());
			МассивГрупповыхКМ.Добавить(ЛогистическаяКМ.КодИдентификации);
		КонецЕсли;		
	КонецЦикла;
			
	ТокенАвторизации = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
	СтруктураКодов   = Новый Структура("МассивКодов", МассивГрупповыхКМ);
	ДанныеПоГрупповомуКоду = ИнтеграцияИСМПТК.ЗапроситьДанныеОбАгрегацииСпискаКМ(СтруктураКодов, Организация, ТокенАвторизации);
	
	Если ЗначениеЗаполнено(ДанныеПоГрупповомуКоду.ТекстОшибки) Тогда
		
		ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаЗапросаСоставаУпаковкиПоДаннымСервера();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
				
	Иначе
		
		Для Каждого ОбновляемыйГрупповойКод Из СоответствиеГрупповыхКМ Цикл   
			
			СтруктураКода = ИнтеграцияИСМПТКВызовСервера.ПолучитьИнформациюПоГрупповомуКоду(ДанныеПоГрупповомуКоду, ОбновляемыйГрупповойКод.Ключ.КИ, ОбновляемыйГрупповойКод.Ключ.ВипУпаковки);
			
			GTIN 			   = СтруктураКода.GTIN;
			GTINВерхнегоУровня = СтруктураКода.GTINВерхнегоУровня;
			EAN                = СтруктураКода.EAN;
			EANВерхнегоУровня  = СтруктураКода.EANВерхнегоУровня;
			Номенклатура       = СтруктураКода.Номенклатура;
			Характеристика 	   = СтруктураКода.Характеристика;
			ВидПродукции 	   = СтруктураКода.ВидПродукции;
			Количество		   = СтруктураКода.Количество;
			ЭтоГрупповаяУпаковка = СтруктураКода.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая");
			
			Если ЗначениеЗаполнено(GTIN) Тогда
				
				СтрокаКМ = ДанныеФайлов.НайтиПоИдентификатору(ОбновляемыйГрупповойКод.Значение);
				Если Не ЗначениеЗаполнено(СтрокаКМ.GTIN) Тогда
					СтрокаКМ.GTIN = GTIN;
					СтрокаКМ.EAN  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(СтрокаКМ.GTIN);
				КонецЕсли;
				СтрокаКМ.Номенклатура   = Номенклатура;
				СтрокаКМ.Характеристика = Характеристика;
				СтрокаКМ.ВидПродукции   = ВидПродукции;
				СтрокаКМ.Шаблон 		= ПолучитьШаблонКМ(ВидПродукции);
				
			Иначе
				
				ТекстОшибки = НСтр("ru = 'Для кода %1 не удалось получить данные с сервера. Возможно, у организации нет доступа к просмотру содержимого этой агрегации на стороне ИС МПТ или упаковка уже расформирована.'");
				ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, ОбновляемыйГрупповойКод.Ключ.КИ);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
				
			КонецЕсли;
			
		КонецЦикла;
	 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКлючАвторизации(СобытиеПослеАвторизации) Экспорт
	
	ИнтерфейсИСМПТККлиент.ПолучитьКлючАвторизацииОбщая(СобытиеПослеАвторизации, Организация);
		
КонецПроцедуры

#КонецОбласти

#Область ПечатьКМ

&НаКлиенте 
Функция ПодготовитьДанныеДляПечати()
	
	ДанныеДляПечати = ДанныеДляПечатиСвободныеКоды();
	ДанныеДляПечати.Вставить("ЕстьПечатьЭтикетокИЦенников", ПроверитьНаличиеМенеджераПечати());
	
	Возврат ДанныеДляПечати;
	
КонецФункции

&НаСервере
Функция ПроверитьНаличиеМенеджераПечати()
	
	Возврат ?(Метаданные.НайтиПоПолномуИмени("Обработка.ПечатьКодовМаркировкиИСМПТК") <> Неопределено, Истина, Ложь);
	
КонецФункции
	
&НаКлиенте 
Функция ДанныеДляПечатиСвободныеКоды()
	
	ОбъектыПечати = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ДанныеФайлов Цикл
		
		Если ОбщегоНазначенияИСМПТКВызовСервера.ЭтоКодSSCC(СтрокаТаблицы.КодИдентификации) Тогда
			ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.SSCC");
			ДанныеКода   = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПараметрыШтрихкода(СтрокаТаблицы.КодИдентификации);
			
			Если Не ДанныеКода.ТипШтрихкода = ТипШтрихкода Тогда 
				Продолжить;
			КонецЕсли;
			
			ПараметрыШтрихкода = ПечатьКодовМаркировкиИСМПТККлиентСервер.СтруктураПечатиЭтикеткиSSCC();
			ПараметрыШтрихкода.ЦифраРасширения 	  = ?(Не ДанныеКода.Результат = Неопределено, ДанныеКода.Результат.ЦифраРасширения, "");
			ПараметрыШтрихкода.ПрефиксКомпанииGS1 = ?(Не ДанныеКода.Результат = Неопределено, ДанныеКода.Результат.ПрефиксКомпанииGS1, "");
			ПараметрыШтрихкода.СерийныйНомерSSCC  = ?(Не ДанныеКода.Результат = Неопределено, ДанныеКода.Результат.СерийныйНомерSSCC, "");
			ПараметрыШтрихкода.Штрихкод = СтрокаТаблицы.КодИдентификации; 
			
			ПараметрыШтрихкода.ШаблонЭтикетки = ПечатьКодовМаркировкиИСМПТККлиентСервер.ПолучитьШаблонЭтикеткиSSCC();
		Иначе
			
			Если ПечатьКодовМаркировкиИСМПТКВызовСервера.ПроверитьПризнакGS1УШаблона(ШаблонЭтикеткиПечати) Тогда 
				ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.DataMatrix");
			Иначе
				ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.GS1_DataMatrix");
			КонецЕсли;
			
			ПараметрыШтрихкода = ПечатьКодовМаркировкиИСМПТККлиентСервер.СтруктураПечатиЭтикетки();
			
			ПараметрыШтрихкода.ВидПродукции       = СтрокаТаблицы.ВидПродукции;
			ПараметрыШтрихкода.Номенклатура       = СтрокаТаблицы.Номенклатура;
			ПараметрыШтрихкода.Характеристика     = СтрокаТаблицы.Характеристика;
			ПараметрыШтрихкода.СпособВводаВОборот = СпособВводаВОборот;
			ПараметрыШтрихкода.Шаблон             = СтрокаТаблицы.Шаблон;
			ПараметрыШтрихкода.GTIN               = СтрокаТаблицы.GTIN;
			ПараметрыШтрихкода.КодИдентификации   = СтрокаТаблицы.КодИдентификации;
			ПараметрыШтрихкода.ХешСуммаКодаИдентификации = ПолучитьХэшСуммуКМ(СтрокаТаблицы.КодИдентификации);
			ПараметрыШтрихкода.ШаблонЭтикетки = ШаблонЭтикеткиПечати;
			ПараметрыШтрихкода.Штрихкод 	  = СтрокаТаблицы.КодМаркировки; 
			ПараметрыШтрихкода.Вставить("КодМаркировки", СтрокаТаблицы.КодМаркировки);
		КонецЕсли;
		
		ПараметрыШтрихкода.Организация    = Организация;
		ПараметрыШтрихкода.Количество     = 1;
		ПараметрыШтрихкода.ТипШтрихкода   = ТипШтрихкода;
		
		ОбъектыПечати.Добавить(ПараметрыШтрихкода);
	
	КонецЦикла;
	
	ИтоговаяСтруктура = Новый Структура;
	ИтоговаяСтруктура.Вставить("ОбъектыПечати",              ОбъектыПечати);
	ИтоговаяСтруктура.Вставить("Документ",                   "ПечатьИзФайла");
	ИтоговаяСтруктура.Вставить("РежимПечати",                "РезервироватьСвободныеКоды");
	ИтоговаяСтруктура.Вставить("КаждаяЭтикеткаНаНовомЛисте", КаждаяЭтикеткаНаНовомЛисте());
	
	Возврат ИтоговаяСтруктура;
	
КонецФункции

&НаКлиенте 
Функция КаждаяЭтикеткаНаНовомЛисте()
	
	Возврат РазмещениеЭтикетокНаЛисте = "Отдельно";
	
КонецФункции

&НаСервере
Функция ПолучитьХэшСуммуКМ(КодМаркировки)
	
	Возврат ОбщегоНазначенияИСМПТК.ХэшСуммаСтроки(КодМаркировки);
	
КонецФункции

&НаКлиенте
Функция СтрокуВBase64(ДанныеСтрока) Экспорт
	
	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки(ДанныеСтрока);
	
	Если ДвоичныеДанные = Неопределено Тогда
		Штрихкод = ДанныеСтрока;
	Иначе
		Штрихкод = ПолучитьBase64СтрокуИзДвоичныхДанных(ДвоичныеДанные);
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

#КонецОбласти

#Область СтраницаПечатьНанесений

&НаКлиенте
Процедура ДобавитьДокумент(Команда)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияУкажитеОрганизацию();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеДокументов.Количество() = 0 Тогда
		ТекстВопроса = НСтр("ru = 'Выполнить предварительную очистку таблицы?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение   = Новый ОписаниеОповещения("ДобавитьДокументВопросОчиститьДанные", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		ДобавитьДокументПродолжитьПослеВопроса();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДокументВопросОчиститьДанные(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ДанныеДокументов.Очистить();
	КонецЕсли;
	ДобавитьДокументПродолжитьПослеВопроса();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДокументПродолжитьПослеВопроса()
		
	ПараметрыВыбора = Новый Структура();
	Отбор = Новый Структура();
	Отбор.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОтчетовСУЗИСМПТК.Отправлен"));
	Отбор.Вставить("Организация", Организация);
	ПараметрыВыбора.Вставить("Отбор", Отбор);
	ПараметрыВыбора.Вставить("МножественныйВыбор", Истина);
	
	Оповещение = Новый ОписаниеОповещения("ВыборДокументовЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.НанесениеКодовМаркировкиСУЗИСМПТК.ФормаВыбора", ПараметрыВыбора,,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДокументовЗавершение(ВыбранныйДокумент, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранныйДокумент) Тогда
		
		Для Каждого НанесениеКМ Из ВыбранныйДокумент Цикл
			ЗаполнитьПоДаннымВыбранногоДокумента(НанесениеКМ);
		КонецЦикла;
		
		ОбщееКоличествоПоДокументам = ДанныеДокументов.Количество();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура  ЗаполнитьПоДаннымВыбранногоДокумента(НанесениеКМ)
	
	//Проверка наличия этого КМ в таблице
	Если Не ДанныеДокументов.НайтиСтроки(Новый Структура("НанесениеКМ", НанесениеКМ)).Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаказОснование = НанесениеКМ.ДокументОснование;
	ТаблицаДанныхРегистра = ПолучитьСведенияИзПула(ЗаказОснование);
	Если ТаблицаДанныхРегистра.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'По документу %1 в Пуле кодов не обнаружено готовых к печати кодов маркировки. Возможно, они уже были распечатаны ранее. Данные этого документа были исключены из данных печати.'");
		ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, НанесениеКМ);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
		
	Для Каждого СтрокаТЧ Из НанесениеКМ.Товары Цикл
					
		СтрокиИзПулаСОтбором = ТаблицаДанныхРегистра.НайтиСтроки(Новый Структура("КодИдентификации", СтрокаТЧ.КодИдентификации));
		Если СтрокиИзПулаСОтбором.Количество() = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Сведения о коде маркировки %1 из документа %2 не обнаружены в доступных для печати данных из Пула кодов! Возможно, этот код уже был распечатан ранее. Он был исключен из данных печати.'");
			ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаТЧ.КодИдентификации, НанесениеКМ); 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		СтрокаКодИзПула = СтрокиИзПулаСОтбором[0];
		Шаблон = СтрокаКодИзПула.Шаблон;
		EAN    = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(СтрокаКодИзПула.GTIN);
		КодМаркировки = СтрокаКодИзПула.КодМаркировки;
		ВидПродукции  = СтрокаКодИзПула.ВидПродукции;
		ХешСуммаКодаИдентификации = СтрокаКодИзПула.ХешСуммаКодаИдентификации;
		СпособВводаВОборот 	   	  = СтрокаКодИзПула.СпособВводаВОборот;
		Номенклатура   = СтрокаКодИзПула.Номенклатура;
		Характеристика = СтрокаКодИзПула.Характеристика;
		
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда 
			ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(EAN);
			Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
				Номенклатура   = ДанныеНоменклатуры.Номенклатура;
				Характеристика = ДанныеНоменклатуры.Характеристика;
			Иначе
				Номенклатура   = Неопределено;
				Характеристика = Неопределено;
			КонецЕсли;
		КонецЕсли;
	
		НоваяСтрока = ДанныеДокументов.Добавить();
		НоваяСтрока.НанесениеКМ 	 = НанесениеКМ;
		НоваяСтрока.КодМаркировки    = КодМаркировки;
		НоваяСтрока.КодИдентификации = СтрокаТЧ.КодИдентификации;
		НоваяСтрока.Номенклатура     = Номенклатура;
		НоваяСтрока.Характеристика   = Характеристика;
		НоваяСтрока.ВидПродукции     = ВидПродукции;
		НоваяСтрока.GTIN             = СтрокаТЧ.GTIN;
		НоваяСтрока.ВидУпаковки      = ИнтеграцияИСМПТКПереопределяемый.ПолучитьВидУпаковкиПоШаблонуКода(Шаблон);
		НоваяСтрока.Шаблон           = Шаблон;
		НоваяСтрока.EAN              = EAN;
		НоваяСтрока.ХешСуммаКодаИдентификации = ХешСуммаКодаИдентификации;
		НоваяСтрока.СпособВводаВОборот = СпособВводаВОборот;
	
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьСведенияИзПула(ЗаказКМ) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПулКодовМаркировкиСУЗИСМПТК.КодИдентификации КАК КодИдентификации,
	|	ПулКодовМаркировкиСУЗИСМПТК.КодМаркировки КАК КодМаркировки,
	|	ПулКодовМаркировкиСУЗИСМПТК.ХешСуммаКодаИдентификации КАК ХешСуммаКодаИдентификации,
	|	ПулКодовМаркировкиСУЗИСМПТК.СпособВводаВОборот КАК СпособВводаВОборот,
	|	ПулКодовМаркировкиСУЗИСМПТК.Шаблон КАК Шаблон,
	|	ПулКодовМаркировкиСУЗИСМПТК.GTIN КАК GTIN,
	|	ПулКодовМаркировкиСУЗИСМПТК.ВидПродукции КАК ВидПродукции,
	|	ПулКодовМаркировкиСУЗИСМПТК.Номенклатура КАК Номенклатура,
	|	ПулКодовМаркировкиСУЗИСМПТК.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗИСМПТК КАК ПулКодовМаркировкиСУЗИСМПТК
	|ГДЕ
	|	ПулКодовМаркировкиСУЗИСМПТК.Организация = &Организация
	|	И ПулКодовМаркировкиСУЗИСМПТК.ЗаказНаЭмиссию = &ЗаказНаЭмиссию
	|	И ПулКодовМаркировкиСУЗИСМПТК.Статус = &Статус";
	
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("ЗаказНаЭмиссию", ЗаказКМ);
	Запрос.УстановитьПараметр("Статус", 		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиСУЗИСМПТК.Сгенерирован"));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТаблицаПулКодов = РезультатЗапроса.Скопировать();
	
	Возврат ТаблицаПулКодов;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьДанныеНанесения(Команда)
	
	ДанныеДокументов.Очистить();
	ОбщееКоличествоПоДокументам = ДанныеДокументов.Количество();
	
КонецПроцедуры

#Область Печать

&НаКлиенте
Процедура РаспечататьНанесения(Команда)
	
	Если Не ЗначениеЗаполнено(ШаблонЭтикеткиПечати) Тогда
		ТекстОшибки = НСтр("ru = 'Укажите шаблон печати!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияУкажитеОрганизацию();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	//Начинаем процесс печати
	ДанныеПечати = ПодготовитьДанныеДляПечатиРежимНанесения();
	Если Не ДанныеПечати.ОбъектыПечати.Количество() = 0 Тогда
		ПечатьКодовМаркировкиИСМПТККлиент.НапечататьЭтикеткиИСМП(ДанныеПечати, ЭтотОбъект);
		УстановитьДатуПечатиВПулеКодов();
		ТекстОшибки = НСтр("ru = 'Выбранные коды маркировки были распечатаны: для них установлен признак и дата печати в Пуле кодов.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		ДанныеДокументов.Очистить();
		ОбщееКоличествоПоДокументам = ДанныеДокументов.Количество();
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте 
Функция ПодготовитьДанныеДляПечатиРежимНанесения()
	
	ДанныеДляПечати = ДанныеДляПечатиРежимНанесения();
	ДанныеДляПечати.Вставить("ЕстьПечатьЭтикетокИЦенников", ПроверитьНаличиеМенеджераПечати());
	
	Возврат ДанныеДляПечати;
	
КонецФункции

&НаКлиенте 
Функция ДанныеДляПечатиРежимНанесения()
	
	ОбъектыПечати = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ДанныеДокументов Цикл
		
		Если ПечатьКодовМаркировкиИСМПТКВызовСервера.ПроверитьПризнакGS1УШаблона(ШаблонЭтикеткиПечати) Тогда
			ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.DataMatrix");
		Иначе
			ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.GS1_DataMatrix");
		КонецЕсли;
		
		ПараметрыШтрихкода = ПечатьКодовМаркировкиИСМПТККлиентСервер.СтруктураПечатиЭтикетки();
		
		ПараметрыШтрихкода.ВидПродукции       = СтрокаТаблицы.ВидПродукции;
		ПараметрыШтрихкода.Номенклатура       = СтрокаТаблицы.Номенклатура;
		ПараметрыШтрихкода.Характеристика     = СтрокаТаблицы.Характеристика;
		ПараметрыШтрихкода.СпособВводаВОборот = СтрокаТаблицы.СпособВводаВОборот;
		ПараметрыШтрихкода.Шаблон             = СтрокаТаблицы.Шаблон;
		ПараметрыШтрихкода.GTIN               = СтрокаТаблицы.GTIN;
		ПараметрыШтрихкода.КодИдентификации   = СтрокаТаблицы.КодИдентификации;
		ПараметрыШтрихкода.ХешСуммаКодаИдентификации = СтрокаТаблицы.ХешСуммаКодаИдентификации;
		ПараметрыШтрихкода.ШаблонЭтикетки 	  = ШаблонЭтикеткиПечати;
		ПараметрыШтрихкода.Штрихкод 	  	  = СтрокаТаблицы.КодМаркировки; 
		ПараметрыШтрихкода.Вставить("КодМаркировки", СтрокаТаблицы.КодМаркировки);
		
		ПараметрыШтрихкода.Организация    = Организация;
		ПараметрыШтрихкода.Количество     = 1;
		ПараметрыШтрихкода.ТипШтрихкода   = ТипШтрихкода;
		
		ОбъектыПечати.Добавить(ПараметрыШтрихкода);
		
	КонецЦикла;
	
	ИтоговаяСтруктура = Новый Структура;
	ИтоговаяСтруктура.Вставить("ОбъектыПечати",              ОбъектыПечати);
	ИтоговаяСтруктура.Вставить("Документ",                   "ПечатьИзФайла");
	ИтоговаяСтруктура.Вставить("РежимПечати",                "РезервироватьСвободныеКоды");
	ИтоговаяСтруктура.Вставить("КаждаяЭтикеткаНаНовомЛисте", КаждаяЭтикеткаНаНовомЛисте());
	
	Возврат ИтоговаяСтруктура;
	
КонецФункции

&НаСервере
Процедура УстановитьДатуПечатиВПулеКодов()
	
	ТаблицаДанных = ДанныеДокументов.Выгрузить();
	РегистрыСведений.ПулКодовМаркировкиСУЗИСМПТК.УстановитьСостояниеРаспечатанПоСтруктуреДокумента(ТаблицаДанных, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНанесенияПриИзменении(Элемент)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = "ПечатьИзНанесения" Тогда
		ДанныеДокументов.Очистить();
		ОбщееКоличествоПоДокументам = ДанныеДокументов.Количество();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВПулКодов(Команда)
	
	ОткрытьФорму("РегистрСведений.ПулКодовМаркировкиСУЗИСМПТК.Форма.ФормаСписка");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти