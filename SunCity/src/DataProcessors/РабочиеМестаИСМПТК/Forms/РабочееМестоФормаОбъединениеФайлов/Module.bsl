
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьНачальныеНастройки();
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПутьКФайлуЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр 	 = "CSV (Comma-Separated Values)(*.csv)|*.csv";
	Диалог.Заголовок = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокВыборФайла();
	Диалог.ИндексФильтра = 0;
	Диалог.ПредварительныйПросмотр 	   = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.МножественныйВыбор = Истина;
	ОповещениеЗавершения 	  = Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтаФорма);
	Диалог.Показать(ОповещениеЗавершения);

КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		
		ДанныеФайлов.Очистить();
		СписокФайлов.Очистить();
		
		Если ВыбранныеФайлы.Количество() = 1 Тогда
			ВыбранныеФайлыПредставление = ВыбранныеФайлы[0];
		Иначе
			ВыбранныеФайлыПредставление = НСтр("ru = 'Выбрано файлов: %Количество%'");
			ВыбранныеФайлыПредставление = СтрЗаменить(ВыбранныеФайлыПредставление, "%Количество%", ВыбранныеФайлы.Количество());
		КонецЕсли;
		
		Для Каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
			//Заполняем информацию о файлах в подробностях 
			НоваяСтрокаИнфо = СписокФайлов.Добавить();
			НоваяСтрокаИнфо.Файл = ВыбранныйФайл;
		КонецЦикла;
		
		ПутьКФайлуЗагрузки = ВыбранныеФайлыПредставление;
		
	КонецЕсли;
		
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуЗагрузкиОчистка(Элемент, СтандартнаяОбработка)
	
	ДанныеФайлов.Очистить();
	СписокФайлов.Очистить();
	ДанныеИзмененыПользователем = Ложь;
	УстановитьНачальныеНастройки();
	УправлениеФормой();
	ОбщееКоличество = 0;
	ОчиститьСообщения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайлы(Команда)
	
	ОчиститьСообщения();

	Если СписокФайлов.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Файлы не выбраны!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если ФайлыСРазделителями И Не (РазделительЗапятая Или РазделительТабуляция Или РазделительТочкаСЗапятой) Тогда
		ТекстПредупреждения = НСтр("ru = 'Укажите вид разделителя!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ОшибкаЗагрузки  = Ложь;
	ДанныеФайлов.Очистить();
		
	Для Каждого ВыбранныйФайл Из СписокФайлов Цикл
						
		ПрочитанныйФайл = Новый ТекстовыйДокумент;
		ПрочитанныйФайл.Прочитать(ВыбранныйФайл.Файл);
		
		Для НомерСтроки = 1 По ПрочитанныйФайл.КоличествоСтрок() Цикл
			СтрокаФайла = ПрочитанныйФайл.ПолучитьСтроку(НомерСтроки);
			
			Если ФайлыСРазделителями Тогда //Выбран режим загрузки файлов с разделителями (агрегаций)
				
				//Определяем вид разделителя для поиска
				Если РазделительЗапятая Тогда
					РазделительДляПоиска = ",";
				ИначеЕсли РазделительТочкаСЗапятой Тогда
					РазделительДляПоиска = ";";
				Иначе
					РазделительДляПоиска = Символы.Таб;
				КонецЕсли;
				
				ПозицияРазделителя = СтрНайти(СтрокаФайла, РазделительДляПоиска);
								
				Если Не ПозицияРазделителя = 0 Тогда
					
					КодАгрегатаИзСтроки   = Лев(СтрокаФайла,  ПозицияРазделителя - 1);
					КодМаркировкиИзСтроки = Сред(СтрокаФайла, ПозицияРазделителя + 1);
					
					НоваяСтрока = ДанныеФайлов.Добавить();
					НоваяСтрока.КодАгрегата  = КодАгрегатаИзСтроки;
					
					РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(КодМаркировкиИзСтроки);
					ИсходныеДанные = Новый Структура("Количество, Штрихкод", 1, КодМаркировкиИзСтроки);
					ИсходныеДанные.Вставить("ФорматBase64", Истина);
					СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(ИсходныеДанные);     
					
					//Если удалось разобрать код, вернется структура. Если нет - текст сообщения об ошибке.
					Если ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда
						ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СтруктураКодовМаркировки);
						Возврат;
					КонецЕсли;
					
					НоваяСтрока.ВложенныйКод = КодМаркировкиИзСтроки;
					НоваяСтрока.ВложенныйКИ  = СтруктураКодовМаркировки.КодИдентификации;
					
					ФайлыСРазделителями = Истина;
					ЕстьАгрегация = Истина;
					
				Иначе
					//Если в строке файла не удалось найти выбранный разделитель, файл дальше не разбираем
					ОшибкаЗагрузки = Истина;
					Прервать;
				КонецЕсли;
					
			Иначе
				
				РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(СтрокаФайла);
				ИсходныеДанные = Новый Структура("Количество, Штрихкод", 1, СтрокаФайла);
				ИсходныеДанные.Вставить("ФорматBase64", Истина);
				СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(ИсходныеДанные);   
				
				Если СтруктураКодовМаркировки = Неопределено 
					Или ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда //Если не удалось разобрать КМ, возвращается текст ошибки.
					ОшибкаЗагрузки = Истина;
					Прервать;
				КонецЕсли;
				
				НоваяСтрока = ДанныеФайлов.Добавить();
				НоваяСтрока.КодАгрегата  = "";
				НоваяСтрока.ВложенныйКод = СтрокаФайла;
				НоваяСтрока.ВложенныйКИ  = СтруктураКодовМаркировки.КодИдентификации;
				
				ЕстьСпискиКодов = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
	ОбщееКоличество = ДанныеФайлов.Количество();
		
	Если ОшибкаЗагрузки Тогда
		ТекстОшибки = НСтр("ru = 'Некоторые файлы не соответствуют указанному формату (наличие и вид разделителя)! Они были исключены из объединения.'");
		ОчиститьСообщения();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Объединить(Команда)

	Если ДанныеФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокВыборФайла();
	ДиалогВыбораФайла.Фильтр = "CSV (Comma-Separated Values)(*.csv)|*.csv";
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
		
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьКодыМаркировкиВФайлЗавершение", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКодыМаркировкиВФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		НовыйТекстовыйДокумент = Новый ТекстовыйДокумент;
		Если Не ДанныеФайлов.Количество() = 0 Тогда
			
			Для Каждого СтрокаТЧ Из ДанныеФайлов Цикл
				
				КодДляЗаписи = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(СтрокаТЧ.ВложенныйКод);
				
				Если ЗначениеЗаполнено(СтрокаТЧ.КодАгрегата) Тогда
					СтрокаЗагрузки = СтрокаТЧ.КодАгрегата + "," + КодДляЗаписи;
				Иначе
					СтрокаЗагрузки = КодДляЗаписи;
				КонецЕсли;
				НовыйТекстовыйДокумент.ДобавитьСтроку(СтрокаЗагрузки);
			КонецЦикла;
		КонецЕсли;
	
		НовыйТекстовыйДокумент.Записать(ВыбранныеФайлы[0]);
		
		ТекстСообщения = НСтр("ru = 'Операция выполнена успешно!'");
		ОчиститьСообщения();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);		
				
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанные(Команда)
	
	ТекстВопроса = НСтр("ru = 'Все данные формы будут очищены. Продолжить?'");
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение   = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчиститьДанные", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчиститьДанные(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		СписокФайлов.Очистить();
		ДанныеФайлов.Очистить();
		ПутьКФайлуЗагрузки = "";
		ОбщееКоличество = "";
		УстановитьНачальныеНастройки();
		УправлениеФормой();
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДанныеФайловПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РазделительТочкаСЗапятойПриИзменении(Элемент)
	
	Если РазделительТочкаСЗапятой Тогда
		РазделительТабуляция = Ложь;
		РазделительЗапятая = Ложь;
	КонецЕсли;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура РазделительЗапятаяПриИзменении(Элемент)
	
	Если РазделительЗапятая Тогда
		РазделительТабуляция = Ложь;
		РазделительТочкаСЗапятой = Ложь;
	КонецЕсли;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура РазделительТабуляцияПриИзменении(Элемент)
	
	Если РазделительТабуляция Тогда
		РазделительЗапятая = Ложь;
		РазделительТочкаСЗапятой = Ложь;
	КонецЕсли;
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеФормой() 

	Если ДанныеИзмененыПользователем Тогда
		ЗаголовокПредупреждения = НСтр("ru = 'Внимание! Данные таблицы были изменены вручную!'");
	Иначе
		ЗаголовокПредупреждения = "";
	КонецЕсли;
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияПредупреждениеТаблицаИзменилась", 
																	   "Заголовок", ЗаголовокПредупреждения);
	
	//Код агрегата в таблице показываем только для файлов с разделителями
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДанныеФайловКодАгрегата",
																	   "Видимость", ФайлыСРазделителями);
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРазделитель",
																	   "Доступность", ФайлыСРазделителями);
	                                           
КонецПроцедуры

&НаСервере
Процедура УстановитьНачальныеНастройки() 
		
	ДанныеИзмененыПользователем = Ложь;
	ФайлыСРазделителями = Ложь;
	РазделительЗапятая = Ложь;
	РазделительТабуляция = Ложь;
	РазделительТочкаСЗапятой = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеФайловПослеУдаления(Элемент)
	
	ДанныеИзмененыПользователем = Истина;
	ОбщееКоличество = ДанныеФайлов.Количество();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыСРазделителямиПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти