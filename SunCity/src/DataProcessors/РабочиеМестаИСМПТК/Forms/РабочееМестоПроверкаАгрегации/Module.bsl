
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("Организация") Тогда
		Организация = Параметры.Отбор.Организация;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПрефиксыЭлементовФормы", "КодыАгрегата,КодыВложенные");
	СобытияФормИСМПТКПереопределяемый.ПриСозданииНаСервере_НастроитьПодключаемоеОборудование(ЭтаФорма, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой();
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользуютсяСканерыШтрихкода Тогда
		ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			
			Если Не ЭтаФорма.ТекущийЭлемент = Неопределено Тогда
				Если ЭтаФорма.ТекущийЭлемент.Имя = "ТаблицаКодовАгрегата" Тогда
					ОбработкаСобытияСканераОбщая(Параметр, "ТаблицаКодовАгрегата");
				Иначе
					ОбработкаСобытияСканераОбщая(Параметр, "ТаблицаВложенности");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Не СобытияФормИСМПТККлиентПереопределяемый.ОбрабатыватьВнешнееСобытиеТО() Тогда 
		Возврат;
	КонецЕсли;
	
	Параметр = Новый Массив;
	Параметр.Добавить(Данные);
	Параметр.Добавить(Неопределено);
	
	Если ВводДоступен() Тогда
		Если Событие = "Штрихкод" ИЛИ Событие = "ПолученШтрихкод" Тогда
			
			Если Не ЭтаФорма.ТекущийЭлемент = Неопределено Тогда
				Если ЭтаФорма.ТекущийЭлемент.Имя = "ТаблицаКодовАгрегата" Тогда
					ОбработкаСобытияСканераОбщая(Параметр, "ТаблицаКодовАгрегата");
				Иначе
					ОбработкаСобытияСканераОбщая(Параметр, "ТаблицаВложенности");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСобытияСканераОбщая(Параметр, ИмяТаблицы)
	
	МожноПродолжатьОбработкуШК = ВыполнитьПроверкиОбщихДанных(ИмяТаблицы);
	Если Не МожноПродолжатьОбработкуШК Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверкаФорматаТранспортногоКодаПройденаУспешно(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр)) Тогда
		Возврат;
	КонецЕсли;
			
	ОбработатьКодМаркировки(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр), Новый Структура("ИмяТаблицы", ИмяТаблицы));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаФормы(Команда)
	
	ОчисткаФормыПослеВопроса = Новый ОписаниеОповещения("ОчисткаФормыПослеВопроса", ЭтаФорма);
	ТекстВопроса = НСтр("ru = 'Выполнить очистку всех данных формы?'");
	ПоказатьВопрос(ОчисткаФормыПослеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнитьАгрегаты(Команда)
	
	ПоискПоШтрихкодуВыполнитьОбщая("ТаблицаКодовАгрегата");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнитьВложенность(Команда)
	
	ПоискПоШтрихкодуВыполнитьОбщая("ТаблицаВложенности");
		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПротокол(Команда)
	
	ОчиститьПротоколПослеВопроса = Новый ОписаниеОповещения("ОчиститьПротоколПослеВопроса", ЭтаФорма);
	ТекстВопроса = НСтр("ru = 'Выполнить полную очистку протокола?'");
	ПоказатьВопрос(ОчиститьПротоколПослеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыАгрегаты(Команда)
	
	ОбновитьСтатусыОбщая("ТаблицаКодовАгрегата");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыВложенный(Команда)
	
	ОбновитьСтатусыОбщая("ТаблицаВложенности");
	
КонецПроцедуры

#Область ВводНаОсновании

&НаКлиенте
Процедура ВвестиУведомлениеОВыводеПоВсем(Команда)
	
	ПредставлениеУведомления = ПолучитьПредставлениеУведомленияОВыводеИзОборота();
	
	ТекстСообщения = НСтр("ru = 'Инициирована команда ввода нового документа ""%НаименованиеДокумента%"".'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеДокумента%", ПредставлениеУведомления); 
	СформироватьСообщениеВПротокол(ТекстСообщения, 0);
	
	ВвестиУведомлениеОВыводеПослеВопроса = Новый ОписаниеОповещения("ВвестиУведомлениеОВыводеПослеВопроса", ЭтаФорма);
	ТекстВопроса = НСтр("ru = 'Будет создан новый документ ""%НаименованиеДокумента%"" со всеми неподтвержденными по остаткам, но находящимися в статусах ""%СтатусВОбороте%"" или ""%СтатусНанесен%"" кодами маркировки вложенностей.'")
				 + Символы.ПС
				 + НСтр("ru = 'Продолжить?'");
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%НаименованиеДокумента%", ПредставлениеУведомления);
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%СтатусВОбороте%", ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.ВведенВОборот"));
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%СтатусНанесен%",  ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.Нанесен"));
	
	ПоказатьВопрос(ВвестиУведомлениеОВыводеПослеВопроса, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТаблицаКодовАгрегатаПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборПоАгрегату();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура НеУстанавливатьОтборПоСтрокеПриИзменении(Элемент)
	
	УстановитьОтборПоАгрегату();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКодовАгрегатаПередУдалением(Элемент, Отказ)
	
	Если Не ТаблицаВложенности.Количество() = 0 Тогда
		ИдентификаторУдаляемойСтроки = Элемент.ТекущиеДанные.КлючСтроки;
		
		ТекстСообщения = НСтр("ru = 'Код агрегата %1 удален из списка.'");
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Элемент.ТекущиеДанные.КодИдентификации);  
		СформироватьСообщениеВПротокол(ТекстСообщения, 0);
		
		СвязанныеСтрокиВложенности = ТаблицаВложенности.НайтиСтроки(Новый Структура("КлючСтроки", ИдентификаторУдаляемойСтроки));
		Если Не СвязанныеСтрокиВложенности.Количество() = 0 Тогда
			Для Каждого СтрокаТЧ Из СвязанныеСтрокиВложенности Цикл
				ТаблицаВложенности.Удалить(СтрокаТЧ);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКодовАгрегатаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхВТЧ

#Область ЗагрузитьИзCSV

&НаКлиенте
Процедура КодыАгрегатаЗагрузитьИзФайла(Команда)
	
	ЗагрузитьКодыМаркировкиИзФайлаОбщая("ТаблицаКодовАгрегата");
	
КонецПроцедуры

&НаКлиенте
Процедура КодыВложенныеЗагрузитьИзФайла(Команда)
	
	ЗагрузитьКодыМаркировкиИзФайлаОбщая("ТаблицаВложенности");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКодыМаркировкиИзФайлаОбщая(ИмяТЧ)
	
	МожноПродолжатьОбработкуШК = ВыполнитьПроверкиОбщихДанных();
	Если Не МожноПродолжатьОбработкуШК Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Начата загрузка данных из файла CSV...'");
	СформироватьСообщениеВПротокол(ТекстСообщения, 0);
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок 	= РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияЗаголовокВыборФайла();
	ДиалогВыбораФайла.Фильтр 		= "CSV (Comma-Separated Values)(*.csv)|*.csv";
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПредварительныйПросмотр 	  = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор 		  = Истина;
	
	Оповещение = Новый ОписаниеОповещения("ВыборФайлаCSVЗавершение", ЭтотОбъект, Новый Структура("ИмяТаблицы", ИмяТЧ));
	ДиалогВыбораФайла.Показать(Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаCSVЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
					
		Для Каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
			
			ПрочитанныйФайл = Новый ТекстовыйДокумент;
			ПрочитанныйФайл.Прочитать(ВыбранныйФайл);
								
			Для НомерСтроки = 1 По ПрочитанныйФайл.КоличествоСтрок() Цикл
				
				Штрихкод = ПрочитанныйФайл.ПолучитьСтроку(НомерСтроки);
				
				ДанныеШтрихкода = Новый Структура("ШтрихКод, ФорматBase64, Количество", Штрихкод, Ложь, 1);
				РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
				ОбработатьКодМаркировки(ДанныеШтрихкода, ДополнительныеПараметры);
				
			КонецЦикла;
		КонецЦикла;
		
		ТекстСообщения = НСтр("ru = 'Процесс загрузки данных из файла CSV завершен.'");
		СформироватьСообщениеВПротокол(ТекстСообщения, 0);
	
	Иначе
		ТекстСообщения = НСтр("ru = 'Выбор файла CSV отменен. Процесс загрузки данных прерван.'");
		СформироватьСообщениеВПротокол(ТекстСообщения, 0);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЗагрузитьИзТСД

&НаКлиенте
Процедура КодыАгрегатаЗагрузитьИзТСД(Команда)
	
	ЗагрузитьДанныеИзТСДОбщая("ТаблицаКодовАгрегата");
	
КонецПроцедуры

&НаКлиенте
Процедура КодыВложенныеЗагрузитьИзТСД(Команда)
	
	ЗагрузитьДанныеИзТСДОбщая("ТаблицаВложенности");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСДОбщая(ИмяТЧ)
	
	МожноПродолжатьОбработкуШК = ВыполнитьПроверкиОбщихДанных();
	Если Не МожноПродолжатьОбработкуШК Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Начата загрузка данных из ТСД...'");
	СформироватьСообщениеВПротокол(ТекстСообщения, 0);
	
	ОбщегоНазначенияИСМПТККлиентПереопределяемый.НачатьЗагрузкуДанныеИзТСД(Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект, Новый Структура("ИмяТаблицы", ИмяТЧ)), УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		СобытияФормИСМПТККлиентПереопределяемый.ПриПолученииДанныхИзТСД(Новый ОписаниеОповещения("Подключаемый_ПолученыДанныеИзТСД", ЭтотОбъект, ДополнительныеПараметры), ЭтотОбъект, РезультатВыполнения);
	Иначе
		ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка. Процесс загрузки данных прерван.'");
		СформироватьСообщениеВПротокол(ТекстСообщения, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, ДопПараметры) Экспорт
	
	Если Штрихкоды.Количество() = 0 Тогда
		ПоказатьПредупреждение( ,РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВДанныхИзТСДНетИнформацииОКодахМаркировки());
		ТекстСообщения = НСтр("ru = 'Не получены данные кодов маркировки! Процесс загрузки данных прерван.'");
		СформироватьСообщениеВПротокол(ТекстСообщения, 0);
		Возврат;
	КонецЕсли;
	
	СобытияФормИСМПТККлиент.ОповеститьОНачалеОбработкиДанныхТСД();
	ПараметрыСканирования = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПараметрыСканирования(ЭтотОбъект);
	СобытияФормИСМПТККлиент.ПреобразоватьШтрихкодыТСДВBase64(Штрихкоды);
	ЗагрузкаДанныхТСД = ОбработатьПолученныеДанныеТСДНаСервере(Штрихкоды, ПараметрыСканирования, Неопределено);
	
	ОбработатьПолученныеДанныеТСД(ДопПараметры);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПолученныеДанныеТСДНаСервере(ШтрихкодыТСД, ПараметрыСканирования, КэшированныеЗначения)
	
	Результат = РаботаСДокументамиИСМПТК.ОбработатьПолученныеДанныеТСДВДокументе(ЭтотОбъект, ШтрихкодыТСД, ПараметрыСканирования);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПолученныеДанныеТСД(ДополнительныеПараметры)
	
	Если ЗагрузкаДанныхТСД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для НомерСтроки = 0 По ЗагрузкаДанныхТСД.Всего - 1 Цикл
		
		Штрихкод = ЗагрузкаДанныхТСД.ШтрихкодыТСД[НомерСтроки];
		ДанныеШтрихкода = Новый Структура("ШтрихКод, ФорматBase64, Количество", Штрихкод.Штрихкод, Ложь, 1);
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
		ОбработатьКодМаркировки(ДанныеШтрихкода, ДополнительныеПараметры);
		
	КонецЦикла;
	
	ТекстСообщения = НСтр("ru = 'Процесс загрузки данных из ТСД завершен.'");
	СформироватьСообщениеВПротокол(ТекстСообщения, 0);
		
КонецПроцедуры

#КонецОбласти

#Область ЗагрузитьИзМобильногоприложения

&НаКлиенте
Процедура КодыАгрегатаЗагрузитьИзПриложения(Команда)
	
	МобильноеПриложениеЗагрузитьТоварыОбщая("ТаблицаКодовАгрегата");	
	
КонецПроцедуры

&НаКлиенте
Процедура КодыВложенныеЗагрузитьИзПриложения(Команда)
	
	МобильноеПриложениеЗагрузитьТоварыОбщая("ТаблицаВложенности");	
	
КонецПроцедуры

&НаКлиенте
Процедура МобильноеПриложениеЗагрузитьТоварыОбщая(ИмяТЧ)
	
	МожноПродолжатьОбработкуШК = ВыполнитьПроверкиОбщихДанных();
	Если Не МожноПродолжатьОбработкуШК Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Начата загрузка данных из мобильного приложения...'");
	СформироватьСообщениеВПротокол(ТекстСообщения, 0);
	
	ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("МобильноеПриложениеЗагрузитьТоварыОбработкаВыбора", ЭтотОбъект, Новый Структура("ИмяТаблицы", ИмяТЧ));
	Список = МобильноеПриложениеЗагрузитьТоварыНаСервере();
	Список.ПоказатьОтметкуЭлементов(ОповещениеПослеВыбораЭлемента, РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВыборДокументаДляЗагрузки());
	
КонецПроцедуры

&НаСервере
Функция МобильноеПриложениеЗагрузитьТоварыНаСервере()
	
	Список = Новый СписокЗначений;
	
	Соединение = ОбменДаннымиМобильноеПриложениеМаркировкаИСМПТК.УстановитьСоединениеССервером();
	Если Соединение = Неопределено Тогда
		Возврат Список;
	КонецЕсли;
	
	ТЗСериализованная = Соединение.GiveAllDocs();
	ТЗ = ОбменДаннымиМобильноеПриложениеМаркировкаИСМПТК.Десериализовать(ТЗСериализованная);
	
	Для Каждого Строка Из ТЗ Цикл
		Список.Добавить(Строка.Number,Строка.Name + " от " + Строка.Date);
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

&НаКлиенте
Процедура МобильноеПриложениеЗагрузитьТоварыОбработкаВыбора(Элемент, Параметры) Экспорт
	
	Если Элемент <> Неопределено Тогда
		
		Для Каждого Строка Из Элемент Цикл
			
			Если Строка.Пометка = Истина Тогда
				ЗагрузитьТоварыИзМобильногоПриложения(Строка.Значение, Параметры);
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Выбор файла сканирования из мобильного приложения отменен. Процесс загрузки данных прерван.'");
		СформироватьСообщениеВПротокол(ТекстСообщения, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТоварыИзМобильногоПриложения(Номер, ДополнительныеПараметры)
	
	Список = ЗагруженныеДокументыСканированияВыборНаСервере(Номер);
		
	Для Каждого Код Из Список Цикл
		
		Код = Код.Значение;
		Если Не РозничноеВыбытиеИСМПТККлиент.ЭтоСтрокаФорматаBase64(Код) Тогда
		     Код = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(Код);
		КонецЕсли;
		
		ДанныеШтрихкода = Новый Структура("ШтрихКод, ФорматBase64, Количество", Код, Истина, 1);
		ОбработатьКодМаркировки(ДанныеШтрихкода, ДополнительныеПараметры);
		
	КонецЦикла;
	
	ТекстСообщения = НСтр("ru = 'Процесс загрузки данных из мобильного приложения завершен.'");
	СформироватьСообщениеВПротокол(ТекстСообщения, 0);	
	
КонецПроцедуры

&НаСервере
Функция ЗагруженныеДокументыСканированияВыборНаСервере(Номер)
	
	Возврат ОбменДаннымиМобильноеПриложениеМаркировкаИСМПТК.ЗагруженныеДокументыСканированияВыборНаСервере(Номер);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеФормой()
	
	//Отображение данных в таблицах
	//Если не включена опция, регулирующая отбор, то по умолчанию отображаем только вложенность активного агрегата.
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТаблицаВложенностиНомерСтроки", "Видимость", НеУстанавливатьОтборПоСтроке);
	///////////////////////////
	
	ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомандыЗагрузкиТЧВложенные", "Доступность", Не ТаблицаВложенности.Количество() = 0);
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.УведомлениеОВыводеИзОборотаИСМПТК) Тогда
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТаблицаВложенностиВвестиУведомлениеОВыводеПоВсем", "Доступность", ТаблицаВложенности.Количество()>0);
	Иначе
		ОбщегоНазначенияИСМПТККлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодменюВводДокумента", "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВремяПроверкиНаСервере()
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

&НаКлиенте
Процедура ОчисткаФормыПослеВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Организация = Неопределено;
		ТаблицаКодовАгрегата.Очистить();
		ТаблицаВложенности.Очистить();
		ТаблицаИнформация.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПротоколПослеВопроса(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ТаблицаИнформация.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиУведомлениеОВыводеПослеВопроса(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Отмена Тогда
		СформироватьСообщениеВПротокол(НСтр("ru = 'Ввод документа отменен пользователем.'"), 0);
		Возврат;
	КонецЕсли;
	
	ВвестиУведомлениеОВыводеПослеВыбораПричины = Новый ОписаниеОповещения("ВвестиУведомлениеОВыводеПослеВыбораПричины", ЭтаФорма);
	ОткрытьФорму("Перечисление.ПричиныВыводаКМИзОборотаИСМПТК.ФормаВыбора", ,,,,,ВвестиУведомлениеОВыводеПослеВыбораПричины, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
КонецПроцедуры

&НаКлиенте
Процедура ВвестиУведомлениеОВыводеПослеВыбораПричины(Результат, Параметры) Экспорт
	
	ПредставлениеДокумента = ПолучитьПредставлениеУведомленияОВыводеИзОборота();
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		ТекстСообщения = НСтр("ru = 'Ввод документа ""%НаименованиеДокумента%"" прерван: не указана причина списания кодов маркировки.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеДокумента%", ПредставлениеДокумента);
		СформироватьСообщениеВПротокол(ТекстСообщения, 0);
		Возврат;
	КонецЕсли;
	
	ПричинаВыбытия = Результат;
	ТекстСообщения = НСтр("ru = 'Для создания документа ""%НаименованиеДокумента%"" выбрана причина списания ""%1"".'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеДокумента%", ПредставлениеДокумента);
	ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ПричинаВыбытия);
	СформироватьСообщениеВПротокол(ТекстСообщения, 0);
	
	СсылкаНовый = Неопределено;
	ПродолжитьСозданиеУведомленияОВыводеНаСервере(СсылкаНовый, ПричинаВыбытия);
	Если СсылкаНовый = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось сформировать новый документ ""%НаименованиеДокумента%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеДокумента%", ПредставлениеДокумента);
		СформироватьСообщениеВПротокол(ТекстСообщения, 3);
	Иначе
		ОткрытьФорму("Документ.УведомлениеОВыводеИзОборотаИСМПТК.ФормаОбъекта", Новый Структура("Ключ", СсылкаНовый));
		ТекстСообщения = НСтр("ru = 'Новый документ ""%НаименованиеДокумента%"" успешно создан! Процесс завершен.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеДокумента%", ПредставлениеДокумента);
		
		СформироватьСообщениеВПротокол(ТекстСообщения, 1);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПредставлениеУведомленияОВыводеИзОборота()

	Возврат Метаданные.Документы.УведомлениеОВыводеИзОборотаИСМПТК.Представление();	
	
КонецФункции

&НаСервере
Процедура ПродолжитьСозданиеУведомленияОВыводеНаСервере(СсылкаНовый, ПричинаВыбытия)

	//Получаем список всех КМ вложенностей, которые находятся в статусе, означающем их нахождение в обороте ИС МПТ.
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.ВведенВОборот"));
	МассивДопустимыхСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.Нанесен"));
	МассивДопустимыхСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.ВозвращенВОборот"));
	МассивДопустимыхСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.Экспорт"));
	
	СтруктураОтбораСтрок = Новый Структура();
	СтруктураОтбораСтрок.Вставить("Подтвержден", Ложь);
	НеподтвержденныеКМ = ТаблицаВложенности.НайтиСтроки(СтруктураОтбораСтрок);
	
	Если НеподтвержденныеКМ.Количество() = 0 Тогда
	    СформироватьСообщениеВПротокол(НСтр("ru = 'В таблице ""Вложенные коды"" не обнаружено подходящих для списания значений. Ввод документа отменен.'"), 3);
		Возврат;
	КонецЕсли;
	
	МассивКМДляСоздания  = Новый Массив();
	Для Каждого СтрокаКМ Из НеподтвержденныеКМ Цикл
		
		Если СтрокаКМ.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда 
			GTINВерхнегоУровня = СтрокаКМ.GTIN;
			GTIN = СтрокаКМ.GTIN;
		ИначеЕсли СтрокаКМ.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда 
			GTINВерхнегоУровня = СтрокаКМ.GTIN;
			GTIN = "";
		Иначе
			GTINВерхнегоУровня = "";
			GTIN = "";
		КонецЕсли;
		
		Если МассивДопустимыхСтатусов.Найти(СтрокаКМ.СтатусКода) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанныхКМ = Новый Структура();
		СтруктураДанныхКМ.Вставить("КодМаркировки",    СтрокаКМ.КодМаркировки);
		СтруктураДанныхКМ.Вставить("КодИдентификации", СтрокаКМ.КодИдентификации);
				
		СтруктураДанныхКМ.Вставить("GTINВерхнегоУровня", GTINВерхнегоУровня);
		СтруктураДанныхКМ.Вставить("GTIN", GTIN);
		СтруктураДанныхКМ.Вставить("EAN",  СтрокаКМ.EAN);
				
		СтруктураДанныхКМ.Вставить("КоличествоИсточник", 1);
		СтруктураДанныхКМ.Вставить("Количество", 1);
		
		СтруктураДанныхКМ.Вставить("Номенклатура",	 СтрокаКМ.Номенклатура);
		СтруктураДанныхКМ.Вставить("ВидУпаковки", 	 СтрокаКМ.ВидУпаковки);
		СтруктураДанныхКМ.Вставить("ВидПродукции",   СтрокаКМ.ВидПродукции);
		
		МассивКМДляСоздания.Добавить(СтруктураДанныхКМ);
		
	КонецЦикла;
	
	РаботаСДокументамиИСМПТК.СоздатьУведомлениеОВыводеИзОборотаПоПроверкеАгрегации(Организация, ПричинаВыбытия, МассивКМДляСоздания, СсылкаНовый);
	
КонецПроцедуры
	
#Область ОбменССервером

&НаКлиенте
Процедура ПолучитьКлючАвторизации(СобытиеПослеАвторизации, ОповещениеПриОшибке = Ложь)
	
	ИнтерфейсИСМПТККлиент.ПолучитьКлючАвторизацииОбщая(СобытиеПослеАвторизации, Организация, ОповещениеПриОшибке);
	
КонецПроцедуры

&НаСервере
Процедура ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере(РезультатВыполнения, Параметры) Экспорт
	
	ТокенАвторизацииВрем = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
	Если ТокенАвторизацииВрем = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяТаблицы = Параметры.ИмяТаблицы;
	
	МассивКМ = Новый Массив();
	МассивКМ.Добавить(Параметры.КодИдентификации);

	ОтветСервераСостояниеКМ = ИнтеграцияИСМПТК.ЗапроситьДанныеОСостоянииКМ(МассивКМ, Организация, ТокенАвторизацииВрем);
	ОбработатьОтветСервераПоСостояниюКМ(МассивКМ, ОтветСервераСостояниеКМ, ИмяТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОтветСервераПоСостояниюКМ(МассивКМ, ОтветСервераСостояниеКМ, ИмяТаблицы)
	
	Если ЗначениеЗаполнено(ОтветСервераСостояниеКМ.ТекстОшибки) Тогда
		//Это если вообще не получилось получить с сервера информацию по запросу
		ТекстСообщенияОбщий = НСтр("ru = 'При выполнении запроса для получения информации по кодам произошла ошибка!'");
		
		ТекстСообщения = ТекстСообщенияОбщий + " "
					   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПодробностиВЖурналеРегистрации();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ТекстОшибки    = ТекстСообщенияОбщий
					   + Символы.ПС
					   + ОтветСервераСостояниеКМ.ТекстОшибки;
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "Обработки.РабочиеМестаИСМПТК.Формы.РабочееМестоПроверкаАгрегации.ОбработатьОтветСервераПоСостояниюКМ");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ДанныеПоКодамСервер = ОтветСервераСостояниеКМ.ДанныеКМ;
	
	Для Каждого КИ Из МассивКМ Цикл
		
		//Разбираем ответ сервера
		НайденноеСоответствиеКода = ДанныеПоКодамСервер.Получить(КИ);
		
		Если НайденноеСоответствиеКода = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'По коду %1 не удалось получить информацию с сервера ИС МПТ. Возможно, данный код не принадлежит организации, и его карточка недоступна.'") 
						   + Символы.ПС
						   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияКодНеБылДобавленВТаблицу(); 
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КИ);
			СформироватьСообщениеВПротокол(ТекстСообщения, 2);
			Продолжить;
		КонецЕсли;
		
		СтатусКМ	 = НайденноеСоответствиеКода.СтатусКМ;
		ВидПродукции = НайденноеСоответствиеКода.ВидПродукции;
		
		//Формируем предупреждение по кодам в статусах, которые могут повлиять на дальнейшую выгрузку данных.
		Если СтатусКМ = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.ВыведенИзОборота")
			ИЛИ СтатусКМ = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.ВыведенИзОборотаПриПеремаркировке")
			ИЛИ СтатусКМ = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.Утилизирован")
			ИЛИ СтатусКМ = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.ВыведенИзОборотаРассрочка") Тогда
			
			ТекстСообщенияОбщаяЧасть = НСтр("ru = 'Статус кода маркировки %1 по данным сервера ИС МПТ - ""%НаименованиеСтатуса%"".'");
			Если ИмяТаблицы = "ТаблицаКодовАгрегата" Тогда
				ТекстСообщения = ТекстСообщенияОбщаяЧасть + " " + НСтр("ru = 'Код находится в таблице ""Коды агрегата"".'");
			Иначе
				ТекстСообщения = ТекстСообщенияОбщаяЧасть + " " + НСтр("ru = 'Код находится в таблице ""Вложенные коды"".'");
			КонецЕсли;
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеСтатуса%", СтатусКМ); 
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КИ);
			СформироватьСообщениеВПротокол(ТекстСообщения, 3);
			
		КонецЕсли;
		
		РезультатПоискаСтроки = ЭтаФорма[ИмяТаблицы].НайтиСтроки(Новый Структура("КодИдентификации", КИ));
		РезультатПоискаСтроки[0].СтатусКода   = СтатусКМ;
		РезультатПоискаСтроки[0].ВидПродукции = ВидПродукции;
		
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыОбщая(ИмяТаблицы)
	
	ТокенАвторизацииВрем = Неопределено;
	ЗавершениеПолучитьСтатусыСпискаКМ = Новый ОписаниеОповещения("ЗавершениеПолучитьСтатусыСпискаКМ", ЭтаФорма, Новый Структура("ИмяТаблицы", ИмяТаблицы));
	ПолучитьКлючАвторизации(ЗавершениеПолучитьСтатусыСпискаКМ, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗавершениеПолучитьСтатусыСпискаКМ(РезультатВыполнения, Параметры) Экспорт
			
	ТокенАвторизацииВрем = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
	Если ТокенАвторизацииВрем = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось получить токен сеанса для обновления статусов КМ с сервера ИС МПТ.'")
					   + Символы.ПС
					   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВозможныеПричиныОшибкиТокена();
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ПолучитьНаименованиеСервиса());
		СформироватьСообщениеВПротокол(ТекстСообщения, 2);
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы = Параметры.ИмяТаблицы;
	
	МассивКМ = Новый Массив();
	Для Каждого СтрокаМарка Из ЭтаФорма[ИмяТаблицы] Цикл
		МассивКМ.Добавить(СтрокаМарка.КодИдентификации);	
	КонецЦикла;
	
	ОтветСервераСостояниеКМ = ИнтеграцияИСМПТК.ЗапроситьДанныеОСостоянииКМ(МассивКМ, Организация, ТокенАвторизацииВрем);
	ОбработатьОтветСервераПоСостояниюКМ(МассивКМ, ОтветСервераСостояниеКМ, ИмяТаблицы);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДанных

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнитьОбщая(Таблица)
	
	МожноПродолжатьОбработкуШК = ВыполнитьПроверкиОбщихДанных(Таблица);
	Если Не МожноПродолжатьОбработкуШК Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, Новый Структура("ИмяТаблицы", Таблица));
	СобытияФормИСМПТККлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверкаФорматаТранспортногоКодаПройденаУспешно(ДанныеШтрихкода) Тогда
		Возврат;
	КонецЕсли;
	ОбработатьКодМаркировки(ДанныеШтрихкода, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиент.ПараметрыСканирования(ЭтотОбъект);
	ИмяТаблицы = ДополнительныеПараметры.ИмяТаблицы;
	
	//Для передачи на сервер КМ, в составе которого есть символы GS (29), требуется дополнительное кодирование
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
	ИсходныеДанные.Вставить("ФорматBase64", Истина);
	
	// Выполняем проверку на тип отсканированного штрихкода: в агрегатах нельзя указывать ЕАН и коды потребительских упаковок,
	// во вложенных - только ЕАН.
	Если РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверитьКорректностьGTIN(ИсходныеДанные) Тогда
		ТекстСообщения = НСтр("ru = 'Отсканирован обычный штрихкод товара (EAN), необходимо указывать код маркировки!'")
					   + Символы.ПС
					   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияКодНеБылОбработан();
	 	СформироватьСообщениеВПротокол(ТекстСообщения, 3);
		Возврат;
	КонецЕсли;
	
	СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(ИсходныеДанные);   
	
	//Если удалось разобрать код, вернется структура. Если нет - текст сообщения об ошибке.
	Если ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда
		СформироватьСообщениеВПротокол(СтруктураКодовМаркировки, 2);
		Возврат;
	КонецЕсли;
	
	Если ИмяТаблицы = "ТаблицаКодовАгрегата" 
		И СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда
		СформироватьСообщениеВПротокол(НСтр("ru = 'Введен потребительский код маркировки. В таблице ""Коды агрегатов"" необходимо указывать коды маркировки упаковок.'"), 3);
		Возврат;
	КонецЕсли;
	
	//Получаем общие данные кода для заполнения строки ТЧ Агрегата
	EAN  = СтруктураКодовМаркировки.EAN;
	ВидПродукции  = СтруктураКодовМаркировки.ВидПродукции;
	КодМаркировки = СтруктураКодовМаркировки.КодМаркировки;
	КодИдентификации = СтруктураКодовМаркировки.КодИдентификации;
	ВидУпаковки 	 = СтруктураКодовМаркировки.ВидУпаковки;
	
	Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
		GTIN = СтруктураКодовМаркировки.GTINВерхнегоУровня;
	Иначе
		GTIN = СтруктураКодовМаркировки.GTIN;
	КонецЕсли;
		
	ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(EAN);
	Номенклатура   = ?(Не ДанныеНоменклатуры = Неопределено, ДанныеНоменклатуры.Номенклатура,   Неопределено);
	Характеристика = ?(Не ДанныеНоменклатуры = Неопределено, ДанныеНоменклатуры.Характеристика, Неопределено);

	КодНеДобавлен = Ложь;
	
	Если ИмяТаблицы = "ТаблицаКодовАгрегата" Тогда //Код нужно добавить в ТЧ
		
		Если ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК")
			И ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("АвтоОпределениеЛогистическихКодовИСМПТК") 
			И ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
			//Проверяем формат кода по серверу
			
			ИсходныйФормат = КодИдентификации;
			Если СтрДлина(КодИдентификации) = 20 Тогда
				ПреобразованныйКод = Сред(КодИдентификации, 3); //18-значный SSCC
				ДополнительныйКод  = Неопределено;
			ИначеЕсли СтрДлина(КодИдентификации) = 18 Тогда
				ПреобразованныйКод = "00"   + КодИдентификации;
				ДополнительныйКод  = "(00)" + КодИдентификации;
			Иначе
				ПреобразованныйКод = Неопределено;
				ДополнительныйКод  = Неопределено;
			КонецЕсли;
			
			МассивКМДляПроверки = Новый Массив();
			МассивКМДляПроверки.Добавить(КодИдентификации);
			Если НЕ ПреобразованныйКод = Неопределено Тогда
				МассивКМДляПроверки.Добавить(ПреобразованныйКод);
			КонецЕсли;
			Если НЕ ДополнительныйКод = Неопределено Тогда
				МассивКМДляПроверки.Добавить(ДополнительныйКод);
			КонецЕсли;
					
			УдалосьПолучитьСоставАгрегации = Ложь;
			//Начинаем опрос сервера по каждому из сформированных кодов для проверки
			Для Каждого КодSSCC Из МассивКМДляПроверки Цикл
				СтруктураЗапрос 	   = Новый Структура("Штрихкод, ВидУпаковки, ВидПродукции, ФорматBase64", КодSSCC, ВидУпаковки, ВидПродукции, Ложь); //общие параметры у кодов одинаковые
				ДанныеПоГрупповомуКоду = ИнтеграцияИСМПТКВызовСервера.ЗапроситьДанныеПоКодуАгрегации(СтруктураЗапрос, Организация, ТокенАвторизацииВрем);	
				
				Если Не ЗначениеЗаполнено(ДанныеПоГрупповомуКоду.ТекстОшибки) Тогда
					//Если по коду вернулась информация, значит нужно использовать этот формат для заполнения таблицы документа
					УдалосьПолучитьСоставАгрегации = Истина;
					КодИдентификации = КодSSCC;
					КодМаркировки 	 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(КодSSCC);
					СтруктураКодовМаркировки.КодИдентификации = КодИдентификации;
					СтруктураКодовМаркировки.КодМаркировки 	  = КодМаркировки;
					Прервать;
				КонецЕсли;
				КодИдентификации = ИсходныйФормат;
			КонецЦикла;
		
		КонецЕсли;
		
		ОтказатьВДобавлении = Ложь;
		Если Не ТаблицаКодовАгрегата.НайтиСтроки(Новый Структура("КодИдентификации", КодИдентификации)).Количество() = 0 Тогда 
			
			ОтказатьВДобавлении = Истина;
			
		ИначеЕсли ОбщегоНазначенияИСМПТК.ПроверитьЗначениеКонстанты("ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК")
			И СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
			
			//В этом случае в таблице документа может находиться уже преобразованный SSCC, соответствующий обрабатываемому в данный момент штрихкоду,
			//т.е. нужна специфическая проверка на дублирование данных кода
			ОтказатьВДобавлении = ПроверитьНаличиеSSCCВДокументе(СтруктураКодовМаркировки.КодИдентификации);
			
		КонецЕсли;
		
		Если ОтказатьВДобавлении Тогда
			ТекстСообщения = НСтр("ru = 'Код агрегата %1 уже присутствует в таблице.'");
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КодИдентификации);  
			СформироватьСообщениеВПротокол(ТекстСообщения, 0);
			Возврат;
		КонецЕсли;
		
		//Если код не найден, выполняем его добавление в таблицу
		ЗаполняемаяСтрока = ТаблицаКодовАгрегата.Добавить();
		ЗаполняемаяСтрока.EAN  = EAN;
		ЗаполняемаяСтрока.GTIN = GTIN;
		ЗаполняемаяСтрока.Номенклатура   = Номенклатура;
		ЗаполняемаяСтрока.Характеристика = Характеристика;
		ЗаполняемаяСтрока.КодМаркировки  = КодМаркировки;
		ЗаполняемаяСтрока.КодИдентификации = КодИдентификации;
		ЗаполняемаяСтрока.КлючСтроки 	 = Новый УникальныйИдентификатор;
		ЗаполняемаяСтрока.НомерСтроки 	 = ЗаполняемаяСтрока.ПолучитьИдентификатор() + 1;
		ЗаполняемаяСтрока.СоставПодтвержден = 1;
		
		//После добавления кода агрегата нужно развернуть его состав
		РазвернутьСоставКодаПоДаннымСервера(ЗаполняемаяСтрока, СтруктураКодовМаркировки, КодНеДобавлен);
		
	Иначе //Код нужно найти в ТЧ и отметить как подтвержденный
		
		НайденныеСтроки = ТаблицаВложенности.НайтиСтроки(Новый Структура("КодИдентификации", КодИдентификации));
		Если НайденныеСтроки.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Код маркировки %1 отсутствует в перечне вложенностей указанных агрегатов!'")
						   + Символы.ПС
						   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияКодНеБылОбработан();
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КодИдентификации);  
			СформироватьСообщениеВПротокол(ТекстСообщения, 3);
			Возврат;
		КонецЕсли;
		
		ЗаполняемаяСтрока = НайденныеСтроки[0];
		ЗаполняемаяСтрока.Подтвержден = Истина;
		ИнтерфейсИСМПТККлиентСервер.УстановитьИндексКартинкиТипаУпаковки(ЗаполняемаяСтрока);
		
		КодАгрегатаСтроки = ТаблицаКодовАгрегата.НайтиСтроки(Новый Структура("КлючСтроки", ЗаполняемаяСтрока.КлючСтроки))[0].КодИдентификации;
		
		ТекстСообщения = НСтр("ru = 'Код вложенности %1 (код агрегата %2) успешно подтвержден по остаткам.'");
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КодИдентификации, КодАгрегатаСтроки);
		СформироватьСообщениеВПротокол(ТекстСообщения, 1);
				
	КонецЕсли;	
	
	//После подтверждения вложенного кода нужно обновить сведения по заполненности упаковок.
	//Устанавливается цвет строки по подтвержденным вложенным позициям.
	ПроверитьИОбновитьСведенияУпаковок();
	УстановитьОтборПоАгрегату();
	УправлениеФормой();
		
КонецПроцедуры

&НаСервере
Функция ВыполнитьПроверкиОбщихДанных(ИмяТаблицы = "")

	МожноПродолжать = Истина;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда 
		СформироватьСообщениеВПротокол(НСтр("ru = 'Не указана организация! Невозможно выполнить запрос информации об агрегате с сервера ИС МПТ.'"), 0);
		МожноПродолжать = Ложь;
	КонецЕсли;

	Если ИмяТаблицы = "ТаблицаВложенности" 
		И ТаблицаКодовАгрегата.Количество() = 0 Тогда
		СформироватьСообщениеВПротокол(НСтр("ru = 'Не выбран код агрегата! Невозможно сопоставить информацию по вложенным позициям.'"), 0);
		МожноПродолжать = Ложь;
	КонецЕсли;
	
	Возврат МожноПродолжать;	
	
КонецФункции

&НаСервере
Функция ПолучитьНоменклатуруПоШтрихкоду(EAN, СообщенияОбОшибках = Неопределено)
	
	Если СообщенияОбОшибках = Неопределено Тогда
		//Не во всех местах вызова функции нужно выводить пользователю сообщения, поэтому заменяеям на коллекцию-пустышку
		СообщенияОбОшибках = Новый Соответствие();
	КонецЕсли;
	
	Возврат ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, EAN,, СообщенияОбОшибках);
	
КонецФункции

&НаКлиенте
Процедура ПроверитьИОбновитьСведенияУпаковок()
	
	//При проверке упаковок по вложенностям устанавливается статус подтверждения:
	//0 - упаковка неизвестна (пустая, чужая и т.п. - получить состав не вышло)
	//1 - упаковка полностью не подтверждена (все КМ вложенности не найдены по остаткам)
	//2 - упаковка частично подтверждена (есть найденные и не найденные КМ)
	//3 - упаковка полностью подтверждена (все КМ вложенности подтверждены по остаткам)
	
	Для Каждого КодАгрегата Из ТаблицаКодовАгрегата Цикл
		
		Если КодАгрегата.СоставПодтвержден = 3 Тогда
			Продолжить; //Чтобы не выводить сообщение несколько раз
		КонецЕсли;
		
		НайденныеВложенности = ТаблицаВложенности.НайтиСтроки(Новый Структура("КлючСтроки", КодАгрегата.КлючСтроки));
		Подтвержденные   = ТаблицаВложенности.НайтиСтроки(Новый Структура("Подтвержден, КлючСтроки", Истина, КодАгрегата.КлючСтроки));
		НеПодтвержденные = ТаблицаВложенности.НайтиСтроки(Новый Структура("Подтвержден, КлючСтроки", Ложь, КодАгрегата.КлючСтроки));
		ОбщееКоличество  = НайденныеВложенности.Количество();
		
		Если ОбщееКоличество = 0 Тогда
			КодАгрегата.СоставПодтвержден = 0;  //если по какой-то причине в таблицу попал код агрегата без развернутой вложенности
			Продолжить;
		КонецЕсли;
		
		Если ОбщееКоличество = Подтвержденные.Количество() Тогда
			КодАгрегата.СоставПодтвержден = 3;
			
			ТекстСообщения = НСтр("ru = 'Состав кода агрегата %1 полностью подтвержден.'");
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КодАгрегата.КодИдентификации);
			СформироватьСообщениеВПротокол(ТекстСообщения, 1);
			
		ИначеЕсли ОбщееКоличество = НеПодтвержденные.Количество() Тогда
			КодАгрегата.СоставПодтвержден = 1;
		Иначе
			КодАгрегата.СоставПодтвержден = 2;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура РазвернутьСоставКодаПоДаннымСервера(ЗаполняемаяСтрока, СтруктураКодовМаркировки, КодНеДобавлен)
	
	ДополнительныеПараметры = Новый Структура("КодМаркировки, КодИдентификации, ВидУпаковки, ВидПродукции, КлючСтрокиАгрегата, КодНеДобавлен", 
	                                          ЗаполняемаяСтрока.КодМаркировки, 
											  ЗаполняемаяСтрока.КодИдентификации, 
											  СтруктураКодовМаркировки.ВидУпаковки, 
											  СтруктураКодовМаркировки.ВидПродукции, 
											  ЗаполняемаяСтрока.КлючСтроки, 
											  КодНеДобавлен);
	ЗавершениеПолучитьИнформациюПоСоставуАгрегата = Новый ОписаниеОповещения("ЗавершениеПолучитьИнформациюПоСоставуАгрегата", ЭтаФорма, ДополнительныеПараметры);
	ПолучитьКлючАвторизации(ЗавершениеПолучитьИнформациюПоСоставуАгрегата, Истина);
	
	КодНеДобавлен = ДополнительныеПараметры.КодНеДобавлен; //вытаскиваем из параметров, заполненных в отложенном обработчике, т.к. значение могло измениться.

КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПолучитьИнформациюПоСоставуАгрегата(РезультатВыполнения, Параметры) Экспорт
	
	ТокенАвторизацииВрем = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
	Если ТокенАвторизацииВрем = Неопределено Тогда
		ТекстСообщенияСервисНедоступен = НСтр("ru = 'Не удалось получить токен сеанса для запроса состава агрегата сервера ИС МПТ.'")
									   + Символы.ПС
							  		   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВозможныеПричиныОшибкиТокена();
		ТекстСообщенияСервисНедоступен = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщенияСервисНедоступен, ПолучитьНаименованиеСервиса()); 
		СформироватьСообщениеВПротокол(ТекстСообщенияСервисНедоступен, 2);
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияКодАгрегатаНеБылДобавленВТаблицуСПараметром();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеАгрегата%", Параметры.КодИдентификации);
		СформироватьСообщениеВПротокол(ТекстСообщения, 3);
		КодНеДобавлен = Истина;
		Возврат;
	КонецЕсли;
	
	КодМаркировки      = Параметры.КодМаркировки;
	КодИдентификации   = Параметры.КодИдентификации;
	КлючСтрокиАгрегата = Параметры.КлючСтрокиАгрегата;
	ВидУпаковки        = Параметры.ВидУпаковки;
	ВидПродукции	   = Параметры.ВидПродукции;
	КодНеДобавлен 	   = Параметры.КодНеДобавлен;
	
	СтруктураЗапрос = Новый Структура("Штрихкод, ВидУпаковки, ВидПродукции, ФорматBase64", 
									  КодМаркировки, ВидУпаковки, ВидПродукции, Истина); //общие параметры у кодов одинаковые
										
	ДанныеПоГрупповомуКоду = ИнтеграцияИСМПТКВызовСервера.ЗапроситьДанныеПоКодуАгрегации(СтруктураЗапрос, Организация, ТокенАвторизацииВрем);	
	
	Если ЗначениеЗаполнено(ДанныеПоГрупповомуКоду.ТекстОшибки) Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось получить информацию по составу агрегата %1 с сервера ИС МПТ! Возможно, эта упаковка не принадлежит организации или сервер ИС МПТ в данный момент недоступен.'");
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КодИдентификации);
		СформироватьСообщениеВПротокол(ТекстСообщения, 2);
		
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияКодАгрегатаНеБылДобавленВТаблицуСПараметром();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеАгрегата%", КодИдентификации);
		СформироватьСообщениеВПротокол(ТекстСообщения, 3);
		
		//Если код не найден в ИС МПТ нужно сформировать сообщение об этом и удалить ранее добавленную строку кода агрегата.
		ТаблицаКодовАгрегата.Удалить(ТаблицаКодовАгрегата.НайтиСтроки(Новый Структура("КлючСтроки", КлючСтрокиАгрегата))[0]);
		
		КодНеДобавлен = Истина;
		Возврат;
	КонецЕсли;
	
	ВложенныеКоды = ДанныеПоГрупповомуКоду.ДанныеОбАгрегации[КодИдентификации];
	Если ВложенныеКоды = Неопределено И ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
		Если СтрНачинаетсяС(КодИдентификации, "(") Тогда 
			ВложенныеКоды = ДанныеПоГрупповомуКоду.ДанныеОбАгрегации[СтрШаблон("%1%2%3",
			Сред(КодИдентификации, 2, 2), Сред(КодИдентификации, 5,14), Сред(КодИдентификации, 23))];
		Иначе 
			ВложенныеКоды = ДанныеПоГрупповомуКоду.ДанныеОбАгрегации[СтрШаблон("(%1)%2(%3)%4",
			Сред(КодИдентификации, 1, 2), Сред(КодИдентификации, 3,14), Сред(КодИдентификации, 17,2), Сред(КодИдентификации, 19))];
		КонецЕсли;
	КонецЕсли;
	
	Если ВложенныеКоды = Неопределено 
		ИЛИ ВложенныеКоды.Количество() = 0 Тогда
		
		КодНеДобавлен = Истина;
		ТаблицаКодовАгрегата.Удалить(ТаблицаКодовАгрегата.НайтиСтроки(Новый Структура("КлючСтроки", КлючСтрокиАгрегата))[0]);
		
		ТекстСообщения = НСтр("ru = 'Не удалось получить состав кода агрегата %1 по данным сервера ИС МПТ. Возможно, данная упаковка не была зарегистрирована в системе.'")
		               + Символы.ПС
					   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияКодАгрегатаНеБылДобавленВТаблицуСПараметром();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеАгрегата%", КодИдентификации); 
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КодИдентификации);
		СформироватьСообщениеВПротокол(ТекстСообщения, 3);
	Иначе
		
		НомерСтрокиАгрегата = ТаблицаКодовАгрегата.НайтиСтроки(Новый Структура("КлючСтроки", КлючСтрокиАгрегата))[0].НомерСтроки;
		
		Для Каждого Вложенность Из ВложенныеКоды Цикл
			
			//Вложенные позиции добавляем в ТЧ вложенных КМ
			ДанныеШК = Новый Структура("Штрихкод, Количество, ФорматBase64",
										РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(Вложенность.Ключ),
										1, Истина);
			СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(ДанныеШК);
			
			//Если удалось разобрать код, вернется структура. Если нет - текст сообщения об ошибке.
			Если ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда
				ТекстСообщения = НСтр("ru = 'При получении с сервера не удалось разобрать код маркировки %1 (код агрегата %2). Код был добавлен в таблицу вложенностей без дополнительных сведений.'");
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Вложенность.Ключ, КодИдентификации);
				СформироватьСообщениеВПротокол(ТекстСообщения, 3);
				Продолжить;
			КонецЕсли;
									
			EAN  = СтруктураКодовМаркировки.EAN;
			ВидПродукции  = СтруктураКодовМаркировки.ВидПродукции;
			КодМаркировки = СтруктураКодовМаркировки.КодМаркировки;
			КодИдентификации = СтруктураКодовМаркировки.КодИдентификации;
			ВидУпаковки = СтруктураКодовМаркировки.ВидУпаковки;
			
			Если СтруктураКодовМаркировки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
				GTIN = СтруктураКодовМаркировки.GTINВерхнегоУровня;
			Иначе
				GTIN = СтруктураКодовМаркировки.GTIN;
			КонецЕсли;
			
			ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(EAN);
			Номенклатура   = ?(Не ДанныеНоменклатуры = Неопределено, ДанныеНоменклатуры.Номенклатура,   Неопределено);
			Характеристика = ?(Не ДанныеНоменклатуры = Неопределено, ДанныеНоменклатуры.Характеристика, Неопределено);
			
			//Если код не найден, выполняем его добавление в таблицу
			ЗаполняемаяСтрока = ТаблицаВложенности.Добавить();
			ЗаполняемаяСтрока.EAN  = EAN;
			ЗаполняемаяСтрока.GTIN = GTIN;
			ЗаполняемаяСтрока.Номенклатура   = Номенклатура;
			ЗаполняемаяСтрока.Характеристика = Характеристика;
			ЗаполняемаяСтрока.КодМаркировки  = КодМаркировки;
			ЗаполняемаяСтрока.КодИдентификации = КодИдентификации;
			ЗаполняемаяСтрока.ВидУпаковки 	 = ВидУпаковки;
			ЗаполняемаяСтрока.КлючСтроки  	 = КлючСтрокиАгрегата;
			ЗаполняемаяСтрока.НомерСтрокиАгрегата = НомерСтрокиАгрегата;
			
			//Выполняем запрос статуса кода с сервера и дозаполнеям данные в строке
			ДополнительныеПараметры = Новый Структура("КодИдентификации, ИмяТаблицы", КодИдентификации, "ТаблицаВложенности");
			ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере = Новый ОписаниеОповещения("ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере", ЭтаФорма, ДополнительныеПараметры);
			ВыполнитьОбработкуОповещения(ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере, ТокенАвторизацииВрем);
			
			ИнтерфейсИСМПТККлиентСервер.УстановитьИндексКартинкиТипаУпаковки(ЗаполняемаяСтрока);
									
		КонецЦикла;
	КонецЕсли;
	
	Если КодНеДобавлен Тогда
		//Если информацию по коду агрегата не удалось получить - запрос статуса выполнять не нужно. 
		//Также это не нужно делать при отмене подписи ЭЦП.
		Возврат;
	КонецЕсли;
	
	//Выполняем запрос статуса кода с сервера и дозаполняем данные в строке
	ДополнительныеПараметры = Новый Структура("КодИдентификации, ИмяТаблицы", Параметры.КодИдентификации, "ТаблицаКодовАгрегата");
	ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере = Новый ОписаниеОповещения("ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере", ЭтаФорма, ДополнительныеПараметры);

	ВыполнитьОбработкуОповещения(ЗавершениеПроверитьСостояниеКМПриДобавленииНаСервере, ТокенАвторизацииВрем);
	
	Элементы.ТаблицаКодовАгрегата.ТекущаяСтрока = ЗаполняемаяСтрока.ПолучитьИдентификатор();
	
	ТекстСообщения = НСтр("ru = 'Код агрегата %1 успешно добавлен.'");
	ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КодИдентификации);
	СформироватьСообщениеВПротокол(ТекстСообщения, 1);
	
	//После подтверждения вложенного кода нужно обновить сведения по заполненности упаковок.
	//Устанавливается цвет строки по подтвержденным вложенным позициям.
	ПроверитьИОбновитьСведенияУпаковок();
	УстановитьОтборПоАгрегату();
	УправлениеФормой();
		
КонецПроцедуры

&НаСервере
Процедура СформироватьСообщениеВПротокол(ТекстСообщения, ИндексВажности)
	
	НоваяСтрокаИнфо = ТаблицаИнформация.Добавить();
	ВремяПроверки = ПолучитьВремяПроверкиНаСервере();
	НоваяСтрокаИнфо.ВремяСобытия = ВремяПроверки;
	НоваяСтрокаИнфо.Сообщение 	 = ТекстСообщения;
	НоваяСтрокаИнфо.Важность 	 = ИндексВажности; //Где 0 - рядовое событие, 1 - успшное действие, 2 - очень важное событие, 3 - для информации.

	Элементы.ТаблицаИнформация.ТекущаяСтрока = НоваяСтрокаИнфо.ПолучитьИдентификатор();
	
КонецПроцедуры
	
#КонецОбласти

#Область Отборы

&НаКлиенте
Процедура УстановитьОтборПоАгрегату()

	//По умолчанию отбор устанавливается - это типовой вариант отображения данных.
	Если НеУстанавливатьОтборПоСтроке Тогда
		Элементы.ТаблицаВложенности.ОтборСтрок = Неопределено;
	Иначе
		ТекущиеДанныеАгрегата = Элементы.ТаблицаКодовАгрегата.ТекущиеДанные;
		Если ТекущиеДанныеАгрегата <> Неопределено Тогда
			УстановитьОтборТабличнойЧасти(Элементы.ТаблицаВложенности, Новый Структура("КлючСтроки", ТекущиеДанныеАгрегата.КлючСтроки));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборТабличнойЧасти(Таблица, Знач ДанныеОтбора, ДополнитьОтбор = Ложь)
	
	Если Не ДополнитьОтбор
		ИЛИ Таблица.ОтборСтрок = Неопределено Тогда
		Таблица.ОтборСтрок = Новый ФиксированнаяСтруктура(ДанныеОтбора);
	Иначе
		Для Каждого ЭлементСтруктурыОтбора Из Таблица.ОтборСтрок Цикл
			Если ДанныеОтбора.Свойство(ЭлементСтруктурыОтбора.Ключ) = Неопределено Тогда
				ДанныеОтбора.Вставить(ЭлементСтруктурыОтбора.Ключ, ЭлементСтруктурыОтбора.Значение);
			КонецЕсли;
		КонецЦикла;
		Таблица.ОтборСтрок = Новый ФиксированнаяСтруктура(ДанныеОтбора);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПроверитьНаличиеSSCCВДокументе(КодИдентификации)
	
	ТаблицаМарок = ТаблицаКодовАгрегата.Выгрузить();
	Возврат Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ВыполнитьПроверкуТранспортногоКодаПоДокументу(КодИдентификации, ТаблицаМарок); 
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОПроблемеЗапросаВалидностиКМ() Экспорт
	
	//Если по какой-то причине не удалось выполнить получение Токена, то и запрос на проверку статуса КМ не выполнялся,
	//об этом нужно предупредить и отметить непроверенные коды.
	Если ТокенАвторизацииВрем = Неопределено Тогда 
		СообщитьОНевозможностиВыполнитьПроверкуСтатусаКМ("Фоновый");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОНевозможностиВыполнитьПроверкуСтатусаКМ(РежимЗапроса) Экспорт

	Если РежимЗапроса = "Ручной" Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНевозможноВыполнитьПроверкуСтатусаКМ_Вручную();
	Иначе	
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНевозможноВыполнитьПроверкуСтатусаКМ_ВФоне();
	КонецЕсли;
	ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНаименованиеСервиса()

	Возврат ЭлектронноеВзаимодействиеССервисамиМаркировка.НаименованиеСервиса();
	
КонецФункции

#КонецОбласти
