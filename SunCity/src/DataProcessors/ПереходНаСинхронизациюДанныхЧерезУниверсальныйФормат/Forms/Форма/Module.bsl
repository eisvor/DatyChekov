
#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	Если Параметры.Свойство("НастройкаСинхронизацииДанных") Тогда
		Объект.НастройкаСинхронизацииДанных = Параметры.НастройкаСинхронизацииДанных;
	КонецЕсли;

	// Проверка прав
	Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Недостаточно прав для выполнения операции'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.НадписьГотово.Видимость = Ложь;
	Элементы.КомандаДалее.КнопкаПоУмолчанию = Истина;
	Если ЗначениеЗаполнено(Объект.НастройкаСинхронизацииДанных) Тогда
		Элементы.НастройкаСинхронизацииДанных.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// Устанавливаем текущую таблицу переходов
	ТаблицаПереходовПоСценарию();
	// Позиционируемся на первом шаге помощника
	УстановитьПорядковыйНомерПерехода(1);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Оповестить("Запись_УзелПланаОбмена");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияРезервнаяКопияНажатие(Элемент)
	// Резервная копия ИБ
	ОткрытьФорму("Обработка.РезервноеКопированиеИБ.Форма");
КонецПроцедуры 

&НаКлиенте
Процедура ДекорацияЖурналРегистрацииНажатие(Элемент)
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", Новый Структура("СобытиеЖурналаРегистрации", 
						НСтр("ru='Переход на синхронизацию данных через универсальный формат'")));
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОткрытьНастройкуНажатие(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.НастройкаСинхронизацииЧерезУниверсальныйФормат) Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФорму("ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ФормаОбъекта", 
				Новый Структура("Ключ", Объект.НастройкаСинхронизацииЧерезУниверсальныйФормат));
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура КомандаДалее(Команда)
	Если Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаПриветствие Тогда
		Если НЕ ЗначениеЗаполнено(Объект.НастройкаСинхронизацииДанных) Тогда
			ТекстСообщения = НСтр("ru='Не выбрана настройка синхронизации данных, с которой выполняется переход'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		ПодключитьОбработчикОжидания("ОбработчикОжиданияПереходНаНовуюНастройку", 0.1, Истина);
	КонецЕсли;
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияПереходовПомощника

// Процедура определяет таблицу переходов.
// Для заполнения таблицы переходов используется процедура ТаблицаПереходовНоваяСтрока()
//
&НаКлиенте
Процедура ТаблицаПереходовПоСценарию()
	
	ТаблицаПереходов.Очистить();
	
	СтраницыНавигации = ИменаСтраницНавигации();
	СтраницыНавигации.ИмяОсновнойСтраницы = "СтраницаПриветствие";
	СтраницыНавигации.ИмяСтраницыНавигации = "СтраницаНавигацииНачало";
	
	ТаблицаПереходовНоваяСтрока(1, СтраницыНавигации, "СтраницаПриветствие_ПриОткрытии");
	
	СтраницыНавигации = ИменаСтраницНавигации();
	СтраницыНавигации.ИмяОсновнойСтраницы = "СтраницыНавигации";
	СтраницыНавигации.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	
	ТаблицаПереходовНоваяСтрока(2, СтраницыНавигации);
	
	СтраницыНавигации = ИменаСтраницНавигации();
	СтраницыНавигации.ИмяОсновнойСтраницы = "СтраницаЗавершение";
	СтраницыНавигации.ИмяСтраницыНавигации = "СтраницаНавигацииОкончание";
	
	ТаблицаПереходовНоваяСтрока(3, СтраницыНавигации, "СтраницаЗавершение_ПриОткрытии");
	
КонецПроцедуры

// Добавляет новую строку в конец текущей таблицы переходов
//
// Параметры:
//
//  ПорядковыйНомерПерехода (обязательный) - Число. Порядковый номер перехода, который соответствует текущему шагу перехода
//  ИмяОсновнойСтраницы (обязательный) - Строка. Имя страницы панели "ПанельОсновная", которая соответствует текущему номеру перехода
//  ИмяСтраницыНавигации (обязательный) - Строка. Имя страницы панели "ПанельНавигации", которая соответствует текущему номеру перехода
//  ИмяСтраницыДекорации (необязательный) - Строка. Имя страницы панели "ПанельДекорации", которая соответствует текущему номеру перехода
//  ИмяОбработчикаПриОткрытии (необязательный) - Строка. Имя функции-обработчика события открытия текущей страницы помощника
//  ИмяОбработчикаПриПереходеДалее (необязательный) - Строка. Имя функции-обработчика события перехода на следующую страницу помощника
//  ИмяОбработчикаПриПереходеНазад (необязательный) - Строка. Имя функции-обработчика события перехода на предыдущую страницу помощника
// 
&НаСервере
Процедура ТаблицаПереходовНоваяСтрока(ПорядковыйНомерПерехода, Знач СтраницыНавигации, Знач ИмяОбработчикаПриОткрытии = "")
	
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = СтраницыНавигации.ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыНавигации    = СтраницыНавигации.ИмяСтраницыНавигации;
	
	НоваяСтрока.ИмяОбработчикаПриОткрытии = ИмяОбработчикаПриОткрытии;
	
КонецПроцедуры

&НаСервере
Функция ИменаСтраницНавигации()
	
	Возврат Новый Структура("ИмяОсновнойСтраницы, ИмяСтраницыНавигации", "", "");
КонецФункции

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	ПорядковыйНомерПерехода = Значение;
	Если ПорядковыйНомерПерехода < 0 Тогда
		ПорядковыйНомерПерехода = 0;
	КонецЕсли;
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов
	Если ЭтоПереходДалее Тогда
		СтруктураПоиска = Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1);
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеДалее
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее) Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
			
			Отказ = Ложь;
			
			Попытка
				Выполнить(ИмяПроцедуры);
			Исключение
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ПоказатьПредупреждение(,НСтр("ru = 'Операция не может быть выполнена по причине:'") + Символы.ПС + ТекстСообщения);
			КонецПопытки;
			
			
			Если Отказ Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		СтруктураПоиска = Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1);
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеНазад
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад) Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
			
			Отказ = Ложь;
			
			Попытка
				Выполнить(ИмяПроцедуры);
			Исключение
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ПоказатьПредупреждение(,НСтр("ru = 'Операция не может быть выполнена по причине:'") + Символы.ПС + ТекстСообщения);
			КонецПопытки;
			
			Если Отказ Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	СтруктураПоиска = Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода);
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		Попытка
			Выполнить(ИмяПроцедуры);
		Исключение
			ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
		Если Отказ Тогда
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			Возврат;
		ИначеЕсли ПропуститьСтраницу Тогда
			Если ЭтоПереходДалее Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
			Иначе
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Установка отображения текущей страницы
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийПерехода

// Обработчик выполняется при открытии страницы помощника "СтраницаЗавершение"
//
// Параметры:
//
//  Отказ – Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад)
//
//  ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад)
//
//  ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад.
//
&НаКлиенте
Процедура Подключаемый_СтраницаЗавершение_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	Элементы.НадписьГотово.Видимость = Истина;
	Элементы.КомандаГотово.КнопкаПоУмолчанию = Истина;
КонецПроцедуры

// Обработчик выполняется при открытии страницы помощника "СтраницаПриветствие"
//
// Параметры:
//
//  Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад)
//
//  ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад)
//
//  ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад.
//
&НаКлиенте
Процедура Подключаемый_СтраницаПриветствие_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	Элементы.КомандаДалее.КнопкаПоУмолчанию = Истина;
КонецПроцедуры
#КонецОбласти

////////////////////////////////////////////////////////////////////////////
// Процедуры, связанные с выполнением перехода на новый формат

&НаКлиенте
Процедура ОбработчикОжиданияПереходНаНовуюНастройку()
	
	ВыполнитьПереходНаНовуюНастройкуНаСервере();

	КомандаДалее(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПереходНаНовуюНастройкуНаСервере()
	ИмяТекущегоПланаОбмена = Объект.НастройкаСинхронизацииДанных.Метаданные().Имя;
	ИмяНовогоПланаОбмена = "СинхронизацияДанныхЧерезУниверсальныйФормат";
	Если НЕ ЗначениеЗаполнено(ИмяНовогоПланаОбмена) Тогда
		ТекстСообщения = НСтр("ru='Не удалось определить имя плана обмена для перехода.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПланОбменаМенеджер = ПланыОбмена["СинхронизацияДанныхЧерезУниверсальныйФормат"];
	НастройкаСтарая = Объект.НастройкаСинхронизацииДанных;
	Объект.НастройкаСинхронизацииЧерезУниверсальныйФормат = 
		ПланОбменаМенеджер.ВыполнитьПереходНаСинхронизациюДанныхЧерезУниверсальныйФормат(НастройкаСтарая);
	
	МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
	МодульОбменДаннымиСервер.ВыполнитьОбновлениеПравилДляОбменаДанными();
КонецПроцедуры
#КонецОбласти
