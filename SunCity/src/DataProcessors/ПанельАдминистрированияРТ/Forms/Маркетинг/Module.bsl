&НаКлиенте
Перем ОбновитьИнтерфейс;

#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОбработкаВопросаОбОчисткеПримененияЦен(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ОчиститьПримененияЦенВМагазинах(ДополнительныеПараметры.СписокМагазинов);
		НаборКонстант.ИспользоватьПрименениеЦен = Ложь;
		Подключаемый_ПриИзмененииРеквизита(Элементы.ИспользоватьПрименениеЦен);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНастройкиПодключенияКДисконтномуСерверу(Результат, ДополнительныеПараметры) Экспорт
	
	УстановитьДоступность("НаборКонстант.ИспользоватьДисконтныйСервер");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	// Обновление состояния элементов.
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбработчикОповещений(ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьЗаполнениеКонстант(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьИнтерфейсПрограммы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьЦеновыеГруппыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПрименениеЦенПриИзменении(Элемент)
	Если НЕ НаборКонстант.ИспользоватьПрименениеЦен Тогда
		СписокМагазинов = Новый СписокЗначений;
		ПроверитьИспользованиеПримененияЦенВМагазинах(СписокМагазинов);
		
		Если СписокМагазинов.Количество() = 0 Тогда
			Подключаемый_ПриИзмененииРеквизита(Элемент);
		Иначе
			ТекстВопроса = НСтр("ru = 'При прекращении использования механизма применения цен необходимо очистить признак использования применения цен в магазинах.
										|Выполнить очистку?'");
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("СписокМагазинов", СписокМагазинов);
			ОбработчикОповещения = Новый ОписаниеОповещения("ОбработкаВопросаОбОчисткеПримененияЦен", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			
			НаборКонстант.ИспользоватьПрименениеЦен = Истина;
		КонецЕсли;
	Иначе
		Подключаемый_ПриИзмененииРеквизита(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРучныеСкидкиВПродажахПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическиеСкидкиВПродажахПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАссортиментПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗапретРозничнойПродажиАлкоголяПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНеуникальныеКодыИнформационныхКартПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДисконтныйСерверПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОчередьДляПередачиДокументовДисконтномуСерверуПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьБонусныеПрограммыЛояльностиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСерверЛояльностиПоставщикДанныхПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьТоварныеКатегорииИКвотыАссортиментаПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура УстанавливатьВидыЦенВАссортиментеПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКомментарийНажатие(Элемент)
	
	ТекстСообщения = Элемент.Подсказка;
	ПоказатьПредупреждение(, ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеСегментовИспользуетсяПриИзменении(Элемент)
	
	ПустоеРасписание    = Новый РасписаниеРегламентногоЗадания;
	Использование 		= ФормированиеСегментовИспользуется;
	
	ИзменитьИспользованиеЗадания("ФормированиеСегментов", Использование, ИнтервалФормированияСегментов);
	
	Если Использование Тогда
		
		Если НЕ РазделениеВключено Тогда
			НастроитьРасписаниеФормированияСегменов(Команды.НастроитьРасписаниеФормированияСегменов)
		ИначеЕсли ОбщегоНазначенияКлиентСервер.РасписанияОдинаковые(РасписаниеРегламентаФормированияСегментов, ПустоеРасписание) Тогда
			ИнтервалФормированияСегментовПриИзменении(Элементы.ИнтервалФормированияСегментов);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаСегментовИспользуетсяПриИзменении(Элемент)
	
	ПустоеРасписание    = Новый РасписаниеРегламентногоЗадания;
	Использование 		= ОчисткаСегментовИспользуется;
	
	ИзменитьИспользованиеЗадания("ОчисткаСегментов", Использование, ИнтервалОчисткиСегмента);
	
	Если Использование Тогда
		
		Если НЕ РазделениеВключено Тогда
			НастроитьРасписаниеФормированияСегменов(Команды.НастроитьРасписаниеОчисткиСегмента)
		ИначеЕсли ОбщегоНазначенияКлиентСервер.РасписанияОдинаковые(РасписаниеРегламентаОчисткаСегмента, ПустоеРасписание) Тогда
			ИнтервалФормированияСегментовПриИзменении(Элементы.ИнтервалОчисткиСегмента);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалФормированияСегментовПриИзменении(Элемент)
	
	ЗаполнитьРасписаниеРегламентногоЗадания(РасписаниеРегламентаФормированияСегментов, ИнтервалФормированияСегментов);
	ИзменитьРасписаниеЗадания("ФормированиеСегментов", РасписаниеРегламентаФормированияСегментов, ИнтервалФормированияСегментов);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалОчисткиСегментаПриИзменении(Элемент)
	
	ЗаполнитьРасписаниеРегламентногоЗадания(РасписаниеРегламентаОчисткаСегмента, ИнтервалОчисткиСегмента);
	ИзменитьРасписаниеЗадания("ОчисткаСегментов", РасписаниеРегламентаОчисткаСегмента, ИнтервалОчисткиСегмента);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастройкиУправленияАссортиментом(Команда)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Обработка.ПомощникНачалаУправленияАссортиментом.Форма.Форма.Открытие");

	ОткрытьФорму("Обработка.ПомощникНачалаУправленияАссортиментом.Форма");
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколПередачиПродажДисконтномуСерверу(Команда)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "РегистрСведений.ПротоколПередачиДокументовДисконтномуСерверу.Форма.ФормаСписка.Открытие");
             
	ОткрытьФорму("РегистрСведений.ПротоколПередачиДокументовДисконтномуСерверу.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПодключенияКДисконтномуСерверу(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ОбработкаОповещения = Новый ОписаниеОповещения(
		"ОбработкаНастройкиПодключенияКДисконтномуСерверу",
		ЭтотОбъект,
		ДополнительныеПараметры);
        
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Истина, "ОбщаяФорма.НастройкаПодключенияКДисконтномуСерверу.Открытие");
        
	ОткрытьФорму(
		"ОбщаяФорма.НастройкаПодключенияКДисконтномуСерверу",
		,
		ЭтаФорма,
		,
		,
		,
		ОбработкаОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРегламентаСервераЛояльности(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеРегламентаСервераЛояльности", ЭтотОбъект);
	
	ОткрытьДиалогРасписания(ОписаниеОповещения, РасписаниеРегламентаСервераЛояльности);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеФормированияСегменов(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеФормированияСегментов", ЭтотОбъект);
	
	ОткрытьДиалогРасписания(ОписаниеОповещения, РасписаниеРегламентаФормированияСегментов);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеОчисткиСегментов(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеОчисткиСегментов", ЭтотОбъект);
	
	ОткрытьДиалогРасписания(ОписаниеОповещения, РасписаниеРегламентаОчисткаСегмента);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументВводОстатковПоНакопительнымСкидкамОткрытьСписок(Команда)
	
	ОткрытьФорму("Документ.ВводОстатковПоНакопительнымСкидкам.ФормаСписка");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	Результат = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если Результат = "ИспользоватьЗапретРозничнойПродажиАлкоголя" Тогда
		
		ЗначениеПризнака = НаборКонстант.ИспользоватьЗапретРозничнойПродажиАлкоголя;
		ОбщегоНазначенияРМККлиент.ОповеститьОбИзмененииПризнакаИспользованияПоставляемыхОграниченийПродаж(ЗначениеПризнака);
		
	КонецЕсли;
	
	Если ОбновлятьИнтерфейс Тогда
		#Если НЕ ВебКлиент Тогда
			ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
			ОбновитьИнтерфейс = Истина;
		#КонецЕсли
	КонецЕсли;
	
	Если Результат <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	#Если НЕ ВебКлиент Тогда
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

// Обработка оповещений от других открытых форм.
//
// Пример:
//   Если ИмяСобытия = "НаборКонстант.ПрефиксУзлаРаспределеннойИнформационнойБазы" Тогда
//     НаборКонстант.ПрефиксУзлаРаспределеннойИнформационнойБазы = Параметр;
//   КонецЕсли;
//
&НаКлиенте
Процедура ОбработчикОповещений(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_НаборКонстант" Тогда
		УстановитьДоступность();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	Результат = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Определение имени константы.
	КонстантаИмя = "";
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат КонстантаИмя;
	КонецЕсли;
	
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	ИспользоватьСинхронизациюДанных = Константы.ИспользоватьСинхронизациюДанных.Получить();
	ДоступностьДисконтногоСервера = НЕ Элементы.ИспользоватьДисконтныйСервер.ТолькоПросмотр;
	ДоступностьНастройкиДисконтногоСервера = Элементы.ГруппаНастройкиДисконтногоСервера.Доступность;
	БлокироватьАвтоматическиеСкидки = Элементы.ИспользоватьАвтоматическиеСкидкиВПродажах.ТолькоПросмотр;
	БлокироватьАссортимент = Элементы.ИспользоватьАссортимент.ТолькоПросмотр;
	
	ДоступностьЗапретаПродаж = Истина;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьАссортимент" Тогда
		
		Элементы.ГруппаУправлениеАссортиментомПомощник.Доступность = НаборКонстант.ИспользоватьАссортимент;
		Элементы.ГруппаУправлениеАссортиментомДополнительно.Доступность = НаборКонстант.ИспользоватьАссортимент;
		
	ИначеЕсли РеквизитПутьКДанным = "НаборКонстант.ИспользоватьДисконтныйСервер" Тогда
		
		ДоступностьДисконтногоСервера = НаборКонстант.ИспользоватьАвтоматическиеСкидкиВПродажах
											И ИспользоватьСинхронизациюДанных;
		ДоступностьНастройкиДисконтногоСервера = НаборКонстант.ИспользоватьДисконтныйСервер
													И ИспользоватьСинхронизациюДанных;
		Элементы.ГруппаНастройкиДисконтногоСервера.Доступность = ДоступностьНастройкиДисконтногоСервера;
		Элементы.ГруппаВключенияОчередиДисконтногоСервера.Доступность = ДоступностьНастройкиДисконтногоСервера;
		
		БлокироватьАвтоматическиеСкидки = НаборКонстант.ИспользоватьДисконтныйСервер
											ИЛИ НаборКонстант.ИспользоватьБонусныеПрограммыЛояльности
											ИЛИ НаборКонстант.ИспользоватьЗапретРозничнойПродажиАлкоголя;
		
	ИначеЕсли РеквизитПутьКДанным = "НаборКонстант.ИспользоватьБонусныеПрограммыЛояльности" Тогда
		
		ДоступностьДисконтногоСервера = НаборКонстант.ИспользоватьАвтоматическиеСкидкиВПродажах
											И ИспользоватьСинхронизациюДанных;
		ДоступностьНастройкиДисконтногоСервера = НаборКонстант.ИспользоватьДисконтныйСервер
													И НаборКонстант.ИспользоватьАвтоматическиеСкидкиВПродажах
													И ИспользоватьСинхронизациюДанных;
		
		БлокироватьАвтоматическиеСкидки = НаборКонстант.ИспользоватьДисконтныйСервер
											ИЛИ НаборКонстант.ИспользоватьБонусныеПрограммыЛояльности
											ИЛИ НаборКонстант.ИспользоватьЗапретРозничнойПродажиАлкоголя;
											
		Если НаборКонстант.ИспользоватьБонусныеПрограммыЛояльности Тогда 
			Элементы.СерверЛояльностиОбработкаСостоянияБонусовПодарочныхСертификатов.Доступность = Истина;
		Иначе
			Элементы.СерверЛояльностиОбработкаСостоянияБонусовПодарочныхСертификатов.Доступность = Ложь;
			НаборКонстант.ИспользоватьСерверЛояльностиПоставщикДанных = Ложь;
			СохранитьЗначениеРеквизита("НаборКонстант.ИспользоватьСерверЛояльностиПоставщикДанных");
			
			Если НЕ РазделениеВключено Тогда
				ИзменитьИспользованиеЗадания("СерверЛояльностиОбработкаСостоянияБонусовПодарочныхСертификатов", НаборКонстант.ИспользоватьСерверЛояльностиПоставщикДанных);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "НаборКонстант.ИспользоватьСерверЛояльностиПоставщикДанных" Тогда
		
		Элементы.СерверЛояльностиОбработкаСостоянияБонусовПодарочныхСертификатов.Доступность = НаборКонстант.ИспользоватьСерверЛояльностиПоставщикДанных;
		
		Если НЕ РазделениеВключено Тогда
			ИзменитьИспользованиеЗадания("СерверЛояльностиОбработкаСостоянияБонусовПодарочныхСертификатов", НаборКонстант.ИспользоватьСерверЛояльностиПоставщикДанных);
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "НаборКонстант.ИспользоватьАвтоматическиеСкидкиВПродажах" Тогда
		
		ДоступностьДисконтногоСервера = НаборКонстант.ИспользоватьАвтоматическиеСкидкиВПродажах
											И ИспользоватьСинхронизациюДанных;
		ДоступностьНастройкиДисконтногоСервера = НаборКонстант.ИспользоватьДисконтныйСервер
													И НаборКонстант.ИспользоватьАвтоматическиеСкидкиВПродажах
													И ИспользоватьСинхронизациюДанных;
		
		Элементы.ИспользоватьБонусныеПрограммыЛояльности.ТолькоПросмотр = НЕ НаборКонстант.ИспользоватьАвтоматическиеСкидкиВПродажах;
		
		Если НЕ НаборКонстант.ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
			ДоступностьЗапретаПродаж = Ложь;
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "НаборКонстант.ИспользоватьТоварныеКатегорииИКвотыАссортимента" Тогда
		БлокироватьАссортимент = НаборКонстант.ИспользоватьТоварныеКатегорииИКвотыАссортимента
									ИЛИ НаборКонстант.УстанавливатьВидыЦенВАссортименте;
									
	ИначеЕсли РеквизитПутьКДанным = "НаборКонстант.УстанавливатьВидыЦенВАссортименте" Тогда
		БлокироватьАссортимент = НаборКонстант.ИспользоватьТоварныеКатегорииИКвотыАссортимента
									ИЛИ НаборКонстант.УстанавливатьВидыЦенВАссортименте;
									
	ИначеЕсли РеквизитПутьКДанным = "" Тогда
		
		Элементы.НастройкиУправленияАссортиментом.Доступность = НаборКонстант.ИспользоватьАссортимент;
		ДоступностьДисконтногоСервера = НаборКонстант.ИспользоватьАвтоматическиеСкидкиВПродажах
											И ИспользоватьСинхронизациюДанных;
		ДоступностьНастройкиДисконтногоСервера = НаборКонстант.ИспользоватьДисконтныйСервер
													И НаборКонстант.ИспользоватьАвтоматическиеСкидкиВПродажах
													И ИспользоватьСинхронизациюДанных;
		
		БлокироватьАвтоматическиеСкидки = НаборКонстант.ИспользоватьДисконтныйСервер
											ИЛИ НаборКонстант.ИспользоватьБонусныеПрограммыЛояльности
											ИЛИ НаборКонстант.ИспользоватьЗапретРозничнойПродажиАлкоголя;
											
		БлокироватьАссортимент = НаборКонстант.ИспользоватьТоварныеКатегорииИКвотыАссортимента
									ИЛИ НаборКонстант.УстанавливатьВидыЦенВАссортименте;
									
		Элементы.ИспользоватьБонусныеПрограммыЛояльности.ТолькоПросмотр = НЕ НаборКонстант.ИспользоватьАвтоматическиеСкидкиВПродажах;
		
		Если НЕ НаборКонстант.ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
			ДоступностьЗапретаПродаж = Ложь;
		КонецЕсли;
		
		Элементы.ГруппаУправлениеАссортиментомПомощник.Доступность = НаборКонстант.ИспользоватьАссортимент;
		Элементы.ГруппаУправлениеАссортиментомДополнительно.Доступность = НаборКонстант.ИспользоватьАссортимент;
		
		Элементы.ИспользоватьСерверЛояльностиПоставщикДанных.Доступность 				= НаборКонстант.ИспользоватьБонусныеПрограммыЛояльности;
		Элементы.ДекорацияКомментарийСерверЛояльности.Видимость			= Не НаборКонстант.ИспользоватьБонусныеПрограммыЛояльности;
		Элементы.СерверЛояльностиОбработкаСостоянияБонусовПодарочныхСертификатов.Доступность 	= НаборКонстант.ИспользоватьСерверЛояльностиПоставщикДанных;
		
	КонецЕсли;
	
	Элементы.ИспользоватьДисконтныйСервер.ТолькоПросмотр = НЕ ДоступностьДисконтногоСервера;
	
	Элементы.ДекорацияКомментарийДисконтныйСервер.Видимость = ?(ДоступностьДисконтногоСервера, Ложь, Истина);
	
	Если НЕ ДоступностьДисконтногоСервера Тогда
		Если НаборКонстант.ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
			ТекстПодсказки = НСтр("ru = 'Невозможно использовать дисконтный сервер, потому что'")
				+ Символы.ПС + НСтр("ru = 'выключена синхронизация данных в разделе «Синхронизация данных».'");
		ИначеЕсли Константы.ИспользоватьСинхронизациюДанных.Получить() Тогда
			ТекстПодсказки = НСтр("ru = 'Невозможно использовать дисконтный сервер, потому'")
				+ Символы.ПС + НСтр("ru = 'что выключены скидки, наценки и ограничения продаж'");
		Иначе
			ТекстПодсказки = НСтр("ru = 'Невозможно использовать дисконтный сервер, потому'")
				+ Символы.ПС + НСтр("ru = 'что выключены скидки, наценки и ограничения продаж'")
				+ Символы.ПС + НСтр("ru = 'и синхронизация данных в разделе «Синхронизация данных».'");
		КонецЕсли;
		Элементы.ДекорацияКомментарийДисконтныйСервер.Подсказка = ТекстПодсказки;
	КонецЕсли;
	
	Элементы.ГруппаНастройкиДисконтногоСервера.Доступность = ДоступностьНастройкиДисконтногоСервера;
	Элементы.ГруппаВключенияОчередиДисконтногоСервера.Доступность = ДоступностьНастройкиДисконтногоСервера;
	Если ДоступностьНастройкиДисконтногоСервера Тогда
		Если ЗначениеЗаполнено(Константы.АдресДисконтногоСервера.Получить()) Тогда
			Элементы.НастройкаПодключенияКДисконтномуСерверу.ЦветТекста =  Новый Цвет();
		Иначе
			Элементы.НастройкаПодключенияКДисконтномуСерверу.ЦветТекста = Новый Цвет(255, 0, 0);
		КонецЕсли;
	Иначе
		Элементы.НастройкаПодключенияКДисконтномуСерверу.ЦветТекста = Новый Цвет();
	КонецЕсли;
	
	// Скидки.
	Если БлокироватьАвтоматическиеСкидки Тогда
		
		Элементы.ДекорацияКомментарийАвтоматическиеСкидкиВПродажах.Видимость = Истина;
		
		ТекстПодсказки =  НСтр("ru = 'Невозможно отключить скидки (наценки, ограничения), потому'");
		СчетчикУсловийБлокировки = 0;
		Если НаборКонстант.ИспользоватьБонусныеПрограммыЛояльности Тогда
			ТекстПодсказки = ТекстПодсказки + Символы.ПС
				+ НСтр("ru = 'что включены бонусные программы лояльности'");
			СчетчикУсловийБлокировки = СчетчикУсловийБлокировки + 1;
		КонецЕсли;
		
		Если НаборКонстант.ИспользоватьДисконтныйСервер Тогда
			Если СчетчикУсловийБлокировки = 0 Тогда
				ТекстПодсказки = ТекстПодсказки + Символы.ПС
					+ НСтр("ru = 'что включено подключение к дисконтному серверу'");
			Иначе
				ТекстПодсказки = ТекстПодсказки + Символы.ПС
					+ НСтр("ru = 'и подключение к дисконтному серверу'");
			КонецЕсли;
			СчетчикУсловийБлокировки = СчетчикУсловийБлокировки + 1;
		КонецЕсли;
		
		Если НаборКонстант.ИспользоватьЗапретРозничнойПродажиАлкоголя Тогда
			Если СчетчикУсловийБлокировки = 0 Тогда
				ТекстПодсказки = ТекстПодсказки + Символы.ПС
					+ НСтр("ru = 'что включен запрет розничной продажи'");
			Иначе
				ТекстПодсказки = ТекстПодсказки + Символы.ПС
					+ НСтр("ru = 'и запрет розничной продажи'");
			КонецЕсли;
			СчетчикУсловийБлокировки = СчетчикУсловийБлокировки + 1;
		КонецЕсли;
		Элементы.ДекорацияКомментарийАвтоматическиеСкидкиВПродажах.Подсказка = ТекстПодсказки;
		
	Иначе
		Элементы.ДекорацияКомментарийАвтоматическиеСкидкиВПродажах.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ИспользоватьАвтоматическиеСкидкиВПродажах.ТолькоПросмотр = БлокироватьАвтоматическиеСкидки;
	
	Элементы.ДекорацияКомментарийБонусныеПрограммыЛояльности.Видимость = ?(НаборКонстант.ИспользоватьАвтоматическиеСкидкиВПродажах, Ложь, Истина);
	
	Если ДоступностьЗапретаПродаж Тогда
		
		Элементы.ИспользоватьЗапретРозничнойПродажиАлкоголя.ТолькоПросмотр = Ложь;
		Элементы.ДекорацияКомментарийЗапретРозничнойПродажиАлкоголя.Видимость = Ложь;
		
	Иначе
		ТекстПодсказки =  НСтр("ru = 'Невозможно включить запрет розничной продажи,'");
		ТекстПодсказки = ТекстПодсказки + Символы.ПС
				+ НСтр("ru = 'потому что выключены ""Скидки, наценки и ограничения продаж""'");
		Элементы.ДекорацияКомментарийЗапретРозничнойПродажиАлкоголя.Подсказка = ТекстПодсказки;
		
		Элементы.ИспользоватьЗапретРозничнойПродажиАлкоголя.ТолькоПросмотр = Истина;
				
		Элементы.ДекорацияКомментарийЗапретРозничнойПродажиАлкоголя.Видимость = Истина;

	КонецЕсли;
	
	// Ассортимент.
	Если БлокироватьАссортимент Тогда
		ТекстПодсказки =  НСтр("ru = 'Невозможно отключить управление ассортиментом, потому'");
		СчетчикУсловийБлокировки = 0;
		Если НаборКонстант.ИспользоватьТоварныеКатегорииИКвотыАссортимента Тогда
			ТекстПодсказки = ТекстПодсказки + Символы.ПС
				+ НСтр("ru = 'что включены товарные категории и квоты ассортимента'");
			СчетчикУсловийБлокировки = СчетчикУсловийБлокировки + 1;
		КонецЕсли;
		
		Если НаборКонстант.УстанавливатьВидыЦенВАссортименте Тогда
			Если СчетчикУсловийБлокировки = 0 Тогда
				ТекстПодсказки = ТекстПодсказки + Символы.ПС
					+ НСтр("ru = 'что включена установка видов цен в ассортименте'");
			Иначе
				ТекстПодсказки = ТекстПодсказки + "," + Символы.ПС
					+ НСтр("ru = 'а также установка видов цен в ассортименте'");
			КонецЕсли;
			СчетчикУсловийБлокировки = СчетчикУсловийБлокировки + 1;
		КонецЕсли;
		
		Элементы.ДекорацияКомментарийАссортимент.Подсказка = ТекстПодсказки;
		Элементы.ДекорацияКомментарийАссортимент.Видимость = Истина;
	Иначе
		
		Элементы.ДекорацияКомментарийАссортимент.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ИспользоватьАссортимент.ТолькоПросмотр = БлокироватьАссортимент;
	
	Если РеквизитПутьКДанным = "" Тогда
		
		Если ИспользоватьСинхронизациюДанных Тогда
			Если ОбменДаннымиРТ.ЭтоПодчиненныйУзелПоМагазину() Тогда
				
				Элементы.ИспользоватьЦеновыеГруппы.ТолькоПросмотр 					= Истина;
				Элементы.ИспользоватьПрименениеЦен.ТолькоПросмотр 					= Истина;
				Элементы.ИспользоватьРучныеСкидкиВПродажах.ТолькоПросмотр 			= Истина;
				Элементы.ИспользоватьАвтоматическиеСкидкиВПродажах.ТолькоПросмотр 	= Истина;
				Элементы.ИспользоватьБонусныеПрограммыЛояльности.ТолькоПросмотр 	= Истина;
				Элементы.ИспользоватьАссортимент.ТолькоПросмотр 					= Истина;
				Элементы.НастройкиУправленияАссортиментом.Доступность 				= Ложь;
				Элементы.ГруппаУправлениеАссортиментомДополнительно.Доступность 	= Ложь;
				Элементы.ИспользоватьЗапретРозничнойПродажиАлкоголя.ТолькоПросмотр  = Истина;
				Элементы.ИспользоватьНеуникальныеКодыИнформационныхКарт.ТолькоПросмотр = Истина;
				
			ИначеЕсли ОбменДаннымиРТ.ЭтоПодчиненныйУзелПоРабочемуМесту() Тогда
				
				Элементы.ИспользоватьРучныеСкидкиВПродажах.ТолькоПросмотр 			= Истина;
				Элементы.ИспользоватьАвтоматическиеСкидкиВПродажах.ТолькоПросмотр 	= Истина;
				Элементы.ИспользоватьБонусныеПрограммыЛояльности.ТолькоПросмотр 	= Истина;
				Элементы.ИспользоватьЦеновыеГруппы.ТолькоПросмотр 					= Истина;
				Элементы.ИспользоватьПрименениеЦен.ТолькоПросмотр 					= Истина;
				Элементы.ИспользоватьАссортимент.ТолькоПросмотр 					= Истина;
				Элементы.НастройкиУправленияАссортиментом.Доступность 				= Ложь;
				Элементы.ГруппаУправлениеАссортиментомДополнительно.Доступность 	= Ложь;
				Элементы.ИспользоватьЗапретРозничнойПродажиАлкоголя.ТолькоПросмотр  = Истина;
				Элементы.ИспользоватьНеуникальныеКодыИнформационныхКарт.ТолькоПросмотр = Истина;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьНастройкиЗаданий()
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИспользованиеПримененияЦенВМагазинах(СписокМагазинов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Магазины.Ссылка КАК Магазин
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	Магазины.ИспользоватьПрименениеЦен
	|	И НЕ Магазины.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СписокМагазинов.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку("Магазин"));
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПримененияЦенВМагазинах(СписокМагазинов)
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.Магазины");
	Блокировка.Заблокировать();
	
	Попытка
		
		Для Каждого Магазин Из СписокМагазинов Цикл
			МагазинОбъект = Магазин.Значение.ПолучитьОбъект();
			МагазинОбъект.Заблокировать();
			МагазинОбъект.ИспользоватьПрименениеЦен = Ложь;
			МагазинОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеКонстант(Отказ)
	
	Если Константы.ИспользоватьДисконтныйСервер.Получить()
		И НЕ ЗначениеЗаполнено(Константы.АдресДисконтногоСервера.Получить()) Тогда
		СтрокаСообщения = НСтр("ru = 'Не заполнен адрес дисконтного сервера'");
		ОбщегоНазначения.СообщитьПользователю(СтрокаСообщения, , "НастройкаПодключенияКДисконтномуСерверу");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДиалогРасписания(ОписаниеОповещения, РасписаниеРегламентногоЗадания)
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеРегламентаСервераЛояльности(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеРегламентаСервераЛояльности = РасписаниеЗадания;
	
	ИзменитьРасписаниеЗадания("СерверЛояльностиОбработкаСостоянияБонусовПодарочныхСертификатов", РасписаниеРегламентаСервераЛояльности);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеФормированияСегментов(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("РасписаниеРегламентногоЗадания") Тогда
		
		РасписаниеРегламентаФормированияСегментов = Результат;
		
		ИзменитьРасписаниеЗадания("ФормированиеСегментов", РасписаниеРегламентаФормированияСегментов, ИнтервалФормированияСегментов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеОчисткиСегментов(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("РасписаниеРегламентногоЗадания") Тогда
		
		РасписаниеРегламентаОчисткаСегмента = Результат;
		
		ИзменитьРасписаниеЗадания("ОчисткаСегментов", РасписаниеРегламентаОчисткаСегмента, ИнтервалОчисткиСегмента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРасписаниеЗадания(ИмяЗадания, РасписаниеРегламентногоЗадания, Интервал = Неопределено)
	
	
	ПустоеЗадание    = Ложь;
	РегЗадание 		 = НайтиЗадания(ИмяЗадания, ПустоеЗадание);

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Расписание", РасписаниеРегламентногоЗадания);
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания[ИмяЗадания]);
		
	ИзменитьЗадание(РегЗадание, ПараметрыЗадания, ПустоеЗадание);
	
	РегЗадание 	= НайтиЗадания(ИмяЗадания);
	Элемент 	= Элементы[ИмяЗадания];
	
	Если ИмяЗадания = "ФормированиеСегментов"
		ИЛИ ИмяЗадания = "ОчисткаСегментов" Тогда
		УстановитьТекстНадписиРегламентнойНастройки(РегЗадание, Элемент, Истина, Интервал);
	Иначе
		УстановитьТекстНадписиРегламентнойНастройки(РегЗадание, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстНадписиРегламентнойНастройки(Задание, Элемент, РасширеннаяНастройка = Ложь, Интервал=Неопределено)
	
	Перем ТекстРасписания, РасписаниеАктивно;
	
	ПустоеРасписание = Новый РасписаниеРегламентногоЗадания;		
	
	Если РасширеннаяНастройка Тогда
		
		ПолучитьТекстЗаголовкаИРасписанияРегламентнойНастройкиСУчетомРазделения(Задание, ТекстРасписания);
		
		Если РазделениеВключено Тогда
			Интервал = ТекстРасписания;
		Иначе
			Элемент.Заголовок = ТекстРасписания;
		КонецЕсли;
		
	Иначе
		
		Если Задание <> Неопределено
			И ОбщегоНазначенияКлиентСервер.РасписанияОдинаковые(Задание.Расписание, ПустоеРасписание) Тогда
			РегламентныеЗаданияРТ.ПолучитьТекстЗаголовкаИРасписанияРегламентнойНастройки(Неопределено, ТекстРасписания, РасписаниеАктивно);
		Иначе
			РегламентныеЗаданияРТ.ПолучитьТекстЗаголовкаИРасписанияРегламентнойНастройки(Задание, ТекстРасписания, РасписаниеАктивно);
		КонецЕсли;
		
		Элемент.Заголовок = ТекстРасписания;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиЗаданий()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаданиеСерверЛояльностиОбработкаСостоянияБонусовПодарочныхСертификатов = НайтиЗадания("СерверЛояльностиОбработкаСостоянияБонусовПодарочныхСертификатов");
	ЗаданиеФормированиеСегментов 					 					   = НайтиЗадания("ФормированиеСегментов");
	ЗаданиеОчисткаСегментов 						 					   = НайтиЗадания("ОчисткаСегментов");
	
	РасписаниеРегламентаСервераЛояльности 	  = ЗаданиеСерверЛояльностиОбработкаСостоянияБонусовПодарочныхСертификатов.Расписание;
	
	РасписаниеРегламентаФормированияСегментов = ЗаданиеФормированиеСегментов.Расписание;
	ФормированиеСегментовИспользуется		  = ЗаданиеФормированиеСегментов.Использование;
	
	РасписаниеРегламентаОчисткаСегмента 	  = ЗаданиеОчисткаСегментов.Расписание;
	ОчисткаСегментовИспользуется			  = ЗаданиеОчисткаСегментов.Использование;
	
	УстановитьТекстНадписиРегламентнойНастройки(ЗаданиеСерверЛояльностиОбработкаСостоянияБонусовПодарочныхСертификатов, Элементы.СерверЛояльностиОбработкаСостоянияБонусовПодарочныхСертификатов);
	УстановитьТекстНадписиРегламентнойНастройки(ЗаданиеФормированиеСегментов, Элементы.ФормированиеСегментов, Истина, ИнтервалФормированияСегментов);
	УстановитьТекстНадписиРегламентнойНастройки(ЗаданиеОчисткаСегментов, Элементы.ОчисткаСегментов, Истина, ИнтервалОчисткиСегмента);
	
	НастроитьЭлементыНастройкиРасписаний();
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаСервере
Процедура ИзменитьИспользованиеЗадания(ИмяЗадания, Использование, Интервал = Неопределено)
	
	ПустоеЗадание    = Ложь;
	РегЗадание 		 = НайтиЗадания(ИмяЗадания, ПустоеЗадание);

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", 	Истина И Использование);
	ПараметрыЗадания.Вставить("Метаданные", 	Метаданные.РегламентныеЗадания[ИмяЗадания]);
		
	ИзменитьЗадание(РегЗадание, ПараметрыЗадания, ПустоеЗадание);
	
	РегЗадание 		 = НайтиЗадания(ИмяЗадания);
	Элемент 		 = Элементы[ИмяЗадания];
	
	Если ИмяЗадания = "ФормированиеСегментов"
		ИЛИ ИмяЗадания = "ОчисткаСегментов" Тогда
		УстановитьТекстНадписиРегламентнойНастройки(РегЗадание, Элемент, Истина, Интервал);
	Иначе
		УстановитьТекстНадписиРегламентнойНастройки(РегЗадание, Элемент);
	КонецЕсли;
	
	НастроитьЭлементыНастройкиРасписаний();
	
КонецПроцедуры

&НаКлиенте
// Заполняет значения расписания регламентного задания.
//
Процедура ЗаполнитьРасписаниеРегламентногоЗадания(РасписаниеРегламентногоЗадания, Интервал)
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);

	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	ПериодПовтораВТечениеДня = 0;
	ПериодНедель			 = 1;
	ДеньВМесяце				 = 0;
	
	Если Интервал = "Один раз в неделю" Тогда
		
		ДниНедели = Новый Массив;
		ДниНедели.Добавить(7);
		
	ИначеЕсли Интервал = "Один раз в месяц" Тогда
		
		ДеньВМесяце			 = -1;
		
	ИначеЕсли Интервал <> "Один раз в день" Тогда
		
		ПериодПовтораВТечениеДня = ПолучитьПериодПовтораВТечениеДня(Интервал);
		
	КонецЕсли;
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.Месяцы					= Месяцы;
	Расписание.ДниНедели				= ДниНедели;
	Расписание.ПериодПовтораВТечениеДня = ПериодПовтораВТечениеДня; // секунды
	Расписание.ПериодПовтораДней		= 1; // каждый день
	Расписание.ПериодНедель			 	= ПериодНедель;
	Расписание.ДеньВМесяце				= ДеньВМесяце;
		
	РасписаниеРегламентногоЗадания = Расписание;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТекстЗаголовкаИРасписанияРегламентнойНастройкиСУчетомРазделения(Задание, ТекстЗаголовка)
	
	ПустоеРасписание = Новый РасписаниеРегламентногоЗадания;		
	
	Если Не РазделениеВключено Тогда
		
		Если Задание = Неопределено 
			ИЛИ ОбщегоНазначенияКлиентСервер.РасписанияОдинаковые(Задание.Расписание, ПустоеРасписание) Тогда
			ТекстЗаголовка = НСтр("ru='Настроить расписание'");
		Иначе
			ТекстЗаголовка = Задание.Расписание;
		КонецЕсли;
		
	Иначе
		
		Если Задание = Неопределено
			ИЛИ ОбщегоНазначенияКлиентСервер.РасписанияОдинаковые(Задание.Расписание, ПустоеРасписание) Тогда
			
			ТекстЗаголовка = НСтр("ru = 'Один раз в месяц'");
			
		ИначеЕсли Задание.Расписание.ДеньВМесяце = -1 Тогда
			
			ТекстЗаголовка = НСтр("ru = 'Один раз в месяц'");
			
		ИначеЕсли Задание.Расписание.ДниНедели.Количество() = 1 Тогда
			
			ТекстЗаголовка = НСтр("ru = 'Один раз в неделю'");
			
		ИначеЕсли Задание.Расписание.ПериодПовтораВТечениеДня = 0 Тогда
			
			ТекстЗаголовка = НСтр("ru = 'Один раз в день'");
			
		Иначе
			
			
			ЗначениеПериода = Задание.Расписание.ПериодПовтораВТечениеДня;
			
			Если ЗначениеПериода <= 3600 Тогда
				
				ТекстЗаголовка = НСтр("ru = 'Один раз в час'");
				
			ИначеЕсли ЗначениеПериода <= 10800 Тогда
				
				ТекстЗаголовка = НСтр("ru = 'Один раз в 3 часа'");
				
			ИначеЕсли ЗначениеПериода <= 43200 Тогда
				
				ТекстЗаголовка = НСтр("ru = 'Один раз в 12 часов'");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыНастройкиРасписаний()
	
	Если Не РазделениеВключено Тогда
		Элементы.СтраницыФормированиеСегментов.ТекущаяСтраница = Элементы.СтраницаФССтандарт;
		Элементы.СтраницыОчисткиСегментов.ТекущаяСтраница = Элементы.СтраницаОССтандарт;
	Иначе
		Элементы.СтраницыФормированиеСегментов.ТекущаяСтраница = Элементы.СтраницаФСИнтервал;
		Элементы.СтраницыОчисткиСегментов.ТекущаяСтраница = Элементы.СтраницаОСИнтервал;
	КонецЕсли;
	
	Элементы.СтраницыФормированиеСегментов.Доступность = ФормированиеСегментовИспользуется;
	Элементы.СтраницыОчисткиСегментов.Доступность = ОчисткаСегментовИспользуется;
	
КонецПроцедуры

&НаКлиенте
// Функция возвращает ПериодПовтораВТечениеДня в секундах
//
Функция ПолучитьПериодПовтораВТечениеДня(Интервал)
	
	ЗначенияВыбора = СоответствиеЗначенийВыбораККоличествуСекунд();
	
	ПериодПовтораВТечениеДня = ЗначенияВыбора.Получить(Интервал);
	Возврат ?(ПериодПовтораВТечениеДня = Неопределено, 3600, ПериодПовтораВТечениеДня);
	
КонецФункции //ПолучитьПериодПовтораВТечениеДня()

&НаКлиенте
// Функция возвращает соответствие надписей выбора к количеству секунд
// 
Функция СоответствиеЗначенийВыбораККоличествуСекунд()
	
	СоответствиеНадписей = Новый Соответствие;
	СоответствиеНадписей.Вставить(НСтр("ru='Один раз в час'"), 3600);
	СоответствиеНадписей.Вставить(НСтр("ru='Один раз в 3 часа'"), 10800);
	СоответствиеНадписей.Вставить(НСтр("ru='Один раз в 12 часов'"), 43200);
	
	Возврат СоответствиеНадписей;
	
КонецФункции //СоответствиеЗначенийВыбораККоличествуСекунд()

&НаСервере
Функция НайтиЗадания(ИмяЗадания, ПустоеЗадание = Ложь) 
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", Метаданные.РегламентныеЗадания[ИмяЗадания]);

	РегЗадание = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора);
	
	Если РегЗадание.Количество()=0 Тогда
		РегЗадание 		= Новый Структура("Использование, Расписание, УникальныйИдентификатор", Ложь, Новый РасписаниеРегламентногоЗадания, Новый УникальныйИдентификатор);
		ПустоеЗадание   = Истина;
	Иначе
		РегЗадание = РегЗадание[0];
	КонецЕсли;
	
	Возврат РегЗадание;
	
КонецФункции

&НаСервере
Процедура ИзменитьЗадание(РегЗадание, ПараметрыЗадания, ПустоеЗадание)
	
	Если ПустоеЗадание Тогда
		
		ПараметрыЗадания.Вставить("Ключ", Строка(Новый УникальныйИдентификатор));
		
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
		
	Иначе
		
		ПараметрыЗадания.Удалить("Метаданные");
		
		РегламентныеЗаданияСервер.ИзменитьЗадание(РегЗадание, ПараметрыЗадания);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти
