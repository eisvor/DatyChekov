#Область ПеременныеМодуля

&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем МассивКассККМКлиент;

&НаКлиенте
Перем МассивОрганизацийКлиент;

&НаКлиенте
Перем ЦветПродажи;

&НаКлиенте
Перем ДисплейПокупателяПараметры;

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоНаименованию(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПродолжитьОбработатьДанныеПоКодуКлиент(Результат);
		Если Результат.Свойство("ВывестиИнформациюРМКУправляемый") Тогда
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(
				Результат.ВывестиИнформациюРМКУправляемый.ЗаголовокИнформации,
				Результат.ВывестиИнформациюРМКУправляемый.ТекстИнформации);
		Иначе
			ОбработатьДанныеПоКодуКлиент(Результат);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		
		//ИнтеграцияИСМПТК_РозничноеВыбытие
		Если УчетМаркировкаИСМПТК 
			И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
			//Проверяем вводимый в форме штрихкод на маркировку
			Если Не ДополнительныеПараметры = Неопределено Тогда
				Если ДополнительныеПараметры.Свойство("ВызовИзФормыРучногоВводаШК") Тогда
					ЭтоКодМаркировки = РозничноеВыбытиеИСМПТКВызовСервера.ПроверитьШтрихкодПоФорматуКодовМаркировки(Штрихкод);
					Если ЭтоКодМаркировки Тогда
						ТекстСообщения = НСтр("ru = 'Код маркировки необходимо сканировать напрямую в форме документа! Форма поиска по штрихкоду (F7) предназначена для ввода данных с клавиатуры!'");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						Возврат;
					Иначе
						ПоискПоШтрихкодуЗавершениеПроверкаМаркировки(Штрихкод);
					КонецЕсли;
				ИначеЕсли ДополнительныеПараметры.Свойство("РегистрацияНовогоШтрихкода") Тогда
					//Был зарегистрирован новый штрихкод номенклатуры, при этом пользователь сканировал не код маркировки.
					//Нужно оповестить о необходимости указания КМ, если зарегситрированный товар с ОУ по маркировке.
					НайденаяНоменклатура = ПолучитьНоменклатуруПоШтрихкоду(Штрихкод);
					Если Не НайденаяНоменклатура = Неопределено
						И ЗначениеЗаполнено(НайденаяНоменклатура.Номенклатура) Тогда
						ВидПродукцииШК = ПолучитьВидПродукцииПоНоменклатуре(НайденаяНоменклатура.Номенклатура);
						УчетТГНоменклатурыВключен = РозничноеВыбытиеИСМПТКВызовСервера.ПроверитьАктивностьОпцииУчетаПоТГноменклатуры(ВидПродукцииШК);
						Если ЗначениеЗаполнено(ВидПродукцииШК) Тогда 
							Если УчетТГНоменклатурыВключен Тогда
								ТекстСообщения = НСтр("ru = 'Внимание: штрихкод зарегистрирован на номенклатуру с особенностями учета по маркировке! Требуется заполнить код маркировки товара в отдельной таблице!'");
								ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
							Иначе
								ТекстОшибки = НСтр("ru = 'Внимание! Штрихкод %1 зарегистрирован на номенклатуру %2 с особенностями учета ""%3""! На текущий момент учет этой товарной группы в базе не включен.'")
											+ НСтр("ru = 'Необходимо изменить вид номенклатуры на ""Товар без особенностей учета"" или включить учет маркировки этой товарной группы!'");
								ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, Штрихкод, НайденаяНоменклатура.Номенклатура, ВидПродукцииШК);
								ОбщегоНазначенияИСМПТКВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Розничная продажа маркируемого товара'"), "Предупреждение",,, ТекстОшибки);
								ТекстСообщения = НСтр("ru = 'Внимание! Обнаружены проблемы в настройках учета маркируемой продукции! Требуется сообщить Администратору. Подробности в Журнале регистрации.'"); 
								ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
                            КонецЕсли;
			        	КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
		
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
					ЭтотОбъект.Элементы.Товары,
					КэшированныеЗначения,
					ПараметрыУказанияСерий);
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьВыбораОрганизации(Штрихкод, ДополнительныеПараметры) Экспорт 
	
	Если Штрихкод = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	#Если НЕ ВебКлиент Тогда
	Если НайтиНедопустимыеСимволыXML(Штрихкод) > 0 Тогда
		Штрихкод = ШтрихкодВФорматеGS1(Штрихкод);
	КонецЕсли;
	#КонецЕсли
	
	ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак");
	ДанныеРазбора = РазборКодаМаркировкиИССлужебныйКлиент.РазобратьКодМаркировки(Штрихкод, ВидПродукции);
	ЭтоШтрихкодТабачнойПродукции = НЕ ДанныеРазбора = Неопределено;
		
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораКассыОрганизация", ЭтотОбъект, Штрихкод);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КассыККМ", МассивКассККМКлиент);
	ПараметрыФормы.Вставить("Организации", МассивОрганизацийКлиент);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	// Если считан код маркировки табака и на компьютере настроено несколько сертификатов цифровой подписи,
	// то позволяем пользователю выбрать кассу ККМ для пробития табака.
	Если ЭтоШтрихкодТабачнойПродукции И ОрганизацииИСМП.Количество() > 1 Тогда 
		
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораКассыККМ",
			ПараметрыФормы,
			УникальныйИдентификатор,,,,
			ОбработчикОповещения,
			Режим);
		
	// Если считан код акцизной марки и подключено несколько ОрганизацийЕГАИС,
	// то позволяем пользователю выбрать кассу ККМ для пробития алкоголя.
	ИначеЕсли ИнтеграцияЕГАИСРТВызовСервера.ЭтоШтрихкодАкцизнойМарки(Штрихкод) И ОрганизацииЕГАИС.Количество() > 1 Тогда
		
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораКассыККМ",
			ПараметрыФормы,
			УникальныйИдентификатор,,,,
			ОбработчикОповещения,
			Режим);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораКассыОрганизация(Результат, Штрихкод) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("Организация") И ЗначениеЗаполнено(Результат.Организация) Тогда
			Объект.Организация = Результат.Организация;
		КонецЕсли;
		
		Если Результат.Свойство("Касса") И ЗначениеЗаполнено(Результат.Касса) Тогда
			ТекущаяКассаККМ = Результат.Касса;
		КонецЕсли;
		
		ККМОрганизации = ТаблицаКассККМОрганизаций.НайтиСтроки(Новый Структура("Организация", Объект.Организация));
		Для каждого СтрокаККМ из ККМОрганизации Цикл
			СтрокаККМ.ПоУмолчанию = СтрокаККМ.КассаККМ = ТекущаяКассаККМ;
		КонецЦикла;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПараметровЗаполнения =
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияПоОбъекту(Объект);
	
	ОрганизацияПоУмолчанию = ОрганизацияПоУмолчанию(ТаблицаКассККМОрганизаций);
	Если НЕ ОрганизацияПоУмолчанию = Неопределено Тогда
		СтруктураПараметровЗаполнения.Вставить("ОрганизацияПоУмолчанию", ОрганизацияПоУмолчанию);
		СтруктураПараметровЗаполнения.Вставить("Организация", ОрганизацияПоУмолчанию);
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизациюПродажи", СтруктураПараметровЗаполнения);
	СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", СтруктураПараметровЗаполнения);
	СтруктураДействий.Вставить("ЗаполнитьВидНалога",
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияВидаНалога(
			Объект,
			СтруктураПараметровЗаполнения));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровЗаполнения);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбработатьСтрокуТЧСВызовомСервера(ТекущаяСтрока, СтруктураДействий, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если Не ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	//ИнтеграцияИСМПТК_РозничноеВыбытие
	Если Результат <> Неопределено Тогда
		Если УчетМаркировкаИСМПТК И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
			Номенклатура   = Результат.ЗначенияПоиска[0].Номенклатура;
			Характеристика = Результат.ЗначенияПоиска[0].Характеристика;
			Упаковка = ?(ЗначениеЗаполнено(Результат.ЗначенияПоиска[0].Упаковка), Результат.ЗначенияПоиска[0].Упаковка, РозничноеВыбытиеИСМПТККлиентПереопределяемый.ПолучитьПустуюСсылкуУпаковка());
					
		    ВидПродукцииШК = ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);
			НераспределенныеКм = Объект.КодыМаркировкиИСМПТК.НайтиСтроки(Новый Структура("КлючСвязи", -1));
			УчетТГВключен  = РозничноеВыбытиеИСМПТКВызовСервера.ПроверитьВключениеУчетаТГ(ВидПродукцииШК);
			Если ЗначениеЗаполнено(ВидПродукцииШК) 
				И НераспределенныеКм.Количество() = 0 
				И УчетТГВключен Тогда
				//выбранный товар - маркируемый, при этом не был отсканирован код маркировки
				ТекстСообщения = НСтр("ru = 'Внимание: введенный штрихкод зарегистрирован на номенклатуру с особенностями учета по маркировке! Коды маркировки нужно сразу сканировать в форму документа!'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		ПродолжитьОбработатьДанныеПоКодуКлиент(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат);
	Иначе
		Если УчетМаркировкаИСМПТК И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
			//Нужно проверить наличие в чеке предзаполненных КМ, т.к. если пользователь отказался от уточнения номенклатуры эти коды зависнут.
			СтрокиБезИндексаСвязи = Объект.КодыМаркировкиИСМПТК.НайтиСтроки(Новый Структура("КлючСвязи", -1));
			Если Не СтрокиБезИндексаСвязи.Количество() = 0 Тогда
				Для Каждого Строка Из СтрокиБезИндексаСвязи Цикл
					Объект.КодыМаркировкиИСМПТК.Удалить(Строка);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ДанныеПоискаПоМагнитномуКодуСервер(МагнитныйКод);
	Возврат ПодключаемоеОборудованиеРТКлиент.ПолученМагнитныйКод(ЭтотОбъект, СтруктураРезультат);
	
КонецФункции

&НаКлиенте
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	ДанныеШтрихкода = Новый Структура;
	ДанныеШтрихкода.Вставить("Количество", 1);
	ДанныеШтрихкода.Вставить("Штрихкод"  , Штрихкод);
	
	#Если НЕ ВебКлиент Тогда
	Позиция = НайтиНедопустимыеСимволыXML(Штрихкод);
	Если Позиция > 0 Тогда
		ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
	КонецЕсли;
	#КонецЕсли
	
	СтруктураРезультат = ДанныеПоискаПоШтрихкодуСервер(ДанныеШтрихкода);
	Возврат ПодключаемоеОборудованиеРТКлиент.ПолученШтрихкодИзСШК(ЭтотОбъект, СтруктураРезультат);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	Если СтруктураПараметровКлиента.Свойство("НайденаДисконтнаяКарта") Тогда
		
		Если СтруктураПараметровКлиента.Свойство("НомерТелефона") Тогда
			
			Объект.АдресЭП		= "";
			Объект.Телефон		= СтруктураПараметровКлиента.НомерТелефона;
		
		ИначеЕсли СтруктураПараметровКлиента.Свойство("АдресЭП") Тогда
			
			Объект.АдресЭП		= СтруктураПараметровКлиента.АдресЭП;
			Объект.Телефон		= "";
		
		КонецЕсли;
		
		ДисконтнаяКартаПриИзменении();
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("АктивизироватьСтроку") Тогда
		
		Элементы.Товары.ТекущаяСтрока =  СтруктураПараметровКлиента.АктивизироватьСтроку;
		Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок;
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		Если ТекущаяСтрока <> Неопределено Тогда
			
			Если СтруктураПараметровКлиента.Свойство("ВвестиЦену") Тогда
				
				ОткрытаБлокирующаяФорма = Истина;
				СтруктураПараметровКлиента.Вставить("ОткрытаБлокирующаяФорма", Истина);
				СтруктураПараметровКлиента.Вставить("ИдентификаторСтроки", СтруктураПараметровКлиента.АктивизироватьСтроку);
				СтруктураПараметровКлиента.Вставить("ПрекратитьДействия", Ложь);
				Если Не СтруктураПараметровКлиента.Свойство("ДобавитьСерийныйНомерИОткрытьВводСерии") Тогда
					СтруктураПараметровКлиента.Вставить("ДобавитьСерийныйНомерИОткрытьВводСерии");
				КонецЕсли;
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ПараметрДействия", СтруктураПараметровКлиента);
				
				ОбработчикОповещения = Новый ОписаниеОповещения(
					"ОповещениеОткрытьФормуВводаЧислаТоварыПриИзмененииНоменклатуры", ЭтотОбъект, ДополнительныеПараметры);
				ПолучитьИнтерактивноЧисло(НСтр("ru = 'Введите цену товара.'"), ОбработчикОповещения);
				
			ИначеЕсли СтруктураПараметровКлиента.Свойство("ВвестиНоминал") Тогда
				
				ОткрытаБлокирующаяФорма = Истина;
				СтруктураПараметровКлиента.Вставить("ОткрытаБлокирующаяФорма", Истина);
				СтруктураПараметровКлиента.Вставить("ИдентификаторСтроки", СтруктураПараметровКлиента.АктивизироватьСтроку);
				СтруктураПараметровКлиента.Вставить("ПрекратитьДействия", Ложь);

				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ПараметрДействия", СтруктураПараметровКлиента);
				
				ОбработчикОповещения = Новый ОписаниеОповещения(
					"ОповещениеОткрытьФормуВводаЧислаТоварыПриИзмененииНоменклатуры", ЭтотОбъект, ДополнительныеПараметры);
				ПолучитьИнтерактивноЧисло(НСтр("ru = 'Укажите номинал сертификата.'"), ОбработчикОповещения);
				
			ИначеЕсли СтруктураПараметровКлиента.Свойство("ВвестиЦенуПлатежа") Тогда
				
				ОткрытаБлокирующаяФорма = Истина;
				ВводПараметровАгентскогоПлатежа(ТекущаяСтрока);
				
			Иначе
				СтрокаПоиска = СтруктураПараметровКлиента.ЗначенияПоиска[0];
				Если НЕ СтрокаПоиска.Свойство("СерийныйНомер") Тогда
					ДобавитьСерийныйНомерИОткрытьВводСерии(ТекущаяСтрока,,, ОткрытаБлокирующаяФорма);
					СтруктураПараметровКлиента.Вставить("ОткрытаБлокирующаяФорма", ОткрытаБлокирующаяФорма);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.ДоговорКонтрагента) Тогда
				СтруктураПараметровКлиента.Вставить("ОткрыватьРедактированиеСтроки", Ложь);
			Иначе
				ПодключитьОбработчикОжидания("Подключаемый_ИзменитьСтроку", 0.1, Истина);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКодуРМК(
			ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
		Если СтруктураПараметровКлиента.Свойство("НеизвестныеДанныеПО")
			И СтруктураПараметровКлиента.НеизвестныеДанныеПО Тогда
			
			ЛогированиеНеизвестныхДанныхПО(СтруктураПараметровКлиента.ДанныеПО);
		КонецЕсли;
			
	КонецЕсли;
	
	//ИнтеграцияИСМПТК_РозничноеВыбытие
	Если УчетМаркировкаИСМПТК 
		И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда 
		ПерезаполнитьПризнакиМаркировкиИСМПТК();
		ЗаполнитьПризнакКодаМаркировкиВТоварах();
	КонецЕсли;
	//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
	
	ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПослеЗагрузкиИзТСД(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
		Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
		
	ПерезаполнитьПризнакиМаркировки();
	
	//ИнтеграцияИСМПТК_РозничноеВыбытие
	Если УчетМаркировкаИСМПТК 
		И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда 
		ПерезаполнитьПризнакиМаркировкиИСМПТК();
		ЗаполнитьПризнакКодаМаркировкиВТоварах();
	КонецЕсли;
	//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
	
	ОбновитьФормуНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ДобавитьНайденныеПозицииТоваровСервер(СтруктураПараметров, ДополнительныеПараметры);
	
КонецФункции

&НаСервере
Функция ДанныеПоискаПоМагнитномуКодуСервер(МагнитныйКод)
	
	Возврат ПодключаемоеОборудованиеРТ.ДанныеПоискаПоМагнитномуКоду(МагнитныйКод, ЭтотОбъект);
	
КонецФункции

&НаСервере
Функция ДанныеПоискаПоШтрихкодуСервер(ДанныеШтрихкода)
	
	ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ДекодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
	
	Возврат ПодключаемоеОборудованиеРТ.ДанныеПоискаПоШтрихкоду(ДанныеШтрихкода.Штрихкод, ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Процедура ОповещениеОбработатьДанныеПоКоду(СтруктураРезультат, ДополнительныеПараметры) Экспорт
	
	ПродолжитьОбработатьДанныеПоКодуКлиент(СтруктураРезультат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОбработатьДанныеПоКодуКлиент(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если НЕ СтруктураРезультат.Свойство("ДействиеОтменено") Тогда
		Если СтрокаРезультата.Свойство("Карта") Тогда
			
			Если СтрокаРезультата.ЭтоРегистрационнаяКарта Тогда
				Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
					СтруктураРезультат.Вставить("ТекстПредупреждения",
						НСтр("ru = 'Изменение продавца при возврате не предусмотрено.'"));
				Иначе
					Если ТипЗнч(СтрокаРезультата.ВладелецКарты) = Тип("СправочникСсылка.Пользователи") Тогда 
						Объект.Продавец = РозничныеПродажиВызовСервера.ФизЛицоВладельцаКарты(СтрокаРезультата.ВладелецКарты);
						ПродавецПоУмолчанию = Объект.Продавец;
					Иначе
						Объект.Продавец = СтрокаРезультата.ВладелецКарты;
						ПродавецПоУмолчанию = Объект.Продавец;
					КонецЕсли;
					ЛогированиеВводаПродавца(СтруктураРезультат.ДанныеПО, СтрокаРезультата.Карта, СтрокаРезультата.ВладелецКарты);
					Модифицированность = Истина;
					СтруктураРезультат.Вставить("НайденаРегистрационнаяКарта");
				КонецЕсли;
			Иначе
				Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
					СтруктураРезультат.Вставить("ТекстПредупреждения",
						НСтр("ru = 'Изменение дисконтной карты при возврате не предусмотрено.'"));
				Иначе
					Объект.ДисконтнаяКарта = СтрокаРезультата.Карта;
					Если СтруктураРезультат.Свойство("ЛогироватьСозданиеКарты") Тогда
						ЛогированиеРегистрацииНовойКарты(СтруктураРезультат.ЛогироватьСозданиеКарты, СтрокаРезультата.Карта);
						ЛогированиеВводаДисконтнойКарты(СтруктураРезультат.ЛогироватьСозданиеКарты, СтрокаРезультата.Карта);
					Иначе
						ЛогированиеВводаДисконтнойКарты(СтруктураРезультат.ДанныеПО, СтрокаРезультата.Карта);
					КонецЕсли;
					СтруктураРезультат.Вставить("НайденаДисконтнаяКарта");
					Модифицированность = Истина;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
			
			ЛогированиеВводаПодарочногоСертификата(
				СтруктураРезультат.ДанныеПО,
				СтрокаРезультата.Номенклатура,
				СтрокаРезультата.СерийныйНомер);
			
			ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ДобавитьНайденныеСерийныеНомера(ЭтотОбъект, СтрокаРезультата);
			
		ИначеЕсли СтрокаРезультата.Свойство("Серия") Тогда
			
			ИсполняемаяОперацияЛогирования = "ВводШКСерии";
			
			ЛогированиеВводаШКСерии(
				СтруктураРезультат.ДанныеПО,
				СтрокаРезультата.Номенклатура,
				СтрокаРезультата.Серия);
				
			ПодключаемоеОборудованиеРТКлиент.ДобавитьНайденныеВТЧСерииНоменклатуры(ЭтотОбъект, СтрокаРезультата);
			
		ИначеЕсли СтрокаРезультата.Свойство("Номенклатура") Тогда
			
			ЛогированиеВводаНоменклатурыИХарактеристики(
				СтруктураРезультат.ДанныеПО,
				СтрокаРезультата.Номенклатура,
				СтрокаРезультата.Характеристика);
			
			ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваровСервер(СтрокаРезультата);
			
		ИначеЕсли СтрокаРезультата.Свойство("НомерТелефона") Тогда
			
			Объект.АдресЭП		= "";
			Объект.Телефон		= СтрокаРезультата.НомерТелефона;
			ТелефонСтрокой		= СтрокаРезультата.ТелефонСтрокой;
			
			ОбновитьДанныеSMSEmail();
			
			Если НЕ СтруктураРезультат.Свойство("РегистрацияНовойКарты") Тогда
			
				ШаблонТекста		= НСтр("ru = 'В чек добавлен неизвестный номер телефона %1'");
				ТекстПредупреждения = СтрШаблон(ШаблонТекста, ТелефонСтрокой);
			
				СтруктураРезультат.Вставить("ТекстПредупреждения",  ТекстПредупреждения);
				
			КонецЕсли;
			
		ИначеЕсли СтрокаРезультата.Свойство("АдресЭП") Тогда
			
			Объект.Телефон		= "";
			Объект.АдресЭП		= СтрокаРезультата.АдресЭП;
			
			ШаблонТекста		= НСтр("ru = 'В чек добавлен неизвестный адрес ЭП %1'");
			ТекстПредупреждения = СтрШаблон(ШаблонТекста, СтрокаРезультата.АдресЭП);
			
			СтруктураРезультат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
			
			ОбновитьДанныеSMSEmail();
			
		КонецЕсли;
	КонецЕсли;

	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если СтрокаРезультата.Свойство("ВывестиИнформациюРМКУправляемый") Тогда
		СтруктураРезультат.Вставить("ВывестиИнформациюРМКУправляемый", СтрокаРезультата.ВывестиИнформациюРМКУправляемый);
	КонецЕсли;
	
	Если СтрокаРезультата.Свойство("ВвестиЦену") Тогда
		СтруктураРезультат.Вставить("ВвестиЦену", СтрокаРезультата.ВвестиЦену);
	КонецЕсли;
	
	Если СтрокаРезультата.Свойство("ВвестиНоминал") Тогда
		СтруктураРезультат.Вставить("ВвестиНоминал", СтрокаРезультата.ВвестиНоминал);
	КонецЕсли;
	
	Если СтрокаРезультата.Свойство("ВвестиЦенуПлатежа") Тогда
		СтруктураРезультат.Вставить("ВвестиЦенуПлатежа", СтрокаРезультата.ВвестиЦенуПлатежа);
	КонецЕсли;
	
	Если СтрокаРезультата.Свойство("НеобходимостьВводаАкцизнойМарки") Тогда
		СтруктураРезультат.Вставить("НеобходимостьВводаАкцизнойМарки", СтрокаРезультата.НеобходимостьВводаАкцизнойМарки);
	КонецЕсли;
	
	Если СтрокаРезультата.Свойство("НеобходимостьВводаАкцизнойМаркиДляТабака") Тогда
		СтруктураРезультат.Вставить("НеобходимостьВводаАкцизнойМаркиДляТабака",
			СтрокаРезультата.НеобходимостьВводаАкцизнойМарки);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбработатьДанныеИзТСДКлиент(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	Результат = ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоНоменклатуреИзТСДКлиент(ЭтотОбъект, СтруктураПараметров);
	ПерезаполнитьПризнакиМаркировки();
	
	Если Не ДополнительныеПараметры = Неопределено Тогда 
		Если ДополнительныеПараметры.Свойство("ОбработатьПослеЗагрузки") И ДополнительныеПараметры.ОбработатьПослеЗагрузки Тогда 
			ОбработатьДанныеПослеЗагрузкиИзТСД(СтруктураПараметров, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	ПодключаемоеОборудованиеРТКлиент.СообщитьТекстПредупреждения(СтруктураПараметров);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеПозицииТоваровСервер(СтруктураПараметров, ДополнительныеПараметры = Неопределено)
	
	Если Не ДополнительныеПараметры = Неопределено Тогда
		СтруктураПараметров = ДополнительныеПараметры;
		ИдентификаторСтроки = СтруктураПараметров;
	Иначе
		ИдентификаторСтроки = Неопределено;
	КонецЕсли;
	
	ТекстЗапретаПродаж = "";
	Если НельзяПродавать(СтруктураПараметров.Номенклатура, ТекстЗапретаПродаж) Тогда
		ИнформацияРМК = Новый Структура;
		ИнформацияРМК.Вставить("ЗаголовокИнформации", НСтр("ru = 'Запрет продаж.'"));
		ИнформацияРМК.Вставить("ТекстИнформации", ТекстЗапретаПродаж);
		СтруктураПараметров.Вставить("ВывестиИнформациюРМКУправляемый", ИнформацияРМК);
		
		Если СтруктураПараметров.Свойство("ТекущаяСтрока") Тогда
			// Удалим строку.
			ОбработкаТабличнойЧастиТоварыКлиентСервер.УдалитьСтрокиАгентскогоВознаграждения(Объект.Товары, СтруктураПараметров.ТекущаяСтрока);
			Объект.Товары.Удалить(СтруктураПараметров.ТекущаяСтрока);
			ТоварыПослеУдаленияСервер();
		КонецЕсли;
		
		Возврат Неопределено;
	КонецЕсли;
	
	ОбработатьБезМаркировки = Ложь;
	Если СтруктураПараметров.Свойство("ОбработатьБезМаркировки")
		И СтруктураПараметров.ОбработатьБезМаркировки Тогда
		ОбработатьБезМаркировки = Истина;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	Если СтруктураПараметров.Свойство("ТекущаяСтрока") Тогда
		ТекущаяСтрока = СтруктураПараметров.ТекущаяСтрока;
		СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	Иначе
		ТекущаяСтрока = ИнициализацияСтрокиТоваров(ЭтотОбъект, СтруктураПараметров);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	КонецЕсли;
	
	ДобавленаСтрока = Ложь;
	Если СтруктураПараметров.Свойство("ДобавленаСтрока") Тогда
		ДобавленаСтрока = СтруктураПараметров.ДобавленаСтрока;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
	
	//ИнтеграцияИСМПТК_РозничноеВыбытие
	Если УчетМаркировкаИСМПТК 
		И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
		//Выполняем поиск предварительно добавленых КМ в ТЧ КодыМаркировкиИСМПТК:
		//если такие строки нашлись, связываем их с текущей строкой товаров по ключу связи
		СтруктураПоискаМарок = Новый Структура("КлючСвязи", -1);
		НайденныеСтрокиМарок = Объект.КодыМаркировкиИСМПТК.НайтиСтроки(СтруктураПоискаМарок);
		Если Не НайденныеСтрокиМарок.Количество() = 0 Тогда
			Для Каждого СтрокаТЧ Из НайденныеСтрокиМарок Цикл
				Если СтрокаТЧ.Номенклатура = ТекущаяСтрока.Номенклатура
					И СтрокаТЧ.Характеристика = ТекущаяСтрока.Характеристика Тогда
					СтрокаТЧ.КлючСвязи = ТекущаяСтрока.КлючСвязи;
				ИначеЕсли Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
					//Строка КМ была добавлена до того, как пользователь уточнил данные номенклатуры, поэтому заполняем эту информацию сейчас
					СтрокаТЧ.Номенклатура = ТекущаяСтрока.Номенклатура;
					СтрокаТЧ.Характеристика = ТекущаяСтрока.Характеристика;
					СтрокаТЧ.КлючСвязи = ТекущаяСтрока.КлючСвязи;
					СтрокаТЧ.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ТекущаяСтрока.Упаковка), ТекущаяСтрока.Упаковка, ТекущаяСтрока.Номенклатура.ЕдиницаИзмерения);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;					
	//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
	
	Если ДобавленаСтрока Тогда
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ДополнитьСтруктуруДействиямиПриИзмененииЭлемента(Объект, СтруктураДействий, "Номенклатура");
		
		СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу",
			ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, Объект.СерийныеНомера));
		
		ДанныеОРабочемМесте = ОбработкаТабличнойЧастиТоварыСервер.СтруктураЗаполненияСкладаПродажиВСтрокеТЧ(Объект);
		ДанныеОРабочемМесте.Вставить("Дата", Объект.Дата);
		
		ОрганизацияПоУмолчанию = ОрганизацияПоУмолчанию(ТаблицаКассККМОрганизаций);
		Если НЕ ОрганизацияПоУмолчанию = Неопределено Тогда
			ДанныеОРабочемМесте.Вставить("ОрганизацияПоУмолчанию", ОрганизацияПоУмолчанию);
			ДанныеОРабочемМесте.Вставить("Организация", ОрганизацияПоУмолчанию);
		КонецЕсли;
		
		СтруктураДействий.Вставить("ЗаполнитьВидНалога",
			ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияВидаНалога(Объект));
		СтруктураДействий.Вставить("ЗаполнитьСкладПродажи",          ДанныеОРабочемМесте);
		СтруктураДействий.Вставить("ЗаполнитьОрганизациюПродажи",    ДанныеОРабочемМесте);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", ДанныеОРабочемМесте);
		
		СтруктураДействий.Вставить("ПроставитьПродавца", Объект.Продавец);
		
		СтруктураДействий.Вставить("ЗаполнитьПредставлениеТабло", НаборПравИНастроек.ЗапросТабло);
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Штрихкод)
			И ИнтеграцияИСМПКлиентСерверПовтИсп.УчитыватьМРЦ() Тогда
			СтруктураДействий.Вставить("ЗаполнитьЦенуМРЦ");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат И ЗначениеЗаполнено(Объект.ЧекККМПродажа) Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуВозвратСУчетомОснования",
			Новый Структура("Основание", Объект.ЧекККМПродажа));
	Иначе
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		Если ДобавленаСтрока Тогда
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи",
				ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина, Ложь));
			СтруктураДействий.Вставить("ПересчитатьЦенуСУчетомАгентскогоВознаграждения", Новый Структура("Цена", ТекущаяСтрока.Цена));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
			СтруктураПересчетаСкидок = Новый Структура;
			СтруктураПересчетаСкидок.Вставить("Очищать", Ложь);
			СтруктураПересчетаСкидок.Вставить("ПересчитыватьСуммуСкидки", Истина);
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки"        , СтруктураПересчетаСкидок);
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", СтруктураПересчетаСкидок);
		Иначе
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки"        , Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ДополнитьСтруктуруДействиямиНДС(СтруктураДействий, ВестиУчетМаркируемойПродукцииИСМП);
	ДополнитьСтруктуруДействиямиГосИС(СтруктураДействий, Объект.ОперацияСДенежнымиСредствами, МаркировкаВключена, ОбработатьБезМаркировки);
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтруктураПолейТЧ", ПолучитьСтруктуруПолейТЧ(СтруктураДействий));
	СтруктураТЧ.Вставить("ТекущаяСтрока" , ПолучитьДанныеТекущейСтроки(ТекущаяСтрока, СтруктураТЧ.СтруктураПолейТЧ));
	
	КэшированныеЗначения = Неопределено;
	ОбработкаТабличнойЧастиТоварыВызовСервера.ПриИзмененииРеквизитовВТЧСервер(
		СтруктураТЧ, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураТЧ.ТекущаяСтрока);
	
	СуммаДоРасчета = ТекущаяСтрока.Сумма;
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	СуммаПослеРасчета = ТекущаяСтрока.Сумма;
	ОбработкаТабличнойЧастиТоварыСервер.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект, СтруктураДействий, ТекущаяСтрока, КэшированныеЗначения);
	УменьшениеСуммыЧекаККМ = СуммаДоРасчета - СуммаПослеРасчета;
	УменьшениеСуммыЧекаККМ = ?(УменьшениеСуммыЧекаККМ > 0, УменьшениеСуммыЧекаККМ, 0);
	
	Если УменьшениеСуммыЧекаККМ
		И НаборПравИНастроек.ЛогироватьДействияКассира
		И НаборПравИНастроек.ЛогируемыеДействия.Свойство("ИзменениеНоменклатуры") Тогда
		ЛогированиеИзмененийСтроки("ИзменениеНоменклатуры",
			Неопределено,
			ПоследняяРедактируемаяНоменклатура,
			Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(),
			ТекущаяСтрока.Номенклатура,
			ТекущаяСтрока.Характеристика,
			УменьшениеСуммыЧекаККМ);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	Если ТекущаяСтрока.Цена = 0 Тогда
		Если ИспользоватьНастройкуРМК И НаборПравИНастроек.НазначатьЦенуТоварамСНулевойЦеной
			И Не ТекущаяСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
			
			СтруктураПараметров.Вставить("ВвестиЦену");
			НеобходимВводЦены = Истина;
		ИначеЕсли ТекущаяСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
			И ЗначениеЗаполнено(ТекущаяСтрока.ДоговорКонтрагента) Тогда
			
			СтруктураПараметров.Вставить("ВвестиЦенуПлатежа");
		ИначеЕсли ТекущаяСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат 
			И ЭтоСертификатСПроизвольнымНоминалом(ТекущаяСтрока.Номенклатура) Тогда
			
			СтруктураПараметров.Вставить("ВвестиНоминал");
		Иначе
			
			ТекстСообщения = НСтр("ru = 'На товар %1 %2 не назначена цена.'");
			
			ХарактеристикаПредставление = "";
			Если ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
				ХарактеристикаПредставление = "(" + ТекущаяСтрока.Характеристика + ")";
			КонецЕсли;
			
			ИнформацияРМК = Новый Структура;
			ИнформацияРМК.Вставить("ЗаголовокИнформации", НСтр("ru = 'Цена не установлена.'"));
			ИнформацияРМК.Вставить("ТекстИнформации",
				СтрШаблон(ТекстСообщения, ТекущаяСтрока.Номенклатура, ХарактеристикаПредставление));
			СтруктураПараметров.Вставить("ВывестиИнформациюРМКУправляемый", ИнформацияРМК);
			
			ОбработкаТабличнойЧастиТоварыКлиентСервер.УдалитьСтрокиАгентскогоВознаграждения(Объект.Товары, ТекущаяСтрока);
			Объект.Товары.Удалить(ТекущаяСтрока);
			ТоварыПослеУдаленияСервер();
			
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Если НЕ АвтоматическийРасчетСкидок Тогда
			ОтменитьСкидкиИОплатуБонусамиСервер();
		КонецЕсли;
	КонецЕсли;
	
	УчетХарактеристик = ПодборТоваровВызовСервера.ФлагУчетаХарактеристик(ТекущаяСтрока.Номенклатура);
	СтруктураПараметров.Вставить("УчетХарактеристик", УчетХарактеристик);
	
	Если ТекущаяСтрока.СтатусУказанияСерий <> 0 Тогда
		СтруктураПараметров.Вставить("ДобавитьСерийныйНомерИОткрытьВводСерии");
	КонецЕсли;
	
	ЗаполнитьОстаткиСервер();
	
	ИдентификаторСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	Элементы.Товары.ТекущаяСтрока = ИдентификаторСтроки;
	
	Если Не ДополнительныеПараметры = Неопределено Тогда
		СтруктураПараметров = ИдентификаторСтроки;
		Возврат СтруктураПараметров;
	Иначе
		Возврат ИдентификаторСтроки;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ТоварыПриИзмененииКоличестваУпаковок(СтрокаТабличнойЧасти, ПредыдущееКоличество = 0) Экспорт
	
	КоличествоУпаковок = 0;
	РазрешитьРедактироватьНабранныйЧек = НаборПравИНастроек.РазрешитьРедактироватьНабранныйЧек;
	Если Не РазрешитьРедактироватьНабранныйЧек Тогда 
		Если (СтрокаТабличнойЧасти.КоличествоУпаковок < ПредыдущееКоличество)
			И НЕ (ПредыдущееКоличество = 1 И СтрокаТабличнойЧасти.КоличествоУпаковок < 1) Тогда
			КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок;
			СтрокаТабличнойЧасти.КоличествоУпаковок = ПредыдущееКоличество;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	Если Не РазрешитьРедактироватьНабранныйЧек Тогда
		СтруктураДействий.Вставить("ЗапретитьРедактироватьНабранныйЧек");	
	КонецЕсли;
	
	СуммаДоРасчета = СтрокаТабличнойЧасти.Сумма;
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(
		Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
		
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		ПодготовитьОплатуБонусамиКСторнированиюПриИзмененииКоличества();
	КонецЕсли;
	ОбработкаТабличнойЧастиТоварыКлиент.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект, СтруктураДействий, СтрокаТабличнойЧасти, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элементы.Товары,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = СтрокаТабличнойЧасти.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
			Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
	КонецЕсли;
	
	СуммаПослеРасчета = СтрокаТабличнойЧасти.Сумма;
	УменьшениеСуммыЧекаККМ = СуммаДоРасчета - СуммаПослеРасчета;
	УменьшениеСуммыЧекаККМ = ?(УменьшениеСуммыЧекаККМ > 0, УменьшениеСуммыЧекаККМ, 0);
	
	КоличествоУпаковок = ?(КоличествоУпаковок = 0, СтрокаТабличнойЧасти.КоличествоУпаковок, КоличествоУпаковок);
	Если НЕ ПредыдущееКоличество = 0 И ПредыдущееКоличество <> КоличествоУпаковок Тогда
		Если ПредыдущееКоличество > КоличествоУпаковок Тогда
			ВидДействияКассираВРМК = "УменьшениеКоличества";
		ИначеЕсли ПредыдущееКоличество < КоличествоУпаковок Тогда
			ВидДействияКассираВРМК = "УвеличениеКоличества";
		КонецЕсли;
		
		ЛогированиеИзмененийСтроки(
			ВидДействияКассираВРМК,
			ПредыдущееКоличество,
			СтрокаТабличнойЧасти.Номенклатура,
			СтрокаТабличнойЧасти.Характеристика,
			КоличествоУпаковок,
			Неопределено,
			УменьшениеСуммыЧекаККМ);
	КонецЕсли;
	
	Если Объект.ПродажаПоЗаказу Тогда
		ОбработкаТабличнойЧастиТоварыКлиентСервер.РаспределитьСуммуИзмененийСтрокиТоваровНаТабличнуюЧастьСкидки(
			Объект.СкидкиНаценки,
			СтрокаТабличнойЧасти.КлючСвязи,
			СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки);
	Иначе
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	КонецЕсли;
	
	ПриИзмененииЭлементаГосИС();
	ОбновитьФормуНаКлиенте();
	ОбновлениеДисплеяПокупателя("ИзмененияКоличества");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУказаниеСерий(ЗначениеВозврата, ПараметрыФормыУказанияСерий) Экспорт
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
		ОбновитьФормуНаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораВнесенияДенег(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено И ТипЗнч(РезультатОткрытияФормы) = Тип("Структура") Тогда
		ПараметрыВыполнения = ДенежныеСредстваКлиент.ПараметрыВыполненияОперацииВнесениеДенег();
		ПараметрыВыполнения.СуммаВнесения = РезультатОткрытияФормы.Сумма;
		ПараметрыВыполнения.РКО = РезультатОткрытияФормы.РасходныйКассовыйОрдер;
		ПараметрыВыполнения.КассаККМ = РезультатОткрытияФормы.Касса;
		ПараметрыВыполнения.УникальныйИдентификатор = УникальныйИдентификатор;
		
		Оповещение = Новый ОписаниеОповещения(
			"ОповещениеОткрытьФормуВыбораВнесенияДенегЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		ДенежныеСредстваКлиент.НачатьВнесениеДенег(Оповещение, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораВнесенияДенегЗавершение(РезультатВыполнения, ПараметрыВыполнения) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда 
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(
			НСтр("ru = 'Ошибка внесения денег.'"), ПараметрыВыполнения.ТекстСообщения)
	Иначе
		ЛогированиеБезДополнительныхДанных("ВнесениеДенег", , РезультатВыполнения.СуммаВнесения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуЗаменыПравПользователя(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		глЗначениеПеременнойУстановить("ПользовательИзмененныхПрав", РезультатОткрытияФормы, Истина);
		глЗначениеПеременнойУстановитьСервер("ПользовательИзмененныхПрав", РезультатОткрытияФормы, Истина);
		Оповестить("ОбновитьФормуМенюРМК");
		ЛогированиеБезДополнительныхДанных("ЗаменаПользователя", ,ДополнительныеПараметры.Пользователь);
		
		ПриИзмененииПравСервер();
		ОбновитьФормуНаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораЧекаПриПродолженииЧека(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		ЧекККМВОбработке = РезультатОткрытияФормы.ЧекККМ;
		ТребуетсяПересчетСкидок = Истина;
		Отказ = Ложь;
		
		ПродолженииЧекаСервера(ЧекККМВОбработке, Отказ, ТребуетсяПересчетСкидок);
		УстановитьДоступностьОтдельныхЭлементовФормы("КомандаЧО09ОперацияДС", ДоступностьПриемаДС());
		ОбновитьФормуНаКлиенте();
		
		Если Отказ Тогда
			ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
			ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка загрузки чека.'");
			ПараметрыИнформации.ТекстИнформации =
				НСтр("ru = 'Возникла ошибка при попытке загрузить отложенный чек.'") + Символы.ПС +
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
			
			Возврат;
		КонецЕсли;
		
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
			Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
		Если ТребуетсяПересчетСкидок Тогда
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
		КонецЕсли;
		
		ЛогированиеПоЧеку("ЧекПродолжен", РезультатОткрытияФормы.ЧекККМ);
		ОбновитьФормуНаКлиенте();
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораЧекаПриПечатиПробитогоЧека(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда

		МассивСсылокЧеков = РезультатОткрытияФормы.МассивЧеков;
		
		НапечататьЧекиККМ(МассивСсылокЧеков);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораЧекаПриВозврате(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	// &ЗамерПроизводительности  
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ВыборЧекаПриВозврате");	
	
	Если РезультатОткрытияФормы <> Неопределено Тогда
		
		ЧекККМПродажаОснование = РезультатОткрытияФормы.ЧекККМ;
		
		ДополнительныеПараметры = Новый Структура;
		Если ЗначениеЗаполнено(ЧекККМПродажаОснование) Тогда
			ДополнительныеПараметры.Вставить("ЧекККМПродажаОснование", ЧекККМПродажаОснование);
		Иначе
			ДополнительныеПараметры.Вставить("ЧекККМПродажаОснование",
				ПредопределенноеЗначение("Документ.ЧекККМ.ПустаяСсылка"));
		КонецЕсли;
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ОповещениеОткрытьФормуВыбораПричиныВозврата", ЭтотОбъект, ДополнительныеПараметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораПричиныВозврата",,
			УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	КонецЕсли;
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораЧекаПриПробитииЧека(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		ЧекККМСсылка = РезультатОткрытияФормы.ЧекККМ;
		
		Если РезультатОткрытияФормы.Проведен Тогда
			КассаККМ = РезультатОткрытияФормы.КассаККМ;
			
			ПараметрыЗаполненияЧекаККМ = Новый Структура;
			МассивСсылокЧеков = Новый Массив;
			
			Контекст = Новый Структура();
			Контекст.Вставить("ЧекККМСсылка", ЧекККМСсылка);
			Контекст.Вставить("КассаККМ", КассаККМ);
			Контекст.Вставить("МассивСсылокЧеков", МассивСсылокЧеков);
			
			Оповещение = Новый ОписаниеОповещения(
				"ОповещениеОткрытьФормуВыбораЧекаПриПробитииЧекаЗавершение", ЭтотОбъект, Контекст);
			ПробитьЧекККМ(Оповещение, ЧекККМСсылка, КассаККМ, ПараметрыЗаполненияЧекаККМ);
			
		Иначе
			ЧекККМВОбработке = РезультатОткрытияФормы.ЧекККМ;
			Отказ = Ложь;
			ЗаполнитьДаннымиПоЧекуККМ(ЧекККМВОбработке, Отказ);
			Если Отказ Тогда
				ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
				ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка загрузки чека.'");
				ПараметрыИнформации.ТекстИнформации = НСтр("ru = 'Возникла ошибка при попытке загрузить чек.'") + Символы.ПС
					+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
				Возврат;
			КонецЕсли;
			
			ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, 
				КэшированныеЗначения, 
				ПараметрыУказанияСерий);
				
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
			
			ОбновитьФормуНаКлиенте();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораЗаказаПокупателя(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		Объект.ЗаказПокупателя = РезультатОткрытияФормы.ЗаказПокупателя;
		ЗаполнитьНаОснованииЗаказаПокупателя();
		ЗавершитьОбработкуДокументаОснования();
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораПричиныВозврата(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если РезультатОткрытияФормы = Неопределено Тогда
		Объект.ЧекККМПродажа = ПредопределенноеЗначение("Документ.ЧекККМ.ПустаяСсылка");
		УстановитьДоступностьОтдельныхЭлементовФормы("КомандаЧО09ОперацияДС", ДоступностьПриемаДС());
	Иначе
		ПричинаВозврата = РезультатОткрытияФормы.ПричинаВозврата;
		
		СоздатьНовыйНаборКлиент();
		
		Объект.ЧекККМПродажа = ДополнительныеПараметры.ЧекККМПродажаОснование;
		Объект.АналитикаХозяйственнойОперации = ПричинаВозврата;
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат");
		
		Если ЗначениеЗаполнено(Объект.ЧекККМПродажа) Тогда
			ЗаполнитьНаОснованииЧекаККМ(Объект.ЧекККМПродажа);
			УстановитьДоступностьОтдельныхЭлементовФормы("КомандаЧО09ОперацияДС", ДоступностьПриемаДС());
		КонецЕсли;
		
		Если Объект.Товары.Количество() > 0  Тогда
			ДозаполнитьТаблицыОбъекта();
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		КонецЕсли;
		
		Если Объект.ОперацияСДенежнымиСредствами 
			И НЕ ЗначениеЗаполнено(Объект.ДокументРасчета) Тогда
			ЭтоВозвратАванса = Истина;
		КонецЕсли;
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
		
		УстановитьДоступностьОтдельныхЭлементовФормы("КомандаПО35ЗаявлениеНаВозврат", ЭтоВозвратКлиент());
		УстановитьДоступностьОтдельныхЭлементовФормы("КартинкаПО35ЗаявлениеНаВозвратНажатие",  ЭтоВозвратКлиент());
		
		ОбновитьФормуНаКлиенте();
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
			Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДисконтнойКарты(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		ЛогированиеБезДополнительныхДанных(
			"ВыбранаДисконтнаяКарта",
			ПредопределенноеЗначение("Справочник.ИнформационныеКарты.ПустаяСсылка"),
			Объект.ДисконтнаяКарта);
			
		Если РезультатОткрытияФормы.Свойство("ДисконтнаяКарта") Тогда
			
			Объект.ДисконтнаяКарта = РезультатОткрытияФормы.ДисконтнаяКарта;
			Объект.Телефон		   = "";
			Объект.АдресЭП		   = "";
			
			Модифицированность = Истина;
			ТекстСообщенияСменыКарты = "";
			ПриИзмененииДисконтнаяКартаСервер(ТекстСообщенияСменыКарты);
			ОбновитьДанныеSMSEmail();
			
			Если Не Объект.ПродажаПоЗаказу Тогда
				ПересчитатьИлиОтменитьСкидкиИОплатуБонусами(Истина);
			КонецЕсли;
			
			Если ПустаяСтрока(ТекстСообщенияСменыКарты) Тогда
				ПровестиОпрос();
				ОбновитьФормуНаКлиенте();
			Иначе
				ЗаголовокИнформации = "";
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщенияСменыКарты);
			КонецЕсли;
		Иначе
			КодЗначение = РезультатОткрытияФормы.ВведенноеЧисло;
			Если РезультатОткрытияФормы.РежимПоискаКарты = "ФИО"
				ИЛИ РезультатОткрытияФормы.РежимПоискаКарты = "НомерТелефона" 
				ИЛИ РезультатОткрытияФормы.РежимПоискаКарты = "Email" Тогда
				НайтиИУстановитьКарту(РезультатОткрытияФормы, ДополнительныеПараметры);
			Иначе
				Если ЗначениеЗаполнено(КодЗначение) Тогда
					ИсполняемаяОперацияЛогирования = "ВведенНомерКарты";
					СтруктураПараметровКлиента = ПолученМагнитныйКод(КодЗначение);
					ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуПоискаДисконтнойКарты(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		КодЗначение = РезультатОткрытияФормы.ВведенноеЧисло;
		Если РезультатОткрытияФормы.РежимПоискаКарты = "ФИО"
			ИЛИ РезультатОткрытияФормы.РежимПоискаКарты = "НомерТелефона" 
			ИЛИ РезультатОткрытияФормы.РежимПоискаКарты = "Email" Тогда
			НайтиИУстановитьКарту(РезультатОткрытияФормы, ДополнительныеПараметры);
		Иначе
			Если ЗначениеЗаполнено(КодЗначение) Тогда
				ИсполняемаяОперацияЛогирования = "ВведенНомерКарты";
				СтруктураПараметровКлиента = ПолученМагнитныйКод(КодЗначение);
				ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуУправляемыхСкидок(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если РезультатОткрытияФормы <> Неопределено
		И ТипЗнч(РезультатОткрытияФормы) = Тип("Структура") Тогда
		
		УправляемыеСкидки.ЗагрузитьЗначения(РезультатОткрытияФормы.МассивУправляемыхСкидок);
		
		// Добавление новых управляемых скидок.
		
		Для каждого СкидкаНаценка Из РезультатОткрытияФормы.МассивУправляемыхСкидок Цикл
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("СкидкаНаценка", СкидкаНаценка);
			
			Если Объект.УправляемыеСкидки.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				СтрокаУправляемыеСкидки = Объект.УправляемыеСкидки.Добавить();
				СтрокаУправляемыеСкидки.СкидкаНаценка = СкидкаНаценка;
				ЛогированиеБезДополнительныхДанных("ВыбранаУправляемаяСкидка", , СкидкаНаценка);
			КонецЕсли;
			
		КонецЦикла;
		
		// Удаление управляемых скидок.
		
		КолвоЭлементовКоллекции = Объект.УправляемыеСкидки.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
			ЭлементКоллекции = Объект.УправляемыеСкидки[КолвоЭлементовКоллекции - ОбратныйИндекс];
			
			Если НЕ РезультатОткрытияФормы.МассивУправляемыхСкидок.Найти(ЭлементКоллекции.СкидкаНаценка) = Неопределено Тогда
				ЛогированиеБезДополнительныхДанных("ОтменаУправляемойСкидки", ЭлементКоллекции.СкидкаНаценка);
				Объект.УправляемыеСкидки.Удалить(ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого КодСкидки Из РезультатОткрытияФормы.СписокОдноразовыхКодов Цикл
			НоваяСтрока = Объект.ПредъявленныеКодыОднократныхСкидок.Добавить();
			НоваяСтрока.КодСкидки = КодСкидки.Значение;
		КонецЦикла;
		
		НазначитьАвтоматическиеСкидкиКлиент();
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуДокументаЗаменаОднойКарты(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		Объект.ДисконтнаяКарта = РезультатОткрытияФормы;
		Модифицированность = Истина;
		ДисконтнаяКартаПриИзменении();
		ОтменитьОплатуБонусами();
		
		ДисконтнаяКартаДляЗамены = ПредопределенноеЗначение("Справочник.ИнформационныеКарты.ПустаяСсылка");
		
		ОбновитьФормуНаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуРучныхСкидок(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		ПодключитьОбработчикОжидания(
			"Подключаемый_КомандаСкидки" + СтрЗаменить(РезультатОткрытияФормы, "Команда", ""), 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораНоменклатурыТоварыПередНачаломДобавления(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		ДобавитьНоменклатуруВТабЧасть(РезультатОткрытияФормы, Неопределено, Неопределено, 1, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораНоменклатурыТоварыНоменклатураНачалоВыбора(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатОткрытияФормы) Тогда
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		
		//ИнтеграцияИСМПТК_РозничноеВыбытие
		НужноОчиститьМарки = (Не СтрокаТабличнойЧасти.Номенклатура = РезультатОткрытияФормы);
		//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
		
		СтрокаТабличнойЧасти.Номенклатура = РезультатОткрытияФормы;
		
		//ИнтеграцияИСМПТК_РозничноеВыбытие
		Если УчетМаркировкаИСМПТК
			И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() 
			И НужноОчиститьМарки Тогда
			РозничноеВыбытиеИСМПТККлиентПереопределяемый.ОчиститьМаркиИСМПТК(Объект, СтрокаТабличнойЧасти);
		КонецЕсли;
		//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
		
		ПараметрДействия = Новый Структура;
		ПараметрДействия.Вставить("ОткрытаБлокирующаяФорма", Ложь);
		ПараметрДействия.Вставить("ОбновитьПоследнееРедактируемыеЗначения");
		ПараметрДействия.Вставить("ДобавитьСерийныйНомерИОткрытьВводСерии", Неопределено);
		
		ТоварыПриИзмененииНоменклатуры(СтрокаТабличнойЧасти,, ПараметрДействия);
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
			
		Если НЕ ПараметрДействия.ОткрытаБлокирующаяФорма Тогда
			ДобавитьСерийныйНомерИОткрытьВводСерии(СтрокаТабличнойЧасти);
			ОбновитьПоследнееРедактируемыеЗначения(СтрокаТабличнойЧасти)
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораПродавца(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		Объект.Продавец = РезультатОткрытияФормы;
		ЛогированиеВводаПродавца(
			Неопределено,
			ПредопределенноеЗначение("Справочник.ИнформационныеКарты.ПустаяСсылка"),
			Объект.Продавец);
		ПродавецПоУмолчанию = Объект.Продавец;
	КонецЕсли;
	УстановитьЗаголовок();
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаЧислаВвестиШтрихкод(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		КодЗначение = РезультатОткрытияФормы.ВведенноеЧисло;
		
		ДанныеШтрихкода = Новый Структура;
		ДанныеШтрихкода.Вставить("Количество", 1);
		ДанныеШтрихкода.Вставить("Штрихкод"  , КодЗначение);
		
		ОбработатьКодМаркировки(ДанныеШтрихкода);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаЧислаВвестиВыемкаДенегЗавершение(РезультатОперации, ДополнительныеПараметры) Экспорт;
	
	Если РезультатОперации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОперации.Результат Тогда
		ЛогированиеБезДополнительныхДанных("ВыемкаДенег", , РезультатОперации.ИзымаемаяСумма);
	Иначе
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(
			НСтр("ru = 'Ошибка выемки денег'"), РезультатОперации.ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаЧислаВвестиВыемкаДенег(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатЗакрытия = Неопределено Тогда
		
		Если ЗначениеЗаполнено(РезультатЗакрытия.ВведенноеЧисло) Тогда
			
			ДополнительныеПараметрыВыемки = Новый Структура;
			ДополнительныеПараметрыВыемки.Вставить("ДоговорКонтрагента", РезультатЗакрытия.ПараметрыВыемки.ДоговорКонтрагента);
			
			ПараметрыВыполнения = ДенежныеСредстваКлиент.ПараметрыВыполненияОперацииВыемкаДенег();
			ПараметрыВыполнения.ИзымаемаяСумма          = РезультатЗакрытия.ВведенноеЧисло;
			ПараметрыВыполнения.КассаККМ                = ДополнительныеПараметры.ЗначениеВыбораКасса;
			ПараметрыВыполнения.УникальныйИдентификатор = УникальныйИдентификатор;
			ПараметрыВыполнения.ДополнительныеПараметры = ДополнительныеПараметрыВыемки; 
			ПараметрыВыполнения.БезВыводаСообщений      = Истина;
			
			ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
			Если ВозможностьОперацииВыемкиДенежныхСредств(ПараметрыВыполнения, ПараметрыИнформации) Тогда
				Оповещение = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаЧислаВвестиВыемкаДенегЗавершение", ЭтотОбъект);
				ДенежныеСредстваКлиент.НачатьВыемкуДенег(Оповещение, ПараметрыВыполнения); 
			Иначе
				ЭтотОбъект.Доступность = Истина;
				ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаЧислаТоварыПриИзмененииНоменклатуры(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	ПараметрДействия = ДополнительныеПараметры.ПараметрДействия;
	СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ПараметрДействия.ИдентификаторСтроки);
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВведенноеЧисло = 0;
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		Если РезультатОткрытияФормы.Свойство("Платеж") Тогда
			// Введены параметры агентского платежа.
			ВведенноеЧисло = РезультатОткрытияФормы.Платеж;
			Если ПараметрДействия.Свойство("ПересчиталиСумму") И ПараметрДействия.ПересчиталиСумму Тогда
				СтрокаТабличнойЧасти.Сумма = ВведенноеЧисло;
			Иначе
				СтрокаТабличнойЧасти.Цена = ВведенноеЧисло;
			КонецЕсли;
		Иначе
			ВведенноеЧисло = РезультатОткрытияФормы.ВведенноеЧисло;
			СтрокаТабличнойЧасти.Цена = ВведенноеЧисло;
			ПараметрДействия.Вставить("ПересчиталиЦену", Истина);
		КонецЕсли;
	Иначе
		ПараметрДействия.Вставить("ПересчиталиСумму", Ложь);
		ПараметрДействия.Вставить("ПересчиталиЦену",  Ложь);
	КонецЕсли;
	
	Если ВведенноеЧисло = 0 Тогда
		Если ПараметрДействия.Свойство("ПредупреждениеНулевойЦены") Тогда
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ПараметрДействия.ПредупреждениеНулевойЦены);
		Иначе
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Цена не установлена.'"));
		КонецЕсли;
		Если ПараметрДействия.Свойство("НеУдалятьСтроку") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПродолжитьДействияТоварыПриИзмененииНоменклатуры(ПараметрДействия);
	ЗавершитьДействияТоварыПриИзмененииНоменклатуры(ПараметрДействия);
	
	Если ПараметрДействия.ПрекратитьДействия Тогда
		ОбновитьКэшМаркируемойПродукции();
		//ИнтеграцияИСМПТК_РозничноеВыбытие
		Если УчетМаркировкаИСМПТК И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
			//Нужно проверить наличие в чеке предзаполненных КМ, т.к. если пользователь отказался от уточнения эти коды зависнут.
			СтрокиБезИндексаСвязи = Объект.КодыМаркировкиИСМПТК.НайтиСтроки(Новый Структура("КлючСвязи", -1));
			Если Не СтрокиБезИндексаСвязи.Количество() = 0 Тогда
				Для Каждого Строка Из СтрокиБезИндексаСвязи Цикл
					Объект.КодыМаркировкиИСМПТК.Удалить(Строка);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
		Возврат;
	КонецЕсли;
	
	СерийныйНомер = Неопределено;
	ОткрыватьРедактированиеСтроки = Ложь;
	Если ПараметрДействия.Свойство("ОткрыватьРедактированиеСтроки") Тогда
		ОткрыватьРедактированиеСтроки = ПараметрДействия.ОткрыватьРедактированиеСтроки;
	КонецЕсли;
	
	Если ПараметрДействия.Свойство("НеобходимостьВводаАкцизнойМарки") 
		И ПараметрДействия.НеобходимостьВводаАкцизнойМарки Тогда
		
		//ИнтеграцияИСМПТК_РозничноеВыбытие
		Если УчетМаркировкаИСМПТК И СтрокаТабличнойЧасти.МаркируемаяПродукцияИСМПТК Тогда
			
			Если РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда 
				
				ВидПродукцииШКПоМаркировке = ПолучитьВидПродукцииПоНоменклатуре(СтрокаТабличнойЧасти.Номенклатура);
				Если ЗначениеЗаполнено(ВидПродукцииШКПоМаркировке) 
					И РозничноеВыбытиеИСМПТКВызовСервера.ПроверитьВключениеУчетаТГ(ВидПродукцииШКПоМаркировке) Тогда
					//После подбора номенклатуры, если она имеет особенности учета - маркируемая,
					//предупреждаем пользователя о том, что необходимо указать код маркировки для выбранной номенклатуры.
					ТекстСообщения = НСтр("ru = 'Внимание! Среди выбранных товаров есть маркируемые: %1! У таких товаров необходимо сразу сканировать коды маркировки в форме документа!'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаТабличнойЧасти.Номенклатура); 
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнитьПризнакКодаМаркировкиВТоварах();
			ПерезаполнитьПризнакиМаркировкиИСМПТК();
			ПараметрДействия.ОткрытаБлокирующаяФорма = Ложь;
		КонецЕсли;
		//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
		
		ДополнительныеПараметры = Новый Структура;
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
			ДополнительныеПараметры.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТабличнойЧасти, "ВидПродукцииИС")
			И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидПродукцииИС) Тогда
			ДополнительныеПараметры.Вставить("ВидПродукцииИС", СтрокаТабличнойЧасти.ВидПродукцииИС);
		КонецЕсли;
		ВыполнитьПереопределяемуюКоманду(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Если ПараметрДействия.Свойство("ДобавитьСерийныйНомерИОткрытьВводСерии", СерийныйНомер) Тогда
		ДобавитьСерийныйНомерИОткрытьВводСерии(СтрокаТабличнойЧасти, СерийныйНомер, ОткрыватьРедактированиеСтроки);
	КонецЕсли;
	
	Если ПараметрДействия.Свойство("ОбновитьПоследнееРедактируемыеЗначения") Тогда
		ОбновитьПоследнееРедактируемыеЗначения(СтрокаТабличнойЧасти);
	КонецЕсли;
	
	Если ПараметрДействия.Свойство("ОбновлениеДисплеяПокупателяДобавлениеТовара") Тогда
		ОбновлениеДисплеяПокупателяДобавлениеТовара(СтрокаТабличнойЧасти);
	КонецЕсли;
	
	Если ПараметрДействия.Свойство("ТоварыПриИзмененииНаСервере") Тогда
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	КонецЕсли;
	
	Если ПараметрДействия.Свойство("ПересчиталиЦену") Тогда
		НеобходимВводЦены = Ложь;
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	КонецЕсли;
	
	ОбновитьФормуНаКлиенте();
	
	Если ОткрыватьРедактированиеСтроки Тогда
		ПодключитьОбработчикОжидания("РедактированиеСтрокиКлиент", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаЧислаТоварыПриИзмененииХарактеристикиНоменклатуры(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ПараметрДействия.ИдентификаторСтроки);
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Цена = 0 ;
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		Цена = РезультатОткрытияФормы.ВведенноеЧисло;
		СтрокаТабличнойЧасти.Цена = Цена;
		ДополнительныеПараметры.ПараметрДействия.ПересчиталиЦену = Ложь;
		НеобходимВводЦены = Ложь;
	КонецЕсли;
	
	Если Цена = 0 Тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Цена не установлена.'"));
	КонецЕсли;
	
	ЗавершитьДействияТоварыПриИзмененииХарактеристикиНоменклатуры(ДополнительныеПараметры.ПараметрДействия);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаЧислаИзменитьПроцентРучнойСкидкиНаценкиВСтроке(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЧислоВвода = ?(РезультатОткрытияФормы.ВведенноеЧисло = Неопределено, 0, РезультатОткрытияФормы.ВведенноеЧисло);
		
		СуммаДоРасчета = СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.ПроцентРучнойСкидки = ДополнительныеПараметры.Знак * ЧислоВвода;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
			ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(
			Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
			
		ОбработкаТабличнойЧастиТоварыКлиент.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект, СтруктураДействий, СтрокаТабличнойЧасти, КэшированныеЗначения);
			
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		
		ОбновитьФормуНаКлиенте();
		ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");
		
		СуммаПослеРасчета = СтрокаТабличнойЧасти.Сумма;
		УменьшениеСуммыЧекаККМ = СуммаДоРасчета - СуммаПослеРасчета;
		УменьшениеСуммыЧекаККМ = ?(УменьшениеСуммыЧекаККМ > 0, УменьшениеСуммыЧекаККМ, 0);
		Если ЧислоВвода = 0  Тогда
			ЛогированиеВводаРучнойСкидки(НСтр("ru = 'Отмена ручной скидки в строке'") , 0, 0);
		Иначе
			ЛогированиеВводаРучнойСкидки(
				ДополнительныеПараметры.ЗаголовокФормы,
				СтрокаТабличнойЧасти.ПроцентРучнойСкидки,
				УменьшениеСуммыЧекаККМ);
		КонецЕсли;
		
		Если АвтоматическийРасчетСкидок И Объект.Товары.Количество() > 0 Тогда
			НазначитьАвтоматическиеСкидкиКлиент(Ложь, Ложь);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаЧислаИзменитьСуммуРучнойСкидкиНаценкиВСтроке(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЧислоВвода = ?(РезультатОткрытияФормы.ВведенноеЧисло = Неопределено, 0, РезультатОткрытияФормы.ВведенноеЧисло);
		
		СуммаДоРасчета = СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.СуммаРучнойСкидки = ДополнительныеПараметры.Знак * ЧислоВвода;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",
			Новый Структура("Очищать, ПересчитыватьСуммуСкидки", Ложь, Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
			ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(
			Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
			
		ОбработкаТабличнойЧастиТоварыКлиент.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект, СтруктураДействий, СтрокаТабличнойЧасти, КэшированныеЗначения);
			
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		
		ОбновитьФормуНаКлиенте();
		ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");
		
		СуммаПослеРасчета = СтрокаТабличнойЧасти.Сумма;
		УменьшениеСуммыЧекаККМ = СуммаДоРасчета - СуммаПослеРасчета;
		УменьшениеСуммыЧекаККМ = ?(УменьшениеСуммыЧекаККМ > 0, УменьшениеСуммыЧекаККМ, 0);
		Если ЧислоВвода = 0  Тогда
			ЛогированиеВводаРучнойСкидки(НСтр("ru = 'Отмена ручной скидки в строке'") , 0, 0);
		Иначе
			ЛогированиеВводаРучнойСкидки(
				ДополнительныеПараметры.ЗаголовокФормы,
				СтрокаТабличнойЧасти.СуммаРучнойСкидки,
				УменьшениеСуммыЧекаККМ);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаЧислаИзменитьПроцентРучнойСкидкиНаценкиВЧеке(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		ЧислоВвода = ?(РезультатОткрытияФормы.ВведенноеЧисло = Неопределено, 0, РезультатОткрытияФормы.ВведенноеЧисло);
		
		СуммаДоРасчета = Объект.Товары.Итог("Сумма") + Объект.Товары.Итог("СуммаСкидкиОплатыБонусом");
		ПроцентРучнойСкидкиНаценки = ЧислоВвода * ДополнительныеПараметры.Знак;
		СуммаРучнойСкидкиНаценки   = ДополнительныеПараметры.СуммаБезСкидок * ПроцентРучнойСкидкиНаценки / 100;
		
		НазначитьРучнуюСкидку(СуммаРучнойСкидкиНаценки);
		
		ОбработкаТабличнойЧастиТоварыКлиент.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		
		ОбновитьФормуНаКлиенте();
		ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");
		
		СуммаПослеРасчета = Объект.Товары.Итог("Сумма") + Объект.Товары.Итог("СуммаСкидкиОплатыБонусом");
		УменьшениеСуммыЧекаККМ = СуммаДоРасчета - СуммаПослеРасчета;
		УменьшениеСуммыЧекаККМ = ?(УменьшениеСуммыЧекаККМ > 0, УменьшениеСуммыЧекаККМ, 0);
		Если ЧислоВвода = 0  Тогда
			ЛогированиеВводаРучнойСкидки(НСтр("ru = 'Отмена ручной скидки в чеке'") , 0, 0);
		Иначе
			ЛогированиеВводаРучнойСкидки(
				ДополнительныеПараметры.ЗаголовокФормы,
				ПроцентРучнойСкидкиНаценки,
				УменьшениеСуммыЧекаККМ);
		КонецЕсли;
			
		Если АвтоматическийРасчетСкидок И Объект.Товары.Количество() > 0 Тогда
			НазначитьАвтоматическиеСкидкиКлиент(Ложь, Ложь);
		КонецЕсли;
			
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаЧислаИзменитьСуммуРучнойСкидкиНаценкиВЧеке(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		ЧислоВвода = ?(РезультатОткрытияФормы.ВведенноеЧисло = Неопределено, 0, РезультатОткрытияФормы.ВведенноеЧисло);
		
		СуммаДоРасчета = Объект.Товары.Итог("Сумма");
		СуммаРучнойСкидкиНаценки = ЧислоВвода * ДополнительныеПараметры.Знак;
		НазначитьРучнуюСкидку(СуммаРучнойСкидкиНаценки);
		
		ОбработкаТабличнойЧастиТоварыКлиент.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		
		ОбновитьФормуНаКлиенте();
		
		ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");
		
		СуммаПослеРасчета = Объект.Товары.Итог("Сумма");
		УменьшениеСуммыЧекаККМ = СуммаДоРасчета - СуммаПослеРасчета;
		УменьшениеСуммыЧекаККМ = ?(УменьшениеСуммыЧекаККМ > 0, УменьшениеСуммыЧекаККМ, 0);
		Если ЧислоВвода = 0  Тогда
			ЛогированиеВводаРучнойСкидки(НСтр("ru = 'Отмена ручной скидки в чеке'") , 0, 0);
		Иначе
			ЛогированиеВводаРучнойСкидки(
				ДополнительныеПараметры.ЗаголовокФормы,
				СуммаРучнойСкидкиНаценки,
				УменьшениеСуммыЧекаККМ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораКассыПриОткрытииДенежногоЯщика(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено И ТипЗнч(РезультатОткрытияФормы) = Тип("Структура") Тогда
		ЗначениеВыбораКасса = РезультатОткрытияФормы.Касса;
		ЗавершитьВыбораКассыПриОткрытииДенежногоЯщика(ЗначениеВыбораКасса);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораКассыВвестиВыемкаДенег(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено И ТипЗнч(РезультатОткрытияФормы) = Тип("Структура") Тогда
		ЗначениеВыбораКасса = РезультатОткрытияФормы.Касса;
		ЗавершитьВыбораКассыВвестиВыемкаДенег(ЗначениеВыбораКасса);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораКассыОтчетБезГашения(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено И ТипЗнч(РезультатОткрытияФормы) = Тип("Структура") Тогда
		ЗначениеВыбораКасса = РезультатОткрытияФормы.Касса;
		НапечататьОтчетБезГашения(ЗначениеВыбораКасса)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаСерийныхНомеров(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено 
		И ТипЗнч(РезультатОткрытияФормы) = Тип("Массив") Тогда
		
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		Если СтрокаТЧ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТЧСерийныеНомера = Объект.СерийныеНомера;
		НовыйКлючСвязи = ОбработкаТабличнойЧастиТоварыКлиент.ДобавитьСерийныеНомераВТабличнуюЧасть(
			ТЧСерийныеНомера, РезультатОткрытияФормы, ДополнительныеПараметры.ТекущийКлючСвязи);
		Количество = РезультатОткрытияФормы.Количество();
		ПоследнееРедактированиеКоличество = СтрокаТЧ.КоличествоУпаковок;
		ЭтотОбъект.Модифицированность = Истина;
		СтрокаТЧ.КлючСвязиСерийныхНомеров = НовыйКлючСвязи;
		СтрокаТЧ.КоличествоУпаковок = Количество;
		
		ТоварыПриИзмененииКоличестваУпаковок(СтрокаТЧ, ПоследнееРедактированиеКоличество);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораНоменклатуры(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		ЛогированиеВводаНоменклатурыИХарактеристики(
			ДополнительныеПараметры.ТекКод,
			РезультатОткрытияФормы.Номенклатура,
			РезультатОткрытияФормы.Характеристика);
		
		ДобавитьНоменклатуруВТабЧастьКлиент(РезультатОткрытияФормы);
	КонецЕсли;
	ОбновитьФормуНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуРедактированияСтроки(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатОткрытияФормы) = Тип("Структура") Тогда
		
		ДанныеСтрокиТовары = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		
		Если ДанныеСтрокиТовары = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если РезультатОткрытияФормы.Команда = "Сторно" Тогда
			Отказ = Ложь;
			ТоварыПередУдалениемКлиент(Отказ);
			
			Если НЕ Отказ Тогда
				ОбработкаТабличнойЧастиТоварыКлиентСервер.УдалитьСтрокиАгентскогоВознаграждения(Объект.Товары, ДанныеСтрокиТовары);
				Объект.Товары.Удалить(ДанныеСтрокиТовары);
				ТоварыПослеУдаленияСервер();
				ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
				ОбновитьФормуНаКлиенте();
			КонецЕсли;
		ИначеЕсли РезультатОткрытияФормы.Команда = "Редактирование" Тогда
			
			НуженПересчетСкидок = Ложь;
			Если РезультатОткрытияФормы.ИзмененыСерии Тогда
				
				ОбработатьУказаниеСерийСервер(РезультатОткрытияФормы.ПараметрыФормыУказанияСерий);
				
			ИначеЕсли РезультатОткрытияФормы.ИзмененыСертификаты Тогда
				
				ПараметрыФормыУказанияСертификатов = РезультатОткрытияФормы.ПараметрыФормыУказанияСертификатов;
				ТекущиеДанныеИдентификатор = РезультатОткрытияФормы.ТекущиеДанныеИдентификатор;
				СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
				Если СтрокаТЧ <> Неопределено Тогда
					МассивСерийныхНомеров = ПараметрыФормыУказанияСертификатов.МассивСерийныхНомеров;
					ТекущийКлючСвязи = ПараметрыФормыУказанияСертификатов.ТекущийКлючСвязи;
					ТЧСерийныеНомера = Объект.СерийныеНомера;
					НовыйКлючСвязи = ОбработкаТабличнойЧастиТоварыКлиент.ДобавитьСерийныеНомераВТабличнуюЧасть(
						ТЧСерийныеНомера, 
						МассивСерийныхНомеров, 
						ТекущийКлючСвязи);
					Количество = МассивСерийныхНомеров.Количество();
					ПоследнееРедактированиеКоличество = СтрокаТЧ.КоличествоУпаковок;
					ЭтотОбъект.Модифицированность     = Истина;
					СтрокаТЧ.КлючСвязиСерийныхНомеров = НовыйКлючСвязи;
					СтрокаТЧ.КоличествоУпаковок       = Количество;
					
					ТоварыПриИзмененииКоличестваУпаковок(СтрокаТЧ, ПоследнееРедактированиеКоличество);
				КонецЕсли;
			ИначеЕсли ДанныеСтрокиТовары.КоличествоУпаковок <> РезультатОткрытияФормы.Количество Тогда
				ПоследнееРедактированиеКоличество = ДанныеСтрокиТовары.КоличествоУпаковок;
				ДанныеСтрокиТовары.КоличествоУпаковок = РезультатОткрытияФормы.Количество;
				ТоварыПриИзмененииКоличестваУпаковок(ДанныеСтрокиТовары, ПоследнееРедактированиеКоличество);
			КонецЕсли;
			
			Если ДанныеСтрокиТовары.Цена <> РезультатОткрытияФормы.Цена Тогда
				ДанныеСтрокиТовары.Цена = РезультатОткрытияФормы.Цена;
				ТоварыЦенаПриИзменении(Неопределено);
				НуженПересчетСкидок = Истина;
			КонецЕсли;
			
			Если ДанныеСтрокиТовары.Продавец <> РезультатОткрытияФормы.Продавец Тогда
				ЛогированиеБезДополнительныхДанных(
					"ИзменениеПродавца",
					ДанныеСтрокиТовары.Продавец,
					РезультатОткрытияФормы.Продавец);
				ДанныеСтрокиТовары.Продавец = РезультатОткрытияФормы.Продавец;
			КонецЕсли;
			
			Если ДанныеСтрокиТовары.Упаковка <> РезультатОткрытияФормы.Упаковка Тогда 
				ДанныеСтрокиТовары.Упаковка = РезультатОткрытияФормы.Упаковка;
				ТоварыПриИзмененииУпаковки(ДанныеСтрокиТовары);
				ТоварыПриИзмененииКоличестваУпаковок(ДанныеСтрокиТовары);
			КонецЕсли;
			
			Если НуженПересчетСкидок Тогда
				ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
			КонецЕсли;
			ОбновитьФормуНаКлиенте();
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуОплатыНаличными(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	ЛогированиеБезДополнительныхДанных("ОплатаНаличными");
	
	Если РезультатОткрытияФормы = Неопределено Тогда
		ОбработатьОтказОтОплаты();
		ОплатаНаличными = Ложь;
		Возврат;
	Иначе
		Если ЗначениеЗаполнено(ЧекККМВОбработке) Тогда
			ЧекККМВОбработке = Неопределено;
		КонецЕсли;
		ДобавитьТаблицуОплат(РезультатОткрытияФормы);
		ЗавершитьОплатуТоваров(ДополнительныеПараметры.Печать);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуСложнойОплаты(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	ПараметрДействия 				= ДополнительныеПараметры.ПараметрДействия;
	ОтложитьЧек						= Ложь;
	
	Если РезультатОткрытияФормы = "ОтложитьЧек" Тогда
		ОтложитьЧек 			= Истина;
		РезультатОткрытияФормы 	= Неопределено;
	КонецЕсли;
	
	ЕстьОплатаПоПлатежнойСистеме    = Не РезультатОткрытияФормы = Неопределено И РезультатОткрытияФормы.Свойство("ЕстьОплатаПоПлатежнойСистеме");
	
	Если ЕстьОплатаПоПлатежнойСистеме Тогда
		ДанныеОтправленыВПлатежнуюСистему = Истина;
	КонецЕсли;
	
	Если ПараметрДействия.ОплатаТолькоНаличными Тогда
		ЛогированиеБезДополнительныхДанных("ОплатаНаличными");
	Иначе
		
		Если ЕстьОплатаПоПлатежнойСистеме Тогда
			ЛогированиеБезДополнительныхДанных("ОплатаПлатежнойСистемой");
		Иначе
			ЛогированиеБезДополнительныхДанных("СложнаяОплата");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не РезультатОткрытияФормы = Неопределено И РезультатОткрытияФормы.Свойство("ЕстьОплатаПоПлатежнойКарте") Тогда 
		ДанныеОтправленыВБанк = Истина;
	ИначеЕсли РезультатОткрытияФормы = Неопределено И ПередаватьТаблицуОплат Тогда 
		ОбработатьУспешноеПробитиеЧека();
	КонецЕсли;
	
	Если РезультатОткрытияФормы  = Неопределено Тогда
		
		ОбработатьОтказОтОплаты();
		
		Если ОтложитьЧек Тогда
			ОповещениеОтложитьЧек(, Новый Структура("Оплачивается", Истина));
		КонецЕсли;
		
		Если ДополнительныеПараметры.ПараметрДействия.Свойство("НовыйЧек") И ДополнительныеПараметры.ПараметрДействия.НовыйЧек Тогда
			ЧекККМВОбработке = Неопределено;
		КонецЕсли;
		
		Возврат;
		
	Иначе
		ДобавитьТаблицуОплат(
			РезультатОткрытияФормы, ПараметрДействия.ОрганизацияДляДобавленияВТаблицы, ПараметрДействия.КлючСвязиТПЧеков);
		
		Если РезультатОткрытияФормы.Свойство("АдресТаблицыПогашениеПодарочныхСертификатов") Тогда
			ДобавитьТаблицуПогашениеПодарочныхСертификатов(
				РезультатОткрытияФормы.АдресТаблицыПогашениеПодарочныхСертификатов,
				ПараметрДействия.ОрганизацияДляДобавленияВТаблицы,
				ПараметрДействия.КлючСвязиТПЧеков)
		КонецЕсли;
		ОплатитьТоварыСложнаяФормаОплаты(ПараметрДействия);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораПечатныхФорм(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		МассивСсылокЧеков = ДополнительныеПараметры.МассивСсылокЧеков;
		
		СтруктураКомандыПечати = СтруктураКомандыПечати(РезультатОткрытияФормы);
		
		СтруктураКомандыПечати.Вставить("РежимЗаписи", "НеЗаписывать");
		СтруктураКомандыПечати.Вставить("ТребуетсяРаботаСФайлами", Ложь);
		СтруктураКомандыПечати.Вставить("МножественныйВыбор", Ложь);
		СтруктураКомандыПечати.Вставить("ЭтоФормаОбъекта", Истина);
		СтруктураКомандыПечати.Вставить("ТипПараметра", Новый ОписаниеТипов("ДокументСсылка.ЧекККМ"));
		СтруктураКомандыПечати.Вставить("ТребуетсяОпределитьСсылки", Ложь);
		СтруктураКомандыПечати.Вставить("Серверная", Ложь);
		СтруктураКомандыПечати.Вставить("ИмяФормы", "");
		СтруктураКомандыПечати.Вставить("Обработчик","УправлениеПечатьюСлужебныйКлиент.ОбработчикКоманды");
		
		ФормыДоПробитияЧека = РозничныеПродажиКлиентСервер.ФормыЗаявленийДоПробитияЧека();
		
		Если НЕ ФормыДоПробитияЧека.Найти(РезультатОткрытияФормы) = Неопределено Тогда 
			СтруктураКомандыПечати.ДополнительныеПараметры.Вставить("ЗаявлениеБезПроведения", Истина);
			СтруктураКомандыПечати.ДополнительныеПараметры.Вставить("Обработчик", "");
			ОткрытьФормуВводаПерсональныхДанных(РезультатОткрытияФормы, СтруктураКомандыПечати, МассивСсылокЧеков);
			Возврат;
		ИначеЕсли РезультатОткрытияФормы = "ТоварныйЧекДляФР" Тогда
			СтруктураКомандыПечати.ДополнительныеПараметры.Вставить("Обработчик",
				"УправлениеПечатьюРТКлиент.ОбработкаКомандыПечатиТоварногоЧекаДляФР");
		ИначеЕсли РезультатОткрытияФормы = "КопияЧекаДляФР" Тогда
			СтруктураКомандыПечати.ДополнительныеПараметры.Вставить("Обработчик",
				"УправлениеПечатьюРТКлиент.ОбработкаКомандыПечатиКопияЧекаДляФР");
		Иначе
			СтруктураКомандыПечати.ДополнительныеПараметры.Вставить("Обработчик", "");
		КонецЕсли;
		
		Попытка
			
			СтруктураКомандыПечати.Вставить("Имя", "ПрочиеПодключаемыеОперацииПодменюПечатьОбычное__"
											+ СтруктураКомандыПечати.Идентификатор);
			
			Для каждого ЭлементМассиваСсылкиЧеков Из МассивСсылокЧеков Цикл
				ПодключаемыеКомандыКлиент.ВыполнитьКоманду(
					ЭтотОбъект, СтруктураКомандыПечати,ЭлементМассиваСсылкиЧеков);
				ЛогированиеПоЧеку("ЧекНапечатан", ЭлементМассиваСсылкиЧеков, РезультатОткрытияФормы);
			КонецЦикла;
		Исключение
			ЗаголовокИнформации = НСтр("ru = 'Ошибка печати документа'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ОповещениеОткрытьФормуВыдачиПодарков(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если РезультатОткрытияФормы = Неопределено Тогда
		ОбработатьОтказОтОплаты();
	Иначе
		
		ВидыПродукции = ИнтеграцияИСРТВызовСервера.ВидыПродукцииВТоварах(Объект.Подарки);
		
		МаркируемаяПродукция = Ложь;
		Для Каждого Эл Из ВидыПродукции Цикл
			МаркируемаяПродукция = ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции(Эл);
			Если МаркируемаяПродукция Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если МаркируемаяПродукция Тогда
			
			ПараметрыОткрытия = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыОткрытияФормыВводаКодаМаркировки();
			
			Оповещение        = Новый ОписаниеОповещения("ОбработатьКодМаркировкиПодарки", ЭтотОбъект, ДополнительныеПараметры);
			
			ПараметрыОткрытия.ПараметрыСканирования  = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(ЭтотОбъект);
			
			
			НевыданныеПодарки = Объект.Подарки.НайтиСтроки(Новый Структура("Получен", Ложь));
			
			Если НевыданныеПодарки.Количество() = 0 Тогда
				Возврат;
			КонецЕсли; 
			
			СтрокаПодарки = НевыданныеПодарки[0];
			
			
			ВидПродукции = ИнтеграцияИСМПВызовСервера.ВидПродукцииПоНоменклатуре(СтрокаПодарки.Номенклатура);
			
			ПараметрыОткрытия.ВидПродукции           = ВидПродукции;
			ПараметрыОткрытия.МаркируемаяПродукция   = Истина;
			ПараметрыОткрытия.Номенклатура           = СтрокаПодарки.Номенклатура;
			ПараметрыОткрытия.Характеристика         = СтрокаПодарки.Характеристика;
			ПараметрыОткрытия.Документ               = ЭтотОбъект.Объект.Ссылка;
			ПараметрыОткрытия.ДанныеШтрихкода        = Новый Структура("Штрихкод");
			
			ДополнительныеПараметры.Вставить("СтрокаПодарок", СтрокаПодарки);
			
			ШтрихкодированиеИСКлиент.ОткрытьФормуСчитыванияКодаМаркировки(ЭтотОбъект, ПараметрыОткрытия, Оповещение);
			
		Иначе
			// обычный вариант
			Для Каждого СтрокаПодарки Из Объект.Подарки Цикл
				СтрокаПодарки.Получен = Истина;
			КонецЦикла;
			
			Если РезультатОткрытияФормы.Свойство("АдресСерийВХранилище")
				И ЗначениеЗаполнено(РезультатОткрытияФормы.АдресСерийВХранилище) Тогда
				ЗагрузитьСерииИзХранилища(РезультатОткрытияФормы.АдресСерийВХранилище);
			КонецЕсли;
			
			ЗавершитьДействияПослеВыдачиПодарков(ДополнительныеПараметры.ПараметрДействия);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКодМаркировкиПодарки(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("СтрокаПодарок") Тогда
			
			СтрокаПодарок = ДополнительныеПараметры.СтрокаПодарок;
			СтрокаПодарок.ШтрихкодУпаковки = ИсходныеДанные.ШтрихкодУпаковки;
			
			Если ИсходныеДанные.Свойство("Справка2") Тогда 
				СтрокаПодарок.Справка2 = ИсходныеДанные.Справка2;
			КонецЕсли;
			
			СтрокаПодарок.Получен = Истина;
			
			НевыданныеПодарки = Объект.Подарки.НайтиСтроки(Новый Структура("Получен", Ложь));
			
			Если ДополнительныеПараметры.Свойство("Списком") И ЗначениеЗаполнено(СтрокаПодарок.ШтрихкодУпаковки) Тогда
				ВыдатьПодаркиИзСпискаВЦикле(
					ДополнительныеПараметры.Отказ,
					ДополнительныеПараметры.ПараметрДействия,
					ДополнительныеПараметры.ТекущаяВыданнаяСкидка);
					
			ИначеЕсли НевыданныеПодарки.Количество() <> 0 Тогда
				
				ОповещениеОткрытьФормуВыдачиПодарков(ИсходныеДанные, ДополнительныеПараметры);
				
			Иначе
				Если ДополнительныеПараметры.Свойство("АдресСерийВХранилище")
					И ЗначениеЗаполнено(ДополнительныеПараметры.АдресСерийВХранилище) Тогда
					
					ЗагрузитьСерииИзХранилища(ДополнительныеПараметры.АдресСерийВХранилище);
				КонецЕсли;
				ЗавершитьДействияПослеВыдачиПодарков(ДополнительныеПараметры.ПараметрДействия);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСерииИзХранилища(АдресСерийВХранилище)
	
	СерииПодарков = ПолучитьИзВременногоХранилища(АдресСерийВХранилище);
	Для Каждого СерияПодарка Из СерииПодарков Цикл
		НоваяСтрока = Объект.СерииПодарков.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СерияПодарка);
	КонецЦикла;
	СтруктураОтбора = Новый Структура("Номенклатура, Характеристика");
	СерииПодарков.Свернуть("Номенклатура, Характеристика");
	Для Каждого СвернутаяСтрока Из СерииПодарков Цикл
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СвернутаяСтрока);
		СтрокиПодарков = Объект.Подарки.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаПодарок Из СтрокиПодарков Цикл
			СтрокаПодарок.СтатусУказанияСерий = 2;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораПодаркаИзСписка(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		СтрокаПодарки = Объект.Подарки.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтрокиПодарки);
		Если СтрокаПодарки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьСтрокуПодаркаПриВыборе(СтрокаПодарки, РезультатОткрытияФормы);
		ТекущаяВыданнаяСкидка = СтрокаПодарки.СкидкаНаценка;
		ПараметрДействия = ДополнительныеПараметры.ПараметрДействия;
		
		Отказ = Ложь;
		МаркированныеПодаркиИзСписка(СтрокаПодарки, ПараметрДействия, ТекущаяВыданнаяСкидка, Отказ, ДополнительныеПараметры);
	Иначе 
		ОбработатьОтказОтОплаты();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МаркированныеПодаркиИзСписка(СтрокаПодарки, ПараметрДействия, ТекущаяВыданнаяСкидка, Отказ, ДополнительныеПараметры)
	
	ВидПродукции = ИнтеграцияИСМПВызовСервера.ВидПродукцииПоНоменклатуре(СтрокаПодарки.Номенклатура);
	
	Если ЗначениеЗаполнено(ВидПродукции)
		И ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции(ВидПродукции) Тогда
		
		ПараметрыОткрытия = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыОткрытияФормыВводаКодаМаркировки();
		
		Оповещение        = Новый ОписаниеОповещения("ОбработатьКодМаркировкиПодарки", ЭтотОбъект, ДополнительныеПараметры);
		
		ПараметрыОткрытия.ПараметрыСканирования  = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(ЭтотОбъект);
		
		ПустойШтрихкод = ПредопределенноеЗначение("Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка");
		
		Если СтрокаПодарки.ШтрихкодУпаковки <> ПустойШтрихкод Тогда
			Возврат;
		КонецЕсли; 
		
		ПараметрыОткрытия.ВидПродукции           = ВидПродукции;
		ПараметрыОткрытия.МаркируемаяПродукция   = Истина;
		ПараметрыОткрытия.Номенклатура           = СтрокаПодарки.Номенклатура;
		ПараметрыОткрытия.Характеристика         = СтрокаПодарки.Характеристика;
		ПараметрыОткрытия.Документ               = ЭтотОбъект.Объект.Ссылка;
		ПараметрыОткрытия.ДанныеШтрихкода        = Новый Структура("Штрихкод");
		
		ДополнительныеПараметры.Вставить("СтрокаПодарок"        , СтрокаПодарки);
		
		ДополнительныеПараметры.Вставить("ПараметрДействия"     , ПараметрДействия);
		ДополнительныеПараметры.Вставить("ТекущаяВыданнаяСкидка", ТекущаяВыданнаяСкидка);
		ДополнительныеПараметры.Вставить("Отказ"                , Отказ);
		ДополнительныеПараметры.Вставить("Списком"              , Истина);
		
		ШтрихкодированиеИСКлиент.ОткрытьФормуСчитыванияКодаМаркировки(ЭтотОбъект, ПараметрыОткрытия, Оповещение);
	Иначе // обычный подарок
		ВыдатьПодаркиИзСпискаВЦикле(Отказ, ПараметрДействия, ТекущаяВыданнаяСкидка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВопросаАннулироватьЧек(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		Если НЕ ВРЕГ(РезультатОткрытияФормы) = "ДА" Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыЗаполненияЧекаККМ = Новый Структура;
		
		Оповещение = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВопросаАннулироватьЧекЗавершение", ЭтотОбъект);
		НачатьАннулироватьЧекККМ(Оповещение, ТекущаяКассаККМ, ПараметрыЗаполненияЧекаККМ);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВопросаАннулироватьЧекЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.АннулироватьЧек");
	
	Если РезультатВыполнения.ЧекАннулирован Тогда
		ЗаписатьИЗакрытьЧекПоСтатусуКлиент(
			ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Аннулированный"), РезультатВыполнения.ПараметрыЗаполнения);
		ОбновитьФормуНаКлиенте();
		ВывестиИнформациюНаДисплейПокупателя("Аннулирование");
		//ИнтеграцияИСМПТК_РозничноеВыбытие
		Объект.КодыМаркировкиИСМПТК.Очистить();
		//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
	Иначе
		ОбновитьФормуНаКлиенте();
	КонецЕсли;
	
	ЗавершитьОбработкуДокументаОснования();
		
	ПодключитьОбработчикОжидания("Подключаемый_ДисплеяПокупателяПриПростое", 5, Истина);
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВопросаПечатьПослеЗакрытия(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		Если НЕ ВРЕГ(РезультатОткрытияФормы) = "ДА" Тогда
			Возврат;
		КонецЕсли;
		
		Печать = Истина;
		
		ОплатитьТовары("ФормаСложнойОплаты", Ложь, Ложь, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВопросаОПотереСуммыПоПодарочнымСертификатам(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено 
		И ВРЕГ(РезультатОткрытияФормы) = "НЕТ" Тогда
		ЗавершитьОплатуТоваров(ДополнительныеПараметры.Печать, Ложь)
	Иначе
		ОбработатьОтказОтОплаты();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОплатаБонусамиПослеВыводаСообщений(Результат, ДополнительныеПараметры) Экспорт
	
	Отказ = ДополнительныеПараметры.Отказ;
	ПараметрыИнформации = ДополнительныеПараметры.ПараметрыИнформации;
	
	РассчитатьКонтролироватьОстаткиТоваровПриЗакрытииЧека();
	
	УдалитьПробитыеЧекиИзНабораИОтменитьНеПробитые(Ложь);
	ПроверитьЗаполнениеТабличнойЧасти(Отказ, ПараметрыИнформации, Истина);
	Если Отказ Тогда
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуОплатыБонусами(ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьТоварыПослеВыводаСообщений(Результат, ДополнительныеПараметры) Экспорт
	
	РассчитатьКонтролироватьОстаткиТоваровПриЗакрытииЧека();
	
	УдалитьПробитыеЧекиИзНабораИОтменитьНеПробитые(Ложь);
	ПроверитьЗаполнениеТабличнойЧасти(
		ДополнительныеПараметры.Отказ,
		ДополнительныеПараметры.ПараметрыИнформации,
		ДополнительныеПараметры.ОплатаТолькоНаличными);
	
	Если ДополнительныеПараметры.Отказ Тогда
		ОбработатьОтказОтОплаты();
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ДополнительныеПараметры.ПараметрыИнформации);
		Возврат;
	КонецЕсли;
	
	// Подарки
	ДополнительныеПараметры.Вставить("ОткрытаБлокирующаяФорма", Ложь);
	ДополнительныеПараметры.Вставить("ОплатитьТоварыОткрытиеФормОплат");
	
	ВыдатьПодарки(ДополнительныеПараметры.Отказ, ДополнительныеПараметры);
	
	Если ДополнительныеПараметры.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДополнительныеПараметры.ОткрытаБлокирующаяФорма Тогда
		ОплатитьТоварыОткрытиеФормОплат(ДополнительныеПараметры)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПолучитьВесЗавершение(РезультатОперации, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	Если РезультатОперации.Результат Тогда
		
		Если РезультатОперации.Вес = 0 Тогда
			ЗаголовокИнформации = НСтр("ru = 'Нулевой вес.'");
			ТекстСообщения = НСтр("ru = 'Дополнительное описание:
				|Электронные весы вернули нулевой вес.'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
		Иначе
			ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
			ПоследнееРедактированиеКоличество = ТекущиеДанные.КоличествоУпаковок;
			ТекущиеДанные.КоличествоУпаковок  = РезультатОперации.Вес; // Вес получен
			ТоварыПриИзмененииКоличестваУпаковок(ТекущиеДанные, ПоследнееРедактированиеКоличество);
		КонецЕсли;
		
	Иначе
		ЗаголовокИнформации = НСтр("ru = 'При использовании электронных весов произошла ошибка.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, РезультатОперации.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеУстановкиКарты(СтруктураКарты, ДополнительныеПараметры) Экспорт
	
	Если СтруктураКарты <> Неопределено Тогда
		ДисконтнаяКарта = СтруктураКарты.Ссылка;
		Если ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
			Если ДополнительныеПараметры = Неопределено Тогда
				ДополнительныеПараметры = Новый Структура;
			КонецЕсли;
			
			Если СтруктураКарты.Свойство("НомерТелефона") Тогда
				НомерТелефона = СтруктураКарты.НомерТелефона;
			Иначе
				НомерТелефона = "";
			КонецЕсли;
			Если СтруктураКарты.Свойство("АдресЭП") Тогда
				АдресЭП = СтруктураКарты.АдресЭП;
			Иначе
				АдресЭП = "";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НомерТелефона) Тогда
				Если НаборПравИНастроек.РазрешитьВыборКартыБезSMS Тогда
					УстановкаКартыЗавершение(ДисконтнаяКарта, НомерТелефона, АдресЭП);
				Иначе
					ДополнительныеПараметры.Вставить("ДисконтнаяКарта", ДисконтнаяКарта);
					КодПроверки = МаркетинговыеАкцииРМКВызовСервера.КодПроверкиДисконтнойКарты();
					ДополнительныеПараметры.Вставить("КодПроверки", КодПроверки);
					ДополнительныеПараметры.Вставить("НомерТелефонаСМС", НомерТелефона);
					
					РезультатОтправки = ОтправитьСообщениеСКодом(КодПроверки, НомерТелефона);
					Если РезультатОтправки.Результат Тогда
						ПараметрыВводаЧисла = Новый Структура;
						ПараметрыВводаЧисла.Вставить("ВозвращатьЧислоСтрокой", Истина);
						ПараметрыВводаЧисла.Вставить("КодПроверкиСМС",         КодПроверки);
						ПараметрыВводаЧисла.Вставить("НомерТелефонаСМС",       НомерТелефона);
						
						ОповещениеКода = Новый ОписаниеОповещения(
							"ОповещениеУстановкиКартыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
						
						ПолучитьИнтерактивноЧисло(
							НСтр("ru = 'Введите код подтверждения, отправленный на телефон владельца карты.'"),
							ОповещениеКода,
							ПараметрыВводаЧисла);
					Иначе
						ТекстСообщения = НСтр("ru = 'Не удалось отправить сообщение с кодом проверки по причине:'") +
							Символы.ПС + РезультатОтправки.ОписаниеОшибки;
						ЗаголовокИнформации = НСтр("ru = 'Выбор карты не возможен'");
						ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(АдресЭП) Тогда
				Если НаборПравИНастроек.РазрешитьВыборКартыБезEmailПодтверждения Тогда
					УстановкаКартыЗавершение(ДисконтнаяКарта, НомерТелефона, АдресЭП);
				Иначе
					ДополнительныеПараметры.Вставить("ДисконтнаяКарта", ДисконтнаяКарта);
					КодПроверки = МаркетинговыеАкцииРМКВызовСервера.КодПроверкиДисконтнойКарты();
					ДополнительныеПараметры.Вставить("КодПроверки", КодПроверки);
					ДополнительныеПараметры.Вставить("АдресЭП", АдресЭП);
					
					РезультатОтправки = ОтправитьEmailСКодом(КодПроверки, АдресЭП);
					Если РезультатОтправки.Результат Тогда
						ПараметрыВводаЧисла = Новый Структура;
						ПараметрыВводаЧисла.Вставить("ВозвращатьЧислоСтрокой", Истина);
						
						ОповещениеКода = Новый ОписаниеОповещения(
							"ОповещениеУстановкиКартыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
						
						ПолучитьИнтерактивноЧисло(
							НСтр("ru = 'Введите код подтверждения, отправленный на E-mail владельца карты.'"),
							ОповещениеКода,
							ПараметрыВводаЧисла);
					Иначе
						ТекстСообщения = НСтр("ru = 'Не удалось отправить сообщение с кодом проверки по причине:'") +
							Символы.ПС + РезультатОтправки.ОписаниеОшибки;
						ЗаголовокИнформации = НСтр("ru = 'Выбор карты не возможен'");
						ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
					КонецЕсли;
				КонецЕсли;
			Иначе
				УстановкаКартыЗавершение(ДисконтнаяКарта, НомерТелефона, АдресЭП);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеУстановкиКартыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Перем НомерТелефона, АдресЭП;
	
	// &ЗамерПроизводительности 
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.УстановкиКартыЗавершение");
		
	ДополнительныеПараметры.Свойство("НомерТелефонаСМС", НомерТелефона);
	ДополнительныеПараметры.Свойство("АдресЭП",			 АдресЭП);
	
	Если Результат = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не введен код подтверждения.'");
		ЗаголовокИнформации = НСтр("ru = 'Выбор карты не возможен'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
	Иначе
		КодПодтверждения = Результат.ВведенноеЧисло;
		Если КодПодтверждения = ДополнительныеПараметры.КодПроверки Тогда
			ДисконтнаяКарта = ДополнительныеПараметры.ДисконтнаяКарта;
			Если ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
				УстановкаКартыЗавершение(ДисконтнаяКарта, НомерТелефона, АдресЭП);
			КонецЕсли;
		Иначе
			КоличествоПопыток = 1;
			Если ДополнительныеПараметры.Свойство("КоличествоПопыток") Тогда
				КоличествоПопыток = ДополнительныеПараметры.КоличествоПопыток + 1;
				ДополнительныеПараметры.КоличествоПопыток = КоличествоПопыток;
			Иначе
				ДополнительныеПараметры.Вставить("КоличествоПопыток", 1);
			КонецЕсли;
			Если КоличествоПопыток >= 5 Тогда
				ТекстСообщения = НСтр("ru = 'Введен некорректный код подтверждения (Попытка %1 из 5).'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КоличествоПопыток);
				ЗаголовокИнформации = НСтр("ru = 'Выбор карты не возможен'");
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
			Иначе
				ТекстВопроса = НСтр("ru = 'Введен некорректный код подтверждения (Попытка %1 из 5). Повторить попытку ввода?'");
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, КоличествоПопыток);
				ЗаголовокИнформации = НСтр("ru = 'Выбор карты не возможен'");
				ОбработчикОповещения = Новый ОписаниеОповещения(
					"ОповещениеПовторВводаКодаПодтверждения", ЭтотОбъект, ДополнительныеПараметры);
				ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(ЗаголовокИнформации, ТекстВопроса, ,ОбработчикОповещения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПовторВводаКодаПодтверждения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И ВРЕГ(Результат) = "ДА" Тогда
		ПараметрыВводаЧисла = Новый Структура;
		ПараметрыВводаЧисла.Вставить("ВозвращатьЧислоСтрокой", Истина);
		
		ОповещениеКода = Новый ОписаниеОповещения("ОповещениеУстановкиКартыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ПолучитьИнтерактивноЧисло(
			НСтр("ru = 'Введите код подтверждения, отправленный владельцу карты.'"),
			ОповещениеКода,
			ПараметрыВводаЧисла);
		КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДокументаРасчета(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		ОплатаБезПередачиПоДокументуРасчетаСЗаказом = Объект.ОперацияСДенежнымиСредствами;
		СоздатьНовыйНаборКлиент();
		
		Объект.ДокументРасчета = РезультатОткрытияФормы.ДокументРасчета;
		Объект.Контрагент = РезультатОткрытияФормы.Контрагент;
		Если НЕ Объект.ЗаказПокупателя = РезультатОткрытияФормы.ЗаказПокупателя Тогда
			Объект.ЗаказПокупателя = РезультатОткрытияФормы.ЗаказПокупателя;
			Если ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
				Объект.ЗаказПокупателя = РезультатОткрытияФормы.ЗаказПокупателя;
				ОплатаБезПередачиПоДокументуРасчетаСЗаказом = Ложь;
				ЗаполнитьНаОснованииЗаказаПокупателя();
				ЕстьТоварыВДокументеРасчета = Объект.Товары.Количество() > 0;
				Если РезультатОткрытияФормы.ЭтоОплатаРассрочки 
					И НЕ ЕстьТоварыВДокументеРасчета Тогда
					Отказ = Ложь;
					ЗаполнитьДаннымиПоЧекуККМ(Объект.ДокументРасчета, Отказ);
					Объект.ОперацияСДенежнымиСредствами = Истина;
					ОплатаБезПередачиПоДокументуРасчетаСЗаказом = Объект.ОперацияСДенежнымиСредствами;
				КонецЕсли;
				ТаблицаДокументовРасчета.Очистить();
				Для Каждого ДокументРасчета Из РезультатОткрытияФормы.МассивДокументовРасчета Цикл
					НоваяСтрока = ТаблицаДокументовРасчета.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ДокументРасчета);
				КонецЦикла;
			Иначе
				СоздатьНовыйНаборКлиент();
				ПодключитьОбработчикОжидания("Подключаемый_ДисплеяПокупателяПриПростое", 20, Истина);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Объект.ДокументРасчета) = Тип("ДокументСсылка.ЧекККМ") Тогда
			Отказ = Ложь;
			ЗаполнитьДаннымиПоЧекуККМ(Объект.ДокументРасчета, Отказ);
			Объект.ОперацияСДенежнымиСредствами = НЕ Объект.ОперацияСДенежнымиСредствами;
			ЕстьТоварыВДокументеРасчета = Объект.Товары.Количество() > 0;
		КонецЕсли;
		
		ЭтоЗачетАванса = РезультатОткрытияФормы.ЭтоЗачетАванса;
		ЭтоОплатаРассрочки = РезультатОткрытияФормы.ЭтоОплатаРассрочки;
		Если РезультатОткрытияФормы.МассивДокументовРасчета.Количество() > 1 Тогда
			СуммаОстаткаДокументаРасчета = 0;
			Для Каждого ДокументРасчета Из РезультатОткрытияФормы.МассивДокументовРасчета Цикл
				СуммаОстаткаДокументаРасчета = СуммаОстаткаДокументаРасчета + ДокументРасчета.Сумма;
			КонецЦикла;
		Иначе
			СуммаОстаткаДокументаРасчета = РезультатОткрытияФормы.Сумма;
		КонецЕсли;
		ОбновитьФормуНаКлиенте();
		УстановитьЗаголовок();
		ЗавершитьОбработкуДокументаОснования();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуПростойОплаты(РезультатВыполнения = Неопределено, ПараметрДействия = Неопределено) Экспорт 
	
	ОплатитьТовары("ФормаПростойОплаты");
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВвестиАннулирование(РезультатВыполнения = Неопределено, ПараметрДействия = Неопределено) Экспорт
	
	Если Объект.Товары.Количество() > 0 Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВопросаАннулироватьЧек", ЭтотОбъект);
		ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(НСтр("ru = 'Аннулировать чек?'"),,,ОбработчикОповещения);
	Иначе
		СоздатьНовыйНаборКлиент();
		ОбновитьФормуНаКлиенте();
		ПодключитьОбработчикОжидания("Подключаемый_ДисплеяПокупателяПриПростое", 5, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОтложитьЧек(РезультатВыполнения = Неопределено, ПараметрДействия = Неопределено) Экспорт
	
	Если Объект.Товары.Количество() = 0 Тогда
		СоздатьНовыйНаборКлиент();
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполненияЧекаККМ = ?(ТипЗнч(ПараметрДействия) = Тип("Структура"), ПараметрДействия, Новый Структура);
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ОтложитьЧек");
		
	ЗаписатьИЗакрытьЧекПоСтатусуКлиент(
		ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Отложенный"), ПараметрыЗаполненияЧекаККМ);
	
	ВывестиИнформациюНаДисплейПокупателя("ОтложитьЧек");
	ПодключитьОбработчикОжидания("Подключаемый_ДисплеяПокупателяПриПростое", 5, Истина);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	Объект.ПредъявленныеКодыОднократныхСкидок.Очистить();
	
	//ИнтеграцияИСМПТК_РозничноеВыбытие
	Объект.КодыМаркировкиИСМПТК.Очистить();
	//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПродолжитьЧек(РезультатВыполнения = Неопределено, ПараметрДействия = Неопределено) Экспорт

	Если Объект.Товары.Количество() = 0 Тогда
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	Иначе
		ЗаголовокИнформации = НСтр("ru = 'Продолжение отложенного чека'"); 
		ТекстИнформации = НСтр("ru = 'Перед продолжением отложенного чека необходимо пробить, аннулировать или отложить текущий чек.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		Возврат;
	КонецЕсли;
	
	// &ЗамерПроизводительности 
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ПродолжитьЧек");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПродолжениеОтложенныхЧеков");
	ПараметрыФормы.Вставить("МассивКассККМ", МассивКассККМКлиент);
	ПараметрыФормы.Вставить("СкрыватьКолонкуОрганизации", МассивКассККМКлиент.Количество() = 1);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораЧекаПриПродолженииЧека", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораЧека", ПараметрыФормы,,,,, ОбработчикОповещения, Режим);
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыполнитьВыход(РезультатВыполнения = Неопределено, ПараметрДействия = Неопределено) Экспорт
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ЗаголовокИнформации = НСтр("ru = 'Выход'"); 
		ТекстИнформации = НСтр("ru = 'Перед выходом необходимо пробить, аннулировать или отложить текущий чек.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		
		Возврат;
		
	КонецЕсли;
	
	СанкционированноеЗакрытие = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВопросаОбОтменеОперацииУдалениеСтроки(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		Если НЕ ВРЕГ(РезультатОткрытияФормы) = "ДА" Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрДействия = ДополнительныеПараметры.ПараметрДействия;
		ТекущаяСтрокаОплаты = Объект.Оплата.НайтиПоИдентификатору(ПараметрДействия.ИдентификаторВыбраннойСтроки);
		
		Если ТекущаяСтрокаОплаты = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения(
			"ОповещениеОткрытьФормуВопросаОбОтменеОперацииУдалениеСтрокиЗавершение", ЭтотОбъект, ПараметрДействия);
		СторноОплатыПлатежнойКартойЧерезЭквайринговыйТерминал(Оповещение, ТекущаяСтрокаОплаты, ПараметрДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВопросаОбОтменеОперацииУдалениеСтрокиЗавершение(РезультатВыполнения, ПараметрДействия) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		Если НЕ ПараметрДействия.ОткрытаБлокирующаяФорма Тогда
			ЗавершитьУдалениеСтрокиОплаты(ПараметрДействия)
		КонецЕсли;
		Если ПрисутствуютДанныеПереданныеВБанк() Тогда 
			ВывестиПредупреждениеОбОтменеОплаты(ПараметрДействия.ОбработчикОповещенияПриЗавершении);
		Иначе 
			ОбработатьУспешноеПробитиеЧека();
			Если Не ПараметрДействия.ОбработчикОповещенияПриЗавершении = Неопределено Тогда 
				ВыполнитьОбработкуОповещения(ПараметрДействия.ОбработчикОповещенияПриЗавершении);	
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Не ПустаяСтрока(ПараметрДействия.ТекстОписаниеОшибки) Тогда
			ЗаголовокИнформации = НСтр("ru = 'Ошибка выполнения операции.'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ПараметрДействия.ТекстОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СторноОплатыПлатежнойКартойЧерезЭквайринговыйТерминалЗавершение(РезультатВыполнения, ПараметрДействия) Экспорт;
	
	ЭтаФорма.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		
		Если ПараметрДействия.Свойство("ЗавершитьУдалениеСтроки") Тогда
			ЗавершитьУдалениеСтрокиОплаты(ПараметрДействия)
		КонецЕсли;
	
		Если ПараметрДействия.Свойство("ЗавершитьОбработкуВыбораПлатежнойКарты") Тогда
			ЗавершитьОбработкуВыбораПлатежнойКарты(ПараметрДействия);
		КонецЕсли;
	
		ИндексВМассивеСтрокВыбранныхОплат = Неопределено;
		Если ПараметрДействия.Свойство("УдалитьСтрокуИзМассива", ИндексВМассивеСтрокВыбранныхОплат) Тогда
			ПараметрДействия.СтрокиВыбранныхОплат.Удалить(ИндексВМассивеСтрокВыбранныхОплат)
		КонецЕсли;
	
	Иначе
		ТекстОписаниеОшибки = РезультатВыполнения.ОписаниеОшибки;
		ПараметрДействия.ТекстОписаниеОшибки = ТекстОписаниеОшибки;
	КонецЕсли;
	
	Если ПараметрДействия.ОповещениеПриЗавершении <> Неопределено Тогда
		ПараметрДействия.Результат = РезультатВыполнения.Результат; 
		ВыполнитьОбработкуОповещения(ПараметрДействия.ОповещениеПриЗавершении, ПараметрДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВопросаПодтвержденияОбОтменеОплаты(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	КонечныйРезультат = Ложь;
	ПараметрДействия = ДополнительныеПараметры.ПараметрДействия;
	
	Если НЕ РезультатОткрытияФормы = Неопределено И ВРЕГ(РезультатОткрытияФормы) = "ДА" Тогда
		КонечныйРезультат = Истина;
	КонецЕсли;
	
	Если КонечныйРезультат Тогда
		ТекстОписаниеОшибки = "";
	Иначе
		ТекстОписаниеОшибки = НСтр("ru = 'Операция отменена'");
	КонецЕсли;
	
	ПараметрДействия.ТекстОписаниеОшибки = ТекстОписаниеОшибки;
	
	Если НЕ КонечныйРезультат Тогда
		Если ПараметрДействия.ОповещениеПриЗавершении <> Неопределено Тогда
			ПараметрДействия.Результат = КонечныйРезультат; 
			ВыполнитьОбработкуОповещения(ПараметрДействия.ОповещениеПриЗавершении, ПараметрДействия);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПараметрДействия.Свойство("ЗавершитьУдалениеСтроки") Тогда
		ЗавершитьУдалениеСтрокиОплаты(ПараметрДействия);
	КонецЕсли;
	
	Если ПараметрДействия.Свойство("ЗавершитьОбработкуВыбораПлатежнойКарты") Тогда
		ЗавершитьОбработкуВыбораПлатежнойКарты(ПараметрДействия);
	КонецЕсли;
	
	ИндексВМассивеСтрокВыбранныхОплат = Неопределено;
	Если ПараметрДействия.Свойство("УдалитьСтрокуИзМассива", ИндексВМассивеСтрокВыбранныхОплат) Тогда
		ПараметрДействия.СтрокиВыбранныхОплат.Удалить(ИндексВМассивеСтрокВыбранныхОплат)
	КонецЕсли;
	
	Если ПараметрДействия.ОповещениеПриЗавершении <> Неопределено Тогда
		ПараметрДействия.Результат = Истина;
		ВыполнитьОбработкуОповещения(ПараметрДействия.ОповещениеПриЗавершении, ПараметрДействия);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуОплатыБонуснымиБаллами(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если РезультатОткрытияФормы = Неопределено Тогда
		Если АвтоматическийРасчетСкидок Тогда
			НазначитьАвтоматическиеСкидкиКлиент();
		Иначе
			Объект.СкидкиРассчитаны = Ложь;
		КонецЕсли;
	Иначе
		ОбработатьОплатуБонусами(РезультатОткрытияФормы);
		Если РезультатОткрытияФормы.Свойство("УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов")
			И РезультатОткрытияФормы.УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов Тогда
			ПараметрыДействия = Новый Структура;
			ПараметрыДействия.Вставить("БонуснаяПрограммаЛояльности", РезультатОткрытияФормы.БонуснаяПрограмма);
			ПараметрыДействия.Вставить("БудетОплатаБонусами", Истина);
			ПараметрыДействия.Вставить("УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов", Истина);
			
			НазначитьАвтоматическиеСкидкиКлиент(, , ПараметрыДействия); 
		КонецЕсли;
		ОбновитьФормуНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСозданиеИВыборНовойХарактеристики(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
	ТекущаяСтрока.Характеристика = Результат;
	ТоварыХарактеристикаПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПодтвержденияВозвратаПродукцииИСМПБезМарок(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		Если НЕ ВРЕГ(РезультатОткрытияФормы) = "ДА" Тогда
			ЭтотОбъект.Доступность = Истина;
			Возврат;
		КонецЕсли;
		
		ЭтоВозвратПродукцииИСМПБезМарки = Истина;
		
		ПродолжитьОплатуТоваров(ДополнительныеПараметры);
			
	КонецЕсли;
	
	Если Не ЭтотОбъект.Доступность Тогда 
		ЭтотОбъект.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуОплатыПлатежнойСистемой(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	ЛогированиеБезДополнительныхДанных("ОплатаПлатежнойСистемой");
	ОбновитьФормуНаКлиенте();
	
	Если РезультатОткрытияФормы = Неопределено 
		ИЛИ РезультатОткрытияФормы = "ОтложитьЧек" Тогда
		
		ОбработатьОтказОтОплаты();
		
		Если РезультатОткрытияФормы = "ОтложитьЧек" Тогда
			ОповещениеОтложитьЧек(, Новый Структура("Оплачивается", Истина));
		КонецЕсли;
		
		ЧекККМВОбработке = Неопределено;
		
		Возврат;
	Иначе
		ДанныеОтправленыВПлатежнуюСистему = Истина;
		ДобавитьТаблицуОплат(РезультатОткрытияФормы);
		ЗавершитьОплатуТоваров(ДополнительныеПараметры.Печать);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуОплатыЯндексКассой(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	ЛогированиеБезДополнительныхДанных("ОплатаЯндексКассой");
	УстановитьДоступностьОтдельныхЭлементовФормы("КартинкаЧО05Наличные", Истина);
	УстановитьДоступностьОтдельныхЭлементовФормы("КартинкаЧО07СложнаяОплата", Истина);
	ОбновитьФормуНаКлиенте(); 
	ОплатаЯндексКассой = Ложь;
	
	Если РезультатОткрытияФормы = Неопределено Тогда
		ЧекККМВОбработке = Неопределено;
		ОбработатьОтказОтОплаты();
		Возврат;
	Иначе

		СтрокаТабличноеПолеЧеков = ТабличноеПолеЧеков.НайтиПоИдентификатору(РезультатОткрытияФормы.ИдентификаторСтрокиЧека);
		СтрокаТабличноеПолеЧеков.СтрокаОбработана = Истина;
		ТабличноеПолеЧеков.Сортировать("СтрокаОбработана Убыв");
		
		ОтправкаЧековЧерезСервис = РезультатОткрытияФормы.ОтправкаЧековЧерезСервис;
		ДобавитьТаблицуОплат(РезультатОткрытияФормы);
		ЗавершитьОплатуТоваров(ДополнительныеПараметры.Печать);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборБезналичногоПлатежа(Выбор, ДополнительныеПараметры) Экспорт 
	
	Если Выбор <> Неопределено Тогда
		
		ВыбранныйВидПродукции = Выбор;
		Если ВыбранныйВидПродукции = "БанковскийПлатеж" Тогда 
			ОткрытьВыборБанковскойВыписки();
		ИначеЕсли ТипЗнч(ВыбранныйВидПродукции) = Тип("СправочникСсылка.НастройкиОнлайнОплат") Тогда
			Если Не Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
				ИспользуемаяИнтеграция = ВыбранныйВидПродукции;
				ОплатитьТовары("ФормаОплатыЯндексКасса", Ложь);
			Иначе
				ЭтотОбъект.Доступность = Истина;
				ЗаголовокИнформации = НСтр("ru = 'Выход'"); 
				ТекстИнформации = НСтр("ru = 'Осуществлять возврат с помощью ЮKassa невозможно.'");
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ЭтотОбъект.Доступность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьВыборБанковскойВыписки(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт 
	
	Если Не РезультатОткрытияФормы = Неопределено Тогда 
		ЗаполнитьДанныеПоБанковскойВыписке(РезультатОткрытияФормы, ДополнительныеПараметры)
	Иначе 
		ЭтотОбъект.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПоБанковскойВыписке(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		ОплатаБезПередачиПоДокументуРасчетаСЗаказом = Объект.ОперацияСДенежнымиСредствами;
		СоздатьНовыйНаборКлиент();
		
		Объект.ДокументРасчета = РезультатОткрытияФормы.ДокументРасчета;
		Объект.Контрагент      = РезультатОткрытияФормы.Контрагент;
		Если Не Объект.ЗаказПокупателя = РезультатОткрытияФормы.ЗаказПокупателя Тогда
			Объект.ЗаказПокупателя = РезультатОткрытияФормы.ЗаказПокупателя;
			Если ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
				Объект.ЗаказПокупателя = РезультатОткрытияФормы.ЗаказПокупателя;
				ОплатаБезПередачиПоДокументуРасчетаСЗаказом = Ложь;
				ЗаполнитьНаОснованииЗаказаПокупателя();
				ЕстьТоварыВДокументеРасчета = Объект.Товары.Количество() > 0;
				Если РезультатОткрытияФормы.ЭтоОплатаРассрочки И Не ЕстьТоварыВДокументеРасчета Тогда
					Отказ = Ложь;
					ЗаполнитьДаннымиПоЧекуККМ(Объект.ДокументРасчета, Отказ);
					Объект.ОперацияСДенежнымиСредствами = Истина;
					ОплатаБезПередачиПоДокументуРасчетаСЗаказом = Объект.ОперацияСДенежнымиСредствами;
				КонецЕсли;
			Иначе
				СоздатьНовыйНаборКлиент();
				ПодключитьОбработчикОжидания("Подключаемый_ДисплеяПокупателяПриПростое", 20, Истина);
			КонецЕсли;
		КонецЕсли;
		
		ЭтоЗачетАванса     = Ложь;
		ЭтоОплатаРассрочки = Ложь;
		СуммаОстаткаДокументаРасчета = РезультатОткрытияФормы.Сумма;
		ОбновитьФормуНаКлиенте();
		УстановитьЗаголовок();
		ЗавершитьОбработкуДокументаОснования();
		УстановитьДоступностьПриБезналичнойОплате(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка выборка характеристики, после обработки ШК.
//
// Параметры:
//  Результат - Структура - структура с повторяющимися штрихкодами.
//  Параметры - Структура - структура дополнительных параметров.
//
&НаКлиенте
Процедура ОбработатьСериюНоменклатурыПослеВыбораХарактеристики(Результат, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Параметры.Вставить("Характеристика", Результат);
		ПодключаемоеОборудованиеРТКлиент.ЗаполнениеСерииНоменклатуры(ЭтотОбъект, Параметры);
		ПодключаемоеОборудованиеРТКлиент.ЗаполнениеНоменклатурыИХарактеристики(ЭтотОбъект, Параметры);
		ПодключаемоеОборудованиеРТКлиент.ЗапуститьОбработкуДействийСерий(ЭтотОбъект, Параметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//Печать с использованием персональных данных
Процедура ОповещениеОткрытьФормуВводаПерсональныхДанных(Результат, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		Если Параметры.МассивСсылокЧеков.Количество() > 0 Тогда
			// Печать после пробития чека
			ЗаписатьВЧкККМПерсональныеДанные(Результат, Параметры);
		
			Объект.ФизЛицо = "";
			Объект.ДатаРождения = Дата(1,1,1);
			Объект.ПоДокументу = "";
			
			Попытка
				РезультатОткрытияФормы = Параметры.РезультатОткрытияФормы;
				Параметры.ПараметрДействия.Вставить("ЗаявлениеБезПроведения", Ложь);
				Параметры.ПараметрДействия.ДополнительныеПараметры.Вставить("ЗаявлениеБезПроведения", Ложь);
				Параметры.ПараметрДействия.Вставить("Имя", "ПрочиеПодключаемыеОперацииПодменюПечатьОбычное__"
													+ Параметры.ПараметрДействия.Идентификатор);
				Для каждого ЭлементМассиваСсылкиЧеков Из Параметры.МассивСсылокЧеков Цикл
					ПодключаемыеКомандыКлиент.ВыполнитьКоманду(
						ЭтотОбъект, Параметры.ПараметрДействия ,ЭлементМассиваСсылкиЧеков);
					ЛогированиеПоЧеку("ЧекНапечатан", ЭлементМассиваСсылкиЧеков, РезультатОткрытияФормы);
				КонецЦикла;
			Исключение
				ЗаголовокИнформации = НСтр("ru = 'Ошибка печати документа'");
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		Иначе
			// Печать до пробития чека
			Попытка
				МассивОбъектов = Новый Массив;
				МассивОбъектов.Добавить(Объект);
				
				ОбъектыПечати = Новый СписокЗначений;
				
				ПараметрыПечати = Новый Структура;
				ПараметрыПечати.Вставить("ДополнитьКомплектВнешнимиПечатнымиФормами", Ложь);
				ПараметрыПечати.Вставить("ЗаявлениеБезПроведения", Истина);
				ПараметрыПечати.Вставить("Обработчик", "");
				ПараметрыПечати.Вставить("ПерсональныеДанные", Результат);
				ПараметрыПечати.Вставить("СуммаДокумента", ЭтотОбъект.СуммаВсего);
				
				ИдентификаторПечатнойФормы = Параметры.ПараметрДействия.Идентификатор;
				МодульУправлениеПечатьюКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеПечатьюКлиент");
				КоллекцияПечатныхФорм = МодульУправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
				
				ПараметрыВывода = ПодготовитьСтруктуруПараметровВывода();
				
				Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, ИдентификаторПечатнойФормы);
				
				ОбластиОбъектов = Новый СписокЗначений;
				МодульУправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм, ОбластиОбъектов);
			Исключение
				ЗаголовокИнформации = НСтр("ru = 'Ошибка печати документа'");
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки; 
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//Обработать изменение строки
&НаКлиенте
Процедура ОбработатьИзменениеСтроки(ИдентификаторСтроки, Действие) Экспорт
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если Действие = "ИзмененоКоличество" Тогда
		ТоварыПриИзмененииКоличестваУпаковок(ТекущаяСтрока, ПоследнееРедактированиеКоличество);
	ИначеЕсли Действие = "ИзмененыНоменклатураХарактеристика" Тогда
		ПриИзмененииТоварыНоменклатура(ТекущаяСтрока);
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ИдентификаторСтроки, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьСтатусСерийИПодарочныхСертификатов(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьКомиссионнуюТорговлю = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссионнуюТорговлю");
	ИспользоватьУчетИмпортныхТоваров = ПолучитьФункциональнуюОпцию("ИспользоватьУчетИмпортныхТоваров");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыПодключаемых = Новый Структура("Источники, КоманднаяПанель, ПрефиксГрупп");
	ПараметрыПодключаемых.ПрефиксГрупп = "ПрочиеПодключаемыеОперации";
	ПараметрыПодключаемых.Источники = Новый ОписаниеТипов("ДокументОбъект.ЧекККМ");
	ПараметрыПодключаемых.КоманднаяПанель = Элементы.ГруппаПанельПрочихОпераций;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыПодключаемых);
	ИсправитьТаблицуКоманд();
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПодключаемоеОборудованиеРТ.ПолучитьДоступноеПодключаемоеОборудование(
		ИспользоватьПодключаемоеОборудование,
		ПодключаемоеОборудованиеЕстьТСД,
		ПодключаемоеОборудованиеЕстьВесы);
		
	ПараметрыСобытийПО = Новый Структура;
	ПараметрыСобытийПО.Вставить("РегистрацияНовойКарты", Истина);
	ПараметрыСобытийПО.Вставить("ПоискАкцизнойМарки", Истина);
	
	ЭтоРабочееМестоOffLine = ОбменДаннымиРТ.ЭтоПодчиненныйУзелПоРабочемуМесту();
	
	ИспользуетсяСистемаВзаимодействия = Ложь;
	
	// ПередаватьДанныеПослеКаждогоПробитогоЧека.
	ЭтотУзелОбмена = ПланыОбмена.ПоРабочемуМесту.ЭтотУзел();
	ПередаватьДанныеПослеКаждогоПробитогоЧека =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ЭтотУзелОбмена.Ссылка,
			"ПередаватьДанныеПослеКаждогоПробитогоЧека");
			
	Параметры.Свойство("РасчетноеВремяЗакрытияКассы", РасчетноеВремяЗакрытияКассы);
	
	Параметры.Свойство("Магазин", Объект.Магазин);
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		Объект.Магазин = ПараметрыСеанса.ТекущийМагазин;
	КонецЕсли;
	ОкруглениеТолькоПриОплатеНаличными = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Магазин, "ОкруглениеТолькоПриОплатеНаличными");
	
	Параметры.Свойство("РабочееМесто", Объект.РабочееМесто);
	
	Если НЕ ЗначениеЗаполнено(Объект.РабочееМесто) Тогда
		Объект.РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	КонецЕсли;
	
	ЗаполнитьИспользуемыеКассыККМ();
	ЗаполнитьСистемыНалогообложения();
	
	Если ТаблицаКассККМОрганизаций.Количество() = 0 Тогда
		ОтказПриСоздании = Истина;
		ПараметрыИнформацииПриСоздании = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
		ПараметрыИнформацииПриСоздании.ЗаголовокИнформации = НСтр("ru = 'Ошибка определения рабочего места'");
		ПараметрыИнформацииПриСоздании.ТекстИнформации = НСтр("ru = 'Не смогли определить рабочее место.
			|Обратитесь к администратору системы.'");
		Возврат;
	КонецЕсли;
	
	Если НЕ ИспользуетсяЭлектроннаяОтправкаЧека Тогда
		Элементы.ГруппаЭлектронныйЧек.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Магазин) Тогда
		ДанныеМагазина = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.Магазин,
			"ФорматМагазина, СкладПродажи, ПравилоЦенообразования");
			
		ФорматМагазина = ДанныеМагазина.ФорматМагазина;
		
		Если ЗначениеЗаполнено(ДанныеМагазина.ПравилоЦенообразования) Тогда
			Объект.ЦенаВключаетНДС = ОбщегоНазначенияРТ.ЗначениеРеквизитаВПривилегированномРежиме(
				ДанныеМагазина.ПравилоЦенообразования,
				"ЦенаВключаетНДС");
		КонецЕсли;
		
		ПараметрыПоискаСклада = Новый Структура;
		ПараметрыПоискаСклада.Вставить("Организация", Объект.Организация);
		ПараметрыПоискаСклада.Вставить("РабочееМесто", Объект.РабочееМесто);
		ПараметрыПоискаСклада.Вставить("Магазин", Объект.Магазин);
		
		СкладПродажиПоУмолчанию = РозничныеПродажиСервер.СкладПродажиПоУмолчанию(ПараметрыПоискаСклада);
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(СкладПродажиПоУмолчанию) Тогда
			Объект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладПродажиПоУмолчанию, "Организация");
			ПараметрыПоискаККМ = Новый Структура();
			ПараметрыПоискаККМ.Вставить("Организация", Объект.Организация);
			ПараметрыПоискаККМ.Вставить("ПоУмолчанию", Истина);
			ККМОрганизации = ТаблицаКассККМОрганизаций.НайтиСтроки(ПараметрыПоискаККМ);
			Если ККМОрганизации.Количество()>0 Тогда
				ТекущаяКассаККМ = ККМОрганизации[0].КассаККМ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("мИмяКомпьютера") Тогда
		мИмяКомпьютера = Параметры.мИмяКомпьютера;
		НастройкаРМК = ПродажиСервер.ТекущаяНастройкаРМКСервер(мИмяКомпьютера);
		ИспользоватьНастройкуРМК = ЗначениеЗаполнено(НастройкаРМК);
		
		ПараметрыИнформацииПриСоздании = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
		ЗаполнитьНаборПравИНастроек();
		ЗаполнитьКнопкиНижнейПанели(ОтказПриСоздании, ПараметрыИнформацииПриСоздании);
		ЗаполнитьКнопкиВерхнейПанели();
	Иначе
		ЗаполнитьНаборПравИНастроек();
		УстановитьДоступностьЭлементовФормы();
	КонецЕсли;
	
	Пользователь = ОбщегоНазначенияРТ.ПользовательСУчетомИзмененныхПрав();
	
	ПродавецПоУмолчанию = ЗначениеНастроекПовтИсп.ПродавецПользователяПоУмолчанию(Пользователь);
	Объект.Продавец = ПродавецПоУмолчанию;
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин);
	ИспользоватьБонусы = ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммыЛояльности");
	ИспользоватьАгентскиеПлатежиИРазделениеВыручки =
		ПолучитьФункциональнуюОпцию("ИспользоватьАгентскиеПлатежиИРазделениеВыручки");
	
	АвтоматическийРасчетСкидок = УправлениеПользователямиВызовСервера.ПолучитьБулевоЗначениеПраваПользователя(
		ПланыВидовХарактеристик.ПраваПользователей.АвтоматическийРасчетСкидокПриРедактированииДокументаПродажи,
		Ложь);
		
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ЧекККМ.ПараметрыУказанияСерий(Объект));
	
	НадписьИнформацияОТоваре = "";
	НадписьТекущаяСумма = "";
	НадписьСдача = НСтр("ru = 'СДАЧА'");
	
	СоздатьНовыйНабор(Истина, Ложь);
	
	ОпределитьИмяФайлаБэкапа();
	ВосстановитьДанные();
	ЗаполнитьПлатежныеСистемы();
	
	// Интерфейс ГосИС - отключенный функционал
	ВестиУчетАлкогольнойПродукции = Ложь; //ИнтеграцияЕГАИСРТ.НужноРаботатьСЕГАИС(Объект.Дата);
	ВестиУчетМаркируемойПродукцииИСМП = Ложь; //ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП");
	МаркировкаВключена = Ложь; //ВестиУчетАлкогольнойПродукции Или ВестиУчетМаркируемойПродукцииИСМП;
	// Конец Интерфейс ГосИС

	//ИнтеграцияИСМПТК_РозничноеВыбытие
	УчетМаркировкаИСМПТК = Константы.ВестиУчетМаркируемойПродукцииИСМПТК.Получить(); //Если включена хоть одна ТГ, то эта константа - Истина
	Если УчетМаркировкаИСМПТК 
		И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
		РозничноеВыбытиеИСМПТК.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
		ПерезаполнитьПризнакиМаркировкиИСМПТК();
		ЗаполнитьПризнакКодаМаркировкиВТоварах();
	КонецЕсли;
	//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
	
	СобытияФормРТ.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	ОбработкаТабличнойЧастиТоварыСервер.УправлениеЭлементамиАгентскогоВознаграждения(ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОтказПриСоздании Тогда
		Отказ = Истина;
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформацииПриСоздании,,ВладелецФормы);
		Возврат;
	КонецЕсли;
	
	ЦветПродажи = Элементы.КартинкаЧО04Возврат.ЦветТекста;
	
	КассыККМИОрганизации = РозничныеПродажиКлиент.КассыККМИОрганизацииРМК(ТаблицаКассККМОрганизаций);
	МассивКассККМКлиент = КассыККМИОрганизации.КассыККМ;
	МассивОрганизацийКлиент = КассыККМИОрганизации.Организации;
	
	Для каждого КассаККМКлиент Из МассивКассККМКлиент Цикл
		Если НомерДокументаКассыККМ[КассаККМКлиент] = Неопределено Тогда
			ОбщегоНазначенияРТКлиент.ЗаполнитьНомерДокументаКассыККМ(КассаККМКлиент);
		КонецЕсли;
	КонецЦикла;
	
	// ПодключаемоеОборудование
	ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(
		ОповещенияПриПодключении,
		ЭтотОбъект,
		"СканерШтрихкода, СчитывательМагнитныхКарт, ДисплейПокупателя");
	
	ДисплейПокупателяПараметры = Новый Структура("ТоварНаименование, ТоварЦена, ТоварКоличество, ТоварСумма, ТоварСкидка,
		|СуммаВсего, СуммаСкидки, Сдача, Оплата");
	// Конец ПодключаемоеОборудование
	
	ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");
	
	// Автосохранение документа
	Если НаборПравИНастроек.ИнтервалАвтоматическогоСохраненияЧекаККМ > 0 Тогда
		ПодключитьОбработчикОжидания("АвтосохранениеДанныхКлиент",
			НаборПравИНастроек.ИнтервалАвтоматическогоСохраненияЧекаККМ);
	КонецЕсли;
	
	// Предупреждение о закрытии смены
	Если НаборПравИНастроек.ВремяПредупрежденияОСкоромЗакрытииСмены > 0
		И ЗначениеЗаполнено(РасчетноеВремяЗакрытияКассы) Тогда
		
		РасчетныйИнтервалПредупреждения = РасчетноеВремяЗакрытияКассы -
			ОбщегоНазначенияКлиент.ДатаСеанса() - НаборПравИНастроек.ВремяПредупрежденияОСкоромЗакрытииСмены * 60;
		РасчетныйИнтервалПредупреждения = Макс(РасчетныйИнтервалПредупреждения, 0.1);
		ПодключитьОбработчикОжидания("ВывестиПредупреждениеОЗакрытииКассы", РасчетныйИнтервалПредупреждения, Истина);
	КонецЕсли;
	
	ОбновитьДанныеSMSEmail();
	ОбновитьФормуНаКлиенте();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	#Если ВебКлиент Тогда
		РозничныеПродажиКлиент.ИзменитьЗаголовокКнопокДляWeb(Элементы, ИспользоватьНастройкуРМК, НастройкаРМК);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ СанкционированноеЗакрытие ИЛИ ЗавершениеРаботы Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ПоддерживаемыеТипыПодключаемогоОборудования = ПоддерживаемыеТипыПодключаемогоОборудования + ",ККТ,ЭквайринговыйТерминал";
	
	Если ЗавершениеРаботы Тогда
		// ПодключаемоеОборудование
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
		// Конец ПодключаемоеОборудование
		Возврат;
	КонецЕсли;
	
	ВывестиИнформациюНаДисплейПокупателя("Сервис");
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	ОчиститьДанныеПередЗакрытием();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("ИмяДействия") Тогда
			Если ВыбранноеЗначение.ИмяДействия = НСтр("ru = 'Подбор номенклатуры'") Тогда
				Если НаборПравИНастроек.ЛогироватьДействияКассира Тогда
					ИсполняемаяОперацияЛогирования = "ПоискИПодборНоменклатуры";
					ЛогированиеПоискИПодборНоменклатуры(ВыбранноеЗначение.Номенклатура, ВыбранноеЗначение.Характеристика);
				КонецЕсли;
				ДобавитьНоменклатуруВТабЧастьКлиент(ВыбранноеЗначение,
					НаборПравИНастроек.ОткрыватьРедактированиеСтрокиПриПоискеТоваров);
			ИначеЕсли ВыбранноеЗначение.ИмяДействия = НСтр("ru = 'Подбор быстрого товара'") Тогда
				Если НаборПравИНастроек.ЛогироватьДействияКассира Тогда
					ИсполняемаяОперацияЛогирования = "ПоискИПодборНоменклатуры";
					ЛогированиеПоискИПодборНоменклатуры(ВыбранноеЗначение.Номенклатура, ВыбранноеЗначение.Характеристика);
				КонецЕсли;
				ДобавитьНоменклатуруВТабЧасть(ВыбранноеЗначение.Номенклатура,
					ВыбранноеЗначение.Характеристика, ВыбранноеЗначение.Упаковка, 1, Истина);
				
				Если НаборПравИНастроек.ЗакрыватьБыстрыеТоварыПриВыбореТовара Тогда
					Элементы.ГруппаБыстрыхТоваров.Видимость = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ПриИзмененииЭлементаГосИС();
		ПерезаполнитьПризнакиМаркировки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КэшированныеЗначения",    КэшированныеЗначения);
	ДополнительныеПараметры.Вставить("СтандартнаяОбработка",    Истина);
	ДополнительныеПараметры.Вставить("ТребуетсяСерверныйВызов", Ложь);
	СобытияФормИСКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры);
	КэшированныеЗначения = ДополнительныеПараметры.КэшированныеЗначения;
	Если ДополнительныеПараметры.ТребуетсяСерверныйВызов Тогда
		ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник);
		Если НЕ (СтрНачинаетсяС(ИмяСобытия,"ЗакрытиеФормыПроверкиИПодбораГосИС") И Объект.ПродажаПоЗаказу) Тогда
			ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
		КонецЕсли;
	КонецЕсли;
	
	Если НеобходимВводЦены Тогда 
		ОбработатьВводЦены();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененоРабочееМестоТекущегоСеанса" Тогда
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	ИначеЕсли Источник = "ФормаОпросаВладельцаКарт" Тогда
		СменитьВладельцаКарты();
	КонецЕсли;
	
	//ИнтеграцияИСМПТК_РозничноеВыбытие
	Если УчетМаркировкаИСМПТК И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
		Если ИмяСобытия = "ЗакрытиеФормыПроверкиКМ" 
			И Источник = ЭтаФорма.УникальныйИдентификатор Тогда
			Если ТипЗнч(Параметр) = Тип("Строка") Тогда
				ЗакрытиеФормыПроверкиКМ(Параметр);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ДанныеСоСканераСтруктура = МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр);
			Если ДанныеСоСканераСтруктура = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Если УчетМаркировкаИСМПТК 
				И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
				Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
					РозничноеВыбытиеИСМПТККлиент.ОбработкаВнешнегоСобытия(ЭтаФорма, ДанныеСоСканераСтруктура, "РМК");
				Иначе
					РозничноеВыбытиеИСМПТККлиент.ОбработкаВнешнегоСобытияЧекВозврат(ЭтаФорма, ДанныеСоСканераСтруктура, "РМК");
				КонецЕсли;
			Иначе
				//Если учет маркировки не ведется, но отсканирован КМ, работать с ним не позволяем 
					Штрихкод = ДанныеСоСканераСтруктура.Штрихкод;
					ИсходныйШтрихкод = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(Штрихкод);
					ДанныеМаркировки = РозничноеВыбытиеИСМПТКВызовСервера.РазобратьШтриховойКодТовара(ИсходныйШтрихкод, Истина);
					Если ДанныеМаркировки.Разобран 
						И ДанныеМаркировки.ТипИдентификатораТовара = ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовШКТовараИСМПТК.КодТовараВФорматеDataMatrixGS1") Тогда
						ТекстСообщения = НСтр("ru = 'Был отсканирован код маркировки. Работа с маркировкой в данный момент невозможна: %1!'")
										+ Символы.ПС
										+ НСтр("ru = 'Для добавления товара необходимо отсканировать обычный штрихкод EAN!'");
						Если Не УчетМаркировкаИСМПТК Тогда
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НСтр("ru = 'В базе не включен учет маркируемой продукции'"));
						ИначеЕсли Не РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НСтр("ru = 'У текущего пользователя нет соответствующих прав доступа'"));
						Иначе
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НСтр("ru = 'Обратитесь к Администратору системы'"));
						КонецЕсли;
						ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
						Возврат;
					КонецЕсли;
					
				ОбработатьКодМаркировки(ДанныеСоСканераСтруктура);
			КонецЕсли;
			
			МенеджерОборудованияКлиентПереопределяемый.ОбработатьСобытие();
		КонецЕсли;
	КонецЕсли;
	//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	//ИнтеграцияИСМПТК_РозничноеВыбытие
	Если ВводДоступен() Тогда
		Если Не (Событие = "Штрихкод" Или Событие = "ПолученШтрихкод") Тогда
			
			ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
			
		КонецЕсли; 
	КонецЕсли;
	//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, Источник)

	ДополнительныеПараметры = Новый Структура("ИмяСобытия, Параметр, Источник", ИмяСобытия, Параметр, Источник);
	СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Событие", ДополнительныеПараметры);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТоварыВводДополнительнойИнформации(Элемент) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьФормуНаКлиенте", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Объект.Товары.Количество() = 0 Тогда
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
		Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий, Копирование);
	
	ОбработчикОповещения = Новый ОписаниеОповещения(
		"ОповещениеОткрытьФормуВыбораНоменклатурыТоварыПередНачаломДобавления", ЭтотОбъект);
	
	ОткрытьФормуВыбораСправочника("Номенклатура",,ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		Если Не ТекущиеДанные.НомерСтроки = Объект.Товары.Количество()
			И НЕ НаборПравИНастроек.РазрешитьРедактироватьНабранныйЧек 
			И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ТоварыПередУдалениемКлиент(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если Копирование Тогда
		
		ТекущаяСтрока.КлючСвязиСерийныхНомеров = 0;
		ТекущаяСтрока.СуммаАвтоматическойСкидки = 0;
		ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
		ТекущаяСтрока.СуммаСкидкиОплатыБонусом = 0;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущаяСтрока.Продавец = Объект.Продавец;
	Иначе
		ПоследняяРедактируемаяНоменклатура = ТекущаяСтрока.Номенклатура;
		ПоследнееРедактированиеКоличество = ТекущаяСтрока.КоличествоУпаковок;
		ПоследняяРедактируемаяСумма = ТекущаяСтрока.Сумма;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
		Элемент, КэшированныеЗначения, ПараметрыУказанияСерий, Копирование);
		
	РедактированиеТЧТовары = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПриИзмененииЭлементаГосИС();
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если КэшированныеЗначения = Неопределено Тогда
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
			Элемент, КэшированныеЗначения, ПараметрыУказанияСерий, Ложь);
	КонецЕсли;
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
			Элемент, КэшированныеЗначения, ПараметрыУказанияСерий);
	КонецЕсли;
	
	//ИнтеграцияИСМПТК_РозничноеВыбытие
	ПриИзмененииЭлементаИСМПТК();
	//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
	
	ОбновитьФормуНаКлиенте();
	
	РедактированиеТЧТовары = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
			Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ТоварыКоличествоУпаковок" Тогда
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	КонецЕсли;
	ТоварыПослеУдаленияСервер();
	ОбновитьФормуНаКлиенте();
	
	ДополнительныеРеквизиты = Новый Структура("ТребуетсяСерверныйВызов, ПослеУдаления", Ложь);
	СобытияФормИСКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "Товары", ДополнительныеРеквизиты);
	Если ТипЗнч(КэшированныеЗначения) = Тип("Структура")
		И ДополнительныеРеквизиты.ТребуетсяСерверныйВызов Тогда
		
		КэшированныеЗначения.Вставить("СобытияФорм");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ПриИзмененииТоварыНоменклатура();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработчикОповещения = Новый ОписаниеОповещения(
		"ОповещениеОткрытьФормуВыбораНоменклатурыТоварыНоменклатураНачалоВыбора", ЭтотОбъект);
	
	ОткрытьФормуВыбораСправочника("Номенклатура",, ОбработчикОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Отказ = Ложь;
	
	ТоварыПередУдалениемКлиент(Отказ);
	
	Если ТекущиеДанные = Неопределено ИЛИ Отказ Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.УдалитьСтрокиАгентскогоВознаграждения(Объект.Товары, ТекущиеДанные);
	Объект.Товары.Удалить(ТекущиеДанные);
	ТоварыПослеУдаленияСервер();
	ОбновитьФормуНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ТоварыПриИзмененииХарактеристикиНоменклатуры(ТекущаяСтрока);
	
	//ИнтеграцияИСМПТК_РозничноеВыбытие
	Если УчетМаркировкаИСМПТК
		И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
		РозничноеВыбытиеИСМПТККлиентПереопределяемый.ОчиститьМаркиИСМПТК(Объект, ТекущаяСтрока);
	КонецЕсли;
	//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(
		ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.СоздатьХарактеристикуНоменклатуры(
		ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ТоварыПриИзмененииКоличестваУпаковок(ТекущаяСтрока, ПоследнееРедактированиеКоличество);
	
	//ИнтеграцияИСМПТК_РозничноеВыбытие
	ПриИзмененииЭлементаИСМПТК();
	//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СуммаДоРасчета = СтрокаТабличнойЧасти.Сумма;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
		ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(
		Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
		
	ОбработкаТабличнойЧастиТоварыКлиент.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект, СтруктураДействий, СтрокаТабличнойЧасти, КэшированныеЗначения);
		
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	СуммаПослеРасчета = СтрокаТабличнойЧасти.Сумма;
	УменьшениеСуммыЧекаККМ = СуммаДоРасчета - СуммаПослеРасчета;
	УменьшениеСуммыЧекаККМ = ?(УменьшениеСуммыЧекаККМ > 0, УменьшениеСуммыЧекаККМ, 0);
	ЛогированиеИзмененийСтроки(
		"ИзменениеЦены",
		Неопределено, 
		СтрокаТабличнойЧасти.Номенклатура,
		СтрокаТабличнойЧасти.Характеристика,
		СтрокаТабличнойЧасти.Цена,
		Неопределено,
		УменьшениеСуммыЧекаККМ);
	
	ОбновитьФормуНаКлиенте();
	ОбновлениеДисплеяПокупателя("ИзмененияЦены");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбновитьФормуНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах",
		ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаЦеныСкидкиВПродажахВТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
		ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(
		Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
		
	ОбработкаТабличнойЧастиТоварыКлиент.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект, СтруктураДействий, СтрокаТабличнойЧасти, КэшированныеЗначения);
		
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	УменьшениеСуммыЧекаККМ = ПоследняяРедактируемаяСумма - СтрокаТабличнойЧасти.Сумма;
	УменьшениеСуммыЧекаККМ = ?(УменьшениеСуммыЧекаККМ > 0, УменьшениеСуммыЧекаККМ, 0);
	ЛогированиеИзмененийСтроки(
		"ИзменениеСуммы",
		ПоследняяРедактируемаяСумма,
		СтрокаТабличнойЧасти.Номенклатура,
		СтрокаТабличнойЧасти.Характеристика,
		СтрокаТабличнойЧасти.Сумма,
		Неопределено,
		УменьшениеСуммыЧекаККМ);
	
	ОбновитьФормуНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтатусУказанияСерийНажатие(Элемент, СтандартнаяОбработка)
	
	ВвестиСерии();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	Если Элемент.ТекущийЭлемент.Имя <> "ТоварыКоличествоУпаковок" Тогда
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	КонецЕсли;
	ОбновитьФормуНаКлиенте();
	Если КэшированныеЗначения = Неопределено Тогда
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
			Элементы.Товары,
			КэшированныеЗначения,
			ПараметрыУказанияСерий,
			Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ТоварыПриОкончанииРедактированияНаСервере(КэшированныеЗначения)
	
	Если КэшированныеЗначения.Свойство("СобытияФорм") Тогда
		СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Товары", Неопределено);
		КэшированныеЗначения.Удалить("СобытияФорм");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если РедактированиеТЧТовары
		И ТоварыВводДополнительнойИнформации(Элемент) Тогда
		Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КартинкаБыстрыеТоварыШаблонНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяЭлемента = Элемент.Имя;
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "Программно", "");
	ЭтотОбъект.ТекущийЭлемент = Элементы.Товары;
	ДобавитьБыстрыйТовар(ИмяЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЧО01Меню(Команда)
	
	ВыполнитьЧО01Меню();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЧО01МенюНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьЧО01Меню();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЧО01Меню()
	
	ОткрытьЗакрытьМенюПрочихОпераций();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЧО02Поиск(Команда)
	
	ВыполнитьЧО02Поиск();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЧО02ПоискНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьЧО02Поиск();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЧО02Поиск()
	
	ПереходНаФормуПоиска();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЧО03РедактированиеСтроки(Команда)
	
	ВыполнитьЧО03РедактированиеСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЧО03РедактированиеСтрокиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьЧО03РедактированиеСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЧО03РедактированиеСтроки()
	
	РедактированиеСтрокиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЧО04Возврат(Команда)
	
	ВыполнитьЧО04Возврат();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЧО04ВозвратНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьЧО04Возврат();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЧО04Возврат()
	
	ЭтоПродажа = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа");
	
	Если Объект.Товары.Количество() > 0 Тогда
		Если ЭтоПродажа Тогда
			ЗаголовокИнформации = НСтр("ru = 'Ввод чека возврата'"); 
			ТекстИнформации = НСтр("ru = 'Перед вводом чека возврата необходимо пробить, аннулировать или отложить текущий чек.'");
		Иначе
			ЗаголовокИнформации = НСтр("ru = 'Ввод чека продажи'"); 
			ТекстИнформации = НСтр("ru = 'Перед вводом чека продажи необходимо пробить, аннулировать или отложить текущий чек.'");
		КонецЕсли;
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		Возврат;
	КонецЕсли;
	
	Если ОтменитьОплатуПК Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОтложитьЧек", ЭтотОбъект);
		ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения);
		Возврат;
	КонецЕсли;
	
	Если ЭтоПродажа Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВыбиратьПродажиСУчетомВозвратов");
		ПараметрыФормы.Вставить("МассивКассККМ", МассивКассККМКлиент);
		ПараметрыФормы.Вставить("МассивОрганизаций", МассивОрганизацийКлиент);
		ПараметрыФормы.Вставить("ЕстьПередачаОФД", ЕстьПередачаОФД);
		ПараметрыФормы.Вставить("Оплата", ЕстьПередачаОФД);
		ПараметрыФормы.Вставить("СкрыватьКолонкуОрганизации", МассивКассККМКлиент.Количество() = 1);
		ПараметрыФормы.Вставить("ОперацияСДенежнымиСредствами", Объект.ОперацияСДенежнымиСредствами);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораЧекаПриВозврате", ЭтотОбъект);
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораЧека",
			ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
		
	Иначе
		СоздатьНовыйНаборКлиент();
		ОбновитьФормуНаКлиенте();
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
			Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЧО05Наличные(Команда)
	
	ВыполнитьЧО05Наличные();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЧО05НаличныеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьЧО05Наличные();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЧО05Наличные()
	
	//ИнтеграцияИСМПТК
	//Проверяем наличие марок по количеству товаров. Если указано больше КМ - пробивать чек нельзя.
	Если УчетМаркировкаИСМПТК 
		И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
		ОбнаруженыОшибки = Ложь;
		ВыполнитьПроверкуТоваровПередОплатойМаркировка(ОбнаруженыОшибки);
		Если ОбнаруженыОшибки Тогда
			Возврат;
		КонецЕсли;		
	КонецЕсли;
	//Конец ИнтеграцияИСМПТК
	
	Если ОтменитьОплатуПК Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуПростойОплаты", ЭтотОбъект);
		ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения);
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Или Объект.ОперацияСДенежнымиСредствами Тогда
		ЭтотОбъект.Доступность = Ложь;
	КонецЕсли;
	
	ИмяФормыОплаты = "ФормаПростойОплаты";
	Если ТаблицаДокументовРасчета.Количество() > 1 Тогда
		ИмяФормыОплаты = "ФормаСложнойОплаты";
	КонецЕсли;
	ОплатаНаличными = Истина;
	ОплатитьТовары(ИмяФормыОплаты);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЧО06ПлатежнаяКарта(Команда)
	
	ВыполнитьЧО06ПлатежнаяКарта();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЧО06ПлатежнаяКартаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьЧО06ПлатежнаяКарта();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЧО99МобильныйПлатеж(Команда)
	
	ВыполнитьЧО99МобильныйПлатеж();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЧО99МобильныйПлатеж(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьЧО99МобильныйПлатеж();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЧО99МобильныйПлатеж()
	
	//ИнтеграцияИСМПТК
	//Проверяем наличие марок по количеству товаров. Если указано больше КМ - пробивать чек нельзя.
	Если УчетМаркировкаИСМПТК 
		И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
		ОбнаруженыОшибки = Ложь;
		ВыполнитьПроверкуТоваровПередОплатойМаркировка(ОбнаруженыОшибки);
		Если ОбнаруженыОшибки Тогда
			Возврат;
		КонецЕсли;		
	КонецЕсли;
	//Конец ИнтеграцияИСМПТК
	
	Если Объект.Товары.Количество() > 0 Или Объект.ОперацияСДенежнымиСредствами Тогда
		ЭтотОбъект.Доступность = Ложь;
	КонецЕсли;
	
	ОплатитьТовары("ФормаСложнойОплаты", Ложь,,,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЧО06ПлатежнаяКарта()
	
	//ИнтеграцияИСМПТК
	//Проверяем наличие марок по количеству товаров. Если указано больше КМ - пробивать чек нельзя.
	Если УчетМаркировкаИСМПТК 
		И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
		ОбнаруженыОшибки = Ложь;
		ВыполнитьПроверкуТоваровПередОплатойМаркировка(ОбнаруженыОшибки);
		Если ОбнаруженыОшибки Тогда
			Возврат;
		КонецЕсли;		
	КонецЕсли;
	//Конец ИнтеграцияИСМПТК
	
	Если Объект.Товары.Количество() > 0 Или Объект.ОперацияСДенежнымиСредствами Тогда
		ЭтотОбъект.Доступность = Ложь;
	КонецЕсли;
	
	ОплатитьТовары("ФормаСложнойОплаты", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЧО07СложнаяОплата(Команда)
	
	ВыполнитьЧО07СложнаяОплата();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЧО07СложнаяОплатаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьЧО07СложнаяОплата();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЧО07СложнаяОплата()
	
	//ИнтеграцияИСМПТК
	//Проверяем наличие марок по количеству товаров. Если указано больше КМ - пробивать чек нельзя.
	Если УчетМаркировкаИСМПТК 
		И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
		ОбнаруженыОшибки = Ложь;
		ВыполнитьПроверкуТоваровПередОплатойМаркировка(ОбнаруженыОшибки);
		Если ОбнаруженыОшибки Тогда
			Возврат;
		КонецЕсли;		
	КонецЕсли;
	//Конец ИнтеграцияИСМПТК
	
	Если Объект.Товары.Количество() > 0 Или Объект.ОперацияСДенежнымиСредствами Тогда
		ЭтотОбъект.Доступность = Ложь;
	КонецЕсли;
	
	ОплатитьТовары("ФормаСложнойОплаты", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЧО08ОплатаБонусами(Команда)
	
	ВыполнитьЧО08ОплатаБонусами();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЧО08ОплатаБонусамиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьЧО08ОплатаБонусами();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЧО08ОплатаБонусами()
	
	Отказ = Ложь;
	ПараметрыИнформации = Неопределено;
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКассовыеСмены(Отказ, ПараметрыИнформации);
	ПроверитьКонтрагентаФизЛицо(Отказ, ПараметрыИнформации);
	Если Отказ Тогда
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ВозможнаОплата = ВозможнаОплатаБонусами(ДополнительныеПараметры);
	Если ВозможнаОплата Тогда
		
		// Скидки
		ПараметрыДействия = Новый Структура;
		ПараметрыДействия.Вставить("Отказ", Отказ);
		ПараметрыДействия.Вставить("ПараметрыИнформации", ПараметрыИнформации);
		ПараметрыДействия.Вставить("БонуснаяПрограммаЛояльности", ДополнительныеПараметры.БонуснаяПрограммаЛояльности);
		ПараметрыДействия.Вставить("ИмяОбработкиОповещения", "ОплатаБонусамиПослеВыводаСообщений");
		ПараметрыДействия.Вставить("БудетОплатаБонусами", Истина);
		ПараметрыДействия.Вставить("УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов",
			ДополнительныеПараметры.УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов);
		
		Если ДополнительныеПараметры.УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов Тогда
			ОтменитьСкидкиИОплатуБонусамиСервер();
		Иначе
			Если НЕ Объект.ПродажаПоЗаказу Тогда
				НазначитьАвтоматическиеСкидкиКлиент( , , ПараметрыДействия);
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыДействия.Свойство("ВыведеныСообщения") Тогда
			Возврат;
		Иначе
			ОплатаБонусамиПослеВыводаСообщений(Неопределено, ПараметрыДействия);
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЧО09ОперацияДСНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьИзменениеОперацииДС();
	ПерезаполнитьПризнакиМаркировки();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЧО09ОперацияДС(Команда)
	
	ВыполнитьИзменениеОперацииДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьИзменениеОперацииДС()
	
	РозничныеПродажиКлиент.ВыполнитьИзменениеОперацииДС(Объект);
	УстановитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО01БыстрыеТовары(Команда)
	
	ВыполнитьПО01БыстрыеТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО01БыстрыеТоварыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО01БыстрыеТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО01БыстрыеТовары()
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.БыстрыеТоварыОткрытие");
	
	Если Объект.Товары.Количество() = 0 Тогда
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	Если ОткрытиеБыстрыхТоваровБезПанели Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПалитраБыстрыхТоваров", ПалитраБыстрыхТоваров);
		ПараметрыФормы.Вставить("НомерСтраницы", 1);
		ПараметрыФормы.Вставить("ЗакрыватьБыстрыеТоварыПриВыбореТовара",
			НаборПравИНастроек.ЗакрыватьБыстрыеТоварыПриВыбореТовара);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Справочник.ПалитраБыстрыхТоваров.Форма.ФормаСтраницыБыстрыхТоваров",
			ПараметрыФормы, ЭтотОбъект,,,,, Режим);
	Иначе
		ОткрытьЗакрытьМенюБыстрыхТоваров();
	КонецЕсли;
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО02ВвестиВнесениеДенег(Команда)
	
	ВыполнитьПО02ВвестиВнесениеДенег();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО02ВвестиВнесениеДенегНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО02ВвестиВнесениеДенег();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО02ВвестиВнесениеДенег()
	
	Если НЕ ВозможностьВнесенияДенег() Тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(
			НСтр("ru = 'Нет документов по внесению денежных средств'"));
		ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");
		Возврат;
	КонецЕсли;
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ВвестиВнесениеДенег");
	
	ВывестиИнформациюНаДисплейПокупателя("Сервис");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КассыККМ"   , МассивКассККМКлиент);
	ПараметрыФормы.Вставить("Организации", МассивОрганизацийКлиент);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораВнесенияДенег", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораВнесенияДенег",
		ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	
	ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО03ЗаменитьПрава(Команда)
	
	ВыполнитьПО03ЗаменитьПрава();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО03ЗаменитьПраваНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО03ЗаменитьПрава();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО03ЗаменитьПрава()
	
	Если Не ИспользоватьПодключаемоеОборудование Тогда
		ТекстЗаголовка = НСтр("ru = 'Карта не может быть считана.'");
		ТекстСообщения = НСтр("ru = 'Подключаемое оборудование не используется.'"); 
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстЗаголовка, ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ЗаменитьПрава");

	Пользователь = глЗначениеПеременной("ПользовательИзмененныхПрав");
	Если Пользователь = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(Пользователь) Тогда
	
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Магазин", Объект.Магазин);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Пользователь", Пользователь);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуЗаменыПравПользователя",
			ЭтотОбъект, ДополнительныеПараметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаЗаменыПравПользователя",
			ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим); 
		
	Иначе
		
		глЗначениеПеременнойУстановить("ПользовательИзмененныхПрав", Неопределено, Истина);
		глЗначениеПеременнойУстановитьСервер("ПользовательИзмененныхПрав", Неопределено, Истина);
		Оповестить("ОбновитьФормуМенюРМК");
		ЛогированиеБезДополнительныхДанных("ЗаменаПользователя", Пользователь);
		
		ПриИзмененииПравСервер();
		ОбновитьФормуНаКлиенте();
	КонецЕсли;
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО04ОтложитьЧек(Команда)
	
	ВыполнитьПО04ОтложитьЧек();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО04ОтложитьЧекНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО04ОтложитьЧек();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО04ОтложитьЧек()
	
	Если ОтменитьОплатуПК Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОтложитьЧек", ЭтотОбъект);
		ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения);
		Возврат;
	КонецЕсли;
	
	ОповещениеОтложитьЧек();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО05ВвестиАннулирование(Команда)
	
	ВыполнитьПО05ВвестиАннулирование();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО05ВвестиАннулированиеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО05ВвестиАннулирование();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО05ВвестиАннулирование()
	
	Если ОтменитьОплатуПК Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВвестиАннулирование", ЭтотОбъект);
		ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения);
		Возврат;
	КонецЕсли;
	
	ОповещениеВвестиАннулирование();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО06ВвестиШтрихкод(Команда)
	
	ВыполнитьПО06ВвестиШтрихкод();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО06ВвестиШтрихкодНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО06ВвестиШтрихкод();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО06ВвестиШтрихкод()
	
	Если Объект.Товары.Количество() = 0 Тогда
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	
	ПараметрыВводаЧисла = Новый Структура;
	ПараметрыВводаЧисла.Вставить("ВозвращатьЧислоСтрокой", Истина);

	//ИнтеграцияИСМПТК_РозничноеВыбытие
	Если ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеОбщейФОМаркировки() 
		И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
		ДопПараметры = Новый Структура("ВызовИзФормыРучногоВводаШК", Истина);
		//Передача доп.параметра необходима для определения места вызова в ОповещениеПоискаПоШтрихкоду: если вызов пришел из формы Ф7, 
		//нужно будет выводить сообщение по маркировке. Место вызова определяем по наличию доп.параметра
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаЧислаВвестиШтрихкод", ЭтотОбъект, ДопПараметры);
	Иначе	
	    ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаЧислаВвестиШтрихкод", ЭтотОбъект);
	КонецЕсли;
	
	//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
	
	ПолучитьИнтерактивноЧисло(НСтр("ru = 'Введите штрихкод.'"), ОбработчикОповещения, ПараметрыВводаЧисла);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО07ОткрытьДенежныйЯщик(Команда)
	
	ВыполнитьПО07ОткрытьДенежныйЯщик();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО07ОткрытьДенежныйЯщикНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО07ОткрытьДенежныйЯщик();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО07ОткрытьДенежныйЯщик()
	
	Если Не ИспользоватьПодключаемоеОборудование Тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Денежный ящик не может быть открыт.'"),
			НСтр("ru = 'Подключаемое оборудование не используется.'"));
		Возврат;
	КонецЕсли;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ОповещениеОткрытьФормуВыбораКассыПриОткрытииДенежногоЯщика", ЭтотОбъект);
		ЗначениеВыбораКасса = ВыбраннаяКассаККМ(ОбработчикОповещения);
		ЗавершитьВыбораКассыПриОткрытииДенежногоЯщика(ЗначениеВыбораКасса);
	Иначе
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(
			НСтр("ru = 'Устройство для печати чеков не подключено.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО08РасчетСкидок(Команда)
	
	ВыполнитьПО08РасчетСкидок();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО08РасчетСкидокНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО08РасчетСкидок();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО08РасчетСкидок()
	
	НазначитьАвтоматическиеСкидкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО09Печать(Команда)
	
	ВыполнитьПО09Печать();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО09ПечатьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО09Печать();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО09Печать()
	
	Если Объект.Товары.Количество() = 0 Тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Чек не заполнен.'"));
		Возврат;
	КонецЕсли;
	
	ТекстЗаголовка = "Оплатить чек?";
	ТекстВопроса = НСтр("ru = 'Печать чека возможна только после закрытия чека. Оплатить чек?'");
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВопросаПечатьПослеЗакрытия", ЭтотОбъект);
	ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(ТекстЗаголовка,ТекстВопроса,, ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО10НапечататьПоследнийСлипЧек(Команда)
	
	ВыполнитьПО10НапечататьПоследнийСлипЧек();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО10НапечататьПоследнийСлипЧекНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО10НапечататьПоследнийСлипЧек();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО10НапечататьПоследнийСлипЧекЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	Если НЕ РезультатВыполнения.Результат Тогда  
		ЗаголовокИнформации = НСтр("ru = 'Печать последнего слип чека'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, РезультатВыполнения.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО10НапечататьПоследнийСлипЧек()
	
	Если Не ИспользоватьПодключаемоеОборудование Тогда
		ТекстЗаголовка = НСтр("ru = 'Слип-чек не может быть напечатан.'");
		ТекстСообщения = НСтр("ru = 'Подключаемое оборудование не используется.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстЗаголовка, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(глПодключаемоеОборудование.ПоследнийСлипЧек) Тогда
		ЭтотОбъект.Доступность = Ложь;
		Оповещение = Новый ОписаниеОповещения("ВыполнитьПО10НапечататьПоследнийСлипЧекЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьПечатьТекста(
			Оповещение, УникальныйИдентификатор, глПодключаемоеОборудование.ПоследнийСлипЧек);
	Иначе
		ТекстСообщения = НСтр("ru = 'Нет последнего слип-чека.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО11Выход(Команда)
	
	ВыполнитьПО11Выход();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО11ВыходНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО11Выход();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО11Выход()
	
	Если ОтменитьОплатуПК Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВыполнитьВыход", ЭтотОбъект);
		ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения);
		Возврат;
	КонецЕсли;
	
	ОповещениеВыполнитьВыход();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО12ПолучитьВес(Команда)
	
	ВыполнитьПО12ПолучитьВес();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО12ПолучитьВесНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО12ПолучитьВес();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО12ПолучитьВес()
	
	Если Не ИспользоватьПодключаемоеОборудование Тогда
		ЗаголовокИнформации = НСтр("ru = 'Вес не может быть получен.'");
		ТекстИнформации = НСтр("ru = 'Подключаемое оборудование не используется.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(
			НСтр("ru='Необходимо выбрать строку, для которой нужно получить вес.'"));
	Иначе
		ЭтотОбъект.Доступность = Ложь;
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеПолучитьВесЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(ОписаниеОповещения, ЭтотОбъект, , Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО13ВвестиВыемкаДенег(Команда)
	
	ВыполнитьПО13ВвестиВыемкаДенег();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО13ВвестиВыемкаДенегНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО13ВвестиВыемкаДенег();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО13ВвестиВыемкаДенег()
	
	ВывестиИнформациюНаДисплейПокупателя("Сервис");
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораКассыВвестиВыемкаДенег", ЭтотОбъект);
	ЗначениеВыбораКасса = ВыбраннаяКассаККМ(ОбработчикОповещения);
	ЗавершитьВыбораКассыВвестиВыемкаДенег(ЗначениеВыбораКасса);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО14Продавец(Команда)
	
	ВыполнитьПО14Продавец();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО14ПродавецНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО14Продавец();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО14Продавец()
	
	ИсполняемаяОперацияЛогирования = "ВыбранПродавец";
	Если ЗначениеЗаполнено(Объект.Продавец) Тогда
		ЛогированиеВводаПродавца(
			Неопределено, Объект.Продавец, ПредопределенноеЗначение("Справочник.ИнформационныеКарты.ПустаяСсылка"));
		Объект.Продавец = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		УстановитьЗаголовок();
	Иначе
		// &ЗамерПроизводительности
		ОценкаПроизводительностиРТКлиент.НачатьЗамер(
						Истина, "Справочник.ФизическиеЛица.Форма.ФормаВыбораВРМК.Открытие");
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораПродавца", ЭтотОбъект);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Сотрудник" , Истина);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбораВРМК",
			ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО15ПродолжитьЧек(Команда)
	
	ВыполнитьПО15ПродолжитьЧек();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО15ПродолжитьЧекНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО15ПродолжитьЧек();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО15ПродолжитьЧек()
	
	Если ОтменитьОплатуПК Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеПродолжитьЧек", ЭтотОбъект);
		ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения);
		Возврат;
	КонецЕсли;
	
	ОповещениеПродолжитьЧек();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО16ВвестиВозвратТовараОтРозничногоПокупателя(Команда)
	
	ВыполнитьПО16ВвестиВозвратТовараОтРозничногоПокупателя();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО16ВвестиВозвратТовараОтРозничногоПокупателяНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО16ВвестиВозвратТовараОтРозничногоПокупателя();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО16ВвестиВозвратТовараОтРозничногоПокупателя()
	
	Если Объект.Товары.Количество() > 0 Тогда
		ЗаголовокИнформации = НСтр("ru = 'Ввод чека возврата'"); 
		ТекстИнформации =
			НСтр("ru = 'Перед вводом чека возврата необходимо пробить, аннулировать или отложить текущий чек.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		Возврат;
	КонецЕсли;
	
	Если ОтменитьОплатуПК Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОтложитьЧек", ЭтотОбъект);
		ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения);
		Возврат;
	КонецЕсли;
	
	ЭтоПродажа = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа");
	
	Если Объект.Товары.Количество() = 0 Тогда
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	
	Если ЭтоПродажа Тогда
		ВывестиИнформациюНаДисплейПокупателя("ВозвратТовара");
		РезультатОткрытияФормы = Новый Структура;
		РезультатОткрытияФормы.Вставить("ЧекККМ", Неопределено);
		ОповещениеОткрытьФормуВыбораЧекаПриВозврате(РезультатОткрытияФормы, Неопределено);
	Иначе
		СоздатьНовыйНаборКлиент();
		ОбновитьФормуНаКлиенте();
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
			Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО17ВвестиИнформационнуюКарту(Команда)
	
	ВыполнитьПО17ВвестиИнформационнуюКарту();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО17ВвестиИнформационнуюКартуНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО17ВвестиИнформационнуюКарту();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО17ВвестиИнформационнуюКарту()
	
	Если Объект.ПродажаПоЗаказу Тогда
		ЗаголовокИнформации = НСтр("ru = 'Ошибка изменения дисконтной карты.'");
		ТекстСообщения = НСтр("ru = 'Дисконтная карта выбирается в документе заказ покупателя'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	// &ЗамерПроизводительности	
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ВвестиИнформационнуюКарту");
	
	Если НЕ ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ДополнительныеПараметры = Новый Структура;
		Если (ИспользоватьНастройкуРМК И НаборПравИНастроек.ВыборИнформационнойКартыТолькоПоКоду) Тогда
			
			// &ЗамерПроизводительности
			ОценкаПроизводительностиРТКлиент.НачатьЗамер(
			Истина, "Обработка.РМКУправляемыйРежим.Форма.ФормаПоискаДисконтнойКарты.Открытие");
			
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуПоискаДисконтнойКарты",
				ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаПоискаДисконтнойКарты",,,,,, ОбработчикОповещения, Режим);
		Иначе
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораДисконтнойКарты",
				ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораДисконтнойКарты",,,,,, ОбработчикОповещения, Режим);
		КонецЕсли;
	Иначе
		ЛогированиеБезДополнительныхДанных(
			"ВыбранаДисконтнаяКарта",
			Объект.ДисконтнаяКарта,
			ПредопределенноеЗначение("Справочник.ИнформационныеКарты.ПустаяСсылка"));
		Объект.ДисконтнаяКарта = ПредопределенноеЗначение("Справочник.ИнформационныеКарты.ПустаяСсылка");
		Модифицированность = Истина;
		ТекстСообщенияСменыКарты = "";
		ПриИзмененииДисконтнаяКартаСервер(ТекстСообщенияСменыКарты);
		ОбновитьДанныеSMSEmail();
		
		Если Не Объект.ПродажаПоЗаказу Тогда
			ПересчитатьИлиОтменитьСкидкиИОплатуБонусами(Истина);
		КонецЕсли;
		
		Если ПустаяСтрока(ТекстСообщенияСменыКарты) Тогда
			ОбновитьФормуНаКлиенте();
		Иначе
			ЗаголовокИнформации = "";
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщенияСменыКарты);
		КонецЕсли;
	КонецЕсли;
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО18ОткрытьПодарочныеСертификаты(Команда)
	
	ВыполнитьПО18ОткрытьПодарочныеСертификаты();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО18ОткрытьПодарочныеСертификатыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО18ОткрытьПодарочныеСертификаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО18ОткрытьПодарочныеСертификаты()
	
	СтрокаТЧ = Элементы.Товары.ТекущиеДанные;
	ЗаголовокИнформации = НСтр("ru = 'Ошибка ввода номеров подарочных сертификатов'"); 
	
	Если СтрокаТЧ = Неопределено Тогда
		ТекстИнформации = НСтр("ru = 'Не выбрана строка, для которой необходимо ввести подарочные сертификаты.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
		ТекстИнформации = НСтр("ru = 'Для ввода номеров подарочных сертификатов необходимо выбрать номенклатуру.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		Возврат;
	КонецЕсли;
	
	ДобавитьПодарочныеСертификатыВСтроку(СтрокаТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО19УправляемыеСкидки(Команда)
	
	ВыполнитьПО19УправляемыеСкидки();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО19УправляемыеСкидкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО19УправляемыеСкидки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО19УправляемыеСкидки()
	
	Если ОшибкаРасчетаСкидокПоЗаказуПокупателя() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОшибкаРасчетаСкидокПоДокументуРасчета() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОшибкаРасчетаСкидокПриВозврате() Тогда
		Возврат;
	КонецЕсли;
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.УправляемыеСкидки");
	
	РассчитатьКонтролироватьОстаткиТоваровПриЗакрытииЧека();
	
	АдресСкидокВХранилище = ВыполнитьПредварительныйРасчетСкидокНаСервере(ПорядковыйНомерПродажи);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивУправляемыеСкидкиДокумента", УправляемыеСкидки.ВыгрузитьЗначения());
	ПараметрыФормы.Вставить("Дата" , ОбщегоНазначенияКлиент.ДатаСеанса());
	ПараметрыФормы.Вставить("Магазин", Объект.Магазин);
	ПараметрыФормы.Вставить("АдресСкидокВХранилище", АдресСкидокВХранилище);
	
	СписокОдноразовыхКодов = Новый Массив;
	Для Каждого ПредъявленныйКод Из Объект.ПредъявленныеКодыОднократныхСкидок Цикл
		СписокОдноразовыхКодов.Добавить(ПредъявленныйКод.КодСкидки);
	КонецЦикла;
	ПараметрыФормы.Вставить("СписокОдноразовыхКодов", СписокОдноразовыхКодов);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуУправляемыхСкидок", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаУправляемыеСкидки",
		ПараметрыФормы,,,,, ОбработчикОповещения, Режим);
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО20ЗаменаКарты(Команда)
	
	ВыполнитьПО20ЗаменаКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО20ЗаменаКартыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО20ЗаменаКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО20ЗаменаКарты()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин", Объект.Магазин);
	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		ПараметрыФормы.Вставить("КартаИсточник", Объект.ДисконтнаяКарта);
	ИначеЕсли ЗначениеЗаполнено(ДисконтнаяКартаДляЗамены) Тогда
		ПараметрыФормы.Вставить("КартаИсточник", ДисконтнаяКартаДляЗамены);
	Иначе
		ПараметрыФормы.Вставить("КартаИсточник",
			ПредопределенноеЗначение("Справочник.ИнформационныеКарты.ПустаяСсылка"));
	КонецЕсли;
	ПараметрыФормы.Вставить("КопироватьПараметрыБонусовПриЗаменеКарты",
		ИспользоватьНастройкуРМК И НаборПравИНастроек.КопироватьПараметрыБонусовПриЗаменеКарты);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуДокументаЗаменаОднойКарты", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаДокументаЗаменаОднойКарты",
		ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО21ПробитьЧек(Команда)
	
	ВыполнитьПО21ПробитьЧек();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО21ПробитьЧекНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО21ПробитьЧек();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО21ПробитьЧек()
	
	Если Объект.Товары.Количество() > 0 Тогда
		ЗаголовокИнформации = НСтр("ru = 'Пробитие другого чека'"); 
		ТекстИнформации = НСтр("ru = 'Перед пробитием другого чека необходимо пробить, аннулировать или отложить текущий чек.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		Возврат;
	КонецЕсли;
	
	Если ОтменитьОплатуПК Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОтложитьЧек", ЭтотОбъект);
		ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения);
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 Тогда
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПробитиеДругогоЧека");
	ПараметрыФормы.Вставить("МассивКассККМ", МассивКассККМКлиент);
	ПараметрыФормы.Вставить("СкрыватьКолонкуОрганизации", МассивКассККМКлиент.Количество() = 1);
	ПараметрыФормы.Вставить("ЧекиККМ", ТабличноеПолеЧеков);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораЧекаПриПробитииЧека", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораЧека",
		ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО22РучныеСкидки(Команда)
	
	ВыполнитьПО22РучныеСкидки();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО22РучныеСкидкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО22РучныеСкидки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО22РучныеСкидки()
	
	Если ОшибкаРасчетаСкидокПоЗаказуПокупателя() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОшибкаРасчетаСкидокПоДокументуРасчета() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОшибкаРасчетаСкидокПриВозврате() Тогда
		Возврат;
	КонецЕсли;
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
					Истина, "Обработка.РМКУправляемыйРежим.Форма.ФормаРучныхСкидок.Открытие");
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуРучныхСкидок", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаРучныхСкидок",
		, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО23ВвестиСерии(Команда)
	
	ВыполнитьПО23ВвестиСерии();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО23ВвестиСерииНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО23ВвестиСерии();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО23ВвестиСерии()
	
	ВвестиСерии();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО24ПолучитьИзТСД(Команда)
	
	ВыполнитьПО24ПолучитьИзТСД();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО24ПолучитьИзТСДНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО24ПолучитьИзТСД();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО24ПолучитьИзТСД()
	
	Если Объект.Товары.Количество() = 0 Тогда
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	Если Не ИспользоватьПодключаемоеОборудование Тогда
		
		ЗаголовокИнформации = НСтр("ru = 'Данные не могут быть получены.'"); 
		ТекстИнформации     = НСтр("ru = 'Подключаемое оборудование не используется.'"); 
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыбиратьНенайденные", Ложь);
	ДополнительныеПараметры.Вставить("ОбработатьПослеЗагрузки", Истина);
	ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО25ПечатьПробитогоЧека(Команда)
	
	ВыполнитьПО25ПечатьПробитогоЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО25ПечатьПробитогоЧекаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО25ПечатьПробитогоЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО25ПечатьПробитогоЧека()
	
	Если Объект.Товары.Количество() > 0 Тогда
		ЗаголовокИнформации = НСтр("ru = 'Печать пробитого чека'"); 
		ТекстИнформации = НСтр("ru = 'Перед печатью пробитого чека необходимо пробить, аннулировать или отложить текущий чек.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		Возврат;
	КонецЕсли;
	
	Если ОтменитьОплатуПК Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОтложитьЧек", ЭтотОбъект);
		ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения);
		Возврат;
	КонецЕсли;
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Истина, "Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораЧека.Открытие");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПечатьПробитогоЧека");
	ПараметрыФормы.Вставить("МассивКассККМ", МассивКассККМКлиент);
	ПараметрыФормы.Вставить("СкрыватьКолонкуОрганизации", МассивКассККМКлиент.Количество() = 1);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораЧекаПриПечатиПробитогоЧека", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораЧека",
		ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО26ОтчетБезГашения(Команда)
	
	ВыполнитьПО26ОтчетБезГашения();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО26ОтчетБезГашенияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО26ОтчетБезГашения();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО26ОтчетБезГашения()
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораКассыОтчетБезГашения", ЭтотОбъект);
	ЗначениеВыбораКасса = ВыбраннаяКассаККМ(ОбработчикОповещения);
	НапечататьОтчетБезГашения(ЗначениеВыбораКасса);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО27ПродажаПоЗаказу(Команда)
	
	ВыполнитьПО27ПродажаПоЗаказу();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО27ПродажаПоЗаказуНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО27ПродажаПоЗаказу();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО27ПродажаПоЗаказу()
	
	Если Объект.Товары.Количество() > 0 Тогда
		ЗаголовокИнформации = НСтр("ru = 'Выбор заказа покупателя'"); 
		ТекстИнформации = НСтр("ru = 'Перед выбором заказа покупателя необходимо пробить, аннулировать или отложить текущий чек.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		Возврат;
	КонецЕсли;
	
	Если ОтменитьОплатуПК Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОтложитьЧек", ЭтотОбъект);
		ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения);
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 Тогда
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ПродажаПоЗаказу");
	
	Если НЕ Объект.ПродажаПоЗаказу Тогда
		
		МассивСтруктурОтбора = Новый Массив;
		
		СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
		СтруктураОтбора.Поле = "Ссылка.Статус";
		СтруктураОтбора.Значение = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПокупателей.Согласован");
		СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		СтруктураОтбора.Использование = Истина;
		МассивСтруктурОтбора.Добавить(СтруктураОтбора);
		
		СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
		СтруктураОтбора.Поле = "Магазин";
		СтруктураОтбора.Значение = Объект.Магазин;
		СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		СтруктураОтбора.Использование = Истина;
		МассивСтруктурОтбора.Добавить(СтруктураОтбора);
		
		СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
		СтруктураОтбора.Поле = "Ссылка.Организация";
		СтруктураОтбора.Значение = МассивОрганизацийКлиент;
		СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		СтруктураОтбора.Использование = Истина;
		МассивСтруктурОтбора.Добавить(СтруктураОтбора);
		
		СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
		СтруктураОтбора.Поле = "Ссылка.Проведен";
		СтруктураОтбора.Значение = Истина;
		СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		СтруктураОтбора.Использование = Истина;
		МассивСтруктурОтбора.Добавить(СтруктураОтбора);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("МассивСтруктурОтбора", МассивСтруктурОтбора);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораЗаказаПокупателя", ЭтотОбъект);
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораЗаказаПокупателя",
			ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	Иначе
		СоздатьНовыйНаборКлиент();
		ПодключитьОбработчикОжидания("Подключаемый_ДисплеяПокупателяПриПростое", 20, Истина);
		ЗавершитьОбработкуДокументаОснования();
		Элементы.КартинкаПО27ПродажаПоЗаказу.ЦветТекста = ЦветПродажи;
	КонецЕсли;
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО28ПросмотрНакоплений(Команда = Неопределено)
	
	ВыполнитьПО28ПросмотрНакоплений();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО28ПросмотрНакопленийНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО28ПросмотрНакоплений();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО28ПросмотрНакоплений()
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ПросмотрНакоплений");
	
	Если Объект.Товары.Количество() = 0 Тогда
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
	Истина, "Обработка.РМКУправляемыйРежим.Форма.ФормаПросмотраНакоплений.Открытие");
	
	ПараметрыОткрытия = Новый Структура;
	РеквизитыДокумента = Новый Структура;
	РеквизитыДокумента.Вставить("Ссылка", Объект.Ссылка);
	РеквизитыДокумента.Вставить("Дата", Объект.Дата);
	РеквизитыДокумента.Вставить("Проведен", Ложь);
	РеквизитыДокумента.Вставить("ВидОперации", Объект.ВидОперации);
	РеквизитыДокумента.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	РеквизитыДокумента.Вставить("СтатусЧекаККМ",
		ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.ПустаяСсылка"));
	РеквизитыДокумента.Вставить("ОтчетОРозничныхПродажах",
		ПредопределенноеЗначение("Документ.ОтчетОРозничныхПродажах.ПустаяСсылка"));
	
	ПараметрыОткрытия.Вставить("РеквизитыДокумента", РеквизитыДокумента);
	ПараметрыОткрытия.Вставить("ВыборИнформационнойКартыТолькоПоКоду",
		ИспользоватьНастройкуРМК И НаборПравИНастроек.ВыборИнформационнойКартыТолькоПоКоду);
	ПараметрыОткрытия.Вставить("РазрешитьПодборИнформационнойКарты",
		НаборПравИНастроек.РазрешитьПодборИнформационнойКарты);
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаПросмотраНакоплений", ПараметрыОткрытия);
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО29ОтменитьОплатуБонусами(Команда = Неопределено)
	
	ВыполнитьПО29ОтменитьОплатуБонусами();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО29ОтменитьОплатуБонусамиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО29ОтменитьОплатуБонусами();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО29ОтменитьОплатуБонусами()
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ОтменитьОплатуБонусами");		
	ОтменитьОплатуБонусами();
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ОтменитьСкидки");
	ОтменитьСкидки();
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
	ОбновитьФормуНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО30ВозвратПоследнегоЧека(Команда)
	
	ВыполнитьВозвратПоследнегоЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО30ВозвратПоследнегоЧекаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьВозвратПоследнегоЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВозвратПоследнегоЧека()
	
	Если Объект.Товары.Количество() > 0 Тогда
		ЗаголовокИнформации = НСтр("ru = 'Ввод чека возврата'"); 
		ТекстИнформации = НСтр("ru = 'Перед вводом чека возврата необходимо пробить, аннулировать или отложить текущий чек.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		Возврат;
	КонецЕсли;
	
	Если ОтменитьОплатуПК Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОтложитьЧек", ЭтотОбъект);
		ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения);
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 Тогда
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	
	ПоследнийЧек = ПоследнийПробитыйЧекПродажи(МассивКассККМКлиент);
	Если ЗначениеЗаполнено(ПоследнийЧек) Тогда
		РезультатОткрытияФормы = Новый Структура;
		РезультатОткрытияФормы.Вставить("ЧекККМ", ПоследнийЧек);
		ОповещениеОткрытьФормуВыбораЧекаПриВозврате(РезультатОткрытияФормы, Неопределено);
	Иначе
		ЗаголовокПредупреждения = НСтр("ru = 'Поиск последнего чека'");
		ТекстПредупреждения =  НСтр("ru = 'Не найдено пробитых чеков продажи в текущей смене'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокПредупреждения, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО31ПолучитьДокументРасчета(Команда)
	
	ОткрытьВыборДокументРасчета();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО31ПолучитьДокументРасчетаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьВыборДокументРасчета();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО32АкцизныеМарки(Команда)
	
	СобытияФормРТКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО32АкцизныеМаркиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПереопределяемуюКоманду();
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО33ПоискПоНаименованию(Команда)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Магазин",Объект.Магазин);
	РаботаСПравиламиИменованияКлиент.ПоискПоНаименованию(ЭтаФорма, ПараметрыПоиска, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО33ПоискПоНаименованиюНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Магазин",Объект.Магазин);
	РаботаСПравиламиИменованияКлиент.ПоискПоНаименованию(ЭтаФорма, ПараметрыПоиска, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВыборДокументРасчета()

	Если Объект.Товары.Количество() > 0 Тогда
		ЗаголовокИнформации = НСтр("ru = 'Выбор документа расчета'"); 
		ТекстИнформации = НСтр("ru = 'Перед выбором документа расчета необходимо пробить, аннулировать или отложить текущий чек.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		Возврат;
	КонецЕсли;
	
	Если ОтменитьОплатуПК Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОтложитьЧек", ЭтотОбъект);
		ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения);
		Возврат;
	КонецЕсли;
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ВыборДокументРасчета");
	
	Если Объект.Товары.Количество() = 0 Тогда
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументРасчета)  Тогда
		Объект.ДокументРасчета = Неопределено;
		Объект.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		ЭтоЗачетАванса = Ложь;
		ЭтоОплатаРассрочки = Ложь;
		ЭтоВозвратАванса = Ложь;
		СуммаОстаткаДокументаРасчета = 0;
		ЕстьТоварыВДокументеРасчета = Ложь;
		
		УстановитьЗаголовок();
		ЗавершитьОбработкуДокументаОснования();
	Иначе
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораДокументаРасчета", ЭтотОбъект);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Контрагент" , Объект.Контрагент);
		ПараметрыФормы.Вставить("Магазин" , Объект.Магазин);
		ПараметрыФормы.Вставить("МассивОрганизаций", МассивОрганизацийКлиент);
		ПараметрыФормы.Вставить("ЗаказПокупателя" , Объект.ЗаказПокупателя);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораДокументаРасчета",
			ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	КонецЕсли;
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаБыстрыеТоварыТовар(Команда)
	
	ИмяКоманды = Команда.Имя;
	ИмяКоманды = СтрЗаменить(ИмяКоманды, "ПрограммноКомандаБыстрыеТовары", "");
	ЭтотОбъект.ТекущийЭлемент = Элементы.Товары;
	ДобавитьБыстрыйТовар(ИмяКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельСкидкиНажатие(Команда)
	
	ПодключитьОбработчикОжидания("Подключаемый_КомандаСкидки" + СтрЗаменить(Команда.Имя, "Команда", ""), 0.1, Истина);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЧО10БезналичныеПлатежиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьЧО10БезналичныеПлатежи();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЧО11ПлатежныеСистемыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьЧО11ПлатежнаяСистема();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЧО10БезналичныеПлатежи(Команда)
	
	ВыполнитьЧО10БезналичныеПлатежи();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЧО11ПлатежнаяСистема(Команда)
	
	ВыполнитьЧО11ПлатежнаяСистема()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЧО11ПлатежнаяСистема()
	
	//ИнтеграцияИСМПТК
	//Проверяем наличие марок по количеству товаров. Если указано больше КМ - пробивать чек нельзя.
	Если УчетМаркировкаИСМПТК 
		И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
		ОбнаруженыОшибки = Ложь;
		ВыполнитьПроверкуТоваровПередОплатойМаркировка(ОбнаруженыОшибки);
		Если ОбнаруженыОшибки Тогда
			Возврат;
		КонецЕсли;		
	КонецЕсли;
	//Конец ИнтеграцияИСМПТК
	
	ОплатитьТовары("ФормаСложнойОплаты", Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЧО10БезналичныеПлатежи()
	
	//ИнтеграцияИСМПТК
	//Проверяем наличие марок по количеству товаров. Если указано больше КМ - пробивать чек нельзя.
	Если УчетМаркировкаИСМПТК 
		И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
		ОбнаруженыОшибки = Ложь;
		ВыполнитьПроверкуТоваровПередОплатойМаркировка(ОбнаруженыОшибки);
		Если ОбнаруженыОшибки Тогда
			Возврат;
		КонецЕсли;		
	КонецЕсли;
	//Конец ИнтеграцияИСМПТК
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(НСтр("ru = 'БанковскийПлатеж'"), НСтр("ru = 'Банковский платеж'"));
	Если НЕ Объект.ОперацияСДенежнымиСредствами Тогда
		Для Каждого ПлатежнаяСистема Из ПодключенныеНастройкиЯндексКассы Цикл
			Если ПроверитьНаличиеТоваровОрганизацииЯндексКассы(ПлатежнаяСистема.Значение) Тогда
				СписокВыбора.Добавить(ПлатежнаяСистема.Значение, ПлатежнаяСистема.Представление);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СписокВыбора.Количество() = 1 Тогда 
		
		Если Объект.Товары.Количество() > 0 Тогда
			ЗаголовокИнформации = НСтр("ru = 'Выбор банковской выписки'"); 
			ТекстИнформации = НСтр("ru = 'Перед выбором документа необходимо пробить, аннулировать или отложить текущий чек.'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
			Возврат;
		КонецЕсли;
		
		ОткрываваемаяФорма = "Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораДокументаРасчета";
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьВыборБанковскойВыписки", ЭтотОбъект);
		ПараметрыФормы     = ПараметрыОтрытияФормыВыбораБанковскойВыписки();
		
	Иначе
		
		ОткрываваемаяФорма = "Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораВидаБезналичногоПлатежа";
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборБезналичногоПлатежа", ЭтотОбъект);
		ПараметрыФормы     = Новый Структура("СписокВыбора", СписокВыбора);
		
	КонецЕсли;
	
	ОткрытьФорму(ОткрываваемаяФорма,
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО34ВыборКассыККМ(Команда)
	
	ВыполнитьПО34ВыборКассыККМ();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО34ВыборКассыККМНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО34ВыборКассыККМ();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО34ВыборКассыККМ()
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ОплатитьТоварыПослеВыбораККМПродолжение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КассыККМ", МассивКассККМКлиент);
	ПараметрыФормы.Вставить("Организации", МассивОрганизацийКлиент);
	ПараметрыФормы.Вставить("ТекущаяКассаККМ", ТекущаяКассаККМ);
	
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораКассыККМ",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		ОбработкаОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО35ЗаявлениеНаВозврат(Команда)
	
	ВыполнитьПО35ЗаявлениеНаВозврат();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО35ЗаявлениеНаВозвратНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО35ЗаявлениеНаВозврат();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО35ЗаявлениеНаВозврат()
	
	МассивСсылокЧеков = Новый Массив;
	
	НапечататьЧекиККМ(МассивСсылокЧеков, Истина)
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЧО12ЭСНСПК(Команда)
	
	ВыполнитьЧО12ЭСНСПК();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЧО12ЭСНСПКНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьЧО12ЭСНСПК();
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Маркировка

&НаКлиенте
Процедура ОчиститьМарки(Объект, СтрокаТабличнойЧасти)
	
	РозничныеПродажиКлиент.ОчиститьМарки(Объект, СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьСтруктуруДействиямиНДС(СтруктураДействий, ВестиУчетМаркируемойПродукцииИСМП)
	
	ИнтеграцияИСРТКлиентСервер.ДополнитьСтруктуруДействиямиНДС(СтруктураДействий, ВестиУчетМаркируемойПродукцииИСМП);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьСтруктуруДействиямиГосИС(СтруктураДействий, ЭтоОперацияСДС, МаркировкаВключена, БезМаркировки = Ложь)
	
	ИнтеграцияИСРТКлиентСервер.ДополнитьСтруктуруДействиямиГосИС(СтруктураДействий, ЭтоОперацияСДС, МаркировкаВключена, БезМаркировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПереопределяемуюКоманду(ДополнительныеПараметры = Неопределено)
	
	Команда = Новый Структура("Имя", "");
	СобытияФормРТКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЭлементаГосИС()
	
	ДополнительныеПараметры = Новый Структура;
	СобытияФормИСКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "Товары", ДополнительныеПараметры);
	Если ДополнительныеПараметры.Свойство("ТребуетсяСерверныйВызов") Тогда
		Если КэшированныеЗначения = Неопределено Тогда 
			КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
		КонецЕсли;
		КэшированныеЗначения.Вставить("СобытияФорм");
		ТоварыПриОкончанииРедактированияНаСервере(КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПризнакиМаркировки()
	
	//Отключенный функционал
	Если Ложь И МаркировкаВключена Тогда 
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьДанныеМаркировки(ЭтотОбъект);
		Настройки = ПроверкаИПодборПродукцииИСМПРТ.НастройкиИсточникаКешаЧека();
		ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(ЭтотОбъект, Настройки);
		ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(ЭтотОбъект, Настройки);
		ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ТребуетсяУточнениеПоКодуGTIN(ДанныеЧастичногоВыбытия)
	
	//Отключенный функционал
	Возврат Ложь И ИнтеграцияИСРТ.ТребуетсяУточнениеПоКодуGTIN(ДанныеЧастичногоВыбытия,
		ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(ЭтотОбъект));
	
КонецФункции

#КонецОбласти

#Область Товары

&НаКлиенте
Процедура ДобавитьНоменклатуруВТабЧасть(Знач Номенклатура, Знач Характеристика, Знач Упаковка, Знач Количество,
		Знач ПерейтиНаКоличество = Ложь, Знач СерийныйНомер = Неопределено, ОткрыватьРедактированиеСтроки = Ложь)
	
	// Уточняем значение характеристики товара.
	Если Характеристика = Неопределено Тогда
		Характеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	КонецЕсли;
	
	// Проверить необходимость объединять товары.
	Если НЕ ЗначениеЗаполнено(Упаковка) Тогда
		Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка");
	КонецЕсли;
	
	СтруктураДобавления = Новый Структура("Номенклатура, Характеристика, Упаковка, Количество", 
											Номенклатура, Характеристика, Упаковка, Количество);
	
	РезультатДобавления = ДобавитьНоменклатуруВТабЧастьНаСервере(СтруктураДобавления);
	
	Если РезультатДобавления.НельзяПродавать Тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Запрет продаж.'"), РезультатДобавления.ТекстЗапретаПродаж);
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(РезультатДобавления.ИдентификаторСтроки);
	
	Если ТекущаяСтрока = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось определить строку для добавления'"));
		Возврат;
	КонецЕсли;
			
	ПараметрДействия = Новый Структура;
	ПараметрДействия.Вставить("ОткрытаБлокирующаяФорма", Ложь);
	ПараметрДействия.Вставить("ДобавитьСерийныйНомерИОткрытьВводСерии", СерийныйНомер);
	ПараметрДействия.Вставить("ОбновлениеДисплеяПокупателяДобавлениеТовара");
	ПараметрДействия.Вставить("ТоварыПриИзмененииНаСервере");
	ПараметрДействия.Вставить("ЗапретПродажиПроверен", Истина);
	ПараметрДействия.Вставить("ЗаполнитьПредставлениеТабло", НаборПравИНастроек.ЗапросТабло);
	
	Если РезультатДобавления.ДобавленаСтрока Тогда
			
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
			Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий, Ложь);

		ТоварыПриИзмененииНоменклатуры(ТекущаяСтрока, ПерейтиНаКоличество, ПараметрДействия, ОткрыватьРедактированиеСтроки);
	Иначе
		ТоварыПриИзмененииКоличестваУпаковок(ТекущаяСтрока, ПоследнееРедактированиеКоличество);
	КонецЕсли;
	
	//ИнтеграцияИСМПТК_РозничноеВыбытие
	Если УчетМаркировкаИСМПТК 
		И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
		
		БылоСообщениеОбОшибках = Ложь;
		ВидПродукцииШК = ПолучитьВидПродукцииПоНоменклатуре(ТекущаяСтрока.Номенклатура);
		УчетТГВключен  = РозничноеВыбытиеИСМПТКВызовСервера.ПроверитьВключениеУчетаТГ(ВидПродукцииШК);
		
		Если ЗначениеЗаполнено(ВидПродукцииШК) Тогда //Номенклатура с ОУ по маркировке
			Если Не УчетТГВключен Тогда 
				ТекстОшибки = НСтр("ru = 'Внимание! Номенклатура %1 имеет особенность учета ""%2""! На текущий момент учет этой товарной группы в базе не включен.'")
				+ НСтр("ru = 'Необходимо изменить вид номенклатуры на ""Товар без особенностей учета"" или включить учет маркировки этой товарной группы!'");
				ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, ТекущаяСтрока.Номенклатура, ВидПродукцииШК);
				ОбщегоНазначенияИСМПТКВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Розничная продажа маркируемого товара'"), "Предупреждение",,, ТекстОшибки);
				Если Не БылоСообщениеОбОшибках Тогда
					ТекстСообщения = НСтр("ru = 'Внимание! Обнаружены проблемы в настройках учета маркируемой продукции! Требуется сообщить Администратору. Подробности в Журнале регистрации.'"); 
					ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					БылоСообщениеОбОшибках = Истина;
				КонецЕсли;					
			Иначе
				ТекстСообщения = НСтр("ru = 'Внимание: среди выбранных товаров есть маркируемые (%1%2). У таких товаров необходимо сразу сканировать коды маркировки в форме документа!'");
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущаяСтрока.Номенклатура, ?(ЗначениеЗаполнено(ТекущаяСтрока.Характеристика), " (" + ТекущаяСтрока.Характеристика + ")", ""));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
	
	Если НЕ ПараметрДействия.ОткрытаБлокирующаяФорма Тогда
		ДобавитьСерийныйНомерИОткрытьВводСерии(ТекущаяСтрока, СерийныйНомер, ОткрыватьРедактированиеСтроки);
		ОбновлениеДисплеяПокупателяДобавлениеТовара(ТекущаяСтрока);
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
		ОбновитьФормуНаКлиенте();
	Иначе
		ОткрыватьРедактированиеСтроки = Ложь;
	КонецЕсли;
	
	Если ОткрыватьРедактированиеСтроки Тогда
		ПодключитьОбработчикОжидания("РедактированиеСтрокиКлиент", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьНоменклатуруВТабЧастьНаСервере(СтруктураДобавления)
	
	Номенклатура = СтруктураДобавления.Номенклатура;
	Характеристика = СтруктураДобавления.Характеристика;
	Упаковка = СтруктураДобавления.Упаковка;
	Количество = СтруктураДобавления.Количество;
	
	Результат = Новый Структура;
	
	ТекстЗапретаПродаж = "";
	Если НельзяПродавать(Номенклатура, ТекстЗапретаПродаж) Тогда
		Результат.Вставить("НельзяПродавать", Истина);
		Результат.Вставить("ТекстЗапретаПродаж", ТекстЗапретаПродаж);
		Возврат Результат;
	Иначе
		Результат.Вставить("НельзяПродавать", Ложь);
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, Упаковка",
										Номенклатура, Характеристика, Упаковка);
	МассивТоваров = Объект.Товары.НайтиСтроки(СтруктураОтбора);
	
	ДобавленаСтрока = Ложь;
	Если ИзменитьТекущуюСтроку(Номенклатура, МассивТоваров.Количество()) Тогда 
		
		ПоследнееРедактированиеКоличество = МассивТоваров[0].КоличествоУпаковок;
		МассивТоваров[0].КоличествоУпаковок = МассивТоваров[0].КоличествоУпаковок + Количество;
		ТекущаяСтрока = МассивТоваров[0];
		
	Иначе
		Если Объект.Товары.Количество() = 0 Тогда
			Объект.Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		ТекущаяСтрока = Объект.Товары.Добавить();
		ТекущаяСтрока.Номенклатура = Номенклатура;
		ТекущаяСтрока.Характеристика = Характеристика;
		ТекущаяСтрока.Упаковка = Упаковка;
		ТекущаяСтрока.КоличествоУпаковок = Количество;
		
		ДобавленаСтрока = Истина;
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
	КонецЕсли;
	
	ИдентификаторСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	Элементы.Товары.ТекущаяСтрока = ИдентификаторСтроки;
	
	Результат.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	Результат.Вставить("ДобавленаСтрока", ДобавленаСтрока);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыИзмененияНоменклатурыНаСервере(Номенклатура)
	
	Результат = Новый Структура;
	
	УчетХарактеристик = ПодборТоваровВызовСервера.ФлагУчетаХарактеристик(Номенклатура);
	Результат.Вставить("УчетХарактеристик", УчетХарактеристик);
	
	БезМаркировки = ВозможностьОперацийБезМарок(Номенклатура);
	Результат.Вставить("БезМаркировки", БезМаркировки);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьДействияТоварыПриИзмененииНоменклатуры(ПараметрДействия)
	
	Если ПараметрДействия.ПрекратитьДействия Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрДействия.Свойство("ЗавершитьДействияТоварыПриИзмененииНоменклатуры") Тогда
		ПараметрДействия.Удалить("ЗавершитьДействияТоварыПриИзмененииНоменклатуры");
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ПараметрДействия.ИдентификаторСтроки);
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		ПараметрДействия.ПрекратитьДействия = Истина;
		Возврат;
	КонецЕсли;
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элементы.Товары,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = СтрокаТабличнойЧасти.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
			Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
	КонецЕсли;
	
	ОбновитьФормуНаКлиенте();
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорКонтрагента) Тогда
		ПараметрДействия.Вставить("ОткрыватьРедактированиеСтроки", Ложь);
	КонецЕсли;
	
	Если ПараметрДействия.Свойство("УчетХарактеристик") И ПараметрДействия.УчетХарактеристик
		И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Характеристика) Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьТекущийЭлемент_ТоварыХарактеристика", 0.1, Истина);
	Иначе
		Если НЕ СтрокаТабличнойЧасти.НеобходимостьВводаАкцизнойМарки Тогда
			ПодключитьОбработчикОжидания("Подключаемый_УстановитьТекущийЭлемент_ТоварыКоличествоУпаковок", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьОстаткиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьДействияТоварыПриИзмененииХарактеристикиНоменклатуры(ПараметрДействия)

	Если ПараметрДействия.ПрекратитьДействия Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ПараметрДействия.ИдентификаторСтроки);
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		ПараметрДействия.ПрекратитьДействия = Истина;
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Цена = 0 Тогда
		ОбработкаТабличнойЧастиТоварыКлиентСервер.УдалитьСтрокиАгентскогоВознаграждения(Объект.Товары, СтрокаТабличнойЧасти);
		ОчиститьСерийныеНомера(Объект, СтрокаТабличнойЧасти);
		Объект.Товары.Удалить(СтрокаТабличнойЧасти);
		ОчиститьМарки(Объект, СтрокаТабличнойЧасти);
		СтрокаТабличнойЧасти = Неопределено;
		ОбновитьФормуНаКлиенте();
		ПараметрДействия.ПрекратитьДействия = Истина;
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	Если СтрокаТабличнойЧасти.КоличествоУпаковок = 0 Тогда
		СтрокаТабличнойЧасти.КоличествоУпаковок = 1;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Продавец = Объект.Продавец;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	Иначе
		СтруктураДействий.Вставить("ПересчитатьСуммуВозвратСУчетомОснования",
			Новый Структура("Основание", Объект.ЧекККМПродажа));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
		ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары,
		СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
		
	ОбработкаТабличнойЧастиТоварыКлиент.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект, СтруктураДействий, СтрокаТабличнойЧасти, КэшированныеЗначения);
		
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элементы.Товары,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = СтрокаТабличнойЧасти.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
			Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ОбновитьФормуНаКлиенте();
	ОбновлениеДисплеяПокупателя("ИзмененияЦены");
	
	Если НЕ СтрокаТабличнойЧасти.НеобходимостьВводаАкцизнойМарки Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьТекущийЭлемент_ТоварыКоличествоУпаковок", 0.1, Истина);
	КонецЕсли;
	
	ЗаполнитьОстаткиСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткиСервер()
	
	РозничныеПродажиСервер.ЗаполнитьОстаткиСервер(Элементы.ТоварыОстаток.Видимость, Объект);
	
	Если ЗначениеЗаполнено(СкладПродажиПоУмолчанию) Тогда
		Объект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладПродажиПоУмолчанию, "Организация");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеТаблоСервер()
	
	РозничныеПродажиСервер.ЗаполнитьПредставлениеТаблоСервер(НаборПравИНастроек.ЗапросТабло, Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСправочника(ИмяСправочника, ПараметрыФормыВыбора = Неопределено, ОбработчикОповещения = Неопределено)

	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Истина, "Справочник." + ИмяСправочника + ".Форма.ФормаВыбора.Открытие");
	
	Если НЕ ТипЗнч(ПараметрыФормыВыбора) = Тип("Структура") Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	НоменклатураОтбор = ?(Элементы.Товары.ТекущиеДанные <> Неопределено, Элементы.Товары.ТекущиеДанные.Номенклатура, ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	
	ПараметрыФормы.Вставить("СтрокаОтображение", "Список");
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормы.Вставить("Номенклатура"   	  , НоменклатураОтбор); // Для позиционирования в списке при открытии формы выбора
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Справочник." + ИмяСправочника + ".ФормаВыбора",
		ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходНаФормуПоиска(ВидПоиска = "")
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ПереходНаФормуПоиска");
	
	Если Объект.Товары.Количество() = 0 Тогда
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Магазин", Объект.Магазин);
	ПараметрыОткрытия.Вставить("ЗакрыватьПодборПриВыбореТовара", НаборПравИНастроек.ЗакрыватьПодборПриВыбореТовара);
	
	Если НЕ ВидПоиска = "" Тогда
		ПараметрыОткрытия.Вставить("ВидПоиска", ВидПоиска);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаПодборТовара", ПараметрыОткрытия, ЭтотОбъект);
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьТекущийЭлемент_ТоварыКоличествоУпаковок()
	
	ТекущийЭлемент = Элементы.Товары;
	ТекущийЭлемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок;
	Если Не ТекущийЭлемент.ТекущиеДанные = Неопределено Тогда
		ТекущийЭлемент.ИзменитьСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьТекущийЭлемент_ТоварыХарактеристика()
	
	ТекущийЭлемент = Элементы.Товары;
	Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыХарактеристика;
	Элементы.Товары.ИзменитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИзменитьСтроку()
	
	ЭлементТовары = Элементы.Товары;
	Если Не ЭлементТовары.ТекущиеДанные = Неопределено Тогда
		ЭлементТовары.ИзменитьСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоНоменклатуре(Команда)
	
	ИмяКоманды = Команда.Имя;
	УстанавливаемыйВидПоиска = СтрЗаменить(ИмяКоманды,"Поиск", "");
	УстанавливаемыйВидПоиска = СтрЗаменить(УстанавливаемыйВидПоиска,"_ПраваяКлавиатура", "");
	ВидПоиска = УстанавливаемыйВидПоиска;
	ПереходНаФормуПоиска(ВидПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьДействияТоварыПриИзмененииНоменклатуры(ПараметрДействия)
	
	Если ПараметрДействия.ПрекратитьДействия Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрДействия.Свойство("ПродолжитьДействияТоварыПриИзмененииНоменклатуры") Тогда
		ПараметрДействия.Удалить("ПродолжитьДействияТоварыПриИзмененииНоменклатуры");
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ПараметрДействия.ИдентификаторСтроки);
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		ПараметрДействия.ПрекратитьДействия = Истина;
		ПараметрДействия.Вставить("ОткрыватьРедактированиеСтроки", Ложь);
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Цена = 0 Тогда
		ОбработкаТабличнойЧастиТоварыКлиентСервер.УдалитьСтрокиАгентскогоВознаграждения(Объект.Товары, СтрокаТабличнойЧасти);
		ОчиститьСерийныеНомера(Объект, СтрокаТабличнойЧасти);
		//ИнтеграцияИСМПТК_РозничноеВыбытие
		Если УчетМаркировкаИСМПТК 
			И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
			СвязанныеКМ = Объект.КодыМаркировкиИСМПТК.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи));
			Если Не СвязанныеКМ.Количество() = 0 Тогда
				Для Каждого Строка Из СвязанныеКМ Цикл
					Объект.КодыМаркировкиИСМПТК.Удалить(Строка);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
		Объект.Товары.Удалить(СтрокаТабличнойЧасти);
		ОчиститьМарки(Объект, СтрокаТабличнойЧасти);
		СтрокаТабличнойЧасти = Неопределено;
		ОбновитьФормуНаКлиенте();
		ПараметрДействия.ПрекратитьДействия = Истина;
		ПараметрДействия.Вставить("ОткрыватьРедактированиеСтроки", Ложь);
		Возврат;
	КонецЕсли;
	
	Если ПараметрДействия.Свойство("ПересчиталиЦену") И ПараметрДействия.ПересчиталиЦену Тогда
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
			ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары,
			СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
			
		ОбработкаТабличнойЧастиТоварыКлиент.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект, СтруктураДействий, СтрокаТабличнойЧасти, КэшированныеЗначения);
			
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		ЛогированиеВводаЦены(СтрокаТабличнойЧасти.Цена);
	ИначеЕсли ПараметрДействия.Свойство("ПересчиталиСумму") И ПараметрДействия.ПересчиталиСумму Тогда
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах",
			ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаЦеныСкидкиВПродажахВТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
			ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары,
			СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
			
		ОбработкаТабличнойЧастиТоварыКлиент.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект, СтруктураДействий, СтрокаТабличнойЧасти, КэшированныеЗначения);
			
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалениемКлиент(Отказ)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
		Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
	
	Если НЕ НаборПравИНастроек.РазрешитьСторнированиеТовара Тогда
		Отказ = Истина;
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено ИЛИ ЗначениеЗаполнено(СтрокаТабличнойЧасти.КлючСвязиУслугаАгента) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УдаляемыйКлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;
	
	//ИнтеграцияИСМПТК_РозничноеВыбытие
	ОбработатьТаблицуМаркиПриУдаленииТовараИСМПТК(УдаляемыйКлючСвязи);
	//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
	
	Если НЕ Отказ Тогда
		ЛогированиеУдаленияСтроки(СтрокаТабличнойЧасти.Номенклатура,
			СтрокаТабличнойЧасти.Характеристика, СтрокаТабличнойЧасти.Сумма);
		ОбновлениеДисплеяПокупателя("УдалениеТовара");
		ПодключитьОбработчикОжидания("Подключаемый_ДисплеяПокупателяПриПростое", 5, Истина);
	КонецЕсли;
	
	ДополнительныеРеквизиты = Новый Структура("ПередУдалением");
	СобытияФормИСКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "Товары", ДополнительныеРеквизиты);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.УдалитьСтрокиАгентскогоВознаграждения(Объект.Товары, СтрокаТабличнойЧасти);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		Если СтрокаТабличнойЧасти.ВозможнаОплатаЭС Тогда
			ВозможенВозвратЭС = Ложь;
			СтрокиДляОплатыЭС = Объект.Товары.НайтиСтроки(Новый Структура("ВозможнаОплатаЭС", Истина));
			Для Каждого СтрокаДляОплатыЭС ИЗ СтрокиДляОплатыЭС Цикл
				Если НЕ СтрокаТабличнойЧасти = СтрокаДляОплатыЭС Тогда
					ВозможенВозвратЭС = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ВозможенВозвратЭС Тогда
				УстановитьДоступностьОтдельныхЭлементовФормы("КартинкаЧО07СложнаяОплата", Истина);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзмененииНоменклатуры(СтрокаТабличнойЧасти, ПерейтиНаКоличество = Ложь, ПараметрДействия = Неопределено, ОткрыватьРедактированиеСтроки = Ложь)
	
	ОчиститьМарки(Объект, СтрокаТабличнойЧасти);
	
	ТекстЗапретаПродаж = "";
	Если ПараметрДействия = Неопределено ИЛИ НЕ ПараметрДействия.Свойство("ЗапретПродажиПроверен") Тогда
		Если НельзяПродавать(СтрокаТабличнойЧасти.Номенклатура, ТекстЗапретаПродаж) Тогда
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Запрет продаж.'"), ТекстЗапретаПродаж);
			СтрокаТабличнойЧасти.Номенклатура = ПоследняяРедактируемаяНоменклатура;
			ОткрыватьРедактированиеСтроки = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			ОткрыватьРедактированиеСтроки = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ДополнитьСтруктуруДействиямиПриИзмененииЭлемента(Объект, СтруктураДействий, "Номенклатура");
	
	СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу");
	СтруктураДействий.Вставить("ЗаполнитьПредставлениеТабло", НаборПравИНастроек.ЗапросТабло);
	СтруктураДействий.Вставить("ОткрыватьРедактированиеСтроки", ОткрыватьРедактированиеСтроки);
	
	Если СтрокаТабличнойЧасти.КоличествоУпаковок = 0 Тогда
		СтрокаТабличнойЧасти.КоличествоУпаковок = 1;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЭтоРМК");
	
	ДанныеОРабочемМесте =
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияПоОбъекту(Объект);
	
	ОрганизацияПоУмолчанию = ОрганизацияПоУмолчанию(ТаблицаКассККМОрганизаций);
	
	Если НЕ ОрганизацияПоУмолчанию = Неопределено Тогда
		ДанныеОРабочемМесте.Вставить("ОрганизацияПоУмолчанию", ОрганизацияПоУмолчанию);
		ДанныеОРабочемМесте.Вставить("Организация", ОрганизацияПоУмолчанию);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ЗаполнитьВидНалога",
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияВидаНалога(Объект, ДанныеОРабочемМесте));
	СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", ДанныеОРабочемМесте);
	СтруктураДействий.Вставить("ЗаполнитьОрганизациюПродажи", ДанныеОРабочемМесте);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", ДанныеОРабочемМесте);
	
	ПараметрыИзменения = ПолучитьПараметрыИзмененияНоменклатурыНаСервере(СтрокаТабличнойЧасти.Номенклатура);
	
	ВыполнитьУстановкуЦены = ПерейтиНаКоличество ИЛИ (НЕ ПараметрыИзменения.УчетХарактеристик);
	
	Если ВыполнитьУстановкуЦены Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи",
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина, Ложь));
		СтруктураДействий.Вставить("ПересчитатьЦенуСУчетомАгентскогоВознаграждения", Новый Структура("Цена", СтрокаТабличнойЧасти.Цена));
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
		Иначе
			СтруктураДействий.Вставить("ПересчитатьСуммуВозвратСУчетомОснования",
				Новый Структура("Основание", Объект.ЧекККМПродажа));
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ДополнитьСтруктуруДействиямиНДС(СтруктураДействий, ВестиУчетМаркируемойПродукцииИСМП);
	
	ДополнитьСтруктуруДействиямиГосИС(
		СтруктураДействий,
		Объект.ОперацияСДенежнымиСредствами,
		МаркировкаВключена,
		ПараметрыИзменения.БезМаркировки);
	
	СуммаДоРасчета = СтрокаТабличнойЧасти.Сумма;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(
		Объект.Товары,
		СтрокаТабличнойЧасти,
		СтруктураДействий,
		КэшированныеЗначения);
		
	Если НЕ ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Организация) Тогда
		Объект.Организация = СтрокаТабличнойЧасти.Организация;
	КонецЕсли;
	
	ПриИзмененииЭлементаГосИС();
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект, СтруктураДействий, СтрокаТабличнойЧасти, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	СтрокаТабличнойЧасти.Продавец = Объект.Продавец;
	
	СуммаПослеРасчета = СтрокаТабличнойЧасти.Сумма;
	УменьшениеСуммыЧекаККМ = СуммаДоРасчета - СуммаПослеРасчета;
	УменьшениеСуммыЧекаККМ = ?(УменьшениеСуммыЧекаККМ > 0, УменьшениеСуммыЧекаККМ, 0);
	
	Если НаборПравИНастроек.ЛогироватьДействияКассира
		И НаборПравИНастроек.ЛогируемыеДействия.Свойство("ИзменениеНоменклатуры") Тогда
		
		ЛогированиеИзмененийСтроки("ИзменениеНоменклатуры",
			Неопределено,
			ПоследняяРедактируемаяНоменклатура,
			ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"),
			СтрокаТабличнойЧасти.Номенклатура,
			СтрокаТабличнойЧасти.Характеристика,
			УменьшениеСуммыЧекаККМ);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, СтрокаТабличнойЧасти, "КлючСвязи");
	СтрокаТабличнойЧасти.ШтрихКод = "";
	
	Если НЕ ТипЗнч(ПараметрДействия) = Тип("Структура") Тогда
		ПараметрДействия = Новый Структура;
		ПараметрДействия.Вставить("ОткрытаБлокирующаяФорма", Ложь);
	КонецЕсли;
	
	ПараметрДействия.Вставить("ИдентификаторСтроки", СтрокаТабличнойЧасти.ПолучитьИдентификатор());
	ПараметрДействия.Вставить("ПрекратитьДействия", Ложь);
	ПараметрДействия.Вставить("УчетХарактеристик", ПараметрыИзменения.УчетХарактеристик);
	
	ПараметрДействия.Вставить("ОткрыватьРедактированиеСтроки", СтруктураДействий.ОткрыватьРедактированиеСтроки);
	ПараметрДействия.Вставить("НеобходимостьВводаАкцизнойМарки", СтрокаТабличнойЧасти.НеобходимостьВводаАкцизнойМарки);
	
	Если ВыполнитьУстановкуЦены Тогда
		
		ПараметрДействия.Вставить("ПересчиталиЦену", Ложь);
		Если СтрокаТабличнойЧасти.Цена = 0 И СтрокаТабличнойЧасти.Номенклатура <> Неопределено Тогда
			
			Если СтрокаТабличнойЧасти.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга")
				И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорКонтрагента) Тогда
				
				ВводПараметровАгентскогоПлатежа(СтрокаТабличнойЧасти, Неопределено, ПараметрДействия);
				
			ИначеЕсли ИспользоватьНастройкуРМК И НаборПравИНастроек.НазначатьЦенуТоварамСНулевойЦеной
				И Не СтрокаТабличнойЧасти.ТипНоменклатуры =
					ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда
				
				ПараметрДействия.ОткрытаБлокирующаяФорма = Истина;
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
				
				ОбработчикОповещения = Новый ОписаниеОповещения(
					"ОповещениеОткрытьФормуВводаЧислаТоварыПриИзмененииНоменклатуры",
					ЭтотОбъект,
					ДополнительныеПараметры);
				ПолучитьИнтерактивноЧисло(НСтр("ru = 'Введите цену товара.'"), ОбработчикОповещения);
				
			ИначеЕсли СтрокаТабличнойЧасти.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат")
				И ЭтоСертификатСПроизвольнымНоминалом(СтрокаТабличнойЧасти.Номенклатура) Тогда
				
				ПараметрДействия.ОткрытаБлокирующаяФорма = Истина;
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
				
				ОбработчикОповещения = Новый ОписаниеОповещения(
					"ОповещениеОткрытьФормуВводаЧислаТоварыПриИзмененииНоменклатуры", ЭтотОбъект, ДополнительныеПараметры);
				ПолучитьИнтерактивноЧисло(НСтр("ru = 'Укажите номинал сертификата.'"), ОбработчикОповещения);
				
			Иначе
				
				ПараметрДействия.Вставить("ОткрыватьРедактированиеСтроки", Ложь);
				
				ТекстСообщения = НСтр("ru = 'На товар %1 %2 не назначена цена.'");
				ХарактеристикаПредставление = "";
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Характеристика) Тогда
					ХарактеристикаПредставление = "(" + СтрокаТабличнойЧасти.Характеристика + ")";
				КонецЕсли;
				
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(
					НСтр("ru = 'Цена не установлена.'"),
					СтрШаблон(ТекстСообщения, СтрокаТабличнойЧасти.Номенклатура, ХарактеристикаПредставление));
			КонецЕсли;
			
			Если НЕ ПараметрДействия.ОткрытаБлокирующаяФорма Тогда
				ПродолжитьДействияТоварыПриИзмененииНоменклатуры(ПараметрДействия);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПараметрДействия.ОткрытаБлокирующаяФорма
		И СтрокаТабличнойЧасти.НеобходимостьВводаАкцизнойМарки Тогда
		
		ДополнительныеПараметры = Новый Структура;
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
			ДополнительныеПараметры.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТабличнойЧасти, "ВидПродукцииИС")
			И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидПродукцииИС) Тогда
			ДополнительныеПараметры.Вставить("ВидПродукцииИС", СтрокаТабличнойЧасти.ВидПродукцииИС);
		КонецЕсли;
		
		Если ПараметрДействия.Свойство("ПрекратитьДействия") Тогда
			Если НЕ ПараметрДействия.ПрекратитьДействия Тогда
				
				Если СтрокаТабличнойЧасти <> Неопределено Тогда
					ПараметрДействия.ОткрытаБлокирующаяФорма = Истина;
					ВыполнитьПереопределяемуюКоманду(ДополнительныеПараметры);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ПараметрДействия.ОткрытаБлокирующаяФорма = Истина;
			
			Если СтрокаТабличнойЧасти <> Неопределено Тогда
				ПараметрДействия.ОткрытаБлокирующаяФорма = Истина;
				ПараметрДействия.Вставить("ЗавершитьДействияТоварыПриИзмененииНоменклатуры", Истина);
				ВыполнитьПереопределяемуюКоманду(ДополнительныеПараметры);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПараметрДействия.ОткрытаБлокирующаяФорма Тогда
		ЗавершитьДействияТоварыПриИзмененииНоменклатуры(ПараметрДействия);
	Иначе
		ЗаполнитьОстаткиСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзмененииХарактеристикиНоменклатуры(СтрокаТабличнойЧасти)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
		
		ОчиститьМарки(Объект, СтрокаТабличнойЧасти);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи",
			ОбработкаТабличнойЧастиТоварыКлиент.СтруктураЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина, Ложь));
		СтруктураДействий.Вставить("ПересчитатьЦенуСУчетомАгентскогоВознаграждения", Новый Структура("Цена", СтрокаТабличнойЧасти.Цена));
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(
			Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, СтрокаТабличнойЧасти, "КлючСвязи");
	КонецЕсли;
	
	ОткрытаБлокирующаяФорма = Ложь;
	ПараметрДействия = Новый Структура;
	ПараметрДействия.Вставить("ИдентификаторСтроки", СтрокаТабличнойЧасти.ПолучитьИдентификатор());
	ПараметрДействия.Вставить("ПрекратитьДействия" , Ложь);
	ПараметрДействия.Вставить("ПересчиталиЦену", Ложь);
	
	Если СтрокаТабличнойЧасти.Цена = 0
		И СтрокаТабличнойЧасти.Номенклатура <> Неопределено Тогда
		
		Если СтрокаТабличнойЧасти.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга")
			И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорКонтрагента) Тогда
			
			ОткрытаБлокирующаяФорма = Истина;
			ВводПараметровАгентскогоПлатежа(СтрокаТабличнойЧасти, Неопределено, ПараметрДействия);
		
		ИначеЕсли ИспользоватьНастройкуРМК И НаборПравИНастроек.НазначатьЦенуТоварамСНулевойЦеной 
			И (СтрокаТабличнойЧасти.ТипНоменклатуры <> ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат")) Тогда
			
			ОткрытаБлокирующаяФорма = Истина;
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
				
			ОбработчикОповещения = Новый ОписаниеОповещения(
				"ОповещениеОткрытьФормуВводаЧислаТоварыПриИзмененииХарактеристикиНоменклатуры",
				ЭтотОбъект,
				ДополнительныеПараметры);
			
			ПолучитьИнтерактивноЧисло(НСтр("ru = 'Введите цену товара.'"), ОбработчикОповещения);
		ИначеЕсли СтрокаТабличнойЧасти.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат")
			И ЭтоСертификатСПроизвольнымНоминалом(СтрокаТабличнойЧасти.Номенклатура) Тогда
			
			ОткрытаБлокирующаяФорма = Истина;
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
				
			ОбработчикОповещения = Новый ОписаниеОповещения(
				"ОповещениеОткрытьФормуВводаЧислаТоварыПриИзмененииХарактеристикиНоменклатуры",
				ЭтотОбъект,
				ДополнительныеПараметры);
			
			ПолучитьИнтерактивноЧисло(НСтр("ru = 'Укажите номинал сертификата.'"), ОбработчикОповещения);
		Иначе
			
			ТекстСообщения = НСтр("ru = 'На товар %1 %2 не назначена цена.'");
			ХарактеристикаПредставление = "";
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Характеристика) Тогда
				ХарактеристикаПредставление = "(" + СтрокаТабличнойЧасти.Характеристика + ")";
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения,
				СтрокаТабличнойЧасти.Номенклатура,
				ХарактеристикаПредставление);
			
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Цена не установлена.'"), ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьДействияТоварыПриИзмененииХарактеристикиНоменклатуры(ПараметрДействия);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КассыККМ

&НаСервере
Процедура ЗаполнитьИспользуемыеКассыККМ()
	
	ЕстьПередачаОФД = Ложь;
	
	ОрганизацииЕГАИС.Очистить();
	ОрганизацииИСМП.Очистить();
	ТаблицаКассККМОрганизаций.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	КассыККМ.Владелец КАК Организация,
	|	КассыККМ.ПодключаемоеОборудование.ТипОборудования КАК ТипОборудования,
	|	КассыККМ.ПодключаемоеОборудование КАК ИдентификаторУстройства,
	|	КассыККМ.НеПечататьБумажныйЧек КАК НеПечататьБумажныйЧек
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	НЕ КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ККМOffline)
	|	И НЕ КассыККМ.ПометкаУдаления
	|	И КассыККМ.РабочееМесто = &РабочееМесто
	|	И (КассыККМ.Магазин = &Магазин
	|			ИЛИ &Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КассыККМ.Ссылка,
	|	КассыККМ.Владелец,
	|	КассыККМ.ПодключаемоеОборудование.ТипОборудования,
	|	КассыККМ.ПодключаемоеОборудование,
	|	КассыККМ.НеПечататьБумажныйЧек КАК НеПечататьБумажныйЧек
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	НЕ КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ККМOffline)
	|	И НЕ КассыККМ.ПометкаУдаления
	|	И (КассыККМ.Магазин = &Магазин
	|			ИЛИ &Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
	|	И КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.СетевоеОборудование)");

	
	Запрос.УстановитьПараметр("РабочееМесто", Объект.РабочееМесто);
	Запрос.УстановитьПараметр("Магазин" , Объект.Магазин);
	
	КассыИОрганизации = Запрос.Выполнить().Выгрузить();
	
	ИспользуемыеОрганизации = Новый Массив();
	ИспользуетсяЭлектроннаяОтправкаЧека = КассыИОрганизации.Количество() > 0;
	НастройкиОбменаСУЗ = ИнтеграцияИСМПРТ.НастройкиОбменаСУЗ(Объект.РабочееМесто, Объект.Магазин);
	Для каждого СтрокаКасс Из КассыИОрганизации Цикл
		
		НоваяСтрока = ТаблицаКассККМОрганизаций.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКасс);
		
		Если ИспользуемыеОрганизации.Найти(НоваяСтрока.Организация) = Неопределено Тогда
			ИспользуемыеОрганизации.Добавить(НоваяСтрока.Организация);
		КонецЕсли;
		
		Если НЕ СтрокаКасс.НеПечататьБумажныйЧек Тогда
			ИспользуетсяЭлектроннаяОтправкаЧека = Ложь;
		КонецЕсли;
		
		Если СтрокаКасс.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
			
			ПараметрыККТ =
				МенеджерОборудованияВызовСервера.ПолучитьПараметрыРегистрацииУстройства(СтрокаКасс.ИдентификаторУстройства);
			Если ПараметрыККТ.ЕстьДанные Тогда
				НоваяСтрока.ПередачаОФД = НЕ ПараметрыККТ.ПризнакАвтономногоРежима;
			КонецЕсли;
			Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетТоваровФСС") Тогда
				НоваяСтрока.ВозможнаОплатаЭС = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаКасс.ИдентификаторУстройства)
			И Ложь Тогда
			НоваяСтрока.ПоддерживаетПроверкуКодовМаркировки = Истина;
		КонецЕсли;
		
		НайденнаяОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(
			НоваяСтрока.Организация, Объект.Магазин);
		Если ЗначениеЗаполнено(НайденнаяОрганизацияЕГАИС) Тогда
			ОрганизацияЕГАИС = НайденнаяОрганизацияЕГАИС;
			Если ОрганизацииЕГАИС.НайтиПоЗначению(ОрганизацияЕГАИС) = Неопределено Тогда
				ОрганизацииЕГАИС.Добавить(ОрганизацияЕГАИС);
			КонецЕсли;
			НоваяСтрока.ЕГАИС = Истина;
		КонецЕсли;
		
		Если НЕ НастройкиОбменаСУЗ.Найти(НоваяСтрока.Организация, "Организация") = Неопределено Тогда
			ОрганизацияИСМП = НоваяСтрока.Организация;
			Если ОрганизацииИСМП.НайтиПоЗначению(ОрганизацияИСМП) = Неопределено Тогда
				ОрганизацииИСМП.Добавить(ОрганизацияИСМП);
			КонецЕсли;
			НоваяСтрока.ИСМП = Истина;
		КонецЕсли;
	КонецЦикла;
	
	КассыСПередачейВОФД = ТаблицаКассККМОрганизаций.НайтиСтроки(Новый Структура("ПередачаОФД", Истина));
	
	ЕстьПередачаОФД = КассыСПередачейВОФД.Количество()>0;
	
	Если ТаблицаКассККМОрганизаций.Количество() = 1 Тогда
		ТаблицаКассККМОрганизаций[0].ПоУмолчанию = Истина;
		Объект.Организация = ТаблицаКассККМОрганизаций[0].Организация;
		ТекущаяКассаККМ = ТаблицаКассККМОрганизаций[0].КассаККМ;
	Иначе
		ЗаполнитьКассыККМПоУмолчанию(ИспользуемыеОрганизации);
	КонецЕсли;
	
	Если ИспользуемыеОрганизации.Количество() = 1 Тогда
		Объект.Организация = ИспользуемыеОрганизации[0];
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКассыККМПоУмолчанию(ИспользуемыеОрганизации)
	
	Для каждого Организация Из ИспользуемыеОрганизации Цикл
		КассыККМПоОрганизации = ТаблицаКассККМОрганизаций.НайтиСтроки(Новый Структура("Организация", Организация));
		Если КассыККМПоОрганизации.Количество() > 0 Тогда
			КассыККМПоОрганизации[0].ПоУмолчанию = Истина;
			Если НЕ ЗначениеЗаполнено(ТекущаяКассаККМ) Тогда
				ТекущаяКассаККМ = КассыККМПоОрганизации[0].КассаККМ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьКнопкиНижнейПанели(Отказ, ПараметрыИнформации)
	
	ПараметрыЗаполненияКнопок = РозничныеПродажиКлиентСервер.СтруктураЗаполненияНижнихКнопокРМК();
	ПараметрыЗаполненияКнопок.НастройкаРМК                = НастройкаРМК;
	ПараметрыЗаполненияКнопок.ИспользоватьНастройкуРМК    = ИспользоватьНастройкуРМК;
	ПараметрыЗаполненияКнопок.ПрограммноСозданныеЭлементы = ПрограммноСозданныеЭлементы;
	ПараметрыЗаполненияКнопок.КартинкиБыстрыхТоваров      = КартинкиБыстрыхТоваров;
	ПараметрыЗаполненияКнопок.УникальныйИдентификатор     = УникальныйИдентификатор;
	ПараметрыЗаполненияКнопок.ПрограммноСозданныеКоманды  = ПрограммноСозданныеКоманды;
	ПараметрыЗаполненияКнопок.ТаблицаБыстрыхТоваров       = ТаблицаБыстрыхТоваров;
	ПараметрыЗаполненияКнопок.ВидОперации                 = Объект.ВидОперации;
	
	ПараметрыДоступностиЭлементов = РозничныеПродажиКлиентСервер.СтруктураДоступностьЭлементовРМК();
	ПараметрыДоступностиЭлементов.НаборПравИНастроек               = НаборПравИНастроек;
	ПараметрыДоступностиЭлементов.ЦенаВключаетНДС                  = Объект.ЦенаВключаетНДС;
	ПараметрыДоступностиЭлементов.ТаблицаКассККМОрганизаций        = ТаблицаКассККМОрганизаций;
	ПараметрыДоступностиЭлементов.ПодключаемоеОборудованиеЕстьТСД  = ПодключаемоеОборудованиеЕстьТСД;
	ПараметрыДоступностиЭлементов.ПодключаемоеОборудованиеЕстьВесы = ПодключаемоеОборудованиеЕстьВесы;
	ПараметрыДоступностиЭлементов.Магазин                          = Объект.Магазин;
	ПараметрыЗаполненияКнопок.ВидОперации                          = Объект.ВидОперации;
	
	
	ПараметрыЗаполненияКнопок.Вставить("ПараметрыДоступностиЭлементов", ПараметрыДоступностиЭлементов);
	
	РозничныеПродажиСервер.ЗаполнитьКнопкиНижнейПанели(Отказ, ПараметрыИнформации, Элементы, ПараметрыЗаполненияКнопок, ЭтотОбъект);
	
	ПалитраБыстрыхТоваров = НастройкаРМК.ПалитраБыстрыхТоваров;
	
КонецПроцедуры

&НаСервере
Процедура ОткрытьЗакрытьМенюПрочихОпераций()
	
	Элементы.ГруппаПрочихОпераций.Видимость = НЕ Элементы.ГруппаПрочихОпераций.Видимость;
	
КонецПроцедуры

&НаСервере
Процедура ОткрытьЗакрытьМенюБыстрыхТоваров()
	
	Элементы.ГруппаБыстрыхТоваров.Видимость = НЕ Элементы.ГруппаБыстрыхТоваров.Видимость;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаборПравИНастроек()
	
	РозничныеПродажиСервер.ЗаполнитьНаборПравИНастроекРМК(НаборПравИНастроек, НастройкаРМК);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьОтдельныхЭлементовФормы(БазовоеИмяЭлемента, Доступность)
	
	РозничныеПродажиСервер.УстановитьДоступностьОтдельныхЭлементовФормы(БазовоеИмяЭлемента, Доступность, Элементы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовФормы()
	
	СтруктураДанных = РозничныеПродажиКлиентСервер.СтруктураДоступностьЭлементовРМК();
	СтруктураДанных.НаборПравИНастроек               = НаборПравИНастроек;
	СтруктураДанных.ЦенаВключаетНДС                  = Объект.ЦенаВключаетНДС;
	СтруктураДанных.ТаблицаКассККМОрганизаций        = ТаблицаКассККМОрганизаций;
	СтруктураДанных.ПодключаемоеОборудованиеЕстьТСД  = ПодключаемоеОборудованиеЕстьТСД;
	СтруктураДанных.ПодключаемоеОборудованиеЕстьВесы = ПодключаемоеОборудованиеЕстьВесы;
	СтруктураДанных.Магазин                          = Объект.Магазин;
	
	РозничныеПродажиСервер.УстановитьДоступностьЭлементовФормыРМК(Элементы, СтруктураДанных);
	
КонецПроцедуры

&НаСервере
Функция ВозможностьВнесенияДенег()
	
	Возврат РозничныеПродажиСервер.ВозможностьВнесенияДенег(ТаблицаКассККМОрганизаций);
	
КонецФункции

&НаСервере
Процедура ОчиститьТабличныеЧасти(ОбъектОчистки)
	
	РозничныеПродажиСервер.ОчиститьТабличныеЧастиРМК(ОбъектОчистки, УправляемыеСкидки);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНовыйНабор(ОчиститьДокументОбработки = Истина, ОчисткаАвтосохраненныхДанных = Истина)
	
	ТабличноеПолеЧеков.Очистить();
	ЕстьТоварыВДокументеРасчета = Ложь;
	Дата = ТекущаяДатаСеанса();
	Объект.Дата = Дата;
	
	Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;
	Объект.Продавец = ПродавецПоУмолчанию;
	
	Объект.Магазин = ТекущаяКассаККМ.Магазин;
	Объект.ЧекККМПродажа = Документы.ЧекККМ.ПустаяСсылка();
	Объект.ДисконтнаяКарта = Справочники.ИнформационныеКарты.ПустаяСсылка();
	Объект.ВладелецДисконтнойКарты = Справочники.ФизическиеЛица.ПустаяСсылка();
	Объект.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.РеализацияТоваров;
	Объект.ПродажаПоЗаказу = Ложь;
	Объект.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
	Объект.Ответственный = Пользователи.ТекущийПользователь();
	Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	Объект.ОперацияСДенежнымиСредствами = Ложь;
	Объект.ДокументРасчета = Неопределено;
	Объект.ФизЛицо      = "";
	Объект.ДатаРождения = Дата(1,1,1);
	Объект.ПоДокументу  = "";
	
	Объект.Телефон 		= "";
	Объект.АдресЭП 		= "";
	
	ЭтоЗачетАванса     = Ложь;
	ЭтоОплатаРассрочки = Ложь;
	ЭтоВозвратАванса   = Ложь;
	НомерЗаказа        = "";
	
	ОчиститьТабличныеЧасти(Объект);
	
	ПередаватьТаблицуОплат            = Ложь;
	ОтменитьОплатуПК                  = Ложь;
	ДанныеОтправленыВБанк             = Ложь;
	ДанныеОтправленыВПлатежнуюСистему = Ложь;
	
	Объект.Ссылка = Документы.ЧекККМ.ПустаяСсылка();
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ЧекККМ.ПараметрыУказанияСерий(Объект));
	
	Если ОчиститьДокументОбработки Тогда
		ЧекККМВОбработке = Неопределено;
	КонецЕсли;
	
	ИдентификаторФормыПредварительныхДанных = Новый УникальныйИдентификатор;
	НомерОперацииЛогирования = 0;
	
	Если ОчисткаАвтосохраненныхДанных Тогда
		ОчиститьАвтосохраненныеДанные();
	КонецЕсли;
	
	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(ЭтотОбъект);
	УстановитьДоступностьПриБезналичнойОплатеСервер(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЧекПоВсемДанным(ОбъектЧекККМ)
	
	РозничныеПродажиСервер.ЗаполнитьЧекПоВсемДанным(ОбъектЧекККМ, Объект, УправляемыеСкидки, Ложь, ТабличноеПолеЧеков);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИЗакрытьЧекПоСтатусу(СтатусЧекаККМ, ПараметрыЗаполненияЧекаККМ)

	ЧекПроведен = Ложь;
	Дата = ТекущаяДатаСеанса();
	
	Если ЗначениеЗаполнено(ЧекККМВОбработке) Тогда 
		
		Если ОбщегоНазначения.СсылкаСуществует(ЧекККМВОбработке) Тогда
			ОбъектЧекККМ = ЧекККМВОбработке.ПолучитьОбъект();
			ОбъектЧекККМ.Дата = Дата;
			ЧекПроведен = ЧекККМВОбработке.Проведен;
		Иначе
			ОбъектЧекККМ =Документы.ЧекККМ.СоздатьДокумент();
			ОбъектЧекККМ.Дата = Дата;
			ОбъектЧекККМ.УстановитьСсылкуНового(ЧекККМВОбработке);
		КонецЕсли;			
		
	Иначе
		ОбъектЧекККМ =Документы.ЧекККМ.СоздатьДокумент();
		ОбъектЧекККМ.Дата = Дата;
	КонецЕсли;
	
	ЗаполнитьТаблицуЧеков();
	ЗаполнитьЧекПоВсемДанным(ОбъектЧекККМ);
	ЗаполнитьЗначенияСвойств(ОбъектЧекККМ, ПараметрыЗаполненияЧекаККМ);
	
	ОбъектЧекККМ.КассаККМ = ТекущаяКассаККМ;
	ОбъектЧекККМ.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектЧекККМ.КассаККМ, "Владелец");
	ОбъектЧекККМ.СтатусЧекаККМ = СтатусЧекаККМ;
	ОбъектЧекККМ.РежимРМК = Истина;
	
	Если ЧекПроведен Тогда
		ОбъектЧекККМ.Записать(РежимЗаписиДокумента.ОтменаПроведения)
	Иначе
		ОбъектЧекККМ.Записать();
	КонецЕсли; 
	
	ЗаполнитьПредварительныйЛог(ОбъектЧекККМ.Ссылка);
	ЛогированиеЗаписиИЗакрытияЧекаПоСтатусу(СтатусЧекаККМ, ОбъектЧекККМ.Ссылка);
	
	СоздатьНовыйНабор(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьЧекПоСтатусуКлиент(СтатусЧекаККМ, ПараметрыЗаполненияЧекаККМ)
	
	ЗаписатьИЗакрытьЧекПоСтатусу(СтатусЧекаККМ, ПараметрыЗаполненияЧекаККМ);
	ОбновитьФормуНаКлиенте();
	УстановитьЗаголовок();
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаЧО09ОперацияДС", Истина);
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
		Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйНаборКлиент()
	
	СоздатьНовыйНабор();
	ОбновитьФормуНаКлиенте();
	УстановитьЗаголовок();
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаЧО09ОперацияДС", Истина);
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаПО35ЗаявлениеНаВозврат", ЭтоВозвратКлиент());
	УстановитьДоступностьОтдельныхЭлементовФормы("КартинкаПО35ЗаявлениеНаВозвратНажатие",  ЭтоВозвратКлиент());
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
		Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиПоЧекуККМ(ЧекЗаполнения, Отказ)
	
	СоздатьНовыйНабор(Ложь);
	
	РеквизитыЗаполнения = "Дата, Товары, УправляемыеСкидки, Подарки, СкидкиНаценки, СерийныеНомера,
		|Серии, Оплата, ПогашениеПодарочныхСертификатов, БонусныеБаллыКНачислению, Ответственный,
		|АкцизныеМарки, КодыМаркировки, СерииПодарков, ПредъявленныеКодыОднократныхСкидок";
	//ИнтеграцияИСМПТК_РозничноеВыбытие
	РеквизитыЗаполнения = РеквизитыЗаполнения + ", КодыМаркировкиИСМПТК";
	//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
	ЗаполнитьЗначенияСвойств(Объект, ЧекЗаполнения,, РеквизитыЗаполнения);
	
	Объект.Дата = ТекущаяДатаСеанса();
	
	Если ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
		Объект.ПродажаПоЗаказу = Истина;
		НомерЗаказа = Объект.ЗаказПокупателя.Номер;
	КонецЕсли;
	
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекЗаполнения.Товары, Объект.Товары);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекЗаполнения.УправляемыеСкидки, Объект.УправляемыеСкидки);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекЗаполнения.Подарки, Объект.Подарки);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекЗаполнения.СкидкиНаценки, Объект.СкидкиНаценки);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(
		ЧекЗаполнения.БонусныеБаллыКНачислению, Объект.БонусныеБаллыКНачислению);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекЗаполнения.СерийныеНомера, Объект.СерийныеНомера);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекЗаполнения.Серии, Объект.Серии);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекЗаполнения.СерииПодарков, Объект.СерииПодарков);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекЗаполнения.Оплата, Объект.Оплата);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(
		ЧекЗаполнения.ПогашениеПодарочныхСертификатов, Объект.ПогашениеПодарочныхСертификатов);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекЗаполнения.АкцизныеМарки, Объект.АкцизныеМарки, Истина);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекЗаполнения.ПредъявленныеКодыОднократныхСкидок,
		Объект.ПредъявленныеКодыОднократныхСкидок);
	
	УправляемыеСкидки.ЗагрузитьЗначения(Объект.УправляемыеСкидки.Выгрузить().ВыгрузитьКолонку("СкидкаНаценка"));
	ДозаполнитьТаблицыОбъекта();
	
	Если ИспользоватьБонусы И ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		РаспределитьОплатуБонусамиПоОрганизациямПриВосстановлении(ЧекЗаполнения);
	КонецЕсли;
	
	ПроверитьВозможностьВозвратаПлатежнойСистемой();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСуммуОстаткаДокументаРасчета()
	
	РозничныеПродажиСервер.ЗаполнитьСуммуОстаткаДокументаРасчета(СуммаОстаткаДокументаРасчета, 
		Объект.ДокументРасчета, 
		Объект.ЗаказПокупателя);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакОплатыПоДокументуРасчета()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА РасчетыСКлиентамиОстатки.ДокументРасчета ССЫЛКА Документ.ЧекККМ
	|			ТОГДА РасчетыСКлиентамиОстатки.ДокументРасчета.ОперацияСДенежнымиСредствами
	|		КОГДА РасчетыСКлиентамиОстатки.ДокументРасчета ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|			ТОГДА ИСТИНА
	|		КОГДА РасчетыСКлиентамиОстатки.ДокументРасчета ССЫЛКА Документ.ОплатаОтПокупателяПлатежнойКартой
	|				И РасчетыСКлиентамиОстатки.ДокументРасчета.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|			ТОГДА ИСТИНА
	|		КОГДА РасчетыСКлиентамиОстатки.ДокументРасчета ССЫЛКА Документ.РегистрацияБезналичнойОплаты
	|				И РасчетыСКлиентамиОстатки.ДокументРасчета.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЗачетАванса,
	|	ВЫБОР
	|		КОГДА РасчетыСКлиентамиОстатки.ДокументРасчета ССЫЛКА Документ.ЧекККМ
	|			ТОГДА НЕ РасчетыСКлиентамиОстатки.ДокументРасчета.ОперацияСДенежнымиСредствами
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоОплатаРассрочки,
	|	ВЫБОР
	|		КОГДА РасчетыСКлиентамиОстатки.СуммаОстаток < 0
	|			ТОГДА -РасчетыСКлиентамиОстатки.СуммаОстаток
	|		ИНАЧЕ РасчетыСКлиентамиОстатки.СуммаОстаток
	|	КОНЕЦ КАК Сумма
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(
	|			,
	|			ДокументРасчета = &ДокументРасчета
	|				И ЗаказПокупателя = &ЗаказПокупателя) КАК РасчетыСКлиентамиОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВЗапросе.ЭтоЗачетАванса КАК ЭтоЗачетАванса,
	|	ТаблицаВЗапросе.ЭтоОплатаРассрочки КАК ЭтоОплатаРассрочки,
	|	ТаблицаВЗапросе.Сумма КАК СуммаОстаткаДокументаРасчета
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументРасчета", Объект.ДокументРасчета);
	Запрос.УстановитьПараметр("ЗаказПокупателя", Объект.ЗаказПокупателя);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаОснованииЧекаККМ(ЧекККМ)

	ЗаполнитьЗначенияСвойств(
		Объект,
		ЧекККМ,
		"ВладелецДисконтнойКарты, ДисконтнаяКарта, Магазин, Продавец, ЗаказПокупателя, ДоговорКонтрагента,
		|ОперацияСДенежнымиСредствами, Контрагент",
		"ЧекККМПродажа, Дата, Товары, УправляемыеСкидки, Подарки, СкидкиНаценки, СерийныеНомера, Серии, Оплата,
		|ПогашениеПодарочныхСертификатов, СерииПодарков, ПредъявленныеКодыОднократныхСкидок");
	
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекККМ.Товары, Объект.Товары);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекККМ.СерийныеНомера, Объект.СерийныеНомера);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекККМ.УправляемыеСкидки, Объект.УправляемыеСкидки);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекККМ.Подарки, Объект.Подарки);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекККМ.СкидкиНаценки, Объект.СкидкиНаценки);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекККМ.Серии, Объект.Серии);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекККМ.Оплата, Объект.Оплата);
	
	УправляемыеСкидки.ЗагрузитьЗначения(Объект.УправляемыеСкидки.Выгрузить().ВыгрузитьКолонку("СкидкаНаценка"));
	
	Если ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
		Объект.ПродажаПоЗаказу  = Истина;
		НомерЗаказа = Объект.ЗаказПокупателя.Номер;
	КонецЕсли;
	
	Объект.СерийныеНомера.Очистить();
	Объект.ПогашениеПодарочныхСертификатов.Очистить();
	
	ЗапасыСервер.УдалитьПодарочныеСертификаты(Объект.Товары);
	
	РаботаСПодарочнымиСертификатами.ДополнитьТоварыОстаткамиПодарочнхСертификатов(Объект, ЧекККМ);
	
	КолвоЭлементовКоллекции = Объект.Оплата.Количество();
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
		ЭлементКоллекции = Объект.Оплата[КолвоЭлементовКоллекции - ОбратныйИндекс];

		Если ЭлементКоллекции.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом Тогда
			Объект.Оплата.Удалить(ЭлементКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ПеренестиДоговорКотрагентаВТЧ(Объект);
	
	ВедетсяУчетМРЦ = ИнтеграцияИСМПКлиентСерверПовтИсп.УчитыватьМРЦ();
	
	Если ВедетсяУчетМРЦ Тогда
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьЦенуМРЦВТЧ(Объект.Товары);
	КонецЕсли;
	
	Объект.Организация = ЧекККМ.Организация;
	Для каждого СтрокаТовары Из Объект.Товары Цикл
		СтрокаТовары.Организация = Объект.Организация
	КонецЦикла;
	
	Для каждого СтрокаСерия Из Объект.Серии Цикл
		СтрокаСерия.Организация = Объект.Организация
	КонецЦикла;
	
	Объект.Организация = ЧекККМ.Организация;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		ОбработкаТабличнойЧастиТоварыКлиентСервер.УдалитьСтрокиАгентскогоВознаграждения(Объект.Товары);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат
		И Объект.ОперацияСДенежнымиСредствами Тогда
		
		Если ЗначениеЗаполнено(ЧекККМ.ДокументРасчета) Тогда
			Объект.ДокументРасчета = ЧекККМ.ДокументРасчета;
		Иначе
			Объект.ДокументРасчета = ЧекККМ;
		КонецЕсли;
		ЗаполнитьСуммуОстаткаДокументаРасчета();
	КонецЕсли;
	
	ПерезаполнитьПризнакиМаркировки();
	ЗаполнитьОстаткиСервер();
	
	ПроверитьВозможностьВозвратаПлатежнойСистемой();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличныеЧастиНаОснованииЗаказаПокупателя()
	
	РозничныеПродажиСервер.ЗаполнитьТабличныеЧастиНаОснованииЗаказаПокупателя(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаОснованииЗаказаПокупателя()

	ЗаполнитьЗначенияСвойств(
		Объект,
		Объект.ЗаказПокупателя,
		"ВладелецДисконтнойКарты, ДисконтнаяКарта, Магазин, Продавец");
	
	Объект.БонусныеБаллыКНачислению.Очистить();
	Объект.Подарки.Очистить();
	Объект.СерииПодарков.Очистить();
	Объект.УправляемыеСкидки.Очистить();
	Объект.ОперацияСДенежнымиСредствами = ОплатаБезПередачиПоДокументуРасчетаСЗаказом;
	Если Объект.ОперацияСДенежнымиСредствами Тогда
		ЗаполнитьТабличныеЧастиНаОснованииЗаказаПокупателя();
	Иначе
		РозничныеПродажиСервер.ЗаполнитьПоОстаткамЗаказа(Объект, Объект.ЗаказПокупателя);
	КонецЕсли;
	
	УправляемыеСкидки.ЗагрузитьЗначения(Объект.УправляемыеСкидки.Выгрузить().ВыгрузитьКолонку("СкидкаНаценка"));
	
	Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;
	НомерЗаказа = Объект.ЗаказПокупателя.Номер;
	Объект.ПродажаПоЗаказу = Истина;
	
	Объект.Оплата.Очистить();
	Объект.ОплатаБонуснымиБаллами.Очистить();
	Объект.Серии.Очистить();
	Объект.СерийныеНомера.Очистить();
	Объект.ПогашениеПодарочныхСертификатов.Очистить();
	
	ПерезаполнитьПризнакиМаркировки();
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	
	Объект.Организация = Объект.ЗаказПокупателя.Организация;
	Объект.Контрагент  = Объект.ЗаказПокупателя.Контрагент;
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		СтрокаТовары.Организация = Объект.Организация;
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ЗаполнитьОстаткиСервер();
	
	Если Объект.Товары.Количество() > 0  Тогда
		ДозаполнитьТаблицыОбъекта();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура глЗначениеПеременнойУстановитьСервер(Имя, Значение, ОбновлятьВоВсехКэшах = Ложь)
	
	глЗначениеПеременнойУстановить(Имя, Значение, ОбновлятьВоВсехКэшах = Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекстПроСкидку()
	
	РозничныеПродажиКлиент.ОбновитьТекстПроСкидку(Объект.ДисконтнаяКарта, Объект.ВладелецДисконтнойКарты, Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблоНоменклатуры()
	
	СтруктураДанных = РозничныеПродажиКлиентСервер.СтруктураДляОбновленияТаблоНоменклатурыРМК();
	СтруктураДанных.ВыведеныЧеки            = ВыведеныЧеки;
	СтруктураДанных.ОставлятьФлагТаблоСдачи = ОставлятьФлагТаблоСдачи;
	СтруктураДанных.ВыведенаСдача           = ВыведенаСдача;
	СтруктураДанных.ДисконтнаяКарта         = Объект.ДисконтнаяКарта;
	СтруктураДанных.ВладелецДисконтнойКарты = Объект.ВладелецДисконтнойКарты;
	СтруктураДанных.Телефон           		= Объект.Телефон;
	СтруктураДанных.АдресЭП         		= Объект.АдресЭП;
	СтруктураДанных.НеПечататьБумажныйЧек	= Ложь; // по-умолчанию не печатаем
	
	РозничныеПродажиКлиент.ОбновитьТаблоНоменклатуры(Объект,
		Элементы,
		СтруктураДанных,
		НадписьИнформацияОТоваре,
		НадписьТекущаяСумма,
		ДанныеSMSИлиEmail);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюПоСуммам()
	
	Если Объект.ОперацияСДенежнымиСредствами И Объект.Товары.Количество() = 0 
		И (НЕ ЗначениеЗаполнено(Объект.ДокументРасчета) 
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат")) Тогда
		СуммаВсего = СуммаОстаткаДокументаРасчета;
		СуммаДокументаБезСкидок = 0;
		СуммаСкидкиРасчет = 0;
		СуммаСкидки = 0;
	Иначе
		СуммаВсего = Объект.Товары.Итог("СуммаВсего");
		СуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки();
		СуммаСкидкиРасчет = СуммаДокументаБезСкидок - СуммаВсего;
		СуммаСкидки = ?(СуммаСкидкиРасчет > 0, СуммаСкидкиРасчет, - СуммаСкидкиРасчет);
	КонецЕсли;

	СуммаКОплате = СуммаВсего;
	
	Если СуммаСкидкиРасчет < 0 Тогда
		Элементы.СуммаСкидки.ЦветТекста = WebЦвета.Красный;
	ИначеЕсли СуммаСкидкиРасчет > 0 Тогда
		Элементы.СуммаСкидки.ЦветТекста = WebЦвета.Зеленый;
	Иначе
		Элементы.СуммаСкидки.ЦветТекста = Новый Цвет();
	КонецЕсли;
	
	ОбновитьТекстПроСкидку();
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСуммуДокументаБезСкидки()
	
	Возврат РозничныеПродажиКлиент.ПолучитьСуммуДокументаБезСкидки(Объект);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	РозничныеПродажиКлиентСервер.ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИнтерактивноЧисло(Заголовок, ОбработчикОповещения = Неопределено, ПараметрыВводаЧисла = Неопределено)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", Заголовок);
	
	Если НЕ ПараметрыВводаЧисла = Неопределено И ТипЗнч(ПараметрыВводаЧисла) = Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, ПараметрыВводаЧисла, Ложь);
	КонецЕсли;
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВводаЧисла", ПараметрыФормы,,,,, ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРедактированиеСтроки(ДанныеСтрокиТовары, ПервыйЭлемент = Неопределено)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Количество", ДанныеСтрокиТовары.КоличествоУпаковок);
	ПараметрыФормы.Вставить("Цена", ДанныеСтрокиТовары.Цена);
	ПараметрыФормы.Вставить("Продавец", ДанныеСтрокиТовары.Продавец);
	ПараметрыФормы.Вставить("ПервыйЭлемент", ПервыйЭлемент);
	
	МассивЗапрещенныхДействийПриРедактировании = Новый Массив;
	
	Если НЕ НаборПравИНастроек.ИзменятьЦену Тогда
		МассивЗапрещенныхДействийПриРедактировании.Добавить("Цена");
	КонецЕсли;
	Если НЕ НаборПравИНастроек.ИзменятьПродавца Тогда
		МассивЗапрещенныхДействийПриРедактировании.Добавить("Продавец");
	КонецЕсли;
	Если НЕ НаборПравИНастроек.РазрешитьСторнированиеТовара Тогда
		МассивЗапрещенныхДействийПриРедактировании.Добавить("Сторно");
	КонецЕсли;
	
	ВводСерийРазрешен = Истина;
	ТекущиеДанныеИдентификатор = ДанныеСтрокиТовары.ПолучитьИдентификатор();
	ПараметрыФормы.Вставить("ТекущиеДанныеИдентификатор" , ТекущиеДанныеИдентификатор);
	ОбработкаТабличнойЧастиТоварыКлиент.ПроверитьВозможностьУказанияСерий(
		ЭтотОбъект, ПараметрыУказанияСерий, ВводСерийРазрешен,,Истина);
	Если НЕ ВводСерийРазрешен Тогда
		МассивЗапрещенныхДействийПриРедактировании.Добавить("Серии");
		Если ДанныеСтрокиТовары.ИспользоватьСерийныеНомера Тогда
			МассивЗапрещенныхДействийПриРедактировании.Добавить("Цена");
			МассивЗапрещенныхДействийПриРедактировании.Добавить("Количество");
			
			ТекущийКлючСвязи = ДанныеСтрокиТовары.КлючСвязиСерийныхНомеров;
			
			ПараметрыФормыУказанияСертификатов = Новый Структура;
			ПараметрыФормыУказанияСертификатов.Вставить("МассивСерийныхНомеров",
				ОбработкаТабличнойЧастиТоварыКлиент.МассивСерийныхНомеровДляСтрокиТоваров(
					ТекущийКлючСвязи, Объект.СерийныеНомера));
			ПараметрыФормыУказанияСертификатов.Вставить("Номенклатура",
				ДанныеСтрокиТовары.Номенклатура);
			ПараметрыФормыУказанияСертификатов.Вставить("ПредставлениеНоменклатуры",
				Строка(ДанныеСтрокиТовары.Номенклатура));
			ПараметрыФормыУказанияСертификатов.Вставить("ТекущийКлючСвязи",
				ТекущийКлючСвязи);
			
			ПараметрыФормы.Вставить("ПараметрыФормыУказанияСертификатов", ПараметрыФормыУказанияСертификатов);
			ПараметрыФормы.Вставить("ТекущийКлючСвязи", ТекущийКлючСвязи);
		Иначе
			МассивЗапрещенныхДействийПриРедактировании.Добавить("Сертификаты");
		КонецЕсли;
	Иначе
		МассивЗапрещенныхДействийПриРедактировании.Добавить("Количество");
		МассивЗапрещенныхДействийПриРедактировании.Добавить("Сертификаты");
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		ПараметрыФормы.Вставить("ПараметрыФормыУказанияСерий", ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("МассивЗапрещенныхДействий", МассивЗапрещенныхДействийПриРедактировании);
	
	Если НаборПравИНастроек.ВыборУпаковкиПриПродаже Тогда 
		Если ЗначениеЗаполнено(ДанныеСтрокиТовары.Упаковка) Тогда 
			ПараметрыФормы.Вставить("Упаковка", ДанныеСтрокиТовары.Упаковка);
		КонецЕсли;
		
		НаборУпаковок =
			ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(ДанныеСтрокиТовары.Номенклатура, "НаборУпаковок");
		Если ЗначениеЗаполнено(НаборУпаковок) Тогда 
			ПараметрыФормы.Вставить("Номенклатура", ДанныеСтрокиТовары.Номенклатура);
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ТекущиеДанныеИдентификатор);
	
	ОбработчикОповещения = Новый ОписаниеОповещения(
		"ОповещениеОткрытьФормуРедактированияСтроки", ЭтотОбъект, ДополнительныеПараметры);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаРедактированияСтроки",
		ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеСтрокиКлиент()
	
	ДанныеСтрокиТовары = Элементы.Товары.ТекущиеДанные;
	
	Если ДанныеСтрокиТовары <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ДанныеСтрокиТовары.ДоговорКонтрагента)
			И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			
			ВводПараметровАгентскогоПлатежа(ДанныеСтрокиТовары);
			
		Иначе
			
			Если НЕ ДанныеСтрокиТовары.НомерСтроки = Объект.Товары.Количество()
				И НЕ НаборПравИНастроек.РазрешитьРедактироватьНабранныйЧек 
				И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
				Возврат;
			КонецЕсли;
			
			ОбработатьРедактированиеСтроки(ДанныеСтрокиТовары, "");
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовок()
	
	СтруктураДанных = РозничныеПродажиКлиентСервер.СтруктураДляУстановкиЗаголовкаРМК();
	СтруктураДанных.ВидОперации                  = Объект.ВидОперации;
	СтруктураДанных.ОперацияСДенежнымиСредствами = Объект.ОперацияСДенежнымиСредствами;
	СтруктураДанных.ПродажаПоЗаказу              = Объект.ПродажаПоЗаказу;
	СтруктураДанных.ДокументРасчета              = Объект.ДокументРасчета;
	СтруктураДанных.ЭтоЗачетАванса               = ЭтоЗачетАванса;
	СтруктураДанных.НомерЗаказа                  = НомерЗаказа;
	СтруктураДанных.ЭтоОплатаРассрочки           = ЭтоОплатаРассрочки;
	СтруктураДанных.Продавец                     = Объект.Продавец;
	СтруктураДанных.РеверсКнопкиПродавец         = РеверсКнопкиПродавец;
	СтруктураДанных.ИмяКнопкиПродавец            = ИмяКнопкиПродавец;
	СтруктураДанных.ЦветПродажи                  = ЦветПродажи;
	СтруктураДанных.СуммаОстаткаДокументаРасчета = СуммаОстаткаДокументаРасчета;
	
	РозничныеПродажиКлиент.УстановитьЗаголовокВРМК(СтруктураДанных, Элементы, НадписьЗаголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветРеверснойКнопки(ИмяЭлемента, ПоложительныйРеверс)
	
	РозничныеПродажиКлиент.ЦветРеверснойКнопки(ИмяЭлемента, ПоложительныйРеверс, Элементы, ЦветПродажи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветаКнопок()
	
	ЦветРеверснойКнопки("КартинкаПО27ПродажаПоЗаказу", ЗначениеЗаполнено(Объект.ЗаказПокупателя));
	ЦветРеверснойКнопки("ПрограммноКартинкаПО27ПродажаПоЗаказу", ЗначениеЗаполнено(Объект.ЗаказПокупателя));
	ЦветРеверснойКнопки("КартинкаПО31ПолучитьДокументРасчета", ЗначениеЗаполнено(Объект.ДокументРасчета));
	ЦветРеверснойКнопки("ПрограммноКартинкаПО31ПолучитьДокументРасчета", ЗначениеЗаполнено(Объект.ДокументРасчета));
	ЦветРеверснойКнопки("КартинкаПО14Продавец", ЗначениеЗаполнено(Объект.Продавец));
	ЦветРеверснойКнопки("ПрограммноКартинкаПО14Продавец", ЗначениеЗаполнено(Объект.Продавец));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьБыстрыйТовар(ИдентификаторБыстрогоТовара)
	
	МассивСтрок = ТаблицаБыстрыхТоваров.НайтиСтроки(Новый Структура("ИдентификаторБыстрогоТовара", ИдентификаторБыстрогоТовара));
	
	Если МассивСтрок.Количество() > 0 Тогда
		
		СтрокаБыстрыхТоваров = МассивСтрок[0];
		Если СтрокаБыстрыхТоваров.ЭтоСтраница Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ПалитраБыстрыхТоваров", ПалитраБыстрыхТоваров);
			ПараметрыФормы.Вставить("НомерСтраницы", СтрокаБыстрыхТоваров.НомерСтраницы);
			ПараметрыФормы.Вставить("ЗакрыватьБыстрыеТоварыПриВыбореТовара", НаборПравИНастроек.ЗакрыватьБыстрыеТоварыПриВыбореТовара);
			
			ОткрытьФорму("Справочник.ПалитраБыстрыхТоваров.Форма.ФормаСтраницыБыстрыхТоваров",
				ПараметрыФормы,
				ЭтотОбъект,
				,
				,
				,
				,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Иначе
			ДобавитьНоменклатуруВТабЧасть(СтрокаБыстрыхТоваров.Номенклатура, СтрокаБыстрыхТоваров.Характеристика, Неопределено, 1, Истина);
			Если НаборПравИНастроек.ЗакрыватьБыстрыеТоварыПриВыбореТовара Тогда
				Элементы.ГруппаБыстрыхТоваров.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыбраннаяКассаККМ(ОбработчикОповещения)

	Если ТаблицаКассККМОрганизаций.Количество() > 1 Тогда
		
		// &ЗамерПроизводительности
		ОценкаПроизводительностиРТКлиент.НачатьЗамер(
			Истина, "Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораКассыККМ.Открытие");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КассыККМ"   , МассивКассККМКлиент);
		ПараметрыФормы.Вставить("Организации", МассивОрганизацийКлиент);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораКассыККМ",
			ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим); 
		
		Возврат ПредопределенноеЗначение("Справочник.КассыККМ.ПустаяСсылка");
	Иначе
		ЗначениеВыбораКасса = МассивКассККМКлиент[0];
	КонецЕсли;
	
	Возврат ЗначениеВыбораКасса;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьВыбораКассыВвестиВыемкаДенег(ЗначениеВыбораКасса)
	
	Если НЕ ЗначениеЗаполнено(ЗначениеВыбораКасса) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗначениеВыбораКасса", ЗначениеВыбораКасса);
	
	ОбработчикОповещения = Новый ОписаниеОповещения(
		"ОповещениеОткрытьФормуВводаЧислаВвестиВыемкаДенег", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыВыемки = РозничныеПродажиКлиентСервер.ПараметрыВыемкиИзКассы();
	ПараметрыВыемки.КассаККМ = ЗначениеВыбораКасса;
	// По умолчанию производим выемку собственных средств.
	ПараметрыВыемки.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	
	ПараметрыВводаЧисла = Новый Структура;
	ПараметрыВводаЧисла.Вставить("ФорматироватьСтроку", Истина);
	ПараметрыВводаЧисла.Вставить("ПараметрыВыемки",     ПараметрыВыемки);
	
	ПолучитьИнтерактивноЧисло(НСтр("ru = 'Сумма выемки'"), ОбработчикОповещения, ПараметрыВводаЧисла);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВыбораКассыПриОткрытииДенежногоЯщика(ЗначениеВыбораКасса)
	
	Если НЕ ЗначениеЗаполнено(ЗначениеВыбораКасса) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(ЗначениеВыбораКасса);
	ИдентификаторУстройстваФР = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	Если ИспользоватьПодключаемоеОборудование И НЕ ИспользоватьКассуККМБезПодключенияОборудования Тогда
		Оповещение = Новый ОписаниеОповещения("ЗавершитьВыбораКассыПриОткрытииДенежногоЯщикаЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьОткрытиеДенежногоЯщика(Оповещение, ЭтотОбъект, ИдентификаторУстройстваФР, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВыбораКассыПриОткрытииДенежногоЯщикаЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда  
		ЗаголовокИнформации = НСтр("ru = 'При открытии денежного ящика возникла ошибка.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, РезультатВыполнения.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДозаполнитьТаблицыОбъекта()
	
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	
	СтруктураПараметровЗаполнения =
		ОбработкаТабличнойЧастиТоварыСервер.СтруктураЗаполненияСкладаПродажиВСтрокеТЧ(Объект);
	
	ОрганизацияПоУмолчанию = ОрганизацияПоУмолчанию(ТаблицаКассККМОрганизаций);
	
	Если НЕ ОрганизацияПоУмолчанию = Неопределено Тогда
		СтруктураПараметровЗаполнения.Вставить("ОрганизацияПоУмолчанию", ОрганизацияПоУмолчанию);
		СтруктураПараметровЗаполнения.Вставить("Организация", ОрганизацияПоУмолчанию);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьОрганизациюПродажиВТЧСервер(
		Объект.Товары,
		СтруктураПараметровЗаполнения);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьВидНалогаВТЧСервер(
		Объект.Товары,
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияВидаНалога(
			Объект,
			СтруктураПараметровЗаполнения));
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтавкуНДСВТЧСервер(
		Объект.Товары,
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДСВТЧ(
			Объект,
			СтруктураПараметровЗаполнения));
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНДСПоСтрочно(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПересчитатьСуммуНДСВТЧСервер(
		Объект.Товары,
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьОрганизациюВСериях(Объект.Товары, Объект.Серии);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.УправлениеЭлементамиАгентскогоВознаграждения(ЭтотОбъект, Объект);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	ЗаполнитьПредставлениеТаблоСервер();
	ЗаполнитьОстаткиСервер();
	ПерезаполнитьПризнакиМаркировки();
	
КонецПроцедуры

#Область Скидки

&НаКлиенте
Функция ОшибкаРасчетаСкидокПоЗаказуПокупателя()
	
	Если Объект.ПродажаПоЗаказу Тогда
		ЗаголовокИнформации = НСтр("ru = 'Ошибка расчета скидок.'");
		ТекстСообщения = НСтр("ru = 'Скидки рассчитывались в документе заказ покупателя'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ОшибкаРасчетаСкидокПоДокументуРасчета()
	
	Если ЕстьТоварыВДокументеРасчета Тогда
		ЗаголовокИнформации = НСтр("ru = 'Ошибка расчета скидок.'");
		ТекстСообщения = НСтр("ru = 'Скидки рассчитывались в документе расчета'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ОшибкаРасчетаСкидокПриВозврате()
	
	ЭтоВозврат = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат");
	
	Если ЭтоВозврат Тогда
		ЗаголовокИнформации = НСтр("ru = 'Ошибка расчета скидок.'");
		ТекстСообщения = НСтр("ru = 'Скидки рассчитывались в документе продажи'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидкиКлиент(ТолькоСообщенияПослеОформления = Ложь, НеВыводитьСообщения = Ложь, ПараметрыДляОплаты = Неопределено)
	
	Если НЕ ТолькоСообщенияПослеОформления
		И (ОшибкаРасчетаСкидокПоЗаказуПокупателя() ИЛИ ОшибкаРасчетаСкидокПриВозврате() ИЛИ ЕстьТоварыВДокументеРасчета) Тогда
		Возврат;
	КонецЕсли;
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.НазначитьАвтоматическиеСкидкиКлиент");
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту", НЕ ТолькоСообщенияПослеОформления);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет", Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления", ТолькоСообщенияПослеОформления);
	СтруктураПараметры.Вставить("ПорядковыйНомерПродажи", ПорядковыйНомерПродажи);
	СтруктураПараметры.Вставить("НеВыводитьСообщения", НеВыводитьСообщения);
	
	Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = Неопределено;
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	РассчитатьКонтролироватьОстаткиТоваровПриЗакрытииЧека();
	СтруктураПараметры.Вставить("КонтролироватьОстаткиТоваров", КонтролироватьОстаткиТоваровПриЗакрытииЧека);
	Если ПараметрыДляОплаты <> Неопределено Тогда
		Если ПараметрыДляОплаты.Свойство("БудетОплатаБонусами") Тогда
			СтруктураПараметры.Вставить("БудетОплатаБонусами", ПараметрыДляОплаты.БудетОплатаБонусами);
		КонецЕсли;
	КонецЕсли;
	
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	
	Если ВывестиСообщения И НЕ НеВыводитьСообщения Тогда
		Если ПараметрыДляОплаты = Неопределено Тогда
			ОписаниеОповещения = Неопределено;
		Иначе
			ПараметрыДляОплаты.Вставить("ВыведеныСообщения", Истина);
			Если ПараметрыДляОплаты.Свойство("ИмяОбработкиОповещения") Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения(
					ПараметрыДляОплаты.ИмяОбработкиОповещения, ЭтотОбъект, ПараметрыДляОплаты);
			Иначе
				ОписаниеОповещения = Неопределено;
			КонецЕсли;
		КонецЕсли;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресПримененныхСкидокВоВременномХранилище);
		ОткрытьФорму("ОбщаяФорма.ФормаВыводаСообщений",
			ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
	Если ТолькоСообщенияПослеОформления Тогда
		ОбновитьФормуНаКлиенте();
	Иначе
		ОбработкаТабличнойЧастиТоварыКлиент.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		ОбновитьФормуНаКлиенте();
		ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");
	КонецЕсли;
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры)
	
	РозничныеПродажиСервер.РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры, 
		Объект, 
		АдресПримененныхСкидокВоВременномХранилище, 
		УникальныйИдентификатор,
		ВывестиСообщения);
		
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		ПодготовитьОплатуБонусамиКСторнированию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиСкидкиПодаркиВТоварыСервер(МассивСообщений = Неопределено)
	
	КоличествоТоваровДоПереноса = Объект.Товары.Количество();
	СкидкиНаценкиСерверПереопределяемый.ПеренестиСкидкиПодаркиВТовары(
		ЭтотОбъект, Объект.ЦенаВключаетНДС, Неопределено, 0, Ложь, Истина, МассивСообщений);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	ОбработкаТабличнойЧастиТоварыСервер.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	Если КоличествоТоваровДоПереноса < Объект.Товары.Количество() Тогда
		ЗаполнитьОстаткиСервер();
	КонецЕсли;
	
	//ИнтеграцияИСМПТК_РозничноеВыбытие
	Если УчетМаркировкаИСМПТК 
		И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда 
		ПерезаполнитьПризнакиМаркировкиИСМПТК();
		ЗаполнитьПризнакКодаМаркировкиВТоварах();
	КонецЕсли;
	//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТоварыНоменклатура(ТекущаяСтрока = Неопределено)
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущаяСтрока <> Неопределено Тогда
	
		ОчиститьСерийныеНомераВСтроке(ТекущаяСтрока.ПолучитьИдентификатор());
	
		ПараметрДействия = Новый Структура;
		ПараметрДействия.Вставить("ОткрытаБлокирующаяФорма", Ложь);
		ПараметрДействия.Вставить("ДобавитьСерийныйНомерИОткрытьВводСерии", Неопределено);
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			
			ПараметрДействия.Вставить("ОбновитьПоследнееРедактируемыеЗначения");
			
			ТоварыПриИзмененииНоменклатуры(ТекущаяСтрока,, ПараметрДействия);
			
			Если НЕ ПараметрДействия.ОткрытаБлокирующаяФорма Тогда
				ПараметрДействия.ОткрытаБлокирующаяФорма = Истина;
				ДобавитьСерийныйНомерИОткрытьВводСерии(ТекущаяСтрока);
				ОбновитьПоследнееРедактируемыеЗначения(ТекущаяСтрока)
			КонецЕсли;
			
		Иначе
			
			Если НаборПравИНастроек.РазрешитьСторнированиеТовара
				ИЛИ ПоследняяРедактируемаяНоменклатура = Неопределено Тогда
				
				ТоварыНоменклатураОчистка(Неопределено, Истина);
				
				Возврат;
			Иначе
				ТекущаяСтрока.Номенклатура = ПоследняяРедактируемаяНоменклатура;
				
				ТоварыПриИзмененииНоменклатуры(ТекущаяСтрока,,ПараметрДействия);
				
				Если НЕ ПараметрДействия.ОткрытаБлокирующаяФорма Тогда
					ДобавитьСерийныйНомерИОткрытьВводСерии(ТекущаяСтрока);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если (НЕ Объект.ПродажаПоЗаказу)
		И (НЕ ПараметрДействия.ОткрытаБлокирующаяФорма) Тогда
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	КонецЕсли;
	
	//ИнтеграцияИСМПТК_РозничноеВыбытие
	Если УчетМаркировкаИСМПТК
		И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
		РозничноеВыбытиеИСМПТККлиентПереопределяемый.ОчиститьМаркиИСМПТК(Объект, ТекущаяСтрока);
	КонецЕсли;
	//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
	
	ОбновитьФормуНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура РасчитатьСкидкуПриВозврате()
	
	НеобходимоОкругление = ПроверитьСуммуТЧТовары();
		
	Если НеобходимоОкругление Тогда
		
		СкидкиНаценкиСервер.ОкруглитьЧекВПользуПокупателя(Объект, "Товары", "СкидкиНаценки");
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСдачуКлиентСервер(Форма)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ВидОплаты", ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Наличные"));
	
	СуммаНаличных  = 0;
	СтрокиНаличных = Форма.Объект.Оплата.НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаНаличных Из СтрокиНаличных Цикл
		СуммаНаличных = СуммаНаличных + СтрокаНаличных.Сумма;
	КонецЦикла;
	
	Форма.Сдача = Макс(Форма.Объект.Оплата.Итог("Сумма") - Форма.СуммаВсего, 0);
	Форма.Сдача = Мин(Форма.Сдача, СуммаНаличных);
	
КонецПроцедуры

&НаСервере
Функция  ПроверитьСуммуТЧТовары()
	
	ИтоговаяСуммаБезОкругления = 0;
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		ИтоговаяСуммаБезОкругления = ИтоговаяСуммаБезОкругления + СтрокаТЧ.СуммаВсего;
		
	КонецЦикла;
	
	Возврат ?(ИтоговаяСуммаБезОкругления = Цел(ИтоговаяСуммаБезОкругления), Ложь, Истина);                                
	
КонецФункции

#КонецОбласти

#Область Серии_и_подарочные_сертификаты

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
		Объект, ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ПараметрыСерийВходящие = Неопределено)
	
	Если ПараметрыСерийВходящие = Неопределено Тогда
		Результат = ОбработкаТабличнойЧастиТоварыСервер.ПоместитьСерииВХранилище(
			Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтотОбъект);
	Иначе
		Результат = ОбработкаТабличнойЧастиТоварыСервер.ПоместитьСерииВХранилище(
			Объект, ПараметрыСерийВходящие, ТекущиеДанныеИдентификатор, ЭтотОбъект);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	СуммаДоРасчета = Объект.Товары.Итог("Сумма");
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьУказаниеСерий(
		Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий,СтруктураДействий);
	ОбработкаТабличнойЧастиТоварыСервер.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(ОБъект.Товары, Объект.ЦенаВключаетНДС);
	
	СуммаПослеРасчета = Объект.Товары.Итог("Сумма");
	УменьшениеСуммыЧекаККМ = СуммаДоРасчета - СуммаПослеРасчета;
	УменьшениеСуммыЧекаККМ = ?(УменьшениеСуммыЧекаККМ > 0, УменьшениеСуммыЧекаККМ, 0);
	ЛогированиеВводаСерий(УменьшениеСуммыЧекаККМ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиСерии()
	
	ВводСерийРазрешен = Истина;
	ТекстСообщения = "";
	ОбработкаТабличнойЧастиТоварыКлиент.ПроверитьВозможностьУказанияСерий(
		ЭтотОбъект, ПараметрыУказанияСерий, ВводСерийРазрешен,,Истина, ТекстСообщения);
	
	Если НЕ ВводСерийРазрешен Тогда
		ЗаголовокИнформации = НСтр("ru = 'Ввод серий'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	
	ОбработчикУказанияСерий = Новый ОписаниеОповещения(
		"ОбработатьУказаниеСерий", ЭтотОбъект, ПараметрыФормыУказанияСерий);
	РежимБлокировки = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы + "РМК",
		ПараметрыФормыУказанияСерий, ЭтотОбъект,,,, ОбработчикУказанияСерий, РежимБлокировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПодарочныеСертификаты(ИдентификаторСтроки, ТекущийКлючСвязи, Номенклатура, ОткрыватьРедактированиеСтроки = Ложь)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ВводПодарочныхСертификатов");
	
	Если ПроверитьИспользованиеСерийныхНомеров(Номенклатура) Тогда
			
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("МассивСерийныхНомеров",
			ОбработкаТабличнойЧастиТоварыКлиент.МассивСерийныхНомеровДляСтрокиТоваров(
				ТекущийКлючСвязи, Объект.СерийныеНомера));
		ПараметрыФормы.Вставить("Номенклатура", Номенклатура);
		ПараметрыФормы.Вставить("ПредставлениеНоменклатуры", Строка(Номенклатура));
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
		ДополнительныеПараметры.Вставить("ТекущийКлючСвязи", ТекущийКлючСвязи);
		
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ОповещениеОткрытьФормуВводаСерийныхНомеров", ЭтотОбъект, ДополнительныеПараметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВводаСерийныхНомеров",
			ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим); 
		ОткрыватьРедактированиеСтроки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьИспользованиеСерийныхНомеров(Номенклатура)
	
	Возврат РозничныеПродажиКлиент.ПроверитьИспользованиеСерийныхНомеров(Номенклатура, ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Функция ДобавитьСерийныйНомер(СтрокаТЧ, ОткрыватьРедактированиеСтроки = Ложь)
	
	Если СтрокаТЧ = Неопределено Тогда
		ОткрыватьРедактированиеСтроки = Ложь;
		Возврат Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
		Возврат Ложь;
	ИначеЕсли НЕ СтрокаТЧ.ИспользоватьСерийныеНомера Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОткрыватьРедактированиеСтроки = Ложь;
	ДобавитьПодарочныеСертификатыВСтроку(СтрокаТЧ);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьПодарочныеСертификатыВСтроку(СтрокаТЧ, ОткрыватьРедактированиеСтроки = Ложь)
	
	ИдентификаторСтроки = СтрокаТЧ.ПолучитьИдентификатор();
	
	ВвестиПодарочныеСертификаты(
		ИдентификаторСтроки, СтрокаТЧ.КлючСвязиСерийныхНомеров, СтрокаТЧ.Номенклатура, ОткрыватьРедактированиеСтроки);
	
КонецПроцедуры

&НаКлиенте
Функция ОткрытьВводСерии(СтрокаТЧ, ОткрыватьРедактированиеСтроки = Ложь)

	Если СтрокаТЧ = Неопределено Тогда
		ОткрыватьРедактированиеСтроки = Ложь;
		Возврат Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
		Возврат Ложь;
	ИначеЕсли СтрокаТЧ.СтатусУказанияСерий = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОткрыватьРедактированиеСтроки = Ложь;
	ВвестиСерии();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЭтоСертификатСПроизвольнымНоминалом(Номенклатура)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ПроизвольныйНоминал");
	
КонецФункции

#КонецОбласти

#Область Подключаемое_оборудование

&НаКлиенте
Процедура Подключаемый_ДисплеяПокупателяПриПростое();
	
	Если Не ЭтотОбъект.Открыта() Тогда
		Возврат;
	КонецЕсли;
		
	Если Объект.Товары.Количество() <= 0 Тогда
		ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДисплеяПокупателяОплата();
	
	Если Не ЭтотОбъект.Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");
	Иначе 
		ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеДисплеяПокупателя(Команда, ТолькоИтоги = Ложь)
	
	СтруктураДанных = РозничныеПродажиКлиентСервер.СтруктураДляОбновленияДисплеяПокупателя();
	СтруктураДанных.Команда                              = Команда;
	СтруктураДанных.ТолькоИтоги                          = ТолькоИтоги;
	СтруктураДанных.ТекущаяСтрока                        = Элементы.Товары.ТекущиеДанные;
	СтруктураДанных.Товары                               = Объект.Товары;
	СтруктураДанных.ДисплейПокупателяПараметры           = ДисплейПокупателяПараметры;
	СтруктураДанных.ИспользоватьПодключаемоеОборудование = ИспользоватьПодключаемоеОборудование;
	СтруктураДанных.НаборПравИНастроек                   = НаборПравИНастроек;
	СтруктураДанных.СуммаСкидки                          = СуммаСкидки;
	СтруктураДанных.СуммаВсего                           = СуммаВсего;
	
	РозничныеПродажиКлиент.ОбновлениеДисплеяПокупателя(СтруктураДанных, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателя(Команда)
	
	СтруктураДанных = РозничныеПродажиКлиентСервер.СтруктураДляВыводаИнформацииНаДисплейПокупателя();
	СтруктураДанных.Команда                              = Команда;
	СтруктураДанных.ДисплейПокупателяПараметры           = ДисплейПокупателяПараметры;
	СтруктураДанных.ИспользоватьПодключаемоеОборудование = ИспользоватьПодключаемоеОборудование;
	СтруктураДанных.НаборПравИНастроек                   = НаборПравИНастроек;
	СтруктураДанных.СуммаСкидки                          = СуммаСкидки;
	СтруктураДанных.СуммаВсего                           = СуммаВсего;
	
	РозничныеПродажиКлиент.ВывестиИнформациюНаДисплейПокупателя(СтруктураДанных, ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателяЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ЗаголовокИнформации = НСтр("ru = 'При использовании дисплея покупателя произошла ошибка.'"); 
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, РезультатВыполнения.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуруВТабЧастьКлиент(СтруктураПараметров, Знач ОткрыватьРедактированиеСтроки = Ложь)
	
	Если СтруктураПараметров.Свойство("Количество") Тогда 
		КоличествоУпаковок = СтруктураПараметров.Количество;
	Иначе
		КоличествоУпаковок = 1;
	КонецЕсли;
	
	ДобавитьНоменклатуруВТабЧасть(
		СтруктураПараметров.Номенклатура,
		СтруктураПараметров.Характеристика,
		СтруктураПараметров.Упаковка,
		КоличествоУпаковок,
		Истина,,
		ОткрыватьРедактированиеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ЗаголовокИнформации = НСтр("ru = 'При подключении оборудования произошла ошибка:'");
		ТекстИнформации = РезультатВыполнения.ОписаниеОшибки;
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Информационные_карты

&НаКлиенте
Процедура ДисконтнаяКартаПриИзменении()
	
	ТекстСообщенияСменыКарты = "";
	ПриИзмененииДисконтнаяКартаСервер(ТекстСообщенияСменыКарты);
	ОбновитьДанныеSMSEmail();
	
	Если Не Объект.ПродажаПоЗаказу Тогда
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами(Истина);
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстСообщенияСменыКарты) Тогда
		ПровестиОпрос();
	Иначе
		ЗаголовокИнформации = "";
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщенияСменыКарты);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДисконтнаяКартаСервер(ТекстСообщенияСменыКарты)
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат И ЗначениеЗаполнено(Объект.ЧекККМПродажа) Тогда
		ДисконтнаяКартаВозврата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЧекККМПродажа, "ДисконтнаяКарта");
		Если ДисконтнаяКартаВозврата <> Объект.ДисконтнаяКарта Тогда
			Объект.ДисконтнаяКарта = ДисконтнаяКартаВозврата;
			ТекстСообщенияСменыКарты = НСтр("ru = 'Изменение дисконтной карты при возврате не допускается'");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СменитьВладельцаКарты();
	ОтменитьСкидки();
	ОтменитьОплатуБонусами();
	ПродажиСервер.ЗаполнитьКонтрагентаПоДисконтнойКарте(Объект, Объект.ДисконтнаяКарта);
	
	ПодключаемоеОборудованиеРТ.ЗаполнитьДанныеЭлектронногоЧека(Объект, Объект.ДисконтнаяКарта);
	
КонецПроцедуры

&НаСервере
Процедура СменитьВладельцаКарты()
	
	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		ВладелецКарты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДисконтнаяКарта, "ВладелецКарты");
		Если Объект.ВладелецДисконтнойКарты <> ВладелецКарты Тогда
			Объект.ВладелецДисконтнойКарты = ВладелецКарты;
		КонецЕсли;
	Иначе
		Объект.ВладелецДисконтнойКарты = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиОпрос()
	
	РозничныеПродажиКлиент.ПровестиОпрос(ИспользоватьНастройкуРМК,
		НаборПравИНастроек.ПроводитьОпросВладельцаКарты,
		Объект.ДисконтнаяКарта);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПравСервер()
	
	Пользователь = ОбщегоНазначенияРТ.ПользовательСУчетомИзмененныхПрав();
	ПродавецПоУмолчанию = ЗначениеНастроекПовтИсп.ПродавецПользователяПоУмолчанию(Пользователь);
	Объект.Продавец = ПродавецПоУмолчанию;
	ЗаполнитьНаборПравИНастроек();
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

#КонецОбласти

#Область Оплата_проверки_подарки

&НаСервере
Процедура ПроверитьКассовыеСмены(Отказ, ПараметрыИнформации)
	
	РозничныеПродажиСервер.ПроверитьКассовыеСмены(Отказ, ПараметрыИнформации, ТаблицаКассККМОрганизаций);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентаФизЛицо(Отказ, ПараметрыИнформации)
	
	Контрагент = Объект.Контрагент;
	КонтрагентРозничныйПокупатель = Константы.КонтрагентРозничныйПокупатель.Получить();
	
	Если НЕ Контрагент = КонтрагентРозничныйПокупатель И ЗначениеЗаполнено(Контрагент) И Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		ЕстьОшибка = Ложь;
		ФизЛицо = Контрагент.ФизЛицо;
		
		Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
			ЕстьОшибка = Истина;
			ТекстОшибки = НСтр("ru='У контрагента не указано физ.лицо.'");
		ИначеЕсли ЗащитаПерсональныхДанных.ЭтоОбъектСоСкрытымиПерсональнымиДанными(ФизЛицо) Тогда
			ЕстьОшибка = Истина;
			ТекстОшибки = НСтр("ru='Контрагент - физ.лицо со скрытыми персональными данными.'");
		КонецЕсли;
		
		Если ЕстьОшибка Тогда
			ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
			ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Касса ККМ'");
			ПараметрыИнформации.ТекстИнформации = ТекстОшибки;
			
			Отказ = Истина;
			ЭтотОбъект.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеТабличнойЧасти(Отказ, ПараметрыИнформации, ОплатаТолькоНаличными)
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийЧекККМ.Возврат И ОкруглениеТолькоПриОплатеНаличными И ОплатаТолькоНаличными Тогда
		СкидкиНаценкиСервер.ОкруглитьЧекВПользуПокупателя(Объект, "Товары", "СкидкиНаценки", ОплатаТолькоНаличными);
	КонецЕсли;
	
	СтруктураДанных = РозничныеПродажиКлиентСервер.СтруктураДляЗаполненияТабличнойЧасти();
	СтруктураДанных.ОплатаТолькоНаличными                       = ОплатаТолькоНаличными;
	СтруктураДанных.ВестиУчетМаркируемойПродукцииИСМП             = ВестиУчетМаркируемойПродукцииИСМП;
	СтруктураДанных.КонтролироватьОстаткиТоваровПриЗакрытииЧека = КонтролироватьОстаткиТоваровПриЗакрытииЧека;
	СтруктураДанных.ОрганизацияЕГАИС                            = ОрганизацияЕГАИС;
	СтруктураДанных.ЭтоВозвратПродукцииИСМПБезМарки      = ЭтоВозвратПродукцииИСМПБезМарки;
	
	РозничныеПродажиСервер.ПроверитьЗаполнениеТабличнойЧасти(Отказ, ПараметрыИнформации, СтруктураДанных, Объект, ОплатаТолькоНаличными);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЧеков()
	
	СтруктураДанных = РозничныеПродажиКлиентСервер.СтруктураДляЗаполненияТаблицыЧеков();
	СтруктураДанных.СуммаОстаткаДокументаРасчета = СуммаОстаткаДокументаРасчета;
	СтруктураДанных.УникальныйИдентификатор = УникальныйИдентификатор;
	СтруктураДанных.ТаблицаКассККМОрганизаций = ТаблицаКассККМОрганизаций;
	СтруктураДанных.ТекущаяКассаККМ = ТекущаяКассаККМ;
	
	РозничныеПродажиСервер.ЗаполнитьТаблицуЧеков(ТабличноеПолеЧеков, Объект, СтруктураДанных, АдресТаблицыЧеков);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуЧековИПроверитьСоответствиеОрганизаций(ОплатаПлатежнойСистемой, Отказ)
	
	ЗаполнитьТаблицуЧеков();
	
	СтруктураДанных = РозничныеПродажиКлиентСервер.СтруктураДляЗаполненияТаблицыЧеков();
	СтруктураДанных.СуммаОстаткаДокументаРасчета = СуммаОстаткаДокументаРасчета;
	СтруктураДанных.УникальныйИдентификатор      = УникальныйИдентификатор;
	
	РозничныеПродажиКлиент.ЗаполнитьТаблицуЧековИПроверитьСоответствиеОрганизаций(ТабличноеПолеЧеков, 
		Объект, 
		СтруктураДанных, 
		Отказ, 
		МассивОрганизацийКлиент);
		
	// при оплате платежной системой переопределяем порядок пробития чеков по организациям. сначало организации с подключенной платежной системой 
	Если Не Отказ
		И ОплатаПлатежнойСистемой = Истина Тогда
		
		Для Ном = 0 ПО ТабличноеПолеЧеков.Количество()-1 Цикл
			
			СтрокаТаблицыЧеков = ТабличноеПолеЧеков[Ном];
			
			Если ОрганизацииПлатежныхСистем.НайтиПоЗначению(СтрокаТаблицыЧеков.Организация) <> Неопределено Тогда
				
				Если Ном > 0 Тогда
					
					СтрокаДубль = ТабличноеПолеЧеков.Вставить(0);
					ЗаполнитьЗначенияСвойств(СтрокаДубль, СтрокаТаблицыЧеков);
					
					ТабличноеПолеЧеков.Удалить(Ном+1);
					
				КонецЕсли;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОрганизацииПлатежныхСистем.НайтиПоЗначению(ТабличноеПолеЧеков[0].Организация) = Неопределено Тогда
			
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Ошибки оплаты'"), 
																		НСтр("ru = 'В корзине покупателя товары организации, к которой не подключена оплата QR-кодом!'"));
			Отказ = Истина;
			
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") 
			И ТабличноеПолеЧеков.Количество() > 1 Тогда
			
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Ошибки оплаты'"), 
																		НСтр("ru = 'В корзине покупателя товары по нескольким организациям. Возврат QR-кодом недоступен!'"));
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СтруктураПолученияПодарковИзСкидки(СкидкаНаценка, КоличествоНаборов)
	
	СтруктураДанных = РозничныеПродажиКлиентСервер.СтруктураДляПолученияПодарковИзСкидки();
	СтруктураДанных.СкидкаНаценка                              = СкидкаНаценка;
	СтруктураДанных.КоличествоНаборов                          = КоличествоНаборов;
	СтруктураДанных.СкладПродажиПоУмолчанию                    = СкладПродажиПоУмолчанию;
	СтруктураДанных.Магазин                                    = Объект.Магазин;
	СтруктураДанных.РабочееМесто                               = Объект.РабочееМесто;
	СтруктураДанных.АдресПримененныхСкидокВоВременномХранилище = АдресПримененныхСкидокВоВременномХранилище;
	СтруктураДанных.КонтролироватьОстаткиТоваровПриЗакрытииЧека= КонтролироватьОстаткиТоваровПриЗакрытииЧека;
	СтруктураДанных.УникальныйИдентификатор                    = УникальныйИдентификатор;
	
	Возврат РозничныеПродажиСервер.СтруктураПолученияПодарковИзСкидки(СтруктураДанных);
	
КонецФункции

&НаСервере
Функция СтруктураПолученияПодарков()
	
	Возврат РозничныеПродажиСервер.СтруктураПолученияПодарков(Объект, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ВыдатьПодарки(Отказ, ПараметрДействия)

	Если Объект.Подарки.Количество()= 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрДействия.Вставить("МассивНеНужныхСтрок", Новый Массив);
	
	Для каждого СтрокаПодарки Из Объект.Подарки Цикл
		СтрокаПодарки.Получен = Ложь;
	КонецЦикла;
	
	ВыдатьПодаркиИзСпискаВЦикле(Отказ, ПараметрДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыдатьПодаркиИзСпискаВЦикле(Отказ, ПараметрДействия, ТекущаяВыданнаяСкидка = Неопределено)
	
	Для Каждого СтрокаПодарки Из Объект.Подарки Цикл
		
		Если ЗначениеЗаполнено(СтрокаПодарки.Номенклатура) ИЛИ СтрокаПодарки.Получен Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПолученияПодарковИзСкидки = СтруктураПолученияПодарковИзСкидки(СтрокаПодарки.СкидкаНаценка, 1);
		
		Если СтруктураПолученияПодарковИзСкидки.Действие = "УдалениеСтрокиЧека" Тогда
			СтрокаПодарки.Получен = Истина;
			ПараметрДействия.МассивНеНужныхСтрок.Добавить(СтрокаПодарки);
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяВыданнаяСкидка)
			И ТекущаяВыданнаяСкидка = СтрокаПодарки.СкидкаНаценка Тогда
			ПараметрДействия.МассивНеНужныхСтрок.Добавить(СтрокаПодарки);
			Продолжить;
		КонецЕсли;
		
		Если СтруктураПолученияПодарковИзСкидки.Действие = "ВыборИзСписка" Тогда
			
			// &ЗамерПроизводительности
			ОценкаПроизводительностиРТКлиент.НачатьЗамер(
				Истина, "Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораПодаркаИзСписка.Открытие");
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("АдресТаблицы" , СтруктураПолученияПодарковИзСкидки.АдресТаблицы);
			ПараметрыФормы.Вставить("СкидкаНаценка", СтрокаПодарки.СкидкаНаценка);
			ПараметрыФормы.Вставить("Магазин", Объект.Магазин);
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
				ПараметрыФормы.Вставить("ЭтоВозврат", Истина);
			КонецЕсли;
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПараметрДействия",
				ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрДействия));
			ДополнительныеПараметры.Вставить("ИдентификаторСтрокиПодарки", СтрокаПодарки.ПолучитьИдентификатор());
			
			ПараметрДействия.ОткрытаБлокирующаяФорма = Истина;
			ОбработчикОповещения = Новый ОписаниеОповещения(
				"ОповещениеОткрытьФормуВыбораПодаркаИзСписка", ЭтотОбъект, ДополнительныеПараметры);
			Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
			ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораПодаркаИзСписка",
				ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим); 
			Прервать;
		Иначе
			СтруктураОтвета = СтруктураПолученияПодарковИзСкидки.СтруктураВыборки;
			
			Если ЗначениеЗаполнено(СтруктураОтвета) Тогда
				ЗаполнитьСтрокуПодаркаПриВыборе(СтрокаПодарки, СтруктураОтвета);
			Иначе
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ПараметрДействия.ОткрытаБлокирующаяФорма Тогда
		Для Каждого СтрокаПодарки Из ПараметрДействия.МассивНеНужныхСтрок Цикл
			Объект.Подарки.Удалить(СтрокаПодарки);
		КонецЦикла;
		
		ВыдатьПодаркиПослеВыдачиИзСписка(ПараметрДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтрокуПодаркаПриВыборе(СтрокаПодарки, СтруктураЗаполнения)
	
	РозничныеПродажиКлиент.ЗаполнитьСтрокуПодаркаПриВыборе(СтрокаПодарки, СтруктураЗаполнения, Объект, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыдатьПодаркиПослеВыдачиИзСписка(ПараметрДействия)
	
	СтруктураПолученияПодарков = СтруктураПолученияПодарков();
	
	Если СтруктураПолученияПодарков.Действие = "ВыдатьПодарки" Тогда
		
		// &ЗамерПроизводительности
		ОценкаПроизводительностиРТКлиент.НачатьЗамер(
			Истина, "Обработка.РМКУправляемыйРежим.Форма.ФормаВыдачиПодарков.Открытие");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресТаблицы" , СтруктураПолученияПодарков.АдресТаблицы);
		ПараметрыФормы.Вставить("АдресТаблицыСерий" , СтруктураПолученияПодарков.АдресТаблицыСерий);
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
			ПараметрыФормы.Вставить("ЭтоВозврат");
		КонецЕсли;
		ПараметрыФормы.Вставить("Магазин" , Объект.Магазин);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрДействия", ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрДействия));
		
		ПараметрДействия.ОткрытаБлокирующаяФорма = Истина;
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыдачиПодарков", ЭтотОбъект, ДополнительныеПараметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыдачиПодарков",
			ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	Иначе
		ЗавершитьДействияПослеВыдачиПодарков(ПараметрДействия)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьДействияПослеВыдачиПодарков(ПараметрДействия)
	
	Если ПараметрДействия.Свойство("ОплатитьТоварыОткрытиеФормОплат") Тогда
		ОплатитьТоварыОткрытиеФормОплат(ПараметрДействия)
	КонецЕсли;
	
	Если ПараметрДействия.Свойство("ОткрытьФормуОплатыБонусами") Тогда
		ОткрытьФормуОплатыБонусами(ПараметрДействия)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОтменуОплаты()
	
	РозничныеПродажиСервер.ОбработатьОтменуОплаты(Объект, ОкруглениеТолькоПриОплатеНаличными);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТаблицуОплат(РезультатОткрытияФормы, Организация = Неопределено, КлючСвязиТПЧеков = Неопределено)
	
	РозничныеПродажиСервер.ДобавитьТаблицуОплат(РезультатОткрытияФормы, Организация, КлючСвязиТПЧеков, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТаблицуПогашениеПодарочныхСертификатов(АдресТаблицы, Организация = Неопределено, КлючСвязиТПЧеков = Неопределено)
	
	РозничныеПродажиСервер.ДобавитьТаблицуПогашениеПодарочныхСертификатов(АдресТаблицы,
		Организация,
		КлючСвязиТПЧеков,
		Объект.ПогашениеПодарочныхСертификатов);
	
КонецПроцедуры

&НаСервере
Функция АдресВХранилище(ИмяТаблицы = "")
	
	Возврат РозничныеПродажиСервер.АдресВХранилище(ИмяТаблицы, Объект, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ОплатитьТовары(ИмяФормыОплаты, ОплатаПлатежнойКартой = Ложь, ОплатаПлатежнойСистемой = Ложь, Печать = Ложь, ОплатаМобильныйПлатеж = Неопределено)
	
	ЭтоВозвратПродукцииИСМПБезМарки = Ложь;
	
	Если Объект.Товары.Количество() = 0 
		И НЕ Объект.ОперацияСДенежнымиСредствами Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяФормыОплаты = "ФормаОплатыЯндексКасса" И Объект.СуммаДокумента > 15000 Тогда
		
		НаличиеДоговора = ПроверитьНаличиеДоговораЯндексКассы(Объект.Организация);
		Если Не НаличиеДоговора Тогда
			ЗаголовокИнформации = НСтр("ru = 'Оплата'");
			ТекстИнформации = НСтр("ru = 'Превышена максимальная сумма чека оплаты без договора с ЮKassa.'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
			
			ЭтотОбъект.Доступность = Истина;
			
			Возврат;
		КонецЕсли
	КонецЕсли;
	
	ОплатаЭСНСПК = Ложь;
	Если ОплатаПлатежнойКартой И ОплатаПлатежнойСистемой Тогда
		ОплатаЭСНСПК = Истина;
		ОплатаПлатежнойСистемой = Ложь;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяФормыОплаты", ИмяФормыОплаты);
	ДополнительныеПараметры.Вставить("ОплатаПлатежнойКартой", ОплатаПлатежнойКартой);
	ДополнительныеПараметры.Вставить("ОплатаПлатежнойСистемой", ОплатаПлатежнойСистемой);
	ДополнительныеПараметры.Вставить("ОплатаЭСНСПК", ОплатаЭСНСПК);
	ДополнительныеПараметры.Вставить("Печать", Печать);
	ДополнительныеПараметры.Вставить("ОплатаМобильныйПлатеж", ОплатаМобильныйПлатеж);
	
	ОбработкаОповещения =
		Новый ОписаниеОповещения("ОплатитьТоварыПослеВыбораККМПродолжение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(ТекущаяКассаККМ) Тогда
		Результат = Новый Структура();
		Результат.Вставить("Касса", 	ТекущаяКассаККМ);
		Результат.Вставить("Организация", Объект.Организация);
		ВыполнитьОбработкуОповещения(ОбработкаОповещения, Результат);
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КассыККМ",    МассивКассККМКлиент);
		ПараметрыФормы.Вставить("Организации", МассивОрганизацийКлиент);
		
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораКассыККМ",
			ПараметрыФормы,
			ЭтотОбъект,
			УникальныйИдентификатор,
			,
			,
			ОбработкаОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьТоварыОткрытиеФормОплат(ПараметрДействия)
	
	Отказ = Ложь;
	
	Если НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		МассивСообщений = Новый Массив;
		ПеренестиСкидкиПодаркиВТоварыСервер(МассивСообщений);
		
		Если МассивСообщений.Количество() <> 0 Тогда
			ЗаголовокИнформации = НСтр("ru = 'При переносе подарков в товары произошла ошибка.'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, МассивСообщений[0]);
			Если ПараметрДействия.Свойство("МассивНеНужныхСтрок") Тогда
				ПараметрДействия.МассивНенужныхСтрок.Очистить();
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
	ОбновитьФормуНаКлиенте();
	ЗаполнитьТаблицуЧековИПроверитьСоответствиеОрганизаций(ПараметрДействия.ОплатаПлатежнойСистемой, Отказ);
	
	Если ЗначениеЗаполнено(ЧекККМВОбработке) Тогда
		ТабличноеПолеЧеков[0].ЧекККМСсылка = ЧекККМВОбработке;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКодМаркировкиСредствамиККТ(ПараметрДействия, ТабличноеПолеЧеков);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьТоварыОткрытиеФормОплатПродожение(Результат, ПараметрДействия) Экспорт
	
	Если Не Результат Тогда
		ЭтотОбъект.Доступность = Истина;
		Возврат;
	КонецЕсли;
	
	Если ПередаватьТаблицуОплат Тогда 
		АдресТаблицыОплат = АдресВХранилище("Оплата");
		АдресТаблицыПогашениеПодарочныхСертификатов = АдресВХранилище("ПогашениеПодарочныхСертификатов");
	Иначе
		АдресТаблицыОплат = "";
		АдресТаблицыПогашениеПодарочныхСертификатов = "";
	КонецЕсли;
	
	Объект.Оплата.Очистить();
	Объект.ПогашениеПодарочныхСертификатов.Очистить();
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");
	КонецЕсли;
	
	ИмяФормыОплаты = ПараметрДействия.ИмяФормыОплаты;
	Если ПараметрДействия.ОплатаТолькоНаличными Тогда
		СуммаКОплатеИтоговая = Объект.Товары.Итог("СуммаВсего");
		ПараметрыФормы = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрДействия);
		ПараметрыФормы.Вставить("ИтогПоЧеку", СуммаКОплатеИтоговая);
		ПараметрыФормы.Вставить("АдресТаблицыЧеков", АдресТаблицыЧеков);
		ПараметрыФормы.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
		ПараметрыФормы.Вставить("Телефон", Объект.Телефон);
		ПараметрыФормы.Вставить("Email", Объект.АдресЭП);
		ПараметрыФормы.Вставить("МассивНеНужныхСтрок", Новый Массив);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Печать", ПараметрДействия.Печать);

		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ОповещениеОткрытьФормуОплатыНаличными", ЭтотОбъект, ДополнительныеПараметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма." + ИмяФормыОплаты,
			ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	ИначеЕсли ПараметрДействия.ОплатаЯндексКассой Тогда
		
		ОплатаЯндексКассой = Истина;
		СуммаКОплатеИтоговая = Объект.Товары.Итог("СуммаВсего");
		ПараметрыФормы 		 = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрДействия);
		ПараметрыИнтеграции  = ПараметрыИнтеграции(ИспользуемаяИнтеграция);
		
		СтруктураОтбора = Новый Структура("Организация", ПараметрыИнтеграции.Организация);
		ЧекиЯндексКассы = ТабличноеПолеЧеков.НайтиСтроки(СтруктураОтбора);
		ИдентификаторСтроки = ЧекиЯндексКассы[0].ПолучитьИдентификатор();
		ОтложенныйЧекЯндексКассы = ОтложенныйЧекЯндексКассы(ИдентификаторСтроки); 
		
		ПараметрыФормы.Вставить("АдресТаблицыЧеков", АдресТаблицыЧеков);
		ПараметрыФормы.Вставить("ДисконтнаяКарта",   Объект.ДисконтнаяКарта);
		ПараметрыФормы.Вставить("Телефон", 			 Объект.Телефон);
		ПараметрыФормы.Вставить("Email", 			 Объект.АдресЭП);
		ПараметрыФормы.Вставить("ЧекККМВОбработке",  ОтложенныйЧекЯндексКассы);
		ПараметрыФормы.Вставить("Товары", 			 Объект.Товары);
		ПараметрыФормы.Вставить("Кассир", 			 Объект.Продавец);
		ПараметрыФормы.Вставить("Организация", 		 ПараметрыИнтеграции.Организация);
		ПараметрыФормы.Вставить("Магазин", 			 Объект.Магазин);
		ПараметрыФормы.Вставить("МассивНеНужныхСтрок", Новый Массив);
		
		ПараметрыФормы.Вставить("НаличиеДоговора",     ПроверитьНаличиеДоговораЯндексКассы(Объект.Организация)); 
		ПараметрыФормы.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Печать", ПараметрДействия.Печать);

		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ОповещениеОткрытьФормуОплатыЯндексКассой", ЭтотОбъект, ДополнительныеПараметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма." + ИмяФормыОплаты,
			ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);	
			
	ИначеЕсли ПараметрДействия.ОплатаПлатежнойСистемой
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		
		СуммаКОплатеИтоговая = Объект.Товары.Итог("СуммаВсего");
		ПараметрыФормы 		 = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрДействия);
		
		ПараметрыФормы.Вставить("ИтогПоОрганизации", 	СуммаКОплатеИтоговая);
		ПараметрыФормы.Вставить("ДисконтнаяКарта", 		Объект.ДисконтнаяКарта);
		ПараметрыФормы.Вставить("Телефон", 				Объект.Телефон);
		ПараметрыФормы.Вставить("Email", 				Объект.АдресЭП);
		ПараметрыФормы.Вставить("МассивНеНужныхСтрок", Новый Массив);
		
		Если НЕ ЗначениеЗаполнено(ТабличноеПолеЧеков[0].ЧекККМСсылка) Тогда
			
			СтруктураДокумента 					= СсылкаНовогоЧекаККМ(0);
			ЧекККМВОбработке 					= СтруктураДокумента.ЧекККМВОбработке;
			ТабличноеПолеЧеков[0].ЧекККМСсылка 	= СтруктураДокумента.ЧекККМВОбработке;
			
			НовыйЧек							= СтруктураДокумента.НовыйЧек;
			
		Иначе
			НовыйЧек							= Ложь;
		КонецЕсли;
				
		Если Не НовыйЧек Тогда
			ПараметрыФормы.Вставить("Оплачивается", 		 ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(ТабличноеПолеЧеков[0].ЧекККМСсылка, "Оплачивается"));
		КонецЕсли;
		
		ПараметрыФормы.Вставить("НадписьЗаголовок",			 "Возврат");
		ПараметрыФормы.Вставить("ВидОперации",				 Объект.ВидОперации);
		ПараметрыФормы.Вставить("ДокументОплаты", 			 Объект.ЧекККМПродажа);
		ПараметрыФормы.Вставить("ДокументВозврата", 		 ТабличноеПолеЧеков[0].ЧекККМСсылка);
		ПараметрыФормы.Вставить("Товары", 					 Объект.Товары);
		ПараметрыФормы.Вставить("Кассир", 					 Объект.Продавец);
		ПараметрыФормы.Вставить("Организация", 				 ТабличноеПолеЧеков[0].Организация);
		ПараметрыФормы.Вставить("Магазин", 					 Объект.Магазин);
		ПараметрыФормы.Вставить("КассаККМ", 				 ТабличноеПолеЧеков[0].КассаККМ);
		ПараметрыФормы.Вставить("НомерДокумента", 			 НомерДокументаКассыККМ[ТабличноеПолеЧеков[0].КассаККМ]);
		ПараметрыФормы.Вставить("КлючСвязиТПЧеков",			 ТабличноеПолеЧеков[0].ПолучитьИдентификатор());
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Печать", ПараметрДействия.Печать);

		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ОповещениеОткрытьФормуОплатыПлатежнойСистемой", ЭтотОбъект, ДополнительныеПараметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаОплатыПлатежнойСистемой",
			ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
			
	Иначе
		НесколькоОрганизаций = ТабличноеПолеЧеков.Количество() > 1;
		Если НесколькоОрганизаций Тогда
			Элементы.СтраницыИнформации.ТекущаяСтраница = Элементы.СтраницаЧеков;
			ВыведеныЧеки = Истина;
			СнятьОтборТоваров();
		КонецЕсли;
		
		ПараметрДействияСложнойФормыОплаты = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрДействия);
		ПараметрДействияСложнойФормыОплаты.Вставить("НесколькоОрганизаций", НесколькоОрганизаций);
		ПараметрДействияСложнойФормыОплаты.Вставить("МассивНеНужныхСтрок", Новый Массив);
		
		Если ЗначениеЗаполнено(АдресТаблицыОплат) Тогда 
			ПараметрДействияСложнойФормыОплаты.Вставить("ТаблицаОплат", АдресТаблицыОплат);
			Если ЗначениеЗаполнено(АдресТаблицыПогашениеПодарочныхСертификатов) Тогда 
				ПараметрДействияСложнойФормыОплаты.Вставить("АдресТаблицыПогашениеПодарочныхСертификатов",
					АдресТаблицыПогашениеПодарочныхСертификатов);
			КонецЕсли;
		КонецЕсли;
		ОплатитьТоварыСложнаяФормаОплаты(ПараметрДействияСложнойФормыОплаты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьТоварыСложнаяФормаОплаты(ПараметрДействия)
	
	ВсеСтрокиОбработаныРанее = Истина;
	Если ТабличноеПолеЧеков.Количество() = 0 Тогда
		Если Объект.ОперацияСДенежнымиСредствами Тогда
			
			Для каждого СтрокаОрганизация Из ТаблицаКассККМОрганизаций Цикл
				Если СтрокаОрганизация.СтрокаОбработана Тогда
					Продолжить;
				КонецЕсли;
				
				ПараметрыФормы = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрДействия);
				ПараметрыФормы.Вставить("ИтогПоОрганизации", 0);
				ПараметрыФормы.Вставить("ВидОперации", Объект.ВидОперации);
				ПараметрыФормы.Вставить("Организация", СтрокаОрганизация.Организация);
				ПараметрыФормы.Вставить("Магазин", Объект.Магазин);
				ПараметрыФормы.Вставить("КассаККМ", СтрокаОрганизация.КассаККМ);
				ПараметрыФормы.Вставить("ЧекККМПродажа", Объект.ЧекККМПродажа);
				ПараметрыФормы.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
				ПараметрыФормы.Вставить("Телефон", Объект.Телефон);
				ПараметрыФормы.Вставить("Email", Объект.АдресЭП);
				ПараметрыФормы.Вставить("ОплатаМобильныйПлатеж", ПараметрДействия.ОплатаМобильныйПлатеж);
				ПараметрыФормы.Вставить("КлючСвязиТПЧеков", СтрокаОрганизация.ПолучитьИдентификатор());

				ПараметрДействия.Вставить("КлючСвязиТПЧеков", СтрокаОрганизация.ПолучитьИдентификатор());
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
				
				Если НЕ ПараметрыФормы.ИтогПоОрганизации = 0 ИЛИ ПараметрыФормы.ОперацияСДенежнымиСредствами Тогда
					ОбработчикОповещения = Новый ОписаниеОповещения(
						"ОповещениеОткрытьФормуСложнойОплаты",
						ЭтотОбъект,
						ДополнительныеПараметры);
					ИмяФормыОплаты = "Обработка.РМКУправляемыйРежим.Форма." + ПараметрДействия.ИмяФормыОплаты;
					// &ЗамерПроизводительности
					ОценкаПроизводительностиРТКлиент.НачатьЗамер(
						Истина,
						ИмяФормыОплаты + ".Открытие");
					РезультатОткрытияФормы = ОткрытьФорму(
						ИмяФормыОплаты,
						ПараметрыФормы,
						УникальныйИдентификатор,
						,
						,
						,
						ОбработчикОповещения,
						РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

					Если РезультатОткрытияФормы = Неопределено Тогда
						ОбработатьОтказОтОплаты();
					КонецЕсли;
				Иначе
					ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
					ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка сложной оплаты'");
					ПараметрыИнформации.ТекстИнформации = НСтр("ru = 'Не задана сумма по чеку'");
					ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
					ОбработатьОтказОтОплаты();
				КонецЕсли;
				
				СтрокаОрганизация.СтрокаОбработана = Истина;
				Прервать;
			КонецЦикла;
			
		КонецЕсли;
	Иначе
		Для Каждого СтрокаЧека Из ТабличноеПолеЧеков Цикл
			
			Если СтрокаЧека.СтрокаОбработана Тогда
				Продолжить;
			КонецЕсли;
			
			ВсеСтрокиОбработаныРанее = Ложь;
			
			ПараметрыФормы = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрДействия);
			ПараметрыФормы.Вставить("ИтогПоОрганизации", СтрокаЧека.Сумма);
			ПараметрыФормы.Вставить("ВидОперации", Объект.ВидОперации);
			ПараметрыФормы.Вставить("Организация", СтрокаЧека.Организация);
			ПараметрыФормы.Вставить("Магазин", Объект.Магазин);
			ПараметрыФормы.Вставить("КассаККМ", СтрокаЧека.КассаККМ);
			ПараметрыФормы.Вставить("ЧекККМПродажа", Объект.ЧекККМПродажа);
			ПараметрыФормы.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
			ПараметрыФормы.Вставить("Телефон", Объект.Телефон);
			ПараметрыФормы.Вставить("Email", Объект.АдресЭП);
			ПараметрыФормы.Вставить("КлючСвязиТПЧеков", СтрокаЧека.ПолучитьИдентификатор());
			ПараметрыФормы.Вставить("ОплатаМобильныйПлатеж", ПараметрДействия.ОплатаМобильныйПлатеж);

			ПараметрДействия.Вставить("КлючСвязиТПЧеков", СтрокаЧека.ПолучитьИдентификатор());
			
			Если ПараметрДействия.ОплатаПлатежнойСистемой Тогда
				
				Если Не ЗначениеЗаполнено(СтрокаЧека.ЧекККМСсылка) Тогда
					
					СтруктураДокумента = СсылкаНовогоЧекаККМ(ТабличноеПолеЧеков.Индекс(СтрокаЧека));
					СтрокаЧека.ЧекККМСсылка = СтруктураДокумента.ЧекККМВОбработке;
					ЧекККМВОбработке = СтруктураДокумента.ЧекККМВОбработке;
					НовыйЧек = СтруктураДокумента.НовыйЧек;
				Иначе
					НовыйЧек = Ложь;
				КонецЕсли;
				
				ПараметрДействия.Вставить("НовыйЧек", НовыйЧек);
				
				Если Не НовыйЧек Тогда
					ПараметрыФормы.Вставить("Оплачивается",
						ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(СтрокаЧека.ЧекККМСсылка, "Оплачивается"));
				КонецЕсли;
				
				ПараметрыФормы.Вставить("ДокументОплаты", СтрокаЧека.ЧекККМСсылка);
				ПараметрыФормы.Вставить("Товары", Объект.Товары);
				ПараметрыФормы.Вставить("Кассир", Объект.Продавец);
				ПараметрыФормы.Вставить("НомерДокумента", НомерДокументаКассыККМ[СтрокаЧека.КассаККМ]);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТаблицаДокументовРасчета) И ТаблицаДокументовРасчета.Количество() > 1 Тогда
				
				СтруктураОтбора = Новый Структура("Организация", СтрокаЧека.Организация);
				ДокументыРасчета = ТаблицаДокументовРасчета.НайтиСтроки(СтруктураОтбора);
				Если ДокументыРасчета.Количество() > 0 Тогда
					Объект.ДокументРасчета = ДокументыРасчета[0].ДокументРасчета;
					ПараметрыФормы.Вставить("СуммаОстаткаДокументаРасчета", ДокументыРасчета[0].Сумма);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Объект.ДокументРасчета)
				И ТипЗнч(Объект.ДокументРасчета) = Тип("ДокументСсылка.РегистрацияБезналичнойОплаты") Тогда
				
				Если ПробитЧекНаБезналичныйПлатеж() Тогда
					ПараметрыФормы.Вставить("ЭтоЗачетАванса", Истина)
				Иначе
					ПараметрыФормы.Вставить("БанковскийПлатеж", Истина);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПараметрыФормы.ОплатаЭСНСПК Тогда
				ЗаполнитьТаблицуТоваровФСС(ПараметрыФормы, Объект.Товары);
			КонецЕсли;
			Если ПараметрДействия.НесколькоОрганизаций Тогда
				ПараметрыФормы.Вставить("АдресТаблицыПогашениеПодарочныхСертификатов",
					АдресВХранилище("ПогашениеПодарочныхСертификатов"));
				ПараметрДействия.Вставить("ОрганизацияДляДобавленияВТаблицы", СтрокаЧека.Организация);
				Элементы.ТабличноеПолеЧеков.ТекущаяСтрока = СтрокаЧека.ПолучитьИдентификатор();
				УстановитьОтборТоваров(СтрокаЧека);
			Иначе
				ПараметрДействия.Вставить("ОрганизацияДляДобавленияВТаблицы", Неопределено);
			КонецЕсли;
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
			
			Если НЕ ПараметрыФормы.ИтогПоОрганизации = 0 ИЛИ ПараметрыФормы.ОперацияСДенежнымиСредствами Тогда
				ОбработчикОповещения = Новый ОписаниеОповещения(

					"ОповещениеОткрытьФормуСложнойОплаты",
					ЭтотОбъект,
					ДополнительныеПараметры);
				ИмяФормыОплаты = "Обработка.РМКУправляемыйРежим.Форма." + ПараметрДействия.ИмяФормыОплаты;
				// &ЗамерПроизводительности
				ОценкаПроизводительностиРТКлиент.НачатьЗамер(
						Истина,
						ИмяФормыОплаты + ".Открытие");
				РезультатОткрытияФормы = ОткрытьФорму(
					ИмяФормыОплаты,
					ПараметрыФормы,
					УникальныйИдентификатор,
					,
					,
					,
					ОбработчикОповещения,
					РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
					
				Если РезультатОткрытияФормы = Неопределено
					ИЛИ РезультатОткрытияФормы = "ОтложитьЧек" Тогда
					
					ОбработатьОтказОтОплаты();
					
					Если РезультатОткрытияФормы = "ОтложитьЧек" Тогда
						ОповещениеОтложитьЧек(, Новый Структура("Оплачивается", Истина));
					КонецЕсли;
					ЧекККМВОбработке = Неопределено;
				Иначе
					ПараметрДействия.СуммаОстаткаДокументаРасчета =
						Макс(ПараметрДействия.СуммаОстаткаДокументаРасчета - Макс(ПараметрыФормы.ИтогПоОрганизации, 0), 0);
				КонецЕсли;
			Иначе
				ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
				ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка сложной оплаты'");
				ПараметрыИнформации.ТекстИнформации = НСтр("ru = 'Не задана сумма по чеку'");
				ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
				ОбработатьОтказОтОплаты();
			КонецЕсли;
			
			СтрокаЧека.СтрокаОбработана = Истина;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Если ВсеСтрокиОбработаныРанее Тогда
		ВыведеныЧеки = Ложь;
		ЗавершитьОплатуТоваров(ПараметрДействия.Печать);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтказОтОплаты()
	
	ЭтотОбъект.Доступность = Истина;
	ВыведеныЧеки = Ложь;
	ОбработатьОтменуОплаты();
	СнятьОтборТоваров();
	ОбновитьФормуНаКлиенте();
	ВывестиИнформациюНаДисплейПокупателя("ОтменаОплаты");
	ПодключитьОбработчикОжидания("Подключаемый_ДисплеяПокупателяОплата", 5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОплатуТоваров(Печать, ЗадатьВопросОПотереСуммыПоПодарочнымСертификатам = Истина)
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
	Отказ = Ложь;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		
		СтрокаОшибки = "";
		
		Если Отказ Тогда
			ОбработатьОтказОтОплаты();
			ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка оплаты возврата товара'");
			ПараметрыИнформации.ТекстИнформации = СтрокаОшибки;
			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ЗадатьВопросОПотереСуммыПоПодарочнымСертификатам Тогда
		ПроверкаВРазрезеОрганизаций = ТабличноеПолеЧеков.Количество() > 1;
		ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
		
		Если НЕ ПроверкаСогласияПокупателяСОстаткомПоПодарочнымСертификатам(
			ПроверкаВРазрезеОрганизаций, ПараметрыИнформации) Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Печать", Печать);
			
			ОбработчикОповещения = Новый ОписаниеОповещения(
				"ОповещениеОткрытьФормуВопросаОПотереСуммыПоПодарочнымСертификатам", ЭтотОбъект, ДополнительныеПараметры);
			
			ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(
				ПараметрыИнформации.ЗаголовокИнформации, ПараметрыИнформации.ТекстИнформации, "Да", ОбработчикОповещения);
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		ОбработатьОтказОтОплаты();
		Возврат;
	КонецЕсли;
	
	Если Объект.ОперацияСДенежнымиСредствами И СуммаВсего = 0  Тогда
		Сдача = 0;
	Иначе
		Сдача = Макс(Объект.Оплата.Итог("Сумма") - СуммаВсего, 0);
	КонецЕсли; 
	
	Если ИспользоватьПодключаемоеОборудование Тогда
	
		ДисплейПокупателяПараметры.Сдача = Формат(Сдача, "ЧДЦ=2;ЧГ=;ЧН=0.00");
		ДисплейПокупателяПараметры.СуммаВсего = Формат(СуммаВсего, "ЧДЦ=2;ЧГ=;ЧН=0.00");
		ДисплейПокупателяПараметры.Оплата = Формат(Объект.Оплата.Итог("Сумма"), "ЧДЦ=2;ЧГ=;ЧН=0.00");
		ВывестиИнформациюНаДисплейПокупателя("Оплата");
		
	КонецЕсли;
	
	НадписьСуммаСдачи = Формат(Сдача, "ЧЦ=15; ЧДЦ=2; ЧН=0.00");
	
	Если ТабличноеПолеЧеков.Количество() = 1 Тогда
		ВыведеныЧеки = Ложь;
		ВыведенаСдача = Истина;
		ОставлятьФлагТаблоСдачи = Истина;
		Элементы.СтраницыИнформации.ТекущаяСтраница = Элементы.СтраницаСдача;
	КонецЕсли;
	
	ПечатьПослеПробитияЧека = Печать;
	
	ПодключитьОбработчикОжидания("ЗавершитьОплатуТоваровПослеВыводаСдачи", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОплатуТоваровПослеВыводаСдачи()
	
	Попытка
		// &ЗамерПроизводительности
		Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(
			Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ЗавершениеОплатыИСозданиеЧековРМК");
		
		ОбновитьДанныеSMSEmail();
		НазначитьАвтоматическиеСкидкиКлиент(Истина);
		
		Отказ = Ложь;
		СнятьОтборТоваров();
		СоздатьЧеки(Отказ, ПечатьПослеПробитияЧека); 
				
		//ИнтеграцияИСМПТК
		Объект.КодыМаркировкиИСМПТК.Очистить();
		//Конец ИнтеграцияИСМПТК
		
		ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	Исключение
		Если НЕ ЭтотОбъект.Доступность Тогда
			ЭтотОбъект.Доступность = Истина;
		КонецЕсли;
		ЗаголовокИнформации = НСтр("ru = 'Не удалось создать чеки'"); 
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(
			ЗаголовокИнформации,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборТоваров(СтрокаТПЧеков)
	
	Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура(
		"Организация, ДоговорКонтрагента, ВидНалога",
		СтрокаТПЧеков.Организация, СтрокаТПЧеков.ДоговорКонтрагента, СтрокаТПЧеков.ВидНалога);
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтборТоваров()
	
	Элементы.Товары.ОтборСтрок = Неопределено;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьЧекККМПоВсемДанным(Организация, ПараметрыОперации, ПараметрыИнформации)
	
	ТекущаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	Если ЗначениеЗаполнено(ЧекККМВОбработке) Тогда
		ОбъектЧекККМ = ЧекККМВОбработке.ПолучитьОбъект();
		ОбъектЧекККМ.Дата = ТекущаяДата;
	Иначе
		ОбъектЧекККМ = Документы.ЧекККМ.СоздатьДокумент();
		ОбъектЧекККМ.Дата = НачалоДня(ТекущаяДата);
	КонецЕсли;
	
	ОбъектЧекККМ.РежимРМК = Истина;
	
	ЗаполнитьЧекПоВсемДанным(ОбъектЧекККМ);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Организация", Организация);
	
	СтрокиКассККМОрганизации = ТаблицаКассККМОрганизаций.НайтиСтроки(СтруктураПоиска);
	Если СтрокиКассККМОрганизации.Количество() > 0 Тогда
		ОбъектЧекККМ.КассаККМ = СтрокиКассККМОрганизации[0].КассаККМ;
	КонецЕсли;
	ОбъектЧекККМ.Организация = Организация;
	
	ОбъектЧекККМ.СуммаДокумента =
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаДокумента(ОбъектЧекККМ.Товары, Объект.ЦенаВключаетНДС);
	
	ПровестиЧекККМПередПробитием(ОбъектЧекККМ, ПараметрыОперации, ПараметрыИнформации);
	
	Если ЗначениеЗаполнено(ОбъектЧекККМ.Ссылка) Тогда
		ЗаполнитьПредварительныйЛог(ОбъектЧекККМ.Ссылка);
	КонецЕсли;
	
	Возврат ОбъектЧекККМ.Ссылка;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивКлючей(ИмяРеквизитаКлюча, СтруктураПоиска)
	
	Возврат РозничныеПродажиСервер.ПолучитьМассивКлючей(ИмяРеквизитаКлюча, СтруктураПоиска, Объект);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, ИмяТабличнойЧасти, ИмяРеквизитаКлюча, МассивКлючей, ВключаяПустойКлюч = Ложь, ОчищатьПриемник = Ложь)
	
	Если ОчищатьПриемник Тогда
		ОбъектЧекККМ[ИмяТабличнойЧасти].Очистить();
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
		
		Если МассивКлючей = Неопределено Тогда
			Если ВключаяПустойКлюч Тогда
				СтрокаДокумента = ОбъектЧекККМ[ИмяТабличнойЧасти].Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаТабличнойЧасти);
			КонецЕсли;
		Иначе
			Если МассивКлючей.Найти(СтрокаТабличнойЧасти[ИмяРеквизитаКлюча]) <> Неопределено
			 	ИЛИ (ВключаяПустойКлюч И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти[ИмяРеквизитаКлюча])) Тогда
				СтрокаДокумента = ОбъектЧекККМ[ИмяТабличнойЧасти].Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаТабличнойЧасти);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьПоНоменклатуреХарактеристике(ОбъектЧекККМ, ИмяТабличнойЧасти, ТаблицаНоменклатураХарактеристика, ОчищатьПриемник = Ложь)
	
	Если ОчищатьПриемник Тогда
		ОбъектЧекККМ[ИмяТабличнойЧасти].Очистить();
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
	
	Для каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТабличнойЧасти);
		
		Если Не ТаблицаНоменклатураХарактеристика.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			СтрокаДокумента = ОбъектЧекККМ[ИмяТабличнойЧасти].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаТабличнойЧасти);
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ЕстьОплатаПлатежнойКартой(ОбъектЧекККМ)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Оплата.ВидОплаты КАК Справочник.ВидыОплатЧекаККМ) КАК ВидОплаты,
	|	ВЫРАЗИТЬ(Оплата.Сумма КАК ЧИСЛО) КАК Сумма
	|ПОМЕСТИТЬ ТаблицаОплаты
	|ИЗ
	|	&Оплата КАК Оплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплаты.ВидОплаты,
	|	ТаблицаОплаты.Сумма
	|ИЗ
	|	ТаблицаОплаты КАК ТаблицаОплаты
	|ГДЕ
	|	ТаблицаОплаты.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)
	|	И ТаблицаОплаты.Сумма > 0";
	
	Запрос.УстановитьПараметр("Оплата", ОбъектЧекККМ.Оплата.Выгрузить());
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
КонецФункции

&НаСервере
Процедура ПроверитьДвиженияСерийныхНомеровДляПогашения(Отказ, ТекстОшибки = "", Дата = Неопределено)
	
	СтруктураДокумента = Новый Структура;
	СтруктураДокумента.Вставить("ДокументОбъект", Объект);
	СтруктураДокумента.Вставить("ЭтоДокумент", Ложь);
	СтруктураДокумента.Вставить("ЭтоНовый", Истина);
	СтруктураДокумента.Вставить("ТабличнаяЧасть", Объект.ПогашениеПодарочныхСертификатов.Выгрузить());
	СтруктураДокумента.Вставить("ТабличнаяЧасть_ПогашениеПодарочныхСертификатов", Объект.ПогашениеПодарочныхСертификатов.Выгрузить());
	
	МаркетинговыеАкцииСерверПривилегированный.ПроверитьДвиженияСерийныхНомеровДляПогашения(
		СтруктураДокумента,
		Отказ,
		ТекстОшибки,
		Дата);
КонецПроцедуры

&НаСервере
Процедура ПроверитьЧтоНетОплатыПодарочнымСертификатом(ИмяТабличнойЧасти, Отказ, ТекстОшибки = "", ОсобыйВыводСообщения = Ложь)
	
	МаркетинговыеАкцииСервер.ПроверитьЧтоНетОплатыПодарочнымСертификатом(
		Объект,
		ИмяТабличнойЧасти,
		Отказ,
		ТекстОшибки,
		ОсобыйВыводСообщения);
КонецПроцедуры

&НаСервере
Функция ЗаписатьЧекККМПоОрганизации(ИдентификаторСтрокиТПЧеков, ПерваяОрганизация, ПараметрыОперации, ПараметрыИнформации)
	
	СтрокаТПЧеков = ТабличноеПолеЧеков.НайтиПоИдентификатору(ИдентификаторСтрокиТПЧеков);
	
	ТекущаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	Если ЗначениеЗаполнено(СтрокаТПЧеков.ЧекККМСсылка) Тогда
		
		ОбъектЧекККМ = СтрокаТПЧеков.ЧекККМСсылка.ПолучитьОбъект();
		Если Не ТипЗнч(ОбъектЧекККМ) = Тип("ДокументОбъект.ЧекККМ") Тогда
			ОбъектЧекККМ = Документы.ЧекККМ.СоздатьДокумент();
			ОбъектЧекККМ.УстановитьСсылкуНового(СтрокаТПЧеков.ЧекККМСсылка);
		КонецЕсли;
		
		ОбъектЧекККМ.Дата = ТекущаяДата;
		
	Иначе
		
		ОбъектЧекККМ = Документы.ЧекККМ.СоздатьДокумент();
		ОбъектЧекККМ.Дата = НачалоДня(ТекущаяДата);
		
		Если ЗначениеЗаполнено(СтрокаТПЧеков.ЧекККМСсылка) Тогда
			ОбъектЧекККМ.УстановитьСсылкуНового(СтрокаТПЧеков.ЧекККМСсылка);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбъектЧекККМ.РежимРМК = Истина;
	
	ЗаполнитьЗначенияСвойств(ОбъектЧекККМ, Объект,,"Ссылка, Дата");
	
	ОбъектЧекККМ.СистемаНалогообложения = СтрокаТПЧеков.ВидНалога;
	ОбъектЧекККМ.Организация = СтрокаТПЧеков.Организация;
	
	Если ЗначениеЗаполнено(ТаблицаДокументовРасчета) И ТаблицаДокументовРасчета.Количество() > 1 Тогда
		СтруктураОтбора = Новый Структура("Организация", СтрокаТПЧеков.Организация);
		ДокументыРасчета = ТаблицаДокументовРасчета.НайтиСтроки(СтруктураОтбора);
		Если ЗначениеЗаполнено(ДокументыРасчета) Тогда
			ОбъектЧекККМ.ДокументРасчета       = ДокументыРасчета[0].ДокументРасчета;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектЧекККМ.ИдентификаторЧекаВОчереди) Тогда
		Идентификатор = Новый УникальныйИдентификатор;
		ОбъектЧекККМ.ИдентификаторЧекаВОчереди = XMLСтрока(Идентификатор);
	КонецЕсли;
	
	СтруктураПоискаКассыККМ = Новый Структура;
	СтруктураПоискаКассыККМ.Вставить("Организация", СтрокаТПЧеков.Организация);
	
	СтрокиКассККМОрганизации = ТаблицаКассККМОрганизаций.НайтиСтроки(СтруктураПоискаКассыККМ);
	Если СтрокиКассККМОрганизации.Количество() > 0  Тогда
		ОбъектЧекККМ.КассаККМ = СтрокиКассККМОрганизации[0].КассаККМ;
	КонецЕсли;
	
	СтруктураПоискаТоваров = Новый Структура();
	СтруктураПоискаТоваров.Вставить("Организация", СтрокаТПЧеков.Организация);
	СтруктураПоискаТоваров.Вставить("ВидНалога", СтрокаТПЧеков.ВидНалога);
	
	МассивКлючей = ПолучитьМассивКлючей("КлючСвязи", СтруктураПоискаТоваров);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "Товары", "КлючСвязи", МассивКлючей,, Истина);
	
	//ИнтеграцияИСМПТК_РозничноеВыбытие
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "КодыМаркировкиИСМПТК", "КлючСвязи", МассивКлючей,, Истина);
	//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
	
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "СкидкиНаценки", "КлючСвязи", МассивКлючей,, Истина);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "Подарки", "КлючСвязи", Неопределено, ПерваяОрганизация, Истина);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "СерииПодарков", "КлючСвязи", Неопределено, ПерваяОрганизация, Истина);
	ЗаполнитьТабличнуюЧастьЧека(
		ОбъектЧекККМ, "БонусныеБаллыКНачислению", "КлючСвязи", МассивКлючей, ПерваяОрганизация, Истина);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "АкцизныеМарки", "КлючСвязи", МассивКлючей,, Истина);
	ЗаполнитьТабличнуюЧастьЧека(
		ОбъектЧекККМ, "ПредъявленныеКодыОднократныхСкидок", "КлючСвязи", Неопределено, ПерваяОрганизация, Истина);
	
	МассивКлючей = ПолучитьМассивКлючей("КлючСвязиСерийныхНомеров", СтруктураПоискаТоваров);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "СерийныеНомера", "КлючСвязиСерийныхНомеров", МассивКлючей,, Истина);
	
	МассивКлючейСвязиТПЧеков = Новый Массив();
	МассивКлючейСвязиТПЧеков.Добавить(ИдентификаторСтрокиТПЧеков);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "Оплата", "КлючСвязиТПЧеков", МассивКлючейСвязиТПЧеков,, Истина);
	ЗаполнитьТабличнуюЧастьЧека(
		ОбъектЧекККМ, "ПогашениеПодарочныхСертификатов", "КлючСвязиТПЧеков", МассивКлючейСвязиТПЧеков,, Истина);
	
	ЗаполнитьТабличнуюЧастьПоНоменклатуреХарактеристике(ОбъектЧекККМ, "Серии", ОбъектЧекККМ.Товары, Истина);
	
	ЗаполнитьУправляемыеСкидки(ОбъектЧекККМ);
	
	ДобавитьОплатуБонусамиВЧек(ОбъектЧекККМ, Истина);
	
	ОбъектЧекККМ.СуммаДокумента =
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаДокумента(ОбъектЧекККМ.Товары, Объект.ЦенаВключаетНДС);
	
	ПровестиЧекККМПередПробитием(ОбъектЧекККМ, ПараметрыОперации, ПараметрыИнформации);
	
	Если ПерваяОрганизация И ЗначениеЗаполнено(ОбъектЧекККМ.Ссылка) Тогда
		ЗаполнитьПредварительныйЛог(ОбъектЧекККМ.Ссылка);
	КонецЕсли;
	
	СтрокаТПЧеков.ЧекККМСсылка = ОбъектЧекККМ.Ссылка;
	
	Возврат ОбъектЧекККМ.Ссылка;
КонецФункции

&НаСервере
Процедура ПровестиЧекККМПередПробитием(ОбъектЧекККМ, ПараметрыОперации, ПараметрыИнформации)
	
	Попытка
		ОбъектЧекККМ.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Доступность = Истина;
		ЗаголовокИнформации = НСтр("ru = 'Запись чека не выполнена.'");
		ПараметрыИнформации.ЗаголовокИнформации = ЗаголовокИнформации;
		ПараметрыИнформации.ТекстИнформации =
			НСтр("ru = 'Запись чека не выполнена по причине:'") + Символы.ПС + ОписаниеОшибки;
		ПараметрыОперации.Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	Попытка
		//ВызватьИсключение "Все равно тут будет конфликт блокировок при выполнении транзакции";
		ОбъектЧекККМ.ДополнительныеСвойства.Вставить("НеВыполнятьРасчетСтатуса");
		Если НачалоДня(ОбъектЧекККМ.Дата) = НачалоДня(ТекущаяДатаСеанса()) Тогда
			ОбъектЧекККМ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		Иначе
			ОбъектЧекККМ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.НеОперативный);
		КонецЕсли;
		ЛогированиеПоЧеку("ЧекПроведен", ОбъектЧекККМ.Ссылка);
	Исключение
		ОписаниеОшибкиПроведения = ОписаниеОшибки();
		Доступность = Истина;
		ЗаголовокИнформации = НСтр("ru = 'Проведение не выполнено.'");
		ПараметрыИнформации.ЗаголовокИнформации = ЗаголовокИнформации;
		ПараметрыИнформации.ТекстИнформации = НСтр("ru = 'Проведение чека не выполнено по причине:'") + Символы.ПС + ОписаниеОшибкиПроведения;
		ПараметрыОперации.Отказ = Истина;
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЧекККМ(ПараметрыЗаписиЧека, ПараметрыИнформации, ВывестиДополнительноеСообщение)
	
	ЧекККМСсылка = ПараметрыЗаписиЧека.ЧекККМСсылка;
	ПараметрыЗаполненияЧекаККМ = ПараметрыЗаписиЧека.ПараметрыЗаполненияЧекаККМ;
	МассивСсылокЧеков = ПараметрыЗаписиЧека.МассивСсылокЧеков;
	
	ОбъектЧекККМ = ЧекККМСсылка.ПолучитьОбъект();
	ОбъектЧекККМ.РежимРМК = Истина;
	
	ЗаполнитьЗначенияСвойств(ОбъектЧекККМ, ПараметрыЗаполненияЧекаККМ);
	
	СтатусПробитВККТ = ОбъектЧекККМ.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Пробитый;
	
	ТекстДопИнформации = "";
	Попытка
		ОбъектЧекККМ.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Доступность = Истина;
		ТекстДопИнформации = НСтр("ru = 'Запись чека не выполнена по причине:'") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
	МассивСсылокЧеков.Добавить(ЧекККМСсылка);
	
	СтатусЗаписанногоЧека = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЧекККМСсылка, "СтатусЧекаККМ");
	ЧекПробит = СтатусЗаписанногоЧека = Перечисления.СтатусыЧековККМ.Пробитый;
	
	Если ПараметрыЗаписиЧека.ПараметрыЗаполненияЧекаККМ.ЧекПробит Тогда
		РезультатОбработкиНакоплений =
			СкидкиНаценкиВызовСервера.РезультатОбработкиНакопленийВДисконтномСервере(ЧекККМСсылка);
		
		Если РезультатОбработкиНакоплений.Свойство("СообщениеПользователю") Тогда
			ВывестиДополнительноеСообщение = Истина;
			ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка обновления накоплений в дисконтном сервере.'");
			ПараметрыИнформации.ТекстИнформации =
				НСтр("ru = 'При обновлении накоплений в дисконтном сервере возникли ошибки (см. журнал регистрации).
				|Обратитесь к администратору'");
		КонецЕсли;
	Иначе
		
		ВывестиДополнительноеСообщение = Истина;
		ЕстьКарта = ЕстьОплатаПлатежнойКартой(ОбъектЧекККМ);
		Если ПараметрыЗаписиЧека.ПараметрыЗаполненияЧекаККМ.ЧекПробит Тогда
			// Чек был пробит на ККТ, но не записан в системе
			Если ЕстьКарта Тогда
				ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Чек пробит, но не обновлен в базе. Была оплата платежной картой'");
			Иначе
				ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Чек пробит, но не обновлен в базе'");
			КонецЕсли;
			ПараметрыИнформации.ТекстИнформации =
				СокрЛП(НСтр("ru = 'Чеку нужно установить отметку о пробитии при закрытии смены.'") + Символы.ПС + ПараметрыЗаписиЧека.ТекстДопИнформации);
		Иначе
			Если ЕстьКарта Тогда
				ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Чек не пробит. Была оплата платежной картой'");
			Иначе
				ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Чек не пробит.'");
			КонецЕсли;
			ПараметрыИнформации.ТекстИнформации =
				СокрЛП(НСтр("ru = 'Чек нужно пробить позднее или аннулировать при закрытии смены.'") + Символы.ПС + ПараметрыЗаписиЧека.ТекстДопИнформации);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПараметрыОперацииАннулированияЧекаККМ()
	
	// Подготовка таблицы общих параметров.
	ТипЧека = ?(Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат,
		Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств,
		Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств);

	ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОперацииАннулированияЧека();
	ПараметрыОперации.ТипРасчета = ТипЧека;
	
	Возврат ПараметрыОперации;
КонецФункции

// Процедура печати чека на фискальном регистраторе.
//
&НаКлиенте
Процедура ПробитьЧекККМ(ОповещениеПриЗавершении, ЧекККМСсылка, КассаККМ, НеПечататьБумажныйЧек = Ложь)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("СтатусЧекаККМ", ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.ПустаяСсылка"));
	ПараметрыЗаполнения.Вставить("ЧекПробит", Ложь);
	
	ПараметрыКассыККМ         = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройстваФР = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	Отказ = Ложь;
	
	Если НЕ ИспользоватьПодключаемоеОборудование ИЛИ ИспользоватьКассуККМБезПодключенияОборудования Тогда
		ПогаситьОднократныеСкидки();
		Если НомерДокументаКассыККМ[КассаККМ] <> Неопределено Тогда
			НомерЧекаККМ  = НомерДокументаКассыККМ[КассаККМ];
		Иначе
			НомерЧекаККМ  = ПорядковыйНомерПродажи;
		КонецЕсли;
		ПараметрыЗаполнения.Вставить("СтатусЧекаККМ", ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробитый"));
		ПараметрыЗаполнения.Вставить("Дата", ОбщегоНазначенияКлиент.ДатаСеанса());
		ПараметрыЗаполнения.Вставить("НомерЧекаККМ" , ПорядковыйНомерПродажи);
		ПараметрыЗаполнения.ЧекПробит = Истина;
		
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ПараметрыЗаполнения);
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторУстройстваФР = Неопределено Тогда
		Отказ = Истина;
		ЗаголовокИнформации = НСтр("ru = 'Не выбрано устройство для печати чеков.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации);
		ПробитьЧекОчередиЗавершение(ПараметрыЗаполнения, Отказ);
		Возврат;
		
	Иначе
	// Готовим данные
		Контекст = Новый Структура;
		Контекст.Вставить("ЧекККМСсылка", ЧекККМСсылка);
		Контекст.Вставить("КассаККМ", КассаККМ);
		Контекст.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
		Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		
		ЕстьАлкогольнаяПродукцияЕГАИС = Ложь;
		ТранспортныйМодуль = Неопределено;
		ДанныеЕГАИСДостаточны = Истина;
		ТекстСообщенияЕГАИС = "";
		
		НомерЧека = НомерДокументаКассыККМ[КассаККМ] + 1;
		ОбщиеПараметры  = ПодготовитьДанныеДляПробитияЧека(
			ЧекККМСсылка,
			НомерЧека,
			ТекстСообщенияЕГАИС);
		
		Контекст.Вставить("ЕстьАлкогольнаяПродукцияЕГАИС", ЕстьАлкогольнаяПродукцияЕГАИС);
		
		Если НЕ ДанныеЕГАИСДостаточны Тогда
			ЗаголовокИнформации = НСтр("ru = 'Не достаточно данных для передачи в ЕГАИС.'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщенияЕГАИС);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ПараметрыЗаполнения);
			Возврат;
		КонецЕсли;
			
		Если ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		
			Контекст.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
			
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ПробитьЧекККМЗавершение", ЭтотОбъект, Контекст);
		ПослеОткрытияЧека = Новый ОписаниеОповещения("ПечатьЧека_ПослеОткрытияЧека", ЭтотОбъект, Контекст);
		ПослеОшибкиПечатиЧека = Новый ОписаниеОповещения("ПечатьЧека_ПослеОшибкиПечатиЧека", ЭтотОбъект, Контекст);
		
		МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
			Оповещение,
			УникальныйИдентификатор,
			ОбщиеПараметры,
			ИдентификаторУстройстваФР,
			,
			ПослеОткрытияЧека,
			ПослеОшибкиПечатиЧека); 
			
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекККМЗавершение(РезультатВыполнения, ПараметрыОперации) Экспорт
	
	ПараметрыЗаполнения = ПараметрыОперации.ПараметрыЗаполнения;
	
	Если РезультатВыполнения.Результат Тогда
		
		// Установить полученное значение номера чека реквизиту документа.
		ПараметрыЗаполнения.Вставить("СтатусЧекаККМ", ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробитый"));
		ПараметрыЗаполнения.Вставить("Дата", ОбщегоНазначенияКлиент.ДатаСеанса());
		ПараметрыЗаполнения.Вставить("НомерСменыККМ", РезультатВыполнения.ВыходныеПараметры[0]);
		ПараметрыЗаполнения.Вставить("НомерЧекаККМ" , РезультатВыполнения.ВыходныеПараметры[1]);
		
		Если НЕ ЗначениеЗаполнено(ПараметрыЗаполнения.НомерЧекаККМ) Тогда
			Если НомерДокументаКассыККМ[ПараметрыОперации.КассаККМ] <> Неопределено Тогда
				НомерЧекаККМ  = НомерДокументаКассыККМ[ПараметрыОперации.КассаККМ];
			Иначе
				НомерЧекаККМ  = ПорядковыйНомерПродажи;
			КонецЕсли;
			
			ПараметрыЗаполнения.Вставить("НомерЧекаККМ", НомерЧекаККМ);
		КонецЕсли;
		
	Иначе
		ЗаголовокИнформации = НСтр("ru = 'При печати чека произошла ошибка.'");
		ТекстСообщения = НСтр("ru = 'Чек не напечатан на устройстве для печати чеков.
		                            |Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
		
	КонецЕсли;
	
	ПараметрыЗаполнения.ЧекПробит = РезультатВыполнения.Результат;
	
	ВыполнитьОбработкуОповещения(ПараметрыОперации.ОповещениеПриЗавершении, ПараметрыЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ШапкаЧека = ПараметрыВыполнения.ВходныеПараметры;
	
	НомерСмены = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерСмены);
	Если НомерСмены = 0 Тогда
		НомерСмены = 1;
	КонецЕсли;
	
	НомерЧека = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерЧека);
	Если НомерЧека = 0 Тогда
		НомерЧека = 1;
	КонецЕсли;
		
	ШапкаЧека.НомерСмены = НомерСмены;
	ШапкаЧека.НомерЧека = НомерЧека;
	
	Если ПараметрыВыполнения.Свойство("ЗаводскойНомерФН") И ЗначениеЗаполнено(ПараметрыВыполнения.ЗаводскойНомерФН) Тогда
		ШапкаЧека.СерийныйНомер = ПараметрыВыполнения.ЗаводскойНомерФН;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЕстьАлкогольнаяПродукцияЕГАИС Тогда
	
	Иначе
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	Если НЕ Объект.ОперацияСДенежнымиСредствами Тогда
		Попытка
			ДеактивироватьСкидкиПоИдентификаторуЧека(ПараметрыВыполнения.ВходныеПараметры.ДокументОснование);
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ЧекККМСсылка")
		И ЗначениеЗаполнено(ДополнительныеПараметры.ЧекККМСсылка) Тогда
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЕстьАлкогольнаяПродукцияЕГАИС Тогда
	
	КонецЕсли;
	
	Если ДанныеОтправленыВБанк Тогда 
		ОбработатьОшибочноеПробитиеЧека();
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПроверитьКодМаркировкиСредствамиККТ(ПараметрДействия, ТабличноеПолеЧеков)
	
	ТаблицаЧеков = ТабличноеПолеЧеков;
	МассивСсылокЧековДляПроверкиМарок = ЗаполнитьДанныеДляПроверкиЧековНаСервере(ТаблицаЧеков);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОплатитьТоварыОткрытиеФормОплатПродожение", ЭтотОбъект, ПараметрДействия);
	РозничныеПродажиКлиент.ПроверитьКодМаркировкиСредствамиККТ(МассивСсылокЧековДляПроверкиМарок, ЭтотОбъект, НСтр("ru = 'Пробить чек'"), ОповещениеОЗавершении);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДанныеДляПроверкиЧековНаСервере(ТабличноеПолеЧеков)
	
	МассивЧековДляПроверкиМарок = Новый Массив;
	Для Каждого Чек Из ТабличноеПолеЧеков Цикл
		
		Если НЕ ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции() ИЛИ Объект.ОперацияСДенежнымиСредствами ИЛИ ЭтоВозвратПродукцииИСМПБезМарки Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЧекаДляПроверкиМарок = Новый Структура;
		ДанныеЧекаДляПроверкиМарок.Вставить("СсылкаЧека");
		ДанныеЧекаДляПроверкиМарок.Вставить("ПозицииЧека");
		ДанныеЧекаДляПроверкиМарок.Вставить("КассаККМ");
		
		Если Не ЗначениеЗаполнено(Чек.ЧекККМСсылка) Тогда
			НовыйУникальныйИдентификаторДокументаЧек = Новый УникальныйИдентификатор();
			ЧекСсылка = Документы.ЧекККМ.ПолучитьСсылку(НовыйУникальныйИдентификаторДокументаЧек);
			ОбъектЧекККМ = Документы.ЧекККМ.СоздатьДокумент();
			ОбъектЧекККМ.УстановитьСсылкуНового(ЧекСсылка);
		Иначе
			ОбъектЧекККМ = Чек.ЧекККМСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОбъектЧекККМ, Объект,,"Ссылка, Дата");
		ОбъектЧекККМ.СистемаНалогообложения = Чек.ВидНалога;
		ОбъектЧекККМ.Организация = Чек.Организация;
		
		ДанныеЧекаДляПроверкиМарок.СсылкаЧека = ЧекСсылка;
		
		СтруктураПоискаКассыККМ = Новый Структура;
		СтруктураПоискаКассыККМ.Вставить("Организация", Чек.Организация);
		
		СтрокиКассККМОрганизации = ТаблицаКассККМОрганизаций.НайтиСтроки(СтруктураПоискаКассыККМ);
		Если СтрокиКассККМОрганизации.Количество() > 0  Тогда
			ДанныеЧекаДляПроверкиМарок.КассаККМ = СтрокиКассККМОрганизации[0].КассаККМ;
			ОбъектЧекККМ.КассаККМ = СтрокиКассККМОрганизации[0].КассаККМ;
		КонецЕсли;
		
		СтруктураПоискаТоваров = Новый Структура();
		СтруктураПоискаТоваров.Вставить("Организация", Чек.Организация);
		СтруктураПоискаТоваров.Вставить("ВидНалога", Чек.ВидНалога);
		
		МассивКлючей = ПолучитьМассивКлючей("КлючСвязи", СтруктураПоискаТоваров);
		ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "Товары", "КлючСвязи", МассивКлючей,, Истина);
		ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "АкцизныеМарки", "КлючСвязи", МассивКлючей,, Истина);
		
		// Распределим штрихкоды упаковок для ИСМП.
		Товары = ОбъектЧекККМ.Товары.Выгрузить();
		
		ШтрихкодыУпаковок = Новый Массив;
		Для Каждого СтрокаАкцизнойМарки Из ОбъектЧекККМ.АкцизныеМарки Цикл
			НовыйЭлемент = ШтрихкодированиеИС.НовыйЭлементКоллекцииУпаковокДляРаспределенияПоТоварам();
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтрокаАкцизнойМарки);
			НовыйЭлемент.ШтрихкодУпаковки = СтрокаАкцизнойМарки.АкцизнаяМарка;
			
			ШтрихкодыУпаковок.Добавить(НовыйЭлемент);
		КонецЦикла;
		
		ДанныеЧекаДляПроверкиМарок.ПозицииЧека =
			ОбщегоНазначения.ТаблицаЗначенийВМассив(
				ПродажиСервер.РаспределитьШтрихкодыПоТаблицеТоваров(ОбъектЧекККМ, ШтрихкодыУпаковок, Товары));
		
		МассивЧековДляПроверкиМарок.Добавить(ДанныеЧекаДляПроверкиМарок);
		
	КонецЦикла;
	
	Возврат МассивЧековДляПроверкиМарок;
	
КонецФункции

&НаКлиенте
Процедура НачатьАннулироватьЧекККМ(ОповещениеПриЗавершении, КассаККМ, ПараметрыЗаполнения)
	
	ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройстваФР = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	Если НЕ ИспользоватьПодключаемоеОборудование ИЛИ ИспользоватьКассуККМБезПодключенияОборудования Тогда
		
		ПараметрыЗаполнения.Вставить("НомерЧекаККМ", ПорядковыйНомерПродажи);
		ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		
		РезультатОперации = Новый Структура;
		РезультатОперации.Вставить("ЧекАннулирован", Истина);
		РезультатОперации.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
		
	Иначе
		
		ВходныеПараметры  = ВходныеПараметрыДляАннулированияЧекаККМ(КассаККМ);
		ПараметрыОперацииАннулирования = ПараметрыОперацииАннулированияЧекаККМ();
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("ЧекАннулирован", Ложь);
		ПараметрыОперации.Вставить("КассаККМ", КассаККМ);
		ПараметрыОперации.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
		ПараметрыОперации.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
		Оповещение = Новый ОписаниеОповещения("НачатьАннулироватьЧекККМЗавершение", ЭтотОбъект, ПараметрыОперации);
		МенеджерОборудованияКлиент.НачатьАннулированиеЧекаНаФискальномУстройстве(
			Оповещение,
			УникальныйИдентификатор,
			ПараметрыОперацииАннулирования,
			ИдентификаторУстройстваФР);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НачатьАннулироватьЧекККМЗавершение(РезультатВыполнения, ПараметрыОперации) Экспорт
	
	Если РезультатВыполнения.Результат Тогда  
		НомерСменыККМ = РезультатВыполнения.ВыходныеПараметры[0];
		НомерЧекаККМ  = РезультатВыполнения.ВыходныеПараметры[1]; 
		// Установить полученное значение номера чека реквизиту документа.
		ПараметрыОперации.ПараметрыЗаполнения.Вставить("НомерСменыККМ", НомерСменыККМ);
		ПараметрыОперации.ПараметрыЗаполнения.Вставить("НомерЧекаККМ",  НомерЧекаККМ);
		Если Не ЗначениеЗаполнено(ПараметрыОперации.ПараметрыЗаполнения.НомерЧекаККМ) Тогда
			ПараметрыОперации.ПараметрыЗаполнения.Вставить("НомерЧекаККМ", ПорядковыйНомерПродажи);
		КонецЕсли;
	Иначе
		ЗаголовокИнформации = НСтр("ru = 'При аннулировании чека произошла ошибка.'");
		ТекстСообщения = НСтр("ru = 'Чек не аннулирован на устройстве для печати чеков.
			|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
	КонецЕсли;
	
	ПараметрыОперации.ЧекАннулирован = РезультатВыполнения.Результат;
	ВыполнитьОбработкуОповещения(ПараметрыОперации.ОповещениеПриЗавершении, ПараметрыОперации);
	
	ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПробитьЧекККМСложныйСлучайЗавершение(РезультатОперации, ПараметрыОперации) Экспорт; 
	
	Если РезультатОперации <> Неопределено Тогда
		
		Если НЕ РезультатОперации.ЧекПробит Тогда
			ПараметрыОперации.Отказ = Истина;
		КонецЕсли;
		
		Если ПараметрыОперации.Отказ Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ЧекККМСсылка", ПараметрыОперации.ЧекККМСсылка);
			СтрокиЧека = ТабличноеПолеЧеков.НайтиСтроки(СтруктураПоиска);
			Если СтрокиЧека.Количество() > 0 Тогда
				Для Каждого СтрокаТаблицы Из СтрокиЧека Цикл
					СтрокаТаблицы.Пробит = Ложь;
				КонецЦикла;
			КонецЕсли;
			УдалитьПробитыеЧекиИзНабораИОтменитьНеПробитые(Истина);
			ОбработатьОшибочноеПробитиеЧека();
			Возврат;
		Иначе
			ЧекККМВОбработке = ПредопределенноеЗначение("Документ.ЧекККМ.ПустаяСсылка");
		КонецЕсли;
		
		ЛогированиеПоЧеку("ЧекПробит", ПараметрыОперации.ЧекККМСсылка);
		ЛогированиеЧастичнойОплаты(ПараметрыОперации.ЧекККМСсылка);
		
		ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
		ВывестиДополнительноеСообщение = Ложь;
		СтатусПробитВККТ = Ложь;
		
		ПараметрыЗаписиЧека = Новый Структура();
		ПараметрыЗаписиЧека.Вставить("ЧекККМСсылка", ПараметрыОперации.ЧекККМСсылка);
		ПараметрыЗаписиЧека.Вставить("ПараметрыЗаполненияЧекаККМ", РезультатОперации);
		ПараметрыЗаписиЧека.Вставить("МассивСсылокЧеков", ПараметрыОперации.МассивСсылокЧеков);
		
		ЗаписатьЧекККМ(ПараметрыЗаписиЧека, ПараметрыИнформации, ВывестиДополнительноеСообщение);
		
		Если ВывестиДополнительноеСообщение Тогда
			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ЧекККМСсылка", ПараметрыОперации.ЧекККМСсылка);
		СтрокиЧека = ТабличноеПолеЧеков.НайтиСтроки(СтруктураПоиска);
		Если СтрокиЧека.Количество() > 0 Тогда
			Для Каждого СтрокаТаблицы Из СтрокиЧека Цикл
				СтрокаТаблицы.Пробит = СтатусПробитВККТ;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыОперации.ТекущийЧек < ПараметрыОперации.КоличествоЧеков Тогда
		
		СтрокаТабличногоПоляЧеков = ТабличноеПолеЧеков.Получить(ПараметрыОперации.ТекущийЧек);
				
		ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
		
		ЧекККМСсылка = ЗаписатьЧекККМПоОрганизации(
			СтрокаТабличногоПоляЧеков.ПолучитьИдентификатор(),
			ПараметрыОперации.ПерваяОрганизация,
			ПараметрыОперации,
			ПараметрыИнформации);
		
		Если ПараметрыОперации.Отказ Тогда
			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
			Если ДанныеОтправленыВБанк Тогда 
				ОбработатьОшибочноеПробитиеЧека();
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		ПараметрыОперации.ТекущийЧек = ПараметрыОперации.ТекущийЧек + 1;
		ПараметрыОперации.ПерваяОрганизация = Ложь;
		ПараметрыОперации.ЧекККМСсылка = ЧекККМСсылка;
		
		ПараметрыЗаполненияЧекаККМ = Новый Структура;
		
		Оповещение = Новый ОписаниеОповещения("ПробитьЧекККМСложныйСлучайЗавершение", ЭтотОбъект, ПараметрыОперации);
		ПробитьЧекККМ(Оповещение, ЧекККМСсылка, СтрокаТабличногоПоляЧеков.КассаККМ, ПараметрыЗаполненияЧекаККМ);
		
	Иначе
		Если НЕ ЭтотОбъект.Доступность Тогда
			ЭтотОбъект.Доступность = Истина;
		КонецЕсли;
		СоздатьЧекиЗавершение(
			ПараметрыОперации.Отказ,
			ПараметрыОперации.ПечатьПакетаДокументовВозврат,
			ПараметрыОперации.МассивСсылокЧеков,
			ПараметрыОперации.Печать);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЧеки(Отказ, Печать = Ложь)

	Перем Ответ;
	
	Ответ = "";
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		ПроверитьЧтоНетОплатыПодарочнымСертификатом("Оплата", Отказ, Ответ, Истина);
		Если Отказ Тогда
			ОбработатьОтказОтОплаты();
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Ошибка возврат товара'"), Ответ);
			Возврат;
		КонецЕсли;
	Иначе
		ПроверитьДвиженияСерийныхНомеровДляПогашения(Отказ, Ответ, ОбщегоНазначенияКлиент.ДатаСеанса());
		Если Отказ Тогда
			ОбработатьОтказОтОплаты();
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(
				НСтр("ru = 'Ошибки погашения подарочных сертификатов'"), Ответ);
			Если ДанныеОтправленыВБанк Тогда 
				ОбработатьОшибочноеПробитиеЧека();
			КонецЕсли;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПечатьПакетаДокументовВозврат = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат")
	И ИспользоватьНастройкуРМК И НаборПравИНастроек.ПриВозвратеРаспечатыватьПакетДокументов);
	
	ПечатьПакетаДокументовВозврат = Ложь;
	
	МассивСсылокЧеков = Новый Массив;
	
	Если ТабличноеПолеЧеков.Количество() > 1 Тогда
		
		ПараметрыОперации = Новый Структура();
		ПараметрыОперации.Вставить("ПечатьПакетаДокументовВозврат", ПечатьПакетаДокументовВозврат);
		ПараметрыОперации.Вставить("Отказ", Отказ);
		ПараметрыОперации.Вставить("Печать", Печать);
		ПараметрыОперации.Вставить("МассивСсылокЧеков", МассивСсылокЧеков); 
		ПараметрыОперации.Вставить("ПерваяОрганизация", Истина); 
		ПараметрыОперации.Вставить("ЧекККМСсылка", Неопределено);
		ПараметрыОперации.Вставить("ТабличноеПолеЧеков", ТабличноеПолеЧеков); 
		ПараметрыОперации.Вставить("КоличествоЧеков", ТабличноеПолеЧеков.Количество()); 
		ПараметрыОперации.Вставить("ТекущийЧек", 0); 
		
		ЭтотОбъект.Доступность = Ложь;
		ПробитьЧекККМСложныйСлучайЗавершение(Неопределено, ПараметрыОперации);
		
	Иначе
		// Простой случай
		ПараметрыОперации = Новый Структура();
		ПараметрыОперации.Вставить("ПечатьПакетаДокументовВозврат", ПечатьПакетаДокументовВозврат);
		ПараметрыОперации.Вставить("Отказ", Отказ);
		ПараметрыОперации.Вставить("Печать", Печать);
		ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
		
		ЧекККМСсылка = ЗаписатьЧекККМПоОрганизации(ТабличноеПолеЧеков[0].ПолучитьИдентификатор(), Истина, ПараметрыОперации,ПараметрыИнформации);
		ТабличноеПолеЧеков[0].ЧекККМСсылка = ЧекККМСсылка;
		Если ПараметрыОперации.Отказ Тогда
			Отказ = ПараметрыОперации.Отказ;
			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
			Если ДанныеОтправленыВБанк Тогда 
				ОбработатьОшибочноеПробитиеЧека();
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		СтатусЧекаККМ = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.ПустаяСсылка");
		
		ПараметрыЗаполненияЧекаККМ = Новый Структура;
		
		ПараметрыОперации.Вставить("ЧекККМСсылка", ЧекККМСсылка);
		ПараметрыОперации.Вставить("МассивСсылокЧеков", МассивСсылокЧеков); 
		
		ЭтотОбъект.Доступность = Ложь;
		Оповещение = Новый ОписаниеОповещения("ПробитьЧекККМПростойСлучайЗавершение", ЭтотОбъект, ПараметрыОперации);
		ПробитьЧекККМ(Оповещение, ЧекККМСсылка, ТабличноеПолеЧеков[0].КассаККМ, ПараметрыЗаполненияЧекаККМ);
		
	КонецЕсли;
	
	Отказ = ПараметрыОперации.Отказ;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПробитыеЧекиИзНабораИОтменитьНеПробитые(СоздаватьНовыйНабор)
	
	Если Объект.Товары.Количество() = 0 Тогда
		Если СоздаватьНовыйНабор Тогда
			СоздатьНовыйНаборКлиент();
		КонецЕсли;
	Иначе
		МассивОшибок = Новый Массив;
		Если ТабличноеПолеЧеков.Количество() > 0 Тогда
			УдалитьПробитыеЧекиИзНабораИОтменитьНеПробитыеСервер(МассивОшибок);
			СнятьОтборТоваров();
			Если Объект.Товары.Количество() = 0 Тогда
				Если СоздаватьНовыйНабор Тогда
					СоздатьНовыйНаборКлиент();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПробитыеЧекиИзНабораИОтменитьНеПробитыеСервер(МассивОшибок)
	
	УстановитьПривилегированныйРежим(Истина);
	ПерваяОрганизация = Истина;
	ФормироватьАдресОплаты = Ложь;
	МассивСтрокКУдалению = Новый Массив;
	Для Каждого СтрокаПоля Из ТабличноеПолеЧеков Цикл
		
		Если ЗначениеЗаполнено(СтрокаПоля.ЧекККМСсылка) Тогда
			УдалятьИзНабора = Ложь;
			Если СтрокаПоля.Пробит Тогда
				УдалятьИзНабора = Истина;
			Иначе
				ФискальнаяОперация = МенеджерОборудованияВызовСервера.ДанныеФискальнойОперации(
					СтрокаПоля.ЧекККМСсылка,, Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧек);
				Если ФискальнаяОперация <> Неопределено Тогда
					УдалятьИзНабора = Истина;
				КонецЕсли;
			КонецЕсли;
			Если НЕ УдалятьИзНабора Тогда
				
				Попытка
					СтруктураЧека = Новый Структура("СтатусЧекаККМ, Проведен");
					РеквизитыЧека = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаПоля.ЧекККМСсылка, СтруктураЧека);
					Если РеквизитыЧека.Проведен = Истина Тогда
						Если РеквизитыЧека.СтатусЧекаККМ <> Перечисления.СтатусыЧековККМ.Пробитый
							И РеквизитыЧека.СтатусЧекаККМ <> Перечисления.СтатусыЧековККМ.Архивный Тогда
							ЧекККМОбъект = СтрокаПоля.ЧекККМСсылка.ПолучитьОбъект();
							ЧекККМОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
						Иначе
							УдалятьИзНабора = Истина;
						КонецЕсли;
					КонецЕсли;
				Исключение
					ОписаниеОшибки = ОписаниеОшибки();
					УдалятьИзНабора = Истина;
					СтруктураОшибки = Новый Структура("ЗаголовокИнформации, ТекстИнформации");
					СтруктураОшибки.ЗаголовокИнформации = НСтр("ru = 'Отмена проведения непробитого чека не выполнена.'");
					СтруктураОшибки.ТекстИнформации = НСтр("ru = 'Чек перенесен в список чеков. Отмена проведения не выполнена по причине:'") 
						+ Символы.ПС 
						+ ОписаниеОшибки;
					МассивОшибок.Добавить(СтруктураОшибки);
				КонецПопытки;
			КонецЕсли;
			
			Если УдалятьИзНабора Тогда
				ФормироватьАдресОплаты = Истина;
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Организация", СтрокаПоля.Организация);
				
				СтрокиКассККМОрганизации = ТаблицаКассККМОрганизаций.НайтиСтроки(СтруктураПоиска);
				
				Если СтрокиКассККМОрганизации.Количество() > 0  Тогда
					ТипОборудования = СтрокиКассККМОрганизации[0].ТипОборудования;
				Иначе
					ТипОборудования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПоля.КассаККМ, "ТипОборудования");
				КонецЕсли;
				Если ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ 
					ИЛИ НЕ ЗначениеЗаполнено(ТипОборудования) Тогда
					СтруктураПоиска.Вставить("ДоговорКонтрагента", СтрокаПоля.ДоговорКонтрагента);
					СтруктураПоиска.Вставить("ВидНалога", СтрокаПоля.ВидНалога);
				КонецЕсли;
				
				МассивКлючей = ПолучитьМассивКлючей("КлючСвязи", СтруктураПоиска);
				МассивКлючейСерийных = ПолучитьМассивКлючей("КлючСвязиСерийныхНомеров", СтруктураПоиска);
				МассивКлючейСвязиТПЧеков = Новый Массив;
				МассивКлючейСвязиТПЧеков.Добавить(СтрокаПоля.ПолучитьИдентификатор());
				
				УдалитьСтрокиИзТабличнойЧастиПоКлючам("Товары", "КлючСвязи", МассивКлючей);
				УдалитьСтрокиИзТабличнойЧастиПоКлючам("СкидкиНаценки", "КлючСвязи", МассивКлючей);
				УдалитьСтрокиИзТабличнойЧастиПоКлючам("Подарки", "КлючСвязи", Неопределено, ПерваяОрганизация);
				УдалитьСтрокиИзТабличнойЧастиПоКлючам("СерииПодарков", "КлючСвязи", Неопределено, ПерваяОрганизация);
				УдалитьСтрокиИзТабличнойЧастиПоКлючам("БонусныеБаллыКНачислению", "КлючСвязи", МассивКлючей, ПерваяОрганизация);
				УдалитьСтрокиИзТабличнойЧастиПоКлючам("АкцизныеМарки", "КлючСвязи", МассивКлючей);
				УдалитьСтрокиИзТабличнойЧастиПоКлючам("СерийныеНомера", "КлючСвязиСерийныхНомеров", МассивКлючейСерийных);
				УдалитьСтрокиИзТабличнойЧастиПоКлючам("Оплата", "КлючСвязиТПЧеков", МассивКлючейСвязиТПЧеков);
				УдалитьСтрокиИзТабличнойЧастиПоКлючам("ПогашениеПодарочныхСертификатов", "КлючСвязиТПЧеков", МассивКлючейСвязиТПЧеков);
				
				// удаляются серии по организации
				МассивУдаляемыхСтрок = Новый Массив;
				Для Каждого СтрокаСерии Из Объект.Серии Цикл
					Если СтрокаПоля.Организация = СтрокаСерии.Организация Тогда
						МассивУдаляемыхСтрок.Добавить(СтрокаСерии);
					КонецЕсли;
				КонецЦикла;
				Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
					Объект.Серии.Удалить(УдаляемаяСтрока);
				КонецЦикла;
				
				// удаляются бонусы по организации
				МассивУдаляемыхСтрок = Новый Массив;
				Для Каждого СтрокаОплатыБонусами Из Объект.ОплатаБонуснымиБаллами Цикл
					Если СтрокаПоля.Организация = СтрокаОплатыБонусами.Организация Тогда
						МассивУдаляемыхСтрок.Добавить(СтрокаОплатыБонусами);
					КонецЕсли;
				КонецЦикла;
				Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
					Объект.ОплатаБонуснымиБаллами.Удалить(УдаляемаяСтрока);
				КонецЦикла;
				
				Объект.УправляемыеСкидки.Очистить();
				МассивСтрокКУдалению.Добавить(СтрокаПоля);
				СтрокаПоля.ЧекККМСсылка = Документы.ЧекККМ.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		ПерваяОрганизация = Ложь;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
		ТабличноеПолеЧеков.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Если ДанныеОтправленыВБанк И ФормироватьАдресОплаты Тогда
		Если Объект.Оплата.Количество() > 0 Тогда 
			ПередаватьТаблицуОплат = Истина;
		Иначе
			ПередаватьТаблицуОплат = Ложь;
			ОтменитьОплатуПК = Ложь;
			ДанныеОтправленыВБанк = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиИзТабличнойЧастиПоКлючам(ИмяТабличнойЧасти, ИмяРеквизитаКлюча, МассивКлючей = Неопределено, ВключаяПустойКлюч = Ложь)
	
	МассивУдаляемыхСтрок = Новый Массив;
	Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
		Если МассивКлючей = Неопределено Тогда
			Если ВключаяПустойКлюч Тогда
				Если СтрокаТабличнойЧасти[ИмяРеквизитаКлюча] = 0 Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаТабличнойЧасти);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли МассивКлючей.Найти(СтрокаТабличнойЧасти[ИмяРеквизитаКлюча]) <> Неопределено
			ИЛИ (ВключаяПустойКлюч И СтрокаТабличнойЧасти[ИмяРеквизитаКлюча] = 0) Тогда
			МассивУдаляемыхСтрок.Добавить(СтрокаТабличнойЧасти);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
		Объект[ИмяТабличнойЧасти].Удалить(УдаляемаяСтрока);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекККМПростойСлучайЗавершение(РезультатОперации, ПараметрыОперации) Экспорт; 
	
	ЭтотОбъект.Доступность = Истина;
		
	Если НЕ РезультатОперации.ЧекПробит Тогда
		ПараметрыОперации.Отказ = Истина;
	КонецЕсли;
		
	Если ПараметрыОперации.Отказ Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ЧекККМСсылка", ПараметрыОперации.ЧекККМСсылка);
		СтрокиЧека = ТабличноеПолеЧеков.НайтиСтроки(СтруктураПоиска);
		Если СтрокиЧека.Количество() > 0 Тогда
			Для Каждого СтрокаТаблицы Из СтрокиЧека Цикл
				СтрокаТаблицы.Пробит = Ложь;
			КонецЦикла;
		КонецЕсли;
		УдалитьПробитыеЧекиИзНабораИОтменитьНеПробитые(Истина);
		ОбработатьОшибочноеПробитиеЧека();
		Возврат;
	Иначе
		ЧекККМВОбработке = ПредопределенноеЗначение("Документ.ЧекККМ.ПустаяСсылка");
	КонецЕсли;
	
	ЛогированиеПоЧеку("ЧекПробит", ПараметрыОперации.ЧекККМСсылка);
	ЛогированиеЧастичнойОплаты(ПараметрыОперации.ЧекККМСсылка);
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
	ВывестиДополнительноеСообщение = Ложь;
	СтатусПробитВККТ = Ложь;
	
	ПараметрыЗаписиЧека = Новый Структура();
	ПараметрыЗаписиЧека.Вставить("ЧекККМСсылка", ПараметрыОперации.ЧекККМСсылка);
	ПараметрыЗаписиЧека.Вставить("ПараметрыЗаполненияЧекаККМ", РезультатОперации);
	ПараметрыЗаписиЧека.Вставить("МассивСсылокЧеков", ПараметрыОперации.МассивСсылокЧеков);
	
	ЗаписатьЧекККМ(ПараметрыЗаписиЧека, ПараметрыИнформации, ВывестиДополнительноеСообщение);
	
	ПараметрыОперации.МассивСсылокЧеков = ПараметрыЗаписиЧека.МассивСсылокЧеков;
	
	Если ВывестиДополнительноеСообщение Тогда
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ЧекККМСсылка", ПараметрыОперации.ЧекККМСсылка);
	СтрокиЧека = ТабличноеПолеЧеков.НайтиСтроки(СтруктураПоиска);
	Если СтрокиЧека.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из СтрокиЧека Цикл
			СтрокаТаблицы.Пробит = СтатусПробитВККТ;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ЭтотОбъект.Доступность Тогда
		ЭтотОбъект.Доступность = Истина;
	КонецЕсли;
	
	СоздатьЧекиЗавершение(
		ПараметрыОперации.Отказ,
		ПараметрыОперации.ПечатьПакетаДокументовВозврат,
		ПараметрыОперации.МассивСсылокЧеков,
		ПараметрыОперации.Печать);
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЧекиЗавершение(Отказ, ПечатьПакетаДокументовВозврат, МассивСсылокЧеков, Печать = Ложь)
	
	Если НЕ Отказ Тогда 
		ОбработатьУспешноеПробитиеЧека();
		Если ПечатьПакетаДокументовВозврат Тогда
			ИмяМакета = "КМ3";
			ПолноеИмяОбъектаМетаданных = "Документ.ЧекККМ";
			
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(ПолноеИмяОбъектаМетаданных,
					ИмяМакета,
					МассивСсылокЧеков,
					ЭтотОбъект,
					Неопределено);
		КонецЕсли;
		
		Если Печать Тогда
			НапечататьЧекиККМ(МассивСсылокЧеков)
		КонецЕсли;
		
		Для Каждого СсылкаНаЧек Из МассивСсылокЧеков Цикл
			КассаККМСсылка = КассаККМизЧекаСервер(СсылкаНаЧек);
			НомерДокументаКассыККМ[КассаККМСсылка] = НомерДокументаКассыККМ[КассаККМСсылка] + 1;
			
			ШтрихкодированиеИСМПВызовСервера.ОчиститьРезультатыПроверкиСредствамиККТ(СсылкаНаЧек);
			
			Если ИспользоватьОплатуСертификатамиНСПК Тогда
				ПередатьДанныеФискальногоЧекаНСПК(СсылкаНаЧек);
			КонецЕсли;
			
		КонецЦикла;
		ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		
		Если ЭтоРабочееМестоOffLine И ПередаватьДанныеПослеКаждогоПробитогоЧека Тогда
			ВыполнитьОбменДаннымиПоРабочемуМестуНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
	ОплатаНаличными = Ложь;
	ОплатаЯндексКассой = Ложь;
	МассивСсылокЧеков.Очистить();
	
	ЗавершитьОплатуТоваровПослеСозданияЧеков(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбменДаннымиПоРабочемуМестуНаСервере()
	
	ОбменДаннымиРТ.ВыполнитьОбменДаннымиПоРабочемуМесту(УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОплатуТоваровПослеСозданияЧеков(Отказ)
	
	ПечатьПослеПробитияЧека = Ложь;
	
	СнятьОтборТоваров();
	
	Если Отказ Тогда
		
		ВыведенаСдача = Ложь;
		Элементы.СтраницыИнформации.ТекущаяСтраница = Элементы.СтраницаИнформации;
		
	Иначе
		ПогаситьОднократныеСкидки();
		ВыведенаСдача = Истина;
		Элементы.СтраницыИнформации.ТекущаяСтраница = Элементы.СтраницаСдача;
		
		СоздатьНовыйНаборКлиент();
		
		ДисконтнаяКартаДляЗамены = Объект.ДисконтнаяКарта;
		
		ПодключитьОбработчикОжидания("Подключаемый_ДисплеяПокупателяПриПростое", 10, Истина);
		
	КонецЕсли;
	ОставлятьФлагТаблоСдачи = Ложь;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАдресТаблицыПечатныхФорм(МассивСсылокЧеков, ЗаявлениеБезПроведения = Ложь, ПечатнаяФорма = Неопределено)
	
	РозничныеПродажиСервер.ЗаполнитьАдресТаблицыПечатныхФорм(МассивСсылокЧеков,
		АдресТаблицыПечатныхФорм,
		Объект.ОперацияСДенежнымиСредствами,
		УникальныйИдентификатор,
		ЗаявлениеБезПроведения,
		ПечатнаяФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекиККМ(МассивСсылокЧеков, ЗаявлениеБезПроведения = Ложь)
Перем ПечатнаяФорма;
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Истина, "Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораПечатныхФорм.Открытие");
	
	ЗаполнитьАдресТаблицыПечатныхФорм(МассивСсылокЧеков, ЗаявлениеБезПроведения, ПечатнаяФорма);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресТаблицыПечатныхФорм", АдресТаблицыПечатныхФорм);
	
	МассивДляПечати = Новый Массив(Новый ФиксированныйМассив(МассивСсылокЧеков));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МассивСсылокЧеков", МассивДляпечати);
	
	Если ЗначениеЗаполнено(ПечатнаяФорма) Тогда
		ОповещениеОткрытьФормуВыбораПечатныхФорм(ПечатнаяФорма, ДополнительныеПараметры)
	Иначе
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ОповещениеОткрытьФормуВыбораПечатныхФорм", ЭтотОбъект, ДополнительныеПараметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораПечатныхФорм",
			ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	КонецЕсли;
	
	Печать = Ложь;
	
КонецПроцедуры

&НаСервере
Функция СтруктураКомандыПечати(Идентификатор)
	
	Возврат РозничныеПродажиСервер.СтруктураКомандыПечати(Идентификатор, АдресТаблицыПечатныхФорм);
	
КонецФункции

&НаКлиенте
Процедура НапечататьОтчетБезГашения(КассаККМ)

	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		Возврат;
	КонецЕсли;
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.НапечататьОтчетБезГашения");
	
	ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
	ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка печати отчета без гашения'");
	
	Если ИспользоватьПодключаемоеОборудование И НЕ ИспользоватьКассуККМБезПодключенияОборудования Тогда
		
		ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
		ФИОКассира = ОбщегоНазначенияРТВызовСервера.ФИОФизЛицаПользователяСУчетомИзмененныхПрав();
		Если Не ФИОКассира = "" Тогда
			ПараметрыОперации.Кассир = ФИОКассира;
		Иначе
			ПараметрыОперации.Кассир = НСтр("ru='Администратор'");
		КонецЕсли;
		
		ПараметрыВыполнения = Новый Структура();
		ПараметрыВыполнения.Вставить("КассаККМ", КассаККМ);
		ПараметрыВыполнения.Вставить("Организация", Объект.Организация);
		
		ЭтотОбъект.Доступность = Ложь;
		Оповещение = Новый ОписаниеОповещения("НапечататьОтчетБезГашенияЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		МенеджерОборудованияКлиент.НачатьФормированиеОтчетаБезГашения(
			Оповещение, УникальныйИдентификатор, ПараметрыОперации, ИдентификаторУстройства);
			
	КонецЕсли;
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
КонецПроцедуры

&НаКлиенте
Процедура НапечататьОтчетБезГашенияЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	Если НЕ РезультатВыполнения.Результат Тогда 
		
		ТекстСообщения = НСтр("ru = 'При снятии отчета на фискальном регистраторе произошла ошибка.
			|%1
			|Отчет на фискальном регистраторе не сформирован.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, РезультатВыполнения.ОписаниеОшибки);
		
		ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
		ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка печати отчета без гашения'");
		ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
		
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВозможностьОперацииВыемкиДенежныхСредств(ПараметрыВыполнения, ПараметрыИнформации)
	
	Возврат РозничныеПродажиСервер.ВозможностьОперацииВыемкиДенежныхСредств(ПараметрыВыполнения,
		ПараметрыИнформации,
		ИспользоватьАгентскиеПлатежиИРазделениеВыручки);
	
КонецФункции

&НаСервере
Функция СсылкаНовогоЧекаККМ(ПорядковыйНомерЧека = 0)
	
	Если ПорядковыйНомерЧека = 0
		И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		СтруктураДанныхДокумента = Новый Структура();
		СтруктураДанныхДокумента.Вставить("ЧекККМВОбработке", Объект.Ссылка);
		СтруктураДанныхДокумента.Вставить("НовыйЧек", 		  Ложь);
		
		Возврат СтруктураДанныхДокумента;
		
	КонецЕсли;
	
	Возврат ИнтеграцияСПлатежнымиСистемамиРТСервер.ПолучитьСсылкуНовогоЧекаККМ();
	
КонецФункции

&НаСервере
Функция ОтложенныйЧекЯндексКассы(ИдентификаторСтрокиТПЧеков)
	
	ЧекПроведен = Ложь;
	Дата = ТекущаяДатаСеанса();
	ПерваяОрганизация = Истина;
	СтрокаТПЧеков = ТабличноеПолеЧеков.НайтиПоИдентификатору(ИдентификаторСтрокиТПЧеков);
	
	Если ЗначениеЗаполнено(ЧекККМВОбработке) Тогда
		ОбъектЧекККМ = ЧекККМВОбработке.ПолучитьОбъект();
		ОбъектЧекККМ.Дата = Дата;
		ЧекПроведен = ЧекККМВОбработке.Проведен;
	Иначе
		НовыйУникальныйИдентификаторДокументаЧек = Новый УникальныйИдентификатор();
		ЧекСсылка = Документы.ЧекККМ.ПолучитьСсылку(НовыйУникальныйИдентификаторДокументаЧек);
		ОбъектЧекККМ = Документы.ЧекККМ.СоздатьДокумент();
		ОбъектЧекККМ.УстановитьСсылкуНового(ЧекСсылка);
		ОбъектЧекККМ.Дата = Дата;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ОбъектЧекККМ, Объект,,"Ссылка, Дата");
	
	ОбъектЧекККМ.СистемаНалогообложения = СтрокаТПЧеков.ВидНалога;
	ОбъектЧекККМ.Организация = СтрокаТПЧеков.Организация;
	
	Если ЗначениеЗаполнено(ТаблицаДокументовРасчета) И ТаблицаДокументовРасчета.Количество() > 1 Тогда
		СтруктураОтбора = Новый Структура("Организация", СтрокаТПЧеков.Организация);
		ДокументыРасчета = ТаблицаДокументовРасчета.НайтиСтроки(СтруктураОтбора);
		Если ЗначениеЗаполнено(ДокументыРасчета) Тогда
			ОбъектЧекККМ.ДокументРасчета       = ДокументыРасчета[0].ДокументРасчета;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектЧекККМ.ИдентификаторЧекаВОчереди) Тогда
		Идентификатор = Новый УникальныйИдентификатор;
		ОбъектЧекККМ.ИдентификаторЧекаВОчереди = XMLСтрока(Идентификатор);
	КонецЕсли;
	
	СтруктураПоискаКассыККМ = Новый Структура;
	СтруктураПоискаКассыККМ.Вставить("Организация", СтрокаТПЧеков.Организация);
	
	СтрокиКассККМОрганизации = ТаблицаКассККМОрганизаций.НайтиСтроки(СтруктураПоискаКассыККМ);
	Если СтрокиКассККМОрганизации.Количество() > 0  Тогда
		ОбъектЧекККМ.КассаККМ = СтрокиКассККМОрганизации[0].КассаККМ;
	КонецЕсли;
	
	СтруктураПоискаТоваров = Новый Структура();
	СтруктураПоискаТоваров.Вставить("Организация", СтрокаТПЧеков.Организация);
	СтруктураПоискаТоваров.Вставить("ВидНалога", СтрокаТПЧеков.ВидНалога);
	
	МассивКлючей = ПолучитьМассивКлючей("КлючСвязи", СтруктураПоискаТоваров);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "Товары", "КлючСвязи", МассивКлючей,, Истина);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "СкидкиНаценки", "КлючСвязи", МассивКлючей,, Истина);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "Подарки", "КлючСвязи", Неопределено, ПерваяОрганизация, Истина);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "СерииПодарков", "КлючСвязи", Неопределено, ПерваяОрганизация, Истина);
	ЗаполнитьТабличнуюЧастьЧека(
		ОбъектЧекККМ, "БонусныеБаллыКНачислению", "КлючСвязи", МассивКлючей, ПерваяОрганизация, Истина);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "АкцизныеМарки", "КлючСвязи", МассивКлючей,, Истина);
	ЗаполнитьТабличнуюЧастьЧека(
		ОбъектЧекККМ, "ПредъявленныеКодыОднократныхСкидок", "КлючСвязи", Неопределено, ПерваяОрганизация, Истина);
	
	МассивКлючей = ПолучитьМассивКлючей("КлючСвязиСерийныхНомеров", СтруктураПоискаТоваров);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "СерийныеНомера", "КлючСвязиСерийныхНомеров", МассивКлючей,, Истина);
	
	МассивКлючейСвязиТПЧеков = Новый Массив();
	МассивКлючейСвязиТПЧеков.Добавить(ИдентификаторСтрокиТПЧеков);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "Оплата", "КлючСвязиТПЧеков", МассивКлючейСвязиТПЧеков,, Истина);
	ЗаполнитьТабличнуюЧастьЧека(
		ОбъектЧекККМ, "ПогашениеПодарочныхСертификатов", "КлючСвязиТПЧеков", МассивКлючейСвязиТПЧеков,, Истина);
	
	ЗаполнитьТабличнуюЧастьПоНоменклатуреХарактеристике(ОбъектЧекККМ, "Серии", ОбъектЧекККМ.Товары, Истина);
	
	ЗаполнитьУправляемыеСкидки(ОбъектЧекККМ);
	
	ДобавитьОплатуБонусамиВЧек(ОбъектЧекККМ, Истина);
	
	ОбъектЧекККМ.СуммаДокумента =
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаДокумента(ОбъектЧекККМ.Товары, Объект.ЦенаВключаетНДС);
		
	Если ЧекПроведен Тогда
		ОбъектЧекККМ.Записать(РежимЗаписиДокумента.ОтменаПроведения)
	Иначе
		ОбъектЧекККМ.Записать();
	КонецЕсли;
	
	СтрокаТПЧеков.ЧекККМСсылка = ОбъектЧекККМ.Ссылка;
	
	Возврат ОбъектЧекККМ.Ссылка;
	
КонецФункции

&НаСервере
Процедура ОтменитьОплатуВПлатежнойСистемеПоЧеку()
	
	Для Каждого СтрокаОплаты ИЗ объект.Оплата Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаОплаты.ИнтеграцияСПлатежнымиСистемами) Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкаОпераций = ИнтеграцияСПлатежнымиСистемамиРТВызовСервера.НастройкиТорговойТочки(
			СтрокаОплаты.ИнтеграцияСПлатежнымиСистемами);
		
		Если НастройкаОпераций <> Неопределено
			И НастройкаОпераций.ОтменаОплаты 
			И Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
			
			СтрокаТПЧеков = ТабличноеПолеЧеков.НайтиПоИдентификатору(СтрокаОплаты.КлючСвязиТПЧеков);
			
			ПараметрыПроцедуры = Новый Структура;
			ПараметрыПроцедуры.Вставить("Интеграция", 		СтрокаОплаты.ИнтеграцияСПлатежнымиСистемами);
			ПараметрыПроцедуры.Вставить("ДокументОплаты", 	СтрокаТПЧеков.Ссылка);
		
			ИнтеграцияСПлатежнымиСистемамиРТСервер.ОтменитьОплату(ПараметрыПроцедуры);

		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьТоварыПослеВыбораККМПродолжение(Знач Результат = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(ТекущаяКассаККМ) Тогда
			ЗаголовокИнформации = НСтр("ru = 'Оплата'");
			ТекстИнформации = НСтр("ru = 'Не выбрана касса ККМ для проведения операции.'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		КонецЕсли;
	
		Если НЕ ЭтотОбъект.Доступность Тогда
			ЭтотОбъект.Доступность = Истина;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ИзменитьКассуПоУмолчанию = Ложь;
	Если НЕ ТекущаяКассаККМ = Результат.Касса Тогда
		ТекущаяКассаККМ = Результат.Касса;
		ИзменитьКассуПоУмолчанию = Истина;
	КонецЕсли;
	
	ИзменитьОрганизацию = Ложь;
	
	Если НЕ Объект.Организация = Результат.Организация Тогда
		Объект.Организация = Результат.Организация;
		
		ПараметрыПоискаСклада = Новый Структура;
		ПараметрыПоискаСклада.Вставить("Организация", Объект.Организация);
		ПараметрыПоискаСклада.Вставить("РабочееМесто", Объект.РабочееМесто);
		ПараметрыПоискаСклада.Вставить("Магазин", Объект.Магазин);
		
		СкладПродажиПоУмолчанию = СкладПродажиПоУмолчанию(ПараметрыПоискаСклада);
		
		ИзменитьКассуПоУмолчанию = Истина;
		ИзменитьОрганизацию = Истина;
	КонецЕсли;
	
	Если ИзменитьКассуПоУмолчанию Тогда
		ККМОрганизации = ТаблицаКассККМОрганизаций.НайтиСтроки(Новый Структура("Организация", Объект.Организация));
		Для каждого СтрокаККМ Из ККМОрганизации Цикл
			СтрокаККМ.ПоУмолчанию = СтрокаККМ.КассаККМ = ТекущаяКассаККМ;
		КонецЦикла;
	КонецЕсли;
	
	Если ВестиУчетАлкогольнойПродукции И ИзменитьОрганизацию Тогда
		НайденнаяОрганизацияЕГАИС = ИнтеграцияЕГАИСРТВызовСервера.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(
			Объект.Организация, Объект.Магазин);
		Если ОрганизацияЕГАИС <> НайденнаяОрганизацияЕГАИС Тогда
			ОрганизацияЕГАИС = НайденнаяОрганизацияЕГАИС;
		КонецЕсли;
	КонецЕсли;
	
	Если ВестиУчетМаркируемойПродукцииИСМП И ИзменитьОрганизацию Тогда
		Если НЕ ОрганизацииИСМП.НайтиПоЗначению(Объект.Организация) = Неопределено Тогда
			ОрганизацияИСМП = Объект.Организация;
		Иначе
			ОрганизацияИСМП = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ИзменитьОрганизацию Тогда
		ИзменитьОрганизациюВТоварахНаСервере();
		ПриИзмененииЭлементаГосИС();
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокНоменклатуры = Новый СписокЗначений;
	Если РозничныеПродажиКлиент.ЭтоВозвратПродукцииИСМПБезУказанияМарок(Объект, СписокНоменклатуры) Тогда
		ПодтвердитьВозвратПродукцииИСМПБезМарок(
			ДополнительныеПараметры,
			СписокНоменклатуры);
	Иначе
		ПродолжитьОплатуТоваров(ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СкладПродажиПоУмолчанию(ПараметрыПоиска)
	
	Возврат РозничныеПродажиСервер.СкладПродажиПоУмолчанию(ПараметрыПоиска);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОрганизацияПоУмолчанию(ТаблицаКассККМОрганизаций)
	
	ОрганизацияПоУмолчанию = Неопределено;
	
	Если ТаблицаКассККМОрганизаций.Количество() = 1 Тогда 
		ОрганизацияПоУмолчанию = ТаблицаКассККМОрганизаций[0].Организация;
	Иначе
		ИспользуемыеОрганизации = Новый Массив();
		Для каждого СтрокаКасс Из ТаблицаКассККМОрганизаций Цикл
			Если ИспользуемыеОрганизации.Найти(СтрокаКасс.Организация) = Неопределено Тогда
				ИспользуемыеОрганизации.Добавить(СтрокаКасс.Организация);
			КонецЕсли;
		КонецЦикла;
		
		Если ИспользуемыеОрганизации.Количество() = 1 Тогда
			ОрганизацияПоУмолчанию = ИспользуемыеОрганизации[0];
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОрганизацияПоУмолчанию;
КонецФункции

&НаСервере
Процедура ИзменитьОрганизациюВТоварахНаСервере()
	
	СтруктураПараметровЗаполнения =
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияПоОбъекту(Объект);
	
	ОрганизацияПоУмолчанию = ОрганизацияПоУмолчанию(ТаблицаКассККМОрганизаций);
	Если НЕ ОрганизацияПоУмолчанию = Неопределено Тогда
		СтруктураПараметровЗаполнения.Вставить("ОрганизацияПоУмолчанию", ОрганизацияПоУмолчанию);
		СтруктураПараметровЗаполнения.Вставить("Организация", ОрганизацияПоУмолчанию);
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизациюПродажи", СтруктураПараметровЗаполнения);
	СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", СтруктураПараметровЗаполнения);
	СтруктураДействий.Вставить("ЗаполнитьВидНалога",
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияВидаНалога(
		Объект,
		СтруктураПараметровЗаполнения));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровЗаполнения);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
		
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
	Для каждого СтрокаТовар Из Объект.Товары Цикл
		СтруктураПараметровЗаполнения.Вставить("Номенклатура", СтрокаТовар.Номенклатура);
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(СтрокаТовар, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверкаСогласияПокупателяСОстаткомПоПодарочнымСертификатам(ПроверкаВРазрезеОрганизаций, ПараметрыИнформации)
	
	Возврат РозничныеПродажиСервер.ПроверкаСогласияПокупателяСОстаткомПоПодарочнымСертификатам(
		ПроверкаВРазрезеОрганизаций,
		ПараметрыИнформации,
		Объект);
	
КонецФункции

&НаСервере
Процедура ЗаписатьЧекККМБезПодключенияОборудования(ПараметрыОперации, ТекстДопИнформации)
	
	ЛогированиеПоЧеку("ЧекПробит", ПараметрыОперации.ЧекККМСсылка);
	ЛогированиеЧастичнойОплаты(ПараметрыОперации.ЧекККМСсылка);
	
	ОбъектЧекККМ = ПараметрыОперации.ЧекККМСсылка.ПолучитьОбъект();
	ОбъектЧекККМ.РежимРМК = Истина;
	
	ЗаполнитьЗначенияСвойств(ОбъектЧекККМ, ПараметрыОперации);
	
	Попытка
		ОбъектЧекККМ.ДополнительныеСвойства.Вставить("НеВыполнятьРасчетСтатуса");
		ОбъектЧекККМ.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Доступность = Истина;
		ТекстДопИнформации = НСтр("ru = 'Запись чека не выполнена по причине:'") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекОчередиУспешноеЗавершение(РезультатОперации)
	
	ЛогированиеПоЧеку("ЧекПробит", РезультатОперации.ЧекККМСсылка);
	ЛогированиеЧастичнойОплаты(РезультатОперации.ЧекККМСсылка);
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
	ВывестиДополнительноеСообщение = Ложь;
	
	ПараметрыЗаписиЧека = Новый Структура();
	ПараметрыЗаписиЧека.Вставить("ЧекККМСсылка", РезультатОперации.ЧекККМСсылка);
	ПараметрыЗаписиЧека.Вставить("ПараметрыЗаполненияЧекаККМ", РезультатОперации);
	
	ЗаписатьЧекККМ(ПараметрыЗаписиЧека, ПараметрыИнформации, ВывестиДополнительноеСообщение);
	
	Если ВывестиДополнительноеСообщение Тогда
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ЧекККМСсылка", РезультатОперации.ЧекККМСсылка);
	СтрокиЧека = ТабличноеПолеЧеков.НайтиСтроки(СтруктураПоиска);
	Если СтрокиЧека.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из СтрокиЧека Цикл
			СтрокаТаблицы.Пробит = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекОчередиЗавершение(МассивСсылокЧеков, Отказ)
	
	Если НЕ ЭтотОбъект.Доступность Тогда
		ЭтотОбъект.Доступность = Истина;
	КонецЕсли;
	
	СоздатьЧекиЗавершение(
		Отказ,
		ПечатьПакетаДокументовВозврат,
		МассивСсылокЧеков,
		Печать);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыИнтеграции(Интеграция)
	
	Если ТипЗнч(Интеграция) = Тип("СправочникСсылка.НастройкиПодключенияКСистемеБыстрыхПлатежей") Тогда
		Возврат ИнтеграцияСПлатежнымиСистемамиРТСервер.ПараметрыИнтеграции(Интеграция);
	ИначеЕсли ТипЗнч(Интеграция) = Тип("СправочникСсылка.НастройкиОнлайнОплат") Тогда
		Возврат ОнлайнОплатыРТ.ПараметрыИнтеграции(Интеграция);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Ручные_скидки

&НаКлиенте
Функция ВозможностьРаботыСРучнымиСкидкамиВСтроке()
	
	Если ОшибкаРасчетаСкидокПоЗаказуПокупателя() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОшибкаРасчетаСкидокПоДокументуРасчета() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОшибкаРасчетаСкидокПриВозврате() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат НЕ СтрокаТабличнойЧасти.ТипНоменклатуры =
		ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат");
	
КонецФункции

&НаКлиенте
Функция ВозможностьРаботыСРучнымиСкидкамиВЧеке()
	
	Если ОшибкаРасчетаСкидокПоЗаказуПокупателя() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОшибкаРасчетаСкидокПоДокументуРасчета() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОшибкаРасчетаСкидокПриВозврате() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ТипНоменклатуры",
		ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
	
	СтрокиПодарочныхСертификатов = Объект.Товары.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиПодарочныхСертификатов.Количество() = Объект.Товары.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура НазначитьРучнуюСкидку(СуммаСкидкиНаценки)
	
	РозничныеПродажиСервер.НазначитьРучнуюСкидку(СуммаСкидкиНаценки, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьРучныеСкидки()
	
	СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина);
	ОбработкаТабличнойЧастиТоварыСервер.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ЛогированиеВводаРучнойСкидки(НСтр("ru = 'Отмена ручной скидки в чеке'"), 0, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПроцентРучнойСкидкиНаценкиВСтроке(ЭтоНаценка = Ложь)

	Если ВозможностьРаботыСРучнымиСкидкамиВСтроке() Тогда
		
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		
		ЗаголовокФормы = ?(ЭтоНаценка,
			НСтр("ru = 'Ручная наценка процентом в строке'"),
			НСтр("ru = 'Ручная скидка процентом в строке'"));
		
		Знак = ?(ЭтоНаценка, -1, 1);
		ЧислоВвода = Знак * СтрокаТабличнойЧасти.ПроцентРучнойСкидки;
		ЧислоВвода = ?(ЧислоВвода > 0, ЧислоВвода, 0);
		
		ПараметрыВводаЧисла = Новый Структура;
		ПараметрыВводаЧисла.Вставить("ЧислоВвода", ЧислоВвода);
		Если ЭтоНаценка Тогда
			ПараметрыВводаЧисла.Вставить("Отрицательное", Истина);
		Иначе
			ПараметрыВводаЧисла.Вставить("МаксимальноеЗначение", 100);
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторСтроки", СтрокаТабличнойЧасти.ПолучитьИдентификатор());
		ДополнительныеПараметры.Вставить("Знак",                Знак);
		ДополнительныеПараметры.Вставить("ЗаголовокФормы",      ЗаголовокФормы);
		
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ОповещениеОткрытьФормуВводаЧислаИзменитьПроцентРучнойСкидкиНаценкиВСтроке", ЭтотОбъект, ДополнительныеПараметры);
		
		ПолучитьИнтерактивноЧисло(
			ЗаголовокФормы,
			ОбработчикОповещения,
			ПараметрыВводаЧисла);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСуммуРучнойСкидкиНаценкиВСтроке(ЭтоНаценка = Ложь)

	Если ВозможностьРаботыСРучнымиСкидкамиВСтроке() Тогда
		
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		
		ЗаголовокФормы = ?(ЭтоНаценка,
			НСтр("ru = 'Ручная наценка суммой в строке'"),
			НСтр("ru = 'Ручная скидка суммой в строке'"));
		
		Знак = ?(ЭтоНаценка, -1, 1);
		ЧислоВвода = Знак * СтрокаТабличнойЧасти.СуммаРучнойСкидки;
		ЧислоВвода = ?(ЧислоВвода > 0, ЧислоВвода, 0);
		
		ПараметрыВводаЧисла = Новый Структура;
		ПараметрыВводаЧисла.Вставить("ЧислоВвода", ЧислоВвода);
		Если ЭтоНаценка Тогда
			ПараметрыВводаЧисла.Вставить("Отрицательное", Истина);
		Иначе
			ПараметрыВводаЧисла.Вставить("МаксимальноеЗначение", СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаРучнойСкидки);
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторСтроки", СтрокаТабличнойЧасти.ПолучитьИдентификатор());
		ДополнительныеПараметры.Вставить("Знак", Знак);
		ДополнительныеПараметры.Вставить("ЗаголовокФормы", ЗаголовокФормы);
		
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ОповещениеОткрытьФормуВводаЧислаИзменитьСуммуРучнойСкидкиНаценкиВСтроке", ЭтотОбъект, ДополнительныеПараметры);
		
		ПолучитьИнтерактивноЧисло(
			ЗаголовокФормы,
			ОбработчикОповещения,
			ПараметрыВводаЧисла);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСуммуРучнойСкидкиНаценкиВЧеке(ЭтоНаценка = Ложь)

	Если ВозможностьРаботыСРучнымиСкидкамиВЧеке() Тогда
		
		ЗаголовокФормы = ?(ЭтоНаценка, 
			НСтр("ru = 'Ручная наценка суммой в чеке'"),
			НСтр("ru = 'Ручная скидка суммой в чеке'"));
		
		СуммаБезАвтоматическойСкидки =
			ОбработкаТабличнойЧастиТоварыКлиент.СуммаДокументаБезПодарочныхСертификатов(Объект) +
				Объект.Товары.Итог("СуммаРучнойСкидки");
		
		СуммаРучнойСкидкиНаценки = Объект.Товары.Итог("СуммаРучнойСкидки");
		
		Знак = ?(ЭтоНаценка, -1, 1);
		ЧислоВвода = Знак * СуммаРучнойСкидкиНаценки;
		ЧислоВвода = ?(ЧислоВвода > 0, ЧислоВвода, 0);
		
		ПараметрыВводаЧисла = Новый Структура;
		ПараметрыВводаЧисла.Вставить("ЧислоВвода", ЧислоВвода);
		Если ЭтоНаценка Тогда
			ПараметрыВводаЧисла.Вставить("Отрицательное", Истина);
		Иначе
			ПараметрыВводаЧисла.Вставить("МаксимальноеЗначение", СуммаБезАвтоматическойСкидки);
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Знак", Знак);
		ДополнительныеПараметры.Вставить("ЗаголовокФормы", ЗаголовокФормы);
		
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ОповещениеОткрытьФормуВводаЧислаИзменитьСуммуРучнойСкидкиНаценкиВЧеке", ЭтотОбъект, ДополнительныеПараметры);
		
		ПолучитьИнтерактивноЧисло(
			ЗаголовокФормы,
			ОбработчикОповещения,
			ПараметрыВводаЧисла);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПроцентРучнойСкидкиНаценкиВЧеке(ЭтоНаценка = Ложь)

	Если ВозможностьРаботыСРучнымиСкидкамиВЧеке() Тогда
		
		ЗаголовокФормы = ?(ЭтоНаценка, 
			НСтр("ru = 'Ручная наценка процентом в чеке'"),
			НСтр("ru = 'Ручная скидка процентом в чеке'"));
		
		СуммаРучнойСкидкиНаценки = Объект.Товары.Итог("СуммаРучнойСкидки");
		СуммаБезАвтоматическойСкидки =
			ОбработкаТабличнойЧастиТоварыКлиент.СуммаДокументаБезПодарочныхСертификатов(Объект) +
				Объект.Товары.Итог("СуммаСкидкиОплатыБонусом") +
					СуммаРучнойСкидкиНаценки;
		СуммаБезСкидок = ОбработкаТабличнойЧастиТоварыКлиент.СуммаДокументаБезПодарочныхСертификатов(Объект) +
			Объект.Товары.Итог("СуммаАвтоматическойСкидки") +
				Объект.Товары.Итог("СуммаСкидкиОплатыБонусом") + СуммаРучнойСкидкиНаценки;
		
		ПроцентРучнойСкидкиНаценки = 0;
		
		Если СуммаБезСкидок > 0 Тогда
			ПроцентРучнойСкидкиНаценки = СуммаРучнойСкидкиНаценки * 100 / СуммаБезСкидок;
		КонецЕсли;
		
		Знак = ?(ЭтоНаценка, -1, 1);
		ЧислоВвода = Знак * ПроцентРучнойСкидкиНаценки;
		ЧислоВвода = ?(ЧислоВвода > 0, ЧислоВвода, 0);
		
		ПараметрыВводаЧисла = Новый Структура;
		ПараметрыВводаЧисла.Вставить("ЧислоВвода", ЧислоВвода);
		Если ЭтоНаценка Тогда
			ПараметрыВводаЧисла.Вставить("Отрицательное", Истина);
		ИначеЕсли СуммаБезСкидок > 0 Тогда
			ПараметрыВводаЧисла.Вставить("МаксимальноеЗначение", СуммаБезАвтоматическойСкидки * 100 / СуммаБезСкидок);
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Знак",           Знак);
		ДополнительныеПараметры.Вставить("ЗаголовокФормы", ЗаголовокФормы);
		ДополнительныеПараметры.Вставить("СуммаБезСкидок", СуммаБезСкидок);
		
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ОповещениеОткрытьФормуВводаЧислаИзменитьПроцентРучнойСкидкиНаценкиВЧеке", ЭтотОбъект, ДополнительныеПараметры);
		
		ПолучитьИнтерактивноЧисло(
			ЗаголовокФормы,
			ОбработчикОповещения,
			ПараметрыВводаЧисла);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаСкидкиСкидкаПроцентВЧеке()
	
	ИзменитьПроцентРучнойСкидкиНаценкиВЧеке();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаСкидкиНаценкаПроцентВЧеке()
	
	ИзменитьПроцентРучнойСкидкиНаценкиВЧеке(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаСкидкиСкидкаСуммаВЧеке()
	
	ИзменитьСуммуРучнойСкидкиНаценкиВЧеке();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаСкидкиНаценкаСуммаВЧеке()
	
	ИзменитьСуммуРучнойСкидкиНаценкиВЧеке(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаСкидкиСкидкаПроцентВСтроке()
	
	ИзменитьПроцентРучнойСкидкиНаценкиВСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаСкидкиНаценкаПроцентВСтроке()
	
	ИзменитьПроцентРучнойСкидкиНаценкиВСтроке(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаСкидкиСкидкаСуммаВСтроке()
	
	ИзменитьСуммуРучнойСкидкиНаценкиВСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаСкидкиНаценкаСуммаВСтроке()
	
	ИзменитьСуммуРучнойСкидкиНаценкиВСтроке(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаСкидкиОтменаСкидокВЧеке()
	
	Если ВозможностьРаботыСРучнымиСкидкамиВЧеке() Тогда
		
		ОтменитьРучныеСкидки();
		НазначитьАвтоматическиеСкидкиКлиент();
		ОбновитьФормуНаКлиенте();
		ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаСкидкиОтменаСкидокВСтроке()
	
	Если ВозможностьРаботыСРучнымиСкидкамиВСтроке() Тогда
		
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		СтрокаТабличнойЧасти.СуммаРучнойСкидки = 0;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",
			Новый Структура("Очищать, ПересчитыватьСуммуСкидки", Ложь, Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
			ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(
			Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
			
		ОбработкаТабличнойЧастиТоварыКлиент.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект, СтруктураДействий, СтрокаТабличнойЧасти, КэшированныеЗначения);
			
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		
		ОбновитьФормуНаКлиенте();
		ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");
		
		ЛогированиеВводаРучнойСкидки(НСтр("ru = 'Отмена ручной скидки в строке'") , 0, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НельзяПродавать(Номенклатура, ТекстСообщения)
	
	СтруктураЗапретРозничныхПродаж = РозничныеПродажиКлиентСервер.СтруктураЗапретРозничныхПродаж();
	СтруктураЗапретРозничныхПродаж.Номенклатура            = Номенклатура;
	СтруктураЗапретРозничныхПродаж.ВидОперации             = Объект.ВидОперации;
	СтруктураЗапретРозничныхПродаж.ИспользоватьАссортимент = ИспользоватьАссортимент;
	СтруктураЗапретРозничныхПродаж.ФорматМагазина          = ФорматМагазина;
	СтруктураЗапретРозничныхПродаж.Магазин                 = Объект.Магазин;
	
	Возврат РозничныеПродажиСервер.НельзяПродавать(СтруктураЗапретРозничныхПродаж, ТекстСообщения);
	
КонецФункции

&НаСервере
Функция ВыполнитьПредварительныйРасчетСкидокНаСервере(ПорядковыйНомерПродажи)
	
	СтруктураПараметры = РозничныеПродажиКлиентСервер.СтруктураДляПредварительногоРасчетСкидок();
	СтруктураПараметры.ПрименятьКОбъекту                = Ложь;
	СтруктураПараметры.ТолькоПредварительныйРасчет      = Истина;
	СтруктураПараметры.ВосстанавливатьУправляемыеСкидки = Истина;
	СтруктураПараметры.УправляемыеСкидки                = УправляемыеСкидки;
	СтруктураПараметры.ТолькоСообщенияПослеОформления   = Ложь;
	СтруктураПараметры.ПорядковыйНомерПродажи           = ПорядковыйНомерПродажи;
	СтруктураПараметры.РабочееМесто                     = РабочееМесто;
	СтруктураПараметры.КонтролироватьОстаткиТоваров     = КонтролироватьОстаткиТоваровПриЗакрытииЧека;
	
	Возврат РозничныеПродажиСервер.ВыполнитьПредварительныйРасчетСкидокНаСервере(
		СтруктураПараметры, 
		Объект, 
		УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьУправляемыеСкидки(ОбъектЧекККМ)
	
	РозничныеПродажиСервер.ЗаполнитьУправляемыеСкидки(ОбъектЧекККМ, УправляемыеСкидки);
	
КонецПроцедуры

&НаСервере
Функция ВозможнаОплатаБонусами(ДополнительныеПараметры)
	
	Результат = Ложь;
	ЗаголовокИнформации = "";
	ТекстИнформации = "";
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		
		Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			БонуснаяПрограммаЛояльности =
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДисконтнаяКарта, "БонуснаяПрограммаЛояльности");
			Если ЗначениеЗаполнено(БонуснаяПрограммаЛояльности) Тогда
				УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					БонуснаяПрограммаЛояльности,
					"УменьшатьСуммуЧекаДляСкидок");
					Если УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = Null
						ИЛИ УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = Неопределено Тогда
					УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = Ложь;
				КонецЕсли;
			Иначе
				УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = Ложь;
			КонецЕсли;
		Иначе
			УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = Ложь;
		КонецЕсли;
		ДополнительныеПараметры.Вставить("УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов",
			УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов);
			
		ЕстьОплатаБонусами = Объект.ОплатаБонуснымиБаллами.Количество() > 0;
			
		Если ЗначениеЗаполнено(Объект.ДокументРасчета) Тогда
			ЗаголовокИнформации = НСтр("ru = 'Оплата бонусами невозможна.'");
			ТекстИнформации =
				НСтр("ru = 'Цена зафиксирована документом расчета. Применение бонусов как распределение скидки невозможно.'");
		ИначеЕсли ЕстьОплатаБонусами Тогда
			ЗаголовокИнформации = НСтр("ru = 'Повторная оплата бонусами невозможна.'");
			ТекстИнформации =
				НСтр("ru = 'Оплата бонусами уже выбрана. Для изменения оплаты бонусами сначала ее следует отменить.'");
		Иначе
			Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
				БонуснаяПрограммаЛояльности = БонуснаяПрограммаКарты(Объект.ДисконтнаяКарта);
				Если ЗначениеЗаполнено(БонуснаяПрограммаЛояльности) Тогда
					ДополнительныеПараметры.Вставить("БонуснаяПрограммаЛояльности", БонуснаяПрограммаЛояльности);
					Результат = Истина;
				Иначе
					ЗаголовокИнформации = НСтр("ru = 'Оплата бонусами не возможна.'");
					ТекстИнформации = НСтр("ru = 'Дисконтная карта не участвует в бонусных программах.'");
				КонецЕсли;
			Иначе
				ЗаголовокИнформации = НСтр("ru = 'Оплата бонусами не возможна.'");
				ТекстИнформации = НСтр("ru = 'Не выбрана дисконтная карта.'");
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЗаголовокИнформации = НСтр("ru = 'Оплата бонусами не возможна.'");
		ТекстИнформации = НСтр("ru = 'При возврате бонусные баллы сторнируются автоматически.'");
	КонецЕсли;
	ДополнительныеПараметры.Вставить("ЗаголовокИнформации", ЗаголовокИнформации);
	ДополнительныеПараметры.Вставить("ТекстИнформации", ТекстИнформации);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция БонуснаяПрограммаКарты(ДисконтнаяКарта)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДисконтнаяКарта, "БонуснаяПрограммаЛояльности");
	
КонецФункции

&НаСервере
Процедура ОбработатьОплатуБонусами(Параметр)
	
	РозничныеПродажиСервер.ОбработатьОплатуБонусами(Параметр, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОплатуБонусамиВЧек(ОбъектЧекККМ, ОтбиратьПоОрганизации)
	
	РозничныеПродажиСервер.ДобавитьОплатуБонусамиВЧек(Объект, ОбъектЧекККМ, ОтбиратьПоОрганизации);
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьОплатуБонусами()
	
	Если Объект.ЕстьОплатаБонусами Тогда
		БонусныеБаллыСервер.ОчиститьОплатуБонусамиВТоварах(Объект);
		Объект.ОплатаБонуснымиБаллами.Очистить();
		Объект.ЕстьОплатаБонусами = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьОплатуБонусамиПоОрганизациямПриВосстановлении(ЧекККМВОбработке)
	
	РозничныеПродажиСервер.РаспределитьОплатуБонусамиПоОрганизациямПриВосстановлении(ЧекККМВОбработке, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьОплатуБонусамиКСторнированию()
	
	СкидкиНаценкиСерверПереопределяемый.ПодготовитьСкидкиИОплатуБонусамиКСторнированиюПриВозврате(Объект, Истина, Истина);
	ОбработкаТабличнойЧастиТоварыСервер.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьОплатуБонусамиКСторнированиюПриИзмененииКоличества()
	
	СкидкиНаценкиСерверПереопределяемый.ПодготовитьСкидкиИОплатуБонусамиКСторнированиюПриВозврате(Объект, Истина, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьСкидки()
	
	Если НЕ Объект.ПродажаПоЗаказу Тогда
		Если Объект.СкидкиРассчитаны Тогда
			СкидкиНаценкиСерверПереопределяемый.ОчиститьТоварыОтПодарков(Объект);
			СкидкиНаценкиСервер.ОтменитьСкидки(Объект, "Товары", "СуммаСкидкиОплатыБонусом");
			ОбработкаТабличнойЧастиТоварыСервер.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект);
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
			Объект.Подарки.Очистить();
			Объект.СерииПодарков.Очистить();
			Объект.БонусныеБаллыКНачислению.Очистить();
			Объект.СкидкиРассчитаны = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЛогированиеСобытий

&НаСервере
Процедура ЗаписатьЛогОперации(ВидДействияКассираВРМК, СтруктураЛога, ПредварительнаяЗапись = Ложь)
	
	Если НЕ НаборПравИНастроек.ЛогироватьДействияКассира Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ НаборПравИНастроек.ЛогируемыеДействия.Свойство(ВидДействияКассираВРМК) Тогда
		Возврат;
	КонецЕсли;
	
	НомерОперацииЛогирования = НомерОперацииЛогирования + 1;
	СтруктураЛога.Вставить("НомерОперации", НомерОперацииЛогирования);
	СтруктураЛога.Вставить("ДатаОперации" , ТекущаяДатаСеанса());
	СтруктураЛога.Вставить("Магазин"      , Объект.Магазин);
	
	Пользователь        = ОбщегоНазначенияРТ.ПользовательСУчетомИзмененныхПрав();
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	СтруктураЛога.Вставить("Пользователь", Пользователь);
	Если НЕ Пользователь = ТекущийПользователь Тогда
		СтруктураЛога.Вставить("ЗамещаемыйПользователь", ТекущийПользователь);
	КонецЕсли;
	
	Если ПредварительнаяЗапись Тогда
		СтруктураЛога.Вставить("ИдентификаторФормыПредварительныхДанных" , ИдентификаторФормыПредварительныхДанных);
	КонецЕсли;
	
	ЛогированиеДействийКассира.ЗаписатьЛогОперации(ВидДействияКассираВРМК, СтруктураЛога);
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьПредварительныйЛог(ЧекККМ)
	
	Если НЕ НаборПравИНастроек.ЛогироватьДействияКассира Тогда
		Возврат;
	КонецЕсли;
	
	ЛогированиеДействийКассира.ЗаполнитьПредварительныйЛог(ИдентификаторФормыПредварительныхДанных, ЧекККМ);
	
КонецПроцедуры

&НаСервере
Процедура ЛогированиеБезДополнительныхДанных(ВидДействияКассираВРМК, ВходящиеДанные = Неопределено, ИсходящиеДанные = Неопределено, УменьшениеСуммыЧекаККМ = 0)
	
	СтруктураЛога = Новый Структура;
	
	Если НЕ ВходящиеДанные = Неопределено Тогда
		СтруктураЛога.Вставить("ВходящиеДанные", ВходящиеДанные);
	КонецЕсли;
	
	Если НЕ ИсходящиеДанные = Неопределено Тогда
		СтруктураЛога.Вставить("ИсходящиеДанные", ИсходящиеДанные);
	КонецЕсли;
	
	Если НЕ УменьшениеСуммыЧекаККМ = 0 Тогда
		СтруктураЛога.Вставить("УменьшениеСуммыЧекаККМ", УменьшениеСуммыЧекаККМ);
	КонецЕсли;
	ЗаписатьЛогОперации(ВидДействияКассираВРМК, СтруктураЛога, Истина);
	ИсполняемаяОперацияЛогирования = "";
	
КонецПроцедуры

&НаСервере
Процедура ЛогированиеЗаписиИЗакрытияЧекаПоСтатусу(СтатусЧекаККМ, ЧекККМ)
	
	СтруктураЛога = Новый Структура;
	СтруктураЛога.Вставить("ЧекККМ", ЧекККМ);
	
	Если СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Аннулированный Тогда
		ЗаписатьЛогОперации("ЧекАннулирован", СтруктураЛога)
	ИначеЕсли СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Отложенный Тогда
		ЗаписатьЛогОперации("ЧекОтложен", СтруктураЛога)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЛогированиеПоЧеку(ВидДействияКассираВРМК, ЧекККМ, ВходящиеДанные = Неопределено)
	
	СтруктураЛога = Новый Структура;
	СтруктураЛога.Вставить("ЧекККМ", ЧекККМ);
	
	Если НЕ ВходящиеДанные = Неопределено Тогда
		СтруктураЛога.Вставить("ВходящиеДанные", ВходящиеДанные);
	КонецЕсли;
	
	ЗаписатьЛогОперации(ВидДействияКассираВРМК, СтруктураЛога)
	
КонецПроцедуры

&НаСервере
Процедура ЛогированиеНеизвестныхДанныхПО(ДанныеПО)
	
	СтруктураЛога = Новый Структура;
	СтруктураЛога.Вставить("ВходящиеДанные", ДанныеПО);
	ЗаписатьВЛог = Ложь;
	Если ИсполняемаяОперацияЛогирования = "ВведенШтрихкод" Тогда
		ВидДействияКассираВРМК = "ВведенНеизвестныйШтрихкод";
		ЗаписатьВЛог = Истина;
	ИначеЕсли ИсполняемаяОперацияЛогирования = "ВведенНомерКарты" Тогда
		ВидДействияКассираВРМК = "ВведенКодНеизвестнойКарты";
		ЗаписатьВЛог = Истина;
	ИначеЕсли ИсполняемаяОперацияЛогирования = "СчитанШтрихкод" Тогда
		ВидДействияКассираВРМК = "СчитанНеизвестныйШтрихкод";
		ЗаписатьВЛог = Истина;
	ИначеЕсли ИсполняемаяОперацияЛогирования = "СчитанаКарта" Тогда
		ВидДействияКассираВРМК = "СчитанКодНеизвестнойКарты";
		ЗаписатьВЛог = Истина;
	КонецЕсли;
	
	Если ЗаписатьВЛог Тогда
		ЗаписатьЛогОперации(ВидДействияКассираВРМК, СтруктураЛога, Истина);
		ИсполняемаяОперацияЛогирования = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЛогированиеРегистрацииНовойКарты(ДанныеПО, ИнформационнаяКарта)
	
	СтруктураЛога = Новый Структура;
	СтруктураЛога.Вставить("ВходящиеДанные" , ДанныеПО);
	СтруктураЛога.Вставить("ИсходящиеДанные", ИнформационнаяКарта);
	ЗаписатьЛогОперации("РегистрацияНовойКарты", СтруктураЛога, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЛогированиеВводаДисконтнойКарты(ДанныеПО, ИнформационнаяКарта)
	
	СтруктураЛога = Новый Структура;
	СтруктураЛога.Вставить("ВходящиеДанные" , ДанныеПО);
	СтруктураЛога.Вставить("ИсходящиеДанные", ИнформационнаяКарта);
	ЗаписатьВЛог = Ложь;
	Если ИсполняемаяОперацияЛогирования = "ВведенШтрихкод" Тогда
		ВидДействияКассираВРМК = "ВведенШтрихкодДисконтнойКарты";
		ЗаписатьВЛог = Истина;
	ИначеЕсли ИсполняемаяОперацияЛогирования = "ВведенНомерКарты" Тогда
		ВидДействияКассираВРМК = "ВведенКодДисконтнойКарты";
		ЗаписатьВЛог = Истина;
	ИначеЕсли ИсполняемаяОперацияЛогирования = "СчитанШтрихкод" Тогда
		ВидДействияКассираВРМК = "СчитанШтрихкодДисконтнойКарты";
		ЗаписатьВЛог = Истина;
	ИначеЕсли ИсполняемаяОперацияЛогирования = "СчитанМагнитныйКод"
		ИЛИ ИсполняемаяОперацияЛогирования = "СчитанаКарта" Тогда
		ВидДействияКассираВРМК = "СчитанКодДисконтнойКарты";
		ЗаписатьВЛог = Истина;
	КонецЕсли;
	
	Если ЗаписатьВЛог Тогда
		ЗаписатьЛогОперации(ВидДействияКассираВРМК, СтруктураЛога, Истина);
		ИсполняемаяОперацияЛогирования = "";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЛогированиеВводаПродавца(ДанныеПО, ИнформационнаяКарта, Продавец)
	
	СтруктураЛога = Новый Структура;
	СтруктураЛога.Вставить("ВходящиеДанные"               , ДанныеПО);
	СтруктураЛога.Вставить("ИсходящиеДанные"              , Продавец);
	СтруктураЛога.Вставить("ДополнительныеИсходящиеДанные", ИнформационнаяКарта);
	ЗаписатьВЛог = Ложь;
	Если ИсполняемаяОперацияЛогирования = "ВведенШтрихкод" Тогда
		ВидДействияКассираВРМК = "ВведенШтрихкодДисконтнойКарты";
		ЗаписатьВЛог = Истина;
	ИначеЕсли ИсполняемаяОперацияЛогирования = "ВведенНомерКарты" Тогда
		ВидДействияКассираВРМК = "ВведенКодКартыПродавца";
		ЗаписатьВЛог = Истина;
	ИначеЕсли ИсполняемаяОперацияЛогирования = "ВыбранПродавец" Тогда
		ВидДействияКассираВРМК = "ВыбранПродавец";
		ЗаписатьВЛог = Истина;
	ИначеЕсли ИсполняемаяОперацияЛогирования = "СчитанШтрихкод" Тогда
		ВидДействияКассираВРМК = "СчитанШтрихкодКартыПродавца";
		ЗаписатьВЛог = Истина;
	ИначеЕсли ИсполняемаяОперацияЛогирования = "СчитанаКарта" Тогда
		ВидДействияКассираВРМК = "СчитанКодКартыПродавца";
		ЗаписатьВЛог = Истина;
	КонецЕсли;
	
	Если ЗаписатьВЛог Тогда
		ЗаписатьЛогОперации(ВидДействияКассираВРМК, СтруктураЛога, Истина);
		ИсполняемаяОперацияЛогирования = "";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЛогированиеВводаНоменклатурыИХарактеристики(ДанныеПО, Номенклатура, Характеристика)
	
	СтруктураЛога = Новый Структура;
	СтруктураЛога.Вставить("ВходящиеДанные"               , ДанныеПО);
	СтруктураЛога.Вставить("ИсходящиеДанные"              , Номенклатура);
	СтруктураЛога.Вставить("ДополнительныеИсходящиеДанные", Характеристика);
	
	ЗаписатьВЛог = Ложь;
	Если ИсполняемаяОперацияЛогирования = "ВведенШтрихкод" Тогда
		Если НЕ ЗначениеЗаполнено(Характеристика) Тогда
			ВидДействияКассираВРМК = "ВведенШтрихкодНоменклатуры";
		Иначе
			ВидДействияКассираВРМК = "ВведенШтрихкодХарактеристики";
		КонецЕсли; 
		ЗаписатьВЛог = Истина;
	ИначеЕсли ИсполняемаяОперацияЛогирования = "СчитанШтрихкод" Тогда
		Если НЕ ЗначениеЗаполнено(Характеристика) Тогда
			ВидДействияКассираВРМК = "СчитанШтрихкодНоменклатуры";
		Иначе
			ВидДействияКассираВРМК = "СчитанШтрихкодХарактеристики";
		КонецЕсли; 
		ЗаписатьВЛог = Истина;
	КонецЕсли;
	
	Если ЗаписатьВЛог Тогда
		ЗаписатьЛогОперации(ВидДействияКассираВРМК, СтруктураЛога, Истина);
		ИсполняемаяОперацияЛогирования = "";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЛогированиеВводаПодарочногоСертификата(ДанныеПО, Номенклатура, ПодарочногоСертификат)
	
	СтруктураЛога = Новый Структура;
	СтруктураЛога.Вставить("ВходящиеДанные"               , ДанныеПО);
	СтруктураЛога.Вставить("ИсходящиеДанные"              , Номенклатура);
	СтруктураЛога.Вставить("ДополнительныеИсходящиеДанные", ПодарочногоСертификат);
	ЗаписатьВЛог = Ложь;
	Если ИсполняемаяОперацияЛогирования = "ВведенШтрихкод" Тогда
		ВидДействияКассираВРМК = "ВведенШтрихкодПодарочногоСертификата";
		ЗаписатьВЛог = Истина;
	ИначеЕсли ИсполняемаяОперацияЛогирования = "ВведенНомерКарты" Тогда
		ВидДействияКассираВРМК = "ВведенКодКартыПодарочногоСертификата";
		ЗаписатьВЛог = Истина;
	ИначеЕсли ИсполняемаяОперацияЛогирования = "СчитанШтрихкод" Тогда
		ВидДействияКассираВРМК = "СчитанШтрихкодПодарочногоСертификата";
		ЗаписатьВЛог = Истина;
	ИначеЕсли ИсполняемаяОперацияЛогирования = "СчитанаКарта" Тогда
		ВидДействияКассираВРМК = "СчитанКодКартыПодарочногоСертификата";
		ЗаписатьВЛог = Истина;
	КонецЕсли;
	
	Если ЗаписатьВЛог Тогда
		ЗаписатьЛогОперации(ВидДействияКассираВРМК, СтруктураЛога, Истина);
		ИсполняемаяОперацияЛогирования = "";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЛогированиеВводаРучнойСкидки(ТипСкидки, ЗначениеСкидки, УменьшениеСуммыЧекаККМ)
	
	СтруктураЛога = Новый Структура;
	СтруктураЛога.Вставить("ИсходящиеДанные"              , ТипСкидки);
	СтруктураЛога.Вставить("ДополнительныеИсходящиеДанные", ЗначениеСкидки);
	СтруктураЛога.Вставить("УменьшениеСуммыЧекаККМ"       , УменьшениеСуммыЧекаККМ);
	ЗаписатьЛогОперации("ВводРучнойСкидки", СтруктураЛога, Истина);
	ИсполняемаяОперацияЛогирования = "";
	
КонецПроцедуры

&НаСервере
Процедура ЛогированиеВводаСерий(УменьшениеСуммыЧекаККМ)
	
	СтруктураЛога = Новый Структура;
	СтруктураЛога.Вставить("УменьшениеСуммыЧекаККМ", УменьшениеСуммыЧекаККМ);
	ЗаписатьЛогОперации("ВыбранаСерия", СтруктураЛога, Истина);
	ИсполняемаяОперацияЛогирования = "";
	
КонецПроцедуры

&НаСервере
Процедура ЛогированиеВводаЦены(Цена)
	
	СтруктураЛога = Новый Структура;
	СтруктураЛога.Вставить("ИсходящиеДанные"       , Цена);
	ЗаписатьЛогОперации("ВводЦеныТоварамСНулевойЦеной", СтруктураЛога, Истина);
	ИсполняемаяОперацияЛогирования = "";
	
КонецПроцедуры

&НаСервере
Процедура ЛогированиеВводаШКСерии(ДанныеПО, Номенклатура, Серия)
	
	СтруктураЛога = Новый Структура;
	СтруктураЛога.Вставить("ВходящиеДанные"               , ДанныеПО);
	СтруктураЛога.Вставить("ИсходящиеДанные"              , Номенклатура);
	СтруктураЛога.Вставить("ДополнительныеИсходящиеДанные", Серия);
	
	ЗаписатьВЛог = Ложь;
	Если ИсполняемаяОперацияЛогирования = "ВводШКСерии" Тогда
		ВидДействияКассираВРМК = "ВведенШтрихкодСерии";
		ЗаписатьВЛог = Истина;
	КонецЕсли;
	
	Если ЗаписатьВЛог Тогда
		ЗаписатьЛогОперации(ВидДействияКассираВРМК, СтруктураЛога, Истина);
		ИсполняемаяОперацияЛогирования = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЛогированиеИзмененийСтроки(ВидДействияКассираВРМК, ВходящиеДанные, ВходящаяНоменклатура, ВходящаяХарактеристика, ИсходящиеДанные, ДополнительныеИсходящиеДанные, УменьшениеСуммыЧекаККМ)
	
	СтруктураЛога = Новый Структура;
	СтруктураЛога.Вставить("ВходящиеДанные"               , ВходящиеДанные);
	СтруктураЛога.Вставить("ВходящаяНоменклатура"         , ВходящаяНоменклатура);
	СтруктураЛога.Вставить("ВходящаяХарактеристика"       , ВходящаяХарактеристика);
	СтруктураЛога.Вставить("ИсходящиеДанные"              , ИсходящиеДанные);
	СтруктураЛога.Вставить("ДополнительныеИсходящиеДанные", ДополнительныеИсходящиеДанные);
	СтруктураЛога.Вставить("УменьшениеСуммыЧекаККМ"       , УменьшениеСуммыЧекаККМ);
	
	ЗаписатьЛогОперации(ВидДействияКассираВРМК, СтруктураЛога, Истина);
	ИсполняемаяОперацияЛогирования = "";
	
КонецПроцедуры

&НаСервере
Процедура ЛогированиеУдаленияСтроки(Номенклатура, Характеристика, УменьшениеСуммыЧекаККМ)
	
	СтруктураЛога = Новый Структура;
	СтруктураЛога.Вставить("ВходящаяНоменклатура"  , Номенклатура);
	СтруктураЛога.Вставить("ВходящаяХарактеристика", Характеристика);
	СтруктураЛога.Вставить("УменьшениеСуммыЧекаККМ", УменьшениеСуммыЧекаККМ);
	
	ЗаписатьЛогОперации("УдалениеСтрокиЧека", СтруктураЛога, Истина);
	ИсполняемаяОперацияЛогирования = "";
КонецПроцедуры

&НаСервере
Процедура ЛогированиеПоискИПодборНоменклатуры(Номенклатура, Характеристика)
	
	СтруктураЛога = Новый Структура;
	СтруктураЛога.Вставить("ИсходящиеДанные"              , Номенклатура);
	СтруктураЛога.Вставить("ДополнительныеИсходящиеДанные", Характеристика);
	
	ЗаписатьЛогОперации("ПоискИПодборНоменклатуры", СтруктураЛога, Истина);
	ИсполняемаяОперацияЛогирования = "";
КонецПроцедуры

&НаСервере
Процедура ЛогированиеЧастичнойОплаты(ЧекККМ)
	
	Если ЧекККМ.ОперацияСДенежнымиСредствами Тогда 
		ЛогированиеПоЧеку("ФискализацияЧастичнойОплаты", ЧекККМ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Автосохранение

&НаСервере
Процедура ОпределитьИмяФайлаБэкапа()
	
	РабочийКаталог = КаталогВременныхФайлов();
	
	// Так как при различных указаниях рабочего каталога возможно наличие или отсутствие
	// последнего слеша, приведем строку каталога к унифицированному виду - без слеша на конце.
	Если (Прав(РабочийКаталог, 1) = "\") ИЛИ (Прав(РабочийКаталог, 1) = "/") Тогда
		РабочийКаталог = Лев(РабочийКаталог, СтрДлина(РабочийКаталог) - 1);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.РабочееМесто)  Тогда
		РабочийКаталог = РабочийКаталог + "\" + Объект.РабочееМесто.Код;
	КонецЕсли;
	
	КаталогНаДиске = Новый Файл(РабочийКаталог);
	Если НЕ КаталогНаДиске.Существует() Тогда
		СоздатьКаталог(РабочийКаталог);
	КонецЕсли;
	
	ИмяФайлаБэкапа = РабочийКаталог + "\OrdrBack.xml";
КонецПроцедуры

&НаКлиенте
Процедура АвтосохранениеДанныхКлиент()
	
	АвтосохранениеДанных();
	
КонецПроцедуры


&НаСервере
// Процедура проверяет условия автосохранения документа
// при необходимости сохраняет его.
Процедура АвтосохранениеДанных()

	СохраненноеЗначение = ПолучитьАвтосохраненныеДанные();
	ТекущееЗначение     = ПолучитьТекущиеДанныеДляСохранения();
	
	Если ПолучитьХМLПредставление(СохраненноеЗначение) = ПолучитьХМLПредставление(ТекущееЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	// XML сериализация текущего объекта.
	Попытка
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяФайлаБэкапа, "UTF-16");
		ЗаписатьXML(ЗаписьXML, ТекущееЗначение);
		ЗаписьXML.Закрыть();
	Исключение
		ОчиститьАвтосохраненныеДанные();
	КонецПопытки;

КонецПроцедуры

&НаСервере
// Процедура анализирует необходимость восстановления
// работы с чеком.
Процедура ВосстановитьДанные()
	
	ОбъектЧекККМ = ПолучитьАвтосохраненныеДанные();
	
	Если ОбъектЧекККМ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Отказ = Ложь;
		
		ЗаполнитьДаннымиПоЧекуККМ(ОбъектЧекККМ, Отказ);
		
	Исключение
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
// Процедура удаляет объект с диска.
//
Процедура ОчиститьАвтосохраненныеДанные()
	
	ФайлНаДиске = Новый Файл(ИмяФайлаБэкапа);

	Если ФайлНаДиске.Существует() Тогда
		УдалитьФайлы(ИмяФайлаБэкапа);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура получает объект с диска.
//
Функция ПолучитьАвтосохраненныеДанные()
	
	Результат = Неопределено;
	
	ФайлНаДиске = Новый Файл(ИмяФайлаБэкапа);
	Попытка
		Если ФайлНаДиске.Существует() Тогда
			
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.ОткрытьФайл(ИмяФайлаБэкапа);
			Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента 
					И ЧтениеXML.Имя    = "DocumentObject.ЧекККМ" Тогда
					Попытка
						Результат = ПрочитатьXML(ЧтениеXML);
					Исключение
						Результат = Неопределено;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
			ЧтениеXML.Закрыть();
			
		КонецЕсли;
	Исключение
		ОчиститьАвтосохраненныеДанные()
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьТекущиеДанныеДляСохранения()
	
	ОбъектЧекККМ = Документы.ЧекККМ.СоздатьДокумент();
	
	ЗаполнитьЧекПоВсемДанным(ОбъектЧекККМ);
	ОбъектЧекККМ.Дата = Дата('00010101');
	
	Возврат ОбъектЧекККМ;
КонецФункции

&НаСервере
// Процедура считывает текстовое представление
// сериализованного файла и сравнивает его с текстовым представлением
// текущего объекта.
Функция ПолучитьХМLПредставление(ОбъектПредставления)
	
	Результат = "";
	
	// Сериализует текущий объект
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-16");
	ЗаписатьXML(ЗаписьXML, ОбъектПредставления);
	Результат = ЗаписьXML.Закрыть();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ЗавершитьОбработкуДокументаОснования()
	
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаЧО09ОперацияДС", ДоступностьПриемаДС());
	Элементы.СтраницыИнформации.ТекущаяСтраница = Элементы.СтраницаИнформации;
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
	
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаПО35ЗаявлениеНаВозврат", ЭтоВозвратКлиент());
	УстановитьДоступностьОтдельныхЭлементовФормы("КартинкаПО35ЗаявлениеНаВозвратНажатие",  ЭтоВозвратКлиент());
	
	ПерезаполнитьПризнакиМаркировки();
	ОбновитьФормуНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоследнееРедактируемыеЗначения(СтрокаТабличнойЧасти)
	
	Если НЕ СтрокаТабличнойЧасти = Неопределено Тогда
		ПоследняяРедактируемаяНоменклатура = СтрокаТабличнойЧасти.Номенклатура;
		ПоследнееРедактированиеКоличество  = СтрокаТабличнойЧасти.КоличествоУпаковок;
		ПоследняяРедактируемаяСумма        = СтрокаТабличнойЧасти.Сумма;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСерийныйНомерИОткрытьВводСерии(СтрокаТабличнойЧасти, СерийныйНомер = Неопределено, ОткрыватьРедактированиеСтроки = Ложь, ОткрытаБлокирующаяФорма = Ложь)
	
	Если ЗначениеЗаполнено(СерийныйНомер) Тогда
		
		Если СтрокаТабличнойЧасти.КлючСвязиСерийныхНомеров = 0 Тогда
			ВремКлючСвязи = 0;
			Для Каждого СтрокаТЧ Из Объект.СерийныеНомера Цикл
				Если ВремКлючСвязи < СтрокаТЧ.КлючСвязиСерийныхНомеров Тогда
					ВремКлючСвязи = СтрокаТЧ.КлючСвязиСерийныхНомеров;
				КонецЕсли;
			КонецЦикла;
			СтрокаТабличнойЧасти.КлючСвязиСерийныхНомеров = ВремКлючСвязи + 1;
		КонецЕсли;
		
		СтрокаСерийныхНомеров = Объект.СерийныеНомера.Добавить();
		СтрокаСерийныхНомеров.СерийныйНомер = СерийныйНомер;
		СтрокаСерийныхНомеров.КлючСвязиСерийныхНомеров = СтрокаТабличнойЧасти.КлючСвязиСерийныхНомеров;
		ОткрыватьРедактированиеСтроки = Ложь;
		
	Иначе
		
		ДобавитьСерийныйНомер(СтрокаТабличнойЧасти, ОткрыватьРедактированиеСтроки);
		ОткрытьВводСерии(СтрокаТабличнойЧасти, ОткрыватьРедактированиеСтроки);
		ОткрытаБлокирующаяФорма = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеДисплеяПокупателяДобавлениеТовара(СтрокаТабличнойЧасти)
	
	ЭтотОбъект.ТекущийЭлемент       = Элементы.Товары;
	Если НЕ СтрокаТабличнойЧасти = Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = СтрокаТабличнойЧасти.ПолучитьИдентификатор();
		ОбновлениеДисплеяПокупателя("ДобавлениеТовара");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиПредупреждениеОЗакрытииКассы()
	
	ЗаголовокИнформации = НСтр("ru = 'Закрытие кассы:'");
	ТекстИнформации     = НСтр("ru = 'Кассовая смена должна быть закрыта %1'");
	
	ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИнформации,
							Формат(РасчетноеВремяЗакрытияКассы, "ДЛФ=DDT"));
	ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
	
	ЭтотОбъект.Заголовок = ТекстИнформации;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеПередЗакрытием()
	
	ОчиститьАвтосохраненныеДанные();
	
	Если ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		УдалитьИзВременногоХранилища(АдресПримененныхСкидокВоВременномХранилище);
		АдресПримененныхСкидокВоВременномХранилище = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруПолейТЧ(СтруктураДействий)
	
	Возврат РозничныеПродажиКлиентСервер.ПолучитьСтруктуруПолейТЧ(СтруктураДействий);
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеТекущейСтроки(ТекущаяСтрока, СтруктураПолейТЧ)
	
	ДанныеТекущейСтроки = Новый Структура;
	ОбщегоНазначенияРТКлиентСервер.ДобавитьВСтруктуру(ДанныеТекущейСтроки, СтруктураПолейТЧ);
	ЗаполнитьЗначенияСвойств(ДанныеТекущейСтроки, ТекущаяСтрока);
	
	Возврат ДанныеТекущейСтроки;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	
	Если Элементы.Товары.ТекущиеДанные <> Неопределено Тогда
		ОбновлениеДисплеяПокупателяДобавлениеТовара(Элементы.Товары.ТекущиеДанные);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
			Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
		
		//ИнтеграцияИСМПТК_РозничноеВыбытие
		Если УчетМаркировкаИСМПТК 
			И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() 
			И ВводДоступен() Тогда
			//После завершения обработки товаров удаляем из таблицы марок несвязанные строки
			СтрокиБезИндексаСвязи = Объект.КодыМаркировкиИСМПТК.НайтиСтроки(Новый Структура("КлючСвязи", -1));
			Если Не СтрокиБезИндексаСвязи.Количество() = 0 Тогда
				Для Каждого Строка Из СтрокиБезИндексаСвязи Цикл
					Объект.КодыМаркировкиИСМПТК.Удалить(Строка);
				КонецЦикла;
			КонецЕсли;	
		КонецЕсли;
		//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
	
	КонецЕсли;
	
	ПересчитатьИлиОтменитьСкидкиИОплатуБонусами(Истина);
		
	ОбновитьФормуНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИлиОтменитьСкидкиИОплатуБонусами(ТолькоПересчет = Ложь)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		Возврат;
	КонецЕсли;
	
	Если АвтоматическийРасчетСкидок И Объект.Товары.Количество() > 0 Тогда
		НазначитьАвтоматическиеСкидкиКлиент(Ложь, Ложь);
	Иначе
		Если (НЕ ТолькоПересчет) Тогда
			ОтменитьСкидкиИОплатуБонусамиСервер();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьСкидкиИОплатуБонусамиСервер()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа 
		И НЕ ЭтоЗачетАванса 
		И НЕ ЭтоОплатаРассрочки Тогда
		ОтменитьСкидки();
		ОтменитьОплатуБонусами();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНесвязанныеСерийныеНомера()
	
	ОбработкаТабличнойЧастиТоварыСервер.УдалитьНесвязанныеСерийныеНомера(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНесвязанныеАкцизы()
	
	ОбработкаТабличнойЧастиТоварыСервер.УдалитьНесвязанныеАкцизы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСерийныеНомераВСтроке(ИдентификаторСтроки)
	
	РозничныеПродажиСервер.ОчиститьСерийныеНомераВСтроке(ИдентификаторСтроки, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПослеУдаленияСервер()
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязи", УдаляемыйКлючСвязи);
	
	ЕстьУдаляемыеСтроки = УдаляемыйКлючСвязи > 0;
	
	Если Объект.ПродажаПоЗаказу Тогда
		Если ЕстьУдаляемыеСтроки Тогда
			СтрокиСкидкиНаценки = Объект.СкидкиНаценки.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаСкидкиНаценки Из СтрокиСкидкиНаценки Цикл
				Объект.СкидкиНаценки.Удалить(СтрокаСкидкиНаценки);
			КонецЦикла;
			УдаляемыйКлючСвязи = 0;
		КонецЕсли;
	КонецЕсли;
	
	УдалитьНесвязанныеСерийныеНомера();
	УдалитьНесвязанныеАкцизы();
	ЗаполнитьОстаткиСервер();
	
	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзмененииУпаковки(СтрокаТабличнойЧасти)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи",
			ОбработкаТабличнойЧастиТоварыКлиент.СтруктураЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
		СтруктураДействий.Вставить("ПересчитатьЦенуСУчетомАгентскогоВознаграждения", Новый Структура("Цена", СтрокаТабличнойЧасти.Цена));
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
		ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(
		Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	ОбработкаТабличнойЧастиТоварыКлиент.ВыделитьАгентскоеВознаграждение(Объект, ЭтотОбъект, СтруктураДействий, СтрокаТабличнойЧасти, КэшированныеЗначения);
		
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элементы.Товары,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = СтрокаТабличнойЧасти.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
			Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ОбновитьФормуНаКлиенте();
	ОбновлениеДисплеяПокупателя("ИзмененияКоличества");
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиИУстановитьКарту(РезультатОткрытияФормы, ДополнительныеПараметры)
	
	РезультатыПоиска = НайтиКарту(РезультатОткрытияФормы, ДополнительныеПараметры);
	Если РезультатыПоиска.Количество() = 0 Тогда
		СтрокаСообщения = НСтр("ru = 'Дисконтная карта для ""%1"" не найдена'");
		СтрокаСообщения = СтрШаблон(СтрокаСообщения, РезультатОткрытияФормы.ВведенноеЧисло);
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("", СтрокаСообщения);
	ИначеЕсли РезультатыПоиска.Количество() = 1 Тогда
		ДисконтнаяКарта = РезультатыПоиска[0];
		ОповещениеУстановкиКарты(ДисконтнаяКарта, Неопределено);
	Иначе
		
		// &ЗамерПроизводительности
		ОценкаПроизводительностиРТКлиент.НачатьЗамер(
			Истина, "ОбщаяФорма.ВыборИнформационнойКарты.Открытие");
		
		ОповещениеВыбораКарты = Новый ОписаниеОповещения("ОповещениеУстановкиКарты", ЭтотОбъект);
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("МассивПоискаКарт", РезультатыПоиска);
		ОткрытьФорму(
			"ОбщаяФорма.ВыборИнформационнойКарты",
			ПараметрыОткрытия,
			ЭтотОбъект,
			,
			,
			,
			ОповещениеВыбораКарты,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиКарту(РезультатОткрытияФормы, ДополнительныеПараметры)
	
	Возврат РозничныеПродажиСервер.НайтиКарту(РезультатОткрытияФормы, ДополнительныеПараметры);
	
КонецФункции

&НаСервере
Функция ОтправитьСообщениеСКодом(КодПроверкиСМС, НомерТелефона)
	
	Возврат РозничныеПродажиСервер.ОтправитьСообщениеСКодом(КодПроверкиСМС, НомерТелефона);
	
КонецФункции

&НаСервере
Функция ОтправитьEmailСКодом(КодПроверки, АдресЭП)
	
	Возврат РозничныеПродажиСервер.ОтправитьEmailСКодом(КодПроверки, АдресЭП);
	
КонецФункции

&НаКлиенте
Процедура УстановкаКартыЗавершение(ДисконтнаяКарта, НомерТелефона="", АдресЭП="")
	
	ЛогированиеБезДополнительныхДанных(
		"ВыбранаДисконтнаяКарта",
		ПредопределенноеЗначение("Справочник.ИнформационныеКарты.ПустаяСсылка"),
		Объект.ДисконтнаяКарта);
	
	Объект.ДисконтнаяКарта 	= ДисконтнаяКарта;
	Объект.Телефон			= ШтрихкодированиеРТКлиентСервер.ПодготовитьТелефон(НомерТелефона);
	Объект.АдресЭП			= АдресЭП;
	
	Модифицированность = Истина;
	ТекстСообщенияСменыКарты = "";
	ПриИзмененииДисконтнаяКартаСервер(ТекстСообщенияСменыКарты);
	ОбновитьДанныеSMSEmail();
	
	Если Не Объект.ПродажаПоЗаказу Тогда
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами(Истина);
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстСообщенияСменыКарты) Тогда
		ПровестиОпрос();
		ОбновитьФормуНаКлиенте();
	Иначе
		ЗаголовокИнформации = "";
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщенияСменыКарты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОплатыБонусами(ВходящиеПараметры)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Истина, "Обработка.РМКУправляемыйРежим.Форма.ФормаОплатыБонуснымиБаллами.Открытие");
	
	БонуснаяПрограммаЛояльности = ВходящиеПараметры.БонуснаяПрограммаЛояльности;
	ПараметрыОткрытия = Новый Структура;
	Если ВходящиеПараметры.Свойство("УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов")
		И ВходящиеПараметры.УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов Тогда
		ПараметрыОткрытия.Вставить("УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов", Истина);
	Иначе
		МассивСообщений = Новый Массив;
		ПеренестиСкидкиПодаркиВТоварыСервер(МассивСообщений);
		
		Если МассивСообщений.Количество() <> 0 Тогда
			ЗаголовокИнформации = НСтр("ru = 'При переносе подарков в товары произошла ошибка.'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, МассивСообщений[0]);
		КонецЕсли; 
		
		ОтменитьОплатуБонусами();
		ОбновитьФормуНаКлиенте();
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("Магазин", Объект.Магазин);
	ПараметрыОткрытия.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	АдресТоваров = АдресВХранилище("Товары");
	ПараметрыОткрытия.Вставить("АдресТабличнойЧастиТовары", АдресТоваров);
	ПараметрыОткрытия.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыОткрытия.Вставить("БонуснаяПрограммаЛояльности", БонуснаяПрограммаЛояльности);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения(
		"ОповещениеОткрытьФормуОплатыБонуснымиБаллами", ЭтотОбъект, ПараметрыОткрытия);
	
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаОплатыБонуснымиБаллами",
		ПараметрыОткрытия,
		ЭтотОбъект,,,,
		ОповещениеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоследнийПробитыйЧекПродажи(МассивКассККМ)
	
	Возврат РозничныеПродажиСервер.ПоследнийПробитыйЧекПродажи(МассивКассККМ);
	
КонецФункции

&НаКлиенте
Функция ДоступностьПриемаДС()
	
	Возврат НЕ ЗначениеЗаполнено(Объект.ДокументРасчета) И НЕ ЗначениеЗаполнено(Объект.ЧекККМПродажа);
	
КонецФункции

&НаКлиенте
Функция ЭтоВозвратКлиент()
	Возврат Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат")
КонецФункции

&НаКлиенте
Процедура РассчитатьКонтролироватьОстаткиТоваровПриЗакрытииЧека()
	
	КонтролироватьОстаткиТоваровПриЗакрытииЧека = ИспользоватьНастройкуРМК
		И НаборПравИНастроек.КонтролироватьОстаткиТоваровПриЗакрытииЧека
		И НЕ ЭтоРабочееМестоOffLine
		И НЕ Объект.ОперацияСДенежнымиСредствами;
	
КонецПроцедуры

&НаСервере
Процедура ПродолженииЧекаСервера(ЧекККМВОбработке, Отказ, ТребуетсяПересчетСкидок = Истина)
	
	ДокументРасчета = ЧекККМВОбработке.ДокументРасчета;
	ОперацияСДенежнымиСредствами = ЧекККМВОбработке.ОперацияСДенежнымиСредствами;
	ЭтоЗачетАвансаБыло = ЭтоЗачетАванса;
	
	ЗаполнитьДаннымиПоЧекуККМ(ЧекККМВОбработке, Отказ);
	Если ЗначениеЗаполнено(ЧекККМВОбработке.ДокументРасчета) Тогда
		Объект.ДокументРасчета = ЧекККМВОбработке.ДокументРасчета;
		Объект.ОперацияСДенежнымиСредствами = ЧекККМВОбработке.ОперацияСДенежнымиСредствами;
	ИначеЕсли НЕ ЭтоЗачетАвансаБыло ИЛИ НЕ ЗначениеЗаполнено(ДокументРасчета) Тогда
		Объект.ДокументРасчета = ЧекККМВОбработке.ДокументРасчета;
		Объект.ОперацияСДенежнымиСредствами = ЧекККМВОбработке.ОперацияСДенежнымиСредствами;
	Иначе
		Объект.ДокументРасчета = ДокументРасчета;
		Объект.ОперацияСДенежнымиСредствами = ОперацияСДенежнымиСредствами;
	КонецЕсли;
	
	Если ЧекККМВОбработке.Оплачивается Тогда
		ТребуетсяПересчетСкидок = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументРасчета) Тогда
		ЗаполнитьПризнакОплатыПоДокументуРасчета();
	КонецЕсли;
	
КонецПроцедуры

#Область ЕГАИС

&НаСервере
Функция ПодготовитьДанныеДляПробитияЧека(ЧекККМСсылка, НомерЧека, ТекстСообщения, НеПечататьБумажныйЧек = Ложь)
	
	СтруктураДанных = РозничныеПродажиКлиентСервер.СтруктураДанныхДляПробитияЧека();
	СтруктураДанных.ЧекККМСсылка = ЧекККМСсылка;
	СтруктураДанных.НомерЧека = НомерЧека;
	СтруктураДанных.ТекстСообщения = ТекстСообщения;
	СтруктураДанных.Объект = Объект;
	СтруктураДанных.ЭтоВозвратПродукцииИСМПБезМарки = ЭтоВозвратПродукцииИСМПБезМарки;
	СтруктураДанных.НеПечататьБумажныйЧек = НеПечататьБумажныйЧек;
	
	Возврат РозничныеПродажиСервер.ПодготовитьДанныеДляПробитияЧека(СтруктураДанных);
	
КонецФункции

#КонецОбласти

&НаСервереБезКонтекста
Функция КассаККМизЧекаСервер(ЧекККМСсылка)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЧекККМСсылка, "КассаККМ");
	
КонецФункции

&НаКлиенте
Процедура ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения)
	
	РозничныеПродажиКлиент.ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения, Объект.Оплата, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьУдалениеСтрокиОплаты(ПараметрДействия)
	
	ТекущаяСтрокаОплаты = Объект.Оплата.НайтиПоИдентификатору(ПараметрДействия.ИдентификаторВыбраннойСтроки);
	
	Если ТекущаяСтрокаОплаты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Оплата.Удалить(ТекущаяСтрокаОплаты);
	
	ОбновитьФормуНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура СторноОплатыПлатежнойКартойЧерезЭквайринговыйТерминал(ОповещениеПриЗавершении, ВыбраннаяСтрока, ПараметрДействия)
	
	ИдентификаторУстройстваЭТ = Неопределено;
	ИдентификаторУстройстваФР = Неопределено;
	
	СуммаОперации = ВыбраннаяСтрока.Сумма;
	НомерКарты = ВыбраннаяСтрока.НомерПлатежнойКарты;
	НомерСсылкиОперации = ВыбраннаяСтрока.СсылочныйНомер;
	НомерЧекаЭТ = ВыбраннаяСтрока.НомерЧекаЭТ;
	СтрокаСлипЧека = "";
	ТекстОписаниеОшибки = "";
	
	СтруктураОтбора = Новый Структура("Организация", ВыбраннаяСтрока.Организация);
	МассивСтрок = ТаблицаКассККМОрганизаций.НайтиСтроки(СтруктураОтбора);
	
	ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(МассивСтрок[0].КассаККМ);
	ИдентификаторУстройстваФР = ПараметрыКассыККМ.ИдентификаторУстройства;
	СтруктураЭквайринговыйТерминал = СтруктураДанныхЭТ(ВыбраннаяСтрока.ЭквайринговыйТерминал);
	ИдентификаторУстройстваЭТ = СтруктураЭквайринговыйТерминал.ПодключаемоеОборудование;
	
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда
		ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования = Истина;
		СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования = Истина;
	КонецЕсли;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	ПараметрДействия.Вставить("ИспользоватьКассуККМБезПодключенияОборудования",
		ИспользоватьКассуККМБезПодключенияОборудования);
	ПараметрДействия.Вставить("ИдентификаторУстройстваФР", ИдентификаторУстройстваФР);
	ПараметрДействия.Вставить("ИдентификаторУстройстваЭТ", ИдентификаторУстройстваЭТ);
	ПараметрДействия.Вставить("СуммаОперации", СуммаОперации);
	ПараметрДействия.Вставить("НомерСсылкиОперации", НомерСсылкиОперации);
	ПараметрДействия.Вставить("НомерЧекаЭТ", НомерЧекаЭТ);
	ПараметрДействия.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ПараметрДействия.Вставить("Результат", Ложь);
	ПараметрДействия.Вставить("ТекстОписаниеОшибки", "");

	Если НЕ СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
		
		ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
		ПараметрыОперации.ТипТранзакции = "AuthorizeVoid";
		ПараметрыОперации.СуммаОперации = СуммаОперации;
		ПараметрыОперации.НомерЧекаЭТ = НомерЧекаЭТ;
		ПараметрыОперации.СсылочныйНомер = НомерСсылкиОперации;
		
		ЭтаФорма.Доступность = Ложь;
		
		Оповещение = Новый ОписаниеОповещения(
			"СторноОплатыПлатежнойКартойЧерезЭквайринговыйТерминалЗавершение", ЭтотОбъект, ПараметрДействия);
		
		МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(
			Оповещение,
			УникальныйИдентификатор,
			ПараметрДействия.ИдентификаторУстройстваЭТ,
			ПараметрДействия.ИдентификаторУстройстваФР,
			ПараметрыОперации);
			
	Иначе
		
		ПараметрДействия.Вставить("ТекстОписаниеОшибки", ТекстОписаниеОшибки);
		ПараметрДействия.Вставить("СтрокаСлипЧека", СтрокаСлипЧека);
		
		ТекстИнформации = НСтр("ru = 'Требуется выполнить операцию отмены оплаты на эквайринговом терминале.
		|Сумма операции: %1
		|Номер карты: %2
		|Ссылочный номер: %3
		|Номер чека: %4
		|'");
		
		ТекстИнформации = СтрШаблон(ТекстИнформации, СуммаОперации, НомерКарты, НомерСсылкиОперации, НомерЧекаЭТ);
		
		ЗаголовокИнформации = НСтр("ru = 'Операция отмены оплаты на терминале прошла успешно?'");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрДействия",
			ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрДействия));
		
		ПараметрДействия.ОткрытаБлокирующаяФорма = Истина;
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ОповещениеОткрытьФормуВопросаПодтвержденияОбОтменеОплаты", ЭтотОбъект, ДополнительныеПараметры);
		
		ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации,,ОбработчикОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработкуВыбораПлатежнойКарты(ПараметрДействия)
	
	РозничныеПродажиКлиент.ЗавершитьОбработкуВыбораПлатежнойКарты(Объект, ПараметрДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибочноеПробитиеЧека()
	
	Если ДанныеОтправленыВБанк Тогда
		ПередаватьТаблицуОплат = Истина;
		ОтменитьОплатуПК = Истина;
	КонецЕсли;
	
	Если ДанныеОтправленыВПлатежнуюСистему Тогда
		ОтменитьОплатуВПлатежнойСистемеПоЧеку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУспешноеПробитиеЧека()
	
	ПередаватьТаблицуОплат = Ложь;
	ОтменитьОплатуПК       = Ложь;
	ДанныеОтправленыВБанк  = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция ПрисутствуютДанныеПереданныеВБанк()
	
	Возврат РозничныеПродажиКлиент.ПрисутствуютДанныеПереданныеВБанк(Объект);
	
КонецФункции

&НаСервере
Процедура ДеактивироватьСкидкиПоИдентификаторуЧека(ДокументСсылка)
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		СкидкиНаценкиСерверПереопределяемый.ДеактивироватьСкидкиПоИдентификаторуЧека(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПогаситьОднократныеСкидки()
	
	СкидкиНаценкиСерверПереопределяемый.ПогаситьОднократныеСкидки(Объект);
	Объект.ПредъявленныеКодыОднократныхСкидок.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКнопкиВерхнейПанели()
	
	РозничныеПродажиСервер.ЗаполнитьКнопкиВерхнейПанели(Элементы, ИспользоватьНастройкуРМК, НастройкаРМК.КнопкиВерхнейПанели);
	
КонецПроцедуры

&НаСервере
Функция ИзменитьТекущуюСтроку(Номенклатура, Количество)
	
	//ОтключенныйФункционал
	//В конфигурации поставщика при наличии ОУ по маркировке строки товара в чеке не объединяются, даже если включена опция сворачивания строк в настройках РМК.
	//Для веркии РК принято решение не использовать этот функционал и сохранить старый подход: и маркируемый, и не маркируемый товар работает одинаково и учитывает настройку.
	Если Ложь Тогда
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|		&ОпределениеПризнакаМаркируемаяПродукция КАК МаркируемаяПродукция
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Ссылка";
	
	
	ОпределениеМаркируемаяПродукция = ИнтеграцияИСРТ.ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса("Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОпределениеПризнакаМаркируемаяПродукция", ОпределениеМаркируемаяПродукция);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Номенклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.МаркируемаяПродукция И Количество > 0 Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	КонецЕсли; //Конец ОтключенныйФункционал
	
	Если ИспользоватьНастройкуРМК И НаборПравИНастроек.ОбъединятьПозицииСОдинаковымТоваром И Количество > 0 Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСистемыНалогообложения()
	
	РозничныеПродажиСервер.ЗаполнитьСистемыНалогообложенияРМК(ТаблицаСистемНалогообложения, Объект.Магазин);
	
КонецПроцедуры

&НаКлиенте
Функция ШтрихкодВФорматеGS1(Штрихкод)
	
	Возврат ШтрихкодированиеИСРТКлиент.ШтрихкодВФорматеGS1(Штрихкод);
	
КонецФункции

&НаСервереБезКонтекста
Функция СтруктураДанныхЭТ(Терминал)
	
	Возврат РозничныеПродажиСервер.СтруктураДанныхЭТ(Терминал);
	
КонецФункции

&НаСервере
Процедура ОбновитьКэшМаркируемойПродукции()
	
	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьВозвратПродукцииИСМПБезМарок(ДополнительныеПараметры, СписокНоменклатуры)
	
	ЗаголовокИнформации = НСтр("ru = 'Возврат маркируемой продукции'");
	
	ТекстВопроса = НСтр("ru = 'Не указаны коды маркировки для следующих товаров:'") + Символы.ПС;
	Для Каждого ЭлементСписка Из СписокНоменклатуры Цикл 
		ТекстВопроса = ТекстВопроса + "%1" + Символы.ПС;
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ЭлементСписка);
	КонецЦикла;
	ТекстВопроса = ТекстВопроса + Символы.ПС + НСтр("ru = 'Перейти к оплате возврата?'");
	
	ОбработчикОповещения = Новый ОписаниеОповещения(
		"ОповещениеПодтвержденияВозвратаПродукцииИСМПБезМарок",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(ЗаголовокИнформации, ТекстВопроса, ,ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОплатуТоваров(ПараметрыОплаты)

	Перем ПараметрыИнформации;
	
	Отказ = Ложь;
	ИмяФормыОплаты = ПараметрыОплаты.ИмяФормыОплаты;
	ОплатаПлатежнойКартой = ПараметрыОплаты.ОплатаПлатежнойКартой;
	ОплатаПлатежнойСистемой = ПараметрыОплаты.ОплатаПлатежнойСистемой;
	Печать = ПараметрыОплаты.Печать;
	ОплатаЭСНСПК = ПараметрыОплаты.ОплатаЭСНСПК;
	ОплатаТолькоНаличными = ИмяФормыОплаты = "ФормаПростойОплаты";
	ОплатаЯндексКассой = ИмяФормыОплаты = "ФормаОплатыЯндексКасса";
	ПроверитьКассовыеСмены(Отказ, ПараметрыИнформации);
	ПроверитьКонтрагентаФизЛицо(Отказ, ПараметрыИнформации);
	
	ОплатаМобильныйПлатеж = ПараметрыОплаты.ОплатаМобильныйПлатеж;
	
	Если Отказ Тогда
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
		Возврат;
	КонецЕсли;
	
	// &ЗамерПроизводительности  
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ПодготовкаОплатыРМК");
	
	// Скидки
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("Отказ", Отказ);
	ПараметрыДействия.Вставить("ПараметрыИнформации", ПараметрыИнформации);
	ПараметрыДействия.Вставить("ИмяФормыОплаты", ИмяФормыОплаты);
	ПараметрыДействия.Вставить("ОплатаПлатежнойКартой", ОплатаПлатежнойКартой);
	ПараметрыДействия.Вставить("ОплатаТолькоНаличными", ОплатаТолькоНаличными);
	ПараметрыДействия.Вставить("ОплатаМобильныйПлатеж", ОплатаМобильныйПлатеж);
	ПараметрыДействия.Вставить("ОплатаПлатежнойСистемой", ОплатаПлатежнойСистемой);
	ПараметрыДействия.Вставить("ОплатаЭСНСПК", ОплатаЭСНСПК);
	ПараметрыДействия.Вставить("ОплатаЯндексКассой", ОплатаЯндексКассой);
	ПараметрыДействия.Вставить("Печать", Печать);
	ПараметрыДействия.Вставить("ИмяОбработкиОповещения", "ОплатитьТоварыПослеВыводаСообщений");
	ПараметрыДействия.Вставить("НадписьЗаголовок", НадписьЗаголовок);
	ПараметрыДействия.Вставить("ЦветТекстаЗаголовка", Элементы.НадписьЗаголовок.ЦветТекста);
	ПараметрыДействия.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыДействия.Вставить("ОперацияСДенежнымиСредствами", Объект.ОперацияСДенежнымиСредствами);
	ПараметрыДействия.Вставить("СуммаОстаткаДокументаРасчета", СуммаОстаткаДокументаРасчета);
	ПараметрыДействия.Вставить("ЭтоЗачетАванса", ЭтоЗачетАванса);
	ПараметрыДействия.Вставить("ЭтоВозвратАванса", ЭтоВозвратАванса);
	ПараметрыДействия.Вставить("ЭтоОплатаРассрочки", ЭтоОплатаРассрочки);
	ПараметрыДействия.Вставить("ИзменятьКонтрагента",
		НЕ ЗначениеЗаполнено(Объект.ДокументРасчета) И НЕ ЗначениеЗаполнено(Объект.ЗаказПокупателя));
	
	ЭтоАвансБезРасшифровкиПоТоварам = Объект.ОперацияСДенежнымиСредствами 
		И (Объект.Товары.Количество() = 0)
		И НЕ ЗначениеЗаполнено(Объект.ДокументРасчета);
	ЭтоАванс = Объект.ОперацияСДенежнымиСредствами И НЕ ЗначениеЗаполнено(Объект.ДокументРасчета);
	ПараметрыДействия.Вставить("ЭтоАвансБезРасшифровкиПоТоварам", ЭтоАвансБезРасшифровкиПоТоварам);
	ПараметрыДействия.Вставить("ЭтоАванс", ЭтоАванс);
	
	Если НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") 
		И НЕ Объект.СкидкиРассчитаны
		И НЕ Объект.ПродажаПоЗаказу Тогда
		
		НазначитьАвтоматическиеСкидкиКлиент(,, ПараметрыДействия);
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		
		ПодготовитьОплатуБонусамиКСторнированию();
		РасчитатьСкидкуПриВозврате();
		ОбновитьИнформациюПоСуммам();
	КонецЕсли;
	
	Если ПараметрыДействия.Свойство("ВыведеныСообщения") Тогда
		Возврат;
	Иначе
		ОплатитьТоварыПослеВыводаСообщений(Неопределено, ПараметрыДействия);
	КонецЕсли;
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

#Область Штрихкодирование

&НаСервере
Процедура ОбработатьСтрокиТЧ(ДобавленныеСтроки, ИзмененныеСтроки, КэшированныеЗначения = Неопределено, ОбработатьБезМаркировки = Ложь) Экспорт
	
	Для Каждого Строка Из ДобавленныеСтроки Цикл 
		СтруктураПараметров = ШтрихкодированиеИСРТ.ДанныеШтрихкодаДляОбработки();
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, Строка);
		СтруктураПараметров.Вставить("ТекущаяСтрока", Строка);
		СтруктураПараметров.Вставить("ДобавленаСтрока", Истина);
		СтруктураПараметров.ОбработатьБезМаркировки = ОбработатьБезМаркировки;
		
		ДобавитьНайденныеПозицииТоваровСервер(СтруктураПараметров);
		
	КонецЦикла;
	
	Для Каждого Строка Из ИзмененныеСтроки Цикл 
		СтруктураПараметров = ШтрихкодированиеИСРТ.ДанныеШтрихкодаДляОбработки();
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, Строка);
		СтруктураПараметров.Вставить("ТекущаяСтрока", Строка);
		СтруктураПараметров.ОбработатьБезМаркировки = ОбработатьБезМаркировки;
		
		ДобавитьНайденныеПозицииТоваровСервер(СтруктураПараметров);
	КонецЦикла;
	
	Если ДобавленныеСтроки.Количество()>0 Или ИзмененныеСтроки.Количество()>0 Тогда
		СобытияФормИС.ПриИзмененииЭлемента(ЭтотОбъект, "Товары", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция Подключаемый_ВыполнитьДействие(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения)
	
	ПараметрыОбработкиВыбора =
		ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьПараметрыОбработкиВыбора(
			РезультатВыбора,
			РезультатОбработкиШтрихкода,
			КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	
	ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода, КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
КонецФункции

&НаСервере
Функция Подключаемый_ОбработатьВводШтрихкода(ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования = Неопределено)
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеОбщегоНазначенияИС.ОбработатьВводШтрихкода(
		ЭтотОбъект, ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода, КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПослеОбработкиШтрихкодов()
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КэшированныеЗначения", КэшированныеЗначения);
	ДополнительныеПараметры.Вставить("СтандартнаяОбработка", Истина);
	СобытияФормИСКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "Штрихкоды", ДополнительныеПараметры);
	КэшированныеЗначения = ДополнительныеПараметры.КэшированныеЗначения;
	
	ШтрихкодированиеИСКлиентПереопределяемый.ПослеОбработкиШтрихкодов(
		ЭтотОбъект,
		ДанныеДляОбработки,
		КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	//ИнтеграцияИСМПТК_РозничноеВыбытие
	Если УчетМаркировкаИСМПТК 
		И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
		Если ДополнительныеПараметры.Свойство("ВызовИзФормыРучногоВводаШК") Тогда 
			ЭтоКодМаркировки = РозничноеВыбытиеИСМПТКВызовСервера.ПроверитьШтрихкодПоФорматуКодовМаркировки(ИсходныеДанные.Штрихкод);
			Если ЭтоКодМаркировки Тогда
				ТекстСообщения = НСтр("ru = 'Код маркировки необходимо сканировать напрямую в форме документа! Форма поиска по штрихкоду (F7) предназначена для ввода данных с клавиатуры!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат;
			Иначе
				ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(ИсходныеДанные.Штрихкод);
				Если Не ДанныеНоменклатуры = Неопределено 
					И ЗначениеЗаполнено(ДанныеНоменклатуры.Номенклатура) Тогда
					ВидПродукцииШК = ПолучитьВидПродукцииПоНоменклатуре(ДанныеНоменклатуры.Номенклатура);
					УчетТГВключен = РозничноеВыбытиеИСМПТКВызовСервера.ПроверитьВключениеУчетаТГ(ВидПродукцииШК);
					Если ЗначениеЗаполнено(ВидПродукцииШК) Тогда
						Если Не УчетТГВключен Тогда 
							ТекстОшибки = НСтр("ru = 'Внимание! Штрихкод %1 зарегистрирован на номенклатуру %2 с особенностями учета ""%3""! На текущий момент учет этой товарной группы в базе не включен.'")
							+ НСтр("ru = 'Необходимо изменить вид номенклатуры на ""Товар без особенностей учета"" или включить учет маркировки этой товарной группы!'");
							ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, ИсходныеДанные.Штрихкод, ДанныеНоменклатуры.Номенклатура, ВидПродукцииШК);
							ОбщегоНазначенияИСМПТКВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Розничная продажа маркируемого товара'"), "Предупреждение",,, ТекстОшибки);
							ТекстСообщения = НСтр("ru = 'Внимание! Обнаружены проблемы в настройках учета маркируемой продукции! Требуется сообщить Администратору. Подробности в Журнале регистрации.'"); 
							ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
						Иначе
							ТекстСообщения = НСтр("ru = 'Внимание: среди выбранных товаров есть маркируемые. У таких товаров необходимо сразу сканировать коды маркировки в форме документа!'");
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(ЭтотОбъект);
	
	ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
	
	РезультатОбработки = ОбработатьВводШтрихкода(ИсходныеДанные, Неопределено, ПараметрыСканирования, ДополнительныеПараметры);
	
	//ИнтеграцияИСМПТК_РозничноеВыбытие
	Если Ложь И ДополнительныеПараметры.Свойство("ОбработатьКодМаркировкиПовторно") Тогда
	//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
		ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры);
	Иначе
		ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования);
		ШтрихкодированиеОбщегоНазначенияИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьВводШтрихкода(ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования = Неопределено, ДополнительныеПараметры)
	
	РезультатОбработкиШтрихкода =
		ШтрихкодированиеОбщегоНазначенияИС.ОбработатьВводШтрихкода(ЭтотОбъект, ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
		
	//ИнтеграцияИСМПТК_РозничноеВыбытие
	Если Ложь Тогда
	#Область ОтключенныйФункционал
	
	Если ДополнительныеПараметры.Свойство("ОбработатьКодМаркировкиПовторно") Тогда
		// Исключаем множественный вызов.
		ДополнительныеПараметры.Удалить("ОбработатьКодМаркировкиПовторно");
	ИначеЕсли РезультатОбработкиШтрихкода.ТребуетсяУточнениеДанных
		И НЕ РезультатОбработкиШтрихкода.ВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха) = Неопределено
		И ИнтеграцияГИСМ.ПодсистемаНеИспользуется() Тогда
		// Создание ШтрихкодаУпаковки для продукции из натурального меха по Серии.
		ДанныеПоискаПоШтрихкоду = ПодключаемоеОборудованиеРТ.ДанныеПоискаПоШтрихкоду(РезультатОбработкиШтрихкода.Штрихкод, ЭтотОбъект);
		Для Каждого ЭлементПоиска Из ДанныеПоискаПоШтрихкоду.ЗначенияПоиска Цикл
			Если ТипЗнч(ЭлементПоиска) = Тип("Структура") И ЭлементПоиска.Свойство("Серия")
				И ЗначениеЗаполнено(ЭлементПоиска.Серия) Тогда
				Если ИнтеграцияИСРТ.ЗарегистрироватьШтрихкодУпаковкиПоСерии(ЭлементПоиска.Серия) Тогда
					ДополнительныеПараметры.Вставить("ОбработатьКодМаркировкиПовторно");
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ДополнительныеПараметры.Свойство("ОбработатьКодМаркировкиПовторно") Тогда
		ПереопределитьОрганизациюГОСИС(РезультатОбработкиШтрихкода, ПараметрыСканирования);
		ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода, КэшированныеЗначения);
	КонецЕсли;
	
	#КонецОбласти
	КонецЕсли;
	//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаКлиенте
Функция ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования)
	
	ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода();
	ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода = РезультатОбработки;
	ПараметрыЗавершенияВводаШтрихкода.Форма                       = ЭтотОбъект;
	ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования       = ПараметрыСканирования;
	ПараметрыЗавершенияВводаШтрихкода.ДанныеШтрихкода             = ИсходныеДанные;
	ПараметрыЗавершенияВводаШтрихкода.ОбработатьШтрихкод          = "ОбработатьКодМаркировки";
	ПараметрыЗавершенияВводаШтрихкода.ВыполнитьДействие           = "ОбработкаКодаМаркировкиВыполнитьДействие";
	ПараметрыЗавершенияВводаШтрихкода.ЗавершениеОбработки         = "ОповещениеЗавершениеОбработкиКодаМаркировки";
	
	Возврат ПараметрыЗавершенияВводаШтрихкода;
	
КонецФункции

&НаКлиенте
Процедура ОповещениеЗавершениеОбработкиКодаМаркировки(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Результат.ТребуетсяОбработкаШтрихкода Тогда
		Штрихкод = Неопределено;
		Если ЗначениеЗаполнено(Результат.Штрихкод) Тогда
			Штрихкод = Результат.Штрихкод;
		ИначеЕсли ТипЗнч(Результат.ИсходныеДанные) = Тип("Структура") И Результат.ИсходныеДанные.Свойство("Штрихкод") Тогда
			Штрихкод = Результат.ИсходныеДанные.Штрихкод;
		ИначеЕсли ТипЗнч(Результат.ДанныеШтрихкода) = Тип("Структура") И Результат.ДанныеШтрихкода.Свойство("Штрихкод") Тогда
			Штрихкод = Результат.ДанныеШтрихкода.Штрихкод;
		ИначеЕсли ТипЗнч(Результат.ДанныеШтрихкода) = Тип("Строка") Тогда
			Штрихкод = Результат.ДанныеШтрихкода;
		КонецЕсли;
		
		// Обработаем штрихкод средствами РТ.
		Если ЗначениеЗаполнено(Штрихкод) Тогда
			ОповещениеПоискаПоШтрихкоду(Штрихкод);
		КонецЕсли;
		
	ИначеЕсли НеобходимВводЦены Тогда
		ОбработатьВводЦены();
	ИначеЕсли НЕ ИнформацияРМК = Неопределено Тогда
		ЗаголовокИнформации = ИнформацияРМК.ЗаголовокИнформации;
		ТекстИнформации =     ИнформацияРМК.ТекстИнформации;
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		
		ИнформацияРМК = Неопределено;
	ИначеЕсли НЕ Объект.ПродажаПоЗаказу Тогда
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
		ОбновитьФормуНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВводЦены()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("АктивизироватьСтроку", ТекущиеДанные.ПолучитьИдентификатор());
		СтруктураПараметров.Вставить("ВвестиЦену");
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметров);
	КонецЕсли;
	
	НеобходимВводЦены = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода, КэшированныеЗначения)
	
	Если Не РезультатОбработкиШтрихкода.ТребуетсяОбработкаШтрихкода Тогда
		
		ОбработатьСтрокиТЧ(
			РезультатОбработкиШтрихкода.ДобавленныеСтроки,
			РезультатОбработкиШтрихкода.ИзмененныеСтроки,
			КэшированныеЗначения,
			РезультатОбработкиШтрихкода.ОбработкаШтрихкодаБезМарки);
			
		РезультатОбработкиШтрихкода.ИзмененныеСтроки = Неопределено;
		РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКодаМаркировкиВыполнитьДействие(ДанныеДляВыполненияДействия, ДополнительныеПараметры) Экспорт
	
	РезультатВыбора             = ДанныеДляВыполненияДействия.РезультатВыбора;
	РезультатОбработкиШтрихкода = ДанныеДляВыполненияДействия.РезультатОбработкиШтрихкода;
	КэшированныеЗначения        = ДанныеДляВыполненияДействия.КэшированныеЗначения;
	ПараметрыСканирования       = ДанныеДляВыполненияДействия.ПараметрыСканирования;
	
	Действие = ДанныеДляВыполненияДействия.Действие;
	РезультатОбработкиШтрихкода = ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(
		ДанныеДляВыполненияДействия.ИсходныеДанные, РезультатОбработкиШтрихкода, ДанныеДляВыполненияДействия.ПараметрыСканирования);
	ШтрихкодированиеОбщегоНазначенияИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецПроцедуры

&НаСервере
Функция ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения)
	
	ПараметрыОбработкиВыбора    = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	
	ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода, КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУточненияДанных()
	
	СобытияФормРТКлиент.ПриИзмененииЭлемента(ЭтотОбъект, "Подключаемый_ОткрытьФормуУточненияДанных");
	
КонецПроцедуры

&НаСервере
Функция ВозможностьОперацийБезМарок(ТекущаяНоменклатура)
	
	Если ЗначениеЗаполнено(ТекущаяНоменклатура) Тогда
		ВидПродукции = ИнтеграцияИС.ВидПродукцииПоНоменклатуре(ТекущаяНоменклатура);
		Если ЗначениеЗаполнено(ВидПродукции) Тогда
			Возврат ИнтеграцияИСМПВызовСервера.ДатаОбязательнойМаркировкиПродукции(ВидПродукции) >= Объект.Дата;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПереопределитьОрганизациюГОСИС(РезультатОбработкиШтрихкода, ПараметрыСканирования)
	
	Если ПараметрыСканирования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Номенклатура = Неопределено;
	Если ЗначениеЗаполнено(РезультатОбработкиШтрихкода.ДанныеШтрихкода) Тогда
		РезультатОбработкиШтрихкода.ДанныеШтрихкода.Свойство("Номенклатура", Номенклатура);
	КонецЕсли;
	
	ПараметрыПереопределения = ИнтеграцияИСРТКлиентСервер.ПараметрыПереопределенияОрганизацииГОСИС(
		ЭтотОбъект, РезультатОбработкиШтрихкода.ВидыПродукции, Номенклатура);
	Если ПараметрыПереопределения.ТребуетсяСерверныйВызов Тогда
		ИнтеграцияИСРТВызовСервера.ДополнитьПараметрыПереопределенияОрганизацииГОСИС(ПараметрыПереопределения);
	КонецЕсли;
	
	ИнтеграцияИСРТКлиентСервер.ПереопределитьОрганизациюГОСИСРМК(ЭтотОбъект, ПараметрыПереопределения, ПараметрыСканирования);
	
КонецПроцедуры

#КонецОбласти

#Область ПлатежныеСистемы

&НаСервере
Процедура ПроверитьВозможностьВозвратаПлатежнойСистемой()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМОплата.Ссылка КАК ДокументОплаты
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка = &ЧекККМПродажаОснование
	|	И ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяСистема)
	|	И ЧекККМОплата.Ссылка.СсылкаЯндексКассы = """"";
	
	Запрос.УстановитьПараметр("ЧекККМПродажаОснование", Объект.ЧекККМПродажа);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		УстановитьДоступностьОтдельныхЭлементовФормы("КартинкаЧО10БезналичныеПлатежи", 	Истина);
		УстановитьДоступностьОтдельныхЭлементовФормы("КартинкаЧО11ПлатежныеСистемы", 	Истина);
		УстановитьДоступностьОтдельныхЭлементовФормы("КартинкаЧО05Наличные", 			Ложь);
		УстановитьДоступностьОтдельныхЭлементовФормы("КартинкаЧО06ПлатежнаяКарта", 		Ложь);
		УстановитьДоступностьОтдельныхЭлементовФормы("КартинкаЧО07СложнаяОплата", 		Ложь);
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.ЧекККМПродажа) Тогда
			УстановитьДоступностьОтдельныхЭлементовФормы("КартинкаЧО10БезналичныеПлатежи", 	Ложь);
			УстановитьДоступностьОтдельныхЭлементовФормы("КартинкаЧО11ПлатежныеСистемы", 	Ложь);
		Иначе
			УстановитьДоступностьОтдельныхЭлементовФормы("КартинкаЧО10БезналичныеПлатежи", 	Истина);
			УстановитьДоступностьОтдельныхЭлементовФормы("КартинкаЧО11ПлатежныеСистемы", 	Истина);
		КонецЕсли;
		
		УстановитьДоступностьОтдельныхЭлементовФормы("КартинкаЧО05Наличные", 			Истина);
		УстановитьДоступностьОтдельныхЭлементовФормы("КартинкаЧО07СложнаяОплата", 		Истина);	
		УстановитьДоступностьОтдельныхЭлементовФормы("КартинкаЧО06ПлатежнаяКарта", 		Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВыборБанковскойВыписки()
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьВыборБанковскойВыписки", ЭтотОбъект);
	ПараметрыФормы       = ПараметрыОтрытияФормыВыбораБанковскойВыписки();
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораДокументаРасчета",
		ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаСервере
Функция НастройкиЯндексКассы()

	Интеграции = Новый ТаблицаЗначений;
	Интеграции.Колонки.Добавить("Интеграция", Новый ОписаниеТипов("СправочникСсылка.НастройкиОнлайнОплат"));	
	
	Для Каждого СтрокаТаблицы Из ТаблицаКассККМОрганизаций Цикл
		
		Интеграция = ОнлайнОплатыРТ.НастройкаОнлайнОплатыОрганизации(СтрокаТаблицы.Организация);

		Если ЗначениеЗаполнено(Интеграция) 
			И Интеграции.Найти(Интеграция, "Интеграция") = Неопределено Тогда
			Интеграции.Добавить().Интеграция = Интеграция;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Интеграции.Количество() > 0 Тогда
		Возврат Интеграции;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПараметрыОтрытияФормыВыбораБанковскойВыписки()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Контрагент"           , Объект.Контрагент);
	ПараметрыФормы.Вставить("Магазин"              , Объект.Магазин);
	ПараметрыФормы.Вставить("МассивОрганизаций"    , МассивОрганизацийКлиент);
	ПараметрыФормы.Вставить("ЗаказПокупателя"      , Объект.ЗаказПокупателя);
	ПараметрыФормы.Вставить("ЭтоБезналичнаяОплата",  Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьПриБезналичнойОплате(Доступность)
	
	УстановитьДоступностьПриБезналичнойОплатеСервер(Доступность);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПриБезналичнойОплатеСервер(Доступность)
	
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаЧО05Наличные"          , Доступность);
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаЧО06ПлатежнаяКарта"    , Доступность);
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаЧО08ОплатаБонусами"    , Доступность);
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаЧО10БезналичныеПлатежи", Доступность);
	
	Если Доступность Тогда
		УстановитьДоступностьОтдельныхЭлементовФормы("КартинкаЧО07СложнаяОплата", 	  Доступность);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьНаличиеДоговораЯндексКассы(Организация)
	
	Возврат ОнлайнОплатыРТВызовСервераПовтИсп.ПроверитьНаличиеДоговораОнлайнОплаты(Организация);
	
КонецФункции

&НаСервере
Функция ПробитЧекНаБезналичныйПлатеж()
	
	Возврат ФинансыСервер.ПробитЧекНаБезналичныйПлатеж(Объект.Ссылка, Объект.ДокументРасчета);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПлатежныеСистемы()
	
	НастройкиИнтеграции = ИнтеграцияСПлатежнымиСистемамиРТСервер.НастройкиИнтеграции(
		ТаблицаКассККМОрганизаций.Выгрузить().ВыгрузитьКолонку("Организация"), 
		Объект.Магазин);
		
	Если ЗначениеЗаполнено(НастройкиИнтеграции) Тогда
		Для Каждого Настройка Из НастройкиИнтеграции Цикл 
			ОрганизацииПлатежныхСистем.Добавить(Настройка.Организация);
		КонецЦикла;
	КонецЕсли;
	
	НастройкиЯндексКассы = НастройкиЯндексКассы();
	Если ЗначениеЗаполнено(НастройкиЯндексКассы) Тогда
		Для Каждого Настройка Из НастройкиЯндексКассы Цикл
			ПодключенныеНастройкиЯндексКассы.Добавить(
				Настройка.Интеграция, 
				ОнлайнОплатыРТ.ПараметрыИнтеграции(Настройка.Интеграция).Наименование);
		КонецЦикла;
	КонецЕсли;
	
	Если ОрганизацииПлатежныхСистем.Количество() = 0 Тогда
		Элементы.КартинкаЧО11ПлатежныеСистемы.Видимость = Ложь;
		Элементы.КомандаЧО11ПлатежныеСистемы.Видимость  = Ложь;
	КонецЕсли;
	
	КассыЭСНСПК = ТаблицаКассККМОрганизаций.НайтиСтроки(Новый Структура("ВозможнаОплатаЭС", Истина));
	
	ИспользоватьОплатуСертификатамиНСПК = КассыЭСНСПК.Количество()>0;
	Элементы.КартинкаЧО12ЭСНСПК.Видимость = ИспользоватьОплатуСертификатамиНСПК;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОбновитьФормуНаКлиенте()
	
	ОбновитьТаблоНоменклатуры();
	ОбновитьИнформациюПоСуммам();
	УстановитьЗаголовок();
	ЦветаКнопок();
	
	//ИнтеграцияИСМПТК_РозничноеВыбытие
	ПриИзмененииЭлементаИСМПТК();
	//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
				
КонецПроцедуры 

&НаСервере
Функция ВходныеПараметрыДляАннулированияЧекаККМ(КассаККМ = Неопределено)
	
	// Подготовка таблицы общих параметров.
	ТипЧека = ?(Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат,1,0);
	ОбщиеПараметры = Новый Массив();
	ОбщиеПараметры.Добавить(ТипЧека);                //  1 - Тип чека
	ОбщиеПараметры.Добавить(Истина);                 //  2 - Признак фискального чека.
	ОбщиеПараметры.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КассаККМ, "Владелец"));
	
	Возврат ОбщиеПараметры;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуВводаПерсональныхДанных(РезультатОткрытияФормы, СтруктураКомандыПечати, МассивСсылокЧеков)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрДействия", СтруктураКомандыПечати);
	ДополнительныеПараметры.Вставить("РезультатОткрытияФормы", РезультатОткрытияФормы);
	ДополнительныеПараметры.Вставить("МассивСсылокЧеков", МассивСсылокЧеков);
	
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаПерсональныхДанных", ЭтотОбъект, ДополнительныеПараметры);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	Если МассивСсылокЧеков.Количество() > 0 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ФизЛицо");
		ПараметрыФормы.Вставить("ДатаРождения");
		ПараметрыФормы.Вставить("ПоДокументу");
		ПараметрыФормы = ОбщегоНазначенияРТВызовСервера.ЗначенияРеквизитовОбъекта(МассивСсылокЧеков[0], ПараметрыФормы);
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ФизЛицо"     , Объект.ФизЛицо);
		ПараметрыФормы.Вставить("ДатаРождения", Объект.ДатаРождения);
		ПараметрыФормы.Вставить("ПоДокументу" , Объект.ПоДокументу);
	КонецЕсли; 
	
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВводаПерсональныхДанных",
				 ПараметрыФормы,
				 ЭтотОбъект, 
				 УникальныйИдентификатор,,,
				 ОбработчикОповещения, 
				 Режим); 
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВЧкККМПерсональныеДанные(Результат, Параметры)
	Для каждого ЭлементМассиваСсылкиЧеков Из Параметры.МассивСсылокЧеков Цикл
		
		ОбъектЧекККМ = ЭлементМассиваСсылкиЧеков.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ОбъектЧекККМ, Результат);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектЧекККМ);
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ИсправитьТаблицуКоманд()
	
	АдресТаблицыКоманд = ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд;
	
	Если ЗначениеЗаполнено(АдресТаблицыКоманд) Тогда
		ТаблицаКоманд = ПолучитьИзВременногоХранилища(АдресТаблицыКоманд);
		НоваяТаблицаКоманд = ТаблицаКоманд.Скопировать();
		
		ФормыДоПробитияЧека = РозничныеПродажиКлиентСервер.ФормыЗаявленийДоПробитияЧека();
		
		Для каждого ФормаДоПробитияЧека Из ФормыДоПробитияЧека Цикл
			СтрокаТаблицы = НоваяТаблицаКоманд.Найти(ФормаДоПробитияЧека, "Идентификатор");
			Если НЕ СтрокаТаблицы = Неопределено Тогда
				СтрокаТаблицы.РежимЗаписи = "НеЗаписывать";
			КонецЕсли;
		КонецЦикла;
		
		АдресТаблицыКоманд = ПоместитьВоВременноеХранилище(НоваяТаблицаКоманд, УникальныйИдентификатор);
		ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд = АдресТаблицыКоманд;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, ИдентификаторПечатнойФормы)
	
	ВременнаяКоллекцияПечатныхФорм = ПодготовитьКоллекциюПечатныхФорм(ИдентификаторПечатнойФормы);
	
	Документы.ЧекККМ.Печать(МассивОбъектов, ПараметрыПечати, ВременнаяКоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
	Если ВременнаяКоллекцияПечатныхФорм.Количество() > 0 
		И КоллекцияПечатныхФорм.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(КоллекцияПечатныхФорм[0], ВременнаяКоллекцияПечатныхФорм[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьСтруктуруПараметровВывода()
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("ЗаголовокФормы", "");
	ПараметрыВывода.Вставить("ДоступнаПечатьПоКомплектно", Ложь); // не используется
	
	СтруктураПараметровПисьма = Новый Структура("Получатель,Тема,Текст", Неопределено, "", "");
	ПараметрыВывода.Вставить("ПараметрыОтправки", СтруктураПараметровПисьма);
	
	Возврат ПараметрыВывода;
	
КонецФункции

&НаСервере
// Конструктор для параметра КоллекцияПечатныхФорм процедуры Печать.
//
// Возвращаемое значение:
//  ТаблицаЗначений - пустая коллекция печатных форм:
//   * ИмяМакета - Строка - идентификатор печатной формы;
//   * ИмяВРЕГ - Строка - идентификатор в верхнем регистре символов для быстрого поиска;
//   * СинонимМакета - Строка - представление печатной формы;
//   * ТабличныйДокумент - ТабличныйДокумент - печатная форма;
//   * Экземпляров - Число - количество копий, которое необходимо вывести на печать;
//   * Картинка - Картинка - (не используется);
//   * ПолныйПутьКМакету - Строка - используется для быстрого перехода к редактированию макета печатной формы;
//   * ИмяФайлаПечатнойФормы - Строка - имя файла;
//                           - Соответствие - имена файлов для каждого объекта:
//                              ** Ключ - ЛюбаяСсылка - ссылка на объект печати;
//                              ** Значение - Строка - имя файла;
//   * ОфисныеДокументы - Соответствие - коллекция печатных форм в формате офисных документов:
//                         ** Ключ - Строка - адрес во временном хранилище двоичных данных печатной формы;
//                         ** Значение - Строка - имя файла печатной формы.
//
Функция ПодготовитьКоллекциюПечатныхФорм(Знач Идентификаторы)
	
	Результат = Новый ТаблицаЗначений;
	Для Каждого ИмяКолонки Из УправлениеПечатьюКлиентСервер.ИменаПолейКоллекцииПечатныхФорм() Цикл
		Результат.Колонки.Добавить(ИмяКолонки);
	КонецЦикла;
	
	Если ТипЗнч(Идентификаторы) = Тип("Строка") Тогда
		Идентификаторы = СтрРазделить(Идентификаторы, ",");
	КонецЕсли;
	
	Для Каждого Идентификатор Из Идентификаторы Цикл
		ПечатнаяФорма = Результат.Найти(Идентификатор, "ИмяМакета");
		Если ПечатнаяФорма = Неопределено Тогда
			ПечатнаяФорма = Результат.Добавить();
			ПечатнаяФорма.ИмяМакета = Идентификатор;
			ПечатнаяФорма.ИмяВРЕГ = ВРег(Идентификатор);
			ПечатнаяФорма.Экземпляров = 1;
		Иначе
			ПечатнаяФорма.Экземпляров = ПечатнаяФорма.Экземпляров + 1;
		КонецЕсли;
	КонецЦикла;
	
	Результат.Индексы.Добавить("ИмяВРЕГ");
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВводПараметровАгентскогоПлатежа(ТекущиеДанные, Элемент = Неопределено, ПараметрДействия = Неопределено)
	
	Если ПараметрДействия = Неопределено Тогда
		ПараметрДействия = Новый Структура;
		ПараметрДействия.Вставить("УчетХарактеристик",         Ложь);
		ПараметрДействия.Вставить("НеУдалятьСтроку",           Истина);
		ПараметрДействия.Вставить("ИдентификаторСтроки",       ТекущиеДанные.ПолучитьИдентификатор());
		ПараметрДействия.Вставить("ПрекратитьДействия",        Ложь);
	КонецЕсли;
	
	ПараметрДействия.Вставить("ОткрытаБлокирующаяФорма",   Истина);
	ПараметрДействия.Вставить("ПредупреждениеНулевойЦены", НСтр("ru = 'Введите размер платежа.'"));
	ПараметрДействия.Вставить("ПересчиталиЦену",           Истина);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
	
	ОбработчикОповещения = Новый ОписаниеОповещения(
		"ОповещениеОткрытьФормуВводаЧислаТоварыПриИзмененииНоменклатуры", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыВводаЧисла = Новый Структура;
	ПараметрыВводаЧисла.Вставить("ДанныеАгентскогоДоговора", ТекущиеДанные.ДанныеАгентскогоДоговора);
	ПараметрыВводаЧисла.Вставить("ЧислоВвода", ТекущиеДанные.Цена);
	
	Если НЕ Элемент = Неопределено Тогда
		ПараметрыВводаЧисла.Вставить("ВознаграждениеВключеноВСтоимость", Элемент = Элементы.ТоварыЦенаСАгентскимВознаграждением);
		Если Элемент = Элементы.ТоварыСумма Тогда
			ПараметрыВводаЧисла.Вставить("ЧислоВвода", ТекущиеДанные.Сумма);
			ПараметрДействия.Вставить("ПересчиталиСумму", Истина);
			ПараметрДействия.Вставить("ПересчиталиЦену",  Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ПолучитьИнтерактивноЧисло(НСтр("ru = 'Введите размер платежа'"), ОбработчикОповещения, ПараметрыВводаЧисла);
	
КонецПроцедуры

&НаКлиенте
Функция ТоварыВводДополнительнойИнформации(Элемент)
	
	ВводДополнительнойИнформации = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ЭтотОбъект.ТолькоПросмотр ИЛИ ТекущиеДанные = Неопределено Тогда
		Возврат ВводДополнительнойИнформации;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыСтатусУказанияСерий Тогда
		
		ВводДополнительнойИнформации = Истина;
		ВвестиСерии();
		
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыЦена
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыСумма
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыЦенаСАгентскимВознаграждением Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ДанныеАгентскогоДоговора)
			И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			
			ВводДополнительнойИнформации = Истина;
			ВводПараметровАгентскогоПлатежа(ТекущиеДанные, Элемент.ТекущийЭлемент);
			
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТоварыСтатусПроверкиГосИС" Тогда
		
		ВводДополнительнойИнформации = Истина;
		
		ДанныеЧастичногоВыбытия = Новый Структура("ВидПродукцииИС, Номенклатура, Характеристика, Количество, GTIN");
		ЗаполнитьЗначенияСвойств(ДанныеЧастичногоВыбытия, ТекущиеДанные);
		Если ТекущиеДанные.СтатусПроверкиГосИС = 2
			И ЗначениеЗаполнено(ДанныеЧастичногоВыбытия.ВидПродукцииИС)
			И ЗначениеЗаполнено(ДанныеЧастичногоВыбытия.Номенклатура)
			И ОбщегоНазначенияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(ДанныеЧастичногоВыбытия.ВидПродукцииИС)
			И Не ОбщегоНазначенияИСМПКлиентСерверПовтИсп.НастройкиСканированияКодовМаркировки().ПодбиратьКодыМаркировкиВскрытыхПотребительскихУпаковокПоFIFO
			И ТребуетсяУточнениеПоКодуGTIN(ДанныеЧастичногоВыбытия)
			И ЗначениеЗаполнено(ДанныеЧастичногоВыбытия.GTIN) Тогда
			ОбработатьКодМаркировки(Новый Структура("Количество, Штрихкод", 1, ДанныеЧастичногоВыбытия.GTIN));
		Иначе
			СобытияФормИСКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Новый Структура("Имя", ""), ДанныеЧастичногоВыбытия);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВводДополнительнойИнформации;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьСерийныеНомера(Объект, СтрокаТабличнойЧасти)
	
	РозничныеПродажиКлиент.ОчиститьСерийныеНомера(Объект, СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаСервере
Функция ИнициализацияСтрокиТоваров(Форма, СтруктураПараметров)
	
	ОбработатьБезМаркировки = Ложь;
	Если СтруктураПараметров.Свойство("ОбработатьБезМаркировки")
		И СтруктураПараметров.ОбработатьБезМаркировки Тогда
		ОбработатьБезМаркировки = Истина;
	КонецЕсли;
	
	Номенклатура = СтруктураПараметров.Номенклатура;
	
	Если СтруктураПараметров.Свойство("Характеристика") Тогда
		Характеристика = СтруктураПараметров.Характеристика;
		Если Характеристика = Неопределено Тогда
			Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	Иначе
		Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("Упаковка") Тогда
		Упаковка = СтруктураПараметров.Упаковка;
		Если НЕ ЗначениеЗаполнено(Упаковка) Тогда
			Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	Иначе
		Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("Количество") Тогда
		Количество = СтруктураПараметров.Количество;
	Иначе
		Количество = 1;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("СерийныйНомер") Тогда
		СерийныйНомер = СтруктураПараметров.СерийныйНомер;
	КонецЕсли;
	
	СворачиватьПоСтрокеПоиска = ИзменитьТекущуюСтроку(Номенклатура, Количество);
	
	//Отключенный функционал
	Если Ложь И СтруктураПараметров.Свойство("ДанныеМаркировки")
		И СтруктураПараметров.ДанныеМаркировки <> Неопределено
		И СтруктураПараметров.ДанныеМаркировки.Разобран Тогда
		СворачиватьПоСтрокеПоиска = Ложь;
	КонецЕсли; //Конец Отключенный функционал
	
	ТипУпаковки = Перечисления.ТипыУпаковок.ПустаяСсылка();
	Если СтруктураПараметров.Свойство("ТипУпаковки") Тогда
		ТипУпаковки = СтруктураПараметров.ТипУпаковки;
		МаркируемаяПродукция = ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
	КонецЕсли;
	
	МРЦ = 0;
	Если СтруктураПараметров.Свойство("МРЦ") Тогда
		МРЦ = СтруктураПараметров.МРЦ;
	КонецЕсли;
	
	ЗагрузкаИзТСД = Ложь;
	ОбновитьКоличество = Ложь;
	Если СтруктураПараметров.Свойство("ЗагрузкаИзТСД") Тогда
		Если СтруктураПараметров.ЗагрузкаИзТСД = Истина Тогда
			ЗагрузкаИзТСД = Истина;
		КонецЕсли;
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ОбновитьКоличество") Тогда
		Если СтруктураПараметров.ОбновитьКоличество = Истина Тогда
			ОбновитьКоличество = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПоиска = Неопределено;
	Если Объект.ОперацияСДенежнымиСредствами Тогда 
		ПараметрыПоиска = Новый Структура;
	ИначеЕсли СворачиватьПоСтрокеПоиска Или (ЗагрузкаИзТСД И ОбновитьКоличество) Тогда
		ПараметрыПоиска = Новый Структура;
		Если ОбработатьБезМаркировки Тогда
			ПараметрыПоиска.Вставить("КоличествоАкцизныхМарок", 0);
		Иначе
			Если ЗначениеЗаполнено(МРЦ) Тогда
				ПараметрыПоиска.Вставить("МРЦ", МРЦ);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ОбработатьБезМаркировки Тогда
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("КоличествоАкцизныхМарок", 0);
	КонецЕсли;
	
	МассивТоваров = Новый Массив;
	Если НЕ ПараметрыПоиска = Неопределено Тогда
		ПараметрыПоиска.Вставить("Номенклатура",   Номенклатура);
		ПараметрыПоиска.Вставить("Характеристика", Характеристика);
		ПараметрыПоиска.Вставить("Упаковка",       Упаковка);
		Если СтруктураПараметров.Свойство("НоменклатураЕГАИС") И ЗначениеЗаполнено(СтруктураПараметров.НоменклатураЕГАИС) Тогда
			ПараметрыПоиска.Вставить("НоменклатураЕГАИС", СтруктураПараметров.НоменклатураЕГАИС);
		КонецЕсли;
		
		МассивТоваров = Объект.Товары.НайтиСтроки(ПараметрыПоиска);
	КонецЕсли;
	
	Если МассивТоваров.Количество() > 0 Тогда
		
		ПоследнееРедактированиеКоличество = МассивТоваров[0].КоличествоУпаковок;
		Если ЗагрузкаИзТСД И ОбновитьКоличество Тогда
			МассивТоваров[0].КоличествоУпаковок = Количество;
		ИначеЕсли ОбработатьБезМаркировки Тогда 
			МассивТоваров[0].КоличествоУпаковок = МассивТоваров[0].КоличествоУпаковок;
		Иначе
			МассивТоваров[0].КоличествоУпаковок = МассивТоваров[0].КоличествоУпаковок + Количество;
		КонецЕсли;
		ТекущаяСтрока = МассивТоваров[0];
	Иначе
		Если Объект.Товары.Количество() = 0 Тогда
			Объект.Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		ТекущаяСтрока = Объект.Товары.Добавить();
		ТекущаяСтрока.Номенклатура = Номенклатура;
		ТекущаяСтрока.Характеристика = Характеристика;
		ТекущаяСтрока.Упаковка = Упаковка;
		ТекущаяСтрока.КоличествоУпаковок = Количество;
		ТекущаяСтрока.МРЦ = МРЦ;
		
		СтруктураПараметров.Вставить("ДобавленаСтрока", Истина);
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("Штрихкод") Тогда
		ТекущаяСтрока.Штрихкод = СтруктураПараметров.Штрихкод;
	КонецЕсли;
	
	Возврат ТекущаяСтрока;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеSMSEmail()
	
	РозничныеПродажиКлиент.ОбновитьДанныеSMSEmail(Объект.Телефон, Объект.АдресЭП, Ложь, ДанныеSMSИлиEmail, Элементы);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНаличиеТоваровОрганизацииЯндексКассы(Интеграция)
	
	Результат = Ложь;
	СтруктураОтбора = Новый Структура("Организация", ОнлайнОплатыРТ.ПараметрыИнтеграции(Интеграция).Организация);
	МассивСтрок = ТаблицаКассККМОрганизаций.НайтиСтроки(СтруктураОтбора);
	
	Если Объект.Товары.НайтиСтроки(СтруктураОтбора).Количество() <> 0 Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ЭСНСПК

&НаКлиенте
Процедура ВыполнитьЧО12ЭСНСПК()
	
	СтрокиКассЭС = ТаблицаКассККМОрганизаций.НайтиСтроки(Новый Структура("ВозможнаОплатаЭС", Истина));
	
	Если СтрокиКассЭС.Количество() = 0 Тогда
		ЗаголовокИнформации = НСтр("ru = 'Оплата электронным сертификатом'");
		ТекстИнформации = НСтр("ru = 'Не подключено ни одной ККТ с возможностью оплаты электронным сертификатом.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		Возврат;
	КонецЕсли;
	
	СтрокиДляОплатыЭС = Объект.Товары.НайтиСтроки(Новый Структура("ВозможнаОплатаЭС", Истина));
	
	Если СтрокиДляОплатыЭС.Количество() = 0 Тогда
		ЗаголовокИнформации = НСтр("ru = 'Оплата электронным сертификатом'");
		ТекстИнформации = НСтр("ru = 'В документе не выбраны товары из перечня ТРУ, либо у товаров не указан код ТРУ.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		Возврат;
	КонецЕсли;
	
	ОплатитьТовары("ФормаСложнойОплаты", Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуТоваровФСС(ДополнительныеПараметры, Товары)
	
	ТоварныеПозиции = Новый Массив();
	Если ДополнительныеПараметры.Свойство("Организация") Тогда
		СтрокиДляОплатыЭС = Товары.НайтиСтроки(
			Новый Структура("ВозможнаОплатаЭС, Организация", Истина, ДополнительныеПараметры.Организация));
	Иначе
		СтрокиДляОплатыЭС = Товары.НайтиСтроки(Новый Структура("ВозможнаОплатаЭС", Истина));
	КонецЕсли;
	
	Для Каждого СтрокаТоваров Из СтрокиДляОплатыЭС Цикл
		ТоварнаяПозиция = Новый Структура();
		ТоварнаяПозиция.Вставить("Номенклатура", СтрокаТоваров.Номенклатура);
		ТоварнаяПозиция.Вставить("КодТовараТРУ", СтрокаТоваров.КодТРУ);
		ТоварнаяПозиция.Вставить("Количество", СтрокаТоваров.Количество);
		ТоварнаяПозиция.Вставить("Цена", Окр(СтрокаТоваров.СуммаВсего/СтрокаТоваров.Количество, 2));
		ТоварнаяПозиция.Вставить("Сумма", СтрокаТоваров.СуммаВсего);
		ТоварныеПозиции.Добавить(ТоварнаяПозиция);
	КонецЦикла;
	
	ДополнительныеПараметры.Вставить("ТоварныеПозицииФСС", ТоварныеПозиции);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьДанныеФискальногоЧекаНСПК(ЧекККМ)
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФискальнойОперацииНСПКНаСервере(ЧекККМ)
	
	
КонецФункции

&НаКлиенте
Процедура ПередатьДанныеФискальногоЧекаНСПКЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ДобавитьОстатокТоваровНаСкладах(СтруктураПараметровКлиента)
	Если СтруктураПараметровКлиента.Свойство ("ВыборДанныхПоиска") Тогда
	СтруктураВХранилище = ПолучитьИзВременногоХранилища(СтруктураПараметровКлиента.ВыборДанныхПоиска);
	ТаблицаВыбора = СтруктураВХранилище.ТаблицаВыбора;
	ТаблицаВыбора.Очистить();
	ТаблицаВыбора.Колонки.Добавить("Остаток");

	
	МассивЗначений = СтруктураПараметровКлиента.ЗначенияПоиска;
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗначений.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Для Каждого Строка Из МассивЗначений Цикл 
		Новаястрока = ТаблицаЗначений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,"Номенклатура,Характеристика");
	КонецЦикла;
	
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 	"ВЫБРАТЬ
	               	|	ВременнаяТаблица.Номенклатура,
	               	|	ВременнаяТаблица.Характеристика
	               	|ПОМЕСТИТЬ ВременнаяТаблица
	               	|ИЗ
	               	|	&ТаблицаЗначений КАК ВременнаяТаблица
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ
	               	|	ТоварыНаСкладахОстатки.Склад,
	               	|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	               	|	ВременнаяТаблица.Номенклатура КАК Номенклатура,
	               	|	ВременнаяТаблица.Характеристика КАК Характеристика
	               	|ИЗ
	               	|	ВременнаяТаблица КАК ВременнаяТаблица
	               	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад = &Склад) КАК ТоварыНаСкладахОстатки
	               	|		ПО ВременнаяТаблица.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	               	|			И ВременнаяТаблица.Характеристика = ТоварыНаСкладахОстатки.Характеристика";
	Запрос.УстановитьПараметр("ТаблицаЗначений",ТаблицаЗначений);
	Запрос.УстановитьПараметр("Склад", ЭтаФорма.СкладПродажиПоУмолчанию);
	
	Результат = Запрос.Выполнить().Выбрать();
	//Результат = Результат.
	НомерСтроки = 0 ;
	Пока Результат.Следующий() Цикл
				СтруктураПараметровКлиента.ЗначенияПоиска[НомерСтроки].Вставить("Остаток",Результат.КоличествоОстаток);
		НомерСтроки = НомерСтроки + 1;

	КонецЦикла;
		
	Для Каждого СтрокаТовара Из СтруктураПараметровКлиента.ЗначенияПоиска Цикл
		НоваяСтрока = ТаблицаВыбора.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара);
	КонецЦикла;

	СтруктураВыбора = Новый Структура;
	СтруктураВыбора.Вставить("ТаблицаВыбора", ТаблицаВыбора);
	Если СтруктураПараметровКлиента.ТипДанныхПО = "Штрихкод" Тогда
		СтруктураВыбора.Вставить("Штрихкод", СтруктураПараметровКлиента.ДанныеПО);
	ИначеЕсли СтруктураПараметровКлиента.ТипДанныхПО = "МагнитныйКод" Тогда
		СтруктураВыбора.Вставить("МагнитныйКод", СтруктураПараметровКлиента.ДанныеПО);
	КонецЕсли;
	СтруктураПараметровКлиента.Вставить("ВыборДанныхПоиска", ПоместитьВоВременноеХранилище(СтруктураВыбора));

	КонецЕсли;
	Возврат СтруктураПараметровКлиента;	
	
КонецФункции

&НаСервере
Функция ПроверитьДоступностьФОВыбытиеВСЧерезЧеки()
	
	Возврат ПолучитьФункциональнуюОпцию("ВыбытиеТоваровВСВЧекахККМ");
	
КонецФункции

#КонецОбласти

//ИнтеграцияИСМПТК_РозничноеВыбытие
 #Область МаркировкаИСМПТК
 
 &НаКлиенте
Процедура КомандаПО99КодыМаркировки(Команда)
	
	РозничноеВыбытиеИСМПТККлиент.ВыполнитьПереопределяемуюКомандуРМК(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО99КодыМаркировкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РозничноеВыбытиеИСМПТККлиент.ВыполнитьПереопределяемуюКомандуРМК(ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьМаркиИСМПТК(Объект, СтрокаТабличнойЧасти)
	
	Если УчетМаркировкаИСМПТК Тогда
		РозничноеВыбытиеИСМПТККлиентПереопределяемый.ОчиститьМаркиИСМПТК(Объект, СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры

 #Область НастройкиФормы

&НаСервере
Процедура ПерезаполнитьПризнакиМаркировкиИСМПТК()
	
	Если УчетМаркировкаИСМПТК Тогда
		РозничноеВыбытиеИСМПТКПереопределяемый.ЗаполнитьДанныеМаркировки(ЭтотОбъект);
		Настройки = РозничноеВыбытиеИСМПТКПереопределяемый.НастройкиИсточникаКешаШтрихкодовУпаковок();
		Настройки.Штрихкоды = "КодыМаркировкиИСМПТК";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЭлементаИСМПТК()
	
	Если УчетМаркировкаИСМПТК 
		И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ПерезаполнитьПризнакиМаркировкиИСМПТК();
		ЗаполнитьПризнакКодаМаркировкиВТоварах();
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакКодаМаркировкиВТоварах()
	
	РозничноеВыбытиеИСМПТКПереопределяемый.ЗаполнитьПризнакКодаМаркировкиВТоварах(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкиШтрихкода

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершениеПроверкаМаркировки(Штрихкод)
	
	//Проверяем, если это ЕАН, относится ли он к маркировке
	Если ЗначениеЗаполнено(Штрихкод) Тогда 
		
		ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(Штрихкод);
		Если Не ДанныеНоменклатуры = Неопределено Тогда
			Номенклатура = ДанныеНоменклатуры.Номенклатура; 
			ВидПродукцииШКПоМаркировке = ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);
			Если ЗначениеЗаполнено(ВидПродукцииШКПоМаркировке) 
				И РозничноеВыбытиеИСМПТКВызовСервера.ПроверитьВключениеУчетаТГ(ВидПродукцииШКПоМаркировке) Тогда
				ТекстСообщения = НСтр("ru = 'Внимание: среди выбранных товаров есть маркируемые. У таких товаров необходимо сразу сканировать коды маркировки в форме документа!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандаКодыМаркировки

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКомандуИСМПТК(Команда)
	
	РозничноеВыбытиеИСМПТККлиентПереопределяемый.ВыполнитьПереопределяемуюКомандуЧекККМ(ЭтотОбъект, Команда, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыПроверкиКМ(ТаблицаПроверенныхКМ) Экспорт

	Если Не ТаблицаПроверенныхКМ = Неопределено Тогда //Форма проверки и подбора КМ вернула какой-то результат
		
		КодыКДобавлению = Неопределено;
		ЧекИзменен = Ложь;
		ЗакрытиеФормыПроверкиКМНаСервере(ЧекИзменен, ТаблицаПроверенныхКМ,, КодыКДобавлению);
		Модифицированность = ЧекИзменен;
				
		Если ЧекИзменен Тогда
			
			//Добавляем коды
			Если Не КодыКДобавлению = Неопределено Тогда
				Для Каждого КодКДобавлению Из КодыКДобавлению Цикл
					
					ДанныеКодаДляДобавления = Новый Структура("Количество, Штрихкод", 1, КодКДобавлению.КодМаркировки);
					ОбработатьКодМаркировки(ДанныеКодаДляДобавления);
					
				КонецЦикла;
			КонецЕсли;
			
			Для Каждого СтрокаТовар Из Объект.Товары Цикл
				ПриИзмененииТоварыНоменклатура(СтрокаТовар);
				//ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, СтрокаТовар, СтруктураДействий, КэшированныеЗначения);
			КонецЦикла;
			
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
			ЗаполнитьОстаткиСервер();
			ЗаполнитьСтатусыУказанияСерий();
			ОбновитьФормуНаКлиенте();
			ОбновлениеДисплеяПокупателя("ИзмененияКоличества");
			ОбновитьИнтерфейс();
			
		КонецЕсли;
		
		//Устанавливаем иконку марки в строках товаров
		ЗаполнитьПризнакКодаМаркировкиВТоварах();
		ПерезаполнитьПризнакиМаркировкиИСМПТК();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерий()

	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ЧекККМ.ПараметрыУказанияСерий(Объект));
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		
КонецПроцедуры

&НаСервере
Процедура ЗакрытиеФормыПроверкиКМНаСервере(ЧекИзменен, ТаблицаПроверенныхКМ, НеОбработанныеКодыКДобавлению = Неопределено, КодыКДобавлению) Экспорт

	ДанныеТаблиц = Новый Структура();
	ДанныеТаблиц.Вставить("ТаблицаКодов", 	Объект.КодыМаркировкиИСМПТК.Выгрузить());
	ДанныеТаблиц.Вставить("ТаблицаТоваров", Объект.Товары.Выгрузить());
	
	ДополнительныеПараметрыОбработкиРезультата = Новый Структура();
	ДополнительныеПараметрыОбработкиРезультата.Вставить("НеОбработанныеКодыКДобавлению", НеОбработанныеКодыКДобавлению); //Для последующего дозаполнения таблиц, если это потребуется после подбора КМ. См. комментарий в ЗакрытиеФормыПроверкиКМ.
	ДополнительныеПараметрыОбработкиРезультата.Вставить("ОбъединятьПозицииСОдинаковымТоваром", НаборПравИНастроек.ОбъединятьПозицииСОдинаковымТоваром); 
		
	РозничноеВыбытиеИСМПТКПереопределяемый.ЗакрытиеФормыПроверкиКМНаСервере(ТаблицаПроверенныхКМ, ЧекИзменен, ДанныеТаблиц, ДополнительныеПараметрыОбработкиРезультата);
	//Проверяем результат обработки данных формы Проверки КМ.
	Если ЧекИзменен Тогда
		//Значит удалялись или добавлялись КМ, а также могли измениться строки товаров. 
		//Загружаем скорректированные таблицы в документ.
		ТоварыПослеИзменения = ДанныеТаблиц.ТаблицаТоваров;
		КодыПослеИзменения	 = ДанныеТаблиц.ТаблицаКодов;
		Объект.Товары.Загрузить(ТоварыПослеИзменения);
		Объект.КодыМаркировкиИСМПТК.Загрузить(КодыПослеИзменения);
		
		Если Не ДополнительныеПараметрыОбработкиРезультата.НеОбработанныеКодыКДобавлению = Неопределено Тогда 
			//Есть коды, которые нужно добавить вместе с товарами
			КодыКДобавлению = ДополнительныеПараметрыОбработкиРезультата.НеОбработанныеКодыКДобавлению;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаДействий_ФормаВводаКодаМаркировки

&НаКлиенте
Процедура ДобавлениеМПБезКодаМаркировкиПредупреждение(ВидПродукции, ДанныеШтрихкода, ДанныеНоменклатуры, ОткрытиеПослеДобавления = Ложь) Экспорт
	
	//Для табачной продукции на стороне ИС МПТ реализован сервис автоматического выбытия.
	//Поэтому в розницу могут выбывать пачки и блоки без сканирования кодов. Для того, чтобы система
	//каждый раз не запрашивала код, реализована опция, позволяющая отключить проверку.
	Если (РозничноеВыбытиеИСМПТКВызовСервера.ПроверитьОпциюНеЗапрашиватьКМТабакаВРознице() 
		И ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная"))
		Или (РозничноеВыбытиеИСМПТКВызовСервера.ПроверитьОпциюНеЗапрашиватьКМФармыВРознице() 
		И ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты")) Тогда
		ИсходныеДанные = ДополнитьДанныеШтрихкодаТабачнойПродукцииПриУказанииБезКМ(ДанныеШтрихкода, ДанныеНоменклатуры, ВидПродукции);
		ИсходныеДанные.Вставить("ОткрытиеПослеДобавления", Истина);
		ДобавлениеКМКакНемаркированногоТовараИСМПТК(ИсходныеДанные, Неопределено);
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("ВидПродукции",     ВидПродукции);
	ПараметрыОткрытияФормы.Вставить("Номенклатура",     ДанныеНоменклатуры.Номенклатура);
	ПараметрыОткрытияФормы.Вставить("Характеристика",   ДанныеНоменклатуры.Характеристика);
	ПараметрыОткрытияФормы.Вставить("ЕдиницаИзмерения", ДанныеНоменклатуры.ЕдиницаИзмерения);
	ПараметрыОткрытияФормы.Вставить("ДанныеШтрихкода",  ДанныеШтрихкода);
	ПараметрыОткрытияФормы.Вставить("ОткрытиеПослеДобавления", ОткрытиеПослеДобавления);
	Если ОткрытиеПослеДобавления Тогда
		ПараметрыОткрытияФормы.Вставить("КлючСвязиСтроки", 0);
	КонецЕсли;
	
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ДополнительныеПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеЗакрытиеФормыВводаКМ", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.РозничноеВыбытиеМаркированнойПродукцииИСМПТК.Форма.ФормаВводаКодаМаркировки", ПараметрыОткрытияФормы, ЭтотОбъект,,,,ОписаниеОповещения, РежимОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗакрытиеФормыВводаКМ(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат <> Неопределено Тогда
		ИмяСобытия = Результат.ОбработчикОповещения;
		РезультатОбработкиШтрихкода = Результат.ДопДанные;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(ИмяСобытия, ЭтотОбъект);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатОбработкиШтрихкода);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ДополнитьДанныеШтрихкодаТабачнойПродукцииПриУказанииБезКМ(ДанныеШтрихкода, ДанныеНоменклатуры, ВидПродукции)
	
	ДанныеШтрихкодаБезМаркировки = РозничноеВыбытиеИСМПТК.ИнициализироватьДанныеШтрихкода();
	ДанныеШтрихкодаБезМаркировки.Номенклатура            = ДанныеНоменклатуры.Номенклатура;
	ДанныеШтрихкодаБезМаркировки.Характеристика          = ДанныеНоменклатуры.Характеристика;
	ДанныеШтрихкодаБезМаркировки.Упаковка                = ДанныеНоменклатуры.ЕдиницаИзмерения;
	ДанныеШтрихкодаБезМаркировки.Количество		         = 1;
	ДанныеШтрихкодаБезМаркировки.ТипУпаковки             = ПредопределенноеЗначение("Перечисление.ТипыУпаковокИСМПТК.МаркированныйТовар");
	ДанныеШтрихкодаБезМаркировки.ОбработатьБезМаркировки = Истина;
	ДанныеШтрихкодаБезМаркировки.ВидыПродукции.Добавить(ВидПродукции);
	ДанныеШтрихкодаБезМаркировки.Штрихкод             = ДанныеШтрихкода.EAN;
	ДанныеШтрихкодаБезМаркировки.МаркируемаяПродукция = Ложь;
	
	ИсходныеДанные = Новый Структура();
	ИсходныеДанные.Вставить("ИсходныеДанные", ДанныеШтрихкодаБезМаркировки);
	ИсходныеДанные.Вставить("ТребуетсяОбработкаШтрихкода", Истина);
	
	Возврат ИсходныеДанные;
	
КонецФункции

&НаКлиенте
Процедура ВводКодаМаркировкиПослеПредупрежденияИСМПТК(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;		
			
	//Обрабатываем штрихкод как маркируемую продукцию, т.к. пользователь указал Код маркировки после предупреждения
	ДанныеКодаМаркировки = ИсходныеДанные.ИсходныеДанные;
	
	Если ИсходныеДанные.Свойство("КлючСвязиСтроки") Тогда
		КлючСтрокиТоваровВременныйИСМПТК = ИсходныеДанные.КлючСвязиСтроки;
	КонецЕсли;

	//Сначала проверяем КМ на дубль в таблице марок
	ШтрихкодДляПроверки = ДанныеКодаМаркировки.Штрихкод;
	МожноПродолжитьОбработкуКМ = ПроверитьТЧКодыМаркировкиНаНаличиеКМ(ШтрихкодДляПроверки);
	
	Если Не МожноПродолжитьОбработкуКМ Тогда
		ВывестиСообщениеОбОшибке(НСтр("ru = 'Код маркировки уже указан в документе!'"));	
		Возврат;
	КонецЕсли;
	
	ДанныеМаркировки   = РозничноеВыбытиеИСМПТКВызовСервера.РазобратьШтриховойКодТовара(ШтрихкодДляПроверки, Истина);
	ДанныеНоменклатуры = ПолучитьНоменклатуруПоШтрихкоду(ДанныеМаркировки.EAN);
	
	ДополнительныеПараметры = Новый Структура();
	Если ИсходныеДанные.Свойство("ОткрытиеПослеДобавления")
		И ИсходныеДанные.ОткрытиеПослеДобавления Тогда
		
		ДанныеНоменклатурыИзСтрокиТЧ = Новый Структура("Номенклатура, Характеристика, ИспользуютсяУпаковки, Упаковка, БазоваяЕдиницаИзмерения");
		//В этом случае товар в документ уже добавлен и нужно выполнить только дозаполнение кода маркировки.
		СтрокаТЧ  = Объект.Товары.НайтиСтроки(Новый Структура("КлючСвязи", КлючСтрокиТоваровВременныйИСМПТК))[0];
		БазоваяЕИ = РозничноеВыбытиеИСМПТКПереопределяемый.ПолучитьЗначениеБазовойЕИНоменклатуры(СтрокаТЧ.Номенклатура); 
		ДанныеНоменклатурыИзСтрокиТЧ.Вставить("Номенклатура", 	СтрокаТЧ.Номенклатура);
		ДанныеНоменклатурыИзСтрокиТЧ.Вставить("Характеристика", СтрокаТЧ.Характеристика);		
		ДанныеНоменклатурыИзСтрокиТЧ.Вставить("ИспользуютсяУпаковки", ЗначениеЗаполнено(СтрокаТЧ.Упаковка));
		ДанныеНоменклатурыИзСтрокиТЧ.Вставить("Упаковка", ?(ЗначениеЗаполнено(СтрокаТЧ.Упаковка), СтрокаТЧ.Упаковка, БазоваяЕИ));
		ДанныеНоменклатурыИзСтрокиТЧ.Вставить("БазоваяЕдиницаИзмерения", БазоваяЕИ);
		ДополнительныеПараметры.Вставить("ОткрытиеПослеДобавления", ИсходныеДанные.ОткрытиеПослеДобавления);
		ДополнительныеПараметры.Вставить("ДанныеНоменклатуры", 		ДанныеНоменклатурыИзСтрокиТЧ);
   	Иначе
		ДополнительныеПараметры.Вставить("ДанныеНоменклатуры", ДанныеНоменклатуры);
	КонецЕсли;
	ДополнительныеПараметры.Вставить("ДанныеМаркировки", ДанныеМаркировки);
	
	ОбработатьКодМаркировкиИСМПТКПродолжение(ДанныеКодаМаркировки, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеКМКакНемаркированногоТовараИСМПТК(ИсходныеДанные, КэшированныеЗначения) Экспорт
	
	//Обрабатываем штрихкод как немаркируемую продукцию, т.к. пользователь отказался от указания КМ
	//Т.е. используем стандартный механизм добавления ШК
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИсходныеДанные.Свойство("ОткрытиеПослеДобавления") Тогда
		Если ИсходныеДанные.ОткрытиеПослеДобавления Тогда
			Возврат; //Т.к. товар уже добавлен в документ
		КонецЕсли;
	КонецЕсли;
	
	ИсходныеДанные = ИсходныеДанные.ИсходныеДанные;
	ОбработатьКодМаркировки(ИсходныеДанные);
	
	//Актуализируем иконки КМ в строке
	ЗаполнитьПризнакКодаМаркировкиВТоварах();
	ПерезаполнитьПризнакиМаркировкиИСМПТК();
			
КонецПроцедуры

#КонецОбласти

&НаСервере
функция ПолучитьВидПродукцииПоНоменклатуре(Номенклатура) Экспорт 
	
	Возврат ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);
		
КонецФункции

&НаСервере
функция ПолучитьНоменклатуруПоШтрихкоду(Штрихкод) Экспорт
	
	Возврат РозничноеВыбытиеИСМПТКПереопределяемый.ПолучитьНоменклатуруПоШтрихкодуВРозничномКонтуре(Штрихкод);
		
КонецФункции

&НаКлиенте
Функция ПроверитьТЧКодыМаркировкиНаНаличиеКМ(КодМарикровки) Экспорт
	
	НайденныеСтроки = Объект.КодыМаркировкиИСМПТК.НайтиСтроки(Новый Структура("КодМаркировки", КодМарикровки));
	
	Возврат ?(НайденныеСтроки.Количество() > 0, Ложь, Истина);	
	
КонецФункции

&НаКлиенте
Процедура ОбработатьКодМаркировкиИСМПТК(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено 
		Или (ТипЗнч(ИсходныеДанные) = Тип("Массив") И ИсходныеДанные.Количество() = 0) Тогда
		Возврат;
	КонецЕсли;
		
	Если ТипЗнч(ИсходныеДанные) = Тип("Массив") Тогда
		ИсхДанныеДляОбработки = ИсходныеДанные[0];
	Иначе
		ИсхДанныеДляОбработки = ИсходныеДанные;
	КонецЕсли;
	
	ОбработатьКодМаркировкиИСМПТКПродолжение(ИсхДанныеДляОбработки, ДополнительныеПараметры);
				
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКодМаркировкиИСМПТКПродолжение(ИсходныеДанные, ДополнительныеПараметры)
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКодМарикровкиПредварительные(ДополнительныеПараметры);
	
	//После того как предварительно заполнили КМ, нужно выполнить стандартную обработку и заполнение ТЧ Товары.
	//Для этого вызываем общий механизм, но предварительно подменяем данные КМ на ЕАН в ИсходныхДанных;
	Если Не ДополнительныеПараметры = Неопределено
		И ДополнительныеПараметры.Свойство("ДанныеМаркировки")
		И ДополнительныеПараметры.ДанныеМаркировки.Свойство("EAN") Тогда
		ИсходныеДанные.Штрихкод = ДополнительныеПараметры.ДанныеМаркировки.EAN;
	КонецЕсли;
	
	ОбработатьКодМаркировки(ИсходныеДанные);
	
КонецПроцедуры

//Выполняется предварительное добавление кода марикровки: в этот момент еще не известна строка номенклатуры, с которой он будет связан, т.к. она добавится позже.
//Поэтому ключ связи у строки КМ оставляем неопределенным и возвращаемся к нему позже.
//
&НаКлиенте
Процедура ЗаполнитьКодМарикровкиПредварительные(ДополнительныеПараметры) Экспорт
	
	Если Не ДополнительныеПараметры = Неопределено
		И ДополнительныеПараметры.Свойство("ДанныеМаркировки") Тогда
				
		ДанныеМаркировки    = ДополнительныеПараметры.ДанныеМаркировки;
		ДанныеНоменклатуры  = ДополнительныеПараметры.ДанныеНоменклатуры;
		
		//В зависимости от того, из какой формы было иниициировано заполнение,имя параметра будет различаться
		КодМаркировкиBase64 = ?(ДанныеМаркировки.Свойство("ШтрихкодBase64"), ДанныеМаркировки.ШтрихкодBase64, ДанныеМаркировки.КодМаркировки);
		//Для заполнения таблицы код маркировки необходимо привести к нормализзованному виду
		НормализованныйКМ   = РозничноеВыбытиеИСМПТКВызовСервера.НормализованныйШтрихкод(КодМаркировкиBase64);
		
		Номенклатура 	     = ДанныеНоменклатуры.Номенклатура;
		Характеристика	     = ДанныеНоменклатуры.Характеристика;
		ИспользуютсяУпаковки = ДанныеНоменклатуры.ИспользуютсяУпаковки;
		Упаковка		     = ДанныеНоменклатуры.Упаковка;
		БазоваяЕИ		     = ДанныеНоменклатуры.БазоваяЕдиницаИзмерения;
		
		Если Не Объект.ОперацияСДенежнымиСредствами Тогда
			
			НоваяСтрокаМарки = Объект.КодыМаркировкиИСМПТК.Добавить();
			НоваяСтрокаМарки.КодМаркировки    = НормализованныйКМ;
			НоваяСтрокаМарки.Номенклатура     = Номенклатура;
			НоваяСтрокаМарки.Характеристика   = Характеристика;
			НоваяСтрокаМарки.ЕдиницаИзмерения = ?(ИспользуютсяУпаковки, Упаковка, БазоваяЕИ); //В ТЧ кодов маркировки храним значение или Упаковки, или базовой ЕИ хранения номенклатуры
			НоваяСтрокаМарки.КлючСвязи = -1;
						
		КонецЕсли;
		
		ПерезаполнитьПризнакиМаркировкиИСМПТК();
		ЗаполнитьПризнакКодаМаркировкиВТоварах();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТаблицуМаркиПриУдаленииТовараИСМПТК(УдаляемыйКлючСвязи)
	
	СтруктураПоискаМарок = Новый Структура("КлючСвязи", УдаляемыйКлючСвязи);
	НайденныеМарки = Объект.КодыМаркировкиИСМПТК.НайтиСтроки(СтруктураПоискаМарок);
	Если Не НайденныеМарки.Количество() = 0 Тогда
		Для Каждого СтрокаМарка Из НайденныеМарки Цикл
			Объект.КодыМаркировкиИСМПТК.Удалить(СтрокаМарка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораНоменклатурыИРегистрацииШК(ИсходныеДанные, ЭтоКодМарки) Экспорт
	
	ТекстСообщения = НСтр("ru = 'Неопределенный штрихкод товара! Регистрация новых штрихкодов в этой форме не поддерживается.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСообщениеОбОшибке(ТекстСообщения) Экспорт
	
	ПараметрыОткрытияФормы = Новый Структура("ТекстОшибки", ТекстСообщения);
	ОткрытьФорму("Обработка.РозничноеВыбытиеМаркированнойПродукцииИСМПТК.Форма.ИнформацияОНевозможностиДобавленияОтсканированного", ПараметрыОткрытияФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПроверкуТоваровПередОплатойМаркировка(ОбнаруженыОшибки)
	
	ТаблицаТоварыПроверка = Объект.Товары.Выгрузить();
	ТаблицаТоварыПроверка.Свернуть("Номенклатура, Характеристика, Упаковка", "КоличествоУпаковок, Количество");  
	
	Для Каждого СтрокаТЧ Из ТаблицаТоварыПроверка Цикл
		
		//Проверяем, нужно ли выполнять проверку по этой номенклатуре
		ЭтоМаркируемыйТовар = ОбщегоНазначенияИСМПТКПереопределяемый.ПроверитьНоменклатуруНаПринадлежностьКМаркировке(СтрокаТЧ.Номенклатура);
		Если Не ЭтоМаркируемыйТовар Тогда
			Продолжить;
		Иначе
			СтруктураПоискаМарок = Новый Структура();
			СтруктураПоискаМарок.Вставить("Номенклатура",   СтрокаТЧ.Номенклатура);
			СтруктураПоискаМарок.Вставить("Характеристика", СтрокаТЧ.Характеристика);
			
			Если ЗначениеЗаполнено(СтрокаТЧ.Упаковка) Тогда
				СтруктураПоискаМарок.Вставить("ЕдиницаИзмерения", СтрокаТЧ.Упаковка);
			Иначе
				СтруктураПоискаМарок.Вставить("ЕдиницаИзмерения", РозничноеВыбытиеИСМПТКПереопределяемый.ПолучитьЗначениеБазовойЕИНоменклатуры(СтрокаТЧ.Номенклатура));
			КонецЕсли;
			
			//Данные ТЧ Товары
			КоличествоВМинимальнойЕдинице = СтрокаТЧ.Количество;
			КоличествоУпаковки			  = СтрокаТЧ.КоличествоУпаковок;
			
			//Данные ТЧ КодыМаркировкиИСМПТК 
			КоличествоСвязанныхКодовМаркировки = Объект.КодыМаркировкиИСМПТК.НайтиСтроки(СтруктураПоискаМарок).Количество();
			
			//Проверка соответствия
			Если (ЗначениеЗаполнено(СтрокаТЧ.Упаковка)
					И КоличествоСвязанныхКодовМаркировки > КоличествоУпаковки) //Групповые коды
				Или (Не ЗначениеЗаполнено(СтрокаТЧ.Упаковка) 
					И КоличествоСвязанныхКодовМаркировки > КоличествоВМинимальнойЕдинице) Тогда //Потребительские коды
					
				ТекстСообщения = НСтр("ru = 'Для товара %1 указанно избыточное количество кодов маркировки! Ожидается кодов - %2, указано кодов - %3.'")
							   + Символы.ПС
							   + НСтр("ru = 'Выполните проверку марок и скорректируйте данные в форме команды Коды маркировки.'");
							   
				//Значения параметров при формировании строки
				СтрокаДляПодстановкиНоменклатура = СтрокаТЧ.Номенклатура.Наименование + ?(ЗначениеЗаполнено(СтрокаТЧ.Характеристика), СтрокаТЧ.Характеристика, "");
				КоличествоОжидается = ?(ЗначениеЗаполнено(СтрокаТЧ.Упаковка), КоличествоУпаковки, КоличествоВМинимальнойЕдинице);
				КоличествоУказано   = КоличествоСвязанныхКодовМаркировки; 
				
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаДляПодстановкиНоменклатура, КоличествоОжидается, КоличествоУказано);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				
				ОбнаруженыОшибки = Истина;
			КонецЕсли;
		КонецЕсли;			
	КонецЦикла;
	
	//Проверка на наличие несвязанных КМ
	ЕстьОшибкиПоКлючам = Ложь;
	Для Каждого СтрокаТЧ Из Объект.КодыМаркировкиИСМПТК Цикл
		НайденныйеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТЧ.КлючСвязи));
		ЕстьОшибкиПоКлючам = НайденныйеСтроки.Количество() = 0;
		Если ЕстьОшибкиПоКлючам Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОшибкиПоКлючам Тогда
		ТекстСообщения = НСтр("ru = 'В Чеке обнаружены коды маркировки, не связанные со строками товаров. Пробитие такого чека невозможно!'")
					   + Символы.ПС
					   + НСтр("ru = 'Необходимо открыть список ""Коды маркировки"" и удалить строки, у которых в колонке ""Номер связанной строки товаров"" указано значение ""Не определен"".'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ОбнаруженыОшибки = Истина;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти
//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
