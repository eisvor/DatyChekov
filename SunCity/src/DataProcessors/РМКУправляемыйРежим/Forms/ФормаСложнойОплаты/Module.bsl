#Область ПеременныеМодуля

&НаКлиенте
Перем ЦветФонаСдачи;

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если Не ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытиеФормыВопросаНеПечататьБумажныйЧек(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		Если НЕ ВРЕГ(РезультатОткрытияФормы) = "НЕТ" Тогда
			ОчиститьПоОрганизации();
			Возврат;
		КонецЕсли;
		
		НеПечататьБумажныйЧек = Ложь;
		ЗавершениеОплатыПоЧеку();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ДанныеПоискаПоМагнитномуКодуСервер(МагнитныйКод);
	Возврат ПодключаемоеОборудованиеРТКлиент.ПолученМагнитныйКод(ЭтотОбъект, СтруктураРезультат);
	
КонецФункции

&НаКлиенте
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ДанныеПоискаПоШтрихкодуСервер(Штрихкод);
	Возврат ПодключаемоеОборудованиеРТКлиент.ПолученШтрихкодИзСШК(ЭтотОбъект, СтруктураРезультат);
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		ПодключаемоеОборудованиеРТ.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ИдентификаторСтроки = ДобавитьНайденныеСерийныеНомера(СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("ШтрихкодУпаковкиЕГАИС")
		И ЗначениеЗаполнено(СтрокаРезультата.ШтрихкодУпаковкиЕГАИС) Тогда
		
		ПодключаемоеОборудованиеРТ.ВставитьПредупреждениеОНевозможностиОбработкиАкцизныхМарок(СтруктураРезультат, СтрокаРезультата);
		
	Иначе
		
		ПодключаемоеОборудованиеРТ.ВставитьПредупреждениеОНевозможностиОбработкиНоменклатуры(СтруктураРезультат, СтрокаРезультата);
		
	КонецЕсли;
	
	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	Если ОплатаПлатежнойСистемой Тогда
		
	Иначе
		ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКодуРМК(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьНайденныеСерийныеНомера(СтруктураНомера) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	
	ТаблицаПогашенныхВРаспределенномЧекеСертификатов = ПогашениеПодарочныхСертификатов.Выгрузить().СкопироватьКолонки();
	КолвоЭлементовКоллекции = ПогашениеПодарочныхСертификатов.Количество();
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
		ЭлементКоллекции = ПогашениеПодарочныхСертификатов[КолвоЭлементовКоллекции - ОбратныйИндекс];
		
		Если ЭлементКоллекции.Организация = Организация Тогда
			НоваяСтрока = ТаблицаПогашенныхВРаспределенномЧекеСертификатов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
			Если ЭлементКоллекции.ПодарочныйСертификат = СтруктураНомера.Номенклатура И
				ЭлементКоллекции.СерийныйНомер = СтруктураНомера.СерийныйНомер Тогда
				
					ПогашениеПодарочныхСертификатов.Удалить(ЭлементКоллекции);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	СтрокаПогашения = ПогашениеПодарочныхСертификатов.Добавить();
	СтрокаПогашения.ПодарочныйСертификат = СтруктураНомера.Номенклатура;
	СтрокаПогашения.СерийныйНомер        = СтруктураНомера.СерийныйНомер;
	СтрокаПогашения.Организация          = Организация;
	
	ОбработкаТабличнойЧастиПогашенияПодарочныхСертификатов(ТаблицаПогашенныхВРаспределенномЧекеСертификатов);
	
	ИдентификаторСтроки = СтрокаПогашения.ПолучитьИдентификатор();
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаКлиенте
Процедура ОповещениеОткрытиеФормыВводаТелефона(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		Если ЗначениеЗаполнено(РезультатОткрытияФормы.ВведенноеЧисло) Тогда
			ПодключаемоеОборудованиеРТКлиент.ПреобразоватьТелефонКПользовательскомуВиду(РезультатОткрытияФормы.ВведенноеЧисло, Телефон, ТелефонСтрокой);
			Email = "";
			ОтказКлиентаОтСохраненияТелефонаEmail = РезультатОткрытияФормы.ОтказКлиентаОтСохраненияТелефона;
			ПроверитьВариантыПлатежаУстановитьВидимостьИДоступностьКлиент();
		Иначе
			Телефон = 0;
			ТелефонСтрокой = "";
			Email = "";
		КонецЕсли;
		
		ОбновитьДанныеSMSEmail();
		
	КонецЕсли;
	
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытиеФормыВводаEmail(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		Если ЗначениеЗаполнено(РезультатОткрытияФормы.Email) Тогда
			Email = РезультатОткрытияФормы.Email;
			Телефон = 0;
			ТелефонСтрокой = "";
			ПроверитьВариантыПлатежаУстановитьВидимостьИДоступностьКлиент();
		Иначе
			Телефон = 0;
			ТелефонСтрокой = "";
			Email = "";
		КонецЕсли;
		
		ОбновитьДанныеSMSEmail();
		
	КонецЕсли;
	
	ОбновитьФорму();
	
КонецПроцедуры

&НаСервере
Функция ДанныеПоискаПоМагнитномуКодуСервер(МагнитныйКод)
	
	Возврат ПодключаемоеОборудованиеРТ.ДанныеПоискаПоМагнитномуКоду(МагнитныйКод, ЭтотОбъект);
	
КонецФункции

&НаСервере
Функция ДанныеПоискаПоШтрихкодуСервер(Штрихкод)
	
	Возврат ПодключаемоеОборудованиеРТ.ДанныеПоискаПоШтрихкоду(Штрихкод, ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Процедура ОповещениеОбработатьДанныеПоКоду(СтруктураРезультат, ДополнительныеПараметры) Экспорт
	
	ОбработатьДанныеПоКодуСервер(СтруктураРезультат);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОповещениеОткрытьФормуОплатыПлатежнойКартойЧерезЭквайринговыйТерминал(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.ПараметрДействия.Вставить("ОткрытаБлокирующаяФорма", Ложь);
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		ЗначениеВыбораЧисло = РезультатОткрытияФормы.ВведенноеЧисло;
		Если ЗначениеЗаполнено(ЗначениеВыбораЧисло) Тогда
			СуммаОперации = ЗначениеВыбораЧисло;
		Иначе
			СуммаОперации = 0;
		КонецЕсли;
		ДополнительныеПараметры.ПараметрДействия.Вставить("ДанныеКарты"  , РезультатОткрытияФормы.ДанныеКарты);
		ДополнительныеПараметры.ПараметрДействия.Вставить("СуммаОперации", СуммаОперации);
		ЗавершитьОплатуПлатежнойКартойЧерезЭквайринговыйТерминалНачало(ДополнительныеПараметры.ПараметрДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаСерийныхНомеровПогашение(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		ДобавитьНайденныеСерийныеНомераИзХранилища(РезультатОткрытияФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВопросаОПотереДанныхПередЗакрытием(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		Если ВРЕГ(РезультатОткрытияФормы) = "ДА" Тогда
			СанкционированноеЗакрытие = Истина;
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВопросаУспехОперацииНаЭквайринговомТерминале(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		Если ВРЕГ(РезультатОткрытияФормы) = "ДА" Тогда
			ДополнительныеПараметры.ПараметрДействия.НомерСсылкиОперации = "";
			ДополнительныеПараметры.ПараметрДействия.НомерЧекаЭТ         = "";
			ЗавершитьОплатуПлатежнойКартойЧерезЭквайринговыйТерминалОкончание(ДополнительныеПараметры.ПараметрДействия);
		КонецЕсли;
	КонецЕсли;
	
	ПриЗавершенииОплатуПлатежнойКартойЧерезЭквайринговыйТерминал(ДополнительныеПараметры.ПараметрДействия)
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВопросаОПотереДанныхУдалениеСтроки(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		Если ВРЕГ(РезультатОткрытияФормы) = "ДА" Тогда
			ЗавершитьУдалениеСтроки(ДополнительныеПараметры.ПараметрДействия)
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВопросаОбОтменеОперацииУдалениеСтрокиЗавершение(РезультатВыполнения, ПараметрДействия) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		Если НЕ ПараметрДействия.ОткрытаБлокирующаяФорма Тогда
			ЗавершитьУдалениеСтроки(ПараметрДействия)
		КонецЕсли;
	Иначе
		Если Не ПустаяСтрока(ПараметрДействия.ТекстОписаниеОшибки) Тогда
			ЗаголовокИнформации = НСтр("ru = 'Ошибка выполнения операции.'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ПараметрДействия.ТекстОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВопросаОбОтменеОперацииУдалениеСтроки(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		Если НЕ ВРЕГ(РезультатОткрытияФормы) = "ДА" Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрДействия = ДополнительныеПараметры.ПараметрДействия;
		ТекущаяСтрокаОплаты = ТекущиеВидыОплат.НайтиПоИдентификатору(ПараметрДействия.ИдентификаторВыбраннойСтроки);
		
		Если ТекущаяСтрокаОплаты = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВопросаОбОтменеОперацииУдалениеСтрокиЗавершение", ЭтотОбъект, ПараметрДействия);
		СторноОплатыПлатежнойКартойЧерезЭквайринговыйТерминал(Оповещение, ТекущаяСтрокаОплаты, ПараметрДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВопросаПодтвержденияОбОтменеОплаты(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	КонечныйРезультат = Ложь;
	ПараметрДействия = ДополнительныеПараметры.ПараметрДействия;
	
	Если НЕ РезультатОткрытияФормы = Неопределено 
		  И ВРЕГ(РезультатОткрытияФормы) = "ДА" Тогда
		КонечныйРезультат = Истина;
	КонецЕсли;
	
	Если КонечныйРезультат Тогда
		ТекстОписаниеОшибки = "";
	Иначе
		ТекстОписаниеОшибки = НСтр("ru = 'Операция отменена'");
	КонецЕсли;
	
	ПараметрДействия.ТекстОписаниеОшибки = ТекстОписаниеОшибки;
	
	Если НЕ КонечныйРезультат Тогда
		Если ПараметрДействия.ОповещениеПриЗавершении <> Неопределено Тогда
			ПараметрДействия.Результат = КонечныйРезультат; 
			ВыполнитьОбработкуОповещения(ПараметрДействия.ОповещениеПриЗавершении, ПараметрДействия);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПараметрДействия.Свойство("ЗавершитьУдалениеСтроки") Тогда
		ЗавершитьУдалениеСтроки(ПараметрДействия)
	КонецЕсли;
	
	Если ПараметрДействия.Свойство("ЗавершитьОбработкуВыбораПлатежнойКарты") Тогда
		ЗавершитьОбработкуВыбораПлатежнойКарты(ПараметрДействия);
		ПересчитатьЗначенияСуммДляПодарочныхСертификатов();
	КонецЕсли;
	
	ИндексВМассивеСтрокВыбранныхОплат = Неопределено;
	Если ПараметрДействия.Свойство("УдалитьСтрокуИзМассива", ИндексВМассивеСтрокВыбранныхОплат) Тогда
		ПараметрДействия.СтрокиВыбранныхОплат.Удалить(ИндексВМассивеСтрокВыбранныхОплат)
	КонецЕсли;
	
	Если ПараметрДействия.ОповещениеПриЗавершении <> Неопределено Тогда
		ПараметрДействия.Результат = Истина; 
		ВыполнитьОбработкуОповещения(ПараметрДействия.ОповещениеПриЗавершении, ПараметрДействия);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВопросаПодтвержденияЧастичнойОплаты(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		Если ВРЕГ(РезультатОткрытияФормы) = "ДА" Тогда
			ЭтоАванс = Истина;
			ОперацияСДенежнымиСредствами = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОплатаПоЧекуФрагмент();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекВызовСервера.ИспользоватьПодключаемоеОборудование();
	ВидОперацииПродажа = Перечисления.ВидыОперацийЧекККМ.Продажа;
	
	КоличествоСимволовПослеЗапятой = 2;
	ПервыйВвод = Истина;
	КлючСвязиТПЧеков = -1; // Т.к. это идентификатор строки, который начинается с 0
	
	Параметры.Свойство("ИтогПоОрганизации", ИтогПоОрганизации);
	Параметры.Свойство("Организация", Организация);
	Параметры.Свойство("ВидОперации", ВидОперации);
	Параметры.Свойство("ЧекККМПродажа", ЧекККМПродажа);
	Параметры.Свойство("КассаККМ", КассаККМ);
	Параметры.Свойство("ДисконтнаяКарта", ДисконтнаяКарта);
	
	Если Параметры.Свойство("ТоварныеПозицииФСС") Тогда
		ТоварныеПозицииФСС = Новый ХранилищеЗначения(Параметры.ТоварныеПозицииФСС);
	КонецЕсли;
	
	Если Параметры.Свойство("АдресТаблицыПогашениеПодарочныхСертификатов") Тогда
		ТаблицаПогашениеПодарочныхСертификатов = ПолучитьИзВременногоХранилища(Параметры.АдресТаблицыПогашениеПодарочныхСертификатов);
		ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ТаблицаПогашениеПодарочныхСертификатов , ПогашениеПодарочныхСертификатов, Ложь);
	КонецЕсли;
	
	Если Параметры.Свойство("ЭтоАвансБезРасшифровкиПоТоварам") Тогда
		ЭтоАвансБезРасшифровкиПоТоварам = Параметры.ЭтоАвансБезРасшифровкиПоТоварам;
	КонецЕсли;
	
	Если Параметры.Свойство("ЭтоАванс") Тогда
		ЭтоАванс = Параметры.ЭтоАванс;
	КонецЕсли;
	
	Если Параметры.Свойство("ЭтоВозвратАванса") Тогда
		ЭтоВозвратАванса = Параметры.ЭтоВозвратАванса;
	КонецЕсли;
	
	Если Параметры.Свойство("КлючСвязиТПЧеков") Тогда
		КлючСвязиТПЧеков = Параметры.КлючСвязиТПЧеков;
	КонецЕсли;
	
	Если Параметры.Свойство("ТаблицаОплат") Тогда
		ЗаполнитьТекущиеВидыОплат(Параметры.ТаблицаОплат);
	КонецЕсли;
	
	Если Параметры.Свойство("ОперацияСДенежнымиСредствами") Тогда
		ОперацияСДенежнымиСредствами = Параметры.ОперацияСДенежнымиСредствами;
	КонецЕсли;
	
	Если ИтогПоОрганизации = 0 И НЕ ОперацияСДенежнымиСредствами Тогда
		Отказ = Истина;
	Иначе
		СуммаОплаты   = ИтогПоОрганизации;
		Если Параметры.ЭтоЗачетАванса 
			ИЛИ (ОперацияСДенежнымиСредствами И НЕ ЭтоАванс И ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа) Тогда
			
			Если Параметры.ЭтоЗачетАванса Тогда
				// Отгрузка по авансу
				СуммаКОплате = Макс(Мин(ИтогПоОрганизации, Параметры.СуммаОстаткаДокументаРасчета), 0);
			ИначеЕсли ОперацияСДенежнымиСредствами Тогда
				// Оплата по рассрочке
				СуммаКОплате = Макс(Мин(ИтогПоОрганизации, ИтогПоОрганизации - Параметры.СуммаОстаткаДокументаРасчета), 0);
			КонецЕсли;
			Если СуммаКОплате > 0 Тогда
				СтрокаОплаты = ТекущиеВидыОплат.Добавить();
				СтрокаОплаты.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ЗачетАванса;
				СтрокаОплаты.Сумма = СуммаКОплате;
				
				СтрокаОплаты.ПредставлениеСуммы      = СтрокаОплаты.Сумма;
				СтрокаОплаты.ПредставлениеВидаОплаты = НСтр("ru = 'Зачет аванса'");
				СтрокаОплаты.Организация             = Организация;
			КонецЕсли;
		ИначеЕсли ЭтоВозвратАванса Тогда
			СуммаКОплате = Макс(Мин(ИтогПоОрганизации, ИтогПоОрганизации - Параметры.СуммаОстаткаДокументаРасчета), 0);
			
			Если СуммаКОплате > 0 Тогда
				СтрокаОплаты = ТекущиеВидыОплат.Добавить();
				СтрокаОплаты.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаВрассрочку;
				СтрокаОплаты.Сумма = СуммаКОплате;
				
				СтрокаОплаты.ПредставлениеСуммы      = СтрокаОплаты.Сумма;
				СтрокаОплаты.ПредставлениеВидаОплаты = СтрокаОплаты.ВидОплаты.Наименование;
				СтрокаОплаты.Организация             = Организация;
			КонецЕсли; 
			
		ИначеЕсли ОперацияСДенежнымиСредствами И ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
				// Не возврат аванса, это возврат оплаты рассрочки
			ВозможнаяСуммаОплаты = ПродажиСервер.ВозможнаяСуммаОплатыНаличнымиНепроведенногоЧекаВозврата(ЧекККМПродажа);
			
			Если ВозможнаяСуммаОплаты = 0 Тогда
				
				Элементы.КомандаНаличные.Доступность = Ложь;
				Элементы.КомандаНаличныеПанель.Доступность = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли Параметры.Свойство("БанковскийПлатеж") И Параметры.БанковскийПлатеж Тогда 
			
			СуммаКОплате = Макс(Мин(ИтогПоОрганизации, Параметры.СуммаОстаткаДокументаРасчета), 0);
			
			СтрокаОплаты = ТекущиеВидыОплат.Добавить();
			СтрокаОплаты.ВидОплаты = Справочники.ВидыОплатЧекаККМ.БанковскийПлатеж;
			СтрокаОплаты.Сумма = СуммаКОплате;
			
			СтрокаОплаты.ПредставлениеСуммы      = СтрокаОплаты.Сумма;
			СтрокаОплаты.ПредставлениеВидаОплаты = НСтр("ru = 'Банковский платеж'");
			СтрокаОплаты.Организация             = Организация;
			
		КонецЕсли;
		
		СуммаСдачи = 0;
		ВводимоеЧисло = Формат(СуммаОплаты, "ЧЦ=15; ЧДЦ=2; ЧГ=3,0");
		
		Параметры.Свойство("ОплатаПлатежнойКартой", ОплатаПлатежнойКартой);
		Параметры.Свойство("ОплатаПлатежнойСистемой", ОплатаПлатежнойСистемой);
		Параметры.Свойство("ОплатаЭСНСПК", ОплатаЭСНСПК);
		
		Если ОплатаПлатежнойСистемой Тогда
			
			ИнтеграцияСПлатежнымиСистемамиРТСервер.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
			
			Если ВидыОплат.Количество()=0 Тогда
				ОплатаПлатежнойСистемой = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоАванс Тогда
		Элементы.СуммаСдачи.Заголовок = НСтр("ru = 'Сумма аванса'");
	КонецЕсли;
	
	ПечатьЧека = Истина;
	ВозможностьЭлектронногоПлатежа = ПодключаемоеОборудованиеРТ.ВозможностьЭлектронногоПлатежа(КассаККМ.ПодключаемоеОборудование);
	НеПечататьБумажныйЧек = ПодключаемоеОборудованиеРТ.ПроверитьВозможностьПечатиБумажногоЧека(КассаККМ);
	
	Если ВозможностьЭлектронногоПлатежа Тогда
		
		ПередачаEmailЧерезПрограмму = КассаККМ.ЭлектронныйЧекEmailПередаютсяПрограммой1С;
		ПередачаSMSЧерезПрограмму  = КассаККМ.ЭлектронныйЧекSMSПередаютсяПрограммой1С;
		ПроверитьВариантыПлатежаУстановитьВидимостьИДоступностьСервер();

		Если НеПечататьБумажныйЧек Тогда
			Параметры.Свойство("Телефон", 				Телефон); 
			Параметры.Свойство("Email", 				Email);
		КонецЕсли;
		
	КонецЕсли;
	
	ОтказКлиентаОтСохраненияТелефонаEmail = ЗначениеЗаполнено(Телефон) ИЛИ ЗначениеЗаполнено(Email);
	
	УправлениеВидимостьюИДоступностью();
	КомандаИзменениеПечатиЧекаСервер(ПечатьЧека);
	
	ЭтоЗачетАванса = Параметры.ЭтоЗачетАванса;
	
	Контрагент                         = Параметры.Контрагент;
	ИзменятьКонтрагента                = Параметры.ИзменятьКонтрагента;
	Элементы.Контрагент.ПодсказкаВвода = Константы.КонтрагентРозничныйПокупатель.Получить().Наименование;
	Элементы.Контрагент.Доступность    = ИзменятьКонтрагента;
	
	
	ИспользоватьРасчетыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетыСКлиентами");
	ИспользоватьОплатуБанковскимиКредитами = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуБанковскимиКредитами");
	
	УстановитьВидимостьКонтрагента();
	
	Если Параметры.Свойство("НадписьЗаголовок") Тогда
		НадписьЗаголовок = Параметры.НадписьЗаголовок;
		Если Параметры.Свойство("ЦветТекстаЗаголовка") Тогда
			Элементы.НадписьЗаголовок.ЦветТекстаЗаголовка = Параметры.ЦветТекстаЗаголовка;
		КонецЕсли;
	Иначе
		Элементы.НадписьЗаголовок.Видимость = Ложь;
	КонецЕсли;
	КонтрагентДоИзменения              = Контрагент;
	
	КонтрагентРозничныйПокупатель = Константы.КонтрагентРозничныйПокупатель.Получить();
	
	Если ЭтоАвансБезРасшифровкиПоТоварам Тогда
		Элементы.ПолеВводимоеЧисло.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
		
		ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(
			ОповещенияПриПодключении,
			ЭтотОбъект,
			"СканерШтрихкода, СчитывательМагнитныхКарт, ДисплейПокупателя");



	Иначе
		
		ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(
			ОповещенияПриПодключении,
			ЭтотОбъект,
			"СканерШтрихкода, СчитывательМагнитныхКарт");
		
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ВозможностьЭлектронногоПлатежа Тогда
		ОбновитьДанныеSMSEmail();
	КонецЕсли;
	
	Если ОплатаПлатежнойКартой Тогда
		ПодключитьОбработчикОжидания("КомандаКартаКлиент", 0.1, Истина)
	Иначе
		ОбновитьФорму();
	КонецЕсли;
	
	Если ОплатаПлатежнойСистемой Тогда
		ИнтеграцияСПлатежнымиСистемамиРТКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ СанкционированноеЗакрытие Тогда
		
		Если ЗавершениеРаботы Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		ДанныеОтправленыВБанк = Ложь;
		Для Каждого ВидОплаты Из ТекущиеВидыОплат Цикл
			Если ВидОплаты.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта")
				ИЛИ ВидОплаты.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяСистема") Тогда
				
				ДанныеОтправленыВБанк = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ПараметрДействия = Новый Структура;
		ПараметрДействия.Вставить("ОткрытаБлокирующаяФорма", Ложь);
		ПараметрДействия.Вставить("Закрыть");
		
		Если ДанныеОтправленыВБанк Тогда
			Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
				
				ЗаголовокИнформации = НСтр("ru = 'Данные об оплате отправлены в банк.'");
				ТекстВопроса =  НСтр("ru = 'Необходимо выполнить сторно произведенных операций.'"); 
				
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстВопроса);
				Отказ = Истина;
				
			Иначе
				
				ЗаголовокИнформации = НСтр("ru = 'Данные об отмене отправлены в банк.'");
				ТекстВопроса =  НСтр("ru = 'Хотите закрыть окно с потерей данных?'"); 
				
				ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВопросаОПотереДанныхПередЗакрытием", ЭтотОбъект);
				ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(ЗаголовокИнформации, ТекстВопроса, "Нет", ОбработчикОповещения);
				Отказ = Истина;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ОплатаПлатежнойСистемой Тогда
			ИнтеграцияСПлатежнымиСистемамиРТКлиент.ПередЗакрытием(ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен()
		И ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудованияРМК(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ВидыОплатВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОбработкаВыбораВидыОплаты(ВидыОплат.НайтиПоИдентификатору(ВыбраннаяСтрока));
	
	ОбновитьФорму();
		
КонецПроцедуры

&НаКлиенте
Процедура ВидыОплатПСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КомандаЗавершитьОплату(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОплатыПлатежнойСистемыПриИзменении(Элемент)
	
	ИнтеграцияСПлатежнымиСистемамиРТКлиентСервер.НастроитьФормуПоВидуОплаты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущиеВидыОплатПриАктивизацииСтроки(Элемент)
	Если ТекущийЭлемент = Элементы.ТекущиеВидыОплат Тогда
		ПервыйВвод = Истина;
		
		Для каждого СтрокаОплаты Из ТекущиеВидыОплат Цикл
			СуммаОплатыЧисло = ПривестиСтрокуКЧислу(СтрокаОплаты.ПредставлениеСуммы, Истина);
			СтрокаОплаты.Сумма = СуммаОплатыЧисло;
			Если СуммаОплатыЧисло = 0 Тогда
				СтрокаОплаты.ПредставлениеСуммы = "";
			Иначе
				СтрокаОплаты.ПредставлениеСуммы = Формат(СуммаОплатыЧисло, "ЧДЦ=2");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьФорму();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Команда0(Команда)
	
	ДобавитьЦифру("0")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда1(Команда)
	
	ДобавитьЦифру("1")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда2(Команда)
	
	ДобавитьЦифру("2")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда3(Команда)
	
	ДобавитьЦифру("3")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда4(Команда)
	
	ДобавитьЦифру("4")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда5(Команда)
	
	ДобавитьЦифру("5")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда6(Команда)
	
	ДобавитьЦифру("6")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда7(Команда)
	
	ДобавитьЦифру("7")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда8(Команда)
	
	ДобавитьЦифру("8")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда9(Команда)
	
	ДобавитьЦифру("9")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда0ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("0")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда1ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("1")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда2ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("2")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда3ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("3")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда4ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("4")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда5ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("5")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда6ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("6")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда7ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("7")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда8ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("8")
	
КонецПроцедуры

&НаКлиенте
Процедура Команда9ПраваяКлавиатура(Команда)
	
	ДобавитьЦифру("9")
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаТочка(Команда)
	
	ТекущаяСтрокаОплаты = Элементы.ТекущиеВидыОплат.ТекущиеДанные;
	
	Если ТекущаяСтрокаОплаты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТекущаяСтрокаОплаты.ЗапретРедактирования) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПервыйВвод Тогда
		ТекущаяСтрокаОплаты.ПредставлениеСуммы = "";
		ПервыйВвод = Ложь;
	КонецЕсли;
	
	Если ТекущаяСтрокаОплаты.ПредставлениеСуммы = "" Тогда
		ТекущаяСтрокаОплаты.ПредставлениеСуммы = "0";
	КонецЕсли;
	
	ЧислоВхождений = СтрЧислоВхождений(ТекущаяСтрокаОплаты.ПредставлениеСуммы, ",");
	
	Если Не ЧислоВхождений > 0 Тогда
		ТекущаяСтрокаОплаты.ПредставлениеСуммы = ТекущаяСтрокаОплаты.ПредставлениеСуммы + ",";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаСтереть(Команда)
	
	ТекущаяСтрокаОплаты = Элементы.ТекущиеВидыОплат.ТекущиеДанные;
	
	Если ТекущаяСтрокаОплаты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипОплаты = ТекущаяСтрокаОплаты.ТипОплаты;
	
	Если ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта") 
		ИЛИ ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПодарочныйСертификат")
		ИЛИ ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяСистема") Тогда
	
		УдалениеСтроки(ТекущаяСтрокаОплаты)
	Иначе
		ТекущаяСтрокаОплаты.ПредставлениеСуммы = "";
		ПервыйВвод = Ложь;
		
		ТекущаяСтрокаОплаты.Сумма = 0;
		
		ОбновитьФорму();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаEnter(Команда)
	
	ПервыйВвод = Истина;
	
	ПодготовитьТаблицыКПередаче();
	
	Сдача = Оплата.Итог("Сумма") - ИтогПоОрганизации;
	
	Если (ЕстьЭлектроннаяОплата() И ЗначениеЗаполнено(Контрагент)) И Не ЭтоАванс И Сдача < 0 Тогда
		
		ПараметрДействия = Новый Структура;
		ПараметрДействия.Вставить("ОткрытаБлокирующаяФорма"     , Ложь);
		ЗаголовокИнформации = НСтр("ru = 'Сумма оплат меньше суммы чека. Пробить чек частичной оплаты?'");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВопросаПодтвержденияЧастичнойОплаты", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрДействия.ОткрытаБлокирующаяФорма = Истина;
		ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(ЗаголовокИнформации,,,ОбработчикОповещения);
		
	КонецЕсли;
	
	ОплатаПоЧекуФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНаличные(Команда)
	
	
	СтрокаОплаты = ТекущиеВидыОплат.Добавить();
	
	СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Наличные");
	СуммаКОплате = Макс(ИтогПоОрганизации - ТекущиеВидыОплат.Итог("Сумма"), 0);
	
	СтрокаОплаты.Сумма = СуммаКОплате;
	
	СтрокаОплаты.ПредставлениеСуммы      = СтрокаОплаты.Сумма;
	СтрокаОплаты.ПредставлениеВидаОплаты = "Наличные";
	СтрокаОплаты.Организация             = Организация;
	СтрокаОплаты.ТипОплаты               = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.Наличные");
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраница;
	ЭтотОбъект.ТекущийЭлемент = Элементы.ТекущиеВидыОплат;
	Элементы.ТекущиеВидыОплат.ТекущаяСтрока = СтрокаОплаты.ПолучитьИдентификатор();
	
	ПервыйВвод = Истина;
	
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКарта(Команда)
	
	КомандаКартаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКредит(Команда)
	
	СуммаКОплате = Макс(ИтогПоОрганизации - ТекущиеВидыОплат.Итог("Сумма"), 0);
	
	Если СуммаКОплате = 0 Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраница;
		Возврат 
	КонецЕсли;
	
	МассивТиповОплат = Новый Массив;
	Если НЕ ОперацияСДенежнымиСредствами И ИспользоватьОплатуБанковскимиКредитами Тогда
		МассивТиповОплат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.БанковскийКредит"));
	КонецЕсли;
	
	Если ИспользоватьРасчетыСКлиентами Тогда
		МассивТиповОплат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ВРассрочку"));
	КонецЕсли;
	
	ЗаполнитьТаблицуВидыОплаты(МассивТиповОплат);
	
	Если ВидыОплат.Количество() < 2 Тогда
		Возврат;
	ИначеЕсли ВидыОплат.Количество() = 2 Тогда
		
		ОбработкаВыбораВидыОплаты(ВидыОплат[0]);
		
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаВидыОплат;
		ЭтотОбъект.ТекущийЭлемент = Элементы.ВидыОплат;
	КонецЕсли;
	
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСертификат(Команда)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Обработка.РМКУправляемыйРежим.Форма.ФормаВводаСерийныхНомеровПогашение.Открытие");

	ПараметрыФормы = Новый Структура;
	
	МассивСерийныхНомеров = Новый Массив;
	
	Для каждого СтрокаТЧ Из ТекущиеВидыОплат Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.СерийныйНомер) Тогда
			МассивСерийныхНомеров.Добавить(СтрокаТЧ.СерийныйНомер);
		КонецЕсли;
	КонецЦикла;
	ПараметрыФормы.Вставить("МассивСерийныхНомеров", МассивСерийныхНомеров);
	
	МассивИспользованныхСерийныхНомеров = Новый Массив;
	
	Для каждого СтрокаТЧ Из ПогашениеПодарочныхСертификатов Цикл
		Если НЕ СтрокаТЧ.Организация = Организация
			  И ЗначениеЗаполнено(СтрокаТЧ.СерийныйНомер) Тогда
			МассивИспользованныхСерийныхНомеров.Добавить(СтрокаТЧ.СерийныйНомер);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы.Вставить("МассивИспользованныхСерийныхНомеров", МассивИспользованныхСерийныхНомеров);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаСерийныхНомеровПогашение", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВводаСерийныхНомеровПогашение", ПараметрыФормы,,,,, ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСторно(Команда)
	
	ТекущаяСтрокаОплаты = Элементы.ТекущиеВидыОплат.ТекущиеДанные;
	
	УдалениеСтроки(ТекущаяСтрокаОплаты);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаSMS(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытиеФормыВводаТелефона", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок" , НСтр("ru = 'Введите номер телефона'"));
	ПараметрыФормы.Вставить("ДисконтнаяКарта", ДисконтнаяКарта);
	ПараметрыФормы.Вставить("ЧислоВвода", Телефон);
	ПараметрыФормы.Вставить("ОтказКлиентаОтСохраненияТелефона", ОтказКлиентаОтСохраненияТелефонаEmail);
	
	ПодключаемоеОборудованиеРТКлиент.ОткрытьФормуВводаТелефонаДляОтправкиЧерезОФД(ОбработчикОповещения, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаEmail(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытиеФормыВводаEmail", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Email", Email);
	ПараметрыФормы.Вставить("ДисконтнаяКарта", ДисконтнаяКарта);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Введите адрес электронной почты (Email)'"));
	ПараметрыФормы.Вставить("ОтказКлиентаОтСохраненияEmail", ОтказКлиентаОтСохраненияТелефонаEmail);
	
	ПодключаемоеОборудованиеРТКлиент.ОткрытьФормуВводаEmailОтправкиЧерезОФД(ОбработчикОповещения, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменениеПечатиЧека(Команда)
	
	ПечатьЧека = НЕ ПечатьЧека;
	
	КомандаИзменениеПечатиЧекаКлиент(ПечатьЧека);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗавершитьПринудительно(Команда)
	
	ОповещениеЗавершитьОплату = Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
		
		ТекстИнформации = НСтр("ru = 'Проверьте выполнение операции оплаты платежной системы.'") + Символы.ПС;
		ТекстИнформации = ТекстИнформации + НСтр("ru = 'Сумма операции:'")        + " "+ ИтогПоОрганизации  + Символы.ПС;
		ТекстИнформации = ТекстИнформации;
		ЗаголовокИнформации = НСтр("ru = 'Операция оплаты прошла успешно?'");
		
		ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации,,ОповещениеЗавершитьОплату);
		
	Иначе
		
		ТекстИнформации = НСтр("ru = 'Проверьте выполнение операции возврата платежной системы.'") + Символы.ПС;
		ТекстИнформации = ТекстИнформации + НСтр("ru = 'Сумма операции:'")        + " "+ ИтогПоОрганизации + Символы.ПС;
		ТекстИнформации = ТекстИнформации;
		ЗаголовокИнформации = НСтр("ru = 'Операция возврата оплаты прошла успешно?'");
		
		ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации,,ОповещениеЗавершитьОплату);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗавершитьОплату(Команда)
	
	ГруппаСтраницы 							= Элементы.ГруппаСтраницы;
	ОповещениеЗавершитьОплату 				= Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
	
	Если ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОсновнаяСтраница Тогда
		
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
		
			ТекущаяСтрока = Элементы.ВидыОплатПС.ТекущаяСтрока;
		
			Если ТекущаяСтрока = Неопределено Тогда
			
				ТекстСообщения = НСтр("ru = 'Не выбран способ оплаты'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);

				Возврат;
			
			КонецЕсли;
		
			ВидОплатыПлатежнойСистемы = ВидыОплат.НайтиПоИдентификатору(ТекущаяСтрока).ВидОплаты;
	
			ИнтеграцияСПлатежнымиСистемамиРТКлиентСервер.НастроитьФормуПоВидуОплаты(ЭтотОбъект);
			
			Если Оплачивается Тогда
				ПодключитьОбработчикОжидания("ОпределитьСтатусОплаты", 0.1, Истина);
			Иначе
				ПодключитьОбработчикОжидания("ПолучитьИдентификаторОплаты", 0.1, Истина);
			КонецЕсли;
			
		Иначе
			ИнтеграцияСПлатежнымиСистемамиРТКлиент.ВозвратОплаты(ЭтотОбъект, ОповещениеЗавершитьОплату);
		КонецЕсли;
		
	ИначеЕсли ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПодтверждение Тогда
		
		ИнтеграцияСПлатежнымиСистемамиРТКлиент.ПодтвердитьВозврат(ЭтотОбъект, ДокументВозврата, Интеграция, ОповещениеЗавершитьОплату);
		
	ИначеЕсли ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаQRКод Тогда
		
		ИнтеграцияСПлатежнымиСистемамиРТКлиент.ПечатьПречека(ЭтотОбъект, ТипПлатежнойСистемы, ИдентификаторQRКода, Неопределено, Истина);
		
	ИначеЕсли ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыполняется Тогда
		
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			ПодключитьОбработчикОжидания("ОпределитьСтатусОплаты", 0.1, Истина);
		Иначе
			ПодключитьОбработчикОжидания("ОпределитьСтатусВозврата", 0.1, Истина);
		КонецЕсли;
		
	ИначеЕсли ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОшибкаПолученияСтатуса Тогда
		
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			ПодключитьОбработчикОжидания("ОпределитьСтатусОплаты", 0.1, Истина);
		Иначе
			ПодключитьОбработчикОжидания("ОпределитьСтатусВозврата", 0.1, Истина);
		КонецЕсли;
		
	ИначеЕсли ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОшибка Тогда
		
		ЭтотОбъект.Закрыть();
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОповещениеЗавершитьОплату, "ЗакрытьЧек");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтменитьОплату(Команда)
	
	ГруппаСтраницы = Элементы.ГруппаСтраницы;
	
	Если ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОшибка Тогда
		
		Закрыть();
		
	Иначе
		
		Отказ = Ложь;
		ОповещениеЗавершитьОплату = Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
		
		ИнтеграцияСПлатежнымиСистемамиРТКлиент.ОтменитьОплату(ЭтотОбъект, 
																ДокументОплаты, 
																Интеграция, 
																ИдентификаторЗаданияФормированияQRКода, 
																ИдентификаторЗаданияПроверкиСтатуса, 
																ИдентификаторЗаданияВозврата, 
																ОповещениеЗавершитьОплату,
																Отказ);
		
		Если Не Отказ Тогда
			ЭтотОбъект.Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтложить(Команда)
	
	СанкционированноеЗакрытие = Истина;
	
	ЭтотОбъект.Закрыть("ОтложитьЧек");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИнструкция(Команда)
	
	ГруппаСтраницы	= Элементы.ГруппаСтраницы;
	
	Если ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаQRКод Тогда
		ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаИнструкция;
	Иначе
		ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаQRКод;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаМобильныйПлатеж(Команда)
	
	КомандаМобильныйПлатежКлиент();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗавершитьОплатуВозвратПлатежнойСистемой(Действие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Действие = "ЗакрытьЧек" Тогда 
		
		КомандаEnter(Действие);
		
	ИначеЕсли Действие = "ОтменитьОплату" Тогда
		
		ТекущиеВидыОплат.Очистить();
		
		ПервыйВвод = Истина;
	
		ОбновитьФорму();
		
	ИначеЕсли Действие = "ДобавитьВидОплаты"
		ИЛИ Действие = "Да" Тогда // принудительное закрытие
		
		НастройкиВидаОплаты = ВидыОплат.НайтиСтроки(Новый Структура("ВидОплаты", ВидОплатыПлатежнойСистемы));
		НастройкиВидаОплаты = ?(НастройкиВидаОплаты.Количество(), НастройкиВидаОплаты[0], Неопределено);
	
		ТекущиеВидыОплат.Очистить();
		
		СтрокаОплаты = ТекущиеВидыОплат.Добавить();
	
		СтрокаОплаты.ВидОплаты 	= ВидОплатыПлатежнойСистемы;
		СуммаКОплате 			= Макс(ИтогПоОрганизации - ТекущиеВидыОплат.Итог("Сумма"), 0);
	
		СтрокаОплаты.Сумма 		= СуммаКОплате;
	
		СтрокаОплаты.ПредставлениеСуммы      		= СтрокаОплаты.Сумма;
		СтрокаОплаты.ПредставлениеВидаОплаты 		= Строка(ВидОплатыПлатежнойСистемы);
		СтрокаОплаты.Организация             		= Организация;
		СтрокаОплаты.ТипОплаты               		= ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяСистема");
		
		СтрокаОплаты.ИнтеграцияСПлатежнымиСистемами	= Интеграция;
		СтрокаОплаты.ИдентификаторПлатежнойСистемы  = ?(НастройкиВидаОплаты <> Неопределено,
			НастройкиВидаОплаты.ИдентификаторПС, Неопределено);
		
		Если Действие = "ДобавитьВидОплаты" Тогда
			БылоПодтверждениеПлатежнойСистемы = Истина;
		КонецЕсли;
		
		Если БылоПодтверждениеПлатежнойСистемы
			И ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			СтрокаОплаты.СсылочныйНомер	  			= ИнтеграцияСПлатежнымиСистемамиРТВызовСервера.ИдентификаторыОперацииОплаты(Интеграция, ДокументОплаты);
		КонецЕсли;
		
		ПервыйВвод = Истина;
	
		Если Действие = "Да" Тогда
			
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗавершение;
			ИнтеграцияСПлатежнымиСистемамиРТКлиентСервер.НастроитьФормуПоИнтеграции(ЭтотОбъект);
			
			КомандаEnter(Действие);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИдентификаторОплаты()
	
	ОповещениеЗавершитьОплату 				= Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
	
	ИнтеграцияСПлатежнымиСистемамиРТКлиент.ПолучитьИдентификаторОплаты(ЭтотОбъект, ОповещениеЗавершитьОплату);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьСтатусОплаты()
	
	ОповещениеЗавершитьОплату 				= Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
	
	ИнтеграцияСПлатежнымиСистемамиРТКлиент.ОпределитьСтатусОплаты(ЭтотОбъект, ДокументОплаты, Интеграция, ОповещениеЗавершитьОплату);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьСтатусВозврата()
	
	ОповещениеЗавершитьОплату 				= Новый ОписаниеОповещения("ЗавершитьОплатуВозвратПлатежнойСистемой", ЭтотОбъект);
	
	ИнтеграцияСПлатежнымиСистемамиРТКлиент.ОпределитьСтатусВозврата(ЭтотОбъект, ДокументВозврата, Интеграция, ОповещениеЗавершитьОплату);
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьЭлектроннаяОплата()
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта"));
	МассивСтрок = ТекущиеВидыОплат.НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаВидаОплат Из МассивСтрок Цикл
		Если СтрокаВидаОплат.Сумма > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_УстановитьТекущийЭлементВВидОплаты()
	
	ЭтотОбъект.ТекущийЭлемент = Элементы.ВидыОплат;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКартаКлиент()
	
	СуммаКОплате = Макс(ИтогПоОрганизации - ТекущиеВидыОплат.Итог("Сумма"), 0);
	
	Если СуммаКОплате = 0 И НЕ ЭтоАвансБезРасшифровкиПоТоварам Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраница;
		Возврат 
	КонецЕсли;
	
	ЗаполнитьТаблицуВидыОплаты(ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта"));
	
	Если ВидыОплат.Количество() < 2 Тогда
		Возврат;
	ИначеЕсли ВидыОплат.Количество() = 2 Тогда
		
		ОбработкаВыбораПлатежнойКарты(ВидыОплат[0]);
		
		ПервыйВвод = Истина;
		
	ИначеЕсли ОплатаЭСНСПК Тогда
		
		СтрокиЭСНСПК = ВидыОплат.НайтиСтроки(
			Новый Структура("ТипОплаты, ПлатежнаяСистема",
				ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяСистема"),
				ПредопределенноеЗначение("Перечисление.ТипыПлатежнойСистемыККТ.СертификатНСПК")));
		
		Если СтрокиЭСНСПК.Количество() > 0 Тогда
			ОбработкаВыбораПлатежнойКарты(СтрокиЭСНСПК[0]);
			
			ПервыйВвод = Истина;
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаВидыОплат;
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьТекущийЭлементВВидОплаты", 0.1, Истина);
	КонецЕсли;
	
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЦифру(ВведеннаяЦифраСтрокой)
	
	ТекущаяСтрокаОплаты = Элементы.ТекущиеВидыОплат.ТекущиеДанные;
	
	Если ТекущаяСтрокаОплаты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТекущаяСтрокаОплаты.ЗапретРедактирования) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПервыйВвод Тогда
		ТекущаяСтрокаОплаты.ПредставлениеСуммы = "";
		ПервыйВвод = Ложь;
	КонецЕсли;
	
	Запятая = Сред(ТекущаяСтрокаОплаты.ПредставлениеСуммы, СтрДлина(ТекущаяСтрокаОплаты.ПредставлениеСуммы) - КоличествоСимволовПослеЗапятой, 1);
	
	Если НЕ Запятая = "," Тогда
		ТекущаяСтрокаОплаты.ПредставлениеСуммы = ТекущаяСтрокаОплаты.ПредставлениеСуммы + ВведеннаяЦифраСтрокой;
	КонецЕсли;
	
	СуммаОплаты = ПривестиСтрокуКЧислу(ТекущаяСтрокаОплаты.ПредставлениеСуммы, Истина);
	
	ТекущаяСтрокаОплаты.Сумма = СуммаОплаты;
	
	ОбновитьФорму();
	
КонецПроцедуры

// Функция выполняет приведение строки к числу.
// Параметры:
//  ЧислоСтрокой           - Строка - Строка приводимая к числу.
//  ВозвращатьНеопределено - Булево - Если Истина и строка содержит некорректное значение, то возвращать Неопределено.
//
// Возвращаемое значение:
//  Число
//
&НаКлиенте
Функция ПривестиСтрокуКЧислу(ЧислоСтрокой, ВозвращатьНеопределено = Ложь)
	
	ОписаниеТипаЧисла = Новый ОписаниеТипов("Число");
	ЗначениеЧисла = ОписаниеТипаЧисла.ПривестиЗначение(ЧислоСтрокой);
	
	Если ВозвращатьНеопределено И (ЗначениеЧисла = 0) Тогда
		
		Стр = Строка(ЧислоСтрокой);
		Если Стр = "" Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Стр = СтрЗаменить(СокрЛП(Стр), "0", "");
		Если (Стр <> "") И (Стр <> ".") И (Стр <> ",") Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеЧисла;
	
КонецФункции

&НаСервере
Функция АдресТаблицыОплата()
	
	АдресТаблицы = ПоместитьВоВременноеХранилище(Оплата.Выгрузить(), Новый УникальныйИдентификатор);
	
	Возврат АдресТаблицы;
	
КонецФункции // АдресТаблицыОплата()

&НаСервере
Функция АдресТаблицыПогашениеПодарочныхСертификатов()
	
	ТаблицаПогашения = ПогашениеПодарочныхСертификатов.Выгрузить();
	
	КолвоЭлементовКоллекции = ТаблицаПогашения.Количество();
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
		ЭлементКоллекции = ТаблицаПогашения[КолвоЭлементовКоллекции - ОбратныйИндекс];

		Если НЕ ЭлементКоллекции.Организация = Организация Тогда
			ТаблицаПогашения.Удалить(ЭлементКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	АдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаПогашения, Новый УникальныйИдентификатор);
	
	Возврат АдресТаблицы;
	
КонецФункции // АдресТаблицыПогашениеПодарочныхСертификатов()

&НаСервере
Процедура ПодготовитьТаблицыКПередаче()

	ПервыйВвод = Истина;
	
	ТаблицаТекущиеВидыОплат = ТекущиеВидыОплат.Выгрузить().Скопировать();
	КолвоЭлементовКоллекции = ТаблицаТекущиеВидыОплат.Количество();
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
		ЭлементКоллекции = ТаблицаТекущиеВидыОплат[КолвоЭлементовКоллекции - ОбратныйИндекс];

		Если ЭлементКоллекции.Сумма = 0 Тогда
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ПодарочныйСертификат", ЭлементКоллекции.ПодарочныйСертификат);
			СтруктураПоиска.Вставить("СерийныйНомер"       , ЭлементКоллекции.СерийныйНомер);
			СтруктураПоиска.Вставить("Организация"         , Организация);
			
			СтрокиПогашениеПодарочныхСертификатов = ПогашениеПодарочныхСертификатов.НайтиСтроки(СтруктураПоиска);
			
			Для каждого СтрокаПогашениеПодарочныхСертификатов Из СтрокиПогашениеПодарочныхСертификатов Цикл
				
				ПогашениеПодарочныхСертификатов.Удалить(СтрокаПогашениеПодарочныхСертификатов);
				
			КонецЦикла;
			
			ТаблицаТекущиеВидыОплат.Удалить(ЭлементКоллекции);
		Иначе		
			ЭлементКоллекции.ПроцентКомиссии = ПолучитьПроцентКомиссии(ЭлементКоллекции.ЭквайринговыйТерминал, ЭлементКоллекции.ВидОплаты, ВидОперации);
			ЭлементКоллекции.СуммаКомиссии = ЭлементКоллекции.Сумма * ЭлементКоллекции.ПроцентКомиссии / 100;
		КонецЕсли;
	КонецЦикла;
	
	ОчиститьПоОрганизацииСервер();
	
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ТаблицаТекущиеВидыОплат, Оплата, Истина);
	
	ТаблицаОплаты = Оплата.Выгрузить().Скопировать();
	ТаблицаОплаты.Свернуть("ВидОплаты, ПроцентКомиссии, Организация, ЭквайринговыйТерминал, СсылочныйНомер, НомерЧекаЭТ, НомерПлатежнойКарты, ДанныеПереданыВБанк, ИнтеграцияСПлатежнымиСистемами, ИдентификаторПлатежнойСистемы", "Сумма, СуммаКомиссии");
	Оплата.Загрузить(ТаблицаОплаты);
	
	КолвоЭлементовКоллекции = Оплата.Количество();
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
		ЭлементКоллекции = Оплата[КолвоЭлементовКоллекции - ОбратныйИндекс];

		Если ЭлементКоллекции.Сумма = 0 Тогда
			Оплата.Удалить(ЭлементКоллекции);
		КонецЕсли;
	КонецЦикла;
	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуВидыОплаты(ТипОплаты)
	
	ТекстЗапроса = "";
	Запрос = Новый Запрос();
	
	Если ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта
		ИЛИ ТипОплаты = Перечисления.ТипыОплатЧекаККМ.МобильныйПлатеж Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа
			Или ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
			//ИЛИ (НЕ ОплатаЭСНСПК И ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат
			//	И (НЕ ЭтоВозвратДеньВДень() ИЛИ НЕ ЭтоПолныйВозврат())) Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЭквайринговыеТерминалыТарифы.Ссылка КАК ЭквайринговыйТерминал,
			|	ВЫБОР
			|		КОГДА &ЭтоВозврат
			|			ТОГДА ЭквайринговыеТерминалыТарифы.ПроцентКомиссииПриВозврате
			|		ИНАЧЕ ЭквайринговыеТерминалыТарифы.ПроцентКомиссииПриПродаже
			|	КОНЕЦ КАК ПроцентКомиссии,
			|	ЭквайринговыеТерминалыТарифы.ВидОплаты КАК ВидОплаты,
			|	ЭквайринговыеТерминалы.Эквайрер КАК Эквайрер,
			|	ЭквайринговыеТерминалыТарифы.ВидОплаты.Наименование КАК ВидОплатыПредставление,
			|	ЭквайринговыеТерминалы.Эквайрер.Наименование КАК ЭквайрерПредставление
			|ПОМЕСТИТЬ ТарифыЭквайринговыхТерминалов
			|ИЗ
			|	Справочник.ЭквайринговыеТерминалы.ТарифыЗаРасчетноеОбслуживание КАК ЭквайринговыеТерминалыТарифы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
			|		ПО ЭквайринговыеТерминалыТарифы.Ссылка = ЭквайринговыеТерминалы.Ссылка
			|			И (ЭквайринговыеТерминалы.Касса = &КассаККМ)
			|			И (ЭквайринговыеТерминалы.Организация = &Организация)
			|			И (НЕ ЭквайринговыеТерминалы.ПометкаУдаления)
			|			И (НЕ ЭквайринговыеТерминалы.НеДействителен)
			|ГДЕ
			|	НЕ &ОплатаЭСНСПК
			|	И ЭквайринговыеТерминалыТарифы.ВидОплаты.ТипОплаты = &ТипОплаты
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЭквайринговыеТерминалыТарифы.Ссылка,
			|	ВЫБОР
			|		КОГДА &ЭтоВозврат
			|			ТОГДА ЭквайринговыеТерминалыТарифы.ПроцентКомиссииПриВозврате
			|		ИНАЧЕ ЭквайринговыеТерминалыТарифы.ПроцентКомиссииПриПродаже
			|	КОНЕЦ,
			|	ЭквайринговыеТерминалыТарифы.ВидОплаты,
			|	ЭквайринговыеТерминалы.Эквайрер,
			|	ЭквайринговыеТерминалыТарифы.ВидОплаты.Наименование,
			|	ЭквайринговыеТерминалы.Эквайрер.Наименование
			|ИЗ
			|	Справочник.ЭквайринговыеТерминалы.ТарифыЗаРасчетноеОбслуживание КАК ЭквайринговыеТерминалыТарифы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
			|		ПО ЭквайринговыеТерминалыТарифы.Ссылка = ЭквайринговыеТерминалы.Ссылка
			|			И (ЭквайринговыеТерминалы.Касса = &КассаККМ)
			|			И (ЭквайринговыеТерминалы.Организация = &Организация)
			|			И (НЕ ЭквайринговыеТерминалы.ПометкаУдаления)
			|			И (НЕ ЭквайринговыеТерминалы.НеДействителен)
			|ГДЕ
			|	&ОплатаЭСНСПК
			|	И ЭквайринговыеТерминалыТарифы.ВидОплаты.ПлатежнаяСистема = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежнойСистемыККТ.СертификатНСПК)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТарифыЭквайринговыхТерминалов.ЭквайринговыйТерминал) КАК КоличествоЭТ,
			|	ТарифыЭквайринговыхТерминалов.ВидОплаты КАК ВидОплаты
			|ПОМЕСТИТЬ ТаблицаПересекающихсяВидовОплат
			|ИЗ
			|	ТарифыЭквайринговыхТерминалов КАК ТарифыЭквайринговыхТерминалов
			|
			|СГРУППИРОВАТЬ ПО
			|	ТарифыЭквайринговыхТерминалов.ВидОплаты
			|
			|ИМЕЮЩИЕ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТарифыЭквайринговыхТерминалов.ЭквайринговыйТерминал) > 1
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаЭТ.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
			|	ТаблицаЭТ.ПроцентКомиссии КАК ПроцентКомиссии,
			|	ТаблицаЭТ.ВидОплаты КАК ВидОплаты,
			|	ТаблицаЭТ.ВидОплаты.ТипОплаты КАК ТипОплаты,
			|	ТаблицаЭТ.ВидОплаты.ПлатежнаяСистема КАК ПлатежнаяСистема,
			|	ВЫБОР
			|		КОГДА ТаблицаПересекающихсяВидовОплат.ВидОплаты ЕСТЬ NULL
			|			ТОГДА ТаблицаЭТ.ВидОплатыПредставление
			|		ИНАЧЕ ТаблицаЭТ.ВидОплатыПредставление + "", "" + ТаблицаЭТ.ЭквайрерПредставление
			|	КОНЕЦ КАК Представление
			|ИЗ
			|	ТарифыЭквайринговыхТерминалов КАК ТаблицаЭТ
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПересекающихсяВидовОплат КАК ТаблицаПересекающихсяВидовОплат
			|		ПО ТаблицаЭТ.ВидОплаты = ТаблицаПересекающихсяВидовОплат.ВидОплаты";
			
			Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.УстановитьПараметр("ТипОплаты", ТипОплаты);
			Запрос.УстановитьПараметр("ЭтоВозврат", ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат);
			Запрос.УстановитьПараметр("ОплатаЭСНСПК", ОплатаЭСНСПК);
			
		Иначе // Возврат
			Если (КассаККМ = ЧекККМПродажа.КассаККМ) Тогда
				
				ТекстЗапроса = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ЭквайринговыеТерминалыТарифы.Ссылка КАК ЭквайринговыйТерминал,
				|	ЭквайринговыеТерминалыТарифы.ПроцентКомиссииПриВозврате КАК ПроцентКомиссии,
				|	ЭквайринговыеТерминалыТарифы.ВидОплаты КАК ВидОплаты
				|ПОМЕСТИТЬ ТарифыЭквайринговыхТерминалов
				|ИЗ
				|	Справочник.ЭквайринговыеТерминалы.ТарифыЗаРасчетноеОбслуживание КАК ЭквайринговыеТерминалыТарифы
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
				|		ПО ЭквайринговыеТерминалыТарифы.Ссылка = ЭквайринговыеТерминалы.Ссылка
				|			И (ЭквайринговыеТерминалы.Касса = &КассаККМ)
				|			И (ЭквайринговыеТерминалы.Организация = &Организация)
				|			И (НЕ ЭквайринговыеТерминалы.ПометкаУдаления)
				|			И (НЕ ЭквайринговыеТерминалы.НеДействителен)
				|ГДЕ
				|	ЭквайринговыеТерминалыТарифы.ВидОплаты.ТипОплаты = &ТипОплаты
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТарифыЭквайринговыхТерминалов.ЭквайринговыйТерминал) КАК КоличествоЭТ,
				|	ТарифыЭквайринговыхТерминалов.ВидОплаты КАК ВидОплаты
				|ПОМЕСТИТЬ ТаблицаПересекающихсяВидовОплат
				|ИЗ
				|	ТарифыЭквайринговыхТерминалов КАК ТарифыЭквайринговыхТерминалов
				|
				|СГРУППИРОВАТЬ ПО
				|	ТарифыЭквайринговыхТерминалов.ВидОплаты
				|
				|ИМЕЮЩИЕ
				|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТарифыЭквайринговыхТерминалов.ЭквайринговыйТерминал) > 1
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ЧекККМОплата.ВидОплаты КАК ВидОплаты,
				|	ЧекККМОплата.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
				|	ЧекККМОплата.Сумма КАК Сумма,
				|	ВЫБОР
				|		КОГДА ТаблицаЭТ.ВидОплаты ЕСТЬ NULL
				|			ТОГДА -ЧекККМОплата.ПроцентКомиссии
				|		ИНАЧЕ ТаблицаЭТ.ПроцентКомиссии
				|	КОНЕЦ КАК ПроцентКомиссии,
				|	ВЫБОР
				|		КОГДА ТаблицаЭТ.ВидОплаты ЕСТЬ NULL
				|			ТОГДА -ЧекККМОплата.СуммаКомиссии
				|		ИНАЧЕ ТаблицаЭТ.ПроцентКомиссии * ЧекККМОплата.Сумма / 100
				|	КОНЕЦ КАК СуммаКомиссии,
				|	ЧекККМОплата.СсылочныйНомер КАК СсылочныйНомер,
				|	ЧекККМОплата.НомерЧекаЭТ КАК НомерЧекаЭТ,
				|	ЧекККМОплата.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
				|	ВЫБОР
				|		КОГДА ТаблицаПересекающихсяВидовОплат.ВидОплаты ЕСТЬ NULL
				|			ТОГДА ЧекККМОплата.ВидОплаты.Наименование
				|		ИНАЧЕ ЧекККМОплата.ВидОплаты.Наименование + "", "" + ЧекККМОплата.ЭквайринговыйТерминал.Эквайрер.Наименование
				|	КОНЕЦ КАК Представление,
				|	ЧекККМОплата.ВидОплаты.ПлатежнаяСистема КАК ПлатежнаяСистема,
				|	ЧекККМОплата.ВидОплаты.ТипОплаты КАК ТипОплаты
				|ИЗ
				|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
				|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПересекающихсяВидовОплат КАК ТаблицаПересекающихсяВидовОплат
				|		ПО ЧекККМОплата.ВидОплаты = ТаблицаПересекающихсяВидовОплат.ВидОплаты
				|		ЛЕВОЕ СОЕДИНЕНИЕ ТарифыЭквайринговыхТерминалов КАК ТаблицаЭТ
				|		ПО ЧекККМОплата.ВидОплаты = ТаблицаЭТ.ВидОплаты
				|			И ЧекККМОплата.ЭквайринговыйТерминал = ТаблицаЭТ.ЭквайринговыйТерминал
				|ГДЕ
				|	НЕ &ОплатаЭСНСПК
				|	И ЧекККМОплата.Ссылка = &Ссылка
				|	И ЧекККМОплата.ВидОплаты.ТипОплаты = &ТипОплаты
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ЧекККМОплата.ВидОплаты,
				|	ЧекККМОплата.ЭквайринговыйТерминал,
				|	ЧекККМОплата.Сумма,
				|	ВЫБОР
				|		КОГДА ТаблицаЭТ.ВидОплаты ЕСТЬ NULL
				|			ТОГДА -ЧекККМОплата.ПроцентКомиссии
				|		ИНАЧЕ ТаблицаЭТ.ПроцентКомиссии
				|	КОНЕЦ,
				|	ВЫБОР
				|		КОГДА ТаблицаЭТ.ВидОплаты ЕСТЬ NULL
				|			ТОГДА -ЧекККМОплата.СуммаКомиссии
				|		ИНАЧЕ ТаблицаЭТ.ПроцентКомиссии * ЧекККМОплата.Сумма / 100
				|	КОНЕЦ,
				|	ЧекККМОплата.СсылочныйНомер,
				|	ЧекККМОплата.НомерЧекаЭТ,
				|	ЧекККМОплата.НомерПлатежнойКарты,
				|	ВЫБОР
				|		КОГДА ТаблицаПересекающихсяВидовОплат.ВидОплаты ЕСТЬ NULL
				|			ТОГДА ЧекККМОплата.ВидОплаты.Наименование
				|		ИНАЧЕ ЧекККМОплата.ВидОплаты.Наименование + "", "" + ЧекККМОплата.ЭквайринговыйТерминал.Эквайрер.Наименование
				|	КОНЕЦ,
				|	ЧекККМОплата.ВидОплаты.ПлатежнаяСистема КАК ПлатежнаяСистема,
				|	ЧекККМОплата.ВидОплаты.ТипОплаты
				|ИЗ
				|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
				|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПересекающихсяВидовОплат КАК ТаблицаПересекающихсяВидовОплат
				|		ПО ЧекККМОплата.ВидОплаты = ТаблицаПересекающихсяВидовОплат.ВидОплаты
				|		ЛЕВОЕ СОЕДИНЕНИЕ ТарифыЭквайринговыхТерминалов КАК ТаблицаЭТ
				|		ПО ЧекККМОплата.ВидОплаты = ТаблицаЭТ.ВидОплаты
				|			И ЧекККМОплата.ЭквайринговыйТерминал = ТаблицаЭТ.ЭквайринговыйТерминал
				|ГДЕ
				|	&ОплатаЭСНСПК
				|	И ЧекККМОплата.Ссылка = &Ссылка
				|	И ЧекККМОплата.ВидОплаты.ПлатежнаяСистема = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежнойСистемыККТ.СертификатНСПК)";
				
				Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
				Запрос.УстановитьПараметр("Организация", Организация);
				Запрос.УстановитьПараметр("Ссылка", ЧекККМПродажа);
				Запрос.УстановитьПараметр("ТипОплаты", ТипОплаты);
				Запрос.УстановитьПараметр("ОплатаЭСНСПК", ОплатаЭСНСПК);
				
			КонецЕсли;
			
			СтрокаСтруктурыПоиска = "ВидОплаты, Сумма, ЭквайринговыйТерминал, СсылочныйНомер, НомерЧекаЭТ, НомерПлатежнойКарты";
			
			Если ОплатаЭСНСПК И ЧекККМПродажа.Пустая() И ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
				ТекстЗапроса =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ВидыОплатЧекаККМ.Ссылка КАК ВидОплаты,
				|	ВидыОплатЧекаККМ.ПроцентБанковскойКомиссии КАК ПроцентКомиссии,
				|	ВидыОплатЧекаККМ.Наименование КАК Представление,
				|	ВидыОплатЧекаККМ.ПлатежнаяСистема КАК ПлатежнаяСистема,
				|	ВидыОплатЧекаККМ.ТипОплаты КАК ТипОплаты
				|ИЗ
				|	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
				|ГДЕ
				|	НЕ ВидыОплатЧекаККМ.ЭтоГруппа
				|	И НЕ ВидыОплатЧекаККМ.ПометкаУдаления
				|	И ВидыОплатЧекаККМ.Ссылка В (&МассивОплат)";
				
				ВидОплатыПлатежнаяКартаНСПК = Справочники.ВидыОплатЧекаККМ.ПустаяСсылка();
				ЭлектронныеСертификатыНСПКРТ.ЗаполнитьВидОплатыПлатежнаяКартаНСПК(ВидОплатыПлатежнаяКартаНСПК);
				
				ВидОплатыПлатежнаяСистемаНСПК = Справочники.ВидыОплатЧекаККМ.ПустаяСсылка();
				ЭлектронныеСертификатыНСПКРТ.ЗаполнитьВидОплатыПлатежнаяСистемаНСПК(ВидОплатыПлатежнаяСистемаНСПК);
				
				МассивОплат = Новый Массив;
				МассивОплат.Добавить(ВидОплатыПлатежнаяКартаНСПК);
				МассивОплат.Добавить(ВидОплатыПлатежнаяСистемаНСПК);
				Запрос.УстановитьПараметр("МассивОплат", МассивОплат);
				СтрокаСтруктурыПоиска = "ВидОплаты, Сумма";
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		
		Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВидыОплатЧекаККМ.Ссылка КАК ВидОплаты,
			|	ВидыОплатЧекаККМ.ПроцентБанковскойКомиссии КАК ПроцентКомиссии,
			|	ВидыОплатЧекаККМ.Наименование КАК Представление,
			|	ВидыОплатЧекаККМ.ПлатежнаяСистема КАК ПлатежнаяСистема,
			|	ВидыОплатЧекаККМ.ТипОплаты КАК ТипОплаты
			|ИЗ
			|	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
			|ГДЕ
			|	НЕ ВидыОплатЧекаККМ.ЭтоГруппа
			|	И НЕ ВидыОплатЧекаККМ.ПометкаУдаления
			|	И ВидыОплатЧекаККМ.ТипОплаты В(&ТипОплаты)";
			
			Запрос.УстановитьПараметр("ТипОплаты", ТипОплаты);
		Иначе
			
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВЫБОР
			|		КОГДА РасчетыСКлиентамиОстатки.СуммаОстаток < 0
			|			ТОГДА -РасчетыСКлиентамиОстатки.СуммаОстаток
			|		ИНАЧЕ РасчетыСКлиентамиОстатки.СуммаОстаток
			|	КОНЕЦ КАК Сумма
			|ПОМЕСТИТЬ ТаблицаВЗапросе
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентами.Остатки(, ДокументРасчета = &ДокументРасчета) КАК РасчетыСКлиентамиОстатки
			|ГДЕ
			|	ВЫБОР
			|			КОГДА РасчетыСКлиентамиОстатки.ДокументРасчета ССЫЛКА Документ.ЧекККМ
			|				ТОГДА НЕ РасчетыСКлиентамиОстатки.ДокументРасчета.ОперацияСДенежнымиСредствами
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЧекККМОплата.ВидОплаты КАК ВидОплаты,
			|	ТаблицаВЗапросе.Сумма КАК Сумма,
			|	ЧекККМОплата.ПроцентКомиссии КАК ПроцентКомиссии,
			|	ТаблицаВЗапросе.Сумма * ЧекККМОплата.ВидОплаты.ПроцентБанковскойКомиссии КАК СуммаКомиссии,
			|	ЧекККМОплата.ВидОплаты.Наименование КАК Представление,
			|	ЧекККМОплата.ВидОплаты.ПлатежнаяСистема КАК ПлатежнаяСистема,
			|	ЧекККМОплата.ВидОплаты.ТипОплаты КАК ТипОплаты
			|ИЗ
			|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата,
			|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
			|ГДЕ
			|	ЧекККМОплата.Ссылка = &Ссылка
			|	И ЧекККМОплата.ВидОплаты.ТипОплаты В(&ТипОплаты)";
			
			Запрос.УстановитьПараметр("Ссылка", ЧекККМПродажа);
			Запрос.УстановитьПараметр("ДокументРасчета", ЧекККМПродажа);
			Запрос.УстановитьПараметр("ТипОплаты", ТипОплаты);
			
			СтрокаСтруктурыПоиска = "ВидОплаты, Сумма";
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаВидовОплат = Неопределено;
	
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Запрос.Текст = ТекстЗапроса;
		ТаблицаВидовОплат = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	ВидыОплат.Очистить();
	Если Не ТаблицаВидовОплат = Неопределено Тогда
		Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
			Для каждого СтрокаВыбранныхОплат Из ТекущиеВидыОплат Цикл
				Если ТипОплаты = СтрокаВыбранныхОплат.ВидОплаты.ТипОплаты Тогда
					
					СтруктураПоиска = Новый Структура(СтрокаСтруктурыПоиска);
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаВыбранныхОплат);
					
					СтрокиТаблицы = ТаблицаВидовОплат.НайтиСтроки(СтруктураПоиска);
					Если СтрокиТаблицы.Количество() > 0  Тогда
						ТаблицаВидовОплат.Удалить(СтрокиТаблицы[0]);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого ТекСтрокаТаблицаВидовОплат Из ТаблицаВидовОплат Цикл
			НовСтрока = ВидыОплат.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрокаТаблицаВидовОплат);
		КонецЦикла;
	КонецЕсли;
	
	СтрокаВыхода = ВидыОплат.Добавить();
	СтрокаВыхода.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ПустаяСсылка();
	СтрокаВыхода.Представление = НСтр("ru = 'Назад'")
КонецПроцедуры

&НаСервере
Функция ЭтоВозвратДеньВДень()
	
	Если ЗначениеЗаполнено(ЧекККМПродажа) Тогда
		
		Возврат НЕ ЗначениеЗаполнено(ЧекККМПродажа.ОтчетОРозничныхПродажах);
	Иначе
		
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЭтоПолныйВозврат()
	
	Если ЗначениеЗаполнено(ЧекККМПродажа) Тогда
		
		НеобходимаяСуммаВозврата = ЧекККМПродажа.Товары.Итог("Сумма");
		
		Возврат НеобходимаяСуммаВозврата = СуммаОплаты;
	Иначе
		
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеSMSEmail()
	
	КонтрольЗаполненияДанных = ВозможностьЭлектронногоПлатежа И НеПечататьБумажныйЧек;
	
	Если ОплатаПлатежнойСистемой Тогда
		РозничныеПродажиКлиент.ОбновитьДанныеSMSEmail(Телефон, Email, КонтрольЗаполненияДанных, ДанныеSMSИлиEmail, Элементы, "ДанныеSMSИлиEmailПС");
	Иначе
		РозничныеПродажиКлиент.ОбновитьДанныеSMSEmail(Телефон, Email, КонтрольЗаполненияДанных, ДанныеSMSИлиEmail, Элементы, "ДанныеSMSИлиEmail");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФорму()
	
	ОбщаяСуммаОплаты = ТекущиеВидыОплат.Итог("Сумма");
	
	Если ЭтоАвансБезРасшифровкиПоТоварам Тогда
		СуммаСдачи = 0;
		Элементы.КомандаEnterПраваяКлавиатура.Доступность = Истина;
		Элементы.КомандаEnter.Доступность = Истина;
		ЦветТекстаСдачи  = Новый Цвет(45, 115, 44);
		ЗаголовокСдачи  = НСтр("ru = 'Сумма аванса (тг)'");
	ИначеЕсли ЭтоАванс Тогда
		СуммаСдачи = ОбщаяСуммаОплаты;
		
		Элементы.КомандаEnterПраваяКлавиатура.Доступность = ОбщаяСуммаОплаты > 0;
		Элементы.КомандаEnter.Доступность = ОбщаяСуммаОплаты > 0;
		Если ОбщаяСуммаОплаты >= ИтогПоОрганизации Тогда
			
			ЦветТекстаСдачи  = Новый Цвет(45, 115, 44);
			ЗаголовокСдачи  = НСтр("ru = 'Сумма аванса (тг)'");
			ПодключитьОбработчикОжидания("Подключаемый_УстановитьТекущийЭлементEnter", 0.1, Истина);
		Иначе
			СуммаСдачи = ИтогПоОрганизации - ОбщаяСуммаОплаты;
			Элементы.КомандаEnterПраваяКлавиатура.Доступность = Ложь;
			Элементы.КомандаEnter.Доступность = Ложь;
			
			ЦветТекстаСдачи = WebЦвета.Красный;
			ЗаголовокСдачи  = НСтр("ru = 'Остаток (тг)'");
		КонецЕсли;
	Иначе
		Если ОбщаяСуммаОплаты >= ИтогПоОрганизации Тогда
			СуммаСдачи = ОбщаяСуммаОплаты - ИтогПоОрганизации;
			
			ЦветТекстаСдачи  = Новый Цвет(45, 115, 44);
			ЗаголовокСдачи  = НСтр("ru = 'Сдача (тг)'");
			ПодключитьОбработчикОжидания("Подключаемый_УстановитьТекущийЭлементEnter", 0.1, Истина);
		Иначе
			СуммаСдачи = ИтогПоОрганизации - ОбщаяСуммаОплаты;
			
			ЦветТекстаСдачи = WebЦвета.Красный;
			ЗаголовокСдачи  = НСтр("ru = 'Остаток (тг)'");
		КонецЕсли;
	КонецЕсли;
	
	Элементы.КомандаSMS.Доступность                   = ВозможностьЭлектронногоПлатежа;
	Элементы.КомандаSMSПанель.Доступность             = ВозможностьЭлектронногоПлатежа;
	Элементы.КомандаSMSПраваяКлавиатура.Доступность   = ВозможностьЭлектронногоПлатежа;
	
	Элементы.КомандаEmail.Доступность                 = ВозможностьЭлектронногоПлатежа;
	Элементы.КомандаEmailПанель.Доступность           = ВозможностьЭлектронногоПлатежа;
	Элементы.КомандаEmailПраваяКлавиатура.Доступность = ВозможностьЭлектронногоПлатежа;
	
	Элементы.СуммаСдачи.ЦветТекста = ЦветТекстаСдачи;
	Элементы.СуммаСдачи.Заголовок  = ЗаголовокСдачи;
	
	Если (ЗначениеЗаполнено(Телефон)
			ИЛИ ЗначениеЗаполнено(Email))
		И ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
		Если ОтказКлиентаОтСохраненияТелефонаEmail Тогда
			Элементы.ДекорацияОтказКлиентаОтСохраненияТелефонаEmail.Картинка 	= БиблиотекаКартинок.НеСохранять16;
			Элементы.ДекорацияОтказКлиентаОтСохраненияТелефонаEmailПС.Картинка 	= БиблиотекаКартинок.НеСохранять16;
		Иначе
			Элементы.ДекорацияОтказКлиентаОтСохраненияТелефонаEmail.Картинка 	= БиблиотекаКартинок.Сохранить16;
			Элементы.ДекорацияОтказКлиентаОтСохраненияТелефонаEmailПС.Картинка 	= БиблиотекаКартинок.Сохранить16;
		КонецЕсли;
	Иначе
		Элементы.ДекорацияОтказКлиентаОтСохраненияТелефонаEmail.Картинка 	= БиблиотекаКартинок.Пустая;
		Элементы.ДекорацияОтказКлиентаОтСохраненияТелефонаEmailПС.Картинка 	= БиблиотекаКартинок.Пустая;
	КонецЕсли;
	
	Если (ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа")) Тогда
		Элементы.КомандаКредит.Доступность = ЕстьВозможностьОплатыБанковскимКредитом 
											И НЕ ЭтоАвансБезРасшифровкиПоТоварам;
	Иначе
		Элементы.КомандаКредит.Доступность = ЕстьВозможностьОплатыБанковскимКредитом 
											И ВозвращаютсяТоварыВРассрочку;
	КонецЕсли;
	
	Если Элементы.КомандаКредит.Доступность И ОперацияСДенежнымиСредствами Тогда
		Элементы.КомандаКредит.Доступность = ТекущиеВидыОплат.Количество() > 0;
	КонецЕсли;
	Элементы.КомандаКредитПанель.Доступность = Элементы.КомандаКредит.Доступность;
	
КонецПроцедуры

&НаКлиенте
Функция СуммаОплатПлатежнойКартой();
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта"));
	
	СтрокиВидовОплат = ТекущиеВидыОплат.НайтиСтроки(СтруктураПоиска);
	
	СуммаОплатыПлатежнойКартой = 0;
	
	Для каждого СтрокаВидовОплат Из СтрокиВидовОплат Цикл
	
		СуммаОплатыПлатежнойКартой = СуммаОплатыПлатежнойКартой + СтрокаВидовОплат.Сумма;
	
	КонецЦикла;
	
	Возврат СуммаОплатыПлатежнойКартой
	
КонецФункции // СуммаОплатПлатежнойКартой()

&НаКлиенте
Процедура ОплатаПлатежнойКартойЧерезЭквайринговыйТерминал(ВыбраннаяСтрока)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Обработка.РМКУправляемыйРежим.Форма.ФормаВводаЧисла.Открытие");

	ИдентификаторУстройстваЭТ = Неопределено;
	ИдентификаторУстройстваФР = Неопределено;
	
	СуммаОперации       = 0;
	НомерКарты          = "";
	НомерСсылкиОперации = "";
	НомерЧекаЭТ         = "";
	СтрокаСлипЧека      = "";
	ВидКарты            = "";
	
	// Выбор устройства ФР
	ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройстваФР      = ПараметрыКассыККМ.ИдентификаторУстройства;
	ПечатьНаПечатающемУстройствеЭТ = Истина;
	СтруктураЭквайринговыйТерминал = СтруктураДанныхЭТ(ВыбраннаяСтрока.ЭквайринговыйТерминал);
	ИдентификаторУстройстваЭТ = СтруктураЭквайринговыйТерминал.ПодключаемоеОборудование;
	
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда
		ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования = Истина;
		СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования = Истина;
	КонецЕсли;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	ОставшаясяСуммаОплаты = ?(ИтогПоОрганизации = 0, ТекущиеВидыОплат.Итог("Сумма"), ИтогПоОрганизации - ТекущиеВидыОплат.Итог("Сумма"));
	ПределСуммы           = ИтогПоОрганизации - СуммаОплатПлатежнойКартой();
	
	ПараметрДействия = Новый Структура;
	ПараметрДействия.Вставить("СуммаОперации"                         , СуммаОперации);
	ПараметрДействия.Вставить("ИспользоватьБезПодключенияОборудования", СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования);
	ПараметрДействия.Вставить("ИспользоватьКассуККМБезПодключенияОборудования", ИспользоватьКассуККМБезПодключенияОборудования);
	ПараметрДействия.Вставить("ИдентификаторУстройстваЭТ"             , ИдентификаторУстройстваЭТ);
	ПараметрДействия.Вставить("ИдентификаторУстройстваФР"             , ИдентификаторУстройстваФР);
	ПараметрДействия.Вставить("ИдентификаторВыбраннойСтроки"          , ВыбраннаяСтрока.ПолучитьИдентификатор());
	
	// Предварительно авторизуем операцию.
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок"           , НСтр("ru = 'Авторизация операции'"));
	Если НЕ ЭтоАванс Тогда
		ПараметрыФормы.Вставить("МаксимальноеЗначение", ПределСуммы);
	КонецЕсли;
	ПараметрыФормы.Вставить("ЧислоВвода"          , ОставшаясяСуммаОплаты);
	ПараметрыФормы.Вставить("Отрицательное"       , Ложь);
	ПараметрыФормы.Вставить("АвторизацияЭТ"       , Истина);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуОплатыПлатежнойКартойЧерезЭквайринговыйТерминал", ЭтотОбъект, ДополнительныеПараметры);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВводаЧисла", ПараметрыФормы,УникальныйИдентификатор,,,, ОбработчикОповещения, Режим); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПоЧекуФрагмент()
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытиеФормыВопросаНеПечататьБумажныйЧек", ЭтотОбъект);
	
	Сдача = Оплата.Итог("Сумма") - ИтогПоОрганизации;
	
	Если Сдача < 0 И Не ЭтоАванс Тогда
		Возврат;
	КонецЕсли;
	
	Если Оплата.Итог("Сумма") = 0 Тогда
		
		ЗаголовокИнформации = НСтр("ru = 'Ошибка оплаты чека.'"); 
		ТекстОшибки = НСтр("ru = 'Чек должен быть оплачен.'")
		+ Символы.ПС + НСтр("ru = 'Необходимо указать сумму оплаты чека.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстОшибки);
		
		ОчиститьПоОрганизации();
		
		Возврат;
	
	КонецЕсли;
	
	Если ОперацияСДенежнымиСредствами 
		И НЕ ЕстьНаличнаяИлиЭлектроннаяОплата() Тогда
		ЗаголовокИнформации = НСтр("ru = 'Ошибка оплаты чека.'"); 
		ТекстОшибки = НСтр("ru = 'Должна быть введена или наличная или электронная оплата.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстОшибки);
		
		ОчиститьПоОрганизации();
		
		Возврат;
	КонецЕсли;
	
	ОплатаБанковскимКредитомПлатежнойКартой = 0;
	
	Для каждого СтрокаОплата Из Оплата Цикл
		Если НЕ (СтрокаОплата.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Наличные")
			 ИЛИ СтрокаОплата.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом")) Тогда
		
			ОплатаБанковскимКредитомПлатежнойКартой = ОплатаБанковскимКредитомПлатежнойКартой + СтрокаОплата.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Если ОплатаБанковскимКредитомПлатежнойКартой > ИтогПоОрганизации 
		И НЕ ЭтоАвансБезРасшифровкиПоТоварам Тогда
		ЗаголовокИнформации = НСтр("ru = 'Ошибка оплаты чека.'");
		ТекстОшибки = НСтр("ru = 'Сумма оплаты банковской картой и банковский кредит превышает сумму чека'");
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстОшибки);
		
		ОчиститьПоОрганизации();
		Возврат;
	КонецЕсли;
	
	Если ВозможностьЭлектронногоПлатежа
		И НеПечататьБумажныйЧек
		И НЕ ОбщегоНазначенияРТКлиент.ПроверитьДанныеЭлектронногоЧека(Телефон, Email, ОбработчикОповещения) Тогда
		
		Возврат;
		
	КонецЕСли;
	
	ЗавершениеОплатыПоЧеку();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОплатыПоЧеку()
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Контрагент = КонтрагентРозничныйПокупатель;
	КонецЕсли;
	
	Сдача = Оплата.Итог("Сумма") - ИтогПоОрганизации;
	
	СанкционированноеЗакрытие = Истина;
	
	Если ЭтоАванс И Сдача < 0 
		И НЕ ЭтоАвансБезРасшифровкиПоТоварам 
		И ИспользоватьРасчетыСКлиентами Тогда
		// Это частичная предоплата
		
		СтрокаОплаты = Оплата.Добавить();
		СтрокаОплаты.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.ОплатаВрассрочку");
		СтрокаОплаты.Сумма     = - Сдача;
		
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Действие", НСтр("ru = 'Закрыть чек'"));
	СтруктураОтвета.Вставить("АдресТаблицыОплата", АдресТаблицыОплата());
	СтруктураОтвета.Вставить("АдресТаблицыПогашениеПодарочныхСертификатов", АдресТаблицыПогашениеПодарочныхСертификатов());
	
	Если ЗначениеЗаполнено(ДисконтнаяКарта) 
		И НЕ ОтказКлиентаОтСохраненияТелефонаEmail Тогда
		СтруктураОтвета.Вставить("СохранятьТелефонEmail");
	КонецЕсли;
	СтруктураОтвета.Вставить("Email"  , 				Email);
	СтруктураОтвета.Вставить("Телефон", 				Формат(Телефон, "ЧЦ=10; ЧДЦ=; ЧГ=0"));
	СтруктураОтвета.Вставить("Контрагент", 				Контрагент);
	СтруктураОтвета.Вставить("НеПечататьБумажныйЧек", 	НеПечататьБумажныйЧек);
	
	Если СуммаОплатПлатежнойКартой() > 0 Тогда 
		СтруктураОтвета.Вставить("ЕстьОплатаПоПлатежнойКарте");
	КонецЕсли;
	
	Если ОплатаПлатежнойСистемой Тогда 
		СтруктураОтвета.Вставить("ЕстьОплатаПоПлатежнойСистеме");
	КонецЕсли;
	
	Закрыть(СтруктураОтвета);
КонецПроцедуры

// Возврат оплаты ПК

&НаКлиенте
Процедура ВозвратОплатыПлатежнойКартойЧерезЭквайринговыйТерминал(ВыбраннаяСтрока)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Обработка.РМКУправляемыйРежим.Форма.ФормаВводаЧисла.Открытие");

	ИдентификаторУстройстваЭТ = Неопределено;
	ИдентификаторУстройстваФР = Неопределено;
	
	СуммаОперации       = 0;
	НомерКарты          = "";
	НомерСсылкиОперации = "";
	НомерЧекаЭТ         = "";
	СтрокаСлипЧека      = "";
	ВидКарты            = "";
	
	// Выбор устройства ФР
	ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройстваФР      = ПараметрыКассыККМ.ИдентификаторУстройства;
	ПечатьНаПечатающемУстройствеЭТ = Истина;
	СтруктураЭквайринговыйТерминал = СтруктураДанныхЭТ(ВыбраннаяСтрока.ЭквайринговыйТерминал);
	ИдентификаторУстройстваЭТ = СтруктураЭквайринговыйТерминал.ПодключаемоеОборудование;
	
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда
		ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования = Истина;
		СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования = Истина;
	КонецЕсли;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	ОставшаясяСуммаОплаты = ИтогПоОрганизации - ТекущиеВидыОплат.Итог("Сумма");
	ПределСуммы           = ИтогПоОрганизации - СуммаОплатПлатежнойКартой();
	
	ПараметрДействия = Новый Структура;
	ПараметрДействия.Вставить("СуммаОперации"                         , СуммаОперации);
	ПараметрДействия.Вставить("ИспользоватьБезПодключенияОборудования", СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования);
	ПараметрДействия.Вставить("ИспользоватьКассуККМБезПодключенияОборудования", ИспользоватьКассуККМБезПодключенияОборудования);
	ПараметрДействия.Вставить("ИдентификаторУстройстваЭТ"             , ИдентификаторУстройстваЭТ);
	ПараметрДействия.Вставить("ИдентификаторУстройстваФР"             , ИдентификаторУстройстваФР);
	ПараметрДействия.Вставить("ИдентификаторВыбраннойСтроки"          , ВыбраннаяСтрока.ПолучитьИдентификатор());
	
	// Предварительно авторизуем операцию.
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок"           , НСтр("ru = 'Авторизация операции'"));
	ПараметрыФормы.Вставить("МаксимальноеЗначение", ПределСуммы);
	ПараметрыФормы.Вставить("ЧислоВвода"          , ОставшаясяСуммаОплаты);
	ПараметрыФормы.Вставить("Отрицательное"       , Ложь);
	ПараметрыФормы.Вставить("АвторизацияЭТ"       , Истина);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВозвратаПлатежнойКартойЧерезЭквайринговыйТерминал", ЭтотОбъект, ДополнительныеПараметры);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВводаЧисла", ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВозвратаПлатежнойКартойЧерезЭквайринговыйТерминал(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.ПараметрДействия.Вставить("ОткрытаБлокирующаяФорма", Ложь);
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		ЗначениеВыбораЧисло = РезультатОткрытияФормы.ВведенноеЧисло;
		
		Если ЗначениеЗаполнено(ЗначениеВыбораЧисло) Тогда
			СуммаОперации = ЗначениеВыбораЧисло;
		Иначе
			СуммаОперации = 0;
		КонецЕсли;
		
		ДополнительныеПараметры.ПараметрДействия.Вставить("ДанныеКарты"  , РезультатОткрытияФормы.ДанныеКарты);
		ДополнительныеПараметры.ПараметрДействия.Вставить("СуммаОперации", СуммаОперации);
		ЗавершитьВозвратПлатежнойКартойЧерезЭквайринговыйТерминалНачало(ДополнительныеПараметры.ПараметрДействия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВозвратПлатежнойКартойЧерезЭквайринговыйТерминалНачало(ПараметрДействия)
	
	ДанныеКарты                    = ПараметрДействия.ДанныеКарты;
	ИдентификаторУстройстваЭТ      = ПараметрДействия.ИдентификаторУстройстваЭТ;
	СуммаОперации                  = ПараметрДействия.СуммаОперации;
	
	ВыбраннаяСтрока = ВидыОплат.НайтиПоИдентификатору(ПараметрДействия.ИдентификаторВыбраннойСтроки);
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрДействия.Вставить("СтрокаСлипЧека", "");
	ПараметрДействия.Вставить("НомерСсылкиОперации", "");
	ПараметрДействия.Вставить("НомерЧекаЭТ", "");
	
	Если НЕ ПараметрДействия.ИспользоватьБезПодключенияОборудования Тогда
		
		ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
		ПараметрыОперации.ТипТранзакции  = "AuthorizeRefund";
		ПараметрыОперации.СуммаОперации  = СуммаОперации;
		ПараметрыОперации.НомерЧека      = " ";
		
		ЭтаФорма.Доступность = Ложь;
		Оповещение = Новый ОписаниеОповещения("ЗавершитьВозвратПлатежнойКартойЧерезЭквайринговыйТерминалЗавершение", ЭтотОбъект, ПараметрДействия);
		
		МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение, УникальныйИдентификатор, 
			ПараметрДействия.ИдентификаторУстройстваЭТ, ПараметрДействия.ИдентификаторУстройстваФР, ПараметрыОперации);
			
	Иначе
		
		ТекстИнформации = НСтр("ru = 'Требуется выполнить операцию возврата оплаты на эквайринговом терминале.'") + Символы.ПС;
		ТекстИнформации = ТекстИнформации + НСтр("ru = 'Сумма операции:'")        + " "+ СуммаОперации  + Символы.ПС;
		ТекстИнформации = ТекстИнформации;
		ЗаголовокИнформации = НСтр("ru = 'Операция возврата оплаты на терминале прошла успешно?'");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВопросаУспехОперацииНаЭквайринговомТерминале", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрДействия.ОткрытаБлокирующаяФорма = Истина;
		ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации,,ОбработчикОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВозвратПлатежнойКартойЧерезЭквайринговыйТерминалЗавершение(РезультатВыполнения, ПараметрДействия) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		ПараметрДействия.ДанныеКарты         = РезультатВыполнения.НомерКарты;
		ПараметрДействия.НомерСсылкиОперации = РезультатВыполнения.СсылочныйНомер;
		ПараметрДействия.НомерЧекаЭТ         = РезультатВыполнения.НомерЧекаЭТ;
		ЗавершитьВозвратПлатежнойКартойЧерезЭквайринговыйТерминалОкончание(ПараметрДействия);
	Иначе
		ЗаголовокИнформации = НСтр("ru = 'При выполнении операции возникла ошибка:'"); 
		ТекстСообщения = НСтр("ru = '""%ОписаниеОшибки%"".
								  |Оплата по карте не была произведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
		ПриЗавершенииОплатуПлатежнойКартойЧерезЭквайринговыйТерминал(ПараметрДействия);
	КонецЕсли;

	ВыводИнформацииНаДисплейПокупателя(РезультатВыполнения.Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВозвратПлатежнойКартойЧерезЭквайринговыйТерминалОкончание(ПараметрДействия)
	
	ВыбраннаяСтрока = ВидыОплат.НайтиПоИдентификатору(ПараметрДействия.ИдентификаторВыбраннойСтроки);
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКарты                    = ПараметрДействия.ДанныеКарты;
	ИдентификаторУстройстваЭТ      = ПараметрДействия.ИдентификаторУстройстваЭТ;
	СуммаОперации                  = ПараметрДействия.СуммаОперации;
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрДействия.ИспользоватьКассуККМБезПодключенияОборудования;
	ИдентификаторУстройстваФР      = ПараметрДействия.ИдентификаторУстройстваФР;
	НомерСсылкиОперации            = ПараметрДействия.НомерСсылкиОперации;
	НомерЧекаЭТ                    = ПараметрДействия.НомерЧекаЭТ;
	
	// Сохранить в таблице данные оплаты картой.
	
	СтрокаОплаты = ТекущиеВидыОплат.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаОплаты, ВыбраннаяСтрока);
	СтрокаОплаты.Сумма     = СуммаОперации;
	СтрокаОплаты.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта");
	СтрокаОплаты.СуммаКомиссии = СтрокаОплаты.Сумма * СтрокаОплаты.ПроцентКомиссии / 100;
	
	СтрокаОплаты.Организация             = Организация;
	СтрокаОплаты.ПредставлениеВидаОплаты = СтрокаОплаты.ВидОплаты;
	СтрокаОплаты.ПредставлениеСуммы      = СтрокаОплаты.Сумма;
	
	СтрокаОплаты.СсылочныйНомер      = НомерСсылкиОперации;
	СтрокаОплаты.НомерЧекаЭТ         = НомерЧекаЭТ;
	СтрокаОплаты.НомерПлатежнойКарты = НомерКарты;
	
	СтрокаОплаты.ЗапретРедактирования = Истина;
	СтрокаОплаты.ДанныеПереданыВБанк  = Истина;
	
	ЭтотОбъект.ТекущийЭлемент = Элементы.ТекущиеВидыОплат;
	Элементы.ТекущиеВидыОплат.ТекущаяСтрока = СтрокаОплаты.ПолучитьИдентификатор();
	
	ПриЗавершенииОплатуПлатежнойКартойЧерезЭквайринговыйТерминал(ПараметрДействия)
	
КонецПроцедуры

// Сторно ПК

&НаКлиенте
Процедура СторноОплатыПлатежнойКартойЧерезЭквайринговыйТерминалЗавершение(РезультатВыполнения, ПараметрДействия) Экспорт;
	
	ЭтаФорма.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда                 
		
		Если ПараметрДействия.Свойство("ЗавершитьУдалениеСтроки") Тогда
			ЗавершитьУдалениеСтроки(ПараметрДействия)
		КонецЕсли;
	
		Если ПараметрДействия.Свойство("ЗавершитьОбработкуВыбораПлатежнойКарты") Тогда
			ЗавершитьОбработкуВыбораПлатежнойКарты(ПараметрДействия);
			ПересчитатьЗначенияСуммДляПодарочныхСертификатов();
		КонецЕсли;
	
		ИндексВМассивеСтрокВыбранныхОплат = Неопределено;
		Если ПараметрДействия.Свойство("УдалитьСтрокуИзМассива", ИндексВМассивеСтрокВыбранныхОплат) Тогда
			ПараметрДействия.СтрокиВыбранныхОплат.Удалить(ИндексВМассивеСтрокВыбранныхОплат)
		КонецЕсли;
	
	Иначе                    
		ТекстОписаниеОшибки = РезультатВыполнения.ОписаниеОшибки;
		ПараметрДействия.ТекстОписаниеОшибки = ТекстОписаниеОшибки;
	КонецЕсли;

	ВыводИнформацииНаДисплейПокупателя(РезультатВыполнения.Результат);
	
	Если ПараметрДействия.ОповещениеПриЗавершении <> Неопределено Тогда
		ПараметрДействия.Результат = РезультатВыполнения.Результат; 
		ВыполнитьОбработкуОповещения(ПараметрДействия.ОповещениеПриЗавершении, ПараметрДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СторноОплатыПлатежнойКартойЧерезЭквайринговыйТерминал(ОповещениеПриЗавершении, ВыбраннаяСтрока, ПараметрДействия)
	
	ИдентификаторУстройстваЭТ = Неопределено;
	ИдентификаторУстройстваФР = Неопределено;
	ОписаниеОшибки            = "";
	КонечныйРезультат         = Ложь;
	
	СуммаОперации       = ВыбраннаяСтрока.Сумма;
	НомерКарты          = ВыбраннаяСтрока.НомерПлатежнойКарты;
	НомерСсылкиОперации = ВыбраннаяСтрока.СсылочныйНомер;
	НомерЧекаЭТ         = ВыбраннаяСтрока.НомерЧекаЭТ;
	СтрокаСлипЧека      = "";
	ТекстОписаниеОшибки = "";
	
	// Выбор устройства ФР
	ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройстваФР      = ПараметрыКассыККМ.ИдентификаторУстройства;
	СтруктураЭквайринговыйТерминал = СтруктураДанныхЭТ(ВыбраннаяСтрока.ЭквайринговыйТерминал);
	ИдентификаторУстройстваЭТ = СтруктураЭквайринговыйТерминал.ПодключаемоеОборудование;
	
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда
		ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования = Истина;
		СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования = Истина;
	КонецЕсли;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	ПараметрДействия.Вставить("ИспользоватьКассуККМБезПодключенияОборудования", ИспользоватьКассуККМБезПодключенияОборудования);
	ПараметрДействия.Вставить("ИдентификаторУстройстваФР"     , ИдентификаторУстройстваФР);
	ПараметрДействия.Вставить("ИдентификаторУстройстваЭТ"     , ИдентификаторУстройстваЭТ);
	ПараметрДействия.Вставить("СуммаОперации"                 , СуммаОперации);
	ПараметрДействия.Вставить("НомерСсылкиОперации"           , НомерСсылкиОперации);
	ПараметрДействия.Вставить("НомерЧекаЭТ"                   , НомерЧекаЭТ);
	ПараметрДействия.Вставить("ОповещениеПриЗавершении"       , ОповещениеПриЗавершении);  
	ПараметрДействия.Вставить("Результат"                     , Ложь);
	ПараметрДействия.Вставить("ТекстОписаниеОшибки"           , "");       

	Если НЕ СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
		
		ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
		ПараметрыОперации.ТипТранзакции  = "AuthorizeVoid";
		ПараметрыОперации.СуммаОперации  = СуммаОперации;
		ПараметрыОперации.НомерЧекаЭТ    = НомерЧекаЭТ;
		ПараметрыОперации.СсылочныйНомер = НомерСсылкиОперации;
		
		ЭтаФорма.Доступность = Ложь;
		
		Оповещение = Новый ОписаниеОповещения("СторноОплатыПлатежнойКартойЧерезЭквайринговыйТерминалЗавершение", ЭтотОбъект, ПараметрДействия);
		МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение, УникальныйИдентификатор, 
			ПараметрДействия.ИдентификаторУстройстваЭТ, ПараметрДействия.ИдентификаторУстройстваФР, ПараметрыОперации)
			
	Иначе
		
		ПараметрДействия.Вставить("ТекстОписаниеОшибки", ТекстОписаниеОшибки);
		ПараметрДействия.Вставить("СтрокаСлипЧека"     , СтрокаСлипЧека);
		
		ТекстИнформации = НСтр("ru = 'Требуется выполнить операцию отмены оплаты на эквайринговом терминале.'") + Символы.ПС;
		ТекстИнформации = ТекстИнформации + НСтр("ru = 'Сумма операции:'")        + " "+ СуммаОперации         + Символы.ПС;
		ТекстИнформации = ТекстИнформации + НСтр("ru = 'Номер карты:'")           + " "+ НомерКарты            + Символы.ПС;
		ТекстИнформации = ТекстИнформации + НСтр("ru = 'Ссылочный номер:'")       + " "+ НомерСсылкиОперации   + Символы.ПС;
		ТекстИнформации = ТекстИнформации + НСтр("ru = 'Номер чека:'")            + " "+ НомерЧекаЭТ           + Символы.ПС;
		ЗаголовокИнформации = НСтр("ru = 'Операция отмены оплаты на терминале прошла успешно?'");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрДействия", ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ПараметрДействия));
		
		ПараметрДействия.ОткрытаБлокирующаяФорма = Истина;
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВопросаПодтвержденияОбОтменеОплаты", ЭтотОбъект, ДополнительныеПараметры);
		ОтветПользователя = ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации,,ОбработчикОповещения);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПлатежнойКартыЗавершение(РезультатВыполнения, ПараметрДействия) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		Если Не ПустаяСтрока(ПараметрДействия.ТекстОписаниеОшибки) Тогда
			ЗаголовокИнформации = НСтр("ru = 'Ошибка выполнения операции.'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ПараметрДействия.ТекстОписаниеОшибки);
		КонецЕсли;
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраница;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обрабатывается выбор платежной карты.
//
// Параметры:
//  ПлатежнаяКарта - Справочник "Виды оплат чека ККМ".
//
Процедура ОбработкаВыбораПлатежнойКарты(ВыбраннаяСтрока)

	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраница;
	
	ПараметрДействия = Новый Структура;
	ПараметрДействия.Вставить("ОткрытаБлокирующаяФорма"     , Ложь);
	ПараметрДействия.Вставить("ИдентификаторВыбраннойСтроки", ВыбраннаяСтрока.ПолучитьИдентификатор());
	ПараметрДействия.Вставить("ЗавершитьОбработкуВыбораПлатежнойКарты");
	
	Если ВыбраннаяСтрока.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяСистема") Тогда
		Если ВыбраннаяСтрока.ПлатежнаяСистема =
			ПредопределенноеЗначение("Перечисление.ТипыПлатежнойСистемыККТ.СертификатНСПК") Тогда
			ОплатитьЭСНСПКНаКлиенте(ВыбраннаяСтрока);
		КонецЕсли;
	Иначе
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			
			ОплатаПлатежнойКартойЧерезЭквайринговыйТерминал(ВыбраннаяСтрока);
			
			
		//ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") И ЭтоВозвратДеньВДень() 
		//	И ЭтоПолныйВозврат() Тогда
		//	
		//	Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораПлатежнойКартыЗавершение", ЭтотОбъект, ПараметрДействия);
		//	СторноОплатыПлатежнойКартойЧерезЭквайринговыйТерминал(Оповещение, ВыбраннаяСтрока, ПараметрДействия);
			
		Иначе // Возврат не день в день
			
			Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораПлатежнойКартыЗавершение", ЭтотОбъект, ПараметрДействия);
			ВозвратОплатыПлатежнойКартойЧерезЭквайринговыйТерминал(ВыбраннаяСтрока);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработкуВыбораПлатежнойКарты(ПараметрДействия)
	
	ВыбраннаяСтрока = ВидыОплат.НайтиПоИдентификатору(ПараметрДействия.ИдентификаторВыбраннойСтроки);
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОплаты = ТекущиеВидыОплат.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаОплаты, ВыбраннаяСтрока);
	
	СтрокаОплаты.ЗапретРедактирования = Истина;
	СтрокаОплаты.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта");
	
	СтрокаОплаты.Организация             = Организация;
	СтрокаОплаты.ПредставлениеВидаОплаты = СтрокаОплаты.ВидОплаты;
	СтрокаОплаты.ПредставлениеСуммы      = СтрокаОплаты.Сумма;
	СтрокаОплаты.ДанныеПереданыВБанк     = Истина;
	
	ЭтотОбъект.ТекущийЭлемент = Элементы.ВидыОплат;
	
	Элементы.ТекущиеВидыОплат.ТекущаяСтрока = СтрокаОплаты.ПолучитьИдентификатор();
	
	ПервыйВвод = Истина;
	
КонецПроцедуры


// Обработка выбора вида оплаты;
//
// Параметры:
//  ВыбраннаяСтрока - Выбранная строка;
//
&НаКлиенте
Процедура ОбработкаВыбораВидыОплаты(ВыбраннаяСтрока)

	Если ВыбраннаяСтрока.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.ПустаяСсылка") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраница;
	Иначе
		СуммаКОплате = Макс(ИтогПоОрганизации - ТекущиеВидыОплат.Итог("Сумма"), 0);
		
		Если СуммаКОплате = 0 И НЕ ЭтоАвансБезРасшифровкиПоТоварам Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраница;
			Возврат 
		КонецЕсли;
		
		ПервыйВвод = Истина;
		Если ВыбраннаяСтрока.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.БанковскийКредит")
			ИЛИ ВыбраннаяСтрока.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ВРассрочку") Тогда
			
			СтрокаОплаты = ТекущиеВидыОплат.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаОплаты, ВыбраннаяСтрока);
			
			Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
				СтрокаОплаты.Сумма = ИтогПоОрганизации - ТекущиеВидыОплат.Итог("Сумма");
			Иначе
				СтрокаОплаты.ЗапретРедактирования = Истина;
			КонецЕсли;
			
			СтрокаОплаты.Организация             = Организация;
			СтрокаОплаты.ПредставлениеСуммы      = СтрокаОплаты.Сумма;
			СтрокаОплаты.ПредставлениеВидаОплаты = СтрокаОплаты.ВидОплаты;
			
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраница;
			ЭтотОбъект.ТекущийЭлемент = Элементы.ТекущиеВидыОплат;
			Элементы.ТекущиеВидыОплат.ТекущаяСтрока = СтрокаОплаты.ПолучитьИдентификатор();
			
			ПересчитатьЗначенияСуммДляПодарочныхСертификатов();
			УстановитьВидимостьКонтрагента();
		Иначе // Платежная карта
			
			ОбработкаВыбораПлатежнойКарты(ВыбраннаяСтрока);
		КонецЕсли;
	КонецЕсли;
	ОбновитьФорму();
КонецПроцедуры // ОбработкаВыбораВидыОплаты()

// При изменении любого вида оплата необходимо пересчитать сумму подарочных сертификатов.
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура ПересчитатьЗначенияСуммДляПодарочныхСертификатов()

	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ВидОплаты", ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Наличные"));
	
	СтрокиТекущейТаблицаОплат = ТекущиеВидыОплат.НайтиСтроки(СтруктураПоиска);
	СуммаОплатыНаличными = 0;
	Для каждого СтрокаТекущейТаблицаОплат Из СтрокиТекущейТаблицаОплат Цикл
		СуммаОплатыНаличными = СуммаОплатыНаличными + СтрокаТекущейТаблицаОплат.Сумма;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ВидОплаты", ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом"));
	
	СтрокиТекущейТаблицаОплат = ТекущиеВидыОплат.НайтиСтроки(СтруктураПоиска);
	СуммаОплатыПодарочнымиСертификатами = 0;
	Для каждого СтрокаТекущейТаблицаОплат Из СтрокиТекущейТаблицаОплат Цикл
		СуммаОплатыПодарочнымиСертификатами = СуммаОплатыПодарочнымиСертификатами + СтрокаТекущейТаблицаОплат.Сумма;
	КонецЦикла;
	
	СуммаПрочихОплат = ТекущиеВидыОплат.Итог("Сумма") - СуммаОплатыПодарочнымиСертификатами - СуммаОплатыНаличными;
	
	ОстатокСуммы = Макс(0, ИтогПоОрганизации - СуммаПрочихОплат);
	
	Для каждого СтрокаТекущейТаблицаОплат Из СтрокиТекущейТаблицаОплат Цикл
		
		СуммаПоНоминалу = СтрокаТекущейТаблицаОплат.КоличествоСертификатов * СтрокаТекущейТаблицаОплат.Номинал;
		
		ВозможноПогасить = Мин(СуммаПоНоминалу, ОстатокСуммы);
		
		СтрокаТекущейТаблицаОплат.Сумма = ВозможноПогасить;
		СтрокаТекущейТаблицаОплат.ПредставлениеСуммы = Формат(СтрокаТекущейТаблицаОплат.Сумма, "ЧДЦ=2");
		
		ОстатокСуммы = ОстатокСуммы - ВозможноПогасить;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЗначенияСуммДляПодарочныхСертификатовСервер()

	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ВидОплаты", Справочники.ВидыОплатЧекаККМ.Наличные);
	
	СтрокиТекущейТаблицаОплат = ТекущиеВидыОплат.НайтиСтроки(СтруктураПоиска);
	СуммаОплатыНаличными = 0;
	Для каждого СтрокаТекущейТаблицаОплат Из СтрокиТекущейТаблицаОплат Цикл
		СуммаОплатыНаличными = СуммаОплатыНаличными + СтрокаТекущейТаблицаОплат.Сумма;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ВидОплаты", Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом);
	
	СтрокиТекущейТаблицаОплат = ТекущиеВидыОплат.НайтиСтроки(СтруктураПоиска);
	СуммаОплатыПодарочнымиСертификатами = 0;
	Для каждого СтрокаТекущейТаблицаОплат Из СтрокиТекущейТаблицаОплат Цикл
		СуммаОплатыПодарочнымиСертификатами = СуммаОплатыПодарочнымиСертификатами + СтрокаТекущейТаблицаОплат.Сумма;
	КонецЦикла;
	
	СуммаПрочихОплат = ТекущиеВидыОплат.Итог("Сумма") - СуммаОплатыПодарочнымиСертификатами - СуммаОплатыНаличными;
	
	ОстатокСуммы = Макс(0, ИтогПоОрганизации - СуммаПрочихОплат);
	
	Для каждого СтрокаТекущейТаблицаОплат Из СтрокиТекущейТаблицаОплат Цикл
		
		СуммаПоНоминалу = СтрокаТекущейТаблицаОплат.КоличествоСертификатов * СтрокаТекущейТаблицаОплат.Номинал;
		
		ВозможноПогасить = Мин(СуммаПоНоминалу, ОстатокСуммы);
		
		СтрокаТекущейТаблицаОплат.Сумма = ВозможноПогасить;
		СтрокаТекущейТаблицаОплат.ПредставлениеСуммы = Формат(СтрокаТекущейТаблицаОплат.Сумма, "ЧДЦ=2");
		
		ОстатокСуммы = ОстатокСуммы - ВозможноПогасить;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ПодарочныйСертификат", СтрокаТекущейТаблицаОплат.ПодарочныйСертификат);
		СтруктураПоиска.Вставить("СерийныйНомер", СтрокаТекущейТаблицаОплат.СерийныйНомер);
		СтруктураПоиска.Вставить("Организация", СтрокаТекущейТаблицаОплат.Организация);
		
		СтрокиПогашенияПодарочныхСертификатов = ПогашениеПодарочныхСертификатов.НайтиСтроки(СтруктураПоиска);
		Если СтрокиПогашенияПодарочныхСертификатов.Количество() > 0 Тогда
			СтрокаПогашенияПодарочныхСертификатов = СтрокиПогашенияПодарочныхСертификатов[0];
			СтрокаПогашенияПодарочныхСертификатов.СуммаПогашенияСертификата = ВозможноПогасить;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбработкаТабличнойЧастиПогашенияПодарочныхСертификатов(ТаблицаПогашенныхВРаспределенномЧекеСертификатов = Неопределено)

	ТаблицаПогашенияПодарочныхСертификатов = ПогашениеПодарочныхСертификатов.Выгрузить();
	ТаблицаПогашенияПодарочныхСертификатов.Колонки.Добавить("КоличествоСертификатов");
	ТаблицаПогашенияПодарочныхСертификатов.ЗаполнитьЗначения(1,"КоличествоСертификатов");
	ТаблицаПогашенияПодарочныхСертификатов.Свернуть("ПодарочныйСертификат, СерийныйНомер, Организация","КоличествоСертификатов, СуммаПогашенияСертификата");
	
	РаботаСПодарочнымиСертификатами.ПолучитьСтруктуруДанныхПоТаблицеСертификатов(ТаблицаПогашенияПодарочныхСертификатов, Истина);
	
	СтрокаОплаты = Неопределено;
	Для каждого СтрокаТаблицыПогашения Из ТаблицаПогашенияПодарочныхСертификатов Цикл
		Если НЕ СтрокаТаблицыПогашения.Организация = Организация Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ПодарочныйСертификат", СтрокаТаблицыПогашения.ПодарочныйСертификат);
		СтруктураПоиска.Вставить("СерийныйНомер", СтрокаТаблицыПогашения.СерийныйНомер);
		СтруктураПоиска.Вставить("Организация", Организация);
		
		СтрокиТекущейТаблицаОплат = ТекущиеВидыОплат.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТекущейТаблицаОплат.Количество() = 0 Тогда
			
			СуммаПогашеннаяВРаспределенномЧеке = 0;
			Если ЗначениеЗаполнено(ТаблицаПогашенныхВРаспределенномЧекеСертификатов) Тогда
				ПогашенныеВРаспределенномЧекеСертификаты = ТаблицаПогашенныхВРаспределенномЧекеСертификатов.НайтиСтроки(СтруктураПоиска);
				Для Каждого СтрокаПогашения Из ПогашенныеВРаспределенномЧекеСертификаты Цикл
					СуммаПогашеннаяВРаспределенномЧеке = СуммаПогашеннаяВРаспределенномЧеке + СтрокаПогашения.СуммаПогашенияСертификата;
					Если Не СтрокаПогашения.ПодарочныйСертификат.ЧастичноеПогашение Тогда
						СуммаПогашеннаяВРаспределенномЧеке = РаботаСПодарочнымиСертификатами.ПолучитьСтруктуруДанныхСертификата(СтрокаПогашения.ПодарочныйСертификат, СтрокаПогашения.СерийныйНомер).Номинал;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			СтрокаОплаты = ТекущиеВидыОплат.Добавить();
			СтрокаОплаты.ВидОплаты              = Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом;
			СтрокаОплаты.ТипОплаты              = Перечисления.ТипыОплатЧекаККМ.ПодарочныйСертификат;
			СтрокаОплаты.ПодарочныйСертификат   = СтрокаТаблицыПогашения.ПодарочныйСертификат;
			СтрокаОплаты.СерийныйНомер          = СтрокаТаблицыПогашения.СерийныйНомер;
			СтрокаОплаты.КоличествоСертификатов = СтрокаТаблицыПогашения.КоличествоСертификатов;
			СтрокаОплаты.Организация            = Организация;
			СтрокаОплаты.Номинал                = Макс(СтрокаТаблицыПогашения.Остаток - СуммаПогашеннаяВРаспределенномЧеке, 0);
			СтрокаОплаты.ЗапретРедактирования   = Истина;
			
			Если ЗначениеЗаполнено(СтрокаОплаты.СерийныйНомер) Тогда
				СтрокаОплаты.ПредставлениеВидаОплаты = "" + СтрокаТаблицыПогашения.ПодарочныйСертификат + " (" + Строка(СтрокаТаблицыПогашения.СерийныйНомер) + ")";
			Иначе
				СтрокаОплаты.ПредставлениеВидаОплаты = "" + СтрокаТаблицыПогашения.ПодарочныйСертификат + " (" + Строка(СтрокаТаблицыПогашения.КоличествоСертификатов) + "шт.)";
			КонецЕсли;
			
			СтрокаОплаты.ПредставлениеСуммы      = "";
		Иначе
			СтрокаОплаты = СтрокиТекущейТаблицаОплат[0];
			
			СтрокаОплаты.КоличествоСертификатов = СтрокаТаблицыПогашения.КоличествоСертификатов;
			
			Если ЗначениеЗаполнено(СтрокаОплаты.СерийныйНомер) Тогда
				СтрокаОплаты.ПредставлениеВидаОплаты = "" + СтрокаТаблицыПогашения.ПодарочныйСертификат + " (" + Строка(СтрокаТаблицыПогашения.СерийныйНомер) + ")";
			Иначе
				СтрокаОплаты.ПредставлениеВидаОплаты = "" + СтрокаТаблицыПогашения.ПодарочныйСертификат + " (" + Строка(СтрокаТаблицыПогашения.КоличествоСертификатов) + "шт.)";
			КонецЕсли;
			
			СтрокаОплаты.ПредставлениеСуммы      = "";
			
			Если СтрокиТекущейТаблицаОплат.Количество() > 1 Тогда
				
				КолвоЭлементовКоллекции = СтрокиТекущейТаблицаОплат.Количество() - 1;
				Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
					ЭлементКоллекции = СтрокиТекущейТаблицаОплат[КолвоЭлементовКоллекции - ОбратныйИндекс + 1];

					ТекущиеВидыОплат.Удалить(ЭлементКоллекции);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПересчитатьЗначенияСуммДляПодарочныхСертификатовСервер();
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраница;
	ЭтотОбъект.ТекущийЭлемент = Элементы.ТекущиеВидыОплат;
	
	Если НЕ СтрокаОплаты = Неопределено Тогда
		Элементы.ТекущиеВидыОплат.ТекущаяСтрока = СтрокаОплаты.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНайденныеСерийныеНомераИзХранилища(АдресТаблицы)
	
	ТаблицаОплаты = ПолучитьИзВременногоХранилища(АдресТаблицы);
	
	ТаблицаПогашенныхВРаспределенномЧекеСертификатов = ПогашениеПодарочныхСертификатов.Выгрузить().СкопироватьКолонки();
	
	КолвоЭлементовКоллекции = ПогашениеПодарочныхСертификатов.Количество();
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
		ЭлементКоллекции = ПогашениеПодарочныхСертификатов[КолвоЭлементовКоллекции - ОбратныйИндекс];
		
		Если ЭлементКоллекции.Организация = Организация Тогда
			НоваяСтрока = ТаблицаПогашенныхВРаспределенномЧекеСертификатов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
			ПогашениеПодарочныхСертификатов.Удалить(ЭлементКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаТЧ Из ТаблицаОплаты Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.ПодарочныйСертификат) Тогда
			СтрокаПогашения = ПогашениеПодарочныхСертификатов.Добавить();
			СтрокаПогашения.ПодарочныйСертификат = СтрокаТЧ.ПодарочныйСертификат;
			СтрокаПогашения.СерийныйНомер        = СтрокаТЧ.СерийныйНомер;
			СтрокаПогашения.Организация          = Организация;
		КонецЕсли;
	КонецЦикла;
	
	ОбработкаТабличнойЧастиПогашенияПодарочныхСертификатов(ТаблицаПогашенныхВРаспределенномЧекеСертификатов);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьТекущийЭлементEnter()
	
	Если НЕ ОплатаПлатежнойСистемой Тогда
		ТекущийЭлемент = Элементы.КомандаEnter;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьТекущийЭлементКнопкаЗакрыть()
	ТекущийЭлемент = Элементы.КнопкаЗакрыть;
КонецПроцедуры

&НаКлиенте
Процедура УдалениеСтроки(ТекущаяСтрокаОплаты)
	
	Если ТекущаяСтрокаОплаты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипОплаты = ТекущаяСтрокаОплаты.ТипОплаты;

	ПараметрДействия = Новый Структура;
	ПараметрДействия.Вставить("ОткрытаБлокирующаяФорма"     , Ложь);
	ПараметрДействия.Вставить("ИдентификаторВыбраннойСтроки", ТекущаяСтрокаОплаты.ПолучитьИдентификатор());
	ПараметрДействия.Вставить("ЗавершитьУдалениеСтроки");
	
	Если ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта") Тогда
		
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПараметрДействия", ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ПараметрДействия));
			
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВопросаОбОтменеОперацииУдалениеСтроки", ЭтотОбъект, ДополнительныеПараметры);
			ПараметрДействия.ОткрытаБлокирующаяФорма = Истина;
			ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(НСтр("ru = 'Данные об оплате отправлены в банк.'"), 
																	НСтр("ru = 'Хотите отменить операцию?'")
																	,
																	,ОбработчикОповещения);
			
		Иначе
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
			
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВопросаОПотереДанныхУдалениеСтроки", ЭтотОбъект, ДополнительныеПараметры);
			ПараметрДействия.ОткрытаБлокирующаяФорма = Истина;
			ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(НСтр("ru = 'Данные об отмене отправлены в банк.'"), 
																	НСтр("ru = 'Хотите удалить строку с потерей данных?'")
																	,
																	,ОбработчикОповещения);
			
		КонецЕсли;
			
	ИначеЕсли ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяСистема") Тогда
			
			ЗаголовокИнформации = НСтр("ru = 'Данные об оплате отправлены в банк.'");
			ТекстВопроса =  НСтр("ru = 'Удаление суммы оплаты не поддерживается.'"); 
			
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстВопроса);
			Возврат;
			
	Иначе
		
		Если (ТекущаяСтрокаОплаты.ЗапретРедактирования)
			И ТипОплаты <> ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПодарочныйСертификат") Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПараметрДействия.ОткрытаБлокирующаяФорма Тогда
		ЗавершитьУдалениеСтроки(ПараметрДействия)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьУдалениеСтроки(ПараметрДействия)
	
	ТекущаяСтрокаОплаты = ТекущиеВидыОплат.НайтиПоИдентификатору(ПараметрДействия.ИдентификаторВыбраннойСтроки);
	
	Если ТекущаяСтрокаОплаты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ПодарочныйСертификат", ТекущаяСтрокаОплаты.ПодарочныйСертификат);
	СтруктураПоиска.Вставить("СерийныйНомер"       , ТекущаяСтрокаОплаты.СерийныйНомер);
	СтруктураПоиска.Вставить("Организация"         , Организация);
	
	СтрокиПогашениеПодарочныхСертификатов = ПогашениеПодарочныхСертификатов.НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаПогашениеПодарочныхСертификатов Из СтрокиПогашениеПодарочныхСертификатов Цикл
		
		ПогашениеПодарочныхСертификатов.Удалить(СтрокаПогашениеПодарочныхСертификатов);
		
	КонецЦикла;
	
	ТекущиеВидыОплат.Удалить(ТекущаяСтрокаОплаты);
	
	УстановитьВидимостьКонтрагента(Истина);
	
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОплатуПлатежнойКартойЧерезЭквайринговыйТерминалЗавершение(РезультатВыполнения, ПараметрДействия) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
			
		ПараметрДействия.ДанныеКарты         = РезультатВыполнения.НомерКарты;
		ПараметрДействия.НомерСсылкиОперации = РезультатВыполнения.СсылочныйНомер;
		ПараметрДействия.НомерЧекаЭТ         = РезультатВыполнения.НомерЧекаЭТ;
		ЗавершитьОплатуПлатежнойКартойЧерезЭквайринговыйТерминалОкончание(ПараметрДействия);
		
	Иначе
		ЗаголовокИнформации = НСтр("ru = 'При выполнении операции возникла ошибка:'"); 
		ТекстСообщения = НСтр("ru = '""%ОписаниеОшибки%"".
								  |Оплата по карте не была произведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
		ПриЗавершенииОплатуПлатежнойКартойЧерезЭквайринговыйТерминал(ПараметрДействия);
	КонецЕсли;
	
	ВыводИнформацииНаДисплейПокупателя(РезультатВыполнения.Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОплатуПлатежнойКартойЧерезЭквайринговыйТерминалНачало(ПараметрДействия)
	
	ДанныеКарты                    = ПараметрДействия.ДанныеКарты;
	ИдентификаторУстройстваЭТ      = ПараметрДействия.ИдентификаторУстройстваЭТ;
	СуммаОперации                  = ПараметрДействия.СуммаОперации;
	
	ВыбраннаяСтрока = ВидыОплат.НайтиПоИдентификатору(ПараметрДействия.ИдентификаторВыбраннойСтроки);
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрДействия.Вставить("СтрокаСлипЧека", "");
	ПараметрДействия.Вставить("НомерСсылкиОперации", "");
	ПараметрДействия.Вставить("НомерЧекаЭТ", "");
	
	Если НЕ ПараметрДействия.ИспользоватьБезПодключенияОборудования Тогда
		
		ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
		ПараметрыОперации.ТипТранзакции  = "AuthorizeSales";
		ПараметрыОперации.СуммаОперации  = СуммаОперации;
		ПараметрыОперации.НомерЧека      = " ";
		
		ЭтаФорма.Доступность = Ложь;
		Оповещение = Новый ОписаниеОповещения("ЗавершитьОплатуПлатежнойКартойЧерезЭквайринговыйТерминалЗавершение", ЭтотОбъект, ПараметрДействия);
		МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение, УникальныйИдентификатор, 
			ПараметрДействия.ИдентификаторУстройстваЭТ, ПараметрДействия.ИдентификаторУстройстваФР, ПараметрыОперации);
		
	Иначе
		
		ТекстИнформации = НСтр("ru = 'Требуется выполнить операцию оплаты на эквайринговом терминале.'") + Символы.ПС;
		ТекстИнформации = ТекстИнформации + НСтр("ru = 'Сумма операции:'")        + " "+ СуммаОперации  + Символы.ПС;
		ТекстИнформации = ТекстИнформации;
		ЗаголовокИнформации = НСтр("ru = 'Операция оплаты на терминале прошла успешно?'");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВопросаУспехОперацииНаЭквайринговомТерминале", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрДействия.ОткрытаБлокирующаяФорма = Истина;
		ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации,,ОбработчикОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОплатуПлатежнойКартойЧерезЭквайринговыйТерминалОкончание(ПараметрДействия)
	
	ВыбраннаяСтрока = ВидыОплат.НайтиПоИдентификатору(ПараметрДействия.ИдентификаторВыбраннойСтроки);
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКарты                    = ПараметрДействия.ДанныеКарты;
	ИдентификаторУстройстваЭТ      = ПараметрДействия.ИдентификаторУстройстваЭТ;
	СуммаОперации                  = ПараметрДействия.СуммаОперации;
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрДействия.ИспользоватьКассуККМБезПодключенияОборудования;
	ИдентификаторУстройстваФР      = ПараметрДействия.ИдентификаторУстройстваФР;
	НомерСсылкиОперации            = ПараметрДействия.НомерСсылкиОперации;
	НомерЧекаЭТ                    = ПараметрДействия.НомерЧекаЭТ;
	
	// Сохранить в таблице данные оплаты картой.
	
	СтрокаОплаты = ТекущиеВидыОплат.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаОплаты, ВыбраннаяСтрока);
	СтрокаОплаты.Сумма     = СуммаОперации;
	СтрокаОплаты.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта");
	СтрокаОплаты.СуммаКомиссии = СтрокаОплаты.Сумма * СтрокаОплаты.ПроцентКомиссии / 100;
	
	СтрокаОплаты.Организация             = Организация;
	СтрокаОплаты.ПредставлениеВидаОплаты = СтрокаОплаты.ВидОплаты;
	СтрокаОплаты.ПредставлениеСуммы      = СтрокаОплаты.Сумма;
	
	СтрокаОплаты.СсылочныйНомер      = НомерСсылкиОперации;
	СтрокаОплаты.НомерЧекаЭТ         = НомерЧекаЭТ;
	СтрокаОплаты.НомерПлатежнойКарты = НомерКарты;
	
	СтрокаОплаты.ЗапретРедактирования = Истина;
	СтрокаОплаты.ДанныеПереданыВБанк  = Истина;
	
	ЭтотОбъект.ТекущийЭлемент = Элементы.ТекущиеВидыОплат;
	Элементы.ТекущиеВидыОплат.ТекущаяСтрока = СтрокаОплаты.ПолучитьИдентификатор();
	
	ПриЗавершенииОплатуПлатежнойКартойЧерезЭквайринговыйТерминал(ПараметрДействия)
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииОплатуПлатежнойКартойЧерезЭквайринговыйТерминал(ПараметрДействия)
	
	ПервыйВвод = Истина;
	ПересчитатьЗначенияСуммДляПодарочныхСертификатов();
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПоОрганизации()

	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Организация", Организация);
	
	СтрокиОплаты = Оплата.НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаОплаты Из СтрокиОплаты Цикл
		
		Оплата.Удалить(СтрокаОплаты);
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоОрганизацииСервер()

	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Организация", Организация);
	
	СтрокиОплаты = Оплата.НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаОплаты Из СтрокиОплаты Цикл
		
		Оплата.Удалить(СтрокаОплаты);
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюИДоступностью()
	
	Элементы.ГруппаSMSиEmail.Видимость = ВозможностьЭлектронногоПлатежа;
	Элементы.ГруппаSMSиEmailПраваяКлавиатура.Видимость = ВозможностьЭлектронногоПлатежа;
	Элементы.ГруппаSMSиEmailПС.Видимость = ВозможностьЭлектронногоПлатежа;
	
	Элементы.КомандаSMS.Доступность = ВозможностьЭлектронногоПлатежа;
	Элементы.КомандаSMSПанель.Доступность = ВозможностьЭлектронногоПлатежа;
	Элементы.КомандаSMSПраваяКлавиатура.Доступность = ВозможностьЭлектронногоПлатежа;
	Элементы.КомандаSMSПС.Доступность = ВозможностьЭлектронногоПлатежа;
	
	Элементы.КомандаEmail.Доступность = ВозможностьЭлектронногоПлатежа;
	Элементы.КомандаEmailПанель.Доступность = ВозможностьЭлектронногоПлатежа;
	Элементы.КомандаEmailПраваяКлавиатура.Доступность = ВозможностьЭлектронногоПлатежа;
	Элементы.КомандаEmailПС.Доступность = ВозможностьЭлектронногоПлатежа;
	
	Элементы.КомандаСертификат.Доступность =
		(ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа) И НЕ ОперацияСДенежнымиСредствами;
	Элементы.КомандаСертификатПанель.Доступность = Элементы.КомандаСертификат.Доступность;
	
	МассивКассККМ = Новый Массив;
	МассивКассККМ.Добавить(КассаККМ);
	Элементы.КомандаКарта.Доступность = ПродажиСервер.ЕстьВозможностьОплатыПлатежнойКартой(МассивКассККМ);
	Элементы.КомандаКартаПанель.Доступность = Элементы.КомандаКарта.Доступность;
	
	ЕстьВозможностьОплатыБанковскимКредитом =
		ПродажиСервер.ЕстьВозможностьОплатыБанковскимКредитом()
			ИЛИ ПродажиСервер.ЕстьВозможностьОплатыВРассрочку();
	
	ВозвращаютсяТоварыВРассрочку = ПродажиСервер.ВозвращаютсяТоварыВРассрочку(ВидОперации, ЧекККМПродажа);
	
	Если (ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа) Тогда
		Элементы.КомандаКредит.Доступность =
			ЕстьВозможностьОплатыБанковскимКредитом И НЕ ЭтоАвансБезРасшифровкиПоТоварам;
	Иначе
		Элементы.КомандаКредит.Доступность =
			ЕстьВозможностьОплатыБанковскимКредитом И ВозвращаютсяТоварыВРассрочку;
	КонецЕсли;
	
	Если Элементы.КомандаКредит.Доступность И ОперацияСДенежнымиСредствами Тогда
		Элементы.КомандаКредит.Доступность = ТекущиеВидыОплат.Количество() > 0;
	КонецЕсли;
	Элементы.КомандаКредитПанель.Доступность = Элементы.КомандаКредит.Доступность;
	
	Если ОплатаПлатежнойСистемой Тогда
		Элементы.ГруппаПанельДействий.ТекущаяСтраница = Элементы.ГруппаПлатежныеСистемы;
		Элементы.ГруппаСпособовОплаты.Видимость = Ложь;
		Элементы.ГруппаПанельВидыОплаты.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаНеНаличные.Видимость = НЕ ОплатаЭСНСПК;
	Элементы.ГруппаПанельНеНаличные.Видимость = НЕ ОплатаЭСНСПК;
	
	Элементы.КомандаКарта.Видимость = НЕ ОплатаЭСНСПК
		ИЛИ ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
		
	Элементы.КомандаКартаПанель.Видимость = НЕ ОплатаЭСНСПК
		ИЛИ ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
КонецПроцедуры

&НаКлиенте
Функция ЕстьНаличнаяИлиЭлектроннаяОплата()
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.Наличные"));
	МассивСтрок = ТекущиеВидыОплат.НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаВидаОплат Из МассивСтрок Цикл
		Если СтрокаВидаОплат.Сумма > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта"));
	МассивСтрок = ТекущиеВидыОплат.НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаВидаОплат Из МассивСтрок Цикл
		Если СтрокаВидаОплат.Сумма > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяСистема"));
	МассивСтрок = ТекущиеВидыОплат.НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаВидаОплат Из МассивСтрок Цикл
		Если СтрокаВидаОплат.Сумма > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура КомандаИзменениеПечатиЧекаКлиент(ВключитьКартинкуПечати)
	
	Если ВключитьКартинкуПечати Тогда
		Элементы.КомандаИзменениеПечатиЧекаПраваяКлавиатура.Картинка = БиблиотекаКартинок.ПечатьЧека;
		Элементы.КомандаИзменениеПечатиЧека.Картинка                 = БиблиотекаКартинок.ПечатьЧека;
	Иначе
		Элементы.КомандаИзменениеПечатиЧекаПраваяКлавиатура.Картинка = БиблиотекаКартинок.ОтказОтПечатиЧека;
		Элементы.КомандаИзменениеПечатиЧека.Картинка                 = БиблиотекаКартинок.ОтказОтПечатиЧека;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КомандаИзменениеПечатиЧекаСервер(ВключитьКартинкуПечати)
	
	Если ВключитьКартинкуПечати Тогда
		Элементы.КомандаИзменениеПечатиЧекаПраваяКлавиатура.Картинка = БиблиотекаКартинок.ПечатьЧека;
		Элементы.КомандаИзменениеПечатиЧека.Картинка                 = БиблиотекаКартинок.ПечатьЧека;
	Иначе
		Элементы.КомандаИзменениеПечатиЧекаПраваяКлавиатура.Картинка = БиблиотекаКартинок.ОтказОтПечатиЧека;
		Элементы.КомандаИзменениеПечатиЧека.Картинка                 = БиблиотекаКартинок.ОтказОтПечатиЧека;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВариантыПлатежаУстановитьВидимостьИДоступностьСервер()
	
	ВозможностьОтправкиSMS = ВозможностьЭлектронногоПлатежа;
	ВозможностьОтправкиEmail = ВозможностьЭлектронногоПлатежа;
	ВозможностьОтказаОтПечатиЧека = Ложь;
	Если (ВозможностьОтправкиSMS И ЗначениеЗаполнено(Телефон) И НЕ ПередачаSMSЧерезПрограмму)
		ИЛИ (ВозможностьОтправкиEmail И ЗначениеЗаполнено(Email) И НЕ ПередачаEmailЧерезПрограмму) Тогда
		
		ВозможностьОтказаОтПечатиЧека = Истина;
		
	КонецЕсли;
	
	Элементы.КомандаEmail.Видимость                 = ВозможностьОтправкиEmail;
	Элементы.КомандаEmailПраваяКлавиатура.Видимость = ВозможностьОтправкиEmail;
	Элементы.КомандаEmailПС.Видимость				= ВозможностьОтправкиEmail;
	Элементы.КомандаSMS.Видимость                   = ВозможностьОтправкиSMS;
	Элементы.КомандаSMSПраваяКлавиатура.Видимость   = ВозможностьОтправкиSMS;
	Элементы.КомандаSMSПС.Видимость   				= ВозможностьОтправкиSMS;
	
	Элементы.ГруппаДанныеSMSИEmail.Видимость        = ВозможностьЭлектронногоПлатежа И НЕ ОплатаПлатежнойСистемой;
	Элементы.ГруппаДанныеSMSИEmailПС.Видимость      = ВозможностьЭлектронногоПлатежа И ОплатаПлатежнойСистемой;
	
	Элементы.КомандаИзменениеПечатиЧека.Доступность = ВозможностьОтказаОтПечатиЧека;
	Элементы.КомандаИзменениеПечатиЧекаПраваяКлавиатура.Доступность = ВозможностьОтказаОтПечатиЧека;
	
	Если ВозможностьОтказаОтПечатиЧека Тогда
		ПечатьЧека = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВариантыПлатежаУстановитьВидимостьИДоступностьКлиент()
	
	ВозможностьОтправкиSMS = ВозможностьЭлектронногоПлатежа;
	ВозможностьОтправкиEmail = ВозможностьЭлектронногоПлатежа;
	ВозможностьОтказаОтПечатиЧека = Ложь;
	Если (ВозможностьОтправкиSMS И ЗначениеЗаполнено(Телефон) И НЕ ПередачаSMSЧерезПрограмму)
		ИЛИ (ВозможностьОтправкиEmail И ЗначениеЗаполнено(Email) И НЕ ПередачаEmailЧерезПрограмму) Тогда
		
		ВозможностьОтказаОтПечатиЧека = Истина;
		
	КонецЕсли;
	
	Элементы.КомандаEmail.Видимость                 = ВозможностьОтправкиEmail;
	Элементы.КомандаEmailПраваяКлавиатура.Видимость = ВозможностьОтправкиEmail;
	Элементы.КомандаEmailПС.Видимость				= ВозможностьОтправкиEmail;
	Элементы.КомандаSMS.Видимость                   = ВозможностьОтправкиSMS;
	Элементы.КомандаSMSПраваяКлавиатура.Видимость   = ВозможностьОтправкиSMS;
	Элементы.КомандаSMSПС.Видимость   				= ВозможностьОтправкиSMS;
	
	Элементы.КомандаИзменениеПечатиЧека.Доступность = ВозможностьОтказаОтПечатиЧека;
	Элементы.КомандаИзменениеПечатиЧекаПраваяКлавиатура.Доступность = ВозможностьОтказаОтПечатиЧека;
	Элементы.ДанныеSMSИлиEmail.Видимость            = ВозможностьЭлектронногоПлатежа;
	
	Если ВозможностьОтказаОтПечатиЧека Тогда
		ПечатьЧека = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводИнформацииНаДисплейПокупателя(РезультатВыполнения)

	Если Не ИспользоватьПодключаемоеОборудование Тогда
		Возврат;
	КонецЕсли;
	
	Строка1 = НСтр("ru = 'КАССА НЕ РАБОТАЕТ'");
	Строка2 = НСтр("ru = 'СЕРВИСНЫЙ РЕЖИМ'");
	
	Описание = Новый ОписаниеОповещения("ВывестиИнформациюНаДисплейПокупателяЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьВыводИнформацииНаДисплейПокупателя(Описание,,, Строка1 + Символы.ПС + Строка2);

КонецПроцедуры 

&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателяЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ЗаголовокИнформации = НСтр("ru = 'При использовании дисплея покупателя произошла ошибка.'"); 
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, РезультатВыполнения.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьТекущиеВидыОплат(АдресТаблицыОплат)
	
	ТаблицаОплат = ПолучитьИзВременногоХранилища(АдресТаблицыОплат);
	
	Для Каждого СтрокаТаблицы Из ТаблицаОплат Цикл
		
		Если КлючСвязиТПЧеков = -1 ИЛИ КлючСвязиТПЧеков = СтрокаТаблицы.КлючСвязиТПЧеков Тогда
			НоваяСтрока = ТекущиеВидыОплат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.ПредставлениеВидаОплаты = Строка(НоваяСтрока.ВидОплаты);
			НоваяСтрока.ПредставлениеСуммы = Строка(НоваяСтрока.Сумма);
			
			Если НоваяСтрока.ДанныеПереданыВБанк Тогда 
				НоваяСтрока.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПроцентКомиссии(ЭквайринговыйТерминал, ВидОплаты, ВидОперации)
	
	ОперацияПродажа = Перечисления.ВидыОперацийЧекККМ.Продажа;
	ОперацияВозврат = Перечисления.ВидыОперацийЧекККМ.Возврат;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Тарифы.ПроцентКомиссииПриПродаже КАК ПроцентКомиссииПриПродаже,
	|	Тарифы.ПроцентКомиссииПриОтмене КАК ПроцентКомиссииПриОтмене,
	|	Тарифы.ПроцентКомиссииПриВозврате КАК ПроцентКомиссииПриВозврате
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы.ТарифыЗаРасчетноеОбслуживание КАК Тарифы
	|ГДЕ
	|	Тарифы.Ссылка = &ЭквайринговыйТерминал
	|	И (Тарифы.ВидОплаты = &ВидОплаты
	|			ИЛИ Тарифы.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ПустаяСсылка))");
		
	Запрос.УстановитьПараметр("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
	Запрос.УстановитьПараметр("ВидОплаты", ВидОплаты);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ВидОперации = ОперацияВозврат Тогда
			Если ЭтоВозвратДеньВДень() И ЭтоПолныйВозврат() Тогда
				ПроцентКомиссии = Выборка.ПроцентКомиссииПриОтмене;
			Иначе
				ПроцентКомиссии = Выборка.ПроцентКомиссииПриВозврате;
			КонецЕсли;
		ИначеЕсли ВидОперации = ОперацияПродажа Тогда
			ПроцентКомиссии = Выборка.ПроцентКомиссииПриПродаже;
		КонецЕсли;
	Иначе
		ПроцентКомиссии = 0;
	КонецЕсли;

	Возврат ПроцентКомиссии;	
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьКонтрагента(ЭтоУдалениеСтроки = Ложь)
	
	ВидыОплатВыбранные = ТекущиеВидыОплат.Выгрузить(,"ВидОплаты").ВыгрузитьКолонку("ВидОплаты");
	ЕстьРассрочка = НЕ ВидыОплатВыбранные.Найти(Справочники.ВидыОплатЧекаККМ.ОплатаВрассрочку) = Неопределено;
	
	Если ЭтоУдалениеСтроки Тогда
		Если НЕ ЕстьРассрочка 
			И НЕ ОперацияСДенежнымиСредствами 
			И НЕ ЗначениеЗаполнено(КонтрагентДоИзменения) Тогда
			Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураДанныхЭТ(Терминал)
	
	Возврат РозничныеПродажиСервер.СтруктураДанныхЭТ(Терминал);
	
КонецФункции

#Область ОплатаЭСНСПК

&НаКлиенте
Процедура ОбработатьРезультатОплатыЭСНСПК(Знач РезультатВыполнения = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Доступность = Истина;
	
	Если РезультатВыполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыполнения.Результат Тогда
		
		ИдентификаторСтрокиВозврата = Неопределено;
		ЭтоВозврат = Ложь;
		
		Если НЕ ДополнительныеПараметры = Неопределено Тогда
			ДополнительныеПараметры.Свойство("ИдентификаторСтрокиВозврата", ИдентификаторСтрокиВозврата);
		КонецЕсли;
		
		ОбработатьРезультатОплатыЭСНСПКНаСервере(РезультатВыполнения, ИдентификаторСтрокиВозврата);
		
		ТекущийЭлемент = Элементы.ТекущиеВидыОплат;
		ПриЗавершенииОплатуПлатежнойКартойЧерезЭквайринговыйТерминал(Неопределено);
		ОплатаЭСНСПК = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатОплатыЭСНСПКНаСервере(РезультатВыполнения, ИдентификаторСтрокиВозврата = Неопределено)
	
	ЭтоВозврат = НЕ ИдентификаторСтрокиВозврата = Неопределено;
	Если Не ЭтоВозврат Тогда
		ТекущиеВидыОплат.Очистить();
	КонецЕсли;
	
	ЭквайринговыйТерминал = Неопределено;
	
	Если РезультатВыполнения.Свойство("СуммаЭлектронногоСертификата") И РезультатВыполнения.СуммаЭлектронногоСертификата >0 Тогда
		
		ВидОплатыПлатежнаяСистемаНСПК = Неопределено;
		ЭлектронныеСертификатыНСПКРТ.ЗаполнитьВидОплатыПлатежнаяСистемаНСПК(ВидОплатыПлатежнаяСистемаНСПК);
		СтрокаЭСНСПК = Неопределено;
		Если ЭтоВозврат Тогда
			СтрокаЭСНСПК = ТекущиеВидыОплат.НайтиПоИдентификатору(ИдентификаторСтрокиВозврата);
		КонецЕсли;
		
		Если СтрокаЭСНСПК = Неопределено Тогда
			СтрокаЭСНСПК = ТекущиеВидыОплат.Добавить();
			СтрокаЭСНСПК.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяСистема;
			СтрокаЭСНСПК.ВидОплаты = ВидОплатыПлатежнаяСистемаНСПК;
		КонецЕсли;
		
		СтрокаЭСНСПК.Сумма = РезультатВыполнения.СуммаЭлектронногоСертификата;
		СтрокаЭСНСПК.ПредставлениеВидаОплаты = СтрокаЭСНСПК.ВидОплаты;
		СтрокаЭСНСПК.ПредставлениеСуммы = СтрокаЭСНСПК.Сумма;
		
		Если ЭквайринговыйТерминал = Неопределено Тогда
			ЭквайринговыйТерминал = Справочники.ЭквайринговыеТерминалы.НайтиПоРеквизиту(
				"ПодключаемоеОборудование", РезультатВыполнения.ИдентификаторУстройства);
		КонецЕсли;
		
		СтрокаЭСНСПК.ЭквайринговыйТерминал = ЭквайринговыйТерминал;
		СтрокаЭСНСПК.НомерЧекаЭТ = РезультатВыполнения.НомерЧекаЭТ;
		СтрокаЭСНСПК.НомерПлатежнойКарты = РезультатВыполнения.НомерКарты;
		СтрокаЭСНСПК.СсылочныйНомер = РезультатВыполнения.ИдентификаторКорзины;
		СтрокаЭСНСПК.ДанныеПереданыВБанк = Истина;
		СтрокаЭСНСПК.ЗапретРедактирования = Истина;
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("СуммаСобственныхСредств") И РезультатВыполнения.СуммаСобственныхСредств >0 Тогда
		
		ВидОплатыПлатежнаяКартаНСПК = Неопределено;
		ЭлектронныеСертификатыНСПКРТ.ЗаполнитьВидОплатыПлатежнаяКартаНСПК(ВидОплатыПлатежнаяКартаНСПК);
		СтрокаПКНСПК = Неопределено;
		
		Если ЭтоВозврат Тогда
			СтрокиПКНСПК = ТекущиеВидыОплат.НайтиСтроки(
				Новый Структура("ВидОплаты, ДанныеПереданыВБанк", ВидОплатыПлатежнаяКартаНСПК, Ложь));
			Если СтрокиПКНСПК.Количество()>0 Тогда
				СтрокаПКНСПК = СтрокиПКНСПК[0];
			КонецЕсли;
		КонецЕсли;
			
		Если СтрокаПКНСПК = Неопределено Тогда
			СтрокаПКНСПК = ТекущиеВидыОплат.Добавить();
			СтрокаПКНСПК.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта;
			СтрокаПКНСПК.ВидОплаты = ВидОплатыПлатежнаяКартаНСПК;
		КонецЕсли;
		
		СтрокаПКНСПК.Сумма = РезультатВыполнения.СуммаСобственныхСредств;
		СтрокаПКНСПК.ПредставлениеВидаОплаты = СтрокаПКНСПК.ВидОплаты;
		СтрокаПКНСПК.ПредставлениеСуммы = СтрокаПКНСПК.Сумма;
		
		Если ЭквайринговыйТерминал = Неопределено Тогда
			ЭквайринговыйТерминал = Справочники.ЭквайринговыеТерминалы.НайтиПоРеквизиту(
				"ПодключаемоеОборудование",
				РезультатВыполнения.ИдентификаторУстройства);
		КонецЕсли;
			
		СтрокаПКНСПК.ЭквайринговыйТерминал = ЭквайринговыйТерминал;
		СтрокаПКНСПК.НомерЧекаЭТ = РезультатВыполнения.НомерЧекаЭТ;
		СтрокаПКНСПК.НомерПлатежнойКарты = РезультатВыполнения.НомерКарты;
		СтрокаПКНСПК.СсылочныйНомер = РезультатВыполнения.СсылочныйНомер;
		СтрокаПКНСПК.ДанныеПереданыВБанк = Истина;
		СтрокаПКНСПК.ЗапретРедактирования = Истина;
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("Наличными") И РезультатВыполнения.Наличными >0 Тогда
		
		СтрокаНаличные = ТекущиеВидыОплат.Добавить();
		СтрокаНаличные.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.Наличные");
		СтрокаНаличные.ВидОплаты = Справочники.ВидыОплатЧекаККМ.Наличные;
		СтрокаНаличные.Сумма = РезультатВыполнения.Наличными;
		СтрокаНаличные.ПредставлениеВидаОплаты = СтрокаНаличные.ВидОплаты;
		СтрокаНаличные.ПредставлениеСуммы = СтрокаНаличные.Сумма;
		
	КонецЕсли;
	
	СуммаСдачи = 0;
	
	Если РезультатВыполнения.Свойство("Сдача") И РезультатВыполнения.Сдача >0 Тогда
		
		СуммаСдачи = РезультатВыполнения.Сдача;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьЭСНСПКНаКлиенте(ВыбраннаяСтрока)
	
	ЭтоВозврат = ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат");
	
	Если НЕ ЭтоВозврат И ТекущиеВидыОплат.Количество() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Удалите другие виды оплаты из документа. Совместное использование с другими видами оплат не поддерживается.'"),
			,
			"ВидыОплат[0].ВидОплаты");
		Возврат;
	ИначеЕсли ЭтоВозврат Тогда
		
		Если ВыбраннаяСтрока = Неопределено
			ИЛИ НЕ ВыбраннаяСтрока.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяСистема") Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Выберите строку с видом оплаты платежной системой ЭС (ФЗ-491)'"));
				
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("КассаККМ", КассаККМ);
	ДополнительныеПараметры.Вставить("ЭтоВозврат", ЭтоВозврат);
	ДополнительныеПараметры.Вставить("ИмяОбработкиОповещения", "ОплатаНСПКПродолжение");
	ДополнительныеПараметры.Вставить("ИдентификаторВыбраннойСтроки", ВыбраннаяСтрока.ПолучитьИдентификатор());
	
	Если ЭтоВозврат Тогда
		
		СуммаПК = 0;
		ЭлектронныеСертификатыНСПКРТ.ЗаполнитьЛимитВозвратаНаКартуНСПК(СуммаПК, ЧекККМПродажа);
		
		ДополнительныеПараметры.Вставить("СуммаЧека", ИтогПоОрганизации);
		ДополнительныеПараметры.Вставить("СуммаПК", СуммаПК);
		ДополнительныеПараметры.Вставить("ИдентификаторКорзины", ВыбраннаяСтрока.СсылочныйНомер);
		ДополнительныеПараметры.Вставить("ИдентификаторСтрокиВозврата", ВыбраннаяСтрока.ПолучитьИдентификатор());
		
		ОплатаНСПКПродолжение(ДополнительныеПараметры);
		
	Иначе
		
		Отказ = Ложь;
		
		ДополнительныеПараметры.Вставить("СуммаЧека", ИтогПоОрганизации);
		ОплатаНСПКПродолжение(ДополнительныеПараметры);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОплатаНСПКПродолжение(ДополнительныеПараметры)
	
	
КонецПроцедуры

&НаСервере
Функция ТоварныеПозицииФСС()
	
	Возврат ТоварныеПозицииФСС.Получить();
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура КомандаМобильныйПлатежКлиент()
	
	СуммаКОплате = Макс(ИтогПоОрганизации - ТекущиеВидыОплат.Итог("Сумма"), 0);
	
	Если СуммаКОплате = 0 И НЕ ЭтоАвансБезРасшифровкиПоТоварам Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраница;
		Возврат 
	КонецЕсли;
	
	ЗаполнитьТаблицуВидыОплаты(ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.МобильныйПлатеж"));
	
	Если ВидыОплат.Количество() < 2 Тогда
		Возврат;
	ИначеЕсли ВидыОплат.Количество() = 2 Тогда
		
		ОбработкаВыбораПлатежнойКарты(ВидыОплат[0]);
		
		ПервыйВвод = Истина;
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаВидыОплат;
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьТекущийЭлементВВидОплаты", 0.1, Истина);
	КонецЕсли;
	
	ОбновитьФорму();
	
КонецПроцедуры

#КонецОбласти