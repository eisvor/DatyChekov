#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ЗаголовокИнформации = НСтр("ru = 'При подключении оборудования произошла ошибка:'");
		ТекстИнформации     = РезультатВыполнения.ОписаниеОшибки;
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ДанныеПоискаПоМагнитномуКодуСервер(МагнитныйКод);
	Возврат ПодключаемоеОборудованиеРТКлиент.ПолученМагнитныйКод(ЭтотОбъект, СтруктураРезультат);
	
КонецФункции

&НаСервере
Функция ДанныеПоискаПоМагнитномуКодуСервер(МагнитныйКод)
	
	Возврат ПодключаемоеОборудованиеРТ.ДанныеПоискаПоМагнитномуКоду(МагнитныйКод, ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ДанныеПоискаПоШтрихкодуСервер(Штрихкод);
	Возврат ПодключаемоеОборудованиеРТКлиент.ПолученШтрихкодИзСШК(ЭтотОбъект, СтруктураРезультат);
	
КонецФункции

&НаСервере
Функция ДанныеПоискаПоШтрихкодуСервер(Штрихкод)
	
	ДанныеПоискаПоШтрихкоду = ПодключаемоеОборудованиеРТ.ДанныеПоискаПоШтрихкоду(Штрихкод, ЭтотОбъект);
	
	Возврат ДанныеПоискаПоШтрихкоду;
	
КонецФункции

&НаКлиенте
Процедура ОповещениеОбработатьДанныеПоКоду(СтруктураРезультат, ДополнительныеПараметры) Экспорт
	
	ОбработатьДанныеПоКодуСервер(СтруктураРезультат);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		Если СтрокаРезультата.ЭтоРегистрационнаяКарта Тогда
			ПодключаемоеОборудованиеРТ.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		Иначе
			ДисконтнаяКарта = СтрокаРезультата.Карта;
			ОтборыСписковКлиентСервер.УдалитьЭлементОтбораСписка(СписокЧеков, "ДисконтнаяКарта");
			ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(СписокЧеков, "ДисконтнаяКарта", ДисконтнаяКарта, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		СерийныйНомер = СтрокаРезультата.СерийныйНомер;
		НайтиЧекиИУстановитьОтбор("СерийныйНомер");
		
	ИначеЕсли СтрокаРезультата.Свойство("ЧекПоФискальнымДанным") Тогда
		
		ЧекПоФискальнымДанным = СтрокаРезультата.ЧекПоФискальнымДанным;
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
			СписокЧеков,
			"Ссылка",
			ЧекПоФискальнымДанным,
			Истина,
			ВидСравненияКомпоновкиДанных.Равно);
		
	ИначеЕсли СтрокаРезультата.Свойство("Номенклатура") Тогда
		
		Номенклатура = СтрокаРезультата.Номенклатура;
		Характеристика = СтрокаРезультата.Характеристика;
		НайтиЧекиИУстановитьОтбор();
		
	КонецЕсли;
	
	
	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКодуРМК(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаЧисла(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	ТекКод = "";
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		ЗначениеВыбораЧисло = РезультатОткрытияФормы.ВведенноеЧисло;
		Если ЗначениеЗаполнено(ЗначениеВыбораЧисло) Тогда
			ЧислоВвода = ЗначениеВыбораЧисло;
			ТекКод = Формат(ЗначениеВыбораЧисло, "ЧН=0; ЧГ=0");
			Если ДополнительныеПараметры.Свойство("ПолученМагнитныйКод") Тогда
				СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
			ИначеЕсли ДополнительныеПараметры.Свойство("ПолученШтрихкодИзСШК") Тогда
				СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(ТекКод);
			КонецЕсли;
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаКодаПлатежнойСистемы(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		Если ЗначениеЗаполнено(РезультатОткрытияФормы.ИдентификаторЧекаВПлатежнойСистеме) Тогда
			
			СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(РезультатОткрытияФормы.ИдентификаторЧекаВПлатежнойСистеме);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// ПодключаемоеОборудование
	ПодключаемоеОборудованиеРТ.НастроитьПодключаемоеОборудование(ЭтотОбъект, Новый Массив());
	// Конец ПодключаемоеОборудование
	
	ЗаполнитьПервоначальныйСписокВыбора(Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(
		ОповещенияПриПодключении,
		ЭтотОбъект,
		"СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудованияРМК(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СписокЧековВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЗафиксироватьВыборСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура НомерЧекаПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УдалитьЭлементОтбораСписка(СписокЧеков, "Номер");
	Если ЗначениеЗаполнено(НомерЧека) Тогда
		ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(СписокЧеков, "Номер", НомерЧека, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	ОтборыСписковКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЧеков, "ДатаНачала", ДатаНачала, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДатаКонцаПриИзменении(Элемент)
	ОтборыСписковКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЧеков, "ДатаКонца", КонецДня(ДатаКонца), Истина);
КонецПроцедуры

&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УдалитьЭлементОтбораСписка(СписокЧеков, "КассаККМ");
	Если ЗначениеЗаполнено(КассаККМ) Тогда
		ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(СписокЧеков, "КассаККМ", КассаККМ, ВидСравненияКомпоновкиДанных.Равно);
	Иначе
		Если ТекущийРежимВызова = "ВыбиратьПродажиСУчетомВозвратов"
			И ЕстьПередачаОФД Тогда
			ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(СписокЧеков, "Организация", СписокОрганизаций, ВидСравненияКомпоновкиДанных.ВСписке);
		Иначе
			ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(СписокЧеков, "КассаККМ", СписокКассККМ, ВидСравненияКомпоновкиДанных.ВСписке);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыбрать(Команда)
	
	ЗафиксироватьВыборСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	ДополнительныеПараметры = Новый Структура("ПолученМагнитныйКод");
	ПолучитьИнтерактивноЧисло(НСтр("ru = 'Введите магнитный код'"), ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ДополнительныеПараметры = Новый Структура("ПолученШтрихкодИзСШК");
	ПолучитьИнтерактивноЧисло(НСтр("ru = 'Введите штрихкод'"), ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоКодуПлатежнойСистемы(Команда)
	
	ДополнительныеПараметры = Новый Структура("ПолученКодПлатежнойСистемы");
	ПолучитьКодПлатежнойСистемы(НСтр("ru = 'Введите код платежной системы'"), ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтменитьПоиск(Команда)
	
	ВводимоеЧисло = "";
	ОтборыСписковКлиентСервер.УдалитьЭлементОтбораСписка(
		СписокЧеков,
		"Ссылка");
		
	ОтборыСписковКлиентСервер.УдалитьЭлементОтбораСписка(
		СписокЧеков,
		"ДисконтнаяКарта");
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗафиксироватьВыборСтроки()
	
	ТекущиеДанные = Элементы.СписокЧеков.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Закрыть();
	Иначе
		
		МассивЧеков = Новый Массив;
		
		Для Каждого ВыделеннаяСтрока ИЗ Элементы.СписокЧеков.ВыделенныеСтроки Цикл
			МассивЧеков.Добавить(ВыделеннаяСтрока);
		КонецЦикла;
		
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("МассивЧеков", МассивЧеков);
		СтруктураСтроки.Вставить("ЧекККМ"     , ТекущиеДанные.Ссылка);
		СтруктураСтроки.Вставить("КассаККМ"   , ТекущиеДанные.КассаККМ);
		СтруктураСтроки.Вставить("Организация", ТекущиеДанные.Организация);
		СтруктураСтроки.Вставить("Проведен"   , ТекущиеДанные.Проведен);
		
		Закрыть(СтруктураСтроки)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПервоначальныйСписокВыбора(Параметры)
	
	ДатаНачала = ТекущаяДатаСеанса();
	ДатаКонца = ДатаНачала;
	ОтборыСписковКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЧеков, "ДатаНачала", ДатаНачала, Истина);
	ОтборыСписковКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЧеков, "ДатаКонца", КонецДня(ДатаКонца), Истина);
	СписокКассККМ.ЗагрузитьЗначения(Параметры.МассивКассККМ);
	
	Если Параметры.Свойство("ВыбиратьПродажиСУчетомВозвратов") Тогда
		ТекущийРежимВызова = "ВыбиратьПродажиСУчетомВозвратов";
		Элементы.СписокЧековВидОперации.Видимость = Ложь;
		СписокСтатусов = Новый СписокЗначений;
		СписокСтатусов.Добавить(Перечисления.СтатусыЧековККМ.ПустаяСсылка());
		СписокСтатусов.Добавить(Перечисления.СтатусыЧековККМ.Пробитый);
		СписокСтатусов.Добавить(Перечисления.СтатусыЧековККМ.Архивный);
		ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(СписокЧеков, "СтатусЧекаККМ", СписокСтатусов, ВидСравненияКомпоновкиДанных.ВСписке);
		ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(СписокЧеков, "Проведен", Истина, ВидСравненияКомпоновкиДанных.Равно);
		ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(СписокЧеков, "ВидОперации", Перечисления.ВидыОперацийЧекККМ.Продажа, ВидСравненияКомпоновкиДанных.Равно);
		
		СписокОрганизаций.ЗагрузитьЗначения(Параметры.МассивОрганизаций);
		Если Параметры.Свойство("ЕстьПередачаОФД") И Параметры.ЕстьПередачаОФД Тогда
			ЕстьПередачаОФД = Истина;
			ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(СписокЧеков, "Организация", СписокОрганизаций, ВидСравненияКомпоновкиДанных.ВСписке);
		Иначе
			ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(СписокЧеков, "КассаККМ", СписокКассККМ, ВидСравненияКомпоновкиДанных.ВСписке);
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("ПечатьПробитогоЧека") Тогда
		ТекущийРежимВызова = "ПечатьПробитогоЧека";
		СписокСтатусов = Новый СписокЗначений;
		СписокСтатусов.Добавить(Перечисления.СтатусыЧековККМ.Архивный);
		СписокСтатусов.Добавить(Перечисления.СтатусыЧековККМ.Пробитый);
		ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(СписокЧеков, "СтатусЧекаККМ", СписокСтатусов, ВидСравненияКомпоновкиДанных.ВСписке);
		ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(СписокЧеков, "КассаККМ", СписокКассККМ, ВидСравненияКомпоновкиДанных.ВСписке);
		
	ИначеЕсли Параметры.Свойство("ПробитиеДругогоЧека") Тогда
		ТекущийРежимВызова = "ПробитиеДругогоЧека";
		
		Если Параметры.ЧекиККМ.Количество() > 0 Тогда
			Чеки = Параметры.ЧекиККМ.Выгрузить(,"ЧекККМСсылка");
			ЧекиККМ.ЗагрузитьЗначения(Чеки.ВыгрузитьКолонку("ЧекККМСсылка"));
			ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(СписокЧеков, "Ссылка", ЧекиККМ, ВидСравненияКомпоновкиДанных.ВСписке);
		КонецЕсли;
		
		ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(СписокЧеков, "СтатусЧекаККМ", Перечисления.СтатусыЧековККМ.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.Равно);
		ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(СписокЧеков, "КассаККМ", СписокКассККМ, ВидСравненияКомпоновкиДанных.ВСписке);
		
	ИначеЕсли Параметры.Свойство("ПродолжениеОтложенныхЧеков") Тогда
		ТекущийРежимВызова = "ПродолжениеОтложенныхЧеков";
		ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(СписокЧеков, "СтатусЧекаККМ", Перечисления.СтатусыЧековККМ.Отложенный, ВидСравненияКомпоновкиДанных.Равно);
		ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(СписокЧеков, "КассаККМ", СписокКассККМ, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	Если Параметры.Свойство("ОперацияСДенежнымиСредствами") Тогда
		ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(СписокЧеков, "ОперацияСДенежнымиСредствами", Параметры.ОперацияСДенежнымиСредствами, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	СкрыватьКолонкуОрганизации = Ложь;
	Если Параметры.Свойство("СкрыватьКолонкуОрганизации") Тогда
		Элементы.СписокЧековОрганизация.Видимость = НЕ Параметры.СкрыватьКолонкуОрганизации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИнтерактивноЧисло(Заголовок, ДополнительныеПараметры = Неопределено)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок"             , Заголовок);
	ПараметрыФормы.Вставить("ЧислоВвода"            , 0);
	ПараметрыФормы.Вставить("Отрицательное"         , Ложь);
	ПараметрыФормы.Вставить("ВозвращатьЧислоСтрокой", Истина);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаЧисла", ЭтотОбъект, ДополнительныеПараметры);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВводаЧисла", ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим); 
	
КонецФункции 

&НаКлиенте
Функция ПолучитьКодПлатежнойСистемы(Заголовок, ДополнительныеПараметры = Неопределено)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок"             , Заголовок);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаКодаПлатежнойСистемы", ЭтотОбъект, ДополнительныеПараметры);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВводаКодаПлатежнойСистемы", ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим); 
	
КонецФункции

&НаСервере
Процедура НайтиЧекиИУстановитьОтбор(Режим = "Номенклатура")
	
	СписокСсылок = Новый СписокЗначений;
	Запрос = Новый Запрос;
	
	Если Режим = "СерийныйНомер" Тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	ЧекККМ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЧекККМ.ПогашениеПодарочныхСертификатов КАК ЧекККМ
		|ГДЕ
		|	ЧекККМ.СерийныйНомер = &СерийныйНомер
		|	И ЧекККМ.Ссылка.Проведен
		|	И ЧекККМ.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЧекККМ.Ссылка
		|ИЗ
		|	Документ.ЧекККМ.СерийныеНомера КАК ЧекККМ
		|ГДЕ
		|	ЧекККМ.СерийныйНомер = &СерийныйНомер
		|	И ЧекККМ.Ссылка.Проведен
		|	И ЧекККМ.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаКонца";
		
		Запрос.УстановитьПараметр("СерийныйНомер", СерийныйНомер);
		
	Иначе
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	ЧекККМ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК ЧекККМ
		|ГДЕ
		|	ЧекККМ.Номенклатура = &Номенклатура
		|	И ЧекККМ.Характеристика = &Характеристика
		|	И (НЕ ЧекККМ.Ссылка.ПометкаУдаления)
		|	И ЧекККМ.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаКонца";
		
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", Характеристика);
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаКонца", КонецДня(ДатаКонца));
	
	СписокСсылок.ЗагрузитьЗначения(
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		СписокЧеков,
		"Ссылка",
		СписокСсылок,
		Истина,
		ВидСравненияКомпоновкиДанных.ВСписке);
	
КонецПроцедуры

#КонецОбласти