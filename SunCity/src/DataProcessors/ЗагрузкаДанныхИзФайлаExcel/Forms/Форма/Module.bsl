
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьАссортимент = ПолучитьФункциональнуюОпцию("ИспользоватьТоварныеКатегорииИКвотыАссортимента");
	ИспользоватьДополнительныеРеквизитыИСведения =
		ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведенияРозница");
	
	Область = ТабДокИсточник.Область(1,,1);
	Область.ЦветФона = WebЦвета.АкварельноСиний;
	
	ТабДокИсточник.ФиксацияСверху = 1;
	
	Если ПерваяСтрокаДанныхИсточника < 2 Тогда
		ПерваяСтрокаДанныхИсточника = 2;
	КонецЕсли;
	
	Если НЕ ИспользоватьДополнительныеРеквизитыИСведения Тогда
		Элементы.ДопПараметрыНоменклатуры.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ИспользоватьХарактеристики Тогда
		Элементы.ЗагружатьДополнительныеРеквизитыИСведенияХарактеристик.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьШапкуТабличногоДокументаИсточникаКлиентСервер(
		ТабДокИсточник,
		ПерваяСтрокаДанныхИсточника,
		Объект.ТаблицаРеквизитовПриемника);
		
	Если ТипПриемника = "СправочникНоменклатура" Тогда 
		УстановитьДоступностьОтбораВидаНоменклатуры();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ ЗавершениеРаботы Тогда
		СтандартнаяОбработка = Ложь;
		ВызватьДиалогЗапросаСохраниенияНастройки(Отказ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	СохранитьВосстановитьНастройкиНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если НЕ ЗначениеЗаполнено(ТипПриемника) Тогда
		ТипПриемника = "СправочникНоменклатура";
	КонецЕсли;
	
	ЗаполнитьНастройкойПоУмолчанию();
	
	Элементы.ДопПараметрыНоменклатуры.Видимость = ТипПриемника = "СправочникНоменклатура";
	Элементы.ДопПараметрыЦен.Видимость = ТипПриемника = "ДокументУстановкаЦен";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипПриемникаПриИзменении(Элемент)
	
	ИзмененыНастройки = Ложь;
	Элементы.ГруппаПриемник.Заголовок = НСтр("ru = 'Приемник данных'");
	Элементы.ДопПараметрыНоменклатуры.Видимость = ТипПриемника = "СправочникНоменклатура";
	Элементы.ДопПараметрыЦен.Видимость = ТипПриемника = "ДокументУстановкаЦен";
	
	ЗаполнитьНастройкойПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура ПерваяСтрокаДанныхИсточникаПриИзменении(Элемент)
	
	ЗаполнитьШапкуТабличногоДокументаИсточникаКлиентСервер(
		ТабДокИсточник,
		ПерваяСтрокаДанныхИсточника,
		Объект.ТаблицаРеквизитовПриемника);
КонецПроцедуры

&НаКлиенте
Процедура ТипПриемникаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Отказ = Ложь;
	ВызватьДиалогЗапросаСохраниенияНастройки(Отказ,, Истина);
	
	Если Отказ Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагружатьДополнительныеРеквизитыИСведенияХарактеристикПриИзменении(Элемент)
	
	ПриИзмененииНастроек();
	ДобавитьДопРеквизитыВТаблицуРеквизитовПриемника();
	ЗаполнитьШапкуТабличногоДокументаИсточникаКлиентСервер(
		ТабДокИсточник,
		ПерваяСтрокаДанныхИсточника,
		Объект.ТаблицаРеквизитовПриемника);
КонецПроцедуры

&НаКлиенте
Процедура ТолькоОбщиеДопРеквизитыСведенияПриИзменении(Элемент)
	
	ПриИзмененииНастроек();
	УстановитьДоступностьОтбораВидаНоменклатуры();
	ДобавитьДопРеквизитыВТаблицуРеквизитовПриемника();
	ЗаполнитьШапкуТабличногоДокументаИсточникаКлиентСервер(
		ТабДокИсточник,
		ПерваяСтрокаДанныхИсточника,
		Объект.ТаблицаРеквизитовПриемника);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)
	
	ПриИзмененииНастроек();
	ДобавитьДопРеквизитыВТаблицуРеквизитовПриемника();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагружатьДополнительныеРеквизитыИСведенияНоменклатурыПриИзменении(Элемент)
	
	ПриИзмененииНастроек();
	ДобавитьДопРеквизитыВТаблицуРеквизитовПриемника();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабДокИсточникПриИзменении(Элемент)
	
	ЛогПроверкиДанных.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиТаблицаРеквизитовПриемника

&НаКлиенте
Процедура ТаблицаРеквизитовПриемникаПриИзменении(Элемент)
	
	ПриИзмененииНастроек();
	ПроверитьХарактеристикуНадобавление();
	ЗаполнитьШапкуТабличногоДокументаИсточникаКлиентСервер(
		ТабДокИсточник,
		ПерваяСтрокаДанныхИсточника,
		Объект.ТаблицаРеквизитовПриемника);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРеквизитовПриемникаЗначениеПоУмолчаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаРеквизитовПриемника.ТекущиеДанные;
	
	Если ТекущиеДанные.ИмяРеквизита = "Родитель" Тогда
		Элемент.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
	ИначеЕсли ТекущиеДанные.ИмяРеквизита = "ВидНоменклатуры" Тогда
		Элемент.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипЗначения.Типы().Количество() > 1 Тогда
		
		СписокТипов = Новый СписокЗначений;
		СписокТипов.ЗагрузитьЗначения(ТекущиеДанные.ТипЗначения.Типы());
		ВыбранныйТип = СписокТипов.ВыбратьЭлемент(НСтр("ru = 'Выбор типа данных'"));
		
		Если ВыбранныйТип <> Неопределено Тогда
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ВыбранныйТип.Значение);
			ОписаниеВыбранныйТип = Новый ОписаниеТипов(МассивТипов);
			ТекущиеДанные.ЗначениеПоУмолчанию = ОписаниеВыбранныйТип.ПривестиЗначение(ТекущиеДанные.ЗначениеПоУмолчанию);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущиеДанные.ИмяРеквизита = "ТоварнаяКатегория" Тогда
		
		НайденныеСтроки = Объект.ТаблицаРеквизитовПриемника.НайтиСтроки(Новый Структура("ИмяРеквизита", "ВидНоменклатуры"));
		ВидНоменклатурыПоУмолчанию = НайденныеСтроки[0].ЗначениеПоУмолчанию;
		
		Если ЗначениеЗаполнено(ВидНоменклатурыПоУмолчанию) Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Владелец", ВидНоменклатурыПоУмолчанию);
			ОткрытьФорму("Справочник.ТоварныеКатегории.ФормаВыбора", ПараметрыФормы, Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРеквизитовПриемникаЗначениеПоУмолчаниюПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаРеквизитовПриемника.ТекущиеДанные;
	Если ИспользоватьАссортимент И ТекущиеДанные.ИмяРеквизита = "ВидНоменклатуры" Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ЗначениеПоУмолчанию) Тогда
			НайденныеСтроки = Объект.ТаблицаРеквизитовПриемника.НайтиСтроки(
				Новый Структура("ИмяРеквизита", "ТоварнаяКатегория"));
			ТоварнаяКатегорияПоУмолчанию = НайденныеСтроки[0].ЗначениеПоУмолчанию;
			Если ЗначениеЗаполнено(ТоварнаяКатегорияПоУмолчанию) Тогда
				ВладелецТоварнойКатегории =
					ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(ТоварнаяКатегорияПоУмолчанию, "Владелец");
				Если НЕ ВладелецТоварнойКатегории = ТекущиеДанные.ЗначениеПоУмолчанию Тогда
					НайденныеСтроки[0].ЗначениеПоУмолчанию = ПредопределенноеЗначение("Справочник.ТоварныеКатегории.ПустаяСсылка");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРеквизитовПриемникаПометкаПриИзменении(Элемент)
	
	УстановитьСнятьПометку();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиЛогПроверкиДанных

&НаКлиенте
Процедура ЛогПроверкиДанныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЛогПроверкиДанных.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		НайденныеСтроки = Объект.ТаблицаРеквизитовПриемника.НайтиСтроки(
			Новый Структура("ИмяРеквизита", ТекущиеДанные.ИмяРеквизита));
		
		НомерКолонки = НайденныеСтроки[0].НомерСтроки;
		
		ПерейтиКСтроке(ТекущиеДанные.НомерСтрокиИсточника, НомерКолонки);
		
	КонецЕсли;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаИсточникДанных;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	ОписаниеОповещенияПослеЗагрузки = Новый ОписаниеОповещения("ПрочитатьФайлПослеЗагрузки", ЭтотОбъект);
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыЗагрузки.Диалог.Заголовок = НСтр("ru = 'Прочитать табличный документ из файла'");
	ПараметрыЗагрузки.Диалог.Фильтр = НСтр("ru = 'Лист Excel (*.xls)|*.xls|Лист Excel 2007(*.xlsx)|*.xlsx|'");
	
	ФайловаяСистемаКлиент.ЗагрузитьФайл(ОписаниеОповещенияПослеЗагрузки, ПараметрыЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	Состояние(НСтр("ru = 'Обработка данных...'"));
	СоздатьТаблицуИсточника();
	
	Если ТипПриемника = "СправочникНоменклатура" Тогда
		
		Если КоличествоЗагружаемойНоменклатуры > 0 Тогда
			
			ПорцииЗагрузки = ПолучитьПорцииЗагрузкиНоменклатуры();
			
			ШагПрогесса = Окр(100/ПорцииЗагрузки.Количество());
			Прогресс = 0;
			Для каждого Порция Из ПорцииЗагрузки Цикл
				Состояние(НСтр("ru = 'Загрузка номенклатуры'"), Прогресс,,БиблиотекаКартинок.Информация32);
				ЗагрузитьНаСервере(Порция);
				Прогресс = Прогресс + ШагПрогесса;
			КонецЦикла;
			Состояние(НСтр("ru = 'Загрузка номенклатуры'"), 100,,БиблиотекаКартинок.Информация32);
		КонецЕсли;
		
	ИначеЕсли ТипПриемника = "ДокументУстановкаЦен" Тогда
		
		ЗагрузитьНаСервере();
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("НовыйДокументУстановкиЦенСтруктура", НовыйДокументУстановкиЦен);
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ДанныеЗаполнения);
		ПараметрыОткрытия.Вставить("ЦеныЗагруженыПередОткрытием", Истина);
		НоваяФорма = ПолучитьФорму("Документ.УстановкаЦенНоменклатуры.Форма.ФормаДокумента", ПараметрыОткрытия);
		НоваяФорма.Модифицированность = Истина;
		НоваяФорма.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресСохраненныхНастроек", АдресСохраненныхНастроек);
	ПараметрыФормы.Вставить("ИмяОткрытойНастройки", ИмяОткрытойНастройки);
	ПараметрыФормы.Вставить("ТипПриемника", ТипПриемника);
	ПараметрыФормы.Вставить("НеЗадаватьВопросСохраненияНастроек", НеЗадаватьВопросСохраненияНастроек);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Обработка.ЗагрузкаДанныхИзФайлаExcel.Форма.ФормаСохраненияНастройки",
		ПараметрыФормы,
		ЭтаФорма,
		,
		,
		,
		,
		Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройки(Команда)
	
	Отказ = Ложь;
	ВызватьДиалогЗапросаСохраниенияНастройки(Отказ, Истина);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуВосстановленияНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьТаблицу(Команда)
	
	Элементы.ТабДокИсточник.Редактирование = НЕ Элементы.ТабДокИсточник.Редактирование;
	Элементы.РедактироватьТабДок.Пометка = Элементы.ТабДокИсточник.Редактирование;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДанные(Команда)
	
	ПроверитьДанныеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходКСтроке(Команда)
	
	НомерСтроки = 0;
	Подсказка = НСтр("ru = 'Введите номер строки'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ОписаниеОповещенияПереходКСтроке", ЭтотОбъект);
	ПоказатьВводЗначения(ОписаниеОповещения ,НомерСтроки, Подсказка,
		Новый ОписаниеТипов("Число", ,Новый КвалификаторыЧисла(5)));
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПрочитатьФайлПослеЗагрузки(ПомещенныйФайл, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныйФайл = Неопределено Тогда
		Элементы.ОткрытьФайл.КнопкаПоУмолчанию = Истина;
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выберите файл для загрузки'"));
		Возврат;
	КонецЕсли;
	
	Область = ТабДокИсточник.Область("T");
	Область.Очистить();
	
	Отказ = Ложь;
	ПрочитатьФайлПослеЗагрузкиСервер(ПомещенныйФайл, Отказ);
	
	Если Не Отказ Тогда
		
		Элементы.Загрузить.Доступность = Истина;
		Элементы.Загрузить.КнопкаПоУмолчанию = Истина;
		ЛогПроверкиДанных.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлПослеЗагрузкиСервер(ПомещенныйФайл, Отказ)
	
	Файл = ПолучитьИзВременногоХранилища(ПомещенныйФайл.Хранение);
	Если Прав(ПомещенныйФайл.Имя, 3) = "xls" Тогда
		РасширениеФайла = "xls";
	Иначе
		РасширениеФайла = "xlsx";
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
	Файл.Записать(ИмяФайла);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Попытка
		ТабличныйДокумент.Прочитать(ИмяФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,,, Отказ);
		Возврат;
	КонецПопытки;
	
	ТабДокИсточник.Очистить();
	
	ТабДокИсточник = ТабличныйДокумент;
	
	ЗаполнитьШапкуТабличногоДокументаИсточникаКлиентСервер(
		ТабДокИсточник,
		ПерваяСтрокаДанныхИсточника,
		Объект.ТаблицаРеквизитовПриемника);
	
КонецПроцедуры

&НаКлиенте
Процедура  ОписаниеОповещенияПереходКСтроке(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		ПерейтиКСтроке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРеквизитовПриемника(ТаблицаЗаполнения = Неопределено)
	
	Если ТаблицаЗаполнения = Неопределено Тогда
		ТаблицаЗаполнения = Объект.ТаблицаРеквизитовПриемника;
		ТаблицаЗаполнения.Очистить();
	Иначе
		ТаблицаЗаполнения = Объект.ТаблицаРеквизитовПриемника.Выгрузить().СкопироватьКолонки();
	КонецЕсли;
	СортироватьРеквизиты = Ложь;
	
	Если ТипПриемника = "СправочникНоменклатура" Тогда
		
		ИспользоватьЦеновыеГруппы = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
		
		СкрытыеРеквизиты = Новый Массив;
		СкрытыеРеквизиты.Добавить("ТипНоменклатуры");
		СкрытыеРеквизиты.Добавить("ФайлКартинки");
		СкрытыеРеквизиты.Добавить("Номинал");
		СкрытыеРеквизиты.Добавить("ИспользоватьСерийныеНомера");
		СкрытыеРеквизиты.Добавить("ТипСерийногоНомера");
		СкрытыеРеквизиты.Добавить("ТипСрокаДействия");
		СкрытыеРеквизиты.Добавить("ДатаОкончанияДействия");
		СкрытыеРеквизиты.Добавить("Периодичность");
		СкрытыеРеквизиты.Добавить("КоличествоПериодовДействия");
		
		Если НЕ ИспользоватьАссортимент Тогда
			СкрытыеРеквизиты.Добавить("ТоварнаяКатегория");
		КонецЕсли;
		
		Если НЕ ИспользоватьЦеновыеГруппы Тогда
			СкрытыеРеквизиты.Добавить("ЦеноваяГруппа");
		КонецЕсли;
		
		Если НЕ ИспользоватьУпаковкиНоменклатуры Тогда
			СкрытыеРеквизиты.Добавить("НаборУпаковок");
		КонецЕсли;
		
		МетаданныеСправочника = МетаданныеСправочника("Номенклатура");
		
		ЗагружаемыйРеквизит = ТаблицаЗаполнения.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита = "Код";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = НСтр("ru = 'Код'");
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска = Истина;
		ЗагружаемыйРеквизит.Сортировка = 0;
		ЗагружаемыйРеквизит.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(11));
		ЗагружаемыйРеквизит.ЗначениеПоУмолчанию =
			ЗагружаемыйРеквизит.ТипЗначения.ПривестиЗначение(ЗагружаемыйРеквизит.ЗначениеПоУмолчанию);
		ЗагружаемыйРеквизит.Пометка = Ложь;
		
		ЗагружаемыйРеквизит = ТаблицаЗаполнения.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита = "Наименование";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = НСтр("ru = 'Наименование'");
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска = Истина;
		ЗагружаемыйРеквизит.Сортировка = 2;
		ЗагружаемыйРеквизит.ТипЗначения = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100));
		ЗагружаемыйРеквизит.ЗначениеПоУмолчанию =
			ЗагружаемыйРеквизит.ТипЗначения.ПривестиЗначение(ЗагружаемыйРеквизит.ЗначениеПоУмолчанию);
		ЗагружаемыйРеквизит.Пометка = Истина;
		ЗагружаемыйРеквизит.ОбязательныйДляЗаполнения = Истина;
		ЗагружаемыйРеквизит.ПолеПоиска = Истина;
		
		ЗагружаемыйРеквизит = ТаблицаЗаполнения.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита = "Родитель";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = НСтр("ru = 'Группа'");;
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска = Ложь;
		ЗагружаемыйРеквизит.Сортировка = 3;
		ЗагружаемыйРеквизит.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		ЗагружаемыйРеквизит.ЗначениеПоУмолчанию =
			ЗагружаемыйРеквизит.ТипЗначения.ПривестиЗначение(ЗагружаемыйРеквизит.ЗначениеПоУмолчанию);
		ЗагружаемыйРеквизит.Пометка = Истина;
		
		ЗагружаемыйРеквизит = ТаблицаЗаполнения.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита = "Штрихкод";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = НСтр("ru = 'Штрихкод'");
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска = Истина;
		ЗагружаемыйРеквизит.Сортировка = 3;
		ЗагружаемыйРеквизит.ТипЗначения = Новый ОписаниеТипов("Строка");
		ЗагружаемыйРеквизит.ЗначениеПоУмолчанию =
			ЗагружаемыйРеквизит.ТипЗначения.ПривестиЗначение(ЗагружаемыйРеквизит.ЗначениеПоУмолчанию);
		ЗагружаемыйРеквизит.Пометка = Истина;
		
		Если ИспользоватьХарактеристики Тогда 
			ЗагружаемыйРеквизит = ТаблицаЗаполнения.Добавить();
			ЗагружаемыйРеквизит.ИмяРеквизита = "ХарактеристикаНоменклатуры";
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = НСтр("ru = 'Характеристика номенклатуры'");
			ЗагружаемыйРеквизит.МожетБытьПолемПоиска = Ложь;
			ЗагружаемыйРеквизит.Сортировка = 4;
			ЗагружаемыйРеквизит.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
			ЗагружаемыйРеквизит.ЗначениеПоУмолчанию =
				ЗагружаемыйРеквизит.ТипЗначения.ПривестиЗначение(ЗагружаемыйРеквизит.ЗначениеПоУмолчанию);
			ЗагружаемыйРеквизит.Пометка = Ложь;
		КонецЕсли;
		
		Для Каждого Реквизит Из МетаданныеСправочника.Реквизиты Цикл
			
			Если НЕ Найти(Реквизит.Имя, "Удалить") = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
				Если НЕ СкрытыеРеквизиты.Найти(Реквизит.Имя) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ЗагружаемыйРеквизит = ТаблицаЗаполнения.Добавить();
				ЗагружаемыйРеквизит.ИмяРеквизита = Реквизит.Имя;
				ЗагружаемыйРеквизит.ПредставлениеРеквизита = Реквизит.Представление();
				ЗагружаемыйРеквизит.МожетБытьПолемПоиска = ?(Реквизит.Имя = "Артикул", Истина, Ложь);
				ЗагружаемыйРеквизит.ТипЗначения = МетаданныеСправочника.Реквизиты[Реквизит.Имя].Тип;
				ЗагружаемыйРеквизит.ЗначениеПоУмолчанию = 
					ЗагружаемыйРеквизит.ТипЗначения.ПривестиЗначение(ЗагружаемыйРеквизит.ЗначениеПоУмолчанию);
				ЗагружаемыйРеквизит.ОбязательныйДляЗаполнения = Реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку;
				ЗагружаемыйРеквизит.Сортировка = ?(Реквизит.Имя = "Артикул", 1, 99);
				ЗагружаемыйРеквизит.Пометка = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			ЗагружаемыйРеквизит = ТаблицаЗаполнения.Добавить();
			ЗагружаемыйРеквизит.ИмяРеквизита = "Упаковка";
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = НСтр("ru = 'Упаковка'");
			ЗагружаемыйРеквизит.МожетБытьПолемПоиска = Ложь;
			ЗагружаемыйРеквизит.Сортировка = 101;
			ЗагружаемыйРеквизит.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры");
			ЗагружаемыйРеквизит.ЗначениеПоУмолчанию =
				ЗагружаемыйРеквизит.ТипЗначения.ПривестиЗначение(ЗагружаемыйРеквизит.ЗначениеПоУмолчанию);
			ЗагружаемыйРеквизит.Пометка = Истина;
			
			ЗагружаемыйРеквизит = ТаблицаЗаполнения.Добавить();
			ЗагружаемыйРеквизит.ИмяРеквизита = "КоэффициентУпаковки";
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = НСтр("ru = 'Коэффициент упаковки'");
			ЗагружаемыйРеквизит.МожетБытьПолемПоиска = Ложь;
			ЗагружаемыйРеквизит.Сортировка = 102;
			ЗагружаемыйРеквизит.ТипЗначения = Новый ОписаниеТипов("Число");
			ЗагружаемыйРеквизит.ЗначениеПоУмолчанию =
				ЗагружаемыйРеквизит.ТипЗначения.ПривестиЗначение(ЗагружаемыйРеквизит.ЗначениеПоУмолчанию);
			ЗагружаемыйРеквизит.Пометка = Истина;
			
			ЗагружаемыйРеквизит = ТаблицаЗаполнения.Добавить();
			ЗагружаемыйРеквизит.ИмяРеквизита = "ЕдИзмУпаковки";
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = НСтр("ru = 'Ед. изм. упаковки'");
			ЗагружаемыйРеквизит.МожетБытьПолемПоиска = Ложь;
			ЗагружаемыйРеквизит.Сортировка = 103;
			ЗагружаемыйРеквизит.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.БазовыеЕдиницыИзмерения");
			ЗагружаемыйРеквизит.ЗначениеПоУмолчанию =
				ЗагружаемыйРеквизит.ТипЗначения.ПривестиЗначение(ЗагружаемыйРеквизит.ЗначениеПоУмолчанию);
			ЗагружаемыйРеквизит.Пометка = Истина;
			
		КонецЕсли;
		
		ЗаполнитьТаблицуПриемникаДопРеквизитамиНоменклатуры(ТаблицаЗаполнения);
		
	ИначеЕсли ТипПриемника = "ДокументУстановкаЦен" Тогда
		
		СортироватьРеквизиты = Ложь;
		
		ЗагружаемыйРеквизит = ТаблицаЗаполнения.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита = "Наименование";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = НСтр("ru = 'Наименование номенклатуры'");
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска = Истина;
		ЗагружаемыйРеквизит.ПолеПоиска = Истина;
		ЗагружаемыйРеквизит.ТипЗначения = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100));
		ЗагружаемыйРеквизит.ЗначениеПоУмолчанию =
			ЗагружаемыйРеквизит.ТипЗначения.ПривестиЗначение(ЗагружаемыйРеквизит.ЗначениеПоУмолчанию);
		ЗагружаемыйРеквизит.ОбязательныйДляЗаполнения = Ложь;
		ЗагружаемыйРеквизит.Сортировка = 99;
		ЗагружаемыйРеквизит.Пометка = Истина;
		
		Если ИспользоватьХарактеристики Тогда
			ЗагружаемыйРеквизит = ТаблицаЗаполнения.Добавить();
			ЗагружаемыйРеквизит.ИмяРеквизита = "Характеристика";
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = НСтр("ru = 'Характеристика'");
			ЗагружаемыйРеквизит.МожетБытьПолемПоиска = Ложь;
			ЗагружаемыйРеквизит.ПолеПоиска = Ложь;
			ЗагружаемыйРеквизит.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
			ЗагружаемыйРеквизит.ЗначениеПоУмолчанию =
				ЗагружаемыйРеквизит.ТипЗначения.ПривестиЗначение(ЗагружаемыйРеквизит.ЗначениеПоУмолчанию);
			ЗагружаемыйРеквизит.ОбязательныйДляЗаполнения = Ложь;
			ЗагружаемыйРеквизит.Сортировка = 99;
			ЗагружаемыйРеквизит.Пометка = Истина;
		КонецЕсли;
		
		ЗагружаемыйРеквизит = ТаблицаЗаполнения.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита = "ВидЦены";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = НСтр("ru = 'Вид цены'");
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска = Ложь;
		ЗагружаемыйРеквизит.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ВидыЦен");
		ЗагружаемыйРеквизит.ЗначениеПоУмолчанию = ЗагружаемыйРеквизит.ТипЗначения.ПривестиЗначение(ЗагружаемыйРеквизит.ЗначениеПоУмолчанию);
		ЗагружаемыйРеквизит.ОбязательныйДляЗаполнения = Истина;
		ЗагружаемыйРеквизит.Сортировка = 99;
		ЗагружаемыйРеквизит.Пометка = Истина;
		
		ЗагружаемыйРеквизит = ТаблицаЗаполнения.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита = "Цена";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = НСтр("ru = 'Цена'");
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска = Ложь;
		ЗагружаемыйРеквизит.ПолеПоиска = Ложь;
		ЗагружаемыйРеквизит.ТипЗначения = ОбщегоНазначенияРТКлиентСервер.ОписаниеТиповЧисла(15, 2);
		ЗагружаемыйРеквизит.ЗначениеПоУмолчанию =
			ЗагружаемыйРеквизит.ТипЗначения.ПривестиЗначение(ЗагружаемыйРеквизит.ЗначениеПоУмолчанию);
		ЗагружаемыйРеквизит.ОбязательныйДляЗаполнения = Истина;
		ЗагружаемыйРеквизит.Сортировка = 99;
		ЗагружаемыйРеквизит.Пометка = Истина;
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			ЗагружаемыйРеквизит = ТаблицаЗаполнения.Добавить();
			ЗагружаемыйРеквизит.ИмяРеквизита = "Упаковка";
			ЗагружаемыйРеквизит.ПредставлениеРеквизита = НСтр("ru = 'Упаковка'");
			ЗагружаемыйРеквизит.МожетБытьПолемПоиска = Истина;
			ЗагружаемыйРеквизит.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры");
			ЗагружаемыйРеквизит.ЗначениеПоУмолчанию =
				ЗагружаемыйРеквизит.ТипЗначения.ПривестиЗначение(ЗагружаемыйРеквизит.ЗначениеПоУмолчанию);
			ЗагружаемыйРеквизит.ОбязательныйДляЗаполнения = Ложь;
			ЗагружаемыйРеквизит.Сортировка = 99;
			ЗагружаемыйРеквизит.Пометка = Истина;
		КонецЕсли;
		
		ЗагружаемыйРеквизит = ТаблицаЗаполнения.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита = "Код";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = НСтр("ru = 'Код номенклатуры'");
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска = Истина;
		ЗагружаемыйРеквизит.ПолеПоиска = Истина;
		ЗагружаемыйРеквизит.ТипЗначения = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100));
		ЗагружаемыйРеквизит.ЗначениеПоУмолчанию =
			ЗагружаемыйРеквизит.ТипЗначения.ПривестиЗначение(ЗагружаемыйРеквизит.ЗначениеПоУмолчанию);
		ЗагружаемыйРеквизит.ОбязательныйДляЗаполнения = Ложь;
		ЗагружаемыйРеквизит.Сортировка = 99;
		ЗагружаемыйРеквизит.Пометка = Ложь;
		
		ЗагружаемыйРеквизит = ТаблицаЗаполнения.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита = "Артикул";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = НСтр("ru = 'Артикул'");
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска = Истина;
		ЗагружаемыйРеквизит.ПолеПоиска = Истина;
		ЗагружаемыйРеквизит.ТипЗначения = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100));
		ЗагружаемыйРеквизит.ЗначениеПоУмолчанию =
			ЗагружаемыйРеквизит.ТипЗначения.ПривестиЗначение(ЗагружаемыйРеквизит.ЗначениеПоУмолчанию);
		ЗагружаемыйРеквизит.ОбязательныйДляЗаполнения = Ложь;
		ЗагружаемыйРеквизит.Сортировка = 99;
		ЗагружаемыйРеквизит.Пометка = Ложь;
		
		ЗагружаемыйРеквизит = ТаблицаЗаполнения.Добавить();
		ЗагружаемыйРеквизит.ИмяРеквизита = "Штрихкод";
		ЗагружаемыйРеквизит.ПредставлениеРеквизита = НСтр("ru = 'Штрихкод'");
		ЗагружаемыйРеквизит.ПолеПоиска = Истина;
		ЗагружаемыйРеквизит.МожетБытьПолемПоиска = Истина;
		ЗагружаемыйРеквизит.ТипЗначения = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200));
		ЗагружаемыйРеквизит.ЗначениеПоУмолчанию =
			ЗагружаемыйРеквизит.ТипЗначения.ПривестиЗначение(ЗагружаемыйРеквизит.ЗначениеПоУмолчанию);
		ЗагружаемыйРеквизит.ОбязательныйДляЗаполнения = Ложь;
		ЗагружаемыйРеквизит.Сортировка = 99;
		ЗагружаемыйРеквизит.Пометка = Ложь;
		
	ИначеЕсли ТипПриемника = "" Тогда 
		
	КонецЕсли;
	
	Если СортироватьРеквизиты Тогда
		ТаблицаЗаполнения.Сортировать("Сортировка, ПредставлениеРеквизита");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПриемникаДопРеквизитамиНоменклатуры(ТаблицаЗаполнения = Неопределено)
	
	Если НЕ ИспользоватьДополнительныеРеквизитыИСведения Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗаполнения = ?(ТаблицаЗаполнения = Неопределено, Объект.ТаблицаРеквизитовПриемника, ТаблицаЗаполнения);
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка,
	|	ВидыНоменклатуры.ИспользованиеХарактеристик,
	|	ВидыНоменклатуры.ИспользоватьХарактеристики,
	|	ВидыНоменклатуры.НаборСвойств,
	|	ВидыНоменклатуры.НаборСвойствХарактеристик,
	|	ВидыНоменклатуры.ТипНоменклатуры
	|ПОМЕСТИТЬ ВидыНоменклатуры
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	НЕ ВидыНоменклатуры.ЭтоГруппа
	|	И НЕ ВидыНоменклатуры.ПометкаУдаления
	|	И НЕ ВидыНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	%УсловиеВидаНоменклатуры%
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Ссылка,
	|	ДополнительныеРеквизиты.Свойство,
	|	ДополнительныеРеквизиты.Свойство.ТипЗначения КАК ТипЗначения,
	|	ДополнительныеРеквизиты.Свойство.ЗаполнятьОбязательно КАК ЗаполнятьОбязательно,
	|	1 КАК ДопРеквизитСведение,
	|	1 КАК Сортировка
	|ПОМЕСТИТЬ ДопРеквизитыСведения
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	|	&ЗагружатьДопРеквизитыИСведения
	|	И ДополнительныеРеквизиты.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура)
	|	И НЕ ДополнительныеРеквизиты.Ссылка.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеСведения.Ссылка,
	|	ДополнительныеСведения.Свойство,
	|	ДополнительныеСведения.Свойство.ТипЗначения,
	|	ДополнительныеСведения.Свойство.ЗаполнятьОбязательно,
	|	2,
	|	1 КАК Сортировка
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	&ЗагружатьДопРеквизитыИСведения
	|	И ДополнительныеСведения.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура)
	|	И НЕ ДополнительныеСведения.Ссылка.ЭтоГруппа
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДопРеквизитыСведения.Ссылка КАК НаборСвойств,
	|	ДопРеквизитыСведения.Свойство,
	|	ДопРеквизитыСведения.ЗаполнятьОбязательно КАК ОбязательныйДляЗаполнения,
	|	ДопРеквизитыСведения.ДопРеквизитСведение,
	|	ВидыНоменклатуры.Ссылка КАК ВидНоменклатурыНабора,
	|	ДопРеквизитыСведения.ТипЗначения
	|ИЗ
	|	ДопРеквизитыСведения КАК ДопРеквизитыСведения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО ДопРеквизитыСведения.Ссылка = ВидыНоменклатуры.НаборСвойств
	|ГДЕ НЕ &ТолькоОбщиеДопРеквизитыСведения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДопРеквизитыСведения.Ссылка,
	|	ДопРеквизитыСведения.Свойство,
	|	ДопРеквизитыСведения.ЗаполнятьОбязательно,
	|	ДопРеквизитыСведения.ДопРеквизитСведение,
	|	NULL,
	|	ДопРеквизитыСведения.ТипЗначения
	|ИЗ
	|	ДопРеквизитыСведения КАК ДопРеквизитыСведения
	|ГДЕ
	|	ДопРеквизитыСведения.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие)";
	
	УсловиеВидаНоменклатуры = "";
	Если ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		УсловиеВидаНоменклатуры = "И ВидыНоменклатуры.Ссылка В (&ВидНоменклатуры)";
		Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеВидаНоменклатуры%", УсловиеВидаНоменклатуры);

	Запрос.УстановитьПараметр("ЗагружатьДопРеквизитыИСведения", ЗагружатьДополнительныеРеквизитыИСведенияНоменклатуры);
	Запрос.УстановитьПараметр("ТолькоОбщиеДопРеквизитыСведения", ТолькоОбщиеДопРеквизитыСведения);
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НовРеквизит = ТаблицаЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(НовРеквизит, Выборка);
		НовРеквизит.ИмяРеквизита =
			"ДопРеквизитСведение" + СтрЗаменить(Строка(Выборка.Свойство.УникальныйИдентификатор()), "-", "");
		НовРеквизит.ПредставлениеРеквизита = Выборка.Свойство;
		НовРеквизит.Сортировка = 100;
		НовРеквизит.ЗначениеПоУмолчанию = НовРеквизит.ТипЗначения.ПривестиЗначение(НовРеквизит.ЗначениеПоУмолчанию);
		НовРеквизит.ДопРеквизитНоменлатурыХарактеристики = 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПриемникаДопРеквизитамиХарактеристикНоменклатуры()
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведенияРозница") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка,
	|	ВидыНоменклатуры.ИспользованиеХарактеристик,
	|	ВидыНоменклатуры.ИспользоватьХарактеристики,
	|	ВидыНоменклатуры.НаборСвойств,
	|	ВидыНоменклатуры.НаборСвойствХарактеристик,
	|	ВидыНоменклатуры.ТипНоменклатуры
	|ПОМЕСТИТЬ ВидыНоменклатуры
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	НЕ ВидыНоменклатуры.ЭтоГруппа
	|	И НЕ ВидыНоменклатуры.ПометкаУдаления
	|	И НЕ ВидыНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	%УсловиеВидаНоменклатуры%
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Ссылка,
	|	ДополнительныеРеквизиты.Свойство,
	|	ДополнительныеРеквизиты.Свойство.ТипЗначения КАК ТипЗначения,
	|	ДополнительныеРеквизиты.Свойство.ЗаполнятьОбязательно КАК ЗаполнятьОбязательно,
	|	1 КАК ДопРеквизитСведение,
	|	2 КАК Сортировка
	|ПОМЕСТИТЬ ДопРеквизитыСведения
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	|	&ЗагружатьДопРеквизитыИСведения
	|	И ДополнительныеРеквизиты.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры)
	|	И НЕ ДополнительныеРеквизиты.Ссылка.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеСведения.Ссылка,
	|	ДополнительныеСведения.Свойство,
	|	ДополнительныеСведения.Свойство.ТипЗначения,
	|	ДополнительныеСведения.Свойство.ЗаполнятьОбязательно,
	|	2,
	|	2 КАК Сортировка
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	&ЗагружатьДопРеквизитыИСведения
	|	И ДополнительныеСведения.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры)
	|	И НЕ ДополнительныеСведения.Ссылка.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДопРеквизитыСведения.Ссылка КАК НаборСвойств,
	|	ДопРеквизитыСведения.Свойство,
	|	ДопРеквизитыСведения.ЗаполнятьОбязательно КАК ОбязательныйДляЗаполнения,
	|	ДопРеквизитыСведения.ДопРеквизитСведение,
	|	ВидыНоменклатуры.Ссылка КАК ВидНоменклатурыНабора,
	|	ДопРеквизитыСведения.ТипЗначения
	|ИЗ
	|	ДопРеквизитыСведения КАК ДопРеквизитыСведения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО ДопРеквизитыСведения.Ссылка = ВидыНоменклатуры.НаборСвойств
	|ГДЕ НЕ &ТолькоОбщиеДопРеквизитыСведения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДопРеквизитыСведения.Ссылка,
	|	ДопРеквизитыСведения.Свойство,
	|	ДопРеквизитыСведения.ЗаполнятьОбязательно,
	|	ДопРеквизитыСведения.ДопРеквизитСведение,
	|	NULL,
	|	ДопРеквизитыСведения.ТипЗначения
	|ИЗ
	|	ДопРеквизитыСведения КАК ДопРеквизитыСведения
	|ГДЕ
	|	ДопРеквизитыСведения.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие)";
	
	УсловиеВидаНоменклатуры = "";
	Если ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		УсловиеВидаНоменклатуры = "И ВидыНоменклатуры.Ссылка В (&ВидНоменклатуры)";
		Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеВидаНоменклатуры%", УсловиеВидаНоменклатуры);

	Запрос.УстановитьПараметр("ЗагружатьДопРеквизитыИСведения", ЗагружатьДополнительныеРеквизитыИСведенияХарактеристик);
	Запрос.УстановитьПараметр("ТолькоОбщиеДопРеквизитыСведения", ТолькоОбщиеДопРеквизитыСведения);
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НовРеквизит = Объект.ТаблицаРеквизитовПриемника.Добавить();
		ЗаполнитьЗначенияСвойств(НовРеквизит, Выборка);
		НовРеквизит.ИмяРеквизита =
			"ДопРеквизитСведение" + СтрЗаменить(Строка(Выборка.Свойство.УникальныйИдентификатор()), "-", "");
		НовРеквизит.ПредставлениеРеквизита = Выборка.Свойство;
		НовРеквизит.Сортировка = 100;
		НовРеквизит.ЗначениеПоУмолчанию = НовРеквизит.ТипЗначения.ПривестиЗначение(НовРеквизит.ЗначениеПоУмолчанию);
		НовРеквизит.ДопРеквизитНоменлатурыХарактеристики = 2;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНастроек()
	
	Если НЕ ИзмененыНастройки Тогда
		ИзмененыНастройки = Истина;
		Элементы.ГруппаПриемник.Заголовок = Элементы.ГруппаПриемник.Заголовок + НСтр("ru = '*'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьОтбораВидаНоменклатуры()
	
	Если ТолькоОбщиеДопРеквизитыСведения И ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		ВидНоменклатуры = ПредопределенноеЗначение("Справочник.ВидыНоменклатуры.ПустаяСсылка");
	КонецЕсли;
	
	Элементы.ВидНоменклатуры.ТолькоПросмотр = ТолькоОбщиеДопРеквизитыСведения;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДопРеквизитыВТаблицуРеквизитовПриемника()
	
	ДопРеквизитыНоменклатуры = Объект.ТаблицаРеквизитовПриемника.НайтиСтроки(
		Новый Структура ("ДопРеквизитНоменлатурыХарактеристики", 1));
	
	СписокУдаляемыхСтрок = Новый СписокЗначений;
	
	Для Каждого ЭлементМассива ИЗ ДопРеквизитыНоменклатуры Цикл 
		СписокУдаляемыхСтрок.Добавить(ЭлементМассива.НомерСтроки);
	КонецЦикла;
	
	СписокУдаляемыхСтрок.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	Для Каждого ЭлементСписка ИЗ СписокУдаляемыхСтрок Цикл 
		Объект.ТаблицаРеквизитовПриемника.Удалить(ЭлементСписка.Значение - 1);
	КонецЦикла;
	
	Если ЗагружатьДополнительныеРеквизитыИСведенияНоменклатуры Тогда
		ЗаполнитьТаблицуПриемникаДопРеквизитамиНоменклатуры();
		
		ДобавленныеРеквизитыНоменклатуры = Объект.ТаблицаРеквизитовПриемника.НайтиСтроки(
			Новый Структура ("ДопРеквизитНоменлатурыХарактеристики", 1));
		
		Для Каждого ДобавленныйРеквизит Из ДобавленныеРеквизитыНоменклатуры Цикл
			
			Для Каждого УдаленныйДопРеквизит Из ДопРеквизитыНоменклатуры Цикл
				Если ДобавленныйРеквизит.ИмяРеквизита = УдаленныйДопРеквизит.ИмяРеквизита Тогда
					ЗаполнитьЗначенияСвойств(ДобавленныйРеквизит, УдаленныйДопРеквизит, "Пометка, ЗначениеПоУмолчанию");
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	ДопРеквизитыХарактеристик = Объект.ТаблицаРеквизитовПриемника.НайтиСтроки(
		Новый Структура ("ДопРеквизитНоменлатурыХарактеристики", 2));
	
	СписокУдаляемыхСтрок = Новый СписокЗначений;
	
	Для Каждого ЭлементМассива ИЗ ДопРеквизитыХарактеристик Цикл
		СписокУдаляемыхСтрок.Добавить(ЭлементМассива.НомерСтроки);
	КонецЦикла;
	
	СписокУдаляемыхСтрок.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	Для Каждого ЭлементСписка ИЗ СписокУдаляемыхСтрок Цикл 
		Объект.ТаблицаРеквизитовПриемника.Удалить(ЭлементСписка.Значение - 1);
	КонецЦикла;
	
	Если ЗагружатьДополнительныеРеквизитыИСведенияХарактеристик Тогда
		ЗаполнитьТаблицуПриемникаДопРеквизитамиХарактеристикНоменклатуры();
		
		ДобавленныеРеквизитыХарактеристик = Объект.ТаблицаРеквизитовПриемника.НайтиСтроки(
			Новый Структура ("ДопРеквизитНоменлатурыХарактеристики", 2));
		
		Для Каждого ДобавленныйРеквизит Из ДобавленныеРеквизитыХарактеристик Цикл
			
			Для Каждого УдаленныйДопРеквизит Из ДопРеквизитыХарактеристик Цикл
				Если ДобавленныйРеквизит.ИмяРеквизита = УдаленныйДопРеквизит.ИмяРеквизита Тогда
					ЗаполнитьЗначенияСвойств(ДобавленныйРеквизит, УдаленныйДопРеквизит, "Пометка, ЗначениеПоУмолчанию");
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьШапкуТабличногоДокументаИсточникаКлиентСервер(
		ТабДокИсточник,
		ПерваяСтрокаДанныхИсточника,
		Объект.ТаблицаРеквизитовПриемника);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьШапкуТабличногоДокументаИсточникаКлиентСервер(ТабличныйДокумент, ПерваяСтрокаДанныхИсточника, ТаблицаРеквизитовПриемника)
	
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	Область = ТабличныйДокумент.Область("R1");
	Область.Очистить();
	Область.Защита = Истина;
	
	Область = ТабличныйДокумент.Область("T");
	Область.ЦветТекста = WebЦвета.Черный;
	
	Если ПерваяСтрокаДанныхИсточника <> 2 Тогда
		Область = ТабличныйДокумент.Область(2,, ПерваяСтрокаДанныхИсточника -1);
		Область.ЦветТекста = WebЦвета.СветлоСерый;
	КонецЕсли;
	
	Для каждого Реквизит Из ТаблицаРеквизитовПриемника Цикл
		
		Область = ТабличныйДокумент.Область("R1C" + Реквизит.НомерСтроки);
		Область.РастягиватьПоГоризонтали = Истина;
		Область.Текст = Реквизит.ПредставлениеРеквизита;
		Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
		#Если Не ВебКлиент Тогда
			Область.Обвести(Линия, Линия, Линия, Линия);
		#КонецЕсли
		Область.Защита = Истина;
		
		Область = ТабличныйДокумент.Область(1, Реквизит.НомерСтроки, ТабличныйДокумент.ВысотаТаблицы, Реквизит.НомерСтроки);
		Если НЕ Реквизит.Пометка Тогда
			Область.ЦветТекста = WebЦвета.СветлоСерый;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНаСервере(ПорцияЗагрузки = Неопределено)
	
	Если ТипПриемника = "ДокументУстановкаЦен" Тогда
		ЗагрузитьУстановкуЦен();
	Иначе
		НижняяГраница = ПорцияЗагрузки.НижняяГраница;
		ВерхняяГраница =  ПорцияЗагрузки.ВерхняяГраница;
		ПерваяЗагрузка = НижняяГраница = 1;
		
		СтруктураТаблицаИсточник = ПолучитьИзВременногоХранилища(АдресСтруктурыТаблицыИсточник);
		
		ТаблицаИсточник = СтруктураТаблицаИсточник.ТаблицаИсточник;
		ТаблицаНайденныхОбъектов = СтруктураТаблицаИсточник.ТаблицаНайденныхОбъектов;
		СтруктураПоискаОбъектов = СтруктураТаблицаИсточник.СтруктураПоискаОбъектов;
		ПоискПоШтрихкоду = СтруктураТаблицаИсточник.ПоискПоШтрихкоду;
		
		Если ПерваяЗагрузка Тогда
			КэшСозданныхДопРеквизитов.Очистить();
		КонецЕсли;
		ЗначенияПоУмолчанию = Новый Структура;
		
		Для Каждого Реквизит Из Объект.ТаблицаРеквизитовПриемника Цикл
			Если ЗначениеЗаполнено(Реквизит.ЗначениеПоУмолчанию) И Реквизит.ДопРеквизитСведение = 0 Тогда
				ЗначенияПоУмолчанию.Вставить(Реквизит.ИмяРеквизита, Реквизит.ЗначениеПоУмолчанию);
			КонецЕсли;
		КонецЦикла;
		
		Пока НижняяГраница <= ВерхняяГраница Цикл
			
			СтрокаИсточника = ТаблицаИсточник[НижняяГраница-1];
			
			Если ТипПриемника = "СправочникНоменклатура" Тогда
				
				ЗаполнитьЗначенияСвойств(СтруктураПоискаОбъектов,СтрокаИсточника);
				
				НайденныеСтроки = ТаблицаНайденныхОбъектов.НайтиСтроки(СтруктураПоискаОбъектов);
				Если НайденныеСтроки.Количество() > 0 Тогда
					НоменклатураОбъект = НайденныеСтроки[0].Ссылка.ПолучитьОбъект();
				Иначе
					НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НоменклатураОбъект, СтрокаИсточника);
				
				Для Каждого ЗначениеПоУмолчанию Из ЗначенияПоУмолчанию Цикл
					Если Не ЗначениеЗаполнено(НоменклатураОбъект[ЗначениеПоУмолчанию.Ключ]) Тогда
						НоменклатураОбъект[ЗначениеПоУмолчанию.Ключ] = ЗначениеПоУмолчанию.Значение;
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ ЗначениеЗаполнено(НоменклатураОбъект.НаименованиеПолное) Тогда
					НоменклатураОбъект.НаименованиеПолное = НоменклатураОбъект.Наименование;
				КонецЕсли;
				
			КонецЕсли;
			
			Попытка
				НоменклатураОбъект.Записать();
				ИсторияРаботыПользователя.Добавить(НоменклатураОбъект.Ссылка);
				
			Исключение
				ОписаниеОшибки = СтрШаблон(НСтр("ru = 'При записи номенклатуры: %1, строка %2 произошла ошибка:
					|%3'"),
					НоменклатураОбъект.Наименование,
					НижняяГраница,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			КонецПопытки;
			
			Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			Если ИспользоватьХарактеристики И НЕ ТаблицаИсточник.Колонки.Найти("ХарактеристикаНоменклатуры") = Неопределено Тогда
				ПредставлениеХарактеристики = СтрокаИсточника.ХарактеристикаНоменклатурыПредставление;
				
				Если НЕ ЗначениеЗаполнено(НоменклатураОбъект.ВидНоменклатуры) И НЕ ПустаяСтрока(ПредставлениеХарактеристики) Тогда
					
					ТекстСообщения = НСтр("ru = 'Для номенклатуры не определен Вид номенклатуры. Загрузка характеристики не возможна'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
				ИначеЕсли ЗначениеЗаполнено(НоменклатураОбъект.ВидНоменклатуры)
					И НЕ ПустаяСтрока(ПредставлениеХарактеристики)
					И НЕ НоменклатураОбъект.ВидНоменклатуры.ИспользованиеХарактеристик =
						Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать Тогда
					
					ИндивидуальныеДляНоменклатуры = Ложь;
					Если НоменклатураОбъект.ВидНоменклатуры.ИспользованиеХарактеристик =
						Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры Тогда
						
						ИндивидуальныеДляНоменклатуры = Истина;
					КонецЕсли;
					
					НайденнаяХарактеристика = Неопределено;
					Владелец = ?(ИндивидуальныеДляНоменклатуры, НоменклатураОбъект.Ссылка, НоменклатураОбъект.ВидНоменклатуры);
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	ХарактеристикиНоменклатуры.Ссылка
					|ИЗ
					|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
					|ГДЕ
					|	ХарактеристикиНоменклатуры.Владелец = &Владелец
					|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
					|	И ХарактеристикиНоменклатуры.Наименование = &Наименование";
					
					Запрос.УстановитьПараметр("Владелец", Владелец);
					Запрос.УстановитьПараметр("Наименование", ПредставлениеХарактеристики);
					
					Результат = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = Результат.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						НайденнаяХарактеристика = ВыборкаДетальныеЗаписи.Ссылка;
					КонецЦикла;
					
					Если НайденнаяХарактеристика = Неопределено Тогда
						Характеристика = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
						Характеристика.Наименование = ПредставлениеХарактеристики;
						Характеристика.Владелец = Владелец;
						
						Попытка
							Характеристика.Записать();
							Характеристика = Характеристика.Ссылка;
							ИсторияРаботыПользователя.Добавить(Характеристика.Ссылка);
						Исключение
							
							ОписаниеОшибки = СтрШаблон(НСтр("ru = 'При записи характеристики: %1, строка %2 произошла ошибка:
								|%3'"),
								Характеристика.Наименование,
								НижняяГраница,
								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
							
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
							
						КонецПопытки;
						
					Иначе
						Характеристика = НайденнаяХарактеристика;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
			Если ИспользоватьУпаковкиНоменклатуры И НЕ ТаблицаИсточник.Колонки.Найти("УпаковкаПредставление") = Неопределено Тогда
				ПредставлениеУпаковки = СтрокаИсточника.УпаковкаПредставление;
				
				Если НЕ ЗначениеЗаполнено(НоменклатураОбъект.ВидНоменклатуры) И НЕ ПустаяСтрока(ПредставлениеУпаковки) Тогда
					
					ТекстСообщения = НСтр("ru = 'Для номенклатуры не определен Вид номенклатуры. Загрузка упаковки не возможна'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
				ИначеЕсли ЗначениеЗаполнено(НоменклатураОбъект.ВидНоменклатуры) И НЕ ПустаяСтрока(ПредставлениеУпаковки)
					И ЗначениеЗаполнено(НоменклатураОбъект.НаборУпаковок) Тогда
					
					ИндивидуальныеДляНоменклатуры = Ложь;
					Если НоменклатураОбъект.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
						ИндивидуальныеДляНоменклатуры = Истина;
					КонецЕсли;
					
					НайденнаяУпаковка = Неопределено;
					Владелец = ?(ИндивидуальныеДляНоменклатуры, НоменклатураОбъект.Ссылка, НоменклатураОбъект.НаборУпаковок);
					
					ЕстьКоэффициент = НЕ ТаблицаИсточник.Колонки.Найти("КоэффициентУпаковки") = Неопределено;
					ЕстьЕдИзмУпаковки = НЕ ТаблицаИсточник.Колонки.Найти("ЕдИзмУпаковки") = Неопределено;
					
					
					Запрос = Новый Запрос;
					ТекстЗапроса = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	УпаковкиНоменклатуры.Ссылка
					|ИЗ
					|	Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
					|ГДЕ
					|	УпаковкиНоменклатуры.Владелец = &Владелец
					|	И УпаковкиНоменклатуры.Наименование = &Наименование
					|	И НЕ УпаковкиНоменклатуры.ПометкаУдаления
					|	%УсловиеКоэффициент%
					|	%УсловиеЕдиницаИзмерения%
					|";
					
					УсловиеКоэффициент = ?(ЕстьКоэффициент, "И УпаковкиНоменклатуры.Коэффициент = &Коэффициент", "");
					ТекстЗапроса = СтрЗаменить( ТекстЗапроса, "%УсловиеКоэффициент%", УсловиеКоэффициент);
					
					УсловиеЕдиницаИзмерения = ?(ЕстьЕдИзмУпаковки, "И УпаковкиНоменклатуры.ЕдиницаИзмерения = &ЕдиницаИзмерения", "");
					ТекстЗапроса = СтрЗаменить( ТекстЗапроса, "%УсловиеЕдиницаИзмерения%", УсловиеЕдиницаИзмерения);
					
					Запрос.УстановитьПараметр("Владелец", Владелец);
					
					Если ЕстьКоэффициент Тогда
						Запрос.УстановитьПараметр("Коэффициент", СтрокаИсточника.КоэффициентУпаковки);
					КонецЕсли;
					
					Если ЕстьЕдИзмУпаковки Тогда
						Запрос.УстановитьПараметр("ЕдиницаИзмерения", СтрокаИсточника.ЕдИзмУпаковки);
					КонецЕсли;
					
					Запрос.УстановитьПараметр("Наименование", ПредставлениеУпаковки);
					Запрос.Текст = ТекстЗапроса;
					Результат = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = Результат.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						НайденнаяУпаковка = ВыборкаДетальныеЗаписи.Ссылка;
					КонецЦикла;
					
					Если НайденнаяУпаковка = Неопределено Тогда
						Упаковка = Справочники.УпаковкиНоменклатуры.СоздатьЭлемент();
						Упаковка.Наименование = ПредставлениеУпаковки;
						Упаковка.Владелец = Владелец;
						
						Если ЕстьКоэффициент Тогда
							Упаковка.Коэффициент = СтрокаИсточника.КоэффициентУпаковки;
						КонецЕсли;
						
						Если ЕстьЕдИзмУпаковки Тогда
							Упаковка.ЕдиницаИзмерения = СтрокаИсточника.ЕдИзмУпаковки;
						КонецЕсли;
						
						Попытка
							Упаковка.Записать();
							Упаковка = Упаковка.Ссылка;
							ИсторияРаботыПользователя.Добавить(Упаковка.Ссылка);
						Исключение
							ОписаниеОшибки = СтрШаблон(НСтр("ru = 'При записи упаковки: %1, строка %2 произошла ошибка:
								|%3'"),
								Упаковка.Наименование,
								НижняяГраница,
								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
							
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
						КонецПопытки;
						
					Иначе
						Упаковка = НайденнаяУпаковка;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Штрихкод = "";
			Если НЕ ТаблицаИсточник.Колонки.Найти("ШтрихкодПредставление") = Неопределено Тогда
				Штрихкод = СтрокаИсточника.ШтрихкодПредставление;
				
				Если НЕ ПустаяСтрока(Штрихкод) И СтрокаИсточника.Штрихкод = "" Тогда
					
					ОписаниеОшибкиШК = "";
					
					Если НЕ ПодключаемоеоборудованиеРТ.УстановитьШтрихкод(
						СокрЛП(Штрихкод),
						НоменклатураОбъект.Ссылка,
						Характеристика,
						Упаковка,
						ОписаниеОшибкиШК) Тогда
					
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибкиШК);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			НовЭлемент = ТаблицаНайденныхОбъектов.Добавить();
			ЗаполнитьЗначенияСвойств(НовЭлемент, НоменклатураОбъект);
			
			Если ПоискПоШтрихкоду Тогда
				НовЭлемент.ШтрихКод = Штрихкод;
			КонецЕсли;
			
			
			НужноПерезаписатьНоменклатуру = Ложь;
			НужноПерезаписатьХарактеристику = Ложь;
			Если ЗагружатьДополнительныеРеквизитыИСведенияНоменклатуры Тогда
				
				ДопРеквизитыНоменклатуры = Объект.ТаблицаРеквизитовПриемника.НайтиСтроки(
					Новый Структура ("ДопРеквизитНоменлатурыХарактеристики", 1));
				
				Для Каждого ДопРеквизит ИЗ ДопРеквизитыНоменклатуры Цикл
					
					Если НЕ (ДопРеквизит.Пометка ИЛИ ЗначениеЗаполнено(ДопРеквизит.ЗначениеПоУмолчанию))
						ИЛИ НЕ(НоменклатураОбъект.ВидНоменклатуры = ДопРеквизит.ВидНоменклатурыНабора
							ИЛИ НЕ ЗначениеЗаполнено(ДопРеквизит.ВидНоменклатурыНабора))
						ИЛИ ДопРеквизит.ТипЗначения.Типы().Количество() > 1 Тогда
						Продолжить;
					КонецЕсли;
					
					ДобавляемыйДопРеквизит = Неопределено;
					
					Если НЕ ДопРеквизит.Пометка Тогда
						ЗначениеДопРеквизита = ДопРеквизит.ЗначениеПоУмолчанию;
					Иначе
						ЗначениеДопРеквизита = СтрокаИсточника[ДопРеквизит.ИмяРеквизита];
						ПредставлениеДопРеквизита = СтрокаИсточника[ДопРеквизит.ИмяРеквизита + "Представление"];
						
						Если ПустаяСтрока(ПредставлениеДопРеквизита) Тогда
							ЗначениеДопРеквизита =
								?(ЗначениеЗаполнено(ЗначениеДопРеквизита), ЗначениеДопРеквизита, ДопРеквизит.ЗначениеПоУмолчанию);
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ЗначениеДопРеквизита) Тогда
						
						ДобавляемыйДопРеквизит = ЗначениеДопРеквизита;
						
					ИначеЕсли НЕ ЗначениеЗаполнено(ЗначениеДопРеквизита) И НЕ ПустаяСтрока(ПредставлениеДопРеквизита) Тогда
						
						Если НЕ ДопРеквизит.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда
							Продолжить;
						КонецЕсли;
						
						НайденноеЗначение = КэшСозданныхДопРеквизитов.НайтиСтроки(
							Новый Структура("Представление, Свойство", ПредставлениеДопРеквизита, ДопРеквизит.Свойство));
						
						Если НайденноеЗначение.Количество() > 1 Тогда
							
							ДобавляемыйДопРеквизит = НайденноеЗначение[0].Значение;
							
						Иначе
							
							НовоеЗначениеСвойства = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
							НовоеЗначениеСвойства.Владелец = ДопРеквизит.Свойство;
							НовоеЗначениеСвойства.Наименование = ПредставлениеДопРеквизита;
							
							Попытка
								НовоеЗначениеСвойства.Записать();
								ИсторияРаботыПользователя.Добавить(НовоеЗначениеСвойства.Ссылка);
								ДобавляемыйДопРеквизит = НовоеЗначениеСвойства.Ссылка;
								
								Кэш = КэшСозданныхДопРеквизитов.Добавить();
								Кэш.Представление = ПредставлениеДопРеквизита;
								Кэш.Свойство = ДопРеквизит.Свойство;
								Кэш.Значение = НовоеЗначениеСвойства.Ссылка;
								
							Исключение
								
								ОписаниеОшибки = СтрШаблон(НСтр("ru = 'При записи значения свойства: %1, строка %2 произошла ошибка:
									|%3'"),
									ПредставлениеДопРеквизита,
									НижняяГраница,
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
								
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
								
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
					
					Если ДобавляемыйДопРеквизит = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Если ДопРеквизит.ДопРеквизитСведение = 1 Тогда
						
						НайденноеСвойство = НоменклатураОбъект.ДополнительныеРеквизиты.Найти(ДопРеквизит.Свойство, "Свойство");
						
						Если НайденноеСвойство = Неопределено Тогда
							НовыйДопРеквизит = НоменклатураОбъект.ДополнительныеРеквизиты.Добавить();
							НовыйДопРеквизит.Значение = ДобавляемыйДопРеквизит;
							НовыйДопРеквизит.Свойство = ДопРеквизит.Свойство;
							
							НужноПерезаписатьНоменклатуру = Истина;
						Иначе
							
							Если НЕ НайденноеСвойство.Значение = ДобавляемыйДопРеквизит Тогда 
								НайденноеСвойство.Значение = ДобавляемыйДопРеквизит;
								НужноПерезаписатьНоменклатуру = Истина;
							КонецЕсли;
								
						КонецЕсли;
						
					ИначеЕсли ДопРеквизит.ДопРеквизитСведение = 2 Тогда
						
						МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
						МенеджерЗаписи.Значение = ДобавляемыйДопРеквизит;
						МенеджерЗаписи.Свойство = ДопРеквизит.Свойство;
						МенеджерЗаписи.Объект = НоменклатураОбъект.Ссылка;
						
						Попытка
							МенеджерЗаписи.Записать();
						Исключение
							
							ОписаниеОшибки = СтрШаблон(НСтр("ru = 'При записи дополнительного реквизита: %1, строка %2 произошла ошибка:
								|%3'"),
								ПредставлениеДопРеквизита,
								НижняяГраница,
								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
							
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
							
						КонецПопытки;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ЗагружатьДополнительныеРеквизитыИСведенияХарактеристик И ЗначениеЗаполнено(Характеристика) Тогда
				
				ДопРеквизитыХарактеристик = Объект.ТаблицаРеквизитовПриемника.НайтиСтроки(
					Новый Структура ("ДопРеквизитНоменлатурыХарактеристики", 2));
				
				Для Каждого ДопРеквизит ИЗ ДопРеквизитыХарактеристик Цикл
					
					Если НЕ(ДопРеквизит.Пометка ИЛИ ЗначениеЗаполнено(ДопРеквизит.ЗначениеПоУмолчанию))
						ИЛИ НЕ(НоменклатураОбъект.ВидНоменклатуры = ДопРеквизит.ВидНоменклатурыНабора
							ИЛИ НЕ ЗначениеЗаполнено(ДопРеквизит.ВидНоменклатурыНабора))
						ИЛИ ДопРеквизит.ТипЗначения.Типы().Количество() > 1 Тогда
						
						Продолжить;
					КонецЕсли;
					
					ДобавляемыйДопРеквизит = Неопределено;
					
					Если НЕ ДопРеквизит.Пометка Тогда
						ЗначениеДопРеквизита = ДопРеквизит.ЗначениеПоУмолчанию;
					Иначе
						ЗначениеДопРеквизита = СтрокаИсточника[ДопРеквизит.ИмяРеквизита];
						ПредставлениеДопРеквизита = СтрокаИсточника[ДопРеквизит.ИмяРеквизита + "Представление"];
						
						Если ПустаяСтрока(ПредставлениеДопРеквизита) Тогда
							ЗначениеДопРеквизита =
								?(ЗначениеЗаполнено(ЗначениеДопРеквизита), ЗначениеДопРеквизита, ДопРеквизит.ЗначениеПоУмолчанию);
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ЗначениеДопРеквизита) Тогда
						
						ДобавляемыйДопРеквизит = ЗначениеДопРеквизита;
						
					ИначеЕсли НЕ ЗначениеЗаполнено(ЗначениеДопРеквизита) И НЕ ПустаяСтрока(ПредставлениеДопРеквизита) Тогда
						
						Если НЕ ДопРеквизит.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда
							Продолжить;
						КонецЕсли;
						
						НайденноеЗначение = КэшСозданныхДопРеквизитов.НайтиСтроки(
							Новый Структура("Представление, Свойство", ПредставлениеДопРеквизита, ДопРеквизит.Свойство));
						
						Если НайденноеЗначение.Количество() > 1 Тогда
							
							ДобавляемыйДопРеквизит = НайденноеЗначение[0].Значение;
							
						Иначе
							
							НовоеЗначениеСвойства = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
							НовоеЗначениеСвойства.Владелец = ДопРеквизит.Свойство;
							НовоеЗначениеСвойства.Наименование = ПредставлениеДопРеквизита;
							
							Попытка
								НовоеЗначениеСвойства.Записать();
								ИсторияРаботыПользователя.Добавить(НовоеЗначениеСвойства.Ссылка);
								ДобавляемыйДопРеквизит = НовоеЗначениеСвойства.Ссылка;
								
								Кэш = КэшСозданныхДопРеквизитов.Добавить();
								Кэш.Представление = ПредставлениеДопРеквизита;
								Кэш.Свойство = ДопРеквизит.Свойство;
								Кэш.Значение = НовоеЗначениеСвойства.Ссылка;
								
							Исключение
								
								ОписаниеОшибки = СтрШаблон(НСтр("ru = 'При записи значения свойства: %1, строка %2 произошла ошибка:
									|%3'"),
									ПредставлениеДопРеквизита,
									НижняяГраница,
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
							
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
					
					Если ДобавляемыйДопРеквизит = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Если ДопРеквизит.ДопРеквизитСведение = 1 Тогда
						
						НайденноеСвойство = Характеристика.ДополнительныеРеквизиты.Найти(ДопРеквизит.Свойство, "Свойство");
						
						Если НайденноеСвойство = Неопределено Тогда
							ХарактеристикаОбъект = Характеристика.ПолучитьОбъект();
							НовыйДопРеквизит = НоменклатураОбъект.ДополнительныеРеквизиты.Добавить();
							НовыйДопРеквизит.Значение = ДобавляемыйДопРеквизит;
							НовыйДопРеквизит.Свойство = ДопРеквизит.Свойство;
							
							НужноПерезаписатьХарактеристику = Истина;
						Иначе
							Если НЕ НайденноеСвойство.Значение = ДобавляемыйДопРеквизит Тогда 
								НайденноеСвойство.Значение = ДобавляемыйДопРеквизит;
								НужноПерезаписатьНоменклатуру = Истина;
							КонецЕсли;
						КонецЕсли;
						
					ИначеЕсли ДопРеквизит.ДопРеквизитСведение = 2 Тогда
						
						МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
						МенеджерЗаписи.Значение = ДобавляемыйДопРеквизит;
						МенеджерЗаписи.Свойство = ДопРеквизит.Свойство;
						МенеджерЗаписи.Объект = Характеристика;
						
						Попытка
							МенеджерЗаписи.Записать();
						Исключение
							ОписаниеОшибки = СтрШаблон(НСтр("ru = 'При записи дополнительного реквизита: %1, строка %2 произошла ошибка:
								|%3'"),
								ПредставлениеДопРеквизита,
								НижняяГраница,
								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
							
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
							
						КонецПопытки;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НужноПерезаписатьНоменклатуру Тогда
				Попытка
					НоменклатураОбъект.Записать();
					ИсторияРаботыПользователя.Добавить(НоменклатураОбъект.Ссылка);
					
				Исключение
					
					ОписаниеОшибки = СтрШаблон(НСтр("ru = 'При записи номенклатуры: %1, строка %2 произошла ошибка:
						|%3'"),
						НоменклатураОбъект.Наименование,
						НижняяГраница,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
							
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
					
				КонецПопытки;
			КонецЕсли;
			
			Если НужноПерезаписатьХарактеристику Тогда
				Попытка
					ХарактеристикаОбъект.Записать();
					ИсторияРаботыПользователя.Добавить(Характеристика);
					
				Исключение
					
					ОписаниеОшибки = СтрШаблон(НСтр("ru = 'При записи характеристики: %1, строка %2 произошла ошибка:
						|%3'"),
						ХарактеристикаОбъект.Наименование,
						НижняяГраница,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
							
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
					
				КонецПопытки;
			КонецЕсли;
			
			НижняяГраница = НижняяГраница + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоискСуществующихОбъектов(ТаблицаПоиска, СтрокиПоиска, ПоискПоШтрихкоду, МассивШтрихКодов)
		
		Если ПоискПоШтрихкоду И СтрокиПоиска.Количество() = 0 Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	Штрихкоды.Владелец КАК Ссылка,
			|	Штрихкоды.Владелец КАК Номенклатура,
			|	Штрихкоды.Характеристика,
			|	Штрихкоды.ТипШтрихкода,
			|	Штрихкоды.Упаковка,
			|	Штрихкоды.Штрихкод
			|ИЗ
			|	РегистрСведений.Штрихкоды КАК Штрихкоды
			|ГДЕ
			|	Штрихкоды.Владелец ССЫЛКА Справочник.Номенклатура
			|	И Штрихкоды.Штрихкод В(&Штрихкод)";
			
		ИначеЕсли ПоискПоШтрихкоду И СтрокиПоиска.Количество() > 0 Тогда
			
			ТекстЗапроса = "ВЫБРАТЬ
			|%ПоляПоиска%
			|ПОМЕСТИТЬ Таблица
			|ИЗ &ТаблицаПоиска КАК Таблица;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Штрихкоды.Владелец КАК Номенклатура,
			|	Штрихкоды.Характеристика,
			|	Штрихкоды.ТипШтрихкода,
			|	Штрихкоды.Упаковка,
			|	Штрихкоды.Штрихкод,
			|	Штрихкоды.Владелец.Код КАК Код,
			|	Штрихкоды.Владелец.Наименование КАК Наименование,
			|	Штрихкоды.Владелец.Артикул КАК Артикул
			|ПОМЕСТИТЬ НоменклатураПоШтрихкоду
			|ИЗ
			|	РегистрСведений.Штрихкоды КАК Штрихкоды
			|ГДЕ
			|	Штрихкоды.Владелец ССЫЛКА Справочник.Номенклатура
			|	И Штрихкоды.Штрихкод В(&Штрихкод)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НоменклатураПоШтрихкоду.Номенклатура КАК Ссылка,
			|	НоменклатураПоШтрихкоду.Характеристика,
			|	НоменклатураПоШтрихкоду.ТипШтрихкода,
			|	НоменклатураПоШтрихкоду.Упаковка,
			|	НоменклатураПоШтрихкоду.Штрихкод,
			|	%ПоляПоискаПоШтрихкоду%
			|ИЗ
			|	НоменклатураПоШтрихкоду КАК НоменклатураПоШтрихкоду
			|ГДЕ (%УсловиеГде1%) В (Выбрать Различные %УсловиеГде2% Из Таблица КАК Таблица)";
			
			ПоляПоиска = "";
			УсловиеГде1 = "";
			УсловиеГде2 = "";
			ПоляПоискаПоШтрихкоду = "";
			
			Для Каждого СтрокаПоиска ИЗ СтрокиПоиска Цикл
				Если СтрокаПоиска.ИмяРеквизита = "Штрихкод" Тогда
					Продолжить;
				КонецЕсли;
				
				ПоляПоиска = ПоляПоиска + ?(ПустаяСтрока(ПоляПоиска),"", ",") + " 
				|Таблица." + СтрокаПоиска.ИмяРеквизита + "Представление КАК " + СтрокаПоиска.ИмяРеквизита;
				
				УсловиеГде1 = УсловиеГде1 +
					?(ПустаяСтрока(УсловиеГде1),"", ",") + "НоменклатураПоШтрихкоду." + СтрокаПоиска.ИмяРеквизита;
				
				ПоляПоискаПоШтрихкоду = ПоляПоискаПоШтрихкоду + ?(ПустаяСтрока(ПоляПоискаПоШтрихкоду),"", ",") + " 
				|НоменклатураПоШтрихкоду." + СтрокаПоиска.ИмяРеквизита;
			КонецЦикла;
			
			УсловиеГде2 = СтрЗаменить(УсловиеГде1, "НоменклатураПоШтрихкоду", "Таблица");
			УсловиеГде2 = СтрЗаменить(УсловиеГде1, "Номенклатура.", "Таблица.");
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПоляПоиска%", ПоляПоиска);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПоляПоискаПоШтрихкоду%", ПоляПоискаПоШтрихкоду);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеГде1%", УсловиеГде1);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеГде2%", УсловиеГде2);
			
		ИначеЕсли НЕ ПоискПоШтрихкоду Тогда
			
			ТекстЗапроса = "ВЫБРАТЬ
			|%ПоляПоиска%
			|ПОМЕСТИТЬ Таблица
			|ИЗ &ТаблицаПоиска КАК Таблица;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Номенклатура.Ссылка КАК Ссылка,
			|	Номенклатура.Код,
			|	Номенклатура.Наименование,
			|	Номенклатура.Артикул
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ (%УсловиеГде1%) В (Выбрать Различные %УсловиеГде2% Из Таблица КАК Таблица)";
			
			ПоляПоиска = "";
			УсловиеГде1 = "";
			УсловиеГде2 = "";
			
			Для Каждого СтрокаПоиска ИЗ СтрокиПоиска Цикл
				Если СтрокаПоиска.ИмяРеквизита = "Штрихкод" Тогда
					Продолжить;
				КонецЕсли;
				
				ПоляПоиска = ПоляПоиска + ?(ПустаяСтрока(ПоляПоиска),"", ",") + " 
				|Таблица." + СтрокаПоиска.ИмяРеквизита + "Представление КАК " + СтрокаПоиска.ИмяРеквизита;
				
				УсловиеГде1 = УсловиеГде1 + ?(ПустаяСтрока(УсловиеГде1),"", ",") + "Номенклатура." + СтрокаПоиска.ИмяРеквизита;
				
			КонецЦикла;
			
			УсловиеГде2 = СтрЗаменить(УсловиеГде1, "НоменклатураПоШтрихкоду", "Таблица");
			УсловиеГде2 = СтрЗаменить(УсловиеГде1, "Номенклатура.", "Таблица.");
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПоляПоиска%", ПоляПоиска);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеГде1%", УсловиеГде1);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеГде2%", УсловиеГде2);
			
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ТаблицаПоиска", ТаблицаПоиска);
		Запрос.УстановитьПараметр("Штрихкод", МассивШтрихКодов);
		
		РезультатЗапроса = Запрос.Выполнить();
		ТаблицаПоиска = РезультатЗапроса.Выгрузить();
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьТекстЗапросаДанных(ТекстЗапроса, РеквизитКолонка, МенеджерыОбъектовМетаданных, ИменаПараметров)
	
	ТипыЗначенияРеквизита = РеквизитКолонка.ТипЗначения.Типы();
	Текст = "";
	ИмяРеквизита = РеквизитКолонка.ИмяРеквизита;
	
	Для Каждого Тип Из ТипыЗначенияРеквизита Цикл
		
		Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
			
			Менеджер = ПолучитьМенеджераПоТипу(Тип, МенеджерыОбъектовМетаданных);
			
			ИмяСправочника = СтрЗаменить(Строка(Менеджер),"СправочникМенеджер.", "");
			
			МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
			
			СтрокаОсновногоПредставления = Строка(МетаданныеТипа.ОсновноеПредставление);
			Если СтрокаОсновногоПредставления = "ВВидеКода" Тогда
				ИскатьПо = "Код";
			ИначеЕсли СтрокаОсновногоПредставления = "ВВидеНаименования" Тогда
				ИскатьПо = "Наименование";
			КонецЕсли;
			
			Текст = "
			|///////////////////////////////////////////////
			|
			|ВЫБРАТЬ
			|	Справочник.Ссылка КАК Ссылка,
			|	%Владелец%
			|	Справочник.%ИскатьПо% КАК Представление
			|ИЗ
			|	Справочник.%ИмяСправочника% КАК Справочник
			|ГДЕ
			|	Справочник.%ИскатьПо% В (&Представления%ИмяРеквизита%)
			| %ЭтоГруппа%;";
			
			Текст = СтрЗаменить(Текст,"%ИмяСправочника%", ИмяСправочника);
			Текст = СтрЗаменить(Текст,"%ИмяРеквизита%", ИмяРеквизита);
			Текст = СтрЗаменить(Текст,"%ИскатьПо%", ИскатьПо);
			
			Если ИмяРеквизита = "Родитель" Тогда
				Текст = СтрЗаменить(Текст,"%ЭтоГруппа%", "И Справочник.ЭтоГруппа");
			Иначе
				Текст = СтрЗаменить(Текст,"%ЭтоГруппа%", "");
			КонецЕсли;
			
			Если ИмяРеквизита = "ХарактеристикаНоменклатуры" Тогда
				Текст = СтрЗаменить(Текст,"%Владелец%", "Справочник.Владелец КАК Номенклатура,");
			Иначе
				Текст = СтрЗаменить(Текст,"%Владелец%", "");
			КонецЕсли;
			
			ИменаПараметров.Добавить("Представления" + ИмяРеквизита);
			
			НовСтрока = СоответствиеКолонокИндексуЗапроса.Добавить();
			НовСтрока.ИндексЗапроса = ИндексЗапроса;
			НовСтрока.ИмяКолонки = ИмяРеквизита + "Представление";
			
			ИндексЗапроса = ИндексЗапроса + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИмяРеквизита = "Штрихкод" Тогда
		
		Текст = "
		|///////////////////////////////////////////////
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Штрихкоды.Штрихкод КАК Представление,
		|	Истина КАК Ссылка
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Штрихкод В(&ПредставленияШтрихкод);";
		
		ИменаПараметров.Добавить("Представления" + ИмяРеквизита);
		
		НовСтрока = СоответствиеКолонокИндексуЗапроса.Добавить();
		НовСтрока.ИндексЗапроса = ИндексЗапроса;
		НовСтрока.ИмяКолонки = ИмяРеквизита + "Представление";
			
		ИндексЗапроса = ИндексЗапроса + 1;

	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + Текст;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМенеджераПоТипу(Тип, МенеджерыОбъектовМетаданных)
	
	Менеджер = Неопределено;
	
	Для Каждого МенеджерОбъектаМетаданных Из МенеджерыОбъектовМетаданных Цикл
		Если МенеджерОбъектаМетаданных.Значение.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Менеджер = МенеджерОбъектаМетаданных.Значение[Метаданные.НайтиПоТипу(Тип).Имя];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Менеджер;
	
КонецФункции

&НаСервере
Функция МетаданныеСправочника(ИмяСправочника)
	
	Возврат Справочники[ИмяСправочника].ПустаяСсылка().Метаданные();
	
КонецФункции

&НаСервере
Процедура СохранитьВосстановитьНастройкиНаСервере(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(АдресСохраненныхНастроек) Тогда
		ТаблицаНаСтроек = Новый ТаблицаЗначений;
		ТаблицаНаСтроек.Колонки.Добавить("ИмяНастройки");
		ТаблицаНаСтроек.Колонки.Добавить("Настройка");
		ТаблицаНаСтроек.Колонки.Добавить("ПоУмолчанию", Новый ОписаниеТипов("Булево"));
		ТаблицаНаСтроек.Колонки.Добавить("ТипПриемника");
		ТаблицаНаСтроек.Колонки.Добавить("ТолькоОбщиеДопРеквизитыСведения", Новый ОписаниеТипов("Булево"));
		ТаблицаНаСтроек.Колонки.Добавить("ВидНоменклатуры", Неопределено);
		ТаблицаНаСтроек.Колонки.Добавить("ДобавлятьВсеХарактеристикиКНоменклатуре", Новый ОписаниеТипов("Булево"));
		ТаблицаНаСтроек.Колонки.Добавить("ЗагружатьДополнительныеРеквизитыИСведенияНоменклатуры",
			Новый ОписаниеТипов("Булево"));
		ТаблицаНаСтроек.Колонки.Добавить("ЗагружатьДополнительныеРеквизитыИСведенияХарактеристик",
			Новый ОписаниеТипов("Булево"));
	Иначе
		ТаблицаНаСтроек = ПолучитьИзВременногоХранилища(АдресСохраненныхНастроек);
	КонецЕсли;
	
	
	Если ТекущиеДанные.Свойство("ФормаСохраненияНастройки") И ТекущиеДанные.Свойство("Сохранить") Тогда
		
		СтруктураОтбора = Новый Структура("ИмяНастройки, ТипПриемника", ТекущиеДанные.НаименованиеНастройки, ТипПриемника);
		НайденнаяТекущаяНастройка = ТаблицаНаСтроек.НайтиСтроки(СтруктураОтбора);
		
		Если НайденнаяТекущаяНастройка.Количество() = 0 Тогда
			ТекущаяНастройка = ТаблицаНаСтроек.Добавить();
			ТекущаяНастройка.ПоУмолчанию = Ложь;
		Иначе
			ТекущаяНастройка = НайденнаяТекущаяНастройка[0];
		КонецЕсли;
		
		ТекущаяНастройка.ИмяНастройки = ТекущиеДанные.НаименованиеНастройки;
		ТекущаяНастройка.Настройка = Объект.ТаблицаРеквизитовПриемника.Выгрузить();
		
		ТекущаяНастройка.ЗагружатьДополнительныеРеквизитыИСведенияНоменклатуры =
			ЗагружатьДополнительныеРеквизитыИСведенияНоменклатуры;
		ТекущаяНастройка.ЗагружатьДополнительныеРеквизитыИСведенияХарактеристик =
			ЗагружатьДополнительныеРеквизитыИСведенияХарактеристик;
		ТекущаяНастройка.ТолькоОбщиеДопРеквизитыСведения = ТолькоОбщиеДопРеквизитыСведения;
		ТекущаяНастройка.ДобавлятьВсеХарактеристикиКНоменклатуре = ДобавлятьВсеХарактеристикиКНоменклатуре;
		
		Если ТекущиеДанные.ИспользоватьПоУмочанию И НЕ ТекущаяНастройка.ПоУмолчанию Тогда
			
			СтруктураОтбора = Новый Структура("ПоУмолчанию, ТипПриемника", Истина, ТипПриемника);
			СуществующаяНастройкаПоУмолчанию = ТаблицаНаСтроек.НайтиСтроки(СтруктураОтбора);
			Если НЕ СуществующаяНастройкаПоУмолчанию.Количество() = 0 Тогда
				СуществующаяНастройкаПоУмолчанию[0].ПоУмолчанию = Ложь;
			КонецЕсли;
			ТекущаяНастройка.ПоУмолчанию = Истина;
			
		КонецЕсли;
		
		ТекущаяНастройка.ТипПриемника = ТипПриемника;
		
		ИмяОткрытойНастройки = ТекущиеДанные.НаименованиеНастройки;
		Элементы.ГруппаПриемник.Заголовок = НСтр("ru = 'Приемник данных'");
		ИзмененыНастройки = Ложь;
	ИначеЕсли ТекущиеДанные.Свойство("ФормаСохраненияНастройки") Тогда
		
		ТекущиеДанные.Свойство("НеЗадаватьВопросСохраненияНастроек", НеЗадаватьВопросСохраненияНастроек);
		
	ИначеЕсли ТекущиеДанные.Свойство("ФормаВосстановленияНастройки") И ТекущиеДанные.Свойство("Восстановить") Тогда
		
		ИмяОткрытойНастройки = ТекущиеДанные.НаименованиеНастройки;
		НайденнаяНастройка = ТаблицаНаСтроек.Найти(ИмяОткрытойНастройки, "ИмяНастройки");
		
		Если НЕ НайденнаяНастройка = Неопределено Тогда
			
			Объект.ТаблицаРеквизитовПриемника.Загрузить(НайденнаяНастройка.Настройка);
			ЗаполнитьЗначенияСвойств(
				ЭтаФорма,
				НайденнаяНастройка,
				"ЗагружатьДополнительныеРеквизитыИСведенияНоменклатуры,
				|ЗагружатьДополнительныеРеквизитыИСведенияХарактеристик,
				|ТолькоОбщиеДопРеквизитыСведения,
				|ДобавлятьВсеХарактеристикиКНоменклатуре");
			
			ЭтаФорма.ВидНоменклатуры.Очистить();
			
			ДобавитьУдалитьРеквизитыФО();
			
		КонецЕсли;
		
		Элементы.ГруппаПриемник.Заголовок = НСтр("ru = 'Приемник данных'");
		ИзмененыНастройки = Ложь;
	КонецЕсли;
	
	СохранитьСоставНастроек = Ложь;
	ТекущиеДанные.Свойство("СохранитьСоставНастроек", СохранитьСоставНастроек);
	
	Если СохранитьСоставНастроек Тогда
		
		Индекс = ТаблицаНаСтроек.Количество() - 1;
		
		Пока Индекс >= 0 Цикл
			Настройка = ТаблицаНаСтроек[Индекс];
			УдалитьНастройку = Ложь;
			
			Если Настройка.ТипПриемника = ТипПриемника Тогда
				Если ТекущиеДанные.СписокНастроек.НайтиПоЗначению(Настройка.ИмяНастройки) = Неопределено Тогда
					ТаблицаНаСтроек.Удалить(Индекс);
				КонецЕсли;
			КонецЕсли;
			
			Индекс = Индекс - 1;
		КонецЦикла;
	КонецЕсли;
	
	Если ТекущиеДанные.Свойство("ФормаСохраненияНастройки") Тогда
		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("Настройки", ТаблицаНаСтроек);
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("fdbcd421-88f0-4b05-866b-518614c4ad47", "", СтруктураНастроек);
		АдресСохраненныхНастроек = ПоместитьВоВременноеХранилище(ТаблицаНаСтроек, УникальныйИдентификатор);
	КонецЕсли;
	
	Элементы.ВидНоменклатуры.ТолькоПросмотр = ТолькоОбщиеДопРеквизитыСведения;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьПометку()
	
	ТекущиеДанные = Элементы.ТаблицаРеквизитовПриемника.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Идентификатор Из Элементы.ТаблицаРеквизитовПриемника.ВыделенныеСтроки Цикл
		ВыделеннаяСтрока = Объект.ТаблицаРеквизитовПриемника.НайтиПоИдентификатору(Идентификатор);
		ВыделеннаяСтрока.Пометка = ТекущиеДанные.Пометка;
		
		Если НЕ ВыделеннаяСтрока.Пометка И НЕ ТипПриемника = "ДокументУстановкаЦен"Тогда
			ВыделеннаяСтрока.ПолеПоиска = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьДиалогЗапросаСохраниенияНастройки(Отказ, ВосстановлениеНастроек = Ложь, ИзменениеПриемника = Ложь, ЗавершениеРаботы = Ложь)
	
	Если НеЗадаватьВопросСохраненияНастроек ИЛИ НЕ ИзмененыНастройки Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	ТекстВопроса = НСтр("ru = 'Настройки приемника были изменены. Сохранить изменения?'");
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ВосстановлениеНастроек", ВосстановлениеНастроек);
	ПараметрыОповещения.Вставить("ИзменениеПриемника", ИзменениеПриемника);
	ПараметрыОповещения.Вставить("ЗавершениеРаботы", ЗавершениеРаботы);
	Оповещение = Новый ОписаниеОповещения("ВызватьДиалогЗапросаОписаниеОповещения", ЭтотОбъект,ПараметрыОповещения);
	
	ДополнительныеПараметры = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	ДополнительныеПараметры.Вставить("КнопкаПоУмолчанию", КодВозвратаДиалога.Да);
	ДополнительныеПараметры.Вставить("Заголовок", НСтр("ru = 'Загрузка данных'"));
	
	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
		Оповещение,
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНетОтмена,
		ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьДиалогЗапросаОписаниеОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НеЗадаватьВопросСохраненияНастроек = Результат.БольшеНеЗадаватьЭтотВопрос;
	ОтветПользователя = Результат.Значение;
	
	Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
		СохранитьНастройки(Неопределено);
	ИначеЕсли ОтветПользователя = КодВозвратаДиалога.Нет Тогда
		Если НЕ (ДополнительныеПараметры.ВосстановлениеНастроек ИЛИ ДополнительныеПараметры.ИзменениеПриемника) Тогда
			ИзмененыНастройки = Ложь;
			Закрыть();
		Иначе
			Если НЕ ДополнительныеПараметры.ИзменениеПриемника Тогда
				ОткрытьФормуВосстановленияНастроек();
			Иначе
				ИзмененыНастройки = Ложь;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ОтветПользователя = КодВозвратаДиалога.Отмена Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОповещенияФормаВосстановленияНастройки(Результат, ДополнительныеПараметры) Экспорт
	
	ВосстановитьНастройкиИЗаполнитьШапку(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиИЗаполнитьШапку(Результат)
	
	СохранитьВосстановитьНастройкиНаСервере(Результат);
	ЗаполнитьШапкуТабличногоДокументаИсточникаКлиентСервер(
		ТабДокИсточник,
		ПерваяСтрокаДанныхИсточника,
		Объект.ТаблицаРеквизитовПриемника);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВосстановленияНастроек()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресСохраненныхНастроек", АдресСохраненныхНастроек);
	ПараметрыФормы.Вставить("ИмяОткрытойНастройки", ИмяОткрытойНастройки);
	ПараметрыФормы.Вставить("ТипПриемника", ТипПриемника);
	
	Обработчик = Новый ОписаниеОповещения("ОписаниеОповещенияФормаВосстановленияНастройки", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Обработка.ЗагрузкаДанныхИзФайлаExcel.Форма.ФормаВосстановленияНастройки",
		ПараметрыФормы,
		,
		,
		,
		,
		Обработчик,
		Режим);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьУстановкуЦен()
	
	СтруктураТаблицаИсточник = ПолучитьИзВременногоХранилища(АдресСтруктурыТаблицыИсточник);
	
	ТаблицаИсточник = СтруктураТаблицаИсточник.ТаблицаИсточник;
	ТаблицаНайденныхОбъектов = СтруктураТаблицаИсточник.ТаблицаНайденныхОбъектов;
	СтруктураПоискаОбъектов = СтруктураТаблицаИсточник.СтруктураПоискаОбъектов;
	ПоискПоШтрихкоду = СтруктураТаблицаИсточник.ПоискПоШтрихкоду;
	ПустаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	
	ВидЦеныПоУмолчанию = Объект.ТаблицаРеквизитовПриемника.НайтиСтроки(
		Новый Структура("ИмяРеквизита", "ВидЦены"))[0].ЗначениеПоУмолчанию;
	
	НовыйДокумент = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
	НовыйДокумент.Заполнить(Неопределено);
	НовыйДокумент.Дата = ТекущаяДата();
	
	ТекстИсключения = "";
	
	Для Каждого СтрокаИсточника Из ТаблицаИсточник Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоискаОбъектов, СтрокаИсточника);
		
		НайденныеСтроки = ТаблицаНайденныхОбъектов.НайтиСтроки(СтруктураПоискаОбъектов);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для Каждого НайденнаяСтрока ИЗ НайденныеСтроки Цикл
				НоваяСтрока = НовыйДокумент.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
				НоваяСтрока.Номенклатура = НайденнаяСтрока.Ссылка;
				Если ДобавлятьВсеХарактеристикиКНоменклатуре Тогда
					НоваяСтрока.Характеристика = НайденнаяСтрока.Характеристика;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.ВидЦены) Тогда
					НоваяСтрока.ВидЦены = ВидЦеныПоУмолчанию;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.ВидЦены) Тогда
					ТекстСообщения = НСтр("ru = 'В процессе загрузки данных не найден вид цен для строки %1.'") + Символы.ПС
						+ НСтр("ru = 'Возможно, нужно указать вид цен по умолчанию.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НоваяСтрока.НомерСтроки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						,
						"ТаблицаРеквизитовПриемника",
						"Объект");
					ТекстИсключения = НСтр("ru = 'В процессе загрузки данных не найдены некоторые виды цен.'") + Символы.ПС
						+ НСтр("ru = 'Возможно, нужно указать вид цен по умолчанию.'");
				КонецЕсли;
			КонецЦикла;
		Иначе
			НоменклатураСсылка = ПустаяНоменклатура;
			
			ТекстСообщения = НСтр("ru = 'Не найдена номенклатура по значениям полей поиска '") + Символы.ПС;
			
			ПоляПоиска = "";
			Для Каждого Элемент Из СтруктураПоискаОбъектов Цикл
				ПоляПоиска = ПоляПоиска + ?(ПустаяСтрока(ПоляПоиска),"", ",") +  Элемент.Ключ + ": " + Элемент.Значение + Символы.ПС;
			КонецЦикла;
			
			ТекстСообщения = ТекстСообщения + ПоляПоиска;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			НоваяСтрока = НовыйДокумент.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.ВидЦены) Тогда 
				НоваяСтрока.ВидЦены = ВидЦеныПоУмолчанию;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.ВидЦены) Тогда
				ТекстСообщения = НСтр("ru = 'В процессе загрузки данных не найден вид цен для строки %1.'") + Символы.ПС
					+ НСтр("ru = 'Возможно, нужно указать вид цен по умолчанию.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НоваяСтрока.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					,
					"ТаблицаРеквизитовПриемника",
					"Объект");
				ТекстИсключения = НСтр("ru = 'В процессе загрузки данных не найдены некоторые виды цен.'") + Символы.ПС
					+ НСтр("ru = 'Возможно, нужно указать вид цен по умолчанию.'");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаВидовЦен = НовыйДокумент.Товары.Выгрузить(, "ВидЦены");
	ТаблицаВидовЦен.Свернуть("ВидЦены");
	
	МассивУдаляемыхСтрок = Новый Массив;
	Для Каждого СтрокаВидаЦен Из ТаблицаВидовЦен Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаВидаЦен.ВидЦены) Тогда
			МассивУдаляемыхСтрок.Добавить(СтрокаВидаЦен);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
		ТаблицаВидовЦен.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Если ТаблицаВидовЦен.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'В процессе загрузки данных не найдено ни одного вида цен.'") + Символы.ПС
			+ НСтр("ru = 'Возможно, нужно указать вид цен по умолчанию.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			"ТаблицаРеквизитовПриемника",
			"Объект");
		ВызватьИсключение ТекстСообщения;
	Иначе
		Если НЕ ПустаяСтрока(ТекстИсключения) Тогда
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДокумент.ВидыЦен.Загрузить(ТаблицаВидовЦен);
	
	ЗначениеВРеквизитФормы(НовыйДокумент, "НовыйДокументУстановкиЦен");
	
КонецПроцедуры

&НаСервере
Процедура СоздатьТаблицуИсточника()
	
	СоответствиеКолонокИндексуЗапроса.Очистить();
	
	МенеджерыОбъектовМетаданных = Новый Структура();
	МенеджерыОбъектовМетаданных.Вставить("Справочники", Справочники);
	МенеджерыОбъектовМетаданных.Вставить("Перечисления", Перечисления);
	МенеджерыОбъектовМетаданных.Вставить("Документы", Документы);
	МенеджерыОбъектовМетаданных.Вставить("ПланыВидовХарактеристик", ПланыВидовХарактеристик);
	МенеджерыОбъектовМетаданных.Вставить("ПланыСчетов", ПланыСчетов);
	МенеджерыОбъектовМетаданных.Вставить("ПланыВидовРасчета", ПланыВидовРасчета);
	МенеджерыОбъектовМетаданных.Вставить("БизнесПроцессы", БизнесПроцессы);
	МенеджерыОбъектовМетаданных.Вставить("Задачи", Задачи);
	
	ТаблицаИсточник = Новый ТаблицаЗначений;
	ВсегоСтрок = ТабДокИсточник.ВысотаТаблицы;
	ЗапросДанных = Новый Запрос;
	ТекстЗапроса = "";
	ИндексЗапроса = 0;
	ПерваяИтерация = Истина;
	
	Для Каждого РеквизитКолонка Из Объект.ТаблицаРеквизитовПриемника Цикл
		Если НЕ РеквизитКолонка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		НомерКолонки = РеквизитКолонка.НомерСтроки;
		
		ИмяКолонки = РеквизитКолонка.ИмяРеквизита;
		ТаблицаИсточник.Колонки.Добавить(ИмяКолонки + "Представление", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(256)));
		ТаблицаИсточник.Колонки.Добавить(ИмяКолонки, РеквизитКолонка.ТипЗначения);
		
		ИндексСтроки = 0;
		Счетчик = ПерваяСтрокаДанныхИсточника;
		Пока Счетчик <= ВсегоСтрок Цикл
			Область = ТабДокИсточник.Область(Счетчик, НомерКолонки, Счетчик, НомерКолонки);
			
			Если ПерваяИтерация Тогда
				Строка = ТаблицаИсточник.Вставить(ИндексСтроки);
			Иначе
				Строка = ТаблицаИсточник.Получить(ИндексСтроки);
			КонецЕсли;
			Строка[РеквизитКолонка.ИмяРеквизита + "Представление"] = Область.Текст;
			
			ИндексСтроки = ИндексСтроки + 1;
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
		ПерваяИтерация = Ложь;
		ИменаПараметров = Новый Массив;
		
		ДополнитьТекстЗапросаДанных(ТекстЗапроса, РеквизитКолонка, МенеджерыОбъектовМетаданных, ИменаПараметров);
		
		Если НЕ ИменаПараметров.Количество() = 0 Тогда
			
			ТаблицаПредставлений = ТаблицаИсточник.Скопировать(, РеквизитКолонка.ИмяРеквизита + "Представление");
			ТаблицаПредставлений.Свернуть(РеквизитКолонка.ИмяРеквизита + "Представление");
			
			МассивПредставлений = ТаблицаПредставлений.ВыгрузитьКолонку(РеквизитКолонка.ИмяРеквизита + "Представление");
			
			Для Каждого ИмяПараметра Из ИменаПараметров Цикл
				ЗапросДанных.УстановитьПараметр(ИмяПараметра, МассивПредставлений);
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	МассивТЗЗапросаДанных = Новый Массив;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		ЗапросДанных.Текст = ТекстЗапроса;
		
		РезультатПакетЗапросаДанных = ЗапросДанных.ВыполнитьПакет();
		Для Каждого Результат Из РезультатПакетЗапросаДанных Цикл
			МассивТЗЗапросаДанных.Добавить(Результат.Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	МаксИндексКолонки = ТаблицаИсточник.Колонки.Количество()-1;
	КэшПеречислений = Новый ТаблицаЗначений;
	КэшПеречислений.Колонки.Добавить("Представление");
	КэшПеречислений.Колонки.Добавить("ЗначениеПеречисления");
	
	ТаблицаПоиска = Новый ТаблицаЗначений;
	
	СтрокиПоиска = Объект.ТаблицаРеквизитовПриемника.НайтиСтроки(Новый Структура("ПолеПоиска, Пометка", Истина, Истина));
	
	ПоискПоШтрихкоду = Ложь;
	СтруктураПоискаОбъектов = Новый Структура;
	
	Если СтрокиПоиска.Количество() > 0 Тогда
		КолонкиПоиска = "";
		
		УдаляемаяСтрока = Неопределено;
		СчетчикМассива = -1;
		Для Каждого СтрокаПоиска ИЗ СтрокиПоиска Цикл
			СчетчикМассива = СчетчикМассива + 1;
			Если СтрокаПоиска.ИмяРеквизита = "Штрихкод" Тогда
				Если ТипПриемника = "ДокументУстановкаЦен" Тогда
					СтруктураПоискаОбъектов.Вставить("Штрихкод", "Штрихкод");
				КонецЕсли;
				ПоискПоШтрихкоду = Истина;
				УдаляемаяСтрока = СчетчикМассива;
				Продолжить;
			КонецЕсли;
			
			КолонкиПоиска = КолонкиПоиска +
				?(ПустаяСтрока(КолонкиПоиска),"", ",") + СтрокаПоиска.ИмяРеквизита + "Представление";
			СтруктураПоискаОбъектов.Вставить(СтрокаПоиска.ИмяРеквизита);
			
		КонецЦикла;
		
		Если УдаляемаяСтрока <> Неопределено Тогда
			СтрокиПоиска.Удалить(УдаляемаяСтрока);
		КонецЕсли;
		
		Если НЕ ТаблицаИсточник.Колонки.Найти("ШтрихкодПредставление") = Неопределено Тогда
			
			Для Каждого СтрокаТаблицы Из ТаблицаИсточник Цикл
				Если ЗначениеЗаполнено(СтрокаТаблицы.ШтрихкодПредставление) Тогда
					ШтрихКодБезПробелов = СтрЗаменить(СтрокаТаблицы.ШтрихкодПредставление, Символ(160), "");
					СтрокаТаблицы.ШтрихкодПредставление = СтрЗаменить(ШтрихКодБезПробелов, Символ(32), "");
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ТаблицаПоиска = ТаблицаИсточник.Скопировать(, КолонкиПоиска);
		ТаблицаПоиска.Свернуть(КолонкиПоиска);
		
		МассивШтрихКодов = Неопределено;
		Если ПоискПоШтрихкоду Тогда
			
			МассивШтрихКодов = ТаблицаИсточник.Скопировать(, "ШтрихкодПредставление").ВыгрузитьКолонку("ШтрихкодПредставление");
		КонецЕсли;
		
		ПоискСуществующихОбъектов(ТаблицаПоиска, СтрокиПоиска, ПоискПоШтрихкоду, МассивШтрихКодов);
		
	КонецЕсли;
	
	Для Каждого СтрокаИсточника Из ТаблицаИсточник Цикл
		
		ИндексКолонки = 0;
		
		Пока ИндексКолонки <= МаксИндексКолонки Цикл 
			
			ИмяКолонкиПредставление = ТаблицаИсточник.Колонки[ИндексКолонки].Имя;
			ИмяКолонки = ТаблицаИсточник.Колонки[ИндексКолонки+1].Имя;
			
			ИндексРезультатЗапроса = СоответствиеКолонокИндексуЗапроса.НайтиСтроки(Новый Структура("ИмяКолонки", ИмяКолонкиПредставление));
			
			Если ИндексРезультатЗапроса.Количество() = 0 Тогда
				ЗначениеПредставление = СтрокаИсточника[ИмяКолонкиПредставление];
				
				Если Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(СтрокаИсточника[ИмяКолонки])) Тогда
					
					НайденныеЗначенияПеречисления = КэшПеречислений.Найти(ЗначениеПредставление, "Представление");
					ЗначениеПеречисления = Неопределено;
					Если НайденныеЗначенияПеречисления = Неопределено Тогда
						
						Для каждого Перечисление Из ПолучитьМенеджераПоТипу(ТипЗнч(СтрокаИсточника[ИмяКолонки]), МенеджерыОбъектовМетаданных) Цикл
							Если Строка(Перечисление) = ЗначениеПредставление Тогда
								НовКэш = КэшПеречислений.Добавить();
								НовКэш.Представление = Строка(ЗначениеПредставление);
								НовКэш.ЗначениеПеречисления = Перечисление;
								ЗначениеПеречисления = Перечисление;
							КонецЕсли;
						КонецЦикла;
					Иначе
						ЗначениеПеречисления = НайденныеЗначенияПеречисления.ЗначениеПеречисления;
					КонецЕсли;
					ЗначениеПредставление = ЗначениеПеречисления;
				КонецЕсли;
				
				СтрокаИсточника[ИмяКолонки] = ЗначениеПредставление;
				
				
			ИначеЕсли ИндексРезультатЗапроса.Количество() = 1 Тогда
				
				ЗначениеПредставление = СтрокаИсточника[ИмяКолонкиПредставление];
				Если ИмяКолонки = "Штрихкод" И ТипПриемника = "ДокументУстановкаЦен" Тогда
					СтрокаИсточника[ИмяКолонки] = ЗначениеПредставление;
				Иначе
					ИндексЭлементаМассива = ИндексРезультатЗапроса[0].ИндексЗапроса;
					РезультатЗапроса = МассивТЗЗапросаДанных.Получить(ИндексЭлементаМассива);
					НайденноеЗначение = РезультатЗапроса.Найти(ЗначениеПредставление, "Представление");
					
					Если НЕ НайденноеЗначение = Неопределено Тогда
						СтрокаИсточника[ИмяКолонки] = НайденноеЗначение.Ссылка;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ИндексРезультатЗапроса.Количество() > 1 Тогда
				// Cоставное поле.
			КонецЕсли;
			
			ИндексКолонки = ИндексКолонки + 2;
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТипПриемника = "ДокументУстановкаЦен" И ДобавлятьВсеХарактеристикиКНоменклатуре Тогда
		ЗапросХарактеристики = Новый Запрос;
		ТекстЗапросаВТ = "ВЫБРАТЬ";
		ТекстЗапроса = "ВЫБРАТЬ";
		СчетчикКолонок = 0;
		Для Каждого Колонка ИЗ ТаблицаПоиска.Колонки Цикл
			СчетчикКолонок = СчетчикКолонок + 1;
			Запятая = ?(СчетчикКолонок = 1, "", ",");
			ТекстЗапросаВТ = ТекстЗапросаВТ + Запятая + Символы.ПС + "	ТаблицаПоиска." + Колонка.Имя + " КАК " + Колонка.Имя;
			ТекстЗапроса = ТекстЗапроса + Запятая + Символы.ПС + "	ТаблицаПоиска." + Колонка.Имя + " КАК " + Колонка.Имя;
		КонецЦикла;
		ТекстЗапросаВТ = ТекстЗапросаВТ + Символы.ПС + "ПОМЕСТИТЬ втТаблицаПоиска";
		ТекстЗапросаВТ = ТекстЗапросаВТ + Символы.ПС + "ИЗ &ТаблицаПоиска КАК ТаблицаПоиска" + Символы.ПС + ";";
		ТекстЗапроса = ТекстЗапроса
		+ ", 
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
		|ИЗ
		|	втТаблицаПоиска КАК ТаблицаПоиска
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО (ТаблицаПоиска.Ссылка = ХарактеристикиНоменклатуры.Владелец
		|				ИЛИ ТаблицаПоиска.Ссылка.ВидНоменклатуры = ХарактеристикиНоменклатуры.Владелец)
		|";
		ЗапросХарактеристики.Текст = ТекстЗапросаВТ + Символы.ПС + ТекстЗапроса;
		ЗапросХарактеристики.УстановитьПараметр("ТаблицаПоиска", ТаблицаПоиска);
		ТаблицаПоиска = ЗапросХарактеристики.Выполнить().Выгрузить();
	КонецЕсли;
	
	
	Результат = Новый Структура ("ТаблицаИсточник, ТаблицаНайденныхОбъектов, СтруктураПоискаОбъектов, ПоискПоШтрихкоду",
		ТаблицаИсточник, ТаблицаПоиска, СтруктураПоискаОбъектов, ПоискПоШтрихкоду);
	АдресСтруктурыТаблицыИсточник = ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор);
	КоличествоЗагружаемойНоменклатуры = ТаблицаИсточник.Количество();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДанныеНаСервере()
	
	ЛогПроверкиДанных.Очистить();
	СоздатьТаблицуИсточника();
	
	СтруктураТаблицаИсточник = ПолучитьИзВременногоХранилища(АдресСтруктурыТаблицыИсточник);
	ПроверяемаяТаблица = СтруктураТаблицаИсточник.ТаблицаИсточник;
	МаксИндексКолонки = ПроверяемаяТаблица.Колонки.Количество()-1;
	
	НомерСтроки = 1;
	
	Если ТипПриемника = "СправочникНоменклатура" Тогда
		
		НайденныеСтроки = Объект.ТаблицаРеквизитовПриемника.НайтиСтроки(Новый Структура("ИмяРеквизита", "ВидНоменклатуры"));
		ВидНоменклатурыПоУмолчанию = НайденныеСтроки[0].ЗначениеПоУмолчанию;
		
		ЕстьВидНоменклатурыВТаблице = НЕ ПроверяемаяТаблица.Колонки.Найти("ВидНоменклатуры") = Неопределено;
		
		ОбязательныеПоля = Объект.ТаблицаРеквизитовПриемника.НайтиСтроки(
			Новый Структура("ОбязательныйДляЗаполнения, ДопРеквизитСведение", Истина, 0));
		
		Для Каждого СтрокаТаблицы Из ПроверяемаяТаблица Цикл
			
			ИндексКолонки = 0;
			
			Для Каждого ОбязательноеПоле Из ОбязательныеПоля Цикл
				
				ЗначениеВИсточнике = Неопределено;
				Если НЕ ПроверяемаяТаблица.Колонки.Найти(ОбязательноеПоле.ИмяРеквизита) = Неопределено Тогда
					ЗначениеВИсточнике = СтрокаТаблицы[ОбязательноеПоле.ИмяРеквизита];
				КонецЕсли;
				
				Если ОбязательноеПоле.ИмяРеквизита = "ЕдиницаИзмерения" Тогда
					
					Если ЕстьВидНоменклатурыВТаблице Тогда
						ВидНоменклатурыСтроки = СтрокаТаблицы.ВидНоменклатуры;
					КонецЕсли;
					
					ВидНоменклатурыСтроки =
						?(ЗначениеЗаполнено(ВидНоменклатурыСтроки), ВидНоменклатурыСтроки, ВидНоменклатурыПоУмолчанию);
					
					Если ЗначениеЗаполнено(ВидНоменклатурыСтроки) Тогда
						Если ВидНоменклатурыСтроки.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				
				Если НЕ ЗначениеЗаполнено(ЗначениеВИсточнике) И НЕ ЗначениеЗаполнено(ОбязательноеПоле.ЗначениеПоУмолчанию) Тогда
					Лог = ЛогПроверкиДанных.Добавить();
					Лог.НомерСтрокиИсточника = НомерСтроки - 1 + ПерваяСтрокаДанныхИсточника;
					Описание = СтрШаблон(НСтр("ru = 'Обязательное для заполнения поле ""%1"" не определенно.'"),
						ОбязательноеПоле.ПредставлениеРеквизита);
					Лог.Описание = Описание;
					Лог.ИмяРеквизита = ОбязательноеПоле.ИмяРеквизита;
				КонецЕсли;
				
			КонецЦикла;
			
			Пока ИндексКолонки <= МаксИндексКолонки Цикл
				
				ИмяКолонкиПредставление = ПроверяемаяТаблица.Колонки[ИндексКолонки].Имя;
				ИмяКолонки = ПроверяемаяТаблица.Колонки[ИндексКолонки+1].Имя;
				ИндексКолонки = ИндексКолонки + 2;
				
				Если ИмяКолонки = "ХарактеристикаНоменклатуры" ИЛИ ИмяКолонки = "Упаковка" Тогда
					Продолжить;
				КонецЕсли;
				
				Если ИмяКолонки = "Штрихкод" Тогда
					
					Если НЕ ПустаяСтрока(СтрокаТаблицы.Штрихкод) Тогда
						
						Лог = ЛогПроверкиДанных.Добавить();
						Лог.НомерСтрокиИсточника = НомерСтроки - 1 + ПерваяСтрокаДанныхИсточника;
						
						Описание = СтрШаблон(НСтр("ru = 'Дублирование штрихкода: ""%1""'"),
							СтрокаТаблицы[ИмяКолонкиПредставление]);
						
						Лог.Описание = Описание;
						Лог.ИмяРеквизита = ИмяКолонки;
						
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(СтрокаТаблицы[ИмяКолонкиПредставление])
					И НЕ ЗначениеЗаполнено(СтрокаТаблицы[ИмяКолонки]) Тогда
					Лог = ЛогПроверкиДанных.Добавить();
					Лог.НомерСтрокиИсточника = НомерСтроки - 1 + ПерваяСтрокаДанныхИсточника;
					
					Описание = СтрШаблон(НСтр("ru = 'Не найдено значение: ""%1""'"),
						СтрокаТаблицы[ИмяКолонкиПредставление]);
					
					Лог.Описание = Описание;
					Лог.ИмяРеквизита = ИмяКолонки;
				КонецЕсли;
				
			КонецЦикла;
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		
	ИначеЕсли ТипПриемника = "ДокументУстановкаЦен" Тогда
		
		ОбязательныеПоля = Объект.ТаблицаРеквизитовПриемника.НайтиСтроки(
			Новый Структура("ОбязательныйДляЗаполнения, ДопРеквизитСведение", Истина, 0));
		
		Для Каждого СтрокаТаблицы Из ПроверяемаяТаблица Цикл
			
			ИндексКолонки = 0;
			
			Для Каждого ОбязательноеПоле Из ОбязательныеПоля Цикл
				
				ЗначениеВИсточнике = Неопределено;
				Если НЕ ПроверяемаяТаблица.Колонки.Найти(ОбязательноеПоле.ИмяРеквизита) = Неопределено Тогда
					ЗначениеВИсточнике = СтрокаТаблицы[ОбязательноеПоле.ИмяРеквизита];
				КонецЕсли;
				
				Если ОбязательноеПоле.ИмяРеквизита = "ЕдиницаИзмерения" Тогда
					
					Если ЕстьВидНоменклатурыВТаблице Тогда
						ВидНоменклатурыСтроки = СтрокаТаблицы.ВидНоменклатуры;
					КонецЕсли;
					
					ВидНоменклатурыСтроки =
						?(ЗначениеЗаполнено(ВидНоменклатурыСтроки), ВидНоменклатурыСтроки, ВидНоменклатурыПоУмолчанию);
					
					Если ЗначениеЗаполнено(ВидНоменклатурыСтроки) Тогда
						Если ВидНоменклатурыСтроки.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				
				Если НЕ ЗначениеЗаполнено(ЗначениеВИсточнике) И НЕ ЗначениеЗаполнено(ОбязательноеПоле.ЗначениеПоУмолчанию) Тогда
					Лог = ЛогПроверкиДанных.Добавить();
					Лог.НомерСтрокиИсточника = НомерСтроки - 1 + ПерваяСтрокаДанныхИсточника;
					Описание = СтрШаблон(НСтр("ru = 'Обязательное для заполнения поле ""%1"" не определенно.'"),
						ОбязательноеПоле.ПредставлениеРеквизита);
					Лог.Описание = Описание;
					Лог.ИмяРеквизита = ОбязательноеПоле.ИмяРеквизита;
				КонецЕсли;
				
			КонецЦикла;
			
			Пока ИндексКолонки <= МаксИндексКолонки Цикл 
				
				ИмяКолонкиПредставление = ПроверяемаяТаблица.Колонки[ИндексКолонки].Имя;
				ИмяКолонки = ПроверяемаяТаблица.Колонки[ИндексКолонки+1].Имя;
				ИндексКолонки = ИндексКолонки + 2;
				
				
				Если НЕ ПустаяСтрока(СтрокаТаблицы[ИмяКолонкиПредставление]) И НЕ ЗначениеЗаполнено(СтрокаТаблицы[ИмяКолонки]) Тогда
					Лог = ЛогПроверкиДанных.Добавить();
					Лог.НомерСтрокиИсточника = НомерСтроки - 1 + ПерваяСтрокаДанныхИсточника;
					
					Описание = СтрШаблон(НСтр("ru = 'Не найдено значение: ""%1""'"),
						СтрокаТаблицы[ИмяКолонкиПредставление]);
					
					Лог.Описание = Описание;
					Лог.ИмяРеквизита = ИмяКолонки;
				КонецЕсли;
				
			КонецЦикла;
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСтроке(НомерСтроки, НомерКолонки = Неопределено)
	
	Если НЕ НомерСтроки = 0 Тогда
		Если НомерКолонки = Неопределено Тогда
			ВыделяемаяОбласть = ТабДокИсточник.Область(НомерСтроки,,НомерСтроки);
		Иначе
			ВыделяемаяОбласть = ТабДокИсточник.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
		КонецЕсли;
		Элементы.ТабДокИсточник.ТекущаяОбласть = ВыделяемаяОбласть;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУдалитьРеквизитыФО()
	
	ТаблицаРеквизитовПоУмолчанию = Новый ТаблицаЗначений;
	ЗаполнитьТаблицуРеквизитовПриемника(ТаблицаРеквизитовПоУмолчанию);
	
	Если НЕ ТаблицаРеквизитовПоУмолчанию.Количество() = Объект.ТаблицаРеквизитовПриемника.Количество() Тогда
		
		Индекс = Объект.ТаблицаРеквизитовПриемника.Количество()-1;
		Пока Индекс >=0 Цикл
			
			СтрокаТаблицыРеквизитов = Объект.ТаблицаРеквизитовПриемника[Индекс];
			НайденныйРеквизит = ТаблицаРеквизитовПоУмолчанию.Найти(СтрокаТаблицыРеквизитов.ИмяРеквизита, "ИмяРеквизита");
			
			Если НайденныйРеквизит = Неопределено Тогда
				Объект.ТаблицаРеквизитовПриемника.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс -1;
		КонецЦикла;
		
		Для каждого СтрокаТаблицы Из ТаблицаРеквизитовПоУмолчанию Цикл
			
			НайденныеСтроки = Объект.ТаблицаРеквизитовПриемника.НайтиСтроки(Новый Структура("ИмяРеквизита", СтрокаТаблицы.ИмяРеквизита));
			Если НайденныеСтроки.Количество() = 0 Тогда
				НовыйРеквизит = Объект.ТаблицаРеквизитовПриемника.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйРеквизит, СтрокаТаблицы);
				НовыйРеквизит.Пометка = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПорцииЗагрузкиНоменклатуры()

	// Загрузку делим на 10 порции, при этом минимальная порция не меньше 20.
	// Если порция меньше 20, то уменьшаем количество порций.
	
	МинимальнаяПорция = 20;
	МаксПорций = 10;
	
	КоличествоВПорции = КоличествоЗагружаемойНоменклатуры/МаксПорций;
	
	Если КоличествоВПорции < МинимальнаяПорция Тогда
		Пока НЕ КоличествоВПорции >= МинимальнаяПорция Цикл
			МаксПорций = МаксПорций - 1;
			Если МаксПорций = 1 Тогда
				Прервать;
			КонецЕсли;
			КоличествоВПорции = КоличествоЗагружаемойНоменклатуры/МаксПорций;
		КонецЦикла;
	КонецЕсли;
	
	КоличествоВПорции = КоличествоЗагружаемойНоменклатуры/МаксПорций;
	КоличествоВПорции = Окр(КоличествоВПорции);
	
	МассивПорций = Новый Массив;
	БуферПорций = 0;
	Структура = Новый Структура;
	
	Пока НЕ БуферПорций = КоличествоЗагружаемойНоменклатуры Цикл
		НижняяГраница = БуферПорций;
		БуферПорций = БуферПорций + КоличествоВПорции;
		
		Если БуферПорций > КоличествоЗагружаемойНоменклатуры Тогда
			Разность = БуферПорций - КоличествоЗагружаемойНоменклатуры;
			КоличествоВПорции = КоличествоВПорции - Разность;
			БуферПорций = БуферПорций - Разность;
		КонецЕсли;
		
		ВерхняяГраница = НижняяГраница + КоличествоВПорции;
		
		МассивПорций.Добавить(Новый Структура("НижняяГраница, ВерхняяГраница", НижняяГраница + 1, ВерхняяГраница));
	КонецЦикла;
	
	Возврат МассивПорций;
КонецФункции

&НаСервере
Процедура ЗаполнитьНастройкойПоУмолчанию()
	
	СохраненныеНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("fdbcd421-88f0-4b05-866b-518614c4ad47", "");
	
	Если СохраненныеНастройки <> Неопределено И СохраненныеНастройки.Свойство("Настройки") Тогда
		
		ПараметрыОтбора = Новый Структура("ПоУмолчанию, ТипПриемника", Истина, ТипПриемника);
		НайденнаяНастройкаПоУмолчанию = СохраненныеНастройки.Настройки.НайтиСтроки(ПараметрыОтбора);
		Если НЕ НайденнаяНастройкаПоУмолчанию.Количество() = 0 Тогда
			НастройкаПоУмолчанию = НайденнаяНастройкаПоУмолчанию[0];
			ИмяОткрытойНастройки = НастройкаПоУмолчанию.ИмяНастройки;
			Объект.ТаблицаРеквизитовПриемника.Загрузить(НастройкаПоУмолчанию.Настройка);
			ЗаполнитьЗначенияСвойств(ЭтаФорма, НастройкаПоУмолчанию,
				"ЗагружатьДополнительныеРеквизитыИСведенияНоменклатуры,
				|ЗагружатьДополнительныеРеквизитыИСведенияХарактеристик,
				|ТолькоОбщиеДопРеквизитыСведения,
				|ДобавлятьВсеХарактеристикиКНоменклатуре");
			
			ЭтаФорма.ВидНоменклатуры.Очистить();
			
			ДобавитьУдалитьРеквизитыФО();
		Иначе
			ИмяОткрытойНастройки = "";
			ЗаполнитьТаблицуРеквизитовПриемника();
		КонецЕсли;
		АдресСохраненныхНастроек = ПоместитьВоВременноеХранилище(СохраненныеНастройки.Настройки, УникальныйИдентификатор);
	Иначе
		ИмяОткрытойНастройки = "";
		ЗаполнитьТаблицуРеквизитовПриемника();
	КонецЕсли;
	
	ЗаполнитьШапкуТабличногоДокументаИсточникаКлиентСервер(
		ТабДокИсточник,
		ПерваяСтрокаДанныхИсточника,
		Объект.ТаблицаРеквизитовПриемника);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлятьВсеХарактеристикиКНоменклатуреПриИзменении(Элемент)
	
	Если ДобавлятьВсеХарактеристикиКНоменклатуре Тогда
		СтрокиХарактеристики = Объект.ТаблицаРеквизитовПриемника.НайтиСтроки(Новый Структура("ПредставлениеРеквизита", "Характеристика"));
		Если СтрокиХарактеристики.Количество() > 0 И СтрокиХарактеристики[0].Пометка Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Режим добавления характеристик используется только при отсутствии сведений о характеристиках в файле данных'"),
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"ТаблицаРеквизитовПриемника",
					СтрокиХарактеристики[0].НомерСтроки,
					"ПредставлениеРеквизита"),
					"Объект"
					);
				ДобавлятьВсеХарактеристикиКНоменклатуре = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПриИзмененииНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьХарактеристикуНадобавление()
	
	Если ТипПриемника = "ДокументУстановкаЦен" И ДобавлятьВсеХарактеристикиКНоменклатуре Тогда
		
		ТекущаяСтрокаРеквизитов = Элементы.ТаблицаРеквизитовПриемника.ТекущиеДанные;
		Если ТекущаяСтрокаРеквизитов <> Неопределено
			И ТекущаяСтрокаРеквизитов.ПредставлениеРеквизита = "Характеристика"
			И ТекущаяСтрокаРеквизитов.Пометка Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Режим добавления характеристик используется только при отсутствии сведений о характеристиках в файле данных'"),
					,
					"ДобавлятьВсеХарактеристикиКНоменклатуре");
					ТекущаяСтрокаРеквизитов.Пометка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
