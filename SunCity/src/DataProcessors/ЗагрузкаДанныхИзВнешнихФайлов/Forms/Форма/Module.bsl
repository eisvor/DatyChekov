#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
	ЗагружатьКоличество = ?(Параметры.Свойство("ЗагружатьКоличество"), Параметры.ЗагружатьКоличество, Истина);
	ПроверятьЗаполнениеХарактеристик =
		Параметры.Свойство("ПроверятьЗаполнениеХарактеристик") И Параметры.ПроверятьЗаполнениеХарактеристик;

	ЗагружатьЦены                         = Параметры.ЗагружатьЦены;
	ЗагружатьСуммы                        = Параметры.ЗагружатьСуммы;
	ЦенаВключаетНДС                       = Параметры.ЦенаВключаетНДС;
	ЗагружатьГТД                          = Параметры.ЗагружатьГТД;
	ИмяТЧ                                 = Параметры.ИмяТЧ;
	НеПересчитыватьСуммовыеПоказатели     = Параметры.НеПересчитыватьСуммовыеПоказатели;
	Контрагент                            = Параметры.Контрагент;
	УчетНДС                               = Параметры.УчетНДС;
	
	Если Параметры.Свойство("Заголовок") И ЗначениеЗаполнено(Параметры.Заголовок) Тогда
		
		АвтоЗаголовок = Ложь;
		Заголовок = Параметры.Заголовок;
		
	КонецЕсли;
	
	Дата = Параметры.Дата;
	
	Если ЗначениеЗаполнено(Параметры.ОтборПоТипуНоменклатуры) Тогда
		ОтборПоТипуНоменклатуры = Параметры.ОтборПоТипуНоменклатуры;
		
		ТекстОтбора = НСтр("ru='Для выбора доступна номенклатура с типом: %Тип%.'");
		Тип = "";
		Для каждого ТипНоменклатурыОтбор Из Параметры.ОтборПоТипуНоменклатуры Цикл
			Тип = Тип + ТипНоменклатурыОтбор + ", ";
		КонецЦикла;
		ТекстОтбора = СтрЗаменить(ТекстОтбора, "%Тип%", Лев(Тип, СтрДлина(Тип)-2));
		
		Элементы.ОтборНадпись.Заголовок = ТекстОтбора;
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Параметры.ОтборПоТипуНоменклатуры));
		Элементы.ТоварыНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		Элементы.ТоварыНоменклатураПоставщика.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	КонецЕсли;
	
	ИнициализироватьТабличныйДокумент();
	УстановитьДоступностьКомандБуфераОбмена();
	УстановитьДоступностьКолонок();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если СоздатьНомераГТД Или ПроверятьЗаполнениеХарактеристик Тогда
		Для ТекИндекс = 0 По Объект.Товары.Количество()-1 Цикл
			
			АдресОшибки = НСтр("ru='в строке %НомерСтроки% списка ""Товары""'");
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", Объект.Товары[ТекИндекс].НомерСтроки);
			
			Если Объект.Товары[ТекИндекс].СоздатьНомерГТД И Объект.Товары[ТекИндекс].ВедетсяУчетПоГТД И Не ЗначениеЗаполнено(Объект.Товары[ТекИндекс].СтранаПроисхождения) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Не заполнена колонка ""Страна происхождения""'") + АдресОшибки,
					,
					"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Объект.Товары[ТекИндекс].НомерСтроки, "СтранаПроисхождения"),
					,
					Отказ);
				
			КонецЕсли;
			
			// Проверка заполнения характеристик.
			Если Объект.Товары[ТекИндекс].ХарактеристикиИспользуются И Не ЗначениеЗаполнено(Объект.Товары[ТекИндекс].Характеристика) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Не заполнена колонка ""Характеристика""'") + " " + АдресОшибки,
					,
					"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Объект.Товары[ТекИндекс].НомерСтроки, "Характеристика"),
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.Товары.ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураПараметровСопоставленнияНоменклатуры = Новый Структура;
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("Ссылка",                             Объект);
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("Контрагент",                         Контрагент);
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("НеВыполнятьПроверкуДляПользователя", Ложь);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("УчитыватьНДС, Дата", УчетНДС, Дата));
	Если Не НеПересчитыватьСуммовыеПоказатели Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если Не ТекущаяСтрока.ВедетсяУчетПоГТД
		И (ЗначениеЗаполнено(ТекущаяСтрока.НомерГТД)
		ИЛИ ЗначениеЗаполнено(ТекущаяСтрока.ЗагружаемыйНомерГТД)) Тогда
		ТекущаяСтрока.НомерГТД = Неопределено;
		ТекущаяСтрока.ЗагружаемыйНомерГТД = "";
		ТекущаяСтрока.СоздатьНомерГТД = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПараметровСопоставленнияНоменклатуры = Новый Структура;
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("Ссылка",                             Объект);
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("Контрагент",                            Контрагент);
	СтруктураПараметровСопоставленнияНоменклатуры.Вставить("НеВыполнятьПроверкуДляПользователя", Ложь);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЦенаВключаетНДС, НеПересчитыватьСуммовыеПоказатели);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	Если НеПересчитыватьСуммовыеПоказатели Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЦенаВключаетНДС, Истина);
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	Если НеПересчитыватьСуммовыеПоказатели Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	Если НеПересчитыватьСуммовыеПоказатели Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	Если НеПересчитыватьСуммовыеПоказатели Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено И Элемент.ТекущийЭлемент.Имя = "ТоварыНоменклатура" Тогда
		ЗаполнитьСписокВыбораНоменклатурыХарактеристик(ТекущаяСтрока.КодСтроки);
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТоварыХарактеристика" Тогда
		ЗаполнитьСписокВыбораНоменклатурыХарактеристик(ТекущаяСтрока.КодСтроки, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТекущаяСтрока.СоздатьНомерГТД = НЕ ЗначениеЗаполнено(ТекущаяСтрока.НомерГТД);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтранаПроисхожденияОчистка(Элемент, СтандартнаяОбработка)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТекущаяСтрока.ЗагружаемаяСтранаПроисхождения = "";
КонецПроцедуры

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	ТаблицаТоваров = КопированиеСтрокСервер.СтрокиИзБуфераОбмена();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("УчитыватьНДС, Дата", УчетНДС, Дата));
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЦенаВключаетНДС, НеПересчитыватьСуммовыеПоказатели);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
		МассивЭлементов,
		"Доступность", 
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки"));
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПоискИСопоставлениеНоменклатуры

&НаСервере
Процедура ДобавитьПодобраннуюНоменклатуру(КодСтроки, НайденнаяНоменклатура, НайденнаяХарактеристика = Неопределено)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Номенклатура", НайденнаяНоменклатура);
	Если Не НайденнаяХарактеристика = Неопределено Тогда
		СтруктураОтбора.Вставить("Характеристика", НайденнаяХарактеристика);
	КонецЕсли;	
	СтруктураОтбора.Вставить("КодСтроки", КодСтроки);
	
	ПодобранныеРанееТовары = ПодобраннаяНоменклатура.НайтиСтроки(СтруктураОтбора);
	Если ПодобранныеРанееТовары.Количество() = 0 Тогда
		ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
		ПодобраннаяСтрока.КодСтроки = КодСтроки;
		ПодобраннаяСтрока.Номенклатура = НайденнаяНоменклатура;
		Если Не НайденнаяХарактеристика = Неопределено Тогда
			ПодобраннаяСтрока.Характеристика = НайденнаяХарактеристика;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоискПоСвязаннойТаблице(МассивНайденныхРанее, СвязаннаяТаблица, Связи, ОтборПоСвязаннойТаблице, ПоляНайденныхРанееДляРезультата, ПоляСвязаннойТаблицыДляРезультата)
	
	Результат = Новый ТаблицаЗначений;
	Для каждого ПолеДляРезультата из ПоляНайденныхРанееДляРезультата Цикл
		Результат.Колонки.Добавить(ПолеДляРезультата.Значение);
	КонецЦикла;	
	Для каждого ПолеДляРезультата из ПоляСвязаннойТаблицыДляРезультата Цикл
		Результат.Колонки.Добавить(ПолеДляРезультата.Значение);
	КонецЦикла;	
	
	Если МассивНайденныхРанее.Количество() > 0 Тогда
		Для каждого СтрокаПоКлючу из МассивНайденныхРанее Цикл
			ОтборДляПоиска = Новый Структура;
			Для каждого Связь из Связи Цикл
				ОтборДляПоиска.Вставить(Связь.Значение, СтрокаПоКлючу[Связь.Ключ]);
			КонецЦикла;
			Для каждого ЭлементОтбора из ОтборПоСвязаннойТаблице Цикл
				ОтборДляПоиска.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
			КонецЦикла;
			НайденныеПоОтбору = СвязаннаяТаблица.НайтиСтроки(ОтборДляПоиска);
			Для каждого СтрокаНайденнаяПоОтбору из НайденныеПоОтбору Цикл
				НоваяСтрокаРезультата = Результат.Добавить();
				Для каждого ПолеДляРезультата из ПоляНайденныхРанееДляРезультата Цикл
					НоваяСтрокаРезультата[ПолеДляРезультата.Значение] = СтрокаПоКлючу[ПолеДляРезультата.Ключ];
				КонецЦикла;	
				Для каждого ПолеДляРезультата из ПоляСвязаннойТаблицыДляРезультата Цикл
					НоваяСтрокаРезультата[ПолеДляРезультата.Значение] = СтрокаНайденнаяПоОтбору[ПолеДляРезультата.Ключ];
				КонецЦикла;	
			КонецЦикла;	
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Результат;
КонецФункции	

&НаСервере
Процедура СопоставитьДанныеТабличногоДокументаСДаннымиИБ()
	
	УточнениеНоменклатуры.Очистить();
	ПодобраннаяНоменклатура.Очистить();
	НайденныеСтроки = ПодобраннаяНоменклатура.Выгрузить();

	Объект.Товары.Очистить();
	
	ДанныеИБ = ПолучитьДанныеИБпоНоменклатуреИхарактеристикам();
	ТаблицаНоменклатуры = ДанныеИБ.ТаблицаНоменклатуры;
	ТаблицаХарактеристик = ДанныеИБ.ТаблицаХарактеристик;
	
	НомераКолонок = Новый Соответствие;
	НомерКолонки = 1;
	
	НомераКолонок.Вставить("КолонкаШтрихкод", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	НомерКолонки = НомерКолонки +1;
	НомераКолонок.Вставить("КолонкаКод", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	НомерКолонки = НомерКолонки +1;
	НомераКолонок.Вставить("КолонкаАртикул", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	НомерКолонки = НомерКолонки +1;
	НомераКолонок.Вставить("КолонкаНоменклатура", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	НомерКолонки = НомерКолонки +1;
	Если ИспользоватьХарактеристикиНоменклатуры Тогда
		НомераКолонок.Вставить("КолонкаХарактеристика", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
		НомерКолонки = НомерКолонки +1;
	КонецЕсли;
	Если ЗагружатьКоличество Тогда
		НомераКолонок.Вставить("КолонкаКоличество", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
		НомерКолонки = НомерКолонки +1;
	КонецЕсли;
	Если ЗагружатьЦены Тогда
		НомераКолонок.Вставить("КолонкаЦена", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
		НомерКолонки = НомерКолонки +1;
	КонецЕсли;
	Если ЗагружатьСуммы Тогда
		НомераКолонок.Вставить("КолонкаСумма", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
		НомерКолонки = НомерКолонки +1;
		Если УчетНДС Тогда
			НомераКолонок.Вставить("КолонкаСуммаНДС", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
			НомерКолонки = НомерКолонки +1;
			Если НЕ ЦенаВключаетНДС Тогда
				НомераКолонок.Вставить("КолонкаСуммаСНДС", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
				НомерКолонки = НомерКолонки +1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЗагружатьГТД Тогда
		НомераКолонок.Вставить("КолонкаНомерГТД", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
		НомерКолонки = НомерКолонки +1;
		НомераКолонок.Вставить("КолонкаСтранаПроисхождения", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
		НомерКолонки = НомерКолонки +1;
	КонецЕсли;
	
	ВысотаШапки = 1;
	НомерСтроки = ВысотаШапки + 1 ;
	
	СтроковыйНомер = Формат(НомерСтроки, "ЧН=0; ЧГ=0");
	ЗаполненыНоменклатураКодАртикулШтрихкод = ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаАртикул")).Текст)
		Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаНоменклатура")).Текст)
		Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаШтрихкод")).Текст)
		Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаКод")).Текст);
	ЕстьОшибкиРаспознавания = Ложь;
	
	Пока ЗаполненыНоменклатураКодАртикулШтрихкод Цикл
		
		НоваяСтрока = УточнениеНоменклатуры.Добавить();
		Количество = 0;
		НоваяСтрока.КодСтроки = НомерСтроки;
		
		Попытка
			НоваяСтрока.Штрихкод = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаШтрихкод")).Текст;
			НоваяСтрока.Код = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаКод")).Текст;
			НоваяСтрока.Артикул = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаАртикул")).Текст;
			НоваяСтрока.НоменклатураНаименование = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаНоменклатура")).Текст;
			Если ИспользоватьХарактеристикиНоменклатуры Тогда
				НоваяСтрока.ХарактеристикаНаименование = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаХарактеристика")).Текст;
			КонецЕсли;
			Если ЗагружатьКоличество Тогда
				Количество = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаКоличество")).Текст;
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Если ЗагружатьКоличество Тогда
			ПрисвоитьЧисловоеЗначениеПриЗаполненииТЧ(НоваяСтрока.Количество, Количество, НомерСтроки, "Количество", ВысотаШапки);
		КонецЕсли;
		
		Если ЗагружатьЦены Тогда
			Цена = 0;
			Попытка
				Цена = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаЦена")).Текст;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			ПрисвоитьЧисловоеЗначениеПриЗаполненииТЧ(НоваяСтрока.Цена, Цена, НомерСтроки, "Цена", ВысотаШапки);
			
		КонецЕсли;
		
		Если ЗагружатьСуммы Тогда
			Сумма               = 0;
			СуммаНДС            = 0;
			СуммаСНДС           = 0;
			
			Попытка
				
				Если НомераКолонок.Получить("КолонкаСумма") <>  Неопределено Тогда
					Сумма     = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаСумма")).Текст;
				КонецЕсли;
				Если НомераКолонок.Получить("КолонкаСуммаНДС") <>  Неопределено Тогда
					СуммаНДС  = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаСуммаНДС")).Текст;
				КонецЕсли;
				Если НомераКолонок.Получить("КолонкаСуммаСНДС") <>  Неопределено Тогда
					СуммаСНДС = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаСуммаСНДС")).Текст;
				КонецЕсли;
				
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			ПрисвоитьЧисловоеЗначениеПриЗаполненииТЧ(НоваяСтрока.Сумма, Сумма, НомерСтроки, "Сумма", ВысотаШапки);
			ПрисвоитьЧисловоеЗначениеПриЗаполненииТЧ(НоваяСтрока.СуммаНДС, СуммаНДС, НомерСтроки, "СуммаНДС", ВысотаШапки);
			ПрисвоитьЧисловоеЗначениеПриЗаполненииТЧ(НоваяСтрока.СуммаСНДС, СуммаСНДС, НомерСтроки, "СуммаСНДС", ВысотаШапки);
			
		КонецЕсли;
		
		Если ЗагружатьГТД Тогда
			Попытка
				НомерГТД            = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаНомерГТД")).Текст;
				СтранаПроисхождения = ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаСтранаПроисхождения")).Текст;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			Если ЗначениеЗаполнено(НомерГТД) Тогда
				НоваяСтрока.НомерГТД             = СокрЛП(НомерГТД);
				Если ЗначениеЗаполнено(СтранаПроисхождения) Тогда
					НоваяСтрока.СтранаПроисхождения  = ВРег(СокрЛП(СтранаПроисхождения));
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаПоискаКод            = ВРег(СтрЗаменить(НоваяСтрока.Код, " ", "")); 
		СтрокаПоискаАртикул        = ВРег(СтрЗаменить(НоваяСтрока.Артикул, " ", "")); 
		СтрокаПоискаНоменклатура   = ВРег(СтрЗаменить(НоваяСтрока.НоменклатураНаименование, " ", ""));
		СтрокаПоискаХарактеристика = ВРег(СтрЗаменить(НоваяСтрока.ХарактеристикаНаименование, " ", ""));
		
		ТоварНайден = Ложь;
		Если ЗначениеЗаполнено(НоваяСтрока.Штрихкод) Тогда
			ШтрихКодБезПробелов = СтрЗаменить(НоваяСтрока.Штрихкод, Символ(160), "");
			НоваяСтрока.Штрихкод = СтрЗаменить(ШтрихКодБезПробелов, Символ(32), "");
			ВыборкаНайденныхНоменклатур = ПодобратьНоменклатуруПоШтрихкоду(НоваяСтрока.Штрихкод);
			Если ВыборкаНайденныхНоменклатур.Количество() > 0 Тогда
				ТоварНайден = Истина;
				Пока ВыборкаНайденныхНоменклатур.Следующий() Цикл
					ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
					ПодобраннаяСтрока.КодСтроки = НомерСтроки;
					ЗаполнитьЗначенияСвойств(ПодобраннаяСтрока, ВыборкаНайденныхНоменклатур);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ТоварНайден Тогда
			
			Если ЗначениеЗаполнено(НоваяСтрока.Код) И ЗначениеЗаполнено(НоваяСтрока.ХарактеристикаНаименование) Тогда
				
				Связи = Новый Структура("ЗначениеДляОтбораХарактеристик", "ЗначениеДляОтбораХарактеристик");
				ПоляНайденныхРанееДляРезультата = Новый Структура("Номенклатура", "Номенклатура");
				ПоляСвязаннойТаблицыДляРезультата = Новый Структура("Характеристика", "Характеристика");
				
				НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Код", СтрокаПоискаКод));
				ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеХарактеристикиПоиск", СтрокаПоискаХарактеристика);
				НайденныеСтроки = ПоискПоСвязаннойТаблице(НайденнаяНоменклатураПоКлючу, ТаблицаХарактеристик, Связи, ОтборПоСвязаннойТаблице, ПоляНайденныхРанееДляРезультата, ПоляСвязаннойТаблицыДляРезультата);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденныеСтроки = ПоискПоСвязаннойТаблице(НайденнаяНоменклатураПоКлючу, ТаблицаХарактеристик, Связи, Новый Структура, ПоляНайденныхРанееДляРезультата, ПоляСвязаннойТаблицыДляРезультата);
				КонецЕсли;
				Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
					ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НайденнаяСтрока.Номенклатура, НайденнаяСтрока.Характеристика);
				КонецЦикла;	
				
			ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Артикул) И ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) И ЗначениеЗаполнено(НоваяСтрока.ХарактеристикаНаименование) Тогда
				
				Связи = Новый Структура("ЗначениеДляОтбораХарактеристик", "ЗначениеДляОтбораХарактеристик");
				ПоляНайденныхРанееДляРезультата = Новый Структура("Номенклатура", "Номенклатура");
				ПоляСвязаннойТаблицыДляРезультата = Новый Структура("Характеристика", "Характеристика");
				НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПоиск", СтрокаПоискаАртикул, СтрокаПоискаНоменклатура));
				ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеХарактеристикиПоиск", СтрокаПоискаХарактеристика);
				НайденныеСтроки = ПоискПоСвязаннойТаблице(НайденнаяНоменклатураПоКлючу, ТаблицаХарактеристик, Связи, ОтборПоСвязаннойТаблице, ПоляНайденныхРанееДляРезультата, ПоляСвязаннойТаблицыДляРезультата);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденнаяНоменклатураПоАртикулНаименованиеПолное = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПолноеПоиск", СтрокаПоискаАртикул, СтрокаПоискаНоменклатура));
					ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеХарактеристикиПоиск", СтрокаПоискаХарактеристика);
					НайденныеСтроки = ПоискПоСвязаннойТаблице(НайденнаяНоменклатураПоАртикулНаименованиеПолное, ТаблицаХарактеристик, Связи, ОтборПоСвязаннойТаблице, ПоляНайденныхРанееДляРезультата, ПоляСвязаннойТаблицыДляРезультата);
				КонецЕсли;
				
				Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
					ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НайденнаяСтрока.Номенклатура, НайденнаяСтрока.Характеристика);
				КонецЦикла;
				
			ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Код) И НЕ ЗначениеЗаполнено(НоваяСтрока.ХарактеристикаНаименование) Тогда
				
				НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Код, НаименованиеПоиск", СтрокаПоискаКод, СтрокаПоискаНоменклатура));
				Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
					НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Код, НаименованиеПолноеПоиск", СтрокаПоискаКод, СтрокаПоискаНоменклатура));
					Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
						НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Код", СтрокаПоискаКод));
					КонецЕсли;
				КонецЕсли;
				Для каждого НоменклатураПоКлючу из НайденнаяНоменклатураПоКлючу Цикл
					ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НоменклатураПоКлючу.Номенклатура);
				КонецЦикла;
				
			ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Артикул) И ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) И НЕ ЗначениеЗаполнено(НоваяСтрока.ХарактеристикаНаименование) Тогда
				НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПоиск", СтрокаПоискаАртикул,	СтрокаПоискаНоменклатура));
				Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
					НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПолноеПоиск", СтрокаПоискаАртикул, СтрокаПоискаНоменклатура));
					Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
						НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск", СтрокаПоискаАртикул));
					КонецЕсли;
				КонецЕсли;
				Для каждого НоменклатураПоКлючу из НайденнаяНоменклатураПоКлючу Цикл
					ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НоменклатураПоКлючу.Номенклатура);
				КонецЦикла;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(НоваяСтрока.Артикул) И ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) И ЗначениеЗаполнено(НоваяСтрока.ХарактеристикаНаименование) Тогда
				
				Связи = Новый Структура("ЗначениеДляОтбораХарактеристик", "ЗначениеДляОтбораХарактеристик");
				ПоляНайденныхРанееДляРезультата = Новый Структура("Характеристика", "Характеристика");
				ПоляСвязаннойТаблицыДляРезультата = Новый Структура("Номенклатура", "Номенклатура");
				
				НайденныеХарактеристикиПоКлючу = ТаблицаХарактеристик.НайтиСтроки(Новый Структура("НаименованиеХарактеристикиПоиск", СтрокаПоискаХарактеристика));
				ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеПоиск", СтрокаПоискаНоменклатура);
				НайденныеСтроки = ПоискПоСвязаннойТаблице(НайденныеХарактеристикиПоКлючу, ТаблицаНоменклатуры, Связи, ОтборПоСвязаннойТаблице, ПоляНайденныхРанееДляРезультата, ПоляСвязаннойТаблицыДляРезультата);
				Если НайденныеСтроки.Количество() = 0 Тогда
					ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеПолноеПоиск", СтрокаПоискаНоменклатура);
					НайденныеСтроки = ПоискПоСвязаннойТаблице(НайденныеХарактеристикиПоКлючу, ТаблицаНоменклатуры, Связи, ОтборПоСвязаннойТаблице, ПоляНайденныхРанееДляРезультата, ПоляСвязаннойТаблицыДляРезультата);
				КонецЕсли;
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеПоиск",	СтрокаПоискаНоменклатура));
					Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
						НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеПолноеПоиск", СтрокаПоискаНоменклатура));
					КонецЕсли;
					Для каждого НоменклатураПоКлючу из НайденнаяНоменклатураПоКлючу Цикл
						
						НайденныеХарактеристикиПоКлючу = ТаблицаХарактеристик.НайтиСтроки(Новый Структура("ЗначениеДляОтбораХарактеристик", НоменклатураПоКлючу.ЗначениеДляОтбораХарактеристик));
						Для каждого ХарактеристикаПоКлючу из НайденныеХарактеристикиПоКлючу Цикл
							ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НоменклатураПоКлючу.Номенклатура, ХарактеристикаПоКлючу.Характеристика);
						КонецЦикла;
						
					КонецЦикла;
				Иначе
					Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
						ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НайденнаяСтрока.Номенклатура, НайденнаяСтрока.Характеристика);
					КонецЦикла;
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Артикул) И НЕ ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) И НЕ ЗначениеЗаполнено(НоваяСтрока.ХарактеристикаНаименование) Тогда
				
				НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск",	СтрокаПоискаАртикул));
				
				Для каждого НоменклатураПоКлючу из НайденнаяНоменклатураПоКлючу Цикл
					ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НоменклатураПоКлючу.Номенклатура);
				КонецЦикла;
				
			ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Артикул) И НЕ ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) И ЗначениеЗаполнено(НоваяСтрока.ХарактеристикаНаименование) Тогда
				
				Связи = Новый Структура("ЗначениеДляОтбораХарактеристик", "ЗначениеДляОтбораХарактеристик");
				ПоляНайденныхРанееДляРезультата = Новый Структура("Номенклатура", "Номенклатура");
				ПоляСвязаннойТаблицыДляРезультата = Новый Структура("Характеристика", "Характеристика");
				НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("АртикулПоиск", СтрокаПоискаАртикул));
				ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеХарактеристикиПоиск", СтрокаПоискаХарактеристика);
				НайденныеСтроки = ПоискПоСвязаннойТаблице(НайденнаяНоменклатураПоКлючу, ТаблицаХарактеристик, Связи, ОтборПоСвязаннойТаблице, ПоляНайденныхРанееДляРезультата, ПоляСвязаннойТаблицыДляРезультата);
				
				Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
					ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НайденнаяСтрока.Номенклатура, НайденнаяСтрока.Характеристика);
				КонецЦикла;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(НоваяСтрока.Артикул) И ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) И НЕ ЗначениеЗаполнено(НоваяСтрока.ХарактеристикаНаименование) Тогда
				
				НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеПоиск",	СтрокаПоискаНоменклатура));
				Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
					НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеПолноеПоиск", СтрокаПоискаНоменклатура));
				КонецЕсли;
				Для каждого НоменклатураПоКлючу из НайденнаяНоменклатураПоКлючу Цикл
					ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НоменклатураПоКлючу.Номенклатура);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Заполнение тч Товары.
		НоваяСтрокаТовары = Объект.Товары.Добавить();
		НоваяСтрокаТовары.ЗагружаемаяНоменклатура    = НоваяСтрока.НоменклатураНаименование;
		НоваяСтрокаТовары.ЗагружаемаяХарактеристика  = НоваяСтрока.ХарактеристикаНаименование;
		НоваяСтрокаТовары.ЗагружаемыйАртикул         = НоваяСтрока.Артикул;
		НоваяСтрокаТовары.ЗагружаемыйШтрихкод        = НоваяСтрока.Штрихкод;
		НоваяСтрокаТовары.ЗагружаемыйКод             = НоваяСтрока.Код;
		НоваяСтрокаТовары.ЗагружаемыйНомерГТД        = НоваяСтрока.НомерГТД;
		НоваяСтрокаТовары.ЗагружаемаяСтранаПроисхождения = НоваяСтрока.СтранаПроисхождения;
		Если ЗагружатьКоличество Тогда
			НоваяСтрокаТовары.КоличествоУпаковок        = НоваяСтрока.Количество;
		КонецЕсли;
		НоваяСтрокаТовары.КодСтроки                  = НомерСтроки;
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, НоваяСтрока,,"Артикул");
		
		МассивПодобраннойНоменклатуры = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("КодСтроки", НомерСтроки));
		
		Если МассивПодобраннойНоменклатуры.Количество() = 1 Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, МассивПодобраннойНоменклатуры.Получить(0));
		ИначеЕсли МассивПодобраннойНоменклатуры.Количество() = 0 Тогда
			ТекстОшибки = НСтр("ru='По данным для поиска в строке %НомерСтроки% совпадений не найдено.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", НомерСтроки-ВысотаШапки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Иначе
			ТекстОшибки = НСтр("ru='По данным для поиска в строке %НомерСтроки% найдено несколько совпадений.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", НомерСтроки-ВысотаШапки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("УчитыватьНДС, Дата", УчетНДС, Дата));
		Если ЗагружатьКоличество Тогда
		
			Если НоваяСтрокаТовары.Количество > 0 Тогда
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			КонецЕсли;

		КонецЕсли;

		Если НЕ НеПересчитыватьСуммовыеПоказатели Тогда
			СтруктураПересчетаСуммы = Новый Структура;
			СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СуммаНДС) Тогда
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СуммаСНДС) Тогда
				СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Сумма) Тогда
				СтруктураДействий.Вставить("ПересчитатьСумму");
			КонецЕсли;
			
		КонецЕсли;
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(НоваяСтрокаТовары, СтруктураДействий, КэшированныеЗначения);
		
		НомерСтроки = НомерСтроки + 1;
		СтроковыйНомер = Формат(НомерСтроки, "ЧН=0; ЧГ=0");
		
		Попытка
			ЗаполненыНоменклатураКодАртикулШтрихкод = ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаАртикул")).Текст)
				Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаНоменклатура")).Текст)
				Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаШтрихкод")).Текст)
				Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + НомераКолонок.Получить("КолонкаКод")).Текст);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	Если ЗагружатьГТД Тогда
		ДополнитьТоварыНомерамиГТД();
	КонецЕсли;
	
	УточнениеНоменклатуры.Очистить();
	
КонецПроцедуры

&НаСервере
Функция ПодобратьНоменклатуруПоШтрихкоду(Штрихкод)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Владелец КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ИСТИНА
	|	И ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
	|	И &ШтрихкодыТекстУсловияОтбор";
	
	ШтрихкодыТекстУсловияОтбор = "ИСТИНА";
	Если ЗначениеЗаполнено(ОтборПоТипуНоменклатуры) Тогда
		
		ОтборыПоТипуНоменклатуры = Новый СписокЗначений;
		Для Каждого ЭлементМассива Из ОтборПоТипуНоменклатуры Цикл
			ОтборыПоТипуНоменклатуры.Добавить(ЭлементМассива);
		КонецЦикла;
		
		ШтрихкодыТекстУсловияОтбор = "ШтрихкодыНоменклатуры.Владелец.ТипНоменклатуры В (&ОтборПоТипуНоменклатуры)";
		
		Запрос.УстановитьПараметр("ОтборПоТипуНоменклатуры", ОтборПоТипуНоменклатуры);	
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ШтрихкодыТекстУсловияОтбор", ШтрихкодыТекстУсловияОтбор);
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	
	Возврат Запрос.Выполнить().Выбрать();	
КонецФункции	

&НаСервере
Функция ПолучитьДанныеИБпоНоменклатуреИхарактеристикам()
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаНоменклатуры", Новый ТаблицаЗначений);
	Результат.Вставить("ТаблицаХарактеристик", Новый ТаблицаЗначений);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	Номенклатура.Код КАК Код,
		|	Номенклатура.Артикул КАК Артикул,
		|	Номенклатура.Наименование КАК Наименование,
		|	Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
		|	Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
		|	НЕОПРЕДЕЛЕНО КАК ЗначениеДляОтбораХарактеристик
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.ЭтоГруппа
		|	И НЕ Номенклатура.ПометкаУдаления
		|	И Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать)
		|	И &ТекстУсловияОтбор
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка,
		|	Номенклатура.Код,
		|	Номенклатура.Артикул,
		|	Номенклатура.Наименование,
		|	Номенклатура.НаименованиеПолное,
		|	Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик,
		|	ВЫБОР
		|		КОГДА Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
		|			ТОГДА Номенклатура.Ссылка
		|		КОГДА Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
		|			ТОГДА Номенклатура.ВидНоменклатуры
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО (ВЫБОР
		|				КОГДА Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
		|					ТОГДА Номенклатура.Ссылка
		|				КОГДА Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
		|					ТОГДА Номенклатура.ВидНоменклатуры
		|				
		|			КОНЕЦ = ХарактеристикиНоменклатуры.Владелец)
		|ГДЕ
		|	Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик <> ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать)
		|	И НЕ Номенклатура.ПометкаУдаления
		|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
		|	И &ТекстУсловияОтбор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаНоменклатуры.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
		|	ТаблицаНоменклатуры.ЗначениеДляОтбораХарактеристик КАК ЗначениеДляОтбораХарактеристик
		|ПОМЕСТИТЬ ПараметрыОтбораХарактеристик
		|ИЗ
		|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПараметрыОтбора.ЗначениеДляОтбораХарактеристик КАК ЗначениеДляОтбораХарактеристик,
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
		|	ХарактеристикиНоменклатуры.Наименование КАК Наименование
		|ПОМЕСТИТЬ ТаблицаХарактеристик
		|ИЗ
		|	ПараметрыОтбораХарактеристик КАК ПараметрыОтбора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО ПараметрыОтбора.ЗначениеДляОтбораХарактеристик = ХарактеристикиНоменклатуры.Владелец
		|ГДЕ
		|	НЕ ПараметрыОтбора.ЗначениеДляОтбораХарактеристик = НЕОПРЕДЕЛЕНО
		|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗначениеДляОтбораХарактеристик,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Хар.Характеристика.Наименование КАК НаименованиеХарактеристики,
		|	Хар.Характеристика КАК Характеристика,
		|	Хар.ЗначениеДляОтбораХарактеристик КАК ЗначениеДляОтбораХарактеристик
		|ИЗ
		|	ТаблицаХарактеристик КАК Хар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Ном.Код КАК Код,
		|	Ном.Артикул КАК Артикул,
		|	Ном.Наименование КАК Наименование,
		|	Ном.НаименованиеПолное КАК НаименованиеПолное,
		|	Ном.Номенклатура КАК Номенклатура,
		|	Ном.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
		|	Ном.ЗначениеДляОтбораХарактеристик КАК ЗначениеДляОтбораХарактеристик
		|ИЗ
		|	ТаблицаНоменклатуры КАК Ном";
	
	ТекстУсловияОтбор = "ИСТИНА";
	
	Если ЗначениеЗаполнено(ОтборПоТипуНоменклатуры) Тогда
		
		ОтборыПоТипуНоменклатуры = Новый СписокЗначений;
		Для Каждого ЭлементМассива Из ОтборПоТипуНоменклатуры Цикл
			ОтборыПоТипуНоменклатуры.Добавить(ЭлементМассива);
		КонецЦикла;
		ТекстУсловияОтбор = "Номенклатура.ТипНоменклатуры В (&ОтборПоТипуНоменклатуры)";
		Запрос.УстановитьПараметр("ОтборПоТипуНоменклатуры", ОтборПоТипуНоменклатуры);
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ТекстУсловияОтбор", ТекстУсловияОтбор);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Для Каждого КолонкаРезультата Из РезультатЗапроса[3].Колонки Цикл
		Результат.ТаблицаХарактеристик.Колонки.Добавить(КолонкаРезультата.Имя);
	КонецЦикла;
	Результат.ТаблицаХарактеристик.Колонки.Добавить("НаименованиеХарактеристикиПоиск");
	ВыборкаТаблицыХарактеристик = РезультатЗапроса[3].Выбрать();
	Пока ВыборкаТаблицыХарактеристик.Следующий() Цикл
		НоваяСтрокаТаблицыХарактеристик = Результат.ТаблицаХарактеристик.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыХарактеристик, ВыборкаТаблицыХарактеристик);
		
		НоваяСтрокаТаблицыХарактеристик.НаименованиеХарактеристикиПоиск = ВРег(СтрЗаменить(НоваяСтрокаТаблицыХарактеристик.НаименованиеХарактеристики, " ", ""));
	КонецЦикла;
	
	Для Каждого КолонкаРезультата Из РезультатЗапроса[4].Колонки Цикл
		Результат.ТаблицаНоменклатуры.Колонки.Добавить(КолонкаРезультата.Имя);
	КонецЦикла;
	Результат.ТаблицаНоменклатуры.Колонки.Добавить("АртикулПоиск");
	Результат.ТаблицаНоменклатуры.Колонки.Добавить("НаименованиеПоиск");
	Результат.ТаблицаНоменклатуры.Колонки.Добавить("НаименованиеПолноеПоиск");
	ВыборкаТаблицыНоменклатуры = РезультатЗапроса[4].Выбрать();
	Пока ВыборкаТаблицыНоменклатуры.Следующий() Цикл
		НоваяСтрокаТаблицыНоменклатуры = Результат.ТаблицаНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств( НоваяСтрокаТаблицыНоменклатуры, ВыборкаТаблицыНоменклатуры);
		
		НоваяСтрокаТаблицыНоменклатуры.Код = ВРег(СтрЗаменить(НоваяСтрокаТаблицыНоменклатуры.Код, " ", ""));
		НоваяСтрокаТаблицыНоменклатуры.АртикулПоиск = ВРег(СтрЗаменить(НоваяСтрокаТаблицыНоменклатуры.Артикул, " ", ""));
		НоваяСтрокаТаблицыНоменклатуры.НаименованиеПоиск = ВРег(СтрЗаменить(НоваяСтрокаТаблицыНоменклатуры.Наименование, " ", ""));
		НоваяСтрокаТаблицыНоменклатуры.НаименованиеПолноеПоиск = ВРег(СтрЗаменить(НоваяСтрокаТаблицыНоменклатуры.НаименованиеПолное, " ", ""));
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ДополнитьТоварыНомерамиГТД()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаГТД.КодСтроки КАК КодСтроки,
	|	ТаблицаГТД.НомерГТД КАК НомерГТД,
	|	ТаблицаГТД.СтранаПроисхождения КАК СтранаПроисхождения
	|ПОМЕСТИТЬ ТаблицаНомеровГТД
	|ИЗ
	|	&ТаблицаГТД КАК ТаблицаГТД
	|ГДЕ
	|	ТаблицаГТД.НомерГТД <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеСправочника.Ссылка КАК Ссылка,
	|	ДанныеСправочника.СтранаПроисхождения.Наименование КАК СтранаПроисхождения,
	|	ТаблицаНомеровГТД.НомерГТД КАК НомерГТД,
	|	ТаблицаНомеровГТД.КодСтроки КАК КодСтроки
	|ИЗ
	|	ТаблицаНомеровГТД КАК ТаблицаНомеровГТД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК ДанныеСправочника
	|		ПО ТаблицаНомеровГТД.НомерГТД = ДанныеСправочника.Код 
	|			И ТаблицаНомеровГТД.СтранаПроисхождения = ДанныеСправочника.СтранаПроисхождения.Наименование
	|ГДЕ
	|	НЕ ДанныеСправочника.ПометкаУдаления
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНомеровГТД.КодСтроки КАК КодСтроки,
	|	ДанныеСправочника.Ссылка КАК СтранаПроисхождения
	|ИЗ
	|	ТаблицаНомеровГТД КАК ТаблицаНомеровГТД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтраныМира КАК ДанныеСправочника
	|		ПО ТаблицаНомеровГТД.СтранаПроисхождения = ДанныеСправочника.Наименование
	|ГДЕ
	|	НЕ ДанныеСправочника.ПометкаУдаления");
	ТаблицаГТД = УточнениеНоменклатуры.Выгрузить(,"КодСтроки, НомерГТД, СтранаПроисхождения");
	Запрос.УстановитьПараметр("ТаблицаГТД", ТаблицаГТД);
	Результат = Запрос.ВыполнитьПакет();

	ВыборкаГТД = Результат[1].Выгрузить();
	ВыборкаСтран = Результат[2].Выгрузить();
	
	Для каждого УточняемаяСтрока Из ТаблицаГТД Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("КодСтроки", УточняемаяСтрока.КодСтроки); 
		Если ЗначениеЗаполнено(УточняемаяСтрока.НомерГТД) Тогда
			НайденныеСтроки = ВыборкаГТД.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 1 Тогда
				ЗаполняемыеСтрокиТаблицыТовары = Объект.Товары.НайтиСтроки(Новый Структура("КодСтроки", УточняемаяСтрока.КодСтроки));
				Если ЗаполняемыеСтрокиТаблицыТовары.Количество() = 1 Тогда
					ЗаполняемыеСтрока = ЗаполняемыеСтрокиТаблицыТовары.Получить(0);
					ЗаполняемыеСтрока.НомерГТД = НайденныеСтроки.Получить(0).Ссылка;
				КонецЕсли; 
			ИначеЕсли НайденныеСтроки.Количество() = 0 Тогда
				ЗаполняемыеСтрокиТаблицыТовары = Объект.Товары.НайтиСтроки(Новый Структура("КодСтроки", УточняемаяСтрока.КодСтроки));
				Если ЗаполняемыеСтрокиТаблицыТовары.Количество() = 1 Тогда
					ЗаполняемыеСтрока = ЗаполняемыеСтрокиТаблицыТовары.Получить(0);
					ЗаполняемыеСтрока.СоздатьНомерГТД = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		Если ЗначениеЗаполнено(УточняемаяСтрока.СтранаПроисхождения) Тогда
			НайденныеСтраны = ВыборкаСтран.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтраны.Количество() = 1 Тогда
				ЗаполняемыеСтрока.СтранаПроисхождения = НайденныеСтраны.Получить(0).СтранаПроисхождения;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ИнициализироватьТабличныйДокумент()
	
	МакетЗаполненияПоВнешнемуИсточнику = Обработки.ЗагрузкаДанныхИзВнешнихФайлов.ПолучитьМакет("МакетЗагрузкиДанных");
	ТабличныйДокумент.Очистить();
	
	ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Штрихкод");
	ТабличныйДокумент.Присоединить(ОбластьТовары);
	ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Код");
	ТабличныйДокумент.Присоединить(ОбластьТовары);
	ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Артикул");
	ТабличныйДокумент.Присоединить(ОбластьТовары);
	ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Номенклатура");
	ОбластьТовары.Параметры.ЗаголовокТоварноеМесто = НСтр("ru='Номенклатура'");
	ТабличныйДокумент.Присоединить(ОбластьТовары);
	
	Если ИспользоватьХарактеристикиНоменклатуры Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Характеристика");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	
	Если ЗагружатьКоличество Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Количество");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;

	Если ЗагружатьЦены Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Цена");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	
	Если ЗагружатьСуммы Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Сумма");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
		
		Если УчетНДС Тогда
			ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("СуммаНДС");
			ТабличныйДокумент.Присоединить(ОбластьТовары);
			Если НЕ ЦенаВключаетНДС Тогда
				ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("СуммаСНДС");
				ТабличныйДокумент.Присоединить(ОбластьТовары);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗагружатьГТД Тогда
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("НомерГТД");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
		ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("СтранаПроисхождения");
		ТабличныйДокумент.Присоединить(ОбластьТовары);
	КонецЕсли;
	
	ТабличныйДокумент.ФиксацияСверху = 1;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, ЦенаВключаетНДС, НеПересчитыватьСуммовыеПоказатели)
	
	СтруктураПересчетаСуммы = Новый Структура;
		
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если НеПересчитыватьСуммовыеПоказатели Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
			СтрокаТовары.ХарактеристикиИспользуются = НЕ
				СтрокаТовары.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик =
				Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать;
				
			СтрокаТовары.ТипНоменклатуры 	= СтрокаТовары.Номенклатура.ТипНоменклатуры;
			СтрокаТовары.Артикул 			= СтрокаТовары.Номенклатура.Артикул;
			СтрокаТовары.ВедетсяУчетПоГТД	= ЗагружатьГТД;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораНоменклатурыХарактеристик(КодТекущейСтроки, СписокХарактеристик = Ложь)
	
	Если СписокХарактеристик Тогда
		СписокВыбораХарактеристка = Элементы.ТоварыХарактеристика.СписокВыбора;
		СписокВыбораХарактеристка.Очистить();
	Иначе
		СписокВыбораНоменклатура  = Элементы.ТоварыНоменклатура.СписокВыбора;
		СписокВыбораНоменклатура.Очистить();
	КонецЕсли;
	
	МассивПодобраннойНоменклатуры = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("КодСтроки", КодТекущейСтроки));
	Для каждого ЭлементМассива Из МассивПодобраннойНоменклатуры Цикл
		Если СписокХарактеристик Тогда
			Если СписокВыбораХарактеристка.НайтиПоЗначению(ЭлементМассива.Характеристика) = Неопределено Тогда
				СписокВыбораХарактеристка.Добавить(ЭлементМассива.Характеристика);
			КонецЕсли;
		Иначе
			Если СписокВыбораНоменклатура.НайтиПоЗначению(ЭлементМассива.Номенклатура) = Неопределено Тогда
				СписокВыбораНоменклатура.Добавить(ЭлементМассива.Номенклатура);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВХранилище()

	Товары = Объект.Товары.Выгрузить();
	
	ТоварыДляПереноса = Товары.СкопироватьКолонки();
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("УчитыватьНДС, Дата", УчетНДС, Дата));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьСтрануПроисхождения");
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		НоваяСтрока = ТоварыДляПереноса.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		
		Если ЗначениеЗаполнено(НоваяСтрока.НомерГТД)
			И Не ЗначениеЗаполнено(НоваяСтрока.СтранаПроисхождения) Тогда
			
			ПараметрыЗаполненияСтраныПроисхождения = Новый Структура("НомерГТД", НоваяСтрока.НомерГТД);
			Действия = Новый Структура("ЗаполнитьСтрануПроисхождения", ПараметрыЗаполненияСтраныПроисхождения);
			
			ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ТоварыДляПереноса);
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьНомерГТД(НомерГТД, СтранаПроисхождения)
	
	НовыйНомерГТД = Справочники.НомераГТД.СоздатьЭлемент();
	НовыйНомерГТД.Код = НомерГТД;
	НовыйНомерГТД.СтранаПроисхождения = СтранаПроисхождения;
	НовыйНомерГТД.ОбменДанными.Загрузка = Истина;
	Попытка 
		НовыйНомерГТД.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат НовыйНомерГТД.Ссылка;
	
КонецФункции

&НаСервере
Процедура СоздатьНомераГТД()
	
	ТаблицаСоздаваемыхНомеровГТД = Объект.Товары.Выгрузить(Новый Структура("СоздатьНомерГТД, ВедетсяУчетПоГТД", Истина, Истина),"ЗагружаемыйНомерГТД, СтранаПроисхождения");
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаГТД.ЗагружаемыйНомерГТД КАК ЗагружаемыйНомерГТД,
	|	ТаблицаГТД.СтранаПроисхождения КАК СтранаПроисхождения
	|ПОМЕСТИТЬ ТаблицаНомеровГТД
	|ИЗ
	|	&ТаблицаГТД КАК ТаблицаГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеСправочника.Ссылка КАК НомерГТД,
	|	ТаблицаНомеровГТД.ЗагружаемыйНомерГТД КАК ЗагружаемыйНомерГТД,
	|	ТаблицаНомеровГТД.СтранаПроисхождения КАК СтранаПроисхождения
	|ИЗ
	|	ТаблицаНомеровГТД КАК ТаблицаНомеровГТД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК ДанныеСправочника
	|		ПО ТаблицаНомеровГТД.ЗагружаемыйНомерГТД = ДанныеСправочника.Код
	|			И ТаблицаНомеровГТД.СтранаПроисхождения = ДанныеСправочника.СтранаПроисхождения
	|			И НЕ ДанныеСправочника.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеСправочника.Ссылка,
	|	ТаблицаНомеровГТД.ЗагружаемыйНомерГТД,
	|	ТаблицаНомеровГТД.СтранаПроисхождения");
	Запрос.УстановитьПараметр("ТаблицаГТД", ТаблицаСоздаваемыхНомеровГТД);
	ВыборкаГТД = Запрос.Выполнить().Выгрузить();

	Для Каждого СоздаваемаяСтрока Из ВыборкаГТД Цикл
		Если ЗначениеЗаполнено(СоздаваемаяСтрока.НомерГТД) Тогда
			ЗаполняемыйНомерГТД = СоздаваемаяСтрока.НомерГТД;
		Иначе 
			ЗаполняемыйНомерГТД = СоздатьНомерГТД(СоздаваемаяСтрока.ЗагружаемыйНомерГТД, СоздаваемаяСтрока.СтранаПроисхождения);
		КонецЕсли; 
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ЗагружаемыйНомерГТД", СоздаваемаяСтрока.ЗагружаемыйНомерГТД);
		СтруктураПоиска.Вставить("СтранаПроисхождения", СоздаваемаяСтрока.СтранаПроисхождения);
		СтруктураПоиска.Вставить("СоздатьНомерГТД", Истина);
		СтруктураПоиска.Вставить("ВедетсяУчетПоГТД", Истина);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(СтруктураПоиска);
			
		Для каждого ЗаполняемаяСтрока Из НайденныеСтроки Цикл
			ЗаполняемаяСтрока.НомерГТД = ЗаполняемыйНомерГТД;
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКолонок()
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ТоварыЗагружаемаяХарактеристика", 
		"Видимость", 
		ИспользоватьХарактеристикиНоменклатуры);
		
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ТоварыГруппаСтранаПроисхождения");
	МассивЭлементов.Добавить("ТоварыГруппаНомерГТД");
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, 
		МассивЭлементов, 
		"Видимость", 
		ЗагружатьГТД);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	ЗаполненыНоменклатураКодАртикулШтрихкод = ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C1").Текст)
			Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C2").Текст)
			Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C3").Текст)
			Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C4").Текст);
			
	Если Не ЗаполненыНоменклатураКодАртикулШтрихкод Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Необходимо скопировать колонки в таблицу из внешнего файла.'"));
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	Состояние(НСтр("ru = 'Осуществляется сопоставление введенных данных с данными информационной базы. Пожалуйста подождите...'"),,,БиблиотекаКартинок.Информация32);
	СопоставитьДанныеТабличногоДокументаСДаннымиИБ();

	Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг1;
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиТовары(Команда)
	
	ОчиститьСообщения();
	СоздатьНомераГТД = Ложь;
	Если Объект.Товары.НайтиСтроки(Новый Структура("СоздатьНомерГТД, ВедетсяУчетПоГТД", Истина, Истина)).Количество()>0 Тогда
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Создать", НСтр("ru = 'Создать'"));
		СписокКнопок.Добавить("БезСоздания", НСтр("ru = 'Не создавать'"));
		СписокКнопок.Добавить("Отмена", НСтр("ru = 'Отмена'"));
		
		ОтветНаВопрос = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПеренестиТоварыЗавершение", ЭтотОбъект), 
			НСтр("ru = 'Некоторые загружаемые номера ГТД не найдены в информационной базе. Создать номера ГТД?'"), 
			СписокКнопок);
		Возврат;
	КонецЕсли;
	
	ПеренестиТоварыФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиТоварыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос = "Отмена" Тогда
		Отказ = Истина;
		Возврат
	ИначеЕсли ОтветНаВопрос = "Создать" Тогда
		СоздатьНомераГТД = Истина;
	КонецЕсли;
	ПеренестиТоварыФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиТоварыФрагмент()
	
	Перем СтруктураВыбора;
	
	Если ПроверитьЗаполнение() Тогда
		
		Отказ = Ложь;
		ОписаниеОшибки = "";
		СоздатьШтрихкодыТоваров(Отказ, ОписаниеОшибки);
		Если Отказ Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
			Возврат;
		КонецЕсли;
		Если СоздатьНомераГТД Тогда
			СоздатьНомераГТД();
		КонецЕсли;
		Закрыть();
		СтруктураВыбора = Новый Структура();
		СтруктураВыбора.Вставить("АдресТоваровВХранилище", ПоместитьТоварыВХранилище());
		Если ЗначениеЗаполнено(ИмяТЧ) Тогда
			СтруктураВыбора.Вставить("ИмяТЧ", ИмяТЧ);
		КонецЕсли;
		ОповеститьОВыборе(СтруктураВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СоздатьШтрихкодыТоваров(Отказ, ОписаниеОшибки)
	
	ТаблицаСоздаваемыхШтрихкодов = Объект.Товары.Выгрузить(, "ЗагружаемыйШтрихкод, Номенклатура, Характеристика, Упаковка");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаШК.ЗагружаемыйШтрихкод КАК СТРОКА(200)) КАК ЗагружаемыйШтрихкод,
	|	ТаблицаШК.Номенклатура КАК Номенклатура,
	|	ТаблицаШК.Характеристика КАК Характеристика,
	|	ТаблицаШК.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ ТаблицаНомеровШК
	|ИЗ
	|	&ТаблицаШК КАК ТаблицаШК
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаНомеровШК.ЗагружаемыйШтрихкод КАК Штрихкод,
	|	ТаблицаНомеровШК.Номенклатура КАК Номенклатура,
	|	ТаблицаНомеровШК.Характеристика КАК Характеристика,
	|	ТаблицаНомеровШК.Упаковка КАК Упаковка
	|ИЗ
	|	ТаблицаНомеровШК КАК ТаблицаНомеровШК
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО (Штрихкоды.Штрихкод = ТаблицаНомеровШК.ЗагружаемыйШтрихкод)
	|			И ТаблицаНомеровШК.Номенклатура = Штрихкоды.Владелец
	|			И ТаблицаНомеровШК.Характеристика = Штрихкоды.Характеристика
	|			И ТаблицаНомеровШК.Упаковка = Штрихкоды.Упаковка
	|ГДЕ
	|	НЕ ТаблицаНомеровШК.ЗагружаемыйШтрихкод = """"
	|	И ЕСТЬNULL(Штрихкоды.Владелец, 0) = 0");
	
	Запрос.УстановитьПараметр("ТаблицаШК", ТаблицаСоздаваемыхШтрихкодов);
	ВыборкаШК = Запрос.Выполнить().Выгрузить();
	
	Отказ = Ложь;
	ОписаниеОшибки = "";
	Для Каждого НовыйШтрихкод Из ВыборкаШК Цикл
		ОписаниеОшибкиШК = "";
		
		ПодключаемоеоборудованиеРТ.УстановитьШтрихкод(
			СокрЛП(НовыйШтрихкод.Штрихкод),
			НовыйШтрихкод.Номенклатура,
			НовыйШтрихкод.Характеристика,
			НовыйШтрихкод.Упаковка,
			ОписаниеОшибкиШК);
			
		Если ЗначениеЗаполнено(ОписаниеОшибкиШК) Тогда
			ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + ОписаниеОшибкиШК;
		КонецЕсли;
	КонецЦикла;
	
	Отказ = НЕ ПустаяСтрока(ОписаниеОшибки);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Отметка незаполненной характеристики, если форма открыта с параметром ПроверятьЗаполнениеХарактеристик = Истина.
	Если Параметры.Свойство("ПроверятьЗаполнениеХарактеристик") И Параметры.ПроверятьЗаполнениеХарактеристик Тогда

		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.Имя);

		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ХарактеристикиИспользуются");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	КонецЕсли;

	РаботаСНоменклатуройРТ.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, "ТоварыХарактеристика", "Объект.Товары.ХарактеристикиИспользуются");
	РаботаСНоменклатуройРТ.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, "ТоварыНоменклатураЕдиницаИзмерения", "Товары.ТоварыУпаковка");

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаСНДС.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЦенаВключаетНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСтавкаНДС.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаНДС.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаСНДС.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УчетНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗагружатьСуммы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// Скрытие количества упаковок

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковок.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУпаковка.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатураЕдиницаИзмерения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗагружатьКоличество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТД.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТДСтранаПроисхождения.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для товаров>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТД.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<ГТД не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТДСтранаПроисхождения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемаяХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьХарактеристикиНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТД.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТДСтранаПроисхождения.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемыйНомерГТД.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗагружатьГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗагружатьЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемыйНомерГТД.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемыйНомерГТДИнфо.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемаяСтранаПроисхождения.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСтранаПроисхождения.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемыйНомерГТД.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемыйНомерГТДИнфо.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗагружаемыйНомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемыйНомерГТДИнфо.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗагружаемыйНомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<будет создан>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемыйНомерГТДИнфо.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.NotGroup;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора3 = ГруппаОтбора2.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗагружаемыйНомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемаяСтранаПроисхождения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗагружаемаяСтранаПроисхождения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СтранаПроисхождения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТДСтранаПроисхождения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СтранаПроисхождения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СоздатьНомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗагружаемаяСтранаПроисхождения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СтранаПроисхождения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНомерГТДСтранаПроисхождения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НомерГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЗагружаемаяСтранаПроисхождения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СтранаПроисхождения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВедетсяУчетПоГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не найдена>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСумма.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗагружатьСуммы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПрисвоитьЧисловоеЗначениеПриЗаполненииТЧ(Приемник, СтрокаИсточникЧисловогоЗначения, АбсолютныйНомерСтроки, НазваниеКолонки, ВысотаШапки = 0)
	Успех = Истина;
	
	ЗначениеДляПриведения = СтрЗаменить(СтрокаИсточникЧисловогоЗначения, " ", "");
	Если ЗначениеЗаполнено(ЗначениеДляПриведения) Тогда
		мТипов = Новый Массив;
		мТипов.Добавить(Тип("Число"));
		мТипов.Добавить(Тип("ОписаниеТипов"));
		ОписаниеТиповЧ = Новый ОписаниеТипов(мТипов);
		ПриведенноеЗначение = ОписаниеТиповЧ.ПривестиЗначение(ЗначениеДляПриведения);
		Если Не ПриведенноеЗначение = Неопределено Тогда
			Приемник = ПриведенноеЗначение;			
		Иначе
			Успех = Ложь;
			ТекстОшибки = НСтр("ru='В строке %НомерСтроки%, колонке ""%Колонка%"" введено значение ""%Значение%"", не являющееся числом.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", АбсолютныйНомерСтроки-ВысотаШапки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Колонка%", НазваниеКолонки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Значение%", СтрокаИсточникЧисловогоЗначения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;	
	Иначе
		Приемник = 0;
	КонецЕсли;
	
	Возврат Успех;
КонецФункции

#КонецОбласти
