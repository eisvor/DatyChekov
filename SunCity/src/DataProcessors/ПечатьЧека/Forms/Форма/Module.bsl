
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	// общие параметры
	ДокументСсылка 		= Параметры.ДокументСсылка;
	Организация    		= Параметры.Организация;
	Партнер        		= Параметры.Партнер;
	ТорговыйОбъект 		= Параметры.ТорговыйОбъект;
	
	//ИнтеграцияИСМПТК_РозничноеВыбытие
	Если ОбщегоНазначенияИСМПТК.ПроверитьЗначениеОбщейФОМаркировки() 
		И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
		ДоступнаРаботаСКМ 	= (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
							ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой"))
							И ДокументСсылка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;
	Иначе
		ДоступнаРаботаСКМ = Ложь;					
	КонецЕсли;						
	//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
	
	ПечатьФискальныхДокументовРКПереопределяемый.ЗаполнитьКонтактнуюИнформациюПоПартнеру(ЭтотОбъект, Параметры.Партнер);
	ПодключаемоеОборудованиеРТ.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	// выбираем оборудование и заполняем таблицу оборудования (вынести)
	Если Параметры.ПодключенноеОборудование = Неопределено Тогда
		ПодключенноеОборудование = ПечатьФискальныхДокументовРКПереопределяемый.ПодключаемоеОборудованиеОрганизации(Организация);
	Иначе
		ПодключенноеОборудование = Параметры.ПодключенноеОборудование;
		Если ПодключенноеОборудование.Свойство("ККТ") И Не ПодключенноеОборудование.Свойство("ФискальныеУстройства") Тогда
			ПодключенноеОборудование.Вставить("ФискальныеУстройства", ПодключенноеОборудование.ККТ);
		КонецЕсли; 
	КонецЕсли;
	
	ОборудованиеТерминал           = ПодключенноеОборудование.Терминал;
	ПараметрыЭквайринговойОперации = Параметры.ПараметрыЭквайринговойОперации;
	
	Если ТипЗнч(ПодключенноеОборудование.ФискальныеУстройства) = Тип("Массив") Тогда
		
		Для Каждого ЭлементМассива Из ПодключенноеОборудование.ФискальныеУстройства Цикл
			
			Оборудование = ЭлементМассива;
			ВерсияФФД = ДобавитьВТаблицуОборудования(Оборудование);
			
		КонецЦикла;
		
	Иначе
		
		Оборудование = ПодключенноеОборудование.ФискальныеУстройства;
		ВерсияФФД = ДобавитьВТаблицуОборудования(Оборудование);
		
	КонецЕсли;
	
	Элементы.Оборудование.ТолькоПросмотр = (Элементы.Оборудование.СписокВыбора.Количество() = 1);
	Элементы.НетПодключенногоОборудования.Видимость = (Элементы.Оборудование.СписокВыбора.Количество() = 0);
	Элементы.Оборудование.Видимость                 = (Элементы.Оборудование.СписокВыбора.Количество() > 0);
	Элементы.ПробитьЧек.Доступность = (Элементы.Оборудование.СписокВыбора.Количество() > 0);
	
	РеквизитыКассира = ПечатьФискальныхДокументовРКПереопределяемый.ПолучитьРеквизитыКассира(Параметры);
	КассирПредставление = РеквизитыКассира.Наименование;
	ПраваДоступа     = ПечатьФискальныхДокументовРКПереопределяемый.ПолучитьПраваДоступа(Пользователи.ТекущийПользователь());
	
	Если Параметры.Свойство("ПараметрыОперацииИнкассации") Тогда
		ПараметрыОперацииИнкассации = Параметры.ПараметрыОперацииИнкассации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуемоеОборудование = ИспользуемоеОборудование();
	Для Каждого Оборудование Из ИспользуемоеОборудование Цикл
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоИдентификатору(
		Новый ОписаниеОповещения("НачатьПодключениеОборудованиеПоИдентификаторуЗавершение", ЭтотОбъект, Оборудование),
		УникальныйИдентификатор,
		Оборудование);
	КонецЦикла;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ИспользуемоеОборудование = ИспользуемоеОборудование();
	Для Каждого Оборудование Из ИспользуемоеОборудование Цикл
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоИдентификатору(
			Новый ОписаниеОповещения("НачатьОтключениеОборудованиеПоИдентификаторуЗавершение", ЭтотОбъект, Оборудование),
			УникальныйИдентификатор,
			Оборудование);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() Тогда
		Если (Событие = "Штрихкод" Или Событие = "ПолученШтрихкод") И ВозможностьВводаПоШК() Тогда
			ДанныеСоСканераСтруктура = СобытияФормИСКлиент.ВнешнееСобытиеПреобразоватьДанныеСоСканераВСтруктуру(
				ЭтотОбъект, 
				Источник, 
				Событие, 
				Данные);
				
			Если ДанныеСоСканераСтруктура = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ОбработатьШтрихкоды(ДанныеСоСканераСтруктура);
		Иначе
			ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОборудованиеПриИзменении(Элемент)
	
	ВерсияФФД = ВерсияФФД(ЭтотОбъект, Оборудование);
	
	ОборудованиеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтправкиЭлектронногоЧекаSMSПриИзменении(Элемент)
	ПодготовитьПараметрыОперацииФискализацииЧекаКПередаче();	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтправкиЭлектронногоЧекаEmailПриИзменении(Элемент)
	ПодготовитьПараметрыОперацииФискализацииЧекаКПередаче();
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтправкиЭлектронногоЧекаНеОтправлятьПриИзменении(Элемент)
	ПодготовитьПараметрыОперацииФискализацииЧекаКПередаче();
КонецПроцедуры

&НаКлиенте
Процедура EmailПриИзменении(Элемент)
	ВариантОтправкиЧека = ?(ЗначениеЗаполнено(Email), 1, ВариантОтправкиЧека);	
	ПодготовитьПараметрыОперацииФискализацииЧекаКПередаче();
КонецПроцедуры

&НаКлиенте
Процедура ТелефонПриИзменении(Элемент)
	ВариантОтправкиЧека = ?(ЗначениеЗаполнено(Телефон), 2, ВариантОтправкиЧека);	
	ПодготовитьПараметрыОперацииФискализацииЧекаКПередаче();
КонецПроцедуры

&НаКлиенте
Процедура ПолучательИИНПриИзменении(Элемент)
	
	ИИНЗаполненКорректно = Истина;
	
	ТекстСообщения = "";
	Если ПустаяСтрока(ПолучательИИН) Тогда
		ИИНЗаполненКорректно = Ложь;
	ИначеЕсли НЕ ПечатьФискальныхДокументовРККлиентПереопределяемый.ИИНСоответствуетТребованиям(ПолучательИИН, ТекстСообщения) Тогда
		
		ОчиститьСообщения();
		ИИНЗаполненКорректно = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, ,"ПолучательИИН",,);
			
	КонецЕсли;
	
	ПодготовитьПараметрыОперацииФискализацииЧекаКПередаче();
	Если ИИНЗаполненКорректно Тогда
		ОчиститьСообщения();
	КонецЕсли;
	
	ВывестиМакетЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоваровПриИзменении(Элемент)
	
	//очистить текущии позиции чека
	ПараметрыОперацииФискализацииЧека.ПозицииЧека = Новый Массив;
	
	Для каждого СтрокаТаблицыТоваров Из Объект.ТаблицаТоваров Цикл
		Если СтрокаТаблицыТоваров.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
		
		ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека, СтрокаТаблицыТоваров,, "СтавкаНДС");
		СтавкаНДСЧислом = ПечатьФискальныхДокументовРККлиентПереопределяемый.СтавкаНДСЧислом(СтрокаТаблицыТоваров.СтавкаНДС);
		СтрокаПозицииЧека.СтавкаНДС = СтавкаНДСЧислом * 100;
		СтрокаПозицииЧека.КодЕдиницыИзмерения = КодЕдиницыИзмерения(СтрокаТаблицыТоваров.ЕдиницаИзмерения, "Код");
		СтрокаПозицииЧека.ОсвобожденныйОборотНДС = КодЕдиницыИзмерения(СтрокаТаблицыТоваров.СтавкаНДС, "ДляОсвобожденногоОборота");
		Если Не ЗначениеЗаполнено(СтрокаПозицииЧека.НомерСекции) Тогда
			СтрокаПозицииЧека.НомерСекции = 1;
		КонецЕсли;
		
		ПараметрыОперацииФискализацииЧека.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		
		//ИнтеграцияИСМПТК_РозничноеВыбытие
		Если ЗначениеЗаполнено(СтрокаТаблицыТоваров.КодМаркировкиBase64) Тогда 
			СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.Вставить("КодМаркировкиBase64", СтрокаТаблицыТоваров.КодМаркировкиBase64);
		КонецЕсли;
		//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
		
	КонецЦикла;
	
	ОбновитьОбщуюСумму();
	ВывестиМакетЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоваровЦенаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ТаблицаТоваров.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	ПечатьФискальныхДокументовРККлиентПереопределяемый.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	СтрокаТаблицы.СуммаСкидок = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоваровКоличествоПриИзменении(Элемент)
		
	СтрокаТаблицы = Элементы.ТаблицаТоваров.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	ПечатьФискальныхДокументовРККлиентПереопределяемый.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	СтрокаТаблицы.СуммаСкидок = 0;
			
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоваровСуммаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ТаблицаТоваров.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме", "Количество");
	ПечатьФискальныхДокументовРККлиентПереопределяемый.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);	
	СтрокаТаблицы.СуммаСкидок = 0;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПробитьЧек(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	//ИнтеграцияИСМПТК_РозничноеВыбытие
	//Проверка наличия не полностью заполненных строк. Они могут возникнуть при сканировании Кода маркировки, если не заполнили добавленную строку.
	СтрокиСПустойЦеной 			   = Объект.ТаблицаТоваров.НайтиСтроки(Новый Структура("Цена", 0));
	СтрокиСПустойЕдиницейИзмерения = Объект.ТаблицаТоваров.НайтиСтроки(Новый Структура("ЕдиницаИзмерения", ПредопределенноеЗначение("Справочник.БазовыеЕдиницыИзмерения.ПустаяСсылка")));
	Если Не СтрокиСПустойЦеной.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В чеке присутствуют незаполненные строки (с пустым значением в поле Цена)!'"));
		Возврат;
	КонецЕсли;
	Если Не СтрокиСПустойЕдиницейИзмерения.Количество() = 0 Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В чеке присутствуют незаполненные строки (с пустым значением в поле Ед.изм.)!'"));
		Возврат;
	КонецЕсли;
	//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
	
	//проверка общей суммы
	Если ВсегоПоЧеку <> СуммаДокумента Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Сумма позиций по чеку отличается от общей суммы оплаты!'"));
		Возврат;
		
	КонецЕсли;

	Если ЗначениеЗаполнено(ОборудованиеТерминал) Тогда
		
		Если ПараметрыЭквайринговойОперации = Неопределено Тогда
			
			ПечатьФискальныхДокументовРККлиентПереопределяемый.ОбработатьСостояниеСмены(
				ЭтотОбъект,
				Новый ОписаниеОповещения("ПослеОбработкиСостоянияСмены", ЭтотОбъект));
				
		Иначе
			
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("ТипТранзакции",               ПараметрыЭквайринговойОперации.ТипТранзакции);
			ПараметрыОткрытияФормы.Вставить("Сумма",                       ПараметрыЭквайринговойОперации.Сумма);
			ПараметрыОткрытияФормы.Вставить("ПределСуммы",                 ПараметрыЭквайринговойОперации.Сумма);
			ПараметрыОткрытияФормы.Вставить("УказатьДополнительныеДанные", ПараметрыЭквайринговойОперации.ТипТранзакции = "AuthorizeRefund");
			ОповещениеЗавершение = Новый ОписаниеОповещения("ОплатитьКартойЗавершение", ЭтотОбъект, ПараметрыОткрытияФормы);
			
			ПечатьФискальныхДокументовРККлиентПереопределяемый.ОплатитьКартой(ЭтотОбъект, ОповещениеЗавершение); 
			
		КонецЕсли;
		
	Иначе
		ПечатьФискальныхДокументовРККлиентПереопределяемый.ОбработатьСостояниеСмены(
				ЭтотОбъект,
				Новый ОписаниеОповещения("ПослеОбработкиСостоянияСмены", ЭтотОбъект));		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ВозможностьВводаПоШК()
	
	Результат = Истина;
	
	Если ТолькоПросмотр Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Если НЕ Результат Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Форма заблокирована. Ввод невозможен.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВывестиМакетЧека()
	
	ТекстЧека = МенеджерОборудованияКлиентСервер.СформироватьТекстНефискальногоЧека(ПараметрыОперацииФискализацииЧека, 34, ВерсияФФД);
	ТекстовыйДокумент.УстановитьТекст(ТекстЧека);
	
КонецФункции

&НаСервере
Процедура РассчитатьСуммы()
	
	Суммы = Оплаты(ПараметрыОперацииФискализацииЧека);
	
	СуммаДокумента  = Суммы.Всего;
	СуммаНаличные   = Суммы.ОплатаНаличные;
	СуммаКартой     = Суммы.ОплатаПлатежнаяКарта;
	СуммаМобильный  = Суммы.ОплатаМобильныйПлатеж;
	СуммаПостоплаты = Суммы.Кредит;
	СуммаПредоплаты = Суммы.Предоплата;
	
	Элементы.Предоплата.Видимость = (СуммаПредоплаты > 0);
	Элементы.Наличные.Видимость   = (СуммаНаличные > 0);
	Элементы.Электронно.Видимость = (СуммаКартой > 0);
	Элементы.Мобильный.Видимость  = (СуммаМобильный > 0);
	Элементы.Кредит.Видимость     = (СуммаПостоплаты > 0);
	
КонецПроцедуры

&НаСервере
Функция Оплаты(ПараметрыОперацииФискализацииЧека)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Всего",                0);
	ВозвращаемоеЗначение.Вставить("ОплатаНаличные",       0);
	ВозвращаемоеЗначение.Вставить("ОплатаПлатежнаяКарта", 0);
	ВозвращаемоеЗначение.Вставить("ОплатаМобильныйПлатеж",0);
	ВозвращаемоеЗначение.Вставить("Кредит",               0);
	ВозвращаемоеЗначение.Вставить("Предоплата",           0);
	
	Для Каждого СтрокаОплаты Из ПараметрыОперацииФискализацииЧека.ТаблицаОплат Цикл
		
		ВозвращаемоеЗначение.Всего = ВозвращаемоеЗначение.Всего + СтрокаОплаты.Сумма;
		
		Если СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда
			ВозвращаемоеЗначение.ОплатаНаличные = ВозвращаемоеЗначение.ОплатаНаличные + СтрокаОплаты.Сумма;
		КонецЕсли;
		
		Если СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно Тогда
			ВозвращаемоеЗначение.ОплатаПлатежнаяКарта = ВозвращаемоеЗначение.ОплатаПлатежнаяКарта + СтрокаОплаты.Сумма;
		КонецЕсли;
		
		Если СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.МобильныйПлатеж Тогда
			ВозвращаемоеЗначение.ОплатаМобильныйПлатеж = ВозвращаемоеЗначение.ОплатаМобильныйПлатеж + СтрокаОплаты.Сумма;
		КонецЕсли;
		
		Если СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Постоплата Тогда
			ВозвращаемоеЗначение.Кредит = СтрокаОплаты.Сумма;
		КонецЕсли;
		
		Если СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата Тогда
			ВозвращаемоеЗначение.Предоплата = СтрокаОплаты.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Процедура ОборудованиеПриИзмененииНаСервере()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.ТипОборудования КАК ТипОборудования,
	|	ПодключаемоеОборудование.СерийныйНомер   КАК СерийныйНомер
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Оборудование);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ПараметрыККТ = Новый Структура;
	ПараметрыККТ.Вставить("ТипОборудования",         Выборка.ТипОборудования);
	ПараметрыККТ.Вставить("СерийныйНомер",           Выборка.СерийныйНомер);
	ПараметрыККТ.Вставить("ИдентификаторУстройства", Оборудование);
	
	ПараметрыОперацииФискализацииЧека = ПечатьФискальныхДокументовРКПереопределяемый.ПараметрыОперацииФискализацииЧека(ДокументСсылка, 0, ВерсияФФДПараметровФискализации(ВерсияФФД));
	
	Если ПараметрыОперацииФискализацииЧека <> Неопределено Тогда
		
		ПолучательИИН = ПараметрыОперацииФискализацииЧека.ПолучательИИН;
		
		ПодготовитьПараметрыОперацииФискализацииЧекаКПередаче();
		
		РассчитатьСуммы();
		
		ВывестиМакетЧека();
		
		ВывестиЧекВТаблицу();
		
	Иначе
		
		Элементы.ПробитьЧек.Доступность   = Ложь;
		
	КонецЕсли;
	
	Элементы.ГруппаОтправкаЭлектронногоЧека.Видимость = (ПараметрыККТ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ);
	
	ДрайверОборудования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыККТ.ИдентификаторУстройства, "ДрайверОборудования");
	Если ЗначениеЗаполнено(ДрайверОборудования) Тогда
		ОбработчикДрайвера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДрайверОборудования, "ОбработчикДрайвера");
		Если ОбработчикДрайвера = Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикWebkassaФискальныеРегистраторы Тогда
			Элементы.ГруппаОтправкаЭлектронногоЧека.Видимость = Истина;
			Элементы.ГруппаОтправитьSMS.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ИспользуемоеОборудование()
	
	ИспользуемоеОборудование = Новый Массив;
	Если ПараметрыЭквайринговойОперации <> Неопределено
		И ЗначениеЗаполнено(ОборудованиеТерминал) Тогда
		ИспользуемоеОборудование.Добавить(ОборудованиеТерминал);
	КонецЕсли;
	Для Каждого Оборудование Из Элементы.Оборудование.СписокВыбора.ВыгрузитьЗначения() Цикл
		ИспользуемоеОборудование.Добавить(Оборудование);
	КонецЦикла;
	
	Возврат ИспользуемоеОборудование;
	
КонецФункции

&НаСервере
Процедура ПодготовитьПараметрыОперацииФискализацииЧекаКПередаче()
	
	Если ВариантОтправкиЧека = 1 Тогда
		//email
		ПараметрыОперацииФискализацииЧека.ПокупательEmail = Email;
		ПараметрыОперацииФискализацииЧека.ПокупательНомер = "";
	ИначеЕсли ВариантОтправкиЧека = 2 Тогда  
		//телефон
		ПараметрыОперацииФискализацииЧека.ПокупательEmail = "";
		ПараметрыОперацииФискализацииЧека.ПокупательНомер = Телефон;
	Иначе
		//не отправлять
		ПараметрыОперацииФискализацииЧека.ПокупательEmail = "";
		ПараметрыОперацииФискализацииЧека.ПокупательНомер = "";
	КонецЕсли; 
	
	ПараметрыОперацииФискализацииЧека.Кассир    = РеквизитыКассира.Наименование;
	ПараметрыОперацииФискализацииЧека.КассирИНН = РеквизитыКассира.ИНН;
	
	// Для совместмости с фискальными регистраторами
	ПараметрыОперацииФискализацииЧека.СерийныйНомер = ПараметрыККТ.СерийныйНомер;
	
	// Для принтера чеков
	ПараметрыОперацииФискализацииЧека.НомерКассы = "00001";
	ПараметрыОперацииФискализацииЧека.НомерЧека  = 1;
	ПараметрыОперацииФискализацииЧека.НомерСмены = 1;
	ПараметрыОперацииФискализацииЧека.ДатаВремя  = ТекущаяДатаСеанса();
	ПараметрыОперацииФискализацииЧека.КопийЧека  = 1;
	
	//Дополнительные поля в чеке
	ПараметрыОперацииФискализацииЧека.ПолучательИИН = ПолучательИИН;
	
	Если (ПараметрыККТ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ) Тогда
		ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ПараметрыОперацииФискализацииЧека, ПараметрыККТ.ИдентификаторУстройства);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьКартойЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
	ПараметрыОперации.ТипТранзакции  = ДополнительныеПараметры.ТипТранзакции;
	ПараметрыОперации.СуммаОперации  = Результат.Сумма;
	ПараметрыОперации.НомерЧека      = Результат.НомерЧека;
	ПараметрыОперации.СсылочныйНомер = Результат.СсылочныйНомер;
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияОперацииНаЭквайринговомТерминале", ЭтотОбъект, ДополнительныеПараметры);
	МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(
		Оповещение, УникальныйИдентификатор,
		ОборудованиеТерминал,
		ПараметрыККТ.ИдентификаторУстройства,
		ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияОперацииНаЭквайринговомТерминале(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		Модифицированность = Истина;
		
		ВладелецФормы.Объект.НомерПлатежнойКарты = РезультатВыполнения.НомерКарты;
		ВладелецФормы.Объект.КодАвторизации      = РезультатВыполнения.КодАвторизации;
		ВладелецФормы.Объект.ОплатаВыполнена     = Истина;
		
		ОповещениеЗавершение = Новый ОписаниеОповещения("ПослеЗаписиОперацииПоПлатежнойКарте", ЭтотОбъект, ДополнительныеПараметры);
		ПечатьФискальныхДокументовРККлиентПереопределяемый.ЗаписатьОбъектЭквайринговаяОперация(ВладелецФормы, ОповещениеЗавершение);
		
	Иначе
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'При выполнении операции возникла ошибка:
				|""%1"".
				|Оплата по карте не была произведена.'"),
			РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиОперацииПоПлатежнойКарте(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено
		И Результат Тогда
		
		ПечатьФискальныхДокументовРККлиентПереопределяемый.ОбработатьСостояниеСмены(
			ЭтотОбъект,
			Новый ОписаниеОповещения("ПослеОбработкиСостоянияСмены", ЭтотОбъект));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбработкиСостоянияСмены(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Результат = Ложь Тогда
			ТекстСообщения = НСтр("ru = 'При операции внесения/выемки произошла ошибка.
				|Дополнительное описание: %ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", Результат.ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	Иначе
		Если Результат = Ложь Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	
	Оповещение        = Новый ОписаниеОповещения("ПечатьЧека_Завершение", ЭтотОбъект);
	ПослеОткрытияЧека = Новый ОписаниеОповещения("ПечатьЧека_ПослеОткрытияЧека",  ЭтотОбъект);

	МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
		Оповещение,
		УникальныйИдентификатор,
		ПараметрыОперацииФискализацииЧека,
		ПараметрыККТ.ИдентификаторУстройства,
		ПослеОткрытияЧека);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ШапкаЧека = ПараметрыВыполнения.ВходныеПараметры;
	
	ШапкаЧека.НомерСмены = ПараметрыВыполнения.НомерСмены;
	ШапкаЧека.НомерЧека  = ПараметрыВыполнения.НомерЧека;
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_Завершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		//дополнительная обработка результата (запись в журнал фискальных операций и тп)
		ПечатьФискальныхДокументовРККлиентПереопределяемый.ОбработатьРезультатаЧека(ЭтотОбъект, РезультатВыполнения.ВыходныеПараметры, Оплаты(ПараметрыОперацииФискализацииЧека));
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
		                            |Чек не напечатан на фискальном устройстве.
		                            |Дополнительное описание:
		                            |%ДополнительноеОписание%'");
		
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%ДополнительноеОписание%",
			РезультатВыполнения.ОписаниеОшибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияПараметровУстройства(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		Если ЗначениеЗаполнено(РезультатВыполнения.ВыходныеПараметры.ВерсияФФДККТ) Тогда
			ДополнительныеПараметры.СтрокаТЧ.ВерсияФФД = РезультатВыполнения.ВыходныеПараметры.ВерсияФФДККТ;
		Иначе
			ДополнительныеПараметры.СтрокаТЧ.ВерсияФФД = ВерсияФФДПоУмолчанию();
		КонецЕсли;
		
	Иначе
		
		ДополнительныеПараметры.СтрокаТЧ.ВерсияФФД = ВерсияФФДПоУмолчанию();
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.СтрокаТЧ.Оборудование = Оборудование Тогда
		ВерсияФФД = ДополнительныеПараметры.СтрокаТЧ.ВерсияФФД;
	КонецЕсли;
	
	ОборудованиеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодключениеОборудованиеПоИдентификаторуЗавершение(Данные, Оборудование) Экспорт
	
	Если Данные.Результат Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Оборудование", Оборудование);
		НайденныеСтроки = ТаблицаОборудования.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			
			СтрокаТЧ.Подключено = Истина;
			
			Если Не СтрокаТЧ.СчитанаВерсияФФД Тогда
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("СтрокаТЧ", СтрокаТЧ);
				
				МенеджерОборудованияКлиент.НачатьПолучениеПараметровФискальногоУстройства(
					Новый ОписаниеОповещения("ПослеПолученияПараметровУстройства", ЭтотОбъект, ДополнительныеПараметры),
					ЭтаФорма.УникальныйИдентификатор, Оборудование, Ложь);
					
			Иначе
				
				Если СтрокаТЧ.Оборудование = Оборудование Тогда
					ВерсияФФД = СтрокаТЧ.ВерсияФФД;
				КонецЕсли;
				
				ОборудованиеПриИзмененииНаСервере();
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'При подключении устройства %1 произошла ошибка:
				           |""%2"".'"),
				Оборудование, 
				Данные.ОписаниеОшибки));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОтключениеОборудованиеПоИдентификаторуЗавершение(Данные, Оборудование) Экспорт
	
	Если Не Данные.Результат Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'При отключении устройства %1 произошла ошибка:
				           |""%2"".'"),
				Оборудование, 
				Данные.ОписаниеОшибки));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВерсияФФД(Форма, Оборудование)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Оборудование", Оборудование);
	НайденныеСтроки = Форма.ТаблицаОборудования.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0].ВерсияФФД;
	Иначе
		Возврат ВерсияФФДПоУмолчанию();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ВерсияФФДПараметровФискализации(ЗначениеВерсияФФД)
	
	Если ЗначениеВерсияФФД = МаксимальнаяВерсияФФД() Тогда
		Возврат АктуальнаяВерсияФФД();
	Иначе
		Возврат ЗначениеВерсияФФД;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВерсияФФДПоУмолчанию()
	
	Возврат "1.0";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МаксимальнаяВерсияФФД()
	
	Возврат "1.1";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция АктуальнаяВерсияФФД()
	
	Возврат "1.0.5";
	
КонецФункции

&НаСервере
Функция ДобавитьВТаблицуОборудования(ПодключаемоеОборудование)
	
	ТипОборудования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодключаемоеОборудование, "ТипОборудования");
	
	СчитанаВерсияФФД = Ложь;
	ЗначениеВерсияФФД = "";
	Если ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ПринтерЧеков Тогда
		СчитанаВерсияФФД = Истина;
		ЗначениеВерсияФФД = ВерсияФФДПоУмолчанию();
	ИначеЕсли ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор Тогда
		СчитанаВерсияФФД = Истина;
		ЗначениеВерсияФФД = ВерсияФФДПоУмолчанию();
	Иначе
		
		ПараметрыРегистрацииУстройства = МенеджерОборудованияВызовСервера.ПолучитьПараметрыРегистрацииУстройства(ПодключаемоеОборудование);
		Если ПараметрыРегистрацииУстройства.ЕстьДанные Тогда
			ЗначениеВерсияФФД = ПараметрыРегистрацииУстройства.ВерсияФФДККТ;
		Иначе
			ЗначениеВерсияФФД = ВерсияФФДПоУмолчанию();
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.Оборудование.СписокВыбора.Добавить(ПодключаемоеОборудование);
	НовоеОборудование = ТаблицаОборудования.Добавить();
	НовоеОборудование.Оборудование     = ПодключаемоеОборудование;
	НовоеОборудование.ВерсияФФД        = ЗначениеВерсияФФД;
	НовоеОборудование.СчитанаВерсияФФД = СчитанаВерсияФФД;
	
	Возврат ЗначениеВерсияФФД;
	
КонецФункции

&НаСервере
Функция ВывестиЧекВТаблицу()
	
	Объект.ТаблицаТоваров.Очистить();
	Для каждого ПозицияЧека Из ПараметрыОперацииФискализацииЧека.ПозицииЧека Цикл
		НоваяСтрока = Объект.ТаблицаТоваров.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПозицияЧека,,"СтавкаНДС");
		
		НоваяСтрока.СтавкаНДС = ПечатьФискальныхДокументовРКПереопределяемый.ЗначениеСтавкиНДС(ПозицияЧека.СтавкаНДС, ПозицияЧека.ОсвобожденныйОборотНДС);
		
		НоваяСтрока.ЕдиницаИзмерения = ПечатьФискальныхДокументовРКПереопределяемый.ЕдиницаИзмеренияПоКоду(ПозицияЧека.КодЕдиницыИзмерения);	
		
	КонецЦикла;
	
	ОбновитьОбщуюСумму();
	
КонецФункции

&НаСервере
Процедура ОбновитьОбщуюСумму()
	
	ВсегоПоЧеку = Объект.ТаблицаТоваров.Итог("Сумма");
	Если ВсегоПоЧеку <> СуммаДокумента Тогда
		Элементы.ГруппаСуммыРазличаются.Видимость = Истина;		
	Иначе
		Элементы.ГруппаСуммыРазличаются.Видимость = Ложь;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КодЕдиницыИзмерения(Ссылка, ИмяРеквизита)
	                                                         
	Возврат ПечатьФискальныхДокументовРКПереопределяемый.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

//ИнтеграцияИСМПТК_РозничноеВыбытие
#Область МаркировкаТоваров_РозничноеВыбытиеКодовМаркировки

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов, ЗагрузкаИзТСД = Ложь)

	КоличествоНедопустимыхСимволов = 0;
	#Если ВебКлиент Тогда
		КоличествоНедопустимыхСимволов = НайтиНедопустимыеСимволыXMLНаСервере(ДанныеШтрихкодов.ШтрихКод);
	#Иначе
		КоличествоНедопустимыхСимволов = НайтиНедопустимыеСимволыXML(ДанныеШтрихкодов.ШтрихКод);
	#КонецЕсли
	Если КоличествоНедопустимыхСимволов > 0 Тогда
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ДанныеШтрихкодов);
	КонецЕсли;
	ОбработатьШтрихкодСервер(ДанныеШтрихкодов);
	
КонецПроцедуры

&НаСервере
Функция НайтиНедопустимыеСимволыXMLНаСервере(ШтрихКод)
	
	Возврат НайтиНедопустимыеСимволыXML(ШтрихКод);
	
КонецФункции

&НаСервере
Процедура ОбработатьШтрихкодСервер(ШтрихКодКоличество)
	
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ДекодироватьШтрихкодДанныхBase64(ШтрихКодКоличество);
	ТипШтрихКода  = МенеджерОборудованияКлиентСервер.ОпределитьТипШтрихкода(ШтрихКодКоличество.Штрихкод);
	РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ШтрихКодКоличество);
	КодМаркировки = "";
		
	Если ТипШтрихКода = "CODE128" Тогда
		
		//ИнтеграцияИСМПТК_РозничноеВыбытие
		ДанныеМаркировки = РозничноеВыбытиеИСМПТКВызовСервера.РазобратьШтриховойКодТовара(ШтрихКодКоличество.Штрихкод, Истина);
		
		Если Не ДанныеМаркировки.Разобран Тогда
			Если ЗначениеЗаполнено(ДанныеМаркировки.ОписаниеОшибки) Тогда
				ТекстСообщения = НСтр("ru = 'При разборе данных произошла ошибка: '") + ДанныеМаркировки.ОписаниеОшибки;
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Иначе
				ТекстСообщения = НСтр("ru = 'При разборе данных произошла ошибка!'");
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);	
			КонецЕсли;	
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеМаркировки.ОписаниеОшибки) Тогда
			//У разобранного ШК тое могут быть ошибки
			ТекстСообщения = НСтр("ru = 'При разборе данных произошла ошибка: '") + ДанныеМаркировки.ОписаниеОшибки;
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Возврат;	
			
		Иначе
			
			ЭтоКодМарки	= ЭтоКодМаркировки(ДанныеМаркировки.ТипИдентификатораТовара);
			КодМаркировкиBase64 = ДанныеМаркировки.ШтрихкодBase64;
			
			КодМаркировки = ШтрихКодКоличество.Штрихкод;
			ШтрихкодEAN	  = ДанныеМаркировки.EAN;
			
		КонецЕсли;
		
		Если ЭтоКодМарки И Не ДоступнаРаботаСКМ Тогда 
			
			ТекстСообщения = НСтр("ru = 'Добавление кодов маркировки доступно только для операции Возврат оплаты покупателю.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		ИначеЕсли ЗначениеЗаполнено(КодМаркировки) И
			
			Объект.ТаблицаТоваров.НайтиСтроки(Новый Структура("КодМаркировкиBase64", КодМаркировки)).Количество() > 0 Тогда 
			ТекстСообщения = НСтр("ru = 'В формируемый чек уже добавлен сканируемый код маркировки.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		Иначе
			
			КэшированныеЗначения = Новый Структура("Штрихкоды", Новый Соответствие);
			ШтрихкодыEAN = Новый Массив;
			ШтрихкодыEAN.Добавить(ШтрихкодEAN);
			РегистрыСведений.Штрихкоды.ПолучитьДанныеПоШтрихкодам(КэшированныеЗначения, ШтрихкодыEAN);
			
			Если ЗначениеЗаполнено(КэшированныеЗначения.Штрихкоды[ШтрихкодEAN])
				И КэшированныеЗначения.Штрихкоды[ШтрихкодEAN].Количество() > 0 Тогда
				
				ДобавитьСтрокуСканирование(КэшированныеЗначения.Штрихкоды[ШтрихкодEAN], КодМаркировки);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуСканирование(СтуктураДанныхНоменклатуры, КодМаркировки)
	
	НаименованиеТовара = ?(ЗначениеЗаполнено(СтуктураДанныхНоменклатуры.Номенклатура), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтуктураДанныхНоменклатуры.Номенклатура, "Наименование"),
							"Неопределённый товар");
	СтавкаНДС 		   = ?(ЗначениеЗаполнено(СтуктураДанныхНоменклатуры.Номенклатура), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтуктураДанныхНоменклатуры.Номенклатура, "СтавкаНДС"),
							Справочники.СтавкиНДС.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(СтуктураДанныхНоменклатуры.Номенклатура) Тогда
		БазоваяЕИ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтуктураДанныхНоменклатуры.Номенклатура, "ЕдиницаИзмерения");
	Иначе
		БазоваяЕИ = Справочники.БазовыеЕдиницыИзмерения.ПустаяСсылка();
	КонецЕсли;						   
	ЕдиницаИзмерения = ?(ЗначениеЗаполнено(СтуктураДанныхНоменклатуры.Упаковка), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтуктураДанныхНоменклатуры.Упаковка, "ЕдиницаИзмерения"), БазоваяЕИ);
							   
	ВидПродукцииШК  = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(СтуктураДанныхНоменклатуры.Номенклатура);
	УчетТГВключен   = РозничноеВыбытиеИСМПТКВызовСервера.ПроверитьВключениеУчетаТГ(ВидПродукцииШК);
	ДобавленКодМаркировки = Истина;
	
	ПредставлениеШК = РозничноеВыбытиеИСМПТККлиентСервер.ПодготовитьПредставлениеКодаМаркировкиДляРозницы(КодМаркировки);
	Если ЗначениеЗаполнено(ПредставлениеШК) Тогда
		ПредставлениеШтрихкода = ПредставлениеШК;
	Иначе
		ПредставлениеШтрихкода = СтуктураДанныхНоменклатуры.Штрихкод;
	КонецЕсли;

	Если РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПовтИсп.ЭтоGTIN(ПредставлениеШтрихкода) Тогда
		//Отсканирован обычный ЕАН товара
		Если ЗначениеЗаполнено(ВидПродукцииШК) И УчетТГВключен Тогда		
			ТекстСообщения = НСтр("ru = 'Товар с особенностями учета по маркировке! Необходимо отсканировать код маркировки.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		ДобавленКодМаркировки = Ложь;
	Иначе
		Если Не УчетТГВключен Тогда
			ТекстСообщения = НСтр("ru = 'Не включен учет маркированной продукции для товарной группы %1, добавление кода марикровки невозможно!'");
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ВидПродукцииШК);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;	
	КонецЕсли;
		
	НоваяСтрока = Объект.ТаблицаТоваров.Добавить();
	НоваяСтрока.Наименование 	 = НаименованиеТовара;
	НоваяСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
	НоваяСтрока.Количество 		 = 1;
	НоваяСтрока.СтавкаНДС 		 = СтавкаНДС;
	
	Если ЗначениеЗаполнено(КодМаркировки) Тогда
		НоваяСтрока.КодМаркировкиBase64	= КодМаркировки;
		НоваяСтрока.ЭтоКодМаркировки = ДобавленКодМаркировки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭтоКодМаркировки(ТипИдентификатораТовара) Экспорт
	
	ТипыШтрихкодовМарок = Новый СписокЗначений;
	ТипыШтрихкодовМарок.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовШКТовараИСМПТК.КодТовараВФорматеDataMatrixGS1"));

	Возврат НЕ ТипыШтрихкодовМарок.НайтиПоЗначению(ТипИдентификатораТовара) = Неопределено;
	
КонецФункции

#КонецОбласти
//Конец ИнтеграцияИСМПТК_РозничноеВыбытие

#КонецОбласти