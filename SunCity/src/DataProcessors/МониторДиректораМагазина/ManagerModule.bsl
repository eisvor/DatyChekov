#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Процедура РассчитатьЗначенияПоказателейВФоне(ПараметрыРасчета, АдресРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	
	Результат.Вставить("Выручка", РассчитатьПоказатель_Выручка(ПараметрыРасчета.ДиаграммаВыручка));
	Результат.Вставить("ДанныеПоЧекам", РассчитатьПоказатель_ДанныеПоЧекам(ПараметрыРасчета));
	Результат.Вставить("ДенежныеСредства", РассчитатьПоказатель_ДенежныеСредства(ПараметрыРасчета));
	Результат.Вставить("ТоварныйОстаток", РассчитатьПоказатель_ТоварныйОстаток());
	Результат.Вставить("ПлатежиПоставщикам", РассчитатьПоказатель_ПлатежиПоставщикам());
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Функция ПолучитьПараметрыПоказателя_ДанныеПоЧекам(ПараметрыРасчета) Экспорт
	
	Период = Новый СтандартныйПериод;
	Период.Вариант = ВариантСтандартногоПериода.Последние7Дней;
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить(Перечисления.ВидыАнализаМонитора.КоличествоЧеков);
	МассивПоказателей.Добавить(Перечисления.ВидыАнализаМонитора.СреднийЧек);
	
	Возврат ПараметрыРасшифровки(Период, МассивПоказателей, ПараметрыРасчета);

КонецФункции

Функция ПолучитьПараметрыПоказателя_ДенежныеСредства(ПараметрыРасчета) Экспорт
	
	Период = Новый СтандартныйПериод;
	Период.Вариант = ВариантСтандартногоПериода.Сегодня;
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить(Перечисления.ВидыАнализаМонитора.ОстаткиДС);
	МассивПоказателей.Добавить(Перечисления.ВидыАнализаМонитора.ОстаткиДСККМ);
	
	Возврат ПараметрыРасшифровки(Период, МассивПоказателей, ПараметрыРасчета);

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РассчитатьПоказатель_Выручка(ДиаграммаВыручка)
	
	Результат = Неопределено;
	
	СхемаКомпоновкиДанных = Отчеты.Выручка.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	НастройкиВарианта = СхемаКомпоновкиДанных.ВариантыНастроек["ВыручкаПоДнямСвернутая"].Настройки;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиВарианта);
	
	Настройки = КомпоновщикНастроек.Настройки;
	ПараметрПериод = Новый ПараметрКомпоновкиДанных("Период");
	Период = Новый СтандартныйПериод;
	
	ДатаФормирования = НачалоДня(ТекущаяДатаСеанса());
	Период.ДатаНачала = ДатаФормирования - 13 * 24 *60 * 60;
	Период.ДатаОкончания = КонецДня(ДатаФормирования);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(ПараметрПериод, Период);
	
	ДанныеРасшифровки = Неопределено;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки,
		ДанныеРасшифровки,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	ПроцессорВыводаВКоллекциюЗначений = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаОтчета = ПроцессорВыводаВКоллекциюЗначений.Вывести(ПроцессорКомпоновкиДанных);
	
	Возврат ЗаполнитьДиаграмму_Выручка(ДиаграммаВыручка, ДатаФормирования, ТаблицаОтчета);
	
КонецФункции

Функция ЗаполнитьДиаграмму_Выручка(ДиаграммаВыручка, ДатаФормирования, ТаблицаВыручки)
	
	//Точки диаграммы
	ДатаТочки = ДатаФормирования - 7 * 24 * 60 *60;
	ПериодыТочек = Новый Соответствие;
	Для Сч = 0 По 7 Цикл
		ПериодыТочек.Вставить(ДатаТочки, Сч);
		ДатаТочки = ДатаТочки + 24 * 60 * 60;
	КонецЦикла;
	
	//Заполнение диаграммы и расчет показателя
	ВыручкаТекущая = 0;
	ВыручкаПредыдущая = 0;
	Шрифт = Новый Шрифт(, 10, Истина);
	ФорматЗначения = "ЧДЦ=0; ЧРГ=' '; ЧН='0 ₽'; ЧФ='Ч ₽'";
	Серия = ДиаграммаВыручка.Серии[0];
	
	Для Каждого СтрокаВыручка из ТаблицаВыручки Цикл
		ИндексТочки = ПериодыТочек.Получить(СтрокаВыручка.ПериодДень);
		Если ИндексТочки = Неопределено Тогда
			ВыручкаПредыдущая = ВыручкаПредыдущая + СтрокаВыручка.Выручка;
			Продолжить;
		КонецЕсли;
		ПериодТочки = СтрокаВыручка.ПериодДень;
		Если ИндексТочки = 0 Тогда
			ВыручкаПредыдущая = ВыручкаПредыдущая + СтрокаВыручка.Выручка;
		Иначе
			ВыручкаТекущая = ВыручкаТекущая + СтрокаВыручка.Выручка;
		КонецЕсли;
		Точка = ДиаграммаВыручка.Точки[ИндексТочки];
		Если ИндексТочки = 7 Тогда
			Точка.Текст = НСтр("ru = 'Сегодня'");
		Иначе
			Точка.Текст = Формат(ПериодТочки, "ДФ=dd.MM");
		КонецЕсли;
		Значение = СтрокаВыручка.Выручка;
		Подсказка = Новый ФорматированнаяСтрока(Формат(Значение, ФорматЗначения),Шрифт);
		ДиаграммаВыручка.УстановитьЗначение(Точка, Серия, Значение,, Подсказка);
		ПериодыТочек.Удалить(ПериодТочки);
	КонецЦикла;
	
	Для Каждого ДанныеТочки Из ПериодыТочек Цикл
		ИндексТочки = ДанныеТочки.Значение;
		Если ИндексТочки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПериодТочки = ДанныеТочки.Ключ;
		Точка = ДиаграммаВыручка.Точки[ИндексТочки];
		Если ИндексТочки = 7 Тогда
			Точка.Текст = НСтр("ru = 'Сегодня'");
		Иначе
			Точка.Текст = Формат(ПериодТочки, "ДФ=dd.MM");
		КонецЕсли;
		Значение = 0;
		Подсказка = Новый ФорматированнаяСтрока(Формат(Значение, ФорматЗначения), Шрифт);
		ДиаграммаВыручка.УстановитьЗначение(Точка, Серия, Значение,, Подсказка);
	КонецЦикла;
	
	Если ВыручкаПредыдущая = 0 Тогда
		ВыполнениеПоказателя = 0;
	Иначе
		ВыполнениеПоказателя = Окр(ВыручкаТекущая / ВыручкаПредыдущая * 100, 0);
		ВыполнениеПоказателя = ВыполнениеПоказателя - 100;
	КонецЕсли;
	
	ЗначениеПоказателя = Новый Структура;
	ЗначениеПоказателя.Вставить("ДиаграммаВыручка", ДиаграммаВыручка);
	ЗначениеПоказателя.Вставить("ВыполнениеПоказателя", ВыполнениеПоказателя);
	ЗначениеПоказателя.Вставить("ВыручкаТекущая", ВыручкаТекущая);

	Возврат ЗначениеПоказателя;
	
КонецФункции

Функция РассчитатьПоказатель_ДанныеПоЧекам(ПараметрыРасчета)
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	ПараметрыЗадания = ПолучитьПараметрыПоказателя_ДанныеПоЧекам(ПараметрыРасчета);
	МониторПоказателей.СформироватьДанныеОтчетаВФоне(ПараметрыЗадания, АдресВХранилище);
	
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("Аналитика");
	ТаблицаПоказателей.Колонки.Добавить("КоличествоЧеков");
	ТаблицаПоказателей.Колонки.Добавить("СреднийЧек");
	
	МассивРезультат = ПолучитьИзВременногоХранилища(АдресВХранилище);
	Для Каждого ЭлементМассива Из МассивРезультат Цикл
		Результат = ЭлементМассива.Данные;
		Результат.Свернуть("Аналитика", "Значение");
		Если ЭлементМассива.ИмяОтчета = "КоличествоЧеков" Тогда
			Для Каждого Строка Из Результат Цикл
				ДанныеПоказателя = ТаблицаПоказателей.Добавить();
				ДанныеПоказателя.Аналитика = Строка.Аналитика;
				ДанныеПоказателя.КоличествоЧеков = Строка.Значение;
			КонецЦикла;
		ИначеЕсли ЭлементМассива.ИмяОтчета = "СреднийЧек" Тогда
			Для Каждого Строка Из Результат Цикл
				ДанныеПоказателя = ТаблицаПоказателей.Добавить();
				ДанныеПоказателя.Аналитика = Строка.Аналитика;
				ДанныеПоказателя.СреднийЧек = Строка.Значение;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПоказателей.Свернуть("Аналитика", "КоличествоЧеков, СреднийЧек");
	КоличествоЧеков = 0;
	СуммаЧеков = 0;
	Для Каждого ДанныеПоказателя из ТаблицаПоказателей Цикл
		Если ДанныеПоказателя.КоличествоЧеков = 0 Тогда
			Продолжить;
		КонецЕсли;
		КоличествоЧеков = КоличествоЧеков + ДанныеПоказателя.КоличествоЧеков;
		СуммаЧеков = СуммаЧеков + ДанныеПоказателя.КоличествоЧеков * ДанныеПоказателя.СреднийЧек;
	КонецЦикла;
	
	Если КоличествоЧеков = 0 Тогда
		СреднийЧек = 0;
	Иначе
		СреднийЧек = Окр(СуммаЧеков/КоличествоЧеков, 0);
	КонецЕсли;
	
	ЗначениеПоказателя = Новый Структура;
	ЗначениеПоказателя.Вставить("КоличествоЧеков", КоличествоЧеков);
	ЗначениеПоказателя.Вставить("СреднийЧек", СреднийЧек);
	
	Возврат ЗначениеПоказателя;
	
КонецФункции

Функция РассчитатьПоказатель_ДенежныеСредства(ПараметрыРасчета)
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	ПараметрыЗадания = ПолучитьПараметрыПоказателя_ДенежныеСредства(ПараметрыРасчета);
	МониторПоказателей.СформироватьДанныеОтчетаВФоне(ПараметрыЗадания, АдресВХранилище);
	
	МассивРезультат = ПолучитьИзВременногоХранилища(АдресВХранилище);
	ОстаткиДС = 0;
	Для Каждого ЭлементМассива Из МассивРезультат Цикл
		Результат = ЭлементМассива.Данные;
		Значение = Результат.Итог("Значение");
		ОстаткиДС = ОстаткиДС + Значение;
	КонецЦикла;
	
	Возврат ОстаткиДС;
	
КонецФункции

Функция ПараметрыРасшифровки(Период, МассивПоказателей, ПараметрыРасчета)
	
	ПараметрыЗадания = Новый Структура();
	
	ТаблицаРазделов = Новый ТаблицаЗначений;
	ТаблицаРазделов.Колонки.Добавить("Доступность");
	ТаблицаРазделов.Колонки.Добавить("Показатель");
	ТаблицаРазделов.Колонки.Добавить("ВидОтображения");
	ТаблицаРазделов.Колонки.Добавить("ПалитраЦветов");
	ТаблицаРазделов.Колонки.Добавить("ЛинияТренда");
	
	ПоказателиДляРасшифровки = ПараметрыРасчета.ПоказателиДляРасшифровки;
	Для Каждого Показатель Из МассивПоказателей Цикл
		СтруктураПоиска = Новый Структура("Показатель", Показатель);
		НайденныеСтроки = ПоказателиДляРасшифровки.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаРазделов.Добавить(), НайденныеСтроки[0]);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыЗадания.Вставить("РазрезАналитики", 		"Магазин");
	ПараметрыЗадания.Вставить("Период", 				Период);
	ПараметрыЗадания.Вставить("ВыбранныеОтчеты", 		Новый ХранилищеЗначения(ТаблицаРазделов));
	ПараметрыЗадания.Вставить("СписокМагазинов", 		ПараметрыРасчета.ДоступныеМагазины);
	ПараметрыЗадания.Вставить("СписокФорматовМагазина", Неопределено);
	ПараметрыЗадания.Вставить("Периодичность",			Перечисления.Периодичность.День);
	
	Возврат ПараметрыЗадания;
	
КонецФункции

Функция РассчитатьПоказатель_ТоварныйОстаток()
	
	Результат = Неопределено;
	
	СхемаКомпоновкиДанных = Отчеты.СтоимостнаяОценкаСклада.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	НастройкиВарианта = СхемаКомпоновкиДанных.ВариантыНастроек["СтоимостнаяОценкаСкладаВРозничныхЦенах"].Настройки;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиВарианта);
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	ДанныеРасшифровки = Неопределено;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки,
		ДанныеРасшифровки,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	ПроцессорВыводаВКоллекциюЗначений = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаОтчета = ПроцессорВыводаВКоллекциюЗначений.Вывести(ПроцессорКомпоновкиДанных);
	
	ТоварныйОстаток = 0;
	Если ТаблицаОтчета.Количество() Тогда
		СтрокиРезультат = ТаблицаОтчета.НайтиСтроки(Новый Структура("Склад", Неопределено));
		Если СтрокиРезультат.Количество() > 0 Тогда
			ТоварныйОстаток = СтрокиРезультат[0].СтоимостьВРозничныхЦенах;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТоварныйОстаток;
	
КонецФункции

Функция РассчитатьПоказатель_ПлатежиПоставщикам()
	
	ДатаПолученияДанных = НачалоДня(ТекущаяДатаСеанса());
	
	Платежи_Просроченные = 0;
	Платежи_Текущие = 0;
	Платежи_Все = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ЗакупкиСервер.ПолучитьТекстЗапросаГрафикаОплатыПоставок();
	Результат = Запрос.Выполнить();
	
	ВыборкаПоДокументам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДокументам.Следующий() Цикл
		ВсеЭтапыОплачены = ?(ВыборкаПоДокументам.КОплате <= 0, Истина, Ложь);
		Если ВсеЭтапыОплачены Тогда
			Продолжить;
		КонецЕсли;
		КОплате = ВыборкаПоДокументам.КОплате;
		Платежи_Все = Платежи_Все + КОплате;
		Выборка = ВыборкаПоДокументам.Выбрать();
		Пока Выборка.Следующий() И КОплате > 0 Цикл
			Сумма = Мин(КОплате, Выборка.Сумма);
			КОплате = КОплате - Сумма;
			Если Выборка.ДатаПлатежа < ДатаПолученияДанных Тогда
				Платежи_Просроченные = Платежи_Просроченные + Сумма;
			КонецЕсли;
			Если Выборка.ДатаПлатежа <= ДатаПолученияДанных Тогда
				Платежи_Текущие = Платежи_Текущие + Сумма;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ЗначенияПоказателя = Новый Массив;
	
	ЗначениеПоказателя = Новый Структура;
	ЗначениеПоказателя.Вставить("Значение", Платежи_Просроченные);
	ЗначениеПоказателя.Вставить("ИмяЗначения", НСтр("ru = 'Просроченные'"));
	ЗначенияПоказателя.Добавить(ЗначениеПоказателя);
	
	ЗначениеПоказателя = Новый Структура;
	ЗначениеПоказателя.Вставить("Значение", Платежи_Текущие);
	ЗначениеПоказателя.Вставить("ИмяЗначения", НСтр("ru = 'На сегодня'"));
	ЗначенияПоказателя.Добавить(ЗначениеПоказателя);
	
	ЗначениеПоказателя = Новый Структура;
	ЗначениеПоказателя.Вставить("Значение", Платежи_Все);
	ЗначениеПоказателя.Вставить("ИмяЗначения", НСтр("ru = 'Общая задолженность'"));
	ЗначенияПоказателя.Добавить(ЗначениеПоказателя);
	
	Возврат ЗначенияПоказателя;
	
КонецФункции

#КонецОбласти

#КонецЕсли
