
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьОбменСБанками = ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками");
	
	Если Параметры.Свойство("ФайлВыписки") Тогда
		Объект.ФайлЗагрузки = Параметры.ФайлВыписки;
	ИначеЕсли ИспользоватьОбменСБанками Тогда
		ЗаполнитьЗначенияСвойств(Объект, Параметры);
		Выписка = ПоследняяПолученнаяВыписка();
		Если ЗначениеЗаполнено(Выписка) Тогда
			ВыпискиБанка.Добавить(Выписка);
			ЭлектроннаяВыпискаБанка = Выписка;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	Объект.НачалоПериода = ТекущаяДата;
	Объект.КонецПериода = ТекущаяДата;
	
	НастройкиОбменаСБанком = Обработки.КлиентБанк.НастройкиОбменаСБанком();
	
	УстановитьУсловноеОформление();
	
	УстановитьВидимостьДоступность();
	УстановитьВидимостьДоступностьОбменСБанками(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПриИзмененииКлючаНастройкиОбменаСбанком(Ложь);
	
	Если ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
		ОбработатьФайлВыпискиНаКлиенте("ПрочитатьФайл");
	ИначеЕсли ЗначениеЗаполнено(ВыпискиБанка)
		И ЗначениеЗаполнено(Объект.СоглашениеПрямогоОбменаСБанками) Тогда
		ОбработкаВыбора(ВыпискиБанка[0].Значение, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ВыпискиБанка.Очистить();
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.СообщениеОбменСБанками") Тогда
		
		ВыпискиБанка.Добавить(ВыбранноеЗначение);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И ВыбранноеЗначение.Количество() > 0 Тогда
		
		Для Каждого Выписка Из ВыбранноеЗначение Цикл
			ВыпискиБанка.Добавить(Выписка);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВыпискиБанка.Количество() > 0 Тогда
		
		ТекстВыписки = ДенежныеСредстваКлиент.ПолучитьТекстВыпискиДиректБанк(ВыпискиБанка);
		ОбновитьИзТекста(ТекстВыписки);
		
		УстановитьОтборыПоДаннымВыписки();
		УстановитьВидимостьДоступностьОбменСБанками(ЭтотОбъект);
		
		Если ВыпискиБанка.Количество() = 1 Тогда
			ЭлектроннаяВыпискаБанка = ВыпискиБанка[0].Значение;
		Иначе
			ЭлектроннаяВыпискаБанка = ТекстСсылкиНаЭлектронныеВыписки(ДатаНачалаВыписки, ДатаОкончанияВыписки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметры, Источник)
	
	Если ИмяСобытия = "РазобратьВыпискуБанка" Тогда
		ЗаполнитьЗначенияСвойств(Объект, Параметры);
		Если Параметры.Свойство("ЭлектроннаяВыпискаБанка") Тогда
			ДокументЭлектроннаяВыпискаБанка = Параметры.ЭлектроннаяВыпискаБанка;
			ОбработкаВыбора(ДокументЭлектроннаяВыпискаБанка, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОбновитьИзФайла(Команда)
	
	ОбновитьИзФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКЗагрузкеОтметитьВсе(Команда)
	ДокументыКЗагрузкеУстановитьОтметку(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКЗагрузкеСнятьОтметкуСоВсех(Команда)
	ДокументыКЗагрузкеУстановитьОтметку(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТолькоСОшибками(Команда)
	
	Элементы.ДокументыКЗагрузкеПоказатьТолькоСОшибками.Пометка = НЕ Элементы.ДокументыКЗагрузкеПоказатьТолькоСОшибками.Пометка;
	
	ТолькоСОшибками = Элементы.ДокументыКЗагрузкеПоказатьТолькоСОшибками.Пометка;
	ПоказатьТолькоСОшибкамиНаСервере(ТолькоСОшибками);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройка(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",            Объект.Организация);
	ПараметрыФормы.Вставить("БанковскийСчет",         Объект.БанковскийСчет);
	ПараметрыФормы.Вставить("НастройкиОбменаСБанком", НастройкиОбменаСБанком);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыполнитьНастройкуКлиентБанкаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.КлиентБанк.Форма.ФормаНастройки", ПараметрыФормы, ЭтотОбъект,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузить(Команда)
	
	ЗагрузитьВыпискуНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьЭлектроннуюВыпискуБанка(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.СоглашениеПрямогоОбменаСБанками) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Для запроса выписки необходимо в настройках указать соглашение прямого обмена с банком.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ПериодЗаполнен() Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеПолучениеВыписки = Новый ОписаниеОповещения("ЗапроситьЭлектроннуюВыпискуБанкаЗавершение", ЭтотОбъект, Новый Структура);
	
	ОбменСБанкамиКлиент.ПолучитьВыписку(ОповещениеПолучениеВыписки, Объект.БанковскийСчет, Объект.НачалоПериода, Объект.КонецПериода);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДенежныеСредстваКлиент.ВыбратьФайлВыписки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДокументыКЗагрузкеОчистить();
	Если НЕ ПустаяСтрока(Текст) Тогда
		Объект.ФайлЗагрузки = СокрЛП(Текст);
		ДенежныеСредстваКлиент.ЗагрузитьВыбранныйФайлВыписки(Объект.ФайлЗагрузки, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПустаяСтрока(Объект.ФайлЗагрузки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Файл загрузки не заполнен'"),,
			"Объект.ФайлЗагрузки");
		Возврат;
	КонецЕсли;
	
	ДенежныеСредстваКлиент.ОткрытьФайлВыписки(Объект.ФайлЗагрузки, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ПриИзмененииКлючаНастройкиОбменаСбанком();
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	ПриИзмененииКлючаНастройкиОбменаСбанком();
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяВыпискаБанкаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыпискиБанка.Количество() > 1 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВыпискиБанка", ВыпискиБанка);
		ПараметрыФормы.Вставить("НачалоПериода", Объект.НачПериода);
		ПараметрыФормы.Вставить("КонецПериода", Объект.КонПериода);
		ОткрытьФорму("Обработка.КлиентБанк.Форма.ФормаСпискаВыписок", ПараметрыФормы);
		
	ИначеЕсли ВыпискиБанка.Количество() = 1 Тогда
		
		ОбменСБанкамиКлиент.ОткрытьФормуПросмотраЭлектронногоДокумента(ВыпискиБанка[0].Значение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОшибокНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДокументыКЗагрузке.ТекущиеДанные;
	
	Сообщение = "";
	Если НЕ ПустаяСтрока(ТекущиеДанные.ПредставлениеОшибокДокумент) Тогда
		Сообщение = Сообщение + ?(Сообщение = "","", Символы.ПС + Символы.ПС) + ТекущиеДанные.ПредставлениеОшибокДокумент;
	КонецЕсли;
	Если НЕ ПустаяСтрока(ТекущиеДанные.ПредставлениеОшибокКонтрагент) Тогда
		Сообщение = Сообщение + ?(Сообщение = "","", Символы.ПС + Символы.ПС) + ТекущиеДанные.ПредставлениеОшибокКонтрагент;
	КонецЕсли;
	Если НЕ ПустаяСтрока(ТекущиеДанные.ПредставлениеОшибокБанковскийСчет) Тогда
		Сообщение = Сообщение + ?(Сообщение = "","", Символы.ПС + Символы.ПС) + ТекущиеДанные.ПредставлениеОшибокБанковскийСчет;
	КонецЕсли;
	
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("Заголовок",      НСтр("ru = 'Ошибки загрузки'"));
	ПараметрыСообщения.Вставить("РежимДекорации", Истина);
	ПараметрыСообщения.Вставить("Сообщение",      СтроковыеФункцииКлиент.ФорматированнаяСтрока(Сообщение));
	
	ОткрытьФорму("Обработка.КлиентБанк.Форма.ФормаСообщение", ПараметрыСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыДокументыКЗагрузке

&НаКлиенте
Процедура ДокументыКЗагрузкеПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСтраницуНадписиПодТаблицей(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКЗагрузкеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Элемент.ТекущийЭлемент.Имя = "ДокументыКЗагрузкеКонтрагент" Тогда
		Элемент.ТекущийЭлемент.ПодсказкаВвода = ТекущиеДанные.НаименованиеКонтрагента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКЗагрузкеПриИзменении(Элемент)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	УстановитьСтраницуНадписиПодТаблицей(ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКЗагрузкеЗагружатьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДокументыКЗагрузке.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Знак = ?(ТекущиеДанные.Загружать, 1, -1);
	
	КоличествоКЗагрузке     = КоличествоКЗагрузке     + 1 * Знак;
	СуммаПоступилоКЗагрузке = СуммаПоступилоКЗагрузке + ТекущиеДанные.СуммаПоступило * Знак;
	СуммаСписаноКЗагрузке   = СуммаСписаноКЗагрузке   + ТекущиеДанные.СуммаСписано   * Знак;
	
	УстановитьДоступностьКнопкиЗагрузить(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКЗагрузкеКонтрагентПриИзменении(Элемент)
	ДокументыКЗагрузкеКонтрагентПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДокументыКЗагрузкеКонтрагентПриИзмененииНаСервере()
	
	ТекущиеДанные = Объект.ДокументыКЗагрузке.НайтиПоИдентификатору(Элементы.ДокументыКЗагрузке.ТекущаяСтрока);
	
	Обработки.КлиентБанк.ОбновитьЗависимыеДанные(ТекущиеДанные, "Контрагент");
	Обработки.КлиентБанк.ЗаполнитьКонтрагентаВСтрокахПоПолямПоиска(Объект.ДокументыКЗагрузке, ТекущиеДанные, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКЗагрузкеБанковскийСчетКонтрагентаПриИзменении(Элемент)
	ДокументыКЗагрузкеБанковскийСчетКонтрагентаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДокументыКЗагрузкеБанковскийСчетКонтрагентаПриИзмененииНаСервере()
	ТекущиеДанные = Объект.ДокументыКЗагрузке.НайтиПоИдентификатору(Элементы.ДокументыКЗагрузке.ТекущаяСтрока);
	Обработки.КлиентБанк.ЗаполнитьБанковскийСчетКонтрагентаВСтрокахПоПолямПоиска(Объект.ДокументыКЗагрузке, ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКЗагрузкеХозяйственнаяОперацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДокументыКЗагрузке.ТекущиеДанные;
	
	ПараметрыПлатежа = Новый Структура;
	ПараметрыПлатежа.Вставить("ИсходящийПлатеж", ТекущиеДанные.ИсходящийПлатеж);
	Если ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
		ПараметрыПлатежа.Вставить("Покупатель", ТекущиеДанные.КонтрагентПокупатель);
		ПараметрыПлатежа.Вставить("Поставщик",  ТекущиеДанные.КонтрагентПоставщик);
	КонецЕсли;
	
	ДоступныеОперации = ДенежныеСредстваКлиентСервер.ДоступныеОперацииРегистрацииБезналичнойОплаты(ПараметрыПлатежа);
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(ДоступныеОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКЗагрузкеХозяйственнаяОперацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ДокументыКЗагрузке.ТекущиеДанные;
	Если ЗначениеЗаполнено(ВыбранноеЗначение) И НЕ ЗначениеЗаполнено(ТекущиеДанные.ХозяйственнаяОперация) Тогда
		ТекущиеДанные.Загружать = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКЗагрузкеХозяйственнаяОперацияПриИзменении(Элемент)
	ОбновитьЗависимыеДанныеНаКлиенте("ХозяйственнаяОперация");
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКЗагрузкеДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДокументыКЗагрузке.ТекущиеДанные;
	ДоступныеТипы = ДенежныеСредстваКлиентСервер.ДоступныеТипыДокументовРасчета(ТекущиеДанные.ХозяйственнаяОперация,
		Тип("ДокументСсылка.РегистрацияБезналичнойОплаты"));
	
	Если ДоступныеТипы.Количество() > 0 Тогда
		Элемент.ОграничениеТипа = Новый ОписаниеТипов(ДоступныеТипы);
		Элемент.ВыбиратьТип = ДоступныеТипы.Количество() > 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКЗагрузкеДокументРасчетовСКонтрагентомПриИзменении(Элемент)
	ОбновитьЗависимыеДанныеНаКлиенте("ДокументРасчетовСКонтрагентом");
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКЗагрузкеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТаблицы = Объект.ДокументыКЗагрузке.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле.Имя = "ДокументыКЗагрузкеНазначениеПлатежа" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("Заголовок", НСтр("ru = 'Назначение платежа'"));
		ПараметрыСообщения.Вставить("Сообщение", СтрокаТаблицы.НазначениеПлатежа);
		Если СтрокаТаблицы.Документ <> Неопределено Тогда
			ПараметрыСообщения.Вставить("ГиперссылкаТекст", Строка(СтрокаТаблицы.Документ));
			ПараметрыСообщения.Вставить("ГиперссылкаНавигация", ПолучитьНавигационнуюСсылку(СтрокаТаблицы.Документ));
		КонецЕсли;
		
		ОткрытьФорму("Обработка.КлиентБанк.Форма.ФормаСообщение", ПараметрыСообщения);
		
	ИначеЕсли Поле.Имя = "ДокументыКЗагрузкеДокумент" Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(СтрокаТаблицы.Документ) Тогда
			ПоказатьЗначение(, СтрокаТаблицы.Документ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьИзФайла(ФайлПолученнойВыписки = Неопределено)
	
	ДокументыКЗагрузкеОчистить();
	Если НЕ ПустаяСтрока(Объект.ФайлЗагрузки) Тогда
		ДенежныеСредстваКлиент.ЗагрузитьВыбранныйФайлВыписки(Объект.ФайлЗагрузки, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзТекста(ТекстПолученнойВыписки = Неопределено)
	
	ДокументыКЗагрузкеОчистить();
	Если ЗначениеЗаполнено(ТекстПолученнойВыписки) Тогда
		ОписаниеФайла = Новый Структура("ТекстВыписки, Кодировка", ТекстПолученнойВыписки, "utf-8");
		ПрочитатьФайлВыписки(ОписаниеФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоследняяПолученнаяВыписка()
	
	Результат = Неопределено;
	
	Организация = Объект.Организация;
	НастройкаОбмена = Объект.СоглашениеПрямогоОбменаСБанками;
	СчетЗаполнен = ЗначениеЗаполнено(Объект.БанковскийСчет);
	НомерСчета = Объект.БанковскийСчет.НомерСчета;
	
	Если Не ЗначениеЗаполнено(Организация) Или
		Не ЗначениеЗаполнено(НастройкаОбмена) Тогда
		
		Возврат Результат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СообщениеОбменСБанками.Ссылка КАК Выписка,
	|	СообщениеОбменСБанками.Дата КАК Дата
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|ГДЕ
	|	СообщениеОбменСБанками.Организация = &Организация
	|	И СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	|	И СообщениеОбменСБанками.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ВыпискаБанка)
	|	И &СчетЗаполнен = ИСТИНА
	|	И СообщениеОбменСБанками.НомерСчета ПОДОБНО &НомерСчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СообщениеОбменСБанками.Ссылка,
	|	СообщениеОбменСБанками.Дата
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|ГДЕ
	|	СообщениеОбменСБанками.Организация = &Организация
	|	И СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
	|	И СообщениеОбменСБанками.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ВыпискаБанка)
	|	И &СчетЗаполнен = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	СообщениеОбменСБанками.Дата УБЫВ";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Запрос.УстановитьПараметр("СчетЗаполнен", СчетЗаполнен);
	Запрос.УстановитьПараметр("НомерСчета", НСтр("ru='%'") + Объект.БанковскийСчет.НомерСчета + НСтр("ru='%'"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат = Выборка.Выписка;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗапроситьЭлектроннуюВыпискуБанкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЕстьВыписки = Истина;
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ЕстьВыписки = Ложь;
	КонецЕсли;
	
	Если НЕ Результат.Свойство("Успех")
		ИЛИ Результат.Успех <> Истина Тогда
		ЕстьВыписки = Ложь;
	КонецЕсли;
	
	Если ЕстьВыписки И Результат.Свойство("Выписки") Тогда
		ОбработкаВыбора(Результат.Выписки, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСсылкиНаЭлектронныеВыписки(НачалоПериода, КонецПериода)
	
	ШаблонСтроки = НСтр("ru = 'Выписка банка с %1 по %2'");
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки,
		Формат(НачалоПериода, "ДФ=dd.MM.yyyy"), Формат(КонецПериода, "ДФ=dd.MM.yyyy"));
	
КонецФункции

&НаКлиенте
Функция ПериодЗаполнен()
	
	ПериодЗаполнен = Истина;
	
	Если НЕ ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			Нстр("ru = 'Не заполнена дата начала периода'")
			,, "Объект.НачалоПериода");
		ПериодЗаполнен = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			Нстр("ru = 'Не заполнена дата окончания периода'")
			,, "Объект.КонецПериода");
		ПериодЗаполнен = Ложь;
	КонецЕсли;
	
	Возврат ПериодЗаполнен;
	
КонецФункции

#Область РаботаСФайломВыписки

&НаКлиенте
Процедура ОбработатьФайлВыпискиНаКлиенте(Действие, ИмяФайла = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		Объект.ФайлЗагрузки = ИмяФайла;
	КонецЕсли;
	
	Если Действие = "ПрочитатьФайл" Тогда
		ДокументыКЗагрузкеОчистить();
	КонецЕсли;
	
	ПомещаемыеФайлы = Новый Массив;
	ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(Объект.ФайлЗагрузки));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Действие", Действие);
	
	ПомещениеФайловЗавершение = Новый ОписаниеОповещения("ПомещениеФайлаВыпискиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПомещениеФайлов(ПомещениеФайловЗавершение, ПомещаемыеФайлы, , Ложь, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеФайлаВыпискиЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы <> Неопределено И ПомещенныеФайлы.Количество() > 0 Тогда
		
		ОписаниеФайла = ПомещенныеФайлы.Получить(0);
		АдресФайла    = ОписаниеФайла.Хранение;
		
		Если АдресФайла = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Действие = "ПрочитатьФайл" Тогда
			ПрочитатьФайлВыписки(ОписаниеФайла);
		ИначеЕсли ДополнительныеПараметры.Действие = "ОткрытьФайл" Тогда
			ОткрытьФайлВыписки(ОписаниеФайла);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлВыписки(ОписаниеФайла)
	
	АдресФайла = ОписаниеФайла.Хранение;
	
	Текст = ТекстовыйДокументИзВременногоХранилищаФайла(АдресФайла);
	Текст.Показать(НСтр("ru = 'Файл загрузки'"), Объект.ФайлЗагрузки);
	
КонецПроцедуры

&НаСервере
Функция ТекстовыйДокументИзВременногоХранилищаФайла(АдресФайла)
	
	ИмяВременногоФайла  = ПолучитьИмяВременногоФайла("txt");
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
	Текст = Новый ТекстовыйДокумент();
	
	// Актуализируем кодировку для чтения.
	Если НЕ Обработки.КлиентБанк.АктуализироватьКодировкуЧтенияФайла(ИмяВременногоФайла, Объект.Кодировка) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не удалось определить кодировку файла! Файл содержит недопустимые символы.'"));
	КонецЕсли;
	
	Текст.Прочитать(ИмяВременногоФайла, Объект.Кодировка);
	УдалитьФайлы(ИмяВременногоФайла); // Удалим временный файл, после его обработки.
	
	Возврат Текст;
	
КонецФункции

&НаКлиенте
Процедура ПрочитатьФайлВыписки(ОписаниеФайла)
	
	ДлительнаяОперация = ПрочитатьФайлВыпискиНаСервере(ОписаниеФайла);
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		СообщитьОбОшибкеДлительнойОперации(ДлительнаяОперация);
	Иначе
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ТекстСообщения = НСтр("ru = 'Чтение данных из банка'");
		
		Обработчик = Новый ОписаниеОповещения("ПослеЧтенияФайлаВыпискиВФоне", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьФайлВыпискиНаСервере(ОписаниеФайла)
	
	ПараметрыПроцедуры = Новый Структура;
	Если ТипЗнч(ОписаниеФайла) = Тип("Структура") И ОписаниеФайла.Свойство("ТекстВыписки") Тогда
		ПараметрыПроцедуры.Вставить("ТекстВыписки", ОписаниеФайла.ТекстВыписки);
		ПараметрыПроцедуры.Вставить("Кодировка",    ОписаниеФайла.Кодировка);
	Иначе
		ПараметрыПроцедуры.Вставить("ФайлЗагрузки", ОписаниеФайла.Имя);
		ПараметрыПроцедуры.Вставить("Кодировка",    Объект.Кодировка);
		Если Не ПустаяСтрока(ОписаниеФайла.Хранение) Тогда
			ПараметрыПроцедуры.Вставить("ДвоичныеДанные", ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение));
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Чтение выписки банка'");
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.КлиентБанк.ПрочитатьФайлВыпискиВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПослеЧтенияФайлаВыпискиВФоне(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ОбработатьРезультатЧтенияВыписки(ДлительнаяОперация.АдресРезультата);
	ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
		СообщитьОбОшибкеДлительнойОперации(ДлительнаяОперация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаРезультатаЧтенияВыписки

&НаКлиенте
Процедура ОбработатьРезультатЧтенияВыписки(АдресРезультата)
	
	АдресХранилищаРезультатЧтенияВыписки = АдресРезультата;
	
	ОбработатьРезультатЧтенияВыпискиНаСервере();
	
	ПроверитьСоответствиеВыпискиОтбору();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатЧтенияВыпискиНаСервере()
	
	РезультатЧтенияВыписки = ПолучитьИзВременногоХранилища(АдресХранилищаРезультатЧтенияВыписки);
	
	// Выведем сообщения пользователю при наличии.
	Для Каждого СообщениеПользователю Из РезультатЧтенияВыписки.СообщенияПользователю Цикл
		ОбщегоНазначения.СообщитьПользователю(СообщениеПользователю);
	КонецЦикла;
	
	// Обновим кодировку по результатам чтения.
	Если НЕ РезультатЧтенияВыписки.Кодировка = Объект.Кодировка Тогда
		Объект.Кодировка = РезультатЧтенияВыписки.Кодировка;
	КонецЕсли;
	
	// Заполним состав выписки.
	СоставВыписки = Новый Структура;
	СоставВыписки.Вставить("ОрганизацииВыписки",     Новый Массив);
	СоставВыписки.Вставить("БанковскиеСчетаВыписки", Новый Массив);
	СоставВыписки.Вставить("ОрганизацииСтрокой");
	СоставВыписки.Вставить("БанковскиеСчетаСтрокой");
	
	ОрганизацииСтрокой = "";
	БанковскиеСчетаСтрокой = "";
	Для Каждого ЭлементСоответствия Из РезультатЧтенияВыписки.ВыпискиПоСчетам Цикл
		НомерСчета     = ЭлементСоответствия.Ключ;
		ВыпискаПоСчету = ЭлементСоответствия.Значение;
		Если СоставВыписки.ОрганизацииВыписки.Найти(ВыпискаПоСчету.Организация) = Неопределено Тогда
			СоставВыписки.ОрганизацииВыписки.Добавить(ВыпискаПоСчету.Организация);
			ОрганизацииСтрокой = ОрганизацииСтрокой + ?(ОрганизацииСтрокой = "", "", Символы.ПС)
				+ Строка(ВыпискаПоСчету.Организация);
		КонецЕсли;
		Если СоставВыписки.БанковскиеСчетаВыписки.Найти(ВыпискаПоСчету.БанковскийСчетОрганизации) = Неопределено Тогда
			СоставВыписки.БанковскиеСчетаВыписки.Добавить(ВыпискаПоСчету.БанковскийСчетОрганизации);
			БанковскиеСчетаСтрокой = БанковскиеСчетаСтрокой + ?(БанковскиеСчетаСтрокой = "", "", Символы.ПС)
				+ Строка(ВыпискаПоСчету.БанковскийСчетОрганизации);
		КонецЕсли;
	КонецЦикла;
	
	СоставВыписки.ОрганизацииСтрокой = ОрганизацииСтрокой;
	СоставВыписки.БанковскиеСчетаСтрокой = БанковскиеСчетаСтрокой;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоответствиеВыпискиОтбору()
	
	ОрганизацияСоответствует = НЕ ЗначениеЗаполнено(Объект.Организация)
		ИЛИ НЕ СоставВыписки.ОрганизацииВыписки.Найти(Объект.Организация) = Неопределено;
		
	БанковскийСчетСоответствует = НЕ ЗначениеЗаполнено(Объект.БанковскийСчет)
		ИЛИ НЕ СоставВыписки.БанковскиеСчетаВыписки.Найти(Объект.БанковскийСчет) = Неопределено;
		
	Если ОрганизацияСоответствует И БанковскийСчетСоответствует Тогда
		УстановитьОтборыПоДаннымВыписки(Ложь);
		Если ДенежныеСредстваКлиент.ОбновитьДетальныеНастройкиОбмена(Объект, НастройкиОбменаСБанком, Ложь) Тогда
			НастройкиОбменаСБанкомИзменены = Истина;
		КонецЕсли;
		РазместитьНаФормеРезультатЧтенияВыписки();
		ПриИзмененииКлючаНастройкиОбменаСБанком(Ложь);
	Иначе
		// Выписка не соответствует отбору.
		ТекстВопроса = НСтр("ru = 'Файл выписки не содержит данных, удовлетворяющих отбору.'") + Символы.ПС
			+ НСтр("ru = 'Сбросить фильтры и прочитать?'");
		
		ОповещениеПослеЗакрытияВопроса = Новый ОписаниеОповещения("ПослеЗакрытияВопросаВыпискаНеСоответствуетОтбору", ЭтотОбъект);
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да,     НСтр("ru = 'Да'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
		
		ПоказатьВопрос(
				ОповещениеПослеЗакрытияВопроса,
				ТекстВопроса,
				Кнопки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаВыпискаНеСоответствуетОтбору(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	// Обновим фильтры.
	УстановитьОтборыПоДаннымВыписки(Истина);
	
	Если ДенежныеСредстваКлиент.ОбновитьДетальныеНастройкиОбмена(Объект, НастройкиОбменаСБанком, Ложь) Тогда
		НастройкиОбменаСБанкомИзменены = Истина;
	КонецЕсли;
	
	РазместитьНаФормеРезультатЧтенияВыписки();
	ПриИзмененииКлючаНастройкиОбменаСБанком(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаВыписки

&НаКлиенте
Процедура ЗагрузитьВыпискуНаКлиенте()
	
	ДлительнаяОперация = ЗагрузитьВыпискуНаСервере();
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		СообщитьОбОшибкеДлительнойОперации(ДлительнаяОперация);
	Иначе
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ТекстСообщения = НСтр("ru = 'Загрузка банковской выписки'");
		
		Обработчик = Новый ОписаниеОповещения("ПослеЗагрузкиБанковскойВыпискиВФоне", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьВыпискуНаСервере()
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ДокументыКЗагрузке",          Объект.ДокументыКЗагрузке.Выгрузить());
	ПараметрыПроцедуры.Вставить("ПараметрыЗагрузкиДокументов", ПараметрыЗагрузкиДокументов());
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка выписки банка'");
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.КлиентБанк.ЗагрузитьВыпискуВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПараметрыЗагрузкиДокументов()
	
	ПараметрыЗагрузкиДокументов = Новый Структура;
	ПараметрыЗагрузкиДокументов.Вставить("ПроводитьДокументыПриЗагрузке", НастройкиОбменаСБанком.ПроводитьДокументыПриЗагрузке);
	ПараметрыЗагрузкиДокументов.Вставить("Ответственный", Пользователи.ТекущийПользователь());
	
	Возврат ПараметрыЗагрузкиДокументов;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗагрузкиБанковскойВыпискиВФоне(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда // задание было отменено
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ОбработатьРезультатЗагрузкиВыписки(ДлительнаяОперация.АдресРезультата);
	ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
		СообщитьОбОшибкеДлительнойОперации(ДлительнаяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗагрузкиВыписки(АдресРезультата)
	
	ОбработатьРезультатЗагрузкиВыпискиНаСервере(АдресРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатЗагрузкиВыпискиНаСервере(АдресРезультата)
	
	РезультатЗагрузкиВыписки = ПолучитьИзВременногоХранилища(АдресРезультата);
		
	// Выведем сообщения пользователю при наличии.
	Для Каждого СообщениеПользователю Из РезультатЗагрузкиВыписки.СообщенияПользователю Цикл
		ОбщегоНазначения.СообщитьПользователю(СообщениеПользователю);
	КонецЦикла;
	
	Объект.ДокументыКЗагрузке.Загрузить(РезультатЗагрузкиВыписки.ДокументыКЗагрузке);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеФормой

&НаКлиенте
Процедура ДокументыКЗагрузкеОчистить()
	
	ОчиститьСообщения();
	Объект.ДокументыКЗагрузке.Очистить();
	
	КоличествоКЗагрузке     = 0;
	СуммаПоступилоКЗагрузке = 0;
	СуммаСписаноКЗагрузке   = 0;
	
	Элементы.ДокументыКЗагрузкеСуммаПоступило.ТекстПодвала    = "";
	Элементы.ДокументыКЗагрузкеСуммаСписано.ТекстПодвала      = "";
	
	УстановитьДоступностьКнопкиЗагрузить(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура РазместитьНаФормеРезультатЧтенияВыписки()
	
	Если ПустаяСтрока(АдресХранилищаРезультатЧтенияВыписки) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЧтенияВыписки = ПолучитьИзВременногоХранилища(АдресХранилищаРезультатЧтенияВыписки);
	
	Если РезультатЧтенияВыписки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Обновим сохраненные настройки обмена с банком.
	Если НастройкиОбменаСБанкомИзменены Тогда
		Обработки.КлиентБанк.СохранитьНастройкиОбменаСБанком(НастройкиОбменаСБанком);
		НастройкиОбменаСБанкомИзменены = Ложь;
	КонецЕсли;
	
	ЗаполнитьДокументыКЗагрузке(РезультатЧтенияВыписки.ВыпискиПоСчетам);
	
	// Обновим связанные данные формы.
	УстановитьВидимостьДоступность();
	ДокументыКЗагрузкеОбновитьПодвал();
	ДокументыКЗагрузкеОбновитьИтогиКЗагрузке();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыПоДаннымВыписки(СброситьФильтры = Ложь)
	
	Если СоставВыписки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СброситьФильтры Тогда
		Объект.Организация    = Неопределено;
		Объект.БанковскийСчет = Неопределено;
	КонецЕсли;
	
	Если СоставВыписки.ОрганизацииВыписки.Количество() = 1 Тогда
		Объект.Организация = СоставВыписки.ОрганизацииВыписки[0];
		Если СоставВыписки.БанковскиеСчетаВыписки.Количество() = 1 Тогда
			Объект.БанковскийСчет = СоставВыписки.БанковскиеСчетаВыписки[0];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДокументыКЗагрузкеОбновитьПодвал()
	
	Элементы.ДокументыКЗагрузкеСуммаПоступило.ТекстПодвала = Формат(Объект.ДокументыКЗагрузке.Итог("СуммаПоступило"),"ЧЦ=15; ЧДЦ=2");
	Элементы.ДокументыКЗагрузкеСуммаСписано.ТекстПодвала   = Формат(Объект.ДокументыКЗагрузке.Итог("СуммаСписано"),"ЧЦ=15; ЧДЦ=2");
	
КонецПроцедуры

&НаСервере
Процедура ДокументыКЗагрузкеОбновитьИтогиКЗагрузке()
	
	ДокументыКЗагрузке = Объект.ДокументыКЗагрузке.Выгрузить(Новый Структура("Загружать", Истина));
	
	КоличествоКЗагрузке     = ДокументыКЗагрузке.Количество();
	СуммаПоступилоКЗагрузке = ДокументыКЗагрузке.Итог("СуммаПоступило");
	СуммаСписаноКЗагрузке   = ДокументыКЗагрузке.Итог("СуммаСписано");
	
	УстановитьДоступностьКнопкиЗагрузить(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УстановитьУсловноеОформлениеВидимость();
	
	#Область Документ
	
	// Документ найден.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеДокумент");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.Документ",
		ВидСравненияКомпоновкиДанных.Заполнено);
		
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ДокументыКЗагрузке.ПредставлениеДокумента"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);
	
	// Документ к загрузке.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеДокументНеЗагружен");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.Документ",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.ХозяйственнаяОперация",
		ВидСравненияКомпоновкиДанных.Заполнено);
		
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='К загрузке'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// Документ не может быть загружен: операция не поддерживается.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеДокументНеЗагружен");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.Документ",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.ХозяйственнаяОперация",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.ПредставлениеОперации",
		ВидСравненияКомпоновкиДанных.Заполнено);
		
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Операция не поддерживается'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// Документ не может быть загружен: операция не определена.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеДокументНеЗагружен");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.Документ",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.ХозяйственнаяОперация",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.ПредставлениеОперации",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Укажите операцию'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	#КонецОбласти
	
	#Область Контрагент
	
	// ДокументыКЗагрузкеКонтрагент.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеКонтрагент");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.Контрагент",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ДокументыКЗагрузке.ПредставлениеКонтрагента"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// ДокументыКЗагрузкеБанковскийСчетКонтрагента.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеБанковскийСчетКонтрагента");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.БанковскийСчетКонтрагента",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ДокументыКЗагрузке.ПредставлениеСчетаКонтрагента"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// ДокументыКЗагрузкеБанковскийСчетКонтрагента.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеБанковскийСчетКонтрагента");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.Контрагент",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
	#Область ДокументРасчетовСКонтрагентом
	
	// ДокументыКЗагрузкеДокументРасчетовСКонтрагентом.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеДокументРасчетовСКонтрагентом");
	
	ВидыОперацийПрочее = ДенежныеСредстваКлиентСервер.ДоступныеОперацииРегистрацииБезналичнойОплаты(
		Новый Структура("Покупатель, Поставщик", Ложь, Ложь));
		
	СписокОперацийПрочее = Новый СписокЗначений;
	СписокОперацийПрочее.ЗагрузитьЗначения(ВидыОперацийПрочее);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.ХозяйственнаяОперация",
		ВидСравненияКомпоновкиДанных.ВСписке,
		СписокОперацийПрочее);
		
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
	#Область ХозяйственнаяОперация
	
	// Хоз. операция не поддерживается.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеХозяйственнаяОперация");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.ПредставлениеОперации",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.ХозяйственнаяОперация",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ДокументыКЗагрузке.ПредставлениеОперации"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// Хоз. операция не опознана.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеХозяйственнаяОперация");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.ПредставлениеОперации",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.ХозяйственнаяОперация",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Выберите из списка'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	#КонецОбласти
	
	#Область НеподдерживаемыеОперации
	
	// ДокументыКЗагрузкеТолькоПросмотр.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеЗагружать");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеКонтрагент");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеБанковскийСчетКонтрагента");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеСтатьяДвиженияДенежныхСредств");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеДокументРасчетовСКонтрагентом");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеМагазин");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.ХозяйственнаяОперация",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ДокументыКЗагрузкеЦветТекста.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеДокументНеЗагружен");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеДатаВходящегоДокумента");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеНомерВходящегоДокумента");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеСуммаПоступило");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеСуммаСписано");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеКонтрагент");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеБанковскийСчетКонтрагента");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеНазначениеПлатежа");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеХозяйственнаяОперация");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеСтатьяДвиженияДенежныхСредств");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеДокументРасчетовСКонтрагентом");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеМагазин");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеБанковскийСчетОрганизации");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.ХозяйственнаяОперация",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	#КонецОбласти
	
	
	#Область ПроверкаЗаполнения
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеСтатьяДвиженияДенежныхСредств");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.Загружать",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.ХозяйственнаяОперация",
		ВидСравненияКомпоновкиДанных.Заполнено);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.СтатьяДвиженияДенежныхСредств",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеМагазин");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.Загружать",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.Магазин",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	ХозяйственныеОперацииПрочее = Новый СписокЗначений;
	ХозяйственныеОперацииПрочее.Добавить(Перечисления.ХозяйственныеОперации.ПрочиеДоходы);
	ХозяйственныеОперацииПрочее.Добавить(Перечисления.ХозяйственныеОперации.ПрочиеРасходы);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.ХозяйственнаяОперация",
		ВидСравненияКомпоновкиДанных.НеВСписке,
		ХозяйственныеОперацииПрочее);
		
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	#КонецОбласти
	
	
	#Область Предупреждения

	// Дата, Номер документа.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеДатаВходящегоДокумента");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеНомерВходящегоДокумента");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.ХозяйственнаяОперация",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.ПредставлениеОшибок",
		ВидСравненияКомпоновкиДанных.Заполнено);
		
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
	
	// ДокументыКЗагрузкеДокумент.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеДокумент");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.ПредставлениеОшибокДокумент",
		ВидСравненияКомпоновкиДанных.Заполнено);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.ХозяйственнаяОперация",
		ВидСравненияКомпоновкиДанных.Заполнено);
		
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
	// ДокументыКЗагрузкеКонтрагент.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеКонтрагент");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.ПредставлениеОшибокКонтрагент",
		ВидСравненияКомпоновкиДанных.Заполнено);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.ХозяйственнаяОперация",
		ВидСравненияКомпоновкиДанных.Заполнено);
		
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
	// ДокументыКЗагрузкеБанковскийСчетКонтрагента.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеБанковскийСчетКонтрагента");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.ПредставлениеОшибокБанковскийСчет",
		ВидСравненияКомпоновкиДанных.Заполнено);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.ХозяйственнаяОперация",
		ВидСравненияКомпоновкиДанных.Заполнено);
		
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);


	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВидимость()
	
	// ДокументыКЗагрузкеДокументНеЗагружен
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеДокументНеЗагружен");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.Документ",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ДокументыКЗагрузкеДокумент
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДокументыКЗагрузкеДокумент");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор,
		"Объект.ДокументыКЗагрузке.Документ",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	// Установим видимость организации и банковского счета в зависимости от их количества.
	Запрос = Новый Запрос;
	ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 2
		|	БанковскиеСчетаОрганизаций.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчетаОрганизаций
		|ГДЕ
		|	НЕ БанковскиеСчетаОрганизаций.ПометкаУдаления
		|	И БанковскиеСчетаОрганизаций.Владелец ССЫЛКА Справочник.Организации";
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВладелецСчета", "БанковскиеСчетаОрганизаций.Владелец = &Владелец");
		Запрос.УстановитьПараметр("Владелец", Объект.Организация);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВладелецСчета", "Истина");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	РезультатПакета = Запрос.ВыполнитьПакет();
	
	ВыборкаОрганизации = РезультатПакета[0].Выбрать();
	ВыборкаСчета       = РезультатПакета[1].Выбрать();
	
	Элементы.ОрганизацияЗагрузкаФайл.Видимость    = ВыборкаОрганизации.Количество() > 1;
	Элементы.БанковскийСчетЗагрузкаФайл.Видимость = ВыборкаОрганизации.Количество() > 1 ИЛИ ВыборкаСчета.Количество() > 1;
	
	Элементы.БанковскийСчетЗагрузкаФайл.МаксимальнаяШирина = ?(Элементы.ОрганизацияЗагрузкаФайл.Видимость, 0, 40);
	
	Если ВыборкаОрганизации.Количество() = 1 Тогда
		ВыборкаОрганизации.Следующий();
		Объект.Организация = ВыборкаОрганизации.Ссылка;
		Если ВыборкаСчета.Количество() = 1 Тогда
			ВыборкаСчета.Следующий();
			Объект.БанковскийСчет = ВыборкаСчета.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДокументыКЗагрузкеБанковскийСчетОрганизации.Видимость = НЕ ЗначениеЗаполнено(Объект.БанковскийСчет);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДоступностьОбменСБанками(Форма)
	
	ИспользуетсяОбменСБанками = Форма.ИспользоватьОбменСБанками
		И ЗначениеЗаполнено(Форма.Объект.СоглашениеПрямогоОбменаСБанками)
		И ЗначениеЗаполнено(Форма.Объект.БанковскийСчет);
	
	Элементы = Форма.Элементы;
	Элементы.ГруппаЗапросВыписки.Видимость = ИспользуетсяОбменСБанками;
	Элементы.ГруппаФайл.Видимость = Не ИспользуетсяОбменСБанками;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтраницуНадписиПодТаблицей(ТекущиеДанные)
	Если ЗначениеЗаполнено(ТекущиеДанные.ПредставлениеОшибок) Тогда
		Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаПредупреждающееСообщение;
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекущиеДанные.ХозяйственнаяОперация) И ЗначениеЗаполнено(ТекущиеДанные.ПредставлениеОперации) Тогда
		Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаОперацияНеПоддерживается;
	Иначе
		Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаНетИнформации;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКнопкиЗагрузить(Форма)
	
	Элементы = Форма.Элементы;
	Элементы.КомандаЗагрузить.Доступность = (Форма.КоличествоКЗагрузке > 0);
	
КонецПроцедуры

&НаСервере
Процедура ДокументыКЗагрузкеУстановитьОтметку(Отметка)
	
	Для каждого СтрокаДокумента Из Объект.ДокументыКЗагрузке Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ХозяйственнаяОперация) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаДокумента.Загружать = Отметка;
	КонецЦикла;
	
	ДокументыКЗагрузкеОбновитьИтогиКЗагрузке();
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьТолькоСОшибкамиНаСервере(ТолькоСОшибками)
	
	Если ТолькоСОшибками Тогда
		ОтборОшибок = Новый Структура("ЕстьОшибки", Истина);
		Элементы.ДокументыКЗагрузке.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборОшибок);
	Иначе
		Элементы.ДокументыКЗагрузке.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиОбменаСБанком

&НаКлиенте
Процедура ПриИзмененииКлючаНастройкиОбменаСБанком(ЗагружатьВыписку = Истина)
	
	ТекущийФайлЗагрузки = Объект.ФайлЗагрузки;
	НастройкиВосстановлены = ДенежныеСредстваКлиент.ВосстановитьДетальныеНастройкиОбмена(Объект, НастройкиОбменаСБанком);
	
	Выписка = Неопределено;
	Если НастройкиВосстановлены
		И ИспользоватьОбменСБанками
		И ЗначениеЗаполнено(Объект.СоглашениеПрямогоОбменаСБанками) Тогда
		Выписка = ПоследняяПолученнаяВыписка();
		Если ЗначениеЗаполнено(Выписка) Тогда
			ВыпискиБанка.Очистить();
			ВыпискиБанка.Добавить(Выписка);
			ЭлектроннаяВыпискаБанка = Выписка;
		КонецЕсли;
	КонецЕсли;
		
	Если ЗагружатьВыписку Тогда
		ДокументыКЗагрузкеОчистить();
		Если НастройкиВосстановлены Тогда
			Если ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
				ДенежныеСредстваКлиент.ЗагрузитьВыбранныйФайлВыписки(Объект.ФайлЗагрузки, ЭтотОбъект);
			ИначеЕсли ЗначениеЗаполнено(Выписка) Тогда
				ОбработкаВыбора(ВыпискиБанка[0].Значение, Неопределено);
			КонецЕсли;
		Иначе
			Если НЕ ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
				Объект.ФайлЗагрузки = ТекущийФайлЗагрузки;
			КонецЕсли;
			РазместитьНаФормеРезультатЧтенияВыписки();
		КонецЕсли;
	Иначе
		Объект.ФайлЗагрузки = ТекущийФайлЗагрузки;
	КонецЕсли;
	
	УстановитьВидимостьДоступностьОбменСБанками(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуКлиентБанкаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	// Настройки были изменены.
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		НастройкиОбменаСБанком = РезультатЗакрытия.НастройкиОбменаСБанком;
		
		ПриИзмененииКлючаНастройкиОбменаСБанком();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура СообщитьОбОшибкеДлительнойОперации(ДлительнаяОперация)
	
	АдресХранилищаРезультатЧтенияВыписки = "";
	
	Если ЗначениеЗаполнено(ДлительнаяОперация.КраткоеПредставлениеОшибки) Тогда
		СообщениеОбОшибке = ДлительнаяОперация.КраткоеПредставлениеОшибки;
	Иначе
		СообщениеОбОшибке = ДлительнаяОперация.ПодробноеПредставлениеОшибки;
	КонецЕсли;
	
	ПоказатьПредупреждение(, СообщениеОбОшибке);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимыеДанныеНаКлиенте(Источник)
	
	ДанныеСтроки = ДанныеСтрокиВВидеКоллекции(Источник);
	ОбновитьЗависимыеДанныеНаСервере(ДанныеСтроки, Источник);
	
	ЗаполнитьЗначенияСвойств(Элементы.ДокументыКЗагрузке.ТекущиеДанные, ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеСтрокиВВидеКоллекции(Источник)
	
	ДанныеСтроки = Новый Структура;
	Если Источник = "Контрагент" Тогда
		ДанныеСтроки.Вставить("Контрагент");
		ДанныеСтроки.Вставить("ХозяйственнаяОперация");
		ДанныеСтроки.Вставить("ДокументРасчетовСКонтрагентом");
		ДанныеСтроки.Вставить("КонтрагентПокупатель");
		ДанныеСтроки.Вставить("КонтрагентПоставщик");
	ИначеЕсли Источник = "ХозяйственнаяОперация" Тогда
		ДанныеСтроки.Вставить("ХозяйственнаяОперация");
		ДанныеСтроки.Вставить("СтатьяДвиженияДенежныхСредств");
		ДанныеСтроки.Вставить("Загружать");
		ДанныеСтроки.Вставить("ДокументРасчетовСКонтрагентом");
	ИначеЕсли Источник = "ДокументРасчетовСКонтрагентом" Тогда
		ДанныеСтроки.Вставить("ДокументРасчетовСКонтрагентом");
		ДанныеСтроки.Вставить("Магазин");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, Элементы.ДокументыКЗагрузке.ТекущиеДанные);
	
	Возврат ДанныеСтроки;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбновитьЗависимыеДанныеНаСервере(ДанныеСтроки, Источник)
	Обработки.КлиентБанк.ОбновитьЗависимыеДанные(ДанныеСтроки, Источник);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументыКЗагрузке(ВыпискиПоСчетам)
	
	НачалоПериода = Дата(3999,12,31, 23,59,59);
	КонецПериода = Дата(1,1,1);
	
	Магазин = ЗначениеНастроекПовтИсп.МагазинПоУмолчанию();
	
	Для Каждого ЭлементСоответствия Из ВыпискиПоСчетам Цикл
		
		НомерСчета     = ЭлементСоответствия.Ключ;
		ВыпискаПоСчету = ЭлементСоответствия.Значение;
		
		Если ЗначениеЗаполнено(Объект.БанковскийСчет)
			И НЕ ВыпискаПоСчету.БанковскийСчетОрганизации = Объект.БанковскийСчет
			ИЛИ ЗначениеЗаполнено(Объект.Организация)
			И НЕ ВыпискаПоСчету.Организация = Объект.Организация Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ДокументВыписки Из ВыпискаПоСчету.ДокументыКЗагрузке Цикл
			
			ДокументКЗагрузке = Объект.ДокументыКЗагрузке.Добавить();
			ЗаполнитьЗначенияСвойств(ДокументКЗагрузке, ДокументВыписки);
			
			ДокументКЗагрузке.Магазин = Магазин;
			
			НачалоПериода = Мин(НачалоПериода, ДокументВыписки.ДатаВходящегоДокумента);
			КонецПериода = Макс(КонецПериода, ДокументВыписки.ДатаВходящегоДокумента);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДатаНачалаВыписки = ?(НачалоПериода = Дата(3999,12,31, 23,59,59), Объект.НачалоПериода, НачалоПериода);
	ДатаОкончанияВыписки = ?(КонецПериода = Дата(1,1,1), Объект.КонецПериода, КонецПериода);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти