#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ПрочитатьФайлВыпискиВФоне(Параметры, АдресРезультата) Экспорт
	
	Кодировка = Параметры.Кодировка;
	Если Параметры.Свойство("ТекстВыписки") Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла("txt");
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(Параметры.ТекстВыписки);
		ТекстовыйДокумент.Записать(ИмяФайла);
	ИначеЕсли Параметры.Свойство("ДвоичныеДанные") Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла();
		Параметры.ДвоичныеДанные.Записать(ИмяФайла);
	Иначе
		ИмяФайла = Параметры.ФайлЗагрузки;
	КонецЕсли;
	
	ОдиночныйРазделительСтрок = Ложь;
	Если Параметры.Свойство("ОдиночныйРазделительСтрок") Тогда
		ОдиночныйРазделительСтрок = Параметры.ОдиночныйРазделительСтрок;
	КонецЕсли;
	
	РезультатЧтенияВыписки = ПрочитатьФайлВыписки(ИмяФайла, Кодировка, ОдиночныйРазделительСтрок);
	
	Если Параметры.Свойство("ТекстВыписки") ИЛИ 
			Параметры.Свойство("ДвоичныеДанные") Тогда
		УдалитьФайлы(ИмяФайла); // Удалим временный файл, после его обработки.
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатЧтенияВыписки, АдресРезультата);
	
КонецПроцедуры

Процедура ЗагрузитьВыпискуВФоне(Параметры, АдресРезультата) Экспорт
	
	РезультатЗагрузкиВыписки = ЗагрузитьВыписку(Параметры.ДокументыКЗагрузке, Параметры.ПараметрыЗагрузкиДокументов);
	
	ПоместитьВоВременноеХранилище(РезультатЗагрузкиВыписки, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыиФункции

#Область ЧтениеФайлаВыписки

Функция ПрочитатьФайлВыписки(ИмяФайла, Кодировка, ОдиночныйРазделительСтрок)
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеВыписки");
	Результат.Вставить("ВыпискиПоСчетам");
	Результат.Вставить("Кодировка", Кодировка);
	Результат.Вставить("СообщенияПользователю", Новый Массив);
	
	// Представим файл выписки в виде структурированных данных.
	//Результат.ДанныеВыписки = ДанныеВыписки(ИмяФайла, Результат.Кодировка, ОдиночныйРазделительСтрок);
	Результат.ДанныеВыписки = ДанныеВыписки(ИмяФайла, Кодировка, ОдиночныйРазделительСтрок);
	
	// Разберем данные выписки и сгруппируем по счетам организации.
	Результат.ВыпискиПоСчетам = ВыпискиПоСчетам(Результат.ДанныеВыписки, Результат.СообщенияПользователю);
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеВыписки(ИмяФайла, Кодировка, ОдиночныйРазделительСтрок)
	
	ДанныеВыписки = РазобратьФайлВыписки(ИмяФайла, Кодировка, ОдиночныйРазделительСтрок);
	
	Если НЕ ДанныеВыписки.ПризнакФайлаОбмена Тогда
		ТекстПредупреждения = НСтр("ru='В файле выписки не обнаружен обязательный идентификатор 1CClientBankExchange.'");
		ТекстПредупреждения = ТекстПредупреждения + Символы.ПС
			+ НСтр("ru='Выбранный файл не является файлом обмена или неверно указана кодировка.'");
		ВызватьИсключение ТекстПредупреждения;
	КонецЕсли;
	
	Если ДанныеВыписки.РасчетныеСчета.Количество() = 0 И НЕ ОдиночныйРазделительСтрок Тогда
		// Предпримем попытку прочитать файл с одиночным разделителем строк.
		ОдиночныйРазделительСтрок = Истина;
		ДанныеВыписки = РазобратьФайлВыписки(ИмяФайла, Кодировка, ОдиночныйРазделительСтрок);
	КонецЕсли;
	
	Если ДанныеВыписки.РасчетныеСчета.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru='Файл выписки не содержит данных.'");
	КонецЕсли;
	
	Возврат ДанныеВыписки;
	
КонецФункции

Функция ВыпискиПоСчетам(ДанныеВыписки, СообщенияПользователю)
	
	ВыпискиПоСчетам = Новый Соответствие;
	
	БанковскиеСчетаОрганизаций = БанковскиеСчетаОрганизаций();
	
	// Сформируем перечень всех счетов, по которым получена выписка.
	БанковскиеСчетаВыписки = Новый Соответствие;
	Для Каждого РасчетныйСчет Из ДанныеВыписки.РасчетныеСчета Цикл
		БанковскиеСчетаВыписки.Вставить(РасчетныйСчет);
	КонецЦикла;
	Для Каждого ОстатокПоРасчетномуСчету Из ДанныеВыписки.ОстаткиПоРасчетнымСчетам Цикл
		БанковскиеСчетаВыписки.Вставить(ОстатокПоРасчетномуСчету["РасчСчет"]);
	КонецЦикла;
	
	// Проверим счета в данных выписки на соответствие счетам организаций.
	Для Каждого ЭлементСоответствия Из БанковскиеСчетаВыписки Цикл
		РасчетныйСчет = ЭлементСоответствия.Ключ;
		БанковскийСчетОрганизации = БанковскиеСчетаОрганизаций.Найти(РасчетныйСчет, "НомерСчета");
		Если НЕ БанковскийСчетОрганизации = Неопределено Тогда
			ВыпискаПоСчету = НовыйВыпискаПоСчету(БанковскийСчетОрганизации);
			ВыпискиПоСчетам.Вставить(РасчетныйСчет, ВыпискаПоСчету);
		Иначе
			ТекстСообщения = НСтр("ru='В выписке указан расчетный счет, не принадлежащий организации. Номер счета: %1.'");
			СообщенияПользователю.Добавить(СтрШаблон(ТекстСообщения, РасчетныйСчет));
		КонецЕсли;
	КонецЦикла;
	
	Если ВыпискиПоСчетам.Количество() = 0 Тогда
		Возврат ВыпискиПоСчетам;
	КонецЕсли;
	
	// Заполним остатки по счетам.
	ЗаполнитьОстаткиПоСчетам(ВыпискиПоСчетам, ДанныеВыписки);
	
	// Заполним таблицу документов к загрузке.
	ЗаполнитьДокументыКЗагрузке(ВыпискиПоСчетам, ДанныеВыписки, БанковскиеСчетаОрганизаций);
	
	Возврат ВыпискиПоСчетам;
	
КонецФункции

#Область ЧтениеТекстаФайла

Функция ПолучитьТекстФайла(ИмяФайла, Кодировка, ОдиночныйРазделительСтрок)
	
	// Тип файла передаем в виде строки, чтобы обеспечить корректное чтение файла в нелокализованных средах
	// (Linux, англоязычная Windows + англоязычный MS SQL и др.)
	Если НЕ АктуализироватьКодировкуЧтенияФайла(ИмяФайла, Кодировка) Тогда
		ВызватьИсключение НСтр("ru='Не удалось определить кодировку файла! Файл содержит недопустимые символы.'");
	КонецЕсли;
	
	Если Кодировка = "cp866" Тогда
		ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла, Кодировка,,,Ложь);
	Иначе
		// Если в файле строки разделены CR+LF, то одиночные LF не разделяют логические строки файла, а содержится в прикладных данных.
		// При этом в отдельных полях (многострочных) они разделяют подстроки,
		// а в остальных, как правило, содержатся по ошибке и должны быть проигнорированы.
		//
		// Чтобы отличить ошибочные одиночные LF от корректных разделителей CR+LF,
		// при чтении файла используем только двухсимвольный разделитель (CR+LF),
		// а если необходимо избавиться от ошибочных LF (Символы.ПС), то делаем это после чтения строк.
		//
		// Если же в файле строки разделены одиночным LF, то отличить ошибочные LF от корректных нельзя.
		// Поэтому при чтении файла используем обычный набор разделителей. При этом ошибочно отделенные элементы строк могут быть проигнорированы.
		ДвухсимвольныйРазделительСтрок = Символы.ВК + Символы.ПС;
		Если ОдиночныйРазделительСтрок Тогда
			// Значения по умолчанию. В конструктор их следует передать явно, так как значение пятого параметра указано явно.
			РазделительСтрок               = Символы.ПС;
			КонвертируемыйРазделительСтрок = ДвухсимвольныйРазделительСтрок;
		Иначе
			РазделительСтрок               = ДвухсимвольныйРазделительСтрок;
			КонвертируемыйРазделительСтрок = "";
		КонецЕсли;
		ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла, Кодировка, РазделительСтрок, КонвертируемыйРазделительСтрок, Ложь);
	КонецЕсли;
	
	Возврат ЧтениеТекста;
	
КонецФункции

Функция АктуализироватьКодировкуЧтенияФайла(ИмяФайла, Кодировка) Экспорт
	
	ВозможныеКодировки = Новый Массив;
	ВозможныеКодировки.Добавить("windows-1251");
	ВозможныеКодировки.Добавить("cp866");
	ВозможныеКодировки.Добавить("utf-8");
	
	// Вставим переданную кодировку первой.
	Если ЗначениеЗаполнено(Кодировка) Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ВозможныеКодировки, Кодировка);
		ВозможныеКодировки.Вставить(0, Кодировка);
	Иначе
		Кодировка = ВозможныеКодировки[0];
	КонецЕсли;
	
	Для Каждого ТекущаяКодировка Из ВозможныеКодировки Цикл
	
		Текст              = Новый ЧтениеТекста(ИмяФайла, ТекущаяКодировка);
		СтрокаТекста       = Текст.ПрочитатьСтроку();
		НомерТекущейСтроки = 0;
		
		ЧтениеВыполненоКорректно = Истина;
		Пока СтрокаТекста <> Неопределено Цикл
			// Проверяем кодировку файла.
			Если НЕ ТолькоСимволыВСтроке(СтрокаТекста) Тогда
				ЧтениеВыполненоКорректно = Ложь;
				Прервать;
			КонецЕсли;
			// Читаем первые пять строк, этого должно быть достаточно,
			// чтобы определить кодировку.
			Если НомерТекущейСтроки > 5 Тогда 
				Прервать;
			КонецЕсли;
			НомерТекущейСтроки = НомерТекущейСтроки + 1;
			СтрокаТекста       = Текст.ПрочитатьСтроку();
		КонецЦикла;
		
		Если ЧтениеВыполненоКорректно Тогда
			Кодировка = ТекущаяКодировка;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЧтениеВыполненоКорректно;
	
КонецФункции

// Проверяет строку на соответствие требованиям
//
// Параметры:
//  ПроверяемаяСтрока - Строка - проверяемый строка.
//
// Возвращаемое значение:
//  Булево - Истина, если ошибок нет.
//
Функция ТолькоСимволыВСтроке(Знач ПроверяемаяСтрока)
	
	Если ПустаяСтрока(ПроверяемаяСтрока) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПроверяемаяСтрока = НРег(СокрЛП(ПроверяемаяСтрока));
	
	// допустимые символы
	СпецСимволы = Спецсимволы();
	
	Если СтрНайти(СпецСимволы, Лев(ПроверяемаяСтрока, 1)) > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// проверяем допустимые символы
	Если Не СтрокаСодержитТолькоДопустимыеСимволы(ПроверяемаяСтрока, СпецСимволы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет символ на соответствие требованиям
//
// Параметры:
//  Символ            - Строка - проверяемый символ.
//  ДопустимыеСимволы - Строка - допустимые символы.
//
// Возвращаемое значение:
//  Булево - Истина, если ошибок нет.
//
Функция ДопустимыйСимвол(Символ, ДопустимыеСимволы)
	
	Если СтрДлина(Символ) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СтрНайти(ДопустимыеСимволы, Символ) > 0;
	
КонецФункции

// Возвращает строку спецсимволов
//
// Параметры:
//
// Возвращаемое значение:
//  Строка
//
Функция Спецсимволы()
	
	Возврат ".,;:$№#@&_-+*^=?!'/|\""%()[]{}<> «»“”";
	
КонецФункции

Функция СтрокаСодержитТолькоДопустимыеСимволы(СтрокаПроверки, ДопустимыеСимволы)
	
	// Проверяем каждый символ в строке - допустим ли он.
	Для Индекс = 1 По СтрДлина(СтрокаПроверки) Цикл
		Символ = Сред(СтрокаПроверки, Индекс, 1);
		ЭтоДопустимыйСимвол =
			СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Символ)    // Кириллица и ё
			Или СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(Символ) // Латиница
			Или СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Символ)    // Цифры
			Или ДопустимыйСимвол(Символ, ДопустимыеСимволы);               // Спецсимволы
		
		Если Не ЭтоДопустимыйСимвол Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Разделяет строку на элементы, предусмотренные файлом обмена
// Параметры:
//  Строка - Строка - Текстовая строка, прочитанная из файла
// Возвращаемые параметры:
//  Тег      - Строка - имя элемента файла - часть строки до символа "=", приведенная к верхнему регистру
//  Значение - Строка - значение элемента - часть строки после символа "="
// Возвращаемые параметры используются вместо возвращаемого значения из соображений производительности:
// метод нужно вызывать многократно - для каждой строки файла, а конструирование коллекции для возвращаемого значения - относительно затратная операция.
//
Процедура РазделитьСтрокуФайла(Строка, Тег, Значение)
	
	ПозицияРавно = СтрНайти(Строка, "=");
	Если ПозицияРавно = 0 Тогда
		Тег      = ВРег(СокрЛП(Строка));
		Значение = Строка;
	Иначе
		Тег      = ВРег(СокрЛП(Лев(Строка,  ПозицияРавно - 1)));
		Значение = СокрЛП(Сред(Строка, ПозицияРавно + 1));
	КонецЕсли;
	
	// Часто для соблюдения формальных требований о заполнении поля, его заполняют нулями (например, "0" или "000000000000").
	// Такие значения переносить не следует.
	Если ТолькоНулиВСтроке(Значение) Тогда
		Значение = "";
	КонецЕсли;
	
	Если Не ПустаяСтрока(Значение) Тогда
		// Недопустимые символы встречаются редко, а поиск существенно быстрее, чем замена, так как при замене строка передается по значению.
		// Поэтому оптимальнее искать до вызова УдалитьНедопустимыеСимволыXML, даже если в случае недопустимого символа придется искать еще раз.
		Если НайтиНедопустимыеСимволыXML(Значение) <> 0 Тогда 
			Значение = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Приводит к дате строку в формате "dd.MM.yyyy".
//
Функция ПривестиСтрокуКДате(Строка)
	
	Если ПустаяСтрока(Строка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭлементыДаты = СтрРазделить(Строка, ".");
	Если ЭлементыДаты.Количество() <> 3 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	День  = ЭлементыДаты[0];
	Месяц = ЭлементыДаты[1];
	Год   = ЭлементыДаты[2];
	
	Если СтрДлина(Год) = 2 Тогда
		// Преобразование выполняем самое простое. Это поведение может не соответствовать поведению платформы.
		Год = "20" + Год;
	КонецЕсли;
	
	Попытка
		Возврат Дата(Год, Месяц, День);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ТолькоНулиВСтроке(Строка)
	
	ЗначащиеСимволы = СокрЛП(СтрЗаменить(Строка, "0", ""));
	Возврат ПустаяСтрока(ЗначащиеСимволы);
	
КонецФункции

#КонецОбласти

#Область РазборФайлаВыписки

Функция РазобратьФайлВыписки(ИмяФайла, Кодировка, ОдиночныйРазделительСтрок)
	
	ДанныеВыписки = Новый Структура;
	ДанныеВыписки.Вставить("ОбщиеСведенияВыписки",     НовыйОбщиеСведенияВыписки());
	ДанныеВыписки.Вставить("РасчетныеСчета",           Новый Массив);
	ДанныеВыписки.Вставить("ВидыДокументов",           Новый Массив);
	ДанныеВыписки.Вставить("ОстаткиПоРасчетнымСчетам", Новый Массив);
	ДанныеВыписки.Вставить("ДокументыВыписки",         Новый Массив);
	ДанныеВыписки.Вставить("ПризнакФайлаОбмена",       Ложь);
	
	ТекстФайла = ПолучитьТекстФайла(ИмяФайла, Кодировка, ОдиночныйРазделительСтрок);
	
	ПродолжитьЧтение       = Истина;
	
	Пока ПродолжитьЧтение Цикл
		
		СтрокаИмпорта = ПолучитьСтрокуИмпорта(ТекстФайла, ПродолжитьЧтение);
		
		Если НЕ ПродолжитьЧтение ИЛИ Лев(СтрокаИмпорта, 10) = "КОНЕЦФАЙЛА" Тогда
			Прервать;
		КонецЕсли;
		
		Тег      = "";
		Значение = Неопределено;
		РазделитьСтрокуФайла(СтрокаИмпорта, Тег, Значение);
		
		Если Лев(Тег, 20) = "1CCLIENTBANKEXCHANGE" Тогда
		
			ДанныеВыписки.ПризнакФайлаОбмена = Истина;
		
		ИначеЕсли Лев(Тег, 14) = "СЕКЦИЯДОКУМЕНТ" Тогда
			
			ЗагрузитьСекциюДокумента(ДанныеВыписки, Значение, ТекстФайла, ПродолжитьЧтение);
			
		ИначеЕсли Лев(Тег, 14) = "СЕКЦИЯРАСЧСЧЕТ" Тогда
			
			ЗагрузитьСекциюРасчСчета(ДанныеВыписки, СтрокаИмпорта, ТекстФайла, ПродолжитьЧтение);
			
		ИначеЕсли Лев(Тег, 8) = "РАСЧСЧЕТ" Тогда
			
			Если ДанныеВыписки.РасчетныеСчета.Найти(Значение) = Неопределено Тогда
				ДанныеВыписки.РасчетныеСчета.Добавить(Значение);
			КонецЕсли;
			
		ИначеЕсли Лев(Тег, 8) = "ДОКУМЕНТ" Тогда
			
			Если ДанныеВыписки.ВидыДокументов.Найти(Значение) = Неопределено Тогда
				ДанныеВыписки.ВидыДокументов.Добавить(Значение);
			КонецЕсли;
			
		Иначе
			
			ЗагрузитьСтрокуОбщихСведений(ДанныеВыписки, Тег, Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеВыписки;
	
КонецФункции

Функция ПолучитьСтрокуИмпорта(ТекстФайла, ПродолжитьЧтение)
	
	СтрокаИмпорта = "";
	
	Пока ПустаяСтрока(СтрокаИмпорта) ИЛИ Лев(СтрокаИмпорта, 2) = "//" Цикл
	
		ТекущаяСтрока = ТекстФайла.ПрочитатьСтроку();
			
		Если ТекущаяСтрока = Неопределено Тогда
			ПродолжитьЧтение = Ложь;
			Прервать;
		КонецЕсли;
		
		СтрокаИмпорта = ТекущаяСтрока;
		
	КонецЦикла;
	
	Возврат СтрокаИмпорта;
	
КонецФункции

Процедура ЗагрузитьСтрокуОбщихСведений(ДанныеВыписки, Тег, Значение)
	
	Если ДанныеВыписки.ОбщиеСведенияВыписки.Свойство(Тег)
		И ЗначениеЗаполнено(Значение) Тогда
		
		ДанныеВыписки.ОбщиеСведенияВыписки[Тег] = Значение;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьСекциюРасчСчета(ДанныеВыписки, СтрокаИмпорта, ТекстФайла, ПродолжитьЧтение)
	
	ОстаткиПоРасчетномуСчету = НовыйОстаткиПоРасчетномуСчету();
	
	Пока ПродолжитьЧтение Цикл
		
		СтрокаИмпорта = ПолучитьСтрокуИмпорта(ТекстФайла, ПродолжитьЧтение);
		
		Если НЕ ПродолжитьЧтение ИЛИ Лев(Врег(СокрЛП(СтрокаИмпорта)), 13) = "КОНЕЦРАСЧСЧЕТ" Тогда
			Прервать;
		КонецЕсли;
		
		Тег      = "";
		Значение = Неопределено;
		РазделитьСтрокуФайла(СтрокаИмпорта, Тег, Значение);
		
		Если Лев(Тег, 8) = "РАСЧСЧЕТ" Тогда
			Если ДанныеВыписки.РасчетныеСчета.Найти(Значение) = Неопределено Тогда
				ДанныеВыписки.РасчетныеСчета.Добавить(Значение);
			КонецЕсли;
		КонецЕсли;
		
		Если ОстаткиПоРасчетномуСчету.Свойство(Тег) Тогда
				
			Если ЗначениеЗаполнено(Значение) И НЕ ЗначениеЗаполнено(ОстаткиПоРасчетномуСчету[Тег]) Тогда
				ОстаткиПоРасчетномуСчету[Тег] = Значение;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеВыписки.ОстаткиПоРасчетнымСчетам.Добавить(ОстаткиПоРасчетномуСчету);
	
КонецПроцедуры

Процедура ЗагрузитьСекциюДокумента(ДанныеВыписки, ВидДокумента, ТекстФайла, ПродолжитьЧтение)
	
	ДокументВыписки = НовыйДокументВыписки();
	ДокументВыписки.ВидДокумента = ВидДокумента;
	
	ТекстСекции = "СЕКЦИЯДОКУМЕНТ=" + ВидДокумента + Символы.ПС;
	
	Пока ПродолжитьЧтение Цикл
		
		СтрокаИмпорта = ПолучитьСтрокуИмпорта(ТекстФайла, ПродолжитьЧтение);
		
		Если НЕ ПродолжитьЧтение ИЛИ Лев(Врег(СокрЛП(СтрокаИмпорта)), 14) = "КОНЕЦДОКУМЕНТА" Тогда
			Прервать;
		КонецЕсли;
		
		ТекстСекции = ТекстСекции + СтрокаИмпорта + Символы.ПС;
		
		Тег      = "";
		Значение = Неопределено;
		РазделитьСтрокуФайла(СтрокаИмпорта, Тег, Значение);
		
		Если ДокументВыписки.Свойство(Тег) Тогда
				
			Если ЗначениеЗаполнено(Значение) И НЕ ЗначениеЗаполнено(ДокументВыписки[Тег]) Тогда
				ДокументВыписки[Тег] = Значение;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументВыписки.ТекстСекции = ТекстСекции + "КОНЕЦДОКУМЕНТА";
	
	ДанныеВыписки.ДокументыВыписки.Добавить(ДокументВыписки);
	
КонецПроцедуры

Функция НовыйОстаткиПоРасчетномуСчету()
	
	Возврат Новый Структура("ДатаНачала, ДатаКонца, РасчСчет, НачальныйОстаток, ВсегоПоступило, ВсегоСписано, КонечныйОстаток");
	
КонецФункции

Функция НовыйДокументВыписки()
	
	Возврат Новый Структура(
		"ВидДокумента, Номер, Дата, Сумма,
		|ВидПлатежа, ВидОплаты,
		|КвитанцияДата, КвитанцияВремя, КвитанцияСодержание,
		|ДатаСписано, ДатаПоступило,
		|ПлательщикСчет, Плательщик, ПлательщикИНН, Плательщик1, ПлательщикНаименованиеМеждународное, ПлательщикСтрана,
		|ПлательщикРасчСчет, ПлательщикБанк1, ПлательщикБанк2, ПлательщикБИК, ПлательщикКорсчет,
		|ПлательщикБанк3, ПлательщикБанк4, ПлательщикБанк5,
		|Плательщик2, Плательщик3, Плательщик4,
		|ПолучательСчет, Получатель, ПолучательИНН, Получатель1, ПолучательНаименованиеМеждународное, ПолучательСтрана,
		|ПолучательРасчСчет, ПолучательБанк1, ПолучательБанк2, ПолучательБИК, ПолучательКорсчет,
		|ПолучательБанк3, ПолучательБанк4, ПолучательБанк5,
		|Получатель2, Получатель3, Получатель4,
		|СтатусСоставителя, ПлательщикКПП, ПолучательКПП, ПоказательКБК, ОКАТО, ОКТМО,
		|ПоказательОснования, ПоказательПериода, ПоказательНомера, ПоказательДаты, ПоказательТипа,
		|Код,
		|НазначениеПлатежа, НазначениеПлатежа1, НазначениеПлатежа2, НазначениеПлатежа3, НазначениеПлатежа4, НазначениеПлатежа5, НазначениеПлатежа6,
		|СрокПлатежа, Очередность,
		|УсловиеОплаты1, УсловиеОплаты2, УсловиеОплаты3,
		|СрокАкцепта, ВидАккредитива, ПлатежПоПредст, ДополнУсловия, НомерСчетаПоставщика, ДатаОтсылкиДок,
		|ТекстСекции
		|");
	
КонецФункции

Функция НовыйОбщиеСведенияВыписки()
	
	ОбщиеСведенияВыписки = Новый Структура(
		"ВерсияФормата, Кодировка, Отправитель, Получатель, ДатаСоздания, ВремяСоздания, ДатаНачала, ДатаКонца");
	
	ОбщиеСведенияВыписки.Вставить("ПризнакФайлаОбмена", Ложь);
	
	Возврат ОбщиеСведенияВыписки;
	
КонецФункции

#КонецОбласти

#Область РазборДанныхВыписки

Функция НовыйВыпискаПоСчету(БанковскийСчетОрганизации)
	
	Остатки = Новый ТаблицаЗначений;
	Остатки.Колонки.Добавить("Дата",  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Остатки.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	
	ВыпискаПоСчету = Новый Структура;
	ВыпискаПоСчету.Вставить("Организация",               БанковскийСчетОрганизации.Организация);
	ВыпискаПоСчету.Вставить("БанковскийСчетОрганизации", БанковскийСчетОрганизации.Ссылка);
	ВыпискаПоСчету.Вставить("Остатки",                   Остатки);
	ВыпискаПоСчету.Вставить("ДокументыКЗагрузке");
	
	Возврат ВыпискаПоСчету;
	
КонецФункции

Процедура ЗаполнитьОстаткиПоСчетам(ВыпискиПоСчетам, ДанныеВыписки)
	
	Для Каждого ОстатокПоРасчетномуСчету Из ДанныеВыписки.ОстаткиПоРасчетнымСчетам Цикл
		
		РасчетныйСчет = ОстатокПоРасчетномуСчету["РасчСчет"];
		
		ВыпискаПоСчету = ВыпискиПоСчетам.Получить(РасчетныйСчет);
		Если ВыпискаПоСчету = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Начальный остаток.
		ДатаОстатка = ПривестиСтрокуКДате(ОстатокПоРасчетномуСчету.ДатаНачала);
		СуммаОстатка = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ОстатокПоРасчетномуСчету.НачальныйОстаток);
		Если ДатаОстатка = Неопределено ИЛИ СуммаОстатка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОстатокПоСчету = ВыпискаПоСчету.Остатки.Добавить();
		ОстатокПоСчету.Дата = НачалоДня(ДатаОстатка);
		ОстатокПоСчету.Сумма = СуммаОстатка;
		
		// Конечный остаток.
		ДатаОстатка = ПривестиСтрокуКДате(ОстатокПоРасчетномуСчету.ДатаКонца);
		СуммаОстатка = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ОстатокПоРасчетномуСчету.КонечныйОстаток);
		Если ДатаОстатка = Неопределено ИЛИ СуммаОстатка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОстатокПоСчету = ВыпискаПоСчету.Остатки.Добавить();
		// Будем считать, что конечный остаток соответствует начальному остатку следующего дня.
		ОстатокПоСчету.Дата = НачалоДня(ДатаОстатка + 86400);
		ОстатокПоСчету.Сумма = СуммаОстатка;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокументыКЗагрузке(ВыпискиПоСчетам, ДанныеВыписки, БанковскиеСчетаОрганизаций)
	
	ШаблонПредставлениеНенайденного = НСтр("ru='Будет создан %1'");
	
	ВестиУчетБезналичныхДенежныхСредств = ПолучитьФункциональнуюОпцию("ВестиУчетБезналичныхДенежныхСредств");
	ДатаНачалаУчетаБезналичныхДенежныхСредств = Константы.ДатаНачалаУчетаБезналичныхДенежныхСредств.Получить();
	
	ДокументыКЗагрузке = НовыйДокументыКЗагрузке();
	
	СтатусыСоставителейТаможенныхПлатежей = Новый Массив;
	СтатусыСоставителейТаможенныхПлатежей.Добавить("06");
	СтатусыСоставителейТаможенныхПлатежей.Добавить("16");
	СтатусыСоставителейТаможенныхПлатежей.Добавить("17");
	СтатусыСоставителейТаможенныхПлатежей.Добавить("18");
	СтатусыСоставителейТаможенныхПлатежей.Добавить("19");
	СтатусыСоставителейТаможенныхПлатежей.Добавить("20");
	
	НомерСтроки = 0;
	НомерСтрокиВыписки = 0;
	Для Каждого ДокументВыписки Из ДанныеВыписки.ДокументыВыписки Цикл
		
		Стороны = Новый Массив;
		Стороны.Добавить("Плательщик");
		Стороны.Добавить("Получатель");
		
		Для Каждого Сторона Из Стороны Цикл
			
			ИсходящийПлатеж = Сторона = "Плательщик";
			СторонаКонтрагент = ?(ИсходящийПлатеж, "Получатель", "Плательщик");
			
			ВыпискаПоСчету = ВыпискиПоСчетам.Получить(ДокументВыписки[Сторона + "Счет"]);
			Если ВыпискаПоСчету = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументКЗагрузке = ДокументыКЗагрузке.Добавить();
			ДокументКЗагрузке.Загружать                 = Истина;
			ДокументКЗагрузке.СостояниеДокумента        = 3;
			ДокументКЗагрузке.НомерСтроки               = НомерСтроки;
			ДокументКЗагрузке.НомерСтрокиВыписки        = НомерСтрокиВыписки;
			ДокументКЗагрузке.ИсходящийПлатеж           = ИсходящийПлатеж;
			ДокументКЗагрузке.БанковскийСчетОрганизации = ВыпискаПоСчету.БанковскийСчетОрганизации;
			
			// Дата и номер документа.
			ДокументКЗагрузке.ДатаВходящегоДокумента = ПривестиСтрокуКДате(ДокументВыписки.Дата);
			Если Не ЗначениеЗаполнено(ДокументКЗагрузке.ДатаВходящегоДокумента) Тогда
				ДокументКЗагрузке.ДатаВходящегоДокумента =
					ПривестиСтрокуКДате(?(ИсходящийПлатеж, ДокументВыписки.ДатаСписано, ДокументВыписки.ДатаПоступило));
			КонецЕсли;
			
			НомерВходящегоДокумента = СокрЛП(ДокументВыписки.Номер);
			Если СтрДлина(НомерВходящегоДокумента) > 20 Тогда
				НомерВходящегоДокумента = Прав(НомерВходящегоДокумента, 20);
			КонецЕсли;
			ДокументКЗагрузке.НомерВходящегоДокумента = НомерВходящегоДокумента;
			
			// Сумма документа.
			Сумма = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ДокументВыписки.Сумма);
			Если Сумма <> Неопределено Тогда
				Если Сумма < 0 Тогда
					Сумма = - Сумма;
				КонецЕсли;
				ДокументКЗагрузке.СуммаДокумента = Сумма;
				Если ИсходящийПлатеж Тогда
					ДокументКЗагрузке.СуммаСписано   = Сумма;
				Иначе
					ДокументКЗагрузке.СуммаПоступило = Сумма;
				КонецЕсли;
			Иначе
				ВызватьИсключение СтрШаблон(НСтр("ru='В выписке указана некорректная сумма (%1) для документа №%2 от %3.'"),
					ДокументВыписки.Сумма,
					ДокументВыписки.Номер,
					ДокументВыписки.Дата);
			КонецЕсли;
			
			#Область Контрагент
			
			// Контрагент.
			ИННКонтрагента = ДокументВыписки[СторонаКонтрагент + "ИНН"];
			Если НЕ ПустаяСтрока(ИННКонтрагента) Тогда
				ДокументКЗагрузке.ИННКонтрагента = ИННКонтрагента;
			КонецЕсли;
			
			НаименованиеКонтрагента = ДокументВыписки[СторонаКонтрагент + "1"];
			Если НЕ ЗначениеЗаполнено(НаименованиеКонтрагента) Тогда
				НаименованиеКонтрагента = ДокументВыписки[СторонаКонтрагент];
			КонецЕсли;
			
			// Удалим ИНН из наименования.
			УдалитьИзНаименованияИНН(НаименованиеКонтрагента, ДокументКЗагрузке.ИННКонтрагента);
			
			ДокументКЗагрузке.НаименованиеКонтрагента = НаименованиеКонтрагента;
			
			КППКонтрагента = ДокументВыписки[СторонаКонтрагент + "КПП"];
			Если НЕ ПустаяСтрока(КППКонтрагента) И НЕ КППКонтрагента = "0" Тогда
				ДокументКЗагрузке.КППКонтрагента = КППКонтрагента;
			КонецЕсли;
			
			ПредставлениеКонтрагента = "";
			Если ЗначениеЗаполнено(ДокументКЗагрузке.НаименованиеКонтрагента) Тогда
				ПредставлениеКонтрагента = "(" + ДокументКЗагрузке.НаименованиеКонтрагента + ")";
			КонецЕсли;
			ДокументКЗагрузке.ПредставлениеКонтрагента = СтрШаблон(ШаблонПредставлениеНенайденного, ПредставлениеКонтрагента);
			
			// Счет контрагента.
			НомерСчетаКонтрагента = ДокументВыписки[СторонаКонтрагент + "Счет"];
			Если НЕ ПустаяСтрока(НомерСчетаКонтрагента) Тогда
				ДокументКЗагрузке.НомерСчетаКонтрагента = НомерСчетаКонтрагента;
			КонецЕсли;
			
			ПрямыеРасчеты = ПустаяСтрока(ДокументВыписки[СторонаКонтрагент + "2"]);
			Если ПрямыеРасчеты Тогда
				НаименованиеБанкаКонтрагента = ДокументВыписки[СторонаКонтрагент + "БАНК1"];
				ГородБанкаКонтрагента        = ДокументВыписки[СторонаКонтрагент + "БАНК2"];
				БИКБанкаКонтрагента          = ДокументВыписки[СторонаКонтрагент + "БИК"];
				КоррСчетБанкаКонтрагента     = ДокументВыписки[СторонаКонтрагент + "КОРСЧЕТ"];
			Иначе
				НаименованиеБанкаКонтрагента = ДокументВыписки[СторонаКонтрагент + "3"];
				ГородБанкаКонтрагента        = ДокументВыписки[СторонаКонтрагент + "4"];
				БИКБанкаКонтрагента          = "";
				КоррСчетБанкаКонтрагента     = ДокументВыписки[СторонаКонтрагент + "РАСЧСЧЕТ"];
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(НаименованиеБанкаКонтрагента) Тогда
				ДокументКЗагрузке.НаименованиеБанкаКонтрагента = НаименованиеБанкаКонтрагента;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ГородБанкаКонтрагента) Тогда
				ДокументКЗагрузке.ГородБанкаКонтрагента = ГородБанкаКонтрагента;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(БИКБанкаКонтрагента) Тогда
				ДокументКЗагрузке.БИКБанкаКонтрагента = БИКБанкаКонтрагента;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(КоррСчетБанкаКонтрагента) Тогда
				ДокументКЗагрузке.КоррСчетБанкаКонтрагента = КоррСчетБанкаКонтрагента;
			КонецЕсли;
			
			ПредставлениеСчетаКонтрагента = "";
			Если ЗначениеЗаполнено(ДокументКЗагрузке.НомерСчетаКонтрагента) Тогда
				ПредставлениеСчетаКонтрагента = "(" + ДокументКЗагрузке.НомерСчетаКонтрагента + ")";
			КонецЕсли;
			ДокументКЗагрузке.ПредставлениеСчетаКонтрагента = СтрШаблон(ШаблонПредставлениеНенайденного, ПредставлениеСчетаКонтрагента);
			
			#КонецОбласти
			
			// Назначение платежа.
			НазначениеПлатежа = ДокументВыписки.НазначениеПлатежа;
			Если ПустаяСтрока(НазначениеПлатежа) Тогда
				НазначениеПлатежа = ДокументВыписки.НазначениеПлатежа1;
				Для Счетчик = 2 По 6 Цикл
					Если НЕ ЗначениеЗаполнено(ДокументВыписки["НазначениеПлатежа" + Счетчик]) Тогда
						Прервать;
					КонецЕсли;
					НазначениеПлатежа =НазначениеПлатежа + Символы.ПС + ДокументВыписки["НазначениеПлатежа" + Счетчик];
				КонецЦикла;
			КонецЕсли;
			
			ДокументКЗагрузке.НазначениеПлатежа = НазначениеПлатежа;
			
			#Область НеподдерживаемыеОперации
			
			// Проверим, не является ли операция переводом между собственными счетами.
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Организация", ВыпискаПоСчету.Организация);
			СтруктураПоиска.Вставить("НомерСчета",  ДокументВыписки[СторонаКонтрагент + "Счет"]);
			БанковскиеСчетаОрганизации = БанковскиеСчетаОрганизаций.НайтиСтроки(СтруктураПоиска);
			Если БанковскиеСчетаОрганизации.Количество() > 0 Тогда
				ДокументКЗагрузке.ПредставлениеОперации = НСтр("ru='Перевод на другой счет организации'");
			КонецЕсли;
			
			// Хоз. операция по виду оплаты.
			Если ДокументВыписки.ВидОплаты = "03" Тогда
				ДокументКЗагрузке.ПредставлениеОперации = НСтр("ru='Снятие наличных денежных средств'");
			ИначеЕсли ДокументВыписки.ВидОплаты = "04" Тогда
				ДокументКЗагрузке.ПредставлениеОперации = НСтр("ru='Инкассация наличных денежных средств'");
			ИначеЕсли ДокументВыписки.ВидОплаты = "13" И Не ИсходящийПлатеж Тогда
				ДокументКЗагрузке.ПредставлениеОперации = НСтр("ru='Поступление оплаты по платежной карте'");
			ИначеЕсли ДокументВыписки.ВидОплаты = "17" Тогда
				ДокументКЗагрузке.ПредставлениеОперации = НСтр("ru='Банковский ордер'");
			КонецЕсли;
			
			// Инкассация.
			Если Не ЗначениеЗаполнено(ДокументКЗагрузке.ПредставлениеОперации) Тогда
				БалансовыйСчет = Лев(ДокументВыписки.ПлательщикСчет, 5);
				Если БалансовыйСчет    = "20202" // поступление/списание наличных из кассы
					Или БалансовыйСчет = "20208" Тогда // поступление/списание наличных из банкомата, устройства Cash-in
					Если ИсходящийПлатеж Тогда
						ДокументКЗагрузке.ПредставлениеОперации = НСтр("ru='Снятие наличных денежных средств'");
					Иначе
						ДокументКЗагрузке.ПредставлениеОперации = НСтр("ru='Инкассация наличных денежных средств'");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Платеж в бюджет.
			Если ЗначениеЗаполнено(ДокументВыписки.СтатусСоставителя) Тогда
				Если СтатусыСоставителейТаможенныхПлатежей.Найти(ДокументВыписки.СтатусСоставителя) <> Неопределено Тогда
					ДокументКЗагрузке.ПредставлениеОперации = НСтр("ru='Таможенный платеж'");
				ИначеЕсли ДокументВыписки.СтатусСоставителя = "08" Тогда
					ДокументКЗагрузке.ПредставлениеОперации = НСтр("ru='Платеж в бюджет (прочее)'");
				Иначе
					ДокументКЗагрузке.ПредставлениеОперации = НСтр("ru='Налоговый платеж'");
				КонецЕсли;
			КонецЕсли;
			
			#КонецОбласти
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		НомерСтрокиВыписки = НомерСтрокиВыписки + 1;
	КонецЦикла;
	
	// Заполним ссылки на уже существующие документы,
	// выполнив идентификацию по совокупности полей.
	ТаблицаДокументов = ДокументыКЗагрузке.Скопировать(
		,
		"БанковскийСчетОрганизации, ДатаВходящегоДокумента, НомерВходящегоДокумента, СуммаДокумента,
		|НомерСтроки, ИсходящийПлатеж, НомерСчетаКонтрагента, ИННКонтрагента, КППКонтрагента");
	ЗаполнитьСсылкиНаДокументы(ДокументыКЗагрузке, ТаблицаДокументов);
	
	// Заполним ссылки на контрагентов, банковские счета контрагентов.
	ТаблицаДокументов = ДокументыКЗагрузке.Скопировать(
		,
		"НаименованиеКонтрагента, ИННКонтрагента, КППКонтрагента, НомерСчетаКонтрагента, БИКБанкаКонтрагента,
		|НомерСтроки, Контрагент, БанковскийСчетКонтрагента");
	ЗаполнитьСсылкиНаКонтрагентов(ДокументыКЗагрузке, ТаблицаДокументов);
	
	// Заполним данные, зависящие от сведений ИБ.
	Для Каждого ДокументКЗагрузке Из ДокументыКЗагрузке Цикл
		
		Если НЕ ЗначениеЗаполнено(ДокументКЗагрузке.Контрагент)
			И НЕ ЗначениеЗаполнено(ДокументКЗагрузке.ИННКонтрагента)
			И НЕ ЗначениеЗаполнено(ДокументКЗагрузке.НаименованиеКонтрагента) Тогда
			ТекстОшибки = НСтр("ru='Не указаны ИНН и Наименование контрагента.'");
			ЗафиксироватьОшибкуЗагрузки(ДокументКЗагрузке, ТекстОшибки, ТекстОшибки, "Контрагент");
			
			ДокументКЗагрузке.ПредставлениеОперации = НСтр("ru='Неопознанная операция'");
			
		КонецЕсли;
		
		// Заполним хозяйственную операцию.
		Если НЕ ЗначениеЗаполнено(ДокументКЗагрузке.ХозяйственнаяОперация) Тогда
			Если НЕ ЗначениеЗаполнено(ДокументКЗагрузке.ПредставлениеОперации) Тогда
				// Поддерживаемая операция.
				ПараметрыПлатежа = Новый Структура;
				ПараметрыПлатежа.Вставить("ИсходящийПлатеж", ДокументКЗагрузке.ИсходящийПлатеж);
				Если ЗначениеЗаполнено(ДокументКЗагрузке.Контрагент) Тогда
					ПараметрыПлатежа.Вставить("Покупатель", ДокументКЗагрузке.КонтрагентПокупатель);
					ПараметрыПлатежа.Вставить("Поставщик",  ДокументКЗагрузке.КонтрагентПоставщик);
				КонецЕсли;
				
				ДоступныеОперации = ДенежныеСредстваКлиентСервер.ДоступныеОперацииРегистрацииБезналичнойОплаты(ПараметрыПлатежа);
				Если ДоступныеОперации.Количество() > 0 Тогда
					ДокументКЗагрузке.ХозяйственнаяОперация = ДоступныеОперации[0];
				КонецЕсли;
			ИначеЕсли ВестиУчетБезналичныхДенежныхСредств
				И ДокументКЗагрузке.ДатаВходящегоДокумента >= ДатаНачалаУчетаБезналичныхДенежныхСредств Тогда
				// Операция загружается только при учете безналичных ДС.
				ДокументКЗагрузке.ХозяйственнаяОперация = ?(ДокументКЗагрузке.ИсходящийПлатеж,
					Перечисления.ХозяйственныеОперации.ПрочиеРасходы,
					Перечисления.ХозяйственныеОперации.ПрочиеДоходы);
			КонецЕсли;
		КонецЕсли;
		
		// Обновим данные, зависящие от хоз. операции.
		ОбновитьЗависимыеДанные(ДокументКЗагрузке, "ХозяйственнаяОперация");
		
	КонецЦикла;
	
	// Перенесем сведения из общей таблицы документов в выписки по счетам.
	Для Каждого ЭлементСоответствия Из ВыпискиПоСчетам Цикл
		
		НомерСчета     = ЭлементСоответствия.Ключ;
		ВыпискаПоСчету = ЭлементСоответствия.Значение;
		
		// Документы к загрузке по счету.
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("БанковскийСчетОрганизации", ВыпискаПоСчету.БанковскийСчетОрганизации);
		
		СтрокиКЗагрузкеПоСчету = ДокументыКЗагрузке.НайтиСтроки(СтруктураОтбора);
		
		ВыпискаПоСчету.ДокументыКЗагрузке = ДокументыКЗагрузке.Скопировать(СтрокиКЗагрузкеПоСчету);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаДокументы(ДокументыКЗагрузке, ТаблицаДокументов)
	
	ВидыОперацийИсходящийПлатеж = ДенежныеСредстваКлиентСервер.ДоступныеОперацииРегистрацииБезналичнойОплаты(
		Новый Структура("ИсходящийПлатеж", Истина));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.УстановитьПараметр("ВидыОперацийИсходящийПлатеж", ВидыОперацийИсходящийПлатеж);
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	*
		|
		|ПОМЕСТИТЬ ТаблицаДокументов
		|
		|ИЗ
		|	&ТаблицаДокументов КАК ТаблицаДокументов
		|";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
		|	РегистрацияБезналичнойОплаты.Ссылка КАК Документ,
		|	РегистрацияБезналичнойОплаты.Дата КАК Дата,
		|	РегистрацияБезналичнойОплаты.Номер КАК Номер,
		|	РегистрацияБезналичнойОплаты.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	РегистрацияБезналичнойОплаты.Контрагент КАК Контрагент,
		|	РегистрацияБезналичнойОплаты.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
		|	ВЫБОР
		|		КОГДА РегистрацияБезналичнойОплаты.Проведен
		|			ТОГДА 1
		|		КОГДА РегистрацияБезналичнойОплаты.ПометкаУдаления
		|			ТОГДА 2
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СостояниеДокумента,
		|	ВЫБОР
		|		КОГДА РегистрацияБезналичнойОплаты.Проведен
		|			ТОГДА 0
		|		КОГДА РегистрацияБезналичнойОплаты.ПометкаУдаления
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Приоритет
		|ПОМЕСТИТЬ втДокументыПоПолямПоиска
		|ИЗ
		|	ТаблицаДокументов КАК ТаблицаДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегистрацияБезналичнойОплаты КАК РегистрацияБезналичнойОплаты
		|		ПО ТаблицаДокументов.БанковскийСчетОрганизации = РегистрацияБезналичнойОплаты.БанковскийСчетОрганизации
		|			И (НАЧАЛОПЕРИОДА(РегистрацияБезналичнойОплаты.ДатаВходящегоДокумента, ДЕНЬ) = ТаблицаДокументов.ДатаВходящегоДокумента)
		|			И (РегистрацияБезналичнойОплаты.НомерВходящегоДокумента = ТаблицаДокументов.НомерВходящегоДокумента)
		|			И (РегистрацияБезналичнойОплаты.СуммаДокумента = ТаблицаДокументов.СуммаДокумента)
		|			И (ВЫБОР
		|				КОГДА ТаблицаДокументов.ИсходящийПлатеж
		|					ТОГДА РегистрацияБезналичнойОплаты.ХозяйственнаяОперация В (&ВидыОперацийИсходящийПлатеж)
		|				ИНАЧЕ НЕ РегистрацияБезналичнойОплаты.ХозяйственнаяОперация В (&ВидыОперацийИсходящийПлатеж)
		|			КОНЕЦ)
		|			И (ТаблицаДокументов.ИННКонтрагента = """"
		|				ИЛИ ЕСТЬNULL(РегистрацияБезналичнойОплаты.Контрагент.ИНН, """") = """"
		|				ИЛИ ТаблицаДокументов.ИННКонтрагента = ЕСТЬNULL(РегистрацияБезналичнойОплаты.Контрагент.ИНН, """"))
		|			И (ТаблицаДокументов.КППКонтрагента = """"
		|				ИЛИ ЕСТЬNULL(РегистрацияБезналичнойОплаты.Контрагент.КПП, """") = """"
		|				ИЛИ ТаблицаДокументов.КППКонтрагента = ЕСТЬNULL(РегистрацияБезналичнойОплаты.Контрагент.КПП, """"))
		|			И (ТаблицаДокументов.НомерСчетаКонтрагента = """"
		|				ИЛИ ЕСТЬNULL(РегистрацияБезналичнойОплаты.БанковскийСчетКонтрагента.НомерСчета, """") = """"
		|				ИЛИ ТаблицаДокументов.НомерСчетаКонтрагента = ЕСТЬNULL(РегистрацияБезналичнойОплаты.БанковскийСчетКонтрагента.НомерСчета, """"))
		|ГДЕ
		|	НЕ РегистрацияБезналичнойОплаты.Ссылка ЕСТЬ NULL
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки,
		|	Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДокументыПоПолямПоиска.НомерСтроки КАК НомерСтроки,
		|	МИНИМУМ(втДокументыПоПолямПоиска.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ втМинимальныйПриоритет
		|ИЗ
		|	втДокументыПоПолямПоиска КАК втДокументыПоПолямПоиска
		|
		|СГРУППИРОВАТЬ ПО
		|	втДокументыПоПолямПоиска.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
		|	ВложенныйЗапрос.Документ КАК Документ,
		|	ВложенныйЗапрос.Дата КАК Дата,
		|	ВложенныйЗапрос.Номер КАК Номер,
		|	ВложенныйЗапрос.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ВложенныйЗапрос.Контрагент КАК Контрагент,
		|	ВложенныйЗапрос.КонтрагентПокупатель КАК КонтрагентПокупатель,
		|	ВложенныйЗапрос.КонтрагентПоставщик КАК КонтрагентПоставщик,
		|	ВложенныйЗапрос.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
		|	ВложенныйЗапрос.СостояниеДокумента КАК СостояниеДокумента,
		|	ВложенныйЗапрос.Приоритет КАК Приоритет,
		|	РегистрацияБезналичнойОплаты.РасшифровкаПлатежа.(
		|		ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
		|		СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
		|	) КАК РасшифровкаПлатежа
		|ИЗ
		|	(ВЫБРАТЬ
		|		втДокументыПоПолямПоиска.НомерСтроки КАК НомерСтроки,
		|		втДокументыПоПолямПоиска.Документ КАК Документ,
		|		втДокументыПоПолямПоиска.Дата КАК Дата,
		|		втДокументыПоПолямПоиска.Номер КАК Номер,
		|		втДокументыПоПолямПоиска.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|		втДокументыПоПолямПоиска.Контрагент КАК Контрагент,
		|		ЕСТЬNULL(втДокументыПоПолямПоиска.Контрагент.Покупатель, ЛОЖЬ) КАК КонтрагентПокупатель,
		|		ЕСТЬNULL(втДокументыПоПолямПоиска.Контрагент.Поставщик, ЛОЖЬ) КАК КонтрагентПоставщик,
		|		втДокументыПоПолямПоиска.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
		|		втДокументыПоПолямПоиска.СостояниеДокумента КАК СостояниеДокумента,
		|		втДокументыПоПолямПоиска.Приоритет КАК Приоритет
		|	ИЗ
		|		втДокументыПоПолямПоиска КАК втДокументыПоПолямПоиска
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМинимальныйПриоритет КАК втМинимальныйПриоритет
		|			ПО втДокументыПоПолямПоиска.НомерСтроки = втМинимальныйПриоритет.НомерСтроки
		|				И втДокументыПоПолямПоиска.Приоритет = втМинимальныйПриоритет.Приоритет) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегистрацияБезналичнойОплаты КАК РегистрацияБезналичнойОплаты
		|		ПО ВложенныйЗапрос.Документ = РегистрацияБезналичнойОплаты.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.НомерСтроки
		|ИТОГИ ПО
		|	ВложенныйЗапрос.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втДокументыПоПолямПоиска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втМинимальныйПриоритет";
	
	
	ШаблонСсылка = "<a href = ""%1"">%2</a>";
	
	ВыборкаСтрокаВыписки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСтрокаВыписки.Следующий() Цикл
		
		ДокументКЗагрузке = ДокументыКЗагрузке.Найти(ВыборкаСтрокаВыписки.НомерСтроки, "НомерСтроки");
		Если ДокументКЗагрузке = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = ВыборкаСтрокаВыписки.Выбрать();
		Выборка.Следующий();
		
		// Перенесем данные из найденного документа.
		ЗаполнитьЗначенияСвойств(ДокументКЗагрузке, Выборка, ,"НомерСтроки");
		
		// Перенесем данные из расшифровки платежа.
		ВыборкаРасшифровкаПлатежа = Выборка.РасшифровкаПлатежа.Выбрать();
		Если ВыборкаРасшифровкаПлатежа.Количество() = 1 Тогда
			ВыборкаРасшифровкаПлатежа.Следующий();
			ЗаполнитьЗначенияСвойств(ДокументКЗагрузке, ВыборкаРасшифровкаПлатежа);
		Иначе
			// По умолчанию документы с несколькими строками в расшифровке платежа не обновляем.
			ДокументКЗагрузке.Загружать = Ложь;
		КонецЕсли;
		
		ДокументКЗагрузке.ПредставлениеДокумента = ПредставлениеДокумента(Выборка.Документ, Выборка.Дата, Выборка.Номер);
		
		// Зафиксируем ошибку, если найдено более одного документа.
		КоличествоЗаписей = Выборка.Количество();
		Если КоличествоЗаписей > 1 Тогда
			ПредставлениеОшибки = СтрШаблон(НСтр("ru='Строке выписки соответствует несколько документов в информационной базе (%1).'"),
				КоличествоЗаписей);
				
			Если КоличествоЗаписей > 3 Тогда
				ПодробноеПредставлениеОшибки = ПредставлениеОшибки;
			Иначе
				ПодробноеПредставлениеОшибки = НСтр("ru = 'Строке выписки соответствует несколько документов в информационной базе:'")
					+ Символы.ПС + СтрШаблон(ШаблонСсылка, ПолучитьНавигационнуюСсылку(Выборка.Документ), Строка(Выборка.Документ));
				Пока Выборка.Следующий() Цикл
					ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки
						+ Символы.ПС + СтрШаблон(ШаблонСсылка, ПолучитьНавигационнуюСсылку(Выборка.Документ), Строка(Выборка.Документ));
				КонецЦикла;
			КонецЕсли;
			
			ЗафиксироватьОшибкуЗагрузки(ДокументКЗагрузке, ПредставлениеОшибки, ПодробноеПредставлениеОшибки, "Документ");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаКонтрагентов(ДокументыКЗагрузке, ТаблицаДокументов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	*,
		|	ТаблицаДокументов.Контрагент = НЕОПРЕДЕЛЕНО
		|		ИЛИ ТаблицаДокументов.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК ПустойКонтрагент,
		|	ТаблицаДокументов.БанковскийСчетКонтрагента = НЕОПРЕДЕЛЕНО
		|		ИЛИ ТаблицаДокументов.БанковскийСчетКонтрагента = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка) КАК ПустойСчетКонтрагента
		|ПОМЕСТИТЬ ТаблицаДокументов
		|ИЗ
		|	&ТаблицаДокументов КАК ТаблицаДокументов
		|ГДЕ
		|	(ТаблицаДокументов.Контрагент = НЕОПРЕДЕЛЕНО
		|			ИЛИ ТаблицаДокументов.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ИЛИ ТаблицаДокументов.БанковскийСчетКонтрагента = НЕОПРЕДЕЛЕНО
		|			ИЛИ ТаблицаДокументов.БанковскийСчетКонтрагента = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка))";
	
	Запрос.Выполнить();
	
	// Результаты поиска упорядочим по нарастанию приоритета (меньше - лучше):
	// 1. Найден банковский счет контрагента, не противоречящий данным владельца (ИНН, КПП).
	//    В качестве контрагента используем владельца счета;
	// 2. Контрагент найден по ИНН + КПП;
	// 3. Контрагент найден по ИНН (КПП не противоречит);
	// 4. Контрагент найден по Наименованию (ИНН не противоречит).
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокументов.НомерСтроки КАК НомерСтроки,
		|	БанковскиеСчетаКонтрагентов.Владелец КАК Контрагент,
		|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.Владелец.Покупатель, ЛОЖЬ) КАК КонтрагентПокупатель,
		|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.Владелец.Поставщик, ЛОЖЬ) КАК КонтрагентПоставщик,
		|	БанковскиеСчетаКонтрагентов.Ссылка КАК БанковскийСчетКонтрагента,
		|	ВЫБОР
		|		КОГДА БанковскиеСчетаКонтрагентов.ПометкаУдаления
		|			ТОГДА 101
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Приоритет
		|ПОМЕСТИТЬ втКонтрагентыПоПолямПоиска
		|ИЗ
		|	ТаблицаДокументов КАК ТаблицаДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчетаКонтрагентов
		|		ПО ТаблицаДокументов.НомерСчетаКонтрагента = БанковскиеСчетаКонтрагентов.НомерСчета
		|			И (ТаблицаДокументов.БИКБанкаКонтрагента = """"
		|				ИЛИ ЕСТЬNULL(БанковскиеСчетаКонтрагентов.Банк.Код, """") = """"
		|				ИЛИ ТаблицаДокументов.БИКБанкаКонтрагента = ЕСТЬNULL(БанковскиеСчетаКонтрагентов.Банк.Код, """")
		|				ИЛИ ТаблицаДокументов.БИКБанкаКонтрагента = БанковскиеСчетаКонтрагентов.БИКБанка
		|					И БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанка)
		|			И (ТаблицаДокументов.ИННКонтрагента = """"
		|				ИЛИ ЕСТЬNULL(БанковскиеСчетаКонтрагентов.Владелец.ИНН, """") = """"
		|				ИЛИ ТаблицаДокументов.ИННКонтрагента = ЕСТЬNULL(БанковскиеСчетаКонтрагентов.Владелец.ИНН, """"))
		|			И (ТаблицаДокументов.КППКонтрагента = """"
		|				ИЛИ ЕСТЬNULL(БанковскиеСчетаКонтрагентов.Владелец.КПП, """") = """"
		|				ИЛИ ТаблицаДокументов.КППКонтрагента = ЕСТЬNULL(БанковскиеСчетаКонтрагентов.Владелец.КПП, """"))
		|ГДЕ
		|	ТаблицаДокументов.ПустойСчетКонтрагента
		|	И НЕ ТаблицаДокументов.НомерСчетаКонтрагента = """"
		|	И НЕ БанковскиеСчетаКонтрагентов.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокументов.НомерСтроки,
		|	Контрагенты.Ссылка,
		|	Контрагенты.Покупатель,
		|	Контрагенты.Поставщик,
		|	NULL,
		|	ВЫБОР
		|		КОГДА Контрагенты.ПометкаУдаления
		|			ТОГДА 102
		|		ИНАЧЕ 2
		|	КОНЕЦ
		|ИЗ
		|	ТаблицаДокументов КАК ТаблицаДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО ТаблицаДокументов.ИННКонтрагента = Контрагенты.ИНН
		|			И ТаблицаДокументов.КППКонтрагента = Контрагенты.КПП
		|ГДЕ
		|	ТаблицаДокументов.ПустойКонтрагент
		|	И НЕ ТаблицаДокументов.ИННКонтрагента = """"
		|	И НЕ ТаблицаДокументов.КППКонтрагента = """"
		|	И НЕ Контрагенты.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокументов.НомерСтроки,
		|	Контрагенты.Ссылка,
		|	Контрагенты.Покупатель,
		|	Контрагенты.Поставщик,
		|	NULL,
		|	ВЫБОР
		|		КОГДА Контрагенты.ПометкаУдаления
		|			ТОГДА 103
		|		ИНАЧЕ 3
		|	КОНЕЦ
		|ИЗ
		|	ТаблицаДокументов КАК ТаблицаДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО ТаблицаДокументов.ИННКонтрагента = Контрагенты.ИНН
		|			И (ТаблицаДокументов.КППКонтрагента = """"
		|				ИЛИ Контрагенты.КПП = """")
		|ГДЕ
		|	ТаблицаДокументов.ПустойКонтрагент
		|	И НЕ ТаблицаДокументов.ИННКонтрагента = """"
		|	И НЕ Контрагенты.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокументов.НомерСтроки,
		|	Контрагенты.Ссылка,
		|	Контрагенты.Покупатель,
		|	Контрагенты.Поставщик,
		|	NULL,
		|	ВЫБОР
		|		КОГДА Контрагенты.ПометкаУдаления
		|			ТОГДА 104
		|		ИНАЧЕ 4
		|	КОНЕЦ
		|ИЗ
		|	ТаблицаДокументов КАК ТаблицаДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО (ТаблицаДокументов.НаименованиеКонтрагента = Контрагенты.Наименование
		|				ИЛИ ТаблицаДокументов.НаименованиеКонтрагента = Контрагенты.НаименованиеПолное)
		|			И (ТаблицаДокументов.ИННКонтрагента = """"
		|				ИЛИ Контрагенты.ИНН = """")
		|ГДЕ
		|	ТаблицаДокументов.ПустойКонтрагент
		|	И НЕ ТаблицаДокументов.НаименованиеКонтрагента = """"
		|	И НЕ Контрагенты.Ссылка ЕСТЬ NULL
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки,
		|	Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втКонтрагентыПоПолямПоиска.НомерСтроки КАК НомерСтроки,
		|	МИНИМУМ(втКонтрагентыПоПолямПоиска.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ втМинимальныйПриоритет
		|ИЗ
		|	втКонтрагентыПоПолямПоиска КАК втКонтрагентыПоПолямПоиска
		|
		|СГРУППИРОВАТЬ ПО
		|	втКонтрагентыПоПолямПоиска.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втКонтрагентыПоПолямПоиска.НомерСтроки КАК НомерСтроки,
		|	втКонтрагентыПоПолямПоиска.Контрагент КАК Контрагент,
		|	втКонтрагентыПоПолямПоиска.КонтрагентПокупатель КАК КонтрагентПокупатель,
		|	втКонтрагентыПоПолямПоиска.КонтрагентПоставщик КАК КонтрагентПоставщик,
		|	втКонтрагентыПоПолямПоиска.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
		|	втКонтрагентыПоПолямПоиска.Приоритет КАК Приоритет
		|ИЗ
		|	втКонтрагентыПоПолямПоиска КАК втКонтрагентыПоПолямПоиска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМинимальныйПриоритет КАК втМинимальныйПриоритет
		|		ПО втКонтрагентыПоПолямПоиска.НомерСтроки = втМинимальныйПриоритет.НомерСтроки
		|			И втКонтрагентыПоПолямПоиска.Приоритет = втМинимальныйПриоритет.Приоритет
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	Контрагент,
		|	БанковскийСчетКонтрагента
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контрагент),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ БанковскийСчетКонтрагента)
		|ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втКонтрагентыПоПолямПоиска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втМинимальныйПриоритет";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ШаблонСсылка = "<a href = ""%1"">%2</a>";
	
	ОшибкиПоПриоритетуКратко = Новый Соответствие;
	ОшибкиПоПриоритетуКратко.Вставить("1", НСтр("ru='Найдено несколько контрагентов (%1) с одинаковым номером счета.'"));
	ОшибкиПоПриоритетуКратко.Вставить("2", НСтр("ru='Найдено несколько контрагентов (%1) с одинаковыми ИНН и КПП.'"));
	ОшибкиПоПриоритетуКратко.Вставить("3", НСтр("ru='Найдено несколько контрагентов (%1) с одинаковым ИНН.'"));
	ОшибкиПоПриоритетуКратко.Вставить("4", НСтр("ru='Найдено несколько контрагентов (%1) с одинаковым наименованием.'"));
	
	ОшибкиПоПриоритетуПодробно = Новый Соответствие;
	ОшибкиПоПриоритетуПодробно.Вставить("1", НСтр("ru='Найдено несколько контрагентов (%Количество%) с одинаковым номером счета (%НомерСчета%):'"));
	ОшибкиПоПриоритетуПодробно.Вставить("2", НСтр("ru='Найдено несколько контрагентов (%Количество%) с одинаковыми ИНН и КПП (%ИНН%/%КПП%):'"));
	ОшибкиПоПриоритетуПодробно.Вставить("3", НСтр("ru='Найдено несколько контрагентов (%Количество%) с одинаковым ИНН (%ИНН%):'"));
	ОшибкиПоПриоритетуПодробно.Вставить("4", НСтр("ru='Найдено несколько контрагентов (%Количество%) с одинаковым наименованием (%Наименование%):'"));
	
	ВыборкаСтрокаВыписки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСтрокаВыписки.Следующий() Цикл
		
		ДокументКЗагрузке = ДокументыКЗагрузке.Найти(ВыборкаСтрокаВыписки.НомерСтроки, "НомерСтроки");
		Если ДокументКЗагрузке = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоКонтрагентов = ВыборкаСтрокаВыписки.Контрагент;
		КоличествоСчетов       = ВыборкаСтрокаВыписки.БанковскийСчетКонтрагента;
		
		Выборка = ВыборкаСтрокаВыписки.Выбрать();
		Выборка.Следующий();
		
		Приоритет = Прав(Строка(Выборка.Приоритет), 1);
		
		// Перенесем данные из найденного элемента.
		ДокументКЗагрузке.Контрагент           = Выборка.Контрагент;
		ДокументКЗагрузке.КонтрагентПокупатель = Выборка.КонтрагентПокупатель;
		ДокументКЗагрузке.КонтрагентПоставщик  = Выборка.КонтрагентПоставщик;
		
		Если ЗначениеЗаполнено(Выборка.БанковскийСчетКонтрагента) Тогда
			ДокументКЗагрузке.БанковскийСчетКонтрагента = Выборка.БанковскийСчетКонтрагента;
		КонецЕсли;
		
		// Зафиксируем ошибку, если найдено более одного контрагента.
		Если КоличествоКонтрагентов > 1 Тогда
			
			ПредставлениеОшибки = СтрШаблон(ОшибкиПоПриоритетуКратко.Получить(Приоритет), КоличествоКонтрагентов);
			
			Если КоличествоКонтрагентов > 3 Тогда
				ПодробноеПредставлениеОшибки = ПредставлениеОшибки;
			Иначе
				ПодробноеПредставлениеОшибки = ОшибкиПоПриоритетуПодробно.Получить(Приоритет);
				ПодробноеПредставлениеОшибки = СтрЗаменить(ПодробноеПредставлениеОшибки, "%Количество%",
					КоличествоКонтрагентов);
				ПодробноеПредставлениеОшибки = СтрЗаменить(ПодробноеПредставлениеОшибки, "%НомерСчета%",
					ДокументКЗагрузке.НомерСчетаКонтрагента);
				ПодробноеПредставлениеОшибки = СтрЗаменить(ПодробноеПредставлениеОшибки, "%ИНН%",
					ДокументКЗагрузке.ИННКонтрагента);
				ПодробноеПредставлениеОшибки = СтрЗаменить(ПодробноеПредставлениеОшибки, "%КПП%",
					ДокументКЗагрузке.КППКонтрагента);
				ПодробноеПредставлениеОшибки = СтрЗаменить(ПодробноеПредставлениеОшибки, "%Наименование%",
					ДокументКЗагрузке.НаименованиеКонтрагента);
				
				Выборка = ВыборкаСтрокаВыписки.Выбрать();
				Пока Выборка.СледующийПоЗначениюПоля("Контрагент") Цикл
					ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки + Символы.ПС
						+ СтрШаблон(ШаблонСсылка, ПолучитьНавигационнуюСсылку(Выборка.Контрагент), Строка(Выборка.Контрагент));
				КонецЦикла;
			КонецЕсли;
			
			ЗафиксироватьОшибкуЗагрузки(ДокументКЗагрузке, ПредставлениеОшибки, ПодробноеПредставлениеОшибки, "Контрагент");
			
		КонецЕсли;
		
		// Зафиксируем ошибку, если найдено более одного банковского счета контрагента.
		Если КоличествоСчетов > 1 Тогда
			
			ПредставлениеОшибки = СтрШаблон(НСтр("ru='Найдено несколько банковских счетов контрагента (%1) с одинаковым номером счета.'"),
				КоличествоСчетов);
				
			Если КоличествоСчетов > 3 Тогда
				ПодробноеПредставлениеОшибки = ПредставлениеОшибки;
			Иначе
				ПодробноеПредставлениеОшибки = СтрШаблон(НСтр("ru='Найдено несколько банковских счетов контрагента (%1) с одинаковым номером счета (%2):'"),
					КоличествоСчетов, ДокументКЗагрузке.НомерСчетаКонтрагента);
				
				Выборка = ВыборкаСтрокаВыписки.Выбрать();
				Пока Выборка.СледующийПоЗначениюПоля("БанковскийСчетКонтрагента") Цикл
					ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки+ Символы.ПС
						+ СтрШаблон(ШаблонСсылка, ПолучитьНавигационнуюСсылку(Выборка.БанковскийСчетКонтрагента), Строка(Выборка.БанковскийСчетКонтрагента));
				КонецЦикла;
			КонецЕсли;
			
			ЗафиксироватьОшибкуЗагрузки(ДокументКЗагрузке, ПредставлениеОшибки, ПодробноеПредставлениеОшибки, "БанковскийСчет");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьИзНаименованияИНН(Наименование, ИНН)
	
	ЭлементыНаименования = СтрРазделить(Наименование, " ", Ложь);
	Если ЭлементыНаименования.Количество() < 3 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементыНаименования[0] <> "ИНН" Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементыНаименования[1] <> ИНН 
		И Не ТолькоНулиВСтроке(ЭлементыНаименования[1]) Тогда
		Возврат;
	КонецЕсли;
	
	// Удалим часть наименования, включающую первое и второе слова.
	Для ИндексСлова = 0 По 1 Цикл
		Слово = ЭлементыНаименования[ИндексСлова];
		НачалоСлова  = СтрНайти(Наименование, Слово);
		КонецСлова   = НачалоСлова + СтрДлина(Слово); // Точнее, это позиция разделителя за концом слова
		Наименование = СокрЛ(Сред(Наименование, КонецСлова + 1));// Так как слов больше 2, то заведомо не выйдем за конец строки
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйДокументыКЗагрузке()
	
	ДокументыКЗагрузке = Новый ТаблицаЗначений;
	
	Для Каждого Реквизит Из Метаданные.Обработки.КлиентБанк.ТабличныеЧасти.ДокументыКЗагрузке.Реквизиты Цикл
		ДокументыКЗагрузке.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	
	ДокументыКЗагрузке.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(0));
	
	Возврат ДокументыКЗагрузке;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЗагрузкаДанныхВыписки

Функция ЗагрузитьВыписку(ДокументыКЗагрузке, ПараметрыЗагрузкиДокументов)
	
	Результат = Новый Структура;
	Результат.Вставить("ДокументыКЗагрузке", ДокументыКЗагрузке);
	Результат.Вставить("СообщенияПользователю", Новый Массив);
	
	Для Каждого ДокументКЗагрузке Из ДокументыКЗагрузке Цикл
		
		Если НЕ ДокументКЗагрузке.Загружать Тогда
			Продолжить;
		КонецЕсли;
		
		// Сбросим сообщения об ошибках.
		ДокументКЗагрузке.ЕстьОшибки = Ложь;
		ДокументКЗагрузке.ПредставлениеОшибок               = "";
		ДокументКЗагрузке.ПредставлениеОшибокДокумент       = "";
		ДокументКЗагрузке.ПредставлениеОшибокКонтрагент     = "";
		ДокументКЗагрузке.ПредставлениеОшибокБанковскийСчет = "";
		
		Если НЕ ЗначениеЗаполнено(ДокументКЗагрузке.Контрагент)
			И (ЗначениеЗаполнено(ДокументКЗагрузке.НаименованиеКонтрагента) ИЛИ ЗначениеЗаполнено(ДокументКЗагрузке.ИННКонтрагента)) Тогда
			ЗагрузитьКонтрагента(ДокументыКЗагрузке, ДокументКЗагрузке, Результат.СообщенияПользователю);
			Если ЗначениеЗаполнено(ДокументКЗагрузке.Контрагент) Тогда
				ЗаполнитьКонтрагентаВСтрокахПоПолямПоиска(ДокументыКЗагрузке, ДокументКЗагрузке);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДокументКЗагрузке.БанковскийСчетКонтрагента)
			И ЗначениеЗаполнено(ДокументКЗагрузке.Контрагент) И ЗначениеЗаполнено(ДокументКЗагрузке.НомерСчетаКонтрагента) Тогда
			ЗагрузитьБанковскийСчетКонтрагента(ДокументКЗагрузке, Результат.СообщенияПользователю);
			Если ЗначениеЗаполнено(ДокументКЗагрузке.БанковскийСчетКонтрагента) Тогда
				ЗаполнитьБанковскийСчетКонтрагентаВСтрокахПоПолямПоиска(ДокументыКЗагрузке, ДокументКЗагрузке);
			КонецЕсли;
		КонецЕсли;
		
		ЗагрузитьРегистрациюБезналичнойОплаты(ДокументКЗагрузке, ПараметрыЗагрузкиДокументов, Результат.СообщенияПользователю);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗагрузитьКонтрагента(ДокументыКЗагрузке, ДокументКЗагрузке, СообщенияПользователю)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	НовыйКонтрагент.Наименование       = ДокументКЗагрузке.НаименованиеКонтрагента;
	НовыйКонтрагент.НаименованиеПолное = ДокументКЗагрузке.НаименованиеКонтрагента;
	НовыйКонтрагент.ИНН                = ДокументКЗагрузке.ИННКонтрагента;
	НовыйКонтрагент.КПП                = ДокументКЗагрузке.КППКонтрагента;
	
	// Заполним признаки "Покупатель" и "Поставщик", исходя
	// из хоз. операций во всех строках по контрагенту.
	ОперацииПоставщик = ДенежныеСредстваКлиентСервер.ДоступныеОперацииРегистрацииБезналичнойОплаты(
		Новый Структура("Покупатель, Поставщик, Прочее", Ложь, Истина, Ложь));
	
	ОперацииПокупатель = ДенежныеСредстваКлиентСервер.ДоступныеОперацииРегистрацииБезналичнойОплаты(
		Новый Структура("Покупатель, Поставщик, Прочее", Истина, Ложь, Ложь));
	
	СтрокиКонтрагента = СтрокиПоКонтрагенту(ДокументыКЗагрузке, ДокументКЗагрузке);
	Для Каждого СтрокаКонтрагента Из СтрокиКонтрагента Цикл
		Если НовыйКонтрагент.Покупатель И НовыйКонтрагент.Поставщик Тогда
			Прервать;
		КонецЕсли;
		
		Если НЕ ОперацииПоставщик.Найти(СтрокаКонтрагента.ХозяйственнаяОперация) = Неопределено Тогда
			НовыйКонтрагент.Поставщик = Истина;
		ИначеЕсли НЕ ОперацииПокупатель.Найти(СтрокаКонтрагента.ХозяйственнаяОперация) = Неопределено Тогда
			НовыйКонтрагент.Покупатель = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
	Если ЗначениеЗаполнено(НовыйКонтрагент.ИНН) Тогда
		Если СтрДлина(НовыйКонтрагент.ИНН) = 10 Тогда
			ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		ИначеЕсли СтрДлина(НовыйКонтрагент.ИНН) = 12 Тогда
			ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
		КонецЕсли;
	КонецЕсли;
	
	НовыйКонтрагент.ЮрФизЛицо = ЮрФизЛицо;
	
	Попытка
		НовыйКонтрагент.Записать();
	Исключение
		ОшибкаКратко   = НСтр("ru='Не удалось загрузить контрагента!'");
		ОшибкаПодробно = СтрШаблон(НСтр("ru='При записи контрагента ""%1"" возникла ошибка:'"), ДокументКЗагрузке.НаименованиеКонтрагента);
		ОшибкаПодробно = ОшибкаПодробно + Символы.ПС + ОписаниеОшибки();
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			НовыйКонтрагент.Метаданные(),
			,// Данные не записаны
			ОшибкаПодробно);
		
		СообщенияПользователю.Добавить(ОшибкаПодробно);
		ЗафиксироватьОшибкуЗагрузки(ДокументКЗагрузке, ОшибкаКратко, ОшибкаПодробно, "Контрагент");
		
		Возврат;
		
	КонецПопытки;
	
	// Проверим заполнение.
	СообщенияДоПроверкиЗаполнения = ПолучитьСообщенияПользователю(Истина); // Для перехвата сообщений в ходе проверки.
	Если НЕ НовыйКонтрагент.ПроверитьЗаполнение() Тогда
		
		ОшибкаКратко = НСтр("ru='Контрагент заполнен некорректно.'");
		
		СообщенияПроверкиЗаполнения = ПолучитьСообщенияПользователю(Истина);
		ТекстыСообщений = Новый Массив;
		Для Каждого СообщениеПользователю Из СообщенияПроверкиЗаполнения Цикл
			ТекстыСообщений.Добавить(СообщениеПользователю.Текст);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТекстыСообщений) Тогда
			ОшибкаПодробно = СтрШаблон(НСтр("ru='Ошибка проверки заполнения контрагента ""%1"":'"), НовыйКонтрагент);
			ОшибкаПодробно = ОшибкаПодробно + Символы.ПС + СтрСоединить(ТекстыСообщений, Символы.ПС);
		Иначе
			ОшибкаПодробно = ОшибкаКратко;
		КонецЕсли;
		
		СообщенияПользователю.Добавить(ОшибкаПодробно);
		ЗафиксироватьОшибкуЗагрузки(ДокументКЗагрузке, ОшибкаКратко, ОшибкаПодробно, "Контрагент");
		
	КонецЕсли;
	
	Для Каждого СообщениеПользователю Из СообщенияДоПроверкиЗаполнения Цикл
		// Вернем в стек сообщений те, что были направлены пользователю до начала проверки.
		СообщениеПользователю.Сообщить();
	КонецЦикла;
	
	ДокументКЗагрузке.Контрагент           = НовыйКонтрагент.Ссылка;
	ДокументКЗагрузке.КонтрагентПокупатель = НовыйКонтрагент.Покупатель;
	ДокументКЗагрузке.КонтрагентПоставщик  = НовыйКонтрагент.Поставщик;
	
КонецПроцедуры

Процедура ЗагрузитьБанковскийСчетКонтрагента(ДокументКЗагрузке, СообщенияПользователю)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыйСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
	НовыйСчет.НомерСчета = ДокументКЗагрузке.НомерСчетаКонтрагента;
	НовыйСчет.Владелец   = ДокументКЗагрузке.Контрагент;
	
	// Попробуем найти банк.
	Банк = Неопределено;
	Если Не ПустаяСтрока(ДокументКЗагрузке.БИКБанкаКонтрагента) Тогда
		Банк = Справочники.КлассификаторБанков.НайтиПоКоду(ДокументКЗагрузке.БИКБанкаКонтрагента);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Банк) И Не ПустаяСтрока(ДокументКЗагрузке.КоррСчетБанкаКонтрагента) Тогда
		Банк = Справочники.КлассификаторБанков.НайтиПоРеквизиту("КоррСчет", ДокументКЗагрузке.КоррСчетБанкаКонтрагента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Банк) Тогда
		НовыйСчет.Банк = Банк;
	Иначе
		НовыйСчет.РучноеИзменениеРеквизитовБанка = Истина;
		НовыйСчет.БИКБанка           = ДокументКЗагрузке.БИКБанкаКонтрагента;
		НовыйСчет.НаименованиеБанка  = ДокументКЗагрузке.НаименованиеБанкаКонтрагента;
		НовыйСчет.ГородБанка         = ДокументКЗагрузке.ГородБанкаКонтрагента;
		НовыйСчет.КоррСчетБанка      = ДокументКЗагрузке.КоррСчетБанкаКонтрагента;
	КонецЕсли;
	
	// Сформируем наименование.
	СтрокаНаименования = "";
	Если НовыйСчет.РучноеИзменениеРеквизитовБанка Тогда
		СтрокаНаименования = Прав(СокрЛП(НовыйСчет.НомерСчета), 4) 
		+ ?(ЗначениеЗаполнено(НовыйСчет.НаименованиеБанка), " в " + Строка(НовыйСчет.НаименованиеБанка), "")
		+ ", " + СокрЛП(НовыйСчет.Владелец);
		СтрокаНаименования = Лев(СтрокаНаименования, 150);
	Иначе
		СтрокаНаименования = Прав(СокрЛП(НовыйСчет.НомерСчета), 4) 
		+ ?(ЗначениеЗаполнено(НовыйСчет.Банк), " в " + Строка(НовыйСчет.Банк), "")
		+ ", " + СокрЛП(НовыйСчет.Владелец);
		СтрокаНаименования = Лев(СтрокаНаименования, 150);
	КонецЕсли;
	
	НовыйСчет.Наименование = СтрокаНаименования;
	
	Попытка
		НовыйСчет.Записать();
	Исключение
		ОшибкаКратко   = НСтр("ru='Не удалось загрузить банковский счет контрагента.'");
		ОшибкаПодробно = СтрШаблон(НСтр("ru='При записи банковского счета контрагента ""%1"" возникла ошибка:'"), СтрокаНаименования);
		ОшибкаПодробно = ОшибкаПодробно + Символы.ПС + ОписаниеОшибки();
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			НовыйСчет.Метаданные(),
			,// Данные не записаны
			ОшибкаПодробно);
		
		СообщенияПользователю.Добавить(ОшибкаПодробно);
		ЗафиксироватьОшибкуЗагрузки(ДокументКЗагрузке, ОшибкаКратко, ОшибкаПодробно, "Контрагент");
		
		Возврат;
		
	КонецПопытки;
	
	// Проверим заполнение.
	СообщенияДоПроверкиЗаполнения = ПолучитьСообщенияПользователю(Истина); // Для перехвата сообщений в ходе проверки.
	Если НЕ НовыйСчет.ПроверитьЗаполнение() Тогда
		
		ОшибкаКратко = НСтр("ru='Банковский счет контрагента заполнен некорректно.'");
		
		СообщенияПроверкиЗаполнения = ПолучитьСообщенияПользователю(Истина);
		ТекстыСообщений = Новый Массив;
		Для Каждого СообщениеПользователю Из СообщенияПроверкиЗаполнения Цикл
			ТекстыСообщений.Добавить(СообщениеПользователю.Текст);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТекстыСообщений) Тогда
			ОшибкаПодробно = СтрШаблон(НСтр("ru='Ошибка проверки заполнения банковского счета контрагента ""%1"":'"), НовыйСчет);
			ОшибкаПодробно = ОшибкаПодробно + Символы.ПС + СтрСоединить(ТекстыСообщений, Символы.ПС);
		Иначе
			ОшибкаПодробно = ОшибкаКратко;
		КонецЕсли;
		
		СообщенияПользователю.Добавить(ОшибкаПодробно);
		ЗафиксироватьОшибкуЗагрузки(ДокументКЗагрузке, ОшибкаКратко, ОшибкаПодробно, "БанковскийСчет");
		
	КонецЕсли;
	
	Для Каждого СообщениеПользователю Из СообщенияДоПроверкиЗаполнения Цикл
		// Вернем в стек сообщений те, что были направлены пользователю до начала проверки.
		СообщениеПользователю.Сообщить();
	КонецЦикла;
	
	ДокументКЗагрузке.БанковскийСчетКонтрагента = НовыйСчет.Ссылка;
	
КонецПроцедуры

Процедура ЗагрузитьРегистрациюБезналичнойОплаты(ДокументКЗагрузке, ПараметрыЗагрузкиДокументов, СообщенияПользователю)
	
	Проводить     = ПараметрыЗагрузкиДокументов.ПроводитьДокументыПриЗагрузке;
	Ответственный = ПараметрыЗагрузкиДокументов.Ответственный;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ДокументКЗагрузке.Документ) Тогда
		ДокументОбъект = ДокументКЗагрузке.Документ.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
	Иначе
		ДокументОбъект = Документы.РегистрацияБезналичнойОплаты.СоздатьДокумент();
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ДокументКЗагрузке.ХозяйственнаяОперация);
		ДанныеЗаполнения.Вставить("Контрагент",            ДокументКЗагрузке.Контрагент);
		ДанныеЗаполнения.Вставить("Магазин",               ДокументКЗагрузке.Магазин);
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
	КонецЕсли;
	
	Если ДокументОбъект.ПометкаУдаления Тогда
		ДокументОбъект.ПометкаУдаления = Ложь;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ДокументКЗагрузке);
	
	ДокументОбъект.Дата = ДокументКЗагрузке.ДатаВходящегоДокумента;
	
	Если НачалоДня(ДокументОбъект.Дата) = НачалоДня(ТекущаяДатаСеанса()) Тогда
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
	Иначе
		ДокументОбъект.Дата = КонецДня(ДокументОбъект.Дата);
	КонецЕсли;
	
	ДокументОбъект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументКЗагрузке.БанковскийСчетОрганизации, "Владелец");
	ДокументОбъект.Ответственный = Ответственный;
	ДокументОбъект.Комментарий = НСтр("ru = '#Загружен из Клиент-Банка'");
	
	// Заполним расшифровку платежа.
	ЗаполнитьРасшифровкуПлатежа(ДокументОбъект, ДокументКЗагрузке);
	
	// Проверим заполнение.
	ОшибкиПроверкиЗаполненияКратко   = "";
	ОшибкиПроверкиЗаполненияПодробно = "";
	
	СообщенияДоПроверкиЗаполнения = ПолучитьСообщенияПользователю(Истина); // Для перехвата сообщений в ходе проверки.
	Если НЕ ДокументОбъект.ПроверитьЗаполнение() Тогда
		ОшибкиПроверкиЗаполненияКратко = НСтр("ru='Документ заполнен некорректно.'");
		
		СообщенияПроверкиЗаполнения = ПолучитьСообщенияПользователю(Истина);
		ТекстыСообщений = Новый Массив;
		Для Каждого СообщениеПользователю Из СообщенияПроверкиЗаполнения Цикл
			ТекстыСообщений.Добавить(СообщениеПользователю.Текст);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТекстыСообщений) Тогда
			ОшибкиПроверкиЗаполненияПодробно = НСтр("ru='Ошибка проверки заполнения документа ""%1"":'");
			ОшибкиПроверкиЗаполненияПодробно = ОшибкиПроверкиЗаполненияПодробно + Символы.ПС + СтрСоединить(ТекстыСообщений, Символы.ПС);
		Иначе
			ОшибкиПроверкиЗаполненияПодробно = ОшибкиПроверкиЗаполненияКратко;
		КонецЕсли;
		
		Проводить = Ложь;
		
	КонецЕсли;
	
	Для Каждого СообщениеПользователю Из СообщенияДоПроверкиЗаполнения Цикл
		// Вернем в стек сообщений те, что были направлены пользователю до начала проверки.
		СообщениеПользователю.Сообщить();
	КонецЦикла;
	
	
	// Запишем документ.
	ЗаписатьДокумент(ДокументОбъект, ДокументКЗагрузке, СообщенияПользователю, Проводить);
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	// Выведем сообщения проверки заполнения.
	Если НЕ ОшибкиПроверкиЗаполненияКратко = "" Тогда
		ОшибкиПроверкиЗаполненияПодробно = СтрШаблон(ОшибкиПроверкиЗаполненияПодробно, ДокументОбъект);
		СообщенияПользователю.Добавить(ОшибкиПроверкиЗаполненияПодробно);
		ЗафиксироватьОшибкуЗагрузки(ДокументКЗагрузке, ОшибкиПроверкиЗаполненияКратко, ОшибкиПроверкиЗаполненияПодробно, "Документ");
	КонецЕсли;
	
	ДокументКЗагрузке.СостояниеДокумента = ?(ДокументОбъект.Проведен, 1, 0);
	ДокументКЗагрузке.Документ = ДокументОбъект.Ссылка;
	ДокументКЗагрузке.ПредставлениеДокумента = ПредставлениеДокумента(ДокументОбъект.Ссылка, ДокументОбъект.Дата, ДокументОбъект.Номер);
	
КонецПроцедуры

Процедура ЗаписатьДокумент(ОбъектДляЗаписи, ДокументКЗагрузке ,СообщенияПользователю, Проводить)
	
	ЭтоНовыйДокумент    = ОбъектДляЗаписи.ЭтоНовый();
	ОбъектМодифицирован = ОбъектДляЗаписи.Модифицированность();
	ОбъектПроведен      = ОбъектДляЗаписи.Проведен;
	
	Если Не ЭтоНовыйДокумент Тогда
		ПредставлениеДокумента = Строка(ОбъектДляЗаписи.Ссылка);
	Иначе
		// Стандартное представление не подходит, поэтому сконструируем нестандартное.
		ШаблонПредставления = НСтр("ru = '%1 № %2 от %3'");
		ПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонПредставления,
			ОбъектДляЗаписи.Метаданные().Синоним,
			ОбъектДляЗаписи.НомерВходящегоДокумента,
			Формат(ОбъектДляЗаписи.ДатаВходящегоДокумента, "ДЛФ=D"));
	КонецЕсли;
	
	Если ОбъектМодифицирован ИЛИ НЕ Проводить Тогда
		Попытка
			Если ОбъектПроведен Тогда
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		Исключение
			
			ОшибкаКратко   = НСтр("ru='Не удалось загрузить документ.'");
			ОшибкаПодробно = СтрШаблон(НСтр("ru='При записи документа ""%1"" возникла ошибка:'"), ПредставлениеДокумента);
			ОшибкаПодробно = ОшибкаПодробно + Символы.ПС + ОписаниеОшибки();
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				ОбъектДляЗаписи.Метаданные(),
				?(ЭтоНовыйДокумент, "", ОбъектДляЗаписи.Ссылка),
				ОшибкаПодробно);
			
			СообщенияПользователю.Добавить(ОшибкаПодробно);
			ЗафиксироватьОшибкуЗагрузки(ДокументКЗагрузке, ОшибкаКратко, ОшибкаПодробно, "Документ");
			
			Возврат;
			
		КонецПопытки;
	КонецЕсли;
	
	ПредставлениеДокумента = Строка(ОбъектДляЗаписи);
	
	Если Проводить И (ОбъектМодифицирован Или НЕ ОбъектПроведен) Тогда
		
		Попытка
			ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			
			ОшибкаКратко   = НСтр("ru='Не удалось провести документ.'");
			ОшибкаПодробно = СтрШаблон(НСтр("ru='При проведении документа ""%1"" возникла ошибка:'"), ПредставлениеДокумента);
			ОшибкаПодробно = ОшибкаПодробно + Символы.ПС + ОписаниеОшибки();
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				ОбъектДляЗаписи.Метаданные(),
				?(ЭтоНовыйДокумент, "", ОбъектДляЗаписи.Ссылка),
				ОшибкаПодробно);
			
			СообщенияПользователю.Добавить(ОшибкаПодробно);
			ЗафиксироватьОшибкуЗагрузки(ДокументКЗагрузке, ОшибкаКратко, ОшибкаПодробно, "Документ");
			
			Возврат;
			
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРасшифровкуПлатежа(ДокументОбъект, ДокументКЗагрузке)
	
	ДокументОбъект.РасшифровкаПлатежа.Очистить();
	
	Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
		И НЕ ЗначениеЗаполнено(ДокументКЗагрузке.ДокументРасчетовСКонтрагентом) Тогда
		
		Если ЗначениеЗаполнено(ДокументОбъект.ДокументОснование)
			И ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ЗаказПокупателя = ДокументОбъект.ДокументОснование;
		Иначе
			// Попробуем подобрать заказ покупателя по остаткам взаиморасчетов.
			ЗаказПокупателя = ПолучитьЗаказПокупателя(ДокументОбъект);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаказПокупателя) Тогда
			ДокументОбъект.ДокументОснование = ЗаказПокупателя;
			
			ДанныеЗаполненияПрочие = Новый Структура;
			Если ЗначениеЗаполнено(ДокументКЗагрузке.СтатьяДвиженияДенежныхСредств) Тогда
				ДанныеЗаполненияПрочие.Вставить("СтатьяДвиженияДенежныхСредств", ДокументКЗагрузке.СтатьяДвиженияДенежныхСредств);
			КонецЕсли;
			ФинансыСервер.ЗаполнениеРасшифровкиПлатежаПоЗаказуПокупателя(ДокументОбъект, ЗаказПокупателя, ДанныеЗаполненияПрочие);
		КонецЕсли;
	КонецЕсли;
	
	СуммаКРаспределению = ДокументКЗагрузке.СуммаДокумента - ДокументОбъект.РасшифровкаПлатежа.Итог("Сумма");
	Если СуммаКРаспределению > 0 Тогда
		СтрокаРасшифровки = ДокументОбъект.РасшифровкаПлатежа.Добавить();
		СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств = ДокументКЗагрузке.СтатьяДвиженияДенежныхСредств;
		СтрокаРасшифровки.ДокументРасчетовСКонтрагентом = ДокументКЗагрузке.ДокументРасчетовСКонтрагентом;
		СтрокаРасшифровки.Сумма = ДокументКЗагрузке.СуммаДокумента;
	КонецЕсли;
	
	ДенежныеСредстваСервер.ЗаполнитьПризнакСпособаРасчета(ДокументОбъект);
	
КонецПроцедуры

Функция ПолучитьЗаказПокупателя(ДокументОбъект)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Магазин",     ДокументОбъект.Магазин);
	Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("Контрагент",  ДокументОбъект.Контрагент);
	Запрос.УстановитьПараметр("ДатаПлатежа", ДокументОбъект.Дата);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК ЗаказПокупателя,
		|	ЗаказПокупателя.Дата КАК Дата
		|ПОМЕСТИТЬ втЗаказы
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Магазин = &Магазин
		|	И ЗаказПокупателя.Организация = &Организация
		|	И ЗаказПокупателя.Контрагент = &Контрагент
		|	И ЗаказПокупателя.Проведен
		|	И ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Согласован)
		|	И ЗаказПокупателя.Дата <= &ДатаПлатежа
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказПокупателя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	РасчетыСКлиентамиОстаткиИОбороты.ЗаказПокупателя КАК ЗаказПокупателя,
		|	РасчетыСКлиентамиОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
		|	РасчетыСКлиентамиОстаткиИОбороты.СуммаОборот КАК СуммаОборот
		|ПОМЕСТИТЬ втРасчетыСКлиентами
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(
		|			,
		|			,
		|			Период,
		|			,
		|			Магазин = &Магазин
		|				И Организация = &Организация
		|				И Контрагент = &Контрагент
		|				И ЗаказПокупателя В
		|					(ВЫБРАТЬ
		|						втЗаказы.ЗаказПокупателя
		|					ИЗ
		|						втЗаказы)) КАК РасчетыСКлиентамиОстаткиИОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказПокупателя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	втЗаказы.ЗаказПокупателя КАК ЗаказПокупателя
		|ИЗ
		|	втЗаказы КАК втЗаказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ втРасчетыСКлиентами КАК втРасчетыСКлиентами
		|		ПО втЗаказы.ЗаказПокупателя = втРасчетыСКлиентами.ЗаказПокупателя
		|ГДЕ
		|	(ЕСТЬNULL(втРасчетыСКлиентами.СуммаКонечныйОстаток, 0) < 0
		|			ИЛИ ЕСТЬNULL(втРасчетыСКлиентами.СуммаОборот, 0) = 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	втЗаказы.Дата";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЗаказПокупателя;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область НастройкиОбменаСБанком

Функция НовыйНастройкиОбменаСБанком()
	
	Настройки = Новый Структура;
	// Ключ - Банковский счет или Организация; Значение - см. НовыйДетальнаяНастройка().
	Настройки.Вставить("ДетальныеНастройки",            Новый Соответствие);
	Настройки.Вставить("ПроводитьДокументыПриЗагрузке", Истина);
	
	Возврат Настройки;
	
КонецФункции

Функция НастройкиОбменаСБанком() Экспорт
	
	НастройкиЗагрузки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("КлиентБанк", "НастройкиОбменаСБанком", Неопределено);
	
	Если НастройкиЗагрузки = Неопределено Тогда
		НастройкиЗагрузки = НовыйНастройкиОбменаСБанком();
	КонецЕсли;
	
	Возврат НастройкиЗагрузки;
	
КонецФункции

Процедура СохранитьНастройкиОбменаСБанком(Настройки) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("КлиентБанк", "НастройкиОбменаСБанком", Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция БанковскиеСчетаОрганизаций()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	БанковскиеСчетаОрганизаций.Владелец КАК Организация,
		|	БанковскиеСчетаОрганизаций.Ссылка КАК Ссылка,
		|	БанковскиеСчетаОрганизаций.НомерСчета КАК НомерСчета,
		|	ВЫБОР
		|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанка
		|			ТОГДА БанковскиеСчетаОрганизаций.БИКБанка
		|		ИНАЧЕ БанковскиеСчетаОрганизаций.Банк.Код
		|	КОНЕЦ КАК БИК
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчетаОрганизаций
		|ГДЕ
		|	НЕ БанковскиеСчетаОрганизаций.ПометкаУдаления
		|	И БанковскиеСчетаОрганизаций.Владелец ССЫЛКА Справочник.Организации";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Загрузка банковской выписки'", Метаданные.ОсновнойЯзык.КодЯзыка);
	
КонецФункции

Процедура ЗафиксироватьОшибкуЗагрузки(ДокументКЗагрузке, ПредставлениеОшибки, ПодробноеПредставлениеОшибки, Источник)
	
	ДокументКЗагрузке.ЕстьОшибки = Истина;
	
	Если ПустаяСтрока(ДокументКЗагрузке.ПредставлениеОшибок) Тогда
		ДокументКЗагрузке.ПредставлениеОшибок = ПредставлениеОшибки;
	Иначе
		ДокументКЗагрузке.ПредставлениеОшибок = ДокументКЗагрузке.ПредставлениеОшибок
			+ Символы.ПС+ ПредставлениеОшибки;
	КонецЕсли;
		
	Если ПустаяСтрока(ДокументКЗагрузке["ПредставлениеОшибок" + Источник]) Тогда
		ДокументКЗагрузке["ПредставлениеОшибок" + Источник] = ПодробноеПредставлениеОшибки;
	Иначе
		ДокументКЗагрузке["ПредставлениеОшибок" + Источник] = ДокументКЗагрузке["ПредставлениеОшибок" + Источник]
			+ Символы.ПС + ПодробноеПредставлениеОшибки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКонтрагентаВСтрокахПоПолямПоиска(ДокументыКЗагрузке, ТекущиеДанные, ОбновлятьЗависимыеДанные = Ложь) Экспорт
	
	СтрокиКонтрагента = СтрокиПоКонтрагенту(ДокументыКЗагрузке, ТекущиеДанные);
	Для Каждого СтрокаКонтрагента Из СтрокиКонтрагента Цикл
		
		Если СтрокаКонтрагента = ТекущиеДанные Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаКонтрагента.Контрагент = ТекущиеДанные.Контрагент;
		Если СтрокаКонтрагента.НомерСчетаКонтрагента = ТекущиеДанные.НомерСчетаКонтрагента Тогда
			СтрокаКонтрагента.БанковскийСчетКонтрагента = ТекущиеДанные.БанковскийСчетКонтрагента;
		Иначе
			СтрокаКонтрагента.БанковскийСчетКонтрагента = Неопределено;
		КонецЕсли;
		Если ОбновлятьЗависимыеДанные Тогда
			ОбновитьЗависимыеДанные(СтрокаКонтрагента, "Контрагент");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СтрокиПоКонтрагенту(ДокументыКЗагрузке, ТекущиеДанные)
	
	СтруктураПоиска = Новый Структура;
	Если ЗначениеЗаполнено(ТекущиеДанные.ИННКонтрагента) Тогда
		СтруктураПоиска.Вставить("ИННКонтрагента", ТекущиеДанные.ИННКонтрагента);
		Если ЗначениеЗаполнено(ТекущиеДанные.КППКонтрагента) Тогда
			СтруктураПоиска.Вставить("КППКонтрагента", ТекущиеДанные.КППКонтрагента);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.НаименованиеКонтрагента) Тогда
		СтруктураПоиска.Вставить("НаименованиеКонтрагента", ТекущиеДанные.НаименованиеКонтрагента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПоиска) Тогда
		СтрокиКонтрагента = ДокументыКЗагрузке.НайтиСтроки(СтруктураПоиска);
	Иначе
		СтрокиКонтрагента = Новый Массив;
	КонецЕсли;
	
	Возврат СтрокиКонтрагента;
	
КонецФункции

Процедура ЗаполнитьБанковскийСчетКонтрагентаВСтрокахПоПолямПоиска(ДокументыКЗагрузке, ТекущиеДанные) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.НомерСчетаКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Контрагент", ТекущиеДанные.Контрагент);
	СтруктураПоиска.Вставить("НомерСчетаКонтрагента", ТекущиеДанные.НомерСчетаКонтрагента);
	
	СтрокиКонтрагента = ДокументыКЗагрузке.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаКонтрагента Из СтрокиКонтрагента Цикл
		Если СтрокаКонтрагента = ТекущиеДанные Тогда
			Продолжить;
		КонецЕсли;
		СтрокаКонтрагента.БанковскийСчетКонтрагента = ТекущиеДанные.БанковскийСчетКонтрагента;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьЗависимыеДанные(ТекущиеДанные, Источник) Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник = "Контрагент" Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
			ПараметрыПлатежа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущиеДанные.Контрагент, "Покупатель, Поставщик");
			ПараметрыПлатежа.Вставить("ИсходящийПлатеж", ТекущиеДанные.ИсходящийПлатеж);
			
			// Обновим хозяйственную операцию.
			ДоступныеОперации = ДенежныеСредстваКлиентСервер.ДоступныеОперацииРегистрацииБезналичнойОплаты(ПараметрыПлатежа);
			Если ЗначениеЗаполнено(ТекущиеДанные.ХозяйственнаяОперация)
				И ДоступныеОперации.Найти(ТекущиеДанные.ХозяйственнаяОперация) = Неопределено
				ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.ХозяйственнаяОперация) Тогда
				ТекущиеДанные.ХозяйственнаяОперация = ДоступныеОперации[0];
				ОбновитьЗависимыеДанные(ТекущиеДанные, "ХозяйственнаяОперация");
			КонецЕсли;
			
			// Обновим документ расчетов.
			Если ЗначениеЗаполнено(ТекущиеДанные.ДокументРасчетовСКонтрагентом)
				И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ДокументРасчетовСКонтрагентом, "Контрагент") = ТекущиеДанные.Контрагент Тогда
				ТекущиеДанные.ДокументРасчетовСКонтрагентом = Неопределено;
			КонецЕсли;
		Иначе
			ТекущиеДанные.КонтрагентПокупатель = Ложь;
			ТекущиеДанные.КонтрагентПоставщик  = Ложь;
			ТекущиеДанные.ДокументРасчетовСКонтрагентом = Неопределено;
		КонецЕсли;
		
	ИначеЕсли Источник = "ХозяйственнаяОперация" Тогда
		
		// Обновим статью ДДС при необходимости.
		Если ЗначениеЗаполнено(ТекущиеДанные.ХозяйственнаяОперация) Тогда
			Если НЕ (ЗначениеЗаполнено(ТекущиеДанные.СтатьяДвиженияДенежныхСредств)
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.СтатьяДвиженияДенежныхСредств, "ХозяйственнаяОперация") = ТекущиеДанные.ХозяйственнаяОперация) Тогда
				ТекущиеДанные.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ТекущиеДанные.ХозяйственнаяОперация);
			КонецЕсли;
		ИначеЕсли ТекущиеДанные.Загружать Тогда
			ТекущиеДанные.Загружать = Ложь;
		КонецЕсли;
		
		// Обновим документ расчетов.
		Если ЗначениеЗаполнено(ТекущиеДанные.ДокументРасчетовСКонтрагентом) Тогда
			ДоступныеТипы = ДенежныеСредстваКлиентСервер.ДоступныеТипыДокументовРасчета(ТекущиеДанные.ХозяйственнаяОперация,
				Тип("ДокументСсылка.РегистрацияБезналичнойОплаты"));
			Если ДоступныеТипы.Найти(ТипЗнч(ТекущиеДанные.ДокументРасчетовСКонтрагентом)) = Неопределено Тогда
				ТекущиеДанные.ДокументРасчетовСКонтрагентом = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Источник = "ДокументРасчетовСКонтрагентом" Тогда
		
		// Заполним Магазин из документа расчетов.
		Если ЗначениеЗаполнено(ТекущиеДанные.ДокументРасчетовСКонтрагентом) Тогда
			МагазинДокументаРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ДокументРасчетовСКонтрагентом, "Магазин");
			Если НЕ ТекущиеДанные.Магазин = МагазинДокументаРасчетов Тогда
				ТекущиеДанные.Магазин = МагазинДокументаРасчетов;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПредставлениеДокумента(Ссылка, Дата, Номер)
	Возврат
		?(ЗначениеЗаполнено(Номер), Номер, "")
		+ ?(ЗначениеЗаполнено(Дата), " " + НСтр("ru='от'") + " " + Формат(Дата,"ДЛФ=D"), "");
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли