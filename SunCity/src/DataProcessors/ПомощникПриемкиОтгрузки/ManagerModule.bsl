
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//	ДокументРаспоряжение - ДокументСсылка - документ, для которого нужно сформировать параметры проверки.
//	ПараметрыРаспределения - Структура - настройки обработки приемки/отгрузки.
//
// Возвращаемое значение:
//	Структура - Состав полей определяется требованиями функции
//	            ОбработкаТабличнойЧастиСервер.ЗаполнитьСтатусыУказанияСерий.
//
Функция ПараметрыУказанияСерий(ДокументРаспоряжение, ПараметрыРаспределения)Экспорт
	
	ПоляСвязи = Новый Массив;
	
	ПараметрыУказанияСерий = Новый Структура;
	ИспользованиеСерийСклад = Ложь;
	
	ИспользованиеСерийСклад = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	
	ПараметрыУказанияСерий.Вставить("ИспользоватьСерииНоменклатуры", ИспользованиеСерийСклад);
	ПараметрыУказанияСерий.Вставить("ПоляСвязи",ПоляСвязи);
	
	Если ТипЗнч(ДокументРаспоряжение) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		ПараметрыУказанияСерий.Вставить("ЭтоНакладная", Истина);
		Если ПараметрыРаспределения.ОрдернаяСхема Тогда
			ПараметрыУказанияСерий.Вставить("ЭтоОрдер", Истина);
		КонецЕсли;
	Иначе
		Если ПараметрыРаспределения.ОрдернаяСхема Тогда
			ПараметрыУказанияСерий.Вставить("ЭтоОрдер", Истина);
		Иначе
			ПараметрыУказанияСерий.Вставить("ЭтоОбработка", Истина);
		КонецЕсли;
	КонецЕсли;
	
	СкладскиеОперации = Новый Массив;
	
	Если ТипЗнч(ДокументРаспоряжение) = Тип("ДокументСсылка.ПоступлениеТоваров")
		Или ТипЗнч(ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПриемкаОтПоставщика);
		
	ИначеЕсли ТипЗнч(ДокументРаспоряжение) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаПоВозвратуПоставщику);
		
	ИначеЕсли ТипЗнч(ДокументРаспоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров")
		Или ТипЗнч(ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		
		Если ПараметрыРаспределения.Операция = "Отгрузка" Тогда
			СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению);
		Иначе
			СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПриемкаПоПеремещению);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументРаспоряжение) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
		
		СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаКлиенту);
		
	ИначеЕсли ТипЗнч(ДокументРаспоряжение) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПриемкаПоВозвратуОтКлиента);
		
	КонецЕсли;
	
	ПараметрыУказанияСерий.Вставить("СкладскиеОперации", СкладскиеОперации);
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Сформировать печатные формы объектов.
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать;
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит сформированные табличные документы и дополнительную информацию;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
//  ПараметрыВывода - Структура - параметры, связанные с выводом табличных документов:
//   * ПараметрыОтправки - Структура - для заполнения письма при отправке печатной формы по электронной почте.
//                    см. РаботаСПочтовымиСообщениямиКлиент.РаботаСПочтовымиСообщениямиКлиент.ПараметрыОтправкиПисьма.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОписьНоменклатуры") Тогда
	
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ОписьНоменклатуры",
				ПараметрыПечати.Представление,
				ПечатьОписиНоменклатуры(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Печать.
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати;
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ к печати.
//
Функция ПечатьОписиНоменклатуры(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	КолонкаКодов       = ФормированиеПечатныхФормСервер.ИмяДополнительнойКолонки();
	ВыводитьКоды       = ЗначениеЗаполнено(КолонкаКодов);
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	
	СтруктураПечати = Новый Структура;
	СтруктураПечати.Вставить("ИмяРеквизита1", "Магазин");
	СтруктураПечати.Вставить("ИмяРеквизита2", "Склад");
	СтруктураПечати.Вставить("КоличествоРеквизитов", 2);
	СтруктураПечати.Вставить("ВыводитьКоды", ВыводитьКоды);
	СтруктураПечати.Вставить("КолонкаКодов", КолонкаКодов);
	
	ПервыйДокумент = Истина;
	Если ПараметрыПечати.Свойство("МассивПараметров") Тогда
		
		Для Каждого СтрокаПараметров Из ПараметрыПечати.МассивПараметров Цикл
			
			СтруктураПечати.Вставить("Реквизит1", СтрокаПараметров.Магазин);
			СтруктураПечати.Вставить("Реквизит2", СтрокаПараметров.Склад);
			СтруктураПечати.Вставить("Документ", СтрокаПараметров.Распоряжение);

			УправлениеПечатьюРТ.ПечатьОписиНоменклатуры(ТабличныйДокумент, ОбъектыПечати, СтруктураПечати, ПервыйДокумент, СтрокаПараметров);
			
			ПервыйДокумент = Ложь;
			
		КонецЦикла;
		
	Иначе
	
		СтруктураПечати.Вставить("Реквизит1", ПараметрыПечати.Магазин);
		СтруктураПечати.Вставить("Реквизит2", ПараметрыПечати.Склад);
		СтруктураПечати.Вставить("Документ", ПараметрыПечати.Распоряжение);
		
		УправлениеПечатьюРТ.ПечатьОписиНоменклатуры(ТабличныйДокумент, ОбъектыПечати, СтруктураПечати, ПервыйДокумент, ПараметрыПечати);
		
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#Область ПроцедурыИФункцииВыполненияРаспределения

Функция ВыполнитьРаспределениеВФоне(Параметры, АдресРезультата) Экспорт
	
	ДокументРаспоряжение = Параметры.ДокументРаспоряжение;
	Магазин = Параметры.Магазин;
	ОсновнойСклад = Параметры.ОсновнойСклад;
	Ответственный = Параметры.Ответственный;
	
	ПараметрыРаспределения = Параметры.ПараметрыРаспределения;
	СкладыРаспределения = Параметры.СкладыРаспределения.Получить();
	
	ТоварыФакт = Параметры.ТоварыФакт.Получить();
	СерийныеНомераФакт = Параметры.СерийныеНомераФакт.Получить();
	СерииФакт = Параметры.СерииФакт.Получить();
	
	ТоварыПеремещение = Параметры.ТоварыПеремещение.Получить();
	СерийныеНомераПеремещение = Параметры.СерийныеНомераПеремещение.Получить();
	
	МассивОбъектовДляЗаписи = Новый Массив();
	
	Если ПараметрыРаспределения.ОрдернаяСхема И Не ПараметрыРаспределения.СборТоваровДляОтгрузки Тогда
		
		Если ПараметрыРаспределения.Операция = "Приемка" Тогда
			ОрдерОбъект = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
		Иначе // Отгрузка
			ОрдерОбъект = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
		КонецЕсли;
		
		ЗаполнитьОрдер(ОрдерОбъект, Магазин, ОсновнойСклад, ДокументРаспоряжение, Ответственный, ТоварыФакт, СерийныеНомераФакт, СерииФакт);
		
		МассивОбъектовДляЗаписи.Добавить(ОрдерОбъект);
		
	КонецЕсли;
	
	Для Каждого СкладРаспределения Из СкладыРаспределения Цикл
		
		Если СкладРаспределения.Склад = ОсновнойСклад Тогда
			Продолжить;
		КонецЕсли;
		
		ОрдерОбъект = Документы.ОрдерНаПеремещениеТоваров.СоздатьДокумент();
		
		ЗаполнитьОрдерНаПеремещение(ОрдерОбъект, ПараметрыРаспределения, Магазин, СкладРаспределения.Склад, ОсновнойСклад, ДокументРаспоряжение, Ответственный, ТоварыПеремещение, СерийныеНомераПеремещение, ТоварыФакт);
		
		Если Не ОрдерОбъект.Товары.Количество() = 0 Тогда
			МассивОбъектовДляЗаписи.Добавить(ОрдерОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураРезультата = Новый Структура();
	СтруктураРезультата.Вставить("Результат", Истина);
	СтруктураРезультата.Вставить("ТекстОшибки", "");
	
	Для Каждого ОбъектДляЗаписи Из МассивОбъектовДляЗаписи Цикл
		
		НачатьТранзакцию();
		
		Попытка
			ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Проведение);
			ЗафиксироватьТранзакцию();
		Исключение
			СтруктураРезультата.Результат = Ложь;
			ОтменитьТранзакцию();
			Если Не СтруктураРезультата.ТекстОшибки = "" Тогда
				СтруктураРезультата.ТекстОшибки = СтруктураРезультата.ТекстОшибки + Символы.ПС;
			КонецЕсли;
			СтруктураРезультата.ТекстОшибки = СтруктураРезультата.ТекстОшибки + ОписаниеОшибки();
			МассивСообщенийПользователю = ПолучитьСообщенияПользователю(Истина);
			Для Каждого СообщениеПользователю Из МассивСообщенийПользователю Цикл
				СтруктураРезультата.ТекстОшибки = СтруктураРезультата.ТекстОшибки + Символы.ПС + СообщениеПользователю.Текст;
			КонецЦикла;
			Прервать;
		КонецПопытки;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресРезультата);
	
КонецФункции

Процедура ЗаполнитьОрдер(ОрдерОбъект, Магазин, Склад, ДокументРаспоряжение, Ответственный, ТоварыФакт, СерийныеНомераФакт, СерииФакт)
	
	ОрдерОбъект.Дата = ТекущаяДатаСеанса();
	
	ОрдерОбъект.Магазин = Магазин;
	ОрдерОбъект.Склад = Склад;
	
	Если ТипЗнч(ДокументРаспоряжение) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		ЗаказПоставщику = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРаспоряжение, "ЗаказПоставщику");
		Если ЗначениеЗаполнено(ЗаказПоставщику) Тогда
			ОрдерОбъект.ДокументОснование = ЗаказПоставщику;
		Иначе
			ОрдерОбъект.ДокументОснование = ДокументРаспоряжение;
		КонецЕсли;
	Иначе
		ОрдерОбъект.ДокументОснование = ДокументРаспоряжение;
	КонецЕсли;
	
	ОрдерОбъект.Ответственный = Ответственный;
	
	Для Каждого СтрокаФакт Из ТоварыФакт Цикл
		
		Если СтрокаФакт.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОрдерОбъект.Товары.Добавить(), СтрокаФакт);
		
		Если СтрокаФакт.ИспользоватьСерийныеНомера Тогда
			СтрокиСерийныеНомера = СерийныеНомераФакт.НайтиСтроки(Новый Структура("КлючСвязиСерийныхНомеров", СтрокаФакт.КлючСвязиСерийныхНомеров));
			Для Каждого СтрокаСерийныеНомера Из СтрокиСерийныеНомера Цикл
				ЗаполнитьЗначенияСвойств(ОрдерОбъект.СерийныеНомера.Добавить(), СтрокаСерийныеНомера);
			КонецЦикла;
		КонецЕсли;
		
		СтруктураПоискаСерий = Новый Структура("Номенклатура, Характеристика");
		ЗаполнитьЗначенияСвойств(СтруктураПоискаСерий, СтрокаФакт);
		СтрокиСерии = СерииФакт.НайтиСтроки(СтруктураПоискаСерий);
		Для Каждого СтрокаСерии Из СтрокиСерии Цикл
			ЗаполнитьЗначенияСвойств(ОрдерОбъект.Серии.Добавить(), СтрокаСерии);
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("НеобходимоОбработатьВсюТЧ");
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , ОрдерОбъект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
КонецПроцедуры

Процедура ЗаполнитьОрдерНаПеремещение(ОрдерОбъект, ПараметрыРаспределения, Магазин, Склад, ОсновнойСклад, ДокументРаспоряжение, Ответственный, ТоварыПеремещение, СерийныеНомераПеремещение, ТоварыФакт)
	
	ОрдерОбъект.Дата = ТекущаяДатаСеанса();
	
	ОрдерОбъект.Магазин = Магазин;
	Если ПараметрыРаспределения.Операция = "Приемка" Тогда
		ОрдерОбъект.СкладОтправитель = ОсновнойСклад;
		ОрдерОбъект.СкладПолучатель = Склад;
	Иначе // Отгрузка
		ОрдерОбъект.СкладОтправитель = Склад;
		ОрдерОбъект.СкладПолучатель = ОсновнойСклад;
	КонецЕсли;
	
	ОрдерОбъект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОрдерОбъект.СкладПолучатель, "Организация");
	
	ОрдерОбъект.ДокументОснование = ДокументРаспоряжение;
	ОрдерОбъект.ЗаказПокупателя = ДокументРаспоряжение;
	ОрдерОбъект.Ответственный = Ответственный;
	
	СтрокиПеремещение = ТоварыПеремещение.НайтиСтроки(Новый Структура("Склад", Склад));
	Для Каждого СтрокаПеремещения Из СтрокиПеремещение Цикл
		Если Не СтрокаПеремещения.Количество = 0 Тогда
			
			НоваяСтрокаТовары = ОрдерОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаПеремещения);
			
			СтруктураПоискаЦены = Новый Структура("Номенклатура, Характеристика, Упаковка");
			ЗаполнитьЗначенияСвойств(СтруктураПоискаЦены, НоваяСтрокаТовары);
			СтрокиФакт = ТоварыФакт.НайтиСтроки(СтруктураПоискаЦены);
			Если Не СтрокиФакт.Количество() = 0 Тогда
				НоваяСтрокаТовары.Цена = СтрокиФакт[0].Цена;
			КонецЕсли;
			
			Если СтрокаПеремещения.ИспользоватьСерийныеНомера Тогда
				СтрокиСерийныеНомера = СерийныеНомераПеремещение.НайтиСтроки(Новый Структура("КлючСвязиСерийныхНомеров", СтрокаПеремещения.КлючСвязиСерийныхНомеров));
				Для Каждого СтрокаСерийныеНомера Из СтрокиСерийныеНомера Цикл
					НоваяСтрокаСерийныеНомера = ОрдерОбъект.СерийныеНомера.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаСерийныеНомера, СтрокаСерийныеНомера);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("НеобходимоОбработатьВсюТЧ");
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , ОрдерОбъект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
КонецПроцедуры

Функция ОформитьРасхожденияВФоне(Параметры, АдресРезультата) Экспорт
	
	ДокументРаспоряжение = Параметры.ДокументРаспоряжение;
	Магазин = Параметры.Магазин;
	ОсновнойСклад = Параметры.ОсновнойСклад;
	Ответственный = Параметры.Ответственный;
	
	ПараметрыРаспределения = Параметры.ПараметрыРаспределения;
	СкладыРаспределения = Параметры.СкладыРаспределения.Получить();
	
	ТоварыФакт = Параметры.ТоварыФакт.Получить();
	СерийныеНомераФакт = Параметры.СерийныеНомераФакт.Получить();
	СерииФакт = Параметры.СерииФакт.Получить();
	
	ТоварыПеремещение = Параметры.ТоварыПеремещение.Получить();
	СерийныеНомераПеремещение = Параметры.СерийныеНомераПеремещение.Получить();
	
	Если ТипЗнч(ДокументРаспоряжение) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		
		ДокументОбъект = ДокументРаспоряжение.ПолучитьОбъект();
		ЗаполнитьРасхожденияВПоступлении(ДокументОбъект, ПараметрыРаспределения, ТоварыФакт, СерийныеНомераФакт, СерииФакт);
		
	ИначеЕсли ТипЗнч(ДокументРаспоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		ДокументОбъект = Документы.АктОРасхожденияхПриПриемкеТоваров.СоздатьДокумент();
		ЗаполнитьАктРасхождений(ДокументОбъект, ДокументРаспоряжение, ТоварыФакт);
		
	КонецЕсли;
	
	СтруктураРезультата = Новый Структура();
	СтруктураРезультата.Вставить("Результат", Истина);
	СтруктураРезультата.Вставить("ТекстОшибки", "");
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Документ.ПоступлениеТоваров");
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Документ.ПеремещениеТоваров");
		БлокировкаДанных.Заблокировать();
		УстановитьПривилегированныйРежим(Истина);
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		УстановитьПривилегированныйРежим(Ложь);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		СтруктураРезультата.Результат = Ложь;
		СтруктураРезультата.ТекстОшибки = СтруктураРезультата.ТекстОшибки + Символы.ПС + ОписаниеОшибки();
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецФункции

Процедура ЗаполнитьРасхожденияВПоступлении(ДокументОбъект, ПараметрыРаспределения, ТоварыФакт, СерийныеНомераФакт, СерииФакт)
	
	ДокументОбъект.ЕстьРасхождения = Истина;
	
	Если ДокументОбъект.ТоварыПоДаннымПоставщика.Количество() = 0 Тогда
		ДокументОбъект.ТоварыПоДаннымПоставщика.Загрузить(ДокументОбъект.Товары.Выгрузить());
	КонецЕсли;
	
	Если ПараметрыРаспределения.ОрдернаяСхема Тогда
		
		ДокументОбъект.ЗаполнитьТоварыПоФактическойПриемке();
		
	Иначе
		
		Для Каждого СтрокаФакт Из ТоварыФакт Цикл
			
			СтруктураПоискаФакт = Новый Структура("Номенклатура, Характеристика, Упаковка");
			ЗаполнитьЗначенияСвойств(СтруктураПоискаФакт, СтрокаФакт);
			СтрокиФакт = ДокументОбъект.Товары.НайтиСтроки(СтруктураПоискаФакт);
			
			Если СтрокиФакт.Количество() = 0 Тогда
				ТекущаяСтрокаДокумента = ДокументОбъект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(ТекущаяСтрокаДокумента, СтрокаФакт);
			Иначе
				Если СтрокаФакт.Количество = 0 Тогда
					ДокументОбъект.Товары.Удалить(СтрокиФакт[0]);
				Иначе
					ТекущаяСтрокаДокумента = СтрокиФакт[0];
					ЗаполнитьЗначенияСвойств(ТекущаяСтрокаДокумента, СтрокаФакт, "Количество, КоличествоУпаковок");
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаФакт.ИспользоватьСерийныеНомера Тогда
				НовыеСН = СерийныеНомераФакт.НайтиСтроки(Новый Структура("КлючСвязиСерийныхНомеров", СтрокаФакт.КлючСвязиСерийныхНомеров));
				СтарыеСН = ДокументОбъект.СерийныеНомера.НайтиСтроки(Новый Структура("КлючСвязиСерийныхНомеров", СтрокаФакт.КлючСвязиСерийныхНомеров));
				Для Каждого СтарыйСН Из СтарыеСН Цикл
					ДокументОбъект.СерийныеНомера.Удалить(СтарыйСН);
				КонецЦикла;
				Для Каждого НовыйСН Из НовыеСН Цикл
					ЗаполнитьЗначенияСвойств(ДокументОбъект.СерийныеНомера.Добавить(), НовыйСН);
				КонецЦикла;
			КонецЕсли;
			
			СтруктураПоискаСерий = Новый Структура("Номенклатура, Характеристика");
			ЗаполнитьЗначенияСвойств(СтруктураПоискаСерий, СтрокаФакт);
			НовыеСерии = СерииФакт.НайтиСтроки(СтруктураПоискаСерий);
			СтарыеСерия = ДокументОбъект.Серии.НайтиСтроки(СтруктураПоискаСерий);
			Для Каждого СтараяСерия Из СтарыеСерия Цикл
				ДокументОбъект.Серии.Удалить(СтараяСерия);
			КонецЦикла;
			Для Каждого НоваяСерия Из НовыеСерии Цикл
				ЗаполнитьЗначенияСвойств(ДокументОбъект.Серии.Добавить(), НоваяСерия);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДСУчитыватьНДС(ДокументОбъект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВТЧ(ДокументОбъект));
	СтруктураДействий.Вставить("НеобходимоОбработатьВсюТЧ");
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , ДокументОбъект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
КонецПроцедуры

Процедура ЗаполнитьАктРасхождений(ДокументОбъект, ДокументРаспоряжение, ТоварыФакт)
	
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	ДокументОбъект.Заполнить(ДокументРаспоряжение);
	
	Для Каждого СтрокаФакт Из ТоварыФакт Цикл
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Номенклатура", СтрокаФакт.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаФакт.Характеристика);
		
		СтрокиАкт = ДокументОбъект.Товары.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиАкт.Количество() = 0 Тогда
			НоваяСтрокаАкт = ДокументОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаАкт, СтрокаФакт);
		Иначе
			СтрокиАкт[0].Количество = СтрокаФакт.Количество;
			СтрокиАкт[0].КоличествоУпаковок = СтрокаФакт.КоличествоУпаковок;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
