#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует незаполненную структуру результатов.
//
// Возвращаемое значение:
//  Структура - струкутра результата.
//
Функция ПолучитьПустуюСтруктуруРезультата() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("ТаблицаТоваров" , Неопределено);
	Структура.Вставить("СоответствиеПолейСКДКолонкамТаблицыТоваров", Новый Соответствие);
	
	Возврат Структура;
	
КонецФункции

// Формирует незаполненную структуру настроек печати.
//
// Возвращаемое значение:
//  Структура - струкутра настроек.
//
Функция ПолучитьПустуюСтруктуруНастроек() Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИсходныеДанные"     , Неопределено); // Таблица с произвольными данными.
	СтруктураНастроек.Вставить("ОбязательныеПоля"   , Новый Массив); //
	СтруктураНастроек.Вставить("СоответствиеШаблоновИСтруктурыШаблонов" , Новый Соответствие); //
	СтруктураНастроек.Вставить("ПараметрыДанных"    , Новый Структура);
	СтруктураНастроек.Вставить("КомпоновщикНастроек", Неопределено); // Отбор
	СтруктураНастроек.Вставить("ИмяМакетаСхемыКомпоновкиДанных" , Неопределено);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Сворачивает таблицу значений по реквизиту, имя которого передается вторым параметром.
//
// Параметры:
//  ТаблицаРеквизитыДокументов - ТаблицаЗначений - таблица реквизитов.
//  ИмяРеквизита - Строка - имя реквизита строкой.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица значений по реквизиту.
//
Функция СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, ИмяРеквизита) Экспорт
	
	Таблица = ТаблицаРеквизитыДокументов.Скопировать();
	Таблица.Свернуть(ИмяРеквизита);
	Возврат Таблица;
	
КонецФункции

// Подготавливает структуру данных, необходимую для печати ценников и этикеток.
//
// Параметры:
//  СтруктураНастроек - Структура - структура настроек печати.
//  СтрукутраШаблона - Структура -структура шаблона.
//
// Возвращаемое значение:
//  Структура - данные, необходимые для печати этикеток и ценников.
//
Функция ПодготовитьСтруктуруДанных(СтруктураНастроек, СтруктураШаблона = Неопределено, Режим = "") Экспорт
	
	СхемаКомпоновкиДанных = Неопределено;
	
	Если СтруктураШаблона = Неопределено Тогда
		ТаблицаИсходныеДанные = СтруктураНастроек.ИсходныеДанные;
	Иначе
		СтруктураОтбора = Новый Структура;
		ИмяКолонки = СтрЗаменить(СтруктураШаблона.ИмяКолонкиШаблон, "ДляПечати", "");
		СтруктураОтбора.Вставить(ИмяКолонки, СтруктураШаблона.Шаблон);
		ТаблицаИсходныеДанные = СтруктураНастроек.ИсходныеДанные.Скопировать(СтруктураОтбора);
		ХранилищеСКД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураШаблона.Шаблон, "СхемаКомпоновкиДанных");
		СхемаКомпоновкиДанных = ХранилищеСКД.Получить();
	КонецЕсли;
	
	СтруктураРезультата = ПолучитьПустуюСтруктуруРезультата();
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет(СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных);
	КонецЕсли;
	
	НаборДанныхВСКДЗапрос = ТипЗнч(СхемаКомпоновкиДанных.НаборыДанных.НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных");
	
	Если НаборДанныхВСКДЗапрос Тогда
		
		ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос;
		
		ПечатьЭтикетокИСМПРТ.ПриПодготовкеСтруктурыДанныхНабора(Режим, СхемаКомпоновкиДанных, ТекстЗапроса);
		
		СхемаКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос = ТекстЗапроса;
	КонецЕсли;
	
	// Подготовка компоновщика макета компоновки данных.
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Компоновщик.Настройки.Отбор.Элементы.Очистить();
	
	// Отбор компоновщика настроек.
	Если СтруктураНастроек.КомпоновщикНастроек <> Неопределено Тогда
		// Удаление некорректных отборов.
		Количество = СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество();
		Для Индекс = 1 По Количество Цикл
			ЭлементОтбора = СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.Элементы[Количество - Индекс];
			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
				Если СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
					СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;		
		ОбщегоНазначенияРТКлиентСервер.СкопироватьЭлементы(Компоновщик.Настройки.Отбор, СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор);
		
	КонецЕсли;
	
	// Выбранные поля компоновщика настроек.
	Для Каждого ОбязательноеПоле Из СтруктураНастроек.ОбязательныеПоля Цикл
		ПолеСКД = КомпоновкаДанныхСервер.НайтиПолеСКДПоПолномуИмени(Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы, ОбязательноеПоле);
		Если ПолеСКД <> Неопределено Тогда
			ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = ПолеСКД.Поле;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение параметров.
	Для Каждого ПараметрДанных Из СтруктураНастроек.ПараметрыДанных Цикл
		Если ПараметрДанных.Ключ = "Склад" Тогда // Если склад не заполнен - не используем параметр.
			УстановитьЗначениеПараметраСКД(Компоновщик, ПараметрДанных.Ключ, ПараметрДанных.Значение, Ложь);
		Иначе
			УстановитьЗначениеПараметраСКД(Компоновщик, ПараметрДанных.Ключ, ПараметрДанных.Значение);
		КонецЕсли;
	КонецЦикла;
	УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущееВремя", ТекущаяДатаСеанса());
	УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	// Компоновка макета компоновки данных.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	
	Для каждого Поле Из МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Поля Цикл
		СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Вставить(Справочники.ХранилищеШаблонов.ИмяПоляВШаблоне(Поле.ПутьКДанным), Поле.Имя);
	КонецЦикла;
	
	
	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос);
	
	// Заполнение параметров с полей отбора компоновщика настроек формы обработки.
	Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	
	// Подмена запроса для расчета цен...
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда

		ЗаменяемыйТекст = "ЦеныНоменклатурыСрезПоследних.Цена";
		ТекстЗамены = " ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент, 1) * ЕСТЬNULL(ИсходныеДанныеПоследнийЗапрос.Упаковка.Коэффициент, 1) КАК Число(15,2))";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйТекст, ТекстЗамены);
		
	КонецЕсли;
		
	// Подмена запроса при печати этикеток...
	Если СтруктураНастроек.ИсходныеДанные = Неопределено Тогда
		Если СтруктураНастроек.Свойство("ТекстЗаменяемойТаблицы")
			И СтруктураНастроек.Свойство("ТекстТаблицыДляЗамены") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
										СтруктураНастроек.ТекстЗаменяемойТаблицы,
										СтруктураНастроек.ТекстТаблицыДляЗамены);
		КонецЕсли;
		
	ИначеЕсли Режим = "ЭтикеткаКодМаркировкиИСМП" Тогда
		
		ПечатьЭтикетокИСМПРТ.ПриПодготовкеСтруктурыДанныхДляПечати(СтруктураНастроек, Режим, Запрос, СтруктураНастроек.ИсходныеДанные);
		
	Иначе
		
		Если СтруктураНастроек.Свойство("ТекстВременнойТаблицы") Тогда
			ТекстВременнойТаблицы = СтруктураНастроек.ТекстВременнойТаблицы;
		Иначе
			ТекстВременнойТаблицыСовместимостьССохраненнымиЭтикетками =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
			|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
			|		ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК Упаковка,
			|		0 КАК Количество,
			|		ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация)";
			ТекстВременнойТаблицы =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
			|		ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка) КАК Справка2,
			|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
			|		ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК Упаковка,
			|		0 КАК Количество,
			|		ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация)";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстВременнойТаблицыСовместимостьССохраненнымиЭтикетками, "&Таблица");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстВременнойТаблицы, "&Таблица");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """КоличествоЦенников""", "ИсходныеДанные.КоличествоЦенников");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """КоличествоЭтикеток""", "ИсходныеДанные.КоличествоЭтикеток");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШаблонЦенника""", "ИсходныеДанные.ШаблонЦенника");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШаблонЭтикетки""", "ИсходныеДанные.ШаблонЭтикетки");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """Организация""", "ИсходныеДанные.Организация");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """Штрихкод""", "ИсходныеДанные.Штрихкод");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШтрихАвтопроверки""", "ИсходныеДанные.ШтрихАвтопроверки");
		
		Если ТаблицаИсходныеДанные.Колонки.Найти("Справка2") = Неопределено Тогда
			ТаблицаИсходныеДанные.Колонки.Добавить("Справка2", Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Таблица", ТаблицаИсходныеДанные);
		
	КонецЕсли;
	
	СтруктураРезультата.ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Подготавливает структуру данных, необходимую для печати ценников и этикеток.
//
// Параметры:
//  СтруктураНастроек - Структура - структура настроек печати.
//  СтрукутраШаблона - Структура -структура шаблона.
//
// Возвращаемое значение:
//  Структура - данные, необходимые для печати этикеток и ценников.
//
Функция ПодготовитьСтруктуруДанныхБПО(СтруктураНастроек, СтруктураШаблона = Неопределено, Режим = "") Экспорт
	
	СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("ПоляШаблона");
	
	Если СтруктураШаблона = Неопределено Тогда
		ТаблицаИсходныеДанные = СтруктураНастроек.ИсходныеДанные;
	Иначе
		СтруктураОтбора = Новый Структура;
		ИмяКолонки = СтруктураШаблона.ИмяКолонкиШаблон;
		СтруктураОтбора.Вставить(ИмяКолонки, СтруктураШаблона.Шаблон);
		ТаблицаИсходныеДанные = СтруктураНастроек.ИсходныеДанные.Скопировать(СтруктураОтбора);
	КонецЕсли;
	
	СтруктураРезультата = ПолучитьПустуюСтруктуруРезультата();
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет(СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных);
	КонецЕсли;
	
	НаборДанныхВСКДЗапрос = ТипЗнч(СхемаКомпоновкиДанных.НаборыДанных.НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных");
	
	Если НаборДанныхВСКДЗапрос Тогда
		
		ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос;
		
		ПечатьЭтикетокИСМПРТ.ПриПодготовкеСтруктурыДанныхНабора(Режим, СхемаКомпоновкиДанных, ТекстЗапроса);
		
		СхемаКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос = ТекстЗапроса;
	КонецЕсли;
	
	// Подготовка компоновщика макета компоновки данных.
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Компоновщик.Настройки.Отбор.Элементы.Очистить();
	
	// Отбор компоновщика настроек.
	Если СтруктураНастроек.КомпоновщикНастроек <> Неопределено Тогда
		// Удаление некорректных отборов.
		Количество = СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество();
		Для Индекс = 1 По Количество Цикл
			ЭлементОтбора = СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.Элементы[Количество - Индекс];
			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
				Если СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
					СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;		
		ОбщегоНазначенияРТКлиентСервер.СкопироватьЭлементы(Компоновщик.Настройки.Отбор, СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор);
		
	КонецЕсли;
	
	// Выбранные поля компоновщика настроек.
	Для Каждого ОбязательноеПоле Из СтруктураНастроек.ОбязательныеПоля Цикл
		Если ТипЗнч(ОбязательноеПоле) = Тип("Структура") Тогда
			ПолеСКД = КомпоновкаДанныхСервер.НайтиПолеСКДПоПолномуИмени(Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы, ОбязательноеПоле.Значение);
			Если ПолеСКД <> Неопределено Тогда
				ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПоле.Поле = ПолеСКД.Поле;
				ВыбранноеПоле.Заголовок = ОбязательноеПоле.Наименование;
			КонецЕсли;
		Иначе
			ПолеСКД = КомпоновкаДанныхСервер.НайтиПолеСКДПоПолномуИмени(Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы, ОбязательноеПоле);
			Если ПолеСКД <> Неопределено Тогда
				ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПоле.Поле = ПолеСКД.Поле;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение параметров.
	Для Каждого ПараметрДанных Из СтруктураНастроек.ПараметрыДанных Цикл
		Если ПараметрДанных.Ключ = "Склад" Тогда // Если склад не заполнен - не используем параметр.
			УстановитьЗначениеПараметраСКД(Компоновщик, ПараметрДанных.Ключ, ПараметрДанных.Значение, Ложь);
		Иначе
			УстановитьЗначениеПараметраСКД(Компоновщик, ПараметрДанных.Ключ, ПараметрДанных.Значение);
		КонецЕсли;
	КонецЦикла;
	УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущееВремя", ТекущаяДатаСеанса());
	УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	// Компоновка макета компоновки данных.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	
	Для каждого Поле Из МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Поля Цикл
		СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Вставить(Справочники.ХранилищеШаблонов.ИмяПоляВШаблоне(Поле.ПутьКДанным), Поле.Имя);
	КонецЦикла;
	
	
	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос);
	
	// Заполнение параметров с полей отбора компоновщика настроек формы обработки.
	Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	
	// Подмена запроса для расчета цен...
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда

		ЗаменяемыйТекст = "ЦеныНоменклатурыСрезПоследних.Цена";
		ТекстЗамены = " ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент, 1) * ЕСТЬNULL(ИсходныеДанныеПоследнийЗапрос.Упаковка.Коэффициент, 1) КАК Число(15,2))";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйТекст, ТекстЗамены);
		
	КонецЕсли;
		
	// Подмена запроса при печати этикеток...
	Если СтруктураНастроек.ИсходныеДанные = Неопределено Тогда
		Если СтруктураНастроек.Свойство("ТекстЗаменяемойТаблицы")
			И СтруктураНастроек.Свойство("ТекстТаблицыДляЗамены") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
										СтруктураНастроек.ТекстЗаменяемойТаблицы,
										СтруктураНастроек.ТекстТаблицыДляЗамены);
		КонецЕсли;
		
	ИначеЕсли Режим = "ЭтикеткаКодМаркировкиИСМП" Тогда
		
		ПечатьЭтикетокИСМПРТ.ПриПодготовкеСтруктурыДанныхДляПечати(СтруктураНастроек, Режим, Запрос, СтруктураНастроек.ИсходныеДанные);
		
	Иначе
		
		Если СтруктураНастроек.Свойство("ТекстВременнойТаблицы") Тогда
			ТекстВременнойТаблицы = СтруктураНастроек.ТекстВременнойТаблицы;
		Иначе
			ТекстВременнойТаблицыСовместимостьССохраненнымиЭтикетками =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
			|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
			|		ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК Упаковка,
			|		0 КАК Количество,
			|		ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация)";
			ТекстВременнойТаблицы =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
			|		ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка) КАК Справка2,
			|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
			|		ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК Упаковка,
			|		0 КАК Количество,
			|		ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация)";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстВременнойТаблицыСовместимостьССохраненнымиЭтикетками, "&Таблица");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстВременнойТаблицы, "&Таблица");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """КоличествоЦенников""", "ИсходныеДанные.КоличествоЦенников");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """КоличествоЭтикеток""", "ИсходныеДанные.КоличествоЭтикеток");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШаблонЦенника""", "ИсходныеДанные.ШаблонЦенника");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШаблонЭтикетки""", "ИсходныеДанные.ШаблонЭтикетки");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """Организация""", "ИсходныеДанные.Организация");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """Штрихкод""", "ИсходныеДанные.Штрихкод");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШтрихАвтопроверки""", "ИсходныеДанные.ШтрихАвтопроверки");
		
		Если ТаблицаИсходныеДанные.Колонки.Найти("Справка2") = Неопределено Тогда
			ТаблицаИсходныеДанные.Колонки.Добавить("Справка2", Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Таблица", ТаблицаИсходныеДанные);
		
	КонецЕсли;
	
	СтруктураРезультата.ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	Таблица = СтруктураРезультата.ТаблицаТоваров;
	Для Каждого ОбязательноеПоле Из СтруктураНастроек.ОбязательныеПоля Цикл
		
		Если ТипЗнч(ОбязательноеПоле) = Тип("Структура") Тогда
			Колонка = Таблица.Колонки.Найти(ОбязательноеПоле.Значение);
			Если Колонка <> Неопределено Тогда
				Колонка.Заголовок = ОбязательноеПоле.Наименование;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат СтруктураРезультата;
	
КонецФункции

// Процедура печати документа.
//
// Параметры:
//  МассивОбъектов - Массив - список объектов, для которых была выполнена процедура Печать;
//  ПараметрыПечати - Структура - произвольные параметры, переданные при вызове команды печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - содержит сформированные табличные документы и дополнительную информацию;
//  ОбъектыПечати - СписокЗначений - соответствие между объектами и именами областей в табличных документах, где
//                                   значение - Объект, представление - имя области с объектом в табличных документах;
//  ПараметрыВывода - Структура - параметры, связанные с выводом табличных документов:
//   * ПараметрыОтправки - Структура - для заполнения письма при отправке печатной формы по электронной почте.
//                    см. РаботаСПочтовымиСообщениямиКлиент.РаботаСПочтовымиСообщениямиКлиент.ПараметрыОтправкиПисьма.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	РежимПечати = "";
	Если ПараметрыПечати.Свойство("РежимПечати") Тогда
		РежимПечати = ПараметрыПечати.РежимПечати;
	КонецЕсли;
	
	СтруктураНастроек = ПолучитьПустуюСтруктуруНастроек();
	СоответствиеШаблонов = Новый Соответствие;
	
	Если РежимПечати = "ПодарочныеСертификаты" Тогда
		
		СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаПодарочныйСертификат";
		ТекстВременнойТаблицы = "	(ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Сертификат,
		|		ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка) КАК НомерСертификата,
		|		ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация)";
		
		СтруктураНастроек.Вставить("ТекстВременнойТаблицы", ТекстВременнойТаблицы);
		
		СтруктураНастроек.ОбязательныеПоля.Добавить("Сертификат");
		СтруктураНастроек.ОбязательныеПоля.Добавить("НомерСертификата");
		СтруктураНастроек.ОбязательныеПоля.Добавить("КоличествоЭтикетокДляПечати");
		СтруктураНастроек.ОбязательныеПоля.Добавить("ШаблонЭтикеткиДляПечати");
		
		СтруктураНастроек.ПараметрыДанных.Вставить("Магазин", ПараметрыПечати.Магазин);
		
		ПечататьЭтикетки = Истина;
		ПечататьЦенники = Ложь;
		
		ШаблонТаблицыПодарочныхСертификатов = ТаблицаЗначенийПодарочныхСертификатов();
		ТаблицаПодарочныеСертификаты = ПреобразоватьМассивВТаблицуЗначений(ПараметрыПечати.ПодарочныеСертификаты, ШаблонТаблицыПодарочныхСертификатов); 
		
		ТаблицаШаблонов = ТаблицаПодарочныеСертификаты.Скопировать(Новый Структура("Выбран", Истина), "ШаблонЭтикетки");
		
		Для Каждого СтрокаТЧ Из ТаблицаШаблонов Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) Тогда
				СоответствиеШаблонов.Вставить(СтрокаТЧ.ШаблонЭтикетки);
			КонецЕсли;
		КонецЦикла;
		
		// Заполняем коллекцию обязательных полей и формируем соответствие шаблонов.
		Для Каждого КлючИЗначение Из СоответствиеШаблонов Цикл
			СтруктураШаблона = КлючИЗначение.Ключ.Шаблон.Получить();
			
			// Структура шаблонов.
			СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Вставить(КлючИЗначение.Ключ, СтруктураШаблона);
			
			// Добавляем в массив обязательных полей поля, присутствующие в печатной форме ценника.
			Если СтруктураШаблона <> Неопределено
				И ТипЗнч(СтруктураШаблона) = Тип("Структура")
				И СтруктураШаблона.Свойство("ПараметрыШаблона") Тогда
				Для Каждого Элемент Из СтруктураШаблона.ПараметрыШаблона Цикл
					СтруктураНастроек.ОбязательныеПоля.Добавить(Элемент.Ключ);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		// Подготовка исходных данных.
		ИсходныеДанные = ТаблицаПодарочныеСертификаты.Скопировать(Новый Структура("Выбран", Истина),
														"Сертификат, НомерСертификата, Штрихкод, КоличествоЭтикеток, ШаблонЭтикетки, Организация");
		Для Каждого СтрокаТЧ Из ИсходныеДанные Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) Тогда
				СтрокаТЧ.КоличествоЭтикеток = 0;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли РежимПечати = "ДисконтныеКарты" 
		ИЛИ РежимПечати = "РегистрационныеКарты" Тогда
		
		Если РежимПечати = "РегистрационныеКарты" Тогда
			СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаРегистрационнаяКарта";
		Иначе
			СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаДисконтнаяКарта";
		КонецЕсли;
		
		ТекстВременнойТаблицы = "	(ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Справочник.ИнформационныеКарты.ПустаяСсылка) КАК Карта,
		|		ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация)";
		
		СтруктураНастроек.Вставить("ТекстВременнойТаблицы", ТекстВременнойТаблицы);
		
		СтруктураНастроек.ОбязательныеПоля.Добавить("Карта");
		СтруктураНастроек.ОбязательныеПоля.Добавить("Организация");
		СтруктураНастроек.ОбязательныеПоля.Добавить("КоличествоЭтикетокДляПечати");
		СтруктураНастроек.ОбязательныеПоля.Добавить("ШаблонЭтикеткиДляПечати");
		
		СтруктураНастроек.ПараметрыДанных.Вставить("Магазин", ПараметрыПечати.Магазин);
		
		ШаблонТаблицыДисконтныхИРегистрационныхКарт = ТаблицаЗначенийДисконтныхИРегистрационныхКарт();
		Если РежимПечати = "РегистрационныеКарты" Тогда
			ТаблицаДисконтныхИРегистрационныхКарт = ПреобразоватьМассивВТаблицуЗначений(ПараметрыПечати.РегистрационныеКарты, ШаблонТаблицыДисконтныхИРегистрационныхКарт);
		Иначе
			ТаблицаДисконтныхИРегистрационныхКарт = ПреобразоватьМассивВТаблицуЗначений(ПараметрыПечати.ДисконтныеКарты, ШаблонТаблицыДисконтныхИРегистрационныхКарт);
		КонецЕсли;
		
		ПечататьЭтикетки = Истина;
		ПечататьЦенники = Ложь;
		ТаблицаШаблонов = ТаблицаДисконтныхИРегистрационныхКарт.Скопировать(Новый Структура("Выбран", Истина), "ШаблонЭтикетки");
		
		Для Каждого СтрокаТЧ Из ТаблицаШаблонов Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) Тогда
				СоответствиеШаблонов.Вставить(СтрокаТЧ.ШаблонЭтикетки);
			КонецЕсли;
		КонецЦикла;
		
		// Заполняем коллекцию обязательных полей и формируем соответствие шаблонов.
		Для Каждого КлючИЗначение Из СоответствиеШаблонов Цикл
			СтруктураШаблона = КлючИЗначение.Ключ.Шаблон.Получить();
			
			// Структура шаблонов.
			СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Вставить(КлючИЗначение.Ключ, СтруктураШаблона);
			
			// Добавляем в массив обязательных полей поля, присутствующие в печатной форме ценника.
			Если СтруктураШаблона <> Неопределено
				И ТипЗнч(СтруктураШаблона) = Тип("Структура")
				И СтруктураШаблона.Свойство("ПараметрыШаблона") Тогда
				Для Каждого Элемент Из СтруктураШаблона.ПараметрыШаблона Цикл
					СтруктураНастроек.ОбязательныеПоля.Добавить(Элемент.Ключ);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		// Подготовка исходных данных.
		ИсходныеДанные = ТаблицаДисконтныхИРегистрационныхКарт.Скопировать(
														Новый Структура("Выбран", Истина),
														"Карта, Штрихкод, КоличествоЭтикеток, ШаблонЭтикетки, Организация");
		
		Для Каждого СтрокаТЧ Из ИсходныеДанные Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) Тогда
				СтрокаТЧ.КоличествоЭтикеток = 0;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли РежимПечати = "ЭтикеткаКодМаркировкиИСМП" Тогда
		
		ПечатьЭтикетокИСМПРТ.ПриПечати(КоллекцияПечатныхФорм, ПараметрыПечати, ОбъектыПечати);
		Возврат;
	Иначе
		СтруктураНастроек.ОбязательныеПоля.Добавить("КоличествоЦенниковДляПечати");
		СтруктураНастроек.ОбязательныеПоля.Добавить("КоличествоЭтикетокДляПечати");
		СтруктураНастроек.ОбязательныеПоля.Добавить("ШаблонЦенникаДляПечати");
		СтруктураНастроек.ОбязательныеПоля.Добавить("ШаблонЭтикеткиДляПечати");
		СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура");
		СтруктураНастроек.ОбязательныеПоля.Добавить("НаименованиеПолное");
		СтруктураНастроек.ОбязательныеПоля.Добавить("ШтрихАвтопроверки");
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
			СтруктураНастроек.ОбязательныеПоля.Добавить("Характеристика");
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
			СтруктураНастроек.ОбязательныеПоля.Добавить("Упаковка");
		КонецЕсли;
		
		СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблона";
		ИспользоватьАссортимент = ПолучитьФункциональнуюОпцию("УстанавливатьВидыЦенВАссортименте")
									И АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(ПараметрыПечати.Магазин);
		Если ИспользоватьАссортимент Тогда
			ФорматМагазина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыПечати.Магазин, "ФорматМагазина");
			СтруктураНастроек.ПараметрыДанных.Вставить("ФорматМагазина", ФорматМагазина);
		КонецЕсли;
		
		ШаблонТаблицыТоваров = ТаблицаЗначенийТоваров();
		ТаблицаТовары = ПреобразоватьМассивВТаблицуЗначений(ПараметрыПечати.Товары, ШаблонТаблицыТоваров);
		
		// Собираем используемые поля из шаблонов.
		ТаблицаШаблонов = ТаблицаТовары.Скопировать(Новый Структура("Выбран", Истина), "ШаблонЭтикетки, ШаблонЦенника");
		
		ПечататьЭтикетки = Истина;
		ПечататьЦенники = Истина;
		Если КоллекцияПечатныхФорм.Количество() > 0 Тогда
			ПечататьЦенники = КоллекцияПечатныхФорм[0].ИмяМакета = "Ценники";
			ПечататьЭтикетки = КоллекцияПечатныхФорм[0].ИмяМакета = "Этикетки";
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из ТаблицаШаблонов Цикл
			
			Если ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) И ПечататьЭтикетки И СтрокаТЧ.ШаблонЭтикетки.ТипШаблона <> Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
				СоответствиеШаблонов.Вставить(СтрокаТЧ.ШаблонЭтикетки);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.ШаблонЦенника) И ПечататьЦенники И СтрокаТЧ.ШаблонЦенника.ТипШаблона <> Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
				СоответствиеШаблонов.Вставить(СтрокаТЧ.ШаблонЦенника);
			КонецЕсли;
			
		КонецЦикла;
		
		// Заполняем коллекцию обязательных полей и формируем соответствие шаблонов.
		Для Каждого КлючИЗначение Из СоответствиеШаблонов Цикл
			СтруктураШаблона = КлючИЗначение.Ключ.Шаблон.Получить();
			
			// Структура шаблонов.
			СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Вставить(КлючИЗначение.Ключ, СтруктураШаблона);
			
			// Добавляем в массив обязательных полей поля, присутствующие в печатной форме ценника.
			Если СтруктураШаблона <> Неопределено
				И ТипЗнч(СтруктураШаблона) = Тип("Структура")
				И СтруктураШаблона.Свойство("ПараметрыШаблона") Тогда
				Для Каждого Элемент Из СтруктураШаблона.ПараметрыШаблона Цикл
					СтруктураНастроек.ОбязательныеПоля.Добавить(Элемент.Ключ);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		// Подготовка исходных данных.
		ИсходныеДанные = ТаблицаТовары.Скопировать(Новый Структура("Выбран", Истина),
										"Номенклатура, Штрихкод, Справка2, Характеристика, Упаковка, КоличествоЭтикеток, КоличествоЦенников, ШаблонЭтикетки, ШаблонЦенника, Организация, ШтрихАвтопроверки");
		Для Каждого СтрокаТЧ Из ИсходныеДанные Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) Тогда
				СтрокаТЧ.КоличествоЭтикеток = 0;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ШаблонЦенника) Тогда
				СтрокаТЧ.КоличествоЦенников = 0;
			КонецЕсли;
		КонецЦикла;
		Если ПараметрыПечати.Режим = "ПечатьЭтикеток" Тогда
			ИсходныеДанные.ЗаполнитьЗначения(0,"КоличествоЦенников");
		КонецЕсли;
		Если ПараметрыПечати.Режим = "ПечатьЦенников" Тогда
			ИсходныеДанные.ЗаполнитьЗначения(0,"КоличествоЭтикеток");
		КонецЕсли;
		
		СтруктураНастроек.ПараметрыДанных.Вставить("ВидЦены", ПараметрыПечати.ВидЦены);
		СтруктураНастроек.ПараметрыДанных.Вставить("Магазин", ПараметрыПечати.Магазин);
		СтруктураНастроек.ПараметрыДанных.Вставить("ПравилоЦенообразования", ПараметрыПечати.ПравилоЦенообразования);
		СтруктураНастроек.ПараметрыДанных.Вставить("МагазинДляЦен", ПараметрыПечати.Магазин);
		СтруктураНастроек.ПараметрыДанных.Вставить("ЦеныПоВидуЦены", ПараметрыПечати.ЦеныПоВидуЦены);
		СтруктураНастроек.ПараметрыДанных.Вставить("ЦеныНаДату", ПараметрыПечати.ЦеныНаДату);
		СтруктураНастроек.ПараметрыДанных.Вставить("ЦеныНазначенныеДействующие", ПараметрыПечати.ЦеныНазначенныеДействующие);
		СтруктураНастроек.ПараметрыДанных.Вставить("ВидМинимальныхЦенПродажи", ПараметрыПечати.ВидМинимальныхЦенПродажи);
		СтруктураНастроек.ПараметрыДанных.Вставить("ЦеныМинимальные", ПараметрыПечати.УчитыватьЦеныМинимальные);
		СтруктураНастроек.ПараметрыДанных.Вставить("ИспользоватьАссортимент", ИспользоватьАссортимент);
		СтруктураНастроек.ПараметрыДанных.Вставить("ИспользоватьСправкиБ", ПараметрыПечати.ИспользоватьСправкиБ);
		
	КонецЕсли;
	
	СтруктураНастроек.ИсходныеДанные = ИсходныеДанные;
	
	// Вывод табличных документов в коллекцию.
	КоллекцияПечатныхФормВнутренняя = СформироватьПечатныеФормыЭтикетокИЦенников(СтруктураНастроек, ПечататьЭтикетки, ПечататьЦенники);
	КоллекцияПечатныхФорм.Очистить();
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФормВнутренняя Цикл
		
		НоваяФорма = КоллекцияПечатныхФорм.Добавить();
		НоваяФорма.ИмяМакета         = ПечатнаяФорма.ИмяМакета;
		НоваяФорма.СинонимМакета     = ПечатнаяФорма.ИмяМакета;
		НоваяФорма.ИмяВРЕГ           = ВРег(ПечатнаяФорма.ИмяМакета);
		НоваяФорма.ТабличныйДокумент = ПечатнаяФорма.ТабличныйДокумент;
		НоваяФорма.Экземпляров       = 1;
		
	КонецЦикла;
		
КонецПроцедуры

// Процедура подготовки данных к печати на принтере этикеток.
//
// Параметры:
//  Обработка - ОбработкаОбъект - режим печати.
//
// Возвращаемое значение:
//  КоллекцияПечатныхФорм - данные печати.
//
Функция ПолучитьДанныеДляПринтераЭтикеток(Обработка) Экспорт
	
	РежимПечати = "Ценники,Этикетки";
	
	Если Обработка.Режим = "ПечатьЦенников" Тогда
		РежимПечати = "Ценники";
	ИначеЕсли Обработка.Режим = "ПечатьЭтикеток" Тогда
		РежимПечати = "Этикетки";
	КонецЕсли;
		
	КоллекцияПечатныхФорм = ПодготовитьКоллекциюПечатныхФорм(Новый Массив);
	ИменаМакетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РежимПечати);
	
	Для Каждого Идентификатор Из ИменаМакетов Цикл
		
		ВременнаяКоллекцияДляОднойПечатнойФормы = ПодготовитьКоллекциюПечатныхФорм(Идентификатор);
		
		Для Каждого ВременнаяПечатнаяФорма Из ВременнаяКоллекцияДляОднойПечатнойФормы Цикл 
			
			ПечатнаяФорма = КоллекцияПечатныхФорм.Добавить();
			ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ВременнаяПечатнаяФорма);
			
			Если ВременнаяКоллекцияДляОднойПечатнойФормы.Количество() = 1 Тогда
				ПечатнаяФорма.ИмяМакета = Идентификатор;
				ПечатнаяФорма.ИмяВРЕГ = ВРег(Идентификатор);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СоответствиеШаблонов = Новый Соответствие;
	СтруктураНастроек = ПолучитьПустуюСтруктуруНастроек();
	СтруктураНастроек.ОбязательныеПоля.Добавить("КоличествоЦенниковДляПечати");
	СтруктураНастроек.ОбязательныеПоля.Добавить("КоличествоЭтикетокДляПечати");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ШаблонЦенникаДляПечати");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ШаблонЭтикеткиДляПечати");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура");
	СтруктураНастроек.ОбязательныеПоля.Добавить("НаименованиеПолное");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Характеристика");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Упаковка");
	КонецЕсли;
	
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблона";
	ИспользоватьАссортимент = ПолучитьФункциональнуюОпцию("УстанавливатьВидыЦенВАссортименте")
								И АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Обработка.Магазин);
	
	Если ИспользоватьАссортимент Тогда
		ФорматМагазина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Обработка.Магазин, "ФорматМагазина");
		СтруктураНастроек.ПараметрыДанных.Вставить("ФорматМагазина", ФорматМагазина);
	КонецЕсли;
	
	ТаблицаШаблонов = Обработка.Товары.Выгрузить(Новый Структура("Выбран", Истина), "ШаблонЭтикетки, ШаблонЦенника");
	
	ПечататьЭтикетки = Истина;
	ПечататьЦенники = Истина;
	
	Для Каждого СтрокаТЧ Из ТаблицаШаблонов Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) И ПечататьЭтикетки И СтрокаТЧ.ШаблонЭтикетки.ТипШаблона = Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
			СоответствиеШаблонов.Вставить(СтрокаТЧ.ШаблонЭтикетки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ШаблонЦенника) И ПечататьЦенники И СтрокаТЧ.ШаблонЦенника.ТипШаблона = Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
			СоответствиеШаблонов.Вставить(СтрокаТЧ.ШаблонЦенника);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СоответствиеШаблонов Цикл
		
		СтруктураШаблона = КлючИЗначение.Ключ.Шаблон.Получить();
		СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Вставить(КлючИЗначение.Ключ, СтруктураШаблона);
		
		Если СтруктураШаблона <> Неопределено
			И ТипЗнч(СтруктураШаблона) = Тип("Структура")
			И СтруктураШаблона.Свойство("ПоляМакета") Тогда
			
			Для Каждого Элемент Из СтруктураШаблона.ПоляМакета Цикл
				СтруктураНастроек.ОбязательныеПоля.Добавить(Элемент.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИсходныеДанные = Обработка.Товары.Выгрузить(
												Новый Структура("Выбран", Истина),
												"Номенклатура, Справка2, Характеристика, Упаковка, КоличествоЭтикеток, КоличествоЦенников, ШаблонЭтикетки, ШаблонЦенника, Организация");
	Для Каждого СтрокаТЧ Из ИсходныеДанные Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ШаблонЭтикетки) Тогда
			СтрокаТЧ.КоличествоЭтикеток = 0;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ШаблонЦенника) Тогда
			СтрокаТЧ.КоличествоЦенников = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Обработка.Режим = "ПечатьЭтикеток" Тогда
		ИсходныеДанные.ЗаполнитьЗначения(0,"КоличествоЦенников");
	КонецЕсли;
	
	Если Обработка.Режим = "ПечатьЦенников" Тогда
		ИсходныеДанные.ЗаполнитьЗначения(0,"КоличествоЭтикеток");
	КонецЕсли;
	
	СтруктураНастроек.ПараметрыДанных.Вставить("ВидЦены",     Обработка.ВидЦены);
	СтруктураНастроек.ПараметрыДанных.Вставить("Магазин", Обработка.Магазин);
	СтруктураНастроек.ПараметрыДанных.Вставить("ПравилоЦенообразования", Обработка.ПравилоЦенообразования);
	СтруктураНастроек.ПараметрыДанных.Вставить("МагазинДляЦен", Обработка.Магазин);
	СтруктураНастроек.ПараметрыДанных.Вставить("ЦеныПоВидуЦены", Обработка.ЦеныПоВидуЦены);
	СтруктураНастроек.ПараметрыДанных.Вставить("ЦеныНаДату", Обработка.ЦеныНаДату);
	СтруктураНастроек.ПараметрыДанных.Вставить("ЦеныНазначенныеДействующие", Обработка.ЦеныНазначенныеДействующие);
	СтруктураНастроек.ПараметрыДанных.Вставить("ВидМинимальныхЦенПродажи", Обработка.ВидМинимальныхЦенПродажи);
	СтруктураНастроек.ПараметрыДанных.Вставить("ЦеныМинимальные", Обработка.УчитыватьЦеныМинимальные);
	СтруктураНастроек.ПараметрыДанных.Вставить("ИспользоватьАссортимент", ИспользоватьАссортимент);
	СтруктураНастроек.ИсходныеДанные = ИсходныеДанные;
	
	Данные = СформироватьПечатныеФормыЭтикетокИЦенников(СтруктураНастроек, ПечататьЭтикетки, ПечататьЦенники);
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьИмяПараметраШтрихкод()
	
	Возврат "Штрихкод";
	
КонецФункции

Функция ПолучитьИмяПараметраШтрихкодСправкиБ()
	
	Возврат "ШтрихСправкиБ";
	
КонецФункции

Функция ПолучитьИмяПараметраШтрихАвтопроверки()
	
	Возврат "ШтрихАвтопроверки";
	
КонецФункции

// Функция определяет существует ли реквизит у формы.
//
Функция ЕстьРеквизитОбъекта(Объект, ИмяРеквизита)
	
	КлючУникальности   = Новый УникальныйИдентификатор;

	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);

	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции

Функция УстановитьЗначениеПараметраСКД(КомпоновщикНастроек, ИмяПараметра, ЗначениеПараметра, ИспользоватьНеЗаполненный = Истина)
	
	ПараметрУстановлен = Ложь;
	
	ПараметрВидЦены = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	ЗначениеПараметраВидЦены = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрВидЦены);
	Если ЗначениеПараметраВидЦены <> Неопределено Тогда
		
		ЗначениеПараметраВидЦены.Значение = ЗначениеПараметра;
		ЗначениеПараметраВидЦены.Использование = ?(ИспользоватьНеЗаполненный, Истина, ЗначениеЗаполнено(ЗначениеПараметраВидЦены.Значение));
		
		ПараметрУстановлен = Истина;
		
	КонецЕсли;
	
	Возврат ПараметрУстановлен;
	
КонецФункции

// Функция формирует табличный документ с ценниками и этикетками.
//
// Возвращаемое значение:
//  Табличный документ - печатная форма с ценниками и этикетками.
//
Функция СформироватьПечатныеФормыЭтикетокИЦенников(СтруктураНастроек, ПечататьЭтикетки, ПечататьЦенники)
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	// Подготовка коллекции печатных форм.
	КоллекцияПечатныхФорм = Новый ТаблицаЗначений;
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяМакета");
	КоллекцияПечатныхФорм.Колонки.Добавить("ТабличныйДокумент");
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяКолонкиКоличество");
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяКолонкиШаблон");
	КоллекцияПечатныхФорм.Колонки.Добавить("Шаблон");
	
	Для Каждого КлючИЗначение Из СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов Цикл
		Если ПечататьЭтикетки Тогда
			ПечатнаяФорма = КоллекцияПечатныхФорм.Добавить();
			ПечатнаяФорма.ИмяМакета            = "Этикетка: "+КлючИЗначение.Ключ;
			ПечатнаяФорма.ИмяКолонкиКоличество = "КоличествоЭтикетокДляПечати";
			ПечатнаяФорма.ИмяКолонкиШаблон     = "ШаблонЭтикеткиДляПечати";
			ПечатнаяФорма.Шаблон = КлючИЗначение.Ключ;
		КонецЕсли;
		
		Если ПечататьЦенники Тогда
			ПечатнаяФорма = КоллекцияПечатныхФорм.Добавить();
			ПечатнаяФорма.ИмяМакета            = "Ценник: " + КлючИЗначение.Ключ;
			ПечатнаяФорма.ИмяКолонкиКоличество = "КоличествоЦенниковДляПечати";
			ПечатнаяФорма.ИмяКолонкиШаблон     = "ШаблонЦенникаДляПечати";
			ПечатнаяФорма.Шаблон = КлючИЗначение.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		
		НомерКолонки = 0;
		НомерРяда = 0;
		СтруктураШаблона = Новый Структура;
		СтруктураШаблона.Вставить("Шаблон", ПечатнаяФорма.Шаблон);
		СтруктураШаблона.Вставить("ИмяКолонкиШаблон", ПечатнаяФорма.ИмяКолонкиШаблон);
		СтруктураРезультата = ПодготовитьСтруктуруДанных(СтруктураНастроек, СтруктураШаблона);
		
		ВременныйТабличныйДокумент = Новый ТабличныйДокумент;
		
		//////////////////////////////
		НоваяТаблицаТоварыСУчетомВыбораШК = Новый ТаблицаЗначений();
		НоваяТаблицаТоварыСУчетомВыбораШК = СтруктураРезультата.ТаблицаТоваров.Скопировать();
		//Необходимо заменить значение Штрихкода на первичное значение из Исходных данных
		ИспользуютсяУпаковки = Константы.ИспользоватьУпаковкиНоменклатуры.Получить();
		ИспользуютсяХарактеристики = Константы.ИспользоватьХарактеристикиНоменклатуры.Получить();
		ИсходныеДанныеТовары = СтруктураНастроек.ИсходныеДанные;
		
		Для Каждого СтрокаТаблицы Из ИсходныеДанныеТовары Цикл
			
			СтруктураПоиска = Новый Структура();
			
			Если Не ИсходныеДанныеТовары.Колонки.Найти("Номенклатура") = Неопределено Тогда 
				СтруктураПоиска.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
			Иначе
				Прервать;
			КонецЕсли;
			
			Если ИспользуютсяХарактеристики Тогда
				СтруктураПоиска.Вставить("Характеристика", СтрокаТаблицы.Характеристика);
			КонецЕсли;
			
			Если ИспользуютсяУпаковки Тогда
				СтруктураПоиска.Вставить("Упаковка", СтрокаТаблицы.Упаковка);
			КонецЕсли;
			
			МассивНайденныхСтрок = НоваяТаблицаТоварыСУчетомВыбораШК.НайтиСтроки(СтруктураПоиска);
			
			Если Не НоваяТаблицаТоварыСУчетомВыбораШК.Колонки.Найти("Штрихкод") = Неопределено 
				И Не ИсходныеДанныеТовары.Колонки.Найти("Штрихкод") = Неопределено Тогда
				
				Если МассивНайденныхСтрок.Количество() = 1 Тогда
					МассивНайденныхСтрок[0].Штрихкод = СтрокаТаблицы.Штрихкод;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		//////////////////////////////
		
		Для Каждого СтрокаТовары Из НоваяТаблицаТоварыСУчетомВыбораШК Цикл
			
			Если СтрокаТовары[ПечатнаяФорма.ИмяКолонкиКоличество] > 0
				И СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон] = ПечатнаяФорма.Шаблон Тогда
				
				СтруктураШаблона = СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Получить(СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон]);
				
				Если ПечатнаяФорма.ТабличныйДокумент = Неопределено Тогда
					
					Если СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон].ТипШаблона <> Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
						ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
					Иначе
						ПечатнаяФорма.ТабличныйДокумент = Новый Структура;
						ПечатнаяФорма.ТабличныйДокумент.Вставить("XML", СтруктураШаблона.XMLОписаниеМакета);
						ПечатнаяФорма.ТабличныйДокумент.Вставить("Этикетки", Новый Массив);
					КонецЕсли;
					
				КонецЕсли;
				
				Если СтруктураШаблона <> Неопределено 
					И ТипЗнч(СтруктураШаблона) = Тип("Структура")
					И СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон].ТипШаблона <> Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
					
					Область = СтруктураШаблона.МакетЭтикетки.ПолучитьОбласть(СтруктураШаблона.ИмяОбластиПечати);
					
					ПроверятьВывод = Ложь;
					
					Для ИндексСтроки = 1 По Область.ВысотаТаблицы Цикл
						
						Если Область.Область("R" + Формат(ИндексСтроки, "ЧН=0; ЧГ=0")).АвтоВысотаСтроки Тогда
							ПроверятьВывод = Истина;
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					Если СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон].ТипШаблона = Перечисления.ТипыШаблонов.ЭтикеткаЦенник Тогда
						ПроверятьВывод = Ложь;
					КонецЕсли;
					
					// Применение настроек табличного документа.
					ЗаполнитьЗначенияСвойств(ПечатнаяФорма.ТабличныйДокумент, СтруктураШаблона.МакетЭтикетки, , "ОбластьПечати");
					
					Для каждого ПараметрШаблона Из СтруктураШаблона.ПараметрыШаблона Цикл
						Если ЕстьРеквизитОбъекта(Область.Параметры, ПараметрШаблона.Значение) Тогда
							НаименованиеКолонки = СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить(Справочники.ХранилищеШаблонов.ИмяПоляВШаблоне(ПараметрШаблона.Ключ));
							Если НаименованиеКолонки <> Неопределено Тогда
								// служебные поля
								Область.Параметры[ПараметрШаблона.Значение] = СтрокаТовары[НаименованиеКолонки];
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					Для каждого Рисунок Из Область.Рисунки Цикл
						Если Лев(Рисунок.Имя,8) = ПолучитьИмяПараметраШтрихкод() ИЛИ Лев(Рисунок.Имя,13) = ПолучитьИмяПараметраШтрихкодСправкиБ()
							ИЛИ Лев(Рисунок.Имя,17) = ПолучитьИмяПараметраШтрихАвтопроверки() Тогда
							
							Если Лев(Рисунок.Имя,8) = ПолучитьИмяПараметраШтрихкод() Тогда
								ЗначениеШтрихкода = СтрокаТовары[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить(ПолучитьИмяПараметраШтрихкод())];
							ИначеЕсли Лев(Рисунок.Имя,13) = ПолучитьИмяПараметраШтрихкодСправкиБ() Тогда
								ЗначениеШтрихкода = СтрокаТовары[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить(ПолучитьИмяПараметраШтрихкодСправкиБ())];
							ИначеЕсли Лев(Рисунок.Имя,17) = ПолучитьИмяПараметраШтрихАвтопроверки() Тогда
								ЗначениеШтрихкода = СтрокаТовары[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить(ПолучитьИмяПараметраШтрихАвтопроверки())];
							КонецЕсли;
							
							Если ЗначениеЗаполнено(ЗначениеШтрихкода) Тогда
								
								ПараметрыШтрихкода = Новый Структура;
								ПараметрыШтрихкода.Вставить("Ширина",	Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
								ПараметрыШтрихкода.Вставить("Высота",	Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
								
								Если СтруктураШаблона.ТипКода = 16 Тогда
									МинСторона = Мин(ПараметрыШтрихкода.Ширина, ПараметрыШтрихкода.Высота);
									ПараметрыШтрихкода.Ширина = МинСторона;
									ПараметрыШтрихкода.Высота = МинСторона;
								КонецЕсли;
								
								Если СтруктураШаблона.Свойство("УровеньКоррекцииQR") Тогда
									ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", СтруктураШаблона.УровеньКоррекцииQR);
								Иначе
									ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", 0);
								КонецЕсли;
								
								ПараметрыШтрихкода.Вставить("Штрихкод",				ЗначениеШтрихкода);
								ПараметрыШтрихкода.Вставить("ТипКода",				СтруктураШаблона.ТипКода);
								ПараметрыШтрихкода.Вставить("ОтображатьТекст",		СтруктураШаблона.ОтображатьТекст);
								ПараметрыШтрихкода.Вставить("РазмерШрифта",			СтруктураШаблона.РазмерШрифта);
								
								Если СтруктураШаблона.Свойство("УголПоворота") Тогда
									ПараметрыШтрихкода.Вставить("УголПоворота", СтруктураШаблона.УголПоворота);
								КонецЕсли;
								
								Рисунок.Картинка = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода).Картинка;
								
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
					
					Для Инд = 1 По СтрокаТовары[ПечатнаяФорма.ИмяКолонкиКоличество] Цикл // Цикл по количеству экземпляров.
						
						МассивОбластей = Новый Массив;
						МассивОбластей.Добавить(Область);
						
						Если ПроверятьВывод И НЕ ВременныйТабличныйДокумент.ПроверитьВывод(МассивОбластей) Тогда
							ПечатнаяФорма.ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
							НомерРяда    = 0;
							НомерКолонки = 0;
							ВременныйТабличныйДокумент.Очистить();
						КонецЕсли;
						
						НомерКолонки = НомерКолонки + 1;
						
						Если НомерКолонки = 1 Тогда
							
							НомерРяда = НомерРяда + 1;
							
							ПечатнаяФорма.ТабличныйДокумент.Вывести(Область);
							ВременныйТабличныйДокумент.Вывести(Область);
							
						Иначе
							
							ПечатнаяФорма.ТабличныйДокумент.Присоединить(Область);
							ВременныйТабличныйДокумент.Присоединить(Область);
							
						КонецЕсли;
						
						Если НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали И НомерРяда = СтруктураШаблона.КоличествоПоВертикали Тогда
							
							НомерРяда    = 0;
							НомерКолонки = 0;
							
							ПечатнаяФорма.ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
							ВременныйТабличныйДокумент.Очистить();
							
						ИначеЕсли НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали Тогда
							
							НомерКолонки = 0;
							
						КонецЕсли;
						
					КонецЦикла; // Цикл по количеству экземпляров.
					
				КонецЕсли;
				
				Если СтруктураШаблона <> Неопределено 
					И ТипЗнч(СтруктураШаблона) = Тип("Структура")
					И СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон].ТипШаблона = Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
					Поля = Новый Массив;
					Для Каждого ТекПоле Из СтруктураШаблона.ПоляМакета Цикл			
						Если ТекПоле.ТипЗаполнения = "Parameter" Тогда							
							НовоеПоле = Новый Структура;
							НовоеПоле.Вставить("ИмяПоля", ТекПоле.Наименование);							
							Попытка
								ПараметрыПоля = Новый Структура;
								ПараметрыПоля.Вставить("СтрокаТовары", СтрокаТовары);
								Значение = ОбщегоНазначения.ВычислитьВБезопасномРежиме("Параметры." + ТекПоле.Значение, СтрокаТовары);
							Исключение
								Значение = "";
							КонецПопытки;							
							Если ТипЗнч(Значение) = Тип("ХранилищеЗначения") Тогда								
								Значение = Значение.Получить();								
								Если ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
									Значение = Base64Строка(Значение);
								Иначе
									Значение = Строка(Значение);
								КонецЕсли;								
							ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.НоменклатураПрисоединенныеФайлы") Тогда
								
								Если Значение.ТипХраненияФайла = ПредопределенноеЗначение("Перечисление.ТипыХраненияФайлов.ВИнформационнойБазе") Тогда
									АдресХранилища = РаботаСФайлами.ДанныеФайла(Значение, , Истина).СсылкаНаДвоичныеДанныеФайла;
									Значение = ПолучитьИзВременногоХранилища(АдресХранилища);
								КонецЕсли;
								
								Если ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
									Значение = Base64Строка(Значение);
								Иначе
									Значение = Строка(Значение);
								КонецЕсли;
								
							КонецЕсли;							
							Если ЗначениеЗаполнено(Значение) Тогда
								НовоеПоле.Вставить("Значение", Значение);
							Иначе								
								Если ЗначениеЗаполнено(ТекПоле.ЗначениеПоУмолчанию) Тогда						
									НовоеПоле.Вставить("Значение", ТекПоле.ЗначениеПоУмолчанию);
								Иначе
									НовоеПоле.Вставить("Значение", "");
								КонецЕсли;								
							КонецЕсли;
							
							Поля.Добавить(НовоеПоле);
														
						КонецЕсли;
						
					КонецЦикла;
					НоваяЭтикетка = Новый Структура;
					НоваяЭтикетка.Вставить("Количество", СтрокаТовары[ПечатнаяФорма.ИмяКолонкиКоличество]);
					НоваяЭтикетка.Вставить("ЗначенияПолей", Поля);
					ПечатнаяФорма.ТабличныйДокумент.Этикетки.Добавить(НоваяЭтикетка);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла; // Цикл по строкам таблицы товаров.
		
	КонецЦикла;
	
	МассивСтрокДляУдаления = Новый Массив;
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		Если ПечатнаяФорма.ТабличныйДокумент = Неопределено Тогда
			МассивСтрокДляУдаления.Добавить(ПечатнаяФорма);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ПечатнаяФорма Из МассивСтрокДляУдаления Цикл
		КоллекцияПечатныхФорм.Удалить(ПечатнаяФорма);
	КонецЦикла;
	
	Возврат КоллекцияПечатныхФорм;
	
КонецФункции

Функция ПодготовитьКоллекциюПечатныхФорм(Знач ИменаМакетов)
	
	Макеты = Новый ТаблицаЗначений;
	Макеты.Колонки.Добавить("ИмяМакета");
	Макеты.Колонки.Добавить("ИмяВРЕГ");
	Макеты.Колонки.Добавить("СинонимМакета");
	Макеты.Колонки.Добавить("ТабличныйДокумент");
	Макеты.Колонки.Добавить("Экземпляров");
	Макеты.Колонки.Добавить("Картинка");
	Макеты.Колонки.Добавить("ПолныйПутьКМакету");
	Макеты.Колонки.Добавить("ИмяФайлаПечатнойФормы");
	
	Если ТипЗнч(ИменаМакетов) = Тип("Строка") Тогда
		ИменаМакетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаМакетов);
	КонецЕсли;
	
	Для Каждого ИмяМакета Из ИменаМакетов Цикл
		
		Макет = Макеты.Найти(ИмяМакета, "ИмяМакета");
		
		Если Макет = Неопределено Тогда
			Макет = Макеты.Добавить();
			Макет.ИмяМакета = ИмяМакета;
			Макет.ИмяВРЕГ = ВРег(ИмяМакета);
			Макет.Экземпляров = 1;
		Иначе
			Макет.Экземпляров = Макет.Экземпляров + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Макеты;
	
КонецФункции

// Функция возвращает пустую структуру настроек
// 
// Параметры: 
//  Нет
// 
// Возвращаемое значение: 
//  Структура - структура настроек.
Функция СтруктураНастроек() Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИсходныеДанные",                         Неопределено);
	СтруктураНастроек.Вставить("ОбязательныеПоля",                       Новый Массив);
	СтруктураНастроек.Вставить("СоответствиеШаблоновИСтруктурыШаблонов", Новый Соответствие);
	СтруктураНастроек.Вставить("ПараметрыДанных"    ,                    Новый Структура);
	СтруктураНастроек.Вставить("КомпоновщикНастроек",                    Неопределено);
	СтруктураНастроек.Вставить("ИмяМакетаСхемыКомпоновкиДанных",         Неопределено);
	
	Возврат СтруктураНастроек;
	
КонецФункции

Функция ПреобразоватьМассивВТаблицуЗначений(МассивДанных, ТаблицаЗначений)
	
	Для Каждого ЭлементМассива Из МассивДанных Цикл
		НоваяСтрока = ТаблицаЗначений.Добавить();
		Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
			НоваяСтрока[ЗначениеСтруктуры.Ключ] = ЗначениеСтруктуры.Значение;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Функция ТаблицаЗначенийТоваров()
	
	ТаблицаЗначенийТоваров = Новый ТаблицаЗначений;
	ТаблицаЗначенийТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЗначенийТоваров.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	ТаблицаЗначенийТоваров.Колонки.Добавить("ШаблонЦенника", Новый ОписаниеТипов("СправочникСсылка.ХранилищеШаблонов"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("КоличествоЦенников", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЗначенийТоваров.Колонки.Добавить("ШаблонЭтикетки", Новый ОписаниеТипов("СправочникСсылка.ХранилищеШаблонов"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("КоличествоЭтикеток", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЗначенийТоваров.Колонки.Добавить("ОстатокНаСкладе", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Любой)));
	ТаблицаЗначенийТоваров.Колонки.Добавить("КоличествоВДокументе", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Любой)));
	ТаблицаЗначенийТоваров.Колонки.Добавить("Выбран", Новый ОписаниеТипов("Булево"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(1024)));
	ТаблицаЗначенийТоваров.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("SKU", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(9, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЗначенийТоваров.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("Справка2", Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("ШтрихСправкиБ", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	ТаблицаЗначенийТоваров.Колонки.Добавить("ШтрихАвтопроверки", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	ТаблицаЗначенийТоваров.Колонки.Добавить("ТипШаблонаЦенника", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЗначенийТоваров.Колонки.Добавить("ТипШаблонаЭтикетки", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЗначенийТоваров.Колонки.Добавить("ХарактеристикиИспользуются", Новый ОписаниеТипов("Булево"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("ИсходныйНомерСтроки", Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаЗначенийТоваров;
	
КонецФункции

Функция ТаблицаЗначенийПодарочныхСертификатов()
	
	ТаблицаЗначенийТоваров = Новый ТаблицаЗначений;
	ТаблицаЗначенийТоваров.Колонки.Добавить("Сертификат", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("НомерСертификата", Новый ОписаниеТипов("СправочникСсылка.СерийныеНомера"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	ТаблицаЗначенийТоваров.Колонки.Добавить("ШаблонЭтикетки", Новый ОписаниеТипов("СправочникСсылка.ХранилищеШаблонов"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("КоличествоЭтикеток", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЗначенийТоваров.Колонки.Добавить("Выбран", Новый ОписаниеТипов("Булево"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("ИсходныйНомерСтроки", Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаЗначенийТоваров;
	
КонецФункции

Функция ТаблицаЗначенийДисконтныхИРегистрационныхКарт()
	
	ТаблицаЗначенийТоваров = Новый ТаблицаЗначений;
	ТаблицаЗначенийТоваров.Колонки.Добавить("Карта", Новый ОписаниеТипов("СправочникСсылка.ИнформационныеКарты"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	ТаблицаЗначенийТоваров.Колонки.Добавить("ШаблонЭтикетки", Новый ОписаниеТипов("СправочникСсылка.ХранилищеШаблонов"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("КоличествоЭтикеток", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЗначенийТоваров.Колонки.Добавить("Выбран", Новый ОписаниеТипов("Булево"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаЗначенийТоваров.Колонки.Добавить("ИсходныйНомерСтроки", Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаЗначенийТоваров;
	
КонецФункции

#КонецОбласти

#КонецЕсли
