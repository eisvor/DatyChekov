#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция ТаблицаКлассификатора(Знач Переменные) Экспорт
	
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	
	Макет = Справочники.КлассификаторТНВЭД.ПолучитьМакет("КлассификаторТоварнойНоменклатурыВнешнеэкономическойДеятельности");
	
	//В полученном макете содержатся значения всех списков используемых в отчете
	//ищем переданный
	Список = Макет.Области.Найти("Строки");
	
	Если Список.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
		//заполнение дерева данными списка	
		ВерхОбласти = Список.Верх;
		НизОбласти = Список.Низ;
		
		НомерКолонки = 1;
		Область = Макет.Область(ВерхОбласти - 1, НомерКолонки);
		ИмяКолонки = Область.Текст;
		ДлинаКодаКлассификатора = 7;
		
		Пока ЗначениеЗаполнено(ИмяКолонки) Цикл
			
			Если ИмяКолонки = "Код" Тогда
				ТаблицаПоказателей.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(12)));
			ИначеЕсли ИмяКолонки = "Наименование" Тогда
				ТаблицаПоказателей.Колонки.Добавить("Наименование",Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
			ИначеЕсли ИмяКолонки = "ЕдиницаИзмерения" Тогда
				ТаблицаПоказателей.Колонки.Добавить("ЕдиницаИзмеренияКод",Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
			ИначеЕсли ИмяКолонки = "ПрослеживаемыйТовар" Тогда
				ТаблицаПоказателей.Колонки.Добавить("ПрослеживаемыйТовар",Новый ОписаниеТипов("Булево"));
			КонецЕсли;	
			
			НомерКолонки = НомерКолонки + 1;
			Область = Макет.Область(ВерхОбласти - 1, НомерКолонки);
			ИмяКолонки = Область.Текст;
			
		КонецЦикла;
		
		Для НомСтр = ВерхОбласти По НизОбласти Цикл
			// Отображаем только элементы
			
			Код = СокрП(Макет.Область(НомСтр, 1).Текст);
			Если СтрДлина(Код) = 2 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаСписка = ТаблицаПоказателей.Добавить();
			
			Для Каждого Колонка Из ТаблицаПоказателей.Колонки Цикл
				
				ЗначениеКолонки = СокрП(Макет.Область(НомСтр, ТаблицаПоказателей.Колонки.Индекс(Колонка) + 1).Текст);
				
				Если Колонка.Имя = "ПрослеживаемыйТовар" Тогда
					СтрокаСписка[Колонка.Имя] = СокрЛП(ЗначениеКолонки) = "1";
				Иначе
					СтрокаСписка[Колонка.Имя] = ЗначениеКолонки;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаПоказателей.Сортировать(ТаблицаПоказателей.Колонки[0].Имя + " Возр");
	
	Возврат ТаблицаПоказателей;
	
КонецФункции

// Функция ищет по коду элементы в справочнике Классификатор ТН ВЭД.
//  Если их нет, то создает элементы справочника в соответствии с классификатором ТН ВЭД ЕАЭС.
//
// Параметры:
//  Код - Строка(10) - Строка с кодом классификатора ТН ВЭД,
//  РежимОбновления - Булево, Истина - признак записи объекта через метод ОбновлениеИнформационнойБазы.ЗаписатьОбъект().
// 
// Возвращаемое значение:
//  Ссылка - ссылка на элемент классификатора или Неопределено, если такого кода нет в ТН ВЭД.
//
Функция НайтиСоздатьЭлементКлассификатораТНВЭД(Код, РежимОбновления = Ложь) Экспорт
	
	СуществующийЭлемент = Справочники.КлассификаторТНВЭД.НайтиПоКоду(Код);
	Если Не ЗначениеЗаполнено(СуществующийЭлемент) Тогда
		
		ТаблицаКлассификатора = ТаблицаКлассификатора(1);
		ТаблицаКлассификатора.Индексы.Добавить("Код");
		
		СтруктураПоиска = Новый Структура("Код",Код);
		НайденныеСтроки = ТаблицаКлассификатора.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 1 Тогда
			СвойстваЭлемента = НайденныеСтроки[0];
			
			СправочникОбъект = Справочники.КлассификаторТНВЭД.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(СправочникОбъект, СвойстваЭлемента);
			
			СправочникОбъект.НаименованиеПолное = СвойстваЭлемента.Наименование;
			
			Соответствие = Справочники.БазовыеЕдиницыИзмерения.ЗаполнитьЕдиницыИзмеренияИзКлассификатора(СвойстваЭлемента.ЕдиницаИзмеренияКод,
																											РежимОбновления);
			Если Соответствие <> Неопределено Тогда
				СправочникОбъект.ЕдиницаИзмерения = Соответствие[СвойстваЭлемента.ЕдиницаИзмеренияКод];
			КонецЕсли;
			
			Если РежимОбновления Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
			Иначе
				СправочникОбъект.Записать();
			КонецЕсли;
			
			Возврат СправочникОбъект.Ссылка;
			
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат СуществующийЭлемент;
	КонецЕсли;
		
КонецФункции

#КонецЕсли