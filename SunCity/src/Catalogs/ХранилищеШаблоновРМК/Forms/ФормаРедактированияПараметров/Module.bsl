
#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура УстановитьФормат(Текст, ДополнительныеПараметры) Экспорт // АПК:1242 - обработчик оповещения
	
	Если НЕ Текст = Неопределено Тогда
		Формат = Текст;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.мСтрокаДерева = Неопределено Тогда
		
		Идентификатор			= Параметры.Идентификатор;
		Формат					= Параметры.Формат;
		ШиринаСтроки			= Параметры.ШиринаСтроки;
		РазмещениеТекста		= Параметры.РазмещениеТекста;
		Выравнивание			= Параметры.Выравнивание;
		Наименование			= Параметры.Наименование;
		Вычислять				= Параметры.Вычислять;
		ВыводитьКакШтрихкод		= Параметры.ВыводитьКакШтрихкод;
		ВыводитьПустоеЗначение	= Параметры.ВыводитьПустоеЗначение;
		Префикс					= Параметры.Префикс;
		Постфикс				= Параметры.Постфикс;
		ТипЭлемента				= Параметры.ТипЭлемента;
		ОписаниеТипа			= Параметры.ОписаниеТипа;
		ПустоеЗначение			= Параметры.ПустоеЗначение;
		ТипШтрихкодаРТ			= Параметры.ТипШтрихкода;
		
		Элементы.ПустоеЗначение.ОграничениеТипа = Параметры.ОписаниеТипа;
		
		Типы = ОписаниеТипа.Типы();
		
		Если ПустоеЗначение = Неопределено И Типы.Количество() = 1 Тогда
			
			// Примитивные типы
			ТипЗначенияПустогоЗначения = Типы[0];
			Если ТипЗначенияПустогоЗначения = Тип("Строка") Тогда
				ПустоеЗначение = НСтр("ru = ''");
			ИначеЕсли ТипЗначенияПустогоЗначения = Тип("Число") Тогда
				ПустоеЗначение = 0;
			ИначеЕсли ТипЗначенияПустогоЗначения = Тип("Булево") Тогда
				ПустоеЗначение = Ложь;
			ИначеЕсли ТипЗначенияПустогоЗначения = Тип("Дата") Тогда
				ПустоеЗначение = '00010101';
			Иначе
				// Ссылочные типы
				ПустоеЗначение = Новый(Типы[0]);
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого ЭлементФормы Из Элементы.ГруппаОсновная.ПодчиненныеЭлементы Цикл
			ЭлементФормы.Доступность = Истина;
		КонецЦикла;
		
		Элементы.ПанельШирина.Доступность = Ложь;
		
		Если ТипЭлемента = "СтрокаТекста" ИЛИ ТипЭлемента = "СоставнаяСтрока" Тогда
			
			Элементы.ПанельФормат.Доступность			= Ложь;
			Элементы.ПанельПустоеЗначение.Доступность	= Ложь;
			
		КонецЕсли;
		
		Если ТипЭлемента = "СоставнаяСтрока" Тогда
			Элементы.ПанельФормат.Доступность = Ложь;
		КонецЕсли;
		
		Если ТипЭлемента = "Таблица" Тогда
			
			Элементы.ПанельВыравнивание.Доступность		= Ложь;
			Элементы.ПанельЗабивать.Доступность			= Ложь;
			Элементы.ПанельШирина.Доступность			= Ложь;
			Элементы.ПанельФормат.Доступность			= Ложь;
			Элементы.ПанельПустоеЗначение.Доступность	= Ложь;
			
		КонецЕсли;
		
		ДоступностьПанелиЗаголовок = НЕ (ТипЭлемента = "СоставнаяСтрока" ИЛИ ТипЭлемента = "СтрокаТекста"
			ИЛИ ТипЭлемента = "Таблица");
		Элементы.ПанельЗаголовок.Доступность = ДоступностьПанелиЗаголовок;
			
		Элементы.ПанельШирина.Видимость = Ложь;
		Элементы.СтрокаПустоеЗначение.Видимость = Ложь;
		
		ВидимостьДопПолей = Параметры.ИмяКолонки = "Текст";
		Элементы.ГруппаФлажки.Видимость				= ВидимостьДопПолей;
		Элементы.ПанельФормат.Видимость				= ВидимостьДопПолей;
		Элементы.ПанельПустоеЗначение.Видимость		= ВидимостьДопПолей;
		Элементы.ВыводитьПустоеЗначение.Видимость	= ВидимостьДопПолей;
		Элементы.ТипШтрихкодаРТ.Доступность			= ВыводитьКакШтрихкод;
		
		Элементы.ПанельЗабивать.Доступность			= НЕ ВыводитьКакШтрихкод;
		Элементы.ПанельВыравнивание.Доступность		= НЕ ВыводитьКакШтрихкод;
		Элементы.ПанельФормат.Доступность			= НЕ ВыводитьКакШтрихкод;
		
	Иначе
		
		Идентификатор		= Параметры.Идентификатор;
		ШаблонЧеков			= ДанныеФормыВЗначение(Параметры.мСтрокаДерева, Тип("ДеревоЗначений"));
		мСтрокаДерева		= ШаблонЧеков.Строки.Найти(Идентификатор, "Идентификатор", Истина);
		Формат				= Параметры.Формат;
		ШиринаСтроки		= Параметры.ШиринаСтроки;
		РазмещениеТекста	= Параметры.РазмещениеТекста;
		Выравнивание		= Параметры.Выравнивание;
		Наименование		= Параметры.Наименование;
		// Префикс и постфикс
		Префикс				= Параметры.Префикс;
		Постфикс			= Параметры.Постфикс;
		
		// Пустое значение
		Элементы.ПустоеЗначение.ОграничениеТипа = мСтрокаДерева.ОписаниеТипа;
		
		Типы = мСтрокаДерева.ОписаниеТипа.Типы();
		
		Если мСтрокаДерева.ПустоеЗначение = Неопределено И Типы.Количество() = 1 Тогда
			
			// Примитивные типы
			ТипЗначенияПустогоЗначения = Типы[0];
			Если ТипЗначенияПустогоЗначения = Тип("Строка") Тогда
				ПустоеЗначение = "";
			ИначеЕсли ТипЗначенияПустогоЗначения = Тип("Число") Тогда
				ПустоеЗначение = 0;
			ИначеЕсли ТипЗначенияПустогоЗначения = Тип("Булево") Тогда
				ПустоеЗначение = Ложь;
			ИначеЕсли ТипЗначенияПустогоЗначения = Тип("Дата") Тогда
				ПустоеЗначение = '00010101';
			Иначе
				// Ссылочные типы
				ПустоеЗначение = Новый(Типы[0]);
			КонецЕсли;
			
		Иначе
			ПустоеЗначение = мСтрокаДерева.ПустоеЗначение;
		КонецЕсли;
		
		Для Каждого ЭлементФормы Из Элементы.ГруппаОсновная.ПодчиненныеЭлементы Цикл
			ЭлементФормы.Доступность = Истина;
		КонецЦикла;
		
		Если мСтрокаДерева.Уровень() = 1 Тогда
			Элементы.ПанельШирина.Доступность = Ложь;
		КонецЕсли;
		
		Если мСтрокаДерева.ТипЭлемента = "СтрокаТекста"
			ИЛИ мСтрокаДерева.ТипЭлемента = "СоставнаяСтрока" Тогда
			
			Элементы.ПанельФормат.Доступность			= Ложь;
			Элементы.ПанельПустоеЗначение.Доступность	= Ложь;
			
		КонецЕсли;
		Если мСтрокаДерева.ТипЭлемента = "СтрокаДанных"  Тогда
			Элементы.Наименование.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		Если мСтрокаДерева.ТипЭлемента = "СоставнаяСтрока" Тогда
			Элементы.ПанельФормат.Доступность = Ложь;
		КонецЕсли;
		
		Если мСтрокаДерева.ТипЭлемента = "Таблица" Тогда
			
			Элементы.ПанельВыравнивание.Доступность		= Ложь;
			Элементы.ПанельЗабивать.Доступность			= Ложь;
			Элементы.ПанельШирина.Доступность			= Ложь;
			Элементы.ПанельФормат.Доступность			= Ложь;
			Элементы.ПанельПустоеЗначение.Доступность	= Ложь;
			
		КонецЕсли;
		
		Если мСтрокаДерева.Уровень() > 0 И мСтрокаДерева.Родитель.ТипЭлемента = "СоставнаяСтрока" Тогда
			
			Элементы.ПанельШирина.Доступность = Ложь;
			Если мСтрокаДерева.Родитель.ТипЭлемента = "СоставнаяСтрока" Тогда
				
				Элементы.ПанельВыравнивание.Доступность	= Ложь;
				Элементы.ПанельЗабивать.Доступность		= Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		
		ДоступностьПанелиЗаголовок = НЕ(мСтрокаДерева.ТипЭлемента = "СоставнаяСтрока"
			ИЛИ мСтрокаДерева.ТипЭлемента = "СтрокаТекста"
			ИЛИ мСтрокаДерева.ТипЭлемента = "Таблица");
			
		Элементы.ПанельЗаголовок.Доступность		= ДоступностьПанелиЗаголовок;
		Элементы.ГруппаФлажки.Видимость				= Ложь;
		Элементы.ВыводитьПустоеЗначение.Видимость	= Ложь;
		
	КонецЕсли;
	
	Если Параметры.Свойство("АдресСКД") Тогда
		АдресСКД = Параметры.АдресСКД;
	КонецЕсли;
	
	Если Выравнивание = "Право" Тогда
		ПараметрВыравнивание = 1;
	ИначеЕсли Выравнивание = "Центр" Тогда
		ПараметрВыравнивание = 2;
	Иначе
		ПараметрВыравнивание = 0;
	КонецЕсли;
	
	Элементы.Префикс.СписокВыбора.Добавить(Символы.ПС, НСтр("ru = 'Перенос строки'"));
	Элементы.Префикс.СписокВыбора.Добавить(Символы.Таб, "Табуляция");
	Элементы.Префикс.СписокВыбора.Добавить(Символы.НПП, НСтр("ru = 'Неразрывный пробел'"));
	Элементы.Префикс.СписокВыбора.Добавить(":", ":");
	Элементы.Префикс.СписокВыбора.Добавить(".", ".");
	
	Элементы.Постфикс.СписокВыбора.Добавить(Символы.ПС, НСтр("ru = 'Перенос строки'"));
	Элементы.Постфикс.СписокВыбора.Добавить(Символы.Таб, "Табуляция");
	Элементы.Постфикс.СписокВыбора.Добавить(Символы.НПП, НСтр("ru = 'Неразрывный пробел'"));
	Элементы.Постфикс.СписокВыбора.Добавить(":", ":");
	Элементы.Постфикс.СписокВыбора.Добавить(".", ".");
	Элементы.Наименование.КнопкаВыбора = Вычислять;
	
	// Условия вывода секции шаблона
	Параметры.Свойство("ДоступенВыводПромокода", ДоступенВыводПромокода);
	ВидимостьУсловий = Неопределено;
	Если Не Параметры.Свойство("ВидимостьУсловий", ВидимостьУсловий) Тогда
		ВидимостьУсловий = Ложь;
	КонецЕсли;
	Элементы.ПанельУсловия.Видимость = ВидимостьУсловий;
	Если ВидимостьУсловий И Параметры.Свойство("ТаблицаУсловий") Тогда
		Для Каждого СтрокаУсловия Из Параметры.ТаблицаУсловий Цикл
			НовоеУсловие = ТаблицаУсловий.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеУсловие, СтрокаУсловия);
			ДобавитьРеквизитыУсловия(НовоеУсловие.ПолучитьИдентификатор());
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьВидимостьПодсказок();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФорматНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Конструктор = Новый КонструкторФорматнойСтроки(Формат);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьФормат", ЭтотОбъект);
	Конструктор.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрефиксОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Префикс = СтрШаблон("%1%2", Элемент.ТекстРедактирования, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПостфиксОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Постфикс =	СтрШаблон("%1%2", Элемент.ТекстРедактирования, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьКакШтрихкодПриИзменении(Элемент)
	
	Элементы.ТипШтрихкодаРТ.Доступность		= ВыводитьКакШтрихкод;
	Элементы.ПанельЗабивать.Доступность		= НЕ ВыводитьКакШтрихкод;
	Элементы.ПанельВыравнивание.Доступность	= НЕ ВыводитьКакШтрихкод;
	Элементы.ПанельФормат.Доступность		= НЕ ВыводитьКакШтрихкод;
	
КонецПроцедуры

&НаКлиенте
Процедура ВычислятьПриИзменении(Элемент)
	Элементы.Наименование.КнопкаВыбора = Вычислять;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Вычислять Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыбораПоля", ЭтотОбъект);
		
		ПараметрыОткрытия = Новый Структура("АдресСКД", АдресСКД);
		ОткрытьФорму("Справочник.ХранилищеШаблоновРМК.Форма.ФормаВыбораПолей", 
			ПараметрыОткрытия,,,,, ОписаниеОповещения);
		
	КонецЕсли;
	
	
КонецПроцедуры

#Область ОбработчикиСобытийПоУсловиям

&НаКлиенте
Процедура Подключаемый_ТипУсловияПриИзменении(Элемент)
	
	ПозицияРазделителя = СтрНайти(Элемент.Имя, "_");
	Если ПозицияРазделителя = 0 Тогда
		Возврат;
	КонецЕсли;
	ИмяРеквизитаДоИдентификатора = Лев(Элемент.Имя, ПозицияРазделителя);
	ИдентификаторСтроки = СтрЗаменить(Элемент.Имя, ИмяРеквизитаДоИдентификатора, "");
	СтрокаТаблицы = ТаблицаУсловий.НайтиПоИдентификатору(Число(ИдентификаторСтроки));
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НовыйТип = ЭтаФорма["ТипУсловия_" + ИдентификаторСтроки];
	Если СтрокаТаблицы.ТипУсловия = НовыйТип Тогда
		// Ничего не изменилось, перенастраивать не требуется
		Возврат;
	КонецЕсли;
	СтрокаТаблицы.ТипУсловия = НовыйТип;
	НастроитьЭлементыФормыУсловия(ИдентификаторСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВидСравненияПриИзменении(Элемент)
	
	ПозицияРазделителя = СтрНайти(Элемент.Имя, "_");
	Если ПозицияРазделителя = 0 Тогда
		Возврат;
	КонецЕсли;
	ИмяРеквизитаДоИдентификатора = Лев(Элемент.Имя, ПозицияРазделителя);
	ИдентификаторСтроки = СтрЗаменить(Элемент.Имя, ИмяРеквизитаДоИдентификатора, "");
	СтрокаТаблицы = ТаблицаУсловий.НайтиПоИдентификатору(Число(ИдентификаторСтроки));
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НовоеЗначение = ЭтаФорма["ВидСравнения_" + ИдентификаторСтроки];
	Если СтрокаТаблицы.ВидСравнения = НовоеЗначение Тогда
		// Ничего не изменилось, перенастраивать не требуется
		Возврат;
	КонецЕсли;
	СтрокаТаблицы.ВидСравнения = НовоеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗначениеСравненияПриИзменении(Элемент)
	
	ПозицияРазделителя = СтрНайти(Элемент.Имя, "_");
	Если ПозицияРазделителя = 0 Тогда
		Возврат;
	КонецЕсли;
	ИмяРеквизитаДоИдентификатора = Лев(Элемент.Имя, ПозицияРазделителя);
	ИдентификаторСтроки = СтрЗаменить(Элемент.Имя, ИмяРеквизитаДоИдентификатора, "");
	СтрокаТаблицы = ТаблицаУсловий.НайтиПоИдентификатору(Число(ИдентификаторСтроки));
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НовоеЗначение = ЭтаФорма["ЗначениеСравнения_" + ИдентификаторСтроки];
	Если СтрокаТаблицы.ЗначениеСравнения = НовоеЗначение Тогда
		// Ничего не изменилось, перенастраивать не требуется
		Возврат;
	КонецЕсли;
	СтрокаТаблицы.ЗначениеСравнения = НовоеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьУсловиеНажатие(Элемент)
	
	ИдентификаторСтроки = СтрЗаменить(Элемент.Имя, "ДекорацияУдалитьУсловие_", "");
	
	УдалитьУсловиие(ИдентификаторСтроки);
	ОбновитьВидимостьПодсказок();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПринятьИзмененияЗакрытьФорму(Команда)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Идентификатор", Идентификатор);
	СтруктураПараметров.Вставить("Формат", Формат);
	СтруктураПараметров.Вставить("Элемент", Наименование);
	СтруктураПараметров.Вставить("Ширина", ШиринаСтроки);
	СтруктураПараметров.Вставить("РазмещениеТекста", РазмещениеТекста);
	СтруктураПараметров.Вставить("Вычислять", Вычислять);
	СтруктураПараметров.Вставить("ВыводитьКакШтрихкод", ВыводитьКакШтрихкод);
	СтруктураПараметров.Вставить("ТипШтрихкода", ТипШтрихкодаРТ);
	СтруктураПараметров.Вставить("ВыводитьПустоеЗначение", ВыводитьПустоеЗначение);
	СтруктураПараметров.Вставить("ТаблицаУсловий", ТаблицаУсловий);
	
	Если ПараметрВыравнивание = 0 Тогда
		Выравнивание = "Лево";
	ИначеЕсли ПараметрВыравнивание = 1 Тогда
		Выравнивание = "Право";
	ИначеЕсли ПараметрВыравнивание = 2 Тогда
		Выравнивание = "Центр";
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Выравнивание", Выравнивание);
	// Префикс и постфикс
	СтруктураПараметров.Вставить("Префикс", Префикс);
	СтруктураПараметров.Вставить("Постфикс", Постфикс);
	// Пустое значение
	СтруктураПараметров.Вставить("ПустоеЗначение", ПустоеЗначение);
	СтруктураПараметров.Вставить("СтрокаПустоеЗначение", СтрокаПустоеЗначение);
	
	Если НЕ ПустаяСтрока(Параметры.мКэшМакетовАдрес) Тогда
		
		мКэшМакетов = ПолучитьИзВременногоХранилища(Параметры.мКэшМакетовАдрес);
		мКэшМакетов.Удалить(Параметры.Идентификатор);
		ПоместитьВоВременноеХранилище(мКэшМакетов, Параметры.мКэшМакетовАдрес);
		
	КонецЕсли;

	Закрыть(СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУсловие(Команда)
	
	НовоеУсловие = ТаблицаУсловий.Добавить();
	НовоеУсловие.ТипУсловия = ПредопределенноеЗначение("Перечисление.УсловиеВыводаСекцииШаблонаРМК.Сумма");
	НовоеУсловие.ВидСравнения = ПредопределенноеЗначение("Перечисление.ВидСравненияЗначенийРМК.БольшеИлиРавно");
	НовоеУсловие.ЗначениеСравнения = 0;
	ДобавитьРеквизитыУсловия(НовоеУсловие.ПолучитьИдентификатор());
	ОбновитьВидимостьПодсказок();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗавершениеВыбораПоля(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЕстьСвойство(Результат, "ИмяПоля") Тогда
		
		Наименование = Результат.ИмяПоля;
		Вычислять = Результат.Вычислять;
		
		Если ЕстьСвойство(Результат, "ОписаниеТипа") 
			И ТипЗнч(Результат.ОписаниеТипа) = Тип("ОписаниеТипов") Тогда
				Элементы.ПустоеЗначение.ОграничениеТипа = Результат.ОписаниеТипа;
		КонецЕсли;
		
		Если ЕстьСвойство(Результат, "ВыводитьКакШтрихкод") Тогда
			ВыводитьКакШтрихкод = Результат.ВыводитьКакШтрихкод;
		КонецЕсли;
		
		Если ЕстьСвойство(Результат, "Формат") Тогда
			Формат = Результат.Формат;
		КонецЕсли;
		Если ЕстьСвойство(Результат, "ШиринаСтроки") Тогда
			ШиринаСтроки = Результат.ШиринаСтроки;
		КонецЕсли;
		Если ЕстьСвойство(Результат, "РазмещениеТекста") Тогда
			РазмещениеТекста = Результат.РазмещениеТекста;
		КонецЕсли;
		Если ЕстьСвойство(Результат, "Выравнивание") Тогда
			Выравнивание = Результат.Выравнивание;
		КонецЕсли;
		Если ЕстьСвойство(Результат, "ВыводитьПустоеЗначение") Тогда
			ВыводитьПустоеЗначение = Результат.ВыводитьПустоеЗначение;
		КонецЕсли;
		Если ЕстьСвойство(Результат, "Префикс") Тогда
			Префикс = Результат.Префикс;
		КонецЕсли;
		Если ЕстьСвойство(Результат, "Постфикс") Тогда
			Постфикс = Результат.Постфикс;
		КонецЕсли;
		Если ЕстьСвойство(Результат, "ПустоеЗначение") Тогда
			ПустоеЗначение = Результат.ПустоеЗначение;
		КонецЕсли;
		Если ЕстьСвойство(Результат, "ТипШтрихкода") Тогда
			ТипШтрихкодаРТ = Результат.ТипШтрихкода;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьСвойство(Объект, ИмяРеквизита)
	Возврат ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(Объект, ИмяРеквизита);
КонецФункции

#Область Условия

&НаСервере
Процедура ДобавитьРеквизитыУсловия(ИдентификаторСтрокиУсловия)
	
	// Добавляем реквизиты на форму
	СтрокаУсловия = ТаблицаУсловий.НайтиПоИдентификатору(ИдентификаторСтрокиУсловия);
	ИдентификаторСтроки = Формат(ИдентификаторСтрокиУсловия,"ЧДЦ=0; ЧН=0; ЧГ=");
	ИмяРеквизитаТипУсловия = "ТипУсловия_" + ИдентификаторСтроки;
	ИмяРеквизитаВидСравнения = "ВидСравнения_" + ИдентификаторСтроки;
	ИмяРеквизитаЗначениеСравнения = "ЗначениеСравнения_" + ИдентификаторСтроки;
	РеквизитФормыТипУсловия = Новый РеквизитФормы(ИмяРеквизитаТипУсловия,
		Новый ОписаниеТипов("ПеречислениеСсылка.УсловиеВыводаСекцииШаблонаРМК"));
	РеквизитФормыВидСравнения = Новый РеквизитФормы(ИмяРеквизитаВидСравнения,
		Новый ОписаниеТипов("ПеречислениеСсылка.ВидСравненияЗначенийРМК"));
	ТипЗначенияУсловия = Метаданные.Справочники.ХранилищеШаблоновРМК.ТабличныеЧасти.Условия.Реквизиты.ЗначениеСравнения.Тип;
	РеквизитФормыЗначениеСравнения = Новый РеквизитФормы(ИмяРеквизитаЗначениеСравнения, ТипЗначенияУсловия);
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(РеквизитФормыТипУсловия);
	ДобавляемыеРеквизиты.Добавить(РеквизитФормыВидСравнения);
	ДобавляемыеРеквизиты.Добавить(РеквизитФормыЗначениеСравнения);
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ЭтаФорма[ИмяРеквизитаТипУсловия] = СтрокаУсловия.ТипУсловия;
	ЭтаФорма[ИмяРеквизитаВидСравнения] = СтрокаУсловия.ВидСравнения;
	ЭтаФорма[ИмяРеквизитаЗначениеСравнения] = СтрокаУсловия.ЗначениеСравнения;
	
	
	ИмяГруппы = "ГруппаУсловия_"+ИдентификаторСтроки;
	ИмяЭлементаТипУсловия = "ТипУсловия_" + ИдентификаторСтроки;
	ИмяЭлементаВидСравнения = "ВидСравнения_" + ИдентификаторСтроки;
	ИмяЭлементаТипЗначениеСравнения = "ЗначениеСравнения_" + ИдентификаторСтроки;
	ИмяДекорации = "ДекорацияУдалитьУсловие_" + ИдентификаторСтроки;
	
	// Добавляем поля ввода для новых реквизитов
	ГруппаЭлементов = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ПанельУсловия);
	ГруппаЭлементов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЭлементов.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаЭлементов.ОтображатьЗаголовок = Ложь;
	ГруппаЭлементов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Элементы.Переместить(ГруппаЭлементов, ГруппаЭлементов.Родитель, Элементы.ПодвалУсловий);
	
	ПолеТипУсловия = Элементы.Добавить(ИмяЭлементаТипУсловия, Тип("ПолеФормы"), ГруппаЭлементов);
	ПолеТипУсловия.ПутьКДанным = ИмяРеквизитаТипУсловия;
	ПолеТипУсловия.Вид = ВидПоляФормы.ПолеВвода;
	ПолеТипУсловия.РежимВыбораИзСписка = Истина;
	ПолеТипУсловия.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеТипУсловия.УстановитьДействие("ПриИзменении", "Подключаемый_ТипУсловияПриИзменении");
	
	ПолеВидСравнения = Элементы.Добавить(ИмяЭлементаВидСравнения, Тип("ПолеФормы"), ГруппаЭлементов);
	ПолеВидСравнения.ПутьКДанным = ИмяРеквизитаВидСравнения;
	ПолеВидСравнения.Вид = ВидПоляФормы.ПолеВвода;
	ПолеВидСравнения.РежимВыбораИзСписка = Истина;
	ПолеВидСравнения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеВидСравнения.УстановитьДействие("ПриИзменении", "Подключаемый_ВидСравненияПриИзменении");

	ПолеЗначениеСравнения = Элементы.Добавить(ИмяЭлементаТипЗначениеСравнения,
		Тип("ПолеФормы"), ГруппаЭлементов);
	ПолеЗначениеСравнения.ПутьКДанным = ИмяРеквизитаЗначениеСравнения;
	ПолеЗначениеСравнения.Вид = ВидПоляФормы.ПолеВвода;
	ПолеЗначениеСравнения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначениеСравнения.УстановитьДействие("ПриИзменении",
		"Подключаемый_ЗначениеСравненияПриИзменении");

	ДекорацияУдалить = Элементы.Добавить(ИмяДекорации, Тип("ДекорацияФормы"), ГруппаЭлементов);
	ДекорацияУдалить.Вид = ВидДекорацииФормы.Картинка;
	ДекорацияУдалить.Картинка = БиблиотекаКартинок.СерыйКрест;
	ДекорацияУдалить.УстановитьДействие("Нажатие", "Подключаемый_УдалитьУсловиеНажатие");
	ДекорацияУдалить.Гиперссылка = Истина;
	ДекорацияУдалить.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	
	НастроитьЭлементыФормыУсловия(ИдентификаторСтроки);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормыУсловия(ИдентификаторСтроки, Знач ОписаниеУсловия = Неопределено)

	СтрокаУсловия = ТаблицаУсловий.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если СтрокаУсловия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ОписаниеУсловия = Неопределено Тогда
		ОписаниеТипа = Новый Структура("ДопустимыеВидыСравнения, ТипЗначения",
			Неопределено, Неопределено);
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьОписаниеУсловия(СтрокаУсловия.ТипУсловия,
			ОписаниеТипа);
	КонецЕсли;
	ДопустимыеТипыСравнения = ОписаниеТипа.ДопустимыеВидыСравнения;
	ТекущийВидСравнения = ЭтаФорма["ВидСравнения_" + ИдентификаторСтроки];
	Если ДопустимыеТипыСравнения.Найти(ТекущийВидСравнения) = Неопределено Тогда
		ЭтаФорма["ВидСравнения_" + ИдентификаторСтроки] = ДопустимыеТипыСравнения[0];
		СтрокаУсловия.ВидСравнения	= ДопустимыеТипыСравнения[0];
	КонецЕсли;
	ТипЗначения = ОписаниеТипа.ТипЗначения;
	ЗначениеСравнения = ТипЗначения.ПривестиЗначение(СтрокаУсловия.ЗначениеСравнения);
	ЭтаФорма["ЗначениеСравнения_" + ИдентификаторСтроки] = ЗначениеСравнения;
	СтрокаУсловия.ЗначениеСравнения = ЗначениеСравнения;

	ЭлементТипУсловия = Элементы["ТипУсловия_" + ИдентификаторСтроки];
	ЭлементВидСравнения = Элементы["ВидСравнения_" + ИдентификаторСтроки];
	ЭлементЗначение = Элементы["ЗначениеСравнения_" + ИдентификаторСтроки];
	
	ДоступныеПоляУсловия = Новый Массив;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьДоступныеУсловия(ДоступныеПоляУсловия,
		ДоступенВыводПромокода);
	
	ЭлементТипУсловия.СписокВыбора.ЗагрузитьЗначения(ДоступныеПоляУсловия);
	ЭлементВидСравнения.СписокВыбора.Очистить();
	ВидСравненияБольше 			= Перечисления.ВидСравненияЗначенийРМК.Больше;
	ВидСравненияБольшеИлиРавно 	= Перечисления.ВидСравненияЗначенийРМК.БольшеИлиРавно;
	ВидСравненияМеньше 			= Перечисления.ВидСравненияЗначенийРМК.Меньше;
	ВидСравненияМеньшеИлиРавно 	= Перечисления.ВидСравненияЗначенийРМК.МеньшеИлиРавно;
	ВидСравненияРавно 			= Перечисления.ВидСравненияЗначенийРМК.Равно;
	ВидСравненияНеРавно			= Перечисления.ВидСравненияЗначенийРМК.НеРавно;
	
	Для Каждого ДопустимыйВидСравнения Из ОписаниеТипа.ДопустимыеВидыСравнения Цикл
		ПредставлениеВида = Строка(ДопустимыйВидСравнения);
		Если ДопустимыйВидСравнения = ВидСравненияБольше Тогда
			ПредставлениеВида = ">"; // Не локализуется
		ИначеЕсли ДопустимыйВидСравнения = ВидСравненияБольшеИлиРавно Тогда
			ПредставлениеВида = "≥"; // Не локализуется
		ИначеЕсли ДопустимыйВидСравнения = ВидСравненияМеньше Тогда
			ПредставлениеВида = "<"; // Не локализуется
		ИначеЕсли ДопустимыйВидСравнения = ВидСравненияМеньшеИлиРавно Тогда
			ПредставлениеВида = "≤"; // Не локализуется
		ИначеЕсли ДопустимыйВидСравнения = ВидСравненияРавно Тогда
			ПредставлениеВида = "="; // Не локализуется
		ИначеЕсли ДопустимыйВидСравнения = ВидСравненияНеРавно Тогда
			ПредставлениеВида = "≠"; // Не локализуется
		КонецЕсли;
		ЭлементВидСравнения.СписокВыбора.Добавить(ДопустимыйВидСравнения, ПредставлениеВида);
	КонецЦикла;
	ЭлементТипУсловия.МаксимальнаяШирина = 27;
	ЭлементТипУсловия.АвтоМаксимальнаяШирина = Ложь;
	ЭлементВидСравнения.МаксимальнаяШирина = 3;
	ЭлементВидСравнения.АвтоМаксимальнаяШирина = Ложь;
	ЭлементЗначение.ВыбиратьТип = Ложь;
	ЭлементЗначение.МаксимальнаяШирина = 10;
	ЭлементЗначение.АвтоМаксимальнаяШирина = Ложь;
	ВыбиратьЗначение = Не ОписаниеТипа.ТипЗначения = Новый ОписаниеТипов("Булево");
	ЭлементЗначение.КнопкаВыбора = ВыбиратьЗначение;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьУсловиие(ИдентификаторСтроки)
	
	СтрокаТаблицы = ТаблицаУсловий.НайтиПоИдентификатору(Число(ИдентификаторСтроки));
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТаблицаУсловий.Удалить(СтрокаТаблицы);
	ИмяГруппы = "ГруппаУсловия_"+ИдентификаторСтроки;
	ИмяЭлементаТипУсловия = "ТипУсловия_" + ИдентификаторСтроки;
	ИмяЭлементаВидСравнения = "ВидСравнения_" + ИдентификаторСтроки;
	ИмяЭлементаТипЗначениеСравнения = "ЗначениеСравнения_" + ИдентификаторСтроки;
	ИмяДекорации = "ДекорацияУдалитьУсловие_" + ИдентификаторСтроки;
	УдалитьЭлементФормы(ИмяГруппы);
	УдалитьЭлементФормы(ИмяЭлементаТипУсловия);
	УдалитьЭлементФормы(ИмяЭлементаВидСравнения);
	УдалитьЭлементФормы(ИмяЭлементаТипЗначениеСравнения);
	УдалитьЭлементФормы(ИмяДекорации);
	
	УдаляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты.Добавить("ТипУсловия_" + ИдентификаторСтроки);
	УдаляемыеРеквизиты.Добавить("ВидСравнения_" + ИдентификаторСтроки);
	УдаляемыеРеквизиты.Добавить("ЗначениеСравнения_" + ИдентификаторСтроки);
	ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементФормы(ИмяЭлемента)
	
	ЭлементФормы = Элементы.Найти(ИмяЭлемента);
	
	Если ЭлементФормы <> Неопределено Тогда 
		Элементы.Удалить(ЭлементФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьПодсказок()
	
	ЕстьУсловия = ТаблицаУсловий.Количество();
	Элементы.ПодсказкаУсловия.Видимость = ЕстьУсловия;
	Элементы.ПодсказкаУсловияНеВведены.Видимость = Не ЕстьУсловия;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти