#Область ПрограммныйИнтерфейс

// Обрабатывает разрешение редактирования объектов.
//
// Параметры:
//  РезультатОткрытияФормы - Произвольный - результат открытия формы.
//  ДополнительныеПараметры - Структура - структура дополнительных параметров.
//
&НаКлиенте
Процедура ОповещениеРазрешитьРедактированиеРеквизитовОбъекта(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		УстановитьВидимостьПодключаемогоОборудования();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.ЗначенияЗаполнения.Свойство("ТипКассы") Тогда
		Элементы.ТипКассы.Доступность = Ложь;
		Объект.ИспользоватьБезПодключенияОборудования = Истина;
		УстановитьВидимостьПодключаемогоОборудования();
	КонецЕсли;
		
	ИспользоватьПодключаемоеОборудование = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");
	ИспользоватьОбменСПодключаемымОборудованием = ПолучитьФункциональнуюОпцию("ИспользоватьОбменСПодключаемымОборудованием");
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		Элементы.ТипКассы.СписокВыбора.Вставить(0,Перечисления.ТипыКассККМ.ФискальныйРегистратор);
	КонецЕсли;
	
	СетевоеОборудование = Ложь;
	СтандартнаяОбработка = Истина;
	
	Если СетевоеОборудование Тогда
		Элементы.ТипКассы.СписокВыбора.Вставить(1, Перечисления.ТипыКассККМ.СетевоеОборудование);
	КонецЕсли;
	
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда
		ТекстПодсказки = НСтр("ru = 'ККМ из другой программы, участвующая в обмене через EnterpriseData.
								|Используется в обмене через EnterpriseData.
								|
								|ККМ без подключения оборудования.
								|Используется при применении автономного фискального регистратора 
								|или продажах без обязательной печати фискального чека.
								|
								|'");
	ИначеЕсли ИспользоватьОбменСПодключаемымОборудованием Тогда
		Элементы.ТипКассы.СписокВыбора.Добавить(Перечисления.ТипыКассККМ.ККМOffline);
		ТекстПодсказки = НСтр("ru = 'ККТ с функцией передачи в ОФД, фискальный регистратор или АСПД, принтер чеков.
								|Используется при печати чека на устройстве, подключенном к системе, на фискальном регистраторе, 
								|АСПД (автоматизированной системе печати документов) или принтере чеков.
								|
								|ККМ из другой программы, участвующая в обмене через EnterpriseData.
								|Используется в обмене через EnterpriseData.
								|
								|ККМ без подключения оборудования.
								|Используется при применении автономного фискального регистратора
								|или продажах без обязательной печати фискального чека.
								|
								|ККМ Офлайн.
								|Используется при продажах на ККМ в режиме Офлайн.
								|'");
	Иначе
		ТекстПодсказки = НСтр("ru = 'ККТ с функцией передачи в ОФД, фискальный регистратор или АСПД, принтер чеков. 
								|Используется при печати чека на устройстве, подключенном к системе, на фискальном регистраторе, 
								|АСПД (автоматизированной системе печати документов) или принтере чеков.
								|
								|ККМ из другой программы, участвующая в обмене через EnterpriseData.
								|Используется в обмене через EnterpriseData.
								|
								|ККМ без подключения оборудования.
								|Используется при применении автономного фискального регистратора
								|или продажах без обязательной печати фискального чека. 
								|'");
	КонецЕсли;
	
	Элементы.ТипКассы.Подсказка = ТекстПодсказки;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Элементы.Организация.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ТипКассы = ПредопределенноеЗначение("Перечисление.ТипыКассККМ.СетевоеОборудование") Тогда
		Элементы.Магазин.Видимость = Ложь;
	КонецЕсли;
	
	// Подсистема запрета редактирования ключевых реквизитов объектов.
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	Иначе
		УстановитьВидимостьПодключаемогоОборудования();
	КонецЕсли;
	
	ИспользуетсяНовыйРМК = ПолучитьФункциональнуюОпцию("ИспользоватьНовоеРМК");
	Элементы.ГруппаНастройкиСтарыйРМК.Видимость = Не ИспользуетсяНовыйРМК;
	Элементы.ГруппаНастройкиНовыйРМК.Видимость = ИспользуетсяНовыйРМК;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
		РабочееМестоПриИзменении(Неопределено);
	КонецЕсли;
	
	УстановитьВидимостьРабочегоМеста();
	
	СформироватьАвтоНаименование();
	ОбновитьПараметрыВыбораКассы();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьВидимостьПодключаемогоОборудования();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаписатьПараметрыПодключенияНСПК();
	УстановитьВидимостьПодключаемогоОборудования();
	
	// Подсистема запрета редактирования ключевых реквизитов объектов.
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	СформироватьАвтоНаименование();
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	СформироватьАвтоНаименование();
КонецПроцедуры

&НаКлиенте
Процедура РабочееМестоПриИзменении(Элемент)
	
	РабочееМестоПриИзмененииСервер()
	
КонецПроцедуры

&НаКлиенте
Процедура ТипКассыПриИзменении(Элемент)
	
	Объект.ИспользоватьБезПодключенияОборудования =
		(Объект.ТипКассы = ПредопределенноеЗначение("Перечисление.ТипыКассККМ.АвтономнаяККМ")
			ИЛИ Объект.ТипКассы = ПредопределенноеЗначение("Перечисление.ТипыКассККМ.ККМED"));
			
	Объект.ПодключаемоеОборудование = ПредопределенноеЗначение("Справочник.ПодключаемоеОборудование.ПустаяСсылка");
	Объект.ШаблонЧекаККМ = ПредопределенноеЗначение("Справочник.ХранилищеШаблонов.ПустаяСсылка");
	Объект.ШаблонЧекаККМВозврат = ПредопределенноеЗначение("Справочник.ХранилищеШаблонов.ПустаяСсылка");
	Объект.ШиринаЛенты = 0;
	
	Если Объект.ТипКассы = ПредопределенноеЗначение("Перечисление.ТипыКассККМ.ФискальныйРегистратор") ИЛИ Объект.ТипКассы = ПредопределенноеЗначение("Перечисление.ТипыКассККМ.СетевоеОборудование") Тогда
		Объект.НастройкаРаспределенияВыручкиПоСекциям = ПредопределенноеЗначение("Справочник.НастройкиРаспределенияВыручкиПоСекциямФР.РаспределениеПоУмолчанию");
	Иначе
		Объект.НастройкаРаспределенияВыручкиПоСекциям = ПредопределенноеЗначение("Справочник.НастройкиРаспределенияВыручкиПоСекциямФР.ПустаяСсылка");
	КонецЕсли;
	ОбновитьПараметрыВыбораКассы();
	
	УстановитьВидимостьРабочегоМеста();
	УстановитьВидимостьПодключаемогоОборудования();
	
	Элементы.ПодключаемоеОборудование.ОтметкаНезаполненного = НЕ Объект.ИспользоватьБезПодключенияОборудования;
	Элементы.РаспределениеВыручки.ОтметкаНезаполненного     = Объект.ТипКассы = ПредопределенноеЗначение("Перечисление.ТипыКассККМ.ФискальныйРегистратор");
	
	Если Объект.ТипКассы = ПредопределенноеЗначение("Перечисление.ТипыКассККМ.СетевоеОборудование") Тогда
		Элементы.Магазин.Видимость = Ложь;
	Иначе
		Элементы.Магазин.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключаемоеОборудованиеПриИзменении(Элемент)
	
	ПодключаемоеОборудованиеПриИзмененииСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик команды, создаваемой механизмом запрета редактирования ключевых реквизитов.
//
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеРазрешитьРедактированиеРеквизитовОбъекта", ЭтотОбъект);
		ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект, ОбработчикОповещения);
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СформироватьАвтоНаименование()
	
	Элементы.Наименование.СписокВыбора.Очистить();
	СтрокаНаименования = СокрЛП(Объект.Владелец) + "(" + СокрЛП(Объект.Магазин) + ")";
	
	Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыВыбораКассы()
	
	ПараметрыВыбораКассы = Новый Массив;
	Значения = Новый Массив;
	Значения.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор"));
	Значения.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ПринтерЧеков"));
	Значения.Добавить(ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ"));
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипОборудования", Значения);
	ПараметрыВыбораКассы.Добавить(НовыйПараметр);
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.УстройствоИспользуется", Истина);
	ПараметрыВыбораКассы.Добавить(НовыйПараметр);
	Элементы.ПодключаемоеОборудование.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораКассы);
	
	ПараметрыВыбораОфлайнКассы = Новый Массив;
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипОборудования", ПредопределенноеЗначение("Перечисление.ТипыОфлайнОборудования.ККМ"));
	ПараметрыВыбораОфлайнКассы.Добавить(НовыйПараметр);
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Использование", Истина);
	ПараметрыВыбораОфлайнКассы.Добавить(НовыйПараметр);
	
	Если Объект.ТипКассы = ПредопределенноеЗначение("Перечисление.ТипыКассККМ.ФискальныйРегистратор") Тогда
		НастройкаШаблонов = Ложь;
	Иначе
		НастройкаШаблонов = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодключаемоеОборудованиеПриИзмененииСервер()
	
	Объект.СерийныйНомер = Объект.ПодключаемоеОборудование.СерийныйНомер;
	Объект.ТипОборудования = Объект.ПодключаемоеОборудование.ТипОборудования;
	
	УстановитьВидимостьДопСвойств();
	
КонецПроцедуры

&НаСервере
Процедура РабочееМестоПриИзмененииСервер()
	
	УстановитьВидимостьПодключаемогоОборудования();
	ПодключаемоеОборудованиеПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДопСвойств()
	
	Видимость = Ложь;
	Если Объект.ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор ИЛИ Объект.ТипКассы = Перечисления.ТипыКассККМ.СетевоеОборудование Тогда
		Видимость = НЕ Объект.ИспользоватьБезПодключенияОборудования;
		Элементы.РаспределениеВыручки.Видимость	= Видимость;
		Элементы.ШаблонЧекаККМ.Видимость		= Видимость;
		Элементы.ШаблонЧекаККМВозврат.Видимость	= Видимость;
		
		Если Объект.ПодключаемоеОборудование.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
			Элементы.Организация.Доступность = Ложь;
			Элементы.ГруппаПечать.Доступность = Ложь;
			
			Элементы.НеПечататьБумажныйЧек.Видимость   = Истина;
			Элементы.ЭлектронныйЧекSMSПередаютсяПрограммой1С.Видимость   = Истина;
			Элементы.ЭлектронныйЧекEmailПередаютсяПрограммой1С.Видимость = Истина;
			
			Объект.Владелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПодключаемоеОборудование, "Организация");
			
			Элементы.Наименование.СписокВыбора.Очистить();
			СтрокаНаименования = СтрШаблон(НСтр("ru = '%1(%2)'"), СокрЛП(Объект.Владелец), СокрЛП(Объект.Магазин));
			Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
			
			Элементы.ПараметрыНСПК.Видимость = Истина;
			Если ЗначениеЗаполнено(ОБъект.Ссылка) Тогда
				ЗаполнитьПараметрыПодключенияНСПК();
			КонецЕсли;
		Иначе
			Элементы.Организация.Доступность = Истина;
			Элементы.ГруппаПечать.Доступность = Истина;
			Элементы.НеПечататьБумажныйЧек.Видимость = Ложь;
			Элементы.ЭлектронныйЧекSMSПередаютсяПрограммой1С.Видимость = Ложь;
			Элементы.ЭлектронныйЧекEmailПередаютсяПрограммой1С.Видимость = Ложь;
			Элементы.ПараметрыНСПК.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.Организация.Доступность = Истина;
		Элементы.ГруппаПечать.Доступность = Истина;
		Элементы.РаспределениеВыручки.Видимость = Ложь;
		Элементы.ШаблонЧекаККМ.Видимость = Ложь;
		Элементы.ШаблонЧекаККМВозврат.Видимость = Ложь;
		Элементы.НеПечататьБумажныйЧек.Видимость = Ложь;
		Элементы.ЭлектронныйЧекSMSПередаютсяПрограммой1С.Видимость = Ложь;
		Элементы.ЭлектронныйЧекEmailПередаютсяПрограммой1С.Видимость = Ложь;
		Элементы.ПараметрыНСПК.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьШириныЛенты();
	УстановитьВидимостьСоответствияВидовОплаты();
	
	
	Если Видимость Тогда
		УстановитьДоступностьДопСвойств()
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПодключаемогоОборудования()
	
	Если Объект.ТипКассы = Перечисления.ТипыКассККМ.ККМOffline Тогда
		ИспользуетсяПодключаемоеОборудование = Ложь;
	Иначе
		ИспользуетсяПодключаемоеОборудование = Истина;
	КонецЕсли;
	
	ЭтоПодключаемоеОборудование = 
		(ЗначениеЗаполнено(Объект.РабочееМесто) ИЛИ Объект.ТипКассы = Перечисления.ТипыКассККМ.СетевоеОборудование)
			И НЕ Объект.ИспользоватьБезПодключенияОборудования 
			И ИспользуетсяПодключаемоеОборудование;
	
	Элементы.ПодключаемоеОборудование.Видимость = ЭтоПодключаемоеОборудование;
	
	Если ЭтоПодключаемоеОборудование Тогда
		УстановитьДоступностьПодключаемогоОборудования();
	КонецЕсли;
	
	Элементы.ПодключаемоеОборудование.АвтоОтметкаНезаполненного = НЕ Объект.ИспользоватьБезПодключенияОборудования;
	
	Элементы.РаспределениеВыручки.АвтоОтметкаНезаполненного =
		Объект.ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор;
	
	УстановитьВидимостьДопСвойств();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьРабочегоМеста()
	
	Если Не Объект.ТипКассы = ПредопределенноеЗначение("Перечисление.ТипыКассККМ.СетевоеОборудование") Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.РабочееМесто) Тогда
			Объект.РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
		КонецЕсли;
		
		Элементы.РабочееМесто.Видимость = Истина;
		Элементы.РабочееМесто.АвтоВыборНезаполненного = Истина;
		
		Если Элементы.РабочееМесто.Видимость Тогда
			УстановитьДоступностьРабочегоМеста()
		КонецЕсли
	Иначе
		
		Элементы.РабочееМесто.Видимость = Ложь;
		Элементы.РабочееМесто.АвтоВыборНезаполненного = Ложь;
		Объект.РабочееМесто = ПредопределенноеЗначение("Справочник.РабочиеМеста.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСоответствияВидовОплаты()
	
	Элементы.СоответствиеВидовОплаты.Видимость = (Объект.ТипКассы = Перечисления.ТипыКассККМ.ККМOffline);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьШириныЛенты()
	
	Элементы.ШиринаЛенты.Видимость = НЕ Объект.ИспользоватьБезПодключенияОборудования 
	И (Объект.ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор);
	
	Если Элементы.ШиринаЛенты.Видимость Тогда
		УстановитьДоступностьШириныЛенты()
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПодключаемогоОборудования()
	
	Элементы.ПодключаемоеОборудование.ТолькоПросмотр = (НЕ ЗначениеЗаполнено(Объект.РабочееМесто) И НЕ Объект.ТипКассы = Перечисления.ТипыКассККМ.СетевоеОборудование)
		ИЛИ Объект.ИспользоватьБезПодключенияОборудования;
	
	Элементы.ПодключаемоеОборудование.АвтоОтметкаНезаполненного = НЕ Объект.ИспользоватьБезПодключенияОборудования;
	
	Элементы.РаспределениеВыручки.АвтоОтметкаНезаполненного     = Объект.ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьРабочегоМеста()
	
	Если НЕ ЗначениеЗаполнено(Объект.РабочееМесто) Тогда
		Объект.РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	КонецЕсли;
	Элементы.РабочееМесто.Доступность = Истина;
	Элементы.РабочееМесто.АвтоВыборНезаполненного = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьШириныЛенты()
	
	Элементы.ШиринаЛенты.ТолькоПросмотр = Объект.ИспользоватьБезПодключенияОборудования
										  ИЛИ НЕ (Объект.ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьДопСвойств()
	
	Если Объект.ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор ИЛИ Объект.ТипКассы = Перечисления.ТипыКассККМ.СетевоеОборудование Тогда
		Элементы.РаспределениеВыручки.ТолькоПросмотр = Объект.ИспользоватьБезПодключенияОборудования;
		Элементы.ШаблонЧекаККМ.ТолькоПросмотр        = Объект.ИспользоватьБезПодключенияОборудования;
		Элементы.ШаблонЧекаККМВозврат.ТолькоПросмотр = Объект.ИспользоватьБезПодключенияОборудования;
	Иначе
		Элементы.РаспределениеВыручки.ТолькоПросмотр = Истина;
		Элементы.ШаблонЧекаККМ.ТолькоПросмотр        = Истина;
		Элементы.ШаблонЧекаККМВозврат.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	УстановитьДоступностьШириныЛенты();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыПодключенияНСПК()
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетТоваровФСС") Тогда
		ПараметрыПодключенияНСПК = Новый Структура("ИдентификаторНСПК, КлючКассыНСПК");
		ЭлектронныеСертификатыНСПКРТ.ЗаполнитьПараметрыПодключенияКассыНСПК(ПараметрыПодключенияНСПК, Объект.Ссылка);
		
		ИдентификаторНСПК = ПараметрыПодключенияНСПК.ИдентификаторНСПК;
		КлючКассыНСПК = ПараметрыПодключенияНСПК.КлючКассыНСПК;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПараметрыПодключенияНСПК()
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетТоваровФСС") Тогда
		Если ЗначениеЗаполнено(ИдентификаторНСПК) Тогда
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Объект.Ссылка, ИдентификаторНСПК, "ИдентификаторНСПК");
		Иначе
			ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Объект.Ссылка, "ИдентификаторНСПК");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КлючКассыНСПК) Тогда
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Объект.Ссылка, КлючКассыНСПК, "КлючКассыНСПК");
		Иначе
			ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Объект.Ссылка, "КлючКассыНСПК");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеНаКлиенте(ПараметрыОперации)
	
	Результат = Истина;
	Если Не ЗначениеЗаполнено(ПараметрыОперации.АдресСервера) Тогда
		ТекстСообщения = НСтр("ru='Необходимо указать адрес сервера'");
		Результат = Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(ПараметрыОперации.КлючДоступа) Тогда
		ТекстСообщения = НСтр("ru='Необходимо указать ключ организации'");
		Результат = Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(ПараметрыОперации.ИдентификаторКассы) Тогда
		ТекстСообщения = НСтр("ru='Необходимо указать код кассы'");
		Результат = Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(ПараметрыОперации.КлючКассы) Тогда
		ТекстСообщения = НСтр("ru='Необходимо указать ключ кассы'");
		Результат = Ложь;
	КонецЕсли;
	
	Если Не Результат Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ТестовоеПодключениеЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт 
	
	Если РезультатВыполнения.Результат Тогда
		Сообщить(НСтр("ru='Тест подключения выполнен успешно'"));
	Иначе
		ОписаниеОшибки = НСтр("ru='ОШИБКА: (%1) %2'");
		ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, РезультатВыполнения.КодРезультата, РезультатВыполнения.ОписаниеОшибки); 
		Сообщить(ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
