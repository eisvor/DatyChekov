#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Обновляет данные регламентного задания по текущему объекту.
//
// Параметры:
//  Отказ - Булево - признак отказа от выполнения операции.
//  РасписаниеРегламентногоЗадания - РасписаниеРегламентногоЗадания - расписание.
//  ТекущийОбъект - СправочникОбъект.НастройкиЗагрузкиДанныхСчетчиковПодсчетаПосетителей - объект для оьновления данных
//  
Процедура ОбновитьДанныеРегламентногоЗадания(Отказ, РасписаниеРегламентногоЗадания, ТекущийОбъект) Экспорт
	
	// Получаем регламентное задание по идентификатору, если объект не находим, то создаем новый.
	ИдентификаторЗадания = СоздатьРегламентноеЗаданиеПриНеобходимости(ТекущийОбъект);
	
	// обновляем свойства РЗ
	УстановитьПараметрыРегламентногоЗадания(ИдентификаторЗадания, РасписаниеРегламентногоЗадания, ТекущийОбъект);
	
КонецПроцедуры

// Получает расписание регламентного задания. Если регламентного задание не задано, то возвращает пустое расписание по
// умолчанию.
//
// Параметры:
//  НастройкаРегламентногоЗадания - НастройкаРегламентногоЗадания - настройки регламентного задания.
//
// Возвращаемое задание:
//  РасписаниеРегламентногоЗадания - расписание.
//
Функция РасписаниеВыполненияРегламентногоЗадания(НастройкаРегламентногоЗадания) Экспорт
	
	РегламентноеЗаданиеОбъект = НайтиРегламентноеЗаданиеПоПараметру(НастройкаРегламентногоЗадания.РегламентноеЗаданиеGUID);
	
	Если РегламентноеЗаданиеОбъект <> Неопределено Тогда
		РасписаниеРегламентногоЗадания = РегламентноеЗаданиеОбъект.Расписание;
	Иначе
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Возврат РасписаниеРегламентногоЗадания;
	
КонецФункции

// Получает расписание регламентного задания по умолчанию.
//
// Возвращаемое задание:
//  РасписаниеРегламентногоЗадания - расписание.
//
Функция РасписаниеРегламентногоЗаданияПоУмолчанию() Экспорт
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);
	
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ДниНедели                = ДниНедели;
	Расписание.ПериодПовтораВТечениеДня = 900; // 15 минут
	Расписание.ПериодПовтораДней        = 1; // каждый день
	Расписание.Месяцы                   = Месяцы;
	
	Возврат Расписание;
	
КонецФункции

// Процедура обработчик обновления на версию "2.3.1.21"
//
Процедура ПеренестиПарольВБезопасноеХранилище() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиЗагрузкиДанныхСчетчиковПодсчетаПосетителей.Ссылка КАК Ссылка,
	|	НастройкиЗагрузкиДанныхСчетчиковПодсчетаПосетителей.УдалитьFTPСоединениеПароль КАК Пароль
	|ИЗ
	|	Справочник.НастройкиЗагрузкиДанныхСчетчиковПодсчетаПосетителей КАК НастройкиЗагрузкиДанныхСчетчиковПодсчетаПосетителей
	|ГДЕ
	|	НастройкиЗагрузкиДанныхСчетчиковПодсчетаПосетителей.УдалитьFTPСоединениеПароль <> """"
	|	И НастройкиЗагрузкиДанныхСчетчиковПодсчетаПосетителей.ВидТранспортаСообщенийОбменаПоУмолчанию = ЗНАЧЕНИЕ(Перечисление.ВидыТранспортаСообщенийОбмена.FTP)";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.НастройкиЗагрузкиДанныхСчетчиковПодсчетаПосетителей");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				Блокировка.Заблокировать();
				
				ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Выборка.Ссылка, Выборка.Пароль);
				
				НастройкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
				НастройкаОбъект.УдалитьFTPСоединениеПароль = "";
				НастройкаОбъект.ОбменДанными.Загрузка = Истина;
				НастройкаОбъект.Записать();;
				
				ЗафиксироватьТранзакцию();
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстСообщения = НСтр("ru = 'Не удалось обработать: %НастройкуЗагрузкиДанныхСчетчиков% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НастройкуЗагрузкиДанныхСчетчиков%", Выборка.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Справочники.НастройкиЗагрузкиДанныхСчетчиковПодсчетаПосетителей, Выборка.Ссылка, ТекстСообщения);
				
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоздатьРегламентноеЗаданиеПриНеобходимости(ТекущийОбъект)
	
	РегламентноеЗадание = НайтиРегламентноеЗаданиеПоПараметру(ТекущийОбъект.РегламентноеЗаданиеGUID);
	
	// При необходимости создаем регламентное задание.
	Если РегламентноеЗадание = Неопределено Тогда
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Метаданные"   , Метаданные.РегламентныеЗадания.ЗагрузкаДанныхСчетчиковПодсчетаПосетителей);
		ПараметрыЗадания.Вставить("ОбластьДанных", РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
		ПараметрыЗадания.Вставить("Использование", Ложь);
		ПараметрыЗадания.Вставить("ИмяМетода"    , "Посетители.ЗагрузитьВнешниеДанныеПоРегламентномуЗаданию");
		ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 3);
		РегламентноеЗадание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
		ТекущийОбъект.РегламентноеЗаданиеGUID = РегламентныеЗаданияРТ.ИдентификаторЗадания(РегламентноеЗадание);
		Возврат ТекущийОбъект.РегламентноеЗаданиеGUID;
	Иначе
		Возврат РегламентныеЗаданияРТ.ИдентификаторЗадания(РегламентноеЗадание);
	КонецЕсли;
	
КонецФункции

Процедура УстановитьПараметрыРегламентногоЗадания(ИдентификаторЗадания, РасписаниеРегламентногоЗадания, ТекущийОбъект)
	
	Если ПустаяСтрока(ТекущийОбъект.Код) Тогда
		ТекущийОбъект.УстановитьНовыйКод();
	КонецЕсли;
	
	ПараметрыРегламентногоЗадания = Новый Массив;
	ПараметрыРегламентногоЗадания.Добавить(ТекущийОбъект.Код);
	
	НаименованиеРегламентногоЗадания = НСтр("ru = 'Загрузка данных счетчиков подсчета посетителей: %1'");
	НаименованиеРегламентногоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НаименованиеРегламентногоЗадания, СокрЛП(ТекущийОбъект.Наименование));
	
	ПараметрыЗадания = Новый Структура;
	// Обновляем расписание, если оно было изменено.
	Если РасписаниеРегламентногоЗадания <> Неопределено Тогда
		ПараметрыЗадания.Вставить("Расписание", РасписаниеРегламентногоЗадания);
	КонецЕсли;
	ПараметрыЗадания.Вставить("Наименование"  , Лев(НаименованиеРегламентногоЗадания, 120));
	ПараметрыЗадания.Вставить("Использование" , ТекущийОбъект.ИспользоватьРегламентноеЗадание);
	ПараметрыЗадания.Вставить("Параметры"     , ПараметрыРегламентногоЗадания);
	
	РегламентныеЗаданияСервер.ИзменитьЗадание(ИдентификаторЗадания, ПараметрыЗадания);
	
КонецПроцедуры

// Находит регламентное задание по GUID.
//
// Параметры:
//  Идентификатор - Строка - строка с GUID регламентного задания.
// 
// Возвращаемое значение:
//  Неопределено        - если поиск регламентного задания по GUID не дал результатов или.
//  РегламентноеЗадание - найденное по GUID регламентное задание.
//
Функция НайтиРегламентноеЗаданиеПоПараметру(Знач Идентификатор)
	
	Если ПустаяСтрока(Идентификатор) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОтбора = РегламентныеЗаданияРТ.ПараметрыПоискаЗаданий(
	Новый УникальныйИдентификатор(Идентификатор),
	Метаданные.РегламентныеЗадания.ЗагрузкаДанныхСчетчиковПодсчетаПосетителей);
	
	УстановитьПривилегированныйРежим(Истина);
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора);
	
	Если Задания.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Задания[0];
	
КонецФункции
#КонецОбласти

#КонецЕсли
