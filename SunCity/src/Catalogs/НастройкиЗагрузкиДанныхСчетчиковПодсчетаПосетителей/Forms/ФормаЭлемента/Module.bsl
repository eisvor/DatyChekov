
#Область ОписаниеПеременных

&НаКлиенте
Перем мПредставлениеПустогоРасписания;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Обработчик события завершения редактирования расписания.
//
// Параметры:
//  Расписание - РасписаниеРегламентногоЗадания - расписание объекта.
//  ДополнительныеПараметры - Структура - структура дополнительных параметров.
//
&НаКлиенте
Процедура РедактированиеРасписанияЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание <> Неопределено Тогда
		РасписаниеРегламентногоЗадания = Расписание;
		ОбновитьПредставлениеРасписания();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.FTPСоединениеПорт = 21;
		РасписаниеРегламентногоЗадания = Справочники.НастройкиЗагрузкиДанныхСчетчиковПодсчетаПосетителей.РасписаниеРегламентногоЗаданияПоУмолчанию();
	Иначе
		РасписаниеРегламентногоЗадания = Справочники.НастройкиЗагрузкиДанныхСчетчиковПодсчетаПосетителей.РасписаниеВыполненияРегламентногоЗадания(Объект.Ссылка);
		УстановитьПривилегированныйРежим(Истина);
		ПарольИзХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Объект.Ссылка, "Пароль");
		УстановитьПривилегированныйРежим(Ложь);
		Пароль = ?(ЗначениеЗаполнено(ПарольИзХранилища), ЭтотОбъект.УникальныйИдентификатор, "");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидТранспортаСообщенийОбменаПоУмолчанию) Тогда
	
		Объект.ВидТранспортаСообщенийОбменаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FILE;
	
	КонецЕсли;
	
	УстановитьВидимостьСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	мПредставлениеПустогоРасписания = Строка(Новый РасписаниеРегламентногоЗадания);
	
	ОбновитьПредставлениеРасписания();
	
	УстановитьДоступностьГиперссылкиНастройкиРасписания();
	
	УстановитьВидимостьЗаголовкаГруппыСтраниц();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Справочники.НастройкиЗагрузкиДанныхСчетчиковПодсчетаПосетителей.ОбновитьДанныеРегламентногоЗадания(Отказ, РасписаниеРегламентногоЗадания, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьВидимостьСервер();
	
	Если ПарольИзменен Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ТекущийОбъект.Ссылка, Пароль);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидТранспортаСообщенийОбменаПоУмолчаниюПриИзменении(Элемент)
	
	УстановитьВидимостьСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура FILEКаталогОбменаИнформациейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	МодульОбменДанными = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбменДаннымиКлиент");
	МодульОбменДанными.ОбработчикВыбораФайловогоКаталога(Объект, "FILEКаталогОбменаИнформацией", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНеСтандартныйАлгоритмПриИзменении(Элемент)
	
	Элементы.СтраницаАлгоритмы.Видимость = Объект.ИспользоватьНеСтандартныйАлгоритм;
	УстановитьВидимостьЗаголовкаГруппыСтраниц();
	
	Элементы.ГруппаВнешняяОбработка.Видимость = Объект.ИспользоватьНеСтандартныйАлгоритм;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРегламентноеЗаданиеПриИзменении(Элемент)
	
	УстановитьДоступностьГиперссылкиНастройкиРасписания();
	
КонецПроцедуры

&НаКлиенте
Процедура FTPСоединениеПарольПриИзменении(Элемент)
	ПарольИзменен = Истина;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьРасписаниеРегламентногоЗаданияВыполнить()
	
	РедактироватьРасписанияРегламентногоЗадания();
	
	ОбновитьПредставлениеРасписания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеFILE(Команда)
	
	ПроверитьПодключение("FILE");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеFTP(Команда)
	Если Объект.Ссылка.Пустая() ИЛИ ПарольИзменен Тогда
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны. Выполнить проверку подключения возможно только после записи данных.
		|Данные будут записаны.'");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВидТранспорта", "FTP");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписатьЗаписатьНастройкуЗагрузкиДанныхСчетчиковПодтверждениеЗаписи", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ПроверитьПодключение("FTP");
	КонецЕсли;
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимостьЗаголовкаГруппыСтраниц()
	
	Если Объект.ИспользоватьНеСтандартныйАлгоритм Тогда
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	Иначе
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключение(ВидТранспорта)
	
	Отказ = Ложь;
	
	ПроверитьПодключениеНаСервере(Отказ, ВидТранспорта);
	
	СтрокаСообщения = ?(Отказ,  НСтр("ru = 'Ошибка установки подключения.'"), НСтр("ru = 'Подключение успешно установлено.'"));
	
	ПоказатьПредупреждение( , СтрокаСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗаписатьНастройкуЗагрузкиДанныхСчетчиковПодтверждениеЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Записать() Тогда
		Возврат;
	Иначе
		ПарольИзменен = Ложь;
	КонецЕсли;
	
	ПроверитьПодключение(ДополнительныеПараметры.ВидТранспорта);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПодключениеНаСервере(Отказ, ВидТранспортаСтрокой)
	
	Если ВидТранспортаСтрокой = "FTP" Тогда
		РеквизитыFTP = "FTPСоединениеПуть, FTPСоединениеПорт,
		|FTPСоединениеПользователь, FTPСоединениеМаксимальныйДопустимыйРазмерСообщения, FTPСоединениеПассивноеСоединение";
		СтруктураНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, РеквизитыFTP);
		
		УстановитьПривилегированныйРежим(Истина);  //Пароль из безопасного хранилища
		ПарольИзХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Объект.Ссылка, "Пароль");
		УстановитьПривилегированныйРежим(Ложь);
		СтруктураНастроек.Вставить("FTPСоединениеПароль", ПарольИзХранилища);
	Иначе
		СтруктураНастроек = Объект;
	КонецЕсли;
	
	МодульОбменДанными = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
	МодульОбменДанными.ПроверитьПодключениеОбработкиТранспортаСообщенийОбмена(Отказ, СтруктураНастроек, Перечисления.ВидыТранспортаСообщенийОбмена[ВидТранспортаСтрокой]);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьРасписанияРегламентногоЗадания()
	
	// Если расписание не инициализировано в форме на сервере, то создаем новое.
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
		
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	
	// Открываем диалог для редактирования Расписания.
	ОбработчикОповещения = Новый ОписаниеОповещения("РедактированиеРасписанияЗавершение", ЭтотОбъект);
	Диалог.Показать(ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеРасписания()
	
	ПредставлениеРасписания = Строка(РасписаниеРегламентногоЗадания);
	
	Если ПредставлениеРасписания = мПредставлениеПустогоРасписания Тогда
		
		ПредставлениеРасписания = НСтр("ru = 'Расписание не задано'");
		
	КонецЕсли;
	
	Элементы.НастроитьРасписаниеРегламентногоЗадания.Заголовок = ПредставлениеРасписания;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьГиперссылкиНастройкиРасписания()
	
	Элементы.НастроитьРасписаниеРегламентногоЗадания.Доступность = Объект.ИспользоватьРегламентноеЗадание;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСервер()
	
	Элементы.СтраницаFILE.Видимость = Объект.ВидТранспортаСообщенийОбменаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FILE;
	Элементы.СтраницаFTP.Видимость  = Объект.ВидТранспортаСообщенийОбменаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FTP;
	Элементы.СтраницаАлгоритмы.Видимость = Объект.ИспользоватьНеСтандартныйАлгоритм;
	Элементы.ГруппаВнешняяОбработка.Видимость = Объект.ИспользоватьНеСтандартныйАлгоритм;
	Если ЗначениеЗаполнено(Объект.АлгоритмИсполнения) Тогда
		Элементы.ВнешняяОбработка.РасширеннаяПодсказка.Заголовок = НСтр("ru = 'Код на вкладке Алгоритм больше не используется,
																	|перенесите код алгоритма в Дополнительные отчеты и обработки.'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
