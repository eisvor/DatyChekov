
#Область ОписаниеПеременных

// Структура с возможными вариантами типов элементов палитры: 0 - позиция, 1 - модификатор.
&НаКлиенте
Перем ТипыЭлементовПалитры;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияРМККлиент.ПодключитьОборудованиеПоТипу(Неопределено,
		УникальныйИдентификатор, ПоддерживаемыеТипыПодключаемогоОборудования);
	ИнициализироватьКлиентскиеПеречисленияФормы();
	УстановитьВидимостьПредпросмотра();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	МенеджерОборудованияРМККлиент.ОтключитьОборудованиеПоТипу(Неопределено,
		УникальныйИдентификатор, ПоддерживаемыеТипыПодключаемогоОборудования);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Файл" Тогда
		
		Если Параметр.Свойство("ВладелецФайла") И Параметр.ВладелецФайла = Объект.Ссылка Тогда
			
			Если Не ЗначениеЗаполнено(Источник)
				Или (ТипЗнч(Источник) = Тип("Массив")
				И Источник.Количество() = 0) Тогда
				Возврат;
			КонецЕсли;
			
			СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
			
			ДанныеУзла = ВыбраннаяСтрокаДереваИзбранныхТоваров();
			
			Если ДанныеУзла.ЭтоНекорневойУзелДерева Тогда
				
				ТекущаяСтрокаДерева = ДанныеУзла.УзелДерева;
				ТекущаяСтрокаДерева.ИзображениеЭлемента = СсылкаНаФайл;
				Модифицированность = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЦветаФормы = ОбщегоНазначенияРМК.ЦветаФормыРМК();
	
	ИспользоватьУпаковки = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьИспользованиеУпаковок(ИспользоватьУпаковки);
	Элементы.ИерархияТоваровУпаковка.Видимость = ИспользоватьУпаковки;
	
	ИспользоватьХарактеристики = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьИспользованиеХарактеристик(ИспользоватьХарактеристики);
	
	Если ЗначениеЗаполнено(Объект.ШрифтЭлементовПодбора) Тогда
		ШрифтЭлементовПодбора = ОбщегоНазначения.ЗначениеИзСтрокиXML(Объект.ШрифтЭлементовПодбора);
	Иначе
		УстановитьШрифтПоУмолчанию();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		И Параметры.Свойство("ЗначениеКопирования")
		И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ЗаполнитьИерархиюПалитрыТоваров(Параметры.ЗначениеКопирования);
	Иначе
		ЗаполнитьИерархиюПалитрыТоваров();
	КонецЕсли;
	
	// Подключение сканера шк
	ИнициализироватьФормуПалитрыНастроек();
	ИнтерфейсРМКСлужебный.УстановитьУсловноеОформлениеИерархииБыстрыхТоваров(ЭтотОбъект);
	ОбщегоНазначенияРМК.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	ОбщегоНазначенияРМК.НастроитьДоступныеСпособыЗаполненияПалитры(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ШрифтСтрокой = ОбщегоНазначения.ЗначениеВСтрокуXML(ШрифтЭлементовПодбора);
	
	Если ТекущийОбъект.ШрифтЭлементовПодбора <> ШрифтСтрокой Тогда
		ТекущийОбъект.ШрифтЭлементовПодбора = ШрифтСтрокой;
	КонецЕсли;
	
	СоставПалитры = ТекущийОбъект.Состав.Выгрузить();
	СоставПалитры.Очистить();
	ИнтерфейсРМКСлужебный.ЗаполнитьСоставПалитрыИзбранногоПоДаннымДерева(СоставПалитры, ИерархияТоваров);
	СоставПалитры.ЗаполнитьЗначения(ШрифтСтрокой, "Шрифт");
	
	ТекущийОбъект.Состав.Загрузить(СоставПалитры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("СсылкаПалитры", Объект.Ссылка);
	Оповестить("ПерезаполнитьБыстрыеТоварыВНастройкеРМК", ПараметрыОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Корень = КореньДереваСервер();
	Если Корень.ПолучитьЭлементы().Количество() = 0 Тогда
		
		ТекстОшибки = НСтр("ru = 'Не введено ни одной строки в структуру плиточного интерфейса подбора.'");
		ОбщегоНазначения.СообщитьПользователю(
			ТекстОшибки,
			Объект.Ссылка,
			"ИерархияТоваров",,
			Отказ);
			
	Иначе
		
		ПалитраСодержитКатегории = Ложь;
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	СтруктураПлиточногоИнтерфейсаПодбораРМКСостав.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	Справочник.ПалитраТоваровРМК.Состав КАК СтруктураПлиточногоИнтерфейсаПодбораРМКСостав
			|ГДЕ
			|	СтруктураПлиточногоИнтерфейсаПодбораРМКСостав.ЭтоКатегория
			|	И СтруктураПлиточногоИнтерфейсаПодбораРМКСостав.НомерКатегорииРазмещения = 0
			|	И СтруктураПлиточногоИнтерфейсаПодбораРМКСостав.Ссылка = &Ссылка");
			Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
			
			ПалитраСодержитКатегории = НЕ Запрос.Выполнить().Пустой();
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.КоличествоЭлементовВРяду) Тогда
			
			ТекстОшибки = НСтр("ru = 'Не заполнено значение настройки ""Количество элементов в ряду""'");
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				Объект.Ссылка,
				"Объект.КоличествоЭлементовВРяду", , Отказ);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.КоличествоРядов) Тогда
			
			ТекстОшибки = НСтр("ru = 'Не заполнено значение настройки ""Количество рядов""'");
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				Объект.Ссылка,
				"Объект.КоличествоРядов", , Отказ);
			
		КонецЕсли;
		
		ОбработкаПроверкиЗаполненияЭлементовДереваНаСервере(Отказ, Корень.ПолучитьЭлементы());
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.ПалитраТоваровРМК");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	РезультатПроверки = ОбщегоназначенияРМК.ПолучитьРезультатПроверкиЗацикленностиПалитры(ТекущийОбъект.Ссылка,
		Неопределено);
	Если РезультатПроверки.ЕстьЗацикливание Тогда
		ОбщегоНазначения.СообщитьПользователю(РезультатПроверки.ТекстОшибки, , , , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШрифтЭлементовПодбораПриИзменении(Элемент)
	
	ДанныеИзменены = (ШрифтЭлементовПодбора <> Объект.ШрифтЭлементовПодбора);
	Модифицированность = ДанныеИзменены;
	
КонецПроцедуры

&НаКлиенте
Процедура ШрифтЭлементовПодбораОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УстановитьШрифтПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ИнтерфейсРМКСлужебныйКлиент.ПронумероватьИерархиюПалитрыТоваров(ИерархияТоваров);
	
КонецПроцедуры

&НаКлиенте
Процедура СлужебнаяПриИзменении(Элемент)
	
	УстановитьВидимостьПредпросмотра();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИерархияТоваров

&НаКлиенте
Процедура ИерархияТоваровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = ИерархияТоваров.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ЗначениеЗаполнено(ТекущаяСтрока.Палитра) Тогда
		
		ПоказатьЗначение(, ТекущаяСтрока.Палитра);
		
	ИначеЕсли Поле.Имя = "ИерархияТоваровИзображениеЭлемента" Тогда
		
		СтандартнаяОбработка = Ложь;
		Если НЕ (ТекущаяСтрока = КореньДерева() Или ЗначениеЗаполнено(ТекущаяСтрока.Палитра)) Тогда
		
			Если ЗначениеЗаполнено(ТекущаяСтрока.ИзображениеЭлемента) Тогда
				
				ЗаблокироватьДанныеФормыДляРедактирования();
				ДобавитьПросмотретьИзображениеПозиции();
				
			ИначеЕсли Не ТолькоПросмотр Тогда
				ДобавитьИзображениеКлиент();
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ДобавитьПозицию();
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.ИерархияТоваров.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		
		ИндексКорневогоЭлемента = ИерархияТоваров.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		Если Не ВыделенныеСтроки.Найти(ИндексКорневогоЭлемента)= Неопределено Тогда
			
			ЗаголовокПредупреждения = НСтр("ru = 'Удаление строк'");
			ТекстПредупреждения = НСтр("ru = 'Снимите выделение с корневого элемента для удаления строк.'");
			ПоказатьПредупреждение(, ТекстПредупреждения, , ЗаголовокПредупреждения);
			Отказ = Истина;
			
		КонецЕсли;
		
		Если Не Отказ Тогда
			
			Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
				
				УдаляемаяСтрока = ИерархияТоваров.НайтиПоИдентификатору(ВыделеннаяСтрока);
				Если ЗначениеЗаполнено(УдаляемаяСтрока.ВидМодификатора) Тогда
					
					Родитель = УдаляемаяСтрока.ПолучитьРодителя();
					
					Если Родитель.ЭтоКатегория Тогда
						ОсталисьГрупповыеМодификаторы = Ложь;
						ВложенныеЭлементыРодителя = Родитель.ПолучитьЭлементы();
						Для Каждого ВложенныйЭлементРодителя Из ВложенныеЭлементыРодителя Цикл
							Если НЕ ЗначениеЗаполнено(ВложенныйЭлементРодителя.ВидМодификатора) Тогда
								Продолжить;
							КонецЕсли;
							Идентификатор = ВложенныйЭлементРодителя.ПолучитьИдентификатор();
							Если ВыделенныеСтроки.Найти(Идентификатор)= Неопределено Тогда
								ОсталисьГрупповыеМодификаторы = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Для Каждого ВложенныйЭлементРодителя Из ВложенныеЭлементыРодителя Цикл
							Если ВложенныйЭлементРодителя.ЭтоКатегория Тогда
								Продолжить;
							КонецЕсли;
							Идентификатор = ВложенныйЭлементРодителя.ПолучитьИдентификатор();
							Если ВыделенныеСтроки.Найти(Идентификатор)= Неопределено Тогда
								ИмеетсяВложенность = ВложенныйЭлементРодителя.ПолучитьЭлементы().Количество() > 0 
									ИЛИ ОсталисьГрупповыеМодификаторы;
								ВложенныйЭлементРодителя.ИмеетсяВложенность = ИмеетсяВложенность;
								Если НЕ ИмеетсяВложенность Тогда
									ВложенныйЭлементРодителя.НомерКатегории = 0;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					Иначе
						ИмеетсяВложенность = Ложь;
						ВложенныеЭлементыРодителя = Родитель.ПолучитьЭлементы();
						Для Каждого ВложенныйЭлементРодителя Из ВложенныеЭлементыРодителя Цикл
							Идентификатор = ВложенныйЭлементРодителя.ПолучитьИдентификатор();
							Если ВыделенныеСтроки.Найти(Идентификатор)= Неопределено Тогда
								ИмеетсяВложенность = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Родитель.ИмеетсяВложенность = ИмеетсяВложенность;
						Если НЕ ИмеетсяВложенность Тогда
							Родитель.НомерКатегории = 0;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДанныеУзла = ВыбраннаяСтрокаДереваИзбранныхТоваров();

	Если Не ДанныеУзла.ЭтоНекорневойУзелДерева Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДанныеУзла.УзелДерева;
	
	Если ТипЗнч(ВыбранноеЗначение) =
			Тип("СправочникСсылка.ПалитраТоваровРМКПрисоединенныеФайлы") Тогда
		ТекущаяСтрока.ИзображениеЭлемента = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Элемент.Имя = "ИерархияТоваров" Тогда
		
		ИдентификаторЭлемента = ПараметрыПеретаскивания.Значение[0];
		ЭлементДерева = ИерархияТоваров.НайтиПоИдентификатору(ИдентификаторЭлемента);
		
		Если ЭлементДерева = КореньДерева() Тогда
			Выполнение = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементДерева.ВидМодификатора) Тогда
			Выполнение = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Элемент.Имя = "ИерархияТоваров" Тогда
		
		ИдентификаторЭлемента = ПараметрыПеретаскивания.Значение[0];
		ЭлементДерева = ИерархияТоваров.НайтиПоИдентификатору(ИдентификаторЭлемента);
		ИдентификаторРодителя = Строка;
		КорневойЭлемент = КореньДерева();
		
		Если ИдентификаторРодителя = Неопределено Тогда
			ИдентификаторРодителя = КорневойЭлемент.ПолучитьИдентификатор();
		КонецЕсли;
		
		РодительскийЭлемент = ИерархияТоваров.НайтиПоИдентификатору(ИдентификаторРодителя);
		
		Если Не
			(ЭлементДерева = Неопределено ИЛИ РодительскийЭлемент = Неопределено) Тогда
			
			Если ЭлементДерева.ЭтоКатегория Тогда
				
				Если (РодительскийЭлемент.ПолучитьРодителя() = ЭлементДерева)
					Или (Не (РодительскийЭлемент.ЭтоКатегория
							Или РодительскийЭлемент.ПолучитьРодителя() = ЭлементДерева.ПолучитьРодителя()))
					Или (РодительскийЭлемент = КорневойЭлемент) Тогда
					
						ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
						СтандартнаяОбработка = Ложь;
						
				КонецЕсли;
				
			ИначеЕсли Не РодительскийЭлемент.ЭтоКатегория ИЛИ РодительскийЭлемент = КорневойЭлемент Тогда
				ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Элемент.Имя = "ИерархияТоваров" Тогда
		
		ИдентификаторЭлемента = ПараметрыПеретаскивания.Значение[0];
		ЭлементДерева = ИерархияТоваров.НайтиПоИдентификатору(ИдентификаторЭлемента);
		
		ИдентификаторРодителя = Строка;
		РодительскийЭлемент = ИерархияТоваров.НайтиПоИдентификатору(ИдентификаторРодителя);
		
		Если Не
			(ЭлементДерева = Неопределено ИЛИ РодительскийЭлемент = Неопределено) Тогда
			
			Если НЕ ЭлементДерева.ЭтоКатегория Тогда
				
				ВложенныеЭлементы = ЭлементДерева.ПолучитьЭлементы();
				Если ВложенныеЭлементы.Количество() = 0 Тогда
					
					ИмеютсяГрупповыеИдентификаторы = Ложь;
					ЭлементыРодителя = РодительскийЭлемент.ПолучитьЭлементы();
					Для Каждого ЭлементРодителя Из ЭлементыРодителя Цикл
						Если ЗначениеЗаполнено(ЭлементРодителя.ВидМодификатора) Тогда
							ИмеютсяГрупповыеИдентификаторы = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					ЭлементДерева.ИмеетсяВложенность = ИмеютсяГрупповыеИдентификаторы;
					Если Не ИмеютсяГрупповыеИдентификаторы Тогда
						ЭлементДерева.НомерКатегории = 0;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = ТекущаяСтрокаДереваТоваров();

	Если Не ТекущаяСтрока = Неопределено Тогда
		
		Номенклатура = ТекущаяСтрока.Номенклатура;
		ХарактеристикиИспользуются = ПроверитьПрименениеХарактеристикДляНоменклатуры(Номенклатура);
		ТекущаяСтрока.ХарактеристикиИспользуются = ХарактеристикиИспользуются;
		ТекущаяСтрока.Характеристика = Неопределено;
		ТекущаяСтрока.Упаковка = Неопределено;
		ОбщегоНазначенияРМККлиент.ЗаполнитьИмяЭлементаВСтрокеСоставаПалитры(ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = ТекущаяСтрокаДереваТоваров();
	ОбщегоНазначенияРМККлиент.ЗаполнитьИмяЭлементаВСтрокеСоставаПалитры(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = ТекущаяСтрокаДереваТоваров();
	Если Не ТекущаяСтрока = Неопределено Тогда
		
		Номенклатура = ТекущаяСтрока.Номенклатура;
		
		ПараметрыВыбораХарактеристики = Новый Структура;
		ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьПараметрыВыбораХарактеристик(ПараметрыВыбораХарактеристики,
			Номенклатура, СтандартнаяОбработка);
			
			Если Не СтандартнаяОбработка Тогда
				ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора",
					ПараметрыВыбораХарактеристики,
					Элемент);
			КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровИзображениеЭлементаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьПросмотретьИзображениеПозиции();
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровВидМодификатораПриИзменении(Элемент)
	
	ТекущаяСтрока = ТекущаяСтрокаДереваТоваров();
	
	Если Не ТекущаяСтрока = Неопределено Тогда
		
		КореньДерева = КореньДерева();
		РодительМодификатора = ТекущаяСтрока.ПолучитьРодителя();
		
		Если ТекущаяСтрока.ЭтоКатегория ИЛИ (ТекущаяСтрока.ПолучитьЭлементы().Количество() > 0) ИЛИ 
			РодительМодификатора = КореньДерева ИЛИ ТекущаяСтрока = КореньДерева Тогда
			ТекущаяСтрока.ВидМодификатора = ПредопределенноеЗначение("Перечисление.ВидыМодификаторовРМК.ПустаяСсылка");
			Возврат;
		КонецЕсли;
		
		Если НЕ РодительМодификатора = Неопределено И РодительМодификатора.ЭтоКатегория Тогда
			ВложенныеЭлементы = РодительМодификатора.ПолучитьЭлементы();
			Для Каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл
				Если НЕ ЗначениеЗаполнено(ВложенныйЭлемент.ВидМодификатора) И Не ВложенныйЭлемент.ЭтоКатегория Тогда
					ВложенныйЭлемент.ИмеетсяВложенность = Истина;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекущаяСтрока.ВидМодификатора) Тогда
			ТекущаяСтрока.ВидМодификатора = ПредопределенноеЗначение("Перечисление.ВидыМодификаторовРМК.ВключатьВЧек")
		КонецЕсли;
		
		Родитель = ТекущаяСтрока.ПолучитьРодителя();
		Если Родитель.ЭтоКатегория Тогда
			ОсталисьГрупповыеМодификаторы = Ложь;
			ВложенныеЭлементыРодителя = Родитель.ПолучитьЭлементы();
			Для Каждого ВложенныйЭлементРодителя Из ВложенныеЭлементыРодителя Цикл
				Если ЗначениеЗаполнено(ВложенныйЭлементРодителя.ВидМодификатора) Тогда
					ОсталисьГрупповыеМодификаторы = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ВложенныйЭлементРодителя Из ВложенныеЭлементыРодителя Цикл
				Если ВложенныйЭлементРодителя.ЭтоКатегория Тогда
					Продолжить;
				КонецЕсли;
				
				ИмеетсяВложенность = (ВложенныйЭлементРодителя.ПолучитьЭлементы().Количество() > 0 
					ИЛИ ОсталисьГрупповыеМодификаторы) И НЕ ЗначениеЗаполнено(ВложенныйЭлементРодителя.ВидМодификатора);
				ВложенныйЭлементРодителя.ИмеетсяВложенность = ИмеетсяВложенность;
				Если НЕ ИмеетсяВложенность Тогда
					ВложенныйЭлементРодителя.НомерКатегории = 0;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
			
		НомерИзображения = 2;
		Если ТекущаяСтрока.ВидМодификатора = ПредопределенноеЗначение("Перечисление.ВидыМодификаторовРМК.ВключатьВЧек") Тогда
			НомерИзображения = 3;
			ТекущаяСтрока.ЦветФона = ЦветаФормы.ЗеленаяКнопка;
			ТекущаяСтрока.ИмеетсяВложенность = Ложь;
			ТекущаяСтрока.НомерКатегории = 0;
		ИначеЕсли ТекущаяСтрока.ВидМодификатора = ПредопределенноеЗначение("Перечисление.ВидыМодификаторовРМК.НеВключатьВЧек") Тогда
			НомерИзображения = 4;
		ИначеЕсли ТекущаяСтрока.ЭтоКатегория  Тогда
			НомерИзображения = 1;
		Иначе
			ТекущаяСтрока.ЦветФона = ЦветаФормы.АктивнаяКнопка;
		КонецЕсли;
		
		ТекущаяСтрока.НомерИзображения = НомерИзображения;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = ТекущаяСтрокаДереваТоваров();
	Если Не ТекущаяСтрока = Неопределено Тогда
		
		Номенклатура = ТекущаяСтрока.Номенклатура;
		
		ПараметрыВыбораУпковки = Новый Структура;
		ПараметрыВыбораУпковки.Вставить("Номенклатура", Номенклатура);;
		
		ОбщегоНазначенияРМККлиентПереопределяемый.ОткрытьФормуВыбораУпаковки(
			ПараметрыВыбораУпковки, Элемент, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = ТекущаяСтрокаДереваТоваров();
	ОбщегоНазначенияРМККлиент.ЗаполнитьИмяЭлементаВСтрокеСоставаПалитры(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияТоваровПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьДобавленияМодификатора();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьИзображениеИзПрисоединенныхФайлов(Команда)
	
	ДанныеУзла = ВыбраннаяСтрокаДереваИзбранныхТоваров();
	
	Если Не ДанныеУзла.ЭтоНекорневойУзелДерева Тогда
	
		ПоказатьПредупреждение(, 
			НСтр("ru = 'Выберите строку для выбора изображения из присоединенных файлов.'"),
			, НСтр("ru = 'Выбор изображения из присоединенных файлов'"));
		Возврат;
		
	КонецЕсли;

	РаботаСФайламиКлиент.ОткрытьФормуВыбораФайлов(Объект.Ссылка, Элементы.ИерархияТоваров);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	ДобавитьИзображениеКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКатегорию(Команда)
	
	ТекущаяСтрока = ТекущаяСтрокаДереваТоваров();
	ТекущаяГруппа = ПолучитьБлижайшуюГруппу(ТекущаяСтрока);
	ИдентификаторГруппы = ТекущаяГруппа.ПолучитьИдентификатор();
	ЭлементыГруппы = ТекущаяГруппа.ПолучитьЭлементы();
	
	НоваяКатегория = ЭлементыГруппы.Добавить();
	НоваяКатегория.ЭтоКатегория = Истина;
	НоваяКатегория.НомерИзображения = 1;
	НоваяКатегория.ЦветФона = ОбщегоНазначенияВызовСервера.ЦветСтиля("ЦветПапкиКнопкиРМК");
	
	Элементы.ИерархияТоваров.Развернуть(ИдентификаторГруппы);
	Элементы.ИерархияТоваров.ТекущаяСтрока = НоваяКатегория.ПолучитьИдентификатор();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПалитру(Команда)
	
	ДобавитьПалитруКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМодификатор(Команда)
	
	ДобавитьМодификаторКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображение(Команда)
	
	ДанныеУзла = ВыбраннаяСтрокаДереваИзбранныхТоваров();
	
	Если НЕ ДанныеУзла.ЭтоНекорневойУзелДерева Тогда
		
		ПоказатьПредупреждение(, 
			НСтр("ru = 'Выберите строку для редактирования изображения из присоединенных файлов.'"),
			, НСтр("ru = 'Редактирование изображение'") );
		Возврат
		
	КонецЕсли;
	
	ТекущаяСтрока = ДанныеУзла.УзелДерева;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ИзображениеЭлемента) Тогда
		РаботаСФайламиКлиент.ОткрытьФормуФайла(ТекущаяСтрока.ИзображениеЭлемента);
	Иначе
		
		ПоказатьПредупреждение(,
			НСтр("ru = 'Отсутствует изображение для редактирования.'"),
			, НСтр("ru = 'Редактирование изображение'") );
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПозициюПоШтрихкоду(Команда)
	РаботаСоШтрихкодамиКлиентПереопределяемый.ВвестиШтрихкод(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбора(Команда)
	
	ЗаголовокФормыПодбора = СтрШаблон(НСтр("ru = 'Подбор товаров в структуру плиточного интерфейса подбора %1'"),
			?(ЗначениеЗаполнено(Объект.Ссылка),
				Объект.Ссылка,
				НСтр("ru = ''")));
				
	ОповещениеОВыборе = Новый ОписаниеОповещения("ЗавершениеОбработкиПодбораТоваров", ЭтотОбъект);
				
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Заголовок", ЗаголовокФормыПодбора);
	ПараметрыОткрытия.Вставить("КлючУникальности", УникальныйИдентификатор);

	ОбщегоНазначенияРМККлиент.ЗаполнитьПараметрыОткрытияФормыПодбораВСоставПалитрыТоваров(ПараметрыОткрытия);
	ОбщегоНазначенияРМККлиент.ОткрытьИнтерфейсПодбораНоменклатуры(ЭтотОбъект, ПараметрыОткрытия, ОповещениеОВыборе);
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	ПросмотретьПрисоединенныйФайл();
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеКатегории(Команда)
	
	Корень = КореньДерева();
	РазвернутьВетви = Истина;
	Элементы.ИерархияТоваров.Развернуть(Корень.ПолучитьИдентификатор(), РазвернутьВетви);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсеКатегории(Команда)
	
	Корень = КореньДерева();
	Ветви = Корень.ПолучитьЭлементы();
	
	Для Каждого Ветвь Из Ветви Цикл
	
		Если Ветвь.ЭтоКатегория Тогда
			Элементы.ИерархияТоваров.Свернуть(Ветвь.ПолучитьИдентификатор());
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьИзображение(Команда)
	
	ДанныеУзла = ВыбраннаяСтрокаДереваИзбранныхТоваров();

	Если Не ДанныеУзла.ЭтоНекорневойУзелДерева Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДанныеУзла.УзелДерева;
		
	РаботаСФайламиКлиент.ОткрытьФормуВыбораФайлов(ТекущаяСтрока.Номенклатура,
		Элементы.ИерархияТоваров);

КонецПроцедуры

&НаКлиенте
Процедура СформироватьПримерЗаполненияПанели(Команда)
	СформироватьПримерЗаполненияПанелиКлиент();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзображение(Команда)
	
	ДанныеУзла = ВыбраннаяСтрокаДереваИзбранныхТоваров();

	Если Не ДанныеУзла.ЭтоНекорневойУзелДерева Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДанныеУзла.УзелДерева;
		
	ИмяЭлемента = "Справочник.ПалитраТоваровРМКПрисоединенныеФайлы.ПустаяСсылка";
	ТекущаяСтрока.ИзображениеЭлемента = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(ИмяЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМассовоЦветФонаКнопки(Команда)

	ИмяКолонки = "ЦветФона";
	ЗаполнитьЗначениеВыделенныхСтрок(ИмяКолонки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМассовоЦветШрифтаКнопки(Команда)

	ИмяКолонки = "ЦветШрифта";
	ЗаполнитьЗначениеВыделенныхСтрок(ИмяКолонки);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаполнитьНоменклатуру(Команда)
	
	ОбщегоНазначенияРМККлиентПереопределяемый.ЗаполнитьНоменклатуруВПалитре(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗапросФормированияПримераЗаполненияПанели(Ответ, Параметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Если Записать() Тогда
			ЗапросФормированияПримераЗаполненияПанелиЗавершение();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// АПК:78-выкл. обработчик оповещения
&НаКлиенте
Процедура ОповещениеВопросЗаписатьПриДобавленииИзображения(РезультатВыбора, Параметры) Экспорт
// АПК:78-вкл.
	Если РезультатВыбора = КодВозвратаДиалога.Да Тогда
		
		Записать();
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ПостобработкаДобавленияИзображенияЭлементуПалитрыИзбранного();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
		
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		
		РезультатСканирования = ДанныеШтрихКода(Штрихкод); 
		ОбработатьРезультатСканированияКлиент(РезультатСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Штрихкод, ДополнительныеПараметры) Экспорт

	Если Штрихкод <> Неопределено Тогда
		
		ПараметрыДляОбработкиШтрихкода = Неопределено;
		ОбработатьРезультатСканированияКлиент(Штрихкод);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОбработкиРезультатаПоиска(Результат, Параметры) Экспорт
	ПродолжитьОбработкуРезультатаПоискаПоШтрихкодуКлиент(Результат);
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеЗаписиЭлементаПриДобавленииИзображения(Ответ, Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Записать();
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ДобавитьИзображениеЭлементуСтруктуры();
		КонецЕсли;
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'Невозможно добавить изображение без сохранения структуры.'");
		Заголовок = НСтр("ru = 'Добавление изображения'");
		ПоказатьПредупреждение(,ТекстПредупреждения, , Заголовок);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеЗаписиЭлементаПриДобавленииПросмотреИзображения(Ответ, Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Записать();
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ВыполнитьДействиеНадИзображениемПослеДобавленияПросмотра();
		КонецЕсли;
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'Невозможно выполнить действие без сохранения структуры.'");
		Заголовок = НСтр("ru = 'Добавление изображения'");
		ПоказатьПредупреждение(,ТекстПредупреждения, Заголовок);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОбработкиПодбораТоваров(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ВыполнитьДобавлениеПоПодбору(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеНадИзображениемПослеДобавленияПросмотра()

	ТекущаяСтрока = ТекущаяСтрокаДереваТоваров();
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ИзображениеЭлемента) Тогда
		ПросмотретьПрисоединенныйФайл();
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) И НЕ ТолькоПросмотр Тогда
		ДобавитьИзображениеЭлементуСтруктуры();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеКлиент()

	ДанныеУзла = ВыбраннаяСтрокаДереваИзбранныхТоваров();
	
	Если НЕ ДанныеУзла.ЭтоНекорневойУзелДерева Тогда
		
		ПоказатьПредупреждение(, 
			НСтр("ru = 'Выберите строку для назначения изображения.'"),
			, НСтр("ru = 'Добавление изображения'") );
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru = 'Перед выбором изображения необходимо записать объект. Продолжить?'");
		ОбработчикОповещения = Новый ОписаниеОповещения("ПодтверждениеЗаписиЭлементаПриДобавленииИзображения", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ДобавитьИзображениеЭлементуСтруктуры();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЭлементуСтруктуры()
	
	ЭтоВыборИзображения = Истина;
	ИдентификаторФайла = Новый УникальныйИдентификатор;
	РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, РасширенияИзображений());
	ЭтоВыборИзображения = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьБлижайшуюГруппу(ИсходныйЭлемент)
	
	РезультатФункции = Неопределено;
	КорневойЭлемент = КореньДерева();
	Если ИсходныйЭлемент = Неопределено Тогда
		РезультатФункции = КорневойЭлемент;
	Иначе
		ЭлементПалитры = ИсходныйЭлемент;
		Пока Не (ЭлементПалитры.ЭтоКатегория Или ЭлементПалитры = КорневойЭлемент) Цикл
			ЭлементПалитры = ЭлементПалитры.ПолучитьРодителя();
		КонецЦикла;
		РезультатФункции = ЭлементПалитры;
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьЭлементПалитры(ТипЭлементаПалитры)
	
	ТекущаяСтрока = ТекущаяСтрокаДереваТоваров();
	ДобавлениеВозможно = Истина;
	
	Если ТипЭлементаПалитры = ТипыЭлементовПалитры.Позиция Тогда
		Родитель = ПолучитьБлижайшуюГруппу(ТекущаяСтрока);
	Иначе
		Родитель = ТекущаяСтрока;
		Если ЗначениеЗаполнено(ТекущаяСтрока.ВидМодификатора) Или ЗначениеЗаполнено(ТекущаяСтрока.Палитра) Тогда
			Родитель = ТекущаяСтрока.ПолучитьРодителя();
		КонецЕсли;
		Если Родитель = Неопределено Или Родитель = КореньДерева() Тогда
			ДобавлениеВозможно = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ДобавлениеВозможно Тогда
		ДобавитьЭлементПалитрыВГруппу(Родитель, ТипЭлементаПалитры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭлементПалитрыВГруппу(Родитель, ТипЭлементаПалитры)
	
	ИдентификаторРодителя = Родитель.ПолучитьИдентификатор();
	
	ДочерниеЭлементы = Родитель.ПолучитьЭлементы();
	НовыйЭлемент = ДочерниеЭлементы.Добавить();
	НовыйЭлемент.ЭтоКатегория = Ложь;
	
	Если ТипЭлементаПалитры = ТипыЭлементовПалитры.Модификатор Тогда
		НовыйЭлемент.НомерИзображения = 3;
		НовыйЭлемент.ВидМодификатора = ПредопределенноеЗначение("Перечисление.ВидыМодификаторовРМК.ВключатьВЧек");
		НовыйЭлемент.ЦветФона = ЦветаФормы.ЗеленаяКнопка;
		
		Родитель.ИмеетсяВложенность = Истина;
		Если Родитель.ЭтоКатегория Тогда
			
			ВложенныеЭлементы = Родитель.ПолучитьЭлементы();
			Для Каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл
				Если НЕ ЗначениеЗаполнено(ВложенныйЭлемент.ВидМодификатора) И Не ВложенныйЭлемент.ЭтоКатегория
						И Не ЗначениеЗаполнено(ВложенныйЭлемент.Палитра) Тогда
					ВложенныйЭлемент.ИмеетсяВложенность = Истина;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	Иначе
		НовыйЭлемент.НомерИзображения = 2;
		Если ИмеютсяИдентификаторыНаГруппу(Родитель) Тогда
			НовыйЭлемент.ИмеетсяВложенность = Истина;
		КонецЕсли;
	КонецЕсли;

	ИдентификаторЭлемента = НовыйЭлемент.ПолучитьИдентификатор();
	
	ОтображениеДерева = Элементы.ИерархияТоваров;
	
	ОтображениеДерева.Развернуть(ИдентификаторРодителя);
	ОтображениеДерева.ТекущаяСтрока = ИдентификаторЭлемента;
	ОтображениеДерева.ТекущийЭлемент = Элементы.ИерархияТоваровНоменклатура;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ИмеютсяИдентификаторыНаГруппу(СтрокаГруппы)
	
	ВложенныеЭлементы = СтрокаГруппы.ПолучитьЭлементы();
	ИмеютсяИдентификаторыНаГруппу = Ложь;
	Для Каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл
		Если ЗначениеЗаполнено(ВложенныйЭлемент.ВидМодификатора) Тогда
			ИмеютсяИдентификаторыНаГруппу = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат ИмеютсяИдентификаторыНаГруппу;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьПозицию()

	ДобавитьЭлементПалитры(ТипыЭлементовПалитры.Позиция);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПросмотретьИзображениеПозиции()

	ДанныеУзла = ВыбраннаяСтрокаДереваИзбранныхТоваров();

	Если Не ДанныеУзла.ЭтоНекорневойУзелДерева Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ВыполнитьДействиеНадИзображениемПослеДобавленияПросмотра();
	Иначе
		
		ТекстВопроса = НСтр("ru = 'Перед выбором изображения необходимо записать объект. Продолжить?'");
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ПодтверждениеЗаписиЭлементаПриДобавленииПросмотреИзображения", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДобавитьНайденнуюПозициюКлиент(РезультатПоиска, ДополнительныеПараметры = Неопределено)
	
	ИдентификаторСтроки = Неопределено;
	ЗначенияПоиска = РезультатПоиска.ЗначенияПоиска;
	
	Если ТипЗнч(ЗначенияПоиска) = Тип("Массив")
		И ЗначенияПоиска.Количество() > 0 Тогда
		
		ИсходныеДанные = Новый Структура();
		ИсходныеДанные.Вставить("Номенклатура", ЗначенияПоиска[0].Владелец);
		ИсходныеДанные.Вставить("Характеристика", ЗначенияПоиска[0].Характеристика);
		ИсходныеДанные.Вставить("Упаковка", ЗначенияПоиска[0].Упаковка);
		
		Если ИдентификаторСтроки = Неопределено Тогда
		
			ИдентификаторТекущейСтроки = Элементы.ИерархияТоваров.ТекущаяСтрока;
			ТекущийЭлементДерева = ИерархияТоваров.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
			
			Если ТекущийЭлементДерева <> Неопределено Тогда
			
				Если ТекущийЭлементДерева.ЭтоКатегория Тогда
					Родитель = ТекущийЭлементДерева;
				Иначе
					
					Родитель = ТекущийЭлементДерева.ПолучитьРодителя();
					Если Родитель = Неопределено Тогда
						Родитель = ИерархияТоваров.ПолучитьЭлементы()[0];
					КонецЕсли;
					
				КонецЕсли;
				
				ДочерниеЭлементы = Родитель.ПолучитьЭлементы();
				НовыйЭлемент = ДочерниеЭлементы.Добавить();
				НовыйЭлемент.ЭтоКатегория = Ложь;
				НовыйЭлемент.НомерИзображения = 2;
				НовыйЭлемент.ЦветФона = ЦветаФормы.АктивнаяКнопка;
				ЗаполнитьЗначенияСвойств(НовыйЭлемент, ИсходныеДанные);
				ОбщегоНазначенияРМККлиент.ЗаполнитьИмяЭлементаВСтрокеСоставаПалитры(НовыйЭлемент);
				
				ИдентификаторСтроки = НовыйЭлемент.ПолучитьИдентификатор();
				Модифицированность = Истина;

			КонецЕсли;
			
		Иначе
			ИдентификаторСтроки = ТекущийЭлементДерева.ПолучитьИдентификатор();
		КонецЕсли;
	
	КонецЕсли;

	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьОбработкуРезультатаСканированияКлиент(ДанныеСканирования)
	
	// Логика добавления
	ИмяТаблицыДляПоиска = "ИерархияТоваров";
	Идентификатор = МенеджерОборудованияРМККлиент.ИдентификаторНайденнойСтроки(ЭтотОбъект,
		ДанныеСканирования, ИмяТаблицыДляПоиска);
		
	Если Идентификатор <> Неопределено Тогда
		
		ИерархияИзбранныхТоваров = Элементы[ИмяТаблицыДляПоиска];
		ИерархияИзбранныхТоваров.ТекущийЭлемент = Элементы.ИерархияТоваровНоменклатура;
		Родитель = ИерархияИзбранныхТоваров.ТекущиеДанные.ПолучитьРодителя();
		ИерархияИзбранныхТоваров.Развернуть(Родитель.ПолучитьИдентификатор());
	Иначе
		
		Если ДанныеСканирования.ЗначенияПоиска.Количество() = 0 Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Не удалось найти позицию по введенному штрих-коду.
				|Попробуйте еще раз.'");
			ЗаголовокПредупреждения = НСтр("ru = 'Поиск по штрих-коду'");
			ПоказатьПредупреждение(, ТекстПредупреждения,,ЗаголовокПредупреждения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗначениеВыделенныхСтрок(ИмяКолонки)

	Если Элементы.ИерархияТоваров.ВыделенныеСтроки.Количество() > 0 Тогда
		
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("ИмяПоля", ИмяКолонки);
		
		ОписаниеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьЗначенияВыделенныхСтрокЗавершение",
			 ЭтотОбъект, ПараметрыОткрытия);
		ОткрытьФорму("Справочник.ПалитраТоваровРМК.Форма.ФормаВводаЗначения",
			ПараметрыОткрытия,,,,, ОписаниеОЗавершении);
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'Пожалуйста, выберите строки'");
		ЗаголовокПредупреждения = НСтр("ru = 'Групповая установка значения'");
		ПоказатьПредупреждение(, ТекстПредупреждения,, ЗаголовокПредупреждения);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗначенияВыделенныхСтрокЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Результат.Свойство("Значение") Тогда
		
		ВыбранноеЗначение = Результат.Значение;
		ИмяПоля = ДополнительныеПараметры.ИмяПоля;
		
		ВыделенныеСтроки = Элементы.ИерархияТоваров.ВыделенныеСтроки;
		
		Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
			
			Строка = ИерархияТоваров.НайтиПоИдентификатору(ИдентификаторСтроки);
			
			Если Строка = КореньДерева() Тогда
				Продолжить;
			Иначе
				
				Строка[ИмяПоля] = ВыбранноеЗначение;
				
				Если Строка.ЭтоКатегория Тогда
					
					ЭлементыКатегории = Строка.ПолучитьЭлементы();
					Для Каждого Строка Из ЭлементыКатегории Цикл
						Строка[ИмяПоля] = ВыбранноеЗначение;
					КонецЦикла;
					
				КонецЕсли;
					
			КонецЕсли;
		
		КонецЦикла;
		
		ЭтоФокусНаКорне = ВыделенныеСтроки.Количество() = 1 И ВыделенныеСтроки[0] = 0;

	Модифицированность = Не ЭтоФокусНаКорне;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗапросФормированияПримераЗаполненияПанелиЗавершение()
	
	ПараметрыОткрытия = Новый Структура("СтруктураПлиточногоИнтерфейса", Объект.Ссылка);
	ОткрытьФорму("Справочник.ПалитраТоваровРМК.Форма.ПлиточныйИнтерфейсВыбораТоваров",
		ПараметрыОткрытия,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатСканированияКлиент(ДанныеСканирования)
	
	ОткрытаБлокирующаяФорма = Ложь;
	РаботаСоШтрихкодамиКлиентПереопределяемый.ОбработатьДанныеПоКоду(ЭтотОбъект, ДанныеСканирования,
		ОткрытаБлокирующаяФорма);
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуРезультатаСканированияКлиент(ДанныеСканирования);
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПостобработкаДобавленияИзображенияЭлементуПалитрыИзбранного()
	
	ЭтоВыборИзображения = Истина;
	ИдентификаторИзображения = Новый УникальныйИдентификатор;
	РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторИзображения, РасширенияИзображений());
	ЭтоВыборИзображения = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОбработкуРезультатаПоискаПоШтрихкодуКлиент(РезультатПоиска)
	
	ИдентификаторСтроки = Неопределено;
	Данные = РезультатПоиска.ЗначенияПоиска[0];
	
	ИдентификаторСтроки = ДобавитьНайденнуюПозициюКлиент(РезультатПоиска);
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		РезультатПоиска.Вставить("АктивироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл()
	
	ДанныеУзла = ВыбраннаяСтрокаДереваИзбранныхТоваров();

	Если Не ДанныеУзла.ЭтоНекорневойУзелДерева Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДанныеУзла.УзелДерева;
		
	Если ЗначениеЗаполнено(ТекущаяСтрока.ИзображениеЭлемента) Тогда
		
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущаяСтрока.ИзображениеЭлемента,
			УникальныйИдентификатор);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'Не найдено изображение для просмотра.'");
		ЗаголовокПредупреждения = НСтр("ru = 'Просмотр изображения'");
		ПоказатьПредупреждение(,ТекстПредупреждения, ЗаголовокПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПримерЗаполненияПанелиКлиент()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗапросФормированияПримераЗаполненияПанели", ЭтотОбъект);
	Если Модифицированность Тогда
		
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru = 'Данные были изменены. Сохранить изменения?'"),
			РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		Возврат;
		
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru = 'Это - новая палитра. Сохранить изменения?'"),
			РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		Возврат;
		
	КонецЕсли;
	
	 ЗапросФормированияПримераЗаполненияПанелиЗавершение();
	
КонецПроцедуры

&НаКлиенте
Функция ВыбраннаяСтрокаДереваИзбранныхТоваров()
	
	Строка = ТекущаяСтрокаДереваТоваров();
	ЭтоНекорневойУзелДерева = Не(Строка = Неопределено И Строка = КореньДерева());
	
	Результат = Новый Структура();
	Результат.Вставить("ЭтоНекорневойУзелДерева", ЭтоНекорневойУзелДерева);
	Результат.Вставить("УзелДерева", Строка);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ДанныеШтрихКода(Штрихкод)

	РезультатПоиска = ДанныеШтрихКодаСервер(Штрихкод);
	Возврат РезультатПоискаВДанныеФормы(ЭтотОбъект, РезультатПоиска)
	
КонецФункции

&НаКлиенте
Функция ИдентификаторЭлементаДереваРекурсивно(Дерево, ДанныеПоиска)
	
	РезультатПоиска = Неопределено;
	
	ЭлементыДерева = Дерево.ПолучитьЭлементы();
	
	Для каждого Ветвь Из ЭлементыДерева Цикл
	
		Если ДанныеПоиска.Номенклатура = Ветвь.Номенклатура Тогда
			
			Если ЗначениеЗаполнено(ДанныеПоиска.Характеристика) Тогда
				
				Если ДанныеПоиска.Характеристика = Ветвь.Характеристика Тогда
					
					РезультатПоиска = Ветвь.ПолучитьИдентификатор();
					Прервать;
					
				КонецЕсли;
			Иначе
				
				РезультатПоиска = Ветвь.ПолучитьИдентификатор();
				Прервать;
				
			КонецЕсли;
		Иначе
			
			РезультатПоиска = ИдентификаторЭлементаДереваРекурсивно(Ветвь, ДанныеПоиска);
			Если РезультатПоиска <> Неопределено Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат РезультатПоиска;
	
КонецФункции

&НаКлиенте
Функция КореньДерева()
	Возврат ИерархияТоваров.ПолучитьЭлементы()[0];
КонецФункции

&НаКлиенте
Функция РасширенияИзображений()
	
	ПереченьРасширений = СтрШаблон(НСтр("ru = 'Все изображения (%1)|%1"
		                            + "|Все файлы(*.*)|*.*"
		                            + "|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle"
		                            + "|Формат GIF(*.gif*)|*.gif"
		                            + "|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg"
		                            + "|Формат PNG(*.png*)|*.png"
		                            + "|Формат TIFF(*.tif)|*.tif"
		                            + "|Формат icon(*.ico)|*.ico"
		                            + "|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'"),
		"*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf");
	Возврат ПереченьРасширений;
									
КонецФункции

&НаКлиенте
Функция РезультатПоискаВДанныеФормы(Форма, РезультатПоиска)
	
	НайденоОбъектов = РезультатПоиска.ЗначенияПоиска.Количество();
	
	Если НайденоОбъектов = 1 Тогда
		
		ОповещениеОбработкиРезультатаПоиска =
			Новый ОписаниеОповещения("ОповещениеОбработкиРезультатаПоиска", Форма);
		ВыполнитьОбработкуОповещения(ОповещениеОбработкиРезультатаПоиска, РезультатПоиска);
		
	ИначеЕсли НайденоОбъектов > 1 Тогда
		
		ОткрытаБлокирующаяФорма = Ложь;
		РаботаСоШтрихкодамиКлиент.ОбработатьДанныеПоКоду(Форма,
			РезультатПоиска, ОткрытаБлокирующаяФорма);

	Иначе
	КонецЕсли;
	
	Возврат РезультатПоиска;
	
КонецФункции

&НаКлиенте
Функция ТекущаяСтрокаДереваТоваров()
	
	Результат = Неопределено;
	Если Элементы.ИерархияТоваров.ТекущиеДанные <> Неопределено Тогда
		
		Идентификатор = Элементы.ИерархияТоваров.ТекущиеДанные.ПолучитьИдентификатор();
		Результат = ИерархияТоваров.НайтиПоИдентификатору(Идентификатор);
		
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

&НаСервере
Процедура ЗаполнитьИерархиюПалитрыТоваров(ИсходныеДанные = Неопределено)
	
	Если ИсходныеДанные = Неопределено Тогда
		ИсходныеДанные = Объект.Ссылка;
	КонецЕсли;
	
	ИнтерфейсРМКСлужебный.ЗаполнитьИерархиюПалитрыТоваров(ИерархияТоваров, ИсходныеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФормуПалитрыНастроек()
	
	МенеджерОборудованияРМК.ЗаполнитьНачальныеНастройкиОборудования(ЭтотОбъект);
	ИспользоватьПодключаемоеОборудование = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияЭлементовДереваНаСервере(Отказ, ЭлементыДерева)
	
	ИмяДереваИзбранныхТоваров = "ИерархияТоваров";
	СсылкаНаОбъект = Объект.Ссылка;

	ЭтоСозданиеНовойНастройки = Параметры.Ключ.Пустая();
	
	Для Каждого Элемент Из ЭлементыДерева Цикл
		
		ИдентификаторЭлемента = Элемент.ПолучитьИдентификатор();
		
		Если НЕ (Объект.Служебная Или ЗначениеЗаполнено(Элемент.ИмяЭлемента)
			ИЛИ ЗначениеЗаполнено(Элемент.ИзображениеЭлемента)) Тогда
			
			ТекстОшибки = НСтр("ru = 'Необходимо или заполнить название или выбрать файл картинки.'");
			ИмяРеквизитаТабличнойЧасти = "ИмяЭлемента";

			СообщитьОбОшибкеЗаполненияДерева(ТекстОшибки,
				ИмяРеквизитаТабличнойЧасти,
				ИмяДереваИзбранныхТоваров,
				ИдентификаторЭлемента + 1,
				СсылкаНаОбъект,
				Отказ);
				
			
		КонецЕсли;
		
		ТекстОшибки = НСтр("ru = ''");
		ИмяРеквизитаТабличнойЧасти = "";
		
		Если Элемент.ЭтоКатегория Тогда
			
			Если Элемент.ПолучитьЭлементы().Количество() = 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'В группе не размещено ни одного элемента.'");
				ИмяРеквизитаТабличнойЧасти = "ИмяЭлемента";
				
			СообщитьОбОшибкеЗаполненияДерева(ТекстОшибки,
				ИмяРеквизитаТабличнойЧасти,
				ИмяДереваИзбранныхТоваров,
				ИдентификаторЭлемента + 1,
				СсылкаНаОбъект,
				Отказ);
					
			КонецЕсли;
			
			ДочерниеЭлементы = Элемент.ПолучитьЭлементы();
			ОбработкаПроверкиЗаполненияЭлементовДереваНаСервере(Отказ, ДочерниеЭлементы);
			
		ИначеЕсли Не ЗначениеЗаполнено(Элемент.Палитра) Тогда
			
			Если Не ЗначениеЗаполнено(Элемент.Номенклатура) Тогда
				
				ТекстОшибки = НСтр("ru = 'Не заполнена номенклатура.'");
				ИмяРеквизитаТабличнойЧасти = "Номенклатура";
				
			ИначеЕсли Элемент.ХарактеристикиИспользуются И Не Объект.Служебная
				И НЕ ЗначениеЗаполнено(Элемент.Характеристика) Тогда
				
				ТекстОшибки = НСтр("ru = 'Не заполнена характеристика.'");
				ИмяРеквизитаТабличнойЧасти = "Характеристика";
				
			Иначе
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			
				СообщитьОбОшибкеЗаполненияДерева(ТекстОшибки,
					ИмяРеквизитаТабличнойЧасти,
					ИмяДереваИзбранныхТоваров,
					ИдентификаторЭлемента + 1,
					СсылкаНаОбъект,
					Отказ);
			
			КонецЕсли;
			
		КонецЕсли;
		
		Если Элемент.ЦветФона = Новый Цвет(0, 0, 0)
			И Элемент.ЦветШрифта = Элемент.ЦветФона И Не ЗначениеЗаполнено(Элемент.Палитра) Тогда
				Элемент.ЦветФона = ЦветаСтиля.ЦветАктивнойКнопкиРМК;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СообщитьОбОшибкеЗаполненияДерева(ТекстОшибки, ИмяРеквизитаТабличнойЧасти, ИмяДереваИзбранныхТоваров,
	ИдентификаторЭлемента,СсылкаНаОбъект, Отказ)

	Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяДереваИзбранныхТоваров,
		ИдентификаторЭлемента,
		ИмяРеквизитаТабличнойЧасти);
	
	ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,
		СсылкаНаОбъект,
		Поле,,
		Отказ);

КонецПроцедуры

&НаСервере
Функция ДанныеШтрихКодаСервер(Штрихкод)
	
	Результат = Новый Структура();
	РаботаСоШтрихкодамиПереопределяемый.ЗаполнитьДанныеПоискаПоШтрихкоду(Штрихкод, ЭтотОбъект, Результат);
	Возврат Результат;

КонецФункции

&НаСервере
Функция КореньДереваСервер()
	Возврат ИерархияТоваров.ПолучитьЭлементы()[0];
КонецФункции

&НаСервере
Функция ОбработатьПодборНаСервере(ВыбранноеЗначение)

	Результат = Неопределено;
	Позиции = ЗначенияПодбора(ВыбранноеЗначение);
	
	Если Позиции.Количество() > 0 Тогда
		
		ТекущаяСтрока = ТекущаяСтрокаДереваТоваровСервер();
		
		Родитель = ТекущаяСтрока;
		
		Если НЕ ТекущаяСтрока.ЭтоКатегория Тогда
			
			Родитель = ТекущаяСтрока.ПолучитьРодителя();
			
			Если Родитель = Неопределено Тогда
				Родитель = КореньДереваСервер();
			КонецЕсли;
			
		КонецЕсли;
		
		ЭлементыДерева = Родитель.ПолучитьЭлементы();
		Результат = Новый Структура("ИдентификаторыЭлементов", Новый Массив);
		
		Для Каждого Позиция Из Позиции Цикл
		
			НовыйЭлемент = ЭлементыДерева.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, Позиция);
			НовыйЭлемент.ЭтоКатегория = Ложь;
			НовыйЭлемент.НомерИзображения = 2;
			НовыйЭлемент.Номенклатура = Позиция.Номенклатура;
			НовыйЭлемент.ИмяЭлемента = Позиция.Номенклатура;
			НовыйЭлемент.ЦветФона = ЦветаФормы.АктивнаяКнопка;
			ХарактеристикиИспользуются = ПроверитьПрименениеХарактеристикДляНоменклатуры(НовыйЭлемент.Номенклатура);
			НовыйЭлемент.ХарактеристикиИспользуются = ХарактеристикиИспользуются;
			
			Результат.ИдентификаторыЭлементов.Добавить(НовыйЭлемент.ПолучитьИдентификатор());
		
		КонецЦикла;
		
			Результат.Вставить("ИдентификаторРодителя", Родитель.ПолучитьИдентификатор());
			Результат.Вставить("ИдентификаторПоследнегоВыбранногоЭлемента", НовыйЭлемент.ПолучитьИдентификатор());
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТекущаяСтрокаДереваТоваровСервер()
	
	Результат = Неопределено;
	ИдентификаторТекущейСтроки = Элементы.ИерархияТоваров.ТекущаяСтрока;
	Если ТипЗнч(ИдентификаторТекущейСтроки) = Тип("Число") Тогда
		Результат = ИерархияТоваров.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗначенияПодбора(ИсходныеДанные)

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Номенклатура");
	Результат.Колонки.Добавить("Характеристика");
	Результат.Колонки.Добавить("Упаковка");
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьЗначенияПодбораДляПалитры(ИсходныеДанные, Результат);
	
	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьПрименениеХарактеристикДляНоменклатуры(Номенклатура)
	Возврат ОбщегоНазначенияРМК.ТребуетсяВводХарактеристикиДляНоменклатуры(Номенклатура);
КонецФункции

&НаСервере
Процедура УстановитьШрифтПоУмолчанию()
	
	ШрифтЭлементовПодбора = ШрифтыСтиля.ШрифтОбычныйПолужирный12РМК;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораПалитры(ОповещениеВыбораПалитры)
	
	НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ФиксированныеНастройки", НастройкиКомпоновки);
	ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыОткрытия.Вставить("МножественныйВыбор", Ложь);
	
	ОткрытьФорму("Справочник.ПалитраТоваровРМК.Форма.ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор,
		,,ОповещениеВыбораПалитры);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПалитруКлиент()
	
	ОповещениеВыбораПалитры = Новый ОписаниеОповещения("ВыборПалитрыЗавершение", ЭтотОбъект);
	ОткрытьФормуВыбораПалитры(ОповещениеВыбораПалитры);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМодификаторКлиент()
	
	ДобавитьЭлементПалитры(ТипыЭлементовПалитры.Модификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитЭлемента(ЭлементСсылка, ИмяРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементСсылка, ИмяРеквизита);
	
КонецФункции

&НаКлиенте
Процедура ВыборПалитрыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ТекущаяСтрока = ТекущаяСтрокаДереваТоваров();
		ТекущаяГруппа = ПолучитьБлижайшуюГруппу(ТекущаяСтрока);
		ИдентификаторГруппы = ТекущаяГруппа.ПолучитьИдентификатор();
		ЭлементыГруппы = ТекущаяГруппа.ПолучитьЭлементы();
		
		НоваяСтрока = ЭлементыГруппы.Добавить();
		НоваяСтрока.НомерИзображения = 5;
		НоваяСтрока.Палитра = Результат;
		НоваяСтрока.ИмяЭлемента = ПолучитьРеквизитЭлемента(Результат, "Наименование");
		
		Элементы.ИерархияТоваров.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьДобавленияМодификатора()
	
	ТекущаяСтрока = ТекущаяСтрокаДереваТоваров();
	ДобавлениеДоступно = Не (ТекущаяСтрока = КореньДерева() Или ТекущаяСтрока = Неопределено
		Или ЗначениеЗаполнено(ТекущаяСтрока.Палитра));
	Элементы.ИерархияТоваровДобавитьМодификатор.Доступность = ДобавлениеДоступно;
	Элементы.ИерархияТоваровКонтекстноеМенюДобавитьМодификатор.Доступность = ДобавлениеДоступно;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьКлиентскиеПеречисленияФормы()
	
	ТипыЭлементовПалитры = Новый Структура();
	ТипыЭлементовПалитры.Вставить("Позиция", 0);
	ТипыЭлементовПалитры.Вставить("Модификатор", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьВыборНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		ВыполнитьДобавлениеПоПодбору(Результат);
		ОбщегоНазначенияРМККлиентПереопределяемый.ОбработатьЗавершениеЗаполненияНоменклатурыВПалитре(ЭтотОбъект, 
			Результат, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДобавлениеПоПодбору(Результат)
	
	ДанныеВыбора = ОбработатьПодборНаСервере(Результат);
	
	Если НЕ ДанныеВыбора = Неопределено Тогда
		
		ИдентификаторыПодобранныхЭлементов = ДанныеВыбора.ИдентификаторыЭлементов;
		
		Для Каждого Идентификатор Из ИдентификаторыПодобранныхЭлементов Цикл
			ЭлементДерева = ИерархияТоваров.НайтиПоИдентификатору(Идентификатор);
			ОбщегоНазначенияРМККлиент.ЗаполнитьИмяЭлементаВСтрокеСоставаПалитры(ЭлементДерева);
		КонецЦикла;
		
		Элементы.ИерархияТоваров.Развернуть(ДанныеВыбора.ИдентификаторРодителя);
		Элементы.ИерархияТоваров.ТекущаяСтрока = ДанныеВыбора.ИдентификаторПоследнегоВыбранногоЭлемента;
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПредпросмотра()
	
	Элементы.СформироватьПримерЗаполненияПанели.Видимость = Не Объект.Служебная;
	
КонецПроцедуры

#КонецОбласти
