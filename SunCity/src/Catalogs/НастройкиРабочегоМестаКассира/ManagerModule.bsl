
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗагрузитьНастройкиИзXML(ТекстXML, ЕстьОшибки, НастройкаРМКОбъект, ТекстОписанияОшибки = "") Экспорт
	
	Попытка
		СтруктураНастроек = ОбщегоНазначения.ЗначениеИзСтрокиXML(ТекстXML);
	Исключение
		
		ЕстьОшибки = Истина;
		ИмяСобытия = НСтр("ru = 'Загрузка настроек РМК из файла.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ИскомаяОшибка =
			"Отсутствует отображение для типа '{http://v8.1c.ru/8.1/data/enterprise/current-config}CatalogRef.ХранилищеШаблонов'";
		Если Найти(ТекстОшибки, ИскомаяОшибка) Тогда
			ТекстОписанияОшибки = НСтр("ru = 'Загрузка настроек РМК предыдущей версии не поддерживается.
				|Выгрузите настройки из текущей версии.'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстОшибки = СтрШаблон("%1"+Символы.ПС+Символы.ПС+"%2",
				ТекстОписанияОшибки, ТекстОшибки);
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Возврат;
		
	КонецПопытки;

	КонтрольПродажПостобработки = Новый Массив;
	Для Каждого ЭлементНастройки Из СтруктураНастроек Цикл
		
		Попытка
			
			Если Лев(ЭлементНастройки.Ключ, 9) = "Константа" Тогда
				
				ИмяКонстанты = Сред(ЭлементНастройки.Ключ, 11);
				Константы[ИмяКонстанты].Установить(ЭлементНастройки.Значение);
				
			ИначеЕсли ЭлементНастройки.Ключ = "НастройкаРМК_ГорячиеКлавиши" Тогда
				НастройкаРМКОбъект.ГорячиеКлавиши.Загрузить(ЭлементНастройки.Значение);
			ИначеЕсли ЭлементНастройки.Ключ = "НастройкаРМК_БыстрыеТовары" Тогда
				
				ТаблицаБыстрыеТовары = ЭлементНастройки.Значение;
				НастройкаРМКОбъект.БыстрыеТовары.Очистить();
				
				Для Каждого СтрокаБыстрыеТовары Из ТаблицаБыстрыеТовары Цикл
					
					Если НЕ ОбщегоНазначения.СсылкаСуществует(СтрокаБыстрыеТовары.Номенклатура)
						Или (НЕ СтрокаБыстрыеТовары.Характеристика.Пустая()
							И НЕ ОбщегоНазначения.СсылкаСуществует(СтрокаБыстрыеТовары.Характеристика)) Тогда
							Продолжить;
					КонецЕсли;
						
					НоваяСтрока = НастройкаРМКОбъект.БыстрыеТовары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаБыстрыеТовары);
					
				КонецЦикла;
				
			ИначеЕсли ЭлементНастройки.Ключ = "НастройкаРМК_ВводНаличных" Тогда
				ЗагрузитьТаблицуВводаНаличных(НастройкаРМКОбъект, ЭлементНастройки.Значение);
			ИначеЕсли ЭлементНастройки.Ключ = "НастройкаРМК_ПорядокОбластей" Тогда
				ЗагрузитьТаблицуПорядкаОбхода(НастройкаРМКОбъект, ЭлементНастройки.Значение);
			ИначеЕсли ЭлементНастройки.Ключ = "НастройкаРМК_УстройстваРаспознаванияЭлектронныхВесов" Тогда
				ЗагрузитьУстройстваРаспознаванияЭлектронныхВесов(ЭлементНастройки.Значение, НастройкаРМКОбъект.РабочееМесто);
			ИначеЕсли Лев(ЭлементНастройки.Ключ, 12) = "НастройкаРМК" Тогда
				
				ИмяРеквизита = Сред(ЭлементНастройки.Ключ, 14);
				НастройкаРМКОбъект[ИмяРеквизита] = ЭлементНастройки.Значение;
				
			ИначеЕсли ЭлементНастройки.Ключ = "ШаблоныЧеков" Тогда
				
				Для Каждого СтрокаШаблонаЧека Из ЭлементНастройки.Значение Цикл
					
					СсылкаШаблона = СтрокаШаблонаЧека.Ссылка;
					
					Если НЕ СсылкаШаблона.Пустая() И НЕ ОбщегоНазначения.СсылкаСуществует(СсылкаШаблона) Тогда
						
						СтрокаGUID = СсылкаШаблона.УникальныйИдентификатор();
						НовыйGUID = Новый УникальныйИдентификатор(СтрокаGUID);
						НоваяСсылка = Справочники.ХранилищеШаблоновРМК.ПолучитьСсылку(НовыйGUID);
						ОбъектШаблонЧека = Справочники.ХранилищеШаблоновРМК.СоздатьЭлемент();
						ОбъектШаблонЧека.УстановитьСсылкуНового(НоваяСсылка);
						ЗаполнитьЗначенияСвойств(ОбъектШаблонЧека, СтрокаШаблонаЧека, , "Ссылка");
						ОбъектШаблонЧека.Записать();
						
					КонецЕсли;
					
				КонецЦикла;
				
			ИначеЕсли ЭлементНастройки.Ключ = "ПалитраБыстрыхТоваров" Или ЭлементНастройки.Ключ = "ПалитраПлитки"
					Или ЭлементНастройки.Ключ = "ВложенныеПалитры" Тогда
					
				ЭтоВложеннаяПалитра = (ЭлементНастройки.Ключ = "ВложенныеПалитры");
				Для Каждого СтрокаПалитры Из ЭлементНастройки.Значение Цикл
					
					СсылкаПалитраТоваров = СтрокаПалитры.Ссылка;
					ОбъектПалитраТоваров = Неопределено;
					
					Если НЕ СсылкаПалитраТоваров.Пустая() Тогда
						
						ОбъектПалитраТоваров = ЗаписатьДанныеПалитры(СтрокаПалитры, ЭтоВложеннаяПалитра);
						
					КонецЕсли;
					
					Если Не ОбъектПалитраТоваров = Неопределено Тогда
						Если ЭлементНастройки.Ключ = "ПалитраБыстрыхТоваров" Тогда
							НастройкаРМКОбъект.СтруктураБыстрыхТоваров = ОбъектПалитраТоваров.Ссылка;
						ИначеЕсли ЭлементНастройки.Ключ = "ПалитраПлитки" Тогда
							НастройкаРМКОбъект.СтруктураПлиточногоИнтерфейсаПодбора = ОбъектПалитраТоваров.Ссылка;
						КонецЕсли;
					КонецЕсли;
				
				КонецЦикла;
				
			ИначеЕсли ЭлементНастройки.Ключ = "ПалитрыКонтроляПродаж" Тогда
				
				Для Каждого СтрокаПалитры Из ЭлементНастройки.Значение Цикл
					
					СсылкаПалитраТоваров = СтрокаПалитры.Ссылка;
					Если НЕ СсылкаПалитраТоваров.Пустая() Тогда
						ЗаписатьДанныеПалитры(СтрокаПалитры, Ложь);
					КонецЕсли;
				
				КонецЦикла;
				
			ИначеЕсли ЭлементНастройки.Ключ = "ФайлыПалитрыБыстрыхТоваров" Или ЭлементНастройки.Ключ = "ФайлыПалитрыПлитки"
					Или ЭлементНастройки.Ключ = "ФайлыВложенныхПалитр" Или ЭлементНастройки.Ключ = "ФайлыСпискаПалитр" Тогда
				
				ЭтоВложеннаяПалитра = (ЭлементНастройки.Ключ = "ФайлыВложенныхПалитр");
				Для Каждого СтрокаФайла Из ЭлементНастройки.Значение Цикл
					
					СсылкаФайла = СтрокаФайла.Ссылка;
					ОбъектФайл = Неопределено;
					
					Если НЕ СсылкаФайла.Пустая() Тогда
						
						Если НЕ ОбщегоНазначения.СсылкаСуществует(СсылкаФайла) Тогда
						
							СтрокаGUID = СсылкаФайла.УникальныйИдентификатор();
							НовыйGUID = Новый УникальныйИдентификатор(СтрокаGUID);
							НоваяСсылка = Справочники.ПалитраТоваровРМКПрисоединенныеФайлы.ПолучитьСсылку(НовыйGUID);
							ОбъектФайл = Справочники.ПалитраТоваровРМКПрисоединенныеФайлы.СоздатьЭлемент();
							ОбъектФайл.УстановитьСсылкуНового(НоваяСсылка);
							
							ЗаполнитьЗначенияСвойств(ОбъектФайл, СтрокаФайла, , "Ссылка");
							ОбъектФайл.Записать();
							
						ИначеЕсли Не ЭтоВложеннаяПалитра Тогда
							ОбъектФайл = СсылкаФайла.ПолучитьОбъект();
							ОбъектФайл.ПометкаУдаления = Ложь;
							ЗаполнитьЗначенияСвойств(ОбъектФайл, СтрокаФайла, , "Ссылка");
							ОбъектФайл.Записать();
						КонецЕсли;
					
						Если (Не ОбъектФайл = Неопределено) И ЗначениеЗаполнено(СтрокаФайла.ДвоичныеДанные) Тогда
							
							АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(СтрокаФайла.ДвоичныеДанные);
							
							ИнформацияОФайле = Новый Структура;
							ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", АдресВременногоХранилищаФайла);
							ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
							ИнформацияОФайле.Вставить("ИмяБезРасширения"              , СтрокаФайла.Наименование);
							ИнформацияОФайле.Вставить("ДатаМодификацииУниверсальная"  , СтрокаФайла.ДатаМодификацииУниверсальная);
							ИнформацияОФайле.Вставить("Расширение"                    , СтрЗаменить(СтрокаФайла.Расширение,".",""));
							ИнформацияОФайле.Вставить("Редактирует"                   , Неопределено);
							
							РаботаСФайлами.ОбновитьФайл(ОбъектФайл.Ссылка, ИнформацияОФайле);
							
						КонецЕсли;
							
					КонецЕсли;
					
				КонецЦикла;
				
			ИначеЕсли ЭлементНастройки.Ключ = "ТаблицаВидовКонтроля" Тогда
				
				Для Каждого СтрокаВидаКонтроля Из ЭлементНастройки.Значение Цикл
					ЗаписатьДанныеВидаКонтроля(СтрокаВидаКонтроля);
				КонецЦикла;
				
			ИначеЕсли ЭлементНастройки.Ключ = "ТаблицаКонтроляПродаж" Тогда
				
				Для Каждого СтрокаКонтроляПродаж Из ЭлементНастройки.Значение Цикл
					ОбъектКонтроляПродаж = ЗаписатьДанныеКонтроляПродаж(СтрокаКонтроляПродаж);
					Если (Не ОбъектКонтроляПродаж = Неопределено) И ЗначениеЗаполнено(ОбъектКонтроляПродаж.Палитра)
							И КонтрольПродажПостобработки.Найти(ОбъектКонтроляПродаж.Ссылка) = Неопределено Тогда
						КонтрольПродажПостобработки.Добавить(ОбъектКонтроляПродаж.Ссылка);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		Исключение
			
			ЕстьОшибки = Истина;
			ИмяСобытия = НСтр("ru = 'Сохранение настроек РМК при загрузке из файла настроек.'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				ИмяСобытия,
				УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
				
		КонецПопытки;
			
	КонецЦикла;
	АктуализироватьВложенныеПалитрыКонтроляПродаж(КонтрольПродажПостобработки);
	
	ИспользоватьКартыЛояльности = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьВводДисконтныхКарт(ИспользоватьКартыЛояльности);
	Если Не ИспользоватьКартыЛояльности Тогда
		НастройкаРМКОбъект.НапоминатьПроВводКартыЛояльности = Ложь;
	КонецЕсли;
	
	Попытка
		НастройкаРМКОбъект.Записать();
	Исключение
		
		ЕстьОшибки = Истина;
		ИмяСобытия = НСтр("ru = 'Запись справочника НастройкиРМК при загрузке из файла настроек.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		МетаданныеОбъекта = Метаданные.Справочники.НастройкиРабочегоМестаКассира;
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка, МетаданныеОбъекта,
			НастройкаРМКОбъект.Ссылка, ТекстОшибки);
			
	КонецПопытки;
	
КонецПроцедуры

Процедура АктуализироватьВложенныеПалитрыКонтроляПродаж(КонтрольПродажПостобработки)
	
	Для Каждого ЭлементКонтроляПродаж Из КонтрольПродажПостобработки Цикл
		ТекущийОбъект = ЭлементКонтроляПродаж.ПолучитьОбъект();
		ТекущийОбъект.ПалитрыКонтроляПродаж.Очистить();
		ИсходныйМассив = Новый Массив;
		ИсходныйМассив.Добавить(ТекущийОбъект.Палитра);
		ПодчиненныеПалитры = ИнтерфейсРМКСлужебный.ПолучитьВложенныеПалитры(ИсходныйМассив);
		НоваяСтрока = ТекущийОбъект.ПалитрыКонтроляПродаж.Добавить();
		НоваяСтрока.Палитра = ТекущийОбъект.Палитра;
		Для Каждого ЭлементПалитра Из ПодчиненныеПалитры Цикл
			НоваяСтрока = ТекущийОбъект.ПалитрыКонтроляПродаж.Добавить();
			НоваяСтрока.Палитра = ЭлементПалитра;
		КонецЦикла;
		
		ТекущийОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВСтруктуруНастроекКонтрольПродаж(СтруктураНастроек) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпрКонтрольПродаж.Ссылка КАК Ссылка,
	|	СпрКонтрольПродаж.Наименование КАК Наименование,
	|	СпрКонтрольПродаж.Описание КАК Описание,
	|	СпрКонтрольПродаж.ДляВсехТорговыхОбъектов КАК ДляВсехТорговыхОбъектов,
	|	СпрКонтрольПродаж.ДляВсейНоменклатуры КАК ДляВсейНоменклатуры,
	|	СпрКонтрольПродаж.Палитра КАК Палитра,
	|	СпрКонтрольПродаж.НаименованиеГруппыТоваров КАК НаименованиеГруппыТоваров,
	|	СпрКонтрольПродаж.ПалитрыКонтроляПродаж.(
	|		Палитра КАК Палитра
	|	) КАК ПалитрыКонтроляПродаж,
	|	СпрКонтрольПродаж.Номенклатура.(
	|		Номенклатура КАК Номенклатура
	|	) КАК Номенклатура,
	|	СпрКонтрольПродаж.ТорговыеОбъекты.(
	|		ТорговыйОбъект КАК ТорговыйОбъект
	|	) КАК ТорговыеОбъекты,
	|	СпрКонтрольПродаж.КонтрольПродаж.(
	|		ВидКонтроля КАК ВидКонтроля,
	|		НачалоПериода КАК НачалоПериода,
	|		КонецПериода КАК КонецПериода,
	|		ДеньНедели КАК ДеньНедели,
	|		ВремяНачала КАК ВремяНачала,
	|		ВремяОкончания КАК ВремяОкончания
	|	) КАК КонтрольПродаж
	|ИЗ
	|	Справочник.КонтрольПродаж КАК СпрКонтрольПродаж
	|ГДЕ
	|	СпрКонтрольПродаж.Использование
	|	И (СпрКонтрольПродаж.ВключенВРМК
	|			ИЛИ СпрКонтрольПродаж.Локальный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыКонтроля.Ссылка КАК Ссылка,
	|	ВидыКонтроля.ПометкаУдаления КАК ПометкаУдаления,
	|	ВидыКонтроля.Наименование КАК Наименование,
	|	ВидыКонтроля.ТипКонтроля КАК ТипКонтроля,
	|	ВидыКонтроля.ТекстШаблонаПредупреждения КАК ТекстШаблонаПредупреждения,
	|	ВидыКонтроля.ПараметрыКонтроля.(
	|		Параметр КАК Параметр,
	|		Значение КАК Значение
	|	) КАК ПараметрыКонтроля
	|ИЗ
	|	Справочник.ВидыКонтроля КАК ВидыКонтроля";
	
	ПалитрыКонтроля = Новый Массив;
	ВложенныеПалитры = Новый Массив;
	ИспользуемыеВидыКонтроля = Новый Массив;
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	ТаблицаКонтроляПродаж = РезультатыЗапросов[0].Выгрузить();
	ТаблицаВсехВидовКонтроля = РезультатыЗапросов[1].Выгрузить();
	
	ТаблицаВидовКонтроля = ТаблицаВсехВидовКонтроля.СкопироватьКолонки();
	
	Для Каждого СтрокаЭлементаКонтроля Из ТаблицаКонтроляПродаж Цикл
		
		Если ЗначениеЗаполнено(СтрокаЭлементаКонтроля.Палитра)
			И ПалитрыКонтроля.Найти(СтрокаЭлементаКонтроля.Палитра) = Неопределено Тогда
			
			ПалитрыКонтроля.Добавить(СтрокаЭлементаКонтроля.Палитра);
			
		КонецЕсли;
		
		Для Каждого СтрокаПалитры Из СтрокаЭлементаКонтроля.ПалитрыКонтроляПродаж Цикл
			Если ВложенныеПалитры.Найти(СтрокаПалитры.Палитра) = Неопределено
					И ПалитрыКонтроля.Найти(СтрокаПалитры.Палитра) = Неопределено Тогда
				ВложенныеПалитры.Добавить(СтрокаПалитры.Палитра);
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаНоменклатуры = СтрокаЭлементаКонтроля.Номенклатура;
		ТаблицаНоменклатуры.Колонки.Добавить("НоменклатураГУИД", ОбщегоНазначения.ОписаниеТипаСтрока(36));
		Для Каждого СтрокаНоменклатуры Из ТаблицаНоменклатуры Цикл
			Если ЗначениеЗаполнено(СтрокаНоменклатуры.Номенклатура) Тогда
				СтрокаНоменклатуры.НоменклатураГУИД = СтрокаНоменклатуры.Номенклатура.УникальныйИдентификатор();
			КонецЕсли;
		КонецЦикла;
		ТаблицаНоменклатуры.Колонки.Удалить("Номенклатура");
		
		ТаблицаТорговыхОбъектов = СтрокаЭлементаКонтроля.ТорговыеОбъекты;
		ТаблицаТорговыхОбъектов.Колонки.Добавить("ТорговыйОбъектГУИД", ОбщегоНазначения.ОписаниеТипаСтрока(36));
		Для Каждого СтрокаТорговогоОбъекта Из ТаблицаТорговыхОбъектов Цикл
			Если ЗначениеЗаполнено(СтрокаТорговогоОбъекта.ТорговыйОбъект) Тогда
				СтрокаТорговогоОбъекта.ТорговыйОбъектГУИД = СтрокаТорговогоОбъекта.ТорговыйОбъект.УникальныйИдентификатор();
			КонецЕсли;
		КонецЦикла;
		ТаблицаТорговыхОбъектов.Колонки.Удалить("ТорговыйОбъект");
		
		ТаблицаСтрокКонтроля = СтрокаЭлементаКонтроля.КонтрольПродаж;
		ТаблицаСтрокКонтроля.Колонки.Добавить("ВидКонтроляГУИД", ОбщегоНазначения.ОписаниеТипаСтрока(36));
		ТаблицаСтрокКонтроля.Колонки.Добавить("ВидКонтроляИмя", ОбщегоНазначения.ОписаниеТипаСтрока(0));
		Для Каждого СтрокаКонтроля Из ТаблицаСтрокКонтроля Цикл
			Если ЗначениеЗаполнено(СтрокаКонтроля.ВидКонтроля) Тогда
				Если СтрокаКонтроля.ВидКонтроля.Предопределенный Тогда
					СтрокаКонтроля.ВидКонтроляИмя = СтрокаКонтроля.ВидКонтроля.ИмяПредопределенныхДанных;
				Иначе
					СтрокаКонтроля.ВидКонтроляГУИД = СтрокаКонтроля.ВидКонтроля.УникальныйИдентификатор();
				КонецЕсли;
				Если ИспользуемыеВидыКонтроля.Найти(СтрокаКонтроля.ВидКонтроля) = Неопределено Тогда
					ИспользуемыеВидыКонтроля.Добавить(СтрокаКонтроля.ВидКонтроля);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ТаблицаСтрокКонтроля.Колонки.Удалить("ВидКонтроля");
		
	КонецЦикла;
	
	ТаблицаВидовКонтроля.Колонки.Добавить("ВидКонтроляИмя", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ДобавитьВСтруктуруНастроекПалитруТоваров(ПалитрыКонтроля, СтруктураНастроек, Ложь, "ПалитрыКонтроляПродаж");
	ДобавитьВСтруктуруНастроекПалитруТоваров(ВложенныеПалитры, СтруктураНастроек, Ложь, "ВложенныеПалитры");
	Для Каждого ВидКонтроля Из ИспользуемыеВидыКонтроля Цикл
		СтрокаВидаИсточник = ТаблицаВсехВидовКонтроля.Найти(ВидКонтроля, "Ссылка");
		Если Не СтрокаВидаИсточник = Неопределено Тогда
			НоваяСтрокаВидаПриемник = ТаблицаВидовКонтроля.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаВидаПриемник, СтрокаВидаИсточник);
			Если ВидКонтроля.Предопределенный Тогда
				НоваяСтрокаВидаПриемник.ВидКонтроляИмя = ВидКонтроля.ИмяПредопределенныхДанных;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаВидовКонтроля.Количество() > 0 Тогда
		СтруктураНастроек.Вставить("ТаблицаВидовКонтроля", ТаблицаВидовКонтроля);
	КонецЕсли;
	
	Если ТаблицаКонтроляПродаж.Количество() > 0 Тогда
		СтруктураНастроек.Вставить("ТаблицаКонтроляПродаж", ТаблицаКонтроляПродаж);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВСтруктуруНастроекПалитруТоваров(ПалитрыТоваров, СтруктураНастроек,
		ЭтоПлитка = Ложь, ИмяРазделаПалитр = "") Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПалитраТоваровРМК.Ссылка КАК Ссылка,
	|	ПалитраТоваровРМК.Наименование КАК Наименование,
	|	ПалитраТоваровРМК.КоличествоЭлементовВРяду КАК КоличествоЭлементовВРяду,
	|	ПалитраТоваровРМК.ВысотаЭлемента КАК ВысотаЭлемента,
	|	ПалитраТоваровРМК.КоличествоРядов КАК КоличествоРядов,
	|	ПалитраТоваровРМК.Служебная КАК Служебная,
	|	ПалитраТоваровРМК.ШрифтЭлементовПодбора КАК ШрифтЭлементовПодбора,
	|	ПалитраТоваровРМК.Состав.(
	|		Палитра КАК Палитра,
	|		ЭтоКатегория КАК ЭтоКатегория,
	|		НомерКатегории КАК НомерКатегории,
	|		НомерКатегорииРазмещения КАК НомерКатегорииРазмещения,
	|		ИндексПозиции КАК ИндексПозиции,
	|		ИмяЭлемента КАК ИмяЭлемента,
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		ЗаголовокЭлемента КАК ЗаголовокЭлемента,
	|		ИзображениеЭлемента КАК ИзображениеЭлемента,
	|		ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
	|		Шрифт КАК Шрифт,
	|		ЦветШрифта КАК ЦветШрифта,
	|		ЦветФона КАК ЦветФона,
	|		КатегорияРазмещения КАК КатегорияРазмещения,
	|		ИмеетсяВложенность КАК ИмеетсяВложенность,
	|		ВидМодификатора КАК ВидМодификатора,
	|		Упаковка КАК Упаковка,
	|		СкрыватьОстаток КАК СкрыватьОстаток
	|	) КАК Состав
	|ИЗ
	|	Справочник.ПалитраТоваровРМК КАК ПалитраТоваровРМК
	|ГДЕ
	|	ПалитраТоваровРМК.Ссылка В (&ПалитраТоваров)");
	
	Запрос.УстановитьПараметр("ПалитраТоваров", ПалитрыТоваров);
	ПалитраТаблица = Запрос.Выполнить().Выгрузить();
	
	Если ПалитраТаблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Палитра Из ПалитраТаблица Цикл
		СоставПалитры = Палитра.Состав;
		СоставПалитры.Колонки.Добавить("НоменклатураГУИД", ОбщегоНазначения.ОписаниеТипаСтрока(36));
		СоставПалитры.Колонки.Добавить("ХарактеристикаГУИД", ОбщегоНазначения.ОписаниеТипаСтрока(36));
		СоставПалитры.Колонки.Добавить("УпаковкаГУИД", ОбщегоНазначения.ОписаниеТипаСтрока(36));
		
		Для Каждого СрокаПалитры Из СоставПалитры Цикл
			Если ЗначениеЗаполнено(СрокаПалитры.Номенклатура) Тогда
				СрокаПалитры.НоменклатураГУИД = СрокаПалитры.Номенклатура.УникальныйИдентификатор();
			КонецЕсли;
			Если ЗначениеЗаполнено(СрокаПалитры.Характеристика) Тогда
				СрокаПалитры.ХарактеристикаГУИД = СрокаПалитры.Характеристика.УникальныйИдентификатор();
			КонецЕсли;
			Если ЗначениеЗаполнено(СрокаПалитры.Упаковка) Тогда
				СрокаПалитры.УпаковкаГУИД = СрокаПалитры.Упаковка.УникальныйИдентификатор();
			КонецЕсли;
		КонецЦикла;
		
		СоставПалитры.Колонки.Удалить("Номенклатура");
		СоставПалитры.Колонки.Удалить("Характеристика");
		СоставПалитры.Колонки.Удалить("Упаковка");
	КонецЦикла;
	
	Если ИмяРазделаПалитр = "" Тогда
		ИмяНастройкиВСтруктуре = ?(ЭтоПлитка, "ПалитраПлитки", "ПалитраБыстрыхТоваров");
	Иначе
		ИмяНастройкиВСтруктуре = ИмяРазделаПалитр;
	КонецЕсли;
	
	СтруктураНастроек.Вставить(ИмяНастройкиВСтруктуре, ПалитраТаблица);
	
	МассивФайлов = Новый Массив;
	Для Каждого СтрокаПалитры Из ПалитраТаблица Цикл
		Для Каждого ФайлПалитры Из СтрокаПалитры.Состав Цикл
			Если ЗначениеЗаполнено(ФайлПалитры.ИзображениеЭлемента) Тогда
				МассивФайлов.Добавить(ФайлПалитры.ИзображениеЭлемента);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПалитраТоваровРМКПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	ПалитраТоваровРМКПрисоединенныеФайлы.Наименование КАК Наименование,
	|	ПалитраТоваровРМКПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
	|	ПалитраТоваровРМКПрисоединенныеФайлы.ИндексКартинки КАК ИндексКартинки,
	|	ПалитраТоваровРМКПрисоединенныеФайлы.Размер КАК Размер,
	|	ПалитраТоваровРМКПрисоединенныеФайлы.Расширение КАК Расширение,
	|	ПалитраТоваровРМКПрисоединенныеФайлы.ДатаЗаема КАК ДатаЗаема,
	|	ПалитраТоваровРМКПрисоединенныеФайлы.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная,
	|	ПалитраТоваровРМКПрисоединенныеФайлы.ДатаСоздания КАК ДатаСоздания,
	|	ПалитраТоваровРМКПрисоединенныеФайлы.СтатусИзвлеченияТекста КАК СтатусИзвлеченияТекста,
	|	ПалитраТоваровРМКПрисоединенныеФайлы.ТипХраненияФайла КАК ТипХраненияФайла
	|ИЗ
	|	Справочник.ПалитраТоваровРМКПрисоединенныеФайлы КАК ПалитраТоваровРМКПрисоединенныеФайлы
	|ГДЕ
	|	ПалитраТоваровРМКПрисоединенныеФайлы.Ссылка В (&СсылкиФайлов)");
	
	Запрос.УстановитьПараметр("СсылкиФайлов", МассивФайлов);
	
	ФайлыПалитрыТоваров = Запрос.Выполнить().Выгрузить();
	ФайлыПалитрыТоваров.Колонки.Добавить("ДвоичныеДанные");
	Для Каждого СтрокаФайла Из ФайлыПалитрыТоваров Цикл
		СтрокаФайла.ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(СтрокаФайла.Ссылка);
	КонецЦикла;

	Если Не ИмяРазделаПалитр = "" Тогда
		Если ИмяРазделаПалитр = "ВложенныеПалитры" Тогда
			ИмяНастройкиВСтруктуре = "ФайлыВложенныхПалитр";
		Иначе
			ИмяНастройкиВСтруктуре = "ФайлыСпискаПалитр";
		КонецЕсли;
	Иначе
		ИмяНастройкиВСтруктуре = ?(ЭтоПлитка, "ФайлыПалитрыПлитки", "ФайлыПалитрыБыстрыхТоваров");
	КонецЕсли;
	СтруктураНастроек.Вставить(ИмяНастройкиВСтруктуре, ФайлыПалитрыТоваров);
	
КонецПроцедуры

Функция ПолучитьШаблонТаблицыГорячихКлавиш() Экспорт
	
	Возврат Справочники.НастройкиРабочегоМестаКассира.ПустаяСсылка().ГорячиеКлавиши.ВыгрузитьКолонки();
	
КонецФункции

Функция ПолучитьШаблонТаблицыГорячихКлавишКупюр() Экспорт
	
	ШаблонТаблицы = Справочники.НастройкиРабочегоМестаКассира.ПустаяСсылка().ГорячиеКлавиши.ВыгрузитьКолонки();
	
	ШаблонТаблицы.Колонки.Добавить("Номинал", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	ШаблонТаблицы.Колонки.Удалить("НомерСтроки");
	ШаблонТаблицы.Колонки.Удалить("ИмяКнопки");
	ШаблонТаблицы.Колонки.Удалить("ЗаголовокКнопки");
	
	Возврат ШаблонТаблицы;
	
КонецФункции

Функция ПолучитьСтрокиНекорректныхКомбинацийГорячихКлавиш(ТаблицыГорячихКлавиш) Экспорт
	
	ЗапрещенныеКлавиши = ПолучитьТаблицуЗапрещенныхКлавиш();
	ЗапросЗапрещенныхКомбинаций = Новый Запрос;
	ЗапросЗапрещенныхКомбинаций.Текст = ПолучитьТекстЗапросаЗапрещенныхКомбинацийГорячихКлавиш();
	
	КомандыСАктивнымБуфером = ПолучитьИменаКомандПересекающихсяСАктивнымБуфером();
	ЗапросЗапрещенныхКомбинаций.УстановитьПараметр("ГорячиеКлавиши", ТаблицыГорячихКлавиш.ОсновныеГорячиеКлавиши);
	ЗапросЗапрещенныхКомбинаций.УстановитьПараметр("ГорячиеКлавишиКупюр", ТаблицыГорячихКлавиш.ГорячиеКлавишиКупюр);
	ЗапросЗапрещенныхКомбинаций.УстановитьПараметр("ЗапрещенныеКлавиши", ЗапрещенныеКлавиши);
	
	ЗапросЗапрещенныхКомбинаций.УстановитьПараметр("КомандыСАктивнымБуфером", КомандыСАктивнымБуфером);
	РезультатЗапроса = ЗапросЗапрещенныхКомбинаций.Выполнить();
	НекорректныеКомбинации = РезультатЗапроса.Выгрузить();
	
	ЗапросДублей = Новый Запрос;
	ЗапросДублей.Текст = ПолучитьТекстЗапросаДублейГорячихКлавиш();
	ЗапросДублей.УстановитьПараметр("ГорячиеКлавиши", ТаблицыГорячихКлавиш.ОсновныеГорячиеКлавиши);
	ЗапросДублей.УстановитьПараметр("Избранное", ТаблицыГорячихКлавиш.ГорячиеКлавишиИзбранное);
	ЗапросДублей.УстановитьПараметр("ГорячиеКлавишиКупюр", ТаблицыГорячихКлавиш.ГорячиеКлавишиКупюр);
	ЗапросДублей.УстановитьПараметр("КлавишаНет", ИнтерфейсРМКСлужебныйКлиентСервер.ПредставлениеПустойКлавиши());
	РезультатЗапроса = ЗапросДублей.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДублей = РезультатЗапроса.Выбрать();
		Пока ВыборкаДублей.Следующий() Цикл
			Если Не ВыборкаДублей.ЗаписьУникальна Тогда
				НоваяСтрока = НекорректныеКомбинации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДублей);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат НекорректныеКомбинации;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаполнитьДанныеПалитры(ОбъектПалитраТоваров, СтрокаПалитры)
	
	РезультатФункции = Истина;
	Попытка
		ОбъектПалитраТоваров.Заблокировать();
	Исключение
		ТекстОшибки = НСтр("ru = 'Ошибка блокировки палитры товаров, при загрузке из файла настроек.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстОшибки,
			УровеньЖурналаРегистрации.Ошибка, ,
			ОбъектПалитраТоваров,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		РезультатФункции = Ложь;
	КонецПопытки;

	Если РезультатФункции Тогда
		ЗаполнитьЗначенияСвойств(ОбъектПалитраТоваров, СтрокаПалитры, , "Ссылка, Состав");
		
		СправочникМенеджерНоменклатура = СправочникМенеджерПоТипу(Метаданные.ОпределяемыеТипы.НоменклатураРМК);
		СправочникМенеджерХарактеристика = СправочникМенеджерПоТипу(Метаданные.ОпределяемыеТипы.ХарактеристикаРМК);
		СправочникМенеджерУпаковка = СправочникМенеджерПоТипу(Метаданные.ОпределяемыеТипы.УпаковкаРМК);
		
		ОбъектПалитраТоваров.Состав.Очистить();
		Для Каждого СтрокаСостава Из СтрокаПалитры.Состав Цикл
			
			НоваяСтрока = ОбъектПалитраТоваров.Состав.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСостава);
			
			Если ЗначениеЗаполнено(СтрокаСостава.НоменклатураГУИД) И Не СправочникМенеджерНоменклатура = Неопределено Тогда
				НоваяСтрока.Номенклатура = СправочникМенеджерНоменклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаСостава.НоменклатураГУИД));
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаСостава.ХарактеристикаГУИД) И Не СправочникМенеджерХарактеристика = Неопределено Тогда
				НоваяСтрока.Характеристика = СправочникМенеджерХарактеристика.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаСостава.ХарактеристикаГУИД));
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаСостава.УпаковкаГУИД) И Не СправочникМенеджерУпаковка = Неопределено Тогда
				НоваяСтрока.Упаковка = СправочникМенеджерУпаковка.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаСостава.УпаковкаГУИД));
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ЗаполнитьДанныеВидаКонтроля(ОбъектВидКонтроля, СтрокаВидаКонтроля)
	
	РезультатФункции = Истина;
	Попытка
		ОбъектВидКонтроля.Заблокировать();
	Исключение
		ТекстОшибки = НСтр("ru = 'Ошибка блокировки вида контроля, при загрузке из файла настроек.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстОшибки,
			УровеньЖурналаРегистрации.Ошибка, ,
			ОбъектВидКонтроля,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		РезультатФункции = Ложь;
	КонецПопытки;
	
	Если РезультатФункции Тогда
		ЗаполнитьЗначенияСвойств(ОбъектВидКонтроля, СтрокаВидаКонтроля, , "Ссылка, ПараметрыКонтроля");
		ОбъектВидКонтроля.ПараметрыКонтроля.Очистить();
		Для Каждого СтрокаПараметра Из СтрокаВидаКонтроля.ПараметрыКонтроля Цикл
			НоваяСтрока = ОбъектВидКонтроля.ПараметрыКонтроля.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПараметра);
		КонецЦикла;
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

Функция ЗаполнитьДанныеКонтроляПродаж(ОбъектКонтрольПродаж, СтрокаЭлементаКонтроляПродаж)
	
	РезультатФункции = Истина;
	Попытка
		ОбъектКонтрольПродаж.Заблокировать();
	Исключение
		ТекстОшибки = НСтр("ru = 'Ошибка блокировки контроля продаж, при загрузке из файла настроек.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстОшибки,
			УровеньЖурналаРегистрации.Ошибка, ,
			ОбъектКонтрольПродаж,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		РезультатФункции = Ложь;
	КонецПопытки;
	
	Если РезультатФункции Тогда
		ЗаполнитьЗначенияСвойств(ОбъектКонтрольПродаж, СтрокаЭлементаКонтроляПродаж,
			"Наименование,Описание,ДляВсехТорговыхОбъектов,ДляВсейНоменклатуры,Палитра,НаименованиеГруппыТоваров");
		ОбъектКонтрольПродаж.Использование = Истина;
		Если Не ОбъектКонтрольПродаж.Локальный Тогда
			ОбъектКонтрольПродаж.ВключенВРМК = Истина;
		КонецЕсли;
		СправочникМенеджерНоменклатура = СправочникМенеджерПоТипу(Метаданные.ОпределяемыеТипы.НоменклатураРМК);
		ОбъектКонтрольПродаж.Номенклатура.Очистить();
		ОбъектКонтрольПродаж.КонтрольПродаж.Очистить();
		
		Для Каждого СтрокаНоменклатуры Из СтрокаЭлементаКонтроляПродаж.Номенклатура Цикл
			НоваяСтрока = ОбъектКонтрольПродаж.Номенклатура.Добавить();
			Если ЗначениеЗаполнено(СтрокаНоменклатуры.НоменклатураГУИД) И Не СправочникМенеджерНоменклатура = Неопределено Тогда
				НоменклатураГУИД = Новый УникальныйИдентификатор(СтрокаНоменклатуры.НоменклатураГУИД);
				НоваяСтрока.Номенклатура = СправочникМенеджерНоменклатура.ПолучитьСсылку(НоменклатураГУИД);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаКонтроля Из СтрокаЭлементаКонтроляПродаж.КонтрольПродаж Цикл
			НоваяСтрока = ОбъектКонтрольПродаж.КонтрольПродаж.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКонтроля);
			НоваяСтрока.ВидКонтроля = ПолучитьВидКонтроляПоСсылкеИмени(СтрокаКонтроля);
		КонецЦикла;
		УчетТорговыхОбъектов = Истина;
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакУчетаТорговыхОбъектовКонтроляПродаж(УчетТорговыхОбъектов);
		Если УчетТорговыхОбъектов Тогда
			ОбъектКонтрольПродаж.ТорговыеОбъекты.Очистить();
			СправочникМенеджерТорговыйОбъект = СправочникМенеджерПоТипу(Метаданные.ОпределяемыеТипы.ТорговыйОбъектРМК);
			Для Каждого СтрокаТорговогоОбъекта Из СтрокаЭлементаКонтроляПродаж.ТорговыеОбъекты Цикл
				НоваяСтрока = ОбъектКонтрольПродаж.ТорговыеОбъекты.Добавить();
				Если ЗначениеЗаполнено(СтрокаТорговогоОбъекта.ТорговыйОбъектГУИД)
						И Не СправочникМенеджерТорговыйОбъект = Неопределено Тогда
					ТорговыйОбъектГУИД = Новый УникальныйИдентификатор(СтрокаТорговогоОбъекта.ТорговыйОбъектГУИД);
					НоваяСтрока.ТорговыйОбъект = СправочникМенеджерТорговыйОбъект.ПолучитьСсылку(ТорговыйОбъектГУИД);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

Функция ПолучитьВидКонтроляПоСсылкеИмени(СтрокаКонтроля)
	
	РезультатФункции = Справочники.ВидыКонтроля.ПустаяСсылка();
	Если ЗначениеЗаполнено(СтрокаКонтроля.ВидКонтроляИмя) Тогда
		РезультатФункции = ПредопределенноеЗначение(СтрШаблон("Справочник.ВидыКонтроля.%1", СтрокаКонтроля.ВидКонтроляИмя));
	ИначеЕсли ЗначениеЗаполнено(СтрокаКонтроля.ВидКонтроляГуид) Тогда
		ВидКонтроляГуид = Новый УникальныйИдентификатор(СтрокаКонтроля.ВидКонтроляГуид);
		РезультатФункции = Справочники.ВидыКонтроля.ПолучитьСсылку(ВидКонтроляГуид);
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

Функция ЗаписатьДанныеПалитры(СтрокаПалитры, ЭтоВложеннаяПалитра = Ложь)
	
	ОбъектПалитраТоваров = Неопределено;
	
	СсылкаПалитраТоваров = СтрокаПалитры.Ссылка;
	Если НЕ ОбщегоНазначения.СсылкаСуществует(СсылкаПалитраТоваров) Тогда
		
		СтрокаGUID = СсылкаПалитраТоваров.УникальныйИдентификатор();
		НовыйGUID = Новый УникальныйИдентификатор(СтрокаGUID);
		НоваяСсылка = Справочники.ПалитраТоваровРМК.ПолучитьСсылку(НовыйGUID);
		ОбъектПалитраТоваров = Справочники.ПалитраТоваровРМК.СоздатьЭлемент();
		ОбъектПалитраТоваров.УстановитьСсылкуНового(НоваяСсылка);
		
	ИначеЕсли Не ЭтоВложеннаяПалитра Тогда
		ОбъектПалитраТоваров = СсылкаПалитраТоваров.ПолучитьОбъект();
	КонецЕсли;
	
	Если Не ОбъектПалитраТоваров = Неопределено Тогда
		Если ЗаполнитьДанныеПалитры(ОбъектПалитраТоваров, СтрокаПалитры) Тогда
			ОбъектПалитраТоваров.Записать();
		Иначе
			ОбъектПалитраТоваров = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбъектПалитраТоваров;
	
КонецФункции

Процедура ЗаписатьДанныеВидаКонтроля(СтрокаВидаКонтроля)
	
	ОбъектВидКонтроля = Неопределено;
	СсылкаВидКонтроля = Справочники.ВидыКонтроля.ПустаяСсылка();
	Если Не СтрокаВидаКонтроля.ВидКонтроляИмя = "" Тогда
		СсылкаВидКонтроля = ПредопределенноеЗначение(СтрШаблон("Справочник.ВидыКонтроля.%1", СтрокаВидаКонтроля.ВидКонтроляИмя));
		ОбъектВидКонтроля = СсылкаВидКонтроля.ПолучитьОбъект();
	Иначе
		СсылкаВидКонтроля = СтрокаВидаКонтроля.Ссылка;
		Если ОбщегоНазначения.СсылкаСуществует(СсылкаВидКонтроля) Тогда
			ОбъектВидКонтроля = СсылкаВидКонтроля.ПолучитьОбъект();
		Иначе
			СтрокаGUID = СсылкаВидКонтроля.УникальныйИдентификатор();
			НовыйGUID = Новый УникальныйИдентификатор(СтрокаGUID);
			НоваяСсылка = Справочники.ВидыКонтроля.ПолучитьСсылку(НовыйGUID);
			ОбъектВидКонтроля = Справочники.ВидыКонтроля.СоздатьЭлемент();
			ОбъектВидКонтроля.УстановитьСсылкуНового(НоваяСсылка);
			ОбъектВидКонтроля.Локальный = Истина;
		КонецЕсли;
	КонецЕсли; 
	
	Если Не ОбъектВидКонтроля = Неопределено Тогда
		Если ЗаполнитьДанныеВидаКонтроля(ОбъектВидКонтроля, СтрокаВидаКонтроля) Тогда
			ОбъектВидКонтроля.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаписатьДанныеКонтроляПродаж(СтрокаКонтроляПродаж)
	
	ОбъектКонтрольПродаж = Неопределено;
	СсылкаКонтрольПродаж = СтрокаКонтроляПродаж.Ссылка;
	Если ОбщегоНазначения.СсылкаСуществует(СсылкаКонтрольПродаж) Тогда
		ОбъектКонтрольПродаж = СсылкаКонтрольПродаж.ПолучитьОбъект();
	Иначе
		СтрокаGUID = СсылкаКонтрольПродаж.УникальныйИдентификатор();
		НовыйGUID = Новый УникальныйИдентификатор(СтрокаGUID);
		НоваяСсылка = Справочники.КонтрольПродаж.ПолучитьСсылку(НовыйGUID);
		ОбъектКонтрольПродаж = Справочники.КонтрольПродаж.СоздатьЭлемент();
		ОбъектКонтрольПродаж.УстановитьСсылкуНового(НоваяСсылка);
		ОбъектКонтрольПродаж.Локальный = Истина;
	КонецЕсли;
	
	Если Не ОбъектКонтрольПродаж = Неопределено Тогда
		Если ЗаполнитьДанныеКонтроляПродаж(ОбъектКонтрольПродаж, СтрокаКонтроляПродаж) Тогда
			ОбъектКонтрольПродаж.Записать();
		Иначе
			ОбъектКонтрольПродаж = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбъектКонтрольПродаж;
	
КонецФункции

Функция ПолучитьТаблицуЗапрещенныхКлавиш()
	
	ЗапрещенныеКлавиши = ПолучитьШаблонТаблицыГорячихКлавиш();
	ЗапрещенныеКлавиши.Колонки.Удалить("ИмяКнопки");
	ЗапрещенныеКлавиши.Колонки.Удалить("ЗаголовокКнопки");
	ЗапрещенныеКлавиши.Колонки.Добавить("РаботаСБуфером", Новый ОписаниеТипов("Булево"));
	
	ДобавитьЗапрещеннуюКомбинациюКлавиш(ЗапрещенныеКлавиши, "F10", Истина, Ложь, Истина);
	ДобавитьЗапрещеннуюКомбинациюКлавиш(ЗапрещенныеКлавиши, "A", Ложь, Истина, Ложь, Истина);
	ДобавитьЗапрещеннуюКомбинациюКлавиш(ЗапрещенныеКлавиши, "C", Ложь, Истина, Ложь, Истина);
	ДобавитьЗапрещеннуюКомбинациюКлавиш(ЗапрещенныеКлавиши, "V", Ложь, Истина, Ложь, Истина);
	
	Если ОбщегоНазначения.ЭтоLinuxКлиент() Тогда
		ДобавитьЗапрещеннуюКомбинациюКлавиш(ЗапрещенныеКлавиши, "U", Истина, Истина, Ложь);
		ДобавитьЗапрещеннуюКомбинациюКлавиш(ЗапрещенныеКлавиши, "T", Истина, Истина, Ложь);
		ДобавитьЗапрещеннуюКомбинациюКлавиш(ЗапрещенныеКлавиши, "F", Истина, Истина, Ложь);
		ДобавитьЗапрещеннуюКомбинациюКлавиш(ЗапрещенныеКлавиши, "D", Истина, Истина, Ложь);
		ДобавитьЗапрещеннуюКомбинациюКлавиш(ЗапрещенныеКлавиши, "L", Истина, Истина, Ложь);
	КонецЕсли;
	
	// 0 ... 9
	Для Счетчик = 0 По 9 Цикл
		КлавишаСтрокой = СтрШаблон("_%1", Счетчик);
		ДобавитьЗапрещеннуюКомбинациюКлавиш(ЗапрещенныеКлавиши, КлавишаСтрокой, Ложь, Ложь, Ложь);
	КонецЦикла;
	
	// A...Z
	Для Счетчик = 65 По 90 Цикл
		КлавишаСтрокой = Символ(Счетчик);
		ДобавитьЗапрещеннуюКомбинациюКлавиш(ЗапрещенныеКлавиши, КлавишаСтрокой, Ложь, Ложь, Ложь);
	КонецЦикла;
	
	Возврат ЗапрещенныеКлавиши;
	
КонецФункции

Функция ПолучитьИменаКомандПересекающихсяСАктивнымБуфером()
	
	РезультатФункции = Новый Массив;
	РезультатФункции.Добавить("КомандаВозвратБезЧека");
	Возврат РезультатФункции;
	
КонецФункции

Функция ПолучитьТекстЗапросаДублейГорячихКлавиш()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Избранное.НомерСтроки КАК НомерСтроки,
	|	Избранное.ИмяКнопки КАК ИмяКнопки,
	|	Избранное.ЗаголовокКнопки КАК ЗаголовокКнопки,
	|	Избранное.Клавиша КАК Клавиша,
	|	Избранное.АкселераторAlt КАК АкселераторAlt,
	|	Избранное.АкселераторCtrl КАК АкселераторCtrl,
	|	Избранное.АкселераторShift КАК АкселераторShift
	|ПОМЕСТИТЬ ЗарезервированныеГорячиеКлавишиИзбранного
	|ИЗ
	|	&Избранное КАК Избранное
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГорячиеКлавиши.НомерСтроки КАК НомерСтроки,
	|	ГорячиеКлавиши.ИмяКнопки КАК ИмяКнопки,
	|	ГорячиеКлавиши.ЗаголовокКнопки КАК ЗаголовокКнопки,
	|	ГорячиеКлавиши.Клавиша КАК Клавиша,
	|	ГорячиеКлавиши.АкселераторAlt КАК АкселераторAlt,
	|	ГорячиеКлавиши.АкселераторCtrl КАК АкселераторCtrl,
	|	ГорячиеКлавиши.АкселераторShift КАК АкселераторShift
	|ПОМЕСТИТЬ РанееОпределенныеГорячиеКлавиши
	|ИЗ
	|	&ГорячиеКлавиши КАК ГорячиеКлавиши
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГорячиеКлавишиКупюр.Номинал КАК Номинал,
	|	ГорячиеКлавишиКупюр.Клавиша КАК Клавиша,
	|	ГорячиеКлавишиКупюр.АкселераторAlt КАК АкселераторAlt,
	|	ГорячиеКлавишиКупюр.АкселераторCtrl КАК АкселераторCtrl,
	|	ГорячиеКлавишиКупюр.АкселераторShift КАК АкселераторShift
	|ПОМЕСТИТЬ ГорячиеКлавишиВводНаличных
	|ИЗ
	|	&ГорячиеКлавишиКупюр КАК ГорячиеКлавишиКупюр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РанееОпределенныеГорячиеКлавиши.НомерСтроки КАК НомерСтроки,
	|	"""" КАК Номинал,
	|	РанееОпределенныеГорячиеКлавиши.ИмяКнопки КАК ИмяКнопки,
	|	РанееОпределенныеГорячиеКлавиши.ЗаголовокКнопки КАК ЗаголовокКнопки,
	|	РанееОпределенныеГорячиеКлавиши.Клавиша КАК Клавиша,
	|	РанееОпределенныеГорячиеКлавиши.АкселераторAlt КАК АкселераторAlt,
	|	РанееОпределенныеГорячиеКлавиши.АкселераторCtrl КАК АкселераторCtrl,
	|	РанееОпределенныеГорячиеКлавиши.АкселераторShift КАК АкселераторShift
	|ПОМЕСТИТЬ ТаблицаГорячиеКлавиши
	|ИЗ
	|	РанееОпределенныеГорячиеКлавиши КАК РанееОпределенныеГорячиеКлавиши
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗарезервированныеГорячиеКлавишиИзбранного.НомерСтроки,
	|	"""",
	|	ЗарезервированныеГорячиеКлавишиИзбранного.ИмяКнопки,
	|	ЗарезервированныеГорячиеКлавишиИзбранного.ЗаголовокКнопки,
	|	ЗарезервированныеГорячиеКлавишиИзбранного.Клавиша,
	|	ЗарезервированныеГорячиеКлавишиИзбранного.АкселераторAlt,
	|	ЗарезервированныеГорячиеКлавишиИзбранного.АкселераторCtrl,
	|	ЗарезервированныеГорячиеКлавишиИзбранного.АкселераторShift
	|ИЗ
	|	ЗарезервированныеГорячиеКлавишиИзбранного КАК ЗарезервированныеГорячиеКлавишиИзбранного
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ГорячиеКлавишиВводНаличных.Номинал,
	|	"""",
	|	"""",
	|	ГорячиеКлавишиВводНаличных.Клавиша,
	|	ГорячиеКлавишиВводНаличных.АкселераторAlt,
	|	ГорячиеКлавишиВводНаличных.АкселераторCtrl,
	|	ГорячиеКлавишиВводНаличных.АкселераторShift
	|ИЗ
	|	ГорячиеКлавишиВводНаличных КАК ГорячиеКлавишиВводНаличных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаГорячиеКлавиши.Клавиша КАК Клавиша,
	|	ТаблицаГорячиеКлавиши.АкселераторAlt КАК АкселераторAlt,
	|	ТаблицаГорячиеКлавиши.АкселераторCtrl КАК АкселераторCtrl,
	|	ТаблицаГорячиеКлавиши.АкселераторShift КАК АкселераторShift,
	|	КОЛИЧЕСТВО(*) КАК КоличествоЗаписей
	|ПОМЕСТИТЬ НаборРазличныхСочетаний
	|ИЗ
	|	ТаблицаГорячиеКлавиши КАК ТаблицаГорячиеКлавиши
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаГорячиеКлавиши.Клавиша,
	|	ТаблицаГорячиеКлавиши.АкселераторAlt,
	|	ТаблицаГорячиеКлавиши.АкселераторCtrl,
	|	ТаблицаГорячиеКлавиши.АкселераторShift
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Дубль"" КАК ТипНарушения,
	|	ТаблицаГорячиеКлавиши.НомерСтроки КАК НомерСтроки,
	|	ТаблицаГорячиеКлавиши.Номинал КАК Номинал,
	|	ТаблицаГорячиеКлавиши.ЗаголовокКнопки КАК ЗаголовокКнопки,
	|	ТаблицаГорячиеКлавиши.Клавиша КАК Клавиша,
	|	ТаблицаГорячиеКлавиши.АкселераторAlt КАК АкселераторAlt,
	|	ТаблицаГорячиеКлавиши.АкселераторCtrl КАК АкселераторCtrl,
	|	ТаблицаГорячиеКлавиши.АкселераторShift КАК АкселераторShift,
	|	ВЫБОР
	|		КОГДА НаборРазличныхСочетаний.КоличествоЗаписей > 1
	|				И НЕ ТаблицаГорячиеКлавиши.Клавиша = &КлавишаНет
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьУникальна
	|ИЗ
	|	ТаблицаГорячиеКлавиши КАК ТаблицаГорячиеКлавиши
	|		ЛЕВОЕ СОЕДИНЕНИЕ НаборРазличныхСочетаний КАК НаборРазличныхСочетаний
	|		ПО ТаблицаГорячиеКлавиши.Клавиша = НаборРазличныхСочетаний.Клавиша
	|			И ТаблицаГорячиеКлавиши.АкселераторAlt = НаборРазличныхСочетаний.АкселераторAlt
	|			И ТаблицаГорячиеКлавиши.АкселераторCtrl = НаборРазличныхСочетаний.АкселераторCtrl
	|			И ТаблицаГорячиеКлавиши.АкселераторShift = НаборРазличныхСочетаний.АкселераторShift";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаЗапрещенныхКомбинацийГорячихКлавиш()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ГорячиеКлавиши.НомерСтроки КАК НомерСтроки,
	|	ГорячиеКлавиши.ИмяКнопки КАК ИмяКнопки,
	|	ГорячиеКлавиши.ЗаголовокКнопки КАК ЗаголовокКнопки,
	|	ГорячиеКлавиши.Клавиша КАК Клавиша,
	|	ГорячиеКлавиши.АкселераторAlt КАК АкселераторAlt,
	|	ГорячиеКлавиши.АкселераторCtrl КАК АкселераторCtrl,
	|	ГорячиеКлавиши.АкселераторShift КАК АкселераторShift
	|ПОМЕСТИТЬ РанееОпределенныеГорячиеКлавиши
	|ИЗ
	|	&ГорячиеКлавиши КАК ГорячиеКлавиши
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГорячиеКлавишиКупюр.Номинал КАК Номинал,
	|	ГорячиеКлавишиКупюр.Клавиша КАК Клавиша,
	|	ГорячиеКлавишиКупюр.АкселераторAlt КАК АкселераторAlt,
	|	ГорячиеКлавишиКупюр.АкселераторCtrl КАК АкселераторCtrl,
	|	ГорячиеКлавишиКупюр.АкселераторShift КАК АкселераторShift
	|ПОМЕСТИТЬ ГорячиеКлавишиВводНаличных
	|ИЗ
	|	&ГорячиеКлавишиКупюр КАК ГорячиеКлавишиКупюр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗапрещенныеКлавиши.Клавиша КАК Клавиша,
	|	ЗапрещенныеКлавиши.АкселераторAlt КАК АкселераторAlt,
	|	ЗапрещенныеКлавиши.АкселераторCtrl КАК АкселераторCtrl,
	|	ЗапрещенныеКлавиши.АкселераторShift КАК АкселераторShift,
	|	ЗапрещенныеКлавиши.РаботаСБуфером КАК РаботаСБуфером
	|ПОМЕСТИТЬ ЗапрещенныеГорячиеКлавиши
	|ИЗ
	|	&ЗапрещенныеКлавиши КАК ЗапрещенныеКлавиши
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ЗапрещенныеКлавиши.РаботаСБуфером ТОГДА ""ЗапрещеннаяКомбинацияБуфер""  ИНАЧЕ ""ЗапрещеннаяКомбинация"" КОНЕЦ КАК ТипНарушения,
	|	РанееОпределенныеГорячиеКлавиши.НомерСтроки КАК НомерСтроки,
	|	"""" КАК Номинал,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(50)) КАК ЗаголовокКнопки,
	|	РанееОпределенныеГорячиеКлавиши.Клавиша КАК Клавиша,
	|	РанееОпределенныеГорячиеКлавиши.АкселераторAlt КАК АкселераторAlt,
	|	РанееОпределенныеГорячиеКлавиши.АкселераторCtrl КАК АкселераторCtrl,
	|	РанееОпределенныеГорячиеКлавиши.АкселераторShift КАК АкселераторShift
	|ИЗ
	|	РанееОпределенныеГорячиеКлавиши КАК РанееОпределенныеГорячиеКлавиши
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗапрещенныеГорячиеКлавиши КАК ЗапрещенныеКлавиши
	|		ПО РанееОпределенныеГорячиеКлавиши.Клавиша = ЗапрещенныеКлавиши.Клавиша
	|			И РанееОпределенныеГорячиеКлавиши.АкселераторAlt = ЗапрещенныеКлавиши.АкселераторAlt
	|			И РанееОпределенныеГорячиеКлавиши.АкселераторCtrl = ЗапрещенныеКлавиши.АкселераторCtrl
	|			И РанееОпределенныеГорячиеКлавиши.АкселераторShift = ЗапрещенныеКлавиши.АкселераторShift
	|			И ((НЕ ЗапрещенныеКлавиши.РаботаСБуфером) ИЛИ РанееОпределенныеГорячиеКлавиши.ИмяКнопки В (&КомандыСАктивнымБуфером))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ЗапрещеннаяКомбинация"",
	|	0,
	|	ГорячиеКлавишиВводНаличных.Номинал,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(50)),
	|	ГорячиеКлавишиВводНаличных.Клавиша,
	|	ГорячиеКлавишиВводНаличных.АкселераторAlt,
	|	ГорячиеКлавишиВводНаличных.АкселераторCtrl,
	|	ГорячиеКлавишиВводНаличных.АкселераторShift
	|ИЗ
	|	ГорячиеКлавишиВводНаличных КАК ГорячиеКлавишиВводНаличных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗапрещенныеГорячиеКлавиши КАК ЗапрещенныеКлавиши
	|		ПО ГорячиеКлавишиВводНаличных.Клавиша = ЗапрещенныеКлавиши.Клавиша
	|			И ГорячиеКлавишиВводНаличных.АкселераторAlt = ЗапрещенныеКлавиши.АкселераторAlt
	|			И ГорячиеКлавишиВводНаличных.АкселераторCtrl = ЗапрещенныеКлавиши.АкселераторCtrl
	|			И ГорячиеКлавишиВводНаличных.АкселераторShift = ЗапрещенныеКлавиши.АкселераторShift
	|			И НЕ ЗапрещенныеКлавиши.РаботаСБуфером";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ДобавитьЗапрещеннуюКомбинациюКлавиш(ЗапрещенныеКлавиши, КлавишаСтрокой,
		АкселераторAlt, АкселераторCtrl, АкселераторShift, РаботаСБуфером = Ложь)
		
	НоваяСтрока = ЗапрещенныеКлавиши.Добавить();
	НоваяСтрока.Клавиша = КлавишаСтрокой;
	НоваяСтрока.АкселераторAlt = АкселераторAlt;
	НоваяСтрока.АкселераторCtrl = АкселераторCtrl;
	НоваяСтрока.АкселераторShift = АкселераторShift;
	НоваяСтрока.РаботаСБуфером = РаботаСБуфером;
	
КонецПроцедуры

Процедура ЗагрузитьТаблицуВводаНаличных(НастройкаРМКОбъект, ТаблицаНоминаловКупюр)
	
	НастройкаРМКОбъект.ВводНаличных.Очистить();
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	
	МассивНоминаловКупюр = ОбщегоНазначенияРМККлиентСервер.НоминалыКупюр();
	ИндексСтроки = 0;
	ТекущаяСтрокаНоминала = Неопределено;
	КоличествоСтрокТаблицы = ТаблицаНоминаловКупюр.Количество();
	Для Каждого ЭлементНоминала Из МассивНоминаловКупюр Цикл
		
		НоминалЧислом = ОписаниеТипаЧисло.ПривестиЗначение(ЭлементНоминала);
		Если НоминалЧислом > 0 Тогда
			
			ТекущийНоминалТаблицы = 0;
			Пока ТекущийНоминалТаблицы < НоминалЧислом И ИндексСтроки < КоличествоСтрокТаблицы Цикл
				ТекущаяСтрокаНоминала = ТаблицаНоминаловКупюр[ИндексСтроки];
				ТекущийНоминалТаблицы = ОписаниеТипаЧисло.ПривестиЗначение(ТекущаяСтрокаНоминала.Номинал);
				ИндексСтроки = ИндексСтроки + 1;
			КонецЦикла;
			КлавишаКупюры = ИнтерфейсРМКСлужебныйКлиентСервер.ПредставлениеПустойКлавиши();
			ИспользованиеНоминала = Истина;
			Если ТекущийНоминалТаблицы = НоминалЧислом Тогда
				ИспользованиеНоминала = ТекущаяСтрокаНоминала.Использование;
				Если Не ТаблицаНоминаловКупюр.Колонки.Найти("Клавиша") = Неопределено Тогда
					КлавишаКупюры = ТекущаяСтрокаНоминала.Клавиша;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока = НастройкаРМКОбъект.ВводНаличных.Добавить();
			НоваяСтрока.Номинал = ЭлементНоминала;
			НоваяСтрока.Использование = ИспользованиеНоминала;
			НоваяСтрока.Клавиша = КлавишаКупюры;
		
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьТаблицуПорядкаОбхода(НастройкаРМКОбъект, ТаблицаПорядка)
	
	ИмяГоризонтальнаяОриентация = "ГоризонтальнаяОриентация";
	ИмяВертикальнаяОриентация = "ВертикальнаяОриентация";
	Если ТаблицаПорядка.Количество() > 0 Тогда
		
		ЭтоГоризонтальнаяОриентация = Не ТаблицаПорядка[0].ВертикальнаяОриентация;
		КорневаяГруппа = ?(ЭтоГоризонтальнаяОриентация, ИмяГоризонтальнаяОриентация, ИмяВертикальнаяОриентация);
		
		ОчиститьПорядокОбластейОриентации(ЭтоГоризонтальнаяОриентация, НастройкаРМКОбъект);
		ЗаписатьПорядокОбластей(НастройкаРМКОбъект, ТаблицаПорядка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьПорядокОбластейОриентации(ГоризонтальнаяОриентация, НастройкаРМКОбъект)
	
	КоличествоЭлементов = НастройкаРМКОбъект.ПорядокОбластей.Количество();
	ИндексСтроки = 0;
	Пока ИндексСтроки < КоличествоЭлементов Цикл
		ТекущийИндекс = КоличествоЭлементов - ИндексСтроки - 1;
		СтрокаПорядка = НастройкаРМКОбъект.ПорядокОбластей.Получить(ТекущийИндекс);
		Если Не СтрокаПорядка.ВертикальнаяОриентация = ГоризонтальнаяОриентация Тогда
			НастройкаРМКОбъект.ПорядокОбластей.Удалить(ТекущийИндекс);
		КонецЕсли;
		
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьПорядокОбластей(НастройкаРМКОбъект, ТаблицаПорядка)
	
	Для Каждого СтрокаПорядка Из ТаблицаПорядка Цикл
		
		НоваяСтрока = НастройкаРМКОбъект.ПорядокОбластей.Добавить();
		НоваяСтрока.ОбластьРодитель = СтрокаПорядка.ОбластьРодитель;
		НоваяСтрока.Область = СтрокаПорядка.Область;
		НоваяСтрока.Порядок = СтрокаПорядка.Порядок;
		НоваяСтрока.ВертикальнаяОриентация = СтрокаПорядка.ВертикальнаяОриентация;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьУстройстваРаспознаванияЭлектронныхВесов(ТаблицаУстройствРаспознавания, РабочееМесто)
	
	ЭлектронныеВесыРабочегоМеста
		= ОбщегоНазначенияРМК.ПолучитьПодключенноеОборудованиеПоТипу("ЭлектронныеВесы", РабочееМесто);
	УстройстваРаспознаванияРабочегоМеста
		= ОбщегоНазначенияРМК.ПолучитьПодключенноеОборудованиеПоТипу("УстройствоРаспознавания", РабочееМесто);
	
	УстройстваРабочегоМеста = Новый Структура;
	УстройстваРабочегоМеста.Вставить("ЭлектронныеВесы", ЭлектронныеВесыРабочегоМеста);
	УстройстваРабочегоМеста.Вставить("УстройстваРаспознавания", УстройстваРаспознаванияРабочегоМеста);
	ОбщегоНазначенияРМК.ЗаписатьУстройстваРаспознаванияЭлектронныхВесов(ТаблицаУстройствРаспознавания,
		УстройстваРабочегоМеста);
	
КонецПроцедуры

Функция СправочникМенеджерПоТипу(ОпределяемыйТип)
	
	ТипыОпределяемогоТипа = ОпределяемыйТип.Тип.Типы();
	Если ТипыОпределяемогоТипа.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не Справочники.ТипВсеСсылки().СодержитТип(ТипыОпределяемогоТипа[0]) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СправочникМенеджер = Справочники[Метаданные.НайтиПоТипу(ТипыОпределяемогоТипа[0]).Имя];
	Возврат СправочникМенеджер;
	
КонецФункции

#КонецОбласти

#КонецЕсли