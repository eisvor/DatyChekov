#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция возвращает пользователей организации.
//
Функция ПользователиОрганизации(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПользователи.ИмяПользователя
	|ИЗ
	|	Справочник.НастройкиИнтеграцииWebKassa.Пользователи КАК ТаблицаПользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиИнтеграцииWebKassa КАК НастройкиИнтеграции
	|		ПО ТаблицаПользователи.Ссылка = НастройкиИнтеграции.Ссылка
	|ГДЕ
	|	НЕ НастройкиИнтеграции.ПометкаУдаления
	|	И НастройкиИнтеграции.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	СписокПользователей = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокПользователей.Добавить(Выборка.ИмяПользователя);
	КонецЦикла;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяПользователя");
	
КонецФункции

// Функция возвращает адрес сервиса.
//
Функция АдресСервиса(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиИнтеграции.АдресСервиса
	|ИЗ
	|	Справочник.НастройкиИнтеграцииWebKassa КАК НастройкиИнтеграции
	|ГДЕ
	|	НЕ НастройкиИнтеграции.ПометкаУдаления
	|	И НастройкиИнтеграции.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.АдресСервиса;
	
КонецФункции

// Получаем список всех организации по которым имеются настройки.
//
Функция ЗарегистрированныеОрганизации() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НастройкиИнтеграции.Организация КАК Организация
	|ИЗ
	|	Справочник.НастройкиИнтеграцииWebKassa КАК НастройкиИнтеграции";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
КонецФункции

// Функция изменяет адрес сервиса выбранной настройки.
//
Функция ИзменитьАдресСервиса(Организация, НовыйАдресСервиса) Экспорт
	
	Результат = Ложь;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|	ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	НастройкиИнтеграции.Ссылка,
	|	НастройкиИнтеграции.Наименование
	|ИЗ
	|	Справочник.НастройкиИнтеграцииWebKassa КАК НастройкиИнтеграции
	|ГДЕ
	|	НастройкиИнтеграции.Организация = &Организация");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		НачатьТранзакцию();
		
		Попытка
			
			// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(Выборка.Ссылка.Метаданные().ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			НастройкаИнтеграции = Выборка.Ссылка.ПолучитьОбъект(); 
			Если НастройкаИнтеграции = Неопределено Тогда
				ОтменитьТранзакцию();
				Возврат Результат;
			КонецЕсли;
			
			НастройкаИнтеграции.АдресСервиса = НовыйАдресСервиса;
			НастройкаИнтеграции.Записать();
			
			ЗафиксироватьТранзакцию();
			
			Результат = Истина;
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось изменить адрес сервиса в настройке %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ИнтеграцияWebKassaКлиентСервер.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Ссылка.Метаданные(), Выборка.Ссылка, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция регистрирует новую настройку интеграции с сервисом 1С:WebKassa для указанной организации.
//
Функция СоздатьНастройкуИнтеграцииWebKassa(Организация, Пользователь, АдресСервиса) Экспорт
	
	Результат = Истина;
	
	Если Не ЗначениеЗаполнено(Организация)
		Или Не ЗначениеЗаполнено(Пользователь)
		Или Не ЗначениеЗаполнено(АдресСервиса) Тогда
		Результат = Ложь;
		Возврат Результат;
	КонецЕсли;
	
	НастройкаИнтеграции = Справочники.НастройкиИнтеграцииWebKassa.СоздатьЭлемент();
	НастройкаИнтеграции.АдресСервиса = АдресСервиса;
	НастройкаИнтеграции.Организация = Организация;
	
	ШаблонНаименования = НСтр("ru = '%1 (1С:WebKassa)'");
	НастройкаИнтеграции.Наименование = СтрЗаменить(ШаблонНаименования, "%1", Организация);
	
	НовыйПользователь = НастройкаИнтеграции.Пользователи.Добавить();
	НовыйПользователь.ИмяПользователя = Пользователь;
	
	Попытка
		НастройкаИнтеграции.Записать();
	Исключение
		Результат = Ложь;
		ТекстСообщения = НСтр("ru = 'Не удалось создать настройку интеграции с сервисом 1С:WebKassa для организации %Ссылка% по причине: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Организация);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(ИнтеграцияWebKassaКлиентСервер.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
			НастройкаИнтеграции.Ссылка.Метаданные(), , ТекстСообщения);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция добавляет нового пользователя в список пользователей, имеющих доступ к настройке интеграции с 1С:WebKassa.
//
Функция ДобавитьПользователяВНастройкуИнтеграции(Организация, Пользователь) Экспорт
	
	Результат = Ложь;
	
	Если Не ЗначениеЗаполнено(Организация) ИЛИ Не ЗначениеЗаполнено(Пользователь) Тогда
		Результат = Ложь;
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиИнтеграцииWebKassa.Ссылка,
	|	НастройкиИнтеграцииWebKassa.Наименование
	|ИЗ
	|	Справочник.НастройкиИнтеграцииWebKassa КАК НастройкиИнтеграцииWebKassa
	|ГДЕ
	|	НастройкиИнтеграцииWebKassa.Организация = &Организация");
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		НастройкиДляОрганизации = Выборка.Ссылка.ПолучитьОбъект(); 
		
		ПользовательОрганизации = НастройкиДляОрганизации.Пользователи.Добавить();
		ПользовательОрганизации.ИмяПользователя = Пользователь;
		
		НастройкиДляОрганизации.Записать();
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция добавляет пользователей в список пользователей, имеющих доступ к настройке интеграции с 1С:WebKassa.
//
Функция ДобавитьПользователейВНастройкуИнтеграции(Организация, МассивПользователей) Экспорт
	
	Результат = Ложь;
	
	Если Не ЗначениеЗаполнено(Организация) ИЛИ Не ЗначениеЗаполнено(МассивПользователей) Тогда
		Результат = Ложь;
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиИнтеграцииWebKassa.Ссылка,
	|	НастройкиИнтеграцииWebKassa.Наименование
	|ИЗ
	|	Справочник.НастройкиИнтеграцииWebKassa КАК НастройкиИнтеграцииWebKassa
	|ГДЕ
	|	НастройкиИнтеграцииWebKassa.Организация = &Организация");
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		НастройкиДляОрганизации = Выборка.Ссылка.ПолучитьОбъект(); 
		
		Для Каждого Пользователь Из МассивПользователей Цикл
			НайденнаяСтрока = НастройкиДляОрганизации.Пользователи.Найти(Пользователь, "ИмяПользователя");
			Если НайденнаяСтрока = Неопределено Тогда
				ПользовательОрганизации = НастройкиДляОрганизации.Пользователи.Добавить();
				ПользовательОрганизации.ИмяПользователя = Пользователь;
			КонецЕсли;
		КонецЦикла;
		
		НастройкиДляОрганизации.Записать();
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий
//Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
//Код процедур и функций
#КонецОбласти

#КонецЕсли
