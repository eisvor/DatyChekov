#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Рассчитывает GTIN, записываемый эмитентом в КиЗ ГИСМ
//
// Параметры:
//  Номенклатура	 - СправочникСсылка.Номенклатура - номенклатура для расчета GTIN.
//  Характеристика	 - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика для расчета GTIN.
// 
// Возвращаемое значение:
//  Строка - GTIN КиЗ.
//
Функция GTINКиЗ(Номенклатура, Характеристика) Экспорт
	
	Если ЗначениеЗаполнено(Характеристика) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Характеристика ,"КиЗГИСМGTIN");
	Иначе
		
		РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "КиЗГИСМGTIN,ВидНоменклатуры.ИспользоватьХарактеристики");
		
		Если РеквизитыНоменклатуры.ВидНоменклатурыИспользоватьХарактеристики = Истина Тогда
			ТекстИсключения = НСтр("ru = 'Невозможно определить GTIN КиЗ, т.к. не передана характеристика.'");
			ВызватьИсключение ТекстИсключения;
		Иначе
			Возврат РеквизитыНоменклатуры.КиЗГИСМGTIN;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Возвращает список реквизитов, которые не нужно редактировать
// с помощью обработки группового изменения объектов.
//
// Возвращаемое значение:
//  Массив - массив нередактируемых реквизитов.
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;
	
	НеРедактируемыеРеквизиты.Добавить("Наименование");
	НеРедактируемыеРеквизиты.Добавить("ФайлКартинки");
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

// Проверяет используются ли характеристики для переденной номенклатуры.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - проверяемая номенклатура.
//
// Возвращаемое значение:
//  Булево - ИСТИНА, если характеристики используются.
//
Функция ХарактеристикиИспользуются(Номенклатура) Экспорт
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
	|			ИЛИ СпрНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
	|				ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.ХарактеристикиИспользуются;
	
КонецФункции

// Проверяет, используются ли характеристики номенклатуры.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - проверяемая номенклатура.
//
// Возвращаемое значение:
//  Булево - ИСТИНА, если характеристики используются.
//
Функция ПроверитьИспользованиеХарактеристик(Номенклатура) Экспорт
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
	|			ИЛИ СпрНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
	|				ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.ХарактеристикиИспользуются;
	
КонецФункции

// Возвращает структуру со реквизитами номенклатуры.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура для получения реквизитов.
//  Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика номенклатуры.
//  Упаковка - СправочникСсылка.УпаковкиНоменклатуры - упаковка номенклатуры.
//
// Возвращаемое значение:
//  Структура - структура с параметрами:
//  	*Характеристика             - Булево.
//  	*Упаковка                   - Булево.
//  	*ХарактеристикиИспользуются - Булево.
//
Функция ПроверитьПринадлежностьХарактеристикиИУпаковкиВладельцу(Номенклатура, Характеристика, Упаковка) Экспорт

	СтруктураВозврата = Новый Структура("Характеристика, Упаковка, ХарактеристикиИспользуются");
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		СтруктураВозврата.Характеристика             = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		СтруктураВозврата.Упаковка                   = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
		СтруктураВозврата.ХарактеристикиИспользуются = Ложь;
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(СпрУпаковки.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) КАК Упаковка,
	|	ЕСТЬNULL(СпрХарактеристики.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
	|			ИЛИ СпрНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
	|		ПО (ВЫБОР
	|				КОГДА СпрНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
	|					ТОГДА СпрНоменклатура.ВидНоменклатуры
	|				КОГДА СпрНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
	|					ТОГДА СпрНоменклатура.Ссылка
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ = СпрХарактеристики.Владелец)
	|			И (СпрХарактеристики.Ссылка = &Характеристика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК СпрУпаковки
	|		ПО (ВЫБОР
	|				КОГДА СпрНоменклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|					ТОГДА СпрНоменклатура.Ссылка
	|				КОГДА СпрНоменклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ПустаяСсылка)
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ СпрНоменклатура.НаборУпаковок
	|			КОНЕЦ = СпрУпаковки.Владелец)
	|			И (СпрУпаковки.Ссылка = &Упаковка)
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Упаковка", Упаковка);
	
    Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(СтруктураВозврата,Выборка);
	
	Возврат СтруктураВозврата;

КонецФункции

// Возвращает описание блокируемых реквизитов.
//
// Возвращаемое значение:
//     Массив - содержит строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]
//              где ИмяРеквизита - имя реквизита объекта, ИмяЭлементаФормы - имя элемента формы, связанного с
//              реквизитом.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт

	Результат = Новый Массив;
	Результат.Добавить("ВидНоменклатуры");
	Результат.Добавить("ДоговорКонтрагента");
	Результат.Добавить("Родитель");
	Результат.Добавить("Артикул");
	Результат.Добавить("СтавкаНДС");
	Результат.Добавить("НаборУпаковок");
	Результат.Добавить("ЕдиницаИзмерения");
	Результат.Добавить("ТоварнаяГруппа");
	Результат.Добавить("ЦеноваяГруппа");
	Результат.Добавить("Вес");
	Результат.Добавить("Весовой");
	Результат.Добавить("ТоварнаяКатегория");
	Результат.Добавить("Марка");
	Результат.Добавить("ТипСерийногоНомера");
	Результат.Добавить("ИспользоватьСерийныеНомера");
	Результат.Добавить("Номинал");
	Результат.Добавить("ТипСрокаДействия;ДатаОкончанияДействия");
	Результат.Добавить("ЧастичноеПогашение");
	Результат.Добавить("ТипНоминала");
	Результат.Добавить("Периодичность");
	Результат.Добавить("КоличествоПериодовДействия");
	Результат.Добавить("СерийныеНомера;СерийныеНомера,СерийныеНомераЗаполнитьСерийныеНомера,ПовторнаяАктивацияПодарочногоСертификата");
	Результат.Добавить("СтранаПроисхождения");
	Результат.Добавить("Производитель");
	Результат.Добавить("ВидАлкогольнойПродукцииЕГАИС");
	Результат.Добавить("ПроизводительИмпортерАлкогольнойПродукции");
	Результат.Добавить("ОбъемДАЛ");
	Результат.Добавить("РазрешитьВводДробногоКоличества");
	Результат.Добавить("КодТНВЭД");
	Результат.Добавить("ЕдиницаИзмеренияТНВЭД");
	Результат.Добавить("КодТНВЭД");
	
	Возврат Результат;

КонецФункции

// Возвращает структуру с реквизитами номенклатуры.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура для получения реквизитов.
//
// Возвращаемое значение:
//  Структура - структура с параметрами:
//  	*СтавкаНДС               - ПеречислениеСсылка.СтавкиНДС.
//  	*ЭтоУслуга               - Булево.
//  	*ЭтоПодарочныйСертификат - Булево.
//
Функция ПолучитьРеквизитыНоменклатуры(Номенклатура) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоУслуга,
	|	ВЫБОР
	|		КОГДА Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПодарочныйСертификат
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура");
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		СтавкаНДС               = Выборка.СтавкаНДС;
		ЭтоУслуга               = Выборка.ЭтоУслуга;
		ЭтоПодарочныйСертификат = Выборка.ЭтоПодарочныйСертификат;
	Иначе
		
		СтавкаНДС               = Справочники.СтавкиНДС.ПустаяСсылка();
		ЭтоУслуга               = Неопределено;
		ЭтоПодарочныйСертификат = Неопределено;
		
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("СтавкаНДС, ЭтоУслуга, ЭтоПодарочныйСертификат",
		СтавкаНДС,
		ЭтоУслуга,
		ЭтоПодарочныйСертификат);
	
	Возврат СтруктураРеквизитов;

КонецФункции // ПолучитьРеквизитыНоменклатуры()

// Возвращает список реквизитов, которые разрешается редактировать
// с помощью обработки группового изменения объектов.
//
// Возвращаемое значение:
//  Массив - массив редактируемых реквизитов.
//
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;
	
	РедактируемыеРеквизиты.Добавить("СтавкаНДС");
	РедактируемыеРеквизиты.Добавить("ЦеноваяГруппа");
	РедактируемыеРеквизиты.Добавить("СтранаПроисхождения");
	РедактируемыеРеквизиты.Добавить("ТоварнаяГруппа");
	РедактируемыеРеквизиты.Добавить("ТоварнаяКатегория");
	РедактируемыеРеквизиты.Добавить("Марка");
	РедактируемыеРеквизиты.Добавить("РазрешитьВводДробногоКоличества");
	
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

// Проверяет, используются ли подарочные сертификаты.
//
// Возвращаемое значение:
//  Булево - массив редактируемых реквизитов.
//
Функция ИспользуютсяПодарочныеСертификаты() Экспорт
	
	ИспользуютсяПодарочныеСертификаты = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И НЕ Номенклатура.ПометкаУдаления
	|	И НЕ Номенклатура.ЭтоГруппа";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ИспользуютсяПодарочныеСертификаты = Ложь;
	КонецЕсли;
	
	Возврат ИспользуютсяПодарочныеСертификаты;
	
КонецФункции

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Обновляет признаки номенклатуры.
//
// Параметры:
//  Форма - УправляемаяФорма - форма для замены реквизитов.
//  Ответ - Строка - ответ.
//
Процедура ОбновитьПризнакиНоменклатуры(Форма, Ответ = "") Экспорт
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ТипНоменклатуры", 				"ТипНоменклатуры");
	СтруктураРеквизитов.Вставить("АгентскиеУслуги", 				"АгентскиеУслуги");
	СтруктураРеквизитов.Вставить("АлкогольнаяПродукция", 			"АлкогольнаяПродукция");
	СтруктураРеквизитов.Вставить("ВидАлкогольнойПродукцииЕГАИС", 	"ВидАлкогольнойПродукцииЕГАИС");
	СтруктураРеквизитов.Вставить("ИмпортнаяАлкогольнаяПродукция", 	"ИмпортнаяАлкогольнаяПродукция");
	СтруктураРеквизитов.Вставить("ЕдиницаИзмерения", 				"ЕдиницаИзмерения");
	СтруктураРеквизитов.Вставить("НаборУпаковок", 					"НаборУпаковок");
	СтруктураРеквизитов.Вставить("ЦеноваяГруппа", 					"ЦеноваяГруппа");
	СтруктураРеквизитов.Вставить("ТоварнаяГруппа", 					"ТоварнаяГруппа");
	СтруктураРеквизитов.Вставить("ОсобенностьУчета", 				"ОсобенностьУчета");
	СтруктураРеквизитов.Вставить("ПродукцияМаркируемаяДляГИСМ", 	"ПродукцияМаркируемаяДляГИСМ");
	СтруктураРеквизитов.Вставить("КиЗГИСМ", 						"КиЗГИСМ");
	СтруктураРеквизитов.Вставить("ИспользоватьRFIDМеткиСерии", 		"ИспользоватьRFIDМеткиСерии");
	СтруктураРеквизитов.Вставить("ИспользоватьНомерКИЗГИСМСерии", 	"ИспользоватьНомерКИЗГИСМСерии");
	СтруктураРеквизитов.Вставить("ИспользоватьВидКИЗГИСМСерии", 	"ИспользоватьВидКИЗГИСМСерии");
	СтруктураРеквизитов.Вставить("СтранаПроисхождения", 			"СтранаПроисхождения");
	СтруктураРеквизитов.Вставить("Производитель", 					"Производитель");
	СтруктураРеквизитов.Вставить("Марка", 							"Марка");
	СтруктураРеквизитов.Вставить("ТипСрокаДействия", 				"ТипСрокаДействия");
	СтруктураРеквизитов.Вставить("ТоварнаяКатегория", 				"ТоварнаяКатегория");
	СтруктураРеквизитов.Вставить("ВидМехаГИСМ", 					"ВидМехаГИСМ");
	СтруктураРеквизитов.Вставить("КодТНВЭД", 						"КодТНВЭД");
	
	СтавкаНДС = ЗначениеНастроекПовтИсп.СтавкаНДСНовыхНоменклатурныхПозицийПоУмолчанию(Пользователи.ТекущийПользователь());
	Если ЗначениеЗаполнено(СтавкаНДС) Тогда
		Форма.Объект.СтавкаНДС = СтавкаНДС;
	Иначе
		СтруктураРеквизитов.Вставить("СтавкаНДС", "СтавкаНДС");
	КонецЕсли;
	
	ОбновитьПризнакиНоменклатурыВыборочно(Форма.Объект, СтруктураРеквизитов, Ответ = СокрЛП("Да"))
	
КонецПроцедуры

// Устанавливает реквизиты из Вида номенклатуры согласно переданной структуре реквизитов
//
// Параметры:
//  НоменклатураОбъект	 - НоменклатураОбъект - объект, в котором необходимо заполнить реквизиты.
//  СтруктураРеквизитов	 - Структура - Ключ - наименование реквизита в Виде номенклатуры,
//                                     Значение - наименование соответствующего реквизита в Номенклатуре.
//  ОбновлятьВсе		 - Булево - если Истина, тогда примениться ЗаполнитьЗначениеСвойств, в противном
//                                  случае будет обработка обязательных признаков и зависимых от них.
//
Процедура ОбновитьПризнакиНоменклатурыВыборочно(НоменклатураОбъект, СтруктураРеквизитов, ОбновлятьВсе = Истина) Экспорт
	
	// Дополнение зависимых и обязательных реквизитов
	СтруктураРеквизитов.Вставить("ВидАлкогольнойПродукцииЕГАИС", "ВидАлкогольнойПродукцииЕГАИС");
	СтруктураРеквизитов.Вставить("ИмпортнаяАлкогольнаяПродукция", "ИмпортнаяАлкогольнаяПродукция");
	СтруктураРеквизитов.Вставить("ТипНоменклатуры", "ТипНоменклатуры");
	СтруктураРеквизитов.Вставить("АгентскиеУслуги", "АгентскиеУслуги");
	
	СтруктураВидаНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
									НоменклатураОбъект.ВидНоменклатуры,
									СтруктураРеквизитов);
	
	Если ОбновлятьВсе Тогда
		ЗаполнитьЗначенияСвойств(НоменклатураОбъект, СтруктураВидаНоменклатуры);
	КонецЕсли;
	
	// Изменение зависимых реквизитов
	
	// Зависимые от ТипНоменклатуры
	НоменклатураОбъект.ТипНоменклатуры = СтруктураВидаНоменклатуры.ТипНоменклатуры;
	
	Если НоменклатураОбъект.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар Тогда
		НоменклатураОбъект.НаборУпаковок = Справочники.НаборыУпаковок.ПустаяСсылка();
	КонецЕсли;
	
	Если НоменклатураОбъект.Весовой
		И (НоменклатураОбъект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
		ИЛИ НоменклатураОбъект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат) Тогда
		НоменклатураОбъект.Весовой = Ложь;
	КонецЕсли;
	
	Если НоменклатураОбъект.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.ПодарочныйСертификат
		И НоменклатураОбъект.ИспользоватьСерийныеНомера Тогда
		НоменклатураОбъект.ИспользоватьСерийныеНомера = Ложь;
	КонецЕсли;
	
	Если НоменклатураОбъект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
		НоменклатураОбъект.СтранаПроисхождения = Справочники.СтраныМира.ПустаяСсылка();
	КонецЕсли;
	
	Если НоменклатураОбъект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
		Если НЕ СтруктураВидаНоменклатуры.АгентскиеУслуги Тогда
			НоменклатураОбъект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	Иначе
		НоменклатураОбъект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоменклатураОбъект.ТоварнаяКатегория) Тогда
		ВладелецКатегории = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатураОбъект.ТоварнаяКатегория, "Владелец");
		Если ВладелецКатегории <> НоменклатураОбъект.ВидНоменклатуры Тогда
			НоменклатураОбъект.ТоварнаяКатегория = Справочники.ТоварныеКатегории.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	// Зависимые от ОсобенностьУчета
	Если СтруктураРеквизитов.Свойство("ОсобенностьУчета") Тогда
		
		НоменклатураОбъект.ОсобенностьУчета             = СтруктураВидаНоменклатуры.ОсобенностьУчета;
		//Отключенный функционал
		НоменклатураОбъект.АлкогольнаяПродукция         = Ложь; //(СтруктураВидаНоменклатуры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция
		//													Или СтруктураВидаНоменклатуры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Пиво);
		НоменклатураОбъект.ПродукцияМаркируемаяДляГИСМ  = Ложь; //(СтруктураВидаНоменклатуры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха);
		НоменклатураОбъект.КиЗГИСМ                      = Ложь; //(СтруктураВидаНоменклатуры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КиЗГИСМ);
		НоменклатураОбъект.ПодконтрольнаяПродукцияВЕТИС = Ложь; //(СтруктураВидаНоменклатуры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС
															//Или СтруктураВидаНоменклатуры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС
															//Или СтруктураВидаНоменклатуры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС
															//Или СтруктураВидаНоменклатуры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхПодконтрольныеВЕТИС
															//Или СтруктураВидаНоменклатуры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МясоПодконтрольноеВЕТИС
															//Или СтруктураВидаНоменклатуры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияПодконтрольнаяВЕТИС);
		//Конец Отключенный функционал
	КонецЕсли;
	
	// Алкогольная продукция
	Если НоменклатураОбъект.АлкогольнаяПродукция Тогда
		Если НЕ ЗначениеЗаполнено(НоменклатураОбъект.ВидАлкогольнойПродукцииЕГАИС) Тогда
			НоменклатураОбъект.ВидАлкогольнойПродукцииЕГАИС = СтруктураВидаНоменклатуры.ВидАлкогольнойПродукцииЕГАИС;
		КонецЕсли;
		
		Если НоменклатураОбъект.СтранаПроисхождения = Справочники.СтраныМира.Россия Тогда
			НоменклатураОбъект.ИмпортнаяАлкогольнаяПродукция = Ложь;
		Иначе
			НоменклатураОбъект.ИмпортнаяАлкогольнаяПродукция = СтруктураВидаНоменклатуры.ИмпортнаяАлкогольнаяПродукция;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НоменклатураОбъект.ПроизводительИмпортерАлкогольнойПродукции) Тогда
			НоменклатураОбъект.ПроизводительИмпортерАлкогольнойПродукции = НоменклатураОбъект.Производитель;
		КонецЕсли;
	Иначе
		НоменклатураОбъект.ВидАлкогольнойПродукцииЕГАИС = Справочники.ВидыАлкогольнойПродукции.ПустаяСсылка();
		НоменклатураОбъект.ИмпортнаяАлкогольнаяПродукция = Ложь;
		НоменклатураОбъект.ОбъемДАЛ = 0;
		НоменклатураОбъект.Крепость = 0;
		НоменклатураОбъект.ПроизводительИмпортерАлкогольнойПродукции = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

// Выполняет изменение типа номенклатуры по виду
Процедура ИзменитьТипНоменклатурыПоВиду(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.ВидНоменклатуры = &ВидНоменклатуры";
	Запрос.УстановитьПараметр("ВидНоменклатуры", ПараметрыПроцедуры.ВидНоменклатуры);
	
	ВидНоменклатуры = ПараметрыПроцедуры.ВидНоменклатуры.ПолучитьОбъект();
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаИзРезультатовЗапроса = РезультатЗапроса.Выбрать();
	
	Попытка 
		
		Пока ВыборкаИзРезультатовЗапроса.Следующий() Цикл
			
			НоменклатураОбъект = ВыборкаИзРезультатовЗапроса.Ссылка.ПолучитьОбъект();
			
			СтруктураРеквизитов = Новый Структура;
			СтруктураРеквизитов.Вставить("ТипНоменклатуры", 				"ТипНоменклатуры");
			СтруктураРеквизитов.Вставить("АлкогольнаяПродукция", 			"АлкогольнаяПродукция");
			СтруктураРеквизитов.Вставить("ОсобенностьУчета", 				"ОсобенностьУчета");
			СтруктураРеквизитов.Вставить("ПродукцияМаркируемаяДляГИСМ", 	"ПродукцияМаркируемаяДляГИСМ");
			СтруктураРеквизитов.Вставить("ТипНоменклатуры", "ТипНоменклатуры");
			
			СтруктураВидаНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоменклатураОбъект.ВидНоменклатуры, СтруктураРеквизитов);
			
			НоменклатураОбъект.ТипНоменклатуры              = СтруктураВидаНоменклатуры.ТипНоменклатуры;
			НоменклатураОбъект.ОсобенностьУчета             = СтруктураВидаНоменклатуры.ОсобенностьУчета;
			//Отключенный функционал
			НоменклатураОбъект.АлкогольнаяПродукция         = Ложь; //(СтруктураВидаНоменклатуры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция
																//Или СтруктураВидаНоменклатуры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Пиво);
			НоменклатураОбъект.ПродукцияМаркируемаяДляГИСМ  = Ложь; //(СтруктураВидаНоменклатуры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха);
			НоменклатураОбъект.КиЗГИСМ                      = Ложь; //(СтруктураВидаНоменклатуры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КиЗГИСМ);
			НоменклатураОбъект.ПодконтрольнаяПродукцияВЕТИС = Ложь; //(СтруктураВидаНоменклатуры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС
																//Или СтруктураВидаНоменклатуры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС
																//Или СтруктураВидаНоменклатуры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС
																//Или СтруктураВидаНоменклатуры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхПодконтрольныеВЕТИС
																//Или СтруктураВидаНоменклатуры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МясоПодконтрольноеВЕТИС
																//Или СтруктураВидаНоменклатуры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияПодконтрольнаяВЕТИС);
			//Конец Отключенный функционал
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НоменклатураОбъект, Истина);
			
		КонецЦикла;
		
		РезультатОперации = Истина;
		
	Исключение
		
		РезультатОперации = Ложь;
		
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(РезультатОперации, АдресРезультата);
	
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	КомандаОтчет = Отчеты.ПрайсЛист.ДобавитьКомандуОтчета(КомандыОтчетов);
	КомандаОтчет = Отчеты.ДанныеАссортиментаНоменклатуры.ДобавитьКомандуОтчета(КомандыОтчетов);
	КомандаОтчет = Отчеты.АнализДвиженийНоменклатуры.ДобавитьКомандуОтчета(КомандыОтчетов);
	КомандаОтчет = Отчеты.ВедомостьДвиженияСерий.ДобавитьКомандуОтчета(КомандыОтчетов);
	КомандаОтчет = Отчеты.ВедомостьПоТоварамНаСкладахСвободныеОстатки.ДобавитьКомандуОтчета(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейсСлужебный

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

// Регистрирует данные для обработчика обновления
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

#КонецОбласти

#КонецЕсли
