#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат; 
	КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда
		УстановитьПривилегированныйРежим(Истина);
		
		ПараметрыОтбора = РегламентныеЗаданияРТ.ПараметрыПоискаЗаданий(
		РегламентноеЗадание,
		Метаданные.РегламентныеЗадания.АвтоматическоеНачислениеИСписаниеБонусныхБаллов);
		ЗаданияОбмена   = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора);
		
		Если ЗаданияОбмена.Количество() = 0 Тогда
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("Метаданные"   , Метаданные.РегламентныеЗадания.АвтоматическоеНачислениеИСписаниеБонусныхБаллов);
			ПараметрыЗадания.Вставить("ОбластьДанных", РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
			ПараметрыЗадания.Вставить("Использование", Ложь);
			ПараметрыЗадания.Вставить("ИмяМетода", "БонусныеБаллыСервер.ВыполнитьАвтоматическоеНачислениеИСписаниеРегламентноеЗадание");
			ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 3);
			
			Задание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
			
			РегламентноеЗадание = РегламентныеЗаданияРТ.ИдентификаторЗадания(Задание);
		ИначеЕсли ЗаданияОбмена.Количество() = 1 Тогда
			Задание = ЗаданияОбмена[0];
		Иначе
			Задание = Неопределено;
		КонецЕсли;
		
		ДополнительныеСвойства.Вставить("Задание", Задание);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда
		Если ВидПравила = Перечисления.ВидыПравилНачисленияБонусныхБаллов.Списание Тогда
			ПериодДействия = Перечисления.Периодичность.ПустаяСсылка();
			КоличествоПериодовДействия = 0;
			ПериодОтсрочкиНачалаДействия = Перечисления.Периодичность.ПустаяСсылка();
			КоличествоПериодовОтсрочкиНачалаДействия = 0;
		Иначе
			Если КоличествоПериодовДействия = 0 Тогда
				ПериодДействия = Перечисления.Периодичность.ПустаяСсылка();
			КонецЕсли;
			Если КоличествоПериодовОтсрочкиНачалаДействия = 0 Тогда
				ПериодОтсрочкиНачалаДействия = Перечисления.Периодичность.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;

	Если НЕ ЭтоГруппа Тогда
		УстановитьПривилегированныйРежим(Истина);
		Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(РегламентноеЗадание);
		Если Задание <> Неопределено Тогда
			Задание.Удалить();
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если ДополнительныеСвойства.Свойство("Задание") Тогда
			Задание = ДополнительныеСвойства.Задание;
			Если Задание = Неопределено Тогда
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
		
		ПараметрыЗадания = Новый Структура;
		
		// Расписание устанавливается в форме элемента.
		Если ДополнительныеСвойства.Свойство("Расписание") 
			И ТипЗнч(ДополнительныеСвойства.Расписание) = Тип("РасписаниеРегламентногоЗадания")
			И Строка(ДополнительныеСвойства.Расписание) <> Строка(Задание.Расписание) Тогда
			ПараметрыЗадания.Вставить("Расписание", ДополнительныеСвойства.Расписание);
		КонецЕсли;
		
		Использование = Задание.Использование;
		// Использование устанавливается в форме элемента.
		Если ПометкаУдаления И Задание.Использование Тогда
			Использование = Ложь;
		ИначеЕсли ДополнительныеСвойства.Свойство("Использование") 
			И ДополнительныеСвойства.Использование <> Задание.Использование Тогда
			Использование = ДополнительныеСвойства.Использование;
		КонецЕсли;
		
		ПараметрыЗадания.Вставить("Использование", Использование);
		
		НаименованиеЗадания = НСтр("ru = 'Расчет бонусов по правилу: %1'");
		НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НаименованиеЗадания, Наименование);
		Если ТипЗнч(Задание) <> Тип("РегламентноеЗадание") И Задание.Идентификатор.Наименование <> НаименованиеЗадания Тогда
			ПараметрыЗадания.Вставить("Наименование", НаименованиеЗадания);
		ИначеЕсли Задание.Наименование <> НаименованиеЗадания Тогда
			ПараметрыЗадания.Вставить("Наименование", НаименованиеЗадания);
		КонецЕсли;
		
		Если Задание.Параметры.Количество() <> 1 ИЛИ Задание.Параметры[0] <> Ссылка Тогда
			Параметры = Новый Массив;
			Параметры.Добавить(Ссылка);
			ПараметрыЗадания.Вставить("Параметры", Параметры);
		КонецЕсли;
		
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			РегламентныеЗаданияСервер.ИзменитьЗадание(Задание.Идентификатор, ПараметрыЗадания);
		Иначе
			РегламентныеЗаданияСервер.ИзменитьЗадание(Задание.УникальныйИдентификатор, ПараметрыЗадания);
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	Если ВидПравила = Перечисления.ВидыПравилНачисленияБонусныхБаллов.Списание Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПериодДействия");
		МассивНепроверяемыхРеквизитов.Добавить("КоличествоПериодовДействия");
		МассивНепроверяемыхРеквизитов.Добавить("КоличествоПериодовОтсрочкиНачалаДействия");
		МассивНепроверяемыхРеквизитов.Добавить("ПериодОтсрочкиНачалаДействия");
	Иначе
		Если КоличествоПериодовДействия = 0 Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ПериодДействия");
		КонецЕсли;
		Если КоличествоПериодовОтсрочкиНачалаДействия = 0 Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ПериодОтсрочкиНачалаДействия");
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	РегламентноеЗадание = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
КонецПроцедуры

#КонецОбласти

#КонецЕсли

