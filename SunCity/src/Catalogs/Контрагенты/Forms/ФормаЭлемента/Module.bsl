// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ОтключитьЗаполнениеПоИНН;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;

#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИННЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект, ДопПараметры);
		АдресныйКлассификаторКлиент.АвторизоватьНаСайтеПоддержкиПользователей(ОписаниеОповещения, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДопПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура")
		И ЗначениеЗаполнено(Результат.Логин)
		И ЗначениеЗаполнено(Результат.Пароль) Тогда
		
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФизЛицоНаОснованииЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Контрагент = Объект;
		Объект.ФизЛицо = СоздатьФизЛицоНаОснованииНаСервере(Контрагент);
		Записать();
		
		УстановитьКонтактнуюИнформацию();
		ПараметрыФормы = Новый Структура("Ключ", Объект.ФизЛицо);
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		Элементы.ФормаСоздатьФизЛицоНаОсновании.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("СтруктураЗаполнения") Тогда
		ЗаполнитьЗначенияСвойств(Объект, Параметры.СтруктураЗаполнения);
	КонецЕсли;
	
	// Если в данные заполнения не были отправлены признаки Покупатель и Поставщик
	Если Объект.Ссылка.Пустая() И НЕ Объект.Покупатель И НЕ Объект.Поставщик Тогда
		Объект.Покупатель = Истина;
		Объект.Поставщик  = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	УстановитьКонтактнуюИнформацию(Истина);
	
	УпрощенныйВводДоступен = ОбщегоНазначенияРТ.УпрощенныйВводДоступен();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереКонтрагент(ЭтотОбъект, Параметры);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	Если ПолучитьФункциональнуюОпцию("ОтключенныйФункционал") Тогда
	ИспользованиеСПАРКРазрешено = СПАРКРиски.ИспользованиеРазрешено();
	
	Если ИспользованиеСПАРКРазрешено И ПоказатьИнформациюСпарк(ЭтотОбъект) Тогда
		ПараметрыПроцедуры 		 = Новый Структура("ВариантОтображения", "Многострочный");
		ВидКонтрагентаСПАРКРиски = СПАРКРискиКлиентСерверРТ.ВидКонтрагентаСПАРКРиски(Объект.ЮрФизЛицо);
		Если Параметры.Ключ.Пустая() Тогда
			// Если это копирование, то использовать ИНН, а не ссылку для получения индексов.
			СПАРКРиски.ПриСозданииНаСервере(
				ЭтотОбъект,
				Объект,
				Объект.ИНН,
				ВидКонтрагентаСПАРКРиски,
				ПараметрыПроцедуры);
		Иначе
			СПАРКРиски.ПриСозданииНаСервере(
				ЭтотОбъект,
				Объект,
				Объект.Ссылка,
				ВидКонтрагентаСПАРКРиски,
				ПараметрыПроцедуры);
		КонецЕсли;
		ИспользованиеСПАРКРазрешено = Истина;
	Иначе
		Элементы.ГруппаИндексыСПАРКРиски.Видимость = Ложь;
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	// Команды1СПАРКРиски
	Если ИспользованиеСПАРКРазрешено Тогда
		СПАРКРиски.ДобавитьПодключаемыеКомандыКонтрагента(ЭтотОбъект, Объект, Элементы.Подменю1СПАРКРиски);
	КонецЕсли;
	КонецЕсли;
	// Конец Команды1СПАРКРиски
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСправочника();
	ПараметрыПриСозданииНаСервере.Форма = ЭтотОбъект;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.КомандыЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСправочника(ПараметрыПриСозданииНаСервере);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
	
	ПодготовитьФормуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеЭлементамиФормы();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ОтключитьОтметкуНезаполненного();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииКонтрагент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски - Отключенный функционал
	Если Ложь И ИспользованиеСПАРКРазрешено И ПоказатьИнформациюСпарк(ЭтотОбъект) Тогда
		СПАРКРискиКлиент.ПриОткрытии(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПриОткрытии = ОбменСКонтрагентамиКлиент.ПараметрыПриОткрытии();
	ПараметрыПриОткрытии.Форма = ЭтотОбъект;
	ПараметрыПриОткрытии.МестоРазмещенияКоманд = Элементы.КомандыЭДО;
	ПараметрыПриОткрытии.ЕстьОбработчикОбновитьКомандыЭДО = Истина;
	
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ПараметрыПриОткрытии);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	Если ИспользованиеСПАРКРазрешено Тогда
		СПАРКРискиКлиент.ОбработкаОповещения(ЭтотОбъект, Объект, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	Если ИмяСобытия = "ЗагруженАдресныйКлассификатор" Тогда
		
		Элементы.ДекорацияАдресныйКлассификаторНеЗагружен.Видимость = АдресныйКлассификаторПуст();
		
	ИначеЕсли (ИмяСобытия = "ОбновленоФизЛицо" И Источник = Объект.ФизЛицо) Тогда
		
		УстановитьКонтактнуюИнформацию();
		
	ИначеЕсли ИмяСобытия = "СкрытыПерсональныеДанные" Тогда
		
		ОповеститьОбИзменении(Объект.ФизЛицо);
		УстановитьКонтактнуюИнформацию();
		
	Иначе
		
		// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		ПараметрыОповещенияЭДО = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСправочника();
		ПараметрыОповещенияЭДО.Форма = ЭтотОбъект;
		ПараметрыОповещенияЭДО.МестоРазмещенияКоманд = Элементы.КомандыЭДО;
		ПараметрыОповещенияЭДО.ЕстьОбработчикОбновитьКомандыЭДО = Истина;
		
		ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСправочника(ИмяСобытия,
			Параметр,
			Источник,
			ПараметрыОповещенияЭДО);
		// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ЭтоФизЛицо = Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо");
	ЭтоНеРезидент = Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент");
	ЭтоЮридическоеЛицо = Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
	ЭтоПредприниматель =
		Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель");
	
	Если Ложь И ЗначениеЗаполнено(Объект.КПП) И НЕ ЭтоЮридическоеЛицо ИЛИ НЕ ЗначениеЗаполнено(Объект.ИНН) Тогда
		Объект.КПП = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КодПоОКПО) И (ЭтоНеРезидент ИЛИ ЭтоФизЛицо) Тогда
		Объект.КодПоОКПО = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументУдостоверяющийЛичность) И (ЭтоЮридическоеЛицо ИЛИ ЭтоНеРезидент) Тогда
		Объект.ДокументУдостоверяющийЛичность = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.РегистрационныйНомер) И ЭтоФизЛицо Тогда
		Объект.РегистрационныйНомер = "";
	КонецЕсли;
	
	// Если контрагент не является резидентом РФ, то страна регистрации должна быть Россией.
	Если Не ЭтоНеРезидент Тогда
		Объект.СтранаРегистрации = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
	КонецЕсли;
	
	Если Объект.УчастникЭДО И (ЭтоНеРезидент ИЛИ ЭтоФизЛицо) Тогда
		Объект.УчастникЭДО = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Объект.ИНН) Тогда
		
		Контрагент = ОбщегоНазначенияРТ.ИННКППУжеИспользуетсяВИнформационнойБазе(
			Объект.ИНН,
			Объект.КПП,
			Объект.Ссылка);
		
		Если Контрагент <> Неопределено Тогда
			СообщениеПользователю = НСтр("ru='Данные ИИН/БИН уже указаны для контрагента с кодом %1'");
			ОбщегоНазначения.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеПользователю, Контрагент.Код),
				,
				"Объект.ИНН",
				,
				Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереКонтрагент(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	Если ИспользованиеСПАРКРазрешено Тогда
		
		СПАРКРиски.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
		
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	Если Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент
		И Объект.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
		Объект.СтранаРегистрации = Справочники.СтраныМира.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъекта(Объект.Ссылка);
	
	ОповещениеОСозданииКонтрагента = ОповещениеОСозданииКонтрагента();
	Если Не ОповещениеОСозданииКонтрагента = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОСозданииКонтрагента, Объект.Ссылка);
		ОписаниеОповещенияОЗакрытии = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
КонецПроцедуры

&НаКлиенте
Процедура ГрафикОплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Истина, "Справочник.ГрафикиОплаты.Форма.ФормаВыбора.Открытие");
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)
	
	УстановитьКонтактнуюИнформацию();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЮрФизЛицоПриИзменении(Элемент)
	
	УстановитьКонтактнуюИнформацию();
	УправлениеЭлементамиФормы();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	РеквизитыПроверкиКонтрагентов.ЭтоИностранныйКонтрагент =
		Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент");
	РеквизитыПроверкиКонтрагентов.ЭтоЮридическоеЛицо =
		Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо")
			ИЛИ Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент")
				ИЛИ Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ПустаяСсылка");
		
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски - Отключенный функционал
	Если Ложь И ИспользованиеСПАРКРазрешено Тогда
		ЭтотОбъект.ИндексыСПАРКРиски = Неопределено;
		ОбновитьОтображениеИндексыСПАРК();
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	
	УправлениеЭлементамиФормы();
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	Если Объект.ЮрФизЛицо =  ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо")
		ИЛИ Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент") Тогда
		
		УправлениеЭлементамиФормы();
		
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		Если ЗначениеЗаполнено(Объект.ИНН)
			И НЕ (ЗначениеЗаполнено(Объект.Наименование) 
			ИЛИ ЗначениеЗаполнено(Объект.НаименованиеПолное) 
			ИЛИ ЗначениеЗаполнено(Объект.КПП)) Тогда
			ВыполнитьЗаполнениеРеквизитовПоИНН();
		КонецЕсли;
		ОтключитьЗаполнениеПоИНН = Истина;
		ПодключитьОбработчикОжидания("Подключаемый_ВключитьЗаполнениеПоИНН", 0.1, Истина);
		
		// ИнтернетПоддержкаПользователей.СПАРКРиски
		Если ИспользованиеСПАРКРазрешено Тогда
			ЭтотОбъект.ИндексыСПАРКРиски = Неопределено;
			ОбновитьОтображениеИндексыСПАРК();
		КонецЕсли;
		// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
		
	КонецЕсли;
	
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СПАРКРискиКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект,
		Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАдресныйКлассификаторНеЗагруженОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ЗагрузитьАдресныйКлассификатор" Тогда
		СтандартнаяОбработка = Ложь;
		АдресныйКлассификаторКлиент.ЗагрузитьАдресныйКлассификатор();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКПООкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ТекстСообщения = "";
	ОчиститьСообщения();
	
	ЭтоЮрЛицо = Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо")
		ИЛИ Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент");
	
	Если НЕ ПустаяСтрока(Текст)
		И НЕ РегламентированныеДанныеКлиентСервер.КодПоОКПОСоответствуетТребованиям(Текст, ЭтоЮрЛицо, ТекстСообщения) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения,
			,"Объект.КодПоОКПО",,);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент,
		Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект,
		ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ЗаполнитьПоИНН(Команда)
	
	Если ОтключитьЗаполнениеПоИНН <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ИНН) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""ИНН"" не заполнено'"));
		ТекущийЭлемент = Элементы.ИНН;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Наименование) 
		ИЛИ ЗначениеЗаполнено(Объект.НаименованиеПолное) 
		ИЛИ ЗначениеЗаполнено(Объект.КПП) Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоИННЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагента(Команда)
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентаПоКнопке(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФизЛицоНаОсновании(Команда)
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("СоздатьФизЛицоНаОснованииЗавершение", ЭтотОбъект, Параметры);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Будет создано физ. лицо. Продолжить?'"), Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураКонтрагентовБЭД(Команда)
	
	ЗначениеОтбора = Новый Структура("Владелец", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", ЗначениеОтбора);
	ОткрытьФорму("РегистрСведений.НоменклатураКонтрагентовБЭД.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Элементы.ФормаРегистрСведенийНоменклатураКонтрагентовБЭДОткрытьПоЗначениюВладелец.Видимость = 
		ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.НоменклатураКонтрагентовБЭД);
	Элементы.ДекорацияАдресныйКлассификаторНеЗагружен.Видимость = АдресныйКлассификаторПуст();
	
	Текст = СтрШаблон(
		НСтр("ru = 'Для автоподбора и выбора адресных сведений необходимо <a href = %1 >загрузить классификатор</a>.'"),
		"ЗагрузитьАдресныйКлассификатор");
		ФорматированнаяСтрока = СтроковыеФункции.ФорматированнаяСтрока(Текст);
		Элементы.ДекорацияАдресныйКлассификаторНеЗагружен.Заголовок = ФорматированнаяСтрока;
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЭлементамиФормы()
	
	ЭтоФизЛицо = Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо");
	ЭтоНеРезидент = Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент");
	ЭтоЮридическоеЛицо = Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
	ЭтоПредприниматель =
		Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель");
		
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ВедетсяЭДО", "Видимость", ЭтоЮридическоеЛицо ИЛИ ЭтоПредприниматель);
		
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ГруппаИНН", "Видимость", ЭтоПредприниматель ИЛИ ЭтоЮридическоеЛицо ИЛИ ЭтоНеРезидент);
		
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ИНН", "АвтоОтметкаНезаполненного",
			НЕ УпрощенныйВводДоступен И (ЭтоПредприниматель ИЛИ ЭтоЮридическоеЛицо));
		
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ЗаполнитьПоИНН", "Видимость", ЭтоПредприниматель ИЛИ ЭтоЮридическоеЛицо);
		
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "РезультатПроверкиКонтрагента", "Видимость", ЭтоПредприниматель ИЛИ ЭтоЮридическоеЛицо);
		
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "КПП", "Видимость", ЭтоЮридическоеЛицо И НЕ ЭтоНеРезидент);
		
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "КПП", "Доступность", ЗначениеЗаполнено(Объект.ИНН));
		
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "КПП", "АвтоОтметкаНезаполненного", НЕ УпрощенныйВводДоступен И (ЭтоЮридическоеЛицо ИЛИ ЭтоНеРезидент));
		
	Если Ложь Тогда	//Отключенный функционал
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "КодПоОКПО", "Видимость", ЭтоПредприниматель ИЛИ ЭтоЮридическоеЛицо);
	КонецЕсли;
	Элементы.КодПоОКПО.Доступность = НЕ Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо");
		
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "РегистрационныйНомер", "Видимость", НЕ ЭтоФизЛицо);
		
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ДокументУдостоверяющийЛичность", "Видимость", ЭтоПредприниматель);
		
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "СтранаРегистрации", "Видимость", ЭтоНеРезидент);
		
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ГрафикОплаты", "Видимость", Объект.Поставщик);
		
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ФизЛицо", "Видимость", ЭтоФизЛицо);
		
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ФизЛицо", "АвтоОтметкаНезаполненного", ЭтоФизЛицо);
		
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ГруппаИННФизЛицо", "Видимость", ЭтоФизЛицо);
		
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ФормаСоздатьФизЛицоНаОсновании", "Видимость", ЭтоФизЛицо И Не ЗначениеЗаполнено(Объект.ФизЛицо) И Не Параметры.Ключ.Пустая());
	
	МаскаИНН = "999999999999";
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ИНН", "Маска", МаскаИНН);
	
	МаскаОКПО = "";
	Если ЭтоЮридическоеЛицо Тогда
		МаскаОКПО = "99999999"; //8
	ИначеЕсли ЭтоПредприниматель Тогда
		МаскаОКПО = "9999999999"; //10
	КонецЕсли;
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "КодПоОКПО", "Маска", МаскаОКПО);
	
	// Регистрационный номер
	МаскаРегНомер = "";
	ЗаголовокРегНомера = НСтр("ru = 'Рег. номер'");
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "РегистрационныйНомер", "Маска", МаскаРегНомер);
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "РегистрационныйНомер", "Заголовок", ЗаголовокРегНомера);
	
	ОтключитьОтметкуНезаполненного();
КонецПроцедуры

&НаКлиенте
Функция ОповещениеОСозданииКонтрагента()

	Результат = Неопределено;
	
	Если ОписаниеОповещенияОЗакрытии = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	Если ТипЗнч(ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры) <> Тип("Структура")  Тогда
		Возврат Результат;
	КонецЕсли;

	Результат = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры, "ОписаниеОповещенияОСозданииКонтрагента", Неопределено);
	
	Возврат Результат;

КонецФункции

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	МодульУправлениеКонтактнойИнформациейКлиент =
			ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбъектКонтактнойИнформации = ЭтотОбъект;
	ЭлементКонтактнойИнформации = Элемент;
	
	МодульУправлениеКонтактнойИнформациейКлиент =
			ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	
	Если ЭтоФизЛицо Тогда
		Если ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
			ИмяРеквизита = Элемент.Имя;
			Параметр = Новый Структура("Ключ", Объект.ФизЛицо);
			ФормаФизЛица = ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта",Параметр, ЭтотОбъект);
			ФормаФизЛица.Элементы.ГруппаКонтактнаяИнформацияДополнительныеРеквизиты.ТекущаяСтраница = ФормаФизЛица.Элементы.СтраницаКонтактнаяИнформация;
			ПараметрыОтбора = Новый Структура("ИмяРеквизита", ИмяРеквизита);
			ОписаниеРеквизита = ФормаФизЛица.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(ПараметрыОтбора)[0];
			Если ОписаниеРеквизита.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты")
				Или ОписаниеРеквизита.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Другое") Тогда
				ФормаФизЛица.ТекущийЭлемент = ФормаФизЛица.Элементы[ИмяРеквизита];
				Возврат;
			Иначе
				ОбъектКонтактнойИнформации = ФормаФизЛица;
				ЭлементКонтактнойИнформации = ФормаФизЛица.Элементы[ИмяРеквизита];
			КонецЕсли;
		Иначе
			ПоказатьПредупреждение(,"Для редактирования контактной информации необходимо выбрать физ. лицо");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ОбъектКонтактнойИнформации, ЭлементКонтактнойИнформации, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	
	ОбъектКонтактнойИнформации = ЭтотОбъект;
	
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		
	Если ЭтоФизЛицо Тогда
		Если ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
			Параметр = Новый Структура("Ключ", Объект.ФизЛицо);
			ФормаФизЛица = ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта",Параметр, ЭтотОбъект);
			ФормаФизЛица.Элементы.ГруппаКонтактнаяИнформацияДополнительныеРеквизиты.ТекущаяСтраница = ФормаФизЛица.Элементы.СтраницаКонтактнаяИнформация;
			ОбъектКонтактнойИнформации = ФормаФизЛица;
		Иначе
			ПоказатьПредупреждение(,"Для редактирования контактной информации необходимо выбрать физ. лицо");
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ОбъектКонтактнойИнформации, Элемент,, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
	ОбъектКонтактнойИнформации = ЭтотОбъект;
	
	МодульУправлениеКонтактнойИнформациейКлиент =
			ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
			
	Если ЭтоФизЛицо И (Найти(Команда.Имя, "КонтекстноеМеню") > 0
			Или Найти(Команда.Имя, "Добавить") > 0
			Или Найти(Команда.Имя, "МенюПодменю") > 0) Тогда
		Если ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
			Параметр = Новый Структура("Ключ", Объект.ФизЛицо);
			ФормаФизЛица = ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта",Параметр, ЭтотОбъект);
			ФормаФизЛица.Элементы.ГруппаКонтактнаяИнформацияДополнительныеРеквизиты.ТекущаяСтраница = ФормаФизЛица.Элементы.СтраницаКонтактнаяИнформация;
			ОбъектКонтактнойИнформации = ФормаФизЛица;
		Иначе
			ПоказатьПредупреждение(,"Для редактирования контактной информации необходимо выбрать физ. лицо");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	МодульУправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ОбъектКонтактнойИнформации, Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт
	
	ОбъектКонтактнойИнформации = Объект;
	Если ЭтоФизЛицо Тогда
		ОбъектКонтактнойИнформации = Объект.ФизЛицо;
	КонецЕсли;
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	МодульУправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, ОбъектКонтактнойИнформации, Результат);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

&НаСервере
Процедура УстановитьКонтактнуюИнформацию(ЭтоСозданиеФормы = Ложь)
	
	#Если Клиент Тогда
		Если Не ЭтоСозданиеФормы Тогда
			ЭтоФизЛицоОбъекта = Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо");
			Если Не ЭтоФизЛицо = ЭтоФизЛицоОбъекта Тогда
				ДекорацияНеобходимоЗановоОткрытьФорму = Элементы.ДекорацияНеобходимоЗановоОткрытьФорму;
				Для Каждого Элемент Из Элементы.СтраницаКонтактнаяИнформация.ПодчиненныеЭлементы Цикл
					Если Элемент = ДекорацияНеобходимоЗановоОткрытьФорму Тогда
						Продолжить;
					КонецЕсли;
					Элемент.Доступность = Ложь;
				КонецЦикла;
				ДекорацияНеобходимоЗановоОткрытьФорму.Видимость = Истина;
			КонецЕсли;
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	ОбъектКонтактнойИнформации = Объект;
	ЭтоФизЛицо = Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо");
	Если ЭтоФизЛицо Тогда
		ОбъектКонтактнойИнформации = Объект.ФизЛицо;
	КонецЕсли;
	
	МассивЭлементовКУдалению 			= Новый Массив;
	МассивРеквизитовКУдалению 			= Новый Массив;
	МассивКомандКУдалению				= Новый Массив;
	МассивЭлементовРедактированияСтроки	= Новый Массив;

	ЗаполнитьМассивыЭлементовКУдалению(Элементы.СтраницаКонтактнаяИнформация.ПодчиненныеЭлементы, 
		МассивЭлементовКУдалению, МассивРеквизитовКУдалению, МассивКомандКУдалению);
		
	Для Каждого Элемент Из МассивЭлементовКУдалению Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	Для Каждого Команда Из МассивКомандКУдалению Цикл
		Команды.Удалить(Команда);
	КонецЦикла;
	Если ЗначениеЗаполнено(МассивРеквизитовКУдалению) Тогда
		ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Очистить();
		ИзменитьРеквизиты(,МассивРеквизитовКУдалению);
	КонецЕсли;
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтаФорма, ОбъектКонтактнойИнформации, "СтраницаКонтактнаяИнформация",ПоложениеЗаголовкаЭлементаФормы.Лево);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	Если ЭтоФизЛицо Тогда
		ЗаполнитьМассивыЭлементовКУдалению(Элементы.СтраницаКонтактнаяИнформация.ПодчиненныеЭлементы,,,,МассивЭлементовРедактированияСтроки);
		Для Каждого ЭлементРедактированияСтроки Из МассивЭлементовРедактированияСтроки Цикл
			Если ЭлементРедактированияСтроки.Вид = ВидПоляФормы.ПолеВвода Тогда
				ЭлементРедактированияСтроки.РедактированиеТекста = Ложь;
				ЭлементРедактированияСтроки.КнопкаВыбора = Истина;
				ЭлементРедактированияСтроки.УстановитьДействие("НачалоВыбора", "Подключаемый_КонтактнаяИнформацияНачалоВыбора");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМассивыЭлементовКУдалению(ПодчиненныеЭлементы, МассивЭлементовКУдалению = Неопределено, 
	МассивРеквизитовКУдалению = Неопределено, МассивКомандКУдалению = Неопределено, МассивЭлементовРедактированияСтроки = Неопределено)
	
	Если ТипЗнч(ПодчиненныеЭлементы) = Тип("ЭлементыФормы") Тогда
		Для Каждого ПодчиненныйЭлемент Из ПодчиненныеЭлементы Цикл
			Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
				Если ПодчиненныйЭлемент.Родитель = Элементы.СтраницаКонтактнаяИнформация И 
					Не МассивЭлементовКУдалению = Неопределено Тогда
					МассивЭлементовКУдалению.Добавить(ПодчиненныйЭлемент);
				КонецЕсли;
				ЗаполнитьМассивыЭлементовКУдалению(ПодчиненныйЭлемент.ПодчиненныеЭлементы, МассивЭлементовКУдалению, 
													МассивРеквизитовКУдалению, МассивКомандКУдалению,МассивЭлементовРедактированияСтроки);
			ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("ПолеФормы") Тогда
				Если Не МассивЭлементовРедактированияСтроки = Неопределено Тогда
					МассивЭлементовРедактированияСтроки.Добавить(ПодчиненныйЭлемент);
				КонецЕсли;
				Если Не МассивРеквизитовКУдалению = Неопределено Тогда
					МассивРеквизитовКУдалению.Добавить(ПодчиненныйЭлемент.ПутьКДанным);
				КонецЕсли;
				Если Не МассивКомандКУдалению = Неопределено Тогда
					ЗаполнитьМассивыЭлементовКУдалению(ПодчиненныйЭлемент.КонтекстноеМеню.ПодчиненныеЭлементы, МассивЭлементовКУдалению, МассивРеквизитовКУдалению, МассивКомандКУдалению);
				КонецЕсли;
			ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("КнопкаФормы") И Не МассивКомандКУдалению = Неопределено Тогда
				КомандаФормы = Команды[ПодчиненныйЭлемент.ИмяКоманды];
				Если МассивКомандКУдалению.Найти(КомандаФормы) = Неопределено Тогда
					МассивКомандКУдалению.Добавить(КомандаФормы);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВСправочнике(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоИНН()
	
	ОписаниеОшибки = "";
	ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки);
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		// Обработка ошибок
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
			ТекстВопроса = НСтр("ru='Для автоматического заполнения реквизитов контрагентов
				|необходимо подключиться к Интернет-поддержке пользователей.
				|Подключиться сейчас?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	ИначеЕсли Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо") Тогда
		// Проверка юридического лица по данным сервиса ИФНС после заполнения реквизитов (мог измениться КПП).
		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки = "")
	
	ЭтоЮридическоеЛицо = Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	
	Если ЭтоЮридическоеЛицо Тогда
		
		РеквизитыКонтрагента = РаботаСКонтрагентами.СведенияОЮридическомЛицеПоИНН(Объект.ИНН);
		
		Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
			ОписаниеОшибки = РеквизитыКонтрагента.ОписаниеОшибки;
			Возврат;
		КонецЕсли;
		
		Если РеквизитыКонтрагента.ЕГРЮЛ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыКонтрагента);
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыКонтрагента.ЕГРЮЛ);
		
		ЗаполнитьЭлементКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
			РеквизитыКонтрагента.ЕГРЮЛ.ЮридическийАдрес);
			
		ЗаполнитьЭлементКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
			РеквизитыКонтрагента.ЕГРЮЛ.Телефон);
			
			
	Иначе
		
		РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(Объект.ИНН);
		
		Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
			ОписаниеОшибки = РеквизитыКонтрагента.ОписаниеОшибки;
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыКонтрагента);
	
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьФизЛицоНаОснованииНаСервере(Контрагент)
	
	Возврат ОбщегоНазначенияРТ.СоздатьФизЛицоНаОснованииКонтрагента(Контрагент);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЭлементКонтактнойИнформации(ВидКонтактнойИнформации, СтруктураДанных)
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("Вид", ВидКонтактнойИнформации);
	Строки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДанныеСтроки.Представление = СтруктураДанных.Представление;
	ДанныеСтроки.Значение = СтруктураДанных.КонтактнаяИнформация;
	ЭтотОбъект[ДанныеСтроки.ИмяРеквизита] = СтруктураДанных.Представление;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВключитьЗаполнениеПоИНН()
	ОтключитьЗаполнениеПоИНН = Неопределено;
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
КонецПроцедуры

&НаСервереБезКонтекста
Функция АдресныйКлассификаторПуст()
	Возврат НЕ АдресныйКлассификатор.АдресныйКлассификаторЗагружен();
КонецФункции

// ИнтернетПоддержкаПользователей.СПАРКРиски
&НаКлиенте
Процедура Подключаемый_ОбновитьОтображениеИндексыСПАРК()
	ОбновитьОтображениеИндексыСПАРК();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеИндексыСПАРК()
	
	ПараметрыОтображения 	 = Новый Структура("ВариантОтображения", "Многострочный");
	ВидКонтрагентаСПАРКРиски = СПАРКРискиКлиентСерверРТ.ВидКонтрагентаСПАРКРиски(Объект.ЮрФизЛицо);
	
	СПАРКРискиКлиент.ОтобразитьИндексыСПАРК(
		ЭтотОбъект.ИндексыСПАРКРиски,
		Объект,
		Объект.ИНН, // Искать по ИНН
		ВидКонтрагентаСПАРКРиски,
		ЭтотОбъект,
		ПараметрыОтображения,
		Истина);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоказатьИнформациюСпарк(Форма)
	
	Объект = Форма.Объект;
	ПоказатьИнформацию = (Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо"));
	Возврат ПоказатьИнформацию;
КонецФункции
// Конец ИнтернетПоддержкаПользователей.СПАРКРиски

// Команды1СПАРКРиски
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду1СПАРКРиски(Команда)
	СПАРКРискиКлиент.ВыполнитьПодключаемуюКоманду(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец Команды1СПАРКРиски

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура НаименованиеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	
	Если Не ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда 
		Объект.НаименованиеПолное = Текст; 
	КонецЕсли;
	
	Объект.Наименование = Текст;
	
КонецПроцедуры

#КонецОбласти