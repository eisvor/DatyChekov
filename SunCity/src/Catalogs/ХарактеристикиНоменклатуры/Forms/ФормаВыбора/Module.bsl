#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОбработатьСозданиеНовогоЭлемента(Результат, ПараметрыВыполнения) Экспорт
	Если Результат = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть(Результат);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСозданияНовогоЭлемента() Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрВладелец", ВладелецСоздаваемогоЭлемента);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОбработатьСозданиеНовогоЭлемента", ЭтотОбъект);
	
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаЭлемента",
					ПараметрыФормы,УникальныйИдентификатор,,,,
					ОбработчикОповещения,
					РежимОткрытия);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Перем ЗначениеИзСтруктуры;
	
	УстановитьУсловноеОформление();
	
	КодФормы = "Справочник_ХарактеристикиНоменклатуры_ФормаВыбора";
	
	Если Параметры.Свойство("ПараметрВладелец", ЗначениеИзСтруктуры) И ЗначениеЗаполнено(ЗначениеИзСтруктуры) Тогда
		
		Если ТипЗнч(ЗначениеИзСтруктуры) = Тип("СправочникСсылка.Номенклатура") Тогда
			ВладелецХарактеристик = Неопределено;
			Если ОбработкаТабличнойЧастиТоварыВызовСервера.ИспользованиеХарактеристикИВладелецДляВыбора(ЗначениеИзСтруктуры, ВладелецХарактеристик) Тогда
				Если НЕ ВладелецХарактеристик = Неопределено Тогда
					Параметры.ПараметрВладелец = ВладелецХарактеристик;
					ПодборТоваровСервер.УстановитьОтборПоВладельцуХарактеристик(ЭтаФорма);
					Параметры.Свойство("ПараметрВладелец", ЗначениеИзСтруктуры);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЗначениеИзСтруктуры) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
			ВладелецХарактеристик = ЗначениеИзСтруктуры;
			ПодборТоваровСервер.УстановитьОтборПоВладельцуХарактеристик(ЭтаФорма);
		КонецЕсли;
		
		Параметры.Отбор.Вставить("Владелец", ЗначениеИзСтруктуры);
		ВладелецСоздаваемогоЭлемента = ЗначениеИзСтруктуры;
		
	ИначеЕсли Параметры.Свойство("Номенклатура", ЗначениеИзСтруктуры) И ЗначениеЗаполнено(ЗначениеИзСтруктуры) Тогда
		
		Если ТипЗнч(ЗначениеИзСтруктуры) = Тип("СправочникСсылка.Номенклатура") Тогда
			ВладелецХарактеристик = Неопределено;
			Если ОбработкаТабличнойЧастиТоварыВызовСервера.ИспользованиеХарактеристикИВладелецДляВыбора(ЗначениеИзСтруктуры, ВладелецХарактеристик) Тогда
				Если НЕ ВладелецХарактеристик = Неопределено Тогда
					Параметры.Отбор.Вставить("Владелец", ВладелецХарактеристик);
					ПодборТоваровСервер.УстановитьОтборПоВладельцуХарактеристик(ЭтаФорма);
					ВладелецСоздаваемогоЭлемента = ВладелецХарактеристик;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЗначениеИзСтруктуры) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
			ВладелецХарактеристик = ЗначениеИзСтруктуры;
			ПодборТоваровСервер.УстановитьОтборПоВладельцуХарактеристик(ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ТекущийЭлемент", ЗначениеИзСтруктуры) Тогда
		НачальныйЭлемент = ЗначениеИзСтруктуры;
	КонецЕсли;
	
	Если Параметры.Свойство("ОткрытьСозданиеНовойХарактеристики") Тогда
		ОткрытьСозданиеНовойХарактеристики = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВладелецХарактеристик) Тогда
		ЗаголовокШаблон		 = НСтр("ru = 'Характеристики: %1'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЭтотОбъект.Заголовок = СтрШаблон(ЗаголовокШаблон, Строка(ВладелецХарактеристик));
	Иначе
		ЭтотОбъект.Заголовок = НСтр("ru = 'Характеристики'", ОбщегоНазначения.КодОсновногоЯзыка());;
	КонецЕсли;
	
	ЭтотОбъект.АвтоЗаголовок = Ложь;
	
	Если ТипЗнч(ВладелецХарактеристик) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
		
		ВидНоменклатуры = ВладелецХарактеристик;
		
	ИначеЕсли ТипЗнч(ВладелецХарактеристик) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецХарактеристик, "ВидНоменклатуры");
		
	КонецЕсли;
	
	ПодборТоваровСервер.ЗаполнитьДеревоОтборовХарактеристик(ЭтаФорма);
	
	ЕстьДоступныеОтборы                      = ДеревоОтборов.ПолучитьЭлементы().Количество() > 0;
	Элементы.ГруппаДеревоОтборов.Видимость   = ЕстьДоступныеОтборы;
	ИспользоватьФильтры                      = ЕстьДоступныеОтборы;
	
	СобытияФормРТ.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ПодборТоваровКлиентСервер.УстановитьВидимостьШапкиТаблицаФормы(Элементы.Список);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если ЗначениеЗаполнено(НачальныйЭлемент) Тогда
		Элементы.Список.ТекущаяСтрока = НачальныйЭлемент;
	КонецЕсли;
	
	
	Если ОткрытьСозданиеНовойХарактеристики Тогда
		ПодключитьОбработчикОжидания("ОткрытьФормуСозданияНовогоЭлемента", 0.1, Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ХарактеристикиНоменклатуры" 
		И ЗначениеЗаполнено(Источник) Тогда
		
		Элементы.Список.ТекущаяСтрока = Источник;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьФильтрыПриИзменении(Элемент)
	
	ИспользоватьФильтрыПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоОтборов

&НаКлиенте
Процедура ДеревоОтборовОтборПриИзменении(Элемент)
	
	ПодборТоваровКлиент.ДеревоОтборовОтборПриИзменении(ЭтаФорма, Новый ОписаниеОповещения("ДеревоОтборовПриИзмененииЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПодборТоваровКлиент.ДеревоОтборовВыбор(ЭтаФорма, Новый ОписаниеОповещения("ДеревоОтборовПриИзмененииЗавершение", ЭтотОбъект));
	
КонецПроцедуры


&НаКлиенте
Процедура ДеревоОтборовПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ПодборТоваровКлиент.ДеревоОтборовПриИзмененииЗавершение(ЭтаФорма);
	ДеревоОтборовОтборПриИзмененииНаСервере();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормРТКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИспользоватьФильтрыПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииИспользованияФильтров(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДеревоОтборовОтборПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ДеревоОтборовОтборПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставление.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОтборов.Отбор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Истина, Ложь, Ложь, Ложь, ));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставлениеОтбора.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ФиксированноеЗначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Ложь, Ложь, Истина, Ложь, ));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьФильтры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.FormBackColor);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставлениеОтбора.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьФильтры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);

КонецПроцедуры

#КонецОбласти
