#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получает единицу измерения, если единица измерения одна в справочнике.
//
// Возвращаемое значение:
//  СправочникСсылка.ЕдиницыИзмерения - Найденная единица измерения.
//  Неопределено - если единиц измерения нет или единиц измерения больше одной.
//
Функция ПолучитьЕдиницуИзмеренияПоУмолчанию() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.БазовыеЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	НЕ ЕдиницыИзмерения.ПометкаУдаления
	|");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
	Иначе
		ЕдиницаИзмерения = Неопределено;
	КонецЕсли;
	
	Возврат ЕдиницаИзмерения;

КонецФункции // ЕдиницаИзмерения()

// Заполняет справочник базовые единицы измерения значениями по умолчанию.
//
Процедура ЗаполнитьЕдиницыИзмеренияПоУмолчанию() Экспорт
	
	Дерево = Справочники.БазовыеЕдиницыИзмерения.ПолучитьДанныеКлассификатора();
	
	МассивКодов = Новый Массив;
	МассивКодов.Добавить("006");
	МассивКодов.Добавить("113");
	МассивКодов.Добавить("166");
	МассивКодов.Добавить("796");
	
	Для Каждого Код Из МассивКодов Цикл
		
		Если Не ЗначениеЗаполнено(Справочники.БазовыеЕдиницыИзмерения.НайтиПоКоду(Код)) Тогда
			
			СтруктураПоиска = Новый Структура("КодЧисловой", Код);
			СтрокаДерева = Дерево.Строки.НайтиСтроки(СтруктураПоиска, Истина);
			
			Если СтрокаДерева.Количество() > 0 Тогда
				СвойстваЕдИзмерения = СтрокаДерева[0];
				
				
				СправочникОбъект = Справочники.БазовыеЕдиницыИзмерения.СоздатьЭлемент();
				
				Если ЗначениеЗаполнено(СвойстваЕдИзмерения.УсловноеОбозначениеНациональное) Тогда
					Наименование = СвойстваЕдИзмерения.УсловноеОбозначениеНациональное;
				ИначеЕсли ЗначениеЗаполнено(СвойстваЕдИзмерения.УсловноеОбозначениеМеждународное) Тогда
					Наименование = СвойстваЕдИзмерения.УсловноеОбозначениеМеждународное;
				ИначеЕсли ЗначениеЗаполнено(СвойстваЕдИзмерения.КодовоеБуквенноеОбозначениеНациональное) Тогда
					Наименование = СвойстваЕдИзмерения.КодовоеБуквенноеОбозначениеНациональное;
				ИначеЕсли ЗначениеЗаполнено(СвойстваЕдИзмерения.КодовоеБуквенноеОбозначениеМеждународное) Тогда
					Наименование = СвойстваЕдИзмерения.КодовоеБуквенноеОбозначениеМеждународное;
				Иначе
					Наименование = СвойстваЕдИзмерения.Наименование;
				КонецЕсли;
				
				СправочникОбъект.Наименование            = СтрЗаменить(Наименование,Символы.ПС,"/");
				СправочникОбъект.МеждународноеСокращение = СтрЗаменить(СвойстваЕдИзмерения.КодовоеБуквенноеОбозначениеМеждународное,Символы.ПС,"/");
				СправочникОбъект.НаименованиеПолное      = СтрЗаменить(СвойстваЕдИзмерения.Наименование,Символы.ПС,"/");
				СправочникОбъект.Код                     = СвойстваЕдИзмерения.КодЧисловой;
				
				Попытка
					СправочникОбъект.Записать();
				Исключение
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение операции'"),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Возвращает сведения о коэффициенте пересчета единицы измерения ВетИС.
//
// Параметры:
//	ЕдиницаИзмеренияВЕТИС	- СправочникСсылка.ЕдиницыИзмеренияВЕТИС	- Единица измерения ВетИС, коэффициент которой нужно 
//																		получить.
//	Номенклатура			- СправочникСсылка.Номенклатура				- Номенклатура для единицы хранения, которой осуществляется 
//																		получение коэффициента пересчета.
//
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//		* КодОшибки					- Число				- Код ошибки получения коэффициента.
//															0 - Нет ошибок;
//															1 - Не заполнена единица измерения в справочнике 'ЕдиницыИзмеренияВЕТИС';
//															2 - В справочнике 'Номенклатура' выключена возможность пересчета количества 
//																в соответствующую мерную единицу измерения;
//															3 - Не удалось сопоставить единицу хранения справочника 'Номенклатура' 
//																с единицей измерения справочника 'ЕдиницыИзмеренияВЕТИС'.
//		* Коэффициент				- Число				- Коэффициент пересчета единицы измерения ВетИС.
//		* КэшироватьДанные			- Булево, Истина	- Признак необходимости кэширования сведений о коэффициенте пересчета.
//		* ТипИзмеряемойВеличины		- ПеречислениеСсылка.ТипыИзмеряемыхВеличин - Тип измеряемой величины единицы измерения 
//																					справочника 'ЕдиницыИзмеренияВЕТИС'.
//		* НужноОкруглятьКоличество	- Булево, Истина	- Признак необходимости округления количества при пересчете.
//
Функция КоэффициентЕдиницыИзмеренияПоВЕТИС(ЕдиницаИзмеренияВЕТИС, Номенклатура) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КодОшибки",                0);
	Результат.Вставить("Коэффициент",              1);
	Результат.Вставить("КэшироватьДанные",         Ложь);
	Результат.Вставить("ТипИзмеряемойВеличины",    Неопределено);
	Результат.Вставить("НужноОкруглятьКоличество", Ложь);
	
	ЕдиницаИзмерения = Справочники.БазовыеЕдиницыИзмерения.ПустаяСсылка();
	ЕдиницаИзмеренияНоменклатуры = Справочники.БазовыеЕдиницыИзмерения.ПустаяСсылка();
	БазоваяЕдиницаИзмеренияВЕТИС = Справочники.ЕдиницыИзмеренияВЕТИС.ПустаяСсылка();
	БазоваяЕдиницаИзмерения = Справочники.БазовыеЕдиницыИзмерения.ПустаяСсылка();
	НаборУпаковок = Справочники.НаборыУпаковок.ПустаяСсылка();
	КоэффициентЕдиницыИзмерения = 1;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура,
		"ЕдиницаИзмерения, НаборУпаковок");
		ЕдиницаИзмеренияНоменклатуры = РеквизитыНоменклатуры.ЕдиницаИзмерения;
		НаборУпаковок = РеквизитыНоменклатуры.НаборУпаковок;
	Иначе
		Результат.Коэффициент      = 1;
		Результат.КэшироватьДанные = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияНоменклатуры) Тогда
		Результат.КодОшибки   = 1;
		Результат.Коэффициент = 1;
		Возврат Результат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияВЕТИС) Тогда
		
		РеквизитыЕдиницыИзмеренияВЕТИС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЕдиницаИзмеренияВЕТИС,
		"ЕдиницаИзмерения, Коэффициент, БазоваяЕдиницаИзмерения");
		
		ЕдиницаИзмерения = РеквизитыЕдиницыИзмеренияВЕТИС.ЕдиницаИзмерения;
		КоэффициентЕдиницыИзмерения = РеквизитыЕдиницыИзмеренияВЕТИС.Коэффициент;
		БазоваяЕдиницаИзмеренияВЕТИС = РеквизитыЕдиницыИзмеренияВЕТИС.БазоваяЕдиницаИзмерения;
		
		Если ЗначениеЗаполнено(БазоваяЕдиницаИзмеренияВЕТИС) Тогда
			РеквизитыБазовойЕдиницыИзмеренияВЕТИС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БазоваяЕдиницаИзмеренияВЕТИС,
			"ЕдиницаИзмерения, Коэффициент, БазоваяЕдиницаИзмерения");
			БазоваяЕдиницаИзмерения = РеквизитыБазовойЕдиницыИзмеренияВЕТИС.ЕдиницаИзмерения;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			Результат.КодОшибки   = 1;
			Результат.Коэффициент = 1;
			Возврат Результат;
		КонецЕсли;
		
	Иначе
		
		Результат.Коэффициент      = 1;
		Результат.КэшироватьДанные = Истина;
		Возврат Результат;
		
	КонецЕсли;
	
	Если ЕдиницаИзмеренияНоменклатуры = ЕдиницаИзмерения Тогда
		Результат.Коэффициент      = 1;
		Результат.КэшироватьДанные = Истина;
		
	ИначеЕсли ЕдиницаИзмеренияНоменклатуры = БазоваяЕдиницаИзмерения Тогда
		
		КодОшибки             = 0;
		Коэффициент           = КоэффициентЕдиницыИзмерения;
		КэшироватьДанные      = Истина;
		
		Если Коэффициент = 0 Тогда
			Коэффициент      = 1;
			КэшироватьДанные = Истина;
			КодОшибки = 0;
		КонецЕсли;
		
		Результат.КодОшибки                = КодОшибки;
		Результат.Коэффициент              = Коэффициент;
		Результат.КэшироватьДанные         = КэшироватьДанные;
		
	ИначеЕсли ЗначениеЗаполнено(НаборУпаковок) Тогда
		
		МассивЕИ = Новый Массив();
		МассивЕИ.Добавить(ЕдиницаИзмерения);
		Если ЗначениеЗаполнено(БазоваяЕдиницаИзмерения) Тогда
			МассивЕИ.Добавить(БазоваяЕдиницаИзмерения);
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковкиНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	УпаковкиНоменклатуры.Коэффициент КАК Коэффициент
		|ИЗ
		|	Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
		|ГДЕ
		|	УпаковкиНоменклатуры.Владелец = &Владелец
		|	И УпаковкиНоменклатуры.ЕдиницаИзмерения В(&ЕдиницаИзмерения)
		|	И НЕ УпаковкиНоменклатуры.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Владелец", 
		?(НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры, Номенклатура, НаборУпаковок));
		Запрос.УстановитьПараметр("ЕдиницаИзмерения", МассивЕИ);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ЕдиницыУпаковок = РезультатЗапроса.Выгрузить();
		
		НайденнаяСтрока = ЕдиницыУпаковок.Найти(ЕдиницаИзмерения, "ЕдиницаИзмерения");
		Если НайденнаяСтрока = Неопределено Тогда
			ЕстьСоответствиеДляОсновнойЕИ = Ложь;
		Иначе
			
			КодОшибки             = 0;
			Коэффициент           = НайденнаяСтрока.Коэффициент;
			КэшироватьДанные      = Истина;
			
			Если Коэффициент = 0 Тогда
				Коэффициент      = 1;
				КэшироватьДанные = Истина;
				КодОшибки = 0;
			КонецЕсли;
			
			Результат.КодОшибки                = КодОшибки;
			Результат.Коэффициент              = Коэффициент;
			Результат.КэшироватьДанные         = КэшироватьДанные;
			
			ЕстьСоответствиеДляОсновнойЕИ = Истина;
		КонецЕсли;
		
		Если ЕстьСоответствиеДляОсновнойЕИ Тогда
			Возврат Результат;
		ИначеЕсли ЗначениеЗаполнено(БазоваяЕдиницаИзмерения) Тогда
			НайденнаяСтрока = ЕдиницыУпаковок.Найти(БазоваяЕдиницаИзмерения, "ЕдиницаИзмерения");
			Если НайденнаяСтрока = Неопределено Тогда
				Результат.Коэффициент      = 1;
				Результат.КэшироватьДанные = Истина;
			Иначе
				
				КодОшибки             = 0;
				Коэффициент           = НайденнаяСтрока.Коэффициент;
				КэшироватьДанные      = Истина;
				
				Если Коэффициент = 0 Тогда
					Коэффициент      = 1;
					КэшироватьДанные = Истина;
					КодОшибки = 3;
				КонецЕсли;
				
				Результат.КодОшибки                = КодОшибки;
				Результат.Коэффициент              = Коэффициент;
				Результат.КэшироватьДанные         = КэшироватьДанные;
				
			КонецЕсли;
		Иначе
			Результат.КодОшибки = 3;
			Результат.Коэффициент      = 1;
			Результат.КэшироватьДанные = Истина;
		КонецЕсли;
		
	Иначе
		Результат.КодОшибки = 3;
		Результат.Коэффициент      = 1;
		Результат.КэшироватьДанные = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные по единицам измерения из макета БазовыеЕдиницыИзмерения.КлассификаторЕдиницИзмерения
//
// Параметры:
//	КодыОКЕИ	- Массив	- Массив кодов ОКЕИ
//
// Возвращаемое значение:
//	ТаблицаЗначений - ТаблицаЗначений с колонками:
//		* Наименование								- Строка - Наименование единицы измерения.
//		* УсловноеОбозначениеМеждународное			- Строка - условное международное обозначение.
//		* УсловноеОбозначениеНациональное			- Строка - условное нациоанальное обозначение.
//		* КодЧисловой								- Строка - числовой код.
//		* КодовоеБуквенноеОбозначениеМеждународное	- Строка - кодовое буквенное обозначение международное.
//		* КодовоеБуквенноеОбозначениеНациональное	- Строка - кодовое буквенное обозначение национальное.
//		* ВесоваяЕдиницаИзмерения					- Булево - признак весовой единицы измерения.
//
Функция ДанныеИзКлассификатораЕдиницИзмерения(КодыОКЕИ) Экспорт
	
	ДеревоКлассификатора 	= ПолучитьДанныеКлассификатора();
	ТаблицаРезультат 		= ОбщегоНазначенияРТ.ДанныеДерева(ДеревоКлассификатора, 3);
	
	Возврат ТаблицаРезультат
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция получает перечень кодов единиц измерения и по этим кодам ищет единицы в справочнике.
//  Если их нет, то создает элементы справочника в соответствии с классификатором ОКЕИ.
//
// Параметры:
//  СтрокаКодов		 - Строка		 - Строка с кодами единиц измерения через запятую,
//  РежимОбновления	 - Булево, Истина	 - признак записи объекта через метод ОбновлениеИнформационнойБазы.ЗаписатьОбъект().
// 
// Возвращаемое значение:
//  Соответствие - соответствие:
//  *Ключ - Код единицы измерения по ОКЕИ
//  *Значение - ссылка на единицу измерения или Неопределено, если такого кода нет в ОКЕИ.
//
Функция ЗаполнитьЕдиницыИзмеренияИзКлассификатора(СтрокаКодов, РежимОбновления = Ложь) Экспорт
	
	Соответствие = Новый Соответствие;
	Дерево = ПолучитьДанныеКлассификатора();
	
	МассивКодов = СтрРазделить(СтрокаКодов, ",", Ложь);
	
	Для Каждого Код Из МассивКодов Цикл
		
		СуществующийЭлемент = Справочники.БазовыеЕдиницыИзмерения.НайтиПоКоду(Код);
		Если Не ЗначениеЗаполнено(СуществующийЭлемент) Тогда
			
			СтруктураПоиска = Новый Структура("КодЧисловой", Код);
			СтрокаДерева = Дерево.Строки.НайтиСтроки(СтруктураПоиска, Истина);
			
			Если СтрокаДерева.Количество() > 0 Тогда
				СвойстваЕдИзмерения = СтрокаДерева[0];
				
				СправочникОбъект = Справочники.БазовыеЕдиницыИзмерения.СоздатьЭлемент();
				
				Если ЗначениеЗаполнено(СвойстваЕдИзмерения.УсловноеОбозначениеНациональное) Тогда
					Наименование = СвойстваЕдИзмерения.УсловноеОбозначениеНациональное;
				ИначеЕсли ЗначениеЗаполнено(СвойстваЕдИзмерения.УсловноеОбозначениеМеждународное) Тогда
					Наименование = СвойстваЕдИзмерения.УсловноеОбозначениеМеждународное;
				ИначеЕсли ЗначениеЗаполнено(СвойстваЕдИзмерения.КодовоеБуквенноеОбозначениеНациональное) Тогда
					Наименование = СвойстваЕдИзмерения.КодовоеБуквенноеОбозначениеНациональное;
				ИначеЕсли ЗначениеЗаполнено(СвойстваЕдИзмерения.КодовоеБуквенноеОбозначениеМеждународное) Тогда
					Наименование = СвойстваЕдИзмерения.КодовоеБуквенноеОбозначениеМеждународное;
				Иначе
					Наименование = СвойстваЕдИзмерения.Наименование;
				КонецЕсли;
				
				СправочникОбъект.Наименование            = СтрЗаменить(Наименование,Символы.ПС,"/");
				СправочникОбъект.МеждународноеСокращение = СтрЗаменить(СвойстваЕдИзмерения.КодовоеБуквенноеОбозначениеМеждународное,Символы.ПС,"/");
				СправочникОбъект.НаименованиеПолное      = СтрЗаменить(СвойстваЕдИзмерения.Наименование,Символы.ПС,"/");
				СправочникОбъект.Код                     = СвойстваЕдИзмерения.КодЧисловой;
				
				СправочникОбъект.Записать();
				
				Соответствие.Вставить(Код, СправочникОбъект.Ссылка);
			Иначе
				Соответствие.Вставить(Код, Неопределено);
			КонецЕсли;
		Иначе
			Соответствие.Вставить(Код, СуществующийЭлемент);	
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

// Возвращает дерево значений с данными ОКЕИ.
//
Функция ПолучитьДанныеКлассификатора() Экспорт

	Текст = Новый ТекстовыйДокумент;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	Макет = Справочники.БазовыеЕдиницыИзмерения.ПолучитьМакет("КлассификаторЕдиницИзмеренияРТ");
	Макет.Записать(ИмяВременногоФайла);	
	Текст.Прочитать(ИмяВременногоФайла);
	ТекстМакета = Текст.ПолучитьТекст();
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ОбщегоНазначения.ЗначениеИзСтрокиXML(ТекстМакета);

КонецФункции

// Возвращает массив кодов штучных единиц измерения.
// Для такие единиц ТипЕдиницыИзмерения = Перечисления.ТипыЕдиницИзмерения.Штучная.
//
Функция ПолучитьКодыШтучныхТоваров() Экспорт

	КодыШтучныхТоваров = Новый Массив;
	КодыШтучныхТоваров.Добавить("616");
	КодыШтучныхТоваров.Добавить("625");
	КодыШтучныхТоваров.Добавить("626");
	КодыШтучныхТоваров.Добавить("630");
	КодыШтучныхТоваров.Добавить("641");
	КодыШтучныхТоваров.Добавить("657");
	КодыШтучныхТоваров.Добавить("683");
	КодыШтучныхТоваров.Добавить("704");
	КодыШтучныхТоваров.Добавить("715");
	КодыШтучныхТоваров.Добавить("730");
	КодыШтучныхТоваров.Добавить("732");
	КодыШтучныхТоваров.Добавить("733");
	КодыШтучныхТоваров.Добавить("734");
	КодыШтучныхТоваров.Добавить("735");
	КодыШтучныхТоваров.Добавить("736");
	КодыШтучныхТоваров.Добавить("737");
	КодыШтучныхТоваров.Добавить("740");
	КодыШтучныхТоваров.Добавить("745");
	КодыШтучныхТоваров.Добавить("778");
	КодыШтучныхТоваров.Добавить("780");
	КодыШтучныхТоваров.Добавить("781");
	КодыШтучныхТоваров.Добавить("796");
	КодыШтучныхТоваров.Добавить("797");
	КодыШтучныхТоваров.Добавить("798");
	КодыШтучныхТоваров.Добавить("799");
	КодыШтучныхТоваров.Добавить("800");
	КодыШтучныхТоваров.Добавить("801");
	КодыШтучныхТоваров.Добавить("802");
	
	Возврат КодыШтучныхТоваров;

КонецФункции

#КонецОбласти

#КонецЕсли