
#Область ПроверкаШтрихкодаGS1

//Используется в розничном выбытии для проверки полученного ШК на принадлежность к кодам маркировки
//
Функция ЭтоКодМаркировки(ТипИдентификатораТовара) Экспорт
	
	ТипыШтрихкодовМарок = Новый СписокЗначений;
	ТипыШтрихкодовМарок.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовШКТовараИСМПТК.КодТовараВФорматеDataMatrixGS1"));
	
	Возврат НЕ ТипыШтрихкодовМарок.НайтиПоЗначению(ТипИдентификатораТовара) = Неопределено;
	
КонецФункции

// Выполняет обработку штрихкода стандартными средствами прикладного объекта.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма.
//  ДанныеШтрихкода - Описание:
// * Штрихкод - Строка - Значение штрихкода.
// * Количество - Число - количество штрихкодов с одним значением.
Процедура ОбработатьШтрихкодКакНемаркируемуюПродукцию(Форма, ДанныеШтрихкода, ОткрытиеПослеДобавления = Ложь) Экспорт
	
	РезультатОбработкиШтрихкода = Новый Структура;
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяОбработкаШтрихкода", Истина);
	РезультатОбработкиШтрихкода.Вставить("ИсходныеДанные", ДанныеШтрихкода);
	РезультатОбработкиШтрихкода.Вставить("ОткрытиеПослеДобавления", ОткрытиеПослеДобавления);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавлениеКМКакНемаркированногоТовараИСМПТК", Форма);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатОбработкиШтрихкода);
	
КонецПроцедуры

Процедура ОбработатьШтрихкодКакМаркируемуюПродукциюИСМПТК(Форма, ДанныеШтрихкода, КлючСвязиСтроки = Неопределено, ОткрытиеПослеДобавления = Ложь) Экспорт
	
	РезультатОбработкиШтрихкода = Новый Структура;
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяОбработкаШтрихкода", Истина);
	РезультатОбработкиШтрихкода.Вставить("ИсходныеДанные", 				ДанныеШтрихкода);
	Если Не КлючСвязиСтроки = Неопределено Тогда
		РезультатОбработкиШтрихкода.Вставить("КлючСвязиСтроки", 		КлючСвязиСтроки);
	КонецЕсли;
	РезультатОбработкиШтрихкода.Вставить("ОткрытиеПослеДобавления", 	ОткрытиеПослеДобавления);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводКодаМаркировкиПослеПредупрежденияИСМПТК", Форма);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатОбработкиШтрихкода);
	
КонецПроцедуры

//В общем случае работа с КМ происходит в нормализованном формате, т.е. в преобразованном виде без спецсимволов GS29,
//однако в некоторых механизмах используется полный КМ. 
//Полный КМ передается в формате закодированной  строки Base64, чтобы не возникало проблем при передаче спецсимволов с клиента на сервер.
//Есть функции и процедуры, использующиеся в разных местах и принимающие входные параметры c КМ как в полном виде, так и в закодированной строке Base64
//в зависимости от места вызова.
//Поэтому важно четко определять - КМ уже закодирован или требуется кодировка, чтобы не возникало двойного преобразования.
//В типовых механизмах используется проверка типа "Если Base64Значение(СтрокаДляПроверки) = Неопределено Тогда *преобразование в Base64".
//Однако на практике выяснили, что некоторые потребительские КМ табачной продукции в полном виде в этой конструкции могут возвращать двоичные данные,
//как будто строка закодирована в Base64, хотя это не так. В результате преобразование не происходит и в дальнейшем возникают ошибочные ситуации.
//Пример такого кода: 00000046199928fZ?vCTNSVVsWCt4
//В качестве возможного и относительно простого способа проверки на формат используем двойное преобразование строки.
//
Функция ЭтоСтрокаФорматаBase64(Штрихкод) Экспорт
	
	КонтрольныйШтрихкод = Штрихкод;
	//По умолчанию считаем, что Штрихкод это строка формата Base64. Преобразуем в двоичные данные.
	СтрокаДвоичныеДанные = Base64Значение(Штрихкод);
	Если СтрокаДвоичныеДанные = Неопределено Тогда
		//Сразу можно сказать, что штрихкод не в формате Base64
		Возврат Ложь;
	КонецЕсли;
	//Кодируем обратно
	ШтрихкодДляПроверки = Base64Строка(СтрокаДвоичныеДанные);
	ШтрихкодДляПроверки = СтрЗаменить(ШтрихкодДляПроверки, Символы.ПС, "");
	ШтрихкодДляПроверки = СтрЗаменить(ШтрихкодДляПроверки, Символы.ВК, "");
		
	Если ШтрихкодДляПроверки = КонтрольныйШтрихкод Тогда 
		//Значит исходный штрихкод это корректная строка формата Base64
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ФормаПроверкиКМ

Процедура ВыполнитьПереопределяемуюКомандуРМК(Форма) Экспорт
	
	ТребуетсяВопрос = Ложь;
	ПараметрыОткрытияФормыПроверки = ПараметрыОткрытияФормыПроверкиКМ(Форма);
	
	Если НЕ ПустаяСтрока(ПараметрыОткрытияФормыПроверки.ИмяРеквизитаФормыОбъект) Тогда
		Объект = Форма[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаФормыОбъект];

		Если НЕ ПараметрыОткрытияФормыПроверки.ПроверятьМодифицированность Тогда
		ИначеЕсли Объект.Ссылка.Пустая() Тогда
			ТребуетсяВопрос = Истина;
			ТекстВопроса    = НСтр("ru = 'Сканирование маркируемой продукции возможно только в записанном документе. Записать?'");
		ИначеЕсли Форма.Модифицированность Тогда
			ТребуетсяВопрос  = Истина;
			Если Объект.Проведен Тогда
				ТекстВопроса = НСтр("ru = 'Документ был изменен. Провести документ?'");
			Иначе
				ТекстВопроса = НСтр("ru = 'Документ был изменен. Записать документ?'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТребуетсяВопрос Тогда
		
		ПараметрыВопроса = Новый Структура();
		ПараметрыВопроса.Вставить("Форма", Форма);
		ПараметрыВопроса.Вставить("ПараметрыОткрытияФормыПроверки", ПараметрыОткрытияФормыПроверки);
				
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуПроверкиКМПриОтветеНаВопрос", ЭтотОбъект, ПараметрыВопроса);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОткрытьФормуПроверкиКМ(Форма, ПараметрыОткрытияФормыПроверки);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыОткрытияФормыПроверкиКМ(Форма) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИмяРеквизитаФормыОбъект",       "Объект");
	ПараметрыОткрытия.Вставить("ИмяРеквизитаОрганизация",       "Организация");
	ПараметрыОткрытия.Вставить("РедактированиеФормыНедоступно", Ложь);
	ПараметрыОткрытия.Вставить("ПроверятьМодифицированность",   Истина);
		
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("Форма", Форма);
	
	ОповещениеПриЗакрытии = Новый ОписаниеОповещения("ПриЗакрытииФормыПроверкиКМ", ЭтотОбъект, ПараметрыЗакрытия);
	ПараметрыОткрытия.Вставить("ОписаниеОповещенияПриЗакрытии", ОповещениеПриЗакрытии);
	
	ПриУстановкеПараметровОткрытияФормыПроверкиКМ(Форма, ПараметрыОткрытия);
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

Процедура ПриЗакрытииФормыПроверкиКМ(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	РозничноеВыбытиеИСМПТККлиентПереопределяемый.ПриЗакрытииФормыПроверкиКМ(РезультатЗакрытия, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПриУстановкеПараметровОткрытияФормыПроверкиКМ(Форма, ПараметрыОткрытия)
	
	РозничноеВыбытиеИСМПТККлиентПереопределяемый.ПриУстановкеПараметровОткрытияФормыПроверкиКМ(Форма, ПараметрыОткрытия);
	
КонецПроцедуры

Процедура ОткрытьФормуПроверкиКМПриОтветеНаВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ПараметрыОткрытияФормыПроверки = ДополнительныеПараметры.ПараметрыОткрытияФормыПроверки;
	
	Объект = Форма[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаФормыОбъект];
	
	СтандартнаяОбработка = Ложь;
	ДействиеПослеЗаписи = Новый ОписаниеОповещения("ОткрытьФормуПроверкиКМПослеЗаписиОбъекта", ЭтотОбъект, ДополнительныеПараметры);
	СобытияФормИСМПТККлиентПереопределяемый.ВыполнитьЗаписьОбъектаВФорме(Форма, Объект, ДействиеПослеЗаписи, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗаписи = Ложь;
	Если Объект.Проведен Тогда
		Если Форма.ПроверитьЗаполнение() Тогда
			РезультатЗаписи = Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		КонецЕсли;
	Иначе
		РезультатЗаписи = Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДействиеПослеЗаписи, РезультатЗаписи);
	
КонецПроцедуры

Процедура ОткрытьФормуПроверкиКМПослеЗаписиОбъекта(РезультатЗаписи, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатЗаписи Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ПараметрыОткрытияФормыПроверки = ДополнительныеПараметры.ПараметрыОткрытияФормыПроверки;
	ОткрытьФормуПроверкиКМ(Форма, ПараметрыОткрытияФормыПроверки);
	
КонецПроцедуры

Процедура ОткрытьФормуПроверкиКМ(Форма, Знач ПараметрыОткрытияФормыПроверки) Экспорт

	//Открытие из формы РМК
	ОчиститьСообщения();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РедактированиеФормыНедоступно", ПараметрыОткрытияФормыПроверки.РедактированиеФормыНедоступно);
	ПараметрыФормы.Вставить("СписокКМ",   Форма.Объект.КодыМаркировкиИСМПТК);
	ПараметрыФормы.Вставить("ТоварыЧека", Форма.Объект.Товары);   	
	ПараметрыФормы.Вставить("ВызовИзФормыСпискаЧеков", Ложь);
	
	Если ПустаяСтрока(ПараметрыОткрытияФормыПроверки.ИмяРеквизитаФормыОбъект) Тогда
		ПараметрыФормы.Вставить("Организация", Форма[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаОрганизация]);
	Иначе
		Объект = Форма[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаФормыОбъект];
		ПараметрыФормы.Вставить("Организация", Объект[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаОрганизация]);
	КонецЕсли;
	
	ОбъединятьПозицииСОдинаковымТоваром = РозничноеВыбытиеИСМПТККлиентПереопределяемый.ПолучитьНастройкуОбъединенияСтрокВЧеке(Форма);
	ПараметрыФормы.Вставить("ОбъединятьСтрокиСОдинаковымиТоварами", ОбъединятьПозицииСОдинаковымТоваром);
	
	//Дополнительный параметр, присуствующий только при вызове из формы ЧекККМВозврат
	ПараметрыФормы.Вставить("ДанныеВозвращаемогоКода", Неопределено);
	
	ИмяФормыПроверкиКМ = "Обработка.РозничноеВыбытиеМаркированнойПродукцииИСМПТК.Форма.ПроверкаКМ";
	ОткрытьФорму(ИмяФормыПроверкиКМ, ПараметрыФормы, Форма, Форма.УникальныйИдентификатор, , , ПараметрыОткрытияФормыПроверки.ОписаниеОповещенияПриЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемоеОборудование

Процедура ОбработкаВнешнегоСобытия(Форма, ДанныеСоСканераСтруктура, ФормаИсточникСтрока) Экспорт
	
	РозничноеВыбытиеИСМПТККлиентПереопределяемый.ОбработкаВнешнегоСобытия(Форма, ДанныеСоСканераСтруктура, ФормаИсточникСтрока);			
	
КонецПроцедуры

//При сканировании КМ в форме Чека возврата:
//Проверяем наличие товара, соответствующего этому КМ, в таблице чека. Если товар не найден, добавление не выполняем, т.к. возврат должен соответствовать исходному чеку по товарам.
//Если товар в таблице чека найден, открываем форму обработки РозничноеВыбытиеМаркированнойПродукцииИСМПТК.ПроверкаКМ,
//сразу заполняя в нее полученные данные кода в статусе Добавлен. Поведение в этой форме оставляем стандартное, т.е. программное предзаполнение
//расцениваем как самостоятельное открытие формы и сканирование в ней нового КМ самим пользователем.
//Данный вариант поведения принят в связи с тем, что в чеке возврата при создании уже предзаполнены данные товаров, и если сохранять стандартное 
//поведение, т.е. сканировать КМ сразу в чек, будет увеличиваться количество в строке, что для возврата некорректно.
//При переносе же из формы ПроверкаКМ в первую очередь коды связываются с "дырками" в уже имеющихся строках товаров, т.е. сопоставлятся с имеющимися единицами чека. 
//Это позволяет избежать увеличения количества без желания пользователя.
//При этом возможность добавить в возврат новые товарные позиции и их КМ или отсканировать больше КМ по товару, чем было указано изначально  - сохраняем опционально.
//
//НесоответствиеТоваровРазрешено - параметр, определяющий возможность добавить в чек возврата товары, отсутствующие в исходном чеке продажи.
Процедура ОбработкаВнешнегоСобытияЧекВозврат(Форма, ДанныеСоСканераСтруктура, ФормаИсточникСтрока, НесоответствиеТоваровРазрешено = Ложь) Экспорт
	
	РозничноеВыбытиеИСМПТККлиентПереопределяемый.ОбработкаВнешнегоСобытияЧекВозврат(Форма, ДанныеСоСканераСтруктура, ФормаИсточникСтрока, НесоответствиеТоваровРазрешено);
	
КонецПроцедуры

Функция ПолучитьВидПродукцииПоНоменклатуре(Номенклатура) Экспорт 
	
	Возврат ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);
		
КонецФункции

Функция ПолучитьНоменклатуруПоШтрихкодуВРозничномКонтуре(Штрихкод, НужноВернутьМассив = Ложь) Экспорт
	
	Возврат РозничноеВыбытиеИСМПТКПереопределяемый.ПолучитьНоменклатуруПоШтрихкодуВРозничномКонтуре(Штрихкод, НужноВернутьМассив);
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОткрытьФормуНевозможностиДобавленияОтсканированногоИСМПТК(Форма, ПараметрыОткрытияФормы, ОповещениеОЗакрытии = Неопределено) Экспорт
	
	Если ПараметрыОткрытияФормы.ВидПродукции = Неопределено Тогда
		
		ОткрытьФорму("Обработка.РозничноеВыбытиеМаркированнойПродукцииИСМПТК.Форма.ИнформацияОНевозможностиДобавленияОтсканированного", ПараметрыОткрытияФормы, Форма);
		
	ИначеЕсли ПараметрыОткрытияФормы.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная")
		  Или ПараметрыОткрытияФормы.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная") 
		  Или ПараметрыОткрытияФормы.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") Тогда
		
		ОткрытьФорму("Обработка.РозничноеВыбытиеМаркированнойПродукцииИСМПТК.Форма.ИнформацияОНевозможностиДобавленияОтсканированного",	ПараметрыОткрытияФормы, Форма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПустуюСтруктуруДанныхШтрихкодаКМ() Экспорт

	ДанныеШтрихкода = Новый Структура();
	ДанныеШтрихкода.Вставить("GTIN", 					"");
	ДанныеШтрихкода.Вставить("EAN", 					"");
	ДанныеШтрихкода.Вставить("ДанныеШтрихкода", 		Новый Соответствие());
	ДанныеШтрихкода.Вставить("НаименованиеРеквизита",   "EAN13");
	ДанныеШтрихкода.Вставить("ОписаниеОшибки", 			Неопределено);
	ДанныеШтрихкода.Вставить("ПредставлениеШтрихкода",  "");
	ДанныеШтрихкода.Вставить("Разобран",				Истина);
	ДанныеШтрихкода.Вставить("СерийныйНомер", 			Неопределено);
	ДанныеШтрихкода.Вставить("ТипИдентификатораТовара", ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовШКТовараИСМПТК.КодТовараВФорматеEAN13"));
	ДанныеШтрихкода.Вставить("ШтрихкодBase64", 			"");
	
	Возврат ДанныеШтрихкода;
	
КонецФункции

Функция ЕстьНеобработанноеСобытие() Экспорт
	
	Возврат РозничноеВыбытиеИСМПТККлиентПереопределяемый.ЕстьНеобработанноеСобытие();
	
КонецФункции

Функция ПараметрыЗавершенияОбработкиШтрихкода() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Форма");
	Параметры.Вставить("РезультатОбработкиШтрихкода");
	Параметры.Вставить("КэшированныеЗначения");
	Параметры.Вставить("ПараметрыСканирования");
	Параметры.Вставить("ДанныеШтрихкода");
	Параметры.Вставить("ОповещениеОбработкиШтрихкода");
	Параметры.Вставить("ОповещениеВыполнитьДействие");
	Параметры.Вставить("ОповещениеЗавершениеОбработки");
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти
