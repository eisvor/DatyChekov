////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы библиотеки СтандартныеПодсистемы (БСП).
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область СведенияОБиблиотекеИлиКонфигурации

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.6".
//
//   ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                  Обработчики обновления таких библиотек должны быть вызваны ранее
//                                  обработчиков обновления данной библиотеки.
//                                  При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                  порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                  в процедуре ПриДобавленииПодсистем общего модуля
//                                  ПодсистемыКонфигурацииПереопределяемый.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Если Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Описание.Имя    = "РозницаДляКазахстана";
	Иначе
		Описание.Имя    = "РозницаДляКазахстанаБазовая";
	КонецЕсли;
	Описание.Версия = "2.3.10.3";
	
	Описание.ПараллельноеОтложенноеОбновлениеСВерсии = "2.2.4.0";
	Описание.РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	Описание.ИдентификаторИнтернетПоддержки = ?(СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации(), "RetailKzBase", "RetailKz");
	
КонецПроцедуры

#КонецОбласти

#Область ПереопределяемыеПроцедурыБСП

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - описание полей 
//                                  см. в процедуре ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.0.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//  Обработчик.Опциональный        = Истина;
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	#Область Версия_2_2_2
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.2.2.13";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ПервыйЗапуск";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.2.2.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ПустойОбработчик";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.2.2.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновитьСтатьиДДС";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.2.2.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновитьВидыОплатЧекаККМ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.2.2.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновитьНастройкиРаспределенияВыручкиПоСекциямФР";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.2.2.13";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "Справочники.Магазины.ОбновитьПредопределенныеВидыКонтактнойИнформацииОрганизаций";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.2.2.13";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "Справочники.ФизическиеЛица.ОбновитьПредопределенныеВидыКонтактнойИнформацииОрганизаций";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.2.2.13";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "Справочники.Контрагенты.ОбновитьПредопределенныеВидыКонтактнойИнформацииОрганизаций";
	
	#КонецОбласти
	
	#Область Версия_2_2_4
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.2.4.18";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "Справочники.Организации.ОбновитьПредопределенныеВидыКонтактнойИнформацииОрганизаций";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.2.4.18";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "Справочники.Организации.ЗаполнитьКонстантуИспользоватьНесколькоОрганизаций";
	
	#КонецОбласти
	
	#Область Версия_2_2_5
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.2.5.5";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.УстановитьПравоВыбораКартыБезПодтверждения";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.2.5.14";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "Справочники.ИнформационныеКарты.ОбновитьПредопределенныеВидыКонтактнойИнформацииОрганизаций";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.2.5.16";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.УстановитьТипыОборудованияУКассККМ";
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.2.5.23";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "Справочники.СтатьиДвиженияДенежныхСредств.ЗаполнитьХозяйственнуюОперациюПредопределеннымСтатьямДДС";
	
	#КонецОбласти
	
	#Область Версия_2_2_8
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.2.8.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновитьВидыОплатЧекаККМ";
	
	#Область ОценкаПроизводительности
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.2.8.19";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.СоздатьКлючевыеОперации";
	
	#КонецОбласти
	
	#КонецОбласти
	
	#Область Версия_2_2_9
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.2.10.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнениеАналитикХозяйственныхОпераций";
	
	#КонецОбласти
	
	#Область Версия_2_2_10
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.2.10.10";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнениеАналитикХозяйственныхОпераций";
	
	#КонецОбласти
	
	#Область Версия_2_3_1
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.0.15";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.СозданиеРозничногоПокупателя";
	
	#КонецОбласти
	
	#Область Версия_2_3_3
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.3.8";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.РасходныйОрдерНаТовары.ДополнитьДвиженияПоРезервам";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("da88862d-99b4-4e23-b86b-0c1cb8629e34");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.РасходныйОрдерНаТовары.ЗарегистрироватьДляИзмененийДвиженийПоРезервам";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.РасходныйОрдерНаТовары";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ТоварыНаСкладах";
	Обработчик.БлокируемыеОбъекты = "РегистрНакопления.ТоварыНаСкладах";
	Обработчик.Комментарий = НСтр("ru = 'Заполнить резервы по расходным ордерам.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	Приоритет = Обработчик.ПриоритетыВыполнения.Добавить();
	Приоритет.Порядок = "После";
	Приоритет.Идентификатор = Новый УникальныйИдентификатор("25758374-3c22-480e-9c64-05eb69f4d8ff");
	Приоритет.Процедура = "ОбновлениеИнформационнойБазыРТ.ИзменитьТоварыНаСкладахВРамкахРезерва";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.3.15";
	Обработчик.Процедура = "УправлениеСвойствамиСлужебный.УстановитьЗначениеПризнакаИспользуется";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.НачальноеЗаполнение = Истина;
	
	#КонецОбласти
	
	#Область Версия_2_3_4
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.4.7";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ПоправитьТелефонПользователя";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.4.20";
	Обработчик.Процедура = "Справочники.ВидыОплатЧекаККМ.ЗаполнитьПредопределенные";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.4.21";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновитьРозничногоПокупателя";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.4.22";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.УдалитьПравоРазрешитьНеполнуюВыемку";
	Обработчик.Комментарий = НСтр("ru = 'Удаляет доп. право ""Разрешить неполную выемку при закрытии смены""'");
	
	#КонецОбласти
	
	#Область Версия_2_3_5
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.5.13";
	Обработчик.Процедура = "Справочники.ВидыНоменклатуры.ЗаполнитьИспользованиеСерий";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.5.13";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.СерииНоменклатуры.УстановитьВладельцаСерий";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a41b53a3-c24f-4fa8-b9ef-aca6f1f353cb");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.СерииНоменклатуры.ЗарегистрироватьСерииНоменклатуры_ВладелецСерии";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочники.СерииНоменклатуры, Справочники.ВидыНоменклатуры";
	Обработчик.ИзменяемыеОбъекты = "Справочники.СерииНоменклатуры";
	Обработчик.БлокируемыеОбъекты = "Справочники.СерииНоменклатуры";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение владельцев серий.'");
	
	#КонецОбласти
	
	#Область Версия_2_3_6
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.6.4";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.УдалитьПравоИзменятьУчетДенежныхСредствВКассовыхДокументах";
	Обработчик.Комментарий = НСтр("ru = 'Удаляет доп. право ""Доступность изменения учета денежных средств в кассовых документах""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.6.10";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ПровестиВозвратУслуги";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7d469b0e-f469-43a4-80a2-f5692722e7bd");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.Продажи.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочники.Номенклатура, Документы.ВозвратТоваровОтПокупателя";
	Обработчик.ИзменяемыеОбъекты = "РегистрыНакопления.Продажи";
	Обработчик.БлокируемыеОбъекты = "РегистрыНакопления.Продажи";
	Обработчик.Комментарий = НСтр("ru = 'Регистр Продажи. Возврат услуг.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.6.13";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьРеквизитОрганизацииВСкладах";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Организация"" в Справочнике ""Склады""'");
	
	#КонецОбласти
	
	#Область Версия_2_3_7
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.7.4";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ПеренестиБанковскиеСчетаОрганизаций";
	Обработчик.Комментарий = НСтр("ru = 'Переносит Банковские счета организаций в общий справочник банковских счетов'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.7.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.ДоговорыКонтрагентов.ПерезаполнитьБанковскийСчетОрганизации";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f5220ed2-5560-4ab1-bff3-987e3efcd1db");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ДоговорыКонтрагентов.ЗарегистрироватьДанныеКЗаполнениюБСО";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочники.ДоговорыКонтрагентов";
	Обработчик.ИзменяемыеОбъекты = "Справочники.ДоговорыКонтрагентов";
	Обработчик.БлокируемыеОбъекты = "Справочники.ДоговорыКонтрагентов";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение Банковского счета организации в справочнике ""Договоры контрагентов"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.7.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.РегистрацияБезналичнойОплаты.ПерезаполнитьБанковскийСчетОрганизации";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("00b59ec7-edd2-401d-9fef-971628aac4b2");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.РегистрацияБезналичнойОплаты.ЗарегистрироватьДанныеКЗаполнениюБСО";
	Обработчик.ОчередьОтложеннойОбработки = 2;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документы.РегистрацияБезналичнойОплаты";
	Обработчик.ИзменяемыеОбъекты = "Документы.РегистрацияБезналичнойОплаты";
	Обработчик.БлокируемыеОбъекты = "Документы.РегистрацияБезналичнойОплаты";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение Банковского счета организации в документе ""Регистрация безналичной оплаты"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.7.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ПерезаполнитьРегистрНакопленияДенежныеСредстваБезналичные";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("8e74649a-6b66-4c09-b511-2e4e3c40d48c");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ДенежныеСредстваБезналичные.ЗарегистрироватьДанныеКЗаполнениюБСО";
	Обработчик.ОчередьОтложеннойОбработки = 3;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрыНакопления.ДенежныеСредстваБезналичные";
	Обработчик.ИзменяемыеОбъекты = "РегистрыНакопления.ДенежныеСредстваБезналичные";
	Обработчик.БлокируемыеОбъекты = "РегистрыНакопления.ДенежныеСредстваБезналичные";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение Банковского счета организации в регистре ""Денежные средства безналичные"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.7.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ВводОстатковДенежныхСредств.ПерезаполнитьБанковскийСчетОрганизации";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f82ce4e5-87d5-472f-8c6b-a67a72845c27");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ВводОстатковДенежныхСредств.ЗарегистрироватьДанныеКЗаполнениюБСО";
	Обработчик.ОчередьОтложеннойОбработки = 4;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документы.ВводОстатковДенежныхСредств";
	Обработчик.ИзменяемыеОбъекты = "Документы.ВводОстатковДенежныхСредств";
	Обработчик.БлокируемыеОбъекты = "Документы.ВводОстатковДенежныхСредств";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение Банковского счета организации в документе ""Ввод остатков денежных средств"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.7.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ВозвратТоваровПоставщику.ПерезаполнитьБанковскийСчетОрганизации";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b915c1c2-5c41-46a5-a54e-5b821e63a785");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ВозвратТоваровПоставщику.ЗарегистрироватьДанныеКЗаполнениюБСО";
	Обработчик.ОчередьОтложеннойОбработки = 5;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документы.ВозвратТоваровПоставщику";
	Обработчик.ИзменяемыеОбъекты = "Документы.ВозвратТоваровПоставщику";
	Обработчик.БлокируемыеОбъекты = "Документы.ВозвратТоваровПоставщику";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение Банковского счета организации в документе ""Возврат товаров поставщику"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.7.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ЗаказПокупателя.ПерезаполнитьБанковскийСчетОрганизации";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("54602a87-ec59-458f-8e99-fde5f25eb11e");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЗаказПокупателя.ЗарегистрироватьДанныеКЗаполнениюБСО";
	Обработчик.ОчередьОтложеннойОбработки = 6;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документы.ЗаказПокупателя";
	Обработчик.ИзменяемыеОбъекты = "Документы.ЗаказПокупателя";
	Обработчик.БлокируемыеОбъекты = "Документы.ЗаказПокупателя";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение Банковского счета организации в документе ""Заказ покупателя"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.7.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПерезаполнитьБанковскийСчетОрганизации";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("79706579-70d6-42f0-bd00-daa39a278af1");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЗаявкаНаРасходованиеДенежныхСредств.ЗарегистрироватьДанныеКЗаполнениюБСО";
	Обработчик.ОчередьОтложеннойОбработки = 7;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документы.ЗаявкаНаРасходованиеДенежныхСредств";
	Обработчик.ИзменяемыеОбъекты = "Документы.ЗаявкаНаРасходованиеДенежныхСредств";
	Обработчик.БлокируемыеОбъекты = "Документы.ЗаявкаНаРасходованиеДенежныхСредств";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение Банковского счета организации в документе ""Заявка на расходование денежных средств"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.7.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ОтчетКомитентуОПродажах.ПерезаполнитьБанковскийСчетОрганизации";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("26d6b582-ae2c-4ce1-993e-42d579545ec0");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ОтчетКомитентуОПродажах.ЗарегистрироватьДанныеКЗаполнениюБСО";
	Обработчик.ОчередьОтложеннойОбработки = 8;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документы.ОтчетКомитентуОПродажах";
	Обработчик.ИзменяемыеОбъекты = "Документы.ОтчетКомитентуОПродажах";
	Обработчик.БлокируемыеОбъекты = "Документы.ОтчетКомитентуОПродажах";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение Банковского счета организации в документе ""Отчет комитенту о продажах"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.7.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ПоступлениеТоваров.ПерезаполнитьБанковскийСчетОрганизации";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("eaf0d11a-1ff4-4cea-9cce-e4979f5dd72f");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ПоступлениеТоваров.ЗарегистрироватьДанныеКЗаполнениюБСО";
	Обработчик.ОчередьОтложеннойОбработки = 9;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документы.ПоступлениеТоваров";
	Обработчик.ИзменяемыеОбъекты = "Документы.ПоступлениеТоваров";
	Обработчик.БлокируемыеОбъекты = "Документы.ПоступлениеТоваров";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение Банковского счета организации в документе ""Поступление товаров"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.7.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.ПриходныйКассовыйОрдер.ПерезаполнитьБанковскийСчетОрганизации";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6201cc27-bb48-4c11-972a-01f724743488");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ПриходныйКассовыйОрдер.ЗарегистрироватьДанныеКЗаполнениюБСО";
	Обработчик.ОчередьОтложеннойОбработки = 10;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документы.ПриходныйКассовыйОрдер";
	Обработчик.ИзменяемыеОбъекты = "Документы.ПриходныйКассовыйОрдер";
	Обработчик.БлокируемыеОбъекты = "Документы.ПриходныйКассовыйОрдер";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение Банковского счета организации в документе ""Приходный кассовый ордер"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.7.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.РасходныйКассовыйОрдер.ПерезаполнитьБанковскийСчетОрганизации";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f9787e52-65b2-43e5-972f-7815ba70b58a");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.РасходныйКассовыйОрдер.ЗарегистрироватьДанныеКЗаполнениюБСО";
	Обработчик.ОчередьОтложеннойОбработки = 11;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документы.РасходныйКассовыйОрдер";
	Обработчик.ИзменяемыеОбъекты = "Документы.РасходныйКассовыйОрдер";
	Обработчик.БлокируемыеОбъекты = "Документы.РасходныйКассовыйОрдер";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение Банковского счета организации в документе ""Расходный кассовый ордер"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.7.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Документы.РеализацияТоваров.ПерезаполнитьБанковскийСчетОрганизации";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a1c03b17-60a4-4fa3-a731-daf69277605a");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.РеализацияТоваров.ЗарегистрироватьДанныеКЗаполнениюБСО";
	Обработчик.ОчередьОтложеннойОбработки = 12;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документы.РеализацияТоваров";
	Обработчик.ИзменяемыеОбъекты = "Документы.РеализацияТоваров";
	Обработчик.БлокируемыеОбъекты = "Документы.РеализацияТоваров";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение Банковского счета организации в документе ""Реализация товаров"".'");

	#КонецОбласти
	
	#Область Версия_2_3_9
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.9.8";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ПерезаполнитьДокументыФизическихЛиц";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3429090e-cb5e-4e9f-8797-57e32b651ad3");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыРТ.БезЗарегистрированияДанныхКОбработкеДляПерехода";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочники.ВидыДокументовФизическихЛиц, РегистрыСведений.ДокументыФизическихЛиц";
	Обработчик.ИзменяемыеОбъекты = "РегистрыСведений.ДокументыФизическихЛиц";
	Обработчик.БлокируемыеОбъекты = "РегистрыСведений.ДокументыФизическихЛиц";
	Обработчик.Комментарий = НСтр("ru = 'Перезаполнение документов физических лиц.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.9.19";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновитьКонстантуПодключаемогоОборудования";
	Обработчик.Комментарий = НСтр("ru = 'ОбновляетПравилаОбменаСОборудованием.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.9.36";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновитьКонстантуИспользоватьКодыВидовНоменклатурнойКлассификации";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет константу ""ИспользоватьКодыВидовНоменклатурнойКлассификации"".'");
	
	#КонецОбласти
	
	#Область Версия_2_3_10
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.10.14";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновитьКнопкиВерхнейПанелиРМК";
	Обработчик.Комментарий = НСтр("ru = 'Перезаполнение кнопок верхней панели РМК.'");
	
	#КонецОбласти
	
	#Область Версия_2_3_11
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.11.8";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьИдентификаторПлатежныхСистем";
	Обработчик.Комментарий = НСтр("ru = 'Перезаполнение настроек оплаты СБП.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.11.13";
	Обработчик.Процедура = "Справочники.ВидыОплатЧекаККМ.ЗаполнитьПредопределенные";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.11.25";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ОбновитьКонстантыПечатиСлипЧека";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение констант печати слип чека.'");
	#КонецОбласти
	
	#Область Версия_2_3_12

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.12.14";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.АктуализироватьНастройкиРМК";
	Обработчик.Комментарий = НСтр("ru = 'Создание/обновление настроек нового рабочего места кассира'");
	
	#КонецОбласти
	
	#Область Версия_2_3_15
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.16.2";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьСлужебныеРеквизитыКонтактнойИнформацииИнформационныхКарт";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("513cadd3-c6a8-40c9-9cee-ba58bd7d33cc");
	Обработчик.ПроцедураЗаполненияДанныхОбновления
		= "ОбновлениеИнформационнойБазыРТ.ЗарегистрироватьИнформационныеКартыКОбновлениюОбратногоНомераТелефона";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочники.ИнформационныеКарты";
	Обработчик.ИзменяемыеОбъекты = "Справочники.ИнформационныеКарты";
	Обработчик.БлокируемыеОбъекты = "Справочники.ИнформационныеКарты";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение служебных реквизитов контактной информации информационных карт'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.16.2";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьСлужебныеРеквизитыКонтактнойИнформацииФизическихЛиц";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6d1a6316-8e9b-4b76-8d28-56cd501a6bb7");
	Обработчик.ПроцедураЗаполненияДанныхОбновления
		= "ОбновлениеИнформационнойБазыРТ.ЗарегистрироватьФизическиеЛицаКОбновлениюОбратногоНомераТелефона";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочники.ФизическиеЛица";
	Обработчик.ИзменяемыеОбъекты = "Справочники.ФизическиеЛица";
	Обработчик.БлокируемыеОбъекты = "Справочники.ФизическиеЛица";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение служебных реквизитов контактной информации физических лиц'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.16.2";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьСлужебныеРеквизитыКонтактнойИнформацииКонтрагентов";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c2d39685-7fce-44b0-bb91-04d6da9d46a0");
	Обработчик.ПроцедураЗаполненияДанныхОбновления
		= "ОбновлениеИнформационнойБазыРТ.ЗарегистрироватьКонтрагентовКОбновлениюОбратногоНомераТелефона";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочники.Контрагенты";
	Обработчик.ИзменяемыеОбъекты = "Справочники.Контрагенты";
	Обработчик.БлокируемыеОбъекты = "Справочники.Контрагенты";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение служебных реквизитов контактной информации контрагентов'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.16.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.УстановитьХранениеКартЛояльностиВРМК";
	Обработчик.Комментарий = НСтр("ru = 'Установка признака хранения карт лояльности в РМК'");
	
	#КонецОбласти
	
	#Область Версия_2_3_18
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	//Обработчик.Версия = "2.3.18.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.УстановитьИспользованиеГрупповыхСвойств";
	Обработчик.Комментарий = НСтр("ru = 'Установка признака использования групповых свойств товара'");
	
	#КонецОбласти

#Область Версия_2_3_10_1

    Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.ЗаполнитьПризнакиПредметовРасчета";

    //ИнтеграцияИСМПТК
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыРТ.УстановитьКонстантыВеденияУчетаМаркировкиИСМПТК";
    //Конец ИнтеграцияИСМПТК  
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.10.2";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура 							= "ОбновлениеИнформационнойБазыРТ.СкорректироватьИмяКомандыКодыМаркировкиНастройкиРМК";
	Обработчик.Идентификатор 						= Новый УникальныйИдентификатор("5a16e376-e7bf-4526-af10-c5342c9f484b");
	Обработчик.ПроцедураЗаполненияДанныхОбновления	= "ОбновлениеИнформационнойБазыРТ.ЗарегистрироватьНастройкиРМККОбновлению";
	Обработчик.ОчередьОтложеннойОбработки 			= 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочники.НастройкиРМК";
	Обработчик.ИзменяемыеОбъекты = "Справочники.НастройкиРМК";
	Обработчик.БлокируемыеОбъекты = "Справочники.НастройкиРМК";
	Обработчик.Комментарий = НСтр("ru = 'Изменение в предопределённом значении команды нижний панели Настройки РМК - Коды маркировки'");
	
#КонецОбласти

КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
	Если ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ() 
		И ОтсутствуютПрофилиКлючевыхОпераций() Тогда
		
		СоздатьКлючевыеОперации();
		
	КонецЕсли;
	
КонецПроцедуры // ПриОпределенииРежимаОбновленияДанных()

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт

КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Если ПредыдущееИмяКонфигурации = "ПредыдущееИмяКонфигурацииБазовая" Тогда
		Параметры.ВерсияКонфигурации = ПредыдущаяВерсияКонфигурации;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

// Процедура выполняет обработчики при первом запуске.
//
Процедура ПервыйЗапуск_ГлавныйУзел() Экспорт
	
	Справочники.БазовыеЕдиницыИзмерения.ЗаполнитьЕдиницыИзмеренияПоУмолчанию();
	Справочники.СтатьиДвиженияДенежныхСредств.ЗаполнитьХозяйственнуюОперациюПредопределеннымСтатьямДДС();
	Справочники.ВидыОплатЧекаККМ.ЗаполнитьПредопределенные();
	Справочники.АналитикаХозяйственныхОпераций.ЗаполнитьПредопределенные();
	ЗаполнитьКонстантыПоУмолчанию();
	
КонецПроцедуры // ПервыйЗапуск_ГлавныйУзел()

// Процедура выполняет обработчики при первом запуске.
//
Процедура ПервыйЗапуск() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
	
		ПервыйЗапуск_ГлавныйУзел();
	
	КонецЕсли;
	
	ЗаполнитьСвойстваВидовКонтактнойИнформации();
	ПланыОбмена.ПоРабочемуМесту.ОбновитьСценарииОбмена();

КонецПроцедуры // ПервыйЗапуск()

#КонецОбласти

#КонецОбласти

#Область ОбщиеОбработчики

#Область Релиз_2_3_10_1

Процедура ПустойОбработчик() Экспорт

	

КонецПроцедуры

Процедура ОбновитьСтатьиДДС() Экспорт
	
	ПрефиксБазы = Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить();
	
	СтатьяВыплатаЗарплаты = Справочники.СтатьиДвиженияДенежныхСредств.ВыплатаЗарплатыСотрудникам.ПолучитьОбъект();
	СтатьяВыплатаЗарплаты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям;
	СтатьяВыплатаЗарплаты.УстановитьНовыйКод(ПрефиксБазы);
	
	СтатьяВыплатаЗарплатыСотруднику = Справочники.СтатьиДвиженияДенежныхСредств.ВыплатаЗарплатыСотруднику.ПолучитьОбъект();
	СтатьяВыплатаЗарплатыСотруднику.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику;
	СтатьяВыплатаЗарплатыСотруднику.УстановитьНовыйКод(ПрефиксБазы);
	
	Попытка
		СтатьяВыплатаЗарплаты.Записать();
		СтатьяВыплатаЗарплатыСотруднику.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьВидыОплатЧекаККМ() Экспорт
	
	Справочники.ВидыОплатЧекаККМ.ЗаполнитьПредопределенные();
	
КонецПроцедуры

Процедура ОбновитьНастройкиРаспределенияВыручкиПоСекциямФР() Экспорт
	
	Если НЕ (ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.НастройкиРаспределенияВыручкиПоСекциямФР.РаспределениеПоУмолчанию") = Неопределено)  Тогда
		
		СправочникОбъект = Справочники.НастройкиРаспределенияВыручкиПоСекциямФР.РаспределениеПоУмолчанию.ПолучитьОбъект();
		НужноЗаписать = Ложь;
		Если НЕ ЗначениеЗаполнено(СправочникОбъект.НомерСекцииДляПриходныхКассовыхОрдеров) Тогда
			СправочникОбъект.НомерСекцииДляПриходныхКассовыхОрдеров = 2;
			НужноЗаписать = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СправочникОбъект.НомерСекцииДляРасходныхКассовыхОрдеров) Тогда
			СправочникОбъект.НомерСекцииДляРасходныхКассовыхОрдеров = 2;
			НужноЗаписать = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СправочникОбъект.НомерСекцииПоУмолчаниюДляФискальныхЧеков) Тогда
			СправочникОбъект.НомерСекцииПоУмолчаниюДляФискальныхЧеков = 1;
			НужноЗаписать = Истина;
		КонецЕсли;
		
		Если НужноЗаписать Тогда
			СправочникОбъект.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнениеАналитикХозяйственныхОпераций() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		Справочники.АналитикаХозяйственныхОпераций.ЗаполнитьПредопределенные();
		Если Не ЗначениеЗаполнено(Константы.ПриоритетыРеализацииТоваров.Получить()) Тогда
			Константы.ПриоритетыРеализацииТоваров.Установить(Перечисления.ПриоритетыРеализацииТоваров.Собственный);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обновления ИБ для справочника видов контактной информации.
//
// Инструкция:
// Для каждого объекта, владельца КИ, для каждого соответствующего ему вида КИ добавить 
// строчку вида: ОбновитьВидКИ(.....). При этом,
// важен порядок в котором будут осуществляться эти вызовы, чем раньше вызов для вида КИ,
// тем выше этот вид КИ будет располагаться на форме объекта.
//
// Параметры функции УправлениеКонтактнойИнформацией.ОбновитьВидКИ:
// 1. Вид КИ - Ссылка на предопределенный вид КИ.
// 2. Тип КИ - Ссылка на перечисление
// 3. МожноИзменятьСпособРедактирования  - Определяет, можно ли в режиме Предприятие изменить способ редактирования,
//                                         например, для адресов, которые попадают в регл. отчетность, нужно
//                                         запретить возможность изменения.
// 4. РедактированиеТолькоВДиалоге       - Если установить Истина, то будет значение вида КИ можно будет
//                                         редактировать только в форме ввода (имеет смысл только для
//                                         адресов, телефонов и факсов).
// 5. АдресТолькоРоссийский              - Если установить Истина, то для адресов можно будет ввести 
//                                         только российский адрес (имеет смысл только для адресов).
// 6. Порядок                            - Определяет порядок элемента, для сортировки относительно других
//
//
Процедура ЗаполнитьСвойстваВидовКонтактнойИнформации() Экспорт
	
	// СтандартныеПодсистемы 
	// СтандартныеПодсистемы.Пользователи
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailПользователя,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, 	Истина, Ложь, Ложь, 1);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя,
		Перечисления.ТипыКонтактнойИнформации.Телефон,               	Истина, Ложь, Ложь, 2);
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.Организации
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Адрес,                 	Истина, Ложь, Истина, 3);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Адрес,                 	Истина, Ложь,   Ложь, 4);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Телефон,               	Истина, Ложь,   Ложь, 5);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Факс,                  	Истина, Ложь,   Ложь, 6);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailОрганизации,
		Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, 	Истина, Ложь,   Ложь, 7);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Адрес,                 	Истина, Ложь,   Ложь, 8);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации,
		Перечисления.ТипыКонтактнойИнформации.Другое,                	Истина, Ложь,   Ложь, 9);
	// Конец СтандартныеПодсистемы.Организации
	// Конец СтандартныеПодсистемы 

КонецПроцедуры

Процедура УстановитьПравоВыбораКартыБезПодтверждения() Экспорт
	
	УстановитьДополнительноеПраво(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьВыборКартыБезSMS, Истина);
	УстановитьДополнительноеПраво(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьВыборКартыБезEmailПодтверждения, Истина);
	
КонецПроцедуры

Процедура УстановитьТипыОборудованияУКассККМ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КассыККМ.Ссылка,
	|	КассыККМ.ПодключаемоеОборудование.ТипОборудования КАК ТипОборудования
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	НЕ КассыККМ.ТипОборудования = КассыККМ.ПодключаемоеОборудование.ТипОборудования";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ТипОборудования = Выборка.ТипОборудования;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
	КонецЦикла;
	
КонецПроцедуры

#Область Оценкапроизводительности

Функция СоздатьКлючевуюОперацию(КлючеваяОперация, ЦелевоеВремя = 1, ВыполненаСОшибкой = Ложь, Длительная = Ложь)
	
	ИмяКлючевойОперации          = КлючеваяОперация.Ключ;
	НаименованиеКлючевойОперации = КлючеваяОперация.Значение;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.КлючевыеОперации");
	ЭлементБлокировки.УстановитьЗначение("Имя", ИмяКлючевойОперации);
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	КлючевыеОперации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлючевыеОперации КАК КлючевыеОперации
	|ГДЕ
	|	КлючевыеОперации.ИмяХеш = &ИмяХеш
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	ХешMD5 = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешMD5.Добавить(ИмяКлючевойОперации);
	ИмяХеш = ХешMD5.ХешСумма;
	ИмяХеш = СтрЗаменить(Строка(ИмяХеш), " ", "");			   
	
	Запрос.УстановитьПараметр("ИмяХеш", ИмяХеш);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 			
		НовыйЭлемент = Справочники.КлючевыеОперации.СоздатьЭлемент();
		НовыйЭлемент.Имя               = ИмяКлючевойОперации;
		НовыйЭлемент.Наименование      = НаименованиеКлючевойОперации;
		НовыйЭлемент.ЦелевоеВремя      = ЦелевоеВремя;
		НовыйЭлемент.ВыполненаСОшибкой = ВыполненаСОшибкой;
		НовыйЭлемент.Длительная        = Длительная;
		НовыйЭлемент.Записать();
		КлючеваяОперацияСсылка = НовыйЭлемент.Ссылка;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		КлючеваяОперацияСсылка = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат КлючеваяОперацияСсылка;
	
КонецФункции

Функция ОтсутствуютПрофилиКлючевыхОпераций()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|   ПрофилиКлючевыхОпераций.Ссылка КАК Ссылка
	|ИЗ
	|   Справочник.ПрофилиКлючевыхОпераций КАК ПрофилиКлючевыхОпераций";
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции 

Функция ПолучитьПредставлениеМетаданных(Выборка)
	
	Возврат Лев(Выборка.ПолноеПредставление, СтрДлина(Выборка.ПолноеПредставление) - (СтрДлина(Выборка.Имя)+1));
	
КонецФункции

Процедура ЗаполнитьСтруктуруЗамеров(ОбъектМетаданных, ТаблицаШаблон, СтруктураЗамеров)
	
	Для каждого ТекущийОбъектМетаданных Из Метаданные[ОбъектМетаданных]  Цикл
		СтрокаТаблицы = ТаблицаШаблон.Добавить();
		СтрокаТаблицы.Имя                 =  ТекущийОбъектМетаданных.Имя;
		СтрокаТаблицы.ПолноеПредставление =  ТекущийОбъектМетаданных.ПолноеИмя();
		СтрокаТаблицы.Синоним             =  ТекущийОбъектМетаданных.Синоним;
	КонецЦикла;
	
	СтруктураЗамеров.Вставить(ОбъектМетаданных, ТаблицаШаблон);
	
КонецПроцедуры

Процедура СоздатьПрофилиКлючевыхОпераций(ПрофилиКлючевыхОпераций)
	
	МассивКлючевыхОпераций = Новый Массив;
	
	Для каждого КлючеваяОперация из ПрофилиКлючевыхОпераций Цикл
		МассивКлючевыхОпераций.Добавить(КлючеваяОперация.Ключ);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|    ПрофилиКлючевыхОпераций.Наименование КАК Наименование
	|ИЗ
	|    Справочник.ПрофилиКлючевыхОпераций КАК ПрофилиКлючевыхОпераций
	|ГДЕ
	|    ПрофилиКлючевыхОпераций.Наименование В(&МассивКлючевыхОпераций)";
	
	Запрос.УстановитьПараметр("МассивКлючевыхОпераций", МассивКлючевыхОпераций);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ПрофилиКлючевыхОпераций.Удалить(Выборка.Наименование); 
		КонецЦикла;
	КонецЕсли;   
	
	Если ПрофилиКлючевыхОпераций.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ПрофильКлючевойОперации из ПрофилиКлючевыхОпераций Цикл
		
		Имя = ПрофильКлючевойОперации.Ключ;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ПрофилиКлючевыхОпераций");
		Блокировка.Заблокировать();
		
		ПрофильКлючевыхОпераций = Справочники.ПрофилиКлючевыхОпераций.СоздатьЭлемент();
		ПрофильКлючевыхОпераций.Наименование = Имя;
		
		Для каждого КлючеваяОперация из ПрофильКлючевойОперации.Значение Цикл
			
			НоваяСтрокаПрофиля = ПрофильКлючевыхОпераций.КлючевыеОперацииПрофиля.Добавить();
			НоваяСтрокаПрофиля.КлючеваяОперация = СоздатьКлючевуюОперацию(КлючеваяОперация,0.1, ,);
			НоваяСтрокаПрофиля.Приоритет        = 1;
			НоваяСтрокаПрофиля.ЦелевоеВремя     = 0.1;
			
		КонецЦикла;
		
		ПрофильКлючевыхОпераций.КлючевыеОперацииПрофиля.Сортировать("КлючеваяОперация");
		ПрофильКлючевыхОпераций.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьКлючевыеОперации() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка  
		
		КомандыРМК = Новый Массив;
		КомандыРМК.Добавить("НапечататьОтчетБезГашения");
		КомандыРМК.Добавить("ЗавершениеОплатыИСозданиеЧековРМК");
		КомандыРМК.Добавить("ПодготовкаОплатыРМК");
		КомандыРМК.Добавить("ВводПодарочныхСертификатов");
		КомандыРМК.Добавить("НазначитьАвтоматическиеСкидкиКлиент");
		КомандыРМК.Добавить("ВыборКассыККМ");
		КомандыРМК.Добавить("ПереходНаФормуПоиска");
		КомандыРМК.Добавить("ВыборДокументРасчета");
		КомандыРМК.Добавить("ОтменитьСкидки");
		КомандыРМК.Добавить("ОтменитьОплатуБонусами");
		КомандыРМК.Добавить("ПросмотрНакоплений");
		КомандыРМК.Добавить("ПродажаПоЗаказу");
		КомандыРМК.Добавить("УправляемыеСкидки");
		КомандыРМК.Добавить("ВвестиИнформационнуюКарту");
		КомандыРМК.Добавить("ЗаменитьПрава");
		КомандыРМК.Добавить("ВвестиВнесениеДенег");
		КомандыРМК.Добавить("БыстрыеТоварыОткрытие");
		КомандыРМК.Добавить("ПродолжитьЧек");
		КомандыРМК.Добавить("ОтложитьЧек");
		КомандыРМК.Добавить("УстановкиКартыЗавершение");
		КомандыРМК.Добавить("АннулироватьЧек");
		КомандыРМК.Добавить("ВыемкаДенегЗавершение");
		КомандыРМК.Добавить("ВыборЧекаПриВозврате");
		
		ПрофилиКлючевыхОпераций = Новый Соответствие;
		
		ПредставлениеПрофиля   = "Обработки (команды)";
		КлючевыеОперации        = Новый Соответствие;
		
		Для каждого ТекущаяКоманда Из КомандыРМК Цикл  
			
			КлючевыеОперации.Вставить("Обработка.РМКУправляемыйРежим.Форма.Форма.Команда."+ ТекущаяКоманда,
			"Обработка ""РМК(Управляемый режим)"""+"/Команда ("+ТекущаяКоманда+")");
			
		КонецЦикла;
		
		КлючевыеОперации.Вставить("Обработка.РМКУправляемыйРежим.Форма.Форма.ВнешнееСобытие",
		"Обработка ""РМК(Управляемый режим)"""+"/(Внешнее событие)");
		
		КлючевыеОперации.Вставить("Обработка.ЗакрытиеКассовойСмены.Форма.Форма.Команда.ЗакрытьСмену",
		"Обработка ""Закрытие кассовой смены"" /Команда (Закрыть смену)");
		
		КлючевыеОперации.Вставить("Обработка.АнализПродажФормированиеЗаказов.Форма.Форма.Команда.Рассчитать",
		"Обработка ""Анализ продаж формирование заказов"" /Команда (Рассчитать)");
		
		КлючевыеОперации.Вставить("Обработка.АнализПродажФормированиеЗаказов.Форма.Форма.Команда.СоздатьДокументыВозвратПоставщику",
		"Обработка ""Анализ продаж формирование заказов"" /Команда (СоздатьДокументыВозвратПоставщику)"); 
		
		КлючевыеОперации.Вставить("Обработка.АнализПродажФормированиеЗаказов.Форма.Форма.Команда.СоздатьДокументыЗаказНаПеремещение",
		"Обработка ""Анализ продаж формирование заказов"" /Команда (СоздатьДокументыЗаказНаПеремещение)");
		
		КлючевыеОперации.Вставить("Обработка.АнализПродажФормированиеЗаказов.Форма.Форма.Команда.СоздатьДокументыЗаказНаПеремещениеВозврат",
		"Обработка ""Анализ продаж формирование заказов"" /Команда (СоздатьДокументыЗаказНаПеремещениеВозврат)");
		
		КлючевыеОперации.Вставить("Обработка.АнализПродажФормированиеЗаказов.Форма.Форма.Команда.СоздатьДокументыЗаказПоставщику",
		"Обработка ""Анализ продаж формирование заказов"" /Команда (СоздатьДокументыЗаказПоставщику)");
		
		КлючевыеОперации.Вставить("Обработка.АнализПродажФормированиеЗаказов.Форма.Форма.Команда.ЗаполнитьЗаказыЗакрытие",
		"Обработка ""Анализ продаж формирование заказов"" /Команда (ЗаполнитьЗаказыЗакрытие)" );
		
		КлючевыеОперации.Вставить("Обработка.АнализПродажФормированиеЗаказов.Форма.Форма.Команда.ВыполнитьЗакрытиеЗаказов",
		"Обработка ""Анализ продаж формирование заказов"" /Команда (ВыполнитьЗакрытиеЗаказов)" );
		
		КлючевыеОперации.Вставить("Обработка.НастройкаРаспределенияТоваровПоСкладамИОрганизациям.Форма.Форма.Команда.ЗаполнитьПоПоступлению",
		"Обработка ""Настройка распределения товаров по складам и организациям"" /Команда (ЗаполнитьПоПоступлению)" );
		
		КлючевыеОперации.Вставить("Обработка.НастройкаРаспределенияТоваровПоСкладамИОрганизациям.Форма.Форма.Команда.ПрименитьИзменения",
		"Обработка ""Настройка распределения товаров по складам и организациям"" /Команда (ПрименитьИзменения)" );
		
		ПрофилиКлючевыхОпераций.Вставить(ПредставлениеПрофиля, КлючевыеОперации); 
		
		МассивИсключаемыхДокументовПроведение = Новый Массив; 
		
		МассивИсключаемыхДокументовПроведение.Добавить("УдалитьПроизвольныйЭД");         
		МассивИсключаемыхДокументовПроведение.Добавить("ЧекЕГАИСВозврат");   
		МассивИсключаемыхДокументовПроведение.Добавить("ЧекЕГАИС");
		МассивИсключаемыхДокументовПроведение.Добавить("УдалитьВскрытиеТарыЕГАИС");  
		МассивИсключаемыхДокументовПроведение.Добавить("УведомлениеОСписанииКиЗГИСМ");
		МассивИсключаемыхДокументовПроведение.Добавить("УведомлениеОПоступленииМаркированныхТоваровГИСМ");
		МассивИсключаемыхДокументовПроведение.Добавить("УведомлениеОВвозеМаркированныхТоваровИзЕАЭСГИСМ");
		МассивИсключаемыхДокументовПроведение.Добавить("УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ");
		МассивИсключаемыхДокументовПроведение.Добавить("УведомлениеОбИмпортеМаркированныхТоваровГИСМ");
		МассивИсключаемыхДокументовПроведение.Добавить("ТТНИсходящаяЕГАИС");
		МассивИсключаемыхДокументовПроведение.Добавить("ТТНВходящаяЕГАИС");
		МассивИсключаемыхДокументовПроведение.Добавить("ПеремаркировкаТоваровГИСМ");
		МассивИсключаемыхДокументовПроведение.Добавить("СправкиСПАРКРиски");
		МассивИсключаемыхДокументовПроведение.Добавить("ПередачаВРегистр2ЕГАИС");
		МассивИсключаемыхДокументовПроведение.Добавить("ОтчетЕГАИС");
		МассивИсключаемыхДокументовПроведение.Добавить("ОстаткиЕГАИС");
		МассивИсключаемыхДокументовПроведение.Добавить("МаркировкаТоваровГИСМ");
		МассивИсключаемыхДокументовПроведение.Добавить("ЗаявкаНаВыпускКиЗГИСМ");
		МассивИсключаемыхДокументовПроведение.Добавить("ЗапросАкцизныхМарокЕГАИС");
		МассивИсключаемыхДокументовПроведение.Добавить("ВозвратИзРегистра2ЕГАИС");
		МассивИсключаемыхДокументовПроведение.Добавить("АктСписанияЕГАИС");
		МассивИсключаемыхДокументовПроведение.Добавить("АктПостановкиНаБалансЕГАИС");
		
		МассивИсключаемыхДокументовСоздание = Новый Массив;
		
		МассивИсключаемыхДокументовСоздание.Добавить("УдалитьПроизвольныйЭД");
		МассивИсключаемыхДокументовСоздание.Добавить("ЧекЕГАИСВозврат");   
		МассивИсключаемыхДокументовСоздание.Добавить("ЧекЕГАИС");
		МассивИсключаемыхДокументовСоздание.Добавить("УдалитьПроизвольныйЭД");         
		МассивИсключаемыхДокументовСоздание.Добавить("ЧекЕГАИСВозврат");   
		МассивИсключаемыхДокументовСоздание.Добавить("ЧекЕГАИС");
		МассивИсключаемыхДокументовСоздание.Добавить("УдалитьВскрытиеТарыЕГАИС");  
		МассивИсключаемыхДокументовСоздание.Добавить("УведомлениеОСписанииКиЗГИСМ");
		МассивИсключаемыхДокументовСоздание.Добавить("УведомлениеОПоступленииМаркированныхТоваровГИСМ");
		МассивИсключаемыхДокументовСоздание.Добавить("УведомлениеОВвозеМаркированныхТоваровИзЕАЭСГИСМ");
		МассивИсключаемыхДокументовСоздание.Добавить("УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ");
		МассивИсключаемыхДокументовСоздание.Добавить("УведомлениеОбИмпортеМаркированныхТоваровГИСМ");
		МассивИсключаемыхДокументовСоздание.Добавить("ТТНИсходящаяЕГАИС");
		МассивИсключаемыхДокументовСоздание.Добавить("ТТНВходящаяЕГАИС");
		МассивИсключаемыхДокументовСоздание.Добавить("ПеремаркировкаТоваровГИСМ");
		МассивИсключаемыхДокументовСоздание.Добавить("СправкиСПАРКРиски");
		МассивИсключаемыхДокументовСоздание.Добавить("ПередачаВРегистр2ЕГАИС");
		МассивИсключаемыхДокументовСоздание.Добавить("ОтчетЕГАИС");
		МассивИсключаемыхДокументовСоздание.Добавить("ОстаткиЕГАИС");
		МассивИсключаемыхДокументовСоздание.Добавить("МаркировкаТоваровГИСМ");
		МассивИсключаемыхДокументовСоздание.Добавить("ЗаявкаНаВыпускКиЗГИСМ");
		МассивИсключаемыхДокументовСоздание.Добавить("ЗапросАкцизныхМарокЕГАИС");
		МассивИсключаемыхДокументовСоздание.Добавить("ВозвратИзРегистра2ЕГАИС");
		МассивИсключаемыхДокументовСоздание.Добавить("АктСписанияЕГАИС");
		МассивИсключаемыхДокументовСоздание.Добавить("АктПостановкиНаБалансЕГАИС"); 
		МассивИсключаемыхДокументовСоздание.Добавить("АктОРасхожденияхПриПриемкеТоваров");         
		МассивИсключаемыхДокументовСоздание.Добавить("ВводНачальныхОстатковУзла");              
		МассивИсключаемыхДокументовСоздание.Добавить("ВнесениеДенежныхСредствВКассуККМ");         
		МассивИсключаемыхДокументовСоздание.Добавить("ВыемкаДенежныхСредствИзКассыККМ");
		МассивИсключаемыхДокументовСоздание.Добавить("КассоваяСмена");             
		МассивИсключаемыхДокументовСоздание.Добавить("ОрдерНаОтражениеРезультатовПересчетовТоваров");  
		МассивИсключаемыхДокументовСоздание.Добавить("ПересчетТоваров");  
		МассивИсключаемыхДокументовСоздание.Добавить("ПриходныйОрдерНаТовары");  
		МассивИсключаемыхДокументовСоздание.Добавить("РасходныйОрдерНаТовары");  
		МассивИсключаемыхДокументовСоздание.Добавить("СверткаИзУправляющейСистемы"); 
		МассивИсключаемыхДокументовСоздание.Добавить("СчетФактураВыданный");  
		МассивИсключаемыхДокументовСоздание.Добавить("СчетФактураПолученный");
		МассивИсключаемыхДокументовСоздание.Добавить("ТабельУчетаРабочегоВремени");  
		МассивИсключаемыхДокументовСоздание.Добавить("УдалитьКассоваяСмена");
		МассивИсключаемыхДокументовСоздание.Добавить("ЭлектронныйДокументВходящий"); 
		МассивИсключаемыхДокументовСоздание.Добавить("ЭлектронныйДокументИсходящий");        
		
		МассивСправочниковСоздание = Новый Массив; 
		
		МассивСправочниковСоздание.Добавить("АналитикаХозяйственныхОпераций");
		МассивСправочниковСоздание.Добавить("БанковскиеСчета");  
		МассивСправочниковСоздание.Добавить("УдалитьБанковскиеСчетаОрганизаций");      
		МассивСправочниковСоздание.Добавить("БонусныеПрограммыЛояльности");    
		МассивСправочниковСоздание.Добавить("ВидыДисконтныхКарт");             
		МассивСправочниковСоздание.Добавить("ВидыНоменклатуры");              
		МассивСправочниковСоздание.Добавить("ВидыЦен");                       
		МассивСправочниковСоздание.Добавить("ВнешниеКомпоненты");       
		МассивСправочниковСоздание.Добавить("ВнешниеПользователи");
		МассивСправочниковСоздание.Добавить("ГруппыДоступа");         
		МассивСправочниковСоздание.Добавить("ГруппыПользователей");     
		МассивСправочниковСоздание.Добавить("ДоговорыКонтрагентов");   
		МассивСправочниковСоздание.Добавить("ДрайверыОборудования");          
		МассивСправочниковСоздание.Добавить("ИнтервалыРаботыМагазинов");       
		МассивСправочниковСоздание.Добавить("ИнформационныеКарты");           
		МассивСправочниковСоздание.Добавить("Кассы");
		МассивСправочниковСоздание.Добавить("КассыККМ");         
		МассивСправочниковСоздание.Добавить("Контрагенты");
		МассивСправочниковСоздание.Добавить("ЛицензииПоставщиковАлкогольнойПродукции");  
		МассивСправочниковСоздание.Добавить("Магазины");
		МассивСправочниковСоздание.Добавить("НаборыДополнительныхРеквизитовИСведений");   
		МассивСправочниковСоздание.Добавить("НаборыУпаковок");                             
		МассивСправочниковСоздание.Добавить("НастройкиЗагрузкиДанныхСчетчиковПодсчетаПосетителей");
		МассивСправочниковСоздание.Добавить("НастройкиРаспределенияВыручкиПоСекциямФР");     
		МассивСправочниковСоздание.Добавить("НастройкиРМК");
		МассивСправочниковСоздание.Добавить("Номенклатура");
		МассивСправочниковСоздание.Добавить("Организации");
		МассивСправочниковСоздание.Добавить("ОчередьЗаданийОбластейДанных");
		МассивСправочниковСоздание.Добавить("ПалитраБыстрыхТоваров");
		МассивСправочниковСоздание.Добавить("ПапкиФайлов");
		МассивСправочниковСоздание.Добавить("ПодключаемоеОборудование");
		МассивСправочниковСоздание.Добавить("ПолитикиУчетаСерий");
		МассивСправочниковСоздание.Добавить("Пользователи");
		МассивСправочниковСоздание.Добавить("ПравилаНачисленияБонусныхБаллов");
		МассивСправочниковСоздание.Добавить("ПравилаОбменаСПодключаемымОборудованием");
		МассивСправочниковСоздание.Добавить("ПравилаОтбораТоваров");
		МассивСправочниковСоздание.Добавить("ПравилаРасчетаПремий");
		МассивСправочниковСоздание.Добавить("ПравилаЦенообразования");
		МассивСправочниковСоздание.Добавить("ПричиныОтменыЗаказовПокупателей");
		МассивСправочниковСоздание.Добавить("ПрофилиГруппДоступа");
		МассивСправочниковСоздание.Добавить("ПрофилиКлючевыхОпераций");
		МассивСправочниковСоздание.Добавить("РаботаВыполняемаяСотрудниками");
		МассивСправочниковСоздание.Добавить("РабочиеМеста");
		МассивСправочниковСоздание.Добавить("РассылкиОтчетов");
		МассивСправочниковСоздание.Добавить("РолиИсполнителей");
		МассивСправочниковСоздание.Добавить("Сайты");
		МассивСправочниковСоздание.Добавить("СегментыНоменклатуры");
		МассивСправочниковСоздание.Добавить("СерииНоменклатуры");
		МассивСправочниковСоздание.Добавить("СерийныеНомера");
		МассивСправочниковСоздание.Добавить("СкидкиНаценки");
		МассивСправочниковСоздание.Добавить("Склады");
		МассивСправочниковСоздание.Добавить("СтатьиДвиженияДенежныхСредств");
		МассивСправочниковСоздание.Добавить("УпаковкиНоменклатуры");
		МассивСправочниковСоздание.Добавить("УсловияНачисленияПремийПоЛичнымПродажам");
		МассивСправочниковСоздание.Добавить("УсловияПредоставленияСкидокНаценок");
		МассивСправочниковСоздание.Добавить("ФизическиеЛица");
		МассивСправочниковСоздание.Добавить("ФорматыМагазинов");
		МассивСправочниковСоздание.Добавить("ХранилищеШаблонов");
		МассивСправочниковСоздание.Добавить("ЦеновыеГруппы");
		МассивСправочниковСоздание.Добавить("ШаблоныМагнитныхКарт");
		МассивСправочниковСоздание.Добавить("ШаблоныСообщенийПрисоединенныеФайлы");
		МассивСправочниковСоздание.Добавить("ШтрихкодыУпаковокТоваров");
		МассивСправочниковСоздание.Добавить("ЭквайринговыеТерминалы");
		
		Типы = Новый Массив;
		Типы.Добавить(Тип("Строка"));
		
		КлассификаторСтроки = Новый КвалификаторыСтроки(150);
		
		
		МетаданныеДляЗамеров = Новый Массив;
		МетаданныеДляЗамеров.Добавить("ОбщиеФормы");
		МетаданныеДляЗамеров.Добавить("Справочники");
		МетаданныеДляЗамеров.Добавить("Документы");
		МетаданныеДляЗамеров.Добавить("Обработки");
		МетаданныеДляЗамеров.Добавить("РегистрыСведений");
		
		СтруктураЗамеров = Новый Структура;
		
		Для каждого ТекущийОбъект Из МетаданныеДляЗамеров Цикл
			
			ТаблицаШаблон = Новый ТаблицаЗначений;
			ТаблицаШаблон.Колонки.Добавить("Имя", Новый ОписаниеТипов(Типы,,,,КлассификаторСтроки));
			ТаблицаШаблон.Колонки.Добавить("ПолноеПредставление", Новый ОписаниеТипов(Типы));
			ТаблицаШаблон.Колонки.Добавить("Синоним", Новый ОписаниеТипов(Типы));
			
			ЗаполнитьСтруктуруЗамеров(ТекущийОбъект, ТаблицаШаблон, СтруктураЗамеров);
			
		КонецЦикла;
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос = Новый Запрос;  
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("ТаблицаДокументов",             СтруктураЗамеров.Документы); 
		Запрос.УстановитьПараметр("ТаблицаСправочников",           СтруктураЗамеров.Справочники); 
		Запрос.УстановитьПараметр("ИсключитьДокументыПроведение",  МассивИсключаемыхДокументовПроведение);
		Запрос.УстановитьПараметр("ИсключитьДокументыСоздание",    МассивИсключаемыхДокументовСоздание);
		Запрос.УстановитьПараметр("МассивСправочниковСоздание",    МассивСправочниковСоздание);
		
		Запрос.Текст =  "ВЫБРАТЬ
		|   РегистрируемыеДокументы.Имя КАК Имя,
		|   РегистрируемыеДокументы.Синоним КАК Синоним,
		|   РегистрируемыеДокументы.ПолноеПредставление КАК ПолноеПредставление
		|ПОМЕСТИТЬ ВсеДокументы
		|ИЗ
		|   &ТаблицаДокументов КАК РегистрируемыеДокументы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|   ВсеДокументы.Имя КАК Имя,
		|   ВсеДокументы.Синоним КАК Синоним,
		|   ВсеДокументы.ПолноеПредставление КАК ПолноеПредставление
		|ПОМЕСТИТЬ ДокументыПроведение
		|ИЗ
		|   ВсеДокументы КАК ВсеДокументы
		|ГДЕ
		|   НЕ ВсеДокументы.Имя В (&ИсключитьДокументыПроведение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|   втДокументы.Имя КАК Имя,
		|   втДокументы.Синоним КАК Синоним,
		|   втДокументы.ПолноеПредставление КАК ПолноеПредставление
		|ПОМЕСТИТЬ ДокументыСоздание
		|ИЗ
		|   ВсеДокументы КАК втДокументы
		|ГДЕ
		|   НЕ втДокументы.Имя В (&ИсключитьДокументыСоздание)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|   РегистрируемыеСправочники.Имя КАК Имя,
		|   РегистрируемыеСправочники.Синоним КАК Синоним,
		|   РегистрируемыеСправочники.ПолноеПредставление КАК ПолноеПредставление
		|ПОМЕСТИТЬ ВсеСправочники
		|ИЗ
		|   &ТаблицаСправочников КАК РегистрируемыеСправочники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|   втСправочники.Имя КАК Имя,
		|   втСправочники.Синоним КАК Синоним,
		|   втСправочники.ПолноеПредставление КАК ПолноеПредставление
		|ПОМЕСТИТЬ СправочникиЗапись
		|ИЗ
		|   ВсеСправочники КАК втСправочники
		|ГДЕ
		|   втСправочники.Имя В(&МассивСправочниковСоздание)";
		
		Результат = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		
		Если ТипЗнч(Результат) = Тип("Массив") Тогда
			
			ПредставлениеПрофиля =  "Документы (Запись/Проведение/Команды)"; 
			КлючевыеОперации = Новый Соответствие;
			
			Выборка = Результат[1].Выбрать();          
			Пока Выборка.Следующий() Цикл
				
				КлючевыеОперации.Вставить(Выборка.ПолноеПредставление+".ФормаДокумента.Запись",
				"Документ """+Выборка.Синоним+""" (Проведение/Запись)");
				
			КонецЦикла;
			
			КлючевыеОперации.Вставить("Документ.ЧекККМ.Форма.ФормаДокумента.Команда.ПробитьЧек", 
			"Документ Чек ККМ /Команда(ПробитьЧек)");
			КлючевыеОперации.Вставить("Документ.РегистрацияБезналичнойОплаты.Форма.ФормаДокумента.Команда.ПробитьЧек", 
			"Документ Регистрация безналичной оплаты /Команда(ПробитьЧек)"); 
			КлючевыеОперации.Вставить("Документ.РеализацияТоваров.Форма.ФормаДокумента.Команда.ПробитьЧек", 
			"Документ Реализация товаров /Команда(ПробитьЧек)");
			КлючевыеОперации.Вставить("Документ.РасходныйКассовыйОрдер.Форма.ФормаДокумента.Команда.ПробитьЧек",
			"Документ Расходный кассовый ордер /Команда(ПробитьЧек)"); 
			КлючевыеОперации.Вставить("Документ.ПриходныйКассовыйОрдер.Форма.ФормаДокумента.Команда.ПробитьЧек",
			"Документ Приходный кассовый ордер /Команда(ПробитьЧек)");    
			КлючевыеОперации.Вставить("Документ.ОплатаОтПокупателяПлатежнойКартой.Форма.ФормаДокумента.Команда.ПробитьЧек",
			"Документ Оплата от покупателя платежной картой /Команда(ПробитьЧек)");
			КлючевыеОперации.Вставить("Документ.ВозвратТоваровОтПокупателя.Форма.ФормаДокумента.Команда.ПробитьЧек",
			"Документ Возврат товаров от покупателя /Команда(ПробитьЧек)");
			
			ПрофилиКлючевыхОпераций.Вставить(ПредставлениеПрофиля, КлючевыеОперации);
			
			ПредставлениеПрофиля =  "Документы (Создание)";                
			КлючевыеОперации      = Новый Соответствие;  
			
			Выборка = Результат[2].Выбрать();          
			Пока Выборка.Следующий() Цикл
				
				КлючевыеОперации.Вставить(Выборка.ПолноеПредставление+".Форма.ФормаДокумента.СозданиеНового",
				"Документ """+Выборка.Синоним+""" (создание)");
				
			КонецЦикла;
			
			КлючевыеОперации.Вставить("ЧекККМПроведение", 
			"Документ Чек ККМ /(Проведение)");
			
			КлючевыеОперации.Вставить("РеализацияТоваровПроведение", 
			"Документ Реализация товаров /(Проведение)");
			
			КлючевыеОперации.Вставить("ОтчетОРозничныхПродажахПроведение", 
			"Документ Отчет о розничных продажах /(Проведение)");
			
			КлючевыеОперации.Вставить("УстановкаСебестоимостиПроведение", 
			"Документ Установка себестоимости /(Проведение)");
			
			КлючевыеОперации.Вставить("ПеремещениеТоваровПроведение", 
			"Документ Перемещение товаров /(Проведение)");
			
			КлючевыеОперации.Вставить("УстановкаЦенНоменклатурыПроведение", 
			"Документ Установка цен номенклатуры /(Проведение)");
			
			ПрофилиКлючевыхОпераций.Вставить(ПредставлениеПрофиля, КлючевыеОперации);
			
			ПредставлениеПрофиля = "Справочники (Запись)";    
			КлючевыеОперации      = Новый Соответствие;
			
			Выборка = Результат[3].Выбрать();          
			Пока Выборка.Следующий() Цикл
				
				КлючевыеОперации.Вставить(Выборка.ПолноеПредставление+".Запись",
				"Справочник """+Выборка.Синоним+"""(запись)");
			КонецЦикла;            
			
			ПрофилиКлючевыхОпераций.Вставить(ПредставлениеПрофиля, КлючевыеОперации);
			
			ПредставлениеПрофиля = "Справочники (Создание)";    
			КлючевыеОперации      = Новый Соответствие;
			
			Выборка = Результат[4].Выбрать();          
			Пока Выборка.Следующий() Цикл
				
				
				КлючевыеОперации.Вставить(Выборка.ПолноеПредставление+".Форма.ФормаЭлемента.СозданиеНового",
				"Справочник """+Выборка.Синоним+"""(создание)");
				
			КонецЦикла;            
			
			
			ПрофилиКлючевыхОпераций.Вставить(ПредставлениеПрофиля, КлючевыеОперации);
			
		КонецЕсли;  
		
		ИсключитьСправочники = Новый Массив;
		ИсключитьСправочники.Добавить("ВидыМехаГИСМ");
		ИсключитьСправочники.Добавить("ГИСМПрисоединенныеФайлы");       
		ИсключитьСправочники.Добавить("ЕГАИСПрисоединенныеФайлы");
		ИсключитьСправочники.Добавить("КлассификаторАлкогольнойПродукцииЕГАИС");
		ИсключитьСправочники.Добавить("КлассификаторОрганизацийЕГАИС");
		ИсключитьСправочники.Добавить("Справки1ЕГАИС");
		ИсключитьСправочники.Добавить("Справки2ЕГАИС");
		ИсключитьСправочники.Добавить("СправкиСПАРКРискиПрисоединенныеФайлы");
		ИсключитьСправочники.Добавить("ТипыСобытийСПАРКРиски");
		ИсключитьСправочники.Добавить("УдалитьВидыОбъектовЕГАИС");
		ИсключитьСправочники.Добавить("Заметки");
		ИсключитьСправочники.Добавить("ЛентыНовостей");
		
		ИсключитьОбщиеФормы = Новый Массив;
		ИсключитьОбщиеФормы.Добавить("ЗаписьПароляСертификатаГИСМ");
		ИсключитьОбщиеФормы.Добавить("НастройкаОбменаГИСМ");       
		ИсключитьОбщиеФормы.Добавить("ПодборИзКлассификатораВидовПродукцииЕГАИС");
		ИсключитьОбщиеФормы.Добавить("РезультатВыполненияОбменаЕГАИС");
		ИсключитьОбщиеФормы.Добавить("ФормаВводаАкцизнойМарки");
		ИсключитьОбщиеФормы.Добавить("ФормаВыбораТипаАкцизнойМаркиЕГАИС");
		ИсключитьОбщиеФормы.Добавить("ФормированиеИсходящегоЗапросаЕГАИС");
		ИсключитьОбщиеФормы.Добавить("ДополнительныеОтчетыИОбработки");
		ИсключитьОбщиеФормы.Добавить("ФормаОтчета");
		ИсключитьОбщиеФормы.Добавить("ВопросОбУстановкеРасширенияРаботыСКриптографией");
		ИсключитьОбщиеФормы.Добавить("СохранениеВместеСЭлектроннойПодписью");
		ИсключитьОбщиеФормы.Добавить("ФормаНастроекОтчета");
		ИсключитьОбщиеФормы.Добавить("ЭлектроннаяПодпись");
		
		ИсключитьОбработки = Новый Массив;
		ИсключитьОбработки.Добавить("Панель1СМаркировка");
		ИсключитьОбработки.Добавить("ПанельАдминистрирования1СМаркировка");       
		ИсключитьОбработки.Добавить("ПанельОбменСЕГАИС");
		ИсключитьОбработки.Добавить("ПодтверждениеПоступившихКиЗГИСМ");
		ИсключитьОбработки.Добавить("ПроверкаИПодборАлкогольнойПродукцииЕГАИС");
		ИсключитьОбработки.Добавить("РаботаСАкцизнымиМаркамиЕГАИС");
		ИсключитьОбработки.Добавить("СопоставлениеКлассификаторовЕГАИС");
		ИсключитьОбработки.Добавить("СопоставлениеНоменклатурыЕГАИС");
		ИсключитьОбработки.Добавить("СправкаСПАРКРиски");
		ИсключитьОбработки.Добавить("ТекущиеДелаПоЭДО");
		ИсключитьОбработки.Добавить("Подключение1СТакском");
		ИсключитьОбработки.Добавить("ПанельАдминистрированияЭДО");
		ИсключитьОбработки.Добавить("ПанельАдминистрированияБСП");
		ИсключитьОбработки.Добавить("КартаМаршрутаБизнесПроцесса");
		ИсключитьОбработки.Добавить("СопоставлениеОрганизацийЕГАИСРТ");
		
		ИсключитьРегистрыСведений = Новый Массив;
		ИсключитьРегистрыСведений.Добавить("АкцизныеМаркиЕГАИС");
		ИсключитьРегистрыСведений.Добавить("ВерсииОбъектов"); 
		ИсключитьРегистрыСведений.Добавить("ИндексыСПАРКРиски");
		ИсключитьРегистрыСведений.Добавить("ПроверкаИПодборАлкогольнойПродукцииЕГАИС");
		ИсключитьРегистрыСведений.Добавить("РаботаСАкцизнымиМаркамиЕГАИС");
		ИсключитьРегистрыСведений.Добавить("КонтрагентыНаМониторингеСПАРКРиски");        
		ИсключитьРегистрыСведений.Добавить("НастройкиОбменаЕГАИС");
		ИсключитьРегистрыСведений.Добавить("ОрганизацииДляОбменаГИСМ");
		ИсключитьРегистрыСведений.Добавить("ОчередьПередачиДанныхГИСМ");
		ИсключитьРегистрыСведений.Добавить("ОчередьПередачиДанныхЕГАИС");
		ИсключитьРегистрыСведений.Добавить("ОчередьПолученияДанныхГИСМ");
		ИсключитьРегистрыСведений.Добавить("ОчередьПолученияКвитанцийОФиксацииГИСМ");
		ИсключитьРегистрыСведений.Добавить("СвойстваКонтрагентовСПАРКРиски");
		ИсключитьРегистрыСведений.Добавить("СобытияМониторингаСПАРКРиски");
		ИсключитьРегистрыСведений.Добавить("СтатусыДокументовЕГАИС");
		ИсключитьРегистрыСведений.Добавить("СтатусыЗаявокНаВыпускКиЗГИСМ");
		ИсключитьРегистрыСведений.Добавить("СтатусыИнформированияГИСМ");
		ИсключитьРегистрыСведений.Добавить("СтатусыОформленияДокументовЕГАИС");
		ИсключитьРегистрыСведений.Добавить("УдалитьПротоколОбменаЕГАИС");
		ИсключитьРегистрыСведений.Добавить("УдалитьСоответствиеНоменклатурыЕГАИС");
		ИсключитьРегистрыСведений.Добавить("УдалитьСоответствиеОрганизацийЕГАИС");
		ИсключитьРегистрыСведений.Добавить("УдалитьФорматыОбменаЕГАИС");
		ИсключитьРегистрыСведений.Добавить("НапоминанияПользователя");
		ИсключитьРегистрыСведений.Добавить("ОстаткиАлкогольнойПродукцииЕГАИС");
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("ИсключитьСправочники",         ИсключитьСправочники);
		Запрос.УстановитьПараметр("ТаблицаОбщиеФормы",            СтруктураЗамеров.ОбщиеФормы);
		Запрос.УстановитьПараметр("ТаблицаОбработки",             СтруктураЗамеров.Обработки);
		Запрос.УстановитьПараметр("ТаблицаРегистрыСведений",      СтруктураЗамеров.РегистрыСведений);
		Запрос.УстановитьПараметр("ИсключитьОбщиеФормы",          ИсключитьОбщиеФормы);
		Запрос.УстановитьПараметр("ИсключитьРегистрыСведений",    ИсключитьРегистрыСведений);
		Запрос.УстановитьПараметр("ИсключитьОбработки",           ИсключитьОбработки);
		
		Запрос.Текст =  "ВЫБРАТЬ
		|   ДокументыПроведение.Имя КАК Имя,
		|   ДокументыПроведение.Синоним КАК Синоним,
		|   ДокументыПроведение.ПолноеПредставление КАК ПолноеПредставление,
		|   ""Документы"" КАК ОбъектМетаданных,
		|   ""Документ"" КАК ПредставлениеМетаданных
		|ПОМЕСТИТЬ ФормыДокументов
		|ИЗ
		|   ДокументыПроведение КАК ДокументыПроведение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|   РегистрируемыеСправочники.Имя КАК Имя,
		|   РегистрируемыеСправочники.Синоним КАК Синоним,
		|   РегистрируемыеСправочники.ПолноеПредставление КАК ПолноеПредставление,
		|   ""Справочники"" КАК ОбъектМетаданных,
		|   ""Справочник"" КАК ПредставлениеМетаданных
		|ПОМЕСТИТЬ ФормыСправочников
		|ИЗ
		|   ВсеСправочники КАК РегистрируемыеСправочники
		|ГДЕ
		|   НЕ РегистрируемыеСправочники.Имя В (&ИсключитьСправочники)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|   ОбщиеФормы.Имя КАК Имя,
		|   ОбщиеФормы.Синоним КАК Синоним,
		|   ОбщиеФормы.ПолноеПредставление КАК ПолноеПредставление,
		|   ""ОбщиеФормы"" КАК ОбъектМетаданных,
		|   ""Общая форма"" КАК ПредставлениеМетаданных
		|ПОМЕСТИТЬ ВсеОбщиеФормы
		|ИЗ
		|   &ТаблицаОбщиеФормы КАК ОбщиеФормы
		|ГДЕ
		|   НЕ ОбщиеФормы.Имя В (&ИсключитьОбщиеФормы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|   Обработки.Имя КАК Имя,
		|   Обработки.Синоним КАК Синоним,
		|   Обработки.ПолноеПредставление КАК ПолноеПредставление,
		|   ""Обработки"" КАК ОбъектМетаданных,
		|   ""Обработка"" КАК ПредставлениеМетаданных
		|ПОМЕСТИТЬ Обработки
		|ИЗ
		|   &ТаблицаОбработки КАК Обработки
		|ГДЕ
		|   НЕ Обработки.Имя В (&ИсключитьОбработки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|   РегистрыСведений.Имя КАК Имя,
		|   РегистрыСведений.Синоним КАК Синоним,
		|   РегистрыСведений.ПолноеПредставление КАК ПолноеПредставление,
		|   ""РегистрыСведений"" КАК ОбъектМетаданных,
		|   ""Регистр сведений"" КАК ПредставлениеМетаданных
		|ПОМЕСТИТЬ РегистрыСведений
		|ИЗ
		|   &ТаблицаРегистрыСведений КАК РегистрыСведений
		|ГДЕ
		|   НЕ РегистрыСведений.Имя В (&ИсключитьРегистрыСведений)";
		
		
		Результаты = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		
		
		ПредставлениеПрофиля = "Интерфейсы"; 
		КлючевыеОперации      = Новый Соответствие;
		
		Для каждого Результат Из Результаты Цикл
			Выборка = Результат.Выбрать();          
			Пока Выборка.Следующий() Цикл                   
				ОбъектМетаданных = Выборка.ОбъектМетаданных;
				Если ОбъектМетаданных = "ОбщиеФормы" Тогда
					
					ПредставлениеМетаданных =  ПолучитьПредставлениеМетаданных(Выборка);
					
					КлючевыеОперации.Вставить(ПредставлениеМетаданных +"."+Выборка.Имя+".Открытие",
					Выборка.ПредставлениеМетаданных +" """+Выборка.Синоним+""" "+Выборка.Синоним+"/(открытие)");
					
				Иначе
					Для каждого ТекущаяФорма Из Метаданные[ОбъектМетаданных][Выборка.Имя].Формы Цикл
						
						КлючевыеОперации.Вставить(Выборка.ПолноеПредставление+".Форма."+ТекущаяФорма.Имя+".Открытие",
						Выборка.ПредставлениеМетаданных+" """+Выборка.Синоним+""" "+ТекущаяФорма.Синоним+"/(открытие)");
						
					КонецЦикла;
				КонецЕсли;                              
			КонецЦикла;            
		КонецЦикла; 
		
		
		ПрофилиКлючевыхОпераций.Вставить(ПредставлениеПрофиля, КлючевыеОперации);
		СоздатьПрофилиКлючевыхОпераций(ПрофилиКлючевыхОпераций);
		
		ОценкаПроизводительности.СоздатьКлючевуюОперацию("ОбщееВремяЗапускаПриложения");
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

Процедура ИзменитьТоварыНаСкладахВРамкахРезерва(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахТовары.Ссылка КАК Ссылка,
	|	ОтчетОРозничныхПродажахТовары.Количество КАК Количество,
	|	ОтчетОРозничныхПродажахТовары.Резервировать КАК Резервировать,
	|	ОтчетОРозничныхПродажахТовары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаДокументы
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
	|ГДЕ
	|	ОтчетОРозничныхПродажахТовары.Количество < 0
	|	И ОтчетОРозничныхПродажахТовары.Резервировать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыНаСкладах.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ТаблицаДокументыКИсправлению
	|ИЗ
	|	ТаблицаДокументы КАК ТаблицаДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	|		ПО (ТоварыНаСкладах.Регистратор = ТаблицаДокументы.Ссылка)
	|			И (ТоварыНаСкладах.НомерСтроки = ТаблицаДокументы.НомерСтроки)
	|ГДЕ
	|	ТоварыНаСкладах.ВидДвижения = &ВидДвижения
	|	И -ТаблицаДокументы.Количество <> ТоварыНаСкладах.Резерв
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладах.Период КАК Период,
	|	ТоварыНаСкладах.Регистратор КАК Регистратор,
	|	ТоварыНаСкладах.НомерСтроки КАК НомерСтроки,
	|	ТоварыНаСкладах.Активность КАК Активность,
	|	ТоварыНаСкладах.ВидДвижения КАК ВидДвижения,
	|	ТоварыНаСкладах.Склад КАК Склад,
	|	ТоварыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладах.Характеристика КАК Характеристика,
	|	ТоварыНаСкладах.Количество КАК Количество,
	|	-ТаблицаДокументы.Количество КАК Резерв,
	|	ТоварыНаСкладах.АналитикаХозяйственнойОперации КАК АналитикаХозяйственнойОперации,
	|	ТоварыНаСкладах.КодСтроки КАК КодСтроки
	|ИЗ
	|	ТаблицаДокументы КАК ТаблицаДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	|		ПО (ТоварыНаСкладах.Регистратор = ТаблицаДокументы.Ссылка)
	|			И (ТоварыНаСкладах.НомерСтроки = ТаблицаДокументы.НомерСтроки)
	|ГДЕ
	|	ТоварыНаСкладах.Регистратор В
	|			(ВЫБРАТЬ
	|				ТаблицаДокументыКИсправлению.Регистратор КАК Регистратор
	|			ИЗ
	|				ТаблицаДокументыКИсправлению КАК ТаблицаДокументыКИсправлению)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор
	|ИТОГИ ПО
	|	Регистратор";
	
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		ВыборкаДвижений = Выборка.Выбрать();
		ДвиженияДокументаПоРегистру("ТоварыНаСкладах", Выборка.Регистратор, ВыборкаДвижений);
	КонецЦикла;
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура СозданиеРозничногоПокупателя() Экспорт
	
	РозничныйПокупатель =  Константы.КонтрагентРозничныйПокупатель.Получить();
	Если НЕ ЗначениеЗаполнено(РозничныйПокупатель) Тогда
		РозничныйПокупатель = Справочники.Контрагенты.СоздатьЭлемент();
		РозничныйПокупатель.Наименование= НСтр("ru = 'Розничный покупатель'");
		РозничныйПокупатель.ЮрФизЛицо 	= Перечисления.ЮрФизЛицо.ФизЛицо;
		РозничныйПокупатель.Покупатель 	= Истина;
		РозничныйПокупатель.УстановитьНовыйКод();
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(РозничныйПокупатель);
		
		Константы.КонтрагентРозничныйПокупатель.Установить(РозничныйПокупатель.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоправитьТелефонПользователя()  Экспорт
	
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя,
		Перечисления.ТипыКонтактнойИнформации.Телефон,               	Истина, Ложь, Ложь, 2);
	
КонецПроцедуры

Процедура ОбновитьРозничногоПокупателя() Экспорт
	
	РозничныйПокупатель = Константы.КонтрагентРозничныйПокупатель.Получить();
	Если НЕ ЗначениеЗаполнено(РозничныйПокупатель) Тогда
		РозничныйПокупатель = Справочники.Контрагенты.СоздатьЭлемент();
		РозничныйПокупатель.Наименование		= НСтр("ru = 'Розничный покупатель'");
		РозничныйПокупатель.НаименованиеПолное	= НСтр("ru = 'Розничный покупатель'");
		РозничныйПокупатель.ЮрФизЛицо 			= Перечисления.ЮрФизЛицо.ФизЛицо;
		РозничныйПокупатель.ФизЛицо 			= ОбщегоНазначенияРТ.СоздатьФизЛицоНаОснованииКонтрагента(РозничныйПокупатель);
		РозничныйПокупатель.Покупатель 			= Истина;
		РозничныйПокупатель.УстановитьНовыйКод();
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(РозничныйПокупатель);
		
		Константы.КонтрагентРозничныйПокупатель.Установить(РозничныйПокупатель.Ссылка);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РозничныйПокупатель.ФизЛицо) Тогда
		ОбъектРозничныйПокупатель = РозничныйПокупатель.ПолучитьОбъект();
		ОбъектРозничныйПокупатель.НаименованиеПолное	= НСтр("ru = 'Розничный покупатель'");
		ОбъектРозничныйПокупатель.ФизЛицо = ОбщегоНазначенияРТ.СоздатьФизЛицоНаОснованииКонтрагента(ОбъектРозничныйПокупатель);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектРозничныйПокупатель);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьПравоРазрешитьНеполнуюВыемку() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Право = ПланыВидовХарактеристик.ПраваПользователей.НайтиПоНаименованию(НСтр("ru = 'Разрешить неполную выемку при закрытии смены'"), Истина);
	Если НЕ ЗначениеЗаполнено(Право) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.ПланыВидовХарактеристик.ПраваПользователей.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Право);
		Блокировка.Заблокировать();
		
		ПравоОбъект = Право.ПолучитьОбъект();
		ОбновлениеИнформационнойБазы.УдалитьДанные(ПравоОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Права пользователей. Удаление права ""Разрешить неполную выемку при закрытии смены""'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ПланыВидовХарактеристик.ПраваПользователей,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалитьПравоИзменятьУчетДенежныхСредствВКассовыхДокументах() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Право = ПланыВидовХарактеристик.ПраваПользователей.НайтиПоНаименованию(НСтр("ru = 'Доступность изменения учета денежных средств в кассовых документах'"), Истина);
	Если НЕ ЗначениеЗаполнено(Право) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.ПланыВидовХарактеристик.ПраваПользователей.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Право);
		Блокировка.Заблокировать();
		
		ПравоОбъект = Право.ПолучитьОбъект();
		ОбновлениеИнформационнойБазы.УдалитьДанные(ПравоОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Права пользователей. Удаление права ""Доступность изменения учета денежных средств в кассовых документах""'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ПланыВидовХарактеристик.ПраваПользователей,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПровестиВозвратУслуги(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;
	Результат = ДанныеПоВозвратуУслуг(Параметры);
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		ВыборкаДвижений = Выборка.Выбрать();
		ДвиженияДокументаПоРегистру("Продажи", Выборка.Ссылка, ВыборкаДвижений);
	КонецЦикла;
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитОрганизацииВСкладах() Экспорт
	
	ОрганизацияПоУмолчанию = Справочники.Организации.ОрганизацияПоУмолчанию();
	
	Если ЗначениеЗаполнено(ОрганизацияПоУмолчанию) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Склады.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	НЕ Склады.ЭтоГруппа
		|	И Склады.Организация = &ПустаяОрганизация";
		
		Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СкладОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СкладОбъект.Организация = ОрганизацияПоУмолчанию;
			СкладОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет константы значением по умолчанию.
//
Процедура ЗаполнитьКонстантыПоУмолчанию()
	
	Если НЕ ЗначениеЗаполнено(Константы.ЕдиницаИзмеренияВеса.Получить()) Тогда
		БазоваяЕдиницаИзмеренияВеса = Справочники.БазовыеЕдиницыИзмерения.НайтиПоКоду("166");
		Если ЗначениеЗаполнено(БазоваяЕдиницаИзмеренияВеса) Тогда
			Константы.ЕдиницаИзмеренияВеса.Установить(БазоваяЕдиницаИзмеренияВеса);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Константы.ЕдиницаИзмеренияОбъема.Получить()) Тогда
		БазоваяЕдиницаИзмеренияОбъема = Справочники.БазовыеЕдиницыИзмерения.НайтиПоКоду("113");
		Если ЗначениеЗаполнено(БазоваяЕдиницаИзмеренияОбъема) Тогда
			Константы.ЕдиницаИзмеренияОбъема.Установить(БазоваяЕдиницаИзмеренияОбъема);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ДополнительнаяКолонкаПриОтображенииНоменклатуры.Получить()) Тогда
		Константы.ДополнительнаяКолонкаПриОтображенииНоменклатуры.Установить(Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить()) Тогда
		Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Установить(Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить);
	КонецЕсли;
	
	Константы.ИспользоватьУчетСебестоимости.Установить(Истина);
	
	Если НЕ ЗначениеЗаполнено(Константы.НижняяГраницаДиапазонаSKUВесовогоТовара.Получить()) Тогда
		Константы.НижняяГраницаДиапазонаSKUВесовогоТовара.Установить(100);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ВерхняяГраницаДиапазонаSKUВесовогоТовара.Получить()) Тогда
		Константы.ВерхняяГраницаДиапазонаSKUВесовогоТовара.Установить(99999);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ПрефиксВнутреннегоШтрихкодаВесовогоТовара.Получить()) Тогда
		Константы.ПрефиксВнутреннегоШтрихкодаВесовогоТовара.Установить(1);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ПрефиксВнутреннегоШтрихкодаШтучногоФасованногоТовара.Получить()) Тогда
		Константы.ПрефиксВнутреннегоШтрихкодаШтучногоФасованногоТовара.Установить(3);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ПрефиксВнутреннегоШтрихкодаШтучногоТовара.Получить()) Тогда
		Константы.ПрефиксВнутреннегоШтрихкодаШтучногоТовара.Установить(2);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Константы.ПрефиксШтрихкодаУзлаРИБ.Получить()) Тогда
		Константы.ПрефиксШтрихкодаУзлаРИБ.Установить(0);
	КонецЕсли;
	
	Константы.ИспользоватьПодключаемоеОборудование.Установить(Истина);
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Константы.SKUУстанавливаетсяВГлавномУзлеРИБ.Установить(Ложь);
	Иначе
		Константы.SKUУстанавливаетсяВГлавномУзлеРИБ.Установить(Истина);
	КонецЕсли;
		
КонецПроцедуры 

Процедура ДвиженияДокументаПоРегистру(ИмяРегистра, ДокументСсылка, ВыборкаДвижений)
	
	НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
	
	Если ТипЗнч(ВыборкаДвижений) = Тип("Структура") Тогда
		ЗаписьРегистра = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ВыборкаДвижений);
	Иначе
		Пока ВыборкаДвижений.Следующий() Цикл
			
			ЗаписьРегистра = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ВыборкаДвижений);
			
		КонецЦикла;
	КонецЕсли;
	ПерезаписатьДанныеРегистров(НаборЗаписей);
	
КонецПроцедуры

// Перезаписывает данные регистров изменения в переданном объекте.
// Для использования в обработчиках обновления.
//
// Параметры:
//   Данные                            - Произвольный - объект, набор записей или менеджер константы, который
//                                                      необходимо записать.
//   РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//   ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//
Процедура ПерезаписатьДанныеРегистров(Знач Данные, Знач РегистрироватьНаУзлахПлановОбмена = Ложь, 
	Знач ВключитьБизнесЛогику = Ложь)
	
	Данные.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	Если Не РегистрироватьНаУзлахПлановОбмена Тогда
		Данные.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		Данные.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	Данные.Записать(Истина);
	
КонецПроцедуры

Процедура УстановитьДополнительноеПраво(Право, Значение)
	
	// Только тем пользователям или группам, у которых это право никогда не проставлялось.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначенияПрав.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ СуществующиеПрава
	|ИЗ
	|	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК ЗначенияПрав
	|ГДЕ
	|	ЗначенияПрав.Право = &Право
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗначенияПрав.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК ЗначенияПрав
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуществующиеПрава КАК СуществующиеПрава
	|		ПО ЗначенияПрав.Пользователь = СуществующиеПрава.Пользователь
	|ГДЕ
	|	СуществующиеПрава.Пользователь ЕСТЬ NULL";
	Запрос.УстановитьПараметр("Право", Право);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Пользователь) Тогда
			НаборЗаписейПрав = РегистрыСведений.ЗначенияДополнительныхПравПользователя.СоздатьНаборЗаписей();
			НаборЗаписейПрав.Отбор.Пользователь.Установить(Выборка.Пользователь, Истина);
			НаборЗаписейПрав.Отбор.Право.Установить(Право, Истина);
			ЗаписьПрав = НаборЗаписейПрав.Добавить();
			ЗаписьПрав.Пользователь = Выборка.Пользователь;
			ЗаписьПрав.Право = Право;
			ЗаписьПрав.Значение = Значение;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписейПрав, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет были ли переходы с "с НДС" на "без НДС" от текущего периода до следующего.
// Если были, то добавляет в ДанныеДляЗаписи необходимые строки
//
// Параметры:
//  ДанныеДляЗаписи		 		- 	 данные для записи в регистр 
//  ПериодыИспользованияНДС	 	- 	 периоды использования НДС в организации 
//  СНОТаблица					- 	 анализируемая таблица
//  Индекс				 		- 	 индекс анализируемой строки
//  НачальныйСтатусНДС	 		- 	 является/не является плательщиком НДС в данном периоде
//
Процедура ОбработатьПереходы(ДанныеДляЗаписи, ПериодыИспользованияНДС, СНОТаблица, Индекс, НачальныйСтатусНДС)
	
	МаксимальныйИндекс 		= СНОТаблица.Количество() - 1;
	ТекущаяСтрокаСНОТаблица	= СНОТаблица[Индекс];
	ТекущийПериод 			= ТекущаяСтрокаСНОТаблица.Период;
	ТекущийСтатусНДС		= НачальныйСтатусНДС;
	
	СледущийПериод = Дата(3999,12,31, 23,59,59);
	Если Индекс < МаксимальныйИндекс Тогда
		СледующаяСтрокаСНОТаблица = СНОТаблица[Индекс+1];
		Если ТекущаяСтрокаСНОТаблица.Организация = СледующаяСтрокаСНОТаблица.Организация
			И ТекущаяСтрокаСНОТаблица.Склад = СледующаяСтрокаСНОТаблица.Склад Тогда
			СледущийПериод = СледующаяСтрокаСНОТаблица.Период;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого Строка Из ПериодыИспользованияНДС Цикл
		
		Если Строка.НачалоПериода >= ТекущийПериод 
			И Строка.НачалоПериода < СледущийПериод 
			И ТекущийСтатусНДС Тогда
			
			НоваяСтрока = ДанныеДляЗаписи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрокаСНОТаблица,, "Период, ОсвобожденОтНДС");
			
			НоваяСтрока.Период = Строка.НачалоПериода;
			НоваяСтрока.ОсвобожденОтНДС = Ложь;
			
			ТекущийСтатусНДС = Ложь;
			
		КонецЕсли;
		
		Если Строка.КонецПериода >= ТекущийПериод 
			И Строка.КонецПериода < СледущийПериод 
			И НЕ ТекущийСтатусНДС Тогда
			
			НоваяСтрока = ДанныеДляЗаписи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрокаСНОТаблица,, "Период, ОсвобожденОтНДС");
			
			НоваяСтрока.Период = Строка.КонецПериода;
			НоваяСтрока.ОсвобожденОтНДС = Истина;

			ТекущийСтатусНДС = НачальныйСтатусНДС; // Возвращение к исходному
		
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура БезЗарегистрированияДанныхКОбработкеДляПерехода(Параметры) Экспорт
	
	// Одна процедура, вызывается в случае, когда данные регистрировать не нужно.
	
КонецПроцедуры

// Функция - Является плательщиком НДС
//
// Параметры:
//  СНООрганизации	 - 	 таблица с СНО  организации 
//  Период			 - 	 дата на которую нужно определить признак 
// 
// Возвращаемое значение:
//   Булево 
//
Функция ОсвобожденОтНДС(ПериодыИспользованияНДС, Период)
	
	Для каждого Строка из ПериодыИспользованияНДС Цикл
		
		Если Период >= Строка.НачалоПериода И Период < Строка.КонецПериода Тогда
			
			Возврат Ложь
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат Истина
	
КонецФункции

Процедура ОбновитьВидКИ(ВидКИ, Тип, МожноИзменятьСпособРедактирования, РедактированиеТолькоВДиалоге, АдресТолькоРоссийский, Порядок = Неопределено, МеждународныйФорматАдреса = Ложь)

	НастройкиПроверки = Новый Структура;
	НастройкиПроверки.Вставить("АдресТолькоРоссийский", 		АдресТолькоРоссийский);
	НастройкиПроверки.Вставить("ПроверятьКорректность", 		Ложь);
	НастройкиПроверки.Вставить("ЗапрещатьВводНекорректного", 	Ложь);
	НастройкиПроверки.Вставить("СкрыватьНеактуальныеАдреса", 	Ложь);
	НастройкиПроверки.Вставить("ВключатьСтрануВПредставление", 	Ложь);
	НастройкиПроверки.Вставить("Используется", 	Истина);
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		НастройкиПроверки.Вставить("ТелефонCДобавочнымНомером", Истина);
	КонецЕсли;
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Тип);
	ПараметрыВида.Вид = ВидКИ;
	ПараметрыВида.Тип = Тип;
	ПараметрыВида.Порядок = Порядок;
	ПараметрыВида.МожноИзменятьСпособРедактирования = МожноИзменятьСпособРедактирования;
	ПараметрыВида.РедактированиеТолькоВДиалоге = РедактированиеТолькоВДиалоге;
	ПараметрыВида.ОбязательноеЗаполнение = Ложь;
	ПараметрыВида.НастройкиПроверки = НастройкиПроверки;
	ПараметрыВида.МеждународныйФорматАдреса = МеждународныйФорматАдреса;
	
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

Функция ДанныеПоВозвратуУслуг(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Продажи.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.Склад <> &ПустойСклад
	|	И Продажи.Номенклатура.ТипНоменклатуры = &Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Продажи.Период КАК Период,
	|	Продажи.Активность КАК Активность,
	|	Продажи.Магазин КАК Магазин,
	|	ВЫБОР
	|		КОГДА Продажи.Номенклатура.ТипНоменклатуры = &Услуга
	|			ТОГДА &ПустойСклад
	|		ИНАЧЕ Продажи.Склад
	|	КОНЕЦ КАК Склад,
	|	Продажи.Номенклатура КАК Номенклатура,
	|	Продажи.Характеристика КАК Характеристика,
	|	Продажи.ДокументПродажи КАК ДокументПродажи,
	|	Продажи.Продавец КАК Продавец,
	|	Продажи.ЗаказПокупателя КАК ЗаказПокупателя,
	|	Продажи.Количество КАК Количество,
	|	Продажи.Стоимость КАК Стоимость,
	|	Продажи.СтоимостьБезСкидок КАК СтоимостьБезСкидок,
	|	Продажи.НДС КАК НДС,
	|	Продажи.АналитикаХозяйственнойОперации КАК АналитикаХозяйственнойОперации,
	|	Продажи.Регистратор КАК Ссылка,
	|	Продажи.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.Регистратор В
	|			(ВЫБРАТЬ
	|				ТаблицаВЗапросе.Регистратор
	|			ИЗ
	|				ТаблицаВЗапросе КАК ТаблицаВЗапросе)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.Параметры.Вставить("ПустойСклад", Справочники.Склады.ПустаяСсылка());
	Запрос.Параметры.Вставить("Услуга", Перечисления.ТипыНоменклатуры.Услуга);
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции

Процедура ПеренестиБанковскиеСчетаОрганизаций() Экспорт
	
	//Перенос справочника БанковскиеСчетаОрганизаций
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	БанковскиеСчета.Владелец КАК Владелец,
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	БанковскиеСчета.Банк КАК Банк
	|ПОМЕСТИТЬ СозданныеРанееБанковскиеСчета
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец ССЫЛКА Справочник.Организации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьБанковскиеСчетаОрганизаций.Владелец КАК Владелец,
	|	УдалитьБанковскиеСчетаОрганизаций.Наименование КАК Наименование,
	|	УдалитьБанковскиеСчетаОрганизаций.Банк КАК Банк,
	|	УдалитьБанковскиеСчетаОрганизаций.НомерСчета КАК НомерСчета,
	|	УдалитьБанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанка КАК РучноеИзменениеРеквизитовБанка,
	|	УдалитьБанковскиеСчетаОрганизаций.ГородБанка КАК ГородБанка,
	|	УдалитьБанковскиеСчетаОрганизаций.АдресБанка КАК АдресБанка,
	|	УдалитьБанковскиеСчетаОрганизаций.ТелефоныБанка КАК ТелефоныБанка,
	|	УдалитьБанковскиеСчетаОрганизаций.КоррСчетБанка КАК КоррСчетБанка,
	|	УдалитьБанковскиеСчетаОрганизаций.НаименованиеБанка КАК НаименованиеБанка,
	|	УдалитьБанковскиеСчетаОрганизаций.БИКБанка КАК БИКБанка
	|ИЗ
	|	Справочник.УдалитьБанковскиеСчетаОрганизаций КАК УдалитьБанковскиеСчетаОрганизаций
	|ГДЕ
	|	НЕ (УдалитьБанковскиеСчетаОрганизаций.Владелец, УдалитьБанковскиеСчетаОрганизаций.Банк, УдалитьБанковскиеСчетаОрганизаций.НомерСчета) В
	|				(ВЫБРАТЬ
	|					СозданныеРанееБанковскиеСчета.Владелец,
	|					СозданныеРанееБанковскиеСчета.Банк,
	|					СозданныеРанееБанковскиеСчета.НомерСчета
	|				ИЗ
	|					СозданныеРанееБанковскиеСчета КАК СозданныеРанееБанковскиеСчета)";
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		БанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(БанковскийСчет, Выборка);
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(БанковскийСчет);
		
	КонецЦикла;
	
	//Интеграция с Яндекс.Кассой
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НастройкиОнлайнОплатДополнительныеНастройки.Ссылка КАК Ссылка,
	|	УдалитьБанковскиеСчетаОрганизаций.Владелец КАК Владелец,
	|	УдалитьБанковскиеСчетаОрганизаций.НомерСчета КАК НомерСчета,
	|	УдалитьБанковскиеСчетаОрганизаций.Банк КАК Банк,
	|	УдалитьБанковскиеСчетаОрганизаций.Ссылка КАК БанковскийСчетОрганизации
	|ПОМЕСТИТЬ ВТНастройкиОнлайнОплаты
	|ИЗ
	|	Справочник.НастройкиОнлайнОплат.ДополнительныеНастройки КАК НастройкиОнлайнОплатДополнительныеНастройки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УдалитьБанковскиеСчетаОрганизаций КАК УдалитьБанковскиеСчетаОрганизаций
	|		ПО НастройкиОнлайнОплатДополнительныеНастройки.Значение = УдалитьБанковскиеСчетаОрганизаций.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТНастройкиОнлайнОплаты.Ссылка КАК Ссылка,
	|	ВТНастройкиОнлайнОплаты.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	|	БанковскиеСчета.Ссылка КАК БанковскийСчет
	|ИЗ
	|	ВТНастройкиОнлайнОплаты КАК ВТНастройкиОнлайнОплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО ВТНастройкиОнлайнОплаты.Владелец = БанковскиеСчета.Владелец
	|			И ВТНастройкиОнлайнОплаты.НомерСчета = БанковскиеСчета.НомерСчета
	|			И ВТНастройкиОнлайнОплаты.Банк = БанковскиеСчета.Банк";
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Значение", Выборка.БанковскийСчетОрганизации);
		
		НастройкиОнлайнОплаты = Выборка.Ссылка.ПолучитьОбъект();
		СтрокиНастроек = НастройкиОнлайнОплаты.ДополнительныеНастройки.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаНастроек Из СтрокиНастроек Цикл
			СтрокаНастроек.Значение = Выборка.БанковскийСчет;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкиОнлайнОплаты);
		
	КонецЦикла;
	
	//Ввод начальных остатков узла
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВводНачальныхОстатковУзлаДенежныеСредстваБезналичные.Ссылка КАК Ссылка,
	|	ВводНачальныхОстатковУзлаДенежныеСредстваБезналичные.УдалитьБанковскийСчет КАК УдалитьБанковскийСчет,
	|	ВводНачальныхОстатковУзлаДенежныеСредстваБезналичные.Организация КАК Организация
	|ПОМЕСТИТЬ ВТВводНачальныхОстатковУзла
	|ИЗ
	|	Документ.ВводНачальныхОстатковУзла.ДенежныеСредстваБезналичные КАК ВводНачальныхОстатковУзлаДенежныеСредстваБезналичные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВводНачальныхОстатковУзла.Ссылка КАК Ссылка,
	|	БанковскиеСчета.Ссылка КАК БанковскийСчет,
	|	ВТВводНачальныхОстатковУзла.УдалитьБанковскийСчет КАК УдалитьБанковскийСчет,
	|	ВТВводНачальныхОстатковУзла.Организация КАК Организация
	|ИЗ
	|	ВТВводНачальныхОстатковУзла КАК ВТВводНачальныхОстатковУзла
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО ВТВводНачальныхОстатковУзла.УдалитьБанковскийСчет.Банк = БанковскиеСчета.Банк
	|			И ВТВводНачальныхОстатковУзла.УдалитьБанковскийСчет.НомерСчета = БанковскиеСчета.НомерСчета
	|			И ВТВводНачальныхОстатковУзла.УдалитьБанковскийСчет.Владелец = БанковскиеСчета.Владелец";
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Организация", Выборка.Организация);
		ПараметрыОтбора.Вставить("УдалитьБанковскийСчет", Выборка.УдалитьБанковскийСчет);
		
		ОбъектДокумент = Выборка.Ссылка.ПолучитьОбъект();
		СтрокиДС = ОбъектДокумент.ДенежныеСредстваБезналичные.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаДС Из СтрокиДС Цикл
			СтрокаДС.БанковскийСчет = Выборка.БанковскийСчет;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектДокумент);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерезаполнитьРегистрНакопленияДенежныеСредстваБезналичные(Параметры) Экспорт
	
	РезультатОбработки = Истина;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.Владелец КАК Владелец,
	|	БанковскиеСчета.Банк КАК Банк,
	|	БанковскиеСчета.НомерСчета КАК НомерСчета
	|ПОМЕСТИТЬ БанковскиеСчета
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьБанковскиеСчетаОрганизаций.Ссылка КАК Ссылка,
	|	УдалитьБанковскиеСчетаОрганизаций.Владелец КАК Владелец,
	|	УдалитьБанковскиеСчетаОрганизаций.Банк КАК Банк,
	|	УдалитьБанковскиеСчетаОрганизаций.НомерСчета КАК НомерСчета
	|ПОМЕСТИТЬ БанковскиеСчетаОрганизаций
	|ИЗ
	|	Справочник.УдалитьБанковскиеСчетаОрганизаций КАК УдалитьБанковскиеСчетаОрганизаций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК БанковскийСчет,
	|	БанковскиеСчетаОрганизаций.Ссылка КАК БанковскийСчетОрганизации
	|ИЗ
	|	БанковскиеСчета КАК БанковскиеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|		ПО БанковскиеСчета.Владелец = БанковскиеСчетаОрганизаций.Владелец
	|			И БанковскиеСчета.НомерСчета = БанковскиеСчетаОрганизаций.НомерСчета
	|			И БанковскиеСчета.Банк = БанковскиеСчетаОрганизаций.Банк";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СоответствиеБанковскихСчетов = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		СоответствиеБанковскихСчетов.Вставить(Выборка.БанковскийСчетОрганизации, Выборка.БанковскийСчет);
	КонецЦикла;
	
	ШаблонТекстаОшибки = НСтр("ru = 'Не удалось обработать движения по регистру ДенежныеСредстваБезналичные: %1 по причине: 
									|%2'");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДенежныеСредстваБезналичные.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные КАК ДенежныеСредстваБезналичные
	|ГДЕ
	|	ДенежныеСредстваБезналичные.БанковскийСчет ССЫЛКА Справочник.УдалитьБанковскиеСчетаОрганизаций";
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ДенежныеСредстваБезналичные");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыНакопления.ДенежныеСредстваБезналичные.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();
			
			Для Каждого Движение Из НаборЗаписей Цикл
				Если ТипЗнч(Движение.БанковскийСчет) = Тип("СправочникСсылка.УдалитьБанковскиеСчетаОрганизаций") Тогда
					Движение.БанковскийСчет = СоответствиеБанковскихСчетов.Получить(Движение.БанковскийСчет);
				КонецЕсли;
			КонецЦикла;
			
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, Выборка.Регистратор, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
				
			РезультатОбработки = Ложь;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = РезультатОбработки;
	
КонецПроцедуры

Процедура ПерезаполнитьДокументыФизическихЛиц(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыДокументовФизическихЛиц.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаВидыДокументов
	|ИЗ
	|	Справочник.ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц
	|ГДЕ
	|	ВидыДокументовФизическихЛиц.Предопределенный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыФизическихЛиц.Гражданство КАК Гражданство,
	|	ДокументыФизическихЛиц.ВидДокумента КАК ВидДокумента,
	|	ДокументыФизическихЛиц.Физлицо КАК Физлицо
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВидыДокументов КАК ТаблицаВидыДокументов
	|		ПО (ТаблицаВидыДокументов.Ссылка = ДокументыФизическихЛиц.ВидДокумента)";
	
	ШаблонТекстаОшибки = НСтр("ru = 'Не удалось обработать запись регистра ДокументыФизическихЛиц по причине: 
								|%1'");
	Выборка = Запрос.Выполнить().Выбрать();
	НаборЗаписейДокументов = РегистрыСведений.ДокументыФизическихЛиц.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			НаборЗаписейДокументов.Отбор.Физлицо.Установить(Выборка.Физлицо);
			НаборЗаписейДокументов.Отбор.ВидДокумента.Установить(Выборка.ВидДокумента);
			НаборЗаписейДокументов.Прочитать();
			
			Для Каждого ЗаписьДокумента Из НаборЗаписейДокументов Цикл
				ЗаписьДокумента.Гражданство = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
			КонецЦикла;
			
			НаборЗаписейДокументов.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
			
			РезультатОбработки = Ложь;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОбновитьКонстантуПодключаемогоОборудования() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.ИспользоватьПодключаемоеОборудование.Установить(Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОбновитьКонстантуИспользоватьКодыВидовНоменклатурнойКлассификации() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьНоменклатураСИЗ
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.КодВидаНоменклатурнойКлассификации = """"";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда	
		Константы.ИспользоватьКодыВидовНоменклатурнойКлассификации.Установить(Истина);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОбновитьКнопкиВерхнейПанелиРМК() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НастройкиРМК.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиРМК КАК НастройкиРМК";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеИзменились    = Ложь;
		
		НастройкаРМК 		= Выборка.Ссылка.ПолучитьОбъект();
		НастройкаРМК.ОбновитьКнопкиВерхнейПанели(ДанныеИзменились);
		
		Если ДанныеИзменились Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкаРМК);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИдентификаторПлатежныхСистем() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СоответствиеНастроекИнтеграции.ТорговыйОбъект КАК ТорговыйОбъект,
	|	СоответствиеНастроекИнтеграции.Организация КАК Организация,
	|	СоответствиеНастроекИнтеграции.СпособОплаты КАК СпособОплаты,
	|	СоответствиеНастроекИнтеграции.Интеграция КАК Интеграция
	|ИЗ
	|	РегистрСведений.СоответствиеНастроекИнтеграцииРМК КАК СоответствиеНастроекИнтеграции
	|ГДЕ
	|	СоответствиеНастроекИнтеграции.ИдентификаторПлатежнойСистемы = """"";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НастройкиИнтеграции = РегистрыСведений.СоответствиеНастроекИнтеграцииРМК.СоздатьНаборЗаписей();
		
		НастройкиИнтеграции.Отбор.Организация.Установить(Выборка.Организация);
		НастройкиИнтеграции.Отбор.ТорговыйОбъект.Установить(Выборка.ТорговыйОбъект);
		НастройкиИнтеграции.Отбор.СпособОплаты.Установить(Выборка.СпособОплаты);
		
		Если ЗначениеЗаполнено(Выборка.Интеграция) Тогда
			НастройкиИнтеграции.Прочитать();
		КонецЕсли;
		
		Если НастройкиИнтеграции.Количество() Тогда
			
			Запись					= НастройкиИнтеграции[0];
			НастройкиТорговойТочки 	= ИнтеграцияСПлатежнымиСистемамиРТВызовСервера.НастройкиТорговойТочки(Выборка.Интеграция);
			
			Запись.ИдентификаторПлатежнойСистемы = НастройкиТорговойТочки.Идентификатор;
			
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НастройкиИнтеграции);
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьКонстантыПечатиСлипЧека() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.ПечатьСлипЧека.Установить(Истина);
	Константы.ПолныйСлипЧек.Установить(Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура АктуализироватьНастройкиРМК() Экспорт
	ОбщегоНазначенияРМКРТ.АктуализироватьНастройкиРМК();
КонецПроцедуры

Процедура УстановитьХранениеКартЛояльностиВРМК() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросУзлов = Новый Запрос;
	ЗапросУзлов.Текст =
	"ВЫБРАТЬ
	|	ОбменСУРМК.Ссылка КАК Узел
	|ИЗ
	|	ПланОбмена.ОбменСУРМК КАК ОбменСУРМК
	|ГДЕ
	|	НЕ ОбменСУРМК.ПометкаУдаления
	|	И НЕ ОбменСУРМК.ТорговыйОбъект = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|	И НЕ ОбменСУРМК.ХранитьКартыЛояльностиВРМК";
	РезультатЗапроса = ЗапросУзлов.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаУзлов = РезультатЗапроса.Выбрать();
		Пока ВыборкаУзлов.Следующий() Цикл
			Если Не ВыборкаУзлов.Узел = ПланыОбмена.ОбменСУРМК.ЭтотУзел() Тогда
				ОбъектУзел = ВыборкаУзлов.Узел.ПолучитьОбъект();
				ОбъектУзел.ХранитьКартыЛояльностиВРМК = Истина;
				ОбъектУзел.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗарегистрироватьИнформационныеКартыКОбновлениюОбратногоНомераТелефона(Параметры) Экспорт
	
	ЗарегистрироватьСправочникКОбновлениюОбратногоНомераТелефона(Параметры, "ИнформационныеКарты");
	
КонецПроцедуры

Процедура ЗарегистрироватьКонтрагентовКОбновлениюОбратногоНомераТелефона(Параметры) Экспорт
	
	ЗарегистрироватьСправочникКОбновлениюОбратногоНомераТелефона(Параметры, "Контрагенты");
	
КонецПроцедуры

Процедура ЗарегистрироватьФизическиеЛицаКОбновлениюОбратногоНомераТелефона(Параметры) Экспорт
	
	ЗарегистрироватьСправочникКОбновлениюОбратногоНомераТелефона(Параметры, "ФизическиеЛица");
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизитыКонтактнойИнформацииИнформационныхКарт(Параметры) Экспорт
	
	ЗаполнитьОбратныйНомерТелефонаСправочника(Параметры, "ИнформационныеКарты");
	
КонецПроцедуры 

Процедура СкорректироватьИмяКомандыКодыМаркировкиНастройкиРМК(Параметры) Экспорт
	
	МетаданныеСправочник = Метаданные.Справочники["НастройкиРМК"];
	ПолноеИмяСправочника = МетаданныеСправочник.ПолноеИмя();
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяСправочника);
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяСправочника);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ЭлементОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ЭлементОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Для Каждого СтрокаКнопкиНижнейПанели Из ЭлементОбъект.КнопкиНижнейПанели Цикл
				Если СтрокаКнопкиНижнейПанели.ИмяКоманды = "КомандаПО34КодыМаркировки" Тогда
					СтрокаКнопкиНижнейПанели.ИмяКоманды 	= "КомандаПО99КодыМаркировки";
				КонецЕсли;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЭлементОбъект, Ложь);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстСообщения = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ИмяСобытияЖР = СтрШаблон(НСтр("ru='Заполнение служебных реквизитов справочника ""%1""'",
				ОбщегоНазначения.КодОсновногоЯзыка()), "НастройкиРМК");
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, , Выборка.Ссылка, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена
		= НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяСправочника);	
	
КонецПроцедуры 

Процедура ЗарегистрироватьНастройкиРМККОбновлению(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КнопкиНижнейПанели.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиРМК.КнопкиНижнейПанели КАК КнопкиНижнейПанели
	|ГДЕ
	|	КнопкиНижнейПанели.ИмяКоманды = &ИмяКоманды";
	
	Запрос.УстановитьПараметр("ИмяКоманды", "КомандаПО34КодыМаркировки");
	
	ЭлементыДляОбработки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ЭлементыДляОбработки);
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизитыКонтактнойИнформацииФизическихЛиц(Параметры) Экспорт
	
	ЗаполнитьОбратныйНомерТелефонаСправочника(Параметры, "Контрагенты");
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизитыКонтактнойИнформацииКонтрагентов(Параметры) Экспорт
	
	ЗаполнитьОбратныйНомерТелефонаСправочника(Параметры, "ФизическиеЛица");
	
КонецПроцедуры

Процедура ЗарегистрироватьСправочникКОбновлениюОбратногоНомераТелефона(Параметры, ИмяСправочника)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблЧастьКонтактнаяИнформация.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник." + ИмяСправочника + ".КонтактнаяИнформация КАК ТаблЧастьКонтактнаяИнформация
	|ГДЕ
	|	ТаблЧастьКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И ТаблЧастьКонтактнаяИнформация.ОбратныйНомерТелефона = """"
	|	И НЕ ТаблЧастьКонтактнаяИнформация.НомерТелефона = """"";
	
	ЭлементыДляОбработки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ЭлементыДляОбработки);
	
КонецПроцедуры

Процедура ЗаполнитьОбратныйНомерТелефонаСправочника(Параметры, ИмяСправочника)
	
	МетаданныеСправочник = Метаданные.Справочники[ИмяСправочника];
	ПолноеИмяСправочника = МетаданныеСправочник.ПолноеИмя();
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяСправочника);
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяСправочника);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ЭлементОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ЭлементОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Для Каждого СтрокаКИ Из ЭлементОбъект.КонтактнаяИнформация Цикл
				Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
					
					СтрокаКИ.ОбратныйНомерТелефона
						= ОбщегоНазначенияРМК.ПолучитьОбратныйНомерТелефонаБезКодаСтраны(СтрокаКИ.НомерТелефона);
					Если СтрокаКИ.ОбратныйНомерТелефона = "" Тогда
						СтрокаКИ.ОбратныйНомерТелефона = "0";
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЭлементОбъект, Ложь);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстСообщения = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ИмяСобытияЖР = СтрШаблон(НСтр("ru='Заполнение служебных реквизитов справочника ""%1""'",
				ОбщегоНазначения.КодОсновногоЯзыка()), ИмяСправочника);
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, , Выборка.Ссылка, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	Параметры.ОбработкаЗавершена
		= НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяСправочника);
	
КонецПроцедуры

Процедура УстановитьИспользованиеГрупповыхСвойств() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросУзлов = Новый Запрос;
	ЗапросУзлов.Текст =
	"ВЫБРАТЬ
	|	ОбменСУРМК.Ссылка КАК Узел,
	|	ОбменСУРМК.ТорговыйОбъект КАК ТорговыйОбъект
	|ИЗ
	|	ПланОбмена.ОбменСУРМК КАК ОбменСУРМК
	|ГДЕ
	|	НЕ ОбменСУРМК.ПометкаУдаления
	|	И НЕ ОбменСУРМК.ТорговыйОбъект = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|	И НЕ ОбменСУРМК.ИспользоватьГрупповыеСвойстваТовара";
	
	РезультатЗапроса = ЗапросУзлов.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаУзлов = РезультатЗапроса.Выбрать();
	Пока ВыборкаУзлов.Следующий() Цикл
		Если Не ВыборкаУзлов.Узел = ПланыОбмена.ОбменСУРМК.ЭтотУзел() Тогда
			ОбъектУзел = ВыборкаУзлов.Узел.ПолучитьОбъект();
			ОбъектУзел.ОбменДанными.Загрузка = Истина;
			ОбъектУзел.ИспользоватьГрупповыеСвойстваТовара = Истина;
			ОбъектУзел.Записать();
			ПланыОбмена.ЗарегистрироватьИзменения(ОбъектУзел.Ссылка, ВыборкаУзлов.ТорговыйОбъект);
		КонецЕсли;
	КонецЦикла;
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьПризнакиПредметовРасчета() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	Справочники.ПризнакиПредметовРасчета.ЗаполнитьПреопределенныеЭлементы();
	
КонецПроцедуры

//ИнтеграцияИСМПТК
Процедура УстановитьКонстантыВеденияУчетаМаркировкиИСМПТК() Экспорт
	
	//Сбрасываем значение констант маркировки неиспользуемого функционала.
	
	Константы.УдалитьВестиУчетТабачнойПродукцииМОТП.Установить(Ложь);
	Константы.УдалитьВестиУчетМаркировкиТабачнойПродукции.Установить(Ложь);
	Константы.УдалитьВестиУчетМаркировкиОбувнойПродукции.Установить(Ложь);
    Константы.УдалитьДатаОбязательнойМаркировкиОбувиИСМП.Установить(Ложь);
	Константы.ИспользоватьАвтоматическуюОтправкуПолучениеДанныхИСМП.Установить(Ложь);
	Константы.УдалитьКонтролироватьСтатусыКодовМаркировкиВРозницеМОТП.Установить(Ложь);
	Константы.УдалитьКонтролироватьСтатусыКодовМаркировкиМОТП.Установить(Ложь);

КонецПроцедуры
//Конец ИнтеграцияИСМПТК

#Конецобласти

#Конецобласти

#Область СлужебныеПроцедурыИФункции

// Возвращает массив объектов для заполнения банковского счета организации
//
// Параметры:
//  ТипОбъекта - строка, Тип объекта. Пример: Документ.ВозвратТоваровПоставщику, Справочник.ДоговорыКонтрагентов
//  ИмяРеквизита - строка, Имя реквизита. Пример: "БанковскийСчетКасса", "БанковскийСчет", "БанковскийСчетОрганизации"
//
// Возвращаемое значение:
//   Массив ссылок
//
Функция ОбъектыДляЗаполненияБанковскогоСчетаОрганизации(ТипОбъекта, ИмяРеквизита) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	ПакетЗапросов = СхемаЗапроса.ПакетЗапросов[0];
	Операторы = ПакетЗапросов.Операторы[0];
	ИсточникОбъект = Операторы.Источники.Добавить(ТипОбъекта,"Источник");
	Операторы.ВыбираемыеПоля.Добавить("Источник.Ссылка");
	
	Операторы.Отбор.Добавить(
		"НЕ Источник." + "Удалить" + ИмяРеквизита + " = ЗНАЧЕНИЕ(Справочник.УдалитьБанковскиеСчетаОрганизаций.ПустаяСсылка)");
	Операторы.Отбор.Добавить(
		"Источник." + ИмяРеквизита + ".Ссылка ЕСТЬ NULL");
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	МассивДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивДокументов;
	
КонецФункции

// Заполняет реквизит БанковскийСчетОрганизации из УдалитьБанковскийСчетОрганизации у переданной выборки объектов
//
// Параметры:
//  ПолноеИмяОбъекта - Строка, полное имя объекта метаданных.
//  ИмяРеквизита - Строка, имя реквизита банковского счета организации.
//  ВыборкаДокументов - Выборка, документы для обработки.
//  Параметры - Структура, параметры обновления.
//
Процедура ЗаполнитьБанковскийСчетОрганизацииОбъектов(ПолноеИмяОбъекта, ИмяРеквизита, ВыборкаОбъектов, Параметры) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.Владелец КАК Владелец,
	|	БанковскиеСчета.Банк КАК Банк,
	|	БанковскиеСчета.НомерСчета КАК НомерСчета
	|ПОМЕСТИТЬ БанковскиеСчета
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьБанковскиеСчетаОрганизаций.Ссылка КАК Ссылка,
	|	УдалитьБанковскиеСчетаОрганизаций.Владелец КАК Владелец,
	|	УдалитьБанковскиеСчетаОрганизаций.Банк КАК Банк,
	|	УдалитьБанковскиеСчетаОрганизаций.НомерСчета КАК НомерСчета
	|ПОМЕСТИТЬ БанковскиеСчетаОрганизаций
	|ИЗ
	|	Справочник.УдалитьБанковскиеСчетаОрганизаций КАК УдалитьБанковскиеСчетаОрганизаций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК БанковскийСчет,
	|	БанковскиеСчетаОрганизаций.Ссылка КАК БанковскийСчетОрганизации
	|ИЗ
	|	БанковскиеСчета КАК БанковскиеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|		ПО БанковскиеСчета.Владелец = БанковскиеСчетаОрганизаций.Владелец
	|			И БанковскиеСчета.НомерСчета = БанковскиеСчетаОрганизаций.НомерСчета
	|			И БанковскиеСчета.Банк = БанковскиеСчетаОрганизаций.Банк";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СоответствиеБанковскихСчетов = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		СоответствиеБанковскихСчетов.Вставить(Выборка.БанковскийСчетОрганизации, Выборка.БанковскийСчет);
	КонецЦикла;
	
	ШаблонТекстаОшибки = НСтр("ru = 'Не удалось обработать объект: %1 по причине: 
									|%2'");
	
	Пока ВыборкаОбъектов.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаОбъектов.Ссылка);
			Блокировка.Заблокировать();
			
			Объект = ВыборкаОбъектов.Ссылка.ПолучитьОбъект();
			
			Если Объект = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			УдалитьБанковскийСчетОрганизации = Объект["Удалить" + ИмяРеквизита];
			Если ТипЗнч(УдалитьБанковскийСчетОрганизации) = Тип("СправочникСсылка.УдалитьБанковскиеСчетаОрганизаций") Тогда
				БанковскийСчетОрганизации = СоответствиеБанковскихСчетов.Получить(УдалитьБанковскийСчетОрганизации);
				Объект[ИмяРеквизита] = БанковскийСчетОрганизации;
			Иначе
				Объект[ИмяРеквизита] = УдалитьБанковскийСчетОрганизации;
			КонецЕсли;
			
			Если ОбщегоНазначения.ЭтоДокумент(Объект.Ссылка.Метаданные()) Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект,,, РежимЗаписиДокумента.Запись);
			Иначе
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
			КонецЕсли;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, ВыборкаОбъектов.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
			
		КонецПопытки;
			
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

// Заполняет реквизит СистемаНалогообложения из УдалитьВидНалога у переданной выборки документов
//
// Параметры:
//  ПолноеИмяОбъекта - Строка, полное имя объекта метаданных.
//  ВыборкаДокументов - Выборка, документы для обработки.
//  Параметры - Структура, параметры обновления.
//
Процедура ЗаполнитьСистемыНалогообложенияДокументов(ПолноеИмяОбъекта, ВыборкаДокументов, Параметры) Экспорт
	
	СоответствиеНалогов = Новый Соответствие;
	СоответствиеНалогов.Вставить(Перечисления.УдалитьВидыНалогов.ЕНВД, Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД);
	СоответствиеНалогов.Вставить(Перечисления.УдалитьВидыНалогов.ЕСХН, Перечисления.ТипыСистемНалогообложенияККТ.ЕСН);
	СоответствиеНалогов.Вставить(Перечисления.УдалитьВидыНалогов.ПСН,  Перечисления.ТипыСистемНалогообложенияККТ.Патент);
	
	ШаблонТекстаОшибки = НСтр("ru = 'Не удалось обработать объект: %1 по причине: 
									|%2'");
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаДокументов.Ссылка);
			Блокировка.Заблокировать();
			
			ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			СНОДокумента = СоответствиеНалогов.Получить(ДокументОбъект.УдалитьВидНалога);
			
			ДокументОбъект.СистемаНалогообложения = СНОДокумента;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект,,, РежимЗаписиДокумента.Запись);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, ВыборкаДокументов.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
			
		КонецПопытки;
			
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

// Возвращает массив документов для заполнения СНО
//
// Параметры:
//  ТипДокумента - строка, Тип документа. Пример: Документ.ВозвратТоваровОтПокупателя
//
// Возвращаемое значение:
//   Массив ссылок
//
Функция ДокументыДляЗаполненияСНО(ТипДокумента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	ПакетЗапросов = СхемаЗапроса.ПакетЗапросов[0];
	Операторы = ПакетЗапросов.Операторы[0];
	ИсточникДокумент = Операторы.Источники.Добавить(ТипДокумента,"Документ");
	Операторы.ВыбираемыеПоля.Добавить("Документ.Ссылка");
	
	Операторы.Отбор.Добавить(
		"НЕ Документ.УдалитьВидНалога = ЗНАЧЕНИЕ(Перечисление.УдалитьВидыНалогов.ПустаяСсылка)");
	Операторы.Отбор.Добавить(
		"Документ.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.ТипыСистемНалогообложенияККТ.ПустаяСсылка)");
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	МассивДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивДокументов;
	
КонецФункции

#КонецОбласти