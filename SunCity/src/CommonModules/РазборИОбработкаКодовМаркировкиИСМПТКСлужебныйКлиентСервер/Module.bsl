
#Область ШтрихкодированиеИПреобразование

#Область РассчетКорректностиGTIN

// Функция проверяет корректность GTIN.
// GTIN допускает в формате GTIN-8, GTIN-12, GTIN-13, GTIN-14 c контрольным символом.
//
// Параметры:
//  GTIN - Текстовая строка с GTIN(c контрольным символом). Может содержать числа от 0 до 9.
// 
// Возвращаемое значение:
//   - Булево  
//
Функция ПроверитьКорректностьGTIN(Знач GTIN) Экспорт
	
	Если ТипЗнч(GTIN) = Тип("Структура") Тогда  //Когда проверяется отсканированный ШК из стандартной структуры
		GTIN = Base64ВШтрихкод(GTIN.Штрихкод);
	КонецЕсли;
	
	Результат = (СтрДлина(GTIN) = 8) Или (СтрДлина(GTIN) = 12) Или (СтрДлина(GTIN) = 13) Или (СтрДлина(GTIN) = 14);
	
	Возврат Результат И РассчитатьКонтрольныйСимволGTIN(GTIN) = Прав(GTIN, 1);
	
КонецФункции

Функция ПроверитьКорректностьEAN13(Знач EAN13) Экспорт
	
	Результат = (СтрДлина(EAN13) = 13);
	Возврат Результат И РассчитатьКонтрольныйСимволGTIN13(EAN13) = Прав(EAN13, 1);
	
КонецФункции

Функция ПроверитьКорректностьEAN8(Знач EAN8) Экспорт
	
	Результат = (СтрДлина(EAN8) = 8);
	Возврат Результат И РассчитатьКонтрольныйСимволGTIN8(EAN8) = Прав(EAN8, 1);
	
КонецФункции

// Универсальная функция расчета контрольной цифры GTIN.
// GTIN допускает в формате GTIN-8, GTIN-12, GTIN-13, GTIN-14 c контрольным символом.
//
// Параметры:
//  GTIN - Текстовая строка с GTIN(c контрольным символом). Может содержать числа от 0 до 9.
// 
// Возвращаемое значение:
//   - Контрольный символ (число) рассчитанный по алгоритму для GTIN.
//
Функция РассчитатьКонтрольныйСимволGTIN(Знач GTIN) Экспорт
	
	Сумма = 0;
	ДлиннаGTIN = СтрДлина(GTIN);
	Коэффициент = ?(ДлиннаGTIN % 2 = 0, 3, 1); 
	
	Для Сч = 1 По ДлиннаGTIN - 1 Цикл
		ВремКодСимвола = КодСимвола(GTIN, Сч);
		Сумма  = Сумма + Коэффициент * (ВремКодСимвола - 48);
		Коэффициент = 4 - Коэффициент;
	КонецЦикла;
	Сумма = (10 - Сумма % 10) % 10;
	КонтрольныйСимвол = Символ(Сумма + 48);
	
	Возврат КонтрольныйСимвол;
	
КонецФункции

// Расчет контрольной цифры для GTIN-8. 
//
// Параметры:
//  GTIN - Текстовая строка с GTIN-8. Может содержать числа от 0 до 9. 
// 
// Возвращаемое значение:
//   - Контрольный символ (число) рассчитанный по алгоритму для GTIN.
//
Функция РассчитатьКонтрольныйСимволGTIN8(Знач GTIN) Экспорт
	
	Сумма = 0;
	Коэффициент = 3;
	
	Для Сч = 1 По 7 Цикл
		ВремКодСимвола = КодСимвола(GTIN, Сч);
		Сумма  = Сумма + Коэффициент * (ВремКодСимвола - 48);
		Коэффициент = 4 - Коэффициент;
	КонецЦикла;
	Сумма = (10 - Сумма % 10) % 10;
	КонтрольныйСимвол = Символ(Сумма + 48);
	
	Возврат КонтрольныйСимвол;
	
КонецФункции

// Расчет контрольной цифры для GTIN-12. 
//
// Параметры:
//  GTIN - Текстовая строка с GTIN-12. Может содержать числа от 0 до 9. 
// 
// Возвращаемое значение:
//   - Контрольный символ (число) рассчитанный по алгоритму для GTIN.
//
Функция РассчитатьКонтрольныйСимволGTIN12(Знач GTIN) Экспорт
	
	Сумма = 0;
	Коэффициент = 3;
	
	Для Сч = 1 По 11 Цикл
		ВремКодСимвола = КодСимвола(GTIN, Сч);
		Сумма  = Сумма + Коэффициент * (ВремКодСимвола - 48);
		Коэффициент = 4 - Коэффициент;
	КонецЦикла;
	Сумма = (10 - Сумма % 10) % 10;
	КонтрольныйСимвол = Символ(Сумма + 48);
	
	Возврат КонтрольныйСимвол;
	
КонецФункции

// Расчет контрольной цифры для GTIN-13. 
//
// Параметры:
//  GTIN - Текстовая строка с GTIN-13. Может содержать числа от 0 до 9.
// 
// Возвращаемое значение:
//   - Контрольный символ (число) рассчитанный по алгоритму для GTIN.
//
Функция РассчитатьКонтрольныйСимволGTIN13(Знач GTIN) Экспорт
	
	Сумма = 0;
	Коэффициент = 1;
	
	Для Сч = 1 По 12 Цикл
		ВремКодСимвола = КодСимвола(GTIN, Сч);
		Сумма  = Сумма + Коэффициент * (ВремКодСимвола - 48);
		Коэффициент = 4 - Коэффициент;
	КонецЦикла;
	Сумма = (10 - Сумма % 10) % 10;
	КонтрольныйСимвол = Символ(Сумма + 48);
	
	Возврат КонтрольныйСимвол;
	
КонецФункции

// Расчет контрольной цифры для GTIN-14. 
//
// Параметры:
//  GTIN - Текстовая строка с GTIN-14. Может содержать числа от 0 до 9. 
// 
// Возвращаемое значение:
//   - Контрольный символ (число) рассчитанный по алгоритму для GTIN.
//
Функция РассчитатьКонтрольныйСимволGTIN14(Знач GTIN) Экспорт
	
	Сумма = 0;
	Коэффициент = 3;
	
	Для Сч = 1 По 13 Цикл
		ВремКодСимвола = КодСимвола(GTIN, Сч);
		Сумма  = Сумма + Коэффициент * (ВремКодСимвола - 48);
		Коэффициент = 4 - Коэффициент;
	КонецЦикла;
	Сумма = (10 - Сумма % 10) % 10;
	КонтрольныйСимвол = Символ(Сумма + 48);
	
	Возврат КонтрольныйСимвол;
	
КонецФункции

#КонецОбласти

// Возвращает массив возможных значений спецсимволов окончания строки переменной длины
//
// Возвращаемое значение:
// 	Массив - Массив строк - спецсимволов
//
Функция СимволыОкончанияСтрокиПеременнойДлины() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Символ(29));
	
	Возврат Массив;
	
КонецФункции

Функция НайденНедопустимыйСимволXML(Знач Текст) Экспорт
	
	// Коды символов от 0 до 2^16-1, которые метод НайтиНедопустимыеСимволыXML
	// считает недопустимыми: 0-8, 11-12, 14-31, 55296-57343.
	
	ДлинаСтроки = СтрДлина(Текст);
	
	Для НомерСимвола = 1 По ДлинаСтроки Цикл
		Символ = Сред(Текст, НомерСимвола, 1);
		КодСимвола = КодСимвола(Символ);
		
		Если КодСимвола < 9
			Или КодСимвола > 10    И КодСимвола < 13
			Или КодСимвола > 13    И КодСимвола < 32
			Или КодСимвола > 55295 И КодСимвола < 57344 Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает рассчитанное контрольное число.
//
// Параметры:
// 	Штрихкод - Строка - часть штрихкода SSCC, состоящая из цифр, без идентификатора применения SSCC
// 	                    (00 или (00)) и без контрольной цифры
//
// Возвращаемое значение:
// 	Число - Цифра контрольного числа SSCC
//
Функция КонтрольноеЧислоSSCC(Штрихкод) Экспорт
	
	КонтрольноеЧисло = 0;
	
	Цифры = Новый Массив;
	Позиций = СтрДлина(Штрихкод);
	Для НомерПозиции = 1 По Позиций Цикл
		Цифры.Добавить(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СтрокаВЧисло(Сред(Штрихкод, НомерПозиции, 1)));
	КонецЦикла;
	
	СуммаЧетных = 0;
	СуммаНечетных = 0;
	Для НомерПозиции = 0 По Позиций-1 Цикл
		Если НомерПозиции%2=0 Тогда
			СуммаЧетных=СуммаЧетных+Цифры[НомерПозиции];
		Иначе
			СуммаНечетных=СуммаНечетных+Цифры[НомерПозиции];
		КонецЕсли;
	КонецЦикла;
	
	СверяемоеЧисло = СуммаЧетных * 3 + СуммаНечетных;
	КонтрольноеЧисло = 10 - СверяемоеЧисло%10;
	Если КонтрольноеЧисло = 10 Тогда
		КонтрольноеЧисло = 0;
	КонецЕсли;
	
	Возврат КонтрольноеЧисло;
	
КонецФункции

// Возвращает массив нечитаемых символов, которые могут встретиться в штрихкоде в зависимости от оборудования
//
// Возвращаемое значение:
// 	Массив - Массив строк - спецсимволов
//
Функция НечитаемыеСимволыШтрихкодов()
	
	Массив = Новый Массив;
	Массив.Добавить(Символ(65533));
	
	Возврат Массив;
	
КонецФункции

Функция ПроверкаСтроки(Знач СтрокаПроверки, ДопустимыЛатПрописные = Ложь, ДопустимыЛатСтрочные = Ложь, ДопустимыЦифры = Ложь, ДопустимыеСимволы = "") Экспорт
	
	КодыДопустимыхСимволов = Новый Массив;
	
	Для Индекс = 1 По СтрДлина(ДопустимыеСимволы) Цикл
		КодыДопустимыхСимволов.Добавить(КодСимвола(Сред(ДопустимыеСимволы, Индекс, 1)));
	КонецЦикла;
	
	Для Индекс = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодСимвола = КодСимвола(Сред(СтрокаПроверки, Индекс, 1));
		ЭтоЛатПрописная = ?(ДопустимыЛатПрописные,(КодСимвола > 64) И (КодСимвола < 91), Ложь);
		ЭтоЛатСтрочная  = ?(ДопустимыЛатСтрочные,(КодСимвола > 96) И (КодСимвола < 123), Ложь);
		ЭтоЦифра =   ?(ДопустимыЦифры, (КодСимвола > 47) И (КодСимвола < 58), Ложь);
		Если НЕ (ЭтоЛатПрописная Или ЭтоЛатСтрочная Или ЭтоЦифра Или КодыДопустимыхСимволов.Найти(КодСимвола) <> Неопределено) Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Убирает разделители идентификаторов "(", ")" из кода маркировки.
// 
// Параметры:
//  КодМаркировки - Строка - Код маркировки.
// Возвращаемое значение:
//  Строка - Код маркировки без разделителей.
Функция КодМаркировкиБезСкобок(КодМаркировки) Экспорт
	
	ЧтениеШтрихкода = ПараметрыШтрихкодаGS1СоСкобками(КодМаркировки);
	Если ЧтениеШтрихкода.Результат <> Неопределено Тогда
		Возврат ШтрихкодGS1(ЧтениеШтрихкода.Результат, Ложь, "");
	КонецЕсли;
	
КонецФункции

// Вычисляет штрихкод GTIN по коду маркировки.
//
// Параметры:
//  КодМаркировки - Строка - Значение штрихкода.
// Возвращаемое значение:
//  Неопределено, Строка - Неопределено, если вычислить штрихкод GTIN не удалось.
Функция GTINПоКодуМаркировки(Знач КодМаркировки) Экспорт

	РезультатРазбора = РазобратьСтрокуШтрихкодаGS1(КодМаркировки);

	Если Не РезультатРазбора.Разобран Тогда
		Возврат Неопределено
	КонецЕсли;

	ДанныеШтрихкода01 = РезультатРазбора.ДанныеШтрихкода.Получить("01");
	Если ДанныеШтрихкода01 = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	GTIN = ДанныеШтрихкода01.Значение;

	ЭтоGTIN = ПроверитьКорректностьGTIN(GTIN);
	Если Не ЭтоGTIN Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат GTIN;

КонецФункции

// Дополняет штрихкод EAN лидирующими нулями.
//
// Параметры:
//  ШтрихкодEAN - Строка - Значение штрихкода EAN.
// Возвращаемое значение:
//  Строка - GTIN.
Функция GTINПоШтрихкодуEAN(Знач ШтрихкодEAN) Экспорт

	GTIN = ШтрихкодEAN;
	Пока СтрДлина(GTIN) < 14 Цикл
		GTIN = "0" + GTIN;
	КонецЦикла;

	Возврат GTIN;

КонецФункции

// Декодирует штрихкод по алгоритму Base64 в строковый формат.
// 
// Параметры:
//  ШтрихкодВBase64 - Строка - закодированный штрихкод.
// Возвращаемое значение:
//  Строка - Декодированный штрихкод.
Функция Base64ВШтрихкод(ШтрихкодВBase64) Экспорт
	
	ДвоичныеДанные = Base64Значение(ШтрихкодВBase64);
	Если ДвоичныеДанные = Неопределено Тогда
		Штрихкод = ШтрихкодВBase64;
	Иначе
		Штрихкод = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные);
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

// Конвертирует двоичные данные в Base64
// 
// Параметры:
// 	ДвоичныеДанные - ДвоичныеДанные - Двоичные данные
// Возвращаемое значение:
// 	Строка - Строка в Base64
Функция ДвоичныеДанныеBase64(ДвоичныеДанные) Экспорт
	
	Base64 = Base64Строка(ДвоичныеДанные);
	Base64 = СтрЗаменить(Base64, Символы.ПС, "");
	Base64 = СтрЗаменить(Base64, Символы.ВК, "");
	
	Возврат Base64;
	
КонецФункции

Процедура ЗакодироватьШтрихкодДанныхBase64(ДанныеШтрихкода) Экспорт
	
	Если ТипЗнч(ДанныеШтрихкода) = Тип("Структура") Тогда
		Если Не ДанныеШтрихкода.Свойство("ФорматBase64")
			Или (ДанныеШтрихкода.Свойство("ФорматBase64")
			И ДанныеШтрихкода.ФорматBase64 = Ложь) Тогда
			
			ДанныеШтрихкода.Штрихкод = ШтрихкодВBase64(ДанныеШтрихкода.Штрихкод);
			ДанныеШтрихкода.Вставить("ФорматBase64", Истина);
			
		КонецЕсли;
	Иначе
		ДанныеШтрихкода = ШтрихкодВBase64(ДанныеШтрихкода);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДекодироватьШтрихкодДанныхBase64(ДанныеШтрихкода) Экспорт
	
	Если ДанныеШтрихкода.Свойство("ФорматBase64")
		И ДанныеШтрихкода.ФорматBase64 = Истина Тогда
		
		ДанныеШтрихкода.Штрихкод = Base64ВШтрихкод(ДанныеШтрихкода.Штрихкод);
		ДанныеШтрихкода.ФорматBase64 = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Вычисляет штрихкода EAN по коду маркировки.
//
// Параметры:
//  КодМаркировки - Строка - Описание
// Возвращаемое значение:
//  Неопределено, Строка - Описание
Функция EANПоКодуМаркировки(КодМаркировки) Экспорт 
	
	Если СтрНачинаетсяС(КодМаркировки, "(") Тогда
		GTIN = Сред(КодМаркировки, 5, 14);
	Иначе
		GTIN = Лев(КодМаркировки, 14);
	КонецЕсли;
	
	ЭтоGTIN = ПроверитьКорректностьGTIN(GTIN);
	Если Не ЭтоGTIN Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	EAN = EANПоGTIN(GTIN);
	
	Возврат EAN;
	
КонецФункции

// Вычисляет штрихкод EAN из GTIN.
// 
// Параметры:
//  GTIN - Строка - GTIN.
// Возвращаемое значение:
//  Строка - Вычисленное значение EAN.
Функция EANПоGTIN(Знач Штрихкод) Экспорт

	Если Штрихкод = "" Тогда
		Возврат Штрихкод;
	КонецЕсли;
	
	Если Лев(Штрихкод, 1) = "0" Тогда
		Штрихкод = Сред(Штрихкод, 2); //EAN13
		Если Лев(Штрихкод, 5) = "00000" Тогда
			Штрихкод = Сред(Штрихкод, 6); //EAN8
		КонецЕсли;
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

// Преобразует исходную строку в число без вызова исключений.
//
// Параметры:
//   Значение - Строка - Строка, которую необходимо привести к числу.
//                       Например, "10", "+10", "010", вернет 10;
//                                 "(10)", "-10",вернет -10;
//                                 "10,2", "10.2",вернет 10.2;
//                                 "000", " ", "",вернет 0;
//                                 "10текст", вернет Неопределено.
//
// Возвращаемое значение:
//   Число, Неопределено - Полученное число, либо Неопределено, если строка не является числом.
//
Функция СтрокаВЧисло(Знач Значение) Экспорт
	
	Значение  = СтрЗаменить(Значение, " ", "");
	Если СтрНачинаетсяС(Значение, "(") Тогда
		Значение = СтрЗаменить(Значение, "(", "-");
		Значение = СтрЗаменить(Значение, ")", "");
	КонецЕсли;
	
	СтрокаБезНулей = СтрЗаменить(Значение, "0", "");
	Если ПустаяСтрока(СтрокаБезНулей) Или СтрокаБезНулей = "-" Тогда
		Возврат 0;
	КонецЕсли;
	
	ТипЧисло  = Новый ОписаниеТипов("Число");
	Результат = ТипЧисло.ПривестиЗначение(Значение);
	
	Возврат ?(Результат <> 0 И Не ПустаяСтрока(СтрокаБезНулей), Результат, Неопределено);
	
КонецФункции

// Преобразует исходную строку в дату.
//
// Параметры:
//  Значение - Строка - Строка, которую необходимо привести к дате.
//                      Формат даты должен быть в виде "ДД.ММ.ГГГГ" или "ДД/ММ/ГГ",
//                      Например, "23.02.1980" или "23/02/80".
//  ОбратныйПорядок - Булево - Для случая, когда значение в формате "ГГГГ.ММ.ДД"
//                             Например, "1980.02.23"
// 
// Возвращаемое значение:
//  Дата - полученная дата.
//
Функция СтрокаВДату(Знач Значение, ОбратныйПорадок = Ложь) Экспорт
	
	ПозицияПробела = СтрНайти(Значение, " ", НаправлениеПоиска.СНачала);
	
	Если ПозицияПробела > 0 Тогда
		Значение = Лев(Значение, ПозицияПробела - 1);
	КонецЕсли;
	
	Значение = СтрЗаменить(Значение, " ", "");
	Значение = СокрЛП(СтрЗаменить(Значение, ".", ""));
	Значение = СокрЛП(СтрЗаменить(Значение, "/", ""));
	Значение = СокрЛП(СтрЗаменить(Значение, "-", ""));
	
	Если Не ОбратныйПорадок Тогда
		Значение = Сред(Значение, 5) + Сред(Значение, 3, 2) + Лев(Значение, 2);
	КонецЕсли; 
	
	Если СтрДлина(Значение) = 6 Тогда
		Год = СтрокаВЧисло(Лев(Значение, 2));
		Значение = ?(Год > 29, "19", "20") + Значение;
	КонецЕсли;
	
	ОписаниеТипа = Новый ОписаниеТипов("Дата");
	Результат    = ОписаниеТипа.ПривестиЗначение(Значение);
	
	Возврат Результат;
	
КонецФункции

// См. описание СтроковыеФункцииКлиентСервер.СтрокаВДату.
// По формату GS1-128 дата имеет формат yyMMdd.
//
Функция СтрокаGS1ВДату(Знач Значение, Знач ОписаниеТиповДаты, ТекстОшибки = "")
	
	ЧастьДаты = ОписаниеТиповДаты.КвалификаторыДаты.ЧастиДаты;
	
	ПозицияПробела = СтрНайти(Значение, " ", НаправлениеПоиска.СНачала);
	Если ПозицияПробела > 0 Тогда
		Значение = Лев(Значение, ПозицияПробела - 1);
	КонецЕсли;
	Значение = СтрЗаменить(Значение, " ", "");
	Значение = СокрЛП(СтрЗаменить(Значение, ".", ""));
	Значение = СокрЛП(СтрЗаменить(Значение, "/", ""));
	Значение = СокрЛП(СтрЗаменить(Значение, "-", ""));
	
	Если НЕ ОбщегоНазначенияИСМПТККлиентСервер.ТолькоЦифрыВСтроке(Значение) Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка преобразования значения параметра %1 к дате'");
		ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, Значение);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЧастьДаты = ЧастиДаты.Дата Тогда
		Если СтрДлина(Значение) = 6 Тогда
			Год = СтрокаВЧисло(Лев(Значение, 2));
			Значение = ?(Год > 29, "19", "20") + Значение;
		КонецЕсли;
	КонецЕсли;
	
	Результат    = ОписаниеТиповДаты.ПривестиЗначение(Значение);
	
	Возврат Результат;
	
КонецФункции

Процедура СформироватьEAN(ДанныеМаркировки, Знач GTIN) Экспорт 
	
	ДанныеМаркировки.GTIN = GTIN;
	
	Пока СтрДлина(ДанныеМаркировки.GTIN) < 14 Цикл
		ДанныеМаркировки.GTIN = "0" + ДанныеМаркировки.GTIN
	КонецЦикла;
	
	// Пытаем получить торговый штрикод EAN8 или EAN13 из GTIN.
	ВремGTIN = GTIN;
	Пока Лев(ВремGTIN, 1) = "0" И СтрДлина(ВремGTIN) > 8 Цикл
		ВремGTIN = Сред(ВремGTIN, 2);
	КонецЦикла;
	ДанныеМаркировки.EAN = ВремGTIN;
	
КонецПроцедуры

Процедура СформироватьДвоичныеДанныеДляЧисла(ДанныеМаркировки, Знач ЗначениеЧисла = Неопределено, Знач ЗначениеСтроки = Неопределено) Экспорт
	
	Префикс = ОбщегоНазначенияИСМПТККлиентСервер.ПрефиксКодированияРеквизита(ДанныеМаркировки.ТипИдентификатораТовара);
	
	Тело = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Тело);
	ЗаписьДанных.ЗаписатьЦелое64(Число(ЗначениеЧисла), ПорядокБайтов.BigEndian);
	
	Если Не ПустаяСтрока(ЗначениеСтроки) Тогда
		ЗаписьДанных.ЗаписатьСимволы(ЗначениеСтроки); 
	КонецЕсли;
	
	ЗаписьДанных.Закрыть();
	Тело.Перейти(0, ПозицияВПотоке.Начало);
	ЗаписьДанных = Новый ЗаписьДанных(Тело);
	ЗаписьДанных.ЗаписатьЦелое16(Префикс, ПорядокБайтов.BigEndian);
	ЗаписьДанных.Закрыть();
	
КонецПроцедуры

Процедура СформироватьДвоичныеДанныеДляСтроки(ДанныеМаркировки, Знач ЗначениеСтроки = Неопределено) Экспорт
	
	Префикс = ОбщегоНазначенияИСМПТККлиентСервер.ПрефиксКодированияРеквизита(ДанныеМаркировки.ТипИдентификатораТовара);
	
	Тело = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(Тело);
	ЗаписьДанных.ЗаписатьЦелое16(Префикс, ПорядокБайтов.BigEndian); 
	ИндексСимвола = 1;
	
	Пока ИндексСимвола <= СтрДлина(ЗначениеСтроки) Цикл
		ЗначКодСимвола = КодСимвола(ЗначениеСтроки, ИндексСимвола);
		Если ЗначКодСимвола < 256 Тогда
			ЗаписьДанных.ЗаписатьБайт(Число(ЗначКодСимвола));
		КонецЕсли;
		ИндексСимвола = ИндексСимвола + 1;
	КонецЦикла;
	
	ЗаписьДанных.Закрыть();
	ДанныеМаркировки.РеквизитКодаТовараHEX = Тело.ЗакрытьИПолучитьДвоичныеДанные();
	ДанныеМаркировки.РеквизитКодаТовара    = Base64Строка(ДанныеМаркировки.РеквизитКодаТовараHEX);
	
КонецПроцедуры

// Возвращает сгенерированный штрихкод SSCC по переданным параметрам.
//
// Параметры:
//  ПараметрыШтрихкода  - Структура - Структура входящих параметров штрихкода.
// 	 * ЦифраРасширения    - Число - Цифра расширения SSCC.
// 	 * ПрефиксКомпанииGS1 - Число - префикс компании GS1.
// 	 * СерийныйНомерSSCC  - Число - серийный номер SSCC.
// 	УстанавливатьСкобки                  - Булево - Если истина, то идентификатор SSCC 00 будет помещен в скобки.
// 	УстанавливатьИдентификаторПрименения - Булево - Если истина, то будет установлен индентификатор применения.
//
// Возвращаемое значение:
// 	Строка - Сгенерированный штрихкод.
//
Функция ШтрихкодSSCC(ПараметрыШтрихкода, УстанавливатьСкобки = Истина, УстанавливатьИдентификаторПрименения = Истина) Экспорт
	
	ЦифраРасширения    = ПараметрыШтрихкода.ЦифраРасширения;
	ПрефиксКомпанииGS1 = ПараметрыШтрихкода.ПрефиксКомпанииGS1;
	СерийныйНомерSSCC  = ПараметрыШтрихкода.СерийныйНомерSSCC;
	
	Если ЗначениеЗаполнено(ПрефиксКомпанииGS1)
	   И ЗначениеЗаполнено(СерийныйНомерSSCC) Тогда
		
		Штрихкод = Формат(ЦифраРасширения, "ЧН=0; ЧГ=0")
				 + ОбщегоНазначенияИСМПТККлиентСервер.ПриведенноеКДлинеЗначение(ПрефиксКомпанииGS1, 9)
				 + ОбщегоНазначенияИСМПТККлиентСервер.ПриведенноеКДлинеЗначение(СерийныйНомерSSCC, 7);
		
		КонтрольноеЧисло = КонтрольноеЧислоSSCC(Штрихкод);
		
		Если УстанавливатьИдентификаторПрименения Тогда
			Если УстанавливатьСкобки Тогда
				Шаблон = "(00)%1%2";
			Иначе
				Шаблон = "00%1%2";
			КонецЕсли;
		Иначе
			Шаблон = "%1%2";
		КонецЕсли;
		Штрихкод = СтрШаблон(Шаблон, Штрихкод, КонтрольноеЧисло);
		
	Иначе
		Штрихкод = "";
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

// Возвращает сгенерированный штрихкод в формате GS1
//
// Параметры:
// 	ИспользуемыеИдентификаторы - Массив структур используемых идентификаторов применения GS1. Свойства структур:
// 	   *ИмяИдентификатора          - Строка, имя идентификатора в верхнем регистре, например, "МАССАНЕТТОВКГ"
// 	   *КлючИдентификатора         - Строка, ключ идентификатора без значения дополнительного параметра.
// 	                                  Например, для МассаНеттоВКг указывается 310 вместо 3102.
// 	   *Значение                   - Значение идентификатора. Строка, дата, число.
// 	   *ДополнительныйПараметр     - Число. Например, для МассаНеттоВКг последняя цифра 2 в идентификаторе (3102) - количество
// 	                                      знаков после запятой.
// 	УстанавливатьСкобки - Булево    - Если истина, то коды идентификаторов (вместе с дополнительными параметрами идентификаторов,
// 	                                  при их наличии) будут помещены внутрь скобок ().
// 	СимволFNC1          - Строка    - Символ завершения параметра переменной длины.
// 	                                  Может принимать значения: "", Символ(29), [NFC1].
// 	                                  Штрихкод с символом Символ(29) не может передаваться с клиента на сервер.
//
// Возвращаемое значение:
// 	Строка - сгенерированный штрихкод. При не заполненных параметрах штрихкод сгенерирован не будет.
//
Функция ШтрихкодGS1(ИспользуемыеИдентификаторы, УстанавливатьСкобки = Истина, СимволFNC1 = "") Экспорт
	
	ВсеЗначенияЗаполнены = Истина;
	
	Для каждого СтрокаИдентификатора Из ИспользуемыеИдентификаторы Цикл
		Если Не ЗначениеЗаполнено(СтрокаИдентификатора.Значение) Тогда
			ВсеЗначенияЗаполнены = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ВсеЗначенияЗаполнены Тогда
		
		Штрихкод = "";
		
	Иначе
		
		СвойстваИдентификаторов = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПовтИсп.СвойстваКлючейИдентификаторовПрименения();
		СимволОкончания = СимволFNC1;
		
		Штрихкод = "";
		ОшибкаФормирования = Ложь;
		ПредыдущееПеременнойДлины = Ложь;
		
		Для каждого СтрокаИдентификатора Из ИспользуемыеИдентификаторы Цикл
			
			КлючИдентификатора = СтрокаИдентификатора.КлючИдентификатора;
			
			СвойстваИдентификатора = СвойстваИдентификаторов.Получить(КлючИдентификатора);
			Если СвойстваИдентификатора = Неопределено Тогда
				ОшибкаФормирования = Истина;
				Прервать;
			КонецЕсли;
			
			Если ПредыдущееПеременнойДлины Тогда
				Штрихкод = Штрихкод + СимволОкончания;
			КонецЕсли;
			
			ПредставлениеИдентификатора = КлючИдентификатора;
			
			ДопПараметр = СтрокаИдентификатора.ДополнительныйПараметр;
			
			Если ЗначениеЗаполнено(СвойстваИдентификатора.ДополнительныйПараметрИмя) Тогда
				ПредставлениеИдентификатора = ПредставлениеИдентификатора + ОбщегоНазначенияИСМПТККлиентСервер.ПриведенноеКДлинеЗначение(ДопПараметр, СвойстваИдентификатора.ДлинаДопПараметра);
			КонецЕсли;
			Если УстанавливатьСкобки Тогда
				ПредставлениеИдентификатора = "(" + ПредставлениеИдентификатора + ")";
			КонецЕсли;
			
			Штрихкод = Штрихкод + ПредставлениеИдентификатора;
			
			Значение = СтрокаИдентификатора.Значение;
			
			Если ТипЗнч(Значение) = Тип("Дата") Тогда
				ЗначениеСтрокой = Формат(Значение, "ДФ=yyMMdd"); // Установленный формат даты для штрихкодов.
			ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
				
				ФорматнаяСтрокаЧисла = "";
				Если ЗначениеЗаполнено(СвойстваИдентификатора.ДополнительныйПараметрИмя)
				   И СвойстваИдентификатора.ДополнительныйПараметрИмя = ВРЕГ("ЧислоЗнаковПослеЗапятой") Тогда
					ФорматнаяСтрокаЧисла = "ЧДЦ=%1;";
					ФорматнаяСтрокаЧисла = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ФорматнаяСтрокаЧисла, ДопПараметр);
				КонецЕсли;
				ФорматнаяСтрокаЧисла = ФорматнаяСтрокаЧисла + "ЧРД=.;ЧН=0;ЧГ=0";
				ЗначениеСтрокой 	 = СтрЗаменить(Формат(Значение, ФорматнаяСтрокаЧисла), ".", "");
				
			Иначе
				ЗначениеСтрокой = СокрЛП(Значение);
			КонецЕсли;
			Если Не СвойстваИдентификатора.ЗначениеПеременнойДлины Тогда
				ЗначениеСтрокой = ОбщегоНазначенияИСМПТККлиентСервер.ПриведенноеКДлинеЗначение(ЗначениеСтрокой, СвойстваИдентификатора.ДлинаКода);
			КонецЕсли;
			
			Штрихкод = Штрихкод + ЗначениеСтрокой;
			
			Если СвойстваИдентификатора.ЗначениеПеременнойДлины Тогда
				ПредыдущееПеременнойДлины = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОшибкаФормирования Тогда
			Штрихкод = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

Функция ШтрихкодВBase64(Штрихкод) Экспорт
	
	Если Штрихкод = Неопределено Или Штрихкод = "" Тогда 
		ДвоичныеДанныеСтроки = Неопределено;
		ШтрихкодBase64 = "";
	Иначе
		ДвоичныеДанныеСтроки = ПолучитьДвоичныеДанныеИзСтроки(Штрихкод);
		ШтрихкодBase64 = Base64Строка(ДвоичныеДанныеСтроки);
		ШтрихкодBase64 = СтрЗаменить(ШтрихкодBase64, Символы.ПС, "");
		ШтрихкодBase64 = СтрЗаменить(ШтрихкодBase64, Символы.ВК, "");
	КонецЕсли;
	
	Возврат ШтрихкодBase64;
	
КонецФункции

// Выполняет проверку на формат GS1. Если штрихкод является штрихкодом GS1 - приводит к формату со скобками.
//
// Параметры:
//  Штрихкод - Строка - Значение штрихкода.
// Возвращаемое значение:
//  Строка - Значение штрихкода.
Функция ШтрихкодВФорматеGS1(Штрихкод) Экспорт
	
	ЧтениеШтрихкода = ПараметрыШтрихкода(Штрихкод);
	Если Не ЧтениеШтрихкода.Результат = Неопределено Тогда
		
		Если ЧтениеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.SSCC") Тогда
			
			ШтрихкодGS1 = ШтрихкодSSCC(ЧтениеШтрихкода.Результат, Истина);
			Возврат ШтрихкодGS1;
			
		ИначеЕсли ЧтениеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.GS1_128")
			Или ЧтениеШтрихкода.ТипШтрихкода   = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.GS1_DataBarExpandedStacked") Тогда
			
			ШтрихкодGS1 = ШтрихкодGS1(ЧтениеШтрихкода.Результат, Истина);
			Возврат ШтрихкодGS1;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

// Читает штрихкод неизвестного типа штрихкода и возвращает параметры.
// Для каждого типа штрихкода возвращаются соответствующие параметры. 
// См. описание функций ПараметрыШтрихкодаSSCC, ПараметрыШтрихкодаCode128, ПараметрыШтрихкодаGS1
Функция ПараметрыШтрихкода(Знач Штрихкод) Экспорт
	
	ИдентификаторSSCC       = "00";
	ИдентификаторSSCCПолный = "(00)";
	
	ПараметрыШтрихкода = Новый Структура;
	ПараметрыШтрихкода.Вставить("Результат",    Неопределено);
	ПараметрыШтрихкода.Вставить("ТекстОшибки",  "");
	ПараметрыШтрихкода.Вставить("ТипШтрихкода", Неопределено);
	
	Если СтрНайти(Штрихкод, ИдентификаторSSCCПолный) = 1 Тогда
		ПараметрыШтрихкода = ПараметрыШтрихкодаSSCC(Штрихкод);
		ПараметрыШтрихкода.Вставить("ТипШтрихкода", ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.SSCC"));
	ИначеЕсли СтрНайти(Штрихкод, ИдентификаторSSCC) = 1
	        И СтрДлина(Штрихкод) = 20
	        И ОбщегоНазначенияИСМПТККлиентСервер.ТолькоЦифрыВСтроке(Штрихкод)
	        И КонтрольноеЧислоSSCC(Сред(Штрихкод, 3, СтрДлина(Штрихкод) - 3)) = Число(Прав(Штрихкод, 1)) Тогда
		ПараметрыШтрихкода = ПараметрыШтрихкодаSSCC(Штрихкод);
		ПараметрыШтрихкода.Вставить("ТипШтрихкода", ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.SSCC"));
	Иначе
		
		Если ПозицияПервогоИдентификатораПрименения(Штрихкод) = 1 Тогда
			ПараметрыШтрихкода = ПараметрыШтрихкодаGS1СоСкобками(Штрихкод);
			Если Не ПараметрыШтрихкода.Результат = Неопределено Тогда
				ПараметрыШтрихкода.Вставить("ТипШтрихкода", ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.GS1_128"));
			КонецЕсли;
		Иначе
			ПараметрыШтрихкода = ПараметрыШтрихкодаGS1(Штрихкод);
			Если Не ПараметрыШтрихкода.Результат = Неопределено Тогда
				ПараметрыШтрихкода.Вставить("ТипШтрихкода", ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.GS1_128"));
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыШтрихкода.Результат = Неопределено Тогда
			
			ШтрихкодСодержитСимволыGS1 = Ложь;
			СимволыGS1 = СимволыОкончанияСтрокиПеременнойДлины();
					
			Для Каждого Символ Из СимволыGS1 Цикл
				Если Найти(Штрихкод, Символ) > 0 Тогда
					ШтрихкодСодержитСимволыGS1 = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ШтрихкодСодержитСимволыGS1 Тогда
				ШтрихкодСодержитСимволыGS1 = ПозицияПервогоИдентификатораПрименения(Штрихкод) > 0;
			КонецЕсли;
			
			Если Не ШтрихкодСодержитСимволыGS1 Тогда
				ПараметрыШтрихкода = ПараметрыШтрихкодаCode128(Штрихкод);
				Если Не ПараметрыШтрихкода.Результат = Неопределено Тогда
					ПараметрыШтрихкода.Вставить("ТипШтрихкода", ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.Code128"));
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыШтрихкода;
	
КонецФункции

Функция ПозицияПервогоИдентификатораПрименения(Знач Штрихкод)
	
	ПозицияСледующегоИдентификатора = СтрНайти(Штрихкод, "(");
	
	ПравильныйИдентификатор = Ложь;
	Пока ПозицияСледующегоИдентификатора > 0 И Не ПравильныйИдентификатор Цикл
		
		ПозицияЗакрывающегоИдентификатора = СтрНайти(Штрихкод, ")",, ПозицияСледующегоИдентификатора);
		ПредполагаемыйИдентификатор 	  = Сред(Штрихкод, ПозицияСледующегоИдентификатора + 1, ПозицияЗакрывающегоИдентификатора - ПозицияСледующегоИдентификатора - 1);
		
		ПравильныйИдентификатор = СтрДлина(ПредполагаемыйИдентификатор) > 1
		                        И СтрДлина(ПредполагаемыйИдентификатор) < 5
		                        И ПроверкаСтроки(ПредполагаемыйИдентификатор, Ложь, Ложь, Истина);
		
		Если ПозицияСледующегоИдентификатора >= СтрДлина(Штрихкод) Тогда
			ПозицияСледующегоИдентификатора = 0
		ИначеЕсли Не ПравильныйИдентификатор Тогда
			ПозицияСледующегоИдентификатора = СтрНайти(Штрихкод, "(",, ПозицияСледующегоИдентификатора  + 1);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПозицияСледующегоИдентификатора;
	
КонецФункции

// Читает штрихкод формата SSCC и возвращает параметры штрихкода
//
// Параметры:
// 	Штрихкод - Строка - Штрихкод в формате SSCC
//
// Возвращаемое значение:
// 	Структура - структура параметров
// 	 * Результат - Неопределено - Чтение штрихкода завершилось неудачей
// 	             - Структура - Параметры штрихкода, если штрихкод прочитан успешно
// 	                ** ЦифраРасширения - Число - цифра расширения SSCC
// 	                ** ПрефиксКомпанииGS1 - Число - префикс компании GS1
// 	                ** СерийныйНомерSSCC  - Число - серийный номер SSCC
// 	                ** КонтрольноеЧисло   - Число - контрольная цифра штрихкода
// 	 * ТекстОшибки - Строка - Текст ошибки при чтении, если ошибки не было - то пустая строка.
//
Функция ПараметрыШтрихкодаSSCC(Знач Штрихкод) Экспорт
	
	НечитаемыеСимволы = НечитаемыеСимволыШтрихкодов();
	Для каждого Символ Из НечитаемыеСимволы Цикл
		Штрихкод = СтрЗаменить(Штрихкод, Символ, "");
	КонецЦикла;
	
	ПараметрыШтрихкода = Новый Структура;
	
	ТекстОшибки = "";
	
	КлючИдентификатораSSCC = "00";
	КлючИдентификатораSSCCПолный = "(00)";
	
	НомерПозицииСоСкобками = СтрНайти(Штрихкод, КлючИдентификатораSSCCПолный);
	НомерПозиции = СтрНайти(Штрихкод, КлючИдентификатораSSCC);
	ОшибкаЧтения = Ложь;
	
	Если НомерПозицииСоСкобками = 1 Тогда
		НепрочитаннаяЧастьШК = Сред(Штрихкод, СтрДлина(КлючИдентификатораSSCCПолный) + 1);
	ИначеЕсли НомерПозиции = 1 Тогда
		НепрочитаннаяЧастьШК = Сред(Штрихкод, СтрДлина(КлючИдентификатораSSCC) + 1);
	Иначе
		НепрочитаннаяЧастьШК = Штрихкод;
		
		ОшибкаЧтения = Истина;
		ТекстОшибки = НСтр("ru = 'Идентификатор SSCC ""00"" не найден в начале штрихкода'");
		
		ПараметрыШтрихкода.Вставить("Результат", Неопределено);
		ПараметрыШтрихкода.Вставить("ТекстОшибки", ТекстОшибки);
		
	КонецЕсли;
	
	Если Не ОшибкаЧтения Тогда
		ДлинаСтроки = СтрДлина(НепрочитаннаяЧастьШК);
		Если ДлинаСтроки <> 18 Тогда
			ТекстОшибки = НСтр("ru = 'Неверный формат штрихкода SSCC: общая длина штрихкода равна %1 символам, вместо %2'");
			ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, ДлинаСтроки, 18);
			
			ПараметрыШтрихкода.Вставить("Результат", Неопределено);
			ПараметрыШтрихкода.Вставить("ТекстОшибки", ТекстОшибки);
		Иначе
			
			Результат = Новый Структура;
			Результат.Вставить("КлючИдентификатора", "00");
			Результат.Вставить("ЦифраРасширения",    СтрокаВЧисло(Сред(НепрочитаннаяЧастьШК, 1, 1)));
			Результат.Вставить("ПрефиксКомпанииGS1", СтрокаВЧисло(Сред(НепрочитаннаяЧастьШК, 2, 9)));
			Результат.Вставить("СерийныйНомерSSCC",  СтрокаВЧисло(Сред(НепрочитаннаяЧастьШК, 11, 7)));
			Результат.Вставить("КонтрольноеЧисло",   СтрокаВЧисло(Сред(НепрочитаннаяЧастьШК, 18, 1)));
			
			ТекстОшибки = "";
			Если НЕ ЗначениеЗаполнено(Результат.ПрефиксКомпанииGS1) Тогда
				ТекстОшибки = НСтр("ru = 'Неверный формат штрихкода SSCC: не заполнено значение ""Префикс компании GS1""'");
				Результат   = Неопределено;
			ИначеЕсли НЕ ЗначениеЗаполнено(Результат.СерийныйНомерSSCC) Тогда
				ТекстОшибки = НСтр("ru = 'Неверный формат штрихкода SSCC: не заполнено значение ""Серийный номер SSCC""'");
				Результат   = Неопределено;
			КонецЕсли;
			
			ПараметрыШтрихкода.Вставить("Результат",    Результат);
			ПараметрыШтрихкода.Вставить("ТекстОшибки", ТекстОшибки);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыШтрихкода;
	
КонецФункции

// Читает штрихкод и возвращает параметры. Ключи идентификаторов применения заключены в скобки,
// но после параметров переменной длины1 не следует символ окончания параметра переменной длины.
// В данном формате штрихкод храниться в поле ИБ.
// См. описание функции ПараметрыШтрихкодаGS1.
//
Функция ПараметрыШтрихкодаGS1СоСкобками(Знач Штрихкод, ПараметрыШтрихкода = Неопределено) Экспорт
	
	Если ПараметрыШтрихкода = Неопределено Тогда
		ПараметрыШтрихкода = Новый Структура;
		ПараметрыШтрихкода.Вставить("Результат", Новый Массив);
		ПараметрыШтрихкода.Вставить("ТекстОшибки",  "");
		
		НечитаемыеСимволы = НечитаемыеСимволыШтрихкодов();
		Для каждого Символ Из НечитаемыеСимволы Цикл
			Штрихкод = СтрЗаменить(Штрихкод, Символ, "");
		КонецЦикла;
		
		// Если есть символы окончания строк переменной длины, то удаляем ,т.к. есть скобки
		// явно указывающие начало следующего идентификатора применения.
		СимволыОкончанияСтрокиПеременнойДлины = СимволыОкончанияСтрокиПеременнойДлины();
		Для каждого СимволОкончания Из СимволыОкончанияСтрокиПеременнойДлины Цикл
			Штрихкод = СтрЗаменить(Штрихкод, СимволОкончания, "");
		КонецЦикла;
		
		КлючИдентификатораSSCC = "(00)";
		НомерПозиции = СтрНайти(Штрихкод, КлючИдентификатораSSCC);
		Если НомерПозиции <> 0 Тогда
			ПараметрыШтрихкода.Результат = Неопределено;
			ПараметрыШтрихкода.ТекстОшибки = НСтр("ru = 'Это тип штрихкода SSCC. Штрихкод содержит идентификатор применения %1'");
			ПараметрыШтрихкода.ТекстОшибки  = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ПараметрыШтрихкода.ТекстОшибки, КлючИдентификатораSSCC);
				
			Возврат ПараметрыШтрихкода;
		КонецЕсли;
		
	КонецЕсли;
	
	СвойстваИдентификаторов = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПовтИсп.СвойстваКлючейИдентификаторовПрименения();
	
	// Читаем текущий идентификатор применения.
	ПозицияНачало = СтрНайти(Штрихкод, "(");
	ПозицияКонец  = СтрНайти(Штрихкод, ")");
	
	Если ПозицияНачало <> 1
	 ИЛИ ПозицияКонец = 0 Тогда
		ПараметрыШтрихкода.Результат = Неопределено;
		ПараметрыШтрихкода.ТекстОшибки = НСтр("ru = 'В части штрихкода ""%1"" не найдено скобок, ограничивающих идентификатор применения'");
		ПараметрыШтрихкода.ТекстОшибки  = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ПараметрыШтрихкода.ТекстОшибки, Штрихкод);
		
		Возврат ПараметрыШтрихкода;
	КонецЕсли;
	
	КлючИдентификатора = Сред(Штрихкод, ПозицияНачало + 1, ПозицияКонец - ПозицияНачало - 1);
	
	Штрихкод = Сред(Штрихкод, ПозицияКонец + 1);
	
	// Читаем значение текущего идентификатора применения.
	ПозицияНачалоСледующего = СтрНайти(Штрихкод, "(");
	
	Если ПозицияНачалоСледующего <> 0 Тогда
		СтроковоеЗначениеПараметра = Сред(Штрихкод, 1, ПозицияНачалоСледующего - 1);
		Штрихкод = Сред(Штрихкод, ПозицияНачалоСледующего);
	Иначе
		СтроковоеЗначениеПараметра = Штрихкод;
		Штрихкод = "";
	КонецЕсли;
	
	// Находим текущий идентификатор применения. Сначала ищем по полному ключу.
	// Если не найден по полному ключу, то предполагаем, что последний символ - доп.параметр.
	ЗначениеДопПараметраСтрока = "";
	СвойстваИдентификатора = СвойстваИдентификаторов.Получить(КлючИдентификатора);
	Если СвойстваИдентификатора = Неопределено Тогда
		ЗначениеДопПараметраСтрока = Прав(КлючИдентификатора, 1);
		КлючИдентификатора = Сред(КлючИдентификатора, 1, СтрДлина(КлючИдентификатора) - 1);
		
		СвойстваИдентификатора = СвойстваИдентификаторов.Получить(КлючИдентификатора);
	КонецЕсли;
	
	// Проверки
	Если СвойстваИдентификатора = Неопределено Тогда
		ПараметрыШтрихкода.Результат = Неопределено;
		ПараметрыШтрихкода.ТекстОшибки = НСтр("ru = 'Не найден идентификатор применения GS1 по ключу ""%1""'");
		ПараметрыШтрихкода.ТекстОшибки  = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ПараметрыШтрихкода.ТекстОшибки, КлючИдентификатора + ЗначениеДопПараметраСтрока);
		
		Возврат ПараметрыШтрихкода;
	КонецЕсли;
	
	Если ЗначениеДопПараметраСтрока <> ""
		И Не ЗначениеЗаполнено(СвойстваИдентификатора.ДополнительныйПараметрИмя) Тогда
		ПараметрыШтрихкода.Результат = Неопределено;
		ПараметрыШтрихкода.ТекстОшибки = НСтр("ru = 'Найден дополнительный параметр ""%1"" для идентификатора ""%2""'");
		ПараметрыШтрихкода.ТекстОшибки  = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ПараметрыШтрихкода.ТекстОшибки, ЗначениеДопПараметраСтрока, КлючИдентификатора);
		
		Возврат ПараметрыШтрихкода;
	КонецЕсли;
	
	Если СвойстваИдентификатора.ДлинаКода <> 0
		И СтрДлина(СтроковоеЗначениеПараметра) > СвойстваИдентификатора.ДлинаКода Тогда
		ПараметрыШтрихкода.Результат = Неопределено;
		ПараметрыШтрихкода.ТекстОшибки = НСтр("ru = 'Значение параметра ""%1"" для идентификатора ""%2"" больше установленной максимальной длины %3 символов'");
		ПараметрыШтрихкода.ТекстОшибки  = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ПараметрыШтрихкода.ТекстОшибки, СтроковоеЗначениеПараметра, КлючИдентификатора + ЗначениеДопПараметраСтрока, СвойстваИдентификатора.ДлинаКода);
		
		Возврат ПараметрыШтрихкода;
	КонецЕсли;
	
	ТекстОшибки = "";
	Результат = ПараметрЗначенияИдентификатораПрименения(СвойстваИдентификатора,
		                                                 КлючИдентификатора,
		                                                 ЗначениеДопПараметраСтрока,
		                                                 СтроковоеЗначениеПараметра,
		                                                 ТекстОшибки);
	
	Если Результат = Неопределено Тогда
		ПараметрыШтрихкода.Вставить("Результат",    Неопределено);
		ПараметрыШтрихкода.Вставить("ТекстОшибки",  ТекстОшибки);
		Возврат ПараметрыШтрихкода;
	КонецЕсли;
	
	ПараметрыШтрихкода.Результат.Добавить(Результат);
	
	Если Не ПустаяСтрока(Штрихкод) Тогда
		ПараметрыШтрихкодаGS1СоСкобками(Штрихкод, ПараметрыШтрихкода);
	КонецЕсли;
	
	Возврат ПараметрыШтрихкода;
	
КонецФункции

// Читает штрихкод и возвращает параметры. Ключи идентификаторов применения не заключены в скобки,
// но после параметров переменной длины следует символ окончания параметра переменной длины.
//
// Параметры:
// 	Штрихкод     - Строка - Штрихкод, считанный со сканера.
// 	ПараметрыШтрихкода - Неопределено
// 	                   - Структура    - накопленные считанные параметры штрихкода.
//
// Возвращаемое значение:
// 	Структура
// 	 * Результат - Неопределено - Если в процессе чтения возникла ошибка.
// 	             - Массив - Массив структур считанных параметров. Свойства структур:
// 	               ** КлючИдентификатора - Строка, ключ идентификатора, заданный без дополнительного параметра.
// 	                                       Например, для МассаНеттоВКг будет 310 вместо 3100, 3101, 3102, 3103 и т.д.
// 	               ** ИмяИдентификатора      - Строка - Имя идентификатора применения в верхнем регистре, например "МАССАНЕТТОВКГ".
// 	               ** ДополнительныйПараметр - Число - По умолчанию 0.
// 	               ** ЗначениеСтрокой    - Строка - Считанное значение строкой.
// 	               ** Значение           - Строка, Число, Дата - Считанное и преобразованное по правилам значение.
// 	 * ТекстОшибки - Строка     - Содержит текст ошибки считывания, при ее наличии.
//
Функция ПараметрыШтрихкодаGS1(Знач Штрихкод, ПараметрыШтрихкода = Неопределено) Экспорт
	
	Если ПараметрыШтрихкода = Неопределено Тогда
		ПараметрыШтрихкода = Новый Структура;
		ПараметрыШтрихкода.Вставить("Результат", Новый Массив);
		ПараметрыШтрихкода.Вставить("ТекстОшибки",  "");
		
		НечитаемыеСимволы = НечитаемыеСимволыШтрихкодов();
		Для каждого Символ Из НечитаемыеСимволы Цикл
			Штрихкод = СтрЗаменить(Штрихкод, Символ, "");
		КонецЦикла;
	КонецЕсли;
	
	КлючИдентификатораSSCC = "00";
	
	НомерПозиции = СтрНайти(Штрихкод, КлючИдентификатораSSCC);
	Если НомерПозиции = 1 Тогда
		
		ПараметрыШтрихкода.Результат = Неопределено;
		ПараметрыШтрихкода.ТекстОшибки = НСтр("ru = 'Это тип штрихкода SSCC. Идентификатор применения равен %1'");
		ПараметрыШтрихкода.ТекстОшибки  = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ПараметрыШтрихкода.ТекстОшибки, КлючИдентификатораSSCC);
		
	Иначе
		
		СимволыОкончанияСтрокиПеременнойДлины = СимволыОкончанияСтрокиПеременнойДлины();
		СвойстваИдентификаторов = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПовтИсп.СвойстваКлючейИдентификаторовПрименения();
		
		ТекущийИдентификаторПримененияНайден = Ложь;
		Для каждого КлючИЗначение Из СвойстваИдентификаторов Цикл
			
			КлючИдентификатора = КлючИЗначение.Ключ;
			СвойстваИдентификатораПрименения = КлючИЗначение.Значение;
			
			НомерПозиции = СтрНайти(Штрихкод, КлючИдентификатора);
			Если НомерПозиции = 1 Тогда
				ТекущийИдентификаторПримененияНайден = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТекущийИдентификаторПримененияНайден Тогда
			
			Штрихкод = Сред(Штрихкод, СтрДлина(КлючИдентификатора) + 1);
			
			// Вычисляем длину значения параметра.
			// Если параметр переменной длины, то последим символом будет либо последний символ определенной длины (если ДлинаЗначения <> 0),
			// либо символ окончания параметра переменной длины (один из заданных в массиве СимволыОкончанияСтрокиПеременнойДлины).
			
			ДлинаЗначенияПараметра = СвойстваИдентификатораПрименения.ДлинаКода;
			ДлинаДопПараметра = СвойстваИдентификатораПрименения.ДлинаДопПараметра;
			
			ЗначениеДопПараметраСтрока = "";
			Если ДлинаДопПараметра > 0 Тогда
				ЗначениеДопПараметраСтрока = Сред(Штрихкод, 1, 1);
				Штрихкод = Сред(Штрихкод, 2);
			КонецЕсли;
			
			Если СвойстваИдентификатораПрименения.ЗначениеПеременнойДлины Тогда
				НомерПозиции = 0;
				СимволОкончания = "";
				
				Для каждого СимволОкончания Из СимволыОкончанияСтрокиПеременнойДлины Цикл
					НомерПозиции = СтрНайти(Штрихкод, СимволОкончания);
					Если НомерПозиции > 0 Тогда
						Прервать; // Используется только один символ окончания.
					КонецЕсли;
				КонецЦикла;
				Если НомерПозиции <> 0 И ДлинаЗначенияПараметра <> 0 Тогда
					ДлинаЗначенияПараметра = Мин(НомерПозиции, ДлинаЗначенияПараметра);
				ИначеЕсли НомерПозиции <> 0 И ДлинаЗначенияПараметра = 0 Тогда
					ДлинаЗначенияПараметра = НомерПозиции;
				КонецЕсли;
			КонецЕсли;
			
			Если ДлинаЗначенияПараметра = 0 Тогда
				СтроковоеЗначениеПараметра = Сред(Штрихкод, 1); // По конец строки.
				Штрихкод = "";
			Иначе
				СтроковоеЗначениеПараметра = Сред(Штрихкод, 1, ДлинаЗначенияПараметра);
				СтроковоеЗначениеПараметра = СтрЗаменить(СтроковоеЗначениеПараметра, СимволОкончания, "");
				Штрихкод = Сред(Штрихкод, ДлинаЗначенияПараметра + 1);
			КонецЕсли;
			
			// Значение идентификатора постоянной длины может заканчиваться символом GS.
			Для каждого СимволОкончания Из СимволыОкончанияСтрокиПеременнойДлины Цикл
				НомерПозиции = СтрНайти(Штрихкод, СимволОкончания);
				Если НомерПозиции = 1 Тогда
					Штрихкод = Сред(Штрихкод, 1);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ТекстОшибки = "";
			Результат = ПараметрЗначенияИдентификатораПрименения(СвойстваИдентификатораПрименения,
				                                                 КлючИдентификатора,
				                                                 ЗначениеДопПараметраСтрока,
				                                                 СтроковоеЗначениеПараметра,
				                                                 ТекстОшибки);
			
			Если Результат = Неопределено Тогда
				ПараметрыШтрихкода.Вставить("Результат",   Неопределено);
				ПараметрыШтрихкода.Вставить("ТекстОшибки", ТекстОшибки);
				Возврат ПараметрыШтрихкода;
			КонецЕсли;
			
			ПараметрыШтрихкода.Результат.Добавить(Результат);
			
			Если Не ПустаяСтрока(Штрихкод) Тогда
				Если Сред(Штрихкод, 1, 1) = СимволОкончания Тогда
					Штрихкод = Сред(Штрихкод, 2);
				КонецЕсли;
			КонецЕсли;
			Если Не ПустаяСтрока(Штрихкод) Тогда
				ПараметрыШтрихкодаGS1(Штрихкод, ПараметрыШтрихкода);
			КонецЕсли;
			
		Иначе
			
			ПараметрыШтрихкода.Результат   = Неопределено;
			ПараметрыШтрихкода.ТекстОшибки = НСтр("ru = 'Неизвестный идентификатор применения GS1-128 в части штрихкода ""%1""'");
			ПараметрыШтрихкода.ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				ПараметрыШтрихкода.ТекстОшибки, Штрихкод);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыШтрихкода;
	
КонецФункции

Функция ПараметрЗначенияИдентификатораПрименения(СвойстваИдентификатораПрименения, КлючИдентификатора, ДополнительныйПараметр, ЗначениеСтрокой, ТекстОшибки = "")
	
	ПараметрЗначенияИдентификатора = Новый Структура;
	ПараметрЗначенияИдентификатора.Вставить("КлючИдентификатора",     		 КлючИдентификатора);
	ПараметрЗначенияИдентификатора.Вставить("ИмяИдентификатора",      		 СвойстваИдентификатораПрименения.ИмяИдентификатора);
	ПараметрЗначенияИдентификатора.Вставить("ДополнительныйПараметрСтрокой", ДополнительныйПараметр);
	ПараметрЗначенияИдентификатора.Вставить("ДополнительныйПараметр",     	 СтрокаВЧисло(ДополнительныйПараметр));
	ПараметрЗначенияИдентификатора.Вставить("ЗначениеСтрокой",        		 ЗначениеСтрокой);
	
	ТипЗначенияИдентификатора = СвойстваИдентификатораПрименения.БазовыйТипДанных;
	Если СвойстваИдентификатораПрименения.ДополнительныйПараметрИмя = ВРЕГ("ЧислоЗнаковПослеЗапятой") Тогда
		ИсходныйКвалификатор = ТипЗначенияИдентификатора.КвалификаторыЧисла;
		НовыйКвалификатор = Новый КвалификаторыЧисла(ИсходныйКвалификатор.Разрядность, ДополнительныйПараметр, ИсходныйКвалификатор.ДопустимыйЗнак);
		ТипЗначенияИдентификатора = Новый ОписаниеТипов(ТипЗначенияИдентификатора,,,НовыйКвалификатор);
	КонецЕсли;
	
	Если ТипЗначенияИдентификатора.СодержитТип(Тип("Дата")) Тогда
		ЗначениеПараметра = СтрокаGS1ВДату(ЗначениеСтрокой, ТипЗначенияИдентификатора, ТекстОшибки);
		Если ЗначениеПараметра = Неопределено Тогда
			ПараметрЗначенияИдентификатора = Неопределено;
			Возврат ПараметрЗначенияИдентификатора;
		КонецЕсли;
	ИначеЕсли ТипЗначенияИдентификатора.СодержитТип(Тип("Число")) Тогда
		Если НЕ ОбщегоНазначенияИСМПТККлиентСервер.ТолькоЦифрыВСтроке(ЗначениеСтрокой) Тогда
			ТекстОшибки = НСтр("ru = 'Ошибка преобразования значения параметра %1 к числу'");
			ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, ЗначениеСтрокой);
			
			ПараметрЗначенияИдентификатора = Неопределено;
			Возврат ПараметрЗначенияИдентификатора;
		КонецЕсли;
		Если СвойстваИдентификатораПрименения.ДополнительныйПараметрИмя = ВРЕГ("ЧислоЗнаковПослеЗапятой") Тогда
			ЗначениеДопПараметра = СтрокаВЧисло(ДополнительныйПараметр);
			СтроковоеЗначениеПараметра = ЗначениеСтрокой;
			Если ЗначениеДопПараметра > 0 Тогда
				СтроковоеЗначениеПараметра = Лев(ЗначениеСтрокой, СтрДлина(СтроковоеЗначениеПараметра) - ЗначениеДопПараметра)
				+ "." + Прав(ЗначениеСтрокой, ЗначениеДопПараметра);
			КонецЕсли;
			ЗначениеПараметра = СтрокаВЧисло(СтроковоеЗначениеПараметра);
		Иначе
			СтроковоеЗначениеПараметра = ЗначениеСтрокой;
			ЗначениеПараметра = СтрокаВЧисло(СтроковоеЗначениеПараметра);
		КонецЕсли;
	Иначе
		ЗначениеПараметра = ЗначениеСтрокой;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЗначениеПараметра)
		И НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		ТекстОшибки = НСтр("ru = 'Ошибка чтения параметра ""%1""'");
		ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, СвойстваИдентификатораПрименения.ПредставлениеИдентификатора);
		ПараметрЗначенияИдентификатора = Неопределено;
		Возврат ПараметрЗначенияИдентификатора;
		
	КонецЕсли;
	
	ПараметрЗначенияИдентификатора.Вставить("Значение", ЗначениеПараметра);
	
	Возврат ПараметрЗначенияИдентификатора;
	
КонецФункции

// Заменяет недопустимые символы в XML-строке на заданные символы.
//
// Параметры:
//   Текст - Строка - строка, в которой требуется выполнить замену недопустимых символов.
//   СимволЗамены - Строка - строка, на которую требуется выполнить замену недопустимого символа в XML-строке.
// 
// Возвращаемое значение:
//    Строка - строка, полученная заменой недопустимых символов в XML-строке.
//
Функция ЗаменитьНедопустимыеСимволыXML(Знач Текст, СимволЗамены = " ") Экспорт
	
    Возврат ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ЗаменитьНедопустимыеСимволыXML(Текст, СимволЗамены);
	
КонецФункции

#Область ЧтениеИГенерацияCode128ВРазличныхФорматах

Функция ПараметрыШтрихкодаCode128(Знач Штрихкод) Экспорт
	
	НомерФорматаCode128 = ФорматШтрихкодаCode128(Штрихкод);
	
	Если НомерФорматаCode128 = 1 Тогда
		ПараметрыШтрихкода = ПараметрыШтрихкодаCode128Формат1(Штрихкод);
	ИначеЕсли НомерФорматаCode128 = 2 Тогда
		ПараметрыШтрихкода = ПараметрыШтрихкодаCode128Формат2(Штрихкод);
	ИначеЕсли НомерФорматаCode128 = 3 Тогда
		ПараметрыШтрихкода = ПараметрыШтрихкодаCode128Формат3(Штрихкод);
	Иначе
		ПараметрыШтрихкода = Новый Структура;
		
		ТекстОшибки  = НСтр("ru = 'Формат штрихкода Code-128 не определен: общая длина штрихкода равна %1 символам, вместо 18, 22 или 26, как установлено в формате.'");
		ТекстОшибки  = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрДлина(Штрихкод));
		ПараметрыШтрихкода.Вставить("Результат", Неопределено);
		ПараметрыШтрихкода.Вставить("ТекстОшибки", ТекстОшибки);
	КонецЕсли;
	
	Возврат ПараметрыШтрихкода;
	
КонецФункции

Функция ПараметрыШтрихкодаCode128Формат1(Штрихкод)
	
	НечитаемыеСимволы = НечитаемыеСимволыШтрихкодов();
	Для Каждого Символ Из НечитаемыеСимволы Цикл
		Штрихкод = СтрЗаменить(Штрихкод, Символ, "");
	КонецЦикла;
	
	ПараметрыШтрихкода = Новый Структура;
	ПараметрыШтрихкода.Вставить("ТекстОшибки", "");
	
	ДлинаСтроки = СтрДлина(Штрихкод);
	Если ДлинаСтроки <> 22 Тогда
		ТекстОшибки  = НСтр("ru = 'Неверный формат штрихкода Code-128: общая длина штрихкода равна %1 символам, вместо %2'");
		ТекстОшибки  = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, ДлинаСтроки, 22);
		
		ПараметрыШтрихкода.Вставить("Результат", Неопределено);
		ПараметрыШтрихкода.Вставить("ТекстОшибки", ТекстОшибки);
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("НомерФорматаCode128",      1);
		Результат.Вставить("ИдентификаторОрганизации", Сред(Штрихкод, 1, 12));
		Результат.Вставить("ДатаМаркировкиСтрока",     Сред(Штрихкод, 13, 6));
		Результат.Вставить("ДатаМаркировки", 		   РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СтрокаВДату(Сред(Штрихкод, 13, 6)));
		Результат.Вставить("НомерПоПорядку", 		   РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СтрокаВЧисло(Сред(Штрихкод, 19, 4)));
		
		ТекстОшибки = "";
		
		Если НЕ ЗначениеЗаполнено(Результат.ИдентификаторОрганизации) Тогда
			ТекстОшибки  = НСтр("ru = 'Неверный формат штрихкода Code-128: не заполнено значение ""Идентификатор организации""'");
			Результат    = Неопределено;
		ИначеЕсли НЕ ЗначениеЗаполнено(Результат.ДатаМаркировки) Тогда
			ТекстОшибки  = НСтр("ru = 'Неверный формат штрихкода Code-128: не заполнено значение ""Дата маркировки""'");
			Результат    = Неопределено;
		ИначеЕсли НЕ ЗначениеЗаполнено(Результат.НомерПоПорядку) Тогда
			ТекстОшибки  = НСтр("ru = 'Неверный формат штрихкода Code-128: не заполнено значение ""Номер по порядку""'");
			Результат    = Неопределено;
		КонецЕсли;
		
		ПараметрыШтрихкода.Вставить("Результат",   Результат);
		ПараметрыШтрихкода.Вставить("ТекстОшибки", ТекстОшибки);
	КонецЕсли;
	
	Возврат ПараметрыШтрихкода;
	
КонецФункции

Функция ПараметрыШтрихкодаCode128Формат2(Штрихкод)
	
	НечитаемыеСимволы = НечитаемыеСимволыШтрихкодов();
	Для Каждого Символ Из НечитаемыеСимволы Цикл
		Штрихкод = СтрЗаменить(Штрихкод, Символ, "");
	КонецЦикла;
	
	ПараметрыШтрихкода = Новый Структура;
	ПараметрыШтрихкода.Вставить("ТекстОшибки",  "");
	
	ДлинаСтроки = СтрДлина(Штрихкод);
	Если ДлинаСтроки <> 26 Тогда
		ТекстОшибки  = НСтр("ru = 'Неверный формат штрихкода Code-128: общая длина штрихкода равна %1 символам, вместо %2'");
		ТекстОшибки  = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, ДлинаСтроки, 26);
		
		ПараметрыШтрихкода.Вставить("Результат", Неопределено);
		ПараметрыШтрихкода.Вставить("ТекстОшибки", ТекстОшибки);
	Иначе
		ПоследниеЦифрыГода = Сред(Штрихкод, 16, 2);
		Алфавит = АлфавитЧисло();
		Если НЕ ЗначениеЗаполнено(ПоследниеЦифрыГода)
			Или НЕ СтрДлина(ПоследниеЦифрыГода) = 2
			Или Не КодСоответствуетАлфавиту(ПоследниеЦифрыГода, Алфавит) Тогда
			ГодГенерацииШтрихкода = '00010101';
		Иначе
			ГодГенерацииШтрихкода = Дата("20" + ПоследниеЦифрыГода + "0101");
		КонецЕсли;
				
		Результат = Новый Структура;
		Результат.Вставить("НомерФорматаCode128",         2);
		Результат.Вставить("ИдентификаторОрганизации",    Сред(Штрихкод, 1, 12));
		Результат.Вставить("ТипЛогистическойЕдиницы",     СтрокаВЧисло(Сред(Штрихкод, 13, 1)));
		Результат.Вставить("НомерПлощадкиМаркировки",     СтрокаВЧисло(Сред(Штрихкод, 14, 2)));
		Результат.Вставить("ГодГенерацииШтрихкодаСтрока", ПоследниеЦифрыГода);
		Результат.Вставить("ГодГенерацииШтрихкода",       ГодГенерацииШтрихкода);
		Результат.Вставить("НомерПоПорядку",              СтрокаВЧисло(Сред(Штрихкод, 18, 9)));
		
		ТекстОшибки = "";
		
		Если НЕ ЗначениеЗаполнено(Результат.ИдентификаторОрганизации) Тогда
			ТекстОшибки  = НСтр("ru = 'Неверный формат штрихкода Code-128: не заполнено значение ""Идентификатор организации""'");
			Результат    = Неопределено;
		ИначеЕсли НЕ ЗначениеЗаполнено(Результат.ГодГенерацииШтрихкода) Тогда
			ТекстОшибки  = НСтр("ru = 'Неверный формат штрихкода Code-128: не заполнено значение ""Год генерации штрихкода""'");
			Результат    = Неопределено;
		ИначеЕсли НЕ ЗначениеЗаполнено(Результат.НомерПоПорядку) Тогда
			ТекстОшибки  = НСтр("ru = 'Неверный формат штрихкода Code-128: не заполнено значение ""Номер по порядку""'");
			Результат    = Неопределено;
		КонецЕсли;
		
		ПараметрыШтрихкода.Вставить("Результат",   Результат);
		ПараметрыШтрихкода.Вставить("ТекстОшибки", ТекстОшибки);
	КонецЕсли;
	
	Возврат ПараметрыШтрихкода;
	
КонецФункции

Функция ПараметрыШтрихкодаCode128Формат3(Штрихкод)
	
	НечитаемыеСимволы = НечитаемыеСимволыШтрихкодов();
	Для Каждого Символ Из НечитаемыеСимволы Цикл
		Штрихкод = СтрЗаменить(Штрихкод, Символ, "");
	КонецЦикла;
	
	ПараметрыШтрихкода = Новый Структура;
	ПараметрыШтрихкода.Вставить("ТекстОшибки", "");
	
	ДлинаСтроки = СтрДлина(Штрихкод);
	Если ДлинаСтроки <> 18 Тогда
		ТекстОшибки  = НСтр("ru = 'Неверный формат штрихкода Code-128: общая длина штрихкода равна %1 символам, вместо %2.'");
		ТекстОшибки  = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, ДлинаСтроки, 18);
		
		ПараметрыШтрихкода.Вставить("Результат", Неопределено);
		ПараметрыШтрихкода.Вставить("ТекстОшибки", ТекстОшибки);
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("НомерФорматаCode128", 3);
		Результат.Вставить("ИдентификаторОрганизации", Сред(Штрихкод, 1, 12));
		Результат.Вставить("НомерПоПорядку", СтрокаВЧисло(Сред(Штрихкод, 13, 6)));
		
		ТекстОшибки = "";
		
		Если НЕ ЗначениеЗаполнено(Результат.ИдентификаторОрганизации) Тогда
			ТекстОшибки = НСтр("ru = 'Неверный формат штрихкода Code-128: не заполнено значение ""Идентификатор организации"".'");
			Результат   = Неопределено;
		ИначеЕсли НЕ ЗначениеЗаполнено(Результат.НомерПоПорядку) Тогда
			ТекстОшибки = НСтр("ru = 'Неверный формат штрихкода Code-128: не заполнено значение ""Номер по порядку"".'");
			Результат   = Неопределено;
		КонецЕсли;
		
		ПараметрыШтрихкода.Вставить("Результат",   Результат);
		ПараметрыШтрихкода.Вставить("ТекстОшибки", ТекстОшибки);
	КонецЕсли;
	
	Возврат ПараметрыШтрихкода;
	
КонецФункции

Функция ФорматШтрихкодаCode128(Штрихкод) Экспорт
	
	НечитаемыеСимволы = НечитаемыеСимволыШтрихкодов();
	Для каждого Символ Из НечитаемыеСимволы Цикл
		Штрихкод = СтрЗаменить(Штрихкод, Символ, "");
	КонецЦикла;
	
	НомерФормата = 0;
	
	ДлинаСтроки = СтрДлина(Штрихкод);
	Если ДлинаСтроки = 22 Тогда
		НомерФормата = 1;
	ИначеЕсли ДлинаСтроки = 26 Тогда
		// Формат для коробов, но также возможно штрихкодирование и паллет.
		НомерФормата = 2;
	ИначеЕсли ДлинаСтроки = 18 Тогда
		// Формат только для паллет.
		НомерФормата = 3;
	КонецЕсли;
	
	Возврат НомерФормата;
	
КонецФункции

#КонецОбласти
 
#Область РазборИПреобразованиеGS1

Функция ИдентификаторыGS1() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("GTIN", "01");
	Результат.Вставить("СерийныйНомер", "21");
	Результат.Вставить("КлючПроверки" , "91");
	Результат.Вставить("КодПроверки"  , "92");
	Результат.Вставить("КодТНВЭД"     , "240");
	Результат.Вставить("ЦенаЕдиницыТовара", "8005");
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает разделитель GS1.
//
Функция РазделительGS1() Экспорт
	
	Возврат Символ(29); // Dec 29
	
КонецФункции

// Функция возвращает экранированный символ GS1.
//
Функция ЭкранированныйСимволGS1() Экспорт
	
	Возврат "\x1d"; // Используется для экранирования символа GS1.
	
КонецФункции

Функция КодыGS1Служебный() Экспорт
	
	Коды = Новый Соответствие;
	
	ДобавитьКодGS1(Коды, "00"  , "SSCC"                      , 18);
	ДобавитьКодGS1(Коды, "01"  , "GTIN"                      , 14);
	ДобавитьКодGS1(Коды, "02"  , "CONTENT"                   , 14);
	ДобавитьКодGS1(Коды, "10"  , "BATCH_LOT"                 ,   , 20,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "11"  , "PROD_DATE"                 ,  6);
	ДобавитьКодGS1(Коды, "12"  , "DUE_DATE"                  ,  6);
	ДобавитьКодGS1(Коды, "13"  , "PACK_DATE"                 ,  6);
	ДобавитьКодGS1(Коды, "15"  , "BEST_BEFORE"               ,  6);
	ДобавитьКодGS1(Коды, "16"  , "SELL_BY"                   ,  6);
	ДобавитьКодGS1(Коды, "17"  , "EXPIRE"                    ,  6);
	ДобавитьКодGS1(Коды, "20"  , "VARIANT"                   ,  2);
	ДобавитьКодGS1(Коды, "21"  , "SERIAL"                    ,   , 20,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "22"  , "CPV"                       ,   , 20,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "240" , "ADDITIONAL_ID"             ,   , 30,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "241" , "CUSTOMER_PART_NO"          ,   , 30,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "242" , "MTO_VARIANT"               ,   ,  6);
	ДобавитьКодGS1(Коды, "243" , "PCN"                       ,   , 20,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "250" , "SECONDARY_SERIAL"          ,   , 30,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "251" , "REF_TO_SOURCE"             ,   , 30,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "253" , "GDTI"                      , 13, 17,  ТипGS1Число(), ТипGS1Строка());
	ДобавитьКодGS1(Коды, "254" , "GLN_EXTENSION_COMPONENT"   ,   , 20,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "255" , "GСТ"                       , 13, 12);
	ДобавитьКодGS1(Коды, "30"  , "VAR_COUNT"                 ,   , 8);
	ДобавитьКодGS1(Коды, "310n", "NET_WEIGHT_kg"             ,  6);
	ДобавитьКодGS1(Коды, "311n", "LENGTH_m"                  ,  6);
	ДобавитьКодGS1(Коды, "312n", "WIDTH_m"                   ,  6);
	ДобавитьКодGS1(Коды, "313n", "HEIGHT_m"                  ,  6);
	ДобавитьКодGS1(Коды, "314n", "AREA_m2"                   ,  6);
	ДобавитьКодGS1(Коды, "315n", "NET_VOLUME_l"              ,  6);
	ДобавитьКодGS1(Коды, "316n", "NET_VOLUME_m3"             ,  6);
	ДобавитьКодGS1(Коды, "320n", "NET_WEIGHT_lb"             ,  6);
	ДобавитьКодGS1(Коды, "321n", "LENGTH_i"                  ,  6);
	ДобавитьКодGS1(Коды, "322n", "LENGTH_f"                  ,  6);
	ДобавитьКодGS1(Коды, "323n", "LENGTH_y"                  ,  6);
	ДобавитьКодGS1(Коды, "324n", "WIDTH_i"                   ,  6);
	ДобавитьКодGS1(Коды, "325n", "WIDTH_f"                   ,  6);
	ДобавитьКодGS1(Коды, "326n", "WIDTH_y"                   ,  6);
	ДобавитьКодGS1(Коды, "327n", "HEIGHT_i"                  ,  6);
	ДобавитьКодGS1(Коды, "328n", "HEIGHT_f"                  ,  6);
	ДобавитьКодGS1(Коды, "329n", "HEIGHT_y"                  ,  6);
	ДобавитьКодGS1(Коды, "330n", "GROSS_WEIGHT_kg"           ,  6);
	ДобавитьКодGS1(Коды, "331n", "LENGTH_m_log"              ,  6);
	ДобавитьКодGS1(Коды, "332n", "WIDTH_m_log"               ,  6);
	ДобавитьКодGS1(Коды, "333n", "HEIGHT_m_log"              ,  6);
	ДобавитьКодGS1(Коды, "334n", "AREA_m2_log"               ,  6);
	ДобавитьКодGS1(Коды, "335n", "VOLUME_l_log"              ,  6);
	ДобавитьКодGS1(Коды, "336n", "VOLUME_m3_log"             ,  6);
	ДобавитьКодGS1(Коды, "337n", "KG_PER_m2"                 ,  6);
	ДобавитьКодGS1(Коды, "340n", "GROSS_WEIGHT_lb"           ,  6);
	ДобавитьКодGS1(Коды, "341n", "LENGTH_i_log"              ,  6);
	ДобавитьКодGS1(Коды, "342n", "LENGTH_f_log"              ,  6);
	ДобавитьКодGS1(Коды, "343n", "LENGTH_y_log"              ,  6);
	ДобавитьКодGS1(Коды, "344n", "WIDTH_i_log"               ,  6);
	ДобавитьКодGS1(Коды, "345n", "WIDTH_f_log"               ,  6);
	ДобавитьКодGS1(Коды, "346n", "WIDTH_y_log"               ,  6);
	ДобавитьКодGS1(Коды, "347n", "HEIGHT_i_log"              ,  6);
	ДобавитьКодGS1(Коды, "348n", "HEIGHT_f_log"              ,  6);
	ДобавитьКодGS1(Коды, "349n", "HEIGHT_y_log"              ,  6);
	ДобавитьКодGS1(Коды, "350n", "AREA_i2"                   ,  6);
	ДобавитьКодGS1(Коды, "351n", "AREA_f2"                   ,  6);
	ДобавитьКодGS1(Коды, "352n", "AREA_y2"                   ,  6);
	ДобавитьКодGS1(Коды, "353n", "AREA_i2_log"               ,  6);
	ДобавитьКодGS1(Коды, "354n", "AREA_f2_log"               ,  6);
	ДобавитьКодGS1(Коды, "355n", "AREA_y2_log"               ,  6);
	ДобавитьКодGS1(Коды, "356n", "NET_WEIGHT_t"              ,  6);
	ДобавитьКодGS1(Коды, "357n", "NET_VOLUME_oz"             ,  6);
	ДобавитьКодGS1(Коды, "360n", "NET_VOLUME_q"              ,  6);
	ДобавитьКодGS1(Коды, "361n", "NET_VOLUME_g"              ,  6);
	ДобавитьКодGS1(Коды, "362n", "VOLUME_q"                  ,  6);
	ДобавитьКодGS1(Коды, "363n", "VOLUME_g"                  ,  6);
	ДобавитьКодGS1(Коды, "364n", "VOLUME_i3"                 ,  6);
	ДобавитьКодGS1(Коды, "365n", "VOLUME_f3"                 ,  6);
	ДобавитьКодGS1(Коды, "366n", "VOLUME_y3"                 ,  6);
	ДобавитьКодGS1(Коды, "367n", "VOLUME_i3_log"             ,  6);
	ДобавитьКодGS1(Коды, "368n", "VOLUME_f3_log"             ,  6);
	ДобавитьКодGS1(Коды, "369n", "VOLUME_y3_log"             ,  6);
	ДобавитьКодGS1(Коды, "37"  , "COUNT"                     ,   ,  8);
	ДобавитьКодGS1(Коды, "390n", "AMOUNT"                    ,   , 15);
	ДобавитьКодGS1(Коды, "391n", "AMOUNT_ISO"                ,  3, 15);
	ДобавитьКодGS1(Коды, "392n", "PRICE"                     ,   , 15);
	ДобавитьКодGS1(Коды, "393n", "PRICE_ISO"                 ,  3, 15);
	ДобавитьКодGS1(Коды, "394n", "PRCNT_OFF"                 ,  4,   ,               ,               , Истина);
	ДобавитьКодGS1(Коды, "400" , "ORDER_NUMBER"              ,   , 30,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "401" , "GINC"                      ,   , 30,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "402" , "GSIN"                      , 17,   ,               ,               , Истина);
	ДобавитьКодGS1(Коды, "403" , "ROUTE"                     ,   , 30,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "410" , "SHIP_TO_LOC"               , 13);
	ДобавитьКодGS1(Коды, "411" , "BILL_TO"                   , 13);
	ДобавитьКодGS1(Коды, "412" , "PURCHASE_FROM"             , 13);
	ДобавитьКодGS1(Коды, "413" , "SHIP_FOR_LOC"              , 13);
	ДобавитьКодGS1(Коды, "414" , "LOC_No"                    , 13);
	ДобавитьКодGS1(Коды, "415" , "PAY_TO"                    , 13);
	ДобавитьКодGS1(Коды, "416" , "PROD_SERV_LOC"             , 13);
	ДобавитьКодGS1(Коды, "420" , "SHIP_TO_POST"              ,   , 20,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "421" , "SHIP_TO_POST_ISO"          ,  3,  9,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "422" , "ORIGIN"                    ,  3,   ,               ,               , Истина);
	ДобавитьКодGS1(Коды, "423" , "CONTRY_INITIAL_PROCESS"    ,  3, 12);
	ДобавитьКодGS1(Коды, "424" , "CONTRY_PROCESS"            ,  3,   ,               ,               , Истина);
	ДобавитьКодGS1(Коды, "425" , "CONTRY_DISASSEMBLY"        ,  3, 12);
	ДобавитьКодGS1(Коды, "426" , "CONTRY_FULL_PROCESS"       ,  3,   ,               ,               , Истина);
	ДобавитьКодGS1(Коды, "427" , "ORIGIN_SUBDIVISION"        ,   ,  3,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "7001", "NSN"                       , 13,   ,               ,               , Истина);
	ДобавитьКодGS1(Коды, "7002", "MEAT_CUT"                  ,   , 30,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "7003", "EXPIRY_TIME"               , 10,   ,               ,               , Истина);
	ДобавитьКодGS1(Коды, "7004", "ACTIVE_POTENCY"            ,   ,  4);
	ДобавитьКодGS1(Коды, "7005", "CATCH_AREA"                ,   , 12,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "7006", "FIRST_FREEZE_DATE"         ,  6,   ,               ,               , Истина);
	ДобавитьКодGS1(Коды, "7007", "HARVEST_DATE"              ,  6,  6);
	ДобавитьКодGS1(Коды, "7008", "AQUATIC_SPECIES"           ,   ,  3,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "7009", "FISHING_GEAR_TYPE"         ,   , 10,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "7010", "PROD_METHOD"               ,   ,  2,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "7020", "REFURB_LOT"                ,   , 20,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "7021", "FUNC_STAT"                 ,   , 20,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "7022", "REV_STAT"                  ,   , 20,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "7023", "GIAI_ASSEMBLY"             ,   , 30,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "703s", "PROCESSOR_s"               ,  3, 27,  ТипGS1Число(), ТипGS1Строка());
	ДобавитьКодGS1(Коды, "710" , "NHRN_PZN"                  ,   , 20,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "711" , "NHRN_CIP"                  ,   , 20,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "712" , "NHRN_CN"                   ,   , 20,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "713" , "NHRN_DRN"                  ,   , 20,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "8001", "DIMENSIONS"                , 14,   ,               ,               , Истина);
	ДобавитьКодGS1(Коды, "8002", "CMT_No"                    ,   , 20,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "8003", "GRAI"                      , 14, 16,  ТипGS1Число(), ТипGS1Строка());
	ДобавитьКодGS1(Коды, "8004", "GIAI"                      ,   , 30,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "8005", "PRICE_PER_UNIT"            ,  6,   ,               ,               , Истина);
	ДобавитьКодGS1(Коды, "8006", "ITIP_or_GCTIN"             , 18,   ,               ,               , Истина);
	ДобавитьКодGS1(Коды, "8007", "IBAN"                      ,   , 34,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "8008", "PROD_TIME"                 ,  8, 4,               ,               , Истина);
	ДобавитьКодGS1(Коды, "8010", "CPID"                      ,   , 30,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "8011", "CPID_SERIAL"               ,   , 12);
	ДобавитьКодGS1(Коды, "8012", "VERSION"                   ,   , 20,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "8017", "GSRN_PROVIDER"             , 18,   ,               ,               , Истина);
	ДобавитьКодGS1(Коды, "8018", "GSRN_RECIPIENT"            , 18,   ,               ,               , Истина);
	ДобавитьКодGS1(Коды, "8019", "SRIN"                      ,   , 10);
	ДобавитьКодGS1(Коды, "8020", "REF_No"                    ,   , 25,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "8110", "COUPON_CODE_ID"            ,   , 70,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "8111", "POINTS"                    ,  4,   ,               ,               , Истина);
	ДобавитьКодGS1(Коды, "8112", "PAPPERLESS_COUPON_CODE_ID" ,   , 70,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "8200", "PRODUCT_URL"               ,   , 70,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "90"  , "INTERNAL"                  ,   , 30,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "91"  , "INTERNAL1"                 ,   , 90,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "92"  , "INTERNAL2"                 ,   , 90,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "93"  , "INTERNAL3"                 ,   , 90,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "94"  , "INTERNAL4"                 ,   , 90,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "95"  , "INTERNAL5"                 ,   , 90,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "96"  , "INTERNAL6"                 ,   , 90,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "97"  , "INTERNAL7"                 ,   , 90,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "98"  , "INTERNAL8"                 ,   , 90,               , ТипGS1Строка());
	ДобавитьКодGS1(Коды, "99"  , "INTERNAL9"                 ,   , 90,               , ТипGS1Строка());
	
	Возврат Коды
	
КонецФункции

Функция ТипGS1Число() Экспорт
	
	Возврат "N";
	
КонецФункции

Функция ТипGS1Строка() Экспорт
	
	Возврат "X";
	
КонецФункции

Функция ТипШтрихкодаИВидУпаковки() Экспорт
	
	Данные = Новый Структура;
	Данные.Вставить("ТипШтрихкода", ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.ПустаяСсылка"));
	Данные.Вставить("ВидУпаковки",  ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.ПустаяСсылка"));
	
	Возврат Данные;
	
КонецФункции

Процедура ДобавитьКодGS1(Коды, Код, Имя, ФиксированнаяДлина = 0, ПеременнаяДлина = 0, ТипФиксированногоЗначения = Неопределено, ТипПеременногоЗначения = Неопределено, ЕстьРазделитель = Неопределено);
	
	ВставляемыеКоды = Новый Массив;
	ПоследнийСимволКода = Прав(Код, 1);
	
	Если СтрНайти("0123456789", ПоследнийСимволКода) = 0 Тогда
		
		КодБезПоследнегоСимвола = Лев(Код, СтрДлина(Код) - 1);
		
		Если ПоследнийСимволКода = "n" Тогда
			Описание = ОписаниеКода(КодБезПоследнегоСимвола, Имя, ФиксированнаяДлина, ПеременнаяДлина, ТипФиксированногоЗначения, ТипПеременногоЗначения, ЕстьРазделитель);
			Описание.ЕстьПоложениеДесятичнойТочки = Истина;
			Коды.Вставить(КодБезПоследнегоСимвола, Описание);
		Иначе
			Для Индекс = 0 По 9 Цикл
				НовыйКод = КодБезПоследнегоСимвола + Строка(Индекс);
				Коды.Вставить(НовыйКод, ОписаниеКода(НовыйКод, Имя, ФиксированнаяДлина, ПеременнаяДлина, ТипФиксированногоЗначения, ТипПеременногоЗначения, ЕстьРазделитель));
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		Коды.Вставить(Код, ОписаниеКода(Код, Имя, ФиксированнаяДлина, ПеременнаяДлина, ТипФиксированногоЗначения, ТипПеременногоЗначения, ЕстьРазделитель));
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеКода(Код, Имя, ФиксированнаяДлина = 0, ПеременнаяДлина = 0, ТипФиксированногоЗначения = Неопределено, ТипПеременногоЗначения = Неопределено, ЕстьРазделитель = Неопределено);
	
	ОписаниеКода = Новый Структура;
	ОписаниеКода.Вставить("Код", Код);
	ОписаниеКода.Вставить("Имя", Имя);
	ОписаниеКода.Вставить("ФиксированнаяДлина", ФиксированнаяДлина);
	
	Если ФиксированнаяДлина > 0 Тогда
		ОписаниеКода.Вставить("ТипФиксированногоЗначения", ?(ТипФиксированногоЗначения = Неопределено, ТипGS1Число(), ТипФиксированногоЗначения));
	КонецЕсли;
	
	ОписаниеКода.Вставить("ПеременнаяДлина", ПеременнаяДлина);
	
	Если ПеременнаяДлина > 0 Тогда
		ОписаниеКода.Вставить("ТипПеременногоЗначения", ?(ТипПеременногоЗначения = Неопределено, ТипGS1Число(), ТипПеременногоЗначения));
	КонецЕсли;
	
	ОписаниеКода.Вставить("ЕстьРазделитель", ?(ПеременнаяДлина > 0, Истина, ЗначениеЗаполнено(ЕстьРазделитель)));
	ОписаниеКода.Вставить("ЕстьПоложениеДесятичнойТочки", Ложь);
	
	Возврат ОписаниеКода;
	
КонецФункции

#КонецОбласти

#Область РазборСтрокиGS1

// Разобрать строку штрихкода в соответствии со стандартом GS1.
//
Функция РазобратьСтрокуШтрихкодаGS1(Знач Штрихкод) Экспорт
	
	РезультатРазбора = Новый Структура;
	РезультатРазбора.Вставить("Разобран", Ложь);
	РезультатРазбора.Вставить("ОписаниеОшибки");
	РезультатРазбора.Вставить("ПредставлениеШтрихкода", "");
	РезультатРазбора.Вставить("ДанныеШтрихкода", Новый Соответствие);
	
	КодыGS1 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПовтИсп.КодыGS1();
	
	Если СтрНачинаетсяС(Штрихкод, "(") Тогда
		РазобратьСтрокуШтрихкодаGS1СоСкобками(Штрихкод, РезультатРазбора, КодыGS1);
	Иначе
		Разделитель = РазделительGS1(); 
		ЧастиШтрихкода = СтрРазделить(Штрихкод, Разделитель, Ложь);
		Для Каждого ЧастьБезРазделителей Из ЧастиШтрихкода Цикл
			РазобратьСтрокуШтрихкодаGS1Служебный(ЧастьБезРазделителей, РезультатРазбора, КодыGS1);
		КонецЦикла;
	КонецЕсли;
	
	Возврат РезультатРазбора;
	
КонецФункции

Процедура РазобратьСтрокуШтрихкодаGS1СоСкобками(Штрихкод, РезультатРазбора, КодыGS1) Экспорт
	
	Если СтрНайти(Штрихкод, Символ(29)) = 0 Тогда 
		ПредставлениеШК = Штрихкод; //Уже нормализован
	Иначе
		ПредставлениеШК = РозничноеВыбытиеИСМПТКВызовСервера.НормализованныйШтрихкод(Штрихкод);
	КонецЕсли;
	
	РезультатРазбора.ПредставлениеШтрихкода = ПредставлениеШК;
	
	ДлинаШтрихкода = СтрДлина(Штрихкод);
	МинимальнаяДлинаИдентификатораПрименения  = 2;
	МаксимальнаяДлинаИдентификатораПрименения = 4;
	
	НомерСимвола = 1;
	Пока НомерСимвола <= ДлинаШтрихкода Цикл
		
		Если Сред(Штрихкод, НомерСимвола, 1) <> "(" Тогда
			РезультатРазбора.ОписаниеОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
														НСтр("ru = 'Номер символа %1. Отсутствует символ ""("".'"), 
														НомерСимвола);
			Возврат;
		КонецЕсли;
		
		НомерСимвола = НомерСимвола + 1;
		
		Позиция = СтрНайти(Штрихкод, ")",, НомерСимвола);
		Если Позиция = 0 Тогда
			РезультатРазбора.ОписаниеОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
														НСтр("ru = 'Номер символа %1. Отсутствует символ "")"".'"), 
														НомерСимвола);
			Возврат;
		КонецЕсли;
		
		ИдентификаторПрименения = Сред(Штрихкод, НомерСимвола, Позиция - НомерСимвола);
		ДлинаИдентификатора = СтрДлина(ИдентификаторПрименения);
		
		Если ДлинаИдентификатора < МинимальнаяДлинаИдентификатораПрименения Или ДлинаИдентификатора > МаксимальнаяДлинаИдентификатораПрименения Тогда
			РезультатРазбора.ОписаниеОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
														НСтр("ru = 'Номер символа %1. Неизвестный идентификатор применения(AI) %2.'"),
														НомерСимвола, 
														ИдентификаторПрименения);
			Возврат;
		КонецЕсли;
		
		ПоложениеДесятичнойТочкиСтрокой = "";
		ОписаниеКода = КодыGS1[ИдентификаторПрименения];
		Если ОписаниеКода = Неопределено Тогда
			Если ДлинаИдентификатора = МаксимальнаяДлинаИдентификатораПрименения Тогда
				ОписаниеКода = КодыGS1[Лев(ИдентификаторПрименения, МаксимальнаяДлинаИдентификатораПрименения - 1)];
				ПоложениеДесятичнойТочкиСтрокой = Прав(ИдентификаторПрименения, 1);
			КонецЕсли;
		КонецЕсли;
		
		Если ОписаниеКода = Неопределено Тогда
			РезультатРазбора.ОписаниеОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
														НСтр("ru = 'Номер символа %1. Неизвестный идентификатор применения(AI) %2.'"), 
														НомерСимвола, 
														ИдентификаторПрименения);
			Возврат;
		КонецЕсли;
		
		НомерСимвола = Позиция + 1;
		
		Значение = "";
		Если ОписаниеКода.ФиксированнаяДлина > 0 Тогда
			Значение = Сред(ШтрихКод, НомерСимвола, ОписаниеКода.ФиксированнаяДлина);
			Если СтрДлина(Значение) <> ОписаниеКода.ФиксированнаяДлина Тогда
				РезультатРазбора.ОписаниеОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
														НСтр("ru = 'Номер символа %5. Длина значения (%3) для идентификатора применения(AI) ""%1 %2"" меньше требуемой (%4)'"), 
														ИдентификаторПрименения, 
														ОписаниеКода.Имя, 
														СтрДлина(Значение), 
														ОписаниеКода.ФиксированнаяДлина, 
														НомерСимвола);
				Возврат;
			КонецЕсли;
			
			Если ОписаниеКода.ТипФиксированногоЗначения = ТипGS1Число() Тогда
				Если Не ОбщегоНазначенияИСМПТККлиентСервер.ТолькоЦифрыВСтроке(Значение) Тогда
					РезультатРазбора.ОписаниеОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
														НСтр("ru = 'Номер символа %4. Значение (%3) для идентификатора применения(AI) ""%1 %2"" должно содержать только цифры'"), 
														ИдентификаторПрименения, 
														ОписаниеКода.Имя, 
														СтрДлина(Значение), 
														НомерСимвола);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			НомерСимвола = НомерСимвола + ОписаниеКода.ФиксированнаяДлина;
		КонецЕсли;
		
		Если ОписаниеКода.ПеременнаяДлина > 0 И Позиция < ДлинаШтрихкода Тогда
			
			ПозицияСледующегоИдентификатора = СтрНайти(Штрихкод, "(",, НомерСимвола);
			ПравильныйИдентификатор = Ложь;
			
			Пока ПозицияСледующегоИдентификатора > 0 И Не ПравильныйИдентификатор Цикл
				
				ПозицияЗакрывающегоИдентификатора = СтрНайти(Штрихкод, ")",,ПозицияСледующегоИдентификатора);
				ПредполагаемыйИдентификатор = Сред(Штрихкод, ПозицияСледующегоИдентификатора + 1,ПозицияЗакрывающегоИдентификатора - ПозицияСледующегоИдентификатора - 1);
				ПравильныйИдентификатор 	= СтрДлина(ПредполагаемыйИдентификатор) > 1 И СтрДлина(ПредполагаемыйИдентификатор) < 5 И ОбщегоНазначенияИСМПТККлиентСервер.ТолькоЦифрыВСтроке(ПредполагаемыйИдентификатор);
				
				Если ПозицияСледующегоИдентификатора >= ДлинаШтрихкода Тогда
					ПозицияСледующегоИдентификатора = 0
				ИначеЕсли Не ПравильныйИдентификатор Тогда
					ПозицияСледующегоИдентификатора = СтрНайти(Штрихкод, "(",, ПозицияСледующегоИдентификатора  + 1);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПозицияСледующегоИдентификатора > 0 Тогда
				ЗначениеПеременное = Сред(Штрихкод, НомерСимвола, ПозицияСледующегоИдентификатора - НомерСимвола);
			Иначе
				ЗначениеПеременное = Сред(Штрихкод, НомерСимвола);
			КонецЕсли;
			
			Если СтрДлина(ЗначениеПеременное) > ОписаниеКода.ПеременнаяДлина Тогда
				РезультатРазбора.ОписаниеОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
												  НСтр("ru = 'Номер символа %5. Длина значения (%3) переменной части для идентификатора применения(AI) ""%1 %2"" больше требуемой (%4).'"), 
												  ИдентификаторПрименения, 
												  ОписаниеКода.Имя, 
												  СтрДлина(ЗначениеПеременное), 
												  ОписаниеКода.ПеременнаяДлина, 
												  НомерСимвола);
				Возврат;
			КонецЕсли;
			
			Если ОписаниеКода.ТипПеременногоЗначения = ТипGS1Число() Тогда
				
				Если Не ОбщегоНазначенияИСМПТККлиентСервер.ТолькоЦифрыВСтроке(ЗначениеПеременное) Тогда
					РезультатРазбора.ОписаниеОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
													  НСтр("ru = 'Номер символа %4. Значение (%3) для идентификатора применения(AI) ""%1 %2"" должно содержать только цифры.'"), 
													  ИдентификаторПрименения, 
													  ОписаниеКода.Имя, 
													  СтрДлина(ЗначениеПеременное), 
													  НомерСимвола);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			НомерСимвола = НомерСимвола + СтрДлина(ЗначениеПеременное);
			Значение = Значение + ЗначениеПеременное;
		КонецЕсли;
		
		ПоложениеДесятичнойТочки = 0;
		Если Не ПустаяСтрока(ПоложениеДесятичнойТочкиСтрокой) Тогда
			
			ПоложениеДесятичнойТочки = Число(ПоложениеДесятичнойТочкиСтрокой);
			
			Если ПоложениеДесятичнойТочки > 0 Тогда
				Для Индекс = 0 По ПоложениеДесятичнойТочки - СтрДлина(Значение) Цикл
					Значение = "0" + Значение;
				КонецЦикла;
				Значение = Лев(Значение, СтрДлина(Значение) - ПоложениеДесятичнойТочки) + "." + Прав(Значение, ПоложениеДесятичнойТочки);
			КонецЕсли;
			
		КонецЕсли;
		
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("ПоложениеДесятичнойТочки", ПоложениеДесятичнойТочки);
		ОписаниеДанных.Вставить("Значение", Значение);
		
		РезультатРазбора.ДанныеШтрихкода.Вставить(ОписаниеКода.Код, ОписаниеДанных);
		
	КонецЦикла;
	
	РезультатРазбора.Разобран = Истина;
	
КонецПроцедуры

Процедура РазобратьСтрокуШтрихкодаGS1Служебный(Штрихкод, РезультатРазбора, КодыGS1) Экспорт
	
	ДлинаШтрихкода = СтрДлина(Штрихкод);
	ПредставлениеШтрихкода = "";
	
	НомерСимвола = 1;
	Пока НомерСимвола <= ДлинаШтрихкода Цикл
		
		ИдентификаторПрименения = Сред(Штрихкод, НомерСимвола, 2);
		ОписаниеКода = КодыGS1[ИдентификаторПрименения];
		Если ОписаниеКода = Неопределено Тогда
			ИдентификаторПрименения = Сред(Штрихкод, НомерСимвола, 3);
			ОписаниеКода = КодыGS1[ИдентификаторПрименения];
			Если ОписаниеКода = Неопределено Тогда
				ИдентификаторПрименения = Сред(Штрихкод, НомерСимвола, 4);
				ОписаниеКода = КодыGS1[ИдентификаторПрименения];
				Если ОписаниеКода = Неопределено Тогда
					РезультатРазбора.ОписаниеОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
													  НСтр("ru = 'Неизвестный идентификатор применения(AI) %1.'"), 
													  ИдентификаторПрименения);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НомерСимвола = НомерСимвола + СтрДлина(ИдентификаторПрименения);
		
		ПоложениеДесятичнойТочкиСтрокой = "";
		Если ОписаниеКода.ЕстьПоложениеДесятичнойТочки Тогда
			ПоложениеДесятичнойТочкиСтрокой = Сред(Штрихкод, НомерСимвола, 1);
			НомерСимвола = НомерСимвола + 1;
		КонецЕсли;
		
		Значение = "";
		Если ОписаниеКода.ФиксированнаяДлина > 0 Тогда
			Значение = Сред(ШтрихКод, НомерСимвола, ОписаниеКода.ФиксированнаяДлина);
			Если СтрДлина(Значение) <> ОписаниеКода.ФиксированнаяДлина Тогда
				РезультатРазбора.ОписаниеОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Длина значения (%3) для идентификатора применения(AI) ""%1 %2"" меньше требуемой (%4)'"),
					ИдентификаторПрименения, ОписаниеКода.Имя, СтрДлина(Значение), ОписаниеКода.ФиксированнаяДлина);
				Возврат;
			КонецЕсли;
			Если ОписаниеКода.ТипФиксированногоЗначения = ТипGS1Число() Тогда
				Если Не ОбщегоНазначенияИСМПТККлиентСервер.ТолькоЦифрыВСтроке(Значение) Тогда
					РезультатРазбора.ОписаниеОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Значение (%3) для идентификатора применения(AI) ""%1 %2"" должно содержать только цифры'"),
						ИдентификаторПрименения, ОписаниеКода.Имя, СтрДлина(Значение));
					Возврат;
				КонецЕсли;
			КонецЕсли;
			НомерСимвола = НомерСимвола + ОписаниеКода.ФиксированнаяДлина;
		КонецЕсли;
		Если ОписаниеКода.ПеременнаяДлина > 0 Тогда
			ЗначениеПеременное = Сред(Штрихкод, НомерСимвола);
			Если СтрДлина(ЗначениеПеременное) > ОписаниеКода.ПеременнаяДлина Тогда
				РезультатРазбора.ОписаниеОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Длина значения (%3) переменной части для идентификатора применения(AI) ""%1 %2"" больше требуемой (%4)'"),
					ИдентификаторПрименения, ОписаниеКода.Имя, СтрДлина(ЗначениеПеременное), ОписаниеКода.ПеременнаяДлина);
				Возврат;
			КонецЕсли;
			Если ОписаниеКода.ТипПеременногоЗначения = ТипGS1Число() Тогда
				Если Не ОбщегоНазначенияИСМПТККлиентСервер.ТолькоЦифрыВСтроке(ЗначениеПеременное) Тогда
					РезультатРазбора.ОписаниеОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Значение (%3) для идентификатора применения(AI) ""%1 %2"" должно содержать только цифры'"),
							ИдентификаторПрименения, ОписаниеКода.Имя, СтрДлина(ЗначениеПеременное));
					Возврат;
				КонецЕсли;
			КонецЕсли;
			НомерСимвола = НомерСимвола + СтрДлина(ЗначениеПеременное);
			Значение 	 = Значение + ЗначениеПеременное;
		КонецЕсли;
		
		ПредставлениеШтрихкода = ПредставлениеШтрихкода + "(" + ИдентификаторПрименения + ПоложениеДесятичнойТочкиСтрокой + ")" + Значение;
		
		ПоложениеДесятичнойТочки = 0;
		Если Не ПустаяСтрока(ПоложениеДесятичнойТочкиСтрокой) Тогда
			ПоложениеДесятичнойТочки = Число(ПоложениеДесятичнойТочкиСтрокой);
			Если ПоложениеДесятичнойТочки > 0 Тогда
				Для Индекс = 0 По ПоложениеДесятичнойТочки - СтрДлина(Значение) Цикл
					Значение = "0" + Значение;
				КонецЦикла;
				Значение = Лев(Значение, СтрДлина(Значение) - ПоложениеДесятичнойТочки) + "." + Прав(Значение, ПоложениеДесятичнойТочки);
			КонецЕсли;
		КонецЕсли;
		
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("ПоложениеДесятичнойТочки", ПоложениеДесятичнойТочки);
		ОписаниеДанных.Вставить("Значение", Значение);
		РезультатРазбора.ДанныеШтрихкода.Вставить(ОписаниеКода.Код, ОписаниеДанных);
		
	КонецЦикла;
	
	РезультатРазбора.ПредставлениеШтрихкода = РезультатРазбора.ПредставлениеШтрихкода + ПредставлениеШтрихкода;
	РезультатРазбора.Разобран = Истина;
	
КонецПроцедуры

Функция ВариантыРазбораШтрихкодаGS1БезРазделителей(Штрихкод) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	РезультатРазбора = Новый Структура;
	РезультатРазбора.Вставить("ЗначениеПеременное");
	РезультатРазбора.Вставить("ЗначениеПеременноеОбработано", Ложь);
	РезультатРазбора.Вставить("ОписаниеКода");
	РезультатРазбора.Вставить("ОшибкаРазбора", Ложь);
	РезультатРазбора.Вставить("Разобран", 	   Ложь);
	РезультатРазбора.Вставить("ОписаниеОшибки");
	РезультатРазбора.Вставить("ПредставлениеШтрихкода", "");
	РезультатРазбора.Вставить("ДанныеШтрихкода", Новый Соответствие);
	
	КодыGS1 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПовтИсп.КодыGS1();
	
	ЧастиШтрихкода = Новый Массив;
	ЧастиШтрихкода.Добавить(Штрихкод);
	
	ЭлементСтека = Новый Структура;
	ЭлементСтека.Вставить("ЧастиШтрихкода",   ЧастиШтрихкода);
	ЭлементСтека.Вставить("РезультатРазбора", РезультатРазбора);
	
	Стек = Новый Массив;
	Стек.Добавить(ЭлементСтека);
	
	Пока Стек.Количество() > 0 Цикл
		
		ЭлементСтека = Стек[0];
		Стек.Удалить(0);
		
		Индекс = 0; 
		Для Каждого ЧастьШтрихкода Из ЭлементСтека.ЧастиШтрихкода Цикл
			
			Индекс = Индекс + 1;
			ЭтоПоследняяЧасть = (ЭлементСтека.ЧастиШтрихкода.Количество() = Индекс);
			РезультатРазбора = ЭлементСтека.РезультатРазбора;
			ПродолжитьРазборШтрихкодаGS1БезРазделителей(ЧастьШтрихкода, РезультатРазбора, КодыGS1);
			
			Если РезультатРазбора.ОшибкаРазбора Тогда
				Прервать;
			ИначеЕсли РезультатРазбора.Разобран И ЭтоПоследняяЧасть Тогда
				
				Если ВозвращаемоеЗначение = Неопределено Тогда
					ВозвращаемоеЗначение  = Новый Массив;
				КонецЕсли;
				
				ЭлементРезультата = Новый Структура;
				ЭлементРезультата.Вставить("РезультатРазбора",       РезультатРазбора);
				ЭлементРезультата.Вставить("ПредставлениеШтрихкода", РезультатРазбора.ПредставлениеШтрихкода);
				
				ВозвращаемоеЗначение.Добавить(ЭлементРезультата);
				Прервать;
				
			ИначеЕсли ЗначениеЗаполнено(РезультатРазбора.ЗначениеПеременное) И Не РезультатРазбора.ЗначениеПеременноеОбработано Тогда
				
				МаксимальнаяДлинаЗначенияПеременнойДлины = Мин(РезультатРазбора.ОписаниеКода.ПеременнаяДлина, СтрДлина(РезультатРазбора.ЗначениеПеременное));
				
				Для ВариантДлины = 1 По МаксимальнаяДлинаЗначенияПеременнойДлины Цикл
					
					Часть1 = РезультатРазбора.ОписаниеКода.Код + Лев(РезультатРазбора.ЗначениеПеременное, ВариантДлины);
					Часть2 = Сред(РезультатРазбора.ЗначениеПеременное, ВариантДлины + 1);
					
					Если ЗначениеЗаполнено(Часть2) И СтрДлина(Часть2) <= 2 Тогда
						Продолжить;
					КонецЕсли;
					
					ЧастиШтрихкода = Новый Массив;
					ЧастиШтрихкода.Добавить(Часть1);
					Если ЗначениеЗаполнено(Часть2) Тогда
						ЧастиШтрихкода.Добавить(Часть2);
					КонецЕсли;
					
					РезультатРазбораПродолжение = Новый Структура;
					РезультатРазбораПродолжение.Вставить("ЗначениеПеременное",           РезультатРазбора.ЗначениеПеременное);
					РезультатРазбораПродолжение.Вставить("ЗначениеПеременноеОбработано", Истина);
					РезультатРазбораПродолжение.Вставить("ОписаниеКода");
					РезультатРазбораПродолжение.Вставить("ОшибкаРазбора", Ложь);
					РезультатРазбораПродолжение.Вставить("Разобран", 	  Ложь);
					РезультатРазбораПродолжение.Вставить("ОписаниеОшибки");
					РезультатРазбораПродолжение.Вставить("ПредставлениеШтрихкода", РезультатРазбора.ПредставлениеШтрихкода);
					РезультатРазбораПродолжение.Вставить("ДанныеШтрихкода", 	   ОбщегоНазначенияИСМПТККлиентСервер.СкопироватьРекурсивно(РезультатРазбора.ДанныеШтрихкода));
					
					ЭлементСтека = Новый Структура;
					ЭлементСтека.Вставить("ЧастиШтрихкода",   ЧастиШтрихкода);
					ЭлементСтека.Вставить("РезультатРазбора", РезультатРазбораПродолжение);
					
					Стек.Добавить(ЭлементСтека);
					
				КонецЦикла
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ПродолжитьРазборШтрихкодаGS1БезРазделителей(Штрихкод, РезультатРазбора, КодыGS1)
	
	ДлинаШтрихкода = СтрДлина(Штрихкод);
	ПредставлениеШтрихкода = РезультатРазбора.ПредставлениеШтрихкода;
	
	СоответствиеИдентификаторовДат = Новый Соответствие;
	СоответствиеИдентификаторовДат.Вставить("11", Истина);
	СоответствиеИдентификаторовДат.Вставить("12", Истина);
	СоответствиеИдентификаторовДат.Вставить("13", Истина);
	СоответствиеИдентификаторовДат.Вставить("15", Истина);
	СоответствиеИдентификаторовДат.Вставить("17", Истина);
	
	НомерСимвола = 1;
	Пока НомерСимвола <= ДлинаШтрихкода Цикл
		
		ИдентификаторПрименения = Сред(Штрихкод, НомерСимвола, 2);
		ОписаниеКода = КодыGS1[ИдентификаторПрименения];
		
		Если ОписаниеКода = Неопределено Тогда
			
			ИдентификаторПрименения = Сред(Штрихкод, НомерСимвола, 3);
			ОписаниеКода = КодыGS1[ИдентификаторПрименения];
			
			Если ОписаниеКода = Неопределено Тогда
				
				ИдентификаторПрименения = Сред(Штрихкод, НомерСимвола, 4);
				ОписаниеКода = КодыGS1[ИдентификаторПрименения];
				
				Если ОписаниеКода = Неопределено Тогда
					РезультатРазбора.ОшибкаРазбора  = Истина;
					РезультатРазбора.ОписаниеОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
													  НСтр("ru = 'Неизвестный идентификатор применения(AI) %1.'"), ИдентификаторПрименения);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ОшибкаСовместногоПрименения0102 = Ложь;
		
		Если ИдентификаторПрименения = "01" Тогда
			Если РезультатРазбора.ДанныеШтрихкода["02"] <> Неопределено Тогда
				ОшибкаСовместногоПрименения0102 = Истина;
			КонецЕсли;
			
		ИначеЕсли ИдентификаторПрименения = "02" Тогда
			Если РезультатРазбора.ДанныеШтрихкода["01"] <> Неопределено Тогда
				ОшибкаСовместногоПрименения0102 = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ОшибкаСовместногоПрименения0102 Тогда
			
			РезультатРазбора.ОшибкаРазбора = Истина;
			РезультатРазбора.ОписаниеОшибки = НСтр("ru = 'Идентификатор применения (02) использован вместе с идентификатором (01).'");
			Возврат;
			
		КонецЕсли;
		
		Если РезультатРазбора.ДанныеШтрихкода[ИдентификаторПрименения] <> Неопределено Тогда
			
			РезультатРазбора.ОшибкаРазбора = Истина;
			РезультатРазбора.ОписаниеОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
											  НСтр("ru = 'Идентификатор применения (%1) дублируется.'"), ИдентификаторПрименения);
			Возврат;
		КонецЕсли;
		
		НомерСимвола = НомерСимвола + СтрДлина(ИдентификаторПрименения);
		
		ПоложениеДесятичнойТочкиСтрокой = "";
		
		Если ОписаниеКода.ЕстьПоложениеДесятичнойТочки Тогда
			
			ПоложениеДесятичнойТочкиСтрокой = Сред(Штрихкод, НомерСимвола, 1);
			
			Если Не ОбщегоНазначенияИСМПТККлиентСервер.ТолькоЦифрыВСтроке(ПоложениеДесятичнойТочкиСтрокой) Тогда
				
				РезультатРазбора.ОшибкаРазбора = Истина;
				РезультатРазбора.ОписаниеОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
												  НСтр("ru = 'Положение десятичной точки (%1) в идентификаторе (%2) задано неверно.'"), ПоложениеДесятичнойТочкиСтрокой, ИдентификаторПрименения);
				Возврат;
				
			КонецЕсли;
			НомерСимвола = НомерСимвола + 1;
		КонецЕсли;
		
		Значение = "";
		Если ОписаниеКода.ФиксированнаяДлина > 0 Тогда
			
			Значение = Сред(ШтрихКод, НомерСимвола, ОписаниеКода.ФиксированнаяДлина);
			
			Если СтрДлина(Значение) <> ОписаниеКода.ФиксированнаяДлина Тогда
				
				РезультатРазбора.ОшибкаРазбора = Истина;
				РезультатРазбора.ОписаниеОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
												  НСтр("ru = 'Длина значения (%3) для идентификатора применения(AI) ""%1 %2"" меньше требуемой (%4)'"),
												  ИдентификаторПрименения, ОписаниеКода.Имя, СтрДлина(Значение), ОписаниеКода.ФиксированнаяДлина);
				Возврат;
				
			КонецЕсли;
			
			Если ОписаниеКода.ТипФиксированногоЗначения = ТипGS1Число() Тогда
				
				Если Не ОбщегоНазначенияИСМПТККлиентСервер.ТолькоЦифрыВСтроке(Значение) Тогда
					
					РезультатРазбора.ОшибкаРазбора = Истина;
					РезультатРазбора.ОписаниеОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
													  НСтр("ru = 'Значение (%3) для идентификатора применения(AI) ""%1 %2"" должно содержать только цифры'"),
													  ИдентификаторПрименения, ОписаниеКода.Имя, СтрДлина(Значение));
					Возврат;
					
				КонецЕсли;
			КонецЕсли;
			НомерСимвола = НомерСимвола + ОписаниеКода.ФиксированнаяДлина;
		КонецЕсли;
		
		Если РезультатРазбора.ЗначениеПеременное = Неопределено
			И ОписаниеКода.ПеременнаяДлина > 0
			И Не РезультатРазбора.ЗначениеПеременноеОбработано Тогда
			
			ЗначениеПеременное = Сред(Штрихкод, НомерСимвола);
			РезультатРазбора.Разобран 				= Ложь;
			РезультатРазбора.ПредставлениеШтрихкода = ПредставлениеШтрихкода;
			РезультатРазбора.ОписаниеКода 			= ОписаниеКода;
			РезультатРазбора.ЗначениеПеременное 	= ЗначениеПеременное;
			
			Возврат;
			
		КонецЕсли;
		
		Если ОписаниеКода.ПеременнаяДлина > 0 Тогда
			
			ЗначениеПеременное = Сред(Штрихкод, НомерСимвола);
			
			Если СтрДлина(ЗначениеПеременное) > ОписаниеКода.ПеременнаяДлина Тогда
				РезультатРазбора.ОшибкаРазбора = Истина;
				РезультатРазбора.ОписаниеОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
												  НСтр("ru = 'Длина значения (%3) переменной части для идентификатора применения(AI) ""%1 %2"" больше требуемой (%4)'"),
												  ИдентификаторПрименения, ОписаниеКода.Имя, СтрДлина(ЗначениеПеременное), ОписаниеКода.ПеременнаяДлина);
				Возврат;
				
			КонецЕсли;
			
			Если ОписаниеКода.ТипПеременногоЗначения = ТипGS1Число() Тогда
				Если Не ОбщегоНазначенияИСМПТККлиентСервер.ТолькоЦифрыВСтроке(ЗначениеПеременное) Тогда
					
					РезультатРазбора.ОшибкаРазбора = Истина;
					РезультатРазбора.ОписаниеОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
													  НСтр("ru = 'Значение (%3) для идентификатора применения(AI) ""%1 %2"" должно содержать только цифры'"),
													  ИдентификаторПрименения, ОписаниеКода.Имя, СтрДлина(ЗначениеПеременное));
					Возврат;
					
				КонецЕсли;
			КонецЕсли;
			
			НомерСимвола = НомерСимвола + СтрДлина(ЗначениеПеременное);
			Значение 	 = Значение + ЗначениеПеременное;
			
		КонецЕсли;
		
		ПредставлениеШтрихкода = ПредставлениеШтрихкода + "(" + ИдентификаторПрименения + ПоложениеДесятичнойТочкиСтрокой + ")" + Значение;
		
		ПоложениеДесятичнойТочки = 0;
		
		Если Не ПустаяСтрока(ПоложениеДесятичнойТочкиСтрокой) Тогда
			
			ПоложениеДесятичнойТочки = Число(ПоложениеДесятичнойТочкиСтрокой);
			
			Если ПоложениеДесятичнойТочки > 0 Тогда
				
				Для Индекс = 0 По ПоложениеДесятичнойТочки - СтрДлина(Значение) Цикл
					Значение = "0" + Значение;
				КонецЦикла;
				
				Значение = Лев(Значение, СтрДлина(Значение) - ПоложениеДесятичнойТочки) + "." + Прав(Значение, ПоложениеДесятичнойТочки);
			КонецЕсли;
			
		КонецЕсли;
		
		// Контроль даты yyMMdd
		ОшибкаКонтроляДаты = Ложь;
		Если СоответствиеИдентификаторовДат[ИдентификаторПрименения] <> Неопределено Тогда
			Попытка
				Месяц = Число(Сред(Значение, 3, 2));
			Исключение
				ОшибкаКонтроляДаты = Истина;
			КонецПопытки;
			
			Если Месяц > 12 Тогда
				ОшибкаКонтроляДаты = Истина;
			КонецЕсли;
			
			Попытка
				День = Число(Сред(Значение, 5, 2));
			Исключение
				ОшибкаКонтроляДаты = Истина;
			КонецПопытки;
			
			Если День > 31 Тогда
				ОшибкаКонтроляДаты = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОшибкаКонтроляДаты Тогда
			
			РезультатРазбора.ОшибкаРазбора = Истина;
			РезультатРазбора.ОписаниеОшибки = НСтр("ru = 'Ошибка формата даты.'");
			
			Возврат;
			
		КонецЕсли;
		
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("ПоложениеДесятичнойТочки", ПоложениеДесятичнойТочки);
		ОписаниеДанных.Вставить("Значение", Значение);
		РезультатРазбора.ДанныеШтрихкода.Вставить(ОписаниеКода.Код, ОписаниеДанных);
		
		// Новый идентификатор применения
		Если ЗначениеЗаполнено(РезультатРазбора.ЗначениеПеременное) Тогда
			РезультатРазбора.ЗначениеПеременное = Неопределено;
			РезультатРазбора.ЗначениеПеременноеОбработано = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатРазбора.ОшибкаРазбора = Ложь;
	РезультатРазбора.ПредставлениеШтрихкода = ПредставлениеШтрихкода;
	РезультатРазбора.Разобран = Истина;
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаменитьНекорректныйКМНаКИ(ИсходныеДанные) Экспорт
	
	ДекодироватьШтрихкодДанныхBase64(ИсходныеДанные);
	ПозицияРазделителяGS1 = СтрНайти(ИсходныеДанные.Штрихкод, РазделительGS1());
	
	Если Не ПозицияРазделителяGS1 = 0 Тогда
		КодИдентификации = Лев(ИсходныеДанные.Штрихкод, ПозицияРазделителяGS1-1);
	Иначе
		КодИдентификации = Лев(ИсходныеДанные.Штрихкод, 31); 
	КонецЕсли;
	ИсходныеДанные.Штрихкод = КодИдентификации;
	ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область РазборИПроверкаКодаМаркировки

// Для разбора кода маркировки следует использовать следующие методы:
//  * РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки
//  * РазборКодаМаркировкиИССлужебныйКлиент.РазобратьКодМаркировки
//
// Параметры:
//  ДанныеДляРазбора - Строка, Структура - данные кода маркировки для разбора
//  ВидыПродукции    - Неопределено, ПеречислениеСсылка.ВидыПродукцииИС, Массив Из ПеречислениеСсылка.ВидыПродукцииИС - 
//     фильтр по допустимым видам продукции кода маркировки
//  ПримечаниеКРезультатуРазбора - Структура - исходящий параметр, ошибки разбора
//  Настройки        - см. НастройкиРазбораКодаМаркировки - кешированные настройки разбора кодов маркировки.
//  МодульКонтекста  - ОбщийМодуль - источник вызова.
//
// Возвращаемое значение:
//  Структура, Неопределено - см. НовыйРезультатРазбораКодаМаркировки.
//
Функция РазобратьКодМаркировки(ДанныеДляРазбораСтруктура, ВидыПродукции, ПримечаниеКРезультатуРазбора, Настройки, ПроверятьАлфавитЭлементов, МодульКонтекста) Экспорт
	
	Если ТипЗнч(ДанныеДляРазбораСтруктура) = Тип("Структура") Тогда
		Если ДанныеДляРазбораСтруктура.Свойство("ФорматBase64") Тогда
			
			ДекодироватьШтрихкодДанныхBase64(ДанныеДляРазбораСтруктура);
			ДанныеДляРазбора = ДанныеДляРазбораСтруктура.Штрихкод;
			ЗакодироватьШтрихкодДанныхBase64(ДанныеДляРазбораСтруктура);
			
		Иначе 
			ДанныеДляРазбора = ДанныеДляРазбораСтруктура.Штрихкод; 
		КонецЕсли;
	Иначе
		ДанныеДляРазбора = ДанныеДляРазбораСтруктура; 
	КонецЕсли;
	
	ПримечаниеКРезультатуРазбора = Новый Структура("ИдентификаторОшибки, ТекстОшибки, РезультатРазбора", "", "", Неопределено);
	
	ИдентификаторыОшибок = ИдентификаторыОшибокРазобраКодаМаркировки();
	
	Если Настройки.ДоступныеВидыПродукции.Количество() = 0 Тогда
		
		ПримечаниеКРезультатуРазбора.ИдентификаторОшибки = ИдентификаторыОшибок.УчетМаркируемойПродукцииНеВедется;
		ПримечаниеКРезультатуРазбора.ТекстОшибки         = НСтр("ru = 'Учет маркируемой продукции не ведется.'");
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ВидыПродукцииДляФильтра = Новый Массив;
	
	Если ЗначениеЗаполнено(ВидыПродукции) И ТипЗнч(ВидыПродукции) = Тип("ПеречислениеСсылка.ВидыПродукцииИСМПТК") Тогда
		
		ВидыПродукцииДляФильтра.Добавить(ВидыПродукции);
		
	ИначеЕсли ЗначениеЗаполнено(ВидыПродукции) И ТипЗнч(ВидыПродукции) = Тип("Массив") Тогда
		
		Для Каждого Значение Из ВидыПродукции Цикл
			Если ЗначениеЗаполнено(Значение) И ТипЗнч(Значение) = Тип("ПеречислениеСсылка.ВидыПродукцииИСМПТК") Тогда
				ВидыПродукцииДляФильтра.Добавить(Значение);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ВидыПродукцииДляФильтра = ОбщегоНазначенияИСМПТККлиентСервер.СвернутьМассив(ВидыПродукцииДляФильтра);
	
	ФильтрПоВидуПродукции = Новый Структура("Использовать, ВидыПродукции", Ложь, Неопределено);
	
	Если ВидыПродукцииДляФильтра.Количество() > 0 Тогда
		ФильтрПоВидуПродукции.Использовать = Истина;
		ФильтрПоВидуПродукции.ВидыПродукции = Новый ФиксированныйМассив(ВидыПродукцииДляФильтра);
	КонецЕсли;
	
	РезультатРазбора = Неопределено;
	
	Если ТипЗнч(ДанныеДляРазбора) = Тип("Строка") Тогда
		
		Если НайденНедопустимыйСимволXML(ДанныеДляРазбора) Тогда
			РезультатРазбора = РазобратьСтрокуШтрихкодаGS1(ДанныеДляРазбора);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеДляРазбора) = Тип("Структура") Тогда
		
		РезультатРазбора = ДанныеДляРазбора;
		
	Иначе
		
		ПримечаниеКРезультатуРазбора.ИдентификаторОшибки = ИдентификаторыОшибок.ДанныеДляРазбораНекорректны;
		ПримечаниеКРезультатуРазбора.ТекстОшибки         = НСтр("ru = 'Данные для разбора некорректны.'");
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	НачинаетсяСоСкобки    = Ложь;
	СодержитРазделительGS = Ложь;
	
	Если РезультатРазбора = Неопределено Тогда
		НачинаетсяСоСкобки = СтрНачинаетсяС(ДанныеДляРазбора, "(");
		КодМаркировки      = ДанныеДляРазбора;
	Иначе
		// Модифицирует свойства: СодержитРазделительGS и КодМаркировки
		РезультатРазбораНеМожетБытьОбработан = РезультатРазбораGS1МожетБытьОбработан(ДанныеДляРазбора, РезультатРазбора, ПримечаниеКРезультатуРазбора, ИдентификаторыОшибок, МодульКонтекста, СодержитРазделительGS, КодМаркировки);
		Если Не РезультатРазбораНеМожетБытьОбработан Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ДлинаКодаМаркировки = СтрДлина(КодМаркировки);
	
	ПараметрыРазбораКодаМаркировки = Новый Структура;
	ПараметрыРазбораКодаМаркировки.Вставить("КодМаркировки",             КодМаркировки);
	ПараметрыРазбораКодаМаркировки.Вставить("НачинаетсяСоСкобки",        НачинаетсяСоСкобки);
	ПараметрыРазбораКодаМаркировки.Вставить("СодержитРазделительGS",     СодержитРазделительGS);
	ПараметрыРазбораКодаМаркировки.Вставить("РезультатРазбора",          РезультатРазбора);
	ПараметрыРазбораКодаМаркировки.Вставить("ДлинаКодаМаркировки",       ДлинаКодаМаркировки);
	ПараметрыРазбораКодаМаркировки.Вставить("ФильтрПоВидуПродукции",     ФильтрПоВидуПродукции);
	ПараметрыРазбораКодаМаркировки.Вставить("МодульКонтекста",           МодульКонтекста);
	ПараметрыРазбораКодаМаркировки.Вставить("ОбщиеМодулиРазбораКМ",      Новый Соответствие);
	ПараметрыРазбораКодаМаркировки.Вставить("ПроверятьАлфавитЭлементов", ПроверятьАлфавитЭлементов);
	
	Если Настройки.ТолькоСервер Тогда
		ПараметрыРазбораКодаМаркировки.ОбщиеМодулиРазбораКМ = Настройки.ОбщиеМодули;
	Иначе
		Для Каждого ИмяОбщегоМодуля Из Настройки.ИменаОбщихМодулей Цикл
			Если ПараметрыРазбораКодаМаркировки.ОбщиеМодулиРазбораКМ[ИмяОбщегоМодуля] = Неопределено Тогда
				ПараметрыРазбораКодаМаркировки.ОбщиеМодулиРазбораКМ[ИмяОбщегоМодуля] = МодульКонтекста.ОбщийМодуль(ИмяОбщегоМодуля);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НайденныеШаблоны = ШаблонРазбораКодаМаркировки(ПараметрыРазбораКодаМаркировки, Настройки);
	
	Результат = Новый Массив;
	
	Для Каждого ШаблонКодаМаркировки Из НайденныеШаблоны Цикл
		
		ДанныеРезультата = КодМаркировкиСоответствуетШаблону(ПараметрыРазбораКодаМаркировки, Настройки, ШаблонКодаМаркировки);
		
		Если ДанныеРезультата = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(ДанныеРезультата);
		
	КонецЦикла;
	
	РезультатПоФильтру = РезультатРазбораКодаМаркировкиПоФильтру(Результат, ФильтрПоВидуПродукции);
	
	Если РезультатПоФильтру.Количество() = 0 Тогда
		ДанныеРезультата = Неопределено;
		
		Если ЭтоНеформализованныйКодМаркировки(ПараметрыРазбораКодаМаркировки, Настройки, ДанныеРезультата, Новый ФиксированныйМассив(Результат)) Тогда
			РезультатПоФильтру = РезультатРазбораКодаМаркировкиПоФильтру(ОбщегоНазначенияИСМПТККлиентСервер.ЗначениеВМассиве(ДанныеРезультата), ФильтрПоВидуПродукции);
		КонецЕсли;
			
	КонецЕсли;
	
	Если РезультатПоФильтру.Количество() = 0 Тогда
		
		Если Результат.Количество() > 0 Тогда
			
			ПримечаниеКРезультатуРазбора.ИдентификаторОшибки = ИдентификаторыОшибок.КодМаркировкиСоответствуетДругимВидамПродукции;
			ПримечаниеКРезультатуРазбора.ТекстОшибки         = НСтр("ru = 'Код маркировки соответствует другим видам продукции.'");
			ПримечаниеКРезультатуРазбора.РезультатРазбора    = Результат;
			
			Возврат Неопределено;
		Иначе
			
			ПримечаниеКРезультатуРазбора.ИдентификаторОшибки = ИдентификаторыОшибок.КодМаркировкиНеСоответствуетНиОдномуШаблону;
			ПримечаниеКРезультатуРазбора.ТекстОшибки         = НСтр("ru = 'Код маркировки не соответствует ни одному шаблону.'");
			
			Возврат Неопределено;
		КонецЕсли;
		
	ИначеЕсли РезультатПоФильтру.Количество() = 1 Тогда
		
		Возврат РезультатПоФильтру[0];
		
	Иначе
		
		ДанныеРезультата = Неопределено;
		Если ОбработатьРезультатНесколькихШаблонов(РезультатПоФильтру, ДанныеРезультата) Тогда
			Возврат ДанныеРезультата;
		КонецЕсли;
		
		ПримечаниеКРезультатуРазбора.ИдентификаторОшибки = ИдентификаторыОшибок.КодМаркировкиСоответствуетНесколькимШаблонам;
		ПримечаниеКРезультатуРазбора.ТекстОшибки         = НСтр("ru = 'Код маркировки соответствует нескольким шаблонам.'");
		ПримечаниеКРезультатуРазбора.РезультатРазбора    = РезультатПоФильтру;
		
		Возврат Неопределено;
		
	КонецЕсли;
		
КонецФункции

// Возвращает структуру из строк с допустимыми символами
// 
// Возвращаемое значение:
// 	Структура - допустимые символы в коде маркировки:
// * БуквыЦифрыЗнаки - Строка - "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!”%&’()*+,-./_:;=<>?"
// * БуквыЦифрыЗнакиМРЦ - Строка - "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!""%&'*+-./_,:;=<>?()"
// * Цифры - Строка - "0123456789"
Функция ДопустимыеСимволыВКодеМаркировки() Экспорт
	
	Алфавит = Новый Структура;
	Алфавит.Вставить("БуквыЦифры",         "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789");
	Алфавит.Вставить("БуквыЦифрыЗнаки",    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!”""%&’'()*+,-./_:;=<>?");
	Алфавит.Вставить("БуквыЦифрыЗнакиМРЦ", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!""%&'*+-./_,:;=<>?");
	Алфавит.Вставить("Цифры",              "0123456789");
	
	Возврат Алфавит;
	
КонецФункции

Функция АлфавитКодаМаркировки() Экспорт
	
	Возврат "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!""%&'()*+,-./_:;=<>?";
	
КонецФункции

Функция АлфавитЧисло()
	
	Возврат "0123456789";
	
КонецФункции

// Выполняет проверку на соответствие алфавиту кода маркировки.
//
// Параметры:
//  Код - Строка - Код маркировки.
//  Алфавит - Строка - перечень допустимых символов.
// Возвращаемое значение:
//  Булево - Истина, если код соответствует алфавиту.
Функция КодСоответствуетАлфавиту(Код, Алфавит) Экспорт
	
	ДлинаКода = СтрДлина(Код);
	
	Индекс = 1;
	Пока Индекс < ДлинаКода Цикл
		
		ПроверяемыйСимвол = Сред(Код, Индекс, 1);
		
		Если СтрНайти(Алфавит, ПроверяемыйСимвол, НаправлениеПоиска.СНачала) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Конструктор результата разбора кода маркировки.
// 
// Возвращаемое значение:
//   Структура:
//     * КодМаркировки - Строка.
//     * НормализованныйКодМаркировки - Строка.
//     * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодовИСМПТК.
//     * ВидУпаковки - ПеречислениеСсылка.ВидыУпаковокИС.
//     * ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС.
//     * ВидыУпаковокПоВидамПродукции - Соответствие.
//     * СоставКодаМаркировки - Структура.
//     * ШаблонРазбораКодаМаркировки - Строка.
//
Функция НовыйРезультатРазбораКодаМаркировки() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КодМаркировки",                "");
	Результат.Вставить("НормализованныйКодМаркировки", "");
	Результат.Вставить("ТипШтрихкода",                 ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.ПустаяСсылка"));
	Результат.Вставить("ВидУпаковки",                  ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.ПустаяСсылка")); // Устарело
	Результат.Вставить("ВидыПродукции",                Неопределено);
	Результат.Вставить("ВидыУпаковокПоВидамПродукции", Новый Соответствие);
	Результат.Вставить("СоставКодаМаркировки",         Неопределено);
	Результат.Вставить("ШаблонРазбораКодаМаркировки",  Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция МРЦПоВидуУпаковки(МРЦСтрокой, ВидУпаковки) Экспорт
	
	РезультатПроверки = Новый Структура("ЭтоМРЦ, ЗначениеМРЦ", Ложь, 0);
	
	Если ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда
		
		МРЦ        = 0;
		АлфавитМРЦ = ДопустимыеСимволыВКодеМаркировки().БуквыЦифрыЗнакиМРЦ;    
		
		Для Индекс = 1 По СтрДлина(МРЦСтрокой) Цикл
			Символ = Сред(МРЦСтрокой, Индекс, 1);
			ИндексСимвола = СтрНайти(АлфавитМРЦ, Символ) - 1;
			Если ИндексСимвола < 0 Тогда
				Возврат РезультатПроверки;
			КонецЕсли;
			МРЦ = МРЦ + Pow(80, 4 - Индекс) * ИндексСимвола;
		КонецЦикла;
		
		// Если цена <= 5000 и нет копеек, то высокая вероятность, что это реальное МРЦ.
		Если МРЦ > 500000 Или МРЦ % 100 > 0 Тогда
			Возврат РезультатПроверки;
		КонецЕсли;
		
	Иначе
		
		МРЦ = Число(МРЦСтрокой);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МРЦ) Тогда
		МРЦ = МРЦ / 100;
	КонецЕсли;
	
	РезультатПроверки.ЭтоМРЦ      = Истина;
	РезультатПроверки.ЗначениеМРЦ = МРЦ;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПроверкаФорматаТранспортногоКодаПройденаУспешно(ИсходныеДанные, ФормироватьОтдельноеСообщениеПоКоду = Ложь, ИгнорироватьНекорректностьКМ = Ложь) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ИсходныеДанные.Свойство("ФорматBase64") Тогда
		ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
		ИсходныеДанные.Вставить("ФорматBase64", Истина);
	КонецЕсли;
	ДанныеШтрихкода = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.ПолучитьДанныеРазбораКМ(ИсходныеДанные);
	ДвойнойФорматПоддерживается = ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК");
	
	Если ДанныеШтрихкода = Неопределено Тогда
		Если НЕ ИгнорироватьНекорректностьКМ Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось разобрать указанный штрихкод по шаблонам кода маркировки, добавление данных невозможно.'");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	Иначе
		Если ДанныеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.SSCC") 
			И СтрДлина(ДанныеШтрихкода.КодМаркировки) = 18
			И Не ДвойнойФорматПоддерживается Тогда 
			
			Если ФормироватьОтдельноеСообщениеПоКоду Тогда
				ТекстСообщения = НСтр("ru = 'Штрихкод %1 не соответствует установленному формату транспортного кода, т.к. не содержит идентификатор применения (00), а в базе не включена поддержка двойного формата кода SSCC. Код не был добавлен в таблицу.'");
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДанныеШтрихкода.КодМаркировки);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Иначе
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(НСтр("ru = 'Полученный штрихкод не соответствует установленному формату транспортного кода, т.к. не содержит идентификатор применения (00), а в базе не включена поддержка двойного формата кода SSCC.'"));
			КонецЕсли;
			Возврат Ложь;
			
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

КонецФункции

#Область ПроверкаКодаИФормализация

Функция ЭтоНеФормализованныйКодМаркировки(ПараметрыРазбораКодаМаркировки, Настройки, ДанныеРезультата, РезультатБезФильтра) Экспорт
	                                                                      
	Если ОбщегоНазначенияИСМПТККлиентСервер.ПрисутствуетТабачнаяПродукция(Настройки.ДоступныеВидыПродукции) Тогда
		
		Если ЭтоНеФормализованныйКодМаркировкиГрупповойУпаковкиТабака(ПараметрыРазбораКодаМаркировки, Настройки, ДанныеРезультата, РезультатБезФильтра) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если ЭтоНеФормализованныйКодМаркировкиЛогистическойУпаковкиТабакаGS1128(ПараметрыРазбораКодаМаркировки, Настройки, ДанныеРезультата) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоНеФормализованныйКодМаркировкиЛогистическойУпаковкиGS1128(ПараметрыРазбораКодаМаркировки, Настройки, ДанныеРезультата, РезультатБезФильтра) Тогда
		Возврат Истина;
	КонецЕсли;
		
	Возврат Ложь;
	
КонецФункции

Функция ЭтоНеФормализованныйКодМаркировкиГрупповойУпаковкиТабака(ПараметрыРазбораКодаМаркировки, Настройки, ДанныеРезультата, РезультатБезФильтра)
	
	// После идентификатора 93 для блоков и только для них может быть произвольное количество идентификаторов применения
	// 010460620310255621!MmNZo2800514900093Ij5E240FA075486.00
	
	ШаблоныКодаМаркировкиСХвостом = Настройки.ДополнительныеПараметры.Маркировка.Табак.ШаблоныКодаМаркировкиСХвостом;
	
	Если ШаблоныКодаМаркировкиСХвостом.Количество() = 0 Тогда
		Возврат Ложь; // Учет табачной продукции не ведется
	КонецЕсли;
	
	ИсходныйКодМаркировки       = ПараметрыРазбораКодаМаркировки.КодМаркировки;
	ИсходнаяДлинаКодаМаркировки = ПараметрыРазбораКодаМаркировки.ДлинаКодаМаркировки;
	ДанныеРезультата            = Неопределено;
	
	Для Каждого ШаблонКодаМаркировки Из ШаблоныКодаМаркировкиСХвостом Цикл
		
		Если ПараметрыРазбораКодаМаркировки.НачинаетсяСоСкобки Или ПараметрыРазбораКодаМаркировки.СодержитРазделительGS Тогда
			ДлинаКодаМаркировкиИзШаблона = ШаблонКодаМаркировки.ДлинаСоСкобкой;
		Иначе
			ДлинаКодаМаркировкиИзШаблона = ШаблонКодаМаркировки.Длина;
		КонецЕсли;
		
		Если ИсходнаяДлинаКодаМаркировки <= ДлинаКодаМаркировкиИзШаблона Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыРазбораКодаМаркировки.ДлинаКодаМаркировки = ДлинаКодаМаркировкиИзШаблона;
		
		ПараметрыРазбораКодаМаркировки.КодМаркировки = Лев(ИсходныйКодМаркировки, ПараметрыРазбораКодаМаркировки.ДлинаКодаМаркировки);
		
		ДанныеРезультата = КодМаркировкиСоответствуетШаблону(ПараметрыРазбораКодаМаркировки, Настройки, ШаблонКодаМаркировки);
		
		Если ДанныеРезультата = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеРезультата.КодМаркировки = ИсходныйКодМаркировки;
		ДанныеРезультата.ВидУпаковки   = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая");
		
		ПараметрыРазбораКодаМаркировки.КодМаркировки       = ИсходныйКодМаркировки;
		ПараметрыРазбораКодаМаркировки.ДлинаКодаМаркировки = ИсходнаяДлинаКодаМаркировки;
		
		Возврат Истина;
		
	КонецЦикла;
	
	ПараметрыРазбораКодаМаркировки.КодМаркировки       = ИсходныйКодМаркировки;
	ПараметрыРазбораКодаМаркировки.ДлинаКодаМаркировки = ИсходнаяДлинаКодаМаркировки;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоНеФормализованныйКодМаркировкиЛогистическойУпаковкиGS1128(ПараметрыРазбораКодаМаркировки, Настройки, ДанныеРезультата, РезультатБезФильтра)
	
	Если РезультатБезФильтра.Количество() > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Ограничение согласно документации СУЗ
	МинимальнаяДлинаКодаТранспортнойУпаковки    = 18; 
	МинимальнаяДлинаКодаТранспортнойУпаковкиАТП = 34;
	МаксимальнаяДлинаКодаТранспортнойУпаковки   = 74;
	
	Если ПараметрыРазбораКодаМаркировки.ДлинаКодаМаркировки < МинимальнаяДлинаКодаТранспортнойУпаковки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ФильтрПоВидуПродукции = ПараметрыРазбораКодаМаркировки.ФильтрПоВидуПродукции;
	Если Не ФильтрПоВидуПродукции.Использовать Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВидыПродукции = Новый Массив;
	Для Каждого ВидПродукции Из ФильтрПоВидуПродукции.ВидыПродукции Цикл
		Если Не ЭтоПродукцияИСМП(ВидПродукции) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если Настройки.ДоступныеВидыПродукции.Найти(ВидПродукции) <> Неопределено Тогда
			ВидыПродукции.Добавить(ВидПродукции);
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыРазбораКодаМаркировки.ДлинаКодаМаркировки < МинимальнаяДлинаКодаТранспортнойУпаковкиАТП Тогда
		ИндексАТП = ВидыПродукции.Найти(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.АльтернативныйТабак"));
		Если ИндексАТП <> Неопределено Тогда
			ВидыПродукции.Удалить(ИндексАТП);
		КонецЕсли;
	КонецЕсли;
	
	Если ВидыПродукции.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КодМаркировки = ПараметрыРазбораКодаМаркировки.КодМаркировки;
	
	ЗначениеИдентификатораGTIN = Неопределено;
	
	ПрисутствуетИдентификатор02               = Ложь;
	ЗначениеИдентификатора37                  = Неопределено;
	ВозможныВариантыКоличестваВложенныхЕдиниц = Ложь;
	
	ДлинаКодаМаркировкиБезРазделителей = 0;
	
	Если ПараметрыРазбораКодаМаркировки.НачинаетсяСоСкобки Тогда
		
		РезультатРазбора = РазобратьСтрокуШтрихкодаGS1(КодМаркировки);
		Если РезультатРазбора.Разобран Тогда
			
			ЭлементКМ = РезультатРазбора.ДанныеШтрихкода["01"];
			Если ЭлементКМ = Неопределено Тогда
				ЭлементКМ = РезультатРазбора.ДанныеШтрихкода["02"];
				Если ЭлементКМ <> Неопределено Тогда
					ЗначениеИдентификатораGTIN = ЭлементКМ.Значение;
					Если РезультатРазбора.ДанныеШтрихкода["37"] <> Неопределено Тогда
						ЗначениеИдентификатора37    = СтрокаВЧисло(РезультатРазбора.ДанныеШтрихкода["37"].Значение);
						ПрисутствуетИдентификатор02 = (ЗначениеИдентификатора37 > 0);
					КонецЕсли;
				КонецЕсли;
			Иначе
				ЗначениеИдентификатораGTIN = ЭлементКМ.Значение;
			КонецЕсли;
			
			Для Каждого КлючЗначение Из РезультатРазбора.ДанныеШтрихкода Цикл
				Идентификатор          = КлючЗначение.Ключ;
				ЗначениеИдентификатора = КлючЗначение.Значение.Значение;
				ДлинаКодаМаркировкиБезРазделителей = ДлинаКодаМаркировкиБезРазделителей + СтрДлина(Идентификатор) + СтрДлина(ЗначениеИдентификатора);
			КонецЦикла;
			
		Иначе
			
			ИдентификаторGTIN = Лев(КодМаркировки, 4);
			Если ИдентификаторGTIN = "(01)" Тогда
				ЗначениеИдентификатораGTIN = Сред(КодМаркировки, 5, 14);
			ИначеЕсли ИдентификаторGTIN = "(02)" Тогда
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(РезультатРазбора.ОписаниеОшибки);
			КонецЕсли;
			
			Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПовтИсп.ЭтоGTIN(ЗначениеИдентификатораGTIN) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыРазбораКодаМаркировки.СодержитРазделительGS Тогда
		
		РезультатРазбора = ПараметрыРазбораКодаМаркировки.РезультатРазбора;
		
		ЭлементКМ = РезультатРазбора.ДанныеШтрихкода["01"];
		Если ЭлементКМ = Неопределено Тогда
			ЭлементКМ = РезультатРазбора.ДанныеШтрихкода["02"];
			Если ЭлементКМ <> Неопределено Тогда
				ЗначениеИдентификатораGTIN = ЭлементКМ.Значение;
				Если РезультатРазбора.ДанныеШтрихкода["37"] <> Неопределено Тогда
					ЗначениеИдентификатора37    = СтрокаВЧисло(РезультатРазбора.ДанныеШтрихкода["37"].Значение);
					ПрисутствуетИдентификатор02 = (ЗначениеИдентификатора37 > 0);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЗначениеИдентификатораGTIN = ЭлементКМ.Значение;
		КонецЕсли;
		
		Для Каждого КлючЗначение Из РезультатРазбора.ДанныеШтрихкода Цикл
			Идентификатор          = КлючЗначение.Ключ;
			ЗначениеИдентификатора = КлючЗначение.Значение.Значение;
			ДлинаКодаМаркировкиБезРазделителей = ДлинаКодаМаркировкиБезРазделителей + СтрДлина(Идентификатор) + СтрДлина(ЗначениеИдентификатора);
		КонецЦикла;
		
	Иначе
		
		Если Не КодСоответствуетАлфавиту(КодМаркировки, Настройки.Алфавит.БуквыЦифрыЗнаки) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ПроверитьКорректностьGTIN(КодМаркировки) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ДлинаКодаМаркировкиБезРазделителей = ПараметрыРазбораКодаМаркировки.ДлинаКодаМаркировки;
		
		ВариантыРазбораШтрихкодаGS1 = ВариантыРазбораШтрихкодаGS1БезРазделителей(КодМаркировки);
		Если ВариантыРазбораШтрихкодаGS1 = Неопределено Тогда
			
			Если Настройки.ВалидироватьШтрихкодаGS1БезРазделителей Тогда
				Возврат Ложь;
			КонецЕсли;
			
		Иначе
			
			ПроверитьНаличиеВложенныхЕдиниц = Ложь;
			
			ИдентификаторGTIN = Лев(КодМаркировки, 2);
			Если ИдентификаторGTIN = "01" Или ИдентификаторGTIN = "02" Тогда
				
				ЗначениеИдентификатораGTIN = Сред(КодМаркировки, 3, 14);
				
				Если РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПовтИсп.ЭтоGTIN(ЗначениеИдентификатораGTIN) Тогда
					ПроверитьНаличиеВложенныхЕдиниц = (ИдентификаторGTIN = "02");
				Иначе
					ЗначениеИдентификатораGTIN = Неопределено;
				КонецЕсли;
				
			КонецЕсли;
			
			ВариантыКоличестваВложенныхЕдиниц = Новый СписокЗначений;
			
			Если ПроверитьНаличиеВложенныхЕдиниц Тогда
				
				Для Каждого ВариантРазбора Из ВариантыРазбораШтрихкодаGS1 Цикл
					
					Если ВариантРазбора.РезультатРазбора.ДанныеШтрихкода["02"] <> Неопределено Тогда
						
						Если ЗначениеИдентификатораGTIN <> ВариантРазбора.РезультатРазбора.ДанныеШтрихкода["02"].Значение Тогда
							Продолжить;
						ИначеЕсли ВариантРазбора.РезультатРазбора.ДанныеШтрихкода["37"] = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						ЗначениеИдентификатора37 = СтрокаВЧисло(ВариантРазбора.РезультатРазбора.ДанныеШтрихкода["37"].Значение);
						
						Если ЗначениеИдентификатора37 > 0 Тогда
							ВариантыКоличестваВложенныхЕдиниц.Добавить(ЗначениеИдентификатора37);
						КонецЕсли;
						
						ЗначениеИдентификатора37 = Неопределено;
						
					КонецЕсли;
					
				КонецЦикла;
				
				ВариантыКоличестваВложенныхЕдиниц.СортироватьПоЗначению(НаправлениеСортировки.Возр);
				ВариантыКоличестваВложенныхЕдиниц = ВариантыКоличестваВложенныхЕдиниц.ВыгрузитьЗначения();
				Если ВариантыКоличестваВложенныхЕдиниц.Количество() > 1 Тогда
					ОбщегоНазначенияИСМПТККлиентСервер.СвернутьМассив(ВариантыКоличестваВложенныхЕдиниц);
				КонецЕсли;
				
				Если ВариантыКоличестваВложенныхЕдиниц.Количество() = 0 Тогда
					
					ЗначениеИдентификатораGTIN = Неопределено;
					
				ИначеЕсли ВариантыКоличестваВложенныхЕдиниц.Количество() = 1 Тогда
					
					ЗначениеИдентификатора37 = ВариантыКоличестваВложенныхЕдиниц[0];
					
				Иначе
					
					КоличествоПредполагаемыхКоличеств = 0;
					
					Для Каждого ВариантКоличестваВложенныхЕдиниц Из ВариантыКоличестваВложенныхЕдиниц Цикл
						Если ВариантКоличестваВложенныхЕдиниц % 2 = 0
							Или ВариантКоличестваВложенныхЕдиниц % 3 = 0
							Или ВариантКоличестваВложенныхЕдиниц % 5 = 0 Тогда
							
							КоличествоПредполагаемыхКоличеств = КоличествоПредполагаемыхКоличеств + 1;
							
							Если ЗначениеИдентификатора37 = Неопределено Тогда
								ЗначениеИдентификатора37 = ВариантКоличестваВложенныхЕдиниц;
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
					
					Если ЗначениеИдентификатора37 = Неопределено Тогда
						ЗначениеИдентификатораGTIN = Неопределено;
					КонецЕсли;
					
					ВозможныВариантыКоличестваВложенныхЕдиниц = (КоличествоПредполагаемыхКоличеств > 1);
					
				КонецЕсли;
				
				ПрисутствуетИдентификатор02 = ЗначениеЗаполнено(ЗначениеИдентификатораGTIN) И ЗначениеЗаполнено(ЗначениеИдентификатора37);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	GTIN = "";
	Если ЗначениеЗаполнено(ЗначениеИдентификатораGTIN)
		И ТипЗнч(ЗначениеИдентификатораGTIN) = Тип("Строка")
		И СтрДлина(ЗначениеИдентификатораGTIN) = 14
		И РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПовтИсп.ЭтоGTIN(ЗначениеИдентификатораGTIN) Тогда
		
		GTIN = ЗначениеИдентификатораGTIN;
		
	КонецЕсли;
	
	КоличествоВложенныхЕдиниц = Неопределено;
	
	Если ПрисутствуетИдентификатор02 Тогда
		
		Если ЗначениеЗаполнено(GTIN) Тогда
			КоличествоВложенныхЕдиниц = ЗначениеИдентификатора37;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДлинаКодаМаркировкиБезРазделителей > 0 Тогда
		
		Если ДлинаКодаМаркировкиБезРазделителей > МаксимальнаяДлинаКодаТранспортнойУпаковки Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ДлинаКодаМаркировкиБезРазделителей < МинимальнаяДлинаКодаТранспортнойУпаковкиАТП Тогда
			ИндексАТП = ВидыПродукции.Найти(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.АльтернативныйТабак"));
			Если ИндексАТП <> Неопределено Тогда
				Если ВидыПродукции.Количество() = 1 Тогда
					Возврат Ложь;
				КонецЕсли;
				ВидыПродукции.Удалить(ИндексАТП);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТипШтрихкодаИВидУпаковки = ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.GS1_128");
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая");
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	СоставКодаМаркировки.GTIN = GTIN;
	
	Если ЗначениеЗаполнено(СоставКодаМаркировки.GTIN) Тогда
		СоставКодаМаркировки.EAN = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПовтИсп.ШтрихкодEANИзGTIN(СоставКодаМаркировки.GTIN);
		СоставКодаМаркировки.ВключаетИдентификаторыПрименения = Истина;
	КонецЕсли;
	
	СоставКодаМаркировки.КоличествоВложенныхЕдиниц = КоличествоВложенныхЕдиниц;
	СоставКодаМаркировки.ВозможныВариантыКоличестваВложенныхЕдиниц = ВозможныВариантыКоличестваВложенныхЕдиниц;
	
	ДанныеРезультата = НовыйРезультатРазбораКодаМаркировки();
	ДанныеРезультата.КодМаркировки        = КодМаркировки;
	ДанныеРезультата.ТипШтрихкода         = ТипШтрихкодаИВидУпаковки.ТипШтрихкода;
	ДанныеРезультата.ВидУпаковки          = ТипШтрихкодаИВидУпаковки.ВидУпаковки;
	ДанныеРезультата.ВидыПродукции        = ВидыПродукции;
	ДанныеРезультата.СоставКодаМаркировки = СоставКодаМаркировки;
	
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		ДанныеРезультата.ВидыУпаковокПоВидамПродукции[ВидПродукции] = ОбщегоНазначенияИСМПТККлиентСервер.ЗначениеВМассиве(ТипШтрихкодаИВидУпаковки.ВидУпаковки);
	КонецЦикла;
	
	НормализованныйКодМаркировки = НормализоватьКодМаркировкиУпаковкиGS1128(ДанныеРезультата, ВидыПродукции[0]); // Тут вид продукции не имеет значения
	ДанныеРезультата.НормализованныйКодМаркировки = НормализованныйКодМаркировки;
	
	Возврат Истина;
	
КонецФункции

Функция ЭтоНеФормализованныйКодМаркировкиЛогистическойУпаковкиТабакаGS1128(ПараметрыРазбораКодаМаркировки, Настройки, ДанныеРезультата)
	
	ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная");
	
	Если Настройки.ДоступныеВидыПродукции.Найти(ВидПродукции) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ФильтрПоВидуПродукции = ПараметрыРазбораКодаМаркировки.ФильтрПоВидуПродукции;
	
	Если Не (ФильтрПоВидуПродукции.Использовать
		И ФильтрПоВидуПродукции.ВидыПродукции.Количество() = 1
		И ФильтрПоВидуПродукции.ВидыПродукции[0] = ВидПродукции) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КодМаркировки = ПараметрыРазбораКодаМаркировки.КодМаркировки;
	
	ЗначениеИдентификатораGTIN            = Неопределено;
	ЗавершитьВыполнениеЕслиGTINНеЗаполнен = Ложь;
	
	Если ПараметрыРазбораКодаМаркировки.НачинаетсяСоСкобки Тогда
		
		РезультатРазбора = РазобратьСтрокуШтрихкодаGS1(КодМаркировки);
		Если РезультатРазбора.Разобран Тогда
			
			ЭлементКМ = РезультатРазбора.ДанныеШтрихкода["01"];
			Если ЭлементКМ = Неопределено Тогда
				ЭлементКМ = РезультатРазбора.ДанныеШтрихкода["02"];
				Если ЭлементКМ <> Неопределено Тогда
					ЗначениеИдентификатораGTIN = ЭлементКМ.Значение;
				КонецЕсли;
			Иначе
				ЗначениеИдентификатораGTIN = ЭлементКМ.Значение;
			КонецЕсли;
			
		Иначе
			
			ИдентификаторGTIN = Лев(КодМаркировки, 4);
			Если ИдентификаторGTIN = "(01)" Или ИдентификаторGTIN = "(02)" Тогда
				ЗначениеИдентификатораGTIN = Сред(КодМаркировки, 5, 14);
			КонецЕсли;
			
			ЗавершитьВыполнениеЕслиGTINНеЗаполнен = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыРазбораКодаМаркировки.СодержитРазделительGS Тогда
		
		РезультатРазбора = ПараметрыРазбораКодаМаркировки.РезультатРазбора;
		
		ЭлементКМ = РезультатРазбора.ДанныеШтрихкода["01"];
		Если ЭлементКМ = Неопределено Тогда
			ЭлементКМ = РезультатРазбора.ДанныеШтрихкода["02"];
			Если ЭлементКМ <> Неопределено Тогда
				ЗначениеИдентификатораGTIN = ЭлементКМ.Значение;
			КонецЕсли;
		Иначе
			ЗначениеИдентификатораGTIN = ЭлементКМ.Значение;
		КонецЕсли;
		
	Иначе
		// Делаем предположение что это табак!
		Если Не КодСоответствуетАлфавиту(КодМаркировки, Настройки.Алфавит.БуквыЦифрыЗнаки) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ПроверитьКорректностьGTIN(КодМаркировки) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ИдентификаторGTIN = Лев(КодМаркировки, 2);
		Если ИдентификаторGTIN = "01" Или ИдентификаторGTIN = "02" Тогда
			ЗначениеИдентификатораGTIN = Сред(КодМаркировки, 3, 14);
		КонецЕсли;
		
	КонецЕсли;
	
	GTIN = "";
	Если ЗначениеЗаполнено(ЗначениеИдентификатораGTIN)
		И ТипЗнч(ЗначениеИдентификатораGTIN) = Тип("Строка")
		И СтрДлина(ЗначениеИдентификатораGTIN) = 14
		И ПроверитьКорректностьGTIN(ЗначениеИдентификатораGTIN) Тогда
		
		GTIN = ЗначениеИдентификатораGTIN;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(GTIN) И ЗавершитьВыполнениеЕслиGTINНеЗаполнен Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВидыПродукции = Новый ФиксированныйМассив(ОбщегоНазначенияИСМПТККлиентСервер.ЗначениеВМассиве(ВидПродукции));
	
	ТипШтрихкодаИВидУпаковки = ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.GS1_128");
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая");
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	СоставКодаМаркировки.GTIN = GTIN;
	
	Если ЗначениеЗаполнено(СоставКодаМаркировки.GTIN) Тогда
		СоставКодаМаркировки.EAN = EANПоGTIN(СоставКодаМаркировки.GTIN);
	КонецЕсли;
	
	ДанныеРезультата = НовыйРезультатРазбораКодаМаркировки();
	ДанныеРезультата.КодМаркировки        = КодМаркировки;
	ДанныеРезультата.ТипШтрихкода         = ТипШтрихкодаИВидУпаковки.ТипШтрихкода;
	ДанныеРезультата.ВидУпаковки          = ТипШтрихкодаИВидУпаковки.ВидУпаковки;
	ДанныеРезультата.ВидыПродукции        = ВидыПродукции;
	ДанныеРезультата.СоставКодаМаркировки = СоставКодаМаркировки;
	
	НормализованныйКодМаркировки = НормализоватьКодМаркировкиУпаковкиТабакаGS1128(ДанныеРезультата, ВидПродукции);
	
	ДанныеРезультата.НормализованныйКодМаркировки = НормализованныйКодМаркировки;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ШаблоныКМ

Функция ШаблонРазбораКодаМаркировки(ПараметрыРазбораКодаМаркировки, Настройки) Экспорт
	
	ИмяКолонкиПоиска = "Длина";
	
	Отбор = Новый Структура;
	
	Если ПараметрыРазбораКодаМаркировки.НачинаетсяСоСкобки Тогда
		
		ИмяКолонкиПоиска = "ДлинаСоСкобкой";
		
	ИначеЕсли ПараметрыРазбораКодаМаркировки.СодержитРазделительGS Тогда
		
		ИмяКолонкиПоиска = "ДлинаСоСкобкой";
		
		КоличествоЭлементов = ПараметрыРазбораКодаМаркировки.РезультатРазбора.ДанныеШтрихкода.Количество();
		
		Отбор.Вставить("КоличествоЭлементов", КоличествоЭлементов);
		
	КонецЕсли;
	
	Отбор.Вставить(ИмяКолонкиПоиска, ПараметрыРазбораКодаМаркировки.ДлинаКодаМаркировки);
	
	НайденныеШаблоны = ШаблоныКодовМаркировкиПоОтбору(Настройки.ШаблоныКодовМаркировки, Отбор);
	
	Возврат НайденныеШаблоны;
	
КонецФункции

Функция ШаблоныКодовМаркировкиПоОтбору(ШаблоныКодовМаркировки, Отбор) Экспорт
	
	Если ТипЗнч(ШаблоныКодовМаркировки) = Тип("Массив") Тогда
		
		НайденныеШаблоны = Новый Массив;
		
		Для Каждого ШаблонКМ Из ШаблоныКодовМаркировки Цикл
			
			ШаблонНайден = Истина;
			
			Для Каждого ОтборКлючЗначение Из Отбор Цикл
				Если ШаблонКМ[ОтборКлючЗначение.Ключ] <> ОтборКлючЗначение.Значение Тогда
					ШаблонНайден = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ШаблонНайден Тогда
				НайденныеШаблоны.Добавить(ШаблонКМ);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		НайденныеШаблоны = ШаблоныКодовМаркировки.НайтиСтроки(Отбор);
		
	КонецЕсли;
	
	Возврат НайденныеШаблоны;
	
КонецФункции

// Получает позиции элементов в шаблоне кода маркировки.
//
// Параметры:
//  ОписаниеЭлементовКодаМаркировки - см. НастройкиРазбораКодаМаркировки.
//                                    НастройкиРазбораКодаМаркировки.ШаблоныИОписанияВидовПродукции[ШаблонРазбораКодаМаркировки].ОписаниеЭлементовКодаМаркировки
//
// Возвращаемое значение:
//   Соответствие:
//    * Ключ     - Строка    - Значение идентификатора элемента КМ
//    * Значение - Структура:
//       ** Позиция          - Число.
//       ** ПозицияСоСкобкой - Число.
//       ** Длина            - Число.
//
Функция ПозицииЭлементовВШаблонеКодаМаркировки(ОписаниеЭлементовКодаМаркировки) Экспорт
	
	ПозицииЭлементовКМ = Новый Соответствие;
	
	ПозицияЗначенияЭлемента          = 1;
	ПозицияЗначенияЭлементаСоСкобкой = 1;
	
	ПорядковыйНомерЭлемента = 0;
	
	Для Каждого ОписаниеЭлементаКМ Из ОписаниеЭлементовКодаМаркировки Цикл
		
		ПорядковыйНомерЭлемента = ПорядковыйНомерЭлемента + 1;
		
		ПозицияЗначенияЭлементаКМ = Новый Структура;
		ПозицияЗначенияЭлементаКМ.Вставить("ПорядковыйНомерЭлемента",  ПорядковыйНомерЭлемента);
		ПозицияЗначенияЭлементаКМ.Вставить("ПозицияЗначения",          0);
		ПозицияЗначенияЭлементаКМ.Вставить("ПозицияЗначенияСоСкобкой", 0);
		ПозицияЗначенияЭлементаКМ.Вставить("ДлинаЗначения",            ОписаниеЭлементаКМ.Длина);
		
		ПозицияЗначенияЭлементаКМ.Вставить("ПозицияИдентификатора",          0);
		ПозицияЗначенияЭлементаКМ.Вставить("ПозицияИдентификатораСоСкобкой", 0);
		ПозицияЗначенияЭлементаКМ.Вставить("ДлинаИдентификатора",            0);
		
		ПозицииЭлементовКМ[ОписаниеЭлементаКМ.Имя] = ПозицияЗначенияЭлементаКМ;
		
		Если ЗначениеЗаполнено(ОписаниеЭлементаКМ.Код) Тогда
			
			ПозицияЗначенияЭлементаКМ.ДлинаИдентификатора            = СтрДлина(ОписаниеЭлементаКМ.Код);
			ПозицияЗначенияЭлементаКМ.ПозицияИдентификатора          = ПозицияЗначенияЭлемента;
			ПозицияЗначенияЭлементаКМ.ПозицияИдентификатораСоСкобкой = ПозицияЗначенияЭлементаСоСкобкой + 1;
			
			ПозицияЗначенияЭлемента          = ПозицияЗначенияЭлементаКМ.ПозицияИдентификатора          + ПозицияЗначенияЭлементаКМ.ДлинаИдентификатора;
			ПозицияЗначенияЭлементаСоСкобкой = ПозицияЗначенияЭлементаКМ.ПозицияИдентификатораСоСкобкой + ПозицияЗначенияЭлементаКМ.ДлинаИдентификатора + 1; // добавляем по "(" и ")"
			
			ПозицияЗначенияЭлементаКМ.ПозицияЗначенияСоСкобкой = ПозицияЗначенияЭлементаСоСкобкой;
			
			ПозицияЗначенияЭлементаСоСкобкой = ПозицияЗначенияЭлементаСоСкобкой + ОписаниеЭлементаКМ.Длина;
			
		КонецЕсли;
		
		ПозицияЗначенияЭлементаКМ.ПозицияЗначения = ПозицияЗначенияЭлемента;
		
		ПозицияЗначенияЭлемента = ПозицияЗначенияЭлемента + ОписаниеЭлементаКМ.Длина;
		
	КонецЦикла;
	
	Возврат ПозицииЭлементовКМ;
	
КонецФункции

Функция КодМаркировкиСоответствуетШаблону(ПараметрыРазбораКодаМаркировки, Настройки, ШаблонКодаМаркировки) Экспорт
	
	ДанныеШаблона = Настройки.ШаблоныИОписанияВидовПродукции[ШаблонКодаМаркировки.Шаблон];
	
	ОбщиеМодулиТекущегоШаблона = Новый Массив;
	Для Каждого ИмяОбщегоМодуля Из ДанныеШаблона.ИменаОбщихМодулей Цикл
		МодульРазбораКМ = ПараметрыРазбораКодаМаркировки.ОбщиеМодулиРазбораКМ[ИмяОбщегоМодуля];
		ОбщиеМодулиТекущегоШаблона.Добавить(Новый Структура("Имя, ОбщийМодуль", ИмяОбщегоМодуля, МодульРазбораКМ));
	КонецЦикла;
	
	СоставКодаМаркировки = СкопироватьСоставКодаМаркировки(ДанныеШаблона.СоставКодаМаркировки);
	
	ПараметрыОписанияКодаМаркировки = Новый Структура;
	ПараметрыОписанияКодаМаркировки.Вставить("ВидыПродукции",                   ДанныеШаблона.ВидыПродукции);
	ПараметрыОписанияКодаМаркировки.Вставить("ОписаниеЭлементовКодаМаркировки", ДанныеШаблона.ОписаниеЭлементовКодаМаркировки);
	ПараметрыОписанияКодаМаркировки.Вставить("НачинаетсяСоСкобки",              ШаблонКодаМаркировки.НачинаетсяСоСкобки);
	ПараметрыОписанияКодаМаркировки.Вставить("ПозицииЭлементовКодаМаркировки",  ДанныеШаблона.ПозицииЭлементовКодаМаркировки);
	ПараметрыОписанияКодаМаркировки.Вставить("Шаблон",                          ШаблонКодаМаркировки.Шаблон);
	ПараметрыОписанияКодаМаркировки.Вставить("ТипШтрихкода",                    ШаблонКодаМаркировки.ТипШтрихкода);
	ПараметрыОписанияКодаМаркировки.Вставить("ВидУпаковки",                     ШаблонКодаМаркировки.ВидУпаковки);
	ПараметрыОписанияКодаМаркировки.Вставить("ОбщиеМодули",                     ОбщиеМодулиТекущегоШаблона);
	ПараметрыОписанияКодаМаркировки.Вставить("МодульКонтекста",                 ПараметрыРазбораКодаМаркировки.МодульКонтекста);
	ПараметрыОписанияКодаМаркировки.Вставить("ДополнительныеПараметры",         Настройки.ДополнительныеПараметры);
	
	Если Не КодМаркировкиСоответствуетОписанию(ПараметрыРазбораКодаМаркировки, ПараметрыОписанияКодаМаркировки, СоставКодаМаркировки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Состав возможных видов продукции мог поменяться
	ВидыПродукции = ПараметрыОписанияКодаМаркировки.ВидыПродукции;
	
	ДанныеРезультата = НовыйРезультатРазбораКодаМаркировки();
	ДанныеРезультата.ШаблонРазбораКодаМаркировки = ШаблонКодаМаркировки.Шаблон;
	ДанныеРезультата.КодМаркировки               = ПараметрыРазбораКодаМаркировки.КодМаркировки;
	ДанныеРезультата.ТипШтрихкода                = ШаблонКодаМаркировки.ТипШтрихкода;
	ДанныеРезультата.ВидУпаковки                 = ШаблонКодаМаркировки.ВидУпаковки;
	ДанныеРезультата.ВидыПродукции               = ВидыПродукции;
	ДанныеРезультата.СоставКодаМаркировки        = СоставКодаМаркировки;
	
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		ДанныеРезультата.ВидыУпаковокПоВидамПродукции[ВидПродукции] = ДанныеШаблона.ВидыУпаковокПоВидамПродукции[ВидПродукции];
	КонецЦикла;
	
	ВидУпаковкиДляНормализации  = ШаблонКодаМаркировки.ВидУпаковки;
	ВидПродукцииДляНормализации = ШаблонКодаМаркировки.ВидПродукции;
	
	Если ВидыПродукции.Количество() = 1 Тогда
		ВидПродукцииДляНормализации = ВидыПродукции[0];
	ИначеЕсли ПараметрыРазбораКодаМаркировки.ФильтрПоВидуПродукции.Использовать Тогда
		ВидПродукцииНайден = Ложь;
		Для Каждого ВидПродукции Из ПараметрыРазбораКодаМаркировки.ФильтрПоВидуПродукции.ВидыПродукции Цикл
			Если ВидыПродукции.Найти(ВидПродукции) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ВидПродукцииНайден Тогда
				ВидПродукцииДляНормализации = Неопределено;
				Прервать;
			КонецЕсли;
			ВидПродукцииДляНормализации = ВидПродукции;
			ВидПродукцииНайден = Истина;
		КонецЦикла;
	КонецЕсли;
	
	ДанныеДляПолученияНормализированногоКодаМаркировки = Новый Структура("КодМаркировки, ВидУпаковки, ТипШтрихкода, СоставКодаМаркировки");
	ДанныеДляПолученияНормализированногоКодаМаркировки.КодМаркировки        = ДанныеРезультата.КодМаркировки;
	ДанныеДляПолученияНормализированногоКодаМаркировки.ВидУпаковки          = ДанныеРезультата.ВидУпаковки;
	ДанныеДляПолученияНормализированногоКодаМаркировки.ТипШтрихкода         = ДанныеРезультата.ТипШтрихкода;
	ДанныеДляПолученияНормализированногоКодаМаркировки.СоставКодаМаркировки = ДанныеРезультата.СоставКодаМаркировки;
	
	Если Не ЗначениеЗаполнено(ВидПродукцииДляНормализации) Тогда
		ВидПродукцииДляНормализации = ВидыПродукции[0];
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидУпаковкиДляНормализации) И ЗначениеЗаполнено(ВидПродукцииДляНормализации) Тогда
		ВидУпаковкиДляНормализации = ДанныеРезультата.ВидыУпаковокПоВидамПродукции[ВидПродукцииДляНормализации][0];
		ДанныеДляПолученияНормализированногоКодаМаркировки.ВидУпаковки = ВидУпаковкиДляНормализации;
	КонецЕсли;
	
	ДанныеРезультата.НормализованныйКодМаркировки = НормализоватьКодМаркировкиУпаковкиGS1128(ДанныеДляПолученияНормализированногоКодаМаркировки, ВидПродукцииДляНормализации);
	
	Возврат ДанныеРезультата;
	
КонецФункции

Функция КодМаркировкиСоответствуетОписанию(ПараметрыРазбораКодаМаркировки, ПараметрыОписанияКодаМаркировки, СоставКодаМаркировки)
	
	ИмяСвойстваПозицииЗначения = "ПозицияЗначения";
	
	// Проверяем наличие идентификаторов применения в шаблоне кода маркировки
	Если ПараметрыОписанияКодаМаркировки.НачинаетсяСоСкобки Тогда
		
		// Коды маркировки с GS1 предварительно обрабатываются методом БПО,
		// МенеджерОборудованияМаркировкаКлиентСервер.РазобратьСтрокуШтрихкодаGS1,
		// из которого получается код маркировки со скобками
		НачинаетсяСоСкобки = ПараметрыРазбораКодаМаркировки.НачинаетсяСоСкобки Или ПараметрыРазбораКодаМаркировки.СодержитРазделительGS;
		
		Если НачинаетсяСоСкобки Тогда
			ИмяСвойстваПозицииЗначения = "ПозицияЗначенияСоСкобкой";
		КонецЕсли;
		
		// Проверку осуществляем с конца
		
		ТекущийИндекс = ПараметрыОписанияКодаМаркировки.ОписаниеЭлементовКодаМаркировки.Количество() - 1;
		Пока ТекущийИндекс >= 0 Цикл
			
			ОписаниеЭлементаКМ        = ПараметрыОписанияКодаМаркировки.ОписаниеЭлементовКодаМаркировки[ТекущийИндекс];
			ОписаниеПозицииЭлементаКМ = ПараметрыОписанияКодаМаркировки.ПозицииЭлементовКодаМаркировки[ОписаниеЭлементаКМ.Имя];
			
			Если НачинаетсяСоСкобки Тогда
				ПозицияИдентификатора = ОписаниеПозицииЭлементаКМ.ПозицияИдентификатораСоСкобкой - 1;
				ДлинаИдентификатора   = ОписаниеПозицииЭлементаКМ.ДлинаИдентификатора + 2;
				Идентификатор         = СтрШаблон("(%1)", ОписаниеЭлементаКМ.Код);
			Иначе
				ПозицияИдентификатора = ОписаниеПозицииЭлементаКМ.ПозицияИдентификатора;
				ДлинаИдентификатора   = ОписаниеПозицииЭлементаКМ.ДлинаИдентификатора;
				Идентификатор         = ОписаниеЭлементаКМ.Код;
			КонецЕсли;
			
			Если Идентификатор <> Сред(ПараметрыРазбораКодаМаркировки.КодМаркировки, ПозицияИдентификатора, ДлинаИдентификатора) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ТекущийИндекс = ТекущийИндекс - 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗначенияЭлементовКМ = ПолучитьЭлементыКодаМаркировкиПоПозицииВШаблоне(ПараметрыРазбораКодаМаркировки.КодМаркировки,
						  ПараметрыОписанияКодаМаркировки.ПозицииЭлементовКодаМаркировки, ИмяСвойстваПозицииЗначения, "ДлинаЗначения");
	
	ИменаПроверенныхЭлементовКМ = Новый Соответствие;
	ПроверятьАлфавитЭлементов   = ПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов;
	
	// Проверка табачной продукции и альтернативной табачной продукции
	СвойствоПриоритетнойПроверки = "МРЦСтрокой";
	Если ЗначенияЭлементовКМ[СвойствоПриоритетнойПроверки] <> Неопределено Тогда
		
		ИменаПроверенныхЭлементовКМ[СвойствоПриоритетнойПроверки] = Истина;
		
		ИндексЭлементаКМ   = ПараметрыОписанияКодаМаркировки.ПозицииЭлементовКодаМаркировки[СвойствоПриоритетнойПроверки].ПорядковыйНомерЭлемента - 1;
		ОписаниеЭлементаКМ = ПараметрыОписанияКодаМаркировки.ОписаниеЭлементовКодаМаркировки[ИндексЭлементаКМ];
		
		Если Не ЭлементКодаМаркировкиСоответствуетОписаниюШаблона(ОписаниеЭлементаКМ, ЗначенияЭлементовКМ, СоставКодаМаркировки, ПараметрыОписанияКодаМаркировки, ПроверятьАлфавитЭлементов) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ВидыПродукции = Новый Массив;
		
		АльтернативныйТабак = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.АльтернативныйТабак");
		Если ПараметрыОписанияКодаМаркировки.ВидыПродукции.Найти(АльтернативныйТабак) <> Неопределено
			И (СоставКодаМаркировки.МРЦСтрокой = "000000" Или СоставКодаМаркировки.МРЦСтрокой = "AAAA") Тогда
			
			ВидыПродукции.Добавить(АльтернативныйТабак);
			
		КонецЕсли;
		
		Табак = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная");
		Если ПараметрыОписанияКодаМаркировки.ВидыПродукции.Найти(Табак) <> Неопределено Тогда
			
			ВидыПродукции.Добавить(Табак);
			
		КонецЕсли;
		
		Если ВидыПродукции.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ПараметрыОписанияКодаМаркировки.ВидыПродукции = ВидыПродукции;
		
	КонецЕсли;
	
	Для Каждого ОписаниеЭлементаКМ Из ПараметрыОписанияКодаМаркировки.ОписаниеЭлементовКодаМаркировки Цикл
		
		Если ИменаПроверенныхЭлементовКМ[ОписаниеЭлементаКМ.Имя] = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЭлементКодаМаркировкиСоответствуетОписаниюШаблона(ОписаниеЭлементаКМ, ЗначенияЭлементовКМ, СоставКодаМаркировки, ПараметрыОписанияКодаМаркировки, ПроверятьАлфавитЭлементов) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Получает из кода маркировки составные части по из позиции в шаблоне.
// При этом в коде маркировки не должно быть недопустимых символов.
//
// Параметры:
//  КодМаркировки                      - Строка.
//  ПозицииЭлементовКМ                 - см. ПозицииЭлементовВШаблонеКодаМаркировки
//  ИмяСвойстваПозиции                 - Строка.
//  ИмяСвойстваДлины                   - Строка.
//  ИменаИдентификаторовКодаМаркировки - Массив из Строка.
//
// Возвращаемое значение:
//  Соответствие
//
Функция ПолучитьЭлементыКодаМаркировкиПоПозицииВШаблоне(КодМаркировки, ПозицииЭлементовКМ, ИмяСвойстваПозиции, ИмяСвойстваДлины, ИменаИдентификаторовКодаМаркировки = Неопределено) Экспорт
	
	// Для идентификатора:
	// - ПозицияИдентификатора
	// - ПозицияИдентификатораСоСкобкой
	// - ДлинаИдентификатора
	//
	// Для значения:
	// - ПозицияЗначения
	// - ПозицияЗначенияСоСкобкой
	// - ДлинаЗначения
	
	ЗначенияЭлементовКодаМаркировки = Новый Соответствие;
	
	Если ИменаИдентификаторовКодаМаркировки = Неопределено Тогда
		
		Для Каждого ДанныеИдентификатораЭлементаКМ Из ПозицииЭлементовКМ Цикл
			
			ИмяИдентификатораЭлемента = ДанныеИдентификатораЭлементаКМ.Ключ;
			ПозицияЗначенияЭлементаКМ = ДанныеИдентификатораЭлементаКМ.Значение;
			
			ЗначениеЭлементаКМ = Сред(КодМаркировки, ПозицияЗначенияЭлементаКМ[ИмяСвойстваПозиции], ПозицияЗначенияЭлементаКМ[ИмяСвойстваДлины]);
			
			ЗначенияЭлементовКодаМаркировки.Вставить(ИмяИдентификатораЭлемента, ЗначениеЭлементаКМ);
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ИмяИдентификатораЭлемента Из ИменаИдентификаторовКодаМаркировки Цикл
			
			ПозицияЗначенияЭлементаКМ = ПозицииЭлементовКМ[ИмяИдентификатораЭлемента];
			
			Если ПозицияЗначенияЭлементаКМ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеЭлементаКМ = Сред(КодМаркировки, ПозицияЗначенияЭлементаКМ[ИмяСвойстваПозиции], ПозицияЗначенияЭлементаКМ[ИмяСвойстваДлины]);
			
			ЗначенияЭлементовКодаМаркировки.Вставить(ИмяИдентификатораЭлемента, ЗначениеЭлементаКМ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЗначенияЭлементовКодаМаркировки;
	
КонецФункции

Функция ЭлементКодаМаркировкиСоответствуетОписаниюШаблона(ОписаниеЭлементаКМ, ЗначенияЭлементовКМ, СоставКодаМаркировки, ПараметрыОписанияКодаМаркировки, ПроверятьАлфавитЭлементов)
	
	Значение = ЗначенияЭлементовКМ[ОписаниеЭлементаКМ.Имя];
	
	Если ПроверятьАлфавитЭлементов Тогда
		Если ЗначениеЗаполнено(ОписаниеЭлементаКМ.Алфавит)
			И Не КодСоответствуетАлфавиту(Значение, ОписаниеЭлементаКМ.Алфавит) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЭлементКодаМаркировкиСоответствуетОписанию(Значение, ОписаниеЭлементаКМ, СоставКодаМаркировки, ПараметрыОписанияКодаМаркировки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЭлементКодаМаркировкиСоответствуетОписанию(Знач Значение, ОписаниеЭлементаКМ, СоставКодаМаркировки, ПараметрыОписанияКодаМаркировки)
	
	Для Каждого ДанныеОбщегоМодуля Из ПараметрыОписанияКодаМаркировки.ОбщиеМодули Цикл
		Если Не ДанныеОбщегоМодуля.ОбщийМодуль.ЭлементКодаМаркировкиСоответствуетОписаниюПродолжить(Значение, ОписаниеЭлементаКМ, СоставКодаМаркировки, ПараметрыОписанияКодаМаркировки) Тогда
			Возврат Ложь;
		КонецЕсли;
		ДанныеОбщегоМодуля.ОбщийМодуль.ПреобразоватьЗначениеДляЗаполненияСоставаКодаМаркировки(ПараметрыОписанияКодаМаркировки, СоставКодаМаркировки, ОписаниеЭлементаКМ, Значение);
	КонецЦикла;
	
	ЗаполнитьСоставКодаМаркировки(СоставКодаМаркировки, ОписаниеЭлементаКМ, Значение);
	
	Возврат Истина;
	
КонецФункции

Функция ЭлементКодаМаркировкиСоответствуетОписаниюПродолжить(Значение, ОписаниеЭлементаКМ, СоставКодаМаркировки, ПараметрыОписанияКодаМаркировки) Экспорт
	
	Если ОписаниеЭлементаКМ.Имя = "GTIN" Тогда
		
		Если Не РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПовтИсп.ЭтоGTIN(Значение) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ЗначениеEAN = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПовтИсп.ШтрихкодEANИзGTIN(Значение);
		
		ЗаполнитьСоставКодаМаркировки(СоставКодаМаркировки, Новый Структура("Имя", "EAN"), ЗначениеEAN);
		
	ИначеЕсли ОписаниеЭлементаКМ.Имя = "SSCC" Тогда
				
		КонтрольноеЧисло = КонтрольноеЧислоSSCC(Лев(Значение, ОписаниеЭлементаКМ.Длина - 1));
		
		Возврат КонтрольноеЧисло = Число(Прав(Значение, 1));
		
	ИначеЕсли ОписаниеЭлементаКМ.Имя = "МРЦСтрокой" Тогда
		
		РезультатПроверки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПовтИсп.МРЦПоВидуУпаковки(Значение, ПараметрыОписанияКодаМаркировки.ВидУпаковки);
		
		Если Не РезультатПроверки.ЭтоМРЦ Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ЗаполнитьСоставКодаМаркировки(СоставКодаМаркировки, Новый Структура("Имя", "МРЦ"), РезультатПроверки.ЗначениеМРЦ);
		
		ЗаполнитьСоставКодаМаркировки(СоставКодаМаркировки, Новый Структура("Имя", "ВключаетМРЦ"), Истина);
	
	ИначеЕсли ОписаниеЭлементаКМ.Имя = "КодПроверки" Тогда
		
		ЗаполнитьСоставКодаМаркировки(СоставКодаМаркировки, Новый Структура("Имя", "ВключаетКодПроверки"), Истина);
		
	ИначеЕсли ОписаниеЭлементаКМ.Имя = "ДатаФормированияАТК" Тогда
		
		// дата формирования оператором агрегированного таможенного кода (ДДММГГ)
		
		Год   = Прав(Значение, 2);
		Месяц = Сред(Значение, 3, 2);
		День  = Лев(Значение, 2);
		
		ДатаСтрокой = СтрШаблон("20%1%2%3", Год, Месяц, День);
		
		КвалификаторыДаты = Новый КвалификаторыДаты(ЧастиДаты.Дата);
		ОписаниеТипа      = Новый ОписаниеТипов("Дата",,, КвалификаторыДаты);
		
		ДатаФормированияАТК = ОписаниеТипа.ПривестиЗначение(ДатаСтрокой);
		
		Возврат ДатаФормированияАТК <> '00010101';
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область РаботаССоставомКодаМаркировки

Функция СкопироватьСоставКодаМаркировки(СоставКодаМаркировки) Экспорт
	
	НовыйСоставКодаМаркировки = Новый Структура;
	
	Для Каждого КлючЗначение Из СоставКодаМаркировки Цикл
		НовыйСоставКодаМаркировки.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	Возврат НовыйСоставКодаМаркировки;
	
КонецФункции

Функция НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки) Экспорт
	
	СоставКодаМаркировки = Новый Структура;
	СоставКодаМаркировки.Вставить("ВключаетИдентификаторыПрименения", Ложь);
	
	Если ТипШтрихкодаИВидУпаковки.ВидУпаковки    = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская")
		Или ТипШтрихкодаИВидУпаковки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
		
		СоставКодаМаркировки.Вставить("GTIN",          "");
		СоставКодаМаркировки.Вставить("EAN",           "");
		СоставКодаМаркировки.Вставить("СерийныйНомер", "");
		
	ИначеЕсли ТипШтрихкодаИВидУпаковки.ВидУпаковки  = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая")
			И ТипШтрихкодаИВидУпаковки.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.SSCC") Тогда
		
		СоставКодаМаркировки.Вставить("SSCC", "");
		
	ИначеЕсли ТипШтрихкодаИВидУпаковки.ВидУпаковки  = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая")
			И ТипШтрихкодаИВидУпаковки.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.GS1_128") Тогда
		
		СоставКодаМаркировки.Вставить("GTIN", "");
		СоставКодаМаркировки.Вставить("EAN",  "");
		СоставКодаМаркировки.Вставить("КоличествоВложенныхЕдиниц",                 Неопределено);
		СоставКодаМаркировки.Вставить("ВозможныВариантыКоличестваВложенныхЕдиниц", Ложь);
		
	ИначеЕсли ТипШтрихкодаИВидУпаковки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.АгрегированныйТаможенныйКод") Тогда
		
		СоставКодаМаркировки.Вставить("ИНН",                 "");
		СоставКодаМаркировки.Вставить("ДатаФормирования",    "");
		СоставКодаМаркировки.Вставить("ПризнакУникальности", "");
		
	КонецЕсли;
	
	Возврат СоставКодаМаркировки;
	
КонецФункции

Процедура ЗаполнитьСоставКодаМаркировки(СоставКодаМаркировки, ОписаниеЭлементаКМ, Значение) Экспорт
	
	Если СоставКодаМаркировки.Свойство(ОписаниеЭлементаКМ.Имя) Тогда
		СоставКодаМаркировки[ОписаниеЭлементаКМ.Имя] = Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПреобразоватьЗначениеДляЗаполненияСоставаКодаМаркировки(ПараметрыОписанияКодаМаркировки, СоставКодаМаркировки, ОписаниеЭлементаКМ, Значение) Экспорт
	
	Если СоставКодаМаркировки = Неопределено Или Не СоставКодаМаркировки.Свойство(ОписаниеЭлементаКМ.Имя) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписаниеЭлементаКМ.Имя = "ГоденДо" Тогда
		
		Если ОписаниеЭлементаКМ.Код = "17" Тогда
			// Дата окончания срока годности продукции (срок хранения более 72 часов).
			// Формат: YYMMDD
			КвалификаторыДаты = Новый КвалификаторыДаты(ЧастиДаты.Дата);
		Иначе
			// Дата окончания срока годности продукции (срок хранения менее 72 часов)
			// Формат: YYMMDDHHMM
			КвалификаторыДаты = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
		КонецЕсли;
		
		ОписаниеТипа = Новый ОписаниеТипов("Дата",,, КвалификаторыДаты);
		Значение = ОписаниеТипа.ПривестиЗначение("20" + Значение);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РезультатРазбора

Функция РезультатРазбораGS1МожетБытьОбработан(ДанныеДляРазбора, РезультатРазбора, ПримечаниеКРезультатуРазбора, ИдентификаторыОшибок, МодульКонтекста, СодержитРазделительGS, КодМаркировки) Экспорт
	
	Если Не РезультатРазбора.Разобран Тогда
		ПримечаниеКРезультатуРазбора.ИдентификаторОшибки = ИдентификаторыОшибок.ДанныеДляРазбораНекорректны;
		ПримечаниеКРезультатуРазбора.ТекстОшибки         = РезультатРазбора.ОписаниеОшибки;
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатРазбора.ОписаниеОшибки) Тогда
		
		СодержитРазделительGS = Истина;
		КодМаркировки         = РезультатРазбора.ПредставлениеШтрихкода;
		
		Возврат Истина;
		
	КонецЕсли;
	
	ПродолжитьОбработкуКодаМаркировки = Ложь;
	
	ПримечаниеКРезультатуРазбора.ИдентификаторОшибки = ИдентификаторыОшибок.НекорректныйФорматКодМаркировки;
	ПримечаниеКРезультатуРазбора.ТекстОшибки         = РезультатРазбора.ОписаниеОшибки;
	
	Если ТипЗнч(ДанныеДляРазбора) = Тип("Структура") Тогда
		
		// Исходный код маркировки не известен
		КодМаркировкиДляСообщенияПользователю = ДанныеДляРазбора.ПредставлениеШтрихкода + "...";
		
	Иначе
		
		ПродолжитьОбработкуКодаМаркировки = Истина;
		РазделительGS1 = РазделительGS1();
		
		// Сбрасываем признак GS1 и обрезаем код маркировки
		СодержитРазделительGS = Ложь;
		КодМаркировки         = Лев(ДанныеДляРазбора, СтрНайти(ДанныеДляРазбора, РазделительGS1) - 1);
		
		КодМаркировкиДляСообщенияПользователю = СтрЗаменить(ДанныеДляРазбора, РазделительGS1, "<GS>");;
		
	КонецЕсли;
	
	ТекстОшибки = СтрШаблон(НСтр("ru = 'Некорректный формат кода маркировки %1!'"), КодМаркировкиДляСообщенияПользователю)
								+ Символы.ПС + ПримечаниеКРезультатуРазбора.ТекстОшибки;
	
	ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
	
	Возврат ПродолжитьОбработкуКодаМаркировки;
	
КонецФункции

Функция РезультатРазбораКодаМаркировкиПоФильтру(РезультатРазбораКМ, ФильтрПоВидуПродукции) Экспорт
	
	РезультатПоФильтру = Новый Массив;
	
	Для Каждого ДанныеРезультата Из РезультатРазбораКМ Цикл
		
		ВидыПродукцииПоФильтру = ОбщегоНазначенияИСМПТККлиентСервер.ВидыПродукцииПоФильтру(ФильтрПоВидуПродукции, ДанныеРезультата.ВидыПродукции);
		
		Если ВидыПродукцииПоФильтру.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатПоФильтру.Добавить(ДанныеРезультата);
		
		ДанныеРезультата.ВидыПродукции = ВидыПродукцииПоФильтру;
		
		ВидыУпаковокПоВидамПродукции = Новый Соответствие;
		Для Каждого ВидПродукции Из ДанныеРезультата.ВидыПродукции Цикл
			ВидыУпаковокПоВидамПродукции[ВидПродукции] = ДанныеРезультата.ВидыУпаковокПоВидамПродукции[ВидПродукции];
		КонецЦикла;
		ДанныеРезультата.ВидыУпаковокПоВидамПродукции = ВидыУпаковокПоВидамПродукции;
		
		Если Не ЗначениеЗаполнено(ДанныеРезультата.ВидУпаковки) Тогда
			ВидУпаковки  = Неопределено;
			ВидыУпаковок = Новый Соответствие;
			Для Каждого ВидПродукции Из ДанныеРезультата.ВидыПродукции Цикл
				Для Каждого ВидУпаковки Из ВидыУпаковокПоВидамПродукции[ВидПродукции] Цикл
					Если ВидыУпаковок[ВидУпаковки] = Неопределено Тогда
						ВидыУпаковок[ВидУпаковки] = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			ДанныеРезультата.ВидУпаковки = ?(ВидыУпаковок.Количество() = 1, ВидУпаковки, ДанныеРезультата.ВидУпаковки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатПоФильтру;
	
КонецФункции

// Идентификаторы ошибок разобра кода маркировки.
//
// Возвращаемое значение:
//   Структура:
//    * УчетМаркируемойПродукцииНеВедется
//    * ДанныеДляРазбораНекорректны
//    * КодМаркировкиНеСоответствуетНиОдномуШаблону
//    * КодМаркировкиСоответствуетНесколькимШаблонам
//    * КодМаркировкиСоответствуетДругимВидамПродукции
//
Функция ИдентификаторыОшибокРазобраКодаМаркировки() Экспорт
	
	ИдентификаторОшибки = Новый Структура;
	ИдентификаторОшибки.Вставить("УчетМаркируемойПродукцииНеВедется",              "УчетМаркируемойПродукцииНеВедется");
	ИдентификаторОшибки.Вставить("ДанныеДляРазбораНекорректны",                    "ДанныеДляРазбораНекорректны");
	ИдентификаторОшибки.Вставить("КодМаркировкиНеСоответствуетНиОдномуШаблону",    "КодМаркировкиНеСоответствуетНиОдномуШаблону");
	ИдентификаторОшибки.Вставить("КодМаркировкиСоответствуетНесколькимШаблонам",   "КодМаркировкиСоответствуетНесколькимШаблонам");
	ИдентификаторОшибки.Вставить("КодМаркировкиСоответствуетДругимВидамПродукции", "КодМаркировкиСоответствуетДругимВидамПродукции");
	ИдентификаторОшибки.Вставить("НекорректныйФорматКодМаркировки",                "НекорректныйФорматКодМаркировки");
	
	Возврат ИдентификаторОшибки;
	
КонецФункции

Функция ОбработатьРезультатНесколькихШаблонов(Результат, ДанныеРезультата)
	
	// Для табака может подойти два шаблона: GTIN+Серия+КодПроверки и GTIN+Серия+МРЦСтрокой+КодПроверки, берем с МРЦ
	Если Результат.Количество() = 2
		И Результат[0].ВидыПродукции[0] = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная")
		И Результат[1].ВидыПродукции[0] = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда
		
		Если Результат[0].СоставКодаМаркировки.ВключаетМРЦ Тогда
			ДанныеРезультата = Результат[0];
			Возврат Истина;
		ИначеЕсли Результат[1].СоставКодаМаркировки.ВключаетМРЦ Тогда
			ДанныеРезультата = Результат[1];
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область НормализацияКодаМаркировки

Функция НормализоватьКодМаркировкиУпаковкиТабакаGS1128(РезультатРазбора, ВидПродукции, ПараметрыНормализации = Неопределено) Экспорт
	
	Если ПараметрыНормализации = Неопределено Тогда
		ПараметрыНормализации = ПараметрыНормализацииКодаМаркировки();
	КонецЕсли;
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Алкогольная") Тогда
		
		Возврат РезультатРазбора[ПараметрыНормализации.ИмяСвойстваКодМаркировки];
	
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная")
		И РезультатРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая")
		И РезультатРазбора.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.GS1_128") Тогда
		
		Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
			Возврат РезультатРазбора[ПараметрыНормализации.ИмяСвойстваКодМаркировки];
		КонецЕсли;
		
		Возврат КодМаркировкиБезСкобок(РезультатРазбора[ПараметрыНормализации.ИмяСвойстваКодМаркировки]);
		
	ИначеЕсли РезультатРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
		
		Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
			Возврат СтрШаблон("(00)%1", Прав(РезультатРазбора[ПараметрыНормализации.ИмяСвойстваКодМаркировки], 18));
		КонецЕсли;
		
		Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда
			Возврат СтрШаблон("00%1", Прав(РезультатРазбора[ПараметрыНормализации.ИмяСвойстваКодМаркировки], 18));
		КонецЕсли;
		
		Возврат Прав(РезультатРазбора[ПараметрыНормализации.ИмяСвойстваКодМаркировки], 18);
		
	КонецЕсли;
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда
		
		ВключатьМРЦ = ПараметрыНормализации.ВключатьМРЦ И РезультатРазбора.СоставКодаМаркировки.ВключаетМРЦ;
		
		Если РезультатРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда
			
			Если ВключатьМРЦ Тогда
				
				Возврат СтрШаблон("%1%2%3",
					РезультатРазбора.СоставКодаМаркировки.GTIN,
					РезультатРазбора.СоставКодаМаркировки.СерийныйНомер,
					РезультатРазбора.СоставКодаМаркировки.МРЦСтрокой);
				
			Иначе
				
				Возврат СтрШаблон("%1%2",
					РезультатРазбора.СоставКодаМаркировки.GTIN,
					РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
				
			КонецЕсли;
			
		Иначе
			
			Если ВключатьМРЦ Тогда
				
				Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
					Возврат СтрШаблон("(01)%1(21)%2(8005)%3",
						РезультатРазбора.СоставКодаМаркировки.GTIN,
						РезультатРазбора.СоставКодаМаркировки.СерийныйНомер,
						РезультатРазбора.СоставКодаМаркировки.МРЦСтрокой);
				КонецЕсли;
				
				ЭлементыКМ = Новый Массив;
				ЭлементыКМ.Добавить("01");
				ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
				ЭлементыКМ.Добавить("21");
				ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
				ЭлементыКМ.Добавить("8005");
				ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.МРЦСтрокой);
				Возврат СтрСоединить(ЭлементыКМ);
				
			Иначе
				
				Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
					Возврат СтрШаблон("(01)%1(21)%2",
						РезультатРазбора.СоставКодаМаркировки.GTIN,
						РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
				КонецЕсли;
				
				ЭлементыКМ = Новый Массив;
				ЭлементыКМ.Добавить("01");
				ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
				ЭлементыКМ.Добавить("21");
				ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
				Возврат СтрСоединить(ЭлементыКМ);
				
			КонецЕсли;
			
			
		КонецЕсли;
		
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная") 
		ИЛИ ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты")
		ИЛИ ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность")
		ИЛИ ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.БезалкогольныеНапитки") Тогда
		
		ВключатьКодТНВЭД = РезультатРазбора.СоставКодаМаркировки.Свойство("КодТНВЭД")
		                 И ЗначениеЗаполнено(РезультатРазбора.СоставКодаМаркировки.КодТНВЭД);
		
		Если ВключатьКодТНВЭД Тогда
			
			Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
				Возврат СтрШаблон("(01)%1(21)%2(240)%3",
					РезультатРазбора.СоставКодаМаркировки.GTIN,
					РезультатРазбора.СоставКодаМаркировки.СерийныйНомер,
					РезультатРазбора.СоставКодаМаркировки.КодТНВЭД);
			КонецЕсли;
			
			ЭлементыКМ = Новый Массив;
			ЭлементыКМ.Добавить("01");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
			ЭлементыКМ.Добавить("21");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
			ЭлементыКМ.Добавить("240");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.КодТНВЭД);
			Возврат СтрСоединить(ЭлементыКМ);
			
		Иначе
			
			Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
				Возврат СтрШаблон("(01)%1(21)%2",
					РезультатРазбора.СоставКодаМаркировки.GTIN,
					РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
			КонецЕсли;
			
			ЭлементыКМ = Новый Массив;
			ЭлементыКМ.Добавить("01");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
			ЭлементыКМ.Добавить("21");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
			Возврат СтрСоединить(ЭлементыКМ);
			
		КонецЕсли;
		
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция") Тогда
		
		ВключатьСрокГодности = ПараметрыНормализации.ВключатьСрокГодности
		                     И РезультатРазбора.СоставКодаМаркировки.Свойство("ГоденДо")
		                     И ЗначениеЗаполнено(РезультатРазбора.СоставКодаМаркировки.ГоденДо);
		
		Если ВключатьСрокГодности Тогда
			
			Если РезультатРазбора.СоставКодаМаркировки.Скоропортящаяся Тогда
				КодЭлемента = "7003";
				ФорматДаты  = "ДФ=yyMMddHHmm;"; // Формат: YYMMDDHHMM
			Иначе
				КодЭлемента = "17";
				ФорматДаты  = "ДФ=yyMMdd;"; // Формат: YYMMDD
			КонецЕсли;
			
			ЗначениеЭлемента = Формат(РезультатРазбора.СоставКодаМаркировки.ГоденДо, ФорматДаты);
			
			Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
				Возврат СтрШаблон("(01)%1(21)%2(%3)%4",
					РезультатРазбора.СоставКодаМаркировки.GTIN,
					РезультатРазбора.СоставКодаМаркировки.СерийныйНомер,
					КодЭлемента,
					ЗначениеЭлемента);
			КонецЕсли;
			
			ЭлементыКМ = Новый Массив;
			ЭлементыКМ.Добавить("01");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
			ЭлементыКМ.Добавить("21");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
			ЭлементыКМ.Добавить(КодЭлемента);
			ЭлементыКМ.Добавить(ЗначениеЭлемента);
			Возврат СтрСоединить(ЭлементыКМ);
			
		Иначе
			
			Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
				Возврат СтрШаблон("(01)%1(21)%2",
					РезультатРазбора.СоставКодаМаркировки.GTIN,
					РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
			КонецЕсли;
			
			ЭлементыКМ = Новый Массив;
			ЭлементыКМ.Добавить("01");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
			ЭлементыКМ.Добавить("21");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
			Возврат СтрСоединить(ЭлементыКМ);
			
		КонецЕсли;
				
	КонецЕсли;
	
	Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
		Возврат СтрШаблон("(01)%1(21)%2",
			РезультатРазбора.СоставКодаМаркировки.GTIN,
			РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
	КонецЕсли;
	
	ЭлементыКМ = Новый Массив;
	ЭлементыКМ.Добавить("01");
	ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
	ЭлементыКМ.Добавить("21");
	ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
	Возврат СтрСоединить(ЭлементыКМ);
	
КонецФункции

// Нормализует код маркировки.
// 
// Параметры:
//   РезультатРазбора - см. РазборКодаМаркировкиИССлужебныйКлиентСервер.НовыйРезультатРазбораКодаМаркировки.
//   ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС.
//   ПараметрыНормализации - см. ПараметрыНормализацииКодаМаркировки.
//
// Возвращаемое значение:
//   Строка
//
Функция НормализоватьКодМаркировкиУпаковкиGS1128(РезультатРазбора, ВидПродукции, ПараметрыНормализации = Неопределено) Экспорт
	
	Если ПараметрыНормализации = Неопределено Тогда
		ПараметрыНормализации  = ПараметрыНормализацииКодаМаркировки();
	КонецЕсли;
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Алкогольная") Тогда
		
		Возврат РезультатРазбора[ПараметрыНормализации.ИмяСвойстваКодМаркировки];
		
	ИначеЕсли РезультатРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
		
		Если РезультатРазбора.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.GS1_128") Тогда
			
			Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
				Возврат РезультатРазбора[ПараметрыНормализации.ИмяСвойстваКодМаркировки];
			КонецЕсли;
			
			Возврат КодМаркировкиБезСкобок(РезультатРазбора[ПараметрыНормализации.ИмяСвойстваКодМаркировки]);
			
		КонецЕсли;
		
			Возврат РезультатРазбора[ПараметрыНормализации.ИмяСвойстваКодМаркировки];
		
	ИначеЕсли РезультатРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.АгрегированныйТаможенныйКод") Тогда
		
		Возврат РезультатРазбора[ПараметрыНормализации.ИмяСвойстваКодМаркировки];
		
	КонецЕсли;
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда
		
		ВключатьМРЦ = ПараметрыНормализации.ВключатьМРЦ И РезультатРазбора.СоставКодаМаркировки.ВключаетМРЦ;
		
		Если РезультатРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда
			
			Если ВключатьМРЦ Тогда
				
				Возврат СтрШаблон("%1%2%3",
					РезультатРазбора.СоставКодаМаркировки.GTIN,
					РезультатРазбора.СоставКодаМаркировки.СерийныйНомер,
					РезультатРазбора.СоставКодаМаркировки.МРЦСтрокой);
				
			Иначе
				
				Возврат СтрШаблон("%1%2",
					РезультатРазбора.СоставКодаМаркировки.GTIN,
					РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
				
			КонецЕсли;
			
		Иначе
			
			Если ВключатьМРЦ Тогда
				
				Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
					
					Возврат СтрШаблон("01%(1)21%2(8005)%3",
						РезультатРазбора.СоставКодаМаркировки.GTIN,
						РезультатРазбора.СоставКодаМаркировки.СерийныйНомер,
						РезультатРазбора.СоставКодаМаркировки.МРЦСтрокой);
						
				КонецЕсли;
				
				ЭлементыКМ = Новый Массив;
				ЭлементыКМ.Добавить("01");
				ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
				ЭлементыКМ.Добавить("21");
				ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
				ЭлементыКМ.Добавить("8005");
				ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.МРЦСтрокой);
				
				Возврат СтрСоединить(ЭлементыКМ);
				
			Иначе
				
				Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
					
					Возврат СтрШаблон("01%(1)21%2",
						РезультатРазбора.СоставКодаМаркировки.GTIN,
						РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
						
				КонецЕсли;
				
				ЭлементыКМ = Новый Массив;
				ЭлементыКМ.Добавить("01");
				ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
				ЭлементыКМ.Добавить("21");
				ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
				
				Возврат СтрСоединить(ЭлементыКМ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.АльтернативныйТабак") Тогда
		
		Если РезультатРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская")
			И Не РезультатРазбора.СоставКодаМаркировки.ВключаетИдентификаторыПрименения Тогда
			
			Возврат СтрШаблон("%1%2",
				РезультатРазбора.СоставКодаМаркировки.GTIN,
				РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
			
		Иначе
			
			Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
				
				Возврат СтрШаблон("01%(1)21%2",
					РезультатРазбора.СоставКодаМаркировки.GTIN,
					РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
					
			КонецЕсли;
			
			ЭлементыКМ = Новый Массив;
			ЭлементыКМ.Добавить("01");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
			ЭлементыКМ.Добавить("21");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
			
			Возврат СтрСоединить(ЭлементыКМ);
			
		КонецЕсли;
		
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная") Тогда
		
		Если РезультатРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда
			ПараметрыНормализации.НачинаетсяСоСкобки = СтрНачинаетсяС(РезультатРазбора.КодМаркировки, "(");
		КонецЕсли;
		
		ВключатьКодТНВЭД = РезультатРазбора.СоставКодаМаркировки.Свойство("КодТНВЭД")
		                 И ЗначениеЗаполнено(РезультатРазбора.СоставКодаМаркировки.КодТНВЭД);
		
		Если ВключатьКодТНВЭД Тогда
			
			Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
				
				Возврат СтрШаблон("01%(1)21%2(240)%3",
					РезультатРазбора.СоставКодаМаркировки.GTIN,
					РезультатРазбора.СоставКодаМаркировки.СерийныйНомер,
					РезультатРазбора.СоставКодаМаркировки.КодТНВЭД);
					
			КонецЕсли;
			
			ЭлементыКМ = Новый Массив;
			ЭлементыКМ.Добавить("01");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
			ЭлементыКМ.Добавить("21");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
			ЭлементыКМ.Добавить("240");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.КодТНВЭД);
			
			Возврат СтрСоединить(ЭлементыКМ);
			
		Иначе
			
			Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
				
				Возврат СтрШаблон("01%(1)21%2",
					РезультатРазбора.СоставКодаМаркировки.GTIN,
					РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
					
			КонецЕсли;
			
			ЭлементыКМ = Новый Массив;
			ЭлементыКМ.Добавить("01");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
			ЭлементыКМ.Добавить("21");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
			
			Возврат СтрСоединить(ЭлементыКМ);
			
		КонецЕсли;
		
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция") Тогда
		
		ВключатьСрокГодности = ПараметрыНормализации.ВключатьСрокГодности
		                     И РезультатРазбора.СоставКодаМаркировки.Свойство("ГоденДо")
		                     И ЗначениеЗаполнено(РезультатРазбора.СоставКодаМаркировки.ГоденДо);
							 
		Если РезультатРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда
			ПараметрыНормализации.НачинаетсяСоСкобки = СтрНачинаетсяС(РезультатРазбора.КодМаркировки, "(");
		КонецЕсли;
		
		Если ВключатьСрокГодности Тогда
			
			Если РезультатРазбора.СоставКодаМаркировки.Скоропортящаяся Тогда
				КодЭлемента = "7003";
				ФорматДаты  = "ДФ=yyMMddHHmm;"; // Формат: YYMMDDHHMM
			Иначе
				КодЭлемента = "17";
				ФорматДаты  = "ДФ=yyMMdd;"; // Формат: YYMMDD
			КонецЕсли;
			
			ЗначениеЭлемента = Формат(РезультатРазбора.СоставКодаМаркировки.ГоденДо, ФорматДаты);
			
			Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
				
				Возврат СтрШаблон("01%(1)21%2(%3)%4",
					РезультатРазбора.СоставКодаМаркировки.GTIN,
					РезультатРазбора.СоставКодаМаркировки.СерийныйНомер,
					КодЭлемента,
					ЗначениеЭлемента);
					
			КонецЕсли;
			
			ЭлементыКМ = Новый Массив;
			ЭлементыКМ.Добавить("01");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
			ЭлементыКМ.Добавить("21");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
			ЭлементыКМ.Добавить(КодЭлемента);
			ЭлементыКМ.Добавить(ЗначениеЭлемента);
			
			Возврат СтрСоединить(ЭлементыКМ);
			
		Иначе
			
			Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
				
				Возврат СтрШаблон("01%(1)21%2",
					РезультатРазбора.СоставКодаМаркировки.GTIN,
					РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
					
			КонецЕсли;
			
			ЭлементыКМ = Новый Массив;
			ЭлементыКМ.Добавить("01");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
			ЭлементыКМ.Добавить("21");
			ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
			
			Возврат СтрСоединить(ЭлементыКМ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыНормализации.НачинаетсяСоСкобки Тогда
		
		Возврат СтрШаблон("01%(1)21%2",
			РезультатРазбора.СоставКодаМаркировки.GTIN,
			РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
			
	КонецЕсли;
	
	ЭлементыКМ = Новый Массив;
	ЭлементыКМ.Добавить("01");
	ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.GTIN);
	ЭлементыКМ.Добавить("21");
	ЭлементыКМ.Добавить(РезультатРазбора.СоставКодаМаркировки.СерийныйНомер);
	
	Возврат СтрСоединить(ЭлементыКМ);
	
КонецФункции

// Инициализировать параметры нормализации кода маркировки
// 
// Возвращаемое значение:
// 	Структура:
// * ВключатьМРЦ - Булево - Признак включения МРЦ
// * ИмяСвойстваКодМаркировки - Строка - Имя свойства для получения кода маркировки
Функция ПараметрыНормализацииКодаМаркировки() Экспорт
	
	ПараметрыНормализации = Новый Структура;
	ПараметрыНормализации.Вставить("ИмяСвойстваКодМаркировки", "КодМаркировки");
	ПараметрыНормализации.Вставить("НачинаетсяСоСкобки",        Истина);
	ПараметрыНормализации.Вставить("ВключатьМРЦ",               Истина); // Табак
	ПараметрыНормализации.Вставить("ВключатьСрокГодности",      Истина); // Молочная продукция
	
	Возврат ПараметрыНормализации;
	
КонецФункции

#КонецОбласти

#Область ОпределениеВидаМП

// Возвращает признак принадлежности переданного в параметре вида продукции к виду продукции ИС МП.
//
// Параметры:
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИСМПТК - Вид продукции для анализа
//  ВключатьТабачнуюПродукцию - Булево - Признак включения табачной продукции
//  ВключатьМолочнуюПродукцию - Булево - Признак вкючения молочной продукции
// Возвращаемое значение:
//  Булево - Принадлежность к виду продукции ИСМП.
//
Функция ЭтоПродукцияИСМП(ВидПродукции) Экспорт
	
	ВидыПродукцииИСМПТКМП = ОбщегоНазначенияИСМПТККлиентСервер.ВидыПродукцииИСМП();
	
	Возврат ВидыПродукцииИСМПТКМП.Найти(ВидПродукции) <> Неопределено;

КонецФункции

//Определяет является ли тип упаковки логистической или групповой товарной упаковкой.
//
//Параметры:
//  ТипУпаковки - ПеречислениеСсылка.ТипыУпаковокИСМПТК - тип упаковки
//Возвращаемое значение:
//   Булево - Истина, если тип упаковки относится к логистической или товарной.
Функция ЭтоУпаковка(ТипУпаковки) Экспорт
	
	Возврат ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковокИСМПТК.МонотоварнаяУпаковка")
		Или ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковокИСМПТК.МультитоварнаяУпаковка");
	
КонецФункции

Функция ПолучитьВидПродукцииИзКодаМаркировки(ИсходныеДанные) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка");
	КонецЕсли;
	
	Если Не ИсходныеДанные.Свойство("ФорматBase64") Тогда
		ИсходныеДанные.Вставить("ФорматBase64", Истина);
	КонецЕсли;
	ДанныеШтрихкода = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.ПолучитьДанныеРазбораКМ(ИсходныеДанные);
		
	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка");
	Иначе
		Возврат ДанныеШтрихкода.ВидыПродукции[0];
	КонецЕсли;

КонецФункции

#КонецОбласти

 #КонецОбласти

#Область ПодключаемоеОборудование

Процедура ЗаполнитьБазовыеПараметрыСканирования(ПараметрыСканирования, Контекст) Экспорт
	
	ВидыПродукцииДляПроверки = Новый Массив();
	ВидыПродукцииДляПроверки.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная"));
	ВидыПродукцииДляПроверки.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная"));
	ВидыПродукцииДляПроверки.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция"));
	ВидыПродукцииДляПроверки.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Алкогольная"));
	ВидыПродукцииДляПроверки.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность"));
	ВидыПродукцииДляПроверки.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты"));
	
	Если ОбщегоНазначенияИСМПТККлиентСервер.ДопустимВидПродукции(ПараметрыСканирования, ВидыПродукцииДляПроверки) Тогда 
		
		Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
			Если ОбщегоНазначенияИСМПТККлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект")
				И ОбщегоНазначенияИСМПТККлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст.Объект, "Организация") Тогда
				ПараметрыСканирования.Организация = Контекст.Объект.Организация;
			ИначеЕсли ОбщегоНазначенияИСМПТККлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Организация") Тогда
				ПараметрыСканирования.Организация = Контекст.Организация;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Инициализирует и возвращает общие параметры сканирования для всех видов продукции.
//
// Возвращаемое значение:
//  Структура - Описание:
// * ИмяКолонкиШтрихкодУпаковки - Строка -
// * ИмяТабличнойЧастиШтрихкодыУпаковок - Строка - Наименование табличной части, где хранятся элементы штрихкодов упаковок.
// * Склад - ОпределяемыйТип.Склад - Место хранения.
// * ПараметрыУказанияСерий - Структура -
// * ОперацияКонтроляАкцизныхМарок - Строка -
// * ДополнительныеПараметры - Структура -
// * ИспользуютсяДанныеВыбораПоМаркируемойПродукции - Булево -
// * ДанныеВыбораПоМаркируемойПродукции - Неопределено -
// * ИспользуетсяСоответствиеШтрихкодовСтрокДерева - Булево -
// * АдресДанныхДокументаОснования - Неопределено -
// * КонтрольРасхожденийСДокументомОснованием - Булево -
// * КэшированныеЗначения - Неопределено -
// * ТолькоМаркируемаяПродукция - Булево -
// * ВозможнаЗагрузкаТСД - Булево -
// * ДокументОснование - Неопределено -
// * СоздаватьШтрихкодУпаковки - Булево -
// * АдресСоответствияАкцизныхМарок - Неопределено -
// * ДопустимыеВидыПродукции - Массив -
Функция БазовыеПараметрыСканирования() Экспорт
	
	БазовыеПараметры = Новый Структура;
	
	БазовыеПараметры.Вставить("ДопустимыеВидыПродукции",                        Новый Массив);
	БазовыеПараметры.Вставить("КэшМаркируемойПродукции",                        Неопределено);
	БазовыеПараметры.Вставить("СоздаватьШтрихкодУпаковки",                      Истина);
	БазовыеПараметры.Вставить("ДокументОснование",                              Неопределено);
	БазовыеПараметры.Вставить("ВозможнаЗагрузкаТСД",                            Ложь);
	БазовыеПараметры.Вставить("ТолькоМаркируемаяПродукция",                     Ложь);
	БазовыеПараметры.Вставить("КэшированныеЗначения",                           Неопределено);
	БазовыеПараметры.Вставить("АдресДанныхДокументаОснования",                  Неопределено);
	БазовыеПараметры.Вставить("ИспользуетсяСоответствиеШтрихкодовСтрокДерева",  Ложь);
	БазовыеПараметры.Вставить("ДополнительныеПараметры",                        Новый Структура);
	БазовыеПараметры.Вставить("ОперацияКонтроляАкцизныхМарок",                  "");
	БазовыеПараметры.Вставить("ПараметрыУказанияСерий",                         Неопределено);
	БазовыеПараметры.Вставить("Склад",                                          Неопределено);
	БазовыеПараметры.Вставить("ИмяТабличнойЧастиШтрихкодыУпаковок",             "ШтрихкодыУпаковок");
	БазовыеПараметры.Вставить("ИмяКолонкиШтрихкодУпаковки",                     "ШтрихкодУпаковки");
	БазовыеПараметры.Вставить("КонтрольРасхожденийСДокументомОснованием",       Ложь);
	БазовыеПараметры.Вставить("РазрешенаОбработкаБезУказанияМарки",             Ложь);
	БазовыеПараметры.Вставить("КонтрольПустыхУпаковок",                         Истина);
	БазовыеПараметры.Вставить("СопоставлятьНоменклатуру",                       Истина);
	БазовыеПараметры.Вставить("Организация",                                    Неопределено);
	БазовыеПараметры.Вставить("ДоступнаПечатьЭтикеток",                         Ложь);
	БазовыеПараметры.Вставить("ДопустимыйСпособВводаВОборот",                   Неопределено);
	БазовыеПараметры.Вставить("ИдентификаторФормы",                             Неопределено);
	БазовыеПараметры.Вставить("Владелец",                                       Неопределено);
	БазовыеПараметры.Вставить("СтатусКодаМаркировкиПоУмолчанию",                Неопределено);
	БазовыеПараметры.Вставить("ПроверятьДублиКодовМаркировки",                  Ложь);
	БазовыеПараметры.Вставить("ДанныеТаблицыТовары",                            Неопределено);
	БазовыеПараметры.Вставить("СсылкаНаОбъект",                                 Неопределено);
	БазовыеПараметры.Вставить("ЗапрашиватьСпособВводаВОборот",                  Неопределено);
	
	Возврат БазовыеПараметры;
	
КонецФункции

#КонецОбласти