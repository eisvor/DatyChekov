
#Область ЗагрузкаКодаИзФайла

Процедура ВыполнитьДобавлениеКМИзФайлаВФоне(Параметры, АдресХранилища) Экспорт
	
	ПараметрыСканирования  = Параметры.ПараметрыСканирования;
	ТокенАвторизации	   = Параметры.ТокенАвторизации;
	ТаблицаПолученныхКодов = ПолучитьСтруктуруТаблицыКодов();
	МассивОшибок	   	   = Параметры.МассивОшибок;
	НеПроверятьКорректностьКМ = Параметры.НеПроверятьКорректностьКМ;
	СведенияОВыбранныхДокументах = Параметры.СведенияОВыбранныхДокументах;
	
	ЗагрузитьКодыМаркировки(ПараметрыСканирования, ТаблицаПолученныхКодов, МассивОшибок, ТокенАвторизации, СведенияОВыбранныхДокументах, НеПроверятьКорректностьКМ);
	
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("ТаблицаПолученныхКодов", ТаблицаПолученныхКодов);
	РезультатВыполнения.Вставить("Успешно", 			   Истина);
	РезультатВыполнения.Вставить("МассивОшибок",	   	   МассивОшибок);
	ПоместитьВоВременноеХранилище(РезультатВыполнения,     АдресХранилища);
	
КонецПроцедуры

Функция ЗагрузитьКодыМаркировки(ПараметрыСканирования = Неопределено, ТаблицаПолученныхКодов, МассивОшибок, ТокенАвторизации = Неопределено, СведенияОВыбранныхДокументах = Неопределено, НеПроверятьКорректностьКМ = Ложь)
	
	НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();  
	
	Для Каждого ДокументПользователя Из СведенияОВыбранныхДокументах Цикл
		
		ОбщееКоличествоДокументов = ДокументПользователя.ОбщееКоличество;
		ИмяДокумента	 = ДокументПользователя.ИмяДокумента;
		ИсходныеДанные   = ДокументПользователя.МассивКодов;
		
		Если Не ТипЗнч(ИсходныеДанные) = Тип("Массив") Тогда
			ДанныеДляРазбора = Новый Массив;
			ДанныеДляРазбора.Добавить(ИсходныеДанные);
		Иначе 
			ДанныеДляРазбора = ИсходныеДанные;
		КонецЕсли;
		
		Для Каждого КодМаркировкиBase64 Из ДанныеДляРазбора Цикл
			
			ИсхШтрихкодBase64 = "";
			КодИдентификации  = "";
			СтруктураКодовМаркировки = Новый Структура();
			Если Не НеПроверятьКорректностьКМ Тогда
				ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(КодМаркировкиBase64, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
			Иначе
				//Применяется только в Уведомлении о выводе (ЦЭДМ) для возможности списания некорректно сгенерированных КМ. 
				//В случае установки опции преобразуем КМ до КИ путем обрезки лишних символов, далее работаем с КИ. 
				Если ЗначениеЗаполнено(КодМаркировкиBase64.ШтрихКод) Тогда
					ИсхШтрихкод = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(КодМаркировкиBase64.ШтрихКод);
					Если СтрДлина(ИсхШтрихкод) > 20 Тогда 
						ПозицияРазделителяGS1 = СтрНайти(ИсхШтрихкод, РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.РазделительGS1());
						Если Не ПозицияРазделителяGS1 = 0 Тогда
							КодИдентификации = Лев(ИсхШтрихкод, ПозицияРазделителяGS1-1);
						Иначе
							КодИдентификации = Лев(ИсхШтрихкод, 31); 
						КонецЕсли;
					Иначе 
						КодИдентификации = ИсхШтрихкод;
					КонецЕсли;
					ИсхШтрихкодBase64 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(КодИдентификации);
					КодМаркировкиBase64.ШтрихКод = ИсхШтрихкодBase64; 
					СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(КодМаркировкиBase64);
				КонецЕсли;
				ДанныеРазбора = Неопределено;
			КонецЕсли;
			
			Если ДанныеРазбора = Неопределено 
				И Не НеПроверятьКорректностьКМ Тогда
				Если Не ЗначениеЗаполнено(КодМаркировкиBase64.ШтрихКод) Тогда
					ТекстОшибки     = НСтр("ru = 'В файле %1 найдена пустая строка №%2.'");
					ТекстОшибки     = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, ДанныеДляРазбора.Найти(КодМаркировкиBase64)+1, ?(Не ОбщееКоличествоДокументов = 1, ИмяДокумента, ""));
				Иначе
					Если Не НеПроверятьКорректностьКМ Тогда
						ТекстОшибки     = НСтр("ru = 'Не удалось разобрать код маркировки %1 в строке №%2.'") 
										+ Символы.ПС 
										+ НСтр("ru = 'Он не был добавлен в документ.'");
						НеКорректныйКод = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(КодМаркировкиBase64.ШтрихКод);
						НеКорректныйКод = СтрЗаменить(НеКорректныйКод, Символ(29), "");
						ТекстОшибки     = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, НеКорректныйКод, ДанныеДляРазбора.Найти(КодМаркировкиBase64)+1);
					КонецЕсли;
				КонецЕсли;
				МассивОшибок.Добавить(ТекстОшибки);
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда
				//Для Увед.о выводе из оборота ЦЭДМ, если включена опция не проверять КМ по формату, но при этом полученный КИ вызвал ошибку
				МассивОшибок.Добавить(СтруктураКодовМаркировки);
				Продолжить;
			КонецЕсли;
			
			СтрокаКодыМаркировки = ТаблицаПолученныхКодов.Добавить();
			
			Если НеПроверятьКорректностьКМ Тогда
				СтрокаКодыМаркировки.КодМаркировки 		= СтруктураКодовМаркировки.КодМаркировки;
				СтрокаКодыМаркировки.GTIN 				= СтруктураКодовМаркировки.GTIN;
				СтрокаКодыМаркировки.GTINВерхнегоУровня = СтруктураКодовМаркировки.GTINВерхнегоУровня;
				СтрокаКодыМаркировки.EAN 				= СтруктураКодовМаркировки.EAN;
				СтрокаКодыМаркировки.КодИдентификации 	= СтруктураКодовМаркировки.КодИдентификации;
				СтрокаКодыМаркировки.ВидУпаковки		= СтруктураКодовМаркировки.ВидУпаковки;
				СтрокаКодыМаркировки.ВидПродукции		= СтруктураКодовМаркировки.ВидПродукции;
				СтрокаКодыМаркировки.Количество			= 1;
				
				ДанныеНоменклатуры = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, СтруктураКодовМаркировки.EAN);
				Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
					Номенклатура   = ДанныеНоменклатуры.Номенклатура;
					Характеристика = ДанныеНоменклатуры.Характеристика;
				Иначе
					Номенклатура   = Неопределено;
					Характеристика = Неопределено;
				КонецЕсли;
				СтрокаКодыМаркировки.Номенклатура   	= Номенклатура;
				СтрокаКодыМаркировки.Характеристика		= Характеристика;				
				Продолжить;
			КонецЕсли;			
						
			Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Потребительская 
				Или (ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Групповая
				И Не Константы.АвтоОпределениеЛогистическихКодовИСМПТК.Получить()) Тогда 
				
				GTINВерхнегоУровня = ДанныеРазбора.СоставКодаМаркировки.GTIN;
				GTIN = ?(ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Групповая, "", ДанныеРазбора.СоставКодаМаркировки.GTIN);
				
				//Дополнение данных по номенклатуре
				Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Потребительская Тогда
					ДанныеНоменклатуры = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, ДанныеРазбора.СоставКодаМаркировки.EAN);
				Иначе
					ДанныеНоменклатуры = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(GTINВерхнегоУровня));
				КонецЕсли;
				
				Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
					Номенклатура   = ДанныеНоменклатуры.Номенклатура;
					Характеристика = ДанныеНоменклатуры.Характеристика;
				Иначе
					Номенклатура   = ДанныеНоменклатуры;
					Характеристика = ДанныеНоменклатуры;
				КонецЕсли;
				
				ВидПродукции = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);
				
				СтрокаКодыМаркировки.КодМаркировки 		= КодМаркировкиBase64.ШтрихКод;
				СтрокаКодыМаркировки.GTIN 				= GTIN;
				СтрокаКодыМаркировки.GTINВерхнегоУровня = GTINВерхнегоУровня;
				СтрокаКодыМаркировки.EAN 				= ДанныеРазбора.СоставКодаМаркировки.EAN;
				СтрокаКодыМаркировки.КодИдентификации 	= ДанныеРазбора.НормализованныйКодМаркировки;
				СтрокаКодыМаркировки.ВидУпаковки		= ДанныеРазбора.ВидУпаковки;
				СтрокаКодыМаркировки.ВидПродукции		= ВидПродукции;
				СтрокаКодыМаркировки.Количество			= 1;
				СтрокаКодыМаркировки.Номенклатура   	= Номенклатура;
				СтрокаКодыМаркировки.Характеристика		= Характеристика;
				
			Иначе
				
				ВидУпаковки = ДанныеРазбора.ВидУпаковки;
				Организация = ПараметрыСканирования.Владелец;
				
				Если Константы.АвтоОпределениеЛогистическихКодовИСМПТК.Получить() Тогда
					//Включен автоматический запрос данных с сервера
					Если Не ТокенАвторизации = Неопределено Тогда 
						
						//Поддержка двойного формата кодов SSCC
						УчитыватьДвойнойФорматКодовSSCC = Константы.ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК.Получить();
						Если УчитыватьДвойнойФорматКодовSSCC Тогда
							
							КМПредварительный = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(КодМаркировкиBase64.ШтрихКод);
							
							//Формируем список SSCC в разных форматах
							Если СтрДлина(КМПредварительный) = 20 Тогда
								ПреобразованныйКод = Сред(КМПредварительный, 3); //18-значный SSCC
								ДополнительныйКод  = Неопределено;
							ИначеЕсли СтрДлина(КМПредварительный) = 18 Тогда
								ПреобразованныйКод = "00"   + КМПредварительный;
								ДополнительныйКод  = "(00)" + КМПредварительный;
							Иначе
								ПреобразованныйКод = Неопределено;
								ДополнительныйКод  = Неопределено;
							КонецЕсли;
							
							МассивКМДляПроверки = Новый Массив();
							МассивКМДляПроверки.Добавить(КодМаркировкиBase64.ШтрихКод);
							Если НЕ ПреобразованныйКод = Неопределено Тогда
								МассивКМДляПроверки.Добавить(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(ПреобразованныйКод));
							КонецЕсли;
							Если НЕ ДополнительныйКод = Неопределено Тогда
								МассивКМДляПроверки.Добавить(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(ДополнительныйКод));
							КонецЕсли;
							
							КМ = "";
							//Начинаем опрос сервера по каждому из сформированных кодов для проверки
							Для Каждого КодSSCC Из МассивКМДляПроверки Цикл
								СтруктураЗапрос = Новый Структура("Штрихкод, ВидУпаковки, ФорматBase64", КодSSCC, ВидУпаковки, Истина);
								ДанныеПоГрупповомуКоду = ИнтеграцияИСМПТКВызовСервера.ЗапроситьДанныеПоКодуАгрегации(СтруктураЗапрос, Организация, ТокенАвторизации);	
								
								Если Не ЗначениеЗаполнено(ДанныеПоГрупповомуКоду.ТекстОшибки) Тогда
									//Если по коду вернулась информация, значит нужно использовать этот формат для заполнения таблицы документа
									КМ = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(КодSSCC);
									Прервать;
								КонецЕсли;
							КонецЦикла;
							КМ = ?(Не ЗначениеЗаполнено(КМ), КМПредварительный, КМ);
							
						Иначе
							СтруктураЗапрос = Новый Структура("Штрихкод, ВидУпаковки, ФорматBase64", КодМаркировкиBase64.ШтрихКод, ВидУпаковки, Истина);
							ДанныеПоГрупповомуКоду = ИнтеграцияИСМПТКВызовСервера.ЗапроситьДанныеПоКодуАгрегации(СтруктураЗапрос, Организация, ТокенАвторизации);
						КонецЕсли;
						//////
						
						Если Не ЗначениеЗаполнено(ДанныеПоГрупповомуКоду.ТекстОшибки) Тогда
							
							СтруктураКода = ИнтеграцияИСМПТКВызовСервера.ПолучитьИнформациюПоГрупповомуКоду(ДанныеПоГрупповомуКоду, КМ, ВидУпаковки);
							
							GTIN 			   = СтруктураКода.GTIN;
							GTINВерхнегоУровня = СтруктураКода.GTINВерхнегоУровня;
							EAN                = СтруктураКода.EAN;
							Номенклатура       = СтруктураКода.Номенклатура;
							Характеристика 	   = СтруктураКода.Характеристика;
							ВидПродукции 	   = СтруктураКода.ВидПродукции;
							Количество		   = СтруктураКода.Количество;
							ВидУпаковки		   = СтруктураКода.ВидУпаковки;
							
							Если УчитыватьДвойнойФорматКодовSSCC Тогда
								СтрокаКодыМаркировки.КодМаркировки 	  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(КМ);
								СтрокаКодыМаркировки.КодИдентификации = КМ;
							Иначе
								СтрокаКодыМаркировки.КодМаркировки 	  = КодМаркировкиBase64.ШтрихКод;
								СтрокаКодыМаркировки.КодИдентификации = ДанныеРазбора.НормализованныйКодМаркировки;
							КонецЕсли;
							
							СтрокаКодыМаркировки.GTIN 			  = GTIN;
							СтрокаКодыМаркировки.EAN 			  = EAN;
							СтрокаКодыМаркировки.ВидУпаковки	  = ВидУпаковки;
							СтрокаКодыМаркировки.ВидПродукции	  = ВидПродукции;
							СтрокаКодыМаркировки.Количество		  = Количество;
							СтрокаКодыМаркировки.Номенклатура	  = Номенклатура;
							СтрокаКодыМаркировки.Характеристика	  = Характеристика;
							СтрокаКодыМаркировки.GTINВерхнегоУровня = GTINВерхнегоУровня;
							
						Иначе 
							ЗаполнитьСтрокаКодыМаркировкиЕслиОшибка(СтрокаКодыМаркировки, КодМаркировкиBase64, ДанныеРазбора, ВидУпаковки);
						КонецЕсли;
					Иначе 
						ЗаполнитьСтрокаКодыМаркировкиЕслиОшибка(СтрокаКодыМаркировки, КодМаркировкиBase64, ДанныеРазбора, ВидУпаковки);
					КонецЕсли;
				Иначе
					//Заполняем коды транспортных упаковок без запроса к серверу
					СтрокаКодыМаркировки.КодМаркировки 		= КодМаркировкиBase64.ШтрихКод;
					СтрокаКодыМаркировки.GTIN 				= "";
					СтрокаКодыМаркировки.GTINВерхнегоУровня = "";
					СтрокаКодыМаркировки.EAN 				= "";
					СтрокаКодыМаркировки.КодИдентификации 	= ДанныеРазбора.НормализованныйКодМаркировки;
					СтрокаКодыМаркировки.ВидУпаковки		= ДанныеРазбора.ВидУпаковки;
					СтрокаКодыМаркировки.ВидПродукции		= "";
					СтрокаКодыМаркировки.Количество			= 1;
					СтрокаКодыМаркировки.Номенклатура   	= "";
					СтрокаКодыМаркировки.Характеристика		= "";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецФункции

Процедура ЗаполнитьСтрокаКодыМаркировкиЕслиОшибка(СтрокаКодыМаркировки, КодМаркировкиBase64, ДанныеРазбора, ВидУпаковки)
	
	СтрокаКодыМаркировки.КодМаркировки 	  = КодМаркировкиBase64.ШтрихКод;
	СтрокаКодыМаркировки.КодИдентификации = ДанныеРазбора.НормализованныйКодМаркировки;
	СтрокаКодыМаркировки.Количество		  = 1;
	
	Если ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") 
		И Не ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN") Тогда //Для Групповых КМ у Табака иногда некорректно определяется вид упаковки 
																	   //(из-за скобочек у идентификаторов групп, зависит от формата поступившего КМ)
		СтрокаКодыМаркировки.ВидУпаковки = ВидУпаковки;															   
		СтрокаКодыМаркировки.GTINВерхнегоУровня = "";
		СтрокаКодыМаркировки.GTIN = "";
		СтрокаКодыМаркировки.EAN  = "";
		СтрокаКодыМаркировки.ВидПродукции = ДанныеРазбора.ВидыПродукции[0]; //Не можем заполнить однозначно, т.к. без запроса с сервера для транспортной упаковки состав неизвестен
	Иначе
		СтрокаКодыМаркировки.ВидУпаковки		= ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая");
		СтрокаКодыМаркировки.GTINВерхнегоУровня = ДанныеРазбора.СоставКодаМаркировки.GTIN;
		СтрокаКодыМаркировки.GTIN = "";
		СтрокаКодыМаркировки.EAN  = "";
		
		//Можем определить номенклатуру по верхнему уровню
		ДанныеНоменклатуры = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, ДанныеРазбора.СоставКодаМаркировки.EAN);
		Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
			Номенклатура   = ДанныеНоменклатуры.Номенклатура;
			Характеристика = ДанныеНоменклатуры.Характеристика;
		Иначе
			Номенклатура   = ДанныеНоменклатуры;
			Характеристика = ДанныеНоменклатуры;
		КонецЕсли;
		СтрокаКодыМаркировки.Номенклатура   = Номенклатура;
		СтрокаКодыМаркировки.Характеристика = Характеристика;
		СтрокаКодыМаркировки.ВидПродукции	= ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтруктуруТаблицыКодов()
	
	ТаблицаМарки = Новый ТаблицаЗначений;
	ТаблицаМарки.Колонки.Добавить("КодМаркировки");
	ТаблицаМарки.Колонки.Добавить("ВидУпаковки");
	ТаблицаМарки.Колонки.Добавить("Количество");
	ТаблицаМарки.Колонки.Добавить("GTIN");
	ТаблицаМарки.Колонки.Добавить("GTINВерхнегоУровня");
	ТаблицаМарки.Колонки.Добавить("Номенклатура");
	ТаблицаМарки.Колонки.Добавить("Характеристика");
	ТаблицаМарки.Колонки.Добавить("КоличествоИсточник");
	ТаблицаМарки.Колонки.Добавить("EAN");
	ТаблицаМарки.Колонки.Добавить("КодИдентификации");
	ТаблицаМарки.Колонки.Добавить("ВидПродукции");
	
	Возврат ТаблицаМарки;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаИзТСД

// При необходимости изменяет данные поступившие из ТСД по правилам: вложение упаковки всегда должно 
// быть в массиве после строки самой упаковки; если строки с штрихкодом упаковки нет - она добавляется.
//
// Параметры:
//  ДанныеТСД - Массив - данные поступившие с ТСД (изменяемый параметр)
//
// Возвращаемое значение:
//  Булево - в данных ТСД есть иерархия
//
Функция ДополнитьУпорядочитьДанныеТСД(ДанныеТСД) Экспорт
	
	ТипЧисло  = Тип("Число");
	ТипСтрока = Тип("Строка");
	
	// 1. Дополнить данные поступившие из ТСД / внешних источников (в формате ТСД)
	ВсеШтрихкоды = Новый Соответствие;
	Для Каждого ЭлементМассива Из ДанныеТСД Цикл
		ВсеШтрихкоды.Вставить(ЭлементМассива.Штрихкод, Истина);
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из ДанныеТСД Цикл
		
		ШтрихкодУпаковки = "";
		
		Если Не ЭлементМассива.Свойство("ШтрихкодУпаковки", ШтрихкодУпаковки) Тогда
			Продолжить;
		ИначеЕсли Не ЗначениеЗаполнено(ШтрихкодУпаковки) Тогда
			Продолжить;
		ИначеЕсли ВсеШтрихкоды[ШтрихкодУпаковки] = Неопределено Тогда
			ВсеШтрихкоды.Вставить(ШтрихкодУпаковки, Истина);
			НовыйЭлемент = ОбщегоНазначенияИСМПТККлиентСервер.СкопироватьРекурсивно(ЭлементМассива, Ложь);
			Для Каждого КлючИЗначение Из НовыйЭлемент Цикл
				Ключ = КлючИЗначение.Ключ;
				ТипКолонки = ТипЗнч(ЭлементМассива[Ключ]);
				Если ТипКолонки = ТипСтрока Тогда
					НовыйЭлемент[Ключ] = "";
				ИначеЕсли ТипКолонки = ТипЧисло Тогда
					НовыйЭлемент[Ключ] = 0;
				Иначе
					НовыйЭлемент[Ключ] = Неопределено;
				КонецЕсли;
			КонецЦикла;
			НовыйЭлемент.Штрихкод         = ШтрихкодУпаковки;
			НовыйЭлемент.ШтрихкодУпаковки = "";
			ДанныеТСД.Добавить(НовыйЭлемент);
		КонецЕсли;
		
	КонецЦикла;
	
	// 2. Сортировать данные
	ТаблицаСоответствия = Новый ТаблицаЗначений;
	ТаблицаСоответствия.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("Строка"));
	ТаблицаСоответствия.Колонки.Добавить("Штрихкод",         Новый ОписаниеТипов("Строка"));
	ТаблицаСоответствия.Колонки.Добавить("Обновлять",        Новый ОписаниеТипов("Булево"));
	ТаблицаСоответствия.Колонки.Добавить("Уровень",          ОбщегоНазначенияИСМПТКПереопределяемый.ОписаниеТипаЧисло(2, 0, ДопустимыйЗнак.Неотрицательный));
	ТаблицаСоответствия.Колонки.Добавить("НовыйУровень",     ОбщегоНазначенияИСМПТКПереопределяемый.ОписаниеТипаЧисло(2, 0, ДопустимыйЗнак.Неотрицательный));
	ТаблицаСоответствия.Колонки.Добавить("Элемент");
	
	ДобавленныеЭлементы = Новый Соответствие;
	
	Для Каждого ЭлементМассива Из ДанныеТСД Цикл
		
		ШтрихкодУпаковки = "";
		ЭлементМассива.Свойство("ШтрихкодУпаковки", ШтрихкодУпаковки);
		
		КлючПоиска		= СтрШаблон("%1-%2", ЭлементМассива.Штрихкод, ШтрихкодУпаковки);
		РезультатПоиска = ДобавленныеЭлементы[КлючПоиска];
		Если РезультатПоиска <> Неопределено Тогда
			РезультатПоиска.Количество = РезультатПоиска.Количество + 1;
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаСоответствия.Добавить();
		НоваяСтрока.ШтрихкодУпаковки = ШтрихкодУпаковки;
		НоваяСтрока.Штрихкод         = ЭлементМассива.Штрихкод;
		НоваяСтрока.Уровень          = 0;
		НоваяСтрока.Элемент          = ЭлементМассива;
		
		ДобавленныеЭлементы.Вставить(КлючПоиска, ЭлементМассива);
		
	КонецЦикла;
	
	ТаблицаСоответствия.Индексы.Добавить("Уровень");
	ТаблицаСоответствия.Индексы.Добавить("Обновлять");
	ТаблицаСоответствия.Индексы.Добавить("Уровень, Штрихкод");
	
	СтруктураПоискаУровень         = Новый Структура("Уровень");
	СтруктураПоискаОбновлять       = Новый Структура("Обновлять", Истина);
	СтруктураПоискаУровеньШтрихкод = Новый Структура("Уровень, Штрихкод");
	
	Уровень 		= 0;
	СчитатьИерархию = Истина;
	СтрокТаблицы    = ТаблицаСоответствия.Количество();
	
	Пока СчитатьИерархию И Уровень <= СтрокТаблицы Цикл
		
		СчитатьИерархию = Ложь;
		СтруктураПоискаУровень.Уровень = Уровень;
		СтрокиУровня = ТаблицаСоответствия.НайтиСтроки(СтруктураПоискаУровень);
		
		Для Каждого СтрокаТЧ Из СтрокиУровня Цикл
			Если ПустаяСтрока(СтрокаТЧ.ШтрихкодУпаковки) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураПоискаУровеньШтрихкод.Уровень  = Уровень;
			СтруктураПоискаУровеньШтрихкод.Штрихкод = СтрокаТЧ.ШтрихкодУпаковки;
			Упаковки = ТаблицаСоответствия.НайтиСтроки(СтруктураПоискаУровеньШтрихкод);
			Если Упаковки.Количество() Тогда
				СчитатьИерархию 	  = Истина;
				СтрокаТЧ.НовыйУровень = Уровень + 1;
				СтрокаТЧ.Обновлять    = Истина;
			КонецЕсли;
		КонецЦикла;
		
		СтрокиУровня = ТаблицаСоответствия.НайтиСтроки(СтруктураПоискаОбновлять);
		Для Каждого СтрокаТЧ Из СтрокиУровня Цикл
			СтрокаТЧ.Уровень      = СтрокаТЧ.НовыйУровень;
			СтрокаТЧ.НовыйУровень = 0;
			СтрокаТЧ.Обновлять    = Ложь;
		КонецЦикла;
		
		Уровень = Уровень + 1;
	КонецЦикла;
	
	Если Уровень > СтрокТаблицы Тогда
		ДанныеТСД = Новый Массив;
		ВызватьИсключение НСтр("ru = 'Получены некорректные данные из ТСД или внешнего файла: обнаружено зацикливание упаковок'");
	КонецЕсли;
	
	ТаблицаСоответствия.Сортировать("Уровень ВОЗР");
	
	СортированныйМассив = Новый Массив;
	Для Каждого СтрокаТЧ Из ТаблицаСоответствия Цикл
		ЭлементДанных = СтрокаТЧ.Элемент;
		ЭлементДанных.Вставить("Уровень", СтрокаТЧ.Уровень);
		СортированныйМассив.Добавить(ЭлементДанных);
	КонецЦикла;
	ДанныеТСД = СортированныйМассив;
	
	Возврат Уровень > 1;
	
КонецФункции

// Серверная часть обработки штрихкодов при их загрузке из ТСД в формы документов (без иерархической проверки)
//
// Параметры:
//   Форма                 - ФормаКлиентскогоПриложения - источник вызова
//   ШтрихкодыТСД          - Массив Из Структура - данные ТСД с преобразованными в Base64 штрихкодами
//   ПараметрыСканирования - См. ШтрихкодированиеИС.ПараметрыСканирования
//
// Возвращаемое значение:
//   См. РезультатЗагрузкиШтрихкодовИзТСД
Функция ОбработатьПолученныеДанныеТСДВДокументе(Форма, ШтрихкодыТСД, ПараметрыСканирования, ТолькоКодыМаркировки = Истина) Экспорт
	
	Результат = РезультатЗагрузкиШтрихкодовИзТСД();
	ДополнитьУпорядочитьДанныеТСД(ШтрихкодыТСД);
	
	ДанныеШтрихкодов                = Новый Массив;
	МассивПропущенныхШтрихкодов     = Новый Массив;
	КешДанныхРазбора                = Новый Соответствие;
	ПроверятьАлфавитКодовМаркировки = Истина;
	
	ПредставлениеДопустимыхВидовПродукции = СтрСоединить(ПараметрыСканирования.ДопустимыеВидыПродукции, ", ");
	Для Каждого СтрокаДанныхТСД Из ШтрихкодыТСД Цикл
		
		Штрихкод	  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(СтрокаДанныхТСД.Штрихкод);
		ДанныеРазбора = ИнтеграцияИСМПТК.ВидУпаковкиИПредставлениеШтрихкода(Штрихкод, ПараметрыСканирования.ДопустимыеВидыПродукции, КешДанныхРазбора, Неопределено, ПроверятьАлфавитКодовМаркировки);
		
		Если ДанныеРазбора.ВидУпаковки = Неопределено Тогда
			
			Если ТолькоКодыМаркировки Тогда
				
				ТекстСообщения = НСтр("ru = 'Штрихкод %1 не является кодом маркировки потребительской, групповой или логистической (транспортной) упаковки для вида продукции %2.'")
							   + Символы.ПС
							   + НСтр("ru = 'Этот код был пропущен при загрузке.'");
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Штрихкод, ПредставлениеДопустимыхВидовПродукции);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				МассивПропущенныхШтрихкодов.Добавить(СтрокаДанныхТСД);
				Продолжить;
				
			Иначе
				СтрокаДанныхТСД.Вставить("НормализованныйШтрихкод", Штрихкод);
				СтрокаДанныхТСД.Вставить("ШтрихкодСОшибкой", 		Ложь);
			КонецЕсли;
			
		Иначе
			
			СтрокаДанныхТСД.Вставить("НормализованныйШтрихкод", ДанныеРазбора.НормализованныйШтрихкод);
			СтрокаДанныхТСД.Вставить("ШтрихкодСОшибкой", 		Ложь);
			
		КонецЕсли;
		
		ДанныеШтрихкода = Новый Структура("Штрихкод, Количество", ДанныеРазбора.НормализованныйШтрихкод, СтрокаДанныхТСД.Количество);
		ДанныеШтрихкодов.Добавить(ДанныеШтрихкода);
		
	КонецЦикла;
	
	Если МассивПропущенныхШтрихкодов.Количество() Тогда
		Для Каждого ЭлементМассива Из МассивПропущенныхШтрихкодов Цикл
			ПорядковыйНомер = ШтрихкодыТСД.Найти(ЭлементМассива);
			Если ПорядковыйНомер <> Неопределено Тогда
				ШтрихкодыТСД.Удалить(ПорядковыйНомер);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Результат.ШтрихкодыТСД = ДанныеШтрихкодов;
	Результат.Всего        = ДанныеШтрихкодов.Количество();
	
	Возврат Результат;
	
КонецФункции

// Результат серверной обработки полученных из ТСД штрихкодов.
//
// Параметры:
//   ИдентификаторСтроки - Число - идентификатор текущей проверяемой упаковки формы проверки и подбора.
//
// Возвращаемое значение:
//   Структура - результат обработки:
//    * ТребуетсяАвторизация      - Булево - Если Истина, то обработка не выполнена: требуется авторизация во внешнем сервисе
//    * ШтрихкодыДляСопоставления - Массив - Если заполнен, то обработка не выполнена: обнаружены неизвестные штрихкоды номенклатуры
//    * ЕстьОшибкиВДереве         - Булево - Если Истина, то обработка не выполнена: модуль штрихкодирования вернул эту ошибку
//    * АдресДереваУпаковок       - Строка, Неопределено - адрес дерева упаковок для отображения ошибки
//    * ОбщаяОшибка               - Булево - Если Истина, то обработка не выполнена: модуль штрихкодирования вернул эту ошибку
//    * ТекстОбщейОшибки          - Строка - Расшифровка общей ошибки
//
//    * Счетчик      - Число  - Количество штрихкодов обработанных на сервере (не переданы на клиент)
//    * Обработано   - Число  - Количество обработанных штрихкодов в текущем наборе
//    * Всего        - Число  - Количество штрихкодов требующих обработки
//    * ШтрихкодыТСД - Массив из Структура - Штрихкоды требующие обработки
//
//    * ПредложитьЗагрузитьВУпаковке - Булево - можно предложить пользователю загрузить данные ТСД в одной упаковке
//    * ТекстПредложенияОЗагрузке    - Строка - доступная распознанная структура иерархии
//    * ПроверяемаяУпаковка          - Число, Неопределено - открытая до начала групповой обработки упаковка (идентификатор).
//
//    * ДобавленныеСтроки         - Массив - Добавленные строки документа
//    * ИзмененныеСтроки          - Массив - Измененные строки документа
//
Функция РезультатЗагрузкиШтрихкодовИзТСД(ИдентификаторСтроки = Неопределено) Экспорт
	
	Результат = Новый Структура;
	
	// Результат: ошибка загрузки
	Результат.Вставить("ТребуетсяАвторизация",               			  Ложь);
	Результат.Вставить("ШтрихкодыДляСопоставления",          			  Новый Массив);
	Результат.Вставить("АдресУточнениеКоэффициентовУпаковок", 			  Неопределено);
	Результат.Вставить("ЕстьОшибкиВДереве",                   			  Ложь);
	Результат.Вставить("АдресДереваУпаковок",                 			  Неопределено);
	Результат.Вставить("ОбщаяОшибка",                        			  Ложь);
	Результат.Вставить("ТекстОбщейОшибки",                   			  "");
	
	// Результат: произведена частичная или полная загрузка
	Результат.Вставить("Счетчик",      									  0); // количество обработанных кодов не требующих передачи на клиент
	Результат.Вставить("Обработано",   									  0);
	Результат.Вставить("Всего",        									  0);
	Результат.Вставить("ШтрихкодыТСД", 									  Новый Массив);
	
	// Формы проверки и подбора
	Результат.Вставить("ПредложитьЗагрузитьВУпаковке",                    Ложь);
	Результат.Вставить("ТекстПредложенияОЗагрузке",                       "");
	Результат.Вставить("ПроверяемаяУпаковка",                             ИдентификаторСтроки);
	Результат.Вставить("ЭтоВосстановлениеВложенностиУпаковок",            Ложь);
	Результат.Вставить("ДанныеДляВосстановлениеВложенности",              Неопределено);
	Результат.Вставить("ПересчитыватьИтогиВДеревеМаркированнойПродукции", Ложь);
	
	// Предложение сменить детализацию на рекомендуемую на основе статистики
	Результат.Вставить("ПредложитьИзменитьДетализацию",     			  Ложь);
	Результат.Вставить("РекомендуемыеДетализации",             			  Неопределено);
	Результат.Вставить("ОписаниеРекомендацииСменыДетализации", 			  "");
	
	// Обработанные строки
	Результат.Вставить("ДобавленныеСтроки", 							  Новый Массив);
	Результат.Вставить("ИзмененныеСтроки",  							  Новый Массив);
	
	Возврат Результат;
	
КонецФункции

//Переносит массивы добавленных и измененных строк по обработанному штрихкоду в общие массивы.
//
//Параметры:
//   Приемник - См. РезультатЗагрузкиШтрихкодовИзТСД
//   Источник - См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода
//
Процедура ПеренестиДобавленныеИзмененныеСтроки(Приемник, Источник) Экспорт
	
	Для Каждого СтрокаТовары Из Источник.ДобавленныеСтроки Цикл
		Если Приемник.ДобавленныеСтроки.Найти(СтрокаТовары) = Неопределено Тогда
			Приемник.ДобавленныеСтроки.Добавить(СтрокаТовары);
		КонецЕсли;
	КонецЦикла;
	
	Источник.ДобавленныеСтроки.Очистить();
	
	Для Каждого СтрокаТовары Из Источник.ИзмененныеСтроки Цикл
		Если Приемник.ИзмененныеСтроки.Найти(СтрокаТовары) = Неопределено
			И Приемник.ДобавленныеСтроки.Найти(СтрокаТовары) = Неопределено Тогда
			Приемник.ИзмененныеСтроки.Добавить(СтрокаТовары);
		КонецЕсли;
	КонецЦикла;
	
	Источник.ИзмененныеСтроки.Очистить();
	
КонецПроцедуры

Процедура ВыполнитьДобавлениеКМИзТСДВФоне(Параметры, АдресХранилища) Экспорт
	
	ПараметрыСканирования  = Параметры.ПараметрыСканирования;
	ИсходныеДанныеМассив   = Параметры.МассивКМ;
	ТокенАвторизации	   = Параметры.ТокенАвторизации;
	ТаблицаПолученныхКодов = ПолучитьСтруктуруТаблицыКодов();
	МассивОшибок		   = Новый Массив;
	
	ЗагрузитьКодыМаркировкиИзТСД(ИсходныеДанныеМассив, ПараметрыСканирования, ТаблицаПолученныхКодов, МассивОшибок, ТокенАвторизации);
	
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("ТаблицаПолученныхКодов", ТаблицаПолученныхКодов);
	РезультатВыполнения.Вставить("Успешно", 			   Истина);
	РезультатВыполнения.Вставить("МассивОшибок",		   МассивОшибок);
	ПоместитьВоВременноеХранилище(РезультатВыполнения,     АдресХранилища);
	
КонецПроцедуры 

Функция ЗагрузитьКодыМаркировкиИзТСД(ИсходныеДанные, ПараметрыСканирования = Неопределено, ТаблицаПолученныхКодов, МассивОшибок, ТокенАвторизации = Неопределено)
	
	НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();  
	                                                                                                            
	Если Не ТипЗнч(ИсходныеДанные) = Тип("Массив") Тогда
		ДанныеДляРазбора = Новый Массив;
		ДанныеДляРазбора.Добавить(ИсходныеДанные);
	Иначе 
		ДанныеДляРазбора = ИсходныеДанные;
	КонецЕсли;
	
	Для Каждого КодМаркировкиBase64 Из ДанныеДляРазбора Цикл
		
	ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(КодМаркировкиBase64, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
			
			Если ДанныеРазбора = Неопределено Тогда 
				Если Не ЗначениеЗаполнено(КодМаркировкиBase64.ШтрихКод) Тогда
					ТекстОшибки     = НСтр("ru = 'В загружаемых данных найдена пустая строка №%1.'");
					ТекстОшибки     = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, ДанныеДляРазбора.Найти(КодМаркировкиBase64)+1);
				Иначе
					ТекстОшибки     = НСтр("ru = 'Не удалось разобрать код маркировки %1 в строке №%2.'") 
									+ Символы.ПС 
									+ НСтр("ru = 'Он не был добавлен в документ.'");
					НеКорректныйКод = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(КодМаркировкиBase64.ШтрихКод);
					НеКорректныйКод = СтрЗаменить(НеКорректныйКод, Символ(29), "");
					ТекстОшибки     = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, НеКорректныйКод, ДанныеДляРазбора.Найти(КодМаркировкиBase64)+1);
				КонецЕсли;
				МассивОшибок.Добавить(ТекстОшибки);
				Продолжить;
			КонецЕсли;
			
			СтрокаКодыМаркировки = ТаблицаПолученныхКодов.Добавить();
			Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Потребительская 
				Или (ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Групповая
				И Не Константы.АвтоОпределениеЛогистическихКодовИСМПТК.Получить()) Тогда 
				
				GTINВерхнегоУровня = ДанныеРазбора.СоставКодаМаркировки.GTIN;
				GTIN = ?(ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Групповая, "", ДанныеРазбора.СоставКодаМаркировки.GTIN);
				
				//Дополнение данных по номенклатуре
				Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Потребительская Тогда
					ДанныеНоменклатуры = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, ДанныеРазбора.СоставКодаМаркировки.EAN);
				Иначе
					ДанныеНоменклатуры = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(GTINВерхнегоУровня));
				КонецЕсли;
				
				Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
					Номенклатура   = ДанныеНоменклатуры.Номенклатура;
					Характеристика = ДанныеНоменклатуры.Характеристика;
				Иначе
					Номенклатура   = ДанныеНоменклатуры;
					Характеристика = ДанныеНоменклатуры;
				КонецЕсли;
				
				ВидПродукции = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(Номенклатура);
				
				СтрокаКодыМаркировки.КодМаркировки 		= КодМаркировкиBase64.ШтрихКод;
				СтрокаКодыМаркировки.GTIN 				= GTIN;
				СтрокаКодыМаркировки.GTINВерхнегоУровня = GTINВерхнегоУровня;
				СтрокаКодыМаркировки.EAN 				= ДанныеРазбора.СоставКодаМаркировки.EAN;
				СтрокаКодыМаркировки.КодИдентификации 	= ДанныеРазбора.НормализованныйКодМаркировки;
				СтрокаКодыМаркировки.ВидУпаковки		= ДанныеРазбора.ВидУпаковки;
				СтрокаКодыМаркировки.ВидПродукции		= ВидПродукции;
				СтрокаКодыМаркировки.Количество			= 1;
				СтрокаКодыМаркировки.Номенклатура   	= Номенклатура;
				СтрокаКодыМаркировки.Характеристика		= Характеристика;
				
			Иначе
				
				ВидУпаковки = ДанныеРазбора.ВидУпаковки;
				Организация = ПараметрыСканирования.Владелец;
				
				Если Константы.АвтоОпределениеЛогистическихКодовИСМПТК.Получить() Тогда
					//Включен автоматический запрос данных с сервера
					Если Не ТокенАвторизации = Неопределено Тогда 
						
						//Поддержка двойного формата кодов SSCC
						УчитыватьДвойнойФорматКодовSSCC = Константы.ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК.Получить();
						Если УчитыватьДвойнойФорматКодовSSCC Тогда
							
							КМПредварительный = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(КодМаркировкиBase64.ШтрихКод);
							
							//Формируем список SSCC в разных форматах
							Если СтрДлина(КМПредварительный) = 20 Тогда
								ПреобразованныйКод = Сред(КМПредварительный, 3); //18-значный SSCC
								ДополнительныйКод  = Неопределено;
							ИначеЕсли СтрДлина(КМПредварительный) = 18 Тогда
								ПреобразованныйКод = "00"   + КМПредварительный;
								ДополнительныйКод  = "(00)" + КМПредварительный;
							Иначе
								ПреобразованныйКод = Неопределено;
								ДополнительныйКод  = Неопределено;
							КонецЕсли;
							
							МассивКМДляПроверки = Новый Массив();
							МассивКМДляПроверки.Добавить(КодМаркировкиBase64.ШтрихКод);
							Если НЕ ПреобразованныйКод = Неопределено Тогда
								МассивКМДляПроверки.Добавить(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(ПреобразованныйКод));
							КонецЕсли;
							Если НЕ ДополнительныйКод = Неопределено Тогда
								МассивКМДляПроверки.Добавить(РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(ДополнительныйКод));
							КонецЕсли;
							
							КМ = "";
							//Начинаем опрос сервера по каждому из сформированных кодов для проверки
							Для Каждого КодSSCC Из МассивКМДляПроверки Цикл
								СтруктураЗапрос = Новый Структура("Штрихкод, ВидУпаковки, ФорматBase64", КодSSCC, ВидУпаковки, Истина);
								ДанныеПоГрупповомуКоду = ИнтеграцияИСМПТКВызовСервера.ЗапроситьДанныеПоКодуАгрегации(СтруктураЗапрос, Организация, ТокенАвторизации);	
								
								Если Не ЗначениеЗаполнено(ДанныеПоГрупповомуКоду.ТекстОшибки) Тогда
									//Если по коду вернулась информация, значит нужно использовать этот формат для заполнения таблицы документа
									КМ = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(КодSSCC);
									Прервать;
								КонецЕсли;
							КонецЦикла;
							КМ = ?(Не ЗначениеЗаполнено(КМ), КМПредварительный, КМ);
							
						Иначе
							СтруктураЗапрос = Новый Структура("Штрихкод, ВидУпаковки, ФорматBase64", КодМаркировкиBase64.ШтрихКод, ВидУпаковки, Истина);
							ДанныеПоГрупповомуКоду = ИнтеграцияИСМПТКВызовСервера.ЗапроситьДанныеПоКодуАгрегации(СтруктураЗапрос, Организация, ТокенАвторизации);
						КонецЕсли;
						//////
						
						Если Не ЗначениеЗаполнено(ДанныеПоГрупповомуКоду.ТекстОшибки) Тогда
							
							СтруктураКода = ИнтеграцияИСМПТКВызовСервера.ПолучитьИнформациюПоГрупповомуКоду(ДанныеПоГрупповомуКоду, КМ, ВидУпаковки);
							
							GTIN 			   = СтруктураКода.GTIN;
							GTINВерхнегоУровня = СтруктураКода.GTINВерхнегоУровня;
							EAN                = СтруктураКода.EAN;
							Номенклатура       = СтруктураКода.Номенклатура;
							Характеристика 	   = СтруктураКода.Характеристика;
							ВидПродукции 	   = СтруктураКода.ВидПродукции;
							Количество		   = СтруктураКода.Количество;
							ВидУпаковки		   = СтруктураКода.ВидУпаковки;
							
							Если УчитыватьДвойнойФорматКодовSSCC Тогда
								СтрокаКодыМаркировки.КодМаркировки 	  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(КМ);
								СтрокаКодыМаркировки.КодИдентификации = КМ;
							Иначе
								СтрокаКодыМаркировки.КодМаркировки 	  = КодМаркировкиBase64.ШтрихКод;
								СтрокаКодыМаркировки.КодИдентификации = ДанныеРазбора.НормализованныйКодМаркировки;
							КонецЕсли;
							
							СтрокаКодыМаркировки.GTIN 			  = GTIN;
							СтрокаКодыМаркировки.EAN 			  = EAN;
							СтрокаКодыМаркировки.ВидУпаковки	  = ВидУпаковки;
							СтрокаКодыМаркировки.ВидПродукции	  = ВидПродукции;
							СтрокаКодыМаркировки.Количество		  = Количество;
							СтрокаКодыМаркировки.Номенклатура	  = Номенклатура;
							СтрокаКодыМаркировки.Характеристика	  = Характеристика;
							СтрокаКодыМаркировки.GTINВерхнегоУровня = GTINВерхнегоУровня;
							
						Иначе 
							
							ЗаполнитьСтрокаКодыМаркировкиЕслиОшибка(СтрокаКодыМаркировки, КодМаркировкиBase64, ДанныеРазбора, ВидУпаковки);
							
						КонецЕсли;
						
					Иначе 
						
						ЗаполнитьСтрокаКодыМаркировкиЕслиОшибка(СтрокаКодыМаркировки, КодМаркировкиBase64, ДанныеРазбора, ВидУпаковки);
						
					КонецЕсли;
				Иначе
					//Заполняем коды транспортных упаковок без запроса к серверу
					СтрокаКодыМаркировки.КодМаркировки 		= КодМаркировкиBase64.ШтрихКод;
					СтрокаКодыМаркировки.GTIN 				= "";
					СтрокаКодыМаркировки.GTINВерхнегоУровня = "";
					СтрокаКодыМаркировки.EAN 				= "";
					СтрокаКодыМаркировки.КодИдентификации 	= ДанныеРазбора.НормализованныйКодМаркировки;
					СтрокаКодыМаркировки.ВидУпаковки		= ДанныеРазбора.ВидУпаковки;
					СтрокаКодыМаркировки.ВидПродукции		= "";
					СтрокаКодыМаркировки.Количество			= 1;
					СтрокаКодыМаркировки.Номенклатура   	= "";
					СтрокаКодыМаркировки.Характеристика		= "";
				КонецЕсли;
			КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПредставлениеНоменклатуры(Номенклатура, Характеристика, Упаковка = Неопределено, Серия = Неопределено) Экспорт
	
	Представление = "";
	ИнтеграцияИСМПТКПереопределяемый.ЗаполнитьПредставлениеНоменклатуры(
		Представление, Номенклатура, Характеристика, Упаковка, Серия);
	
	Если Представление = "" Тогда
		МассивФормированияПредставления = Новый Массив;
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			МассивФормированияПредставления.Добавить(СокрЛП(Номенклатура));
		КонецЕсли;
		Если ЗначениеЗаполнено(Характеристика) Тогда
			МассивФормированияПредставления.Добавить(СокрЛП(Характеристика));
		КонецЕсли;
		Если ЗначениеЗаполнено(Упаковка) Тогда
			МассивФормированияПредставления.Добавить(СокрЛП(Упаковка));
		КонецЕсли;
		Если ЗначениеЗаполнено(Серия) Тогда
			МассивФормированияПредставления.Добавить(СокрЛП(Серия));
		КонецЕсли;
		Представление = СтрСоединить(МассивФормированияПредставления);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Устанавливает отбор в списке по указанному значению для нужной колонки
// с учетом переданной структуры быстрого отбора.
//
// Параметры:
//  Список - ТаблицаФормы - динамический список, для которого требуется установить отбор
//  ИмяКолонки - Строка - Имя колонки, по которой устанавливается отбор
//  Значение - Произвольный - устанавливаемое значение отбора
//  СтруктураБыстрогоОтбора - Неопределено, Структура - Структура, содержащая ключи и значения отбора
//  Использование - Неопределено, Булево - Признак использования элемента отбора
//  ВидСравнения - Неопределено, ВидСравненияКомпоновкиДанных - вид сравнения, устанавливаемый для элемента отбора
//  ПриводитьЗначениеКЧислу - Булево - Признак приведения значения к числу.
//
Процедура ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, ИмяКолонки, Значение, Знач СтруктураБыстрогоОтбораРасширенная,
			Использование = Неопределено, ВидСравнения = Неопределено, ПриводитьЗначениеКЧислу = Ложь) Экспорт
	
	Если СтруктураБыстрогоОтбораРасширенная <> Неопределено Тогда
		
		Если СтруктураБыстрогоОтбораРасширенная.Количество() = 2
			И СтруктураБыстрогоОтбораРасширенная.Свойство("ИмяПоля")
			И СтруктураБыстрогоОтбораРасширенная.Свойство("Настройки") Тогда
			СтруктураБыстрогоОтбора = СтруктураБыстрогоОтбораРасширенная.Настройки;
			ИмяКолонкиДляПоиска = СтруктураБыстрогоОтбораРасширенная.ИмяПоля;
		Иначе
			СтруктураБыстрогоОтбора = СтруктураБыстрогоОтбораРасширенная;
			ИмяКолонкиДляПоиска = ИмяКолонки;
		КонецЕсли;
		
		Если СтруктураБыстрогоОтбора <> Неопределено
			И СтруктураБыстрогоОтбора.Свойство(ИмяКолонкиДляПоиска) Тогда
			
			ЗначениеОтбора = СтруктураБыстрогоОтбора[ИмяКолонкиДляПоиска];
			Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
				
				Если ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") Тогда
					Значение.ЗагрузитьЗначения(ЗначениеОтбора.ВыгрузитьЗначения());
				ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
					Значение.ЗагрузитьЗначения(ЗначениеОтбора);
				Иначе
					Значение.Очистить();
					Если ЗначениеЗаполнено(ЗначениеОтбора) Тогда
						Значение.Добавить(ЗначениеОтбора);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				Значение = ЗначениеОтбора;
				
			КонецЕсли;
			
			Если ПриводитьЗначениеКЧислу Тогда
				Значение = ?(ЗначениеЗаполнено(Значение), Число(Значение), Значение);
			КонецЕсли;
			
			Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
				ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, Значение.Количество() > 0, Использование);
			Иначе
				ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, ЗначениеЗаполнено(Значение), Использование);
			КонецЕсли;
			
			Если Список <> Неопределено Тогда
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.УстановитьЭлементОтбораДинамическогоСписка(Список, ИмяКолонки, Значение, ВидСравнения,,ИспользованиеЭлементаОтбора);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьСписокВыбораВидаПродукции() Экспорт

	МассивВидовПродукции = Новый Массив();
	Если Константы.ВестиУчетМаркируемогоТабакаИСМПТК.Получить() Тогда
		МассивВидовПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная"));
	КонецЕсли;
	Если Константы.ВестиУчетМаркируемойОбувиИСМПТК.Получить() Тогда
		МассивВидовПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная"));
	КонецЕсли;
	Если константы.ВестиУчетМаркируемыхЛекарствИСМПТК.Получить() Тогда
		МассивВидовПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты"));
	КонецЕсли;
	
	Возврат МассивВидовПродукции;
	
КонецФункции

Функция ПроверитьНаличиеКодовВПуле(ЗаказКМ) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	ПулКодовМаркировкиСУЗИСМПТК.КодМаркировки КАК КодМаркировки
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗИСМПТК КАК ПулКодовМаркировкиСУЗИСМПТК
	|ГДЕ
	|	ПулКодовМаркировкиСУЗИСМПТК.ЗаказНаЭмиссию = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЗаказКМ);
	
	ДанныеПоЗаказу = Новый Структура();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Количество() = 0 Тогда
		ДанныеПоЗаказу.Вставить("КодыПолучены",    Истина);
		ДанныеПоЗаказу.Вставить("КоличествоВПуле", Выборка.Количество());
	Иначе
		ДанныеПоЗаказу.Вставить("КодыПолучены",    Ложь);
		ДанныеПоЗаказу.Вставить("КоличествоВПуле", 0);
	КонецЕсли;
	
	Возврат ДанныеПоЗаказу;

КонецФункции

Функция ДопустимыеСтатусыКМДляДокументаИСМПТ(НаименованиеДокумента) Экспорт
	
	ДопустимыеСтатусы = Новый Массив();
	
	Если НаименованиеДокумента = "УведОВводеВОборот" Тогда
		
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.ВыведенИзОборота);
		
	ИначеЕсли НаименованиеДокумента = "УведОВыводеИзВОборота" Тогда 
		
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.ВведенВОборот);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.ВозвращенВОборот);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.Нанесен);
		
	ИначеЕсли НаименованиеДокумента = "АктПриемаПередачи" Тогда 
		
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.ВведенВОборот);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.ВозвращенВОборот);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.Нанесен);
									   
	ИначеЕсли НаименованиеДокумента = "УведОВвозеЕАЭС" Тогда 
		
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.Нанесен);
		
	ИначеЕсли НаименованиеДокумента = "УведОВвозеИмпорт" Тогда 
		
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.Нанесен);
		
	ИначеЕсли НаименованиеДокумента = "УведОбЭкспортеЕАЭС" Тогда 
		
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.ВведенВОборот);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.ВозвращенВОборот);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.Нанесен);

	ИначеЕсли НаименованиеДокумента = "АгрегацияКМ" Тогда 
		
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.Нанесен);
		
	КонецЕсли;
	
	Возврат ДопустимыеСтатусы;
	
КонецФункции

Функция ЗапросИсторииКМ_ТипыДокументовПоСтутусуКода(СтатусКМСервер)
	
	ДопустимыеТипыДокументов = Новый Массив();
	
	Если СтатусКМСервер = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.ВведенВОборот") Тогда
		
		ДопустимыеТипыДокументов.Добавить(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК());
		ДопустимыеТипыДокументов.Добавить(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСМПТК());
		ДопустимыеТипыДокументов.Добавить(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСМПТК());
		ДопустимыеТипыДокументов.Добавить(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОбЭкспортеЕАЭСИСМПТК());
		
		Контур = "ИСМПТ";
		
	ИначеЕсли СтатусКМСервер = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.ВозвращенВОборот") Тогда 
		
		ДопустимыеТипыДокументов.Добавить(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСМПТК());
		
		Контур = "ИСМПТ";
		
	ИначеЕсли СтатусКМСервер = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.ВыведенИзОборота") Тогда 
		
		ДопустимыеТипыДокументов.Добавить(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК());
		ДопустимыеТипыДокументов.Добавить(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСМПТК());
		
		Контур = "ИСМПТ";
		
	ИначеЕсли СтатусКМСервер = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.ВыведенИзОборотаПриПеремаркировке") 
		Или СтатусКМСервер = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.ВыведенИзОборотаРассрочка")
		Или СтатусКМСервер = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.Утилизирован") Тогда

		 ДопустимыеТипыДокументов.Добавить(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСМПТК());
		 
		 Контур = "ИСМПТ";
	
	ИначеЕсли СтатусКМСервер = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.Экспорт") Тогда 
		
		ДопустимыеТипыДокументов.Добавить(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОбЭкспортеЕАЭСИСМПТК());
		
		Контур = "ИСМПТ";
		
	ИначеЕсли СтатусКМСервер = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.Нанесен")
		Или СтатусКМСервер = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.НанесенНеОплачен") Тогда 
		
		ДопустимыеТипыДокументов.Добавить(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаЗаказКодовМаркировкиСУЗИСМПТК());
		ДопустимыеТипыДокументов.Добавить(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаНанесениеКодовМаркировкиСУЗИСМПТК());
		
		Контур = "СУЗ";
		
	ИначеЕсли СтатусКМСервер = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.Дезагрегирован") Тогда 
		
		ДопустимыеТипыДокументов.Добавить(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК());
		ДопустимыеТипыДокументов.Добавить(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСМПТК());
		ДопустимыеТипыДокументов.Добавить(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСМПТК());
		ДопустимыеТипыДокументов.Добавить(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОбЭкспортеЕАЭСИСМПТК());
		ДопустимыеТипыДокументов.Добавить(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСМПТК());
		ДопустимыеТипыДокументов.Добавить(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСМПТК());		
		
		Контур = "ИСМПТ";
		
	ИначеЕсли СтатусКМСервер = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.Эмитирован") Тогда 
		
		ДопустимыеТипыДокументов.Добавить(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаЗаказКодовМаркировкиСУЗИСМПТК());
		
		Контур = "СУЗ";
		
	КонецЕсли;	
	
	СведенияОДокументе = Новый Структура();
	СведенияОДокументе.Вставить("ДопустимыеТипы", ДопустимыеТипыДокументов);
	СведенияОДокументе.Вставить("Контур", Контур);
	
	Возврат СведенияОДокументе;
	
КонецФункции

Функция ИсторияКМ_ПолучитьССылкуДокумента(СтатусКода, НомерДокументаИСМПТ) Экспорт
	
	Если Не ЗначениеЗаполнено(НомерДокументаИСМПТ) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураДопустимыеТипыДокументов = ЗапросИсторииКМ_ТипыДокументовПоСтутусуКода(СтатусКода);
	ДопустимыеТипы = СтруктураДопустимыеТипыДокументов.ДопустимыеТипы;
	Контур 		   = СтруктураДопустимыеТипыДокументов.Контур;
	
	//Формируем динамический запрос, проверяя наличие номера документа среди допустимых типов
	Запрос = Новый Запрос;
	
	Если Контур = "ИСМПТ" Тогда
		ПроверяемыйРеквизит = "НомерИСМПТ";
	Иначе
		ПроверяемыйРеквизит = "OrderID";
	КонецЕсли;
	
	Если ДопустимыеТипы.Количество() = 0 Тогда
		Возврат Неопределено;
		
	ИначеЕсли ДопустимыеТипы.Количество() = 1 Тогда
			
		ТекстЗапроса = "ВЫБРАТЬ
		|	ДокументМаркировки.Ссылка КАК Ссылка,
		|	ДокументМаркировки.Представление КАК Представление
		|ИЗ
		|	Документ." + ДопустимыеТипы[0] + " КАК ДокументМаркировки
		|ГДЕ
		|	ДокументМаркировки." + ПроверяемыйРеквизит + " = &НомерДокумента";
		
	Иначе
		
		ЭтоПерваяЧастьЗапроса = Истина;
		Для Каждого ТипДокумента Из ДопустимыеТипы Цикл
			
			Если ЭтоПерваяЧастьЗапроса Тогда 
				ТекстЗапроса = "ВЫБРАТЬ
				|	ДокументМаркировки.Ссылка КАК Ссылка,
				|	ДокументМаркировки.Представление КАК Представление
				|ИЗ
				|	Документ." + ТипДокумента + " КАК ДокументМаркировки
				|ГДЕ
				|	ДокументМаркировки." + ПроверяемыйРеквизит + " = &НомерДокумента
				|";
				ЭтоПерваяЧастьЗапроса = Ложь;
			Иначе
				ТекстЗапроса = ТекстЗапроса + 
				"ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ДокументМаркировки.Ссылка,
				|	ДокументМаркировки.Представление
				|ИЗ
				|	Документ." + ТипДокумента + " КАК ДокументМаркировки
				|ГДЕ
				|	ДокументМаркировки." + ПроверяемыйРеквизит + " = &НомерДокумента
				|"
			КонецЕсли;	
				
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НомерДокумента", НомерДокументаИСМПТ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеДокумента = Новый Структура();
		ДанныеДокумента.Вставить("Ссылка", 		  Выборка.Ссылка);
		ДанныеДокумента.Вставить("Представление", Выборка.Представление);
		ДанныеДокумента.Вставить("ТипДокумента",  Метаданные.НайтиПоТипу(ТипЗнч(Выборка.Ссылка)).Имя);
		Возврат ДанныеДокумента;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Неопределено;		
	
КонецФункции

Функция НайтиКонтрагентовИСтруктурныеЕдиницыПоИдентификационнымНомерам(
	Знач ИдентификационныеНомераКонтрагентов, Знач ИдентификационныеНомераСтруктурныхЕдиниц) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.%КонтрагентИНН КАК Идентификатор,
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.%КонтрагентИНН В(&ИдентификационныеНомераКонтрагентов)
	|	И НЕ Контрагенты.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.%ОрганизацияИНН КАК Идентификатор,
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.%ОрганизацияИНН В(&ИдентификационныеНомераСтруктурныхЕдиниц)
	|	И НЕ Организации.ПометкаУдаления";
	
	СоответствиеИменРеквизитов = Новый Соответствие;
	СоответствиеИменРеквизитов.Вставить("%КонтрагентИНН", "");
	СоответствиеИменРеквизитов.Вставить("%ОрганизацияИНН", "");
	
	РаботаСДокументамиИСМПТКПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответствиеИменРеквизитов);
	                                  
	ЗаменитьИменаРеквизитовПолейЗапросов(ТекстЗапроса, СоответствиеИменРеквизитов);
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ИдентификационныеНомераКонтрагентов", ИдентификационныеНомераКонтрагентов);	
	Запрос.УстановитьПараметр("ИдентификационныеНомераСтруктурныхЕдиниц", ИдентификационныеНомераСтруктурныхЕдиниц);	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура;
	Результат.Вставить("СоответствияКонтрагентов", Новый Соответствие);
	Результат.Вставить("СоответствияСтруктурныхЕдиниц", Новый Соответствие);
	
	ВыборкаКонтрагенты = РезультатыЗапроса[0].Выбрать();
	Пока ВыборкаКонтрагенты.Следующий() Цикл
		Результат.СоответствияКонтрагентов.Вставить(ВыборкаКонтрагенты.Идентификатор, ВыборкаКонтрагенты.Ссылка);
	КонецЦикла;
	
	ВыборкаОрганизации = РезультатыЗапроса[1].Выбрать();
	Пока ВыборкаОрганизации.Следующий() Цикл
		Результат.СоответствияСтруктурныхЕдиниц.Вставить(ВыборкаОрганизации.Идентификатор, ВыборкаОрганизации.Ссылка);	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСДокументами

#Область ИСМПТ

Функция МассивИСМПТСДокументомОснованияИБез(МассивИСМПТ) Экспорт
	
	СтруктураСДокументомОснованияИБез = Новый Структура;
	МассивИСМПТСДокументомОснования   = Новый Массив;
	МассивИСМПТБезДокументаОснования  = Новый Массив;
	
	Для Каждого ДокументИСМПТ Из МассивИСМПТ Цикл
	
	    Если ЗначениеЗаполнено(ДокументИСМПТ.ДокументОснование) Тогда
			МассивИСМПТСДокументомОснования.Добавить(ДокументИСМПТ);					
		Иначе
			МассивИСМПТБезДокументаОснования.Добавить(ДокументИСМПТ);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураСДокументомОснованияИБез.Вставить("МассивИСМПТСДокументомОснования",  МассивИСМПТСДокументомОснования); 
	СтруктураСДокументомОснованияИБез.Вставить("МассивИСМПТБезДокументаОснования", МассивИСМПТБезДокументаОснования); 
	
	Возврат СтруктураСДокументомОснованияИБез;
		
КонецФункции

Функция ПроверитьНаличиеСвязанногоДокументаИСМПТ(Основание, ЭтоПроверкаИзОснования = Ложь) Экспорт
	
	Если Основание = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РаботаСДокументамиИСМПТКПереопределяемый.ПроверитьНаличиеСвязанногоДокументаИСМПТ(Основание, ЭтоПроверкаИзОснования);
	
КонецФункции

#Область РазрешенныеДействия

Функция РазрешенныеДействияПоСтатусамАкта(Знач Направление, Знач ВидОперацииСНТ = Неопределено) Экспорт
	
	РазрешенныеДействия = Новый Соответствие();
	
	//Для исходящих
	Если Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий Тогда	
		
		//Подтверждение
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Черновик, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отправлен, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку,	Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отклонен,			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отозван, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Аннулирован, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.НаСогласовании, 	Ложь);			
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Ошибка, 			Ложь);			
		
		РазрешенныеДействия.Вставить(ИнтеграцияИСМПТККлиентСервер.ДействиеПодтверждение(), СоответствиеДоступностиДействия);	
		
		//Отклонение
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Черновик, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отправлен, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку,	Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отклонен,			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отозван, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Аннулирован, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.НаСогласовании, 	Ложь);			
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Ошибка, 			Ложь);
		
		РазрешенныеДействия.Вставить(ИнтеграцияИСМПТККлиентСервер.ДействиеОтклонение(), СоответствиеДоступностиДействия);	

		//Отзыв
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Черновик, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отправлен, 		Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку,	Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отклонен,			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отозван, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Аннулирован, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.НаСогласовании, 	Ложь);			
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Ошибка, 			Ложь);
		
		РазрешенныеДействия.Вставить(ИнтеграцияИСМПТККлиентСервер.ДействиеОтзыв(), СоответствиеДоступностиДействия);	

		
	//Для входящих	
	Иначе
	
		//Подтверждение
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Черновик, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отправлен, 		Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку,	Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отклонен,			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отозван, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Аннулирован, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.НаСогласовании, 	Ложь);			
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Ошибка, 			Ложь);
		
		РазрешенныеДействия.Вставить(ИнтеграцияИСМПТККлиентСервер.ДействиеПодтверждение(), СоответствиеДоступностиДействия);	
		
		//Отклонение
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Черновик, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отправлен, 		Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку,	Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отклонен,			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отозван, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Аннулирован, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.НаСогласовании, 	Ложь);			
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Ошибка, 			Ложь);
		
		РазрешенныеДействия.Вставить(ИнтеграцияИСМПТККлиентСервер.ДействиеОтклонение(), СоответствиеДоступностиДействия);	

		//Отзыв
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Черновик, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отправлен, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку,	Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отклонен,			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отозван, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Аннулирован, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.НаСогласовании, 	Ложь);			
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Ошибка, 			Ложь);
		
		РазрешенныеДействия.Вставить(ИнтеграцияИСМПТККлиентСервер.ДействиеОтзыв(), СоответствиеДоступностиДействия);	

		
	КонецЕсли;
	
	Возврат РазрешенныеДействия;
		
КонецФункции

Функция РазрешенныеДействияПоСтатусамУведомленияОРасхождении(Знач Направление, Знач ВидОперацииСНТ = Неопределено) Экспорт
	
	РазрешенныеДействия = Новый Соответствие();
	
	//Для исходящих
	Если Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий Тогда	
		
		//Подтверждение
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Черновик, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отправлен, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку,	Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отклонен,			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отозван, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Аннулирован, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.НаСогласовании, 	Ложь);			
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Ошибка, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Новое, 			Ложь);
		
		РазрешенныеДействия.Вставить(ИнтеграцияИСМПТККлиентСервер.ДействиеПодтверждение(), СоответствиеДоступностиДействия);
		
		//Отклонение
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Черновик, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отправлен, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку,	Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отклонен,			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отозван, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Аннулирован, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.НаСогласовании, 	Ложь);			
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Ошибка, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Новое, 			Ложь);
		
		РазрешенныеДействия.Вставить(ИнтеграцияИСМПТККлиентСервер.ДействиеОтклонение(), СоответствиеДоступностиДействия);	

	//Для входящих	
	Иначе
	
		//Подтверждение
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Черновик, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отправлен, 		Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку,	Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отклонен,			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отозван, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Аннулирован, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.НаСогласовании, 	Ложь);			
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Ошибка, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Новое, 			Ложь);
		
		РазрешенныеДействия.Вставить(ИнтеграцияИСМПТККлиентСервер.ДействиеПодтверждение(), СоответствиеДоступностиДействия);	
		
		//Отклонение
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Черновик, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отправлен, 		Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку,	Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отклонен,			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отозван, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Аннулирован, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.НаСогласовании, 	Ложь);			
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Ошибка, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Новое, 			Ложь);
		
		РазрешенныеДействия.Вставить(ИнтеграцияИСМПТККлиентСервер.ДействиеОтклонение(), СоответствиеДоступностиДействия);	
			
	КонецЕсли;
	
	Возврат РазрешенныеДействия;
		
КонецФункции

Функция РазрешенныеДействияПоСтатусамУведомленияОВвозеИзЕАЭС(Знач Направление, Знач ВидОперацииСНТ = Неопределено) Экспорт
	
	РазрешенныеДействия = Новый Соответствие();
	
	//Для исходящих
	Если Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий Тогда	
		
		//Подтверждение
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Черновик, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отправлен, 		Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку,	Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отклонен,			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отозван, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Аннулирован, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.НаСогласовании, 	Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Ошибка, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.НеОпределен,		Ложь);
		
		РазрешенныеДействия.Вставить(ИнтеграцияИСМПТККлиентСервер.ДействиеПодтверждение(), СоответствиеДоступностиДействия);	
		
		//Отзыв
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Черновик, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отправлен, 		Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку,	Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден,Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отклонен,			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Отозван, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Аннулирован, 		Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.НаСогласовании, 	Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.Ошибка, 			Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыДокументовИСМПТК.НеОпределен,		Ложь);
		
		РазрешенныеДействия.Вставить(ИнтеграцияИСМПТККлиентСервер.ДействиеОтзыв(), СоответствиеДоступностиДействия);	

		
	//Для входящих	
	Иначе
	
	КонецЕсли;
	
	Возврат РазрешенныеДействия;
		
КонецФункции

#КонецОбласти

Функция НайтиАктуальныеОснованияПоДокументамИСМПТ(Знач МассивИС) Экспорт
	
	// Создать пустое соответствие актуальных оснований.
	АктуальныеОснования = Новый Соответствие;
	
	// Заполнить соответствие ссылками на основания.
	Для Каждого ДокументИС Из МассивИС Цикл
		
		Если ТипЗнч(ДокументИС) = Тип("ДокументСсылка.УведомлениеОРасхожденииИСМПТК") Тогда
			СсылкаНаПервичныйАПП = РаботаСДокументамиИСМПТК.НайтиДокументПоИдентификаторуДляУстановкиСвязи(
								   ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК(), ДокументИС.ИдентификаторАПППервичный);
			АктуальныеОснования.Вставить(ДокументИС, СсылкаНаПервичныйАПП);
		Иначе		
			АктуальныеОснования.Вставить(ДокументИС, ДокументИС.ДокументОснование);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат АктуальныеОснования;
	
КонецФункции

Функция ПолучитьПараметрыЗаполненияДокументовИСМПТПоУмолчанию() Экспорт
	
	ПараметрыЗаполненияДокумента = Новый Структура;	
	ДатаОформления 		= ТекущаяДатаСеанса();
	ТекущийПользователь = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь();
	
	ПараметрыЗаполненияДокумента.Вставить("ДатаДокумента", ДатаОформления);
	ПараметрыЗаполненияДокумента.Вставить("ТекущийПользователь", ТекущийПользователь);
	
	Возврат ПараметрыЗаполненияДокумента;
	
КонецФункции

Функция СоздатьСписокПервичныхДокументов(ПараметрыСоздания) Экспорт
	
	СписокПервичныхДокументов = Новый Массив;
	Отказ = Ложь;
	
	ПараметрыЗаполненияПервичныхДокументов = ПолучитьПараметрыЗаполненияПервичныхДокументов(ПараметрыСоздания);
	МассивДанныхДляЗаполнения = ПодготовитьДанныеДляЗаполненияПервичныхДокументов(ПараметрыЗаполненияПервичныхДокументов);
	НачатьТранзакцию();
	
	ТипСоздаваемогоДокумента = ПараметрыСоздания.ТипСоздаваемогоДокумента;
	РаботаСДокументамиИСМПТКПереопределяемый.ЗаполнитьМассивПервичныхДокументовИСЦЭДМ(ПараметрыЗаполненияПервичныхДокументов, МассивДанныхДляЗаполнения, СписокПервичныхДокументов, Отказ,, ТипСоздаваемогоДокумента);
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат СписокПервичныхДокументов; 
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;	
	
	Возврат СписокПервичныхДокументов;
	
КонецФункции

Функция ПолучитьПараметрыЗаполненияПервичныхДокументов(ПараметрыСоздания) Экспорт
	
	ПараметрыЗаполненияДокументаИСМПТ = ПолучитьПараметрыЗаполненияПервичныхДокументовПоУмолчанию();
	
	Для Каждого ЭлементСтрукуры  Из ПараметрыСоздания Цикл
		ПараметрыЗаполненияДокументаИСМПТ.Вставить(ЭлементСтрукуры.Ключ, ЭлементСтрукуры.Значение);	
	КонецЦикла;	
		
	Возврат ПараметрыЗаполненияДокументаИСМПТ;
	
КонецФункции

Функция ПолучитьПараметрыЗаполненияПервичныхДокументовПоУмолчанию() Экспорт
	
	ПараметрыЗаполненияПервичныхДокументов = Новый Структура;	
	
	ПараметрыЗаполненияПервичныхДокументов.Вставить("ДатаДокумента", ТекущаяДатаСеанса());
	ПараметрыЗаполненияПервичныхДокументов.Вставить("ПроводитьСозданныеДокументы", Ложь);
	ПараметрыЗаполненияПервичныхДокументов.Вставить("ФормироватьСписокДокументов", Истина);
		
	Возврат ПараметрыЗаполненияПервичныхДокументов;
	
КонецФункции

Функция ПодготовитьДанныеДляЗаполненияПервичныхДокументов(ПараметрыЗаполнения) Экспорт
	
	ДанныеДляЗаполнения = Новый Массив;
	
	Если ПараметрыЗаполнения.МассивИСМПТДляСозданияПервичныхДокументов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицыДанныхДляЗаполненияИСМПТ = ПодготовитьТаблицыДанныхДляЗаполненияПервичныхДокументов(ПараметрыЗаполнения);
	Если ТаблицыДанныхДляЗаполненияИСМПТ = Неопределено Тогда
		Возврат ДанныеДляЗаполнения;
	КонецЕсли;
	
	ТаблицаРеквизитов = ТаблицыДанныхДляЗаполненияИСМПТ.ТаблицаРеквизитов;
	ТаблицаТовары 	  = ТаблицыДанныхДляЗаполненияИСМПТ.ТаблицаТовары;
	
	СтруктураДокумента = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьПустуюСтруктуруДокументаОснованияДляИСМПТ(ПараметрыЗаполнения);
	
	Реквизиты = СтруктураДокумента.Реквизиты;
	Товары 	  = СтруктураДокумента.Товары;
	
	ТекущийДокументОснования = Неопределено;
	
	Для Каждого СтрокаРеквизитов ИЗ  ТаблицаРеквизитов Цикл
		
		Если ТекущийДокументОснования <> СтрокаРеквизитов.ДокументОснование Тогда
			НомерПакета = 1;		
		Иначе
			НомерПакета = НомерПакета + 1;		
		КонецЕсли;		
		
		Если ТекущийДокументОснования <> СтрокаРеквизитов.ДокументОснование Тогда
			ТекущийДокументОснования = СтрокаРеквизитов.ДокументОснование;
		КонецЕсли;
		
		ТипДокумента   = ТипЗнч(ТекущийДокументОснования);
		Реквизиты.Очистить();
		Товары.Очистить();
		
		ПараметрыОтбораПоОснованиям = Новый Структура();
		ПараметрыОтбораПоОснованиям.Вставить("ДокументОснование", СтрокаРеквизитов.ДокументОснование);
		
		НоваяСтрокаРеквизитов = Реквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРеквизитов, СтрокаРеквизитов);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ДокументОснование", ТекущийДокументОснования);
		
		МассивСтрокТовары = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
		Товары = Товары.СкопироватьКолонки();
		
		Для Каждого СтрокаТовары Из МассивСтрокТовары Цикл
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
		КонецЦикла;
		
		СтруктураДляПередачи = Новый Структура;
		СтруктураДляПередачи.Вставить("Реквизиты", Реквизиты.Скопировать());
		СтруктураДляПередачи.Вставить("Товары",    Товары.Скопировать());
		ДанныеДляЗаполнения.Добавить(СтруктураДляПередачи);
		
	КонецЦикла;	
	
	Возврат ДанныеДляЗаполнения;	
	
КонецФункции

Функция ПодготовитьТаблицыДанныхДляЗаполненияПервичныхДокументов(ПараметрыЗаполнения) Экспорт 
	
	ДокументыОснования = ПараметрыЗаполнения.МассивИСМПТДляСозданияПервичныхДокументов;
	
	ПараметрыЗаполнения.Вставить("ТипДокументаИСМПТ", ТипЗнч(ДокументыОснования[0]));
	ПараметрыЗаполнения.Вставить("НаправлениеДокументаИСМПТ", ДокументыОснования[0].Направление);
	ТипДокумента = ПараметрыЗаполнения.ТипСоздаваемогоДокумента;
	
	Запрос = Новый Запрос;
	Запрос.Текст = РаботаСДокументамиИСМПТКПереопределяемый.ПодготовитьТекстЗапросаДляЗаполненияПервичныхДокументов(ПараметрыЗаполнения);
	
 	Для Каждого ЭлементСтрукуры  Из ПараметрыЗаполнения Цикл
		Запрос.УстановитьПараметр(ЭлементСтрукуры.Ключ, ЭлементСтрукуры.Значение);	
	КонецЦикла;	
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	ТаблицыДанныхДляЗаполненияИСМПТ = Новый Структура;
	ТаблицыДанныхДляЗаполненияИСМПТ.Вставить("ТаблицаРеквизитов", РезультатЗапроса[КоличествоПакетов - 2].Выгрузить());
	ТаблицыДанныхДляЗаполненияИСМПТ.Вставить("ТаблицаТовары",	  РезультатЗапроса[КоличествоПакетов - 1].Выгрузить());
		
	Возврат ТаблицыДанныхДляЗаполненияИСМПТ;
	
КонецФункции

Процедура ЗаменитьИменаРеквизитовПолейЗапросов(ТекстЗапроса, СоответсвиеИменРеквизитовПолейЗапросов) Экспорт
	
	Для Каждого ЭлементСоответсвия Из СоответсвиеИменРеквизитовПолейЗапросов Цикл
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЭлементСоответсвия.Ключ, ЭлементСоответсвия.Значение); 	
	КонецЦикла;
	
КонецПроцедуры

#Область ПроверкаСвязанныхДокументов

Функция ПроверитьНаличиеСвязанногоДокументаМаркировки_Общая(Основание, ЭтоПроверкаИзОснования = Ложь, ИмяКоманды = Неопределено) Экспорт
	
	Если Основание.Ссылка.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = "";
	
	Если ПравоДоступа("Просмотр", Метаданные.Документы.УведомлениеОбЭкспортеЕАЭСИСМПТК) Тогда 
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Ссылка,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Дата,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.ДокументОснование,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.НомерИСМПТ
		|ИЗ
		|	Документ.УведомлениеОбЭкспортеЕАЭСИСМПТК КАК УведомлениеОбЭкспортеЕАЭСИСМПТК
		|ГДЕ
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.ДокументОснование = &ДокументОснование
		|";
	КонецЕсли;
	
	Если ПравоДоступа("Просмотр", Метаданные.Документы.АктПриемаПередачиИСМПТК) Тогда
		ТекстЗапроса = ТекстЗапроса +
			?(НЕ ЗначениеЗаполнено(ТекстЗапроса), 
			"", 
			"ОБЪЕДИНИТЬ ВСЕ
			|") + 
			"ВЫБРАТЬ
			|	АктПриемаПередачиИСМПТ.Ссылка КАК Ссылка,
			|	АктПриемаПередачиИСМПТ.Дата КАК Дата,
			|	АктПриемаПередачиИСМПТ.ДокументОснование КАК ДокументОснование,
			|	АктПриемаПередачиИСМПТ.НомерИСМПТ КАК НомерИСМПТ
			|ИЗ
			|	Документ.АктПриемаПередачиИСМПТК КАК АктПриемаПередачиИСМПТ
			|ГДЕ
			|	АктПриемаПередачиИСМПТ.ДокументОснование = &ДокументОснование
			|";
	КонецЕсли;
	
	Если ПравоДоступа("Просмотр", Метаданные.Документы.УведомлениеОВводеВОборотИСМПТК) Тогда
		ТекстЗапроса = ТекстЗапроса +
			?(НЕ ЗначениеЗаполнено(ТекстЗапроса), 
			"", 
			"ОБЪЕДИНИТЬ ВСЕ
			|") + 
			"ВЫБРАТЬ
			|	УведомлениеОВводеВОборотИСМПТК.Ссылка,
			|	УведомлениеОВводеВОборотИСМПТК.Дата,
			|	УведомлениеОВводеВОборотИСМПТК.ДокументОснование,
			|	УведомлениеОВводеВОборотИСМПТК.НомерИСМПТ
			|ИЗ
			|	Документ.УведомлениеОВводеВОборотИСМПТК КАК УведомлениеОВводеВОборотИСМПТК
			|ГДЕ
			|	УведомлениеОВводеВОборотИСМПТК.ДокументОснование = &ДокументОснование
			|";
	КонецЕсли;

	Если ПравоДоступа("Просмотр", Метаданные.Документы.УведомлениеОВыводеИзОборотаИСМПТК) Тогда
		ТекстЗапроса = ТекстЗапроса +
			?(НЕ ЗначениеЗаполнено(ТекстЗапроса), 
			"", 
			"ОБЪЕДИНИТЬ ВСЕ
			|") + 
			"ВЫБРАТЬ
			|	УведомлениеОВыводеИзОборотаИСМПТК.Ссылка,
			|	УведомлениеОВыводеИзОборотаИСМПТК.Дата,
			|	УведомлениеОВыводеИзОборотаИСМПТК.ДокументОснование,
			|	УведомлениеОВыводеИзОборотаИСМПТК.НомерИСМПТ
			|ИЗ
			|	Документ.УведомлениеОВыводеИзОборотаИСМПТК КАК УведомлениеОВыводеИзОборотаИСМПТК
			|ГДЕ
			|	УведомлениеОВыводеИзОборотаИСМПТК.ДокументОснование = &ДокументОснование
			|";
	КонецЕсли;
	
	Если ПравоДоступа("Просмотр", Метаданные.Документы.УведомлениеОВвозеИзЕАЭСИСМПТК) Тогда
		ТекстЗапроса = ТекстЗапроса +
			?(НЕ ЗначениеЗаполнено(ТекстЗапроса), 
			"", 
			"ОБЪЕДИНИТЬ ВСЕ
			|") + 
			"ВЫБРАТЬ
			|	УведомлениеОВвозеИзЕАЭСИСМПТК.Ссылка,
			|	УведомлениеОВвозеИзЕАЭСИСМПТК.Дата,
			|	УведомлениеОВвозеИзЕАЭСИСМПТК.ДокументОснование,
			|	УведомлениеОВвозеИзЕАЭСИСМПТК.НомерИСМПТ
			|ИЗ
			|	Документ.УведомлениеОВвозеИзЕАЭСИСМПТК КАК УведомлениеОВвозеИзЕАЭСИСМПТК
			|ГДЕ
			|	УведомлениеОВвозеИзЕАЭСИСМПТК.ДокументОснование = &ДокументОснование
			|";
	КонецЕсли;
		
	Если ПравоДоступа("Просмотр", Метаданные.Документы.УведомлениеОВвозеИзТретьихСтранИСМПТК) Тогда
		ТекстЗапроса = ТекстЗапроса +
			?(НЕ ЗначениеЗаполнено(ТекстЗапроса), 
			"", 
			"ОБЪЕДИНИТЬ ВСЕ
			|") + 
			"ВЫБРАТЬ
			|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Ссылка,
			|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Дата,
			|	УведомлениеОВвозеИзТретьихСтранИСМПТК.ДокументОснование,
			|	УведомлениеОВвозеИзТретьихСтранИСМПТК.НомерИСМПТ
			|ИЗ
			|	Документ.УведомлениеОВвозеИзТретьихСтранИСМПТК КАК УведомлениеОВвозеИзТретьихСтранИСМПТК
			|ГДЕ
			|	УведомлениеОВвозеИзТретьихСтранИСМПТК.ДокументОснование = &ДокументОснование
			|";
	КонецЕсли;
		
	Если ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказКодовМаркировкиСУЗИСМПТК) Тогда
		ТекстЗапроса = ТекстЗапроса +
			?(НЕ ЗначениеЗаполнено(ТекстЗапроса), 
			"", 
			"ОБЪЕДИНИТЬ ВСЕ
			|") + 
			"ВЫБРАТЬ
			|	ЗаказКодовМаркировкиСУЗИСМПТК.Ссылка,
			|	ЗаказКодовМаркировкиСУЗИСМПТК.Дата,
			|	ЗаказКодовМаркировкиСУЗИСМПТК.ДокументОснование,
			|	ЗаказКодовМаркировкиСУЗИСМПТК.OrderID
			|ИЗ
			|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК КАК ЗаказКодовМаркировкиСУЗИСМПТК
			|ГДЕ
			|	ЗаказКодовМаркировкиСУЗИСМПТК.ДокументОснование = &ДокументОснование
			|";
	КонецЕсли;
		
	Если ПравоДоступа("Просмотр", Метаданные.Документы.УведомлениеОПриемкеЕАЭСИСМПТК) Тогда
		ТекстЗапроса = ТекстЗапроса +
			?(НЕ ЗначениеЗаполнено(ТекстЗапроса), 
			"", 
			"ОБЪЕДИНИТЬ ВСЕ
			|") + 
			"ВЫБРАТЬ
			|	УведомлениеОПриемкеЕАЭСИСМПТК.Ссылка,
			|	УведомлениеОПриемкеЕАЭСИСМПТК.Дата,
			|	УведомлениеОПриемкеЕАЭСИСМПТК.ДокументОснование,
			|	Неопределено
			|ИЗ
			|	Документ.УведомлениеОПриемкеЕАЭСИСМПТК КАК УведомлениеОПриемкеЕАЭСИСМПТК
			|ГДЕ
			|	УведомлениеОПриемкеЕАЭСИСМПТК.ДокументОснование = &ДокументОснование
			|";
	КонецЕсли;
	
	ТекстЗапроса = ?(НЕ ЗначениеЗаполнено(ТекстЗапроса), 
				   "", 
				   ТекстЗапроса + 
				   "УПОРЯДОЧИТЬ ПО
					|	Дата УБЫВ");
		
	Возврат ?(Не ЗначениеЗаполнено(ТекстЗапроса), Неопределено, ПроверитьНаличиеСвязанного_Общий(Основание, ЭтоПроверкаИзОснования, ТекстЗапроса));

КонецФункции

Функция ПроверитьСвязанноеНанесение(Основание, ЭтоПроверкаИзОснования = Ложь) Экспорт
	
	Если Основание.Ссылка.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЗаказКодовМаркировкиСУЗИСМПТК.Ссылка,
		|	ЗаказКодовМаркировкиСУЗИСМПТК.Дата,
		|	ЗаказКодовМаркировкиСУЗИСМПТК.ДокументОснование
		|ИЗ
		|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК КАК ЗаказКодовМаркировкиСУЗИСМПТК
		|ГДЕ
		|	ЗаказКодовМаркировкиСУЗИСМПТК.ДокументОснование = &ДокументОснование		
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
		
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	
	РезультаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультаЗапроса.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивСсылокДокументИСМПТ = РезультаЗапроса.ВыгрузитьКолонку("Ссылка");
	
	ДанныеДокументИСМПТ = Новый СписокЗначений;
	ДанныеДокументИСМПТ.ЗагрузитьЗначения(МассивСсылокДокументИСМПТ);
	
	Возврат ДанныеДокументИСМПТ;

КонецФункции

Функция ПроверитьНаличиеСвязанного_Общий(Основание, ЭтоПроверкаИзОснования, ТекстЗапроса = "", ИмяДокумента = Неопределено) Экспорт
	
	Если СтрНайти(ИмяДокумента, "ИСМПТК") = 0 Тогда
		ИнфСистема = "ИСЦЭДМ";
	Иначе
		ИнфСистема = "ИСМПТ";
	КонецЕсли;		
		
	Запрос = Новый Запрос;		
	Если ТекстЗапроса = "" Тогда
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДокументИС.Ссылка,
			|	ДокументИС.Дата,
			|	ДокументИС.ДокументОснование,
			|	ДокументИС.Номер" + ИнфСистема + "
			|ИЗ
			|	Документ.&ДокументИС КАК ДокументИС
			|ГДЕ
			|	ДокументИС.ДокументОснование = &ДокументОснование";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДокументИС", ИмяДокумента);
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	
	РезультаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультаЗапроса.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивСсылокДокументИС = РезультаЗапроса.ВыгрузитьКолонку("Ссылка");
	
	ДанныеДокументИС = Новый СписокЗначений;
	ДанныеДокументИС.ЗагрузитьЗначения(МассивСсылокДокументИС);
	
	Возврат ДанныеДокументИС;

КонецФункции

Функция ПроверитьНаличиеСвязанногоЗаказаКодов(Основание, ЭтоПроверкаИзОснования = Ложь) Экспорт
	
	Если Основание.Ссылка.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Ссылка,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Дата КАК Дата,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ДокументОснование,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.OrderID
		|ИЗ
		|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК КАК ЗаказНаЭмиссиюКодовМаркировкиСУЗ
		|ГДЕ
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ДокументОснование = &ДокументОснование		
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
		
	Возврат ПроверитьНаличиеСвязанного_Общий(Основание, ЭтоПроверкаИзОснования, ТекстЗапроса);

КонецФункции

#КонецОбласти

#Область СозданиеНаОсновании

Функция ПодготовитьДанныеДляЗаполненияДокументаИСМПТ(ПараметрыЗаполнения, ТипДокументаИСМПТ) Экспорт
	
	ДанныеДляЗаполнения = Новый Массив;
	//ТаблицыДанныхДляЗаполненияДокументаИСЦЭДМ - должна содержать структуры:
	//ТаблицаРеквизитов - реквизиты шапки документа-основания для заполнения шапки документа ЦЭДМ
	//ТаблицаТовары - таблица для заполнения табличной части документа по ТЧ исходного документа
	//ТаблицаИтоги - специфическая ТЧ для заполнения цен в некоторых документах
	
	ТаблицыДанныхДляЗаполненияДокументаИСМПТ = ПодготовитьТаблицыДанныхДляЗаполненияДокументаИСМПТ(ПараметрыЗаполнения, ТипДокументаИСМПТ);
	
	Если ТаблицыДанныхДляЗаполненияДокументаИСМПТ = Неопределено Тогда
		Возврат ДанныеДляЗаполнения;
	КонецЕсли;
	
	ТаблицаРеквизитов = ТаблицыДанныхДляЗаполненияДокументаИСМПТ.ТаблицаРеквизитов;
	ТаблицаТовары	  = ТаблицыДанныхДляЗаполненияДокументаИСМПТ.ТаблицаТовары;
	ТаблицаМарки	  = ТаблицыДанныхДляЗаполненияДокументаИСМПТ.ТаблицаМарки;	
	
	ДокументОснование = ?(ТипЗнч(ПараметрыЗаполнения.МассивДокументов) = Тип("Массив"), ПараметрыЗаполнения.МассивДокументов[0].Ссылка, ПараметрыЗаполнения.МассивДокументов);
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК")
		Или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.УведомлениеОРасхожденииИСМПТК") Тогда
		СтруктураДокумента = ИнтеграцияИСМПТКПовтИсп.ПолучитьПустуюСтруктуруДокументаАППКорректировочныйИУОР();
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.УведомлениеОбОтгрузкеЕАЭСИСМПТК") Тогда
		СтруктураДокумента = ИнтеграцияИСМПТКПовтИсп.ПолучитьПустуюСтруктуруДокументаУведомлениеОПриемке();
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСМПТК") Тогда
		СтруктураДокумента = ИнтеграцияИСМПТКПовтИсп.ПолучитьПустуюСтруктуруДокументаУведомлениеОВвозеЕАЭС();
		
	Иначе
		СтруктураДокумента = ИнтеграцияИСМПТКПовтИсп.ПолучитьПустуюСтруктуруДокументаИСМПТ_Общая(ТипДокументаИСМПТ);
	КонецЕсли;
	
	Реквизиты = СтруктураДокумента.Реквизиты;
	Если СтруктураДокумента.Свойство("Товары") Тогда
		Товары = СтруктураДокумента.Товары;
	Иначе
		Товары = Неопределено;
	КонецЕсли;
	Если СтруктураДокумента.Свойство("Марки") Тогда
		Марки = СтруктураДокумента.Марки;
	Иначе
		Марки = Неопределено;
	КонецЕсли;
	
	Для Каждого СтрокаРеквизитов ИЗ ТаблицаРеквизитов Цикл
			
		Реквизиты.Очистить();
		НоваяСтрокаРеквизитов = Реквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРеквизитов, СтрокаРеквизитов);
		Если ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСМПТК")
			И НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСМПТК") Тогда
			НоваяСтрокаРеквизитов.Поставщик = СтрокаРеквизитов.Получатель;
			НоваяСтрокаРеквизитов.ПоставщикНаименование = СтрокаРеквизитов.ПолучательНаименование;
			НоваяСтрокаРеквизитов.ПоставщикИдентификационныйНомер = СтрокаРеквизитов.ПолучательИдентификационныйНомер;
			НоваяСтрокаРеквизитов.Получатель = СтрокаРеквизитов.Поставщик;
			НоваяСтрокаРеквизитов.ПолучательНаименование = СтрокаРеквизитов.ПоставщикНаименование;
			НоваяСтрокаРеквизитов.ПолучательИдентификационныйНомер = СтрокаРеквизитов.ПоставщикИдентификационныйНомер;
		ИначеЕсли ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСМПТК") Тогда
			НоваяСтрокаРеквизитов.Поставщик = СтрокаРеквизитов.Поставщик;
			НоваяСтрокаРеквизитов.ПоставщикНаименование = СтрокаРеквизитов.ПоставщикНаименование;
			НоваяСтрокаРеквизитов.ПоставщикИдентификационныйНомер = СтрокаРеквизитов.ПоставщикИдентификационныйНомер;
			НоваяСтрокаРеквизитов.Получатель = СтрокаРеквизитов.Получатель;
			НоваяСтрокаРеквизитов.ПолучательНаименование = СтрокаРеквизитов.ПолучательНаименование;
			НоваяСтрокаРеквизитов.ПолучательИдентификационныйНомер = СтрокаРеквизитов.ПолучательИдентификационныйНомер;
		ИначеЕсли ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСМПТК") Тогда
			НоваяСтрокаРеквизитов.Получатель = СтрокаРеквизитов.Поставщик;
			НоваяСтрокаРеквизитов.ПолучательНаименование = СтрокаРеквизитов.ПоставщикНаименование;
			НоваяСтрокаРеквизитов.ПолучательИдентификационныйНомер = СтрокаРеквизитов.ПоставщикИдентификационныйНомер;
		КонецЕсли;	
		
		СтруктураДляПередачи = Новый Структура;
		СтруктураДляПередачи.Вставить("Реквизиты", Реквизиты.Скопировать());
			
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК")
			Или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.УведомлениеОРасхожденииИСМПТК") 
			Или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.УведомлениеОбОтгрузкеЕАЭСИСМПТК")
			Или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСМПТК") Тогда
			
			Если Не Марки = Неопределено Тогда
				Марки.Очистить();
				Для Каждого СтрокаМарки Из ТаблицаМарки Цикл
					НоваяСтрока = Марки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМарки);
				КонецЦикла;
			КонецЕсли;
		
			СтруктураДляПередачи.Вставить("Товары", Неопределено);
			СтруктураДляПередачи.Вставить("Марки",  Марки.Скопировать());
						
		Иначе
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ДокументОснование", СтрокаРеквизитов.ДокументОснование);
			
			Если Не Товары = Неопределено Тогда
				Товары.Очистить();
				МассивСтрокТовары = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
				Для Каждого СтрокаТовары Из МассивСтрокТовары Цикл
					НоваяСтрока = Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
				КонецЦикла;
			КонецЕсли;
					
			СтруктураДляПередачи.Вставить("Товары", Товары.Скопировать());
			СтруктураДляПередачи.Вставить("Марки",  Неопределено);
			
		КонецЕсли;
	
	ДанныеДляЗаполнения.Добавить(СтруктураДляПередачи);
	
	КонецЦикла;
	
	Возврат ДанныеДляЗаполнения;

КонецФункции

Функция ПодготовитьТаблицыДанныхДляЗаполненияДокументаИСМПТ(ПараметрыЗаполнения, ТипДокументаИСМПТ) Экспорт 

	Запрос = Новый Запрос;
	ТекстЗапроса = РаботаСДокументамиИСМПТКПереопределяемый.ПодготовитьТекстЗапросаДляЗаполненияДокументаИСМПТ_Общий(ПараметрыЗаполнения);
	Запрос.Текст = ТекстЗапроса;
	
	Для Каждого ЭлементСтрукуры  Из ПараметрыЗаполнения Цикл
		Запрос.УстановитьПараметр(ЭлементСтрукуры.Ключ, ЭлементСтрукуры.Значение);	
	КонецЦикла;	
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	ТаблицыДанныхДляЗаполненияИСМПТ = Новый Структура;
	ТаблицыДанныхДляЗаполненияИСМПТ.Вставить("ТаблицаРеквизитов", РезультатЗапроса[КоличествоПакетов - 3].Выгрузить());
	ТаблицыДанныхДляЗаполненияИСМПТ.Вставить("ТаблицаТовары", 	  РезультатЗапроса[КоличествоПакетов - 2].Выгрузить());
	ТаблицыДанныхДляЗаполненияИСМПТ.Вставить("ТаблицаМарки", 	  РезультатЗапроса[КоличествоПакетов - 1].Выгрузить());
			
	Возврат ТаблицыДанныхДляЗаполненияИСМПТ;
	
КонецФункции

Функция ПодготовитьДанныеДляЗаполненияДокументаСУЗ(ПараметрыЗаполнения, ТипДокументаИСМПТ) Экспорт
	
	ДанныеДляЗаполнения = Новый Массив;
	
	ТаблицыДанныхДляЗаполненияДокументаИСМПТ = ПодготовитьТаблицыДанныхДляЗаполненияДокументаСУЗ(ПараметрыЗаполнения, ТипДокументаИСМПТ);
	
	Если ТаблицыДанныхДляЗаполненияДокументаИСМПТ = Неопределено Тогда
		Возврат ДанныеДляЗаполнения;
	КонецЕсли;
	
	ТаблицаРеквизитов = ТаблицыДанныхДляЗаполненияДокументаИСМПТ.ТаблицаРеквизитов;
	Если ТаблицыДанныхДляЗаполненияДокументаИСМПТ.Свойство("ТаблицаТовары") Тогда
		ТаблицаТовары = ТаблицыДанныхДляЗаполненияДокументаИСМПТ.ТаблицаТовары;
	Иначе 
		ТаблицаТовары = Неопределено;
	КонецЕсли;	

	Если Не ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.НанесениеКодовМаркировкиСУЗИСМПТК") Тогда
		//Если в исходном документе указан товар, у которого зарегистрировано несколько разных штрихкодов номенклатуры без указания упаковок и характеристик,
		//ТаблицаТовары будет содержать несколько строк для этой товарной позиции - по каждому штрихкоду из регистра. Заполнять так Заказ некорректно,
		//поэтому делаем дополнительную проверку и заполяем строку в Заказе с пустым GTIN, оставляя его на выбор пользователя. 
		СтрокаПроверки = "Номенклатура, Характеристика, ЕдиницаИзмеренияБазовая, Упаковка";
		//Получаем сгруппированный список товаров из таблицы и проверяем наличие повторов для каждого товара
		ТаблицаТоварыПроверочная = ТаблицаТовары.Скопировать();
		ТаблицаТоварыПроверочная.Свернуть(СтрокаПроверки); 
		Для Каждого СтрокаПроверочная Из ТаблицаТоварыПроверочная Цикл
			НайденныеСтрокиВТаблицеТовары = ТаблицаТовары.НайтиСтроки(Новый Структура(СтрокаПроверки, СтрокаПроверочная.Номенклатура, 
																									  СтрокаПроверочная.Характеристика, 
																									  СтрокаПроверочная.ЕдиницаИзмеренияБазовая, 
																									  СтрокаПроверочная.Упаковка));
			ПерваяСтрокаОбработана = Ложь;
			Если Не НайденныеСтрокиВТаблицеТовары.Количество() = 1 Тогда
				Для Каждого СтрокаТЧ Из НайденныеСтрокиВТаблицеТовары Цикл 
					//В первой строке из дублирующихся - очищаем GTIN, последующие строки - удаляем из таблицы
					Если Не ПерваяСтрокаОбработана Тогда 
						СтрокаТЧ.GTIN = "";
						ПерваяСтрокаОбработана = Истина;
					Иначе
						ТаблицаТовары.Удалить(СтрокаТЧ);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	                       
	СтруктураДокумента = ИнтеграцияИСМПТКПовтИсп.ПолучитьПустуюСтруктуруДокументаСУЗ(ТипДокументаИСМПТ);
	
	Реквизиты = СтруктураДокумента.Реквизиты;
	Товары 	  = СтруктураДокумента.Товары;
		
	ТекущийДокументОснования = Неопределено;
		
	Для Каждого СтрокаРеквизитов ИЗ ТаблицаРеквизитов Цикл
		
		Если ТекущийДокументОснования <> СтрокаРеквизитов.ДокументОснование Тогда
			НомерПакета = 1;
		Иначе
			НомерПакета = НомерПакета + 1;
		КонецЕсли;
		
		Если ТекущийДокументОснования <> СтрокаРеквизитов.ДокументОснование Тогда
			ТекущийДокументОснования = СтрокаРеквизитов.ДокументОснование;
		КонецЕсли;
		
		ТипДокумента = ТипЗнч(ТекущийДокументОснования);

		Реквизиты.Очистить();
		НоваяСтрокаРеквизитов = Реквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРеквизитов, СтрокаРеквизитов);

		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ДокументОснование", ТекущийДокументОснования);
		
		Если Не ТаблицаТовары = Неопределено Тогда 
			Товары.Очистить();
			МассивСтрокТовары = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
			Для Каждого СтрокаТовары Из МассивСтрокТовары Цикл
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
			КонецЦикла;
		КонецЕсли;
						
		СтруктураДляПередачи = Новый Структура;
		СтруктураДляПередачи.Вставить("Реквизиты",  Реквизиты.Скопировать());
		Если Не ТаблицаТовары = Неопределено Тогда
			СтруктураДляПередачи.Вставить("Товары", Товары.Скопировать());
		КонецЕсли;
		
		ДанныеДляЗаполнения.Добавить(СтруктураДляПередачи);

	КонецЦикла;
	
	Возврат ДанныеДляЗаполнения;

КонецФункции

Функция ПодготовитьТаблицыДанныхДляЗаполненияДокументаСУЗ(ПараметрыЗаполнения, ТипДокументаИСМПТ) Экспорт 
	
	ДокументыОснования = ПараметрыЗаполнения.МассивДокументов;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = ПодготовитьТекстЗапросаДляЗаполненияДокументаСУЗ(ПараметрыЗаполнения, ТипДокументаИСМПТ);
	ТекстЗапроса = ДополнитьТекстЗапросЗаполненияДокументаСУЗ(ТекстЗапроса, ТипДокументаИСМПТ);
	
	Запрос.Текст = ТекстЗапроса;
	
	Для Каждого ЭлементСтрукуры  Из ПараметрыЗаполнения Цикл
		Запрос.УстановитьПараметр(ЭлементСтрукуры.Ключ, ЭлементСтрукуры.Значение);	
	КонецЦикла;	
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	ТаблицаТоварыДляПередачи = РезультатЗапроса[КоличествоПакетов - 1].Выгрузить();
	
	ТаблицыДанныхДляЗаполненияИСМПТ = Новый Структура;
	ТаблицыДанныхДляЗаполненияИСМПТ.Вставить("ТаблицаРеквизитов", РезультатЗапроса[КоличествоПакетов - 2].Выгрузить());
	
	Если ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.НанесениеКодовМаркировкиСУЗИСМПТК") Тогда
		Если ТаблицаТоварыДляПередачи.Количество() <> 0 Тогда
			Если Не ЗначениеЗаполнено(ТаблицаТоварыДляПередачи[0].КодМаркировки) Тогда
				ТаблицаТоварыДляПередачи.Очистить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицыДанныхДляЗаполненияИСМПТ.Вставить("ТаблицаТовары", ТаблицаТоварыДляПередачи);
	
	Возврат ТаблицыДанныхДляЗаполненияИСМПТ;
	
КонецФункции

Функция ПодготовитьТекстЗапросаДляЗаполненияДокументаСУЗ(ПараметрыЗаполнения, ТипДокументаИСМПТ) Экспорт
	
	Если ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.ЗаказКодовМаркировкиСУЗИСМПТК") Тогда
		
		Возврат РаботаСДокументамиИСМПТКПереопределяемый.ПодготовитьТекстЗапросаДляЗаполненияЗаказКодов(ПараметрыЗаполнения);
		
	ИначеЕсли ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.НанесениеКодовМаркировкиСУЗИСМПТК") Тогда
		
		Возврат РаботаСДокументамиИСМПТКПереопределяемый.ПодготовитьТекстЗапросаДляЗаполненияНанесенияКодов(ПараметрыЗаполнения);
		
	КонецЕсли;
	
КонецФункции

Функция ДополнитьТекстЗапросЗаполненияДокументаСУЗ(ТекстЗапроса, ТипДокументаИСМПТ) Экспорт
	
	Если ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.ЗаказКодовМаркировкиСУЗИСМПТК") Тогда
		
		Возврат РаботаСДокументамиИСМПТКПереопределяемый.ДополнитьТекстЗапросЗаполненияЗаказКодов(ТекстЗапроса);
		
	ИначеЕсли ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.НанесениеКодовМаркировкиСУЗИСМПТК") Тогда
		
		Возврат РаботаСДокументамиИСМПТКПереопределяемый.ДополнитьТекстЗапросЗаполненияНанесениеКодов(ТекстЗапроса);
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТекстПакетовЗапросаДляЗаполненияЗаказКодов() Экспорт
	
	СтруктураДокумента = ИнтеграцияИСМПТКПовтИсп.ПолучитьПустуюСтруктуруДокументаЗаказКодов();
	Возврат ПолучитьТекстПакетовЗапросаДляЗаполненияОбщая(СтруктураДокумента); 
	
КонецФункции

Функция ПолучитьТекстПакетовЗапросаДляЗаполненияНанесенияКодов() Экспорт
	
	СтруктураДокумента = ИнтеграцияИСМПТКПовтИсп.ПолучитьПустуюСтруктуруДокументаНанесениеКодов();
	Возврат ПолучитьТекстПакетовЗапросаДляЗаполненияОбщая(СтруктураДокумента); 
	
КонецФункции

Функция ПолучитьТекстПакетовЗапросаДляЗаполненияОбщая(СтруктураДокумента) Экспорт
	
	ТекстЗапроса = "";
	Для Каждого ЭлементСтруктуры Из СтруктураДокумента Цикл 
		
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ" + ?(ЭлементСтруктуры.Ключ = "Реквизиты",  " РАЗЛИЧНЫЕ", "") + " 
		|";
		
		КолонкиТЧ 			= ЭлементСтруктуры.Значение.Колонки;
		НомерКолонки 		= 0;
		КоличествоКолонок 	= КолонкиТЧ.Количество();
		Для Каждого КолонкаТЧ Из КолонкиТЧ Цикл
			НомерКолонки = НомерКолонки + 1;
			ТекстЗапроса = ТекстЗапроса + "
			|вт_ДанныеДляЗаполнения." + КолонкаТЧ.Имя + ?(НомерКолонки = КоличествоКолонок, "", ",");
		КонецЦикла;	
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ИЗ вт_ДанныеДляЗаполнения КАК вт_ДанныеДляЗаполнения";
		
		ТекстЗапроса = ТекстЗапроса + "
		|					
		|	УПОРЯДОЧИТЬ ПО
		|		ДокументОснование";
		
	КонецЦикла;	
			
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура СоздатьУведомлениеОВыводеИзОборотаПоПроверкеАгрегации(Организация, ПричинаВыбытия, МассивКМДляСоздания, СсылкаНовый) Экспорт
	
	ДокументИСМПТ = Документы.УведомлениеОВыводеИзОборотаИСМПТК.СоздатьДокумент();
	
	Для Каждого СтрокаТЧ Из МассивКМДляСоздания Цикл
		НоваяСтрокаТЧ = ДокументИСМПТ.Марки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
	КонецЦикла;	
	
	ДокументИСМПТ.ПричинаВыводаИзОборота = ПричинаВыбытия;
	
	ДокументИСМПТ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий");
	ДокументИСМПТ.Поставщик   = Организация;
	ДокументИСМПТ.Организация = Организация;
	СтруктураДанных = ИнтеграцияИСМПТКПереопределяемый.ПолучитьРеквизитыОрганизацииКонтрагента(Организация, "Поставщик");
	ЗаполнитьЗначенияСвойств(ДокументИСМПТ, СтруктураДанных, "ПоставщикИдентификационныйНомер, ПоставщикНаименование");
	
	Попытка 
		ДокументИСМПТ.Дата = ТекущаяДатаСеанса();
		ДокументИСМПТ.УстановитьНовыйНомер();
		
		ДокументИСМПТ.ДокументОснованиеНаименование = Метаданные.Документы.УведомлениеОВыводеИзОборотаИСМПТК.Представление();
		ДокументИСМПТ.ДокументОснованиеДата  = ДокументИСМПТ.Дата;
		ДокументИСМПТ.ДокументОснованиеНомер = ДокументИСМПТ.Номер;
		
		ДокументИСМПТ.Записать(РежимЗаписиДокумента.Запись);
		
		СсылкаНовый = ДокументИСМПТ.Ссылка;
				
	Исключение
		
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриЗаписиДокументаСПараметром()
					   + Символы.ПС
					   + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументИСМПТ);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СостояниеДокументов

Функция СостояниеДокументаИСМПТ(ДокументИСМПТ)Экспорт
	
	Если ДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.Аннулирован Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.Аннулирован;
		
	ИначеЕсли ДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.Отозван Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.Отозван;
		
	ИначеЕсли ДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку Тогда
		
		Если ДокументИСМПТ.Направление = Перечисления.НаправленияДокументовИСМПТК.Входящий Тогда 
			Если (ТипЗнч(ДокументИСМПТ) = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК")
				Или ТипЗнч(ДокументИСМПТ) = Тип("ДокументСсылка.АктПриемаПередачиИСЦЭДМ"))
				И ДокументИСМПТ.Проверен Тогда
				Состояние = Перечисления.СостоянияДокументовИСМПТК.ПринятПроверен;
			Иначе
				Состояние = Перечисления.СостоянияДокументовИСМПТК.ПринятОтПоставщика;
			КонецЕсли;
		Иначе
			Состояние = Перечисления.СостоянияДокументовИСМПТК.ДоставленПолучателю;
		КонецЕсли;
		
	ИначеЕсли ДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.Отклонен Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ОтклоненПолучателем;
		
	ИначеЕсли ДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ПодтвержденПолучателем;
		
	ИначеЕсли ДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.Ошибка Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ОтклоненСервером;
		
	ИначеЕсли ДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.НаСогласовании Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ОбрабатываетсяСервером;
		
	ИначеЕсли ДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.Отправлен Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ПринятСервером;
		
	ИначеЕсли ДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.Новое Тогда  //Для УОР. У получателя это статус Новое, у отправителя Отправлен
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ПринятСервером;
		
	ИначеЕсли ДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.Проверяется Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ОбрабатываетсяСервером;
		
	ИначеЕсли ДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.Оформлен Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ПринятСервером;
		
	ИначеЕсли ДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.ОшибкаПриПроверке Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ОшибкаДанных;
		
	ИначеЕсли ДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.ОшибкаПриОбработке Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ОтклоненСервером;
		
	//ИначеЕсли ПустаяСтрока(ДокументИСМПТ.НомерИСМПТ)
	//	И (ДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.Черновик 				//АПП, УОР, Экспорт ЕАЭС
	//		Или ДокументИСМПТ.Статус = Перечисления.СтатусыДокументовИСМПТК.НеОпределен) Тогда  //Ввод в оборот, Вывод из оборота, Ввоз ЕАЭС, Ввоз Импорт
	//	
	//	Состояние = Перечисления.СостоянияДокументовИСМПТК.Сформирован; 
	Иначе	
		Состояние = Перечисления.СостоянияДокументовИСМПТК.Сформирован; //Пустая ссылка может привести к ошибкам при открытии из-за проверок доступности команд по значению состояния
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

Функция СостояниеДокументаСУЗ(ДокументСУЗ)Экспорт
	
	Если ТипЗнч(ДокументСУЗ.Ссылка) = Тип("ДокументСсылка.ЗаказКодовМаркировкиСУЗИСМПТК") Тогда
		
		Если ДокументСУЗ.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Черновик Тогда
					
			Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.Черновик;
			
		ИначеЕсли ДокументСУЗ.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Создан Тогда
						
			Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.Создан;
			
		ИначеЕсли ДокументСУЗ.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.ПринятКОбработке Тогда
			
			Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.ОжидаетПодтверждения;
			
		ИначеЕсли ДокументСУЗ.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.НеПодтвержденИСМП Тогда
			
			Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.НеПодтвержден;
			
		ИначеЕсли ДокументСУЗ.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.ПодтвержденИСМП Тогда
			
			Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.Подтвержден;
			
		ИначеЕсли ДокументСУЗ.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.КодыМаркировкиЭмитированы Тогда
			
			Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.Готов;
			
		ИначеЕсли ДокументСУЗ.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Выполнен Тогда
			
			Если ЗначениеЗаполнено(ДокументСУЗ.ПричинаОтклонения) Тогда
				Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.ЗакрытСОшибкой;
			Иначе
				Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.Закрыт;
			КонецЕсли;
			
		Иначе
			
			Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.Черновик;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументСУЗ.Ссылка) = Тип("ДокументСсылка.АгрегацияКодовМаркировкиСУЗИСМПТК")
		ИЛИ ТипЗнч(ДокументСУЗ.Ссылка) = Тип("ДокументСсылка.НанесениеКодовМаркировкиСУЗИСМПТК") Тогда
		
		Если ДокументСУЗ.Статус = Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.Черновик Тогда
			
			Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.Черновик;
			
		ИначеЕсли ДокументСУЗ.Статус = Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.ВОжидании Тогда
			
			Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.ОжидаетПодтверждения;
			
		ИначеЕсли ДокументСУЗ.Статус = Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.ГотовКОтправке Тогда
			
			Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.Готов;
			
		ИначеЕсли ДокументСУЗ.Статус = Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.Отклонен Тогда
			
			Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.Отклонен;
			
		ИначеЕсли ДокументСУЗ.Статус = Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.Отправлен 
			И ЗначениеЗаполнено(ДокументСУЗ.OrderID) Тогда
			
			Если ЗначениеЗаполнено(ДокументСУЗ.ПричинаОтклонения) Тогда
				Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.ЗакрытСОшибкой;
			Иначе
				Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.Закрыт;
			КонецЕсли;
			
		ИначеЕсли ДокументСУЗ.Статус = Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.Отправлен 
			И Не ЗначениеЗаполнено(ДокументСУЗ.OrderID) Тогда

			Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.Готов;
			
		Иначе
			
			Состояние = Перечисления.СостоянияДокументовСУЗИСМПТК.Черновик;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

#КонецОбласти

#Область РазбитьДокументНаЧасти

#Область ЗаказКМ

Функция РазбитьЗаказКМ(ПараметрыСоздания) Экспорт
	
	СписокЗаказКМ = Новый Массив;
	
	РезультатПроверки = ПроверитьНеобходимостьРазбиенияСтрок(ПараметрыСоздания);
		
	Если Не РезультатПроверки.Отказ Тогда
		
		МассивДанныхДляЗаполнения = ПодготовитьДанныеДляЗаполненияЗаказКМ_РазбиениеСтрок(ПараметрыСоздания, РезультатПроверки);
		
		ПараметрыЗаполненияЗаказКМ = Новый Структура;
		ПараметрыЗаполненияЗаказКМ.Вставить("ФормироватьСписокДокументов", Истина);
		ОбработатьИсходныйДокументЗаказКМ(ПараметрыЗаполненияЗаказКМ, ПараметрыСоздания.МассивДокументовЗаказКМ, МассивДанныхДляЗаполнения, СписокЗаказКМ);
		ЗаполнитьМассивЗаказКМ(ПараметрыЗаполненияЗаказКМ, МассивДанныхДляЗаполнения, СписокЗаказКМ);
		
		Возврат СписокЗаказКМ;
		
	КонецЕсли;
	
	Возврат Неопределено;	
	
КонецФункции

Функция ПроверитьНеобходимостьРазбиенияСтрок(ПараметрыЗаполнения) //Документ СУЗ (Заказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКодовМаркировкиСУЗИСМПТКТовары.Шаблон) КАК Шаблон
	|ИЗ
	|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК.Товары КАК ЗаказКодовМаркировкиСУЗИСМПТКТовары
	|ГДЕ
	|	ЗаказКодовМаркировкиСУЗИСМПТКТовары.Ссылка В(&Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКодовМаркировкиСУЗИСМПТКТовары.GTIN) КАК КоличествоGTIN,
	|	ЗаказКодовМаркировкиСУЗИСМПТКТовары.Шаблон КАК ТоварнаяГруппа
	|ИЗ
	|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК.Товары КАК ЗаказКодовМаркировкиСУЗИСМПТКТовары
	|ГДЕ
	|	ЗаказКодовМаркировкиСУЗИСМПТКТовары.Ссылка В(&Ссылка)
	|	И ЗаказКодовМаркировкиСУЗИСМПТКТовары.Шаблон В(&ШаблоныКМ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКодовМаркировкиСУЗИСМПТКТовары.Шаблон";
	
	Запрос.УстановитьПараметр("Ссылка",	   ПараметрыЗаполнения.МассивДокументовЗаказКМ);
	Запрос.УстановитьПараметр("ШаблоныКМ", МассивДоступныхШаблонов());
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	НужноРазбиватьЗаказПоТГ   = Ложь;
	НужноРазбиватьЗаказПоGTIN = Ложь;
	
	ТаблицаТоварныеГруппы = РезультатЗапроса[0].Выгрузить();
	Если Не ТаблицаТоварныеГруппы.Количество() = 0 Тогда 
		КоличествоТГВЗаказе = ТаблицаТоварныеГруппы[0].Шаблон;
		Если КоличествоТГВЗаказе > 1 Тогда 
			НужноРазбиватьЗаказПоТГ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ВыборкаКоличествоGTIN = РезультатЗапроса[1].Выбрать();
	ТГДляРазбития = Новый Массив();
	Пока ВыборкаКоличествоGTIN.Следующий() Цикл
		//Для фармы предел - 1, для остальных ТГ - 10
		Если (ВыборкаКоличествоGTIN.ТоварнаяГруппа = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты")
			И ВыборкаКоличествоGTIN.КоличествоGTIN > 1)
			ИЛИ (НЕ ВыборкаКоличествоGTIN.ТоварнаяГруппа = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты")
			И ВыборкаКоличествоGTIN.КоличествоGTIN > 10) Тогда
			
			НужноРазбиватьЗаказПоGTIN = Истина;
			ТГДляРазбития.Добавить(ВыборкаКоличествоGTIN.ТоварнаяГруппа);
		КонецЕсли;
	КонецЦикла;
	
	РезультатПроверки = Новый Структура();
	
	Если Не НужноРазбиватьЗаказПоТГ И Не НужноРазбиватьЗаказПоGTIN Тогда
		РезультатПроверки.Вставить("Отказ", Истина);
		ТекстСообщения = НСтр("ru = 'В разбитии документа нет необходимости, лимит не превышен.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	Иначе
		РезультатПроверки.Вставить("Отказ", Ложь);
	КонецЕсли;
		
	РезультатПроверки.Вставить("НужноРазбиватьЗаказПоТГ",   НужноРазбиватьЗаказПоТГ);
	РезультатПроверки.Вставить("НужноРазбиватьЗаказПоGTIN", НужноРазбиватьЗаказПоGTIN);
	РезультатПроверки.Вставить("ТГДляРазбития", 			ТГДляРазбития);
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПодготовитьДанныеДляЗаполненияЗаказКМ_РазбиениеСтрок(ПараметрыЗаполнения, РезультатПроверки) Экспорт
	
	ДанныеДляЗаполнения = Новый Массив;
	
	ТаблицыДанныхДляЗаполненияЗаказаКМ = ПодготовитьТаблицыДанныхДляЗаполненияЗаказКМДляРазбиенияСтрок(ПараметрыЗаполнения.МассивДокументовЗаказКМ, РезультатПроверки);
	Если ТаблицыДанныхДляЗаполненияЗаказаКМ = Неопределено Тогда
		Возврат ДанныеДляЗаполнения;
	КонецЕсли;
	
	//Реквизиты шапки исходного документа
	ТаблицаРеквизитов  = ТаблицыДанныхДляЗаполненияЗаказаКМ.ТаблицаРеквизитов;
	//Товары исходного документа, разбитые на таблица по товарным группам 
	ТаблицаТовары      = ТаблицыДанныхДляЗаполненияЗаказаКМ.ТаблицаТовары;
	//Структура реквизитов пустого документа
	СтруктураДокумента = ИнтеграцияИСМПТКПовтИсп.ПолучитьПустуюСтруктуруДокументаЗаказКодовПриРазбитииНаЧасти();
			
	Реквизиты = СтруктураДокумента.Реквизиты;
	Товары 	  = СтруктураДокумента.Товары;
	
	Для Каждого СтрокаРеквизитов ИЗ ТаблицаРеквизитов Цикл
	
		Реквизиты.Очистить();
				
		НоваяСтрокаРеквизитов = Реквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРеквизитов, СтрокаРеквизитов);
		
		НоваяСтрокаРеквизитов.Дата = СтрокаРеквизитов.Дата;
						
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Ссылка", СтрокаРеквизитов.Ссылка);
		
		Если ТипЗнч(ТаблицаТовары) = Тип("Массив") Тогда
			//Если в исходном документе были заполнены товары по разным ТГ, то в Товарах будет содержаться массив таблиц - по каждой ТГ своя
			Для Каждого ТаблицаТоварыПоТГ Из ТаблицаТовары Цикл
				МассивСтрокТовары = ТаблицаТоварыПоТГ.НайтиСтроки(ПараметрыОтбора);
				Товары.Очистить();
				ПродолжитьРазбитиеНаСтроки(МассивСтрокТовары, СтрокаРеквизитов, Реквизиты, Товары, ДанныеДляЗаполнения);
			КонецЦикла;
		Иначе
			//Для случая, когда все товары по одной ТГ, но их общее количество в документе больше нужного
			МассивСтрокТовары = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
			ПродолжитьРазбитиеНаСтроки(МассивСтрокТовары, СтрокаРеквизитов, Реквизиты, Товары, ДанныеДляЗаполнения);
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

//Для Заказа КМ
//
Процедура ПродолжитьРазбитиеНаСтроки(МассивСтрокТовары, СтрокаРеквизитов, Реквизиты, Товары, ДанныеДляЗаполнения)
	
	НомерСтроки = 0;
	НомерПакета = 1;
	ЕстьТовары	= Ложь;
	
	Если Не Реквизиты.Количество() = 0 Тогда
		ВидПродукции = Реквизиты[0].ВидПродукции;
		Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") Тогда
			МаксНомерСтрокиТЧ = 1;  //максимум товаров в одном документе фармы - 1, это ограничение СУЗ ИС МПТ
		Иначе
			МаксНомерСтрокиТЧ = 10;  //максимум товаров в одном документе 10, это ограничение СУЗ ИС МПТ
		КонецЕсли;
	Иначе
		МаксНомерСтрокиТЧ = 10; //по умолчанию берем универсальное значение (подходит большинству ТГ)
	КонецЕсли;
	
	//Перебираем все строки в исходной ТЧ Товары (в рамках одной ТГ)
	Для Каждого СтрокаМассива Из МассивСтрокТовары Цикл
		
		НоваяСтрокаТЧ = Товары.Добавить();  //Формируем ТЧ для нового документа
		ЕстьТовары 	  = Истина;
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаМассива);
		НомерСтроки = НомерСтроки + 1;
	
		Если НомерСтроки >= МаксНомерСтрокиТЧ Тогда
			//Если товары еще не закончились, но их количество уже больше допустимого, формируем следующий пакет
			ЕстьТовары 	= Ложь;
			НомерСтроки = 0;
			НомерПакета = НомерПакета + 1;
			
			//Сохраняем заполненную таблицу данных
			СтруктураДляПередачи = Новый Структура;
			СтруктураДляПередачи.Вставить("Реквизиты", Реквизиты.Скопировать());
			СтруктураДляПередачи.Вставить("Товары",	   Товары.Скопировать());
			ДанныеДляЗаполнения.Добавить(СтруктураДляПередачи);
			
			//Начинаем заполнение второго пакета
			Реквизиты.Очистить();
			Товары.Очистить();
			
			НоваяСтрокаРеквизитов = Реквизиты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРеквизитов, СтрокаРеквизитов);
			НоваяСтрокаРеквизитов.НомерПакета   = НомерПакета;
			НоваяСтрокаРеквизитов.ЗаказРодитель = СтрокаРеквизитов.Ссылка;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьТовары Тогда 
		СтруктураДляПередачи = Новый Структура;
		СтруктураДляПередачи.Вставить("Реквизиты", Реквизиты.Скопировать());
		СтруктураДляПередачи.Вставить("Товары",    Товары.Скопировать());
		ДанныеДляЗаполнения.Добавить(СтруктураДляПередачи);
	КонецЕсли;
	
КонецПроцедуры
	
Функция ПодготовитьТаблицыДанныхДляЗаполненияЗаказКМДляРазбиенияСтрок(МассивДокументовЗаказКМ, РезультатПроверки) Экспорт

	НужноРазбиватьЗаказПоТГ   = РезультатПроверки.НужноРазбиватьЗаказПоТГ;
	НужноРазбиватьЗаказПоGTIN = РезультатПроверки.НужноРазбиватьЗаказПоGTIN;
	ТГДляРазбития 			  = РезультатПроверки.ТГДляРазбития;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Ссылка КАК Ссылка,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Организация КАК Организация,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.ИдентификаторПроизводственногоЗаказа КАК ИдентификаторПроизводственногоЗаказа,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.ИдентификаторПроизводственнойЛинии КАК ИдентификаторПроизводственнойЛинии,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.ИдентификаторПроизводства КАК ИдентификаторПроизводства,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.СтранаПроизводителя КАК СтранаПроизводителя,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.КодПродукта КАК КодПродукта,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.ОписаниеПродукта КАК ОписаниеПродукта,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.СпособВводаВОборот КАК СпособВводаВОборот,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Комментарий КАК Комментарий,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Ответственный КАК Ответственный,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.КонтактноеЛицо КАК КонтактноеЛицо,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.ВидПродукции КАК ВидПродукции,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.СпособИзготовленияСИ КАК СпособИзготовленияСИ,
	|	&ДатаДокумента КАК Дата,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Статус КАК Статус,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.ДокументОснование КАК ДокументОснование,
	|	1 КАК НомерПакета,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.ВыполненоНанесениеКМ КАК ВыполненоНанесениеКМ
	|ИЗ
	|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК КАК ЗаказКодовМаркировкиСУЗИСМПТК
	|ГДЕ
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Ссылка В(&ЗаказыКМ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Ссылка КАК Ссылка,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Номенклатура КАК Номенклатура,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Характеристика КАК Характеристика,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Упаковка КАК Упаковка,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.GTIN КАК GTIN,
	|	СУММА(ЗаказКодовМаркировкиСУЗИСМПТК.Количество) КАК Количество,
	|	СУММА(ЗаказКодовМаркировкиСУЗИСМПТК.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Шаблон КАК Шаблон,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.СпособФормированияСерийногоНомера КАК СпособФормированияСерийногоНомера,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.СтатусУказанияСерии КАК СтатусУказанияСерии,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.СпособВводаВОборот КАК СпособВводаВОборот
	|ИЗ
	|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК.Товары КАК ЗаказКодовМаркировкиСУЗИСМПТК
	|ГДЕ
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Ссылка В(&ЗаказыКМ)
	|	И ЗаказКодовМаркировкиСУЗИСМПТК.Шаблон В(&ШаблоныКМ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКодовМаркировкиСУЗИСМПТК.GTIN,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.СтатусУказанияСерии,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Упаковка,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.СпособВводаВОборот,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Ссылка,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Характеристика,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.СпособФормированияСерийногоНомера,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Шаблон,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Номенклатура
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(КоличествоУпаковок),
	|	СУММА(СтатусУказанияСерии)
	|ПО
	|	Шаблон";
	
	Запрос.УстановитьПараметр("ЗаказыКМ",  МассивДокументовЗаказКМ);
	Запрос.УстановитьПараметр("ШаблоныКМ", МассивДоступныхШаблонов());
	ДатаДокумента = ТекущаяДатаСеанса();
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
		
	ТаблицыДанныхДляЗаполненияЗаказКМ = Новый Структура;
	ТаблицыДанныхДляЗаполненияЗаказКМ.Вставить("ТаблицаРеквизитов", РезультатЗапроса[0].Выгрузить());
	
	Если НужноРазбиватьЗаказПоТГ Тогда
		МассивТовары = Новый Массив();
		ВыборкаТовары = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаТовары.Следующий() Цикл
			
			ВыборкаТоварыПоТГ = ВыборкаТовары.Выбрать();
			ТаблицаТоварыТГ = Новый ТаблицаЗначений();
			ТаблицаТоварыТГ.Колонки.Добавить("GTIN");
			ТаблицаТоварыТГ.Колонки.Добавить("Номенклатура");
			ТаблицаТоварыТГ.Колонки.Добавить("Характеристика");
			ТаблицаТоварыТГ.Колонки.Добавить("Упаковка");
			ТаблицаТоварыТГ.Колонки.Добавить("Количество");
			ТаблицаТоварыТГ.Колонки.Добавить("КоличествоУпаковок");
			ТаблицаТоварыТГ.Колонки.Добавить("Шаблон");
			ТаблицаТоварыТГ.Колонки.Добавить("СпособВводаВОборот");
			ТаблицаТоварыТГ.Колонки.Добавить("СтатусУказанияСерии");
			ТаблицаТоварыТГ.Колонки.Добавить("СпособФормированияСерийногоНомера");
			ТаблицаТоварыТГ.Колонки.Добавить("Ссылка");
									
			Пока ВыборкаТоварыПоТГ.Следующий() Цикл
				НоваяСтрока = ТаблицаТоварыТГ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТоварыПоТГ);
			КонецЦикла;
			
			МассивТовары.Добавить(ТаблицаТоварыТГ);
			
		КонецЦикла;		
		ТаблицыДанныхДляЗаполненияЗаказКМ.Вставить("ТаблицаТовары", МассивТовары); 
	Иначе
		ТаблицыДанныхДляЗаполненияЗаказКМ.Вставить("ТаблицаТовары", РезультатЗапроса[1].Выгрузить());
	КонецЕсли;
		
	Возврат ТаблицыДанныхДляЗаполненияЗаказКМ;
	
КонецФункции

Функция МассивДоступныхШаблонов() Экспорт
	
	МассивШаблонов = Новый Массив();
	
	Если Константы.ВестиУчетМаркируемойМолочкиИСМПТК.Получить() Тогда
		МассивШаблонов.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.МолочнаяПродукция"));
	КонецЕсли;
	
	Если Константы.ВестиУчетМаркируемогоТекстиляИСМПТК.Получить() Тогда
		МассивШаблонов.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛегкаяПромышленность"));
	КонецЕсли;
	
	Если Константы.ВестиУчетМаркируемойОбувиИСМПТК.Получить() Тогда
		МассивШаблонов.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь"));
	КонецЕсли;
	
	Если Константы.ВестиУчетМаркируемыхЛекарствИСМПТК.Получить() Тогда
		МассивШаблонов.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты"));
	КонецЕсли;
	
	Если Константы.ВестиУчетМаркируемогоТабакаИСМПТК.Получить() Тогда
		МассивШаблонов.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка"));
		МассивШаблонов.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек"));
	КонецЕсли;
	
	Возврат МассивШаблонов;
	
КонецФункции

Функция ОбработатьИсходныйДокументЗаказКМ(ПараметрыСоздания, МассивДокументов, МассивДанныхДляЗаполнения, СписокЗаказКМ)
	
	ИсходныхДокументЗаказКМ 	= МассивДокументов[0];
	ФормироватьСписокДокументов = ПараметрыСоздания.ФормироватьСписокДокументов;
	Отказ = Ложь;
	
	Если ЗначениеЗаполнено(МассивДанныхДляЗаполнения) И МассивДанныхДляЗаполнения.Количество() > 0 Тогда
		
		Попытка
			
			ЭлементМассива = МассивДанныхДляЗаполнения[0];
			ЗаказКМ = ИсходныхДокументЗаказКМ.ПолучитьОбъект();
			//Заполняем табличную часть "Товары"
			ЗаказКМ.Товары.Очистить();
			
			Для Каждого СтрокаТЧ Из ЭлементМассива.Товары Цикл
				НоваяСтрокаТЧ = ЗаказКМ.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
				Если НоваяСтрокаТЧ.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь") Тогда  
					ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная");
				ИначеЕсли НоваяСтрокаТЧ.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.МолочнаяПродукция") Тогда  
					ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция");
				ИначеЕсли НоваяСтрокаТЧ.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛегкаяПромышленность") Тогда  
					ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность");
				ИначеЕсли НоваяСтрокаТЧ.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты") Тогда  
					ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты");
				ИначеЕсли НоваяСтрокаТЧ.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка")
					ИЛИ НоваяСтрокаТЧ.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек") Тогда  
					ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная");
				Иначе
					//Значение по умолчанию
					ВидПродукции = ИнтеграцияИСМПТКВызовСервера.ПолучитьЗначениеПоУмолчаниюДляВидаПродукцииЗаказа();
				КонецЕсли;
			КонецЦикла;
			
			//Проверяем Вид продукции документа и редактируем при необходимости
			ЗаказКМ.ВидПродукции = ВидПродукции;
			ЗаказКМ.Записать(РежимЗаписиДокумента.Запись);
			
		Исключение
			
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриЗаписиДокументаСПараметром()
						   + Символы.ПС
						   + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ЗаказКМ);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецПопытки;
		
		Если ФормироватьСписокДокументов Тогда
			СписокЗаказКМ.Добавить(ЗаказКМ.Ссылка);
		КонецЕсли;
		
		МассивДанныхДляЗаполнения.Удалить(0);
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьМассивЗаказКМ(ПараметрыСоздания, МассивДанныхДляЗаполнения, СписокЗаказКМ)
	
	ФормироватьСписокДокументов = ПараметрыСоздания.ФормироватьСписокДокументов;
	
	Для каждого ЭлементМассива Из МассивДанныхДляЗаполнения Цикл
		
		ЗаказКМ = Документы.ЗаказКодовМаркировкиСУЗИСМПТК.СоздатьДокумент();
		
		//Заполняем шапку документа
		ЗаполнитьЗначенияСвойств(ЗаказКМ, ЭлементМассива.Реквизиты[0]);
			
		//Заполняем табличную часть "Товары"
		Для Каждого СтрокаТЧ Из ЭлементМассива.Товары Цикл
			
			НоваяСтрокаТЧ = ЗаказКМ.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);

			Если НоваяСтрокаТЧ.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь") Тогда  
				ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная");
				
			ИначеЕсли НоваяСтрокаТЧ.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.МолочнаяПродукция") Тогда  
				ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция");
				
			ИначеЕсли НоваяСтрокаТЧ.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты") Тогда  
				ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты");
				
			ИначеЕсли НоваяСтрокаТЧ.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛегкаяПромышленность") Тогда
				ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность");
				
			ИначеЕсли НоваяСтрокаТЧ.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка")
				ИЛИ НоваяСтрокаТЧ.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек") Тогда
				ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная");
			Иначе
				//Значение по умолчанию
				ВидПродукции = ИнтеграцияИСМПТКВызовСервера.ПолучитьЗначениеПоУмолчаниюДляВидаПродукцииЗаказа();
			КонецЕсли;
		КонецЦикла;	
		
		ЗаказКМ.ВидПродукции = ВидПродукции;
		
		Попытка 
			ЗаказКМ.УстановитьВремя();
			ЗаказКМ.УстановитьНовыйНомер();
			ЗаказКМ.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриЗаписиДокументаСПараметром()
						   + Символы.ПС
						   + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ЗаказКМ);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		Если ФормироватьСписокДокументов Тогда
			СписокЗаказКМ.Добавить(ЗаказКМ.Ссылка);
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры	

#КонецОбласти

#Область ДокументыИСМПТ

Функция РазбитьДокументИСМПТ(ПараметрыСоздания, ИмяДокумента) Экспорт
	
	СписокДокументИСМПТ = Новый Массив;
	
	РезультатПроверки = ПроверитьНеобходимостьРазбиенияСтрокДокументИСМПТ(ПараметрыСоздания, ИмяДокумента);
		
	Если Не РезультатПроверки.Отказ Тогда
		
		МассивДанныхДляЗаполнения = ПодготовитьДанныеДляЗаполненияДокумнтИСМПТ_РазбиениеСтрок(ПараметрыСоздания, РезультатПроверки, ИмяДокумента);
		
		ПараметрыЗаполненияДокументИСМПТ = Новый Структура;
		ПараметрыЗаполненияДокументИСМПТ.Вставить("ФормироватьСписокДокументов", Истина);
		ОбработатьИсходныйДокументИСМПТ(ПараметрыЗаполненияДокументИСМПТ, ПараметрыСоздания.МассивДокументовИСМПТ, МассивДанныхДляЗаполнения, СписокДокументИСМПТ, ИмяДокумента);
		ЗаполнитьМассивДокументИСМПТ(ПараметрыЗаполненияДокументИСМПТ, МассивДанныхДляЗаполнения, СписокДокументИСМПТ, ИмяДокумента);
		
		Возврат СписокДокументИСМПТ;
		
	КонецЕсли;
	
	Возврат Неопределено;	
	
КонецФункции

Функция ОбработатьИсходныйДокументИСМПТ(ПараметрыСоздания, МассивДокументов, МассивДанныхДляЗаполнения, СписокДокументИСМПТ, ИмяДокумента)
	
	ИсходныйДокументИСМПТ 	    = МассивДокументов[0];
	ФормироватьСписокДокументов = ПараметрыСоздания.ФормироватьСписокДокументов;
	Отказ = Ложь;
	
	ДокументПоддерживаетПередачуЦенИСМПТ = ПроверитьТипДокументаТребуетПередачуЦенИСМПТ(ИсходныйДокументИСМПТ);
	
	Если ЗначениеЗаполнено(МассивДанныхДляЗаполнения) И МассивДанныхДляЗаполнения.Количество() > 0 Тогда
		
		Попытка
			
			ЭлементМассива = МассивДанныхДляЗаполнения[0];
			ДокументИСМПТ = ИсходныйДокументИСМПТ.ПолучитьОбъект();
			//Заполняем табличную часть "Марки"
			ДокументИСМПТ.Марки.Очистить();
			ТоварнаяГруппа = Неопределено;
			Для Каждого СтрокаТЧ Из ЭлементМассива.Марки Цикл
				НоваяСтрокаТЧ = ДокументИСМПТ.Марки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
				Если Не ЗначениеЗаполнено(ТоварнаяГруппа) Тогда
					ТоварнаяГруппа = СтрокаТЧ.ВидПродукции;
				КонецЕсли;
			КонецЦикла;
			
			Если ЭлементМассива.Свойство("ДокументыСоответствия") Тогда
				ДокументИСМПТ.ДокументыСоответствия.Очистить();
				Для Каждого СтрокаТЧДС Из ЭлементМассива.ДокументыСоответствия Цикл
					НоваяСтрокаТЧДС = ДокументИСМПТ.ДокументыСоответствия.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧДС, СтрокаТЧДС);
				КонецЦикла;
			КонецЕсли;
			
			Если ДокументПоддерживаетПередачуЦенИСМПТ Тогда
				ДокументИСМПТ.ТоварнаяГруппа = ТоварнаяГруппа;
			КонецЕсли;
			
			ДокументИСМПТ.Товары.Очистить();
			Если Не ДокументИСМПТ.Метаданные().ТабличныеЧасти.Найти("Итоги") = Неопределено Тогда
				ДокументИСМПТ.Итоги.Очистить();
			КонецЕсли;
			ДокументИСМПТ.Записать(РежимЗаписиДокумента.Запись);
			
		Исключение
			
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриЗаписиДокументаСПараметром()
						   + Символы.ПС
						   + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументИСМПТ);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецПопытки;
		
		Если ФормироватьСписокДокументов Тогда
			СписокДокументИСМПТ.Добавить(ДокументИСМПТ.Ссылка);
		КонецЕсли;
		
		МассивДанныхДляЗаполнения.Удалить(0);
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьМассивДокументИСМПТ(ПараметрыСоздания, МассивДанныхДляЗаполнения, СписокДокументИСМПТ, ИмяДокумента)
	
	ФормироватьСписокДокументов = ПараметрыСоздания.ФормироватьСписокДокументов;
	
	Для Каждого ЭлементМассива Из МассивДанныхДляЗаполнения Цикл
		
		Если ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК() Тогда
			ДокументИСМПТ = Документы.АктПриемаПередачиИСМПТК.СоздатьДокумент();
		ИначеЕсли ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСМПТК() Тогда
			ДокументИСМПТ = Документы.УведомлениеОВводеВОборотИСМПТК.СоздатьДокумент();
		ИначеЕсли ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСМПТК() Тогда
			ДокументИСМПТ = Документы.УведомлениеОВыводеИзОборотаИСМПТК.СоздатьДокумент();
		ИначеЕсли ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСМПТК() Тогда
			ДокументИСМПТ = Документы.УведомлениеОВвозеИзЕАЭСИСМПТК.СоздатьДокумент();
		ИначеЕсли ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСМПТК() Тогда
			ДокументИСМПТ = Документы.УведомлениеОВвозеИзТретьихСтранИСМПТК.СоздатьДокумент();
		ИначеЕсли ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОбЭкспортеЕАЭСИСМПТК() Тогда
			ДокументИСМПТ = Документы.УведомлениеОбЭкспортеЕАЭСИСМПТК.СоздатьДокумент();
		КонецЕсли;
		
		ДокументПоддерживаетПередачуЦенИСМПТ = ПроверитьТипДокументаТребуетПередачуЦенИСМПТ(ДокументИСМПТ.Ссылка);
		
		//Заполняем шапку документа
		ЗаполнитьЗначенияСвойств(ДокументИСМПТ, ЭлементМассива.Реквизиты[0]);
			
		//Заполняем табличную часть "Марки"
		ТоварнаяГруппа = Неопределено;
		Для Каждого СтрокаТЧ Из ЭлементМассива.Марки Цикл
			НоваяСтрокаТЧ = ДокументИСМПТ.Марки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
			Если Не ЗначениеЗаполнено(ТоварнаяГруппа) Тогда
				ТоварнаяГруппа = СтрокаТЧ.ВидПродукции;
			КонецЕсли;
		КонецЦикла;	
		
		//Заполняем табличную часть "ДокументыСоответствия"
		Если ЭлементМассива.Свойство("ДокументыСоответствия") Тогда
			Для Каждого СтрокаТЧДС Из ЭлементМассива.ДокументыСоответствия Цикл
				НоваяСтрокаТЧДС = ДокументИСМПТ.ДокументыСоответствия.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧДС, СтрокаТЧДС);
			КонецЦикла;
		КонецЕсли;
		
		Если ДокументПоддерживаетПередачуЦенИСМПТ Тогда
			ДокументИСМПТ.ТоварнаяГруппа = ТоварнаяГруппа;	
		КонецЕсли;
		
		Попытка 
			ДокументИСМПТ.УстановитьВремя();
			ДокументИСМПТ.УстановитьНовыйНомер();
			ДокументИСМПТ.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриЗаписиДокументаСПараметром()
						   + Символы.ПС
						   + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументИСМПТ);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		Если ФормироватьСписокДокументов Тогда
			СписокДокументИСМПТ.Добавить(ДокументИСМПТ.Ссылка);
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры	

Функция ПроверитьНеобходимостьРазбиенияСтрокДокументИСМПТ(ПараметрыЗаполнения, ИмяДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДокументИСМПТМарки.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка)
	|			ТОГДА ""Неопределен""
	|		ИНАЧЕ ДокументИСМПТМарки.ВидПродукции
	|	КОНЕЦ КАК ВидПродукции
	|ИЗ
	|	Документ." + ИмяДокумента + ".Марки КАК ДокументИСМПТМарки
	|ГДЕ
	|	ДокументИСМПТМарки.Ссылка В(&Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ДокументИСМПТМарки.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка)
	|			ТОГДА ""Неопределен""
	|		ИНАЧЕ ДокументИСМПТМарки.ВидПродукции
	|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("Ссылка", ПараметрыЗаполнения.МассивДокументовИСМПТ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЕстьПустаяТГ = Ложь;
	РезультатПроверки = Новый Структура();
	ПроверкаПройдена = Ложь;
	
	Если Выборка.Количество() = 1 Тогда 
		Если Выборка.ВидПродукции = "Неопределен" Тогда
			//Сразу отказываем в разбиении
			РезультатПроверки.Вставить("Отказ", Истина);
			ТекстСообщения = НСтр("ru = 'Невозможно разбить документ: у некоторых кодов в таблице не определен вид продукции. Выполните уточнение данных GTIN и номенклатуры.'");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			РезультатПроверки.Вставить("НужноРазбиватьЗаказПоТГ", Ложь);
		Иначе
			//Разбивать по ТГ не нужно, сообщаем, что ТГ одна
			РезультатПроверки.Вставить("Отказ", Истина);
			ТекстСообщения = НСтр("ru = 'Невозможно разбить документ: все коды относятся к одной товарной группе.'");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			РезультатПроверки.Вставить("НужноРазбиватьЗаказПоТГ", Ложь);
		КонецЕсли;
	Иначе
		//Нужно проверить, есть ли среди ТГ пустая
		Пока Выборка.Следующий() Цикл
			Если Выборка.ВидПродукции = "Неопределен" Тогда
				РезультатПроверки.Вставить("Отказ", Истина);
				ТекстСообщения = НСтр("ru = 'Невозможно разбить документ: у некоторых кодов в таблице не определен вид продукции. Выполните уточнение данных GTIN и номенклатуры.'");
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				РезультатПроверки.Вставить("НужноРазбиватьЗаказПоТГ", Ложь);
				ПроверкаПройдена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ПроверкаПройдена Тогда	
			//Разбивать по ТГ нужно, т.к. их больше 1 и пустой среди них нет
			РезультатПроверки.Вставить("Отказ", Ложь);
			РезультатПроверки.Вставить("НужноРазбиватьЗаказПоТГ", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПодготовитьДанныеДляЗаполненияДокумнтИСМПТ_РазбиениеСтрок(ПараметрыЗаполнения, РезультатПроверки, ИмяДокумента) Экспорт
	
	ДанныеДляЗаполнения = Новый Массив;
	
	ТаблицыДанныхДляЗаполненияДокументИСМПТ = ПодготовитьТаблицыДанныхДляЗаполненияДокументИСМПТДляРазбиенияСтрок(ПараметрыЗаполнения.МассивДокументовИСМПТ, РезультатПроверки, ИмяДокумента);
	Если ТаблицыДанныхДляЗаполненияДокументИСМПТ = Неопределено Тогда
		Возврат ДанныеДляЗаполнения;
	КонецЕсли;
	
	//Реквизиты шапки исходного документа
	ТаблицаРеквизитов = ТаблицыДанныхДляЗаполненияДокументИСМПТ.ТаблицаРеквизитов;
	//Марки исходного документа, разбитые на таблицы по товарным группам 
	ТаблицаМарки = ТаблицыДанныхДляЗаполненияДокументИСМПТ.ТаблицаМарки;
	////Товары исходного документа, разбитые по ТГ (данные документа-основания)
	//ТаблицаТовары = ТаблицыДанныхДляЗаполненияДокументИСМПТ.ТаблицаТовары;
	//Дополнительная ТЧ в некоторых документах
	ТаблицаДокументыСоответствия = ТаблицыДанныхДляЗаполненияДокументИСМПТ.ТаблицаДокументыСоответствия;
	
	//Структура реквизитов пустого документа
	СтруктураДокумента = ИнтеграцияИСМПТКПовтИсп.ПолучитьПустуюСтруктуруДокументаИСМПТПриРазбитииНаЧасти(ИмяДокумента);
			
	Реквизиты = СтруктураДокумента.Реквизиты;
	Марки 	  = СтруктураДокумента.Марки;
	//Товары 	  = ?(ТаблицаТовары = Неопределено, Неопределено, СтруктураДокумента.Товары);
	ДокументыСоответствия = ?(ТаблицаДокументыСоответствия = Неопределено, Неопределено, СтруктураДокумента.ДокументыСоответствия);
	
	//НужныТовары = Товары <> Неопределено;
	НужныДокументыСоответствия = ДокументыСоответствия <> Неопределено;
	
	Для Каждого СтрокаРеквизитов ИЗ ТаблицаРеквизитов Цикл
		
		//Реквизиты шапки
		Реквизиты.Очистить();
		НоваяСтрокаРеквизитов = Реквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРеквизитов, СтрокаРеквизитов);
		НоваяСтрокаРеквизитов.Дата = СтрокаРеквизитов.Дата;
		
		//Документы соответствия
		Если Не ДокументыСоответствия = Неопределено Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Ссылка", СтрокаРеквизитов.Ссылка);
			
			Если ТипЗнч(ТаблицаДокументыСоответствия) = Тип("Массив") Тогда
				Для Каждого ТаблицаДокСоотв Из ТаблицаДокументыСоответствия Цикл
					
					МассивСтрокДокСоотв = ТаблицаДокСоотв.НайтиСтроки(ПараметрыОтбора);
					ДокументыСоответствия.Очистить();
					
					Для Каждого СтрокаМассива Из МассивСтрокДокСоотв Цикл
						НоваяСтрокаТЧ = ДокументыСоответствия.Добавить();  
						ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаМассива);
					КонецЦикла;
					
				КонецЦикла; 
			КонецЕсли;
			
		КонецЕсли;

		//ТЧ Марки
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Ссылка", СтрокаРеквизитов.Ссылка);
		
		Если ТипЗнч(ТаблицаМарки) = Тип("Массив") Тогда
			Для Каждого ТаблицаМаркиТГ Из ТаблицаМарки Цикл
				
				МассивСтрокМарки = ТаблицаМаркиТГ.НайтиСтроки(ПараметрыОтбора);
				Марки.Очистить();
				
				Для Каждого СтрокаМассива Из МассивСтрокМарки Цикл
					НоваяСтрокаТЧ = Марки.Добавить();  //Формируем ТЧ для нового документа
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаМассива);
				КонецЦикла;
				
				////ТЧ Товары
				//ПараметрыОтбораТовары = Новый Структура;
				//ПараметрыОтбораТовары.Вставить("Ссылка", СтрокаРеквизитов.Ссылка);
				//ПараметрыОтбораТовары.Вставить("ВидПродукции", СтрокаМассива.ВидПродукции);				
				//
				//Если ТипЗнч(ТаблицаТовары) = Тип("Массив") Тогда
				//	Для Каждого ТаблицаТоварыТГ Из ТаблицаТовары Цикл
				//		
				//		МассивСтрокТовары = ТаблицаТоварыТГ.НайтиСтроки(ПараметрыОтбораТовары);
				//		Товары.Очистить();
				//		
				//		Для Каждого СтрокаМассиваТовары Из МассивСтрокТовары Цикл
				//			НоваяСтрокаТЧТовары = Товары.Добавить();
				//			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧТовары, СтрокаМассиваТовары);
				//		КонецЦикла;
				//
				//	КонецЦикла; 
				//КонецЕсли;
				
				//Итоговая структура для передачи
				СтруктураДляПередачи = Новый Структура;
				СтруктураДляПередачи.Вставить("Реквизиты",  Реквизиты.Скопировать());
				СтруктураДляПередачи.Вставить("Марки",      Марки.Скопировать());
				//Если НужныТовары Тогда 
				//	СтруктураДляПередачи.Вставить("Товары", Товары.Скопировать());
				//КонецЕсли;
				Если НужныДокументыСоответствия Тогда
					СтруктураДляПередачи.Вставить("ДокументыСоответствия", ДокументыСоответствия.Скопировать());
				КонецЕсли;
				ДанныеДляЗаполнения.Добавить(СтруктураДляПередачи);
								
			КонецЦикла; 
		КонецЕсли;
				
	КонецЦикла;	
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьТаблицыДанныхДляЗаполненияДокументИСМПТДляРазбиенияСтрок(МассивДокументовИСМП, РезультатПроверки, ИмяДокумента) Экспорт

	НужноРазбиватьЗаказПоТГ = РезультатПроверки.НужноРазбиватьЗаказПоТГ;
	Запрос = Новый Запрос;
	ТекстРеквизиты = "";
	ТекстДополнительныйЗапросТаблица = "";
	НуженДополнительныйЗапрос = Ложь;
	НуженЗапросПоТоварам = Истина;
	
	Если ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК() Тогда
		#Область ТекстАктПриемаПередачиИСМПТК
		ТекстРеквизиты = "ВЫБРАТЬ
		|	АктПриемаПередачиИСМПТК.Ссылка КАК Ссылка,
		|	АктПриемаПередачиИСМПТК.Организация КАК Организация,
		|	АктПриемаПередачиИСМПТК.Комментарий КАК Комментарий,
		|	&ДатаДокумента КАК Дата,
		|	АктПриемаПередачиИСМПТК.Статус КАК Статус,
		|	АктПриемаПередачиИСМПТК.ДокументОснование КАК ДокументОснование,
		|	1 КАК НомерПакета,
		|	АктПриемаПередачиИСМПТК.Контрагент КАК Контрагент,
		|	АктПриемаПередачиИСМПТК.ВидОперации КАК ВидОперации,
		|	АктПриемаПередачиИСМПТК.ТипАкта КАК ТипАкта,
		|	АктПриемаПередачиИСМПТК.ЭтоКорректировка КАК ЭтоКорректировка,
		|	АктПриемаПередачиИСМПТК.Направление КАК Направление,
		|	АктПриемаПередачиИСМПТК.ИдентификаторУведОРасхождениях КАК ИдентификаторУведОРасхождениях,
		|	АктПриемаПередачиИСМПТК.ИдентификаторАППИсправленный КАК ИдентификаторАППИсправленный,
		|	АктПриемаПередачиИСМПТК.РегистрационныйНомерСвязанногоАкта КАК РегистрационныйНомерСвязанногоАкта,
		|	АктПриемаПередачиИСМПТК.Поставщик КАК Поставщик,
		|	АктПриемаПередачиИСМПТК.ПоставщикНаименование КАК ПоставщикНаименование,
		|	АктПриемаПередачиИСМПТК.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
		|	АктПриемаПередачиИСМПТК.Получатель КАК Получатель,
		|	АктПриемаПередачиИСМПТК.ПолучательНаименование КАК ПолучательНаименование,
		|	АктПриемаПередачиИСМПТК.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
		|	АктПриемаПередачиИСМПТК.РегНомерНаБумажномНосителе КАК РегНомерНаБумажномНосителе,
		|	АктПриемаПередачиИСМПТК.ДатаВыпискиНаБумажномНосителе КАК ДатаВыпискиНаБумажномНосителе,
		|	АктПриемаПередачиИСМПТК.Автор КАК Автор,
		|	АктПриемаПередачиИСМПТК.Проверен КАК Проверен
		|ИЗ
		|	Документ.АктПриемаПередачиИСМПТК КАК АктПриемаПередачиИСМПТК
		|ГДЕ
		|	АктПриемаПередачиИСМПТК.Ссылка В(&ДокументыИСМП)
		|;";
		#КонецОбласти
	ИначеЕсли ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСМПТК() Тогда
		#Область ТекстУведомлениеОВводеВОборотИСМПТК
		ТекстРеквизиты = "ВЫБРАТЬ
		|	УведомлениеОВводеВОборотИСМПТК.Ссылка КАК Ссылка,
		|	УведомлениеОВводеВОборотИСМПТК.Организация КАК Организация,
		|	УведомлениеОВводеВОборотИСМПТК.Комментарий КАК Комментарий,
		|	&ДатаДокумента КАК Дата,
		|	УведомлениеОВводеВОборотИСМПТК.Статус КАК Статус,
		|	УведомлениеОВводеВОборотИСМПТК.ДокументОснование КАК ДокументОснование,
		|	1 КАК НомерПакета,
		|	УведомлениеОВводеВОборотИСМПТК.Направление КАК Направление,
		|	УведомлениеОВводеВОборотИСМПТК.Поставщик КАК Поставщик,
		|	УведомлениеОВводеВОборотИСМПТК.ПоставщикНаименование КАК ПоставщикНаименование,
		|	УведомлениеОВводеВОборотИСМПТК.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
		|	УведомлениеОВводеВОборотИСМПТК.Автор КАК Автор,
		|	УведомлениеОВводеВОборотИСМПТК.Состояние КАК Состояние,
		|	УведомлениеОВводеВОборотИСМПТК.ПричинаВводаВОборот КАК ПричинаВводаВОборот
		|ИЗ
		|	Документ.УведомлениеОВводеВОборотИСМПТК КАК УведомлениеОВводеВОборотИСМПТК
		|ГДЕ
		|	УведомлениеОВводеВОборотИСМПТК.Ссылка В(&ДокументыИСМП)
		|;";
		#КонецОбласти
	 ИначеЕсли ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСМПТК() Тогда
		#Область ТекстУведомлениеОВыводеИзОборотаИСМПТК
		ТекстРеквизиты = "ВЫБРАТЬ
		|	УведомлениеОВыводеИзОборотаИСМПТК.Ссылка КАК Ссылка,
		|	УведомлениеОВыводеИзОборотаИСМПТК.Организация КАК Организация,
		|	УведомлениеОВыводеИзОборотаИСМПТК.Комментарий КАК Комментарий,
		|	&ДатаДокумента КАК Дата,
		|	УведомлениеОВыводеИзОборотаИСМПТК.Статус КАК Статус,
		|	УведомлениеОВыводеИзОборотаИСМПТК.ДокументОснование КАК ДокументОснование,
		|	1 КАК НомерПакета,
		|	УведомлениеОВыводеИзОборотаИСМПТК.Направление КАК Направление,
		|	УведомлениеОВыводеИзОборотаИСМПТК.Поставщик КАК Поставщик,
		|	УведомлениеОВыводеИзОборотаИСМПТК.ПоставщикНаименование КАК ПоставщикНаименование,
		|	УведомлениеОВыводеИзОборотаИСМПТК.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
		|	УведомлениеОВыводеИзОборотаИСМПТК.Автор КАК Автор,
		|	УведомлениеОВыводеИзОборотаИСМПТК.Состояние КАК Состояние,
		|	УведомлениеОВыводеИзОборотаИСМПТК.ПричинаВыводаИзОборота КАК ПричинаВыводаИзОборота
		|ИЗ
		|	Документ.УведомлениеОВыводеИзОборотаИСМПТК КАК УведомлениеОВыводеИзОборотаИСМПТК
		|ГДЕ
		|	УведомлениеОВыводеИзОборотаИСМПТК.Ссылка В(&ДокументыИСМП)
		|;";
		#КонецОбласти
	ИначеЕсли ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСМПТК() Тогда
		#Область ТекстУведомлениеОВвозеИзЕАЭСИСМПТК
		ТекстРеквизиты = "ВЫБРАТЬ
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.Ссылка КАК Ссылка,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.Организация КАК Организация,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.Комментарий КАК Комментарий,
		|	&ДатаДокумента КАК Дата,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.Статус КАК Статус,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.ДокументОснование КАК ДокументОснование,
		|	1 КАК НомерПакета,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.Направление КАК Направление,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.Поставщик КАК Поставщик,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.ПоставщикНаименование КАК ПоставщикНаименование,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.Автор КАК Автор,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.Состояние КАК Состояние,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.ТипУведомления КАК ТипУведомления,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.ЭтоКорректировка КАК ЭтоКорректировка,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.ИдентификаторВвозПервичный КАК ИдентификаторВвозПервичный,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.ИдентификаторВвозИсправленный КАК ИдентификаторВвозИсправленный,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.РегистрационныйНомерСвязанногоУведомления КАК РегистрационныйНомерСвязанногоУведомления,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.ДатаСвязанногоУведомления КАК ДатаСвязанногоУведомления,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.ДатаВыпискиНаБумажномНосителе КАК ДатаВыпискиНаБумажномНосителе,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.РегНомерНаБумажномНосителе КАК РегНомерНаБумажномНосителе,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.Получатель КАК Получатель,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.ПолучательНаименование КАК ПолучательНаименование,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.СтранаОтправления КАК СтранаОтправления,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.ДатаУплатыАкциза КАК ДатаУплатыАкциза,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.НомерКвитанцииАкциза КАК НомерКвитанцииАкциза,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.СуммаАкциза КАК СуммаАкциза,
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.Контрагент КАК Контрагент
		|ИЗ
		|	Документ.УведомлениеОВвозеИзЕАЭСИСМПТК КАК УведомлениеОВвозеИзЕАЭСИСМПТК
		|ГДЕ
		|	УведомлениеОВвозеИзЕАЭСИСМПТК.Ссылка В(&ДокументыИСМП)
		|;";
		
		НуженДополнительныйЗапрос = Истина;
		#КонецОбласти
	ИначеЕсли ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСМПТК() Тогда
		#Область ТекстУведомлениеОВвозеИзТретьихСтранИСМПТК
		ТекстРеквизиты = "ВЫБРАТЬ
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Ссылка КАК Ссылка,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Организация КАК Организация,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Комментарий КАК Комментарий,
		|	&ДатаДокумента КАК Дата,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Статус КАК Статус,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.ДокументОснование КАК ДокументОснование,
		|	1 КАК НомерПакета,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Направление КАК Направление,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Автор КАК Автор,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Состояние КАК Состояние,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.ДатаВыпискиНаБумажномНосителе КАК ДатаВыпискиНаБумажномНосителе,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.РегНомерНаБумажномНосителе КАК РегНомерНаБумажномНосителе,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Получатель КАК Получатель,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.ПолучательНаименование КАК ПолучательНаименование,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.ТипДокументаТаможенногоОформления КАК ТипДокументаТаможенногоОформления,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.СтранаОтправления КАК СтранаОтправления,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.НомерДокументаТаможенногоОформления КАК НомерДокументаТаможенногоОформления,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.ДатаДокументаТаможенногоОформления КАК ДатаДокументаТаможенногоОформления,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.КодТаможенногоОргана КАК КодТаможенногоОргана,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.КодРешенияТаможенногоОргана КАК КодРешенияТаможенногоОргана,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.ТоварнаяГруппа КАК ТоварнаяГруппа,
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.ДатаВремяПринятияРешения КАК ДатаВремяПринятияРешения
		|ИЗ
		|	Документ.УведомлениеОВвозеИзТретьихСтранИСМПТК КАК УведомлениеОВвозеИзТретьихСтранИСМПТК
		|ГДЕ
		|	УведомлениеОВвозеИзТретьихСтранИСМПТК.Ссылка В(&ДокументыИСМП)
		|;";
		
		НуженДополнительныйЗапрос = Истина;
		НуженЗапросПоТоварам = Ложь;
		#КонецОбласти
	ИначеЕсли ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОбЭкспортеЕАЭСИСМПТК() Тогда
		#Область ТекстУведомлениеОбЭкспортеЕАЭСИСМПТК
		ТекстРеквизиты = "ВЫБРАТЬ
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Ссылка КАК Ссылка,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Организация КАК Организация,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Комментарий КАК Комментарий,
		|	&ДатаДокумента КАК Дата,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Статус КАК Статус,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.ДокументОснование КАК ДокументОснование,
		|	1 КАК НомерПакета,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Поставщик КАК Поставщик,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.ПоставщикНаименование КАК ПоставщикНаименование,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Автор КАК Автор,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Состояние КАК Состояние,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.ТоварнаяГруппа КАК ТоварнаяГруппа,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Контрагент КАК Контрагент,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Получатель КАК Получатель,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.ПолучательНаименование КАК ПолучательНаименование,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.СтранаПолучатель КАК СтранаПолучатель,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.НомерДокументаТрансграна КАК НомерДокументаТрансграна,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.ДатаДокументаТрансграна КАК ДатаДокументаТрансграна,
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.ДатаВремяОтгрузки КАК ДатаВремяОтгрузки
		|ИЗ
		|	Документ.УведомлениеОбЭкспортеЕАЭСИСМПТК КАК УведомлениеОбЭкспортеЕАЭСИСМПТК
		|ГДЕ
		|	УведомлениеОбЭкспортеЕАЭСИСМПТК.Ссылка В(&ДокументыИСМП)
		|;";
		
		ТекстДополнительныйЗапросТаблица = ""; //У Экспорта иная структура связи, потребуется свой запрос
		#КонецОбласти
	КонецЕсли;
	
	#Область ТекстТаблицаМарки
	ТекстТаблицаМарки = "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументИСМПТМарки.Ссылка КАК Ссылка,
	|	ДокументИСМПТМарки.КодМаркировки КАК КодМаркировки,
	|	ДокументИСМПТМарки.ВидУпаковки КАК ВидУпаковки,
	|	ДокументИСМПТМарки.Количество КАК Количество,
	|	ДокументИСМПТМарки.КоличествоИсточник КАК КоличествоИсточник,
	|	ДокументИСМПТМарки.GTIN КАК GTIN,
	|	ДокументИСМПТМарки.Номенклатура КАК Номенклатура,
	|	ДокументИСМПТМарки.EAN КАК EAN,
	|	ДокументИСМПТМарки.КодИдентификации КАК КодИдентификации,
	|	ДокументИСМПТМарки.ВидПродукции КАК ВидПродукции,
	|	ДокументИСМПТМарки.GTINВерхнегоУровня КАК GTINВерхнегоУровня
	|ИЗ
	|	Документ." + ИмяДокумента + ".Марки КАК ДокументИСМПТМарки
	|ГДЕ
	|	ДокументИСМПТМарки.Ссылка В(&ДокументыИСМП)
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	ВидПродукции";
	#КонецОбласти
	
	#Область ТекстДополнительныйЗапросТаблица
	Если НуженДополнительныйЗапрос Тогда 
		ТекстДополнительныйЗапросТаблица = "
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументИСМПТДокументыСоответствия.Ссылка КАК Ссылка,
		|	ДокументИСМПТДокументыСоответствия.ТипДокумента КАК ТипДокумента,
		|	ДокументИСМПТДокументыСоответствия.ДатаДокумента КАК ДатаДокумента,
		|	ДокументИСМПТДокументыСоответствия.НомерДокумента КАК НомерДокумента
		|ИЗ
		|	Документ." + ИмяДокумента + ".ДокументыСоответствия КАК ДокументИСМПТДокументыСоответствия
		|ГДЕ
		|	ДокументИСМПТДокументыСоответствия.Ссылка В(&ДокументыИСМП)";
	КонецЕсли;
	#КонецОбласти
	
	Запрос.Текст = ТекстРеквизиты + ТекстТаблицаМарки + ТекстДополнительныйЗапросТаблица;
	Запрос.УстановитьПараметр("ДокументыИСМП", МассивДокументовИСМП);
	ДатаДокумента = ТекущаяДатаСеанса();
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
		
	ТаблицыДанныхДляЗаполненияДокументИСМПТ = Новый Структура;
	ТаблицыДанныхДляЗаполненияДокументИСМПТ.Вставить("ТаблицаРеквизитов", РезультатЗапроса[0].Выгрузить());
	
	Если НужноРазбиватьЗаказПоТГ Тогда
		МассивМарки = Новый Массив();
		ВыборкаМарки = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаМарки.Следующий() Цикл
			
			ВыборкаМаркиПоТГ = ВыборкаМарки.Выбрать();
			
			ТаблицаМарки = Новый ТаблицаЗначений();
			ТаблицаМарки.Колонки.Добавить("КодМаркировки");
			ТаблицаМарки.Колонки.Добавить("ВидУпаковки");
			ТаблицаМарки.Колонки.Добавить("Количество");
			ТаблицаМарки.Колонки.Добавить("КоличествоИсточник");
			ТаблицаМарки.Колонки.Добавить("GTIN");
			ТаблицаМарки.Колонки.Добавить("Номенклатура");
			ТаблицаМарки.Колонки.Добавить("EAN");
			ТаблицаМарки.Колонки.Добавить("КодИдентификации");
			ТаблицаМарки.Колонки.Добавить("ВидПродукции");
			ТаблицаМарки.Колонки.Добавить("GTINВерхнегоУровня");
			ТаблицаМарки.Колонки.Добавить("Ссылка");
			
			Пока ВыборкаМаркиПоТГ.Следующий() Цикл
				НоваяСтрока = ТаблицаМарки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаМаркиПоТГ);
			КонецЦикла;
			
			МассивМарки.Добавить(ТаблицаМарки);
			
		КонецЦикла;		
		ТаблицыДанныхДляЗаполненияДокументИСМПТ.Вставить("ТаблицаМарки", МассивМарки); 
	Иначе
		ТаблицыДанныхДляЗаполненияДокументИСМПТ.Вставить("ТаблицаМарки", РезультатЗапроса[1].Выгрузить());
	КонецЕсли;
	
	Если НуженДополнительныйЗапрос Тогда
		МассивДокументыСоответствия  = Новый Массив();
		ВыборкаДокументыСоответствия = РезультатЗапроса[2].Выбрать();
		Пока ВыборкаДокументыСоответствия.Следующий() Цикл
			
			ТаблицаДС = Новый ТаблицаЗначений();
			ТаблицаДС.Колонки.Добавить("ТипДокумента");
			ТаблицаДС.Колонки.Добавить("ДатаДокумента");
			ТаблицаДС.Колонки.Добавить("НомерДокумента");
			ТаблицаДС.Колонки.Добавить("Ссылка");
									
			НоваяСтрока = ТаблицаДС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДокументыСоответствия);
			МассивДокументыСоответствия.Добавить(ТаблицаДС);
			
		КонецЦикла;		
		ТаблицыДанныхДляЗаполненияДокументИСМПТ.Вставить("ТаблицаДокументыСоответствия", МассивДокументыСоответствия);
	Иначе
		ТаблицыДанныхДляЗаполненияДокументИСМПТ.Вставить("ТаблицаДокументыСоответствия", Неопределено);		
	КонецЕсли;
	
	Возврат ТаблицыДанныхДляЗаполненияДокументИСМПТ;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

Функция КорректныйФорматИИНБИН(ИИНБИН)
	
	Результат = ЗначениеЗаполнено(ИИНБИН)
		И (СтрДлина(ИИНБИН) = 10 ИЛИ СтрДлина(ИИНБИН) = 12)
		И ОбщегоНазначенияИСМПТККлиентСервер.ТолькоЦифрыВСтроке(ИИНБИН);
		
	Возврат Результат;
	
КонецФункции

Функция ПроверитьНепроведенныеПервичныеДокументы(МассивПервичныхДокументов) Экспорт
	
	НепроведенныеПервичныеДокументы = Новый Массив();
	
	Для Каждого Документ Из МассивПервичныхДокументов Цикл
		
		Если Не ЗначениеЗаполнено(Документ.Ссылка)
			Или Не Документ.Проведен Тогда
			НепроведенныеПервичныеДокументы.Добавить(Документ);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НепроведенныеПервичныеДокументы;
	
КонецФункции

#КонецОбласти

#Область ГрупповоеСозданиеДокументов

#Область НанесениеКМ

Функция СформироватьГруппуНанесений(ЗаказКМ) Экспорт
	
	МассивДанныхДляЗаполнения = ПодготовитьДанныеДляЗаполненияГруппаНанесений(ЗаказКМ);
	СписокНанесенияКМ = Новый Массив();
	
	Для Каждого СформированныеДанные Из МассивДанныхДляЗаполнения Цикл
		
		Нанесение = Документы.НанесениеКодовМаркировкиСУЗИСМПТК.СоздатьДокумент();
		
		//Заполняем шапку документа
		ЗаполнитьЗначенияСвойств(Нанесение, СформированныеДанные.Реквизиты[0]);
		Нанесение.ТипИспользования = ПредопределенноеЗначение("Перечисление.ТипыИспользованияСУЗИСМПТК.НанесениеПодтверждено");
		Нанесение.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОтчетовСУЗИСМПТК.Черновик");
		
		//Заполняем табличную часть "Товары"
		Для Каждого СтрокаТЧ Из СформированныеДанные.Товары Цикл
			
			НоваяСтрокаТЧ = Нанесение.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
								
		КонецЦикла;
		
		Попытка 
			Нанесение.Дата = ТекущаяДатаСеанса();
			Нанесение.УстановитьВремя();
			Нанесение.УстановитьНовыйНомер();
			Нанесение.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриЗаписиДокументаСПараметром()
						   + Символы.ПС
						   + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Нанесение);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		СписокНанесенияКМ.Добавить(Нанесение.Ссылка);
		
	КонецЦикла;
	
	ТекстЗаголовка = НСтр("ru = 'Сформированные %НаименованияДокументов%'");
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НаименованияДокументов%", Метаданные.Документы.НанесениеКодовМаркировкиСУЗИСМПТК.ПредставлениеСписка);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",	 Новый Структура("Ссылка", Новый ФиксированныйМассив(СписокНанесенияКМ)));
	ПараметрыФормы.Вставить("Заголовок", ТекстЗаголовка);
	
	Возврат ПараметрыФормы;
		
КонецФункции

Функция ПодготовитьДанныеДляЗаполненияГруппаНанесений(ЗаказКМ) Экспорт
	
	МассивДокументовЗаказКМ = Новый Массив();
	МассивДокументовЗаказКМ.Добавить(ЗаказКМ);
	
	ДанныеДляЗаполнения = Новый Массив();
	
	ТаблицыДанныхДляЗаполнения = ПодготовитьТаблицыДанныхДляЗаполненияГруппыНанесенийКМ(МассивДокументовЗаказКМ);
	
	//Реквизиты шапки исходного документа
	ТаблицаРеквизитов  = ТаблицыДанныхДляЗаполнения.ТаблицаРеквизитов;
	//Товары исходного документа, разбитые на таблица по товарным группам 
	ТаблицаТовары      = ТаблицыДанныхДляЗаполнения.ТаблицаТовары;
	//Структура реквизитов пустого документа
	СтруктураДокумента = ИнтеграцияИСМПТКПовтИсп.ПолучитьПустуюСтруктуруДокументаНанесениеКодов();
			
	Реквизиты = СтруктураДокумента.Реквизиты;
	Товары 	  = СтруктураДокумента.Товары;
	
	НоваяСтрокаРеквизитов = Реквизиты.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрокаРеквизитов, ТаблицаРеквизитов);
	
	ПараметрыОтбора = Новый Структура("ЗаказКМ", ЗаказКМ);
	МассивСтрокТовары = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
	ПродолжитьРазбитиеДляНанесения(МассивСтрокТовары, Реквизиты, Товары, ДанныеДляЗаполнения);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьТаблицыДанныхДляЗаполненияГруппыНанесенийКМ(МассивДокументовЗаказКМ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Ссылка КАК Ссылка,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Организация КАК Организация,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.ВидПродукции КАК ВидПродукции,
	|	ЗаказКодовМаркировкиСУЗИСМПТК.ИдентификаторПроизводственнойЛинии КАК ИдентификаторПроизводственнойЛинии
	|ИЗ
	|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК КАК ЗаказКодовМаркировкиСУЗИСМПТК
	|ГДЕ
	|	ЗаказКодовМаркировкиСУЗИСМПТК.Ссылка В (&ЗаказНаЭмиссию)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПулКодовМаркировкиСУЗИСМПТК.Номенклатура КАК Номенклатура,
	|	ПулКодовМаркировкиСУЗИСМПТК.Характеристика КАК Характеристика,
	|	ПулКодовМаркировкиСУЗИСМПТК.GTIN КАК GTIN,
	|	ПулКодовМаркировкиСУЗИСМПТК.КодИдентификации КАК КодИдентификации,
	|	ПулКодовМаркировкиСУЗИСМПТК.КодМаркировки КАК КодМаркировки,
	|	ПулКодовМаркировкиСУЗИСМПТК.ЗаказНаЭмиссию КАК ЗаказКМ
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗИСМПТК КАК ПулКодовМаркировкиСУЗИСМПТК
	|ГДЕ
	|	ПулКодовМаркировкиСУЗИСМПТК.ЗаказНаЭмиссию В (&ЗаказНаЭмиссию)";
	
	Запрос.УстановитьПараметр("ЗаказНаЭмиссию", МассивДокументовЗаказКМ);
	
	ДатаДокумента = ТекущаяДатаСеанса();
	Ответственный = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь();
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
		
	ТаблицаРеквизитовНанесения = Новый Структура();
	ВыборкаРеквизиты = РезультатЗапроса[0].Выбрать();
	Пока ВыборкаРеквизиты.Следующий() Цикл
		ТаблицаРеквизитовНанесения.Вставить("Организация",   ВыборкаРеквизиты.Организация);
		ТаблицаРеквизитовНанесения.Вставить("ВидПродукции",  ВыборкаРеквизиты.ВидПродукции);
		ТаблицаРеквизитовНанесения.Вставить("ИдентификаторПроизводственнойЛинии", ВыборкаРеквизиты.ИдентификаторПроизводственнойЛинии);
		ТаблицаРеквизитовНанесения.Вставить("ДокументОснование", ВыборкаРеквизиты.Ссылка);
		ТаблицаРеквизитовНанесения.Вставить("Ответственный", Ответственный);
		ТаблицаРеквизитовНанесения.Вставить("Дата", 		 ДатаДокумента);
	КонецЦикла;
	
	ТаблицыДанныхДляЗаполненияГруппыДокументов = Новый Структура();
	ТаблицыДанныхДляЗаполненияГруппыДокументов.Вставить("ТаблицаРеквизитов", ТаблицаРеквизитовНанесения);
		
	МассивТовары = Новый Массив();
	ВыборкаТовары = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТаблицыДанныхДляЗаполненияГруппыДокументов.Вставить("ТаблицаТовары", РезультатЗапроса[1].Выгрузить());
			
	Возврат ТаблицыДанныхДляЗаполненияГруппыДокументов;
	
КонецФункции

Процедура ПродолжитьРазбитиеДляНанесения(МассивСтрокТовары, Реквизиты, Товары, ДанныеДляЗаполнения)
	
	НомерСтроки = 0;
	НомерПакета = 1;
	ЕстьТовары	= Ложь;
	
	МаксНомерСтрокиТЧ = 30000; //ограничение по АПИ для Нанесения
	
	//Перебираем все строки в исходной ТЧ Товары
	Для Каждого СтрокаМассива Из МассивСтрокТовары Цикл
		
		НоваяСтрокаТЧ = Товары.Добавить();  //Формируем ТЧ для нового документа
		ЕстьТовары 	  = Истина;
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаМассива);
		НомерСтроки = НомерСтроки + 1;
	
		Если НомерСтроки >= МаксНомерСтрокиТЧ Тогда
			//Если товары еще не закончились, но их количество уже больше допустимого, формируем следующий пакет
			ЕстьТовары 	= Ложь;
			НомерСтроки = 0;
			НомерПакета = НомерПакета + 1;
			
			//Сохраняем заполненную таблицу данных
			СтруктураДляПередачи = Новый Структура;
			СтруктураДляПередачи.Вставить("Реквизиты", Реквизиты.Скопировать());
			СтруктураДляПередачи.Вставить("Товары",	   Товары.Скопировать());
			ДанныеДляЗаполнения.Добавить(СтруктураДляПередачи);
			
			Товары.Очистить();
			
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьТовары Тогда 
		СтруктураДляПередачи = Новый Структура;
		СтруктураДляПередачи.Вставить("Реквизиты", Реквизиты.Скопировать());
		СтруктураДляПередачи.Вставить("Товары",    Товары.Скопировать());
		ДанныеДляЗаполнения.Добавить(СтруктураДляПередачи);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьКоличествоСвязанныхНанесений(ЗаказКМ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НанесениеКодовМаркировкиСУЗИСМПТК.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.НанесениеКодовМаркировкиСУЗИСМПТК КАК НанесениеКодовМаркировкиСУЗИСМПТК
	|ГДЕ
	|	НанесениеКодовМаркировкиСУЗИСМПТК.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ЗаказКМ);
	Результат = Запрос.Выполнить().Выбрать();
	
	Возврат Результат.Количество() = 1;
		
КонецФункции

#КонецОбласти

#КонецОбласти 

#Область ПроверкаДокументов

Процедура ПроверитьИсходящиеДокументыИСМПТОбработка(Знач МассивИсходящихДокументов) Экспорт
	
	Если ТипЗнч(МассивИсходящихДокументов) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СсылкаДокумент Из МассивИсходящихДокументов Цикл
		
		РезультатПроверки = "";
		ТекстСообщения    = "";
		
		РезультатПроверки = ПроверитьОбщаяДляДокументов(СсылкаДокумент);
		
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			ТекстСообщения = ТекстСообщенияПоРезультатуПроверкиДокументаИСМПТ(СсылкаДокумент, РезультатПроверки);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, СсылкаДокумент);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьОбщаяДляДокументов(СсылкаДокумент) Экспорт
	
	РезультатПроверки = ПустойРезультатПроверкиДокументИСМПТ();
	
	// Объект ДокументИСМПТ не записывается, он получается только для сокращения обращений к ИБ.
	ОбъектДокумент = СсылкаДокумент.ПолучитьОбъект();
	
	Попытка
		//ИС МПТ
		Если ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК") Тогда
			
			ИмяДокументаДляСообщения = Метаданные.Документы.АктПриемаПередачиИСМПТК.Представление();
			ПроверитьРазличныеДанныеАПП(ОбъектДокумент, РезультатПроверки);
						
		ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСМПТК") Тогда
			
			ИмяДокументаДляСообщения = Метаданные.Документы.УведомлениеОВвозеИзЕАЭСИСМПТК.Представление();
			ПроверитьРазличныеДанныеУведомленияОВвозеИзЕАЭС(ОбъектДокумент, РезультатПроверки);
						
		ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСМПТК") Тогда
			
			ИмяДокументаДляСообщения = Метаданные.Документы.УведомлениеОВвозеИзТретьихСтранИСМПТК.Представление();
			ПроверитьРазличныеДанныеУведомленияОВвозеИзТретьихСтран(ОбъектДокумент, РезультатПроверки);
						
		ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.УведомлениеОВыводеИзОборотаИСМПТК") Тогда
			
			ИмяДокументаДляСообщения = Метаданные.Документы.УведомлениеОВыводеИзОборотаИСМПТК.Представление();
			ПроверитьРазличныеДанныеУведомленияОВыводеИзОборота(ОбъектДокумент, РезультатПроверки);
						
		ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.УведомлениеОРасхожденииИСМПТК") Тогда
			
			ИмяДокументаДляСообщения = Метаданные.Документы.УведомлениеОРасхожденииИСМПТК.Представление();
			ПроверитьРазличныеДанныеУведомленияОРасхождении(ОбъектДокумент, РезультатПроверки);
						
		ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.УведомлениеОВводеВОборотИСМПТК") Тогда
			
			ИмяДокументаДляСообщения = Метаданные.Документы.УведомлениеОВводеВОборотИСМПТК.Представление();
			ПроверитьРазличныеДанныеУведомленияОВводеВОборот(ОбъектДокумент, РезультатПроверки);
						
		ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.УведомлениеОбЭкспортеЕАЭСИСМПТК") Тогда
			
			ИмяДокументаДляСообщения = Метаданные.Документы.УведомлениеОбЭкспортеЕАЭСИСМПТК.Представление();
			ПроверитьРазличныеДанныеУведомлениеОбЭкспортеЕАЭСИСМПТК(ОбъектДокумент, РезультатПроверки);
						
		ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.УведомлениеОПриемкеЕАЭСИСМПТК") Тогда
			
			ИмяДокументаДляСообщения = Метаданные.Документы.УведомлениеОПриемкеЕАЭСИСМПТК.Представление();
			ПроверитьРазличныеДанныеУведомлениеОПриемкеЕАЭСИСМПТК(ОбъектДокумент, РезультатПроверки);
						
		ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.АгрегацияКодовМаркировкиСУЗИСМПТК") Тогда
			
			ИмяДокументаДляСообщения = Метаданные.Документы.АгрегацияКодовМаркировкиСУЗИСМПТК.Представление();
			ПроверитьРазличныеДанныеАгрегацияКМ(ОбъектДокумент, РезультатПроверки);
			
		//ИС ЦЭДМ
		ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.АктПриемаПередачиИСЦЭДМ") Тогда
			
			ИмяДокументаДляСообщения = Метаданные.Документы.АктПриемаПередачиИСЦЭДМ.Представление();
			ПроверитьРазличныеДанныеАктПриемаПередачиИСЦЭДМ(ОбъектДокумент, РезультатПроверки);
			
		ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.УведомлениеОВыводеИзОборотаИСЦЭДМ") Тогда
			
			ИмяДокументаДляСообщения = Метаданные.Документы.УведомлениеОВыводеИзОборотаИСЦЭДМ.Представление();
			ПроверитьРазличныеДанныеУведомлениеОВыводеИзОборотаИСЦЭДМ(ОбъектДокумент, РезультатПроверки);
			
		ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.УведомлениеОВводеВОборотИСЦЭДМ") Тогда
			
			ИмяДокументаДляСообщения = Метаданные.Документы.УведомлениеОВводеВОборотИСЦЭДМ.Представление();
			ПроверитьРазличныеДанныеУведомлениеОВводеВОборотИСЦЭДМ(ОбъектДокумент, РезультатПроверки);
			
		ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.АгрегацияВнеПроизводстваИСЦЭДМ") Тогда
			
			ИмяДокументаДляСообщения = Метаданные.Документы.АгрегацияВнеПроизводстваИСЦЭДМ.Представление();
			ПроверитьРазличныеДанныеАгрегацияВнеПроизводстваИСЦЭДМ(ОбъектДокумент, РезультатПроверки);
			
		ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.АктВнутреннегоПеремещенияИСЦЭДМ") Тогда
			
			ИмяДокументаДляСообщения = Метаданные.Документы.АктВнутреннегоПеремещенияИСЦЭДМ.Представление();
			ПроверитьРазличныеДанныеАктВнутреннегоПеремещенияИСЦЭДМ(ОбъектДокумент, РезультатПроверки);
			
		ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.ОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ") Тогда
			
			ИмяДокументаДляСообщения = Метаданные.Документы.ОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ.Представление();
			ПроверитьРазличныеДанныеОтчетаОПередачеКИОтНерезидентаРКИСЦЭДМ(ОбъектДокумент, РезультатПроверки);
			
		ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСЦЭДМ") Тогда
			
			ИмяДокументаДляСообщения = Метаданные.Документы.УведомлениеОВвозеИзТретьихСтранИСЦЭДМ.Представление();
			ПроверитьРазличныеДанныеОУведомлениеОВвозеИзТретьихСтранИСЦЭДМ(ОбъектДокумент, РезультатПроверки);
			
		ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСЦЭДМ") Тогда
			
			ИмяДокументаДляСообщения = Метаданные.Документы.УведомлениеОВвозеИзЕАЭСИСЦЭДМ.Представление();
			ПроверитьРазличныеДанныеОУведомлениеОВвозеИзЕАЭСИСЦЭДМ(ОбъектДокумент, РезультатПроверки);
			
		//СУЗ
		ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.ЗаказКодовМаркировкиСУЗИСМПТК") Тогда
			
			ИмяДокументаДляСообщения = Метаданные.Документы.ЗаказКодовМаркировкиСУЗИСМПТК.Представление();
			ПроверитьРазличныеДанныеЗаказНаЭмиссиюКодовМаркировкиСУЗ(ОбъектДокумент, РезультатПроверки);
					
		ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.НанесениеКодовМаркировкиСУЗИСМПТК") Тогда
			
			ИмяДокументаДляСообщения = Метаданные.Документы.НанесениеКодовМаркировкиСУЗИСМПТК.Представление();
			ПроверитьРазличныеДанныеНанесениеКодовМаркировкиСУЗ(ОбъектДокумент, РезультатПроверки);
					
		КонецЕсли;
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстСообщения = НСтр("ru = 'При проверке заполнения документа %ИмяДокументаДляСообщения% возникла ошибка:'")
					   + Символы.ПС
					   + ""
					   + Символы.ПС
					   + ПодробноеПредставлениеОшибки;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяДокументаДляСообщения%", ИмяДокументаДляСообщения);
	
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПустойРезультатПроверкиДокументИСМПТ() Экспорт
	
	РезультатПроверки = Новый Структура;
	
	РезультатПроверки.Вставить("УведомительныеОшибки", Новый Массив);
	РезультатПроверки.Вставить("ЗапрещающиеОшибки",    Новый Массив);
	
	Возврат РезультатПроверки;
	
КонецФункции

Процедура ПроверитьТаблицуТовары(ОбъектДокумент, ТаблицаТоваров, НаименованиеТабличнойЧасти, СтруктураРеквизитов, НаименованияРеквизитов, РезультатПроверки) Экспорт
	
	Запрос = Новый Запрос;
	
	РеквизитыДляПроверки = "";
	Для каждого Реквизит Из СтруктураРеквизитов Цикл
		РеквизитыДляПроверки = РеквизитыДляПроверки + Реквизит.Значение + Символы.ПС;
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ДокументИСМПТТовары.НомерСтроки,"
	+ РеквизитыДляПроверки + ""
	+ "
	|	&НаименованиеТабличнойЧасти
	|ПОМЕСТИТЬ ВТ_ДокументИСМПТТовары
	|ИЗ
	|	&ТаблицаТовары КАК ДокументИСМПТТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ *
	|ИЗ
	|	ВТ_ДокументИСМПТТовары КАК ВТ_ДокументИСМПТТовары";
	
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТоваров);
	Запрос.УстановитьПараметр("НаименованиеТабличнойЧасти", НаименованиеТабличнойЧасти);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Для каждого Реквизит Из СтруктураРеквизитов Цикл
			
			Если НаименованиеТабличнойЧасти = "Товары"
				И НЕ ЗначениеЗаполнено(Выборка[Реквизит.Ключ]) Тогда
				
				ТекстСообщения = НСтр("ru = 'Не заполнено значение в поле ""%НаименованиеКолонки%"" в строке %НомерСтроки% в таблице ""Товары"" в разделе ""Товары"".'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеКолонки%", НаименованияРеквизитов[Реквизит.Ключ]);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", 		  Выборка.НомерСтроки);
				
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьТаблицуМарки(ОбъектДокумент, ТаблицаМарки, НаименованиеТабличнойЧасти, СтруктураРеквизитов, РезультатПроверки) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ДокументИСМПТМарки.НомерСтроки,"
	
	+ СтруктураРеквизитов.Количество + ""
	+ СтруктураРеквизитов.Код + ""
	+ СтруктураРеквизитов.GTIN + ""
	+ "
	|	&НаименованиеТабличнойЧасти
	|ПОМЕСТИТЬ ВТ_ДокументИСМПТМарки
	|ИЗ
	|	&ТаблицаМарки КАК ДокументИСМПТМарки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ *
	|ИЗ
	|	ВТ_ДокументИСМПТМарки КАК ВТ_ДокументИСМПТМарки";
	
	Запрос.УстановитьПараметр("ТаблицаМарки", ТаблицаМарки);
	Запрос.УстановитьПараметр("НаименованиеТабличнойЧасти", НаименованиеТабличнойЧасти);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НеЗаполненКИ = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Если НаименованиеТабличнойЧасти = "Марки"
			И ЗначениеЗаполнено(СтруктураРеквизитов.Код)
			И НЕ ЗначениеЗаполнено(Выборка.КодИдентификации)
			И НЕ НеЗаполненКИ Тогда
			
			ТекстСообщения = НСтр("ru = 'В таблице ""Марки"" в разделе ""Товары"" присутствуют строки с незаполненным кодом идентификации.'"); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			НеЗаполненКИ = Истина;
			
		КонецЕсли;
		
		Если НаименованиеТабличнойЧасти = "Марки"
			И ЗначениеЗаполнено(СтруктураРеквизитов.Количество)
			И НЕ ЗначениеЗаполнено(Выборка.Количество) Тогда
			
			ТекстСообщения = НСтр("ru = 'Для кода идентификации %1 в таблице ""Марки"" в разделе ""Товары"" не заполнено количество подобранных кодов.'"); 
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.КодИдентификации);
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		Если НаименованиеТабличнойЧасти = "Марки"
			И ЗначениеЗаполнено(СтруктураРеквизитов.GTIN)
			И НЕ ЗначениеЗаполнено(Выборка.GTIN) Тогда
			
			ТекстСообщения = НСтр("ru = 'Для кода идентификации %1 в таблице ""Марки"" в разделе ""Товары"" не заполнен GTIN (вложенный).'"); 
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.КодИдентификации);
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Дополнительная проверка на монотоварность
	
	ТаблицаПроверки = ТаблицаМарки.Скопировать(,"ВидПродукции");
	ТаблицаПроверки.Свернуть("ВидПродукции");
	ОбнаруженоТГ = 0;
	Для Каждого Строка Из ТаблицаПроверки Цикл
		Если ЗначениеЗаполнено(Строка.ВидПродукции) Тогда  //если вид продукции пустой, не обращаем внимание на эту строку
			ОбнаруженоТГ = ОбнаруженоТГ + 1;
		КонецЕсли;
	КонецЦикла;
	Если ОбнаруженоТГ > 1 Тогда
		ТекстСообщения = НСтр("ru = 'Таблица ""Марки"" в разделе ""Товары"" содержит коды, относящиеся к разным товарным группам! Документ должен быть монотоварным.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьТаблицуДокументыСоответствия(ТаблицаДокументыСоответствия, НаименованиеТабличнойЧасти, СтруктураРеквизитов, РезультатПроверки) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ДокументИСМПТ.НомерСтроки";
	
	Для Каждого Реквизит Из СтруктураРеквизитов Цикл 
		Запрос.Текст = Запрос.Текст + ",
		| ДокументИСМПТ." + Реквизит.Ключ;
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	|ПОМЕСТИТЬ ВТ_ДокументИСМПТ
	|ИЗ
	|	&ТаблицаДок КАК ДокументИСМПТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ *
	|ИЗ
	|	ВТ_ДокументИСМПТ КАК ВТ_ДокументИСМПТ";
	
	Запрос.УстановитьПараметр("ТаблицаДок", ТаблицаДокументыСоответствия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НеЗаполненныеРеквизиты = "";
		
		Для Каждого Реквизит Из СтруктураРеквизитов Цикл
			Если НЕ ЗначениеЗаполнено(Выборка[Реквизит.Ключ]) Тогда
				НеЗаполненныеРеквизиты = НеЗаполненныеРеквизиты + Реквизит.Значение + ", ";
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(НеЗаполненныеРеквизиты) Тогда
			ТекстСообщения = НСтр("ru = 'В строке %1 в таблице ""Документы соответствия"" не заполнено поле: %2.'"); 
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.НомерСтроки, Сред(НеЗаполненныеРеквизиты,1,СтрДлина(НеЗаполненныеРеквизиты)-2));
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстСообщенияПоРезультатуПроверкиДокументаИСМПТ(Знач СсылкаДокумент, Знач РезультатПроверки) Экспорт
	
	ТекстСообщения = "";
	
	ЗапрещающиеОшибки    = РезультатПроверки.ЗапрещающиеОшибки.Количество() > 0;
	УведомительныеОшибки = РезультатПроверки.УведомительныеОшибки.Количество() > 0;
	
	Если ЗапрещающиеОшибки Тогда
		Для Каждого Ошибка Из РезультатПроверки.ЗапрещающиеОшибки Цикл
			ТекстСообщения = ТекстСообщения + СокрЛП(Ошибка) + Символы.ПС;
		КонецЦикла;		
	КонецЕсли;
	
	Если УведомительныеОшибки Тогда
		Для Каждого Ошибка Из РезультатПроверки.УведомительныеОшибки Цикл
			ТекстСообщения = ТекстСообщения + СокрЛП(Ошибка) + Символы.ПС;
		КонецЦикла;		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстСообщения) Тогда
		
		ТекстСообщения = "------------------------------------------------------------------------------------------------------"
					   + Символы.ПС
					   + НСтр("ru = 'Ошибок не обнаружено при проверке документа %1.'");
		
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СсылкаДокумент);
		
	ИначеЕсли ЗапрещающиеОшибки Тогда 
		
		ЗаголовокСообщения = "------------------------------------------------------------------------------------------------------"
						   + Символы.ПС
						   + НСтр("ru = 'Обнаружены ошибки при проверке документа %1.'");
		
		ЗаголовокСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ЗаголовокСообщения, СсылкаДокумент);
		
		ТекстСообщения = ЗаголовокСообщения + Символы.ПС + ТекстСообщения;
		ТекстСообщения = СокрЛП(ТекстСообщения);		
		ТекстСообщения = ТекстСообщения + Символы.ПС;
		
	ИначеЕсли УведомительныеОшибки Тогда
		//Если ошибки не мешают отправке, оповещаем об этом в "мягкой" форме, чтобы не вызывать недопонимания у пользователя.
		ЗаголовокСообщения = "------------------------------------------------------------------------------------------------------"
						   + Символы.ПС
						   + НСтр("ru = 'Ошибок не обнаружено, документ %1 готов к отправке.'");
		
		ЗаголовокСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ЗаголовокСообщения, СсылкаДокумент);
		
		ТекстСообщения = ЗаголовокСообщения 
					   + Символы.ПС + "" + Символы.ПС
					   + НСтр("ru = 'Следует обратить внимание на обнаруженные замечания:'")
					   + Символы.ПС + "" + Символы.ПС
					   + ТекстСообщения;
		ТекстСообщения = СокрЛП(ТекстСообщения);		
		ТекстСообщения = ТекстСообщения + Символы.ПС;
		
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция ПроверитьДокументИСМПТ(СсылкаДокумент) Экспорт
	
	Возврат ПроверитьОбщаяДляДокументов(СсылкаДокумент);
	
КонецФункции

Функция ПроверитьДокументСУЗ(СсылкаДокумент) Экспорт
	
	Возврат ПроверитьОбщаяДляДокументов(СсылкаДокумент);
	
КонецФункции

Процедура СообщитьОбнаруженыОшибки(Знач СсылкаДокументИСМПТ, Знач РезультатПроверки) Экспорт
	
	Если РезультатПроверки.ЗапрещающиеОшибки.Количество() <> 0 Тогда
		
		Если ТипЗнч(СсылкаДокументИСМПТ) = Тип("ДокументСсылка.УведомлениеОПриемкеЕАЭСИСМПТК") Тогда
			
			Для Каждого Сообщение Из РезультатПроверки.ЗапрещающиеОшибки Цикл
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(Сообщение, СсылкаДокументИСМПТ);
			КонецЦикла;				
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Обнаружены ошибки при проверке документа %1.'")
						   + Символы.ПС
						   + НСтр("ru = 'Для просмотра списка ошибок воспользуйтесь командой ""Проверить"".'");
			
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СсылкаДокументИСМПТ);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, СсылкаДокументИСМПТ);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДанныеПолучателя(ОбъектДокумент, НаименованиеДокумента = "", РезультатПроверки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПолучательИдентификационныйНомер) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненИИНБИНПолучателя();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	Иначе
		//Проверка формата ИИН/БИН
		Если Не КорректныйФорматИИНБИН(ОбъектДокумент.ПолучательИдентификационныйНомер) Тогда
			ТекстСообщения = НСтр("ru = 'Указан некорректный ИИН/БИН в разделе ""Получатель"".'"); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПолучательНаименование) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненоНаименованиеПолучателя();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//Проверка реквизитов ссылочного типа
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Получатель) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненПолучатель();
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДанныеПоставщика(ОбъектДокумент, НаименованиеДокумента = "", РезультатПроверки, ИмяРаздела = Неопределено) Экспорт
	
	Если ИмяРаздела = Неопределено Тогда
		ИмяРаздела = НСтр("ru = 'Поставщик'");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПоставщикИдентификационныйНомер) Тогда
		Если НаименованиеДокумента = "ВводВОборот"
			Или НаименованиеДокумента = "ВыводИзОборота" Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнен ИИН/БИН отправителя в разделе ""%ИмяРаздела%"".'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Не заполнен ИИН/БИН поставщика в разделе ""%ИмяРаздела%"".'");
		КонецЕсли;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРаздела%", ИмяРаздела);
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	Иначе
		Если Не НаименованиеДокумента = "ВвозЕАЭС" Тогда
			//Проверка формата ИИН/БИН
			Если Не КорректныйФорматИИНБИН(ОбъектДокумент.ПоставщикИдентификационныйНомер) Тогда
				ТекстСообщения = НСтр("ru = 'Указан некорректный ИИН/БИН поставщика в разделе ""%ИмяРаздела%"".'"); 
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРаздела%", ИмяРаздела);
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПоставщикНаименование) Тогда
		Если НаименованиеДокумента = "ВводВОборот"
			Или НаименованиеДокумента = "ВыводИзОборота" Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнено наименование отправителя в разделе ""%ИмяРаздела%"".'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Не заполнено наименование поставщика в разделе ""%ИмяРаздела%"".'");
		КонецЕсли;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРаздела%", ИмяРаздела);
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//Проверка реквизитов ссылочного типа
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Поставщик) Тогда
		Если НаименованиеДокумента = "ВводВОборот"
			Или НаименованиеДокумента = "ВыводИзОборота" Тогда
			ТекстСообщения = НСтр("ru = 'Не указан отправитель в разделе ""%ИмяРаздела%"".'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Не указан поставщик в разделе ""%ИмяРаздела%"".'");
		КонецЕсли;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРаздела%", ИмяРаздела);
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НаименованиеДокумента = "ВвозЕАЭС" Тогда
		Если Не ЗначениеЗаполнено(ОбъектДокумент.СтранаОтправления) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена страна отправления в разделе ""%ИмяРаздела%"".'"); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРаздела%", ИмяРаздела);
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		Иначе
			КодСтраны = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьКодСтраныДляУведомленияОввозе(ОбъектДокумент.СтранаОтправления); 
			Если Не (КодСтраны = "RU" ИЛИ КодСтраны = "KG"
				ИЛИ КодСтраны = "BY" ИЛИ КодСтраны = "AM") Тогда
				
				ТекстСообщения = НСтр("ru = 'Страна отправления в разделе ""%ИмяРаздела%"" указана некорректно.'"); 
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРаздела%", ИмяРаздела);
				РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
		////Проверяем ИИН поставщика
		//Если ЗначениеЗаполнено(ОбъектДокумент.ПоставщикИдентификационныйНомер)
		//	И ЗначениеЗаполнено(ОбъектДокумент.СтранаОтправления) Тогда
		//	ИИНДлина = СтрДлина(ОбъектДокумент.ПоставщикИдентификационныйНомер);
		//	КодСтраны = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьКодСтраныДляУведомленияОввозе(ОбъектДокумент.СтранаОтправления); 
		//	
		//	Если (КодСтраны = "RU" И Не (ИИНДлина = 10 ИЛИ ИИНДлина = 12))
		//		ИЛИ (КодСтраны = "KG" И Не ИИНДлина = 14)
		//		ИЛИ (КодСтраны = "BY" И Не ИИНДлина = 9)
		//		ИЛИ (КодСтраны = "AM" И Не ИИНДлина = 8) Тогда
		//		
		//		ТекстСообщения = НСтр("ru = 'Длина поля ИИН/БИН в разделе ""Поставщик"" не соответствует шаблону страны отправления.'"); 
		//		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
		//		
		//	КонецЕсли;
		//	
		//КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПроверкаРегистрацииКонтрагентаВИСЦЭДМ(Организация, БИНКонтрагента) Экспорт

	РезультатВыполненияЗапроса = ЭлектронноеВзаимодействиеССервисамиМаркировка.ПолучитьИнформациюПоБИНКонтрагента(Организация, БИНКонтрагента, Ложь);
	
	Если РезультатВыполненияЗапроса = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Выполнен запрос к серверу ИС ЦЭДМ. Данные контрагента с ИИН/БИН %1 не обнаружены!'")
					   + Символы.ПС
					   + НСтр("ru='При отправке документа могут возникнуть проблемы на стороне ИС ЦЭДМ.'");
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, БИНКонтрагента); 
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	Иначе	
		ТекстСообщения = НСтр("ru='Выполнен запрос к серверу ИС ЦЭДМ. Контрагент с ИИН/БИН %1 зарегистрирован!'");
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, БИНКонтрагента); 
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьСписокСкладовКонтрагентаЦЭДМ(Организация, БИНКонтрагента) Экспорт
	
	РезультатВыполненияЗапроса = ЭлектронноеВзаимодействиеССервисамиМаркировка.ПолучитьИнформациюПоБИНКонтрагента(Организация, БИНКонтрагента, Ложь);
	Если РезультатВыполненияЗапроса = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Выполнен запрос к серверу ИС ЦЭДМ. Данные контрагента с ИИН/БИН %1 не обнаружены! Данные о зарегистрированных ТРП не получены.'");
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, БИНКонтрагента); 
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли; 
		
	Возврат РезультатВыполненияЗапроса; 
	
КонецФункции

#Область ДокументыИСМПТ

Процедура ПроверитьРазличныеДанныеАПП(ОбъектДокумент, РезультатПроверки) Экспорт
	
	// Проверка всех обязательных реквизитов
	//Раздел А.Общее
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ТипАкта) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненТипТекущегоДокумента();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Номер) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанНомерТекущегоДокумента();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ВидОперации) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанВидОперацииДокумента(); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектДокумент.ДатаВыпискиНаБумажномНосителе <> '00010101000000' И 
		Не ЗначениеЗаполнено(ОбъектДокумент.РегНомерНаБумажномНосителе) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанНомерДокументаВыписанногоНаБумаге();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//В.Поставщик
	ПроверитьДанныеПоставщика(ОбъектДокумент,, РезультатПроверки);
	
	//С.Получатель
	ПроверитьДанныеПолучателя(ОбъектДокумент,, РезультатПроверки);
	
	//Перед отправкой и по нажатию команды "Проверить" выполняем проверку заполненности ключевых для АПи данных в ТЧ марок
	//D.Марки
	СтруктураРеквизитовМарки = Новый Структура("Код, Количество, GTIN", "", "", "");
	Если ОбъектДокумент.Марки.Количество() > 0 Тогда
		
		НовыйСтруктураРеквизитовМарки = Новый Структура;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитовМарки Цикл
			НовыйСтруктураРеквизитовМарки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		НовыйСтруктураРеквизитовМарки.Код		 = " ДокументИСМПТМарки.КодИдентификации, "; 
		НовыйСтруктураРеквизитовМарки.Количество = " ДокументИСМПТМарки.Количество, ";
		НовыйСтруктураРеквизитовМарки.GTIN		 = " ДокументИСМПТМарки.GTIN, ";
		ТаблицаМарки = ОбъектДокумент.Марки.Выгрузить();
		ПроверитьТаблицуМарки(ОбъектДокумент, ТаблицаМарки, "Марки", НовыйСтруктураРеквизитовМарки, РезультатПроверки);
		
	ИначеЕсли ОбъектДокумент.Марки.Количество() = 0 Тогда	
		
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказаныКодыМаркировкиВТаблицеДокумента();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);

	КонецЕсли;
		
	//Прочее
	Если Не ЗначениеЗаполнено(ОбъектДокумент.Организация) Тогда 
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненаОрганизацияДокумента();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеРаздела%", НСтр("ru = 'Прочая информация'"));
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	// Товарная группа и Таблица Итоги
	КонтролироватьПередачуЦен = ИнтеграцияИСМПТККлиентСервер.ПередаватьЦеновыеПоказателиВДокументахИСМПТК();
	Если КонтролироватьПередачуЦен Тогда 
		Если Не ЗначениеЗаполнено(ОбъектДокумент.ТоварнаяГруппа) Тогда
			ТекстСообщения = НСтр("ru = 'Не указана Товарная группа в разделе ""Общий раздел"".'");
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		Иначе 
			// Проверяем, что ТГ документа соответствует данным ТЧ Марки
			ТаблицаПроверки = ОбъектДокумент.Марки.Выгрузить(, "ВидПродукции");
			ТаблицаПроверки.Свернуть("ВидПродукции");
			Если ТаблицаПроверки.Количество() = 1 Тогда
				Если Не ТаблицаПроверки[0].ВидПродукции = ОбъектДокумент.ТоварнаяГруппа 
					И Не ТаблицаПроверки[0].ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка") Тогда
					ТекстСообщения = НСтр("ru = 'Значение поля ""Товарная группа"" в разделе ""Общий раздел"" не соответствует данным табличной части ""Марки"".'");
					РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;				
		КонецЕсли;
	КонецЕсли;
	
	СтрогийКонтрольЗаполненияЦенПоТГ = ПроверитьТГНаОбязательностьУказанияЦенИСМПТ(ОбъектДокумент.ТоварнаяГруппа);
	Если КонтролироватьПередачуЦен Тогда
		Если ОбъектДокумент.Итоги.Количество() = 0 Тогда
			Если СтрогийКонтрольЗаполненияЦенПоТГ Тогда 
				ТекстСообщения = НСтр("ru = 'Не заполнены данные в таблице ""Итоги"" в разделе ""Товары"".'");
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			КонецЕсли;
		Иначе
			Для Каждого СтрокаТЧ Из ОбъектДокумент.Итоги Цикл
				Если Не ЗначениеЗаполнено(СтрокаТЧ.КодТНВЭД) Тогда 
					ТекстСообщения = НСтр("ru = 'Не заполнен ""Код ТН ВЭД"" в строке №%НомерСтроки% в таблице ""Итоги"" в разделе ""Товары"".'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
					Если СтрогийКонтрольЗаполненияЦенПоТГ Тогда 
						РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
					Иначе
						РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
					КонецЕсли;
				Иначе
					СписокДопустимыхКодовТНВЭД = ПолучитьСписокДопустимыхКодовТНВЭДДляТабачнойПродукцииИСМПТ();
					Если ОбъектДокумент.ТоварнаяГруппа = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная")
						И СписокДопустимыхКодовТНВЭД.Найти(СтрокаТЧ.КодТНВЭД) = Неопределено Тогда
						ТекстСообщения = НСтр("ru = 'Код ТН ВЭД не входит в список допустимых кодов для табачной продукции: строка №%НомерСтроки% в таблице ""Итоги"" в разделе ""Товары"".'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
						РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
					КонецЕсли;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаТЧ.Цена) Тогда 
					ТекстСообщения = НСтр("ru = 'Не заполнена ""Цена за потребит.упаковку"" в строке №%НомерСтроки% в таблице ""Итоги"" в разделе ""Товары"".'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
					Если СтрогийКонтрольЗаполненияЦенПоТГ Тогда 
						РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
					Иначе
						РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
					КонецЕсли;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаТЧ.Сумма) Тогда 
					ТекстСообщения = НСтр("ru = 'Не заполнена ""Общая сумма с НДС"" в строке №%НомерСтроки% в таблице ""Итоги"" в разделе ""Товары"".'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
					Если СтрогийКонтрольЗаполненияЦенПоТГ Тогда 
						РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
					Иначе
						РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
					КонецЕсли;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаТЧ.СуммаБезНДС) Тогда 
					ТекстСообщения = НСтр("ru = 'Не заполнена ""Сумма без НДС"" в строке №%НомерСтроки% в таблице ""Итоги"" в разделе ""Товары"".'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
					Если СтрогийКонтрольЗаполненияЦенПоТГ Тогда 
						РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
					Иначе
						РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
					КонецЕсли;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС) Тогда 
					ТекстСообщения = НСтр("ru = 'Не заполнена ""Ставка НДС, %"" в строке №%НомерСтроки% в таблице ""Итоги"" в разделе ""Товары"".'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
					Если СтрогийКонтрольЗаполненияЦенПоТГ Тогда 
						РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
					Иначе
						РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРазличныеДанныеУведомленияОВвозеИзТретьихСтран(ОбъектДокумент, РезультатПроверки) Экспорт
	
	// Проверка всех обязательных реквизитов
	//Раздел А.Общее
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Номер) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанНомерТекущегоДокумента();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
    	
	Если ОбъектДокумент.ДатаВыпискиНаБумажномНосителе <> '00010101000000' И 
		Не ЗначениеЗаполнено(ОбъектДокумент.РегНомерНаБумажномНосителе) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанНомерДокументаВыписанногоНаБумаге();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//В.Таможенные документы
	
	Если Не ЗначениеЗаполнено(ОбъектДокумент.СтранаОтправления) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненаСтранаЭкспорта();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	//Таможенное оформление
	Если Не ЗначениеЗаполнено(ОбъектДокумент.ТипДокументаТаможенногоОформления) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеуказанТипДокументаТаможенногоОформления(); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокумент.ДатаДокументаТаможенногоОформления) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненаДатаДокументаТаможенногоОформления(); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокумент.НомерДокументаТаможенногоОформления) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненНомерДокументаТаможенногоОформления(); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	//Решение НО
	Если Не ЗначениеЗаполнено(ОбъектДокумент.КодТаможенногоОргана) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненКодТаможенногоОргана(); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	ИначеЕсли СтрДлина(ОбъектДокумент.КодТаможенногоОргана) <> 5 Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДлинаПоляКодТаможенногоОргана(); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокумент.КодРешенияТаможенногоОргана) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненКодРешенияТаможенногоОргана(); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокумент.ДатаВремяПринятияРешения) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказаныДатаВремяПринятияРешенияПоТаможне(); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//Документы соответствия
	Если ОбъектДокумент.ДокументыСоответствия.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена информация о документе соответствия товара в разделе ""Товары"".'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//D.Товары
	СтруктураРеквизитов    = Новый Структура ("Количество, Номенклатура, ТНВЭД, СтранаПроизводства, НомерПозицииВДекларацииИлиЗаявлении", "", "", "", "", "");
	НаименованияРеквизитов = Новый Структура ("Количество, Номенклатура, ТНВЭД, СтранаПроизводства, НомерПозицииВДекларацииИлиЗаявлении", "", "", "", "", "");
	Если ОбъектДокумент.Товары.Количество() > 0 Тогда
		
		НовыйСтруктураРеквизитов = Новый Структура;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитов Цикл
			НовыйСтруктураРеквизитов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		
		НовыйСтруктураРеквизитов.Количество   = " ДокументИСМПТТовары.КоличествоКМ КАК Количество, ";
		НовыйСтруктураРеквизитов.ТНВЭД 		  = " ДокументИСМПТТовары.ТНВЭД, ";
		НовыйСтруктураРеквизитов.Номенклатура = " ДокументИСМПТТовары.Номенклатура, ";
		НовыйСтруктураРеквизитов.СтранаПроизводства = " ДокументИСМПТТовары.СтранаПроизводства, ";
		НовыйСтруктураРеквизитов.НомерПозицииВДекларацииИлиЗаявлении = " ДокументИСМПТТовары.НомерПозицииВДекларацииИлиЗаявлении, ";
		
		НаименованияРеквизитов.Количество 		  = НСтр("ru = 'Количество КМ'");
		НаименованияРеквизитов.ТНВЭД 			  = НСтр("ru = 'ТН ВЭД'");
		НаименованияРеквизитов.Номенклатура 	  = НСтр("ru = 'Номенклатура'");
		НаименованияРеквизитов.СтранаПроизводства = НСтр("ru = 'Страна производства'");
		НаименованияРеквизитов.НомерПозицииВДекларацииИлиЗаявлении = НСтр("ru = 'Номер товара в ДТ'");
		
		ТаблицаТоваров = ОбъектДокумент.Товары.Выгрузить();
		ПроверитьТаблицуТовары(ОбъектДокумент, ТаблицаТоваров, "Товары", НовыйСтруктураРеквизитов, НаименованияРеквизитов, РезультатПроверки);
		
	ИначеЕсли ОбъектДокумент.Товары.Количество() = 0 Тогда	
		
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказаныТоварыВТаблицеДокумента();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		
	КонецЕсли;
	
	//D.Марки
	СтруктураРеквизитовМарки = Новый Структура("Код, Количество, GTIN", "", "", "");
	Если ОбъектДокумент.Марки.Количество() > 0 Тогда
		
		НовыйСтруктураРеквизитовМарки = Новый Структура;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитовМарки Цикл
			НовыйСтруктураРеквизитовМарки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		НовыйСтруктураРеквизитовМарки.Код		 = " ДокументИСМПТМарки.КодИдентификации, "; 
		НовыйСтруктураРеквизитовМарки.Количество = " ДокументИСМПТМарки.Количество, ";
		НовыйСтруктураРеквизитовМарки.GTIN		 = " ДокументИСМПТМарки.GTIN, ";
		ТаблицаМарки = ОбъектДокумент.Марки.Выгрузить();
		ПроверитьТаблицуМарки(ОбъектДокумент, ТаблицаМарки, "Марки", НовыйСтруктураРеквизитовМарки, РезультатПроверки);
		
	ИначеЕсли ОбъектДокумент.Марки.Количество() = 0 Тогда	
		
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказаныКодыМаркировкиВТаблицеДокумента();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		
	КонецЕсли;
	
	//С.Получатель
	ПроверитьДанныеПолучателя(ОбъектДокумент,, РезультатПроверки);
	
	//Прочее
	Если Не ЗначениеЗаполнено(ОбъектДокумент.Организация) Тогда 
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненаОрганизацияДокумента();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеРаздела%", НСтр("ru = 'Прочая информация'"));
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьРазличныеДанныеУведомленияОВвозеИзЕАЭС(ОбъектДокумент, РезультатПроверки) Экспорт
	
	// Проверка всех обязательных реквизитов
	//Раздел А.Общее
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ТипУведомления) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненТипТекущегоДокумента();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Номер) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанНомерТекущегоДокумента();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектДокумент.ДатаВыпискиНаБумажномНосителе <> '00010101000000' И 
		Не ЗначениеЗаполнено(ОбъектДокумент.РегНомерНаБумажномНосителе) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанНомерДокументаВыписанногоНаБумаге();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;

	Если ОбъектДокумент.ТипУведомления = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исправленный") Тогда
		Если НЕ ЗначениеЗаполнено(ОбъектДокумент.РегистрационныйНомерСвязанногоУведомления) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнен номер исходного документа в группе ""Информация о связанных документах"" разделе ""Основное"".'"); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ДатаСвязанногоУведомления) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена дата исходного документа в группе ""Информация о связанных документах"" разделе ""Основное"".'"); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	//В.Поставщик
	ПроверитьДанныеПоставщика(ОбъектДокумент, "ВвозЕАЭС", РезультатПроверки);
	
	//Акцизы
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ДатаУплатыАкциза) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена дата уплаты акцизов в группе ""Сведения об уплате акцизов"" разделе ""Товары"".'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.НомерКвитанцииАкциза) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен номер квитанции в группе ""Сведения об уплате акцизов"" разделе ""Товары"".'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.СуммаАкциза) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена сумма в группе ""Сведения об уплате акцизов"" разделе ""Товары"".'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;

	//С.Получатель
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПолучательИдентификационныйНомер) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненИИНБИНПолучателя();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПолучательНаименование) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненоНаименованиеПолучателя();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//D.Марки
	СтруктураРеквизитовМарки = Новый Структура("Код, Количество, GTIN", "", "", "");
	Если ОбъектДокумент.Марки.Количество() > 0 Тогда
		
		НовыйСтруктураРеквизитовМарки = Новый Структура;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитовМарки Цикл
			НовыйСтруктураРеквизитовМарки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		НовыйСтруктураРеквизитовМарки.Код		 = " ДокументИСМПТМарки.КодИдентификации, "; 
		НовыйСтруктураРеквизитовМарки.Количество = " ДокументИСМПТМарки.Количество, ";
		НовыйСтруктураРеквизитовМарки.GTIN		 = " ДокументИСМПТМарки.GTIN, ";
		ТаблицаМарки = ОбъектДокумент.Марки.Выгрузить();
		ПроверитьТаблицуМарки(ОбъектДокумент, ТаблицаМарки, "Марки", НовыйСтруктураРеквизитовМарки, РезультатПроверки);
		
	ИначеЕсли ОбъектДокумент.Марки.Количество() = 0 Тогда	
		
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказаныКодыМаркировкиВТаблицеДокумента();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);

	КонецЕсли;
	
	//D.ДокументыСоответствия
	Если ОбъектДокумент.ДокументыСоответствия.Количество() > 0 Тогда
		СтруктураРеквизитов = Новый Структура("ТипДокумента, ДатаДокумента, НомерДокумента", "Тип", "Дата", "Номер");
		ТаблицаДокументыСоответствия = ОбъектДокумент.ДокументыСоответствия.Выгрузить();
		ПроверитьТаблицуДокументыСоответствия(ТаблицаДокументыСоответствия, "ДокументыСоответствия", СтруктураРеквизитов, РезультатПроверки);
	КонецЕсли;
		
	//Прочее
	Если Не ЗначениеЗаполнено(ОбъектДокумент.Организация) Тогда 
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненаОрганизацияДокумента();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеРаздела%", НСтр("ru = 'Прочая информация'"));
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//Проверка реквизитов ссылочного типа
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Получатель) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненПолучатель();
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРазличныеДанныеУведомленияОРасхождении(ОбъектДокумент, РезультатПроверки) Экспорт
	
	// Проверка всех обязательных реквизитов
	//Раздел А.Общее
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Номер) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанНомерТекущегоДокумента();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ВидОперации) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанВидОперацииДокумента(); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//В.Поставщик
	ПроверитьДанныеПоставщика(ОбъектДокумент,, РезультатПроверки);
	
	//С.Получатель
	ПроверитьДанныеПолучателя(ОбъектДокумент,, РезультатПроверки);
	
	//D.Марки
	Если ОбъектДокумент.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") Тогда
		СтруктураРеквизитовМарки = Новый Структура("Код, Количество, GTIN", "", "", "");
		Если ОбъектДокумент.Марки.Количество() > 0 Тогда
			
			НовыйСтруктураРеквизитовМарки = Новый Структура;
			Для Каждого ЭлементСтруктуры Из СтруктураРеквизитовМарки Цикл
				НовыйСтруктураРеквизитовМарки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			КонецЦикла;
			НовыйСтруктураРеквизитовМарки.Код		 = " ДокументИСМПТМарки.КодИдентификации, "; 
			НовыйСтруктураРеквизитовМарки.Количество = " ДокументИСМПТМарки.Количество, ";
			НовыйСтруктураРеквизитовМарки.GTIN		 = " ДокументИСМПТМарки.GTIN, ";
			ТаблицаМарки = ОбъектДокумент.Марки.Выгрузить();
			ПроверитьТаблицуМарки(ОбъектДокумент, ТаблицаМарки, "Марки", НовыйСтруктураРеквизитовМарки, РезультатПроверки);
			
		ИначеЕсли ОбъектДокумент.Марки.Количество() = 0 Тогда	
			
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказаныКодыМаркировкиВТаблицеДокумента();
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
	КонецЕсли;
		
	//Прочее
	Если Не ЗначениеЗаполнено(ОбъектДокумент.Организация) Тогда 
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненаОрганизацияДокумента();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеРаздела%", НСтр("ru = 'Прочая информация'"));
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРазличныеДанныеУведомленияОВводеВОборот(ОбъектДокумент, РезультатПроверки) Экспорт
	
	// Проверка всех обязательных реквизитов
	//Раздел А.Общее
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Номер) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанНомерТекущегоДокумента();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПричинаВводаВОборот) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанаПричинаВводаВыводаКМ(); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//В.Поставщик
	ПроверитьДанныеПоставщика(ОбъектДокумент, "ВводВОборот", РезультатПроверки);
	
	//Прочее
	Если Не ЗначениеЗаполнено(ОбъектДокумент.ДокументОснованиеНаименование) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказаноНаименованиеОснованияДокументаВводаВыводаКМ();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "ИмяГруппыПолейОснования",  НСтр("ru = 'Отражение в учете'"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "НаименованиеРазделаФормы", НСтр("ru = 'Прочая информация'")); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокумент.ДокументОснованиеДата) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанаДатаОснованияДокументаВводаВыводаКМ();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "ИмяГруппыПолейОснования",  НСтр("ru = 'Отражение в учете'"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "НаименованиеРазделаФормы", НСтр("ru = 'Прочая информация'")); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокумент.ДокументОснованиеНомер) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанНомерОснованияДокументаВводаВыводаКМ();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "ИмяГруппыПолейОснования",  НСтр("ru = 'Отражение в учете'"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "НаименованиеРазделаФормы", НСтр("ru = 'Прочая информация'")); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//D.Марки
	СтруктураРеквизитовМарки = Новый Структура("Код, Количество, GTIN", "", "", "");
	Если ОбъектДокумент.Марки.Количество() > 0 Тогда
		
		НовыйСтруктураРеквизитовМарки = Новый Структура;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитовМарки Цикл
			НовыйСтруктураРеквизитовМарки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		НовыйСтруктураРеквизитовМарки.Код		 = " ДокументИСМПТМарки.КодИдентификации, "; 
		НовыйСтруктураРеквизитовМарки.Количество = " ДокументИСМПТМарки.Количество, ";
		НовыйСтруктураРеквизитовМарки.GTIN		 = " ДокументИСМПТМарки.GTIN, ";
		ТаблицаМарки = ОбъектДокумент.Марки.Выгрузить();
		ПроверитьТаблицуМарки(ОбъектДокумент, ТаблицаМарки, "Марки", НовыйСтруктураРеквизитовМарки, РезультатПроверки);
		
	ИначеЕсли ОбъектДокумент.Марки.Количество() = 0 Тогда	
		
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказаныКодыМаркировкиВТаблицеДокумента();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);

	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРазличныеДанныеУведомлениеОбЭкспортеЕАЭСИСМПТК(ОбъектДокумент, РезультатПроверки) Экспорт
	
	// Проверка всех обязательных реквизитов
	//Раздел А.Общее
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.НомерДокументаТрансграна) Тогда
		ТекстСообщения = НСтр("ru = 'Не указан номер в группе ""Таможенный документ"" в разделе ""Общий раздел"".'");
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ДатаДокументаТрансграна) Тогда
		ТекстСообщения = НСтр("ru = 'Не указана дата оформления в группе ""Таможенный документ"" в разделе ""Общий раздел"".'");
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ДатаВремяОтгрузки) Тогда
		ТекстСообщения = НСтр("ru = 'Не указана дата отгрузки товара в группе ""Таможенный документ"" в разделе ""Общий раздел"".'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
		
	//В.Поставщик
	ПроверитьДанныеПоставщика(ОбъектДокумент,, РезультатПроверки);
	
	//С.Получатель
	ПроверитьДанныеПолучателя(ОбъектДокумент,, РезультатПроверки);
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.СтранаПолучатель) Тогда
		ТекстСообщения = НСтр("ru = 'Не указана страна в разделе ""Получатель"".'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//Прочее
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ТоварнаяГруппа) Тогда
		ТекстСообщения = НСтр("ru = 'Не указана товарная группа в разделе ""Прочее"".'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьРазличныеДанныеУведомлениеОПриемкеЕАЭСИСМПТК(ОбъектДокумент, РезультатПроверки) Экспорт
	
	// Проверка всех обязательных реквизитов
	//Раздел А.Общее
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.НомерПервичногоДокумента) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанНомерПервичногоДокумента();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ДатаПервичногоДокумента) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена дата оформления в группе ""Сведения о первичном документе"" в разделе ""Общий раздел"".'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ИдентификаторДокументаОтгрузки) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен идентификатор в группе ""Информация о связанных документах"" в разделе ""Общий раздел"".'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//В.Поставщик
	ПроверитьДанныеПоставщика(ОбъектДокумент,, РезультатПроверки);
	
	//С.Получатель
	ПроверитьДанныеПолучателя(ОбъектДокумент,, РезультатПроверки);
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.СтранаОтправления) Тогда
		ТекстСообщения = НСтр("ru = 'Не указана страна в разделе ""Поставщик"".'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРазличныеДанныеУведомленияОВыводеИзОборота(ОбъектДокумент, РезультатПроверки) Экспорт
	
	// Проверка всех обязательных реквизитов
	//Раздел А.Общее
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Номер) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанНомерТекущегоДокумента();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПричинаВыводаИзОборота) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанаПричинаВводаВыводаКМ(); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//В.Поставщик
	ПроверитьДанныеПоставщика(ОбъектДокумент, "ВыводИзОборота", РезультатПроверки);
	
	//Прочее
	Если Не ЗначениеЗаполнено(ОбъектДокумент.ДокументОснованиеНаименование) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказаноНаименованиеОснованияДокументаВводаВыводаКМ();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "ИмяГруппыПолейОснования",  НСтр("ru = 'Отражение в учете'"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "НаименованиеРазделаФормы", НСтр("ru = 'Прочая информация'"));
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокумент.ДокументОснованиеДата) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанаДатаОснованияДокументаВводаВыводаКМ();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "ИмяГруппыПолейОснования",  НСтр("ru = 'Отражение в учете'"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "НаименованиеРазделаФормы", НСтр("ru = 'Прочая информация'"));
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокумент.ДокументОснованиеНомер) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанНомерОснованияДокументаВводаВыводаКМ();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "ИмяГруппыПолейОснования",  НСтр("ru = 'Отражение в учете'"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "НаименованиеРазделаФормы", НСтр("ru = 'Прочая информация'"));
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//D.Марки
	СтруктураРеквизитовМарки = Новый Структура("Код, Количество, GTIN", "", "", "");
	Если ОбъектДокумент.Марки.Количество() > 0 Тогда
		
		НовыйСтруктураРеквизитовМарки = Новый Структура;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитовМарки Цикл
			НовыйСтруктураРеквизитовМарки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		НовыйСтруктураРеквизитовМарки.Код		 = " ДокументИСМПТМарки.КодИдентификации, "; 
		НовыйСтруктураРеквизитовМарки.Количество = " ДокументИСМПТМарки.Количество, ";
		НовыйСтруктураРеквизитовМарки.GTIN		 = " ДокументИСМПТМарки.GTIN, ";
		ТаблицаМарки = ОбъектДокумент.Марки.Выгрузить();
		ПроверитьТаблицуМарки(ОбъектДокумент, ТаблицаМарки, "Марки", НовыйСтруктураРеквизитовМарки, РезультатПроверки);
		
	ИначеЕсли ОбъектДокумент.Марки.Количество() = 0 Тогда	
		
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказаныКодыМаркировкиВТаблицеДокумента();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДокументыСУЗ

Процедура ПроверитьРазличныеДанныеЗаказНаЭмиссиюКодовМаркировкиСУЗ(ОбъектДокумент, РезультатПроверки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Организация) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненаОрганизацияДокумента();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеРаздела%", НСтр("ru = 'Основная информация'"));
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ВидПродукции) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненВидПродукцииВДокументе(); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.СпособВводаВОборот) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен способ выпуска товаров в оборот в разделе ""Основное"".'");
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная") И
		НЕ ЗначениеЗаполнено(ОбъектДокумент.КонтактноеЛицо) Тогда
		ТекстСообщения = НСтр("ru = 'Не указано контактное лицо в разделе ""Основное"".'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") 
		ИЛИ ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда 
		
		Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ИдентификаторПроизводства) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнен идентификатор производства в разделе ""Основное"".'"); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектДокумент.СтранаПроизводителя) Тогда
			ТекстСообщения = НСтр("ru = 'Не указана страна производителя в разделе ""Основное"".'");
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ИдентификаторПроизводственнойЛинии) Тогда
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненИдентификаторПроизводственнойЛинииСУЗ(); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда 
		
		Если НЕ ЗначениеЗаполнено(ОбъектДокумент.КодПродукта) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнен код продукта в разделе ""Основное"".'"); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ОписаниеПродукта) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнено описание продукта в разделе ""Основное"".'"); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектДокумент.СпособВводаВОборот)
		И ОбъектДокумент.СпособВводаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗИСМПТК.Производство")
		И Не ОбъектДокумент.СтранаПроизводства.Код = "398" Тогда
		ТекстСообщения = НСтр("ru = 'Указанная Страна производства не соответствует значению поля ""Способ выпуска товаров в оборот"".'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
		
	//ПроверкаСпособаФормированияСерийныхНомеров
	ТаблицаПроверки = ОбъектДокумент.Товары.Выгрузить(, "GTIN, СпособФормированияСерийногоНомера");
	ТаблицаПроверки.Свернуть("GTIN, СпособФормированияСерийногоНомера");
	ТаблицаПроверки.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаПроверки.ЗаполнитьЗначения(1, "Количество");
	ТаблицаПроверки.Свернуть("GTIN", "Количество");
	
	Для Каждого СтрокаПроверки Из ТаблицаПроверки Цикл
	
		Если СтрокаПроверки.Количество < 2 Тогда
			Продолжить;
		КонецЕсли;
		
		ПоискСтрок = ОбъектДокумент.Товары.НайтиСтроки(Новый Структура("GTIN", СтрокаПроверки.GTIN));
		
		Для Каждого СтрокаТовары Из ПоискСтрок Цикл
			ТекстСообщения = НСтр("ru = 'В строке %1 в таблице ""Товары"" для GTIN %2 отличается способ формирования серийных номеров от других строк.'"); 
			ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаТовары.НомерСтроки, СтрокаТовары.GTIN);
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			Прервать;
		КонецЦикла;
		
	КонецЦикла;
	////
	
	////Проверка табличной части на предмет указания одинаковых штрихкодов. Система СУЗ не принимает документы, в которых указаны одинаковые GTIN в разных строках
	//ПроверитьТоварыПоGTIN
	ТаблицаПроверки = ОбъектДокумент.Товары.Выгрузить(, "GTIN");
	ТаблицаПроверки.Колонки.Добавить("КонтрольнаяСумма", Новый ОписаниеТипов("Число"));
	ТаблицаПроверки.ЗаполнитьЗначения(1, "КонтрольнаяСумма");
	ТаблицаПроверки.Свернуть("GTIN", "КонтрольнаяСумма");
	
	ОбщееСообщениеВыведено = Ложь;
	
	Для Каждого СтрокаПроверки Из ТаблицаПроверки Цикл
	
		Если СтрокаПроверки.КонтрольнаяСумма = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		ПоискСтрок = ОбъектДокумент.Товары.НайтиСтроки(Новый Структура("GTIN", СтрокаПроверки.GTIN));
		
		Если Не ОбщееСообщениеВыведено Тогда 
			ТекстСообщения = НСтр("ru = 'Ошибка в табличной части ""Товары"": нельзя указывать одинаковый код товара в нескольких строках таблицы!'"); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			ОбщееСообщениеВыведено = Истина;
		КонецЕсли;
		
		НомераСтрок= "";
		Для Каждого СтрокаТовары Из ПоискСтрок Цикл
			НомераСтрок = ?(Не ЗначениеЗаполнено(НомераСтрок), СтрокаТовары.НомерСтроки, Строка(НомераСтрок) + ", " + СтрокаТовары.НомерСтроки);
		КонецЦикла;
		
		ТекстСообщенияСтроки = НСтр("ru = 'Ошибка в табличной части ""Товары"": GTIN %2 встречается в строке: %1'");
		ТекстСообщенияСтроки = СтрШаблон(ТекстСообщенияСтроки, НомераСтрок, СтрокаПроверки.GTIN);
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщенияСтроки);
		
	КонецЦикла;
	
	//Проверка на соответствие товарной группе
	//Проверить можем только если в таблице заполнена номенклатура, иначе нет точной информации о ТГ указанного GTIN
	//и шаблон кода выставлляется значением по умолчанию.
	//Поэтому если есть пустая номенклатура - сразу предупреждаем, что данные могут быть недостоверны. 
	ПустаяСсылкаНоменклатура = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьПустуюСсылкуНоменклатура();
	НайденныеСтрокиСПустойНоменклатурой = ОбъектДокумент.Товары.НайтиСтроки(Новый Структура("Номенклатура", ПустаяСсылкаНоменклатура));
	Если Не НайденныеСтрокиСПустойНоменклатурой.Количество() = 0 Тогда 
		ТекстСообщенияСтроки = НСтр("ru = 'В таблице ""Товары"" присутствуют строки с незаполненной Номенклатурой: результат проверки соответствия указанных GTIN товарной группе документа может быть ошибочным.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщенияСтроки);
	КонецЕсли;		
	//Далее проверяем у заполненных строк шаблоны кодов в таблице
	ТаблицаПроверкиШаблонов = ОбъектДокумент.Товары.Выгрузить(, "Шаблон");
	ТаблицаПроверкиШаблонов.Свернуть("Шаблон");
	НадоВывестиСообщениеОШаблонах = Ложь;
	
	Если ТаблицаПроверкиШаблонов.Количество() = 0 Тогда
		ТекстСообщенияСтроки = НСтр("ru = 'Не удалось выполнить проверку документа на соответствие видов продукции: проверьте настройки учета товарных групп маркировки.'");
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщенияСтроки);
	Иначе
	    Если ТаблицаПроверкиШаблонов.Количество() > 1 Тогда
			Если Не ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда
				//Только у табака может быть более 1 уникального шаблона в таблице, для остальных ТГ это сразу ошибка
				НадоВывестиСообщениеОШаблонах = Истина;
			Иначе
				//Для табака допускается не более 2 уникальных шаблонов - пачка и блок.
				//Проверяем, есть ли другие.
				ЭтоТабак = Истина;
				Для Каждого ШаблонПроверка Из ТаблицаПроверкиШаблонов Цикл
					Если Не ШаблонПроверка.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек")
						И Не ШаблонПроверка.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка") Тогда
						ЭтоТабак = Ложь;
					КонецЕсли;
				КонецЦикла;
				Если Не ЭтоТабак Тогда
					НадоВывестиСообщениеОШаблонах = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			//Если шаблон 1, проверяем, соответствует ли он виду продукции документа
			Если (ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная") 
					И Не ТаблицаПроверкиШаблонов[0].Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь"))
				ИЛИ (ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция")
					И Не ТаблицаПроверкиШаблонов[0].Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.МолочнаяПродукция"))
				ИЛИ (ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") 
					И Не ТаблицаПроверкиШаблонов[0].Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты"))
				ИЛИ (ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность") 
					И Не ТаблицаПроверкиШаблонов[0].Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛегкаяПромышленность"))
				ИЛИ (ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") 
					И (Не ТаблицаПроверкиШаблонов[0].Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка")
						И Не ТаблицаПроверкиШаблонов[0].Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек"))) Тогда
					
				ТекстСообщенияСтроки = НСтр("ru = 'В таблице ""Товары"" присутствуют товары, не соответствующие указанному в документе виду продукции.'");
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщенияСтроки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если НадоВывестиСообщениеОШаблонах Тогда
		ТекстСообщенияСтроки = НСтр("ru = 'В табличной части ""Товары"" присутствуют товары разных товарных групп. Необходимо выполнить разбитие Заказа.'");
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщенияСтроки);
	КонецЕсли;
						
	//Иные проверки по Товарам
	ВидПродукции = ОбъектДокумент.ВидПродукции;
	СтруктураРеквизитовМарки = Новый Структура("КоличествоУпаковок, GTIN, Шаблон", "", "", "");
	
	Если ОбъектДокумент.Товары.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.GTIN КАК GTIN,
		|	СУММА(ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Количество) КАК Количество,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Шаблон КАК Шаблон,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка.ВидПродукции КАК ВидПродукции
		|ИЗ
		|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК.Товары КАК ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары
		|ГДЕ
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.GTIN,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Шаблон,
		|	ЗаказНаЭмиссиюКодовМаркировкиСУЗТовары.Ссылка.ВидПродукции";
		
		Запрос.УстановитьПараметр("Ссылка", ОбъектДокумент.Ссылка); 
		Выборка = Запрос.Выполнить().Выбрать();
		
		СообщениеОПревышенииОбщегоКоличестваПоказано = Ложь;
		СообщениеОШаблонахПоказано = Ложь;
		БольшеНеВыводитьСообщениеОПустомКоде = Ложь;
		
		Пока Выборка.Следующий() Цикл
			
			// В заказе есть ограничение по количеству в рамках одного документа (устанавливается сервером):
			// 1) кол-во GTIN не более 10 (для лекарств = 1)
			// 2) кол-во по каждому GTIN не более 150000
			Если (Выборка.Количество() > 10 
				И НЕ Выборка.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты"))
				ИЛИ (Выборка.Количество() > 1 
				И Выборка.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты")) 
				И Не СообщениеОПревышенииОбщегоКоличестваПоказано Тогда
				
				ТекстСообщения = НСтр("ru = 'В таблице ""Товары"" превышено допустимое количество GTIN в заказе.'"); 
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
				СообщениеОПревышенииОбщегоКоличестваПоказано = Истина;
				
			КонецЕсли;
			
			Если Выборка.Количество > 150000 Тогда
				ТекстСообщения = НСтр("ru = 'В таблице ""Товары"" превышено допустимое количество запрашиваемых кодов в рамках GTIN %1.'");
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.GTIN);
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			КонецЕсли;
			
			//Заполненность Шаблона (поле templateId)
			Если Не ЗначениеЗаполнено(Выборка.Шаблон) 
				И Не СообщениеОШаблонахПоказано Тогда
				
				ТекстСообщения = НСтр("ru = 'В таблице ""Товары"" присутствуют строки с пустым полем Вид продукции (Шаблон кода).'"); 
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);				
				СообщениеОШаблонахПоказано = Истина;
				
			КонецЕсли;
			
			//Корректность формата введенных кодов GTIN
			ОшибкаФормата = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПроверитьКорректностьGTIN(Выборка.GTIN);
			Если Не ЗначениеЗаполнено(Выборка.GTIN) И Не БольшеНеВыводитьСообщениеОПустомКоде Тогда
				ТекстСообщения = НСтр("ru = 'В таблице ""Товары"" присутствует строка с незаполненным GTIN!'");
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
				БольшеНеВыводитьСообщениеОПустомКоде = Истина;
			ИначеЕсли СтрДлина(Выборка.GTIN) <> 14 Или Не ОшибкаФормата Тогда
				ТекстСообщения = НСтр("ru = 'В таблице ""Товары"" присутствует некорректный GTIN: %1.'");
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.GTIN);
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			КонецЕсли;
			
		КонецЦикла;

	ИначеЕсли ОбъектДокумент.Товары.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не заполнена табличная часть ""Товары"".'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);

	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРазличныеДанныеНанесениеКодовМаркировкиСУЗ(ОбъектДокумент, РезультатПроверки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Организация) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненаОрганизацияДокумента();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеРаздела%", НСтр("ru = 'Основная информация'"));
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ВидПродукции) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненВидПродукцииВДокументе(); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.НомерПроизводственнойСерии) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен номер производственной серии в разделе ""Основное"".'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.СрокГодности)
		И Не ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен срок годности в разделе ""Основное"".'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ИдентификаторПроизводственнойЛинии)
		И ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненИдентификаторПроизводственнойЛинииСУЗ(); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектДокумент.Товары.Количество() = 0 Тогда 
		ТекстСообщения = НСтр("ru = 'Не заполнена табличная часть ""Товары"".'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Для Каждого СтрокаПроверки Из ОбъектДокумент.Товары Цикл
	
		Если НЕ ЗначениеЗаполнено(СтрокаПроверки.GTIN) Тогда
			ТекстСообщения = НСтр("ru = 'В строке %1 в таблице ""Товары"" не указан GTIN.'"); 
			ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаПроверки.НомерСтроки);
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;

	КонецЦикла;
		
КонецПроцедуры

Процедура ПроверитьРазличныеДанныеАгрегацияКМ(ОбъектДокумент, РезультатПроверки) Экспорт
	
	Товар_ТабакФарма = ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.АльтернативныйТабак") 
				   Или ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") 
				   Или ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты");
	Товар_ОбувьАлкоМолоко = ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Алкогольная") 
						Или ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная") 
						Или ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция");
						
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Организация) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненаОрганизацияДокумента();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеРаздела%", НСтр("ru = 'Основная информация'"));
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ОрганизацияИдентификационныйНомер) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен ИИН/БИН организации.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ВидПродукции) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен вид продукции в разделе ""Основное"".'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если Товар_ТабакФарма Тогда 
		
		Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ИдентификаторПроизводственнойЛинии) Тогда
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненИдентификаторПроизводственнойЛинииСУЗ(); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ИдентификаторПроизводственногоЗаказа) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнен идентификатор производственного заказа в разделе ""Основное"".'"); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	//Проверяем, соответствует ли ТГ в шапке заполненным кодам маркировки
	Для Каждого СтрокаТЧ Из ОбъектДокумент.АгрегированныеКМ Цикл
		Если СтрокаТЧ.ВидПродукции <> ОбъектДокумент.ВидПродукции Тогда
			ТекстСообщения = НСтр("ru = 'В таблице ""Вложенные товары"" присутствуют коды, не относящиеся к указанному в документе виду продукции!'"); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			Прервать;
		КонецЕсли;
	КонецЦикла;

	//Проверяем, скрытую ТЧ Упаковки
	Если Не ОбъектДокумент.Упаковки.Количество() = 1 Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена информация о коде агрегата.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	Иначе 
		Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Упаковки[0].ИдентификационныйКодЕдиницыАгрегации)
			Или НЕ ЗначениеЗаполнено(ОбъектДокумент.Упаковки[0].КодИдентификацииУпаковки) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнен Код агрегата.'"); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
		
		Если (ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") 
			Или (ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная")
			И ОбъектДокумент.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая")))
			И Не СтрДлина(ОбъектДокумент.Упаковки[0].КодИдентификацииУпаковки) = 20 Тогда 
			ТекстСообщения = НСтр("ru = 'Длина указанного Кода агрегата не соответствует установленному формату транспортного кода SSCC.'"); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
				
		ЕмкостьУпаковки 	= ОбъектДокумент.Упаковки[0].ЕмкостьУпаковки;
		УпакованоФактически = ОбъектДокумент.Упаковки[0].ФактическоеКоличествоШтук;
		
		Если НЕ ЗначениеЗаполнено(ЕмкостьУпаковки) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена Ёмкость упаковки.'"); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(УпакованоФактически) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнено значение Фактически упаковано.'"); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЕмкостьУпаковки)
			И ЗначениеЗаполнено(УпакованоФактически)
			И УпакованоФактически > ЕмкостьУпаковки Тогда
			ТекстСообщения = НСтр("ru = 'Указанная ёмкость упаковки меньше, чем количество фактически упакованных единиц.'"); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	//Для документа существует ограничение со стороны правил маркировки товаров:
	//агрегация,т.е. упаковка, в разрезе вложенных товаров может быть только монотоварной, т.е. содержать коды маркировки, 
	//относящиеся только к одному GTIN.
	
	Если ОбъектДокумент.АгрегированныеКМ.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ АгрегацияКодовМаркировкиСУЗИСМПТКАгрегированныеКМ.GTINВерхнегоУровня) КАК GTIN
		|ИЗ
		|	Документ.АгрегацияКодовМаркировкиСУЗИСМПТК.АгрегированныеКМ КАК АгрегацияКодовМаркировкиСУЗИСМПТКАгрегированныеКМ
		|ГДЕ
		|	АгрегацияКодовМаркировкиСУЗИСМПТКАгрегированныеКМ.Ссылка = &Ссылка
		|	И АгрегацияКодовМаркировкиСУЗИСМПТКАгрегированныеКМ.GTINВерхнегоУровня <> """"
		|";
		
		Запрос.УстановитьПараметр("Ссылка", ОбъектДокумент.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не Выборка.GTIN <= 1 //в некоторых случаях возможно указание в качестве вложенных позиций транспортных КМ без GTIN 
				И Не ОбъектДокумент.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная") Тогда
				
				ТекстСообщения = НСтр("ru = 'В составе упаковки указаны товары, принадлежащие к разным кодам GTIN! Упаковка должна быть монотоварной.'"); 
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЦикла;
				
	ИначеЕсли ОбъектДокумент.АгрегированныеКМ.Количество() = 0 Тогда	
		
		ТекстСообщения = НСтр("ru = 'Данные по вложенным товарам не заполнены! Упаковка не должна быть пустой.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);

	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ДокументыИСЦЭДМ

Процедура ПроверитьРазличныеДанныеОтчетаОПередачеКИОтНерезидентаРКИСЦЭДМ(ОбъектДокумент, РезультатПроверки) Экспорт
	
	// Проверка всех обязательных реквизитов
	Если ОбъектДокумент.ДатаВыпискиНаБумажномНосителе <> '00010101000000' И 
		Не ЗначениеЗаполнено(ОбъектДокумент.РегНомерНаБумажномНосителе) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанНомерДокументаВыписанногоНаБумаге();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ДатаОтгрузки) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена Дата отгрузки в разделе ""Общий раздел"".'");
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//В.Поставщик
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Поставщик) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненПоставщик();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПоставщикНаименование) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненоНаименованиеПоставщика();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПоставщикИдентификационныйНомер) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненИИНБИНПоставщика();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//С.Получатель
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Получатель) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненПолучатель();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПолучательНаименование) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненоНаименованиеПолучателя();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПолучательИдентификационныйНомер) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненИИНБИНПолучателя();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//Проверка складов
	Если ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("ВестиУчетПоСкладамИСЦЭДМ") Тогда
		Если ОбъектДокумент.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий")
			И ЗначениеЗаполнено(ОбъектДокумент.Организация)
			И ЗначениеЗаполнено(ОбъектДокумент.СкладЦЭДМ)
			И Не ОбъектДокумент.Организация = ОбъектДокумент.СкладЦЭДМ.Организация Тогда
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОрганизацияНеСоответствуетОрганизацииСкладаЦЭДМ();
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;

	//Перед отправкой и по нажатию команды "Проверить" выполняем проверку заполненности ключевых для АПИ данных в ТЧ марок
	//D.Марки
	СтруктураРеквизитовМарки = Новый Структура("Код, Количество, GTIN", "", "", "");
	Если ОбъектДокумент.Марки.Количество() > 0 Тогда
		
		Для Каждого СтрокаТЧ Из ОбъектДокумент.Марки Цикл
			Если СтрокаТЧ.ВидПродукции <> ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты")
				И Не СтрокаТЧ.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВИСЦЭДМЕстьКодыНеФармПродукции(); 
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		НовыйСтруктураРеквизитовМарки = Новый Структура;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитовМарки Цикл
			НовыйСтруктураРеквизитовМарки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		НовыйСтруктураРеквизитовМарки.Код		 = " ДокументИСМПТМарки.КодИдентификации, "; 
		НовыйСтруктураРеквизитовМарки.Количество = " ДокументИСМПТМарки.Количество, ";
		ТаблицаМарки = ОбъектДокумент.Марки.Выгрузить();
		ПроверитьТаблицуМарки(ОбъектДокумент, ТаблицаМарки, "Марки", НовыйСтруктураРеквизитовМарки, РезультатПроверки);
		
	Иначе	
		
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказаныКодыМаркировкиВТаблицеДокумента();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);

	КонецЕсли;
	
	//Прочее
	Если Не ЗначениеЗаполнено(ОбъектДокумент.Организация) Тогда 
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненаОрганизацияДокумента();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеРаздела%", НСтр("ru = 'Общий раздел'"));
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПроверитьРазличныеДанныеОУведомлениеОВвозеИзЕАЭСИСЦЭДМ(ОбъектДокумент, РезультатПроверки) Экспорт
	
	Если ОбъектДокумент.ДатаВыпискиНаБумажномНосителе <> '00010101000000' И 
		Не ЗначениеЗаполнено(ОбъектДокумент.РегНомерНаБумажномНосителе) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанНомерДокументаВыписанногоНаБумаге();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//В.Поставщик
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Поставщик) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненПоставщик();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПоставщикНаименование) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненоНаименованиеПоставщика();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПоставщикИдентификационныйНомер) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненИИНБИНПоставщика();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.СтранаОтправления) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена страна отправления в разделе ""Поставщик"".'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//С.Получатель
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Получатель) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненПолучатель();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПолучательНаименование) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненоНаименованиеПолучателя();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПолучательИдентификационныйНомер) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненИИНБИНПолучателя();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//Проверка складов
	Если ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("ВестиУчетПоСкладамИСЦЭДМ")
		И ЗначениеЗаполнено(ОбъектДокумент.Организация)
		И ЗначениеЗаполнено(ОбъектДокумент.СкладЦЭДМ)
		И Не ОбъектДокумент.Организация = ОбъектДокумент.СкладЦЭДМ.Организация Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОрганизацияНеСоответствуетОрганизацииСкладаЦЭДМ();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;

	//Перед отправкой и по нажатию команды "Проверить" выполняем проверку заполненности ключевых для АПИ данных в ТЧ марок
	//D.Марки
	Если ОбъектДокумент.Марки.Количество() > 0 Тогда
		
		Для Каждого СтрокаТЧ Из ОбъектДокумент.Марки Цикл
			Если СтрокаТЧ.ВидПродукции <> ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") 
				И Не СтрокаТЧ.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВИСЦЭДМЕстьКодыНеФармПродукции(); 
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		//Обязательным для заполнения реквизитом является только КИ
		Для Каждого СтрокаМарки Из ОбъектДокумент.Марки Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаМарки.КодИдентификации) Тогда
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненКодИдентификацииВТаблицеМарки(); 
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказаныКодыМаркировкиВТаблицеДокумента();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);

	КонецЕсли;
	
	//Итоги
	СтрокиБезЦены = ОбъектДокумент.Итоги.НайтиСтроки(Новый Структура("Цена", 0));
	Если Не СтрокиБезЦены.Количество() = 0 Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненаЦенаВТаблицеИтоги(); 
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	//Если ОбъектДокумент.Итоги.Количество() = 0 Тогда
	//	ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненыИтоги();
	//	РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	//КонецЕсли;
		
	//Прочее
	Если Не ЗначениеЗаполнено(ОбъектДокумент.Организация) Тогда 
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненаОрганизацияДокумента();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеРаздела%", НСтр("ru = 'Прочая информация'"));
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
   
КонецПроцедуры

Процедура ПроверитьРазличныеДанныеОУведомлениеОВвозеИзТретьихСтранИСЦЭДМ(ОбъектДокумент, РезультатПроверки) Экспорт
	
	Если ОбъектДокумент.ДатаВыпискиНаБумажномНосителе <> '00010101000000' И 
		Не ЗначениеЗаполнено(ОбъектДокумент.РегНомерНаБумажномНосителе) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанНомерДокументаВыписанногоНаБумаге();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//В.Таможенные документы
	Если Не ЗначениеЗаполнено(ОбъектДокумент.СтранаОтправления) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненаСтранаЭкспорта();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	//Таможенное оформление
	Если Не ЗначениеЗаполнено(ОбъектДокумент.ТипДокументаТаможенногоОформления) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеуказанТипДокументаТаможенногоОформления(); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокумент.ДатаДокументаТаможенногоОформления) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненаДатаДокументаТаможенногоОформления(); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокумент.НомерДокументаТаможенногоОформления) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненНомерДокументаТаможенногоОформления(); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	//Решение НО
	Если Не ЗначениеЗаполнено(ОбъектДокумент.КодТаможенногоОргана) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненКодТаможенногоОргана(); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	ИначеЕсли СтрДлина(ОбъектДокумент.КодТаможенногоОргана) <> 5 Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДлинаПоляКодТаможенногоОргана(); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокумент.КодРешенияТаможенногоОргана) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненКодРешенияТаможенногоОргана(); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокумент.ДатаВремяПринятияРешения) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказаныДатаВремяПринятияРешенияПоТаможне(); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//С.Получатель
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Получатель) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненПолучатель();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПолучательНаименование) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненоНаименованиеПолучателя();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПолучательИдентификационныйНомер) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненИИНБИНПолучателя();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//Проверка складов
	Если ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("ВестиУчетПоСкладамИСЦЭДМ")
		И ЗначениеЗаполнено(ОбъектДокумент.Организация)
		И ЗначениеЗаполнено(ОбъектДокумент.СкладЦЭДМ)
		И Не ОбъектДокумент.Организация = ОбъектДокумент.СкладЦЭДМ.Организация Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОрганизацияНеСоответствуетОрганизацииСкладаЦЭДМ();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;

	//Перед отправкой и по нажатию команды "Проверить" выполняем проверку заполненности ключевых для АПИ данных в ТЧ марок
	//D.Марки
	Если ОбъектДокумент.Марки.Количество() > 0 Тогда
		
		Для Каждого СтрокаТЧ Из ОбъектДокумент.Марки Цикл
			Если СтрокаТЧ.ВидПродукции <> ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") 
				И Не СтрокаТЧ.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВИСЦЭДМЕстьКодыНеФармПродукции(); 
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		//Обязательным для заполнения реквизитом является только КИ
		Для Каждого СтрокаМарки Из ОбъектДокумент.Марки Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаМарки.КодИдентификации) Тогда
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненКодИдентификацииВТаблицеМарки(); 
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			КонецЕсли;
		КонецЦикла;
		
	Иначе	
		
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказаныКодыМаркировкиВТаблицеДокумента();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);

	КонецЕсли;
	
	//Итоги
	СтрокиБезЦены = ОбъектДокумент.Итоги.НайтиСтроки(Новый Структура("Цена", 0));
	Если Не СтрокиБезЦены.Количество() = 0 Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненаЦенаВТаблицеИтоги(); 
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	//Если ОбъектДокумент.Итоги.Количество() = 0 Тогда
	//	ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненыИтоги();
	//	РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	//КонецЕсли;
		
	//Прочее
	Если Не ЗначениеЗаполнено(ОбъектДокумент.Организация) Тогда 
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненаОрганизацияДокумента();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеРаздела%", НСтр("ru = 'Прочая информация'"));
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРазличныеДанныеАктПриемаПередачиИСЦЭДМ(ОбъектДокумент, РезультатПроверки) Экспорт
	
	// Проверка всех обязательных реквизитов
	//Раздел А.Общее
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Номер) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанНомерТекущегоДокумента();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ВидОперации) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанВидОперацииДокумента(); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектДокумент.ДатаВыпискиНаБумажномНосителе <> '00010101000000' И 
		Не ЗначениеЗаполнено(ОбъектДокумент.РегНомерНаБумажномНосителе) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанНомерДокументаВыписанногоНаБумаге();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;

	Если ОбъектДокумент.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСЦЭДМ.Реализация") Тогда
		Если Не ЗначениеЗаполнено(Константы.ЕдиныйДистрибьюторЛСИСЦЭДМ.Получить()) Тогда
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказаныДанныеЕдиногоДистрибьютораЛС();
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	//В.Поставщик
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Поставщик) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненПоставщик();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПоставщикНаименование) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненоНаименованиеПоставщика();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПоставщикИдентификационныйНомер) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненИИНБИНПоставщика();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//С.Получатель
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Получатель) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненПолучатель();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПолучательНаименование) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненоНаименованиеПолучателя();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПолучательИдентификационныйНомер) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненИИНБИНПолучателя();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//Проверка складов
	Если ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("ВестиУчетПоСкладамИСЦЭДМ") Тогда
		Если ОбъектДокумент.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий")
			И ЗначениеЗаполнено(ОбъектДокумент.Организация)
			И ЗначениеЗаполнено(ОбъектДокумент.СкладЦЭДМ)
			И Не ОбъектДокумент.Организация = ОбъектДокумент.СкладЦЭДМ.Организация Тогда
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОрганизацияНеСоответствуетОрганизацииСкладаЦЭДМ();
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;

	//Перед отправкой и по нажатию команды "Проверить" выполняем проверку заполненности ключевых для АПИ данных в ТЧ марок
	//D.Марки
	СтруктураРеквизитовМарки = Новый Структура("Код, Количество, GTIN", "", "", "");
	Если ОбъектДокумент.Марки.Количество() > 0 Тогда
		
		Для Каждого СтрокаТЧ Из ОбъектДокумент.Марки Цикл
			Если СтрокаТЧ.ВидПродукции <> ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") 
				И Не СтрокаТЧ.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВИСЦЭДМЕстьКодыНеФармПродукции(); 
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		НовыйСтруктураРеквизитовМарки = Новый Структура;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитовМарки Цикл
			НовыйСтруктураРеквизитовМарки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		НовыйСтруктураРеквизитовМарки.Код		 = " ДокументИСМПТМарки.КодИдентификации, "; 
		НовыйСтруктураРеквизитовМарки.Количество = " ДокументИСМПТМарки.Количество, ";
		ТаблицаМарки = ОбъектДокумент.Марки.Выгрузить();
		ПроверитьТаблицуМарки(ОбъектДокумент, ТаблицаМарки, "Марки", НовыйСтруктураРеквизитовМарки, РезультатПроверки);
		
	Иначе	
		
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказаныКодыМаркировкиВТаблицеДокумента();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);

	КонецЕсли;
	
	//Итоги
	СтрокиБезЦены = ОбъектДокумент.Итоги.НайтиСтроки(Новый Структура("Цена", 0));
	Если Не СтрокиБезЦены.Количество() = 0 Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненаЦенаВТаблицеИтоги(); 
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	//Если ОбъектДокумент.Итоги.Количество() = 0 Тогда
	//	ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненыИтоги();
	//	РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	//КонецЕсли;
		
	//Прочее
	Если Не ЗначениеЗаполнено(ОбъектДокумент.Организация) Тогда 
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненаОрганизацияДокумента();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеРаздела%", НСтр("ru = 'Прочая информация'"));
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРазличныеДанныеАктВнутреннегоПеремещенияИСЦЭДМ(ОбъектДокумент, РезультатПроверки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Организация) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненаОрганизацияДокумента();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеРаздела%", НСтр("ru = 'Общий раздел'"));
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ВидОперации) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанВидОперацииДокумента(); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	ИначеЕсли ОбъектДокумент.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСЦЭДМ.ВнутреннееПеремещениеЕД") Тогда
		Если Не ЗначениеЗаполнено(Константы.ЕдиныйДистрибьюторЛСИСЦЭДМ.Получить()) Тогда
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказаныДанныеЕдиногоДистрибьютораЛС();
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Поставщик) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненПоставщик();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПоставщикНаименование) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненоНаименованиеПоставщика();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПоставщикИдентификационныйНомер) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненИИНБИНПоставщика();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Получатель) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненПолучатель();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПолучательНаименование) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненоНаименованиеПолучателя();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПолучательИдентификационныйНомер) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненИИНБИНПолучателя();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектДокумент.ДатаВыпискиНаБумажномНосителе <> '00010101000000' И 
		Не ЗначениеЗаполнено(ОбъектДокумент.РегНомерНаБумажномНосителе) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанНомерДокументаВыписанногоНаБумаге();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//Проверяем, что в документе только одна организация 
	ТипОрганизация = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьТипОрганизации();
	Если (ЗначениеЗаполнено(ОбъектДокумент.Поставщик) И ТипЗнч(ОбъектДокумент.Поставщик) = ТипОрганизация)
		И (ЗначениеЗаполнено(ОбъектДокумент.Получатель) И ТипЗнч(ОбъектДокумент.Получатель) = ТипОрганизация) Тогда 
		ТекстСообщения = НСтр("ru = 'Поставщик и Получатель одновременно не могут быть элементами справочника Организации!'");
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	Если (ЗначениеЗаполнено(ОбъектДокумент.Поставщик) И ТипЗнч(ОбъектДокумент.Поставщик) = ТипОрганизация)
		И ЗначениеЗаполнено(ОбъектДокумент.Организация) 
		И НЕ ОбъектДокумент.Организация = ОбъектДокумент.Поставщик Тогда 
		ТекстСообщения = НСтр("ru = 'Организация, указанная в документе, не соответствует значению организации, указанной в поле ""Поставщик""!'");
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	Если (ЗначениеЗаполнено(ОбъектДокумент.Получатель) И ТипЗнч(ОбъектДокумент.Получатель) = ТипОрганизация)
		И ЗначениеЗаполнено(ОбъектДокумент.Организация) 
		И НЕ ОбъектДокумент.Организация = ОбъектДокумент.Получатель Тогда 
		ТекстСообщения = НСтр("ru = 'Организация, указанная в документе, не соответствует значению организации, указанной в поле ""Получатель""!'");
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОбъектДокумент.Получатель)
		И ЗначениеЗаполнено(ОбъектДокумент.Поставщик) 
		И ОбъектДокумент.Поставщик = ОбъектДокумент.Получатель Тогда 
		ТекстСообщения = НСтр("ru = 'Значения в полях ""Поставщик"" и ""Получатель"" не могут совпадать!'");
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли; 
	
	Если (ЗначениеЗаполнено(ОбъектДокумент.Поставщик) И ТипЗнч(ОбъектДокумент.Поставщик) = ТипОрганизация)
		И Не СтрДлина(ОбъектДокумент.ПоставщикИдентификационныйНомер) = 12 Тогда
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИИНБИНПоставщикаНекорректен(); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	Если (ЗначениеЗаполнено(ОбъектДокумент.Поставщик) И ТипЗнч(ОбъектДокумент.Поставщик) = Тип("СправочникСсылка.СкладыИСЦЭДМ"))
		И Не СтрДлина(ОбъектДокумент.ПоставщикИдентификационныйНомер) >= 16 Тогда
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИИНБИНПоставщикаНекорректен(); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	Если (ЗначениеЗаполнено(ОбъектДокумент.Получатель) И ТипЗнч(ОбъектДокумент.Получатель) = ТипОрганизация)
		И Не СтрДлина(ОбъектДокумент.ПолучательИдентификационныйНомер) = 12 Тогда
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИИНБИНПолучателяНекорректен(); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	Если (ЗначениеЗаполнено(ОбъектДокумент.Получатель) И ТипЗнч(ОбъектДокумент.Получатель) = Тип("СправочникСсылка.СкладыИСЦЭДМ"))
		И Не СтрДлина(ОбъектДокумент.ПолучательИдентификационныйНомер) >= 16 Тогда
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИИНБИНПолучателяНекорректен(); 
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
		
	//Проверка складов
	Если (ЗначениеЗаполнено(ОбъектДокумент.Поставщик) И ТипЗнч(ОбъектДокумент.Поставщик) = Тип("СправочникСсылка.СкладыИСЦЭДМ"))
		И ЗначениеЗаполнено(ОбъектДокумент.Организация) 
		И Не ОбъектДокумент.Организация = ОбъектДокумент.Поставщик.Организация Тогда
		ТекстСообщения = НСтр("ru = 'Склад ЦЭДМ, указанный в поле ""Поставщик"", не соответствует выбранной в документе Организации!'");
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	Если (ЗначениеЗаполнено(ОбъектДокумент.Получатель) И ТипЗнч(ОбъектДокумент.Получатель) = Тип("СправочникСсылка.СкладыИСЦЭДМ"))
		И ЗначениеЗаполнено(ОбъектДокумент.Организация) 
		И Не ОбъектДокумент.Организация = ОбъектДокумент.Получатель.Организация Тогда
		ТекстСообщения = НСтр("ru = 'Склад ЦЭДМ, указанный в поле ""Получатель"", не соответствует выбранной в документе Организации!'");
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//Проверяем, соответствует ли ТГ в шапке заполненным кодам маркировки
	Если ОбъектДокумент.Марки.Количество() = 0 Тогда	
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказаныКодыМаркировкиВТаблицеДокумента();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	Иначе
		Для Каждого СтрокаТЧ Из ОбъектДокумент.Марки Цикл
			Если СтрокаТЧ.ВидПродукции <> ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") 
				И Не СтрокаТЧ.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВИСЦЭДМЕстьКодыНеФармПродукции(); 
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураРеквизитовМарки = Новый Структура("Код, Количество, GTIN", "", "", "");
		НовыйСтруктураРеквизитовМарки = Новый Структура;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитовМарки Цикл
			НовыйСтруктураРеквизитовМарки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		НовыйСтруктураРеквизитовМарки.Код		 = " ДокументИСМПТМарки.КодИдентификации, "; 
		НовыйСтруктураРеквизитовМарки.Количество = " ДокументИСМПТМарки.Количество, ";
		ТаблицаМарки = ОбъектДокумент.Марки.Выгрузить();
		ПроверитьТаблицуМарки(ОбъектДокумент, ТаблицаМарки, "Марки", НовыйСтруктураРеквизитовМарки, РезультатПроверки);
		
	КонецЕсли;
    	
КонецПроцедуры

Процедура ПроверитьРазличныеДанныеУведомлениеОВыводеИзОборотаИСЦЭДМ(ОбъектДокумент, РезультатПроверки) Экспорт
	
	// Проверка всех обязательных реквизитов
	//Раздел А.Общее
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Организация) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненаОрганизацияДокумента();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеРаздела%", НСтр("ru = 'Информация отправителя'"));
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Номер) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанНомерТекущегоДокумента();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПричинаВыводаИзОборота) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанаПричинаВводаВыводаКМ(); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//В.Поставщик
	ИмяРаздела = НСтр("ru = 'Отправитель'");
	ПроверитьДанныеПоставщика(ОбъектДокумент, "ВыводИзОборота", РезультатПроверки, ИмяРаздела);
	
	Если ЗначениеЗаполнено(ОбъектДокумент.СкладЦЭДМ) 
		И Не ОбъектДокумент.Организация = ОбъектДокумент.СкладЦЭДМ.Организация Тогда 
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОрганизацияНеСоответствуетОрганизацииСкладаЦЭДМ();
	    РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//Прочее
	Если Не ЗначениеЗаполнено(ОбъектДокумент.ДокументОснованиеНаименование) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказаноНаименованиеОснованияДокументаВводаВыводаКМ();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "ИмяГруппыПолейОснования",  НСтр("ru = 'Основание'"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "НаименованиеРазделаФормы", НСтр("ru = 'Общий раздел'"));
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокумент.ДокументОснованиеДата) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанаДатаОснованияДокументаВводаВыводаКМ();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "ИмяГруппыПолейОснования",  НСтр("ru = 'Основание'"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "НаименованиеРазделаФормы", НСтр("ru = 'Общий раздел'"));
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокумент.ДокументОснованиеНомер) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанНомерОснованияДокументаВводаВыводаКМ();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "ИмяГруппыПолейОснования",  НСтр("ru = 'Основание'"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "НаименованиеРазделаФормы", НСтр("ru = 'Общий раздел'"));
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//D.Марки
	СтруктураРеквизитовМарки = Новый Структура("Код, Количество, GTIN", "", "", "");
	Если ОбъектДокумент.Марки.Количество() > 0 Тогда
		
		Для Каждого СтрокаТЧ Из ОбъектДокумент.Марки Цикл
			Если СтрокаТЧ.ВидПродукции <> ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") 
				И Не СтрокаТЧ.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВИСЦЭДМЕстьКодыНеФармПродукции(); 
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		НовыйСтруктураРеквизитовМарки = Новый Структура;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитовМарки Цикл
			НовыйСтруктураРеквизитовМарки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		НовыйСтруктураРеквизитовМарки.Код		 = " ДокументИСМПТМарки.КодИдентификации, "; 
		НовыйСтруктураРеквизитовМарки.Количество = " ДокументИСМПТМарки.Количество, ";
		ТаблицаМарки = ОбъектДокумент.Марки.Выгрузить();
		ПроверитьТаблицуМарки(ОбъектДокумент, ТаблицаМарки, "Марки", НовыйСтруктураРеквизитовМарки, РезультатПроверки);
		
	ИначеЕсли ОбъектДокумент.Марки.Количество() = 0 Тогда	
		
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказаныКодыМаркировкиВТаблицеДокумента();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);

	КонецЕсли;

	//Итоги
	СтрокиБезЦены = ОбъектДокумент.Итоги.НайтиСтроки(Новый Структура("Цена", 0));
	Если Не СтрокиБезЦены.Количество() = 0 Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненаЦенаВТаблицеИтоги(); 
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	//Если ОбъектДокумент.Итоги.Количество() = 0 Тогда
	//	ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненыИтоги();
	//	РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	//КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРазличныеДанныеУведомлениеОВводеВОборотИСЦЭДМ(ОбъектДокумент, РезультатПроверки) Экспорт
	
	// Проверка всех обязательных реквизитов
	//Раздел А.Общее
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Организация) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненаОрганизацияДокумента();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеРаздела%", НСтр("ru = 'Информация отправителя'"));
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Номер) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанНомерТекущегоДокумента(); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПричинаВводаВОборот) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанаПричинаВводаВыводаКМ(); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//В.Поставщик
	ИмяРаздела = НСтр("ru = 'Отправитель'");
	ПроверитьДанныеПоставщика(ОбъектДокумент, "ВводВОборот", РезультатПроверки, ИмяРаздела);
	
	//Прочее
	Если Не ЗначениеЗаполнено(ОбъектДокумент.ДокументОснованиеНаименование) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказаноНаименованиеОснованияДокументаВводаВыводаКМ();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "ИмяГруппыПолейОснования",  НСтр("ru = 'Основание'"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "НаименованиеРазделаФормы", НСтр("ru = 'Общий раздел'"));
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокумент.ДокументОснованиеДата) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанаДатаОснованияДокументаВводаВыводаКМ();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "ИмяГруппыПолейОснования",  НСтр("ru = 'Основание'"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "НаименованиеРазделаФормы", НСтр("ru = 'Общий раздел'"));
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектДокумент.ДокументОснованиеНомер) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанНомерОснованияДокументаВводаВыводаКМ();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "ИмяГруппыПолейОснования",  НСтр("ru = 'Основание'"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "НаименованиеРазделаФормы", НСтр("ru = 'Общий раздел'"));
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектДокумент.СкладЦЭДМ) 
		И Не ОбъектДокумент.Организация = ОбъектДокумент.СкладЦЭДМ.Организация Тогда 
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОрганизацияНеСоответствуетОрганизацииСкладаЦЭДМ();
	    РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//D.Марки
	СтруктураРеквизитовМарки = Новый Структура("Код, Количество, GTIN", "", "", "");
	Если ОбъектДокумент.Марки.Количество() > 0 Тогда
		
		Для Каждого СтрокаТЧ Из ОбъектДокумент.Марки Цикл
			Если СтрокаТЧ.ВидПродукции <> ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") 
				И Не СтрокаТЧ.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияВИСЦЭДМЕстьКодыНеФармПродукции(); 
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		НовыйСтруктураРеквизитовМарки = Новый Структура;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитовМарки Цикл
			НовыйСтруктураРеквизитовМарки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		НовыйСтруктураРеквизитовМарки.Код		 = " ДокументИСМПТМарки.КодИдентификации, "; 
		НовыйСтруктураРеквизитовМарки.Количество = " ДокументИСМПТМарки.Количество, ";
		ТаблицаМарки = ОбъектДокумент.Марки.Выгрузить();
		ПроверитьТаблицуМарки(ОбъектДокумент, ТаблицаМарки, "Марки", НовыйСтруктураРеквизитовМарки, РезультатПроверки);
		
	ИначеЕсли ОбъектДокумент.Марки.Количество() = 0 Тогда	
		
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказаныКодыМаркировкиВТаблицеДокумента();
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);

	КонецЕсли;
	
	//Итоги
	СтрокиБезЦены = ОбъектДокумент.Итоги.НайтиСтроки(Новый Структура("Цена", 0));
	Если Не СтрокиБезЦены.Количество() = 0 Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненаЦенаВТаблицеИтоги();
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	//Если ОбъектДокумент.Итоги.Количество() = 0 Тогда
	//	ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненыИтоги();
	//	РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	//КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРазличныеДанныеАгрегацияВнеПроизводстваИСЦЭДМ(ОбъектДокумент, РезультатПроверки) Экспорт
	
	Если Константы.ВестиУчетПоСкладамИСЦЭДМ.Получить()
		И НЕ ЗначениеЗаполнено(ОбъектДокумент.Организация) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеЗаполненаОрганизацияДокумента();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеРаздела%", НСтр("ru = 'Основное'"));
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.Поставщик) Тогда
		ТекстСообщения = НСтр("ru = 'Не указан поставщик в разделе ""Основное"".'");
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	Иначе
		Если ТипЗнч(ОбъектДокумент.Поставщик) = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьТипОрганизации() Тогда
			
			Если Не ОбъектДокумент.Поставщик = ОбъектДокумент.Организация Тогда
				ТекстСообщения = НСтр("ru = 'В документе указаны разные значения в полях ""Поставщик"" и ""Организация"".'"); 
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			КонецЕсли;
			Если Не СтрДлина(ОбъектДокумент.ПоставщикИдентификационныйНомер) = 12 Тогда
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИИНБИНПоставщикаНекорректен();
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ОбъектДокумент.Поставщик) = Тип("СправочникСсылка.СкладыИСЦЭДМ") Тогда
			
			Если Не ОбъектДокумент.Поставщик.Организация = ОбъектДокумент.Организация Тогда
				ТекстСообщения = НСтр("ru = 'Организация, указанная в документе, не соответствует значению организации, для которой зарегистрированн указанный в поле ""Поставщик"" склад ЦЭДМ.'");
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			КонецЕсли;
			Если Не СтрДлина(ОбъектДокумент.ПоставщикИдентификационныйНомер) >= 16 Тогда
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИИНБИНПоставщикаНекорректен(); 
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			КонецЕсли;
			
		КонецЕсли;			
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.ПоставщикИдентификационныйНомер) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен ИИН/БИН поставщика в разделе ""Основное"".'");
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//Проверка кода агрегата
	Если НЕ ЗначениеЗаполнено(ОбъектДокумент.КодАгрегата) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен Код упаковки.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	Иначе
		КодАгрегатаBase64 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.СтрокуВBase64(ОбъектДокумент.КодАгрегата);
		ДанныеПроверки = Новый Структура("Штрихкод, Количество, ФорматBase64", КодАгрегатаBase64, 1, Истина);
		ДанныеШтрихкода = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйВызовСервера.ПолучитьДанныеРазбораКМ(ДанныеПроверки);
		Если ДанныеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодовИСМПТК.SSCC") 
			И Не СтрДлина(ДанныеШтрихкода.КодМаркировки) = 20 Тогда
			ТекстСообщения = НСтр("ru = 'Длина указанного Кода упаковки не соответствует установленному формату транспортного кода SSCC.'");
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;  
	
	//Проверяем, соответствует ли ТГ в шапке заполненным кодам маркировки
	Если ОбъектДокумент.АгрегированныеКМ.Количество() = 0 Тогда	
		ТекстСообщения = НСтр("ru = 'Данные по вложенным товарам не заполнены! Упаковка не должна быть пустой.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	Иначе
		Для Каждого СтрокаТЧ Из ОбъектДокумент.АгрегированныеКМ Цикл
			Если СтрокаТЧ.ВидПродукции <> ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") Тогда
				ТекстСообщения = НСтр("ru = 'В таблице ""Вложенные коды"" присутствуют марки, не относящиеся к указанному в документе виду продукции!'"); 
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбменИСЦЭДМ

//Определяет тип документа по ссылке
//
Функция ОпределитьТипДокументаПоСсылке(ДокументСсылка) Экспорт
	
	ТипДокументаИСЦЭДМ = "";
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктПриемаПередачиИСЦЭДМ") Тогда
		
		ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСЦЭДМ();
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.УведомлениеОВводеВОборотИСЦЭДМ") Тогда
		
		ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСЦЭДМ();
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.УведомлениеОВыводеИзОборотаИСЦЭДМ") Тогда
		
		ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСЦЭДМ();
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ") Тогда
		
		ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ(); 
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСЦЭДМ") Тогда
		
		ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСЦЭДМ();
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСЦЭДМ") Тогда
		
		ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСЦЭДМ(); 
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АгрегацияВнеПроизводстваИСЦЭДМ") Тогда
		
		ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАгрегацияВнеПроизводстваИСЦЭДМ(); 
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктВнутреннегоПеремещенияИСЦЭДМ") Тогда
		
		ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктВнутреннегоПеремещенияИСЦЭДМ();
		
	КонецЕсли;
	
	Возврат ТипДокументаИСЦЭДМ;
	
КонецФункции

#Область ПроверкаДокументов

Функция ПроверитьДокументИСЦЭДМ(СсылкаДокумент) Экспорт
	
	Если ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.АктПриемаПередачиИСЦЭДМ") Тогда
		
		Возврат ПроверитьАПП_ИСЦЭДМ(СсылкаДокумент);
		
	ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.УведомлениеОВводеВОборотИСЦЭДМ") Тогда
		
		Возврат ПроверитьУведомлениеОВводеВОборот_ИСЦЭДМ(СсылкаДокумент);
		
	ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.УведомлениеОВыводеИзОборотаИСЦЭДМ") Тогда
		
		Возврат ПроверитьУведомлениеОВыводеИзОборота_ИСЦЭДМ(СсылкаДокумент); 
		
	ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.АгрегацияВнеПроизводстваИСЦЭДМ") Тогда
		
		Возврат ПроверитьАгрегацияВнеПроизводства_ИСЦЭДМ(СсылкаДокумент); 
		
	ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.АктВнутреннегоПеремещенияИСЦЭДМ") Тогда
		
		Возврат ПроверитьАктВнутреннегоПеремещения_ИСЦЭДМ(СсылкаДокумент);
		
	ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.ОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ") Тогда
		
		Возврат ПроверитьОтчетОПередачеКИОтНерезидентаРК_ИСЦЭДМ(СсылкаДокумент); 
		
	ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСЦЭДМ") Тогда
		
		Возврат ПроверитьУведомлениеОВвозеИзЕАЭС_ИСЦЭДМ(СсылкаДокумент); 
		
	ИначеЕсли ТипЗнч(СсылкаДокумент) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСЦЭДМ") Тогда
		
		Возврат ПроверитьУведомлениеОВвозеИзТретьихСтран_ИСЦЭДМ(СсылкаДокумент);
		
	КонецЕсли;
	
КонецФункции

Функция ПустойРезультатПроверкиДокументИСЦЭДМ() Экспорт
	
	РезультатПроверки = Новый Структура;
	
	РезультатПроверки.Вставить("УведомительныеОшибки", Новый Массив);
	РезультатПроверки.Вставить("ЗапрещающиеОшибки",    Новый Массив);
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПроверитьАПП_ИСЦЭДМ(СсылкаДокумент) Экспорт
	
	РезультатПроверки = ПустойРезультатПроверкиДокументИСЦЭДМ();
	
	// Объект ДокументИСЦЭДМ не записывается, он получается только для сокращения обращений к ИБ.
	ОбъектДокумент = СсылкаДокумент.ПолучитьОбъект();
	
	Попытка
		ПроверитьРазличныеДанныеАктПриемаПередачиИСЦЭДМ(ОбъектДокумент, РезультатПроверки);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстСообщения = НСтр("ru = 'При проверке заполнения документа ""%Наименование%"" возникла ошибка:'")
					   + Символы.ПС
					   + ПодробноеПредставлениеОшибки;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Наименование%", Метаданные.Документы.АктПриемаПередачиИСЦЭДМ.Представление());
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПроверитьУведомлениеОВводеВОборот_ИСЦЭДМ(СсылкаДокумент) Экспорт
	
	РезультатПроверки = ПустойРезультатПроверкиДокументИСЦЭДМ();
	
	// Объект ДокументИСЦЭДМ не записывается, он получается только для сокращения обращений к ИБ.
	ОбъектДокумент = СсылкаДокумент.ПолучитьОбъект();
	
	Попытка
		ПроверитьРазличныеДанныеУведомлениеОВводеВОборотИСЦЭДМ(ОбъектДокумент, РезультатПроверки);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстСообщения = НСтр("ru = 'При проверке заполнения документа ""%Наименование%"" возникла ошибка:'")
					   + Символы.ПС
					   + ПодробноеПредставлениеОшибки;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Наименование%", Метаданные.Документы.УведомлениеОВводеВОборотИСЦЭДМ.Представление());
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПроверитьУведомлениеОВыводеИзОборота_ИСЦЭДМ(СсылкаДокумент) Экспорт
	
	РезультатПроверки = ПустойРезультатПроверкиДокументИСЦЭДМ();
	
	// Объект ДокументИСЦЭДМ не записывается, он получается только для сокращения обращений к ИБ.
	ОбъектДокумент = СсылкаДокумент.ПолучитьОбъект();
	
	Попытка
		ПроверитьРазличныеДанныеУведомлениеОВыводеИзОборотаИСЦЭДМ(ОбъектДокумент, РезультатПроверки);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстСообщения = НСтр("ru = 'При проверке заполнения документа ""%Наименование%"" возникла ошибка:'")
					   + Символы.ПС
					   + ПодробноеПредставлениеОшибки;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Наименование%", Метаданные.Документы.УведомлениеОВыводеИзОборотаИСЦЭДМ.Представление());
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПроверитьАгрегацияВнеПроизводства_ИСЦЭДМ(СсылкаДокумент) Экспорт
	
	РезультатПроверки = ПустойРезультатПроверкиДокументИСЦЭДМ();
	
	// Объект ДокументИСЦЭДМ не записывается, он получается только для сокращения обращений к ИБ.
	ОбъектДокумент = СсылкаДокумент.ПолучитьОбъект();
	
	Попытка
		ПроверитьРазличныеДанныеАгрегацияВнеПроизводстваИСЦЭДМ(ОбъектДокумент, РезультатПроверки);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстСообщения = НСтр("ru = 'При проверке заполнения документа ""%Наименование%"" возникла ошибка:'")
					   + Символы.ПС
					   + ПодробноеПредставлениеОшибки;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Наименование%", Метаданные.Документы.АгрегацияВнеПроизводстваИСЦЭДМ.Представление());		
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПроверитьАктВнутреннегоПеремещения_ИСЦЭДМ(СсылкаДокумент) Экспорт
	
	РезультатПроверки = ПустойРезультатПроверкиДокументИСЦЭДМ();
	
	// Объект ДокументИСЦЭДМ не записывается, он получается только для сокращения обращений к ИБ.
	ОбъектДокумент = СсылкаДокумент.ПолучитьОбъект();
	
	Попытка
		ПроверитьРазличныеДанныеАктВнутреннегоПеремещенияИСЦЭДМ(ОбъектДокумент, РезультатПроверки);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстСообщения = НСтр("ru = 'При проверке заполнения документа ""%Наименование%"" возникла ошибка:'")
					   + Символы.ПС
					   + ПодробноеПредставлениеОшибки;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Наименование%", Метаданные.Документы.АктВнутреннегоПеремещенияИСЦЭДМ.Представление());	
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПроверитьОтчетОПередачеКИОтНерезидентаРК_ИСЦЭДМ(СсылкаДокумент) Экспорт
	
	РезультатПроверки = ПустойРезультатПроверкиДокументИСЦЭДМ();
	
	// Объект ДокументИСЦЭДМ не записывается, он получается только для сокращения обращений к ИБ.
	ОбъектДокумент = СсылкаДокумент.ПолучитьОбъект();
	
	Попытка
		ПроверитьРазличныеДанныеОтчетаОПередачеКИОтНерезидентаРКИСЦЭДМ(ОбъектДокумент, РезультатПроверки);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстСообщения = НСтр("ru = 'При проверке заполнения документа ""%Наименование%"" возникла ошибка:'")
					   + Символы.ПС
					   + ПодробноеПредставлениеОшибки;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Наименование%", Метаданные.Документы.ОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ.Представление());
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПроверитьУведомлениеОВвозеИзЕАЭС_ИСЦЭДМ(СсылкаДокумент) Экспорт
	
	РезультатПроверки = ПустойРезультатПроверкиДокументИСЦЭДМ();
	
	// Объект ДокументИСЦЭДМ не записывается, он получается только для сокращения обращений к ИБ.
	ОбъектДокумент = СсылкаДокумент.ПолучитьОбъект();
	
	Попытка
		ПроверитьРазличныеДанныеОУведомлениеОВвозеИзЕАЭСИСЦЭДМ(ОбъектДокумент, РезультатПроверки);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстСообщения = НСтр("ru = 'При проверке заполнения документа ""%Наименование%"" возникла ошибка:'")
					   + Символы.ПС
					   + ПодробноеПредставлениеОшибки;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Наименование%", Метаданные.Документы.УведомлениеОВвозеИзЕАЭСИСЦЭДМ.Представление());
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПроверитьУведомлениеОВвозеИзТретьихСтран_ИСЦЭДМ(СсылкаДокумент) Экспорт
	
	РезультатПроверки = ПустойРезультатПроверкиДокументИСЦЭДМ();
	
	// Объект ДокументИСЦЭДМ не записывается, он получается только для сокращения обращений к ИБ.
	ОбъектДокумент = СсылкаДокумент.ПолучитьОбъект();
	
	Попытка
		ПроверитьРазличныеДанныеОУведомлениеОВвозеИзТретьихСтранИСЦЭДМ(ОбъектДокумент, РезультатПроверки);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстСообщения = НСтр("ru = 'При проверке заполнения документа ""%Наименование%"" возникла ошибка:'")
					   + Символы.ПС
					   + ПодробноеПредставлениеОшибки;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Наименование%", Метаданные.Документы.УведомлениеОВвозеИзТретьихСтранИСЦЭДМ.Представление()); 
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	Возврат РезультатПроверки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ДокументыОснования

Функция ПодготовитьДанныеДляЗаполненияДокументаИСЦЭДМ_Общая(ПараметрыЗаполнения, ТипДокументаИСЦЭДМ) Экспорт
	
	ДанныеДляЗаполнения = Новый Массив;
	//ТаблицыДанныхДляЗаполненияДокументаИСЦЭДМ - должна содержать структуры:
	//ТаблицаРеквизитов - реквизиты шапки документа-основания для заполнения шапки документа ЦЭДМ
	//ТаблицаТовары - таблица для заполнения табличной части документа по ТЧ исходного документа
	//ТаблицаИтоги - специфическая ТЧ для заполнения цен в некоторых документах
	ТаблицыДанныхДляЗаполненияДокументаИСЦЭДМ = ПодготовитьТаблицыДанныхДляЗаполненияДокументаИСЦЭДМ(ПараметрыЗаполнения, ТипДокументаИСЦЭДМ);
	
	Если ТаблицыДанныхДляЗаполненияДокументаИСЦЭДМ = Неопределено Тогда
		Возврат ДанныеДляЗаполнения;
	КонецЕсли;
	
	ТаблицаРеквизитов = ТаблицыДанныхДляЗаполненияДокументаИСЦЭДМ.ТаблицаРеквизитов;
	ТаблицаТовары	  = ТаблицыДанныхДляЗаполненияДокументаИСЦЭДМ.ТаблицаТовары;
	ТаблицаИтогов	  = ТаблицыДанныхДляЗаполненияДокументаИСЦЭДМ.ТаблицаИтогов;	
	
	СтруктураДокумента = ИнтеграцияИСМПТКПовтИсп.ПолучитьПустуюСтруктуруДокументаИСЦЭДМ_Общая(ТипДокументаИСЦЭДМ);
	
	Реквизиты = СтруктураДокумента.Реквизиты;
	Товары	  = СтруктураДокумента.Товары;
	Если СтруктураДокумента.Свойство("Итоги") Тогда
		Итоги = СтруктураДокумента.Итоги;
	Иначе
		Итоги = Неопределено;
	КонецЕсли;
			
	Для Каждого СтрокаРеквизитов ИЗ ТаблицаРеквизитов Цикл
			
		ТипДокумента = ТипЗнч(СтрокаРеквизитов.ДокументОснование);

		Реквизиты.Очистить();
		НоваяСтрокаРеквизитов = Реквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРеквизитов, СтрокаРеквизитов);

		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ДокументОснование", СтрокаРеквизитов.ДокументОснование);
		
		Товары.Очистить();
		МассивСтрокТовары = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаТовары Из МассивСтрокТовары Цикл
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
		КонецЦикла;
		
		СтруктураДляПередачи = Новый Структура;
		СтруктураДляПередачи.Вставить("Реквизиты", Реквизиты.Скопировать());
		СтруктураДляПередачи.Вставить("Товары",    Товары.Скопировать());
		
		Если Не Итоги = Неопределено Тогда
			Итоги.Очистить();
			МассивСтрокИтогов = ТаблицаИтогов.НайтиСтроки(ПараметрыОтбора);
			Для Каждого СтрокаИтоги Из МассивСтрокИтогов Цикл
				НоваяСтрока = Итоги.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИтоги);
			КонецЦикла;
		КонецЕсли;
				
		ДанныеДляЗаполнения.Добавить(СтруктураДляПередачи);

	КонецЦикла;
	
	Возврат ДанныеДляЗаполнения;

КонецФункции

Функция ПодготовитьДанныеДляЗаполненияДокументаИСЦЭДМ_Перемещение(ПараметрыЗаполнения, ТипДокументаИСЦЭДМ) Экспорт
	
	ДанныеДляЗаполнения = Новый Массив;
	//ТаблицыДанныхДляЗаполненияДокументаИСЦЭДМ - должна содержать структуры:
	//ТаблицаРеквизитов - реквизиты шапки документа-основания для заполнения шапки документа ЦЭДМ
	//ТаблицаТовары - таблица для заполнения табличной части документа по ТЧ исходного документа
	//ТаблицаИтоги - специфическая ТЧ для заполнения цен в некоторых документах
	ТаблицыДанныхДляЗаполненияДокументаИСЦЭДМ = ПодготовитьТаблицыДанныхДляЗаполненияДокументаИСЦЭДМ_Перемещение(ПараметрыЗаполнения, ТипДокументаИСЦЭДМ);
	
	Если ТаблицыДанныхДляЗаполненияДокументаИСЦЭДМ = Неопределено Тогда
		Возврат ДанныеДляЗаполнения;
	КонецЕсли;
	
	ТаблицаРеквизитов = ТаблицыДанныхДляЗаполненияДокументаИСЦЭДМ.ТаблицаРеквизитов;
	ТаблицаТовары	  = ТаблицыДанныхДляЗаполненияДокументаИСЦЭДМ.ТаблицаТовары;
		
	СтруктураДокумента = ИнтеграцияИСМПТКПовтИсп.ПолучитьПустуюСтруктуруДокументаИСЦЭДМ_Перемещение(ТипДокументаИСЦЭДМ);
	
	Реквизиты = СтруктураДокумента.Реквизиты;
	Товары	  = СтруктураДокумента.Товары;
			
	Для Каждого СтрокаРеквизитов ИЗ ТаблицаРеквизитов Цикл
			
		ТипДокумента = ТипЗнч(СтрокаРеквизитов.ДокументОснование);

		Реквизиты.Очистить();
		НоваяСтрокаРеквизитов = Реквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРеквизитов, СтрокаРеквизитов);

		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ДокументОснование", СтрокаРеквизитов.ДокументОснование);
		
		Товары.Очистить();
		МассивСтрокТовары = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаТовары Из МассивСтрокТовары Цикл
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
		КонецЦикла;
		
		СтруктураДляПередачи = Новый Структура;
		СтруктураДляПередачи.Вставить("Реквизиты", Реквизиты.Скопировать());
		СтруктураДляПередачи.Вставить("Товары",    Товары.Скопировать());
				
		ДанныеДляЗаполнения.Добавить(СтруктураДляПередачи);

	КонецЦикла;
	
	Возврат ДанныеДляЗаполнения;

КонецФункции

Функция ПодготовитьТаблицыДанныхДляЗаполненияДокументаИСЦЭДМ(ПараметрыЗаполнения, ТипДокументаИСЦЭДМ) Экспорт 
	
	ДокументыОснования = ПараметрыЗаполнения.МассивДокументов;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = РаботаСДокументамиИСМПТКПереопределяемый.ПодготовитьТекстЗапросаДляЗаполненияДокументаИСЦЭДМ_Общий(ПараметрыЗаполнения);
	Запрос.Текст = ТекстЗапроса;
	
	Для Каждого ЭлементСтрукуры  Из ПараметрыЗаполнения Цикл
		Запрос.УстановитьПараметр(ЭлементСтрукуры.Ключ, ЭлементСтрукуры.Значение);	
	КонецЦикла;	
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	ТаблицыДанныхДляЗаполненияИСЦЭДМ = Новый Структура;
	ТаблицыДанныхДляЗаполненияИСЦЭДМ.Вставить("ТаблицаРеквизитов", РезультатЗапроса[КоличествоПакетов - 3].Выгрузить());
	ТаблицыДанныхДляЗаполненияИСЦЭДМ.Вставить("ТаблицаТовары", 	   РезультатЗапроса[КоличествоПакетов - 2].Выгрузить());
	ТаблицыДанныхДляЗаполненияИСЦЭДМ.Вставить("ТаблицаИтогов", 	   РезультатЗапроса[КоличествоПакетов - 1].Выгрузить());
	
	Возврат ТаблицыДанныхДляЗаполненияИСЦЭДМ;
	
КонецФункции

Функция ПодготовитьТаблицыДанныхДляЗаполненияДокументаИСЦЭДМ_Перемещение(ПараметрыЗаполнения, ТипДокументаИСЦЭДМ) Экспорт 
	
	ДокументыОснования = ПараметрыЗаполнения.МассивДокументов;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = РаботаСДокументамиИСМПТКПереопределяемый.ПодготовитьТекстЗапросаДляЗаполненияДокументаИСЦЭДМ_Перемещение(ПараметрыЗаполнения);
	Запрос.Текст = ТекстЗапроса;
	
	Для Каждого ЭлементСтрукуры  Из ПараметрыЗаполнения Цикл
		Запрос.УстановитьПараметр(ЭлементСтрукуры.Ключ, ЭлементСтрукуры.Значение);	
	КонецЦикла;	
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	ТаблицыДанныхДляЗаполненияИСЦЭДМ = Новый Структура;
	ТаблицыДанныхДляЗаполненияИСЦЭДМ.Вставить("ТаблицаРеквизитов", РезультатЗапроса[КоличествоПакетов - 2].Выгрузить());
	ТаблицыДанныхДляЗаполненияИСЦЭДМ.Вставить("ТаблицаТовары", 	   РезультатЗапроса[КоличествоПакетов - 1].Выгрузить());
		
	Возврат ТаблицыДанныхДляЗаполненияИСЦЭДМ;
	
КонецФункции

Функция СоздатьСписокПервичныхДокументовИСЦЭДМ(ПараметрыСоздания) Экспорт
	
	СписокПервичныхДокументов = Новый Массив;
	Отказ = Ложь;
	
	ПараметрыЗаполненияПервичныхДокументов = ПолучитьПараметрыЗаполненияПервичныхДокументов(ПараметрыСоздания);
	МассивДанныхДляЗаполнения = ПодготовитьДанныеДляЗаполненияПервичныхДокументовИСЦЭДМ(ПараметрыЗаполненияПервичныхДокументов);
	НачатьТранзакцию();
	
	ТипСоздаваемогоДокумента = ПараметрыСоздания.ТипСоздаваемогоДокумента;
	РаботаСДокументамиИСМПТКПереопределяемый.ЗаполнитьМассивПервичныхДокументовИСЦЭДМ(ПараметрыЗаполненияПервичныхДокументов, МассивДанныхДляЗаполнения, СписокПервичныхДокументов, Отказ,, ТипСоздаваемогоДокумента);
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат СписокПервичныхДокументов; 
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;	
	
	Возврат СписокПервичныхДокументов;
	
КонецФункции

Функция ПодготовитьДанныеДляЗаполненияПервичныхДокументовИСЦЭДМ(ПараметрыЗаполнения) Экспорт
	
	ДанныеДляЗаполнения = Новый Массив;
	
	Если ПараметрыЗаполнения.МассивИСЦЭДМДляСозданияПервичныхДокументов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РассматриваемыйДокументЦЭДМ = ПараметрыЗаполнения.МассивИСЦЭДМДляСозданияПервичныхДокументов[0];
	
	ЭтоАктПеремещения = ТипЗнч(РассматриваемыйДокументЦЭДМ) = Тип("ДокументСсылка.АктВнутреннегоПеремещенияИСЦЭДМ");
	Если ЭтоАктПеремещения Тогда
		Если РассматриваемыйДокументЦЭДМ.Марки.Количество() = 0 Тогда 
			ТаблицыДанныхДляЗаполненияИСМПТ = ПодготовитьТаблицыДанныхДляЗаполненияПервичныхДокументовИСЦЭДМ_Перемещение(ПараметрыЗаполнения, "Итоги");
		Иначе
			ТаблицыДанныхДляЗаполненияИСМПТ = ПодготовитьТаблицыДанныхДляЗаполненияПервичныхДокументовИСЦЭДМ_Перемещение(ПараметрыЗаполнения, "Марки");
		КонецЕсли;
	Иначе
		Если (ТипЗнч(РассматриваемыйДокументЦЭДМ) = Тип("ДокументСсылка.АктПриемаПередачиИСЦЭДМ") 
			И РассматриваемыйДокументЦЭДМ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий"))
			ИЛИ (ТипЗнч(РассматриваемыйДокументЦЭДМ) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСЦЭДМ") 
			И РассматриваемыйДокументЦЭДМ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий")
			И РассматриваемыйДокументЦЭДМ.Марки.Количество() = 0) Тогда  // Если Ввоз создавался в базе, он будет входящим, но с данными в ТЧ Марки - тогда вводим основание по этой ТЧ; иначе используем Итоги
			
			// Для входящего документа создаем основание, используя данные ТЧ Итоги вместо ТЧ Марки, 
			// т.к. у полученного с сервера входящего документа ТЧ Марки будет пустая.
			ТаблицыДанныхДляЗаполненияИСМПТ = ПодготовитьТаблицыДанныхДляЗаполненияПервичныхДокументовИСЦЭДМ(ПараметрыЗаполнения, "Итоги");
		Иначе
			ТаблицыДанныхДляЗаполненияИСМПТ = ПодготовитьТаблицыДанныхДляЗаполненияПервичныхДокументовИСЦЭДМ(ПараметрыЗаполнения, "Марки");
		КонецЕсли;
	КонецЕсли;
	Если ТаблицыДанныхДляЗаполненияИСМПТ = Неопределено Тогда
		Возврат ДанныеДляЗаполнения;
	КонецЕсли;
	
	ТаблицаРеквизитов = ТаблицыДанныхДляЗаполненияИСМПТ.ТаблицаРеквизитов;
	ТаблицаТовары = ТаблицыДанныхДляЗаполненияИСМПТ.ТаблицаТовары;
	Если ЭтоАктПеремещения Тогда
		ТаблицаИтогов = Неопределено;
	Иначе
		ТаблицаИтогов = ТаблицыДанныхДляЗаполненияИСМПТ.ТаблицаИтогов;
	КонецЕсли;
	
	Если ЭтоАктПеремещения Тогда
		СтруктураДокумента = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьПустуюСтруктуруДокументаОснованияДляИСЦЭДМ_Перемещение(ПараметрыЗаполнения);
	Иначе
		СтруктураДокумента = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьПустуюСтруктуруДокументаОснованияДляИСЦЭДМ(ПараметрыЗаполнения);
	КонецЕсли;
	
	Реквизиты = СтруктураДокумента.Реквизиты;
	Товары 	  = СтруктураДокумента.Товары;
	
	ТекущийДокументОснования = Неопределено;
	Для Каждого СтрокаРеквизитов ИЗ  ТаблицаРеквизитов Цикл
		
		Если ТекущийДокументОснования <> СтрокаРеквизитов.ДокументОснование Тогда
			НомерПакета = 1;		
		Иначе
			НомерПакета = НомерПакета + 1;		
		КонецЕсли;		
		
		Если ТекущийДокументОснования <> СтрокаРеквизитов.ДокументОснование Тогда
			ТекущийДокументОснования = СтрокаРеквизитов.ДокументОснование;
		КонецЕсли;
		
		ТипДокумента = ТипЗнч(ТекущийДокументОснования);
		Реквизиты.Очистить();
		Товары.Очистить();
		
		ПараметрыОтбораПоОснованиям = Новый Структура();
		ПараметрыОтбораПоОснованиям.Вставить("ДокументОснование", СтрокаРеквизитов.ДокументОснование);
		
		НоваяСтрокаРеквизитов = Реквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРеквизитов, СтрокаРеквизитов);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ДокументОснование", ТекущийДокументОснования);
		
		МассивСтрокТовары = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
		Товары = Товары.СкопироватьКолонки();
				
		Для Каждого СтрокаТовары Из МассивСтрокТовары Цикл
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
			Если Не ТаблицаИтогов = Неопределено Тогда
				СтрокаИтогов = ТаблицаИтогов.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Упаковка", 
														СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика, СтрокаТовары.Упаковка));
				НоваяСтрока.Цена = ?(СтрокаИтогов.Количество() = 1, СтрокаИтогов[0].Цена, Неопределено);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураДляПередачи = Новый Структура;
		СтруктураДляПередачи.Вставить("Реквизиты", Реквизиты.Скопировать());
		СтруктураДляПередачи.Вставить("Товары",    Товары.Скопировать());
		ДанныеДляЗаполнения.Добавить(СтруктураДляПередачи);
		
	КонецЦикла;	
	
	Возврат ДанныеДляЗаполнения;	
	
КонецФункции

Функция ПодготовитьТаблицыДанныхДляЗаполненияПервичныхДокументовИСЦЭДМ(ПараметрыЗаполнения, ИмяТаблицыДанных = "Марки") Экспорт 
	
	ДокументыОснования = ПараметрыЗаполнения.МассивИСЦЭДМДляСозданияПервичныхДокументов;
	
	ПараметрыЗаполнения.Вставить("ТипДокументаИСМПТ", ТипЗнч(ДокументыОснования[0]));
	ПараметрыЗаполнения.Вставить("НаправлениеДокументаИСМПТ", ДокументыОснования[0].Направление);
	ТипДокумента = ПараметрыЗаполнения.ТипСоздаваемогоДокумента;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = РаботаСДокументамиИСМПТКПереопределяемый.ПодготовитьТекстЗапросаДляЗаполненияПервичныхДокументовИСЦЭДМ_Общий(ПараметрыЗаполнения, ИмяТаблицыДанных);
	
	Для Каждого ЭлементСтрукуры  Из ПараметрыЗаполнения Цикл
		Запрос.УстановитьПараметр(ЭлементСтрукуры.Ключ, ЭлементСтрукуры.Значение);	
	КонецЦикла;	
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
		
	ЗапросПоИтогам = Новый Запрос;
	ЗапросПоИтогам.Текст = РаботаСДокументамиИСМПТКПереопределяемый.ПодготовитьТекстЗапросаПоИтогамДокументаЦЭДМ(ПараметрыЗаполнения);
	Для Каждого ЭлементСтрукуры  Из ПараметрыЗаполнения Цикл
		ЗапросПоИтогам.УстановитьПараметр(ЭлементСтрукуры.Ключ, ЭлементСтрукуры.Значение);	
	КонецЦикла;
	ТаблицаИтогов = ЗапросПоИтогам.Выполнить().Выгрузить();		
	
	ТаблицыДанныхДляЗаполненияИСМПТ = Новый Структура;
	ТаблицыДанныхДляЗаполненияИСМПТ.Вставить("ТаблицаРеквизитов", РезультатЗапроса[КоличествоПакетов - 2].Выгрузить());
	ТаблицыДанныхДляЗаполненияИСМПТ.Вставить("ТаблицаТовары",	  РезультатЗапроса[КоличествоПакетов - 1].Выгрузить());
	ТаблицыДанныхДляЗаполненияИСМПТ.Вставить("ТаблицаИтогов",	  ТаблицаИтогов);
		
	Возврат ТаблицыДанныхДляЗаполненияИСМПТ;
	
КонецФункции

Функция ПодготовитьТаблицыДанныхДляЗаполненияПервичныхДокументовИСЦЭДМ_Перемещение(ПараметрыЗаполнения, ИмяТаблицыДанных = "Марки") Экспорт 
	
	ДокументыОснования = ПараметрыЗаполнения.МассивИСЦЭДМДляСозданияПервичныхДокументов;
	
	ПараметрыЗаполнения.Вставить("ТипДокументаИСМПТ", ТипЗнч(ДокументыОснования[0]));
	ТипДокумента = ПараметрыЗаполнения.ТипСоздаваемогоДокумента;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = РаботаСДокументамиИСМПТКПереопределяемый.ПодготовитьТекстЗапросаДляЗаполненияПервичныхДокументовИСЦЭДМ_Перемещение(ПараметрыЗаполнения, ИмяТаблицыДанных);
	
	Для Каждого ЭлементСтрукуры  Из ПараметрыЗаполнения Цикл
		Запрос.УстановитьПараметр(ЭлементСтрукуры.Ключ, ЭлементСтрукуры.Значение);	
	КонецЦикла;	
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	Если ТипЗнч(ДокументыОснования[0]) = Тип("ДокументСсылка.АктПриемаПередачиИСЦЭДМ") Тогда
		ЗапросПоИтогам = Новый Запрос;
		ЗапросПоИтогам.Текст = РаботаСДокументамиИСМПТКПереопределяемый.ПодготовитьТекстЗапросаПоИтогамДокументаЦЭДМ(ПараметрыЗаполнения);
		Для Каждого ЭлементСтрукуры  Из ПараметрыЗаполнения Цикл
			ЗапросПоИтогам.УстановитьПараметр(ЭлементСтрукуры.Ключ, ЭлементСтрукуры.Значение);	
		КонецЦикла;
		ТаблицаИтогов = ЗапросПоИтогам.Выполнить().Выгрузить();		
	Иначе
		ТаблицаИтогов = Неопределено;
	КонецЕсли;
	
	ТаблицыДанныхДляЗаполненияИСМПТ = Новый Структура;
	ТаблицыДанныхДляЗаполненияИСМПТ.Вставить("ТаблицаРеквизитов", РезультатЗапроса[КоличествоПакетов - 2].Выгрузить());
	ТаблицыДанныхДляЗаполненияИСМПТ.Вставить("ТаблицаТовары",	  РезультатЗапроса[КоличествоПакетов - 1].Выгрузить());
	ТаблицыДанныхДляЗаполненияИСМПТ.Вставить("ТаблицаИтогов",	  ТаблицаИтогов);
		
	Возврат ТаблицыДанныхДляЗаполненияИСМПТ;
	
КонецФункции

Функция ПроверитьНаличиеСвязанногоДокументаМаркировки_ОбщаяИСЦЭДМ(Основание, ЭтоПроверкаИзОснования = Ложь) Экспорт
	
	Если Основание.Ссылка.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = "";
	
	Если ПравоДоступа("Просмотр", Метаданные.Документы.АктПриемаПередачиИСЦЭДМ) Тогда 
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АктПриемаПередачиИСЦЭДМ.Ссылка,
		|	АктПриемаПередачиИСЦЭДМ.Дата,
		|	АктПриемаПередачиИСЦЭДМ.ДокументОснование,
		|	АктПриемаПередачиИСЦЭДМ.НомерИСЦЭДМ
		|ИЗ
		|	Документ.АктПриемаПередачиИСЦЭДМ КАК АктПриемаПередачиИСЦЭДМ
		|ГДЕ
		|	АктПриемаПередачиИСЦЭДМ.ДокументОснование = &ДокументОснование
		|";
	КонецЕсли;
	
	Если ПравоДоступа("Просмотр", Метаданные.Документы.УведомлениеОВыводеИзОборотаИСЦЭДМ) Тогда
		ТекстЗапроса = ТекстЗапроса +
			?(НЕ ЗначениеЗаполнено(ТекстЗапроса), 
			"", 
			"ОБЪЕДИНИТЬ ВСЕ
			|") + 
			"ВЫБРАТЬ
			|	УведомлениеОВыводеИзОборотаИСЦЭДМ.Ссылка КАК Ссылка,
			|	УведомлениеОВыводеИзОборотаИСЦЭДМ.Дата КАК Дата,
			|	УведомлениеОВыводеИзОборотаИСЦЭДМ.ДокументОснование КАК ДокументОснование,
			|	УведомлениеОВыводеИзОборотаИСЦЭДМ.НомерИСЦЭДМ КАК НомерИСЦЭДМ
			|ИЗ
			|	Документ.УведомлениеОВыводеИзОборотаИСЦЭДМ КАК УведомлениеОВыводеИзОборотаИСЦЭДМ
			|ГДЕ
			|	УведомлениеОВыводеИзОборотаИСЦЭДМ.ДокументОснование = &ДокументОснование
			|";
	КонецЕсли;
	
	Если ПравоДоступа("Просмотр", Метаданные.Документы.УведомлениеОВводеВОборотИСЦЭДМ) Тогда
		ТекстЗапроса = ТекстЗапроса +
			?(НЕ ЗначениеЗаполнено(ТекстЗапроса), 
			"", 
			"ОБЪЕДИНИТЬ ВСЕ
			|") + 
			"ВЫБРАТЬ
			|	УведомлениеОВводеВОборотИСЦЭДМ.Ссылка,
			|	УведомлениеОВводеВОборотИСЦЭДМ.Дата,
			|	УведомлениеОВводеВОборотИСЦЭДМ.ДокументОснование,
			|	УведомлениеОВводеВОборотИСЦЭДМ.НомерИСЦЭДМ
			|ИЗ
			|	Документ.УведомлениеОВводеВОборотИСЦЭДМ КАК УведомлениеОВводеВОборотИСЦЭДМ
			|ГДЕ
			|	УведомлениеОВводеВОборотИСЦЭДМ.ДокументОснование = &ДокументОснование
			|";
	КонецЕсли;
	
	Если ПравоДоступа("Просмотр", Метаданные.Документы.АктВнутреннегоПеремещенияИСЦЭДМ) Тогда
		ТекстЗапроса = ТекстЗапроса +
			?(НЕ ЗначениеЗаполнено(ТекстЗапроса), 
			"", 
			"ОБЪЕДИНИТЬ ВСЕ
			|") + 
			"ВЫБРАТЬ
			|	АктВнутреннегоПеремещенияИСЦЭДМ.Ссылка,
			|	АктВнутреннегоПеремещенияИСЦЭДМ.Дата,
			|	АктВнутреннегоПеремещенияИСЦЭДМ.ДокументОснование,
			|	АктВнутреннегоПеремещенияИСЦЭДМ.НомерИСЦЭДМ
			|ИЗ
			|	Документ.АктВнутреннегоПеремещенияИСЦЭДМ КАК АктВнутреннегоПеремещенияИСЦЭДМ
			|ГДЕ
			|	АктВнутреннегоПеремещенияИСЦЭДМ.ДокументОснование = &ДокументОснование
			|";
	КонецЕсли;
	
	Если ПравоДоступа("Просмотр", Метаданные.Документы.УведомлениеОВвозеИзЕАЭСИСЦЭДМ) Тогда
		ТекстЗапроса = ТекстЗапроса +
			?(НЕ ЗначениеЗаполнено(ТекстЗапроса), 
			"", 
			"ОБЪЕДИНИТЬ ВСЕ
			|") + 
			"ВЫБРАТЬ
			|	УведомлениеОВвозеИзЕАЭСИСЦЭДМ.Ссылка,
			|	УведомлениеОВвозеИзЕАЭСИСЦЭДМ.Дата,
			|	УведомлениеОВвозеИзЕАЭСИСЦЭДМ.ДокументОснование,
			|	УведомлениеОВвозеИзЕАЭСИСЦЭДМ.НомерИСЦЭДМ
			|ИЗ
			|	Документ.УведомлениеОВвозеИзЕАЭСИСЦЭДМ КАК УведомлениеОВвозеИзЕАЭСИСЦЭДМ
			|ГДЕ
			|	УведомлениеОВвозеИзЕАЭСИСЦЭДМ.ДокументОснование = &ДокументОснование
			|";
	КонецЕсли;
		
	Если ПравоДоступа("Просмотр", Метаданные.Документы.УведомлениеОВвозеИзТретьихСтранИСЦЭДМ) Тогда
		ТекстЗапроса = ТекстЗапроса +
			?(НЕ ЗначениеЗаполнено(ТекстЗапроса), 
			"", 
			"ОБЪЕДИНИТЬ ВСЕ
			|") + 
			"ВЫБРАТЬ
			|	УведомлениеОВвозеИзТретьихСтранИСЦЭДМ.Ссылка,
			|	УведомлениеОВвозеИзТретьихСтранИСЦЭДМ.Дата,
			|	УведомлениеОВвозеИзТретьихСтранИСЦЭДМ.ДокументОснование,
			|	УведомлениеОВвозеИзТретьихСтранИСЦЭДМ.НомерИСЦЭДМ
			|ИЗ
			|	Документ.УведомлениеОВвозеИзТретьихСтранИСЦЭДМ КАК УведомлениеОВвозеИзТретьихСтранИСЦЭДМ
			|ГДЕ
			|	УведомлениеОВвозеИзТретьихСтранИСЦЭДМ.ДокументОснование = &ДокументОснование
			|";
	КонецЕсли;
	ТекстЗапроса = ?(НЕ ЗначениеЗаполнено(ТекстЗапроса), 
				   "", 
				   ТекстЗапроса + 
				   "УПОРЯДОЧИТЬ ПО
					|	Дата УБЫВ");
		
	Возврат ?(Не ЗначениеЗаполнено(ТекстЗапроса), Неопределено, ПроверитьНаличиеСвязанного_Общий(Основание, ЭтоПроверкаИзОснования, ТекстЗапроса));

КонецФункции

Процедура ПерезаполнитьДокументПоОснованиюИСЦЭДМ(Знач ДокументОснованиеДляЗаполнения, ОбъектИСЦЭДМ) Экспорт
	
	Если ДокументОснованиеДляЗаполнения = Неопределено Тогда
		Возврат
	ИначеЕсли ТипЗнч(ДокументОснованиеДляЗаполнения) = Тип("Массив") 
		И ДокументОснованиеДляЗаполнения.Количество() <> 0 Тогда
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения[0]);
	Иначе
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения);
	КонецЕсли;
	
	ПараметрыЗаполнения = ПолучитьПараметрыЗаполненияДокументовИСМПТПоУмолчанию();
	ДатаДокумента = ДокументОснованиеДляЗаполнения.Дата;
	
	ПараметрыЗаполнения.Вставить("ДатаНачала", 	     НачалоДня(ДатаДокумента));
	ПараметрыЗаполнения.Вставить("ДатаОкончания",    КонецДня(ДатаДокумента));
	ПараметрыЗаполнения.Вставить("МассивДокументов", ДокументОснованиеДляЗаполнения);
	
	ТипДокументаИСЦЭДМ = "";
	Если ТипЗнч(ОбъектИСЦЭДМ.Ссылка) = Тип("ДокументСсылка.АктПриемаПередачиИСЦЭДМ") Тогда
		ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСЦЭДМ();
	ИначеЕсли ТипЗнч(ОбъектИСЦЭДМ.Ссылка) = Тип("ДокументСсылка.УведомлениеОВыводеИзОборотаИСЦЭДМ") Тогда
		ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСЦЭДМ(); 
	ИначеЕсли ТипЗнч(ОбъектИСЦЭДМ.Ссылка) = Тип("ДокументСсылка.УведомлениеОВводеВОборотИСЦЭДМ") Тогда
		ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСЦЭДМ(); 
	ИначеЕсли ТипЗнч(ОбъектИСЦЭДМ.Ссылка) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСЦЭДМ") Тогда
		ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСЦЭДМ(); 
	ИначеЕсли ТипЗнч(ОбъектИСЦЭДМ.Ссылка) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСЦЭДМ") Тогда
		ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСЦЭДМ(); 
	ИначеЕсли ТипЗнч(ОбъектИСЦЭДМ.Ссылка) = Тип("ДокументСсылка.АктВнутреннегоПеремещенияИСЦЭДМ") Тогда
		ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктВнутреннегоПеремещенияИСЦЭДМ(); 
	КонецЕсли;	
	
	Если ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктВнутреннегоПеремещенияИСЦЭДМ() Тогда
		МассивДанныхДляЗаполнения = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьДанныеДокументаОснованияДляПерезаполненияИСЦЭДМ_Перемещение(ДокументОснованиеДляЗаполнения, ТипДокументаИСЦЭДМ);
	Иначе
		МассивДанныхДляЗаполнения = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьДанныеДокументаОснованияДляПерезаполненияИСЦЭДМ_Общий(ДокументОснованиеДляЗаполнения, ТипДокументаИСЦЭДМ);
	КонецЕсли;
		
	//Заполняем шапку документа
	ЗаполнитьЗначенияСвойств(ОбъектИСЦЭДМ, МассивДанныхДляЗаполнения.Реквизиты);
	
	Для Каждого СтрокаТЧ Из МассивДанныхДляЗаполнения.Товары Цикл
		НоваяСтрокаТЧ = ОбъектИСЦЭДМ.Товары.Добавить();   
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ); 
	КонецЦикла;
	
	Если МассивДанныхДляЗаполнения.Свойство("Итоги") 
		И Не МассивДанныхДляЗаполнения.Итоги.Количество() = 0  // По основанию получили данные об итогах
		И Не ОбъектИСЦЭДМ.Метаданные().ТабличныеЧасти.Найти("Итоги") = Неопределено // в документе маркировки есть ТЧ Итоги
		И Не ОбъектИСЦЭДМ.Итоги.Количество() = 0 Тогда // и в этой ТЧ уже есть какие-то строки, полученные из заполнения КМ
		
		Для Каждого СтрокаТЧ Из МассивДанныхДляЗаполнения.Итоги Цикл
			НайденныеСтроки = ОбъектИСЦЭДМ.Итоги.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТЧ.Номенклатура));
			Если Не НайденныеСтроки.Количество() = 0 // Если такой ном-ры в итогах документа маркировки не нашли - пропускаем ее данные
				И Не СтрокаТЧ.Цена = 0 Тогда // Если нашли, проверяем, удалось ли однозначно определить цену
				Для Каждого СтрокаИтоги Из НайденныеСтроки Цикл
					ЗаполнитьЗначенияСвойств(СтрокаИтоги, СтрокаТЧ);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодборДокументов

// В УОР хранится идентификатор первичного, корректируемого документа
// С помощью этой функции заполняем в первичном документе ссылку на введенное УОР
// ИдентификаторЦЭДМ - Строка - это идентификатор АПП, АВП или Ввоза ЕАЭС в УОР (ИдентификаторДокументОснование)
// Возвращаемое значение: ДокументСсылка.УведомлениеОРасхожденияхИСЦЭДМ
Функция ПодобратьСвязанноеУведомлениеОРасхождениях(ИдентификаторЦЭДМ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УведомлениеОРасхожденияхИСЦЭДМ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УведомлениеОРасхожденияхИСЦЭДМ КАК УведомлениеОРасхожденияхИСЦЭДМ
	|ГДЕ
	|	УведомлениеОРасхожденияхИСЦЭДМ.ИдентификаторДокументОснование = &ИдентификаторДокументОснование";
	
	Запрос.УстановитьПараметр("ИдентификаторДокументОснование", ИдентификаторЦЭДМ);
	
	СписокНайденныхУОР = Новый СписокЗначений();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокНайденныхУОР.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ?(СписокНайденныхУОР.Количество() = 0, Неопределено, СписокНайденныхУОР);

КонецФункции

// В корректировочном документе хранится только ссылка на УОР, по которому он был введен.
// С помощью этой функции получаем ссылку на корректировочный документ, чтобы отразить ее в УОР.
// Идентификатор - Строка - это идентификатор УОР (ИсходноеУведомлениеОРасхожденияхИдентификатор)
// ИмяДокумента - Строка - это имя метаднанных документа-основания для УОР
// Возвращаемое значение: Структура, где:
// Ссылка - ДокументСсылка.АктПриемаПередачиИСЦЭДМ, ДокументСсылка.АктВнутреннегоПеремещенияИСЦЭДМ, ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСЦЭДМ
// Идентификатор - Строка
Функция ПодобратьКорректировочныйДокумент(Идентификатор, ИмяДокумента) Экспорт
	
	Запрос = Новый Запрос;
	Текст = "ВЫБРАТЬ
	|	ДокументЦЭДМ.Ссылка КАК Ссылка,
	|	ДокументЦЭДМ.Идентификатор КАК Идентификатор
	|ИЗ
	|	Документ.%ИмяДокумента% КАК ДокументЦЭДМ
	|ГДЕ
	|	ДокументЦЭДМ.ИсходноеУведомлениеОРасхожденияхИдентификатор = &Идентификатор";

	Текст = СтрЗаменить(Текст, "%ИмяДокумента%", ИмяДокумента);
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеКорректировки = Новый Структура("Ссылка, Идентификатор", "", "");
	
	Пока Выборка.Следующий() Цикл
		ДанныеКорректировки.Ссылка = Выборка.Ссылка;
		ДанныеКорректировки.Идентификатор = Выборка.Идентификатор;
	КонецЦикла;
	
	Возврат ДанныеКорректировки;
	
КонецФункции

//С помощью этой функции заполняем информацию по исходному документу в веденном корректировочном документе,
// делаем это через УОР, который их связывает.
// ИдентификаторЦЭДМ - Строка - это идентификатор УОР в исходном документе (ИсходноеУведомлениеОРасхожденияхИдентификатор)
// Возвращаемое значение: Структура, где:
// УОР - ДокументСсылка.УведомлениеОРасхожденияхИСЦЭДМ
// ПервичныйДокументСсылка - ДокументСсылка.АктПриемаПередачиИСЦЭДМ, ДокументСсылка.АктВнутреннегоПеремещенияИСЦЭДМ, ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСЦЭДМ
// ПервичныйДокументИдентификатор - Строка
Функция ПодобратьПервичныйДокументПоРасхождению(ИдентификаторЦЭДМ) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УведомлениеОРасхожденияхИСЦЭДМ.Ссылка КАК Ссылка,
	|	УведомлениеОРасхожденияхИСЦЭДМ.ИдентификаторДокументОснование КАК ИдентификаторДокументОснование
	|ПОМЕСТИТЬ ВТ_ДанныеУОР
	|ИЗ
	|	Документ.УведомлениеОРасхожденияхИСЦЭДМ КАК УведомлениеОРасхожденияхИСЦЭДМ
	|ГДЕ
	|	УведомлениеОРасхожденияхИСЦЭДМ.Идентификатор = &ИдентификаторУОР
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеУОР.Ссылка КАК Ссылка,
	|	ВТ_ДанныеУОР.ИдентификаторДокументОснование КАК ИдентификаторДокументОснование,
	|	АктПриемаПередачиИСЦЭДМ.Ссылка КАК ПервичныйДокумент
	|ИЗ
	|	ВТ_ДанныеУОР КАК ВТ_ДанныеУОР
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктПриемаПередачиИСЦЭДМ КАК АктПриемаПередачиИСЦЭДМ
	|		ПО ВТ_ДанныеУОР.ИдентификаторДокументОснование = АктПриемаПередачиИСЦЭДМ.Идентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ДанныеУОР.Ссылка,
	|	ВТ_ДанныеУОР.ИдентификаторДокументОснование,
	|	АктВнутреннегоПеремещенияИСЦЭДМ.Ссылка
	|ИЗ
	|	ВТ_ДанныеУОР КАК ВТ_ДанныеУОР
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктВнутреннегоПеремещенияИСЦЭДМ КАК АктВнутреннегоПеремещенияИСЦЭДМ
	|		ПО ВТ_ДанныеУОР.ИдентификаторДокументОснование = АктВнутреннегоПеремещенияИСЦЭДМ.Идентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ДанныеУОР.Ссылка,
	|	ВТ_ДанныеУОР.ИдентификаторДокументОснование,
	|	УведомлениеОВвозеИзЕАЭСИСЦЭДМ.Ссылка
	|ИЗ
	|	ВТ_ДанныеУОР КАК ВТ_ДанныеУОР
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОВвозеИзЕАЭСИСЦЭДМ КАК УведомлениеОВвозеИзЕАЭСИСЦЭДМ
	|		ПО ВТ_ДанныеУОР.ИдентификаторДокументОснование = УведомлениеОВвозеИзЕАЭСИСЦЭДМ.Идентификатор";
	
	Запрос.УстановитьПараметр("ИдентификаторУОР", ИдентификаторЦЭДМ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		ДанныеДокумента = Новый Структура();
		ДанныеДокумента.Вставить("УОРСсылка", Выборка.Ссылка);
		ДанныеДокумента.Вставить("ПервичныйДокументСсылка", Выборка.ПервичныйДокумент);
		ДанныеДокумента.Вставить("ПервичныйДокументИдентификатор", Выборка.ИдентификаторДокументОснование); 
	КонецЦикла;
	
КонецФункции

//С помощью этой функции заполняем информацию по корректировочному документу в его исходном документе,
// делаем это через УОР, который их связывает.
// ИдентификаторЦЭДМ - Строка - это идентификатор первичного документа
// Возвращаемое значение: Структура, где:
// КорректировочныйДокументСсылка - ДокументСсылка.АктПриемаПередачиИСЦЭДМ, ДокументСсылка.АктВнутреннегоПеремещенияИСЦЭДМ, ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСЦЭДМ
// КорректировочныйДокументИдентификатор - Строка
Функция ПодобратьКорректировочныйДокументПоРасхождению(ИдентификаторЦЭДМ) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УведомлениеОРасхожденияхИСЦЭДМ.Ссылка КАК Ссылка,
	|	УведомлениеОРасхожденияхИСЦЭДМ.Идентификатор КАК ИдентификаторУОР
	|ПОМЕСТИТЬ ВТ_ДанныеУОР
	|ИЗ
	|	Документ.УведомлениеОРасхожденияхИСЦЭДМ КАК УведомлениеОРасхожденияхИСЦЭДМ
	|ГДЕ
	|	УведомлениеОРасхожденияхИСЦЭДМ.ИдентификаторДокументОснование = &ИдентификаторЦЭДМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеУОР.Ссылка КАК Ссылка,
	|	ВТ_ДанныеУОР.ИдентификаторУОР КАК ИдентификаторУОР,
	|	АктПриемаПередачиИСЦЭДМ.Ссылка КАК КорректировочныйДокумент,
	|	АктПриемаПередачиИСЦЭДМ.Идентификатор КАК КорректировочныйДокументИдентификатор
	|ИЗ
	|	ВТ_ДанныеУОР КАК ВТ_ДанныеУОР
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктПриемаПередачиИСЦЭДМ КАК АктПриемаПередачиИСЦЭДМ
	|		ПО ВТ_ДанныеУОР.ИдентификаторУОР = АктПриемаПередачиИСЦЭДМ.ИсходноеУведомлениеОРасхожденияхИдентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ДанныеУОР.Ссылка,
	|	ВТ_ДанныеУОР.ИдентификаторУОР,
	|	АктВнутреннегоПеремещенияИСЦЭДМ.Ссылка,
	|	АктВнутреннегоПеремещенияИСЦЭДМ.Идентификатор
	|ИЗ
	|	ВТ_ДанныеУОР КАК ВТ_ДанныеУОР
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктВнутреннегоПеремещенияИСЦЭДМ КАК АктВнутреннегоПеремещенияИСЦЭДМ
	|		ПО ВТ_ДанныеУОР.ИдентификаторУОР = АктВнутреннегоПеремещенияИСЦЭДМ.ИсходноеУведомлениеОРасхожденияхИдентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ДанныеУОР.Ссылка,
	|	ВТ_ДанныеУОР.ИдентификаторУОР,
	|	УведомлениеОВвозеИзЕАЭСИСЦЭДМ.Ссылка,
	|	УведомлениеОВвозеИзЕАЭСИСЦЭДМ.Идентификатор
	|ИЗ
	|	ВТ_ДанныеУОР КАК ВТ_ДанныеУОР
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОВвозеИзЕАЭСИСЦЭДМ КАК УведомлениеОВвозеИзЕАЭСИСЦЭДМ
	|		ПО ВТ_ДанныеУОР.ИдентификаторУОР = УведомлениеОВвозеИзЕАЭСИСЦЭДМ.ИсходноеУведомлениеОРасхожденияхИдентификатор";
	
	Запрос.УстановитьПараметр("ИдентификаторЦЭДМ", ИдентификаторЦЭДМ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		ДанныеДокумента = Новый Структура();
		ДанныеДокумента.Вставить("КорректировочныйДокументСсылка", Выборка.КорректировочныйДокумент);
		ДанныеДокумента.Вставить("КорректировочныйДокументИдентификатор", Выборка.КорректировочныйДокументИдентификатор); 
	КонецЦикла;
	
КонецФункции

Функция ПодобратьСвязанноеУведомлениеОВвозе(СсылкаОснование) Экспорт
	
	//Для Отчета о передаче КИ импортеру (ИС ЦЭДМ)
	Запрос = Новый Запрос;
	запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УведомлениеОВвозеИзЕАЭСИСЦЭДМ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УведомлениеОВвозеИзЕАЭСИСЦЭДМ КАК УведомлениеОВвозеИзЕАЭСИСЦЭДМ
	|ГДЕ
	|	УведомлениеОВвозеИзЕАЭСИСЦЭДМ.ДокументОснование = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УведомлениеОВвозеИзТретьихСтранИСЦЭДМ.Ссылка
	|ИЗ
	|	Документ.УведомлениеОВвозеИзТретьихСтранИСЦЭДМ КАК УведомлениеОВвозеИзТретьихСтранИСЦЭДМ
	|ГДЕ
	|	УведомлениеОВвозеИзТретьихСтранИСЦЭДМ.ДокументОснование = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаОснование);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Используется для получения ссылки на связанный документ, когда он уже отправлен на сервер и имеет идентификатор.
//
Функция НайтиДокументПоИдентификаторуДляУстановкиСвязи(ИмяДокумента, ИдентификаторДокумента) Экспорт
	
	Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументИС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.%ИмяДокумента% КАК ДокументИС
	|ГДЕ
	|	ДокументИС.Идентификатор = &Идентификатор";
	Текст = СтрЗаменить(Текст, "%ИмяДокумента%", ИмяДокумента);
	
	Запрос = Новый Запрос();
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("Идентификатор", ИдентификаторДокумента);
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьДокументДляОбновленияСвязи(ИмяДокумента, ИдентификаторДокумента, РеквизитСоответствия) Экспорт
	
	Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументИС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.%ИмяДокумента% КАК ДокументИС
	|ГДЕ
	|	ДокументИС.Идентификатор = &Идентификатор
	|	И ДокументИС." + РеквизитСоответствия +" = &ПустаяСтрока";
	Текст = СтрЗаменить(Текст, "%ИмяДокумента%", ИмяДокумента);
	
	Запрос = Новый Запрос();
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("Идентификатор", ИдентификаторДокумента);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьПустуюСтруктураДляПоискаДокументаПоИдентификаторуОтОбратного() Экспорт
	
	ДанныеДляПоиска = Новый Структура();
	ДанныеДляПоиска.Вставить("ИмяДокументаДляЗапроса", Неопределено);
	ДанныеДляПоиска.Вставить("ОтборПоВидуДокумента",   Неопределено);
	ДанныеДляПоиска.Вставить("ВидДокументаДляЗапроса", Неопределено);
	ДанныеДляПоиска.Вставить("НаправлениеДокументаДляЗапроса", Неопределено);
	ДанныеДляПоиска.Вставить("ИмяРеквизитаВидДокумента",   Неопределено);
	ДанныеДляПоиска.Вставить("ИмяРеквизитаИдентификатора", Неопределено);
	ДанныеДляПоиска.Вставить("ИдентификаторДокумента", 	   Неопределено);
	
	Возврат ДанныеДляПоиска;
	
КонецФункции

// Используеся для получения ссылки на связанный документ, когда он еще не отправлен на сервер и мы не можем найти его по идентификатору. 
//
Функция НайтиСвязанныйДокументПоИдентификаторуОтОбратного(ДанныеДляПоиска) Экспорт
	
	ИмяДокумента  = ДанныеДляПоиска.ИмяДокументаДляЗапроса;
	Направление   = ДанныеДляПоиска.НаправлениеДокументаДляЗапроса;
	ОтборПоВиду	  = ДанныеДляПоиска.ОтборПоВидуДокумента;
	ВидДокумента  = ДанныеДляПоиска.ВидДокументаДляЗапроса;
	ИмяРеквизитаВидДокумента   = ДанныеДляПоиска.ИмяРеквизитаВидДокумента;
	ИмяРеквизитаИдентификатора = ДанныеДляПоиска.ИмяРеквизитаИдентификатора;
	Идентификатор = ДанныеДляПоиска.ИдентификаторДокумента;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ДокументИС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.%ИмяДокумента% КАК ДокументИС
	|ГДЕ
	|	ДокументИС.Направление = &Направление
	|" + ?(ОтборПоВиду, "И ДокументИС.%ИмяРеквизитаВидДокумента% = &ВидДокумента", "") 
	+ Символы.ПС + 
	"	И ДокументИС.%ИмяРеквизитаИдентификатора% = &Идентификатор";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяДокумента%", ИмяДокумента); 
	Если ОтборПоВиду Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяРеквизитаВидДокумента%", ИмяРеквизитаВидДокумента); 
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяРеквизитаИдентификатора%", ИмяРеквизитаИдентификатора);
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Направление",   Направление);
	Запрос.УстановитьПараметр("ВидДокумента",  ВидДокумента);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция НайтиДокументИСПоНомеру(РегистрационныйНомер, ДополнительныеПараметры = Неопределено) Экспорт 
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяДокумента = ?(ДополнительныеПараметры.Свойство("ИмяДокумента"), ДополнительныеПараметры.ИмяДокумента, Неопределено);
	ИмяПараметра = ?(ДополнительныеПараметры.Свойство("ИмяПараметра"), ДополнительныеПараметры.ИмяПараметра, Неопределено);
	ВидДокумента = ?(ДополнительныеПараметры.Свойство("ВидДокумента"), ДополнительныеПараметры.ВидДокумента, Неопределено);
	
	Если ИмяДокумента = Неопределено Или ИмяПараметра = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ДокументИС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.%ИмяДокумента% КАК ДокументИС
	|ГДЕ
	|	ДокументИС.%ИмяПараметра% = &РегистрационныйНомер
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяДокумента%", ИмяДокумента);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяПараметра%", ИмяПараметра);
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		Если ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК() Тогда
			ТекстЗапроса = ТекстЗапроса + "И ДокументИС.ТипАкта = &ВидДокумента";
		Иначе 
			ТекстЗапроса = ТекстЗапроса + "И ДокументИС.ТипУведомления = &ВидДокумента";
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("РегистрационныйНомер", РегистрационныйНомер);
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьСтруктураДанныхДляАктаКорректировкиИСМПТ(ДокументОснованиеДляЗаполнения) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УведомлениеОРасхожденииИСМПТК.РегистрационныйНомерСвязанногоАкта КАК РегистрационныйНомерСвязанногоАкта,
	|	УведомлениеОРасхожденииИСМПТК.Идентификатор КАК Идентификатор,
	|	УведомлениеОРасхожденииИСМПТК.ИдентификаторАПППервичный КАК ИдентификаторАПППервичный
	|ИЗ
	|	Документ.УведомлениеОРасхожденииИСМПТК КАК УведомлениеОРасхожденииИСМПТК
	|ГДЕ
	|	УведомлениеОРасхожденииИСМПТК.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснованиеДляЗаполнения);
	Выборка = Запрос.Выполнить().Выбрать();

	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("ЭтоКорректировка",  Истина);
	ДанныеДляЗаполнения.Вставить("ДокументОснование", ДокументОснованиеДляЗаполнения); //Основание - из первичного АПП
	ДанныеДляЗаполнения.Вставить("ТипАкта", ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исправленный"));
	ДанныеДляЗаполнения.Вставить("РегистрационныйНомерСвязанногоАкта", Неопределено);
	ДанныеДляЗаполнения.Вставить("ИдентификаторУведОРасхождениях", Неопределено);
	ДанныеДляЗаполнения.Вставить("ИдентификаторАПППервичный", 	   Неопределено);
	
	Пока Выборка.Следующий() Цикл
		ДанныеДляЗаполнения.РегистрационныйНомерСвязанногоАкта = Выборка.РегистрационныйНомерСвязанногоАкта; //Исходный АПП
		ДанныеДляЗаполнения.ИдентификаторУведОРасхождениях = Выборка.Идентификатор;
		ДанныеДляЗаполнения.ИдентификаторАПППервичный 	   = Выборка.ИдентификаторАПППервичный;
	КонецЦикла;
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

#КонецОбласти

#Область РасчетИтоговыхПоказателейВИСМПТ

Функция ПолучитьТаблицуИтоговПервичногоДокумента(ИдентификаторИсхАПП) Экспорт 
	
	ТаблицаИтоги = Новый ТаблицаЗначений();
	
	СсылкаИсходныйАПП = НайтиДокументПоИдентификаторуДляУстановкиСвязи(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК(), ИдентификаторИсхАПП);
	Если Не СсылкаИсходныйАПП = Неопределено Тогда
		ТаблицаИтоги = СсылкаИсходныйАПП.Итоги.Выгрузить();	
	КонецЕсли;
	
	Возврат ТаблицаИтоги;
	
КонецФункции

Функция ПроверитьТипДокументаТребуетПередачуЦенИСМПТ(ПроверяемыйДокумент) 
	
	ПоддерживаетсяУказание = Новый Массив();
	ПоддерживаетсяУказание.Добавить(Тип("ДокументСсылка.АктПриемаПередачиИСМПТК"));
	
	Возврат НЕ ПоддерживаетсяУказание.Найти(ТипЗнч(ПроверяемыйДокумент)) = Неопределено; 
	
КонецФункции

Функция ПроверитьТГНаОбязательностьУказанияЦенИСМПТ(ТоварнаяГруппа)

	ОбязательноеУказание = Новый Массив();
	ОбязательноеУказание.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная"));
	
	Возврат Не ОбязательноеУказание.Найти(ТоварнаяГруппа) = Неопределено; 
	
КонецФункции

Функция ПолучитьСписокДопустимыхКодовТНВЭДДляТабачнойПродукцииИСМПТ()
	
	СписокКодов = Новый Массив();
	СписокКодов.Добавить("2402100000");
	СписокКодов.Добавить("2402201000");
	СписокКодов.Добавить("2402209000");
	СписокКодов.Добавить("2402900000");
	СписокКодов.Добавить("2403110000");
	СписокКодов.Добавить("2403191000");
	СписокКодов.Добавить("2403199000");
	СписокКодов.Добавить("2403910000");
	СписокКодов.Добавить("2403991000");
	СписокКодов.Добавить("2403999002");
	СписокКодов.Добавить("2403999008");
	СписокКодов.Добавить("2404110001");
	СписокКодов.Добавить("2404110009");
	СписокКодов.Добавить("2404120000");
	СписокКодов.Добавить("2404190001");
	СписокКодов.Добавить("2404190009");
	СписокКодов.Добавить("2404910001");
	СписокКодов.Добавить("2404910002");
	СписокКодов.Добавить("2404910009");
	СписокКодов.Добавить("2404920000");
	СписокКодов.Добавить("2404990000");
	СписокКодов.Добавить("3824999208");
	
	Возврат СписокКодов;
	
КонецФункции

#КонецОбласти