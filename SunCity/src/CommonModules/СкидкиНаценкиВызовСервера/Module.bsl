////////////////////////////////////////////////////////////////////////////////
// СкидкиНаценкиВызовСервера содержит процедуры и функции для работы 
// со скидками и обработки действий пользователя со скидками.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Получает минимальную цену номенклатуры в указанном магазине.
//
// Параметры:
//  СтруктураНоменклатуры - Структура - структура данных номенклатуры.
//  Магазин - СправочникСсылка.Магазины - магазин по которому подбирается минимальная цена.
//  Дата - Дата - дата на которую подбирается цена.
//
Функция МинимальнаяЦенаНоменклатуры(СтруктураНоменклатуры, Магазин, Дата) Экспорт
	
	ВидЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Магазин, "ВидМинимальныхЦенПродажи");
	Цена = ЗапасыСервер.ЦенаПоВидуЦен(ВидЦены,
				Дата,
				СтруктураНоменклатуры.Номенклатура,
				СтруктураНоменклатуры.Характеристика,
				СтруктураНоменклатуры.Упаковка);
	
	Возврат Цена;
	
КонецФункции

// Получает значение функциональной опции "ИспользоватьЗапретРозничнойПродажиАлкоголя".
//
// Возвращаемое значение:
//  Булево - значение функциональной опции.
//
Функция ФункциональнаяОпцияИспользованияЗапретаРозничнойПродажиАлкоголя() Экспорт
	
	Результат = ПолучитьФункциональнуюОпцию("ИспользоватьЗапретРозничнойПродажиАлкоголя");
	Если Результат <> Истина Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет проверку необходимости отражения продаж в дисконтном сервере.
// И в случае обновления возвращает результат обновления.
// Также функция создает информационную рассылку о начислении бонусных баллов.
// Если в этом есть необходимость
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ по которому необходимо обработать накопления в дисконтном сервере.
//
// Возвращаемое значение:
//  Структура - структура результата обработки данных.
//
Функция РезультатОбработкиНакопленийВДисконтномСервере(ДокументСсылка) Экспорт
	РезультатОбработки = Новый Структура;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДисконтныйСервер") Тогда
		ЕстьОшибкиДисконтногоСервера = Ложь;
		ДисконтныйСерверВызовСервера.ОтразитьПродажиВДисконтномСервере(ДокументСсылка, ЕстьОшибкиДисконтногоСервера);
		Если ЕстьОшибкиДисконтногоСервера Тогда
			СтрокаСообщения = НСтр("ru = 'При обновлении накоплений в дисконтном сервере возникли ошибки (см. журнал регистрации). Обратитесь к администратору'");
			РезультатОбработки.Вставить("СообщениеПользователю", СтрокаСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатОбработки;
КонецФункции

// Возвращает имя формы настроек.
// Для внешней обработки.
// 
// Параметры:
//  ВнешняяОбработка - ОбработкаОбъект - внешняя обработка в которой необходимо получить имя формы настроек.
//  АдресНастроекВнешнейОбработки - Строка - адрекс настроек внешней обработки.
//
// Возвращаемое значение:
//  Строка - имя формы настроек.
//
Функция ИмяФормыНастроекВнешнейОбработки(ВнешняяОбработка, АдресНастроекВнешнейОбработки) Экспорт
	
	ИмяОбработки = СкидкиНаценкиПовтИсп.ПодключитьВнешнююОбработку(ВнешняяОбработка);
	ВнешнийОбъект = СкидкиНаценкиПовтИсп.ОбъектВнешнейОбработки(ВнешняяОбработка);
	
	УстановитьБезопасныйРежим(Истина);
	Попытка
		ИмяФормыНастроек = ВнешнийОбъект.ИмяФормыНастроек();
		Если ТипЗнч(ИмяФормыНастроек) <> Тип("Строка") Тогда
			ИмяФормыНастроек = "";
		КонецЕсли;
	Исключение
		ИмяФормыНастроек = "";
	КонецПопытки;
	УстановитьБезопасныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(ИмяФормыНастроек) Тогда
		Возврат "ВнешняяОбработка."+ ИмяОбработки +".Форма."+ИмяФормыНастроек;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Процедура погашения однократных скидок.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ по которому необходимо погасить скидки.
//  Магазин - СправочникСсылка.Магазины - магазин по которому гасятся скидки.
//  ДатаАктивации - Дата - дата погашения.
//
Процедура ПогаситьОднократныеСкидки(ДокументСсылка) Экспорт
	
	СкидкиНаценкиСерверПереопределяемый.ПогаситьОднократныеСкидки(ДокументСсылка);
	
КонецПроцедуры

#КонецОбласти
