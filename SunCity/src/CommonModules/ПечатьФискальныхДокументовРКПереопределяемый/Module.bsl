
// Описание: Получает оборудование по организации
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияБПО - Организация.
// 
// Возвращаемое значение:
//  Структура - Структура по свойствами:
//   * Терминал - СправочникСсылка.ПодключаемоеОборудование - Терминал.
//   * ФискальныеУстройства - СправочникСсылка.ПодключаемоеОборудование - ФискальныеУстройства.
//
Функция ПодключаемоеОборудованиеОрганизации(Организация) Экспорт
	
	Оборудование = Новый Структура;
	Оборудование.Вставить("Терминал");
	Оборудование.Вставить("ФискальныеУстройства");
	
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("ФискальныйРегистратор");
	ПоддерживаемыеТипыВО.Добавить("ПринтерЧеков");			
			
	СписокДоступныхУстройств = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам(ПоддерживаемыеТипыВО);
	СписокУстройств = Новый Массив();
	Для Каждого Устройства Из СписокДоступныхУстройств Цикл
		СписокУстройств.Добавить(Устройства.Ссылка);
	КонецЦикла;
	Оборудование.ФискальныеУстройства = СписокУстройств;
		
	Возврат Оборудование;
	
КонецФункции //ПодключаемоеОборудованиеОрганизации

// Описание: Сравнивает валюту документа с валютой рег. учета
//
// Параметры:
//  ДокументСсылка - Ссылка на документ
// 
// Возвращаемое значение:
//  Булево - результат сравнения (Истина - валюты равны, Ложь - не равны). 
//
Функция СравнитьВалюты(ДокументСсылка) Экспорт
	
	//ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	//
	//Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "ВалютаДокумента");
	//	
	//Если Реквизиты.ВалютаДокумента <> ВалютаРегл Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	
	Возврат Истина;
	
КонецФункции //СравнитьВалюты

// Описание: Заполняет контактную информацию партнера (адрес электронной почты и телефон) на форме
//
// Параметры:
// 	Форма - Форма в которой необходимо заполнить списки выбора email и телефон
//
Процедура ЗаполнитьКонтактнуюИнформациюПоПартнеру(Форма, Партнер) Экспорт
	
	// заполнить на форме список выбора для email и телефона
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		
		КонтактнаяИнформацияОбъекта = КонтактнаяИнформацияОбъектов(Партнер);
		
		Для Каждого ЭлементКонтактнойИнформации Из КонтактнаяИнформацияОбъекта Цикл
			
			Если ЭлементКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
				Форма.Телефон10Знаков = НомерТелефонаВФормате10Знаков(ЭлементКонтактнойИнформации.Представление);
				Форма.Телефон = ОтформатироватьНомерТелефона(Форма.Телефон10Знаков);
				Форма.Элементы.Телефон.СписокВыбора.Добавить(Форма.Телефон);
			КонецЕсли;
			
			Если ЭлементКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
				Форма.Email = ЭлементКонтактнойИнформации.Представление;
				Форма.Элементы.Email.СписокВыбора.Добавить(Форма.Email);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Форма.Элементы.Телефон.СписокВыбора.Количество() > 0 Тогда
			Форма.Элементы.Телефон.КнопкаВыпадающегоСписка = Истина;
		КонецЕсли;
		
		Если Форма.Элементы.Email.СписокВыбора.Количество() > 0 Тогда
			Форма.Элементы.Email.КнопкаВыпадающегоСписка = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьКонтактнуюИнформациюПоПартнеру

// Описание: Заполняет структуру информации о кассире
//
// Параметры:
// 	ПараметрыФормы - Параметры при открытии формы
// Возвращаемое значение:
//  Структура - Структура по свойствами:
//   * ИНН - ИИН кассира
//   * Наименование - ФИО кассира
//
Функция ПолучитьРеквизитыКассира(ПараметрыФормы) Экспорт
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Ответственный");
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыФормы.ДокументСсылка, СтруктураРеквизитов);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Наименование");
	СтруктураРеквизитов.Вставить("ИНН");
	Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокумента.Ответственный.ФизическоеЛицо, СтруктураРеквизитов);
	
	Возврат Результат;
	
КонецФункции

// Описание: Возвращает ставку НДС по переданному значению.
//
//
Функция ЗначениеСтавкиНДС(СтавкаНДС, ДляОсвобожденногоОборота = Ложь) Экспорт
	
	Если ДляОсвобожденногоОборота = Истина и СтавкаНДС = 0 Тогда
		Возврат Справочники.СтавкиНДС.ПолучитьСтавкуНДСБезНДС();
	Иначе
		Возврат Справочники.СтавкиНДС.ПолучитьСтавкуНДСПоЗначению(СтавкаНДС);
	КонецЕсли;
	
	
КонецФункции

// Описание: Возвращает единицу измерения по коду
//
//
Функция ЕдиницаИзмеренияПоКоду(КодЕдиницыИзмерения) Экспорт
	
	Возврат Справочники.БазовыеЕдиницыИзмерения.НайтиПоКоду(КодЕдиницыИзмерения);
	
КонецФункции //ЕдиницыИзмеренияПоКоду

// Описание: Значение реквизита объекта
//
//
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
 
	Возврат ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	        
КонецФункции
  
// Описание: Получение параметров фискализации чека
//
// Параметры:
//  ДокументСсылка - Ссылка на документ
//  НомерСекции - Номер секции
//  ВерсияФФД - Версия формата фискальных данных (по умолчанию 1.0)
//
// Возвращаемое значение: 
//  Структура - параметры фискализации чека
//
Функция ПараметрыОперацииФискализацииЧека(ДокументСсылка, НомерСекции, ВерсияФФД) Экспорт
	
	ПолноеИмя = ДокументСсылка.Метаданные().ПолноеИмя();
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	НомерСекции = 1;
	ОписаниеОшибки = "";
	ВерсияФФД = "1.0.0.0";	
	
	РаспределениеВыручкиПоСекциям = ПодключаемоеОборудованиеРТВызовСервера.РаспределениеВыручкиПоСекциям(Неопределено);
	//получаем последний номер чека
	КассаККМ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "КассаККМ");
	Если ЗначениеЗаполнено(КассаККМ) Тогда
		ПоследнийНомерЧекаККМ = ОбщегоНазначенияРТВызовСервера.ПоследнийНомерДокументаКассыККМ(КассаККМ);
	КонецЕсли; 
	Если Не (ПоследнийНомерЧекаККМ <> Неопределено И ПоследнийНомерЧекаККМ <> 0) Тогда
		ПоследнийНомерЧекаККМ = 1;
	КонецЕсли; 
	НомерЧека = ПоследнийНомерЧекаККМ + 1;
	
	Результат = МенеджерОбъекта.ПодготовитьДанныеДляПробитияЧека(
		ДокументСсылка,
		РаспределениеВыручкиПоСекциям,
		НомерЧека);
	
	Возврат Результат;
	
КонецФункции //ПараметрыОперацииФискализацииЧека
 
// Описание: Получение прав доступа РМК для пользователя
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи.
Функция ПолучитьПраваДоступа(Пользователь) Экспорт
	
	Возврат Неопределено;
	
КонецФункции
 
// Функция находит актуальное значение телефона в контакной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации
//
// Возвращаемое значение
//  Строка - представление найденного телефона
//
Функция КонтактнаяИнформацияОбъектов(Объект)

	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
		Окончание = "Организации";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		Окончание = "Контрагента";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Окончание = "ФизическогоЛица";
	КонецЕсли;

	ВидТелефона = Справочники.ВидыКонтактнойИнформации["Телефон" + Окончание];

	Запрос = Новый Запрос;                               
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("ТипТелефон" , Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("ТипПочта"   , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("Вид"   , ВидТелефона);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	НомерТелефона КАК Представление
	|ИЗ
	|	" + Объект.Метаданные().ПолноеИмя() + ".КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Объект
	|	И КонтактнаяИнформация.Тип = &ТипТелефон
	|	И КонтактнаяИнформация.Вид = &Вид
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтактнаяИнформация.Тип,
	|	КонтактнаяИнформация.АдресЭП
	|ИЗ
	|	" + Объект.Метаданные().ПолноеИмя() + ".КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Объект
	|	И КонтактнаяИнформация.Тип = &ТипПочта";
	РезультатЗапроса = Запрос.Выполнить();
	ПустойРезультат = Новый Массив;
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ПустойРезультат;
	Иначе
		Возврат РезультатЗапроса.Выгрузить();
	КонецЕсли;

КонецФункции

// Функция возвращает ставку НДС по переданному значению.
//
Функция СтавкаНДСПоЗначению(Ставка) 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтавкиНДС.Ссылка КАК СтавкаНДС
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	(НЕ СтавкиНДС.ДляОсвобожденногоОборота И НЕ СтавкиНДС.МестоРеализацииНеРК)
	|	И СтавкиНДС.Ставка = &СтавкаНДС";
	
	Запрос.УстановитьПараметр("СтавкаНДС", Ставка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтавкаНДС;
	Иначе
		Возврат ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка");
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Отформатировать номер телефона. Из номера вида 9999999999 формирует +7(999)999-99-99.
//
// Параметры:
//  Телефон - Строка - Номер телефона.
// 
// Возвращаемое значение:
//  Строка - Отформатированный номер телефона.
//
Функция ОтформатироватьНомерТелефона(Телефон) 
	
	Если ЗначениеЗаполнено(Телефон) Тогда
		
		Если СтрДлина(Телефон) > 3 Тогда;
			Буфер = Сред(Телефон, 4, СтрДлина(Телефон) - 3);
		Иначе
			Буфер = "";
		КонецЕсли;
		
		Возврат "+7(" + Лев(Телефон, 3) + ")" + Буфер;
		
	Иначе
		
		Возврат "+7";
		
	КонецЕсли;
	
КонецФункции

// Получить 10 знаков номера телефона по переданному представлению.
//
// Параметры:
//  Телефон - Строка - Представление номера телефона.
// 
// Возвращаемое значение:
//  Строка - 10 знаков номера телефона.
//
Функция НомерТелефонаВФормате10Знаков(Телефон) 
	
	Телефон10Знаков = "";
	Числа = "0123456789";
	
	ДлинаПредставленияТелефона = СтрДлина(Телефон);
	Для Индекс = 1 По ДлинаПредставленияТелефона Цикл
		
		Символ = Сред(Телефон, Индекс, 1);
		Если СтрНайти(Числа, Символ) > 0 Тогда
			Телефон10Знаков = Телефон10Знаков + Символ;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Прав(Телефон10Знаков, 10);
	
КонецФункции

 