
///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПомощникНастройкиКассовогоМеста

// Переопределяет запрос динамического списка.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма выбора продавцов.
//	ИмяДинамическогоСписка - Строка - имя переопределяемого динамического списка.
//  Отказ - Булево.
//
Процедура ПереопределитьДинамическийСписокПомощникаНастройкиРМК(Форма, ИмяДинамическогоСписка, Отказ) Экспорт
	ОбщегоНазначенияРМКРТ.ПереопределитьДинамическийСписокПомощникаНастройкиРМК(Форма, ИмяДинамическогоСписка, Отказ);
КонецПроцедуры

// Формирует запрос для отчета о подключенном оборудовании.
//
// Параметры:
//  Запрос - Запрос - запрос, для отчета о подключенном оборудовании.
//  Форма - ФормаКлиентскогоПриложения - форма помощника настройки кассового места.
//
Процедура СформироватьЗапросОтчетОПодключенномОборудовании(Запрос, Форма) Экспорт
	ОбщегоНазначенияРМКРТ.СформироватьЗапросОтчетОПодключенномОборудовании(Запрос, Форма);
КонецПроцедуры

// Формирует запрос для определения количества касс ККМ с отбором по организации и торговому объекту.
//
// Параметры:
//  Запрос - Запрос - запрос для переопределения.
//  Форма - ФормаКлиентскогоПриложения - форма помощника настройки кассового места.
//
Процедура СформироватьЗапросКоличествоКассККМ(Запрос, Форма) Экспорт
	ОбщегоНазначенияРМКРТ.СформироватьЗапросКоличествоКассККМ(Запрос, Форма);
КонецПроцедуры

// Формирует запрос для определения подключенных касс ККМ в рабочему месту кассира.
//
// Параметры:
//  Запрос - Запрос - запрос для переопределения.
//  Форма - ФормаКлиентскогоПриложения - форма помощника настройки кассового места.
//
Процедура СформироватьЗапросПодключенныеКассыККМ(Запрос, Форма) Экспорт
	ОбщегоНазначенияРМКРТ.СформироватьЗапросПодключенныеКассыККМ(Запрос, Форма);
КонецПроцедуры

// Формирует запрос для определения подключенных эквайринговых терминалов в рабочему месту кассира.
//
// Параметры:
//  Запрос - Запрос - запрос для переопределения.
//  Форма - ФормаКлиентскогоПриложения - форма помощника настройки кассового места.
//
Процедура СформироватьЗапросПодключенныеЭквайринговыеТерминалы(Запрос, Форма) Экспорт
	ОбщегоНазначенияРМКРТ.СформироватьЗапросПодключенныеЭквайринговыеТерминалы(Запрос, Форма);
КонецПроцедуры

// Формирует запрос для определения терминалов с незаполненными тарифами за операции.
//
// Параметры:
//  Запрос - Запрос - запрос для переопределения.
//  Форма - ФормаКлиентскогоПриложения - форма помощника настройки кассового места.
//
Процедура СформироватьЗапросТерминалыСПустымиТарифами(Запрос, Форма) Экспорт
	ОбщегоНазначенияРМКРТ.СформироватьЗапросТерминалыСПустымиТарифами(Запрос, Форма);
КонецПроцедуры

// Формирует запрос для отображения результатов настройки КассККМ.
//
// Параметры:
//  Запрос - Запрос - запрос для переопределения.
//  Форма - ФормаКлиентскогоПриложения - форма помощника настройки кассового места.
//
Процедура СформироватьЗапросНастроенныеКассыККМВПомощнике(Запрос, Форма) Экспорт
	ОбщегоНазначенияРМКРТ.СформироватьЗапросНастроенныеКассыККМВПомощнике(Запрос, Форма);
КонецПроцедуры

// Формирует запрос для получения данных:
// Пакет 1: выборка организаций.
// Пакет 2: выборка торговых объектов.
// Пакет 3: выборка касс ККМ.
//
// Параметры:
//  Запрос - Запрос - запрос для переопределения.
//  Форма - ФормаКлиентскогоПриложения - форма помощника настройки кассового места.
//
Процедура СформироватьЗапросДанныеПредприятия(Запрос, Форма) Экспорт
	ОбщегоНазначенияРМКРТ.СформироватьЗапросДанныеПредприятия(Запрос, Форма);
КонецПроцедуры

// Формирует запрос для определения используемых видов оплат в помощнике настройки кассового места.
//
// Параметры:
//  Запрос - Запрос - запрос для переопределения.
//  Форма - ФормаКлиентскогоПриложения - форма помощника настройки кассового места.
//
Процедура СформироватьЗапросИспользуемыеВидыОплат(Запрос, Форма) Экспорт
	ОбщегоНазначенияРМКРТ.СформироватьЗапросИспользуемыеВидыОплат(Запрос, Форма);
КонецПроцедуры

// Возвращает перечень доступных эквайринговых терминалов, для которых указаны кассы ККМ
// на этапе настройки РМК через интерфейс помощника настройки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложение - форма настройки помощника рабочего места кассира.
//  Результат - Массив - исходные данные для переопределения.
//
Процедура ЭквайринговыеТерминалыСККМ(Форма, Результат) Экспорт
	ОбщегоНазначенияРМКРТ.ЭквайринговыеТерминалыСККМ(Форма, Результат);
КонецПроцедуры

// Подготавливает данные для создания эквайрингового терминала через интерфейс помощника
// настройки РМК.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложение - форма настройки помощника рабочего места кассира
//
Процедура ЗаполнитьТаблицуСозданияЭквайринговыхТерминалов(Форма) Экспорт
	ОбщегоНазначенияРМКРТ.ЗаполнитьТаблицуСозданияЭквайринговыхТерминалов(Форма);
КонецПроцедуры

// Изменяет отображение страницы видов оплат
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложение - форма настройки помощника рабочего места кассира
//
Процедура НастройкаСтраницыВидовОплат(Форма) Экспорт
	
КонецПроцедуры

// Изменяет видимость сценария настроек РМК
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложение - форма настройки помощника рабочего места кассира
//
Процедура НастройкаОтображенияСценария(Форма) Экспорт
	
КонецПроцедуры

// Заполяет текст запроса для определения кодов запроса
//
// Параметры:
//  ТекстЗапроса - Строка -текст запроса кодов запроса
//
Процедура СформироватьТекстЗапросаКассира(ТекстЗапроса) Экспорт

КонецПроцедуры

// Создает группы доступа по-умолчанию, если они не созданы
// по профилям группы доступа Администратор, Кассир, Старший кассир
Процедура СоздатьГруппыДоступаПоУмолчанию() Экспорт

КонецПроцедуры

// Заполняет таблицу сотрудников по данным физических лиц
//
// Параметры:
//  АдресХранилищаТаблицы - Строка - адрес временного хранилища таблицы сотрудников
//   *ФизическоеЛицо - ОпределяемыйТип.ФизическоеЛицо - физическое лицо с признаком сотрудник
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК - Торговый объект для которого происходит настройка РМК
//
Процедура ЗаполнитьТаблицуСотрудников(АдресХранилищаТаблицы, ТорговыйОбъект) Экспорт
	

	
КонецПроцедуры

// Создает пользователей по переданному массиву физических лиц
//
// Параметры:
//  МассивФизическихЛиц - Массив - Массив переданных физических лиц
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК - Торговый объект для которого происходит настройка РМК
//
Процедура СоздатьПользователейПоМассивуФизЛиц(МассивФизическихЛиц, ТорговыйОбъект) Экспорт
	

	
КонецПроцедуры

// Заполняет текст запроса дерева группы доступа
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса дерево группы доступа
//
Процедура ЗаполнитьТекстЗапросаДеревоГруппыДоступа(ТекстЗапроса) Экспорт
	

	
КонецПроцедуры

// Проверяет наличие записи персонального кода
//
// Параметры:
//  ВыбраннаяСтрока - РегистрСведенийКлючЗаписи.КассирыДляВхода - значение записи персонального кода
//  НетЗаписи - Булево - значение наличия записи
//  ДанныеЗаписи - Структура - ключевые параметры для поиска записи регистра
//  * Пользователь - ОпределяемыйТип.ПользовательРМК - пользователь записи регистра
//  * ФизическоеЛицо - ОпределяемыйТип.ФизическоеЛицо - физическое лицо записи регистра
//
Процедура ПроверитьИНайтиЗаписьПерсональныйКод(ВыбраннаяСтрока, НетЗаписи, ДанныеЗаписи) Экспорт
	

	
КонецПроцедуры

// Процедура создает пользователей информационной базы Кассир, Страший Кассир, Администратор, если не используется обмен физическими лицами
//
// Параметры:
//  ПродавцыНеПередаются - Булево - признак обмена физическими лицами
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК - торговый объект для которго происходит настройка
//
Процедура СоздатьПользователейПриПервоначальномЗаполнении(ПродавцыНеПередаются, ТорговыйОбъект) Экспорт
	

	
КонецПроцедуры

// Процедура устанавливает рабочее место кассы ККМ в соответствии с оборудованием.
//
// Параметры:
//  КассаККМОбъект - ОпределяемыйТип.КассаККМРМК - касса ккм
//  ПодключаемоеОборудование - ОпределяемыйТип.ПодключаемоеОборудованиеРМК - подключаемое оборудование
//
Процедура УстановитьРабочееМестоКассыККМ(КассаККМОбъект, ПодключаемоеОборудование) Экспорт
	

	
КонецПроцедуры
#КонецОбласти

#Область ПрограммныйИнтерфейс_ПереопределениеАутентификацииПользователейПоКодамДоступа

// Проверяет наличие ошибок при настройке текущего пользователя 
//
// Параметры:
//  Отказ - Истина - признак наличия отказа, выставляется при выявлении ошибки настройки.
//  ТекстЗаголовка - Строка - текст заголовка ошибки для передачи в заголовок панели ошибок формы РМК.
//  ТекстСообщения - Строка - текст ошибки для передачи в тело ошибки панели ошибок формы РМК.
//
//
Процедура ПроверитьНастройкиПользователя(Отказ, ТекстЗаголовка, ТекстСообщения) Экспорт

	ОбщегоНазначенияРМКРТ.ПроверитьНастройкиПользователя(Отказ, ТекстЗаголовка, ТекстСообщения);

КонецПроцедуры

// Заполняет значение нового кода доступа для сотрудника.
//
// Параметры:
//  НовыйКодСотрудника - Строка - новый код доступа сотрудника.
//
Процедура ЗаполнитьНовыйКодДоступаКассира(НовыйКодСотрудника) Экспорт
	ОбщегоНазначенияРМКРТ.ЗаполнитьНовыйКодДоступаКассира(НовыйКодСотрудника);
КонецПроцедуры

// Заполняет изображение штрихкода в табличном документе.
//
// Параметры:
//  КодКассира - Строка - исходные данные кода доступа кассира для выведения в виде сканируемого изображения
//  Наименование - Строка - исходные данные кассира для выведения в виде сканируемого изображения
//  Результат - ТабличныйДокумент - табличный документ, в котором необходимо вывести изображение штрихкода.
//
Процедура ПодготовитьКодДоступаПользователяДляСохранения(КодКассира, Наименование, Результат) Экспорт
	
	ОбщегоНазначенияРМКРТ.ПодготовитьКодДоступаПользователяДляСохранения(КодКассира, Наименование, Результат);
	
КонецПроцедуры

// Формирует запрос на получение паролей текущего пользователя.
// Запрос должен получать все коды доступа для текущего пользователя.
//
// Параметры:
//  Запрос - Запрос - запрос, для проверки кодов доступа у пользователя.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура СформироватьЗапросПолученияКодовДоступаПользователя(Запрос, Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.СформироватьЗапросПолученияКодовДоступаПользователя(Запрос, Форма);
	
КонецПроцедуры

// Отправляет email.
//
// Параметры:
//  Результат - Булево - признак выполнения операции отправки email.
//  ТемаПисьма - Строка - тема отправляемого email.
//  ТелоПисьма - Строка - тело текста отправляемого email .
//  АдресаПолучателей - Строка - адреса получателей через разделитель.
//  РазделительАдресовПолучателей - Строка - разделитель для адресов получателей.
//
Процедура ОтправитьEmail(Результат, ТемаПисьма, ТелоПисьма, АдресаПолучателей,
	РазделительАдресовПолучателей = ";") Экспорт
	
	ОбщегоНазначенияРМКРТ.ОтправитьEmail(Результат, ТемаПисьма, ТелоПисьма, АдресаПолучателей,
		РазделительАдресовПолучателей);
		
КонецПроцедуры

// Формирует запрос для получения последнего внутреннего штрихкода в базе.
// В выборке должно быть поле "Код".
//
// Параметры:
//  Запрос - Запрос - переопределяемый запрос.
//  ПрефиксВнутреннегоШтрихкода - Число - префикс для внутреннего штрихкода.
//  ПрефиксШтрихкодаИБ - Число - префикс для информационной базы.
//
Процедура СформироватьЗапросПоследнийШтрихкод(Запрос, ПрефиксВнутреннегоШтрихкода, ПрефиксШтрихкодаИБ) Экспорт
	
	ОбщегоНазначенияРМКРТ.СформироватьЗапросПоследнийШтрихкод(Запрос, ПрефиксВнутреннегоШтрихкода, ПрефиксШтрихкодаИБ);
	
КонецПроцедуры

// Записывает код доступа владельца в базу данных и меняет значение признака успешности записи кода доступа.
//
// Параметры:
//  Владелец - ОпределяемыйТип.ВладелецШтрихкодаРМК - владелец кода доступа.
//  КодДоступа - Строка - код доступа для записи в базу данных.
//
Процедура УстановитьКодДоступаКассиру(Владелец, КодДоступа) Экспорт
	
	ОбщегоНазначенияРМКРТ.УстановитьКодДоступаКассиру(Владелец, КодДоступа);
	
КонецПроцедуры

// Перезаполняет адрес электронной почты кассира из карты лояльности, при ее наличии
//
// Параметры:
//  Кассир - ОпределяемыйТип.КассирРМК
//  АдресЭлектроннойПочты - Строка
//
Процедура ЗаполнитьАдресЭлектроннойПочтыКассира(Кассир, АдресЭлектроннойПочты) Экспорт
	ОбщегоНазначенияРМКРТ.ЗаполнитьАдресЭлектроннойПочтыКассира(Кассир, АдресЭлектроннойПочты);
КонецПроцедуры

// Заполняет значение нового кода доступа для кассира.
//
// Параметры:
//  НовыйКодСотрудника - Строка - новый код доступа сотрудника.
//
Процедура ЗаполнитьНовыйКодДоступаКассирДляВхода(НовыйКодСотрудника) Экспорт
	

	
КонецПроцедуры

// Записывает код доступа в базу данных.
//
// Параметры:
//  Владелец - ОпределяемыйТип.КассирРМК - владелец кода доступа.
//  КодДоступа - Строка - код доступа для записи в базу данных.
//
Процедура УстановитьКодДоступаКассируДляВхода(Владелец, КодДоступа) Экспорт
	

	
КонецПроцедуры

// Переопределяет значение владельца кода доступа по исходным данным
//
// Параметры:
//  ВладелецКодаДоступа - ОпределяемыйТип.КассирРМК
//
Процедура ПереопределитьВладельцаКодаДоступа(ВладелецКодаДоступа) Экспорт
	ОбщегоНазначенияРМКРТ.ПереопределитьВладельцаКодаДоступа(ВладелецКодаДоступа);
КонецПроцедуры

#КонецОбласти

#Область ФормированиеЗапросов

// Формирует запрос для получения данных эквайринговый терминалов.
// В результате запроса должна быть заполнена таблица на форме РМК "ТаблицаТерминалы".
//
// Параметры:
//  Запрос - Запрос - запрос для получения данных ЭТ.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура СформироватьЗапросДанныеЭквайринговыхТерминалов(Запрос, Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.СформироватьЗапросДанныеЭквайринговыхТерминалов(Запрос, Форма);
	
КонецПроцедуры

// Формирует запрос для получения данных касс ККМ.
// Поля обязательные в выборке: КассаККМ, Организация, ПодключаемоеОборудование, ИспользоватьБезПодключенияОборудования,
// ТорговыйОбъект.
//
// Параметры:
//  Запрос - Запрос - запрос для получения данных касс ККМ.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ДополнительныеПараметры - Структура - дополнительные параметры, если по данным формы не удается задать параметры запроса.
//
Процедура СформироватьЗапросДанныеКассыККМ(Запрос, Форма = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбщегоНазначенияРМКРТ.СформироватьЗапросДанныеКассыККМ(Запрос, Форма, ДополнительныеПараметры);
	
КонецПроцедуры

// Формирует запрос для получения данных избранных товаров.
// В результате запроса должна быть заполнена таблица на форме РМК "ИзбранныеПозиции".
//
// Параметры:
//  Запрос - Запрос - запрос для получения данных избранных товаров.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура СформироватьЗапросДанныеИзбранныхТоваров(Запрос, Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.СформироватьЗапросДанныеИзбранныхТоваров(Запрос, Форма);
	
КонецПроцедуры

// Формирует запрос для получения данных организаций.
//
// Параметры:
//  Запрос - Запрос - запрос для получения данных организаций.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура СформироватьЗапросДанныеОрганизаций(Запрос, Форма) Экспорт
	ОбщегоНазначенияРМКРТ.СформироватьЗапросДанныеОрганизаций(Запрос, Форма);
КонецПроцедуры

#КонецОбласти

#Область Запреты_продаж_ПрограммныйИнтерфейс

// Заполняет признак использования запретов продаж по данным сервера лояльности
//
// Параметры:
//  Результат - Булево - устанавливаемое значение признака
//
Процедура ЗаполнитьПризнакИспользованияОграниченийПродажРМК(Результат) Экспорт
	ОбщегоНазначенияРМКРТ.ЗаполнитьПризнакИспользованияОграниченийПродажРМК(Результат);
КонецПроцедуры

// Устанавливает признак использования запретов продаж, поставляемых конфигурацией
//
// Параметры:
//  ИспользоватьОграниченияПродаж - Булево - исходное значение признака
//
Процедура ЗаполнитьПризнакИспользованияПоставляемыхОграниченийПродаж(ИспользоватьОграниченияПродаж) Экспорт
	ОбщегоНазначенияРМКРТ.ЗаполнитьПризнакИспользованияПоставляемыхОграниченийПродаж(ИспользоватьОграниченияПродаж);
КонецПроцедуры

// Обновляет признак использования календарного запрета продаж по данным использования поставляемого конфигурацией
// признака запрета продаж
//
// Параметры:
//  ИспользоватьОграниченияПродаж - Булево - устанавливаемое значение признака
//  ПараметрыОбновления - Структура - дополнительные параметры
//
Процедура ОбновитьПризнакИспользованияОграниченийПродаж(ИспользоватьОграниченияПродаж, ПараметрыОбновления) Экспорт
	ОбщегоНазначенияРМКРТ.ОбновитьПризнакИспользованияОграниченийПродаж(ИспользоватьОграниченияПродаж, ПараметрыОбновления);
КонецПроцедуры

// Обновляет регистр сведений запретов продаж по поставляемым (встроенным) конфигурацией ограничениям 
//
// Параметры:
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК- торговый объект для отбора перечня ограничений.
//  Результат - Структура:
//  	* КомментарийОбновленияЗапретов - Строка - при наличии ошибок обновления данных содержит пояснение
//
Процедура ОбновитьОграниченияПродажИзПоставляемыхДанных(ТорговыйОбъект, Результат) Экспорт
	ОбщегоНазначенияРМКРТ.ОбновитьОграниченияПродажИзПоставляемыхДанных(ТорговыйОбъект, Результат);
КонецПроцедуры

#КонецОбласти

#Область Печать_заявления_на_возврат_ПрограммныйИнтерфейс

// Дополняет исходные данные для заявления на возврат 
//
// Параметры:
//  ДанныеЗаявленияНаВозврат - Структура - см. ОбщегоНазначенияРМККлиент.СтруктураЗаявленияНаВозврат()
//
Процедура ДополнитьИсходныеДанныеЗаявленияНаВозврат(ДанныеЗаявленияНаВозврат) Экспорт
	ОбщегоНазначенияРМКРТ.ДополнитьИсходныеДанныеЗаявленияНаВозврат(ДанныеЗаявленияНаВозврат);
КонецПроцедуры

// Переопределение формирования заявления на возврат
//
// Параметры:
//  ЗаявлениеНаВозврат - ТабличныйДокумент - исходный макет заявления, сформированный по умолчанию
//  ДанныеЗаявленияНаВозврат - Структура - см. ДополнитьИсходныеДанныеЗаявленияНаВозврат(ДанныеЗаявленияНаВозврат)
//
Процедура ЗаполнитьЗаявлениеНаВозврат(ЗаявлениеНаВозврат, ДанныеЗаявленияНаВозврат) Экспорт
	ОбщегоНазначенияРМКРТ.ЗаполнитьЗаявлениеНаВозврат(ЗаявлениеНаВозврат, ДанныеЗаявленияНаВозврат);
КонецПроцедуры

// Заполняет ФИО и дату рождения клиента по данным карты лояльности
//
// Параметры:
//  ДисконтнаяКартаКлиента - ОпределяемыйТип.ДисконтнаяКартаРМК - карта лояльности, содержащая исходные данные;
//  ФИО - Строка;
//  ДатаРождения - Дата.
//
Процедура ЗаполнитьПерсональныеДанныеПоКартеКлиента(ДисконтнаяКартаКлиента, ФИО, ДатаРождения) Экспорт
	ОбщегоНазначенияРМКРТ.ЗаполнитьПерсональныеДанныеПоКартеКлиента(ДисконтнаяКартаКлиента, ФИО, ДатаРождения);
КонецПроцедуры

// Получает краткое наименование организации
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияРМК;
//  КраткоеНаименованиеОрганизации - Строка.
//
Процедура ЗаполнитьКраткоеНаименованиеОрганизации(Организация, КраткоеНаименованиеОрганизации) Экспорт
	ОбщегоНазначенияРМКРТ.ЗаполнитьКраткоеНаименованиеОрганизации(Организация, КраткоеНаименованиеОрганизации);
КонецПроцедуры

#КонецОбласти

#Область Переопределение_обработчиков_форм_ПрограммныйИнтерфейс

// Переопределяет поведение формы при создании на сервере
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, поведение которой переопределяется.
//  Отказ - Булево.
//  СтандартнаяОбработка - Булево.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	ОбщегоНазначенияРМКРТ.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область СерверЛояльности

// Заполняет имя реквизита, в котором хранится код карты лояльности.
//
// Параметры:
//  ИмяРеквизита - Строка - имя реквизита.
//  ДисконтнаяКарта - ОпределяемыйТип.ДисконтнаяКартаРМК - Дисконтная карта выбранная в форме РМК
//
Процедура ЗаполнитьИмяРеквизитаКодКартыЛояльности(ИмяРеквизита, ДисконтнаяКарта) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьИмяРеквизитаКодКартыЛояльности(ИмяРеквизита);
	
КонецПроцедуры

// Определяет является ли вид операции операцией возврат.
// Значение по умолчанию - ложь.
//
// Параметры:
//  ВидОперации - ОпределяемыйТип.ВидОперацииРМК - текущий вид операции.
//  ВидОперацииВозврат - Булево - истина, если вид операции - возврат.
//
Процедура ЭтоВидОперацииВозврат (ВидОперации, ВидОперацииВозврат) Экспорт
	

	
КонецПроцедуры
#КонецОбласти

#Область ПараметрыПрограммы

// Заполняет признак использования замены товаров.
//
// Параметры:
//  Результат - Булево - признак использования замены товаров.
//
Процедура ЗаполнитьПризнакИспользоватьЗаменуТоваров(Результат) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьПризнакИспользоватьЗаменуТоваров(Результат);
	
КонецПроцедуры

// Заполняет признак использования сервера лояльности.
//
// Параметры:
//  Результат - Булево - признак использования сервера лояльности.
//
Процедура ЗаполнитьПризнакИспользоватьСерверЛояльностиПолучательДанных(Результат) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьПризнакИспользоватьСерверЛояльностиПолучательДанных(Результат);
	
КонецПроцедуры

// Заполняет признак использования оплат сертификатами НСПК.
//
// Параметры:
//  Результат - Булево - признак использования оплат сертификатами НСПК.
//
Процедура ЗаполнитьПризнакИспользоватьОплатуСертификатамиНСПК(Результат) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьПризнакИспользоватьОплатуСертификатамиНСПК(Результат);
	
КонецПроцедуры

// Заполняет признак использования упаковок в конфигурации.
//
// Параметры:
//  ИспользоватьУпаковки - Булево - признак использования упаковок.
//
Процедура ЗаполнитьИспользованиеУпаковок(ИспользоватьУпаковки) Экспорт

КонецПроцедуры

// Устарела. Признак определяется в настройка рмк
// Заполняет признак использования оплат платежными системами.
//
// Параметры:
//  ИспользоватьОплатуПлатежнымиСистемами - Булево - признак использования оплат платежными системами.
//
Процедура ЗаполнитьПризнакИспользованияОплатПлатежнымиСистемами(ИспользоватьОплатуПлатежнымиСистемами) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьПризнакИспользованияОплатПлатежнымиСистемами(ИспользоватьОплатуПлатежнымиСистемами);
	
КонецПроцедуры

// Заполняет имя константы в прикладной конфигурации по переданному виду параметра.
//
// Параметры:
//  ВидКонстанты - Строка - вид переданной константы.
//  ИмяКонстанты - Строка - имя константы в прикладной конфигурации.
//
Процедура ЗаполнитьИмяКонстантыПоВиду(ВидКонстанты, ИмяКонстанты) Экспорт
	ОбщегоНазначенияРМКРТ.ЗаполнитьИмяКонстантыПоВиду(ВидКонстанты, ИмяКонстанты);
КонецПроцедуры

// Заполняет признак, который определяет, что используется сокращенный сценарий настройки рабочего места кассира.
//
// Параметры:
//  Результат - Булево - признак для заполнения.
//
Процедура ЗаполнитьПризнакЭтоСокращенныйСценарийНастройкиРМК(Результат) Экспорт
	ОбщегоНазначенияРМКРТ.ЗаполнитьПризнакЭтоСокращенныйСценарийНастройкиРМК(Результат);
КонецПроцедуры

 // Заполняет признак формирования отдельного чека ЕГАИС при продаже алкогольной продукции.
//
// Параметры:
//  Результат - Булево - значение признака до переопределения.
//
Процедура ЗаполнитьПризнакПечатиОбщегоКодаДляЧекаККТИЕГАИС(Результат) Экспорт
	ОбщегоНазначенияРМКРТ.ЗаполнитьПризнакПечатиОбщегоКодаДляЧекаККТИЕГАИС(Результат);
КонецПроцедуры

// Заполняет признак формирования слип - чека, встроенного в фискальный чек.
//
// Параметры:
//  Результат - Булево - значение признака до переопределения.
//
Процедура ЗаполнитьПризнакФормированияКороткогоСлипЧека(Результат) Экспорт
	ОбщегоНазначенияРМКРТ.ЗаполнитьПризнакФормированияКороткогоСлипЧека(Результат);
КонецПроцедуры

// Заполняет признак возможности использования промкодов при локальном расчете скидок.
//
// Параметры:
//  Результат - Булево - значение признака до переопределения.
//
Процедура ЛокальныйРасчетСкидокПоддерживаетПромокоды(Результат) Экспорт
	
КонецПроцедуры

// Заполняет узлы, задействованные в обмене с управляющей системой
//
// Параметры:
//  УзлыОбмена - Массив - перечень узлов обмена 1с:РМК
//
Процедура ЗаполнитьУзлыОбменаРМК(УзлыОбмена) Экспорт

КонецПроцедуры

// Заполняет признак возможности отправки электронной почты без функциональности БСП.
//
// Параметры:
//  Результат - Булево - Истина, если возможно отправить почту без использования БСП.
//
Процедура ЗаполнитьПризнакДоступнаОтправкаПочтыБезБСП(Результат) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьПризнакДоступнаОтправкаПочтыБезБСП(Результат);
	
КонецПроцедуры

// Позволяет перенастроить форму настроек РМК при изменении
// значения констант
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма настроек РМК
// 
Процедура ОбновитьРеквизитыНастроекПоКонстантам(Форма) Экспорт
	

	
КонецПроцедуры

// Заполняет признак ведения учета пивной продукции, реализуемой в розлив.
//
// Параметры:
//  Результат - Булево - признак использования оплат сертификатами НСПК.
//
Процедура ЗаполнитьПризнакВеденияУчетаПивнойПродукцииВРозлив(Результат) Экспорт
	ОбщегоНазначенияРМКРТ.ЗаполнитьПризнакВеденияУчетаПивнойПродукцииВРозлив(Результат);
КонецПроцедуры

// Заполняет префикс штрихкода весового товара
//
// Параметры:
//  ПрефиксШтрихкодаВесовогоТовара - Число - значение константы ПрефиксШтрихкодаВесовогоТовара
//
Процедура ЗаполнитьПрефиксШтрихкодаВесовогоТовара(ПрефиксШтрихкодаВесовогоТовара) Экспорт

КонецПроцедуры

// Заполняет префикс штрихкода штучного фасованного товара
//
// Параметры:
//  ПрефиксШтрихкодаВесовогоТовара - Число - значение константы ПрефиксШтрихкодаВесовогоТовара
//
Процедура ЗаполнитьПрефиксШтрихкодаШтучногоФасованногоТовара(ПрефиксШтрихкодаШтучногоФасованногоТовара) Экспорт

КонецПроцедуры

// Заполняет шаблон штрихкода товара
//
// Параметры:
//  ШаблонШтрихкодаТовара - ОпределяемыйТип.ШаблонШтрихкодаВесовыхТоваровРМК - значение константы ШаблонШтрихкодаВесовыхТоваров
//
Процедура ЗаполнитьШаблонШтрихкодаТовара(ШаблонШтрихкодаТовара) Экспорт

КонецПроцедуры

// Заполняет контрагента по ИНН и КПП
// Параметры:
//  ИНН - Строка
//  КПП - Строка
//  Контрагент - ОпределяемыйТип.КонтрагентРМК - заполняемый контрагент. Возвращаемый параметр.
//
Процедура ЗаполнитьКонтрагентаПоИННКПП(ИНН, КПП, Контрагент) Экспорт
	

	
КонецПроцедуры

#КонецОбласти

#Область Подключаемое_оборудование_ПрограммныйИнтерфейс

// Заполняет параметры по исходным данным 
//
// Параметры:
//	ОбщиеПараметры - Структура -
//		см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека().
//  ПараметрыПакетнойФискализации - Структура - 
//		см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПакетнойОперацииВОчередиЧеков().
//  ДанныеЗаполнения - Структура - Исходные данные:
//		* ИдентификаторЭТ - СправочникСсылка.ПодключаемоеОборудование.
//		* СуммаОплатыКартой - Число.
//		* ВидОплаты - ОпределяемыйТип.ВидОплатыРМК.
//		* ПроцентКомиссии - Число.
//		* ДанныеЧекаПродажи - ДокументСсылка.ЧекКККМ.
//		* ПараметрыВыдачиНаличных - Структура:
//			** ОрганизацияВыдачи - ОпределяемыйТип.ОрганизацияРМК.
//			** СуммаВыдачи - Число.
//
Процедура ЗаполнитьДанныеДляПакетнойФискализации(ОбщиеПараметры,
	ПараметрыПакетнойФискализации, ДанныеЗаполнения) Экспорт
		ОбщегоНазначенияРМКРТ.ЗаполнитьДанныеДляПакетнойФискализации(ОбщиеПараметры,
			ПараметрыПакетнойФискализации, ДанныеЗаполнения);
КонецПроцедуры

// Проверяет, что подключаемое оборудование используется
//
// Параметры:
//	ПодключаемоеОборудование - ОпределяемыйТип.ПодключаемоеОборудованиеРМК.
//	ОборудованиеИспользуется - Булево.
//
Процедура ЗаполнитьПризнакИспользованияПодключаемогоОборудования(ПодключаемоеОборудование,
		ОборудованиеИспользуется) Экспорт


КонецПроцедуры

#КонецОбласти

#Область ВыборСкладаИЯчейкиПриПродаже

// Формирует запрос для получения списка складов, которые можно вручную выбрать для продажи в форме РМК.
// Процедура должна сформировать запрос динамического списка "Список" на форме "ФормаВыбораСкладЯчейка".
// Поле запроса должно иметь синоним "ДанныеСтроки".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма выбора склада и ячейки при продаже.
//
Процедура СформироватьЗапросСкладыДляРучногоВыбора(Форма) Экспорт
	

	
КонецПроцедуры

// Формирует запрос для получения списка ячеек, которые можно вручную выбрать для продажи в форме РМК.
// Процедура должна сформировать запрос динамического списка "Список" на форме "ФормаВыбораСкладЯчейка".
// Поле запроса должно иметь синоним "ДанныеСтроки".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма выбора склада и ячейки при продаже.
//
Процедура СформироватьЗапросЯчейкиДляРучногоВыбора(Форма) Экспорт
	

	
КонецПроцедуры

#КонецОбласти

#Область Выдача_наличных_при_продаже_ПрограммныйИнтерфейс

// Перезаполняет и сохраняет документ выдачи наличных как документ возврата.
// Актуально для случаев, когда в рамках пакетной фискализации продажи с выдачей наличных
// возникла ошибка фискализации выдачи, но ранее успешно прошла фискализация продажи.
// В момент отмены фискализации автоматически отменяется 
// фискализация чека продажи, ее нужно отразить возвратом в документах РМК,при этом 
// в РС "Фискальные операции" под регистратором выдачи наличных появится запись фискализации возврата.
//
// Параметры:
//  СсылкаНаЧекВыдачиНаличных - ОпределяемыйТип.ЧекККМРМК - ссылка на изменяемый документ
//  ЧекПродажиПриВыдачеНаличных - ОпределяемыйТип.ЧекККМРМК - исходные данные для перезаполнения.
//  НомерЧекаККМ - Число - номер чека ККМ для постобработки.
//  НомерСменыККМ - Число - номер смены ККМ для постобработки.
//  ПараметрыЭквайринговойОперации - Структура:
//   *ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование
//   *НомерЧекаЭТ - Строка
//   *СсылочныйНомер - Строка
//   *НомерКарты - Строка
//
Процедура ЗаменитьЧекВыдачиНаЧекВозврата(СсылкаНаЧекВыдачиНаличных,ЧекПродажиПриВыдачеНаличных,
	НомерЧекаККМ, НомерСменыККМ, ПараметрыЭквайринговойОперации) Экспорт


КонецПроцедуры

// Дополняет чек продажи данными об оплате картой
// Актуально для пакетной фискализации, в случае успешной фискализации чека продажи
//
// Параметры:
//  ЧекПродажи - ОпределяемыйТип.ЧекККМ - пояснение
//  ДанныеДляЗаполнения - Структура -
//		См. МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании()
//  ДополнительныеДанные - Структура -
//		См. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПакетнойОперацииВОчередиЧеков()
//
Процедура ЗаполнитьОплатуКартойДляПакетнойФискализации(ЧекПродажи, ДанныеДляЗаполнения, ДополнительныеДанные) Экспорт


КонецПроцедуры

#КонецОбласти

#Область Помощник_настройки_РМК_ПрограммныйИнтерфейс

// Выполняет конвертацию настроек РМК в настройки нового РМК
//
// Параметры:
//  ЭтотОбъект - ФормаКлиентскогоПриложение - общая форма настройки рабочего места кассира
//
Процедура КонвертироватьНастройкиСтарогоРМК(ЭтотОбъект) Экспорт
	ОбщегоНазначенияРМКРТ.КонвертироватьНастройкиСтарогоРМК(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ПлиточныйИнтерфейсПодбора_ПрограммныйИнтерфейс

// Дополняет данные о цене, особенности учета, виде номенклатуры и остатке
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения.
//
Процедура ДополнитьОпорныеДанныеПанелиДляПостроенияПлиточногоИнтерфейса(Форма) Экспорт
	ОбщегоНазначенияРМКРТ.ДополнитьОпорныеДанныеПанелиДляПостроенияПлиточногоИнтерфейса(Форма);
КонецПроцедуры

//  Заполняет исходные данные для формы элемента палитры избранных товаров по данным подбора.
//
// Параметры:
//  ИсходныеДанные - Произвольный - исходные данные подбора номенклатуры.
//  Результат - ТаблицаЗначений:
//		* Номенклатура - ОпределяемыйТип.НоменклатураРМК.
//		* Характеристика - ОпределяемыйТип.ХарактеристикаРМК.
//
Процедура ЗаполнитьЗначенияПодбораДляПалитры(ИсходныеДанные, Результат) Экспорт
	ОбщегоНазначенияРМКРТ.ЗаполнитьЗначенияПодбораДляПалитры(ИсходныеДанные, Результат);
КонецПроцедуры

// Дополняет состав плитки весовым товаром
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения.
//
Процедура ДополнитьОпорныеДанныеПлиткиВесовымТоваром(Форма) Экспорт

КонецПроцедуры

#КонецОбласти

#Область Локализация

// Настройка локализации картинок на форме.
// Необходимо заполнить значения для ключей структуры: "СкидкаТекущийТоварСумма", "СкидкаНаЧекСуммой".
//
// Параметры:
//  ПараметрыКартинок - Структура - структура с соответствиями картинок.
//    СкидкаНаЧекСуммой - БиблиотекаКартинок.
//    СкидкаТекущийТоварСумма - БиблиотекаКартинок.
//
Процедура ЛокализоватьКартинки(ПараметрыКартинок) Экспорт

КонецПроцедуры

// Заполняет представление национальной валюты.
//
// Параметры:
//  ПредставлениеВалюты - Строка - представление валюты.
//
Процедура ЗаполнитьПредставлениеВалюты(ПредставлениеВалюты) Экспорт

КонецПроцедуры

// Заполняет параметры национальной валюты.
//
// Параметры:
//  ПараметрыВалюты - Структура - параметры национальной валюты.
//    Код - Строка - код валюты.
//    Наименование - Строка - наименование валюты.
//    СимвольноеПредставление - Строка - символьное представление валюты.
//
Процедура ЗаполнитьПараметрыНациональнойВалюты(ПараметрыВалюты) Экспорт

КонецПроцедуры

// Проверка соответствия валюты в настройках программы и в данных при запуске рабочего места кассира.
//
// Параметры:
//  ВалютаЗаполненаПравильно - Булево - Истина, если валюта укзана верно.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ПроверитьВозможностьРаботыСВалютой(ВалютаЗаполненаПравильно, Форма) Экспорт
КонецПроцедуры

#КонецОбласти

#Область КонтрольПродаж

// Заполняет таблицу номенклатуры алкогольной продукцией для палитры.
//
// Параметры:
//  ТаблицаНоменклатуры - Таблица значений. Содержит 2 колонки: "Наименование", "Номенклатура".
//  СлужебнаяОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК.
//
Процедура ПолучитьНоменклатуруДляПалитрыАлкогольнаяПродукция(ТаблицаНоменклатуры, СлужебнаяОсобенностьУчета) Экспорт
	
	ОбщегоНазначенияРМКРТ.ПолучитьНоменклатуруДляПалитрыАлкогольнаяПродукция(ТаблицаНоменклатуры,
		СлужебнаяОсобенностьУчета);
	
КонецПроцедуры

// Заполняет таблицу номенклатуры табачной продукцией для палитры.
//
// Параметры:
//  ТаблицаНоменклатуры - Таблица значений. Содержит 2 колонки: "Наименование", "Номенклатура".
//  СлужебнаяОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК.
//
Процедура ПолучитьНоменклатуруДляПалитрыТабачнаяПродукция(ТаблицаНоменклатуры, СлужебнаяОсобенностьУчета) Экспорт
	
	ОбщегоНазначенияРМКРТ.ПолучитьНоменклатуруДляПалитрыТабачнаяПродукция(ТаблицаНоменклатуры,
		СлужебнаяОсобенностьУчета);
	
КонецПроцедуры

// Заполняет таблицу номенклатуры продукцией "Альтернативный табак" для палитры.
//
// Параметры:
//  ТаблицаНоменклатуры - Таблица значений. Содержит 2 колонки: "Наименование", "Номенклатура".
//  СлужебнаяОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК.
//
Процедура ПолучитьНоменклатуруДляПалитрыАльтернативныйТабак(ТаблицаНоменклатуры, СлужебнаяОсобенностьУчета) Экспорт
	
	ОбщегоНазначенияРМКРТ.ПолучитьНоменклатуруДляПалитрыАльтернативныйТабак(ТаблицаНоменклатуры,
		СлужебнаяОсобенностьУчета);
	
КонецПроцедуры

// Заполняет таблицу номенклатуры подарочными сертификатами для палитры.
//
// Параметры:
//  ТаблицаНоменклатуры - Таблица значений. Содержит 2 колонки: "Наименование", "Номенклатура".
//  СлужебныйВидНоменклатуры - ОпределяемыйТип.ВидНоменклатурыРМК
//
Процедура ПолучитьНоменклатуруДляПалитрыПодарочныеСертификаты(ТаблицаНоменклатуры, СлужебныйВидНоменклатуры) Экспорт
	
	ОбщегоНазначенияРМКРТ.ПолучитьНоменклатуруДляПалитрыПодарочныеСертификаты(ТаблицаНоменклатуры,
		СлужебныйВидНоменклатуры);
	
КонецПроцедуры

// Заполняет переданный массив структурами данных для создания контролей продаж - запретов продаж.
//
// Параметры:
//  МассивОписанийКонтроля - Массив.
//
Процедура ПодготовитьПреобразованиеЗапретовПродажВКонтрольПродаж(МассивОписанийКонтроля) Экспорт
	
	ОбщегоНазначенияРМКРТ.ПодготовитьПреобразованиеЗапретовПродажВКонтрольПродаж(МассивОписанийКонтроля);
	
КонецПроцедуры

// Заполняет данные контроля продаж для переданного списка товаров.
//
// Параметры:
//  ДанныеКонтроляПродаж - Структура - см. ИнтерфейсРМКСлужебныйКлиентСервер.ШаблонКэшаКонтроляПродаж().
//  ТаблицаТоваров - ТаблицаЗначений - таблица с товарами (Номенклатура, Характеристика),
//										для которых получается контроль продаж.
//  ДополнительныеДанные - Структура - дополнительные параметры для отбора контроля продаж.
//
Процедура ЗаполнитьДанныеКонтроляПродаж(ДанныеКонтроляПродаж, ТаблицаТоваров, ДополнительныеДанные) Экспорт

	ОбщегоНазначенияРМКРТ.ЗаполнитьДанныеКонтроляПродаж(ДанныеКонтроляПродаж, ТаблицаТоваров, ДополнительныеДанные);

КонецПроцедуры

// Заполняет признак учета торговых объектов в контроле продаж
//
// Параметры:
//  УчетТорговыхОбъектов - Булево
//
Процедура ЗаполнитьПризнакУчетаТорговыхОбъектовКонтроляПродаж(УчетТорговыхОбъектов) Экспорт
	ОбщегоНазначенияРМКРТ.ЗаполнитьПризнакУчетаТорговыхОбъектовКонтроляПродаж(УчетТорговыхОбъектов);
КонецПроцедуры

#КонецОбласти

// Обновляет рабочие места касс ККМ, отличные от текущего рабочего места 
//
Процедура УстановитьТекущееРабочееМестоКассамККМ() Экспорт
	ОбщегоНазначенияРМКРТ.УстановитьТекущееРабочееМестоКассамККМ();
КонецПроцедуры

// Позволяет реализовать дополнительную логику заполнения подключаемого оборудования при обновлении
//  
// Параметры:
//  СсылкаПодключаемоеОборудование - СправочникСсылка.ПодключаемоеОборудование 
//
Процедура ОбновитьСправочникПодключаемогоОборудования(СсылкаПодключаемоеОборудование) Экспорт
	ОбщегоНазначенияРМКРТ.ОбновитьСправочникПодключаемогоОборудования(СсылкаПодключаемоеОборудование);
КонецПроцедуры

// Заполняет параметры для работы РМК при запуске
//
// Параметры:
//  ЗапуститьНовыйРМК - Булево - признак того, будет ли запущен РМК при старте системы
//  ЗапуститьНастройкуКСО - Булево - признак того, будет ли запущена форма настройки кассы самообслуживания,
//  РежимКассыСамообслуживания - Булево - признак того, является ли текущий режим приложения кассой самообслуживания.
//  ДополнительныеПараметрыЗапуска - Структура.
//
Процедура ЗаполнитьПараметрыРаботыКлиентаПриЗапуске(ЗапуститьНовыйРМК, 
	ЗапуститьНастройкуКСО, РежимКассыСамообслуживания, ДополнительныеПараметрыЗапуска) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьПараметрыРаботыКлиентаПриЗапуске(ЗапуститьНовыйРМК, Истина,
		ДополнительныеПараметрыЗапуска);
	
КонецПроцедуры

// Заполняет адрес торгового объекта.
//
// Параметры:
//  АдресМагазина - Строка - адрес торгового объекта.
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК - торговый объект для получения адреса.
//
Процедура ЗаполнитьАдресТорговогоОбъекта(АдресМагазина, ТорговыйОбъект) Экспорт
	ОбщегоНазначенияРМКРТ.ЗаполнитьАдресТорговогоОбъекта(АдресМагазина, ТорговыйОбъект);
КонецПроцедуры

// По переданным параметрам вида операции определяет текущий вид операции.
//
// Параметры:
//  ПараметрыВидаОперации - Структура - см.ОбщегоНазначенияРМККлиентСервер.ПараметрыВидаОперации().
//
Процедура ЗаполнитьВидОперацииЧекаККМ(ПараметрыВидаОперации) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьВидОперацииЧекаККМ(ПараметрыВидаОперации);
	
КонецПроцедуры

// Обновляет исходные данные запрета продаж с выведением статуса обновления.
//
// Параметры:
//  ИсходныеДанные - Структура - содержит десериализованные данные ответа из сервера лояльности.
//  ДанныеОбновлены - Булево - Истина, если данные успешно обновлены.
//
Процедура АктуализироватьДанныеЗапрета(ИсходныеДанные, ДанныеОбновлены) Экспорт
	
	ОбщегоНазначенияРМКРТ.АктуализироватьДанныеЗапрета(ИсходныеДанные, ДанныеОбновлены);
	
КонецПроцедуры

// Заполняет ставку НДС для товара по данным системы налогообложения.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - данные текущего объекта.
//  ТекущаяСтрока - СтрокаТабличнойЧасти - текущая строка.
//  СНОПоУмолчанию - ОпределяемыйТип.ТипыСистемНалогообложенияККТРМК - СНО по умолчанию в РМК.
//  СтавкаНДС - ОпределяемыйТип.СтавкаНДСРМК - ставка НДС для заполнения.
//
Процедура ЗаполнитьСтавкуНДС(Объект, ТекущаяСтрока, СНОПоУмолчанию, СтавкаНДС) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьСтавкуНДС(Объект, ТекущаяСтрока, СНОПоУмолчанию, СтавкаНДС);
	
КонецПроцедуры

// Заполняет текущий торговый объект, который далее используется в РМК.
//
// Параметры:
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК - текущий торговый объект РМК.
//
Процедура ОпределитьТекущийТорговыйОбъект(ТорговыйОбъект) Экспорт
	
	ОбщегоНазначенияРМКРТ.ОпределитьТекущийТорговыйОбъект(ТорговыйОбъект);
	
КонецПроцедуры

// Настройка элементов формы "Настройки рабочего места кассира".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - общая форма настроек РМК.
//
Процедура ПереопределитьНастройкиРМК(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ПереопределитьНастройкиРМК(Форма);
	
КонецПроцедуры

// Процедура заполняет данные для работы рабочего места кассира.
// Список обязательных параметров для заполнения: ВидОперации, ТорговыйОбъект, ЦенаВключаетНДС, УчитыватьМРЦ,
// РозничныйВидЦены, ИспользоватьПодключаемоеОборудование, ИспользоватьСерверЛояльностиПолучательДанных, ИспользоватьОплатуПлатежнымиКартами,
// ИспользоватьКонтрольПродаж, ИспользоватьОплатуПлатежнымиСистемами, ИспользоватьОплатуСертификатамиНСПК, ИспользоватьЗаменуТоваров.
// Также обязательным является формирование текста запроса для реквизита формыРМК "СписокТоваров".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЗаполнитьДанныеДляРМК(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьДанныеДляРМК(Форма);
	
КонецПроцедуры

// Определяет значение налогообложения НДС для текущей организации.
//
// Параметры:
//  НалогообложениеНДС - ОпределяемыйТип.НалогообложениеНДСРМК - налогообложение НДС для организации.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЗаполнитьСНОНДСДляОрганизации(НалогообложениеНДС, Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьСНОНДСДляОрганизации(НалогообложениеНДС, Форма);
	
КонецПроцедуры

// Определяет значение налогообложения ККТ для организации.
//
// Параметры:
//  НалогообложениеККТ - ОпределяемыйТип.ТипыСистемНалогообложенияККТРМК - налогообложение ККТ для организации.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ТекущаяСтрока - СтрокаТабличнойЧасти - текущая строка.
//  Дата - ДатаВремя - (необязательный).
//
Процедура ЗаполнитьСНОККТДляОрганизации(НалогообложениеККТ, Форма, ТекущаяСтрока = Неопределено, Дата = '00010101') Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьСНОККТДляОрганизации(НалогообложениеККТ, Форма, ТекущаяСтрока, Дата);
	
КонецПроцедуры

// Определяет значение основной организации из настройки РМК.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияРМК - значение основной организации.
//  НастройкаРМК - СправочникСсылка.НастройкиРабочегоМестаКассира - настройка РМК, по которой необходимо определить основную организацию.
//
Процедура ЗаполнитьОрганизациюИзНастройкиРМК(Организация, НастройкаРМК) Экспорт
	ОбщегоНазначенияРМКРТ.ЗаполнитьОрганизациюИзНастройкиРМК(Организация, НастройкаРМК);
КонецПроцедуры

// Процедура определяет может ли операция являться сторнирующей по таким параметрам как:
// Чек продажи, сумма итого, текущая кассовая смена.
// Результат процедуры необходимо записать в "ПараметрыСторно.Результат".
//
// Параметры:
//  ПараметрыСторно - Структура - параметры операции. Содержит свойства:
//                    ЧекККМПродажа - ОпределяемыйТип.ЧекККМРМК - чек продажи.
//                    СуммаИтого - Число - возвращаемая сумма безналичных оплат по картам.
//                    КассоваяСмена - ДокументСсылка.КассоваяСмена - текущая кассовая смена.
//                    Результат - Булево - признак того, является ли текущая операция сторнирующей.
//                    ЭквайринговыйТерминал - ОпределяемыйТип.ЭквайринговыйТерминалРМК - эквайринговый терминал по которому осуществляется сторно.
//
Процедура ЗаполнитьПризнакЭтоСторно(ПараметрыСторно) Экспорт
	ОбщегоНазначенияРМКРТ.ЗаполнитьПризнакЭтоСторно(ПараметрыСторно);
КонецПроцедуры

// Обновляет данные карты лояльности
//
// Параметры:
//	КартаЛояльности - СправочникСсылка.КартыЛояльности - карта, данные которой будут изменены
//	ДанныеДляИзменения - Структура
//		* НомерКартыДоИзменения - Строка - предыдущее значение номера карты лояльности
//		* МагнитныйКодКартыЛояльности - Строка - магнитный код карты лояльности
//		* НовыйEmailКлиента - Строка - новый email владельца карты
//		* НовыйНомерТелефонаКлиента - Строка - новый номер телефона владельца карты
//
Процедура СохранитьДанныеКартыЛояльности(КартаЛояльности, ДанныеДляИзменения) Экспорт
	
	ОбщегоНазначенияРМКРТ.СохранитьДанныеКартыЛояльности(КартаЛояльности, ДанныеДляИзменения);
	
КонецПроцедуры

// Процедура создает отложенный документ "Чек ККМ".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//  ЧекСоздан - Булево - признак, того, что создан отложенный чек.
//
Процедура СоздатьОтложенныйЧек(Форма, ЧекСоздан) Экспорт
	
	ОбщегоНазначенияРМКРТ.СоздатьОтложенныйЧек(Форма, ЧекСоздан);
	
КонецПроцедуры

// Определяет является ли полученный вид операции операцией продажи.
//
// Параметры:
//  ЭтоОперацияПродажи - Булево - признак, который говорит, что текущий вид операции это продажа.
//  ВидОперации - ОпределяемыйТип.ВидОперацииРМК - текущий вид операции.
//
Процедура ОпределитьВидОперации(ЭтоОперацияПродажи, ВидОперации) Экспорт
	
	ОбщегоНазначенияРМКРТ.ОпределитьВидОперации(ЭтоОперацияПродажи, ВидОперации);
	
КонецПроцедуры

// Определяет количество отложенных чеков. Если количество отложенных чеков = 1, то заполняет
// реквизит параметр "ОтложенныйЧек" ссылкой на чекККМ.
//
// Параметры:
//  СтруктураПараметров - Структура - Параметры для выполнения запроса.
//  ОтложенныйЧек - ОпределяемыйТип.ЧекККМРМК - реквизит формы, для хранения текущего отложенного чека.
//  КоличествоЧеков - Число - количество чеков ККМ со статусом "Отложен".
//
Процедура ЗаполнитьКоличествоОтложенныхЧеков(СтруктураПараметров, ОтложенныйЧек, КоличествоЧеков) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьКоличествоОтложенныхЧеков(СтруктураПараметров, ОтложенныйЧек, КоличествоЧеков);
	
КонецПроцедуры

// Формирует и записывает документ "Чек ККМ" перед пробитием на ККТ.
// Ссылку на записанный документ необходимо присвоить реквизиту формы "ЧекККМВОбработке"
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//  Отказ - Булево - признак наличия ошибки при записи документа.
//  ТекстОшибки - Строка - текст ошибки.
//  СистемаНалогообложения - ОпределяемыеТипы.ТипыСистемНалогообложенияККТРМК - СНО ККТ для текущего чека.
//
Процедура ЗаписатьЧекККМПередПробитием(Форма, Отказ, ТекстОшибки, СистемаНалогообложения) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаписатьЧекККМПередПробитием(Форма, Отказ, ТекстОшибки, СистемаНалогообложения);
	
КонецПроцедуры

// Проверяет наличие в документе "ЧекККМ" алкогольной продукции.
//
// Параметры:
//  ЧекККМ - ОпределяемыйТип.ЧекККМРМК - документ, в котором нужно проверить наличии алкогольной продукции.
//  Результат - Булево - Истина, если в документе есть алкогольная продукция.
//
Процедура ПроверитьНаличиеПродукцииЕГАИСВЧекККМ(ЧекККМ, Результат) Экспорт
	ОбщегоНазначенияРМКРТ.ПроверитьНаличиеПродукцииЕГАИСВЧекККМ(ЧекККМ, Результат);
КонецПроцедуры

// Заполняет данные для пробития на ККТ.
//
// Параметры:
//  ЧекККМВОбработке - ОпределяемыйТип.ЧекККМРМК - ссылка на документ печать, которого производится.
//  ДополнительныеПараметры - Структура:
//   *ЕстьПродукцияЕГАИС - Булево - признак наличия маркируемой алкогольной продукции.
//   *ПечататьБумажныйЧек - Булево - признак нужно печатать чек на ККТ или отправлять в эл.виде.
//   *СистемаНалогообложения - ОпределяемыеТипы.ТипыСистемНалогообложенияККТРМК - СНО ККТ для текущего чека.
//   *СворачиватьСтрокиПриПечатиЧека - Булево - признак нужно ли сворачивать маркируемые товары в чеке.
//   *ОсобенностиУчетаВозвращаемойМаркируемойПродукции - Список - значения особенностей учета товаров из чека,
//     по которым осуществляется возврат без марки.
//  ОбщиеПараметры - Массив - см.ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека().
//
Процедура ПодготовитьДанныеДляПробитияЧека(ЧекККМВОбработке, ДополнительныеПараметры, ОбщиеПараметры) Экспорт
	ОбщегоНазначенияРМКРТ.ПодготовитьДанныеДляПробитияЧека(ЧекККМВОбработке, ДополнительныеПараметры, ОбщиеПараметры);
КонецПроцедуры

// Процедура обрабатывает ЧекККМ после пробития на ККИ.
//
// Параметры:
//  ВходящиеДанные - Структура - данные о результате пробития чека на ККТ.
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//
Процедура ПробитьЧекЗавершение(ВходящиеДанные, Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ПробитьЧекЗавершение(ВходящиеДанные, Форма);
	
КонецПроцедуры

// Процедура настраивает динамический список для получения списка чеков для возврата.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы выбора чеков.
//
Процедура ЗаполнитьТаблицуЧековККМНаВозврат(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьТаблицуЧековККМНаВозврат(Форма);
	
КонецПроцедуры

// Процедура настраивает динамический список для получения списка чеков для проверки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы выбора чеков.
//
Процедура ЗаполнитьТаблицуЧековККМДляПроверки(Форма) Экспорт

КонецПроцедуры

// Процедура настраивает динамический список для получения списка отложенных чеков.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы выбора чеков.
//
Процедура ЗаполнитьТаблицуОтложенныхЧековККМ(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьТаблицуОтложенныхЧековККМ(Форма);
	
КонецПроцедуры

// Процедура настраивает динамический список для получения списка чеков для повторной печати.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы выбора чеков.
//
Процедура ЗаполнитьТаблицуЧековККМДляПовторнойПечати(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьТаблицуЧековККМДляПовторнойПечати(Форма);
	
КонецПроцедуры

// Процедура архивирует чеки при закрытии смены. При необходимости удаляет чеки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//  Параметры - Структура - параметры для анализа закрытия смены.
//
Процедура ЗаархивироватьЧекиККМ(Форма, Параметры) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаархивироватьЧекиККМ(Форма, Параметры);
	
КонецПроцедуры

// Процедура заполняет доступные права для текущего пользователя.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//
Процедура ЗаполнитьТаблицуРолейПользователя(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьТаблицуРолейПользователя(Форма);
	
КонецПроцедуры

// Процедура заполняет данные на форме РМК на основании выбранного чека.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//  ЧекККМ - ОпределяемыйТип.ЧекККМРМК - выбранный чек ККМ.
//  ДополнительныеПараметры - Структура - структура дополнительных параметров для заполнения чека
//     *ПереноситьКодыМаркировки - Булево - признак необходимости заполнить коды маркировки из чека
//
Процедура ЗаполнитьНаОснованииЧекаККМ(Форма, ЧекККМ, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьНаОснованииЧекаККМ(Форма, ЧекККМ, ДополнительныеПараметры);
	
КонецПроцедуры

// Процедура заполняет данные на форме РМК на основании выбранного отложенного чека.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//  ОтложенныйЧек - ДокументСсылка.ЧекККМ - выбранный отложенный чек ККМ.
//  ДополнительныеИсходящиеДанные - Структура - дополнительные данные, связанные с товарами чека.
//
Процедура ЗаполнитьДанныеИзОтложенногоЧека(Форма, ОтложенныйЧек, ДополнительныеИсходящиеДанные = Неопределено) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьДанныеИзОтложенногоЧека(Форма, ОтложенныйЧек, ДополнительныеИсходящиеДанные);
	
КонецПроцедуры

// Процедура заполняет данные на форме РМК о номенклатуре.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//
Процедура ДополнитьСведенияОТоварах(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ДополнитьСведенияОТоварах(Форма);
	
КонецПроцедуры

// Определяет систему налогообложения чека ККМ.
//
// Параметры:
//  ЧекККМ - ОпределяемыйТип.ЧекККМРМК - чек ККМ, для которого нужно определить систему налогообложения.
//  СНО - ОпределяемыйТип.ТипыСистемНалогообложенияККТРМК - система налогообложения.
//
Процедура ЗаполнитьСНОЧекаККМ(ЧекККМ, СНО) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьСНОЧекаККМ(ЧекККМ, СНО);
	
КонецПроцедуры

// Процедура устанавливает статус чека.
//
// Параметры:
//  ЧекККМ - ДокументОбъект.ЧекККМ - чек ККМ для смены статуса.
//  Статус - Строка - статус, который необходимо установить. Если пустая строка, то очистить статус.
//
Процедура УстановитьСтатусЧека(ЧекККМ, Статус = "") Экспорт
	
	ОбщегоНазначенияРМКРТ.УстановитьСтатусЧека(ЧекККМ, Статус)
	
КонецПроцедуры

// Процедура заполняет массив серий, исключая серии, которые уже присутствуют в РМК.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - товар, для которого необходимо заполнить серии.
//  Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика, для которой необходимо заполнить серии.
//  МассивСерий - Массив - массив, в который необходимо добавить найденные серии.
//  ИсключаяСерии - Массив - массив, в котором содержаться серии, которые уже присутствуют в РМК и их нужно исключить.
//  ВидОперации - ОпределяемыйТип.ВидОперацииРМК - вид текущей операции.
//
Процедура ЗаполнитьСписокВыбораСерийНоменклатуры(Номенклатура, Характеристика, МассивСерий, ИсключаяСерии, ВидОперации, ТорговыйОбъект) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьСписокВыбораСерийНоменклатуры(Номенклатура, Характеристика, МассивСерий, ИсключаяСерии);
	
КонецПроцедуры

// Процедура заполняет шаблон чека в параметры перед пробитием чека на ККТ.
//
// Параметры:
//  ЧекККМ - ОпределяемыйТип.ЧекККМРМК - ссылка на чек, который будет пробит.
//  ОбщиеПараметры - Структура - см.ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека().
//  ТекущаяНастройкаРМК - СправочникСсылка.НастройкиРабочегоМестаКассира - текущая настройка рабочего места кассира.
//
Процедура ЗаполнитьШаблонЧека(ЧекККМ, ОбщиеПараметры, ТекущаяНастройкаРМК) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьШаблонЧека(ЧекККМ, ОбщиеПараметры, ТекущаяНастройкаРМК);
	
КонецПроцедуры

// Процедура очищает значение параметра "ОтложенныйЧек", если у него пустой статус.
//
// Параметры:
//  ОтложенныйЧек - ОпределяемыйТип.ЧекККМРМК - ссылка на отложенный чек.
//
Процедура ОчиститьОтложенныйЧек(ОтложенныйЧек) Экспорт
	
	ОбщегоНазначенияРМКРТ.ОчиститьОтложенныйЧек(ОтложенныйЧек);
	
КонецПроцедуры

// Заполнение данных из выбранного документа заказ покупателя.
//
// Параметры:
//  ЗаказПокупателя - Структура, ДокументСсылка - выбранный документ заказ покупателя;
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира;
//  Отказ - Булево - флаг ошибки при выполнении;
//  ОписаниеОшибки - Строка - описание ошибки выполнения.
//  ДополнительныеИсходящиеДанные - Структура - дополнительные данные, связанные с товарами заказа.
//
Процедура ЗаполнитьПоЗаказу(ЗаказПокупателя, Форма, Отказ, ОписаниеОшибки,
		ДополнительныеИсходящиеДанные = Неопределено) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьПоЗаказу(ЗаказПокупателя, Форма, Отказ, ОписаниеОшибки, ДополнительныеИсходящиеДанные);
	
КонецПроцедуры

// Заполнение данных из выбранного документа безналичной оплаты.
//
// Параметры:
//  ДанныеВыбора - Структура - данные выбранного документа безналичной оплаты.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ДополнительныеИсходящиеДанные - Структура - дополнительные данные, связанные с товарами заказа.
//
Процедура ЗаполнитьПоДокументуБезналичнойОплаты(ДанныеВыбора, Форма,
		ДополнительныеИсходящиеДанные = Неопределено) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьПоДокументуБезналичнойОплаты(ДанныеВыбора, Форма, ДополнительныеИсходящиеДанные);
	
КонецПроцедуры

// Устанавливает признак формы по одноименному значению функциональной опции.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы.
//  ИмяФункциональнойОпции - Строка.
//
Процедура УстановитьПризнакФормеПоДаннымФункциональнойОпции(Форма, ИмяФункциональнойОпции) Экспорт
	
	ОбщегоНазначенияРМКРТ.УстановитьПризнакФормеПоДаннымФункциональнойОпции(Форма, ИмяФункциональнойОпции);
	
КонецПроцедуры

// Процедура производит дополнительные действия для настройки работы с оплатой по карте.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы.
//
Процедура НастроитьОплатуПлатежнымиКартами(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.НастроитьОплатуПлатежнымиКартами(Форма);
	
КонецПроцедуры

// Находит по магнитному коду карту лояльности и заполняет ее данные.
//
// Параметры:
//  МагнитныйКод - Строка - код, по которому выполняется поиск.
//  ДанныеКарты - Структура - см.ШтрихкодированиеРМК.ДанныеКартыЛояльности().
//
Процедура ЗаполнитьДанныеКартыЛояльности(МагнитныйКод, ДанныеКарты) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьДанныеКартыЛояльности(МагнитныйКод, ДанныеКарты);
	
КонецПроцедуры

// Процедура производит обработку выбранного документа расчета.
//
// Параметры:
//  ПараметрыВыбора - Структура - данные выбранного документа расчета.
//  Форма - ФормаКлиентскогоПриложения - данные формы.
//  ДополнительныеИсходящиеДанные - Структура - дополнительные данные, связанные с товарами документа.
//
Процедура ОбработатьВыборДокументаРасчета(ПараметрыВыбора, Форма, ДополнительныеИсходящиеДанные = Неопределено) Экспорт
	
	ОбщегоНазначенияРМКРТ.ОбработатьВыборДокументаРасчета(ПараметрыВыбора, Форма, ДополнительныеИсходящиеДанные);
	
КонецПроцедуры

// Процедура формирует структуру данных, которая затем будет выгружена в XML.
//
// Параметры:
//  СтруктураНастроек - Структура - структура, в которую нужно добавить настройки.
//  НастройкаРМК - СправочникСсылка.НастройкиРабочегоМестаКассира - текущая настройка РМК.
//
Процедура СформироватьСтруктуруНастроек(СтруктураНастроек, Знач НастройкаРМК) Экспорт
	
	ОбщегоНазначенияРМКРТ.СформироватьСтруктуруНастроек(СтруктураНастроек, НастройкаРМК);
	
КонецПроцедуры

// Процедура производит переопределение запроса для формирования списка продавцов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма выбора продавцов.
//
Процедура ПереопределитьЗапросДоступныхПродавцов(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ПереопределитьЗапросДоступныхПродавцов(Форма);
	
КонецПроцедуры

// Процедура записывает в базу штрихкод.
//
// Параметры:
//  ДанныеСтроки - Структура - данные для записи в регистр штрихкодов.
//
Процедура ЗаписатьШтрихкод(ДанныеСтроки) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаписатьШтрихкод(ДанныеСтроки);
	
КонецПроцедуры

// Возвращает структуру дисконтной карты
//
// Параметры:
//  СтруктураРезультат - Структура - параметры создания карты лояльности.
//  Форма - ФормаКлиентскогоПриложения - данные формы.
//
Процедура СоздатьЛокальноКартуЛояльности(СтруктураРезультат, Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.СоздатьЛокальноКартуЛояльности(СтруктураРезультат, Форма);
	
КонецПроцедуры

// Определяет значение системы налогообложения организации на указанную дату.
//
//  Параметры:
//   Организация - ОпределяемыйТип.ОрганизацияРМК - организация для которой нужно определить СНО.
//   Дата - Дата - дата на которую нужно определить тип СНО.
//   СНОККТ - ОпределяемыйТип.ТипыСистемНалогообложенияККТРМК - значение системы налогообложения ККТ.
//
Процедура ОпределитьСНОККТДляОрганизации(Организация, Дата, СНОККТ) Экспорт
	
	ОбщегоНазначенияРМКРТ.ОпределитьСНОККТДляОрганизации(Организация, Дата, СНОККТ);
	
КонецПроцедуры

// Заполняет реквизиты кассы ККМ.
//
// Параметры:
//  КассаККМ - ОпределяемыйТип.КассаККМРМК - Ссылка на кассу ККМ.
//  РабочееМесто - ОпределяемыйТип.РабочееМестоРМК, Неопределено - (необязательный) ссылка на рабочее место.
//  Реквизиты - Структура:
//    Организация - ОпределяемыйТип.ОрганизацияРМК.
//    ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК.
//    РабочееМесто - ОпределяемыйТип.РабочееМестоРМК.
//    КассаККМ - ОпределяемыйТип.КассаККМРМК.
//
Процедура ЗаполнитьРеквизитыКассыККМ(КассаККМ, РабочееМесто, Реквизиты) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьРеквизитыКассыККМ(КассаККМ, РабочееМесто, Реквизиты);
	
КонецПроцедуры

// Процедура заполняет организацию продажи в строке.
//
// Параметры:
//  ДанныеСтроки - Структура - данные текущей строки.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЗаполнитьОрганизациюПродажи(ДанныеСтроки, Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьОрганизациюПродажи(ДанныеСтроки, Форма);
	
КонецПроцедуры

// Процедура производит поиск подарочного сертификата.
// Если сертификат найден, то необходимо заполнить реквизит формы "ПодарочныйСертификат".
// Если сертификат найден, то необходимо запросить его баланс и заполнить реквизит формы "СуммаСертификата".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура НайтиСертификатЛокально(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.НайтиСертификатЛокально(Форма);
	
КонецПроцедуры

// Процедура производит поиск промокода.
// Если сертификат найден, то необходимо заполнить реквизит формы "ПодарочныйСертификат".
// Если сертификат найден, то необходимо запросить его баланс и заполнить реквизит формы "СуммаСертификата".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура НайтиПромокодЛокально(Форма) Экспорт
	
КонецПроцедуры

// Процедура производит запрос бонусных баллов по данным карты лояльности.
// Если карта содержит бонусы то необходимо заполнить реквизиты формы "КоличествоБонусов", "БонусыДоступноКОплате",
// "ПроцентОплатыБонусами". Установить видимость группе формы "ГруппаБонусыКартыЛояльности", сделать доступной команду "ОплатитьБонусами".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура НайтиБонусыЛокально(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.НайтиБонусыЛокально(Форма);
	
КонецПроцедуры

// Определяет необходимость контроля остатков при пробитии чека.
//
// Параметры:
//  ТребуетсяКонтрольОстатков - Булево - признак необходимости контроля остатков.
//
Процедура ОпределитьНеобходимостьКонтролироватьОстатки(ТребуетсяКонтрольОстатков) Экспорт
	
	ОбщегоНазначенияРМКРТ.ОпределитьНеобходимостьКонтролироватьОстатки(ТребуетсяКонтрольОстатков);
	
КонецПроцедуры

// Процедура производит контроль остатков.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//  КонтрольОстатковПройден - Булево - признак успешной проверки остатков.
//  ТекстОшибки - Строка - текст возможной ошибки.
//
Процедура ПроверитьНаличиеТоваров(Форма, КонтрольОстатковПройден, ТекстОшибки) Экспорт
	
	ОбщегоНазначенияРМКРТ.ПроверитьНаличиеТоваров(Форма, КонтрольОстатковПройден, ТекстОшибки);
	
КонецПроцедуры

// Заполняет реквизиты эквайринговой операции Чека продажи.
//
// Параметры:
//  ЧекПродажи - ОпределяемыйТип.ЧекККМРМК - чек продажи, основание чека на возврат.
//  Реквизиты - Структура:
//    НомерПлатежнойКарты - Строка.
//    НомерЧекаЭТ - Строка.
//    СсылочныйНомер - Строка.
//    ЭквайринговыйТерминал - ОпределяемыйТип.ЭквайринговыйТерминалРМК.
//
Процедура ЗаполнитьРеквизитыЭквайринговойОперации(ЧекПродажи, Реквизиты) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьРеквизитыЭквайринговойОперации(ЧекПродажи, Реквизиты);
	
КонецПроцедуры

// Процедура устанавливает статус аннулированный у чекаККМ.
//
// Параметры:
//  ЧекККМ - ДокументСсылка.ЧекККМ - документ для изменения статуса.
//
Процедура АннулироватьЧек(ЧекККМ) Экспорт
	
	ОбщегоНазначенияРМКРТ.АннулироватьЧек(ЧекККМ);
	
КонецПроцедуры

// Переопределяет признак, который определяет возможность запуска РМК.
//
// Параметры:
//  МожноОткрыватьРМК - Булево - признак возможности запуска РМК.
//
Процедура ОпределитьВозможностьЗапускаРМК(МожноОткрыватьРМК) Экспорт
	
	ОбщегоНазначенияРМКРТ.ОпределитьВозможностьЗапускаРМК(МожноОткрыватьРМК);
	
КонецПроцедуры

// Возвращает строку для печати на ФР разбитую по ширине ленты.
//
// Параметры:
//  МассивЧеков - Массив - массив документов, для которых нужно сформировать текст товарного чека.
//  ТекстЧека - Строка - текст товарного чека.
//  ШиринаЛенты - Число - ширина ленты печати.
//
Процедура СформироватьТекстТоварногоЧека(МассивЧеков, ТекстЧека, ШиринаЛенты = 32) Экспорт
	ОбщегоНазначенияРМКРТ.СформироватьТекстТоварногоЧека(МассивЧеков, ТекстЧека, ШиринаЛенты);
КонецПроцедуры

// Возвращает строку для печати на ФР разбитую по ширине ленты.
//
// Параметры:
//  МассивЧеков - Массив - массив документов, для которых нужно сформировать текст товарного чека.
//  ТекстЧека - Строка - текст товарного чека.
//  ШиринаЛенты - Число - ширина ленты печати.
//
Процедура СформироватьТекстЗаказа(МассивЧеков, ТекстЧека, ШиринаЛенты = 32) Экспорт

КонецПроцедуры

// Формирует запрос, который производит поиск чека по фискальному признаку в регистре "Фискальные операции".
//
// Параметры:
//  Запрос - Запрос - переопределяемый запрос.
//  Форма - ФормаКлиентскогоПриложения - форма выбора чека.
//  РасшифровкаКода - Структура - см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыQRКодаЧекаККТ().
//
Процедура СформироватьЗапросЧекПоФискальномуПризнаку(Запрос, Форма, РасшифровкаКода) Экспорт
	
	ОбщегоНазначенияРМКРТ.СформироватьЗапросЧекПоФискальномуПризнаку(Запрос, Форма, РасшифровкаКода);
	
КонецПроцедуры

// Формирует запрос, который производит поиск чека по фискальному признаку в регистре "Фискальные операции".
//
// Параметры:
//  Запрос - Запрос - переопределяемый запрос.
//  Форма - ФормаКлиентскогоПриложения - форма выбора чека.
//  Штрихкод - Строка.
//
Процедура СформироватьЗапросЧекПоШтрихкоду(Запрос, Форма, Штрихкод) Экспорт
	
	ОбщегоНазначенияРМКРТ.СформироватьЗапросЧекПоШтрихкоду(Запрос, Форма, Штрихкод);
	
КонецПроцедуры

// Определяет присутствие товаров с возрастным ограничением в документе "ЧекККМ.
//
// Параметры:
//  ЧекККМ - ОпределяемыйТип.ЧекККМРМК - анализируемый документ.
//  Результат - Булево - Истина, если в документе есть товары с возрастным ограничением.
//
Процедура ЗаполнитьПризнакЕстьТоварСВозрастнымОграничениемВЧекККМ(ЧекККМ, Результат) Экспорт
	ОбщегоНазначенияРМКРТ.ЗаполнитьПризнакЕстьТоварСВозрастнымОграничемВЧекККМ(ЧекККМ, Результат);
КонецПроцедуры

// Определяет необходимость ввода характеристики по переданной номенклатуре.
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.НоменклатураРМК - номенклатура, для которой необходимо проверить характеристики.
//  Результат - Булево - признак необходимости ввода характеристики для номенклатуры.
//
Процедура ОпределитьНеобходимостьВводаХарактеристикиДляНоменклатуры(Номенклатура, Результат) Экспорт
	
	ОбщегоНазначенияРМКРТ.ОпределитьНеобходимостьВводаХарактеристикиДляНоменклатуры(Номенклатура, Результат);
	
КонецПроцедуры

// Определяет текущее рабочее место.
//
// Параметры:
//  РабочееМесто - ОпределяемыйТип.РабочееМестоРМК - текущее рабочее место.
//
Процедура ОпределитьТекущееРабочееМесто(РабочееМесто) Экспорт
	
	ОбщегоНазначенияРМКРТ.ОпределитьТекущееРабочееМесто(РабочееМесто);
	
КонецПроцедуры

// Заполняет массив видами номенклатуры, которые определили по значению особенности учета.
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - текущее значение особенности учета номенклатуры.
//  МассивВидовНоменклатуры - Массив - массив, в который необходимо добавить значения видов номенклатуры.
//
Процедура ЗаполнитьМассивВидовНоменклатурыПоОсобенностиУчета(ОсобенностьУчета, МассивВидовНоменклатуры) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьМассивВидовНоменклатурыПоОсобенностиУчета(ОсобенностьУчета, МассивВидовНоменклатуры);
	
КонецПроцедуры

// Определяет значение текущего префикса информационной базы.
//
// Параметры:
//  ОчищатьПрефикс - Булево - признак необходимости сброса значения префикса.
//  ТекущийПрефикс - Строка - Значение текущего префикса информационной базы.
//
Процедура ЗаполнитьТекущийПрефиксИБ(ОчищатьПрефикс, ТекущийПрефикс) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьТекущийПрефиксИБ(ОчищатьПрефикс, ТекущийПрефикс);
	
КонецПроцедуры

// Определяет физ лицо для текущего пользователя.
//
// Параметры:
//  ФизЛицоПользователя - ОпределяемыйТип.КассирРМК - физ лицо пользователя.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ОпределитьФизЛицоПользователя(ФизЛицоПользователя, Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ОпределитьФизЛицоПользователя(ФизЛицоПользователя, Форма);
	
КонецПроцедуры

// Заполняет имя кассира и его ИНН для печати на ККТ.
//
// Параметры:
//  ПараметрыОперации - см.ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОткрытияЗакрытияСмены().
//  ДополнительныеПараметрыДляПечати - Структура - структура параметров печати.
//
Процедура ЗаполнитьПараметрыКассираДляПечати(ПараметрыОперации, ДополнительныеПараметрыДляПечати) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьПараметрыКассираДляПечати(ПараметрыОперации, ДополнительныеПараметрыДляПечати.Пользователь, ДополнительныеПараметрыДляПечати.Кассир);
	
КонецПроцедуры

// Заполняет сумму оплат, которые были приняты используя эквайринговый
// терминал, подключенный к программе.
//
// Параметры:
//  ЧекККМ - ОпределяемыйТип.ЧекККМРМК - анализируемый документ.
//  СуммаОплат - Число - сумма безналичной оплаты.
//
Процедура ЗаполнитьСуммуБНОплатыЧекаККМ(ЧекККМ, СуммаОплат) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьСуммуБНОплатыЧекаККМ(ЧекККМ, СуммаОплат);
	
КонецПроцедуры

// Получает цену ЕМРЦ из данных информационной базы на дату.
//
// Параметры:
//  ОсобенностьУчета - Перечисления.ВидыМаркированнойПродукцииБПО - тип маркированной продукции для проверки цены.
//  Период - Дата - дата проверки цены.
//  ЕМРЦ - Число - значение ЕМРЦ.
//
Процедура ПолучитьЦенуЕМРЦ(ОсобенностьУчета, Период = Неопределено, ЕМРЦ = 0) Экспорт
	
	ОбщегоНазначенияРМКРТ.ПолучитьЦенуЕМРЦ(ОсобенностьУчета, Период, ЕМРЦ);
	
КонецПроцедуры

// Отправляет SMS через настроенного поставщика услуги.
//
// Параметры:
//  НомераПолучателей - Массив из Строка - номера получателей в формате +7ХХХХХХХХХХ.
//  ТекстСообщения - Строка - текст сообщения, максимальная длина у операторов может быть разной.
//  РезультатОтправки - Структура:
//    Результат - Булево - Истина, если отправка SMS прошла успешно.
//    ОписаниеОшибки - Строка - Текст ошибки.
//    НомерТелефона - Строка - номер телефона получателя.
//
Процедура ОтправитьSMS(НомераПолучателей, ТекстСообщения, РезультатОтправки) Экспорт
	
	ОбщегоНазначенияРМКРТ.ОтправитьSMS(НомераПолучателей, ТекстСообщения, РезультатОтправки);
	
КонецПроцедуры

// Заполняет признак возможности отправки СМС.
//
// Параметры:
//  ДоступнаОтправкаSMS - Булево - признак возможности отправки СМС
//
Процедура ПроверитьВозможностьОтправкиSMS(ДоступнаОтправкаSMS) Экспорт
	ОбщегоНазначенияРМКРТ.ПроверитьВозможностьОтправкиSMS(ДоступнаОтправкаSMS);
КонецПроцедуры

// Процедура обработки документа "ЧекККМ" после пробития на ККТ.
//
// Параметры:
//  ВходящиеДанные - Структура - данные о результате пробития чека на ККТ.
//  ДополнительныеПараметры - Структура - дополнительные параметры пробития чека.
//  РезультатВыполненияПакетнойОперации - Структура, Неопределено - результат выполнения пакетной операции.
//
Процедура ФискализироватьЧекЗавершение(ВходящиеДанные, ДополнительныеПараметры,
		РезультатВыполненияПакетнойОперации = Неопределено) Экспорт
	ОбщегоНазначенияРМКРТ.ФискализироватьЧекЗавершение(ВходящиеДанные, ДополнительныеПараметры,
		РезультатВыполненияПакетнойОперации);
КонецПроцедуры

// Рассчитывает автоматические скидки 
//
// Параметры:
//  ФормаРМК - ДанныеФормыКоллекция - данные объекта рабочего места кассира.
//  РезультатРасчета - Структура - структура результата выполнения расчета скидок
//
Процедура РассчитатьАвтоматическиеСкидки(ФормаРМК, РезультатВыполненияРасчета) Экспорт
	
	ОбщегоНазначенияРМКРТ.РассчитатьАвтоматическиеСкидки(ФормаРМК, РезультатВыполненияРасчета);
	
КонецПроцедуры

// Заполняет массив особенностями учета номенклатуры, для которых разрешен возврат без указания марки.
//
// Параметры:
//  МассивОсобенностейУчета - Массив - массив особенностей учета номенклатуры.
//
Процедура ЗаполнитьМассивОсобенностейУчетаДляВозвратаБезМарки(МассивОсобенностейУчета) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьМассивОсобенностейУчетаДляВозвратаБезМарки(МассивОсобенностейУчета);
	
КонецПроцедуры

// Определяет является ли переданное значение особенности учета табачной продукцией.
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - особенность учета.
//  Результат - Булево - Истина, если особенность учета - табачная продукция.
//
Процедура ОпределитьОсобенностьУчетаТабачнаяПродукция(ОсобенностьУчета, Результат) Экспорт
	
	ОбщегоНазначенияРМКРТ.ОпределитьОсобенностьУчетаТабачнаяПродукция(ОсобенностьУчета, Результат);
	
КонецПроцедуры

// Определяет является ли переданное значение особенности учета молочной продукцией.
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - особенность учета.
//  Результат - Булево - Истина, если особенность учета - молочная продукция.
//
Процедура ОпределитьОсобенностьУчетаМолочнаяПродукция(ОсобенностьУчета, Результат) Экспорт
	
	ОбщегоНазначенияРМКРТ.ОпределитьОсобенностьУчетаМолочнаяПродукция(ОсобенностьУчета, Результат);
	
КонецПроцедуры

// Определяет является ли переданное значение особенности учета алкогольная продукцией.
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - особенность учета.
//  Результат - Булево - Истина, если особенность учета - алкогольная продукция.
//
Процедура ОпределитьОсобенностьУчетаАлкогольнаяПродукция(ОсобенностьУчета, Результат) Экспорт
	
	ОбщегоНазначенияРМКРТ.ОпределитьОсобенностьУчетаАлкогольнаяПродукция(ОсобенностьУчета, Результат);
	
КонецПроцедуры

// Определяет является ли переданное значение особенности учета альтернативный табак.
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - особенность учета.
//  Результат - Булево - Истина, если особенность учета - альтернативный табак.
//
Процедура ОпределитьОсобенностьУчетаАльтернативныйТабак(ОсобенностьУчета, Результат) Экспорт
	
	ОбщегоНазначенияРМКРТ.ОпределитьОсобенностьУчетаАльтернативныйТабак(ОсобенностьУчета, Результат);

КонецПроцедуры

// Определяет является ли переданное значение типа номенклатуры подарочный сертификат.
//
// Параметры:
//  ТипНоменклатуры - ОпределяемыйТип.ТипыНоменклатурыРМК - тип номенклатуры.
//  Результат - Булево - Истина, если типа номенклатуры - подарочный сертификат.
//
Процедура ОпределитьЭтоПодарочныйСертификатПоТипу(ТипНоменклатуры, Результат) Экспорт
	
	ОбщегоНазначенияРМКРТ.ОпределитьТипНоменклатурыПодарочныйСертификат(ТипНоменклатуры, Результат);
	
КонецПроцедуры

// Определяет является ли документ чеком продажи.
//
// Параметры:
//  Результат - Булево - Истина, если документ - чек продажи.
//  ЧекККМ - ОпределяемыйТип.ЧекККМРМК - чек ккм.
//
Процедура ОпределитьЧекККМПродажа(Результат, ЧекККМ) Экспорт
	
	ОбщегоНазначенияРМКРТ.ОпределитьЧекККМПродажа(Результат, ЧекККМ);
	
КонецПроцедуры

// Процедура заполняет свойства "КодТРУ" и "ВозможнаОплатаЭС" в строке товара.
//
// Параметры:
//  ДанныеСтроки - Структура - данные текущей строки.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЗаполнитьВозможностьОплатыЭС(ДанныеСтроки, Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьВозможностьОплатыЭС(ДанныеСтроки, Форма);
	
КонецПроцедуры

// В процедуре описывается условное оформление для настроек рабочего места кассира.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура НастроитьУсловноеОформлениеВНастройкахРМК(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.НастроитьУсловноеОформлениеВНастройкахРМК(Форма);
	
КонецПроцедуры

// Процедура заполняет массив серий, исключая серии, которые уже присутствуют в РМК.
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.НоменклатураРМК - товар, для которого необходимо заполнить партии.
//  МассивПартий - Массив - массив, в который необходимо добавить найденные партии.
//
Процедура ЗаполнитьСписокВыбораПартийНоменклатуры(Номенклатура, МассивПартий) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьСписокВыбораПартийНоменклатуры(Номенклатура, МассивПартий);
	
КонецПроцедуры

// В процедуре производится прикладная логика, влияющая на
// заполнение серий и партий в строке товаров.
//
// Параметры:
//  ТекущаяСтрока - ДанныеТекущейСтроки - текущая строка товаров.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ПереопределитьПараметрыЗаполненияСерийИПартий(ТекущаяСтрока, Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ПереопределитьПараметрыЗаполненияСерийИПартий(ТекущаяСтрока, Форма);
	
КонецПроцедуры

// Заполняет таблицу данными о переданных товарах.
// Таблица должна содержать данные для заполнения табличной части "Товары" обработки "РабочееМестоКассира".
//
// Параметры:
//  МассивТоваров - Массив - массив, в котором содержится список товаров.
//  ТаблицаТовары - ТаблицаЗначений - таблица, в которую необходимо поместить информацию по товарам.
//  ДополнительныеИсходящиеДанные - Структура - дополнительные данные, связанные с получаемым товаром,
//												но не относящиеся к добавляемой строке товара непосредственно.
//
Процедура ЗаполнитьТаблицуТовары(МассивТоваров, ТаблицаТовары, ДополнительныеИсходящиеДанные = Неопределено) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьТаблицуТовары(МассивТоваров, ТаблицаТовары, ДополнительныеИсходящиеДанные);
	
КонецПроцедуры

// В процедуре производится получение состава набора и заполнение
// таблицы товарами, которые входят в состав набора.
// Также необходимо заполнить в таблице все данные для товара, которые получают в
// ОбщегоНазначенияРМКПереопределяемый.ТаблицаДанныхОТоварах.
//
// Параметры:
//  ДанныеНабора - Структура - данные выбранного набора.
//  ТаблицаСоставНабора - ТаблицаЗначений - таблица, в которой находятся строки с товарами из состава набора и их данные.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ДополнительныеИсходящиеДанные - Структура - дополнительные данные, связанные с получаемым товаром,
//												но не относящиеся к добавляемой строке товара непосредственно.
//
Процедура ЗаполнитьСоставНабора(ДанныеНабора, ТаблицаСоставНабора, Форма,
		ДополнительныеИсходящиеДанные = Неопределено) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьСоставНабора(ДанныеНабора, ТаблицаСоставНабора, Форма);
	
КонецПроцедуры

// Формирует текст сообщения по шаблону сообщения.
//
// Параметры:
//  ШаблонСообщения - СправочникСсылка.ШаблоныСообщений - ссылка на шаблон сообщения.
//  ДополнительныеПараметры - Структура - список дополнительных параметров, который будет передан в параметр
//                                        Сообщение в процедурах ПриФормированииСообщения при создании сообщения.
//  ТекстСообщения - Строка - текст отправляемого сообщения.
//
Процедура СформироватьТекстСообщения(ШаблонСообщения, ДополнительныеПараметры, ТекстСообщения) Экспорт
	
	ОбщегоНазначенияРМКРТ.СформироватьТекстСообщения(ШаблонСообщения, ДополнительныеПараметры, ТекстСообщения);
	
КонецПроцедуры

// Процедура настраивает динамический список для получения списка чеков для возврата скупки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы выбора чеков.
//
Процедура ЗаполнитьТаблицуЧековККМНаВозвратСкупки(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьТаблицуЧековККМНаВозвратСкупки(Форма);
	
КонецПроцедуры

// Определяет необходимость выполнения интерактивной проверки кода маркировки в форме РМК.
// Под проверкой понимается отправка и ожидание результата проверки кода маркировки от ОИСМ (если настройка включена).
//
// Параметры:
//  ПроверятьМаркированныйТоварНаККТ - Булево - признак необходимости проверки марки на ККТ.
//  ПодключаемоеОборудование - СправочникСсылка.ПодключаемоеОборудование - экземпляр подключаемого оборудования.
// 
Процедура ЗаполнитьНеобходимостьПроверкиМаркиНаККТ(ПроверятьМаркированныйТоварНаККТ, ПодключаемоеОборудование) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьНеобходимостьПроверкиМаркиНаККТ(ПроверятьМаркированныйТоварНаККТ,
		ПодключаемоеОборудование);
	
КонецПроцедуры

// Настраивает запрос по умолчанию для динамического списка реквизита "ТаблицаЧековККМ".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы выбора чеков.
//
Процедура СформироватьЗапросТаблицаЧековПоУмолчанию(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.СформироватьЗапросТаблицаЧековПоУмолчанию(Форма);
	
КонецПроцедуры

// Настраивает динамический список для получения списка чеков оплаченных в рассрочку.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы выбора чеков.
//
Процедура ЗаполнитьТаблицуЧековККМОплаченныхВРассрочку(Форма) Экспорт
КонецПроцедуры

// Обрабатывает результат подбора товаров из формы подбора товаров.
// Метод вызывается после обработки оповещения о закрытии формы подбора товаров.
//
// Параметры:
//  РезультатПодбора - ПроизвольноеЗначение - результат подбора товаров из формы подбора товаров;
//  ДополнительныеИсходящиеДанные - Структура - дополнительные данные, связанные с заполняемым товаром,
//												но не относящиеся к добавляемой строке товара непосредственно.
//
Процедура ЗаполнитьПоПодборуТоваров(РезультатПодбора, Форма, ДополнительныеИсходящиеДанные = Неопределено) Экспорт
	Возврат;
КонецПроцедуры

// Процедура настраивает элементы настроек форм подбора в настройках РМК.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы настроек РМК.
//
Процедура НастроитьЭлементыПодбораТоваров(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.НастроитьЭлементыПодбораТоваров(Форма);
	
КонецПроцедуры

// Метод реализующий дополнительную логику при сохранении настроек рабочего места кассира.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - ОбщаяФорма.НастройкиРабочегоМестаКассира.
//  Результат - Структура - возвращаемый параметр работы метода, ключи структуры:
//   * ВыполненоУспешно - Булево - Ложь, если сохранение настроек формы недопустимо.
//   * ТекстПредупрежденийОшибок - Строка - текст сообщения об ошибке, который будет выведен пользователю.
//
Процедура ПриСохраненииНастроекРМК(Форма, Результат) Экспорт
	
	ОбщегоНазначенияРМКРТ.ПриСохраненииНастроекРМК(Форма, Результат);
	
КонецПроцедуры

// Позволяет обработать событие ОбработкаОповещения для формы Обработки.РабочееМестоКассира.Формы.ФормаРМК. на сервере.
// Дополнительно см. метод ОбщегоНазначенияРМККлиентПереопределяемый.ОбработкаОповещения.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - текущая форма приложения.
//  ИмяСобытия - Строка - название текущего события.
//  Параметр - Неопределено, Структура - параметры обработки оповещения.
//  Источник - Строка - название источника оповещения.
//
Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	ОбщегоНазначенияРМКРТ.ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

// Создает документ внесения ДС.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - ОбщаяФорма.НастройкиРабочегоМестаКассира.
//  Отказ - Булево - флаг ошибки при выполнении;
//  ОписаниеОшибки - Строка - описание ошибки выполнения. 
//
Процедура СоздатьВнесениеДС(Форма, Отказ, ОписаниеОшибки) Экспорт

КонецПроцедуры

// Создает документ выемки ДС.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - ОбщаяФорма.НастройкиРабочегоМестаКассира.
//  Отказ - Булево - флаг ошибки при выполнении;
//  ОписаниеОшибки - Строка - описание ошибки выполнения. 
//
Процедура СоздатьВыемкуДС(Форма, Отказ, ОписаниеОшибки) Экспорт

КонецПроцедуры

// Проверяет серию подарочного сертификата на факт использования
// 
// Параметры:
//  Серия - ОпределяемыйТип.СерияРМК - Серия проверяемого подарочного сертификата
//  ТекущаяНастройкаРМК - Справочник.НастройкиРабочегоМестаКассира - текущие настройки РМК
//  Результат - Булево - результат проверки серии подарочного сертификата
//
Процедура ПроверитьСериюПодарочногоСертификата(Серия, ТекущаяНастройкаРМК, Результат) Экспорт

КонецПроцедуры

// Проверяет настройки касс ККМ перед открытием формы РМК.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  Отказ - Булево - флаг ошибки.
//  ТекстЗаголовка - Строка - текст заголовка ошибки.
//  ТекстСообщения - Строка - текст сообщения ошибки.
//
Процедура ПроверитьНастройкиКассККМ(Форма, Отказ, ТекстЗаголовка, ТекстСообщения) Экспорт

КонецПроцедуры

// Заполняет вид номенклатуры
// 
// Параметры:
//  Номенклатура - ОпределяемыйТип.НоменклатураРМК номенклатура вид которой необходимо получить
//  Результат - ОпределяемыйТип.ВидНоменклатурыРМК - результат заполнения
//
Процедура ЗаполнитьВидНоменклатуры(Номенклатура, Результат) Экспорт
	ОбщегоНазначенияРМКРТ.ЗаполнитьВидНоменклатуры(Номенклатура, Результат);
КонецПроцедуры

// Заполняет тип номенклатуры
// 
// Параметры:
//  Номенклатура - ОпределяемыйТип.НоменклатураРМК номенклатура вид которой необходимо получить
//  Результат - ПеречислениеСсылка.ТипНоменклатуры - результат заполнения
//
Процедура ЗаполнитьТипНоменклатуры(Номенклатура, Результат) Экспорт
	ОбщегоНазначенияРМКРТ.ЗаполнитьТипНоменклатуры(Номенклатура, Результат);
КонецПроцедуры

// Получает ссылку на подарочный сертификат по ГУИД.
//
// Параметры:
//  ГУИД - Строка - значение ГУИД, по которому необходимо получить подарочный сертификат.
//  Результат - ОпределяемыйТип.НоменклатураРМК, Неопределено - возвращаемый параметр для значения подарочного сертификата.
//
Процедура ПодарочныйСертификатПоГУИД(ГУИД, Результат = Неопределено) Экспорт
	ОбщегоНазначенияРМКРТ.ПодарочныйСертификатПоГУИД(ГУИД, Результат);
КонецПроцедуры

// Процедура определяет актуальный баланс подарочного сертификата.
//
// Параметры:
//  ПараметрыСертификата - Структура:
//    БалансСертификата - Число - баланс подарочного сертификата.
//    Сертификат - ОпределяемыйТип.НоменклатураРМК - подарочный сертификат.
//    Серия - ОпределяемыйТип.СерияРМК - серия подарочного сертификата.
//
Процедура ЗапроситьБалансСертификата(ПараметрыСертификата) Экспорт
	ОбщегоНазначенияРМКРТ.ЗапроситьБалансСертификата(ПараметрыСертификата);
КонецПроцедуры

// Процедура корректирует цену подарочного сертификата в строке.
// Если текущая операция возврат и в текущей строке серийный подарочный сертификат, то цена должна быть установлена
// равной 0, чтобы запросить актуальный баланс сертификата.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ТекущаяСтрока - Структура - данные текущей строки.
//
Процедура СкорректироватьЦенуПодарочногоСертификата(Форма, ТекущаяСтрока) Экспорт
	ОбщегоНазначенияРМКРТ.СкорректироватьЦенуПодарочногоСертификата(Форма, ТекущаяСтрока);
КонецПроцедуры

// Рассчитывает цену на товар, который был выбран в строке быстрого добавления товара..
//
// Параметры:
//  ПараметрыРасчетаЦены - см. ОбщегоНазначенияРМК.ПараметрыРасчетаЦены().
//
Процедура РассчитатьЦенуВыбранногоТовара(ПараметрыРасчетаЦены) Экспорт
	ОбщегоНазначенияРМКРТ.РассчитатьЦенуВыбранногоТовара(ПараметрыРасчетаЦены);
КонецПроцедуры

// Процедура позволяет переопределить данные в строке после выбора серии и/или партии.
//
// Параметры:
//  ТекущаяСтрока - Структура - данные текущей строки.
//
Процедура УточнитьДанныеДляСтрокиПриВыбореСерииИПартии(ТекущаяСтрока) Экспорт
КонецПроцедуры

// Переопределение формирования отчета за смену
//
// Параметры:
//  ИсходныеДанные - Структура. Структура с параметрами отбора для формирования отчета за смену.
//  ДанныеДляОтчета - Структура (см. ОбщегоНазначенияРМК.ПолучитьДанныеОтчетаЗаСмену)
//
Процедура ЗаполнитьДанныеОтчетаЗаСмену(ИсходныеДанные, ДанныеДляОтчета) Экспорт

КонецПроцедуры

// Процедура заполняет данные чеков для расшифровки отчета за смену
//
// Параметры:
//  ДеревоЧековТоваров - ДеревоЗначений. Колонки:
//     *Чек - ОпределяемыйТип.ЧекККМРМК. Заполняется на первом уровне,
//     *ЧекПредставление - Строка. Заполняется на первом уровне,
//     *Сумма - Число 15, 2. На первом уровне сумма чека, на втором сумма товара,
//     *ТекстОшибки - Строка. Заполняется на первом уровне,
//     *НоменклатураПредставление - Строка. Заполняется на втором уровне,
//     *Количество - Число 15, 3. Количество товара. Заполняется на втором уровне.
//
Процедура ЗаполнитьДеталиЧековДляРасшифровкиОтчетаЗаСмену(ДеревоЧековТоваров) Экспорт

КонецПроцедуры

// Устанавливает признаки видов оплат в настройкахРМК по данным информационной базы.
//
// Параметры:
//  ОбъектНастройкаРМК - СправочникОбъект.НастройкиРабочегоМестаКассира - настройка РМК.
//
Процедура ОбновитьНастройкиПризнаковВидовОплат(ОбъектНастройкаРМК) Экспорт
	ОбщегоНазначенияРМКРТ.ОбновитьНастройкиПризнаковВидовОплат(ОбъектНастройкаРМК);
КонецПроцедуры

// Устанавливает признак использовать оплату платежными картами в настройкахРМК по данным информационной базы.
//
// Параметры:
//  ОбъектНастройкаРМК - СправочникОбъект.НастройкиРабочегоМестаКассира - настройка РМК.
//
Процедура ОбновитьПризнакОплатыПлатежнымиКартами(ОбъектНастройкаРМК) Экспорт
	ОбщегоНазначенияРМКРТ.ОбновитьПризнакОплатыПлатежнымиКартами(ОбъектНастройкаРМК);
КонецПроцедуры

// Определяет существование кода у кассира
//
// Параметры:
//  КассирДляПроверки - ОпределяемыйТип.КассирРМК - проверяемый кассир
//  Результат - Булево - признак установленного кода у кассира
//
Процедура ОпределитьСуществованиеКодаУКассира(КассирДляПроверки, Результат) Экспорт
КонецПроцедуры

// Заполняет ТаблицаОстатков на форме РМК
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ПараметрыПолученияОстатков - Структура:
//    Номенклатура - ОпределяемыйТип.НоменклатураРМК - номенклатура.
//    Характеристика - ОпределяемыйТип.ХарактеристикаРМК - характеристика.
//    Упаковка - ОпределяемыйТип.УпаковкаРМК - упаковка.
//
Процедура ЗаполнитьТаблицуОстатков(Форма, ПараметрыПолученияОстатков) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьТаблицуОстатков(Форма, ПараметрыПолученияОстатков);
	
КонецПроцедуры

// Заполняет номенклатуру по кодам ТРУ.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  МассивТРУ - Массив - массив кодов ТРУ.
//
Процедура ЗаполнитьНоменклатуруПоТРУ(Форма, МассивТРУ) Экспорт
	
	
	
КонецПроцедуры

// Устанавливает признак наличия в программе сотрудников с правами отмены чека, у которых введен код подтверждения.
//
// Параметры:
//  НастроеныСотрудникиДляОтменыЧека - Булево.
//
Процедура ПроверитьНаличиеКодаПодтвержденияУСотрудниковСПравамиОтменыЧека(НастроеныСотрудникиДляОтменыЧека) Экспорт

КонецПроцедуры

// Дополняет подменю настроек РМК сценариями использования РМК
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма настроек рабочего места кассира.
//
Процедура ДополнитьДоступныеСценарииИспользованияРМК(Форма) Экспорт
	

	
 КонецПроцедуры
 
// Дозаполняет значения по умолчанию в настройках РМК для сценария "Терминал самообслуживания"
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложение - форма настройки рабочего места кассира.
//
Процедура ДополнитьЗначенияНастроекДляТерминалаСамообслуживания(Форма) Экспорт
	
	 
	 
КонецПроцедуры

// Настраивает видимость элементов формы настроек РМК в зависимости от выбранного сценария использования
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложение - форма настройки рабочего места кассира.
//
Процедура НастроитьВидимостьЭлементовНастройкиРМК(Форма) Экспорт
	

	
КонецПроцедуры

// Заполняет максимальный кассовый профиль переданного пользователя
// 
// Параметры:
//  Пользователь - ОпределяемыйТип.ПользовательРМК - пользователь, чей максимальный профиль необходимо определить.
//  МаксимальныйПрофиль - СправочникСсылка.ПрофилиГруппДоступа - максимальный кассовый профиль пользователя.
//
Процедура ЗаполнитьМаксимальныйКассовыйПрофильПользователя(Пользователь, МаксимальныйПрофиль) Экспорт
	

	
КонецПроцедуры

// Проверяет, что пользователю доступен только режим кассы самообслуживания.
//
// Параметры:
//  Пользователь - ОпределяемыйТип.ПользовательРМК - пользователь, чей максимальный профиль необходимо определить.
//  ДоступенТолькоРежимКСО - Булево.
//
Процедура УстановитьПользователюПризнакДоступностиТолькоРежимаКСО(Пользователь, ДоступенТолькоРежимКСО) Экспорт
	

	
КонецПроцедуры

// Обновляет динамический список товаров каталога на форме РМК.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложение - форма настройки рабочего места кассира.
//  СтандартнаяОбработка - Булево.
//
Процедура ОбновитьДинамическийСписокТоваров(Форма, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Настройка элементов формы "Помощник настройки РМК".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма обработки помощник настроек РМК.
//
Процедура ПереопределитьНастройкиПомощникРМК(Форма) Экспорт

КонецПроцедуры

// Заполняет таблицу данных контрагента по переданному контрагенту
//
// Параметры:
//  Контрагент - ОпределяемыйТип.КонтрагентРМК.
//  АдресТаблицыДанныеКлиента - Строка - Адрес таблицы данных клиентов
//  	*Карта - ссылка на карту лояльности
//  	*НомерКарты - номер карты лояльности (штрихкод или магнитный код)
//  	*НомерТелефона - номер телефона владельца карты лояльности
//
Процедура ПолучитьДанныеЛокальнойКартыКонтрагента(Контрагент, АдресТаблицыДанныеКлиента) Экспорт
	
	ОбщегоНазначенияРМКРТ.ПолучитьДанныеЛокальнойКартыКонтрагента(Контрагент, АдресТаблицыДанныеКлиента);
	
КонецПроцедуры

// Процедура заполняет остаток по строке
//
// Параметры:
//  ДанныеСтроки - Структура - данные текущей строки.
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК - торговый объект для отбора остатков
//
Процедура ЗаполнитьКолонкуОстаток(ДанныеСтроки, ТорговыйОбъект) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьКолонкуОстаток(ДанныеСтроки, ТорговыйОбъект);
	
КонецПроцедуры

// Возвращает значение перезаполнения данных в панели избранных товаров
//
// Параметры:
//  ОтображатьОстаток - Булево
//
// Возвращаемое значение:
//  Результат - Булево - признак перезаполнения данных в панели избранных товаров.
//
Функция ПерезаполнитьИзбранное(ОтображатьОстаток) Экспорт
	Возврат ОбщегоНазначенияРМКРТ.ПерезаполнитьИзбранное(ОтображатьОстаток);
КонецФункции

// Возвращает значение перезаполнения данных в плиточном интерфейсе
//
// Параметры:
//  ОтображатьОстаток - Булево
//
// Возвращаемое значение:
//  Результат - Булево - признак перезаполнения данных в плиточном интерфейсе.
//
Функция ПерезаполнитьПлиточныйИнтерфейс(ОтображатьОстаток) Экспорт
	Возврат Ложь;
КонецФункции

// Проверяет соответствие чека по заказу покупателя
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложение - форма настройки рабочего места кассира.
//  ТекстОшибки - Строка - текст возможной ошибки.
//
Процедура ПроверитьСоответствиеЗаказу(Форма, ТекстОшибки) Экспорт

КонецПроцедуры

// Настраивает форму РМК при создании нового набора
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура НастроитьФормуПриСозданииНовогоНабора(Форма) Экспорт

КонецПроцедуры

// Создает новый заказ покупателя из формы РМК
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура СоздатьЗаказПокупателя(Форма) Экспорт

КонецПроцедуры

// Проверяет наличие признака НДС сверху, для организаций плательщиков НДС 
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  Отказ - Истина - признак наличия отказа, выставляется при выявлении ошибки настройки.
//  ТекстЗаголовка - Строка - текст заголовка ошибки для передачи в заголовок панели ошибок формы РМК.
//  ТекстСообщения - Строка - текст ошибки для передачи в тело ошибки панели ошибок формы РМК.
//
//
Процедура ПроверитьИспользованиеНДССверху(Форма, Отказ, ТекстЗаголовка, ТекстСообщения) Экспорт
	
	
	
КонецПроцедуры

// Переопределение увеличения размеров команд на форме РМК.
// Вызывается при заполнении формы после создания на сервере.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ПараметрыУвеличенногоИнтерфейса - Структура - см. ИнтерфейсРМКСлужебный.ПараметрыУвеличенногоИнтерфейса.
//
//
Процедура УвеличитьРазмерКоманд(Форма, ПараметрыУвеличенногоИнтерфейса) Экспорт
	
	//
	
КонецПроцедуры

// Заполняет данные выбора по номенклатуре, для добавления в корзину РМК
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира
//  ДанныеВыбора - Структура:
//    Номенклатура - ОпределяемыйТип.НоменклатураРМК - номенклатура.
//    Характеристика - ОпределяемыйТип.ХарактеристикаРМК - характеристика.
//    Упаковка - ОпределяемыйТип.УпаковкаРМК - упаковка.
//    Цена
//    ОсобенностьУчета
//    ВидНоменклатуры
//    ВыборТовараВручную
//
Процедура ПодготовитьДанныеВыбораНоменклатуры(Форма, ДанныеВыбора) Экспорт
	
	ОбщегоНазначенияРМКРТ.ПодготовитьДанныеВыбораНоменклатуры(Форма, ДанныеВыбора);
	
КонецПроцедуры

// Устанавливает значение для видимости ручной скидки на форме РМК
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира
//
//
Процедура УстановитьЗначениеПримененияРучнойСкидки(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.УстановитьЗначениеПримененияРучнойСкидки(Форма);
	
КонецПроцедуры

// Устанавливает видимость элементов доступных остатков в зависимости от настройки РМК
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира
//
Процедура ДополнитьНастройкиОтображенияОстатков(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ДополнитьНастройкиОтображенияОстатков(Форма);
	
КонецПроцедуры

// Устанавливает признак пересчета автоматических скидок
//
// Параметры:
//  ВыполнитьПересчетАвтоматическихСкидок - Булево - признак пересчета автоматических скидок, после применения ручных
//
Процедура ЗаполнитьПризнакПересчетаСкидок(ВыполнитьПересчетАвтоматическихСкидок) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьПризнакПересчетаСкидок(ВыполнитьПересчетАвтоматическихСкидок);
	
КонецПроцедуры

// Переопределяет запрос динамического списка.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - общая форма настроек РМК.
//
Процедура ПереопределитьДинамическийСписокКассирыДляВхода(Форма) Экспорт
	

	
КонецПроцедуры

// Переопределяет настройки отображения продавцов
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - общая форма настроек РМК.
//
Процедура ПереопределитьНастройкиПродавцов(Форма) Экспорт
	

	
КонецПроцедуры

// Заполняет признак учета дисконтных карт на форме РМК
// 
// Параметры:
//  ВводДисконтныхКарт - Булево - заполняемый признак учета.
//
Процедура ЗаполнитьВводДисконтныхКарт(ВводДисконтныхКарт) Экспорт
	
	ВводДисконтныхКарт = Истина;
	
КонецПроцедуры

// Заполняет параметры формы настроек рабочего места кассира
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма настроек рабочего места кассира.
//
Процедура ЗаполнитьПараметрыФормыНастроекРабочегоМестаКассира(Форма) Экспорт
	

	
КонецПроцедуры

// Формирует печатную форму согласия на обработку персональных данных при выдаче дисконтной карты
// 
// Параметры:
//  Форма - ТабличныйДокумент - табличный документ для формирования печатной формы.
//  ДанныеПокупателя - Структура - информация о покупателе, которую необходимо разместить в печатной форме
//
Процедура СформироватьТабличныйДокументСогласияНаОбработкуПерсональныхДанных(ТабличныйДокумент, ДанныеПокупателя) Экспорт	
	

	
КонецПроцедуры

// Выполняет автоматическое распределение подобранных товаров по партиям
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира
//
Процедура ВыполнитьРаспределениеТоваровПоПартиям(Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Заполняет признак использования продавцов в Рабочем месте кассира
//
// Параметры:
//  НеИспользоватьПродавцов - Булево - заполняемый признак учета
//
Процедура ЗаполнитьПризнакИспользованияПродавцовВРМК(НеИспользоватьПродавцов) Экспорт
	

	
КонецПроцедуры

// Заполняет признак использования серий в Рабочем месте кассира
//
// Параметры:
//  СерииНеВыгружаются - Булево - заполняемый признак учета
//
Процедура ЗаполнитьПризнакИспользованияСерийВРМК(СерииНеВыгружаются) Экспорт
	

	
КонецПроцедуры

// Определяет факт наличия синхронизации РМК с мастер - системой.
//
// Параметры:
//  НастройкаСуществует - Булево - истина, если настройка существует.
//
Процедура ОпределитьСуществованиеНастройкиСинхронизацииДанных(НастройкаСуществует) Экспорт
	
	ОбщегоНазначенияРМКРТ.ОпределитьСуществованиеНастройкиСинхронизацииДанных(НастройкаСуществует);
	
КонецПроцедуры

// Определяет используется ли стандартный расчет скидок
//
// Параметры:
//  СтандартныйРасчетСкидок - Булево - определяет способ расчета скидок.
Процедура ОпределитьСтандартныйРасчетСкидок(СтандартныйРасчетСкидок) Экспорт
	
	
	
КонецПроцедуры

// Проверяет, были ли необходимые подарка добавлены в состав чека ранее. 
// Убирает из исходной таблицы те подарки что уже были выбраны ранее, и корректирует идентификатор строк в таблице скидок.
//
// Параметры:
//  ФормаРМК - ФормаКлиентскогоПриложения - форма рабочего места кассира
//  ТаблицаТоваров - ТаблицаЗначений - Таблица товаров формы РМК
//  ТаблицаПодарков - ТаблицаЗначений - Таблица подарков, которые необходимо выдать по результату расчета
//  ТаблицаСкидкиНаценки - ТаблицаЗначений - Таблица скидок. Связывает сработавшие скидки-подарки со строками самих подарков в товарах, если они были выбраны в чек ранее
//
Процедура ОбработатьТаблицуПодарков(ФормаРМК, ТаблицаТоваров, ТаблицаПодарков, ТаблицаСкидкиНаценки) Экспорт



КонецПроцедуры

// Получает данные продаж за смену.
//
// Параметры:
//  КассоваяСмена - ДокументСсылка.КассоваяСмена - кассовая смена для получения данных продаж 
//  ДанныеСмены - Структура - структура данных за смену
//
Процедура ПолучитьДанныеПродажЗаСмену(КассоваяСмена, ДанныеСмены) Экспорт



КонецПроцедуры

// Заполняет нормализованный код маркировки
//
// Параметры:
//  КодМаркировки - Строка - исходный код маркировки
//  КодНормализованный - Строка - нормализованный код маркировки
Процедура ЗаполнитьНормализованныйКодМаркировки(КодМаркировки, КодНормализованный) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьНормализованныйКодМаркировки(КодМаркировки, КодНормализованный);
	
КонецПроцедуры

// Заполняет коды маркировки по данным информационной базы, актуальные для строки товаров.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ТекущаяСтрока - Структура - данные текущей строки.
//  КодыМаркировки - Таблица значений, См. ОбщегоНазначенияРМК.КодыМаркировкиПоДаннымИБШаблон - возвращаемое значение.
//
Процедура ЗаполнитьКодыМаркировкиПоДаннымИБ(Форма, ТекущаяСтрока, КодыМаркировки) Экспорт
	ОбщегоНазначенияРМКРТ.ЗаполнитьКодыМаркировкиПоДаннымИБ(Форма, ТекущаяСтрока, КодыМаркировки);
КонецПроцедуры

// Заполняет список распознанных весовых товаров, находящихся в продаже, по данных кодов SKU,
// полученных от устройства распознавания
//
// Параметры:
//  ПараметрыПолученияТоваров - Структура - данные для отборов при получении списка распознанных товаров:
//		*ВесовыеТовары - ТаблицаЗначений с колонками:
//			*Номенклатура - ОпределяемыйТип.НоменклатураРМК,
//			*Характеристика - ОпределяемыйТип.ХарактеристикаРМК.
//		*РаспознанныеТовары - ТаблицаЗначений с колонками:
//			*Код - Число - код SKU, полученный от устройства распознавания
//			*Вероятность - Число - вероятнось совпадения товара
//		(*) - дополнительные параметры прикладного решения. Подробнее в переопределяемых модулях прикладного решения.
//  РезультатФункции - Массив - элементы, структура, с данными товаров, с колонками:
//								"Номенклатура", "Характеристика", "Вероятность".
//
Процедура ЗаполнитьТоварыПоДаннымРаспознавания(ПараметрыПолученияТоваров, РезультатФункции) Экспорт
	

	
КонецПроцедуры

// Заполняет таблицу весовых товаров, которые могут быть загружены в устройства, требующие кода SKU
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма обучения устройств распознавания.
//  РезультатФункции - Таблица значений с колонками:
//		*Номенклатура - ОпределяемыйТип.НоменклатураРМК,
//		*Характеристика - ОпределяемыйТип.ХарактеристикаРМК,
//		*Весовой - Булево,
//		*SKU - Число.
//
Процедура ЗаполнитьВесовыеТоварыДляРаботыСУстройствами(Форма, РезультатФункции) Экспорт
	

	
КонецПроцедуры

// Настраивает форму обучения устройств распознавания
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма обучения устройств распознавания.
//
Процедура НастроитьФормуОбученияУстройствРаспознавания(Форма) Экспорт
	

	
КонецПроцедуры

// Определяет является ли период хранения бессрочным.
//
// Параметры:
//  РезультатФункции - Булево - признак, который говорит, что период хранения бессрочный.
//  ПериодХранения - ОпределяемыйТип.ПериодХраненияИсторииРМК - текущий период хранения.
//
Процедура ОпределитьСрокХраненияВесьПериод(РезультатФункции, ПериодХранения) Экспорт
	ОбщегоНазначенияРМКРТ.ОпределитьСрокХраненияВесьПериод(РезультатФункции, ПериодХранения);
КонецПроцедуры

// Определяет является ли период хранения - день.
//
// Параметры:
//  РезультатФункции - Булево - признак, который говорит, что период хранения = День.
//  ПериодХранения - ОпределяемыйТип.ПериодХраненияИсторииРМК - текущий период хранения.
//
Процедура ОпределитьСрокХраненияДень(РезультатФункции, ПериодХранения) Экспорт
	ОбщегоНазначенияРМКРТ.ОпределитьСрокХраненияДень(РезультатФункции, ПериодХранения);
КонецПроцедуры

// Определяет является ли период хранения - неделя.
//
// Параметры:
//  РезультатФункции - Булево - признак, который говорит, что период хранения = Неделя.
//  ПериодХранения - ОпределяемыйТип.ПериодХраненияИсторииРМК - текущий период хранения.
//
Процедура ОпределитьСрокХраненияНеделя(РезультатФункции, ПериодХранения) Экспорт
	ОбщегоНазначенияРМКРТ.ОпределитьСрокХраненияНеделя(РезультатФункции, ПериодХранения);
КонецПроцедуры

// Определяет является ли период хранения - декада.
//
// Параметры:
//  РезультатФункции - Булево - признак, который говорит, что период хранения = Декада.
//  ПериодХранения - ОпределяемыйТип.ПериодХраненияИсторииРМК - текущий период хранения.
//
Процедура ОпределитьСрокХраненияДекада(РезультатФункции, ПериодХранения) Экспорт
	ОбщегоНазначенияРМКРТ.ОпределитьСрокХраненияДекада(РезультатФункции, ПериодХранения);
КонецПроцедуры

// Определяет является ли период хранения - месяц.
//
// Параметры:
//  РезультатФункции - Булево - признак, который говорит, что период хранения = Месяц.
//  ПериодХранения - ОпределяемыйТип.ПериодХраненияИсторииРМК - текущий период хранения.
//
Процедура ОпределитьСрокХраненияМесяц(РезультатФункции, ПериодХранения) Экспорт
	ОбщегоНазначенияРМКРТ.ОпределитьСрокХраненияМесяц(РезультатФункции, ПериодХранения);
КонецПроцедуры

// Определяет является ли период хранения - квартал.
//
// Параметры:
//  РезультатФункции - Булево - признак, который говорит, что период хранения = Квартал.
//  ПериодХранения - ОпределяемыйТип.ПериодХраненияИсторииРМК - текущий период хранения.
//
Процедура ОпределитьСрокХраненияКвартал(РезультатФункции, ПериодХранения) Экспорт
	ОбщегоНазначенияРМКРТ.ОпределитьСрокХраненияКвартал(РезультатФункции, ПериодХранения);
КонецПроцедуры

// Определяет является ли период хранения - полугодие.
//
// Параметры:
//  РезультатФункции - Булево - признак, который говорит, что период хранения = Полугодие.
//  ПериодХранения - ОпределяемыйТип.ПериодХраненияИсторииРМК - текущий период хранения.
//
Процедура ОпределитьСрокХраненияПолугодие(РезультатФункции, ПериодХранения) Экспорт
	ОбщегоНазначенияРМКРТ.ОпределитьСрокХраненияПолугодие(РезультатФункции, ПериодХранения);
КонецПроцедуры

// Определяет является ли период хранения - год.
//
// Параметры:
//  РезультатФункции - Булево - признак, который говорит, что период хранения = Год.
//  ПериодХранения - ОпределяемыйТип.ПериодХраненияИсторииРМК - текущий период хранения.
//
Процедура ОпределитьСрокХраненияГод(РезультатФункции, ПериодХранения) Экспорт
	ОбщегоНазначенияРМКРТ.ОпределитьСрокХраненияГод(РезультатФункции, ПериодХранения);
КонецПроцедуры

// Выполняет дополнительные настройки перед компоновкой результата отчета "Незавершенные действия с чеком"
//
// Параметры:
//  ОбъектОтчет - ОтчетОбъект.НезавершенныеДействияСЧекомРМК
//
Процедура ПриКомпоновкеРезультатаОтчетаНезавершенныхДействийСЧеком(ОбъектОтчет) Экспорт

КонецПроцедуры

// Добавляет пользователя в группу доступа из формы "Помощник настройки РМК"
//
// Параметры:
//  Пользователь - Справочник.Пользователи - выбранный пользователь в таблице.
//  ГруппаДоступа - Справочник.ГруппыДоступа - выбранная группа доступа в таблице.
//  ТекстСообщения - Строка - Текст сообщения пользователю.
//  Успешно - Булево - Результат выполнения процедуры
//
Процедура ДобавитьПользователяВГруппуДоступаПомощникРМК(Пользователь, ГруппаДоступа, ТекстСообщения, Успешно) Экспорт
	

	
КонецПроцедуры

// Удаляет пользователя из группы доступа из формы "Помощник настройки РМК"
//
// Параметры:
//  Пользователь - Справочник.Пользователи - выбранный пользователь в таблице.
//  ГруппаДоступа - Справочник.ГруппыДоступа - выбранная группа доступа в таблице.
//  ТекстСообщения - Строка - Текст сообщения пользователю.
//
Процедура УдалитьПользователяИзГруппыДоступаПомощникРМК(Пользователь, ГруппаДоступа, ТекстСообщения) Экспорт
	

	
КонецПроцедуры

// Процедура проверяет наличие пользователей в группе доступа "Администраторы"
//
// Параметры:
//  ЕстьПользовательАдминистратор	 - Булево	 - Признак наличия пользователей в профиле группы доступа "Администраторы".
//
Процедура ПроверитьПользователяАдминистратор(ЕстьПользовательАдминистратор) Экспорт

КонецПроцедуры

// Процедура создает пользователя "Администратор" и добавляет в группу доступа "Администраторы"
//
// Параметры:
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК - торговый объект для которго происходит настройка.
//  СообщениеОбОшибке	 - Строка	 - Сообщение пользователю об ошибки.
//
Процедура СоздатьПользователяАдминистратор(ТорговыйОбъект, СообщениеОбОшибке) Экспорт

КонецПроцедуры

// Поиск записи персонального кода для входа из формы "Помощник настройки РМК"
//
// Параметры:
//  Пользователь - ОпределяемыйТип.ПользовательРМК - выбранный пользователь в таблице.
//  Кассир - ОпределяемыйТип.КассирРМК - выбранная группа доступа в таблице.
//  КодСотрудника - Строка - Код сотрудника.
//  ИНН - Строка - ИНН сотрудника.
//
Процедура НайтиЗаписьРегистраПерсональныйКод(Пользователь, Кассир, КодСотрудника, ИНН) Экспорт
	

	
КонецПроцедуры

// Добавляет персональный код для кассира из формы "Помощник настройки РМК"
//
// Параметры:
//  Пользователь - ОпределяемыйТип.ПользовательРМК - выбранный пользователь в таблице.
//  Кассир - ОпределяемыйТип.КассирРМК - выбранная группа доступа в таблице.
//  КодСотрудника - Строка - Код сотрудника.
//  ИНН - Строка - ИНН сотрудника.
//
Процедура ПрисвоитьПерсональныйКод(Пользователь, Кассир, КодСотрудника, ИНН) Экспорт
	

	
КонецПроцедуры

// Заполняет установленную цену на серию
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.НоменклатураРМК - выбранная номенклатура.
//  Характеристика - ОпределяемыйТип.ХарактеристикаРМК - выбранная характеристика номенклатуры.
//  Серия - ОпределяемыйТип.СерияРМК - выбранная серия номенклатура.
//  Цена - Число - цена установленная на серию.
//
Процедура ЗаполнитьЦенуСерии(Номенклатура, Характеристика, Серия, Цена) Экспорт
	
	
	
КонецПроцедуры

// Заполняет уникальный идентификатор вида цены
//
// Параметры:
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК - торговый объект.
//  УИДВидаЦен - Строка - уникальный идентификатор вида цены продажи.
//
Процедура ВернутьВидЦены(ТорговыйОбъект, УИДВидаЦен) Экспорт
	
	
	
КонецПроцедуры

// Заполняет признак использования КМ по номенклатуре
//
// Параметры:
//  Номенклатура - Ссылка - номенклатура
//  НоменклатураИспользующаяКМ - Булево - Ложь, если номенклатура маркируется средством идентификации, не имеющий кода маркировки, иначе Истина
//
Процедура ЗаполнитьПризнакИспользованияКМПоНоменклатуре(Номенклатура, НоменклатураИспользующаяКМ) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьПризнакИспользованияКМПоНоменклатуре(Номенклатура, НоменклатураИспользующаяКМ);
	
КонецПроцедуры

// Настраивает подменю "Заполнить" на форме элемента справочника "Палитра товаров"
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма элемента справочнимка "Палитра Товаров".
//
Процедура НастроитьДоступныеСпособыЗаполненияПалитры(Форма) Экспорт
	
	
	
КонецПроцедуры

// Процедура проверяет непробитые и отложенные чеки при закрытии смены.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//  КоличествоНепробитыхЧеков - Число - количество непробитых чеков.
//
Процедура ПроверитьКоличествоНепробитыхЧеков(Форма) Экспорт

КонецПроцедуры

// Определяет требуется ли обновление ключа сессии.
//
// Параметры:
//  СтандартнаяОбработка - Булево - признак стандартной обработки события.
//  РезультатВыполнения - Структура - результат выполнения
//
Процедура ТребуетсяОбновлениеКлючаСессии(СтандартнаяОбработка, РезультатВыполнения) Экспорт
	
КонецПроцедуры

// Устанавливает ключ сессии.
//
// Параметры:
//  СтандартнаяОбработка - Булево - признак стандартной обработки события.
//  РезультатВыполнения - Структура - данные ключа
//
Процедура УстановитьКлючСессии(СтандартнаяОбработка, ДанныеКлюча) Экспорт
	
КонецПроцедуры

// Определяет использование разрешительного режима библиотекой ГосИС.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  Результат - Булево - признак использования.
//
Процедура ОпределитьИспользованиеРазрешительногоРежимаГосИС(Форма, Результат) Экспорт
	
	ОбщегоНазначенияРМКРТ.ОпределитьИспользованиеРазрешительногоРежимаГосИС(Форма, Результат);
	
КонецПроцедуры

// Требуется обновление списка CDN площадок ИС "Честный знак".
//
// Параметры:
//  ТребуетсяОбновлениеСпискаCDNПлощадок - Булево - Результат обновления списка CDN площадок
//  СтандартнаяОбработка - Булево - Стандартная обработка
//
Процедура ТребуетсяОбновлениеСпискаCDNПлощадок(ТребуетсяОбновлениеСпискаCDNПлощадок, СтандартнаяОбработка) Экспорт
	
	ОбщегоНазначенияРМКРТ.ТребуетсяОбновлениеСпискаCDNПлощадок(ТребуетсяОбновлениеСпискаCDNПлощадок, СтандартнаяОбработка);
	
КонецПроцедуры

// Добавляет реквизиты проверки средствами ККТ при встраивании проверки непосредственно в форму РМК не используюя отдельную форму ожидания ККТ.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма РМК
//  ДобавляемыеРеквизиты - Массив из РеквизитФормы - Реквизиты, которые будут добавлены на форму.
//
Процедура ДобавитьРеквизитыПроверкиСредствамиККТ(Форма, ДобавляемыеРеквизиты) Экспорт
	
	
	
КонецПроцедуры

// Заполняет признак ведения учета маркируемой продукци переданного вида.
//
// Параметры:
//  ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции
//  Результат - Булево - признак ведения учета маркируемой продукции переданного вида.
//
Процедура ЗаполнитьПризнакВедениеУчетМаркируемойПродукции(ВидМаркируемойПродукции, Результат) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьПризнакВедениеУчетМаркируемойПродукции(ВидМаркируемойПродукции, Результат);
	
КонецПроцедуры

// Заполняет заказ покупателя по чеку.
//
// Параметры:
//  ЧекККМ - ОпределяемыйТип.ЧекККМРМК - чек ккм.
//  ЗаказПокупателя - ОпределяемыйТип.ЗаказПокупателяРМК - заказ покупателя.
//
Процедура ЗаполнитьЗаказПокупателяПоЧеку(ЧекККМ, ЗаказПокупателя) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьЗаказПокупателяПоЧеку(ЧекККМ, ЗаказПокупателя);
	
КонецПроцедуры

// Заполняет структуру шаблона чека по исходным данным
//
// Параметры:
//  ПараметрыЧека - Структура
//  СтрокаОсновногоРаздела - СтрокаДереваЗначений
//  ТаблицаДанных - ТаблицаЗначений - см. ПечатьФискальныхЧековРМК.ТаблицаСКД()
//  ФискальныеПозицииЧека - Структура
//
Процедура ОбработатьПараметрыШаблонаЧека(СКД, ДокументСсылка) Экспорт
	


КонецПроцедуры

// Обновляет кэш особенностей учета номенклатуры, которую можно продать/вернуть без марки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма РМК
//
Процедура ОбновитьКэшОсобенностейУчетаБезМарки(Форма) Экспорт
	
	ОбщегоНазначенияРМКРТ.ОбновитьКэшОсобенностейУчетаБезМарки(Форма);
	
КонецПроцедуры

// Заполняет номенклатуру по уникальному идентификатору
//
// Параметры:
//  НоменклатураГУИД - Уникальный идентификатор
//  Номенклатура - ОпределяемыйТип.НоменклатураРМК
//
Процедура ЗаполнитьНоменклатуруПоУникальномуИдентификатору(НоменклатураГУИД, Номенклатура) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьНоменклатуруПоУникальномуИдентификатору(НоменклатураГУИД, Номенклатура);

КонецПроцедуры

// Заполняет характеристику по уникальному идентификатору
//
// Параметры:
//  ХарактеристикаГУИД - Уникальный идентификатор
//  Характеристика - ОпределяемыйТип.ХарактеристикаРМК
//
Процедура ЗаполнитьХарактеристикуПоУникальномуИдентификатору(ХарактеристикаГУИД, Характеристика) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьХарактеристикуПоУникальномуИдентификатору(ХарактеристикаГУИД, Характеристика);

КонецПроцедуры

// Заполняет упаковку по уникальному идентификатору
//
// Параметры:
//  УпаковкаГУИД - Уникальный идентификатор
//  Упаковка - ОпределяемыйТип.УпаковкаРМК
//
Процедура ЗаполнитьУпаковкуПоУникальномуИдентификатору(УпаковкаГУИД, Упаковка) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьУпаковкуПоУникальномуИдентификатору(УпаковкаГУИД, Упаковка);

КонецПроцедуры

// Заполняет день недели по номеру дня
//
// Параметры:
//  НомерДняНедели - Число
//  ДеньНедели - ОпределяемыйТип.ДниНеделиРМК
//
Процедура ЗаполнитьДеньНеделиПоНомеруДня(НомерДняНедели, ДеньНедели) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьДеньНеделиПоНомеруДня(НомерДняНедели, ДеньНедели);

КонецПроцедуры

// Получает данные из сервиса ОФД по смене.
//
// Параметры:
//  КассаККМ - ОпределяемыйТип.КассаККМРМК - касса ккм для сверки
//  НомерСмены - Число - номер смены
//  ДанныеСверки - Произвольный - структура данных для сверки
//  СтандартнаяОбработка - Булево - признак стандартной обработки
//
Процедура ОборотыКассовойСмены(КассаККМ, НомерСмены, ДанныеСверки, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Получает данные из сервиса ОФД по чекам за смену.
//
// Параметры:
//  КассаККМ - ОпределяемыйТип.КассаККМРМК - касса ккм для сверки
//  НомерСмены - Число - номер смены
//  ДанныеПоЧекам - Произвольный - структура данных по чекам
//  СтандартнаяОбработка - Булево - признак стандартной обработки
//
Процедура ЧекиКассовойСмены(КассаККМ, НомерСмены, ДанныеПоЧекам, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

#Область ШаблонЧека

// Заполняет текущую кассу ККМ шаблона чека по параметрам сеанса
//
// Параметры:
//  ПараметрыСеанса - ПараметрыСеанса - ПараметрыСеанса.
//  ТекущаяКассаККМ - ОпределяемыйТип.ПодключаемоеОборудованиеРМК - подключаемое оборудование касса, для заполнения.
//
Процедура ЗаполнитьТекущуюКассуККМШаблонаЧека(ПараметрыСеанса, ТекущаяКассаККМ) Экспорт
	

	
КонецПроцедуры

// Заполняет документ для интерфейсной работы шаблона чека ККМ
//
// Параметры:
//  ДокументДляПечатиШаблона - ОпределяемыйТип.ЧекККМРМК - заполняемый параметр, документ для интерфейсной работы шаблона чека ККМ.
//
Процедура ЗаполнитьДокументДляШаблонаЧека(ДокументДляПечатиШаблона) Экспорт
	

	
КонецПроцедуры

// Заполняет количество миллиметров в пикселе
//
// Параметры:
//  КоличествоМиллиметровВПикселе - Число - количество миллиметров в пикселе, для заполнения.
//
Процедура ЗаполнитьКоличествоМиллиметровВПикселе(КоличествоМиллиметровВПикселе) Экспорт
	

	
КонецПроцедуры

// Заполняет макет шаблона чека
//
// Параметры:
//  МакетШаблонаЧека - СхемаКомпоновкиДанных - макет шаблона чека, для заполнения.
//
Процедура ЗаполнитьМакетШаблонаЧека(МакетШаблонаЧека) Экспорт
	

	
КонецПроцедуры

// Заполняет данные чека, необходимые для фискализации.
//
// Параметры:
//  ДокументСсылка - ОпределяемыйТип.ЧекККМРМК  - документ, по которому формируются исходные данные в формате БПО.
//  ДанныеЧека - Структура  - данные чека, необходимые для фискализации.
//
Процедура ЗаполнитьДанныеДляПробитияЧека(ДокументСсылка, ДанныеЧека) Экспорт
	

	
КонецПроцедуры

// Заполняет описание условия, допустимые виды сравнения и тип значения сравнения для условия.
//
// Параметры:
//  Условие - ПеречислениеСсылка.УсловиеВыводаСекцииШаблонаРМК - Условие.
//  ОписаниеУсловия - Структура - содержит данные по условию:
// * ДопустимыеВидыСравнения - Массив - допустимые виды сравнения.
// * ТипЗначения - ОписаниеТипов - допустимый тип значения сравнения.
//
Процедура ЗаполнитьОписаниеУсловия(Условие, ОписаниеУсловия) Экспорт
	

	
КонецПроцедуры

// Заполняет доступные условия
//
// Параметры:
//  ДоступныеУсловия - Массив - доступные условия для вывода в секции шаблона РМК.
//  СекцияПромокода - Булево - СекцияПромокода.
//
Процедура ЗаполнитьДоступныеУсловия(ДоступныеУсловия, СекцияПромокода = Ложь) Экспорт
	

	
КонецПроцедуры

// Вычисляет левое значение в зависимости от условия из данных чека
//
// Параметры:
//  Условие - ПеречислениеСсылка.УсловиеВыводаСекцииШаблонаРМК - Условие.
//  ДанныеЧека - Структура - данные чека.
//  ЛевоеЗначение - ОпределяемыйТип.ЗначениеУсловияВыводаШаблонаРМК - левое значение по условию, для заполнения.
//
Процедура ВычислитьЛевоеЗначениеУсловия(Условие, ДанныеЧека, ЛевоеЗначение) Экспорт
	

	
КонецПроцедуры

// Добавляет параметры в шаблон чека.
//
// Параметры:
//  ШаблонЧека - ДанныеФормыДерево - Шаблон чека
//
Процедура ДобавитьПараметрыВШаблонЧека(ШаблонЧека) Экспорт
	
КонецПроцедуры

#КонецОбласти

// Определяет является ли переданное значение особенности учета меховой продукцией.
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - особенность учета.
//  Результат - Булево - Истина, если особенность учета - алкогольная продукция.
//
Процедура ОпределитьОсобенностьУчетаМеховаяПродукция(ОсобенностьУчета, Результат) Экспорт

КонецПроцедуры

// Определяет является ли переданное значение особенности учета пивной продукцией.
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - особенность учета.
//  Результат - Булево - Истина, если особенность учета - алкогольная продукция.
//
Процедура ОпределитьОсобенностьУчетаПивнаяПродукция(ОсобенностьУчета, Результат) Экспорт

КонецПроцедуры

// Процедура заполняет систему налогообложения по складу
// для случаев если настроено распределение продаж в разрезе складов.
//
// Параметры:
//  ДанныеСтроки - Структура - данные текущей строки.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЗаполнитьСНОСтрокиПоСкладу(ДанныеСтроки, Форма) Экспорт
	
	
	
КонецПроцедуры

// Заполняет признак запрета сопоставления товара на форме РМК
//
// Параметры:
//  ЗапретитьСопоставлениеТовара - Булево - Признак запрета сопоставления товара кассиром.
//
Процедура ЗаполнитьПризнакЗапретаСопоставленияТовара(ЗапретитьСопоставлениеТовара) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьПризнакЗапретаСопоставленияТовара(ЗапретитьСопоставлениеТовара);
	
КонецПроцедуры

// Заполняет колонки таблиц, которые необходимо передавать на сервер для подготовки данных перед пробитием чека
//
// Параметры:
//  КолонкиТаблицФормы - Структура - структура, где именем ключа является имя таблицы,
//									значением массив с именами колонок.
//
Процедура ЗаполнитьКолонкиТаблицФормыРабочегоМестаКассира(КолонкиТаблицФормы) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьКолонкиТаблицФормыРабочегоМестаКассира(КолонкиТаблицФормы);
	
КонецПроцедуры

#Область УчетНаличных

// Заполняет признак контроля остатка наличных в кассе если используется переопределение настроек.
//
// Параметры:
//  КонтролироватьОстатокНаличных - Булево - заполняемый признак учета
//
Процедура ЗаполнитьПризнакКонтролироватьОстатокНаличных(КонтролироватьОстатокНаличных) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьПризнакКонтролироватьОстатокНаличных(КонтролироватьОстатокНаличных);
	
КонецПроцедуры

// Заполняет количество наличных денежных средств в кассе ккм.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияРМК - Организация
//  КассаККМ - ОпределяемыйТип.КассаККМРМК - КассаККМ
//  Результат - Число - Наличные денежные средства в кассе ККМ.
//
Процедура ЗаполнитьНаличныеДенежныеСредстваВКассеККМ(Организация, КассаККМ, Результат) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьНаличныеДенежныеСредстваВКассеККМ(Организация, КассаККМ, Результат);
	
КонецПроцедуры

// Заполняет параметры автоматической выемки денежных средств в кассе ккм
// при закрытии смены.
// 
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияРМК - Организация
//  КассаККМ - ОпределяемыйТип.КассаККМРМК - КассаККМ
//  Результат - Структура - Структура параметров выемки
//   *ТребуетсяВыемкаПриЗакрытииСмены - Булево - Признак необходимости делать автовыемку при закрытии смены.
//   *МинимальныйОстатокНаличныхВКассе - Число - Минимальный остаток наличных при автовыемки.
//
Процедура ЗаполнитьПараметрыВыемкиПриЗакрытииСмены(Организация, КассаККМ, Результат) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьПараметрыВыемкиПриЗакрытииСмены(Организация, КассаККМ, Результат);
	
КонецПроцедуры

// Отражает изменения наличных денежных средств после проведения операции.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияРМК - Организация
//  КассаККМ - ОпределяемыйТип.КассаККМРМК - КассаККМ
//  Сумма - Число - Наличные денежные средства в кассе ККМ.
//
Процедура ОтразитьИзменениеНаличныхДенежныхСредств(Организация, КассаККМ, Сумма) Экспорт
	

	
КонецПроцедуры

// Фиксирует наличные денежные средства на начало и конец смены
// в служебном регистре 1С:РМК.
//
// Параметры:
//  СписокСмен - Список строк ТаблицаКассККМОрганизаций формы РМК
//
Процедура ЗафиксироватьНаличныеДенежныеСредстваСмены(СписокСмен) Экспорт
	

	
КонецПроцедуры

#КонецОбласти


#Область ЗаполнениеХарактеристик

// Заполняет данные о характеристиках товаров
//
// Параметры:
//  СтруктураПараметров			 - Структура		 - настройки заполнения данных.
//  		* Номенклатура - ОпределяемыйТип.НоменклатураРМК - номенклатура текущей строки.
//  		* Характеристика - ОпределяемыйТип.ХарактеристикаРМК - характеристика текущей строки.
//  		* ВидЦены - ОпределяемыйТип.ВидЦеныРМК - вид цены рабочего места кассира.
//  		* ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК - торговый объект рабочего места кассира.
//  ДанныеПлиткиПодбораЗначений	 - ТаблицаЗначений	 - таблица для заполнения плтики значениями подбора.
//
Процедура ЗаполнитьДанныеПлиткиВыбораЗначений(СтруктураПараметров, ДанныеПлиткиПодбораЗначений) Экспорт
	ОбщегоНазначенияРМКРТ.ЗаполнитьДанныеПлиткиВыбораЗначений(СтруктураПараметров, ДанныеПлиткиПодбораЗначений);
КонецПроцедуры

#КонецОбласти

#Область НастройкиРасчетаСкидокИДисконтныхКарт
// Заполняет признак использования автоматических скидок в форме "Настройки рабочего места кассира"
//
// Параметры:
//  ИспользоватьСерверЛояльностиПолучательДанных - Булево	 - признак использования сервера лояльности
//  ИспользоватьАвтоматическиеСкидки			 - Булево	 - признак использования автоматических скидок
//
Процедура ЗаполнитьИспользованиеАвтоматическихСкидок(ИспользоватьСерверЛояльностиПолучательДанных, ИспользоватьАвтоматическиеСкидки) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьИспользованиеАвтоматическихСкидок(ИспользоватьСерверЛояльностиПолучательДанных, ИспользоватьАвтоматическиеСкидки);
	
КонецПроцедуры

// Заполняет признак использования дисконтных карт
//
// Параметры:
//  ИспользоватьДисконтныеКарты	 - Булево	 - призак использования дисконтных карт
//
Процедура ЗаполнитьПризнакИспользованияДисконтныхКарт(ИспользоватьДисконтныеКарты) Экспорт
	
	ИспользоватьДисконтныеКарты = Истина;
	
КонецПроцедуры
#КонецОбласти


#Область СписаниеБалловПоВладельцу

// Процедура дополняет данные о карте в форме списания баллов по владельцу
//
// Параметры:
//  СтрокаПриемник - СтрокаТаблицыЗначений - строка таблицы значений таблицы данных дисконтной карты.
//  СтрокаИсточник - СтрокаТаблицыЗначений - строка таблицы значений источника.
Процедура ДополнитьДанныеОКарте(СтрокаПриемник, СтрокаИсточник) Экспорт

КонецПроцедуры


// Процедура объединяет бонусные баллы дисконтных карт
//
// Параметры:
//  БонуснаяПрограмма	 - Строка						 - идентификатор бонусной программы.
//  БонуснаяКарта		 - ОпределяемыйТип.ДисконтнаяКартаРМК	 - Дисконтная карта начисления.
//  ТаблицаВыбранныхКарт - ТаблицаЗначений						 - таблица бонусных карт для объединения.
//  СтруктураОтвета		 - Структура							 - структура ответа по бонусным картам.
//
Процедура ОбъединитьБонусныеБаллы(БонуснаяПрограмма, БонуснаяКарта, ТаблицаВыбранныхКарт, СтруктураОтвета) Экспорт

КонецПроцедуры
#КонецОбласти

// Получает адрес таблицы значений с используемыми подарочными сертификатами.
//
// Параметры:
//  Адрес - Строка - переменная, куда будет записан адрес таблицы с подарочными сертификатами.
//
Процедура ПолучитьАдресТаблицыПодарочныхСертификатов(Адрес = "") Экспорт
	ОбщегоНазначенияРМКРТ.ПолучитьАдресТаблицыПодарочныхСертификатов(Адрес);
КонецПроцедуры

// Определяет используются ли серии для номенклатуры
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.НоменклатураРМК - позиция номенклатуры, для которой будет определяться использование серий.
//  Результат - Булево - переменная, куда будет записан результат проверки использования серий.
//
Процедура ОпределитьИспользованиеСерий(Номенклатура, Результат) Экспорт
	ОбщегоНазначенияРМКРТ.ОпределитьИспользованиеСерий(Номенклатура, Результат);
КонецПроцедуры

// Заполняет признак использования характеристик в конфигурации.
//
// Параметры:
//  ИспользоватьХарактеристики - Булево - признак использования характеристик.
//
Процедура ЗаполнитьИспользованиеХарактеристик(ИспользоватьХарактеристики) Экспорт
	ОбщегоНазначенияРМКРТ.ЗаполнитьИспользованиеХарактеристик(ИспользоватьХарактеристики);
КонецПроцедуры

// Заполняет признак использования оплат платежными картами.
//
// Параметры:
//  ИспользоватьОплатуПлатежнымиКартами - Булево - признак использования оплат платежными картами.
//
Процедура ЗаполнитьПризнакИспользованияОплатПК(ИспользоватьОплатуПлатежнымиКартами) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьПризнакИспользованияОплатПК(ИспользоватьОплатуПлатежнымиКартами);
	
КонецПроцедуры

// Заполняет признак использования продаж алкогольной продукции.
//
// Параметры:
//  ИспользоватьПродажуАлкоголя - Булево - признак использования продаж алкогольной продукции.
//
Процедура ЗаполнитьПризнакИспользованияПродажАлкоголя(ИспользоватьПродажуАлкоголя) Экспорт
	
	ОбщегоНазначенияРМКРТ.ЗаполнитьПризнакИспользованияПродажАлкоголя(ИспользоватьПродажуАлкоголя);
	
КонецПроцедуры

#КонецОбласти
