#Область ПрограммныйИнтерфейс

// Проверяет, что включена ф.о "Использовать подключаемое оборудование" и авторизовался пользователь,
// а не внешний пользователь.
//
// Возвращаемое значение:
//  Булево - значение функциональной опции "Использовать подключаемое оборудование".
//
Функция ИспользоватьПодключаемоеОборудование() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование") И ТипЗнч(Пользователи.АвторизованныйПользователь()) = Тип("СправочникСсылка.Пользователи");
	
КонецФункции

// Получает параметры кассы ККМ.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ - касса ККМ по которой необходимо получить параметры.
//
// Возвращаемое значение:
//  Структура - параметры кассы ККМ.
// 
Функция ПараметрыКассыККМ(КассаККМ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КассыККМ.ПодключаемоеОборудование КАК ИдентификаторУстройства,
	|	КассыККМ.Магазин КАК Магазин,
	|	КассыККМ.Владелец КАК Организация,
	|	КассыККМ.ИспользоватьБезПодключенияОборудования КАК ИспользоватьБезПодключенияОборудования,
	|	КассыККМ.НастройкаРаспределенияВыручкиПоСекциям КАК НастройкаРаспределенияВыручкиПоСекциям,
	|	КассыККМ.ЭлектронныйЧекSMSПередаютсяПрограммой1С КАК ЭлектронныйЧекSMSПередаютсяПрограммой1С,
	|	КассыККМ.ЭлектронныйЧекEmailПередаютсяПрограммой1С КАК ЭлектронныйЧекEmailПередаютсяПрограммой1С,
	|	КассыККМ.НеПечататьБумажныйЧек КАК НеПечататьБумажныйЧек,
	|	Магазины.СкладПродажи КАК СкладПродажи
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Магазины КАК Магазины
	|		ПО КассыККМ.Магазин = Магазины.Ссылка
	|ГДЕ
	|	КассыККМ.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", КассаККМ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ПараметрыКассыККМ = Новый Структура;
	ПараметрыКассыККМ.Вставить("ИдентификаторУстройства", Справочники.ПодключаемоеОборудование.ПустаяСсылка());
	ПараметрыКассыККМ.Вставить("Магазин", Справочники.Магазины.ПустаяСсылка());
	ПараметрыКассыККМ.Вставить("СкладПродажи", Справочники.Склады.ПустаяСсылка());
	ПараметрыКассыККМ.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	ПараметрыКассыККМ.Вставить("ИспользоватьБезПодключенияОборудования", Истина);
	ПараметрыКассыККМ.Вставить("ЭлектронныйЧекSMSПередаютсяПрограммой1С", Ложь);
	ПараметрыКассыККМ.Вставить("ЭлектронныйЧекEmailПередаютсяПрограммой1С", Ложь);
	ПараметрыКассыККМ.Вставить("ПоддерживаетПроверкуКодовМаркировки", Ложь);
	ПараметрыКассыККМ.Вставить("РаспределениеВыручкиПоСекциям");
	ПараметрыКассыККМ.Вставить("НеПечататьБумажныйЧек", Ложь);
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ПараметрыКассыККМ, Выборка);
		ПараметрыКассыККМ.РаспределениеВыручкиПоСекциям = ПодключаемоеОборудованиеРТ.РаспределениеВыручкиПоСекциям(
			Выборка.НастройкаРаспределенияВыручкиПоСекциям);
		
		Если НЕ ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования
			И ЗначениеЗаполнено(ПараметрыКассыККМ.ИдентификаторУстройства) Тогда
			ПараметрыКассыККМ.ПоддерживаетПроверкуКодовМаркировки = Ложь;
		КонецЕсли;
	Иначе
		
		ПараметрыКассыККМ.РаспределениеВыручкиПоСекциям = ПодключаемоеОборудованиеРТ.РаспределениеВыручкиПоСекциям(
			Неопределено);
		
	КонецЕсли;
	
	Возврат ПараметрыКассыККМ;
	
КонецФункции // ПараметрыКассыККМ()

// Получает параметры ЭТ.
//
// Параметры:
//  ЭквайринговыйТерминал - СправочникСсылка.ЭквайринговыйТерминалы - ЭТ по которому необходимо получить параметры.
//
// Возвращаемое значение:
//  Структура - параметры ЭТ.
//
Функция ПараметрыЭТ(ЭквайринговыйТерминал) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование КАК ИдентификаторУстройства,
	|	ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования КАК ИспользоватьБезПодключенияОборудования
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭквайринговыйТерминал);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Новый Структура("ИдентификаторУстройства,
								|ИспользоватьБезПодключенияОборудования",
								Выборка.ИдентификаторУстройства,
								Выборка.ИспользоватьБезПодключенияОборудования
				);
		
	Иначе
		
		Возврат Новый Структура("ИдентификаторУстройства,
								|ИспользоватьБезПодключенияОборудования",
								Справочники.ПодключаемоеОборудование.ПустаяСсылка(),
								Истина
				);
		
	КонецЕсли;
	
КонецФункции

// Получает кассу организации по умолчанию.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, для которой необходимо получить счет.
//  ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - форма оплаты, по которой определяется необходимость получения кассы.
//  Касса - СправочникСсылка.Кассы - касса, которую нужно заполнить.
//  Магазин - СправочникСсылка.Магазины - магазин, по которому нужно получить кассу.
//  Пользователь - СправочникСсылка.Пользователи - пользователь владелец кассы.
//
// Возвращаемое значение:
//  СправочникСсылка.Кассы - возвращает кассу организации, если она одна в ИБ, если переданная в качестве параметра 
//                           касса уже заполнена - возвращает ее. Если касса не передана в качестве параметра или передана пустая,
//                           возвращает единственную в информационной базе кассу. Если касса в базе не одна - возвращает 
//                           пустую ссылку на кассу. Возвращает кассу, только если переданная форма оплаты наличная или Неопределено.
//
Функция КассаОрганизацииПоУмолчанию(
	Знач Организация = Неопределено,
	Знач ФормаОплаты = Неопределено,
	Знач Касса = Неопределено,
	Знач Магазин = Неопределено,
	Пользователь = Неопределено) Экспорт
	
	Возврат ЗначениеНастроекПовтИсп.КассаОрганизацииПоУмолчанию(
				Организация,
				ФормаОплаты,
				Касса,
				Магазин,
				Пользователь);
	
КонецФункции // КассаОрганизацииПоУмолчанию()

// Получает банковский счет организации по умолчанию.
//
// Параметры:
//  Организация    - СправочникСсылка.Организации - организация, для которой необходимо получить счет.
//  ФормаОплаты    - ПеречислениеСсылка.ФормыОплаты - форма оплаты, по которой определяется необходимость
//  получения банковского счета.
//  БанковскийСчет - СправочникСсылка.БанковскиеСчетаОрганизаций - банковский счет, который нужно заполнить.
//
// Возвращаемое значение:
//  СправочникСсылка.БанковскиеСчетаОрганизаций - Возвращает банковский счет организации, если он один в ИБ.
//                                                Если переданный в качестве параметра банковский счет уже заполнен - возвращает его.
//                                                Если банковский счет не передан в качестве параметра или передан пустой,
//                                                возвращает единственный в информационной базе банковский счет. Если банковский счет
//                                                в базе не один - возвращает пустую ссылку на банковский счет.
//                                                Возвращает банковский счет, только если переданная форма оплаты безналичная или Неопределено.
//
Функция БанковскийСчетОрганизацииПоУмолчанию(Знач Организация = Неопределено, Знач ФормаОплаты = Неопределено, Знач БанковскийСчет = Неопределено) Экспорт
	
	Возврат ЗначениеНастроекПовтИсп.БанковскийСчетОрганизацииПоУмолчанию(Организация, ФормаОплаты, БанковскийСчет);
	
КонецФункции // ПолучитьБанковскийСчетОрганизацииПоУмолчанию()

// Получает банковский счет контрагента по умолчанию.
//
// Параметры:
//  Контрагент     - СправочникСсылка.Контрагенты - Контрагент, для которой необходимо получить счет.
//  БанковскийСчет - СправочникСсылка.БанковскиеСчетаКонтрагентов - Банковский счет, который нужно заполнить.
//
// Возвращаемое значение:
//  СправочникСсылка.БанковскиеСчетаКонтрагентов - Возвращает банковский счет контрагента, если он один в ИБ.
//                                                 Если переданный в качестве параметра банковский счет уже заполнен - возвращает его.
//                                                 Если банковский счет не передан в качестве параметра или передан пустой,
//                                                 возвращает единственный в информационной базе банковский счет. Если банковский счет
//                                                 в базе не один - возвращает пустую ссылку на банковский счет.
//                                                 Возвращает банковский счет, только если переданная форма оплаты безналичная или Неопределено.
//
Функция БанковскийСчетКонтрагентаПоУмолчанию(Знач Контрагент, Знач БанковскийСчет = Неопределено) Экспорт
	
	Возврат ЗначениеНастроекПовтИсп.БанковскийСчетКонтрагентаПоУмолчанию(Контрагент, БанковскийСчет);
	
КонецФункции // БанковскийСчетКонтрагентаПоУмолчанию()

// Получение значения константы.
//
// Параметры:
//  ИмяКонстанты - Строка - наименование константы.
//
//  ЗначениеКонстанты - возвращает значение константы по имени.
//
Функция ПолучитьЗначениеКонстанты(ИмяКонстанты) Экспорт

	Возврат ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты(ИмяКонстанты);
	
КонецФункции

// Заполняет пустую кассу по магазину, рабочему месту и настройкам пользователя.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ - касса для заполнения.
//  Магазин - СправочникСсылка.Магазины - магазин по которому необходимо заполнить кассу ККМ.
//  РабочееМесто - СправочникСсылка.РабочиеМеста - рабочее место по которому необходимо заполнить кассу ККМ.
//  Пользователь - СправочникСсылка.Пользователи - пользователь по которому необходимо заполнить кассу ККМ.
//
Процедура ЗаполнитьКассуККМПоУмолчанию(КассаККМ, Знач Магазин = Неопределено, Знач РабочееМесто = Неопределено, Знач Пользователь = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(КассаККМ) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Магазин = Неопределено Тогда
		Магазин = ПараметрыСеанса.ТекущийМагазин;
	КонецЕсли;
	
	Если РабочееМесто = Неопределено Тогда
		РабочееМесто = ПараметрыСеанса.РабочееМестоКлиента;
	КонецЕсли;
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ОбщегоНазначенияРТ.ПользовательСУчетомИзмененныхПрав();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиПользователей.Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|ГДЕ
	|	НастройкиПользователей.Пользователь = &Пользователь
	|	И НастройкиПользователей.Магазин = &Магазин
	|	И НастройкиПользователей.Настройка = &Настройка";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Магазин"     , Магазин);
	Запрос.УстановитьПараметр("Настройка"   , ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяКассаККМ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ОсновнаяКассаККМ = Справочники.КассыККМ.ПустаяСсылка();
	
	Если Выборка.Следующий() Тогда
		ОсновнаяКассаККМ = Выборка.Значение
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КассыККМ.Ссылка,
	|	ВЫБОР
	|		КОГДА КассыККМ.Ссылка = &ОсновнаяКассаККМ
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЗначениеУпорядочивания
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.Магазин = &Магазин
	|	И КассыККМ.РабочееМесто = &РабочееМесто
	|	И КассыККМ.ТипКассы В(&ТипыКассы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗначениеУпорядочивания";
	
	Запрос.УстановитьПараметр("Магазин"         , Магазин);
	Запрос.УстановитьПараметр("РабочееМесто"    , РабочееМесто);
	Запрос.УстановитьПараметр("ОсновнаяКассаККМ", ОсновнаяКассаККМ);
	
	МассивТипыКассы = Новый Массив;
	МассивТипыКассы.Добавить(Перечисления.ТипыКассККМ.АвтономнаяККМ);
	МассивТипыКассы.Добавить(Перечисления.ТипыКассККМ.ФискальныйРегистратор);
	МассивТипыКассы.Добавить(Перечисления.ТипыКассККМ.СетевоеОборудование);
	Запрос.УстановитьПараметр("ТипыКассы"       , МассивТипыКассы);
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ОсновнаяКассаККМ = Выборка.Ссылка
	КонецЕсли;
	
	КассаККМ = ОсновнаяКассаККМ;
	
КонецПроцедуры

// Общая служебная функция получения значения настроек пользователя.
//
// Параметры: 
// Пользователь - СправочникСсылка.Пользователи - пользователь, по которому берутся значения по умолчанию.
// Магазин      - СправочникСсылка.Магазины - магазин, по которому берутся значения по умолчанию.
// Настройка - Строка - наименование настройки.
// СписокПолей - СписокЗначений.
//
// Возвращаемое значение:
//  Значение - значение настройки по пользователю.
//
Функция ЗначениеПоУмолчаниюПользователяМагазина(Пользователь, Магазин, Настройка, СписокПолей = Неопределено) Экспорт
	
	НастройкаТипЗнч = ПланыВидовХарактеристик.НастройкиПользователей[Настройка].ТипЗначения;
	НастройкаТипЗнчСправочник = Справочники.ТипВсеСсылки().СодержитТип(НастройкаТипЗнч.Типы()[0]);
	Если НастройкаТипЗнчСправочник Тогда
		МетаданныеТипаНастройки = Метаданные.НайтиПоТипу(НастройкаТипЗнч.Типы()[0]);
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Магазин"     , Магазин);
	Запрос.УстановитьПараметр("Настройка"   , ПланыВидовХарактеристик.НастройкиПользователей[Настройка]);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Значение КАК Значение";
	Если СписокПолей <> Неопределено И НастройкаТипЗнчСправочник Тогда
		СправочникИмя = МетаданныеТипаНастройки.Имя;
		Для каждого Элемент Из СписокПолей Цикл
			ИмяРеквизита = Элемент.Значение;
			Представление = Элемент.Представление;
			Если ПустаяСтрока(Представление) Тогда
				Представление = ИмяРеквизита;
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + ",
			|ВЫРАЗИТЬ(Значение КАК Справочник." + СправочникИмя + ")." + ИмяРеквизита + "  КАК " + Представление;
		КонецЦикла;
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК РегистрЗначениеПрав
	|
	|ГДЕ
	|	Пользователь = &Пользователь
	|	И Магазин    = &Магазин
	|	И Настройка  = &Настройка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Если СписокПолей = Неопределено Тогда
		ПустоеЗначение = НастройкаТипЗнч.ПривестиЗначение();
	Иначе
		ПустоеЗначение = Новый Структура("Значение", НастройкаТипЗнч.ПривестиЗначение());
		Для каждого ЭлементСписка Из СписокПолей Цикл
			ПустоеЗначение.Вставить(?(ПустаяСтрока(ЭлементСписка.Представление), ЭлементСписка.Значение, ЭлементСписка.Представление));
		КонецЦикла;
	КонецЕсли;
	Если Выборка.Следующий() Тогда
		Если Не ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат ПустоеЗначение;
		КонецЕсли;
		Если НастройкаТипЗнчСправочник И ПараметрыДоступа("Чтение", МетаданныеТипаНастройки, "Ссылка").ОграничениеУсловием Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 1 ИЗ Справочник." + МетаданныеТипаНастройки.Имя + " ГДЕ Ссылка = &Ссылка";
			Запрос.УстановитьПараметр("Ссылка", Выборка.Значение);
			РезультатЗапроса = Запрос.Выполнить();
			Если РезультатЗапроса.Пустой() Тогда
				Возврат ПустоеЗначение;
			КонецЕсли;
		КонецЕсли;
		Если СписокПолей = Неопределено Тогда
			Возврат Выборка.Значение;
		Иначе
			ЗаполнитьЗначенияСвойств(ПустоеЗначение, Выборка);
			Возврат ПустоеЗначение;
		КонецЕсли;
	Иначе
		Возврат ПустоеЗначение;
	КонецЕсли;
	
КонецФункции // ЗначениеПоУмолчаниюПользователя()


#КонецОбласти
