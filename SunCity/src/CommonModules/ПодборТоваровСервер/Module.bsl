

#Область ПрограммныйИнтерфейс

Процедура УстановитьОтборПоВладельцуХарактеристик(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список, "Владелец", Форма.ВладелецХарактеристик, 
		ВидСравненияКомпоновкиДанных.Равно, "ОтборПоВладельцуХарактеристик", Истина);
	
КонецПроцедуры


// Заполняет дерево отборов характеристик по свойствам вида номенклатуры выбранного на форме.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура ЗаполнитьДеревоОтборовХарактеристик(Форма) Экспорт
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ДеревоОтборов.Строки.Очистить();
	
	ЗаполнитьДеревоЗначенийОтборов(Форма, ДеревоОтборов, Истина);
	
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
КонецПроцедуры

// Вызывается из форм подборов при изменении флажка использования фильтров.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура ПриИзмененииИспользованияФильтров(Форма) Экспорт

	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаВыбораХарактеристик(Форма) Тогда
		
		УдалитьОтборПоСвойствамВидаНоменклатуры(Форма);
		
		Если Форма.ИспользоватьФильтры Тогда
			УстановитьОтборПоСвойствамВидаНоменклатуры(Форма);
		КонецЕсли;
		
	Иначе
		
		Если (Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам
			Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам
			Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам) Тогда
			
			Форма.ВидНоменклатурыДоИзменения = Неопределено;
			
			Если Форма.ИспользоватьФильтры Тогда
				УстановитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
			Иначе
				УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
			КонецЕсли;
			
			ПриИзмененииВидаНоменклатуры(Форма);
			
		Иначе
			
			Если Форма.ИспользоватьФильтры Тогда
				
				УстановитьТекущуюСтрокуИерархииНоменклатуры(Форма);
				ПодборТоваровКлиентСервер.УстановитьОтборПоИерархииНоменклатуры(Форма);
				
			Иначе
				
				ПодборТоваровКлиентСервер.УдалитьОтборПоИерархииНоменклатуры(Форма);
				УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПодборТоваровКлиентСервер.УстановитьДоступностьЭлементовФильтров(Форма);
	
КонецПроцедуры

// Вызывается из форм подбора при изменении вида номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора, форма списка, форма выбора.
//
Процедура ПриИзмененииВидаНоменклатуры(Форма) Экспорт
	
	Если Форма.ВидНоменклатуры = Форма.ВидНоменклатурыДоИзменения Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	ЭтоФормаСпискаНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма);
	ЭтоФормаВыбораНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма);
	
	Форма.ВидНоменклатурыДоИзменения = Форма.ВидНоменклатуры;
	
	УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
	
	Если Не ЗначениеЗаполнено(Форма.ВидНоменклатуры)
		Или Не Форма.ИспользоватьФильтры Тогда
		
		ОчиститьДеревоОтборов(Форма);
		Если Форма.ИспользоватьФильтры Тогда
			УстановитьОтборПоВидуНоменклатуры(Форма);
		КонецЕсли;
		
	Иначе
		
		Если ЭтоФормаПодбора
			Или	ЭтоФормаСпискаНоменклатуры
			Или ЭтоФормаВыбораНоменклатуры Тогда
			
			ЗаполнитьДеревоОтборовНоменклатуры(Форма);
			
		Иначе
			
			ЗаполнитьДеревоОтборовНоменклатуры(Форма);
			
		КонецЕсли;
		
		УстановитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дерево отборов по свойствам вида номенклатуры выбранного на форме.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура ЗаполнитьДеревоОтборовНоменклатуры(Форма) Экспорт
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ДеревоОтборов.Строки.Очистить();
	
	ЗаполнитьДеревоЗначенийОтборов(Форма, ДеревоОтборов, Ложь);
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) Тогда
		ЗаполнитьДеревоЗначенийОтборов(Форма, ДеревоОтборов, Истина);
	КонецЕсли;
	
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
КонецПроцедуры

// Добавляет отбор в указанную коллекцию области отбора.
//
// Параметры:
//	ОбластьОтбора - ОтборКомпоновкиДанных - отбор динамического списка,
//	ЛевоеЗначение - Строка - путь к данным поля отбора,
//	ПравоеЗначение - Произвольный - значение отбора,
//	ВидОтбора - ВидСравненияКомпоновкиДанных - вид сравнения,
//	Представление - Строка - представление элемента отбора.
//
Процедура ДобавитьЭлементОтбора(ОбластьОтбора, ЛевоеЗначение, ПравоеЗначение, ВидОтбора, Представление = "") Экспорт
	
	ЭлементОтбора                   = ОбластьОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение     = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
	ЭлементОтбора.ПравоеЗначение    = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения  = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.ВидСравнения      = ВидОтбора;
	
	Если ЗначениеЗаполнено(Представление) Тогда
		ЭлементОтбора.Представление = Представление;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при изменении значения в дереве отбора по свойствам вида номенклатуры.
// Т.е. клиентские функции обрабатывают обработку значений на элементе формы (устанавливают
// значения флажков на строках, подчиненных строках, открывают форму установки интервала значений
// и т.п.), затем управление передается на сервер и сначала отключаются все установленные отборы
// по дереву свойств, затем включается отбор только по значениям строк с установленными флажками отбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура ДеревоОтборовОтборПриИзменении(Форма) Экспорт
	
	Если Не Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьОтборПоСвойствамВидаНоменклатуры(Форма);
	УстановитьОтборПоСвойствамВидаНоменклатуры(Форма);
	
КонецПроцедуры

// Переносит данные установленных значений отборов из дерева отборов по
//  свойствам вида номенклатуры в таблицу значений и помещает ее во временное
//  хранилище.
//
// Параметры:
//  Форма	 - УправляемаяФорма	 - форма подбора.
// 
// Возвращаемое значение:
//  Строка - Адрес таблицы значений во временном хранилище.
//
Функция АдресТаблицыПараметровДереваОтборов(Форма) Экспорт
	
	УникальныйИдентификаторФормы = Форма.УникальныйИдентификатор;
	ДеревоЗначенийОтборов        = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	
	АдресТаблицы = Неопределено;
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	
	ТаблицаПараметров.Колонки.Добавить("ИмяРеквизита");
	ТаблицаПараметров.Колонки.Добавить("ЗначениеОтбора");
	ТаблицаПараметров.Колонки.Добавить("ЭтоДопРеквизит");
	
	ПараметрыОтбора = Новый Структура("Отбор", Истина);
	
	СтрокиДереваОтборов = ДеревоЗначенийОтборов.Строки;
	
	НайденныеСтроки = СтрокиДереваОтборов.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаДереваОтборов Из НайденныеСтроки Цикл
		
		Если ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Строка")
			Или ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Булево") Тогда
			
			СтрокаТаблицы = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДереваОтборов);
			
		ИначеЕсли Не СтрокаДереваОтборов.ОтборДоступен Тогда
			
			ПодчиненныеСтроки = СтрокаДереваОтборов.Строки.НайтиСтроки(ПараметрыОтбора);
			
			Если ПодчиненныеСтроки.Количество() = 1 Тогда
				
				СтрокаЗначенияОтбора = ПодчиненныеСтроки[0];
				СтрокаТаблицы = ТаблицаПараметров.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаЗначенияОтбора);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаПараметров.Количество() > 0 Тогда
		АдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаПараметров, УникальныйИдентификаторФормы);
	КонецЕсли;
	
	Возврат АдресТаблицы;
	
КонецФункции

// Переносит данные установленных значений отборов из дерева отборов по
//  свойствам вида номенклатуры в таблицу значений и помещает ее во временное хранилище.
//
// Параметры:
//  Форма	 - УправляемаяФорма	 - форма подбора.
// 
// Возвращаемое значение:
//  Строка - Адрес таблицы значений во временном хранилище.
//
Функция АдресТаблицыСопоставленияДереваОтборов(Форма) Экспорт
	
	УникальныйИдентификаторФормы = Форма.УникальныйИдентификатор;
	ДеревоЗначенийОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	
	АдресТаблицы = Неопределено;
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	
	ТаблицаПараметров.Колонки.Добавить("ИмяРеквизита");
	ТаблицаПараметров.Колонки.Добавить("ЗначениеОтбора");
	ТаблицаПараметров.Колонки.Добавить("ЭтоДопРеквизит");
	ТаблицаПараметров.Колонки.Добавить("ИнтервалОт");
	ТаблицаПараметров.Колонки.Добавить("ИнтервалДо");
	ТаблицаПараметров.Колонки.Добавить("Интервал");
	
	ПараметрыОтбора = Новый Структура("Отбор", Истина);
	
	СтрокиДереваОтборов = ДеревоЗначенийОтборов.Строки;
	
	НайденныеСтроки = СтрокиДереваОтборов.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаДереваОтборов Из НайденныеСтроки Цикл
		
		Если СтрокаДереваОтборов.ФиксированноеЗначение Тогда
			
			СтрокаТаблицы = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДереваОтборов);
			
			Если СтрокаДереваОтборов.ИнтервалОт <> Неопределено Тогда
				СтрокаТаблицы.Интервал = Истина;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Строка")
			Или ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Булево") Тогда
			
			СтрокаТаблицы = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДереваОтборов);
			
			СтрокаТаблицы.Интервал = Ложь;
			
		ИначеЕсли Не СтрокаДереваОтборов.ОтборДоступен Тогда
			
			ПодчиненныеСтроки = СтрокаДереваОтборов.Строки.НайтиСтроки(ПараметрыОтбора);
			
			Для Каждого СтрокаЗначенияОтбора Из ПодчиненныеСтроки Цикл
				
				СтрокаТаблицы = ТаблицаПараметров.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаЗначенияОтбора);
				
				СтрокаТаблицы.Интервал = Ложь;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаПараметров.Количество() > 0 Тогда
		АдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаПараметров, УникальныйИдентификаторФормы);
	КонецЕсли;
	
	Возврат АдресТаблицы;
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Заполняет дерево значений отборов формы (списка, подбора) значениями
// отбора для номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма подбора.
//	ДеревоОтборов (ДеревоЗначений) - дерево значений отборов свойств.
//
Процедура ЗаполнитьДеревоЗначенийОтборов(Форма, ДеревоОтборов, ПоХарактеристикам)
	
	ВидНоменклатурыДляХарактеристик = Форма.ВидНоменклатуры;
	
	ТаблицаПараметровОтбора = Форма.ТаблицаПараметровОтбора.Выгрузить();
	
	Отбор = Новый Структура;
	Отбор.Вставить("ОтборХарактеристик",ПоХарактеристикам);
	ОтобранныеСтроки = ТаблицаПараметровОтбора.НайтиСтроки(Отбор);
	Для Каждого Строка Из ОтобранныеСтроки Цикл
		Строка.Отбор = Ложь;
	КонецЦикла;
		
	СтрокаРеквизита = Неопределено;
	
	ИспользованиеХарактеристик = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.ВидНоменклатуры, "ИспользованиеХарактеристик");
	
	Если ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры Тогда
		РеквизитВладелецХарактеристик = "ДополнительныеРеквизиты.Ссылка.Владелец";
	ИначеЕсли ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры Тогда
		РеквизитВладелецХарактеристик = "ДополнительныеРеквизиты.Ссылка.Владелец.ВидНоменклатуры";
	Иначе
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДополнительныеРеквизиты.Значение КАК Значение,
	|	ДополнительныеРеквизиты.Свойство КАК Свойство
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	Справочник.&Объект.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	|	&РеквизитВладелецХарактеристик = &ВидНоменклатурыДляХарактеристик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаВЗапросе.Значение КАК Значение,
	|	ТаблицаВЗапросе.Свойство КАК Свойство
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаВЗапросе.Свойство КАК Свойство
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РеквизитВладелецХарактеристик", РеквизитВладелецХарактеристик);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Объект", ?(ПоХарактеристикам,"ХарактеристикиНоменклатуры", "Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВидНоменклатурыДляХарактеристик", ВидНоменклатурыДляХарактеристик);
	
	Результат = Запрос.ВыполнитьПакет();
	РеквизитыОтбора  = Результат[1].Выгрузить();
	РеквизитыСвойств =  Результат[2].Выгрузить();
	
	Для каждого РеквизитСвойство Из РеквизитыСвойств Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Свойство", РеквизитСвойство.Свойство);
		СтрокиРеквизитыОтбора = РеквизитыОтбора.НайтиСтроки(СтруктураПоиска);
		
		СтрокаРеквизита = ДеревоОтборов.Строки.Добавить();
		
		СтрокаРеквизита.ЭтоДопРеквизит        = Ложь;
		СтрокаРеквизита.Представление         = "";
		Если ЗначениеЗаполнено(РеквизитСвойство.Свойство) Тогда
			СтрокаРеквизита.Представление = РеквизитСвойство.Свойство.Заголовок;
		КонецЕсли;
		СтрокаРеквизита.ОтборХарактеристик	  = ПоХарактеристикам;
		СтрокаРеквизита.ОтборДоступен         = Истина;
		СтрокаРеквизита.ОтборДоступен         = Истина;
		СтрокаРеквизита.ИмяРеквизита          = Строка(РеквизитСвойство.Свойство);
		ТипРеквизита = РеквизитСвойство.Свойство.ТипЗначения;
		СтрокаРеквизита.Свойство = РеквизитСвойство.Свойство;
		
		Если ПоХарактеристикам Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ДополнительныеРеквизиты.Значение КАК ЗначениеОтбора
			|ИЗ
			|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
			|ГДЕ
			|	&РеквизитВладелецХарактеристик = &ВидНоменклатурыДляХарактеристик
			|	И ДополнительныеРеквизиты.Свойство = &Свойство
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЗначениеОтбора";
			
			Если ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры Тогда
				РеквизитВладелецХарактеристик = "ДополнительныеРеквизиты.Ссылка.Владелец";
				ОтборНоменклатурыПоВиду = "ИСТИНА";
			ИначеЕсли ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры Тогда
				РеквизитВладелецХарактеристик = "ДополнительныеРеквизиты.Ссылка.Владелец.ВидНоменклатуры";
				ОтборНоменклатурыПоВиду = "ИСТИНА";
			Иначе
				Возврат;
			КонецЕсли;
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РеквизитВладелецХарактеристик", РеквизитВладелецХарактеристик);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборНоменклатурыПоВиду", ОтборНоменклатурыПоВиду);
			
		Иначе
			  
			ТекстЗапроса = 	
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ДополнительныеРеквизиты.Значение КАК ЗначениеОтбора
			|ИЗ
			|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
			|ГДЕ
			|	ДополнительныеРеквизиты.Ссылка.ВидНоменклатуры = &ВидНоменклатуры
			|	И ДополнительныеРеквизиты.Свойство = &Свойство
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЗначениеОтбора";
			
		КонецЕсли;
	
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Свойство", РеквизитСвойство.Свойство);
		Запрос.УстановитьПараметр("ВидНоменклатуры", Форма.ВидНоменклатуры);
		Запрос.УстановитьПараметр("ВидНоменклатурыДляХарактеристик", ВидНоменклатурыДляХарактеристик);
		
		// На большой базе запрос в цикле работает быстрее, чем один запрос с группировкам.
		// При этом быстрее, как если группировать по Свойство-Значение, так и если объединять запросы
		// с группировками по каждому свойству в отдельности.
		ВыборкаЗначений = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаЗначений.Количество() = 0 Тогда
			ДеревоОтборов.Строки.Удалить(СтрокаРеквизита);
			СтрокаРеквизита = Неопределено;
			
		Иначе
			
			ОтборУстановлен = Ложь;
			
			Пока ВыборкаЗначений.Следующий() Цикл
				
				Если (ВыборкаЗначений.Количество() = 1 
					И НЕ ЗначениеЗаполнено(ВыборкаЗначений.ЗначениеОтбора)) Тогда
					ДеревоОтборов.Строки.Удалить(СтрокаРеквизита);
					СтрокаРеквизита = Неопределено;
					Продолжить;
				КонецЕсли;
				
				СтрокаЗначения = СтрокаРеквизита.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗначения, СтрокаРеквизита);
				
				СтрокаЗначения.ЗначениеОтбора = ВыборкаЗначений.ЗначениеОтбора;
				
				// Получение представления построчно для 50 значений работает быстрее, выборка его сразу в запросе,
				// формирующем ВыборкаЗначений, т.к. там есть группировка
				// Так же это работает быстрее, чем запрос представления (функция ПРЕДСТАВЛЕНИЕ языка запросов),
				// сделанный сразу для 50 значений.
				СтрокаЗначения.Представление  = Строка(ВыборкаЗначений.ЗначениеОтбора);
				СтрокаЗначения.ОтборДоступен  = Истина;
				
				Отбор = Новый Структура();
				Отбор.Вставить("ИмяРеквизита",СтрокаРеквизита.ИмяРеквизита);
				Отбор.Вставить("Представление",СтрокаЗначения.Представление);
				ОтобранныеСтроки = ТаблицаПараметровОтбора.НайтиСтроки(Отбор);
				Если ОтобранныеСтроки.Количество()>0 Тогда
					ОтобранныеСтроки[0].Отбор = Истина;
					СтрокаЗначения.Отбор = Истина;
					ОтборУстановлен = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			Если СтрокаРеквизита <> Неопределено Тогда
				СтрокаРеквизита.Отбор = ОтборУстановлен;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	
	Форма.ТаблицаПараметровОтбора.Загрузить(ТаблицаПараметровОтбора);
	
	Если СтрокаРеквизита <> Неопределено
		И СтрокаРеквизита.Строки.Количество() > 0 Тогда
		СтрокаРеквизита.Строки.Сортировать("Представление");
	КонецЕсли;
	
КонецПроцедуры

#Область УстановкаИУдалениеОтборов
// Устанавливает отбор по родителю текущей строки списка номенклатуры
// в формах подборов товаров.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьТекущуюСтрокуИерархииНоменклатуры(Форма)
	
	ТекущаяСтрока = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма)].ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока, "Родитель");
	
	Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока = Родитель;
	Форма.ТекущаяИерархияНоменклатуры = Родитель; 
	
КонецПроцедуры

// Устанавливает отбор по виду номенклатуры и свойствам вида номенклатуры
// у списка номенклатуры в формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма)
	
	УстановитьОтборПоВидуНоменклатуры(Форма);
	Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам Тогда
		УстановитьОтборПоСвойствамВидаНоменклатуры(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает отбор по виду номенклатуры у списка номенклатуры на формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоВидуНоменклатуры(Форма)
	
	ВидНоменклатуры = Форма.ВидНоменклатуры;
	ЭлементыОтбора = ОбщегоНазначенияРТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура);
	
	// Установить отбор по виду номенклатуры.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементыОтбора,
		"ВидНоменклатуры",
		ВидНоменклатуры,
		ВидСравненияКомпоновкиДанных.Равно, 
		"ОтборПоВидуНоменклатуры",
		Истина);
	
КонецПроцедуры

// Устанавливает отбор по свойствам вида номенклатуры у списка номенклатуры на форме подбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма подбора, форма выбора.
//
Процедура УстановитьОтборПоСвойствамВидаНоменклатуры(Форма)
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	ЭтоФормаВыбораХарактеристик = ПодборТоваровКлиентСервер.ЭтоФормаВыбораХарактеристик(Форма);
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ПараметрыОтбора = Новый Структура("Отбор", Истина);
	
	УстанавливатьОтборСпискаХарактеристик = Ложь;
	
	Если ЭтоФормаВыбораХарактеристик Тогда
		УстанавливатьОтборСпискаХарактеристик = Истина;
		ОтборСпискаХарактеристик = ОбщегоНазначенияРТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.Список);
	Иначе
		ОтборСпискаНоменклатуры = ОбщегоНазначенияРТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура);
	КонецЕсли;
	
	Если ЭтоФормаПодбора И Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
		УстанавливатьОтборСпискаХарактеристик = Истина;
		ОтборСпискаХарактеристик = ОбщегоНазначенияРТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокХарактеристики);
	КонецЕсли;
	
	ИмяСсылки = "Ссылка.[";
	ТаблицаПараметровОтбора = Форма.ТаблицаПараметровОтбора.Выгрузить();
	ТаблицаПараметровОтбора = ТаблицаПараметровОтбора.Скопировать(ПараметрыОтбора);
	МассивСвойств = Новый Массив;
	Пока ТаблицаПараметровОтбора.Количество() <> 0 Цикл
		
		СтрокаДереваОтборов = ТаблицаПараметровОтбора[0];
		ИмяРеквизита = СтрокаДереваОтборов.ИмяРеквизита;
		
		ПараметрыОтбора_Свойство = СтрокаДереваОтборов.Свойство;
		МассивСвойств.Добавить(ПараметрыОтбора_Свойство);
		Если СтрокаДереваОтборов.ФиксированноеЗначение Тогда
			
			// Сформировать имя элемента отбора.
			ИмяЭлементаОтбора = СтрокаДереваОтборов.ИмяРеквизита;
			Если СтрокаДереваОтборов.ЭтоДопРеквизит Тогда
				ИмяЭлементаОтбора = ИмяСсылки + СтрокаДереваОтборов.ИмяРеквизита + "]";
			КонецЕсли;
			
			// В зависимости от типа установить значение элемента отбора.
			Если ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Булево") Тогда
				
				Если Не СтрокаДереваОтборов.ОтборХарактеристик Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаНоменклатуры, ИмяЭлементаОтбора, Истина, 
						ВидСравненияКомпоновкиДанных.Равно,,Истина);
				ИначеЕсли УстанавливатьОтборСпискаХарактеристик Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаХарактеристик, ИмяЭлементаОтбора, Истина, 
						ВидСравненияКомпоновкиДанных.Равно,,Истина);
				КонецЕсли; 
				
			ИначеЕсли ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Дата") 
				Или ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Число") Тогда
				
				Если ЗначениеЗаполнено(СтрокаДереваОтборов.ИнтервалОт) Тогда
					
					Если Не СтрокаДереваОтборов.ОтборХарактеристик Тогда
						ДобавитьЭлементОтбора(ОтборСпискаНоменклатуры, ИмяЭлементаОтбора, СтрокаДереваОтборов.ИнтервалОт, 
							ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
					ИначеЕсли УстанавливатьОтборСпискаХарактеристик Тогда
						ДобавитьЭлементОтбора(ОтборСпискаХарактеристик, ИмяЭлементаОтбора, СтрокаДереваОтборов.ИнтервалОт, 
							ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДереваОтборов.ИнтервалДо) Тогда
					
					Если Не СтрокаДереваОтборов.ОтборХарактеристик Тогда
						ДобавитьЭлементОтбора(ОтборСпискаНоменклатуры, ИмяЭлементаОтбора, СтрокаДереваОтборов.ИнтервалДо, 
							ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
					ИначеЕсли УстанавливатьОтборСпискаХарактеристик Тогда
						ДобавитьЭлементОтбора(ОтборСпискаХарактеристик, ИмяЭлементаОтбора, СтрокаДереваОтборов.ИнтервалДо, 
							ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Строка") Тогда
				
				Если Не СтрокаДереваОтборов.ОтборХарактеристик Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаНоменклатуры, ИмяЭлементаОтбора, 
						СтрокаДереваОтборов.ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,,Истина);
				ИначеЕсли УстанавливатьОтборСпискаХарактеристик Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаХарактеристик, ИмяЭлементаОтбора, 
						СтрокаДереваОтборов.ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,,Истина);
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("СписокЗначений") Тогда
				
				Если Не СтрокаДереваОтборов.ОтборХарактеристик Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаНоменклатуры, ИмяЭлементаОтбора, 
						СтрокаДереваОтборов.ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
				ИначеЕсли УстанавливатьОтборСпискаХарактеристик Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаХарактеристик, ИмяЭлементаОтбора, 
						СтрокаДереваОтборов.ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
				КонецЕсли;
				
			КонецЕсли;
			
			ТаблицаПараметровОтбора.Удалить(СтрокаДереваОтборов);
			
		Иначе
			
			ПараметрыОтбора = Новый Структура("ИмяРеквизита", СтрокаДереваОтборов.ИмяРеквизита);
			
			МассивСтрок = ТаблицаПараметровОтбора.НайтиСтроки(ПараметрыОтбора);
			
			СтрокаОтбора = МассивСтрок[0];
			ОтборХарактеристик = СтрокаОтбора.ОтборХарактеристик;
			// Сформировать имя элемента отбора.
			ИмяЭлементаОтбора = СтрокаОтбора.ИмяРеквизита;
			ИмяЭлементаОтбора = ИмяСсылки + СтрокаОтбора.ИмяРеквизита + "]";
			
			ЗначенияОтборов = Новый Массив;
			Для Каждого Строка Из МассивСтрок Цикл
				ЗначенияОтборов.Добавить(Строка.ЗначениеОтбора);
				ТаблицаПараметровОтбора.Удалить(Строка);
			КонецЦикла;
			
			Если Не ОтборХарактеристик Тогда 
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаНоменклатуры, ИмяЭлементаОтбора, ЗначенияОтборов, ВидСравненияКомпоновкиДанных.ВСписке, , ЗначениеЗаполнено(ЗначенияОтборов));
			ИначеЕсли УстанавливатьОтборСпискаХарактеристик Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаХарактеристик, ИмяЭлементаОтбора, ЗначенияОтборов, ВидСравненияКомпоновкиДанных.ВСписке, , ЗначениеЗаполнено(ЗначенияОтборов),,ИмяРеквизита);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Отключает установленные отборы по виду номенклатуры и по свойствам выбранного
// вида номенклатуры на форме подбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма подбора, форма выбора.
//
Процедура УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма)
	
	УдалитьОтборПоВидуНоменклатуры(Форма);
	УдалитьОтборПоСвойствамВидаНоменклатуры(Форма);
	
КонецПроцедуры

// Удаляет отбор по виду номенклатуры у списка номенклатуры на формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоВидуНоменклатуры(Форма)
	
	ВидНоменклатуры = Форма.ВидНоменклатуры;
	ЭлементыОтбора = ОбщегоНазначенияРТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементыОтбора,
		"ВидНоменклатуры",
		ВидНоменклатуры,
		ВидСравненияКомпоновкиДанных.Равно, 
		"ОтборПоВидуНоменклатуры",
		Ложь);
	
КонецПроцедуры

// Удаляет установленные отборы по свойствам вида номенклатуры.
// Точнее удаляются все установленные отборы на списке за исключением тех
// которые не относятся к отборам дерева свойств.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоСвойствамВидаНоменклатуры(Форма)
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	ЭтоФормаВыбораХарактеристик = ПодборТоваровКлиентСервер.ЭтоФормаВыбораХарактеристик(Форма);
	ЭтоФормаСпискаНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма);
	ЭтоФормаВыбораНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма);
	
	// Некоторые элементы отбора не должны удаляться - они не относятся
	// к отбору по свойствам вида номенклатуры.
	НеУдаляемыеЭлементы = НеУдаляемыеЭлементыОтборов();
	
	// Удалить элементы отбора по свойствам вида номенклатуры.
	Если ЭтоФормаПодбора Или ЭтоФормаСпискаНоменклатуры Или ЭтоФормаВыбораНоменклатуры Тогда
		
		ОтборСпискаНоменклатуры = ОбщегоНазначенияРТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура).Элементы;
		ВГраница = ОтборСпискаНоменклатуры.Количество() - 1;
		
		Для ОбрИндекс = 0 По ВГраница Цикл
			
		ЭлементОтбора = ОтборСпискаНоменклатуры[ВГраница - ОбрИндекс];
			
			Если НеУдаляемыеЭлементы.Найти(ЭлементОтбора.Представление) = Неопределено Тогда
				ОтборСпискаНоменклатуры.Удалить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если (ЭтоФормаПодбора И Форма.ИспользоватьХарактеристикиНоменклатуры) Или ЭтоФормаВыбораХарактеристик Тогда
		
		Если ЭтоФормаВыбораХарактеристик Тогда
			ОтборСпискаХарактеристик = ОбщегоНазначенияРТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.Список).Элементы;
		Иначе
			ОтборСпискаХарактеристик = ОбщегоНазначенияРТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокХарактеристики).Элементы;
		КонецЕсли;
		
		ВГраница = ОтборСпискаХарактеристик.Количество() - 1;
		
		Для ОбрИндекс = 0 По ВГраница Цикл
			
			ЭлементОтбора = ОтборСпискаХарактеристик[ВГраница - ОбрИндекс];
			
			Если НеУдаляемыеЭлементы.Найти(ЭлементОтбора.Представление) = Неопределено Тогда
				ОтборСпискаХарактеристик.Удалить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив имен элементов отбора которые не следует удалять.
//
// Возвращаемое значение:
//
//	Массив.
//		Массив имен отборов которые не следует удалять - они не относятся 
//		к отбору по свойствам вида номенклатуры.
//
Функция НеУдаляемыеЭлементыОтборов()
	
	НеУдаляемыеЭлементы = Новый Массив;
	
	НеУдаляемыеЭлементы.Добавить("ПоискПоПодстроке");
	НеУдаляемыеЭлементы.Добавить("ЦеныНоменклатуры");
	НеУдаляемыеЭлементы.Добавить("ЦенаХарактеристики");
	НеУдаляемыеЭлементы.Добавить("ГруппаТолькоВНаличии");
	НеУдаляемыеЭлементы.Добавить("ОтборПоВидуНоменклатуры");
	НеУдаляемыеЭлементы.Добавить("ОтборПоВладельцуХарактеристик");
	НеУдаляемыеЭлементы.Добавить("ОтборПоТипуНоменклатуры");
	НеУдаляемыеЭлементы.Добавить("ОтборПоУмолчанию");
	НеУдаляемыеЭлементы.Добавить("ОтборОсобенностьУчета");
	НеУдаляемыеЭлементы.Добавить("ОтборКоллекцияНоменклатуры");
	НеУдаляемыеЭлементы.Добавить("ОтборВидАлкогольнойПродукцииМаркируемый");
	
	Возврат НеУдаляемыеЭлементы
	
КонецФункции

#КонецОбласти

// Очищает дерево свойств для отбора по свойствам вида номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура ОчиститьДеревоОтборов(Форма)
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ДеревоОтборов.Строки.Очистить();
	
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
КонецПроцедуры

#КонецОбласти

