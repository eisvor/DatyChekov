////////////////////////////////////////////////////////////////////////////////
// ПроведениеСервер содержит процедуры и функции 
// для обработки проведения документов.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПроцедурыДляПодготовкиИЗаписиДвиженийДокумента

// Инициализирует общие структуры, используемые при проведении документов.
// Вызывается из модуля документов при проведении.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ для проведения.
//  ДополнительныеСвойства - 
//  РежимПроведения
//
Процедура ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, ДополнительныеСвойства, РежимПроведения = Неопределено) Экспорт

	// В структуре "ДополнительныеСвойства" создаются свойства с ключами "ТаблицыДляДвижений", "ДляПроведения".

	// "ТаблицыДляДвижений" - структура, которая будет содержать таблицы значений с данными для выполнения движений.
	ДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);

	// "ДляПроведения" - структура, содержащая свойства и реквизиты документа, необходимые для проведения.
	ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
	
	// Структура, содержащая ключ с именем "МенеджерВременныхТаблиц", в значении которого хранится менеджер временных
	// таблиц.
	// Содержит для каждой временной таблицы ключ (имя временной таблицы) и значение (признак наличия записей во временной
	// таблице).
	ДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц));
	ДополнительныеСвойства.ДляПроведения.Вставить("РежимПроведения",           РежимПроведения);
	ДополнительныеСвойства.ДляПроведения.Вставить("МетаданныеДокумента",       ДокументСсылка.Метаданные());
	ДополнительныеСвойства.ДляПроведения.Вставить("Ссылка",                    ДокументСсылка);
	
	ДополнительныеСвойства.Вставить("ИспользуетсяКомиссионнаяТорговля", ПолучитьФункциональнуюОпцию("ИспользоватьКомиссионнуюТорговлю"));
	ДополнительныеСвойства.Вставить("ИспользуетсяУчетИмпортныхТоваров", ПолучитьФункциональнуюОпцию("ИспользоватьУчетИмпортныхТоваров"));
	
КонецПроцедуры

// Закрывает МВТ, используемый при формировании движений.
//
// Параметры:
//  ДополнительныеСвойства - Структура - дополнительные свойства выполнения процедуры.
//
Процедура ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства) Экспорт

	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();

КонецПроцедуры

// Формирует массив имен регистров, по которым документ имеет движения.
// Вызывается при подготовке записей к регистрации движений.
//
// Параметры:
//  Регистратор - ДокументСсылка - документ регистратор.
//  Движения - Движения - движения документа.
//  МассивИсключаемыхРегистров - Массив - массив регистров по которым движения не записываются.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица используемых регистров.
//
Функция МассивИспользуемыхРегистров(Регистратор, Движения, МассивИсключаемыхРегистров = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);

	Результат = Новый Массив;
	МаксимумТаблицВЗапросе = 256;

	СчетчикТаблиц   = 0;
	СчетчикДвижений = 0;

	ВсегоДвижений = Движения.Количество();
	ТекстЗапроса  = "";
	Для Каждого Движение Из Движения Цикл

		СчетчикДвижений = СчетчикДвижений + 1;

		ПропуститьРегистр = МассивИсключаемыхРегистров <> Неопределено
							И МассивИсключаемыхРегистров.Найти(Движение.Имя) <> Неопределено;

		Если Не ПропуститьРегистр Тогда

			Если СчетчикТаблиц > 0 Тогда

				ТекстЗапроса = ТекстЗапроса 
				+ "
				|ОБЪЕДИНИТЬ ВСЕ
				|";

			КонецЕсли;

			СчетчикТаблиц = СчетчикТаблиц + 1;

			ТекстЗапроса = ТекстЗапроса 
			+ "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|""" + Движение.Имя + """ КАК ИмяРегистра
			|
			|ИЗ " + Движение.ПолноеИмя() + "
			|
			|ГДЕ Регистратор = &Регистратор
			|";

		КонецЕсли;

		Если СчетчикТаблиц = МаксимумТаблицВЗапросе Или СчетчикДвижений = ВсегоДвижений Тогда

			Запрос.Текст  = ТекстЗапроса;
			ТекстЗапроса  = "";
			СчетчикТаблиц = 0;

			Если Результат.Количество() = 0 Тогда

				Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");

			Иначе

				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Результат.Добавить(Выборка.ИмяРегистра);
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Выполняет подготовку наборов записей документа к записи движений.
// 1. Очищает наборы записей от "старых записей" (ситуация возможна только в толстом клиенте).
// 2. Взводит флаг записи у наборов, по которым документ имеет движения.
// Вызывается из модуля документов при проведении.
//
// Параметы:
//  Объект - ДокументОбъект - документ для которого необходимо подготовить движения.
//
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект) Экспорт

	Для Каждого НаборЗаписей Из Объект.Движения Цикл

		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;

	КонецЦикла;

	Если Не Объект.ДополнительныеСвойства.ЭтоНовый Тогда

		// Регистры, движения по которым формируются не из модуля менеджера документа.
		ИсключаемыеРегистры = Новый Массив;
		
		МассивИменРегистров = МассивИспользуемыхРегистров(Объект.Ссылка,
				Объект.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Движения,
				ИсключаемыеРегистры);

		Для Каждого ИмяРегистра Из МассивИменРегистров Цикл
			Объект.Движения[ИмяРегистра].Записывать = Истина;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Записывает движения документа. Дополнительно происходит копирование параметров
// в модули наборов записей для выполнения регистрации изменений в движениях.
// Вызывается из модуля документов при проведении.
//
// Параметы:
//  Объект - ДокументОбъект - документ для которого необходимо записать наборы записей.
//
Процедура ЗаписатьНаборыЗаписей(Знач Объект) Экспорт
	Перем РегистрыДляКонтроля;

	
	// Регистры, для которых будут рассчитаны таблицы изменений движений.
	Если Объект.ДополнительныеСвойства.ДляПроведения.Свойство("РегистрыДляКонтроля", РегистрыДляКонтроля) Тогда
		Для Каждого НаборЗаписей Из РегистрыДляКонтроля Цикл
			Если НаборЗаписей.Записывать Тогда

				// Установка флага регистрации изменений в наборе записей.
				НаборЗаписей.ДополнительныеСвойства.Вставить("РассчитыватьИзменения", Истина);
				НаборЗаписей.ДополнительныеСвойства.Вставить("ЭтоНовый", Объект.ДополнительныеСвойства.ЭтоНовый);

				// Структура для передачи данных в модули наборов записей.
				НаборЗаписей.ДополнительныеСвойства.Вставить("ДляПроведения", 
						Новый Структура("СтруктураВременныеТаблицы", Объект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы));

			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	
	Объект.Движения.Записать();

КонецПроцедуры

// Возвращает расчет наличной выручки по чеку ККМ.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекККМ - чек по которому необходимо вернуть наличную выручку.
//
// Возращаемое значение:
//  Число - сумма документа.
//
Функция ВыручкаНаличными(ДокументСсылка) Экспорт
	
	ЗапросАванс = Новый Запрос;
	ЗапросАванс.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|ГДЕ
	|	ЧекККМТовары.Ссылка = &Ссылка";
	
	ЗапросАванс.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатАванс = ЗапросАванс.Выполнить();
	ЭтоАванс = РезультатАванс.Пустой();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|				ТОГДА ЧекККМОплата.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНаличных,
	|	СУММА(ЧекККМОплата.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	
	СуммаНаличных    = 0;
	СуммаОбщая       = 0;
	СуммаБезналичных = 0;
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		СуммаНаличных = Выборка.СуммаНаличных;
		Если НЕ ЗначениеЗаполнено(СуммаНаличных) Тогда
			СуммаНаличных = 0;
		КонецЕсли;
		СуммаОбщая = Выборка.Сумма;
		
		Если НЕ ЗначениеЗаполнено(СуммаОбщая) Тогда
			СуммаОбщая = 0;
		КонецЕсли;
		СуммаБезналичных = СуммаОбщая - СуммаНаличных;
		
	КонецЕсли;
	
	Если НЕ ЭтоАванс Тогда
		СуммаНаличных = Мин(ДокументСсылка.СуммаДокумента - СуммаБезналичных, СуммаНаличных);
	КонецЕсли;
	
	Возврат СуммаНаличных;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыКонтроляДвиженийДокументовПоРегистрам

// Ввыполняет контроль результатов проведения.
// Вызывается из модуля документов при проведении.
//
// Параметы:
//  Объект - ДокументОбъект - документ для которого необходимо выполнить контроль результатов проведения.
//  Отказ - Булево - признак отказа от выполнения операции 
//
Процедура ВыполнитьКонтрольРезультатовПроведения(Объект, Отказ) Экспорт

	Если Объект.ДополнительныеСвойства.ДляПроведения.РегистрыДляКонтроля.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ДанныеТаблиц    = Объект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	ПакетЗапросов   = Новый Запрос;
	МассивКонтролей = Новый Массив;
	ТекстЗапроса    = "";

	// Контроль отрицательных остатков по товарам на складах.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияТоварыНаСкладахИзменение") Тогда
		
		ИспользоватьРезервированиеПоЗаказамПокупателей = ПолучитьФункциональнуюОпцию("ИспользоватьРезервированиеПоЗаказамПокупателей");
		
		МассивКонтролей.Добавить(Врег("ТоварыНаСкладах"));
		Если ИспользоватьРезервированиеПоЗаказамПокупателей Тогда
			ТекстЗапросаОстатков = 
			"ВЫБРАТЬ
			|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
			|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
			|	ТоварыНаСкладахОстатки.Склад КАК Склад,
			|	ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток,
			|	ТоварыНаСкладахОстатки.РезервОстаток КАК РезервОстаток
			|ПОМЕСТИТЬ ВТОстаткиТоварыНаСкладах
			|ИЗ
			|	РегистрНакопления.ТоварыНаСкладах.Остатки(
			|			,
			|			(Номенклатура, Характеристика, Склад) В
			|				(ВЫБРАТЬ
			|					Таблица.Номенклатура,
			|					Таблица.Характеристика,
			|					Таблица.Склад
			|				ИЗ
			|					ДвиженияТоварыНаСкладахИзменение КАК Таблица)) КАК ТоварыНаСкладахОстатки";
			ЗапросОстатков = Новый Запрос(ТекстЗапросаОстатков);
			ЗапросОстатков.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
			ЗапросОстатков.Выполнить();
			
			ТекстЗапроса = ТекстЗапроса 
			+ "ВЫБРАТЬ
			|	ВТОстаткиТоварыНаСкладах.Номенклатура КАК Номенклатура,
			|	ВТОстаткиТоварыНаСкладах.Характеристика КАК Характеристика,
			|	ВТОстаткиТоварыНаСкладах.Склад КАК Склад,
			|	ВТОстаткиТоварыНаСкладах.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ВТОстаткиТоварыНаСкладах.КоличествоОстаток КАК КоличествоОстаток,
			|	ВТОстаткиТоварыНаСкладах.РезервОстаток КАК РезервОстаток,
			|	ВТОстаткиТоварыНаСкладах.КоличествоОстаток - ВТОстаткиТоварыНаСкладах.РезервОстаток КАК Количество
			|ИЗ
			|	ВТОстаткиТоварыНаСкладах КАК ВТОстаткиТоварыНаСкладах
			|ГДЕ
			|	ВТОстаткиТоварыНаСкладах.КоличествоОстаток - ВТОстаткиТоварыНаСкладах.РезервОстаток < 0
			|	И ВТОстаткиТоварыНаСкладах.КоличествоОстаток >= 0
			|	И ВТОстаткиТоварыНаСкладах.РезервОстаток >= 0
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВТОстаткиТоварыНаСкладах.Номенклатура,
			|	ВТОстаткиТоварыНаСкладах.Характеристика,
			|	ВТОстаткиТоварыНаСкладах.Склад,
			|	ВТОстаткиТоварыНаСкладах.ЕдиницаИзмерения,
			|	ВТОстаткиТоварыНаСкладах.КоличествоОстаток,
			|	ВТОстаткиТоварыНаСкладах.РезервОстаток,
			|	ВТОстаткиТоварыНаСкладах.КоличествоОстаток
			|ИЗ
			|	ВТОстаткиТоварыНаСкладах КАК ВТОстаткиТоварыНаСкладах
			|ГДЕ
			|	ВТОстаткиТоварыНаСкладах.КоличествоОстаток < 0
			|	И ВТОстаткиТоварыНаСкладах.РезервОстаток >= 0
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВТОстаткиТоварыНаСкладах.Номенклатура,
			|	ВТОстаткиТоварыНаСкладах.Характеристика,
			|	ВТОстаткиТоварыНаСкладах.Склад,
			|	ВТОстаткиТоварыНаСкладах.ЕдиницаИзмерения,
			|	ВТОстаткиТоварыНаСкладах.КоличествоОстаток,
			|	ВТОстаткиТоварыНаСкладах.РезервОстаток,
			|	ВТОстаткиТоварыНаСкладах.РезервОстаток
			|ИЗ
			|	ВТОстаткиТоварыНаСкладах КАК ВТОстаткиТоварыНаСкладах
			|ГДЕ
			|	ВТОстаткиТоварыНаСкладах.КоличествоОстаток >= 0
			|	И ВТОстаткиТоварыНаСкладах.РезервОстаток < 0
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВТОстаткиТоварыНаСкладах.Номенклатура,
			|	ВТОстаткиТоварыНаСкладах.Характеристика,
			|	ВТОстаткиТоварыНаСкладах.Склад,
			|	ВТОстаткиТоварыНаСкладах.ЕдиницаИзмерения,
			|	ВТОстаткиТоварыНаСкладах.КоличествоОстаток,
			|	ВТОстаткиТоварыНаСкладах.РезервОстаток,
			|	ВТОстаткиТоварыНаСкладах.КоличествоОстаток
			|ИЗ
			|	ВТОстаткиТоварыНаСкладах КАК ВТОстаткиТоварыНаСкладах
			|ГДЕ
			|	ВТОстаткиТоварыНаСкладах.КоличествоОстаток < 0
			|	И ВТОстаткиТоварыНаСкладах.РезервОстаток < 0;
			|///////////////////////////////////////////////////////////////////
			|";
		Иначе
			ТекстЗапроса = ТекстЗапроса 
			+ "ВЫБРАТЬ
			|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
			|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
			|	ТоварыНаСкладахОстатки.Склад КАК Склад,
			|	ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ТоварыНаСкладахОстатки.КоличествоОстаток,
			|	0,
			|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Количество
			|ИЗ
			|	РегистрНакопления.ТоварыНаСкладах.Остатки(
			|			,
			|			(Номенклатура, Характеристика, Склад) В
			|				(ВЫБРАТЬ
			|					Таблица.Номенклатура,
			|					Таблица.Характеристика,
			|					Таблица.Склад
			|				ИЗ
			|					ДвиженияТоварыНаСкладахИзменение КАК Таблица)) КАК ТоварыНаСкладахОстатки
			|ГДЕ
			|	ТоварыНаСкладахОстатки.КоличествоОстаток < 0;
			|///////////////////////////////////////////////////////////////////
			|";
		КонецЕсли;

		
	КонецЕсли;
		
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияДвиженияСерийныхНомеровИзменение") Тогда 
		
		МассивКонтролей.Добавить(Врег("ДвиженияСерийныхНомеров"));
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.СерийныйНомер,
		|	ВложенныйЗапрос.Склад,
		|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВложенныйЗапрос.Количество
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|		ВложенныйЗапрос.СерийныйНомер КАК СерийныйНомер,
		|		ВложенныйЗапрос.Склад КАК Склад,
		|		ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		СУММА(ВложенныйЗапрос.Количество) КАК Количество
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ДвиженияСерийныхНомеров.Номенклатура КАК Номенклатура,
		|			ДвиженияСерийныхНомеров.СерийныйНомер КАК СерийныйНомер,
		|			ДвиженияСерийныхНомеров.Получатель КАК Склад,
		|			ДвиженияСерийныхНомеров.Количество КАК Количество
		|		ИЗ
		|			РегистрСведений.ДвиженияСерийныхНомеров КАК ДвиженияСерийныхНомеров
		|		ГДЕ
		|			(ДвиженияСерийныхНомеров.Номенклатура, ДвиженияСерийныхНомеров.СерийныйНомер, ДвиженияСерийныхНомеров.Получатель) В
		|					(ВЫБРАТЬ
		|						Таблица.Номенклатура,
		|						Таблица.СерийныйНомер,
		|						Таблица.Склад
		|					ИЗ
		|						ДвиженияДвиженияСерийныхНомеровИзменение КАК Таблица)
		|			И (НЕ ДвиженияСерийныхНомеров.АналитикаХозяйственнойОперации = ЗНАЧЕНИЕ(Справочник.АналитикаХозяйственныхОпераций.ПогашениеПодарочныхСертификатов))
		|			И (НЕ ДвиженияСерийныхНомеров.Получатель = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ДвиженияСерийныхНомеров.Номенклатура,
		|			ДвиженияСерийныхНомеров.СерийныйНомер,
		|			ДвиженияСерийныхНомеров.Отправитель,
		|			-ДвиженияСерийныхНомеров.Количество
		|		ИЗ
		|			РегистрСведений.ДвиженияСерийныхНомеров КАК ДвиженияСерийныхНомеров
		|		ГДЕ
		|			(ДвиженияСерийныхНомеров.Номенклатура, ДвиженияСерийныхНомеров.СерийныйНомер, ДвиженияСерийныхНомеров.Отправитель) В
		|					(ВЫБРАТЬ
		|						Таблица.Номенклатура,
		|						Таблица.СерийныйНомер,
		|						Таблица.Склад
		|					ИЗ
		|						ДвиженияДвиженияСерийныхНомеровИзменение КАК Таблица)
		|			И (НЕ ДвиженияСерийныхНомеров.АналитикаХозяйственнойОперации = ЗНАЧЕНИЕ(Справочник.АналитикаХозяйственныхОпераций.ПогашениеПодарочныхСертификатов))
		|			И (НЕ ДвиженияСерийныхНомеров.Отправитель = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))) КАК ВложенныйЗапрос
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВложенныйЗапрос.Склад,
		|		ВложенныйЗапрос.СерийныйНомер,
		|		ВложенныйЗапрос.Номенклатура) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.Количество < 0;
		|///////////////////////////////////////////////////////////////////
		|";

		
	КонецЕсли;
	
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияПодарочныеСертификатыИзменение") Тогда 
		
		МассивКонтролей.Добавить(Врег("ПодарочныеСертификаты"));
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ПодарочныеСертификатыОстатки.ПодарочныйСертификат КАК ПодарочныйСертификат,
		|	ПодарочныеСертификатыОстатки.НомерСертификата КАК НомерСертификата,
		|	ЕСТЬNULL(ПодарочныеСертификатыОстатки.СуммаОстаток, 0) КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.ПодарочныеСертификаты.Остатки(
		|			,
		|			(ПодарочныйСертификат, НомерСертификата) В
		|				(ВЫБРАТЬ
		|					ДвиженияПодарочныеСертификатыИзменение.ПодарочныйСертификат,
		|					ДвиженияПодарочныеСертификатыИзменение.НомерСертификата
		|				ИЗ
		|					ДвиженияПодарочныеСертификатыИзменение)) КАК ПодарочныеСертификатыОстатки
		|ГДЕ
		|	ПодарочныеСертификатыОстатки.СуммаОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;
	
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияРасчетыСПоставщикамиИзменение") Тогда
		
		МассивКонтролей.Добавить(Врег("РасчетыСПоставщиками"));
		
		СписокДокументовВзаимозачета = Объект.ЭтапыОплат.ВыгрузитьКолонку("ДокументВзаимозачета");
		
		Индекс = СписокДокументовВзаимозачета.Количество() - 1;
		
		Пока Индекс >= 0 Цикл
			ДокументВзаимозачета = СписокДокументовВзаимозачета[Индекс];
			Если НЕ ЗначениеЗаполнено(ДокументВзаимозачета) Тогда
				СписокДокументовВзаимозачета.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	РасчетыСПоставщикамиОстатки.ДокументРасчета КАК ДокументВзаимозачета,
		|	-РасчетыСПоставщикамиОстатки.СуммаОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(, ДокументРасчета В (&СписокДокументовВзаимозачета)) КАК РасчетыСПоставщикамиОстатки
		|ГДЕ
		|	РасчетыСПоставщикамиОстатки.СуммаОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";

		
		ПакетЗапросов.УстановитьПараметр("СписокДокументовВзаимозачета", СписокДокументовВзаимозачета);
		
	КонецЕсли;
	
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияДенежныеСредстваКВыплатеИзменение") Тогда
		
		МассивКонтролей.Добавить(Врег("ДенежныеСредстваКВыплате"));
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДенежныеСредстваКВыплатеОстатки.РаспоряжениеНаРасходованиеДенежныхСредств КАК РаспоряжениеНаРасходованиеДенежныхСредств,
		|	ДенежныеСредстваКВыплатеОстатки.СтатьяДвиженияДенежныхСредств             КАК СтатьяДвиженияДенежныхСредств,
		|	ДенежныеСредстваКВыплатеОстатки.ДокументРасчета                           КАК ДокументРасчета,
		|	ДенежныеСредстваКВыплатеОстатки.СуммаОстаток                              КАК Сумма
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(
		|			,
		|			(РаспоряжениеНаРасходованиеДенежныхСредств, СтатьяДвиженияДенежныхСредств, ДокументРасчета) В
		|				(ВЫБРАТЬ
		|					Таблица.РаспоряжениеНаРасходованиеДенежныхСредств,
		|					Таблица.СтатьяДвиженияДенежныхСредств,
		|					Таблица.ДокументРасчета
		|				ИЗ
		|					ДвиженияДенежныеСредстваКВыплатеИзменение КАК Таблица)) КАК ДенежныеСредстваКВыплатеОстатки
		|ГДЕ
		|	ДенежныеСредстваКВыплатеОстатки.СуммаОстаток > 0;
		|///////////////////////////////////////////////////////////////////
		|";
		
		
	КонецЕсли;
	
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц, "ДвиженияДенежныеСредстваНаличныеИзменение") Тогда
		
		МассивКонтролей.Добавить(Врег("ДенежныеСредстваНаличные"));
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		|	ДенежныеСредстваНаличныеОстатки.Организация КАК Организация,
		|	ДенежныеСредстваНаличныеОстатки.Магазин КАК Магазин,
		|	ДенежныеСредстваНаличныеОстатки.Касса КАК Касса,
		|	ДенежныеСредстваНаличныеОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ДенежныеСредстваНаличныеОстатки.СуммаОстаток КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваНаличные.Остатки(
		|			,
		|			(Организация, Магазин, Касса, ДоговорКонтрагента) В
		|				(ВЫБРАТЬ
		|					Таблица.Организация,
		|					Таблица.Магазин,
		|					Таблица.Касса,
		|					Таблица.ДоговорКонтрагента
		|				ИЗ
		|					ДвиженияДенежныеСредстваНаличныеИзменение КАК Таблица)) КАК ДенежныеСредстваНаличныеОстатки
		|ГДЕ
		|	ДенежныеСредстваНаличныеОстатки.СуммаОстаток < 0
		|;
		|///////////////////////////////////////////////////////////////////
		|";
		
		
	КонецЕсли;
	
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц, "ДвиженияДенежныеСредстваБезналичныеИзменение") Тогда
		
		МассивКонтролей.Добавить(Врег("ДенежныеСредстваБезналичные"));
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		|	ДенежныеСредстваБезналичныеОстатки.Организация КАК Организация,
		|	ДенежныеСредстваБезналичныеОстатки.СуммаОстаток КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваБезналичные.Остатки(
		|			,
		|			(Организация, БанковскийСчет) В
		|				(ВЫБРАТЬ
		|					Таблица.Организация,
		|					Таблица.БанковскийСчет
		|				ИЗ
		|					ДвиженияДенежныеСредстваБезналичныеИзменение КАК Таблица)) КАК ДенежныеСредстваБезналичныеОстатки
		|ГДЕ
		|	ДенежныеСредстваБезналичныеОстатки.СуммаОстаток < 0";
		
		
	КонецЕсли;
	
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц, "ДвиженияДенежныеСредстваККМИзменение") Тогда
		
		МассивКонтролей.Добавить(Врег("ДенежныеСредстваККМ"));
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		|	ДенежныеСредстваККМОстатки.КассаККМ КАК КассаККМ,
		|	ДенежныеСредстваККМОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ДенежныеСредстваККМОстатки.СуммаОстаток КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваККМ.Остатки(
		|			,
		|			(КассаККМ, ДоговорКонтрагента) В
		|				(ВЫБРАТЬ
		|					Таблица.КассаККМ,
		|					Таблица.ДоговорКонтрагента
		|				ИЗ
		|					ДвиженияДенежныеСредстваККМИзменение КАК Таблица)) КАК ДенежныеСредстваККМОстатки
		|ГДЕ
		|	ДенежныеСредстваККМОстатки.СуммаОстаток < 0
		|;
		|///////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;
	
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияЗаказыПокупателейИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ЗаказыПокупателей"));
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
		|	ЗаказыПокупателейОстатки.Характеристика КАК Характеристика,
		|	ЗаказыПокупателейОстатки.Магазин КАК Магазин,
		|	ЗаказыПокупателейОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЗаказыПокупателейОстатки.Заказ КАК Заказ,
		|	ЗаказыПокупателейОстатки.КодСтроки КАК КодСтроки,
		|	ЗаказыПокупателейОстатки.ЗаказаноОстаток КАК Заказано
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(
		|			,
		|			(Номенклатура, Характеристика, Магазин, Заказ, КодСтроки) В
		|				(ВЫБРАТЬ
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.Магазин,
		|					Таблица.Заказ,
		|					Таблица.КодСтроки
		|				ИЗ
		|					ДвиженияЗаказыПокупателейИзменение КАК Таблица)) КАК ЗаказыПокупателейОстатки
		|ГДЕ
		|	ЗаказыПокупателейОстатки.ЗаказаноОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;
	
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияТоварыОрганизацийИзменение") Тогда
		
		МассивКонтролей.Добавить(Врег("ТоварыОрганизаций"));
		ТекстЗапроса = ТекстЗапроса 
		+ "ВЫБРАТЬ
		|	ТоварыОрганизацийОстатки.Номенклатура                  КАК Номенклатура,
		|	ТоварыОрганизацийОстатки.Характеристика                КАК Характеристика,
		|	ТоварыОрганизацийОстатки.Склад                         КАК Склад,
		|	ТоварыОрганизацийОстатки.Организация                   КАК Организация,
		|	ТоварыОрганизацийОстатки.Поставщик                     КАК Поставщик,
		|	ТоварыОрганизацийОстатки.Договор                       КАК Договор,
		|	ТоварыОрганизацийОстатки.НомерГТД                      КАК НомерГТД,
		|	ТоварыОрганизацийОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТоварыОрганизацийОстатки.КоличествоОстаток             КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций.Остатки(
		|			,
		|			(Номенклатура, Характеристика, Склад, Организация, Поставщик, Договор, НомерГТД) В
		|				(ВЫБРАТЬ
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.Склад,
		|					Таблица.Организация,
		|					Таблица.Поставщик,
		|					Таблица.Договор,
		|					Таблица.НомерГТД
		|				ИЗ
		|					ДвиженияТоварыОрганизацийИзменение КАК Таблица
		|				ГДЕ
		|					Таблица.Договор <> &ПустойДоговор
		|					ИЛИ Таблица.НомерГТД <> &ПустойГТД
		|					ИЛИ ЕСТЬNULL(Таблица.Номенклатура.КодТНВЭД.ПрослеживаемыйТовар, ЛОЖЬ))) КАК ТоварыОрганизацийОстатки
		|ГДЕ
		|	ТоварыОрганизацийОстатки.КоличествоОстаток < 0
		|;
		|///////////////////////////////////////////////////////////////////
		|";
		ПакетЗапросов.УстановитьПараметр("ПустойДоговор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		ПакетЗапросов.УстановитьПараметр("ПустойГТД", Справочники.НомераГТД.ПустаяСсылка());
		
	КонецЕсли;
	
	Если МассивКонтролей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ПакетЗапросов.Текст = ТекстЗапроса;
	ПакетЗапросов.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
	МассивРезультатов = ПакетЗапросов.ВыполнитьПакет();
	Итератор = -1;
	Для Каждого Результат Из МассивРезультатов Цикл

		Итератор = Итератор + 1;
		Если Результат.Пустой() Тогда
			
			Продолжить;
			
		КонецЕсли;

		ИмяКонтроля = МассивКонтролей[Итератор];

		Если ИмяКонтроля = Врег("ТоварыНаСкладах") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструТоварыНаСкладах(Объект, Отказ, Результат);
			
			ФиксироватьПопыткиПродажПревышающихОстаток(Объект, Объект.Дата, Результат);
			
		ИначеЕсли ИмяКонтроля = Врег("ДвиженияСерийныхНомеров") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструДвиженияСерийныхНомеров(Объект, Отказ, Результат);
			
		ИначеЕсли ИмяКонтроля = Врег("ПодарочныеСертификаты") Тогда
			
			СообщитьОбОшибкахПроведенияПоРегиструПодарочныеСертификаты(Объект, Отказ, Результат);
			
		ИначеЕсли ИмяКонтроля = Врег("РасчетыСПоставщиками") Тогда
		
			СообщитьОбОшибкахПроведенияПоРегиструРасчетыСПоставщиками(Объект, Отказ, Результат);
			
		ИначеЕсли ИмяКонтроля = Врег("ДенежныеСредстваКВыплате") Тогда
		
			СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредстваКВыплате(Объект, Отказ, Результат);
			
		ИначеЕсли ИмяКонтроля = Врег("ДенежныеСредстваНаличные") Тогда
		
			СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредстваНаличные(Объект, Отказ, Результат);
			
		ИначеЕсли ИмяКонтроля = Врег("ДенежныеСредстваБезналичные") Тогда
		
			СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредстваБезналичные(Объект, Отказ, Результат);
			
		ИначеЕсли ИмяКонтроля = Врег("ДенежныеСредстваККМ") Тогда
		
			СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредстваККМ(Объект, Отказ, Результат);
			
		ИначеЕсли ИмяКонтроля = Врег("ЗаказыПокупателей") Тогда
			
			СообщитьОбОшибкахПроведенияПоРегиструЗаказыПокупателей(Объект, Отказ, Результат);
			
		ИначеЕсли ИмяКонтроля = Врег("ТоварыОрганизаций") Тогда
			
			СообщитьОбОшибкахПроведенияПоРегиструТоварыОрганизаций(Объект, Отказ, Результат);
			
		Иначе
			
			ВызватьИсключение НСтр("ru = 'Ошибка контроля проведения.'");
			
		КонецЕсли;
		
	КонецЦикла;

	Если Отказ Тогда

		Если Объект.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			ТекстСообщения = НСтр("ru = 'Проведение не выполнено'");
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Отмена проведения не выполнена'");
			
		КонецЕсли;

		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения + ": " + Строка(Объект), Объект);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедуры

// Вызывается из модулей наборов записей для проверки необходимости
// контроля изменений движений в регистре.
//
// Параметы:
//  ДополнительныеСвойстваНабораЗаписей - Структура - документ для которого необходимо выполнить контроль результатов проведения.
//
// Возвращаемое значение:
//  Булево - признак выполнения расчета изменений.
//
Функция РассчитыватьИзменения(ДополнительныеСвойстваНабораЗаписей) Экспорт
	Перем РассчитыватьИзменения;

	Возврат ДополнительныеСвойстваНабораЗаписей.Свойство("РассчитыватьИзменения", РассчитыватьИзменения)
		И РассчитыватьИзменения;

КонецФункции

// Формирует запрос по временной таблице.
//
// Параметры:
//  СтруктураШапкиДокумента - Структура - Реквизиты документа "Расчет себестоимости выпуска".
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц.
//  ИмяВременнойТаблицы - Строка - Имя временной таблицы.
//
Процедура ПоказатьВременнуюТаблицу(МенеджерВременныхТаблиц,ИмяВременнойТаблицы, Комментарий = "") Экспорт

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	ИмяВременнойТаблицы
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить().ВыбратьСтроку(ИмяВременнойТаблицы + ":" + Комментарий);
	
КонецПроцедуры // ПоказатьВременнуюТаблицу()

// Заполняет таблицу попытки продажи превышающих остатки.
//
// Параметры:
//  Объект - ДокументОбъект - чек в котором была осуществлена попытка продажи.
//  ДатаПродажи - Дата - дата попытки продажи.
//  Результат - ТаблицаЗначений - таблица отрицательных остатков.
//
Процедура ФиксироватьПопыткиПродажПревышающихОстаток(Объект, ДатаПродажи, Результат) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПопыткиПродажПревышающихОстаток") 
		И Объект.ДополнительныеСвойства.ДляПроведения.Свойство("ПопыткиПродажПревышающихОстаток") Тогда
		
		ТаблицаОтрицательныхОстатков = Результат.Выгрузить();
		ТаблицаОтрицательныхОстатков.Колонки.Добавить("ДатаПродажи", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
		
		ТаблицаОтрицательныхОстатков.ЗаполнитьЗначения(НачалоДня(ДатаПродажи),"ДатаПродажи");
		
		Объект.ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПопыткиПродажПревышающихОстаток", ТаблицаОтрицательныхОстатков.Скопировать(,"ДатаПродажи,Склад,Номенклатура,Характеристика"));
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура установки режима проведения.
//
// Параметры:
//  Проведен - Булево - признак проведения документа.
//  РежимЗаписи - РежимЗаписиДокумента - режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - режим проведения документа.
//
Процедура УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения) Экспорт

	Если Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;

КонецПроцедуры

// Добавляет в движения документа данные для регистра ДействиеСкидокНаценок.
//
// Параметры:
//  ДополнительныеСвойства - Структура - структура дополнительных свойств для формирования движений.
//  Движения - Движения - движения документа для отражения в регистре "Расчеты с поставщиками".
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьПлощадьТорговогоПространства(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПлощадьТорговогоПространства;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ПлощадьТорговогоПространства.Записывать = Истина;
	Движения.ПлощадьТорговогоПространства.Загрузить(Таблица);
	
КонецПроцедуры

// Дозаполняет таблицу товаров для регистра по организациям.
//
// Параметры
//  ДокументСсылка - ДокументСсылка - документ основание.
//  ТаблицаТоварыОрганизаций - ТаблицаЗначений - таблица товаров организации.
//  Период - ДатаВремя - дата и время документа из ДокументСсылка.
//
Процедура ЗаполнитьТаблицуДвиженийПриходаРегистраТоварыОрганизаций(ДокументОснованиеСсылка, ТаблицаТоварыОрганизаций, Период) Экспорт
	
	ПриоритетыРеализацииТоваров = Константы.ПриоритетыРеализацииТоваров.Получить();
	ПриоритетКомиссионного = ПриоритетыРеализацииТоваров = Перечисления.ПриоритетыРеализацииТоваров.Комиссионный;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТоварыОрганизаций.Номенклатура КАК Номенклатура,
	|	ТоварыОрганизаций.Характеристика КАК Характеристика,
	|	ТоварыОрганизаций.Склад КАК Склад,
	|	ТоварыОрганизаций.Организация КАК Организация,
	|	ТоварыОрганизаций.Поставщик КАК Поставщик,
	|	ТоварыОрганизаций.Договор КАК Договор,
	|	ТоварыОрганизаций.НомерГТД КАК НомерГТД,
	|	ТоварыОрганизаций.Количество КАК Количество,
	|	ТоварыОрганизаций.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
	|ГДЕ
	|	ТоварыОрганизаций.Регистратор = &Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки УБЫВ";
	
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Регистратор", ДокументОснованиеСсылка);
	Результат = Запрос.Выполнить();
	ТаблицаДвижений = Результат.Выгрузить();
	ИтоговаяТаблица = ТаблицаТоварыОрганизаций.Скопировать();
	ИтоговаяТаблица.Очистить();
	
	ИтоговаяТаблица.Колонки.Добавить("НомерСтрокиДокумента", Новый ОписаниеТипов("Число"));

	Для Каждого СтрокаТаблицы Из ТаблицаТоварыОрганизаций Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура"  , СтрокаТаблицы.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаТаблицы.Характеристика);
		СтруктураПоиска.Вставить("Организация"   , СтрокаТаблицы.Организация);
		СтруктураПоиска.Вставить("Склад"         , СтрокаТаблицы.Склад);
		
		СтрокиДвижений = ТаблицаДвижений.НайтиСтроки(СтруктураПоиска);
		ПодбираемоеКоличество = СтрокаТаблицы.Количество;
		МассивУдаляемыхСтрок = Новый Массив;
		
		СуммаПродажи = СтрокаТаблицы.СуммаПродажи;
		ОстатокСуммыПродажи = СуммаПродажи;
		СтрокаСМаксимальнойСуммой = Неопределено;
		МаксимальнаяСуммаПродажи = 0;
		
		ОбщееКоличество = СтрокаТаблицы.Количество;
		
		Для Каждого СтрокаДвижений Из СтрокиДвижений Цикл
			
			СтрокаИтоговойТаблицы = ИтоговаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаИтоговойТаблицы, СтрокаДвижений);
			Если ПодбираемоеКоличество >= СтрокаДвижений.Количество Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаДвижений);
				ПодбираемоеКоличество = ПодбираемоеКоличество - СтрокаДвижений.Количество;
			Иначе
				СтрокаИтоговойТаблицы.Количество = ПодбираемоеКоличество;
				СтрокаДвижений.Количество = СтрокаДвижений.Количество - СтрокаИтоговойТаблицы.Количество;
				ПодбираемоеКоличество = 0;
			КонецЕсли;
			
			СтрокаИтоговойТаблицы.НомерСтрокиДокумента = СтрокаТаблицы.НомерСтроки;
			Если СуммаПродажи <> 0
				И ОбщееКоличество <> 0
				И СтрокаИтоговойТаблицы.Количество <> ОбщееКоличество Тогда
				
				СтрокаИтоговойТаблицы.СуммаПродажи = СуммаПродажи * СтрокаИтоговойТаблицы.Количество / ОбщееКоличество;
				Если СтрокаИтоговойТаблицы.СуммаПродажи > МаксимальнаяСуммаПродажи Тогда
					МаксимальнаяСуммаПродажи = СтрокаИтоговойТаблицы.СуммаПродажи;
					СтрокаСМаксимальнойСуммой = СтрокаИтоговойТаблицы;
				КонецЕсли;
				ОстатокСуммыПродажи = ОстатокСуммыПродажи - СтрокаИтоговойТаблицы.СуммаПродажи;
			КонецЕсли;
			
			Если ПодбираемоеКоличество <= 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
			ТаблицаДвижений.Удалить(УдаляемаяСтрока);
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаТоварыОрганизаций = ИтоговаяТаблица;
	
КонецПроцедуры

// Дозаполняет таблицу товаров для регистра по организациям, по документам в табличной части.
//
// Параметры
//  ТаблицаТоварыОрганизаций - ТаблицаЗначений - таблица товаров организаций.
//  Период - ДатаВремя - дата и время.
//
Процедура ЗаполнитьТаблицуДвиженийПриходаРегистраТоварыОрганизацийИзТЧ(ТаблицаТоварыОрганизаций, Период) Экспорт
	
	ПриоритетыРеализацииТоваров = Константы.ПриоритетыРеализацииТоваров.Получить();
	ПриоритетКомиссионного = ПриоритетыРеализацииТоваров = Перечисления.ПриоритетыРеализацииТоваров.Комиссионный;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТоварыОрганизаций.Номенклатура КАК Номенклатура,
	|	ТоварыОрганизаций.Характеристика КАК Характеристика,
	|	ТоварыОрганизаций.Склад КАК Склад,
	|	ТоварыОрганизаций.Организация КАК Организация,
	|	ТоварыОрганизаций.Регистратор КАК ДокументПродажи,
	|	ТоварыОрганизаций.Поставщик КАК Поставщик,
	|	ТоварыОрганизаций.Договор КАК Договор,
	|	ТоварыОрганизаций.НомерГТД КАК НомерГТД,
	|	ТоварыОрганизаций.Количество КАК Количество,
	|	ТоварыОрганизаций.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
	|ГДЕ
	|	ТоварыОрганизаций.Регистратор В (&Регистраторы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки УБЫВ";
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Регистраторы", ТаблицаТоварыОрганизаций.ВыгрузитьКолонку("ДокументПродажи"));
	
	Результат = Запрос.Выполнить();
	ТаблицаДвижений = Результат.Выгрузить();
	ИтоговаяТаблица = ТаблицаТоварыОрганизаций.Скопировать();
	ИтоговаяТаблица.Очистить();
	
	ИтоговаяТаблица.Колонки.Добавить("НомерСтрокиДокумента", Новый ОписаниеТипов("Число"));

	Для Каждого СтрокаТаблицы Из ТаблицаТоварыОрганизаций Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура"   , СтрокаТаблицы.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика" , СтрокаТаблицы.Характеристика);
		СтруктураПоиска.Вставить("Организация"    , СтрокаТаблицы.Организация);
		СтруктураПоиска.Вставить("Склад"          , СтрокаТаблицы.Склад);
		СтруктураПоиска.Вставить("ДокументПродажи", СтрокаТаблицы.ДокументПродажи);
		
		СтрокиДвижений = ТаблицаДвижений.НайтиСтроки(СтруктураПоиска);
		ПодбираемоеКоличество = СтрокаТаблицы.Количество;
		МассивУдаляемыхСтрок = Новый Массив;
		
		СуммаПродажи = СтрокаТаблицы.СуммаПродажи;
		ОстатокСуммыПродажи = СуммаПродажи;
		СтрокаСМаксимальнойСуммой = Неопределено;
		МаксимальнаяСуммаПродажи = 0;
		
		ОбщееКоличество = СтрокаТаблицы.Количество;
		
		Если СтрокиДвижений.Количество() > 0 Тогда
			
			Для Каждого СтрокаДвижений Из СтрокиДвижений Цикл
				
				СтрокаИтоговойТаблицы = ИтоговаяТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаИтоговойТаблицы, СтрокаДвижений);
				Если ПодбираемоеКоличество >= СтрокаДвижений.Количество Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаДвижений);
					ПодбираемоеКоличество = ПодбираемоеКоличество - СтрокаДвижений.Количество;
				Иначе
					СтрокаИтоговойТаблицы.Количество = ПодбираемоеКоличество;
					СтрокаДвижений.Количество = СтрокаДвижений.Количество - СтрокаИтоговойТаблицы.Количество;
					ПодбираемоеКоличество = 0;
				КонецЕсли;
				
				СтрокаИтоговойТаблицы.НомерСтрокиДокумента = СтрокаТаблицы.НомерСтроки;
				Если СуммаПродажи <> 0
					И ОбщееКоличество <> 0
					И СтрокаИтоговойТаблицы.Количество <> ОбщееКоличество Тогда
					
					СтрокаИтоговойТаблицы.СуммаПродажи = СуммаПродажи * СтрокаИтоговойТаблицы.Количество / ОбщееКоличество;
					Если СтрокаИтоговойТаблицы.СуммаПродажи > МаксимальнаяСуммаПродажи Тогда
						МаксимальнаяСуммаПродажи = СтрокаИтоговойТаблицы.СуммаПродажи;
						СтрокаСМаксимальнойСуммой = СтрокаИтоговойТаблицы;
					КонецЕсли;
					ОстатокСуммыПродажи = ОстатокСуммыПродажи - СтрокаИтоговойТаблицы.СуммаПродажи;
				КонецЕсли;
				
				Если ПодбираемоеКоличество <= 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
				ТаблицаДвижений.Удалить(УдаляемаяСтрока);
			КонецЦикла;
			
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаТаблицы.ДокументПродажи) Тогда
			СтрокаИтоговойТаблицы = ИтоговаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаИтоговойТаблицы, СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаТоварыОрганизаций = ИтоговаяТаблица;
	
КонецПроцедуры

// Заполняет таблицу товаров для регистра товары у оформлению отчетов.
//
// Параметры
//  ТаблицаТоварыОрганизаций - ТаблицаЗначений - см. регистр "ТоварыОрганизаций".
//  ВидДвиженияПриход - Булево - вид движений.
//
// Возвращаемое значение
//  ТаблицаЗначений - таблица движений регистра товары к оформлению отчетов комитенту.
//
Функция ТаблицаДвиженийРегистраТоварыКОформлениюОтчетовКомитенту(Знач ТаблицаТоварыОрганизаций, ВидДвиженияПриход = Истина) Экспорт
	
	ВозвращаемаяТаблица = ТаблицаТоварыОрганизаций.Скопировать();
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	
	СтрокиТаблицы = ВозвращаемаяТаблица.НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		
		ВозвращаемаяТаблица.Удалить(СтрокаТаблицы)
		
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из ВозвращаемаяТаблица Цикл
		Если СтрокаТаблицы.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
			СтрокаТаблицы.ВидДвижения = ВидДвиженияНакопления.Расход
		Иначе
			СтрокаТаблицы.ВидДвижения = ВидДвиженияНакопления.Приход
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемаяТаблица
КонецФункции

// Перезаполняет таблицу движений товаров организаций.
//
// Параметры
//  ТаблицаТоварыОрганизаций - ТаблицаЗначений - см. регистр "ТоварыОрганизаций".
//  СсылкаДокумента - ДокументСсылка - регистратор см. регистр "ТоварыОрганизаций".
//  Период - ДатаВремя - дата и время перезаполнения.
//  ЕстьДанныеДляОтчетаКомитенту - Булево - признак наличия данных для отчета комитенту.
//  ПриходныеДвиженияОставлятьБезИзменений - Булево - признак изменения приходных движений.
//
Процедура ПерезаполнитьТаблицуДвиженийТоварыОрганизаций(ТаблицаТоварыОрганизаций, ДокументСсылка, Период, ЕстьДанныеДляОтчетаКомитенту = Ложь, ПриходныеДвиженияОставлятьБезИзменений = Ложь) Экспорт
	
	ТаблицаОстатков = ТаблицаОстатковОрганизаций(ТаблицаТоварыОрганизаций, ДокументСсылка, Период);
	
	ИтоговаяТаблица = ТаблицаТоварыОрганизаций.Скопировать();
	ИтоговаяТаблица.Очистить();
	
	Если ИтоговаяТаблица.Колонки.Найти("НомерСтрокиДокумента") = Неопределено Тогда
		ИтоговаяТаблица.Колонки.Добавить("НомерСтрокиДокумента", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	ПустойПоставщик = Справочники.Контрагенты.ПустаяСсылка();
	ПустойДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоварыОрганизаций Цикл
		
		Если СтрокаТаблицы.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
			
			Если ПриходныеДвиженияОставлятьБезИзменений Тогда
				СтрокаИтоговойТаблицы = ИтоговаяТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаИтоговойТаблицы, СтрокаТаблицы);
				СтрокаИтоговойТаблицы.НомерСтрокиДокумента = СтрокаТаблицы.НомерСтроки;
			Иначе
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("НомерСтроки", СтрокаТаблицы.НомерСтроки);
				СтрокиРасхода = ИтоговаяТаблица.НайтиСтроки(СтруктураПоиска);
				Если СтрокиРасхода.Количество() > 0 Тогда
					Для Каждого СтрокаРасхода Из СтрокиРасхода Цикл
						СтрокаИтоговойТаблицы = ИтоговаяТаблица.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаИтоговойТаблицы, СтрокаРасхода);
						СтрокаИтоговойТаблицы.НомерСтрокиДокумента = СтрокаРасхода.НомерСтроки;
						СтрокаИтоговойТаблицы.ВидДвижения = ВидДвиженияНакопления.Приход;
						СтрокаИтоговойТаблицы.Склад = СтрокаТаблицы.Склад;
						Если СтрокаИтоговойТаблицы.Организация <> СтрокаТаблицы.Организация Тогда
							СтрокаИтоговойТаблицы.Организация = СтрокаТаблицы.Организация;
							СтрокаИтоговойТаблицы.Поставщик = ПустойПоставщик;
							СтрокаИтоговойТаблицы.Договор = ПустойДоговор;
						КонецЕсли;
						СтрокаИтоговойТаблицы.ОрганизацияОтгрузки = Справочники.Организации.ПустаяСсылка();
					КонецЦикла;
				Иначе
					СтрокаИтоговойТаблицы = ИтоговаяТаблица.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаИтоговойТаблицы, СтрокаТаблицы);
					СтрокаИтоговойТаблицы.НомерСтрокиДокумента = СтрокаТаблицы.НомерСтроки;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура"  , СтрокаТаблицы.Номенклатура);
			СтруктураПоиска.Вставить("Характеристика", СтрокаТаблицы.Характеристика);
			СтруктураПоиска.Вставить("Организация"   , СтрокаТаблицы.Организация);
			СтруктураПоиска.Вставить("Склад"         , СтрокаТаблицы.Склад);
			
			СтрокиОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);
			ПодбираемоеКоличество = СтрокаТаблицы.Количество;
			МассивУдаляемыхСтрок = Новый Массив;
			
			СуммаПродажи = СтрокаТаблицы.СуммаПродажи;
			ОстатокСуммыПродажи = СуммаПродажи;
			СтрокаСМаксимальнойСуммой = Неопределено;
			СтрокаСМаксимальнойСуммойБезДоговора = Неопределено;
			МаксимальнаяСуммаПродажи = 0;
			МаксимальнаяСуммаПродажиБезДоговора = 0;
			
			ОбщееКоличество = СтрокаТаблицы.Количество;
			Коэффициент		= 0;
			
			Для Каждого СтрокаОстатков Из СтрокиОстатков Цикл
				
				Коэффициент			  = СтрокаОстатков.Коэффициент;
				СтрокаИтоговойТаблицы = ИтоговаяТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаИтоговойТаблицы, СтрокаОстатков);
				Если ПодбираемоеКоличество >= СтрокаОстатков.Количество Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаОстатков);
					ПодбираемоеКоличество = ПодбираемоеКоличество - СтрокаОстатков.Количество;
				Иначе
					СтрокаИтоговойТаблицы.Количество = ПодбираемоеКоличество;
					СтрокаОстатков.Количество = СтрокаОстатков.Количество - СтрокаИтоговойТаблицы.Количество;
					ПодбираемоеКоличество = 0;
				КонецЕсли;
				
				СтрокаИтоговойТаблицы.КоличествоПоРНПТ = СтрокаИтоговойТаблицы.Количество * Коэффициент;
				СтрокаИтоговойТаблицы.НомерСтрокиДокумента = СтрокаТаблицы.НомерСтроки;
				СтрокаИтоговойТаблицы.НомерСтроки = СтрокаТаблицы.НомерСтроки;
					
				Если СуммаПродажи <> 0 И ОбщееКоличество <> 0 Тогда
					Если СтрокаИтоговойТаблицы.Количество = ОбщееКоличество Тогда
						СтрокаИтоговойТаблицы.СуммаПродажи = СуммаПродажи;
					Иначе
						СтрокаИтоговойТаблицы.СуммаПродажи = СуммаПродажи * СтрокаИтоговойТаблицы.Количество / ОбщееКоличество;
					КонецЕсли;
					
					Если СтрокаИтоговойТаблицы.СуммаПродажи > МаксимальнаяСуммаПродажи Тогда
						МаксимальнаяСуммаПродажи = СтрокаИтоговойТаблицы.СуммаПродажи;
						СтрокаСМаксимальнойСуммой = СтрокаИтоговойТаблицы;
					КонецЕсли;
					Если СтрокаИтоговойТаблицы.СуммаПродажи > МаксимальнаяСуммаПродажиБезДоговора Тогда
						Если НЕ ЗначениеЗаполнено(СтрокаИтоговойТаблицы.Договор) Тогда
							МаксимальнаяСуммаПродажиБезДоговора = СтрокаИтоговойТаблицы.СуммаПродажи;
							СтрокаСМаксимальнойСуммойБезДоговора = СтрокаИтоговойТаблицы;
						КонецЕсли;
					КонецЕсли;
					ОстатокСуммыПродажи = ОстатокСуммыПродажи - СтрокаИтоговойТаблицы.СуммаПродажи;
				КонецЕсли;
				
				Если ПодбираемоеКоличество = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
				ТаблицаОстатков.Удалить(УдаляемаяСтрока);
			КонецЦикла;
			
			Если ПодбираемоеКоличество > 0 Тогда
				СтрокаИтоговойТаблицы = ИтоговаяТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаИтоговойТаблицы, СтрокаТаблицы);
				СтрокаИтоговойТаблицы.Количество 	   = ПодбираемоеКоличество;
				СтрокаИтоговойТаблицы.НомерСтрокиДокумента = СтрокаТаблицы.НомерСтроки;
				
				Если СуммаПродажи <> 0 И ОбщееКоличество <> 0 Тогда
					Если СтрокаИтоговойТаблицы.Количество = ОбщееКоличество Тогда
						СтрокаИтоговойТаблицы.СуммаПродажи = СуммаПродажи;
					Иначе
						СтрокаИтоговойТаблицы.СуммаПродажи = СуммаПродажи * СтрокаИтоговойТаблицы.Количество / ОбщееКоличество;
					КонецЕсли;
					
					Если СтрокаИтоговойТаблицы.СуммаПродажи > МаксимальнаяСуммаПродажи Тогда
						МаксимальнаяСуммаПродажи = СтрокаИтоговойТаблицы.СуммаПродажи;
						СтрокаСМаксимальнойСуммой = СтрокаИтоговойТаблицы;
					КонецЕсли;
					Если СтрокаИтоговойТаблицы.СуммаПродажи > МаксимальнаяСуммаПродажиБезДоговора Тогда
						Если НЕ ЗначениеЗаполнено(СтрокаИтоговойТаблицы.Договор) Тогда
							МаксимальнаяСуммаПродажиБезДоговора = СтрокаИтоговойТаблицы.СуммаПродажи;
							СтрокаСМаксимальнойСуммойБезДоговора = СтрокаИтоговойТаблицы;
						КонецЕсли;
					КонецЕсли;
					ОстатокСуммыПродажи = ОстатокСуммыПродажи - СтрокаИтоговойТаблицы.СуммаПродажи;
				КонецЕсли;
			КонецЕсли;
			
			Если ОстатокСуммыПродажи <> 0 Тогда
				Если СтрокаСМаксимальнойСуммойБезДоговора <> Неопределено Тогда
					СтрокаСМаксимальнойСуммойБезДоговора.СуммаПродажи = СтрокаСМаксимальнойСуммой.СуммаПродажи + ОстатокСуммыПродажи;
				ИначеЕсли СтрокаСМаксимальнойСуммой <> Неопределено Тогда
					СтрокаСМаксимальнойСуммой.СуммаПродажи = СтрокаСМаксимальнойСуммой.СуммаПродажи + ОстатокСуммыПродажи;
				// Иначе копейки потеряли.
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаТоварыОрганизаций = ИтоговаяТаблица;
	ТаблицаТоварыОрганизаций.Свернуть("Период, ВидДвижения, Номенклатура, Характеристика, Склад, Организация, Поставщик, Договор, НомерГТД, ОрганизацияОтгрузки, НомерСтрокиДокумента", "Количество, КоличествоПоРНПТ, СуммаПродажи");
	
	Для каждого СтрокаТаблицыОрганизаций Из ТаблицаТоварыОрганизаций Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицыОрганизаций.Договор) Тогда
			ЕстьДанныеДляОтчетаКомитенту = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет таблицу остатков организации.
//
// Параметры
//  ТаблицаТоварыОрганизаций - ТаблицаЗначений - см. регистр "ТоварыОрганизаций".
//  ДокументСсылка - ДокументСсылка - регистратор см. регистр "ТоварыОрганизаций".
//  Период - ДатаВремя - дата и время перезаполнения.
//
// Возвращаемое значение
//  ТаблицаЗначений - таблица остатков организаций.
//
Функция ТаблицаОстатковОрганизаций(ТаблицаТоварыОрганизаций, ДокументСсылка, Период) Экспорт
	
	ПриоритетыРеализацииТоваров = Константы.ПриоритетыРеализацииТоваров.Получить();
	ПриоритетКомиссионного = ПриоритетыРеализацииТоваров = Перечисления.ПриоритетыРеализацииТоваров.Комиссионный;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ТоварыОрганизаций");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблицаТоварыОрганизаций;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Характеристика", "Характеристика");
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоварыОрганизаций.ВидДвижения КАК ВидДвижения,
	|	ТаблицаТоварыОрганизаций.Номенклатура КАК Номенклатура,
	|	ТаблицаТоварыОрганизаций.Характеристика КАК Характеристика,
	|	ТаблицаТоварыОрганизаций.Организация КАК Организация,
	|	ТаблицаТоварыОрганизаций.Склад КАК Склад
	|ПОМЕСТИТЬ ТаблицаТоварыОрганизаций
	|ИЗ
	|	&ТаблицаТоварыОрганизаций КАК ТаблицаТоварыОрганизаций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияДокумента.Номенклатура КАК Номенклатура,
	|	ДвиженияДокумента.Характеристика КАК Характеристика,
	|	ДвиженияДокумента.Склад КАК Склад,
	|	ДвиженияДокумента.Организация КАК Организация,
	|	ДвиженияДокумента.Поставщик КАК Поставщик,
	|	ДвиженияДокумента.Договор КАК Договор,
	|	ДвиженияДокумента.НомерГТД КАК НомерГТД,
	|	СУММА(ВЫБОР
	|			КОГДА ДвиженияДокумента.ВидДвижения = &Расход
	|				ТОГДА ДвиженияДокумента.Количество
	|			ИНАЧЕ -ДвиженияДокумента.Количество
	|		КОНЕЦ) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА ДвиженияДокумента.ВидДвижения = &Расход
	|				ТОГДА ДвиженияДокумента.КоличествоПоРНПТ
	|			ИНАЧЕ -ДвиженияДокумента.КоличествоПоРНПТ
	|		КОНЕЦ) КАК КоличествоПоРНПТ
	|ПОМЕСТИТЬ ДвиженияДокумента
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций КАК ДвиженияДокумента
	|ГДЕ
	|	ДвиженияДокумента.Регистратор = &Ссылка
	|	И ДвиженияДокумента.Период < &Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияДокумента.Номенклатура,
	|	ДвиженияДокумента.Характеристика,
	|	ДвиженияДокумента.Склад,
	|	ДвиженияДокумента.Организация,
	|	ДвиженияДокумента.Поставщик,
	|	ДвиженияДокумента.Договор,
	|	ДвиженияДокумента.НомерГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Расход КАК ВидДвижения,
	|	ОстаткиИтоговые.Номенклатура КАК Номенклатура,
	|	ОстаткиИтоговые.Характеристика КАК Характеристика,
	|	ОстаткиИтоговые.Склад КАК Склад,
	|	ОстаткиИтоговые.Организация КАК Организация,
	|	ОстаткиИтоговые.Организация КАК ОрганизацияОтгрузки,
	|	ОстаткиИтоговые.Поставщик КАК Поставщик,
	|	ОстаткиИтоговые.Договор КАК Договор,
	|	ОстаткиИтоговые.НомерГТД КАК НомерГТД,
	|	ВЫБОР
	|		КОГДА &ПриоритетКомиссионного
	|			ТОГДА ОстаткиИтоговые.Договор = &ДоговорПустой
	|		ИНАЧЕ НЕ ОстаткиИтоговые.Договор = &ДоговорПустой
	|	КОНЕЦ КАК ПолеУпорядочивания,
	|	СУММА(ОстаткиИтоговые.Количество) КАК Количество,
	|	СУММА(ОстаткиИтоговые.КоличествоПоРНПТ) / СУММА(ОстаткиИтоговые.Количество) КАК Коэффициент
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыОстатки.Характеристика КАК Характеристика,
	|		ТоварыОстатки.Склад КАК Склад,
	|		ТоварыОстатки.Организация КАК Организация,
	|		ТоварыОстатки.Поставщик КАК Поставщик,
	|		ТоварыОстатки.Договор КАК Договор,
	|		ТоварыОстатки.НомерГТД КАК НомерГТД,
	|		ТоварыОстатки.КоличествоОстаток КАК Количество,
	|		ТоварыОстатки.КоличествоПоРНПТОстаток КАК КоличествоПоРНПТ
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизаций.Остатки(
	|				&ПериодОстатков,
	|				(Номенклатура, Характеристика, Склад, Организация) В
	|					(ВЫБРАТЬ
	|						ТаблицаТоварыОрганизаций.Номенклатура КАК Номенклатура,
	|						ТаблицаТоварыОрганизаций.Характеристика КАК Характеристика,
	|						ТаблицаТоварыОрганизаций.Склад КАК Склад,
	|						ТаблицаТоварыОрганизаций.Организация КАК Организация
	|					ИЗ
	|						ТаблицаТоварыОрганизаций КАК ТаблицаТоварыОрганизаций
	|					ГДЕ
	|						ТаблицаТоварыОрганизаций.ВидДвижения = &Расход)) КАК ТоварыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокумента.Номенклатура,
	|		ДвиженияДокумента.Характеристика,
	|		ДвиженияДокумента.Склад,
	|		ДвиженияДокумента.Организация,
	|		ДвиженияДокумента.Поставщик,
	|		ДвиженияДокумента.Договор,
	|		ДвиженияДокумента.НомерГТД,
	|		ДвиженияДокумента.Количество,
	|		ДвиженияДокумента.КоличествоПоРНПТ
	|	ИЗ
	|		ДвиженияДокумента КАК ДвиженияДокумента) КАК ОстаткиИтоговые
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиИтоговые.Номенклатура,
	|	ОстаткиИтоговые.Характеристика,
	|	ОстаткиИтоговые.Склад,
	|	ОстаткиИтоговые.Организация,
	|	ОстаткиИтоговые.Поставщик,
	|	ОстаткиИтоговые.Договор,
	|	ОстаткиИтоговые.НомерГТД,
	|	ОстаткиИтоговые.Организация
	|
	|ИМЕЮЩИЕ
	|	СУММА(ОстаткиИтоговые.Количество) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПолеУпорядочивания,
	|	НомерГТД
	|";
	
	Запрос.УстановитьПараметр("ТаблицаТоварыОрганизаций", ТаблицаТоварыОрганизаций);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ПериодОстатков", Новый Граница(ДокументСсылка.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ПриоритетКомиссионного", ПриоритетКомиссионного);
	Запрос.УстановитьПараметр("ДоговорПустой", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.Выполнить();
	ТаблицаОстатков = Результат.Выгрузить();
	
	Возврат ТаблицаОстатков;
	
КонецФункции

// Заполняет таблицу движений комитенту.
//
// Параметры
//  ТаблицаТоварыОрганизаций - ТаблицаЗначений - см. регистр "ТоварыОрганизаций".
//  ЕстьДанныеДляОтчетаКомитенту - Булево - признак наличия данных для отчета комитенту.
//
// Возвращаемое значение
//  ТаблицаЗначений - таблица движений комитенту.
//
Функция ТаблицаДвиженийКомитенту(Знач ТаблицаТоварыОрганизаций, ЕстьДанныеДляОтчетаКомитенту) Экспорт
	
	Если ЕстьДанныеДляОтчетаКомитенту Тогда
		ВозвращаемаяТаблица = ТаблицаТоварыОрганизаций.Скопировать();
		ВозвращаемаяТаблица.Свернуть("Период, ВидДвижения, Номенклатура, Характеристика, Склад, Организация, Поставщик, Договор, НомерГТД", "Количество, СуммаПродажи");
		ВозвращаемаяТаблица.Колонки.Добавить("КоличествоСписано", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ВидДвижения", ВидДвиженияНакопления.Приход);
		СтрокиТаблицы = ВозвращаемаяТаблица.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			ВозвращаемаяТаблица.Удалить(СтрокаТаблицы)
		КонецЦикла;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		СтрокиТаблицы = ВозвращаемаяТаблица.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			ВозвращаемаяТаблица.Удалить(СтрокаТаблицы)
		КонецЦикла;
		
		ВозвращаемаяТаблица.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход, "ВидДвижения");
	Иначе
		ВозвращаемаяТаблица = ТаблицаТоварыОрганизаций.СкопироватьКолонки();
	КонецЕсли;
	
	Возврат ВозвращаемаяТаблица;
	
КонецФункции

// Заполняет таблицу движений комитенту для списания.
//
// Параметры
//  ТаблицаТоварыОрганизаций - ТаблицаЗначений - см. регистр "ТоварыОрганизаций".
//  ЕстьДанныеДляОтчетаКомитенту - Булево - признак наличия данных для отчета комитенту.
//
// Возвращаемое значение
//  ТаблицаЗначений - таблица движений комитенту.
//
Функция ТаблицаДвиженийКомитентуДляСписания(Знач ТаблицаТоварыОрганизаций, ЕстьДанныеДляОтчетаКомитенту) Экспорт
	
	Если ЕстьДанныеДляОтчетаКомитенту Тогда
		ВозвращаемаяТаблица = ТаблицаТоварыОрганизаций.Скопировать();
		ВозвращаемаяТаблица.Свернуть("Период, ВидДвижения, Номенклатура, Характеристика, Склад, Организация, Поставщик, Договор, НомерГТД", "Количество, СуммаПродажи");
		ВозвращаемаяТаблица.Колонки.Добавить("КоличествоСписано", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		УдаляемыеСтроки = Новый Массив;
		Для Каждого СтрокаКомитенту Из ВозвращаемаяТаблица Цикл
			Если СтрокаКомитенту.ВидДвижения = ВидДвиженияНакопления.Приход
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаКомитенту.Договор) Тогда
				УдаляемыеСтроки.Добавить(СтрокаКомитенту);
			Иначе
				СтрокаКомитенту.ВидДвижения = ВидДвиженияНакопления.Приход;
				СтрокаКомитенту.КоличествоСписано = СтрокаКомитенту.Количество;
				СтрокаКомитенту.Количество = 0;
			КонецЕсли;
		КонецЦикла;
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			ВозвращаемаяТаблица.Удалить(УдаляемаяСтрока)
		КонецЦикла;
	Иначе
		ВозвращаемаяТаблица = ТаблицаТоварыОрганизаций.СкопироватьКолонки();
	КонецЕсли;
	
	Возврат ВозвращаемаяТаблица;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЕстьИзмененияВТаблице(СтруктураДанных, Ключ)
	Перем ЕстьИзменения;

	Возврат СтруктураДанных.Свойство(Ключ, ЕстьИзменения) И ЕстьИзменения;

КонецФункции

Процедура СообщитьОбОшибкахПроведенияПоРегиструТоварыНаСкладах(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'Номенклатура %1 
		|Превышен остаток на складе %2 на %3 %4'");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРезервированиеПоЗаказамПокупателей") Тогда
		ШаблонСообщения = НСтр("ru = 'Номенклатура %1 
			|Превышен свободный остаток на складе %2 на %3 %4'");
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Выборка.Номенклатура, Выборка.Характеристика),
			Строка(Выборка.Склад),
			Строка(-Выборка.Количество),
			Строка(Выборка.ЕдиницаИзмерения));
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструЗаказыПокупателей(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'Номенклатура %1 
		|Превышен остаток по заказу %2 по строке с кодом %3 в магазине %4 на %5 %6'");
		

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Выборка.Номенклатура, Выборка.Характеристика),
			Строка(Выборка.Заказ),
			Строка(Выборка.КодСтроки),
			Строка(Выборка.Магазин),
			Строка(-Выборка.Заказано),
			Строка(Выборка.ЕдиницаИзмерения));
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструДвиженияСерийныхНомеров(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщенияНоменклатуры = НСтр("ru = 'Номенклатура %1 
		|Превышен остаток серийных номеров на складе %2 на %3 %4'");

	ШаблонСообщенияСертификат = НСтр("ru = 'Номер подарочного сертификата %5 (%1)
		|Превышен остаток серийных номеров на складе %2 на %3 %4'");
		
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.СерийныйНомер) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщенияСертификат,
				Выборка.Номенклатура,
				Строка(Выборка.Склад),
				Строка(-Выборка.Количество),
				Строка(Выборка.ЕдиницаИзмерения),
				Выборка.СерийныйНомер);
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщенияНоменклатуры,
				Выборка.Номенклатура,
				Строка(Выборка.Склад),
				Строка(-Выборка.Количество),
				Строка(Выборка.ЕдиницаИзмерения),
				Выборка.СерийныйНомер);
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструПодарочныеСертификаты(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщенияСертификат = НСтр("ru = 'Номер подарочного сертификата %1 (%2)
	|Превышен остаток суммы на %3'");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщенияСертификат,
			Строка(Выборка.НомерСертификата),
			Строка(Выборка.Подарочныйсертификат),
			Строка(-Выборка.СуммаОстаток));
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);
		
	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструРасчетыСПоставщиками(Объект, Отказ, РезультатЗапроса)
	
	ШаблонСообщения = НСтр("ru = 'Превышена на %1 тг. доступная сумма взаимозачета по документу %2 списка ""Этапы оплат""'");
		
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонСообщения,
		Выборка.Сумма,
		Строка(Выборка.ДокументВзаимозачета));
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредстваКВыплате(Объект, Отказ, РезультатЗапроса)
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы Тогда
		
		ШаблонСообщения = НСтр("ru = 'Превышена на %1 тг. утвержденная сумма оплаты по статье ""%2""'");
		КолонкаВыборки = "СтатьяДвиженияДенежныхСредств";
		
	Иначе
		
		ШаблонСообщения = НСтр("ru = 'Превышена на %1 тг. утвержденная сумма оплаты по документу ""%2""'");
		КолонкаВыборки = "ДокументРасчета";
		
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонСообщения,
		Выборка.Сумма,
		Строка(Выборка[КолонкаВыборки]));
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредстваНаличные(Объект, Отказ, РезультатЗапроса)
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ИспользоватьАгентскиеПлатежиИРазделениеВыручки = ПолучитьФункциональнуюОпцию("ИспользоватьАгентскиеПлатежиИРазделениеВыручки");
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		ШаблонСообщения = НСтр("ru = 'Превышен на %1 тг. остаток наличных денежных средств в кассе ""%2"" по типу выручки ""%3""'");
	Иначе
		ШаблонСообщения = НСтр("ru = 'Превышен на %1 тг. остаток наличных денежных средств в кассе ""%2""'");
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
			ТипВыручки = Выборка.ДоговорКонтрагента;
			Если ТипВыручки = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
				ТипВыручки = НСтр("ru = 'Собственные средства'");
			КонецЕсли;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								- Выборка.СуммаОстаток,
								Выборка.Касса,
								ТипВыручки);
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								- Выборка.СуммаОстаток,
								Выборка.Касса);
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, , , Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредстваБезналичные(Объект, Отказ, РезультатЗапроса)
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ШаблонСообщения = НСтр("ru = 'Превышен на %1 тг. остаток безналичных денежных средств по банковскому счету ""%2""'");
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			-Выборка.СуммаОстаток,
			Выборка.БанковскийСчет);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, , , Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредстваККМ(Объект, Отказ, РезультатЗапроса)
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ИспользоватьАгентскиеПлатежиИРазделениеВыручки = ПолучитьФункциональнуюОпцию("ИспользоватьАгентскиеПлатежиИРазделениеВыручки");
	Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		ШаблонСообщения = НСтр("ru = 'Превышен на %1 тг. остаток денежных средств в кассе ККМ ""%2"" по типу выручки ""%3""'");
	Иначе
		ШаблонСообщения = НСтр("ru = 'Превышен на %1 тг. остаток денежных средств в кассе ККМ ""%2""'");
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
			ТипВыручки = Выборка.ДоговорКонтрагента;
			Если ТипВыручки = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
				ТипВыручки = НСтр("ru = 'Собственные средства'");
			КонецЕсли;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								- Выборка.СуммаОстаток,
								Выборка.КассаККМ,
								ТипВыручки);
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								- Выборка.СуммаОстаток,
								Выборка.КассаККМ);
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, , , Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструТоварыОрганизаций(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'Номенклатура %1 
		|Превышен остаток по организации %2 на %3 %4'");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРезервированиеПоЗаказамПокупателей") Тогда
		ШаблонСообщения = НСтр("ru = 'Номенклатура %1 
			|Превышен свободный остаток по организации %2 на %3 %4'");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрослеживаемыхИмпортныхТоваров") 
		И УчетПрослеживаемыхТоваровРТ.ЭтоПрослеживаемыйДокумент(Объект.Товары, Объект.Дата) Тогда
		
		ШаблонСообщения = НСтр("ru = 'Номенклатура %1 
			|Превышен остаток РНПТ на %3 %4'");
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Выборка.Номенклатура, Выборка.Характеристика),
			Строка(Выборка.Организация),
			Строка(-Выборка.Количество),
			Строка(Выборка.ЕдиницаИзмерения));
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);

	КонецЦикла;

КонецПроцедуры

#КонецОбласти
