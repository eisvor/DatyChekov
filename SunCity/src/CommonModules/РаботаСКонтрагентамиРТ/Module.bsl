#Область ПрограммныйИнтерфейс

#Область ПроверкаКонтрагентовВДокументах

// Формирование описания расположения счета-фактуры в документе.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - Форма документа-основания, для которого необходимо получить описание счета-фактуры.
//  Описание - ТаблицаЗначений - Таблица, в которую помещается описание счета-фактуры.
//				Структура колонок указана в функции ШаблонТаблицыОписания модуля ПроверкаКонтрагентов.
//
Процедура СформироватьОписаниеДокументовСоСчетомФактуройВПодвале(Форма, Описание) Экспорт
	
	ДокументОбъект = Форма.Объект;
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСоСчетомФактуройВПодвале(Форма) Тогда
		
		СчетФактура = ПроверкаКонтрагентовКлиентСервер.СчетФактура(Форма);
		
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			
			ПроверкаКонтрагентов.ДополнитьОписание(
				Описание,
				СчетФактура, 
				Форма.Элементы.СчетФактура,
				Неопределено,
				Форма.Элементы.ГруппаСчетФактура);
				
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Формирование описания расположения контрагента, находящегося в шапке документа.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - Форма документа, для которой необходимо получить описание расположения контрагента.
//  Описание - ТаблицаЗначений - Таблица, в которую помещается описание контрагентов.
//				Структура колонок указана в функции ШаблонТаблицыОписания модуля ПроверкаКонтрагентов.
//
Процедура СформироватьОписаниеДокументовСКонтрагентомВШапке(Форма, Описание) Экспорт
	
	ДокументОбъект = Форма.Объект;
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	// Заполнение данных по контрагенту в шапке.
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоДокументСКонтрагентомВШапке(Форма) Тогда
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			Если ТипЗнч(ДокументСсылка.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				ПроверкаКонтрагентов.ДополнитьОписание(
					Описание, 
					ДокументСсылка, 
					Форма.Элементы.ДокументОснование,
					ДокументОбъект.ДокументОснование.Контрагент,
					Форма.Элементы.ГруппаКонтрагент);
			КонецЕсли;
		Иначе
			ПроверкаКонтрагентов.ДополнитьОписание(
				Описание, 
				ДокументСсылка, 
				Форма.Элементы.Контрагент,
				ДокументОбъект.Контрагент,
				Форма.Элементы.ГруппаКонтрагент);
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Формирование описания расположения контрагентов в счете-фактуре.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - Форма счета-фактуры, для которой необходимо получить описание.
//  Описание - ТаблицаЗначений - Таблица, в которую помещается описание контрагентов.
//				Структура колонок указана в функции ШаблонТаблицыОписания модуля ПроверкаКонтрагентов.
//
Процедура СформироватьОписаниеСчетовФактур(Форма, Описание) Экспорт
	
	ДокументОбъект = Форма.Объект;
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	// Заполнение данных для счета-фактуры.
	Если ПроверкаКонтрагентовКлиентСервер.ЭтоСчетФактура(Форма) Тогда
		
		Ссылка 			= ДокументСсылка;
		ТипДокумента	= ТипЗнч(Ссылка);
		
		Если ТипДокумента = Тип("ДокументСсылка.СчетФактураВыданный")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			Если ТипЗнч(ДокументОбъект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				ПроверкаКонтрагентов.ДополнитьОписание(
					Описание, 
					Ссылка, 
					Форма.Элементы.Контрагент,
					ДокументОбъект.Контрагент,
					Форма.Элементы.ГруппаКонтрагент);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив имен реквизитов счета-фактуры, содержащих контрагентов.
//
// Параметры:
//  Тип	 			- Тип - Тип счета-фактуры, для которой необходимо получить описание.
//  ИменаРеквизитов	- Массив из Строка - массив имен реквизитов счета-фактуры, содержащих контрагентов.
//
Процедура ПолучитьИменаРеквизитовКонтрагентовВСчетеФактуре(Тип, ИменаРеквизитов) Экспорт
	
	ИменаРеквизитов.Добавить("Контрагент");
	
КонецПроцедуры

// Получение даты документа, в котором используется проверка контрагентов.
// 		Проверка контрагентов будет выполняться по состоянию на эту дату. 
//
// Параметры:
//  ДокументОбъект	 - ДокументОбъект - Документ, в котором используется проверка контрагентов.
//  Дата			 - Дата - Результат получения даты документа.
//
Процедура ОпределитьДатуВДокументе(ДокументОбъект, Дата) Экспорт
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		Дата = НачалоДня(ДокументОбъект.ДатаСоставления);
	Иначе
		Дата = НачалоДня(ДокументОбъект.Дата);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентовВОтчетах

// Выделение контрагента с ошибкой в строке отчета.
//
// Параметры:
//  ТабличныйДокумент	 - ТабличныйДокумент - Табличный документ отчета, в котором выделяется строка с некорректным
//                                           контрагентом.
//  НомерСтроки			 - Число - Номер строки табличного документа, в которой находится некорректный контрагент.
//
Процедура ВыделитьКонтрагентаСОшибкойВСтрокеОтчета(ТабличныйДокумент, НомерСтроки) Экспорт
	
	Область = ТабличныйДокумент.Область(НомерСтроки, 2, НомерСтроки, ТабличныйДокумент.ШиринаТаблицы);
	Область.ЦветФона = Новый Цвет(251, 212, 212);
	
КонецПроцедуры

// Предназначена для формирования отчета, в котором используется проверка контрагентов, из общего модуля.
//
// Параметры:
//  ПараметрыФормированияОтчета	 - Структура - Параметры, с которыми необходимо сформировать отчет.
//  Отчет						 - ТабличныйДокумент - результат формирования отчета.
//
Процедура СформироватьОтчет(ПараметрыФормированияОтчета, Отчет = Неопределено) Экспорт
	
	Если ПараметрыФормированияОтчета.Свойство("ЭтоЖурналУчетаСчетовФактур") Тогда
		
		ВременныйАдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
		Отчеты.ЖурналУчетаСчетовФактур.СформироватьОтчет(ПараметрыФормированияОтчета, ВременныйАдресХранилища);
		Результат = ПолучитьИзВременногоХранилища(ВременныйАдресХранилища);
		
		Отчет = Результат.СформированныйЖурнал;
		
	КонецЕсли;
	
КонецПроцедуры 

// Определяет, нужно ли выводить данную строку в отчете по некорректным контрагентам.
// 	Пример см. в ПроверкаКонтрагентов.ВыводитьСтрокуОтчета.
//
// Параметры:
//  СтруктураПараметров	 - Структура - Параметры формирования отчета. 
//		Для проверки контрагентов в отчете важно наличие ключа "ДанныеДляПроверкиКонтрагентов".
//		Данный ключ формируется в процедуре ДобавитьПараметрыДляПроверкиКонтрагентов.
//  Контрагент				- СправочникСсылка - Проверяемый контрагент в строке отчета.
//  ИНН						- Строка - ИНН контрагента.
//  КПП						- Строка - ИНН контрагента.
//  Дата					- Дата - Дата, на которую необходимо выполнять проверку контрагента.
//  СтандартнаяОбработка	- Булево - Определяет, выполнять ли действие, определенное в данной процедуре или выполнить
//                                  стандартную обработку.
//  Результат				- Булево - Определяет, нужно ли выводить строку.
//
Процедура ОпределитьНужноЛиВыводитьСтрокуОтчета(СтруктураПараметров, Контрагент, ИНН, КПП, Дата, Результат, СтандартнаяОбработка) Экспорт
	
	Если СтруктураПараметров.Свойство("ЭтоЖурналУчетаСчетовФактур") Тогда
		
		Если СтруктураПараметров.Свойство("ЭтоИтог") И СтруктураПараметров.ЭтоИтог Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ДанныеДляПроверкиКонтрагентов = СтруктураПараметров.ДанныеДляПроверкиКонтрагентов;
			НедействующиеКонтрагенты = ДанныеДляПроверкиКонтрагентов.НедействующиеКонтрагенты;
			
			Результат = НедействующиеКонтрагенты.НайтиСтроки(Новый Структура("Контрагент", Контрагент)).Количество() > 0;

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентовВСправочнике

// Определяет свойства справочников контрагентов.
// Параметры:
//	СвойстваСправочников - ТаблицаЗначений - в таблице заполняется список
//		справочников контрагентов и их свойства. Колонки таблицы:
//		* Имя - Строка - имя справочника;
//		* Иерархический - Булево - справочник является иерархическим;
//		* РеквизитИНН - Строка- имя реквизита ИНН;
//		* РеквизитКПП - Строка- имя реквизита КПП;
//		* ОтключитьСозданиеИзДосьеКонтрагента - Булево - если Истина,
//			тогда не будет предлагаться создание элемента справочника из
//			отчета "Досье контрагента".
//
Процедура ПриОпределенииСвойствСправочниковКонтрагентов(СвойстваСправочников) Экспорт
	
	СвойствоСправочника = СвойстваСправочников.Добавить();
	СвойствоСправочника.Имя           = "Контрагенты";
	СвойствоСправочника.Иерархический = Истина;
	СвойствоСправочника.РеквизитИНН   = "ИНН";
	СвойствоСправочника.РеквизитКПП   = "КПП";
	СвойствоСправочника.ОтключитьСозданиеИзДосьеКонтрагента = Ложь;
	
	СвойствоСправочника = СвойстваСправочников.Добавить();
	СвойствоСправочника.Имя           = "Организации";
	СвойствоСправочника.Иерархический = Ложь;
	СвойствоСправочника.РеквизитИНН   = "ИНН";
	СвойствоСправочника.РеквизитКПП   = "КПП";
	СвойствоСправочника.ОтключитьСозданиеИзДосьеКонтрагента = Ложь;
	
КонецПроцедуры

// Определяет, является ли контрагент физическим или юридическим лицом.
//
// Параметры:
//  СтандартнаяОбработка  - Булево - если стандартный механизм переопределяется, то должно быть установлено значение "Ложь".
//  ЭтоЮрЛицо             - Булево - Истина, если юридическое лицо, и Ложь, если физическое.
//  ДанныеКонтрагента     - Структура - структура, которая содержит данные обрабатываемого контрагента.
//
Процедура ПриОпределенииВидаКонтрагента(СтандартнаяОбработка, ЭтоЮрЛицо, ДанныеКонтрагента) Экспорт
	
	Если ДанныеКонтрагента.ДополнительныеПараметры.Свойство("Контрагент") Тогда
		КонтрагентСсылка = ДанныеКонтрагента.Контрагент;
		
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(КонтрагентСсылка)) И КонтрагентСсылка <> Справочники.Контрагенты.ПустаяСсылка() Тогда
			// Ссылка
			
			ЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтрагентСсылка, "ЮрФизЛицо");
			ЭтоЮрЛицо = ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		Иначе
			// Объект
			ЮрФизЛицо = КонтрагентСсылка.ЮрФизЛицо;
			ЭтоЮрЛицо = ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
			
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Определяется, является ли контрагент иностранным.
//
// Параметры:
//  ДанныеКонтрагента   - СтрокаТаблицыЗначений - Содержит информацию о контрагенте. 
//      Подробнее о колонках таблицы можно узнать в описании к процедуре ПроверкаКонтрагентов.ШаблонТаблицыДанныеКонтрагента().
//  ЯвляетсяИностранным - Булево - Результат проверки.
//
Процедура ПриОпределенииКонтрагентЯвляетсяИностранным(ДанныеКонтрагента, ЯвляетсяИностранным) Экспорт
	
	КонтрагентСсылка = ДанныеКонтрагента.Контрагент;
	
	Если ДанныеКонтрагента.ДополнительныеПараметры.Свойство("ЮрФизЛицо") Тогда
		ЮрФизЛицо = ДанныеКонтрагента.ДополнительныеПараметры.ЮрФизЛицо;
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(КонтрагентСсылка)) И КонтрагентСсылка <> Справочники.Контрагенты.ПустаяСсылка() Тогда
		// Ссылка
		ЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтрагентСсылка, "ЮрФизЛицо");
	ИначеЕсли КонтрагентСсылка <> Неопределено Тогда
		// Объект
		ЮрФизЛицо = КонтрагентСсылка.ЮрФизЛицо;
	КонецЕсли;
	
	ЯвляетсяИностранным = ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент;
	
КонецПроцедуры

// Возможность дополнить структуру РеквизитыПроверкиКонтрагентов для формы справочника. 
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - форма, для которой дополняется структура РеквизитыПроверкиКонтрагентов.
//  НовыеРеквизиты  - Структура - структура, которая транслируется в реквизит формы РеквизитыПроверкиКонтрагентов.
//
Процедура ДополнитьРеквизитыФормыКонтрагент(Форма, НовыеРеквизиты) Экспорт
	
	НовыеРеквизиты.Вставить("НеИспользоватьКэш", Ложь);

	Если Форма.ИмяФормы = "Справочник.Контрагенты.Форма.ФормаЭлемента" Тогда
		
		ЮрФизЛицо = Форма.Объект.ЮрФизЛицо;
		НовыеРеквизиты.ЭтоИностранныйКонтрагент  = ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент;
		НовыеРеквизиты.ЭтоЮридическоеЛицо        = ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо
												   ИЛИ ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент
												   ИЛИ ЮрФизЛицо = Перечисления.ЮрФизЛицо.ПустаяСсылка();
		
	КонецЕсли;
	
	
КонецПроцедуры

// Определяется, необходимо ли отключить проверку состояния контрагента в базе ФНС.
//
// Параметры:
//  ДанныеКонтрагента - СтрокаТаблицыЗначений:
//    * Контрагент - Произвольный - ссылки на все справочники, описанные в методе
//        см. РаботаСКонтрагентами.СвойстваСправочниковКонтрагентов.
//    * ИНН - Строка
//    * КПП - Строка
//    * ЭтоЮридическоеЛицо - Неопределено, Булево
//    * ЭтоИностранныйКонтрагент - Неопределено, Булево
//    * ОтключитьПроверкуФНС - Неопределено, Булево
//    * ПричинаОтключенияПроверкиФНС - Строка
//    * Дата - Дата - дата актуальности состояния.
//    * ДополнительныеПараметры - Структура - дополнительные сведения о контрагенте.
//    * Состояние - ПеречислениеСсылка.СостоянияСуществованияКонтрагента
//    * ОбластьДанныхВспомогательныеДанные - Число - добавляется если внедрена подсистема РаботаВМоделиСервиса.
//  ОтключитьПроверкуФНС - Булево, Неопределено - результат проверки состояния контрагента. Если установить Истина, то
//    проверка состояния контрагента в базе ФНС выполняться не будет.
//  ПричинаОтключения - Строка - краткое описание причины отключения проверки контрагента. Установленный текст будет
//    отображаться в окне подсказки поля контрагента, если параметр ОтключитьПроверкуФНС будет установлен в значение
//    Истина.
//
Процедура ПриОпределенииСтатусаПроверкиКонтрагентаВБазеФНС(
	ДанныеКонтрагента,
	ОтключитьПроверкуФНС,
	ПричинаОтключения) Экспорт
	
	Если ТипЗнч(ДанныеКонтрагента.Контрагент) <> Тип("СправочникСсылка.Контрагенты")
		Или Не ЗначениеЗаполнено(ДанныеКонтрагента.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеКонтрагента.Контрагент, "ЮрФизЛицо");
	
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		ОтключитьПроверкуФНС = Истина;
		ПричинаОтключения 	 = ПричинаОтключенияПроверкиФНСИностраннаяОрганизация();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеИнформацииДляДосьеКонтрагента

// Заполнение идентификатора конфигурации для статистики переходов по ссылкам сервиса 1С:Контрагент.
//
// Параметры:
//  ИдентификаторКонфигурации  - Строка - идентификатор. 
//                 Рекомендуется использовать латинские строчные буквы и цифры.
//
//@skip-warning
Процедура ЗаполнитьИдентификаторКонфигурации(ИдентификаторКонфигурации) Экспорт
	
	ИдентификаторКонфигурации = "RetailKz";
	
КонецПроцедуры

#КонецОбласти 

#Область ПрочиеПроцедуры

// Заполнение значений колонок ЭтоЮридическоеЛицо, ЭтоИностранныйКонтрагент, ОтключитьПроверкуФНС и
// ПричинаОтключенияПроверкиФНС в таблице с данными контрагента.
//
// Параметры:
//   ДанныеКонтрагентов - ТаблицаЗначений - таблица с данными контрагентов
//     см. ПроверкаКонтрагентов.ШаблонТаблицыДанныеКонтрагента.
//   СтандартнаяОбработка - Булево - если Истина, то заполнение будет выполнено стандартным образом путем перебора
//     каждой строки таблицы.
//
Процедура ДополнитьДанныеКонтрагентов(ДанныеКонтрагентов, СтандартнаяОбработка) Экспорт

	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеКонтрагентов.Контрагент КАК Контрагент,
	|	ДанныеКонтрагентов.ИНН КАК ИНН,
	|	ДанныеКонтрагентов.КПП КАК КПП,
	|	ДанныеКонтрагентов.ЭтоЮридическоеЛицо КАК ЭтоЮридическоеЛицо,
	|	ДанныеКонтрагентов.ЭтоИностранныйКонтрагент КАК ЭтоИностранныйКонтрагент,
	|	ДанныеКонтрагентов.Дата КАК Дата,
	|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,
	|	ДанныеКонтрагентов.Состояние КАК Состояние,
	|	ДанныеКонтрагентов.ОтключитьПроверкуФНС КАК ОтключитьПроверкуФНС,
	|	ДанныеКонтрагентов.ПричинаОтключенияПроверкиФНС КАК ПричинаОтключенияПроверкиФНС
	|ПОМЕСТИТЬ ДанныеКонтрагентов
	|ИЗ
	|	&ДанныеКонтрагентов КАК ДанныеКонтрагентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДанныеКонтрагентов.Контрагент КАК Контрагент,
	|	ДанныеКонтрагентов.ИНН КАК ИНН,
	|	ДанныеКонтрагентов.КПП КАК КПП,
	|	ВЫБОР
	|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЮридическоеЛицо,
	|	ВЫБОР
	|		КОГДА ДанныеКонтрагентов.ЭтоИностранныйКонтрагент <> НЕОПРЕДЕЛЕНО
	|			ТОГДА ДанныеКонтрагентов.ЭтоИностранныйКонтрагент
	|		КОГДА Контрагенты.СтранаРегистрации ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		КОГДА Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоИностранныйКонтрагент,
	|	ДанныеКонтрагентов.Дата КАК Дата,
	|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,
	|	ДанныеКонтрагентов.Состояние КАК Состояние,
	|	ВЫБОР
	|		КОГДА ДанныеКонтрагентов.ОтключитьПроверкуФНС = ИСТИНА
	|			ТОГДА ИСТИНА
	|		КОГДА ДанныеКонтрагентов.ЭтоИностранныйКонтрагент <> НЕОПРЕДЕЛЕНО
	|			ТОГДА ДанныеКонтрагентов.ЭтоИностранныйКонтрагент
	|		КОГДА Контрагенты.СтранаРегистрации ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		КОГДА Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОтключитьПроверкуФНС,
	|	ВЫБОР
	|		КОГДА ДанныеКонтрагентов.ЭтоИностранныйКонтрагент <> НЕОПРЕДЕЛЕНО
	|			ТОГДА ДанныеКонтрагентов.ПричинаОтключенияПроверкиФНС
	|		КОГДА Контрагенты.СтранаРегистрации ЕСТЬ NULL
	|			ТОГДА """"
	|		КОГДА Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА """"
	|		ИНАЧЕ &ПричинаОтключенияПроверкиИО
	|	КОНЕЦ КАК ПричинаОтключенияПроверкиФНС
	|ИЗ
	|	ДанныеКонтрагентов КАК ДанныеКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ДанныеКонтрагентов.Контрагент = Контрагенты.Ссылка";      
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,",
			"");
				
	КонецЕсли;
    #КонецОбласти
	
	Если ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()
		ИЛИ НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		
		СтандартнаяОбработка = Ложь;
		Запрос 				 = Новый Запрос(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("ПричинаОтключенияПроверкиИО", ПричинаОтключенияПроверкиФНСИностраннаяОрганизация());
		Запрос.УстановитьПараметр("ДанныеКонтрагентов", 		 ДанныеКонтрагентов);
			
		ДанныеКонтрагентов 	 = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Функция ПричинаОтключенияПроверкиФНСИностраннаяОрганизация()
	
	Возврат НСтр("ru='проверке подлежат только российские контрагенты'")
	
КонецФункции

#КонецОбласти

