
#Область ПрограммныйИнтерфейс

Функция ПолучитьПараметрыДокументаОплаты(ЧекККМПродажа) Экспорт
	
	Возврат ИнтеграцияСПлатежнымиСистемамиРТСервер.ПолучитьПараметрыДокументаОплаты(ЧекККМПродажа);
	
КонецФункции

Функция ТорговыеТочкиОперации(ДокументОперации) Экспорт
	
	Возврат ПереводыСБПc2b.НастройкиПодключенияОперации(ДокументОперации);
	
КонецФункции

Функция НастройкиТорговойТочки(Интеграция) Экспорт
	
	Настройки = СистемаБыстрыхПлатежей.НастройкиПодключения(Интеграция);

	НастройкиИнтеграции = Новый Структура;
	НастройкиИнтеграции.Вставить("ОтменаЗаказа",                  Ложь);
	НастройкиИнтеграции.Вставить("ОтменаОплаты",                  Ложь);
	НастройкиИнтеграции.Вставить("СрокЖизниQRКода",               Истина);
	НастройкиИнтеграции.Вставить("ПлатежнаяСсылка",               Истина);
	НастройкиИнтеграции.Вставить("ВыборПлатежнойСистемыВозврата", Настройки.НастройкиСБПc2b.УчастникСБПВозврата);
	НастройкиИнтеграции.Вставить("Идентификатор",                 Настройки.Идентификатор);
	НастройкиИнтеграции.Вставить("СинонимСистемы",                Настройки.СинонимСистемы);
	НастройкиИнтеграции.Вставить("Используется",                  Настройки.Используется);
	НастройкиИнтеграции.Вставить("КассовыеСсылки",                Настройки.НастройкиСБПc2b.КассовыеСсылки);
	НастройкиИнтеграции.Вставить("ПлатежныйАгрегатор",            Настройки.НастройкиСБПc2b.ПлатежныйАгрегатор);
	НастройкиИнтеграции.Вставить("ПодключениеКассовойСсылки",     Настройки.НастройкиСБПc2b.ПодключениеКассовойСсылки);
	НастройкиИнтеграции.Вставить("ПлатежныеСистемыВозврата", 	  ПереводыСБПc2b.УчастникиСБПДляВозврата());
	
	Возврат НастройкиИнтеграции;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция СформироватьДанныеQRКода(Интеграция, Идентификатор, УникальныйИдентификатор) Экспорт 
	
	ДвоичныеДанныеQRКода	= СистемаБыстрыхПлатежей.ИзображениеQRКодаСБП(Идентификатор, 280, 0);
	
	СтруктураКода = Новый Структура;
	СтруктураКода.Вставить("ИдентификаторQRКода", 	Идентификатор);
	СтруктураКода.Вставить("КартинкаQRКода",		Base64Строка(ДвоичныеДанныеQRКода));
	СтруктураКода.Вставить("ДанныеQRКода",			ПоместитьВоВременноеХранилище(ДвоичныеДанныеQRКода, УникальныйИдентификатор));
	
	Возврат СтруктураКода;

КонецФункции

Функция ИдентификаторыОперацииОплаты(Интеграция, ДокументОплаты) Экспорт
	
	Возврат ИнтеграцияСПлатежнымиСистемамиРТСервер.ИдентификаторыОперацииОплаты(Интеграция, ДокументОплаты);
	
КонецФункции

Функция ПолучитьИдентификаторОплаты(ЗаявкаНаОплату, УникальныйИдентификатор) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Формирование идентификатора оплаты.'");
	
	Если ЗаявкаНаОплату.Свойство("ДокументОплаты")
		И Не ЗначениеЗаполнено(ЗаявкаНаОплату.ДокументОплаты) Тогда
		ЗаявкаНаОплату.ДокументОплаты = ИнтеграцияСПлатежнымиСистемамиРТСервер.ПолучитьСсылкуНовогоЧекаККМ().ЧекККМВОбработке;
	КонецЕсли;
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"ИнтеграцияСПлатежнымиСистемамиРТСервер.ИдентификаторОплатыВПлатежнойСистеме",
		ЗаявкаНаОплату,
		ПараметрыВыполнения);
	
	Возврат РезультатВыполнения;
	
КонецФункции
	
Функция ОпределитьСтатусОплатыОплаты(ДокументОплаты, Интеграция, УникальныйИдентификатор) Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ДокументОплаты", 	ДокументОплаты);
	ПараметрыПроцедуры.Вставить("Интеграция", 		Интеграция);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка статуса оплаты.'");
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"ИнтеграцияСПлатежнымиСистемамиРТСервер.СтатусОплатыВПлатежнойСистеме",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Возврат РезультатВыполнения;
	
КонецФункции

Функция ВозвратОплаты(ЗаявкаНаВозврат, УникальныйИдентификатор) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Возврат оплаты в платежной системе.'");
	
	Если ЗаявкаНаВозврат.Свойство("ДокументВозврата")
		И Не ЗначениеЗаполнено(ЗаявкаНаВозврат.ДокументВозврата) Тогда
		ЗаявкаНаВозврат.ДокументВозврата = ИнтеграцияСПлатежнымиСистемамиРТСервер.ПолучитьСсылкуНовогоЧекаККМ().ЧекККМВОбработке;
	КонецЕсли;
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"ИнтеграцияСПлатежнымиСистемамиРТСервер.ВозвратОплаты",
		ЗаявкаНаВозврат,
		ПараметрыВыполнения);
	
	Возврат РезультатВыполнения;
	
КонецФункции

Функция ПодтвердитьВозврат(ДокументВозврата, Интеграция) Экспорт
	
	Возврат ИнтеграцияСПлатежнымиСистемамиРТСервер.ПодтвердитьВозврат(ДокументВозврата, Интеграция);
	
КонецФункции

Функция ОпределитьСтатусВозврата(ДокументВозврата, Интеграция, УникальныйИдентификатор) Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ДокументВозврата", ДокументВозврата);
	ПараметрыПроцедуры.Вставить("Интеграция",  		Интеграция);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка статуса возврата.'");
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"ИнтеграцияСПлатежнымиСистемамиРТСервер.СтатусВозвратОплаты",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Возврат РезультатВыполнения;
	
КонецФункции

Функция ОтменаОплаты(ДокументОплаты, Интеграция, ИдентификаторЗаданияФормированияQRКода, ИдентификаторЗаданияПроверкиСтатуса, ИдентификаторЗаданияВозврата) Экспорт
	
	НастройкиИнтеграции = НастройкиТорговойТочки(Интеграция);
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияФормированияQRКода) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(
			ИдентификаторЗаданияФормированияQRКода);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияВозврата) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(
			ИдентификаторЗаданияВозврата);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияПроверкиСтатуса) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(
			ИдентификаторЗаданияПроверкиСтатуса);
	КонецЕсли;
	
	// Перед отменой нужно определить статус оплаты.
	РезультатОперации = ПереводыСБПc2b.СтатусОплаты(ДокументОплаты, Интеграция, Ложь);
	
	// В зависимости от статуса оплаты выполняется соответствующая операция.
	Если РезультатОперации.СтатусОперации = "Выполняется" Тогда 
		
		Если Не НастройкиИнтеграции.ОтменаЗаказа Тогда
			ПереводыСБПc2b.УдалитьИдентификаторыОперации(ДокументОплаты);
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

#КонецОбласти
