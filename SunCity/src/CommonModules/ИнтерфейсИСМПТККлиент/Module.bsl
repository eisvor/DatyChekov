
#Область ОбменИСМПТК

Асинх Процедура ПроверитьТокенИВыбратьКлючПриНебходимостиИСМПТ(ОписаниеОповещения, ПараметрыФормы, СписокСтруктурныхЕдиниц, ОповещениеПриОшибке = Ложь) Экспорт
	
	Для Каждого КлючИЗначение Из СписокСтруктурныхЕдиниц Цикл
		
		Организация = КлючИЗначение.Ключ;
		ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК();
		КлючСессии = Ждать ИнтеграцияИСМПТККлиент.ПолучитьТокенАвторизации(Организация, ТипДокумента);
					
	КонецЦикла;	
	
	Если Не КлючСессии = Неопределено Или ОповещениеПриОшибке Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КлючСессии);
	КонецЕсли;
	
КонецПроцедуры

Асинх Процедура ПолучениеТокенаЗавершение(ДанныеКлючейОрганизаций, ДополнительныеПараметры) Экспорт
	
	Если ДанныеКлючейОрганизаций <> Неопределено Тогда
		
		ВсеТокеныПолученыУспешно = Истина;
		
		Для Каждого Соответствие из ДанныеКлючейОрганизаций Цикл
			
			ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК();
			Токен = Ждать ИнтеграцияИСМПТККлиент.ПолучитьТокенАвторизации(Соответствие.Ключ, ТипДокумента);
			ТокенПолученУспешно = НЕ(Токен = Неопределено);
			
			Если ТокенПолученУспешно = Ложь Тогда
				ВсеТокеныПолученыУспешно = Ложь;	
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВсеТокеныПолученыУспешно Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения);	
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ПолучитьКлючАвторизацииОбщая(СобытиеПослеАвторизации, Организация, ОповещениеПриОшибке = Ложь) Экспорт
	
	СтруктурныеЕдиницы = Новый Соответствие;
	СтруктурныеЕдиницы.Вставить(Организация, "");
	ПараметрыФормы = Новый Структура("СписокСтруктурныхЕдиниц, ТребуетсяВыборСертификата", СтруктурныеЕдиницы, Истина);

	ПроверитьТокенИВыбратьКлючПриНебходимостиИСМПТ(СобытиеПослеАвторизации, ПараметрыФормы, СтруктурныеЕдиницы, ОповещениеПриОшибке);
	
КонецПроцедуры

#КонецОбласти

#Область ОбменИСЦЭДМ

#Область ТокенАвторизации

Процедура ПроверитьТокенИВыбратьКлючПриНебходимостиИСЦЭДМ(ОписаниеОповещения, ПараметрыФормы, СписокСтруктурныхЕдиниц) Экспорт
	
	Для Каждого КлючИЗначение Из СписокСтруктурныхЕдиниц Цикл
		
		Организация = КлючИЗначение.Ключ;
		ПрофильИСЦЭДМ = КлючИЗначение.Значение;
		КлючСессии = ПолучитьТокенАвторизацииИСЦЭДМ(ПрофильИСЦЭДМ);
					
	КонецЦикла;	
	
	Если Не КлючСессии = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КлючСессии);	
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТокенАвторизацииИСЦЭДМ(ПрофильИСЦЭДМ = Неопределено) Экспорт
	
	Если ПрофильИСЦЭДМ = Неопределено ИЛИ Не ЗначениеЗаполнено(ПрофильИСЦЭДМ) Тогда 
		ОшибкаПодписи = НСтр("ru = 'Не получены данные для авторизации в системе. Невозможно получить токен сеанса!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ОшибкаПодписи);	
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыЗапросаКлючаСессии = ИнтеграцияИСМПТККлиентСервер.ПараметрыЗапросаКлючаСессии_ИСЦЭДМ(ПрофильИСЦЭДМ);
	Токен = ИнтерфейсИСМПТКВызовСервера.ПроверитьОбновитьКлючСессииИСЦЭДМ(ПараметрыЗапросаКлючаСессии, Неопределено, Ложь);

	Возврат Токен;
	
КонецФункции

Процедура ПолучитьКлючАвторизацииИСЦЭДМ(СобытиеПослеАвторизации, Организация) Экспорт
	
	МассивПрофилей = ИнтерфейсИСМПТКВызовСервера.ПолучитьДанныеРегистраПрофильДоступаКЭДО(Организация);
	
	СтруктурныеЕдиницы = Новый Соответствие;
	СтруктурныеЕдиницы.Вставить(Организация, ?(МассивПрофилей = Неопределено, Неопределено, МассивПрофилей[0]));
	
	ПрофильИСЦЭДМВФорме = ?(МассивПрофилей = Неопределено, Неопределено, МассивПрофилей[0]);
	ПараметрыФормы = Новый Структура("СписокСтруктурныхЕдиниц, ТребуетсяВыборСертификата", СтруктурныеЕдиницы, Ложь);

	ПроверитьТокенИВыбратьКлючПриНебходимостиИСЦЭДМ(СобытиеПослеАвторизации, ПараметрыФормы, СтруктурныеЕдиницы);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти