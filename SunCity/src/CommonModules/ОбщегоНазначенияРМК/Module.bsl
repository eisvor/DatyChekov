
///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область КомпоновкаДанных

// Находит среди элементов полей СКД поле по имени.
//
// Параметры:
//  Элементы - ПолеКомпоновкиДанных - поля СКД.
//  Имя - Строка - имя поля СКД.
//  Кэш - Соответствие - соответствие полей и наименований СКД.
//
// Возвращаемое значение:
//  ПолеКомпоновкиДанных - поле СКД по полному имени.
//
Функция НайтиПолеСКДПоИмени(Элементы, Имя, Кэш = Неопределено) Экспорт
	
	Если Кэш <> Неопределено Тогда
		Элемент = Кэш.Получить(Имя);
		
		Если Элемент <> Неопределено Тогда
			Возврат Элемент;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Элемент Из Элементы Цикл
		
		Если ВРЕГ(Строка(Элемент.Поле)) = ВРЕГ(Имя) Тогда
			
			Если Кэш <> Неопределено Тогда
				Кэш.Вставить(Имя, Элемент);
			КонецЕсли;
			
			Возврат Элемент;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции
// Находит среди элементов полей СКД поле по полному имени.
//
// Параметры:
//  Элементы - ПолеКомпоновкиДанных - поля СКД.
//  ПолноеИмя - Строка - полное имя поля СКД.
//  Кэш - Соответствие - соответствие полей и наименований СКД.
//
// Возвращаемое значение:
//	ПолеКомпоновкиДанных - поле СКД по полному имени.
//
Функция НайтиПолеСКДПоПолномуИмени(Элементы, ПолноеИмя, Кэш = Неопределено) Экспорт
	
	Если Кэш <> Неопределено Тогда
		
		Поле = Кэш.Получить(ПолноеИмя);
		Если Поле <> Неопределено Тогда
			Возврат Поле;
		КонецЕсли;
		
	КонецЕсли;
	
	МассивЧастейИмен = МассивСоставляющихИмени(ПолноеИмя);
	КоличествоЧастей = МассивЧастейИмен.Количество();
	
	ТекущееИмя = МассивЧастейИмен[0];
	Поле = НайтиПолеСКДПоИмени(Элементы, ТекущееИмя, Кэш);
	
	Если Поле = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Сч = 2 По КоличествоЧастей Цикл
		
		ТекущееИмя = СтрШаблон("%1.%2", ТекущееИмя, МассивЧастейИмен[Сч-1]);
		Поле = НайтиПолеСКДПоИмени(Поле.Элементы, ТекущееИмя, Кэш);
		
		Если Поле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Кэш <> Неопределено Тогда
		Кэш.Вставить(ПолноеИмя, Поле);
	КонецЕсли;
	
	Возврат Поле;
	
КонецФункции

// Записывает значение в создаваемую запись XML.
//
// Параметры:
//  Значение - Произвольный - значение для записи в XML.
//
// Возвращаемое значение:
//  ЗаписьXML - запись XML по значению
//
Функция ПолучитьXML(Значение) Экспорт
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Запись, Значение);
	Возврат Запись.Закрыть();
	
КонецФункции

#КонецОбласти

#Область ФормированиеПечатныхФорм

// Возвращает заголовок документа для печатных форм.
//
// Параметры:
//  Шапка - Структура - реквизиты документа;
//  НазваниеДокумента - Строка - представление документа для печати;
//  ФорматДаты - строка - формат даты.
//
// Возвращаемое значение:
//  ЗаголовокДокумента - Строка.
//
Функция СформироватьЗаголовокДокумента(Шапка, НазваниеДокумента = "", ФорматДаты = "") Экспорт
	
	Если ПустаяСтрока(НазваниеДокумента)
		И Шапка.Свойство("Представление")
		И ЗначениеЗаполнено(Шапка.Представление) Тогда
		
		ПоложениеНомера = Найти(Шапка.Представление, Шапка.Номер);
		
		Если ПоложениеНомера > 0 Тогда
			НазваниеДокумента = СокрЛП(Лев(Шапка.Представление, ПоложениеНомера-1));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ФорматДаты) Тогда
		ФорматДаты = НСтр("ru = 'ДЛФ=D'");
	КонецЕсли;
	
	ЗаголовокДокумента = СтрШаблон(НСтр("ru = '%1 № %2 от %3 г.'"),
		НазваниеДокумента,
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Ложь, Истина),
		Формат(Шапка.Дата, ФорматДаты));
	
	Возврат ЗаголовокДокумента;
	
КонецФункции

// Устарела.Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо   - организация или физическое лицо, о котором собираются сведения.
//  ДатаПериода - дата, на которую выбираются сведения о ЮрФизЛице.
//  ДляФизЛицаТолькоИнициалы - Для физ. лица выводить только инициалы имени и отчества.
//  БанковскийСчет - Банковский счет, если счет не основной.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода, ДляФизЛицаТолькоИнициалы = Истина,
	Знач БанковскийСчет = Неопределено) Экспорт
	Возврат Неопределено;
КонецФункции

// Функция возвращает представление номенклатуры для печати.
//
// Параметры:
// 		НаименованиеНоменклатуры - Строка
// 		Характеристика - Строка
// 		Упаковка - Строка
// 		Серия - Строка
// 		Содержание - Строка
//
// Возвращаемое значение:
// 		Строка - Представление номенклатуры для печати.
//
Функция ПолучитьПредставлениеНоменклатурыДляПечати(
	НаименованиеНоменклатуры,
	Характеристика,
	Упаковка = Неопределено,
	Серия = Неопределено,
	Содержание = Неопределено) Экспорт
	
	ПредставлениеНоменклатуры = СокрЛП(НаименованиеНоменклатуры);
	
	Если ЗначениеЗаполнено(Содержание) Тогда
		
		ПредставлениеНоменклатуры = Содержание;
		
	ИначеЕсли (ЗначениеЗаполнено(Характеристика) И НЕ Характеристика = "<>")
		ИЛИ ЗначениеЗаполнено(Упаковка)
		ИЛИ ЗначениеЗаполнено(Серия) Тогда
		
		ТекстВСкобках = НСтр("ru = ''");
		
		Если ЗначениеЗаполнено(Характеристика) Тогда
			ТекстВСкобках = СтрШаблон(НСтр("ru = '%1, %2'"), ТекстВСкобках, Характеристика);
		КонецЕсли;
		Если ЗначениеЗаполнено(Упаковка) Тогда
			ТекстВСкобках = СтрШаблон(НСтр("ru = '%1, %2'"), ТекстВСкобках, Упаковка);
		КонецЕсли;
		Если ЗначениеЗаполнено(Серия) Тогда
			ТекстВСкобках = СтрШаблон(НСтр("ru = '%1, %2'"), ТекстВСкобках, Серия);
		КонецЕсли;
		ПредставлениеНоменклатуры = СтрШаблон(НСтр("ru = '%1 (%2)'"), ПредставлениеНоменклатуры, Сред(ТекстВСкобках, 3));
		
	КонецЕсли;
	
	Возврат ПредставлениеНоменклатуры;
	
КонецФункции

// Конструктор для параметра КоллекцияПечатныхФорм процедуры Печать.
//
// Параметры:
//  Идентификаторы - Строка, Массив - имена печатных форм.
//
// Возвращаемое значение:
//  ТаблицаЗначений - пустая коллекция печатных форм:
//   * ИмяМакета - Строка - идентификатор печатной формы;
//   * ИмяВРЕГ - Строка - идентификатор в верхнем регистре символов для быстрого поиска;
//   * СинонимМакета - Строка - представление печатной формы;
//   * ТабличныйДокумент - ТабличныйДокумент - печатная форма;
//   * Экземпляров - Число - количество копий, которое необходимо вывести на печать;
//   * Картинка - Картинка - (не используется);
//   * ПолныйПутьКМакету - Строка - используется для быстрого перехода к редактированию макета печатной формы;
//   * ИмяФайлаПечатнойФормы - Строка - имя файла;
//                           - Соответствие из КлючИЗначение - имена файлов для каждого объекта:
//                              ** Ключ - ЛюбаяСсылка - ссылка на объект печати;
//                              ** Значение - Строка - имя файла;
//   * ОфисныеДокументы - Соответствие из КлючИЗначение - коллекция печатных форм в формате офисных документов:
//                         ** Ключ - Строка - адрес во временном хранилище двоичных данных печатной формы;
//                         ** Значение - Строка - имя файла печатной формы.
////
Функция ПодготовитьКоллекциюПечатныхФорм(Знач Идентификаторы) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Для Каждого ИмяКолонки Из ИменаПолейКоллекцииПечатныхФорм() Цикл
		Результат.Колонки.Добавить(ИмяКолонки);
	КонецЦикла;
	
	Если ТипЗнч(Идентификаторы) = Тип("Строка") Тогда
		Идентификаторы = СтрРазделить(Идентификаторы, ",");
	КонецЕсли;
	
	Для Каждого Идентификатор Из Идентификаторы Цикл
		
		ПечатнаяФорма = Результат.Найти(Идентификатор, "ИмяМакета");
		Если ПечатнаяФорма = Неопределено Тогда
			
			ПечатнаяФорма = Результат.Добавить();
			ПечатнаяФорма.ИмяМакета = Идентификатор;
			ПечатнаяФорма.ИмяВРЕГ = ВРег(Идентификатор);
			ПечатнаяФорма.Экземпляров = 1;
			
		Иначе
			ПечатнаяФорма.Экземпляров = ПечатнаяФорма.Экземпляров + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Индексы.Добавить("ИмяВРЕГ");
	Возврат Результат;
	
КонецФункции

//  Формирует представление ФИО по исходным данным, либо по набору полей, когда
//  исходные данные не являются физическим лицом или строковым литералом.
//
// Параметры:
//  Объект - Строка, СправочникСсылка.ФизическиеЛица, ПроизвольныйТип - исходные данные.
//  Фамилия - Строка. 
//  Имя - Строка.
//  Отчество - Строка.
//
// Возвращаемое значение:
//  Результат - Строка
//
Функция ФамилияИнициалыФизЛица(Объект, Фамилия = " ", Имя = " ", Отчество = " ") Экспорт

	ТипОбъекта = ТипЗнч(Объект);
	
	Если ТипОбъекта = Тип("Строка") Тогда
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект), СтрШаблон(НСтр("ru = '%1'"), " "));
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ФизическиеЛица")
		ИЛИ ТипОбъекта = Тип("СправочникОбъект.ФизическиеЛица") Тогда
			ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект.Наименование),
			СтрШаблон(НСтр("ru = '%1'"), " "));
	Иначе
		
	// Используем возможно переданные отдельные строки.
		СокращениеОтчества = ?(Не ПустаяСтрока(Отчество), СтрШаблон( НСтр("ru = '%1.'"), Лев(Отчество, 1)), НСтр("ru = ''"));
		СокращениеИмениИОтчества = ?(Не ПустаяСтрока(Имя),
			СтрШаблон(" %1. %2", Лев(Имя, 1), СокращениеОтчества), НСтр("ru = ''"));
			
		Возврат ?(Не ПустаяСтрока(Фамилия),
			СтрШаблон( НСтр("ru = '%1 %2'"), Фамилия, СокращениеИмениИОтчества), НСтр("ru = ''"));
		
	КонецЕсли;
	
	КоличествоПодстрок	= ФИО.Количество();
	Фамилия				= ?(КоличествоПодстрок > 0, ФИО[0], "");
	Имя					= ?(КоличествоПодстрок > 1, ФИО[1], "");
	Отчество			= ?(КоличествоПодстрок > 2, ФИО[2], "");
	
	СокращениеОтчества = ?(Не ПустаяСтрока(Отчество), СтрШаблон( НСтр("ru = '%1.'"), Лев(Отчество, 1)), НСтр("ru = ''"));
	СокращениеИмениИОтчества = ?(Не ПустаяСтрока(Имя),
		СтрШаблон(" %1. %2", Лев(Имя, 1), СокращениеОтчества), НСтр("ru = ''"));
		
	Возврат ?(Не ПустаяСтрока(Фамилия),
		СтрШаблон( НСтр("ru = '%1 %2'"), Фамилия, СокращениеИмениИОтчества), НСтр("ru = ''"));

КонецФункции

#КонецОбласти

#Область Запреты_продаж_ПрограммныйИнтерфейс

// Возвращает таблицу значений с запретами продаж с отбором по организации на дату 
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//  ДатаПроверки - ДатаВремя
//
// Возвращаемое значение:
//  Результат - Выборка
//
Функция АктуальныеЗапретыПродаж(Организация, ДатаПроверки) Экспорт
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(ДатаПроверки) Тогда
	
		ТекстЗапросаЗапретов = ТекстЗапросаДействующихЗапретовПродаж();
		Запрос = Новый Запрос(ТекстЗапросаЗапретов);
		Запрос.УстановитьПараметр("ТекущаяДата", ДатаПроверки);
		Запрос.УстановитьПараметр("Организация", Организация);
		Результат = Запрос.Выполнить().Выбрать();
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак использования запретов продаж по данным сервера лояльности
//
// Возвращаемое значение:
//  Результат - Булево
//
Функция ИспользоватьОграниченияПродажРМК() Экспорт
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакИспользованияОграниченийПродажРМК(Результат);
	Возврат Результат;
	
КонецФункции

// Возвращает признак использования запретов продаж, поставляемых конфигурацией
//
// Возвращаемое значение:
//  Результат - Булево
//
Функция ИспользоватьПоставляемыеОграниченияПродаж() Экспорт
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакИспользованияПоставляемыхОграниченийПродаж(Результат);
	Возврат Результат;
	
КонецФункции

// Проверяет наличие актуальных запретов продажи по данным кэша запретов.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура, по виду и особенности учета которой
//		проверяется наличие запрета продаж на текущий момент.
//  КэшЗапретовПродаж - ДанныеФормыКоллекция - перечень действующих запретов продаж на текущий момент.
//
// Возвращаемое значение:
//  Результат - Структура.
//
Функция НаличиеЗапретовПродажи(Номенклатура, КэшЗапретовПродаж) Экспорт
	
	Результат = Новый Структура;
	ТаблицаТовары = Новый ТаблицаЗначений;
	МассивТоваров = Новый Массив;
	МассивТоваров.Добавить(Номенклатура);
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьТаблицуТовары(МассивТоваров, ТаблицаТовары);
	Если ТаблицаТовары.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВидНоменклатуры = ТаблицаТовары[0].ВидНоменклатуры;
	ОсобенностьУчетаНоменклатуры = ТаблицаТовары[0].ОсобенностьУчета;
	
	Возврат ОбщегоНазначенияРМККлиентСервер.НаличиеЗапретовПродажи(ВидНоменклатуры,
		ОсобенностьУчетаНоменклатуры,
		КэшЗапретовПродаж);
	
КонецФункции

// Проверяет наличие разрешения редактирования запретов продаж по данным настроек РМК
//
// Возвращаемое значение:
//  Результат - Булево
//
Функция РазрешеноРедактироватьЗапретыПродаж() Экспорт

	Результат = Истина;
	
	ТекущиеНастройкиРабочегоМеста = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	
	Если ЗначениеЗаполнено(ТекущиеНастройкиРабочегоМеста) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	НастройкиРабочегоМестаКассира.ЗапрещеноРедактированиеУсловийОграниченийПродаж КАК ЗапрещеноРедактированиеУсловийОграниченийПродаж
		|ИЗ
		|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
		|ГДЕ
		|	НастройкиРабочегоМестаКассира.РабочееМесто = &РабочееМесто");
		Запрос.УстановитьПараметр("РабочееМесто", ТекущиеНастройкиРабочегоМеста);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Результат = НЕ Выборка.ЗапрещеноРедактированиеУсловийОграниченийПродаж;
		КонецЕсли;
		
	КонецЕсли;

	ИспользоватьПоставляемыеОграничения = ИспользоватьПоставляемыеОграниченияПродаж();
	Результат = Результат И НЕ ИспользоватьПоставляемыеОграничения;
	
	Возврат Результат;

КонецФункции

// Возвращает значения адреса и имени пользователя сервера лояльности
//
// Параметры:
//  НастройкаРабочегоМестаКассира - СправочникСсылка.НастройкиРМК - исходные данные для получения значений
//
// Возвращаемое значение:
//  Результат - Структура:
//		*АдресСервера - Строка
//		*Логин - Строка
//		*Пароль - Строка
//		*Таймаут - Число
//
Функция ЗначенияПараметровСервераЛояльности(НастройкаРабочегоМестаКассира = Неопределено) Экспорт

	Результат = Новый Структура();
	Результат.Вставить("АдресСервера");
	Результат.Вставить("Логин");
	Результат.Вставить("Пароль");
	Результат.Вставить("Таймаут", 0);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерверЛояльностиПолучательДанных") Тогда
		
		Запрос = Новый Запрос;
		
		Если НЕ ЗначениеЗаполнено(НастройкаРабочегоМестаКассира) Тогда
			
			Запрос.Текст = "ВЫБРАТЬ
			|	НастройкиРабочегоМестаКассира.Ссылка КАК НастройкаРабочегоМестаКассира
			|ИЗ
			|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
			|ГДЕ
			|	НастройкиРабочегоМестаКассира.РабочееМесто = &ТекущееРабочееМесто
			|	И НЕ НастройкиРабочегоМестаКассира.ПометкаУдаления";
			Запрос.УстановитьПараметр("ТекущееРабочееМесто", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				НастройкаРабочегоМестаКассира = Выборка.НастройкаРабочегоМестаКассира;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НастройкаРабочегоМестаКассира) Тогда
			
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаРабочегоМестаКассира,
				"АдресСервераЛояльности,ПользовательСервераЛояльности,РаботаВРежимеМедленногоСоединения,ТаймаутСерверЛояльности");
			Результат.АдресСервера = Реквизиты.АдресСервераЛояльности;
			Результат.Логин = Реквизиты.ПользовательСервераЛояльности;
			Если Реквизиты.РаботаВРежимеМедленногоСоединения Тогда
				Результат.Таймаут = Реквизиты.ТаймаутСерверЛояльности;
			КонецЕсли;
			
			Результат.Пароль = ПарольСервераЛояльности(НастройкаРабочегоМестаКассира);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак использования запретов продаж.
//
// Возвращаемое значение:
//  Булево - признак использования запретов продаж.
//
Функция ИспользоватьЗапретыПродаж() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("УдалитьИспользоватьЗапретПродаж");
	
КонецФункции

// Обновляет регистр сведений запретов продаж по поставляемым (встроенным) конфигурацией ограничениям 
//
// Параметры:
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК- торговый объект для отбора перечня ограничений.
//  Результат - Структура:
//  	* КомментарийОбновленияЗапретов - Строка - при наличии ошибок обновления данных содержит пояснение.
//
Процедура ОбновитьОграниченияПродажИзПоставляемыхДанных(ТорговыйОбъект, Результат) Экспорт
	ОбщегоНазначенияРМКПереопределяемый.ОбновитьОграниченияПродажИзПоставляемыхДанных(ТорговыйОбъект, Результат);
КонецПроцедуры

// Возвращает количество записей запретов продаж из регистра "УсловияЗапретаПродажРМК".
//
// Возвращаемое значение:
//  Число - количество записей в регистре.
//
Функция КоличествоЗаписейЗапретовПродаж() Экспорт
	
	Результат = 0;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоЗаписей
	|ИЗ
	|	РегистрСведений.УсловияЗапретаПродажРМК КАК УсловияЗапретаПродаж");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.КоличествоЗаписей;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КонтрольПродаж

// Обработчик подписки события "ПриЗаписи" палитры товаров для обновления списка палитр контроля продаж.
//
// Параметры:
//  Источник - СправочникОбъект.ПалитраТоваровРМК.
//  Отказ  - Булево.
//
Процедура ОбновитьСписокПалитрыКонтроляПродажПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.ВложенныеПалитрыИзменены Тогда
		
		ОбновитьСписокПалитрыКонтроляПродаж(Источник.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает не записанный объект справочника "ПалитратоваровРМК" с заполненными стандартными реквизитами шапки.
//
// Параметры:
//  СлужебнаяПалитра - СправочникСсылка.ПалитраТоваровРМК, Неопределено - устанавливаемая новому объекту ссылка.
//  НаименованиеПалитры - Строка.
//
Функция ПолучитьШаблонСлужебнойПалитры(СлужебнаяПалитра, НаименованиеПалитры) Экспорт

	КоличествоЭлементовВРяду = 4;
	КоличествоРядов = 3;
	ШрифтЭлементов = ШрифтыСтиля.ШрифтОбычныйПолужирный12РМК;
	
	ПалитраОбъект = Справочники.ПалитраТоваровРМК.СоздатьЭлемент();
	Если Не СлужебнаяПалитра = Неопределено Тогда
		ПалитраОбъект.УстановитьСсылкуНового(СлужебнаяПалитра);
	КонецЕсли;
	ПалитраОбъект.Наименование = НаименованиеПалитры;
	ПалитраОбъект.КоличествоЭлементовВРяду = КоличествоЭлементовВРяду;
	ПалитраОбъект.КоличествоРядов = КоличествоРядов;
	ПалитраОбъект.ШрифтЭлементовПодбора = Общегоназначения.ЗначениеВСтрокуXML(ШрифтЭлементов);
	
	Возврат ПалитраОбъект;
	
КонецФункции

// Возвращает шаблон описания данных для создания контроля продаж по данным регистра запретов продаж.
//
// Возвращаемое значение:
//  ОписаниеКонтроля - Структура.
//
Функция ШаблонОписанияКонтроля() Экспорт
	
	ТаблицаОписанияОтбораНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаОписанияОтбораНоменклатуры.Колонки.Добавить("ВидНоменклатуры",
		Метаданные.ОпределяемыеТипы.ВидНоменклатурыРМК.Тип);
	ТаблицаОписанияОтбораНоменклатуры.Колонки.Добавить("ОсобенностьУчета",
		Метаданные.ОпределяемыеТипы.ОсобенностиУчетаНоменклатурыРМК.Тип);
	ТаблицаОписанияОтбораНоменклатуры.Колонки.Добавить("СлужебнаяПалитра",
		Новый ОписаниеТипов("СправочникСсылка.ПалитраТоваровРМК"));
		
	ИменаКолонок = "НачалоПериода,КонецПериода,ДеньНедели,ВремяНачала,ВремяОкончания";
	ТаблицаКонтроля = Справочники.КонтрольПродаж.ПустаяСсылка().КонтрольПродаж.ВыгрузитьКолонки(ИменаКолонок);
	
	ОписаниеКонтроля = Новый Структура();
	ОписаниеКонтроля.Вставить("ГлавнаяСлужебнаяПалитра", Справочники.ПалитраТоваровРМК.ПустаяСсылка());
	ОписаниеКонтроля.Вставить("ОписаниеОтбораНоменклатуры", ТаблицаОписанияОтбораНоменклатуры);
	ОписаниеКонтроля.Вставить("ТорговыеОбъекты", Новый Массив);
	ОписаниеКонтроля.Вставить("ВсеТорговыеОбъекты", Ложь);
	ОписаниеКонтроля.Вставить("ВсяНоменклатура", Ложь);
	ОписаниеКонтроля.Вставить("СтрокиКонтроля", ТаблицаКонтроля);
	
	Возврат ОписаниеКонтроля;
	
КонецФункции

// Создает контроли продаж при обновлении системы по данным регистра сведений 
// "УсловияЗапретаПродажРМК"
//
Процедура СоздатьКонтрольПродажПоДаннымРегистраЗапретовПродаж() Экспорт
	
	ГУИДВидКонтроляЗапретПродаж = УникальныйИдентификаторВидаКонтроляЗапретПродаж();
	ВидКонтроляЗапретПродаж = Справочники.ВидыКонтроля.ПолучитьСсылку(ГУИДВидКонтроляЗапретПродаж);
	Если Не Общегоназначения.СсылкаСуществует(ВидКонтроляЗапретПродаж) Тогда
		
		МассивОписанийКонтроля = Новый Массив;
		ОбщегоНазначенияРМКПереопределяемый.ПодготовитьПреобразованиеЗапретовПродажВКонтрольПродаж(МассивОписанийКонтроля);
		
		ОбъединитьКонтрольСОдинаковымиУсловиямиИТорговымиОбъектами(МассивОписанийКонтроля);
		ОбъединитьКонтрольСОдинаковымиУсловиямиИПалитрами(МассивОписанийКонтроля);
		
		ТекстШаблона = НСтр("ru = 'Запрещена продажа товаров группы ""[ГруппаТоваров]"" [ОписаниеПериода]'");
		
		НачатьТранзакцию();
		Попытка
			СоздатьВидКонтроляЗапретПродаж(ВидКонтроляЗапретПродаж);
			НомерКонтроля = 0;
			Для Каждого ОписаниеКонтроля Из МассивОписанийКонтроля Цикл
				НомерКонтроля = НомерКонтроля + 1;
				
				СформироватьЗапретПродаж(ОписаниеКонтроля, ВидКонтроляЗапретПродаж, НомерКонтроля);
			КонецЦикла;
		
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ОбщаяИнформацияОбОшибке = НСтр("ru = 'Ошибка при создании контроля при обновлении - запретов продаж.'",
				ОбщегоНазначения.КодОсновногоЯзыка()); 
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ОбщаяИнформацияОбОшибке,
					УровеньЖурналаРегистрации.Ошибка, , ,
					ПодробноеПредставлениеОшибки);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет контроль продаж "Проверка возраста 18" по умолчанию.
//
// Параметры:
//  КонтрольПродажПроверкаВозраста18 - СправочникСсылка.КонтрольПродаж.
//  СтруктураСлужебныхПалитр - Структура.
//
Процедура ЗаполнитьКонтрольПродажПроверкаВозраста18(КонтрольПродажПроверкаВозраста18,
		СтруктураСлужебныхПалитр) Экспорт
		
	НаименованиеКонтроля
		= НСтр("ru = 'Проверка возраста при продаже алкогольной и табачной продукции.'");
		
	ВидКонтроляПродажПроверкаВозраста18 = ПолучитьВидКонтроляПродажПроверкаВозраста18();
	
	КонтрольПродажОбъект = Справочники.КонтрольПродаж.СоздатьЭлемент();
	КонтрольПродажОбъект.УстановитьСсылкуНового(КонтрольПродажПроверкаВозраста18);
	КонтрольПродажОбъект.Наименование = НаименованиеКонтроля;
	КонтрольПродажОбъект.Локальный = Истина;
	КонтрольПродажОбъект.Использование = Истина;
	КонтрольПродажОбъект.Палитра = СтруктураСлужебныхПалитр.ПалитраПроверкиВозраста;
	КонтрольПродажОбъект.ДляВсехТорговыхОбъектов = Истина;
	
	НоваяСтрокаПалитры = КонтрольПродажОбъект.ПалитрыКонтроляПродаж.Добавить();
	НоваяСтрокаПалитры.Палитра = СтруктураСлужебныхПалитр.ПалитраПроверкиВозраста;
	
	ДобавитьСтрокуПалитрыВКонтрольПродаж(КонтрольПродажОбъект, СтруктураСлужебныхПалитр.АлкогольнаяПродукция);
	ДобавитьСтрокуПалитрыВКонтрольПродаж(КонтрольПродажОбъект, СтруктураСлужебныхПалитр.ТабачнаяПродукция);
	ДобавитьСтрокуПалитрыВКонтрольПродаж(КонтрольПродажОбъект, СтруктураСлужебныхПалитр.АльтернативныйТабак);
	
	НоваяСтрокаВидаКонтроля = КонтрольПродажОбъект.КонтрольПродаж.Добавить();
	НоваяСтрокаВидаКонтроля.ВидКонтроля = ВидКонтроляПродажПроверкаВозраста18;
	
	КонтрольПродажОбъект.Записать();
	
КонецПроцедуры

// Заполняет контроль продаж "Запрет оплаты бонусами" по умолчанию.
//
// Параметры:
//  КонтрольПродажЗапретОплатыБонусами - СправочникСсылка.КонтрольПродаж.
//  СтруктураСлужебныхПалитр - Структура.
//
Процедура ЗаполнитьКонтрольПродажЗапретОплатыБонусами(КонтрольПродажЗапретОплатыБонусами,
		СтруктураСлужебныхПалитр) Экспорт
	
	НаименованиеКонтроля
		= НСтр("ru = 'Запрет оплаты бонусами, скидками табачной и алкогольной продукцию, подарочных сертификатов.'");
	
	КонтрольПродажОбъект = Справочники.КонтрольПродаж.СоздатьЭлемент();
	КонтрольПродажОбъект.УстановитьСсылкуНового(КонтрольПродажЗапретОплатыБонусами);
	КонтрольПродажОбъект.Наименование = НаименованиеКонтроля;
	КонтрольПродажОбъект.Локальный = Истина;
	КонтрольПродажОбъект.Использование = Истина;
	КонтрольПродажОбъект.Палитра = СтруктураСлужебныхПалитр.ПалитраЗапретаОплатыБонусами;
	КонтрольПродажОбъект.ДляВсехТорговыхОбъектов = Истина;
	
	НоваяСтрокаПалитры = КонтрольПродажОбъект.ПалитрыКонтроляПродаж.Добавить();
	НоваяСтрокаПалитры.Палитра = СтруктураСлужебныхПалитр.ПалитраЗапретаОплатыБонусами;
	
	ДобавитьСтрокуПалитрыВКонтрольПродаж(КонтрольПродажОбъект, СтруктураСлужебныхПалитр.АлкогольнаяПродукция);
	ДобавитьСтрокуПалитрыВКонтрольПродаж(КонтрольПродажОбъект, СтруктураСлужебныхПалитр.ТабачнаяПродукция);
	ДобавитьСтрокуПалитрыВКонтрольПродаж(КонтрольПродажОбъект, СтруктураСлужебныхПалитр.АльтернативныйТабак);
	ДобавитьСтрокуПалитрыВКонтрольПродаж(КонтрольПродажОбъект, СтруктураСлужебныхПалитр.ПодарочныеСертификаты);
	
	НоваяСтрокаВидаКонтроля = КонтрольПродажОбъект.КонтрольПродаж.Добавить();
	НоваяСтрокаВидаКонтроля.ВидКонтроля = Справочники.ВидыКонтроля.ЗапретОплатыБонусами;
	
	НоваяСтрокаВидаКонтроля = КонтрольПродажОбъект.КонтрольПродаж.Добавить();
	НоваяСтрокаВидаКонтроля.ВидКонтроля = ПолучитьВидКонтроляПродажЗапретРучныхСкидок();
	
	КонтрольПродажОбъект.Записать();
	
КонецПроцедуры

// Заполняет вид контроля "Запрет оплаты бонусами" по умолчанию.
//
// Параметры:
//  ВидКонтроляЗапрет - СправочникСсылка.ВидыКонтроля.
//
Процедура ЗаполнитьВидКонтроляЗапретОплатыБонусами(ВидКонтроляЗапрет) Экспорт
	
	Перем ВидКонтроляОбъект;
	
	ТекстПредупреждения
		= НСтр("ru = 'Бонусами нельзя оплатить алкогольную, табачную продукцию и подарочные сертификаты.'");
	Если ВидКонтроляЗапрет = Неопределено Тогда
		ВидКонтроляОбъект = Справочники.ВидыКонтроля.СоздатьЭлемент();
		ВидКонтроляОбъект.ИмяПредопределенныхДанных = "ЗапретОплатыБонусами";
		ВидКонтроляОбъект.Наименование = НСтр("ru = 'Запрет оплаты бонусами'");
	Иначе
		ВидКонтроляОбъект = ВидКонтроляЗапрет.ПолучитьОбъект();
	КонецЕсли;
	
	ВидКонтроляОбъект = ВидКонтроляЗапрет.ПолучитьОбъект();
	ВидКонтроляОбъект.ТипКонтроля = Перечисления.ТипыКонтроля.ЗапретВидаОплаты;
	ВидКонтроляОбъект.ТекстШаблонаПредупреждения = ТекстПредупреждения;
	ВидКонтроляОбъект.Записать();
	Если ВидКонтроляЗапрет = Неопределено Тогда
		ВидКонтроляЗапрет = ВидКонтроляОбъект.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру со служебной палитрой.
//
// Возвращаемое значение:
//  СлужебнаяПалитра - Структура.
//
Функция ПодготовитьСлужебныеПалитрыДляКонтроляПродаж() Экспорт
	
	ТипыСлужебнойПалитры = ТипыСлужебнойПалитры();
	АлкогольнаяПродукцияНаименование = НСтр("ru = 'Алкогольная продукция'");
	ТабачнаяПродукцияНаименование = НСтр("ru = 'Табачная продукция'");
	АльтернативныйТабакНаименование = НСтр("ru = 'Альтернативный табачная'");
	ПодарочныйСертификатНаименование = НСтр("ru = 'Подарочный сертификат'");
	ПроверкаВозрастаНаименование = НСтр("ru = 'Алкогольная и табачная продукция'");
	ЗапретОплатыБонусамиНаименование
		= НСтр("ru = 'Алкогольная, табачная продукция и подарочные сертификаты'");
	
	ГУИДПалитраАлкогольнаяПродукция = Новый УникальныйИдентификатор("b7e8b691-1a5f-4991-a4de-565ae95d08b1");
	ГУИДПалитраТабачнаяПродукция = Новый УникальныйИдентификатор("f6195eb8-e4e6-45e1-ba6c-d56d13919e8c");
	ГУИДПалитраАльтернативныйТабак = Новый УникальныйИдентификатор("0e371407-a599-4474-8c1f-f84de6126ed8");
	ГУИДПалитраПодарочныеСертификаты = Новый УникальныйИдентификатор("07588d6d-aac8-4987-93a4-c629a1d4ef97");
	ГУИДПалитраПроверкаВозраста = Новый УникальныйИдентификатор("3e301f52-2ef8-4c38-bc28-ea1ee9041e82");
	ГУИДПалитраЗапретОплатыБонусами = Новый УникальныйИдентификатор("0c085ac7-5c18-4ba9-8daa-0575357267e3");
	
	СлужебнаяПалитраАлкогольная = ПолучитьСлужебнуюПалитру(АлкогольнаяПродукцияНаименование,
		ГУИДПалитраАлкогольнаяПродукция,
		ТипыСлужебнойПалитры.АлкогольнаяПродукция);
	
	СлужебнаяПалитраТабачная = ПолучитьСлужебнуюПалитру(ТабачнаяПродукцияНаименование,
		ГУИДПалитраТабачнаяПродукция,
		ТипыСлужебнойПалитры.ТабачнаяПродукция);
	
	СлужебнаяПалитраТабакАльтернативный = ПолучитьСлужебнуюПалитру(АльтернативныйТабакНаименование,
		ГУИДПалитраАльтернативныйТабак,
		ТипыСлужебнойПалитры.АльтернативныйТабак);
	
	СлужебнаяПалитраПодарочныйСертификат = ПолучитьСлужебнуюПалитру(ПодарочныйСертификатНаименование,
		ГУИДПалитраПодарочныеСертификаты,
		ТипыСлужебнойПалитры.ПодарочныеСертификаты);
	
	ПалитраПроверкаВозраста = Справочники.ПалитраТоваровРМК.ПолучитьСсылку(ГУИДПалитраПроверкаВозраста);
	Если Не Общегоназначения.СсылкаСуществует(ПалитраПроверкаВозраста) Тогда
		ПалитраОбъект = ПолучитьШаблонСлужебнойПалитры(ПалитраПроверкаВозраста, ПроверкаВозрастаНаименование);
		
		ДобавитьВСлужебнуюПалитруВложеннуюПалитру(ПалитраОбъект, СлужебнаяПалитраАлкогольная, 1);
		ДобавитьВСлужебнуюПалитруВложеннуюПалитру(ПалитраОбъект, СлужебнаяПалитраТабачная, 2);
		ДобавитьВСлужебнуюПалитруВложеннуюПалитру(ПалитраОбъект, СлужебнаяПалитраТабакАльтернативный, 3);
		
		Если ПалитраОбъект.Состав.Количество() > 0 Тогда
			ПалитраОбъект.Записать();
		Иначе
			ПалитраПроверкаВозраста = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПалитраЗапретОплатыБонусами = Справочники.ПалитраТоваровРМК.ПолучитьСсылку(ГУИДПалитраЗапретОплатыБонусами);
	Если Не Общегоназначения.СсылкаСуществует(ПалитраЗапретОплатыБонусами) Тогда
		ПалитраОбъект = ПолучитьШаблонСлужебнойПалитры(ПалитраЗапретОплатыБонусами, ЗапретОплатыБонусамиНаименование);
		
		ДобавитьВСлужебнуюПалитруВложеннуюПалитру(ПалитраОбъект, СлужебнаяПалитраАлкогольная, 1);
		ДобавитьВСлужебнуюПалитруВложеннуюПалитру(ПалитраОбъект, СлужебнаяПалитраТабачная, 2);
		ДобавитьВСлужебнуюПалитруВложеннуюПалитру(ПалитраОбъект, СлужебнаяПалитраТабакАльтернативный, 3);
		ДобавитьВСлужебнуюПалитруВложеннуюПалитру(ПалитраОбъект, СлужебнаяПалитраПодарочныйСертификат, 4);
		
		Если ПалитраОбъект.Состав.Количество() > 0 Тогда
			ПалитраОбъект.Записать();
		Иначе
			ПалитраЗапретОплатыБонусами = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	СлужебнаяПалитра = Новый Структура();
	СлужебнаяПалитра.Вставить("АлкогольнаяПродукция", СлужебнаяПалитраАлкогольная);
	СлужебнаяПалитра.Вставить("ТабачнаяПродукция", СлужебнаяПалитраТабачная);
	СлужебнаяПалитра.Вставить("АльтернативныйТабак", СлужебнаяПалитраТабакАльтернативный);
	СлужебнаяПалитра.Вставить("ПодарочныеСертификаты", СлужебнаяПалитраПодарочныйСертификат);
	СлужебнаяПалитра.Вставить("ПалитраПроверкиВозраста", ПалитраПроверкаВозраста);
	СлужебнаяПалитра.Вставить("ПалитраЗапретаОплатыБонусами", ПалитраЗапретОплатыБонусами);
	
	Возврат СлужебнаяПалитра;
	
КонецФункции

// Возвращает структуру с данными контроля продаж для переданного списка товаров
//
// Параметры:
//  ТаблицаТоваров - ТаблицаЗначений - таблица с товарами (Номенклатура, Характеристика),
//  ДополнительныеДанные - Структура - дополнительные параметры для отбора контроля продаж.
//
// Возвращаемое значение:
//  ДанныеКонтроляПродаж - Структура.
//  
Функция ПолучитьДанныеКонтроляПродаж(ТаблицаТоваров, ДополнительныеДанные) Экспорт
	
	ДанныеКонтроляПродаж = ИнтерфейсРМКСлужебныйКлиентСервер.ШаблонКэшаКонтроляПродаж();
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьДанныеКонтроляПродаж(ДанныеКонтроляПродаж,
		ТаблицаТоваров, ДополнительныеДанные);
	
	Возврат ДанныеКонтроляПродаж;
	
КонецФункции

#КонецОбласти

#Область ПомощникНастройкиКассовогоМеста

// Возвращает текст для отчета о подключенном оборудовании
//
// Возвращаемое значение:
//  Результат - Строка
//
Функция ТекстЗапросаДляОтчетаОПодключенномОборудовании() Экспорт
	
	Возврат "ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	КассыККМ.Наименование КАК НаименованиеКасса,
	|	КассыККМ.Владелец КАК Организация,
	|	КассыККМ.ИспользоватьБезПодключенияОборудования КАК НаличныеПОСкрыть,
	|	КассыККМ.ПодключаемоеОборудование КАК НаличныеПОСсылка
	|ПОМЕСТИТЬ ТаблицаНаличные
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.РабочееМесто = &РабочееМесто
	|	И НЕ КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ККМOffline)
	|	И КассыККМ.Владелец = &Организация
	|	И НЕ КассыККМ.ПодключаемоеОборудование = ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)
	|	И НЕ КассыККМ.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭквайринговыеТерминалы.Организация КАК Организация,
	|	МИНИМУМ(ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования) КАК ИспользоватьБезПодключенияОборудования
	|ПОМЕСТИТЬ ТаблицаЭТ
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.ТорговыйОбъект = &ТорговыйОбъект
	|	И &ИспользоватьОплатуПлатежнымиКартами
	|	И ЭквайринговыеТерминалы.Организация = &Организация
	|	И НЕ ЭквайринговыеТерминалы.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭквайринговыеТерминалы.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНаличные.КассаККМ КАК КассаККМ,
	|	ТаблицаНаличные.НаименованиеКасса КАК НаименованиеКасса,
	|	ТаблицаНаличные.Организация КАК Организация,
	|	ТаблицаНаличные.НаличныеПОСкрыть КАК НаличныеПОСкрыть,
	|	ТаблицаНаличные.НаличныеПОСсылка КАК НаличныеПОСсылка,
	|	ВЫБОР
	|		КОГДА ТаблицаЭТ.Организация ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ ""V""
	|	КОНЕЦ КАК ОплатаКартой,
	|	ЕСТЬNULL(ТаблицаЭТ.ИспользоватьБезПодключенияОборудования, ИСТИНА) КАК ОплатаКартойПОСкрыть
	|ИЗ
	|	ТаблицаНаличные КАК ТаблицаНаличные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЭТ КАК ТаблицаЭТ
	|		ПО ТаблицаНаличные.Организация = ТаблицаЭТ.Организация";
	
КонецФункции

// Возвращает текст для динамического списка КассыККМ помощника настройки кассового места
//
// Возвращаемое значение:
//  Результат - Строка
//
Функция ТекстЗапросаКассККМСОтборомПоВладельцуИСтруктурнойЕдинице() Экспорт

	Возврат "ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.Владелец = &Владелец
	|	И КассыККМ.ТорговыйОбъект = &ТорговыйОбъект
	|	И НЕ КассыККМ.ПометкаУдаления";
	
КонецФункции

// Возвращает текст запроса для данных доступных эквайринговых терминалов.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаПодключенныхЭквайринговыхТерминалов() Экспорт

	Возврат "ВЫБРАТЬ
	|	СправочникЭквайринговыеТерминалы.Ссылка КАК Ссылка,
	|	СправочникЭквайринговыеТерминалы.ПометкаУдаления КАК ПометкаУдаления,
	|	СправочникЭквайринговыеТерминалы.Код КАК Код,
	|	СправочникЭквайринговыеТерминалы.Наименование КАК Наименование,
	|	СправочникЭквайринговыеТерминалы.Организация КАК Организация,
	|	СправочникЭквайринговыеТерминалы.Касса КАК Касса,
	|	СправочникЭквайринговыеТерминалы.ТорговыйОбъект КАК ТорговыйОбъект,
	|	СправочникЭквайринговыеТерминалы.ПодключаемоеОборудование КАК ПодключаемоеОборудование,
	|	НЕ СправочникЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования КАК ОборудованиеИспользуется,
	|	СправочникЭквайринговыеТерминалы.Предопределенный КАК Предопределенный,
	|	СправочникЭквайринговыеТерминалы.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	|	1 КАК ПолеУпорядочивания,
	|	СправочникЭквайринговыеТерминалы.Недействителен КАК Недействителен,
	|	""КассаККМ"" КАК ТипКассы
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК СправочникЭквайринговыеТерминалы
	|ГДЕ
	|	НЕ СправочникЭквайринговыеТерминалы.ПометкаУдаления";
	
КонецФункции

// Возвращает текст запроса для подключенных касс ккм.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаПеречняПодключенныхКассККМ() Экспорт

	Возврат "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КассыККМ.ПодключаемоеОборудование КАК ПодключаемоеОборудование,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор) КАК ТипОборудования,
	|	КассыККМ.Владелец КАК Организация,
	|	КассыККМ.ПодключаемоеОборудование.СерийныйНомер КАК СерийныйНомер
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор)
	|	И НЕ КассыККМ.ИспользоватьБезПодключенияОборудования
	|	И НЕ КассыККМ.ПометкаУдаления
	|	И НЕ КассыККМ.ПодключаемоеОборудование = ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)
	|	И КассыККМ.РабочееМесто = &РабочееМесто
	|	И КассыККМ.ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
	|	И КассыККМ.ПодключаемоеОборудование.УстройствоИспользуется
	|	И КассыККМ.Владелец В(&Организации)
	|	И КассыККМ.ТорговыйОбъект = &ТорговыйОбъект";
	
КонецФункции

// Возвращает текст запроса эквайринговых терминалов.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаПеречняПодключенныхЭквайринговыхТерминалов() Экспорт

	Возврат "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал) КАК ТипОборудования,
	|	ЭквайринговыеТерминалы.Организация,
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование.СерийныйНомер КАК СерийныйНомер
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
	|	И ЭквайринговыеТерминалы.Касса ССЫЛКА Справочник.КассыККМ
	|	И ЭквайринговыеТерминалы.ТорговыйОбъект = &ТорговыйОбъект
	|	И НЕ ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования
	|	И НЕ ЭквайринговыеТерминалы.ПодключаемоеОборудование = ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)";
	
КонецФункции

// Возвращает текст запроса для подключенных эквайринговых терминалов с незаполненными тарифами на обслуживание.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаЭквайринговыхТерминаловСПустымиТарифамиНаОбслуживание() Экспорт

	Возврат "ВЫБРАТЬ
		|	ЭквайринговыеТерминалы.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втТерминалы
		|ИЗ
		|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
		|ГДЕ
		|	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
		|	И ЭквайринговыеТерминалы.Организация = &Организация
		|	И ЭквайринговыеТерминалы.ТорговыйОбъект = &ТорговыйОбъект
		|	И ЭквайринговыеТерминалы.Касса = &Касса
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭквайринговыеТерминалы.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.НомерСтроки) КАК КоличествоЗаписейТарифов,
		|	ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втТарифыОбслуживанияТерминалов
		|ИЗ
		|	втТерминалы КАК втТерминалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭквайринговыеТерминалы.ТарифыЗаРасчетноеОбслуживание КАК ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание
		|		ПО втТерминалы.Ссылка = ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТерминалы.Ссылка КАК Ссылка,
		|	втТарифыОбслуживанияТерминалов.КоличествоЗаписейТарифов КАК КоличествоЗаписейТарифов
		|ИЗ
		|	втТерминалы КАК втТерминалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ втТарифыОбслуживанияТерминалов КАК втТарифыОбслуживанияТерминалов
		|		ПО втТерминалы.Ссылка = втТарифыОбслуживанияТерминалов.Ссылка
		|ГДЕ
		|	ЕСТЬNULL(втТарифыОбслуживанияТерминалов.КоличествоЗаписейТарифов, 0) = 0";
	
КонецФункции

// Возвращает текст запроса для отображения результатов настройки ККМ.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДляОтображенияРезультатовНастройкиККМ() Экспорт

	Возврат "ВЫБРАТЬ
	|	Организации.Организация КАК Организация
	|ПОМЕСТИТЬ ТаблицаОрганизации
	|ИЗ
	|	&Организации КАК Организации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	КассыККМ.Наименование КАК Наименование,
	|	КассыККМ.РегистрационныйНомер КАК РегистрационныйНомер,
	|	КассыККМ.ПодключаемоеОборудование КАК ПодключаемоеОборудование,
	|	КассыККМ.ТипКассы КАК ТипКассы,
	|	КассыККМ.Владелец КАК Организация
	|ПОМЕСТИТЬ ТаблицаКассККМ
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.ТорговыйОбъект = &ТорговыйОбъект
	|	И КассыККМ.РабочееМесто = &РабочееМесто
	|	И КассыККМ.Владелец В
	|			(ВЫБРАТЬ
	|				ТаблицаОрганизации.Организация КАК Организация
	|			ИЗ
	|				ТаблицаОрганизации КАК ТаблицаОрганизации)
	|	И КассыККМ.ТипКассы В(&ТипыКассы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОрганизации.Организация КАК Организация,
	|	ЕСТЬNULL(ТаблицаКассККМ.КассаККМ, ЗНАЧЕНИЕ(Справочник.КассыККМ.ПустаяСсылка)) КАК КассаККМ,
	|	ЕСТЬNULL(ТаблицаКассККМ.Наименование, """") КАК Наименование,
	|	ЕСТЬNULL(ТаблицаКассККМ.РегистрационныйНомер, """") КАК РегистрационныйНомер,
	|	ЕСТЬNULL(ТаблицаКассККМ.ПодключаемоеОборудование, ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)) КАК ПодключаемоеОборудование,
	|	ЕСТЬNULL(ТаблицаКассККМ.ТипКассы, ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ПустаяСсылка)) КАК ТипКассы
	|ИЗ
	|	ТаблицаОрганизации КАК ТаблицаОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКассККМ КАК ТаблицаКассККМ
	|		ПО ТаблицаОрганизации.Организация = ТаблицаКассККМ.Организация";
	
КонецФункции

// Возвращает текст запроса для данных доступных эквайринговых терминалов.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаОрганизацийИПодразделений() Экспорт

	Возврат "ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТорговыеОбъекты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ТорговыеОбъекты КАК ТорговыеОбъекты
		|ГДЕ
		|	НЕ ТорговыеОбъекты.ПометкаУдаления";
	
КонецФункции

// Возвращает текст запроса признаков использования оплат картами и платежными системами
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаИспользованияВидовОплатПомощникаНастройкиКассовогоМеста() Экспорт
	
	Возврат "ВЫБРАТЬ
		|	ИспользоватьОплатуПлатежнымиКартами.Значение КАК ИспользоватьОплатуПлатежнымиКартами
		|ИЗ
		|	Константа.ИспользоватьОплатуПлатежнымиКартами КАК ИспользоватьОплатуПлатежнымиКартами";
	
КонецФункции

// Возвращает перечень доступных эквайринговых терминалов, для которых указаны кассы ККМ
// на этапе настройки РМК через интерфейс помощника настройки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложение - форма настройки помощника рабочего места кассира
//
// Возвращаемое значение:
//  Результат - Массив
//
Функция ЭквайринговыеТерминалыСККМ(Форма) Экспорт

	Результат = Новый Массив;
	ОбщегоНазначенияРМКПереопределяемый.ЭквайринговыеТерминалыСККМ(Форма, Результат);
	Возврат Результат;

КонецФункции

// Подготавливает данные для создания эквайрингового терминала через интерфейс помощника
// настройки РМК.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложение - форма настройки помощника рабочего места кассира
//
Процедура ЗаполнитьТаблицуСозданияЭквайринговыхТерминалов(Форма) Экспорт
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьТаблицуСозданияЭквайринговыхТерминалов(Форма);
КонецПроцедуры

// Выполняет конвертацию настроек РМК в настройки нового РМК
//
// Параметры:
//  ЭтотОбъект - ФормаКлиентскогоПриложение - общая форма настройки рабочего места кассира
//
Процедура КонвертироватьНастройкиСтарогоРМК(ЭтотОбъект) Экспорт
	ОбщегоНазначенияРМКПереопределяемый.КонвертироватьНастройкиСтарогоРМК(ЭтотОбъект);
КонецПроцедуры


#КонецОбласти

#Область Переопределение_аутентификации_пользователей_по_кодам_доступа_ПрограммныйИнтерфейс

// Адрес электронной почты кассира из карты лояльности, при ее наличии 
//
// Параметры:
//  Кассир - ОпределяемыйТип.КассирРМК
//
// Возвращаемое значение:
//  Результат - Строка.
//
Функция АдресЭлектроннойПочтыКассира(Кассир) Экспорт

	Результат = НСтр("ru = ''");
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьАдресЭлектроннойПочтыКассира(Кассир, Результат);
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область Локализация

// Настройка локализации картинок на форме.
// Установка картинки для команд формы "СкидкаТекущийТоварСумма", "СкидкаНаЧекСуммой".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЛокализоватьКартинки(Форма) Экспорт
	
	ПараметрыКартинок = Новый Структура;
	ПараметрыКартинок.Вставить("СкидкаНаЧекСуммой", БиблиотекаКартинок.RUB);
	ПараметрыКартинок.Вставить("СкидкаТекущийТоварСумма", БиблиотекаКартинок.RUB);
	ПараметрыКартинок.Вставить("ПодготовитьДанныеВыдачиНаличных", БиблиотекаКартинок.RUB);
	ПараметрыКартинок.Вставить("ДекорацияЛогоВнесение", БиблиотекаКартинок.РМКВнесение);
	ПараметрыКартинок.Вставить("ДекорацияЛогоВыемка", БиблиотекаКартинок.РМКВыемка);
	
	ОбщегоНазначенияРМКПереопределяемый.ЛокализоватьКартинки(ПараметрыКартинок);
	
	Форма.Элементы.СкидкаНаЧекСуммой.Картинка = ПараметрыКартинок.СкидкаНаЧекСуммой;
	Форма.Элементы.СкидкаТекущийТоварСумма.Картинка = ПараметрыКартинок.СкидкаТекущийТоварСумма;
	Форма.Команды.ПодготовитьДанныеВыдачиНаличных.Картинка = ПараметрыКартинок.ПодготовитьДанныеВыдачиНаличных;
	Форма.Элементы.ДекорацияЛогоВнесение.Картинка = ПараметрыКартинок.ДекорацияЛогоВнесение;
	Форма.Элементы.ДекорацияЛогоВыемка.Картинка = ПараметрыКартинок.ДекорацияЛогоВыемка;
	
КонецПроцедуры

// Возвращает представление валюты.
//
// Возвращаемое значение:
//  Строка - представление валюты.
//
Функция ПредставлениеВалюты() Экспорт
	
	ПредставлениеВалюты = НСтр("ru = 'руб.'");
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПредставлениеВалюты(ПредставлениеВалюты);
	
	Возврат ПредставлениеВалюты;
	
КонецФункции

// Возвращает структуру параметров национальной валюты.
//
// Возвращаемое значение:
//  ПараметрыВалюты - Структура - параметры национальной валюты.
//    Код - Строка - код валюты.
//    Наименование - Строка - наименование валюты.
//    СимвольноеПредставление - Строка - символьное представление валюты.
//
Функция ПараметрыНациональнойВалюты() Экспорт
	
	ПараметрыВалюты = Новый Структура;
	ПараметрыВалюты.Вставить("Код", НСтр("ru = '643'"));
	ПараметрыВалюты.Вставить("Наименование", НСтр("ru = 'RUB'"));
	ПараметрыВалюты.Вставить("СимвольноеПредставление", НСтр("ru = '₽'"));
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПараметрыНациональнойВалюты(ПараметрыВалюты);
	
	Возврат ПараметрыВалюты;
	
КонецФункции

#КонецОбласти

#Область Печать_заявления_на_возврат_ПрограммныйИнтерфейс

// Дополняет исходные данные для заявления на возврат 
//
// Параметры:
//  ДанныеЗаявленияНаВозврат - Структура - см. ОбщегоНазначенияРМККлиент.СтруктураЗаявленияНаВозврат()
//
Процедура ДополнитьИсходныеДанныеЗаявленияНаВозврат(ДанныеЗаявленияНаВозврат) Экспорт
	
	Если ЗначениеЗаполнено(ДанныеЗаявленияНаВозврат) Тогда
		ОбщегоНазначенияРМКПереопределяемый.ДополнитьИсходныеДанныеЗаявленияНаВозврат(ДанныеЗаявленияНаВозврат);
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает на печать бланк заявления на возврат товаров
//
// Параметры:
//  ДанныеЗаявленияНаВозврат - Структура:
//		*Товары - Массив,
//		*ФИОПокупателя - Строка,
//		*ДатаРождения - Дата,
//		*УдостоверениеЛичности - Строка,
//		*СуммаДокумента - Число,
//		*ЧекПродажи - ОпределяемыйТип.ЧекККМРМК,
//		*Магазин - ОпределяемыйТип.ТорговыйОбъектРМК,
//		*ЧекНомер - Число,
//		*ЧекДата - Дата,
//		*Кому - Строка,
//		*ОтКого - Строка,
//		*Дата - Дата.
//
// Возвращаемое значение:
//  БланкЗаявления - ТабличныйДокумент
//
Функция МакетЗаявленияНаВозврат(ДанныеЗаявленияНаВозврат) Экспорт
	
	БланкЗаявления = Новый ТабличныйДокумент;

	Если ДанныеЗаявленияНаВозврат.Свойство("ДатаРождения")
		И ЗначениеЗаполнено(ДанныеЗаявленияНаВозврат.ДатаРождения) Тогда
		
		ДатаРожденияКлиента = ДанныеЗаявленияНаВозврат.ДатаРождения;
		ДанныеЗаявленияНаВозврат.ДатаРождения = Формат(ДатаРожденияКлиента, "ДЛФ=DD");
		
	КонецЕсли;
	
	Если ДанныеЗаявленияНаВозврат.Свойство("ЧекДата")
		И ЗначениеЗаполнено(ДанныеЗаявленияНаВозврат.ЧекДата) Тогда
		
		ДатаПробитияЧекаПродажи = ДанныеЗаявленияНаВозврат.ЧекДата;
		ДанныеЗаявленияНаВозврат.ЧекДата = Формат(ДатаПробитияЧекаПродажи, "ДЛФ=D");
		
	КонецЕсли;
	
	Если ДанныеЗаявленияНаВозврат.Свойство("ОтКого")
		И ЗначениеЗаполнено(ДанныеЗаявленияНаВозврат.ОтКого) Тогда
		
		ФИОЗаявителя = ДанныеЗаявленияНаВозврат.ОтКого;
		ФИОЗаявителяРодительныйПадеж = СклонениеФИОВУказанномПадеже(ФИОЗаявителя, 2);
		ДанныеЗаявленияНаВозврат.ОтКого = СтрШаблон("от %1", ФИОЗаявителяРодительныйПадеж);
		
	КонецЕсли;
	
	Если ДанныеЗаявленияНаВозврат.Свойство("ОтКого")
		И ЗначениеЗаполнено(ДанныеЗаявленияНаВозврат.ОтКого) Тогда
		
		КемКупленТовар = ДанныеЗаявленияНаВозврат.ФИОПокупателя;
		КемКупленТоварТворительныйПадеж = СклонениеФИОВУказанномПадеже(КемКупленТовар, 5);
		ДанныеЗаявленияНаВозврат.ФИОПокупателя = КемКупленТоварТворительныйПадеж;
		
	КонецЕсли;
	
	Макет = ПолучитьОбщийМакет("ПФ_MXL_ЗаявлениеНаВозвратРМК");
	
	ШапкаМакета			= Макет.ПолучитьОбласть("Шапка");
	ПараметрыШапки 		= ШапкаМакета.Параметры;
	ШапкаТаблицы		= Макет.ПолучитьОбласть("ШапкаТаблицы");
	СтрокаТаблицыМакета	= Макет.ПолучитьОбласть("Товар");
	ПодвалМакета		= Макет.ПолучитьОбласть("Подвал");
	
	ПараметрыШапки.Заполнить(ДанныеЗаявленияНаВозврат);
	
	// постобработка шапки
	ЭтоВозвратНесколькихТоваров =
		ДанныеЗаявленияНаВозврат.Свойство("Товары") И ДанныеЗаявленияНаВозврат.Товары.Количество() > 1;
	ПараметрыШапки.О1 = ?(ЭтоВозвратНесколькихТоваров,
		НСтр("ru = 'и'"), НСтр("ru = ''"));
	ПараметрыШапки.О2 = ?(ЭтоВозвратНесколькихТоваров,
		НСтр("ru = 'ы'"), НСтр("ru = ''"));
	ПараметрыШапки.О3 = ?(ЭтоВозвратНесколькихТоваров,
		НСтр("ru = 'ы'"), НСтр("ru = ''"));
		
	ДлинноеПодчеркивание = "______________________________________________________";
	
	СреднееПодчеркивание = "________________";
	
	КороткоеПодчеркивание = "________";
	
	Если НЕ ЗначениеЗаполнено(ПараметрыШапки.ОтКого)
		ИЛИ ПараметрыШапки.ОтКого = "от " Тогда
			ПараметрыШапки.ОтКого = СтрШаблон("от %1", ДлинноеПодчеркивание);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ПараметрыШапки.ФИОПокупателя) Тогда
		ПараметрыШапки.ФИОПокупателя = ДлинноеПодчеркивание;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыШапки.ДатаРождения) Тогда
		ПараметрыШапки.ДатаРождения = СреднееПодчеркивание;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыШапки.УдостоверениеЛичности) Тогда
		ПараметрыШапки.УдостоверениеЛичности = СтрШаблон("%1%1%1", ДлинноеПодчеркивание);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыШапки.ЧекНомер) Тогда
		ПараметрыШапки.ЧекНомер = КороткоеПодчеркивание;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыШапки.ЧекДата) Тогда
		ПараметрыШапки.ЧекДата = СреднееПодчеркивание;
	КонецЕсли;
		
	БланкЗаявления.Вывести(ШапкаМакета);
	БланкЗаявления.Вывести(ШапкаТаблицы);
	
	Для Каждого СтрокаТоваров Из ДанныеЗаявленияНаВозврат.Товары Цикл
	
		СтрокаТаблицыМакета.Параметры.Заполнить(СтрокаТоваров);
		БланкЗаявления.Вывести(СтрокаТаблицыМакета);
	
	КонецЦикла;
	
	ПодвалМакета.Параметры.Заполнить(ДанныеЗаявленияНаВозврат);
	ПодвалМакета.Параметры.Дата = Формат(ТекущаяДатаСеанса(), "ДЛФ = DD");
	БланкЗаявления.Вывести(ПодвалМакета);
	
	БланкЗаявления.АвтоМасштаб = Истина;

	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьЗаявлениеНаВозврат(БланкЗаявления, ДанныеЗаявленияНаВозврат);
	
	Если ТипЗнч(БланкЗаявления) <> Тип("ТабличныйДокумент") Тогда
		БланкЗаявления = Новый ТабличныйДокумент;
	КонецЕсли;
	
	Возврат БланкЗаявления;
	
КонецФункции

#КонецОбласти

#Область Переопределение_обработчиков_форм_ПрограммныйИнтерфейс

// Переопределяет поведение формы при создании на сервере
//
// Параметры:
//  Форма - - ФормаКлиентскогоПриложения - форма, поведение которой переопределяется.
//  Отказ - Булево.
//  СтандартнаяОбработка - Булево.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	ОбщегоНазначенияРМКПереопределяемый.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ПараметрыПрограммы

// Возвращает признак использования замены товаров.
//
// Возвращаемое значение:
//  Результат - Булево - Истина, если используется замена товаров.
//
Функция ИспользоватьЗаменуТоваров() Экспорт
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакИспользоватьЗаменуТоваров(Результат);
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак использования сервера лояльности в качестве получателя данных.
//
// Возвращаемое значение:
//  Результат - Булево - Истина, если используется сервер лояльности.
//
Функция ИспользоватьСерверЛояльностиПолучательДанных() Экспорт
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакИспользоватьСерверЛояльностиПолучательДанных(Результат);
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак использования оплаты сертификатами НСПК.
//
// Возвращаемое значение:
//  Результат - Булево - Истина, если используется оплата сертификатами НСПК.
//
Функция ИспользоватьОплатуСертификатамиНСПК() Экспорт
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакИспользоватьОплатуСертификатамиНСПК(Результат);
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак ведения учета пивной продукции, реализуемой в розлив.
//
// Возвращаемое значение:
//  Результат - Булево - Истина, если ведется учет пивной продукции.
//
Функция ВедетсяУчетПивнойПродукцииВРозлив() Экспорт
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакВеденияУчетаПивнойПродукцииВРозлив(Результат);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Подключаемое_оборудование_ПрограммныйИнтерфейс

// Заполняет параметры по исходным данным 
//
// Параметры:
//	ОбщиеПараметры - Структура -
//		см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека().
//  ПараметрыПакетнойФискализации - Структура - 
//		см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПакетнойОперацииВОчередиЧеков().
//  ДанныеЗаполнения - Структура - Исходные данные:
//		* ИдентификаторЭТ - СправочникСсылка.ПодключаемоеОборудование.
//		* СуммаОплатыКартой - Число.
//		* ВидОплаты - ОпределяемыйТип.ВидОплатыРМК.
//		* ПроцентКомиссии - Число.
//
Процедура ЗаполнитьДанныеДляПакетнойФискализации(ОбщиеПараметры,
	ПараметрыПакетнойФискализации, ДанныеЗаполнения) Экспорт
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьДанныеДляПакетнойФискализации(ОбщиеПараметры,
			ПараметрыПакетнойФискализации, ДанныеЗаполнения);
КонецПроцедуры

// Возвращает признак использования общего QR - кода для чека ККТ и чека ЕГАИС
//
// Возвращаемое значение:
//  Результат - Булево
//
Функция ИспользоватьОбщийКодДляЧекаККТИЕГАИС()Экспорт

	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакПечатиОбщегоКодаДляЧекаККТИЕГАИС(Результат);
	Возврат Результат;
	
КонецФункции

// Возвращает признак использования общего QR - кода для чека ККТ и чека ЕГАИС
 //
 // Возвращаемое значение:
 //  Результат - Булево
 //
Функция ФормироватьИнтегрированныйСлипЧек() Экспорт

	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакФормированияКороткогоСлипЧека(Результат);
	Возврат Результат;
	
КонецФункции

// Возвращает признак поддержки использования промокодов при локальном расчете скидок
 //
 // Возвращаемое значение: -
 //  Результат - Булево
 //
Функция ЛокальныйРасчетСкидокПоддерживаетПромокоды() Экспорт

	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЛокальныйРасчетСкидокПоддерживаетПромокоды(Результат);
	Возврат Результат;
	
КонецФункции

// Перезаполняет и сохраняет документ выдачи наличных как документ возврата.
// Актуально для случаев, когда в рамках пакетной фискализации продажи с выдачей наличных
// возникла ошибка фискализации выдачи, но ранее успешно прошла фискализация продажи.
// В момент отмены фискализации автоматически отменяется 
// фискализация чека продажи, ее нужно отразить возвратом в документах РМК,при этом 
// в РС "Фискальные операции" под регистратором выдачи наличных появится запись фискализации возврата.
//
// Параметры:
//  СсылкаНаЧекВыдачиНаличных - ОпределяемыйТип.ЧекККМРМК - ссылка на изменяемый документ
//  ЧекПродажиПриВыдачеНаличных - ОпределяемыйТип.ЧекККМРМК - исходные данные для перезаполнения.
//  НомерЧекаККМ - Число - номер чека ККМ для постобработки.
//  НомерСменыККМ - Число - номер смены ККМ для постобработки.
//  ПараметрыЭквайринговойОперации - Структура:
//   *ИдентификаторУстройства - СправочникСсылка.ПодключаемоеОборудование
//   *НомерЧекаЭТ - Строка
//   *СсылочныйНомер - Строка
//   *НомерКарты - Строка
//
Процедура ЗаменитьЧекВыдачиНаЧекВозврата(СсылкаНаЧекВыдачиНаличных,ЧекПродажиПриВыдачеНаличных,
	НомерЧекаККМ, НомерСменыККМ, ПараметрыЭквайринговойОперации) Экспорт
	ОбщегоНазначенияРМКПереопределяемый.ЗаменитьЧекВыдачиНаЧекВозврата(СсылкаНаЧекВыдачиНаличных,ЧекПродажиПриВыдачеНаличных,
		НомерЧекаККМ, НомерСменыККМ, ПараметрыЭквайринговойОперации);
КонецПроцедуры

// Дополняет чек продажи данными об оплате картой 
// Актуально для пакетной фискализации, в случае успешной фискализации чека продажи
//
// Параметры:
//  ЧекПродажи - ДокументСсылка.ЧекККМ - пояснение
//  ДанныеДляЗаполнения - Структура -
//     См. МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперацииНаОборудовании()
//  ДополнительныеДанные - Структура -
//     См. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПакетнойОперацииВОчередиЧеков()
//
Процедура ЗаполнитьОплатуКартойДляПакетнойФискализации(ЧекПродажи, ДанныеДляЗаполнения, ДополнительныеДанные) Экспорт
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьОплатуКартойДляПакетнойФискализации(ЧекПродажи, ДанныеДляЗаполнения,
		ДополнительныеДанные);
КонецПроцедуры

#КонецОбласти

#Область ПлиточныйИнтерфейсПодбора_ПрограммныйИнтерфейс

// Дополняет данные о цене, особенности учета, виде номенклатуры и остатке
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения.
//
Процедура ДополнитьОпорныеДанныеПанелиДляПостроенияПлиточногоИнтерфейса(Форма) Экспорт
	ОбщегоНазначенияРМКПереопределяемый.ДополнитьОпорныеДанныеПанелиДляПостроенияПлиточногоИнтерфейса(Форма);
КонецПроцедуры

// Дополняет состав плитки весовым товаром
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения.
//
Процедура ДополнитьОпорныеДанныеПлиткиВесовымТоваром(Форма) Экспорт
	
	ОбщегоНазначенияРМКПереопределяемый.ДополнитьОпорныеДанныеПлиткиВесовымТоваром(Форма);
	
КонецПроцедуры
	
#КонецОбласти

// Возвращает номер версии библиотеки рабочего места кассира.
//
// Возвращаемое значение:
//  Строка.
//
Функция ВерсияБиблиотеки() Экспорт
	
	ВерсияБиблиотекиРМК = "1.0.15.71";
	Возврат ВерсияБиблиотекиРМК;
	
КонецФункции

// Заполняет параметры для работы РМК при запуске
//
// Параметры:
//  Параметры - Структура - см.ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиентаПриЗапуске;
//
Процедура ЗаполнитьПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	ЗапуститьНовыйРМК = Ложь;
	ЗапуститьНастройкуКСО = Ложь;
	НеобходимоОбновитьИнтерфейс = Ложь;
	РежимКассыСамообслуживания = Ложь;
	ПолноэкранныйРежимЗапуска = Ложь;
	ДополнительныеПараметрыЗапуска = Новый Структура();
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПараметрыРаботыКлиентаПриЗапуске(
		ЗапуститьНовыйРМК,
		ЗапуститьНастройкуКСО,
		РежимКассыСамообслуживания,
		ДополнительныеПараметрыЗапуска);
		
	Если ЗапуститьНовыйРМК Или ЗапуститьНастройкуКСО Тогда
		НеобходимоОбновитьИнтерфейс = Истина;
	КонецЕсли;
	
	Если ДополнительныеПараметрыЗапуска.Свойство("ПолноэкранныйРежимЗапуска") Тогда
		ПолноэкранныйРежимЗапуска = ДополнительныеПараметрыЗапуска.ПолноэкранныйРежимЗапуска;
	КонецЕсли;
	Параметры.Вставить("БРМК_ЗапуститьНовыйРМК", ЗапуститьНовыйРМК);
	Параметры.Вставить("БРМК_ЗапуститьНастройкуКСО", ЗапуститьНастройкуКСО);
	Параметры.Вставить("БРМК_НеобходимоОбновитьИнтерфейс", НеобходимоОбновитьИнтерфейс);
	Параметры.Вставить("БРМК_РежимКассыСамообслуживания", РежимКассыСамообслуживания);
	Параметры.Вставить("БРМК_ПолноэкранныйРежимЗапуска", ПолноэкранныйРежимЗапуска);
	
	Если ЗапуститьНовыйРМК Или ЗапуститьНастройкуКСО Тогда
		НастроитьРабочийСтолДляНовогоРМК(ЗапуститьНастройкуКСО);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в таблицу значений строки из другой таблицы значений и 
// в них значения колонок с совпадающими наименованиями.
//
// Параметры:
//  ТаблицаИсточник - ТаблицаЗначений -  таблица значений, откуда берутся значения.
//  ТаблицаПриемник - ТаблицаЗначений - таблица значений, куда добавляются строки.
//  ОчищатьПриемник - Булево - признак очистки таблицы приемника.
//  ИсключаяСвойства - Строка - перечень имен свойств к исключению.
//
Процедура ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник, ОчищатьПриемник = Ложь,
	ИсключаяСвойства = "") Экспорт

	Если ОчищатьПриемник Тогда
		ТаблицаПриемник.Очистить();
	КонецЕсли;
	
	// Заполним значения в совпадающих колонках.
	Для Каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл

		СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника,, ИсключаяСвойства);

	КонецЦикла;

КонецПроцедуры

// Заполняет адрес торгового объекта.
//
// Параметры:
//  АдресМагазина - Строка - адрес торгового объекта.
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК - торговый объект для получения адреса.
//
Процедура ЗаполнитьАдресТорговогоОбъекта(АдресМагазина, ТорговыйОбъект) Экспорт
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьАдресТорговогоОбъекта(АдресМагазина, ТорговыйОбъект);
КонецПроцедуры

// Получаем контрагента по ИНН и КПП
// Параметры:
//  ИНН - Строка
//  КПП - Строка
//
// Возвращаемое значение:
//  ОпределяемыйТип.КонтрагентРМК
//
Функция КонтрагентПоИННКПП(ИНН, КПП) Экспорт;
	
	РезультатФункции = Неопределено;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьКонтрагентаПоИННКПП(ИНН, КПП, РезультатФункции);
	Возврат РезультатФункции;
	
КонецФункции

// Выполняет установку параметров сеанса. Вызывается из модуля сеанса.
//
// Параметры:
//  ИмяПараметра - Строка - строка с именем параметра сеанса.
//  УстановленныеПараметры - Массив - массив всех установленных параметров сеанса.
//
Процедура УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "ТекущийТорговыйОбъект" Тогда
		ПараметрыСеанса[ИмяПараметра] = ТекущийТорговыйОбъект();
		УстановленныеПараметры.Добавить(ИмяПараметра);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает выбранную настройку РМК для текущего рабочего места.
// Если находит настройки РМК, связанные с текущим рабочим местом, удаляет эти связи
//
// Параметры:
//  НастройкаРМК - СправочникСсылка.НастройкиРМК - настройки рмк
//
Процедура УстановитьНастройкуРМКДляТекущегоРабочегоМеста(НастройкаРМК) Экспорт

		ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
		
		Если ЗначениеЗаполнено(НастройкаРМК) Тогда
			
			// найти настройки, ранее заданные для текущего рабочего места
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	НастройкиРабочегоМестаКассира.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
			|ГДЕ
			|	НЕ НастройкиРабочегоМестаКассира.ПометкаУдаления
			|	И НастройкиРабочегоМестаКассира.РабочееМесто = &ТекущееРабочееМесто
			|	И НЕ НастройкиРабочегоМестаКассира.Ссылка = &ВыбраннаяНастройка");
			Запрос.УстановитьПараметр("ТекущееРабочееМесто", ТекущееРабочееМесто);
			Запрос.УстановитьПараметр("ВыбраннаяНастройка", НастройкаРМК);
			ВыборкаНастроекРМК = Запрос.Выполнить().Выбрать(); // АПК:1328 - конкурентная работа с данными маловероятна
			
			
			ОтсутствиеРабочегоМеста = Справочники.РабочиеМеста.ПустаяСсылка();
			
			// снять соответствие
			Пока ВыборкаНастроекРМК.Следующий() Цикл
				
				НастройкаДляИзменения = ВыборкаНастроекРМК.Ссылка.ПолучитьОбъект();
				НастройкаДляИзменения.РабочееМесто = ОтсутствиеРабочегоМеста;
				НастройкаДляИзменения.Записать();// АПК:1327 - конкурентная работа с данными маловероятна
				
			КонецЦикла;
			
			// назначить выбранную настройку текущему рабочему месту
			ВыбраннаяНастройкаДляИзменения = НастройкаРМК.ПолучитьОбъект();
			ВыбраннаяНастройкаДляИзменения.РабочееМесто = ТекущееРабочееМесто;
			ВыбраннаяНастройкаДляИзменения.Записать();
			
		КонецЕсли;

КонецПроцедуры

// Настраивает состав форм начальной страницы приложения
//
// Параметры:
//  ЗапуститьНастройкуКСО - Булево - Запускать при старте общую форму "НастройкаКассыСамообслуживания".
//
Процедура НастроитьРабочийСтолДляНовогоРМК(ЗапуститьНастройкуКСО = Ложь) Экспорт
	
	НастройкиНачальнойСтраницы = Новый НастройкиНачальнойСтраницы;
	СоставФорм = Новый СоставФормНачальнойСтраницы;
	Если ЗапуститьНастройкуКСО Тогда
		СоставФорм.ЛеваяКолонка.Добавить("ОбщаяФорма.НастройкаКассыСамообслуживания");
	Иначе
		СоставФорм.ЛеваяКолонка.Добавить("Обработка.РабочееМестоКассира.Форма.ФормаРМК");
	КонецЕсли;
	НастройкиНачальнойСтраницы.УстановитьСоставФорм(СоставФорм);
	ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы",, НастройкиНачальнойСтраницы);
	
КонецПроцедуры

// Определяет факт наличия синхронизации РМК с мастер - системой.
//
// Возвращаемое значение:
//  Булево - истина, если настройка существует.
//
Функция НастройкаСинхронизацииДанныхСуществует() Экспорт
	
	НастройкаСуществует = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьСуществованиеНастройкиСинхронизацииДанных(НастройкаСуществует);
	Возврат НастройкаСуществует;
	
КонецФункции

// Заполняет ИмяКассира по данным физического лица для текущего пользователя 
//
// Параметры:
//  ИмяКассира - Строка.
//
Процедура ЗаполнитьФИОФизЛица(ИмяКассира) Экспорт
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	ФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизическоеЛицо");
	
	ИмяКассира = "";
	Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКассира = ИмяКассира + ?(ИмяКассира = "", "", " ") + ФизЛицо.Фамилия;
	ИмяКассира = ИмяКассира + ?(ИмяКассира = "" ИЛИ ФизЛицо.Имя = "", "", " ") + ФизЛицо.Имя;
	ИмяКассира = ИмяКассира + ?(ИмяКассира = "" ИЛИ ФизЛицо.Отчество = "", "", " ") + ФизЛицо.Отчество;
	
КонецПроцедуры

// Заполняет ИННКассира по данным текущего пользователя.
//
// Параметры:
//  ИННКассира - Строка.
//
Процедура ЗаполнитьИННФизЛица(ИННКассира) Экспорт
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	ФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизическоеЛицо");
	
	ИННКассира = НСтр("ru = ''");
	Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	ИННКассира = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизЛицо, "ИНН");
	
КонецПроцедуры

// Возвращает настройкиРМК по рабочему месту
// Параметры:
//  РабочееМесто - СправочникСсылка.РабочиеМеста - рабочее место для получения настроек
//
// Возвращаемое значение:
//  Массив - массив настроекРМК
//
Функция НастройкиРМКДляТекущегоРабочегоМеста(РабочееМесто) Экспорт
	
	НастройкиРМК = Новый Массив;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	НастройкиРабочегоМестаКассира.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
	|ГДЕ
	|	НЕ НастройкиРабочегоМестаКассира.ПометкаУдаления
	|	И НастройкиРабочегоМестаКассира.РабочееМесто = &ТекущееРабочееМесто");
	Запрос.УстановитьПараметр("ТекущееРабочееМесто", РабочееМесто);
	
	ДоступныеНастройки = Запрос.Выполнить().Выбрать();
	
	Пока ДоступныеНастройки.Следующий() Цикл
		НастройкиРМК.Добавить(ДоступныеНастройки.Ссылка);
	КонецЦикла;
	
	Возврат НастройкиРМК;
	
КонецФункции

// Обрабатывает данные ответа из API
//
// Параметры:
//  ИсходныеДанные - Структура - данные ответа,
//	НастройкиРабочегоМестаКассира - СправочникСсылка.НастройкиРМК - 
//		сущность для актуализации признака запрета интерактивного редактирования,
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК - торговый объект, для которого получены данные запрета.
//
// Возвращаемое значение:
//  Результат - Структура - результат обработки данных ответа
//
Функция ОбработатьДанныеЗапретов(ИсходныеДанные, НастройкиРабочегоМестаКассира, ТорговыйОбъект = Неопределено) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ПризнакУспешноОбновлен", Ложь);
	Результат.Вставить("КомментарийКОбновлениюПризнака", НСтр("ru = ''") );
	Результат.Вставить("ЗапретыПродажУспешноЗагружены", Ложь);
	Результат.Вставить("КомментарийОбновленияЗапретов", НСтр("ru = ''"));
	
	// признак запрета интерактивного редактирования ограничений продаж
	Если ЗначениеЗаполнено(ИсходныеДанные) И ЗначениеЗаполнено(НастройкиРабочегоМестаКассира)
		И ТипЗнч(ИсходныеДанные) = Тип("Структура") И ИсходныеДанные.Свойство("AllowControl") Тогда
		
		РедактированиеРазрешеноПоДаннымМастерСистемы = ИсходныеДанные.AllowControl;
		РезультатОбновления = ОбновитьПризнакРазрешенияИнтерактивногоРедактирования(НастройкиРабочегоМестаКассира,
			РедактированиеРазрешеноПоДаннымМастерСистемы);
		Результат.ПризнакУспешноОбновлен = РезультатОбновления.ВыполнениеУспешно;
		Результат.КомментарийКОбновлениюПризнака = РезультатОбновления.Комментарий;
		
	Иначе
		
		Результат.КомментарийКОбновлениюПризнака =
		НСтр("ru = 'Невозможно обновить признак разрешения редактирования запретов по переданным исходным данным.'");
		
	КонецЕсли;
	
	// перечень ограничений продаж
	Если ЗначениеЗаполнено(ИсходныеДанные) И ТипЗнч(ИсходныеДанные) = Тип("Структура") Тогда
		
		Если ИсходныеДанные.Свойство("TradeControlData") Тогда
			Если ИсходныеДанные.AllowControl Тогда
				ОбновитьДанныеКонтроляПродаж(Результат, ИсходныеДанные.TradeControlData, ТорговыйОбъект);
			Иначе
				Результат.КомментарийОбновленияЗапретов
					= НСтр("ru = 'На сервере лояльности отключено использование контроля продаж.'");
			КонецЕсли;
		ИначеЕсли ИсходныеДанные.Свойство("RestrictionsList") Тогда
			
			ТекстОшибкиЗагрузкиЗапретов = НСтр("ru = 'Ошибка загрузки запретов продаж из сервера лояльности'");
			МассивОграничений = ИсходныеДанные.RestrictionsList;
			Для каждого ОграничениеПродажи Из МассивОграничений Цикл
				
				Если НЕ ДанныеОграниченияПродажиУспешноЗагружены(ОграничениеПродажи) Тогда
					
					Результат.КомментарийОбновленияЗапретов = ТекстОшибкиЗагрузкиЗапретов;
					Прервать;
					
				КонецЕсли;
					
			КонецЦикла;
			Если Результат.КомментарийОбновленияЗапретов = "" Тогда
				Если ОбновитьКонтрольПродажПоДаннымРегистраЗапретаПродаж(ТорговыйОбъект) Тогда
					Результат.ЗапретыПродажУспешноЗагружены = Истина;
				Иначе
					Результат.КомментарийОбновленияЗапретов = ТекстОшибкиЗагрузкиЗапретов;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Результат.КомментарийОбновленияЗапретов =
		НСтр("ru = 'Невозможно загрузить перечень ограничений продаж по переданным исходным данным.
			|Отсутствует узел ""RestrictionsList"".'");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает пароль сервера лояльности из безопасного хранилища.
//
// Параметры:
//  ТекущаяНастройкаРМК - СправочникСсылка.НастройкиРабочегоМестаКассира - текущая настройка РМК.
//
// Возвращаемое значение:
//  Пароль - Строка - пароль сервера лояльности.
//
Функция ПарольСервераЛояльности(ТекущаяНастройкаРМК) Экспорт
	
	Пароль = "";
	
	Если ЗначениеЗаполнено(ТекущаяНастройкаРМК) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		СохраненныйПароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ТекущаяНастройкаРМК,
			"ПарольСервераЛояльности");
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Не СохраненныйПароль = Неопределено Тогда
			Пароль = СохраненныйПароль;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Пароль;
	
КонецФункции

// Заполняет обязательные права.
//
// Параметры:
//  ОписаниеПрофиля - Структура - см.УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа.
//
Процедура ЗаполнитьОбязательныеРолиРМК(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеНовогоРМК");
	ОписаниеПрофиля.Роли.Добавить("ПравоОтложитьЧекРМК");
	ОписаниеПрофиля.Роли.Добавить("ПравоПродолжитьЧекРМК");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНастроекРМК");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеУсловийОграниченияПродажРМК");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеЗапускаКассыСамообслуживания");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеШаблоновРМК");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКонтроляПродаж");
	
КонецПроцедуры

// Возвращает значение налогообложения ККТ для организации.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ТекущаяСтрока - СтрокаТабличнойЧасти - текущая строка.
//  Дата - ДатаВремя - (необязательный).
//
// Возвращаемое значение:
//  НалогообложениеККТ - Неопределено, ОпределяемыйТип.ТипыСистемНалогообложенияККТРМК - значение налогообложения ККТ.
//
Функция СНОККТДляОрганизации(Форма, ТекущаяСтрока = Неопределено, Дата = '00010101') Экспорт
	
	НалогообложениеККТ = Неопределено;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьСНОККТДляОрганизации(НалогообложениеККТ, Форма, ТекущаяСтрока, Дата);
	
	Возврат НалогообложениеККТ;
	
КонецФункции

// Возвращает значение текущего вида операции.
//
// Параметры:
//  ЭтоВозврат - Булево - признак того, что текущая операция - возврат.
//  ЭтоСкупка - Булево - признак того, что текущая операция - скупка.
//
// Возвращаемое значение:
//  ОпределяемыйТип.ВидОперацииРМК - вид операции для текущей операции.
//
Функция ВидТекущейОперации(ЭтоВозврат = Ложь, ЭтоСкупка = Ложь) Экспорт
	
	ПараметрыВидаОперации = ОбщегоНазначенияРМККлиентСервер.ПараметрыВидаОперации();
	Если ЭтоВозврат Тогда
		ПараметрыВидаОперации.ЭтоВозврат = Истина;
	КонецЕсли;
	Если ЭтоСкупка Тогда
		ПараметрыВидаОперации.ЭтоСкупка = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьВидОперацииЧекаККМ(ПараметрыВидаОперации);
	
	Возврат ПараметрыВидаОперации.ВидОперации;
	
КонецФункции

// Определяет является ли вид операции операцией продажи.
// Значение по умолчанию - истина.
//
// Параметры:
//  ВидОперации - ОпределяемыйТип.ВидОперацииРМК - текущий вид операции.
//
// Возвращаемое значение:
//  Булево - вид операции - продажа.
//
Функция ЭтоВидОперацииПродажа(ВидОперации) Экспорт
	
	ЭтоПродажа = Истина;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьВидОперации(ЭтоПродажа, ВидОперации);
	
	Возврат ЭтоПродажа;
	
КонецФункции

// Возвращает текущий торговый объект, который далее используется в РМК.
//
// Возвращаемое значение:
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК - текущий торговый объект РМК.
//
Функция ТекущийТорговыйОбъект() Экспорт
	
	ТорговыйОбъект = Неопределено;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьТекущийТорговыйОбъект(ТорговыйОбъект);
	
	Возврат ТорговыйОбъект;
	
КонецФункции

// Возвращает текущее рабочее место клиента.
//
// Возвращаемое значение:
//  РабочееМесто - ОпределяемыйТип.РабочееМестоРМК - текущее рабочее место.
//
Функция ТекущееРабочееМесто() Экспорт
	
	РабочееМесто = Неопределено;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьТекущееРабочееМесто(РабочееМесто);
	
	Возврат РабочееМесто;
	
КонецФункции

// Возвращает массив, в который добавлены виды номенклатуры.
// Вид номенклатуры определяется по переданному значению особенность учета.
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - текущее значение особенности учета номенклатуры.
//
// Возвращаемое значение:
//  МассивВидовНоменклатуры - Массив - массив, в который добавлены значения видов номенклатуры.
//
Функция МассивВидовНоменклатурыПоОсобенностиУчета(ОсобенностьУчета) Экспорт
	
	МассивВидовНоменклатуры = Новый Массив;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьМассивВидовНоменклатурыПоОсобенностиУчета(ОсобенностьУчета,
		МассивВидовНоменклатуры);
	
	Возврат МассивВидовНоменклатуры;
	
КонецФункции

// Возвращает имя константы, в которую необходимо записать значение.
//
// Параметры:
//  ВидКонстанты - Строка - вид переданной константы.
//
// Возвращаемое значение:
//  ИмяКонстанты - Строка - имя константы в прикладной конфигурации.
//
Функция ИмяКонстанты(ВидКонстанты) Экспорт
	
	ИмяКонстанты = "";
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьИмяКонстантыПоВиду(ВидКонстанты, ИмяКонстанты);
	
	Возврат ИмяКонстанты;
	
КонецФункции

// Возвращает массив, который содержит особенности учета номенклатуры допускающие возврат без указания марки.
//
// Возвращаемое значение:
//  МассивОсобенностейУчета - Массив - массив особенностей учета номенклатуры.
//
Функция МассивОсобенностейУчетаДляВозвратаБезМарки() Экспорт
	
	МассивОсобенностейУчета = Новый Массив;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьМассивОсобенностейУчетаДляВозвратаБезМарки(МассивОсобенностейУчета);
	
	Возврат МассивОсобенностейУчета;
	
КонецФункции

// Определяет является ли документ чеком продажи.
//
// Параметры:
//  ЧекККМ - ОпределяемыйТип.ЧекККМРМК - текущий документ.
//
// Возвращаемое значение:
//  Результат - Булево - Истина, если чек имеет вид операции продажа.
//
Функция ЭтоЧекПродажи(ЧекККМ) Экспорт
	
	Результат = Истина;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьЧекККМПродажа(Результат, ЧекККМ);
	
	Возврат Результат;
	
КонецФункции

// Определяет необходимость ввода характеристики для номенклатуры.
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.НоменклатураРМК - текущая номенклатура.
//
// Возвращаемое значение:
//  Результат - Булево - Истина, если требуется указать характеристику.
//
Функция ТребуетсяВводХарактеристикиДляНоменклатуры(Номенклатура) Экспорт
	
	ТребуетсяВводХарактеристики = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьИспользованиеХарактеристик(ТребуетсяВводХарактеристики);
	Если ТребуетсяВводХарактеристики Тогда
		ОбщегоНазначенияРМКПереопределяемый.ОпределитьНеобходимостьВводаХарактеристикиДляНоменклатуры(Номенклатура,
			ТребуетсяВводХарактеристики);
	КонецЕсли;
	
	Возврат ТребуетсяВводХарактеристики;
	
КонецФункции

// Функция возвращает подготовленные данные для пробития на ККТ.
//
// Параметры:
//  ЧекККМВОбработке - ОпределяемыйТип.ЧекККМРМК - ссылка на документ печать, которого производится.
//  ДополнительныеПараметры - Структура:
//   *ЕстьПродукцияЕГАИС - Булево - признак наличия маркируемой алкогольной продукции.
//   *ПечататьБумажныйЧек - Булево - признак нужно печатать чек на ККТ или отправлять в эл.виде.
//   *СистемаНалогообложения - ОпределяемыеТипы.ТипыСистемНалогообложенияККТРМК - СНО ККТ для текущего чека.
//   *СворачиватьСтрокиПриПечатиЧека - Булево - признак нужно ли сворачивать маркируемые товары в чеке.
//   *ОсобенностиУчетаВозвращаемойМаркируемойПродукции - Список - значения особенностей учета товаров из чека,
//     по которым осуществляется возврат без марки
//
// Возвращаемое значение:
//  Массив - см.ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека().
//
Функция ДанныеДляПробитияЧека(ЧекККМВОбработке, ДополнительныеПараметры) Экспорт
	
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	ОбщегоНазначенияРМКПереопределяемый.ПодготовитьДанныеДляПробитияЧека(ЧекККМВОбработке,
		ДополнительныеПараметры,
		ОбщиеПараметры);
	
	Возврат ОбщиеПараметры;
	
КонецФункции

// Возвращает систему налогообложения чека ККМ.
//
// Параметры:
//  ЧекККМ - ОпределяемыйТип.ЧекККМРМК - чек ККМ, для которого нужно определить систему налогообложения.
//
// Возвращаемое значение:
//  ОпределяемыйТип.ТипыСистемНалогообложенияККТРМК, Неопределено - система налогообложения.
//
Функция СистемаНалогообложенияЧека(ЧекККМ) Экспорт
	
	СНО = Неопределено;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьСНОЧекаККМ(ЧекККМ, СНО);
	
	Возврат СНО;
	
КонецФункции

// Определяет является ли переданная особенность учета табачной продукцией.
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - особенность учета
//
// Возвращаемое значение:
//  Булево - Истина, если особенность учета является табачной
//
Функция ЭтоТабачнаяПродукция(ОсобенностьУчета) Экспорт
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьОсобенностьУчетаТабачнаяПродукция(ОсобенностьУчета, Результат);
	
	Возврат Результат;
	
КонецФункции

// Определяет является ли переданная особенность учета молочной продукцией.
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - особенность учета.
//
// Возвращаемое значение:
//  Булево - Истина, если особенность учета является молочной.
//
Функция ЭтоМолочнаяПродукция(ОсобенностьУчета) Экспорт
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьОсобенностьУчетаМолочнаяПродукция(ОсобенностьУчета, Результат);
	
	Возврат Результат;
	
КонецФункции

// Определяет является ли переданная особенность учета алкогольной продукцией.
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - особенность учета.
//
// Возвращаемое значение:
//  Булево - Истина, если особенность учета является алкогольной.
//
Функция ЭтоАлкогольнаяПродукция(ОсобенностьУчета) Экспорт
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьОсобенностьУчетаАлкогольнаяПродукция(ОсобенностьУчета, Результат);
	
	Возврат Результат;
	
КонецФункции

// Определяет является ли переданная особенность учета альтернативным табаком.
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - особенность учета.
//
// Возвращаемое значение:
//  Булево - Истина, если особенность учета является альтернативным табаком.
//
Функция ЭтоАльтернативныйТабак(ОсобенностьУчета) Экспорт
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьОсобенностьУчетаАльтернативныйТабак(ОсобенностьУчета, Результат);
	
	Возврат Результат;
	
КонецФункции

// Определяет является ли переданный тип номенклатуры подарочным сертификатом.
//
// Параметры:
//  ТипНоменклатуры - ОпределяемыйТип.ТипыНоменклатурыРМК - тип номенклатуры.
//
// Возвращаемое значение:
//  Булево - Истина, если тип номенклатуры является подарочным сертификатом.
//
Функция ЭтоТипНоменклатурыПодарочныйСертификат(ТипНоменклатуры) Экспорт
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьЭтоПодарочныйСертификатПоТипу(ТипНоменклатуры, Результат);
	
	Возврат Результат;
	
КонецФункции

// Проверяет серию подарочного сертификата на факт использования
// 
// Параметры:
//  Серия - ОпределяемыйТип.СерияРМК - Серия проверяемого подарочного сертификата.
//  ТекущаяНастройкаРМК - Справочник.НастройкиРабочегоМестаКассира - текущие настройки РМК.
//  Результат - Булево - результат проверки серии подарочного сертификата.
//
Процедура ПроверитьСериюПодарочногоСертификата(Серия, ТекущаяНастройкаРМК, Результат = Ложь) Экспорт
	
	// Получить из настроек РМК адрес сервиса, логин и пароль из защищенного хранилища
	ПараметрыПодключенияКСерверуЛояльности =
		ОбщегоНазначенияРМКВызовСервера.ЗначенияПараметровСервераЛояльности(ТекущаяНастройкаРМК);
		
	ЗначенияПараметровМетода = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыМетодовБонуснойПодсистемы();
	Если ТипЗнч(Серия) = Тип("Строка") Тогда
		ЗначенияПараметровМетода.Вставить("GiftCardNumber", Серия);
	Иначе
		ЗначенияПараметровМетода.Вставить("GiftCardNumber", Строка(Серия.УникальныйИдентификатор()));
	КонецЕсли;
	
	ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаПроверитьДанныеПодарочногоСертификата(ПараметрыПодключенияКСерверуЛояльности, ЗначенияПараметровМетода);
	СтруктураРезультат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
	
	Если СтруктураРезультат.ЕстьОшибки Тогда
		Результат = Ложь;
		Возврат;
	КонецЕсли;
	
	ДанныеОтвета = Неопределено;
	СтрокаJSON = СтруктураРезультат.ДанныеОтвета;
	СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
	
	
	Если ТипЗнч(ДанныеОтвета) = Тип("Структура") И ДанныеОтвета.Свойство("GiftCardUsed") Тогда
		Результат = ДанныеОтвета.GiftCardUsed;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру цветов используемых на форме РМК
//
// Возвращаемое значение:
//  Структура - содержащая цвета для использования на форме РМК
//
Функция ЦветаФормыРМК() Экспорт
	
	ЦветаФормы = Новый Структура();
	ЦветаФормы.Вставить("Авто", Новый Цвет);
	ЦветаФормы.Вставить("АктивнаяКнопка", ЦветаСтиля.ЦветАктивнойКнопкиРМК);
	ЦветаФормы.Вставить("ЗеленаяКнопка", ЦветаСтиля.ЦветЗеленойКнопкиРМК);
	ЦветаФормы.Вставить("КраснаяКнопка", ЦветаСтиля.ЦветКраснойКнопкиРМК);
	ЦветаФормы.Вставить("ОсобыйТекст", ЦветаСтиля.ЦветОсобогоТекстаРМК);
	ЦветаФормы.Вставить("ФонРежимаВозврат", ЦветаСтиля.ЦветФонаРежимаВозвратаРМК);
	ЦветаФормы.Вставить("ФонРежимаКоррекция", ЦветаСтиля.ЦветФонаРежимаКоррекцииРМК);
	ЦветаФормы.Вставить("ФонРежимаПродажа", ЦветаСтиля.ЦветФонаРежимаПродажиРМК);
	ЦветаФормы.Вставить("ФонРежимаСкупка", ЦветаСтиля.ЦветФонаРежимаСкупкиРМК);
	ЦветаФормы.Вставить("ФонРежимаВозвратСкупки", ЦветаСтиля.ЦветФонаРежимаВозвратаСкупкиРМК);
	ЦветаФормы.Вставить("НеАктивизированныйПункт", ЦветаСтиля.ЦветНеАктивизированногоПунктаРМК);
	ЦветаФормы.Вставить("АктивизированныйПункт", ЦветаСтиля.ЦветАктивизированногоПунктаРМК);
	ЦветаФормы.Вставить("ПапкаКнопка", ЦветаСтиля.ЦветПапкиКнопкиРМК);
	ЦветаФормы.Вставить("ФонФормы", ЦветаСтиля.ЦветФонаФормы);
	ЦветаФормы.Вставить("ФонРежимаПредоплата", ЦветаСтиля.ЦветФонаРежимаПредоплатаРМК);
	ЦветаФормы.Вставить("ФонРежимаЗаказ", ЦветаСтиля.ЦветФонаРежимаЗаказРМК);
	ЦветаФормы.Вставить("ТекстСверхЗаказа", ЦветаСтиля.ЦветТекстаСверхЗаказаРМК);
	
	Возврат ЦветаФормы;
	
КонецФункции

// Возвращает структуру для расчета цены товара, который выбрали в строке быстрого добавления товара.
//
// Возвращаемое значение:
//  Структура - параметры расчета цены для товара.
//
Функция ПараметрыРасчетаЦены() Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("ВидЦены");
	Параметры.Вставить("ТорговыйОбъект");
	Параметры.Вставить("Организация");
	Параметры.Вставить("Номенклатура");
	Параметры.Вставить("Цена", 0);
	
	Возврат Параметры;
	
КонецФункции

// Исходные данные с параметрами отбора для получения данных отчета за смену
//
// Параметры:
//  ИсходныеДанные - Структура:
//		*ДанныеМакета - Структура,
//		*КассирРМК - ОпределяемыйТип.КассирРМК,
//		*ДанныеОборудования - Массив (массив данных о кассах, по которым собирается отчет):
//			Элементом массива является структура:
//              *ДанныеПоКассе - Структура. Описывает кассы для отбора и параметры оборудования:
//					*ДанныеОборудования - Структура. Значения параметров кассы за смену, собранные
//                               на клиентской стороне
//                  *ДанныеОборудованияПолучены - Булево.
//                  *ИдентификаторУстройства - ОпределяемыйТип.ПодключаемоеОборудованиеРМК.
//                  *Касса - ОпределяемыйТип.КассаККМРМК.
//                  *КассоваяСмена - ОпределяемыйТип.КассоваяСменаРМК
//              *ДанныеЭквайринговыхТерминалов - Массив. Содержит описание оборудования -
//                               эквайринговых терминалов, подключенных к кассе.
//
// Возвращаемое значение:
//  ДанныеДляОтчета - Структура
//      *ТаблицаСумм - ТаблицаЗначений.
//          *Касса - ОпределяемыйТип.КассаККМРМК,
//          *Кассир - ОпределяемыйТип.КассирРМК,
//          *ВидОплаты - ОпределяемыйТип.ВидОплатыРМК,
//          *СуммаПродаж - ОпределяемыйТип.Число15_2РМК,
//          *СуммаВозвратов - ОпределяемыйТип.Число15_2РМК,
//          *СуммаВыдачиНаличных - ОпределяемыйТип.Число15_2РМК
//      *ТаблицаСуммПоПродавцам - ТаблицаЗначений.
//          *Касса - ОпределяемыйТип.КассаККМРМК,
//          *Продавец - ОпределяемыйТип.ПродавецРМК,
//          *СуммаПродаж - ОпределяемыйТип.Число15_2РМК,
//          *СуммаВозвратов - ОпределяемыйТип.Число15_2РМК
//      *ТаблицаОшибочныхЧеков - ТаблицаЗначений.
//          *Касса - ОпределяемыйТип.КассаККМРМК,
//          *ЭтоПродажа - Булево,
//          *КодРаздела - Строка. ("ОФД", "ЕГАИС", "ЭС НСПК", "Эквайринг"),
//          *ЧекСсылка - ОпределяемыйТип.ЧекККМРМК
//          *ТекстОшибки - Строка. 
//      *ТаблицаОтложенныхЧеков - ТаблицаЗначений.
//          *Касса - ОпределяемыйТип.КассаККМРМК,
//          *ЭтоПродажа - Булево,
//          *КодРаздела - Строка. ("СБП", "Другие виды оплаты"),
//          *ЧекСсылка - ОпределяемыйТип.ЧекККМРМК
//      *ТаблицаКасс - ТаблицаЗначений.
//          *Касса - ОпределяемыйТип.КассаККМРМК,
//          *ПредставлениеКассы - Строка,
//          *ПредставлениеКассовойСмены - Строка.
//          *НаличныеНаНачало - ОпределяемыйТип.Число15_2РМК.
//          *НаличныеНаКонец - ОпределяемыйТип.Число15_2РМК.
//          *НаличныеТекущийОстаток - ОпределяемыйТип.Число15_2РМК.
//          *СуммаВнесений - ОпределяемыйТип.Число15_2РМК.
//          *СуммаВыемок - ОпределяемыйТип.Число15_2РМК.
//
Функция ПолучитьДанныеОтчетаЗаСмену(ИсходныеДанные) Экспорт
	
	ДанныеДляОтчета = Новый Структура();
	ДанныеДляОтчета.Вставить("ТаблицаСумм", Новый ТаблицаЗначений);
	ДанныеДляОтчета.Вставить("ТаблицаСуммПоПродавцам", Новый ТаблицаЗначений);
	ДанныеДляОтчета.Вставить("ТаблицаОшибочныхЧеков", Новый ТаблицаЗначений);
	ДанныеДляОтчета.Вставить("ТаблицаОтложенныхЧеков", Новый ТаблицаЗначений);
	ДанныеДляОтчета.Вставить("ТаблицаКасс", Новый ТаблицаЗначений);
	ДанныеДляОтчета.Вставить("ПоВсемКассирам", Ложь);
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьДанныеОтчетаЗаСмену(ИсходныеДанные, ДанныеДляОтчета);
	
	Возврат ДанныеДляОтчета;
	
КонецФункции

// Формирует табличный документ расшифровки отчета за смену.
//
// Параметры:
//  ДанныеРасшифровки - Структура.
//  	*ИмяРаздела - Строка. Имя раздела ошибок чеков,
//      *МассивЧеков - Массив. Массив структур с ошибочными чеками и текстом ошибки.
// 
// Возвращаемое значение:
//  ТабличныйДокументРасшифровка - табличный документ, содержащий расшифровку.
//
Функция СформироватьРасшифровкуОтчетаЗаСмену(ДанныеРасшифровки) Экспорт
		
	ДеревоЧековТоваров = ПодготовитьДеревоЧековПоДаннымРасшифровки(ДанныеРасшифровки);
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьДеталиЧековДляРасшифровкиОтчетаЗаСмену(ДеревоЧековТоваров);
	ТабличныйДокументРасшифровка = СформироватьРасшифровкуОшибокОтчетаЗаСмену(ДеревоЧековТоваров, ДанныеРасшифровки.ГруппаРаздела, ДанныеРасшифровки.ИмяРаздела);
	
	Возврат ТабличныйДокументРасшифровка;
	
КонецФункции	

// Заполняет подменю настроек РМК сценариями использования РМК
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложение - форма настройки рабочего места кассира.
//
Процедура ЗаполнитьДоступныеСценарииИспользованияРМК(Форма) Экспорт
	
	ОбщегоНазначенияРМКПереопределяемый.ДополнитьДоступныеСценарииИспользованияРМК(Форма);
	ГруппаСценариев = Форма.Элементы.ГруппаПодменюСценарииИспользования;
	ГруппаСценариев.Видимость = (ГруппаСценариев.ПодчиненныеЭлементы.Количество() > 0);
	
КонецПроцедуры

// Устанавливает значения по умолчанию в настройках РМК для сценария "Терминал самообслуживания"
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложение - форма настройки рабочего места кассира.
//
Процедура УстановитьЗначенияНастроекДляТерминалаСамообслуживания(Форма) Экспорт
	
	Форма.НастройкаРМК.ПродажиСНесколькихКассККМ = Ложь;
	Форма.НастройкаРМК.ОсновнаяКассаККМ = Неопределено;
	Форма.НастройкаРМК.РазрешитьВыборПродавца = Ложь;
	Форма.НастройкаРМК.РазрешитьВыборСклада = Ложь;
	Форма.НастройкаРМК.ЗавершатьСессиюКассираПослеПродажи = Ложь;
	Форма.НастройкаРМК.ИспользоватьРежимСкупки = Ложь;
	Форма.НастройкаРМК.МаксимальныйПроцентРучнойСкидки = 0;
	Форма.НастройкаРМК.ВопросПоРасчетуСкидок = Ложь;
	Форма.НастройкаРМК.ВыдаватьПодарокНаКассе = Ложь;
	Форма.НастройкаРМК.ИспользоватьОплатуПлатежнымиКартами = Истина;
	
	Форма.НастройкаРМК.ИспользоватьОплатуНаличными = Ложь;
	Форма.НастройкаРМК.ВыдаватьНаличныеНаКассе = Ложь;
	Форма.НастройкаРМК.ИспользоватьПанельВводаНаличныхКупюр = Ложь;
	Форма.НастройкаРМК.ИспользоватьОплатуСертификатами = Ложь;
	
	Форма.Элементы.СтраницаВводНаличных.Видимость = Ложь;
	Форма.Элементы.ЭквайринговыеТерминалы.Доступность = Истина;
	
	Форма.ИспользоватьОплатуСертификатамиНСПК = Ложь;
	
	Форма.НастройкаРМК.ПечататьБумажныйЧек = Истина;
	Форма.НастройкаРМК.ОставлятьПоследнийЧекНаЭкране = Ложь;
	Форма.НастройкаРМК.СпособФормированияТоварногоЧека = 0;
	
	Форма.ГоризонтальныйОриентация = Ложь;
	
	Форма.НастройкаРМК.ВертикальнаяОриентация = Истина;
	Форма.НастройкаРМК.ИспользоватьСтрокуБыстрогоДобавленияТовара = Ложь;
	Форма.НастройкаРМК.ЗапускатьОбменИзИнтерфейсаРМК = Ложь;
	
	Форма.НастройкаРМК.СоздаватьЗаказы = Ложь;
	Форма.НастройкаРМК.ПокупательНовогоЗаказа = Неопределено;
	Форма.НастройкаРМК.СпособПечатиЗаказаПокупателя = 0;
	Форма.НастройкаРМК.ПечататьЗаказПриСоздании = Ложь;
	Форма.НастройкаРМК.ВестиЖурналДействийКассира = Ложь;
	Форма.НастройкаРМК.НапоминатьПроВводКартыЛояльности = Форма.ВводДисконтныхКарт;
	Форма.НастройкаРМК.ЗапретитьСопоставлениеТовара = Ложь;
	
	Форма.НастройкаРМК.СкрыватьQRОплатыНаличными = Ложь;
	Форма.НастройкаРМК.СкрыватьQRОплатыКартой = Ложь;
	
	Если Форма.НастройкаРМК.РежимНачальнойСтраницы = 1 Тогда
		Форма.НастройкаРМК.РежимНачальнойСтраницы = 0;
	КонецЕсли;
	
	ОбщегоНазначенияРМКПереопределяемый.ДополнитьЗначенияНастроекДляТерминалаСамообслуживания(Форма);
	
КонецПроцедуры

// Настраивает видимость элементов формы настроек РМК в зависимости от выбранного сценария использования
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложение - форма настройки рабочего места кассира.
//
Процедура НастроитьВидимостьЭлементовНастройкиРМК(Форма) Экспорт
	
	СценарийТерминалСамообслуживания = Перечисления.СценарииИспользованияРМК.ТерминалСамообслуживания;
	ЭтоСценарийТерминал = (Форма.НастройкаРМК.СценарийИспользования = СценарийТерминалСамообслуживания);
	
	Элементы = Форма.Элементы;
	Элементы.ГруппаПродажиСНесколькихКассККМ.Видимость = Не ЭтоСценарийТерминал;
	Элементы.ГруппаИспользованиеОбменаТоваров.Видимость = Не ЭтоСценарийТерминал;
	Элементы.ГруппаРучныеСкидкиНаценки.Видимость = Не ЭтоСценарийТерминал;
	Элементы.НастройкаРМКВопросПоРасчетуСкидок.Видимость = Не ЭтоСценарийТерминал;
	Элементы.НастройкаРМКВыдаватьПодарокНаКассе.Видимость = ЭтоСценарийТерминал;
	Элементы.ГруппаНаличные.Видимость = Не ЭтоСценарийТерминал;
	Элементы.НастройкаРМКИспользоватьОплатуСертификатами.Видимость = Не ЭтоСценарийТерминал;
	Элементы.ГруппаНастройкиФСС.Видимость = Не ЭтоСценарийТерминал;
	Элементы.НастройкаРМКОставлятьПоследнийЧекНаЭкране.Видимость = Не ЭтоСценарийТерминал;
	Элементы.НастройкаРМКСпособФормированияТоварногоЧека.Видимость = Не ЭтоСценарийТерминал;
	Элементы.РеквизитыЧека.Видимость = Не ЭтоСценарийТерминал;
	Элементы.ГруппаЗакрыватьПодборСтрокаБыстрогоДобавленияТовара.Видимость = Не ЭтоСценарийТерминал;
	Элементы.СтраницаГорячиеКлавиши.Видимость = Не ЭтоСценарийТерминал;
	Элементы.ГруппаКонтрольРаботыКассиров.Видимость = Не ЭтоСценарийТерминал;
	Элементы.ГруппаПовторноеПолучениеВеса.Видимость = Не ЭтоСценарийТерминал;
	Элементы.НастройкаРМКЗапретитьСопоставлениеТовара.Видимость = Не ЭтоСценарийТерминал;
	Элементы.НастройкаРМКСкрыватьQRОплатыКартой.Видимость = Не ЭтоСценарийТерминал;
	Элементы.НастройкаРМКСкрыватьQRОплатыНаличными.Видимость = Не ЭтоСценарийТерминал;
	Элементы.НастройкаРМКИспользоватьОплатуБонусами.Видимость = Форма.ВводДисконтныхКарт;
	
	ОбщегоНазначенияРМКПереопределяемый.НастроитьВидимостьЭлементовНастройкиРМК(Форма);
	
КонецПроцедуры

// Определяет является ли переданная особенность учета альтернативным табаком.
//
// Параметры:
//  Пользователь - ОпределяемыйТип.ПользовательРМК - пользователь, чей максимальный профиль необходимо определить.
//
// Возвращаемое значение:
//  СправочникСсылка.ПрофилиГруппДоступа - максимальный кассовый профиль пользователя.
//
Функция МаксимальныйКассовыйПрофильПользователя(Пользователь) Экспорт
	
	ПрофильДоступа = Справочники.ПрофилиГруппДоступа.ПустаяСсылка();
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьМаксимальныйКассовыйПрофильПользователя(Пользователь, ПрофильДоступа);
	Возврат ПрофильДоступа;
	
КонецФункции

// Проверяет, что пользователю доступен только режим кассы самообслуживания.
//
// Параметры:
//  Пользователь - ОпределяемыйТип.ПользовательРМК - пользователь, чей максимальный профиль необходимо определить.
//
// Возвращаемое значение:
//  Булево - Истина - пользователь может работать только в режиме кассы самообслуживания.
//
Функция ПользователюДоступенТолькоРежимКСО(Пользователь) Экспорт
	
	РезультатФункции = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.УстановитьПользователюПризнакДоступностиТолькоРежимаКСО(Пользователь,
		РезультатФункции);
	Возврат РезультатФункции;
	
КонецФункции

// Функция возвращает строку с последними 10 цифрами номера телефона в обратном порядке
//
// Параметры:
//  НомерТелефона - Строка - Строка с номером телефона
// Возвращаемое значение:
//  Строка - 10 последних цифр номера телефона в обратном порядке
Функция ПолучитьОбратныйНомерТелефонаБезКодаСтраны(НомерТелефона) Экспорт
	
	РезультатФункции = "";
	
	ДлинаОбратногоНомера = 10;
	ДлинаИсходногоНомера = СтрДлина(НомерТелефона);
	ИндексСимвола = 0;
	Пока ИндексСимвола < ДлинаИсходногоНомера И СтрДлина(РезультатФункции) < ДлинаОбратногоНомера Цикл
		ТекущийСимвол = Сред(НомерТелефона, ДлинаИсходногоНомера - ИндексСимвола, 1);
		Если СтрНайти("0123456789", ТекущийСимвол) > 0 Тогда
			РезультатФункции = РезультатФункции + ТекущийСимвол;
		КонецЕсли;
		ИндексСимвола = ИндексСимвола + 1;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает коды маркировки по данным информационной базы, актуальные для строки товаров.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ТекущаяСтрока - Структура - данные текущей строки.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица кодов маркировки - См. ОбщегоНазначенияРМК.КодыМаркировкиПоДаннымИБШаблон:
//   * ПолныйКодМаркировки - Строка - полный код маркировки в формате base64;
//   * КодМаркировкиПредставление - Строка - представление кода маркировки для пользователя;
//
Функция КодыМаркировкиПоДаннымИБ(Форма, ТекущаяСтрока) Экспорт
	
	КодыМаркировкиПоДаннымИБ = КодыМаркировкиПоДаннымИБШаблон();
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьКодыМаркировкиПоДаннымИБ(Форма, ТекущаяСтрока, КодыМаркировкиПоДаннымИБ);
	
	Возврат КодыМаркировкиПоДаннымИБ;
	
КонецФункции

// Функция запускает длительную операцию сверки данных с ОФД
//
// Параметры:
//  УникальныйИдентификатор - Строка - уникальный идентификатор формы владельца
//  КассаККМ - СправочникСсылка.КассаККМ - Касса ккм для сверки
// Возвращаемое значение:
//  Структура - результат выполнения длительной операции
Функция СверитьСДаннымиОФД(УникальныйИдентификатор, КассаККМ) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Сверка итогов с данными ОФД.'");
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("КассаККМ", КассаККМ);
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"ОбщегоНазначенияРМК.ПолучитьДанныеДляСверки",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
		
	Возврат РезультатВыполнения;
	
КонецФункции

// Возвращает нормализованный код маркировки
//
// Параметры:
//  КодМаркировки - Строка - исходный код маркировки
//
// Возвращаемое значение:
//  Строка - нормализованный код маркировки
Функция ПолучитьНормализованныйКодМаркировки(КодМаркировки) Экспорт
	
	КодНормализованный = КодМаркировки;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьНормализованныйКодМаркировки(КодМаркировки, КодНормализованный);
	Возврат КодНормализованный;
	
КонецФункции

// Функция возвращает массив используемых устройств выбранного типа на рабочем месте
//
// Параметры:
//  ИмяТипаОборудования - Строка - Строка с именем оборудования
//  РабочееМесто - ОпределяемыйТип.РабочееМестоРМК - рабочее место
// Возвращаемое значение:
//  Массив - массив отобранных устройств
Функция ПолучитьПодключенноеОборудованиеПоТипу(ИмяТипаОборудования, РабочееМесто = Неопределено) Экспорт
	
	Устройства = Новый Массив;
	
	СписокоборудованияОтбор = МенеджерОборудованияРМККлиентСервер.СписокОборудованияОтбор();
	Если Не СписокоборудованияОтбор = Неопределено И СписокоборудованияОтбор.Свойство("ТипыПО") Тогда
		Если СписокоборудованияОтбор.ТипыПО.Свойство(ИмяТипаоборудования) Тогда
			СписокоборудованияОтбор.ТипыПО.Вставить(ИмяТипаоборудования, Истина);
			СписокоборудованияОтбор.РабочееМесто = РабочееМесто;
			ОписаниеУстройств = МенеджерОборудованияРМК.СписокОборудования(СписокоборудованияОтбор);
			ЗаполнитьМассивУстройствПолученнымиДанными(Устройства, ОписаниеУстройств);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Устройства;
	
КонецФункции

// Записывает устройства распознавания электронных весов в регистр комплектации оборудования
// 
// Параметры:
//  ТаблицаУстройств - ТаблицаЗначений - таблица записываемых устройств.
//  УстройстваРабочегоМеста - Структура - отбор используемых устройств на выбранном рабочем месте.
//
Процедура ЗаписатьУстройстваРаспознаванияЭлектронныхВесов(ТаблицаУстройств, УстройстваРабочегоМеста) Экспорт
	
	ЭлектронныеВесыРабочегоМеста = УстройстваРабочегоМеста.ЭлектронныеВесы;
	УстройстваРаспознаванияРабочегоМеста = УстройстваРабочегоМеста.УстройстваРаспознавания;
	
	ЗапросИзмененийКомплектации = Новый Запрос;
	ЗапросИзмененийКомплектации.Текст = ПолучитьТекстЗапросаИзмененныхУстройствРаспознаванияЭлектронныхВесов();
	ЗапросИзмененийКомплектации.УстановитьПараметр("ТаблицаУстройств", ТаблицаУстройств);
	ЗапросИзмененийКомплектации.УстановитьПараметр("ЭлектронныеВесы", ЭлектронныеВесыРабочегоМеста);
	ЗапросИзмененийКомплектации.УстановитьПараметр("УстройстваРаспознавания", УстройстваРаспознаванияРабочегоМеста);
	
	НаборЗаписейКомплектации = РегистрыСведений.КомплектацияПодключаемогоОборудования.СоздатьНаборЗаписей();
	
	// Блокировка не устанавливается, т.к. настройкими управляет полноправный пользователь.
	// Конкурентной работы не ожидается.
	Выборка = ЗапросИзмененийКомплектации.Выполнить().Выбрать(); // АПК:1327
	Пока Выборка.Следующий() Цикл
		НаборЗаписейКомплектации.Очистить();
		НаборЗаписейКомплектации.Отбор.ОсновноеОборудование.Установить(Выборка.ЭлектронныеВесыСсылка);
		НаборЗаписейКомплектации.Отбор.ДополнительноеОборудование.Установить(Выборка.УстройствоРаспознаванияСсылка);
		Если Выборка.Добавить Тогда
			НоваяЗапись = НаборЗаписейКомплектации.Добавить();
			НоваяЗапись.ОсновноеОборудование = Выборка.ЭлектронныеВесыСсылка;
			НоваяЗапись.ДополнительноеОборудование = Выборка.УстройствоРаспознаванияСсылка;
		КонецЕсли;
		НаборЗаписейКомплектации.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

// Получает список распознанных весовых товаров, находящихся в продаже, по данных кодов SKU,
// полученных от устройства распознавания
//
// Параметры:
//  ПараметрыПолученияТоваров - Структура - данные для отборов при получении списка распознанных товаров:
//		*ВесовыеТовары - Массив - элементы, это структура с полями "Номенклатура" и "Характеристика" весовых товаров,
//								которые доступны для построения в плитке
//		*РаспознанныеТовары - Массив - элементы, это структура с колонками "Код" - код SKU, полученный от устройства
//								распознавания и "Вероятность" - вероятнось совпадения товара
//		(*) - дополнительные параметры прикладного решения. Подробнее в переопределяемых модулях прикладного решения.
// Возвращаемое значение:
//  РезультатФункции - Массив - элементы, структура, с данными товаров, с колонками:
//								"Номенклатура", "Характеристика", "Вероятность".
//
Функция ПолучитьТоварыПоДаннымРаспознавания(ПараметрыПолученияТоваров) Экспорт
	
	РезультатФункции = Новый Массив;
	
	ТаблицаВесовыхТоваров = ПодготовитьТаблицуОтбораТоваров(ПараметрыПолученияТоваров.ВесовыеТовары);
	ТаблицаКодовSKU = ПодготовитьТаблицуКодовSKU(ПараметрыПолученияТоваров.РаспознанныеТовары);
	ПараметрыПолученияТоваров.Вставить("ВесовыеТовары", ТаблицаВесовыхТоваров);
	ПараметрыПолученияТоваров.Вставить("РаспознанныеТовары", ТаблицаКодовSKU);
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьТоварыПоДаннымРаспознавания(ПараметрыПолученияТоваров, РезультатФункции);
	ОтброситьРаспознанныеТоварыСМизернойВероятностью(РезультатФункции);
	ПараметрыПолученияТоваров.Очистить();
	
	Возврат РезультатФункции;
	
КонецФункции

// Получает таблицу весовых товаров, которые могут быть загружены в устройства, требующие кода SKU
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма обучения устройств распознавания.
//
// Возвращаемое значение:
//  РезультатФункции - Таблица значений с колонками:
//		*Номенклатура - ОпределяемыйТип.НоменклатураРМК,
//		*Характеристика - ОпределяемыйТип.ХарактеристикаРМК,
//		*Весовой - Булево,
//		*SKU - Число.
//
Функция ПолучитьВесовыеТоварыДляРаботыСУстройствами(Форма) Экспорт
	
	РезультатФункции = Новый ТаблицаЗначений;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьВесовыеТоварыДляРаботыСУстройствами(Форма, РезультатФункции);
	Возврат РезультатФункции;
	
КонецФункции

// Настраивает форму обучения устройств распознавания
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма обучения устройств распознавания.
//
Процедура НастроитьФормуОбученияУстройствРаспознавания(Форма) Экспорт
	
	ОбщегоНазначенияРМКПереопределяемый.НастроитьФормуОбученияУстройствРаспознавания(Форма);
	
КонецПроцедуры

// Удаляет устаревшие записи журнала действий кассира
//
Процедура ОчиститьИсториюЖурналаДействийКассира() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОчисткаЖурналаДействийКассира);
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросСроков = Новый Запрос;
	ЗапросСроков.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиРабочегоМестаКассира.РабочееМесто КАК РабочееМесто,
	|	НастройкиРабочегоМестаКассира.СрокХраненияОперацийСЧеком КАК СрокХраненияОперацийСЧеком
	|ИЗ
	|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
	|ГДЕ
	|	НЕ НастройкиРабочегоМестаКассира.ПометкаУдаления";
	РезультатЗапроса = ЗапросСроков.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаСроков = РезультатЗапроса.Выбрать();
		Пока ВыборкаСроков.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаСроков.СрокХраненияОперацийСЧеком)
					И Не ЭтоСрокХраненияВесьПериод(ВыборкаСроков.СрокХраненияОперацийСЧеком) Тогда
				
				РегистрыСведений.ЖурналДействийКассира.ОчиститьУстаревшиеДанные(ВыборкаСроков.РабочееМесто,
					ВыборкаСроков.СрокХраненияОперацийСЧеком);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Удаляет устаревшие записи журнала действий кассира
//
// Параметры:
//  РабочееМесто - ОпределяемыйТип.РабочееМестоРМК.
//  СрокХранения - ОпределяемыйТип.ПериодХраненияИсторииРМК.
//
Процедура ОчиститьИсториюЖурналаДействийКассираСОтбором(РабочееМесто, СрокХранения) Экспорт
	
	РегистрыСведений.ЖурналДействийКассира.ОчиститьУстаревшиеДанные(РабочееМесто, СрокХранения);
	
КонецПроцедуры

// Выполняет дополнительные настройки перед компоновкой результата отчета "Незавершенные действия с чеком"
//
// Параметры:
//  ОбъектОтчет - ОтчетОбъект.НезавершенныеДействияСЧекомРМК
//
Процедура ПриКомпоновкеРезультатаОтчетаНезавершенныхДействийСЧеком(ОбъектОтчет) Экспорт
	ОбщегоНазначенияРМКПереопределяемый.ПриКомпоновкеРезультатаОтчетаНезавершенныхДействийСЧеком(ОбъектОтчет);
КонецПроцедуры

// Определяет является ли период хранения бессрочным.
//
// Параметры:
//  ПериодХранения - ОпределяемыйТип.ПериодХраненияИсторииРМК.
//
// Возвращаемое значение:
//  Булево - истина, если период хранения бессрочным.
//
Функция ЭтоСрокХраненияВесьПериод(ПериодХранения) Экспорт
	
	РезультатФункции = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьСрокХраненияВесьПериод(РезультатФункции, ПериодХранения);
	
	Возврат РезультатФункции;
	
КонецФункции

// Определяет является ли период хранения - день.
//
// Параметры:
//  ПериодХранения - ОпределяемыйТип.ПериодХраненияИсторииРМК.
//
// Возвращаемое значение:
//  Булево - истина, если период хранения = День.
//
Функция ЭтоСрокХраненияДень(ПериодХранения) Экспорт
	
	РезультатФункции = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьСрокХраненияДень(РезультатФункции, ПериодХранения);
	
	Возврат РезультатФункции;
	
КонецФункции

// Определяет является ли период хранения - неделя.
//
// Параметры:
//  ПериодХранения - ОпределяемыйТип.ПериодХраненияИсторииРМК.
//
// Возвращаемое значение:
//  Булево - истина, если период хранения = Неделя.
//
Функция ЭтоСрокХраненияНеделя(ПериодХранения) Экспорт
	
	РезультатФункции = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьСрокХраненияНеделя(РезультатФункции, ПериодХранения);
	
	Возврат РезультатФункции;
	
КонецФункции

// Определяет является ли период хранения - декада.
//
// Параметры:
//  ПериодХранения - ОпределяемыйТип.ПериодХраненияИсторииРМК.
//
// Возвращаемое значение:
//  Булево - истина, если период хранения = Декада.
//
Функция ЭтоСрокХраненияДекада(ПериодХранения) Экспорт
	
	РезультатФункции = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьСрокХраненияДекада(РезультатФункции, ПериодХранения);
	
	Возврат РезультатФункции;
	
КонецФункции

// Определяет является ли период хранения - месяц.
//
// Параметры:
//  ПериодХранения - ОпределяемыйТип.ПериодХраненияИсторииРМК.
//
// Возвращаемое значение:
//  Булево - истина, если период хранения = Месяц.
//
Функция ЭтоСрокХраненияМесяц(ПериодХранения) Экспорт
	
	РезультатФункции = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьСрокХраненияМесяц(РезультатФункции, ПериодХранения);
	
	Возврат РезультатФункции;
	
КонецФункции

// Определяет является ли период хранения - квартал.
//
// Параметры:
//  ПериодХранения - ОпределяемыйТип.ПериодХраненияИсторииРМК.
//
// Возвращаемое значение:
//  Булево - истина, если период хранения = Квартал.
//
Функция ЭтоСрокХраненияКвартал(ПериодХранения) Экспорт
	
	РезультатФункции = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьСрокХраненияКвартал(РезультатФункции, ПериодХранения);
	
	Возврат РезультатФункции;
	
КонецФункции

// Определяет является ли период хранения - полугодие.
//
// Параметры:
//  ПериодХранения - ОпределяемыйТип.ПериодХраненияИсторииРМК.
//
// Возвращаемое значение:
//  Булево - истина, если период хранения = Полугодие.
//
Функция ЭтоСрокХраненияПолугодие(ПериодХранения) Экспорт
	
	РезультатФункции = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьСрокХраненияПолугодие(РезультатФункции, ПериодХранения);
	
	Возврат РезультатФункции;
	
КонецФункции

// Определяет является ли период хранения - год.
//
// Параметры:
//  ПериодХранения - ОпределяемыйТип.ПериодХраненияИсторииРМК.
//
// Возвращаемое значение:
//  Булево - истина, если период хранения = Год.
//
Функция ЭтоСрокХраненияГод(ПериодХранения) Экспорт
	
	РезультатФункции = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьСрокХраненияГод(РезультатФункции, ПериодХранения);
	
	Возврат РезультатФункции;
	
КонецФункции

// Получает данные расшифровки отчета "НезавершенныеДействияСЧекомРМК"
//
// Параметры:
//  Расшифровка - Число.
//  АдресДанныхРасшифровки - Строка.
//
// Возвращаемое значение:
//  ПоляОтбора - Структура.
//
Функция ПолучитьДанныеРасшифровкиНезавершенныхДействийСЧеком(Расшифровка, АдресДанныхРасшифровки) Экспорт
	
	ПоляОтбора = Неопределено;
	ДанныеРасшифровкиКомпоновки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки);
	КоличествоЭлементов = ДанныеРасшифровкиКомпоновки.Элементы.Количество();
	ЭлементПоля = ДанныеРасшифровкиКомпоновки.Элементы[Расшифровка];
	Если ЭлементПоля.ОсновноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать Тогда
		ЗначенияПолей = ЭлементПоля.ПолучитьПоля();
		ПолеНомерСеанса = ЗначенияПолей.Найти("НомерСеанса");
		Если Не ПолеНомерСеанса = Неопределено Тогда
			ПолеРабочееМесто = ЗначенияПолей.Найти("РабочееМесто");
			ПолеТорговыйОбъект = ЗначенияПолей.Найти("ТорговыйОбъект");
			ПолеДатаОперации = ЗначенияПолей.Найти("ДатаОперации");
			
			ПоляОтбора = Новый Структура();
			ПоляОтбора.Вставить("НомерСеанса", ПолеНомерСеанса.Значение);
			ПоляОтбора.Вставить("РабочееМесто", ПолеРабочееМесто.Значение);
			ПоляОтбора.Вставить("ТорговыйОбъект", ПолеТорговыйОбъект.Значение);
			ПоляОтбора.Вставить("ДатаВремяОперации", ПолеДатаОперации.Значение);
		КонецЕсли;
	КонецЕсли;
	Возврат ПоляОтбора;
	
КонецФункции

// Возвращает признак использования КМ по номенклатуре
//
// Параметры:
//  Номенклатура - Ссылка - номенклатура
//
// Возвращаемое значение:
//  Булево - Ложь, если номенклатура маркируется средством идентификации, не имеющий кода маркировки, иначе Истина
//
Функция ПризнакИспользованияКМПоНоменклатуре(Номенклатура) Экспорт
	
	НоменклатураИспользующаяКМ = Истина;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакИспользованияКМПоНоменклатуре(Номенклатура, НоменклатураИспользующаяКМ);
	Возврат НоменклатураИспользующаяКМ;
	
КонецФункции

Функция ИспользоватьРазрешительныйРежимПродажиГосИС(Форма) Экспорт
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьИспользованиеРазрешительногоРежимаГосИС(Форма, Результат);
	Возврат Результат;
	
Конецфункции

// Возвращает признак ведения учета маркируемой продукци переданного вида.
// 
// Параметры:
//  ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции
// Возвращаемое значение:
//  Булево - признак ведения учета маркируемой продукции переданного вида.
//
Функция ВестиУчетМаркируемойПродукции(ВидМаркируемойПродукции = Неопределено) Экспорт
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакВедениеУчетМаркируемойПродукции(ВидМаркируемойПродукции, Результат);
	Возврат Результат;
	
КонецФункции

// Возвращает результат проверки зацикленности палитры товаров
//
// Параметры:
//  ПроверяемаяПалитра - СправочникСсылка.ПалитраТоваровРМК.
//  ВложенныеПалитры - Массив - ссылки на вложенные палитры в проверяемой палитре.
//
// Возвращаемое значение:
//  Структура - результат проверки
//  	*ЕстьЗацикливание - Булево,
//  	*ТекстОшибки - Строка.
//
Функция ПолучитьРезультатПроверкиЗацикленностиПалитры(ПроверяемаяПалитра, ВложенныеПалитры) Экспорт
	
	РезультатПроверки = Новый Структура("ЕстьЗацикливание", Ложь);
	
	МассивУровней = Новый Массив;
	ИндексПервогоВхождения = -1;
	ИндексВторогоВхождения = -1;
	Если НайденаЗацикленностьТекущейПалитры(ПроверяемаяПалитра, МассивУровней, ВложенныеПалитры) Тогда
		РезультатПроверки.Вставить("ЕстьЗацикливание", Истина);
		ИндексВторогоВхождения = МассивУровней.Количество() - 1;
		ЦикличнаяПалитра = МассивУровней[ИндексВторогоВхождения];
		ИндексЭлемента = 0;
		Пока ИндексЭлемента < ИндексВторогоВхождения И ИндексПервогоВхождения = -1 Цикл
			Если МассивУровней[ИндексЭлемента] = ЦикличнаяПалитра Тогда
				ИндексПервогоВхождения = ИндексЭлемента;
			КонецЕсли;
			ИндексЭлемента = ИндексЭлемента + 1;
		КонецЦикла;
		
		ТекстОшибки = СформироватьТекстОшибкиЗацикливания(МассивУровней, ИндексПервогоВхождения, ИндексВторогоВхождения);
		РезультатПроверки.Вставить("ТекстОшибки", ТекстОшибки);
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Настраивает подменю "Заполнить" на форме элемента справочника "Палитра товаров"
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма элемента справочнимка "Палитра Товаров".
//
Процедура НастроитьДоступныеСпособыЗаполненияПалитры(Форма) Экспорт
	
	ОбщегоНазначенияРМКПереопределяемый.НастроитьДоступныеСпособыЗаполненияПалитры(Форма);
	
КонецПроцедуры

// Возвращает признак заполненности обязательных параметров СКД.
// 
// Параметры:
//  ХранилищеШаблоновРМКОбъект - СправочникОбъект.ХранилищеШаблоновРМК - объект хранилища шаблонов РМК.
//
// Возвращаемое значение:
//  Булево - признак заполненности обязательных параметров СКД.
//
Функция ОбязательныеПараметрыСКДЗаполнены(ХранилищеШаблоновРМКОбъект) Экспорт
	
	ВсеВерно = Истина;
	
	Если ХранилищеШаблоновРМКОбъект.СхемаКомпоновкиДанных <> Неопределено Тогда
		
		ПроверяемаяСхема = ХранилищеШаблоновРМКОбъект.СхемаКомпоновкиДанных.Получить();
		
		Если ПроверяемаяСхема = Неопределено Тогда
			Возврат ВсеВерно;
		КонецЕсли;
		
		// Подготовка компоновщика макета компоновки данных, загрузка настроек.
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПроверяемаяСхема));
		
		КомпоновщикНастроек.ЗагрузитьНастройки(ПроверяемаяСхема.НастройкиПоУмолчанию);

		НастройкиСКД = КомпоновщикНастроек.Настройки;
		СписокПараметровСКД = НастройкиСКД.ПараметрыДанных.Элементы;
		ИндексПараметра = 0;
		
		Для Каждого ПараметрСКД Из СписокПараметровСКД Цикл
			
			Если ТипЗнч(ПараметрСКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				
				ПараметрНастроек = КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры.
					НайтиПараметр(ПараметрСКД.Параметр);
				
				Если ПараметрНастроек <> Неопределено И ПараметрНастроек.ЗапрещатьНезаполненныеЗначения Тогда
					
					Если (НЕ ПараметрСКД.Использование) ИЛИ (НЕ ЗначениеЗаполнено(ПараметрСКД.Значение)) Тогда
						
						ТекстСообщения = НСтр("ru = 'В схеме компоновки не заполнено значение обязательного параметра ""%1"".
							|Откройте редактор макета и настройте параметры СКД.'");
						ИмяПараметраСКД = ?(ЗначениеЗаполнено(ПараметрСКД.ПредставлениеПользовательскойНастройки),
												ПараметрСКД.ПредставлениеПользовательскойНастройки,
												?(ЗначениеЗаполнено(ПараметрНастроек.Заголовок),
													ПараметрНастроек.Заголовок,
													ПараметрНастроек.Имя));
						ТекстСообщения = СтрШаблон(ТекстСообщения, ИмяПараметраСКД);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,
							"ФормаРедактироватьМакет",
							"Объект");
						ВсеВерно = Ложь;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ИндексПараметра = ИндексПараметра + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ВсеВерно;
	
КонецФункции

// Определяет является ли переданная особенность учета меховой продукцией.
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - особенность учета.
//
// Возвращаемое значение:
//  Булево - Истина, если особенность учета является меховой.
//
Функция ЭтоМеховаяПродукция(ОсобенностьУчета) Экспорт
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьОсобенностьУчетаМеховаяПродукция(ОсобенностьУчета, Результат);
	
	Возврат Результат;
	
КонецФункции

// Определяет является ли переданная особенность учета пивной продукцией.
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - особенность учета.
//
// Возвращаемое значение:
//  Булево - Истина, если особенность учета является пивной.
//
Функция ЭтоПивнаяПродукция(ОсобенностьУчета) Экспорт
	
	Результат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ОпределитьОсобенностьУчетаПивнаяПродукция(ОсобенностьУчета, Результат);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КомпоновкаДанных

// Возвращает составляющие имени поля СКД
//
// Параметры:
//	ПолноеИмя - полное имя поля СКД.
//
// Возвращаемое значение:
//	МассивЧастей - массив, содержащий части полного имени.
//
Функция МассивСоставляющихИмени(ПолноеИмя)

	МассивЧастей	= Новый Массив;
	ИмяДляОбработки	= ПолноеИмя;
	
	Пока НЕ ПустаяСтрока(ИмяДляОбработки) Цикл
		
		Если Лев(ИмяДляОбработки, 1) = "[" Тогда
			
			Позиция = Найти(ИмяДляОбработки, "]");
			
			Если Позиция = 0 Тогда
				
				МассивЧастей.Добавить(Сред(ИмяДляОбработки, 2));
				ИмяДляОбработки = "";
				
			Иначе
				
				МассивЧастей.Добавить(Сред(ИмяДляОбработки, 1, Позиция));
				ИмяДляОбработки = Сред(ИмяДляОбработки, Позиция + 2);
				
			КонецЕсли;
			
		Иначе
			
			Позиция = Найти(ИмяДляОбработки, ".");
			
			Если Позиция = 0 Тогда
				
				МассивЧастей.Добавить(ИмяДляОбработки);
				ИмяДляОбработки = "";
				
			Иначе
				
				МассивЧастей.Добавить(Лев(ИмяДляОбработки, Позиция - 1));
				ИмяДляОбработки = Сред(ИмяДляОбработки, Позиция + 1);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЧастей;

КонецФункции

#КонецОбласти

#Область ЗапретыПродаж

// Обновляет до актуального значения признак разрешения интерактивного редактирования
//
// Параметры:
//  НастройкаРабочегоМеста - СправочникСсылка.НастройкиРМК - настройка, в которой хранится текущее значение запрета
//  РедактированиеРазрешено - Булево - значение запрета из мастер - системы
//
// Возвращаемое значение:
//  Результат - Структура - 
// 	(содержит:
//		ВыполнениеУспешно - Булево;
//		Комментарий - Строка - дополнительная информация о состоянии выполнения)
//
Функция ОбновитьПризнакРазрешенияИнтерактивногоРедактирования(НастройкаРабочегоМеста, РедактированиеРазрешено)
	
	Результат = ОбщегоНазначенияРМККлиентСервер.РезультатОбработкиДанныхПоУмолчанию();
	
	Если ЗначениеЗаполнено(НастройкаРабочегоМеста) И ТипЗнч(РедактированиеРазрешено) = Тип("Булево") Тогда
		
		ТекущееЗначениеЗапрета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаРабочегоМеста,
			"ЗапрещеноРедактированиеУсловийОграниченийПродаж");
		
		РедактированиеЗапрещено = НЕ РедактированиеРазрешено;
		
		Если ТекущееЗначениеЗапрета <> РедактированиеЗапрещено Тогда
			
			ОбъектДляИзменения = НастройкаРабочегоМеста.ПолучитьОбъект();
			ОбъектДляИзменения.ЗапрещеноРедактированиеУсловийОграниченийПродаж = РедактированиеЗапрещено;
			
			Попытка
				
				ОбъектДляИзменения.Записать();// АПК:1327 - конкурентная работа с данными маловероятна
				Результат.ВыполнениеУспешно = Истина;
				Результат.Комментарий = НСтр("ru = 'Признак запрета редактирования успешно обновлен'");
				
			Исключение
				
				ОбщаяИнформацияОбОшибке =
					НСтр("ru = 'Ошибка при обновлении признака разрешения редактирования запретов.'",
						ОбщегоНазначения.КодОсновногоЯзыка()); 
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(ОбщаяИнформацияОбОшибке,
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки);
				Результат.ТекстОшибки = СтрШаблон("%1%2", ОбщаяИнформацияОбОшибке, ПодробноеПредставлениеОшибки);
				
			КонецПопытки;
			
		Иначе
			
			Результат.ВыполнениеУспешно = Истина;
			Результат.Комментарий = НСтр("ru = 'Обновление признака разрешения редактирования запретов не требуется.'");
			
		КонецЕсли;
		
	Иначе
		
		Результат.Комментарий =
			НСтр("ru = 'Невозможно обновить признак разрешения редактирования запретов по переданным исходным данным.'");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область Интеграция_с_API_сервиса_лояльности

Функция ДанныеОграниченияПродажиУспешноЗагружены(ОграничениеПродажи)
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(ОграничениеПродажи) Тогда
		
		РезультатЗагрузкиОграничений = ЗагрузитьДанныеОграниченияПродажи(ОграничениеПродажи);
		Результат = РезультатЗагрузкиОграничений.ВыполнениеУспешно;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьДанныеОграниченияПродажи(ОграничениеПродажи)

	Результат = ОбщегоНазначенияРМККлиентСервер.РезультатОбработкиДанныхПоУмолчанию();
	
	ДесериализованныеДанные = ДесериализоватьДанные(ОграничениеПродажи);
	Если ДесериализованныеДанныеКорректны(ДесериализованныеДанные) Тогда
		
		ЗагрузкаУспешна = АктуализироватьДанныеЗапрета(ДесериализованныеДанные);
		Результат.ВыполнениеУспешно = ЗагрузкаУспешна;
		
	Иначе
		Результат.Комментарий = НСтр("ru = 'Ошибка десериализации данных, подробнее см. журнал регистрации'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция АктуализироватьДанныеЗапрета(ИсходныеДанные)
	
	ДанныеОбновлены = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.АктуализироватьДанныеЗапрета(ИсходныеДанные, ДанныеОбновлены);
	
	Возврат ДанныеОбновлены;
	
КонецФункции

#КонецОбласти

#Область Десериализация_данных

Функция ДесериализоватьДанные(ИсходныеДанные)
	
	ДесериализованныеДанные = Новый Структура();
	
	Если ЗначениеЗаполнено(ИсходныеДанные)
		И ТипЗнч(ИсходныеДанные) = Тип("Структура") Тогда
		
	СоответствиеКонтекстовИмен = ОбщегоНазначенияРМКПовтИсп.СоответствиеИменСущностейЗапретовПродаж();
		
		Для каждого ЭлементОтвета Из ИсходныеДанные Цикл
			
			ДесериализованноеЗначение = Неопределено;
			ЗначениеДанных = ЭлементОтвета.Значение;
			
			Если ТипЗнч(ЗначениеДанных) = Тип("Структура") Тогда
				ДесериализованноеЗначение = ДесериализоватьСсылочнуюСущность(ЭлементОтвета);
			ИначеЕсли ТипЗнч(ЗначениеДанных) = Тип("Массив") Тогда
				ДесериализованноеЗначение = ДесериализоватьКоллекцию(ЭлементОтвета);
			Иначе
				ДесериализованноеЗначение = ДесериализоватьСущностьПримитивногоТипа(ЭлементОтвета);
			КонецЕсли;
			
			ИсходноеИмяСущности = ЭлементОтвета.Ключ;
			
			ИмяСущности = ?(СоответствиеКонтекстовИмен.Свойство(ИсходноеИмяСущности),
				СоответствиеКонтекстовИмен[ИсходноеИмяСущности],
				ИсходноеИмяСущности);
			
			ДесериализованныеДанные.Вставить(ИмяСущности, ДесериализованноеЗначение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДесериализованныеДанные;
	
КонецФункции

// Проверяет заполненность в ответе от сервиса обязательных к заполнению полей
// по результатам десериализации в соответствии со схемой проверки
//
// Параметры:
//  Данные - Структура - десериализованный ответ от сервера лояльности
//
// Возвращаемое значение:
//  Результат - Булево
//
Функция ДесериализованныеДанныеКорректны(Данные)

	ДанныеКорректны = Ложь;
	
	Если ТипЗнч(Данные) = Тип("Структура") И ЗначениеЗаполнено(Данные) Тогда
	
		СхемаПроверки = ОбщегоНазначенияРМКПовтИсп.
			СхемаПроверкиКорректнойДесериализацииОтветаОтСервераЛояльности();
		
		Для каждого Элемент Из Данные Цикл
			
			ЗначениеПроверяемогоСвойства = Элемент.Значение;
			
			Если ТипЗнч(ЗначениеПроверяемогоСвойства) = Тип("Массив") Тогда
				
				Для каждого ЭлементМассива Из ЗначениеПроверяемогоСвойства Цикл
					
					ДанныеКорректны = ДесериализованныеДанныеКорректны(ЭлементМассива);
					Если НЕ ДанныеКорректны Тогда
						Возврат ДанныеКорректны;
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				ИмяПроверяемогоСвойства = Элемент.Ключ;
				
				// возможность работы с пустыми полями
				ДопускаетсяПустоеЗначение = СхемаПроверки.Свойство(ИмяПроверяемогоСвойства)
					И СхемаПроверки[ИмяПроверяемогоСвойства];
				
				// фактическая заполненность поля
				ЗагруженноеЗначениеЗаполнено = ЗначениеЗаполнено(ЗначениеПроверяемогоСвойства);
				
				// недопустимо пустое поле, когда ожидается обязательное заполнение поля
				Если НЕ (ДопускаетсяПустоеЗначение ИЛИ ЗагруженноеЗначениеЗаполнено) Тогда
					Возврат ДанныеКорректны;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеКорректны = Истина;
		
	КонецЕсли;
	
	Возврат ДанныеКорректны;
	
КонецФункции

// Десериализует ссылочную по данным сервера лояльности, сопоставляя с существующими сущностями
//
// Параметры:
//  ИсходныеДанные - Структура - исходные данные для десериализации;
//
// Возвращаемое значение:
//  РезультатДесериализации - ЛюбаяСсылка
//
Функция ДесериализоватьСсылочнуюСущность(ИсходныеДанные)
	
	Результат = Неопределено;
	
		ПравилаДесериализации = ОбщегоНазначенияРМКПовтИсп.НаборПравилДесериализацииЗапретовПродаж();
		ИмяСущности = ИсходныеДанные.Ключ;
		
		Если ПравилаДесериализации.Свойство(ИмяСущности) Тогда
			
			ЗначениеСущности = ИсходныеДанные.Значение;
			
			ПравилоДесериализации = ПравилаДесериализации[ИмяСущности];
			
			ТипДанных = НРег(ПравилоДесериализации.ТипДанных);
			ПозицияТочкиВИмениТипа = СтрНайти(ТипДанных, ".");
			
			Если ПозицияТочкиВИмениТипа > 0 Тогда
				
				НаименованиеТипа = Сред(ТипДанных, ПозицияТочкиВИмениТипа + 1);
				
				Если ПравилоДесериализации.Свойство("Идентификатор") Тогда
					
					ИмяИдентификатораКонтекстаAPI = ПравилоДесериализации.Идентификатор;
					
					Если ЗначениеСущности.Свойство(ИмяИдентификатораКонтекстаAPI) Тогда
						
						ИдентификаторСущности = ЗначениеСущности[ИмяИдентификатораКонтекстаAPI];
						
						Если СтрНайти(ТипДанных, "перечислениессылка") > 0 Тогда // АПК:1036 - опорный литерал
							
							Если ЗначениеЗаполнено(ИдентификаторСущности) Тогда
							
								Попытка
									Результат = Перечисления[НаименованиеТипа][ИдентификаторСущности];
								Исключение
									
									ЗаписьЖурналаРегистрации(
										НСтр("ru = 'Не удалось найти значение перечисления при загрузке запрета продаж из сервера лояльности.'",
											ОбщегоНазначения.КодОсновногоЯзыка()),
											УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
									
								КонецПопытки;
								
							Иначе
								
								Попытка
									Результат = Перечисления[НаименованиеТипа].ПустаяСсылка();
								Исключение
									
									ЗаписьЖурналаРегистрации(
										НСтр("ru = 'Не удалось найти значение перечисления при загрузке запрета продаж из сервера лояльности.'",
											ОбщегоНазначения.КодОсновногоЯзыка()),
											УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
									
								КонецПопытки;
							
							КонецЕсли;
							
						ИначеЕсли СтрНайти(ТипДанных, "справочникссылка") > 0 Тогда // АПК:1036 - опорный литерал
							
							Если ЗначениеЗаполнено(ИдентификаторСущности) Тогда

								ИдентификаторЭлементаСправочника = Новый УникальныйИдентификатор(ИдентификаторСущности);
								СсылкаНаЭлементСправочника = Справочники[НаименованиеТипа].ПолучитьСсылку(ИдентификаторЭлементаСправочника);
								
								ТекстЗапроса = СтрШаблон("ВЫБРАТЬ
								|	Справочник.Ссылка КАК Ссылка
								|ИЗ
								|	Справочник.%1 КАК Справочник
								|ГДЕ
								|	НЕ Справочник.ПометкаУдаления
								|	И Справочник.Ссылка = &Ссылка", НаименованиеТипа);
								
								Запрос = Новый Запрос(ТекстЗапроса);
								Запрос.УстановитьПараметр("Ссылка", СсылкаНаЭлементСправочника);
								
								Выборка = Запрос.Выполнить().Выбрать();
								
								Результат = ?(Выборка.Следующий(), Выборка.Ссылка, Справочники[НаименованиеТипа].ПустаяСсылка());
								
							Иначе
								Результат = Справочники[НаименованиеТипа].ПустаяСсылка();
							КонецЕсли;

						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Результат) И ПравилоДесериализации.Свойство("ПоляПоиска") Тогда
					
					СоответствиеИменПолейПоиска = ПравилоДесериализации.ПоляПоиска;
					
					Если ЗначениеЗаполнено(СоответствиеИменПолейПоиска) Тогда
						
						ЗначенияПолейПоиска = Новый Структура();
						
						Для каждого ПолеПоиска Из СоответствиеИменПолейПоиска Цикл
							
							ИмяПоляПоискаВКонтекстеСервераЛояльности = ПолеПоиска.Ключ;
							ИмяПоляПоискаВКонтекстеРМК = ПолеПоиска.Значение;
							ЗначениеПоля = ЗначениеСущности[ИмяПоляПоискаВКонтекстеСервераЛояльности];
							ЗначенияПолейПоиска.Вставить(ИмяПоляПоискаВКонтекстеРМК, ЗначениеПоля);
						
						КонецЦикла;
						
						Если ЗначениеЗаполнено(ЗначенияПолейПоиска) Тогда
							
							ТекстЗапроса = СтрШаблон("ВЫБРАТЬ
							|	Справочник.Ссылка КАК Ссылка
							|ИЗ
							|	Справочник.%1 КАК Справочник
							|ГДЕ
							|	НЕ Справочник.ПометкаУдаления", НаименованиеТипа);
							
							Запрос = Новый Запрос;
							
							Для каждого Элемент Из ЗначенияПолейПоиска Цикл
							
								ТекстЗапроса = СтрШаблон("%1 И Справочник.%2 = &%2", ТекстЗапроса, Элемент.Ключ);
								Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
							
							КонецЦикла;
							
							Запрос.Текст = ТекстЗапроса;
							
							Выборка = Запрос.Выполнить().Выбрать();
							
							Результат = ?(Выборка.Следующий(), Выборка.Ссылка, Справочники[НаименованиеТипа].ПустаяСсылка());
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Десериализует сущность примитивного типа по данным сервера лояльности
//
// Параметры:
//  ИсходныеДанные - Структура - исходные данные для десериализации
//
// Возвращаемое значение:
//  РезультатДесериализации - примитивный тип
//
Функция ДесериализоватьСущностьПримитивногоТипа(ИсходныеДанные)
	
	Результат = Неопределено;
	
		ПравилаДесериализации = ОбщегоНазначенияРМКПовтИсп.НаборПравилДесериализацииЗапретовПродаж();
		ИмяСущности = ИсходныеДанные.Ключ;
		
		Если ПравилаДесериализации.Свойство(ИмяСущности) Тогда
			
			ЗначениеСущности = ИсходныеДанные.Значение;
			
			ПравилоДесериализации = ПравилаДесериализации[ИмяСущности];
			
			ТипДанных = НРег(ПравилоДесериализации.ТипДанных);
			
			Если ТипДанных = "булево" Тогда
				
				ЗначениеПоУмолчанию = Ложь;
				
				Если ТипЗнч(ЗначениеСущности) = Тип("Число")
					ИЛИ ТипЗнч(ЗначениеСущности) = Тип("Строка") Тогда
					
					Попытка
						Результат = Булево(ЗначениеСущности);
					Исключение
						
						Результат = ЗначениеПоУмолчанию;
						ЗафиксироватьОшибкуПриведенияТипов(ИмяСущности, ПравилоДесериализации.ТипДанных);
						
					КонецПопытки;
					
				ИначеЕсли ТипЗнч(ЗначениеСущности) = Тип("Булево") Тогда
					Результат = ЗначениеСущности;
				Иначе
					Результат = ЗначениеПоУмолчанию;
				КонецЕсли;
				
			ИначеЕсли ТипДанных = "дата" ИЛИ ТипДанных = "время" ИЛИ ТипДанных = "датавремя" Тогда // АПК:1036 - опорный литерал
				
				ЗначениеПоУмолчанию = Дата(1, 1, 1, 0, 0, 0);
				
				Если ТипЗнч(ЗначениеСущности) = Тип("Строка") Тогда
					
					ЧастьДаты = ЧастиДаты[ТипДанных];
					Результат = СтроковыеФункцииКлиентСервер.СтрокаВДату(ЗначениеСущности, ЧастьДаты);
					
				Иначе
					Результат = ЗначениеПоУмолчанию;
				КонецЕсли;
				
			ИначеЕсли ТипДанных = "число" Тогда
				
				ЗначениеПоУмолчанию = 0;
				
				Если ТипЗнч(ЗначениеСущности) = Тип("Строка") Тогда
				
					Результат = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗначениеСущности);
					Если Результат = Неопределено Тогда 
						Результат = ЗначениеПоУмолчанию;
					КонецЕсли;
					
				ИначеЕсли ТипЗнч(ЗначениеСущности) = Тип("Число") Тогда
					Результат = ЗначениеСущности;
				Иначе
					Результат = ЗначениеПоУмолчанию;
				КонецЕсли;
			Иначе
				Результат = ЗначениеСущности;
			КонецЕсли;
			
		КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Десериализует сущность типа коллекция, поддержка десериализации вложенных коллекций не предусмотрена.
//
// Параметры:
//  ИсходныеДанные - Массив - исходные данные для десериализации
//
// Возвращаемое значение:
//  РезультатДесериализации - Массив
//
Функция ДесериализоватьКоллекцию(ИсходныеДанные)

	Результат = Новый Массив;
	
	ЗначениеИсходныхДанных = ИсходныеДанные.Значение;
	
	Если ТипЗнч(ЗначениеИсходныхДанных) = Тип("Массив") Тогда
		
		Для каждого Элемент Из ЗначениеИсходныхДанных Цикл
			
			Если ТипЗнч(Элемент) = Тип("Структура") Тогда
				ДесериализованноеЗначение = ДесериализоватьДанные(Элемент);
			ИначеЕсли НЕ ТипЗнч(Элемент) = Тип("Массив") Тогда
				ДесериализованноеЗначение = ДесериализоватьСущностьПримитивногоТипа(Элемент);
			КонецЕсли;
			
			Результат.Добавить(ДесериализованноеЗначение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗафиксироватьОшибкуПриведенияТипов(ИмяСущности, ТипПриведения)

	ОбщаяИнформацияОбОшибке = СтрШаблон(
		НСтр("ru = 'Не удалось преобразовать поле ответа %1 к типу %2'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			ИмяСущности, ТипПриведения);
	ЗаписьЖурналаРегистрации(ОбщаяИнформацияОбОшибке, УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область АвтоматическиеСкидки

// Рассчитывает автоматические скидки для РМК
//
// Параметры:
//  ФормаРМК - ФормаКлиентскогоПриложение - форма рабочего места кассира.
//  РезультатРасчета - Структура - структура результата выполнения расчета скидок
//
Процедура РассчитатьАвтоматическиеСкидки(ФормаРМК, РезультатРасчета = Неопределено) Экспорт
	
	СтруктураПараметровРасчетаСкидок = ПолучитьСтруктуруПараметровРасчетаСкидок(ФормаРМК);
	
	// Получить из настроек РМК адрес сервиса, логин и пароль из защищенного хранилища
	ПараметрыПодключенияКСерверуЛояльности = ОбщегоНазначенияРМКВызовСервера.ЗначенияПараметровСервераЛояльности(ФормаРМК.ТекущаяНастройкаРМК);
	ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаРассчитатьАвтоматическиеСкидки(ПараметрыПодключенияКСерверуЛояльности, СтруктураПараметровРасчетаСкидок);
	
	СтруктураРезультат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
	
	Если СтруктураРезультат.ЕстьОшибки Тогда
		Если Не РезультатРасчета = Неопределено Тогда
			РезультатРасчета.Вставить("ЕстьОшибки", СтруктураРезультат.ЕстьОшибки);
			РезультатРасчета.Вставить("ТекстОшибки", СтруктураРезультат.ТекстОшибки);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДанныеОтвета = Неопределено;
	СтрокаJSON = СтруктураРезультат.ДанныеОтвета;
	СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
	Если ТипЗнч(СтруктураРезультат.ДанныеОтвета) = Тип("Строка")
		И ДанныеОтвета = Неопределено Тогда
		Если Не РезультатРасчета = Неопределено Тогда
			РезультатРасчета.Вставить("ЕстьОшибки", Истина);
			РезультатРасчета.Вставить("ТекстОшибки", СтруктураРезультат.ДанныеОтвета);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	
	ТаблицаТоваровИзЗапроса = ПолучитьТаблицуТоваровИзЗапроса(ДанныеОтвета);
	ПрименитьРезультатРасчета(ФормаРМК, ТаблицаТоваровИзЗапроса);
	
	ЭтоОперацияВозврат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЭтоВидОперацииВозврат(ФормаРМК.Объект.ВидОперации, ЭтоОперацияВозврат);
	ТаблицаПодарковИзЗапроса = ПолучитьТаблицуПодарковИзЗапроса(ДанныеОтвета, ФормаРМК.Объект.Организация);
	ТаблицаСкидокНаценокИзЗапроса = ПолучитьТаблицуСкидокНаценокИзЗапроса(ДанныеОтвета);
	Если Не ЭтоОперацияВозврат Тогда
		ОбщегоНазначенияРМКПереопределяемый.ОбработатьТаблицуПодарков(ФормаРМК, ФормаРМК.Объект.Товары, ТаблицаПодарковИзЗапроса, ТаблицаСкидокНаценокИзЗапроса); 
		ЗагрузитьТаблицуНаФормуРМК(ФормаРМК.ТаблицаПодарков, ТаблицаПодарковИзЗапроса);
	КонецЕсли;
	ЗагрузитьТаблицуСкидок(ФормаРМК.ТаблицаСкидкиНаценки, ТаблицаСкидокНаценокИзЗапроса, ЭтоОперацияВозврат);
	
	ТаблицаСообщенийИзЗапроса = ПолучитьТаблицуСообщенийИзЗапроса(ДанныеОтвета);
	ЗагрузитьТаблицуНаФормуРМК(ФормаРМК.ТаблицаСообщений, ТаблицаСообщенийИзЗапроса);
	
	ТаблицаБонусовИзЗапроса = ПолучитьТаблицуБонусовИзЗапроса(ДанныеОтвета);
	ЗагрузитьТаблицуНаФормуРМК(ФормаРМК.ТаблицаБонусныеБаллы, ТаблицаБонусовИзЗапроса);
	
	ТаблицаПромокодовИзЗапроса = ПолучитьТаблицуПромокодовИзЗапроса(ДанныеОтвета);
	ЗагрузитьТаблицуНаФормуРМК(ФормаРМК.ТаблицаПримененныхПромокодов, ТаблицаПромокодовИзЗапроса);
	
	ТаблицаДействующихСкидокИзЗапроса = ПолучитьТаблицуДействующихСкидок(ДанныеОтвета);
	ЗагрузитьТаблицуНаФормуРМК(ФормаРМК.ТаблицаДействующихСкидок, ТаблицаДействующихСкидокИзЗапроса);
	
	Если ДанныеОтвета.Свойство("LoyaltyCardDescription") И Не ДанныеОтвета.LoyaltyCardDescription.CardNotFound Тогда
		ЗаполнитьДанныеКартыЛояльности(ФормаРМК, ДанныеОтвета.LoyaltyCardDescription.LoyaltyCard);
	КонецЕсли;
	
	Если ДанныеОтвета.Свойство("MaxBonusPayRows") 
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаРМК, "ТаблицаСуммМаксимальнойОплатыбонусами") Тогда
		ЗаполнитьДанныеМаксимальнуюСуммуОплатыБонусамиВСтроках(ФормаРМК, ДанныеОтвета.MaxBonusPayRows)
	ИначеЕсли ДанныеОтвета.Свойство("MaxBonusPay") 
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаРМК, "МаксимальнаяСуммаОплатыБаллами") Тогда
		ЗаполнитьДанныеМаксимальнуюСуммуОплатыБонусами(ФормаРМК, ДанныеОтвета.MaxBonusPay);
	КонецЕсли;

	ВозможныеСкидкиЗаВидОплаты = Неопределено;
	ИспользуемыеВидыОплат = Неопределено;
	Если ДанныеОтвета.Свойство("PossibleOnPayDiscouns", ВозможныеСкидкиЗаВидОплаты) Тогда        
		// Сначала очистим все подсказки
		ИспользуемыеВидыОплат = ПолучитьТаблицуОплат(ФормаРМК);
		Для Каждого СтрокаВидаОплаты Из ИспользуемыеВидыОплат Цикл
			Если ЗначениеЗаполнено(СтрокаВидаОплаты.ИмяРеквизитаФормыАльтернативыСкидки) 
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаРМК, СтрокаВидаОплаты.ИмяРеквизитаФормыАльтернативыСкидки) Тогда
				ФормаРМК[СтрокаВидаОплаты.ИмяРеквизитаФормыАльтернативыСкидки] = "";
				ЭлементПодсказки = ФормаРМК.Элементы.Найти(СтрокаВидаОплаты.ИмяРеквизитаФормыАльтернативыСкидки);
				Если Не ЭлементПодсказки = Неопределено Тогда
					ЭлементПодсказки.Видимость = Ложь;
				КонецЕсли;
				ЭлементПодсказки = ФормаРМК.Элементы.Найти(СтрокаВидаОплаты.ИмяРеквизитаФормыАльтернативыСкидки + "Быстрая");
				Если Не ЭлементПодсказки = Неопределено Тогда
					ЭлементПодсказки.Видимость = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		// А затем, добавим те, что появились
		ОписаниеТиповВидаОплаты = Метаданные.ОпределяемыеТипы.ВидыОплатРМК.Тип;
		ТипВидаОплаты = ОписаниеТиповВидаОплаты.Типы()[0];
		Для Каждого ВидОплатыСоСкидкой Из ВозможныеСкидкиЗаВидОплаты Цикл
			СуммаИзмененияСкидки = ВидОплатыСоСкидкой.Amount;
			ВидОплаты = XMLЗначение(ТипВидаоплаты, ВидОплатыСоСкидкой.PayType);
			ОтборПараметровВидаОплаты = Новый Структура("ВидОплаты", ВидОплаты);
			СтрокиВидаОплаты = ИспользуемыеВидыОплат.НайтиСтроки(ОтборПараметровВидаОплаты);
			Для Каждого СтрокаВидаОплаты Из СтрокиВидаОплаты Цикл
				// Только если предусмотрен соответствующий реквизит формы
				Если ЗначениеЗаполнено(СтрокаВидаОплаты.ИмяРеквизитаФормыАльтернативыСкидки) 
					И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаРМК, СтрокаВидаОплаты.ИмяРеквизитаФормыАльтернативыСкидки)
					И НЕ СуммаИзмененияСкидки = 0 Тогда
					ПредставлениеСуммы = "";
					ЗнакСуммы = Неопределено;
					ЦветТекста = ЦветаСтиля.ПоясняющийТекст; 
					ЦветТекстаБыстрыйПереход = ЦветТекста;
					Если СуммаИзмененияСкидки < 0 Тогда
						ЗнакСуммы = "+"; // Человек заплатит больше
						Если ФормаРМК.РежимКассыСамообслуживания Тогда
							ЦветТекстаБыстрыйПереход = WebЦвета.Зеленый;
						КонецЕсли;
					ИначеЕсли СуммаИзмененияСкидки > 0 Тогда
						ЗнакСуммы = "-"; // Человек заплатит меньше
						Если ФормаРМК.РежимКассыСамообслуживания Тогда
							ЦветТекстаБыстрыйПереход = WebЦвета.Красный;
						КонецЕсли;
					КонецЕсли;
					Если Не ЗнакСуммы = Неопределено Тогда
						МодульСуммы = Макс(СуммаИзмененияСкидки, -СуммаИзмененияСкидки);
						ПредставлениеСуммы = СтрШаблон("%1%2 %3", ЗнакСуммы, Формат(МодульСуммы, "ЧДЦ=2; ЧРГ=' '"), ОбщегоНазначенияРМК.ПредставлениеВалюты());
					КонецЕсли;
					ФормаРМК[СтрокаВидаОплаты.ИмяРеквизитаФормыАльтернативыСкидки] = ПредставлениеСуммы;
					ЭлементПодсказки = ФормаРМК.Элементы.Найти(СтрокаВидаОплаты.ИмяРеквизитаФормыАльтернативыСкидки);
					Если Не ЭлементПодсказки = Неопределено Тогда
						ЭлементПодсказки.Видимость = Истина;
						ЭлементПодсказки.ЦветТекста = ЦветТекста;
					КонецЕсли;
					ЭлементПодсказки = ФормаРМК.Элементы.Найти(СтрокаВидаОплаты.ИмяРеквизитаФормыАльтернативыСкидки + "Быстрая");
					Если Не ЭлементПодсказки = Неопределено Тогда
						ЭлементПодсказки.Видимость = Истина;
						ЭлементПодсказки.ЦветТекста = ЦветТекстаБыстрыйПереход;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла
		КонецЦикла		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтруктуруПараметровРасчетаСкидок(ФормаРМК)
	
	Объект = ФормаРМК.Объект;
	
	ДисконтнаяКарта 	 = Объект.ДисконтнаяКарта;
	МассивДисконтныхКарт = ПолучитьМассивДисконтныхКарт(ФормаРМК);
	ТорговыйОбъект 		 = Объект.ТорговыйОбъект;
	КассаККМ 			 = Объект.КассаККМ;
	РабочееМесто 		 = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	НеПодарки 			 = Объект.Товары.НайтиСтроки(Новый Структура("Подарок", Ложь));
	Товары               = Объект.Товары.Выгрузить(НеПодарки);
	ДатаОбъекта			 = ТекущаяДатаСеанса();
	ВидОперации			 = Объект.ВидОперации;
	БонуснаяПрограмма 	 = ФормаРМК.БонуснаяПрограмма;
	
	ТаблицаПромокодов	 = ФормаРМК.ТаблицаПримененныхПромокодов.Выгрузить();
	ОтборПромокодов = Новый Структура("ЭтоАктивацияПромокода", Истина);
	СтрокиКУдалению = ТаблицаПромокодов.НайтиСтроки(ОтборПромокодов);
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаПромокодов.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	ТаблицаВыбранныхУправляемыхСкидок = ФормаРМК.ТаблицаВыбранныхУправляемыхСкидок.Выгрузить();
	ТаблицаИспользуемыхВидовОплат = ПолучитьТаблицуОплат(ФормаРМК);
	ПолучатьВозможныеСкидкиЗаВидОплаты = ФормаРМК.ТаблицаСкидокЗависяшихОтВидаОплаты.Количество() > 0;
	
	СтруктураПараметров = СерверЛояльностиПолучательДанныхКлиентСервер.СтруктураПараметровРасчетаСкидок();
	СтруктураПараметров.Вставить("RecoverManagedDiscounts", Ложь);
	СтруктураПараметров.Вставить("ObjectTime", ДатаОбъекта);
	СтруктураПараметров.Вставить("CurrentDate", ДатаОбъекта);
	СтруктураПараметров.Вставить("LoyaltyCardPresented",
		ИнтерфейсРМКСлужебныйКлиентСервер.ДанныеДисконтнойКартыЗаполнены(ФормаРМК));
	СтруктураПараметров.Вставить("HasGifts", Ложь);
	СтруктураПараметров.Вставить("UseApplicationPrices", Ложь);
	СтруктураПараметров.Вставить("ControlBalanceOfGoods", Ложь);
	СтруктураПараметров.Вставить("LoyaltyCardsList", МассивДисконтныхКарт);
	СтруктураПараметров.Вставить("PromocodesList", ПолучитьТаблицуПромокодов(ТаблицаПромокодов));
	СтруктураПараметров.Вставить("ControlledDiscountsList",
		ПолучитьТаблицуУправляемыхСкидок(Товары, ТаблицаВыбранныхУправляемыхСкидок));
	СтруктураПараметров.Вставить("RetailStore",
		СерверЛояльностиПолучательДанныхКлиентСервер.ПолучитьСтруктуруСсылки(ТорговыйОбъект));
	СтруктураПараметров.Вставить("ApplyObject", Ложь);
	СтруктураПараметров.Вставить("WorkPlace",
		СерверЛояльностиПолучательДанныхКлиентСервер.ПолучитьСтруктуруСсылки(РабочееМесто));
	СтруктураПараметров.Вставить("Goods", ПолучитьТаблицуТоваров(Товары));
	СтруктураПараметров.Вставить("GetLoyaltyCardData", НеобходимоЗапроситьДанныеКарты(ФормаРМК));
	СтруктураПараметров.Вставить("GetMaxBonusPay", Истина);
	СтруктураПараметров.Вставить("BlockBonuses", ?(ФормаРМК.ИспользоватьОплатуБонусами, "1", "0"));
	СтруктураПараметров.Вставить("Currency", ФормаРМК.КодВалютыЦены);
	ВидОперацииВозврат = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЭтоВидОперацииВозврат(ВидОперации, ВидОперацииВозврат);
	СтруктураПараметров.Вставить("Return", ВидОперацииВозврат);
	СтруктураПараметров.Вставить("PayTypes", ПолучитьТаблицуВыбранныхТиповОплат(ТаблицаИспользуемыхВидовОплат));
	СтруктураПараметров.Вставить("GetPossibleOnPayDiscounts", ПолучатьВозможныеСкидкиЗаВидОплаты);
	СтруктураПараметров.Вставить("BonusesGUID", БонуснаяПрограмма);
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция НеобходимоЗапроситьДанныеКарты(ФормаРМК)
	
	РезультатФункции = Ложь;
	
	Если (Не ФормаРМК.РежимРаботыСЧеком = ФормаРМК.РежимыРаботыСЧеком.Оплата)
			И ИнтерфейсРМКСлужебныйКлиентСервер.СохраненТолькоНомерКартыЛояльности(ФормаРМК.ПараметрыКартыЛояльности) Тогда
			
		РезультатФункции = Истина;
			
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПолучитьМассивДисконтныхКарт(ФормаРМК)
	
	МассивДисконтныхКарт = Новый Массив;
	
	ДисконтнаяКарта = ФормаРМК.Объект.ДисконтнаяКарта;
	ПараметрыКарты = ФормаРМК.ПараметрыКартыЛояльности;
	Если ЗначениеЗаполнено(ДисконтнаяКарта) И ФормаРМК.ИспользоватьАлгоритмПоискаПоГУИД Тогда
		МассивДисконтныхКарт.Добавить(Строка(ДисконтнаяКарта.УникальныйИдентификатор()));
	ИначеЕсли ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
		ИмяРеквизита = "";
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьИмяРеквизитаКодКартыЛояльности(ИмяРеквизита, ДисконтнаяКарта);
		Если ЗначениеЗаполнено(ИмяРеквизита) И ЗначениеЗаполнено(ДисконтнаяКарта[ИмяРеквизита]) Тогда
			МассивДисконтныхКарт.Добавить(ДисконтнаяКарта[ИмяРеквизита]);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПараметрыКарты) = Тип("Структура") И ЗначениеЗаполнено(ПараметрыКарты.КодКарты) Тогда
		МассивДисконтныхКарт.Добавить(ПараметрыКарты.КодКарты);
	КонецЕсли;
	
	Возврат МассивДисконтныхКарт;
	
КонецФункции

Функция ПолучитьТаблицуТоваров(Товары)
	
	МассивТоваров = Новый Массив;
	
	Для Каждого СтрокаТовар Из Товары Цикл 
		
		СтруктураСтроки = СерверЛояльностиПолучательДанныхКлиентСервер.СтруктураТоваровДляРасчетаСкидок();
		
		СтруктураСтроки.Вставить("LineUID", СтрокаТовар.ИдентификаторСтроки);
		СтруктураСтроки.Вставить("Count", СтрокаТовар.Количество);
		СтруктураСтроки.Вставить("PackagesCount", СтрокаТовар.КоличествоУпаковок);
		СтруктураСтроки.Вставить("Item", СерверЛояльностиПолучательДанныхКлиентСервер.ПолучитьСтруктуруСсылки(СтрокаТовар.Номенклатура));
		СтруктураСтроки.Вставить("Price", СтрокаТовар.Цена);
		СтруктураСтроки.Вставить("GiftSale", Ложь);
		СтруктураСтроки.Вставить("PercentOfAutomaticDiscount", СтрокаТовар.ПроцентАвтоматическойСкидки);
		СтруктураСтроки.Вставить("PercentOfManualDiscount", СтрокаТовар.ПроцентСкидкиНаценки);
		СтруктураСтроки.Вставить("VATRate", Строка(СтрокаТовар.СтавкаНДС));
		СтруктураСтроки.Вставить("Amount", СтрокаТовар.Цена * СтрокаТовар.КоличествоУпаковок - СтрокаТовар.СуммаСкидкиНаценки);
		СтруктураСтроки.Вставить("AmountOfAutomaticDiscount", СтрокаТовар.СуммаАвтоматическойСкидки);
		СтруктураСтроки.Вставить("AmountOfBonusPay", СтрокаТовар.СуммаСкидкиОплатыБонусом);
		СтруктураСтроки.Вставить("TotalAmount", СтрокаТовар.СуммаБезСкидки);
		СтруктураСтроки.Вставить("VATAmount", СтрокаТовар.СуммаНДС);
		СтруктураСтроки.Вставить("AmountOfManualDiscount", СтрокаТовар.СуммаСкидкиНаценки);
		СтруктураСтроки.Вставить("Package", СерверЛояльностиПолучательДанныхКлиентСервер.ПолучитьСтруктуруСсылки(СтрокаТовар.Упаковка));
		СтруктураСтроки.Вставить("Variant", СерверЛояльностиПолучательДанныхКлиентСервер.ПолучитьСтруктуруСсылки(СтрокаТовар.Характеристика));
		СтруктураСтроки.Вставить("Order", СерверЛояльностиПолучательДанныхКлиентСервер.ПолучитьСтруктуруСсылки(СтрокаТовар.ЗаказПокупателя));
		
		МассивТоваров.Добавить(СтруктураСтроки);
		
	КонецЦикла;
	
	Возврат МассивТоваров;
	
КонецФункции

Функция ПолучитьТаблицуПромокодов(ТаблицаПромокодов)
	
	МассивПромокодов = Новый Массив;
	
	Для Каждого СтрокаПромокода Из ТаблицаПромокодов Цикл
		
		СтруктураСтроки = СерверЛояльностиПолучательДанныхКлиентСервер.СтруктураПромокодовДляРасчетаСкидок();
		СтруктураСтроки.Вставить("Promocode", СтрокаПромокода.Промокод);
		СкидкаНаценкаПромокода = "";
		Если ТипЗнч(СтрокаПромокода.СкидкаНаценка) = Тип("Строка") Тогда
			СкидкаНаценкаПромокода = СтрокаПромокода.СкидкаНаценка;
		Иначе
			СкидкаНаценкаПромокода = Строка(СтрокаПромокода.СкидкаНаценка.УникальныйИдентификатор());
		КонецЕсли;
		СтруктураСтроки.Вставить("PromocodeDiscountUID", СтрЗаменить(СкидкаНаценкаПромокода, "_", "-"));
		СтруктураСтроки.Вставить("PromocodeUID", СтрокаПромокода.УникальныйИдентификатор);
		
		МассивПромокодов.Добавить(СтруктураСтроки);
		
	КонецЦикла;
	
	Возврат МассивПромокодов;
	
КонецФункции

Функция ПолучитьТаблицуУправляемыхСкидок(Товары, ТаблицаВыбранныхУправляемыхСкидок)
	
	МассивУправляемыхСкидок = Новый Массив;
	
	Для Каждого СтрокаУправляемойСкидки Из ТаблицаВыбранныхУправляемыхСкидок Цикл
		
		СтруктураСтроки = СерверЛояльностиПолучательДанныхКлиентСервер.СтруктураВыбраннойУправляемойСкидки();
		СтруктураСтроки.Вставить("ControlledDiscount", Строка(СтрокаУправляемойСкидки.СкидкаНаценка));
		СтруктураСтроки.Вставить("ControlledDiscountUID", СтрокаУправляемойСкидки.ИдентификаторСкидки);
		СтруктураСтроки.Вставить("LineUID", СтрокаУправляемойСкидки.ИдентификаторСтроки);
		СтруктураСтроки.Вставить("KeyRelation", 0);
		
		Если ЗначениеЗаполнено(СтрокаУправляемойСкидки.ИдентификаторСтроки) Тогда
			СтрокиТоваровСкидки = Товары.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаУправляемойСкидки.ИдентификаторСтроки));
			Если СтрокиТоваровСкидки.Количество() Тогда
				СтруктураСтроки.Вставить("KeyRelation", СтрокиТоваровСкидки[0].НомерСтроки);
			КонецЕсли;
		КонецЕсли;
		
		МассивУправляемыхСкидок.Добавить(СтруктураСтроки);
		
	КонецЦикла;
	
	Возврат МассивУправляемыхСкидок;
	
КонецФункции

Функция ПолучитьТаблицуВыбранныхТиповОплат(ТаблицаВыбранныхУправляемыхСкидок)
	
	МассивВидовОплаты = Новый Массив;
	Для Каждого СтрокаУправляемойСкидки Из ТаблицаВыбранныхУправляемыхСкидок Цикл
		
		СтруктураСтроки = СерверЛояльностиПолучательДанныхКлиентСервер.СтруктураВыбранногоВидаОплаты();
		СтруктураСтроки.Вставить("PayType", XMLСтрока(СтрокаУправляемойСкидки.ВидОплаты));
		СтруктураСтроки.Вставить("IsUsed", СтрокаУправляемойСкидки.Используется);
		
		МассивВидовОплаты.Добавить(СтруктураСтроки);
		
	КонецЦикла;
	
	Возврат МассивВидовОплаты;
	
КонецФункции

Процедура ПрименитьРезультатРасчета(ФормаРМК, ТаблицаРезультатРасчета)
	
	ТаблицаТовары = ФормаРМК.Объект.Товары;
	ТекущаяТаблицаТоваров = ТаблицаТовары.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТекущаяТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТекущаяТаблицаТоваров.Упаковка КАК Упаковка,
	|	ТекущаяТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТекущаяТаблицаТоваров.Количество КАК Количество,
	|	ТекущаяТаблицаТоваров.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТекущаяТаблицаТоваров.Цена КАК Цена,
	|	ТекущаяТаблицаТоваров.Сумма КАК Сумма,
	|	ТекущаяТаблицаТоваров.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ТекущаяТаблицаТоваров.СуммаБезСкидки КАК СуммаБезСкидки,
	|	ТекущаяТаблицаТоваров.СуммаНДС КАК СуммаНДС,
	|	ТекущаяТаблицаТоваров.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ТекущаяТаблицаТоваров.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ТекущаяТаблицаТоваров.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ВЫРАЗИТЬ(ТекущаяТаблицаТоваров.ИдентификаторСтроки КАК СТРОКА(36)) КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТ_ТекущаяТаблица
	|ИЗ
	|	&ТекущаяТаблицаТоваров КАК ТекущаяТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРасчетаСкидок.Номенклатура КАК Номенклатура,
	|	ТаблицаРасчетаСкидок.Упаковка КАК Упаковка,
	|	ТаблицаРасчетаСкидок.Характеристика КАК Характеристика,
	|	ТаблицаРасчетаСкидок.Количество КАК Количество,
	|	ТаблицаРасчетаСкидок.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаРасчетаСкидок.Цена КАК Цена,
	|	ТаблицаРасчетаСкидок.Сумма КАК Сумма,
	|	ТаблицаРасчетаСкидок.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ТаблицаРасчетаСкидок.СуммаРучнойСкидки КАК СуммаСкидкиНаценки,
	|	ТаблицаРасчетаСкидок.СуммаНДС КАК СуммаНДС,
	|	ТаблицаРасчетаСкидок.ПроцентРучнойСкидки КАК ПроцентСкидкиНаценки,
	|	ТаблицаРасчетаСкидок.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ВЫРАЗИТЬ(ТаблицаРасчетаСкидок.ИдентификаторСтроки КАК СТРОКА(36)) КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТ_ТаблицаРасчетаСкидок
	|ИЗ
	|	&ТаблицаРасчетаСкидок КАК ТаблицаРасчетаСкидок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТекущаяТаблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВТ_ТаблицаРасчетаСкидок.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаРасчетаСкидок.Упаковка КАК Упаковка,
	|	ВТ_ТаблицаРасчетаСкидок.Характеристика КАК Характеристика,
	|	ВТ_ТаблицаРасчетаСкидок.Количество КАК Количество,
	|	ВТ_ТаблицаРасчетаСкидок.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВТ_ТаблицаРасчетаСкидок.Цена КАК Цена,
	|	ВТ_ТаблицаРасчетаСкидок.Сумма КАК Сумма,
	|	ВТ_ТекущаяТаблица.СуммаБезСкидки КАК СуммаБезСкидки,
	|	ВТ_ТекущаяТаблица.СуммаБезСкидки - ВТ_ТаблицаРасчетаСкидок.Сумма - ВТ_ТаблицаРасчетаСкидок.СуммаСкидкиНаценки КАК СуммаАвтоматическойСкидки,
	|	ВТ_ТаблицаРасчетаСкидок.СуммаНДС КАК СуммаНДС,
	|	ВТ_ТекущаяТаблица.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ВТ_ТаблицаРасчетаСкидок.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ВТ_ТаблицаРасчетаСкидок.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ВТ_ТекущаяТаблица.СуммаБезСкидки - ВТ_ТаблицаРасчетаСкидок.Сумма КАК СуммаСкидокОбщая
	|ИЗ
	|	ВТ_ТекущаяТаблица КАК ВТ_ТекущаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаРасчетаСкидок КАК ВТ_ТаблицаРасчетаСкидок
	|		ПО ВТ_ТекущаяТаблица.Номенклатура = ВТ_ТаблицаРасчетаСкидок.Номенклатура
	|			И ВТ_ТекущаяТаблица.Характеристика = ВТ_ТаблицаРасчетаСкидок.Характеристика
	|			И ВТ_ТекущаяТаблица.Упаковка = ВТ_ТаблицаРасчетаСкидок.Упаковка
	|			И ВТ_ТекущаяТаблица.ИдентификаторСтроки = ВТ_ТаблицаРасчетаСкидок.ИдентификаторСтроки
	|			И ВТ_ТекущаяТаблица.ПроцентАвтоматическойСкидки <> ВТ_ТаблицаРасчетаСкидок.ПроцентАвтоматическойСкидки";
	
	Запрос.УстановитьПараметр("ТекущаяТаблицаТоваров", ТекущаяТаблицаТоваров);
	Запрос.УстановитьПараметр("ТаблицаРасчетаСкидок", ТаблицаРезультатРасчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			МассивСтрок = ТаблицаТовары.НайтиСтроки(Новый Структура("ИдентификаторСтроки", Выборка.ИдентификаторСтроки));
			Для каждого НайденнаяСтрока Из МассивСтрок Цикл
				ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Выборка, "Цена,
																	| Сумма,
																	| СуммаСкидкиНаценки,
																	| СуммаАвтоматическойСкидки,
																	| ПроцентСкидкиНаценки,
																	| ПроцентАвтоматическойСкидки,
																	| СуммаСкидокОбщая");
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьТаблицуНаФормуРМК(ТаблицаПриемник, ТаблицаИсточник)
	
	ТаблицаПриемник.Очистить();
	ТаблицаПриемник.Загрузить(ТаблицаИсточник);
	
КонецПроцедуры

Функция ПолучитьТаблицуТоваровИзЗапроса(ДанныеОтвета)
	
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2));
	
	ОписаниеТипаНоменклатура = Метаданные.ОпределяемыеТипы.НоменклатураРМК.Тип;
	ОписаниеТипаУпаковка = Метаданные.ОпределяемыеТипы.УпаковкаРМК.Тип;
	ОписаниеТипаХарактеристика = Метаданные.ОпределяемыеТипы.ХарактеристикаРМК.Тип;
	ОписаниеТипаСтавкаНДС = Метаданные.ОпределяемыеТипы.СтавкаНДСРМК.Тип;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура", ОписаниеТипаНоменклатура);
	ТаблицаТоваров.Колонки.Добавить("Упаковка", ОписаниеТипаУпаковка);
	ТаблицаТоваров.Колонки.Добавить("Характеристика", ОписаниеТипаХарактеристика);
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС", ОписаниеТипаСтавкаНДС);
	ТаблицаТоваров.Колонки.Добавить("КлючСвязи", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("Количество", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("КоличествоУпаковок", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("ПроцентАвтоматическойСкидки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("ПроцентРучнойСкидки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("Сумма", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("СуммаАвтоматическойСкидки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("СуммаВсего", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("СуммаРучнойСкидки", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("Цена", ОписаниеТиповЧисло);
	ТаблицаТоваров.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка"));
	
	Если ТипЗнч(ДанныеОтвета) = Тип("Структура") И ДанныеОтвета.Свойство("Goods") Тогда
		Для каждого СтрокаТаблицы Из ДанныеОтвета.Goods Цикл
			
			НоваяСтрока = ТаблицаТоваров.Добавить();
			НоваяСтрока.Номенклатура = ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "Item", ОписаниеТипаНоменклатура);
			Упаковка = ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "Package", ОписаниеТипаУпаковка);
			Если ЗначениеЗаполнено(Упаковка)
				И ОбщегоНазначения.СсылкаСуществует(Упаковка) Тогда
				НоваяСтрока.Упаковка = Упаковка;
			КонецЕсли;
			НоваяСтрока.Характеристика = ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "Variant", ОписаниеТипаХарактеристика);
			НоваяСтрока.Цена = СтрокаТаблицы.Price;
			НоваяСтрока.Сумма = СтрокаТаблицы.Amount;
			НоваяСтрока.Количество = СтрокаТаблицы.Count;
			НоваяСтрока.КоличествоУпаковок = СтрокаТаблицы.PackagesCount;
			НоваяСтрока.СуммаАвтоматическойСкидки = СтрокаТаблицы.AmountOfAutomaticDiscount;
			НоваяСтрока.СуммаРучнойСкидки = СтрокаТаблицы.AmountOfManualDiscount;
			НоваяСтрока.ПроцентАвтоматическойСкидки = СтрокаТаблицы.PercentOfAutomaticDiscount;
			НоваяСтрока.ПроцентРучнойСкидки = СтрокаТаблицы.PercentOfManualDiscount;
			НоваяСтрока.СуммаВсего = СтрокаТаблицы.TotalAmount;
			НоваяСтрока.СуммаНДС = СтрокаТаблицы.VATAmount;
			НоваяСтрока.ИдентификаторСтроки = СтрокаТаблицы.LineUID;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция ПолучитьТаблицуПодарковИзЗапроса(ДанныеОтвета, Организация)
	
	ОписаниеТиповЧисло152 = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2));
	ОписаниеТиповЧисло153 = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3));
	
	ОписаниеТипаНоменклатура = Метаданные.ОпределяемыеТипы.НоменклатураРМК.Тип;
	ОписаниеТипаУпаковка = Метаданные.ОпределяемыеТипы.УпаковкаРМК.Тип;
	ОписаниеТипаХарактеристика = Метаданные.ОпределяемыеТипы.ХарактеристикаРМК.Тип;
	ОписаниеТипаОрганизация = Метаданные.ОпределяемыеТипы.ОрганизацияРМК.Тип;
	ОписаниеТипаТорговыйОбъект = Метаданные.ОпределяемыеТипы.ТорговыйОбъектРМК.Тип;
	
	ТаблицаПодарков = Новый ТаблицаЗначений;
	ТаблицаПодарков.Колонки.Добавить("Номенклатура", ОписаниеТипаНоменклатура);
	ТаблицаПодарков.Колонки.Добавить("Упаковка", ОписаниеТипаУпаковка);
	ТаблицаПодарков.Колонки.Добавить("Характеристика", ОписаниеТипаХарактеристика);
	ТаблицаПодарков.Колонки.Добавить("Организация", ОписаниеТипаОрганизация);
	ТаблицаПодарков.Колонки.Добавить("Склад", ОписаниеТипаТорговыйОбъект);
	ТаблицаПодарков.Колонки.Добавить("Количество", ОписаниеТиповЧисло153);
	ТаблицаПодарков.Колонки.Добавить("КоличествоУпаковок", ОписаниеТиповЧисло153);
	ТаблицаПодарков.Колонки.Добавить("Цена", ОписаниеТиповЧисло152);
	ТаблицаПодарков.Колонки.Добавить("Сумма", ОписаниеТиповЧисло152);
	ТаблицаПодарков.Колонки.Добавить("ВыборИзСписка", Новый ОписаниеТипов("Булево"));
	ТаблицаПодарков.Колонки.Добавить("ВыводитьПодарокВЧек", Новый ОписаниеТипов("Булево"));
	ТаблицаПодарков.Колонки.Добавить("ВладелецПодарка", Новый ОписаниеТипов("Строка"));
	ТаблицаПодарков.Колонки.Добавить("ПредставлениеВладельца", Новый ОписаниеТипов("Строка"));
	ТаблицаПодарков.Колонки.Добавить("ОбластьПредоставленияДокумент", Новый ОписаниеТипов("Булево"));
	
	ЕстьПустыеЦены = Ложь;
	
	Если ТипЗнч(ДанныеОтвета) = Тип("Структура") И ДанныеОтвета.Свойство("Gifts") Тогда
		Для каждого СтрокаТаблицы Из ДанныеОтвета.Gifts Цикл
			
			НоваяСтрока = ТаблицаПодарков.Добавить();
			НоваяСтрока.Номенклатура = ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "Item", ОписаниеТипаНоменклатура);
			НоваяСтрока.Упаковка = ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "Package", ОписаниеТипаУпаковка);
			НоваяСтрока.Характеристика = ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "Variant", ОписаниеТипаХарактеристика);
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.Цена = СтрокаТаблицы.Price;
			НоваяСтрока.Сумма = СтрокаТаблицы.Amount;
			НоваяСтрока.Количество = СтрокаТаблицы.Count;
			НоваяСтрока.КоличествоУпаковок = СтрокаТаблицы.PackagesCount;
			НоваяСтрока.ВыборИзСписка = СтрокаТаблицы.GiftFromTheList;
			НоваяСтрока.ВыводитьПодарокВЧек = СтрокаТаблицы.ShoppingCart;
			НоваяСтрока.ВладелецПодарка = СтрокаТаблицы.GiftOwner;
			Если СтрокаТаблицы.Свойство("GiftName") Тогда
				НоваяСтрока.ПредставлениеВладельца = СтрокаТаблицы.GiftName;
			Иначе
				НоваяСтрока.ПредставлениеВладельца = НСтр("ru = 'Подарок на кассе'");
			КонецЕсли;
			Если СтрокаТаблицы.Свойство("InDocument") Тогда
				НоваяСтрока.ОбластьПредоставленияДокумент = СтрокаТаблицы.InDocument;
			КонецЕсли;
			
			Если СтрокаТаблицы.Price = 0 Тогда
				ЕстьПустыеЦены = Истина;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьПустыеЦены Тогда
		ДополнитьТаблицуПодарковЦенами(ТаблицаПодарков);
	КонецЕсли;
		
	Возврат ТаблицаПодарков;
	
КонецФункции 

Функция ПолучитьТаблицуСообщенийИзЗапроса(ДанныеОтвета)
	
	ТаблицаСообщений = Новый ТаблицаЗначений;
	ТаблицаСообщений.Колонки.Добавить("ТекстСообщения", Новый ОписаниеТипов("Строка"));
	ТаблицаСообщений.Колонки.Добавить("ПослеОформленияЧека", Новый ОписаниеТипов("Булево"));
	
	Если ТипЗнч(ДанныеОтвета) = Тип("Структура") И ДанныеОтвета.Свойство("Messages") Тогда
		Для каждого СтрокаТаблицы Из ДанныеОтвета.Messages Цикл
			
			НоваяСтрока = ТаблицаСообщений.Добавить();
			НоваяСтрока.ТекстСообщения = СтрокаТаблицы.MessageText;
			НоваяСтрока.ПослеОформленияЧека = СтрокаТаблицы.AfterSale;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаСообщений;
	
КонецФункции

Функция ПолучитьТаблицуСкидокНаценокИзЗапроса(ДанныеОтвета)
	
	ОписаниеТиповЧисло152 = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,2));
	ОписаниеТиповЧисло5 = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5,0));
	ОписаниеТипаСкидкаНаценка = Метаданные.ОпределяемыеТипы.СкидкаНаценкаРМК.Тип;

	ТаблицаСкидокНаценок = Новый ТаблицаЗначений;
	ТаблицаСкидокНаценок.Колонки.Добавить("КлючСвязи", ОписаниеТиповЧисло5);
	ТаблицаСкидокНаценок.Колонки.Добавить("СкидкаНаценка", ОписаниеТипаСкидкаНаценка);
	ТаблицаСкидокНаценок.Колонки.Добавить("Сумма", ОписаниеТиповЧисло152);
	ТаблицаСкидокНаценок.Колонки.Добавить("ОграниченаМинимальнойЦеной", Новый ОписаниеТипов("Булево"));
	ТаблицаСкидокНаценок.Колонки.Добавить("ЗначениеСкидкиНаценки", ОписаниеТиповЧисло152);
	ТаблицаСкидокНаценок.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка"));
	ТаблицаСкидокНаценок.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ТаблицаСкидокНаценок.Колонки.Добавить("ПриВозврате", Новый ОписаниеТипов("Булево"));
	
	Если ТипЗнч(ДанныеОтвета) = Тип("Структура") И ДанныеОтвета.Свойство("DiscountsList") Тогда
		Для каждого СтрокаТаблицы Из ДанныеОтвета.DiscountsList Цикл
			
			НоваяСтрока = ТаблицаСкидокНаценок.Добавить();
			НоваяСтрока.КлючСвязи = СтрокаТаблицы.KeyRelation;
			НоваяСтрока.СкидкаНаценка = ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "Discount", ОписаниеТипаСкидкаНаценка);
			НоваяСтрока.Сумма = СтрокаТаблицы.Amount;
			НоваяСтрока.ОграниченаМинимальнойЦеной = СтрокаТаблицы.MinimalPriceRestriction;
			НоваяСтрока.ЗначениеСкидкиНаценки = СтрокаТаблицы.DiscountValue;
			НоваяСтрока.ИдентификаторСтроки = СтрокаТаблицы.LineUID;
			НоваяСтрока.Представление = СтрокаТаблицы.Discount.Name;
			Если СтрокаТаблицы.Свойство("Return") Тогда
				НоваяСтрока.ПриВозврате = СтрокаТаблицы.Return;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаСкидокНаценок;
	
КонецФункции

Функция ПолучитьТаблицуБонусовИзЗапроса(ДанныеОтвета)
	
	ОписаниеТиповЧисло152 = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,2));
	ОписаниеТиповЧисло5 = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5,0));
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ОписаниеТипаСкидкаНаценка = Метаданные.ОпределяемыеТипы.СкидкаНаценкаРМК.Тип;
	ОписаниеТипаБонуснаяПрограмма = Метаданные.ОпределяемыеТипы.БонуснаяПрограммаРМК.Тип;
	
	ТаблицаБонусныеБаллы = Новый ТаблицаЗначений;
	ТаблицаБонусныеБаллы.Колонки.Добавить("КлючСвязи", ОписаниеТиповЧисло5);
	ТаблицаБонусныеБаллы.Колонки.Добавить("СкидкаНаценка", ОписаниеТипаСкидкаНаценка);
	ТаблицаБонусныеБаллы.Колонки.Добавить("БонуснаяПрограмма", ОписаниеТипаБонуснаяПрограмма);
	ТаблицаБонусныеБаллы.Колонки.Добавить("ДатаНачисления", ОписаниеТиповДата);
	ТаблицаБонусныеБаллы.Колонки.Добавить("ДатаСписания", ОписаниеТиповДата);
	ТаблицаБонусныеБаллы.Колонки.Добавить("КоличествоБонусныхБаллов", ОписаниеТиповЧисло152);
	
	СвойствоПравильное = "BonusesToAccrue";
	СвойствоНеправильное = "BonusesToАccrue";
	
	СвойствоПроверки = СвойствоПравильное;
	Если ТипЗнч(ДанныеОтвета) = Тип("Структура") И ДанныеОтвета.Свойство(СвойствоНеправильное) Тогда
		СвойствоПроверки = СвойствоНеправильное;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеОтвета) = Тип("Структура") И ДанныеОтвета.Свойство(СвойствоПроверки) Тогда
		Для каждого СтрокаТаблицы Из ДанныеОтвета[СвойствоПроверки] Цикл
			
			НоваяСтрока = ТаблицаБонусныеБаллы.Добавить();
			НоваяСтрока.КлючСвязи = СтрокаТаблицы.KeyRelation;
			НоваяСтрока.СкидкаНаценка = ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "Discount", ОписаниеТипаСкидкаНаценка);
			НоваяСтрока.БонуснаяПрограмма = ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "BonusProgramm", ОписаниеТипаБонуснаяПрограмма);
			НоваяСтрока.ДатаНачисления = ПрочитатьДатуJSON(СтрокаТаблицы.AccuralDate, ФорматДатыJSON.ISO);
			НоваяСтрока.ДатаСписания = ПрочитатьДатуJSON(СтрокаТаблицы.WriteOffDate, ФорматДатыJSON.ISO);
			НоваяСтрока.КоличествоБонусныхБаллов = СтрокаТаблицы.BonusCount;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаБонусныеБаллы;
	
КонецФункции

Функция ПолучитьТаблицуПромокодовИзЗапроса(ДанныеОтвета)
	
	ОписаниеТипаПромокод = Метаданные.ОпределяемыеТипы.ПромокодРМК.Тип;
	ОписаниеТипаСкидкаНаценка = Метаданные.ОпределяемыеТипы.СкидкаНаценкаРМК.Тип;
	ОписаниеТипаУсловиеПредоставленияСкидки = Метаданные.ОпределяемыеТипы.УсловиеПредоставленияСкидкиРМК.Тип;
	
	ТаблицаПромокодов = Новый ТаблицаЗначений;
	ТаблицаПромокодов.Колонки.Добавить("Промокод", ОписаниеТипаПромокод);
	ТаблицаПромокодов.Колонки.Добавить("ОписаниеОшибкиПрименения", Новый ОписаниеТипов("Строка"));
	ТаблицаПромокодов.Колонки.Добавить("СкидкаПредоставлена", Новый ОписаниеТипов("Булево"));
	ТаблицаПромокодов.Колонки.Добавить("ЭтоАктивацияПромокода", Новый ОписаниеТипов("Булево"));
	ТаблицаПромокодов.Колонки.Добавить("СкидкаНаценка", ОписаниеТипаСкидкаНаценка);
	ТаблицаПромокодов.Колонки.Добавить("УсловиеПредоставленияСкидки", ОписаниеТипаУсловиеПредоставленияСкидки);
	ТаблицаПромокодов.Колонки.Добавить("УникальныйИдентификатор", Новый ОписаниеТипов("Строка"));
	
	Если ТипЗнч(ДанныеОтвета) = Тип("Структура") И ДанныеОтвета.Свойство("PromocodesList") Тогда
		Для каждого СтрокаТаблицы Из ДанныеОтвета.PromocodesList Цикл
			
			НоваяСтрока = ТаблицаПромокодов.Добавить();
			НоваяСтрока.Промокод = СтрокаТаблицы.Promocode;
			НоваяСтрока.ОписаниеОшибкиПрименения = СтрокаТаблицы.ErrorDescription;
			НоваяСтрока.СкидкаПредоставлена = СтрокаТаблицы.DiscountActive;
			НоваяСтрока.ЭтоАктивацияПромокода = СтрокаТаблицы.PromocodeActivation;
			НоваяСтрока.СкидкаНаценка = ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "PromocodeDiscount", ОписаниеТипаСкидкаНаценка);
			НоваяСтрока.УсловиеПредоставленияСкидки = ПолучитьДесериализованноеСсылочноеЗначение(СтрокаТаблицы, "DiscountCondition", ОписаниеТипаУсловиеПредоставленияСкидки);
			НоваяСтрока.УникальныйИдентификатор = СтрЗаменить(СтрокаТаблицы.PromocodeUID, "-", "_");
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаПромокодов;
	
КонецФункции

Процедура ДополнитьТаблицуПодарковЦенами(ТаблицаПодарков)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПодарков.Номенклатура КАК Номенклатура,
		|	ТаблицаПодарков.Характеристика КАК Характеристика,
		|	ТаблицаПодарков.Упаковка КАК Упаковка,
		|	ТаблицаПодарков.Цена КАК Цена,
		|	ТаблицаПодарков.Сумма КАК Сумма,
		|	ТаблицаПодарков.Количество КАК Количество,
		|	ТаблицаПодарков.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТаблицаПодарков.ВыборИзСписка КАК ВыборИзСписка,
		|	ТаблицаПодарков.ВыводитьПодарокВЧек КАК ВыводитьПодарокВЧек,
		|	ТаблицаПодарков.ВладелецПодарка КАК ВладелецПодарка
		|ПОМЕСТИТЬ ВТ_ТаблицаПодарков
		|ИЗ
		|	&ТаблицаПодарков КАК ТаблицаПодарков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаПодарков.Номенклатура КАК Номенклатура,
		|	ВТ_ТаблицаПодарков.Характеристика КАК Характеристика,
		|	ВТ_ТаблицаПодарков.Упаковка КАК Упаковка,
		|	ВЫБОР
		|		КОГДА ВТ_ТаблицаПодарков.Цена <> 0
		|			ТОГДА ВТ_ТаблицаПодарков.Цена
		|		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР
		|		КОГДА ВТ_ТаблицаПодарков.Сумма <> 0
		|			ТОГДА ВТ_ТаблицаПодарков.Сумма
		|		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена * ВТ_ТаблицаПодарков.Количество
		|	КОНЕЦ КАК Сумма,
		|	ВТ_ТаблицаПодарков.Количество КАК Количество,
		|	ВТ_ТаблицаПодарков.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ВТ_ТаблицаПодарков.ВыборИзСписка КАК ВыборИзСписка,
		|	ВТ_ТаблицаПодарков.ВыводитьПодарокВЧек КАК ВыводитьПодарокВЧек,
		|	ВТ_ТаблицаПодарков.ВладелецПодарка КАК ВладелецПодарка
		|ИЗ
		|	ВТ_ТаблицаПодарков КАК ВТ_ТаблицаПодарков
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ВТ_ТаблицаПодарков.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ВТ_ТаблицаПодарков.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
		|			И (ВТ_ТаблицаПодарков.Цена = 0)";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ТаблицаПодарков", ТаблицаПодарков);
	
	ТаблицаПодарков = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Функция ПолучитьДесериализованноеСсылочноеЗначение(ВходящиеДанные, ИмяПараметра, ТипЗначения) Экспорт
	
	ЗначениеПараметра = Неопределено;
	
	Попытка
		Параметр = ВходящиеДанные[ИмяПараметра];
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Ref") Тогда
			СтроковоеЗначениеПараметра = Параметр.Ref;
		Иначе
			СтроковоеЗначениеПараметра = Параметр;
		КонецЕсли;
		
		ТипыЗначения = ТипЗначения.Типы();
		Для Каждого Тип Из ТипыЗначения Цикл
			Если ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
				МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Новый(Тип));
				СсылкаНаОбъект = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(СтроковоеЗначениеПараметра));
			Иначе
				СсылкаНаОбъект = СтроковоеЗначениеПараметра;
			КонецЕсли;
			Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
				ЗначениеПараметра = СсылкаНаОбъект;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ЗначениеПараметра) И НЕ ТипЗнч(Параметр) = Тип("Структура") Тогда
			ЗначениеПараметра = Параметр;
		КонецЕсли;
	
	Исключение
		ТипыЗначения = ТипЗначения.Типы();
		Для Каждого Тип Из ТипыЗначения Цикл
			ЗначениеПараметра = Новый(Тип);
			Прервать;
		КонецЦикла;
	КонецПопытки;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

Процедура ЗаполнитьДанныеКартыЛояльности(ФормаРМК, ОписаниеКарты)
	
	НайденнаяКартаЛояльности = Неопределено;
	ФормаРМК.ПараметрыКартыЛояльности = ИнтерфейсРМКСлужебный.ЗаполнитьПараметрыКартыЛояльности(ОписаниеКарты);
	НайденнаяКартаЛояльности = ФормаРМК.ПараметрыКартыЛояльности;
	
	ШтрихкодированиеРМК.ЗаполнитьФормуПоДисконтнойКарте(ФормаРМК, НайденнаяКартаЛояльности);
	Если ФормаРМК.ИспользоватьОплатуБонусами Тогда
		ИнтерфейсРМКСлужебныйКлиентСервер.ОтобразитьИнформациюОБонусныхБаллах(ФормаРМК, ОписаниеКарты.BonusData);
	КонецЕсли;
	
КонецПроцедуры 

Процедура ЗаполнитьДанныеМаксимальнуюСуммуОплатыБонусами(ФормаРМК, МаксимальнаяСуммаОплатыБаллами)
	
	ФормаРМК.МаксимальнаяСуммаОплатыБаллами = МаксимальнаяСуммаОплатыБаллами;
	Если МаксимальнаяСуммаОплатыБаллами > 0 Тогда
		ФормаРМК.РассчитыватьБонусы = Истина;
	КонецЕсли;
	
КонецПроцедуры 

Процедура ЗаполнитьДанныеМаксимальнуюСуммуОплатыБонусамиВСтроках(ФормаРМК, МаксимальнаяСуммаОплатыБалламиПоСтрокам = Неопределено)
	
	ФормаРМК.ТаблицаСуммМаксимальнойОплатыбонусами.Очистить();
	Если МаксимальнаяСуммаОплатыБалламиПоСтрокам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ОписаниеМаксимумаСтроки Из МаксимальнаяСуммаОплатыБалламиПоСтрокам Цикл
		НоваяСтрока = ФормаРМК.ТаблицаСуммМаксимальнойОплатыбонусами.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеМаксимумаСтроки);
		НоваяСтрока.ИдентификаторСтроки = ОписаниеМаксимумаСтроки.КлючСвязи;		
	КонецЦикла;
	ФормаРМК.РассчитыватьБонусы = Истина;
	
КонецПроцедуры  

Функция ПолучитьТаблицуДействующихСкидок(ДанныеОтвета)
	
	ОписаниеТиповЧисло152 = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,2));
	ОписаниеТиповЧисло5 = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(5,0));
	ОписаниеТипаСкидкаНаценка = Метаданные.ОпределяемыеТипы.СкидкаНаценкаРМК.Тип;
	
	ТаблицаДействующихСкидок = Новый ТаблицаЗначений;
	ТаблицаДействующихСкидок.Колонки.Добавить("СкидкаНаценка", ОписаниеТипаСкидкаНаценка);
	ТаблицаДействующихСкидок.Колонки.Добавить("СкидкаНаценкаПредставление", Новый ОписаниеТипов("Строка"));
	ТаблицаДействующихСкидок.Колонки.Добавить("ЗначениеСкидкиНаценки", ОписаниеТиповЧисло152);
	ТаблицаДействующихСкидок.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	ТаблицаДействующихСкидок.Колонки.Добавить("Родитель", ОписаниеТипаСкидкаНаценка);
	ТаблицаДействующихСкидок.Колонки.Добавить("КоличествоВыполненныхУсловий",ОписаниеТиповЧисло5);
	ТаблицаДействующихСкидок.Колонки.Добавить("УсловияПредоставления", Новый ОписаниеТипов("Строка"));
	
	Если ТипЗнч(ДанныеОтвета) = Тип("Структура") И ДанныеОтвета.Свойство("CurrentDiscounts") Тогда
		Для Каждого СтрокаТаблицы Из ДанныеОтвета.CurrentDiscounts Цикл
			НоваяСтрока = ТаблицаДействующихСкидок.Добавить();
			НоваяСтрока.СкидкаНаценка = СтрокаТаблицы.Discounts.Ref;
			НоваяСтрока.СкидкаНаценкаПредставление = СтрокаТаблицы.Discounts.Name;
			НоваяСтрока.ЗначениеСкидкиНаценки = СтрокаТаблицы.DiscountValue;
			НоваяСтрока.ЭтоГруппа = СтрокаТаблицы.Group;
			НоваяСтрока.Родитель = СтрокаТаблицы.Parent;
			НоваяСтрока.КоличествоВыполненныхУсловий = СтрокаТаблицы.Completed;
			НоваяСтрока.УсловияПредоставления = СтрокаТаблицы.TermsDiscounts;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаДействующихСкидок;
КонецФункции

// Процедура заполняет массив серий из Сервера лояльности, исключая серии, которые уже присутствуют в РМК.
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.НоменклатураРМК - товар, для которого необходимо заполнить серии.
//  Характеристика - ОпределяемыйТип.ХарактеристикаРМК - характеристика, для которой необходимо заполнить серии.
//  МассивСерий - Массив - массив, в который необходимо добавить найденные серии.
//  ИсключаяСерии - Массив - массив, в котором содержаться серии, которые уже присутствуют в РМК и их нужно исключить.
//  ФормаРМК - ДанныеФормыКоллекция - данные объекта рабочего места кассира.
//
Процедура ЗаполнитьСписокВыбораСерийНоменклатурыБСЛ(Номенклатура, Характеристика, МассивСерий, ИсключаяСерии, ФормаРМК) Экспорт
	СтруктураПараметровЗапросаСерий = ПолучитьСтруктуруЗапросаСерий(Номенклатура, Характеристика, ФормаРМК.Объект.ТорговыйОбъект, ФормаРМК.Объект.ВидОперации);
	
	ПараметрыПодключенияКСерверуЛояльности = ОбщегоНазначенияРМКВызовСервера.ЗначенияПараметровСервераЛояльности(ФормаРМК.ТекущаяНастройкаРМК);
	ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаСерий(ПараметрыПодключенияКСерверуЛояльности, СтруктураПараметровЗапросаСерий);
	
	СтруктураРезультат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
	
	Если СтруктураРезультат.ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОтвета = Неопределено;
	СтрокаJSON = СтруктураРезультат.ДанныеОтвета;
	СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
	Для Каждого СтрокаМассива Из ДанныеОтвета Цикл
		Если НЕ ИсключаяСерии.Найти(СтрокаМассива.BatchID) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтруктураСерии = Новый Структура("СерияПредставление, ИдентификаторСерий");
		СтруктураСерии.СерияПредставление = СтрокаМассива.BatchDescription;
		СтруктураСерии.ИдентификаторСерий = СтрокаМассива.BatchID;
		МассивСерий.Добавить(СтруктураСерии)
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет данные серии по идентификатору серии строки.
//
// Параметры:
//  СтруктураСтроки - Структура - Структура строки таблицы товаров
//   *ИдентификаторСерий - Строка - Идентификатор серии строки товаров
//   *СерияПредставление - Строка - Представление серии строки товаров
//  ФормаРМК - ДанныеФормыКоллекция - данные объекта рабочего места кассира.
//
Процедура ЗаполнитьДанныеСерииПоИдентификатору(СтруктураСтроки, ФормаРМК) Экспорт
	СтруктураПараметровЗапросаДанныхСерии = ПолучитьСтруктуруЗапросаДанныхСерии(СтруктураСтроки.ИдентификаторСерий);
	
	ПараметрыПодключенияКСерверуЛояльности = ОбщегоНазначенияРМКВызовСервера.ЗначенияПараметровСервераЛояльности(ФормаРМК.ТекущаяНастройкаРМК);
	ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаДанныхСерии(ПараметрыПодключенияКСерверуЛояльности, СтруктураПараметровЗапросаДанныхСерии);
	
	СтруктураРезультат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
	
	Если СтруктураРезультат.ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОтвета = Неопределено;
	СтрокаJSON = СтруктураРезультат.ДанныеОтвета;
	СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
	Если ДанныеОтвета.BatchUsed Тогда
		СтруктураСтроки.СерияПредставление = ДанныеОтвета.NameBatch;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтруктуруЗапросаСерий(Номенклатура, Характеристика, ТорговыйОбъект, ВидОперации)
	СтруктураПараметров = СерверЛояльностиПолучательДанныхКлиентСервер.СтруктураПараметровЗапросаСерий();
	
	СтруктураПараметров.Store = СерверЛояльностиПолучательДанныхКлиентСервер.ПолучитьСтруктуруСсылки(ТорговыйОбъект).Ref;
	ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры");
	СтруктураПараметров.TypeProduct = СерверЛояльностиПолучательДанныхКлиентСервер.ПолучитьСтруктуруСсылки(ВидНоменклатуры).Ref;
	СтруктураПараметров.Characteristic = СерверЛояльностиПолучательДанныхКлиентСервер.ПолучитьСтруктуруСсылки(Характеристика).Ref;
	СтруктураПараметров.Product = СерверЛояльностиПолучательДанныхКлиентСервер.ПолучитьСтруктуруСсылки(Номенклатура).Ref;
	
	СтруктураПараметров.TypeOperationSale = ЭтоВидОперацииПродажа(ВидОперации);
	
	Возврат СтруктураПараметров;
КонецФункции

Функция ПолучитьСтруктуруЗапросаДанныхСерии(ИдентификаторСерии)
	
	СтруктураПараметров = СерверЛояльностиПолучательДанныхКлиентСервер.СтруктураПараметровЗапросаДанныхСерии();
	
	СтруктураПараметров.BatchUID = ИдентификаторСерии;

	Возврат СтруктураПараметров;
КонецФункции

Процедура ЗагрузитьТаблицуСкидок(ТаблицаПриемник, ТаблицаИсточник, ЭтоВозврат)
	Если НЕ ЭтоВозврат Тогда
		ТаблицаПриемник.Очистить();
		ТаблицаПриемник.Загрузить(ТаблицаИсточник);
		Возврат;
	КонецЕсли;
	
	МассивСтрокКУдалению = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаПриемник Цикл
		Если СтрокаТаблицы.ПриВозврате Тогда
			МассивСтрокКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
		ТаблицаПриемник.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Для Каждого СтрокаСкидки Из ТаблицаИсточник Цикл
		НоваяСтрокаСкидки = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСкидки,СтрокаСкидки);
	КонецЦикла;
КонецПроцедуры

Процедура ПолучитьАктуальнуюЦенуССервераЛояльности(СтруктураСтроки, ЦенаСерии, ФормаРМК) Экспорт
	ТорговыйОбъект = ФормаРМК.Объект.ТорговыйОбъект;
	УИДВидЦены = "";
	ОбщегоНазначенияРМКПереопределяемый.ВернутьВидЦены(ТорговыйОбъект, УИДВидЦены);
	
	СтруктураПараметровЗапросаЦены = СтруктураПараметровЗапросаЦены(СтруктураСтроки.Номенклатура, СтруктураСтроки.Характеристика, СтруктураСтроки.ИдентификаторСерии, УИДВидЦены);
	
	ПараметрыПодключенияКСерверуЛояльности = ОбщегоНазначенияРМКВызовСервера.ЗначенияПараметровСервераЛояльности(ФормаРМК.ТекущаяНастройкаРМК);
	ПараметрыВыполненияЗапроса = СерверЛояльностиПолучательДанныхКлиентСервер.ПараметрыЗапросаДанныхЦены(ПараметрыПодключенияКСерверуЛояльности, СтруктураПараметровЗапросаЦены);
	
	СтруктураРезультат = СерверЛояльностиПолучательДанныхКлиентСервер.ВыполнитьЗапросКСерверуЛояльности(ПараметрыВыполненияЗапроса);
	
	Если СтруктураРезультат.ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОтвета = Неопределено;
	СтрокаJSON = СтруктураРезультат.ДанныеОтвета;
	СерверЛояльностиПолучательДанныхКлиентСервер.ОбработатьJSON(СтрокаJSON, ДанныеОтвета);
	Если ДанныеОтвета <> Неопределено 
		И ДанныеОтвета.Свойство("Price") Тогда
		ЦенаСерии = ДанныеОтвета.Price;
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураПараметровЗапросаЦены(Номенклатура, Характеристика, ИдентификаторСерии, УИДВидЦены)
	СтруктураПараметров = СерверЛояльностиПолучательДанныхКлиентСервер.СтруктураПараметровЗапросаЦены();
	
	СтруктураПараметров.TypePriceUID = УИДВидЦены;
	СтруктураПараметров.Characteristic = СерверЛояльностиПолучательДанныхКлиентСервер.ПолучитьСтруктуруСсылки(Характеристика).Ref;
	СтруктураПараметров.Product = СерверЛояльностиПолучательДанныхКлиентСервер.ПолучитьСтруктуруСсылки(Номенклатура).Ref;
	СтруктураПараметров.BatchUID = ИдентификаторСерии;
	
	Возврат СтруктураПараметров;
КонецФункции

#КонецОбласти

#Область ФормированиеПечатныхФорм_СлужебныеПроцедуры

Функция ИменаПолейКоллекцииПечатныхФорм()
	
	Поля = Новый Массив;
	Поля.Добавить("ИмяМакета");
	Поля.Добавить("ИмяВРЕГ");
	Поля.Добавить("СинонимМакета");
	Поля.Добавить("ТабличныйДокумент");
	Поля.Добавить("Экземпляров");
	Поля.Добавить("Картинка");
	Поля.Добавить("ПолныйПутьКМакету");
	Поля.Добавить("ИмяФайлаПечатнойФормы");
	Поля.Добавить("ОфисныеДокументы");
	Поля.Добавить("ДоступенВыводНаДругихЯзыках");
	
	Возврат Поля;
	
КонецФункции

#КонецОбласти

// Возвращает текст запроса наличия запретов продаж по времени.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаДействующихЗапретовПродаж()
	
	Возврат "ВЫБРАТЬ
	|	УсловияЗапретаПродаж.Организация КАК Организация,
	|	УсловияЗапретаПродаж.ВидНоменклатуры КАК ВидНоменклатуры,
	|	УсловияЗапретаПродаж.ОсобенностьУчета КАК ОсобенностьУчета,
	|	УсловияЗапретаПродаж.ДеньНедели КАК ДеньНедели,
	|	УсловияЗапретаПродаж.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	УсловияЗапретаПродаж.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	УсловияЗапретаПродаж.ВремяНачала КАК ВремяНачала,
	|	УсловияЗапретаПродаж.ВремяОкончания КАК ВремяОкончания,
	|	УсловияЗапретаПродаж.ИдентификаторЗапрета КАК ИдентификаторЗапрета,
	|	ВЫБОР
	|		КОГДА УсловияЗапретаПродаж.ДатаНачалаДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 9999999999
	|		ИНАЧЕ РАЗНОСТЬДАТ(УсловияЗапретаПродаж.ДатаНачалаДействия, &ТекущаяДата, СЕКУНДА)
	|	КОНЕЦ КАК КоличествоСекундМеждуНачаломИТекущейДатой
	|ПОМЕСТИТЬ втИсходныеДанные
	|ИЗ
	|	РегистрСведений.УсловияЗапретаПродажРМК КАК УсловияЗапретаПродаж
	|ГДЕ
	|	УсловияЗапретаПродаж.Организация = &Организация
	|	И НАЧАЛОПЕРИОДА(УсловияЗапретаПродаж.ДатаНачалаДействия, ДЕНЬ) <= &ТекущаяДата
	|	И КОНЕЦПЕРИОДА(УсловияЗапретаПродаж.ДатаОкончанияДействия, ДЕНЬ) >= &ТекущаяДата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УсловияЗапретаПродаж.Организация,
	|	УсловияЗапретаПродаж.ВидНоменклатуры,
	|	УсловияЗапретаПродаж.ОсобенностьУчета,
	|	УсловияЗапретаПродаж.ДеньНедели,
	|	УсловияЗапретаПродаж.ДатаНачалаДействия,
	|	УсловияЗапретаПродаж.ДатаОкончанияДействия,
	|	УсловияЗапретаПродаж.ВремяНачала,
	|	УсловияЗапретаПродаж.ВремяОкончания,
	|	УсловияЗапретаПродаж.ИдентификаторЗапрета,
	|	ВЫБОР
	|		КОГДА УсловияЗапретаПродаж.ДатаНачалаДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 9999999999
	|		ИНАЧЕ РАЗНОСТЬДАТ(УсловияЗапретаПродаж.ДатаНачалаДействия, &ТекущаяДата, СЕКУНДА)
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.УсловияЗапретаПродажРМК КАК УсловияЗапретаПродаж
	|ГДЕ
	|	УсловияЗапретаПродаж.Организация = &Организация
	|	И НАЧАЛОПЕРИОДА(УсловияЗапретаПродаж.ДатаНачалаДействия, ДЕНЬ) <= &ТекущаяДата
	|	И УсловияЗапретаПродаж.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УсловияЗапретаПродаж.Организация,
	|	УсловияЗапретаПродаж.ВидНоменклатуры,
	|	УсловияЗапретаПродаж.ОсобенностьУчета,
	|	УсловияЗапретаПродаж.ДеньНедели,
	|	УсловияЗапретаПродаж.ДатаНачалаДействия,
	|	УсловияЗапретаПродаж.ДатаОкончанияДействия,
	|	УсловияЗапретаПродаж.ВремяНачала,
	|	УсловияЗапретаПродаж.ВремяОкончания,
	|	УсловияЗапретаПродаж.ИдентификаторЗапрета,
	|	ВЫБОР
	|		КОГДА УсловияЗапретаПродаж.ДатаНачалаДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 9999999999
	|		ИНАЧЕ РАЗНОСТЬДАТ(УсловияЗапретаПродаж.ДатаНачалаДействия, &ТекущаяДата, СЕКУНДА)
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.УсловияЗапретаПродажРМК КАК УсловияЗапретаПродаж
	|ГДЕ
	|	УсловияЗапретаПродаж.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И НАЧАЛОПЕРИОДА(УсловияЗапретаПродаж.ДатаНачалаДействия, ДЕНЬ) <= &ТекущаяДата
	|	И КОНЕЦПЕРИОДА(УсловияЗапретаПродаж.ДатаОкончанияДействия, ДЕНЬ) >= &ТекущаяДата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УсловияЗапретаПродаж.Организация,
	|	УсловияЗапретаПродаж.ВидНоменклатуры,
	|	УсловияЗапретаПродаж.ОсобенностьУчета,
	|	УсловияЗапретаПродаж.ДеньНедели,
	|	УсловияЗапретаПродаж.ДатаНачалаДействия,
	|	УсловияЗапретаПродаж.ДатаОкончанияДействия,
	|	УсловияЗапретаПродаж.ВремяНачала,
	|	УсловияЗапретаПродаж.ВремяОкончания,
	|	УсловияЗапретаПродаж.ИдентификаторЗапрета,
	|	ВЫБОР
	|		КОГДА УсловияЗапретаПродаж.ДатаНачалаДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 9999999999
	|		ИНАЧЕ РАЗНОСТЬДАТ(УсловияЗапретаПродаж.ДатаНачалаДействия, &ТекущаяДата, СЕКУНДА)
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.УсловияЗапретаПродажРМК КАК УсловияЗапретаПродаж
	|ГДЕ
	|	УсловияЗапретаПродаж.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И НАЧАЛОПЕРИОДА(УсловияЗапретаПродаж.ДатаНачалаДействия, ДЕНЬ) <= &ТекущаяДата
	|	И УсловияЗапретаПродаж.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВидНоменклатуры,
	|	ОсобенностьУчета,
	|	ИдентификаторЗапрета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИсходныеДанные.Организация КАК Организация,
	|	втИсходныеДанные.ВидНоменклатуры КАК ВидНоменклатуры,
	|	втИсходныеДанные.ОсобенностьУчета КАК ОсобенностьУчета,
	|	втИсходныеДанные.ИдентификаторЗапрета КАК ИдентификаторЗапрета,
	|	МИНИМУМ(втИсходныеДанные.КоличествоСекундМеждуНачаломИТекущейДатой) КАК КоличествоСекундМеждуНачаломИТекущейДатой
	|ПОМЕСТИТЬ втМинимальныеОтклоненияОтНачалаДня
	|ИЗ
	|	втИсходныеДанные КАК втИсходныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	втИсходныеДанные.Организация,
	|	втИсходныеДанные.ВидНоменклатуры,
	|	втИсходныеДанные.ОсобенностьУчета,
	|	втИсходныеДанные.ИдентификаторЗапрета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторЗапрета,
	|	Организация,
	|	ВидНоменклатуры,
	|	ОсобенностьУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИсходныеДанные.КоличествоСекундМеждуНачаломИТекущейДатой КАК КоличествоСекундМеждуНачаломИТекущейДатой,
	|	втИсходныеДанные.Организация КАК Организация,
	|	втИсходныеДанные.ВидНоменклатуры КАК ВидНоменклатуры,
	|	втИсходныеДанные.ОсобенностьУчета КАК ОсобенностьУчета,
	|	втИсходныеДанные.ДеньНедели КАК ДеньНедели,
	|	втИсходныеДанные.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	втИсходныеДанные.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	втИсходныеДанные.ВремяНачала КАК ВремяНачала,
	|	втИсходныеДанные.ВремяОкончания КАК ВремяОкончания,
	|	втИсходныеДанные.ИдентификаторЗапрета КАК ИдентификаторЗапрета
	|ИЗ
	|	втИсходныеДанные КАК втИсходныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМинимальныеОтклоненияОтНачалаДня КАК втМинимальныеОтклоненияОтНачалаДня
	|		ПО втИсходныеДанные.ИдентификаторЗапрета = втМинимальныеОтклоненияОтНачалаДня.ИдентификаторЗапрета
	|			И втИсходныеДанные.Организация = втМинимальныеОтклоненияОтНачалаДня.Организация
	|			И втИсходныеДанные.ВидНоменклатуры = втМинимальныеОтклоненияОтНачалаДня.ВидНоменклатуры
	|			И втИсходныеДанные.ОсобенностьУчета = втМинимальныеОтклоненияОтНачалаДня.ОсобенностьУчета
	|			И втИсходныеДанные.КоличествоСекундМеждуНачаломИТекущейДатой = втМинимальныеОтклоненияОтНачалаДня.КоличествоСекундМеждуНачаломИТекущейДатой";
	
КонецФункции

// Возвращает склонение в выбранном падеже либо исходную строку, если передана пустая
//
// Параметры:
//  ФИО		- Строка - Строка, в которой содержится ФИО для склонения.
//  Падеж 	- Число - падеж, в который необходимо просклонять представление объекта.
//							1 - Именительный.
//							2 - Родительный.
//							3 - Дательный.
//							4 - Винительный.
//							5 - Творительный.
//							6 - Предложный.
//  Объект 	- ОбъектСклонения - Ссылка на объект, реквизит которого склоняется.
//  Пол		- Число - Число - пол физического лица, 
//							1 - мужской, 
//							2 - женский.
//
// Возвращаемое значение:
//  Строка - Результат склонения ФИО в падеже.
//
Функция СклонениеФИОВУказанномПадеже(ФИО, Падеж, Пол = Неопределено)
	
	ЭтоLinuxСервер = ОбщегоНазначенияРМККлиентСервер.ЭтоLinuxСервер();
	
	Если ЭтоLinuxСервер ИЛИ ПустаяСтрока(ФИО) Тогда
		Возврат ФИО;
	Иначе
		
		СклонениеФИО = СклонениеПредставленийОбъектов.ПросклонятьФИО(ФИО, Падеж, Неопределено, Пол);
		Возврат СклонениеФИО;
		
	КонецЕсли;

КонецФункции

Функция ПодготовитьДеревоЧековПоДаннымРасшифровки(ДанныеРасшифровки)
	
	ДеревоЧеков = Новый ДеревоЗначений;
	ДеревоЧеков.Колонки.Добавить("Чек", Метаданные.ОпределяемыеТипы.ЧекККМРМК.Тип);
	ДеревоЧеков.Колонки.Добавить("ЧекПредставление", Новый ОписаниеТипов("Строка"));
	ДеревоЧеков.Колонки.Добавить("Сумма", Метаданные.ОпределяемыеТипы.Число15_2РМК.Тип);
	ДеревоЧеков.Колонки.Добавить("ТекстОшибки", Новый ОписаниеТипов("Строка"));
	ДеревоЧеков.Колонки.Добавить("НоменклатураПредставление", Новый ОписаниеТипов("Строка"));
	ДеревоЧеков.Колонки.Добавить("Количество", Метаданные.ОпределяемыеТипы.Число15_3РМК.Тип);
	
	Для Каждого ЭлементЧека Из ДанныеРасшифровки.МассивЧеков Цикл
		НоваяСтрока = ДеревоЧеков.Строки.Добавить();
		НоваяСтрока.Чек = ЭлементЧека.Чек;
		НоваяСтрока.ЧекПредставление = "";
		Если ДанныеРасшифровки.ГруппаРаздела = "Ошибки" Тогда
			НоваяСтрока.ТекстОшибки = ЭлементЧека.ТекстОшибки;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ДеревоЧеков;
	
КонецФункции

Функция СформироватьРасшифровкуОшибокОтчетаЗаСмену(ДеревоЧековТоваров, ГруппаРаздела, ИмяРаздела)
	Перем ОбластьШапкаЧеков, ОбластьЧек;
	
	ТабличныйДокументРасшифровки = Новый ТабличныйДокумент;
	Макет = ПолучитьОбщийМакет("ПФ_MXL_ОтчетЗаСменуРасшифровкиРМК");
	Если ГруппаРаздела = "Ошибки" Тогда
		ОбластьШапкаЧеков = Макет.ПолучитьОбласть("ОшибкиШапкаЧеков");
		ОбластьЧек = Макет.ПолучитьОбласть("ОшибкиЧек");
	Иначе
		ОбластьШапкаЧеков = Макет.ПолучитьОбласть("НеПробитыеШапкаЧеков");
		ОбластьЧек = Макет.ПолучитьОбласть("НеПробитыеЧек");
	КонецЕсли;	
	ОбластьШапкаТоваров = Макет.ПолучитьОбласть("ШапкаТоваров");
	ОбластьТовар = Макет.ПолучитьОбласть("Товар");
	
	ОбластьШапкаЧеков.Параметры.ИмяРаздела = ИмяРаздела;
	ТабличныйДокументРасшифровки.Вывести(ОбластьШапкаЧеков);
	ТабличныйДокументРасшифровки.НачатьАвтогруппировкуСтрок();
	Для Каждого СтрокаЧека Из ДеревоЧековТоваров.Строки Цикл
		ОбластьЧек.Параметры.ЧекПредставление = ?(СтрокаЧека.ЧекПредставление = "", Строка(СтрокаЧека.Чек), СтрокаЧека.ЧекПредставление);
		ОбластьЧек.Параметры.Сумма = СтрокаЧека.Сумма;
		Если ГруппаРаздела = "Ошибки" Тогда
			ОбластьЧек.Параметры.ТекстОшибки = СтрокаЧека.ТекстОшибки;
		КонецЕсли;
		ТабличныйДокументРасшифровки.Вывести(ОбластьЧек, 0, , Ложь);
		Если СтрокаЧека.Строки.Количество() > 0 Тогда
			
			ТабличныйДокументРасшифровки.Вывести(ОбластьШапкаТоваров, 1, , Ложь);
			Для Каждого СтрокаТовара Из СтрокаЧека.Строки Цикл
				ОбластьТовар.Параметры.Товар = СтрокаТовара.НоменклатураПредставление;
				ОбластьТовар.Параметры.Количество = СтрокаТовара.Количество;
				ОбластьТовар.Параметры.Сумма = СтрокаТовара.Сумма;
				ТабличныйДокументРасшифровки.Вывести(ОбластьТовар, 1, , Ложь);
			КонецЦикла;	
			
		КонецЕсли;	
	КонецЦикла;
	ТабличныйДокументРасшифровки.ЗакончитьАвтогруппировкуСтрок();
	
	Возврат ТабличныйДокументРасшифровки;
	
КонецФункции	

Процедура ПолучитьДанныеДляСверки(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	Отказ = Ложь;
	УстройствоФискализации = ПараметрыПроцедуры.КассаККМ.ПодключаемоеОборудование;
	МодульКассовыхСмен = ОбщегоНазначения.ОбщийМодуль("КассовыеСмены");
	СтатусКассовойСмены = МодульКассовыхСмен.СтатусПоследнейСмены(УстройствоФискализации);
	
	СтандартнаяОбработка = Истина;
	ДанныеСверки = Неопределено;
	ОбщегоНазначенияРМКПереопределяемый.ОборотыКассовойСмены(ПараметрыПроцедуры.КассаККМ, СтатусКассовойСмены.НомерСменыККТ, ДанныеСверки, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОФД") Тогда
			МодульОФД = ОбщегоНазначения.ОбщийМодуль("ОФД");
			ДанныеСверки = МодульОФД.ОборотыКассовойСмены(ПараметрыПроцедуры.КассаККМ, СтатусКассовойСмены.НомерСменыККТ);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСверки.ДанныеСмены) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ДанныеСверки.ДанныеСмены.Вставить("КассаККМ", ПараметрыПроцедуры.КассаККМ);
	
	СуммаПродажНаличными = 0;
	СуммаВозвратовНаличными = 0;
	СуммаПродажЭлектронно = 0;
	СуммаВозвратовЭлектронно = 0;
	СуммаПродажПредоплата = 0;
	СуммаВозвратовПредоплата = 0;
	СуммаПродажПостоплата = 0;
	СуммаВозвратовПостоплата = 0;
	
	СтандартнаяОбработка = Истина;
	ДанныеПоЧекам = Неопределено;
	ОбщегоНазначенияРМКПереопределяемый.ЧекиКассовойСмены(ПараметрыПроцедуры.КассаККМ, СтатусКассовойСмены.НомерСменыККТ, ДанныеПоЧекам, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОФД") Тогда
			МодульОФД = ОбщегоНазначения.ОбщийМодуль("ОФД");
			ДанныеПоЧекам = МодульОФД.ЧекиКассовойСмены(ПараметрыПроцедуры.КассаККМ, СтатусКассовойСмены.НомерСменыККТ);
		КонецЕсли;
	КонецЕсли;
	
	МассивФискальныхДокументов = Новый Массив();
	
	Для Каждого Чек ИЗ ДанныеПоЧекам.ДанныеЧеков Цикл
		Если Чек.ПризнакРасчета = "ПРИХОД" ИЛИ "ВОЗВРАТРАСХОДА" Тогда
			СуммаПродажНаличными = СуммаПродажНаличными + Чек.ДанныеПоРасчетам.СуммаНаличными;
			СуммаПродажПредоплата = СуммаПродажПредоплата + Чек.ДанныеПоРасчетам.СуммаПредоплатами;
			СуммаПродажПостоплата = СуммаПродажПостоплата + Чек.ДанныеПоРасчетам.СуммаПостоплатами;
			СуммаПродажЭлектронно = СуммаПродажЭлектронно + Чек.ДанныеПоРасчетам.СуммаЭлектронными;
			ЭтоЧекВозврата = Ложь;
		ИначеЕсли Чек.ПризнакРасчета = "ВОЗВРАТПРИХОДА" ИЛИ "РАСХОД" Тогда
			СуммаВозвратовНаличными = СуммаПродажНаличными + Чек.ДанныеПоРасчетам.СуммаНаличными;
			СуммаВозвратовПредоплата = СуммаПродажПредоплата + Чек.ДанныеПоРасчетам.СуммаПредоплатами;
			СуммаВозвратовПостоплата = СуммаПродажПостоплата + Чек.ДанныеПоРасчетам.СуммаПостоплатами;
			СуммаВозвратовЭлектронно = СуммаПродажЭлектронно + Чек.ДанныеПоРасчетам.СуммаЭлектронными;
			ЭтоЧекВозврата = Истина;
		КонецЕсли;
		
		СуммаДокумента = Чек.ДанныеПоРасчетам.СуммаНаличными + Чек.ДанныеПоРасчетам.СуммаПредоплатами 
			+ Чек.ДанныеПоРасчетам.СуммаПостоплатами + Чек.ДанныеПоРасчетам.СуммаЭлектронными;
		
		НовыйФискальныйДокумент = Новый Структура();
		НовыйФискальныйДокумент.Вставить("ДатаЧека", Чек.ДатаЧека);
		Если Чек.Свойство("ФискальныйНомерЧека") Тогда
			НовыйФискальныйДокумент.Вставить("ФискальныйНомерЧека", Чек.ФискальныйНомерЧека);
		КонецЕсли;
		НовыйФискальныйДокумент.Вставить("СуммаДокумента", ?(ЭтоЧекВозврата, -СуммаДокумента, СуммаДокумента));
		НовыйФискальныйДокумент.Вставить("ЭтоВозврат", ?(ЭтоЧекВозврата, Истина, Ложь));
		
		МассивФискальныхДокументов.Добавить(НовыйФискальныйДокумент);
	КонецЦикла;
	
	ДанныеСверки.ДанныеСмены.Вставить("СуммаПродажНаличными", СуммаПродажНаличными);
	ДанныеСверки.ДанныеСмены.Вставить("СуммаВозвратовНаличными", СуммаВозвратовНаличными);
	ДанныеСверки.ДанныеСмены.Вставить("СуммаПродажЭлектронно", СуммаПродажЭлектронно);
	ДанныеСверки.ДанныеСмены.Вставить("СуммаВозвратовЭлектронно", СуммаВозвратовЭлектронно);
	ДанныеСверки.ДанныеСмены.Вставить("СуммаПродажПредоплата", СуммаПродажПредоплата);
	ДанныеСверки.ДанныеСмены.Вставить("СуммаВозвратовПредоплата", СуммаВозвратовПредоплата);
	ДанныеСверки.ДанныеСмены.Вставить("СуммаПродажПостоплата", СуммаПродажПостоплата);
	ДанныеСверки.ДанныеСмены.Вставить("СуммаВозвратовПостоплата", СуммаВозвратовПостоплата);
	
	Если ЗначениеЗаполнено(ДанныеСверки.ИнформацияОбОшибке) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДанныеСмены = Неопределено;
	ОбщегоНазначенияРМКПереопределяемый.ПолучитьДанныеПродажЗаСмену(СтатусКассовойСмены.КассоваяСмена, ДанныеСмены);
	
	Если ДанныеСмены = Неопределено Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДанныеПоПродажамОФД = ДанныеСверки.ДанныеСмены;
	Если ДанныеПоПродажамОФД.СуммаПрихода = ДанныеСмены.СуммаПрихода 
		И ДанныеПоПродажамОФД.СуммаВозвратаПрихода = ДанныеСмены.СуммаВозвратПрихода
		И ДанныеПоПродажамОФД.СуммаЭлектронными = ДанныеСмены.СуммаБезналичные
		И ДанныеПоПродажамОФД.СуммаПредоплатами = ДанныеСмены.СуммаПредполата
		И ДанныеПоПродажамОФД.СуммаПостоплатами = ДанныеСмены.СуммаРассрочки
		И ДанныеПоПродажамОФД.СуммаНаличными = ДанныеСмены.СуммаНаличными Тогда
		Отказ = Истина; 
		Возврат;
	КонецЕсли;
	
	ДанныеОФД = Новый Структура;
	ДанныеОФД.Вставить("ДанныеСверки", ДанныеСверки.ДанныеСмены);
	ДанныеОФД.Вставить("ДанныеСмены", ДанныеСмены);
	ДанныеОФД.Вставить("ДанныеПоЧекам", МассивФискальныхДокументов);
	
	Если Не Отказ Тогда
		ПоместитьВоВременноеХранилище(ДанныеОФД, АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает шаблон таблицы кодов маркировки по данным информационной базы, актуальных для строки товаров.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица кодов маркировки - См. ОбщегоНазначенияРМК.КодыМаркировкиПоДаннымИБШаблон:
//   * ПолныйКодМаркировки - Строка - полный код маркировки в формате base64;
//   * КодМаркировкиПредставление - Строка - представление кода маркировки для пользователя;
//
Функция КодыМаркировкиПоДаннымИБШаблон()
	
	КодыМаркировкиПоДаннымИБ = Новый ТаблицаЗначений;
	КодыМаркировкиПоДаннымИБ.Колонки.Добавить("ПолныйКодМаркировки", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	КодыМаркировкиПоДаннымИБ.Колонки.Добавить("КодМаркировкиПредставление", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	КодыМаркировкиПоДаннымИБ.Колонки.Добавить("ОстатокПоКодуМаркировки", ОбщегоНазначения.ОписаниеТипаЧисло(10, 3));
	
	Возврат КодыМаркировкиПоДаннымИБ;
	
КонецФункции

Процедура ЗаполнитьМассивУстройствПолученнымиДанными(Устройства, ОписаниеУстройств)
	
	Если Не ОписаниеУстройств = Неопределено Тогда
		Для Каждого ОписаниеУстройства Из ОписаниеУстройств Цикл
			Устройства.Добавить(ОписаниеУстройства.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаИзмененныхУстройствРаспознаванияЭлектронныхВесов()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаУстройств.ЭлектронныеВесы КАК ЭлектронныеВесыСсылка,
	|	ТаблицаУстройств.УстройствоРаспознавания КАК УстройствоРаспознаванияСсылка
	|ПОМЕСТИТЬ СохраняемаяКомплектация
	|ИЗ
	|	&ТаблицаУстройств КАК ТаблицаУстройств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КомплектацияПодключаемогоОборудования.ОсновноеОборудование, ТаблицаСохраняемыхУстройств.ЭлектронныеВесыСсылка) КАК ЭлектронныеВесыСсылка,
	|	ЕСТЬNULL(КомплектацияПодключаемогоОборудования.ДополнительноеОборудование, ТаблицаСохраняемыхУстройств.УстройствоРаспознаванияСсылка) КАК УстройствоРаспознаванияСсылка,
	|	ВЫБОР
	|		КОГДА КомплектацияПодключаемогоОборудования.ОсновноеОборудование ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Добавить,
	|	ВЫБОР
	|		КОГДА ТаблицаСохраняемыхУстройств.ЭлектронныеВесыСсылка ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Удалить
	|ИЗ
	|	РегистрСведений.КомплектацияПодключаемогоОборудования КАК КомплектацияПодключаемогоОборудования
	|		ПОЛНОЕ СОЕДИНЕНИЕ СохраняемаяКомплектация КАК ТаблицаСохраняемыхУстройств
	|		ПО КомплектацияПодключаемогоОборудования.ОсновноеОборудование = ТаблицаСохраняемыхУстройств.ЭлектронныеВесыСсылка
	|			И КомплектацияПодключаемогоОборудования.ДополнительноеОборудование = ТаблицаСохраняемыхУстройств.УстройствоРаспознаванияСсылка
	|ГДЕ
	|	(КомплектацияПодключаемогоОборудования.ОсновноеОборудование В (&ЭлектронныеВесы)
	|			ИЛИ КомплектацияПодключаемогоОборудования.ОсновноеОборудование ЕСТЬ NULL)
	|	И (КомплектацияПодключаемогоОборудования.ДополнительноеОборудование В (&УстройстваРаспознавания)
	|			ИЛИ КомплектацияПодключаемогоОборудования.ДополнительноеОборудование ЕСТЬ NULL)
	|	И (КомплектацияПодключаемогоОборудования.ОсновноеОборудование ЕСТЬ NULL
	|			ИЛИ ТаблицаСохраняемыхУстройств.ЭлектронныеВесыСсылка ЕСТЬ NULL)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПодготовитьТаблицуОтбораТоваров(ТоварыОпорныхДанных)
	
	ТаблицаОтбораТоваров = Новый ТаблицаЗначений;
	ТаблицаОтбораТоваров.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.НоменклатураРМК.Тип);
	ТаблицаОтбораТоваров.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаРМК.Тип);
	
	Для Каждого СтрокаТовара Из ТоварыОпорныхДанных Цикл
		НоваяСтрока = ТаблицаОтбораТоваров.Добавить();
		НоваяСтрока.Номенклатура = СтрокаТовара.Номенклатура;
		НоваяСтрока.Характеристика = СтрокаТовара.Характеристика;
	КонецЦикла;
	
	Возврат ТаблицаОтбораТоваров;
	
КонецФункции

Функция ПодготовитьТаблицуКодовSKU(РаспознанныеТовары)

	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	ТаблицуКодовSKU = Новый ТаблицаЗначений;
	ТаблицуКодовSKU.Колонки.Добавить("Код", ОписаниеТипаЧисло);
	ТаблицуКодовSKU.Колонки.Добавить("Вероятность", ОписаниеТипаЧисло);
	
	Для Каждого СтрокаРаспознавания Из РаспознанныеТовары Цикл
		НоваяСтрока = ТаблицуКодовSKU.Добавить();
		НоваяСтрока.Код = СтрокаРаспознавания.Код;
		НоваяСтрока.Вероятность = СтрокаРаспознавания.Вероятность;
	КонецЦикла;
	
	Возврат ТаблицуКодовSKU;
	
КонецФункции

Процедура ОтброситьРаспознанныеТоварыСМизернойВероятностью(ТоварыКВыбору)
	
	ПредельнаяРазницаСниженияВероятности = 10;
	
	СтопИндекс = 0;
	ИндексПроверяемогоЭлемента = 1;
	КоличествоЭлементов = ТоварыКВыбору.Количество();
	Пока ИндексПроверяемогоЭлемента < КоличествоЭлементов И СтопИндекс = 0 Цикл
		ПредыдущийЭлемент = ТоварыКВыбору.Получить(ИндексПроверяемогоЭлемента - 1);
		ТекущийЭлемент = ТоварыКВыбору.Получить(ИндексПроверяемогоЭлемента);
		
		Если ТекущийЭлемент.Вероятность > 0 Тогда
			Если ПредыдущийЭлемент.Вероятность / ТекущийЭлемент.Вероятность >= ПредельнаяРазницаСниженияВероятности Тогда
				СтопИндекс = ИндексПроверяемогоЭлемента;
			КонецЕсли;
		Иначе
			СтопИндекс = ИндексПроверяемогоЭлемента;
		КонецЕсли;
		
		ИндексПроверяемогоЭлемента = ИндексПроверяемогоЭлемента + 1;
	КонецЦикла;
	Если СтопИндекс > 0 Тогда
		УдалитьПоследниеЭлементыКоллекции(ТоварыКВыбору, СтопИндекс);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьПоследниеЭлементыКоллекции(Коллекция, НачальныйИндекс)
	
	КоличествоЭлементов = Коллекция.Количество();
	Если НачальныйИндекс >= 0 И НачальныйИндекс < КоличествоЭлементов Тогда
		Для ИндексУдаления = 1 По КоличествоЭлементов - НачальныйИндекс Цикл
			Коллекция.Удалить(КоличествоЭлементов - ИндексУдаления);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТаблицуОплат(ФормаРМК)Экспорт
	
	ТаблицаВидовОплаты = ПолучитьПустуюТаблицуИспользуемыхОплат();
	ЭлементВидыОплаты = ФормаРМК.Элементы.Найти("ГруппаВидовОплат");
	Если НЕ ЭлементВидыОплаты = Неопределено Тогда
		Для Каждого ГруппаВидаОплаты Из ЭлементВидыОплаты.ПодчиненныеЭлементы Цикл
			ПолеВводаСуммы = Неопределено;
			Если ГруппаВидаОплаты.Имя = "ГруппаВидОплатыНаличными" Тогда
				ВыбранныйВидОплаты = ТаблицаВидовОплаты.Добавить();
				ВыбранныйВидОплаты.ВидОплаты = ПредопределенноеЗначениеВидаОплаты("Наличные");
				ВыбранныйВидОплаты.ИмяРеквизитаФормыАльтернативыСкидки = "СкидкаЗаНаличные";
				ПолеВводаСуммы = ФормаРМК.Элементы.Найти("ГруппаОплатаНал");
			ИначеЕсли ГруппаВидаОплаты.Имя = "ГруппаВидОплатыКартой" Тогда
				ВыбранныйВидОплаты = ТаблицаВидовОплаты.Добавить();
				ВыбранныйВидОплаты.ВидОплаты = ПредопределенноеЗначениеВидаОплаты("БанковскойКартой");
				ВыбранныйВидОплаты.ИмяРеквизитаФормыАльтернативыСкидки = "СкидкаЗаКарту";
				ПолеВводаСуммы = ФормаРМК.Элементы.Найти("ГруппаОплатаКартой");
			ИначеЕсли ГруппаВидаОплаты.Имя = "ГруппаВидОплатыСБП" Тогда
				ВыбранныйВидОплаты = ТаблицаВидовОплаты.Добавить();
				ВыбранныйВидОплаты.ВидОплаты = ПредопределенноеЗначениеВидаОплаты("СБП");
				ВыбранныйВидОплаты.ИмяРеквизитаФормыАльтернативыСкидки = "СкидкаЗаСБП";
				ПолеВводаСуммы = ФормаРМК.Элементы.Найти("ГруппаОплатаСБП");
			ИначеЕсли ГруппаВидаОплаты.Имя = "ГруппаВидОплатыЮКасса" Тогда
				ВыбранныйВидОплаты = ТаблицаВидовОплаты.Добавить();
				ВыбранныйВидОплаты.ВидОплаты = ПредопределенноеЗначениеВидаОплаты("БанковскойКартой");
				ВыбранныйВидОплаты.ИмяРеквизитаФормыАльтернативыСкидки = "СкидкаЗаЮКассу";
				ПолеВводаСуммы = ФормаРМК.Элементы.Найти("ГруппаОплатаЮКасса");
			ИначеЕсли ГруппаВидаОплаты.Имя = "ГруппаВидОплатыНСПК" Тогда
				ВыбранныйВидОплаты = ТаблицаВидовОплаты.Добавить();
				ВыбранныйВидОплаты.ВидОплаты = ПредопределенноеЗначениеВидаОплаты("ПустаяСсылка");
				ВыбранныйВидОплаты.ИмяРеквизитаФормыАльтернативыСкидки = "СкидкаЗаНСПК";
				ПолеВводаСуммы = ФормаРМК.Элементы.Найти("ГруппаСуммаОплатаСертификатамиНСПК");
			ИначеЕсли ГруппаВидаОплаты.Имя = "ГруппаВидОплатыПредоплата" Тогда
				ВыбранныйВидОплаты = ТаблицаВидовОплаты.Добавить();
				ВыбранныйВидОплаты.ВидОплаты = ПредопределенноеЗначениеВидаОплаты("ПустаяСсылка");
				ВыбранныйВидОплаты.ИмяРеквизитаФормыАльтернативыСкидки = "СкидкаЗаПредоплату";
				ПолеВводаСуммы = ФормаРМК.Элементы.Найти("ГруппаОплатаПредоплата");
			ИначеЕсли ГруппаВидаОплаты.Имя = "ГруппаВидОплатыВРассрочку" Тогда
				ВыбранныйВидОплаты = ТаблицаВидовОплаты.Добавить();
				ВыбранныйВидОплаты.ВидОплаты = ПредопределенноеЗначениеВидаОплаты("ПустаяСсылка");
				ВыбранныйВидОплаты.ИмяРеквизитаФормыАльтернативыСкидки = "СкидкаЗаРассрочку";
				ПолеВводаСуммы = ФормаРМК.Элементы.Найти("ГруппаОплатаВРассрочку");
			ИначеЕсли ГруппаВидаОплаты.Имя = "ГруппаВидОплатыЗачетАванса" Тогда
				ВыбранныйВидОплаты = ТаблицаВидовОплаты.Добавить();
				ВыбранныйВидОплаты.ВидОплаты = ПредопределенноеЗначениеВидаОплаты("ПустаяСсылка");
				ВыбранныйВидОплаты.ИмяРеквизитаФормыАльтернативыСкидки = "СкидкаЗаЗачетАванса";
				ПолеВводаСуммы = ФормаРМК.Элементы.Найти("ГруппаОплатаЗачетАванса");
			ИначеЕсли ГруппаВидаОплаты.Имя = "ГруппаВидОплатыБезнал" Тогда
				ВыбранныйВидОплаты = ТаблицаВидовОплаты.Добавить();
				ВыбранныйВидОплаты.ВидОплаты = ПредопределенноеЗначениеВидаОплаты("ПустаяСсылка");
				ВыбранныйВидОплаты.ИмяРеквизитаФормыАльтернативыСкидки = "СкидкаЗаБезнал";
				ПолеВводаСуммы = ФормаРМК.Элементы.Найти("ГруппаОплатаБезнал");
			ИначеЕсли ГруппаВидаОплаты.Имя = "ГруппаВидОплатыКредитом" Тогда
				ВыбранныйВидОплаты = ТаблицаВидовОплаты.Добавить();
				ВыбранныйВидОплаты.ВидОплаты = ПредопределенноеЗначениеВидаОплаты("ПустаяСсылка");
				ВыбранныйВидОплаты.ИмяРеквизитаФормыАльтернативыСкидки = "СкидкаЗаКредит";
				ПолеВводаСуммы = ФормаРМК.Элементы.Найти("ГруппаОплатаКредитом");
			ИначеЕсли ГруппаВидаОплаты.Имя = "ГруппаВидОплатыСертификатом" Тогда
				ВыбранныйВидОплаты = ТаблицаВидовОплаты.Добавить();
				ВыбранныйВидОплаты.ВидОплаты = ПредопределенноеЗначениеВидаОплаты("ПустаяСсылка");
				ВыбранныйВидОплаты.ИмяРеквизитаФормыАльтернативыСкидки = "СкидкаЗаОплатуСертификатом";
				ПолеВводаСуммы = ФормаРМК.Элементы.Найти("ГруппаОплатаСертификатом");
			ИначеЕсли ГруппаВидаОплаты.Имя = "ГруппаВидОплатыБонусы" Тогда
				ВыбранныйВидОплаты = ТаблицаВидовОплаты.Добавить();
				ВыбранныйВидОплаты.ВидОплаты = ПредопределенноеЗначениеВидаОплаты("Бонусами");
				ВыбранныйВидОплаты.ИмяРеквизитаФормыАльтернативыСкидки = "СкидкаЗаБонусы";
				ПолеВводаСуммы = ФормаРМК.Элементы.Найти("ГруппаОплатаБонусами");
			Иначе
				Продолжить;
			КонецЕсли;
			ВыбранныйВидОплаты.Используется = ПолеВводаСуммы.Видимость;
		КонецЦикла;
	КонецЕсли;
	Возврат ТаблицаВидовОплаты;
КонецФункции

Функция ПредопределенноеЗначениеВидаОплаты(ИмяЗначения) Экспорт

	Результат = Неопределено;
	ОписаниеТипа = Метаданные.ОпределяемыеТипы.ВидыОплатРМК.Тип;
	ТипВидаОплаты = ОписаниеТипа.Типы()[0];
	Попытка
		Если НРег(ИмяЗначения) = НРег("ПустаяСсылка") Тогда
			Результат = ОписаниеТипа.ПривестиЗначение(Неопределено);
		Иначе
			Результат = XMLЗначение(ТипВидаОплаты, ИмяЗначения);
		КонецЕсли;
	Исключение
		Результат = Неопределено;
	КонецПопытки;
	
	Возврат ОписаниеТипа.ПривестиЗначение(Результат);
	
КонецФункции

Функция ПолучитьПустуюТаблицуИспользуемыхОплат() Экспорт
	ТаблицаВидовОплаты = Новый ТаблицаЗначений();
	ТипВидаОплаты = Метаданные.ОпределяемыеТипы.ВидыОплатРМК.Тип;
	ТаблицаВидовОплаты.Колонки.Добавить("ВидОплаты", ТипВидаОплаты);
	ТаблицаВидовОплаты.Колонки.Добавить("Используется", Новый ОписаниеТипов("Булево"));
	ТаблицаВидовОплаты.Колонки.Добавить("ИмяРеквизитаФормыАльтернативыСкидки", Новый ОписаниеТипов("Строка"));
	Возврат ТаблицаВидовОплаты;
КонецФункции

Функция СформироватьТекстОшибкиЗацикливания(МассивУровней, ИндексПервогоВхождения, ИндексВторогоВхождения)
	
	ТекстОшибки = НСтр("ru = 'В цепочке:'");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПалитраТоваровРМК.Ссылка КАК Ссылка,
	|	ПалитраТоваровРМК.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ПалитраТоваровРМК КАК ПалитраТоваровРМК
	|ГДЕ
	|	ПалитраТоваровРМК.Ссылка В(&МассивПалитр)";
	Запрос.УстановитьПараметр("МассивПалитр", МассивУровней);
	ТаблицаПалитр = Запрос.Выполнить().Выгрузить();
	
	ПорядковыйНомер = 1;
	Пока ПорядковыйНомер <= МассивУровней.Количество() Цикл
		ТекущаяПалитра = МассивУровней[ПорядковыйНомер - 1];
		СтрокаТаблицы = ТаблицаПалитр.Найти(ТекущаяПалитра, "Ссылка");
		
		ТекстОшибки = СтрШаблон("%1%2(%3) %4,", ТекстОшибки, Символы.ПС, ПорядковыйНомер, СтрокаТаблицы.Наименование);
		ПорядковыйНомер = ПорядковыйНомер + 1;
	КонецЦикла;
	ТекстЗацикливание = НСтр("ru = 'обнаружено зацикливание палитры'");
	ТекстОшибки = СтрШаблон("%1%2%3 ""%4"" (%5, %6)", ТекстОшибки, Символы.ПС, ТекстЗацикливание,
		СтрокаТаблицы.Наименование, ИндексПервогоВхождения + 1, ИндексВторогоВхождения + 1);
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ПолучитьВложенныеПалитры(ИсходнаяПалитра)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПалитраТоваровРМКСостав.Палитра КАК Палитра
	|ИЗ
	|	Справочник.ПалитраТоваровРМК.Состав КАК ПалитраТоваровРМКСостав
	|ГДЕ
	|	ПалитраТоваровРМКСостав.Ссылка = &ИсходнаяПалитра
	|	И НЕ ПалитраТоваровРМКСостав.Палитра = ЗНАЧЕНИЕ(Справочник.ПалитраТоваровРМК.ПустаяСсылка)";
	Запрос.УстановитьПараметр("ИсходнаяПалитра", ИсходнаяПалитра);
	РезульатФункции = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Палитра");
	Возврат РезульатФункции;
	
КонецФункции

Функция НайденаЗацикленностьТекущейПалитры(ПроверяемаяПалитра, МассивУровней, ВложенныеПалитры = Неопределено)
	
	РезультатФункции = Ложь;
	
	МассивУровней.Добавить(ПроверяемаяПалитра);
	Если ВложенныеПалитры = Неопределено Тогда
		ПалитрыУровня = ПолучитьВложенныеПалитры(ПроверяемаяПалитра);
	Иначе
		ПалитрыУровня = ВложенныеПалитры;
	КонецЕсли;
	
	КоличествоПалитр = ПалитрыУровня.Количество();
	ИндексПалитры = 0;
	Пока ИндексПалитры < КоличествоПалитр И Не РезультатФункции Цикл
		ПалитраУровня = ПалитрыУровня[ИндексПалитры];
		Если Не МассивУровней.Найти(ПалитраУровня) = Неопределено Тогда
			МассивУровней.Добавить(ПалитраУровня);
			РезультатФункции = Истина;
		КонецЕсли;
		Если Не РезультатФункции Тогда
			РезультатФункции = НайденаЗацикленностьТекущейПалитры(ПалитраУровня, МассивУровней);
			Если Не РезультатФункции Тогда
				МассивУровней.Удалить(МассивУровней.Количество() - 1);
			КонецЕсли;
		КонецЕсли;
		ИндексПалитры = ИндексПалитры + 1;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ОбновитьСписокПалитрыКонтроляПродаж(ПалитраСсылка)
	
	КэшСоставаПалитры = Новый Соответствие;
	КэшСтатусаПалитры = Новый Соответствие;
	
	ЗапросКонтроляПродаж = Новый Запрос;
	ЗапросКонтроляПродаж.Текст =
	"ВЫБРАТЬ
	|	СпрКонтрольПродаж.Ссылка КАК КонтрольПродаж,
	|	СпрКонтрольПродаж.Палитра КАК Палитра,
	|	СпрКонтрольПродаж.ПалитрыКонтроляПродаж.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Палитра КАК Палитра
	|	) КАК ПалитрыКонтроляПродаж
	|ИЗ
	|	Справочник.КонтрольПродаж.ПалитрыКонтроляПродаж КАК КонтрольПродажПалитрыКонтроляПродаж
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтрольПродаж КАК СпрКонтрольПродаж
	|		ПО КонтрольПродажПалитрыКонтроляПродаж.Ссылка = СпрКонтрольПродаж.Ссылка
	|ГДЕ
	|	КонтрольПродажПалитрыКонтроляПродаж.Палитра = &Палитра";
	ЗапросКонтроляПродаж.УстановитьПараметр("Палитра", ПалитраСсылка);
	Выборка = ЗапросКонтроляПродаж.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЭлементКэшаСтатуса = КэшСтатусаПалитры.Получить(Выборка.Палитра);
		Если ЭлементКэшаСтатуса = Неопределено Тогда
			ИсходныйМассив = Новый Массив;
			ИсходныйМассив.Добавить(Выборка.Палитра);
			ПодчиненныеПалитры = ИнтерфейсРМКСлужебный.ПолучитьВложенныеПалитры(ИсходныйМассив);
			ПодчиненныеПалитры.Вставить(0, Выборка.Палитра);
			ТаблицаПалитрКонтроля = Выборка.ПалитрыКонтроляПродаж.Выгрузить();
			СоставыСовпадают = СоставыПалитрСовпадают(ПодчиненныеПалитры, ТаблицаПалитрКонтроля);
			Если Не СоставыСовпадают Тогда
				ОбновитьСписокПалитрыЭлементаКонтроляПродаж(Выборка.КонтрольПродаж, ПодчиненныеПалитры);
			КонецЕсли;
			КэшСоставаПалитры.Вставить(Выборка.Палитра, ПодчиненныеПалитры);
			КэшСтатусаПалитры.Вставить(Выборка.Палитра, СоставыСовпадают);
		ИначеЕсли Не ЭлементКэшаСтатуса Тогда
			ПодчиненныеПалитры = КэшСоставаПалитры.Получить(Выборка.Палитра);
			ОбновитьСписокПалитрыЭлементаКонтроляПродаж(Выборка.КонтрольПродаж, ПодчиненныеПалитры);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СоставыПалитрСовпадают(МассивПалитр, ТаблицаПалитрКонтроля)
	
	РезультатФункции = Истина;
	
	Если ТаблицаПалитрКонтроля.Количество() = МассивПалитр.Количество() Тогда
		
		КоличествоСтрок = ТаблицаПалитрКонтроля.Количество();
		ИндексСтроки = 0;
		Пока ИндексСтроки < КоличествоСтрок И РезультатФункции Цикл
			
			ПалитраЭлемент = МассивПалитр[ИндексСтроки];
			Если ТаблицаПалитрКонтроля.Найти(ПалитраЭлемент, "Палитра") = Неопределено Тогда
				РезультатФункции = Ложь;
			КонецЕсли;
			ИндексСтроки = ИндексСтроки + 1;
			
		КонецЦикла;
		
	Иначе
		РезультатФункции = Ложь;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ОбновитьСписокПалитрыЭлементаКонтроляПродаж(КонтрольПродажСсылка, СоставПалитры)
	
	КонтрольОбъект = КонтрольПродажСсылка.ПолучитьОбъект();
	КонтрольОбъект.ПалитрыКонтроляПродаж.Очистить();
	Для Каждого ЭлементПалитра Из СоставПалитры Цикл
		НоваяСтрока = КонтрольОбъект.ПалитрыКонтроляПродаж.Добавить();
		НоваяСтрока.Палитра = ЭлементПалитра;
	КонецЦикла;
	КонтрольОбъект.ОбменДанными.Загрузка = Истина;
	КонтрольОбъект.Записать();
	
КонецПроцедуры

Функция ПолучитьВидКонтроляПродажПроверкаВозраста18()
	
	НаименованиеВидаКонтроля = НСтр("ru = 'Проверка возраста 18 лет.'");
	ВозрастПроверки = 18;
	
	ТекстШаблонаПредупреждения = НСтр("ru = 'Покупателю уже исполнилось [Возраст] лет?
	|Дата рождения раньше [ДатаРождения]?'");
	
	ГУИДВидКонтроляПроверкаВозраста18 = Новый УникальныйИдентификатор("e8974cb1-2662-439e-a2a9-4a43a9af03a6");
	ВидКонтроляПроверкаВозраста18 = Справочники.ВидыКонтроля.ПолучитьСсылку(ГУИДВидКонтроляПроверкаВозраста18);
	Если Не Общегоназначения.СсылкаСуществует(ВидКонтроляПроверкаВозраста18) Тогда
		ВидКонтроляОбъект = Справочники.ВидыКонтроля.СоздатьЭлемент();
		ВидКонтроляОбъект.УстановитьСсылкуНового(ВидКонтроляПроверкаВозраста18);
		ВидКонтроляОбъект.Наименование = НаименованиеВидаКонтроля;
		ВидКонтроляОбъект.ТипКонтроля = Перечисления.ТипыКонтроля.ПроверкаПокупателя;
		ВидКонтроляОбъект.ТекстШаблонаПредупреждения = ТекстШаблонаПредупреждения;
		ВидКонтроляОбъект.Локальный = Истина;
		
		НовыйПараметр = ВидКонтроляОбъект.ПараметрыКонтроля.Добавить();
		НовыйПараметр.Параметр = Перечисления.ПараметрыКонтроляПродаж.Возраст;
		НовыйПараметр.Значение = ВозрастПроверки;
		
		ВидКонтроляОбъект.Записать();
	КонецЕсли;
	Возврат ВидКонтроляПроверкаВозраста18;
	
КонецФункции

Функция ПолучитьВидКонтроляПродажЗапретРучныхСкидок()
	
	НаименованиеВидаКонтроля = НСтр("ru = 'Запрет ручной скидки.'");
	
	ГУИДВидКонтроляЗапретРучныхскидок = Новый УникальныйИдентификатор("80352e2f-3051-4268-96c0-908e231e272d");
	ВидКонтроляЗапретРучныхскидок = Справочники.ВидыКонтроля.ПолучитьСсылку(ГУИДВидКонтроляЗапретРучныхскидок);
	Если Не Общегоназначения.СсылкаСуществует(ВидКонтроляЗапретРучныхскидок) Тогда
		
		ВидКонтроляОбъект = Справочники.ВидыКонтроля.СоздатьЭлемент();
		ВидКонтроляОбъект.УстановитьСсылкуНового(ВидКонтроляЗапретРучныхскидок);
		ВидКонтроляОбъект.Наименование = НаименованиеВидаКонтроля;
		ВидКонтроляОбъект.ТипКонтроля = Перечисления.ТипыКонтроля.ЗапретРучнойСкидки;
		ВидКонтроляОбъект.ТекстШаблонаПредупреждения = "";
		ВидКонтроляОбъект.Локальный = Истина;
		
		ВидКонтроляОбъект.Записать();
	КонецЕсли;
	Возврат ВидКонтроляЗапретРучныхскидок;
	
КонецФункции

Функция ПолучитьСлужебнуюПалитру(НаименованиеПалитры, ИдентификаторПалитры, ТипСлужебнойПалитры)
	
	ТипыСлужебнойПалитры = ТипыСлужебнойПалитры();
	ЦветПоУмолчанию = Новый Цвет();
	ЦветСтрокой = Общегоназначения.ЗначениеВСтрокуXML(ЦветПоУмолчанию);
	
	СлужебнаяПалитра = Справочники.ПалитраТоваровРМК.ПолучитьСсылку(ИдентификаторПалитры);
	Если Не Общегоназначения.СсылкаСуществует(СлужебнаяПалитра) Тогда
		ПалитраОбъект = ПолучитьШаблонСлужебнойПалитры(СлужебнаяПалитра, НаименованиеПалитры);
		ТаблицаНоменклатуры = Новый ТаблицаЗначений;
		СлужебныйРеквизит = Неопределено;
		Если ТипСлужебнойПалитры = ТипыСлужебнойПалитры.АлкогольнаяПродукция Тогда
			ОбщегоназначенияРМКПереопределяемый.ПолучитьНоменклатуруДляПалитрыАлкогольнаяПродукция(ТаблицаНоменклатуры,
				СлужебныйРеквизит);
			ПалитраОбъект.СлужебнаяОсобенностьУчета = СлужебныйРеквизит;
		ИначеЕсли ТипСлужебнойПалитры = ТипыСлужебнойПалитры.ТабачнаяПродукция Тогда
			ОбщегоназначенияРМКПереопределяемый.ПолучитьНоменклатуруДляПалитрыТабачнаяПродукция(ТаблицаНоменклатуры,
				СлужебныйРеквизит);
			ПалитраОбъект.СлужебнаяОсобенностьУчета = СлужебныйРеквизит;
		ИначеЕсли ТипСлужебнойПалитры = ТипыСлужебнойПалитры.АльтернативныйТабак Тогда
			ОбщегоназначенияРМКПереопределяемый.ПолучитьНоменклатуруДляПалитрыАльтернативныйТабак(ТаблицаНоменклатуры,
				СлужебныйРеквизит);
			ПалитраОбъект.СлужебнаяОсобенностьУчета = СлужебныйРеквизит;
		ИначеЕсли ТипСлужебнойПалитры = ТипыСлужебнойПалитры.ПодарочныеСертификаты Тогда
			ОбщегоназначенияРМКПереопределяемый.ПолучитьНоменклатуруДляПалитрыПодарочныеСертификаты(ТаблицаНоменклатуры,
				СлужебныйРеквизит);
			ПалитраОбъект.СлужебныйВидНоменклатуры = СлужебныйРеквизит;
		КонецЕсли;
		
		НомерСтроки = 1;
		Для Каждого СтрокаТовара Из ТаблицаНоменклатуры Цикл
			НоваяСтрока = ПалитраОбъект.Состав.Добавить();
			НоваяСтрока.ИндексПозиции = НомерСтроки;
			НоваяСтрока.ИмяЭлемента = СтрокаТовара.Наименование;
			НоваяСтрока.Номенклатура = СтрокаТовара.Номенклатура;
			НоваяСтрока.Шрифт = ПалитраОбъект.ШрифтЭлементовПодбора;
			НоваяСтрока.ЦветШрифта = ЦветСтрокой;
			НоваяСтрока.ЦветФона = ЦветСтрокой;
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		Если ПалитраОбъект.Состав.Количество() > 0 Тогда
			ПалитраОбъект.Записать();
		Иначе
			СлужебнаяПалитра = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СлужебнаяПалитра;
	
КонецФункции

Процедура ДобавитьСтрокуПалитрыВКонтрольПродаж(КонтрольПродажОбъект, СлужебнаяПалитра)
	
	Если Не СлужебнаяПалитра = Неопределено Тогда
		
		НоваяСтрока = КонтрольПродажОбъект.ПалитрыКонтроляПродаж.Добавить();
		НоваяСтрока.Палитра = СлужебнаяПалитра;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВСлужебнуюПалитруВложеннуюПалитру(ПалитраОбъект, СлужебнаяПалитра, ИндексСтроки)
	
	Если СлужебнаяПалитра = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЦветПоУмолчанию = Новый Цвет();
	ЦветСтрокой = Общегоназначения.ЗначениеВСтрокуXML(ЦветПоУмолчанию);
	
	НоваяСтрока = ПалитраОбъект.Состав.Добавить();
	НоваяСтрока.ИндексПозиции = ИндексСтроки;
	НоваяСтрока.ИмяЭлемента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СлужебнаяПалитра, "Наименование");
	НоваяСтрока.Палитра = СлужебнаяПалитра;
	НоваяСтрока.Шрифт = ПалитраОбъект.ШрифтЭлементовПодбора;
	НоваяСтрока.ЦветШрифта = ЦветСтрокой;
	НоваяСтрока.ЦветФона = ЦветСтрокой;
	
КонецПроцедуры

Функция ТипыСлужебнойПалитры()
	
	ТипыСлужебнойПалитры = Новый Структура();
	ТипыСлужебнойПалитры.Вставить("АлкогольнаяПродукция", 1);
	ТипыСлужебнойПалитры.Вставить("ТабачнаяПродукция", 2);
	ТипыСлужебнойПалитры.Вставить("АльтернативныйТабак", 3);
	ТипыСлужебнойПалитры.Вставить("ПодарочныеСертификаты", 4);
	
	Возврат ТипыСлужебнойПалитры;
	
КонецФункции

Функция ТорговыеОбъектыИдентичны(ИсходныеДанные, ПроверяемыеДанные)
	
	РезультатФункции = Истина;

	Если ИсходныеДанные.ВсеТорговыеОбъекты = ПроверяемыеДанные.ВсеТорговыеОбъекты Тогда
		Если Не ИсходныеДанные.ВсеТорговыеОбъекты Тогда
			ИсходныеТорговыеОбъекты = ИсходныеДанные.ТорговыеОбъекты;
			ПроверяемыеТорговыеОбъекты = ПроверяемыеДанные.ТорговыеОбъекты;
			Если ИсходныеТорговыеОбъекты.Количество() = ПроверяемыеТорговыеОбъекты.Количество() Тогда
				ИндексЭлемента = 0;
				Пока ИндексЭлемента < ИсходныеТорговыеОбъекты.Количество() И РезультатФункции Цикл
					ТорговыйОбъект = ИсходныеТорговыеОбъекты[ИндексЭлемента];
					Если ПроверяемыеТорговыеОбъекты.Найти(ТорговыйОбъект) = Неопределено Тогда
						РезультатФункции = Ложь;
					КонецЕсли;
					ИндексЭлемента = ИндексЭлемента + 1;
				КонецЦикла;
			Иначе
				РезультатФункции = Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		РезультатФункции = Ложь;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция СтрокиКонтроляИдентичны(ИсходныеДанные, ПроверяемыеДанные)
	
	РезультатФункции = Истина;
	
	Если ИсходныеДанные.СтрокиКонтроля.Количество() = ПроверяемыеДанные.СтрокиКонтроля.Количество() Тогда
		ИсходныеСтрокиКонтроля = ИсходныеДанные.СтрокиКонтроля.Скопировать();
		ПроверяемыеСтрокиКонтроля = ПроверяемыеДанные.СтрокиКонтроля.Скопировать();
		ИменаКолонок = Новый Массив;
		Для Каждого КолонкаКонтроля Из ИсходныеДанные.СтрокиКонтроля.Колонки Цикл
			ИменаКолонок.Добавить(КолонкаКонтроля.Имя);
		КонецЦикла;
		ИменаКолонокСтрокой = СтрСоединить(ИменаКолонок, ",");
		ИсходныеСтрокиКонтроля.Сортировать(ИменаКолонокСтрокой);
		ПроверяемыеСтрокиКонтроля.Сортировать(ИменаКолонокСтрокой);
		
		ИндексСтроки = 0;
		Пока ИндексСтроки < ИсходныеСтрокиКонтроля.Количество() И РезультатФункции Цикл
			ИсходнаяСтрока = ИсходныеСтрокиКонтроля.Получить(ИндексСтроки);
			ПроверяемаяСтрока = ПроверяемыеСтрокиКонтроля.Получить(ИндексСтроки);
			ИндексКолонки = 0;
			Пока ИндексКолонки < ИменаКолонок.Количество() И РезультатФункции Цикл
				ИмяКолонки = ИменаКолонок[ИндексКолонки];
				Если Не ИсходнаяСтрока[ИмяКолонки] = ПроверяемаяСтрока[ИмяКолонки] Тогда
					РезультатФункции = Ложь;
				КонецЕсли;
				ИндексКолонки = ИндексКолонки + 1;
			КонецЦикла;
			
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
	Иначе
		РезультатФункции = Ложь;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция УсловияИОбъектыКонтроляИдентичны(ИсходныеДанные, ПроверяемыеДанные)
	
	РезультатФункции = Ложь;
	
	Если ТорговыеОбъектыИдентичны(ИсходныеДанные, ПроверяемыеДанные)
			И СтрокиКонтроляИдентичны(ИсходныеДанные, ПроверяемыеДанные) Тогда
		РезультатФункции = Истина;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ОбъединитьКонтрольСОдинаковымиУсловиямиИТорговымиОбъектами(МассивОписанийКонтроля)
	
	КоличествоЭлементов = МассивОписанийКонтроля.Количество();
	ИндексОписания = КоличествоЭлементов - 1;
	Пока ИндексОписания > 0 Цикл
		ПроверяемоеОписание = МассивОписанийКонтроля[ИндексОписания];
		ИндексПредыдущего = ИндексОписания - 1;
		НайденАналог = Ложь;
		Пока ИндексПредыдущего >= 0 И Не НайденАналог Цикл
			
			ПредыдущееОписание = МассивОписанийКонтроля[ИндексПредыдущего];
			Если УсловияИОбъектыКонтроляИдентичны(ПроверяемоеОписание, ПредыдущееОписание) Тогда
				НайденАналог = Истина;
				Если Не (ПроверяемоеОписание.ВсяНоменклатура Или ПредыдущееОписание.ВсяНоменклатура) Тогда
					Для Каждого СтрокаОтбора Из ПроверяемоеОписание.ОписаниеОтбораНоменклатуры Цикл
						НоваяСтрокаОтбора = ПредыдущееОписание.ОписаниеОтбораНоменклатуры.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаОтбора, СтрокаОтбора);
					КонецЦикла;
				ИначеЕсли Не ПредыдущееОписание.ВсяНоменклатура Тогда
					ПредыдущееОписание.ВсяНоменклатура = Истина;
				КонецЕсли;
				МассивОписанийКонтроля.Удалить(ИндексОписания);
			КонецЕсли;
			
			ИндексПредыдущего = ИндексПредыдущего - 1;
		КонецЦикла;
		
		ИндексОписания = ИндексОписания - 1;
	КонецЦикла;

	ИндексСтроки = 0;
	Для Каждого ОписаниеКонтроля Из МассивОписанийКонтроля Цикл
		ИндексСтроки = ИндексСтроки + 1; 
		Если Не ОписаниеКонтроля.ВсяНоменклатура Тогда
			Если ОписаниеКонтроля.ОписаниеОтбораНоменклатуры.Количество() = 1 Тогда
				ОписаниеКонтроля.ГлавнаяСлужебнаяПалитра = ОписаниеКонтроля.ОписаниеОтбораНоменклатуры[0].СлужебнаяПалитра;
			Иначе
				ВложеннаяПалитра = Новый Массив;
				Для Каждого СтрокаОтбора Из ОписаниеКонтроля.ОписаниеОтбораНоменклатуры Цикл
					ВложеннаяПалитра.Добавить(СтрокаОтбора.СлужебнаяПалитра);
				КонецЦикла;
				ЕдинаяПалитра = НайтиПалитруПоСоставуВложенных(ВложеннаяПалитра);
				Если ЕдинаяПалитра = Неопределено Тогда
					ОписаниеКонтроля.ГлавнаяСлужебнаяПалитра = СоздатьОбъединеннуюПалитру(ВложеннаяПалитра, ИндексСтроки);
				Иначе
					ОписаниеКонтроля.ГлавнаяСлужебнаяПалитра = ЕдинаяПалитра;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьОбъединеннуюПалитру(ВложенныеПалитры, ИндексПалитры)
	
	НаименованиеНачало = НСтр("ru = 'Объединенная палитра запрета продаж'");
	ИндексСтрокой = Формат(ИндексПалитры, "ЧГ=");
	НаименованиеПалитры = СтрШаблон("%1 %2", НаименованиеНачало, ИндексСтрокой);
	
	ПалитраОбъект = ПолучитьШаблонСлужебнойПалитры(Неопределено, НаименованиеПалитры);
	ИндексПозиции = 0;
	Для Каждого СлужебнаяПалитра Из ВложенныеПалитры Цикл
		ИндексПозиции = ИндексПозиции + 1;
		ДобавитьВСлужебнуюПалитруВложеннуюПалитру(ПалитраОбъект, СлужебнаяПалитра, ИндексПозиции);
	КонецЦикла;
	ПалитраОбъект.Записать();
	Возврат ПалитраОбъект.Ссылка;
	
КонецФункции

Функция НайтиПалитруПоСоставуВложенных(ВложеннаяПалитра)
	
	ЕдинаяПалитра = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПалитраТоваровРМК.Ссылка КАК ПалитраТоваров,
	|	КОЛИЧЕСТВО(ПалитраТоваровРМКСостав.НомерСтроки) КАК КоличествоСтрок
	|ПОМЕСТИТЬ втПалитраКоличествоСтрок
	|ИЗ
	|	Справочник.ПалитраТоваровРМК КАК ПалитраТоваровРМК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПалитраТоваровРМК.Состав КАК ПалитраТоваровРМКСостав
	|		ПО ПалитраТоваровРМК.Ссылка = ПалитраТоваровРМКСостав.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПалитраТоваровРМК.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ПалитраТоваровРМКСостав.НомерСтроки) = &КоличествоВложенных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПалитраТоваровРМК.Ссылка КАК ПалитраТоваров,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПалитраТоваровРМКСостав.Палитра) КАК КоличествоСтрок
	|ПОМЕСТИТЬ втПалитраКоличествоРазличных
	|ИЗ
	|	Справочник.ПалитраТоваровРМК КАК ПалитраТоваровРМК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПалитраТоваровРМК.Состав КАК ПалитраТоваровРМКСостав
	|		ПО ПалитраТоваровРМК.Ссылка = ПалитраТоваровРМКСостав.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПалитраТоваровРМК.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПалитраТоваровРМКСостав.Палитра) = &КоличествоВложенных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПалитраТоваровРМК.Ссылка КАК ПалитраТоваров,
	|	КОЛИЧЕСТВО(ПалитраТоваровРМКСостав.Палитра) КАК КоличествоСтрок
	|ПОМЕСТИТЬ втПалитраКоличествоПалитр
	|ИЗ
	|	Справочник.ПалитраТоваровРМК КАК ПалитраТоваровРМК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПалитраТоваровРМК.Состав КАК ПалитраТоваровРМКСостав
	|		ПО ПалитраТоваровРМК.Ссылка = ПалитраТоваровРМКСостав.Ссылка
	|ГДЕ
	|	ПалитраТоваровРМКСостав.Палитра В(&ВложеннаяПалитра)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПалитраТоваровРМК.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ПалитраТоваровРМКСостав.Палитра) = &КоличествоВложенных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПалитраКоличествоСтрок.ПалитраТоваров КАК ПалитраТоваров
	|ИЗ
	|	втПалитраКоличествоСтрок КАК втПалитраКоличествоСтрок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПалитраКоличествоРазличных КАК втПалитраКоличествоРазличных
	|		ПО втПалитраКоличествоСтрок.ПалитраТоваров = втПалитраКоличествоРазличных.ПалитраТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПалитраКоличествоПалитр КАК втПалитраКоличествоПалитр
	|		ПО втПалитраКоличествоСтрок.ПалитраТоваров = втПалитраКоличествоПалитр.ПалитраТоваров";
	
	Запрос.УстановитьПараметр("ВложеннаяПалитра", ВложеннаяПалитра);
	Запрос.УстановитьПараметр("КоличествоВложенных", ВложеннаяПалитра.Количество());
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЕдинаяПалитра = Выборка.ПалитраТоваров;
	КонецЕсли;
	
	Возврат ЕдинаяПалитра;
	
КонецФункции

Процедура СформироватьЗапретПродаж(ОписаниеКонтроля, ВидКонтроляЗапретПродаж, НомерКонтроля)
	
	НомерСтрокой = Формат(НомерКонтроля, "ЧГ=");
	НачалоНаименования = ОбщаяЧастьНаименованияСлужебныйЗапретПродаж();
	НаименованиеКонтроля = СтрШаблон("%1 %2", НачалоНаименования, НомерСтрокой);
	
	Описание = "";
	ИмяГруппыТоваров = "";
	ЗаполнитьПояснительныеРеквизитыКонтроляПродаж(ОписаниеКонтроля, Описание, ИмяГруппыТоваров);
	
	КонтрольОбъект = Справочники.КонтрольПродаж.СоздатьЭлемент();
	КонтрольОбъект.Наименование = НаименованиеКонтроля;
	КонтрольОбъект.Локальный = Истина;
	КонтрольОбъект.Использование = Истина;
	КонтрольОбъект.Описание = Описание;
	
	ЗаполнитьПалитруКонтроляПродаж(КонтрольОбъект, ОписаниеКонтроля);
	ЗаполнитьТорговыеОбъектыКонтроляПродаж(КонтрольОбъект, ОписаниеКонтроля);
	КонтрольОбъект.НаименованиеГруппыТоваров = ИмяГруппыТоваров;
	
	ЗаполнитьСтрокиКонтроляПродаж(КонтрольОбъект, ОписаниеКонтроля, ВидКонтроляЗапретПродаж);
	
	КонтрольОбъект.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьТорговыеОбъектыКонтроляПродаж(КонтрольПродажОбъект, ОписаниеКонтроля)
	
	Если ОписаниеКонтроля.ВсеТорговыеОбъекты Тогда
		КонтрольПродажОбъект.ДляВсехТорговыхОбъектов = Истина;
	Иначе
		Для Каждого ТорговыйОбъект Из ОписаниеКонтроля.ТорговыеОбъекты Цикл
			Если ЗначениеЗаполнено(ТорговыйОбъект) Тогда
				СтрокаТорговогоОбъекта = КонтрольПродажОбъект.ТорговыеОбъекты.Добавить();
				СтрокаТорговогоОбъекта.ТорговыйОбъект = ТорговыйОбъект;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокиКонтроляПродаж(КонтрольПродажОбъект, ОписаниеКонтроля, ВидКонтроляЗапретПродаж)
	
	Для Каждого СтрокаКонтроля Из ОписаниеКонтроля.СтрокиКонтроля Цикл
		НоваяСтрокаКонтроля = КонтрольПродажОбъект.КонтрольПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаКонтроля, СтрокаКонтроля);
		НоваяСтрокаКонтроля.ВидКонтроля = ВидКонтроляЗапретПродаж;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПалитруКонтроляПродаж(КонтрольПродажОбъект, ОписаниеКонтроля)
	
	Если ОписаниеКонтроля.ВсяНоменклатура Тогда
		КонтрольПродажОбъект.ДляВсейНоменклатуры = Истина;
	Иначе
		КонтрольПродажОбъект.Палитра = ОписаниеКонтроля.ГлавнаяСлужебнаяПалитра;
		ДобавитьСтрокуПалитрыВКонтрольПродаж(КонтрольПродажОбъект, ОписаниеКонтроля.ГлавнаяСлужебнаяПалитра);
		Если ОписаниеКонтроля.ОписаниеОтбораНоменклатуры.Количество() > 1 Тогда
			Для Каждого СтрокаОтбора Из ОписаниеКонтроля.ОписаниеОтбораНоменклатуры Цикл
				ДобавитьСтрокуПалитрыВКонтрольПродаж(КонтрольПродажОбъект, СтрокаОтбора.СлужебнаяПалитра);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПояснительныеРеквизитыКонтроляПродаж(ОписаниеКонтроля, Описание, ИмяГруппыТоваров)
	
	Если ОписаниеКонтроля.ВсяНоменклатура Тогда
		Описание = НСтр("ru = 'Запрет продаж всей номенклатуры'");
		ИмяГруппыТоваров = НСтр("ru = 'вся номенклатура'");
	ИначеЕсли ОписаниеКонтроля.ОписаниеОтбораНоменклатуры.Количество() > 1 Тогда
		ВложенныеПалитры = Новый Массив;
		Для Каждого СтрокаОтбора Из ОписаниеКонтроля.ОписаниеОтбораНоменклатуры Цикл
			ВложенныеПалитры.Добавить(СтрокаОтбора.СлужебнаяПалитра);
		КонецЦикла;
		СоответствиеГруппТоваров = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВложенныеПалитры, "Наименование");
		ИмяГруппыТоваров = "";
		Для Каждого СоответствиеПалитры Из СоответствиеГруппТоваров Цикл
			Если ИмяГруппыТоваров = "" Тогда
				ИмяГруппыТоваров = СоответствиеПалитры.Значение;
			Иначе
				ИмяГруппыТоваров = СтрШаблон("%1, %2", ИмяГруппыТоваров, СоответствиеПалитры.Значение);
			КонецЕсли;
		КонецЦикла;
		Описание = СтрШаблон(НСтр("ru = 'Запрет продаж группы товаров ""%1""'"), ИмяГруппыТоваров);
	Иначе
		ИмяГруппыТоваров
			= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписаниеКонтроля.ГлавнаяСлужебнаяПалитра, "Наименование");
		Описание = СтрШаблон(НСтр("ru = 'Запрет продаж группы товаров ""%1""'"), ИмяГруппыТоваров);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИдентичныйЗапретПродаж(ОписаниеКонтроля, СлужебныеЗапретыПродаж)
	
	РезультатФункции = Неопределено;
	
	КоличествоСлужебныхЗапретов = СлужебныеЗапретыПродаж.Количество();
	ИндексЭлемента = 0;
	Пока ИндексЭлемента < КоличествоСлужебныхЗапретов И РезультатФункции = Неопределено Цикл
		СтрокаСлужебногоЗапрета = СлужебныеЗапретыПродаж.Получить(ИндексЭлемента);
		Если УсловияИОбъектыКонтроляИдентичны(ОписаниеКонтроля, СтрокаСлужебногоЗапрета) Тогда
			РезультатФункции = СтрокаСлужебногоЗапрета.КонтрольПродаж;
		КонецЕсли;
		ИндексЭлемента = ИндексЭлемента + 1;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура СоздатьОбновитьСлужебныйЗапретПродаж(ОписаниеКонтроля, ВидКонтроляЗапретПродаж, НомерКонтроля,
		СлужебныеЗапретыПродаж)

	Перем КонтрольПродажОбъект;
		
	Описание = "";
	ИмяГруппыТоваров = "";
	ЗаполнитьПояснительныеРеквизитыКонтроляПродаж(ОписаниеКонтроля, Описание, ИмяГруппыТоваров);
	
	КонтрольПродажЗапрета = ПолучитьИдентичныйЗапретПродаж(ОписаниеКонтроля, СлужебныеЗапретыПродаж);
	Если КонтрольПродажЗапрета = Неопределено Тогда
		НомерСтрокой = Формат(НомерКонтроля, "ЧГ=");
		НачалоНаименования = ОбщаяЧастьНаименованияСлужебныйЗапретПродаж();
		НаименованиеКонтроля = СтрШаблон("%1 %2", НачалоНаименования, НомерСтрокой);
		
		КонтрольПродажОбъект = Справочники.КонтрольПродаж.СоздатьЭлемент();
		КонтрольПродажОбъект.Наименование = НаименованиеКонтроля;
		КонтрольПродажОбъект.Локальный = Истина;
		ЗаполнитьТорговыеОбъектыКонтроляПродаж(КонтрольПродажОбъект, ОписаниеКонтроля);
		ЗаполнитьСтрокиКонтроляПродаж(КонтрольПродажОбъект, ОписаниеКонтроля, ВидКонтроляЗапретПродаж);
		
		НомерКонтроля = НомерКонтроля + 1;
	Иначе
		КонтрольПродажОбъект = КонтрольПродажЗапрета.ПолучитьОбъект();
	КонецЕсли;
	КонтрольПродажОбъект.Использование = Истина;
	КонтрольПродажОбъект.Описание = Описание;
	КонтрольПродажОбъект.НаименованиеГруппыТоваров = ИмяГруппыТоваров;
	ЗаполнитьПалитруКонтроляПродаж(КонтрольПродажОбъект, ОписаниеКонтроля);
	КонтрольПродажОбъект.Записать();
	
КонецПроцедуры

Функция ОбщаяЧастьНаименованияСлужебныйЗапретПродаж()
	
	Возврат НСтр("ru = 'Служебный запрет продаж'");
	
КонецФункции

Процедура ОбновитьДанныеКонтроляПродаж(РезультатОбновления, ВнешниеДанныеКонтроляПродаж, ТорговыйОбъект)
	
	Если ВнешниеДанныеКонтроляПродаж.Success Тогда
		Попытка
			СоздатьОбновитьВидыКонтроляПродаж(ВнешниеДанныеКонтроляПродаж.RestrictionKinds);
			СоздатьОбновитьПалитрыКонтроляПродаж(ВнешниеДанныеКонтроляПродаж.GoodsSets);
			СоздатьОбновитьКонтрольПродаж(ВнешниеДанныеКонтроляПродаж.TradeRestrictions, ТорговыйОбъект);
			
			РезультатОбновления.ЗапретыПродажУспешноЗагружены = Истина;
		Исключение
			
			ОбщаяИнформацияОбОшибке = НСтр("ru = 'Ошибка при обновлении контроля продаж.'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ОбщаяИнформацияОбОшибке,
					УровеньЖурналаРегистрации.Ошибка, , ,
					ПодробноеПредставлениеОшибки);
			
		КонецПопытки;
	Иначе
		РезультатОбновления.КомментарийОбновленияЗапретов = ВнешниеДанныеКонтроляПродаж.ErrorText;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьОбновитьВидыКонтроляПродаж(ОписаниеВидовКонтроля)
	
	УчетТорговыхОбъектов = Истина;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакУчетаТорговыхОбъектовКонтроляПродаж(УчетТорговыхОбъектов);
	Для Каждого ОписаниеЭлемента Из ОписаниеВидовКонтроля Цикл
		
		ВидКонтроляОбъект = ПолучитьВидКонтроляПродаж(ОписаниеЭлемента);
		Если Не ВидКонтроляОбъект = Неопределено Тогда
			ВидКонтроляМодифицирован = ВидКонтроляОбъект.ЭтоНовый();
			
			ОбновитьЗначениеРеквизита(ВидКонтроляОбъект.Наименование, ОписаниеЭлемента.Name, ВидКонтроляМодифицирован);
			ТипКонтроляЗначение = Перечисления.ТипыКонтроля.ПустаяСсылка();
			Если Не ОписаниеЭлемента.RestrictionTypeName = "" Тогда
				ТипКонтроляЗначение = Перечисления.ТипыКонтроля[ОписаниеЭлемента.RestrictionTypeName];
			КонецЕсли;
			ОбновитьЗначениеРеквизита(ВидКонтроляОбъект.ТипКонтроля, ТипКонтроляЗначение, ВидКонтроляМодифицирован);
			ОбновитьЗначениеРеквизита(ВидКонтроляОбъект.ТекстШаблонаПредупреждения,
				ОписаниеЭлемента.PatternTextForUser, ВидКонтроляМодифицирован);
			ОбновитьЗначениеРеквизита(ВидКонтроляОбъект.Локальный, Ложь, ВидКонтроляМодифицирован);
			ОбновитьПараметрыВидаКонтроля(ВидКонтроляОбъект, ОписаниеЭлемента.Parameters, ВидКонтроляМодифицирован);
			
			Если Не УчетТорговыхОбъектов И ТипКонтроляЗначение = Перечисления.ТипыКонтроля.КонтрольОстатков Тогда
				ВидКонтроляМодифицирован = Ложь;
			КонецЕсли;
			
			Если ВидКонтроляМодифицирован Тогда
				ВидКонтроляОбъект.ОбменДанными.Загрузка = Истина;
				ВидКонтроляОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьОбновитьПалитрыКонтроляПродаж(ОписаниеПалитрыТоваров)

	ШрифтПалитрыСтрокой = ОбщегоНазначения.ЗначениеВСтрокуXML(ШрифтыСтиля.ШрифтОбычныйПолужирный12РМК);
	Для Каждого ОписаниеЭлемента Из ОписаниеПалитрыТоваров Цикл
		ПалитраОбъект = ПолучитьПалитруОбъект(ОписаниеЭлемента, ШрифтПалитрыСтрокой);
		ПалитраМодифицирована = ПалитраОбъект.ЭтоНовый();
		
		ОбновитьЗначениеРеквизита(ПалитраОбъект.Наименование, ОписаниеЭлемента.Name, ПалитраМодифицирована);
		ОбновитьЗначениеРеквизита(ПалитраОбъект.КоличествоЭлементовВРяду,
			ОписаниеЭлемента.NumberOfElementsInRow, ПалитраМодифицирована);
		ОбновитьЗначениеРеквизита(ПалитраОбъект.ВысотаЭлемента, ОписаниеЭлемента.ElementHeight, ПалитраМодифицирована);
		ОбновитьЗначениеРеквизита(ПалитраОбъект.КоличествоРядов, ОписаниеЭлемента.NumberOfRows, ПалитраМодифицирована);
		ОбновитьЗначениеРеквизита(ПалитраОбъект.Служебная, ОписаниеЭлемента.Service, ПалитраМодифицирована);
		
		ОбновитьСоставПалитры(ПалитраОбъект, ОписаниеЭлемента.GoodsContent, ШрифтПалитрыСтрокой, ПалитраМодифицирована);
		
		Если ПалитраМодифицирована Тогда
			ПалитраОбъект.ОбменДанными.Загрузка = Истина;
			ПалитраОбъект.ДополнительныеСвойства.Вставить("ВложенныеПалитрыИзменены", Ложь);
			ПалитраОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция КонтрольПродажАктуален(ОписаниеЭлемента, ИдентификаторМагазинаСтрокой)
	
	ВключеноИспользование = ОписаниеЭлемента.Active И Не ОписаниеЭлемента.DeletionMark;
	Возврат (ВключеноИспользование И (ОписаниеЭлемента.AllStores
		Или ОписаниеЭлемента.StoreRef = ИдентификаторМагазинаСтрокой));
	
КонецФункции

Процедура СоздатьОбновитьКонтрольПродаж(ОписаниеКонтроляПродаж, ТорговыйОбъект)
	
	УчетТорговыхОбъектов = Истина;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПризнакУчетаТорговыхОбъектовКонтроляПродаж(УчетТорговыхОбъектов);
	ИдентификаторМагазинаСтрокой = XMLСтрока(ТорговыйОбъект);
	
	Для Каждого ОписаниеЭлемента Из ОписаниеКонтроляПродаж Цикл
		КонтрольПродажОбъект = Неопределено;
		КонтрольПродажГУИД = Новый УникальныйИдентификатор(ОписаниеЭлемента.Ref);
		КонтрольПродажСсылка = Справочники.КонтрольПродаж.ПолучитьСсылку(КонтрольПродажГУИД);
		КонтрольАктуален = КонтрольПродажАктуален(ОписаниеЭлемента, ИдентификаторМагазинаСтрокой);
		Если ОбщегоНазначения.СсылкаСуществует(КонтрольПродажСсылка) Тогда
			КонтрольПродажОбъект = КонтрольПродажСсылка.ПолучитьОбъект();
		ИначеЕсли КонтрольАктуален Тогда
			КонтрольПродажОбъект = Справочники.КонтрольПродаж.СоздатьЭлемент();
			КонтрольПродажОбъект.УстановитьСсылкуНового(КонтрольПродажСсылка);
			КонтрольПродажОбъект.ВключенВРМК = Истина;
			КонтрольПродажОбъект.ДляВсехТорговыхОбъектов = ?(УчетТорговыхОбъектов, ОписаниеЭлемента.AllStores, Ложь);
		КонецЕсли;
		Если Не КонтрольПродажОбъект = Неопределено Тогда
			ЗаполнитьИСохранитьКонтрольПродажВнешнимиДанными(КонтрольПродажОбъект, ОписаниеЭлемента, ТорговыйОбъект,
				КонтрольАктуален, УчетТорговыхОбъектов);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИСохранитьКонтрольПродажВнешнимиДанными(КонтрольПродажОбъект, ОписаниеЭлемента,
		ТорговыйОбъект, КонтрольАктуален, УчетТорговыхОбъектов)
		
	КонтрольМодифицирован = КонтрольПродажОбъект.ЭтоНовый();
	ОбновитьЗначениеРеквизита(КонтрольПродажОбъект.Локальный, Ложь, КонтрольМодифицирован);
	НовоеЗначениеИспользования = ?(Не (КонтрольАктуален Или УчетТорговыхОбъектов), Ложь, ОписаниеЭлемента.Active);
	ОбновитьЗначениеРеквизита(КонтрольПродажОбъект.Использование, НовоеЗначениеИспользования, КонтрольМодифицирован);
	ОбновитьЗначениеРеквизита(КонтрольПродажОбъект.ПометкаУдаления,
		ОписаниеЭлемента.DeletionMark, КонтрольМодифицирован);
	ОбновитьЗначениеРеквизита(КонтрольПродажОбъект.Наименование, ОписаниеЭлемента.Name, КонтрольМодифицирован);
		
	Если УчетТорговыхОбъектов Тогда
		ОбновитьЗначениеРеквизита(КонтрольПродажОбъект.ДляВсехТорговыхОбъектов,
			ОписаниеЭлемента.AllStores, КонтрольМодифицирован);
		
		Если Не ОписаниеЭлемента.AllStores Тогда
			Если КонтрольАктуален Тогда
				ДобавитьТорговыйОбъектВКонтрольПродаж(КонтрольПродажОбъект, ТорговыйОбъект, КонтрольМодифицирован);
			ИначеЕсли ОписаниеЭлемента.StoreRef = "" Тогда
				УдалитьТорговыйОбъектВКонтролеПродаж(КонтрольПродажОбъект, ТорговыйОбъект, КонтрольМодифицирован);
			КонецЕсли;
		ИначеЕсли КонтрольПродажОбъект.ТорговыеОбъекты.Количество() > 0 Тогда
			КонтрольПродажОбъект.ТорговыеОбъекты.Очистить();
			КонтрольМодифицирован = Истина;
		КонецЕсли;
	КонецЕсли;
	Если КонтрольАктуален Тогда
		ПалитраКонтроля = Справочники.ПалитраТоваровРМК.ПустаяСсылка();
		Если Не ОписаниеЭлемента.GoodsSetRef = "" Тогда
			ПалитраГУИД = Новый УникальныйИдентификатор(ОписаниеЭлемента.GoodsSetRef);
			ПалитраКонтроля = Справочники.ПалитраТоваровРМК.ПолучитьСсылку(ПалитраГУИД);
		КонецЕсли;
			
		ОбновитьЗначениеРеквизита(КонтрольПродажОбъект.Описание, ОписаниеЭлемента.Description, КонтрольМодифицирован);
		ОбновитьЗначениеРеквизита(КонтрольПродажОбъект.ДляВсейНоменклатуры, ОписаниеЭлемента.AllGoods,
			КонтрольМодифицирован);
		ОбновитьЗначениеРеквизита(КонтрольПродажОбъект.Палитра, ПалитраКонтроля, КонтрольМодифицирован);
		ОбновитьЗначениеРеквизита(КонтрольПродажОбъект.НаименованиеГруппыТоваров, ОписаниеЭлемента.GoodsGroupDescription,
			КонтрольМодифицирован);
		
		ОбновитьПалитрыКонтроляПродаж(КонтрольПродажОбъект, ОписаниеЭлемента.IncludedGoodsSets, КонтрольМодифицирован);
		ОбновитьНоменклатуруКонтроляПродаж(КонтрольПродажОбъект, ОписаниеЭлемента.IncludedGoods, КонтрольМодифицирован);
		ОбновитьСтрокиКонтроляПродаж(КонтрольПродажОбъект, ОписаниеЭлемента.ControlElements, КонтрольМодифицирован);
	КонецЕсли;
	
	Если КонтрольПродажОбъект.ЭтоНовый() И КонтрольПродажОбъект.КонтрольПродаж.Количество() = 0 Тогда
		КонтрольМодифицирован = Ложь;
	КонецЕсли;
	
	Если КонтрольМодифицирован Тогда
		КонтрольПродажОбъект.ОбменДанными.Загрузка = Истина;
		КонтрольПродажОбъект.Записать();
	КонецЕсли;
		
КонецПроцедуры

Процедура ДобавитьТорговыйОбъектВКонтрольПродаж(КонтрольПродажОбъект, ТорговыйОбъект, КонтрольМодифицирован)
	
	СтрокаТорговогоОбъекта = КонтрольПродажОбъект.ТорговыеОбъекты.Найти(ТорговыйОбъект, "ТорговыйОбъект");
	Если СтрокаТорговогоОбъекта = Неопределено Тогда
		СтрокаТорговогоОбъекта = КонтрольПродажОбъект.ТорговыеОбъекты.Добавить();
		СтрокаТорговогоОбъекта.ТорговыйОбъект = ТорговыйОбъект;
		КонтрольМодифицирован = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьТорговыйОбъектВКонтролеПродаж(КонтрольПродажОбъект, ТорговыйОбъект, КонтрольМодифицирован)
	
	СтрокаТорговогоОбъекта = КонтрольПродажОбъект.ТорговыеОбъекты.Найти(ТорговыйОбъект, "ТорговыйОбъект");
	Если Не СтрокаТорговогоОбъекта = Неопределено Тогда
		КонтрольПродажОбъект.ТорговыеОбъекты.Удалить(СтрокаТорговогоОбъекта);
		КонтрольМодифицирован = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПалитруОбъект(ОписаниеЭлемента, ШрифтПалитрыСтрокой)
	
	РезультатФункции = Неопределено;
	УникальныйИдентификаторПалитры = Новый УникальныйИдентификатор(ОписаниеЭлемента.Ref);
	ПалитраСсылка = Справочники.ПалитраТоваровРМК.ПолучитьСсылку(УникальныйИдентификаторПалитры);
	Если ОбщегоНазначения.СсылкаСуществует(ПалитраСсылка) Тогда
		РезультатФункции = ПалитраСсылка.ПолучитьОбъект();
	Иначе
		РезультатФункции = Справочники.ПалитраТоваровРМК.СоздатьЭлемент();
		РезультатФункции.УстановитьСсылкуНового(ПалитраСсылка);
		РезультатФункции.ШрифтЭлементовПодбора = ШрифтПалитрыСтрокой;
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

Функция ПолучитьВидКонтроляПродаж(ОписаниеЭлемента)
	
	РезультатФункции = Неопределено;
	ВидКонтроляСсылка = Справочники.ВидыКонтроля.ПустаяСсылка();
	Если ОписаниеЭлемента.PredefinedName = "" Тогда
		УникальныйИдентификаторВидаКонтроля = Новый УникальныйИдентификатор(ОписаниеЭлемента.Ref);
		ВидКонтроляСсылка = Справочники.ВидыКонтроля.ПолучитьСсылку(УникальныйИдентификаторВидаКонтроля);
	Иначе
		ВидКонтроляСсылка = Справочники.ВидыКонтроля[ОписаниеЭлемента.PredefinedName];
	КонецЕсли;
	Если ОбщегоНазначения.СсылкаСуществует(ВидКонтроляСсылка) Тогда
		РезультатФункции = ВидКонтроляСсылка.ПолучитьОбъект();
	ИначеЕсли ОписаниеЭлемента.PredefinedName = "" Тогда
		РезультатФункции = Справочники.ВидыКонтроля.СоздатьЭлемент();
		РезультатФункции.УстановитьСсылкуНового(ВидКонтроляСсылка);
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

Функция СтрокиТаблицИдентичны(ИсходнаяСтрока, СтрокаСравнения, КолонкиСравнения)
	
	РезультатФункции = Истина;
	
	ИндексКолонки = 0;
	Пока ИндексКолонки < КолонкиСравнения.Количество() И РезультатФункции Цикл
		ИмяКолонки = КолонкиСравнения.Получить(ИндексКолонки);
		Если Не ИсходнаяСтрока[ИмяКолонки] = СтрокаСравнения[ИмяКолонки] Тогда
			РезультатФункции = Ложь;
		КонецЕсли;
		ИндексКолонки = ИндексКолонки + 1;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ТаблицыИдентичны(ИсходнаяТаблица, ТаблицаДляСравнения, ИменаКолонок)
	
	РезультатФункции = Истина;
	
	Если ИсходнаяТаблица.Количество() = ТаблицаДляСравнения.Количество() Тогда
		МассивКолонок = СтрРазделить(ИменаКолонок, ",", Ложь);
		
		КоличествоСтрок = ИсходнаяТаблица.Количество();
		ИндексСтроки = 0;
		Пока ИндексСтроки < КоличествоСтрок И РезультатФункции Цикл
			СтрокаИсходнойСтроки = ИсходнаяТаблица.Получить(ИндексСтроки);
			СтрокаСравнения = ТаблицаДляСравнения.Получить(ИндексСтроки);
			РезультатФункции = СтрокиТаблицИдентичны(СтрокаИсходнойСтроки, СтрокаСравнения, МассивКолонок);
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
	Иначе
		РезультатФункции = Ложь;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ОпределитьПредставлениеЦвета(СтрокаИсточника, ЦветаФонаСтрокой)
	
	ПредставлениеЦвета = "";
	Если СтрокаИсточника.ЭтоКатегория Тогда
		Если Не (ЗначениеЗаполнено(СтрокаИсточника.Номенклатура) Или ЗначениеЗаполнено(СтрокаИсточника.Палитра)) Тогда
			ПредставлениеЦвета = ЦветаФонаСтрокой.ЦветПапки;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(СтрокаИсточника.Номенклатура) Тогда
		Если ЗначениеЗаполнено(СтрокаИсточника.ВидМодификатора) Тогда
			ПредставлениеЦвета = ЦветаФонаСтрокой.ЦветМодификатора;
		Иначе
			ПредставлениеЦвета = ЦветаФонаСтрокой.ЦветПозиции;
		КонецЕсли;
	КонецЕсли;
	Возврат ПредставлениеЦвета;
	
КонецФункции

Процедура ОбновитьСоставПалитры(ПалитраОбъект, КоллекцияСтрок, ШрифтПалитрыСтрокой, ПризнакМодифицированности)
	
	ЦветПоУмолчаниюСтрокой = ОбщегоНазначения.ЗначениеВСтрокуXML(Новый Цвет());
	ЦветаФонаСтрокой = Новый Структура();
	ЦветаФонаСтрокой.Вставить("ЦветПапки", ОбщегоНазначения.ЗначениеВСтрокуXML(ЦветаСтиля.ЦветПапкиКнопкиРМК));
	ЦветаФонаСтрокой.Вставить("ЦветМодификатора", ОбщегоНазначения.ЗначениеВСтрокуXML(ЦветаСтиля.ЦветЗеленойКнопкиРМК));
	ЦветаФонаСтрокой.Вставить("ЦветПозиции", ОбщегоНазначения.ЗначениеВСтрокуXML(ЦветаСтиля.ЦветАктивнойКнопкиРМК));
	ВходнаяТаблица = СформироватьТаблицуСсставаПалитры(КоллекцияСтрок);
	СоставПалитры = ПалитраОбъект.Состав;
	ИсходноеКоличествоСтрок = СоставПалитры.Количество();
	МассивНайденныхСтрок = Новый Массив;
	СимволПереноса = "
	|";
	ИменаКолонокПоиска = "ЭтоКатегория,НомерКатегории,НомерКатегорииРазмещения,ИндексПозиции,ИмяЭлемента,Номенклатура,
		|Характеристика,ИмеетсяВложенность,ВидМодификатора,Упаковка,Палитра";
	ИменаКолонокПоиска = СтрЗаменить(ИменаКолонокПоиска, СимволПереноса, "");
	ИменаКолонокСравнения = "ЗаголовокЭлемента,ХарактеристикиИспользуются,СкрыватьОстаток";
	ЕолонкиПоиска = СтрРазделить(ИменаКолонокПоиска, ",", Ложь);
	КолонкиСравнения = СтрРазделить(ИменаКолонокСравнения, ",", Ложь);
	Для Каждого СтрокаИсточника Из ВходнаяТаблица Цикл
		СтрокаДобавлена = Ложь;
		ТекущаяСтрокаСостава = ПолучитьТекущуюСтрокуСостава(ИсходноеКоличествоСтрок, СоставПалитры,
			СтрокаИсточника, ЕолонкиПоиска);
		Если ТекущаяСтрокаСостава = Неопределено Тогда
			ТекущаяСтрокаСостава = СоставПалитры.Добавить();
			ТекущаяСтрокаСостава.Шрифт = ШрифтПалитрыСтрокой;
			ТекущаяСтрокаСостава.ЦветШрифта = ЦветПоУмолчаниюСтрокой;
			ТекущаяСтрокаСостава.ЦветФона = ОпределитьПредставлениеЦвета(СтрокаИсточника, ЦветаФонаСтрокой);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрокаСостава, СтрокаИсточника, ИменаКолонокПоиска);
			СтрокаДобавлена = Истина;
		Иначе
			ИндексНайденнойСтроки = СоставПалитры.Индекс(ТекущаяСтрокаСостава);
			МассивНайденныхСтрок.Добавить(ИндексНайденнойСтроки);
		КонецЕсли;
		Если СтрокаДобавлена
				Или Не СтрокиТаблицИдентичны(СтрокаИсточника, ТекущаяСтрокаСостава, КолонкиСравнения) Тогда
			
			ЗаполнитьЗначенияСвойств(ТекущаяСтрокаСостава, СтрокаИсточника, ИменаКолонокСравнения);
			ПризнакМодифицированности = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	ИндексОбхода = ИсходноеКоличествоСтрок - 1;
	Пока ИндексОбхода >= 0 Цикл
		Если МассивНайденныхСтрок.Найти(ИндексОбхода) = Неопределено Тогда
			СоставПалитры.Удалить(ИндексОбхода);
		КонецЕсли;
		ИндексОбхода = ИндексОбхода - 1;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТекущуюСтрокуСостава(ИсходноеКоличествоСтрок, СоставПалитры, СтрокаИсточника, ЕолонкиПоиска)
	
	РезультатФункции = Неопределено;
	
	ИндексСтроки = 0;
	Пока ИндексСтроки < ИсходноеКоличествоСтрок И РезультатФункции = Неопределено Цикл
		СтрокаПалитры = СоставПалитры.Получить(ИндексСтроки);
		Если СтрокиТаблицИдентичны(СтрокаПалитры, СтрокаИсточника, ЕолонкиПоиска) Тогда
			РезультатФункции = СтрокаПалитры;
		КонецЕсли;
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция СформироватьТаблицуВложенныхПалитрКонтроля(КоллекцияСтрок, ИменаКолонок)
	
	ТаблицаПалитры = Справочники.КонтрольПродаж.ПустаяСсылка().ПалитрыКонтроляПродаж.ВыгрузитьКолонки(ИменаКолонок);
	Для Каждого ИдентификаторПалитрыСтрокой Из КоллекцияСтрок Цикл
		Если Не СокрЛП(ИдентификаторПалитрыСтрокой) = "" Тогда
			ПалитраГУИД = Новый УникальныйИдентификатор(ИдентификаторПалитрыСтрокой);
			НоваяСтрока = ТаблицаПалитры.Добавить();
			НоваяСтрока.Палитра = Справочники.ПалитраТоваровРМК.ПолучитьСсылку(ПалитраГУИД);
		КонецЕсли;
	КонецЦикла;
	Возврат ТаблицаПалитры;
	
КонецФункции

Функция СформироватьТаблицуНоменклатурыКонтроля(КоллекцияСтрок, ИменаКолонок)
	
	ТаблицаНоменклатуры = Справочники.КонтрольПродаж.ПустаяСсылка().Номенклатура.ВыгрузитьКолонки(ИменаКолонок);
	Для Каждого ИдентификаторНоменклатурыСтрокой Из КоллекцияСтрок Цикл
		НоменклатураГУИД = Новый УникальныйИдентификатор(ИдентификаторНоменклатурыСтрокой);
		НоменклатураКонтроля = Неопределено;
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьНоменклатуруПоУникальномуИдентификатору(НоменклатураГУИД,
			НоменклатураКонтроля);
		НоваяСтрока = ТаблицаНоменклатуры.Добавить();
		НоваяСтрока.Номенклатура = НоменклатураКонтроля;
	КонецЦикла;
	Возврат ТаблицаНоменклатуры;
	
КонецФункции

Функция ПолучитьВидКонтроляПоОписанию(СтрокаКонтроля)
	
	ВидКонтроляСсылка = Справочники.ВидыКонтроля.ПустаяСсылка();
	Если Не СтрокаКонтроля.RestrictionKindName = "" Тогда
		ВидКонтроляСсылка = Справочники.ВидыКонтроля[СтрокаКонтроля.RestrictionKindName];
	ИначеЕсли Не СтрокаКонтроля.RestrictionKindRef = "" Тогда
		ВидКонтроляГУИД = Новый УникальныйИдентификатор(СтрокаКонтроля.RestrictionKindRef);
		ВидКонтроляСсылка = Справочники.ВидыКонтроля.ПолучитьСсылку(ВидКонтроляГУИД);
	КонецЕсли;
	Возврат ВидКонтроляСсылка;
	
КонецФункции

Функция СформироватьТаблицуСтрокКонтроля(КоллекцияСтрок, ИменаКолонок)
	
	ТаблицаСтрокКонтроля = Справочники.КонтрольПродаж.ПустаяСсылка().КонтрольПродаж.ВыгрузитьКолонки(ИменаКолонок);
	Для Каждого СтрокаКонтроля Из КоллекцияСтрок Цикл
		ДеньНедели = Неопределено;
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьДеньНеделиПоНомеруДня(СтрокаКонтроля.WeekDayNumber, ДеньНедели);
		
		ВидКонтроля = ПолучитьВидКонтроляПоОписанию(СтрокаКонтроля);
		
		Если ЗначениеЗаполнено(ВидКонтроля) И ОбщегоНазначения.СсылкаСуществует(ВидКонтроля) Тогда
			НоваяСтрока = ТаблицаСтрокКонтроля.Добавить();
			НоваяСтрока.ВидКонтроля = ВидКонтроля;
			НоваяСтрока.НачалоПериода = XmlЗначение(Тип("Дата"), СтрокаКонтроля.PeriodStart);
			НоваяСтрока.КонецПериода = XmlЗначение(Тип("Дата"), СтрокаКонтроля.PeriodEnd);
			НоваяСтрока.ДеньНедели = ДеньНедели;
			НоваяСтрока.ВремяНачала = XmlЗначение(Тип("Дата"), СтрокаКонтроля.TimeStart);
			НоваяСтрока.ВремяОкончания = XmlЗначение(Тип("Дата"), СтрокаКонтроля.TimeEnd);
		КонецЕсли;
	КонецЦикла;
	Возврат ТаблицаСтрокКонтроля;
	
КонецФункции

Процедура ОбновитьПалитрыКонтроляПродаж(КонтрольПродажОбъект, КоллекцияСтрок, ПризнакМодифицированности)
	
	ИменаКолонок = "Палитра";
	ВложенныеПалитры = СформироватьТаблицуВложенныхПалитрКонтроля(КоллекцияСтрок, ИменаКолонок);
	Если Не ТаблицыИдентичны(КонтрольПродажОбъект.ПалитрыКонтроляПродаж, ВложенныеПалитры, ИменаКолонок) Тогда
		КонтрольПродажОбъект.ПалитрыКонтроляПродаж.Загрузить(ВложенныеПалитры);
		ПризнакМодифицированности = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьНоменклатуруКонтроляПродаж(КонтрольПродажОбъект, КоллекцияСтрок, ПризнакМодифицированности)
	
	ИменаКолонок = "Номенклатура";
	ТаблицаНоменклатуры = СформироватьТаблицуНоменклатурыКонтроля(КоллекцияСтрок, ИменаКолонок);
	Если Не ТаблицыИдентичны(КонтрольПродажОбъект.Номенклатура, ТаблицаНоменклатуры, ИменаКолонок) Тогда
		КонтрольПродажОбъект.Номенклатура.Загрузить(ТаблицаНоменклатуры);
		ПризнакМодифицированности = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПараметрыВидаКонтроля(ВидКонтроляОбъект, КоллекцияПараметров, ПризнакМодифицированности)
	
	ИменаКолонок = "Параметр,Значение";
	ВходнаяТаблица = СформироватьТаблицуПараметровКонтроляИзКоллекции(КоллекцияПараметров, ИменаКолонок);
	Если Не ТаблицыИдентичны(ВидКонтроляОбъект.ПараметрыКонтроля, ВходнаяТаблица, ИменаКолонок) Тогда
		ВидКонтроляОбъект.ПараметрыКонтроля.Загрузить(ВходнаяТаблица);
		ПризнакМодифицированности = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСтрокиКонтроляПродаж(КонтрольПродажОбъект, КоллекцияСтрок, ПризнакМодифицированности)
	
	ИменаКолонок = "ВидКонтроля,НачалоПериода,КонецПериода,ДеньНедели,ВремяНачала,ВремяОкончания";
	ТаблицаСтрокКонтроля = СформироватьТаблицуСтрокКонтроля(КоллекцияСтрок, ИменаКолонок);
	Если Не ТаблицыИдентичны(КонтрольПродажОбъект.КонтрольПродаж, ТаблицаСтрокКонтроля, ИменаКолонок) Тогда
		КонтрольПродажОбъект.КонтрольПродаж.Загрузить(ТаблицаСтрокКонтроля);
		ПризнакМодифицированности = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьТаблицуСсставаПалитры(КоллекцияСтрок)
	
	СимволПереноса = "
	|";
	ИменаКолонокТаблицы = "ЭтоКатегория,НомерКатегории,НомерКатегорииРазмещения,ИндексПозиции,ИмяЭлемента,Номенклатура,
		|Характеристика,ЗаголовокЭлемента,ХарактеристикиИспользуются,ИмеетсяВложенность,ВидМодификатора,Упаковка,
		|СкрыватьОстаток,Палитра";
	ИменаКолонокТаблицы = СтрЗаменить(ИменаКолонокТаблицы, СимволПереноса, "");
	ТаблицаСостава = Справочники.ПалитраТоваровРМК.ПустаяСсылка().Состав.ВыгрузитьКолонки(ИменаКолонокТаблицы);
	Для Каждого СтрокаСостава Из КоллекцияСтрок Цикл
		
		НоваяСтрока = ТаблицаСостава.Добавить();
		НоваяСтрока.ЭтоКатегория = СтрокаСостава.IsFolder;
		НоваяСтрока.НомерКатегории = СтрокаСостава.FolderNumber;
		НоваяСтрока.НомерКатегорииРазмещения = СтрокаСостава.ParentFolderNumber;
		НоваяСтрока.ИндексПозиции = СтрокаСостава.PositionIndex;
		НоваяСтрока.ИмяЭлемента = СтрокаСостава.ElementName;
		Если Не СтрокаСостава.NomenclatureRef = "" Тогда
			НоменклатураГУИД = Новый УникальныйИдентификатор(СтрокаСостава.NomenclatureRef);
			НоменклатураСостава = Неопределено;
			ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьНоменклатуруПоУникальномуИдентификатору(НоменклатураГУИД,
				НоменклатураСостава);
			НоваяСтрока.Номенклатура = НоменклатураСостава;
		КонецЕсли;
		Если Не СтрокаСостава.CharacteristicRef = "" Тогда
			ХарактеристикаГУИД = Новый УникальныйИдентификатор(СтрокаСостава.CharacteristicRef);
			ХарактеристикаСостава = Неопределено;
			ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьХарактеристикуПоУникальномуИдентификатору(ХарактеристикаГУИД,
				ХарактеристикаСостава);
			НоваяСтрока.Характеристика = ХарактеристикаСостава;
		КонецЕсли;
		НоваяСтрока.ЗаголовокЭлемента = СтрокаСостава.ElementTitle;
		НоваяСтрока.ХарактеристикиИспользуются = СтрокаСостава.CharacteristicsAreUsed;
		НоваяСтрока.ИмеетсяВложенность = СтрокаСостава.HasIncludedElements;
		Если Не СтрокаСостава.ModificatorName = "" Тогда
			НоваяСтрока.ВидМодификатора = Перечисления.ВидыМодификаторовРМК[СтрокаСостава.ModificatorName];
		КонецЕсли;
		Если Не СтрокаСостава.PackageRef = "" Тогда
			УпаковкаГУИД = Новый УникальныйИдентификатор(СтрокаСостава.PackageRef);
			УпаковкаСостава = Неопределено;
			ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьУпаковкуПоУникальномуИдентификатору(УпаковкаГУИД, УпаковкаСостава);
			НоваяСтрока.Упаковка = УпаковкаСостава;
		КонецЕсли;
		НоваяСтрока.СкрыватьОстаток = СтрокаСостава.HideAmount;
		Если Не СтрокаСостава.GoodsSetRef = "" Тогда
			ПалитраГУИД = Новый УникальныйИдентификатор(СтрокаСостава.GoodsSetRef);
			НоваяСтрока.Палитра = Справочники.ПалитраТоваровРМК.ПолучитьСсылку(ПалитраГУИД);
		КонецЕсли;
		
	КонецЦикла;
	Возврат ТаблицаСостава;
	
КонецФункции

Функция СформироватьТаблицуПараметровКонтроляИзКоллекции(КоллекцияПараметров, ИменаКолонок)
	
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	ТаблицаПараметров = Справочники.ВидыКонтроля.ПустаяСсылка().ПараметрыКонтроля.ВыгрузитьКолонки(ИменаКолонок);
	Для Каждого СтрокаПараметров Из КоллекцияПараметров Цикл
		Если Не СтрокаПараметров.Parameter = "" Тогда
			НоваяСтрока = ТаблицаПараметров.Добавить();
			ПараметрКонтроля = Перечисления.ПараметрыКонтроляПродаж[СтрокаПараметров.Parameter];
			ЗначениеКонтроля = СтрокаПараметров.Value;
			Если ПараметрКонтроля = Перечисления.ПараметрыКонтроляПродаж.Возраст Тогда
				ЗначениеКонтроля = ОписаниеТипаЧисло.ПривестиЗначение(ЗначениеКонтроля);
			КонецЕсли;
			НоваяСтрока.Параметр = ПараметрКонтроля;
			НоваяСтрока.Значение = ЗначениеКонтроля;
		КонецЕсли;
	КонецЦикла;
	Возврат ТаблицаПараметров;
	
КонецФункции

Процедура ОбновитьЗначениеРеквизита(РеквизитОбъекта, НовоеЗначение, ПризнакМодифицированности)
	Если Не РеквизитОбъекта = НовоеЗначение Тогда
		РеквизитОбъекта = НовоеЗначение;
		ПризнакМодифицированности = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьСлужебныеЗапретыПродаж(ВидКонтроляЗапретПродаж)

	РезультатФункции = Новый ТаблицаЗначений;
	
	ЗапросЗапретов = Новый Запрос;
	ЗапросЗапретов.Текст =
	"ВЫБРАТЬ
	|	СпрКонтрольПродаж.Ссылка КАК КонтрольПродаж,
	|	СпрКонтрольПродаж.Палитра КАК Палитра,
	|	СпрКонтрольПродаж.Использование КАК Использование,
	|	СпрКонтрольПродаж.ДляВсейНоменклатуры КАК ДляВсейНоменклатуры,
	|	СпрКонтрольПродаж.ДляВсехТорговыхОбъектов КАК ДляВсехТорговыхОбъектов,
	|	СУММА(ВЫБОР
	|			КОГДА КонтрольПродажКонтрольПродаж.ВидКонтроля = &ВидКонтроляЗапретПродаж
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоЗапретовПродаж,
	|	КОЛИЧЕСТВО(*) КАК КоличествоСтрокКонтроля
	|ПОМЕСТИТЬ втКонтрольПродажЗапреты
	|ИЗ
	|	Справочник.КонтрольПродаж КАК СпрКонтрольПродаж
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтрольПродаж.КонтрольПродаж КАК КонтрольПродажКонтрольПродаж
	|		ПО СпрКонтрольПродаж.Ссылка = КонтрольПродажКонтрольПродаж.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СпрКонтрольПродаж.Ссылка,
	|	СпрКонтрольПродаж.Палитра,
	|	СпрКонтрольПродаж.Использование,
	|	СпрКонтрольПродаж.ДляВсейНоменклатуры
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(*) = СУММА(ВЫБОР
	|			КОГДА КонтрольПродажКонтрольПродаж.ВидКонтроля = &ВидКонтроляЗапретПродаж
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПалитраТоваровРМК.Ссылка КАК Палитра
	|ПОМЕСТИТЬ втПалитрыКонтроля
	|ИЗ
	|	Справочник.ПалитраТоваровРМК КАК ПалитраТоваровРМК
	|ГДЕ
	|	ПалитраТоваровРМК.Ссылка В
	|			(ВЫБРАТЬ
	|				КонтрольПродажЗапреты.Палитра
	|			ИЗ
	|				втКонтрольПродажЗапреты КАК КонтрольПродажЗапреты)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СпрПалитраТоваровРМК.Ссылка
	|ИЗ
	|	Справочник.ПалитраТоваровРМК КАК СпрПалитраТоваровРМК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПалитраТоваровРМК.Состав КАК ПалитраТоваровРМКСостав
	|		ПО СпрПалитраТоваровРМК.Ссылка = ПалитраТоваровРМКСостав.Палитра
	|ГДЕ
	|	ПалитраТоваровРМКСостав.Ссылка В
	|			(ВЫБРАТЬ
	|				КонтрольПродажЗапреты.Палитра
	|			ИЗ
	|				втКонтрольПродажЗапреты КАК КонтрольПродажЗапреты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпрПалитраТоваровРМК.Ссылка КАК Палитра,
	|	СпрПалитраТоваровРМК.СлужебныйВидНоменклатуры КАК СлужебныйВидНоменклатуры,
	|	СпрПалитраТоваровРМК.СлужебнаяОсобенностьУчета КАК СлужебнаяОсобенностьУчета,
	|	СУММА(ВЫБОР
	|			КОГДА ПалитраТоваровРМКСостав.Палитра = ЗНАЧЕНИЕ(Справочник.ПалитраТоваровРМК.ПустаяСсылка)
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КоличествоСтрокПалитр,
	|	КОЛИЧЕСТВО(*) КАК КоличествоСтрок
	|ИЗ
	|	втПалитрыКонтроля КАК втПалитрыКонтроля
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПалитраТоваровРМК КАК СпрПалитраТоваровРМК
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПалитраТоваровРМК.Состав КАК ПалитраТоваровРМКСостав
	|			ПО СпрПалитраТоваровРМК.Ссылка = ПалитраТоваровРМКСостав.Ссылка
	|		ПО втПалитрыКонтроля.Палитра = СпрПалитраТоваровРМК.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СпрПалитраТоваровРМК.Ссылка,
	|	СпрПалитраТоваровРМК.СлужебныйВидНоменклатуры,
	|	СпрПалитраТоваровРМК.СлужебнаяОсобенностьУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКонтрольПродажЗапреты.КонтрольПродаж КАК КонтрольПродаж,
	|	втКонтрольПродажЗапреты.Использование КАК Использование,
	|	втКонтрольПродажЗапреты.Палитра КАК Палитра,
	|	втКонтрольПродажЗапреты.ДляВсейНоменклатуры КАК ДляВсейНоменклатуры,
	|	втКонтрольПродажЗапреты.ДляВсехТорговыхОбъектов КАК ВсеТорговыеОбъекты,
	|	втКонтрольПродажЗапреты.КонтрольПродаж.ТорговыеОбъекты.(
	|		Ссылка КАК КонтрольПродажСсылка,
	|		ТорговыйОбъект КАК ТорговыйОбъект
	|	) КАК ТорговыеОбъекты,
	|	втКонтрольПродажЗапреты.КонтрольПродаж.КонтрольПродаж.(
	|		ВидКонтроля КАК ВидКонтроля,
	|		НачалоПериода КАК НачалоПериода,
	|		КонецПериода КАК КонецПериода,
	|		ДеньНедели КАК ДеньНедели,
	|		ВремяНачала КАК ВремяНачала,
	|		ВремяОкончания КАК ВремяОкончания
	|	) КАК СтрокиКонтроля
	|ИЗ
	|	втКонтрольПродажЗапреты КАК втКонтрольПродажЗапреты";
	
	ЗапросЗапретов.УстановитьПараметр("ВидКонтроляЗапретПродаж", ВидКонтроляЗапретПродаж);
	РезультатыЗапросов = ЗапросЗапретов.ВыполнитьПакет();
	ТаблицаПалитр = РезультатыЗапросов[2].Выгрузить();
	ТаблицаВсехКонтролей = РезультатыЗапросов[3].Выгрузить();
	
	Если ТаблицаВсехКонтролей.Количество() > 0 Тогда
		РезультатФункции = ТаблицаВсехКонтролей.СкопироватьКолонки();
		Для Каждого ИсходнаяСтрокаКонтроля Из ТаблицаВсехКонтролей Цикл
			Если ИсходнаяСтрокаКонтроля.ДляВсейНоменклатуры
					Или ЗаполненаСлужебнаяПалитра(ИсходнаяСтрокаКонтроля, ТаблицаПалитр) Тогда
				
				НоваяСтрока = РезультатФункции.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрокаКонтроля);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ЗаполненаСлужебнаяПалитра(ИсходнаяСтрокаКонтроля, ТаблицаПалитр)
	
	РезультатФункции = Ложь;
	
	Если ЗначениеЗаполнено(ИсходнаяСтрокаКонтроля.Палитра) Тогда
		СтрокаПалитры = ТаблицаПалитр.Найти(ИсходнаяСтрокаКонтроля.Палитра, "Палитра");
		Если ЗначениеЗаполнено(СтрокаПалитры.СлужебнаяОсобенностьУчета)
				Или ЗначениеЗаполнено(СтрокаПалитры.СлужебныйВидНоменклатуры)
				Или СтрокаПалитры.КоличествоСтрокПалитр = СтрокаПалитры.КоличествоСтрок Тогда
				
			РезультатФункции = Истина;
				
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПолучитьМаксимальныйНомерСлужебногоЗапрета()
	
	РезультатФункции = 0;
	ОбщаяЧастьНаименования = ОбщаяЧастьНаименованияСлужебныйЗапретПродаж();
	ДлинаЧасти = СтрДлина(ОбщаяЧастьНаименования);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпрКонтрольПродаж.Наименование КАК Наименование
	|ИЗ
	|	Справочник.КонтрольПродаж КАК СпрКонтрольПродаж
	|ГДЕ
	|	СпрКонтрольПродаж.Наименование ПОДОБНО &СлужебныйЗапретНаименование";
	
	СлужебныйЗапретНаименование = СтрШаблон("%1%2", ОбщаяЧастьНаименования, "%");
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	Запрос.УстановитьПараметр("СлужебныйЗапретНаименование", СлужебныйЗапретНаименование);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если СтрДлина(Выборка.Наименование) > ДлинаЧасти + 1 Тогда
				НомерИзНаименования = Сред(Выборка.Наименование, ДлинаЧасти + 1);
				НомерЗапрета = ТипЧисло.ПривестиЗначение(НомерИзНаименования);
				Если НомерЗапрета > РезультатФункции Тогда
					РезультатФункции = НомерЗапрета;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ОбновитьКонтрольПродажПоДаннымРегистраЗапретаПродаж(ТорговыйОбъект)
	
	РезультатФункции = Истина;
	ВидКонтроляЗапретПродаж = ПолучитьВидКонтроляЗапретПродаж();
	СлужебныеЗапретыПродаж = ПолучитьСлужебныеЗапретыПродаж(ВидКонтроляЗапретПродаж);
	
	МассивОписанийКонтроля = Новый Массив;
	ОбщегоНазначенияРМКПереопределяемый.ПодготовитьПреобразованиеЗапретовПродажВКонтрольПродаж(МассивОписанийКонтроля);
	ОбъединитьКонтрольСОдинаковымиУсловиямиИТорговымиОбъектами(МассивОписанийКонтроля);
	НомерКонтроля = ПолучитьМаксимальныйНомерСлужебногоЗапрета() + 1;
	
	НачатьТранзакцию();
	Попытка
		ОтключитьИспользованиеСлужебныхЗапретовПродаж(СлужебныеЗапретыПродаж, ТорговыйОбъект);
		
		Для Каждого ОписаниеКонтроля Из МассивОписанийКонтроля Цикл
			СоздатьОбновитьСлужебныйЗапретПродаж(ОписаниеКонтроля, ВидКонтроляЗапретПродаж,
				НомерКонтроля, СлужебныеЗапретыПродаж);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		РезультатФункции = Ложь;
	КонецПопытки;
	Возврат РезультатФункции;
	
КонецФункции

Функция ЭтоЗапретТорговогоОбъекта(СтрокаСлужебногоЗапрета, ТорговыйОбъект)
	
	РезультатФункции = Ложь;
	ДляЕдинственногоТорговогоОбъекта
		= (СтрокаСлужебногоЗапрета.ТорговыеОбъекты.Количество() = 0 И Не СтрокаСлужебногоЗапрета.ВсеТорговыеОбъекты);
	Если (СтрокаСлужебногоЗапрета.ТорговыеОбъекты.Количество() = 1
			И СтрокаСлужебногоЗапрета.ТорговыеОбъекты[0] = ТорговыйОбъект)
				Или ДляЕдинственногоТорговогоОбъекта Тогда
				
		РезультатФункции = Истина;
			
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ОтключитьИспользованиеСлужебныхЗапретовПродаж(СлужебныеЗапретыПродаж, ТорговыйОбъект)
	
	Для Каждого СтрокаСлужебногоЗапрета Из СлужебныеЗапретыПродаж Цикл
		
		Если СтрокаСлужебногоЗапрета.Использование И ЭтоЗапретТорговогоОбъекта(СтрокаСлужебногоЗапрета, ТорговыйОбъект) Тогда
			КонтрольПродажОбъект = СтрокаСлужебногоЗапрета.КонтрольПродаж.ПолучитьОбъект();
			КонтрольПродажОбъект.Использование = Ложь;
			КонтрольПродажОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьВидКонтроляЗапретПродаж(ВидКонтроляЗапретПродаж)
	
	ТекстШаблона = НСтр("ru = 'Запрещена продажа товаров группы ""[ГруппаТоваров]"" [ОписаниеПериода]'");
	ВидКонтроляОбъект = Справочники.ВидыКонтроля.СоздатьЭлемент();
	ВидКонтроляОбъект.УстановитьСсылкуНового(ВидКонтроляЗапретПродаж);
	ВидКонтроляОбъект.Наименование = НСтр("ru = 'Запрет продаж'");
	ВидКонтроляОбъект.ТипКонтроля = Перечисления.ТипыКонтроля.ЗапретПодбора;
	ВидКонтроляОбъект.ТекстШаблонаПредупреждения = ТекстШаблона;
	ВидКонтроляОбъект.Локальный = Истина;
	ВидКонтроляОбъект.Записать();
	
КонецПроцедуры

Функция УникальныйИдентификаторВидаКонтроляЗапретПродаж()
	
	РезультатФункции = Новый УникальныйИдентификатор("a25b8e75-4f78-48f9-82d6-35ab7b5ff472");
	Возврат РезультатФункции;
	
КонецФункции

Функция ПолучитьВидКонтроляЗапретПродаж()
	
	ГУИДВидКонтроляЗапретПродаж = УникальныйИдентификаторВидаКонтроляЗапретПродаж();
	ВидКонтроляЗапретПродаж = Справочники.ВидыКонтроля.ПолучитьСсылку(ГУИДВидКонтроляЗапретПродаж);
	Если Не Общегоназначения.СсылкаСуществует(ВидКонтроляЗапретПродаж) Тогда
		СоздатьВидКонтроляЗапретПродаж(ВидКонтроляЗапретПродаж);
	КонецЕсли;
	Возврат ВидКонтроляЗапретПродаж;
	
КонецФункции

Функция НоменклатураКонтроляИдентична(ИсходныеДанные, ПроверяемыеДанные)
	
	РезультатФункции = Истина;
	Если ИсходныеДанные.ВсяНоменклатура = ПроверяемыеДанные.ВсяНоменклатура Тогда
		Если Не (ИсходныеДанные.ВсяНоменклатура
				Или ИсходныеДанные.ГлавнаяСлужебнаяПалитра = ПроверяемыеДанные.ГлавнаяСлужебнаяПалитра) Тогда
			РезультатФункции = Ложь;
		КонецЕсли;
	Иначе
		РезультатФункции = Ложь;
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

Процедура ОбъединитьКонтрольСОдинаковымиУсловиямиИПалитрами(МассивОписанийКонтроля)
	
	КоличествоЭлементов = МассивОписанийКонтроля.Количество();
	ИндексОписания = КоличествоЭлементов - 1;
	Пока ИндексОписания > 0 Цикл
		ПроверяемоеОписание = МассивОписанийКонтроля[ИндексОписания];
		ИндексПредыдущего = ИндексОписания - 1;
		НайденАналог = Ложь;
		Пока ИндексПредыдущего >= 0 И Не НайденАналог Цикл
			
			ПредыдущееОписание = МассивОписанийКонтроля[ИндексПредыдущего];
			Если НоменклатураКонтроляИдентична(ПроверяемоеОписание, ПредыдущееОписание)
					И СтрокиКонтроляИдентичны(ПроверяемоеОписание, ПредыдущееОписание) Тогда
				НайденАналог = Истина;
				Если Не (ПроверяемоеОписание.ВсеТорговыеОбъекты Или ПредыдущееОписание.ВсеТорговыеОбъекты) Тогда
					Для Каждого ТорговыйОбъектПроверяемый Из ПроверяемоеОписание.ТорговыеОбъекты Цикл
						Если ПредыдущееОписание.ТорговыеОбъекты.Найти(ТорговыйОбъектПроверяемый) = Неопределено Тогда
							ПредыдущееОписание.ТорговыеОбъекты.Добавить(ТорговыйОбъектПроверяемый);
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли Не ПредыдущееОписание.ВсеТорговыеОбъекты Тогда
					ПредыдущееОписание.ВсеТорговыеОбъекты = Истина;
				КонецЕсли;
				МассивОписанийКонтроля.Удалить(ИндексОписания);
			КонецЕсли;
			
			ИндексПредыдущего = ИндексПредыдущего - 1;
		КонецЦикла;
		
		ИндексОписания = ИндексОписания - 1;
	КонецЦикла;
	
КонецПроцедуры

#Область УчетНаличных

// Возвращает количество наличных денежных средств в кассе ккм.
// 
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияРМК - Организация
//  КассаККМ - ОпределяемыйТип.КассаККМРМК - КассаККМ
// Возвращаемое значение:
//  Число - Наличные денежные средства в кассе ККМ.
//
Функция ПолучитьНаличныеДенежныеСредстваВКассеККМ(Организация, КассаККМ) Экспорт
	
	Результат = 0;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьНаличныеДенежныеСредстваВКассеККМ(Организация, КассаККМ, Результат);
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры автоматической выемки денежных средств в кассе ккм
// при закрытии смены.
// 
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияРМК - Организация
//  КассаККМ - ОпределяемыйТип.КассаККМРМК - КассаККМ
// Возвращаемое значение:
//  ПараметрыВыемки - Структура - Структура параметров выемки
//   *ТребуетсяВыемкаПриЗакрытииСмены - Булево - Признак необходимости делать автовыемку при закрытии смены.
//   *МинимальныйОстатокНаличныхВКассе - Число - Минимальный остаток наличных при автовыемки.
//
Функция ПолучитьПараметрыВыемкиПриЗакрытииСмены(Организация, КассаККМ) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТребуетсяВыемкаПриЗакрытииСмены", Ложь);
	Результат.Вставить("МинимальныйОстатокНаличныхВКассе", 0);
	
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьПараметрыВыемкиПриЗакрытииСмены(Организация, КассаККМ, Результат);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеХарактеристик

// Заполняет данные о характеристиках товаров
//
// Параметры:
//  СтруктураПараметров			 - Структура		 - настройки заполнения данных.
//  		* Номенклатура - ОпределяемыйТип.НоменклатураРМК - номенклатура текущей строки.
//  		* Характеристика - ОпределяемыйТип.ХарактеристикаРМК - характеристика текущей строки.
//  		* ВидЦены - ОпределяемыйТип.ВидЦеныРМК - вид цены рабочего места кассира.
//  		* ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК - торговый объект рабочего места кассира.
//  ДанныеПлиткиПодбораЗначений	 - ТаблицаЗначений	 - таблица для заполнения плтики значениями подбора.
//
Процедура ЗаполнитьДанныеПлиткиВыбораЗначений(СтруктураПараметров, ДанныеПлиткиПодбораЗначений) Экспорт
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьДанныеПлиткиВыбораЗначений(СтруктураПараметров, ДанныеПлиткиПодбораЗначений); 
КонецПроцедуры

#КонецОбласти

#КонецОбласти