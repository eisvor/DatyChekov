
#Область ПрограммныйИнтерфейс

// Возвращает наличие элемента на форме
//
// Параметры:
//  Элементы - ВсеЭлементыФормы.
//  ИмяЭлемента - Строка.
// 
// Возвращаемое значение:
//  Булево - Наличие элемента на форме.
//
Функция ПроверитьНаличиеЭлементаФормы(Элементы, ИмяЭлемента) Экспорт 
	
	Возврат НЕ Элементы.Найти(ИмяЭлемента) = Неопределено;
	
КонецФункции

// Возвращает массив строк - Идентификаторы печатных форм 
//
// Возвращаемое значение:
//  Массив
Функция ФормыЗаявленийДоПробитияЧека() Экспорт
	
	ФормыДоПробитияЧека = Новый Массив;
	ФормыДоПробитияЧека.Добавить("ЗаявлениеНаВозврат");
//	ФормыДоПробитияЧека.Добавить("ЗаявлениеНаУтерянныйЧек");
//	ФормыДоПробитияЧека.Добавить("ЗаявлениеОбОшибочноПробитомЧеке");
	
	Возврат ФормыДоПробитияЧека;
КонецФункции // ФормыЗаявленийДоПробитияЧека()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает структуру полей строки табличной части.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами
//
Функция ПолучитьСтруктуруПолейТЧ(СтруктураДействий) Экспорт 
	
	Перем СтруктураПараметровДействия;

	СтруктураПолейТЧ = Новый Структура;

	Если СтруктураДействий.Свойство("ОбработатьШтрихкоды", СтруктураПараметровДействия) Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьСерийныеНомераПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("КлючСтроки");
		СтруктураПолейТЧ.Вставить("КлючСвязиСерийныхНомеров");
		СтруктураПолейТЧ.Вставить("ИспользоватьСерийныеНомера");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;

	ИмяРеквизитаЦены = "";
	Если СтруктураДействий.Свойство("ОбнулитьЦену", ИмяРеквизитаЦены) Тогда
		Если НЕ ЗначениеЗаполнено(ИмяРеквизитаЦены)  Тогда
			ИмяРеквизитаЦены = "Цена";
		КонецЕсли;
		СтруктураПолейТЧ.Вставить(ИмяРеквизитаЦены, 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажи") Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("ШтрихКод");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПоВидуЦен") Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("ШтрихКод");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуЗакупки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПрошлойЗакупки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ЦенаПрошлойЗакупки", 0);
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма" , 0);
		СтруктураПолейТЧ.Вставить("СтавкаНДС", 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС", 0);
		СтруктураПолейТЧ.Вставить("НДСПоСтрочно");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДСПоСуммеСНДС") Тогда
		СтруктураПолейТЧ.Вставить("СуммаВсего", 0);
		СтруктураПолейТЧ.Вставить("СтавкаНДС", 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС", 0);
		СтруктураПолейТЧ.Вставить("СуммаСНДС", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма", 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС", 0);
		СтруктураПолейТЧ.Вставить("СуммаСНДС", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСумму") Тогда
		СтруктураПолейТЧ.Вставить("Сумма", 0);
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомРучнойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма", 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомАвтоматическойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма", 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки", 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
	КонецЕсли;
	
	ИмяКоличества = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуФакт", ИмяКоличества) Тогда

		Если Не ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "Факт";
		КонецЕсли;
		
		СтруктураПолейТЧ.Вставить("СуммаФакт", 0);
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок" + ИмяКоличества, 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуВозвратСУчетомОснования") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Коэффициент", 1);
		СтруктураПолейТЧ.Вставить("ПроцентСкидкиНаценки", 1);
		СтруктураПолейТЧ.Вставить("Сумма", 0);
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаУпаковку") Тогда
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВПродажах") Тогда
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("Сумма", 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки", 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки", 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок ", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВЗакупках") Тогда
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("Сумма", 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки", 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок ", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок", ИмяКоличества) Тогда
		
		СтруктураПолейТЧ.Вставить("Упаковка");
		Если ЗначениеЗаполнено(ИмяКоличества) Тогда
			СтруктураПолейТЧ.Вставить("КоличествоУпаковок" + ИмяКоличества, 0);
			СтруктураПолейТЧ.Вставить("Количество" + ИмяКоличества, 0);
		Иначе
			СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
			СтруктураПолейТЧ.Вставить("Количество" , 0);
		КонецЕсли;
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницПлан") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПлан", 0);
		СтруктураПолейТЧ.Вставить("КоличествоПлан", 0);
	КонецЕсли;
	
	ИмяФакта = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницФакт", ИмяФакта) Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок" + ИмяФакта, 0);
		СтруктураПолейТЧ.Вставить("Количество" + ИмяФакта, 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьКоличествоУчет") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("Количество");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокФакт", ИмяФакта) Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок" + ИмяФакта, 0);
		СтруктураПолейТЧ.Вставить("Количество" + ИмяФакта, 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьРеквизитыПоНоменклатуре") Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ЭтоУслуга");
		СтруктураПолейТЧ.Вставить("ЭтоПодарочныйСертификат");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
		СтруктураПолейТЧ.Вставить("ОсобенностиУчетаНоменклатуры");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьТипНоменклатуры") Тогда
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
		СтруктураПолейТЧ.Вставить("КодТРУ");
		СтруктураПолейТЧ.Вставить("ВозможнаОплатаЭС");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьДоговорПлатежногоАгента") Тогда
		СтруктураПолейТЧ.Вставить("ДоговорКонтрагента");
		СтруктураПолейТЧ.Вставить("ДанныеАгентскогоДоговора");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСУчетомАгентскогоВознаграждения") Тогда
		СтруктураПолейТЧ.Вставить("ДанныеАгентскогоДоговора");
		СтруктураПолейТЧ.Вставить("Цена");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьФлагРезервирования") Тогда
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Резервировать");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьСкладПродажи") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Склад");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВидНалога") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Склад");
		СтруктураПолейТЧ.Вставить("ВидНалога");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОрганизациюПродажи") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Склад");
		СтруктураПолейТЧ.Вставить("Организация");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДССкладВСтроке") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Склад");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДССкладВШапке") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроставитьПродавца") Тогда
		СтруктураПолейТЧ.Вставить("Продавец");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьДанныеПоДокументуПродажи") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ДокументПродажи");
		СтруктураПолейТЧ.Вставить("ЧекККМ");
		СтруктураПолейТЧ.Вставить("Продавец");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Цена");
		СтруктураПолейТЧ.Вставить("Сумма");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		СтруктураПолейТЧ.Вставить("Количество");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуПоСуммеВЗакупках") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("Цена");
		СтруктураПолейТЧ.Вставить("СуммаВсего");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПоСуммеСНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьАссортиментСтроки") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗапретРозничнойПродажи") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьДанныеПоЗаказу") Тогда
		СтруктураПолейТЧ.Вставить("КодСтроки");
		СтруктураПолейТЧ.Вставить("ЗаказПокупателя");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПредставлениеТабло") Тогда
		СтруктураПолейТЧ.Вставить("ПредставлениеТабло");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьНеобходимостьВводаАкцизнойМарки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("НеобходимостьВводаАкцизнойМарки");
		СтруктураПолейТЧ.Вставить("ОсобенностиУчетаНоменклатуры");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакМаркируемаяПродукция") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("МаркируемаяПродукция");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВидПродукцииИС") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ВидПродукцииИС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьНеобходимостьВводаМаркируемойПродукцииГосИС") Тогда 
		СтруктураПолейТЧ.Вставить("НеобходимостьВводаАкцизнойМарки");
		СтруктураПолейТЧ.Вставить("ВидПродукцииИС");
		СтруктураПолейТЧ.Вставить("МаркируемаяПродукция");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьНеобходимостьВводаМаркируемойПродукцииГосИС") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("МаркируемаяПродукция");
		СтруктураПолейТЧ.Вставить("ВидПродукцииИС");
		СтруктураПолейТЧ.Вставить("НеобходимостьВводаАкцизнойМарки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуМРЦ") Тогда
		СтруктураПолейТЧ.Вставить("ВидПродукцииИС");
		СтруктураПолейТЧ.Вставить("Штрихкод");
		СтруктураПолейТЧ.Вставить("МРЦ");
		СтруктураПолейТЧ.Вставить("Цена");
	КонецЕсли;
	
	Возврат СтруктураПолейТЧ;
	
КонецФункции

// Возвращает структуру для определения запрет розничных продаж.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * Номенклатура - СправочникСсылка.Номенклатура.
//   * ВидОперации - ПеречислениеСсылка.ВидыОперацийЧекККМ.
//   * ИспользоватьАссортимент - Булево.
//   * ФорматМагазина - СправочникСсылка.ФомартыМагазинов.
//   * Магазин - СправочникСсылка.Магазины.
//
Функция СтруктураЗапретРозничныхПродаж() Экспорт 
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Номенклатура");
	СтруктураДанных.Вставить("ВидОперации");
	СтруктураДанных.Вставить("ИспользоватьАссортимент");
	СтруктураДанных.Вставить("ФорматМагазина");
	СтруктураДанных.Вставить("Магазин");
	
	Возврат СтруктураДанных;
	
КонецФункции

// Возвращает структуру для настройки доступности команд в РМК.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НаборПравИНастроек - Структура.
//   * ЦенаВключаетНДС - Булево.
//   * ТаблицаКассККМОрганизаций - Таблица значений.
//   * ПодключаемоеОборудованиеЕстьТСД - Булево.
//   * ПодключаемоеОборудованиеЕстьВесы - Булево.
//
Функция СтруктураДоступностьЭлементовРМК() Экспорт 
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("НаборПравИНастроек");
	СтруктураДанных.Вставить("ЦенаВключаетНДС");
	СтруктураДанных.Вставить("ТаблицаКассККМОрганизаций");
	СтруктураДанных.Вставить("ПодключаемоеОборудованиеЕстьТСД");
	СтруктураДанных.Вставить("ПодключаемоеОборудованиеЕстьВесы");
	СтруктураДанных.Вставить("Магазин");
	СтруктураДанных.Вставить("ВидОперации");
	
	Возврат СтруктураДанных;
	
КонецФункции

// Возвращает структуру для настройки заполнения кнопок нижней панели в РМК.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НастройкаРМК - СпрсвочникСсылка.НастройкиРМК.
//   * ИспользоватьНастройкуРМК - Булево.
//   * ПрограммноСозданныеЭлементы - Таблица значений- таблица с колонками:
//     * Имя - Строка (100).
//   * КартинкиБыстрыхТоваров - Таблица значений- таблица с колонками:
//     * АдресКартинки - Строка - Неограниченная.
//   * УникальныйИдентификатор - Строка.
//   * ПрограммноСозданныеКоманды - Таблица значений- таблица с колонками:
//     * Имя - Строка (100).
//   * ТаблицаБыстрыхТоваров - Таблица значений- таблица с колонками:
//     * Номенклатура - СпрсвочникСсылка.Номенклатура.
//     * Характеристика - СпрсвочникСсылка.ХарактеристикиНоменклатуры.
//     * ИдентификаторБыстрогоТовара - Строка - Неограниченная.
//     * ЭтоСтраница - Булево.
//     * НомерСтраницы - Число(5,0).
//
Функция СтруктураЗаполненияНижнихКнопокРМК() Экспорт 
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("НастройкаРМК");
	СтруктураДанных.Вставить("ИспользоватьНастройкуРМК");
	СтруктураДанных.Вставить("ПрограммноСозданныеЭлементы");
	СтруктураДанных.Вставить("КартинкиБыстрыхТоваров");
	СтруктураДанных.Вставить("УникальныйИдентификатор");
	СтруктураДанных.Вставить("ПрограммноСозданныеКоманды");
	СтруктураДанных.Вставить("ТаблицаБыстрыхТоваров");
	СтруктураДанных.Вставить("ВидОперации");
	
	Возврат СтруктураДанных;
	
КонецФункции

//Получает сумму в формате для текущей валюты.
//
Функция ФорматСумм(Сумма) Экспорт 
	
	Сумма = ?(Сумма < 0, -Сумма, Сумма);
	ПредставлениеВалюты = ОбщегоНазначенияРТКлиентСерверПовтИсп.Валюта();
	
	Возврат СтрШаблон("%1 %2", Формат(Сумма,"ЧЦ=15; ЧДЦ=2; ЧН=0.00"), ПредставлениеВалюты);
	
КонецФункции

//Добавляет свойства в структуру для обработки изменения количества.
//
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект) Экспорт 
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЭтоРМК");
	
	Если Объект.ПродажаПоЗаказу 
			ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		СтруктураПересчетаСкидок = Новый Структура;
		СтруктураПересчетаСкидок.Вставить("Очищать", Ложь);
		СтруктураПересчетаСкидок.Вставить("ПересчитыватьСуммуСкидки", Истина);
		
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки"        , СтруктураПересчетаСкидок);
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", СтруктураПересчетаСкидок);
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи",
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина, Ложь));
			
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки"        , Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру для формирования заголовка в РМК.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ВидОперации - ПеречислениеСсылка.ВидыОперацийЧекККМ.
//   * ОперацияСДенежнымиСредствами - Булево.
//   * ПродажаПоЗаказу - Булево.
//   * ДокументРасчета - ДокументСсылка.
//   * ЭтоЗачетАванса - Булево.
//   * НомерЗаказа - Строка.
//   * ЭтоОплатаРассрочки - Булево.
//   * Продавец - СправочникСсылка.ФизическиеЛица.
//   * РеверсКнопкиПродавец - Булево.
//   * ИмяКнопкиПродавец - Строка.
//   * ЦветПродажи - Булево.
//   * СуммаОстаткаДокументаРасчета - Число.
//
Функция СтруктураДляУстановкиЗаголовкаРМК() Экспорт 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидОперации");
	СтруктураПараметров.Вставить("ОперацияСДенежнымиСредствами");
	СтруктураПараметров.Вставить("ПродажаПоЗаказу");
	СтруктураПараметров.Вставить("ДокументРасчета");
	СтруктураПараметров.Вставить("ЭтоЗачетАванса");
	СтруктураПараметров.Вставить("НомерЗаказа");
	СтруктураПараметров.Вставить("ЭтоОплатаРассрочки");
	СтруктураПараметров.Вставить("Продавец");
	СтруктураПараметров.Вставить("РеверсКнопкиПродавец");
	СтруктураПараметров.Вставить("ИмяКнопкиПродавец");
	СтруктураПараметров.Вставить("ЦветПродажи");
	СтруктураПараметров.Вставить("СуммаОстаткаДокументаРасчета");
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Возвращает структуру для обновления табло номенклатуры в РМК.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ВыведеныЧеки - Булево.
//   * ОставлятьФлагТаблоСдачи - Булево.
//   * ВыведенаСдача - Булево.
//   * ДисконтнаяКарта - СправочникСсылка.ИнформационныеКарты.
//   * ВладелецДисконтнойКарты - СправочникСсылка.Контрагенты, СправочникСсылка.Пользователи, СправочникСсылка.ФизическиеЛица.
//
Функция СтруктураДляОбновленияТаблоНоменклатурыРМК() Экспорт 
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ВыведеныЧеки");
	СтруктураДанных.Вставить("ОставлятьФлагТаблоСдачи");
	СтруктураДанных.Вставить("ВыведенаСдача");
	СтруктураДанных.Вставить("ДисконтнаяКарта");
	СтруктураДанных.Вставить("ВладелецДисконтнойКарты");

	СтруктураДанных.Вставить("Телефон");
	СтруктураДанных.Вставить("АдресЭП");
	СтруктураДанных.Вставить("НеПечататьБумажныйЧек");
	
	Возврат СтруктураДанных;
	
КонецФункции

// Возвращает структуру для обновления дисплея покупателя в РМК.
//
// Возвращаемое значение:
//  СтруктураДанных - Структура
//
Функция СтруктураДляОбновленияДисплеяПокупателя() Экспорт 
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Команда");
	СтруктураДанных.Вставить("ТолькоИтоги");
	СтруктураДанных.Вставить("ТекущаяСтрока");
	СтруктураДанных.Вставить("Товары");
	СтруктураДанных.Вставить("ДисплейПокупателяПараметры");
	СтруктураДанных.Вставить("ИспользоватьПодключаемоеОборудование");
	СтруктураДанных.Вставить("НаборПравИНастроек");
	СтруктураДанных.Вставить("СуммаСкидки");
	СтруктураДанных.Вставить("СуммаВсего");
	
	Возврат СтруктураДанных;
	
КонецФункции

// Возвращает структуру для вывода информации на дисплей покупателя.
//
// Возвращаемое значение:
//  СтруктураДанных - Структура
//
Функция СтруктураДляВыводаИнформацииНаДисплейПокупателя() Экспорт 
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Команда");
	СтруктураДанных.Вставить("ИспользоватьПодключаемоеОборудование");
	СтруктураДанных.Вставить("НаборПравИНастроек");
	СтруктураДанных.Вставить("ДисплейПокупателяПараметры");
	СтруктураДанных.Вставить("ДисплейПокупателяПараметры");
	СтруктураДанных.Вставить("СуммаСкидки");
	СтруктураДанных.Вставить("СуммаВсего");
	
	Возврат СтруктураДанных;
	
КонецФункции

// Возвращает структуру расчета скидок.
//
// Возвращаемое значение:
//  СтруктураДанных - Структура
//
Функция СтруктураДляПредварительногоРасчетСкидок() Экспорт 
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ПрименятьКОбъекту");
	СтруктураДанных.Вставить("ТолькоПредварительныйРасчет");
	СтруктураДанных.Вставить("ВосстанавливатьУправляемыеСкидки");
	СтруктураДанных.Вставить("УправляемыеСкидки");
	СтруктураДанных.Вставить("ТолькоСообщенияПослеОформления");
	СтруктураДанных.Вставить("КонтролироватьОстаткиТоваров",);
	СтруктураДанных.Вставить("ПорядковыйНомерПродажи",);
	СтруктураДанных.Вставить("РабочееМесто");
	
	Возврат СтруктураДанных;
	
КонецФункции

// Возвращает структуру данных для пробития чека.
//
// Возвращаемое значение:
//  ДляПробитияЧека - Структура - содержит:
//    ЧекККМСсылка - ДокументСсылка.ЧекККМ, Неопределено - ссылка на чек;
//    ТранспортныйМодуль - транспортный модуль ЕГАИС;
//    НомерЧека - Число - номер чека ККМ;
//    ТекстСообщения - Строка - текст сообщения при фискализации;
//    Объект - ДанныеФормыКоллекция - данные документа "Чек ККМ" или обработки "РМКУправляемыйРежим";
//    ЭтоВозвратПродукцииИСМПБезМарки - Булево - признак возврата без марки продукции ИСМП;
//    ЕстьАлкогольнаяПродукцияЕГАИС - Булево - признак наличия алкогольной продукции в документе;
//    НеПечататьБумажныйЧек - Булево - произнак печати чека на кассовой ленте ККТ.
//
Функция СтруктураДанныхДляПробитияЧека() Экспорт 
	
	ДляПробитияЧека = Новый Структура();
	
	ДляПробитияЧека.Вставить("ЧекККМСсылка", Неопределено);
	ДляПробитияЧека.Вставить("ТранспортныйМодуль", Неопределено);
	ДляПробитияЧека.Вставить("НомерЧека", 0);
	ДляПробитияЧека.Вставить("ТекстСообщения", НСтр("ru = ''"));
	ДляПробитияЧека.Вставить("Объект", Неопределено);
	ДляПробитияЧека.Вставить("ЭтоВозвратПродукцииИСМПБезМарки", Ложь);
	ДляПробитияЧека.Вставить("ЕстьАлкогольнаяПродукцияЕГАИС", Ложь);
	ДляПробитияЧека.Вставить("НеПечататьБумажныйЧек", Ложь);
	ДляПробитияЧека.Вставить("РабочееМестоКассира", Ложь);
	ДляПробитияЧека.Вставить("ВариантЗаполненияМестаРасчетов", 0);
	ДляПробитияЧека.Вставить("ВариантЗаполненияКассира", 0);
	ДляПробитияЧека.Вставить("ДанныеЕГАИСДостаточны", Ложь);
	
	Возврат ДляПробитияЧека;
	
КонецФункции

// Возвращает структуру для получения списка подарков из скидки.
//
// Возвращаемое значение:
//  СтруктураДанных - Структура
//
Функция СтруктураДляПолученияПодарковИзСкидки() Экспорт 
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("СкидкаНаценка");
	СтруктураДанных.Вставить("КоличествоНаборов");
	СтруктураДанных.Вставить("СкладПродажиПоУмолчанию");
	СтруктураДанных.Вставить("Магазин");
	СтруктураДанных.Вставить("РабочееМесто");
	СтруктураДанных.Вставить("АдресПримененныхСкидокВоВременномХранилище");
	СтруктураДанных.Вставить("КонтролироватьОстаткиТоваровПриЗакрытииЧека");
	СтруктураДанных.Вставить("УникальныйИдентификатор");
	
	Возврат СтруктураДанных;
	
КонецФункции

// Возвращает структуру для заполнения таблицы чеков.
//
// Возвращаемое значение:
//  СтруктураДанных - Структура
//
Функция СтруктураДляЗаполненияТаблицыЧеков() Экспорт 
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("СуммаОстаткаДокументаРасчета");
	СтруктураДанных.Вставить("УникальныйИдентификатор");
	СтруктураДанных.Вставить("ТаблицаКассККМОрганизаций");
	СтруктураДанных.Вставить("ТекущаяКассаККМ");
	
	Возврат СтруктураДанных;
	
КонецФункции

// Возвращает структуру для заполнения табличной части.
//
// Возвращаемое значение:
//  СтруктураДанных - Структура
//
Функция СтруктураДляЗаполненияТабличнойЧасти() Экспорт 
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ОплатаТолькоНаличными");
	СтруктураДанных.Вставить("ВестиУчетМаркируемойПродукцииИСМП");
	СтруктураДанных.Вставить("КонтролироватьОстаткиТоваровПриЗакрытииЧека");
	СтруктураДанных.Вставить("ОрганизацияЕГАИС");
	СтруктураДанных.Вставить("ЭтоВозвратПродукцииИСМПБезМарки");
	
	Возврат СтруктураДанных;
	
КонецФункции

// Возвращает коллекцию параметров выемки денежных средств из кассы ККМ.
//
// Возвращаемое значение:
//  ПараметрыВыемкиИзКассы - Структура.
//
Функция ПараметрыВыемкиИзКассы() Экспорт
	
	ПараметрыВыемкиИзКассы = Новый Структура;
	ПараметрыВыемкиИзКассы.Вставить("КассаККМ");
	ПараметрыВыемкиИзКассы.Вставить("ДоговорКонтрагента");
	ПараметрыВыемкиИзКассы.Вставить("СуммаОстаток");
	ПараметрыВыемкиИзКассы.Вставить("СуммаОстатокАгентские");
	ПараметрыВыемкиИзКассы.Вставить("МаксимальнаяСуммаРазмена");
	ПараметрыВыемкиИзКассы.Вставить("ПроизводитьВыемку");
	ПараметрыВыемкиИзКассы.Вставить("ЗапрашиватьСуммуВыемки");
	ПараметрыВыемкиИзКассы.Вставить("ИспользоватьАгентскиеПлатежиИРазделениеВыручки");
	
	Возврат ПараметрыВыемкиИзКассы;
	
КонецФункции


#КонецОбласти
