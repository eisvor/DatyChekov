#Область ПрограммныйИнтерфейс

// Процедура, вызываемая из одноименного обработчика события формы узла плана обмена "Обмен с сайтом".
//
// Параметры:
//  Форма - УправляемаяФорма - форма, из обработчика события которой происходит вызов процедуры.
//  Отказ - Булево - признак отказа от выполнения действия.
//
Процедура ФормаУзлаПриОткрытии(Форма, Отказ) Экспорт
	
	УстановитьГотовностьКУдаленнойФискализации(Форма);
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы узла плана обмена "Обмен с сайтом".
//
// Параметры:
//  Форма - УправляемаяФорма - форма, из обработчика события которой происходит вызов процедуры.
//  Отказ - Булево - признак отказа от выполнения действия.
//  ПараметрыЗаписи - Структура - Структура, содержащая параметры записи. 
//
Процедура ФормаУзлаПередЗаписью(Форма, Отказ, ПараметрыЗаписи) Экспорт
	
КонецПроцедуры


#Область ОбработчикиСобытийЭлементовФормы

// Обработчик события При изменении добавляемого поля ввода формы узла плана обмена.
// Параметры:
//  Элемент - ЭлементФормы - источник события.
//  Форма - УправляемаяФорма - Форма узла плана обмена.
//  Объект - ДанныеФормыСтруктура - данные формы узла плана обмена Обмен с сайтом.
//
Процедура ПолеВводаПриИзменении(Элемент, Форма, Объект) Экспорт
	
	Если Элемент.Имя = "КассаККМОплатыНаСайтеЭлемент" Тогда
		Форма.СтруктураГотовностиКУдаленнойФискализации = ОбменССайтомРТВызовСервера.ПолучитьСтруктуруГотовностиКУдаленнойФискализации(Форма.КассаККМ);
		УстановитьГотовностьКУдаленнойФискализации(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события При изменении добавляемого поля флажка формы узла плана обмена.
//
// Параметры:
//  Элемент - ЭлементФормы - источник события.
//  Форма - УправляемаяФорма - Форма узла плана обмена.
//  Объект - ДанныеФормыСтруктура - данные формы узла плана обмена Обмен с сайтом.
//
Процедура ПолеФлажкаПриИзменении(Элемент, Форма, Объект) Экспорт
	
	Если Элемент.Имя = "УдаленнаяФискализацияЭлемент" Тогда
		Форма.СтруктураГотовностиКУдаленнойФискализации = ОбменССайтомРТВызовСервера.ПолучитьСтруктуруГотовностиКУдаленнойФискализации(Форма.КассаККМ);
		УстановитьГотовностьКУдаленнойФискализации(Форма);
	КонецЕсли;
	
КонецПроцедуры


// Обработчик события ПередОкончаниемРедактирования табличной части формы узла обмена.
//
// Параметры:
//  Элемент - Строка - источник события.
//  НоваяСтрока - Булево - Истина, если строка была добавлена или скопирована.
//  ОтменаРедактирования - Булево - Истина, если произошла отмена редактирования.
//  Отказ - Булево - Признак отказа от записи объекта.
//  Форма - УправляемаяФорма - Форма узла обмена.
//  Объект - ДанныеФормыСтруктура - данные формы узла плана обмена Обмен с сайтом.
//
Процедура ТаблицаФормыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ,
	Форма, Объект) Экспорт
	
	Если Элемент.Имя = "СоответствиеСтатусовЗаказов" Тогда
		СоответствиеСтатусовЗаказовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, форма, Объект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УдаленнаяФискализация

Процедура УстановитьГотовностьКУдаленнойФискализации(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Если Элементы.Найти("УдаленнаяФискализацияЭлемент") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураГотовности = Форма.СтруктураГотовностиКУдаленнойФискализации;
	
	Если Не Форма.УдаленнаяФискализация Тогда
		Элементы.УдаленнаяФискализацияЭлемент.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		Возврат;
	Иначе
		Элементы.УдаленнаяФискализацияЭлемент.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	КонецЕсли;
	
	ЧастиФорматированнойСтроки = Новый Массив;
	
	Если СтруктураГотовности.ГотовностьКУдаленнойФискализации Тогда
		
		ЧастиФорматированнойСтроки.Добавить(
			Новый ФорматированнаяСтрока(НСтр("ru = 'Все готово для удаленной фискализации.'")));
		
	Иначе
		
		Если Не СтруктураГотовности.ПодключенаСистемаВзаимодействия Тогда
			ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Для автоматической фискализации необходимо включить систему'") + Символы.НПП));
			ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'обсуждения.'"),,,, ПолучитьНавигационнуюСсылку(ПолучитьФорму("Обработка.ПодключениеОбсуждений.Форма"))));
			ЧастиФорматированнойСтроки.Добавить(Символы.ПС);
		КонецЕсли;
		
		Если Не СтруктураГотовности.ВыбранаКассаККМ Тогда
			ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Необходимо выбрать кассу ККМ.'")));
		ИначеЕсли Не СтруктураГотовности.ККТСПередачейОФД Тогда
			ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Для удаленной фискализации необходима ККТ с функцией передачи в ОФД.")));
		ИначеЕсли Не СтруктураГотовности.НастроенаКассаККМ Тогда
			ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Необходимо в'") + Символы.НПП));
			ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'настройках ККТ'"),,,, ПолучитьНавигационнуюСсылку(СтруктураГотовности.ПодключаемоеОборудование)));
			ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(Символы.НПП + НСтр("ru = 'указать ""Устройство используется""'") + Символы.НПП));
			ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'и ""Автоматическая фискализация"".'")));
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.УдаленнаяФискализацияЭлемент.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(ЧастиФорматированнойСтроки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоответствиеСтатусовЗаказовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, Форма, Объект)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки = "";
	Если НЕ ПроверитьДублированиеСтатусов(Форма, Элемент, ИмяКолонки) Тогда
		Отказ = Истина;
		
		ОчиститьСообщения();
		
		Статус = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
		"СоответствиеСтатусовЗаказов",
		Форма.СоответствиеСтатусовЗаказов.Индекс(Элемент.ТекущиеДанные) + 1,
		ИмяКолонки);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		НСтр("ru = 'Такой статус заказа уже указан в другой строке таблицы.'"),
		Объект.Ссылка, Статус);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьДублированиеСтатусов(Форма, Элемент, ИмяКолонки)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтатусЗаказаНаСайте       = ТекущиеДанные.СтатусЗаказаНаСайте;
	СостояниеЗаказаПокупателя = ТекущиеДанные.СтатусЗаказаВБазе;
	
	Найдено = Форма.СоответствиеСтатусовЗаказов.НайтиСтроки(Новый Структура("СтатусЗаказаНаСайте", СтатусЗаказаНаСайте));
	Если Найдено.Количество() > 1 Тогда
		ИмяКолонки = "СтатусЗаказаНаСайте";
		Возврат Ложь;
	КонецЕсли;
	
	Найдено = Форма.СоответствиеСтатусовЗаказов.НайтиСтроки(Новый Структура("СтатусЗаказаВБазе", СостояниеЗаказаПокупателя));
	Если Найдено.Количество() > 1 Тогда
		ИмяКолонки = "СтатусЗаказаВБазе";
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


#КонецОбласти
