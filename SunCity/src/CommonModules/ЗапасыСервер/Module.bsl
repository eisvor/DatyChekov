////////////////////////////////////////////////////////////////////////////////
// ЗапасыСервер. Содержит вспомогательные процедуры и функции
//  обработки запасов.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПроцедурыФормированияДвижений

// Процедура записи движений в регистр ТоварыНаСкладах.
//
// Параметры:
//  ДополнительныеСвойства - Структура - структура дополнительных свойств для формирования движений.
//  Движения - движения документа для отражения в регистре "Товары на складах".
//  Отказ - Булево - признак отказа от выполнения операции.
//
Процедура ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТоварыНаСкладах;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ТоварыНаСкладах.Записывать = Истина;
	Движения.ТоварыНаСкладах.Загрузить(Таблица);
	
КонецПроцедуры

// Записывает движения в регистр ТоварыОрганизаций.
//
// Параметры:
//  ДополнительныеСвойства - Структура - структура дополнительных свойств для формирования движений.
//  Движения - движения документа для отражения в регистре "Товары организаций".
//  Отказ - Булево - признак отказа от выполнения операции.
//
Процедура ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Если ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаТоварыОрганизаций") Тогда
		Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТоварыОрганизаций;
		
		Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Движения.ТоварыОрганизаций.Записывать = Истина;
		Движения.ТоварыОрганизаций.Загрузить(Таблица);
	КонецЕсли;
	
КонецПроцедуры

// Записывает движения в регистр ТоварыКПоступлению.
//
// Параметры:
//  ДополнительныеСвойства - Структура - структура дополнительных свойств для формирования движений.
//  Движения - движения документа для отражения в регистре "Товары к поступлению".
//  Отказ - Булево - признак отказа от выполнения операции.
//
Процедура ОтразитьТоварыКПоступлению(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТоварыКПоступлению;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ТоварыКПоступлению.Записывать = Истина;
	Движения.ТоварыКПоступлению.Загрузить(Таблица);
	
КонецПроцедуры

// Записывает движения в регистр ТоварыКОтгрузке.
//
// Параметры:
//  ДополнительныеСвойства - Структура - структура дополнительных свойств для формирования движений.
//  Движения - движения документа для отражения в регистре "Товары к отгрузке".
//  Отказ - Булево - признак отказа от выполнения операции.
//
Процедура ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТоварыКОтгрузке;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ТоварыКОтгрузке.Записывать = Истина;
	Движения.ТоварыКОтгрузке.Загрузить(Таблица);
	
КонецПроцедуры

// Записывает движения в регистр ТоварыКОформлениюИзлишковНедостач.
//
// Параметры:
//  ДополнительныеСвойства - Структура - структура дополнительных свойств для формирования движений.
//  Движения - движения документа для отражения в регистре "Товары к оформлению излишков недостач".
//  Отказ - Булево - признак отказа от выполнения операции.
//
Процедура ОтразитьТоварыКОформлениюИзлишковНедостач(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТоварыКОформлениюИзлишковНедостач;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ТоварыКОформлениюИзлишковНедостач.Записывать = Истина;
	Движения.ТоварыКОформлениюИзлишковНедостач.Загрузить(Таблица);
	
КонецПроцедуры

// Записывает движения в регистр ТоварыКОформлениюОтчетовКомитенту.
//
// Параметры:
//  ДополнительныеСвойства - Структура - структура дополнительных свойств для формирования движений.
//  Движения - движения документа для отражения в регистре "Товары к оформлению отчетов комитенту".
//  Отказ - Булево - признак отказа от выполнения операции.
//
Процедура ОтразитьТоварыКОформлениюОтчетовКомитенту(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТоварыКОформлениюОтчетовКомитенту;
	
	Если Отказ Или Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.ТоварыКОформлениюОтчетовКомитенту.Записывать = Истина;
	Движения.ТоварыКОформлениюОтчетовКомитенту.Загрузить(Таблица);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыРаботыССерийнымиНомерамиИПоодарочнымиСертификатами

// Записывает движения в регистр ДвиженияСерийныхНомеров.
//
// Параметры:
//  ДополнительныеСвойства - Структура - структура дополнительных свойств для формирования движений.
//  Движения - движения документа для отражения в регистре "Движения серийных номеров".
//  Отказ - Булево - признак отказа от выполнения операции.
//
Процедура ОтразитьДвиженияСерийныхНомеров(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСерийныхНомеров;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ДвиженияСерийныхНомеров.Записывать = Истина;
	Движения.ДвиженияСерийныхНомеров.Загрузить(Таблица);
	
КонецПроцедуры

// Записывает движения в регистр ПодарочныеСертификаты.
//
// Параметры:
//  ДополнительныеСвойства - Структура - структура дополнительных свойств для формирования движений.
//  Движения - движения документа для отражения в регистре "Подарочные сертификаты".
//  Отказ - Булево - признак отказа от выполнения операции.
//
Процедура ОтразитьДвиженияПодарочныхСертификатов(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПодарочныхСертификатов;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ПодарочныеСертификаты.Записывать = Истина;
	Движения.ПодарочныеСертификаты.Загрузить(Таблица);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыРаботыССебестоимостью

// Записывает движения в регистр СебестоимостьНоменклатуры.
//
// Параметры:
//  ДополнительныеСвойства - Структура - структура дополнительных свойств для формирования движений.
//  Движения - движения документа для отражения в регистре "Себестоимость номенклатуры".
//  Отказ - Булево - признак отказа от выполнения операции.
//
Процедура ОтразитьДвиженияСебестоимостьНоменклатуры(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСебестоимостьНоменклатуры;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	Движения.СебестоимостьНоменклатуры.Записывать = Истина;
	Движения.СебестоимостьНоменклатуры.Загрузить(Таблица);
	
КонецПроцедуры

// Записывает движения в регистр СебестоимостьНоменклатуры.
//
// Параметры:
//  ДополнительныеСвойства - Структура - структура дополнительных свойств для формирования движений.
//  Движения - движения документа для отражения в регистре "Себестоимость номенклатуры".
//  Отказ - Булево - признак отказа от выполнения операции.
//
Процедура ОтразитьДвиженияСебестоимостьПоставкиТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСебестоимостьПоставкиТоваров;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	Движения.СебестоимостьПоставкиТоваров.Записывать = Истина;
	Движения.СебестоимостьПоставкиТоваров.Загрузить(Таблица);
	
КонецПроцедуры

// Получает способа учета себестоимости на определенную дату.
// Параметры:
//  Дата  - Дата - дата среза получения способа учета.
//
// Возвращаемое значение:
//  Структура - возвращает структуру данных способа учета себестоимости.
//
Функция ПолучитьСпособУчетаСебестоимости(Дата = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СпособУчета", Неопределено);
	Результат.Вставить("РаспределятьСтоимостьУслуг", Ложь);
	Результат.Вставить("ПравилоРаспределения", Неопределено);
	Результат.Вставить("РассчитыватьРегламентнымЗаданием", Ложь);

	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетСебестоимости") Тогда
		
		Период = ?(Дата = Неопределено, ТекущаяДатаСеанса(), Дата);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкаСпособаУчетаСебестоимостиСрезПоследних.СпособУчета КАК СпособУчета,
		|	НастройкаСпособаУчетаСебестоимостиСрезПоследних.РаспределятьСтоимостьУслуг КАК РаспределятьСтоимостьУслуг,
		|	НастройкаСпособаУчетаСебестоимостиСрезПоследних.ПравилоРаспределения КАК ПравилоРаспределения,
		|	НастройкаСпособаУчетаСебестоимостиСрезПоследних.РассчитыватьСебестоимостьРегламентнымЗаданием КАК РассчитыватьРегламентнымЗаданием
		|ИЗ
		|	РегистрСведений.НастройкаСпособаУчетаСебестоимости.СрезПоследних(&Период, ) КАК НастройкаСпособаУчетаСебестоимостиСрезПоследних";
		
		Запрос.УстановитьПараметр("Период", Период);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			ЗаполнитьЗначенияСвойств(Результат, Выборка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обновляет себестоимости товаров.
//
Процедура РасчетСебестоимости() Экспорт
	
	Документы.УстановкаСебестоимости.ВыполнитьРегламентноеЗаданиеРасчетСебестоимости();
	
КонецПроцедуры

// Рассчитывает себестоимости документа УстановкаСебестоимости.
// Параметры:
//  Объект  -  ДокументОбъект.УстановкаСебестоимости - Документ расчета себестоимости.
//
Процедура РассчитатьСебестоимостьНаСервере(Объект)Экспорт
	
	Объект.Товары.Очистить();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СтруктураПериод = Новый Структура("НачалоПериода, КонецПериода", НачалоМесяца(Объект.Дата), КонецМесяца(Объект.Дата));
	НастройкаСпособаУчета = ЗапасыСервер.ПолучитьСпособУчетаСебестоимости(Объект.Дата);
	
	// Формирование узлов стоимости.
	КоличествоУзлов = СформироватьУзлыКорректировкиСписанияСтоимости(СтруктураПериод, НастройкаСпособаУчета, МенеджерВременныхТаблиц);
	
	Если КоличествоУзлов <> 0 Тогда
		
		РассчитатьСтоимость(СтруктураПериод, МенеджерВременныхТаблиц);
		ЗарегистрироватьСтоимость(СтруктураПериод, МенеджерВременныхТаблиц, Объект);
		
	КонецЕсли;
	
КонецПроцедуры

// Распределяет стоимости услуг на себестоимость товаров.
//
// Параметры:
//  УслугиНаРаспределение - ТаблицаЗначений - массив услуг на распределение стоимости.
//  ПравилоРаспределения - ПеречислениеСсылка.ПравилаРаспределенияНаСебестоимостьТоваров - правило распределения стоимости.
//  ТаблицаСебестоимостиНоменклатуры - ТаблицаЗначений - таблица себестоимости товаров.
//  СпособУчета - ПеречислениеСсылка.СпособыУчетаСебестоимости - способ учета себестоимости товаров.
//  ТаблицаСебестоимостиПоставкиТоваров - ТаблицаЗначений - таблица себестоимости поставки товаров.
//  ИмяКолонкиБазыСумма - Строка - наименование колонки "база сумма".
//
Процедура РаспределитьУслугиНаСебестоимость(УслугиНаРаспределение, ПравилоРаспределения, ТаблицаСебестоимостьНоменклатуры,
											СпособУчета, ТаблицаСебестоимостьПоставкиТоваров = Неопределено, ИмяКолонкиБазыСумма = "Сумма") Экспорт
	
	Если УслугиНаРаспределение.Количество() = 0
		ИЛИ СпособУчета = Перечисления.СпособыУчетаСебестоимости.ПриниматьИзУправляющейСистемы Тогда
		
		Возврат;
	КонецЕсли;
	
	Если СпособУчета = Перечисления.СпособыУчетаСебестоимости.АвтономныйУчет ИЛИ ТаблицаСебестоимостьПоставкиТоваров = Неопределено Тогда
		ТаблицаНоменклатуры = ТаблицаСебестоимостьНоменклатуры;
	Иначе
		ТаблицаНоменклатуры = ТаблицаСебестоимостьПоставкиТоваров;
	КонецЕсли;
	
	Для Каждого Услуга Из УслугиНаРаспределение Цикл
		
		Если ПравилоРаспределения = Перечисления.ПравилаРаспределенияНаСебестоимостьТоваров.ПропорциональноКоличеству Тогда
			МассивКоэфф = ТаблицаНоменклатуры.ВыгрузитьКолонку("Количество");
		Иначе
			МассивКоэфф = ТаблицаНоменклатуры.ВыгрузитьКолонку(ИмяКолонкиБазыСумма);
			Если ТаблицаНоменклатуры.Итог(ИмяКолонкиБазыСумма) = 0 Тогда
				Для Каждого Коэфф Из МассивКоэфф Цикл
					Коэфф = 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		РаспределенныйМассив = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(Услуга.Сумма, МассивКоэфф);
		Индекс = 0;
		
		Если РаспределенныйМассив = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого СтрокаТоваров Из ТаблицаНоменклатуры Цикл
			СебестоимостьСтроки = РаспределенныйМассив[Индекс];
			СтрокаТоваров.Сумма = СтрокаТоваров.Сумма + СебестоимостьСтроки;
			
			СтрокаТоваров.Цена = СтрокаТоваров.Сумма / СтрокаТоваров.Количество;
			Индекс = Индекс + 1;
			
		КонецЦикла;
	КонецЦикла;
	
	Если СпособУчета = Перечисления.СпособыУчетаСебестоимости.АвтономныйУчет ИЛИ ТаблицаСебестоимостьПоставкиТоваров = Неопределено Тогда
		ТаблицаСебестоимостьНоменклатуры = ТаблицаНоменклатуры;
	Иначе
		ТаблицаСебестоимостьПоставкиТоваров = ТаблицаНоменклатуры;
	КонецЕсли;
	
КонецПроцедуры

// Распределяет стоимости комплекта на себестоимость комплектующих по долям стоимости.
//
// Параметры:
//  ТаблицаСебестоимостьКомплекта - ТаблицаЗначений - таблица себестоимости комплекта поставки.
//  ТаблицаСебестоимостьКомплектующих - ТаблицаЗначений - таблица себестоимости комплектующих поставки.
//
Процедура РаспределитьСебестоимостьПоДолямСтоимости(ТаблицаСебестоимостьКомплекта, ТаблицаСебестоимостьКомплектующих) Экспорт
	
	Если ТаблицаСебестоимостьКомплекта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СуммаКРаспределению = ТаблицаСебестоимостьКомплекта[0].Себестоимость * ТаблицаСебестоимостьКомплекта[0].Количество;
	МассивКоэфф = ТаблицаСебестоимостьКомплектующих.ВыгрузитьКолонку("ДоляСтоимости");
	
	РаспределенныйМассив = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаКРаспределению, МассивКоэфф);
	Если НЕ РаспределенныйМассив = Неопределено Тогда
		ТаблицаСебестоимостьКомплектующих.ЗагрузитьКолонку(РаспределенныйМассив, "Сумма");
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаСебестоимостьКомплектующих Цикл
		Строка.Цена = Строка.Сумма/Строка.Количество;
	КонецЦикла;
	
	ТаблицаСебестоимостьКомплектующих.Колонки.Удалить("ДоляСтоимости");
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыРаботыСНоменклатуройПоставщиков

// Записывает движения в регистр НоменклатураПоставщиков.
//
// Параметры:
//  ДополнительныеСвойства - Структура - структура дополнительных свойств для формирования движений.
//  Движения - движения документа для отражения в регистре "Себестоимость номенклатуры".
//  Отказ - Булево - признак отказа от выполнения операции.
//
Процедура ОтразитьДвиженияНоменклатураПоставщиков(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНоменклатураПоставщиков;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из Таблица Цикл
		Запись = РегистрыСведений.НоменклатураПоставщиков.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТЧ);
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыРаботыСЗаказамиПоставщикамИЗаказамиНаПеремещение

// Формирует таблицу значений с документами "Заказы поставщикам" для закрытия.
//
// Параметры:
//  Дата    - Дата                      - дата относительно которой будет рассчитываться просрочка поставки.
//  Магазин - СправочникСсылка.Магазины - Магазин по которому необходимо закрыть заказы поставщикам.
//  Контрагент - СправочникСсылка.Контрагенты - Контрагент по которому необходимо закрыть заказы поставщикам.
//
// Возвращаемое значение:
//  Таблица значений - таблица значений документов для закрытия.
//
Функция ПолучитьЗаказыПоставщикамДляЗакрытия(Дата, МассивМагазинов = Неопределено, Контрагент = Неопределено)
	
	Перем Результат;
	
	ТекстОграниченияПоМагазинам = "";
	Если МассивМагазинов <> Неопределено Тогда
		Если ТипЗнч(МассивМагазинов) = Тип("Массив") 
			И МассивМагазинов.Количество() > 0 Тогда
			ТекстОграниченияПоМагазинам = "И ЗаказПоставщику.Магазин В(&МассивМагазинов)";
		ИначеЕсли ТипЗнч(МассивМагазинов) = Тип("СправочникСсылка.Магазины")
			И ЗначениеЗаполнено(МассивМагазинов) Тогда
			ТекстОграниченияПоМагазинам = "И ЗаказПоставщику.Магазин  = &МассивМагазинов";
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ЗаказПоставщику.Ссылка,
	|	ЗаказПоставщику.Дата КАК ДатаЗаказа,
	|	ЗаказПоставщику.ДатаПоступления,
	|	ЗаказПоставщику.ДнейПросрочкиПоставки
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Проведен
	|" + ТекстОграниченияПоМагазинам + "
	|" + ?(ЗначениеЗаполнено(Контрагент), " И ЗаказПоставщику.Контрагент = &Контрагент", "") + "
	|	И НЕ ЗаказПоставщику.Бессрочный
	|	И ДОБАВИТЬКДАТЕ(ЗаказПоставщику.ДатаПоступления, ДЕНЬ, ЗаказПоставщику.ДнейПросрочкиПоставки) <= &Дата
	|	И НЕ ЗаказПоставщику.Закрыт
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПоставщику.Дата");
	
	Запрос.УстановитьПараметр("МассивМагазинов", МассивМагазинов);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции 

// Формирует таблицу значений с документами "Заказы на перемещение" для закрытия.
//
// Параметры:
//  Дата    - Дата                      - дата относительно которой будет рассчитываться просрочка поставки.
//  Магазин - СправочникСсылка.Магазины - Магазин по которому необходимо закрыть заказы поставщикам.
//  Контрагент - СправочникСсылка.Контрагенты - Контрагент по которому необходимо закрыть заказы поставщикам.
//
// Возвращаемое значение:
//  Таблица значений - таблица документов "заказы на перемещение для закрытия".
//
Функция ПолучитьЗаказыНаПеремещениеДляЗакрытия(Дата, МассивМагазинов = Неопределено, Поставщик = Неопределено)
	
	Перем Результат;
	
	ТекстОграниченияПоМагазинам = "";
	Если МассивМагазинов <> Неопределено Тогда
		Если ТипЗнч(МассивМагазинов) = Тип("Массив") 
			И МассивМагазинов.Количество() > 0 Тогда
			ТекстОграниченияПоМагазинам = "И ЗаказНаПеремещение.МагазинПолучатель В(&МассивМагазинов)";
		ИначеЕсли ТипЗнч(МассивМагазинов) = Тип("СправочникСсылка.Магазины")
			И ЗначениеЗаполнено(МассивМагазинов) Тогда
			ТекстОграниченияПоМагазинам = "И ЗаказНаПеремещение.МагазинПолучатель = &МассивМагазинов";
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ЗаказНаПеремещение.Ссылка,
	|	ЗаказНаПеремещение.Дата КАК ДатаЗаказа,
	|	ЗаказНаПеремещение.ЖелаемаяДатаПоступления КАК ДатаПоступления
	|ИЗ
	|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	|ГДЕ
	|	ЗаказНаПеремещение.Проведен
	|" + ТекстОграниченияПоМагазинам + "
	|" + ?(ЗначениеЗаполнено(Поставщик), " И ЗаказНаПеремещение.МагазинОтправитель = &Поставщик", "") + "
	|	И ЗаказНаПеремещение.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт)
	|	И ЗаказНаПеремещение.ЖелаемаяДатаПоступления <= &Дата
	|	И НЕ ЗаказНаПеремещение.МагазинОтправитель.СкладУправляющейСистемы
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказНаПеремещение.Дата");
	
	Запрос.УстановитьПараметр("МассивМагазинов", МассивМагазинов);
	Запрос.УстановитьПараметр("Поставщик", Поставщик);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Функция формирует таблицу значений с документами для закрытия.
//
// Параметры:
//  Дата    - Дата                      - дата относительно которой будет рассчитываться просрочка поставки.
//  Магазин - СправочникСсылка.Магазины - Магазин по которому необходимо закрыть заказы поставщикам.
//  Поставщик - СправочникСсылка.Контрагенты или СправочникСсылка.Магазин - Контрагент или магазин по которому
//              необходимо закрыть заказы поставщикам и/или заказы на перемещение.
//
// Возвращаемое значение:
//  Таблица значений - таблица документов для закрытия.
//
Функция ПолучитьЗаказыПоставщикамЗаказыНаПеремещениеДляЗакрытия(Дата, МассивМагазинов = Неопределено, Поставщик = Неопределено) Экспорт
	
	Перем Результат;
	
	ТекстОграниченияЗаказПоставщикуПоМагазинам = "";
	ТекстОграниченияЗаказНаПеремещениеПоМагазинам = "";
	Если МассивМагазинов <> Неопределено Тогда
		Если ТипЗнч(МассивМагазинов) = Тип("Массив") 
			И МассивМагазинов.Количество() > 0 Тогда
			ТекстОграниченияЗаказПоставщикуПоМагазинам = "И ЗаказПоставщику.Магазин В(&МассивМагазинов)";
			ТекстОграниченияЗаказНаПеремещениеПоМагазинам = "И ЗаказНаПеремещение.МагазинПолучатель В(&МассивМагазинов)";
		ИначеЕсли ТипЗнч(МассивМагазинов) = Тип("СправочникСсылка.Магазины")
			И ЗначениеЗаполнено(МассивМагазинов) Тогда
			ТекстОграниченияЗаказПоставщикуПоМагазинам = "И ЗаказПоставщику.Магазин = &МассивМагазинов";
			ТекстОграниченияЗаказНаПеремещениеПоМагазинам = "И ЗаказНаПеремещение.МагазинПолучатель = &МассивМагазинов";
		КонецЕсли;
	КонецЕсли;
	
	ТекстОграниченияЗаказПоставщикуПоПоставщику = ?(ЗначениеЗаполнено(Поставщик), " И ЗаказПоставщику.Контрагент = &Поставщик", "");
	ТекстОграниченияЗаказНаПеремещениеПоПоставщику = ?(ЗначениеЗаполнено(Поставщик), " И ЗаказНаПеремещение.МагазинОтправитель = &Поставщик", "");
	
	Запрос = Новый Запрос;
	
	ТекстЗапросаПоЗаказамПоставщику = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ЗаказПоставщику.Ссылка КАК Ссылка,
	|	ЗаказПоставщику.Дата КАК ДатаЗаказа,
	|	ЗаказПоставщику.ДатаПоступления КАК ДатаПоступления,
	|	ЗаказПоставщику.Магазин КАК Магазин,
	|	ЗаказПоставщику.Контрагент КАК Поставщик,
	|	ЗаказПоставщику.ДнейПросрочкиПоставки КАК ДнейПросрочкиПоставки
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Проведен
	|	%ТекстОграниченияЗаказПоставщикуПоМагазинам%
	|	%ТекстОграниченияЗаказПоставщикуПоПоставщику%
	|	И НЕ ЗаказПоставщику.Бессрочный
	|	И ДОБАВИТЬКДАТЕ(ЗаказПоставщику.ДатаПоступления, ДЕНЬ, ЗаказПоставщику.ДнейПросрочкиПоставки) <= &Дата
	|	И НЕ ЗаказПоставщику.Закрыт";
	
	ТекстЗапросаПоЗаказамПоставщику = СтрЗаменить(ТекстЗапросаПоЗаказамПоставщику, "%ТекстОграниченияЗаказПоставщикуПоМагазинам%", ТекстОграниченияЗаказПоставщикуПоМагазинам);
	ТекстЗапросаПоЗаказамПоставщику = СтрЗаменить(ТекстЗапросаПоЗаказамПоставщику, "%ТекстОграниченияЗаказПоставщикуПоПоставщику%", ТекстОграниченияЗаказПоставщикуПоПоставщику);
	
	ТекстЗапросаОбъединитьВсе = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	ТекстЗапросаПоЗаказамНаПеремещение = "
	|ВЫБРАТЬ %РАЗРЕШЕННЫЕ%
	|	ЗаказНаПеремещение.Ссылка КАК Ссылка,
	|	ЗаказНаПеремещение.Дата КАК ДатаЗаказа,
	|	ЗаказНаПеремещение.ЖелаемаяДатаПоступления КАК ДатаПоступления,
	|	ЗаказНаПеремещение.МагазинПолучатель КАК Магазин,
	|	ЗаказНаПеремещение.МагазинОтправитель КАК Поставщик,
	|	0 КАК ДнейПросрочкиПоставки
	|ИЗ
	|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	|ГДЕ
	|	ЗаказНаПеремещение.Проведен
	|	%ТекстОграниченияЗаказНаПеремещениеПоМагазинам%
	|	%ТекстОграниченияЗаказНаПеремещениеПоПоставщику%
	|	И ЗаказНаПеремещение.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт)
	|	И ЗаказНаПеремещение.ЖелаемаяДатаПоступления < &Дата
	|	И НЕ ЗаказНаПеремещение.МагазинОтправитель.СкладУправляющейСистемы";

	ТекстЗапросаПоЗаказамНаПеремещение = СтрЗаменить(ТекстЗапросаПоЗаказамНаПеремещение, "%ТекстОграниченияЗаказНаПеремещениеПоМагазинам%", ТекстОграниченияЗаказНаПеремещениеПоМагазинам);
	ТекстЗапросаПоЗаказамНаПеремещение = СтрЗаменить(ТекстЗапросаПоЗаказамНаПеремещение, "%ТекстОграниченияЗаказНаПеремещениеПоПоставщику%", ТекстОграниченияЗаказНаПеремещениеПоПоставщику);
	
	Если Поставщик = Неопределено Тогда
		ТекстЗапросаПоЗаказамНаПеремещение = СтрЗаменить(ТекстЗапросаПоЗаказамНаПеремещение, "%РАЗРЕШЕННЫЕ%", "");
		ТекстЗапроса = ТекстЗапросаПоЗаказамПоставщику + ТекстЗапросаОбъединитьВсе + ТекстЗапросаПоЗаказамНаПеремещение;
	ИначеЕсли ТипЗнч(Поставщик) = Тип("СправочникСсылка.Контрагенты") Тогда 
		ТекстЗапроса = ТекстЗапросаПоЗаказамПоставщику;
	ИначеЕсли ТипЗнч(Поставщик) = Тип("СправочникСсылка.Магазины") Тогда
		ТекстЗапросаПоЗаказамНаПеремещение = СтрЗаменить(ТекстЗапросаПоЗаказамНаПеремещение, "%РАЗРЕШЕННЫЕ%", "РАЗРЕШЕННЫЕ");
		ТекстЗапроса = ТекстЗапросаПоЗаказамНаПеремещение;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивМагазинов", МассивМагазинов);
	Запрос.УстановитьПараметр("Поставщик", Поставщик);
	Запрос.УстановитьПараметр("Дата", Дата);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Результат.Сортировать("ДатаЗаказа Возр");
	
	Возврат Результат;
	
КонецФункции 

#КонецОбласти

#Область ПроцедурыОбработчикиРегламентыхЗаданий

// Обновляет регистр сведений "ИнформативныеОстаткиТоваровПоМагазинам".
//
Процедура ОбновлениеРегистраСведенийИнформативныеОстаткиТоваровДляМагазинов() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ИнформативныеОстаткиТоваровПоМагазинам");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		Если ПустаяСтрока(ИмяПользователя()) Тогда
			УстановитьПривилегированныйРежим(Истина);
		КонецЕсли;
		
		Если НЕ ОбменДаннымиРТ.ЭтоПодчиненныйУзелПоМагазину()
			И НЕ ОбменДаннымиРТ.ЭтоПодчиненныйУзелПоРабочемуМесту() Тогда
			СравнениеОстатков = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗапросДанныхДляИзменения.Магазин,
			|	ЗапросДанныхДляИзменения.Номенклатура,
			|	ЗапросДанныхДляИзменения.Характеристика,
			|	СУММА(ЗапросДанныхДляИзменения.КоличествоТоваровПоДаннымУчета) КАК Количество,
			|	СУММА(ЗапросДанныхДляИзменения.КоличествоТоваровДляМиграции) КАК КоличествоТоваровДляМиграции,
			|	СУММА(ЗапросДанныхДляИзменения.РезервТоваровДляМиграции) КАК РезервТоваровДляМиграции,
			|	СУММА(ЗапросДанныхДляИзменения.РезервТоваровПоДаннымУчета) КАК Резерв
			|ИЗ
			|	(ВЫБРАТЬ
			|		ИнформативныеОстаткиТоваровПоМагазинам.Магазин КАК Магазин,
			|		ИнформативныеОстаткиТоваровПоМагазинам.Номенклатура КАК Номенклатура,
			|		ИнформативныеОстаткиТоваровПоМагазинам.Характеристика КАК Характеристика,
			|		ИнформативныеОстаткиТоваровПоМагазинам.Количество КАК КоличествоТоваровДляМиграции,
			|		0 КАК КоличествоТоваровПоДаннымУчета,
			|		ИнформативныеОстаткиТоваровПоМагазинам.Резерв КАК РезервТоваровДляМиграции,
			|		0 КАК РезервТоваровПоДаннымУчета
			|	ИЗ
			|		РегистрСведений.ИнформативныеОстаткиТоваровПоМагазинам КАК ИнформативныеОстаткиТоваровПоМагазинам
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ТоварыНаСкладахОстатки.Склад.Магазин,
			|		ТоварыНаСкладахОстатки.Номенклатура,
			|		ТоварыНаСкладахОстатки.Характеристика,
			|		0,
			|		ТоварыНаСкладахОстатки.КоличествоОстаток,
			|		0,
			|		ТоварыНаСкладахОстатки.РезервОстаток
			|	ИЗ
			|		РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков, ) КАК ТоварыНаСкладахОстатки) КАК ЗапросДанныхДляИзменения
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗапросДанныхДляИзменения.Магазин,
			|	ЗапросДанныхДляИзменения.Номенклатура,
			|	ЗапросДанныхДляИзменения.Характеристика
			|
			|ИМЕЮЩИЕ
			|	(СУММА(ЗапросДанныхДляИзменения.КоличествоТоваровДляМиграции) <> СУММА(ЗапросДанныхДляИзменения.КоличествоТоваровПоДаннымУчета)
			|		ИЛИ СУММА(ЗапросДанныхДляИзменения.РезервТоваровДляМиграции) <> СУММА(ЗапросДанныхДляИзменения.РезервТоваровПоДаннымУчета))");
			
			СравнениеОстатков.УстановитьПараметр("ДатаОстатков", КонецДня(ТекущаяДатаСеанса()));
			Выборка = СравнениеОстатков.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				НаборЗаписей = РегистрыСведений.ИнформативныеОстаткиТоваровПоМагазинам.СоздатьНаборЗаписей();
				
				НаборЗаписей.Отбор.Магазин.Установить(Выборка.Магазин);
				НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
				НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика);
				
				НаборЗаписей.Прочитать();
				
				НаборЗаписей.Очистить();
				
				Если Выборка.Количество <> 0 Тогда
					Запись = НаборЗаписей.Добавить();
					Запись.Магазин                    = Выборка.Магазин;
					Запись.Номенклатура               = Выборка.Номенклатура;
					Запись.Характеристика             = Выборка.Характеристика;
					Запись.Количество                 = Выборка.Количество;
					Запись.Резерв                     = Выборка.Резерв;
				КонецЕсли;
				
				НаборЗаписей.Записать();
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

// Обновляет регистр сведений "ИнформативныеОстаткиТоваровПоСкладам".
//
Процедура ОбновлениеРегистраСведенийИнформативныеОстаткиТоваровДляРабочихМест() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ИнформативныеОстаткиТоваровПоСкладам");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		Если ПустаяСтрока(ИмяПользователя()) Тогда
			УстановитьПривилегированныйРежим(Истина);
		КонецЕсли;
		
		Если НЕ ОбменДаннымиРТ.ЭтоПодчиненныйУзелПоРабочемуМесту() Тогда 
			
			СравнениеОстатков = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗапросДанныхДляИзменения.Склад,
			|	ЗапросДанныхДляИзменения.Номенклатура,
			|	ЗапросДанныхДляИзменения.Характеристика,
			|	СУММА(ЗапросДанныхДляИзменения.КоличествоТоваровПоДаннымУчета) КАК Количество,
			|	СУММА(ЗапросДанныхДляИзменения.КоличествоТоваровДляМиграции) КАК КоличествоТоваровДляМиграции,
			|	СУММА(ЗапросДанныхДляИзменения.РезервТоваровДляМиграции) КАК РезервТоваровДляМиграции,
			|	СУММА(ЗапросДанныхДляИзменения.РезервТоваровПоДаннымУчета) КАК Резерв
			|ИЗ
			|	(ВЫБРАТЬ
			|		ИнформативныеОстаткиТоваровПоСкладам.Склад КАК Склад,
			|		ИнформативныеОстаткиТоваровПоСкладам.Номенклатура КАК Номенклатура,
			|		ИнформативныеОстаткиТоваровПоСкладам.Характеристика КАК Характеристика,
			|		ИнформативныеОстаткиТоваровПоСкладам.Количество КАК КоличествоТоваровДляМиграции,
			|		0 КАК КоличествоТоваровПоДаннымУчета,
			|		ИнформативныеОстаткиТоваровПоСкладам.Резерв КАК РезервТоваровДляМиграции,
			|		0 КАК РезервТоваровПоДаннымУчета
			|	ИЗ
			|		РегистрСведений.ИнформативныеОстаткиТоваровПоСкладам КАК ИнформативныеОстаткиТоваровПоСкладам
			|	ГДЕ
			|		ИнформативныеОстаткиТоваровПоСкладам.Склад.Магазин В(&МассивОграниченийПоМагазинам)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ТоварыНаСкладахОстатки.Склад,
			|		ТоварыНаСкладахОстатки.Номенклатура,
			|		ТоварыНаСкладахОстатки.Характеристика,
			|		0,
			|		ТоварыНаСкладахОстатки.КоличествоОстаток,
			|		0,
			|		ТоварыНаСкладахОстатки.РезервОстаток
			|	ИЗ
			|		РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков, Склад.Магазин В (&МассивОграниченийПоМагазинам)) КАК ТоварыНаСкладахОстатки) КАК ЗапросДанныхДляИзменения
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗапросДанныхДляИзменения.Склад,
			|	ЗапросДанныхДляИзменения.Номенклатура,
			|	ЗапросДанныхДляИзменения.Характеристика
			|
			|ИМЕЮЩИЕ
			|	(СУММА(ЗапросДанныхДляИзменения.КоличествоТоваровДляМиграции) <> СУММА(ЗапросДанныхДляИзменения.КоличествоТоваровПоДаннымУчета)
			|		ИЛИ СУММА(ЗапросДанныхДляИзменения.РезервТоваровДляМиграции) <> СУММА(ЗапросДанныхДляИзменения.РезервТоваровПоДаннымУчета))");
			
			СравнениеОстатков.УстановитьПараметр("ДатаОстатков", КонецДня(ТекущаяДатаСеанса()));
			
			МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			ОбменДаннымиРТ.СоздатьВТДоступныеМагазины(МенеджерВременныхТаблиц, Ложь);
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СправочникМагазины.Ссылка КАК Магазин
			|ИЗ
			|	Справочник.Магазины КАК СправочникМагазины
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДоступныеМагазины КАК ВТДоступныеМагазины
			|		ПО СправочникМагазины.Ссылка = ВТДоступныеМагазины.Магазин";
			
			МассивОграниченийПоМагазинам = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Магазин");
			
			СравнениеОстатков.УстановитьПараметр("МассивОграниченийПоМагазинам",МассивОграниченийПоМагазинам);	
			
			Выборка = СравнениеОстатков.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				НаборЗаписей = РегистрыСведений.ИнформативныеОстаткиТоваровПоСкладам.СоздатьНаборЗаписей();
				
				НаборЗаписей.Отбор.Склад.Установить(Выборка.Склад);
				НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
				НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика);
				
				НаборЗаписей.Прочитать();
				
				НаборЗаписей.Очистить();
				
				Если Выборка.Количество <> 0 Тогда
					
					Запись = НаборЗаписей.Добавить();
					Запись.Склад                      = Выборка.Склад;
					Запись.Номенклатура               = Выборка.Номенклатура;
					Запись.Характеристика             = Выборка.Характеристика;
					Запись.Количество                 = Выборка.Количество;
					Запись.Резерв                     = Выборка.Резерв;
				КонецЕсли;
				
				НаборЗаписей.Записать();
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

// Обновляет номенклатуру поставщиков в регистре сведений
// "Номенклатура поставщиков".
Процедура ОбновлениеНоменклатурыПоставщиков() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(НоменклатураКорректировки.НоменклатураРегистра) КАК НоменклатураРегистра,
	|	МАКСИМУМ(НоменклатураКорректировки.НоменклатураДокумента) КАК НоменклатураДокумента,
	|	НоменклатураКорректировки.Поставщик,
	|	НоменклатураКорректировки.Магазин,
	|	НоменклатураКорректировки.Номенклатура,
	|	НоменклатураКорректировки.Характеристика
	|ПОМЕСТИТЬ НоменклатураКорректировки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИСТИНА КАК НоменклатураРегистра,
	|		ЛОЖЬ КАК НоменклатураДокумента,
	|		НоменклатураПоставщиков.Поставщик КАК Поставщик,
	|		НоменклатураПоставщиков.Магазин КАК Магазин,
	|		НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
	|		НоменклатураПоставщиков.Характеристика КАК Характеристика
	|	ИЗ
	|		РегистрСведений.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		НоменклатураДокументов.Контрагент,
	|		НоменклатураДокументов.Магазин,
	|		НоменклатураДокументов.Номенклатура,
	|		НоменклатураДокументов.Характеристика
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПоступлениеТоваров.Контрагент КАК Контрагент,
	|			ПоступлениеТоваров.Магазин КАК Магазин,
	|			ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	|			ПоступлениеТоваровТовары.Характеристика КАК Характеристика
	|		ИЗ
	|			Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	|				ПО ПоступлениеТоваров.Ссылка = ПоступлениеТоваровТовары.Ссылка
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПоставщикиНоменклатуры КАК ПоставщикиНоменклатуры
	|				ПО ПоступлениеТоваров.Контрагент = ПоставщикиНоменклатуры.Поставщик
	|		ГДЕ
	|			ПоступлениеТоваров.Проведен
	|			И ПоступлениеТоваров.Дата >= &ПериодОбновления
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗаказПоставщику.Контрагент,
	|			ЗаказПоставщику.Магазин,
	|			ЗаказПоставщикуТовары.Номенклатура,
	|			ЗаказПоставщикуТовары.Характеристика
	|		ИЗ
	|			Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|				ПО ЗаказПоставщику.Ссылка = ЗаказПоставщикуТовары.Ссылка
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПоставщикиНоменклатуры КАК ПоставщикиНоменклатуры
	|				ПО ЗаказПоставщику.Контрагент = ПоставщикиНоменклатуры.Поставщик
	|		ГДЕ
	|			ЗаказПоставщику.Проведен
	|			И ЗаказПоставщику.Дата >= &ПериодОбновления
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗаказНаПеремещение.МагазинОтправитель,
	|			ЗаказНаПеремещение.МагазинПолучатель,
	|			ЗаказНаПеремещениеТовары.Номенклатура,
	|			ЗаказНаПеремещениеТовары.Характеристика
	|		ИЗ
	|			Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение.Товары КАК ЗаказНаПеремещениеТовары
	|				ПО ЗаказНаПеремещение.Ссылка = ЗаказНаПеремещениеТовары.Ссылка
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПоставщикиНоменклатуры КАК ПоставщикиНоменклатуры
	|				ПО ЗаказНаПеремещение.МагазинОтправитель = ПоставщикиНоменклатуры.Поставщик
	|		ГДЕ
	|			ЗаказНаПеремещение.Проведен
	|			И ЗаказНаПеремещение.Дата >= &ПериодОбновления
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ПеремещениеТоваров.МагазинОтправитель,
	|			ПеремещениеТоваров.МагазинПолучатель,
	|			ПеремещениеТоваровТовары.Номенклатура,
	|			ПеремещениеТоваровТовары.Характеристика
	|		ИЗ
	|			Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|				ПО ПеремещениеТоваров.Ссылка = ПеремещениеТоваровТовары.Ссылка
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПоставщикиНоменклатуры КАК ПоставщикиНоменклатуры
	|				ПО ПеремещениеТоваров.МагазинОтправитель = ПоставщикиНоменклатуры.Поставщик
	|		ГДЕ
	|			ПеремещениеТоваров.Проведен
	|			И ПеремещениеТоваров.Дата >= &ПериодОбновления) КАК НоменклатураДокументов) КАК НоменклатураКорректировки
	|
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураКорректировки.Поставщик,
	|	НоменклатураКорректировки.Магазин,
	|	НоменклатураКорректировки.Номенклатура,
	|	НоменклатураКорректировки.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НоменклатураРегистра,
	|	НоменклатураДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатураКорректировки.Поставщик,
	|	НоменклатураКорректировки.Магазин,
	|	НоменклатураКорректировки.Номенклатура,
	|	НоменклатураКорректировки.Характеристика
	|ИЗ
	|	НоменклатураКорректировки КАК НоменклатураКорректировки
	|ГДЕ
	|	НоменклатураКорректировки.НоменклатураРегистра <> НоменклатураКорректировки.НоменклатураДокумента
	|	И НоменклатураКорректировки.НоменклатураРегистра
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатураКорректировки.Поставщик,
	|	НоменклатураКорректировки.Магазин,
	|	НоменклатураКорректировки.Номенклатура,
	|	НоменклатураКорректировки.Характеристика
	|ИЗ
	|	НоменклатураКорректировки КАК НоменклатураКорректировки
	|ГДЕ
	|	НоменклатураКорректировки.НоменклатураРегистра <> НоменклатураКорректировки.НоменклатураДокумента
	|	И НоменклатураКорректировки.НоменклатураДокумента");
	
	Запрос.УстановитьПараметр("ПериодОбновления", Константы.ПериодОбновленияПоставляемойНоменклатуры.Получить());
	
	МассивРезультатов           = Запрос.ВыполнитьПакет();
	РезультатУдаляемыхЗаписей   = МассивРезультатов[1];
	РезультатДобавляемыхЗаписей = МассивРезультатов[2];
	ВыборкаУдаляемыхЗаписей     = РезультатУдаляемыхЗаписей.Выбрать();
	ВыборкаДобавляемыхЗаписей   = РезультатДобавляемыхЗаписей.Выбрать();
	
	НачатьТранзакцию();
	Попытка
		
		Если НЕ РезультатУдаляемыхЗаписей.Пустой() Тогда
			
			Пока ВыборкаУдаляемыхЗаписей.Следующий() Цикл
				
				Запись = РегистрыСведений.НоменклатураПоставщиков.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, ВыборкаУдаляемыхЗаписей);
				Запись.Удалить();
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ РезультатДобавляемыхЗаписей.Пустой() Тогда
			
			Пока ВыборкаДобавляемыхЗаписей.Следующий() Цикл
				Запись = РегистрыСведений.НоменклатураПоставщиков.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, ВыборкаДобавляемыхЗаписей);
				Запись.Записать();
			КонецЦикла;
			
		КонецЕсли;
		
		// Обновление цен и даты поступления.
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваров.Дата КАК Дата,
		|	ПоступлениеТоваров.Контрагент КАК Контрагент,
		|	ПоступлениеТоваров.Магазин КАК Магазин,
		|	ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
		|	ПоступлениеТоваровТовары.Характеристика КАК Характеристика,
		|	ПоступлениеТоваровТовары.Цена КАК Цена,
		|	ПоступлениеТоваровТовары.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ Поступления
		|ИЗ
		|	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
		|		ПО ПоступлениеТоваровТовары.Ссылка = ПоступлениеТоваров.Ссылка
		|ГДЕ
		|	ПоступлениеТоваров.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(Поступления.Дата) КАК Дата,
		|	Поступления.Контрагент КАК Контрагент,
		|	Поступления.Магазин КАК Магазин,
		|	Поступления.Номенклатура КАК Номенклатура,
		|	Поступления.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ МаксимальнаяДата
		|ИЗ
		|	Поступления КАК Поступления
		|
		|СГРУППИРОВАТЬ ПО
		|	Поступления.Контрагент,
		|	Поступления.Магазин,
		|	Поступления.Номенклатура,
		|	Поступления.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Поступления.Дата КАК ДатаПоследнегоПоступления,
		|	Поступления.Контрагент КАК Контрагент,
		|	Поступления.Магазин КАК Магазин,
		|	Поступления.Номенклатура КАК Номенклатура,
		|	Поступления.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА Поступления.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА Поступления.Цена
		|		ИНАЧЕ Поступления.Цена / Поступления.Упаковка.Коэффициент
		|	КОНЕЦ КАК Цена
		|ПОМЕСТИТЬ ЦеныНоменклатуры
		|ИЗ
		|	Поступления КАК Поступления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальнаяДата КАК МаксимальнаяДата
		|		ПО Поступления.Дата = МаксимальнаяДата.Дата
		|			И Поступления.Контрагент = МаксимальнаяДата.Контрагент
		|			И Поступления.Магазин = МаксимальнаяДата.Магазин
		|			И Поступления.Номенклатура = МаксимальнаяДата.Номенклатура
		|			И Поступления.Характеристика = МаксимальнаяДата.Характеристика
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Контрагент,
		|	Магазин,
		|	Характеристика,
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НоменклатураПоставщиков.Поставщик КАК Поставщик,
		|	НоменклатураПоставщиков.Магазин КАК Магазин,
		|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
		|	НоменклатураПоставщиков.Характеристика КАК Характеристика,
		|	ЦеныНоменклатуры.ДатаПоследнегоПоступления КАК ДатаПоследнегоПоступления,
		|	ЦеныНоменклатуры.Цена КАК Цена
		|ИЗ
		|	РегистрСведений.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО НоменклатураПоставщиков.Поставщик = ЦеныНоменклатуры.Контрагент
		|			И НоменклатураПоставщиков.Магазин = ЦеныНоменклатуры.Магазин
		|			И НоменклатураПоставщиков.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|			И НоменклатураПоставщиков.Характеристика = ЦеныНоменклатуры.Характеристика
		|			И НоменклатураПоставщиков.ДатаПоследнегоПоступления <> ЦеныНоменклатуры.ДатаПоследнегоПоступления";
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Запись = РегистрыСведений.НоменклатураПоставщиков.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				Запись.Записать();
			КонецЦикла;
		КонецЕсли;
		
		Константы.ПризнакАктуальностиПоставляемойНоменклатуры.Установить(Истина);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление номенклатуры поставщиков'"),
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

// Закрывает документы заказы поставщикам, устанавливая флаг Закрыт в документе.
//
Процедура ЗакрытиеЗаказовПоставщикам() Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	МассивМагазинов = Новый Массив;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ОбменДаннымиРТ.СоздатьВТДоступныеМагазины(МенеджерВременныхТаблиц);
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СправочникМагазины.Ссылка КАК Магазин
		|ИЗ
		|	Справочник.Магазины КАК СправочникМагазины
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДоступныеМагазины КАК ВТДоступныеМагазины
		|		ПО СправочникМагазины.Ссылка = ВТДоступныеМагазины.Магазин";
		
		МассивМагазинов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Магазин");
	КонецЕсли;
	
	Дата = ТекущаяДатаСеанса();
	ТаблицаЗаказов = ПолучитьЗаказыПоставщикамДляЗакрытия(Дата, МассивМагазинов);
	
	ЗаписьЖурналаРегистрации(Нстр("ru ='Закрытие заказов поставщикам'"),
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Регламентное закрытие заказов поставщикам'"));
			
	Для каждого ЗаказПоставщику Из ТаблицаЗаказов Цикл
		
		ЗаказПоставщикуОбъект = ЗаказПоставщику.Ссылка.ПолучитьОбъект();
		ЗаказПоставщикуОбъект.Закрыт = Истина;
		
		
		Попытка
			
			ЗаказПоставщикуОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			ЗаписьЖурналаРегистрации(Нстр("ru ='Закрытие заказов поставщикам'"),
			УровеньЖурналаРегистрации.Информация, , ,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Регламентное закрытие заказа поставщику %1'"), ЗаказПоставщику.Ссылка));
			
		Исключение
			
			ЗаписьЖурналаРегистрации(Нстр("ru ='Закрытие заказов поставщикам'"),
			УровеньЖурналаРегистрации.Ошибка, , ,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Во время регламентного закрытия заказа поставщику %1, произошла ошибка:
			|%2'"),ЗаказПоставщику.Ссылка, ОписаниеОшибки()));
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Закрывает документы заказы на перемещение, устанавливая статус Закрыт в документе.
//
Процедура ЗакрытиеЗаказовНаПеремещение() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.Магазин");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		Если ПустаяСтрока(ИмяПользователя()) Тогда
			УстановитьПривилегированныйРежим(Истина);
		КонецЕсли;
		
		МассивМагазинов = Новый Массив;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") Тогда
			МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			ОбменДаннымиРТ.СоздатьВТДоступныеМагазины(МенеджерВременныхТаблиц);
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СправочникМагазины.Ссылка КАК Магазин
			|ИЗ
			|	Справочник.Магазины КАК СправочникМагазины
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДоступныеМагазины КАК ВТДоступныеМагазины
			|		ПО СправочникМагазины.Ссылка = ВТДоступныеМагазины.Магазин";
			
			МассивМагазинов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Магазин");
		КонецЕсли;
		
		Дата = ТекущаяДатаСеанса();
		ТаблицаЗаказов = ПолучитьЗаказыНаПеремещениеДляЗакрытия(Дата, МассивМагазинов);
		
		ЗаписьЖурналаРегистрации(Нстр("ru ='Закрытие заказов на перемещение'"),
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru = 'Регламентное закрытие заказов на перемещение'"));
				
		Для каждого ЗаказНаПеремещение Из ТаблицаЗаказов Цикл
			
			ЗаказНаПеремещениеОбъект = ЗаказНаПеремещение.Ссылка.ПолучитьОбъект();
			ЗаказНаПеремещениеОбъект.Статус = Перечисления.СтатусыВнутреннихЗаказов.Закрыт;
			ЗаказНаПеремещениеОбъект.ЗакрытВручную = Истина;
			
			Попытка
				
				ЗаказНаПеремещениеОбъект.Записать();
				
				ЗаписьЖурналаРегистрации(Нстр("ru ='Закрытие заказов на перемещение'"),
				УровеньЖурналаРегистрации.Информация, , ,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Регламентное закрытие заказа на перемещение %1'"), ЗаказНаПеремещение.Ссылка));
				
			Исключение
				
				ЗаписьЖурналаРегистрации(Нстр("ru ='Закрытие заказов на перемещение'"),
				УровеньЖурналаРегистрации.Ошибка, , ,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Во время регламентного закрытия заказа на перемещение %1, произошла ошибка:
				|%2'"),ЗаказНаПеремещение.Ссылка, ОписаниеОшибки()));
				
			КонецПопытки;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ФункцииЗаполненияЦенПоТЧДокументовТовародвижения

// Заполняет колонку Цена по себестоимости.
//
// Параметры:
//  Объект - ДокументОбъект.ПересортицаТоваров,
//           ДокументОбъект.ПересчетТоваров - документ в котором необходимо заполнить колонку табличной части.
//  ИмяТабличнойЧасти - Строка - наименование табличной части в которой необходимо заполнить колонку.
//  Дата - Дата - дата на которую берутся цены по себестоимости для заполнения.
//
// Возвращаемое значение:
//  Булево - результат выполнения операции.
//
Функция ЗаполнитьЦеныПоСебестоимости(Объект, ИмяТабличнойЧасти, Дата) Экспорт
	
	ЦеныРассчитаны = Ложь;
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;

	// заполнение цен
	Запрос = Новый Запрос;
	СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
	СформироватьЗапросПоСебестоимости(Запрос.Текст);
	Запрос.УстановитьПараметр("Товары", Объект[ИмяТабличнойЧасти].Выгрузить(, "НомерСтроки,Номенклатура,Характеристика,Упаковка"));
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Для Каждого ТекущаяСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекущаяСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена     = (НайденнаяСтрока <> Неопределено);
		
		Если Не ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекущаяСтрока.Цена  = НайденнаяСтрока.Цена;
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

// Заполняет колонку Цена по себестоимости в выделенных строках.
//
// Параметры:
//  Объект - ДокументОбъект.ПересортицаТоваров,
//           ДокументОбъект.ПересчетТоваров - документ в котором необходимо заполнить колонку табличной части.
//  ИмяТабличнойЧасти - Строка - наименование табличной части в которой необходимо заполнить колонку.
//  ВыделенныеСтроки - Массив - массив строк по которым необходимо заполнить колонку "Цена".
//  Дата - Дата - дата на которую берутся цены по себестоимости для заполнения.
//
// Возвращаемое значение:
//  Булево - результат выполнения операции.
//
Функция ЗаполнитьЦеныВыделенныхСтрокПоСебестоимости(Объект, ИмяТабличнойЧасти, ВыделенныеСтроки, Дата) Экспорт

	ЦеныРассчитаны = Ложь;
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если СтрокаТаблицы = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		МассивСтрок.Добавить(СтрокаТаблицы);
			
	КонецЦикла;
	
	Если МассивСтрок.Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;
	
	// заполнение цен
	Запрос = Новый Запрос;
	СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
	СформироватьЗапросПоСебестоимости(Запрос.Текст);
	Запрос.УстановитьПараметр("Товары", Объект[ИмяТабличнойЧасти].Выгрузить(МассивСтрок, "НомерСтроки,Номенклатура,Характеристика,Упаковка"));
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Для Каждого ТекущаяСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекущаяСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена     = (НайденнаяСтрока <> Неопределено);
		
		Если Не ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекущаяСтрока.Цена  = НайденнаяСтрока.Цена;
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок;
			
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;
	
	Возврат ЦеныРассчитаны;

КонецФункции

// Заполняет колонку Цена по себестоимости при пересортице.
//
Функция ЗаполнитьЦеныПоСебестоимостиПересортица(Объект, ИмяТабличнойЧасти, Дата) Экспорт
	
	ЦеныРассчитаны = Ложь;
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;

	// заполнение цен
	Запрос = Новый Запрос;
	СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
	СформироватьЗапросПоСебестоимости(Запрос.Текст);
	
	// Оприходование товаров
	ТаблицаТоваров = Объект[ИмяТабличнойЧасти].Выгрузить(, "НомерСтроки,НоменклатураОприходование,ХарактеристикаОприходование");
	ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаТоваров.ЗаполнитьЗначения(Справочники.УпаковкиНоменклатуры.ПустаяСсылка(), "Упаковка");
	
	ТаблицаТоваров.Колонки.НоменклатураОприходование.Имя   = "Номенклатура";
	ТаблицаТоваров.Колонки.ХарактеристикаОприходование.Имя = "Характеристика";
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Для Каждого ТекущаяСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекущаяСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена     = (НайденнаяСтрока <> Неопределено);
		
		Если Не ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекущаяСтрока.ЦенаОприходование  = НайденнаяСтрока.Цена;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;
	
	// Списание товаров
	ТаблицаТоваров = Объект[ИмяТабличнойЧасти].Выгрузить(, "НомерСтроки,Номенклатура,Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаТоваров.ЗаполнитьЗначения(Справочники.УпаковкиНоменклатуры.ПустаяСсылка(), "Упаковка");
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Для Каждого ТекущаяСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекущаяСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена     = (НайденнаяСтрока <> Неопределено);
		
		Если Не ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекущаяСтрока.Цена  = НайденнаяСтрока.Цена;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

// Функция заполнения колонки Цена по себестоимости при пересортице.
//
Функция ЗаполнитьЦеныВыделенныхСтрокПоСебестоимостиПересортица(Объект, ИмяТабличнойЧасти, ВыделенныеСтроки, Дата) Экспорт
	
	ЦеныРассчитаны = Ложь;
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если СтрокаТаблицы = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		МассивСтрок.Добавить(СтрокаТаблицы);
		
	КонецЦикла;
	
	Если МассивСтрок.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// заполнение цен
	Запрос = Новый Запрос;
	СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
	СформироватьЗапросПоСебестоимости(Запрос.Текст);
	
	// Оприходование товаров
	ТаблицаТоваров = Объект[ИмяТабличнойЧасти].Выгрузить(МассивСтрок, "НомерСтроки,НоменклатураОприходование,ХарактеристикаОприходование");
	ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаТоваров.ЗаполнитьЗначения(Справочники.УпаковкиНоменклатуры.ПустаяСсылка(), "Упаковка");
	
	ТаблицаТоваров.Колонки.НоменклатураОприходование.Имя   = "Номенклатура";
	ТаблицаТоваров.Колонки.ХарактеристикаОприходование.Имя = "Характеристика";
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Для Каждого ТекущаяСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекущаяСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена     = (НайденнаяСтрока <> Неопределено);
		
		Если Не ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекущаяСтрока.ЦенаОприходование  = НайденнаяСтрока.Цена;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;
	
	// Списание товаров
	ТаблицаТоваров = Объект[ИмяТабличнойЧасти].Выгрузить(МассивСтрок, "НомерСтроки,Номенклатура,Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаТоваров.ЗаполнитьЗначения(Справочники.УпаковкиНоменклатуры.ПустаяСсылка(), "Упаковка");
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Для Каждого ТекущаяСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекущаяСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена     = (НайденнаяСтрока <> Неопределено);
		
		Если Не ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекущаяСтрока.Цена  = НайденнаяСтрока.Цена;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

// Осуществляет заполнение видов цен и цен в тч Товары по виду цен.
//
// Параметры:
// Документ                          - ДокументОбъект, для которого необходимо заполнить цены.
// ИмяТабличнойЧасти                 - Строка - имя табличной части, в которой необходимо заполнить цены.
// ВидЦен                            - СправочникСсылка.ВидыЦен - Вид цен, по которому необходимо заполнить цены.
// ВидЦеныВТабличнойЧасти            - Булево - признак наличия колонки "ВидЦены" в ТЧ документа.
//
// Возвращаемое значение:
// Булево.
// Истина, если цены заполнены, ложь в противном случае.
//
Функция ЗаполнитьЦеныПоВидуЦен(Объект, ИмяТабличнойЧасти, ВидЦен, Дата, ЕстьНДС = Истина, ЕстьСуммаСНДС = Ложь, ВидЦеныВТабличнойЧасти = Ложь) Экспорт

	ЦеныРассчитаны = Ложь;
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
	СформироватьЗапросЦеныПоВидуЦен(Запрос.Текст);
	Запрос.УстановитьПараметр("Товары", Объект[ИмяТабличнойЧасти].Выгрузить(, "НомерСтроки,Номенклатура,Характеристика,Упаковка"));
	Запрос.УстановитьПараметр("Дата",   ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ВидЦен", ВидЦен);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Если ТаблицаЦен.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
		
		Если НЕ ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ВидЦеныВТабличнойЧасти Тогда
			
			ТекСтрока.ВидЦены = ВидЦен;
			
		КонецЕсли;
		
		ТекСтрока.Цена     = НайденнаяСтрока.Цена;
		ТекСтрока.Сумма    = ТекСтрока.Цена * ТекСтрока.КоличествоУпаковок;
		
		Если ЕстьНДС Тогда
			
			ТекСтрока.СуммаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаНДС(ТекСтрока.Сумма, ТекСтрока.СтавкаНДС, Объект.ЦенаВключаетНДС);
			
		КонецЕсли;
		
		Если ЕстьНДС И ЕстьСуммаСНДС Тогда
			
			ТекСтрока.СуммаСНДС = ТекСтрока.Сумма + ?(Объект.ЦенаВключаетНДС, 0, ТекСтрока.СуммаНДС);
			
		КонецЕсли;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

// Осуществляет заполнение видов цен и цен в тч Товары по виду цен.
//
// Параметры:
// Документ                          - ДокументОбъект, для которого необходимо заполнить цены.
// ИмяТабличнойЧасти                 - Строка - имя табличной части, в которой необходимо заполнить цены.
// ВидЦен                            - СправочникСсылка.ВидыЦен - Вид цен, по которому необходимо заполнить цены.
// ВидЦеныВТабличнойЧасти            - Булево - признак наличия колонки "ВидЦены" в ТЧ документа.
//
// Возвращаемое значение:
// Булево.
// Истина, если цены заполнены, ложь в противном случае.
//
Функция ЗаполнитьЦеныПоВидуЦенПересортица(Объект, ИмяТабличнойЧасти, ВидЦен, Дата) Экспорт

	ЦеныРассчитаны = Ложь;
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
	СформироватьЗапросЦеныПоВидуЦен(Запрос.Текст);
	
	// Оприходование товаров
	ТаблицаТоваров = Объект[ИмяТабличнойЧасти].Выгрузить(, "НомерСтроки,НоменклатураОприходование,ХарактеристикаОприходование");
	ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаТоваров.ЗаполнитьЗначения(Справочники.УпаковкиНоменклатуры.ПустаяСсылка(), "Упаковка");
	
	ТаблицаТоваров.Колонки.НоменклатураОприходование.Имя   = "Номенклатура";
	ТаблицаТоваров.Колонки.ХарактеристикаОприходование.Имя = "Характеристика";
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	Запрос.УстановитьПараметр("Дата"  , ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ВидЦен", ВидЦен);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Для Каждого ТекСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
		
		Если НЕ ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекСтрока.ЦенаОприходование = НайденнаяСтрока.Цена;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;
	
	// Списание товаров
	ТаблицаТоваров = Объект[ИмяТабличнойЧасти].Выгрузить(, "НомерСтроки,Номенклатура,Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаТоваров.ЗаполнитьЗначения(Справочники.УпаковкиНоменклатуры.ПустаяСсылка(), "Упаковка");
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Для Каждого ТекСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
		
		Если НЕ ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекСтрока.Цена = НайденнаяСтрока.Цена;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

// Осуществляет заполнение видов цен и цен в тч Товары по виду цен.
//
// Параметры:
// Документ                          - ДокументОбъект, для которого необходимо заполнить цены.
// ИмяТабличнойЧасти                 - Строка - имя табличной части, в которой необходимо заполнить цены.
// ВидЦен                            - СправочникСсылка.ВидыЦен - Вид цен, по которому необходимо заполнить цены.
// ВидЦеныВТабличнойЧасти            - Булево - признак наличия колонки "ВидЦены" в ТЧ документа.
//
// Возвращаемое значение:
// Булево.
// Истина, если цены заполнены, ложь в противном случае.
//
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенПересортица(Объект, ИмяТабличнойЧасти, ВыделенныеСтроки, ВидЦен, Дата) Экспорт

	ЦеныРассчитаны = Ложь;
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если СтрокаТаблицы = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		МассивСтрок.Добавить(СтрокаТаблицы);
		
	КонецЦикла;
	
	Если МассивСтрок.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
	СформироватьЗапросЦеныПоВидуЦен(Запрос.Текст);
	
	// Оприходование товаров
	ТаблицаТоваров = Объект[ИмяТабличнойЧасти].Выгрузить(МассивСтрок, "НомерСтроки,НоменклатураОприходование,ХарактеристикаОприходование");
	ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаТоваров.ЗаполнитьЗначения(Справочники.УпаковкиНоменклатуры.ПустаяСсылка(), "Упаковка");
	
	ТаблицаТоваров.Колонки.НоменклатураОприходование.Имя   = "Номенклатура";
	ТаблицаТоваров.Колонки.ХарактеристикаОприходование.Имя = "Характеристика";
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	Запрос.УстановитьПараметр("Дата"  , ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ВидЦен", ВидЦен);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Для Каждого ТекСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
		
		Если НЕ ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекСтрока.ЦенаОприходование = НайденнаяСтрока.Цена;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;
	
	// Списание товаров
	ТаблицаТоваров = Объект[ИмяТабличнойЧасти].Выгрузить(МассивСтрок, "НомерСтроки,Номенклатура,Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаТоваров.ЗаполнитьЗначения(Справочники.УпаковкиНоменклатуры.ПустаяСсылка(), "Упаковка");
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Для Каждого ТекСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
		
		Если НЕ ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекСтрока.Цена = НайденнаяСтрока.Цена;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

// Осуществляет заполнение видов цен и цен в тч Товары по виду цен по выделенным строкам.
//
// Параметры:
// Объект                            - ДокументОбъект, для которого необходимо заполнить цены.
// ИмяТабличнойЧасти                 - Строка - имя табличной части, в которой необходимо заполнить цены.
// ВидЦен                            - СправочникСсылка.ВидыЦен - Вид цен, по которому необходимо заполнить цены.
// ВыделенныеСтроки                  - Массив строк, в которых необходимо заполнить цены.
// ВидЦеныВТабличнойЧасти            - Булево - признак наличия колонки "ВидЦены" в ТЧ документа.
//
// Возвращаемое значение:
// Булево
// Истина, если цены заполнены, ложь в противном случае.
//
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(СтруктураПараметров) Экспорт
	
	Объект                 = СтруктураПараметров.Объект;
	ИмяТабличнойЧасти      = СтруктураПараметров.ИмяТабличнойЧасти;
	ВидЦен                 = СтруктураПараметров.ВидЦен;
	ВыделенныеСтроки       = СтруктураПараметров.ВыделенныеСтроки;
	Дата                   = СтруктураПараметров.Дата;
	ЕстьНДС                = СтруктураПараметров.ЕстьНДС;
	ЕстьСуммаСНДС          = СтруктураПараметров.ЕстьСуммаСНДС;
	ВидЦеныВТабличнойЧасти = СтруктураПараметров.ВидЦеныВТабличнойЧасти;
	
	НеобходимостьПересчетаСуммыСУчетомСкидок = СтруктураПараметров.НеобходимостьПересчетаСуммыСУчетомСкидок;

	ПересчитатьЦенуСУчетомАгентскогоВознаграждения = Ложь;
	Если СтруктураПараметров.Свойство("ПересчитатьЦенуСУчетомАгентскогоВознаграждения") Тогда
		ПересчитатьЦенуСУчетомАгентскогоВознаграждения = СтруктураПараметров.ПересчитатьЦенуСУчетомАгентскогоВознаграждения;
	КонецЕсли;
	
	ЦеныРассчитаны = Ложь;
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если СтрокаТаблицы = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		МассивСтрок.Добавить(СтрокаТаблицы);
		
	КонецЦикла;
	
	Если МассивСтрок.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
	СформироватьЗапросЦеныПоВидуЦен(Запрос.Текст);
	Запрос.УстановитьПараметр("Товары", Объект[ИмяТабличнойЧасти].Выгрузить(МассивСтрок, "НомерСтроки,Номенклатура,Характеристика,Упаковка"));
	Запрос.УстановитьПараметр("Дата",   ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ВидЦен", ВидЦен);
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Если ТаблицаЦен.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	Если ЕстьНДС Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
		Если ЕстьСуммаСНДС Тогда
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));
		КонецЕсли;
	КонецЕсли;
	Если НеобходимостьПересчетаСуммыСУчетомСкидок Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	КонецЕсли;
	Если ПересчитатьЦенуСУчетомАгентскогоВознаграждения Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуСУчетомАгентскогоВознаграждения");
	КонецЕсли;
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
	
	Для Каждого ТекСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
		
		Если НЕ ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ВидЦеныВТабличнойЧасти Тогда
			
			ТекСтрока.ВидЦены = ВидЦен;
			
		КонецЕсли;
		
		ТекСтрока.Цена = НайденнаяСтрока.Цена;
		
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;

	Возврат ЦеныРассчитаны;
	
КонецФункции

// Осуществляет заполнение цен в тч Товары по розничным ценам.
//
// Параметры:
// Документ                          - ДокументОбъект, для которого необходимо заполнить цены.
// ИмяТабличнойЧасти                 - Строка - имя табличной части, в которой необходимо заполнить цены.
// Магазин                           - СправочникСсылка.Магазины - Магазин, по которому необходимо заполнить цены.
//
// Возвращаемое значение:
// Булево.
// Истина, если цены заполнены, ложь в противном случае.
//
Функция ЗаполнитьЦеныПоРозничнымЦенам(Объект, ИмяТабличнойЧасти, Магазин, Дата, ЕстьНДС = Истина, ЕстьСуммаСНДС = Ложь, ПриводитьКМинимальнойЦене = Ложь) Экспорт
	
	ЦеныРассчитаны = Ложь;
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
	СформироватьЗапросЦеныПоРозничнымЦенам(Запрос.Текст, Магазин);
	Запрос.УстановитьПараметр("Товары", Объект[ИмяТабличнойЧасти].Выгрузить(, "НомерСтроки,Номенклатура,Характеристика,Упаковка"));
	Запрос.УстановитьПараметр("Дата",   ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Магазин", Магазин);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ФорматМагазина");
	СтруктураРеквизитов.Вставить("ПравилоЦенообразования");
	СтруктураРеквизитов.Вставить("ИспользоватьПрименениеЦен");
	СтруктураРеквизитов.Вставить("ВидМинимальныхЦенПродажи");
	РеквизитыМагазина = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Магазин, СтруктураРеквизитов);
	
	Запрос.УстановитьПараметр("ФорматОбъектаЦенообразования", РеквизитыМагазина.ФорматМагазина);
	Запрос.УстановитьПараметр("ПравилоЦенообразования", РеквизитыМагазина.ПравилоЦенообразования);
	Запрос.УстановитьПараметр("ИспользоватьПрименениеЦен", РеквизитыМагазина.ИспользоватьПрименениеЦен);
	Запрос.УстановитьПараметр("ПриводитьКМинимальнойЦене", ПриводитьКМинимальнойЦене И ЗначениеЗаполнено(РеквизитыМагазина.ВидМинимальныхЦенПродажи));
	Запрос.УстановитьПараметр("ВидМинимальныхЦенПродажи", РеквизитыМагазина.ВидМинимальныхЦенПродажи);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Если ТаблицаЦен.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
		
		Если НЕ ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
			
		ТекСтрока.Цена     = НайденнаяСтрока.Цена;
		ТекСтрока.Сумма    = ТекСтрока.Цена * ТекСтрока.КоличествоУпаковок;
		
		Если ЕстьНДС Тогда
			
			ТекСтрока.СуммаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаНДС(ТекСтрока.Сумма, ТекСтрока.СтавкаНДС, Объект.ЦенаВключаетНДС);
			
		КонецЕсли;
		
		Если ЕстьНДС И ЕстьСуммаСНДС Тогда
			
			ТекСтрока.СуммаСНДС = ТекСтрока.Сумма + ?(Объект.ЦенаВключаетНДС, 0, ТекСтрока.СуммаНДС);
			
		КонецЕсли;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;
	
	Возврат ЦеныРассчитаны;
		
КонецФункции

// Осуществляет заполнение цен в тч Товары по магазину по выделенным строкам.
//
// Параметры:
// Объект                            - ДокументОбъект, для которого необходимо заполнить цены.
// ИмяТабличнойЧасти                 - Строка - имя табличной части, в которой необходимо заполнить цены.
// Магазин                           - СправочникСсылка.Магазины - магазин, по которому необходимо заполнить цены.
// ВыделенныеСтроки                  - Массив строк, в которых необходимо заполнить цены.
//
// Возвращаемое значение:
// Булево
// Истина, если цены заполнены, ложь в противном случае.
//
Функция ЗаполнитьЦеныВыделенныхСтрокПоРозничнымЦенам(СтруктураПараметров) Экспорт
	
	Объект                    = СтруктураПараметров.Объект;
	ИмяТабличнойЧасти         = СтруктураПараметров.ИмяТабличнойЧасти;
	Магазин                   = СтруктураПараметров.Магазин;
	ВыделенныеСтроки          = СтруктураПараметров.ВыделенныеСтроки;
	Дата                      = СтруктураПараметров.Дата;
	ЕстьНДС                   = СтруктураПараметров.ЕстьНДС;
	ЕстьСуммаСНДС             = СтруктураПараметров.ЕстьСуммаСНДС;
	ПриводитьКМинимальнойЦене = СтруктураПараметров.ПриводитьКМинимальнойЦене;
	
	НеобходимостьПересчетаСуммыСУчетомСкидок = СтруктураПараметров.НеобходимостьПересчетаСуммыСУчетомСкидок;
	
	ПересчитатьЦенуСУчетомАгентскогоВознаграждения = Ложь;
	Если СтруктураПараметров.Свойство("ПересчитатьЦенуСУчетомАгентскогоВознаграждения") Тогда
		ПересчитатьЦенуСУчетомАгентскогоВознаграждения = СтруктураПараметров.ПересчитатьЦенуСУчетомАгентскогоВознаграждения;
	КонецЕсли;
	
	ЦеныРассчитаны = Ложь;
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если СтрокаТаблицы = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		МассивСтрок.Добавить(СтрокаТаблицы);
		
	КонецЦикла;
	
	Если МассивСтрок.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
	СформироватьЗапросЦеныПоРозничнымЦенам(Запрос.Текст, Магазин);
	Запрос.УстановитьПараметр("Товары", Объект[ИмяТабличнойЧасти].Выгрузить(МассивСтрок, "НомерСтроки,Номенклатура,Характеристика,Упаковка"));
	Запрос.УстановитьПараметр("Дата",   ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Магазин", Магазин);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ФорматМагазина");
	СтруктураРеквизитов.Вставить("ПравилоЦенообразования");
	СтруктураРеквизитов.Вставить("ИспользоватьПрименениеЦен");
	СтруктураРеквизитов.Вставить("ВидМинимальныхЦенПродажи");
	РеквизитыМагазина = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Магазин, СтруктураРеквизитов);
	
	Запрос.УстановитьПараметр("ФорматОбъектаЦенообразования", РеквизитыМагазина.ФорматМагазина);
	Запрос.УстановитьПараметр("ПравилоЦенообразования", РеквизитыМагазина.ПравилоЦенообразования);
	Запрос.УстановитьПараметр("ИспользоватьПрименениеЦен", РеквизитыМагазина.ИспользоватьПрименениеЦен);
	Запрос.УстановитьПараметр("ПриводитьКМинимальнойЦене", ПриводитьКМинимальнойЦене И ЗначениеЗаполнено(РеквизитыМагазина.ВидМинимальныхЦенПродажи));
	Запрос.УстановитьПараметр("ВидМинимальныхЦенПродажи", РеквизитыМагазина.ВидМинимальныхЦенПродажи);
		
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Если ТаблицаЦен.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	Если ЕстьНДС Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
		Если ЕстьСуммаСНДС Тогда
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));
		КонецЕсли;
	КонецЕсли;
	Если НеобходимостьПересчетаСуммыСУчетомСкидок Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	КонецЕсли;
	Если ПересчитатьЦенуСУчетомАгентскогоВознаграждения Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуСУчетомАгентскогоВознаграждения");
	КонецЕсли;
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
	
	Для Каждого ТекСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
		
		Если НЕ ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
			
		ТекСтрока.Цена     = НайденнаяСтрока.Цена;
		
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;

	Возврат ЦеныРассчитаны;
	
КонецФункции

// Осуществляет заполнение цен в тч Товары по розничным ценам.
//
// Параметры:
// Документ                          - ДокументОбъект, для которого необходимо заполнить цены.
// ИмяТабличнойЧасти                 - Строка - имя табличной части, в которой необходимо заполнить цены.
// Магазин                           - СправочникСсылка.Магазины - Магазин, по которому необходимо заполнить цены.
//
// Возвращаемое значение:
// Булево.
// Истина, если цены заполнены, ложь в противном случае.
//
Функция ЗаполнитьЦеныПоРозничнымЦенамПересортица(Объект, ИмяТабличнойЧасти, Магазин, Дата, ПриводитьКМинимальнойЦене = Ложь) Экспорт
	
	ЦеныРассчитаны = Ложь;
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
	СформироватьЗапросЦеныПоРозничнымЦенам(Запрос.Текст, Магазин);
	
	// Оприходование товаров
	ТаблицаТоваров = Объект[ИмяТабличнойЧасти].Выгрузить(, "НомерСтроки,НоменклатураОприходование,ХарактеристикаОприходование");
	ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаТоваров.ЗаполнитьЗначения(Справочники.УпаковкиНоменклатуры.ПустаяСсылка(), "Упаковка");
	
	ТаблицаТоваров.Колонки.НоменклатураОприходование.Имя   = "Номенклатура";
	ТаблицаТоваров.Колонки.ХарактеристикаОприходование.Имя = "Характеристика";
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	Запрос.УстановитьПараметр("Дата",   ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Магазин", Магазин);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ФорматМагазина");
	СтруктураРеквизитов.Вставить("ПравилоЦенообразования");
	СтруктураРеквизитов.Вставить("ИспользоватьПрименениеЦен");
	СтруктураРеквизитов.Вставить("ВидМинимальныхЦенПродажи");
	РеквизитыМагазина = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Магазин, СтруктураРеквизитов);
	
	Запрос.УстановитьПараметр("ФорматОбъектаЦенообразования", РеквизитыМагазина.ФорматМагазина);
	Запрос.УстановитьПараметр("ПравилоЦенообразования", РеквизитыМагазина.ПравилоЦенообразования);
	Запрос.УстановитьПараметр("ИспользоватьПрименениеЦен", РеквизитыМагазина.ИспользоватьПрименениеЦен);
	Запрос.УстановитьПараметр("ПриводитьКМинимальнойЦене", ПриводитьКМинимальнойЦене И ЗначениеЗаполнено(РеквизитыМагазина.ВидМинимальныхЦенПродажи));
	Запрос.УстановитьПараметр("ВидМинимальныхЦенПродажи", РеквизитыМагазина.ВидМинимальныхЦенПродажи);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Для Каждого ТекСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
		
		Если НЕ ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекСтрока.ЦенаОприходование = НайденнаяСтрока.Цена;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;
	
	// Списание товаров
	ТаблицаТоваров = Объект[ИмяТабличнойЧасти].Выгрузить(, "НомерСтроки,Номенклатура,Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаТоваров.ЗаполнитьЗначения(Справочники.УпаковкиНоменклатуры.ПустаяСсылка(), "Упаковка");
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Для Каждого ТекСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
		
		Если НЕ ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекСтрока.Цена = НайденнаяСтрока.Цена;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;
	
	Возврат ЦеныРассчитаны;
		
КонецФункции

// Осуществляет заполнение цен в тч Товары по розничным ценам.
//
// Параметры:
// Документ                          - ДокументОбъект, для которого необходимо заполнить цены.
// ИмяТабличнойЧасти                 - Строка - имя табличной части, в которой необходимо заполнить цены.
// Магазин                           - СправочникСсылка.Магазины - Магазин, по которому необходимо заполнить цены.
//
// Возвращаемое значение:
// Булево.
// Истина, если цены заполнены, ложь в противном случае.
//
Функция ЗаполнитьЦеныВыделенныхСтрокПоРозничнымЦенамПересортица(Объект, ИмяТабличнойЧасти, ВыделенныеСтроки, Магазин, Дата, ПриводитьКМинимальнойЦене = Ложь) Экспорт
	
	ЦеныРассчитаны = Ложь;
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если СтрокаТаблицы = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		МассивСтрок.Добавить(СтрокаТаблицы);
		
	КонецЦикла;
	
	Если МассивСтрок.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;

	Запрос = Новый Запрос;
	СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
	СформироватьЗапросЦеныПоРозничнымЦенам(Запрос.Текст, Магазин);
	
	// Оприходование товаров
	ТаблицаТоваров = Объект[ИмяТабличнойЧасти].Выгрузить(МассивСтрок, "НомерСтроки,НоменклатураОприходование,ХарактеристикаОприходование");
	ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаТоваров.ЗаполнитьЗначения(Справочники.УпаковкиНоменклатуры.ПустаяСсылка(), "Упаковка");
	
	ТаблицаТоваров.Колонки.НоменклатураОприходование.Имя   = "Номенклатура";
	ТаблицаТоваров.Колонки.ХарактеристикаОприходование.Имя = "Характеристика";
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	Запрос.УстановитьПараметр("Дата",   ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Магазин", Магазин);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ФорматМагазина");
	СтруктураРеквизитов.Вставить("ПравилоЦенообразования");
	СтруктураРеквизитов.Вставить("ИспользоватьПрименениеЦен");
	СтруктураРеквизитов.Вставить("ВидМинимальныхЦенПродажи");
	РеквизитыМагазина = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Магазин, СтруктураРеквизитов);
	
	Запрос.УстановитьПараметр("ФорматОбъектаЦенообразования", РеквизитыМагазина.ФорматМагазина);
	Запрос.УстановитьПараметр("ПравилоЦенообразования", РеквизитыМагазина.ПравилоЦенообразования);
	Запрос.УстановитьПараметр("ИспользоватьПрименениеЦен", РеквизитыМагазина.ИспользоватьПрименениеЦен);
	Запрос.УстановитьПараметр("ПриводитьКМинимальнойЦене", ПриводитьКМинимальнойЦене И ЗначениеЗаполнено(РеквизитыМагазина.ВидМинимальныхЦенПродажи));
	Запрос.УстановитьПараметр("ВидМинимальныхЦенПродажи", РеквизитыМагазина.ВидМинимальныхЦенПродажи);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Для Каждого ТекСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
		
		Если НЕ ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекСтрока.ЦенаОприходование = НайденнаяСтрока.Цена;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;
	
	// Списание товаров
	ТаблицаТоваров = Объект[ИмяТабличнойЧасти].Выгрузить(МассивСтрок, "НомерСтроки,Номенклатура,Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаТоваров.ЗаполнитьЗначения(Справочники.УпаковкиНоменклатуры.ПустаяСсылка(), "Упаковка");
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Для Каждого ТекСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
		
		Если НЕ ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекСтрока.Цена = НайденнаяСтрока.Цена;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;
	
	Возврат ЦеныРассчитаны;
		
КонецФункции

// Осуществляет заполнение цен в тч Товары по прошлым закупкам по выделенным строкам.
//
// Параметры:
// Объект                            - ДокументОбъект, для которого необходимо заполнить цены.
// ИмяТабличнойЧасти                 - Строка - имя табличной части, в которой необходимо заполнить цены.
// ВыделенныеСтроки                  - Массив строк, в которых необходимо заполнить цены.
//
// Возвращаемое значение:
// Булево
// Истина, если цены заполнены, ложь в противном случае.
//
Функция ЗаполнитьЦеныВыделенныхСтрокПоПрошлымЗакупкам(Объект, ИмяТабличнойЧасти, ВыделенныеСтроки, ЕстьНДС = Истина, ЕстьСуммаСНДС = Ложь) Экспорт
	
	ЦеныРассчитаны = Ложь;
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если СтрокаТаблицы = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		МассивСтрок.Добавить(СтрокаТаблицы);
		
	КонецЦикла;
	
	Если МассивСтрок.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
	СформироватьЗапросЦеныПоПрошлымЗакупкам(Запрос.Текст);
	Запрос.УстановитьПараметр("Товары", Объект[ИмяТабличнойЧасти].Выгрузить(МассивСтрок, "НомерСтроки,Номенклатура,Характеристика,Упаковка"));
	Запрос.УстановитьПараметр("Дата",   ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	Запрос.УстановитьПараметр("Поставщик", Объект.Контрагент);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Если ТаблицаЦен.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
		
		Если НЕ ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
			
		ТекСтрока.Цена     = НайденнаяСтрока.Цена;
		ТекСтрока.Сумма    = ТекСтрока.Цена * ТекСтрока.КоличествоУпаковок;
		
		Если ЕстьНДС Тогда
			
			ТекСтрока.СуммаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаНДС(ТекСтрока.Сумма, ТекСтрока.СтавкаНДС, Объект.ЦенаВключаетНДС);
			
		КонецЕсли;
		
		Если ЕстьНДС И ЕстьСуммаСНДС Тогда
			
			ТекСтрока.СуммаСНДС = ТекСтрока.Сумма + ?(Объект.ЦенаВключаетНДС, 0, ТекСтрока.СуммаНДС);
			
		КонецЕсли;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;

	Возврат ЦеныРассчитаны;
	
КонецФункции

// Осуществляет заполнение цен в тч Товары по ценам тч "Товары по данным поставщика" в выделенных строках.
//
// Параметры:
// Документ                          - ДокументОбъект, для которого необходимо заполнить цены.
// ИмяТабличнойЧасти                 - Строка - имя табличной части, в которой необходимо заполнить цены.
//
// Возвращаемое значение:
// Булево.
// Истина, если цены заполнены, ложь в противном случае.
//
Функция ЗаполнитьЦеныВыделенныхСтрокПоЦенамДанныхПоставщика(Объект, ИмяТабличнойЧасти, ВыделенныеСтроки, ЕстьНДС = Истина, ЕстьСуммаСНДС = Ложь) Экспорт
	
	ЦеныРассчитаны = Ложь;
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если СтрокаТаблицы = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		МассивСтрок.Добавить(СтрокаТаблицы);
		
	КонецЦикла;
	
	Если МассивСтрок.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;

	
	Запрос = Новый Запрос;
	СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
	СформироватьЗапросЦеныПоДаннымПоставщика(Запрос.Текст);
	Запрос.УстановитьПараметр("Товары", Объект[ИмяТабличнойЧасти].Выгрузить(МассивСтрок, "НомерСтроки,Номенклатура,Характеристика,Упаковка"));
	Запрос.УстановитьПараметр("ТоварыПоДаннымПоставщика", Объект.ТоварыПоДаннымПоставщика.Выгрузить(, "Номенклатура,Характеристика,Упаковка,Цена"));
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Если ТаблицаЦен.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
		
		Если НЕ ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
			
		ТекСтрока.Цена 	= НайденнаяСтрока.Цена;
		ТекСтрока.Сумма = ТекСтрока.Цена * ТекСтрока.КоличествоУпаковок;
		
		Если ЕстьНДС Тогда
			
			ТекСтрока.СуммаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаНДС(ТекСтрока.Сумма, ТекСтрока.СтавкаНДС, Объект.ЦенаВключаетНДС);
			
		КонецЕсли;
		
		Если ЕстьНДС И ЕстьСуммаСНДС Тогда
			
			ТекСтрока.СуммаСНДС = ТекСтрока.Сумма + ?(Объект.ЦенаВключаетНДС, 0, ТекСтрока.СуммаНДС);
			
		КонецЕсли;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

// Осуществляет заполнение цен в тч Товары по произвольной таблице цен.
//
// Параметры:
// Документ                          - ДокументОбъект, для которого необходимо заполнить цены.
// ИмяТабличнойЧасти                 - Строка - имя табличной части, в которой необходимо заполнить цены.
// ТаблицаЦен                        - ТаблицаЗначений - (Номенклатура, Характеристика, Упаковка, Цена) содержащая цены
//                                                       для заполнения.
//
// Возвращаемое значение:
// Булево.
// Истина, если цены заполнены, ложь в противном случае.
//
Функция ЗаполнитьЦеныПоПроизвольнойТаблицеЦен(Объект, ИмяТабличнойЧасти, ТаблицаЦен, ЕстьНДС = Истина, ЕстьСуммаСНДС = Ложь, ПерезаполнятьЗаполненные = Истина) Экспорт
	
	ЦеныРассчитаны = Ложь;
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
	СформироватьЗапросЦеныПоПроизвольнойТаблицеЦен(Запрос.Текст);
	Запрос.УстановитьПараметр("Товары", Объект[ИмяТабличнойЧасти].Выгрузить(, "НомерСтроки,Номенклатура,Характеристика,Упаковка"));
	Запрос.УстановитьПараметр("ТаблицаЦен", ТаблицаЦен);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Если ТаблицаЦен.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект[ИмяТабличнойЧасти] Цикл
		
		Если НЕ ПерезаполнятьЗаполненные И ЗначениеЗаполнено(ТекСтрока.Цена) Тогда
			Продолжить;
		КонецЕсли;
		
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки, "НомерСтроки");
		ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
		
		Если НЕ ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекСтрока.Цена 	= НайденнаяСтрока.Цена;
		ТекСтрока.Сумма = ТекСтрока.Цена * ТекСтрока.КоличествоУпаковок;
		
		Если ЕстьНДС Тогда
			
			ТекСтрока.СуммаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаНДС(ТекСтрока.Сумма, ТекСтрока.СтавкаНДС, Объект.ЦенаВключаетНДС);
			
		КонецЕсли;
		
		Если ЕстьНДС И ЕстьСуммаСНДС Тогда
			
			ТекСтрока.СуммаСНДС = ТекСтрока.Сумма + ?(Объект.ЦенаВключаетНДС, 0, ТекСтрока.СуммаНДС);
			
		КонецЕсли;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

// Осуществляет заполнение цен в тч Товары по произвольной таблице цен по выделенным строкам.
//
// Параметры:
// Документ                          - ДокументОбъект, для которого необходимо заполнить цены.
// ИмяТабличнойЧасти                 - Строка - имя табличной части, в которой необходимо заполнить цены.
// ТаблицаЦен                        - ТаблицаЗначений - (Номенклатура, Характеристика, Упаковка, Цена) содержащая цены
//                                                       для заполнения.
//
// Возвращаемое значение:
// Булево.
// Истина, если цены заполнены, ложь в противном случае.
//
Функция ЗаполнитьЦеныВыделенныхСтрокПоПроизвольнойТаблицеЦен(Объект, ИмяТабличнойЧасти, ВыделенныеСтроки, ТаблицаЦен,
	ЕстьНДС = Истина, ЕстьСуммаСНДС = Ложь, ЕстьКоличество = Ложь) Экспорт
	
	ЦеныРассчитаны = Ложь;
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		Возврат ЦеныРассчитаны;
		
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если СтрокаТаблицы = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		МассивСтрок.Добавить(СтрокаТаблицы);
		
	КонецЦикла;
	
	Если МассивСтрок.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
	СформироватьЗапросЦеныПоПроизвольнойТаблицеЦен(Запрос.Текст, ЕстьКоличество);
	Запрос.УстановитьПараметр("Товары", Объект[ИмяТабличнойЧасти].Выгрузить(МассивСтрок, "НомерСтроки,Номенклатура,Характеристика,Упаковка"));
	Запрос.УстановитьПараметр("ТаблицаЦен", ТаблицаЦен);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	ТаблицаЦен.Индексы.Добавить("НомерСтроки");
	
	Если ТаблицаЦен.Количество() = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект[ИмяТабличнойЧасти] Цикл
	
		ЦенаНайдена = Ложь;
		
		НайденнаяСтрока = ТаблицаЦен.Найти(ТекСтрока.НомерСтроки,"НомерСтроки");
		ЦенаНайдена = (НайденнаяСтрока <> Неопределено);
		
		Если НЕ ЦенаНайдена Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекСтрока.Цена  = НайденнаяСтрока.Цена;
		
		Если ЕстьКоличество Тогда
			Если НайденнаяСтрока.КоличествоУпаковок = ТекСтрока.КоличествоУпаковок И НайденнаяСтрока.Сумма <> 0 Тогда
				ТекСтрока.Сумма = НайденнаяСтрока.Сумма;
			Иначе
				ТекСтрока.Сумма = ТекСтрока.Цена * ТекСтрока.КоличествоУпаковок;
			КонецЕсли;
		Иначе
			ТекСтрока.Сумма = ТекСтрока.Цена * ТекСтрока.КоличествоУпаковок;
		КонецЕсли;
		
		Если ЕстьНДС Тогда
			
			ТекСтрока.СуммаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаНДС(ТекСтрока.Сумма, ТекСтрока.СтавкаНДС, Объект.ЦенаВключаетНДС);
			
		КонецЕсли;
		
		Если ЕстьНДС И ЕстьСуммаСНДС Тогда
			
			ТекСтрока.СуммаСНДС = ТекСтрока.Сумма + ?(Объект.ЦенаВключаетНДС, 0, ТекСтрока.СуммаНДС);
			
		КонецЕсли;
		
		ЦеныРассчитаны = Истина;
		
	КонецЦикла;
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

// Возвращает дату ценообразования для документа.
//
// Параметры:
//  Объект - Объект документа
//
// Возвращаемое значение
//  Дата
Функция ДатаДляЦенообразованияДляДокумента(Объект) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Ссылка) 
		И ЗначениеЗаполнено(Объект.Дата) Тогда
		Возврат Объект.Дата;
	Иначе
		Возврат ТекущаяДатаСеанса();
	КонецЕсли;
	
КонецФункции // ДатаДляЦенообразования()

#КонецОбласти

#Область ФункцииПолученияЦен

// Получает цены номенклатуры по виду цены.
//
// Параметры:
//  ВидЦены - СправочникСсылка.ВидыЦен - вид цены номенклатуры.
//  Дата - Дата - дата получения цены.
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура для подбора цены.
//  Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика для подбора цены.
//  Упаковка - СправочникСсылка.УпаковкиНоменклатуры - упаковка для подбора цены.
//
// Возвращаемое значение:
//  Число - цена по виду цены.
//
Функция ЦенаПоВидуЦен(ВидЦены, Дата, Номенклатура, Характеристика, Упаковка) Экспорт

	Цена = 0;
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ТипНоменклатуры");
	СтруктураРеквизитов.Вставить("Номинал");
	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, СтруктураРеквизитов);
	Если РеквизитыНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
		
		Цена = РеквизитыНоменклатуры.Номинал;
		Если Цена = Неопределено Тогда
			Цена = 0;
		Иначе
			Если ЗначениеЗаполнено(Упаковка) Тогда
				КоэффициентУпаковкиВходящий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Упаковка, "Коэффициент");
				Если ЗначениеЗаполнено(КоэффициентУпаковкиВходящий) Тогда
					Цена = Окр(Цена * КоэффициентУпаковкиВходящий, 2);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Иначе		
		
		ЦенаВыборки = 0;
		УпаковкаЦены = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
		КоэффициентУпаковки = 1;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Цены.Упаковка КАК Упаковка,
		|	ЕСТЬNULL(Цены.Упаковка.Коэффициент, 0) КАК КоэффициентУпаковки,
		|	Цены.Цена КАК Цена,
		|	1 КАК Приоритет,
		|	Цены.Период КАК Период
		|ПОМЕСТИТЬ ТаблицаЦен
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры КАК Цены
		|ГДЕ
		|	Цены.ВидЦены = &ВидЦены
		|	И Цены.Номенклатура = &Номенклатура
		|	И Цены.Характеристика = &Характеристика
		|	И Цены.Период <= &Дата
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Цены.Упаковка,
		|	ЕСТЬNULL(Цены.Упаковка.Коэффициент, 0),
		|	Цены.Цена,
		|	2,
		|	Цены.Период
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры КАК Цены
		|ГДЕ
		|	Цены.ВидЦены = &ВидЦены
		|	И Цены.Номенклатура = &Номенклатура
		|	И Цены.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	И Цены.Номенклатура.ВидНоменклатуры.ИспользоватьЦенуНоменклатуры
		|	И Цены.Период <= &Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ТаблицаЦен.Упаковка КАК Упаковка,
		|	ТаблицаЦен.КоэффициентУпаковки КАК КоэффициентУпаковки,
		|	ТаблицаЦен.Цена КАК Цена
		|ИЗ
		|	ТаблицаЦен КАК ТаблицаЦен
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаЦен.Приоритет,
		|	ТаблицаЦен.Период УБЫВ";
		
		Запрос.УстановитьПараметр("ВидЦены"       , ВидЦены);
		Запрос.УстановитьПараметр("Дата"          , Дата);
		Запрос.УстановитьПараметр("Номенклатура"  , Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", Характеристика);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если ЗначениеЗаполнено(Выборка.Цена) Тогда
				ЦенаВыборки = Выборка.Цена;
			КонецЕсли;	
			Если ЗначениеЗаполнено(Выборка.Упаковка) Тогда
				УпаковкаЦены = Выборка.Упаковка;
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.КоэффициентУпаковки) Тогда
				КоэффициентУпаковки = Выборка.КоэффициентУпаковки;
			КонецЕсли;
		КонецЕсли;
		
		Если УпаковкаЦены = Упаковка Тогда
			Цена = ЦенаВыборки;
		Иначе
			КоэффициентУпаковкиВходящий = ?(ЗначениеЗаполнено(Упаковка), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Упаковка, "Коэффициент"), 1);
			Если ЗначениеЗаполнено(КоэффициентУпаковкиВходящий) Тогда
				Цена = Окр(ЦенаВыборки * КоэффициентУпаковкиВходящий / КоэффициентУпаковки, 2);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Цена;
	
КонецФункции

// Получает цену продажи, которая определяется правилом ценообразования.
//
// Параметры:
//  Магазин - СправочникСсылка.Магазины - вид цены номенклатуры.
//  Дата - Дата - дата получения цены.
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура для подбора цены.
//  Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика для подбора цены.
//  Упаковка - СправочникСсылка.УпаковкиНоменклатуры - упаковка для подбора цены.
//  ПриводитьКМинимальнойЦене - Булево - признак приведения к минимальной цене.
//
// Возвращаемое значение:
//  Число - цена продажи.
//
Функция ЦенаПродажи(Магазин, Дата, Номенклатура, Характеристика, Упаковка, ПриводитьКМинимальнойЦене = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Цена = 0;
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("ТипНоменклатуры");
		СтруктураРеквизитов.Вставить("Номинал");
		СтруктураРеквизитов.Вставить("ЦеноваяГруппа");
		РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, СтруктураРеквизитов);
		Если РеквизитыНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
			
			Цена = РеквизитыНоменклатуры.Номинал;
			Если Цена = Неопределено Тогда
				Цена = 0;
			Иначе
				Если ЗначениеЗаполнено(Упаковка) Тогда
					КоэффициентУпаковкиВходящий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Упаковка, "Коэффициент");
					Если ЗначениеЗаполнено(КоэффициентУпаковкиВходящий) Тогда
						Цена = Окр(Цена * КоэффициентУпаковкиВходящий, 2);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		
		Иначе
			Если ЗначениеЗаполнено(Магазин) Тогда
				РеквизитыМагазина = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Магазин, "ВидМинимальныхЦенПродажи, ИспользоватьПрименениеЦен, ПравилоЦенообразования, ФорматМагазина");
				ИспользоватьПрименениеЦен = (РеквизитыМагазина.ИспользоватьПрименениеЦен = Истина) И (ПолучитьФункциональнуюОпцию("ИспользоватьПрименениеЦен") = Истина);
				
				ЦенаВыборки = 0;
				УпаковкаЦены = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
				КоэффициентУпаковки = 1;
				
				Если ИспользоватьПрименениеЦен Тогда
				
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	Цены.Упаковка КАК Упаковка,
					|	ЕСТЬNULL(Цены.Упаковка.Коэффициент, 0) КАК КоэффициентУпаковки,
					|	Цены.Цена КАК Цена,
					|	1 КАК Приоритет,
					|	Цены.Период КАК Период
					|ПОМЕСТИТЬ ТаблицаЦен
					|ИЗ
					|	РегистрСведений.ДействующиеЦеныНоменклатуры КАК Цены
					|ГДЕ
					|	Цены.ОбъектЦенообразования = &Магазин
					|	И Цены.Номенклатура = &Номенклатура
					|	И Цены.Характеристика = &Характеристика
					|	И Цены.Период <= &Дата
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	Цены.Упаковка,
					|	ЕСТЬNULL(Цены.Упаковка.Коэффициент, 0),
					|	Цены.Цена,
					|	2,
					|	Цены.Период
					|ИЗ
					|	РегистрСведений.ДействующиеЦеныНоменклатуры КАК Цены
					|ГДЕ
					|	Цены.ОбъектЦенообразования = &Магазин
					|	И Цены.Номенклатура = &Номенклатура
					|	И Цены.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
					|	И Цены.Номенклатура.ВидНоменклатуры.ИспользоватьЦенуНоменклатуры
					|	И Цены.Период <= &Дата
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
					|	ТаблицаЦен.Упаковка КАК Упаковка,
					|	ТаблицаЦен.КоэффициентУпаковки КАК КоэффициентУпаковки,
					|	ТаблицаЦен.Цена КАК Цена
					|ИЗ
					|	ТаблицаЦен КАК ТаблицаЦен
					|
					|УПОРЯДОЧИТЬ ПО
					|	ТаблицаЦен.Приоритет,
					|	ТаблицаЦен.Период УБЫВ";
					Запрос.УстановитьПараметр("Дата", Дата);
					Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
					Запрос.УстановитьПараметр("Характеристика", Характеристика);
					Запрос.УстановитьПараметр("Магазин", Магазин);
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						Если ЗначениеЗаполнено(Выборка.Цена) Тогда
							Если ЗначениеЗаполнено(Выборка.Цена) Тогда
								ЦенаВыборки = Выборка.Цена;
							КонецЕсли;	
							Если ЗначениеЗаполнено(Выборка.Упаковка) Тогда
								УпаковкаЦены = Выборка.Упаковка;
							КонецЕсли;
							Если ЗначениеЗаполнено(Выборка.КоэффициентУпаковки) Тогда
								КоэффициентУпаковки = Выборка.КоэффициентУпаковки;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
				
					ИспользоватьАссортимент = ПолучитьФункциональнуюОпцию("УстанавливатьВидыЦенВАссортименте")
						И АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Магазин);
					ВидЦен = Неопределено;
					
					Если ИспользоватьАссортимент Тогда
						
						Запрос = Новый Запрос;
						
						Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
						|	Ассортимент.ВидЦен КАК ВидЦен
						|
						|ИЗ
						|	РегистрСведений.Ассортимент КАК Ассортимент
						|ГДЕ
						|	Ассортимент.Номенклатура = &Номенклатура
						|	И Ассортимент.ОбъектПланирования = &ФорматМагазина
						|	И Ассортимент.Период <= &Дата
						|
						|УПОРЯДОЧИТЬ ПО
						|	Ассортимент.Период УБЫВ
						|";
						Запрос.УстановитьПараметр("ФорматМагазина", РеквизитыМагазина.ФорматМагазина);
						Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
						Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
						Выборка = Запрос.Выполнить().Выбрать();
						Если Выборка.Следующий() Тогда
							Если ЗначениеЗаполнено(Выборка.ВидЦен) Тогда
								ВидЦен = Выборка.ВидЦен;
							КонецЕсли;
						КонецЕсли;
					Иначе
						ИспользоватьЦеновыеГруппы = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
						Если ИспользоватьЦеновыеГруппы Тогда
							ЦеноваяГруппа = РеквизитыНоменклатуры.ЦеноваяГруппа;
							Если ЗначениеЗаполнено(ЦеноваяГруппа) Тогда
								Запрос = Новый Запрос;
								Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
								|	ЦеновыеГруппы.ВидЦен КАК ВидЦен
								|ИЗ
								|	Справочник.ПравилаЦенообразования.ЦеновыеГруппы КАК ЦеновыеГруппы
								|ГДЕ
								|	ЦеновыеГруппы.Ссылка = &Ссылка
								|	И ЦеновыеГруппы.ЦеноваяГруппа = &ЦеноваяГруппа";
								Запрос.УстановитьПараметр("Ссылка", РеквизитыМагазина.ПравилоЦенообразования);
								Запрос.УстановитьПараметр("ЦеноваяГруппа", ЦеноваяГруппа);
								Выборка = Запрос.Выполнить().Выбрать();
								Если Выборка.Следующий() Тогда
									Если ЗначениеЗаполнено(Выборка.ВидЦен) Тогда
										ВидЦен = Выборка.ВидЦен;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ВидЦен) И ЗначениеЗаполнено(РеквизитыМагазина.ПравилоЦенообразования) Тогда
							ВидЦен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыМагазина.ПравилоЦенообразования, "ВидЦен");
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ВидЦен) Тогда
						
						Запрос = Новый Запрос;
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	Цены.Упаковка КАК Упаковка,
						|	ЕСТЬNULL(Цены.Упаковка.Коэффициент, 0) КАК КоэффициентУпаковки,
						|	Цены.Цена КАК Цена,
						|	1 КАК Приоритет,
						|	Цены.Период КАК Период
						|ПОМЕСТИТЬ ТаблицаЦен
						|ИЗ
						|	РегистрСведений.ЦеныНоменклатуры КАК Цены
						|ГДЕ
						|	Цены.ВидЦены = &ВидЦен
						|	И Цены.Номенклатура = &Номенклатура
						|	И Цены.Характеристика = &Характеристика
						|	И Цены.Период <= &Дата
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|ВЫБРАТЬ
						|	Цены.Упаковка,
						|	ЕСТЬNULL(Цены.Упаковка.Коэффициент, 0),
						|	Цены.Цена,
						|	2,
						|	Цены.Период
						|ИЗ
						|	РегистрСведений.ЦеныНоменклатуры КАК Цены
						|ГДЕ
						|	Цены.ВидЦены = &ВидЦен
						|	И Цены.Номенклатура = &Номенклатура
						|	И Цены.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
						|	И Цены.Номенклатура.ВидНоменклатуры.ИспользоватьЦенуНоменклатуры
						|	И Цены.Период <= &Дата
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
						|	ТаблицаЦен.Упаковка КАК Упаковка,
						|	ТаблицаЦен.КоэффициентУпаковки КАК КоэффициентУпаковки,
						|	ТаблицаЦен.Цена КАК Цена
						|ИЗ
						|	ТаблицаЦен КАК ТаблицаЦен
						|
						|УПОРЯДОЧИТЬ ПО
						|	ТаблицаЦен.Приоритет,
						|	ТаблицаЦен.Период УБЫВ";
						
						Запрос.УстановитьПараметр("Дата", Дата);
						Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
						Запрос.УстановитьПараметр("Характеристика", Характеристика);
						Запрос.УстановитьПараметр("ВидЦен", ВидЦен);		
							
						Выборка = Запрос.Выполнить().Выбрать();
						Если Выборка.Следующий() Тогда
							Если ЗначениеЗаполнено(Выборка.Цена) Тогда
								ЦенаВыборки = Выборка.Цена;
							КонецЕсли;	
							Если ЗначениеЗаполнено(Выборка.Упаковка) Тогда
								УпаковкаЦены = Выборка.Упаковка;
							КонецЕсли;
							Если ЗначениеЗаполнено(Выборка.КоэффициентУпаковки) Тогда
								КоэффициентУпаковки = Выборка.КоэффициентУпаковки;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если ПриводитьКМинимальнойЦене И ЗначениеЗаполнено(РеквизитыМагазина.ВидМинимальныхЦенПродажи) Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	Цены.Упаковка КАК Упаковка,
					|	ЕСТЬNULL(Цены.Упаковка.Коэффициент, 0) КАК КоэффициентУпаковки,
					|	Цены.Цена КАК Цена,
					|	1 КАК Приоритет,
					|	Цены.Период КАК Период
					|ПОМЕСТИТЬ ТаблицаЦен
					|ИЗ
					|	РегистрСведений.ЦеныНоменклатуры КАК Цены
					|ГДЕ
					|	Цены.ВидЦены = &ВидМинимальныхЦенПродажи
					|	И Цены.Номенклатура = &Номенклатура
					|	И Цены.Характеристика = &Характеристика
					|	И Цены.Период <= &Дата
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	Цены.Упаковка,
					|	ЕСТЬNULL(Цены.Упаковка.Коэффициент, 0),
					|	Цены.Цена,
					|	2,
					|	Цены.Период
					|ИЗ
					|	РегистрСведений.ЦеныНоменклатуры КАК Цены
					|ГДЕ
					|	Цены.ВидЦены = &ВидМинимальныхЦенПродажи
					|	И Цены.Номенклатура = &Номенклатура
					|	И Цены.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
					|	И Цены.Номенклатура.ВидНоменклатуры.ИспользоватьЦенуНоменклатуры
					|	И Цены.Период <= &Дата
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
					|	ТаблицаЦен.Упаковка КАК Упаковка,
					|	ТаблицаЦен.КоэффициентУпаковки КАК КоэффициентУпаковки,
					|	ТаблицаЦен.Цена КАК Цена
					|ИЗ
					|	ТаблицаЦен КАК ТаблицаЦен
					|
					|УПОРЯДОЧИТЬ ПО
					|	ТаблицаЦен.Приоритет,
					|	ТаблицаЦен.Период УБЫВ";
					Запрос.УстановитьПараметр("ВидМинимальныхЦенПродажи", РеквизитыМагазина.ВидМинимальныхЦенПродажи);
					Запрос.УстановитьПараметр("Дата", Дата);
					Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
					Запрос.УстановитьПараметр("Характеристика", Характеристика);
					
					МинимальнаяЦена = 0;
					УпаковкаМинимальнойЦены = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
					КоэффициентМинимальнойЦены = 1;
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						Если ЗначениеЗаполнено(Выборка.Цена) Тогда
							МинимальнаяЦена = Выборка.Цена;
						КонецЕсли;	
						Если ЗначениеЗаполнено(Выборка.Упаковка) Тогда
							УпаковкаМинимальнойЦены = Выборка.Упаковка;
						КонецЕсли;
						Если ЗначениеЗаполнено(Выборка.КоэффициентУпаковки) Тогда
							КоэффициентМинимальнойЦены = Выборка.КоэффициентУпаковки;
						КонецЕсли;
					КонецЕсли;
					
					Если ЦенаВыборки > 0 И МинимальнаяЦена > 0 Тогда
						Если УпаковкаМинимальнойЦены = УпаковкаЦены Тогда
							Если ЦенаВыборки < МинимальнаяЦена Тогда
								ЦенаВыборки = МинимальнаяЦена;
								УпаковкаЦены = УпаковкаМинимальнойЦены;
								КоэффициентУпаковки = КоэффициентМинимальнойЦены;
							КонецЕсли;
						Иначе
							Если Окр(ЦенаВыборки / КоэффициентУпаковки, 2) < Окр(МинимальнаяЦена / КоэффициентМинимальнойЦены, 2) Тогда
								ЦенаВыборки = МинимальнаяЦена;
								УпаковкаЦены = УпаковкаМинимальнойЦены;
								КоэффициентУпаковки = КоэффициентМинимальнойЦены;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если УпаковкаЦены = Упаковка Тогда
					Цена = ЦенаВыборки;
				Иначе
					КоэффициентУпаковкиВходящий = ?(ЗначениеЗаполнено(Упаковка), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Упаковка, "Коэффициент"), 1);
					Если ЗначениеЗаполнено(КоэффициентУпаковкиВходящий) Тогда
						Цена = Окр(ЦенаВыборки * КоэффициентУпаковкиВходящий / КоэффициентУпаковки, 2);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Цена;

КонецФункции

// Получает последние цены закупки номенклатуры.
//
// Параметры:
//  Дата - Дата - дата получения цены.
//  Магазин - СправочникСсылка.Магазины - вид цены номенклатуры.
//  Контрагент - СправочникССылка.Контрагент - контрагент, поставщик номенклатуры.
//  СсылкаНаПоступление - ДокументСсылка.ПоступлениеНоменклатуры - поступление по которому подбирается цена.
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура для подбора цены.
//  Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика для подбора цены.
//  Упаковка - СправочникСсылка.УпаковкиНоменклатуры - упаковка для подбора цены.
//  ПриводитьКМинимальнойЦене - Булево - признак приведения к минимальной цене.
//
// Возвращаемое значение:
//  Число - цена продажи.
//
Функция ЦенаПоследнейЗакупки(Дата, Магазин, Контрагент, СсылкаНаПоступление, Номенклатура, Характеристика, Упаковка) Экспорт

	Цена = 0;
		
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ТЧТовары.Цена,
	|	ТЧТовары.Упаковка
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК ТЧТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров КАК ДокументПоступлениеТоваров
	|		ПО (ДокументПоступлениеТоваров.Ссылка = ТЧТовары.Ссылка)
	|ГДЕ
	|	ТЧТовары.Номенклатура = &Номенклатура
	|	И ТЧТовары.Характеристика = &Характеристика
	|	И (ДокументПоступлениеТоваров.Магазин = &Магазин
	|			ИЛИ &Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
	|	И (ДокументПоступлениеТоваров.Контрагент = &Контрагент
	|			ИЛИ &Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|	И ДокументПоступлениеТоваров.Дата <= &Дата
	|	И ДокументПоступлениеТоваров.Проведен
	|	И ДокументПоступлениеТоваров.Ссылка <> &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументПоступлениеТоваров.Дата УБЫВ");
	
	Запрос.УстановитьПараметр("Дата"          , Дата);
	Запрос.УстановитьПараметр("Ссылка"        , СсылкаНаПоступление);
	Запрос.УстановитьПараметр("Контрагент"    , Контрагент);
	Запрос.УстановитьПараметр("Магазин"       , Магазин);
	Запрос.УстановитьПараметр("Номенклатура"  , Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если ЗначениеЗаполнено(Выборка.Цена) Тогда
			
			КоэффициентУпаковки1 = ?(ЗначениеЗаполнено(Выборка.Упаковка), Выборка.Упаковка.Коэффициент, 1);
			КоэффициентУпаковки2 = ?(ЗначениеЗаполнено(Упаковка), Упаковка.Коэффициент, 1);
			Цена = Выборка.Цена*КоэффициентУпаковки2/КоэффициентУпаковки1;
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат Цена;
	
КонецФункции

// Получает последние цены закупки по договору комиссии.
//
// Параметры:
//  Параметры - Структура - параметры выполнения операции.
//
Функция ЦенаПоследнейЗакупкиПоДоговоруКомиссии(Параметры) Экспорт
	
	Цена = 0;
	Упаковка = Параметры.Упаковка;
	КоэффициентУпаковки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Упаковка, "Коэффициент");
	Если НЕ ЗначениеЗаполнено(КоэффициентУпаковки) Тогда
		КоэффициентУпаковки = 1;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДокументПоступлениеТоваров.Дата КАК ДатаЦены,
	|	ТЧТовары.Цена КАК Цена,
	|	ТЧТовары.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(ТЧТовары.Упаковка.Коэффициент, 0) КАК КоэффициентУпаковки
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК ДокументПоступлениеТоваров
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров.Товары КАК ТЧТовары
	|		ПО ДокументПоступлениеТоваров.Ссылка = ТЧТовары.Ссылка
	|ГДЕ
	|	ТЧТовары.Номенклатура = &Номенклатура
	|	И ТЧТовары.Характеристика = &Характеристика
	|	И ДокументПоступлениеТоваров.Контрагент = &Контрагент
	|	И ДокументПоступлениеТоваров.Дата <= &Дата
	|	И ДокументПоступлениеТоваров.Проведен
	|	И ДокументПоступлениеТоваров.Договор = &Договор
	|	И ДокументПоступлениеТоваров.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОприходованиеТоваров.Дата,
	|	ТЧТовары.Цена,
	|	ТЧТовары.Упаковка,
	|	ЕСТЬNULL(ТЧТовары.Упаковка.Коэффициент, 0) КАК КоэффициентУпаковки
	|ИЗ
	|	Документ.ОприходованиеТоваров КАК ОприходованиеТоваров
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОприходованиеТоваров.Товары КАК ТЧТовары
	|		ПО ОприходованиеТоваров.Ссылка = ТЧТовары.Ссылка
	|ГДЕ
	|	ТЧТовары.Номенклатура = &Номенклатура
	|	И ТЧТовары.Характеристика = &Характеристика
	|	И ОприходованиеТоваров.Контрагент = &Контрагент
	|	И ОприходованиеТоваров.Дата <= &Дата
	|	И ОприходованиеТоваров.Проведен
	|	И ОприходованиеТоваров.Договор = &Договор
	|	И ОприходованиеТоваров.Организация = &Организация
	|
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаЦены УБЫВ");
	
	Запрос.УстановитьПараметр("Дата"          , КонецДня(Параметры.Дата));
	Запрос.УстановитьПараметр("Контрагент"    , Параметры.Контрагент);
	Запрос.УстановитьПараметр("Номенклатура"  , Параметры.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Параметры.Характеристика);
	Запрос.УстановитьПараметр("Договор",        Параметры.Договор);
	Запрос.УстановитьПараметр("Организация",    Параметры.Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если ЗначениеЗаполнено(Выборка.Цена) Тогда
			
			КоэффициентВыборки = Выборка.КоэффициентУпаковки;
			Если НЕ ЗначениеЗаполнено(КоэффициентВыборки) Тогда
				КоэффициентВыборки = 1;
			КонецЕсли;
			
			Цена = Выборка.Цена * КоэффициентВыборки / КоэффициентУпаковки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Цена;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииДляОбслуживанияСхемИнвентаризацийЗаполняемыхПоДаннымИБ

// Проверяет схему компоновки данных на соответствие ограничениям, необходимым
// для ее использования при расчете цен.
//
// Параметры:
//  СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - схема компоновки данных, которую необходимо проверить.
//  СообщениеОбОшибке     - Строка - содержит вводную часть сообщения об ошибке.
//
// Возвращаемое значение:
//  Булево - истина, если проверка пройдена успешно, в противном случае ложь.
//
Функция ПроверитьСхемуКомпоновкиДанных(СхемаКомпоновкиДанных, СообщениеОбОшибке = Неопределено) Экспорт
	
	Результат = Истина;
	
	Если СхемаКомпоновкиДанных <> Неопределено И СхемаКомпоновкиДанных.НаборыДанных.Количество() = 1 Тогда
		
		РабочийНаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
		Поля = ПолучитьОбязательныеПоляСхемыКомпоновкиДанных();
		
		Для Каждого Поле Из Поля Цикл
			Если Не ПроверитьПолеНабораДанныхСКД(РабочийНаборДанных, Поле.Ключ, Поле.Значение, СообщениеОбОшибке) Тогда
				Результат = Ложь;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ОбщегоНазначения.СообщитьПользователю(?(ЗначениеЗаполнено(СообщениеОбОшибке), СообщениеОбОшибке + ": ", "") 
			+ НСтр("ru='Схема компоновки данных для заполнения инвентаризации должна содержать один набор данных.'"));
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет завершение пересчета товаров.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ПриказНаПроведениеИнвентаризации - документ в котором проверяется выполнение пересчета товаров.
//  Отказ - Булево - Переменная отвечающая за прерывание проведения.
//
Процедура ПроверитьВыполнениеПересчетаТоваров(ДокументОбъект, Отказ) Экспорт
	
	Если НЕ ДокументОбъект.Статус = Перечисления.СтатусыПриказовНаПроведениеИнвентаризацийТоваров.Закрыт Тогда
	
		Возврат;
	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПересчетТоваров.Ссылка,
	|	ПересчетТоваров.ДокументОснование
	|ИЗ
	|	Документ.ПересчетТоваров КАК ПересчетТоваров
	|ГДЕ
	|	НЕ ПересчетТоваров.ПометкаУдаления
	|	И ПересчетТоваров.ДокументОснование = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПересчетТоваров.Ссылка,
	|	ПересчетТоваров.Статус,
	|	ПересчетТоваров.ДокументОснование
	|ИЗ
	|	Документ.ПересчетТоваров КАК ПересчетТоваров
	|ГДЕ
	|	НЕ ПересчетТоваров.ПометкаУдаления
	|	И ПересчетТоваров.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПересчетовТоваров.Выполнено)
	|	И ПересчетТоваров.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОбъект.Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	НаличиеДокументовПересчета = НЕ МассивРезультатов[0].Пустой();
	
	Если НЕ НаличиеДокументовПересчета Тогда
	
		Текст = НСтр("ru = 'Пересчет товаров не начинался'"); 
		
		ОбщегоНазначения.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			"Статус" ,
			,
			Отказ);
	Иначе
		РезультатСписокНеВыполненныхПересчетов = МассивРезультатов[1];
		
		Если НЕ РезультатСписокНеВыполненныхПересчетов.Пустой() Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'По документу %1 не выполнены пересчеты:'"),
				ДокументОбъект.Ссылка);
			
			Выборка = РезультатСписокНеВыполненныхПересчетов.Выбрать();
			Пока Выборка.Следующий() Цикл
			
				Текст = Текст  + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = '%1'"),
									Выборка.Ссылка);
			КонецЦикла;
			ОбщегоНазначения.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"Статус" ,
				,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Получает данные отчета ТОРГ29 для построения отчета и формирования печатных форм переоценки склада.
//
// Параметры:
//  СтруктураПараметров - Структура - параметры для получения данных отчета.
//  ТаблицаРезультат - ТаблицаЗначений - данные отчета ТОРГ29.
//
Процедура ДанныеТОРГ29(СтруктураПараметров, ТаблицаРезультат) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	СхемаКомпоновкиДанных = Отчеты.ТоварныйОтчетТОРГ29.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	ИспользоватьАссортимент = ПолучитьФункциональнуюОпцию("УстанавливатьВидыЦенВАссортименте")
		И АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(СтруктураПараметров.Магазин);
	
	Если СтруктураПараметров.Свойство("Регистратор") Тогда
		
		ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных[0].Запрос;
		
		ЗаменяемыйТекст = 
		"ВЫБРАТЬ
		|	ТаблицаИтог.Период КАК ПериодСекунда,
		|	НАЧАЛОПЕРИОДА(ТаблицаИтог.Период, МИНУТА) КАК ПериодМинута,
		|	НАЧАЛОПЕРИОДА(ТаблицаИтог.Период, ЧАС) КАК ПериодЧас,
		|	НАЧАЛОПЕРИОДА(ТаблицаИтог.Период, ДЕНЬ) КАК ПериодДень,
		|	НАЧАЛОПЕРИОДА(ТаблицаИтог.Период, НЕДЕЛЯ) КАК ПериодНеделя,
		|	НАЧАЛОПЕРИОДА(ТаблицаИтог.Период, МЕСЯЦ) КАК ПериодМесяц,
		|	НАЧАЛОПЕРИОДА(ТаблицаИтог.Период, КВАРТАЛ) КАК ПериодКвартал,
		|	НАЧАЛОПЕРИОДА(ТаблицаИтог.Период, ГОД) КАК ПериодГод,
		|	ТаблицаИтог.Регистратор КАК Регистратор,
		|	ТаблицаИтог.Склад КАК Склад,
		|	ТаблицаИтог.Номенклатура КАК Номенклатура,
		|	ТаблицаИтог.Характеристика КАК Характеристика,
		|	ТаблицаИтог.КоличествоНачальныйОстаток КАК КоличествоНачальныйОстаток,
		|	ТаблицаИтог.КоличествоПриход КАК КоличествоПриход,
		|	ТаблицаИтог.КоличествоРасход КАК КоличествоРасход,
		|	ТаблицаИтог.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток,
		|	ТаблицаИтог.СуммаНачальныйОстаток КАК СуммаНачальныйОстаток,
		|	ТаблицаИтог.СуммаПриход КАК СуммаПриход,
		|	ТаблицаИтог.СуммаРасход КАК СуммаРасход,
		|	ТаблицаИтог.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток
		|ИЗ
		|	ТаблицаИтог КАК ТаблицаИтог
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	БлижайшиеОстаткиПоНоменклатуре.Период,
		|	НАЧАЛОПЕРИОДА(БлижайшиеОстаткиПоНоменклатуре.Период, МИНУТА),
		|	НАЧАЛОПЕРИОДА(БлижайшиеОстаткиПоНоменклатуре.Период, ЧАС),
		|	НАЧАЛОПЕРИОДА(БлижайшиеОстаткиПоНоменклатуре.Период, ДЕНЬ),
		|	НАЧАЛОПЕРИОДА(БлижайшиеОстаткиПоНоменклатуре.Период, НЕДЕЛЯ),
		|	НАЧАЛОПЕРИОДА(БлижайшиеОстаткиПоНоменклатуре.Период, МЕСЯЦ),
		|	НАЧАЛОПЕРИОДА(БлижайшиеОстаткиПоНоменклатуре.Период, КВАРТАЛ),
		|	НАЧАЛОПЕРИОДА(БлижайшиеОстаткиПоНоменклатуре.Период, ГОД),
		|	БлижайшиеОстаткиПоНоменклатуре.Регистратор,
		|	БлижайшиеОстаткиПоНоменклатуре.Склад,
		|	БлижайшиеОстаткиПоНоменклатуре.Номенклатура,
		|	БлижайшиеОстаткиПоНоменклатуре.Характеристика,
		|	ЕСТЬNULL(ТоварыОрганизацийОстаткиИОбороты.КоличествоКонечныйОстаток, 0),
		|	0,
		|	0,
		|	ЕСТЬNULL(ТоварыОрганизацийОстаткиИОбороты.КоличествоКонечныйОстаток, 0),
		|	ЕСТЬNULL(БлижайшиеОстаткиПоНоменклатуре.СтараяЦена * ТоварыОрганизацийОстаткиИОбороты.КоличествоКонечныйОстаток, 0),
		|	ВЫБОР
		|		КОГДА БлижайшиеОстаткиПоНоменклатуре.Дельта > 0
		|			ТОГДА ЕСТЬNULL(БлижайшиеОстаткиПоНоменклатуре.Дельта * ТоварыОрганизацийОстаткиИОбороты.КоличествоКонечныйОстаток, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА БлижайшиеОстаткиПоНоменклатуре.Дельта < 0
		|			ТОГДА ЕСТЬNULL(-БлижайшиеОстаткиПоНоменклатуре.Дельта * ТоварыОрганизацийОстаткиИОбороты.КоличествоКонечныйОстаток, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ЕСТЬNULL(БлижайшиеОстаткиПоНоменклатуре.Цена * ТоварыОрганизацийОстаткиИОбороты.КоличествоКонечныйОстаток, 0)
		|ИЗ
		|	(ВЫБРАТЬ
		|		ИзмененияЦен.Период КАК Период,
		|		ИзмененияЦен.Регистратор КАК Регистратор,
		|		ИзмененияЦен.Дельта КАК Дельта,
		|		ИзмененияЦен.Цена КАК Цена,
		|		ИзмененияЦен.СтараяЦена КАК СтараяЦена,
		|		ИзмененияЦен.Номенклатура КАК Номенклатура,
		|		ИзмененияЦен.Характеристика КАК Характеристика,
		|		ТоварыОрганизацийОстаткиИОбороты.Склад КАК Склад,
		|		МАКСИМУМ(ТоварыОрганизацийОстаткиИОбороты.Период) КАК ПериодМаксимум
		|	ИЗ
		|		ВсеАктуальныеИзмененияЦен КАК ИзмененияЦен
		|			ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиИОбороты КАК ТоварыОрганизацийОстаткиИОбороты
		|			ПО ИзмененияЦен.Период >= ТоварыОрганизацийОстаткиИОбороты.Период
		|				И ИзмененияЦен.Номенклатура = ТоварыОрганизацийОстаткиИОбороты.Номенклатура
		|				И ИзмененияЦен.Характеристика = ТоварыОрганизацийОстаткиИОбороты.Характеристика
		|				И ИзмененияЦен.Магазин = ТоварыОрганизацийОстаткиИОбороты.Склад.Магазин
		|	ГДЕ
		|		&ИспользоватьАссортимент
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ИзмененияЦен.Период,
		|		ИзмененияЦен.Регистратор,
		|		ИзмененияЦен.Дельта,
		|		ИзмененияЦен.Цена,
		|		ИзмененияЦен.СтараяЦена,
		|		ИзмененияЦен.Номенклатура,
		|		ТоварыОрганизацийОстаткиИОбороты.Склад,
		|		ИзмененияЦен.Характеристика
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ИзмененияЦен.Период,
		|		ИзмененияЦен.Регистратор,
		|		ИзмененияЦен.Дельта,
		|		ИзмененияЦен.Цена,
		|		ИзмененияЦен.СтараяЦена,
		|		ИзмененияЦен.Номенклатура,
		|		ИзмененияЦен.Характеристика,
		|		ТоварыОрганизацийОстаткиИОбороты.Склад,
		|		МАКСИМУМ(ТоварыОрганизацийОстаткиИОбороты.Период)
		|	ИЗ
		|		ВсеАктуальныеИзмененияЦен КАК ИзмененияЦен
		|			ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиИОбороты КАК ТоварыОрганизацийОстаткиИОбороты
		|			ПО ИзмененияЦен.Период >= ТоварыОрганизацийОстаткиИОбороты.Период
		|				И ИзмененияЦен.Номенклатура = ТоварыОрганизацийОстаткиИОбороты.Номенклатура
		|				И ИзмененияЦен.Характеристика = ТоварыОрганизацийОстаткиИОбороты.Характеристика
		|				И ИзмененияЦен.Магазин = ТоварыОрганизацийОстаткиИОбороты.Склад.Магазин
		|				И ИзмененияЦен.ВидЦен = ТоварыОрганизацийОстаткиИОбороты.ВидЦенПоУмолчанию
		|	ГДЕ
		|		НЕ &ИспользоватьАссортимент
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ИзмененияЦен.Период,
		|		ИзмененияЦен.Регистратор,
		|		ИзмененияЦен.Дельта,
		|		ИзмененияЦен.Цена,
		|		ИзмененияЦен.СтараяЦена,
		|		ИзмененияЦен.Номенклатура,
		|		ТоварыОрганизацийОстаткиИОбороты.Склад,
		|		ИзмененияЦен.Характеристика) КАК БлижайшиеОстаткиПоНоменклатуре
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ОстаткиИОбороты.Период КАК Период,
		|			ОстаткиИОбороты.Номенклатура КАК Номенклатура,
		|			ОстаткиИОбороты.Характеристика КАК Характеристика,
		|			ОстаткиИОбороты.Склад КАК Склад,
		|			МИНИМУМ(ОстаткиИОбороты.КоличествоКонечныйОстаток) КАК КоличествоКонечныйОстаток
		|		ИЗ
		|			ОстаткиИОбороты КАК ОстаткиИОбороты
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ОстаткиИОбороты.Номенклатура,
		|			ОстаткиИОбороты.Характеристика,
		|			ОстаткиИОбороты.Склад,
		|			ОстаткиИОбороты.Период) КАК ТоварыОрганизацийОстаткиИОбороты
		|		ПО БлижайшиеОстаткиПоНоменклатуре.ПериодМаксимум = ТоварыОрганизацийОстаткиИОбороты.Период
		|			И БлижайшиеОстаткиПоНоменклатуре.Номенклатура = ТоварыОрганизацийОстаткиИОбороты.Номенклатура
		|			И БлижайшиеОстаткиПоНоменклатуре.Склад = ТоварыОрганизацийОстаткиИОбороты.Склад
		|			И БлижайшиеОстаткиПоНоменклатуре.Характеристика = ТоварыОрганизацийОстаткиИОбороты.Характеристика
		|ГДЕ
		|	ТоварыОрганизацийОстаткиИОбороты.КоличествоКонечныйОстаток <> 0
		|	И БлижайшиеОстаткиПоНоменклатуре.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|{ГДЕ
		|	(ТоварыОрганизацийОстаткиИОбороты.Период <= &КонецПериода)}";
		
		
		Если СтрНайти(ТекстЗапроса, ЗаменяемыйТекст) = 0 Тогда
			ВызватьИсключение НСтр("ru = 'Некорректный текст запроса'");
		КонецЕсли;
		
		ТекстЗамены = "ВЫБРАТЬ
		|	БлижайшиеОстаткиПоНоменклатуре.Период КАК ПериодСекунда,
		|	НАЧАЛОПЕРИОДА(БлижайшиеОстаткиПоНоменклатуре.Период, МИНУТА) КАК ПериодМинута,
		|	НАЧАЛОПЕРИОДА(БлижайшиеОстаткиПоНоменклатуре.Период, ЧАС) КАК ПериодЧас,
		|	НАЧАЛОПЕРИОДА(БлижайшиеОстаткиПоНоменклатуре.Период, ДЕНЬ) КАК ПериодДень,
		|	НАЧАЛОПЕРИОДА(БлижайшиеОстаткиПоНоменклатуре.Период, НЕДЕЛЯ) КАК ПериодНеделя,
		|	НАЧАЛОПЕРИОДА(БлижайшиеОстаткиПоНоменклатуре.Период, МЕСЯЦ) КАК ПериодМесяц,
		|	НАЧАЛОПЕРИОДА(БлижайшиеОстаткиПоНоменклатуре.Период, КВАРТАЛ) КАК ПериодКвартал,
		|	НАЧАЛОПЕРИОДА(БлижайшиеОстаткиПоНоменклатуре.Период, ГОД) КАК ПериодГод,
		|	БлижайшиеОстаткиПоНоменклатуре.Регистратор,
		|	БлижайшиеОстаткиПоНоменклатуре.Номенклатура,
		|	БлижайшиеОстаткиПоНоменклатуре.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	БлижайшиеОстаткиПоНоменклатуре.Номенклатура.Код КАК Код,
		|	БлижайшиеОстаткиПоНоменклатуре.Номенклатура.Артикул КАК Артикул,
		|	БлижайшиеОстаткиПоНоменклатуре.Характеристика,
		|	ЕСТЬNULL(ТоварыОрганизацийОстаткиИОбороты.КоличествоКонечныйОстаток, 0) КАК Количество,
		|	ЕСТЬNULL(БлижайшиеОстаткиПоНоменклатуре.СтараяЦена, 0) КАК СтараяЦена,
		|	ЕСТЬNULL(БлижайшиеОстаткиПоНоменклатуре.Дельта * ТоварыОрганизацийОстаткиИОбороты.КоличествоКонечныйОстаток, 0) КАК Отклонение,
		|	ЕСТЬNULL(БлижайшиеОстаткиПоНоменклатуре.Цена, 0) КАК Цена
		|ИЗ
		|	(ВЫБРАТЬ
		|		ИзмененияЦен.Период КАК Период,
		|		ИзмененияЦен.Регистратор КАК Регистратор,
		|		ИзмененияЦен.Дельта КАК Дельта,
		|		ИзмененияЦен.Цена КАК Цена,
		|		ИзмененияЦен.СтараяЦена КАК СтараяЦена,
		|		ИзмененияЦен.Номенклатура КАК Номенклатура,
		|		ИзмененияЦен.Характеристика КАК Характеристика,
		|		ТоварыОрганизацийОстаткиИОбороты.Склад КАК Склад,
		|		МАКСИМУМ(ТоварыОрганизацийОстаткиИОбороты.Период) КАК ПериодМаксимум
		|	ИЗ
		|		ВсеАктуальныеИзмененияЦен КАК ИзмененияЦен
		|			ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиИОбороты КАК ТоварыОрганизацийОстаткиИОбороты
		|			ПО ИзмененияЦен.Период >= ТоварыОрганизацийОстаткиИОбороты.Период
		|				И ИзмененияЦен.Номенклатура = ТоварыОрганизацийОстаткиИОбороты.Номенклатура
		|				И ИзмененияЦен.Характеристика = ТоварыОрганизацийОстаткиИОбороты.Характеристика
		|				И ИзмененияЦен.Магазин = ТоварыОрганизацийОстаткиИОбороты.Склад.Магазин
		|	ГДЕ
		|		&ИспользоватьАссортимент И ИзмененияЦен.Регистратор = &Регистратор
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ИзмененияЦен.Период,
		|		ИзмененияЦен.Регистратор,
		|		ИзмененияЦен.Дельта,
		|		ИзмененияЦен.Цена,
		|		ИзмененияЦен.СтараяЦена,
		|		ИзмененияЦен.Номенклатура,
		|		ТоварыОрганизацийОстаткиИОбороты.Склад,
		|		ИзмененияЦен.Характеристика
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ИзмененияЦен.Период,
		|		ИзмененияЦен.Регистратор,
		|		ИзмененияЦен.Дельта,
		|		ИзмененияЦен.Цена,
		|		ИзмененияЦен.СтараяЦена,
		|		ИзмененияЦен.Номенклатура,
		|		ИзмененияЦен.Характеристика,
		|		ТоварыОрганизацийОстаткиИОбороты.Склад,
		|		МАКСИМУМ(ТоварыОрганизацийОстаткиИОбороты.Период)
		|	ИЗ
		|		ВсеАктуальныеИзмененияЦен КАК ИзмененияЦен
		|			ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиИОбороты КАК ТоварыОрганизацийОстаткиИОбороты
		|			ПО ИзмененияЦен.Период >= ТоварыОрганизацийОстаткиИОбороты.Период
		|				И ИзмененияЦен.Номенклатура = ТоварыОрганизацийОстаткиИОбороты.Номенклатура
		|				И ИзмененияЦен.Характеристика = ТоварыОрганизацийОстаткиИОбороты.Характеристика
		|				И ИзмененияЦен.Магазин = ТоварыОрганизацийОстаткиИОбороты.Склад.Магазин
		|				И ИзмененияЦен.ВидЦен = ТоварыОрганизацийОстаткиИОбороты.ВидЦенПоУмолчанию
		|	ГДЕ
		|		НЕ &ИспользоватьАссортимент И ИзмененияЦен.Регистратор = &Регистратор
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ИзмененияЦен.Период,
		|		ИзмененияЦен.Регистратор,
		|		ИзмененияЦен.Дельта,
		|		ИзмененияЦен.Цена,
		|		ИзмененияЦен.СтараяЦена,
		|		ИзмененияЦен.Номенклатура,
		|		ТоварыОрганизацийОстаткиИОбороты.Склад,
		|		ИзмененияЦен.Характеристика) КАК БлижайшиеОстаткиПоНоменклатуре
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ОстаткиИОбороты.Период КАК Период,
		|			ОстаткиИОбороты.Номенклатура КАК Номенклатура,
		|			ОстаткиИОбороты.Характеристика КАК Характеристика,
		|			ОстаткиИОбороты.Склад КАК Склад,
		|			МИНИМУМ(ОстаткиИОбороты.КоличествоКонечныйОстаток) КАК КоличествоКонечныйОстаток
		|		ИЗ
		|			ОстаткиИОбороты КАК ОстаткиИОбороты
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ОстаткиИОбороты.Номенклатура,
		|			ОстаткиИОбороты.Характеристика,
		|			ОстаткиИОбороты.Склад,
		|			ОстаткиИОбороты.Период) КАК ТоварыОрганизацийОстаткиИОбороты
		|		ПО БлижайшиеОстаткиПоНоменклатуре.ПериодМаксимум = ТоварыОрганизацийОстаткиИОбороты.Период
		|			И БлижайшиеОстаткиПоНоменклатуре.Номенклатура = ТоварыОрганизацийОстаткиИОбороты.Номенклатура
		|			И БлижайшиеОстаткиПоНоменклатуре.Склад = ТоварыОрганизацийОстаткиИОбороты.Склад
		|			И БлижайшиеОстаткиПоНоменклатуре.Характеристика = ТоварыОрганизацийОстаткиИОбороты.Характеристика
		|ГДЕ
		|	НЕ ТоварыОрганизацийОстаткиИОбороты.КоличествоКонечныйОстаток = 0 И НЕ ЕСТЬNULL(БлижайшиеОстаткиПоНоменклатуре.Дельта * ТоварыОрганизацийОстаткиИОбороты.КоличествоКонечныйОстаток, 0) = 0
		|{ГДЕ
		|	(ТоварыОрганизацийОстаткиИОбороты.Период <= &КонецПериода)}
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменяемыйТекст, ТекстЗамены);
		СхемаКомпоновкиДанных.НаборыДанных[0].Запрос = ТекстЗапроса;
		
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		
		ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных[0].Запрос;
		
		ЗаменяемыйТекст = "	ВЫБОР
		|		КОГДА ЦеныНоменклатурыА.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|				ИЛИ ЕСТЬNULL(ЦеныНоменклатурыА.Упаковка.Коэффициент, 0) = 0
		|			ТОГДА ЦеныНоменклатурыА.Цена
		|		ИНАЧЕ ЦеныНоменклатурыА.Цена / ЦеныНоменклатурыА.Упаковка.Коэффициент
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР
		|		КОГДА ЦеныНоменклатурыБ.Цена ЕСТЬ NULL
		|			ТОГДА 0
		|		КОГДА ЦеныНоменклатурыБ.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|				ИЛИ ЕСТЬNULL(ЦеныНоменклатурыБ.Упаковка.Коэффициент, 0) = 0
		|			ТОГДА ЦеныНоменклатурыБ.Цена
		|		ИНАЧЕ ЦеныНоменклатурыБ.Цена / ЦеныНоменклатурыБ.Упаковка.Коэффициент
		|	КОНЕЦ КАК СтараяЦена,
		|	ВЫБОР
		|		КОГДА ЦеныНоменклатурыА.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|				ИЛИ ЕСТЬNULL(ЦеныНоменклатурыА.Упаковка.Коэффициент, 0) = 0
		|			ТОГДА ЦеныНоменклатурыА.Цена
		|		ИНАЧЕ ЦеныНоменклатурыА.Цена / ЦеныНоменклатурыА.Упаковка.Коэффициент
		|	КОНЕЦ - ВЫБОР
		|		КОГДА ЦеныНоменклатурыБ.Цена ЕСТЬ NULL
		|			ТОГДА 0
		|		КОГДА ЦеныНоменклатурыБ.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|				ИЛИ ЕСТЬNULL(ЦеныНоменклатурыБ.Упаковка.Коэффициент, 0) = 0
		|			ТОГДА ЦеныНоменклатурыБ.Цена
		|		ИНАЧЕ ЦеныНоменклатурыБ.Цена / ЦеныНоменклатурыБ.Упаковка.Коэффициент
		|	КОНЕЦ КАК Дельта";
		
		Если СтрНайти(ТекстЗапроса, ЗаменяемыйТекст) = 0 Тогда
			ВызватьИсключение НСтр("ru = 'Некорректный текст запроса'");
		КонецЕсли;
		
		ТекстЗамены = 
		"	ЦеныНоменклатурыА.Цена КАК Цена,
		|	ВЫБОР
		|		КОГДА
		|			ЦеныНоменклатурыБ.Цена ЕСТЬ NULL
		|		ТОГДА
		|			0
		|		ИНАЧЕ
		|			ЦеныНоменклатурыБ.Цена
		|	КОНЕЦ КАК СтараяЦена,
		|		ЦеныНоменклатурыА.Цена
		|		- ВЫБОР
		|			КОГДА
		|				ЦеныНоменклатурыБ.Цена ЕСТЬ NULL
		|			ТОГДА
		|				0
		|			ИНАЧЕ
		|				ЦеныНоменклатурыБ.Цена
		|		КОНЕЦ
		|		 КАК Дельта";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменяемыйТекст, ТекстЗамены);
		СхемаКомпоновкиДанных.НаборыДанных[0].Запрос = ТекстЗапроса;
		
	КонецЕсли;
		
	Если СтруктураПараметров.Свойство("Регистратор") Тогда
		
		// Подготовка компоновщика макета компоновки данных.
		Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
		Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		
		// Выбранные поля.
		ОбязательныеПоля = Новый Массив;
		
		ОбязательныеПоля.Добавить("Код");
		ОбязательныеПоля.Добавить("Артикул");
		ОбязательныеПоля.Добавить("Номенклатура");
		ОбязательныеПоля.Добавить("Характеристика");
		ОбязательныеПоля.Добавить("ЕдиницаИзмерения");
		ОбязательныеПоля.Добавить("Количество");
		ОбязательныеПоля.Добавить("СтараяЦена");
		ОбязательныеПоля.Добавить("Отклонение");
		ОбязательныеПоля.Добавить("Цена");
		
		Компоновщик.Настройки.Выбор.Элементы.Очистить();
		Для Каждого ОбязательноеПоле Из ОбязательныеПоля Цикл
			ПолеСКД = КомпоновкаДанныхСервер.НайтиПолеСКДПоПолномуИмени(Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы, ОбязательноеПоле);
			Если ПолеСКД <> Неопределено Тогда
				ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПоле.Поле = ПолеСКД.Поле;
			КонецЕсли;
		КонецЦикла;
		
		// Добавление группировок.
		Компоновщик.Настройки.Структура.Очистить();
		
		Если СтруктураПараметров.Свойство("Регистратор") Тогда
			ОбщегоНазначенияРТКлиентСервер.НоваяГруппировка(Компоновщик);
		Иначе
			ОбщегоНазначенияРТКлиентСервер.НоваяГруппировка(Компоновщик, "Регистратор");
		КонецЕсли;
		
		
		// Отключение итогов.
		ОбщегоНазначенияРТКлиентСервер.УстановитьПараметрВывода(Компоновщик,"ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
		ОбщегоНазначенияРТКлиентСервер.УстановитьПараметрВывода(Компоновщик,"ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
		
		Период = Новый СтандартныйПериод;
		
		Если СтруктураПараметров.Свойство("ДатаНачала") Тогда
			Период.ДатаНачала    = НачалоДня(СтруктураПараметров.ДатаНачала);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ДатаОкончания") Тогда
			Период.ДатаОкончания = КонецДня(СтруктураПараметров.ДатаОкончания);
		КонецЕсли;
		
		// Установка отборов.
		ОбщегоНазначенияРТКлиентСервер.НовыйОтбор(Компоновщик, "Организация", СтруктураПараметров.Организация);
		ОбщегоНазначенияРТКлиентСервер.НовыйОтбор(Компоновщик, "Склад", СтруктураПараметров.Склад, ,ЗначениеЗаполнено(СтруктураПараметров.Склад));
		
		// Параметры:
		ОбщегоНазначенияРТКлиентСервер.УстановитьПараметр(Компоновщик.Настройки, "ПериодОтчета", Период);
		ОбщегоНазначенияРТКлиентСервер.УстановитьПараметр(Компоновщик.Настройки, "КонецПериодаГраница", Новый Граница(КонецДня(СтруктураПараметров.ДатаОкончания), ВидГраницы.Включая));
		ОбщегоНазначенияРТКлиентСервер.УстановитьПараметр(Компоновщик.Настройки, "Магазин", СтруктураПараметров.Магазин);
		ОбщегоНазначенияРТКлиентСервер.УстановитьПараметр(Компоновщик.Настройки, "ОбъектПланирования", СтруктураПараметров.Магазин.ФорматМагазина);
		ОбщегоНазначенияРТКлиентСервер.УстановитьПараметр(Компоновщик.Настройки, "ИспользоватьАссортимент", ИспользоватьАссортимент);
		ОбщегоНазначенияРТКлиентСервер.УстановитьПараметр(Компоновщик.Настройки, "ИспользоватьПрименениеЦен", СтруктураПараметров.Магазин.ИспользоватьПрименениеЦен 
		И ПолучитьФункциональнуюОпцию("ИспользоватьПрименениеЦен"));
		ОбщегоНазначенияРТКлиентСервер.УстановитьПараметр(Компоновщик.Настройки, "ПравилоЦенообразования", СтруктураПараметров.Магазин.ПравилоЦенообразования);
		
		Если СтруктураПараметров.Свойство("Регистратор") Тогда
			ОбщегоНазначенияРТКлиентСервер.УстановитьПараметр(Компоновщик.Настройки, "Регистратор", СтруктураПараметров.Регистратор);
		КонецЕсли;
		
		// Компоновка макета компоновки данных.
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		// Построение таблицы значений.
		Процессор = Новый ПроцессорКомпоновкиДанных;
		Процессор.Инициализировать(МакетКомпоновкиДанных);
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
		ИсходныеДанные = Новый ТаблицаЗначений;
		ПроцессорВывода.УстановитьОбъект(ИсходныеДанные);
		ПроцессорВывода.Вывести(Процессор);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = СхемаКомпоновкиДанных.НаборыДанных[0].Запрос;
		Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(СтруктураПараметров.ДатаНачала));
		Запрос.УстановитьПараметр("КонецПериода", КонецДня(СтруктураПараметров.ДатаОкончания));
		Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(СтруктураПараметров.ДатаОкончания), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("ПравилоЦенообразования", СтруктураПараметров.Магазин.ПравилоЦенообразования);
		Запрос.УстановитьПараметр("ИспользоватьАссортимент", ИспользоватьАссортимент);
		Запрос.УстановитьПараметр("ОбъектПланирования", СтруктураПараметров.Магазин.ФорматМагазина);
		Запрос.УстановитьПараметр("Магазин", СтруктураПараметров.Магазин);
		
		Если ЗначениеЗаполнено(СтруктураПараметров.Склад) Тогда 
			
			ТекстЗапроса = Запрос.Текст;
			ЗаменяемыйТекст = 
			"ГДЕ
			|	Склады.Магазин = &Магазин
			|{ГДЕ
			|	(Склады.Ссылка = &Склад)}";
			
			Если СтрНайти(ТекстЗапроса, ЗаменяемыйТекст) = 0 Тогда
				ВызватьИсключение НСтр("ru = 'Некорректный текст запроса'");
			КонецЕсли;

			ТекстЗамены = 
			"ГДЕ
			|Склады.Магазин = &Магазин
			|И Склады.Ссылка = &Склад";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменяемыйТекст, ТекстЗамены);
			Запрос.Текст = ТекстЗапроса;
			
			Запрос.УстановитьПараметр("Склад", СтруктураПараметров.Склад);
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ИспользоватьПрименениеЦен", СтруктураПараметров.Магазин.ИспользоватьПрименениеЦен 
			И ПолучитьФункциональнуюОпцию("ИспользоватьПрименениеЦен"));
			
		ИсходныеДанные = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	
	ТаблицаРезультат = ИсходныеДанные;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Формирует текст запроса к тч Товары и помещает тч во временную таблицу.
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросВременнаяТаблицаТовары(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;";
	
КонецПроцедуры

// Формирует текст запроса получения розничных цен.
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
// Магазин - СправочникСсылка.Магазины - магазин по которому подбираются розничные цены.
//
Процедура СформироватьЗапросЦеныПоРозничнымЦенам(ТекстЗапроса, Магазин) Экспорт
	ИспользоватьАссортимент = ПолучитьФункциональнуюОпцию("УстанавливатьВидыЦенВАссортименте")
								И АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Магазин);
	Если ИспользоватьАссортимент Тогда
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Ассортимент.Номенклатура КАК Номенклатура,
		|	Ассортимент.ВидЦен КАК ВидЦен
		|ПОМЕСТИТЬ втАссортимент
		|ИЗ
		|	РегистрСведений.Ассортимент.СрезПоследних(
		|			КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
		|			(НЕ &ИспользоватьПрименениеЦен)
		|			И ОбъектПланирования = &ФорматОбъектаЦенообразования
		|			И Номенклатура В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					Т.Номенклатура
		|				ИЗ
		|					ВременнаяТаблицаТовары КАК Т)) КАК Ассортимент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Ассортимент.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
		|	ЦеныНоменклатуры.Упаковка КАК Упаковка,
		|	МАКСИМУМ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)) КАК Цена
		|ПОМЕСТИТЬ Цены
		|ИЗ
		|	втАссортимент КАК Ассортимент
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&Дата,
		|				ВидЦены В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							Ц.ВидЦен
		|						ИЗ
		|							втАссортимент КАК Ц)
		|					И Номенклатура В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							Т.Номенклатура
		|						ИЗ
		|							втАссортимент КАК Т)) КАК ЦеныНоменклатуры
		|		ПО (ЦеныНоменклатуры.Номенклатура = Ассортимент.Номенклатура)
		|			И (ЦеныНоменклатуры.ВидЦены = Ассортимент.ВидЦен)
		|
		|СГРУППИРОВАТЬ ПО
		|	Ассортимент.Номенклатура,
		|	ЦеныНоменклатуры.Характеристика,
		|	ЦеныНоменклатуры.Упаковка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДействующиеЦены.Номенклатура,
		|	ДействующиеЦены.Характеристика,
		|	ДействующиеЦены.Упаковка,
		|	ДействующиеЦены.Цена
		|ИЗ
		|	РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПоследних(
		|			&Дата,
		|			ОбъектЦенообразования = &Магазин
		|				И (Номенклатура, Характеристика) В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						Т.Номенклатура,
		|						Т.Характеристика
		|					ИЗ
		|						ВременнаяТаблицаТовары КАК Т)) КАК ДействующиеЦены
		|ГДЕ
		|	&ИспользоватьПрименениеЦен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА МинимальныеЦены.Цена ЕСТЬ NULL 
		|			ТОГДА РозничныеЦены.Цена
		|		КОГДА ВЫБОР
		|				КОГДА МинимальныеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА МинимальныеЦены.Цена
		|				ИНАЧЕ МинимальныеЦены.Цена / МинимальныеЦены.Упаковка.Коэффициент
		|			КОНЕЦ > ВЫБОР
		|				КОГДА РозничныеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА РозничныеЦены.Цена
		|				ИНАЧЕ РозничныеЦены.Цена / РозничныеЦены.Упаковка.Коэффициент
		|			КОНЕЦ
		|			ТОГДА МинимальныеЦены.Цена
		|		ИНАЧЕ РозничныеЦены.Цена
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР
		|		КОГДА МинимальныеЦены.Цена ЕСТЬ NULL 
		|			ТОГДА РозничныеЦены.Упаковка
		|		КОГДА ВЫБОР
		|				КОГДА МинимальныеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА МинимальныеЦены.Цена
		|				ИНАЧЕ МинимальныеЦены.Цена / МинимальныеЦены.Упаковка.Коэффициент
		|			КОНЕЦ > ВЫБОР
		|				КОГДА РозничныеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА РозничныеЦены.Цена
		|				ИНАЧЕ РозничныеЦены.Цена / РозничныеЦены.Упаковка.Коэффициент
		|			КОНЕЦ
		|			ТОГДА МинимальныеЦены.Упаковка
		|		ИНАЧЕ РозничныеЦены.Упаковка
		|	КОНЕЦ КАК Упаковка,
		|	РозничныеЦены.Номенклатура,
		|	РозничныеЦены.Характеристика
		|ПОМЕСТИТЬ РозничныеЦены
		|ИЗ
		|	Цены КАК РозничныеЦены
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&Дата,
		|				&ПриводитьКМинимальнойЦене
		|					И ВидЦены = &ВидМинимальныхЦенПродажи
		|					И (Номенклатура, Характеристика) В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							Т.Номенклатура,
		|							Т.Характеристика
		|						ИЗ
		|							ВременнаяТаблицаТовары КАК Т)) КАК МинимальныеЦены
		|		ПО РозничныеЦены.Номенклатура = МинимальныеЦены.Номенклатура
		|			И РозничныеЦены.Характеристика = МинимальныеЦены.Характеристика
		|			И (&ПриводитьКМинимальнойЦене)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
		|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА 1
		|		ИНАЧЕ ВременнаяТаблицаТовары.Упаковка.Коэффициент
		|	КОНЕЦ КАК КоэффициентУпаковки,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|			ТОГДА ВременнаяТаблицаТовары.Номенклатура.Номинал * ВЫБОР
		|					КОГДА ВременнаяТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|						ТОГДА 1
		|					ИНАЧЕ ВременнаяТаблицаТовары.Упаковка.Коэффициент
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВременнаяТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА 1
		|				ИНАЧЕ ВременнаяТаблицаТовары.Упаковка.Коэффициент
		|			КОНЕЦ * ЕСТЬNULL(РозничныеЦены.Цена, 0) / ЕСТЬNULL(РозничныеЦены.Упаковка.Коэффициент, 1)
		|	КОНЕЦ КАК Цена
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РозничныеЦены КАК РозничныеЦены
		|		ПО ВременнаяТаблицаТовары.Номенклатура = РозничныеЦены.Номенклатура
		|			И ВременнаяТаблицаТовары.Характеристика = РозничныеЦены.Характеристика";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеновыеГруппы.ЦеноваяГруппа КАК ЦеноваяГруппа,
		|	ЦеновыеГруппы.ВидЦен КАК ВидЦен
		|ПОМЕСТИТЬ ЦеновыеГруппыПравила
		|ИЗ
		|	Справочник.ПравилаЦенообразования.ЦеновыеГруппы КАК ЦеновыеГруппы
		|ГДЕ
		|	ЦеновыеГруппы.Ссылка = &ПравилоЦенообразования
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидЦен,
		|	ЦеноваяГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидЦеныПравила.ВидЦен КАК ВидЦен
		|ПОМЕСТИТЬ ВидЦеныПравила
		|ИЗ
		|	Справочник.ПравилаЦенообразования КАК ВидЦеныПравила
		|ГДЕ
		|	ВидЦеныПравила.Ссылка = &ПравилоЦенообразования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	ПодЗапрос.Номенклатура КАК Номенклатура,
		|	ПодЗапрос.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(ПодЗапрос.ЦенаПоЦеновымГруппам) > 0
		|			ТОГДА МАКСИМУМ(ПодЗапрос.УпаковкаПоЦеновымГруппам)
		|		ИНАЧЕ МАКСИМУМ(ПодЗапрос.УпаковкаПоВидуЦен)
		|	КОНЕЦ КАК Упаковка,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(ПодЗапрос.ЦенаПоЦеновымГруппам) > 0
		|			ТОГДА МАКСИМУМ(ПодЗапрос.ЦенаПоЦеновымГруппам)
		|		ИНАЧЕ МАКСИМУМ(ПодЗапрос.ЦенаПоВидуЦен)
		|	КОНЕЦ КАК Цена
		|ПОМЕСТИТЬ Цены
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЦеныНоменклатурыПоВидуЦен.Номенклатура КАК Номенклатура,
		|		ЦеныНоменклатурыПоВидуЦен.Характеристика КАК Характеристика,
		|		ЦеныНоменклатурыПоВидуЦен.Упаковка КАК УпаковкаПоВидуЦен,
		|		ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК УпаковкаПоЦеновымГруппам,
		|		ЦеныНоменклатурыПоВидуЦен.Цена КАК ЦенаПоВидуЦен,
		|		0 КАК ЦенаПоЦеновымГруппам
		|	ИЗ
		|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&Дата,
		|				ВидЦены В
		|						(ВЫБРАТЬ
		|							ВидЦеныПравила.ВидЦен
		|						ИЗ
		|							ВидЦеныПравила КАК ВидЦеныПравила)
		|					И (Номенклатура, Характеристика) В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							Т.Номенклатура,
		|							Т.Характеристика
		|						ИЗ
		|							ВременнаяТаблицаТовары КАК Т)) КАК ЦеныНоменклатурыПоВидуЦен
		|	ГДЕ
		|		(НЕ &ИспользоватьПрименениеЦен)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СправочникНоменклатура.Ссылка,
		|		ЦеныНоменклатурыПоЦеновымГруппам.Характеристика,
		|		ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка),
		|		ЦеныНоменклатурыПоЦеновымГруппам.Упаковка,
		|		0,
		|		ЕСТЬNULL(ЦеныНоменклатурыПоЦеновымГруппам.Цена, 0)
		|	ИЗ
		|		ЦеновыеГруппыПравила КАК ЦеновыеГруппыПравила
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|			ПО ЦеновыеГруппыПравила.ЦеноваяГруппа = СправочникНоменклатура.ЦеноваяГруппа
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|					&Дата,
		|					ВидЦены В
		|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|								ЦеновыеГруппыПравила.ВидЦен
		|							ИЗ
		|								ЦеновыеГруппыПравила КАК ЦеновыеГруппыПравила)
		|						И (Номенклатура, Характеристика) В
		|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|								Т.Номенклатура,
		|								Т.Характеристика
		|							ИЗ
		|								ВременнаяТаблицаТовары КАК Т)) КАК ЦеныНоменклатурыПоЦеновымГруппам
		|			ПО (ЦеныНоменклатурыПоЦеновымГруппам.Номенклатура = СправочникНоменклатура.Ссылка)
		|				И (ЦеныНоменклатурыПоЦеновымГруппам.ВидЦены = ЦеновыеГруппыПравила.ВидЦен)
		|	ГДЕ
		|		(НЕ &ИспользоватьПрименениеЦен)) КАК ПодЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ПодЗапрос.Номенклатура,
		|	ПодЗапрос.Характеристика
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДействующиеЦены.Номенклатура,
		|	ДействующиеЦены.Характеристика,
		|	ДействующиеЦены.Упаковка,
		|	ДействующиеЦены.Цена
		|ИЗ
		|	РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПоследних(
		|			&Дата,
		|			ОбъектЦенообразования = &Магазин
		|				И (Номенклатура, Характеристика) В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						Т.Номенклатура,
		|						Т.Характеристика
		|					ИЗ
		|						ВременнаяТаблицаТовары КАК Т)) КАК ДействующиеЦены
		|ГДЕ
		|	&ИспользоватьПрименениеЦен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА МинимальныеЦены.Цена ЕСТЬ NULL 
		|			ТОГДА РозничныеЦены.Цена
		|		КОГДА ВЫБОР
		|				КОГДА МинимальныеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА МинимальныеЦены.Цена
		|				ИНАЧЕ МинимальныеЦены.Цена / МинимальныеЦены.Упаковка.Коэффициент
		|			КОНЕЦ > ВЫБОР
		|				КОГДА РозничныеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА РозничныеЦены.Цена
		|				ИНАЧЕ РозничныеЦены.Цена / РозничныеЦены.Упаковка.Коэффициент
		|			КОНЕЦ
		|			ТОГДА МинимальныеЦены.Цена
		|		ИНАЧЕ РозничныеЦены.Цена
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР
		|		КОГДА МинимальныеЦены.Цена ЕСТЬ NULL 
		|			ТОГДА РозничныеЦены.Упаковка
		|		КОГДА ВЫБОР
		|				КОГДА МинимальныеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА МинимальныеЦены.Цена
		|				ИНАЧЕ МинимальныеЦены.Цена / МинимальныеЦены.Упаковка.Коэффициент
		|			КОНЕЦ > ВЫБОР
		|				КОГДА РозничныеЦены.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА РозничныеЦены.Цена
		|				ИНАЧЕ РозничныеЦены.Цена / РозничныеЦены.Упаковка.Коэффициент
		|			КОНЕЦ
		|			ТОГДА МинимальныеЦены.Упаковка
		|		ИНАЧЕ РозничныеЦены.Упаковка
		|	КОНЕЦ КАК Упаковка,
		|	РозничныеЦены.Номенклатура,
		|	РозничныеЦены.Характеристика
		|ПОМЕСТИТЬ РозничныеЦены
		|ИЗ
		|	Цены КАК РозничныеЦены
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&Дата,
		|				&ПриводитьКМинимальнойЦене
		|					И ВидЦены = &ВидМинимальныхЦенПродажи
		|					И (Номенклатура, Характеристика) В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							Т.Номенклатура,
		|							Т.Характеристика
		|						ИЗ
		|							ВременнаяТаблицаТовары КАК Т)) КАК МинимальныеЦены
		|		ПО РозничныеЦены.Номенклатура = МинимальныеЦены.Номенклатура
		|			И РозничныеЦены.Характеристика = МинимальныеЦены.Характеристика
		|			И (&ПриводитьКМинимальнойЦене)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
		|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА 1
		|		ИНАЧЕ ВременнаяТаблицаТовары.Упаковка.Коэффициент
		|	КОНЕЦ КАК КоэффициентУпаковки,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|			ТОГДА ВременнаяТаблицаТовары.Номенклатура.Номинал * ВЫБОР
		|					КОГДА ВременнаяТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|						ТОГДА 1
		|					ИНАЧЕ ВременнаяТаблицаТовары.Упаковка.Коэффициент
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВременнаяТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА 1
		|				ИНАЧЕ ВременнаяТаблицаТовары.Упаковка.Коэффициент
		|			КОНЕЦ * ЕСТЬNULL(РозничныеЦены.Цена, 0) / ЕСТЬNULL(РозничныеЦены.Упаковка.Коэффициент, 1)
		|	КОНЕЦ КАК Цена
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РозничныеЦены КАК РозничныеЦены
		|		ПО ВременнаяТаблицаТовары.Номенклатура = РозничныеЦены.Номенклатура
		|			И ВременнаяТаблицаТовары.Характеристика = РозничныеЦены.Характеристика
		|;";
	КонецЕсли;
	
КонецПроцедуры

// Удаляет подарочные сертификаты.
//
// Параметры:
//  ТабличнаяЧасть - ТаблицаЗначений - табличная часть документа.
//
Процедура УдалитьПодарочныеСертификаты(ТабличнаяЧасть) Экспорт

	КолвоЭлементовКоллекции = ТабличнаяЧасть.Количество();
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
		ЭлементКоллекции = ТабличнаяЧасть[КолвоЭлементовКоллекции - ОбратныйИндекс];

		Если ЭлементКоллекции.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда			
			ТабличнаяЧасть.Удалить(ЭлементКоллекции);
		КонецЕсли;
	КонецЦикла;
	

КонецПроцедуры

// Получает массив остатков по табличной части объекта.
//
// Параметры:
//  Объект - ДокументОбъект, ОбработкаОбъект - объект документа или обработки по которому подбираются остатки.
//  ИмяТабличнойЧасти - Строка - имя табличной части строкой.
//  
// Возвращаемое значение
//  Массив - массив остатков номенклатуры.
//
Функция ОстаткиНоменклатуры(Объект, ИмяТабличнойЧасти) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика,
	|	ТаблицаНоменклатуры.Склад
	|ПОМЕСТИТЬ ТаблицаВЗапрос
	|ИЗ
	|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Склад,
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			(Номенклатура, Характеристика, Склад) В
	|				(ВЫБРАТЬ
	|					ТаблицаВЗапрос.Номенклатура,
	|					ТаблицаВЗапрос.Характеристика,
	|					ТаблицаВЗапрос.Склад
	|				ИЗ
	|					ТаблицаВЗапрос КАК ТаблицаВЗапрос)) КАК ТоварыНаСкладахОстатки";
	
	ТаблицаНоменклатуры = Объект[ИмяТабличнойЧасти].Выгрузить();
	
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	
	Результат = Запрос.Выполнить();
	ТаблицаОстатков = Результат.Выгрузить();
	
	СтруктураПоиска = Новый Структура;
	МассивОстатков = Новый Массив;
	
	Для каждого СтрокаТаблицыНоменклатуры Из ТаблицаНоменклатуры Цикл
	
		СтруктураПоиска.Вставить("Номенклатура"  , СтрокаТаблицыНоменклатуры.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаТаблицыНоменклатуры.Характеристика);
		СтруктураПоиска.Вставить("Склад"         , СтрокаТаблицыНоменклатуры.Склад);
		
		МассивСтрок = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрок.Количество() > 0  Тогда
			
			МассивОстатков.Добавить(МассивСтрок[0].КоличествоОстаток)
			
		Иначе
			
			МассивОстатков.Добавить(0)
			
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат МассивОстатков;
КонецФункции

// Получает массив остатков по табличной части объекта.
//
// Параметры:
//  Объект - ДокументОбъект, ОбработкаОбъект - объект документа или обработки по которому подбираются остатки.
//  ИмяТабличнойЧасти - Строка - имя табличной части строкой.
//
Процедура ЗаполнитьОстаткиНоменклатуры(Объект, ИмяТабличнойЧасти) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика,
	|	ТаблицаНоменклатуры.Склад
	|ПОМЕСТИТЬ ТаблицаВЗапрос
	|ИЗ
	|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Склад,
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток - ТоварыНаСкладахОстатки.РезервОстаток КАК ОстатокБезРезерва
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			(Номенклатура, Характеристика, Склад) В
	|				(ВЫБРАТЬ
	|					ТаблицаВЗапрос.Номенклатура,
	|					ТаблицаВЗапрос.Характеристика,
	|					ТаблицаВЗапрос.Склад
	|				ИЗ
	|					ТаблицаВЗапрос КАК ТаблицаВЗапрос)) КАК ТоварыНаСкладахОстатки";
	
	ТаблицаНоменклатуры = Объект[ИмяТабличнойЧасти].Выгрузить();
	
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	
	Результат = Запрос.Выполнить();
	ТаблицаОстатков = Результат.Выгрузить();
	
	СтруктураПоиска = Новый Структура;
	МассивОстатков = Новый Массив;
	
	Для каждого СтрокаТаблицыНоменклатуры Из Объект[ИмяТабличнойЧасти] Цикл
	
		СтруктураПоиска.Вставить("Номенклатура"  , СтрокаТаблицыНоменклатуры.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаТаблицыНоменклатуры.Характеристика);
		СтруктураПоиска.Вставить("Склад"         , СтрокаТаблицыНоменклатуры.Склад);
		
		МассивСтрок = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрок.Количество() > 0  Тогда
			СтрокаТаблицыНоменклатуры.Остаток = МассивСтрок[0].ОстатокБезРезерва;
			МассивСтрок[0].ОстатокБезРезерва = МассивСтрок[0].ОстатокБезРезерва - СтрокаТаблицыНоменклатуры.Количество;
		Иначе
			СтрокаТаблицыНоменклатуры.Остаток = 0;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

// Получает таблицу остатков номенклатуры по магазину.
//
// Параметры:
//  ИсходныеДанные - ТаблицаЗначений - исходные данные. Колонки:
//    Номенклатура - СправочникСсылка.Номенклатура;
//    Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры;
//    Упаковка - СправочникСсылка.УпаковкиНоменклатуры;
//  ТорговыйОбъект - СправочникСсылка.Магазины, СправочникСсылка.Склады.
//
// Возвращаемое значение
//  ТаблицаЗначений - таблица остатков по магазину.
//
Функция ОстаткиНоменклатурыПоМагазину(ИсходныеДанные, ТорговыйОбъект) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатуры.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	&ИсходныеДанные КАК ТаблицаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Остатки.Номенклатура КАК Номенклатура,
	|	Остатки.Характеристика КАК Характеристика,
	|	СУММА(Остатки.КоличествоОстаток) КАК Остаток,
	|	СУММА(Остатки.РезервОстаток) КАК Резерв
	|ПОМЕСТИТЬ ОстаткиНоменклатуры
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			&УсловиеТорговогоОбъекта
	|				И (Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|						ТаблицаНоменклатуры.Характеристика КАК Характеристика
	|					ИЗ
	|						ТаблицаНоменклатуры КАК ТаблицаНоменклатуры)) КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Номенклатура,
	|	Остатки.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатуры.Упаковка КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаНоменклатуры.Упаковка.Коэффициент, 0) = 0
	|			ТОГДА Остатки.Остаток
	|		ИНАЧЕ Остатки.Остаток / ЕСТЬNULL(ТаблицаНоменклатуры.Упаковка.Коэффициент, 0)
	|	КОНЕЦ КАК Остаток,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаНоменклатуры.Упаковка.Коэффициент, 0) = 0
	|			ТОГДА Остатки.Резерв
	|		ИНАЧЕ Остатки.Резерв / ЕСТЬNULL(ТаблицаНоменклатуры.Упаковка.Коэффициент, 0)
	|	КОНЕЦ КАК Резерв
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНоменклатуры КАК Остатки
	|		ПО ТаблицаНоменклатуры.Номенклатура = Остатки.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = Остатки.Характеристика
	|";
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.УстановитьПараметр("ТорговыйОбъект", ТорговыйОбъект);
	
	Если ТипЗнч(ТорговыйОбъект) = Тип("СправочникСсылка.Магазины") Тогда
		УсловиеТорговогоОбъекта = "Склад.Магазин = &ТорговыйОбъект";
	Иначе
		УсловиеТорговогоОбъекта = "Склад = &ТорговыйОбъект";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеТорговогоОбъекта", УсловиеТорговогоОбъекта);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Процедура формирования движений по регистру "Движения серий товаров".
//
// Параметры:
//  ДополнительныеСвойства - Структура - структура дополнительных свойств для формирования движений.
//  Движения - движения документа для отражения в регистре "Движения серий товаров".
//  Отказ - Булево - признак отказа от выполнения операции.
//
Процедура ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт
	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДвиженияСерийТоваров;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ДвиженияСерийТоваров.Записывать = Истина;
	Движения.ДвиженияСерийТоваров.Загрузить(Таблица);
КонецПроцедуры

// Возвращает пустой шаблон структуры параметров для процедуры ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен.
//
// Возвращаемое значение
//  Структура - структуры параметров заполнения по виду цен.
//
Функция СтруктураПараметровЗаполненияПоВидуЦен() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Объект");
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти");
	СтруктураПараметров.Вставить("ВидЦен");
	СтруктураПараметров.Вставить("ВыделенныеСтроки");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("ЕстьНДС", Истина);
	СтруктураПараметров.Вставить("ЕстьСуммаСНДС", Ложь);
	СтруктураПараметров.Вставить("ВидЦеныВТабличнойЧасти", Ложь);
	СтруктураПараметров.Вставить("НеобходимостьПересчетаСуммыСУчетомСкидок", Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦенуСУчетомАгентскогоВознаграждения", Ложь);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Возвращает пустой шаблон структуры параметров для процедуры ЗаполнитьЦеныВыделенныхСтрокПоРозничнымЦенам.
//
// Возвращаемое значение
//  Структура - структуры параметров заполнения по розничным ценам.
//
Функция СтруктураПараметровЗаполненияПоРозничнымЦенам() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Объект");
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти");
	СтруктураПараметров.Вставить("Магазин");
	СтруктураПараметров.Вставить("ВыделенныеСтроки");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("ЕстьНДС", Истина);
	СтруктураПараметров.Вставить("ЕстьСуммаСНДС", Ложь);
	СтруктураПараметров.Вставить("ПриводитьКМинимальнойЦене", Ложь);
	СтруктураПараметров.Вставить("НеобходимостьПересчетаСуммыСУчетомСкидок", Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦенуСУчетомАгентскогоВознаграждения", Ложь);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Процедура записи движений в регистр РасхожденияПриПриемке.
//
// Параметры:
//  ДополнительныеСвойства - Структура - структура дополнительных свойств для формирования движений.
//  Движения - Движения - движения документа для отражения в регистре "Расхождения при приемке".
//  Отказ - Булево - признак отказа от выполнения операции.
//
Процедура ОтразитьРасхожденияПриПриемке(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасхожденияПриПриемке;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.РасхожденияПриПриемке.Записывать = Истина;
	Движения.РасхожденияПриПриемке.Загрузить(Таблица);
	
КонецПроцедуры

// Возвращает текст запроса пересчета цен.
//
// Параметры:
//  Режим - Строка - режим пересчета цен строкой.
//  ПриводитьКМинимальнойЦене - Булево - признак приведения к минимальной цене.
//
// Возвращаемое значение:
// Строка - текст запроса для пересчета цен.
//
Функция ТекстЗапросаПересчетаЦен(Режим, ПриводитьКМинимальнойЦене) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	ВЫРАЗИТЬ(Товары.Упаковка КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|";
	
	Если Режим = "ПоВидуЦен" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.НомерСтроки,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Упаковка,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) = ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0)
		|				ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
		|			КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0) = 0
		|				ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0)
		|			ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) / ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0)
		|		КОНЕЦ КАК ЧИСЛО(17, 2)) КАК Цена
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО (ЦеныНоменклатуры.ВидЦены = &ВидЦены)
		|			И (ЦеныНоменклатуры.Номенклатура = Товары.Номенклатура)
		|			И (ЦеныНоменклатуры.Характеристика = Товары.Характеристика)
		|			И (ЦеныНоменклатуры.Период В
		|				(ВЫБРАТЬ МАКСИМУМ(Цены.Период)
		|				ИЗ
		|					РегистрСведений.ЦеныНоменклатуры КАК Цены
		|				ГДЕ
		|					Цены.ВидЦены = &ВидЦены
		|					И Цены.Номенклатура = Товары.Номенклатура
		|					И Цены.Характеристика = Товары.Характеристика
		|					И Цены.Период <= &Период))
		|";
		
	ИначеЕсли Режим = "Действующие" Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.НомерСтроки,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Упаковка,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) = ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0)
		|				ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
		|			КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0) = 0
		|				ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0)
		|			ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) / ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0)
		|		КОНЕЦ КАК ЧИСЛО(17, 2)) КАК Цена
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействующиеЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО (ЦеныНоменклатуры.ОбъектЦенообразования = &Магазин)
		|			И (ЦеныНоменклатуры.Номенклатура = Товары.Номенклатура)
		|			И (ЦеныНоменклатуры.Характеристика = Товары.Характеристика)
		|			И (ЦеныНоменклатуры.Период В
		|				(ВЫБРАТЬ МАКСИМУМ(Цены.Период)
		|				ИЗ
		|					РегистрСведений.ДействующиеЦеныНоменклатуры КАК Цены
		|				ГДЕ
		|					Цены.ОбъектЦенообразования = &Магазин
		|					И Цены.Номенклатура = Товары.Номенклатура
		|					И Цены.Характеристика = Товары.Характеристика
		|					И Цены.Период <= &Период))
		|";
			
	Иначе
		Если Режим = "ВАссортименте" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Ассортимент.Номенклатура КАК Номенклатура,
			|	Ассортимент.ВидЦен КАК ВидЦен
			|ПОМЕСТИТЬ втАссортимент
			|ИЗ
			|	РегистрСведений.Ассортимент.СрезПоследних(
			|			КОНЕЦПЕРИОДА(&Период, ДЕНЬ),
			|			ОбъектПланирования = &ФорматМагазина
			|				И Номенклатура В
			|					(ВЫБРАТЬ
			|						Т.Номенклатура
			|					ИЗ
			|						Товары КАК Т)) КАК Ассортимент
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Товары.НомерСтроки КАК НомерСтроки,
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика,
			|	Товары.Упаковка КАК Упаковка,
			|	Ассортимент.ВидЦен КАК ВидЦен
			|ПОМЕСТИТЬ ТоварыСВидамиЦен
			|ИЗ
			|	Товары КАК Товары
			|		ЛЕВОЕ СОЕДИНЕНИЕ втАссортимент КАК Ассортимент
			|		ПО Товары.Номенклатура = Ассортимент.Номенклатура
			|;
			|";
			
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЦеновыеГруппы.ЦеноваяГруппа КАК ЦеноваяГруппа,
			|	ЦеновыеГруппы.ВидЦен КАК ВидЦен
			|ПОМЕСТИТЬ ЦеновыеГруппыПравила
			|ИЗ
			|	Справочник.ПравилаЦенообразования.ЦеновыеГруппы КАК ЦеновыеГруппы
			|ГДЕ
			|	ЦеновыеГруппы.Ссылка = &ПравилоЦенообразования
			|
			|СГРУППИРОВАТЬ ПО
			|	ЦеноваяГруппа,
			|	ВидЦен
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ЦеноваяГруппа
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Товары.НомерСтроки КАК НомерСтроки,
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика,
			|	Товары.Упаковка КАК Упаковка,
			|	ЕСТЬNULL(Правила.ВидЦен, &ВидЦенМагазина) КАК ВидЦен
			|ПОМЕСТИТЬ ТоварыСВидамиЦен
			|ИЗ
			|	Товары КАК Товары
			|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеновыеГруппыПравила КАК Правила
			|		ПО Товары.Номенклатура.ЦеноваяГруппа = Правила.ЦеноваяГруппа
			|;
			|";
		КонецЕсли;
		
		Если ПриводитьКМинимальнойЦене Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Товары.НомерСтроки КАК НомерСтроки,
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика,
			|	Товары.Упаковка КАК Упаковка,
			|	ВЫБОР
			|		КОГДА (ВЫРАЗИТЬ(ВЫБОР
			|					КОГДА ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) = ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0)
			|						ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
			|					КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0) = 0
			|						ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0)
			|					ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) / ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0)
			|				КОНЕЦ КАК ЧИСЛО(17, 2))) > (ВЫРАЗИТЬ(ВЫБОР
			|					КОГДА ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) = ЕСТЬNULL(МинимальныеЦены.Упаковка.Коэффициент, 0)
			|						ТОГДА ЕСТЬNULL(МинимальныеЦены.Цена, 0)
			|					КОГДА ЕСТЬNULL(МинимальныеЦены.Упаковка.Коэффициент, 0) = 0
			|						ТОГДА ЕСТЬNULL(МинимальныеЦены.Цена, 0) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0)
			|					ИНАЧЕ ЕСТЬNULL(МинимальныеЦены.Цена, 0) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) / ЕСТЬNULL(МинимальныеЦены.Упаковка.Коэффициент, 0)
			|				КОНЕЦ КАК ЧИСЛО(17, 2)))
			|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
			|						КОГДА ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) = ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0)
			|							ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
			|						КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0) = 0
			|							ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0)
			|						ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) / ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0)
			|					КОНЕЦ КАК ЧИСЛО(17, 2))
			|		ИНАЧЕ ВЫРАЗИТЬ(ВЫБОР
			|					КОГДА ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) = ЕСТЬNULL(МинимальныеЦены.Упаковка.Коэффициент, 0)
			|						ТОГДА ЕСТЬNULL(МинимальныеЦены.Цена, 0)
			|					КОГДА ЕСТЬNULL(МинимальныеЦены.Упаковка.Коэффициент, 0) = 0
			|						ТОГДА ЕСТЬNULL(МинимальныеЦены.Цена, 0) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0)
			|					ИНАЧЕ ЕСТЬNULL(МинимальныеЦены.Цена, 0) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) / ЕСТЬNULL(МинимальныеЦены.Упаковка.Коэффициент, 0)
			|				КОНЕЦ КАК ЧИСЛО(17, 2))
			|	КОНЕЦ КАК Цена
			|ИЗ
			|	ТоварыСВидамиЦен КАК Товары
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
			|		ПО (ЦеныНоменклатуры.ВидЦены = Товары.ВидЦен)
			|			И (ЦеныНоменклатуры.Номенклатура = Товары.Номенклатура)
			|			И (ЦеныНоменклатуры.Характеристика = Товары.Характеристика)
			|			И (ЦеныНоменклатуры.Период В
			|				(ВЫБРАТЬ МАКСИМУМ(Цены.Период)
			|				ИЗ
			|					РегистрСведений.ЦеныНоменклатуры КАК Цены
			|				ГДЕ
			|					Цены.ВидЦены = Товары.ВидЦен
			|					И Цены.Номенклатура = Товары.Номенклатура
			|					И Цены.Характеристика = Товары.Характеристика
			|					И Цены.Период <= &Период))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК МинимальныеЦены
			|		ПО (МинимальныеЦены.ВидЦены = &ВидМинимальныхЦенПродажи)
			|			И (МинимальныеЦены.Номенклатура = Товары.Номенклатура)
			|			И (МинимальныеЦены.Характеристика = Товары.Характеристика)
			|			И (МинимальныеЦены.Период В
			|				(ВЫБРАТЬ МАКСИМУМ(Цены.Период)
			|				ИЗ
			|					РегистрСведений.ЦеныНоменклатуры КАК Цены
			|				ГДЕ
			|					Цены.ВидЦены = &ВидМинимальныхЦенПродажи
			|					И Цены.Номенклатура = Товары.Номенклатура
			|					И Цены.Характеристика = Товары.Характеристика
			|					И Цены.Период <= &Период))
			|";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Товары.НомерСтроки КАК НомерСтроки,
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика,
			|	Товары.Упаковка КАК Упаковка,
			|	ВЫРАЗИТЬ(ВЫБОР
			|				КОГДА ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) = ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0)
			|					ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
			|				КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0) = 0
			|					ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0)
			|				ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) / ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0)
			|			КОНЕЦ КАК ЧИСЛО(17, 2)) КАК Цена
			|ИЗ
			|	ТоварыСВидамиЦен КАК Товары
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
			|		ПО (ЦеныНоменклатуры.ВидЦены = Товары.ВидЦен)
			|			И (ЦеныНоменклатуры.Номенклатура = Товары.Номенклатура)
			|			И (ЦеныНоменклатуры.Характеристика = Товары.Характеристика)
			|			И (ЦеныНоменклатуры.Период В
			|				(ВЫБРАТЬ МАКСИМУМ(Цены.Период)
			|				ИЗ
			|					РегистрСведений.ЦеныНоменклатуры КАК Цены
			|				ГДЕ
			|					Цены.ВидЦены = Товары.ВидЦен
			|					И Цены.Номенклатура = Товары.Номенклатура
			|					И Цены.Характеристика = Товары.Характеристика
			|					И Цены.Период <= &Период))
			|";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Проверяет указан ли ГТД для КиЗ.
//
// Параметры:
//  Объект - ДокументОбъект, ОбработкаОбъект - объект документа или обработки в котормо проверяется указание ГТД для КиЗ.
//  Отказ - Булево - признак отказа от выполнения операции.
//
Процедура ПроверитьУказаниеГТДДляКиЗ(ДокументОбъект, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТаблицаТовары.НомерГТД КАК НомерГТД
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.КиЗГИСМ, ЛОЖЬ) КАК КиЗГИСМ,
	|	ТаблицаТовары.НомерГТД КАК НомерГТД
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ЕСТЬNULL(ТаблицаТовары.Номенклатура.КиЗГИСМ, ЛОЖЬ)
	|	И ТаблицаТовары.НомерГТД <> &ПустойНомерГТД
	|";
	Запрос.УстановитьПараметр("ТаблицаТовары", ДокументОбъект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ПустойНомерГТД", Справочники.НомераГТД.ПустаяСсылка());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = НСтр("ru = 'В строке %1 содержится КиЗ. Указание номеров ГТД для КиЗ не поддерживается.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.НомерСтроки);
		ОбщегоНазначения.СообщитьПользователю(
			ТекстСообщения,
			ДокументОбъект,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "НомерГТД"),
			"Объект",
			Отказ);
	КонецЦикла;
	
КонецПроцедуры

// Процедура проверяет указание номеров ГТД в табличной части "Товары".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Товары - ДанныеФормыКоллекция - Табличная часть товаров
//	Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ПроверитьЗаполнениеНомеровГТД(ДокументОбъект, Отказ, ИмяТЧ = "Товары") Экспорт
	
	//++ Локализация
	ПараметрыДокумента = Новый Структура("Дата");
	ЗаполнитьЗначенияСвойств(ПараметрыДокумента, ДокументОбъект);
	ПараметрыДокумента.Дата = ?(ЗначениеЗаполнено(ПараметрыДокумента.Дата),
		ПараметрыДокумента.Дата,
		ТекущаяДатаСеанса());
	ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров = УчетПрослеживаемыхТоваровРТ.ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров();
	//-- Локализация
	
	МетаданныеОбъекта = ДокументОбъект.Метаданные();
	ПредставлениеТЧ = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ИсходнаяТаблица.НомерСтроки КАК НомерСтроки,
	|	ИсходнаяТаблица.Номенклатура КАК Номенклатура,
	|	ИсходнаяТаблица.НомерГТД КАК НомерГТД
	|
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ИсходнаяТаблица
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	И ЕСТЬNULL(ТаблицаТовары.Номенклатура.КодТНВЭД.ПрослеживаемыйТовар, ЛОЖЬ)
	|	И НЕ &ДокументРаньшеДатыНачалаПрослеживаемости
	|");
	ТаблицаТовары = ДокументОбъект[ИмяТЧ].Выгрузить(, "НомерСтроки, Номенклатура, НомерГТД");
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
	Запрос.УстановитьПараметр("ДокументРаньшеДатыНачалаПрослеживаемости", ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров > ПараметрыДокумента.Дата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не заполнена колонка ""Номер ГТД"" в строке %1 списка ""%2""'"),
			Выборка.НомерСтроки,
			ПредставлениеТЧ);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			ИмяТЧ + "[" + (Выборка.НомерСтроки - 1) + "].НомерГТД",
			,
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыРаботыССебестоимостьюСлужебные

Функция СформироватьУзлыКорректировкиСписанияСтоимости(СтруктураПериод, НастройкаСпособаУчета, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыКОтгрузкеОстатки.Склад КАК Склад,
	|	ТоварыКОтгрузкеОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузкеОстатки.Характеристика КАК Характеристика,
	|	СУММА(ТоварыКОтгрузкеОстатки.КоличествоОстаток) КАК Остаток
	|ПОМЕСТИТЬ ТоварыКОтгрузкеОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Остатки(&КонецПериодаВключая, ) КАК ТоварыКОтгрузкеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтгрузкеОстатки.Склад,
	|	ТоварыКОтгрузкеОстатки.Номенклатура,
	|	ТоварыКОтгрузкеОстатки.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОстаткиИОбороты.Склад.Магазин КАК Магазин,
	|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладахОстаткиИОбороты.Характеристика КАК Характеристика,
	|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоНачальныйОстаток) КАК Остаток
	|ПОМЕСТИТЬ ОстаткиОбщие
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&НачалоПериодаВключая, &КонецПериодаВключая, , , ) КАК ТоварыНаСкладахОстаткиИОбороты
	|ГДЕ
	|	(ТоварыНаСкладахОстаткиИОбороты.КоличествоОборот <> 0
	|			ИЛИ ТоварыНаСкладахОстаткиИОбороты.КоличествоПриход = ТоварыНаСкладахОстаткиИОбороты.КоличествоРасход
	|				И ТоварыНаСкладахОстаткиИОбороты.КоличествоПриход > 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОстаткиИОбороты.Склад.Магазин,
	|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
	|	ТоварыНаСкладахОстаткиИОбороты.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОстаткиИОбороты.Склад.Магазин,
	|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
	|	ТоварыНаСкладахОстаткиИОбороты.Характеристика,
	|	СУММА(ТоварыНаСкладахОстаткиИОбороты.КоличествоНачальныйОстаток)
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(
	|			&НачалоПериодаВключая,
	|			&КонецПериодаВключая,
	|			,
	|			,
	|			(Склад, Номенклатура, Характеристика) В
	|				(ВЫБРАТЬ
	|					ТоварыКОтгрузкеОстатки.Склад,
	|					ТоварыКОтгрузкеОстатки.Номенклатура,
	|					ТоварыКОтгрузкеОстатки.Характеристика
	|				ИЗ
	|					ТоварыКОтгрузкеОстатки)) КАК ТоварыНаСкладахОстаткиИОбороты
	|ГДЕ
	|	ТоварыНаСкладахОстаткиИОбороты.КоличествоОборот = 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОстаткиИОбороты.Склад.Магазин,
	|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
	|	ТоварыНаСкладахОстаткиИОбороты.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыКПоступлениюОстатки.Склад.Магазин,
	|	ТоварыКПоступлениюОстатки.Номенклатура,
	|	ТоварыКПоступлениюОстатки.Характеристика,
	|	СУММА(ТоварыКПоступлениюОстатки.КоличествоОстаток)
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Остатки(&НачалоПериодаИсключая, ) КАК ТоварыКПоступлениюОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКПоступлениюОстатки.Склад.Магазин,
	|	ТоварыКПоступлениюОстатки.Номенклатура,
	|	ТоварыКПоступлениюОстатки.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиОбщие.Магазин КАК Магазин,
	|	ОстаткиОбщие.Номенклатура КАК Номенклатура,
	|	ОстаткиОбщие.Характеристика КАК Характеристика,
	|	СУММА(ОстаткиОбщие.Остаток) КАК Остаток
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	ОстаткиОбщие КАК ОстаткиОбщие
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиОбщие.Магазин,
	|	ОстаткиОбщие.Номенклатура,
	|	ОстаткиОбщие.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СебестоимостьПоставки.Магазин, СебестоимостьПеремещения.Магазин) КАК Магазин,
	|	ЕСТЬNULL(СебестоимостьПоставки.Номенклатура, СебестоимостьПеремещения.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(СебестоимостьПоставки.Характеристика, СебестоимостьПеремещения.Характеристика) КАК Характеристика,
	|	ЕСТЬNULL(СебестоимостьПеремещения.КоличествоОборот, 0) КАК КоличествоПеремещение,
	|	ЕСТЬNULL(СебестоимостьПоставки.КоличествоОборот, 0) + ЕСТЬNULL(СебестоимостьПеремещения.КоличествоОборот, 0) КАК Количество,
	|	ЕСТЬNULL(СебестоимостьПоставки.СуммаОборот, 0) + ЕСТЬNULL(СебестоимостьПеремещения.СуммаОборот, 0) КАК СуммаОборот,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЕСТЬNULL(СебестоимостьПоставки.КоличествоОборот, 0) + ЕСТЬNULL(СебестоимостьПеремещения.КоличествоОборот, 0) = 0
	|				ТОГДА 0
	|			ИНАЧЕ (ЕСТЬNULL(СебестоимостьПоставки.СуммаОборот, 0) + ЕСТЬNULL(СебестоимостьПеремещения.СуммаОборот, 0)) / (ЕСТЬNULL(СебестоимостьПоставки.КоличествоОборот, 0) + ЕСТЬNULL(СебестоимостьПеремещения.КоличествоОборот, 0))
	|		КОНЕЦ, 0) КАК Стоимость,
	|	ЕСТЬNULL(СебестоимостьПеремещения.МагазинОтправитель, ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК МагазинОтправитель
	|ПОМЕСТИТЬ СебестоимостьПоПоступлениям
	|ИЗ
	|	(ВЫБРАТЬ
	|		СебестоимостьПоставкиПромежуточная.Магазин КАК Магазин,
	|		СебестоимостьПоставкиПромежуточная.Номенклатура КАК Номенклатура,
	|		СебестоимостьПоставкиПромежуточная.Характеристика КАК Характеристика,
	|		СУММА(СебестоимостьПоставкиПромежуточная.КоличествоОборот) КАК КоличествоОборот,
	|		СУММА(СебестоимостьПоставкиПромежуточная.СуммаОборот) КАК СуммаОборот
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Поставки.Магазин КАК Магазин,
	|			Поставки.Номенклатура КАК Номенклатура,
	|			Поставки.Характеристика КАК Характеристика,
	|			Поставки.КоличествоОборот КАК КоличествоОборот,
	|			Поставки.СуммаОборот КАК СуммаОборот
	|		ИЗ
	|			РегистрНакопления.СебестоимостьПоставкиТоваров.Обороты(&НачалоПериодаВключая, &КонецПериодаВключая, , МагазинОтправитель = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК Поставки
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			Остатки.Магазин,
	|			Остатки.Номенклатура,
	|			Остатки.Характеристика,
	|			Остатки.Остаток,
	|			ЕСТЬNULL(ВЫБОР
	|					КОГДА Себестоимость.Период ЕСТЬ НЕ NULL 
	|							И СебестоимостьПустойМагазин.Период ЕСТЬ НЕ NULL 
	|						ТОГДА ВЫБОР
	|								КОГДА Себестоимость.Период >= СебестоимостьПустойМагазин.Период
	|									ТОГДА Себестоимость.Цена
	|								ИНАЧЕ СебестоимостьПустойМагазин.Цена
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА Себестоимость.Период ЕСТЬ НЕ NULL 
	|								ТОГДА Себестоимость.Цена
	|							ИНАЧЕ СебестоимостьПустойМагазин.Цена
	|						КОНЕЦ
	|				КОНЕЦ, 0) * Остатки.Остаток
	|		ИЗ
	|			Остатки КАК Остатки
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СебестоимостьНоменклатуры.СрезПоследних(&НачалоПериодаИсключая, Магазин <> ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК Себестоимость
	|				ПО Остатки.Магазин = Себестоимость.Магазин
	|					И Остатки.Номенклатура = Себестоимость.Номенклатура
	|					И Остатки.Характеристика = Себестоимость.Характеристика
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СебестоимостьНоменклатуры.СрезПоследних(&НачалоПериодаИсключая, Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК СебестоимостьПустойМагазин
	|				ПО Остатки.Номенклатура = СебестоимостьПустойМагазин.Номенклатура
	|					И Остатки.Характеристика = СебестоимостьПустойМагазин.Характеристика) КАК СебестоимостьПоставкиПромежуточная
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СебестоимостьПоставкиПромежуточная.Магазин,
	|		СебестоимостьПоставкиПромежуточная.Номенклатура,
	|		СебестоимостьПоставкиПромежуточная.Характеристика) КАК СебестоимостьПоставки
	|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СебестоимостьПоставкиТоваровОбороты.Магазин КАК Магазин,
	|			СебестоимостьПоставкиТоваровОбороты.МагазинОтправитель КАК МагазинОтправитель,
	|			СебестоимостьПоставкиТоваровОбороты.Номенклатура КАК Номенклатура,
	|			СебестоимостьПоставкиТоваровОбороты.Характеристика КАК Характеристика,
	|			СебестоимостьПоставкиТоваровОбороты.КоличествоОборот КАК КоличествоОборот,
	|			СебестоимостьПоставкиТоваровОбороты.СуммаОборот КАК СуммаОборот
	|		ИЗ
	|			РегистрНакопления.СебестоимостьПоставкиТоваров.Обороты(&НачалоПериодаВключая, &КонецПериодаВключая, , НЕ МагазинОтправитель = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК СебестоимостьПоставкиТоваровОбороты) КАК СебестоимостьПеремещения
	|		ПО СебестоимостьПоставки.Номенклатура = СебестоимостьПеремещения.Номенклатура
	|			И СебестоимостьПоставки.Характеристика = СебестоимостьПеремещения.Характеристика
	|			И СебестоимостьПоставки.Магазин = СебестоимостьПеремещения.Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапросСумма.Магазин КАК Магазин,
	|	ВложенныйЗапросСумма.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапросСумма.Характеристика КАК Характеристика,
	|	ВложенныйЗапросСумма.КоличествоПеремещение КАК КоличествоПеремещение,
	|	ВложенныйЗапросСумма.Количество КАК Количество,
	|	ВложенныйЗапросСумма.СуммаОборот КАК СуммаОборот,
	|	ВложенныйЗапросСумма.СуммаОборот / ВЫБОР
	|		КОГДА ВложенныйЗапросСумма.Количество <> 0
	|				И ВложенныйЗапросСумма.КоличествоПеремещение <> 0
	|				И ВложенныйЗапросСумма.Количество > ВложенныйЗапросСумма.КоличествоПеремещение
	|			ТОГДА ВложенныйЗапросСумма.Количество - ВложенныйЗапросСумма.КоличествоПеремещение
	|		КОГДА ВложенныйЗапросСумма.Количество <> 0
	|			ТОГДА ВложенныйЗапросСумма.Количество
	|		КОГДА ВложенныйЗапросСумма.КоличествоПеремещение <> 0
	|			ТОГДА ВложенныйЗапросСумма.КоличествоПеремещение
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Стоимость,
	|	ВложенныйЗапросСумма.МагазинОтправитель КАК МагазинОтправитель
	|ПОМЕСТИТЬ СебестоимостьПоПоступлениямСвернуто
	|ИЗ
	|	(ВЫБРАТЬ
	|		СебестоимостьПоПоступлениям.Магазин КАК Магазин,
	|		СебестоимостьПоПоступлениям.Номенклатура КАК Номенклатура,
	|		СебестоимостьПоПоступлениям.Характеристика КАК Характеристика,
	|		СУММА(СебестоимостьПоПоступлениям.КоличествоПеремещение) КАК КоличествоПеремещение,
	|		СУММА(СебестоимостьПоПоступлениям.Количество) КАК Количество,
	|		СУММА(СебестоимостьПоПоступлениям.СуммаОборот) КАК СуммаОборот,
	|		СебестоимостьПоПоступлениям.МагазинОтправитель КАК МагазинОтправитель
	|	ИЗ
	|		СебестоимостьПоПоступлениям КАК СебестоимостьПоПоступлениям
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СебестоимостьПоПоступлениям.Магазин,
	|		СебестоимостьПоПоступлениям.Номенклатура,
	|		СебестоимостьПоПоступлениям.Характеристика,
	|		СебестоимостьПоПоступлениям.МагазинОтправитель) КАК ВложенныйЗапросСумма
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СебестоимостьПоПоступлениям.Магазин КАК Магазин,
	|	СебестоимостьПоПоступлениям.Номенклатура КАК Номенклатура,
	|	СебестоимостьПоПоступлениям.Характеристика КАК Характеристика,
	|	СебестоимостьПоПоступлениям.КоличествоПеремещение КАК КоличествоПеремещение,
	|	СебестоимостьПоПоступлениям.Количество КАК Количество,
	|	СебестоимостьПоПоступлениям.СуммаОборот КАК СуммаОборот,
	|	СебестоимостьПоПоступлениям.Стоимость КАК Стоимость,
	|	ВЫБОР
	|		КОГДА Себестоимость.Период ЕСТЬ НЕ NULL 
	|				И СебестоимостьПустойМагазин.Период ЕСТЬ НЕ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА Себестоимость.Период >= СебестоимостьПустойМагазин.Период
	|						ТОГДА Себестоимость.Цена
	|					ИНАЧЕ СебестоимостьПустойМагазин.Цена
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Себестоимость.Период ЕСТЬ НЕ NULL 
	|					ТОГДА Себестоимость.Цена
	|				ИНАЧЕ СебестоимостьПустойМагазин.Цена
	|			КОНЕЦ
	|	КОНЕЦ КАК СебестоимостьИзРегистра,
	|	ЕСТЬNULL(Остатки.Остаток, 0) КАК Остаток
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	СебестоимостьПоПоступлениямСвернуто КАК СебестоимостьПоПоступлениям
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СебестоимостьНоменклатуры.СрезПоследних(&НачалоПериодаИсключая, Магазин <> ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК Себестоимость
	|		ПО СебестоимостьПоПоступлениям.Магазин = Себестоимость.Магазин
	|			И СебестоимостьПоПоступлениям.Номенклатура = Себестоимость.Номенклатура
	|			И СебестоимостьПоПоступлениям.Характеристика = Себестоимость.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СебестоимостьНоменклатуры.СрезПоследних(&НачалоПериодаИсключая, Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК СебестоимостьПустойМагазин
	|		ПО (Себестоимость.Номенклатура = СебестоимостьПустойМагазин.Номенклатура)
	|			И (Себестоимость.Характеристика = СебестоимостьПустойМагазин.Характеристика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО СебестоимостьПоПоступлениям.Магазин = Остатки.Магазин
	|			И СебестоимостьПоПоступлениям.Номенклатура = Остатки.Номенклатура
	|			И СебестоимостьПоПоступлениям.Характеристика = Остатки.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Магазин КАК Магазин,
	|	ВТ.Номенклатура КАК Номенклатура,
	|	ВТ.Характеристика КАК Характеристика,
	|	ВТ.КоличествоПеремещение КАК КоличествоПеремещение,
	|	ВТ.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ.Стоимость, 0) = 0
	|				И НЕ ВТ.Остаток = 0
	|			ТОГДА ЕСТЬNULL(ВТ.СебестоимостьИзРегистра, 0)
	|		ИНАЧЕ ЕСТЬNULL(ВТ.Стоимость, 0)
	|	КОНЕЦ КАК Стоимость,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ.СуммаОборот, 0) = 0
	|				И НЕ ВТ.Остаток = 0
	|			ТОГДА ЕСТЬNULL(ВТ.СебестоимостьИзРегистра * ВТ.Количество, 0)
	|		ИНАЧЕ ЕСТЬNULL(ВТ.СуммаОборот, 0)
	|	КОНЕЦ КАК СуммаОборот
	|ПОМЕСТИТЬ СебестоимостьПоступлений
	|ИЗ
	|	ВТ КАК ВТ";
	
	
	Запрос.УстановитьПараметр("НачалоПериодаИсключая", Новый Граница(НачалоДня(СтруктураПериод.НачалоПериода), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("НачалоПериодаВключая", Новый Граница(НачалоДня(СтруктураПериод.НачалоПериода), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонецПериодаВключая", Новый Граница(КонецДня(СтруктураПериод.КонецПериода), ВидГраницы.Включая));
	Результат = Запрос.Выполнить();
	
	ОбщегоНазначенияРТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,
		"Остатки, СебестоимостьПоПоступлениям, СебестоимостьПоПоступлениямСвернуто, ВТ");
	
	ТаблицаУзлов = ПоправкаПоСборкамТоваров(СтруктураПериод, МенеджерВременныхТаблиц, НастройкаСпособаУчета);
	
	МассивУзлов = Новый Массив;
	Для СчетчикУзлов = 1 По ТаблицаУзлов.Количество() Цикл
		МассивУзлов.Добавить(СчетчикУзлов);
	КонецЦикла;

	ТаблицаУзлов.Колонки.Добавить("НомерУзла", ОбщегоНазначенияРТКлиентСервер.ОписаниеТиповЧисла(25, 0));
	ТаблицаУзлов.ЗагрузитьКолонку(МассивУзлов, "НомерУзла");

	Запрос.Текст =
	"
	|ВЫБРАТЬ *
	|
	|ПОМЕСТИТЬ ВтУзлыКорректировки
	|
	|ИЗ
	|	&ТаблицаУзлов КАК ТаблицаУзлов
	|
	|ИНДЕКСИРОВАТЬ ПО НомерУзла;
	|
	|";
	Запрос.УстановитьПараметр("ТаблицаУзлов", ТаблицаУзлов);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Количество;
	
КонецФункции

Процедура РассчитатьСтоимость(СтруктураПериод, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецПериода",      СтруктураПериод.КонецПериода);
	Запрос.УстановитьПараметр("НачалоПериода",     СтруктураПериод.НачалоПериода);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаДвиженияСтоимости();
	Запрос.Выполнить();
	
	РешитьСЛУ(МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура РешитьСЛУ(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТребуемаяТочность      = 0.000001;
	МаксКоличествоИтераций = 200;
	
	СчетчикИтераций        = 1;
	ТекущееОтклонение      = 1;
	
	Пока ТекущееОтклонение > ТребуемаяТочность И СчетчикИтераций <= МаксКоличествоИтераций Цикл
		
		Запрос.Текст = 
		"
		// 0 Расчет коэффициентов (количество перехода из состояния в состояние) уравнения.
		|ВЫБРАТЬ
		|	УзлыКорректировки.НомерУзла                                     КАК НомерУзла,
		|	ВЫРАЗИТЬ(МАКСИМУМ(УзлыКорректировки.Стоимость)                  КАК ЧИСЛО(23,10)) КАК СвободныйКоэффициент,
		|	СУММА(ВЫРАЗИТЬ(
		|			ВЫБОР
		|				КОГДА УзлыКорректировки.Количество = 0
		|					ИЛИ ПеремещенияСписания.НомерУзлаПриемник ЕСТЬ NULL
		|					ИЛИ ПеремещенияСписания.НомерУзлаИсточник ЕСТЬ NULL ТОГДА
		|					0
		|				ИНАЧЕ
		|					ВтТаблицаРешений.Стоимость * ПеремещенияСписания.Количество / УзлыКорректировки.Количество
		|			КОНЕЦ КАК ЧИСЛО(23,10))) КАК Стоимость
		|
		|ПОМЕСТИТЬ ВременнаяТаблицаРешений
		|ИЗ
		|	ВтУзлыКорректировки КАК УзлыКорректировки
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПеремещенияСписания КАК ПеремещенияСписания
		|		ПО УзлыКорректировки.НомерУзла = ПеремещенияСписания.НомерУзлаПриемник
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаРешений КАК ВтТаблицаРешений
		|		ПО ПеремещенияСписания.НомерУзлаИсточник = ВтТаблицаРешений.НомерУзла
		|
		|СГРУППИРОВАТЬ ПО
		|	УзлыКорректировки.НомерУзла
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерУзла
		|;
		|/////////////////////////////////////////////////////////////////////////////
		// 1 Расчет ошибки расчета.
		|ВЫБРАТЬ
		|	ЕСТЬNULL(
		|		МАКСИМУМ(
		|			ВЫБОР КОГДА (ЕСТЬNULL(ТаблицаРешений.Стоимость,0) - (ВременнаяТаблицаРешений.СвободныйКоэффициент
		|			 + ЕСТЬNULL(ВременнаяТаблицаРешений.Стоимость,0))) > 0 ТОГДА
		|
		|					ЕСТЬNULL(ТаблицаРешений.Стоимость,0) - (ВременнаяТаблицаРешений.СвободныйКоэффициент
		|				 	+ ЕСТЬNULL(ВременнаяТаблицаРешений.Стоимость,0))
		|			ИНАЧЕ
		|				-(
		|					ЕСТЬNULL(ТаблицаРешений.Стоимость,0) - (ВременнаяТаблицаРешений.СвободныйКоэффициент
		|					 + ЕСТЬNULL(ВременнаяТаблицаРешений.Стоимость,0))
		|					)
		|			КОНЕЦ
		|			)
		|		,0) КАК Отклонение
		|ИЗ
		|	ВременнаяТаблицаРешений КАК ВременнаяТаблицаРешений
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаРешений КАК ТаблицаРешений
		|		ПО ВременнаяТаблицаРешений.НомерУзла = ТаблицаРешений.НомерУзла
		|;
		|//////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВтТаблицаРешений
		|;
		// 3 Суммирование коэффициентов.
		|//////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаРешений.НомерУзла  КАК НомерУзла,
		|	ВЫРАЗИТЬ(
		|		ВременнаяТаблицаРешений.СвободныйКоэффициент
		|			+ ВременнаяТаблицаРешений.Стоимость
		|		КАК ЧИСЛО(23,10))              КАК Стоимость
		|
		|ПОМЕСТИТЬ ВтТаблицаРешений
		|
		|ИЗ
		|	ВременнаяТаблицаРешений КАК ВременнаяТаблицаРешений
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерУзла
		|
		|";
		
		Выборка = Запрос.ВыполнитьПакет()[1].Выбрать();
		
		ОбщегоНазначенияРТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц, "ВременнаяТаблицаРешений");
		
		Если Выборка.Следующий() Тогда
			
			ТекущееОтклонение = Выборка.Отклонение;
			
		Иначе
			
			ТекущееОтклонение = 0;
			
		КонецЕсли;
		
		СчетчикИтераций = СчетчикИтераций + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаДвиженияСтоимости()
	
	ТекстЗапросаТаблицаРешений =
	"ВЫБРАТЬ
	|	УзлыКорректировки.НомерУзла КАК НомерУзла,
	|	ВЫРАЗИТЬ(УзлыКорректировки.Стоимость КАК ЧИСЛО(23, 10)) КАК Стоимость
	|ПОМЕСТИТЬ ВтТаблицаРешений
	|ИЗ
	|	ВтУзлыКорректировки КАК УзлыКорректировки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерУзла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетСебестоимости.НомерУзлаИсточник КАК НомерУзлаИсточник,
	|	УчетСебестоимости.НомерУзлаПриемник КАК НомерУзлаПриемник,
	|	СУММА(УчетСебестоимости.Количество) КАК Количество
	|ПОМЕСТИТЬ ВтПеремещенияСписания
	|ИЗ
	|	(ВЫБРАТЬ
	|		УзлыКорректировкиИсточник.НомерУзла КАК НомерУзлаИсточник,
	|		УзлыКорректировкиПриемник.НомерУзла КАК НомерУзлаПриемник,
	|		УчетСебестоимости.КоличествоОборот КАК Количество
	|	ИЗ
	|		РегистрНакопления.СебестоимостьПоставкиТоваров.Обороты(&НачалоПериода, &КонецПериода, , НЕ МагазинОтправитель = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК УчетСебестоимости
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтУзлыКорректировки КАК УзлыКорректировкиИсточник
	|			ПО УчетСебестоимости.МагазинОтправитель = УзлыКорректировкиИсточник.Магазин
	|				И УчетСебестоимости.Номенклатура = УзлыКорректировкиИсточник.Номенклатура
	|				И УчетСебестоимости.Характеристика = УзлыКорректировкиИсточник.Характеристика
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтУзлыКорректировки КАК УзлыКорректировкиПриемник
	|			ПО УчетСебестоимости.Магазин = УзлыКорректировкиПриемник.Магазин
	|				И УчетСебестоимости.Номенклатура = УзлыКорректировкиПриемник.Номенклатура
	|				И УчетСебестоимости.Характеристика = УзлыКорректировкиПриемник.Характеристика) КАК УчетСебестоимости
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетСебестоимости.НомерУзлаИсточник,
	|	УчетСебестоимости.НомерУзлаПриемник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерУзлаПриемник
	|";
	
	Возврат ТекстЗапросаТаблицаРешений;
	
КонецФункции

Процедура ЗарегистрироватьСтоимость(СтруктураПериод, МенеджерВременныхТаблиц, Объект)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("КонецПериода", СтруктураПериод.КонецПериода);
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПериод.НачалоПериода);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УзлыКорректировки.Магазин КАК Магазин,
	|	УзлыКорректировки.Номенклатура КАК Номенклатура,
	|	УзлыКорректировки.Характеристика КАК Характеристика,
	|	0 КАК Стоимость,
	|	СУММА(ТаблицаРешений.Стоимость) КАК Цена,
	|	СУММА(УзлыКорректировки.КоличествоПеремещение) КАК Количество
	|ПОМЕСТИТЬ СебестоимостьПеремещений
	|ИЗ
	|	ВтТаблицаРешений КАК ТаблицаРешений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтУзлыКорректировки КАК УзлыКорректировки
	|		ПО ТаблицаРешений.НомерУзла = УзлыКорректировки.НомерУзла
	|ГДЕ
	|	НЕ ТаблицаРешений.Стоимость = 0
	|	И УзлыКорректировки.Магазин = &Магазин
	|
	|СГРУППИРОВАТЬ ПО
	|	УзлыКорректировки.Магазин,
	|	УзлыКорректировки.Номенклатура,
	|	УзлыКорректировки.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтТаблицаРешений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтУзлыКорректировки";
	
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ * ИЗ СебестоимостьПеремещений КАК  СебестоимостьПеремещений";
	
	РезультатЗапроса = Запрос.Выполнить();
	Объект.Товары.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Функция ПоправкаПоСборкамТоваров(СтруктураПериод, МенеджерВременныхТаблиц, НастройкаСпособаУчета)
	
	ТаблицаПриемник = Новый ТаблицаЗначений;
	ТаблицаПриемник.Колонки.Добавить("Магазин", Новый ОписаниеТипов("СправочникСсылка.Магазины"));
	ТаблицаПриемник.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПриемник.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаПриемник.Колонки.Добавить("КоличествоКомплектов", ОбщегоНазначенияРТКлиентСервер.ОписаниеТиповЧисла(15, 3));
	ТаблицаПриемник.Колонки.Добавить("Сумма", ОбщегоНазначенияРТКлиентСервер.ОписаниеТиповЧисла(15, 2));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СборкаТоваров.Ссылка,
	|	СборкаТоваров.ВидОперации,
	|	СборкаТоваров.Магазин,
	|	СборкаТоваров.Дата КАК Период
	|ИЗ
	|	Документ.СборкаТоваров КАК СборкаТоваров
	|ГДЕ
	|	СборкаТоваров.Проведен
	|	И СборкаТоваров.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|";
	
	Запрос.УстановитьПараметр("КонецПериода", СтруктураПериод.КонецПериода);
	Запрос.УстановитьПараметр("НачалоПериода", СтруктураПериод.НачалоПериода);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Сборка из комплектующих
		Если Выборка.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СборкаТоваровТовары.Ссылка.Магазин КАК Магазин,
			|	СборкаТоваровТовары.Ссылка.Номенклатура КАК Номенклатура,
			|	СборкаТоваровТовары.Ссылка.Характеристика КАК Характеристика,
			|	СборкаТоваровТовары.Ссылка.Количество КАК КоличествоКомплектов,
			|	СборкаТоваровТовары.Номенклатура КАК НоменклатураКомплектующая,
			|	СборкаТоваровТовары.Характеристика КАК ХарактеристикаКомплектующая,
			|	СборкаТоваровТовары.Количество КАК Количество
			|ПОМЕСТИТЬ КомплектующиеВрем
			|ИЗ
			|	Документ.СборкаТоваров.Товары КАК СборкаТоваровТовары
			|ГДЕ
			|	СборкаТоваровТовары.Ссылка = &Ссылка
			|	И НЕ СборкаТоваровТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КОЛИЧЕСТВО(Комплектующие.КоличествоКомплектов) КАК КоличествоКомплектующих
			|ПОМЕСТИТЬ КомплектующиеСвернуто
			|ИЗ
			|	КомплектующиеВрем КАК Комплектующие
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СборкаТоваровТовары.Ссылка.Магазин КАК Магазин,
			|	СборкаТоваровТовары.Ссылка.Номенклатура КАК Номенклатура,
			|	СборкаТоваровТовары.Ссылка.Характеристика КАК Характеристика,
			|	СборкаТоваровТовары.Ссылка.Количество / КомплектующиеСвернуто.КоличествоКомплектующих КАК КоличествоКомплектов,
			|	СборкаТоваровТовары.Номенклатура КАК НоменклатураКомплектующая,
			|	СборкаТоваровТовары.Характеристика КАК ХарактеристикаКомплектующая,
			|	СборкаТоваровТовары.Количество КАК Количество,
			|	КомплектующиеСвернуто.КоличествоКомплектующих КАК КоличествоКомплектующих
			|ПОМЕСТИТЬ Комплектующие
			|ИЗ
			|	Документ.СборкаТоваров.Товары КАК СборкаТоваровТовары,
			|	КомплектующиеСвернуто КАК КомплектующиеСвернуто
			|ГДЕ
			|	СборкаТоваровТовары.Ссылка = &Ссылка
			|	И НЕ СборкаТоваровТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Комплектующие.Магазин КАК Магазин,
			|	Комплектующие.Номенклатура КАК Номенклатура,
			|	Комплектующие.Характеристика КАК Характеристика,
			|	Комплектующие.КоличествоКомплектов КАК КоличествоКомплектов,
			|	Комплектующие.НоменклатураКомплектующая КАК НоменклатураКомплектующая,
			|	Комплектующие.ХарактеристикаКомплектующая КАК ХарактеристикаКомплектующая,
			|	Комплектующие.Количество КАК Количество,
			|	0 КАК Цена,
			|	Комплектующие.Количество * ЕСТЬNULL(СебестоимостьПоступлений.Стоимость, 0) КАК Сумма,
			|	ВЫБОР
			|		КОГДА Себестоимость.Период ЕСТЬ НЕ NULL 
			|				И СебестоимостьПустойМагазин.Период ЕСТЬ НЕ NULL 
			|			ТОГДА ВЫБОР
			|					КОГДА Себестоимость.Период >= СебестоимостьПустойМагазин.Период
			|						ТОГДА Себестоимость.Цена
			|					ИНАЧЕ СебестоимостьПустойМагазин.Цена
			|				КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|				КОГДА Себестоимость.Период ЕСТЬ НЕ NULL 
			|					ТОГДА Себестоимость.Цена
			|				ИНАЧЕ СебестоимостьПустойМагазин.Цена
			|			КОНЕЦ
			|	КОНЕЦ КАК СебестоимостьИзРегистра
			|ПОМЕСТИТЬ Результат
			|ИЗ
			|	Комплектующие КАК Комплектующие
			|		ЛЕВОЕ СОЕДИНЕНИЕ СебестоимостьПоступлений КАК СебестоимостьПоступлений
			|		ПО Комплектующие.Магазин = СебестоимостьПоступлений.Магазин
			|			И Комплектующие.НоменклатураКомплектующая = СебестоимостьПоступлений.Номенклатура
			|			И Комплектующие.ХарактеристикаКомплектующая = СебестоимостьПоступлений.Характеристика
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СебестоимостьНоменклатуры.СрезПоследних(&НачалоПериода, Магазин <> ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК Себестоимость
			|		ПО Комплектующие.Магазин = Себестоимость.Магазин
			|			И Комплектующие.НоменклатураКомплектующая = Себестоимость.Номенклатура
			|			И Комплектующие.ХарактеристикаКомплектующая = Себестоимость.Характеристика
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СебестоимостьНоменклатуры.СрезПоследних(&НачалоПериода, Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)) КАК СебестоимостьПустойМагазин
			|		ПО Комплектующие.НоменклатураКомплектующая = СебестоимостьПустойМагазин.Номенклатура
			|			И Комплектующие.ХарактеристикаКомплектующая = СебестоимостьПустойМагазин.Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Результат.Магазин КАК Магазин,
			|	Результат.Номенклатура КАК Номенклатура,
			|	Результат.Характеристика КАК Характеристика,
			|	ВЫРАЗИТЬ(Результат.КоличествоКомплектов КАК ЧИСЛО(15, 3)) КАК КоличествоКомплектов,
			|	Результат.НоменклатураКомплектующая КАК НоменклатураКомплектующая,
			|	Результат.ХарактеристикаКомплектующая КАК ХарактеристикаКомплектующая,
			|	Результат.Количество КАК Количество,
			|	Результат.Цена КАК Цена,
			|	ВЫБОР
			|		КОГДА Результат.Сумма = 0
			|			ТОГДА Результат.Количество * Результат.СебестоимостьИзРегистра
			|		ИНАЧЕ Результат.Сумма
			|	КОНЕЦ КАК Сумма
			|ИЗ
			|	Результат КАК Результат
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТовары.Номенклатура КАК Номенклатура,
			|	ТаблицаТовары.Характеристика КАК Характеристика,
			|	ТаблицаТовары.Количество КАК Количество
			|ПОМЕСТИТЬ Услуги
			|ИЗ
			|	Документ.СборкаТоваров.Товары КАК ТаблицаТовары
			|ГДЕ
			|	ТаблицаТовары.Ссылка = &Ссылка
			|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(Себестоимость.Номенклатура, СебестоимостьПустойМагазин.Номенклатура) КАК Номенклатура,
			|	ЕСТЬNULL(Себестоимость.Характеристика, СебестоимостьПустойМагазин.Характеристика) КАК Характеристика,
			|	ВЫБОР
			|		КОГДА Себестоимость.Период ЕСТЬ НЕ NULL 
			|				И СебестоимостьПустойМагазин.Период ЕСТЬ НЕ NULL 
			|			ТОГДА ВЫБОР
			|					КОГДА Себестоимость.Период >= СебестоимостьПустойМагазин.Период
			|						ТОГДА Себестоимость.Цена
			|					ИНАЧЕ СебестоимостьПустойМагазин.Цена
			|				КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|				КОГДА Себестоимость.Период ЕСТЬ НЕ NULL 
			|					ТОГДА Себестоимость.Цена
			|				ИНАЧЕ СебестоимостьПустойМагазин.Цена
			|			КОНЕЦ
			|	КОНЕЦ КАК Себестоимость
			|ПОМЕСТИТЬ СтоимостьУслуг
			|ИЗ
			|	РегистрСведений.СебестоимостьНоменклатуры.СрезПоследних(
			|			&Период,
			|			Магазин = &Магазин
			|				И НЕ Регистратор = &Ссылка
			|				И (Номенклатура, Характеристика) В
			|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|						Услуги.Номенклатура,
			|						Услуги.Характеристика
			|					ИЗ
			|						Услуги КАК Услуги)) КАК Себестоимость
			|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.СебестоимостьНоменклатуры.СрезПоследних(
			|				&Период,
			|				Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
			|					И НЕ Регистратор = &Ссылка
			|					И (Номенклатура, Характеристика) В
			|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|							Услуги.Номенклатура,
			|							Услуги.Характеристика
			|						ИЗ
			|							Услуги КАК Услуги)) КАК СебестоимостьПустойМагазин
			|		ПО Себестоимость.Номенклатура = СебестоимостьПустойМагазин.Номенклатура
			|			И Себестоимость.Характеристика = СебестоимостьПустойМагазин.Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Услуги.Номенклатура КАК Услуга,
			|	ЕСТЬNULL(Услуги.Количество, 0) * СтоимостьУслуг.Себестоимость КАК Сумма
			|ИЗ
			|	Услуги КАК Услуги
			|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьУслуг КАК СтоимостьУслуг
			|		ПО Услуги.Номенклатура = СтоимостьУслуг.Номенклатура
			|			И Услуги.Характеристика = СтоимостьУслуг.Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ КомплектующиеВрем
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ КомплектующиеСвернуто
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ Комплектующие
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ Результат
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ СтоимостьУслуг
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ Услуги";
			
			Запрос.УстановитьПараметр("Ссылка", Выборка.Ссылка);
			Запрос.УстановитьПараметр("Магазин", Выборка.Магазин);
			Запрос.УстановитьПараметр("Период", Выборка.Период);
			Запрос.УстановитьПараметр("НачалоПериода", СтруктураПериод.НачалоПериода); 
			
			
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			РезультатКомплект = РезультатЗапроса[4].Выгрузить();
			РезультатУслуги = РезультатЗапроса[7];
			
			// Решение проблемы "копеек" при делении комплектов.
			КоличествоКомплектов 	= РезультатКомплект.Итог("КоличествоКомплектов");
			БлижайшееЦелоеЧисло		= Окр(КоличествоКомплектов);
			Разница		 			= КоличествоКомплектов - БлижайшееЦелоеЧисло;
			
			Если РезультатКомплект.Количество() > 0 Тогда 
				СтрокаРезультата = РезультатКомплект[0];
				СтрокаРезультата.КоличествоКомплектов = СтрокаРезультата.КоличествоКомплектов - Разница;	
			КонецЕсли;

			
			Если НЕ РезультатУслуги.Пустой() И НастройкаСпособаУчета.РаспределятьСтоимостьУслуг Тогда
				
				РаспределитьУслугиНаСебестоимость(РезультатУслуги.Выгрузить(), НастройкаСпособаУчета.ПравилоРаспределения, РезультатКомплект, Перечисления.СпособыУчетаСебестоимости.АвтономныйУчетСредняяВзвешенная);
				
				Если ТаблицаПриемник = Неопределено Тогда
					ТаблицаПриемник = РезультатКомплект;
				Иначе
					ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(РезультатКомплект, ТаблицаПриемник, Ложь);
				КонецЕсли;
			Иначе
				
				Если ТаблицаПриемник = Неопределено Тогда
					ТаблицаПриемник = РезультатКомплект;
				Иначе
					ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(РезультатКомплект, ТаблицаПриемник, Ложь);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе // Разборка на комплектующие
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СборкаТоваров.Магазин,
			|	СборкаТоваров.Номенклатура,
			|	СборкаТоваров.Характеристика,
			|	СборкаТоваров.Количество
			|ПОМЕСТИТЬ Шапка
			|ИЗ
			|	Документ.СборкаТоваров КАК СборкаТоваров
			|ГДЕ
			|	СборкаТоваров.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Шапка.Номенклатура,
			|	Шапка.Характеристика,
			|	Шапка.Количество,
			|	ЕСТЬNULL(СебестоимостьПоступлений.Стоимость, 0) КАК Себестоимость
			|ИЗ
			|	Шапка КАК Шапка
			|		ЛЕВОЕ СОЕДИНЕНИЕ СебестоимостьПоступлений КАК СебестоимостьПоступлений
			|		ПО Шапка.Магазин = СебестоимостьПоступлений.Магазин
			|			И Шапка.Номенклатура = СебестоимостьПоступлений.Номенклатура
			|			И Шапка.Характеристика = СебестоимостьПоступлений.Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СборкаТоваровТовары.Ссылка.Магазин КАК Магазин,
			|	СборкаТоваровТовары.Номенклатура КАК Номенклатура,
			|	СборкаТоваровТовары.Характеристика КАК Характеристика,
			|	СборкаТоваровТовары.ДоляСтоимости,
			|	СборкаТоваровТовары.Количество КАК Количество,
			|	ЕСТЬNULL(СебестоимостьПоступлений.Стоимость, 0) КАК Цена,
			|	ЕСТЬNULL(СебестоимостьПоступлений.Стоимость, 0) * СборкаТоваровТовары.Количество КАК Сумма,
			|	СборкаТоваровТовары.Ссылка.Номенклатура КАК НоменклатураКомплектующая,
			|	СборкаТоваровТовары.Ссылка.Характеристика КАК ХарактеристикаКомплектующая,
			|	СборкаТоваровТовары.Количество КАК КоличествоКомплектов
			|ИЗ
			|	Документ.СборкаТоваров.Товары КАК СборкаТоваровТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ СебестоимостьПоступлений КАК СебестоимостьПоступлений
			|		ПО СборкаТоваровТовары.Ссылка.Магазин = СебестоимостьПоступлений.Магазин
			|			И СборкаТоваровТовары.Номенклатура = СебестоимостьПоступлений.Номенклатура
			|			И СборкаТоваровТовары.Характеристика = СебестоимостьПоступлений.Характеристика
			|ГДЕ
			|	СборкаТоваровТовары.Ссылка = &Ссылка
			|	И НЕ СборкаТоваровТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТовары.Номенклатура КАК Номенклатура,
			|	ТаблицаТовары.Характеристика КАК Характеристика,
			|	ТаблицаТовары.Количество КАК Количество
			|ПОМЕСТИТЬ Услуги
			|ИЗ
			|	Документ.СборкаТоваров.Товары КАК ТаблицаТовары
			|ГДЕ
			|	ТаблицаТовары.Ссылка = &Ссылка
			|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(Себестоимость.Номенклатура, СебестоимостьПустойМагазин.Номенклатура) КАК Номенклатура,
			|	ЕСТЬNULL(Себестоимость.Характеристика, СебестоимостьПустойМагазин.Характеристика) КАК Характеристика,
			|	ВЫБОР
			|		КОГДА Себестоимость.Период ЕСТЬ НЕ NULL 
			|				И СебестоимостьПустойМагазин.Период ЕСТЬ НЕ NULL 
			|			ТОГДА ВЫБОР
			|					КОГДА Себестоимость.Период >= СебестоимостьПустойМагазин.Период
			|						ТОГДА Себестоимость.Цена
			|					ИНАЧЕ СебестоимостьПустойМагазин.Цена
			|				КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|				КОГДА Себестоимость.Период ЕСТЬ НЕ NULL 
			|					ТОГДА Себестоимость.Цена
			|				ИНАЧЕ СебестоимостьПустойМагазин.Цена
			|			КОНЕЦ
			|	КОНЕЦ КАК Себестоимость
			|ПОМЕСТИТЬ СтоимостьУслуг
			|ИЗ
			|	РегистрСведений.СебестоимостьНоменклатуры.СрезПоследних(
			|			&Период,
			|			Магазин = &Магазин
			|				И НЕ Регистратор = &Ссылка
			|				И (Номенклатура, Характеристика) В
			|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|						Услуги.Номенклатура,
			|						Услуги.Характеристика
			|					ИЗ
			|						Услуги КАК Услуги)) КАК Себестоимость
			|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.СебестоимостьНоменклатуры.СрезПоследних(
			|				&Период,
			|				Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
			|					И НЕ Регистратор = &Ссылка
			|					И (Номенклатура, Характеристика) В
			|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|							Услуги.Номенклатура,
			|							Услуги.Характеристика
			|						ИЗ
			|							Услуги КАК Услуги)) КАК СебестоимостьПустойМагазин
			|		ПО Себестоимость.Номенклатура = СебестоимостьПустойМагазин.Номенклатура
			|			И Себестоимость.Характеристика = СебестоимостьПустойМагазин.Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Услуги.Номенклатура КАК Услуга,
			|	ЕСТЬNULL(Услуги.Количество, 0) * СтоимостьУслуг.Себестоимость КАК Сумма
			|ИЗ
			|	Услуги КАК Услуги
			|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьУслуг КАК СтоимостьУслуг
			|		ПО Услуги.Номенклатура = СтоимостьУслуг.Номенклатура
			|			И Услуги.Характеристика = СтоимостьУслуг.Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ Шапка
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ СтоимостьУслуг
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ Услуги";

			Запрос.УстановитьПараметр("Ссылка", Выборка.Ссылка);
			Запрос.УстановитьПараметр("Магазин", Выборка.Магазин);
			Запрос.УстановитьПараметр("Период", Выборка.Период);

			РезультатЗапроса = Запрос.ВыполнитьПакет();
			
			ТаблицаСтоимостьКомплекта = РезультатЗапроса[1].Выгрузить();
			РезультатКомплект = РезультатЗапроса[2].Выгрузить();
			РезультатУслуги = РезультатЗапроса[5];
			
			
			РаспределитьСебестоимостьПоДолямСтоимости(ТаблицаСтоимостьКомплекта, РезультатКомплект);
			
			Если НЕ РезультатУслуги.Пустой() И НастройкаСпособаУчета.РаспределятьСтоимостьУслуг Тогда
				
				РаспределитьУслугиНаСебестоимость(РезультатУслуги.Выгрузить(), НастройкаСпособаУчета.ПравилоРаспределения,
													РезультатКомплект, Перечисления.СпособыУчетаСебестоимости.АвтономныйУчетСредняяВзвешенная);
			КонецЕсли;
			
			ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(РезультатКомплект, ТаблицаПриемник, Ложь);
				
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаПриемник", ТаблицаПриемник);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РезультатКомплект.Магазин КАК Магазин,
	|	РезультатКомплект.Номенклатура КАК Номенклатура,
	|	РезультатКомплект.Характеристика КАК Характеристика,
	|	РезультатКомплект.КоличествоКомплектов КАК КоличествоКомплектов,
	|	РезультатКомплект.Сумма КАК Сумма
	|ПОМЕСТИТЬ РезультатКомплект
	|ИЗ
	|	&ТаблицаПриемник КАК РезультатКомплект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СебестоимостьСоСборкой.Магазин КАК Магазин,
	|	СебестоимостьСоСборкой.Номенклатура КАК Номенклатура,
	|	СебестоимостьСоСборкой.Характеристика КАК Характеристика,
	|	СУММА(СебестоимостьСоСборкой.КоличествоПеремещение) КАК КоличествоПеремещение,
	|	СУММА(СебестоимостьСоСборкой.Количество) КАК Количество,
	|	СУММА(СебестоимостьСоСборкой.СуммаОборот) КАК СуммаОборот,
	|	ВЫБОР
	|		КОГДА СУММА(СебестоимостьСоСборкой.Количество) = 0
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(СебестоимостьСоСборкой.СуммаОборот) / СУММА(СебестоимостьСоСборкой.Количество)
	|	КОНЕЦ КАК Стоимость
	|ИЗ
	|	(ВЫБРАТЬ
	|		СебестоимостьПоступлений.Магазин КАК Магазин,
	|		СебестоимостьПоступлений.Номенклатура КАК Номенклатура,
	|		СебестоимостьПоступлений.Характеристика КАК Характеристика,
	|		СебестоимостьПоступлений.КоличествоПеремещение КАК КоличествоПеремещение,
	|		СебестоимостьПоступлений.Количество КАК Количество,
	|		СебестоимостьПоступлений.СуммаОборот КАК СуммаОборот
	|	ИЗ
	|		СебестоимостьПоступлений КАК СебестоимостьПоступлений
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РезультатКомплект.Магазин,
	|		РезультатКомплект.Номенклатура,
	|		РезультатКомплект.Характеристика,
	|		0,
	|		СУММА(РезультатКомплект.КоличествоКомплектов),
	|		СУММА(РезультатКомплект.Сумма)
	|	ИЗ
	|		РезультатКомплект КАК РезультатКомплект
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РезультатКомплект.Номенклатура,
	|		РезультатКомплект.Характеристика,
	|		РезультатКомплект.Магазин) КАК СебестоимостьСоСборкой
	|
	|СГРУППИРОВАТЬ ПО
	|	СебестоимостьСоСборкой.Магазин,
	|	СебестоимостьСоСборкой.Характеристика,
	|	СебестоимостьСоСборкой.Номенклатура";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииДляОбслуживанияСхемИнвентаризацийЗаполняемыхПоДаннымИБСлужебные

// Возвращает имена и типы полей, которые должны обязательно присутствовать
// в СКД, используемой для заполнения цен по данным ИБ.
//
// Возвращаемое значение:
// Соответствие
// В ключах содержатся имена полей, в значениях - типы полей.
//
Функция ПолучитьОбязательныеПоляСхемыКомпоновкиДанных()
	
	Поля = Новый Соответствие();
	
	Поля.Вставить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Поля.Вставить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КонецЕсли;
	
	Поля.Вставить("Количество", Новый ОписаниеТипов("Число"));
	Поля.Вставить("КоличествоУпаковок", Новый ОписаниеТипов("Число"));
	
	Поля.Вставить("КоличествоФакт", Новый ОписаниеТипов("Число"));
	Поля.Вставить("КоличествоУпаковокФакт", Новый ОписаниеТипов("Число"));
	
	Возврат Поля;
	
КонецФункции

// Проверяет набор данных СКД, что он содержит заданное поле соответствующего типа.
//
// Параметры:
// НаборДанных 			- набор данных, который необходимо проверить.
// ИмяПоля				- Строка, содержащее имя поля.
// ТипЗначения			- ОписаниеТипов, тип который должно иметь поле СКД.
// СообщениеОбОшибке	- Строка, содержит вводную часть сообщения об ошибке.
//
// Возвращаемое значение:
// Булево
// Истина, если набор данных содержит требуемое поле, в противном случае Ложь.
//
Функция ПроверитьПолеНабораДанныхСКД(НаборДанных, ИмяПоля, ТипЗначения, СообщениеОбОшибке = Неопределено)
	
	Поле = НаборДанных.Поля.Найти(ИмяПоля);
	
	Если Поле = Неопределено Тогда
		Результат = Ложь;
	Иначе
		ТипыПоля       = Поле.ТипЗначения.Типы();
		ДопустимыеТипы = ТипЗначения.Типы();
		
		Результат = Истина;
		Если ТипыПоля.Количество() = ДопустимыеТипы.Количество() Тогда
			
			Для Каждого Тип Из ДопустимыеТипы Цикл
				Если ТипыПоля.Найти(Тип) = Неопределено Тогда
					Результат = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Результат Тогда
		ОбщегоНазначения.СообщитьПользователю(?(ЗначениеЗаполнено(СообщениеОбОшибке), СообщениеОбОшибке + ": ", "") 
			+ СтрЗаменить(СтрЗаменить(НСтр("ru='Схема компоновки данных для заполнения инвентаризации должна содержать поле ""%ИмяПоля%"" с типом значения ""%ТипЗначения%"".'"), "%ИмяПоля%", ИмяПоля), "%ТипЗначения%", ТипЗначения));
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункцииСлужебные

Процедура СформироватьЗапросПоСебестоимости(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка,
	|	ВременнаяТаблицаТовары.Упаковка.Коэффициент КАК КоэффициентУпаковки,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ВременнаяТаблицаТовары.Упаковка.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ * Себестоимость.Цена КАК Цена
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СебестоимостьНоменклатуры.СрезПоследних(
	|				&Дата,
	|				Магазин = &Магазин
	|					И (Номенклатура, Характеристика) В
	|						(ВЫБРАТЬ
	|							ВременнаяТаблицаТовары.Номенклатура,
	|							ВременнаяТаблицаТовары.Характеристика
	|						ИЗ
	|							ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары)) КАК Себестоимость
	|		ПО ВременнаяТаблицаТовары.Номенклатура = Себестоимость.Номенклатура
	|			И ВременнаяТаблицаТовары.Характеристика = Себестоимость.Характеристика
	|;";

КонецПроцедуры 

// Формирует текст запроса к регистру ЦеныНоменклатуры.
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросЦеныПоВидуЦен(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА ВременнаяТаблицаТовары.Номенклатура.Номинал * ВЫБОР
	|					КОГДА ВременнаяТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|						ТОГДА 1
	|					ИНАЧЕ ВременнаяТаблицаТовары.Упаковка.Коэффициент
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВременнаяТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|					ТОГДА 1
	|				ИНАЧЕ ВременнаяТаблицаТовары.Упаковка.Коэффициент
	|			КОНЕЦ * ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент, 1)
	|	КОНЕЦ КАК Цена,
	|	1 КАК Приоритет
	|ПОМЕСТИТЬ ВТЦеныНоменклатуры
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Дата,
	|				ВидЦены = &ВидЦен
	|					И (Номенклатура, Характеристика) В
	|						(ВЫБРАТЬ
	|							ВременнаяТаблицаТовары.Номенклатура,
	|							ВременнаяТаблицаТовары.Характеристика
	|						ИЗ
	|							ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ВременнаяТаблицаТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И ВременнаяТаблицаТовары.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА ВременнаяТаблицаТовары.Номенклатура.Номинал * ВЫБОР
	|					КОГДА ВременнаяТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|						ТОГДА 1
	|					ИНАЧЕ ВременнаяТаблицаТовары.Упаковка.Коэффициент
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВременнаяТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|					ТОГДА 1
	|				ИНАЧЕ ВременнаяТаблицаТовары.Упаковка.Коэффициент
	|			КОНЕЦ * ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент, 1)
	|	КОНЕЦ,
	|	2
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Дата,
	|				ВидЦены = &ВидЦен
	|					И (Номенклатура, Характеристика) В
	|						(ВЫБРАТЬ
	|							ВременнаяТаблицаТовары.Номенклатура,
	|							ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|						ИЗ
	|							ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ВременнаяТаблицаТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|ГДЕ
	|	ВременнаяТаблицаТовары.Номенклатура.ВидНоменклатуры.ИспользоватьЦенуНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|	ВТЦеныНоменклатуры.Характеристика КАК Характеристика,
	|	ВТЦеныНоменклатуры.Цена КАК Цена
	|ПОМЕСТИТЬ ВТЦеныПоПриоритету
	|ИЗ
	|	ВТЦеныНоменклатуры КАК ВТЦеныНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВТЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|			ВТЦеныНоменклатуры.Характеристика КАК Характеристика,
	|			МИНИМУМ(ВТЦеныНоменклатуры.Приоритет) КАК Приоритет
	|		ИЗ
	|			ВТЦеныНоменклатуры КАК ВТЦеныНоменклатуры
	|		ГДЕ
	|			ВТЦеныНоменклатуры.Цена > 0
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВТЦеныНоменклатуры.Номенклатура,
	|			ВТЦеныНоменклатуры.Характеристика) КАК ВложенныйЗапросПриоритет
	|		ПО ВТЦеныНоменклатуры.Номенклатура = ВложенныйЗапросПриоритет.Номенклатура
	|			И ВТЦеныНоменклатуры.Характеристика = ВложенныйЗапросПриоритет.Характеристика
	|			И ВТЦеныНоменклатуры.Приоритет = ВложенныйЗапросПриоритет.Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка,
	|	ВременнаяТаблицаТовары.Упаковка.Коэффициент КАК КоэффициентУпаковки,
	|	ЕСТЬNULL(ВТЦеныПоПриоритету.Цена, 0) КАК Цена
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦеныПоПриоритету КАК ВТЦеныПоПриоритету
	|		ПО ВременнаяТаблицаТовары.Номенклатура = ВТЦеныПоПриоритету.Номенклатура
	|			И ВременнаяТаблицаТовары.Характеристика = ВТЦеныПоПриоритету.Характеристика
	|;";

КонецПроцедуры // СформироватьЗапросЦеныПрайсЛиста()

// Формирует текст запроса по ценам прошлых закупок.
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросЦеныПоПрошлымЗакупкам(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ПрошлыеЗакупки.ДатаПрошлойЗакупки) КАК ДатаПрошлойЗакупки
	|ПОМЕСТИТЬ ТаблицаСтрокЗакупки
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	|			ПоступлениеТоваровТовары.Характеристика КАК Характеристика,
	|			ПоступлениеТоваровТовары.Ссылка.Дата КАК ДатаПрошлойЗакупки
	|		ИЗ
	|			Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	|		ГДЕ
	|			ПоступлениеТоваровТовары.Ссылка.Дата <= &Дата
	|			И ПоступлениеТоваровТовары.Ссылка <> &Ссылка
	|			И ПоступлениеТоваровТовары.Ссылка.Магазин = &Магазин
	|			И ПоступлениеТоваровТовары.Ссылка.Контрагент = &Поставщик
	|			И ПоступлениеТоваровТовары.Ссылка.Проведен) КАК ПрошлыеЗакупки
	|		ПО ВременнаяТаблицаТовары.Номенклатура = ПрошлыеЗакупки.Номенклатура
	|			И ВременнаяТаблицаТовары.Характеристика = ПрошлыеЗакупки.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаТовары.Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка,
	|	ВременнаяТаблицаТовары.Упаковка.Коэффициент КАК КоэффициентУпаковки,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ВременнаяТаблицаТовары.Упаковка.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ * ЦеныПрошлыхЗакупок.Цена / ЕСТЬNULL(ЦеныПрошлыхЗакупок.Упаковка.Коэффициент, 1) КАК Цена
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаСтрокЗакупкиСДатами.Номенклатура КАК Номенклатура,
	|			ТаблицаСтрокЗакупкиСДатами.Характеристика КАК Характеристика,
	|			ТаблицаСтрокЗакупкиСЦенами.Цена КАК Цена,
	|			ТаблицаСтрокЗакупкиСЦенами.Упаковка КАК Упаковка
	|		ИЗ
	|			ТаблицаСтрокЗакупки КАК ТаблицаСтрокЗакупкиСДатами
	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	|					ПоступлениеТоваровТовары.Характеристика КАК Характеристика,
	|					ПоступлениеТоваровТовары.Ссылка.Дата КАК ДатаПрошлойЗакупки,
	|					ПоступлениеТоваровТовары.Цена КАК Цена,
	|					ПоступлениеТоваровТовары.Упаковка КАК Упаковка
	|				ИЗ
	|					Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	|				ГДЕ
	|					ПоступлениеТоваровТовары.Ссылка.Дата < &Дата
	|					И ПоступлениеТоваровТовары.Ссылка <> &Ссылка
	|					И ПоступлениеТоваровТовары.Ссылка.Магазин = &Магазин
	|					И ПоступлениеТоваровТовары.Ссылка.Контрагент = &Поставщик
	|					И ПоступлениеТоваровТовары.Ссылка.Проведен) КАК ТаблицаСтрокЗакупкиСЦенами
	|				ПО ТаблицаСтрокЗакупкиСДатами.Номенклатура = ТаблицаСтрокЗакупкиСЦенами.Номенклатура
	|					И ТаблицаСтрокЗакупкиСДатами.Характеристика = ТаблицаСтрокЗакупкиСЦенами.Характеристика
	|					И ТаблицаСтрокЗакупкиСДатами.ДатаПрошлойЗакупки = ТаблицаСтрокЗакупкиСЦенами.ДатаПрошлойЗакупки) КАК ЦеныПрошлыхЗакупок
	|		ПО ВременнаяТаблицаТовары.Номенклатура = ЦеныПрошлыхЗакупок.Номенклатура
	|			И ВременнаяТаблицаТовары.Характеристика = ЦеныПрошлыхЗакупок.Характеристика";
	
КонецПроцедуры

// Формирует текст запроса по ценам заказа поставщику.
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросЦеныПоДаннымПоставщика(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
	|/////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыПоДаннымПоставщика.Номенклатура,
	|	ТоварыПоДаннымПоставщика.Характеристика,
	|	ТоварыПоДаннымПоставщика.Упаковка,
	|	ТоварыПоДаннымПоставщика.Цена
	|ПОМЕСТИТЬ ТоварыПоДаннымПоставщика
	|ИЗ
	|	&ТоварыПоДаннымПоставщика КАК ТоварыПоДаннымПоставщика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка,
	|	ВременнаяТаблицаТовары.Упаковка.Коэффициент КАК КоэффициентУпаковки,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ВременнаяТаблицаТовары.Упаковка.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ * ТоварыПоДаннымПоставщика.Цена / ЕСТЬNULL(ТоварыПоДаннымПоставщика.Упаковка.Коэффициент, 1) КАК Цена
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыПоДаннымПоставщика КАК ТоварыПоДаннымПоставщика
	|		ПО ВременнаяТаблицаТовары.Номенклатура = ТоварыПоДаннымПоставщика.Номенклатура
	|			И ВременнаяТаблицаТовары.Характеристика = ТоварыПоДаннымПоставщика.Характеристика";

КонецПроцедуры

// Формирует текст запроса по ценам произвольной таблицы цен.
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросЦеныПоПроизвольнойТаблицеЦен(ТекстЗапроса, ЕстьКоличество = Ложь)
	
	Если ЕстьКоличество Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|/////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЦен.Номенклатура,
		|	ТаблицаЦен.Характеристика,
		|	ТаблицаЦен.Упаковка,
		|	ТаблицаЦен.Цена,
		|	ТаблицаЦен.КоличествоУпаковок,
		|	ТаблицаЦен.Сумма
		|ПОМЕСТИТЬ ТаблицаЦен
		|ИЗ
		|	&ТаблицаЦен КАК ТаблицаЦен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
		|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка,
		|	ВременнаяТаблицаТовары.Упаковка.Коэффициент КАК КоэффициентУпаковки,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ВременнаяТаблицаТовары.Упаковка.Коэффициент
		|		ИНАЧЕ 1
		|	КОНЕЦ * ТаблицаЦен.Цена / ЕСТЬNULL(ТаблицаЦен.Упаковка.Коэффициент, 1) КАК Цена,
		|ЕСТЬNULL(ТаблицаЦен.КоличествоУпаковок, 0) КАК КоличествоУпаковок,
		|ЕСТЬNULL(ТаблицаЦен.Сумма, 0) КАК Сумма
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦен КАК ТаблицаЦен
		|		ПО ВременнаяТаблицаТовары.Номенклатура = ТаблицаЦен.Номенклатура
		|			И ВременнаяТаблицаТовары.Характеристика = ТаблицаЦен.Характеристика";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|/////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЦен.Номенклатура,
		|	ТаблицаЦен.Характеристика,
		|	ТаблицаЦен.Упаковка,
		|	ТаблицаЦен.Цена
		|ПОМЕСТИТЬ ТаблицаЦен
		|ИЗ
		|	&ТаблицаЦен КАК ТаблицаЦен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
		|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка,
		|	ВременнаяТаблицаТовары.Упаковка.Коэффициент КАК КоэффициентУпаковки,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ВременнаяТаблицаТовары.Упаковка.Коэффициент
		|		ИНАЧЕ 1
		|	КОНЕЦ * ТаблицаЦен.Цена / ЕСТЬNULL(ТаблицаЦен.Упаковка.Коэффициент, 1) КАК Цена
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦен КАК ТаблицаЦен
		|		ПО ВременнаяТаблицаТовары.Номенклатура = ТаблицаЦен.Номенклатура
		|			И ВременнаяТаблицаТовары.Характеристика = ТаблицаЦен.Характеристика";
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

