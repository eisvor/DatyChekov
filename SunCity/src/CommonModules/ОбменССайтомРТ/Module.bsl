
////////////////////////////////////////////////////////////////////////////////
// ОбменССайтомПереопределяемый: механизм обмена с сайтом
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ФормаУзлаОбмена

// В данной процедуре можно изменить видимость элементов формы узла обмена с сайтом
//
// Параметры:
//  Форма  - УправляемаяФорма - форма узла обмена с сайтом.
//
Процедура УстановитьВидимостьЭлементовФормыУзла(Форма) Экспорт
	
	Форма.Элементы.СтраницаОбменЗаказами.Видимость = Форма.Элементы.СтраницаОбменЗаказами.Видимость И Форма.Объект.ОбменЗаказами;
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы узла плана обмена "Обмен с сайтом".
//
// Параметры:
//  Форма - Форма - форма, из обработчика события которой происходит вызов процедуры.
//  Отказ - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ФормаУзлаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ИспользоватьЗаказыПокупателей = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПокупателей");
	
	Если ИспользоватьЗаказыПокупателей Тогда
			
			#Если Сервер Тогда
			
			Форма.КассаККМ = КассаККМИнтернетМагазина(Форма.Объект.Ссылка);
			
			ИмяЭлемента = "КассаККМОплатыНаСайте";
			ЭлементГруппа = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), Форма.Элементы.ГруппаЗаказыОсновныеНастройки);
			ЭлементГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ЗаполнитьЗначенияСвойств(ЭлементГруппа, Форма.Элементы.ГруппаЗаказыОсновныеНастройки.ПодчиненныеЭлементы.ГруппаПараметрыЗаказа,,
				"ПутьКДаннымЗаголовка, Видимость, Доступность");
			ЭлементГруппа.Заголовок = НСтр("ru = 'Касса оплаты на сайте'");
			
			ИмяЭлемента = "КассаККМОплатыНаСайтеЭлемент";
			ЭлементПоле = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"),ЭлементГруппа);
			ЭлементПоле.ПутьКДанным = "КассаККМ";
			ЭлементПоле.Вид = ВидПоляФормы.ПолеВвода;
			ЭлементПоле.УстановитьДействие("ПриИзменении", "Подключаемый_ПолеВводаПриИзменении");
			
			ИмяЭлемента = "УдаленнаяФискализацияЭлемент";
			ЭлементПоле = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"),ЭлементГруппа);
			ЭлементПоле.Заголовок = "Автоматически фискализировать проведенную оплату на сайте";
			ЭлементПоле.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			ЭлементПоле.ПутьКДанным = "УдаленнаяФискализация";
			ЭлементПоле.Вид = ВидПоляФормы.ПолеФлажка;
			ЭлементПоле.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
			ЭлементПоле.РасширеннаяПодсказка.АвтоМаксимальнаяШирина = Ложь;
			ЭлементПоле.УстановитьДействие("ПриИзменении", "Подключаемый_ПолеФлажкаПриИзменении");
			
			#КонецЕсли
		
		Если Форма.Объект.Ссылка.Пустая() Тогда
			
			Форма.СпособИдентификацииКонтрагентов = Перечисления.СпособыИдентификацииКонтрагентов.ТелефонEmail;
			
			Для каждого ЗначениеПеречисления Из Метаданные.Перечисления.СтатусыЗаказовПокупателей.ЗначенияПеречисления Цикл
				
				СтрокаТаблица = Форма.СоответствиеСтатусовЗаказов.Добавить();
				СтрокаТаблица.СтатусЗаказаВБазе   = Перечисления.СтатусыЗаказовПокупателей[ЗначениеПеречисления.Имя];
				СтрокаТаблица.СтатусЗаказаНаСайте = ЗначениеПеречисления.Синоним;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Форма.СтруктураГотовностиКУдаленнойФискализации = ОбменССайтомРТВызовСервера.ПолучитьСтруктуруГотовностиКУдаленнойФискализации(Форма.КассаККМ);
		
	КонецЕсли;
	
КонецПроцедуры

// Корректирует проверяемые при записи реквизиты формы узла 
//
// Параметры:
//  Форма                 - УправляемаяФорма - форма плана узла обмена, в которой выполняется запись.
//  ПроверяемыеРеквизиты  - Массив - массив имен проверяемых на заполненность реквизитов формы.
//  ОбменТоварами         - Булево - признак того, что будет выполняться обмен товарами.
//  ОбменЗаказами         - Булево - признак того, что будет выполняться обмен заказами.
//
Процедура СкорректироватьПроверяемыеРеквизитыФормыУзла(Форма, ПроверяемыеРеквизиты, ОбменТоварами, ОбменЗаказами) Экспорт
	
	РеквизитыОбменаЗаказами = РеквизитыОбменаЗаказами();
	
	НеПроверяемыеРеквизиты = Новый Массив;
	
	Если Не ОбменЗаказами Тогда
		НеПроверяемыеРеквизиты = РеквизитыОбменаЗаказами();
	Иначе
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПроверяемыеРеквизиты, РеквизитыОбменаЗаказами);
		ПроверяемыеРеквизиты.Добавить("ПричинаОтменыЗаказовПоУмолчанию");
		//ПроверяемыеРеквизиты.Добавить("СоответствиеСтатусовЗаказов.СтатусЗаказаВБазе");
		//ПроверяемыеРеквизиты.Добавить("СоответствиеСтатусовЗаказов.СтатусЗаказаНаСайте");
		
		//НепроверяемыеРеквизиты.Добавить("СоответствиеСтатусовЗаказов");
		НепроверяемыеРеквизиты.Добавить("НомерНаСайте");
		НепроверяемыеРеквизиты.Добавить("ДатаНаСайте");
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовПокупателей") Тогда
		НеПроверяемыеРеквизиты.Добавить("ПричинаОтменыЗаказовПоУмолчанию");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НеПроверяемыеРеквизиты);

КонецПроцедуры

// В форму узла плана обмена добавляются реквизиты прикладного решения и элементы формы к ним.
// Параметры:
//  Форма - УправляемаяФорма - Форма узла плана обмена "Обмен с сайтом".
//  ТекущийОбъект - ПланОбменаОбъект - Объект плана обмена "Обмен с сайтом".
//
Процедура ДобавитьРеквизитыФормыУзла(Форма, ТекущийОбъект) Экспорт
	
	ТипСпособИдентификации  = Новый ОписаниеТипов("ПеречислениеСсылка.СпособыИдентификацииКонтрагентов");
	ТипЕдиницаИзмерения     = Новый ОписаниеТипов("СправочникСсылка.БазовыеЕдиницыИзмерения");
	ТипГруппаНоменклатуры   = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ТипГруппаКонтрагенты    = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ТипОрганизация          = Новый ОписаниеТипов("СправочникСсылка.Организации");
	ТипКассаККМ             = Новый ОписаниеТипов("СправочникСсылка.КассыККМ");
	ТипСтрока               = Новый ОписаниеТипов("Строка");
	ТипДата                 = Новый ОписаниеТипов("Дата");
	ТипБулево               = Новый ОписаниеТипов("Булево");
	ТипПричинаОтменыЗаказов = Новый ОписаниеТипов("СправочникСсылка.ПричиныОтменыЗаказовПокупателей");
	ТипВидНовойНоменклатуры = Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры");
	ТипСоответствиеСтатусов = Новый ОписаниеТипов("ТаблицаЗначений");
	ТипСтатусЗаказаВБазе    = Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыЗаказовПокупателей");
	ТипПроизвольный         = Новый ОписаниеТипов();
	
	РеквизитСпособИдентификации = Новый РеквизитФормы("СпособИдентификацииКонтрагентов", ТипСпособИдентификации,,, Истина);
	РеквизитЕдиницаНоменклатуры = Новый РеквизитФормы("ЕдиницаИзмеренияНовойНоменклатуры", ТипЕдиницаИзмерения,,
		НСтр("ru = 'Единица измерения новой номенклатуры'"), Истина);
	РеквизитГруппаНоменклатуры  = Новый РеквизитФормы("ГруппаДляНовойНоменклатуры", ТипГруппаНоменклатуры,,
		НСтр("ru = 'Группа для новой номенклатуры'"), Истина);
	РеквизитГруппаКонтрагенты   = Новый РеквизитФормы("ГруппаДляНовыхКонтрагентов", ТипГруппаКонтрагенты,,
		НСтр("ru = 'Группа для новых контрагентов'"), Истина);
	РеквизитОрганизация         = Новый РеквизитФормы("Организация", ТипОрганизация,,НСтр("ru = 'Организация'"), Истина);
	РеквизитДатаНаСайте         = Новый РеквизитФормы("ДатаНаСайте", ТипДата,, НСтр("ru = 'Дата заказа на сайте'"), Истина);
	РеквизитНомерНаСайте        = Новый РеквизитФормы("НомерНаСайте", ТипСтрока,, НСтр("ru = 'Номер заказа на сайте'"), Истина);
	
	РеквизитВидНоменклатурыТоварДляНовойНоменклатуры  = Новый РеквизитФормы("ВидНоменклатурыТоварДляНовойНоменклатуры", ТипВидНовойНоменклатуры,,
	НСтр("ru = 'Вид номенклатуры для товара'"), Истина);
	РеквизитВидНоменклатурыУслугаДляНовойНоменклатуры = Новый РеквизитФормы("ВидНоменклатурыУслугаДляНовойНоменклатуры", ТипВидНовойНоменклатуры,,
	НСтр("ru = 'Вид номенклатуры для услуги'"), Истина);
	РеквизитПричинаОтменыЗаказовПоУмолчанию           = Новый РеквизитФормы("ПричинаОтменыЗаказовПоУмолчанию", ТипПричинаОтменыЗаказов,,
	НСтр("ru = 'Причина отмены заказов по умолчанию'"), Истина);
	
	// Закладка Обмен заказами.
	
	РеквизитКассаККМ = Новый РеквизитФормы("КассаККМ", ТипКассаККМ,, НСтр("ru = 'Касса ККМ'"), Истина);
	РеквизитСтруктураГотовностиКУдаленнойФискализации = Новый РеквизитФормы("СтруктураГотовностиКУдаленнойФискализации", ТипПроизвольный,, Истина);
	РеквизитУдаленнаяФискализация = Новый РеквизитФормы("УдаленнаяФискализация", ТипБулево,, НСтр("ru = 'Удаленная фискализация'"), Истина);
	
	// Добавление реквизитов на форму.
	
	РеквизитСоответствиеСтатусов = Новый РеквизитФормы("СоответствиеСтатусовЗаказов", ТипСоответствиеСтатусов,,
		НСтр("ru = 'Соответствие статусов заказов'"), Истина);
		
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(РеквизитСоответствиеСтатусов);
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);

	РеквизитСтатусЗаказаВБазе = Новый РеквизитФормы("СтатусЗаказаВБазе", ТипСтатусЗаказаВБазе,
		"СоответствиеСтатусовЗаказов", НСтр("ru = 'Статус заказа в базе'"), Истина);
	РеквизитСтатусЗаказаНаСайте = Новый РеквизитФормы("СтатусЗаказаНаСайте", ТипСтрока,
		"СоответствиеСтатусовЗаказов", НСтр("ru = 'Статус заказа на сайте'"), Истина);

	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(РеквизитСпособИдентификации);
	ДобавляемыеРеквизиты.Добавить(РеквизитЕдиницаНоменклатуры);
	ДобавляемыеРеквизиты.Добавить(РеквизитГруппаНоменклатуры);
	ДобавляемыеРеквизиты.Добавить(РеквизитГруппаКонтрагенты);
	ДобавляемыеРеквизиты.Добавить(РеквизитОрганизация);
	ДобавляемыеРеквизиты.Добавить(РеквизитКассаККМ);
	ДобавляемыеРеквизиты.Добавить(РеквизитДатаНаСайте);
	ДобавляемыеРеквизиты.Добавить(РеквизитНомерНаСайте);
	ДобавляемыеРеквизиты.Добавить(РеквизитСтатусЗаказаВБазе);
	ДобавляемыеРеквизиты.Добавить(РеквизитСтатусЗаказаНаСайте);
	ДобавляемыеРеквизиты.Добавить(РеквизитВидНоменклатурыТоварДляНовойНоменклатуры);
	ДобавляемыеРеквизиты.Добавить(РеквизитВидНоменклатурыУслугаДляНовойНоменклатуры);
	ДобавляемыеРеквизиты.Добавить(РеквизитПричинаОтменыЗаказовПоУмолчанию);
	ДобавляемыеРеквизиты.Добавить(РеквизитУдаленнаяФискализация);
	ДобавляемыеРеквизиты.Добавить(РеквизитСтруктураГотовностиКУдаленнойФискализации);
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаСтраницыОбменЗаказами.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	// Группа Параметры поиска контрагентов
	ГруппаПараметрыПоиска = Элементы.Добавить("ГруппаПараметрыПоиска", Тип("ГруппаФормы"), Элементы.ГруппаЗаказыОсновныеНастройки);
	ГруппаПараметрыПоиска.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаПараметрыПоиска.ОтображатьЗаголовок = Истина;
	ГруппаПараметрыПоиска.Отображение         = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	ЗаголовокГруппы                           = НСтр("ru = 'Параметры поиска контрагентов'");
	ГруппаПараметрыПоиска.Заголовок           = ЗаголовокГруппы;
	ГруппаПараметрыПоиска.Объединенная        = Истина;
	
	ЭлементСпособИдентификации = Элементы.Добавить("СпособИдентификацииКонтрагентов", Тип("ПолеФормы"), ГруппаПараметрыПоиска);
	ЭлементСпособИдентификации.ПутьКДанным        = "СпособИдентификацииКонтрагентов";
	ЭлементСпособИдентификации.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементСпособИдентификации.Вид                = ВидПоляФормы.ПолеПереключателя;
	ЭлементСпособИдентификации.СписокВыбора.Добавить(Перечисления.СпособыИдентификацииКонтрагентов.Наименование, "Наименование");
	ЭлементСпособИдентификации.СписокВыбора.Добавить(Перечисления.СпособыИдентификацииКонтрагентов.ИННКПП      , "ИНН/КПП");
	ЭлементСпособИдентификации.СписокВыбора.Добавить(Перечисления.СпособыИдентификацииКонтрагентов.ТелефонEmail, "Телефон/Email");
	
	// Группа Создание новых элементов
	ГруппаНовыеЭлементы = Элементы.Добавить("ГруппаНовыеЭлементы", Тип("ГруппаФормы"), Элементы.ГруппаЗаказыОсновныеНастройки);
	ГруппаНовыеЭлементы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаНовыеЭлементы.ОтображатьЗаголовок = Истина;
	ГруппаНовыеЭлементы.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	ЗаголовокГруппы = НСтр("ru = 'Параметры новой номенклатуры и контрагентов'");
	ГруппаНовыеЭлементы.Заголовок = ЗаголовокГруппы;
	ГруппаНовыеЭлементы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаНовыеЭлементы.Объединенная = Истина;
	
	ЭлементЕдиницаИзмерения = Элементы.Добавить("ЭлементЕдиницаИзмерения", Тип("ПолеФормы"), ГруппаНовыеЭлементы);
	ЭлементЕдиницаИзмерения.ПутьКДанным = "ЕдиницаИзмеренияНовойНоменклатуры";
	ЭлементЕдиницаИзмерения.Вид = ВидПоляФормы.ПолеВвода;
	
	ЭлементГруппаНоменклатуры = Элементы.Добавить("ГруппаДляНовойНоменклатуры", Тип("ПолеФормы"), ГруппаНовыеЭлементы);
	ЭлементГруппаНоменклатуры.ПутьКДанным = "ГруппаДляНовойНоменклатуры";
	ЭлементГруппаНоменклатуры.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементГруппаНоменклатуры.АвтоОтметкаНезаполненного = Истина;
	ЭлементГруппаНоменклатуры.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
	
	ЭлементГруппаКонтрагенты = Элементы.Добавить("ГруппаДляНовыхКонтрагентов", Тип("ПолеФормы"), ГруппаНовыеЭлементы);
	ЭлементГруппаКонтрагенты.ПутьКДанным = "ГруппаДляНовыхКонтрагентов";
	ЭлементГруппаКонтрагенты.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементГруппаКонтрагенты.АвтоОтметкаНезаполненного = Истина;
	ЭлементГруппаКонтрагенты.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
	
	ЭлементВидНоменклатурыТоварДляНовойНоменклатуры = Элементы.Добавить("ЭлементВидНоменклатурыТоварДляНовойНоменклатуры", Тип("ПолеФормы"), ГруппаНовыеЭлементы);
	ЭлементВидНоменклатурыТоварДляНовойНоменклатуры.ПутьКДанным = "ВидНоменклатурыТоварДляНовойНоменклатуры";
	ЭлементВидНоменклатурыТоварДляНовойНоменклатуры.Вид = ВидПоляФормы.ПолеВвода;
	
	ЭлементВидНоменклатурыУслугаДляНовойНоменклатуры = Элементы.Добавить("ЭлементВидНоменклатурыУслугаДляНовойНоменклатуры", Тип("ПолеФормы"), ГруппаНовыеЭлементы);
	ЭлементВидНоменклатурыУслугаДляНовойНоменклатуры.ПутьКДанным = "ВидНоменклатурыУслугаДляНовойНоменклатуры";
	ЭлементВидНоменклатурыУслугаДляНовойНоменклатуры.Вид = ВидПоляФормы.ПолеВвода;
	
	// Группа Параметры заказа.
	ГруппаПараметрыЗаказа = Элементы.Добавить("ГруппаПараметрыЗаказа", Тип("ГруппаФормы"), Элементы.ГруппаЗаказыОсновныеНастройки);
	ГруппаПараметрыЗаказа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаПараметрыЗаказа.ОтображатьЗаголовок = Истина;
	ГруппаПараметрыЗаказа.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	ЗаголовокШаблон = НСтр("ru = 'Параметры создания документов %1'");
	ЗаголовокГруппы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокШаблон, НСтр("ru = 'Заказ клиента'"));
	ГруппаПараметрыЗаказа.Заголовок = ЗаголовокГруппы;
	ГруппаПараметрыЗаказа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаПараметрыЗаказа.Объединенная = Истина;
	
	ЭлементОрганизация = Элементы.Добавить("Организация", Тип("ПолеФормы"), ГруппаПараметрыЗаказа);
	ЭлементОрганизация.ПутьКДанным = "Организация";
	ЭлементОрганизация.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементОрганизация.АвтоОтметкаНезаполненного = Истина;
	
	ЭлементНомерЗаказа = Элементы.Добавить("НомерЗаказаНаСайте", Тип("ПолеФормы"), ГруппаПараметрыЗаказа);
	ЭлементНомерЗаказа.ПутьКДанным = "НомерНаСайте";
	ЭлементНомерЗаказа.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементНомерЗаказа.АвтоОтметкаНезаполненного = Истина;
	ЭлементНомерЗаказа.Видимость = Ложь;
	
	ЭлементДатаЗаказа = Элементы.Добавить("ДатаЗаказаНаСайте", Тип("ПолеФормы"), ГруппаПараметрыЗаказа);
	ЭлементДатаЗаказа.ПутьКДанным = "ДатаНаСайте";
	ЭлементДатаЗаказа.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементДатаЗаказа.АвтоОтметкаНезаполненного = Истина;
	ЭлементДатаЗаказа.Видимость = Ложь;
	
	ЭлементПричинаОтменыЗаказовПоУмолчанию = Элементы.Добавить("ЭлементПричинаОтменыЗаказовПоУмолчанию", Тип("ПолеФормы"), ГруппаПараметрыЗаказа);
	ЭлементПричинаОтменыЗаказовПоУмолчанию.ПутьКДанным = "ПричинаОтменыЗаказовПоУмолчанию";
	ЭлементПричинаОтменыЗаказовПоУмолчанию.Вид = ВидПоляФормы.ПолеВвода;
	
	ГруппаСоответствиеСтатусов = Элементы.Добавить("ГруппаСоответствиеСтатусов", Тип("ГруппаФормы"), Элементы.ГруппаЗаказыОсновныеНастройки);
	ГруппаСоответствиеСтатусов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСоответствиеСтатусов.ОтображатьЗаголовок = Ложь;
	ГруппаСоответствиеСтатусов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
КонецПроцедуры

#КонецОбласти

#Область ПомощникПодключенияЮМИ

// Процедура, вызываемая из одноименного обработчика события формы "Помощник подключения ЮМИ" обработки "Обмен с сайтами".
//
// Параметры:
//  Форма - УправляемаяФорма - форма, из обработчика события которой происходит вызов процедуры.
// 
Процедура ПриСозданииНаСервереФормаПомощникПодключенияЮМИ(Форма) Экспорт
	
	// Устанавливается тип значения поля ВидЦены
	ВидыЦенТип = Новый ОписаниеТипов("СправочникСсылка.ВидыЦен");
	Форма.Элементы.ВидЦен.ОграничениеТипа.ПривестиЗначение(ВидыЦенТип);
	Форма.Элементы.ВидЦен.ВыбиратьТип = Ложь;
	Форма.Элементы.ВидЦен.Заголовок = НСтр("ru = 'Вид цены'");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВидыЦен.Ссылка КАК ВидыЦены
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	ВидыЦен.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.Выполнить();
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Форма.ВидЦен = Выборка.ВидыЦены;
	Иначе
		Форма.ВидЦен = Справочники.ВидыЦен.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти


#Область ВыгрузкаДанных

// Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре
// ПолучитьТекстЗапросаОбновлениеПакетаПредложений или быть особенностью прикладного решения.
//
// Параметры:
//  ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//  ПараметрыКомпоновки - ПараметрыСхемыКомпоновкиДанных - параметры, которые могли появиться в тексте запроса
//                                                      в процедуре ПолучитьТекстЗапросаОбновлениеПакетаПредложений.
//
Процедура УстановитьПараметрыЗапросаОбновлениеПакетаПредложений(ПрикладныеПараметры, ПараметрыКомпоновки)  Экспорт
	
	УстановитьПараметрыЗапросаПоЦенообразованию(ПараметрыКомпоновки);
	
КонецПроцедуры

// Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре
// ПолучитьТекстЗапросаПакетПредложений или быть особенностью прикладного решения.
// 
// Параметры:
//  ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//  ПараметрыСхемыКомпоновки - ПараметрыСхемыКомпоновки - параметры схемы компоновки текста запроса в процедуре
//                                                        ПолучитьТекстЗапросаПакетПредложений.
//
Процедура УстановитьПараметрыЗапросаПакетПредложений(ПрикладныеПараметры, ПараметрыСхемыКомпоновки) Экспорт
	
	УстановитьПараметрКомпоновки(ПараметрыСхемыКомпоновки, "ИспользоватьДополнительныеРеквизитыИСведения", 
								  ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения"));
	
	УстановитьПараметрыЗапросаПоЦенообразованию(ПараметрыСхемыКомпоновки);
	
КонецПроцедуры

// Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре 
// ПолучитьТекстыЗапросовКаталог или быть особенностью прикладного решения.
//
// Параметры:
//  ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//  ПараметрыКомпоновки - ПараметрСхемыКомпоновкиДанных - параметры схемы компоновки текста запроса в процедуре
//                                                        ПолучитьТекстыЗапросовКаталог.
//
Процедура УстановитьПараметрыЗапросаКаталог(ПрикладныеПараметры, ПараметрыКомпоновки) Экспорт
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "ИспользоватьДополнительныеРеквизитыИСведения", 
								  ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения"));
	
	УстановитьПараметрыЗапросаПоЦенообразованию(ПараметрыКомпоновки);
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "КлассифицироватьПоВидамНоменклатуры",
								  ПрикладныеПараметры.КлассифицироватьПоВидамНоменклатуры);
	
КонецПроцедуры

// В данной процедуре возможно изменить параметры обмена перед началом обмена
//
// Параметры:
//  ПараметрыОбмена  - Структура - текущие параметры обмена, имеет следующие свойства:
//    * УзелОбмена - ПланОбмена.ОбменССайтом - план обмена, для которого будет выполнен обмен.
//    * НастройкиПодключения - структура настроек для подключения к сайту, содержит следующие свойства:
//        * Пользователь - Строка - имя пользователя для подключения к сайту.
//        * АдресСайта - Строка - адрес сайта.
//        * Пароль - Строка - пароль для подключения.
//    * ВыгружатьИзменения - Булево - если Истина, то будут выгружаться только измененные объекты.
//    * ОтборГруппыКатегорииНоменклатуры  - ПеречислениеСсылка.ВидыОтборовНоменклатуры - режим отбора номенклатуры
//                                                                                       (по группам или категориям).
//    * РазмерПорции - Число - количество товаров, данные о которых будут выгружены на сайт в одной порции данных.
//    * КоличествоПовторов - Число - количество попыток выгрузки данных на сайт в случае сбоя в обмене.
//    * ВладелецКаталога - ОпределяемыйТип.Организация - организация, от имени которой будет публиковаться каталог товаров
//    * ОбменЗаказами - Булево - определяет, загружать ли с сайта заказы.
//    * ОбменТоварами - Булево - определяет, выгружать ли на сайт данные, связанные с товарами.
//    * ВыгружатьТовары - Булево - определяет, выгружать ли на сайт каталог товаров.
//    * ВыгружатьЦеныОстатки - Булево - определяет, выгружать ли на сайт данные по ценам.
//    * ВыгружатьОбновленияЦенИОстатков - Булево - определяет, выгружать ли на сайт информацию об изменении цен и остатков товаров.
//    * КаталогВыгрузки - Строка - каталог на диске, в который будут сохранены файлы обмена.
//    * ВыгружатьНаСайт - Булево - если Истина, то выгрузка будет производиться непосредственно на сайт, а не в каталог выгрузки.
//    * ВыгружатьКартинки - Булево - определяет, выполнять ли выгрузку изображений номенклатуры.
//    * РазрешенныеТипыКартинок - Массив - содержит допустимые расширения файлов картинок.
//    * НаименованиеНалога - Строка - наименование налога, применяемого к товару.
//    * ИспользоватьХарактеристики - Булево - определяет, используются ли характеристики.
//    * РежимЗапускаОбмена - Строка - строка, поясняющая был ли обмен запущен интерактивно
//                                    или через регл. задание.
//    * ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                        подсистемы в прикладное решение.
//    * ФайлЗагрузки - Строка - путь к файлу XML, из которого будут загружаться заказы.
//    * СтруктураИзменений - Структура - имеет следующие свойства:
//        * Заказы - Массив - массив ссылок на заказы, подлежащие выгрузке.
//        * Товары - Массив - массив ссылок на товары, подлежащие выгрузке.
//  УзелОбмена  - ПланОбмена.ОбменССайтом - план обмена, для которого будет выполнен обмен.
//
Процедура ИзменитьПараметрыОбмена(ПараметрыОбмена, УзелОбмена) Экспорт
	
	КлассифицироватьПоВидамНоменклатуры = Ложь;
	Если ПараметрыОбмена.ВидОтбораПоНоменклатуре = Перечисления.ВидыОтборовНоменклатуры.КатегорииНоменклатуры Тогда
		КлассифицироватьПоВидамНоменклатуры = Истина;
	КонецЕсли;
	
	ПараметрыОбмена.ПрикладныеПараметры.Вставить("КлассифицироватьПоВидамНоменклатуры", КлассифицироватьПоВидамНоменклатуры);
	
КонецПроцедуры

// Процедура записывает в БП информацию о номера и дате заказа на сайте.
//
// Параметры:
//  ТаблицаЗаказов - ТаблицаЗначений - информация о заказах, загруженных с сайта:
//    * Заказ - Ссылка - ссылка на документ Заказ покупателя;
//    * НомерЗаказа - Строка - номер заказа на сайте;
//    * ДатаЗаказа - Дата - дата заказа на сайте;
//  ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//
Процедура ЗаписатьДатуНомерЗаказовССайта(ТаблицаЗаказов, ПрикладныеПараметры) Экспорт
	
	Для Каждого ТекСтрока Из ТаблицаЗаказов Цикл
		
		НачатьТранзакцию();
		Попытка
			ЭлектронноеВзаимодействиеРТ.УстановитьУправляемуюБлокировкуПоСсылке(ТекСтрока.Заказ,
				РежимБлокировкиДанных.Исключительный);
				
			ЗаказОбъект = ТекСтрока.Заказ.ПолучитьОбъект();
			ЗаказОбъект.НомерЗаказаНаСайте = ТекСтрока.НомерЗаказа;
			ЗаказОбъект.ДатаЗаказаНаСайте  = ТекСтрока.ДатаЗаказа;
			ЗаказОбъект.ОбменДанными.Загрузка = Истина;
			ЗаказОбъект.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует текст запроса, который позволит получить таблицу значений, описанную 
// в макете "СхемаВыгрузкиОбновлениеПакетаПредложений" плана обмена "Обмен с сайтом".
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса.
//
Процедура ПолучитьТекстЗапросаОбновлениеПакетаПредложений(ТекстЗапроса) Экспорт
	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Склад.Магазин КАК Магазин,
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика,
	|	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток - ТоварыНаСкладахОстатки.РезервОстаток) КАК СвободныйОстаток
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОстатки.Склад.Магазин,
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Магазины.Ссылка КАК Магазин,
	|	Магазины.ПравилоЦенообразования КАК ПравилоЦенообразования
	|ПОМЕСТИТЬ ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	НЕ(Магазины.КонтролироватьАссортимент
	|				И &ИспользоватьАссортимент)
	|	И НЕ Магазины.ИспользоватьПрименениеЦен
	|	И НЕ Магазины.СкладУправляющейСистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаЦенообразования.Ссылка КАК ПравилоЦенообразования,
	|	ПравилаЦенообразования.ВидЦен,
	|	ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка) КАК ЦеноваяГруппа
	|ПОМЕСТИТЬ ТаблицаПравилЦенообразованияИВидовЦен
	|ИЗ
	|	Справочник.ПравилаЦенообразования КАК ПравилаЦенообразования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаЦенообразованияЦеновыеГруппы.Ссылка,
	|	ПравилаЦенообразованияЦеновыеГруппы.ВидЦен,
	|	ПравилаЦенообразованияЦеновыеГруппы.ЦеноваяГруппа
	|ИЗ
	|	Справочник.ПравилаЦенообразования.ЦеновыеГруппы КАК ПравилаЦенообразованияЦеновыеГруппы
	|ГДЕ
	|	ПравилаЦенообразованияЦеновыеГруппы.ЦеноваяГруппа <> ЗНАЧЕНИЕ(Справочник.ПравилаЦенообразования.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования.Магазин,
	|	ТаблицаПравилЦенообразованияИВидовЦен.ЦеноваяГруппа,
	|	ТаблицаПравилЦенообразованияИВидовЦен.ВидЦен
	|ПОМЕСТИТЬ ТаблицаМагазиновЦеныНоменклатуры
	|ИЗ
	|	ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования КАК ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПравилЦенообразованияИВидовЦен КАК ТаблицаПравилЦенообразованияИВидовЦен
	|		ПО ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования.ПравилоЦенообразования = ТаблицаПравилЦенообразованияИВидовЦен.ПравилоЦенообразования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Магазины.ФорматМагазина КАК ФорматМагазина,
	|	Магазины.Ссылка КАК Магазин
	|ПОМЕСТИТЬ ТаблицаМагазиновЦеныПоАссортименту
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	Магазины.КонтролироватьАссортимент
	|	И &ИспользоватьАссортимент
	|	И НЕ Магазины.ИспользоватьПрименениеЦен
	|	И НЕ Магазины.СкладУправляющейСистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Магазины.Магазин КАК Магазин,
	|	Ассортимент.ВидЦен КАК ВидЦен
	|ПОМЕСТИТЬ втАссортимент
	|ИЗ
	|	РегистрСведений.Ассортимент.СрезПоследних(
	|			КОНЕЦПЕРИОДА(&ПериодАссортимента, ДЕНЬ),
	|			ОбъектПланирования В
	|				(ВЫБРАТЬ
	|					Т.ФорматМагазина
	|				ИЗ
	|					ТаблицаМагазиновЦеныПоАссортименту КАК Т)) КАК Ассортимент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМагазиновЦеныПоАссортименту КАК Магазины
	|		ПО (Магазины.ФорматМагазина = Ассортимент.ОбъектПланирования)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЦен,
	|	Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Магазины.Ссылка КАК Магазин
	|ПОМЕСТИТЬ ТаблицаМагазиновДействующиеЦены
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	Магазины.ИспользоватьПрименениеЦен
	|	И НЕ Магазины.СкладУправляющейСистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Магазины.Ссылка КАК Магазин,
	|	Магазины.ВидМинимальныхЦенПродажи КАК ВидМинимальныхЦенПродажи
	|ПОМЕСТИТЬ ТаблицаМагазиновСМинимальнымиЦенами
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	НЕ Магазины.ВидМинимальныхЦенПродажи = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|	И НЕ Магазины.СкладУправляющейСистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМагазиновЦеныНоменклатуры.Магазин,
	|	ТаблицаМагазиновЦеныНоменклатуры.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ТаблицаМагазиновЦеныНоменклатуры.ВидЦен
	|ПОМЕСТИТЬ ТаблицаМагазиновПоВидамЦен
	|ИЗ
	|	ТаблицаМагазиновЦеныНоменклатуры КАК ТаблицаМагазиновЦеныНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втАссортимент.Магазин,
	|	ЗНАЧЕНИЕ(Справочник.ПравилаЦенообразования.ПустаяСсылка),
	|	втАссортимент.ВидЦен
	|ИЗ
	|	втАссортимент КАК втАссортимент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидЦены,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Упаковка
	|ПОМЕСТИТЬ ТаблицаЦенПоВидамЦен
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
	|		ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|		ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|		ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|		ЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка
	|	ИЗ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				ВидЦены В
	|					(ВЫБРАТЬ
	|						ТаблицаМагазиновПоВидамЦен.ВидЦен КАК ВидЦены
	|					ИЗ
	|						ТаблицаМагазиновПоВидамЦен КАК ТаблицаМагазиновПоВидамЦен)) КАК ЦеныНоменклатурыСрезПоследних) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Магазин,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.ВидЦены
	|ПОМЕСТИТЬ ЦеныБезПриведенияКУпаковке
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаЦенПоВидамЦен.Цена КАК Цена,
	|		ТаблицаМагазиновПоВидамЦен.Магазин КАК Магазин,
	|		ТаблицаЦенПоВидамЦен.Упаковка КАК Упаковка,
	|		ТаблицаЦенПоВидамЦен.Номенклатура КАК Номенклатура,
	|		ТаблицаЦенПоВидамЦен.Характеристика КАК Характеристика,
	|		ТаблицаЦенПоВидамЦен.ВидЦены КАК ВидЦены,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ЕСТЬNULL(ТаблицаМагазиновПоВидамЦен.ЦеноваяГруппа, ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	|					ТОГДА 1
	|				ИНАЧЕ 2
	|			КОНЕЦ) КАК ПолеЦеновойГруппы
	|	ИЗ
	|		ТаблицаЦенПоВидамЦен КАК ТаблицаЦенПоВидамЦен
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМагазиновПоВидамЦен КАК ТаблицаМагазиновПоВидамЦен
	|			ПО ТаблицаЦенПоВидамЦен.ВидЦены = ТаблицаМагазиновПоВидамЦен.ВидЦен
	|				И (ТаблицаЦенПоВидамЦен.ЦеноваяГруппа = ТаблицаМагазиновПоВидамЦен.ЦеноваяГруппа
	|					ИЛИ ТаблицаМагазиновПоВидамЦен.ЦеноваяГруппа = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаЦенПоВидамЦен.ВидЦены,
	|		ТаблицаЦенПоВидамЦен.Характеристика,
	|		ТаблицаЦенПоВидамЦен.Номенклатура,
	|		ТаблицаМагазиновПоВидамЦен.Магазин,
	|		ТаблицаЦенПоВидамЦен.Упаковка,
	|		ТаблицаЦенПоВидамЦен.Цена) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Магазин,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.ВидЦен
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДействующиеЦеныНоменклатурыСрезПоследних.ОбъектЦенообразования КАК Магазин,
	|		ДействующиеЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|		ДействующиеЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка,
	|		ДействующиеЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|		ДействующиеЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|		ДействующиеЦеныНоменклатурыСрезПоследних.ОбъектЦенообразования.ПравилоЦенообразования.ВидЦен КАК ВидЦен
	|	ИЗ
	|		РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				ОбъектЦенообразования В
	|					(ВЫБРАТЬ
	|						ТаблицаМагазинов.Магазин
	|					ИЗ
	|						ТаблицаМагазиновДействующиеЦены КАК ТаблицаМагазинов)) КАК ДействующиеЦеныНоменклатурыСрезПоследних) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныБезПриведенияКУпаковке.Магазин,
	|	ЦеныБезПриведенияКУпаковке.Цена / ВЫБОР
	|		КОГДА ЦеныБезПриведенияКУпаковке.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА ЦеныБезПриведенияКУпаковке.Упаковка.Коэффициент = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЦеныБезПриведенияКУпаковке.Упаковка.Коэффициент
	|	КОНЕЦ КАК Цена,
	|	ЦеныБезПриведенияКУпаковке.Номенклатура,
	|	ЦеныБезПриведенияКУпаковке.Характеристика,
	|	ЦеныБезПриведенияКУпаковке.ВидЦены
	|ПОМЕСТИТЬ ЦеныБезПриведенияКМинимальнымВидамЦен
	|ИЗ
	|	ЦеныБезПриведенияКУпаковке КАК ЦеныБезПриведенияКУпаковке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Цена / ВЫБОР
	|		КОГДА ВложенныйЗапрос.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА ВложенныйЗапрос.Упаковка.Коэффициент = 0
	|			ТОГДА 1
	|		ИНАЧЕ ВложенныйЗапрос.Упаковка.Коэффициент
	|	КОНЕЦ КАК Цена,
	|	ТаблицаМагазиновСМинимальнымиЦенами.Магазин,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.ВидЦены
	|ПОМЕСТИТЬ ТаблицаЦенПоМинимальнымВидамЦен
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
	|		ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|		ЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка,
	|		ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|		ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика
	|	ИЗ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				ВидЦены В
	|					(ВЫБРАТЬ
	|						ТаблицаМагазиновСМинимальнымиЦенами.ВидМинимальныхЦенПродажи КАК ВидЦены
	|					ИЗ
	|						ТаблицаМагазиновСМинимальнымиЦенами КАК ТаблицаМагазиновСМинимальнымиЦенами)) КАК ЦеныНоменклатурыСрезПоследних) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМагазиновСМинимальнымиЦенами КАК ТаблицаМагазиновСМинимальнымиЦенами
	|		ПО ВложенныйЗапрос.ВидЦены = ТаблицаМагазиновСМинимальнымиЦенами.ВидМинимальныхЦенПродажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныБезПриведенияКМинимальнымВидамЦен.Магазин,
	|	ВЫБОР
	|		КОГДА ТаблицаЦенПоМинимальнымВидамЦен.Цена ЕСТЬ NULL 
	|			ТОГДА ЦеныБезПриведенияКМинимальнымВидамЦен.Цена
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(ТаблицаЦенПоМинимальнымВидамЦен.Цена, 0) > ЦеныБезПриведенияКМинимальнымВидамЦен.Цена
	|					ТОГДА ЕСТЬNULL(ТаблицаЦенПоМинимальнымВидамЦен.Цена, 0)
	|				ИНАЧЕ ЦеныБезПриведенияКМинимальнымВидамЦен.Цена
	|			КОНЕЦ
	|	КОНЕЦ КАК Цена,
	|	ЦеныБезПриведенияКМинимальнымВидамЦен.Номенклатура,
	|	ЦеныБезПриведенияКМинимальнымВидамЦен.Характеристика,
	|	ЦеныБезПриведенияКМинимальнымВидамЦен.ВидЦены
	|ПОМЕСТИТЬ ТаблицаЦенПоМагазинам
	|ИЗ
	|	ЦеныБезПриведенияКМинимальнымВидамЦен КАК ЦеныБезПриведенияКМинимальнымВидамЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦенПоМинимальнымВидамЦен КАК ТаблицаЦенПоМинимальнымВидамЦен
	|		ПО ЦеныБезПриведенияКМинимальнымВидамЦен.Магазин = ТаблицаЦенПоМинимальнымВидамЦен.Магазин
	|		И ЦеныБезПриведенияКМинимальнымВидамЦен.Номенклатура = ТаблицаЦенПоМинимальнымВидамЦен.Номенклатура
	|		И ЦеныБезПриведенияКМинимальнымВидамЦен.Характеристика = ТаблицаЦенПоМинимальнымВидамЦен.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЦенПоМагазинам.Номенклатура,
	|	ТаблицаЦенПоМагазинам.Характеристика,
	|	ТаблицаЦенПоМагазинам.ВидЦены КАК ТипЦены,
	|	ТаблицаЦенПоМагазинам.Цена КАК ЦенаЗаЕдиницу,
	|	ТаблицаЦенПоМагазинам.Магазин КАК Склад,
	|	0 КАК ОстатокНаСкладе
	|ПОМЕСТИТЬ ТаблицаОстатковИЦен
	|ИЗ
	|	ТаблицаЦенПоМагазинам КАК ТаблицаЦенПоМагазинам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаОстатков.Номенклатура,
	|	ТаблицаОстатков.Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка),
	|	0,
	|	ТаблицаОстатков.Магазин,
	|	ТаблицаОстатков.СвободныйОстаток
	|ИЗ
	|	ТаблицаОстатков КАК ТаблицаОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатковИЦен.Номенклатура,
	|	ТаблицаОстатковИЦен.Номенклатура.ВидНоменклатуры КАК НоменклатураВидНоменклатуры,
	|	ТаблицаОстатковИЦен.Характеристика,
	|	ТаблицаОстатковИЦен.ТипЦены,
	|	ТаблицаОстатковИЦен.ЦенаЗаЕдиницу,
	|	ТаблицаОстатковИЦен.Склад,
	|	ТаблицаОстатковИЦен.ОстатокНаСкладе,
	|	""KZT"" КАК ТипЦеныВалютаНаименование,
	|	""KZT"" КАК ТипЦеныВалютаКод,
	|	ТаблицаОстатковИЦен.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	1 КАК ТипЦеныЕдиницаЦеныКоэффициент
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	НоменклатураВидНоменклатуры.*,
	|	Характеристика.*,
	|	ТипЦены.*,
	|	ЦенаЗаЕдиницу,
	|	Склад.*,
	|	ОстатокНаСкладе,
	|	ТипЦеныВалютаНаименование,
	|	ТипЦеныВалютаКод,
	|	ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	ТипЦеныЕдиницаЦеныКоэффициент}
	|ИЗ
	|	ТаблицаОстатковИЦен КАК ТаблицаОстатковИЦен
	|{ГДЕ
	|	ТаблицаОстатковИЦен.Номенклатура.*,
	|	ТаблицаОстатковИЦен.ТипЦены.* КАК ТипЦены,
	|	ТаблицаОстатковИЦен.Склад.*,
	|	ТаблицаОстатковИЦен.ОстатокНаСкладе}";
	
КонецПроцедуры

// Формирует тексты запросов, которые позволяют получить таблицу значений,
// описанные в макете "СхемаВыгрузкиПакетПредложений" плана обмена "Обмен с сайтом".
// Параметры:
//  ТекстыЗапросов - структура - тексты запросов;
//    * Цены - поле, в которое нужно поместить текст запроса для заполнения источника данных "Цены"
//					макета "СхемаВыгрузкиПакетПредложений" плана обмена "ОбменССайтом";
//    * Остатки - поле, в которое нужно поместить текст запроса для заполнения источника данных "Остатки"
//					макета "СхемаВыгрузкиПакетПредложений" плана обмена "ОбменССайтом".
//
Процедура ПолучитьТекстыЗапросовПакетаПредложений(ТекстыЗапросов) Экспорт
	
	ТекстыЗапросов.Цены =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ИспользоватьХарактеристики,
	|	ВЫБОР
	|		КОГДА Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
	|			ТОГДА Номенклатура.Ссылка
	|		ИНАЧЕ Номенклатура.ВидНоменклатуры
	|	КОНЕЦ КАК ВладелецХарактеристик
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Ссылка КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаНоменклатураХарактеристикаБезШтрихКодов
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|ГДЕ
	|	НЕ ТаблицаНоменклатуры.ИспользоватьХарактеристики
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка,
	|	ХарактеристикиНоменклатуры.Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаНоменклатуры.Ссылка КАК Ссылка,
	|		ТаблицаНоменклатуры.ВладелецХарактеристик КАК ВладелецХарактеристик
	|	ИЗ
	|		ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|	ГДЕ
	|		ТаблицаНоменклатуры.ИспользоватьХарактеристики) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО ВложенныйЗапрос.ВладелецХарактеристик = ХарактеристикиНоменклатуры.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатураХарактеристика.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатураХарактеристика.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатураХарактеристика.Номенклатура.Наименование КАК НоменклатураНаименование,
	|	ТаблицаНоменклатураХарактеристика.Номенклатура.Артикул КАК НоменклатураАртикул,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &ЕдиницаПоУмолчанию
	|		ИНАЧЕ ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &КодЕдиницыПоУмолчанию
	|		ИНАЧЕ ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ЕдиницаИзмеренияКод,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &НаименованиеПолноеЕдиницыПоУмолчанию
	|		ИНАЧЕ ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное
	|	КОНЕЦ КАК ЕдиницаИзмеренияНаименованиеПолное,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &НаименованиеЕдиницыПоУмолчанию
	|		ИНАЧЕ ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ КАК ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &МеждународноеСокращениеЕдиницыПоУмолчанию
	|		ИНАЧЕ ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение
	|	КОНЕЦ КАК ЕдиницаИзмеренияМеждународноеСокращение,
	|	1 КАК ЕдиницаИзмеренияПересчетКоэф,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &КодЕдиницыПоУмолчанию
	|		ИНАЧЕ ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ЕдиницаИзмеренияПересчетЕдиница,
	|	ТаблицаНоменклатураХарактеристика.Номенклатура.ПометкаУдаления КАК НоменклатураПометкаУдаления
	|ПОМЕСТИТЬ ТаблицаКаталога
	|ИЗ
	|	ТаблицаНоменклатураХарактеристикаБезШтрихКодов КАК ТаблицаНоменклатураХарактеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Магазины.Ссылка КАК Магазин,
	|	Магазины.ПравилоЦенообразования КАК ПравилоЦенообразования
	|ПОМЕСТИТЬ ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	НЕ(Магазины.КонтролироватьАссортимент
	|				И &ИспользоватьАссортимент)
	|	И НЕ Магазины.ИспользоватьПрименениеЦен
	|	И НЕ Магазины.СкладУправляющейСистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПравилаЦенообразования.Ссылка КАК ПравилоЦенообразования,
	|	ПравилаЦенообразования.ВидЦен КАК ВидЦен,
	|	ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка) КАК ЦеноваяГруппа
	|ПОМЕСТИТЬ ТаблицаПравилЦенообразованияИВидовЦен
	|ИЗ
	|	Справочник.ПравилаЦенообразования КАК ПравилаЦенообразования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаЦенообразованияЦеновыеГруппы.Ссылка,
	|	ПравилаЦенообразованияЦеновыеГруппы.ВидЦен,
	|	ПравилаЦенообразованияЦеновыеГруппы.ЦеноваяГруппа
	|ИЗ
	|	Справочник.ПравилаЦенообразования.ЦеновыеГруппы КАК ПравилаЦенообразованияЦеновыеГруппы
	|ГДЕ
	|	ПравилаЦенообразованияЦеновыеГруппы.ЦеноваяГруппа <> ЗНАЧЕНИЕ(Справочник.ПравилаЦенообразования.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаЦенообразованияДополнительныеВидыЦен.Ссылка,
	|	ПравилаЦенообразованияДополнительныеВидыЦен.ВидЦен,
	|	ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	|ИЗ
	|	Справочник.ПравилаЦенообразования.ДополнительныеВидыЦен КАК ПравилаЦенообразованияДополнительныеВидыЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования.Магазин КАК Магазин,
	|	ТаблицаПравилЦенообразованияИВидовЦен.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ТаблицаПравилЦенообразованияИВидовЦен.ВидЦен КАК ВидЦен
	|ПОМЕСТИТЬ ТаблицаМагазиновЦеныНоменклатуры
	|ИЗ
	|	ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования КАК ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПравилЦенообразованияИВидовЦен КАК ТаблицаПравилЦенообразованияИВидовЦен
	|		ПО ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования.ПравилоЦенообразования = ТаблицаПравилЦенообразованияИВидовЦен.ПравилоЦенообразования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Магазины.ФорматМагазина КАК ФорматМагазина,
	|	Магазины.Ссылка КАК Магазин
	|ПОМЕСТИТЬ ТаблицаМагазиновЦеныПоАссортименту
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	Магазины.КонтролироватьАссортимент
	|	И &ИспользоватьАссортимент
	|	И НЕ Магазины.ИспользоватьПрименениеЦен
	|	И НЕ Магазины.СкладУправляющейСистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Магазины.Магазин КАК Магазин,
	|	Ассортимент.ВидЦен КАК ВидЦен
	|ПОМЕСТИТЬ втАссортимент
	|ИЗ
	|	РегистрСведений.Ассортимент.СрезПоследних(
	|			КОНЕЦПЕРИОДА(&ПериодАссортимента, ДЕНЬ),
	|			ОбъектПланирования В
	|				(ВЫБРАТЬ
	|					Т.ФорматМагазина
	|				ИЗ
	|					ТаблицаМагазиновЦеныПоАссортименту КАК Т)) КАК Ассортимент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМагазиновЦеныПоАссортименту КАК Магазины
	|		ПО (Магазины.ФорматМагазина = Ассортимент.ОбъектПланирования)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЦен,
	|	Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Магазины.Ссылка КАК Магазин
	|ПОМЕСТИТЬ ТаблицаМагазиновДействующиеЦены
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	Магазины.ИспользоватьПрименениеЦен
	|	И НЕ Магазины.СкладУправляющейСистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Магазины.Ссылка КАК Магазин,
	|	Магазины.ВидМинимальныхЦенПродажи КАК ВидМинимальныхЦенПродажи
	|ПОМЕСТИТЬ ТаблицаМагазиновСМинимальнымиЦенами
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	НЕ Магазины.ВидМинимальныхЦенПродажи = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|	И НЕ Магазины.СкладУправляющейСистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаМагазиновЦеныНоменклатуры.Магазин КАК Магазин,
	|	ТаблицаМагазиновЦеныНоменклатуры.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ТаблицаМагазиновЦеныНоменклатуры.ВидЦен КАК ВидЦен
	|ПОМЕСТИТЬ ТаблицаМагазиновПоВидамЦен
	|ИЗ
	|	ТаблицаМагазиновЦеныНоменклатуры КАК ТаблицаМагазиновЦеныНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ВидЦены КАК ВидЦены,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.Цена КАК Цена,
	|	ВложенныйЗапрос.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ ТаблицаЦенПоВидамЦен
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
	|		ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|		ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|		ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|		ЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка
	|	ИЗ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				ВидЦены В
	|					(ВЫБРАТЬ
	|						ТаблицаМагазиновПоВидамЦен.ВидЦен КАК ВидЦены
	|					ИЗ
	|						ТаблицаМагазиновПоВидамЦен КАК ТаблицаМагазиновПоВидамЦен
	|				
	|					ОБЪЕДИНИТЬ
	|				
	|					ВЫБРАТЬ
	|						втАссортимент.ВидЦен
	|					ИЗ
	|						втАссортимент КАК втАссортимент) {(Номенклатура = &Номенклатура
	|				    И ВидЦены = &ТипЦены) КАК ТипЦен}) КАК ЦеныНоменклатурыСрезПоследних) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Цена КАК Цена,
	|	ВложенныйЗапрос.Магазин КАК Магазин,
	|	ВложенныйЗапрос.Упаковка КАК Упаковка,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.ВидЦены КАК ВидЦены
	|ПОМЕСТИТЬ ЦеныБезПриведенияКУпаковке
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаЦенПоВидамЦен.Цена КАК Цена,
	|		ТаблицаМагазиновПоВидамЦен.Магазин КАК Магазин,
	|		ТаблицаЦенПоВидамЦен.Упаковка КАК Упаковка,
	|		ТаблицаЦенПоВидамЦен.Номенклатура КАК Номенклатура,
	|		ТаблицаЦенПоВидамЦен.Характеристика КАК Характеристика,
	|		ТаблицаЦенПоВидамЦен.ВидЦены КАК ВидЦены,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ЕСТЬNULL(ТаблицаМагазиновПоВидамЦен.ЦеноваяГруппа, ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	|					ТОГДА 1
	|				ИНАЧЕ 2
	|			КОНЕЦ) КАК ПолеЦеновойГруппы
	|	ИЗ
	|		ТаблицаЦенПоВидамЦен КАК ТаблицаЦенПоВидамЦен
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМагазиновПоВидамЦен КАК ТаблицаМагазиновПоВидамЦен
	|			ПО ТаблицаЦенПоВидамЦен.ВидЦены = ТаблицаМагазиновПоВидамЦен.ВидЦен
	|				И (ТаблицаЦенПоВидамЦен.ЦеноваяГруппа = ТаблицаМагазиновПоВидамЦен.ЦеноваяГруппа
	|					ИЛИ ТаблицаМагазиновПоВидамЦен.ЦеноваяГруппа = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаЦенПоВидамЦен.ВидЦены,
	|		ТаблицаЦенПоВидамЦен.Характеристика,
	|		ТаблицаЦенПоВидамЦен.Номенклатура,
	|		ТаблицаМагазиновПоВидамЦен.Магазин,
	|		ТаблицаЦенПоВидамЦен.Упаковка,
	|		ТаблицаЦенПоВидамЦен.Цена) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Магазин,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.ВидЦены
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаЦенПоВидамЦен.Цена КАК Цена,
	|		втАссортимент.Магазин КАК Магазин,
	|		ТаблицаЦенПоВидамЦен.Упаковка КАК Упаковка,
	|		ТаблицаЦенПоВидамЦен.Номенклатура КАК Номенклатура,
	|		ТаблицаЦенПоВидамЦен.Характеристика КАК Характеристика,
	|		ТаблицаЦенПоВидамЦен.ВидЦены КАК ВидЦены
	|	ИЗ
	|		ТаблицаЦенПоВидамЦен КАК ТаблицаЦенПоВидамЦен
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втАссортимент КАК втАссортимент
	|			ПО ТаблицаЦенПоВидамЦен.ВидЦены = втАссортимент.ВидЦен
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаЦенПоВидамЦен.ВидЦены,
	|		ТаблицаЦенПоВидамЦен.Характеристика,
	|		ТаблицаЦенПоВидамЦен.Номенклатура,
	|		втАссортимент.Магазин,
	|		ТаблицаЦенПоВидамЦен.Упаковка,
	|		ТаблицаЦенПоВидамЦен.Цена) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Магазин,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.ВидЦен
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДействующиеЦеныНоменклатурыСрезПоследних.ОбъектЦенообразования КАК Магазин,
	|		ДействующиеЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|		ДействующиеЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка,
	|		ДействующиеЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|		ДействующиеЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|		ДействующиеЦеныНоменклатурыСрезПоследних.ОбъектЦенообразования.ПравилоЦенообразования.ВидЦен КАК ВидЦен
	|	ИЗ
	|		РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				ОбъектЦенообразования В
	|					(ВЫБРАТЬ
	|						ТаблицаМагазинов.Магазин
	|					ИЗ
	|						ТаблицаМагазиновДействующиеЦены КАК ТаблицаМагазинов) {(Номенклатура = &Номенклатура
	|				    И ОбъектЦенообразования.ПравилоЦенообразования.ВидЦен = &ТипЦены) КАК ТипЦен}) КАК ДействующиеЦеныНоменклатурыСрезПоследних) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныБезПриведенияКУпаковке.Магазин КАК Магазин,
	|	ЦеныБезПриведенияКУпаковке.Цена / ВЫБОР
	|		КОГДА ЦеныБезПриведенияКУпаковке.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА ЦеныБезПриведенияКУпаковке.Упаковка.Коэффициент = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЦеныБезПриведенияКУпаковке.Упаковка.Коэффициент
	|	КОНЕЦ КАК Цена,
	|	ЦеныБезПриведенияКУпаковке.Номенклатура КАК Номенклатура,
	|	ЦеныБезПриведенияКУпаковке.Характеристика КАК Характеристика,
	|	ЦеныБезПриведенияКУпаковке.ВидЦены КАК ВидЦены
	|ПОМЕСТИТЬ ЦеныБезПриведенияКМинимальнымВидамЦен
	|ИЗ
	|	ЦеныБезПриведенияКУпаковке КАК ЦеныБезПриведенияКУпаковке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Цена / ВЫБОР
	|		КОГДА ВложенныйЗапрос.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА ВложенныйЗапрос.Упаковка.Коэффициент = 0
	|			ТОГДА 1
	|		ИНАЧЕ ВложенныйЗапрос.Упаковка.Коэффициент
	|	КОНЕЦ КАК Цена,
	|	ТаблицаМагазиновСМинимальнымиЦенами.Магазин КАК Магазин,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.ВидЦены КАК ВидЦены
	|ПОМЕСТИТЬ ТаблицаЦенПоМинимальнымВидамЦен
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
	|		ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|		ЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка,
	|		ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|		ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика
	|	ИЗ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				ВидЦены В
	|					(ВЫБРАТЬ
	|						ТаблицаМагазиновСМинимальнымиЦенами.ВидМинимальныхЦенПродажи КАК ВидЦены
	|					ИЗ
	|						ТаблицаМагазиновСМинимальнымиЦенами КАК ТаблицаМагазиновСМинимальнымиЦенами) {(Номенклатура).* КАК Номенклатура}) КАК ЦеныНоменклатурыСрезПоследних) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМагазиновСМинимальнымиЦенами КАК ТаблицаМагазиновСМинимальнымиЦенами
	|		ПО ВложенныйЗапрос.ВидЦены = ТаблицаМагазиновСМинимальнымиЦенами.ВидМинимальныхЦенПродажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныБезПриведенияКМинимальнымВидамЦен.Магазин КАК Магазин,
	|	ВЫБОР
	|		КОГДА ТаблицаЦенПоМинимальнымВидамЦен.Цена ЕСТЬ NULL
	|			ТОГДА ЦеныБезПриведенияКМинимальнымВидамЦен.Цена
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(ТаблицаЦенПоМинимальнымВидамЦен.Цена, 0) > ЦеныБезПриведенияКМинимальнымВидамЦен.Цена
	|					ТОГДА ЕСТЬNULL(ТаблицаЦенПоМинимальнымВидамЦен.Цена, 0)
	|				ИНАЧЕ ЦеныБезПриведенияКМинимальнымВидамЦен.Цена
	|			КОНЕЦ
	|	КОНЕЦ КАК Цена,
	|	ЦеныБезПриведенияКМинимальнымВидамЦен.Номенклатура КАК Номенклатура,
	|	ЦеныБезПриведенияКМинимальнымВидамЦен.Характеристика КАК Характеристика,
	|	ЦеныБезПриведенияКМинимальнымВидамЦен.ВидЦены КАК ВидЦены
	|ПОМЕСТИТЬ ТаблицаЦенПоМагазинам
	|ИЗ
	|	ЦеныБезПриведенияКМинимальнымВидамЦен КАК ЦеныБезПриведенияКМинимальнымВидамЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦенПоМинимальнымВидамЦен КАК ТаблицаЦенПоМинимальнымВидамЦен
	|		ПО ЦеныБезПриведенияКМинимальнымВидамЦен.Магазин = ТаблицаЦенПоМинимальнымВидамЦен.Магазин
	|			И ЦеныБезПриведенияКМинимальнымВидамЦен.Номенклатура = ТаблицаЦенПоМинимальнымВидамЦен.Номенклатура
	|			И ЦеныБезПриведенияКМинимальнымВидамЦен.Характеристика = ТаблицаЦенПоМинимальнымВидамЦен.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаКаталога.Номенклатура КАК Номенклатура,
	|	ТаблицаКаталога.Характеристика КАК Характеристика,
	|	ТаблицаКаталога.НоменклатураНаименование КАК НоменклатураНаименование,
	|	ТаблицаКаталога.НоменклатураАртикул КАК НоменклатураАртикул,
	|	ТаблицаКаталога.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаКаталога.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	ТаблицаКаталога.ЕдиницаИзмеренияНаименованиеПолное КАК ЕдиницаИзмеренияНаименованиеПолное,
	|	ТаблицаКаталога.ТипЦеныЕдиницаЦеныНаименованиеСокращенное КАК ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	ТаблицаКаталога.ЕдиницаИзмеренияМеждународноеСокращение КАК ЕдиницаИзмеренияМеждународноеСокращение,
	|	ТаблицаКаталога.ЕдиницаИзмеренияПересчетКоэф КАК ЕдиницаИзмеренияПересчетКоэф,
	|	ТаблицаКаталога.ЕдиницаИзмеренияПересчетЕдиница КАК ЕдиницаИзмеренияПересчетЕдиница,
	|	ТаблицаКаталога.НоменклатураПометкаУдаления КАК НоменклатураПометкаУдаления,
	|	ЕСТЬNULL(ТаблицаЦенПоМагазинам.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ТипЦены,
	|	""Рубли"" КАК ТипЦеныВалюта,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаЦенПоМагазинам.ВидЦены ЕСТЬ NULL
	|			ТОГДА ТаблицаЦенПоМагазинам.ВидЦены.ЦенаВключаетНДС
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ТипЦеныЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаЦенПоМагазинам.ВидЦены ЕСТЬ NULL
	|			ТОГДА ТаблицаЦенПоМагазинам.ВидЦены.Наименование
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ТипЦеныНаименование,
	|	""KZT"" КАК ТипЦеныВалютаКод,
	|	1 КАК ТипЦеныЕдиницаЦеныКоэффициент,
	|	ЕСТЬNULL(ТаблицаЦенПоМагазинам.Цена, 0) КАК ЦенаЗаЕдиницу
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	Характеристика.*,
	|	НоменклатураНаименование,
	|	НоменклатураАртикул,
	|	ЕдиницаИзмерения.*,
	|	ЕдиницаИзмеренияКод,
	|	ЕдиницаИзмеренияНаименованиеПолное,
	|	ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	ЕдиницаИзмеренияМеждународноеСокращение,
	|	ЕдиницаИзмеренияПересчетКоэф,
	|	ЕдиницаИзмеренияПересчетЕдиница,
	|	НоменклатураПометкаУдаления,
	|	ТипЦены.*,
	|	ТипЦеныВалюта,
	|	ТипЦеныЦенаВключаетНДС,
	|	ТипЦеныНаименование,
	|	ТипЦеныВалютаКод,
	|	ТипЦеныЕдиницаЦеныКоэффициент,
	|	ЦенаЗаЕдиницу}
	|ИЗ
	|	ТаблицаКаталога КАК ТаблицаКаталога
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЦенПоМагазинам КАК ТаблицаЦенПоМагазинам
	|		ПО ТаблицаКаталога.Номенклатура = ТаблицаЦенПоМагазинам.Номенклатура
	|			И ТаблицаКаталога.Характеристика = ТаблицаЦенПоМагазинам.Характеристика
	|{ГДЕ
	|	ТаблицаКаталога.Номенклатура.*,
	|	ТаблицаЦенПоМагазинам.ВидЦены.* КАК ТипЦены}";
	
	ТекстыЗапросов.Остатки =
	"ВЫБРАТЬ
	|	ТоварыНаСкладах.Склад.Магазин КАК Склад,
	|	ТоварыНаСкладах.Номенклатура,
	|	ТоварыНаСкладах.Характеристика
	|ПОМЕСТИТЬ ТоварыНаСкладах
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладах.Склад,
	|	ТоварыНаСкладах.Номенклатура,
	|	ТоварыНаСкладах.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ТоварыНаСкладахОстатки.КоличествоОстаток ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ТоварыНаСкладахОстатки.КоличествоОстаток - ТоварыНаСкладахОстатки.РезервОстаток <= 0
	|						ТОГДА 0
	|					ИНАЧЕ ТоварыНаСкладахОстатки.КоличествоОстаток - ТоварыНаСкладахОстатки.РезервОстаток
	|				КОНЕЦ
	|		КОНЕЦ) КАК СвободныйОстаток,
	|	ТоварыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладах.Характеристика КАК Характеристика,
	|	ТоварыНаСкладах.Склад КАК Магазин
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	ТоварыНаСкладах КАК ТоварыНаСкладах
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, {(Номенклатура).*, (Склад.Магазин) КАК Склад}) КАК ТоварыНаСкладахОстатки
	|		ПО ТоварыНаСкладах.Склад = ТоварыНаСкладахОстатки.Склад.Магазин
	|			И ТоварыНаСкладах.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	|			И ТоварыНаСкладах.Характеристика = ТоварыНаСкладахОстатки.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладах.Номенклатура,
	|	ТоварыНаСкладах.Характеристика,
	|	ТоварыНаСкладах.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатков.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатков.Характеристика КАК Характеристика,
	|	ТаблицаОстатков.Магазин КАК Склад,
	|	ТаблицаОстатков.СвободныйОстаток КАК ОстатокНаСкладе,
	|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаОстатков.Магазин.Наименование КАК СкладНаименование
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	Характеристика.*,
	|	Склад.*,
	|	ОстатокНаСкладе,
	|	ЕдиницаИзмерения.*,
	|	СкладНаименование}
	|ИЗ
	|	ТаблицаОстатков КАК ТаблицаОстатков
	//|ГДЕ
	//|	ТаблицаОстатков.СвободныйОстаток > 0
	|{ГДЕ
	|	ТаблицаОстатков.Номенклатура.*,
	|	ТаблицаОстатков.Магазин.* КАК Склад,
	|	ТаблицаОстатков.СвободныйОстаток КАК ОстатокНаСкладе}";
	
КонецПроцедуры

// Формирует тексты запросов, которые позволят получить таблицы значений, описанные в макете "СхемаВыгрузкиКаталог"
// плана обмена "Обмен с сайтом".
//
// Параметры:
//	ТекстыЗапросов - Структура - тексты запросов:
//    * Номенклатура - поле, в которое нужно поместить текст запроса для заполнения источника данных "Номенклатура"
//                     макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом".
//    * Свойства - поле, в которое нужно поместить текст запроса для заполнения источника данных "Свойства"
//                 макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом".
//    * Файлы - поле, в которое нужно поместить текст запроса для заполнения источника данных "Файлы"
//              макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом".
//    * Характеристики - поле, необязательное поле, поле в которое нужно поместить текст запроса для заполнения источника данных "Характеристики"
//                       макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом".
//
Процедура ПолучитьТекстыЗапросовКаталог(ТекстыЗапросов) Экспорт
	
	ТекстыЗапросов.Номенклатура =
	"ВЫБРАТЬ
	|	Штрихкоды.Владелец КАК Владелец,
	|	МАКСИМУМ(Штрихкоды.Штрихкод) КАК Штрихкод
	|ПОМЕСТИТЬ ШтрихкодыНоменклатуры
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Штрихкоды.Владелец) = ТИП(Справочник.Номенклатура)
	|	И Штрихкоды.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|	И Штрихкоды.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Штрихкоды.Владелец
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ПометкаУдаления КАК НоменклатураПометкаУдаления,
	|	ВЫБОР
	|		КОГДА &КлассифицироватьПоВидамНоменклатуры
	|			ТОГДА Номенклатура.ВидНоменклатуры
	|		ИНАЧЕ Номенклатура.Родитель
	|	КОНЕЦ КАК НоменклатураРодитель,
	|	Номенклатура.ЭтоГруппа КАК НоменклатураЭтоГруппа,
	|	Номенклатура.Код КАК НоменклатураКод,
	|	Номенклатура.Наименование КАК НоменклатураНаименование,
	|	Номенклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
	|	Номенклатура.Артикул КАК НоменклатураАртикул,
	|	ВЫБОР
	|		КОГДА Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|			ТОГДА 20
	|		КОГДА Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
	|			ТОГДА 20
	|		КОГДА Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|			ТОГДА 18
	|		КОГДА Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|			ТОГДА 18
	|		КОГДА Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|			ТОГДА 10
	|		КОГДА Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|			ТОГДА 10
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НоменклатураСтавкаНДСЗначение,
	|	ВЫБОР
	|		КОГДА Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ТОГДА Номенклатура.ТипНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	КОНЕЦ КАК НоменклатураТипНоменклатуры,
	|	Номенклатура.ВидНоменклатуры КАК НоменклатураВидНоменклатуры,
	|	Номенклатура.Описание КАК НоменклатураОписание,
	|	Номенклатура.ФайлКартинки КАК НоменклатураОсновноеИзображение,
	|	ВЫБОР
	|		КОГДА Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &ЕдиницаПоУмолчанию
	|		ИНАЧЕ Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &КодЕдиницыПоУмолчанию
	|		ИНАЧЕ Номенклатура.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ЕдиницаИзмеренияКод,
	|	ВЫБОР
	|		КОГДА Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &НаименованиеПолноеЕдиницыПоУмолчанию
	|		ИНАЧЕ Номенклатура.ЕдиницаИзмерения.НаименованиеПолное
	|	КОНЕЦ КАК ЕдиницаИзмеренияНаименованиеПолное,
	|	ВЫБОР
	|		КОГДА Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &МеждународноеСокращениеЕдиницыПоУмолчанию
	|		ИНАЧЕ Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение
	|	КОНЕЦ КАК ЕдиницаИзмеренияМеждународноеСокращение,
	|	1 КАК ЕдиницаИзмеренияПересчетКоэф,
	|	ВЫБОР
	|		КОГДА Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &КодЕдиницыПоУмолчанию
	|		ИНАЧЕ Номенклатура.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ЕдиницаИзмеренияПересчетЕдиница,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК НоменклатураШтрихкод,
	|	Номенклатура.Производитель КАК НоменклатураПроизводитель
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	НоменклатураПометкаУдаления,
	|	НоменклатураРодитель.*,
	|	НоменклатураЭтоГруппа,
	|	НоменклатураКод,
	|	НоменклатураНаименование,
	|	НоменклатураНаименованиеПолное,
	|	НоменклатураАртикул,
	|	НоменклатураСтавкаНДСЗначение,
	|	НоменклатураТипНоменклатуры.*,
	|	НоменклатураВидНоменклатуры.*,
	|	НоменклатураОписание,
	|	НоменклатураОсновноеИзображение.*,
	|	ЕдиницаИзмерения.*,
	|	ЕдиницаИзмеренияКод,
	|	ЕдиницаИзмеренияНаименованиеПолное,
	|	ЕдиницаИзмеренияМеждународноеСокращение,
	|	ЕдиницаИзмеренияПересчетКоэф,
	|	ЕдиницаИзмеренияПересчетЕдиница,
	|	НоменклатураШтрихкод,
	|	НоменклатураПроизводитель.*}
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО Номенклатура.Ссылка = ШтрихкодыНоменклатуры.Владелец
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|{ГДЕ
	|	Номенклатура.Ссылка.*}";
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		ТекстыЗапросов.Вставить("Характеристики");
		
		ТекстыЗапросов.Характеристики = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
		|			ТОГДА Номенклатура.Ссылка
		|		ИНАЧЕ Номенклатура.ВидНоменклатуры
		|	КОНЕЦ КАК ВладелецХарактеристик
		|ПОМЕСТИТЬ ТаблицаВладельцевНоменклатуры
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.ЭтоГруппа
		|	И НЕ Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
		|	ХарактеристикиНоменклатуры.Наименование КАК ХарактеристикаНаименование,
		|	ТаблицаВладельцевНоменклатуры.Номенклатура КАК Номенклатура
		|{ВЫБРАТЬ
		|	Характеристика.*,
		|	ХарактеристикаНаименование,
		|	Номенклатура.*}
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВладельцевНоменклатуры КАК ТаблицаВладельцевНоменклатуры
		|		ПО ХарактеристикиНоменклатуры.Владелец = ТаблицаВладельцевНоменклатуры.ВладелецХарактеристик
		|{ГДЕ
		|	ТаблицаВладельцевНоменклатуры.Номенклатура.*}";
	КонецЕсли;
	
	
	ТекстыЗапросов.Свойства =
	"ВЫБРАТЬ
	|	НоменклатураДополнительныеРеквизиты.Ссылка КАК Номенклатура,
	|	НоменклатураДополнительныеРеквизиты.Свойство КАК СвойствоНоменклатуры,
	|	НоменклатураДополнительныеРеквизиты.Значение КАК ЗначениеСвойства
	|ПОМЕСТИТЬ ТаблицаСвойств
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеСведения.Объект,
	|	ДополнительныеСведения.Свойство,
	|	ДополнительныеСведения.Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Объект ССЫЛКА Справочник.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСвойств.Номенклатура КАК Номенклатура,
	|	ТаблицаСвойств.СвойствоНоменклатуры КАК СвойствоНоменклатуры,
	|	ТаблицаСвойств.ЗначениеСвойства КАК ЗначениеСвойства
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	СвойствоНоменклатуры.*,
	|	ЗначениеСвойства.*}
	|ИЗ
	|	ТаблицаСвойств КАК ТаблицаСвойств
	|{ГДЕ
	|	ТаблицаСвойств.СвойствоНоменклатуры.*,
	|	ТаблицаСвойств.Номенклатура.*}";
	
	ТекстыЗапросов.Файлы =
	"ВЫБРАТЬ
	|	НоменклатураПрисоединенныеФайлы.ВладелецФайла КАК Номенклатура,
	|	НоменклатураПрисоединенныеФайлы.Ссылка КАК НоменклатураФайл,
	|	&ДвоичныеДанныеФайла КАК НоменклатураФайлДанныеФайла,
	|	НоменклатураПрисоединенныеФайлы.Том КАК НоменклатураФайлТом,
	|	НоменклатураПрисоединенныеФайлы.Расширение КАК НоменклатураФайлРасширение,
	|	НоменклатураПрисоединенныеФайлы.ПутьКФайлу КАК НоменклатураФайлПутьКФайлу,
	|	НоменклатураПрисоединенныеФайлы.ТипХраненияФайла КАК НоменклатураФайлТипХраненияФайла,
	|	НоменклатураПрисоединенныеФайлы.Описание КАК НоменклатураФайлОписание
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	НоменклатураФайл.*,
	|	НоменклатураФайлДанныеФайла,
	|	НоменклатураФайлТом.*,
	|	НоменклатураФайлРасширение,
	|	НоменклатураФайлПутьКФайлу,
	|	НоменклатураФайлТипХраненияФайла.*,
	|	НоменклатураФайлОписание}
	|ИЗ
	|	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ХранилищеФайлов КАК ПрисоединенныеФайлы
	|		ПО &УсловиеСоединения
	|{ГДЕ
	|	НоменклатураПрисоединенныеФайлы.ВладелецФайла.*}";
	
	ДвоичныеДанныеФайла = 
	"ВЫБОР КОГДА ПрисоединенныеФайлы.Файл ЕСТЬ NULL
	|		ТОГДА ДвоичныеДанныеФайлов.ДвоичныеДанныеФайла
	|		ИНАЧЕ ПрисоединенныеФайлы.ХранилищеДвоичныхДанных.ДвоичныеДанные
	|	КОНЕЦ";
	УсловиеСоединения = 
	"НоменклатураПрисоединенныеФайлы.Ссылка = ПрисоединенныеФайлы.Файл
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьДвоичныеДанныеФайлов КАК ДвоичныеДанныеФайлов
	|		ПО НоменклатураПрисоединенныеФайлы.Ссылка = ДвоичныеДанныеФайлов.Файл";
			
	Если РаботаСФайламиСлужебныйПовтИсп.ДедупликацияВыполнена() Тогда
			
		ДвоичныеДанныеФайла = "ПрисоединенныеФайлы.ХранилищеДвоичныхДанных.ДвоичныеДанные";
		УсловиеСоединения = "НоменклатураПрисоединенныеФайлы.Ссылка = ПрисоединенныеФайлы.Файл";
			
	КонецЕсли;
	
	ТекстыЗапросов.Файлы = СтрЗаменить(ТекстыЗапросов.Файлы,"&ДвоичныеДанныеФайла" , ДвоичныеДанныеФайла);
	ТекстыЗапросов.Файлы = СтрЗаменить(ТекстыЗапросов.Файлы,"&УсловиеСоединения" , УсловиеСоединения);
	
КонецПроцедуры

// Формирует текст запроса, который позволит получить таблицу значений, описанную в макете "СхемаВыгрузкиЗаказов"
// плана обмена "Обмен с сайтом".
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса.
//
Процедура ПолучитьТекстЗапросаЗаказы(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИспользоватьРезервированиеПоЗаказамПокупателей.Значение КАК ИспользоватьРезервированиеПоЗаказамПокупателей
	|ПОМЕСТИТЬ ТаблицаКонстанты
	|ИЗ
	|	Константа.ИспользоватьРезервированиеПоЗаказамПокупателей КАК ИспользоватьРезервированиеПоЗаказамПокупателей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.Заказ КАК Заказ,
	|	ЗаказыПокупателейОстатки.КодСтроки КАК КодСтроки,
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток КАК ЗаказаноОстаток
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ) КАК ЗаказыПокупателейОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОстатков.Заказ КАК Заказ
	|ПОМЕСТИТЬ ТаблицаОстатковПоЗаказам
	|ИЗ
	|	ТаблицаОстатков КАК ТаблицаОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	ЗаказПокупателя.ПометкаУдаления КАК ПометкаУдаления,
	|	ЗаказПокупателя.Номер КАК Номер,
	|	ЗаказПокупателя.Дата КАК Дата,
	|	ЗаказПокупателя.Проведен КАК Проведен,
	|	ЗаказПокупателя.Склад КАК Склад,
	|	ЗаказПокупателя.Магазин КАК Магазин,
	|	ЗаказПокупателя.Комментарий КАК Комментарий,
	|	ЗаказПокупателя.СуммаДокумента КАК СуммаДокумента,
	|	ЗаказПокупателя.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ЗаказПокупателя.Ответственный КАК Ответственный,
	|	ЗаказПокупателя.УчитыватьНДС КАК УчитыватьНДС,
	|	ЗаказПокупателя.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЗаказПокупателя.ЖелаемаяДатаПродажи КАК ЖелаемаяДатаПродажи,
	|	ЗаказПокупателя.АдресДоставки КАК АдресДоставки,
	|	ЗаказПокупателя.ВладелецДисконтнойКарты КАК ВладелецДисконтнойКарты,
	|	ЗаказПокупателя.Продавец КАК Продавец,
	|	ЗаказПокупателя.Организация КАК Организация,
	|	ЗаказПокупателя.Статус КАК Статус,
	|	ЗаказПокупателя.НомерЗаказаНаСайте КАК НомерЗаказаНаСайте,
	|	ЗаказПокупателя.ДатаЗаказаНаСайте КАК ДатаЗаказаНаСайте,
	|	ВЫБОР
	|		КОГДА НЕ ЗаказПокупателя.Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ПустаяСсылка)
	|		КОГДА ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.НеСогласован)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ОжидаетсяСогласование)
	|		КОГДА ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Закрыт)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.Закрыт)
	|		КОГДА ЗаказПокупателя.Отменено
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ГотовКЗакрытию)
	|		КОГДА НЕ ТаблицаОстатковПоЗаказам.Заказ ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаКонстанты.ИспользоватьРезервированиеПоЗаказамПокупателей
	|							И ЗаказПокупателя.НаличиеНезарезервированныхСтрок
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ОжидаетсяРезервирование)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ОжидаетсяПродажа)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ГотовКЗакрытию)
	|	КОНЕЦ КАК Состояние,
	|	ЗаказПокупателя.Контрагент КАК Контрагент,
	|	ЗаказПокупателя.Контрагент.Наименование КАК КонтрагентНаименование,
	|	ЗаказПокупателя.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
	|	ЗаказПокупателя.Контрагент.ЮрФизЛицо КАК КонтрагентЮрФизЛицо,
	|	ЗаказПокупателя.Контрагент.ИНН КАК КонтрагентИНН,
	|	ЗаказПокупателя.Контрагент.КПП КАК КонтрагентКПП,
	|	ЗаказПокупателя.Контрагент.КодПоОКПО КАК КонтрагентКодПоОКПО
	|ПОМЕСТИТЬ ТаблицаЗаказов
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатковПоЗаказам КАК ТаблицаОстатковПоЗаказам
	|		ПО ЗаказПокупателя.Ссылка = ТаблицаОстатковПоЗаказам.Заказ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКонстанты КАК ТаблицаКонстанты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ЗаказПокупателя.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Закрыт)
	|	И ЗаказПокупателя.НомерЗаказаНаСайте <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.Номер КАК Номер,
	|	ЧекККМ.Дата КАК Дата
	|ПОМЕСТИТЬ ТаблицаЧековШапка
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Проведен
	|	И ЧекККМ.ЗаказПокупателя В
	|			(ВЫБРАТЬ
	|				ТаблицаЗаказов.Ссылка КАК Ссылка
	|			ИЗ
	|				ТаблицаЗаказов КАК ТаблицаЗаказов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМТовары.КодСтроки КАК КодСтроки,
	|	ЧекККМТовары.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаЧековШапка.Номер КАК Номер,
	|	ТаблицаЧековШапка.Дата КАК Дата,
	|	МАКСИМУМ(ТаблицаЧековШапка.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаЧеков
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЧековШапка КАК ТаблицаЧековШапка
	|		ПО ЧекККМТовары.Ссылка = ТаблицаЧековШапка.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМТовары.КодСтроки,
	|	ЧекККМТовары.ЗаказПокупателя,
	|	ТаблицаЧековШапка.Номер,
	|	ТаблицаЧековШапка.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяТовары.Ссылка КАК Заказ,
	|	ТаблицаЗаказов.НомерЗаказаНаСайте КАК ЗаказНомерНаСайте,
	|	ТаблицаЗаказов.ДатаЗаказаНаСайте КАК ЗаказДатаНаСайте,
	|	ЕСТЬNULL(ТаблицаОстатков.ЗаказаноОстаток, 0) КАК ЗаказКОплатеОстаток,
	|	ЕСТЬNULL(ТаблицаОстатков.ЗаказаноОстаток, 0) КАК ЗаказКОтгрузкеОстаток,
	|	ТаблицаЗаказов.Дата КАК ЗаказДата,
	|	ТаблицаЗаказов.Номер КАК ЗаказНомер,
	|	ТаблицаЗаказов.Проведен КАК ЗаказПроведен,
	|	ТаблицаЗаказов.ПометкаУдаления КАК ЗаказПометкаУдаления,
	|	ЕСТЬNULL(ТаблицаЧеков.Номер, """") КАК ЗаказНомерОплаты,
	|	ЕСТЬNULL(ТаблицаЧеков.Дата, """") КАК ЗаказДатаОплаты,
	|	ЕСТЬNULL(ТаблицаЧеков.Номер, """") КАК ЗаказНомерОтгрузки,
	|	ЕСТЬNULL(ТаблицаЧеков.Дата, """") КАК ЗаказДатаОтгрузки,
	|	""643"" КАК ЗаказВалютаКод,
	|	ТаблицаЗаказов.СуммаДокумента КАК ЗаказСуммаДокумента,
	|	ВЫБОР
	|		КОГДА ТаблицаЗаказов.УчитыватьНДС
	|			ТОГДА &Облагается
	|		ИНАЧЕ &НеОблагается
	|	КОНЕЦ КАК ЗаказНалогообложениеНДС,
	|	ТаблицаЗаказов.ЦенаВключаетНДС КАК ЗаказСуммаВключаетНДС,
	|	ТаблицаЗаказов.Состояние КАК ЗаказСостояниеЗаказа,
	|	ТаблицаЗаказов.Статус КАК ЗаказСтатусЗаказа,
	|	ЛОЖЬ КАК ЗаказЗакрыт,
	|	ТаблицаЗаказов.Комментарий КАК ЗаказКомментарий,
	|	"""" КАК БанковскийСчет,
	|	ТаблицаЗаказов.Контрагент КАК Контрагент,
	|	ТаблицаЗаказов.КонтрагентНаименование КАК КонтрагентНаименование,
	|	ТаблицаЗаказов.КонтрагентНаименованиеПолное КАК КонтрагентНаименованиеПолное,
	|	ТаблицаЗаказов.КонтрагентЮрФизЛицо КАК КонтрагентЮрФизЛицо,
	|	ТаблицаЗаказов.КонтрагентИНН КАК КонтрагентИНН,
	|	ТаблицаЗаказов.КонтрагентКПП КАК КонтрагентКПП,
	|	ТаблицаЗаказов.КонтрагентКодПоОКПО КАК КонтрагентКодПоОКПО,
	|	1 КАК ЗаказКурс,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателяТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ЗаказПокупателяТовары.Упаковка.ЕдиницаИзмерения
	|	КОНЕЦ КАК ТоварыЕдиницаИзмерения,
	|	ЗаказПокупателяТовары.КоличествоУпаковок КАК ТоварыКоличество,
	|	ЗаказПокупателяТовары.Номенклатура КАК ТоварыНоменклатура,
	|	ЗаказПокупателяТовары.Номенклатура.Артикул КАК ТоварыНоменклатураАртикул,
	|	ЗаказПокупателяТовары.ПроцентАвтоматическойСкидки + ЗаказПокупателяТовары.ПроцентРучнойСкидки КАК ТоварыПроцентСкидки,
	|	ВЫРАЗИТЬ(ЗаказПокупателяТовары.КоличествоУпаковок * ЗаказПокупателяТовары.Цена - ЗаказПокупателяТовары.Сумма КАК ЧИСЛО(15, 2)) КАК ТоварыСуммаСкидки,
	|	ЗаказПокупателяТовары.Сумма КАК ТоварыСумма,
	|	ЗаказПокупателяТовары.Сумма КАК ТоварыВсего,
	|	ЗаказПокупателяТовары.Цена КАК ТоварыЦена,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателяТовары.Номенклатура.ЕдиницаИзмерения.Код
	|		ИНАЧЕ ЗаказПокупателяТовары.Упаковка.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ТоварыЕдиницаИзмеренияКод,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателяТовары.Номенклатура.ЕдиницаИзмерения.Наименование
	|		ИНАЧЕ ЗаказПокупателяТовары.Упаковка.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ КАК ТоварыЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателяТовары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное
	|		ИНАЧЕ ЗаказПокупателяТовары.Упаковка.ЕдиницаИзмерения.НаименованиеПолное
	|	КОНЕЦ КАК ТоварыЕдиницаИзмеренияНаименованиеПолное,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателяТовары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение
	|		ИНАЧЕ ЗаказПокупателяТовары.Упаковка.ЕдиницаИзмерения.МеждународноеСокращение
	|	КОНЕЦ КАК ТоварыЕдиницаИзмеренияМеждународноеСокращение,
	|	1 КАК ТоварыЕдиницаИзмеренияПересчетКоэффициент,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателяТовары.Номенклатура.ЕдиницаИзмерения.Код
	|		ИНАЧЕ ЗаказПокупателяТовары.Упаковка.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ТоварыЕдиницаИзмеренияПересчетЕдиницаКод,
	|	ЗаказПокупателяТовары.СтавкаНДС КАК ТоварыСтавкаНДС,
	|	ЗаказПокупателяТовары.Номенклатура.ТипНоменклатуры КАК ТоварыТипНоменклатуры,
	|	ЗаказПокупателяТовары.Характеристика КАК ТоварыХарактеристика,
	|	ЗаказПокупателяТовары.СуммаНДС КАК ТоварыСуммаНДС
	|{ВЫБРАТЬ
	|	Заказ.*,
	|	ЗаказНомерНаСайте,
	|	ЗаказДатаНаСайте,
	|	ЗаказКОплатеОстаток,
	|	ЗаказКОтгрузкеОстаток,
	|	ЗаказДата,
	|	ЗаказНомер,
	|	ЗаказПроведен,
	|	ЗаказПометкаУдаления,
	|	ЗаказНомерОплаты,
	|	ЗаказДатаОплаты,
	|	ЗаказНомерОтгрузки,
	|	ЗаказДатаОтгрузки,
	|	ЗаказВалютаКод,
	|	ЗаказСуммаДокумента,
	|	ЗаказНалогообложениеНДС,
	|	ЗаказСуммаВключаетНДС,
	|	ЗаказСостояниеЗаказа,
	|	ЗаказСтатусЗаказа,
	|	ЗаказЗакрыт,
	|	ЗаказКомментарий,
	|	БанковскийСчет,
	|	Контрагент.*,
	|	КонтрагентНаименование,
	|	КонтрагентНаименованиеПолное,
	|	КонтрагентЮрФизЛицо.*,
	|	КонтрагентИНН,
	|	КонтрагентКПП,
	|	КонтрагентКодПоОКПО,
	|	ЗаказКурс,
	|	ТоварыЕдиницаИзмерения.*,
	|	ТоварыКоличество,
	|	ТоварыНоменклатура.* КАК ТоварыНоменклатура,
	|	ТоварыНоменклатураАртикул,
	|	ТоварыПроцентСкидки,
	|	ТоварыСуммаСкидки,
	|	ТоварыСумма,
	|	ТоварыВсего,
	|	ТоварыЦена,
	|	ТоварыЕдиницаИзмеренияКод,
	|	ТоварыЕдиницаИзмеренияНаименование,
	|	ТоварыЕдиницаИзмеренияНаименованиеПолное,
	|	ТоварыЕдиницаИзмеренияМеждународноеСокращение,
	|	ТоварыЕдиницаИзмеренияПересчетКоэффициент,
	|	ТоварыЕдиницаИзмеренияПересчетЕдиницаКод,
	|	ТоварыСтавкаНДС.*,
	|	ТоварыТипНоменклатуры,
	|	ТоварыХарактеристика.*,
	|	ТоварыСуммаНДС}
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЗаказов КАК ТаблицаЗаказов
	|		ПО ЗаказПокупателяТовары.Ссылка = ТаблицаЗаказов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатков КАК ТаблицаОстатков
	|		ПО ЗаказПокупателяТовары.Ссылка = ТаблицаОстатков.Заказ
	|			И ЗаказПокупателяТовары.КодСтроки = ТаблицаОстатков.КодСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЧеков КАК ТаблицаЧеков
	|		ПО ЗаказПокупателяТовары.Ссылка = ТаблицаЧеков.ЗаказПокупателя
	|			И ЗаказПокупателяТовары.КодСтроки = ТаблицаЧеков.КодСтроки";
	
КонецПроцедуры

// Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре
// ПолучитьТекстЗапросаЗаказы или быть особенностью прикладного решения.
//
// Параметры:
//  ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//  ПараметрыКомпоновки - ПараметрСхемыКомпоновкиДанных - параметры схемы компоновки текста запроса в процедуре
//                                                        ПолучитьТекстЗапросаЗаказы.
//
Процедура УстановитьПараметрыТекстаЗапросаЗаказы(ПрикладныеПараметры, ПараметрыКомпоновки) Экспорт
	
	Облагается = ПараметрыКомпоновки.Добавить();
	Облагается.Имя = "Облагается";
	Облагается.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	Облагается.Значение = "Облагается";
	
	НеОблагается = ПараметрыКомпоновки.Добавить();
	НеОблагается.Имя = "НеОблагается";
	НеОблагается.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	НеОблагается.Значение = "Не облагается";
	
КонецПроцедуры


#КонецОбласти

// Заполняет информацию о складах.
// 
// Параметры:
//	СписокТочекСамовывоза - СписокЗначений - точки самовывоза, указанные в узле обмена.
//	СписокСкладов - СписокЗначений - склады полученные в результате выполнения запроса (при выгрузке пакета предложений).
//	ИнформацияОТочкахСамовывоза - ТаблицаЗначений - таблица, в которой будет храниться информация о точках самовывоза и складах.
//    * Склад - Ссылка, ссылка на элемент справочника (склады или точки самовывоза).
//    * СкладНаименование - наименование склада.
//    * СкладАдрес - Адресная информация о складе - Структура СкладАдрес.
//    * СкладКонтактнаяИнформация - Контактная информация о складе  -структура "СкладКонтактнаяИнформация".
//	СкладАдрес - Структура - структура, в которой необходимо представить адресную информацию о складе:
//    * ПочтовыйИндекс, Страна, Регион, Район, НаселенныйПункт, Город,Улица, Дом, Корпус, Квартира.
//	СкладКонтактнаяИнформация - Структура - структура, в которой необходимо представить контактную информацию о складе:
//    * ТелефонРабочий, Почта, КоординатыНаКарте, Прочее.
//
Процедура ЗаполнитьИнформациюОСкладахИТочкахСамовывоза(СписокТочекСамовывоза, СписокСкладов,
	ИнформацияОТочкахСамовывоза, СкладАдрес, СкладКонтактнаяИнформация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Магазины.Ссылка,
	|	Магазины.Наименование,
	|	ЕСТЬNULL(МагазиныКонтактнаяОтправитель.Представление, """") КАК АдресМагазина,
	|	ЕСТЬNULL(МагазиныКонтактнаяОтправитель.ЗначенияПолей, """") КАК ЗначенияПолей
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Магазины.КонтактнаяИнформация КАК МагазиныКонтактнаяОтправитель
	|		ПО Магазины.Ссылка = МагазиныКонтактнаяОтправитель.Ссылка
	|			И (МагазиныКонтактнаяОтправитель.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресМагазина))
	|ГДЕ
	|	(Магазины.Ссылка В (&СписокТочекСамовывоза)
	|			ИЛИ Магазины.Ссылка В (&СписокСкладов))";
	
	Запрос.УстановитьПараметр("СписокТочекСамовывоза", СписокТочекСамовывоза);
	Запрос.УстановитьПараметр("СписокСкладов", СписокСкладов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы = ИнформацияОТочкахСамовывоза.Добавить();
		СтрокаТаблицы.Склад                     = Выборка.Ссылка;
		СтрокаТаблицы.СкладНаименование         = Выборка.Наименование;
		СтрокаТаблицы.СкладАдрес                = СкладАдрес;
		СтрокаТаблицы.СкладКонтактнаяИнформация = СкладКонтактнаяИнформация;
		
		СтранаРоссия = Справочники.СтраныМира.Россия;
		
		Если ЗначениеЗаполнено(Выборка.АдресМагазина) Тогда
			СтрокаТаблицы.СкладКонтактнаяИнформация.Почта = Выборка.АдресМагазина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// В зависимости от значения функциональной опции "Использовать статусы заказов" устанавливается
// видимость табличной части "Соответствия заказов".
//
// Параметры:
//  Видимость - Булево - признак видимости табличной части.
//
Процедура УстановитьВидимостьТабличнойЧастиСоответствиеЗаказовФормыУзлаПланаОбмена(Видимость) Экспорт
	
	Видимость = Истина;
	
КонецПроцедуры

// В зависимости от типа регистрируемых данных определяет данные, которые необходимо зарегистрировать в плане обмена.
//
// Параметры:
//  Объект - СправочникОбъект, ДокументОбъект - регистрируемый объект данных, например, НоменклатураОбъект, ЗаказОбъект.
//  МассивУзловТовары - Массив - массив узлов плана обмена "Обмен с сайтом" в которых необходимо регистрировать объект
//                               в том случае если он является Номенклатурой.
//  МассивУзловЗаказы - Массив - массив узлов плана обмена "Обмен с сайтом" в которых необходимо регистрировать объект
//                               в том случае если он является Заказом.
//  Замещение - Булево - замещение данных регистрации.
//
Процедура ЗарегистрироватьИзмененияВУзлах(Объект, МассивУзловТовары, МассивУзловЗаказы, Замещение = Ложь) Экспорт
	
	ТипОбъекта = ТипЗнч(Объект);
	
	Если ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ТоварыНаСкладах")
		ИЛИ ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ДействующиеЦеныНоменклатуры")
		ИЛИ ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры") Тогда
		
		Если Замещение Тогда
			
			ОбъектМетаданных = Объект.Метаданные();
			
			Если Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
				
				СтарыйНаборЗаписей = РегистрыСведений[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
				
			ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
				
				СтарыйНаборЗаписей = РегистрыНакопления[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
				
			Иначе
				
				Возврат;
				
			КонецЕсли;
			
			Для Каждого ЗначениеОтбора Из Объект.Отбор Цикл
				
				Если ЗначениеОтбора.Использование = Ложь Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаОтбора = СтарыйНаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
				СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
				СтрокаОтбора.Использование = Истина;
				
			КонецЦикла;
			
			СтарыйНаборЗаписей.Прочитать();
			
			Для каждого Запись Из СтарыйНаборЗаписей Цикл
			
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Запись.Номенклатура);
			
			КонецЦикла;
			
		КонецЕсли;
		
		Для каждого Запись Из Объект Цикл
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Запись.Номенклатура);
			
		КонецЦикла;

	
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Номенклатура") Тогда
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Ссылка);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.НоменклатураПрисоединенныеФайлы") Тогда
		
		Если НЕ ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.ВладелецФайла);

		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ХарактеристикиНоменклатуры") Тогда
		
		Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Владелец);
		ИначеЕсли ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Номенклатура.Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.ВидНоменклатуры = &ВидНоменклатуры";
			
			Запрос.УстановитьПараметр("ВидНоменклатуры", Объект.Владелец);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Выборка.Ссылка);
			КонецЦикла;
			
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ЗаказПокупателя") Тогда 
		
		Для Каждого УзелОбмена Из МассивУзловЗаказы Цикл
			
			СтруктураПараметровССайта = Неопределено;
			РеквизитыЗаказаНаСайте(Объект.Ссылка, УзелОбмена, СтруктураПараметровССайта);
			
			Если НЕ СтруктураПараметровССайта = НеОпределено Тогда
				
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Объект.Ссылка);
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ЗаказыПокупателей") Тогда
		
		Для Каждого ЗначениеОтбора Из Объект.Отбор Цикл
			
			Если ЗначениеОтбора.Использование = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеОтбора.Имя = "Регистратор" Тогда
				
				Если ТипЗнч(ЗначениеОтбора.Значение) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
					ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловЗаказы, ЗначениеОтбора.Значение);
				ИначеЕсли ТипЗнч(ЗначениеОтбора.Значение) = Тип("ДокументСсылка.ЧекККМ") Тогда
					Если ЗначениеЗаполнено(ЗначениеОтбора.Значение.ЗаказПокупателя) Тогда
						ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловЗаказы, ЗначениеОтбора.Значение.ЗаказПокупателя);
					КонецЕсли;
				ИначеЕсли ТипЗнч(ЗначениеОтбора.Значение) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ОтчетОРозничныхПродажахТовары.ЗаказПокупателя КАК ЗаказПокупателя
					|ИЗ
					|	Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
					|ГДЕ
					|	ОтчетОРозничныхПродажахТовары.Ссылка = &Ссылка
					|	И НЕ ОтчетОРозничныхПродажахТовары.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)";
					
					Запрос.УстановитьПараметр("Ссылка", ЗначениеОтбора.Значение);
					
					Результат = Запрос.Выполнить();
					Выборка = Результат.Выбрать();
					
					Пока Выборка.Следующий() Цикл
						ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловЗаказы, Выборка.ЗаказПокупателя);
					КонецЦикла;
					
				КонецЕсли;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет статус контрагента по значению перечисления.
//
// Параметры:
//  ДанныеКонтрагентаЮрФизЛицо - ПеречислениеСсылка - определяет юридический статус контрагента.
//                               В зависимости от статуса контрагента при выгрузке на сайт
//                               будут по разному заполняется данные о контрагенте.
//  ЭтоЮрЛицо - Булево - если это юридическое лицо заполняется ИНН, КПП, если это физическое лицо, то наименование.
//
Процедура ОпределитьЭтоЮрЛицо(ДанныеКонтрагентаЮрФизЛицо, ЭтоЮрЛицо) Экспорт
	
	ЭтоЮрЛицо = ДанныеКонтрагентаЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	
КонецПроцедуры

// К ИД номенклатуры добавляет ИД характеристики, если она задана.
//
// Параметры:
//	Номенклатура - Ссылка - например, СправочникСсылка.Номенклатура.
//	Характеристика - Ссылка - например, СправочникСсылка.ХарактеристикиНоменклатуры.
//  Ид - Строка - идентификатор.
//
Процедура ДополнитьИдНоменклатурыХарактеристикой(Номенклатура, Характеристика, Ид) Экспорт
	
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура")
		И ТипЗнч(Характеристика) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры")
		И (НЕ Номенклатура.ЭтоГруппа)
		И ЗначениеЗаполнено(Характеристика) Тогда
		
		Ид = Ид + "#" + Строка(Характеристика.УникальныйИдентификатор());
		
	КонецЕсли;
	
КонецПроцедуры

// Получает заказы, загруженные с сайта.
// 
// Параметры:
//  ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//  ТаблицаНомераИДатыЗаказов - ТаблицаЗначений - таблица содержащая номера и даты заказов, загруженных с сайта;
//    * НомерЗаказа - строка - номер заказа;
//    * ДатаЗаказа - строка - дата заказа.
//  Результат - ТаблицаЗначений - информация о заказах;
//    * ЗаказПокупателя - ссылка на документ Заказ.
//    * НомерЗаказаНаСайте - номер заказа.
//    * НеОбновлятьЗаказ - признак того, что Заказ не должен перезаписываться. 
// 
Процедура ПолучитьРанееЗагруженныеДокументы(ПрикладныеПараметры, ТаблицаНомераИДатыЗаказов, Результат) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНомераИДаты.НомерЗаказа,
	|	ТаблицаНомераИДаты.ДатаЗаказа
	|ПОМЕСТИТЬ ТаблицаНомераИДаты
	|ИЗ
	|	&ТаблицаНомераИДаты КАК ТаблицаНомераИДаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК ЗаказПокупателя,
	|	ЗаказПокупателя.НомерЗаказаНаСайте,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.Отменено
	|				ИЛИ ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Закрыт)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеОбновлятьЗаказ
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	(ЗаказПокупателя.НомерЗаказаНаСайте, ЗаказПокупателя.ДатаЗаказаНаСайте) В
	|			(ВЫБРАТЬ
	|				ТаблицаНомераИДаты.НомерЗаказа КАК НомерЗаказа,
	|				ТаблицаНомераИДаты.ДатаЗаказа КАК ДатаЗаказа
	|			ИЗ
	|				ТаблицаНомераИДаты КАК ТаблицаНомераИДаты)";
	
	Запрос.Параметры.Вставить("ТаблицаНомераИДаты", ТаблицаНомераИДатыЗаказов);
	Результат = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Создает новый документ "Заказ покупателя".
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - выходной параметр, заполняется созданным объектом документа Заказ.
//
Процедура СоздатьНовыйДокументЗаказ(ДокументОбъект) Экспорт
	
	ДокументОбъект = Документы.ЗаказПокупателя.СоздатьДокумент();

КонецПроцедуры

// Заполняет документ заказ данными с сайта.
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект - объект документа Заказ покупателя.
//  РеквизитыЗаказа - Структура - содержит значения реквизитов заказа, загруженных с сайта:
//     * Ид - Идентификатор заказа, очень часто тоже что и номер.
//     * Дата				- дата создания заказа на сайте.
//     * Номер				- номер заказа на сайте.
//     * ДатаОтгрузки		- дата отгрузки товара по заказу.
//     * ВалютаДокументаКод	- трехзначный идентификатор валюты.
//     * ВидЦенНаименование	- наименование вида цены.
//     * СуммаВключаетНДС	- признак включения НДС.
//     * НаименованиеСкидки	- наименование скидки.
//     * ПроцентСкидки		- процент скидки.
//     * СуммаСкидки		- сумма скидки по заказу.
//     * СкладНаименование 	- наименование склада, точки самовывоза.
//     * ПодразделениеНаименование - наименование подразделения.
//     * Контрагент			- ссылка на контрагента, который уже был идентифицирован в базе.
//     * АдресДоставки      - строка адреса доставки.
//     * ТочкаСамовывоза	- ссылка на элемент справочника, который в прикладном решении является справочником точек самовывоза или Неопределено.
//     * Товары				- табличная часть документа.
//     * Комментарий		- текстовый комментарий.
//  СвойстваЗаказа - Соответствие - содержит строковое представления свойств (ключ) и значений (значение) заказа.
//  ПрикладныеПараметры - Структура - содержит параметры прикладного решения, добавленные на форму узла плана обмена.
//  ОписаниеОшибки - Строка - текстовое представление ошибки.
//  Успешно - Булево - признак заполнения документа.
//
Процедура ЗаполнитьЗаказ(ДокументОбъект, РеквизитыЗаказа, СвойстваЗаказа, ПрикладныеПараметры, ОписаниеОшибки, Успешно) Экспорт
	
	Если Не ДокументОбъект.ЭтоНовый() Тогда
		СтатусДоставки = ОбменССайтомРТ.ПоследнееСостояниеДоставкиЗаказаПокупателя(ДокументОбъект.Ссылка);
		Если СтатусДоставки = Перечисления.СостоянияДоставкиЗаказаПокупателя.Отгружен Тогда
			Успешно = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Дата", РеквизитыЗаказа.Дата);
	ДанныеЗаполнения.Вставить("Организация", ПрикладныеПараметры.Организация);
	ДанныеЗаполнения.Вставить("Контрагент", РеквизитыЗаказа.Контрагент);
	
	Комментарий = ""+РеквизитыЗаказа.Комментарий
		+ ?(ЗначениеЗаполнено(РеквизитыЗаказа.ТочкаСамовывоза), РеквизитыЗаказа.ТочкаСамовывоза.Наименование, "");
	ДанныеЗаполнения.Вставить("Комментарий", Комментарий);
	
	Если ЗначениеЗаполнено(РеквизитыЗаказа.ТочкаСамовывоза) Тогда
		Магазин = МагазинПоНаименованию(РеквизитыЗаказа.ТочкаСамовывоза.Наименование);
	Иначе
		Магазин = ПараметрыСеанса.ТекущийМагазин;
	КонецЕсли;
	ДанныеЗаполнения.Вставить("Магазин", Магазин);
	ДанныеЗаполнения.Вставить("Склад", Магазин.СкладПродажи);
	ДанныеЗаполнения.Вставить("Ответственный", Пользователи.ТекущийПользователь());
	ДанныеЗаполнения.Вставить("ЖелаемаяДатаПродажи", РеквизитыЗаказа.Дата);
	ДанныеЗаполнения.Вставить("СкидкиРассчитаны", Истина);
	ДанныеЗаполнения.Вставить("УчитыватьНДС", Истина);
	ДанныеЗаполнения.Вставить("ИнтернетЗаказ", Истина);
	ДанныеЗаполнения.Вставить("АдресДоставки", РеквизитыЗаказа.АдресДоставки);
	
	
	Статус = Неопределено;
	ЗначениеСтатуса = Неопределено;
	СтатусЗаказа = СвойстваЗаказа.Получить("Статус заказа"); // терм, локализации не подлежит
	Если Не СтатусЗаказа = Неопределено Тогда
		
		Если ПрикладныеПараметры.Свойство("СоответствиеСтатусовЗаказов") Тогда
			ТаблицаСтатусов = ПрикладныеПараметры.СоответствиеСтатусовЗаказов;
			ЗначениеСтатуса = ТаблицаСтатусов.Найти(СтатусЗаказа, "СтатусЗаказаНаСайте");
		КонецЕсли;
		
		Если Не ЗначениеСтатуса = Неопределено Тогда
			Статус = ЗначениеСтатуса.СтатусЗаказаВБазе;
		КонецЕсли;
		
	КонецЕсли;
	ДанныеЗаполнения.Вставить("Статус", ?(ЗначениеЗаполнено(Статус), Статус, Перечисления.СтатусыЗаказовПокупателей.НеСогласован));
	
	ДокументОбъект.Заполнить(ДанныеЗаполнения);
	
	ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект, РеквизитыЗаказа.Товары, ПрикладныеПараметры);
	
	Успешно = Истина;
	
КонецПроцедуры

// Поиск контрагента по настройкам плана обмена.
//
// Параметры:
//	СтруктураСвойстваЗаказа - Структура - содержит реквизиты заказа, загруженные с сайта. В данной структуре необходимо
//                                        заполнить поле "Контрагент".
//  ДанныеКонтрагента - Структура - содержит реквизита контрагента, загруженная с заказа, по данным реквизитам будет
//                                  происходить поиск существующего контрагента или создание нового:
//    * ЮрЛицо - Тип Булево. Признак наличия статуса Юр. лицо у контрагента.
//    * ОфициальноеНаименование - Тип строка.Официальное Наименование контрагента Юр. лица.
//    * ПолноеНаименование - Тип строка. Полное наименование контрагента Юр. лица.
//    * Наименование - Тип строка. Наименование контрагента.
//    * ФИО - ФИО контрагента, если он Физ. лицо.
//    * ОКПО - код ОКПО
//    * ИНН - код ИНН
//    * КПП - код КПП
//    * РасчетныеСчета - Массив - элементами массива является структура, в которой описаны свойства
//                                расчетного счета (необязательное поле):
//        ** НомерСчета - Строка - Номер банковского счета контрагента
//        ** ДанныеБанка - Структура - Данные банка расчетного счета:
//             *** Наименование - Строка
//             *** БИК - Строка
//             *** SWIFT - Строка
//             *** КоррСчет - Строка
//             *** Адрес - Строка
//             *** Город - Строка
//    * ИнформацияПоКонтрагенту - ТаблицаЗначений - содержит строковое представление и значение
//                                                  контактной информации о контрагенте:
//        ** Вид - Вид контактной информации.
//        ** Значение - значение контактной информации.
//  ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//  ОписаниеОшибки - Строка - текстовое представление ошибки.
//
//	Пример: 
//   Заполнение таблицы ИнформацияПоКонтрагенту:
//			Вид						Значение
//			"Наименование"			Администратор
//			"Полное наименование"	Администратор
//			"Юр./Физ. лицо"			Физ. лицо
//			"Юридический адрес"		Ул. Ленина
//			"Почта"					email@example.com
//			"Контактные лица"		Администратор
//			"ТелефонРабочий"		89011234567
//
Процедура ИдентифицироватьКонтрагента(СтруктураСвойстваЗаказа, ДанныеКонтрагента, ПрикладныеПараметры, ОписаниеОшибки) Экспорт
	
	ЮрЛицо                  = ДанныеКонтрагента.ЮрЛицо;
	ИНН                     = ДанныеКонтрагента.ИНН;
	КПП                     = ДанныеКонтрагента.КПП;
	ИнформацияПоКонтрагенту = ДанныеКонтрагента.ИнформацияПоКонтрагенту;
	
	СтрокаТелефона          = ИнформацияПоКонтрагенту.Найти("ТелефонРабочий", "Вид");
	Если СтрокаТелефона <> Неопределено Тогда
		Телефон = СтрокаТелефона.Представление;
	Иначе
		Телефон = "";
	КонецЕсли;
	
	Если ПустаяСтрока(ДанныеКонтрагента.Наименование) И НЕ ПустаяСтрока(Телефон) Тогда
		ДанныеКонтрагента.Наименование = Телефон;
	КонецЕсли; 
	
	Наименование = ДанныеКонтрагента.Наименование;
	Если ПустаяСтрока(Наименование) Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки, 
		НСтр("ru = 'Наименование контрагента должно быть заполнено.'"));
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ЭтоГруппа";
	
	ТекстСообщенияНайденоНесколькоКонтрагентов = "";
	
	Если ПрикладныеПараметры.СпособИдентификацииКонтрагентов 
		= Перечисления.СпособыИдентификацииКонтрагентов.Наименование Тогда
		
		ТекстСообщенияНайденоНесколькоКонтрагентов = " " + НСтр("ru = 'по наименованию:'")+ " " + Наименование;
		
		Запрос.Текст = Запрос.Текст + " И Контрагенты.Наименование = &Наименование ";
		
		Запрос.УстановитьПараметр("Наименование", Наименование);
		
	ИначеЕсли ПрикладныеПараметры.СпособИдентификацииКонтрагентов 
		= Перечисления.СпособыИдентификацииКонтрагентов.ИННКПП Тогда
		
		Если НЕ ПустаяСтрока(ИНН) Тогда
			
			Если ТипЗнч(ИНН) <> Тип("Строка") Тогда
				
				ИНН = "";
				ШаблонСообщения = НСтр("ru = 'У контрагента %1 не корректно указан ИНН'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Наименование);
				ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекстОшибки);
				
			КонецЕсли;
			
			Если ЮрЛицо Тогда
				
				Если ТипЗнч(КПП) <> Тип("Строка") Тогда
					КПП = "";
					ШаблонСообщения = НСтр("ru = 'У контрагента %1 не корректно указан КПП'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Наименование);
					ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекстОшибки);
				КонецЕсли;
				
				ТекстСообщенияНайденоНесколькоКонтрагентов = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'по ИНН: %1, КПП: %2'"),
				ИНН, КПП);
				
				Запрос.Текст = Запрос.Текст + " И Контрагенты.ИНН = &ИНН И Контрагенты.КПП = &КПП ";
				
				Запрос.УстановитьПараметр("ИНН", ИНН);
				Запрос.УстановитьПараметр("КПП", КПП);
				
			Иначе // у физического лица КПП не бывает
				
				ТекстСообщенияНайденоНесколькоКонтрагентов = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'по ИНН: %1'"), КПП);
				
				Запрос.Текст = Запрос.Текст + " И Контрагенты.ИНН = &ИНН";
				
				Запрос.УстановитьПараметр("ИНН", ИНН);
				
			КонецЕсли;
		Иначе
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки, 
			НСтр("ru = 'Не удалось идентифицировать контрагента.'"));
			
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ПрикладныеПараметры.СпособИдентификацииКонтрагентов
		= Перечисления.СпособыИдентификацииКонтрагентов.ТелефонEmail Тогда
		
		СтрокаEmail          = ИнформацияПоКонтрагенту.Найти("Почта", "Вид");
		Если СтрокаEmail <> Неопределено Тогда
			Email = СтрокаEmail.Представление;
		Иначе
			Email = "";
		КонецЕсли;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Контрагент
		|ПОМЕСТИТЬ Контрагенты
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|	И КонтрагентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента)
		|	И КонтрагентыКонтактнаяИнформация.Представление = &НомерТелефона
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтрагентыКонтактнаяИнформация.Ссылка
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|	И КонтрагентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтрагента)
		|	И КонтрагентыКонтактнаяИнформация.Представление = &Email
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК Контрагент
		|ПОМЕСТИТЬ ФизическиеЛица
		|ИЗ
		|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
		|ГДЕ
		|	ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|	И ФизическиеЛицаКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонФизическогоЛица)
		|	И ФизическиеЛицаКонтактнаяИнформация.Представление = &НомерТелефона
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ФизическиеЛицаКонтактнаяИнформация.Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
		|ГДЕ
		|	ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|	И ФизическиеЛицаКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизическогоЛица)
		|	И ФизическиеЛицаКонтактнаяИнформация.Представление = &Email
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Контрагенты.Контрагент КАК Контрагент
		|ИЗ
		|	Контрагенты КАК Контрагенты
		|ГДЕ
		|	&ЭтоЮрЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ФизическиеЛица КАК ФизическиеЛица
		|		ПО Контрагенты.ФизЛицо = ФизическиеЛица.Контрагент
		|ГДЕ
		|	НЕ &ЭтоЮрЛицо";
		
		Запрос.УстановитьПараметр("НомерТелефона", Телефон);
		Запрос.УстановитьПараметр("Email"        , Email);
		Запрос.УстановитьПараметр("ЭтоЮрЛицо"    , ДанныеКонтрагента.ЮрЛицо);
		
	КонецЕсли;
	
	КонтрагентСсылка = Неопределено;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		КонтрагентСсылка = СоздатьКонтрагента(ДанныеКонтрагента, ПрикладныеПараметры, ОписаниеОшибки, СтруктураСвойстваЗаказа);
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		КонтрагентСсылка = Выборка.Контрагент;
		Если ЗначениеЗаполнено(КонтрагентСсылка) Тогда
			
			НачатьТранзакцию();
			Попытка
				
				СсылкаКонтактнойИнформации = КонтрагентСсылка;
				Если ДанныеКонтрагента.ЮрЛицо Тогда
					ВидФактАдрес = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
					ВидЮрАдрес = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
					ВидТелефон = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
					ВидПочта = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
				Иначе
					Если Не ЗначениеЗаполнено(СсылкаКонтактнойИнформации.ФизЛицо) Тогда
						ЭлектронноеВзаимодействиеРТ.УстановитьУправляемуюБлокировкуПоСсылке(СсылкаКонтактнойИнформации,
							РежимБлокировкиДанных.Исключительный);
						ОбъектКонтрагент = СсылкаКонтактнойИнформации.ПолучитьОбъект();
						ОбъектКонтрагент.ФизЛицо = ОбщегоНазначенияРТ.СоздатьФизЛицоНаОснованииКонтрагента(ОбъектКонтрагент, Истина);
						ОбъектКонтрагент.Записать();
					КонецЕсли;
					СсылкаКонтактнойИнформации = СсылкаКонтактнойИнформации.ФизЛицо;
					ВидФактАдрес = Справочники.ВидыКонтактнойИнформации.ФактАдресФизическогоЛица;
					ВидЮрАдрес = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресФизическогоЛица;
					ВидТелефон = Справочники.ВидыКонтактнойИнформации.ТелефонФизическогоЛица;
					ВидПочта = Справочники.ВидыКонтактнойИнформации.EmailФизическогоЛица;
				КонецЕсли;
				
				ЭлектронноеВзаимодействиеРТ.УстановитьУправляемуюБлокировкуПоСсылке(СсылкаКонтактнойИнформации,
					РежимБлокировкиДанных.Исключительный);
				ОбъектКонтактнойИнформации = СсылкаКонтактнойИнформации.ПолучитьОбъект();
				Если Не ОбъектКонтактнойИнформации = Неопределено Тогда
					
					КонтактнаяИнформацияИзменена = Ложь;
					Для Каждого СтрокаИнформации Из ДанныеКонтрагента.ИнформацияПоКонтрагенту Цикл
						
						Если Не ЗначениеЗаполнено(СтрокаИнформации.Представление) Тогда
							Продолжить;
						КонецЕсли;
						
						Если ВРег(СтрокаИнформации.Вид) = ВРег(НСтр("ru = 'Фактический адрес'")) Тогда
							
							СтруктураПоиска = Новый Структура;
							СтруктураПоиска.Вставить("Вид", ВидФактАдрес);
							СтруктураПоиска.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
							СтруктураПоиска.Вставить("Представление", СтрокаИнформации.Представление);
							СтрокиКонтакта = ОбъектКонтактнойИнформации.КонтактнаяИнформация.НайтиСтроки(СтруктураПоиска);
							Если СтрокиКонтакта.Количество() = 0 Тогда
								ДобавитьКонтактнуюИнформацию(ОбъектКонтактнойИнформации,
								ВидФактАдрес,
								Перечисления.ТипыКонтактнойИнформации.Адрес,
								СтрокаИнформации.Представление);
								КонтактнаяИнформацияИзменена = Истина;
							КонецЕсли;
							
						ИначеЕсли ВРег(СтрокаИнформации.Вид) =  ВРег(НСтр("ru = 'Юридический адрес'")) Тогда
							
							СтруктураПоиска = Новый Структура;
							СтруктураПоиска.Вставить("Вид", ВидЮрАдрес);
							СтруктураПоиска.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
							СтруктураПоиска.Вставить("Представление", СтрокаИнформации.Представление);
							СтрокиКонтакта = ОбъектКонтактнойИнформации.КонтактнаяИнформация.НайтиСтроки(СтруктураПоиска);
							Если СтрокиКонтакта.Количество() = 0 Тогда
								ДобавитьКонтактнуюИнформацию(ОбъектКонтактнойИнформации,
								ВидЮрАдрес,
								Перечисления.ТипыКонтактнойИнформации.Адрес,
								СтрокаИнформации.Представление);
								КонтактнаяИнформацияИзменена = Истина;
							КонецЕсли;
							
						ИначеЕсли ВРег(СтрокаИнформации.Вид) =  ВРег(НСтр("ru = 'ТелефонРабочий'")) Тогда
							
							СтруктураПоиска = Новый Структура;
							СтруктураПоиска.Вставить("Вид", ВидТелефон);
							СтруктураПоиска.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
							СтруктураПоиска.Вставить("Представление", СтрокаИнформации.Представление);
							СтрокиКонтакта = ОбъектКонтактнойИнформации.КонтактнаяИнформация.НайтиСтроки(СтруктураПоиска);
							Если СтрокиКонтакта.Количество() = 0 Тогда
								ДобавитьКонтактнуюИнформацию(ОбъектКонтактнойИнформации,
								ВидТелефон,
								Перечисления.ТипыКонтактнойИнформации.Телефон,
								СтрокаИнформации.Представление);
								КонтактнаяИнформацияИзменена = Истина;
							КонецЕсли;
							
						ИначеЕсли ВРег(СтрокаИнформации.Вид) =  ВРег(НСтр("ru = 'Почта'")) Тогда
							
							СтруктураПоиска = Новый Структура;
							СтруктураПоиска.Вставить("Вид", ВидПочта);
							СтруктураПоиска.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
							СтруктураПоиска.Вставить("Представление", СтрокаИнформации.Представление);
							СтрокиКонтакта = ОбъектКонтактнойИнформации.КонтактнаяИнформация.НайтиСтроки(СтруктураПоиска);
							Если СтрокиКонтакта.Количество() = 0 Тогда
								ДобавитьКонтактнуюИнформацию(ОбъектКонтактнойИнформации,
								ВидПочта,
								Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
								СтрокаИнформации.Представление);
								КонтактнаяИнформацияИзменена = Истина;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					Если КонтактнаяИнформацияИзменена Тогда
						ОбъектКонтактнойИнформации.Записать();
					КонецЕсли;
					
				КонецЕсли;
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КонтрагентСсылка) Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, 
		НСтр("ru = 'Не удалось найти или создать контрагента.'"));
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураСвойстваЗаказа.Контрагент = КонтрагентСсылка;
	
КонецПроцедуры

// Ищет номенклатуру по ИД, если не находит - ищет по артикулу и наименованию, если не находит - создает новую.
//
// Параметры:
//   Номенклатура - Ссылка - Ссылка на найденную или новую номенклатуру.
//   ДанныеНоменклатуры - Структура - Структура, содержащая информацию о номенклатуре, загруженной с сайта,
//     по данным которой необходимо провести поиск существующей номенклатуры или создать новую.
//     * Ид - Строка - внутренний идентификатор номенклатуры.
//     * АртикулНоменклатуры - Строка - Артикул номенклатуры.
//     * НаименованиеНоменклатуры - Строка - Наименование номенклатуры.
//     * ЕдиницаИзмерения - Справочник.ЕдиницыИзмерения - ссылка на единицу измерения товара.
//     * ЭтоУслуга - Булево - признак услуги.
//     * СтавкаНДС - Перечисление.СтавкиНДС - ставка НДС номенклатуры.
//   ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//   ОписаниеОшибки - Строка - текстовое представление ошибки.
//
Процедура НайтиСоздатьНоменклатуру(Номенклатура, ДанныеНоменклатуры, ПрикладныеПараметры, ОписаниеОшибки) Экспорт
	
	ИдНоменклатуры = ДанныеНоменклатуры.Ид;
	
	Попытка 
		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдНоменклатуры));
		
		Если Не Номенклатура = Справочники.Номенклатура.ПустаяСсылка()
			 И Номенклатура.ПолучитьОбъект() <> Неопределено  Тогда
			Возврат;
		КонецЕсли;
		
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
		НСтр("ru = 'Номенклатура не найдена по уникальному идентификатору:'")+ " " + ИдНоменклатуры);
		
	КонецПопытки;
	
	АртикулНоменклатуры			= ДанныеНоменклатуры.АртикулНоменклатуры;
	НаименованиеНоменклатуры	= ДанныеНоменклатуры.НаименованиеНоменклатуры;
	Номенклатура = НайтиНоменклатуруПоАртикулуНаименованию(АртикулНоменклатуры, НаименованиеНоменклатуры);
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат;
	КонецЕсли;

	
	Номенклатура = Справочники.Номенклатура.СоздатьЭлемент();
	
	Номенклатура.Родитель     = ПрикладныеПараметры.ГруппаДляНовойНоменклатуры;
	Номенклатура.Артикул      = ДанныеНоменклатуры.АртикулНоменклатуры;
	Номенклатура.Наименование = ДанныеНоменклатуры.НаименованиеНоменклатуры;
	
	Если НЕ ДанныеНоменклатуры.ЭтоУслуга Тогда
		Номенклатура.ВидНоменклатуры = ПрикладныеПараметры.ВидНоменклатурыТоварДляНовойНоменклатуры
	Иначе
		Номенклатура.ВидНоменклатуры = ПрикладныеПараметры.ВидНоменклатурыУслугаДляНовойНоменклатуры
	КонецЕсли;
	
	Номенклатура.СтавкаНДС = ПолучитьПоСтавкеНДСЗначениеДляЗагрузки(ДанныеНоменклатуры.СтавкаНДС);
	
	Номенклатура.ЕдиницаИзмерения = НайтиСоздатьЕдиницуИзмерения(ДанныеНоменклатуры.ЕдиницаИзмерения);
	Номенклатура.Описание = НСтр("ru = 'Создан автоматически при загрузке с сайта'");
	
	Номенклатура.Записать();
	
	Номенклатура = Номенклатура.Ссылка;
	
КонецПроцедуры

// Создает новый элемент справочника являющегося в прикладном решении точками самовывоза, например, Склады, Магазины.
//
// Параметры:
//  ДанныеТочки - Структура - параметры точки:
//    * Ид - Строка - идентификатор точки самовывоза.
//    * Адрес - Структура - структура с полями "ТипАдреса" и "ЗначениеАдреса".
//    * Контакты - Структура - структура с полями "ТипКонтакта" и "ЗначениеКонтакта".
//    * Наименование - Строка - наименование точки самовывоза.
//  ТочкаСамовывоза - СправочникСсылка - ссылка на элемент справочника,который в прикладном решении является точкой самовывоза.
//
Процедура СоздатьТочкуСамовывоза(ДанныеТочки, ТочкаСамовывоза) Экспорт
	
	ТочкаСамовывоза = Справочники.Магазины.СоздатьЭлемент();
	ТочкаСамовывоза.Наименование = ДанныеТочки.Наименование;
	ТочкаСамовывоза.Записать();
	ТочкаСамовывоза = ТочкаСамовывоза.Ссылка;
	
КонецПроцедуры

// Вычисляет значение ставки НДС по переданному элементу справочника или перечисления.
//
// Параметры:
//   СтавкаНДС - ПеречислениеСсылка, СправочникСсылка - ставка НДС, выраженная элементом объекта метаданных прикладного решения.
//   ЗначениеСтавкиНДС - Число - Значение ставки НДС выраженное числом.
//
Процедура ПолучитьПоСтавкеНДСЗначениеДляВыгрузки(СтавкаНДС, ЗначениеСтавкиНДС) Экспорт
	
	ЗначениеСтавкиНДС = СтавкаНДС.Ставка;
	Возврат;
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
		ЗначениеСтавкиНДС = 20;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
		ЗначениеСтавкиНДС = 20;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		ЗначениеСтавкиНДС = 18;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
		ЗначениеСтавкиНДС = 18;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
		ЗначениеСтавкиНДС = 10;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		ЗначениеСтавкиНДС = 10;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
		ЗначениеСтавкиНДС = 0;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		ЗначениеСтавкиНДС = 0;
	Иначе
		ЗначениеСтавкиНДС = 20;
	КонецЕсли;
	
КонецПроцедуры

// В зависимости от настроек прикладного решения установка флага использования характеристик.
//
// Параметры:
//  ИспользоватьХарактеристики - Булево - установка признака использования характеристик.
//
// Пример:
//  ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики").
//
Процедура УстановитьПризнакИспользоватьХарактеристики(ИспользоватьХарактеристики) Экспорт
	
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
КонецПроцедуры

// Меняет статус заказа на "Отменен".
// Параметры:
//   ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//   ДокументСсылка - Ссылка - ссылка на документ Заказ, у которого нужно поменять статус.
Процедура ОтменитьЗаказ(ПрикладныеПараметры, ДокументСсылка) Экспорт
	
	НачатьТранзакцию();
	Попытка
		ДокументОбъект = ЭлектронноеВзаимодействиеРТ.ОбъектПоСсылкеДляИзменения(ДокументСсылка);
		
		ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовПокупателей.ПустаяСсылка");
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовПокупателей") Тогда
			ПричинаОтмены = ПрикладныеПараметры.ПричинаОтменыЗаказовПоУмолчанию;
		КонецЕсли;
		
		КоличествоОтмененныхСтрок = РозничныеПродажиСервер.ОтменитьСНепроданнымиТоварами(ДокументОбъект, "Товары", ПричинаОтмены, Истина);
		
		Если КоличествоОтмененныхСтрок > 0 Тогда
			Если ДокументСсылка.Проведен Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение)
			Иначе
				ДокументОбъект.Записать()
			КонецЕсли;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Проверяет была ли оплата по заказу.
//
// Параметры: 
//   ЗаказОплачен - Булево - признак того, что заказ был оплачен, влияет на статус оплаты заказа на сайте.
//   СтатусЗаказа - ПеречислениеСсылка - статус заказа в прикладном решении.
//   ДанныеДокументаКОплатеОстаток - Число - не оплаченный остаток денег по заказу.
//
Процедура ОпределитьСтатусОплатыЗаказа(ЗаказОплачен, СтатусЗаказа, 
										ДанныеДокументаКОплатеОстаток) Экспорт
	
	ЗаказОплачен = ДанныеДокументаКОплатеОстаток = 0;
	
КонецПроцедуры

// Проверяет текущее состояние заказа.
//
// Параметры:
//   ЗаказВРаботе - Булево - Признак того, что заказ был "обработан" в прикладном решении (т.е. поменял свой статус после загрузки с сайта).
//                           Данный признак влияет на статус заказа на сайте.
//   ДанныеДокументаСостояниеЗаказа - ПеречислениеСсылка, СправочникСсылка - статус заказа, который он может принимать в прикладном решении.
Процедура ОпределитьСтатусСостоянияЗаказаЗаказВРаботе(ЗаказВРаботе, ДанныеДокументаСостояниеЗаказа) Экспорт
	
	ЗаказВРаботе = НЕ ДанныеДокументаСостояниеЗаказа = Перечисления.СостоянияЗаказовПокупателей.Закрыт;
	
КонецПроцедуры

// Определяет была ли отгрузка товара по заказу.
//
// Параметры:
//   ЗаказОтгружен - Булево - признак того, что товар по заказу был отгружен. Влияет на статус отгрузки заказа на сайте.
//   ДанныеДокументаСтатусЗаказа - ПеречислениеСсылка, СправочникСсылка - статус, который может иметь заказ в прикладном решении.
//   ДанныеДокументаКОтгрузкеОстаток - Число - неотгруженный остаток по заказу (заказано было 7, а отгрузили 5).
Процедура ОпределитьСтатусОтгрузкиЗаказа(ЗаказОтгружен, ДанныеДокументаСтатусЗаказа,
											ДанныеДокументаКОтгрузкеОстаток) Экспорт
	
	ЗаказОтгружен = ДанныеДокументаКОтгрузкеОстаток = 0;
	
КонецПроцедуры

// Определение нужно ли считать НДС.
//
// Параметры:
//  СчитатьНДС - Булево - признак о необходимости считать НДС по заказу.
//  ВыборкаДокументовНалогообложениеНДС - ПеречислениеСсылка, СправочникСсылка - ссылка на объект.
//
Процедура ОпределитьНеобходимостьНДСВЗаказе(СчитатьНДС, ВыборкаДокументовНалогообложениеНДС) Экспорт
	
	СчитатьНДС = ВыборкаДокументовНалогообложениеНДС = "Облагается";
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения,
// в случае различий в наименовании справочников.
//
// Параметры:
//  СоответствиеДокументов - Соответствие - определяет соответствие служебных имен, используемых в библиотеке и
//                                          и реальных имен документов, используемых в прикладном решении. 
//                                          Обязательно должно содержать ключ "ЗаказПокупателя".
//
Процедура ПолучитьСоответствиеДокументов(СоответствиеДокументов) Экспорт
	
	СоответствиеДокументов.Вставить("ЗаказПокупателя","ЗаказПокупателя");
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения,
// в случае различий в наименовании справочников.
//
// Параметры:
//  СоответствиеСправочников - Соответствие - определяет соответствие служебных имен, используемых в библиотеке и
//                                          и реальных имен справочников, используемых в прикладном решении. 
//                                          Обязательно должно содержать ключи "Номенклатура", "ТочкиСамовывоза",
//                                          "ХарактеристикиНоменклатуры", "Организации", 
//                                          "НоменклатураПрисоединенныеФайлы", "ВидыЦен", "Склады", "ВидыНоменклатуры".
//
Процедура ПолучитьСоответствиеСправочников(СоответствиеСправочников) Экспорт
	
	СоответствиеСправочников.Вставить("Номенклатура", "Номенклатура");
	
	СоответствиеСправочников.Вставить("ХарактеристикиНоменклатуры",
													"ХарактеристикиНоменклатуры");
	СоответствиеСправочников.Вставить("НаборыДополнительныхРеквизитовИСведений",
										"НаборыДополнительныхРеквизитовИСведений");
										
	СоответствиеСправочников.Вставить("ВидыЦен", "ВидыЦен");
	СоответствиеСправочников.Вставить("НоменклатураПрисоединенныеФайлы",
										"НоменклатураПрисоединенныеФайлы");
	СоответствиеСправочников.Вставить("Склады", "Магазины");
	СоответствиеСправочников.Вставить("ТочкиСамовывоза", "Магазины");
	СоответствиеСправочников.Вставить("Организации", "Организации");
	СоответствиеСправочников.Вставить("ВидыНоменклатуры", "ВидыНоменклатуры");
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения, в случае различий в наименовании справочников.
//
// Параметры:
//  СоответствиеПВХ - Соответствие - определяет соответствие служебных имен, используемых в библиотеке и
//                                   и реальных имен планов видов характеристик, используемых в прикладном решении.
//                                   Обязательно должно содержать ключ "ДополнительныеРеквизитыИСведения".
//
Процедура ПолучитьСоответствиеПВХ(СоответствиеПВХ) Экспорт
	
	СоответствиеПВХ.Вставить("ДополнительныеРеквизитыИСведения", "ДополнительныеРеквизитыИСведения");
	
КонецПроцедуры

// Заполняет соответствие форм библиотеки и прикладного решения.
// Параметры:
//   СоответствиеФорм - Соответствие - используется для переопределения форм, вызываемых библиотекой.
//                                     Обязательно должно содержать ключ "ФормаВыбораТочекСамовывоза".
Процедура ПолучитьСоответствиеФорм(СоответствиеФорм) Экспорт
	
	СоответствиеФорм.Вставить("Справочник.ТипыЦен.ФормаВыбора","Справочник.ВидыЦен.ФормаВыбора");
	СоответствиеФорм.Вставить("Справочник.Склады.ФормаВыбора","Справочник.Магазины.ФормаВыбора");
	СоответствиеФорм.Вставить("ФормаВыбораТочекСамовывоза", "Справочник.Магазины.ФормаВыбора");
	
КонецПроцедуры

// Заполняет массив реквизитов формы, значение которых должно быть сохранено.
//
// Параметры:
//  МассивРеквизитов - Массив - реквизиты для заполнения.
//
Процедура ЗаполнитьПрикладныеРеквизитыФормыУзлаОбменССайтом(МассивРеквизитов) Экспорт
	
	МассивРеквизитов.Добавить("СписокТочекСамовывоза");
	МассивРеквизитов.Добавить("СпособИдентификацииКонтрагентов");
	МассивРеквизитов.Добавить("ГруппаДляНовойНоменклатуры");
	МассивРеквизитов.Добавить("ГруппаДляНовыхКонтрагентов");
	МассивРеквизитов.Добавить("Организация");
	МассивРеквизитов.Добавить("НомерНаСайте");
	МассивРеквизитов.Добавить("ДатаНаСайте");
	МассивРеквизитов.Добавить("ВидНоменклатурыТоварДляНовойНоменклатуры");
	МассивРеквизитов.Добавить("ВидНоменклатурыУслугаДляНовойНоменклатуры");
	МассивРеквизитов.Добавить("ПричинаОтменыЗаказовПоУмолчанию");
	МассивРеквизитов.Добавить("СоответствиеСтатусовЗаказов");
	МассивРеквизитов.Добавить("ЕдиницаИзмеренияНовойНоменклатуры");
	МассивРеквизитов.Добавить("КассаККМ");
	МассивРеквизитов.Добавить("УдаленнаяФискализация");
	
КонецПроцедуры

// Добавляет произвольные поля в структуру ПрикладныеПараметры.
//
// Параметры:
//   ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                     подсистемы в прикладное решение.
//	
Процедура ДополнитьПараметрыПрикладногоРешения(ПрикладныеПараметры) Экспорт
	
	ПрикладныеПараметры.Вставить("ВыгружатьХарактеристикиВКаталог", Истина);
	ПрикладныеПараметры.Вставить("КлассифицироватьПоВидамНоменклатуры", Истина);
	
КонецПроцедуры

// формирует прокси по настройкам прокси (передаваемому параметру).
//
// Параметры:
//  НастройкаПроксиСервера - Соответствие - настройка прокси-сервера:
//    * ИспользоватьПрокси - Булево - использовать ли прокси-сервер.
//    * НеИспользоватьПроксиДляЛокальныхАдресов - Булево - использовать ли прокси-сервер для локальных адресов.
//    * ИспользоватьСистемныеНастройки - Булево - использовать ли системные настройки прокси-сервера.
//    * Сервер       - Строка - адрес прокси-сервера.
//    * Порт         - Число - порт прокси-сервера.
//    * Пользователь - Строка - имя пользователя для авторизации на прокси-сервере.
//    * Пароль       - Строка - пароль пользователя.
//
Процедура ПолучитьНастройкиПроксиСервера(НастройкаПроксиСервера) Экспорт
	
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	
КонецПроцедуры

// Заполняет номер и дату заказа на сайте.
//
// Параметры:
//	ДокСсылка - Ссылка - ссылка на документ Заказ.
//	УзелОбмена - Структура - параметры прикладного решения, размещенные в форме узла плана обмена.
//  ДанныеССайта - структура - заполняется в процедуре.
//     * НомерЗаказаНаСайте - Строка - номер заказа на сайте.
//     * ДатаЗаказаНаСайте - Дата - дата заказа на сайте.
//
Процедура РеквизитыЗаказаНаСайте(ДокСсылка, УзелОбмена, ДанныеССайта) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателя.НомерЗаказаНаСайте,
	|	ЗаказПокупателя.ДатаЗаказаНаСайте
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		ДанныеССайта = Новый Структура;
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ДанныеССайта.Вставить("НомерЗаказаНаСайте", Выборка.НомерЗаказаНаСайте);
		ДанныеССайта.Вставить("ДатаЗаказаНаСайте", Выборка.ДатаЗаказаНаСайте);
	КонецЕсли;
	
КонецПроцедуры 

// Записывает состояние оплаты заказа покупателя.
// Параметры:
//  ЗаказПокупателя - Документ.ЗаказПокупателя
//  УдаляемыйДокумент - Заполняется при вызове процедуры ОбработкаУдаленияПроведения, т.к. в самой процедуре документ еще проведен
Процедура ЗаписатьСостояниеОплатыЗаказаПокупателя(ЗаказПокупателя, ДокументДвижения, УдаляемыйДокумент = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ОплатаОтПокупателяПлатежнойКартой.ХозяйственнаяОперация = &ХозяйственнаяОперацияВовзрат
		|			ТОГДА -ОплатаОтПокупателяПлатежнойКартой.СуммаДокумента
		|		ИНАЧЕ ОплатаОтПокупателяПлатежнойКартой.СуммаДокумента
		|	КОНЕЦ КАК СуммаДокумента,
		|	ОплатаОтПокупателяПлатежнойКартой.ПробитЧек КАК ПробитЧек
		|ПОМЕСТИТЬ ТаблицаВозможныхОплат
		|ИЗ
		|	Документ.ОплатаОтПокупателяПлатежнойКартой КАК ОплатаОтПокупателяПлатежнойКартой
		|ГДЕ
		|	ОплатаОтПокупателяПлатежнойКартой.ЗаказПокупателя = &ЗаказПокупателя
		|	И ОплатаОтПокупателяПлатежнойКартой.Проведен
		|	И НЕ ОплатаОтПокупателяПлатежнойКартой.Ссылка = &УдаляемыйДокумент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПриходныйКассовыйОрдер.СуммаДокумента,
		|	ПриходныйКассовыйОрдер.ПробитЧек
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
		|ГДЕ
		|	ПриходныйКассовыйОрдер.ЗаказПокупателя = &ЗаказПокупателя
		|	И ПриходныйКассовыйОрдер.Проведен
		|	И НЕ ПриходныйКассовыйОрдер.Ссылка = &УдаляемыйДокумент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА РегистрацияБезналичнойОплаты.ХозяйственнаяОперация = &ХозяйственнаяОперацияВовзрат
		|			ТОГДА -РегистрацияБезналичнойОплаты.СуммаДокумента
		|		ИНАЧЕ РегистрацияБезналичнойОплаты.СуммаДокумента
		|	КОНЕЦ,
		|	РегистрацияБезналичнойОплаты.ПробитЧек
		|ИЗ
		|	Документ.РегистрацияБезналичнойОплаты КАК РегистрацияБезналичнойОплаты
		|ГДЕ
		|	РегистрацияБезналичнойОплаты.ДокументОснование = &ЗаказПокупателя
		|	И РегистрацияБезналичнойОплаты.Проведен
		|	И НЕ РегистрацияБезналичнойОплаты.Ссылка = &УдаляемыйДокумент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЧекККМОплата.Ссылка.ВидОперации = &ВидыОперацийЧекККМВовзрат
		|			ТОГДА -ЧекККМОплата.Сумма
		|		ИНАЧЕ ЧекККМОплата.Сумма
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ЧекККМОплата.Ссылка.СтатусЧекаККМ = &СтатусПробит
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|ИЗ
		|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
		|ГДЕ
		|	ЧекККМОплата.Ссылка.ЗаказПокупателя = &ЗаказПокупателя
		|	И ЧекККМОплата.Ссылка.Проведен
		|	И ЧекККМОплата.ВидОплаты.ТипОплаты В(&ТипыОплаты)
		|	И НЕ ЧекККМОплата.Ссылка = &УдаляемыйДокумент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	-РасходныйКассовыйОрдер.СуммаДокумента,
		|	РасходныйКассовыйОрдер.ПробитЧек
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
		|ГДЕ
		|	РасходныйКассовыйОрдер.ДокументОснование.ЗаказПокупателя = &ЗаказПокупателя
		|	И РасходныйКассовыйОрдер.Проведен
		|	И НЕ РасходныйКассовыйОрдер.Ссылка = &УдаляемыйДокумент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ТаблицаВозможныхОплат.СуммаДокумента) КАК СуммаДокумента,
		|	ТаблицаВозможныхОплат.ПробитЧек КАК ПробитЧек
		|ИЗ
		|	ТаблицаВозможныхОплат КАК ТаблицаВозможныхОплат
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаВозможныхОплат.ПробитЧек";
		
		Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
		
		СтатусыЧекаККМ = Новый Массив;
		
		СтатусыЧекаККМ.Добавить(Перечисления.СтатусыЧековККМ.ПустаяСсылка());
		СтатусыЧекаККМ.Добавить(Перечисления.СтатусыЧековККМ.Пробитый);
		СтатусыЧекаККМ.Добавить(Перечисления.СтатусыЧековККМ.Архивный);
		
		Запрос.УстановитьПараметр("СтатусыЧекаККМ", СтатусыЧекаККМ);
		
		Запрос.УстановитьПараметр("СтатусПробит", Перечисления.СтатусыЧековККМ.Пробитый);
		Запрос.УстановитьПараметр("ХозяйственнаяОперацияВовзрат", Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
		Запрос.УстановитьПараметр("ВидыОперацийЧекККМВовзрат", Перечисления.ВидыОперацийЧекККМ.Возврат);
		
		ТипыОплаты = Новый Массив;
		
		ТипыОплаты.Добавить(Перечисления.ТипыОплатЧекаККМ.Наличные);
		ТипыОплаты.Добавить(Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта);
		ТипыОплаты.Добавить(Перечисления.ТипыОплатЧекаККМ.БанковскийКредит);
		ТипыОплаты.Добавить(Перечисления.ТипыОплатЧекаККМ.ПодарочныйСертификат);
		ТипыОплаты.Добавить(Перечисления.ТипыОплатЧекаККМ.Бонусы);
		ТипыОплаты.Добавить(Перечисления.ТипыОплатЧекаККМ.ВРассрочку);
		
		Запрос.УстановитьПараметр("ТипыОплаты", ТипыОплаты);
		
		Запрос.УстановитьПараметр("УдаляемыйДокумент", УдаляемыйДокумент);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		ОбщаяОплата = 0;
		ОбщаяОплатаФискализированных = 0;
		
		Пока Выборка.Следующий() Цикл
			ОбщаяОплата = ОбщаяОплата + Выборка.СуммаДокумента;
			Если Выборка.ПробитЧек Тогда
				ОбщаяОплатаФискализированных = ОбщаяОплатаФискализированных + Выборка.СуммаДокумента;
			КонецЕсли;
		КонецЦикла;
		
		СуммаЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПокупателя, "СуммаДокумента");
		
		Если ОбщаяОплатаФискализированных >= СуммаЗаказа Тогда
			СостояниеОплатыЗаказаПокупателя = Перечисления.СостоянияОплатыЗаказаПокупателя.Фискализирован;
		ИначеЕсли ОбщаяОплата >= СуммаЗаказа Тогда
			СостояниеОплатыЗаказаПокупателя = Перечисления.СостоянияОплатыЗаказаПокупателя.ОплаченПолностью;
		ИначеЕсли ОбщаяОплата > 0 Тогда
			СостояниеОплатыЗаказаПокупателя = Перечисления.СостоянияОплатыЗаказаПокупателя.ОплаченЧастично;
		Иначе
			СостояниеОплатыЗаказаПокупателя = Перечисления.СостоянияОплатыЗаказаПокупателя.НеОплачен;
		КонецЕсли;
		
		ПоследнееСостояниеОплатыЗаказаПокупателя = ПоследнееСостояниеОплатыЗаказаПокупателя(ЗаказПокупателя);
		Если НЕ ПоследнееСостояниеОплатыЗаказаПокупателя = СостояниеОплатыЗаказаПокупателя Тогда
			ЗаписатьВРегистрСостояниеОплатыЗаказаПокупателя(ЗаказПокупателя, 
															СостояниеОплатыЗаказаПокупателя, 
															ДокументДвижения, 
															ЗначениеЗаполнено(УдаляемыйДокумент));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьВРегистрСостояниеОплатыЗаказаПокупателя(ЗаказПокупателя, СостояниеОплатыЗаказаПокупателя, ДокументДвижения, СторноДвижения) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.СостояниеОплатыЗаказаПокупателя.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ЗаказПокупателя  = ЗаказПокупателя;
	МенеджерЗаписи.Состояние        = СостояниеОплатыЗаказаПокупателя;
	МенеджерЗаписи.ДокументДвижения = ДокументДвижения;
	МенеджерЗаписи.СторноДвижения   = СторноДвижения;
	
	МенеджерЗаписи.Период = ТекущаяДатаСеанса();
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Функция ПоследнееСостояниеОплатыЗаказаПокупателя(ЗаказПокупателя) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СостояниеОплатыЗаказаПокупателяСрезПоследних.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.СостояниеОплатыЗаказаПокупателя.СрезПоследних КАК СостояниеОплатыЗаказаПокупателяСрезПоследних
	|ГДЕ
	|	СостояниеОплатыЗаказаПокупателяСрезПоследних.ЗаказПокупателя = &ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("ЗаказПокупателя",ЗаказПокупателя);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Состояние;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция КассаККМИнтернетМагазина(УзелОбмена)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КассыККМИнтернетМагазинов.КассаККМ КАК КассаККМ
	|ИЗ
	|	РегистрСведений.КассыККМИнтернетМагазинов КАК КассыККМИнтернетМагазинов
	|ГДЕ
	|	КассыККМИнтернетМагазинов.УзелОбмена = &УзелОбмена";
	
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КассаККМ;
	КонецЕсли;
	
	Возврат Справочники.КассыККМ.ПустаяСсылка();
	
КонецФункции

Процедура ЗаписатьСостояниеДоставкиЗаказаПокупателя(ЗаказПокупателя, ДокументДвижения, СторноДвижения = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		СтатусЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПокупателя,"Статус");
		ИспользоватьРезервированиеПоЗаказамПокупателей = ПолучитьФункциональнуюОпцию("ИспользоватьРезервированиеПоЗаказамПокупателей");
		
		Если СтатусЗаказа = Перечисления.СтатусыЗаказовПокупателей.Закрыт Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПродажиОбороты.ЗаказПокупателя КАК ЗаказПокупателя
			|ИЗ
			|	РегистрНакопления.Продажи.Обороты(, , , ЗаказПокупателя = &ЗаказПокупателя) КАК ПродажиОбороты";
			
			Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				СостояниеДоставкиЗаказаПокупателя = Перечисления.СостоянияДоставкиЗаказаПокупателя.Отменен;
			Иначе
				СостояниеДоставкиЗаказаПокупателя = Перечисления.СостоянияДоставкиЗаказаПокупателя.ДоставкаЗавершена;
			КонецЕсли;
		Иначе
			ТоварОтгружался = Ложь;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПродажиОбороты.ЗаказПокупателя КАК ЗаказПокупателя
			|ИЗ
			|	РегистрНакопления.Продажи.Обороты(, , , ЗаказПокупателя = &ЗаказПокупателя) КАК ПродажиОбороты";
			
			Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
			
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				// Отгрузка была
				ТоварОтгружался = Истина;
			КонецЕсли;
			
			Если ТоварОтгружался Тогда
				
				Запрос = Новый Запрос;
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ЗаказыПокупателейОстатки.Заказ КАК Заказ,
				|	ЗаказыПокупателейОстатки.КодСтроки КАК КодСтроки,
				|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
				|	ЗаказыПокупателейОстатки.Характеристика КАК Характеристика,
				|	ЗаказыПокупателейОстатки.ЗаказаноОстаток КАК ЗаказаноОстаток
				|ИЗ
				|	РегистрНакопления.ЗаказыПокупателей.Остатки(, Заказ = &ЗаказПокупателя) КАК ЗаказыПокупателейОстатки";
				
				Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
				
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				
				Если Выборка.Следующий() Тогда
					СостояниеДоставкиЗаказаПокупателя = Перечисления.СостоянияДоставкиЗаказаПокупателя.ОтгруженЧастично;
				Иначе
					СостояниеДоставкиЗаказаПокупателя = Перечисления.СостоянияДоставкиЗаказаПокупателя.Отгружен;
				КонецЕсли;
			ИначеЕсли НЕ ИспользоватьРезервированиеПоЗаказамПокупателей И 
				СтатусЗаказа = Перечисления.СтатусыЗаказовПокупателей.Согласован Тогда
				СостояниеДоставкиЗаказаПокупателя = Перечисления.СостоянияДоставкиЗаказаПокупателя.ГотовКОтгрузке;
			ИначеЕсли НЕ ИспользоватьРезервированиеПоЗаказамПокупателей Тогда
				СостояниеДоставкиЗаказаПокупателя = Перечисления.СостоянияДоставкиЗаказаПокупателя.НеСобран;
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	МИНИМУМ(ВЫБОР
				|			КОГДА ЗаказПокупателяТовары.Резервировать
				|					И НЕ ЗаказПокупателяТовары.Отменено
				|				ТОГДА 1
				|			ИНАЧЕ 2
				|		КОНЕЦ) КАК ЗарезервированоМинимум,
				|	МАКСИМУМ(ВЫБОР
				|			КОГДА ЗаказПокупателяТовары.Резервировать
				|					И НЕ ЗаказПокупателяТовары.Отменено
				|				ТОГДА 1
				|			ИНАЧЕ 2
				|		КОНЕЦ) КАК ЗарезервированоМаксимум
				|ПОМЕСТИТЬ ТаблизаВЗапросе
				|ИЗ
				|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
				|ГДЕ
				|	ЗаказПокупателяТовары.Ссылка = &ЗаказПокупателя
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	ТаблизаВЗапросе.ЗарезервированоМаксимум КАК ЗарезервированоМаксимум,
				|	ТаблизаВЗапросе.ЗарезервированоМинимум КАК ЗарезервированоМинимум
				|ИЗ
				|	ТаблизаВЗапросе КАК ТаблизаВЗапросе";
				
				Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
				Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
				
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				
				Если Выборка.Следующий() Тогда
				
					Если Выборка.ЗарезервированоМаксимум = 1 И Выборка.ЗарезервированоМинимум = 1 Тогда
						СостояниеДоставкиЗаказаПокупателя = Перечисления.СостоянияДоставкиЗаказаПокупателя.ГотовКОтгрузке;
					ИначеЕсли Выборка.ЗарезервированоМинимум = 1 И Выборка.ЗарезервированоМаксимум = 2 Тогда
						СостояниеДоставкиЗаказаПокупателя = Перечисления.СостоянияДоставкиЗаказаПокупателя.ГотовКОтгрузкеЧастично;
					Иначе
						СостояниеДоставкиЗаказаПокупателя = Перечисления.СостоянияДоставкиЗаказаПокупателя.НеСобран;
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЕсли
			
		КонецЕсли;
		
		ПоследнееСостояниеДоставкиЗаказаПокупателя = ПоследнееСостояниеДоставкиЗаказаПокупателя(ЗаказПокупателя);
		Если НЕ ПоследнееСостояниеДоставкиЗаказаПокупателя = СостояниеДоставкиЗаказаПокупателя Тогда
			ЗаписатьВРегистрСостояниеДоставкиЗаказаПокупателя(ЗаказПокупателя, СостояниеДоставкиЗаказаПокупателя, ДокументДвижения, СторноДвижения);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаписатьВРегистрСостояниеДоставкиЗаказаПокупателя(ЗаказПокупателя, СостояниеДоставкиЗаказаПокупателя, ДокументДвижения, СторноДвижения) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.СостояниеДоставкиЗаказаПокупателя.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ЗаказПокупателя = ЗаказПокупателя;
	МенеджерЗаписи.Состояние = СостояниеДоставкиЗаказаПокупателя;
	МенеджерЗаписи.ДокументДвижения = ДокументДвижения;
	МенеджерЗаписи.СторноДвижения   = СторноДвижения;
	
	МенеджерЗаписи.Период = ТекущаяДатаСеанса();
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Функция ПоследнееСостояниеДоставкиЗаказаПокупателя(ЗаказПокупателя) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостояниеДоставкиЗаказаПокупателя.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.СостояниеДоставкиЗаказаПокупателя.СрезПоследних КАК СостояниеДоставкиЗаказаПокупателя
	|ГДЕ
	|	СостояниеДоставкиЗаказаПокупателя.ЗаказПокупателя = &ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Состояние;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПоследнееСостояниеОплатыЗаказаПокупателя()

Процедура ФормаУзлаПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	ИспользоватьЗаказыПокупателей = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПокупателей");
	Если ИспользоватьЗаказыПокупателей Тогда
		КассаККМ = Форма.КассаККМ;
		Если НЕ КассаККМ = КассаККМИнтернетМагазина(ТекущийОбъект.Ссылка) Тогда
			ЗаписатьВРегистрКассыККМИнтернетМагазинов(ТекущийОбъект.Ссылка, КассаККМ)
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьВРегистрКассыККМИнтернетМагазинов(УзелОбмена, КассаККМ) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.КассыККМИнтернетМагазинов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.УзелОбмена = УзелОбмена;
	МенеджерЗаписи.КассаККМ = КассаККМ;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Выполняет дополнительные процедуры после записи заказа.
//
// Параметры:
//   ЗаказПокупателя - ДокументСсылка - ссылка на документ ЗаказПокупателя.
//   ПрикладныеПараметры - Структура - прикладные параметры обмена.
//   СвойстваЗаказа - Соответствие - содержит строковое представления свойств (ключ) и значений (значение) заказа.
//
Процедура ПослеЗаписиЗаказа(ЗаказПокупателя, ПрикладныеПараметры, СвойстваЗаказа) Экспорт
	
	ДополнительныеСведенияЗаказа = Новый Структура;
	ДозаполнитьРеквизитыЗаказа(ДополнительныеСведенияЗаказа, СвойстваЗаказа);
		
	Если ДополнительныеСведенияЗаказа.Оплачен Тогда
		
		Если НЕ ЗаказПокупателя.Проведен Тогда
		
			Попытка
				ЗаказПокупателяОбъект = ЗаказПокупателя.ПолучитьОбъект();
				ЗаказПокупателяОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
			
			КонецПопытки;
		
		КонецЕсли;
		
		Если ЗаказПокупателя.Проведен Тогда
			// Проверяем есть ли документ оплаты
			ЕстьДокументОплаты = Ложь;
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПриходныйКассовыйОрдер.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
			|ГДЕ
			|	ПриходныйКассовыйОрдер.ЗаказПокупателя = &ЗаказПокупателя
			|	И ПриходныйКассовыйОрдер.Проведен
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ОплатаОтПокупателяПлатежнойКартой.Ссылка
			|ИЗ
			|	Документ.ОплатаОтПокупателяПлатежнойКартой КАК ОплатаОтПокупателяПлатежнойКартой
			|ГДЕ
			|	ОплатаОтПокупателяПлатежнойКартой.ЗаказПокупателя = &ЗаказПокупателя
			|	И ОплатаОтПокупателяПлатежнойКартой.Проведен
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РегистрацияБезналичнойОплаты.Ссылка
			|ИЗ
			|	Документ.РегистрацияБезналичнойОплаты КАК РегистрацияБезналичнойОплаты
			|ГДЕ
			|	РегистрацияБезналичнойОплаты.ДокументОснование = &ЗаказПокупателя
			|	И РегистрацияБезналичнойОплаты.Проведен
			|	И ВЫБОР
			|			КОГДА &УдаленнаяФискализация = ИСТИНА
			|				ТОГДА РегистрацияБезналичнойОплаты.ПробитЧек
			|		КОНЕЦ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЧекККМ.Ссылка
			|ИЗ
			|	Документ.ЧекККМ КАК ЧекККМ
			|ГДЕ
			|	ЧекККМ.Проведен
			|	И ЧекККМ.ЗаказПокупателя = &ЗаказПокупателя
			|	И ЧекККМ.СтатусЧекаККМ В(&СтатусыЧекаККМ)";
			
			Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
			Запрос.УстановитьПараметр("УдаленнаяФискализация", ПрикладныеПараметры.УдаленнаяФискализация);
			
			СтатусыЧекаККМ = Новый Массив;
			
			СтатусыЧекаККМ.Добавить(Перечисления.СтатусыЧековККМ.ПустаяСсылка());
			СтатусыЧекаККМ.Добавить(Перечисления.СтатусыЧековККМ.Пробитый);
			СтатусыЧекаККМ.Добавить(Перечисления.СтатусыЧековККМ.Архивный);
			
			Запрос.УстановитьПараметр("СтатусыЧекаККМ", СтатусыЧекаККМ);
			
			Результат = Запрос.Выполнить();
			
			ЕстьДокументОплаты = НЕ Результат.Пустой();
			
			// создаем документ оплаты
			
			Если НЕ ЕстьДокументОплаты Тогда
				
				КассаККМ = ПрикладныеПараметры.КассаККМ;
				
				ДокументОплаты = Документы.РегистрацияБезналичнойОплаты.СоздатьДокумент();
				
				ДокументОплаты.Дата = ЗаказПокупателя.Дата;
				ДокументОплаты.Заполнить(ЗаказПокупателя);
				ДокументОплаты.КассаККМ = КассаККМ;
				ДокументОплаты.УстановитьНовыйНомер();
				
				Если Не ПрикладныеПараметры.УдаленнаяФискализация Тогда
					ДокументОплаты.ПробитЧек = ДополнительныеСведенияЗаказа.Фискализирован;
				Иначе
					КонтактнаяИнформация = ПолучитьКонтактнуюИнформациюДляОтправкиЧека(КассаККМ, ЗаказПокупателя);
					ЗаполнитьЗначенияСвойств(ДокументОплаты, КонтактнаяИнформация);
				КонецЕсли;
				Если ПолучитьФункциональнуюОпцию("ВестиУчетБезналичныхДенежныхСредств") Тогда
					ДокументОплаты.БанковскийСчетОрганизации = Справочники.БанковскиеСчета.ПолучитьБанковскийСчетПоУмолчанию(ДокументОплаты.Организация, Истина);
				КонецЕсли;
				
				ДокументОплаты.Записать(РежимЗаписиДокумента.Проведение);
				
				Если ПрикладныеПараметры.УдаленнаяФискализация Тогда
					ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(КассаККМ);
					ДанныеОплаты = Документы.РегистрацияБезналичнойОплаты.ПодготовитьДанныеДляПробитияЧека(ДокументОплаты.Ссылка, ПараметрыКассыККМ.РаспределениеВыручкиПоСекциям, 0);
					ДанныеОплаты.ИдентификаторФискальнойЗаписи = Строка(Новый УникальныйИдентификатор);
					ИдентификаторЧека = МенеджерОборудованияВызовСервера.ДобавитьЧекВОчередьЧековККТ(ДанныеОплаты);
					Если СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
					
						УстановитьПривилегированныйРежим(Истина);
						ИдентификаторОбсужденияСтрока = Константы.ИдентификаторОбсужденияФискализации.Получить();
						Если ЗначениеЗаполнено(ИдентификаторОбсужденияСтрока) Тогда
							ИдентификаторОбсуждения = Новый ИдентификаторОбсужденияСистемыВзаимодействия(ИдентификаторОбсужденияСтрока);
							Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(ИдентификаторОбсуждения);
							НовоеСообщение = СистемаВзаимодействия.СоздатьСообщение(ИдентификаторОбсуждения);
							НовоеСообщение.Дата = ТекущаяДата();
							ТекстСообщения = НСтр("ru='Фискализация чека'") + Символы.НПП + ИдентификаторЧека;
							Если Не ПустаяСтрока(ДанныеОплаты.ОрганизацияИНН) Тогда
								ТекстСообщения = ТекстСообщения + Символы.НПП + ДанныеОплаты.ОрганизацияИНН;
							КонецЕсли;
							НовоеСообщение.Текст = ТекстСообщения;
							НовоеСообщение.Записать();
						КонецЕсли;
					
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// К существующему описанию добавляет текст
//
Процедура ДобавитьОписаниеОшибки(Описание, Дополнение)

	Если ПустаяСтрока(Описание) Тогда
		Описание = Дополнение;
	Иначе
		Описание = Описание + Символы.ПС + Дополнение;
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьПараметрыЗапросаПоЦенообразованию(ПараметрыКомпоновки)
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "ИспользоватьАссортимент", 
								  ПолучитьФункциональнуюОпцию("УстанавливатьВидыЦенВАссортименте"));
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "ПериодАссортимента", 
								  ТекущаяДатаСеанса());
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "Период", 
								  ТекущаяДатаСеанса());
	
	ПустаяЕдиница = Справочники.БазовыеЕдиницыИзмерения.ПустаяСсылка();
	ЕдиницаИзмеренияПоУмолчанию = ЭлектронноеВзаимодействиеРТ.НайтиСсылкуНаОбъектПоРеквизиту("БазовыеЕдиницыИзмерения", 
		"Код", "796");
	Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияПоУмолчанию) Тогда
		ДанныеНовойЕдиницыИзмерения = Новый Структура;
		ДанныеНовойЕдиницыИзмерения.Вставить("КодБазовойЕдиницы", "796");
		ДанныеНовойЕдиницыИзмерения.Вставить("НаименованиеБазовойЕдиницы", "шт");
		ЕдиницаИзмеренияПоУмолчанию = НайтиСоздатьЕдиницуИзмерения(ДанныеНовойЕдиницыИзмерения);
	КонецЕсли;
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "ПустаяЕдиница", 
								  ПустаяЕдиница);
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "ЕдиницаПоУмолчанию", 
								  ЕдиницаИзмеренияПоУмолчанию);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БазовыеЕдиницыИзмерения.Ссылка,
	|	БазовыеЕдиницыИзмерения.ВерсияДанных,
	|	БазовыеЕдиницыИзмерения.ПометкаУдаления,
	|	БазовыеЕдиницыИзмерения.Код,
	|	БазовыеЕдиницыИзмерения.Наименование,
	|	БазовыеЕдиницыИзмерения.НаименованиеПолное,
	|	БазовыеЕдиницыИзмерения.МеждународноеСокращение,
	|	БазовыеЕдиницыИзмерения.Предопределенный,
	|	БазовыеЕдиницыИзмерения.ИмяПредопределенныхДанных
	|ИЗ
	|	Справочник.БазовыеЕдиницыИзмерения КАК БазовыеЕдиницыИзмерения
	|ГДЕ
	|	БазовыеЕдиницыИзмерения.Ссылка = &ЕдиницаИзмеренияПоУмолчанию";
	
	Запрос.УстановитьПараметр("ЕдиницаИзмеренияПоУмолчанию", ЕдиницаИзмеренияПоУмолчанию);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "КодЕдиницыПоУмолчанию", 
								  Выборка.Код);
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "НаименованиеЕдиницыПоУмолчанию", 
								  Выборка.Наименование);
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "НаименованиеПолноеЕдиницыПоУмолчанию", 
								  Выборка.НаименованиеПолное);
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "МеждународноеСокращениеЕдиницыПоУмолчанию", 
								  Выборка.МеждународноеСокращение);
	
КонецПроцедуры

Процедура УстановитьПараметрКомпоновки(ПараметрыКомпоновки, ИмяПараметра, ЗначениеПараметра)
	
	ЭлементПараметра = ПараметрыКомпоновки.Добавить();
	ЭлементПараметра.Имя = ИмяПараметра;
	ЭлементПараметра.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ЭлементПараметра.Значение = ЗначениеПараметра;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьДокумента(Документ, СтруктураРеквизитовТовары, Параметры)
	
	Документ.Товары.Очистить();
	Для Каждого ТекСтрока Из СтруктураРеквизитовТовары Цикл
		
		НоваяСтрока = Документ.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.Характеристика = ТекСтрока.Характеристика;
		НоваяСтрока.КоличествоУпаковок = ТекСтрока.Количество;
		НоваяСтрока.СтавкаНДС = ПолучитьПоСтавкеНДСЗначениеДляЗагрузки(ТекСтрока.СтавкаНДС);
		
	КонецЦикла;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке",
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДССкладВидНалогаВШапке(Документ));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВТЧ(Документ));
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , Документ.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
КонецПроцедуры

Функция НайтиНоменклатуруПоАртикулуНаименованию(Артикул, Наименование)
	
	Если ЗначениеЗаполнено(Артикул) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Артикул = &Артикул
		|	И НЕ Номенклатура.ЭтоГруппа");
		
		Запрос.УстановитьПараметр("Артикул", Артикул);
		
	ИначеЕсли ЗначениеЗаполнено(Наименование) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Наименование = &Наименование
		|	И НЕ Номенклатура.ЭтоГруппа");
		
		Запрос.УстановитьПараметр("Наименование", Наименование);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат.Выгрузить()[0][0];
	
КонецФункции

// Вычисляет значение ставки НДС по переданному значению.
//
// Параметры:
//  ЗначениеСтавкиНДС - Число
//
// Возвращаемое значение:
//  Перечисление.СтавкиНДС
Функция ПолучитьПоСтавкеНДСЗначениеДляЗагрузки(ЗначениеСтавкиНДС)

	Возврат Справочники.СтавкиНДС.ПолучитьСтавкуНДСПоЗначению(ЗначениеСтавкиНДС);
	
	Если ЗначениеСтавкиНДС = "20" ИЛИ ЗначениеСтавкиНДС = 20 Тогда
		Возврат Перечисления.СтавкиНДС.НДС20;	
	ИначеЕсли ЗначениеСтавкиНДС = "18" ИЛИ ЗначениеСтавкиНДС = 18 Тогда
		Возврат Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли ЗначениеСтавкиНДС = "10" ИЛИ ЗначениеСтавкиНДС = 10 Тогда
		Возврат Перечисления.СтавкиНДС.НДС10;
	ИначеЕсли ЗначениеСтавкиНДС = "0" ИЛИ ЗначениеСтавкиНДС = 0 Тогда
		Возврат Перечисления.СтавкиНДС.БезНДС;
	Иначе
		Возврат Перечисления.СтавкиНДС.НДС20;
	КонецЕсли;
	
КонецФункции

Функция НайтиСоздатьЕдиницуИзмерения(ДанныеЕдиницыИзмерения)
	
	КодБазовойЕдиницы = "";
	Если ДанныеЕдиницыИзмерения.Свойство("КодБазовойЕдиницы") Тогда
		КодБазовойЕдиницы = ДанныеЕдиницыИзмерения.КодБазовойЕдиницы;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодБазовойЕдиницы)Тогда
		ЕдиницаИзмерения = ЭлектронноеВзаимодействиеРТ.НайтиСсылкуНаОбъектПоРеквизиту("БазовыеЕдиницыИзмерения", "Код", КодБазовойЕдиницы);
		Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			Возврат ЕдиницаИзмерения;
		КонецЕсли;
	КонецЕсли;
	
	НаименованиеБазовойЕдиницы = "";
	Если ДанныеЕдиницыИзмерения.Свойство("НаименованиеБазовойЕдиницы") Тогда
		НаименованиеБазовойЕдиницы = ДанныеЕдиницыИзмерения.НаименованиеБазовойЕдиницы;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НаименованиеБазовойЕдиницы) Тогда
		ЕдиницаИзмерения = ЭлектронноеВзаимодействиеРТ.НайтиСсылкуНаОбъектПоРеквизиту("БазовыеЕдиницыИзмерения", "Наименование", НаименованиеБазовойЕдиницы);
		Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			Возврат ЕдиницаИзмерения;
		КонецЕсли;
	КонецЕсли;
	
	ЕдиницаИзмерения = ЭлектронноеВзаимодействиеРТ.НайтиСсылкуНаОбъектПоРеквизиту("БазовыеЕдиницыИзмерения", "Код", "796");
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		Возврат ЕдиницаИзмерения;
	КонецЕсли;
	
	ЕдиницаИзмеренияОбъект = Справочники.БазовыеЕдиницыИзмерения.СоздатьЭлемент();
	ЕдиницаИзмеренияОбъект.Код = "796";
	ЕдиницаИзмеренияОбъект.Наименование = "Штука";
	ЕдиницаИзмеренияОбъект.МеждународноеСокращение = "PCE";
	ЕдиницаИзмеренияОбъект.Записать();
	ЕдиницаИзмерения = ЕдиницаИзмеренияОбъект.Ссылка;
	
	Возврат ЕдиницаИзмерения.Ссылка;
	
КонецФункции

Функция МагазинПоНаименованию(НаименованиеМагазина)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Магазины.Ссылка
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	Магазины.Наименование = &НаименованиеМагазина";
	
	Запрос.УстановитьПараметр("НаименованиеМагазина", НаименованиеМагазина);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.Магазины.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции // МагазинПоНаименованию()

// Создает нового контрагента
//
// Параметры:
//  ДанныеКонтрагента        - Структура - содержит данные покупателя с сайта.
//  ПрикладныеПараметры      - Структура - содержит информацию настройках обмена, выполненных в форме узла.
//  ОписаниеОшибки           - Строка - в нее записывается текст ошибки, которая может возникнуть при создании нового контрагента.
//  СтруктураСвойстваЗаказа  - Структура - содержит свойства заказа с сайта.
//
// Возвращаемое значение:
//   СправочникСсылка.Контрагент   - ссылка на вновь созданного контрагента
//
Функция СоздатьКонтрагента(ДанныеКонтрагента, ПрикладныеПараметры, ТекстОшибки, СтруктураСвойстваЗаказа)
	
	НовыйКонтрагент                     = Справочники.Контрагенты.СоздатьЭлемент(); 
	
	ЗаполнитьЗначенияСвойств(НовыйКонтрагент, ДанныеКонтрагента);
	
	НовыйКонтрагент.ЮрФизЛицо          = ?(ДанныеКонтрагента.ЮрЛицо, Перечисления.ЮрФизЛицо.ЮрЛицо, Перечисления.ЮрФизЛицо.ФизЛицо);
	НовыйКонтрагент.Наименование       = ДанныеКонтрагента.Наименование;
	НовыйКонтрагент.НаименованиеПолное = ?(ДанныеКонтрагента.ЮрЛицо, ДанныеКонтрагента.ОфициальноеНаименование, ДанныеКонтрагента.ПолноеНаименование);
	НовыйКонтрагент.Покупатель         = Истина;
	
	Попытка
		Если ПрикладныеПараметры.Свойство("ГруппаДляНовыхКонтрагентов") Тогда
			НовыйКонтрагент.Родитель = ПрикладныеПараметры.ГруппаДляНовыхКонтрагентов;
		КонецЕсли;
	Исключение
		СтрокаОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Для Каждого СтрокаИнформации Из ДанныеКонтрагента.ИнформацияПоКонтрагенту Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаИнформации.Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(СтрокаИнформации.Вид) = ВРег(НСтр("ru = 'Фактический адрес'")) Тогда
			
			ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
			                             Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,
			                             Перечисления.ТипыКонтактнойИнформации.Адрес,
			                             СтрокаИнформации.Представление);
			
		ИначеЕсли ВРег(СтрокаИнформации.Вид) =  ВРег(НСтр("ru = 'Юридический адрес'")) Тогда
			
			ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
			                             Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
			                             Перечисления.ТипыКонтактнойИнформации.Адрес,
			                             СтрокаИнформации.Представление);
			
		ИначеЕсли ВРег(СтрокаИнформации.Вид) =  ВРег(НСтр("ru = 'ТелефонРабочий'")) Тогда
			
			ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
			                             Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
			                             Перечисления.ТипыКонтактнойИнформации.Телефон,
			                             СтрокаИнформации.Представление);
			
		ИначеЕсли ВРег(СтрокаИнформации.Вид) =  ВРег(НСтр("ru = 'Почта'")) Тогда
			
			ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
			                             Справочники.ВидыКонтактнойИнформации.EmailКонтрагента,
			                             Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
			                             СтрокаИнформации.Представление);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НовыйКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		НовыйКонтрагент.ФизЛицо = ОбщегоНазначенияРТ.СоздатьФизЛицоНаОснованииКонтрагента(НовыйКонтрагент, Истина);
	КонецЕсли;
	
	НовыйКонтрагент.Записать();
	
	Если ДанныеКонтрагента.Свойство("РасчетныеСчета") И ДанныеКонтрагента.РасчетныеСчета.Количество() > 0 Тогда
		
		Для Каждого РасчетныйСчет Из ДанныеКонтрагента.РасчетныеСчета Цикл
			
			ДанныеБанка = Новый Структура;
			ДанныеБанка.Вставить("SWIFT","");
			ДанныеБанка.Вставить("Адрес","");
			ДанныеБанка.Вставить("БИК","");
			ДанныеБанка.Вставить("Город","");
			ДанныеБанка.Вставить("КоррСчет","");
			ДанныеБанка.Вставить("Наименование","");
			ЗаполнитьЗначенияСвойств(ДанныеБанка, РасчетныйСчет.ДанныеБанка);
			
			Если ПустаяСтрока(РасчетныйСчет.НомерСчета)
				Или ПустаяСтрока(ДанныеБанка.БИК)
				Или ПустаяСтрока(ДанныеБанка.КоррСчет) Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
			НовыйСчет.НомерСчета            = РасчетныйСчет.НомерСчета;
			НовыйСчет.Владелец              = НовыйКонтрагент.Ссылка;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	КлассификаторБанков.Ссылка
			|ИЗ
			|	Справочник.КлассификаторБанков КАК КлассификаторБанков
			|ГДЕ
			|	КлассификаторБанков.Код = &БИК
			|	ИЛИ КлассификаторБанков.КоррСчет = &КоррСчет";
			
			Запрос.УстановитьПараметр("БИК", ДанныеБанка.БИК);
			Запрос.УстановитьПараметр("КоррСчет", ДанныеБанка.КоррСчет);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НовыйСчет.Банк = Выборка.Ссылка;
			Иначе
				
				Если ПустаяСтрока(ДанныеБанка.КоррСчет)
					Или ПустаяСтрока(ДанныеБанка.Наименование) Тогда
					Продолжить;
				КонецЕсли;
				
				НовыйСчет.РучноеИзменениеРеквизитовБанка = Истина;
				НовыйСчет.НаименованиеБанка = ДанныеБанка.Наименование;
				НовыйСчет.ГородБанка        = ДанныеБанка.Город;
				НовыйСчет.КоррСчетБанка     = ДанныеБанка.КоррСчет;
				НовыйСчет.АдресБанка        = ДанныеБанка.Адрес;
				НовыйСчет.БИКБанка          = ДанныеБанка.БИК;
				
			КонецЕсли;
			
			НовыйСчет.Записать();
		
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НовыйКонтрагент.Ссылка;
	
КонецФункции

Процедура ДобавитьКонтактнуюИнформацию(Объект, ВидКИ, ТипКИ, Представление)
	
	ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Представление, ВидКИ);
	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Объект, ЗначенияПолей, ВидКИ, ТипКИ);
	
КонецПроцедуры

Функция РеквизитыОбменаЗаказами()
	
	МассивРеквизитов = Новый Массив;
	
	МассивРеквизитов.Добавить("СпособИдентификацииКонтрагентов");
	МассивРеквизитов.Добавить("ЕдиницаИзмеренияНовойНоменклатуры");
	МассивРеквизитов.Добавить("ГруппаДляНовойНоменклатуры");
	МассивРеквизитов.Добавить("ГруппаДляНовыхКонтрагентов");
	МассивРеквизитов.Добавить("Организация");
	МассивРеквизитов.Добавить("НомерНаСайте");
	МассивРеквизитов.Добавить("ДатаНаСайте");
//	МассивРеквизитов.Добавить("СоответствиеСтатусовЗаказов");
	МассивРеквизитов.Добавить("ВидНоменклатурыТоварДляНовойНоменклатуры");
	МассивРеквизитов.Добавить("ВидНоменклатурыУслугаДляНовойНоменклатуры");
	
	Возврат МассивРеквизитов;
	
КонецФункции

Процедура ДозаполнитьРеквизитыЗаказа(РеквизитыЗаказа, СвойстваЗаказа)
	
	РеквизитыЗаказа.Вставить("Оплачен",			Ложь);
	РеквизитыЗаказа.Вставить("ОплатаКартой",	Истина);
	РеквизитыЗаказа.Вставить("Фискализирован",	Истина);
	
	Если НЕ СвойстваЗаказа.Получить(НСтр("ru = 'Заказ оплачен'")) = Неопределено 
		И Булево(СвойстваЗаказа.Получить(НСтр("ru = 'Заказ оплачен'"))) Тогда
		РеквизитыЗаказа.Оплачен = Истина;
	КонецЕсли;
	
	Если НЕ СвойстваЗаказа.Получить(НСтр("ru = 'Метод оплаты'")) = Неопределено 
		И НЕ СвойстваЗаказа.Получить(НСтр("ru = 'Метод оплаты'")) = НСтр("ru = 'Оплачен платежной картой'")  Тогда
		РеквизитыЗаказа.ОплатаКартой = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКонтактнуюИнформациюДляОтправкиЧека(КассаККМ, ЗаказПокупателя)
	
	Результат = Новый Структура;
	
	СсылкаКонтактнойИнформации = ЗаказПокупателя.Контрагент;
	Если СсылкаКонтактнойИнформации.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		СсылкаКонтактнойИнформации = СсылкаКонтактнойИнформации.ФизЛицо;
	КонецЕсли;
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СсылкаКонтактнойИнформации,,ТекущаяДатаСеанса(), Ложь);
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	СписокТипов.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(1000)) КАК Представление
	|ПОМЕСТИТЬ ВТКонтактнаяИнформация
	|ИЗ
	|	&КонтактнаяИнформация КАК КонтактнаяИнформация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТКонтактнаяИнформация.Тип КАК Тип,
	|	МАКСИМУМ(ВТКонтактнаяИнформация.Представление) КАК Представление
	|ИЗ
	|	ВТКонтактнаяИнформация КАК ВТКонтактнаяИнформация
	|ГДЕ
	|	ВТКонтактнаяИнформация.Тип В(&СписокТипов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТКонтактнаяИнформация.Тип";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("КонтактнаяИнформация", КонтактнаяИнформация);
	Запрос.УстановитьПараметр("СписокТипов", СписокТипов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			Результат.Вставить("Телефон", ПреобразоватьТелефон(Выборка.Представление));
		ИначеЕсли Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			Результат.Вставить("АдресЭП", Выборка.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Преобразет телефон строку с маской "+7(999)999-99-99" в строку формата 9012345678
//
// Параметры:
//  ТелефонСтрока  - Строка - строка для преобразования
//
// Возвращаемое значение:
//   Строка   - строка вида 9012345678
//
Функция ПреобразоватьТелефон(Знач ТелефонСтрока)
	
	Если Сред(ТелефонСтрока,1,1) = "+" Тогда
		ТелефонСтрока = Прав(ТелефонСтрока, СтрДлина(ТелефонСтрока)-2);
	ИначеЕсли Сред(ТелефонСтрока,1,1) = "8" Тогда
		ТелефонСтрока = Прав(ТелефонСтрока, СтрДлина(ТелефонСтрока)-1);
	КонецЕсли;
	
	ТелефонСтрока = СтрЗаменить(ТелефонСтрока, "+","");
	ТелефонСтрока = СтрЗаменить(ТелефонСтрока, "-","");
	ТелефонСтрока = СтрЗаменить(ТелефонСтрока, "(","");
	ТелефонСтрока = СтрЗаменить(ТелефонСтрока, ")","");
	ТелефонСтрока = СтрЗаменить(ТелефонСтрока, " ","");
	
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТелефонСтрока) Тогда
		ТелефонСтрока = "";
	КонецЕсли;
	
	Возврат ТелефонСтрока;
	
КонецФункции
 
#КонецОбласти
