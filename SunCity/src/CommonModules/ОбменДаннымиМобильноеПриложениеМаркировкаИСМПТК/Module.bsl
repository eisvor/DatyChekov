
#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТекущиюВерсиюМобильногоПриложения() Экспорт
	
	Возврат "1.0.2";
	
КонецФункции

Функция Сериализовать(ОбъектСериализации) Экспорт
	
	ДеревоВОбъектеXDTO = СериализаторXDTO.ЗаписатьXDTO(ОбъектСериализации);
	МойXML = Новый ЗаписьXML;
	МойXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(МойXML, ДеревоВОбъектеXDTO);
	
	Возврат МойXML.Закрыть();
	
КонецФункции

Функция Десериализовать(XMLСтруктураСериализованногоОбъекта) Экспорт
	
	ЧтениеXMLДанных = Новый ЧтениеXML;
	ЧтениеXMLДанных.УстановитьСтроку(XMLСтруктураСериализованногоОбъекта);
	ТЗ = СериализаторXDTO.ПрочитатьXML(ЧтениеXMLДанных);
	ЧтениеXMLДанных.Закрыть();
	
	Возврат ТЗ;
	
КонецФункции

Функция ПолучитьКодыМаркировкиДокумента(Номер, Соединение) Экспорт
	
	СписокСериализованный = Соединение.GiveDocumentMarkingCodes(Сериализовать(Номер));
	Список = Десериализовать(СписокСериализованный);
	СписокВозвращаемый = Сериализовать(Список);
	
	Возврат Список;
	
КонецФункции

Функция УстановитьСоединениеССервером(Структура = Неопределено) Экспорт
	
	Если Структура = Неопределено Тогда
		НаборДанных = РегистрыСведений.НастройкиПодключенияМобильноеПриложениеИСМПТК.Выбрать();
		НаборДанных.Следующий();
		
		КонстПутьWSСсылки = НаборДанных.ПутьWSСсылкиИСМПТК;
		КонстURIПространстваИменСервиса = НаборДанных.URIПространстваИменСервисаИСМПТК;
		КонстИмяСервиса = НаборДанных.ИмяСервисаИСМПТК;
		КонстИмяТочкиПодключения = НаборДанных.ИмяТочкиПодключенияИСМПТК;
		КонстИмяПользователя = НаборДанных.ИмяПользователяИСМПТК;
		КонстПароль = НаборДанных.ПарольИСМПТК;
	Иначе
		КонстПутьWSСсылки = Структура.ПутьWSСсылкиИСМПТК;
		КонстURIПространстваИменСервиса = Структура.URIПространстваИменСервисаИСМПТК;
		КонстИмяСервиса = Структура.ИмяСервисаИСМПТК;
		КонстИмяТочкиПодключения = Структура.ИмяТочкиПодключенияИСМПТК;
		КонстИмяПользователя = Структура.ИмяПользователяИСМПТК;
		КонстПароль = Структура.ПарольИСМПТК;
	КонецЕсли;
	
	Попытка
		Определение = Новый WSОпределения(КонстПутьWSСсылки,КонстИмяПользователя,КонстПароль);
	Исключение
		Текст = НСтр("ru = 'Данные подключения заполнены некорректно. Соединение не было установлено.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(Текст);
		Возврат Неопределено;
	КонецПопытки;
	
	Прокси = Новый WSПрокси(Определение,
	КонстURIПространстваИменСервиса,
	КонстИмяСервиса,
	КонстИмяТочкиПодключения);
	Прокси.Пользователь = КонстИмяПользователя;
	Прокси.Пароль = КонстПароль;
	
	Возврат Прокси;
	
КонецФункции

Функция НайтиДокументСканированиеТоваровПоИдентификатору(Идентификатор) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СканированиеТоваровИСМПТК.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СканированиеТоваровИСМПТК КАК СканированиеТоваровИСМПТК
	|ГДЕ
	|	СканированиеТоваровИСМПТК.Идентификатор = &Идентификатор";
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НайтиДокументАктПриемаПередачиПоНомеру(Номер) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АктПриемаПередачиИСМПТК.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АктПриемаПередачиИСМПТК КАК АктПриемаПередачиИСМПТК
	|ГДЕ
	|	АктПриемаПередачиИСМПТК.Номер = &Номер";
	Запрос.УстановитьПараметр("Номер", Номер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьКодыМаркировки(ИсходныеДанные, ПараметрыСканирования = Неопределено) Экспорт
	
	Если ИсходныеДанные.Свойство("ФорматBase64") Тогда
		ШтрихкодBase64 = ИсходныеДанные.Штрихкод;
	Иначе
		ШтрихкодBase64 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.СтрокуВBase64(ИсходныеДанные.Штрихкод);
	КонецЕсли;
	
	КодыМаркировки = Новый Структура("КодМаркировки, КодИдентификации, GTIN, EAN, ВидУпаковки, ВидПродукции, Количество");
	
	НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();   
	ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(ИсходныеДанные, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
	
	Если ДанныеРазбора = Неопределено Тогда 
		ТекстОшибки = НСтр("ru = 'Не удалось распознать код маркировки.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Групповая
		Или ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Потребительская Тогда 
		
		ГрупповаяУпаковка = ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Групповая;
		
		КодыМаркировки.КодМаркировки = ШтрихкодBase64; 
		КодыМаркировки.GTIN 	  	 = ДанныеРазбора.СоставКодаМаркировки.GTIN;
		КодыМаркировки.EAN 			 = ДанныеРазбора.СоставКодаМаркировки.EAN;
		КодыМаркировки.КодИдентификации = ДанныеРазбора.НормализованныйКодМаркировки;
		КодыМаркировки.ВидУпаковки	 = ДанныеРазбора.ВидУпаковки;
		КодыМаркировки.ВидПродукции	 = ДанныеРазбора.ВидыПродукции[0];
		КодыМаркировки.Количество	 = 1;
		
	Иначе
		
		КодыМаркировки.КодМаркировки 	= ШтрихкодBase64;
		Если ДанныеРазбора.СоставКодаМаркировки.Свойство("SSCC") Тогда
			КодыМаркировки.GTIN = ДанныеРазбора.СоставКодаМаркировки.SSCC;
			КодыМаркировки.EAN  = ДанныеРазбора.СоставКодаМаркировки.SSCC;
		Иначе 
			КодыМаркировки.GTIN = ДанныеРазбора.СоставКодаМаркировки.GTIN;
			КодыМаркировки.EAN 	= ДанныеРазбора.СоставКодаМаркировки.EAN;
		КонецЕсли;
		КодыМаркировки.КодИдентификации = ДанныеРазбора.НормализованныйКодМаркировки;
		КодыМаркировки.ВидУпаковки		= Перечисления.ВидыУпаковокИСМПТК.Логистическая;
		КодыМаркировки.ВидПродукции 	= ДанныеРазбора.ВидыПродукции[0];
		КодыМаркировки.Количество		= 1;
		
	КонецЕсли;
	
	Возврат КодыМаркировки;
	
КонецФункции

функция ПолучитьНоменклатуруПоШтрихкоду(EAN, Объект, СообщенияОбОшибках = Неопределено) Экспорт
	
	Если СообщенияОбОшибках = Неопределено Тогда
		//Не во всех местах вызова функции нужно выводить пользователю сообщения, поэтому заменяеям на коллекцию-пустышку
		СообщенияОбОшибках = Новый Соответствие();
	КонецЕсли;
	
	Номенклатура = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьПустуюСсылкуНоменклатура();
	
	НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("EAN", EAN));
	Если Не НайденныеСтроки.Количество() = 0 Тогда 
		Номенклатура = НайденныеСтроки[0].Номенклатура;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда 
		Возврат Номенклатура;
	Иначе
		Возврат ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, EAN,, СообщенияОбОшибках);
	КонецЕсли;
	
КонецФункции

Функция ЗагруженныеДокументыСканированияВыборНаСервере(Номер) Экспорт
	
	СписокВозвращаемый = Новый СписокЗначений;
	
	Соединение = УстановитьСоединениеССервером();
	Если Соединение = Неопределено Тогда
		Возврат СписокВозвращаемый;
	КонецЕсли;
	
	Возврат ПолучитьКодыМаркировкиДокумента(Номер, Соединение);
	
КонецФункции

#КонецОбласти