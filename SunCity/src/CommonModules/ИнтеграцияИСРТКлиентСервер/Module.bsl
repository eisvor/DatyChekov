// Универсальные механизмы интеграции ИС (ЕГАИС, ГИСМ, ВЕТИС, ...)

#Область ПрограммныйИнтерфейс

//Определяет соответствие переданного документа проверяемому типу.
//
// Параметры:
//  Контекст - ФормаКлиентскогоПриложения, ДокументСсылка - Контекст для определения типа документа.
//  Имя      - Строка - имя объекта метаданного документа.
//
// Возвращаемое значение:
// Булево - это документ.
Функция ЭтоДокументПоНаименованию(Контекст, Имя) Экспорт
	
	Результат = Ложь;

	ТипКонтекста = ТипЗнч(Контекст);
	ТипДокумента = Тип(СтрШаблон("ДокументСсылка.%1", Имя));

	Если ТипКонтекста = Тип("ФормаКлиентскогоПриложения") Тогда
		Если СтрНачинаетсяС(Контекст.ИмяФормы, СтрШаблон("Документ.%1", Имя)) Тогда
			Результат = Истина;
		ИначеЕсли СтрНачинаетсяС(Контекст.ИмяФормы, "ОбщаяФорма.ПроверкаЗаполненияДокументов") Тогда
			Если ТипЗнч(Контекст.Ссылка) = ТипДокумента Тогда
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипКонтекста = ТипДокумента Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ПоляДляПоискаМаркированнойПродукции() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	Результат.Вставить("Характеристика", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	
	Возврат Результат;
КонецФункции

// Процедура обновляет кеш ключевых реквизитов текущей строки товаров. По ключевым реквизитам осуществляется связь
//  между ТЧ серий и ТЧ товаров.
//
// Параметры:
//  ТекущаяСтрока			 - ДанныеФормыЭлементКоллекции - строка, по которой обновляется кеш.
//  КэшированныеЗначения	 - Структура - переменная модуля формы, в которой хранятся кешируемые значения
//  ПараметрыУказанияСерий	 - Структура - структура параметров указания серий, возвращаемая соответствующей процедурой модуля менеджера документа
//  Копирование				 - Булево - признак, что кешированная строка скопирована (параметр события ПриНачалеРедактирования).
//
Процедура ОбновитьКешированныеЗначенияДляУчетаСерий(ТекущаяСтрока,КэшированныеЗначения,ПараметрыУказанияСерий,Копирование = Ложь) Экспорт
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
	КонецЕсли;
	
	Если ТекущаяСтрока <> Неопределено
		И (Не Копирование
		Или ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии) Тогда
		
		КэшированныеЗначения.Вставить("Номенклатура",ТекущаяСтрока.Номенклатура);
		КэшированныеЗначения.Вставить("Характеристика",ТекущаяСтрока.Характеристика);
		
		Если ТекущаяСтрока.Свойство(ПараметрыУказанияСерий.ИмяПоляКоличество) Тогда
			КэшированныеЗначения.Вставить(ПараметрыУказанияСерий.ИмяПоляКоличество, ТекущаяСтрока[ПараметрыУказанияСерий.ИмяПоляКоличество]);
		КонецЕсли;
		
		Если ТекущаяСтрока.Свойство("Отменено") Тогда
			КэшированныеЗначения.Вставить("Отменено",ТекущаяСтрока.Отменено);
		КонецЕсли;
		
		Для Каждого СтрМас Из ПараметрыУказанияСерий.ПоляСвязи Цикл
			Если ТекущаяСтрока.Свойство(СтрМас) Тогда
				КэшированныеЗначения.Вставить(СтрМас,ТекущаяСтрока[СтрМас]);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрМас Из ПараметрыУказанияСерий.ИменаПолейДополнительные Цикл
			КэшированныеЗначения.Вставить(СтрМас,ТекущаяСтрока[СтрМас]);
		КонецЦикла;
		
	Иначе
		КэшированныеЗначения.Вставить("Номенклатура",Неопределено);
		КэшированныеЗначения.Вставить("Характеристика",Неопределено);
		КэшированныеЗначения.Вставить(ПараметрыУказанияСерий.ИмяПоляКоличество ,0);
		
		Если ПараметрыУказанияСерий.ЭтоЗаказ Тогда
			КэшированныеЗначения.Вставить("Отменено", Неопределено);
		КонецЕсли;
		
		Для Каждого СтрМас Из ПараметрыУказанияСерий.ПоляСвязи Цикл
			КэшированныеЗначения.Вставить(СтрМас,Неопределено);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьСтруктуруДействиямиНДС(СтруктураДействий, ВестиУчетМаркируемойПродукцииИСМП) Экспорт
	
	Если ВестиУчетМаркируемойПродукцииИСМП Тогда
		СтруктураДействий.Вставить("ЗаполнитьФлагНДСПоСтрочно");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьСтруктуруДействиямиГосИС(СтруктураДействий, ЭтоОперацияСДС, МаркировкаВключена, БезМаркировки) Экспорт 
	
	Если МаркировкаВключена Тогда 
		
		ПараметрыМарируемойПродукции = Новый Структура;
		ПараметрыМарируемойПродукции.Вставить("ОперацияСДенежнымиСредствами", ЭтоОперацияСДС);
		Если БезМаркировки Тогда 
			ПараметрыМарируемойПродукции.Вставить("БезМаркировки", БезМаркировки);
		КонецЕсли;
		
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаМаркируемойПродукцииГосИС", ПараметрыМарируемойПродукции);
		
	КонецЕсли;
	
КонецПроцедуры

//Возвращает значение особености учета номенклатуры по переданному виду продукции ИС
//или вид продукции ИС по переданной особенности учета номенклатуры
// Параметры:
//  ОсобенностьУчетаИлиВидПродукции - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры, ПеречислениеСсылка.ВидыПродукцииИС - особеннсоть учета номенклатуры или вид продукции ИС;
//  Строкой - Булево - возвращать особенность учета в строковом представлении;
// Возвращаемое значение:
//  ПеречислениеСсылка.ВидыПродукцииИС, ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры, Строка - вид продукции ИС или особенность учета номенклатуры
//
Функция ОсобенностьУчетаПоВидуПродукции(ОсобенностьУчетаИлиВидПродукции, Строкой = Ложь) Экспорт
	
	Результат = Неопределено;
	//ИнтеграцияИСМПТК_РозничноеВыбытие
	Если ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты") Тогда
		Результат = "Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция") Тогда
		Результат = "Перечисление.ВидыПродукцииИСМПТК.Обувная";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция") Тогда
		Результат = "Перечисление.ВидыПродукцииИСМПТК.Табачная";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак") Тогда
		Результат = "Перечисление.ВидыПродукцииИСМПТК.АльтернативныйТабак";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС") Тогда
		Результат = "Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность") Тогда
		Результат = "Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность";
		
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.АльтернативныйТабак") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность";
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Результат) И НЕ Строкой Тогда
		Результат = ПредопределенноеЗначение(Результат);
	КонецЕсли;
	
	Возврат Результат;
	//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
		
	Если ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.Алкогольная";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.Табак";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.Обувь";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Шины") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.Шины";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Фотоаппараты") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.Фотоаппараты";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Велосипеды") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.Велосипеды";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.КреслаКоляски") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.КреслаКоляски";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Духи") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.Духи";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.АльтернативныйТабак";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.УпакованнаяВода") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.УпакованнаяВода";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Антисептики") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.Антисептики";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.БАДы") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.БАДы";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.НикотиносодержащаяПродукция") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Пиво") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.Пиво";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.СоковаяПродукция") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.СоковаяПродукция";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.БезалкогольноеПиво") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.БезалкогольноеПиво";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхПодконтрольныеВЕТИС") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МясоПодконтрольноеВЕТИС") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ВетеринарныеПрепараты") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.ВетеринарныеПрепараты";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ИгрыИИгрушкиДляДетей") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.РадиоэлектроннаяПродукция") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.РадиоэлектроннаяПродукция";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ТитановаяМеталлопродукция") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.РастительныеМасла") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.РастительныеМасла";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ОптоволокноИОптоволоконнаяПродукция") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхБезВЕТИС") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияБезВЕТИС") Тогда
		Результат = "Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.Шины";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.Фотоаппараты";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.Велосипеды";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.КреслаКоляски";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.Духи";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.УпакованнаяВода";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.Антисептики";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.БАДы";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.НикотиносодержащаяПродукция";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.Пиво";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СоковаяПродукция") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.СоковаяПродукция";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольноеПиво") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.БезалкогольноеПиво";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхПодконтрольныеВЕТИС";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.МясоПодконтрольноеВЕТИС";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ВетеринарныеПрепараты") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.ВетеринарныеПрепараты";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.ИгрыИИгрушкиДляДетей";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РадиоэлектроннаяПродукция") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.РадиоэлектроннаяПродукция";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.ТитановаяМеталлопродукция";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияПодконтрольнаяВЕТИС";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РастительныеМасла") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.РастительныеМасла";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.ОптоволокноИОптоволоконнаяПродукция";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхБезВЕТИС";
	ИначеЕсли ОсобенностьУчетаИлиВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС") Тогда
		Результат = "Перечисление.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияБезВЕТИС";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) И НЕ Строкой Тогда
		Результат = ПредопределенноеЗначение(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Устанавливает параметры выбора номенклатуры.
//
// Параметры:
//  ПараметрыВыбора - Массив - параметры выбора элемента формы "Номенклатура".
//  ВидПродукцииИС - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
//
Процедура ЗаполнитьПараметрыВыбораНоменклатурыПоВидуПродукции(ПараметрыВыбора, ВидПродукцииИС) Экспорт
	
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")));
	
	ОсобенностьУчета = ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукцииИС);
	
	Если ОсобенностьУчета <> Неопределено Тогда
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ОсобенностьУчета", ОсобенностьУчета));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеНастройкиПараметровНоменклатурыИС(Форма, ПользовательРазрешилРедактирование = Ложь) Экспорт
	
	ИмяЭлементаНастройки = "НастройкаПараметровНоменклатурыИС";
	ЭлементФормы         = Форма.Элементы.Найти(ИмяЭлементаНастройки);
	
	Если ЭлементФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПредставления = ИнтеграцияИСКлиентСервер.ПараметрыФормированияДанныхПредставленияНастройкиНоменклатуры();
	ПараметрыПредставления.СсылкаНаОбъект = Форма.Объект.Ссылка;
	ПараметрыПредставления.ВидПродукции = ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(Форма.Объект.ОсобенностьУчета);
	ПараметрыПредставления.ЕстьПравоРедактирования = Форма.ЕстьПравоРедактирования;
	ПараметрыПредставления.РазрешеноРедактированиеРеквизитов = ПользовательРазрешилРедактирование;
	ПараметрыПредставления.ТребуетВзвешивания = Форма.Объект.Весовой;
	ПараметрыПредставления.ДопустимаНастройкаЛогистическойЕдиницы = Ложь;
	ПараметрыПредставления.ПредставлениеВНесколькоСтрок = Ложь;
	
	ДанныеПредставления = ИнтеграцияИСВызовСервера.ПредставлениеНастройкиПараметровНоменклатуры(ПараметрыПредставления);
	
	Если ДанныеПредставления = Неопределено Тогда
		ЭлементФормы.Видимость = Ложь;
	Иначе
		Форма[ИмяЭлементаНастройки] = ДанныеПредставления;
		ЭлементФормы.Видимость      = Истина;
		ЭлементФормы.Высота = СтрЧислоСтрок(ДанныеПредставления);
	КонецЕсли;
	
КонецПроцедуры

// Формирует параметры, необходимые для переопределения организации ГОСИС.
//
// Возвращаемое значение:
//  Структура
//
Функция ПараметрыПереопределенияОрганизацииГОСИС(Форма, Знач ВидыПродукции, Номенклатура) Экспорт
	
	ДанныеОРабочемМесте = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияПоОбъекту(Форма.Объект);
	
	ПараметрыПереопределения = Новый Структура;
	ПараметрыПереопределения.Вставить("СуффиксПродукции",        "");
	ПараметрыПереопределения.Вставить("Организация",             Неопределено);
	ПараметрыПереопределения.Вставить("ОрганизацияГОСИС",        Неопределено);
	ПараметрыПереопределения.Вставить("Номенклатура",            Номенклатура);
	ПараметрыПереопределения.Вставить("ДанныеОРабочемМесте",     ДанныеОРабочемМесте);
	ПараметрыПереопределения.Вставить("ТребуетсяСерверныйВызов", Ложь);
	
	Если НЕ ТипЗнч(ВидыПродукции) = Тип("Массив") Тогда
		ВидыПродукции = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидыПродукции);
	КонецЕсли;
	
	// Определим наличие видов продукции.
	ЕстьПродукцияЕГАИС = Ложь;
	ЕстьПродукцияИСМП  = Ложь;
	
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная")
			И Форма.ОрганизацииЕГАИС.Количество() > 0 Тогда
			ЕстьПродукцияЕГАИС = Истина;
		ИначеЕсли ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияИСМП(ВидПродукции, Истина)
			И Форма.ОрганизацииИСМП.Количество() > 0 Тогда
			ЕстьПродукцияИСМП = Истина;
		КонецЕсли;
		
		Если ЕстьПродукцияЕГАИС
			ИЛИ ЕстьПродукцияИСМП Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьПродукцияЕГАИС Тогда
		ПараметрыПереопределения.СуффиксПродукции = "ЕГАИС";
	ИначеЕсли ЕстьПродукцияИСМП Тогда
		ПараметрыПереопределения.СуффиксПродукции = "ИСМП";
	КонецЕсли;
	
	Если ЕстьПродукцияЕГАИС ИЛИ ЕстьПродукцияИСМП Тогда
		ОрганизацииГОСИС = Форма["Организации" + ПараметрыПереопределения.СуффиксПродукции].ВыгрузитьЗначения();
		
		Если ОрганизацииГОСИС.Количество() = 1 Тогда
			ПараметрыПереопределения.ОрганизацияГОСИС = ОрганизацииГОСИС[0];
		КонецЕсли;
		
		Если ПараметрыПереопределения.СуффиксПродукции = "ИСМП" Тогда
			ПараметрыПереопределения.Организация = ПараметрыПереопределения.ОрганизацияГОСИС;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыПереопределения.СуффиксПродукции)
		И НЕ ЗначениеЗаполнено(ПараметрыПереопределения.Организация)
		И (ЗначениеЗаполнено(ПараметрыПереопределения.ОрганизацияГОСИС)
		ИЛИ ЗначениеЗаполнено(Номенклатура)) Тогда
		ПараметрыПереопределения.ТребуетсяСерверныйВызов = Истина;
	КонецЕсли;
		
	Возврат ПараметрыПереопределения;
	
КонецФункции

// Переопределяет организацию в форме РМК.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма РМК (старого).
//  ПараметрыПереопределения - См. ИнтеграцияИСРТКлиентСервер.ПараметрыПереопределенияОрганизацииГОСИС.
//  ПараметрыСканирования - Структура.
// Возвращаемое значение:
//  Булево - признак успешного выполнения переопределения организации.
//
Функция ПереопределитьОрганизациюГОСИСРМК(Форма, ПараметрыПереопределения, ПараметрыСканирования = Неопределено) Экспорт
	
	ОрганизацияПереопределена = Ложь;
	
	СуффиксПродукции = ПараметрыПереопределения.СуффиксПродукции;
	
	Если ЗначениеЗаполнено(СуффиксПродукции)
		И ЗначениеЗаполнено(ПараметрыПереопределения.ОрганизацияГОСИС)
		И ЗначениеЗаполнено(ПараметрыПереопределения.Организация)
		И НЕ Форма["Организации" + СуффиксПродукции].НайтиПоЗначению(ПараметрыПереопределения.ОрганизацияГОСИС) = Неопределено Тогда
		
		ОрганизацияПереопределена = Истина;
		Форма["Организация" + СуффиксПродукции] = ПараметрыПереопределения.ОрганизацияГОСИС;
		
		Если НЕ Форма.Объект.Организация = ПараметрыПереопределения.Организация Тогда
			Форма.Объект.Организация = ПараметрыПереопределения.Организация;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыСканирования) Тогда
			ПараметрыСканирования.Вставить("Организация", ПараметрыПереопределения.Организация);
			ПараметрыСканирования.Вставить("Владелец", ПараметрыПереопределения.Организация);
			ПараметрыСканирования.Вставить("Организация" + СуффиксПродукции, ПараметрыПереопределения.ОрганизацияГОСИС);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОрганизацияПереопределена;
	
КонецФункции

#Область ПодключаемыеКомандыИС

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
//  Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыМаркировкиТоваровИСМП(Команды) Экспорт
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПересчетТоваров", НСтр("ru = 'Пересчет товаров';"));
	
КонецПроцедуры

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
//  Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыПриемкиТоваровИСМП(Команды) Экспорт
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды, "ПоступлениеТоваров", НСтр("ru = 'Поступление товаров'"));
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПоступлениеТоваров" , НСтр("ru = 'Поступление товаров'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПеремещениеТоваров" , НСтр("ru = 'Перемещение товаров'"));
	
КонецПроцедуры

Процедура КомандыУточненияСведенийОКодахМаркировкиИСМП(Команды) Экспорт 
	
	Возврат;
	
КонецПроцедуры

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
//  Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыОтгрузкиТоваровИСМП(Команды) Экспорт
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВозвратТоваровПоставщику",          НСтр("ru = 'Возврат товаров поставщику'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПеремещениеТоваров",                НСтр("ru = 'Перемещение товаров'"));
	
КонецПроцедуры

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
//  Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыВозвратаВОборотИСМП(Команды) Экспорт 
	
	Возврат;
	
КонецПроцедуры

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
//  Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыПеремаркировкиТоваровИСМП(Команды) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
//  Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыСписанияКодовМаркировкиИСМП(Команды) Экспорт 
	
	Возврат;
	
КонецПроцедуры

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
//  Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыВыводаИзОборотаИСМП(Команды) Экспорт 
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды, "СписаниеТоваров",         НСтр("ru = 'Списание товаров'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ОтчетОРозничныхПродажах",  НСтр("ru = 'Отчет о розничных продажах'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВозвратТоваровПоставщику", НСтр("ru = 'Возврат товаров поставщику'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "СборкаТоваров",            НСтр("ru = 'Сборка товаров'"));
	
КонецПроцедуры

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
//  Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыЗаказНаЭмиссиюКодовМаркировкиСУЗ(Команды) Экспорт 
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(
		Команды, "ЗаказПоставщику", НСтр("ru = 'Заказ поставщику'"));
		
КонецПроцедуры

Процедура УправлениеВидимостьюКомандМаркировкиТоваров(Форма, Команды) Экспорт
	
	Операция = Форма.Объект.Операция;
	ВидПродукции = Форма.Объект.ВидПродукции;
	
	Для Каждого КлючИЗначение Из Форма.НастройкиВыполненияПодключаемыхКомандИС.Команды Цикл
		
		ИмяМетаданных = КлючИЗначение.Значение.ИмяМетаданных;
		Элемент       = Форма.Элементы[КлючИЗначение.Ключ];
		Если Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.Агрегация") Тогда
			Элемент.Видимость = Ложь;
		ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
			Если Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС")
				Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля") Тогда
				Элемент.Видимость = ИмяМетаданных = "ВходящаяТранспортнаяОперацияВЕТИС";
			Иначе
				Элемент.Видимость = ИмяМетаданных = "ПроизводственнаяОперацияВЕТИС";
			КонецЕсли;
		ИначеЕсли ИмяМетаданных = "ПроизводственнаяОперацияВЕТИС"
			Или ИмяМетаданных = "ВходящаяТранспортнаяОперацияВЕТИС" Тогда
			Элемент.Видимость = Ложь;
		ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля") Тогда
			Элемент.Видимость = ИмяМетаданных = "ПоступлениеТоваров";
		ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика") Тогда
			Если ИмяМетаданных = "СборкаТоваров" Тогда
				Элемент.Видимость = Форма.Объект.Товары.Количество() = 1;
			Иначе
				Элемент.Видимость = ИмяМетаданных = "ОприходованиеТоваров";
			КонецЕсли;
		ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков") Тогда
			Элемент.Видимость = ИмяМетаданных = "ПересчетТоваров";
		Иначе
			Элемент.Видимость = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УправлениеВидимостьюКомандПриемкиТоваров(Форма, Команды) Экспорт
	
	
	
КонецПроцедуры

Процедура УправлениеВидимостьюКомандОтгрузкиТоваров(Форма, Команды) Экспорт
	
	
	
КонецПроцедуры

Процедура УправлениеВидимостьюКомандВозвратаВОборот(Форма, Команды) Экспорт
	
	
	
КонецПроцедуры

Процедура УправлениеВидимостьюКомандПеремаркировкиТоваров(Форма, Команды) Экспорт
	
	
	
КонецПроцедуры

Процедура УправлениеВидимостьюКомандСписанияКодовМаркировки(Форма, Команды) Экспорт
	
	
	
КонецПроцедуры

Процедура УправлениеВидимостьюКомандВыводаВОборота(Форма, Команды) Экспорт
	
	
	
	Операция = Форма.Объект.Операция;
	
	Для Каждого КлючИЗначение Из Форма.НастройкиВыполненияПодключаемыхКомандИС.Команды Цикл
		
		ИмяМетаданных = КлючИЗначение.Значение.ИмяМетаданных;
		Элемент       = Форма.Элементы[КлючИЗначение.Ключ];
		
		Если Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаВозвратФизическомуЛицу") Тогда
			Элемент.Видимость = ИмяМетаданных = "ВозвратТоваровПоставщику";
		ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляСобственныхНуждПредприятия")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаБезвозмезднаяПередача")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаКонфискацияТовара")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаЛиквидацияПредприятия")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаУничтожениеТовара")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаУтратаПовреждениеТовара") Тогда
			Элемент.Видимость = ИмяМетаданных = "СписаниеТоваров";
		ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа") Тогда
			Элемент.Видимость = ИмяМетаданных = "ОтчетОРозничныхПродажах";
		ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаФасовка") Тогда
			Элемент.Видимость = ИмяМетаданных = "СборкаТоваров";
		Иначе
			Элемент.Видимость = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УправлениеВидимостьюКомандЗаказаНаЭмиссию(Форма, Команды) Экспорт
	
	СпособВводаВОборот = Форма.Объект.СпособВводаВОборот;
	
	Для Каждого КлючИЗначение Из Форма.НастройкиВыполненияПодключаемыхКомандИС.Команды Цикл
		
		ИмяМетаданных = КлючИЗначение.Значение.ИмяМетаданных;
		Элемент       = Форма.Элементы[КлючИЗначение.Ключ];
		
		Если ИмяМетаданных = "МаркировкаТоваровИСМП"
			Или ИмяМетаданных = "ПеремаркировкаТоваровИСМП" Тогда
			Элемент.Видимость = Истина;
		ИначеЕсли СпособВводаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков") Тогда
			Элемент.Видимость = Ложь;
		ИначеЕсли СпособВводаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Импорт") Тогда
			Элемент.Видимость = (ИмяМетаданных = "ЗаказПоставщику");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УправлениеВидимостьюКомандУточнениеСведенийОКодахМаркировки(Форма, Команды) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ВключитьПоддержкуВидовПродукцииИС(КонтекстВызова, ПараметрыСканирования, ВидПродукции) Экспорт
	
	Если ТипЗнч(КонтекстВызова) = Тип("Структура") И КонтекстВызова.Свойство("Контекст") Тогда
		Контекст = КонтекстВызова.Контекст;
	Иначе
		Контекст = КонтекстВызова;
	КонецЕсли;
	
	Если ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ВозвратТоваровОтПокупателя") Тогда
		
		ЗаполнитьПараметрыСканированияВозвратТоваровОтПокупателя(Контекст, ПараметрыСканирования, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ВозвратТоваровПоставщику") Тогда
		
		ЗаполнитьПараметрыСканированияВозвратТоваровПоставщику(Контекст, ПараметрыСканирования, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ОплатаОтПокупателяПлатежнойКартой") Тогда
		
		ЗаполнитьПараметрыСканированияОплатаОтПокупателяПлатежнойКартой(Контекст, ПараметрыСканирования, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ПеремещениеТоваров") Тогда
		
		ЗаполнитьПараметрыСканированияПеремещениеТоваров(Контекст, ПараметрыСканирования, ВидПродукции, Ложь);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ПоступлениеТоваров") Тогда
		
		ЗаполнитьПараметрыСканированияПоступлениеТоваров(Контекст, ПараметрыСканирования, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ПриходныйКассовыйОрдер") Тогда
		
		ЗаполнитьПараметрыСканированияПриходныйКассовыйОрдер(Контекст, ПараметрыСканирования, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.РасходныйКассовыйОрдер") Тогда
		
		ЗаполнитьПараметрыСканированияРасходныйКассовыйОрдер(Контекст, ПараметрыСканирования, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.РеализацияТоваров") Тогда
		
		ЗаполнитьПараметрыСканированияРеализацияТоваров(Контекст, ПараметрыСканирования, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.РегистрацияБезналичнойОплаты") Тогда
		
		ЗаполнитьПараметрыСканированияРегистрацияБезналичнойОплаты(Контекст, ПараметрыСканирования, ВидПродукции);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Документ.ЧекККМ")
		Или ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Обработка.РМКУправляемыйРежим") Тогда
		
		ЗаполнитьПараметрыСканированияЧекККМ(Контекст, ПараметрыСканирования, ВидПродукции, Ложь);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Контекст, "Обработка.РабочееМестоКассира") Тогда
		
		ЗаполнитьПараметрыСканированияРМК(Контекст, ПараметрыСканирования, ВидПродукции);
		
	КонецЕсли;
	
	ЗаполнитьБазовыеПараметрыСканирования(ПараметрыСканирования, Контекст);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияЧекККМ(Контекст, ПараметрыСканирования, ВидПродукции, ПроверкаКоличества = Неопределено)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникДанных, "ВидОперации") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидПродукции) Тогда
		ШтрихкодированиеИСКлиентСервер.ВключитьПоддержкуПрочейПродукции(ПараметрыСканирования);
	КонецЕсли;
	
	ЭтоРМКУправляемыйРежим = ТипЗнч(Контекст) = Тип("УправляемаяФорма")
		И Контекст.ИмяФормы = "Обработка.РМКУправляемыйРежим.Форма.Форма";
	
	#Область ПоддержкаАлкогольнойПродукции
	ВключенаПоддержкаЕГАИС = ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер.ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции);
	Если ВключенаПоддержкаЕГАИС Тогда
		ПараметрыСканирования.ТребуетсяЧастичноеВыбытие = Истина;
		Если ИсточникДанных.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
			ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.Реализована"));
			ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок = "Возврат";
		Иначе 
			ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ВНаличии"));
			ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок = "Продажа";
		КонецЕсли;
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ВскрытаяБутылка"));
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ПустаяСсылка"));
		
		ОрганизацияЕГАИС = ПредопределенноеЗначение("Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка");
		
		Если ЭтоРМКУправляемыйРежим Тогда
			ОрганизацияЕГАИС = Контекст.ОрганизацияЕГАИС;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ОрганизацияЕГАИС) Тогда 
			ОрганизацияЕГАИС = ИнтеграцияЕГАИСРТВызовСервера.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(
				ИсточникДанных.Организация, ИсточникДанных.Магазин);
		КонецЕсли;
		
		ПараметрыСканирования.КонтрольАкцизныхМарок     = Истина;
		ПараметрыСканирования.Операция                  = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЧекККМ");
		ПараметрыСканирования.СоздаватьШтрихкодУпаковки = Истина;
		ПараметрыСканирования.ОрганизацияЕГАИС          = ОрганизацияЕГАИС;
		
		Если ПроверкаКоличества = Истина Тогда
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Штрихкод");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Номенклатура");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Характеристика");
		Иначе
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Цена");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("СтавкаНДС");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Штрихкод");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Продавец");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Номенклатура");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Характеристика");
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	ВключенаПоддержкаИСМП = Ложь;
	Если ИсточникДанных.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		ВключенаПоддержкаИСМП = ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаРозничногоВозврата(ПараметрыСканирования, ВидПродукции);
	Иначе
		ВключенаПоддержкаИСМП = ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаРозничнойПродажи(ПараметрыСканирования, ВидПродукции);
		Если ВключенаПоддержкаИСМП И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыСканирования, "КонтролироватьОкончаниеСрокаГодности") Тогда
			ПараметрыСканирования.КонтролироватьОкончаниеСрокаГодности = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ВключенаПоддержкаИСМП Тогда
		ЗаполнитьПараметрыККТФФД12(ПараметрыСканирования, Контекст);
		ЗаполнитьПараметрыРеквизитовЧастичногоВыбытия(ПараметрыСканирования, Контекст);
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОбщиеПараметры
	
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		Реквизиты = Новый Структура("Склад, ДатаДокумента");
		Реквизиты.ДатаДокумента = ИсточникДанных.Дата;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "ПараметрыКассыККМ")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст.ПараметрыКассыККМ, "СкладПродажи")
			И ЗначениеЗаполнено(Контекст.ПараметрыКассыККМ.СкладПродажи) Тогда
			Реквизиты.Склад = Контекст.ПараметрыКассыККМ.СкладПродажи;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИсточникДанных.Магазин) Тогда
			ПараметрыСканирования.Вставить("Магазин", ИсточникДанных.Магазин);
			Если Не ЗначениеЗаполнено(Реквизиты.Склад) Тогда
				Реквизиты.Склад = ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(ИсточникДанных.Магазин, "СкладПродажи");
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникДанных, "Организация") Тогда
			Реквизиты.Вставить("Организация", ИсточникДанных.Организация);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ПараметрыСканирования, Реквизиты);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникДанных, "ОперацияСДенежнымиСредствами")
		И ИсточникДанных.ОперацияСДенежнымиСредствами Тогда
		ПараметрыСканирования.РазрешенаОбработкаБезУказанияМарки = Истина;
		ПараметрыСканирования.РазрешеноЗапрашиватьКодМаркировки  = Ложь;
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияРМК(Контекст, ПараметрыСканирования, ВидПродукции, ПроверкаКоличества = Неопределено)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	РежимРаботыСОборудованиемРозлива = Ложь;
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "РежимРаботыСОборудованиемРозлива") Тогда
		РежимРаботыСОборудованиемРозлива = Контекст.РежимРаботыСОборудованиемРозлива;
	КонецЕсли;
	
	Если РежимРаботыСОборудованиемРозлива Тогда
		
		ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво");
		Операция     = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВскрытиеПотребительскойУпаковки");
		
		Если Не ШтрихкодированиеИСМПКлиентСервер.ВключитьПоддержкуПродукцииИСМП(ПараметрыСканирования, ВидПродукции) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыСканирования.ВидОперацииИСМП                                = Операция;
		ПараметрыСканирования.ТолькоМаркируемаяПродукция                     = Истина;
		ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокИСМП       = Истина;
		ПараметрыСканирования.СоздаватьШтрихкодУпаковки                      = Истина;
		ПараметрыСканирования.ТребоватьПолныйКодМаркировкиИСМП               = Истина;
		ПараметрыСканирования.СохранятьКодыМаркировкиВПулИСМП                = Истина;
		ПараметрыСканирования.РазрешеноЗапрашиватьКодМаркировки              = Истина;
		
		ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
			ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборот"));
		ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
			ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате"));
		ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
			ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборота"));
		ПараметрыСканирования.ДопустимыеСтатусыИСМП.Добавить(
			ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ПодключенКОборудованиюРозлива"));
		
		ПараметрыСканирования.ДопустимыеВидыПродукции = Новый Массив();
		ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ВидПродукции);
		
	КонецЕсли;
	
	#Область ПоддержкаАлкогольнойПродукции
	
	Если Не РежимРаботыСОборудованиемРозлива
		И ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер.ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникДанных, "ВидОперации")
			И ИсточникДанных.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
			
			ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок = "Возврат";
			ПараметрыСканирования.РазрешенаОбработкаБезУказанияМарки = Истина;
			
			ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.Реализована"));
			ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ПустаяСсылка"));
			
		Иначе
			
			ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок = "Продажа";
			ПараметрыСканирования.ТребуетсяЧастичноеВыбытие = Истина;
			ПараметрыСканирования.СоздаватьШтрихкодУпаковки = Истина;
			
			ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ВНаличии"));
			ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ВскрытаяБутылка"));
			ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ПустаяСсылка"));
			
		КонецЕсли;
		
		ПараметрыСканирования.КонтрольАкцизныхМарок         = Истина;
		ПараметрыСканирования.Операция                      = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЧекККМ");
		ПараметрыСканирования.ОрганизацияЕГАИС              = ИнтеграцияЕГАИСРТВызовСервера.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(
															  ИсточникДанных.Организация,
															  ИсточникДанных.ТорговыйОбъект);
		
		Если ПроверкаКоличества = Истина Тогда
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Штрихкод");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Номенклатура");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Характеристика");
		Иначе
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Цена");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("СтавкаНДС");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Штрихкод");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Продавец");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Номенклатура");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Характеристика");
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПоддержкаИСМП
	
	Если Не РежимРаботыСОборудованиемРозлива Тогда
		
		ВключенаПоддержкаИСМП = Ложь;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникДанных, "ВидОперации")
			И ИсточникДанных.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
			ВключенаПоддержкаИСМП = ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаРозничногоВозврата(ПараметрыСканирования, ВидПродукции);
		Иначе
			ВключенаПоддержкаИСМП = ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаРозничнойПродажи(ПараметрыСканирования, ВидПродукции);
			Если ВключенаПоддержкаИСМП И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыСканирования, "КонтролироватьОкончаниеСрокаГодности") Тогда
				ПараметрыСканирования.КонтролироватьОкончаниеСрокаГодности = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ВключенаПоддержкаИСМП Тогда
			ЗаполнитьПараметрыККТФФД12(ПараметрыСканирования, Контекст);
			ЗаполнитьПараметрыРеквизитовЧастичногоВыбытия(ПараметрыСканирования, Контекст);
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОбщиеПараметры
	
	ПараметрыСканирования.РежимБРМК = Истина;
	
	Реквизиты = Новый Структура;
	Если ТипЗнч(Контекст) = Тип("УправляемаяФорма") Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникДанных, "Организация") Тогда
			Реквизиты.Вставить("Организация", ИсточникДанных.Организация);
		КонецЕсли;
		
		Реквизиты.Вставить("Склад", ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(ИсточникДанных.ТорговыйОбъект, "СкладПродажи"));
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыСканирования, Реквизиты);
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияПеремещениеТоваров(Контекст, ПараметрыСканирования, ВидПродукции, ПроверкаКоличества = Неопределено)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
		Объект         = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
		Объект         = Контекст.Ссылка;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникДанных, "Организация") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидПродукции) Тогда
		ШтрихкодированиеИСКлиентСервер.ВключитьПоддержкуПрочейПродукции(ПараметрыСканирования);
	КонецЕсли;
	
	#Область ПоддержкаАлкогольнойПродукции
	
	Если ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер.ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
		
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ВНаличии"));
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ПустаяСсылка"));
		ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок = "Продажа";
		
		ОрганизацияЕГАИС = ИнтеграцияЕГАИСРТВызовСервера.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(
			ИсточникДанных.Организация,
			ИсточникДанных.МагазинОтправитель);
		Если ЗначениеЗаполнено(ОрганизацияЕГАИС) Тогда
			ПараметрыСканирования.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
		КонецЕсли;
		
		ПараметрыСканирования.КонтрольАкцизныхМарок     = Истина;
		ПараметрыСканирования.СоздаватьШтрихкодУпаковки = Истина;
		
		Если ПроверкаКоличества = Истина Тогда
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Штрихкод");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Номенклатура");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Характеристика");
		Иначе
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Цена");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Штрихкод");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Номенклатура");
			ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Характеристика");
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПоддержкаИСМП
	
	ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаОптовойОтгрузки(ПараметрыСканирования, ВидПродукции);
	
	#КонецОбласти
	
	#Область ОбщиеПараметры
	
	ПараметрыСканирования.Склад = ИсточникДанных.СкладОтправитель;
	ПараметрыСканирования.Вставить("Магазин", ИсточникДанных.МагазинОтправитель);
	
	Если ИсточникДанных.Организация = ИсточникДанных.ОрганизацияПолучатель
		И НЕ ИнтеграцияЕГАИСРТВызовСервера.ОперацияОтражаетсяВЕГАИС(Объект) Тогда
		ПараметрыСканирования.РазрешенаОбработкаБезУказанияМарки  = Истина;
		ПараметрыСканирования.РазрешеноЗапрашиватьКодМаркировки   = Ложь;
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияВозвратТоваровОтПокупателя(Контекст, ПараметрыСканирования, ВидПродукции)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	Если НЕ ЗначениеЗаполнено(ВидПродукции) Тогда
		ШтрихкодированиеИСКлиентСервер.ВключитьПоддержкуПрочейПродукции(ПараметрыСканирования);
	КонецЕсли;
	
	#Область ПоддержкаАлкогольнойПродукции
	
	Если ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер.ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
		ПараметрыСканирования.ЗапрашиватьНоменклатуру = Ложь;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПоддержкаИСМП
	
	Контрагент = ИнтеграцияИСМПСлужебныйКлиентСервер.ЗначениеСвойстваКонтекста(Контекст, "Контрагент");
	
	Если ЗначениеЗаполнено(Контрагент) И ИнтеграцияИСРТВызовСервера.ЭтоРозничныйКлиент(Контрагент) Тогда
		
		Если ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаРозничногоВозврата(ПараметрыСканирования, ВидПродукции) Тогда
			ЗаполнитьПараметрыРеквизитовЧастичногоВыбытия(ПараметрыСканирования, Контекст);
		КонецЕсли;
		
	Иначе
	
		ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаОптовогоВозврата(ПараметрыСканирования, ВидПродукции);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОбщиеПараметры
	
	ПараметрыСканирования.Склад = ИсточникДанных.Склад;
	ПараметрыСканирования.Вставить("Магазин", ИсточникДанных.Магазин);
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияПриходныйКассовыйОрдер(Контекст, ПараметрыСканирования, ВидПродукции)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки         = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	Если ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаРозничнойПродажи(ПараметрыСканирования, ВидПродукции) Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыСканирования, "КонтролироватьОкончаниеСрокаГодности") Тогда
			ПараметрыСканирования.КонтролироватьОкончаниеСрокаГодности = Истина;
		КонецЕсли;
		ЗаполнитьПараметрыККТФФД12(ПараметрыСканирования, Контекст);
		ЗаполнитьПараметрыРеквизитовЧастичногоВыбытия(ПараметрыСканирования, Контекст);
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОбщиеПараметры
	
	Реквизиты = Новый Структура("ДатаДокумента", ИсточникДанных.Дата);
	ЗаполнитьЗначенияСвойств(ПараметрыСканирования, Реквизиты);
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияРасходныйКассовыйОрдер(Контекст, ПараметрыСканирования, ВидПродукции)
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	Если ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаРозничногоВозврата(ПараметрыСканирования, ВидПродукции) Тогда
		ЗаполнитьПараметрыККТФФД12(ПараметрыСканирования, Контекст);
		ЗаполнитьПараметрыРеквизитовЧастичногоВыбытия(ПараметрыСканирования, Контекст);
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияОплатаОтПокупателяПлатежнойКартой(Контекст, ПараметрыСканирования, ВидПродукции)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	ЗаполненыПараметрыИСМП = Ложь;
	Если ИсточникДанных.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента") Тогда
		Если ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаРозничнойПродажи(ПараметрыСканирования, ВидПродукции) Тогда
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыСканирования, "КонтролироватьОкончаниеСрокаГодности") Тогда
				ПараметрыСканирования.КонтролироватьОкончаниеСрокаГодности = Истина;
			КонецЕсли;
			ЗаполненыПараметрыИСМП = Истина;
		КонецЕсли;
	ИначеЕсли ИсточникДанных.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту") Тогда
		Если ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаРозничногоВозврата(ПараметрыСканирования, ВидПродукции) Тогда
			ЗаполненыПараметрыИСМП = Истина;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗаполненыПараметрыИСМП Тогда
		ЗаполнитьПараметрыККТФФД12(ПараметрыСканирования, Контекст);
		ЗаполнитьПараметрыРеквизитовЧастичногоВыбытия(ПараметрыСканирования, Контекст);
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОбщиеПараметры
	
	Реквизиты = Новый Структура("ДатаДокумента", ИсточникДанных.Дата);
	ЗаполнитьЗначенияСвойств(ПараметрыСканирования, Реквизиты);
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияРегистрацияБезналичнойОплаты(Контекст, ПараметрыСканирования, ВидПродукции)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	#Область ПоддержкаПродукцииИСМП
	
	ЗаполненыПараметрыИСМП = Ложь;
	Если ИсточникДанных.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента") Тогда
		Если ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаРозничнойПродажи(ПараметрыСканирования, ВидПродукции) Тогда
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыСканирования, "КонтролироватьОкончаниеСрокаГодности") Тогда
				ПараметрыСканирования.КонтролироватьОкончаниеСрокаГодности = Истина;
			КонецЕсли;
			ЗаполненыПараметрыИСМП = Истина;
		КонецЕсли;
	ИначеЕсли ИсточникДанных.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту") Тогда
		Если ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаРозничногоВозврата(ПараметрыСканирования, ВидПродукции) Тогда
			ЗаполненыПараметрыИСМП = Истина;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗаполненыПараметрыИСМП Тогда
		ЗаполнитьПараметрыККТФФД12(ПараметрыСканирования, Контекст);
		ЗаполнитьПараметрыРеквизитовЧастичногоВыбытия(ПараметрыСканирования, Контекст);
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОбщиеПараметры
	
	Реквизиты = Новый Структура("ДатаДокумента", ИсточникДанных.Дата);
	ЗаполнитьЗначенияСвойств(ПараметрыСканирования, Реквизиты);
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияПоступлениеТоваров(Контекст, ПараметрыСканирования, ВидПродукции)
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	Если НЕ ЗначениеЗаполнено(ВидПродукции) Тогда
		ШтрихкодированиеИСКлиентСервер.ВключитьПоддержкуПрочейПродукции(ПараметрыСканирования);
	КонецЕсли;
	
	#Область ПоддержкаПродукцииИСМП
	
	ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаЗакупки(ПараметрыСканирования, ВидПродукции);
	
	#КонецОбласти
	
	ПараметрыСканирования.СопоставлятьНоменклатуру  = Ложь;
	ПараметрыСканирования.СоздаватьШтрихкодУпаковки = Ложь;

КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияВозвратТоваровПоставщику(Контекст, ПараметрыСканирования, ВидПродукции)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	#Область Метаданные
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки";
	
	#КонецОбласти
	
	Если НЕ ЗначениеЗаполнено(ВидПродукции) Тогда
		ШтрихкодированиеИСКлиентСервер.ВключитьПоддержкуПрочейПродукции(ПараметрыСканирования);
	КонецЕсли;
	
	#Область ПоддержкаАлкогольнойПродукции
	Если ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер.ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
		ПараметрыСканирования.ЗапрашиватьНоменклатуру = Ложь;
	КонецЕсли;
	#КонецОбласти
	
	#Область ПоддержкаПродукциИСМП
	
	ШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканированияДокументаОптовойОтгрузки(ПараметрыСканирования, ВидПродукции);
	
	#КонецОбласти
	
	#Область ОбщиеПараметры
	
	ПараметрыСканирования.Склад = ИсточникДанных.Склад;
	ПараметрыСканирования.Вставить("Магазин", ИсточникДанных.Магазин);
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияРеализацияТоваров(Контекст, ПараметрыСканирования, ВидПродукции, ПроверкаКоличества = Неопределено)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидПродукции) Тогда
		ШтрихкодированиеИСКлиентСервер.ВключитьПоддержкуПрочейПродукции(ПараметрыСканирования);
	КонецЕсли;
	
	#Область ПоддержкаАлкогольнойПродукции
	
	Если ШтрихкодированиеОбщегоНазначенияЕГАИСКлиентСервер.ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
		
		ПараметрыСканирования.КонтрольАкцизныхМарок             = Ложь;
		ПараметрыСканирования.СоздаватьШтрихкодУпаковки         = Ложь;
		ПараметрыСканирования.РазрешеноЗапрашиватьКодМаркировки = Ложь;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОбщиеПараметры
	
	ПараметрыСканирования.Склад = ИсточникДанных.Склад;
	ПараметрыСканирования.Вставить("Магазин", ИсточникДанных.Магазин);
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ЗаполнитьБазовыеПараметрыСканирования(ПараметрыСканирования, Контекст)
	
	Если ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ДопустимВидПродукции(ПараметрыСканирования, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак"))
		Или ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ДопустимВидПродукции(ПараметрыСканирования, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак")) Тогда
		
		Если ТипЗнч(Контекст) = Тип("УправляемаяФорма") Тогда
			Если Не Контекст.ИмяФормы = "Обработка.РМКУправляемыйРежим.Форма.Форма" Тогда 
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект")
					И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст.Объект, "Организация") Тогда
					ПараметрыСканирования.Организация = Контекст.Объект.Организация;
				ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Организация") Тогда
					ПараметрыСканирования.Организация = Контекст.Организация;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыСканирования.Свойство("ИспользуютсяДанныеВыбораПоМаркируемойПродукции") Тогда
		ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции = Ложь
	КонецЕсли;
	
	Если ПараметрыСканирования.Свойство("ДатаДокумента")
		И Не ЗначениеЗаполнено(ПараметрыСканирования.ДатаДокумента) Тогда
		#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
			ПараметрыСканирования.ДатаДокумента = ОбщегоНазначения.ТекущаяДатаПользователя();
		#ИначеЕсли Клиент Тогда
			ПараметрыСканирования.ДатаДокумента = ОбщегоНазначенияКлиент.ДатаСеанса();
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыККТФФД12(ПараметрыСканирования, Контекст)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "ТаблицаКассККМОрганизаций")
		И ТипЗнч(Контекст) = Тип("УправляемаяФорма")
		И Контекст.ИмяФормы = "Обработка.РабочееМестоКассира.Форма.ФормаРМК" Тогда
		Если Контекст.ТаблицаКассККМОрганизаций.Количество() > 1 Тогда
			ТребуетсяПроверкаСредствамиККТ = Ложь;
			Для Каждого СтрокаКасс Из Контекст.ТаблицаКассККМОрганизаций Цикл
				Если СтрокаКасс.ПоддерживаетПроверкуКодовМаркировки Тогда
					ТребуетсяПроверкаСредствамиККТ = Истина;
				КонецЕсли;
			КонецЦикла;
			ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ = ТребуетсяПроверкаСредствамиККТ;
			Если ТребуетсяПроверкаСредствамиККТ Тогда
				ПараметрыСканирования.ТребоватьПолныйКодМаркировкиИСМП = Истина;
			КонецЕсли;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыКассыККМ = Неопределено;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "ПараметрыКассыККМ") Тогда
		ПараметрыКассыККМ = Контекст.ПараметрыКассыККМ;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст.Объект, "КассаККМ") Тогда
		ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(Контекст.Объект.КассаККМ);
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "ТаблицаКассККМОрганизаций") Тогда
		
		КассыСПроверкойКМ = Контекст.ТаблицаКассККМОрганизаций.НайтиСтроки(
			Новый Структура("ПоддерживаетПроверкуКодовМаркировки", Истина));
		ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ = КассыСПроверкойКМ.Количество() > 0;
		
		Если ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ
			И Контекст.ТаблицаКассККМОрганизаций.Количество() = 1 Тогда
			ПараметрыСканирования.ККТФФД12ИСМП = Контекст.ТаблицаКассККМОрганизаций[0].ИдентификаторУстройства;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПараметрыКассыККМ = Неопределено Тогда
		
		ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ = ПараметрыКассыККМ.ПоддерживаетПроверкуКодовМаркировки;
		Если ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ Тогда
			ПараметрыСканирования.ККТФФД12ИСМП = ПараметрыКассыККМ.ИдентификаторУстройства;
			ПараметрыСканирования.НомерФискальногоНакопителя = ИнтеграцияИСРТВызовСервера.ЗаводскойНомерФискальногоНакопителя(
				ПараметрыКассыККМ.ИдентификаторУстройства);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ Тогда
		ПараметрыСканирования.ТребоватьПолныйКодМаркировкиИСМП = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыРеквизитовЧастичногоВыбытия(ПараметрыСканирования, Контекст)
	
	ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеКоличество     = "ЧастичноеВыбытиеКоличество";
	ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеВариантУчета   = "ЧастичноеВыбытиеВариантУчета";
	ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеНоменклатура   = "ЧастичноеВыбытиеНоменклатура";
	ПараметрыСканирования.ИмяКолонкиЧастичноеВыбытиеХарактеристика = "ЧастичноеВыбытиеХарактеристика";
	
	ПараметрыСканирования.ИмяКолонкиРазрешительныйРежимИдентификаторЗапросаГИСМТ = "РазрешительныйРежимИдентификаторЗапросаГИСМТ";
	ПараметрыСканирования.ИмяКолонкиРазрешительныйРежимДатаЗапросаГИСМТ = "РазрешительныйРежимДатаЗапросаГИСМТ";
	
КонецПроцедуры

#КонецОбласти

