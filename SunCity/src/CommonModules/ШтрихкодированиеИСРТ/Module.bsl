#Область ПрограммныйИнтерфейс

// Выделяет из переданного массива штрихкодов упаковок элементы, в составе которых (на любом уровне вложенности, 
//   в т.ч. частично) находится продукция требуемого вида.
// 
// Параметры:
//   ШтрихкодыДляПроверки - Массив - проверяемые элементы типа СправочникСсылка.ШтрихкодыУпаковокТоваров.
//   ВидыПродукции - Массив, ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - Вид отбираемой продукции.
// Возвращаемое значение:
//   Массив - Массив - подходящие элементы типа СправочникСсылка.ШтрихкодыУпаковокТоваров.
Процедура ВыделитьШтрихкодыСодержащиеВидыПродукции(ШтрихкодыУпаковок, ВидыПродукцииИС) Экспорт
	
	ШтрихкодыУпаковок = ИнтеграцияИСРТ.ШтрихкодыСодержащиеВидыПродукции(ШтрихкодыУпаковок, ВидыПродукцииИС);
	
КонецПроцедуры

// Заполняет соответствие штрихкодов данными по номенклатуре, характеристике, маркируемой продукции.
// 
// Параметры:
// 	Штрихкоды            - Соответствие - Спискок штрихкодов.
// 	КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
//
Процедура ЗаполнитьИнформациюПоШтрихкодам(Штрихкоды, КэшированныеЗначения) Экспорт
	
	СписокШтрихкодов = Новый Массив;
	Для Каждого КлючЗначение Из Штрихкоды Цикл
		СписокШтрихкодов.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
	КонецЕсли;
	
	РегистрыСведений.Штрихкоды.ПолучитьДанныеПоШтрихкодам(КэшированныеЗначения, СписокШтрихкодов);
	
	Для Каждого КлючЗначение Из КэшированныеЗначения.Штрихкоды Цикл
		Если Штрихкоды[КлючЗначение.Ключ] <> Неопределено Тогда
			Штрихкоды[КлючЗначение.Ключ].Номенклатура         = КлючЗначение.Значение.Номенклатура;
			Штрихкоды[КлючЗначение.Ключ].Характеристика       = КлючЗначение.Значение.Характеристика;
			Штрихкоды[КлючЗначение.Ключ].МаркируемаяПродукция = КлючЗначение.Значение.МаркируемаяПродукция;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// В процедуре нужно реализовать подготовку данных для дальнейшей обработки штрихкодов.
//
// Параметры:
//  Форма - УправляемаяФорма - форма документа, в которой происходит обработка,
//  ДанныеШтрихкодов - Массив - полученные штрихкоды,
//  ПараметрыЗаполнения - (см. ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти).
//
// Возвращаемое значение:
//  Структура - подготовленные данные.
//
Процедура ПодготовитьДанныеДляОбработкиШтрихкодов(Форма, ДанныеШтрихкодов, ПараметрыЗаполнения, СтруктураДействий) Экспорт
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСИзмененнымиСтроками  = Новый Структура;
	
	Если ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьКоличествоЕдиниц");
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПересчитатьСумму Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьСумму");
		СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакЕдиницаИзмерения",
	Новый Структура("Номенклатура", "ЕдиницаИзмерения"));
	
	Если ШтрихкодированиеОбщегоНазначенияИС.ПрисутствуетАлкогольнаяПродукция(ПараметрыЗаполнения.ВидыПродукцииИС) Тогда
		
		ПараметрыЗаполненияНоменклатурыЕГАИС = Новый Структура;
		ПараметрыЗаполненияНоменклатурыЕГАИС.Вставить("ЗаполнитьФлагАлкогольнаяПродукция", Ложь);
		ПараметрыЗаполненияНоменклатурыЕГАИС.Вставить("ИмяКолонки", "АлкогольнаяПродукция");
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьНоменклатуруЕГАИС", ПараметрыЗаполненияНоменклатурыЕГАИС);
		
		Если ПараметрыЗаполнения.ЗаполнитьИндексАкцизнойМарки Тогда
			СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьИндексАкцизнойМарки");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ШтрихкодированиеОбщегоНазначенияИС.ПрисутствуетПродукцияИСМП(ПараметрыЗаполнения.ВидыПродукцииИС)
		Или ШтрихкодированиеОбщегоНазначенияИС.ПрисутствуетТабачнаяПродукция(ПараметрыЗаполнения.ВидыПродукцииИС) Тогда
		
		Если ПараметрыЗаполнения.ЗаполнитьGTIN Тогда
			СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьGTINВСтроке",
			
			Новый Структура("ДобавлятьЛидирующиеНули", Истина));
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиентСервер.ПараметрыОбработкиШтрихкодов();
	
	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ТолькоТовары                           = Истина;
	СтруктураДействий.ШтрихкодыВТЧ                           = ПараметрыЗаполнения.ШтрихкодыВТЧ;
	СтруктураДействий.МаркируемаяПродукцияВТЧ                = ПараметрыЗаполнения.МаркируемаяПродукцияВТЧ;
	
КонецПроцедуры

// В процедуре нужно реализовать обработку штрихкодов.
// Параметры:
//   Форма - УправляемаяФорма - форма для которой будут обработаны введенные штрихкоды.
//   ДанныеДляОбработки - Структура - структура параметров обработки штрихкодов.
//									   и заполняется данными из формы.
//   КэшированныеЗначения - Структура - кэш формы.
//
Процедура ОбработатьШтрихкоды(Форма, ДанныеДляОбработки, КэшированныеЗначения) Экспорт
	
	Если ДанныеДляОбработки.Свойство("ДанныеПоискаПоШтрихкоду") Тогда
		ОбработатьДанныеПоКодуСервер(Форма, ДанныеДляОбработки.ДанныеПоискаПоШтрихкоду);
	Иначе
		ДанныеДляОбработки.Вставить("ОбработанныеШтрихкоды", Новый Массив);
		
		Для Каждого СтруктураШтрихкода Из ДанныеДляОбработки.Штрихкоды Цикл
			СтруктураРезультат = ПодключаемоеОборудованиеРТ.ДанныеПоискаПоШтрихкоду(СтруктураШтрихкода.Штрихкод, Новый Структура("ПараметрыСобытийПО", ДанныеДляОбработки));
			
			НайденоОбъектов = СтруктураРезультат.ЗначенияПоиска.Количество();
			Если НайденоОбъектов = 1 Тогда
				ОбработатьДанныеПоКодуСервер(Форма, СтруктураРезультат);
			ИначеЕсли НайденоОбъектов > 1 Тогда
				ПодключаемоеОборудованиеРТ.ПодготовитьДанныеДляВыбора(СтруктураРезультат);
			КонецЕсли;
			
			ДанныеДляОбработки.ОбработанныеШтрихкоды.Добавить(СтруктураРезультат);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// В процедуре требуется реализовать алгоритм обработки полученных штрихкодов из ТСД.
//
// Параметры:
//  Форма - УправляемаяФорма - форма документа, в которой происходит обработка,
//  ДанныеДляОбработки - Структура - подготовленные ранее данные для обработки,
//  КэшированныеЗначения - Структура - используется механизмом обработки изменения реквизитов ТЧ.
//
Процедура ОбработатьДанныеИзТСД(Форма, ДанныеДляОбработки, КэшированныеЗначения) Экспорт
	
	ДанныеПоНоменклатуре = ПодключаемоеОборудованиеРТ.СформироватьМассивТоваров(ДанныеДляОбработки.Штрихкоды, Ложь);
	
	СтруктураДляСвертки = ДанныеПоНоменклатуре.ОпознанныеШтрихкоды;
	СтруктураДляСвертки.Вставить("УчитыватьСерийныеНомераПриСвертке", Ложь);
	
	МассивПослеСвертки = ПодключаемоеОборудованиеРТ.СвернутьДанныеПоНоменклатуреИзТСДСервер(СтруктураДляСвертки);
	ОбновитьКоличество = ДанныеДляОбработки.ИзменятьКоличество;
	
	Для Каждого СтрокаМассива Из МассивПослеСвертки Цикл
	
		СтрокаМассива.Вставить("ЗагрузкаИзТСД", Истина);
		Если ОбновитьКоличество Тогда
			СтрокаМассива.Вставить("ОбновитьКоличество", Истина);
		КонецЕсли;
		
		Если СтрокаМассива.Свойство("СерийныйНомер") Тогда
			
			ИдентификаторСтроки = ДобавитьНайденныеСерийныеНомера(Форма, СтрокаМассива);
			
		ИначеЕсли СтрокаМассива.Свойство("Карта") Тогда
			
			ТипКарты = ?(СтрокаМассива.ЭтоРегистрационнаяКарта,  НСтр("ru = 'регистрационная'"), НСтр("ru = 'дисконтная'"));
			ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена %2 карта. Обработка карт в данной форме при загрузке из ТСД не предусмотрена'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтрокаМассива.Штрихкод, ТипКарты);
			СтрокаМассива.Вставить("ТекстПредупреждения", ТекстПредупреждения);
			
		Иначе
			
			ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваров(Форма, СтрокаМассива);
			
		КонецЕсли;
		Если СтрокаМассива.Свойство("ТекстПредупреждения") Тогда
			Если ДанныеДляОбработки.Свойство("ТекстПредупреждения") Тогда
				ДанныеДляОбработки.ТекстПредупреждения.Добавить(СтрокаМассива.ТекстПредупреждения);
			Иначе
				МассивПредупреждений = Новый Массив;
				МассивПредупреждений.Добавить(СтрокаМассива.ТекстПредупреждения);
				ДанныеДляОбработки.Вставить("ТекстПредупреждения", МассивПредупреждений);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// В процедуре необходимо реализовать заполнение таблицы ДанныеПоШтрихкодамEAN на основании заполненной колонки ШтрихкодEAN.
// 
// Параметры:
// 	ДанныеПоШтрихкодамEAN - См. ШтрихкодированиеИС.ДанныеПоШтрихкодамEAN
//
Процедура ЗаполнитьДанныеПоШтрихкодамEAN(ДанныеПоШтрихкодамEAN, ПараметрыПоискаРМК = Неопределено) Экспорт
	
	МассивШтрихкодов = ДанныеПоШтрихкодамEAN.ВыгрузитьКолонку("ШтрихкодEAN");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(Номенклатура.Ссылка) КАК ПредставлениеНоменклатуры,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК ШтрихкодEAN,
	|	&ОпределениеВидаПродукции КАК ВидПродукции,
	|	&ОпределениеПризнакаМаркируемаяПродукция КАК МаркируемаяПродукция,
	|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Коэффициент, 1) КАК Количество,
	|	&УсловиеОсобенностьУчета КАК ПродукцияИС
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК ШтрихкодыНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ШтрихкодыНоменклатуры.Владелец = Номенклатура.Ссылка
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод В(&Штрихкоды)";
	
	ИнтеграцияИСРТ.ОпределитьВидПродукцииТекстаЗапроса(ТекстЗапроса, "Номенклатура");
	ИнтеграцияИСРТ.ОпределитьОсобенностиУчетаТекстаЗапроса(ТекстЗапроса, "Номенклатура",, Истина);
	ОпределениеМаркируемаяПродукция = ИнтеграцияИСРТ.ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса("Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОпределениеПризнакаМаркируемаяПродукция", ОпределениеМаркируемаяПродукция);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Штрихкоды", ДанныеПоШтрихкодамEAN.ВыгрузитьКолонку("ШтрихкодEAN"));
	
	ДанныеПоШтрихкодам = Запрос.Выполнить().Выгрузить();
	
	ТребуетсяОбработкаШтрихкодаНовымСтрокам = Истина;
	// Заполним таблицу.
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ШтрихкодEAN");
	ДанныеПоШтрихкодамРезультат = ДанныеПоШтрихкодамEAN.СкопироватьКолонки(); 
	Для Каждого СтрокаТаблицы Из ДанныеПоШтрихкодамEAN Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, СтрокаТаблицы);
		
		// Определим, требуется ли обработка штрихкода средствами РТ.
		НайденаПродукцияИС = Ложь;
		
		СтрокиШтрихкодов = ДанныеПоШтрихкодам.НайтиСтроки(ПараметрыПоиска);
		Для Каждого СтрокаШтрихкод Из СтрокиШтрихкодов Цикл
			Если СтрокаШтрихкод.ПродукцияИС И СтрокаШтрихкод.МаркируемаяПродукция Тогда
				НайденаПродукцияИС = Истина;
				ТребуетсяОбработкаШтрихкодаНовымСтрокам = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ТребуетсяОбработкаШтрихкода = НЕ НайденаПродукцияИС;
		
		// Добавим найденные штрихкоды в результирующую таблицу.
		Для Каждого СтрокаШтрихкод Из СтрокиШтрихкодов Цикл
			СтрокаРезультат = ДанныеПоШтрихкодамРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаШтрихкод);
			СтрокаРезультат.ТребуетсяОбработкаШтрихкода = ТребуетсяОбработкаШтрихкода;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ДанныеПоШтрихкодамEAN Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, СтрокаТаблицы);
		СтрокиШтрихкодов = ДанныеПоШтрихкодам.НайтиСтроки(ПараметрыПоиска);
		
		// Добавим ненайденные штрихкоды, если сканирование выполняется не в форме проверки и подбора.
		Если СтрокиШтрихкодов.Количество() = 0 Тогда
			// Не нашли штрихкод.
			СтрокаРезультат = ДанныеПоШтрихкодамРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаТаблицы);
			СтрокаРезультат.ТребуетсяОбработкаШтрихкода = ТребуетсяОбработкаШтрихкодаНовымСтрокам;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПараметрыПоискаРМК = Неопределено Тогда
		
		Штрихкод = ПараметрыПоискаРМК.ШтрихкодОригинальный;
		ЭтоШтрихкодНоменклатуры = Ложь;
		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодамРезультат Цикл
			Если Штрихкод = СтрокаДанных.ШтрихкодEAN Тогда
				ЭтоШтрихкодНоменклатуры = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЭтоШтрихкодНоменклатуры Тогда
			ДанныеПоШтрихкодамРезультат.Очистить();
		КонецЕсли;
		
		Если ПараметрыПоискаРМК.Свойство("ДанныеРучногоСопоставления") Тогда
			ДанныеРучногоСопоставления = ПараметрыПоискаРМК.ДанныеРучногоСопоставления;
			ДанныеПоШтрихкодамРезультат.Очистить();
			
			НоваяСтрока = ДанныеПоШтрихкодамРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеРучногоСопоставления, , "Упаковка");
			Если ТипЗнч(ДанныеРучногоСопоставления.Упаковка) = Тип("СправочникСсылка.УпаковкиНоменклатуры") Тогда
				НоваяСтрока.Упаковка = ДанныеРучногоСопоставления.Упаковка;
			КонецЕсли;
			НоваяСтрока.ШтрихкодEAN = ДанныеРучногоСопоставления.Штрихкод;
			Если Не ЗначениеЗаполнено(НоваяСтрока.ШтрихкодEAN) И МассивШтрихкодов.Количество() > 0 Тогда
				НоваяСтрока.ШтрихкодEAN = МассивШтрихкодов[0];
			КонецЕсли;
			Если Не ЗначениеЗаполнено(НоваяСтрока.Количество) Тогда
				НоваяСтрока.Количество = 1;
			КонецЕсли;
			НоваяСтрока.ВидПродукции = ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(НоваяСтрока.Номенклатура.ОсобенностьУчета);
			НоваяСтрока.МаркируемаяПродукция = Истина;
			НоваяСтрока.ПредставлениеНоменклатуры = НоваяСтрока.Номенклатура;
		КонецЕсли;
		
		НайденаНоменклатура = Ложь;
		Для Каждого СтрокаРезультата Из ДанныеПоШтрихкодамРезультат Цикл
			Если ЗначениеЗаполнено(СтрокаРезультата.Номенклатура) Тогда
				НайденаНоменклатура = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденаНоменклатура Тогда
			ПараметрыПоискаРМК.ФильтрПоискаПоШтрихкоду.Вставить("ЗаданнаяТаблицаНоменклатуры", ДанныеПоШтрихкодамРезультат);
		КонецЕсли;
		ДанныеШтрихкодаРМК = Новый Структура;
		РаботаСоШтрихкодамиПереопределяемый.ЗаполнитьДанныеПоискаПоШтрихкоду(Штрихкод, ПараметрыПоискаРМК, ДанныеШтрихкодаРМК);
		Если НайденаНоменклатура Тогда
			ПараметрыПоискаРМК.ФильтрПоискаПоШтрихкоду.Удалить("ЗаданнаяТаблицаНоменклатуры");
		КонецЕсли;
		ДанныеШтрихкодаРМК.Вставить("ПараметрыДляОбработкиШтрихкода", ПараметрыПоискаРМК.ПараметрыДляОбработкиШтрихкода);
		
		Если Не НайденаНоменклатура И Не ЭтоШтрихкодНоменклатуры И ДанныеПоШтрихкодамРезультат.Количество() > 0 Тогда
			Если ДанныеШтрихкодаРМК.ЗначенияПоиска.Количество() > 0 Тогда
				Для Каждого ЗначениеПоиска Из ДанныеШтрихкодаРМК.ЗначенияПоиска Цикл
					Если ЗначениеПоиска.ТипОбъекта = Тип("СправочникСсылка.ШтрихкодыУпаковокТоваров")
						И ЗначениеЗаполнено(ЗначениеПоиска.Владелец.Номенклатура) Тогда
						СтрокаДанных = ДанныеПоШтрихкодамРезультат[0];
						СтрокаДанных.ВидПродукции              =
							ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ЗначениеПоиска.Номенклатура.ОсобенностьУчета);
						СтрокаДанных.МаркируемаяПродукция      = Истина;
						СтрокаДанных.Номенклатура              = ЗначениеПоиска.Номенклатура;
						СтрокаДанных.ПредставлениеНоменклатуры = ЗначениеПоиска.Номенклатура;
						НайденаНоменклатура = Истина;
						ДанныеПоШтрихкодамРезультат.ЗаполнитьЗначения(Ложь, "ТребуетсяОбработкаШтрихкода");
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		НайденоНесколькоПозиций = Ложь;
		Если НайденаНоменклатура Тогда
			СтруктураПозиции = Новый Структура("Номенклатура, Характеристика, Серия, Упаковка");
			Для Каждого СтрокаТовара Из ДанныеПоШтрихкодамРезультат Цикл
				Если ЗначениеЗаполнено(СтрокаТовара.Номенклатура) Тогда
					Если Не ЗначениеЗаполнено(СтруктураПозиции.Номенклатура) Тогда
						ЗаполнитьЗначенияСвойств(СтруктураПозиции, СтрокаТовара);
					Иначе
						Если Не СтрокаТовара.Номенклатура = СтруктураПозиции.Номенклатура
							Или Не СтрокаТовара.Характеристика = СтруктураПозиции.Характеристика
							Или Не СтрокаТовара.Серия = СтруктураПозиции.Серия
							Или Не СтрокаТовара.Упаковка = СтруктураПозиции.Упаковка Тогда
								НайденоНесколькоПозиций = Истина;
								Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Не ЭтоШтрихкодНоменклатуры И НайденоНесколькоПозиций Тогда
			ДанныеШтрихкодаРМК.ПараметрыДляОбработкиШтрихкода.Вставить("ПроверитьМаркуПослеВыбораНоменклатуры", Истина);
		КонецЕсли;
		
		Если ДанныеПоШтрихкодамРезультат.Количество() = 0 Тогда
			ШтрихкодПоискаДляСопоставления = ?(ЭтоШтрихкодНоменклатуры, Штрихкод, ДанныеШтрихкодаРМК.ПараметрыШтрихкода.ШтрихкодПоиска);
			
			НоваяСтрока = ДанныеПоШтрихкодамРезультат.Добавить();
			НоваяСтрока.ТребуетсяОбработкаШтрихкода = Истина;
			НоваяСтрока.ШтрихкодEAN = ШтрихкодПоискаДляСопоставления;
			НоваяСтрока.ДанныеШтрихкода = ДанныеШтрихкодаРМК;
		Иначе
			Если Не НайденаНоменклатура Или НайденоНесколькоПозиций Тогда
				ДанныеПоШтрихкодамРезультат.ЗаполнитьЗначения(Истина, "ТребуетсяОбработкаШтрихкода");
			КонецЕсли;
			Если НайденоНесколькоПозиций И ДанныеПоШтрихкодамРезультат.Количество() > 30 Тогда
				ДанныеПоШтрихкодамРезультат[0].ДанныеШтрихкода = ДанныеШтрихкодаРМК;
			Иначе
				ДанныеПоШтрихкодамРезультат.ЗаполнитьЗначения(ДанныеШтрихкодаРМК, "ДанныеШтрихкода");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ИменаКолонок = Новый Массив;
	Для Каждого Колонка Из ДанныеПоШтрихкодамРезультат.Колонки Цикл
		ИменаКолонок.Добавить(Колонка.Имя);
	КонецЦикла;
	ДанныеПоШтрихкодамРезультат.Свернуть(СтрСоединить(ИменаКолонок, ","));
	
	ДанныеПоШтрихкодамEAN = ДанныеПоШтрихкодамРезультат;
	
КонецПроцедуры

// В процедуре необходимо реализовать проверку необходимости выбора серии для данных по штрихкодам.
// 
// Параметры:
// 	ДанныеШтрихкода       - Структура - данные штрихкода.
// 	ПараметрыСканирования - Структура - (См. ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования).
// 	ТребуетсяВыбор        - Булево - исходящий, признак необходимости выбора серии.
//
Процедура ОпределитьНеобходимостьВыбораСерииДляДанныхШтрихкода(ДанныеШтрихкода, ПараметрыСканирования, ТребуетсяВыбор) Экспорт
	
	ТребуетсяВыбор = Ложь;
	
КонецПроцедуры

// В процедуре нужно реализовать заполнение массива ШтрихкодыУпаковок из данных документа.
// 
// Параметры:
// 	Документ - ДокументСсылка - проверяемый документ.
// 	ШтрихкодыУпаковок - Массив - Список штрихкодов.
//
Процедура ЗаполнитьШтрихкодыУпаковокДокумента(Документ, ШтрихкодыУпаковок) Экспорт
	
	ШтрихкодыУпаковок = Документ.ШтрихкодыУпаковок.ВыгрузитьКолонку("ЗначениеШтрихкода");
	
КонецПроцедуры

// В процедуре нужно реализовать заполнение таблицы данных данными документа основания.
// 
// Параметры:
// 	ПараметрыСканирования - (См. ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования).
// 	ТаблицаДанных - ТаблицаЗначений - Данные из документа основания.
Процедура СформироватьДанныеДокументаОснования(ПараметрыСканирования, ТаблицаДанных) Экспорт
	
	Если (ПараметрыСканирования.Свойство("ДокументЕГАИС")) Тогда
		ИнтеграцияЕГАИСРТ.СформироватьДанныеДокументаОснования(ПараметрыСканирования.ДокументОснование, 
		ПараметрыСканирования.ДокументЕГАИС, ТаблицаДанных);
	Иначе
		ИнтеграцияИСМПРТ.СформироватьТаблицуМаркируемойПродукцииДокумента(
		ПараметрыСканирования.ДокументОснование, ТаблицаДанных, ПараметрыСканирования.ДопустимыеВидыПродукции);
	КонецЕсли;
	
КонецПроцедуры

// В процедуре необходимо реализовать замену значений неопределено на пустые ссылки в строке дерева.
// 
// Параметры:
// 	СтрокаДерева - СтрокаДереваЗначений - строка дерева значений для заполнения.
//
Процедура ЗаменитьЗначенияНеопределеноНаПустыеСсылкиВСтрокеДерева(СтрокаДерева) Экспорт
	
	Если СтрокаДерева.Номенклатура = Неопределено Тогда
		СтрокаДерева.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	Если СтрокаДерева.Характеристика = Неопределено Тогда
		СтрокаДерева.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Если СтрокаДерева.Серия = Неопределено Тогда
		СтрокаДерева.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

// В процедуре необходимо реализовать обработку данных штрихкода для общей формы. результат обработки штрихкода следует
// вернуть в параметре РезультатОбработки.
// 
// Параметры:
// 	Форма - УправляемаяФорма - Общая форма.
// 	ДанныеШтрихкода - (См. ШтрихкодированиеИСКлиентСервер.ИнициализироватьДанныеШтрихкода).
// 	ПараметрыСканирования - (См. ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования).
// 	ВложенныеШтрихкоды - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
// 	РезультатОброботки - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода).
Процедура ОбработатьДанныеШтрихкодаДляОбщейФормы(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды, РезультатОброботки) Экспорт
	
	
КонецПроцедуры

// В данной процедуре требуется переопределить текст запроса, определяющий свойства маркируемой продукции.
// Номенклатура для запроса лежит во временной таблице "ДанныеШтрихкодовУпаковок". (ДанныеШтрихкодовУпаковок.Номенклатура).
// "ВидПродукции". Поле "Номенклатура" желательно индексировать.
//   Колонки временной таблицы "ДанныеШтрихкодовУпаковок":
//    * Номенклатура   - ОпределяемыйТип.Номенклатура
//    * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры
//    * Серия          - ОпределяемыйТип.СерияНоменклатуры
//   Ожидаемые действия:
//   * Создание временной таблицы "СвойстваМаркируемойПродукции" с колонками:
//     ** Номенклатура         - ОпределяемыйТип.Номенклатура
//     ** МаркируемаяПродукция - Булево
//     ** ВидПродукции         - ПеречислениеСсылка.ВидыПродукцииИС.
// Параметры:
//  ТекстЗапросаСвойстваМаркируемойПродукции - Строка - Переопределяемый текст запроса.
Процедура ПриОпределенииТекстаЗапросаСвойствМаркируемойПродукции(ТекстЗапросаСвойстваМаркируемойПродукции) Экспорт
	
	ТекстЗапросаСвойстваМаркируемойПродукции = 
	"ВЫБРАТЬ
	|	ДанныеШтрихкодовУпаковок.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ЕСТЬNULL(ДанныеШтрихкодовУпаковок.Номенклатура.ВидАлкогольнойПродукцииЕГАИС.Маркируемый, ЛОЖЬ)
	|		ИЛИ &УсловиеПродукцияИСМП) КАК МаркируемаяПродукция,
	|	ВЫБОР
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Алкогольная)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Обувь)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Шины)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Шины)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Фотоаппараты)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Фотоаппараты)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Духи)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Духи)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КреслаКоляски)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КреслаКоляски)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Велосипеды)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Велосипеды)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.АльтернативныйТабак)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.УпакованнаяВода)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.УпакованнаяВода)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Антисептики)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Антисептики)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БАДы)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.БАДы)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.НикотиносодержащаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Пиво)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Пиво)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.СоковаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.СоковаяПродукция)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезалкогольноеПиво)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.БезалкогольноеПиво)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхПодконтрольныеВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МясоПодконтрольноеВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ВетеринарныеПрепараты)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ВетеринарныеПрепараты)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ИгрыИИгрушкиДляДетей)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.РадиоэлектроннаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.РадиоэлектроннаяПродукция)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТитановаяМеталлопродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияПодконтрольнаяВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.РастительныеМасла)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.РастительныеМасла)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОптоволокноИОптоволоконнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхБезВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияБезВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|	КОНЕЦ КАК ВидПродукции
	|ПОМЕСТИТЬ СвойстваМаркируемойПродукции
	|ИЗ
	|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеШтрихкодовУпаковок.Номенклатура,
	|	ВЫБОР
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Алкогольная)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Обувь)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Шины)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Шины)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Фотоаппараты)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Фотоаппараты)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Духи)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Духи)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КреслаКоляски)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КреслаКоляски)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Велосипеды)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Велосипеды)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.АльтернативныйТабак)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.УпакованнаяВода)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.УпакованнаяВода)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Антисептики)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Антисептики)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БАДы)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.БАДы)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.НикотиносодержащаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Пиво)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Пиво)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.СоковаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.СоковаяПродукция)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезалкогольноеПиво)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.БезалкогольноеПиво)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхПодконтрольныеВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МясоПодконтрольноеВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ВетеринарныеПрепараты)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ВетеринарныеПрепараты)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ИгрыИИгрушкиДляДетей)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.РадиоэлектроннаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.РадиоэлектроннаяПродукция)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТитановаяМеталлопродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияПодконтрольнаяВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.РастительныеМасла)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.РастительныеМасла)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОптоволокноИОптоволоконнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхБезВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияБезВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура";
	
	ОсобенностиУчетаИСМП = "";
	Для Каждого ВидПродукции Из ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции() Цикл
		
		Если ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха
			И НЕ ИнтеграцияГИСМ.ПодсистемаНеИспользуется() Тогда
			Продолжить;
		КонецЕсли;
		
		ОсобенностьУчета = ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции, Истина);
		ОсобенностиУчетаИСМП = ОсобенностиУчетаИСМП
				+ ?(ОсобенностиУчетаИСМП = "", "", ", ")
				+ "ЗНАЧЕНИЕ(" + ОсобенностьУчета + ")";
	КонецЦикла;
	
	Если НЕ ОсобенностиУчетаИСМП = "" Тогда
		УсловиеПродукцияИСМП = СтрШаблон("ДанныеШтрихкодовУпаковок.Номенклатура.ОсобенностьУчета В (%1)",
			ОсобенностиУчетаИСМП);
	Иначе
		УсловиеПродукцияИСМП = "ЛОЖЬ";
	КонецЕсли;
	
	ТекстЗапросаСвойстваМаркируемойПродукции = СтрЗаменить(ТекстЗапросаСвойстваМаркируемойПродукции,
		"&УсловиеПродукцияИСМП", УсловиеПродукцияИСМП);
	
КонецПроцедуры

// В данной процедуре требуется переопределить сочетание клавиш для команды "Добавить без маркировки" в форме сканирования.
// 
// Параметры:
//  СочетаниеКлавиш - СочетаниеКлавиш - По умолчанию "Ctr + Z".
Процедура ПриОпределенииСочетанияКлавишДобавитьБезМаркировкиВФормеСканирования(СочетаниеКлавиш) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Проверяет являются ли данные обработки незарегистрированной дисконтной картой.
//
Функция ЭтоДисконтнаяКарта(РезультатОбработкиШтрихкода) Экспорт
	
	ЭтоДисконтнаяКарта = Ложь;
	
	ДанныеДляПроверки = Новый Структура();
	ДанныеДляПроверки.Вставить("Идентифицирован", Ложь);
	ДанныеДляПроверки.Вставить("Штрихкод", "");
	
	ИсточникПроверки = Неопределено;
	
	Если РезультатОбработкиШтрихкода.Свойство("ДанныеШтрихкода")
		И НЕ РезультатОбработкиШтрихкода.ДанныеШтрихкода = Неопределено Тогда
		
		ИсточникПроверки = РезультатОбработкиШтрихкода.ДанныеШтрихкода;
	Иначе
		Если РезультатОбработкиШтрихкода.Свойство("ИсходныеДанные")
			И НЕ РезультатОбработкиШтрихкода.ИсходныеДанные = Неопределено Тогда
			
			ИсточникПроверки = РезультатОбработкиШтрихкода.ИсходныеДанные;
		КонецЕсли;
	КонецЕсли;
	
	Если ИсточникПроверки = Неопределено Тогда
		Возврат ЭтоДисконтнаяКарта;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеДляПроверки, ИсточникПроверки);
	
	Если НЕ ДанныеДляПроверки.Идентифицирован
		И ЗначениеЗаполнено(ДанныеДляПроверки.Штрихкод)
		И КартаСоответствуетШаблону(ДанныеДляПроверки.Штрихкод) Тогда
		
		ЭтоДисконтнаяКарта = Истина;
	
	КонецЕсли;
	
	Возврат ЭтоДисконтнаяКарта;
КонецФункции

// В этой процедуре при необходимости следует реализовать дополнительные проверки на ошибки данных по штрихкодам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам);
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования и ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования);
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
//
Процедура ПриПроверкеДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки) Экспорт
	
	ЭтоВызовИзРМК = ПараметрыСканирования.Свойство("ДополнительныеПараметры")
		И ТипЗнч(ПараметрыСканирования.ДополнительныеПараметры) = Тип("Структура")
		И ПараметрыСканирования.ДополнительныеПараметры.Свойство("ПараметрыПоискаРМК");
		
	Если Не ЭтоВызовИзРМК Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВнешниеДанные = Ложь;
	ДобавитьПустыеВнешниеДанные = Ложь;
	Если ТипЗнч(ДанныеПоШтрихкодам.ДанныеКодовМаркировки) = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
			Если ЗначениеЗаполнено(СтрокаДанных.Номенклатура) И СтрокаДанных.ВнешниеДанныеПоШтрихкодам.Количество() = 0 Тогда
				ДобавитьВнешниеДанные = Истина;
			Иначе
				ДобавитьПустыеВнешниеДанные = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ДобавитьВнешниеДанные Тогда
		
		ПараметрыПоискаРМК = ПараметрыСканирования.ДополнительныеПараметры.ПараметрыПоискаРМК;
		Штрихкод = ПараметрыПоискаРМК.ШтрихкодОригинальный;
		
		ЗаданнаяТаблицаНоменклатуры =
			ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Скопировать( ,"Штрихкод, Номенклатура, Характеристика, Упаковка");
		
		ПараметрыПоискаРМК.ФильтрПоискаПоШтрихкоду.Вставить("ЗаданнаяТаблицаНоменклатуры", ЗаданнаяТаблицаНоменклатуры);
		ДанныеШтрихкодаРМК = Новый Структура;
		РаботаСоШтрихкодамиПереопределяемый.ЗаполнитьДанныеПоискаПоШтрихкоду(Штрихкод, ПараметрыПоискаРМК, ДанныеШтрихкодаРМК);
		ПараметрыПоискаРМК.ФильтрПоискаПоШтрихкоду.Удалить("ЗаданнаяТаблицаНоменклатуры");
		
		ДанныеШтрихкодаРМК.Вставить("ПараметрыДляОбработкиШтрихкода", ПараметрыПоискаРМК.ПараметрыДляОбработкиШтрихкода);
		
		Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировки Цикл
			Если СтрокаДанных.ВнешниеДанныеПоШтрихкодам.Количество() = 0 Тогда
				СтрокаДанных.ВнешниеДанныеПоШтрихкодам.Добавить(ДанныеШтрихкодаРМК);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункцииРТ

Процедура ОбработатьДанныеПоКодуСервер(Форма, СтруктураРезультат)
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		ПодключаемоеОборудованиеРТ.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ПодключаемоеОборудованиеРТ.ВставитьПредупреждениеОНевозможностиОбработкиСертификатов(СтруктураРезультат, СтрокаРезультата);
		
	Иначе
		
		ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваров(Форма, СтрокаРезультата);
		
	КонецЕсли;

	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если СтрокаРезультата.Свойство("НеобходимостьВводаАкцизнойМарки") Тогда
		СтруктураРезультат.Вставить("НеобходимостьВводаАкцизнойМарки", СтрокаРезультата.НеобходимостьВводаАкцизнойМарки);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьНайденныеПозицииТоваров(Форма, СтруктураПараметров)
	
	ИдентификаторСтроки = Неопределено;
	ДанныеПродукции = ИнтеграцияЕГАИСРТ.ДанныеАлкогольнойПродукции(СтруктураПараметров.Номенклатура);
	
	ТекстСообщения = "";
	Если НЕ ИнтеграцияЕГАИСРТКлиентСервер.ПроверитьДанныеАлкогольнойПродукции(Форма, ДанныеПродукции, СтруктураПараметров.Номенклатура, ТекстСообщения) Тогда
		СтруктураПараметров.Вставить("ТекстПредупреждения", ТекстСообщения);
		Возврат ИдентификаторСтроки;
	КонецЕсли;
	
	ДобавленаСтрока = Ложь;
	ТекущаяСтрока = ПодключаемоеОборудованиеРТ.ИнициализацияСтрокиТоваров(Форма, СтруктураПараметров, ДобавленаСтрока);
	
	Если ТекущаяСтрока.Свойство("ЕдиницаИзмерения") Тогда
		ТекущаяСтрока.ЕдиницаИзмерения = ДанныеПродукции.ЕдиницаИзмерения;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Свойство("Цена") Тогда
		ДанныеДокумента = Новый Структура;
		ДанныеДокумента.Вставить("Дата", Форма.Объект.Дата);
		
		Если Форма.Объект.Свойство("ОрганизацияЕГАИС") Тогда
			ДанныеДокумента.Вставить("Магазин", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.Объект.ОрганизацияЕГАИС, "ТорговыйОбъект"));
		Иначе
			ДанныеДокумента.Вставить("Магазин", Неопределено);
		КонецЕсли;
		
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(ДанныеДокумента));
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТ.ЗавершениеОбработкиСтрокиТоваров(Форма, ТекущаяСтрока, СтруктураДействий);
	
	Если ДобавленаСтрока Тогда
		Если ТекущаяСтрока.Свойство("МаркируемаяАлкогольнаяПродукция") Тогда
			ТекущаяСтрока.МаркируемаяАлкогольнаяПродукция = ДанныеПродукции.Маркируемый;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "АлкогольнаяПродукция") Тогда
			ТекущаяСтрока.АлкогольнаяПродукция = ИнтеграцияЕГАИСРТВызовСервера.АлкогольнаяПродукцияПоНоменклатуре(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика);
		КонецЕсли;
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		Если ТекущаяСтрока.Свойство("МаркируемаяАлкогольнаяПродукция") И ТекущаяСтрока.МаркируемаяАлкогольнаяПродукция Тогда
			СтруктураПараметров.Вставить("НеобходимостьВводаАкцизнойМарки", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

Функция ДобавитьНайденныеСерийныеНомера(Форма, СтруктураПараметров)
	
	ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найден подарочный сертификат. Обработка сертификатов в данной форме не предусмотрена'");
	ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтруктураПараметров.ДанныеПО);
	СтруктураПараметров.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	
	Возврат Неопределено;
	
КонецФункции

Функция СтруктураДляДобавленияСтроки() Экспорт 
	
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("Номенклатура",   Справочники.Номенклатура.ПустаяСсылка());
	СтруктураСтроки.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	СтруктураСтроки.Вставить("Количество",     0);
	СтруктураСтроки.Вставить("Штрихкод",       "");
	
	Возврат СтруктураСтроки;
	
КонецФункции

// Проверяет входит ли данный штрихкод в шаблон диапазона дисконтных карт.
//
// Параметры:
//  Штрихкод - Строка - результат чтения штрихкода.
//
// Возвращаемое значение:
//  Булево - является ли полученный штрихкод штрихкодом дисконтной карты.
//
Функция КартаСоответствуетШаблону(Штрихкод) Экспорт
	
	КартаСоответствуетШаблону = Ложь;
	
	Если НайтиНедопустимыеСимволыXML(Штрихкод) > 0 Тогда
		Возврат КартаСоответствуетШаблону;
	КонецЕсли;
	
	МассивШаблонов = Новый Массив;
	Если РегистрыСведений.ШаблоныРегистрацииНовыхКарт.РезультатПроверкиСоответствияШаблонам(
			Штрихкод,
			Перечисления.ВидыИнформационныхКарт.Штриховая,
			ПодключаемоеОборудованиеРТ.ТипШтрихкода(Штрихкод),
			МассивШаблонов) Тогда
			
		КартаСоответствуетШаблону = Истина;
	КонецЕсли;
	
	Возврат КартаСоответствуетШаблону;
	
КонецФункции

Функция ЭтоМарка(Штрихкод) Экспорт
	
	ТипыМарок = Новый Массив;
	ТипыМарок.Добавить("CODE128");
	ТипыМарок.Добавить("CODE39");
	ТипыМарок.Добавить("EAN128");
	
	ТипШтрихкода = МенеджерОборудованияКлиентСервер.ОпределитьТипШтрихкода(Штрихкод);
	Возврат ТипыМарок.Найти(ТипШтрихкода) <> Неопределено;
	
КонецФункции

#Область ОбработкаШтрихкода

Функция ДанныеШтрихкодаДляОбработки() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Номенклатура",            Справочники.Номенклатура.ПустаяСсылка());
	СтруктураПараметров.Вставить("Характеристика",          Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	СтруктураПараметров.Вставить("Серия",                   Справочники.СерииНоменклатуры.ПустаяСсылка());
	СтруктураПараметров.Вставить("Упаковка",                Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
	СтруктураПараметров.Вставить("Штрихкод",                "");
	СтруктураПараметров.Вставить("EAN",                     "");
	СтруктураПараметров.Вставить("ШтрихкодУпаковки",        Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка());
	СтруктураПараметров.Вставить("ТипУпаковки",             Перечисления.ТипыУпаковок.ПустаяСсылка());
	СтруктураПараметров.Вставить("ВидУпаковки",             Перечисления.ВидыУпаковокИС.ПустаяСсылка());
	СтруктураПараметров.Вставить("ВидПродукции",            Перечисления.ВидыПродукцииИС.ПустаяСсылка());
	СтруктураПараметров.Вставить("ТипШтрихкода",            Перечисления.ТипыШтрихкодов.ПустаяСсылка());
	СтруктураПараметров.Вставить("ОбработатьБезМаркировки", Ложь);
	СтруктураПараметров.Вставить("МаркируемаяПродукция",    Истина);
	СтруктураПараметров.Вставить("Количество",              0);
	// МОТП.
	СтруктураПараметров.Вставить("МРЦ",                     0);
	// ЕГАИС.
	СтруктураПараметров.Вставить("Справка2",                Справочники.Справки2ЕГАИС.ПустаяСсылка());
	СтруктураПараметров.Вставить("ВыбытиеБутылки",          Ложь);
	// Частичное выбытие.
	СтруктураПараметров.Вставить("ЧастичноеВыбытие",        Ложь);
	СтруктураПараметров.Вставить("ЧастичноеВыбытиеВариантУчета");
	// Разрешительный режиим.
	СтруктураПараметров.Вставить("РазрешительныйРежимИдентификаторЗапросаГИСМТ");
	СтруктураПараметров.Вставить("РазрешительныйРежимДатаЗапросаГИСМТ");
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ПараметрыШтрихкодаДляОбработки(Источник, ПараметрыСканирования, ДанныеШтрихкода = Неопределено) Экспорт
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("Объект");
	ПараметрыОбработки.Вставить("РезультатОбработки");
	ПараметрыОбработки.Вставить("ПараметрыЗаполнения");
	ПараметрыОбработки.Вставить("НастройкиКэша");
	ПараметрыОбработки.Вставить("ВидПродукцииИС");
	ПараметрыОбработки.Вставить("УчитыватьМРЦ", ИнтеграцияИСМПКлиентСерверПовтИсп.УчитыватьМРЦ());
	ПараметрыОбработки.Вставить("ИспользоватьУпаковкиНоменклатуры", ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры"));
	ПараметрыОбработки.Вставить("ПараметрыСканирования", ПараметрыСканирования);
	
	Форма = Неопределено;
	Если ТипЗнч(Источник) = Тип("ФормаКлиентскогоПриложения") Тогда
		Форма = Источник;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
			Объект = Форма.Объект;
		Иначе
			Объект = Форма;
		КонецЕсли;
	Иначе
		Объект = Источник;
	КонецЕсли;
	ПараметрыОбработки.Объект = Объект;
	
	РезультатОбработки = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода(Неопределено, ДанныеШтрихкода);
	Если НЕ ДанныеШтрихкода = Неопределено
		И ДанныеШтрихкода.Свойство("ОбработатьБезМаркировки") И ДанныеШтрихкода.ОбработатьБезМаркировки Тогда
		РезультатОбработки.ОбработкаШтрихкодаБезМарки = Истина;
	КонецЕсли;
	ПараметрыОбработки.РезультатОбработки = РезультатОбработки;
	
	Если НЕ ДанныеШтрихкода = Неопределено И НЕ ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		ПараметрыОбработки.ВидПродукцииИС = ДанныеШтрихкода.ВидПродукции;
	КонецЕсли;
	
	Если НЕ Форма = Неопределено
		И (ПараметрыОбработки.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Алкогольная
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыОбработки.ВидПродукцииИС)) Тогда
		ДобавлятьКоличество = НЕ ДанныеШтрихкода = Неопределено;
		ПараметрыЗаполнения = АкцизныеМаркиЕГАИС.ПараметрыЗаполненияТоваровИАкцизныхМарок(Форма, ДобавлятьКоличество, ПараметрыСканирования);
		ПараметрыЗаполнения.ЕстьСправка2                   = Ложь;
		ПараметрыЗаполнения.ПараметрыУказанияСерий         = Форма.ПараметрыУказанияСерий;
		ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция = "НоменклатураЕГАИС";
		ПараметрыЗаполнения.ЕстьКоличествоАкцизныхМарок    = Ложь;
		
		ПараметрыОбработки.ПараметрыЗаполнения = ПараметрыЗаполнения;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Ссылка")
		И (ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")) Тогда
		НастройкиКэша = ПроверкаИПодборПродукцииИС.НастройкиИсточникаКешаШтрихкодовУпаковок();
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			НастройкиКэша.ЧастичноеВыбытие = Истина;
			НастройкиКэша.ИспользоватьОСУ  = Ложь;
		КонецЕсли;
	Иначе
		НастройкиКэша = ПроверкаИПодборПродукцииИСМПРТ.НастройкиИсточникаКешаЧека();
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			НастройкиКэша.ЧастичноеВыбытие = Ложь;
			НастройкиКэша.ИспользоватьОСУ  = Истина;
		КонецЕсли;
	КонецЕсли;
	ПараметрыОбработки.НастройкиКэша = НастройкиКэша;
	
	Возврат ПараметрыОбработки;
	
КонецФункции

// Обрабабатывает штрихкод маркируемой продукции и помещает обработанные строки в результат обработки.
//
// Параметры:
//  ДанныеШтрихкодаДляОбработки - См. ШтрихкодированиеИСРТ.ДанныеШтрихкодаДляОбработки;
//  ПараметрыШтрихкодаДляОбработки - Выходной параметры - См. ШтрихкодированиеИСРТ.ПараметрыШтрихкодаДляОбработки;
//  Форма - ФормаКлиентскогоПриложения - Форма документа.
//
Процедура ОбработатьДанныеШтрихкодаПотребительскойУпаковки(ДанныеШтрихкодаДляОбработки, ПараметрыШтрихкодаДляОбработки, Форма = Неопределено) Экспорт
	
	Объект                = ПараметрыШтрихкодаДляОбработки.Объект;
	РезультатОбработки    = ПараметрыШтрихкодаДляОбработки.РезультатОбработки;
	ПараметрыЗаполнения   = ПараметрыШтрихкодаДляОбработки.ПараметрыЗаполнения;
	НастройкиКэша         = ПараметрыШтрихкодаДляОбработки.НастройкиКэша;
	ПараметрыСканирования = ПараметрыШтрихкодаДляОбработки.ПараметрыСканирования;
	
	Если НЕ ДанныеШтрихкодаДляОбработки.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И ДанныеШтрихкодаДляОбработки.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix Тогда
		РезультатОбработки.ТекстОшибки = НСтр("ru = 'Обработка кодов DataMatrix не поддерживается. Считайте код акцизной марки.'");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеШтрихкодаДляОбработки.Количество) Тогда
		ДанныеШтрихкодаДляОбработки.Количество = 1;
	КонецЕсли;
	
	Если ДанныеШтрихкодаДляОбработки.Количество > 1
		И ПараметрыШтрихкодаДляОбработки.ИспользоватьУпаковкиНоменклатуры Тогда
		ДанныеШтрихкодаДляОбработки.Упаковка = Справочники.УпаковкиНоменклатуры.Упаковка(
			ДанныеШтрихкодаДляОбработки.Номенклатура, ДанныеШтрихкодаДляОбработки.Количество);
	ИначеЕсли ДанныеШтрихкодаДляОбработки.Упаковка = Неопределено Тогда
		ДанныеШтрихкодаДляОбработки.Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Если ПараметрыШтрихкодаДляОбработки.УчитыватьМРЦ
		И ДанныеШтрихкодаДляОбработки.Количество > 1
		И НЕ ЗначениеЗаполнено(ДанныеШтрихкодаДляОбработки.Упаковка) Тогда
		ДанныеШтрихкодаДляОбработки.МРЦ = ДанныеШтрихкодаДляОбработки.МРЦ / ДанныеШтрихкодаДляОбработки.Количество;
	КонецЕсли;
	
	ВсегоПоПараметрамПоиска = 0;
	СтрокаДляОбработки = Неопределено;
	КонтролироватьМРЦ  = Неопределено;
	
	РазрешеноЗапрашиватьКодМаркировки = Истина;
	Если ЗначениеЗаполнено(ПараметрыСканирования)
		И ПараметрыСканирования.Свойство("РазрешеноЗапрашиватьКодМаркировки") Тогда
		РазрешеноЗапрашиватьКодМаркировки = ПараметрыСканирования.РазрешеноЗапрашиватьКодМаркировки;
	КонецЕсли;
	
	ПараметрыПоиска = ИнтеграцияИСРТКлиентСервер.ПоляДляПоискаМаркированнойПродукции();
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ДанныеШтрихкодаДляОбработки);
	НайденныеСтрокиТовары = Объект.Товары.НайтиСтроки(ПараметрыПоиска);
	Для Каждого НайденннаяСтрока Из НайденныеСтрокиТовары Цикл
		ВсегоПоПараметрамПоиска = ВсегоПоПараметрамПоиска + НайденннаяСтрока.Количество;
		
		КоэффициентУпаковки = 1;
		Если ЗначениеЗаполнено(НайденннаяСтрока.Упаковка) Тогда
			КоэффициентУпаковки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НайденннаяСтрока.Упаковка, "Коэффициент");
			КоэффициентУпаковки = ?(КоэффициентУпаковки = 0, 1, КоэффициентУпаковки);
		КонецЕсли;
		
		// Проверка соответствия МРЦ.
		Если КонтролироватьМРЦ = Неопределено Тогда
			КонтролироватьМРЦ = ПараметрыШтрихкодаДляОбработки.УчитыватьМРЦ
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НайденннаяСтрока, "МРЦ");
		КонецЕсли;
		Если КонтролироватьМРЦ И НЕ НайденннаяСтрока.МРЦ = ДанныеШтрихкодаДляОбработки.МРЦ  Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверка соответствия Упаковки.
		Если НайденннаяСтрока.Упаковка = ДанныеШтрихкодаДляОбработки.Упаковка И СтрокаДляОбработки = Неопределено Тогда
			СтрокаДляОбработки = НайденннаяСтрока;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ СтрокаДляОбработки = Неопределено Тогда
		КоличествоМаркируемойПродукции = ДанныеШтрихкодаДляОбработки.Количество;
		
		// Сопоставим количество продукции по данным кэша и товаров.
		Если НЕ Форма = Неопределено И РазрешеноЗапрашиватьКодМаркировки
			И ЗначениеЗаполнено(ДанныеШтрихкодаДляОбработки.ВидПродукции) Тогда
			ОбновляемаяСтрока = ПроверкаИПодборПродукцииИС.ДанныеШтрихкодаДляДобавленияВКеш(ДанныеШтрихкодаДляОбработки);
			ВсегоВКеше = ПроверкаИПодборПродукцииИС.КоличествоПоДаннымКеша(Форма, ОбновляемаяСтрока);
			Если ВсегоВКеше < ВсегоПоПараметрамПоиска Тогда
				КоличествоМаркируемойПродукции = Макс(0, ДанныеШтрихкодаДляОбработки.Количество + ВсегоВКеше - ВсегоПоПараметрамПоиска);
			КонецЕсли;
		КонецЕсли;
		
		Если КоличествоМаркируемойПродукции > 0 Тогда
			Если КоличествоМаркируемойПродукции = ДанныеШтрихкодаДляОбработки.Количество
				И НЕ СтрокаДляОбработки.Упаковка = ДанныеШтрихкодаДляОбработки.Упаковка Тогда
				СтрокаДляОбработки = Неопределено;
			Иначе
				СтрокаДляОбработки.Количество = СтрокаДляОбработки.Количество + КоличествоМаркируемойПродукции;
				РезультатОбработки.ИзмененныеСтроки.Добавить(СтрокаДляОбработки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаДляОбработки = Неопределено Тогда
		// Добавим строку.
		СтрокаДляОбработки = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДляОбработки, ДанныеШтрихкодаДляОбработки);
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДляОбработки, "Штрихкод")
			И ДанныеШтрихкодаДляОбработки.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная
			И ЗначениеЗаполнено(ДанныеШтрихкодаДляОбработки.EAN) Тогда
			СтрокаДляОбработки.Штрихкод = ДанныеШтрихкодаДляОбработки.EAN;
		КонецЕсли;
		РезультатОбработки.ДобавленныеСтроки.Добавить(СтрокаДляОбработки);
	Иначе
		// Заполним штрихкод при необходимости.
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДляОбработки, "Штрихкод")
			И НЕ ЗначениеЗаполнено(СтрокаДляОбработки.Штрихкод) Тогда
			Если ДанныеШтрихкодаДляОбработки.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная
				И ЗначениеЗаполнено(ДанныеШтрихкодаДляОбработки.EAN) Тогда
				СтрокаДляОбработки.Штрихкод = ДанныеШтрихкодаДляОбработки.EAN;
			Иначе
				СтрокаДляОбработки.Штрихкод = ДанныеШтрихкодаДляОбработки.Штрихкод;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Подбор серии для товаров из натурального меха.
	Если ДанныеШтрихкодаДляОбработки.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха
		И НЕ ЗначениеЗаполнено(ДанныеШтрихкодаДляОбработки.Серия) Тогда
		ДанныеШтрихкодаДляОбработки.Серия = ИнтеграцияИСРТ.НайтиСоздатьСериюПоДаннымШтрихкода(ДанныеШтрихкодаДляОбработки);
	КонецЕсли;
	
	// Добавим серию в документ.
	Если ЗначениеЗаполнено(ДанныеШтрихкодаДляОбработки.Серия)
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Серии") Тогда
		
		ПараметрыПоиска = Новый Структура("Серия");
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ДанныеШтрихкодаДляОбработки);
		НайденныеСтрокиСерии = Объект.Серии.НайтиСтроки(ПараметрыПоиска);
		Если НайденныеСтрокиСерии.Количество() = 0 Тогда
			СтрокаСерии = Объект.Серии.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСерии, ДанныеШтрихкодаДляОбработки);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеШтрихкодаДляОбработки.ОбработатьБезМаркировки Тогда
		СтрокаДляОбработки.МаркируемаяПродукция = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ДанныеШтрихкодаДляОбработки.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная
		И НастройкиКэша.Штрихкоды = "ШтрихкодыУпаковок" Тогда
		Возврат;
	КонецЕсли;
	
	// Добавим марку.
	Если ШтрихкодированиеИСРТ.ЭтоМарка(ДанныеШтрихкодаДляОбработки.Штрихкод) Тогда
		НоваяСтрокаУпаковки = Объект[НастройкиКэша.Штрихкоды].Добавить();
		НоваяСтрокаУпаковки[НастройкиКэша.ШтрихкодУпаковки] = ДанныеШтрихкодаДляОбработки.ШтрихкодУпаковки;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрокаУпаковки, "КодАкцизнойМарки") Тогда
			НоваяСтрокаУпаковки.КодАкцизнойМарки = ДанныеШтрихкодаДляОбработки.Штрихкод;
		КонецЕсли;
		
		// Особенности учета алкогольной продукции.
		Если ДанныеШтрихкодаДляОбработки.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
			НоваяСтрокаУпаковки.Справка2 = ДанныеШтрихкодаДляОбработки.Справка2;
			Если ДанныеШтрихкодаДляОбработки.Свойство("УпаковкаВерхнегоУровня") Тогда
				НоваяСтрокаУпаковки.ШтрихкодУпаковки = ДанныеШтрихкодаДляОбработки.УпаковкаВерхнегоУровня;
			КонецЕсли;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрокаУпаковки, "ВыбытиеБутылки") Тогда
				НоваяСтрокаУпаковки.ВыбытиеБутылки = ДанныеШтрихкодаДляОбработки.ВыбытиеБутылки;
			КонецЕсли;
		КонецЕсли;
		
		ШтрихкодированиеИСМП.ЗаполнениеСохраняемойСтрокиШтрихкодовУпаковки(
			НоваяСтрокаУпаковки,
			ДанныеШтрихкодаДляОбработки,
			ПараметрыСканирования);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрокаУпаковки, "КлючСвязи") Тогда
			Если Не ЗначениеЗаполнено(СтрокаДляОбработки.КлючСвязи) Тогда
				ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, СтрокаДляОбработки, "КлючСвязи");
			КонецЕсли;
			НоваяСтрокаУпаковки.КлючСвязи = СтрокаДляОбработки.КлючСвязи;
		КонецЕсли;
		
		Если НЕ Форма = Неопределено Тогда
			ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(Форма, НастройкиКэша);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обрабабатывает штрихкод маркируемой продукции и помещает обработанные строки в результат обработки.
//
// Параметры:
//  ДеревоУпаковок - Дерево значений, полученное в результате завершения работы формы проверки и подбора
//                   или результат метода "ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок";
//  ПараметрыШтрихкодаДляОбработки - Выходной параметры - См. ШтрихкодированиеИСРТ.ПараметрыШтрихкодаДляОбработки;
//  Форма - ФормаКлиентскогоПриложения - Форма документа.
//
Процедура ОбработатьДанныеШтрихкодовДереваУпаковок(ДеревоУпаковок, ПараметрыШтрихкодаДляОбработки, Форма = Неопределено, УпаковкаВерхнегоУровня = Неопределено) Экспорт
	
	Объект                = ПараметрыШтрихкодаДляОбработки.Объект;
	РезультатОбработки    = ПараметрыШтрихкодаДляОбработки.РезультатОбработки;
	ПараметрыЗаполнения   = ПараметрыШтрихкодаДляОбработки.ПараметрыЗаполнения;
	НастройкиКэша         = ПараметрыШтрихкодаДляОбработки.НастройкиКэша;
	ПараметрыСканирования = ПараметрыШтрихкодаДляОбработки.ПараметрыСканирования;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено
			И СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ДанныеШтрихкодаДляОбработки = ШтрихкодированиеИСРТ.ДанныеШтрихкодаДляОбработки();
		ЗаполнитьЗначенияСвойств(ДанныеШтрихкодаДляОбработки, СтрокаДерева);
		Если НЕ ЗначениеЗаполнено(ДанныеШтрихкодаДляОбработки.ВидПродукции) Тогда
			ДанныеШтрихкодаДляОбработки.ВидПродукции = ПараметрыШтрихкодаДляОбработки.ВидПродукцииИС;
		КонецЕсли;
		
		Если ДанныеШтрихкодаДляОбработки.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
			ИЛИ ДанныеШтрихкодаДляОбработки.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
			ИЛИ ДанныеШтрихкодаДляОбработки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
			ИЛИ ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ДанныеШтрихкодаДляОбработки.ВидПродукции)
				И ДанныеШтрихкодаДляОбработки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
				И ДанныеШтрихкодаДляОбработки.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка Тогда
				
			// Разберем данные.
			ДанныеШтрихкодаДляОбработки.Количество = ИнтеграцияИСРТ.КоличествоПродукцииПоДаннымШтрихкода(СтрокаДерева,
				ПараметрыШтрихкодаДляОбработки.ПараметрыСканирования, ДанныеШтрихкодаДляОбработки.ВидПродукции);
			
			Если Не ЗначениеЗаполнено(ДанныеШтрихкодаДляОбработки.МРЦ) И ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ДанныеШтрихкодаДляОбработки.ВидПродукции)
				И СтрокаДерева.СоставКодаМаркировки.Свойство("МРЦ") Тогда
				ДанныеШтрихкодаДляОбработки.МРЦ = СтрокаДерева.СоставКодаМаркировки.МРЦ;
			КонецЕсли;
			
			ЭтоСтрокаДанныхЧастичногоВыбытия = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЭтоСтрокаДанныхЧастичногоВыбытия(
				ДанныеШтрихкодаДляОбработки,
				ПараметрыСканирования,,
				Истина);
			
			Если ЭтоСтрокаДанныхЧастичногоВыбытия
				И ДанныеШтрихкодаДляОбработки.ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура
				И Не ДанныеШтрихкодаДляОбработки.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
				ДанныеШтрихкодаДляОбработки.Номенклатура   = СтрокаДерева.ЧастичноеВыбытиеНоменклатура;
				ДанныеШтрихкодаДляОбработки.Характеристика = СтрокаДерева.ЧастичноеВыбытиеХарактеристика;
			КонецЕсли;
			
			Если НЕ УпаковкаВерхнегоУровня = Неопределено Тогда
				ДанныеШтрихкодаДляОбработки.Вставить("УпаковкаВерхнегоУровня", УпаковкаВерхнегоУровня);
			КонецЕсли;
			
			ШтрихкодированиеИСРТ.ОбработатьДанныеШтрихкодаПотребительскойУпаковки(ДанныеШтрихкодаДляОбработки, ПараметрыШтрихкодаДляОбработки, Форма);
		
		Иначе
			
			// Продолжим разворачивать.
			ОбработатьДанныеШтрихкодовДереваУпаковок(СтрокаДерева, ПараметрыШтрихкодаДляОбработки, Форма, УпаковкаВерхнегоУровняСтрокиДерева);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти