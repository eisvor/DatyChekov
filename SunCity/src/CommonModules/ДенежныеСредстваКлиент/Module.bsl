
#Область ПрограммныйИнтерфейс

// Заполняет структуру выполнения операции внесение ДС в кассу ККМ.
// 
// Возвращаемое значение:
//  Структура - структура параметров операции.
//
Функция ПараметрыВыполненияОперацииВнесениеДенег() Экспорт; 
	
	Результат = Новый Структура();
	Результат.Вставить("Результат", Ложь);
	Результат.Вставить("СуммаВнесения");
	Результат.Вставить("РКО");
	Результат.Вставить("КассаККМ");
	Результат.Вставить("УникальныйИдентификатор");
	Результат.Вставить("ДокументВнесениеДС", Неопределено);
	Результат.Вставить("БезВыводаСообщений", Ложь);
	Результат.Вставить("ОшибкаТранзакции"  , Неопределено);
	Результат.Вставить("ТекстСообщения"    ,  "");
	
	Возврат Результат;
	
КонецФункции

// Выполняет внесение ДС в кассу ККМ, отправляет команду внесения на ФР и
// создает документ Внесение ДС в кассу ККМ.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - оповещение при завершении внесения денег.
//  ПараметрыВыполнения - Структура - параметры выполнения процедуры.
//
Процедура НачатьВнесениеДенег(ОповещениеПриЗавершении, ПараметрыВыполнения) Экспорт
	
	ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(ПараметрыВыполнения.КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекВызовСервера.ИспользоватьПодключаемоеОборудование();
	
	Если НЕ ИспользоватьПодключаемоеОборудование ИЛИ ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования Тогда
		Попытка
			ПараметрыВыполнения.ДокументВнесениеДС = ДенежныеСредстваВызовСервера.СоздатьДокументВнесениеДенежныхСредствВКассуККМ(ПараметрыВыполнения.СуммаВнесения, ПараметрыВыполнения.РКО, ПараметрыВыполнения.КассаККМ);
			ПараметрыВыполнения.Результат = Истина;
		Исключение
			ПараметрыВыполнения.Результат = Ложь;
		КонецПопытки;
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ПараметрыВыполнения);
		
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеНастроекВызовСервера.ИспользоватьПодключаемоеОборудование() Тогда
		Попытка
			ПараметрыВыполнения.ДокументВнесениеДС = ДенежныеСредстваВызовСервера.СоздатьДокументВнесениеДенежныхСредствВКассуККМ(ПараметрыВыполнения.СуммаВнесения, 
				ПараметрыВыполнения.РКО, ПараметрыВыполнения.КассаККМ);
			ПараметрыВыполнения.Результат = Истина;
		Исключение
			ПараметрыВыполнения.Результат = Ложь;
		КонецПопытки;
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ПараметрыВыполнения);
		Возврат; 
	Иначе
		Если ИдентификаторУстройства <> Неопределено Тогда
			ПараметрыВыполнения.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
			ПараметрыОперации = Новый Структура("ТипИнкассации, Сумма", 1, ПараметрыВыполнения.СуммаВнесения);
			
			ПараметрыКассы = ИнтеграцияWebKassaВызовСервераПереопределяемый.ПолучитьСведенияОбОрганизацииИКассеККМ(ПараметрыКассыККМ.Организация, ТекущаяДата(), ПараметрыВыполнения.КассаККМ);
			ПараметрыОперации.Вставить("РеквизитыКассыККМ", ПараметрыКассы);
			
			Оповещение = Новый ОписаниеОповещения("НачатьВнесениеДенегЗавершение", ЭтотОбъект, ПараметрыВыполнения);
			МенеджерОборудованияКлиент.НачатьИнкассациюНаФискальномУстройстве(Оповещение, ПараметрыВыполнения.УникальныйИдентификатор, ПараметрыОперации, ИдентификаторУстройства);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

// Завершение процедуры НачатьВнесениеДенег.
//
// Параметры:
//  РезультатВыполнения - Структура - структура результата процедуры внесения денег.
//  ПараметрыВыполнения - Структура - параметры выполнения процедуры.
//
Процедура НачатьВнесениеДенегЗавершение(РезультатВыполнения, ПараметрыВыполнения) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		Попытка
			ПараметрыВыполнения.ДокументВнесениеДС = ДенежныеСредстваВызовСервера.СоздатьДокументВнесениеДенежныхСредствВКассуККМ(ПараметрыВыполнения.СуммаВнесения, 
				ПараметрыВыполнения.РКО, ПараметрыВыполнения.КассаККМ);
			ПараметрыВыполнения.Результат = Истина;
		Исключение
			ПараметрыВыполнения.Результат = Ложь;
		КонецПопытки;
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПриЗавершении, ПараметрыВыполнения);
		Возврат; 
	Иначе
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка.
			                        |Чек не напечатан на фискальном устройстве.
			                        |Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		
		Если ПараметрыВыполнения.БезВыводаСообщений Тогда 
			ПараметрыВыполнения.ТекстСообщения = ТекстСообщения;
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		ПараметрыВыполнения.Результат = Ложь;
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПриЗавершении, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру выполнения операции внесение ДС в кассу ККМ.
//
// Возвращаемое значение:
//  Структура - структура параметров выполнения операции внесения ДС.
//
Функция ПараметрыВыполненияОперацииВыемкаДенег() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Результат", Ложь);
	Результат.Вставить("ИзымаемаяСумма");
	Результат.Вставить("КассаККМ");
	Результат.Вставить("УникальныйИдентификатор");
	Результат.Вставить("ДокументВыемка", Неопределено);
	Результат.Вставить("СсылкаНаОтчет" , Неопределено);
	Результат.Вставить("БезВыводаСообщений", Ложь);
	Результат.Вставить("ОшибкаТранзакции", Неопределено);
	Результат.Вставить("ДополнительныеПараметры", Неопределено);
	Результат.Вставить("ТекстСообщения" ,  "");
	Возврат Результат;
	
КонецФункции

// Выполняет выемку ДС из кассу ККМ, отправляет команду выемки на ФР и
// создает документ Выемка ДС из кассы  ККМ.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - оповещение при завершении выемки денег.
//  ПараметрыВыполнения - Структура - параметры выполнения процедуры.
//
Процедура НачатьВыемкуДенег(ОповещениеПриЗавершении, ПараметрыВыполнения) Экспорт
	
	ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(ПараметрыВыполнения.КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекВызовСервера.ИспользоватьПодключаемоеОборудование();
	
	ЗакрытьБезZОтчета = Ложь;
	Если ПараметрыВыполнения.Свойство("ЗакрытьБезZОтчета") Тогда
		ЗакрытьБезZОтчета = Истина;
	КонецЕсли;
	
	Если НЕ ИспользоватьПодключаемоеОборудование ИЛИ ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования ИЛИ ЗакрытьБезZОтчета Тогда
		
		Отказ = Ложь;
		ПараметрыВыполнения.ДокументВыемка = ДенежныеСредстваВызовСервера.СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(
			Отказ, ПараметрыВыполнения.ИзымаемаяСумма,
			ПараметрыВыполнения.КассаККМ, ПараметрыВыполнения.СсылкаНаОтчет, ПараметрыВыполнения.ДополнительныеПараметры);
		
		Если Отказ Тогда
			ПараметрыВыполнения.Результат = Ложь;
		Иначе
			ПараметрыВыполнения.Результат = Истина;
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ПараметрыВыполнения);
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеНастроекВызовСервера.ИспользоватьПодключаемоеОборудование() Тогда
		
		Отказ = Ложь;
		ПараметрыВыполнения.ДокументВыемка = ДенежныеСредстваВызовСервера.СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(
			Отказ, ПараметрыВыполнения.ИзымаемаяСумма,
			ПараметрыВыполнения.КассаККМ, ПараметрыВыполнения.СсылкаНаОтчет, ПараметрыВыполнения.ДополнительныеПараметры);
		
		Если Отказ Тогда
			ПараметрыВыполнения.Результат = Ложь;
		Иначе
			ПараметрыВыполнения.Результат = Истина;
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ПараметрыВыполнения);
		Возврат;
		
	Иначе
		Если ИдентификаторУстройства <> Неопределено Тогда
			ПараметрыВыполнения.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
			ПараметрыОперации = Новый Структура("ТипИнкассации, Сумма", 0, ПараметрыВыполнения.ИзымаемаяСумма);
			
			ПараметрыКассы = ИнтеграцияWebKassaВызовСервераПереопределяемый.ПолучитьСведенияОбОрганизацииИКассеККМ(ПараметрыКассыККМ.Организация, ТекущаяДата(), ПараметрыВыполнения.КассаККМ);
			ПараметрыОперации.Вставить("РеквизитыКассыККМ", ПараметрыКассы);
			
			Оповещение = Новый ОписаниеОповещения("НачатьВыемкуДенегЗавершение", ЭтотОбъект, ПараметрыВыполнения);
			МенеджерОборудованияКлиент.НачатьИнкассациюНаФискальномУстройстве(Оповещение, ПараметрыВыполнения.УникальныйИдентификатор, ПараметрыОперации, ИдентификаторУстройства);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

// Завершение процедуры НачатьВыемкуДенег
//
// Параметры:
//  РезультатВыполнения - Структура - структура результата процедуры выемки денег.
//  ПараметрыВыполнения - Структура - параметры выполнения процедуры.
//
Процедура НачатьВыемкуДенегЗавершение(РезультатВыполнения, ПараметрыВыполнения) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		Отказ = Ложь;
		ПараметрыВыполнения.ДокументВыемка = ДенежныеСредстваВызовСервера.СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(
			Отказ, ПараметрыВыполнения.ИзымаемаяСумма, 
			ПараметрыВыполнения.КассаККМ, ПараметрыВыполнения.СсылкаНаОтчет, ПараметрыВыполнения.ДополнительныеПараметры);
		
		Если Отказ Тогда
			ПараметрыВыполнения.Результат = Ложь;
		Иначе
			ПараметрыВыполнения.Результат = Истина;
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПриЗавершении, ПараметрыВыполнения);
		Возврат; 
	Иначе
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка.
			|Чек не напечатан на фискальном устройстве.
			|Дополнительное описание: %ДополнительноеОписание%'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		
		Если ПараметрыВыполнения.БезВыводаСообщений Тогда 
			ПараметрыВыполнения.ТекстСообщения = ТекстСообщения;
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		ПараметрыВыполнения.Результат = Ложь;
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПриЗавершении, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыиФункции

#Область КлиентБанк

#Область РаботаСФайломВыписки

Процедура ВыбратьФайлВыписки(ФормаЗагрузки = Неопределено, Оповещение = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	Если НЕ ФормаЗагрузки = Неопределено Тогда
		ДополнительныеПараметры.Вставить("ФормаЗагрузки", ФормаЗагрузки);
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр                  = НСтр("ru = 'Текстовый файл'") + " (*.txt)|*.txt";
	ДиалогВыбораФайла.Заголовок               = НСтр("ru = 'Выберите файл для загрузки выписки из банка'");
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.Расширение              = "txt";
	ДиалогВыбораФайла.ИндексФильтра           = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла          = "kl_to_1c.txt";
	ДиалогВыбораФайла.МножественныйВыбор      = Ложь;
	
	Если Оповещение = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ВыборФайлаВыпискиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(Оповещение, ДиалогВыбораФайла);
	
КонецПроцедуры

Процедура ВыборФайлаВыпискиЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ФормаЗагрузки = Неопределено;
	ДополнительныеПараметры.Свойство("ФормаЗагрузки", ФормаЗагрузки);
	
	Если НЕ ВыбранныеФайлы = Неопределено Тогда
		ИмяФайла = ВыбранныеФайлы.Получить(0);
		
		ЗагрузитьВыбранныйФайлВыписки(ИмяФайла, ФормаЗагрузки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФайлВыписки(ИмяФайла, ФормаЗагрузки = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИмяФайла",      ИмяФайла);
	Параметры.Вставить("ФормаЗагрузки", ФормаЗагрузки);
	Параметры.Вставить("Действие",      "ОткрытьФайл");
	
	ПроверитьФайлИВыполнитьДействие(Параметры);
	
КонецПроцедуры

Процедура ЗагрузитьВыбранныйФайлВыписки(ИмяФайла, ФормаЗагрузки = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИмяФайла", ИмяФайла);
	Параметры.Вставить("Действие", "ПрочитатьФайл");
	Если НЕ ФормаЗагрузки = Неопределено Тогда
		Параметры.Вставить("ФормаЗагрузки", ФормаЗагрузки);
	КонецЕсли;
	
	ПроверитьФайлИВыполнитьДействие(Параметры);
	
Конецпроцедуры

Процедура ПроверитьФайлИВыполнитьДействие(Параметры)
	
	Файл = Новый Файл(Параметры.ИмяФайла);
	
	Параметры.Вставить("Файл", Файл);
	
	Оповещение = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаВыпискиЗавершение", ЭтотОбъект, Параметры);
	Файл.НачатьПроверкуСуществования(Оповещение);
	
КонецПроцедуры

Процедура ПроверкаСуществованияФайлаВыпискиЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		Файл = ДополнительныеПараметры.Файл;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаНаКаталогФайлВыпискиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Файл.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
	Иначе
		ТекстСообщения = НСтр("ru = 'Файл обмена с банком по указанному пути не обнаружен.'");
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаНаКаталогФайлВыпискиЗавершение(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если ЭтоКаталог Тогда
		ТекстСообщения = НСтр("ru = 'Файл данных для загрузки документов из банка некорректен - выбран ""каталог"".
			|Выберите файл загрузки'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ФормаЗагрузки") Тогда
		ДополнительныеПараметры.ФормаЗагрузки.ОбработатьФайлВыпискиНаКлиенте(
			ДополнительныеПараметры.Действие,
			ДополнительныеПараметры.ИмяФайла);
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ФайлВыписки", ДополнительныеПараметры.ИмяФайла);
		
		Форма = ОткрытьФорму("Обработка.КлиентБанк.Форма.Форма", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТекстВыпискиДиректБанк(ВыпискиБанка) Экспорт
	
	СтекОповещений = Новый Массив;
	
	ТекстДляРазбора = "";
	Для каждого ЭлементСписка Из ВыпискиБанка Цикл
		ТекстВыписки = ДенежныеСредстваВызовСервера.ПрочитатьЭлектроннуюВыпискуБанка(ЭлементСписка.Значение, СтекОповещений);
		ТекстДляРазбора = ТекстДляРазбора + ?(ПустаяСтрока(ТекстДляРазбора), "", Символы.ПС) + ТекстВыписки;
	КонецЦикла;
	
	Для каждого Сообщение Из СтекОповещений Цикл
		ОбщегоНазначенияКлиент.СообщитьПользователю(Сообщение.Текст);
	КонецЦикла;
	
	Возврат ТекстДляРазбора;
	
КонецФункции

#КонецОбласти

#Область НастройкиОбменаСБанком

Функция НовыйДетальнаяНастройка()
	
	Настройки = Новый Структура;
	Настройки.Вставить("ФайлЗагрузки", "");
	Настройки.Вставить("Кодировка",    "");
	Настройки.Вставить("СоглашениеПрямогоОбменаСБанками", "");
	
	Возврат Настройки;
	
КонецФункции

Функция ВосстановитьДетальныеНастройкиОбмена(Объект, НастройкиОбменаСБанком) Экспорт
	
	Ключ = КлючНастройкиОбменаСБанком(Объект);
	Если Ключ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверим наличие сохраненных настроек.
	ДетальнаяНастройка = НастройкиОбменаСБанком.ДетальныеНастройки.Получить(Ключ);
	Если ДетальнаяНастройка = Неопределено Тогда
		Объект.СоглашениеПрямогоОбменаСБанками = ПредопределенноеЗначение("Справочник.НастройкиОбменСБанками.ПустаяСсылка");
		Возврат Ложь;
	КонецЕсли;
	
	Объект.ФайлЗагрузки = ДетальнаяНастройка.ФайлЗагрузки;
	Объект.Кодировка    = ДетальнаяНастройка.Кодировка;
	Если ДетальнаяНастройка.Свойство("СоглашениеПрямогоОбменаСБанками") Тогда
		Объект.СоглашениеПрямогоОбменаСБанками	= ДетальнаяНастройка.СоглашениеПрямогоОбменаСБанками;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОбновитьДетальныеНастройкиОбмена(Объект, НастройкиОбменаСБанком, Замещать = Истина) Экспорт
	
	Ключ = КлючНастройкиОбменаСБанком(Объект);
	Если Ключ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверим наличие сохраненных настроек.
	ДетальнаяНастройка = НастройкиОбменаСБанком.ДетальныеНастройки.Получить(Ключ);
	Если ДетальнаяНастройка = Неопределено Тогда
		ДетальнаяНастройка = НовыйДетальнаяНастройка();
	ИначеЕсли НЕ Замещать Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДетальнаяНастройка.ФайлЗагрузки = Объект.ФайлЗагрузки;
	ДетальнаяНастройка.Кодировка    = Объект.Кодировка;
	ДетальнаяНастройка.Вставить("СоглашениеПрямогоОбменаСБанками", Объект.СоглашениеПрямогоОбменаСБанками);
	
	НастройкиОбменаСБанком.ДетальныеНастройки.Вставить(Ключ, ДетальнаяНастройка);
	
	Возврат Истина;
	
КонецФункции

Функция КлючНастройкиОбменаСБанком(Объект)
	
	Ключ = Неопределено;
	Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		Ключ = Объект.БанковскийСчет;
	ИначеЕсли ЗначениеЗаполнено(Объект.Организация) Тогда
		Ключ = Объект.Организация;
	КонецЕсли;
	
	Возврат Ключ;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти