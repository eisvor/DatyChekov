
#Область ПрограммныйИнтерфейс

// Возвращяет список типа Перечисления.ВидыПродукцииИС содержащийся в ТЧ.
// 
// Параметры:
// 	Товары - ДанныеФормыКоллекция - ТЧ формы документа.
// Возвращаемое значение:
// 	СписокЗначений - список типа Перечисления.ВидыПродукцииИС содержащийся в ТЧ.
Функция ВидыПродукцииВТоварах(Товары) Экспорт
	
	Результат = Новый Массив;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ 
	|	Номенклатура.ОсобенностьУчета КАК ОсобенностьУчета
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В (&Номенклатура)
	|	И Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета)
	|	И Номенклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура.ОсобенностьУчета
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Номенклатура", Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидПродукции = ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(Выборка.ОсобенностьУчета);
		
		Если ВидПродукции <> Неопределено Тогда
			Результат.Добавить(ВидПродукции);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Определяет организацию для взаимодействия с ГОСИС для номенклатуры
// с учетом настроек рабочего места.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура.
//  ДанныеОРабочемМесте - (См. ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияПоОбъекту).
//
// Возвращаемое значение:
//  Неопределено, СправочникСсылка.Организации
//
Функция ОрганизацияВзаимодействияСИС(Номенклатура, ДанныеОРабочемМесте) Экспорт
	
	Организация = Неопределено;
	
	Если ЗначениеЗаполнено(ДанныеОРабочемМесте)
		И ЗначениеЗаполнено(Номенклатура) Тогда
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьОрганизациюПродажи", ДанныеОРабочемМесте);
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("Номенклатура", Номенклатура);
		ДанныеЗаполнения.Вставить("Склад", Справочники.Склады.ПустаяСсылка());
		ДанныеЗаполнения.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьОрганизациюПродажиВСтрокеТЧСервер(ДанныеЗаполнения, СтруктураДействий, Неопределено);
		
		Если ЗначениеЗаполнено(ДанныеЗаполнения.Организация) Тогда
			Организация = ДанныеЗаполнения.Организация;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

//Проверяет соответствие количества маркируемой продукции из ТЧ Товары к количеству акцизных марок ТЧ АкцизныеМарки
//
//Параметры:
//   Объект            - ДокументОбъект, ДокументСсылка - документ для проверки.
//   Отказ             - Булево - Отказ из вызывающего метода.
//   НаДату            - Дата - дата для определения обязательности маркировки.
//                     - Неопределено - на текущую дату сеанса.
//   ВыводитьСообщения - Булево - признак вывода сообщения для пользователя.
//
Процедура ПроверитьЗаполнениеАкцизныхМарок(Объект, Отказ, НаДату = Неопределено, ВыводитьСообщения = Истина) Экспорт
	
	Ошибки = Неопределено;
	
	ИмяТаблицыАкцизныеМарки = "ШтрихкодыУпаковок";
	ПолеТаблицыАкцизныеМарки = "ШтрихкодУпаковки";
	
	Если НЕ ИнтеграцияИС.ЕстьРеквизитТабЧастиОбъекта(ПолеТаблицыАкцизныеМарки, Объект.Ссылка.Метаданные(), ИмяТаблицыАкцизныеМарки) Тогда
		ИмяТаблицыАкцизныеМарки = "АкцизныеМарки";
		ПолеТаблицыАкцизныеМарки = "АкцизнаяМарка";
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объект)) Тогда
		ДанныеОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, "Товары, " + ИмяТаблицыАкцизныеМарки);
		
		Ссылка               = Объект;
		ТаблицаТовары        = ДанныеОбъекта.Товары.Выгрузить();
		ТаблицаАкцизныеМарки = ДанныеОбъекта[ИмяТаблицыАкцизныеМарки].Выгрузить();
	Иначе
		Ссылка               = Объект.Ссылка;
		ТаблицаТовары        = Объект.Товары.Выгрузить();
		ТаблицаАкцизныеМарки = Объект[ИмяТаблицыАкцизныеМарки].Выгрузить();
	КонецЕсли;
	
	
	ОсобенностьУчета = Новый Массив;
	Если НаДату = Неопределено Тогда
		Для Каждого ВидПродукции Из ОбщегоназначенияИСМП.ВидыПродукцииОбязательнойМаркировки() Цикл
			ОсобенностьУчета.Добавить(ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
		КонецЦикла;
	Иначе
		Для Каждого ВидПродукции Из ОбщегоНазначенияИСМПВызовСервера.УчитываемыеВидыМаркируемойПродукции(НаДату, Ложь) Цикл
			ОсобенностьУчета.Добавить(ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
		КонецЦикла;
	КонецЕсли;
	
	Если Не ОсобенностьУчета.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросМаркируемыхТоваров = Новый Запрос;
	ЗапросМаркируемыхТоваров.УстановитьПараметр("Ссылка", ТаблицаТовары.ВыгрузитьКолонку("Номенклатура"));
	ЗапросМаркируемыхТоваров.УстановитьПараметр("ОсобенностьУчета", ОсобенностьУчета);
	
	ЗапросМаркируемыхТоваров.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Ссылка)
	|	И Номенклатура.ОсобенностьУчета В (&ОсобенностьУчета)";
	ПроверяемыеТовары = ЗапросМаркируемыхТоваров.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Если ИнтеграцияИС.ЕстьРеквизитТабЧастиОбъекта("ЧастичноеВыбытиеКоличество", Объект.Ссылка.Метаданные(), ИмяТаблицыАкцизныеМарки) Тогда
		
		ШтрихкодыУпаковок = Новый Массив();
		Для Каждого СтрокаТаблицы Из ТаблицаАкцизныеМарки Цикл
			НовыйЭлемент = ШтрихкодированиеИС.НовыйЭлементКоллекцииУпаковокДляРаспределенияПоТоварам();
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтрокаТаблицы);
			НовыйЭлемент.ШтрихкодУпаковки = СтрокаТаблицы[ПолеТаблицыАкцизныеМарки];
			ШтрихкодыУпаковок.Добавить(НовыйЭлемент);
		КонецЦикла;
		
	Иначе
		ШтрихкодыУпаковок = ТаблицаАкцизныеМарки.ВыгрузитьКолонку(ПолеТаблицыАкцизныеМарки);
	КонецЕсли;
	
	МаркированныеТовары = ЭлектронноеВзаимодействиеИСМП.Содержимое(ШтрихкодыУпаковок);
	МаркированныеТовары.Индексы.Добавить("Номенклатура, Характеристика, Серия");
	
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		ПроверяемСтроку = ПроверяемыеТовары.Найти(СтрокаТовары.Номенклатура);
		Если ПроверяемСтроку<>Неопределено Тогда
			
			ПроверитьСерии = Ложь;
			ОтборПоПолям = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(ПроверитьСерии);
			ЗаполнитьЗначенияСвойств(ОтборПоПолям, СтрокаТовары);
			
			СтрокиАкцизныхМарок = МаркированныеТовары.НайтиСтроки(ОтборПоПолям);
			СтрокиТоваров       = ТаблицаТовары.НайтиСтроки(ОтборПоПолям);
			
			КоличествоМарок = 0;
			Для Каждого СтрокаМарка Из СтрокиАкцизныхМарок Цикл 
				КоличествоМарок = КоличествоМарок + СтрокаМарка.Количество;
			КонецЦикла;
			
			КоличествоЕдиницТоваров = 0;
			Для Каждого СтрокаТовар Из СтрокиТоваров Цикл 
				КоличествоЕдиницТоваров = КоличествоЕдиницТоваров + СтрокаТовар.Количество;
			КонецЦикла;
			
			Если КоличествоМарок <> КоличествоЕдиницТоваров Тогда
				
				Если ВыводитьСообщения Тогда
				
					Шаблон = НСтр("ru = 'Для %1 должно быть указано кодов маркировки - %2, а указано - %3.';
									|en = '%2 label codes must be specified for %1. The number specified is %3.'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						Шаблон,
						СтрокаТовары.Номенклатура,
						КоличествоЕдиницТоваров,
						КоличествоМарок);
					
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
						Ошибки,
						"Объект.Товары[%1].Номенклатура",
						ТекстОшибки,
						"",
						СтрокаТовары.НомерСтроки-1);
				Иначе
					Отказ = Истина;
				КонецЕсли;
				
			КонецЕсли;
			ПроверяемыеТовары.Удалить(ПроверяемСтроку);
		КонецЕсли;
	КонецЦикла;
	
	Если ВыводитьСообщения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив строк табличной части с соответствующим видом продукции.
//
// Возвращаемое значение - Массив
//
// Параметры:
//  ТаблицаТовары - ДанныеФормыКоллекция, ТабличнаяЧасть;
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС.
//
Функция СтрокиТоваровПоВидуПродукции(ТабличнаяЧасть, ВидПродукции, ТолькоМаркируемая = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТовары", ТабличнаяЧасть.Выгрузить());
	Запрос.УстановитьПараметр("ОсобенностьУчета", ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТаблицаТовары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Ссылка = Товары.Номенклатура)
	|			И (СправочникНоменклатура.ОсобенностьУчета = &ОсобенностьУчета)
	|ГДЕ
	|	&УсловиеМаркируемаяПродукция";
	
	Если ТолькоМаркируемая Тогда
		УсловиеМаркируемаяПродукция = ИнтеграцияИСРТ.ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса("СправочникНоменклатура");
	Иначе
		УсловиеМаркируемаяПродукция = "Истина";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеМаркируемаяПродукция", УсловиеМаркируемаяПродукция);
	
	Запрос.Текст = ТекстЗапроса;
	
	СтрокиПродукции = Новый Массив;
	ПараметрыПоиска = Новый Структура("Номенклатура");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, Выборка);
		НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(ПараметрыПоиска);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиПродукции, НайденныеСтроки, Истина);
	КонецЦикла;
	
	Возврат СтрокиПродукции;
	
КонецФункции

// Возвращает количество продукции по данным штрихкода.
//
// ДанныеШтрихкода - СтрокаДерева, Структура - Произвольные данные.
//
Функция КоличествоПродукцииПоДаннымШтрихкода(ДанныеШтрихкода, ПараметрыСканирования, ВидПродукции = Неопределено) Экспорт
	
	ШаблонДанных = Новый Структура;
	ШаблонДанных.Вставить("ПроизвольнаяЕдиницаУчета", Ложь);
	ШаблонДанных.Вставить("ВидПродукции", Перечисления.ВидыПродукцииИС.ПустаяСсылка());
	ШаблонДанных.Вставить("Количество",                        0);
	ШаблонДанных.Вставить("КоличествоПотребительскихУпаковок", 0);
	ШаблонДанных.Вставить("КоличествоПотребительскихУпаковокПоДаннымИБ", 0);
	ШаблонДанных.Вставить("ЧастичноеВыбытиеКоличество", 0);
	
	ЗаполнитьЗначенияСвойств(ШаблонДанных, ДанныеШтрихкода);
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		ШаблонДанных.ВидПродукции = ВидПродукции;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонДанных.ВидПродукции)
		И (ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ШаблонДанных.ВидПродукции)
		Или ШаблонДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная) Тогда
		ЭтоСтрокаДанныхЧастичногоВыбытия = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЭтоСтрокаДанныхЧастичногоВыбытия(
			ДанныеШтрихкода,
			ПараметрыСканирования,
			ШаблонДанных.ВидПродукции,
			Истина);
	Иначе
		ЭтоСтрокаДанныхЧастичногоВыбытия = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонДанных.Количество)
		И ЭтоСтрокаДанныхЧастичногоВыбытия
		Или ШаблонДанных.ПроизвольнаяЕдиницаУчета И Не ШаблонДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
		КоличествоПродукции = ШаблонДанных.Количество;
	ИначеЕсли ЗначениеЗаполнено(ШаблонДанных.ЧастичноеВыбытиеКоличество)
		И ЭтоСтрокаДанныхЧастичногоВыбытия
		И ШаблонДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
		КоличествоПродукции = ШаблонДанных.ЧастичноеВыбытиеКоличество;
	ИначеЕсли (ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ШаблонДанных.ВидПродукции, Истина)
		Или ШаблонДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная)
		И ЗначениеЗаполнено(ШаблонДанных.КоличествоПотребительскихУпаковок) Тогда
		КоличествоПродукции = ШаблонДанных.КоличествоПотребительскихУпаковок;
	ИначеЕсли ЗначениеЗаполнено(ШаблонДанных.КоличествоПотребительскихУпаковокПоДаннымИБ) Тогда
		КоличествоПродукции = ШаблонДанных.КоличествоПотребительскихУпаковокПоДаннымИБ;
	Иначе
		КоличествоПродукции = 1;
	КонецЕсли;
	
	Возврат КоличествоПродукции;
	
КонецФункции

#Область Номенклатура

// В процедуре требуется определить наличие товаров по виду продукции для которых используется механизм частичного выбытия
//
// Параметры:
//  Использование - Булево - Признак использования частичного выбытия (для вида продукции)
//  ВидПродукцииИС - Перечислениессылка.ВидыПродукцииИС - Проверяемый вид продукции.
//
Процедура ИспользованиеЧастичноеВыбытие(Использование, ВидПродукцииИС) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОсобенностьУчета", ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукцииИС));
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|		ПО ОписаниеНоменклатурыИС.Номенклатура = СправочникНоменклатура.Ссылка
		|		И ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия <> ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИС.ПустаяСсылка)
		|ГДЕ
		|	Номенклатура.ОсобенностьУчета = &ОсобенностьУчета";
	Использование = Не Запрос.Выполнить().Пустой();
	
КонецПроцедуры

// В процедуре требуется определить наличие товаров по виду продукции для которых единица учета не совпадает с 
//   количеством в потребительском коде маркировки
//
// Параметры:
//  Использование - Булево - Признак использования произвольных единиц учета (для вида продукции)
//  ВидПродукцииИС - Перечислениессылка.ВидыПродукцииИС - Проверяемый вид продукции.
//
Процедура ИспользованиеПроизвольныхЕдиницУчета(Использование, ВидПродукцииИС) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОсобенностьУчета", ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукцииИС));
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|		ПО (ОписаниеНоменклатурыИС.Номенклатура = СправочникНоменклатура.Ссылка)
	|ГДЕ
	|	СправочникНоменклатура.ОсобенностьУчета = &ОсобенностьУчета
	|	И (ЕСТЬNULL(ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке, 1) <> 1
	|			ИЛИ ЕСТЬNULL(ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки, 1) > 1
	|			ИЛИ ОписаниеНоменклатурыИС.Номенклатура ЕСТЬ NULL
	|				И СправочникНоменклатура.Весовой)";
	
	Использование = Не Запрос.Выполнить().Пустой();
	
КонецПроцедуры

#Область МаркируемаяПродукция

Процедура ПриЗаполненииТекстаЗапросаПризнакаМаркируемаяПродукцияПоНоменклатуре(ТекстЗапроса, ИмяТаблицыНоменклатура, ИмяПоляНоменклатура) Экспорт
	
		ТекстЗапроса = СтрШаблон(
		"ВЫБРАТЬ
		|	Товары.%1 КАК Номенклатура,
		|	%3 КАК Маркируемый
		|ИЗ %2 КАК Товары",
		ИмяПоляНоменклатура,
		ИмяТаблицыНоменклатура,
		ИнтеграцияИСРТ.ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса(
			СтрШаблон("Товары.%1",ИмяПоляНоменклатура)));
	
КонецПроцедуры

// Находит или создает новый элемент справочника "СерииНоменклатуры",
// соответствующий данным штрихкода.
//
// Параметры:
//  ДанныеШтрихкодаДляОбработки - См. ШтрихкодированиеИСРТ.ДанныеШтрихкодаДляОбработки;
//
// Возвращаемое значение:
//  Неопределено, СправочникСсылка.СерииНоменклатуры
//
Функция НайтиСоздатьСериюПоДаннымШтрихкода(ДанныеШтрихкодаДляОбработки) Экспорт
	
	СерияПоДаннымШтрихкода = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", ДанныеШтрихкодаДляОбработки.Номенклатура);
	Запрос.УстановитьПараметр("НомерКиЗГИСМ", ДанныеШтрихкодаДляОбработки.Штрихкод);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.ИспользованиеСерий = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
	|			ТОГДА Номенклатура.Ссылка
	|		ИНАЧЕ ВидыНоменклатуры.Ссылка
	|	КОНЕЦ КАК ВладелецСерии
	|ПОМЕСТИТЬ втВладелецСерии
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|	И ВидыНоменклатуры.ИспользоватьСерии = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерииНоменклатуры.Ссылка КАК Серия
	|ИЗ
	|	втВладелецСерии КАК втВладелецСерии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО втВладелецСерии.ВладелецСерии = СерииНоменклатуры.ВладелецСерии
	|ГДЕ
	|	СерииНоменклатуры.НомерКиЗГИСМ = &НомерКиЗГИСМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВладелецСерии.ВладелецСерии КАК ВладелецСерии
	|ИЗ
	|	втВладелецСерии КАК втВладелецСерии";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаСерии         = РезультатыЗапроса[РезультатыЗапроса.Количество()-2].Выбрать();
	ВыборкаВладелецСерии = РезультатыЗапроса[РезультатыЗапроса.Количество()-1].Выбрать();
	Если ВыборкаСерии.Следующий() Тогда
		СерияПоДаннымШтрихкода = ВыборкаСерии.Серия;
	ИначеЕсли ВыборкаВладелецСерии.Следующий() Тогда
		// Создадим серию по данным штрихкода.
		НоваяСерия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
		НоваяСерия.ВладелецСерии = ВыборкаВладелецСерии.ВладелецСерии;
		НоваяСерия.Номер         = ДанныеШтрихкодаДляОбработки.Штрихкод;
		НоваяСерия.НомерКиЗГИСМ  = ДанныеШтрихкодаДляОбработки.Штрихкод;
		НоваяСерия.ДополнительныеСвойства.Вставить("НеФормироватьКИЗ");
		
		Попытка
			НоваяСерия.Записать();
			СерияПоДаннымШтрихкода = НоваяСерия.Ссылка;
		Исключение
			ШаблонОшибки = НСтр("ru='Не удалось записать серию номенклатуры. %1'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, НоваяСерия);
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат СерияПоДаннымШтрихкода;
	
КонецФункции

// Возвращает коллекцию данных для регистрация ШтрихкодаУпаковки
// продукции из натурального меха.
//
Функция ДанныеШтрихкодаПродукцииИзНатуральногоМеха() Экспорт
	
	ДанныеШтрихкода = Новый Структура;
	ДанныеШтрихкода.Вставить("Номенклатура");
	ДанныеШтрихкода.Вставить("Характеристика");
	ДанныеШтрихкода.Вставить("Серия");
	ДанныеШтрихкода.Вставить("Штрихкод");
	ДанныеШтрихкода.Вставить("ВидПродукции", Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха);
	ДанныеШтрихкода.Вставить("ТипУпаковки", Перечисления.ТипыУпаковок.МаркированныйТовар);
	ДанныеШтрихкода.Вставить("Количество", 1);
	
	Возврат ДанныеШтрихкода;
	
КонецФункции

// Регистрирует серию как КодМаркировки (ШтрихкодУпаковки).
//
// Параметры:
//  Серия - СправочникСсылка.СерииНоменклатуры;
//
// Возвращаемое значение:
//  Булево - результат регистрации.
//
Функция ЗарегистрироватьШтрихкодУпаковкиПоСерии(Серия) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭлементЗарегистрирован = Ложь;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ")
		И НЕ ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции(Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха) Тогда
		Возврат ЭлементЗарегистрирован;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Серия", Серия);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СерииНоменклатуры.Ссылка КАК Серия,
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	СерииНоменклатуры.НомерКиЗГИСМ КАК Штрихкод,
	|	СерииНоменклатуры.RFIDTID КАК RFIDTID,
	|	СерииНоменклатуры.RFIDUser КАК RFIDUser,
	|	СерииНоменклатуры.RFIDEPC КАК RFIDEPC,
	|	СерииНоменклатуры.EPCGTIN КАК EPCGTIN,
	|	СерииНоменклатуры.RFIDМеткаНеЧитаемая КАК RFIDМеткаНеЧитаемая,
	|	ВидыНоменклатуры.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики
	|ПОМЕСТИТЬ втДанныеСерии
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО Номенклатура.Ссылка = СерииНоменклатуры.ВладелецСерии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|ГДЕ
	|	СерииНоменклатуры.Ссылка = &Серия
	|	И СерииНоменклатуры.НомерКиЗГИСМ <> """"
	|	И Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	втДанныеСерии.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ДвиженияСерийТоваров.Характеристика, НЕОПРЕДЕЛЕНО) КАК Характеристика,
	|	втДанныеСерии.Серия КАК Серия,
	|	втДанныеСерии.Штрихкод КАК Штрихкод
	|ИЗ
	|	втДанныеСерии КАК втДанныеСерии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО втДанныеСерии.Штрихкод = ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияСерийТоваров КАК ДвиженияСерийТоваров
	|		ПО втДанныеСерии.Номенклатура = ДвиженияСерийТоваров.Номенклатура
	|			И втДанныеСерии.Серия = ДвиженияСерийТоваров.Серия
	|			И (втДанныеСерии.ИспользоватьХарактеристики)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА втДанныеСерии.ИспользоватьХарактеристики
	|				ТОГДА НЕ ДвиженияСерийТоваров.Характеристика ЕСТЬ NULL
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ШтрихкодыУпаковокТоваров.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	втДанныеСерии.Штрихкод КАК ЗначениеШтрихкода,
	|	втДанныеСерии.RFIDTID КАК RFIDTID,
	|	втДанныеСерии.RFIDUser КАК RFIDUser,
	|	втДанныеСерии.RFIDEPC КАК RFIDEPC,
	|	втДанныеСерии.EPCGTIN КАК EPCGTIN,
	|	втДанныеСерии.RFIDМеткаНеЧитаемая КАК RFIDМеткаНеЧитаемая
	|ИЗ
	|	втДанныеСерии КАК втДанныеСерии
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеRFIDИСМП КАК ДанныеRFIDИСМП
	|		ПО втДанныеСерии.RFIDTID = ДанныеRFIDИСМП.RFIDTID
	|ГДЕ
	|	НЕ втДанныеСерии.RFIDTID = """"
	|	И ДанныеRFIDИСМП.RFIDTID ЕСТЬ NULL";
	
	РезультатПакета = Запрос.ВыполнитьПакет();
	
	// Создание ШтрихкодаУпаковки.
	ВыборкаШтрихкоды = РезультатПакета[РезультатПакета.Количество() - 2].Выбрать();
	Если ВыборкаШтрихкоды.Следующий() Тогда
		ДанныеШтрихкода = ИнтеграцияИСРТ.ДанныеШтрихкодаПродукцииИзНатуральногоМеха();
		ЗаполнитьЗначенияСвойств(ДанныеШтрихкода, ВыборкаШтрихкоды);
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("НеФормироватьКИЗ");
		
		ШтрихкодУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодУпаковки(ДанныеШтрихкода,, ПараметрыЗаписи);
		Если ЗначениеЗаполнено(ШтрихкодУпаковки) Тогда
			ЭлементЗарегистрирован = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Регистрация данных RFID.
	ВыборкаRFID = РезультатПакета[РезультатПакета.Количество() - 1].Выбрать();
	Если ВыборкаRFID.Следующий() Тогда
		ДанныеRFID = РегистрыСведений.ДанныеRFIDИСМП.НовыйЭлементЗаписиДанных();
		ЗаполнитьЗначенияСвойств(ДанныеRFID, ВыборкаRFID);
		
		Попытка
			РегистрыСведений.ДанныеRFIDИСМП.ЗаписатьДанные(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеRFID));
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось записать данные RFID в регистр ""Данные RFID ИС МП"".'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	
	Возврат ЭлементЗарегистрирован;
	
КонецФункции

#КонецОбласти

#КонецОбласти

Процедура ИННКППGLNОрганизации(Организация, Подразделение, ИННКППGLNОрганизации) Экспорт
	
	ИННКППGLNОрганизации = Новый Структура;
	ИННКППGLNОрганизации.Вставить("ИНН", "");
	ИННКППGLNОрганизации.Вставить("КПП", "");
	ИННКППGLNОрганизации.Вставить("GLN", "");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Организации.ИНН КАК ИНН,
	|	ЕСТЬNULL(КлассификаторОрганизацийЕГАИС.КПП, Организации.КПП) КАК КПП,
	|	ЕСТЬNULL(ОрганизацииДляОбменаГИСМ.GLN, """") КАК GLN
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииДляОбменаГИСМ КАК ОрганизацииДляОбменаГИСМ
	|		ПО Организации.Ссылка = ОрганизацииДляОбменаГИСМ.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО (КлассификаторОрганизацийЕГАИС.СоответствуетОрганизации)
	|			И Организации.Ссылка = КлассификаторОрганизацийЕГАИС.Контрагент
	|			И (КлассификаторОрганизацийЕГАИС.ТорговыйОбъект = &Подразделение)
	|			И (КлассификаторОрганизацийЕГАИС.Сопоставлено)
	|			И (НЕ КлассификаторОрганизацийЕГАИС.ПометкаУдаления)
	|			И (&ИспользоватьДанныеЕГАИС)
	|			И (ДЛИНАСТРОКИ(КлассификаторОрганизацийЕГАИС.КПП) > 0)
	|ГДЕ
	|	Организации.Ссылка = &Организация");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ИспользоватьДанныеЕГАИС", ЗначениеЗаполнено(Подразделение)
		И ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ИННКППGLNОрганизации, Выборка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ШтрихкодированиеИВидПродукции

Процедура ОпределитьВидПродукцииТекстаЗапроса(ТекстЗапроса,
	ПутьКПолюНоменклатура = "Номенклатура",
	ЗаменяемыйПараметр = "&ОпределениеВидаПродукции") Экспорт

	//ИнтеграцияИСМПТК_РозничноеВыбытие
	ОпределениеВидаПродукции = СтрШаблон("ВЫБОР
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.Табачная)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.Обувная)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.АльтернативныйТабак)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка)
	|	КОНЕЦ", ПутьКПолюНоменклатура);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменяемыйПараметр, ОпределениеВидаПродукции);
	Возврат;
	//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
	
	ОпределениеВидаПродукции = СтрШаблон("ВЫБОР
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Алкогольная)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Обувь)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Шины)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Шины)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Фотоаппараты)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Фотоаппараты)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Велосипеды)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Велосипеды)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КреслаКоляски)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КреслаКоляски)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Духи)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Духи)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.АльтернативныйТабак)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.УпакованнаяВода)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.УпакованнаяВода)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Антисептики)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Антисептики)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БАДы)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.БАДы)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.НикотиносодержащаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Пиво)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Пиво)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.СоковаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.СоковаяПродукция)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезалкогольноеПиво)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.БезалкогольноеПиво)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхПодконтрольныеВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МясоПодконтрольноеВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ВетеринарныеПрепараты)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ВетеринарныеПрепараты)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ИгрыИИгрушкиДляДетей)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.РадиоэлектроннаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.РадиоэлектроннаяПродукция)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТитановаяМеталлопродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияПодконтрольнаяВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.РастительныеМасла)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.РастительныеМасла)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОптоволокноИОптоволоконнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхБезВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС)
	|		КОГДА %1.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияБезВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|	КОНЕЦ", ПутьКПолюНоменклатура);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменяемыйПараметр, ОпределениеВидаПродукции);
	
КонецПроцедуры

Процедура ОпределитьОсобенностиУчетаТекстаЗапроса(ТекстЗапроса,
	ПутьКПолюНоменклатура = "Номенклатура",
	ЗаменяемыйПараметр = "&УсловиеОсобенностьУчета",
	ВключатьАлкогольнуюПродукцию = Ложь,
	ВключатьТабачнуюПродукцию = Истина,
	ВключатьМолочнуюПродукцию = Истина) Экспорт

	//ИнтеграцияИСМПТК_РозничноеВыбытие
	ТекстТабачнаяПродукция = "";
	Если Константы.ВестиУчетМаркируемогоТабакаИСМПТК.Получить()
		И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
		ТекстТабачнаяПродукция = "ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция),
		|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак),";
	КонецЕсли;
		
	ТекстОбувнаяПродукция = "";
	Если Константы.ВестиУчетМаркируемойОбувиИСМПТК.Получить()
		И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
		ТекстОбувнаяПродукция = "ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция),";
	КонецЕсли;
	
	ТекстЛекарственнаяПродукция = "";
	Если Константы.ВестиУчетМаркируемыхЛекарствИСМПТК.Получить()
		И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
		ТекстЛекарственнаяПродукция = "ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты),";
	КонецЕсли;
	
	ТекстЛегПром = "";
	Если Константы.ВестиУчетМаркируемогоТекстиляИСМПТК.Получить()
		И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
		ТекстЛегПром = "ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность),";
	КонецЕсли;
	
	ТекстМолочнаяПродукция = "";
	Если Константы.ВестиУчетМаркируемойМолочкиИСМПТК.Получить()
		И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
		ТекстМолочнаяПродукция = "ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС),";
	КонецЕсли;
	
	УсловиеОсобенностьУчета = СтрШаблон("%1.ОсобенностьУчета В (
	|				"+ТекстТабачнаяПродукция+"
	|				"+ТекстОбувнаяПродукция+"
	|				"+ТекстЛекарственнаяПродукция+"
	|				"+ТекстЛегПром +"
	|				"+ТекстМолочнаяПродукция +"
	|				ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.УпакованнаяВода))", ПутьКПолюНоменклатура);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменяемыйПараметр, УсловиеОсобенностьУчета);
	Возврат;
	//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
	
	ТекстАлкогольнаяПродукция = "";
	Если ВключатьАлкогольнуюПродукцию Тогда
		ТекстАлкогольнаяПродукция = "ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция),";
	КонецЕсли;
	
	ТекстТабачнаяПродукция = "";
	Если ВключатьТабачнуюПродукцию Тогда
		ТекстТабачнаяПродукция = "ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция),
		|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак),
		|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.НикотиносодержащаяПродукция),";
	КонецЕсли;
	
	ТекстМолочнаяПродукция = "";
	Если ВключатьМолочнуюПродукцию Тогда
		ТекстМолочнаяПродукция = "ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС), ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС),";
	КонецЕсли;
	
	ТекстПродукцияИзНатуральногоМеха = "";
	Если ИнтеграцияГИСМ.ПодсистемаНеИспользуется() Тогда
		ТекстПродукцияИзНатуральногоМеха = "ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха),";
	КонецЕсли;
	
	УсловиеОсобенностьУчета = СтрШаблон("%1.ОсобенностьУчета В (
	|				"+ТекстАлкогольнаяПродукция+"
	|				"+ТекстТабачнаяПродукция+"
	|				"+ТекстМолочнаяПродукция+"
	|				"+ТекстПродукцияИзНатуральногоМеха+"
	|				ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция),
	|				ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность),
	|				ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Фотоаппараты),
	|				ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Велосипеды),
	|				ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КреслаКоляски),
	|				ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Духи),
	|				ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Шины),
	|				ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.УпакованнаяВода),
	|				ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Антисептики),
	|				ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БАДы),
	|				ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Пиво),
	|				ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.СоковаяПродукция),
	|				ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС),
	|				ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхПодконтрольныеВЕТИС),
	|				ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МясоПодконтрольноеВЕТИС),
	|				ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ВетеринарныеПрепараты),
	|				ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ИгрыИИгрушкиДляДетей),
	|				ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.РадиоэлектроннаяПродукция),
	|				ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТитановаяМеталлопродукция),
	|				ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияПодконтрольнаяВЕТИС),
	|				ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.РастительныеМасла),
	|				ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОптоволокноИОптоволоконнаяПродукция),
	|				ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия),
	|				ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхБезВЕТИС),
	|				ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияБезВЕТИС),
	|				ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезалкогольноеПиво))", ПутьКПолюНоменклатура);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменяемыйПараметр, УсловиеОсобенностьУчета);
	
КонецПроцедуры

Функция ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса(ПутьКПолюНоменклатура) Экспорт
	
	//ИнтеграцияИСМПТК_РозничноеВыбытие
	ВидыПродукциИСМП = ОбщегоНазначенияИСМПТККлиентСервер.ВидыПродукцииИСМП();
	//ВидыПродукциИСМП = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
	//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
	ЗначенияОсобенностейУчета = Новый Массив();
	
	Для Каждого ВидПродукции Из ВидыПродукциИСМП Цикл
		
		Если ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха
			И НЕ ИнтеграцияГИСМ.ПодсистемаНеИспользуется() Тогда
			Продолжить;
		КонецЕсли;
		
		ОсобенностьУчета = ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции);
		Если ОсобенностьУчета <> Неопределено Тогда
			ЗначенияОсобенностейУчета.Добавить(СтрШаблон("ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.%1)", XMLСтрока(ОсобенностьУчета)));
		КонецЕсли;
	КонецЦикла;
	
	ОпределениеШаблон = "
	|	(ЕСТЬNULL(%1.ВидАлкогольнойПродукцииЕГАИС.Маркируемый, ЛОЖЬ))
	|	ИЛИ %1.ОсобенностьУчета В (%2)";
	
	Возврат СтрШаблон(ОпределениеШаблон, ПутьКПолюНоменклатура, СтрСоединить(ЗначенияОсобенностейУчета, ","));
	
КонецФункции

// Получает GTIN для таблицы переданных товаров
//
// Параметры:
//  Товары - ТаблицаЗначений - таблица товаров с колонками
//   * Номенклатура - СправочникСсылка.Номенклатура - номенклатура (маркируемый товар).
//   * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика номенклатуры (маркируемого товара).
//
// Возвращаемое значение:
//   Соответствие - данные возможных GTIN:
//    * Ключ     - Строка    - GTIN всех товаров входящей таблицы
//    * Значение - Структура - пара (номенклатура,характеристика) к которой относится GTIN
//
Функция GTINМаркированныхТоваров(Товары, ИспользоватьХарактеристику = Истина) Экспорт
	
	Результат = Новый Соответствие;
	
	Если Товары.Колонки.Найти("Характеристика") = Неопределено Тогда
		Товары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Штрихкоды.Штрихкод КАК Штрихкод,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Штрихкоды.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(Штрихкоды.Упаковка.Коэффициент, 1) КАК Коэффициент
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО Товары.Номенклатура = Штрихкоды.Владелец
	|			И (ВЫБОР
	|				КОГДА &ИспользоватьХарактеристику
	|					ТОГДА Товары.Характеристика = Штрихкоды.Характеристика
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)";
	
	Запрос.УстановитьПараметр("Товары", Товары);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристику", ИспользоватьХарактеристику);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(Выборка.Штрихкод) Тогда
			ДанныеШтрихкода = Новый Структура;
			ДанныеШтрихкода.Вставить("Номенклатура",   Выборка.Номенклатура);
			ДанныеШтрихкода.Вставить("Характеристика", Выборка.Характеристика);
			ДанныеШтрихкода.Вставить("Упаковка",       Выборка.Упаковка);
			ДанныеШтрихкода.Вставить("Коэффициент",    Выборка.Коэффициент);
			
			Результат.Вставить(Выборка.Штрихкод, ДанныеШтрихкода);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ИмяКолонкиЗаполнения = "Штрихкод") Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Таблица КАК Таблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Штрихкоды.Штрихкод КАК Штрихкод
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО Штрихкоды.Владелец = Товары.Номенклатура
	|		И Штрихкоды.Характеристика = Товары.Характеристика
	|УПОРЯДОЧИТЬ ПО
	|	Штрихкод УБЫВ
	|ИТОГИ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика");
	
	Запрос.УстановитьПараметр("Таблица", ДанныеПоШтрихкодам);
	
	ВыборкаПоНоменклатуре = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		
		ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоХарактеристикам.Следующий() Цикл
			
			ВнешнийШтрихкод = "";
			ВнутреннийШтрихкод = "";
			Прочее = "";
			
			ВыборкаПоШтрихкодам = ВыборкаПоХарактеристикам.Выбрать();
			Пока ВыборкаПоШтрихкодам.Следующий() Цикл
				Если РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоEANИлиGTIN(ВыборкаПоШтрихкодам.Штрихкод) Тогда
					Если РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоВнутреннийШтрихкод(ВыборкаПоШтрихкодам.Штрихкод) Тогда
						ВнутреннийШтрихкод = ВыборкаПоШтрихкодам.Штрихкод;
					Иначе
						ВнешнийШтрихкод = ВыборкаПоШтрихкодам.Штрихкод;
						Прервать;
					КонецЕсли;
				Иначе
					Прочее = ВыборкаПоШтрихкодам.Штрихкод;
				КонецЕсли;
			КонецЦикла;
			
			ШтрихкодКЗаполнению = "";
			Если ЗначениеЗаполнено(ВнешнийШтрихкод) Тогда
				ШтрихкодКЗаполнению = ВнешнийШтрихкод;
			ИначеЕсли ЗначениеЗаполнено(ВнутреннийШтрихкод) Тогда
				ШтрихкодКЗаполнению = ВнутреннийШтрихкод;
			ИначеЕсли ЗначениеЗаполнено(Прочее) Тогда
				ШтрихкодКЗаполнению = Прочее;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ШтрихкодКЗаполнению) Тогда
				
				ПараметрыОтбора = Новый Структура(
					"Номенклатура, Характеристика",
					ВыборкаПоНоменклатуре.Номенклатура, ВыборкаПоХарактеристикам.Характеристика);
				
				СтрокиКЗаполнениюШтрихкода = ДанныеПоШтрихкодам.НайтиСтроки(ПараметрыОтбора);
				Для Каждого СтрокаТЧ Из СтрокиКЗаполнениюШтрихкода Цикл
					СтрокаТЧ[ИмяКолонкиЗаполнения] = ШтрихкодКЗаполнению;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДанныеНоменклатуры

// Возвращает информацию о типе маркировки номенклатуры.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура, по которой требуется получение информации.
//
// Возвращаемое значение:
//  ИнормацияОНоменклатуре - Структура.
//
Функция ДанныеМаркированнойПродукции(Номенклатура) Экспорт
	
	ИнормацияОНоменклатуре = Новый Структура;
	ИнормацияОНоменклатуре.Вставить("ЕдиницаИзмерения", Неопределено);
	
	ИнормацияОНоменклатуре.Вставить("ВидАлкогольнойПродукцииЕГАИС", Неопределено);
	ИнормацияОНоменклатуре.Вставить("Маркируемый", Ложь);
	ИнормацияОНоменклатуре.Вставить("ПродаетсяВРозлив", Ложь);
	ИнормацияОНоменклатуре.Вставить("ЭтоАлкогольнаяПродукция", Ложь);
	
	ИнормацияОНоменклатуре.Вставить("ОсобенностиУчетаНоменклатуры", Неопределено);
	ИнормацияОНоменклатуре.Вставить("ЭтоТабачнаяПродукция", Ложь);
	ИнормацияОНоменклатуре.Вставить("ЭтоОбувнаяПродукция", Ложь);
	ИнормацияОНоменклатуре.Вставить("ЭтоПродукцияВЕТИС", Ложь);
	ИнормацияОНоменклатуре.Вставить("ЭтоПродукцияГИСМ", Ложь);
	ИнормацияОНоменклатуре.Вставить("ЭтоПродукцияКиЗГИСМ", Ложь);
	ИнормацияОНоменклатуре.Вставить("ЭтоЛегкаяПромышленность", Ложь);
	ИнормацияОНоменклатуре.Вставить("ЭтоМолочнаяПродукция", Ложь);
	ИнормацияОНоменклатуре.Вставить("ЭтоШины", Ложь);
	ИнормацияОНоменклатуре.Вставить("ЭтоФотоаппараты", Ложь);
	ИнормацияОНоменклатуре.Вставить("ЭтоДухи", Ложь);
	ИнормацияОНоменклатуре.Вставить("ЭтоВелосипеды", Ложь);
	ИнормацияОНоменклатуре.Вставить("ЭтоКреслаКоляски", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.ВидАлкогольнойПродукцииЕГАИС КАК ВидАлкогольнойПродукцииЕГАИС,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукцииЕГАИС.Маркируемый, ЛОЖЬ) КАК Маркируемый,
	|	ЕСТЬNULL(ВидыНоменклатуры.ПродаетсяВРозлив, ЛОЖЬ) КАК ПродаетсяВРозлив,
	|	ЕСТЬNULL(ВидыНоменклатуры.ОсобенностьУчета, ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка)) КАК ОсобенностиУчетаНоменклатуры,
	|	ЕСТЬNULL(ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция), ЛОЖЬ) КАК ЭтоАлкогольнаяПродукция,
	|	ЕСТЬNULL(ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция), ЛОЖЬ) КАК ЭтоТабачнаяПродукция,
	|	ЕСТЬNULL(ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция), ЛОЖЬ) КАК ЭтоОбувнаяПродукция,
	|	ЕСТЬNULL(ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС)
	|			ИЛИ ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС)
	|			ИЛИ ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС), ЛОЖЬ) КАК ЭтоПродукцияВЕТИС,
	|	ЕСТЬNULL(ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха), ЛОЖЬ) КАК ЭтоПродукцияГИСМ,
	|	ЕСТЬNULL(ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КиЗГИСМ), ЛОЖЬ) КАК ЭтоПродукцияКиЗГИСМ,
	|	ЕСТЬNULL(ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность), ЛОЖЬ) КАК ЭтоЛегкаяПромышленность,
	|	ЕСТЬNULL(ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС)
	|			ИЛИ ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС), ЛОЖЬ) КАК ЭтоМолочнаяПродукция,
	|	ЕСТЬNULL(ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Шины), ЛОЖЬ) КАК ЭтоШины,
	|	ЕСТЬNULL(ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Фотоаппараты), ЛОЖЬ) КАК ЭтоФотоаппараты,
	|	ЕСТЬNULL(ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Духи), ЛОЖЬ) КАК ЭтоДухи,
	|	ЕСТЬNULL(ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Велосипеды), ЛОЖЬ) КАК ЭтоВелосипеды,
	|	ЕСТЬNULL(ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КреслаКоляски), ЛОЖЬ) КАК ЭтоКреслаКоляски
	|ИЗ
	|	Справочник.Номенклатура КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукцииЕГАИС
	|		ПО (ВидыАлкогольнойПродукцииЕГАИС.Ссылка = Товары.ВидАлкогольнойПродукцииЕГАИС)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО (ВидыНоменклатуры.Ссылка = Товары.ВидНоменклатуры)
	|ГДЕ
	|	Товары.Ссылка = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ИнормацияОНоменклатуре, Выборка);
	КонецЕсли;
	
	Возврат ИнормацияОНоменклатуре;
	
КонецФункции

// см. ИнтеграцияИСПереопределяемый.ПравоРегистрацииШтрихкодовНоменклатуры.
//
Процедура ПравоРегистрацииШтрихкодовНоменклатуры(ДоступРазрешен) Экспорт
	
	ДоступРазрешен = ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.Штрихкоды);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеИПроверкаЗаполнения

// Заполняет в табличной части служебные реквизиты, например: признак использования характеристик номенклатуры, артикул.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма.
//  ТабличнаяЧасть - ДанныеФормыКоллекция - таблица для заполнения.
//
Процедура ЗаполнитьСлужебныеРеквизитыВКоллекции(Форма, ТабличнаяЧасть) Экспорт
	
	Если ТипЗнч(ТабличнаяЧасть) = Тип("ТаблицаЗначений") Тогда
		ТаблицаДанных = ТабличнаяЧасть;
	Иначе
		ТаблицаДанных = ТабличнаяЧасть.Выгрузить();
	КонецЕсли;
	
	КолонкиРеквизитов = ТаблицаДанных.Колонки;
	
	Если КолонкиРеквизитов.Найти("Номенклатура")= Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокРеквизитов = Новый Массив;
	
	Если КолонкиРеквизитов.Найти("Артикул")<> Неопределено Тогда
		СписокРеквизитов.Добавить("Артикул");
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("Код")<> Неопределено Тогда
		СписокРеквизитов.Добавить("Код");
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("ЕдиницаИзмерения")<> Неопределено Тогда
		СписокРеквизитов.Добавить("ЕдиницаИзмерения");
	КонецЕсли;
	
	МассивНоменклатура = ТаблицаДанных.ВыгрузитьКолонку("Номенклатура");
	МассивНоменклатура = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивНоменклатура);
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
		МассивНоменклатура,
		Справочники.Номенклатура.ПустаяСсылка());
	
	Если НЕ СписокРеквизитов.Количество() = 0 Тогда
		
		ИменаРеквизитов = СтрСоединить(СписокРеквизитов, ",");
		
		СоответствиеСведенийОНоменклатуре = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНоменклатура, ИменаРеквизитов);
		
		Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре[СтрокаТЧ.Номенклатура];
			
			Если СведенияОНоменклатуре <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, СведенияОНоменклатуре);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Заполнение через обработку табличной части.
	СтруктураДействий = Новый Структура;
	Если КолонкиРеквизитов.Найти("ХарактеристикиИспользуются") <> Неопределено Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Номенклатура", "Номенклатура");
		СтруктураПараметров.Вставить("ХарактеристикиИспользуются", "ХарактеристикиИспользуются");
		
		СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметров);
	КонецЕсли;
	
	СлужебныеРеквизиты = Новый Структура;
	Если КолонкиРеквизитов.Найти("ТребуетВзвешивания") <> Неопределено Тогда
		СлужебныеРеквизиты.Вставить("ТребуетВзвешивания");
	КонецЕсли;
	
	Если КолонкиРеквизитов.Найти("ПроизвольнаяЕдиницаУчета") <> Неопределено Тогда
		СлужебныеРеквизиты.Вставить("ПроизвольнаяЕдиницаУчета");
	КонецЕсли;
	
	Если СлужебныеРеквизиты.Количество() Тогда
		СтруктураДействий.Вставить("ЗаполнитьСлужебныеРеквизиты", СлужебныеРеквизиты);
	КонецЕсли;
	
	Если СтруктураДействий.Количество() Тогда
		
		СтруктураДействий.Вставить("НеобходимоОбработатьВсюТЧ");
		
		СтруктураТЧ = Новый Структура;
		СтруктураТЧ.Вставить("СтрокиТЧ" , ТабличнаяЧасть);
		ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции.
//
// Параметры:
//  СтрокаТабличнойЧасти - Структура, СтрокаТабличнойЧасти, ДокументСтрокаТабличнойЧасти - обрабатываемая строка.
//  СтруктураДействий - структура - структура выполняемых действий.
Процедура ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, СтруктураДействий) Экспорт
	
	ТипСтрокиТабличнойЧасти = ТипЗнч(СтрокаТабличнойЧасти);
	
	Если ТипСтрокиТабличнойЧасти = Тип("Структура") Тогда
		СтрокаТабличнойЧастиСтруктурой = ОбщегоНазначения.СкопироватьРекурсивно(СтрокаТабличнойЧасти, Ложь);
	ИначеЕсли ТипСтрокиТабличнойЧасти = Тип("СтрокаТаблицыЗначений") Тогда
		СтрокаТабличнойЧастиСтруктурой = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТабличнойЧасти);
	ИначеЕсли Метаданные.НайтиПоТипу(ТипСтрокиТабличнойЧасти) <> Неопределено Тогда
		СтрокаТабличнойЧастиСтруктурой = Новый Структура();
		ПодстрокиИмени = СтрРазделить(Метаданные.НайтиПоТипу(ТипСтрокиТабличнойЧасти).ПолноеИмя(), ".");
		
		Если ПодстрокиИмени.Количество() = 4 Тогда
			РеквизитыСтроки = Метаданные.Документы[ПодстрокиИмени[1]].ТабличныеЧасти[ПодстрокиИмени[3]].Реквизиты;
			Для Каждого РеквизитСтроки Из РеквизитыСтроки Цикл
				СтрокаТабличнойЧастиСтруктурой.Вставить(РеквизитСтроки.Имя, СтрокаТабличнойЧасти[РеквизитСтроки.Имя]);
			КонецЦикла;
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧастиСтруктурой.Вставить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(СтрокаТабличнойЧастиСтруктурой, СтруктураДействий, Неопределено);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТабличнойЧастиСтруктурой);
	
КонецПроцедуры

// Проверяет заполнение характеристик в таблице значений.
//
// Параметры:
//  ТаблицаТоваров - ТаблицаЗначений - таблица для проверки с колонками: Номенклатура, Характеристика.
//  Отказ - Булево - Истина - характеристики заполнены в требуемых строках, в противном случае - Ложь.
//
Процедура ПроверитьЗаполнениеХарактеристикВТаблицеЗначений(ТаблицаТоваров, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ СтрокиСОшибками
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользоватьХарактеристики = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
	|				ИЛИ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользоватьХарактеристики = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаХарактеристика
	|ИЗ
	|	СтрокиСОшибками КАК СтрокиСОшибками
	|ГДЕ
	|	ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользоватьХарактеристики <> ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать)";

	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НеЗаполненаХарактеристика Тогда
			Отказ = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИспользованиеХарактеристикСерийУпаковок

// В процедуре требуется определить признак использования характеристик 
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//   Использование - Булево - Признак использования характеристик (для номенклатуры или общий)
//   Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеХарактеристик(Использование, Номенклатура) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Использование = Ложь;
	ИначеЕсли Номенклатура = Неопределено Тогда
		Использование = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Использование = Ложь;
	Иначе
		Использование = Справочники.Номенклатура.ХарактеристикиИспользуются(Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

// В процедуре требуется определить признак использования серий
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//   Использование - Булево - Признак использования серий (для номенклатуры или общий)
//   Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеСерий(Использование, Номенклатура) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Использование = Ложь;
	ИначеЕсли Номенклатура = Неопределено Тогда
		Использование = Ложь;
	ИначеЕсли НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Использование = Ложь;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &ОпределениеПризнакаМаркируемаяПродукция
		|			ТОГДА ЛОЖЬ
		|		КОГДА Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
		|			ТОГДА Номенклатура.ВидНоменклатуры.ИспользоватьСерии
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПризнакИспользованияСерий
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &Номенклатура";
		
		ОпределениеМаркируемаяПродукция = ИнтеграцияИСРТ.ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса("Номенклатура");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОпределениеПризнакаМаркируемаяПродукция", ОпределениеМаркируемаяПродукция);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Использование = Ложь;
		Если Выборка.Следующий() Тогда
			Использование = Выборка.ПризнакИспользованияСерий;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// В процедуре требуется определить признак использования упаковок для номенклатуры.
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//   Использование - Булево - Признак использования упаковок (для номенклатуры или общий)
//   Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеУпаковок(Использование, Номенклатура) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		Использование = Ложь;
	ИначеЕсли Номенклатура = Неопределено Тогда
		Использование = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Использование = Ложь;
	Иначе
		Использование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ИспользоватьУпаковки");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СерииНоменклатуры

// Заполняет параметры указания серий для товаров, указанных в объекте.
//
// Параметры:
//  Параметры  - Структура        - выходной, параметры указания серий, состав полей определен в функции
//                                  НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//  ТипОбъекта - ОбъектМетаданных - Тип объекта коллекции объектов метаданных.
//  Объект     - Структура        - Структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
Процедура ЗаполнитьПараметрыУказанияСерий(Параметры, ТипОбъекта, Объект) Экспорт
	
	
	Если ТипОбъекта = Метаданные.Документы.ТТНИсходящаяЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСРТ.ПараметрыУказанияСерийТТНИсходящаяЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСРТ.ПараметрыУказанияСерийТТНВходящаяЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ЧекЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСРТ.ПараметрыУказанияСерийЧекЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ЧекЕГАИСВозврат Тогда
		
		Параметры = ИнтеграцияЕГАИСРТ.ПараметрыУказанияСерийЧекЕГАИСВозврат(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.АктПостановкиНаБалансЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСРТ.ПараметрыУказанияСерийАктПостановкиНаБалансЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.АктСписанияЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСРТ.ПараметрыУказанияСерийАктСписанияЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПередачаВРегистр2ЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСРТ.ПараметрыУказанияСерийПередачаВРегистр2ЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВозвратИзРегистра2ЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСРТ.ПараметрыУказанияСерийВозвратИзРегистра2ЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Обработки.СопоставлениеКлассификаторовЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСРТ.ПараметрыУказанияСерийСопоставлениеКлассификаторовЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Справочники.ШтрихкодыУпаковокТоваров Тогда
		
		Параметры = ИнтеграцияЕГАИСРТ.ПараметрыУказанияСерийШтрихкодыУпаковокТоваров(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.РегистрыСведений.СоответствиеНоменклатурыЕГАИС Тогда
		
		Параметры = ИнтеграцияЕГАИСРТ.ПараметрыУказанияСерийСоответствиеНоменклатурыЕГАИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.РегистрыСведений.СоответствиеНоменклатурыВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСРТ.ПараметрыУказанияСерийСоответствиеНоменклатурыВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСРТ.ПараметрыУказанияСерийВходящаяТранспортнаяОперацияВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСРТ.ПараметрыУказанияСерийИнвентаризацияПродукцииВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПроизводственнаяОперацияВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСРТ.ПараметрыУказанияСерийПроизводственнаяОперацияВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ЗапросСкладскогоЖурналаВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСРТ.ПараметрыУказанияСерийЗапросСкладскогоЖурналаВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Обработки.ПроверкаИПодборПродукцииИСМП
		ИЛИ ТипОбъекта = Метаданные.Обработки.ПроверкаИПодборТабачнойПродукцииМОТП
		ИЛИ ТипОбъекта = Метаданные.Обработки.ВиртуальнаяАгрегацияУпаковокИСМП Тогда
		
		Параметры = ИнтеграцияИСМПРТ.ПараметрыУказанияСерийПроверкаИПодборПродукцииИСМП(Объект);
		
	КонецЕсли;

	
КонецПроцедуры

// см. ИнтеграцияИСПереопределяемый.ЗаполнитьИменаРеквизитовДляЗаполненияПараметровУказанияСерий
//
Процедура ЗаполнитьИменаРеквизитовДляЗаполненияПараметровУказанияСерий(ИменаРеквизитов, ТипОбъекта) Экспорт
	
	Если ТипОбъекта = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда
		ИменаРеквизитов = "Дата,ДокументОснование,ВидОперации,ТорговыйОбъект";
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС
		Или ТипОбъекта = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС
		Или ТипОбъекта = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС
		Или ТипОбъекта = Метаданные.Документы.ЗапросСкладскогоЖурналаВЕТИС Тогда
		ИменаРеквизитов = "Дата,ТорговыйОбъект,Ссылка";
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПроизводственнаяОперацияВЕТИС Тогда
		ИменаРеквизитов = "Дата,ДокументОснование,ТорговыйОбъект,Ссылка";
	ИначеЕсли ТипОбъекта = Метаданные.Документы.МаркировкаТоваровГИСМ Тогда
		ИменаРеквизитов = "Склад,ОперацияМаркировки,Дата";
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ПеремаркировкаТоваровГИСМ Тогда
		ИменаРеквизитов = "Склад,Дата";
	КонецЕсли;
	
КонецПроцедуры

// см. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерийФормыОбъекта.
// Возвращает параметры указания серий для товаров, указанных в объекте.
//
// Параметры:
//   Параметры       - Структура - выходной, особенности указания серий в объекте, состав полей определен в функции
//                                 НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//   Объект          - Объект, ДанныеФормыСтруктура - Объект, для формы которого нужно сформировать параметры
//                                 указания серий.
//   МенеджерОбъекта - Менеджер  - Менеджер объекта, для формы которого нужно сформировать параметры указания серий.
//
Процедура ЗаполнитьПараметрыУказанияСерийФормыОбъекта(Параметры, Объект, МенеджерОбъекта) Экспорт
	
	Параметры = ПараметрыУказанияСерий(Объект, МенеджерОбъекта);
	
КонецПроцедуры

Функция ПараметрыУказанияСерий(Объект, МенеджерОбъекта) Экспорт
	
	ИменаРеквизитов = МенеджерОбъекта.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий();
	ЗначенияРеквизитов = ЗначенияРеквизитовДляЗаполненияПараметровУказанияСерий(Объект, ИменаРеквизитов);
	Возврат МенеджерОбъекта.ПараметрыУказанияСерий(ЗначенияРеквизитов);
	
КонецФункции

Функция ЗначенияРеквизитовДляЗаполненияПараметровУказанияСерий(Объект, ИменаРеквизитов)
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект)) Тогда
		Структура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, ИменаРеквизитов);
	Иначе
		Структура = Новый Структура(ИменаРеквизитов);
		ЗаполнитьЗначенияСвойств(Структура, Объект);
	КонецЕсли;
	Если Структура.Свойство("Дата") И НЕ ЗначениеЗаполнено(Структура.Дата) Тогда
		Структура.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	Если Структура.Свойство("ДатаОтгрузки") И НЕ ЗначениеЗаполнено(Структура.ДатаОтгрузки) Тогда
		Структура.ДатаОтгрузки = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти

#Область ОрганизацииИКонтрагенты

// В процедуре нужно реализовать заполнение структуры данными из информационной базы.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - ссылка на собственную организацию или контрагента,
//  Сведения - Структура - структура с реквизитами организации, которые требуется заполнить,
//  ДатаСведений - Дата - дата, на которую требуется получить информацию.
//
Процедура ЗаполнитьСведенияОбОрганизации(Организация, Сведения, ДатаСведений = Неопределено) Экспорт
	
	Если ДатаСведений = Неопределено Тогда
		ДатаСведений = ТекущаяДатаСеанса();
	КонецЕсли;
	
	СведенияОбОрганизации = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(Организация, ДатаСведений);
	ЗаполнитьЗначенияСвойств(Сведения, СведенияОбОрганизации);
	
	Если СведенияОбОрганизации.Свойство("ПолноеНаименование") Тогда
		Сведения.Вставить("Наименование", СведенияОбОрганизации.ПолноеНаименование);
	Иначе
		Сведения.Вставить("Наименование", СведенияОбОрганизации.Представление);
	КонецЕсли;
	
	Если Сведения.Свойство("НалоговыйНомерВСтранеРегистрации")
		И ТипЗнч(Организация) = Тип("СправочникСсылка.Контрагенты") Тогда
		ДанныеКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "СтранаРегистрации, РегистрационныйНомер");
		Если Не ДанныеКонтрагента.СтранаРегистрации = ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
			Сведения.НалоговыйНомерВСтранеРегистрации = ДанныеКонтрагента.РегистрационныйНомер;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// В процедуре нужно реализовать заполнение структуры данными ИНН/КПП из информационной базы.
//
// Параметры:
//   Сведения    - Структура - структура с реквизитами организации/контрагента, которые требуется заполнить,
//   Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС, ОпределяемыйТип.КонтрагентГосИС - ссылка на 
//     собственную организацию или контрагента
//   ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - ссылка на торговый объект для определения КПП.
//
Процедура ЗаполнитьИННКПППоОрганизацииКонтрагенту(Сведения, Организация, ТорговыйОбъект = Неопределено) Экспорт
	
	ИННКПП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИНН, КПП");
	ЗаполнитьЗначенияСвойств(Сведения, ИННКПП);
	
КонецПроцедуры

// Заполняет представление руководителя организации.
//
// Параметры:
//  ПредставлениеРуководителя - (см. ИнтеграцияИС.ДанныеРуководителяОрганизации) - заполняемая структура представления
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - ссылка на собственную организацию или контрагента,
//  ДатаСведений - Дата - дата, на которую требуется получить информацию.
//
Процедура ОпределитьДанныеРуководителяОрганизации(ПредставлениеРуководителя, Организация, ДатаСведений) Экспорт
	
	ДанныеРуководителя = ФормированиеПечатныхФормСервер.ОтветственныеЛицаОрганизаций(Организация, ДатаСведений);
	ПредставлениеРуководителя.Руководитель = Строка(ДанныеРуководителя.РуководительФизическоеЛицо);
	ПредставлениеРуководителя.Должность = Строка(ДанныеРуководителя.РуководительДолжность);
	
КонецПроцедуры

// В процедуре нужно реализовать поиск организации предприятия по ИНН и/или КПП.
//
// Параметры:
//  ИНН - Строка - ИНН искомой организации,
//  КПП - Строка - КПП искомой организации.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ОрганизацияКонтрагентГосИС - найденная организация,
//  Неопределено - организация не найдена.
//
Процедура ЗаполнитьОрганизациюПоИННКПП(Организация, ИНН, КПП) Экспорт
	
	Организация = Неопределено;
	ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Организации", ИНН, КПП, Организация);
	
КонецПроцедуры

// В процедуре нужно реализовать поиск контрагента по ИНН и/или КПП.
//
// Параметры:
//  ИНН - Строка - ИНН искомого контрагента,
//  КПП - Строка - КПП искомого контрагента.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ОрганизацияКонтрагентГосИС, ОпределяемыйТип.КонтрагентГосИС - найденный контрагент,
//  Неопределено - контрагент не найден.
//
Процедура ЗаполнитьКонтрагентаПоИННКПП(Контрагент, ИНН, КПП) Экспорт
	
	Контрагент = Неопределено;
	Если ПустаяСтрока(ИНН) И ПустаяСтрока(КПП) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПоиска = ОбщегоНазначенияРТ.ИННКППУжеИспользуетсяВИнформационнойБазе(ИНН, КПП);
	Если ЗначениеЗаполнено(РезультатПоиска) Тогда
		Контрагент = РезультатПоиска.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// В процедуре необходимо сформировать соответствие по коллекции ИНН. Ключ - ИНН, значение - Контрагент.
//
// Параметры:
//  КоллекцияИНН - Массив - Список ИНН.
//  Соответствие - Соответствие - Соответсвие вида:
//   * ИНН
//   * Контрагент
Процедура ЗаполнитьСоответствиеИННКонтрагентам(КоллекцияИНН, Соответствие) Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Контрагенты) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.ИНН    КАК ИНН
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН В (&КоллекцияИНН)
	|");
	Запрос.УстановитьПараметр("КоллекцияИНН", КоллекцияИНН);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.ИНН, Выборка.Контрагент);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемоеОборудование

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой необходимо настроить подключаемое оборудование,
//  ПрефиксыЭлементовФормы - Строка - строка имен табличных частей, разделенных запятыми, в которых нужно настроить видимость команд.
//
Процедура НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы = "Товары") Экспорт
	
	ПодключаемоеОборудованиеРТ.НастроитьПодключаемоеОборудование(Форма);
	
	Если ЗначениеЗаполнено(ПрефиксыЭлементовФормы) Тогда
		МассивПрефиксыЭлементовФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрефиксыЭлементовФормы, ",");
	Иначе
		МассивПрефиксыЭлементовФормы = Новый Массив;
		МассивПрефиксыЭлементовФормы.Добавить(ПрефиксыЭлементовФормы);
	КонецЕсли;
	
	Если Форма.ИмяФормы <> "Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ПроверкаИПодбор"
		И Форма.ИмяФормы <> "Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ПроверкаИПодбор"
		И Форма.ИмяФормы <> "Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ПроверкаИПодбор"
		И Форма.ИмяФормы <> "ОбщаяФорма.ФормаУточненияДанныхИС" Тогда
			
		Для Каждого Префикс Из МассивПрефиксыЭлементовФормы Цикл
			ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				Префикс + "ВыгрузитьДанныеВТСД",
				"Видимость",
				Ложь);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПечатныхФорм

// Заполняет структуру параметров возможных получателей печатных форм при отправке по электронной почте.
//
// Параметры:
// 		ПараметрыОтправки - Структура - содержит параметры отправки сформированных печатных форм
// 		ДанныеОбъектовПечати - Массив,Соответствие - данные о печатаемых объектах
// 		КоллекцияПечатныхФорм - ТаблицаЗначений - содержит информацию о формируемых печатных формах.
//
Процедура ЗаполнитьПараметрыОтправки(ПараметрыОтправки, ДанныеОбъектовПечати, КоллекцияПечатныхФорм)  Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПраваДоступа

// Проверяет наличие права создания контрагента у текущего пользователя.
//
// Параметры:
//  ДоступРазрешен - Булево - Истина, если есть право создания контрагента, Ложь в обратном случае.
//
Процедура ПравоСозданияКонтрагента(ДоступРазрешен) Экспорт
	
	ДоступРазрешен = ПравоДоступа("Добавление", Метаданные.Справочники.Контрагенты);
	
КонецПроцедуры

#КонецОбласти

#Область ВызовыИзБСП

// См. ОбщийМодуль.ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту()
//
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	Если НастройкиФормы.ИмяФормы = "Обработка.ГенерацияШтрихкодовУпаковок.Форма.Форма" Тогда
		Обработки.ГенерацияШтрихкодовУпаковок.ПриОпределенииКомандПодключенныхКОбъекту(Команды);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МенюОтчеты

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов.
//
Процедура ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов.
//
Процедура ДобавитьКомандуДвиженияДокумента(КомандыОтчетов) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаИПодбор

Процедура ЗафиксироватьРезультатПроверкиИПодбора(ДеревоУпаковок, ПараметрыШтрихкодаДляОбработки, Форма = Неопределено) Экспорт
	
	Объект              = ПараметрыШтрихкодаДляОбработки.Объект;
	РезультатОбработки  = ПараметрыШтрихкодаДляОбработки.РезультатОбработки;
	ПараметрыЗаполнения = ПараметрыШтрихкодаДляОбработки.ПараметрыЗаполнения;
	НастройкиКэша       = ПараметрыШтрихкодаДляОбработки.НастройкиКэша;
	ВидПродукцииИС      = ПараметрыШтрихкодаДляОбработки.ВидПродукцииИС;
	
	// Очистим акцизные марки.
	ИнтеграцияИСРТ.УдалитьСтрокиАкцизныхМарокПоВидуПродукции(Объект[НастройкиКэша.Штрихкоды], ВидПродукцииИС, НастройкиКэша.ШтрихкодУпаковки);
	
	// Обнулим количество в товарах.
	КэшКоличества = Новый Соответствие;
	Если Форма = Неопределено Тогда
		СтрокиПоВидуПродукции = СтрокиТоваровПоВидуПродукции(Объект.Товары, ВидПродукцииИС, Истина);
	Иначе
		ОтборПоВидуПродукции  = Новый Структура;
		ОтборПоВидуПродукции.Вставить("ВидПродукцииИС", ВидПродукцииИС);
		ОтборПоВидуПродукции.Вставить("МаркируемаяПродукция", Истина);
		СтрокиПоВидуПродукции = Объект.Товары.НайтиСтроки(ОтборПоВидуПродукции);
	КонецЕсли;
	
	Для Каждого СтрокаПоВидуПродукции Из СтрокиПоВидуПродукции Цикл
		КэшКоличества.Вставить(СтрокаПоВидуПродукции, СтрокаПоВидуПродукции.Количество);
		СтрокаПоВидуПродукции.Количество = 0;
	КонецЦикла;
	
	Если НЕ Форма = Неопределено Тогда
		ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(Форма, НастройкиКэша);
	КонецЕсли;
	
	// Обработаем дерево упаковок.
	ШтрихкодированиеИСРТ.ОбработатьДанныеШтрихкодовДереваУпаковок(ДеревоУпаковок, ПараметрыШтрихкодаДляОбработки, Форма);
	
	// Удалим строки, не соответствующие строкам подбора.
	Для Каждого СтрокаПоВидуПродукции Из СтрокиПоВидуПродукции Цикл
		ИндексИзмененнойСтроки = РезультатОбработки.ИзмененныеСтроки.Найти(СтрокаПоВидуПродукции);
		Если ИндексИзмененнойСтроки = Неопределено Тогда
			Объект.Товары.Удалить(СтрокаПоВидуПродукции);
		ИначеЕсли СтрокаПоВидуПродукции.Количество = КэшКоличества.Получить(СтрокаПоВидуПродукции) Тогда
			// Если количество не изменилось, не будем вызывать обработку для строки.
			РезультатОбработки.ИзмененныеСтроки.Удалить(ИндексИзмененнойСтроки);
		КонецЕсли;
	КонецЦикла;
	
	// Обработаем строки.
	Если Форма = Неопределено Тогда
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
		ДействияДобавленныеСтроки = ИнтеграцияИСРТ.ДействияДляОбработкиСтроки(Объект, "Добавление");
		ДействияИзмененныеСтроки  = ИнтеграцияИСРТ.ДействияДляОбработкиСтроки(Объект, "Изменение");
		
		Для Каждого Строка Из РезультатОбработки.ДобавленныеСтроки Цикл
			ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(Строка, ДействияДобавленныеСтроки, КэшированныеЗначения);
		КонецЦикла;
		
		Для Каждого Строка Из РезультатОбработки.ИзмененныеСтроки Цикл
			ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(Строка, ДействияИзмененныеСтроки, КэшированныеЗначения);
		КонецЦикла;
		
		// Запишем документ.
		Если Не ПараметрыШтрихкодаДляОбработки.Свойство("НеПерезаписыватьДокумент") Тогда 
			Если Объект.Проведен Тогда
				Попытка
					Объект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					Объект.Записать(РежимЗаписиДокумента.Запись);
				КонецПопытки;
			Иначе
				Объект.Записать(РежимЗаписиДокумента.Запись)
			КонецЕсли;
		КонецЕсли;
	Иначе
		Форма.ОбработатьСтрокиТЧ(РезультатОбработки.ДобавленныеСтроки, РезультатОбработки.ИзмененныеСтроки);
		
		ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(Форма, НастройкиКэша);
		ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(Форма, НастройкиКэша);
		ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(Форма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Выделяет из переданного массива штрихкодов упаковок элементы, в составе которых (на любом уровне вложенности, 
//   в т.ч. частично) находится продукция требуемого вида
// 
// Параметры:
//   ШтрихкодыДляПроверки - Массив - проверяемые элементы типа СправочникСсылка.ШтрихкодыУпаковокТоваров.
//   ВидыПродукции - Массив, ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - Вид отбираемой продукции.
// Возвращаемое значение:
//   Массив - Массив - подходящие элементы типа СправочникСсылка.ШтрихкодыУпаковокТоваров.
Функция ШтрихкодыСодержащиеВидыПродукции(Знач ШтрихкодыДляПроверки, Знач ВидыПродукции = Неопределено) Экспорт
	
	Если НЕ ШтрихкодыДляПроверки.Количество() Тогда
		Возврат ШтрихкодыДляПроверки;
	КонецЕсли;
	
	ПроверятьВидыПродукции = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
	ПроверятьВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Алкогольная);
	
	Если ТипЗнч(ВидыПродукции) = Тип("Массив")
		ИЛИ ТипЗнч(ВидыПродукции) = Тип("ФиксированныйМассив") Тогда
		
		ПроверятьВидыПродукции = ОбщегоНазначения.СкопироватьРекурсивно(ВидыПродукции, Ложь);
		
	ИначеЕсли ТипЗнч(ВидыПродукции) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
		
		ПроверятьВидыПродукции = Новый Массив;
		ПроверятьВидыПродукции.Добавить(ВидыПродукции);
		
	КонецЕсли;
	
	РезультатПроверки = Новый Соответствие;
	Для Каждого ЭлементМассива Из ШтрихкодыДляПроверки Цикл
		РезультатПроверки.Вставить(ЭлементМассива, Ложь);
	КонецЦикла;
	
	ОсобенностиУчета = Новый Массив;
	Для Каждого ВидПродукции Из ПроверятьВидыПродукции Цикл
		ОсобенностиУчета.Добавить(ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОсобенностиУчета", ОсобенностиУчета);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Ссылка КАК Штрихкод,
	|	ШтрихкодыУпаковок.Номенклатура.ОсобенностьУчета В (&ОсобенностиУчета) КАК ПодходящаяПродукция
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ЕстьВложенныеШтрихкоды
	|		ПО ЕстьВложенныеШтрихкоды.Ссылка = ШтрихкодыУпаковок.Ссылка
	|	ГДЕ ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)
	|	И ЕстьВложенныеШтрихкоды.Ссылка ЕСТЬ NULL
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Ссылка КАК Родитель,
	|	ШтрихкодыУпаковок.Штрихкод
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковок
	|	ГДЕ ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)";
	
	
	КешВложенности = Новый Соответствие;
	
	ОбходТаблицы = Истина;
	
	Пока ОбходТаблицы Цикл
		
		Запрос.УстановитьПараметр("ШтрихкодУпаковки", ШтрихкодыДляПроверки);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		СоставУпаковки = МассивРезультатов[0].Выбрать();
		ВложенныеЗаписи = МассивРезультатов[1].Выбрать();
		НуженОбходДочерних = ВложенныеЗаписи.Количество();
	
		Пока СоставУпаковки.Следующий() Цикл
			ИсходныйШтрихкод = КешВложенности.Получить(СоставУпаковки.Штрихкод);
			Если ИсходныйШтрихкод = Неопределено Тогда
				ИсходныйШтрихкод = СоставУпаковки.Штрихкод;
			КонецЕсли;
			
			РезультатПроверки[ИсходныйШтрихкод] = РезультатПроверки[ИсходныйШтрихкод] ИЛИ СоставУпаковки.ПодходящаяПродукция;
		КонецЦикла;
		
		Если НуженОбходДочерних Тогда
			ШтрихкодыДляПроверки = Новый Массив;
			Пока ВложенныеЗаписи.Следующий() Цикл
				ИсходныйШтрихкод = КешВложенности.Получить(ВложенныеЗаписи.Родитель);
				Если ИсходныйШтрихкод = Неопределено Тогда
					ИсходныйШтрихкод = ВложенныеЗаписи.Родитель;
				КонецЕсли;
				КешВложенности.Вставить(ВложенныеЗаписи.Штрихкод, ИсходныйШтрихкод);
				ШтрихкодыДляПроверки.Добавить(ВложенныеЗаписи.Штрихкод);
			КонецЦикла;
		Иначе
			ОбходТаблицы = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	Результат = Новый Массив;
	Для Каждого КлючИЗначение Из РезультатПроверки Цикл
		Если КлючИЗначение.Значение Тогда
			Результат.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Процедура УдалитьСтрокиАкцизныхМарокПоВидуПродукции(АкцизныеМарки, ВидПродукции, ИмяКолонкиАкцизнаяМарка = "АкцизнаяМарка") Экспорт
	
	СписокАкцизныхМарокНаУдаление = ШтрихкодыСодержащиеВидыПродукции(АкцизныеМарки.Выгрузить().ВыгрузитьКолонку(ИмяКолонкиАкцизнаяМарка), ВидПродукции);
	
	Для Каждого АкцизнаяМарка Из СписокАкцизныхМарокНаУдаление Цикл
		
		УдаляемыеСтроки = АкцизныеМарки.НайтиСтроки(Новый Структура(ИмяКолонкиАкцизнаяМарка, АкцизнаяМарка));
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			АкцизныеМарки.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

//Функция возвращает акцизную марку по по переданному штрихкоду
//
// Параметры:
//  Штрихкод - Строка - знаение штрихкода по которому необходимо вернуть марку.
//
// Возвращаемое значение:
//  ШтрихкодУпаковки - СпрвочникСсылка.ШтрихкодыУпаковокТоваров.
Функция ПолучитьАкцизнуюМарку(Штрихкод) Экспорт
	
	ЗначенияШтрихкодов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Штрихкод);
	
	ТаблицаШтрихкодовУпаковок = ШтрихкодированиеИС.ШтрихкодыУпаковок(ЗначенияШтрихкодов);
	
	Если ТаблицаШтрихкодовУпаковок.Количество() <> 0 Тогда
		Возврат ТаблицаШтрихкодовУпаковок[0].Ссылка;
	Иначе
		Возврат Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Регистрирует документ поступления маркируемой продукции на обмен
// с приложением 1С:Кладовщик
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма проверки и подбора маркируемой продукции.
//
Процедура ОтправитьРаспоряжениеНаПриемкуКладовщику(Форма) Экспорт
	
	Если Форма.ИмяФормы = "Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ПроверкаИПодбор" Тогда
		ТекстОшибки = "";
		ПостфиксСохранения = Форма.ПостфиксСохранения;
		Если ПроверкаИПодборПродукцииЕГАИС.РезультатыПроверкиУспешноСохранены(Форма, ПостфиксСохранения, ТекстОшибки) Тогда
			Форма.Модифицированность = Ложь;
			ТТНВходящаяЕГАИС = Форма.ПроверяемыйДокумент;
			ЗарегистрироватьПоступлениеАлкогольнойПродукции(ТТНВходящаяЕГАИС);
		Иначе
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	Иначе
		Если Форма.ИмяФормы = "Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ПроверкаИПодбор" Тогда
			ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак");
		ИначеЕсли Форма.ИмяФормы = "Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ПроверкаИПодбор" Тогда
			ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь");
		Иначе
			Возврат;
		КонецЕсли;
		
		ТекстОшибки = "";
		Если ПроверкаИПодборПродукцииИСМП.РезультатыПроверкиУспешноСохранены(Форма, ВидПродукцииИС, ТекстОшибки) Тогда
			Форма.Модифицированность = Ложь;
			ПоступлениеТоваров = Форма.ПроверяемыйДокумент;
			ЗарегистрироватьПоступлениеМаркируемойПродукции(ПоступлениеТоваров);
		Иначе
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ТребуетсяУточнениеПоКодуGTIN(ДанныеЧастичногоВыбытия, ПараметрыСканирования) Экспорт
	
	ТребуетсяУточнениеПоКодуGTIN = Ложь;
	
	ТаблицаТовары = РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.НоваяТаблицаПоискаВскрытыхПотребительскихУпаковок();
	
	СтрокаТовары = ТаблицаТовары.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТовары, ДанныеЧастичногоВыбытия);
	
	ВскрытыеПотребительскиеУпаковкиПоТаблицеТоваров = РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.ВскрытыеПотребительскиеУпаковкиПоТаблицеТоваров(
		ТаблицаТовары,
		ПараметрыСканирования);
	
	Если Не ВскрытыеПотребительскиеУпаковкиПоТаблицеТоваров = Неопределено
		И ВскрытыеПотребительскиеУпаковкиПоТаблицеТоваров.Количество() >= 2 Тогда
		ДанныеЧастичногоВыбытия.GTIN = ВскрытыеПотребительскиеУпаковкиПоТаблицеТоваров[0].GTIN;
		ТребуетсяУточнениеПоКодуGTIN = Истина;
	КонецЕсли;
	
	Возврат ТребуетсяУточнениеПоКодуGTIN;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияОтдельныхФормИГосИС

Функция ПроверитьМодификацияФормыВыполнена(Форма)
	
	Если Форма.ПараметрыИнтеграцииГосИС.Получить("Инициализация")<> Неопределено Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ПараметрыИнтеграцииГосИС = Новый Соответствие(Форма.ПараметрыИнтеграцииГосИС);
	ПараметрыИнтеграцииГосИС.Вставить("Инициализация", Истина);
	Форма.ПараметрыИнтеграцииГосИС = Новый ФиксированноеСоответствие(ПараметрыИнтеграцииГосИС);
	Возврат Ложь;
	
КонецФункции

Процедура ИнициализироватьФормуРМК(Форма, ЕстьЕГАИС, ЕстьИСМП)
	
	Если ЕстьИСМП Тогда
		Форма.КонтролироватьСтатусыКодовМаркировкиВРознице = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.КонтролироватьСтатусыКодовМаркировкиВРознице();
		Форма.ИспользоватьАкцизныеМарки = Истина;
	КонецЕсли;
	
	Если ЕстьЕГАИС Тогда
		
		Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
			Если Форма.ИмяФормы = "Документ.ПеремещениеТоваров.Форма.ФормаДокумента" Тогда
				Форма.ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(
					Форма.Объект.Организация, 
					Форма.Объект.МагазинОтправитель);
			Иначе
				Если Не ЗначениеЗаполнено(Форма.ОрганизацияЕГАИС) Тогда 
					Форма.ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(
						Форма.Объект.Организация, 
						Форма.Объект.Магазин);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если Форма.ИмяФормы = "Документ.ПеремещениеТоваров.Форма.ФормаДокумента" Тогда
			Форма.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(
				Форма.Объект.Организация, Форма.Объект.МагазинОтправитель, ТекущаяДатаСеанса());
		Иначе
			Форма.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(
				Форма.Объект.Организация, Форма.Объект.Магазин, ТекущаяДатаСеанса());
		КонецЕсли;
		
		Если Форма.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС Тогда
			Форма.ИспользоватьАкцизныеМарки = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	НастройкиИсточникаКешаЧека = ПроверкаИПодборПродукцииИСМПРТ.НастройкиИсточникаКешаЧека();
	Если Форма.ИмяФормы = "Документ.ПеремещениеТоваров.Форма.ФормаДокумента" Тогда
		НастройкиИсточникаКешаЧека.ЧастичноеВыбытие = Ложь;
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(Форма, НастройкиИсточникаКешаЧека, Истина);
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(Форма, НастройкиИсточникаКешаЧека);
	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(Форма);
	
КонецПроцедуры

// Добавляет на форму РМК (чека ККМ, чека на возврат) реквизиты ГосИС
//
// Параметры:
//   Форма - УправляемаяФорма - ФормаДокументаРМК
//
Процедура МодифицироватьИнициализироватьФормуРМК(Форма) Экспорт
	
	Если ПроверитьМодификацияФормыВыполнена(Форма) Тогда
		ИнициализироватьФормуРМК(Форма,
			ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ИспользуетсяРегистрацияРозничныхПродажВЕГАИС"),
			ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КонтролироватьСтатусыКодовМаркировкиВРозницеИСМП"));
		Возврат;
	КонецЕсли;
	
	ЕстьЕГАИС = ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	ЕстьИСМП  = ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции();
	
#Область Реквизиты
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Реквизит = Новый РеквизитФормы("АдресСоответствияАкцизныхМарок", Новый ОписаниеТипов("Строка"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("КодМаркировкиДляУточнения", Новый ОписаниеТипов);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ИспользоватьАкцизныеМарки", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ТребуетсяПересчетМарокПослеУдаленияСтрок", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ДанныеВыбораПоМаркируемойПродукции", Новый ОписаниеТипов);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("СохраненВыборПоМаркируемойПродукции", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	Если Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента" 
		Или Форма.ИмяФормы = "Документ.ПеремещениеТоваров.Форма.ФормаДокумента" Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
		ДопустимыеТипы = Новый ОписаниеТипов(МассивТипов);
		Реквизит = Новый РеквизитФормы("ОрганизацияЕГАИС", ДопустимыеТипы);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
	КонецЕсли;
	
	Если ЕстьЕГАИС Или ЕстьИСМП Тогда
		ПараметрыИнтеграцииГосИС = Новый Соответствие(Форма.ПараметрыИнтеграцииГосИС);
		Если Форма.ИмяФормы = "Документ.ПеремещениеТоваров.Форма.ФормаДокумента" Тогда
			ПараметрыИнтеграцииГосИС.Вставить("ДоступныОбъемноСортовыеКоды", Истина);
		КонецЕсли;
		ПроверкаИПодборПродукцииИС.ДобавитьТаблицуШтрихкодовУпаковок(Форма, ПараметрыИнтеграцииГосИС, ДобавляемыеРеквизиты);
		ПроверкаИПодборПродукцииИС.ДополнитьТаблицуТоваров(Форма, ПараметрыИнтеграцииГосИС, "Объект.Товары", ДобавляемыеРеквизиты);
		
		Если ЕстьИСМП Тогда
			Для Каждого ВидПродукцииИС Из ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции() Цикл
				ПараметрыИнтеграцииГосИС.Вставить(
					ВидПродукцииИС,
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПроверкаИПодборПродукцииИСМП.ПараметрыИнтеграцииФормыПроверкиИПодбора(
						Форма, ВидПродукцииИС)));
			КонецЦикла;
		КонецЕсли;
		
		Форма.ПараметрыИнтеграцииГосИС = Новый ФиксированноеСоответствие(ПараметрыИнтеграцииГосИС);
	КонецЕсли;
	
	Если ЕстьЕГАИС Тогда
		
		Реквизит = Новый РеквизитФормы("ИспользуетсяРегистрацияРозничныхПродажВЕГАИС", Новый ОписаниеТипов("Булево"));
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Колонка = Новый РеквизитФормы("СопоставлениеАлкогольнаяПродукция", Новый ОписаниеТипов("Строка"), "Объект.Товары");
		ДобавляемыеРеквизиты.Добавить(Колонка);
		
	КонецЕсли;
	
	Если ЕстьИСМП Тогда
		Реквизит = Новый РеквизитФормы("КонтролироватьСтатусыКодовМаркировкиВРознице", Новый ОписаниеТипов("Булево"));
		ДобавляемыеРеквизиты.Добавить(Реквизит);
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
#КонецОбласти
	
	ЭлементыФормы = Форма.Элементы;
	
#Область Команды

	Если Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ПеремещениеТоваров.Форма.ФормаДокумента" Тогда
		ИмяКомандыАкцизныеМарки = "ПроверитьАкцизныеМарки";
		КомандаФормы = Форма.Команды.Добавить(ИмяКомандыАкцизныеМарки);
		КомандаФормы.Действие  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
		КомандаФормы.Заголовок = НСтр("ru = 'Марки'");
		КомандаФормы.ИзменяетСохраняемыеДанные = Истина;
		
		Кнопка = ЭлементыФормы.Добавить(ИмяКомандыАкцизныеМарки, Тип("КнопкаФормы"), ЭлементыФормы.ТоварыГруппаАкцизныеМарки);
		Кнопка.ИмяКоманды            = ИмяКомандыАкцизныеМарки;
		Кнопка.ТолькоВоВсехДействиях = Ложь;
		Кнопка.Ширина = 11;
		Кнопка.Высота = 1;
		Кнопка.ВысотаЗаголовка = 1;
	КонецЕсли;

#КонецОбласти
	
#Область Элементы

	Если Форма.Элементы.Найти("ТоварыСтатусПроверкиГосИС") = Неопределено Тогда 
		ПутьКРеквизиту = "Объект.Товары.СтатусПроверкиГосИС";
		КолонкаИнтерфейса = Форма.Элементы.Вставить(
			"ТоварыСтатусПроверкиГосИС",
			Тип("ПолеФормы"),
			ЭлементыФормы.Товары,
			ЭлементыФормы.ТоварыНоменклатура);
		КолонкаИнтерфейса.ПутьКДанным = ПутьКРеквизиту;
		КолонкаИнтерфейса.Вид = ВидПоляФормы.ПолеКартинки;
		КолонкаИнтерфейса.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		КолонкаИнтерфейса.КартинкаЗначений = БиблиотекаКартинок.МаркируемаяПродукцияТЧ;
		КолонкаИнтерфейса.КартинкаШапки    = БиблиотекаКартинок.МаркируемаяПродукцияШапка;
	КонецЕсли;
	
#КонецОбласти
	
#Область Инициализация

	ИнициализироватьФормуРМК(Форма, ЕстьЕГАИС, ЕстьИСМП);
	
#КонецОбласти
	
#Область Интерфейс
	
	ЭлементыФормы.ТоварыСтатусПроверкиГосИС.Видимость = Форма.ИспользоватьАкцизныеМарки;
	
#КонецОбласти

КонецПроцедуры

// Добавляет на форму прикладного документа реквизиты ГосИС
//
// Параметры:
//   Форма - УправляемаяФорма - ФормаДокумента
//
Процедура МодифицироватьИнициализироватьФормуПрикладногоДокумента(Форма) Экспорт
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КодМаркировкиДляУточнения") Тогда
		ДобавляемыеРеквизиты = Новый Массив;
		Реквизит = Новый РеквизитФормы("КодМаркировкиДляУточнения", Новый ОписаниеТипов);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Реквизит = Новый РеквизитФормы("ИспользоватьАкцизныеМарки", Новый ОписаниеТипов("Булево"));
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		ЕстьИСМП  = ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции();
		
		ИнициализироватьФормуПрикладногоДокумента(Форма, ЕстьИСМП);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьФормуПрикладногоДокумента(Форма, ЕстьИСМП)
	
	Форма.ИспользоватьАкцизныеМарки = ЕстьИСМП;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Обмен_Кладовщик

// Регистрирует документ поступления маркируемой алкогольной продукции на обмен
// с приложением 1С:Кладовщик
//
// Параметры:
//  ТТНВходящаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС - накладная поступления алкогольной продукции.
//
Процедура ЗарегистрироватьПоступлениеАлкогольнойПродукции(ТТНВходящаяЕГАИС)
	
	Отказ = Ложь;
	СообщениеОбОшибке = "";
	НачатьТранзакцию();
	Если Не ЗначениеЗаполнено(ТТНВходящаяЕГАИС.ДокументОснование) Тогда
		ПоступлениеТоваров = СоздатьПоступлениеТоваровПоТТН(ТТНВходящаяЕГАИС);
		Если ПоступлениеТоваров = Неопределено Тогда
			Отказ = Истина;
			СообщениеОбОшибке = НСтр("ru = 'Не удалось создать поступление по накладной для отправки в 1С:Кладовщик'");
		КонецЕсли;
	ИначеЕсли ТипЗнч(ТТНВходящаяЕГАИС.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		ПоступлениеТоваров = ТТНВходящаяЕГАИС.ДокументОснование;
	Иначе
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Не удалось подобрать поступление по накладной для отправки в 1С:Кладовщик'");
	КонецЕсли;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	РегистрацияПрошлаУспешно = Ложь;
	ЗарегистрироватьПоступлениеМаркируемойПродукции(ПоступлениеТоваров, РегистрацияПрошлаУспешно);
	
	Если РегистрацияПрошлаУспешно Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует документ поступления маркируемой продукции на обмен
// с приложением 1С:Кладовщик
//
// Параметры:
//  ПоступлениеТоваров - ДокументСсылка.ПоступлениеТоваров - документ поступления маркируемой продукции.
//  РегистрацияПрошлаУспешно - Булево - признак успешно выполненной регистрации.
//
Процедура ЗарегистрироватьПоступлениеМаркируемойПродукции(ПоступлениеТоваров, РегистрацияПрошлаУспешно = Ложь)
	
	Если ПоступлениеТоваров.Товары.Количество() = 0 Тогда
		СообщениеОбОшибке = НСтр("ru = 'Не удалось зарегистрировать поступление к отправке в 1С:Кладовщик.
			|Причина: табличная часть ""Товары""не заполнена.'");
		ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	МассивУзлов = Новый Массив;
	ИмяПланаОбмена = УправлениеМобильнымиПриложениямиКлиентСервер.ИмяПланаОбмена();
	МобильноеПриложение = Справочники.МобильныеПриложения.НайтиПоРеквизиту("ВариантНастройки", "Кладовщик");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МобильноеПриложение", МобильноеПриложение);
	Запрос.Текст = "ВЫБРАТЬ
	|	ОбменСМобильнымиПриложениями.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена." + ИмяПланаОбмена + " КАК ОбменСМобильнымиПриложениями
	|ГДЕ
	|	ОбменСМобильнымиПриложениями.МобильноеПриложение = &МобильноеПриложение
	|	И НЕ ОбменСМобильнымиПриложениями.ЭтотУзел
	|	И НЕ ОбменСМобильнымиПриложениями.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Склад = ПоступлениеТоваров.Склад;
	Магазин = ПоступлениеТоваров.Магазин;
	Организация = ПоступлениеТоваров.Организация;
	
	Пока Выборка.Следующий() Цикл
		ФильтрПройден = УправлениеМобильнымиПриложениямиРТ.ПроверитьФильтрПоСкладу(
			Выборка.Ссылка, Склад, Магазин, Организация);
		Если ФильтрПройден Тогда
			МассивУзлов.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивУзлов.Количество() > 0 Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, ПоступлениеТоваров);
		ТекстСообщения = НСтр("ru = 'Документ успешно зарегистрирован к отправке в 1С:Кладовщик'");
		РегистрацияПрошлаУспешно = Истина;
	Иначе
		ТекстСообщения = НСтр("ru = 'Документ не был зарегистрирован к отправке в 1С:Кладовщик.
		|Убедитесь, что существуют настройки обмена, удовлетворяющие параметрам текущего документа.'");
	КонецЕсли;
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

Функция СоздатьПоступлениеТоваровПоТТН(ТТНВходящаяЕГАИС)
	
	ПоступлениеТоваров = Документы.ПоступлениеТоваров.СоздатьДокумент();
	ПоступлениеТоваров.Дата = ТекущаяДатаСеанса();
	ПоступлениеТоваров.ТТНВходящаяЕГАИС = ТТНВходящаяЕГАИС;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.НомерТТН КАК НомерВходящегоДокумента,
	|	ТТНВходящаяЕГАИС.ДатаТТН КАК ДатаВходящегоДокумента,
	|	ТТНВходящаяЕГАИС.Ссылка КАК ТТНВходящаяЕГАИС,
	|	ТТНВходящаяЕГАИС.Грузополучатель.ТорговыйОбъект КАК Магазин,
	|	ТТНВходящаяЕГАИС.Грузополучатель.Контрагент КАК Организация,
	|	ВЫБОР
	|		КОГДА ТТНВходящаяЕГАИС.Поставщик = &ПустаяСсылкаПоставщика
	|			ТОГДА ТТНВходящаяЕГАИС.Грузоотправитель
	|		ИНАЧЕ ТТНВходящаяЕГАИС.Поставщик
	|	КОНЕЦ КАК Поставщик
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ГДЕ
	|	ТТНВходящаяЕГАИС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВЗапросе.НомерВходящегоДокумента,
	|	ТаблицаВЗапросе.ДатаВходящегоДокумента,
	|	ТаблицаВЗапросе.ТТНВходящаяЕГАИС,
	|	ТаблицаВЗапросе.Магазин,
	|	ТаблицаВЗапросе.Организация,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КлассификаторОрганизацийЕГАИС.Сопоставлено, ЛОЖЬ)
	|				И НЕ КлассификаторОрганизацийЕГАИС.СоответствуетОрганизации
	|			ТОГДА КлассификаторОрганизацийЕГАИС.Контрагент
	|		ИНАЧЕ &КонтрагентЗаказа
	|	КОНЕЦ КАК Контрагент
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО ТаблицаВЗапросе.Поставщик = КлассификаторОрганизацийЕГАИС.Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ТТНВходящаяЕГАИС);
	Запрос.УстановитьПараметр("ПустаяСсылкаПоставщика", Справочники.КлассификаторОрганизацийЕГАИС.ПустаяСсылка());
	Запрос.УстановитьПараметр("КонтрагентЗаказа", Справочники.Контрагенты.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ПоступлениеТоваров, Выборка);
	КонецЕсли;
	
	ПоступлениеТоваров.Ответственный = Пользователи.ТекущийПользователь();
	ПоступлениеТоваров.Склад = ПоступлениеТоваров.Магазин.СкладПоступления;
	ПоступлениеТоваров.БанковскийСчетОрганизации =
		ЗначениеНастроекПовтИсп.БанковскийСчетОрганизацииПоУмолчанию(ПоступлениеТоваров.Организация,,);
	
	ГрузоотПравительКонтрагент = ТТНВходящаяЕГАИС.Грузоотправитель.Контрагент;
	Если ТипЗнч(ГрузоотПравительКонтрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		ПоступлениеТоваров.Контрагент = ГрузоотПравительКонтрагент;
	ИначеЕсли ТипЗнч(ГрузоотПравительКонтрагент) = Тип("СправочникСсылка.Организации") Тогда
		ПоступлениеТоваров.Контрагент =
			Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", ТТНВходящаяЕГАИС.Грузоотправитель.Контрагент.ИНН);
	КонецЕсли;
	ПоступлениеТоваров.БанковскийСчетКонтрагента =
		ЗначениеНастроекПовтИсп.БанковскийСчетКонтрагентаПоУмолчанию(ПоступлениеТоваров.Контрагент);
	
	УчитыватьНДС = Истина;
	ЦенаВключаетНДС = Истина;
	
	Товары = ПоступлениеТоваров.Товары;
	Серии = ПоступлениеТоваров.Серии;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТТНВходящаяЕГАИСТовары.Количество КАК Количество,
	|	ТТНВходящаяЕГАИСТовары.Количество КАК КоличествоУпаковок,
	|	ТТНВходящаяЕГАИСТовары.Сумма КАК Сумма,
	|	ТТНВходящаяЕГАИСТовары.Серия КАК Серия,
	|	ТТНВходящаяЕГАИСТовары.Цена КАК Цена,
	|	ТТНВходящаяЕГАИСТовары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ТТНВходящаяЕГАИСТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТТНВходящаяЕГАИСТовары.НомерСтроки КАК Порядок,
	|	ТТНВходящаяЕГАИСТовары.Номенклатура КАК Номенклатура,
	|	ТТНВходящаяЕГАИСТовары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаЕГАИС
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|ГДЕ
	|	ТТНВходящаяЕГАИСТовары.Ссылка = &Ссылка
	|	И НЕ ТТНВходящаяЕГАИСТовары.Количество = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Номенклатура,
	|	СоответствиеНоменклатурыЕГАИС.Характеристика КАК Характеристика,
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ЕСТЬNULL(СправочникНоменклатура.ОбъемДАЛ, 0) КАК ОбъемДАЛ
	|ПОМЕСТИТЬ ТаблицаСоответствиеЕГАИС
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СоответствиеНоменклатурыЕГАИС.Номенклатура = СправочникНоменклатура.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЕГАИС КАК ТаблицаЕГАИС
	|		ПО СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = ТаблицаЕГАИС.АлкогольнаяПродукция
	|ГДЕ
	|	СоответствиеНоменклатурыЕГАИС.Справка2 = ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура,
	|	СоответствиеНоменклатурыЕГАИС.Характеристика,
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция,
	|	ЕСТЬNULL(СправочникНоменклатура.ОбъемДАЛ, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаЕГАИС.АлкогольнаяПродукция) КАК АлкогольнаяПродукция,
	|	ТаблицаЕГАИС.Количество / ВЫБОР
	|		КОГДА НЕ ТаблицаСоответствиеЕГАИС.Номенклатура ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаЕГАИС.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная)
	|							И ТаблицаСоответствиеЕГАИС.ОбъемДАЛ <> 0
	|						ТОГДА ТаблицаСоответствиеЕГАИС.ОбъемДАЛ
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Количество,
	|	ТаблицаЕГАИС.КоличествоУпаковок / ВЫБОР
	|		КОГДА НЕ ТаблицаСоответствиеЕГАИС.Номенклатура ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаЕГАИС.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная)
	|							И ТаблицаСоответствиеЕГАИС.ОбъемДАЛ <> 0
	|						ТОГДА ТаблицаСоответствиеЕГАИС.ОбъемДАЛ
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	ТаблицаЕГАИС.Серия КАК Серия,
	|	ТаблицаЕГАИС.Сумма КАК Сумма,
	|	ТаблицаЕГАИС.Цена * ВЫБОР
	|		КОГДА НЕ ТаблицаСоответствиеЕГАИС.Номенклатура ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаЕГАИС.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная)
	|							И ТаблицаСоответствиеЕГАИС.ОбъемДАЛ <> 0
	|						ТОГДА ТаблицаСоответствиеЕГАИС.ОбъемДАЛ
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Цена,
	|	ТаблицаЕГАИС.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ТаблицаЕГАИС.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВЫБОР
	|		КОГДА ТаблицаЕГАИС.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ТаблицаЕГАИС.Номенклатура
	|		ИНАЧЕ ТаблицаСоответствиеЕГАИС.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаЕГАИС.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ТаблицаЕГАИС.Характеристика
	|		ИНАЧЕ ТаблицаСоответствиеЕГАИС.Характеристика
	|	КОНЕЦ КАК Характеристика,
	|	ТаблицаЕГАИС.Порядок КАК Порядок
	|ИЗ
	|	ТаблицаЕГАИС КАК ТаблицаЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСоответствиеЕГАИС КАК ТаблицаСоответствиеЕГАИС
	|		ПО ТаблицаЕГАИС.АлкогольнаяПродукция = ТаблицаСоответствиеЕГАИС.АлкогольнаяПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЕГАИС.Серия,
	|	ТаблицаЕГАИС.Сумма,
	|	ТаблицаЕГАИС.ИдентификаторУпаковки,
	|	ТаблицаЕГАИС.ИдентификаторСтроки,
	|	ВЫБОР
	|		КОГДА ТаблицаЕГАИС.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ТаблицаЕГАИС.Номенклатура
	|		ИНАЧЕ ТаблицаСоответствиеЕГАИС.Номенклатура
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЕГАИС.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ТаблицаЕГАИС.Характеристика
	|		ИНАЧЕ ТаблицаСоответствиеЕГАИС.Характеристика
	|	КОНЕЦ,
	|	ТаблицаЕГАИС.Порядок,
	|	ТаблицаЕГАИС.Количество / ВЫБОР
	|		КОГДА НЕ ТаблицаСоответствиеЕГАИС.Номенклатура ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаЕГАИС.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная)
	|							И ТаблицаСоответствиеЕГАИС.ОбъемДАЛ <> 0
	|						ТОГДА ТаблицаСоответствиеЕГАИС.ОбъемДАЛ
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ТаблицаЕГАИС.КоличествоУпаковок / ВЫБОР
	|		КОГДА НЕ ТаблицаСоответствиеЕГАИС.Номенклатура ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаЕГАИС.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная)
	|							И ТаблицаСоответствиеЕГАИС.ОбъемДАЛ <> 0
	|						ТОГДА ТаблицаСоответствиеЕГАИС.ОбъемДАЛ
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ТаблицаЕГАИС.Цена * ВЫБОР
	|		КОГДА НЕ ТаблицаСоответствиеЕГАИС.Номенклатура ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаЕГАИС.АлкогольнаяПродукция.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная)
	|							И ТаблицаСоответствиеЕГАИС.ОбъемДАЛ <> 0
	|						ТОГДА ТаблицаСоответствиеЕГАИС.ОбъемДАЛ
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаЕГАИС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаСоответствиеЕГАИС";
	
	Запрос.УстановитьПараметр("Ссылка", ТТНВходящаяЕГАИС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		Если ИспользоватьСерииНоменклатуры И ЗначениеЗаполнено(Выборка.Серия) Тогда
				НоваяСтрокаСерии = Серии.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, Выборка);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыУказанияСерий =
		Новый ФиксированнаяСтруктура(Документы.ПоступлениеТоваров.ПараметрыУказанияСерий(ПоступлениеТоваров));
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", 
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДСУчитыватьНДС(ПоступлениеТоваров));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВТЧ(ПоступлениеТоваров));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);

	Попытка
		ПоступлениеТоваров.Записать();
		Возврат ПоступлениеТоваров.Ссылка;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДобавленныхИзмененныхСтрок

Функция ДействияДляОбработкиСтроки(Объект, ПричинаИзменения) Экспорт
	
	Действия = Новый Структура;
	Действия.Вставить("ПересчитатьКоличествоУпаковок");
	Действия.Вставить("ПересчитатьСумму");
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ВозвратТоваровОтПокупателя") Тогда
		ДополнитьДействияДляОбработкиСтрокиВозвратТоваровОтПокупателя(Объект, ПричинаИзменения, Действия);
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
		ДополнитьДействияДляОбработкиСтрокиВозвратТоваровПоставщику(Объект, ПричинаИзменения, Действия);
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеТоваров") Тогда
		ДополнитьДействияДляОбработкиСтрокиПоступлениеТоваров(Объект, ПричинаИзменения, Действия);
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		ДополнитьДействияДляОбработкиСтрокиПеремещениеТоваров(Объект, ПричинаИзменения, Действия);
	КонецЕсли;
	
	Возврат Действия;
	
КонецФункции

Процедура ДополнитьДействияДляОбработкиСтрокиВозвратТоваровОтПокупателя(Объект, ПричинаИзменения, Действия)
	
	Действия.Вставить("ПересчитатьСуммуНДС", 
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	Если ПричинаИзменения = "Добавление" Тогда
		СтруктураМарки = Новый Структура;
		СтруктураМарки.Вставить("Дата", Объект.Дата);
		Действия.Вставить("ПроверитьНеобходимостьВводаАкцизнойМарки", СтруктураМарки);
		Действия.Вставить("ЗаполнитьЦенуПродажи", 
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
		Действия.Вставить("ЗаполнитьСтавкуНДССкладВШапке", 
			ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДССкладВШапке(Объект));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДействияДляОбработкиСтрокиВозвратТоваровПоставщику(Объект, ПричинаИзменения, Действия)
	
	Действия.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	Если ПричинаИзменения = "Добавление" Тогда
		Действия.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДСУчитыватьНДС(Объект));
		Действия.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДействияДляОбработкиСтрокиПоступлениеТоваров(Объект, ПричинаИзменения, Действия)
	
	Действия.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	Если ПричинаИзменения = "Добавление" Тогда
		Действия.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДСУчитыватьНДС(Объект));
		
		СтруктураПараметровДействия = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект);
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И Объект.Дата = НачалоДня(ТекущаяДатаСеанса()) Тогда
			СтруктураПараметровДействия.Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		Действия.Вставить("ЗаполнитьЦенуЗакупки", СтруктураПараметровДействия);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДействияДляОбработкиСтрокиПеремещениеТоваров(Объект, ПричинаИзменения, Действия)
	
	Если ПричинаИзменения = "Добавление" Тогда
		ДанныеДокумента = Новый Структура;
		ДанныеДокумента.Вставить("Дата", Объект.Дата);
		ДанныеДокумента.Вставить("Магазин", Объект.МагазинОтправитель);
		
		Действия.Вставить("ЗаполнитьЦенуПродажи", 
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(ДанныеДокумента));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти