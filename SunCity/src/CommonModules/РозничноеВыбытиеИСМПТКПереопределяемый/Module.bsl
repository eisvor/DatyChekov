
#Область РазборКодаМаркировки_РозничнаяТорговля

Функция ИнициализироватьРезультатОбработкиКодаМаркировки(ПараметрыСканирования = Неопределено, ДанныеШтрихкода = Неопределено) Экспорт
	
	ВидыПродукции = Неопределено;
	
	Если ПараметрыСканирования <> Неопределено Тогда
		ВидыПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции;
	КонецЕсли;
	
	Если ДанныеШтрихкода <> Неопределено И ВидыПродукции = Неопределено Тогда
		ВидыПродукции = Новый Массив(ДанныеШтрихкода.ВидыПродукцииИС);
	КонецЕсли;
	
	РезультатОбработкиШтрихкода = Новый Структура;
	
	// Для выбора значений на клиенте.
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяСопоставлениеНоменклатуры", Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяВыборНоменклатуры",         Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяОбработкаШтрихкода",        Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяУточнениеДанных",           Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОткрытьФормуВводаКодаМаркировки",    Ложь);
	РезультатОбработкиШтрихкода.Вставить("ДанныеШтрихкода",                    ДанныеШтрихкода);
	РезультатОбработкиШтрихкода.Вставить("АдресДанныхШтрихкода",               "");
	РезультатОбработкиШтрихкода.Вставить("ПараметрыВыбораНоменклатуры",        Новый Структура);
	РезультатОбработкиШтрихкода.Вставить("ИсходныеДанные",                     Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ШтрихкодыПродукцииДляСопоставления", Новый Массив);
	РезультатОбработкиШтрихкода.Вставить("ПараметрыУточненияДанных",           Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ИспользоватьОбработкуНаКлиенте",     Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОбработкаШтрихкодаБезМарки",         Ложь);
	
	// Для вывода сообщения об ошибке.
	РезультатОбработкиШтрихкода.Вставить("Штрихкод",     					   "");
	РезультатОбработкиШтрихкода.Вставить("ТипШтрихкода", 					   Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ТипУпаковки",  					   Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ТекстОшибки",  					   "");
	
	РезультатОбработкиШтрихкода.Вставить("ЕстьОшибки",                         Ложь);
	РезультатОбработкиШтрихкода.Вставить("ЕстьОшибкиВДеревеУпаковок",          Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОбщаяОшибка",                        Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОшибкаШтрихкодУжеДобавлен",          Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОшибкаДопустимостиВидовПродукции",   Ложь);
	
	РезультатОбработкиШтрихкода.Вставить("АдресДереваУпаковок",     		   "");
	РезультатОбработкиШтрихкода.Вставить("ДополнительныеПараметры",			   Неопределено);
	
	// Для обработки строк табличной части.
	РезультатОбработкиШтрихкода.Вставить("ДобавленныеСтроки", 				   Новый Массив);
	РезультатОбработкиШтрихкода.Вставить("ИзмененныеСтроки",  				   Новый Массив);
	
	РезультатОбработкиШтрихкода.Вставить("ВидыПродукции",    				   Новый Массив);
	
	Если ВидыПродукции = Неопределено Тогда
		Возврат РезультатОбработкиШтрихкода;
	КонецЕсли;
	
	Если ДанныеШтрихкода <> Неопределено Тогда
		РезультатОбработкиШтрихкода.ТипУпаковки = ДанныеШтрихкода.ВидУпаковки;
	КонецЕсли;
	
	РезультатОбработкиШтрихкода.ВидыПродукции = ВидыПродукции;

	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

Функция ПоляДляПоискаМаркируемойПродукции(ИспользоватьСерии=Истина, ИспользоватьУпаковки = Ложь) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Номенклатура",   ПустоеЗначениеОпределяемогоТипа("НоменклатураИСМПТК"));
	Результат.Вставить("Характеристика", ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатурыИСМПТК"));
	
	Если ИспользоватьУпаковки Тогда
		Результат.Вставить("Упаковка", 	 ПустоеЗначениеОпределяемогоТипа("Упаковка"));
	КонецЕсли;
	
	Если ИспользоватьСерии Тогда
		Результат.Вставить("Серия", 	 ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"));
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ОбработатьВводШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования = Неопределено) Экспорт
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.БазовыеПараметрыСканирования();
	КонецЕсли;
	
	ДанныеШтрихкода.КодМаркировки = РозничноеВыбытиеИСМПТК.НормализованныйШтрихкод(ДанныеШтрихкода.КодМаркировки);
	РезультатОбработки = ОбработатьДанныеПоШтрихкодам(Форма, ПараметрыСканирования, ДанныеШтрихкода);
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция ОбработатьДанныеПоШтрихкодам(Форма, ПараметрыСканирования, ДанныеШтрихкода)
	
	РезультатОбработки = Неопределено;
	РезультатОбработки = ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования);
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	МодульДляОбработки = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Форма.Объект.Ссылка);
	РезультатОбработки = МодульДляОбработки.ОбработатьДанныеМаркировкиИСМПТК(Форма, ДанныеШтрихкода, ПараметрыСканирования);
	
	Форма.Модифицированность = Истина;
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция ПолучитьНоменклатуруПоШтрихкодуВРозничномКонтуре(ШтрихКод, НужноВернутьМассив = Ложь) Экспорт
	
	УсловияОтбора = Новый Массив();
	УсловиеШтрихкод = Новый Структура();
	УсловиеШтрихкод.Вставить("ИмяПараметра",  "Штрихкод");
	УсловиеШтрихкод.Вставить("ВыборИзСписка", Ложь);
	УсловияОтбора.Добавить(УсловиеШтрихкод);
	ТекстЗапроса = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьТекстЗапросаДляРегистраШтрихкодов(, УсловияОтбора);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	Результат = Запрос.Выполнить();
	
	ДанныеНоменклатуры = Новый Структура();
	Если Не Результат.Пустой() Тогда 
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Если Выборка.Количество() = 1 Тогда
			
			УпаковкаНеШтучная = ОбщегоНазначенияИСМПТКПереопределяемый.УпаковкаНеШтучная(Выборка.Номенклатура, Выборка.ЕдиницаИзмерения);
			
			ДанныеНоменклатуры.Вставить("Номенклатура",  		   Выборка.Номенклатура);
			ДанныеНоменклатуры.Вставить("Характеристика", 		   Выборка.Характеристика);
			ДанныеНоменклатуры.Вставить("ИспользуютсяУпаковки",    ?(ЗначениеЗаполнено(Выборка.ЕдиницаИзмерения), Истина, Ложь));  
			ДанныеНоменклатуры.Вставить("УпаковкаНеШтучная",	   УпаковкаНеШтучная);
			ДанныеНоменклатуры.Вставить("Упаковка",                Выборка.ЕдиницаИзмерения);
			ДанныеНоменклатуры.Вставить("БазоваяЕдиницаИзмерения", Выборка.БазоваяЕдиницаИзмерения);

			Возврат ДанныеНоменклатуры;
		Иначе		
			//Для конфигураций типа "Розница", поддерживающих регистрацию неуникальных штрихкодов номенклатуры.
			//В этом случае уточнение данных номенклатуры производится позднее путем предоставления выбора пользователю.
			Возврат Новый Структура("Номенклатура, Характеристика, ИспользуютсяУпаковки, УпаковкаНеШтучная, Упаковка, БазоваяЕдиницаИзмерения",
								 	 Неопределено, Неопределено, Ложь, Ложь, Неопределено, Неопределено);
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьСоответствиеШКНоменклатуре(СтруктураПроверки) Экспорт
	
	Номенклатура   = СтруктураПроверки.Номенклатура;
	Характеристика = СтруктураПроверки.Характеристика;
	Упаковка = СтруктураПроверки.Упаковка;
	Штрихкод = СтруктураПроверки.Штрихкод;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	Штрихкоды.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод = &Штрихкод
	|	И Штрихкоды.Владелец = &Владелец
	|	И Штрихкоды.Характеристика = &Характеристика
	|	И Штрихкоды.Упаковка = &Упаковка";
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Упаковка", ?(ТипЗнч(Упаковка) = Тип("СправочникСсылка.УпаковкиНоменклатуры"), 
											Упаковка, 
											ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка")));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Количество() = 1;
		
КонецФункции

#КонецОбласти

#Область МодификацияФормыДокумента

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	Если Не ОбщегоНазначенияИСМПТККлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииИСМПТК") Тогда
		//Если реквизиты маркировки не найдены, создаем их на форме Чека
		МодификацияФормы(Форма);
		ПриСозданииНаСервереИСМПТК(Форма, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	
	Если ОбщегоНазначенияИСМПТККлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВестиУчетМаркируемогоТабакаИСМПТК") Тогда
		Форма.ВестиУчетМаркируемогоТабакаИСМПТК = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемогоТабакаИСМПТК");
	КонецЕсли;
	
	Если ОбщегоНазначенияИСМПТККлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВестиУчетМаркируемойОбувиИСМПТК") Тогда
		Форма.ВестиУчетМаркируемойОбувиИСМПТК = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойОбувиИСМПТК");
	КонецЕсли;
	
	Если ОбщегоНазначенияИСМПТККлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВестиУчетМаркируемыхЛекарствИСМПТК") Тогда
		Форма.ВестиУчетМаркируемыхЛекарствИСМПТК = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемыхЛекарствИСМПТК");
	КонецЕсли;
		
КонецПроцедуры

Процедура ПриСозданииНаСервереИСМПТК(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если ПроверитьДокументНаПоддержкуИСМП(Форма) Тогда
			
		МодифицироватьИнициализироватьФормуРМК(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Модифицирует прикладные формы: добавляет необходимые реквизиты, элементы, команды 
//   Требуется выполнить до прочей работы с ИС МПТ в прикладных формах.
//
// Параметры:
//   Форма - УправляемаяФорма - модифицируемая форма
//
Процедура МодификацияФормы(Форма)
	
	ЭтоДокументИСМП = ПроверитьДокументНаПоддержкуИСМП(Форма);
	Если Не ЭтоДокументИСМП Тогда
		Возврат;
	КонецЕсли;
		
	Если ОбщегоНазначенияИСМПТККлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииИСМПТК") Тогда
		Возврат;
	КонецЕсли;
	
	ДобавляемыеРеквизиты = Новый Массив;
	ПараметрыИнтеграцииИСМПТК = Новый Соответствие;
	
	Реквизит = Новый РеквизитФормы("ПараметрыИнтеграцииИСМПТК", Новый ОписаниеТипов);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	РозничноеВыбытиеИСМПТК.МодификацияРеквизитовФормы(Форма, ПараметрыИнтеграцииИСМПТК, ДобавляемыеРеквизиты);
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	Форма.ПараметрыИнтеграцииИСМПТК = Новый ФиксированноеСоответствие(ПараметрыИнтеграцииИСМПТК);
	
	РозничноеВыбытиеИСМПТК.МодификацияЭлементовФормы(Форма);
	
КонецПроцедуры

Процедура МодификацияЭлементовФормыИСМПТК(Форма) Экспорт
	
	ПараметрыИнтеграции = Форма.ПараметрыИнтеграцииИСМПТК.Получить("ИСМПТК");
	Если ПараметрыИнтеграции = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВидПродукции Из ПараметрыИнтеграции.ВидыПродукции Цикл
		
		Настройки = Форма.ПараметрыИнтеграцииИСМПТК.Получить(ВидПродукции);
		Если Настройки = Неопределено Тогда
			Продолжить;
		ИначеЕсли Не Настройки.РазмещатьЭлементыИнтерфейса Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьКолонкуСтатусаПроверкиПодбора(Форма, Настройки);
	КонецЦикла;
	
КонецПроцедуры

Процедура МодифицироватьИнициализироватьФормуРМК(Форма) Экспорт
	
	Если ПроверитьМодификацияФормыВыполнена(Форма) Тогда
		
		НаФормеЕстьФарма = ОбщегоНазначенияИСМПТККлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВестиУчетМаркируемойОбувиИСМПТК");
		НаФормеЕстьТабак = ОбщегоНазначенияИСМПТККлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВестиУчетМаркируемогоТабакаИСМПТК");
		НаФормеЕстьОбувь = ОбщегоНазначенияИСМПТККлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВестиУчетМаркируемыхЛекарствИСМПТК");
		
		Если НаФормеЕстьФарма Или НаФормеЕстьТабак Или НаФормеЕстьОбувь Тогда
			Форма.ИспользоватьАкцизныеМаркиИСМПТК = Истина;
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	ЕстьФарма = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемыхЛекарствИСМПТК");
	ЕстьТабак = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемогоТабакаИСМПТК");
	ЕстьОбувь = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойОбувиИСМПТК");
	
	ЕстьМаркировка = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМПТК");
	
#Область Реквизиты
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Реквизит = Новый РеквизитФормы("ИспользоватьАкцизныеМаркиИСМПТК", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	Если ЕстьМаркировка Тогда
		ПараметрыИнтеграцииИСМПТК = Новый Соответствие(Форма.ПараметрыИнтеграцииИСМПТК);
		ДополнитьТаблицуТоваров(Форма, ПараметрыИнтеграцииИСМПТК, "Объект.Товары", ДобавляемыеРеквизиты);
		
		Форма.ПараметрыИнтеграцииИСМПТК = Новый ФиксированноеСоответствие(ПараметрыИнтеграцииИСМПТК);
	КонецЕсли;
	
	Реквизит = Новый РеквизитФормы("ВестиУчетМаркируемойОбувиИСМПТК", 	 Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	Реквизит = Новый РеквизитФормы("ВестиУчетМаркируемогоТабакаИСМПТК",  Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	Реквизит = Новый РеквизитФормы("ВестиУчетМаркируемыхЛекарствИСМПТК", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
		
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
#КонецОбласти
	
	ЭлементыФормы = Форма.Элементы;
	
#Область Элементы

	ТоварыГруппаНоменклатура = ЭлементыФормы.Товары;
	
	Если Форма.Элементы.Найти("ТоварыСтатусПроверкиИСМПТК") = Неопределено Тогда 
		
		ПутьКРеквизиту = "Объект.Товары.СтатусПроверкиИСМПТК";
		КолонкаИнтерфейса = Форма.Элементы.Вставить("ТоварыСтатусПроверкиИСМПТК", Тип("ПолеФормы"), ТоварыГруппаНоменклатура, ЭлементыФормы.ТоварыНоменклатура);
		КолонкаИнтерфейса.ПутьКДанным 		 = ПутьКРеквизиту;
		КолонкаИнтерфейса.Вид 				 = ВидПоляФормы.ПолеКартинки;
		КолонкаИнтерфейса.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		КолонкаИнтерфейса.КартинкаЗначений 	 = БиблиотекаКартинок.МаркируемаяПродукцияТЧИСМПТК;
		КолонкаИнтерфейса.КартинкаШапки 	 = БиблиотекаКартинок.МаркируемаяПродукцияШапкаИСМПТК;
																														
	КонецЕсли;
	
	Если Форма.Элементы.Найти("ТоварыНеобходимостьВводаКодаМаркировкиИСМПТК") = Неопределено Тогда
		ПутьКРеквизиту 	  = "Объект.Товары.НеобходимостьВводаКодаМаркировкиИСМПТК";
		КолонкаИнтерфейса = Форма.Элементы.Вставить("ТоварыНеобходимостьВводаКодаМаркировкиИСМПТК", Тип("ПолеФормы"), ТоварыГруппаНоменклатура, ЭлементыФормы.ТоварыНоменклатура);
		КолонкаИнтерфейса.ПутьКДанным 		 = ПутьКРеквизиту;
		КолонкаИнтерфейса.Вид 				 = ВидПоляФормы.ПолеКартинки;
		КолонкаИнтерфейса.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;		
		КолонкаИнтерфейса.Видимость 		 = Ложь;
	КонецЕсли;	
	
	Если Форма.Элементы.Найти("ТоварыКоличествоКодовМаркировкиИСМПТК") = Неопределено Тогда
		ПутьКРеквизиту 	  = "Объект.Товары.КоличествоКодовМаркировкиИСМПТК";
		КолонкаИнтерфейса = Форма.Элементы.Вставить("ТоварыКоличествоКодовМаркировкиИСМПТК", Тип("ПолеФормы"), ТоварыГруппаНоменклатура, ЭлементыФормы.ТоварыСтатусПроверкиИСМПТК);
		КолонкаИнтерфейса.ПутьКДанным 		 = ПутьКРеквизиту;
		КолонкаИнтерфейса.Вид 				 = ВидПоляФормы.ПолеВвода;
		КолонкаИнтерфейса.ТолькоПросмотр	 = Истина;
		КолонкаИнтерфейса.КартинкаШапки 	 = БиблиотекаКартинок.КоличествоКМИСМПТК;
		КолонкаИнтерфейса.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		КолонкаИнтерфейса.АвтоМаксимальнаяШирина = Ложь;
		КолонкаИнтерфейса.Ширина 	= 5;
		КолонкаИнтерфейса.Подсказка = НСтр("ru = 'Количество связанных кодов маркировки'")
	КонецЕсли;
	
#КонецОбласти

#Область Команды

	Если Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента" Тогда
	
		Если Константы.ВестиУчетМаркируемойПродукцииИСМПТК.Получить() Тогда
			ИмяКомандыПроверкаКМ   = "ПроверитьКодыМаркировки";
			КомандаФормы 		   = Форма.Команды.Добавить(ИмяКомандыПроверкаКМ);
			КомандаФормы.Действие  = "Подключаемый_ВыполнитьПереопределяемуюКомандуИСМПТК";
			КомандаФормы.Заголовок = НСтр("ru = 'Коды маркировки'");
			КомандаФормы.ИзменяетСохраняемыеДанные = Истина;
			
			Кнопка = ЭлементыФормы.Добавить(ИмяКомандыПроверкаКМ, Тип("КнопкаФормы"), ЭлементыФормы.ТоварыГруппаАкцизныеМарки);
			Кнопка.ИмяКоманды      = ИмяКомандыПроверкаКМ;
			Кнопка.ТолькоВоВсехДействиях = Ложь;
			Кнопка.Ширина 		 = 11;
			Кнопка.Высота 		 = 1;
			Кнопка.ВысотаЗаголовка = 1;
			ЭлементыФормы.ПроверитьКодыМаркировки.Видимость = РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК();
						
		КонецЕсли;
	КонецЕсли;
	
#КонецОбласти

#Область Инициализация

	Если ЕстьОбувь Или ЕстьТабак Или ЕстьФарма Тогда
		Форма.ИспользоватьАкцизныеМаркиИСМПТК = Истина;
	КонецЕсли; 
		
#КонецОбласти
	
КонецПроцедуры

Функция ПараметрыИнтеграцииФормПроверкиИПодбораСтандартные() Экспорт
	
	ПараметрыИнтеграции = Новый Структура();
	
	#Область СвойстваФормыИОбъектаВстраивания
	
	ПараметрыИнтеграции.Вставить("ЭтоДокументПриобретения",             	   Ложь);
	ПараметрыИнтеграции.Вставить("ЕстьЭлектронныйДокумент",             	   Ложь);
	
	ПараметрыИнтеграции.Вставить("ИмяРеквизитаФормыОбъект",             	   "Объект");
	ПараметрыИнтеграции.Вставить("ИмяТабличнойЧастиТовары",            	       "Товары");
	ПараметрыИнтеграции.Вставить("ИмяТабличнойЧастиСерии",              	   "Серии");
	ПараметрыИнтеграции.Вставить("ИмяТабличнойЧастиШтрихкодыУпаковок",  	   "ШтрихкодыУпаковок");
	ПараметрыИнтеграции.Вставить("ИмяКолонкиШтрихкодУпаковки",          	   "ШтрихкодУпаковки");
	
	ПараметрыИнтеграции.Вставить("БлокируемыеЭлементы", 					   Новый Массив);
	
	ПараметрыИнтеграции.Вставить("РазмещатьЭлементыИнтерфейса", 	 	       Ложь);
	ПараметрыИнтеграции.Вставить("ИмяРеквизитаФормы",           			   "ТекстПроверкаПодбор");
	
	ПараметрыИнтеграции.Вставить("ИмяРодительскойГруппыФормы",   			   "СтраницаТовары");
	ПараметрыИнтеграции.Вставить("ИмяПоследующегоЭлементаФормы", 			   "Товары");
	ПараметрыИнтеграции.Вставить("ИмяЭлементаФормыТовары",       		       "Товары");
	ПараметрыИнтеграции.Вставить("ИмяСледующейКолонки",          			   "ТоварыНоменклатура");
	
	#КонецОбласти
	
	#Область НастройкиИнтеграцииФормыПроверки
	
	ПараметрыИнтеграции.Вставить("ИспользоватьСтатусПроверкаЗавершена",        Истина);
	ПараметрыИнтеграции.Вставить("ИспользоватьБезМаркируемойПродукции",        Ложь);
	ПараметрыИнтеграции.Вставить("БлокироватьТабличнуюЧастьТоварыПриПроверке", Истина);
	ПараметрыИнтеграции.Вставить("ИспользоватьСтатусПроверкиПодбораДокумента", Истина);
	ПараметрыИнтеграции.Вставить("ИспользоватьКолонкуСтатусаПроверкиПодбора",  Истина);
	
	#КонецОбласти
	
	#Область ОбщиеНастройкиСистемы
	
	ПараметрыИнтеграции.Вставить("ХарактеристикиИспользуются",  			   ХарактеристикиИспользуются());
	ПараметрыИнтеграции.Вставить("СерииИспользуются",        				   СерииИспользуются());
	ПараметрыИнтеграции.Вставить("ЕстьПравоИзменение",      				   Ложь);
	
	#КонецОбласти
			
	Возврат ПараметрыИнтеграции;
	
КонецФункции

Функция ПроверитьДокументНаПоддержкуИСМП(Форма) Экспорт
	
	ИмяФормы = Форма.ИмяФормы;
	
	Если ИмяФормы  = "Документ.ЧекККМ.Форма.ФормаДокумента"
		Или ИмяФормы = "Обработка.РМКУправляемыйРежим.Форма.Форма" Тогда
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции

Функция ПроверитьМодификацияФормыВыполнена(Форма)
	
	Если Форма.ПараметрыИнтеграцииИСМПТК.Получить("Инициализация")<> Неопределено Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ПараметрыИнтеграцииИСМПТК = Новый Соответствие(Форма.ПараметрыИнтеграцииИСМПТК);
	ПараметрыИнтеграцииИСМПТК.Вставить("Инициализация", Истина);
	Форма.ПараметрыИнтеграцииИСМПТК = Новый ФиксированноеСоответствие(ПараметрыИнтеграцииИСМПТК);
	
	Возврат Ложь;
	
КонецФункции

// Добавляет на форму колонку статуса проверки и подбора в табличной части
//
// Параметры:
//   Форма               - УправляемаяФорма                   - форма для встраивания
//   ПараметрыИнтеграции - Структура                          - параметры интеграции прикладной формы
//
Процедура ДобавитьКолонкуСтатусаПроверкиПодбора(Форма, ПараметрыИнтеграции) Экспорт
	
	Если ПараметрыИнтеграции.ИспользоватьКолонкуСтатусаПроверкиПодбора Тогда
		
		ПутьКРеквизиту = ПараметрыИнтеграции.ИмяРеквизитаФормыОбъект+"."+ПараметрыИнтеграции.ИмяТабличнойЧастиТовары;
		ПутьКРеквизиту = ПутьКРеквизиту + ".СтатусПроверкиИСМПТК";
		ИмяКолонкиРеквизита = СтрШаблон("%1СтатусПроверкиИСМПТК", ПараметрыИнтеграции.ИмяТабличнойЧастиТовары);
		
		Если Форма.Элементы.Найти(ИмяКолонкиРеквизита) = Неопределено Тогда
		
			КолонкаИнтерфейса = Форма.Элементы.Вставить(ИмяКолонкиРеквизита, Тип("ПолеФормы"), Форма.Элементы[ПараметрыИнтеграции.ИмяЭлементаФормыТовары], Форма.Элементы[ПараметрыИнтеграции.ИмяСледующейКолонки]);
			КолонкаИнтерфейса.ПутьКДанным 		 = ПутьКРеквизиту;
			КолонкаИнтерфейса.Вид 				 = ВидПоляФормы.ПолеКартинки;
			КолонкаИнтерфейса.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			КолонкаИнтерфейса.КартинкаЗначений	 = БиблиотекаКартинок.МаркируемаяПродукцияТЧИСМПТК;
			КолонкаИнтерфейса.КартинкаШапки 	 = БиблиотекаКартинок.МаркируемаяПродукцияШапкаИСМПТК;
		КонецЕсли;
		
		ПутьКРеквизиту = ПараметрыИнтеграции.ИмяРеквизитаФормыОбъект+"."+ПараметрыИнтеграции.ИмяТабличнойЧастиТовары;
		ПутьКРеквизиту = ПутьКРеквизиту + ".КоличествоКодовМаркировкиИСМПТК";
		ИмяКолонкиРеквизита = СтрШаблон("%1КоличествоКодовМаркировкиИСМПТК", ПараметрыИнтеграции.ИмяТабличнойЧастиТовары);
		
		Если Форма.Элементы.Найти(ИмяКолонкиРеквизита) = Неопределено Тогда
		
			КолонкаИнтерфейса = Форма.Элементы.Вставить(ИмяКолонкиРеквизита, Тип("ПолеФормы"), Форма.Элементы.Товары, Форма.Элементы[ПараметрыИнтеграции.ИмяЭлементаФормыТовары]);
			КолонкаИнтерфейса.ПутьКДанным 		 = ПутьКРеквизиту;
			КолонкаИнтерфейса.Вид 				 = ВидПоляФормы.ПолеВвода;
			КолонкаИнтерфейса.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			КолонкаИнтерфейса.ТолькоПросмотр	 = Истина;
			КолонкаИнтерфейса.КартинкаШапки 	 = БиблиотекаКартинок.КоличествоКМИСМПТК;
			КолонкаИнтерфейса.АвтоМаксимальнаяШирина = Ложь;
			КолонкаИнтерфейса.Ширина 	= 5;
			КолонкаИнтерфейса.Подсказка = НСтр("ru = 'Количество связанных кодов маркировки'")
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТаблицуТоваров(Форма, ПараметрыИнтеграции, ПутьКРеквизиту, ДобавляемыеРеквизиты) Экспорт
	
	Если ПараметрыИнтеграции.Получить("ИнтерфейсШтрихкодовУпаковокИСМПТК") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрыИнтеграции.Вставить("ИнтерфейсШтрихкодовУпаковокИСМПТК", Новый Структура("Заполнение", Ложь));
	
	Колонка = Новый РеквизитФормы("МаркируемаяПродукцияИСМПТК", 
								  Новый ОписаниеТипов("Булево"), 
								  ПутьКРеквизиту,
								  НСтр("ru = 'Маркируемая продукция'"));
	ДобавляемыеРеквизиты.Добавить(Колонка);
	
	Колонка = Новый РеквизитФормы("ВидПродукцииИСМПТК",
								  Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИСМПТК"),
								  ПутьКРеквизиту,
								  НСтр("ru = 'Вид продукции'"));
	ДобавляемыеРеквизиты.Добавить(Колонка);
	
	Колонка = Новый РеквизитФормы("СтатусПроверкиИСМПТК",
								  Новый ОписаниеТипов("Число"),
								  ПутьКРеквизиту,
								  НСтр("ru = 'Статус проверки подбора'"));
	ДобавляемыеРеквизиты.Добавить(Колонка);
	
	Колонка = Новый РеквизитФормы("НеобходимостьВводаКодаМаркировкиИСМПТК",
								  Новый ОписаниеТипов("Булево"),
								  ПутьКРеквизиту,
								  НСтр("ru = 'Необходимость ввода кода маркировки'"));
	ДобавляемыеРеквизиты.Добавить(Колонка);
	
	Колонка = Новый РеквизитФормы("КоличествоКодовМаркировкиИСМПТК",
								  Новый ОписаниеТипов("Число"),
								  ПутьКРеквизиту,
								  НСтр("ru = 'Количество КМ'"));
	ДобавляемыеРеквизиты.Добавить(Колонка);
	
КонецПроцедуры

// Настройка доступности элементов формы РМК.
//
// Параметры:
//  Элементы - ВсеЭлементыФормы.
//  СтруктураДанных - Структура со свойствами:
//     НаборПравИНастроек - Структура.
//     ЦенаВключаетНДС - Булево.
//     ТаблицаКассККМОрганизаций - ТаблицаЗначений.
//     ПодключаемоеОборудованиеЕстьТСД - Булево.
//     ПодключаемоеОборудованиеЕстьВесы - Булево.
//
Процедура УстановитьДоступностьЭлементовФормыРМК(Элементы, СтруктураДанных) Экспорт 
	
	НаборПравИНастроек               = СтруктураДанных.НаборПравИНастроек;
	ЦенаВключаетНДС                  = СтруктураДанных.ЦенаВключаетНДС;
	ТаблицаКассККМОрганизаций        = СтруктураДанных.ТаблицаКассККМОрганизаций;
	ПодключаемоеОборудованиеЕстьТСД  = СтруктураДанных.ПодключаемоеОборудованиеЕстьТСД;
	ПодключаемоеОборудованиеЕстьВесы = СтруктураДанных.ПодключаемоеОборудованиеЕстьВесы;
	
	ВключенУчетМаркировкиИСМПТ = Константы.ВестиУчетМаркируемойПродукцииИСМПТК.Получить();
	
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаПО32АкцизныеМарки", ВключенУчетМаркировкиИСМПТ, Элементы);
	
КонецПроцедуры

// Настройка доступности отдельных элементов формы РМК.
//
Процедура УстановитьДоступностьОтдельныхЭлементовФормы(БазовоеИмяЭлемента, Доступность, ЭлементыФормы) Экспорт 
	
	УстановитьДоступностьЭлементаФормы(БазовоеИмяЭлемента, Доступность, ЭлементыФормы);
	
	ТекущееИмяЭлемента = "Программно" + БазовоеИмяЭлемента;
	УстановитьДоступностьЭлементаФормы(ТекущееИмяЭлемента, Доступность, ЭлементыФормы);
	
	ТекущееИмяЭлемента = БазовоеИмяЭлемента + "Акселераторы";
	УстановитьДоступностьЭлементаФормы(ТекущееИмяЭлемента, Доступность, ЭлементыФормы);
	
	ТекущееИмяЭлемента = "Программно" + БазовоеИмяЭлемента + "Акселераторы";
	УстановитьДоступностьЭлементаФормы(ТекущееИмяЭлемента, Доступность, ЭлементыФормы);
	
	БазовоеИмяЭлемента = СтрЗаменить(БазовоеИмяЭлемента, "Команда", "Картинка");
	УстановитьДоступностьЭлементаФормы(БазовоеИмяЭлемента, Доступность, ЭлементыФормы);
	
	ТекущееИмяЭлемента = "Программно" + БазовоеИмяЭлемента;
	УстановитьДоступностьЭлементаФормы(ТекущееИмяЭлемента, Доступность, ЭлементыФормы);
	
	ТекущееИмяЭлемента = БазовоеИмяЭлемента + "Акселераторы";
	УстановитьДоступностьЭлементаФормы(ТекущееИмяЭлемента, Доступность, ЭлементыФормы);
	
	ТекущееИмяЭлемента = "Программно" + БазовоеИмяЭлемента + "Акселераторы";
	УстановитьДоступностьЭлементаФормы(ТекущееИмяЭлемента, Доступность, ЭлементыФормы);
	
КонецПроцедуры

#Область ПерезаполнитьПризнакиМаркировкиВФорме

Процедура ЗаполнитьДанныеМаркировки(Форма) Экспорт 
	
	Если ТипЗнч(Форма) = Тип("ДанныеФормыСтруктура") Тогда 
		Объект = Форма;
	Иначе 
		Объект = Форма.Объект;
	КонецЕсли;
	
	ТабличнаяЧастьТовары = Объект.Товары;
	
	Если ТабличнаяЧастьТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТабличнаяЧастьТовары Цикл 
		
		Если НЕ ОбщегоНазначенияИСМПТККлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "МаркируемаяПродукцияИСМПТК") Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьДанныеМаркировкиВСтроке(Форма, СтрокаТаблицы);
				
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеМаркировкиВСтроке(Форма, ТекущаяСтрока) Экспорт 
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		ТекущаяСтрока.МаркируемаяПродукцияИСМПТК = Ложь;
		ТекущаяСтрока.ВидПродукцииИСМПТК = Перечисления.ВидыПродукцииИСМПТК.ПустаяСсылка();
		ТекущаяСтрока.НеобходимостьВводаКодаМаркировкиИСМПТК = Ложь;
		Возврат;
	КонецЕсли;
	
	ДанныеПродукции = ДанныеМаркированнойПродукции(ТекущаяСтрока.Номенклатура);
	
	Если ОбщегоНазначенияИСМПТККлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ОсобенностиУчетаНоменклатуры") Тогда 
		ТекущаяСтрока.ОсобенностиУчетаНоменклатуры = ДанныеПродукции.ОсобенностиУчетаНоменклатуры;
	КонецЕсли;
	
	Если ОбщегоНазначенияИСМПТККлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "НеобходимостьВводаКодаМаркировкиИСМПТК") Тогда
		ТекущаяСтрока.НеобходимостьВводаКодаМаркировкиИСМПТК = Истина;
	КонецЕсли;
			
	Если Форма.ВестиУчетМаркируемогоТабакаИСМПТК И ДанныеПродукции.ЭтоТабачнаяПродукцияИСМПТК Тогда 
		
		ТекущаяСтрока.МаркируемаяПродукцияИСМПТК = Истина;
		ТекущаяСтрока.ВидПродукцииИСМПТК = Перечисления.ВидыПродукцииИСМПТК.Табачная;
		
	ИначеЕсли Форма.ВестиУчетМаркируемойОбувиИСМПТК и ДанныеПродукции.ЭтоОбувнаяПродукцияИСМПТК Тогда
		
		ТекущаяСтрока.МаркируемаяПродукцияИСМПТК = Истина;
		ТекущаяСтрока.ВидПродукцииИСМПТК = Перечисления.ВидыПродукцииИСМПТК.Обувная;
		
	ИначеЕсли Форма.ВестиУчетМаркируемыхЛекарствИСМПТК и ДанныеПродукции.ЭтоЛекарственныеПрепаратыИСМПТК Тогда
		
		ТекущаяСтрока.МаркируемаяПродукцияИСМПТК = Истина;
		ТекущаяСтрока.ВидПродукцииИСМПТК = Перечисления.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты;
	
	Иначе
		
		ТекущаяСтрока.НеобходимостьВводаКодаМаркировкиИСМПТК = Ложь;
		ТекущаяСтрока.МаркируемаяПродукцияИСМПТК = Ложь;
		ТекущаяСтрока.ВидПродукцииИСМПТК = Перечисления.ВидыПродукцииИСМПТК.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеМаркированнойПродукции(Номенклатура) Экспорт
	
	ИнормацияОНоменклатуре = Новый Структура;
	ИнормацияОНоменклатуре.Вставить("ЕдиницаИзмерения", 			   Неопределено);
		
	ИнормацияОНоменклатуре.Вставить("ОсобенностиУчетаНоменклатуры",    Неопределено);
	
	ИнормацияОНоменклатуре.Вставить("ЭтоТабачнаяПродукцияИСМПТК", 	   Ложь);
	ИнормацияОНоменклатуре.Вставить("ЭтоОбувнаяПродукцияИСМПТК",	   Ложь);
	ИнормацияОНоменклатуре.Вставить("ЭтоЛекарственныеПрепаратыИСМПТК", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ВидыНоменклатуры.ОсобенностьУчета, ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка)) КАК ОсобенностиУчетаНоменклатуры,
	|	ЕСТЬNULL(ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция), 	 ЛОЖЬ) КАК ЭтоТабачнаяПродукцияИСМПТК,
	|	ЕСТЬNULL(ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция), 		 ЛОЖЬ) КАК ЭтоОбувнаяПродукцияИСМПТК,
	|	ЕСТЬNULL(ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты), ЛОЖЬ) КАК ЭтоЛекарственныеПрепаратыИСМПТК
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО (ВидыНоменклатуры.Ссылка = Номенклатура.ВидНоменклатуры)
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ИнормацияОНоменклатуре, Выборка);
	КонецЕсли;
	
	Возврат ИнормацияОНоменклатуре;
	
КонецФункции

Функция НастройкиИсточникаКешаШтрихкодовУпаковок(ЭтоДокументИСМПТК = Ложь) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Объект",           "Объект");
	Результат.Вставить("ВсеМаркируемые",   ЭтоДокументИСМПТК);
	Результат.Вставить("Штрихкоды",        "ШтрихкодыУпаковок");
	Результат.Вставить("ШтрихкодУпаковки", "ШтрихкодУпаковки");
	Результат.Вставить("Товары", 		   "Товары");
	Результат.Вставить("Серии",  		   "");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
 
#Область СлужебныеПроцедурыИФункции

Функция ХарактеристикиИспользуются(Использование = Ложь, Номенклатура = Неопределено) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Использование = Ложь;
	ИначеЕсли Номенклатура = Неопределено Тогда
		Использование = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Использование = Ложь;
	Иначе
		Использование = Справочники.Номенклатура.ХарактеристикиИспользуются(Номенклатура);
	КонецЕсли;
	
	Возврат Использование;
	
КонецФункции

Функция СерииИспользуются(Использование = Ложь, Номенклатура = Неопределено) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Использование = Ложь;
	ИначеЕсли Номенклатура = Неопределено Тогда
		Использование = Ложь;
	ИначеЕсли НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Использование = Ложь;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Номенклатура.АлкогольнаяПродукция
		|			ТОГДА ЛОЖЬ
		|		КОГДА Номенклатура.ТабачнаяПродукция 
		|			ТОГДА ЛОЖЬ
		|		КОГДА Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
		|			ТОГДА Номенклатура.ВидНоменклатуры.ИспользоватьСерии
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПризнакИспользованияСерий
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &Номенклатура";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Использование = Ложь;
		Если Выборка.Следующий() Тогда
			Использование = Выборка.ПризнакИспользованияСерий;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Использование;
	
КонецФункции

Процедура УстановитьДоступностьЭлементаФормы(ИмяЭлемента, Доступность, Элементы)
	
	Если ОбщегоНазначенияИСМПТККлиентСервер.ПроверитьНаличиеЭлементаФормы(Элементы, ИмяЭлемента) Тогда
		Элемент = Элементы[ИмяЭлемента];
		Элемент.Доступность  = Доступность;
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			Для каждого ПодЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
				 УстановитьДоступностьЭлементаФормы(ПодЭлемент.Имя, Доступность, Элементы)
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Определение цвета служебной иконки маркировки в строках товаров чека.
//
Процедура ЗаполнитьПризнакКодаМаркировкиВТоварах(Форма) Экспорт
	
	Объект = Форма.Объект;	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РаботаВРМК = Форма.ИмяФормы = Метаданные.Обработки.РМКУправляемыйРежим.Формы.Форма.ПолноеИмя();
	
	СтруктураПоискаТовары = Новый Структура("Номенклатура, Характеристика, Упаковка");
	СтруктураПоискаМарки  = Новый Структура("КлючСвязи");
	
	//Считаем общее количество товарных единиц каждой продукции чека 
	ТаблицаТоваровДляПроверкиИконок = Объект.Товары.Выгрузить();
	Если РаботаВРМК Тогда
		ТаблицаТоваровДляПроверкиИконок.Свернуть("Номенклатура, Характеристика, Упаковка, КлючСвязи", "КоличествоУпаковок");
	Иначе
		ТаблицаТоваровДляПроверкиИконок.Свернуть("Номенклатура, Характеристика, Упаковка", "КоличествоУпаковок");
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
			
			//Если товар без особенностей учета по маркировке - ВидПродукции - пустая ссылка
			ВидПродукции = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(СтрокаТовары.Номенклатура);
			ОбычныйТовар = ВидПродукции.Пустая();
			
			//Проверка включения учета
			УчетВключен = РозничноеВыбытиеИСМПТКВызовСервера.ПроверитьВключениеУчетаТГ(ВидПродукции);
						
			ЗаполнитьЗначенияСвойств(СтруктураПоискаТовары, СтрокаТовары);
			ЗаполнитьЗначенияСвойств(СтруктураПоискаМарки,  СтрокаТовары); 
			
			КоличествоМарокПоТовару = Объект.КодыМаркировкиИСМПТК.НайтиСтроки(СтруктураПоискаМарки).Количество();
			КоличествоПоТоварам     = ТаблицаТоваровДляПроверкиИконок.НайтиСтроки(СтруктураПоискаТовары)[0].КоличествоУпаковок;
			
			//Отражаем в строке количество связанных с ней КМ
			СтрокаТовары.КоличествоКодовМаркировкиИСМПТК = КоличествоМарокПоТовару;
			
			//Отражаем признак указания маркировки:
			//Нет (0) - нет связанных КМ, товар без особенностей по маркировке
			//Зеленый (1) - есть связанные КМ, товар с особеннсотью учета по маркировке
			//Красный (2) - нет связанных КМ, товар с особенностью учета по маркировке
			//Серый (3) - зарезервировано, не используется
			//Желтый (4) - есть связанные КМ, товар без особенностей учета			
			
			//Товар без маркировки
			Если ОбычныйТовар И КоличествоМарокПоТовару = 0 Тогда
				СтрокаТовары.СтатусПроверкиИСМПТК = 0;
				
			//Корректные настройки 
			ИначеЕсли Не ОбычныйТовар И УчетВключен И Не КоличествоМарокПоТовару = 0 Тогда
				СтрокаТовары.СтатусПроверкиИСМПТК = 1;
			ИначеЕсли Не ОбычныйТовар И УчетВключен И КоличествоМарокПоТовару = 0 Тогда
				СтрокаТовары.СтатусПроверкиИСМПТК = 2;

			//Некорректные настройки
			ИначеЕсли ОбычныйТовар И Не КоличествоМарокПоТовару = 0 Тогда
				СтрокаТовары.СтатусПроверкиИСМПТК = 4;
			ИначеЕсли Не ОбычныйТовар И Не УчетВключен Тогда
				СтрокаТовары.СтатусПроверкиИСМПТК = 4;
				
			Иначе
				СтрокаТовары.СтатусПроверкиИСМПТК = 3;
			КонецЕсли;
						
		Иначе
			//Иконку марки в строке не отображаем.
			СтрокаТовары.СтатусПроверкиИСМПТК = 0; //марка не требуется
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПустоеЗначениеОпределяемогоТипа(ИмяТипа) Экспорт
	
	Возврат Метаданные.ОпределяемыеТипы[ИмяТипа].Тип.ПривестиЗначение();
	
КонецФункции

//Проверяет данные строки, указанной в форме уточнения кода маркировки при ввода штрихкода в чеке, 
//если для указания штрихкода выбрана команда ручного ввода. В данном случае выполняется проверка на 
//соответствие введенных данных формату стандартного ШК номенклатуры
Функция ПроверитьТипШтрихкодаВФормеВводаКМ(ШтрихкодBase64) Экспорт
	
	ТипШтрихкодаСоответствует = Истина;
	
	Штрихкод 	 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(ШтрихкодBase64);
	ТипШтрихкода = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ТипШтрихкода(Штрихкод);
	
	Если ТипШтрихкода    = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8 
		Или ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13 Тогда
		ТипШтрихкодаСоответствует = Ложь;
	КонецЕсли;
	
	Возврат ТипШтрихкодаСоответствует;
	
КонецФункции

Функция НастройкиИсточникаКешаЧека() Экспорт
	
	Результат = НастройкиИсточникаКешаШтрихкодовУпаковок();
	Результат.Штрихкоды = "КодыМаркировкиИСМПТК";
		
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьНеобходимостьВводаМаркируемойПродукцииИСМПТК(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
		
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПроверитьНеобходимостьВводаМаркируемойПродукцииИСМПТК", СтруктураПараметровДействия) Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда 
			
			Если НЕ ОбщегоНазначенияИСМПТККлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "МаркируемаяПродукцияИСМПТК") Тогда
				Возврат;
			КонецЕсли;
			
			Если ТипЗнч(СтруктураПараметровДействия) = Тип("Структура") 
				И СтруктураПараметровДействия.Свойство("БезМаркировки") Тогда 
				
				ТекущаяСтрока.МаркируемаяПродукцияИСМПТК = Ложь;
				ТекущаяСтрока.ВидПродукцииИСМПТК = Перечисления.ВидыПродукцииИСМПТК.ПустаяСсылка();
				Если ОбщегоНазначенияИСМПТККлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "НеобходимостьВводаАкцизнойМарки") Тогда
					ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки = Ложь;
				КонецЕсли;
				
			Иначе 
	
				ДанныеПродукции = ДанныеМаркированнойПродукции(ТекущаяСтрока.Номенклатура);
				
				Если ДанныеПродукции.ЭтоТабачнаяПродукцияИСМПТК Тогда
					
					ТекущаяСтрока.МаркируемаяПродукцияИСМПТК = Истина;
					ТекущаяСтрока.ВидПродукцииИСМПТК = Перечисления.ВидыПродукцииИСМПТК.Табачная;
					Если ОбщегоНазначенияИСМПТККлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "НеобходимостьВводаАкцизнойМарки") Тогда
						ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки = Истина;
					КонецЕсли;
					
				ИначеЕсли ДанныеПродукции.ЭтоОбувнаяПродукцияИСМПТК Тогда
					
					ТекущаяСтрока.МаркируемаяПродукцияИСМПТК = Истина;
					ТекущаяСтрока.ВидПродукцииИСМПТК = Перечисления.ВидыПродукцииИСМПТК.Обувная;
					Если ОбщегоНазначенияИСМПТККлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "НеобходимостьВводаАкцизнойМарки") Тогда
						ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки = Истина;
					КонецЕсли;
					
				ИначеЕсли ДанныеПродукции.ЭтоЛекарственныеПрепаратыИСМПТК Тогда
					
					ТекущаяСтрока.МаркируемаяПродукцияИСМПТК = Истина;
					ТекущаяСтрока.ВидПродукцииИСМПТК = Перечисления.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты;
					Если ОбщегоНазначенияИСМПТККлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "НеобходимостьВводаАкцизнойМарки") Тогда
						ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки = Истина;
					КонецЕсли;
					
				Иначе 
					ТекущаяСтрока.МаркируемаяПродукцияИСМПТК = Ложь;
					ТекущаяСтрока.ВидПродукцииИСМПТК = Перечисления.ВидыПродукцииИСМПТК.ПустаяСсылка();
					Если ОбщегоНазначенияИСМПТККлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "НеобходимостьВводаАкцизнойМарки") Тогда
						ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакИспользованияХарактеристикВРабочемМесте(ТаблицаФормы) Экспорт
		
	Если ТаблицаФормы.Количество() = 0
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновленнаяТаблицаФормы = ТаблицаФормы.Выгрузить();
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
	|				ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
	|				ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ТаблицаТоваров.Номенклатура";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТаблицаТоваров", ОбновленнаяТаблицаФормы);
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		
		Номенклатура = Выборка.Номенклатура;
		ХарактеристикиИспользуются = Выборка.ХарактеристикиИспользуются;
		
		СтрокиДляУстановкиПризнака = ОбновленнаяТаблицаФормы.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
		
		Для Каждого Строка Из СтрокиДляУстановкиПризнака Цикл
			Строка.ХарактеристикиИспользуются = ХарактеристикиИспользуются;
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаФормы.Загрузить(ОбновленнаяТаблицаФормы);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеХарактеристикНоменклатурыВРабочемМесте(Форма, ДанныеНоменклатура, ДанныеХарактеристика) Экспорт
		
	Элементы = Форма.Элементы;
	
	//НОМЕНКЛАТУРА//
	УстанавливатьДляНоменклатуры = ДанныеНоменклатура.Использовать;
	ИмяПоляНоменклатура	 		 = ДанныеНоменклатура.ИмяПоля;
	ПутьКПолюНоменклатура		 = ДанныеНоменклатура.ПутьКПолю;
	
	Если УстанавливатьДляНоменклатуры Тогда 
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяПоляНоменклатура].Имя);
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюНоменклатура);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(192,192,192));
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<штрихкод товара не зарегистрирован>'"));
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	КонецЕсли;

	Если Не ОбщегоНазначенияИСМПТКПереопределяемый.ПроверитьИспользованиеХарактеристик() Тогда
		Возврат;
	КонецЕсли;
	
	//ХАРАКТЕРИСТИКИ//
	УстанавливатьДляХарактеристики = ДанныеХарактеристика.Использовать;
	ИмяПоляХарактеристика   	   = ДанныеХарактеристика.ИмяПоля;
	ПутьКПолюХарактеристика		   = ДанныеХарактеристика.ПутьКПолю;
	
	Если УстанавливатьДляХарактеристики Тогда
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяПоляХарактеристика].Имя);
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюХарактеристика);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(192,192,192));
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСообщениеДляЖурналаРегистрации(Знач ИмяСобытия, Знач Уровень, Знач ОбъектМетаданных = Неопределено, Знач Данные = Неопределено, Знач Комментарий = "") Экспорт
		
	Если ПустаяСтрока(ИмяСобытия) Тогда
		ИмяСобытия = "Событие"; // не локализуется, чтобы не допускать остановки запуска в частично переведенной конфигурации
	КонецЕсли;

	ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень, ОбъектМетаданных, Данные, Комментарий, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	
КонецПроцедуры

Функция ПолучитьЗначениеБазовойЕИНоменклатуры(Номенклатура) Экспорт
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
	Иначе
		Возврат ПредопределенноеЗначение("Справочник.БазовыеЕдиницыИзмерения.ПустаяСсылка");
	КонецЕсли;
		
КонецФункции

Функция ПолучитьПустуюСсылкуУпаковкиНоменклатуры() Экспорт
	
	Возврат ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка");
		
КонецФункции

Функция ДополнитьПереопределяемыеДействияВСтруктуреЧека(СтруктураДействий) Экспорт
	
	Возврат СтруктураДействий;
	
КонецФункции

Функция ПолучитьОсобенностьУчетаНоменклатуры(Номенклатура) Экспорт
	
	Возврат Номенклатура.ОсобенностьУчета;
	
КонецФункции

#Область СерииНоменклатуры

Функция ПолучитьПараметрыУказанияСерийНаСервере(Объект) Экспорт
	
	Возврат Новый ФиксированнаяСтруктура(Документы.ЧекККМ.ПараметрыУказанияСерий(Объект));
		
КонецФункции

Функция ПроверитьИспользованиеСерийУНоменклатуры(Номенклатура) Экспорт
	
	Если Номенклатура = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбщегоНазначенияИСМПТКПереопределяемый.ПроверитьИспользованиеСерийУНоменклатуры(Номенклатура);
		
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПроверкаДоступностиВидовПродукции

Функция ДопустимаТабачнаяПродукция(Контекст) Экспорт
	
	Если ТипЗнч(Контекст) = Тип("ПеречислениеСсылка.ВидыПродукцииИСМПТК") Тогда
		Возврат Контекст  = Перечисления.ВидыПродукцииИСМПТК.Табачная;
	КонецЕсли;
	
	Возврат РозничноеВыбытиеИСМПТККлиентСервер.ДопустимВидПродукции(Контекст, Перечисления.ВидыПродукцииИСМПТК.Табачная);
	
КонецФункции

Функция ДопустимаОбувнаяПродукция(Контекст) Экспорт
	
	Если ТипЗнч(Контекст) = Тип("ПеречислениеСсылка.ВидыПродукцииИСМПТК") Тогда
		Возврат Контекст  = Перечисления.ВидыПродукцииИСМПТК.Обувная;
	КонецЕсли;
	
	Возврат РозничноеВыбытиеИСМПТККлиентСервер.ДопустимВидПродукции(Контекст, Перечисления.ВидыПродукцииИСМПТК.Обувная);
	
КонецФункции

Функция ДопустимаЛекарственнаяПродукция(Контекст) Экспорт
	
	Если ТипЗнч(Контекст) = Тип("ПеречислениеСсылка.ВидыПродукцииИСМПТК") Тогда
		Возврат Контекст  = Перечисления.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты;
	КонецЕсли;
	
	Возврат РозничноеВыбытиеИСМПТККлиентСервер.ДопустимВидПродукции(Контекст, Перечисления.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты);
	
КонецФункции

Функция ДопустимаМолочнаяПродукция(Контекст) Экспорт
	
	Если ТипЗнч(Контекст) = Тип("ПеречислениеСсылка.ВидыПродукцииИСМПТК") Тогда
		Возврат Контекст  = Перечисления.ВидыПродукцииИСМПТК.МолочнаяПродукция;
	КонецЕсли;
	
	Возврат РозничноеВыбытиеИСМПТККлиентСервер.ДопустимВидПродукции(Контекст, Перечисления.ВидыПродукцииИСМПТК.МолочнаяПродукция);
	
КонецФункции

#КонецОбласти

#Область КомандаКодыМаркировки

Процедура ЗакрытиеФормыПроверкиКМНаСервере(ТаблицаПроверенныхСтрокаАдреса, ЧекИзменен, ДанныеТаблиц, ДополнительныеПараметры = Неопределено) Экспорт

	ПустоеЗначениеУпаковки = ПолучитьПустуюСсылкуУпаковкиНоменклатуры();
	ТаблицаПроверенныхКМ   = ПолучитьИзВременногоХранилища(ТаблицаПроверенныхСтрокаАдреса); //Это таблица из формы Коды маркировки
	
	Если Не ДополнительныеПараметры = Неопределено Тогда
		ОбъединятьПозицииСОдинаковымТоваром	= ДополнительныеПараметры.ОбъединятьПозицииСОдинаковымТоваром;
		НеОбработанныеКодыКДобавлению 		= ДополнительныеПараметры.НеОбработанныеКодыКДобавлению;
	Иначе 
		ОбъединятьПозицииСОдинаковымТоваром = Истина;
		НеОбработанныеКодыКДобавлению		= Неопределено;
	КонецЕсли;
	
	ТаблицаТоваровЧека 	 = ДанныеТаблиц.ТаблицаТоваров; //Это таблица товаров документа
	ТаблицаКодовМаркЧека = ДанныеТаблиц.ТаблицаКодов;	//Это таблица кодов маркировки документа (до переноса измененйи из формы редактирования КМ)
		
	//Определяем товары, по которым содержатся коды маркировки в итоговой таблице.
	ТаблицаНоменклатуры = ТаблицаПроверенныхКМ.Скопировать();
	ТаблицаНоменклатуры.Свернуть("Номенклатура, Характеристика, ЕдиницаИзмерения");
	
	СкорректированныеМаркиКДобавлениюМассив = Новый Массив();
	
	//Есть особенность, связанная с реквизитом ЕдиницаИзмерения:
	//В таблице, передаваемой из формы редактирования КМ, для товаров без упаковок этот реквизит заполнен значением базовой ЕИ номенклатуры.
	//Реквизит ЕдиницаИзмерения сопоставляется с реквизитом Упаковка в таблице товаров Чека.
	//Однако в таблице чека аналогичный товар без упаковок в поле Упаковка имеет пустое значение. Это нужно учитывать и считать,
	//что позиция с ЕдиницаИзмерения = Базовая ЕИ номенклатуры из таблицы редактирования КМ это та же позиция в чеке, 
	//которая совпадает по Номенклатуре и Характеристике, но при этом имеет пустое значение в реквизите Упаковка.
		
	Для Каждого СтрокаТоварНом Из ТаблицаНоменклатуры Цикл //Начинаем обход по товарам из формы редактирования Кодов маркировки
		
		#Область ДанныеДляУсловийИПроверок
		//Отбираем из товаров чека строки с номенклатурой, совпадающей с обрабатываемой строкой таблицы
		СтруктураОтбораТовара = Новый Структура("Номенклатура, Характеристика", СтрокаТоварНом.Номенклатура, СтрокаТоварНом.Характеристика);
		//При этом учитываем, нужно ли добавлять в отбор значение единицы измерения
		
		БазоваяЕИНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТоварНом.Номенклатура, "ЕдиницаИзмерения");
		
		Если Не СтрокаТоварНом.ЕдиницаИзмерения = БазоваяЕИНоменклатуры Тогда //Т.е. в строке указана упаковка номенклатуры, значит ее нужно учесть в отборе
			СтруктураОтбораТовара.Вставить("Упаковка", СтрокаТоварНом.ЕдиницаИзмерения);
		Иначе
			СтруктураОтбораТовара.Вставить("Упаковка", ПустоеЗначениеУпаковки);
		КонецЕсли;
		ТоварыЧекаСОтбором = ТаблицаТоваровЧека.НайтиСтроки(СтруктураОтбораТовара); 
		
		//Аналогичным образом получаем все коды маркировки, относящиеся к этой номенклатуре и уже лежащие в таблице КМ Чека
		//При этом в ТЧ кодов маркировки Единица измерения заполняется всегда, в т.ч. и для базовых единиц измерения
		СтруктураОтбораЧек = Новый Структура("Номенклатура, Характеристика, ЕдиницаИзмерения", 
											 СтрокаТоварНом.Номенклатура, СтрокаТоварНом.Характеристика, СтрокаТоварНом.ЕдиницаИзмерения);
		МаркиЧекаСОтбором = ТаблицаКодовМаркЧека.НайтиСтроки(СтруктураОтбораЧек);
		
		//Сортируем коды из таблицы редактирования КМ, формируя списки к добавлению и удалению
		//Единицу измерения при этом учитываем, в т.ч. и для тех строк, у которых она равна базовой ЕИ номенклатуры
		СтруктураОтбораМаркиКорректировка = Новый Структура("Номенклатура, Характеристика, ЕдиницаИзмерения", 
															СтрокаТоварНом.Номенклатура, СтрокаТоварНом.Характеристика, СтрокаТоварНом.ЕдиницаИзмерения);
		СкорректированныеМарки = ТаблицаПроверенныхКМ.НайтиСтроки(СтруктураОтбораЧек);
		
		СтруктураОтбораУдаляемыеСтроки    = СтруктураОтбораМаркиКорректировка;
		СтруктураОтбораУдаляемыеСтроки.Вставить("СтатусКода", "2_удалить");
		СкорректированныеМаркиКУдалению   = ТаблицаПроверенныхКМ.НайтиСтроки(СтруктураОтбораУдаляемыеСтроки);
		
		СтруктураОтбораДобавляемыеСтроки  = СтруктураОтбораМаркиКорректировка;
		СтруктураОтбораДобавляемыеСтроки.Вставить("СтатусКода", "1_добавлен");
		СкорректированныеМаркиКДобавлению = ТаблицаПроверенныхКМ.НайтиСтроки(СтруктураОтбораДобавляемыеСтроки);
		
		//Считаем количество товаров для проверок
		КоличествоТоваровДо = 0; //Количество каждого товара в чеке (с учетом повторяющихся строк в ТЧ товары)
		Для Каждого СтрокаТоварЧека Из ТоварыЧекаСОтбором Цикл
			Если ЗначениеЗаполнено(СтрокаТоварЧека.Упаковка) Тогда
				КоличествоТоваровДо = КоличествоТоваровДо + СтрокаТоварЧека.КоличествоУпаковок;
			Иначе
				КоличествоТоваровДо = КоличествоТоваровДо + СтрокаТоварЧека.Количество;
			КонецЕсли;
		КонецЦикла;
		
		КоличествоМарокДо = МаркиЧекаСОтбором.Количество(); //Количество уже указанных в Чеке кодов маркировки по этому товару
		КоличествоМарокПослеВсего	  	= СкорректированныеМарки.Количество(); //Количество кодов по номенклатуре (без учета их статуса) в таблице редактирования КМ
		КоличествоМарокПослеУдаляемые 	= СкорректированныеМаркиКУдалению.Количество(); //Количество кодов по номенклатуре в таблице редактирования КМ со статусом К удалению
		КоличествоМарокПослеДобавляемые = СкорректированныеМаркиКДобавлению.Количество(); //Количество кодов по номенклатуре в таблице редактирования КМ со статусом К добавлению
		КоличествоМарокПослеИтоговое  	= КоличествоМарокПослеВсего - КоличествоМарокПослеУдаляемые; //Количество кодов, которое получится после "схлапывания" данных таблицы редактирования
		
		//Проверяем необходимость корректировок количества товаров после переноса данных о кодах:
		//редактируем его только в случае, когда итоговое количество КМ по товару превышает первоначальное количество этого товара в Чеке.
		НужноУдалитьМарки  = ?(КоличествоМарокПослеУдаляемые   = 0, Ложь, Истина);
		НужноДобавитьМарки = ?(КоличествоМарокПослеДобавляемые = 0, Ложь, Истина);
		Если КоличествоМарокПослеИтоговое > КоличествоТоваровДо Тогда
			НужноСкорректироватьКоличество = Истина;
		Иначе
			НужноСкорректироватьКоличество = Ложь;
		КонецЕсли;
		
		//Дополнительные параметры
		КлючСвязиДобавляемойСтроки = Неопределено;
		#КонецОбласти
		
		//Редактируем данные таблицы КодыМаркировкиИСМПТ
		#Область КодыМаркировкиИСМПТ_УдалениеСтрок
		Если НужноУдалитьМарки Тогда
			Для Каждого УдаляемаяСтрока Из СкорректированныеМаркиКУдалению Цикл
				
				НайденнаяСтрокаТаблицы = ТаблицаКодовМаркЧека.НайтиСтроки(Новый Структура("КодМаркировки", УдаляемаяСтрока.КодМаркировкиНормализованный));
				Если Не НайденнаяСтрокаТаблицы.Количество() = 0 Тогда
					ТаблицаКодовМаркЧека.Удалить(НайденнаяСтрокаТаблицы[0]);
				КонецЕсли;
				
				ЧекИзменен = Истина;
			КонецЦикла;
		КонецЕсли;
		#КонецОбласти
		
		#Область КодыМаркировкиИСМПТ_ДобавлениеСтрок
		Если НужноДобавитьМарки Тогда
			
			//Сначала выясняем, есть ли в таблице строки с пустыми кодами маркировки: это либо изначально добавленные без укзания КМ, 
			//либо строки, у которых выше был очищен связанный код маркировки.
			//Также находим строки, в которых кдличество связанных кодов маркировки меньше указанного общего количества товаров.
			//С этими строками связываем КМ в первую очередь.
			//Если после заполнения всех имеющихся строк товаров максимальным количеством КМ в таблике кодов к добавлению что-то еще остается, 
			//обрабатываем этот остаток отдельно, уже в форме Чека/РМК, т.к. такие КМ нужно добавлять совместно с добавлением новых строк товаров
			//либо увеличением количества.
			
			Для Каждого СтрокаТовар Из ТоварыЧекаСОтбором Цикл
				
				//Данные текущей строки товаров
				КлючСвязиТекСтр 		 = СтрокаТовар.КлючСвязи;
				КоличествоУпаковокТекСтр = СтрокаТовар.КоличествоУпаковок;
				КоличествоТекСтр 		 = СтрокаТовар.Количество;
				
				//Находим строки КМ из заполненных в чеке, которые относятся к товару
				СтруктураОтбораКМПоКлючуСвязи = Новый Структура("КлючСвязи", КлючСвязиТекСтр);
				НайденныеСтрокиКМПоКлючуСвязи = ТаблицаКодовМаркЧека.НайтиСтроки(СтруктураОтбораКМПоКлючуСвязи);
				
				Если СтруктураОтбораДобавляемыеСтроки.Свойство("СтатусКода") Тогда
					СтруктураОтбораКМПоКлючуСвязи.Удалить("СтатусКода");
				КонецЕсли;
				
				МаксимальноеКоличествоКМВСтроке = ?(ЗначениеЗаполнено(СтрокаТовар.Упаковка), КоличествоУпаковокТекСтр, КоличествоТекСтр);
				ТекущееКоличествоКМВСтроке 		= НайденныеСтрокиКМПоКлючуСвязи.Количество();
				
				Если МаксимальноеКоличествоКМВСтроке <= ТекущееКоличествоКМВСтроке Тогда
					//В этой строке изначально уже "нет места" для новой марки, продолжаем поиск строк товаров с пустыми ячейками связанных марок.
					//Проверка на "больше" для случаев, когда пользователь вручную уменьшил количество товаров в строке, но не уменьшил кол-во связанных с ней КМ.
					Продолжить;
				КонецЕсли;
				
				//Если место под новый КМ в строке товаров есть, начинаем заполнять ее кодами до момента полного заполнения ячеек
				КоличествоКМКДобавлению = СкорректированныеМаркиКДобавлению.Количество();
				Если КоличествоКМКДобавлению = 0 Тогда
					//Для этого товара нет КМ для добавления, переходим к следующему
					Продолжить;	
				КонецЕсли; 
				
				Для Счетчик = 0 По КоличествоКМКДобавлению - 1 Цикл
					Если ТекущееКоличествоКМВСтроке < МаксимальноеКоличествоКМВСтроке Тогда
						//В строке еще есть место для присоединения КМ
						
						//Получаем обрабатываемый код маркировки
						НомерЭлемента = СкорректированныеМаркиКДобавлению.Количество() - 1;
						ДобавляемыйКодМаркировки = СкорректированныеМаркиКДобавлению[НомерЭлемента];

				        НоваяСтрокаКМ = ТаблицаКодовМаркЧека.Добавить(); //В ТЧ КодыМаркировкиИСМПТК чека
						НоваяСтрокаКМ.КодМаркировки    = ДобавляемыйКодМаркировки.КодМаркировкиНормализованный;
						НоваяСтрокаКМ.КлючСвязи 	   = КлючСвязиТекСтр; //связываем с текущей строкой товаров, которую рассматриваем
						НоваяСтрокаКМ.Номенклатура     = СтрокаТовар.Номенклатура;
						НоваяСтрокаКМ.Характеристика   = СтрокаТовар.Характеристика;
						НоваяСтрокаКМ.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(СтрокаТовар.Упаковка), СтрокаТовар.Упаковка, БазоваяЕИНоменклатуры);
						
						//Увеличиваем счетчики проверки для следующего витка цикла
						ТекущееКоличествоКМВСтроке = ТекущееКоличествоКМВСтроке + 1;
												
						//Выствляем для чека флаг необходимости обновления
						ЧекИзменен = Истина;
				
						//Удаляем отработанный код из массива кодов к добавлению
						УдаляемыйИзМассиваКод = СкорректированныеМаркиКДобавлению.Найти(ДобавляемыйКодМаркировки);
						СкорректированныеМаркиКДобавлению.Удалить(УдаляемыйИзМассиваКод);

					Иначе
						//Еще остались коды к добавлению, но эта строка товаров полностью заполнена - переходим к следующей строке с этой же ном-рой
						Прервать;
					КонецЕсли;	
				КонецЦикла;		
			КонецЦикла;
			
			Если Не СкорректированныеМаркиКДобавлению.Количество() = 0 Тогда
				//Уже обошли все имеющиеся строки товаров с отбором по ном-ре, но еще остались коды маркировки к добавлению для этого товара.
				//Добавляем их к первой подходящей строке товаров, если вызов процедуры происходит из Чека ККМ или
				//если из РМК и при этом в настройках РМК включена опция объединения строк с одинаковыми позициями.
				Если ОбъединятьПозицииСОдинаковымТоваром Тогда	
					//Получаем данные для заполнения.
					КоличествоНадоУвеличить  = СкорректированныеМаркиКДобавлению.Количество();
					Номенклатура   		     = СкорректированныеМаркиКДобавлению[0].Номенклатура; 
					Характеристика  	     = СкорректированныеМаркиКДобавлению[0].Характеристика;
					ЕдиницаИзмерения 		 = ?(Не СкорректированныеМаркиКДобавлению[0].ЕдиницаИзмерения = БазоваяЕИНоменклатуры, СкорректированныеМаркиКДобавлению[0].ЕдиницаИзмерения, ПустоеЗначениеУпаковки);
					НайденнаяСтрокаТоваров   = ТаблицаТоваровЧека.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Упаковка", Номенклатура, Характеристика, ЕдиницаИзмерения));
					
					//Может быть ситуация, когда в форме Коды маркировки добавлен КМ товара, который есть в Чеке, но с другой единицей измерения.
					//Например, в чеке указан товар-фарма с ЕИ = штука (блистер), а в форме кодов маркировки отсканировали КМ и выбрали единицу измерения = упаковка (пачка).
					//В этом случае добавление КМ в форме будет разрешено, т.к. это не считается добавлением нового товара. Но при переносе данных в чек
					//нужно будет выполнять добавление новой строки товаров, а не корректировку существующей строки.
					Если НайденнаяСтрокаТоваров.Количество() = 0 Тогда
						Для Каждого СтрокаМарка Из СкорректированныеМаркиКДобавлению Цикл
							
							ДанныеКМ = Новый Структура();
							ДанныеКМ.Вставить("КодМаркировки", 	  СтрокаМарка.КодМаркировкиНормализованный);
							ДанныеКМ.Вставить("Номенклатура", 	  СтрокаМарка.Номенклатура);
							ДанныеКМ.Вставить("Характеристика",   СтрокаМарка.Характеристика);
							ДанныеКМ.Вставить("ЕдиницаИзмерения", СтрокаМарка.ЕдиницаИзмерения);
							
							СкорректированныеМаркиКДобавлениюМассив.Добавить(ДанныеКМ);
						КонецЦикла;
						ЧекИзменен = Истина;
					Иначе
						
						КлючСвязиСтроки = НайденнаяСтрокаТоваров[0].КлючСвязи;
						
						//Редактируем количество в строке товаров
						Если ЗначениеЗаполнено(НайденнаяСтрокаТоваров[0].Упаковка) Тогда
							КоэффициентПересчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НайденнаяСтрокаТоваров[0].Упаковка, "Коэффициент");
							КоличествоУпаковок	 = КоличествоНадоУвеличить + НайденнаяСтрокаТоваров[0].КоличествоУпаковок;
							Количество 			 = КоличествоУпаковок * КоэффициентПересчета;
						Иначе
							Количество 			 = КоличествоНадоУвеличить + НайденнаяСтрокаТоваров[0].Количество;
							КоличествоУпаковок	 = Количество;
						КонецЕсли;
						НайденнаяСтрокаТоваров[0].КоличествоУпаковок = КоличествоУпаковок;
						НайденнаяСтрокаТоваров[0].Количество 		 = Количество;
						
						ОбщееКоличествоОбходов = СкорректированныеМаркиКДобавлению.Количество() - 1;
						Если СкорректированныеМаркиКДобавлению.Количество() = 0 Тогда 
							Продолжить;
						КонецЕсли;
						
						Для Счетчик = 0 По ОбщееКоличествоОбходов Цикл
							НомерЭлемента = СкорректированныеМаркиКДобавлению.Количество() - 1;
							ДобавляемыйКодМаркировки = СкорректированныеМаркиКДобавлению[НомерЭлемента];
							
							//Добавляем код в таблицу
							НоваяСтрокаКМ = ТаблицаКодовМаркЧека.Добавить();
							НоваяСтрокаКМ.КодМаркировки  = ДобавляемыйКодМаркировки.КодМаркировкиНормализованный;
							НоваяСтрокаКМ.КлючСвязи 	 = КлючСвязиСтроки;
							НоваяСтрокаКМ.Номенклатура   = ДобавляемыйКодМаркировки.Номенклатура;
							НоваяСтрокаКМ.Характеристика = ДобавляемыйКодМаркировки.Характеристика;	
							Если Не ДобавляемыйКодМаркировки.ЕдиницаИзмерения = БазоваяЕИНоменклатуры Тогда
								НоваяСтрокаКМ.ЕдиницаИзмерения = ДобавляемыйКодМаркировки.ЕдиницаИзмерения;
							Иначе
								НоваяСтрокаКМ.ЕдиницаИзмерения = БазоваяЕИНоменклатуры;
							КонецЕсли;
							
							//Удаляем обработанный код из массива
							УдаляемыйИзМассиваКод = СкорректированныеМаркиКДобавлению.Найти(ДобавляемыйКодМаркировки);
							СкорректированныеМаркиКДобавлению.Удалить(УдаляемыйИзМассиваКод);
							ЧекИзменен = Истина; //Утанавливаем флаг изменения чека
						КонецЦикла;
						
					КонецЕсли;
				Иначе
					//Если вызов происходит из РМК и настройка объединения строк с одинаковыми позициями не выбрана, 
					//то к каждому оставшемуся КМ нужно дополнительно создать свою строку товаров. Для этого возвращаем оставшийся 
					//массив КМ к добавлению в форму объекта и вызываем стандартные процедуры добавления строки товаров 
					//и пересчет сумм документа.
					Для Каждого СтрокаМарка Из СкорректированныеМаркиКДобавлению Цикл
						
						ДанныеКМ = Новый Структура();
						ДанныеКМ.Вставить("КодМаркировки", 	  СтрокаМарка.КодМаркировкиНормализованный);
						ДанныеКМ.Вставить("Номенклатура", 	  СтрокаМарка.Номенклатура);
						ДанныеКМ.Вставить("Характеристика",   СтрокаМарка.Характеристика);
						ДанныеКМ.Вставить("ЕдиницаИзмерения", СтрокаМарка.ЕдиницаИзмерения);
						
						СкорректированныеМаркиКДобавлениюМассив.Добавить(ДанныеКМ);
					КонецЦикла;  
				КонецЕсли;
			КонецЕсли;		
		КонецЕсли;
		#КонецОбласти
	КонецЦикла;	
	
	//Загружаем измененные таблицы
	ДанныеТаблиц.ТаблицаТоваров = ТаблицаТоваровЧека;
	ДанныеТаблиц.ТаблицаКодов   = ТаблицаКодовМаркЧека;
	
	Если Не ДополнительныеПараметры = Неопределено 
		И Не СкорректированныеМаркиКДобавлениюМассив.Количество() = 0 Тогда
		ДополнительныеПараметры.НеОбработанныеКодыКДобавлению = СкорректированныеМаркиКДобавлениюМассив;
	КонецЕсли;
	
КонецПроцедуры

#Область КомандаПросмотраСпискаКМ_ФормаСпискаЧековККМ

Функция ПолучитьПереопределяемыеДанныеСпискаЧековККМ(ИсточникВызова = Неопределено) Экспорт
	
	ДанныеСпискаЧековККМ = Новый Структура();
	ДанныеСпискаЧековККМ.Вставить("НаименованиеСписка", "Список");
			
	Возврат ДанныеСпискаЧековККМ;
	
КонецФункции

Функция ПроверитьНевозможностьРедактированияСпискаКМВЧеке(СтатусТекущегоЧека) Экспорт
	
	Если СтатусТекущегоЧека  = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Аннулированный")
		Или СтатусТекущегоЧека = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Архивный")
		Или СтатусТекущегоЧека = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробитый") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции

Функция ТекстЗапросаЧекККМДанныеТекущегоЧекаИзСписка(СсылкаЧек) Экспорт
	
	Текст = "ВЫБРАТЬ
	|	ЧекККМКодыМаркировкиИСМПТК.КодМаркировки КАК КодМаркировки,
	|	ЧекККМКодыМаркировкиИСМПТК.КлючСвязи КАК КлючСвязи,
	|	ЧекККМКодыМаркировкиИСМПТК.Номенклатура КАК Номенклатура,
	|	ЧекККМКодыМаркировкиИСМПТК.Характеристика КАК Характеристика,
	|	ЧекККМКодыМаркировкиИСМПТК.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЧекККМКодыМаркировкиИСМПТК.Ссылка.Организация КАК Организация
	|ИЗ
	|	Документ.ЧекККМ.КодыМаркировкиИСМПТК КАК ЧекККМКодыМаркировкиИСМПТК
	|ГДЕ
	|	ЧекККМКодыМаркировкиИСМПТК.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМТовары.Номенклатура КАК Номенклатура,
	|	ЧекККМТовары.Характеристика КАК Характеристика,
	|	ЧекККМТовары.Упаковка КАК Упаковка,
	|	ЧекККМТовары.НомерСтроки КАК НомерСтроки,
	|	ЧекККМТовары.КлючСвязи КАК КлючСвязи
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|ГДЕ
	|	ЧекККМТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМТовары.Номенклатура,
	|	ЧекККМТовары.Характеристика,
	|	ЧекККМТовары.Упаковка,
	|	ЧекККМТовары.НомерСтроки,
	|	ЧекККМТовары.КлючСвязи";
		
  	Возврат Текст;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИБ

Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
		
КонецПроцедуры

//Для розничного контура
Процедура ДобавитьПользователямРольЧекиМаркировкаИСМПТ() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ВсеПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Для Каждого ПользовательИБ Из ВсеПользователиИБ Цикл
		Если Не ПользовательИБ.Роли.Содержит(Метаданные.Роли.ДобавлениеИзменениеЧековККМ) Тогда
			Продолжить;
		КонецЕсли;
		Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.ДобавлениеИзменениеРозничноеВыбытиеМаркированнойПродукцииИСМПТК) Тогда
			Продолжить;
		КонецЕсли;
		
		ПользовательИБ.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеРозничноеВыбытиеМаркированнойПродукцииИСМПТК);
		ПользовательИБ.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Переопределение_Розница

#Область ФормаВыборДанныхПоискаПоКМ

Функция ДанныеПоискаПоШтрихкодуСервер(Штрихкод) Экспорт
	
	СтруктураДействий 	= Новый Структура;
	ТипШтрихкодаРТ 		= РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПереопределяемый.ТипШтрихкода(Штрихкод);
	НеизвестныеДанныеПО = Истина;
	Запрос 				= Новый Запрос;
	ТекстЗапроса 		= "";
	НайденоОбъектов 	= 0;
	СтруктураПараметров = СтруктураДанныхПоиска();
	
	// Весовые товары и штучные на весах.
	Если ТипШтрихкодаРТ = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13 Тогда
		
		ПрефиксВнутреннегоШтрихкодаВесовогоТовара = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ПрефиксВнутреннегоШтрихкодаВесовогоТовара");
		ПрефиксВнутреннегоШтрихкодаШтучногоФасованногоТовара = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ПрефиксВнутреннегоШтрихкодаШтучногоФасованногоТовара");
		ДлинаКодаВесовогоТовара = СтрДлина(Формат(ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ВерхняяГраницаДиапазонаSKUВесовогоТовара"), "ЧГ = 0"));
		
		ПрефиксКода = Лев(Штрихкод, 2);
		ПрефиксВесовой = "2" + ПрефиксВнутреннегоШтрихкодаВесовогоТовара;
		ПрефиксШтучный = "2" + ПрефиксВнутреннегоШтрихкодаШтучногоФасованногоТовара;
		ЭтоВесовой = ПрефиксКода = ПрефиксВесовой;
		ЭтоШтучный = ПрефиксКода = ПрефиксШтучный;
		
		Если ДлинаКодаВесовогоТовара < 5 Тогда
			ДлинаКодаВесовогоТовара = 5;
		КонецЕсли;
		
		Если ЭтоВесовой ИЛИ ЭтоШтучный Тогда
			
			КодТовара        = Число(Сред(Штрихкод, 3,  ДлинаКодаВесовогоТовара));
			КоличествоТовара = Число(Сред(Штрихкод, 3 + ДлинаКодаВесовогоТовара, 10 - ДлинаКодаВесовогоТовара));
			Если ЭтоВесовой Тогда // В количестве указан вес.
				КоличествоТовара = КоличествоТовара / 1000;
			КонецЕсли;
			 
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	0 КАК НомерСтроки,
			|	КодыТоваровSKU.Номенклатура КАК Владелец,
			|	КодыТоваровSKU.Характеристика КАК Характеристика,
			|	КодыТоваровSKU.Упаковка КАК Упаковка,
			|	&ТипШтрихкода КАК ТипШтрихкода,
			|	&КоличествоТовара КАК Количество,
			|	&ПустойШтрихКодУпаковки КАК ШтрихкодУпаковкиЕГАИС,
			|	&ПустойТипУпаковки КАК ТипУпаковки
			|ИЗ
			|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
			|ГДЕ
			|	КодыТоваровSKU.SKU = &Код
			|
			|ОБЪЕДИНИТЬ ВСЕ 
			|
			|ВЫБРАТЬ
			|	0,
			|	Штрихкоды.Владелец КАК Владелец,
			|	Штрихкоды.Характеристика КАК Характеристика,
			|	Штрихкоды.Упаковка КАК Упаковка,
			|	Штрихкоды.ТипШтрихкода КАК ТипШтрихкода,
			|	1 КАК Количество,
			|	&ПустойШтрихКодУпаковки,
			|	&ПустойТипУпаковки
			|ИЗ
			|	РегистрСведений.Штрихкоды КАК Штрихкоды
			|ГДЕ
			|	Штрихкоды.Штрихкод = &Штрихкод
			|";
			
			Запрос.УстановитьПараметр("Код", 			  КодТовара);
			Запрос.УстановитьПараметр("КоличествоТовара", КоличествоТовара);
			
		КонецЕсли;
	КонецЕсли;
	
	ДанныеМаркировки = Неопределено;
	
	Если НайденоОбъектов = 0 Тогда
		
		ДанныеМаркировки = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьКодМаркировки(Штрихкод);
		Если ДанныеМаркировки.Разобран Тогда
			
			EAN = "";
			Если ЗначениеЗаполнено(ДанныеМаркировки.ГлобальныйИдентификаторТорговойЕдиницы)
				И Не ЗначениеЗаполнено(ДанныеМаркировки.EAN) Тогда
				EAN = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(ДанныеМаркировки.ГлобальныйИдентификаторТорговойЕдиницы);
			КонецЕсли;
			Если EAN = "" Тогда
				EAN = ДанныеМаркировки.EAN;
			КонецЕсли;
			
			ТекстЗапроса = "ВЫБРАТЬ
			|	0 КАК НомерСтроки,
			|	Штрихкоды.Владелец КАК Владелец,
			|	Штрихкоды.Характеристика КАК Характеристика,
			|	Штрихкоды.Упаковка КАК Упаковка,
			|	Штрихкоды.ТипШтрихкода КАК ТипШтрихкода,
			|	1 КАК Количество,
			|	&ПустойШтрихКодУпаковки КАК ШтрихкодУпаковкиЕГАИС,
			|	&ПустойТипУпаковки КАК ТипУпаковки
			|ИЗ
			|	РегистрСведений.Штрихкоды КАК Штрихкоды
			|ГДЕ
			|	Штрихкоды.Штрихкод = &EAN
			|";
			Запрос.УстановитьПараметр("EAN", EAN);
		Иначе
			Если ПустаяСтрока(ТекстЗапроса) Тогда
				ТекстЗапроса = "ВЫБРАТЬ
				|	0 КАК НомерСтроки,
				|	Штрихкоды.Владелец КАК Владелец,
				|	Штрихкоды.Характеристика КАК Характеристика,
				|	Штрихкоды.Упаковка КАК Упаковка,
				|	Штрихкоды.ТипШтрихкода КАК ТипШтрихкода,
				|	1 КАК Количество,
				|	&ПустойШтрихКодУпаковки КАК ШтрихкодУпаковкиЕГАИС,
				|	&ПустойТипУпаковки КАК ТипУпаковки
				|ИЗ
				|	РегистрСведений.Штрихкоды КАК Штрихкоды
				|ГДЕ
				|	Штрихкоды.Штрихкод = &Штрихкод
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	0,
				|	Штрихкоды.Номенклатура,
				|	Штрихкоды.Характеристика,
				|	ВЫБОР
				|		КОГДА Штрихкоды.Упаковка ССЫЛКА Справочник.УпаковкиНоменклатуры
				|			ТОГДА Штрихкоды.Упаковка
				|		ИНАЧЕ &ПустаяУпаковка
				|	КОНЕЦ,
				|	&ТипШтрихкода,
				|	ВЫБОР
				|		КОГДА Штрихкоды.Количество = 0
				|			ТОГДА 1
				|		ИНАЧЕ Штрихкоды.Количество
				|	КОНЕЦ,
				|	Штрихкоды.Ссылка,
				|	Штрихкоды.ТипУпаковки
				|ИЗ
				|	Справочник.ШтрихкодыУпаковокТоваров КАК Штрихкоды
				|ГДЕ
				|	Штрихкоды.ЗначениеШтрихкода = &Штрихкод";
			КонецЕсли;
		КонецЕсли;
		
		Если НайденоОбъектов = 0 Тогда
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("Штрихкод",				Штрихкод);
			Запрос.УстановитьПараметр("ТипШтрихкода", 			ТипШтрихкодаРТ);
			Запрос.УстановитьПараметр("ПустаяУпаковка", 		Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
			Запрос.УстановитьПараметр("ПустойШтрихКодУпаковки", Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка());
			Запрос.УстановитьПараметр("ПустойТипУпаковки", 		Перечисления.ТипыУпаковок.ПустаяСсылка());
			Запрос.УстановитьПараметр("ТипУпаковки", 			Перечисления.ТипыУпаковок.МаркированныйТовар);
			РезультатЗапроса = Запрос.Выполнить();
			Выборка 		 = РезультатЗапроса.Выбрать();
			НайденоОбъектов  = Выборка.Количество();
			ДополнитьСтруктуруРезультатамиПоиска(СтруктураПараметров, Выборка, Штрихкод, НеизвестныеДанныеПО, ДанныеМаркировки);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров.НеизвестныеДанныеПО = НеизвестныеДанныеПО;
	СтруктураПараметров.ДанныеПО 			= Штрихкод;
	СтруктураПараметров.ТипДанныхПО 		= "Штрихкод";
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция СтруктураДанныхПоиска() Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ЗначенияПоиска",		Новый Массив);
	СтруктураПараметров.Вставить("НеизвестныеДанныеПО", Истина);
	СтруктураПараметров.Вставить("ДанныеПО", 			"");
	СтруктураПараметров.Вставить("ТипДанныхПО", 		"Штрихкод");
	
	Возврат СтруктураПараметров;
	
КонецФункции

Процедура ДополнитьСтруктуруРезультатамиПоиска(СтруктураПараметров, Выборка, Штрихкод = "",НеизвестныеДанныеПО = Ложь, ДанныеМаркировки = Неопределено)
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Владелец) Тогда
			НеизвестныеДанныеПО = Ложь;
			СтруктураШтрихкода  = НачатьСтруктуруРезультатовПоиска(СтруктураПараметров, Выборка, Штрихкод);
			ТипВладельца	    = ТипЗнч(Выборка.Владелец);
			Если ТипВладельца = Тип("СправочникСсылка.Номенклатура") Тогда
				СтруктураШтрихкода.Вставить("Номенклатура",   Выборка.Владелец);
				СтруктураШтрихкода.Вставить("Характеристика", Выборка.Характеристика);
				СтруктураШтрихкода.Вставить("Упаковка",		  Выборка.Упаковка);
				СтруктураШтрихкода.Вставить("ТипШтрихкода",   Выборка.ТипШтрихкода);
				СтруктураШтрихкода.Вставить("ТипУпаковки", 	  Выборка.ТипУпаковки);
				Если ДанныеМаркировки <> Неопределено Тогда
					СтруктураШтрихкода.Вставить("ДанныеМаркировки", ДанныеМаркировки);
				КонецЕсли;
			КонецЕсли;
			СтруктураПараметров.ЗначенияПоиска.Добавить(СтруктураШтрихкода);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НачатьСтруктуруРезультатовПоиска(СтруктураПараметров, Выборка, Штрихкод)
	
	СтруктураШтрихкода = Новый Структура;
	Если ЗначениеЗаполнено(СтруктураПараметров.ДанныеПО) Тогда
		СтруктураШтрихкода.Вставить("ДанныеПО", СтруктураПараметров.ДанныеПО);
	ИначеЕсли ЗначениеЗаполнено(Штрихкод) Тогда
		СтруктураШтрихкода.Вставить("ДанныеПО", Штрихкод);
	КонецЕсли;
	СтруктураШтрихкода.Вставить("НомерСтрокиЗагрузки", Выборка.НомерСтроки);
	СтруктураШтрихкода.Вставить("Штрихкод", 		   Штрихкод);
		
	Возврат СтруктураШтрихкода;
	
КонецФункции

#КонецОбласти

#КонецОбласти
