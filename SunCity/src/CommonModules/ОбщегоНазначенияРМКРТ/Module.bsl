
///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПомощникНастройкиКассовогоМеста

// Переопределяет запрос динамического списка.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма выбора продавцов.
//	ИмяДинамическогоСписка - Строка - имя переопределяемого динамического списка.
//  Отказ - Булево.
//
Процедура ПереопределитьДинамическийСписокПомощникаНастройкиРМК(Форма, ИмяДинамическогоСписка, Отказ) Экспорт
	
	ДинамическийСписокФормы = Форма[ИмяДинамическогоСписка];
	
	ТекстЗапроса = "";
	ОсновнаяТаблицаСтрокой = "";
	
	Если ИмяДинамическогоСписка = "ДополнительныеДанныеПользователей" Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Пользователь,
		|	""Подразделение"" КАК Настройка,
		|	Пользователи.Подразделение КАК Значение
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Подразделение = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|	И НЕ Пользователи.ПометкаУдаления
		|	И НЕ Пользователи.Недействителен
		|	И НЕ Пользователи.Служебный";
		ОсновнаяТаблицаСтрокой = "Справочник.Пользователи";
		
	ИначеЕсли ИмяДинамическогоСписка = "ВидыОплат" Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	СправочникВидыОплат.Ссылка КАК Ссылка,
		|	СправочникВидыОплат.ПометкаУдаления КАК ПометкаУдаления,
		|	СправочникВидыОплат.Код КАК Код,
		|	СправочникВидыОплат.Наименование КАК Наименование,
		|	СправочникВидыОплат.ТипОплаты КАК ТипОплаты,
		|	СправочникВидыОплат.БанкКредитор КАК БанкКредитор,
		|	СправочникВидыОплат.ПроцентБанковскойКомиссии КАК ПроцентБанковскойКомиссии,
		|	СправочникВидыОплат.Предопределенный КАК Предопределенный,
		|	СправочникВидыОплат.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
		|ИЗ
		|	Справочник.ВидыОплатЧекаККМ КАК СправочникВидыОплат
		|ГДЕ
		|	НЕ СправочникВидыОплат.ПометкаУдаления
		|	И НЕ СправочникВидыОплат.Ссылка В (ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом), ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ВстречноеПредоставление))";
		ОсновнаяТаблицаСтрокой = "Справочник.ВидыОплат";
		
	ИначеЕсли ИмяДинамическогоСписка = "КодыДоступаПользователей" Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """") КАК КодДоступа
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО (Штрихкоды.Владелец ССЫЛКА Справочник.ИнформационныеКарты)
	|			И ИнформационныеКарты.Ссылка = Штрихкоды.Владелец
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (ИнформационныеКарты.ВладелецКарты ССЫЛКА Справочник.ФизическиеЛица)
	|			И (Пользователи.ФизическоеЛицо = ИнформационныеКарты.ВладелецКарты)
	|ГДЕ
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """") = """"
	|	И НЕ Пользователи.ПометкаУдаления
	|	И НЕ Пользователи.Недействителен
	|	И НЕ Пользователи.Служебный
	|	И НЕ ИнформационныеКарты.ПометкаУдаления
	|	И НЕ ИнформационныеКарты.ЭтоГруппа";
	ОсновнаяТаблицаСтрокой = "Справочник.ИнформационныеКарты";
		
	ИначеЕсли ИмяДинамическогоСписка = "КассыККМ" Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	СправочникКассыККМ.Ссылка КАК Ссылка,
		|	СправочникКассыККМ.Владелец КАК Организация,
		|	СправочникКассыККМ.Магазин КАК ТорговыйОбъект,
		|	НЕ СправочникКассыККМ.ПодключаемоеОборудование = ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка) КАК КассаПодключена
		|ИЗ
		|	Справочник.КассыККМ КАК СправочникКассыККМ
		|ГДЕ
		|	НЕ СправочникКассыККМ.ПометкаУдаления";
		ОсновнаяТаблицаСтрокой = "Справочник.КассыККМ";
		
	ИначеЕсли ИмяДинамическогоСписка = "ЭквайринговыеТерминалы" Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	СправочникЭквайринговыеТерминалы.Ссылка КАК Ссылка,
		|	СправочникЭквайринговыеТерминалы.ПометкаУдаления КАК ПометкаУдаления,
		|	СправочникЭквайринговыеТерминалы.Код КАК Код,
		|	СправочникЭквайринговыеТерминалы.Наименование КАК Наименование,
		|	СправочникЭквайринговыеТерминалы.Организация КАК Организация,
		|	СправочникЭквайринговыеТерминалы.Касса КАК Касса,
		|	СправочникЭквайринговыеТерминалы.Магазин КАК ТорговыйОбъект,
		|	СправочникЭквайринговыеТерминалы.ПодключаемоеОборудование КАК ПодключаемоеОборудование,
		|	НЕ СправочникЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования КАК ОборудованиеИспользуется,
		|	СправочникЭквайринговыеТерминалы.Предопределенный КАК Предопределенный,
		|	СправочникЭквайринговыеТерминалы.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
		|	1 КАК ПолеУпорядочивания,
		|	СправочникЭквайринговыеТерминалы.Недействителен КАК Недействителен,
		|	""КассаККМ"" КАК ТипКассы
		|ИЗ
		|	Справочник.ЭквайринговыеТерминалы КАК СправочникЭквайринговыеТерминалы
		|ГДЕ
		|	НЕ СправочникЭквайринговыеТерминалы.ПометкаУдаления";
		ОсновнаяТаблицаСтрокой = "Справочник.ЭквайринговыеТерминалы";

		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ДинамическийСписокФормы.ТекстЗапроса = ТекстЗапроса;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОсновнаяТаблицаСтрокой) Тогда
		ДинамическийСписокФормы.ОсновнаяТаблица = ОсновнаяТаблицаСтрокой;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Формирует запрос для определения подключенных касс ККМ в рабочему месту кассира.
//
// Параметры:
//  Запрос - Запрос - запрос для переопределения.
//  Форма - ФормаКлиентскогоПриложения - форма помощника настройки кассового места.
//
Процедура СформироватьЗапросПодключенныеКассыККМ(Запрос, Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КассыККМ.ПодключаемоеОборудование КАК ПодключаемоеОборудование,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор) КАК ТипОборудования,
	|	КассыККМ.Владелец КАК Организация,
	|	КассыККМ.ПодключаемоеОборудование.СерийныйНомер КАК СерийныйНомер
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор)
	|	И НЕ КассыККМ.ИспользоватьБезПодключенияОборудования
	|	И НЕ КассыККМ.ПометкаУдаления
	|	И НЕ КассыККМ.ПодключаемоеОборудование = ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)
	|	И КассыККМ.РабочееМесто = &РабочееМесто
	|	И КассыККМ.ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
	|	И КассыККМ.ПодключаемоеОборудование.УстройствоИспользуется
	|	И КассыККМ.Владелец В(&Организации)
	|	И КассыККМ.Магазин = &ТорговыйОбъект";
	
	Запрос.УстановитьПараметр("РабочееМесто", Объект.РабочееМесто);
	Запрос.УстановитьПараметр("ТорговыйОбъект", Объект.ТорговыйОбъект);
	Запрос.УстановитьПараметр("Организации" , Объект.Организации.Выгрузить().ВыгрузитьКолонку("Организация"));
	
КонецПроцедуры

// Формирует запрос для определения подключенных эквайринговых терминалов в рабочему месту кассира.
//
// Параметры:
//  Запрос - Запрос - запрос для переопределения.
//  Форма - ФормаКлиентскогоПриложения - форма помощника настройки кассового места.
//
Процедура СформироватьЗапросПодключенныеЭквайринговыеТерминалы(Запрос, Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал) КАК ТипОборудования,
	|	ЭквайринговыеТерминалы.Организация,
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование.СерийныйНомер КАК СерийныйНомер
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
	|	И ЭквайринговыеТерминалы.Касса ССЫЛКА Справочник.КассыККМ
	|	И ЭквайринговыеТерминалы.Магазин = &ТорговыйОбъект
	|	И НЕ ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования
	|	И НЕ ЭквайринговыеТерминалы.ПодключаемоеОборудование = ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ТорговыйОбъект", Объект.ТорговыйОбъект);
	
КонецПроцедуры

// Формирует запрос для определения терминалов с незаполнными тарифами за операции.
//
// Параметры:
//  Запрос - Запрос - запрос для переопределения.
//  Форма - ФормаКлиентскогоПриложения - форма помощника настройки кассового места.
//
Процедура СформироватьЗапросТерминалыСПустымиТарифами(Запрос, Форма) Экспорт
	
Объект = Форма.Объект;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭквайринговыеТерминалы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втТерминалы
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
	|	И ЭквайринговыеТерминалы.Организация = &Организация
	|	И ЭквайринговыеТерминалы.Магазин = &ТорговыйОбъект
	|	И ЭквайринговыеТерминалы.Касса = &Касса
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭквайринговыеТерминалы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.НомерСтроки) КАК КоличествоЗаписейТарифов,
	|	ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втТарифыОбслуживанияТерминалов
	|ИЗ
	|	втТерминалы КАК втТерминалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭквайринговыеТерминалы.ТарифыЗаРасчетноеОбслуживание КАК ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание
	|		ПО втТерминалы.Ссылка = ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТерминалы.Ссылка КАК Ссылка,
	|	втТарифыОбслуживанияТерминалов.КоличествоЗаписейТарифов КАК КоличествоЗаписейТарифов
	|ИЗ
	|	втТерминалы КАК втТерминалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТарифыОбслуживанияТерминалов КАК втТарифыОбслуживанияТерминалов
	|		ПО втТерминалы.Ссылка = втТарифыОбслуживанияТерминалов.Ссылка
	|ГДЕ
	|	ЕСТЬNULL(втТарифыОбслуживанияТерминалов.КоличествоЗаписейТарифов, 0) = 0";
	
	ПодключенныеКассыККМ = Объект.Организации.Выгрузить().ВыгрузитьКолонку("КассаККМ");
	ПодключеннаяКассаККМ = ?(ПодключенныеКассыККМ.Количество() > 0,
		ПодключенныеКассыККМ[0],
		Неопределено);
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ТорговыйОбъект", Объект.ТорговыйОбъект);
	Запрос.УстановитьПараметр("Касса", ПодключеннаяКассаККМ);
	
КонецПроцедуры

// Формирует запрос для отчета о подключенном оборудовании.
//
// Параметры:
//  Запрос - Запрос - запрос, для отчета о подключенном оборудовании.
//  Форма - ФормаКлиентскогоПриложения - форма помощника настройки кассового места.
//
Процедура СформироватьЗапросОтчетОПодключенномОборудовании(Запрос, Форма) Экспорт
	
Объект = Форма.Объект;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	КассыККМ.Наименование КАК НаименованиеКасса,
	|	КассыККМ.Владелец КАК Организация,
	|	КассыККМ.ИспользоватьБезПодключенияОборудования КАК НаличныеПОСкрыть,
	|	КассыККМ.ПодключаемоеОборудование КАК НаличныеПОСсылка
	|ПОМЕСТИТЬ ТаблицаНаличные
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.РабочееМесто = &РабочееМесто
	|	И НЕ КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ККМOffline)
	|	И КассыККМ.Владелец = &Организация
	|	И НЕ КассыККМ.ПодключаемоеОборудование = ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)
	|	И НЕ КассыККМ.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭквайринговыеТерминалы.Организация КАК Организация,
	|	МИНИМУМ(ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования) КАК ИспользоватьБезПодключенияОборудования
	|ПОМЕСТИТЬ ТаблицаЭТ
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Магазин = &ТорговыйОбъект
	|	И &ИспользоватьОплатуПлатежнымиКартами
	|	И ЭквайринговыеТерминалы.Организация = &Организация
	|	И НЕ ЭквайринговыеТерминалы.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭквайринговыеТерминалы.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНаличные.КассаККМ КАК КассаККМ,
	|	ТаблицаНаличные.НаименованиеКасса КАК НаименованиеКасса,
	|	ТаблицаНаличные.Организация КАК Организация,
	|	ТаблицаНаличные.НаличныеПОСкрыть КАК НаличныеПОСкрыть,
	|	ТаблицаНаличные.НаличныеПОСсылка КАК НаличныеПОСсылка,
	|	ВЫБОР
	|		КОГДА ТаблицаЭТ.Организация ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ ""V""
	|	КОНЕЦ КАК ОплатаКартой,
	|	ЕСТЬNULL(ТаблицаЭТ.ИспользоватьБезПодключенияОборудования, ИСТИНА) КАК ОплатаКартойПОСкрыть
	|ИЗ
	|	ТаблицаНаличные КАК ТаблицаНаличные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЭТ КАК ТаблицаЭТ
	|		ПО ТаблицаНаличные.Организация = ТаблицаЭТ.Организация";
	
	Запрос.УстановитьПараметр("РабочееМесто", Объект.РабочееМесто);
	Запрос.УстановитьПараметр("ТорговыйОбъект", Объект.ТорговыйОбъект);
	Запрос.УстановитьПараметр("ИспользоватьОплатуПлатежнымиКартами", Форма.ИспользоватьОплатуПлатежнымиКартами);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
КонецПроцедуры

// Формирует запрос для определения количества касс ККМ с отбором по организации и торговому объекту.
//
// Параметры:
//  Запрос - Запрос - запрос для переопределения.
//  Форма - ФормаКлиентскогоПриложения - форма помощника настройки кассового места.
//
Процедура СформироватьЗапросКоличествоКассККМ(Запрос, Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.Владелец = &Владелец
	|	И КассыККМ.Магазин = &ТорговыйОбъект
	|	И НЕ КассыККМ.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", Объект.Организация);
	Запрос.УстановитьПараметр("ТорговыйОбъект", Объект.ТорговыйОбъект);

	
КонецПроцедуры

// Формирует запрос для отображения результатов настройки КассККМ.
//
// Параметры:
//  Запрос - Запрос - запрос для переопределения.
//  Форма - ФормаКлиентскогоПриложения - форма помощника настройки кассового места.
//
Процедура СформироватьЗапросНастроенныеКассыККМВПомощнике(Запрос, Форма) Экспорт

	Объект = Форма.Объект;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Организация КАК Организация
	|ПОМЕСТИТЬ ТаблицаОрганизации
	|ИЗ
	|	&Организации КАК Организации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	КассыККМ.Наименование КАК Наименование,
	|	КассыККМ.РегистрационныйНомер КАК РегистрационныйНомер,
	|	КассыККМ.ПодключаемоеОборудование КАК ПодключаемоеОборудование,
	|	КассыККМ.ТипКассы КАК ТипКассы,
	|	КассыККМ.Владелец КАК Организация,
	|	КассыККМ.ИспользоватьБезПодключенияОборудования КАК ИспользоватьБезПодключенияОборудования
	|ПОМЕСТИТЬ ТаблицаКассККМ
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.Магазин = &ТорговыйОбъект
	|	И КассыККМ.РабочееМесто = &РабочееМесто
	|	И КассыККМ.Владелец В
	|			(ВЫБРАТЬ
	|				ТаблицаОрганизации.Организация КАК Организация
	|			ИЗ
	|				ТаблицаОрганизации КАК ТаблицаОрганизации)
	|	И КассыККМ.ТипКассы В(&ТипыКассы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОрганизации.Организация КАК Организация,
	|	ЕСТЬNULL(ТаблицаКассККМ.КассаККМ, ЗНАЧЕНИЕ(Справочник.КассыККМ.ПустаяСсылка)) КАК КассаККМ,
	|	ЕСТЬNULL(ТаблицаКассККМ.Наименование, """") КАК Наименование,
	|	ЕСТЬNULL(ТаблицаКассККМ.РегистрационныйНомер, """") КАК РегистрационныйНомер,
	|	ЕСТЬNULL(ТаблицаКассККМ.ПодключаемоеОборудование, ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)) КАК ПодключаемоеОборудование,
	|	ЕСТЬNULL(ТаблицаКассККМ.ТипКассы, ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ПустаяСсылка)) КАК ТипКассы
	|ИЗ
	|	ТаблицаОрганизации КАК ТаблицаОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКассККМ КАК ТаблицаКассККМ
	|		ПО ТаблицаОрганизации.Организация = ТаблицаКассККМ.Организация";
	
	МассивТиповКассы = Новый Массив;
	МассивТиповКассы.Добавить(Перечисления.ТипыКассККМ.АвтономнаяККМ);
	МассивТиповКассы.Добавить(Перечисления.ТипыКассККМ.ФискальныйРегистратор);
	
	Запрос.УстановитьПараметр("Организации", Объект.Организации.Выгрузить());
	Запрос.УстановитьПараметр("ТорговыйОбъект", Объект.ТорговыйОбъект);
	Запрос.УстановитьПараметр("РабочееМесто", Объект.РабочееМесто);
	Запрос.УстановитьПараметр("ТипыКассы", МассивТиповКассы);

КонецПроцедуры

// Формирует запрос для получения данных:
// Пакет 1: выборка организаций.
// Пакет 2: выборка торговых объектов.
// Пакет 3: выборка касс ККМ.
//
// Параметры:
//  Запрос - Запрос - запрос для переопределения.
//  Форма - ФормаКлиентскогоПриложения - форма помощника настройки кассового места.
//
Процедура СформироватьЗапросДанныеПредприятия(Запрос, Форма) Экспорт
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТорговыеОбъекты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Магазины КАК ТорговыеОбъекты
	|ГДЕ
	|	НЕ ТорговыеОбъекты.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	НЕ КассыККМ.ПометкаУдаления";
	
КонецПроцедуры

// Формирует запрос для определения используемых видов оплат в помощнике настройки кассового места.
//
// Параметры:
//  Запрос - Запрос - запрос для переопределения.
//  Форма - ФормаКлиентскогоПриложения - форма помощника настройки кассового места.
//
Процедура СформироватьЗапросИспользуемыеВидыОплат(Запрос, Форма) Экспорт
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИспользоватьОплатуПлатежнымиКартами.Значение КАК ИспользоватьОплатуПлатежнымиКартами,
	|	ЛОЖЬ КАК ИспользоватьОплатуПлатежнымиСистемами
	|ИЗ
	|	Константа.ИспользоватьОплатуПлатежнымиКартами КАК ИспользоватьОплатуПлатежнымиКартами";
	
КонецПроцедуры

// Возвращает перечень доступных эквайринговых терминалов, для которых указаны кассы ККМ
// на этапе настройки РМК через интерфейс помощника настройки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложение - форма настройки помощника рабочего места кассира.
//  Результат - Массив - исходные данные для переопределения.
//
Процедура ЭквайринговыеТерминалыСККМ(Форма, Результат) Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ
		|	КассыККМ.Ссылка КАК Касса
		|ПОМЕСТИТЬ ТаблицаКасс
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ
		|ГДЕ
		|	КассыККМ.Ссылка В(&КассыККМ)
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭквайринговыеТерминалы.Ссылка
		|ИЗ
		|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
		|ГДЕ
		|	ЭквайринговыеТерминалы.Касса В
		|			(ВЫБРАТЬ
		|				ТаблицаКасс.Касса КАК Касса
		|			ИЗ
		|				ТаблицаКасс КАК ТаблицаКасс)");
		
		Запрос.УстановитьПараметр("КассыККМ", Форма.Объект.Организации.Выгрузить().ВыгрузитьКолонку("КассаККМ"));
		
		РезультатВыполненияЗапроса = Запрос.Выполнить();
		Результат = РезультатВыполненияЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Если Результат.Количество() > 0 Тогда
			Результат.Добавить(Справочники.ЭквайринговыеТерминалы.ПустаяСсылка());
		КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные для создания эквайрингового терминала через интерфейс помощника
// настройки РМК.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложение - форма настройки помощника рабочего места кассира
//
Процедура ЗаполнитьТаблицуСозданияЭквайринговыхТерминалов(Форма) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Организации.Организация,
	|	Организации.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаОрганизаций
	|ИЗ
	|	&Организации КАК Организации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК Касса,
	|	КассыККМ.Владелец КАК Организация,
	|	1 КАК ПолеУпорядочивания
	|ПОМЕСТИТЬ ТаблицаКасс
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.Ссылка В(&КассыККМ)
	|	И КассыККМ.Магазин = &ТорговыйОбъект
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОрганизаций.НомерСтроки,
	|	ТаблицаКасс.Касса,
	|	ТаблицаКасс.Организация,
	|	ТаблицаКасс.ПолеУпорядочивания
	|ПОМЕСТИТЬ ТаблицаКассСЭлементамиУпорядочивания
	|ИЗ
	|	ТаблицаКасс КАК ТаблицаКасс
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаОрганизаций КАК ТаблицаОрганизаций
	|		ПО ТаблицаКасс.Организация = ТаблицаОрганизаций.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКассСЭлементамиУпорядочивания.НомерСтроки,
	|	ТаблицаКассСЭлементамиУпорядочивания.Касса,
	|	ТаблицаКассСЭлементамиУпорядочивания.Организация,
	|	ТаблицаКассСЭлементамиУпорядочивания.ПолеУпорядочивания
	|ПОМЕСТИТЬ ТаблицаКассБезЭТ
	|ИЗ
	|	ТаблицаКассСЭлементамиУпорядочивания КАК ТаблицаКассСЭлементамиУпорядочивания
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|		ПО ТаблицаКассСЭлементамиУпорядочивания.Организация = ЭквайринговыеТерминалы.Организация
	|			И ТаблицаКассСЭлементамиУпорядочивания.Касса = ЭквайринговыеТерминалы.Касса
	|ГДЕ
	|	ЭквайринговыеТерминалы.Ссылка ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодключенноеОборудование.ПодключаемоеОборудование,
	|	ПодключенноеОборудование.ТипОборудования КАК ТипОборудования,
	|	ПодключенноеОборудование.Организация
	|ПОМЕСТИТЬ ТаблицаИзменяемоеОборудование
	|ИЗ
	|	&ПодключенноеОборудование КАК ПодключенноеОборудование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИзменяемоеОборудование.ПодключаемоеОборудование,
	|	ТаблицаИзменяемоеОборудование.Организация
	|ПОМЕСТИТЬ ТаблицаИзменяемыеЭквайринговыеТерминалы
	|ИЗ
	|	ТаблицаИзменяемоеОборудование КАК ТаблицаИзменяемоеОборудование
	|ГДЕ
	|	ТаблицаИзменяемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКассБезЭТ.Касса,
	|	ЕСТЬNULL(ТаблицаИзменяемыеЭквайринговыеТерминалы.ПодключаемоеОборудование, ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)) КАК ПодключаемоеОборудование,
	|	ТаблицаКассБезЭТ.Организация
	|ИЗ
	|	ТаблицаКассБезЭТ КАК ТаблицаКассБезЭТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИзменяемыеЭквайринговыеТерминалы КАК ТаблицаИзменяемыеЭквайринговыеТерминалы
	|		ПО ТаблицаКассБезЭТ.Организация = ТаблицаИзменяемыеЭквайринговыеТерминалы.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаКассБезЭТ.ПолеУпорядочивания,
	|	ТаблицаКассБезЭТ.НомерСтроки");
	
	Запрос.УстановитьПараметр("Организации", Форма.Объект.Организации.Выгрузить());
	Запрос.УстановитьПараметр("КассыККМ", Форма.Объект.Организации.Выгрузить().ВыгрузитьКолонку("КассаККМ"));
	Запрос.УстановитьПараметр("ПодключенноеОборудование", Форма.Объект.ТаблицаПодключаемоеОборудование.Выгрузить());
	Запрос.УстановитьПараметр("ТорговыйОбъект", Форма.Объект.ТорговыйОбъект);
	
	Результат = Запрос.Выполнить();
	Форма.ТаблицаСозданияЭТ.Загрузить(Результат.Выгрузить());
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеЗапросов

// Формирует запрос для получения данных эквайринговый терминалов.
// В результате запроса должна быть заполнена таблица на форме РМК "ТаблицаТерминалы".
//
// Параметры:
//  Запрос - Запрос - запрос для получения данных ЭТ.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура СформироватьЗапросДанныеЭквайринговыхТерминалов(Запрос, Форма) Экспорт
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.ВидОплаты КАК ВидОплаты,
	|	ЭквайринговыеТерминалы.Ссылка КАК ЭквайринговыйТерминал,
	|	ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования КАК ИспользоватьБезПодключенияОборудования,
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование КАК ПодключаемоеОборудование,
	|	ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.ПроцентКомиссииПриПродаже КАК ПроцентКомиссииПриПродаже,
	|	ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.ПроцентКомиссииПриОтмене КАК ПроцентКомиссииПриОтмене,
	|	ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.ПроцентКомиссииПриВозврате КАК ПроцентКомиссииПриВозврате,
	|	ЭквайринговыеТерминалы.Организация КАК Организация
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы.ТарифыЗаРасчетноеОбслуживание КАК ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|		ПО ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.Ссылка = ЭквайринговыеТерминалы.Ссылка
	|ГДЕ
	|	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
	|	И ЭквайринговыеТерминалы.Касса В(&КассаККМ)
	|	И ЭквайринговыеТерминалы.Магазин = &ТорговыйОбъект";
	
	МассивКассККМ = Форма.ТаблицаКассККМОрганизаций.Выгрузить().ВыгрузитьКолонку("КассаККМ");
	Запрос.УстановитьПараметр("ТорговыйОбъект", Форма.Объект.ТорговыйОбъект);
	Запрос.УстановитьПараметр("КассаККМ", МассивКассККМ);
	
КонецПроцедуры

// Формирует запрос для получения данных касс ККМ.
// Поля обязательные в выборке: КассаККМ, Организация, ПодключаемоеОборудование, ИспользоватьБезПодключенияОборудования,
// ТорговыйОбъект.
//
// Параметры:
//  Запрос - Запрос - запрос для получения данных касс ККМ.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ДополнительныеПараметры - Структура - дополнительные параметры, если по данным формы не удается задать параметры запроса.
//
Процедура СформироватьЗапросДанныеКассыККМ(Запрос, Форма = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ТорговыйОбъект = Справочники.Магазины.ПустаяСсылка();
	РабочееМесто = Справочники.РабочиеМеста.ПустаяСсылка();
	
	Если Не Форма = Неопределено Тогда
		ТорговыйОбъект = Форма.Объект.ТорговыйОбъект;
		РабочееМесто = Форма.РабочееМесто;
	Иначе
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
			Если ДополнительныеПараметры.Свойство("ТорговыйОбъект") Тогда
				ТорговыйОбъект = ДополнительныеПараметры.ТорговыйОбъект;
			КонецЕсли;
			Если ДополнительныеПараметры.Свойство("РабочееМесто") Тогда
				РабочееМесто = ДополнительныеПараметры.РабочееМесто;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	КассыККМ.Магазин КАК ТорговыйОбъект,
	|	КассыККМ.Владелец КАК Организация,
	|	КассыККМ.ПодключаемоеОборудование КАК ПодключаемоеОборудование,
	|	КассыККМ.ИспользоватьБезПодключенияОборудования КАК ИспользоватьБезПодключенияОборудования,
	|	Ложь КАК СверятьДанныеССервисомОФД
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	НЕ КассыККМ.ПометкаУдаления
	|	И НЕ КассыККМ.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|	И НЕ КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ККМOffline)
	|	И КассыККМ.РабочееМесто = &РабочееМестоККМ
	|	И КассыККМ.Магазин = &ТорговыйОбъект
	|	И КассыККМ.ПодключаемоеОборудование.УстройствоИспользуется
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КассыККМ.Ссылка,
	|	КассыККМ.Магазин,
	|	КассыККМ.Владелец,
	|	КассыККМ.ПодключаемоеОборудование,
	|	КассыККМ.ИспользоватьБезПодключенияОборудования,
	|	Ложь КАК СверятьДанныеССервисомОФД
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	НЕ КассыККМ.ПометкаУдаления
	|	И НЕ КассыККМ.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|	И КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.АвтономнаяККМ)
	|	И КассыККМ.РабочееМесто = &РабочееМестоККМ
	|	И КассыККМ.Магазин = &ТорговыйОбъект";
	
	Запрос.УстановитьПараметр("ТорговыйОбъект", ТорговыйОбъект);
	Запрос.УстановитьПараметр("РабочееМестоККМ", РабочееМесто);
	
КонецПроцедуры

// Формирует запрос для получения данных избранных товаров.
// В результате запроса должна быть заполнена таблица на форме РМК "ИзбранныеПозиции".
//
// Параметры:
//  Запрос - Запрос - запрос для получения данных избранных товаров.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура СформироватьЗапросДанныеИзбранныхТоваров(Запрос, Форма) Экспорт
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПалитраТоваровРМКСостав.Ссылка КАК Ссылка,
	|	ПалитраТоваровРМКСостав.НомерСтроки КАК НомерСтроки,
	|	ПалитраТоваровРМКСостав.Номенклатура КАК Номенклатура,
	|	ПалитраТоваровРМКСостав.Характеристика КАК Характеристика,
	|	ПалитраТоваровРМКСостав.ЗаголовокЭлемента КАК ЗаголовокЭлемента,
	|	ПалитраТоваровРМКСостав.НомерКатегории КАК НомерКатегории,
	|	ПалитраТоваровРМКСостав.НомерКатегорииРазмещения КАК НомерКатегорииРазмещения,
	|	ПалитраТоваровРМКСостав.ИндексПозиции КАК ИндексПозиции,
	|	ПалитраТоваровРМКСостав.Шрифт КАК Шрифт,
	|	ПалитраТоваровРМКСостав.ЦветШрифта КАК ЦветШрифта,
	|	ПалитраТоваровРМКСостав.ЦветФона КАК ЦветФона,
	|	ПалитраТоваровРМКСостав.ЭтоКатегория КАК ЭтоКатегория,
	|	ПалитраТоваровРМКСостав.ИмяЭлемента КАК Наименование,
	|	ПалитраТоваровРМКСостав.ИмяЭлемента КАК ИмяЭлемента,
	|	ПалитраТоваровРМКСостав.ИзображениеЭлемента КАК ИзображениеЭлемента,
	|	ПалитраТоваровРМКСостав.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
	|	ПалитраТоваровРМКСостав.КатегорияРазмещения КАК КатегорияРазмещения,
	|	ПалитраТоваровРМКСостав.ВидМодификатора КАК ВидМодификатора,
	|	ПалитраТоваровРМКСостав.ИмеетсяВложенность КАК ИмеетсяВложенность
	|ПОМЕСТИТЬ ПалитраТоваровРМКСостав
	|ИЗ
	|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПалитраТоваровРМК.Состав КАК ПалитраТоваровРМКСостав
	|		ПО НастройкиРабочегоМестаКассира.СтруктураБыстрыхТоваров = ПалитраТоваровРМКСостав.Ссылка
	|ГДЕ
	|	НастройкиРабочегоМестаКассира.Ссылка = &НастройкаРМК
	|	И НЕ НастройкиРабочегоМестаКассира.ПометкаУдаления
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПалитраТоваровРМКСостав.НомерКатегории КАК НомерКатегории,
	|	ПалитраТоваровРМКСостав.НомерКатегорииРазмещения КАК НомерКатегорииРазмещения,
	|	ПалитраТоваровРМКСостав.ИндексПозиции КАК ИндексПозиции,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтрокиМодификатора
	|ПОМЕСТИТЬ ВТГрупповыеМодификаторы
	|ИЗ
	|	ПалитраТоваровРМКСостав КАК ПалитраТоваровРМКСостав
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПалитраТоваровРМКСостав.НомерКатегорииРазмещения КАК НомерКатегорииРазмещения,
	|			ПалитраТоваровРМКСостав.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			ПалитраТоваровРМКСостав КАК ПалитраТоваровРМКСостав
	|		ГДЕ
	|			ПалитраТоваровРМКСостав.НомерКатегорииРазмещения > 0
	|			И НЕ ПалитраТоваровРМКСостав.ВидМодификатора = ЗНАЧЕНИЕ(Перечисление.ВидыМодификаторовРМК.ПустаяСсылка)) КАК ВложенныйЗапрос
	|		ПО ПалитраТоваровРМКСостав.НомерКатегорииРазмещения = ВложенныйЗапрос.НомерКатегорииРазмещения
	|ГДЕ
	|	ПалитраТоваровРМКСостав.ВидМодификатора = ЗНАЧЕНИЕ(Перечисление.ВидыМодификаторовРМК.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПалитраТоваровРМКСостав.Ссылка КАК Ссылка,
	|	ПалитраТоваровРМКСостав.НомерСтроки КАК НомерСтроки,
	|	ПалитраТоваровРМКСостав.Номенклатура КАК Номенклатура,
	|	ПалитраТоваровРМКСостав.Характеристика КАК Характеристика,
	|	ПалитраТоваровРМКСостав.ЗаголовокЭлемента КАК ЗаголовокЭлемента,
	|	ПалитраТоваровРМКСостав.НомерКатегории КАК НомерКатегории,
	|	ПалитраТоваровРМКСостав.НомерКатегорииРазмещения КАК НомерКатегорииРазмещения,
	|	ПалитраТоваровРМКСостав.ИндексПозиции КАК ИндексПозиции,
	|	ПалитраТоваровРМКСостав.Шрифт КАК Шрифт,
	|	ПалитраТоваровРМКСостав.ЦветШрифта КАК ЦветШрифта,
	|	ПалитраТоваровРМКСостав.ЦветФона КАК ЦветФона,
	|	ПалитраТоваровРМКСостав.ЭтоКатегория КАК ЭтоКатегория,
	|	ПалитраТоваровРМКСостав.ИмяЭлемента КАК Наименование,
	|	ПалитраТоваровРМКСостав.ИмяЭлемента КАК ИмяЭлемента,
	|	ПалитраТоваровРМКСостав.ИзображениеЭлемента КАК ИзображениеЭлемента,
	|	ПалитраТоваровРМКСостав.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
	|	ПалитраТоваровРМКСостав.КатегорияРазмещения КАК КатегорияРазмещения,
	|	ПалитраТоваровРМКСостав.ВидМодификатора КАК ВидМодификатора,
	|	ПалитраТоваровРМКСостав.ИмеетсяВложенность КАК ИмеетсяВложенность
	|ПОМЕСТИТЬ СтруктураПалитрыБезМодификаторов
	|ИЗ
	|	ПалитраТоваровРМКСостав КАК ПалитраТоваровРМКСостав
	|ГДЕ
	|	НЕ ПалитраТоваровРМКСостав.НомерСтроки В
	|				(ВЫБРАТЬ
	|					ВТГрупповыеМодификаторы.НомерСтрокиМодификатора
	|				ИЗ
	|					ВТГрупповыеМодификаторы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПалитраТоваровРМКСостав.Номенклатура КАК Номенклатура,
	|	ПалитраТоваровРМКСостав.Характеристика КАК Характеристика,
	|	ПалитраТоваровРМКСостав.ЦветФона КАК ЦветФона,
	|	СтруктураПалитрыБезМодификаторов.НомерСтроки КАК НомерСтроки,
	|	ПалитраТоваровРМКСостав.Ссылка КАК Ссылка,
	|	ПалитраТоваровРМКСостав.НомерКатегории КАК НомерКатегории,
	|	СтруктураПалитрыБезМодификаторов.НомерКатегории КАК НомерКатегорииРазмещения,
	|	ПалитраТоваровРМКСостав.ЭтоКатегория КАК ЭтоКатегория,
	|	ЛОЖЬ КАК ИмеетсяВложенность,
	|	ПалитраТоваровРМКСостав.ИзображениеЭлемента КАК ИзображениеЭлемента,
	|	ПалитраТоваровРМКСостав.ИндексПозиции КАК ИндексПозиции,
	|	ПалитраТоваровРМКСостав.ИмяЭлемента КАК ИмяЭлемента,
	|	ПалитраТоваровРМКСостав.ЦветШрифта КАК ЦветШрифта
	|ПОМЕСТИТЬ СтруктураПалитрыМодификаторов
	|ИЗ
	|	СтруктураПалитрыБезМодификаторов КАК СтруктураПалитрыБезМодификаторов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГрупповыеМодификаторы КАК ВТГрупповыеМодификаторы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПалитраТоваровРМКСостав КАК ПалитраТоваровРМКСостав
	|			ПО ВТГрупповыеМодификаторы.НомерСтрокиМодификатора = ПалитраТоваровРМКСостав.НомерСтроки
	|		ПО СтруктураПалитрыБезМодификаторов.НомерКатегории = ВТГрупповыеМодификаторы.НомерКатегории
	|			И СтруктураПалитрыБезМодификаторов.НомерКатегорииРазмещения = ВТГрупповыеМодификаторы.НомерКатегорииРазмещения
	|			И СтруктураПалитрыБезМодификаторов.ИндексПозиции = ВТГрупповыеМодификаторы.ИндексПозиции
	|			И (СтруктураПалитрыБезМодификаторов.ЭтоКатегория = ЛОЖЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураПалитрыБезМодификаторов.Номенклатура КАК Номенклатура,
	|	СтруктураПалитрыБезМодификаторов.Характеристика КАК Характеристика,
	|	СтруктураПалитрыБезМодификаторов.ЦветФона КАК ЦветФона,
	|	СтруктураПалитрыБезМодификаторов.НомерСтроки КАК НомерСтроки,
	|	СтруктураПалитрыБезМодификаторов.Ссылка КАК Ссылка,
	|	СтруктураПалитрыБезМодификаторов.НомерКатегории КАК НомерКатегории,
	|	СтруктураПалитрыБезМодификаторов.НомерКатегорииРазмещения КАК НомерКатегорииРазмещения,
	|	СтруктураПалитрыБезМодификаторов.ЭтоКатегория КАК ЭтоКатегория,
	|	СтруктураПалитрыБезМодификаторов.ИмеетсяВложенность КАК ИмеетсяВложенность,
	|	СтруктураПалитрыБезМодификаторов.ИзображениеЭлемента КАК ИзображениеЭлемента,
	|	СтруктураПалитрыБезМодификаторов.ИмяЭлемента КАК ИмяЭлемента,
	|	СтруктураПалитрыБезМодификаторов.ИндексПозиции КАК ИндексПозиции,
	|	СтруктураПалитрыБезМодификаторов.ЦветШрифта КАК ЦветШрифта
	|ПОМЕСТИТЬ СтруктураПалитры
	|ИЗ
	|	СтруктураПалитрыБезМодификаторов КАК СтруктураПалитрыБезМодификаторов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтруктураПалитрыМодификаторов.Номенклатура,
	|	СтруктураПалитрыМодификаторов.Характеристика,
	|	СтруктураПалитрыМодификаторов.ЦветФона,
	|	СтруктураПалитрыМодификаторов.НомерСтроки,
	|	СтруктураПалитрыМодификаторов.Ссылка,
	|	СтруктураПалитрыМодификаторов.НомерКатегории,
	|	СтруктураПалитрыМодификаторов.НомерКатегорииРазмещения,
	|	СтруктураПалитрыМодификаторов.ЭтоКатегория,
	|	СтруктураПалитрыМодификаторов.ИмеетсяВложенность,
	|	СтруктураПалитрыМодификаторов.ИзображениеЭлемента,
	|	СтруктураПалитрыМодификаторов.ИмяЭлемента,
	|	СтруктураПалитрыМодификаторов.ИндексПозиции,
	|	СтруктураПалитрыМодификаторов.ЦветШрифта
	|ИЗ
	|	СтруктураПалитрыМодификаторов КАК СтруктураПалитрыМодификаторов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураПалитры.Номенклатура КАК Номенклатура,
	|	спрНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристикиНоменклатуры
	|			ТОГДА СтруктураПалитры.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	СтруктураПалитры.НомерСтроки КАК НомерСтроки,
	|	спрНоменклатура.Представление КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(СтруктураПалитры.Характеристика) КАК ХарактеристикаПредставление,
	|	ВидыНоменклатуры.ИспользоватьСерии КАК ИспользоватьСерии,
	|	спрНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	спрНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	спрНоменклатура.ОсобенностьУчета КАК ОсобенностьУчета,
	|	спрНоменклатура.ПроизвольныйНоминал КАК ПроизвольныйНоминал,
	|	спрНоменклатура.Номинал КАК Номинал,
	|	СтруктураПалитры.ЦветФона КАК ЦветФона,
	|	СтруктураПалитры.НомерКатегории КАК НомерКатегории,
	|	СтруктураПалитры.НомерКатегорииРазмещения КАК НомерКатегорииРазмещения,
	|	СтруктураПалитры.ЭтоКатегория КАК ЭтоКатегория,
	|	СтруктураПалитры.ИзображениеЭлемента КАК ИзображениеЭлемента,
	|	СтруктураПалитры.ИмяЭлемента КАК ИмяЭлемента,
	|	СтруктураПалитры.ИндексПозиции КАК ИндексПозиции,
	|	СтруктураПалитры.ЦветШрифта КАК ЦветШрифта,
	|	СтруктураПалитры.ИмеетсяВложенность КАК ИмеетсяВложенность
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	СтруктураПалитры КАК СтруктураПалитры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|			ПО спрНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|		ПО СтруктураПалитры.Номенклатура = спрНоменклатура.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ПОМЕСТИТЬ втЦеныНоменклатуры
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Дата,
	|			(Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						втНоменклатура.Номенклатура КАК Номенклатура,
	|						втНоменклатура.Характеристика КАК Характеристика
	|					ИЗ
	|						втНоменклатура КАК втНоменклатура)
	|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатура.НомерСтроки КАК НомерСтроки,
	|	втНоменклатура.Номенклатура КАК Номенклатура,
	|	втНоменклатура.Характеристика КАК Характеристика,
	|	втНоменклатура.НоменклатураПредставление КАК НоменклатураПредставление,
	|	втНоменклатура.ХарактеристикаПредставление КАК ХарактеристикаПредставление,
	|	втНоменклатура.ЕдиницаИзмерения КАК Упаковка,
	|	втНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	втНоменклатура.ОсобенностьУчета КАК ОсобенностьУчета,
	|	ВЫБОР
	|		КОГДА втНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА втНоменклатура.Номинал
	|		ИНАЧЕ ЕСТЬNULL(втЦеныНоменклатуры.Цена, 0)
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА втНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА ИСТИНА
	|		КОГДА ЕСТЬNULL(втЦеныНоменклатуры.Цена, 0) > 0
	|			ТОГДА ИСТИНА
	|		КОГДА втНоменклатура.ЭтоКатегория
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоступностьКоманды,
	|	втНоменклатура.ЦветФона КАК ЦветФона,
	|	втНоменклатура.НомерКатегории КАК НомерКатегории,
	|	втНоменклатура.НомерКатегорииРазмещения КАК НомерКатегорииРазмещения,
	|	втНоменклатура.ЭтоКатегория КАК ЭтоКатегория,
	|	втНоменклатура.ИзображениеЭлемента КАК ИзображениеЭлемента,
	|	втНоменклатура.ИмяЭлемента КАК ИмяЭлемента,
	|	втНоменклатура.ИндексПозиции КАК ИндексПозиции,
	|	втНоменклатура.ЦветШрифта КАК ЦветШрифта,
	|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыНаСкладахОстатки.РезервОстаток, 0) КАК Доступно,
	|	ПРЕДСТАВЛЕНИЕ(втНоменклатура.ЕдиницаИзмерения) КАК ПредставлениеЕдиницыИзмерения,
	|	втНоменклатура.ИмеетсяВложенность КАК ИмеетсяВложенность
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЦеныНоменклатуры КАК втЦеныНоменклатуры
	|		ПО втНоменклатура.Номенклатура = втЦеныНоменклатуры.Номенклатура
	|			И втНоменклатура.Характеристика = втЦеныНоменклатуры.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад = &СкладПродажи) КАК ТоварыНаСкладахОстатки
	|		ПО втНоменклатура.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	|			И втНоменклатура.Характеристика = ТоварыНаСкладахОстатки.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ИспользоватьХарактеристики = Ложь;
	ЗаполнитьИспользованиеХарактеристик(ИспользоватьХарактеристики);
	
	Запрос.УстановитьПараметр("НастройкаРМК", Форма.ТекущаяНастройкаРМК);
	Запрос.УстановитьПараметр("ВидЦены", Форма.РозничныйВидЦены);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ИспользоватьХарактеристикиНоменклатуры", ИспользоватьХарактеристики);
	
	ТорговыйОбъект = Форма.Объект.ТорговыйОбъект;
	СкладПродажи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТорговыйОбъект, "СкладПродажи");
	
	Запрос.УстановитьПараметр("СкладПродажи", СкладПродажи);
	
КонецПроцедуры

// Формирует запрос, который выводит данные из таблицы "Быстрые товары" справочника "Настройки рабочего места кассира".
// Запрос должен строки, в которых для товара обязательно заполнение характеристики, но характеристика не заполнена.
//
// Параметры:
//  Запрос - Запрос - запрос для получения строк с незаполненной характеристикой.
//  НастройкаРМК - СправочникСсылка.НастройкиРабочегоМестаКассира - текущая настройка РМК.
//
Процедура СформироватьЗапросИспользованияХарактеристикВБыстрыхТоварах(Запрос, НастройкаРМК) Экспорт
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиРМКБыстрыеТовары.Номенклатура КАК Номенклатура,
	|	ВидыНоменклатуры.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
	|	НастройкиРМКБыстрыеТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Справочник.НастройкиРабочегоМестаКассира.БыстрыеТовары КАК НастройкиРМКБыстрыеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО НастройкиРМКБыстрыеТовары.Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|ГДЕ
	|	НЕ ВидыНоменклатуры.ПометкаУдаления
	|	И НЕ ВидыНоменклатуры.ЭтоГруппа
	|	И НастройкиРМКБыстрыеТовары.Ссылка = &Ссылка
	|	И НастройкиРМКБыстрыеТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	И ВидыНоменклатуры.ИспользоватьХарактеристики";
	
	Запрос.УстановитьПараметр("Ссылка", НастройкаРМК);
	
КонецПроцедуры

// Формирует запрос, который выводит данные из таблицы "Быстрые товары" справочника "Настройки рабочего места кассира".
// Запрос должен выводить дублирующиеся строки в разрезе "Номенклатура - Характеристика".
//
// Параметры:
//  Запрос - Запрос - запрос для получения дублей строк.
//  НастройкаРМК - СправочникСсылка.НастройкиРабочегоМестаКассира - текущая настройка РМК.
//
Процедура СформироватьЗапросДублейСтрокВБыстрыхТоварах(Запрос, НастройкаРМК) Экспорт
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиРМКБыстрыеТовары.Номенклатура КАК Номенклатура,
	|	НастройкиРМКБыстрыеТовары.Характеристика КАК Характеристика,
	|	СУММА(1) КАК КоличествоПозиций
	|ПОМЕСТИТЬ втДубли
	|ИЗ
	|	Справочник.НастройкиРабочегоМестаКассира.БыстрыеТовары КАК НастройкиРМКБыстрыеТовары
	|ГДЕ
	|	НастройкиРМКБыстрыеТовары.Ссылка = &Ссылка
	|	И НЕ НастройкиРМКБыстрыеТовары.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	НастройкиРМКБыстрыеТовары.Номенклатура,
	|	НастройкиРМКБыстрыеТовары.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(1) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиРМКБыстрыеТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	втДубли КАК втДубли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиРабочегоМестаКассира.БыстрыеТовары КАК НастройкиРМКБыстрыеТовары
	|		ПО втДубли.Номенклатура = НастройкиРМКБыстрыеТовары.Номенклатура
	|			И втДубли.Характеристика = НастройкиРМКБыстрыеТовары.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", НастройкаРМК);
	
КонецПроцедуры

// Формирует запрос для получения данных организаций.
//
// Параметры:
//  Запрос - Запрос - запрос для получения данных организаций.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура СформироватьЗапросДанныеОрганизаций(Запрос, Форма) Экспорт
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_ПереопределениеАутентификацииПользователейПоКодамДоступа

// Проверяет наличие ошибок при настройке текущего пользователя 
//
// Параметры:
//  Отказ - Истина - признак наличия отказа, выставляется при выявлении ошибки настройки.
//  ТекстЗаголовка - Строка - текст заголовка ошибки для передачи в заголовок панели ошибок формы РМК.
//  ТекстСообщения - Строка - текст ошибки для передачи в тело ошибки панели ошибок формы РМК.
//
//
Процедура ПроверитьНастройкиПользователя(Отказ, ТекстЗаголовка, ТекстСообщения) Экспорт
КонецПроцедуры

// Заполняет значение нового кода доступа для сотрудника.
//
// Параметры:
//  НовыйКодСотрудника - Строка - новый код доступа сотрудника.
//
Процедура ЗаполнитьНовыйКодДоступаКассира(НовыйКодСотрудника) Экспорт
	НовыйКодСотрудника = ШтрихкодированиеРМК.СформироватьШтрихкодEAN13Кассира();
КонецПроцедуры

// Заполняет изображение штрихкода в табличном документе.
//
// Параметры:
//  КодКассира - Строка - исходные данные кода доступа кассира для выведения в виде сканируемого изображения
//  Наименование - Строка - исходные данные кассира для выведения в виде сканируемого изображения
//  Результат - ТабличныйДокумент - табличный документ, в котором необходимо вывести изображение штрихкода.
//
Процедура ПодготовитьКодДоступаПользователяДляСохранения(КодКассира, Наименование, Результат) Экспорт
	
	ПараметрыШтрихкода = ГенерацияШтрихкода.ПараметрыГенерацииШтрихкода();
	ПараметрыШтрихкода.Ширина = 200;
	ПараметрыШтрихкода.Высота = 100;
	ПараметрыШтрихкода.УровеньКоррекцииQR = 0;
	ПараметрыШтрихкода.Штрихкод = КодКассира;
	ПараметрыШтрихкода.ТипКода = 99;
	ПараметрыШтрихкода.ОтображатьТекст = Истина;
	ПараметрыШтрихкода.РазмерШрифта = 11;
	ПараметрыШтрихкода.УголПоворота = 0;

	ИзображениеШтрихкода = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);

	ДиапазонНаименованияСотрудника = "R2C1:R3C6";
	ИсходныеДанные = Результат.Область(ДиапазонНаименованияСотрудника);
	ИсходныеДанные.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	ИсходныеДанные.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	ИсходныеДанные.Объединить();
	ИсходныеДанные.Текст = Наименование;
	
	ДиапазонОтображенияКартинки = "R4C1:R4C2";
	Результат.ВставитьОбласть(Результат.Область(ДиапазонОтображенияКартинки));
	ОбластьКартинки = Результат.ПолучитьОбласть(ДиапазонОтображенияКартинки);
	НовыйРисунок = ОбластьКартинки.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	НовыйРисунок.Картинка = ИзображениеШтрихкода.Картинка;
	НовыйРисунок.Верх = 3;
	НовыйРисунок.Лево = 20;
	НовыйРисунок.Ширина = 60;
	НовыйРисунок.Высота = 30;

	Результат.Вывести(ОбластьКартинки);
	
КонецПроцедуры

// Формирует запрос на получение паролей текущего пользователя.
// Запрос должен получать все коды доступа для текущего пользователя.
//
// Параметры:
//  Запрос - Запрос - запрос, для проверки кодов доступа у пользователя.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура СформироватьЗапросПолученияКодовДоступаПользователя(Запрос, Форма) Экспорт
	
	Запрос.Текст ="ВЫБРАТЬ
	|	Штрихкоды.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|			ПО (ИнформационныеКарты.ВладелецКарты ССЫЛКА Справочник.Пользователи)
	|				И ИнформационныеКарты.ВладелецКарты = Пользователи.Ссылка
	|		ПО Штрихкоды.Владелец = ИнформационныеКарты.Ссылка
	|ГДЕ
	|	НЕ ИнформационныеКарты.ПометкаУдаления
	|	И НЕ Пользователи.Недействителен
	|	И НЕ Пользователи.ПометкаУдаления
	|	И Пользователи.Ссылка = &ТекущийПользователь
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Штрихкоды.Штрихкод
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|			ПО (ИнформационныеКарты.ВладелецКарты ССЫЛКА Справочник.ФизическиеЛица)
	|				И ИнформационныеКарты.ВладелецКарты = ФизическиеЛица.Ссылка
	|		ПО Штрихкоды.Владелец = ИнформационныеКарты.Ссылка
	|ГДЕ
	|	НЕ ИнформационныеКарты.ПометкаУдаления
	|	И НЕ ФизическиеЛица.ПометкаУдаления
	|	И ФизическиеЛица.Ссылка = &ТекущийКассир";
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ТекущийКассир", Форма.КассирДляВхода);
	
КонецПроцедуры

// Отправляет email.
//
// Параметры:
//  Результат - Булево - признак выполнения операции отправки email.
//  ТемаПисьма - Строка - тема отправляемого email.
//  ТелоПисьма - Строка - тело текста отправляемого email .
//  АдресаПолучателей - Строка - адреса получателей через разделитель.
//  РазделительАдресовПолучателей - Строка - разделитель для адресов получателей.
//
Процедура ОтправитьEmail(Результат, ТемаПисьма, ТелоПисьма, АдресаПолучателей, РазделительАдресовПолучателей) Экспорт
	
	Результат = Истина;
	УчетнаяЗапись = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
	
	ПараметрыПисьма = Новый Структура;
	
	ПараметрыПисьма.Вставить("Кому", АдресаПолучателей);
	ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
	ПараметрыПисьма.Вставить("Тело", ТелоПисьма);
	Попытка
		ИдентификаторСообщения = РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при отправке кода доступа.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Результат = Ложь;
			
	КонецПопытки;
	
КонецПроцедуры

//Переопределяет значение владельца кода доступа по исходным данным
Процедура ПереопределитьВладельцаКодаДоступа(ВладелецКодаДоступа) Экспорт
	
	Если ЗначениеЗаполнено(ВладелецКодаДоступа) Тогда
		
		Если ТипЗнч(ВладелецКодаДоступа) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ТипВладельцаКодаДоступа = "Справочник.ФизическиеЛица";
		ИначеЕсли ТипЗнч(ВладелецКодаДоступа) = Тип("СправочникСсылка.Пользователи") Тогда
			ТипВладельцаКодаДоступа = "Справочник.Пользователи";
		Иначе
			ТипВладельцаКодаДоступа = "";
		КонецЕсли;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ИнформационныеКарты.Ссылка КАК Карта
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|ГДЕ
		|	НЕ ИнформационныеКарты.ЭтоГруппа
		|	И НЕ ИнформационныеКарты.ПометкаУдаления
		|	И ИнформационныеКарты.ВладелецКарты = &ВладелецКарты");
		
		Если ЗначениеЗаполнено(ТипВладельцаКодаДоступа) Тогда
			
			Запрос.Текст = СтрШаблон("%1 И ИнформационныеКарты.ВладелецКарты ССЫЛКА %2",
				Запрос.Текст, ТипВладельцаКодаДоступа);
				
			Запрос.УстановитьПараметр("ВладелецКарты", ВладелецКодаДоступа);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВладелецКодаДоступа = Выборка.Карта;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует запрос для получения последнего внутреннего штрихкода в базе.
// В выборке должно быть поле "Код".
//
// Параметры:
//  Запрос - Запрос - переопределяемый запрос.
//  ПрефиксВнутреннегоШтрихкода - Число - префикс для внутреннего штрихкода.
//  ПрефиксШтрихкодаИБ - Число - префикс для информационной базы.
//
Процедура СформироватьЗапросПоследнийШтрихкод(Запрос, ПрефиксВнутреннегоШтрихкода, ПрефиксШтрихкодаИБ) Экспорт
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ПОДСТРОКА(Штрихкоды.Штрихкод, 5, 8)) КАК Код
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод ПОДОБНО &ШаблонШтрихкод
	|	И Штрихкоды.Владелец ССЫЛКА Справочник.ИнформационныеКарты";
	ШаблонШтрихкод = СтрШаблон("2%1%2__________", ПрефиксВнутреннегоШтрихкода, ПрефиксШтрихкодаИБ);
	Запрос.УстановитьПараметр("ШаблонШтрихкод", ШаблонШтрихкод);
	
КонецПроцедуры

// Записывает код доступа владельца в базу данных и меняет значение признака успешности записи кода доступа.
//
// Параметры:
//  Владелец - ОпределяемыйТип.ВладелецШтрихкодаРМК - владелец кода доступа.
//  КодДоступа - Строка - код доступа для записи в базу данных.
//
Процедура УстановитьКодДоступаКассиру(Владелец, КодДоступа) Экспорт
	
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.ФизическиеЛица")
		ИЛИ ТипЗнч(Владелец) = Тип("СправочникСсылка.Пользователи") Тогда
		
			НоваяКарта = Справочники.ИнформационныеКарты.СоздатьЭлемент();
			НоваяКарта.ВладелецКарты = Владелец;
			НоваяКарта.ДатаОткрытия = ТекущаяДатаСеанса();
			НоваяКарта.ВидКарты = ПредопределенноеЗначение("Перечисление.ВидыИнформационныхКарт.Штриховая");
			НоваяКарта.ТипКарты = ПредопределенноеЗначение("Перечисление.ТипыИнформационныхКарт.Регистрационная");
			НоваяКарта.Наименование = СтрШаблон("%1 (%2)", КодДоступа, Владелец);

			Попытка
			
				НоваяКарта.Записать();
				Владелец = НоваяКарта.Ссылка;
				
			Исключение
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Ошибка создания информационной карты для назначения кода доступа.'"),
						УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВызватьИсключение;
				
			КонецПопытки;
		
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
	
	НоваяЗаписьШтрихкод = НаборЗаписей.Добавить();
	НоваяЗаписьШтрихкод.Владелец = Владелец;
	НоваяЗаписьШтрихкод.Штрихкод = КодДоступа;
	НоваяЗаписьШтрихкод.ТипШтрихкода = ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихкодов.EAN13");
	
	Попытка
		НаборЗаписей.Записать(Ложь);
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка записи в регистр ""Штрихкоды"".'"),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Перезаполняет адрес электронной почты кассира из карты лояльности, при ее наличии
//
// Параметры:
//  Кассир - ОпределяемыйТип.КассирРМК
//  АдресЭлектроннойПочты - Строка
//
Процедура ЗаполнитьАдресЭлектроннойПочтыКассира(Кассир, АдресЭлектроннойПочты) Экспорт
	
	Если ЗначениеЗаполнено(Кассир) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ИнформационныеКартыКонтактнаяИнформация.Представление КАК АдресЭлектроннойПочты
		|ИЗ
		|	Справочник.ИнформационныеКарты.КонтактнаяИнформация КАК ИнформационныеКартыКонтактнаяИнформация
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|			ПО (ИнформационныеКарты.ВладелецКарты ССЫЛКА Справочник.ФизическиеЛица)
		|				И ИнформационныеКарты.ВладелецКарты = ФизическиеЛица.Ссылка
		|		ПО ИнформационныеКартыКонтактнаяИнформация.Ссылка = ИнформационныеКарты.Ссылка
		|ГДЕ
		|	ФизическиеЛица.Ссылка = &Кассир
		|	И НЕ ИнформационныеКарты.ЭтоГруппа
		|	И НЕ ФизическиеЛица.ЭтоГруппа
		|	И НЕ ФизическиеЛица.ПометкаУдаления
		|	И НЕ ИнформационныеКарты.ПометкаУдаления
		|	И ИнформационныеКартыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)");
		Запрос.УстановитьПараметр("Кассир", Кассир);
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			АдресЭлектроннойПочты = Результат.АдресЭлектроннойПочты;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеПараметровКонфигурации

// Заполняет признак использования характеристик в конфигурации.
//
// Параметры:
//  ИспользоватьХарактеристики - Булево - признак использования характеристик.
//
Процедура ЗаполнитьИспользованиеХарактеристик(ИспользоватьХарактеристики) Экспорт
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
КонецПроцедуры

// Заполняет признак использования оплат платежными картами.
//
// Параметры:
//  ИспользоватьОплатуПлатежнымиКартами - Булево - признак использования оплат платежными картами.
//
Процедура ЗаполнитьПризнакИспользованияОплатПК(ИспользоватьОплатуПлатежнымиКартами) Экспорт
	
	ИспользоватьОплатуПлатежнымиКартами = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами");
	
КонецПроцедуры

// Заполняет признак использования оплат платежными системами.
//
// Параметры:
//  ИспользоватьОплатуПлатежнымиСистемами - Булево - признак использования оплат платежными системами.
//
Процедура ЗаполнитьПризнакИспользованияОплатПлатежнымиСистемами(ИспользоватьОплатуПлатежнымиСистемами) Экспорт
	
	ИспользоватьОплатуПлатежнымиСистемами = Ложь;
	
КонецПроцедуры

// Заполняет признак использования продаж алкогольной продукции.
//
// Параметры:
//  ИспользоватьПродажуАлкоголя - Булево - признак использования продаж алкогольной продукции.
//
Процедура ЗаполнитьПризнакИспользованияПродажАлкоголя(ИспользоватьПродажуАлкоголя) Экспорт
	
	ИспользоватьПродажуАлкоголя = ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	
КонецПроцедуры

#КонецОбласти

#Область Запреты_продаж_ПрограммныйИнтерфейс

// Заполняет признак использования запретов продаж по данным сервера лояльности
//
// Параметры:
//  Результат - Булево - устанавливаемое значение признака
//
Процедура ЗаполнитьПризнакИспользованияОграниченийПродажРМК(Результат) Экспорт
	Результат = ПолучитьФункциональнуюОпцию("УдалитьИспользоватьЗапретПродаж");
КонецПроцедуры

// Устанавливает признак использования запретов продаж, поставляемых конфигурацией
//
// Параметры:
//  ИспользоватьОграниченияПродаж - Булево - исходное значение признака
//
Процедура ЗаполнитьПризнакИспользованияПоставляемыхОграниченийПродаж(ИспользоватьОграниченияПродаж) Экспорт
	
	ЗначениеПризнакаИспользования = ПолучитьФункциональнуюОпцию("ИспользоватьЗапретРозничнойПродажиАлкоголя");
	ИспользоватьОграниченияПродаж = ЗначениеПризнакаИспользования;
	
КонецПроцедуры

// Обновляет признак использования календарного запрета продаж по данным использования поставляемого конфигурацией
// признака запрета продаж
//
// Параметры:
//  ИспользоватьОграниченияПродаж - Булево - устанавливаемое значение признака
//  ПараметрыОбновления - Структура - дополнительные параметры
//
Процедура ОбновитьПризнакИспользованияОграниченийПродаж(ИспользоватьОграниченияПродаж, ПараметрыОбновления) Экспорт
	Возврат;
КонецПроцедуры

// Обновляет регистр сведений запретов продаж по поставляемым (встроенным) конфигурацией ограничениям 
//
// Параметры:
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК- торговый объект для отбора перечня ограничений.
//  Результат - Структура:
//  	* КомментарийОбновленияЗапретов - Строка - при наличии ошибок обновления данных содержит пояснение
//
Процедура ОбновитьОграниченияПродажИзПоставляемыхДанных(ТорговыйОбъект, Результат) Экспорт
	
	ИдентификаторТорговогоОбъектаСтрокой = Строка(ТорговыйОбъект.УникальныйИдентификатор());
	ПараметрыМетода = Новый Структура("Магазин", ИдентификаторТорговогоОбъектаСтрокой);
	ОграниченияПродаж = Неопределено;
	СерверЛояльностиПоставщикДанныхПереопределяемый.ДанныеОЗапретахПродаж(ПараметрыМетода, ОграниченияПродаж);
	
	Результат = Новый Структура();
	Результат.Вставить("ЗапретыПродажУспешноЗагружены", Ложь);
	Результат.Вставить("КомментарийОбновленияЗапретов", НСтр("ru = ''"));
	РезультатОбработки = ОбщегоНазначенияРМКВызовСервера.ОбработатьДанныеЗапретовИзОтвета(ОграниченияПродаж);
	ЗаполнитьЗначенияСвойств(Результат, РезультатОбработки);
	
КонецПроцедуры

#КонецОбласти

#Область ПлиточныйИнтерфейсПодбора_ПрограммныйИнтерфейс

//  Заполняет исходные данные для формы элемента палитры избранных товаров по данным подбора.
//
// Параметры:
//  ИсходныеДанные - Произвольный - исходные данные подбора номенклатуры.
//  Результат - ТаблицаЗначений:
//		* Номенклатура - ОпределяемыйТип.НоменклатураРМК.
//		* Характеристика - ОпределяемыйТип.ХарактеристикаРМК.
//
Процедура ЗаполнитьЗначенияПодбораДляПалитры(ИсходныеДанные, Результат) Экспорт
	
	Если ТипЗнч(ИсходныеДанные) = Тип("Структура")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсходныеДанные, "ВыбранноеЗначение")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсходныеДанные.ВыбранноеЗначение,
			"АдресВыбранныхТоваровВХранилище") Тогда
	
		ВыбранноеЗначение = ИсходныеДанные.ВыбранноеЗначение.АдресВыбранныхТоваровВХранилище;
		
		Результат.Очистить();
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") И ЭтоАдресВременногоХранилища(ВыбранноеЗначение) Тогда
			
			ДанныеИзВременногоХранилища = ПолучитьИзВременногоХранилища(ВыбранноеЗначение);
			
			Если ТипЗнч(ДанныеИзВременногоХранилища) = Тип("ТаблицаЗначений") Тогда
				
				Для Каждого Позиция Из ДанныеИзВременногоХранилища Цикл
					ЗаполнитьЗначенияСвойств(Результат.Добавить(), Позиция);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольПродаж

// Заполняет таблицу номенклатуры алкогольной продукцией для палитры.
//
// Параметры:
//  ТаблицаНоменклатураы - Таблица значений. Содержит 2 колонки: "Наименование", "Номенклатура".
//  СлужебнаяОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры.
//
Процедура ПолучитьНоменклатуруДляПалитрыАлкогольнаяПродукция(ТаблицаНоменклатураы, СлужебнаяОсобенностьУчета) Экспорт
	
	СлужебнаяОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция;
	ТаблицаНоменклатураы = СформироватьТаблицуНоменклатурыДляПалитрыПоВидуПродукции(СлужебнаяОсобенностьУчета);
	
КонецПроцедуры

// Заполняет таблицу номенклатуры табачной продукцией для палитры.
//
// Параметры:
//  ТаблицаНоменклатураы - Таблица значений. Содержит 2 колонки: "Наименование", "Номенклатура".
//  СлужебнаяОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры.
//
Процедура ПолучитьНоменклатуруДляПалитрыТабачнаяПродукция(ТаблицаНоменклатураы, СлужебнаяОсобенностьУчета) Экспорт
	
	СлужебнаяОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция;
	ТаблицаНоменклатураы = СформироватьТаблицуНоменклатурыДляПалитрыПоВидуПродукции(СлужебнаяОсобенностьУчета);
	
КонецПроцедуры

// Заполняет таблицу номенклатуры продукцией "Альтернативный табак" для палитры.
//
// Параметры:
//  ТаблицаНоменклатураы - Таблица значений. Содержит 2 колонки: "Наименование", "Номенклатура".
//  СлужебнаяОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры.
//
Процедура ПолучитьНоменклатуруДляПалитрыАльтернативныйТабак(ТаблицаНоменклатураы, СлужебнаяОсобенностьУчета) Экспорт
	
	СлужебнаяОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак;
	ТаблицаНоменклатураы = СформироватьТаблицуНоменклатурыДляПалитрыПоВидуПродукции(СлужебнаяОсобенностьУчета);
	
КонецПроцедуры

// Заполняет таблицу номенклатуры подарочными сертификатами для палитры.
//
// Параметры:
//  ТаблицаНоменклатураы - Таблица значений. Содержит 2 колонки: "Наименование", "Номенклатура".
//  СлужебныйВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры
//
Процедура ПолучитьНоменклатуруДляПалитрыПодарочныеСертификаты(ТаблицаНоменклатураы, СлужебныйВидНоменклатуры) Экспорт
	
	СлужебныйВидНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ТипНоменклатуры = &ТипНоменклатуры";
	Запрос.УстановитьПараметр("ТипНоменклатуры", СлужебныйВидНоменклатуры);
	
	ТаблицаНоменклатураы = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Заполняет переданный массив структурами данных для создания контролей продаж - запретов продаж.
//
// Параметры:
//  МассивОписанийКонтроля - Массив.
//
Процедура ПодготовитьПреобразованиеЗапретовПродажВКонтрольПродаж(МассивОписанийКонтроля) Экспорт
	
	ИменаКолонокСортировки = "НачалоПериода,КонецПериода,ДеньНедели,ВремяНачала,ВремяОкончания";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УсловияЗапретаПродажРМК.Организация КАК Организация,
	|	УсловияЗапретаПродажРМК.ВидНоменклатуры КАК ВидНоменклатуры,
	|	УсловияЗапретаПродажРМК.ОсобенностьУчета КАК ОсобенностьУчета,
	|	УсловияЗапретаПродажРМК.ДеньНедели КАК ДеньНедели,
	|	УсловияЗапретаПродажРМК.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	УсловияЗапретаПродажРМК.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	УсловияЗапретаПродажРМК.ВремяНачала КАК ВремяНачала,
	|	УсловияЗапретаПродажРМК.ВремяОкончания КАК ВремяОкончания
	|ПОМЕСТИТЬ втУсловияЗапретовАктуальные
	|ИЗ
	|	РегистрСведений.УсловияЗапретаПродажРМК КАК УсловияЗапретаПродажРМК
	|ГДЕ
	|	УсловияЗапретаПродажРМК.ДатаОкончанияДействия >= &НачалоТекущегоДня
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УсловияЗапретаПродажРМК.Организация,
	|	УсловияЗапретаПродажРМК.ВидНоменклатуры,
	|	УсловияЗапретаПродажРМК.ОсобенностьУчета,
	|	УсловияЗапретаПродажРМК.ДеньНедели,
	|	УсловияЗапретаПродажРМК.ДатаНачалаДействия,
	|	УсловияЗапретаПродажРМК.ДатаОкончанияДействия,
	|	УсловияЗапретаПродажРМК.ВремяНачала,
	|	УсловияЗапретаПродажРМК.ВремяОкончания
	|ИЗ
	|	РегистрСведений.УсловияЗапретаПродажРМК КАК УсловияЗапретаПродажРМК
	|ГДЕ
	|	УсловияЗапретаПродажРМК.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловияЗапретовАктуальные.Организация КАК Организация,
	|	СпрМагазины.Ссылка КАК ТорговыйОбъект
	|ИЗ
	|	втУсловияЗапретовАктуальные КАК УсловияЗапретовАктуальные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодключаемоеОборудование КАК СпрПодключаемоеОборудование
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КассыККМ КАК СпрКассыККМ
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Магазины КАК СпрМагазины
	|				ПО СпрКассыККМ.Магазин = СпрМагазины.Ссылка
	|					И (НЕ СпрМагазины.ПометкаУдаления)
	|			ПО (СпрКассыККМ.ПодключаемоеОборудование = СпрПодключаемоеОборудование.Ссылка)
	|				И (НЕ СпрКассыККМ.ПометкаУдаления)
	|		ПО УсловияЗапретовАктуальные.Организация = СпрПодключаемоеОборудование.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втУсловияЗапретовАктуальные.Организация КАК Организация,
	|	втУсловияЗапретовАктуальные.ВидНоменклатуры КАК ВидНоменклатуры,
	|	втУсловияЗапретовАктуальные.ОсобенностьУчета КАК ОсобенностьУчета,
	|	втУсловияЗапретовАктуальные.ДеньНедели КАК ДеньНедели,
	|	втУсловияЗапретовАктуальные.ДатаНачалаДействия КАК НачалоПериода,
	|	втУсловияЗапретовАктуальные.ДатаОкончанияДействия КАК КонецПериода,
	|	втУсловияЗапретовАктуальные.ВремяНачала КАК ВремяНачала,
	|	втУсловияЗапретовАктуальные.ВремяОкончания КАК ВремяОкончания
	|ИЗ
	|	втУсловияЗапретовАктуальные КАК втУсловияЗапретовАктуальные
	|ИТОГИ ПО
	|	Организация,
	|	ВидНоменклатуры,
	|	ОсобенностьУчета";
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ТаблицаТорговыхОбъектов = РезультатыЗапросов[1].Выгрузить();
	
	ВыборкаОрганизации = РезультатыЗапросов[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		ВыборкаВида = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВида.Следующий() Цикл
			ВыборкаОсобенности = ВыборкаВида.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаОсобенности.Следующий() Цикл
				
				СписокТоваровПуст = Ложь;
				
				ОписаниеКонтроля = ОбщегоНазначенияРМК.ШаблонОписанияКонтроля();
				ЗаполнитьотборНоменклатурыВОписанииКонтроля(ОписаниеКонтроля, ВыборкаОсобенности, СписокТоваровПуст);
				ЗаполнитьОтборТорговыхОбъектовВОписанииКонтроля(ОписаниеКонтроля,
					ВыборкаОрганизации.Организация, ТаблицаТорговыхОбъектов);
				
				ВыборкаСтрок = ВыборкаОсобенности.Выбрать();
				Пока ВыборкаСтрок.Следующий() Цикл
					НоваяСтрокаКонтроля = ОписаниеКонтроля.СтрокиКонтроля.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаКонтроля, ВыборкаСтрок);
				КонецЦикла;
				ОписаниеКонтроля.СтрокиКонтроля.Сортировать(ИменаКолонокСортировки);
				Если Не СписокТоваровПуст Тогда
					МассивОписанийКонтроля.Добавить(ОписаниеКонтроля);
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет данные контроля продаж для переданного списка товаров.
//
// Параметры:
//  ДанныеКонтроляПродаж - Структура - см. ИнтерфейсРМКСлужебныйКлиентСервер.ШаблонКэшаКонтроляПродаж().
//  ТаблицаТоваров - ТаблицаЗначений - таблица с товарами (Номенклатура, Характеристика),
//										для которых получается контроль продаж.
//  ДополнительныеДанные - Структура - дополнительные параметры для отбора контроля продаж.
//
Процедура ЗаполнитьДанныеКонтроляПродаж(ДанныеКонтроляПродаж, ТаблицаТоваров, ДополнительныеДанные) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаКонтроляПродаж();
	УстановитьПараметрыЗапросаКонтроляПродаж(Запрос, ТаблицаТоваров, ДополнительныеДанные);
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	НачальныйНомерЗапроса = 8;
	ДанныеКонтроляПродаж = ПодготовитьДанныеКонтроляПродаж(РезультатыЗапросов, НачальныйНомерЗапроса);
	
КонецПроцедуры

// Заполняет признак учета торговых объектов в контроле продаж
//
// Параметры:
//  УчетТорговыхОбъектов - Булево
//
Процедура ЗаполнитьПризнакУчетаТорговыхОбъектовКонтроляПродаж(УчетТорговыхОбъектов) Экспорт
	УчетТорговыхОбъектов = Истина;
КонецПроцедуры

#КонецОбласти

#Область Печать_заявления_на_возврат_ПрограммныйИнтерфейс

//	Дополняет исходные данные для заявления на возврат 
//
//	Параметры:
//	ДанныеЗаявленияНаВозврат - Структура:
//		*Товары - Массив,
//		*ФИОПокупателя - Строка,
//		*ДатаРождения - Дата,
//		*УдостоверениеЛичности - Строка,
//		*СуммаДокумента - Число,
//		*ЧекПродажи - ОпределяемыйТип.ЧекККМРМК,
//		*Магазин - ОпределяемыйТип.ТорговыйОбъектРМК,
//		*ЧекНомер - Число,
//		*ЧекДата - Дата,
//		*Кому - Строка,
//		*ОтКого - Строка,
//		*Дата - Дата.
//
Процедура ДополнитьИсходныеДанныеЗаявленияНаВозврат(ДанныеЗаявленияНаВозврат) Экспорт

	Если ДанныеЗаявленияНаВозврат.Свойство("ЧекПродажи") 
		И ЗначениеЗаполнено(ДанныеЗаявленияНаВозврат.ЧекПродажи) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ЧекККМ.Номер КАК ЧекНомер,
		|	ЧекККМ.Дата КАК ЧекДата
		|ИЗ
		|	Документ.ЧекККМ КАК ЧекККМ
		|ГДЕ
		|	ЧекККМ.Ссылка = &Ссылка
		|	И НЕ ЧекККМ.ПометкаУдаления");
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаявленияНаВозврат.ЧекПродажи);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ДанныеЗаявленияНаВозврат, Выборка);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

//Переопределение формирования заявления на возврат
//
// Параметры:
//  ЗаявлениеНаВозврат - ТабличныйДокумент - исходный макет заявления, сформированный по умолчанию
//  ДанныеЗаявленияНаВозврат - Структура - см. ДополнитьИсходныеДанныеЗаявленияНаВозврат(ДанныеЗаявленияНаВозврат)
//
Процедура ЗаполнитьЗаявлениеНаВозврат(ЗаявлениеНаВозврат, ДанныеЗаявленияНаВозврат) Экспорт
КонецПроцедуры

// Заполняет ФИО и дату рождения клиента по данным карты лояльности
//
// Параметры:
//  ДисконтнаяКартаКлиента - ОпределяемыйТип.ДисконтнаяКартаРМК - карта лояльности, содержащая исходные данные;
//  ФИО - Строка;
//  ДатаРождения - Дата.
//
Процедура ЗаполнитьПерсональныеДанныеПоКартеКлиента(ДисконтнаяКартаКлиента, ФИО, ДатаРождения) Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДисконтныеКарты.ВладелецКарты ССЫЛКА Справочник.ФизическиеЛица
	|			ТОГДА ВЫРАЗИТЬ(ДисконтныеКарты.ВладелецКарты КАК Справочник.ФизическиеЛица).ДатаРождения
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаРождения,
	|	ПРЕДСТАВЛЕНИЕ(ДисконтныеКарты.ВладелецКарты) КАК ФИОПокупателя
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ДисконтныеКарты
	|ГДЕ
	|	ДисконтныеКарты.Ссылка = &КартаЛояльности");
	Запрос.УстановитьПараметр("КартаЛояльности",ДисконтнаяКартаКлиента);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		ФИО = Выборка.ФИОПокупателя;
		ДатаРождения = Выборка.ДатаРождения;
	
	КонецЕсли;
	
КонецПроцедуры

// Получает краткое наименование организации
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияРМК;
//  КраткоеНаименованиеОрганизации - Строка.
//
Процедура ЗаполнитьКраткоеНаименованиеОрганизации(Организация, КраткоеНаименованиеОрганизации) Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Организации.НаименованиеСокращенное КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И Организации.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Организация);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		КраткоеНаименованиеОрганизации = Результат.Наименование;
	КонецЕсли;
	
КонецПроцедуры
		
#КонецОбласти

#Область Переопределение_обработчиков_форм_ПрограммныйИнтерфейс

// Переопределяет поведение формы при создании на сервере
//
// Параметры:
//  Форма - - ФормаКлиентскогоПриложения - форма, поведение которой переопределяется.
//  Отказ - Булево.
//  СтандартнаяОбработка - Булево.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если Форма.ИмяФормы = "Обработка.ПомощникНастройкиКассовогоМестаРМК.Форма.Форма" Тогда
		
		ОбменНастроен = Истина;
		Форма.ОбменНастроен = ОбменНастроен;
		Форма.Элементы.СтраницаЗапускаПомощникаНастройкиОбмена.Видимость = НЕ ОбменНастроен;
		Форма.Элементы.СтраницаНастройкаСинхронизацииДанных.Видимость = НЕ ОбменНастроен;
		
		Форма.Элементы.ДекорацияИнформирование.Заголовок =
			НСтр("ru = 'Недостаточно исходных данных для настройки рабочего места кассира.
			|Пожалуйста, введите данные следующих справочников:'");
			
		
		ВариантыОкругления = Форма.Элементы.ТекущаяНастройкаРМКТочностьОкругления.СписокВыбора;
		ВариантыОкругления.Очистить();
		ВариантыОкругления.Вставить(0,
			ПредопределенноеЗначение("Перечисление.ПорядкиОкругления.Окр1"), НСтр("ru = 'Без копеек'"));
		ВариантыОкругления.Вставить(1,
			ПредопределенноеЗначение("Перечисление.ПорядкиОкругления.Окр0_01"), НСтр("ru = 'С копейками'"));
			
		СкрытьСтрокуОборудованияУстройствРаспознавания(Форма);
			
	ИначеЕсли Форма.ИмяФормы = "Обработка.РабочееМестоКассира.Форма.ФормаВыбораЧека" Тогда
		
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		Форма.НачалоПериода = ТекущаяДатаСеанса;
		Форма.КонецПериода = ТекущаяДатаСеанса;
		
	ИначеЕсли Форма.ИмяФормы = "Обработка.РабочееМестоКассира.Форма.ФормаВыбораПродавца" Тогда
		ПереопределитьЗапросДоступныхПродавцов(Форма);
		
	ИначеЕсли Форма.ИмяФормы = "Справочник.КонтрольПродаж.Форма.ФормаСписка" Тогда
		НастроитьФормуСпискаКонтроляПродаж(Форма);
	ИначеЕсли Форма.ИмяФормы = "Справочник.КонтрольПродаж.Форма.ФормаЭлемента" Тогда
		НастроитьФормуЭлементаКонтроляПродаж(Форма);
	ИначеЕсли Форма.ИмяФормы = "Справочник.ПалитраТоваровРМК.Форма.ФормаЭлемента" Тогда
		НастроитьФормуЭлементаПалитрыТоваров(Форма);
	КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область СерверЛояльности

// Заполняет имя реквизита, в котором хранится код карты лояльности.
//
// Параметры:
//  ИмяРеквизита - Строка - имя реквизита.
//
Процедура ЗаполнитьИмяРеквизитаКодКартыЛояльности(ИмяРеквизита) Экспорт
КонецПроцедуры

#КонецОбласти

#Область ПараметрыПрограммы

// Заполняет признак использования замены товаров.
//
// Параметры:
//  Результат - Булево - признак использования замены товаров.
//
Процедура ЗаполнитьПризнакИспользоватьЗаменуТоваров(Результат) Экспорт
	
	Результат = ПолучитьФункциональнуюОпцию("ИспользоватьЗаменуТоваров");
	
КонецПроцедуры

// Заполняет признак использования сервиса лояльности.
//
// Параметры:
//  Результат - Булево - признак использования сервиса лояльности.
//
Процедура ЗаполнитьПризнакИспользоватьСерверЛояльностиПолучательДанных(Результат) Экспорт
	
	Результат = ПолучитьФункциональнуюОпцию("ИспользоватьСерверЛояльностиПолучательДанных");
	
КонецПроцедуры

// Заполняет признак использования оплат сертификатами НСПК.
//
// Параметры:
//  Результат - Булево - признак использования оплат сертификатами НСПК.
//
Процедура ЗаполнитьПризнакИспользоватьОплатуСертификатамиНСПК(Результат) Экспорт
	
	Результат = ПолучитьФункциональнуюОпцию("ИспользоватьУчетТоваровФСС");
	
КонецПроцедуры

// Заполняет признак ведения учета пивной продукции, реализуемой в розлив.
//
// Параметры:
//  Результат - Булево - признак использования оплат сертификатами НСПК.
//
Процедура ЗаполнитьПризнакВеденияУчетаПивнойПродукцииВРозлив(Результат) Экспорт
	
	Результат = ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции(Перечисления.ВидыПродукцииИС.Пиво);
	
КонецПроцедуры

// Заполняет признак возможности отправки электронной почты без функциональности БСП.
//
// Параметры:
//  Результат - Булево - Истина, если возможно отправить почту без использования БСП.
//
Процедура ЗаполнитьПризнакДоступнаОтправкаПочтыБезБСП(Результат) Экспорт
КонецПроцедуры

// Заполняет имя константы в прикладной конфигурации по переданному виду параметра.
//
// Параметры:
//  ВидКонстанты - Строка - вид переданной константы.
//  ИмяКонстанты - Строка - имя константы в прикладной конфигурации.
//
Процедура ЗаполнитьИмяКонстантыПоВиду(ВидКонстанты, ИмяКонстанты) Экспорт
	
	Если ВидКонстанты = "ВестиСведенияДляДекларацийПоАлкоголю" Тогда
		ИмяКонстанты = Метаданные.Константы.ВестиСведенияДляДекларацийПоАлкогольнойПродукции.Имя;
	ИначеЕсли ВидКонстанты = "ИспользоватьЗаменуТоваров" Тогда
		ИмяКонстанты = Метаданные.Константы.ИспользоватьЗаменуТоваров.Имя;
	ИначеЕсли ВидКонстанты = "ИспользоватьЗапретПродаж" Тогда
		ИмяКонстанты = Метаданные.Константы.УдалитьИспользоватьЗапретПродаж.Имя;
	ИначеЕсли ВидКонстанты = "ИспользоватьКонтрольПродаж" Тогда
		ИмяКонстанты = Метаданные.Константы.ИспользоватьКонтрольПродаж.Имя;
	ИначеЕсли ВидКонстанты = "ИспользоватьОплатуПлатежнымиКартами" Тогда
		ИмяКонстанты = Метаданные.Константы.ИспользоватьОплатуПлатежнымиКартами.Имя;
	ИначеЕсли ВидКонстанты = "ИспользоватьОплатуСертификатамиНСПК" Тогда
		ИмяКонстанты = Метаданные.Константы.ИспользоватьУчетТоваровФСС.Имя;
	ИначеЕсли ВидКонстанты = "ИспользоватьПодключаемоеОборудование" Тогда
		ИмяКонстанты = Метаданные.Константы.ИспользоватьПодключаемоеОборудование.Имя;
	ИначеЕсли ВидКонстанты = "ПечататьКороткийСлипЧек" Тогда
		ИмяКонстанты = Метаданные.Константы.ПечататьВстроенныйСлипЧек.Имя;
	ИначеЕсли ВидКонстанты = "ИспользоватьСовмещенныйКодДляЧекаЕГАИСИЧекаККМ" Тогда
		ИмяКонстанты = Метаданные.Константы.ИспользоватьЕдиныйШтриховойКодДляККТИЕГАИС.Имя;
	ИначеЕсли ВидКонстанты = "ИспользоватьСерверЛояльностиПолучательДанных" Тогда
		ИмяКонстанты = Метаданные.Константы.ИспользоватьСерверЛояльностиПолучательДанных.Имя;
	Иначе
	КонецЕсли;
	
КонецПроцедуры

// Заполняет признак, который определяет, что используется сокращенный сценарий настройки рабочего места кассира.
//
// Параметры:
//  Результат - Булево - признак для заполнения.
//
Процедура ЗаполнитьПризнакЭтоСокращенныйСценарийНастройкиРМК(Результат) Экспорт
КонецПроцедуры

// Заполняет признак формирования слип - чека, встроенного в фискальный чек.
//
// Параметры:
//  Результат - Булево - значение признака до переопределения.
//
Процедура ЗаполнитьПризнакФормированияКороткогоСлипЧека(Результат) Экспорт
	Результат = Константы.ПечататьВстроенныйСлипЧек.Получить();
КонецПроцедуры

// Заполняет признак формирования отдельного чека ЕГАИС при продаже алкогольной продукции.
//
// Параметры:
//  Результат - Булево - значение признака до переопределения.
//
Процедура ЗаполнитьПризнакПечатиОбщегоКодаДляЧекаККТИЕГАИС(Результат) Экспорт
	Результат = Константы.ИспользоватьЕдиныйШтриховойКодДляККТИЕГАИС.Получить();
КонецПроцедуры

#КонецОбласти

#Область Подключаемое_оборудование_ПрограммныйИнтерфейс
// Заполняет параметры по исходным данным 
//
// Параметры:
//	ОбщиеПараметры - Структура -
//		см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека().
//  ПараметрыПакетнойФискализации - Структура - 
//		см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПакетнойОперацииВОчередиЧеков().
//  ДанныеЗаполнения - Структура - Исходные данные:
//		* ИдентификаторЭТ - СправочникСсылка.ПодключаемоеОборудование.
//		* СуммаОплатыКартой - Число.
//		* ВидОплаты - ОпределяемыйТип.ВидОплатыРМК.
//		* ПроцентКомиссии - Число.
//		* ДанныеЧекаПродажи - ДокументСсылка.ЧекКККМ.
//		* ПараметрыВыдачиНаличных:
//			** ОрганизацияВыдачи - ОпределяемыйТип.ОрганизацияРМК.
//			** СуммаВыдачи - Число.
//
Процедура ЗаполнитьДанныеДляПакетнойФискализации(ОбщиеПараметры,
	ПараметрыПакетнойФискализации, ДанныеЗаполнения) Экспорт
	
КонецПроцедуры
#КонецОбласти

// Заполняет параметры для работы РМК при запуске
//
// Параметры:
//  ЗапуститьНовыйРМК - Булево - признак того, будет ли запущен РМК при старте системы
//  НеобходимоОбновитьИнтерфейс - Булево - признак того, что необходимо обновить интерфейс,
//    например, если добавили РМК на стартовую страницу.
//
Процедура ЗаполнитьПараметрыРаботыКлиентаПриЗапуске(ЗапуститьНовыйРМК, НеобходимоОбновитьИнтерфейс,
		ДополнительныеПараметрыЗапуска) Экспорт
	
	Если Не ВключеноИспользованиеНовогоРМК() Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьТекущегоПользователя = Истина;
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Если ИнтернетПоддержкаПользователей.СеансЗапущенБезРазделителей() Тогда
			ПолучитьТекущегоПользователя = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка();
	Если ПолучитьТекущегоПользователя Тогда
		ТекущийПользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ПолноэкранныйРежимЗапуска = Ложь;
	Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
		ОткрыватьРМКПриСтарте = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
			ПланыВидовХарактеристик.ПраваПользователей.ОткрыватьРМКПриЗапускеПрограммы,
			Ложь,
			ТекущийПользователь);
		ПользовательСПолнымиПравами = УправлениеДоступом.ЕстьРоль("ПолныеПрава",, ТекущийПользователь);
		ЗапуститьНовыйРМК = ОткрыватьРМКПриСтарте И Не ПользовательСПолнымиПравами;
		Если ЗапуститьНовыйРМК Тогда
			НеобходимоОбновитьИнтерфейс = Истина;
			ПолноэкранныйРежимЗапуска = ЗапуститьРабочееМестоНаВесьЭкран();
		КонецЕсли;
	КонецЕсли;
	ДополнительныеПараметрыЗапуска.Вставить("ПолноэкранныйРежимЗапуска", ПолноэкранныйРежимЗапуска);
	
КонецПроцедуры

// Настройка элементов формы "Настройки рабочего места кассира".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - общая форма настроек РМК.
//
Процедура ПереопределитьНастройкиРМК(Форма) Экспорт
	
	ЗаполнитьПрефиксыВесовогоТовара(Форма);
	НастроитьГруппуСинхронизацияДанных(Форма);
	НастроитьИспользованиеСервераЛояльности(Форма);
	НастроитьГруппуШаблоныЧеков(Форма);
	НастроитьГруппуЗапретыПродаж(Форма);
	НастроитьИспользованиеНовогоПодбораТоваров(Форма);
	НастроитьИспользованиеОтправкиSMS(Форма);
	НастроитьИспользованиеРежимаСкупки(Форма);
	НастроитьГруппуШаблоныШтрихкодов(Форма);
	НастроитьТочностьОкругления(Форма);
	НастроитьВариантыЗаполнения(Форма);
	НастроитьГруппуЗаказы(Форма);
	НастроитьГруппуРаботыСОтложеннымиЧеками(Форма);
	АктуализироватьОтображениеЭлементовНастроек(Форма);
	
	Форма.Элементы.НастройкаРМКЗапретитьСопоставлениеТовара.Видимость = Ложь;
	
КонецПроцедуры

// Процедура заполняет данные для работы рабочего места кассира.
// Список параметров: Текущий магазин, розничный вид цен, цена включает НДС, использование подключаемого оборудования,
// использование оплат платежными картами использование бонусных программ, настройка динамического списка товаров.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЗаполнитьДанныеДляРМК(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	ОпределитьТекущийТорговыйОбъект(Объект.ТорговыйОбъект);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаЦенообразования.ВидЦен КАК ВидЦен,
	|	ПравилаЦенообразования.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаЦенообразования КАК ПравилаЦенообразования
	|		ПО Магазины.ПравилоЦенообразования = ПравилаЦенообразования.Ссылка
	|ГДЕ
	|	Магазины.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.ТорговыйОбъект);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Форма.РозничныйВидЦены = Выборка.ВидЦен;
		Объект.ЦенаВключаетНДС = Выборка.ЦенаВключаетНДС;
	КонецЕсли;
	
	Объект.ВидОперации = ОбщегоНазначенияРМК.ВидТекущейОперации();
	Форма.ИспользоватьПодключаемоеОборудование = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");
	
	ЗаполнитьПризнакИспользоватьСерверЛояльностиПолучательДанных(Форма.ИспользоватьСерверЛояльностиПолучательДанных);
	НастроитьДинамическийСписокТоваров(Форма);
	
	ИспользоватьОплатуПК = Ложь;
	ЗаполнитьПризнакИспользованияОплатПК(ИспользоватьОплатуПК);
	Форма.ИспользоватьОплатуПлатежнымиКартами = ИспользоватьОплатуПК;
	
	ЗаполнитьПризнакИспользоватьОплатуСертификатамиНСПК(Форма.ИспользоватьОплатуСертификатамиНСПК);
	ЭлектронныеСертификатыНСПКРМКПереопределяемый.ЗаполнитьВидОплатыПлатежнаяСистемаНСПК(Форма.ВидОплатыНСПК);
	Форма.ИспользоватьЗаменуТоваров = ОбщегоНазначенияРМК.ИспользоватьЗаменуТоваров();
	Форма.ИспользоватьПоставляемыеОграниченияПродаж = ОбщегоНазначенияРМК.ИспользоватьПоставляемыеОграниченияПродаж();
	Форма.ИспользоватьКонтрольПродаж = ИспользоватьКонтрольПродаж();
	Форма.НеИспользоватьНастройкиКаталога = Истина;
	Форма.ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммыЛояльности");
	Форма.ПечататьКороткийСлипЧек = ОбщегоНазначенияРМК.ФормироватьИнтегрированныйСлипЧек();
	ПрограммноСоздатьРеквизитыФормы(Форма);
	
	НастроитьИспользованиеПродажПоЗаказам(Форма);
	НастроитьИспользованиеБезналичныхПлатежей(Форма);
	НастроитьИспользованиеРасчетовСКлиентами(Форма);
	
	НастроитьВидимостьВыбораКонтрагента(Форма);
	ОпределитьЗапускПодАдминистратором(Форма);
	ЗаполнитьСтавкиНДСДляЧекаКоррекции(Форма);
	ОпределитьЗаполненностьФизЛицаТекущегоПользователя(Форма.ФизЛицоПользователяЗаполнено);
	
	НастройкиСканирования = ИнтеграцияИСМПКлиентСерверПовтИсп.НастройкиСканированияКодовМаркировки();
	Если НЕ НастройкиСканирования = Неопределено И НастройкиСканирования.Свойство("УчитыватьМРЦ") Тогда
		Форма.УчитыватьМРЦ = НастройкиСканирования.УчитыватьМРЦ;
	КонецЕсли;
	ЗаполнитьНастройкиРазрешительногоРежима(Форма);
КонецПроцедуры

// Определеяет значение налогообложения НДС для текущей организации.
//
// Параметры:
//  НалогообложениеНДС - ОпределяемыйТип.НалогообложениеНДСРМК - налогообложение НДС для организации.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЗаполнитьСНОНДСДляОрганизации(НалогообложениеНДС, Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Определеяет значение налогообложения ККТ для организации.
//
// Параметры:
//  НалогообложениеККТ - ОпределяемыйТип.ТипыСистемНалогообложенияККТРМК - налогообложение ККТ для организации.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ТекущаяСтрока - СтрокаТабличнойЧасти - текущая строка.
//  Дата - ДатаВремя - (необязательный).
//
Процедура ЗаполнитьСНОККТДляОрганизации(НалогообложениеККТ, Форма, ТекущаяСтрока, Дата) Экспорт
	
	ТекущаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
	Дата = ?(Дата = '00010101', ТекущаяДата, Дата);
	СкладПродажи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.Объект.ТорговыйОбъект, "СкладПродажи");
	Организация = ?(ТекущаяСтрока = Неопределено, Форма.Объект.Организация, ТекущаяСтрока.Организация);
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		ТоварнаяГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура, "ТоварнаяГруппа");
	КонецЕсли;
	
	НалогообложениеККТ = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложения(
		Дата,
		Организация,
		Форма.Объект.ТорговыйОбъект,
		СкладПродажи,
		ТоварнаяГруппа);
	
КонецПроцедуры

// Определяет значение системы налогообложения организации на указанную дату.
//
//  Параметры:
//   Организация - ОпределяемыйТип.ОрганизацияРМК - организация для которой нужно определить СНО.
//   Дата - Дата - дата на которую нужно определить тип СНО.
//   СНОККТ - ОпределяемыйТип.ТипыСистемНалогообложенияККТРМК - значение системы налогообложения ККТ.
//
Процедура ОпределитьСНОККТДляОрганизации(Организация, Дата, СНОККТ) Экспорт
	
	СНОККТ = Перечисления.ТипыСистемНалогообложенияККТ.ПустаяСсылка();
	
	Дата = ?(Дата = '00010101', Неопределено, Дата);
	ДанныеСНО = РегистрыСведений.ПрименениеСистемНалогообложения.СистемаНалогообложенияОрганизации(Организация, Дата);
	Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ДанныеСНО, "СистемаНалогообложения") Тогда
		СНОККТ = ДанныеСНО.СистемаНалогообложения;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет системы налогообложения в чеке ККМ.
//
// Параметры:
//  ЧекККМСсылка - ДокументСсылка.ЧекККМ - документ, в котором нужно заполнить СНО перед записью.
//  СтруктураПараметров - Структура/Неопределено - параметры для выполнения процедуры.
//
Процедура ЗаполнитьСНОВЧекККМ(ЧекККМСсылка, СтруктураПараметров = Неопределено) Экспорт
	
	ЧекККМСсылка.СистемаНалогообложения = СтруктураПараметров.СистемаНалогообложения;
	
КонецПроцедуры

// Процедура фомирует запрос и его параметры для получения чеков при закрытии смены.
//
// Параметры:
//  Запрос - Новый Запрос - объект запрос.
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//
Процедура СформироватьЗапросЧековККМДляЗакрытияСмены(Запрос, Форма) Экспорт
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ КАК Док
	|ГДЕ
	|	Док.КассаККМ = &КассаККМ
	|	И Док.Проведен
	|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
	|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
	|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)";
	
	Запрос.УстановитьПараметр("КассаККМ", Форма.Объект.КассаККМ);
	
КонецПроцедуры

// Процедура фомирует запрос и его параметры для получения чеков для удаления при закрытии смены.
//
// Параметры:
//  Запрос - Новый Запрос - объект запрос.
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//
Процедура СформироватьЗапросЧековККМДляУдаления(Запрос, Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Формирование текста запроса динамического списка для списка товаров.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура НастроитьДинамическийСписокТоваров(Форма) Экспорт
	
	ИспользоватьХарактеристики = Ложь;
	ЗаполнитьИспользованиеХарактеристик(ИспользоватьХарактеристики);
	Если ИспользоватьХарактеристики Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Номенклатура,
		|	СпрНоменклатура.Наименование КАК Наименование,
		|	СпрНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СпрНоменклатура.Код КАК Код,
		|	СпрНоменклатура.Артикул КАК Артикул,
		|	СпрНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	СпрНоменклатура.ВидНоменклатуры.ИспользоватьЦенуНоменклатуры КАК ИспользоватьЦенуНоменклатуры,
		|	СпрНоменклатура.ОсобенностьУчета КАК ОсобенностьУчета,
		|	СпрНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	СпрНоменклатура.Номинал КАК Номинал
		|ПОМЕСТИТЬ ТаблицаНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	НЕ СпрНоменклатура.ПометкаУдаления
		|	И НЕ СпрНоменклатура.ЭтоГруппа
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ЦеныНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
		|	ТаблицаНоменклатура.Наименование КАК Наименование,
		|	ЕСТЬNULL(ЦеныНоменклатуры.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ТаблицаНоменклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		|	МАКСИМУМ(ЕСТЬNULL(ЦеныНоменклатуры.Период, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))) КАК Период,
		|	ЕСТЬNULL(ЦеныНоменклатуры.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ВидЦены,
		|	ТаблицаНоменклатура.Код КАК Код,
		|	ТаблицаНоменклатура.Артикул КАК Артикул,
		|	ТаблицаНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	ТаблицаНоменклатура.ОсобенностьУчета КАК ОсобенностьУчета,
		|	ТаблицаНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	0 КАК Номинал,
		|	ЛОЖЬ КАК ЦенаПоНоменклатуре
		|ПОМЕСТИТЬ ТаблицаМаксПериод
		|ИЗ
		|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО ТаблицаНоменклатура.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|ГДЕ
		|	ЦеныНоменклатуры.ВидЦены = &ВидЦены
		|	И ЦеныНоменклатуры.Период <= &Дата
		|	И НЕ(ТаблицаНоменклатура.ИспользоватьЦенуНоменклатуры
		|				И ЦеныНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаНоменклатура.Артикул,
		|	ТаблицаНоменклатура.ТипНоменклатуры,
		|	ТаблицаНоменклатура.ОсобенностьУчета,
		|	ЕСТЬNULL(ЦеныНоменклатуры.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)),
		|	ТаблицаНоменклатура.ВидНоменклатуры,
		|	ТаблицаНоменклатура.Код,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ТаблицаНоменклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка))
		|	КОНЕЦ,
		|	ЕСТЬNULL(ЦеныНоменклатуры.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)),
		|	ЕСТЬNULL(ЦеныНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
		|	ТаблицаНоменклатура.Наименование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ЦеныНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
		|	ТаблицаНоменклатура.Наименование,
		|	ХарактеристикиНоменклатуры.Ссылка,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ТаблицаНоменклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка))
		|	КОНЕЦ,
		|	МАКСИМУМ(ЕСТЬNULL(ЦеныНоменклатуры.Период, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))),
		|	ЕСТЬNULL(ЦеныНоменклатуры.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)),
		|	ТаблицаНоменклатура.Код,
		|	ТаблицаНоменклатура.Артикул,
		|	ТаблицаНоменклатура.ВидНоменклатуры,
		|	ТаблицаНоменклатура.ОсобенностьУчета,
		|	ТаблицаНоменклатура.ТипНоменклатуры,
		|	0,
		|	ИСТИНА
		|ИЗ
		|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО ТаблицаНоменклатура.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО (ТаблицаНоменклатура.Номенклатура = ХарактеристикиНоменклатуры.Владелец
		|				ИЛИ ТаблицаНоменклатура.ВидНоменклатуры = ХарактеристикиНоменклатуры.Владелец)
		|ГДЕ
		|	ЦеныНоменклатуры.ВидЦены = &ВидЦены
		|	И ЦеныНоменклатуры.Период <= &Дата
		|	И ТаблицаНоменклатура.ИспользоватьЦенуНоменклатуры
		|	И ЦеныНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаНоменклатура.Артикул,
		|	ТаблицаНоменклатура.ТипНоменклатуры,
		|	ТаблицаНоменклатура.ОсобенностьУчета,
		|	ЕСТЬNULL(ЦеныНоменклатуры.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)),
		|	ТаблицаНоменклатура.ВидНоменклатуры,
		|	ТаблицаНоменклатура.Код,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ТаблицаНоменклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка))
		|	КОНЕЦ,
		|	ЕСТЬNULL(ЦеныНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
		|	ХарактеристикиНоменклатуры.Ссылка,
		|	ТаблицаНоменклатура.Наименование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаНоменклатура.Номенклатура,
		|	ТаблицаНоменклатура.Наименование,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		|	ТаблицаНоменклатура.ЕдиницаИзмерения,
		|	&Дата,
		|	&ВидЦены,
		|	ТаблицаНоменклатура.Код,
		|	ТаблицаНоменклатура.Артикул,
		|	ТаблицаНоменклатура.ВидНоменклатуры,
		|	ТаблицаНоменклатура.ОсобенностьУчета,
		|	ТаблицаНоменклатура.ТипНоменклатуры,
		|	ТаблицаНоменклатура.Номинал,
		|	ЛОЖЬ
		|ИЗ
		|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
		|ГДЕ
		|	ТаблицаНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	ВидЦены,
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаМаксПериод.Номенклатура КАК Номенклатура,
		|	ТаблицаМаксПериод.Наименование КАК Наименование,
		|	ТаблицаМаксПериод.Характеристика КАК Характеристика,
		|	ТаблицаМаксПериод.Упаковка КАК Упаковка,
		|	ТаблицаМаксПериод.Период КАК Период,
		|	ТаблицаМаксПериод.ВидЦены КАК ВидЦены,
		|	ТаблицаМаксПериод.Код КАК Код,
		|	ТаблицаМаксПериод.Артикул КАК Артикул,
		|	ТаблицаМаксПериод.ВидНоменклатуры КАК ВидНоменклатуры,
		|	ТаблицаМаксПериод.ОсобенностьУчета КАК ОсобенностьУчета,
		|	ВЫБОР
		|		КОГДА ТаблицаМаксПериод.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|			ТОГДА ТаблицаМаксПериод.Номинал
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
		|	КОНЕЦ КАК Цена
		|ПОМЕСТИТЬ ТаблицаЦен
		|ИЗ
		|	ТаблицаМаксПериод КАК ТаблицаМаксПериод
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО ТаблицаМаксПериод.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|			И ТаблицаМаксПериод.Характеристика = ЦеныНоменклатуры.Характеристика
		|			И ТаблицаМаксПериод.Период = ЦеныНоменклатуры.Период
		|			И ТаблицаМаксПериод.ВидЦены = ЦеныНоменклатуры.ВидЦены
		|ГДЕ
		|	НЕ ТаблицаМаксПериод.ЦенаПоНоменклатуре
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаМаксПериод.Номенклатура,
		|	ТаблицаМаксПериод.Наименование,
		|	ТаблицаМаксПериод.Характеристика,
		|	ТаблицаМаксПериод.Упаковка,
		|	ТаблицаМаксПериод.Период,
		|	ТаблицаМаксПериод.ВидЦены,
		|	ТаблицаМаксПериод.Код,
		|	ТаблицаМаксПериод.Артикул,
		|	ТаблицаМаксПериод.ВидНоменклатуры,
		|	ТаблицаМаксПериод.ОсобенностьУчета,
		|	ВЫБОР
		|		КОГДА ТаблицаМаксПериод.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|			ТОГДА ТаблицаМаксПериод.Номинал
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
		|	КОНЕЦ
		|ИЗ
		|	ТаблицаМаксПериод КАК ТаблицаМаксПериод
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО ТаблицаМаксПериод.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|			И (ЦеныНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|			И ТаблицаМаксПериод.Период = ЦеныНоменклатуры.Период
		|			И ТаблицаМаксПериод.ВидЦены = ЦеныНоменклатуры.ВидЦены
		|ГДЕ
		|	ТаблицаМаксПериод.ЦенаПоНоменклатуре
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Склады.Ссылка КАК Склад
		|ПОМЕСТИТЬ СписокСкладов
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка = &СкладПродажи
		|	И НЕ Склады.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЦен.Номенклатура КАК Номенклатура,
		|	ТаблицаЦен.Наименование КАК Наименование,
		|	ТаблицаЦен.Характеристика КАК Характеристика,
		|	ТаблицаЦен.Упаковка КАК Упаковка,
		|	ТаблицаЦен.Период КАК Период,
		|	ТаблицаЦен.ВидЦены КАК ВидЦены,
		|	ТаблицаЦен.Код КАК Код,
		|	ТаблицаЦен.Артикул КАК Артикул,
		|	ТаблицаЦен.ВидНоменклатуры КАК ВидНоменклатуры,
		|	ТаблицаЦен.ОсобенностьУчета КАК ОсобенностьУчета,
		|	ТаблицаЦен.Цена КАК Цена,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.РезервОстаток, 0) КАК ВРезерве,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыНаСкладахОстатки.РезервОстаток, 0) КАК Доступно,
		|	99 КАК ВидСтроки
		|ИЗ
		|	ТаблицаЦен КАК ТаблицаЦен
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
		|				,
		|				(Номенклатура, Характеристика) В
		|						(ВЫБРАТЬ
		|							ТаблицаЦен.Номенклатура КАК Номенклатура,
		|							ТаблицаЦен.Характеристика КАК Характеристика
		|						ИЗ
		|							ТаблицаЦен КАК ТаблицаЦен)
		|					И Склад В
		|						(ВЫБРАТЬ
		|							СписокСкладов.Склад КАК Склад
		|						ИЗ
		|							СписокСкладов КАК СписокСкладов)) КАК ТоварыНаСкладахОстатки
		|		ПО ТаблицаЦен.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
		|			И ТаблицаЦен.Характеристика = ТоварыНаСкладахОстатки.Характеристика";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Номенклатура,
		|	СпрНоменклатура.Наименование КАК Наименование,
		|	СпрНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СпрНоменклатура.Код КАК Код,
		|	СпрНоменклатура.Артикул КАК Артикул,
		|	СпрНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	СпрНоменклатура.ОсобенностьУчета КАК ОсобенностьУчета,
		|	СпрНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	СпрНоменклатура.Номинал КАК Номинал
		|ПОМЕСТИТЬ ТаблицаНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	НЕ СпрНоменклатура.ПометкаУдаления
		|	И НЕ СпрНоменклатура.ЭтоГруппа
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ЦеныНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
		|	ТаблицаНоменклатура.Наименование КАК Наименование,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ТаблицаНоменклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		|	МАКСИМУМ(ЕСТЬNULL(ЦеныНоменклатуры.Период, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))) КАК Период,
		|	ЕСТЬNULL(ЦеныНоменклатуры.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ВидЦены,
		|	ТаблицаНоменклатура.Код КАК Код,
		|	ТаблицаНоменклатура.Артикул КАК Артикул,
		|	ТаблицаНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	ТаблицаНоменклатура.ОсобенностьУчета КАК ОсобенностьУчета,
		|	ТаблицаНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	0 КАК Номинал
		|ПОМЕСТИТЬ ТаблицаМаксПериод
		|ИЗ
		|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО ТаблицаНоменклатура.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|ГДЕ
		|	ЦеныНоменклатуры.ВидЦены = &ВидЦены
		|	И ЦеныНоменклатуры.Период <= &Дата
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаНоменклатура.Артикул,
		|	ТаблицаНоменклатура.ТипНоменклатуры,
		|	ТаблицаНоменклатура.ОсобенностьУчета,
		|	ЕСТЬNULL(ЦеныНоменклатуры.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)),
		|	ТаблицаНоменклатура.ВидНоменклатуры,
		|	ТаблицаНоменклатура.Код,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ТаблицаНоменклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка))
		|	КОНЕЦ,
		|	ЕСТЬNULL(ЦеныНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
		|	ТаблицаНоменклатура.Наименование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаНоменклатура.Номенклатура,
		|	ТаблицаНоменклатура.Наименование,
		|	ТаблицаНоменклатура.ЕдиницаИзмерения,
		|	&Дата,
		|	&ВидЦены,
		|	ТаблицаНоменклатура.Код,
		|	ТаблицаНоменклатура.Артикул,
		|	ТаблицаНоменклатура.ВидНоменклатуры,
		|	ТаблицаНоменклатура.ОсобенностьУчета,
		|	ТаблицаНоменклатура.ТипНоменклатуры,
		|	ТаблицаНоменклатура.Номинал
		|ИЗ
		|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
		|ГДЕ
		|	ТаблицаНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	ВидЦены,
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаМаксПериод.Номенклатура КАК Номенклатура,
		|	ТаблицаМаксПериод.Наименование КАК Наименование,
		|	ТаблицаМаксПериод.Упаковка КАК Упаковка,
		|	ТаблицаМаксПериод.Период КАК Период,
		|	ТаблицаМаксПериод.ВидЦены КАК ВидЦены,
		|	ТаблицаМаксПериод.Код КАК Код,
		|	ТаблицаМаксПериод.Артикул КАК Артикул,
		|	ТаблицаМаксПериод.ВидНоменклатуры КАК ВидНоменклатуры,
		|	ТаблицаМаксПериод.ОсобенностьУчета КАК ОсобенностьУчета,
		|	ВЫБОР
		|		КОГДА ТаблицаМаксПериод.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|			ТОГДА ТаблицаМаксПериод.Номинал
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
		|	КОНЕЦ КАК Цена
		|ПОМЕСТИТЬ ТаблицаЦен
		|ИЗ
		|	ТаблицаМаксПериод КАК ТаблицаМаксПериод
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО ТаблицаМаксПериод.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|			И ТаблицаМаксПериод.Период = ЦеныНоменклатуры.Период
		|			И ТаблицаМаксПериод.ВидЦены = ЦеныНоменклатуры.ВидЦены
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Склады.Ссылка КАК Склад
		|ПОМЕСТИТЬ СписокСкладов
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка = &СкладПродажи
		|	И НЕ Склады.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЦен.Номенклатура КАК Номенклатура,
		|	ТаблицаЦен.Наименование КАК Наименование,
		|	ТаблицаЦен.Упаковка КАК Упаковка,
		|	ТаблицаЦен.Период КАК Период,
		|	ТаблицаЦен.ВидЦены КАК ВидЦены,
		|	ТаблицаЦен.Код КАК Код,
		|	ТаблицаЦен.Артикул КАК Артикул,
		|	ТаблицаЦен.ВидНоменклатуры КАК ВидНоменклатуры,
		|	ТаблицаЦен.ОсобенностьУчета КАК ОсобенностьУчета,
		|	ТаблицаЦен.Цена КАК Цена,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.РезервОстаток, 0) КАК ВРезерве,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыНаСкладахОстатки.РезервОстаток, 0) КАК Доступно,
		|	99 КАК ВидСтроки
		|ИЗ
		|	ТаблицаЦен КАК ТаблицаЦен
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
		|				,
		|				Номенклатура В
		|						(ВЫБРАТЬ
		|							ТаблицаЦен.Номенклатура КАК Номенклатура
		|						ИЗ
		|							ТаблицаЦен КАК ТаблицаЦен)
		|					И Склад В
		|						(ВЫБРАТЬ
		|							СписокСкладов.Склад КАК Склад
		|						ИЗ
		|							СписокСкладов КАК СписокСкладов)) КАК ТоварыНаСкладахОстатки
		|		ПО ТаблицаЦен.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура"
		
	КонецЕсли;
	
	Форма.СписокТоваров.ТекстЗапроса = ТекстЗапроса;
	Форма.СписокТоваров.Параметры.УстановитьЗначениеПараметра("ВидЦены", Форма.РозничныйВидЦены);
	
	ТорговыйОбъект = Форма.Объект.ТорговыйОбъект;
	СкладПродажи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТорговыйОбъект, "СкладПродажи");
	Форма.СписокТоваров.Параметры.УстановитьЗначениеПараметра("СкладПродажи", СкладПродажи);
	
	Форма.СписокТоваров.Параметры.УстановитьЗначениеПараметра("Дата", ТекущаяДатаСеанса());
	
	НоваяКолонка = Форма.Элементы.Добавить("СписокТоваровДоступно", Тип("ПолеФормы"), Форма.Элементы.СписокТоваров);
	НоваяКолонка.Вид = ВидПоляФормы.ПолеНадписи;
	НоваяКолонка.ПутьКДанным = "СписокТоваров.Доступно";
	НоваяКолонка.Заголовок = "Доступно";
	НоваяКолонка.ШрифтЗаголовка = ШрифтыСтиля.КрупныйШрифтТекста;
	НоваяКолонка.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
	НоваяКолонка.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
	
	НоваяКолонка = Форма.Элементы.Добавить("СписокТоваровВРезерве", Тип("ПолеФормы"), Форма.Элементы.СписокТоваров);
	НоваяКолонка.Вид = ВидПоляФормы.ПолеНадписи;
	НоваяКолонка.ПутьКДанным = "СписокТоваров.ВРезерве";
	НоваяКолонка.Заголовок = "В резерве";
	НоваяКолонка.ШрифтЗаголовка = ШрифтыСтиля.КрупныйШрифтТекста;
	НоваяКолонка.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
	НоваяКолонка.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
	
КонецПроцедуры

// Процедура создает отложенный документ "Чек ККМ".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//  ЧекСоздан - Булево - признак, того, что создан отложенный чек.
//
Процедура СоздатьОтложенныйЧек(Форма, ЧекСоздан) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Если ЗначениеЗаполнено(Форма.ОтложенныйЧек) 
			И ОбщегоНазначения.СсылкаСуществует(Форма.ОтложенныйЧек) Тогда
			
			ЧекККМОбъект = Форма.ОтложенныйЧек.ПолучитьОбъект();
			Если Не Форма.ОтложенныйЧекПолностьюОплачен Тогда
				ЧекККМОбъект.Товары.Очистить();
			КонецЕсли;
		Иначе
			
			ЧекККМОбъект = Документы.ЧекККМ.СоздатьДокумент();
			
			Если ЗначениеЗаполнено(Форма.ОтложенныйЧек) Тогда
				ЧекККМОбъект.УстановитьСсылкуНового(Форма.ОтложенныйЧек);
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЧекККМОбъект, Объект);
		
		ЧекККМОбъект.Магазин = Объект.ТорговыйОбъект;
		ЧекККМОбъект.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Отложенный;
		ЧекККМОбъект.Дата = ТекущаяДатаСеанса();
		ЧекККМОбъект.Продавец = Объект.Кассир;
		ЧекККМОбъект.Комментарий = Форма.КомментарийКЧеку;
		
		ЗаполнитьАналитикуХозОперации(ЧекККМОбъект);
		
		ЗаполнитьТабличныеЧастиЧекККМ(Форма, Объект, ЧекККМОбъект);
		
		ОбщегоНазначенияРМККлиентСервер.СуммаДокумента(ЧекККМОбъект);
		
		ЧекККМОбъект.Записать(РежимЗаписиДокумента.Запись);
		ЗарегистрироватьОперациюОткладыванияЧека(Форма, ЧекККМОбъект);
		Форма.ОтложенныйЧек = Документы.ЧекККМ.ПустаяСсылка();
		
		ЧекСоздан = Истина;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при попытке отложить чек.'"),
			УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

// По переданным параметрам вида операции определяет текущий вид операции.
//
// Параметры:
//  ПараметрыВидаОперации - Структура - см.ОбщегоНазначенияРМККлиентСервер.ПараметрыВидаОперации().
//
Процедура ЗаполнитьВидОперацииЧекаККМ(ПараметрыВидаОперации) Экспорт
	
	Если ПараметрыВидаОперации.ЭтоВозврат Тогда
		ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	Иначе
		ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;
	КонецЕсли;
	
	ПараметрыВидаОперации.ВидОперации = ВидОперации;
	
КонецПроцедуры

// Определяет является ли полученный вид операции операцией продажи.
//
// Параметры:
//  ЭтоОперацияПродажи - Булево - признак, который говорит, что текущий вид операции это продажа.
//  ВидОперации - ОпределяемыйТип.ВидОперацииРМК - текущий вид операции.
//
Процедура ОпределитьВидОперации(ЭтоОперацияПродажи, ВидОперации) Экспорт
	
	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		ЭтоОперацияПродажи = Истина;
	Иначе
		ЭтоОперацияПродажи = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Определяет количество отложенных чеков. Если количество отложенных чеков = 1, то заполняет
// реквизит параметр "ОтложенныйЧек" ссылкой на чекККМ.
//
// Параметры:
//  СтруктураПараметров - Структура - Параметры для выполнения запроса.
//  ОтложенныйЧек - ОпределяемыйТип.ЧекККМРМК - реквизит формы, для хранения текущего отложенного чека.
//  КоличествоЧеков - Число - количество чеков ККМ со статусом "Отложен".
//
Процедура ЗаполнитьКоличествоОтложенныхЧеков(СтруктураПараметров, ОтложенныйЧек, КоличествоЧеков) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК ЧекККМ
	|ПОМЕСТИТЬ ТаблицаЧеков
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.КассаККМ В (&МассивКассККМ)
	|	И ЧекККМ.Магазин = &ТорговыйОбъект
	|	И ЧекККМ.Организация В (&МассивОрганизаций)
	|	И НЕ ЧекККМ.ПометкаУдаления
	|	И ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМ.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ТаблицаЧеков.ЧекККМ) КАК КоличествоЧеков
	|ИЗ
	|	ТаблицаЧеков КАК ТаблицаЧеков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЧеков.ЧекККМ КАК ЧекККМ
	|ИЗ
	|	ТаблицаЧеков КАК ТаблицаЧеков");
	
	Запрос.УстановитьПараметр("МассивКассККМ", СтруктураПараметров.МассивКассККМ);
	Запрос.УстановитьПараметр("МассивОрганизаций", СтруктураПараметров.МассивОрганизаций);
	Запрос.УстановитьПараметр("ТорговыйОбъект", СтруктураПараметров.ТорговыйОбъект);
	
	МассивРезультат = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	КоличествоЧеков = МассивРезультат[1].Выгрузить()[0].КоличествоЧеков;
	
	Если КоличествоЧеков = 1 Тогда
		ОтложенныйЧек = МассивРезультат[2].Выгрузить()[0].ЧекККМ;
	КонецЕсли;
	
КонецПроцедуры

// Формирует и записывает документ "Чек ККМ" перед пробитием на ККТ.
// Ссылку на записанный документ необходимо присвоить реквизиту формы "ЧекККМВОбработке"
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//  Отказ - Булево - признак наличия ошибки при записи документа.
//  ТекстОшибки - Строка - текст ошибки.
//  СистемаНалогообложения - ОпределяемыеТипы.ТипыСистемНалогообложенияККТРМК - СНО ККТ для текущего чека.
//
Процедура ЗаписатьЧекККМПередПробитием(Форма, Отказ, ТекстОшибки, СистемаНалогообложения) Экспорт
	
	Если Форма.ЭтоЧекКоррекции Тогда
		Форма.ЧекККМВОбработке = ЗаписатьЧекККМПередПробитиемКоррекции(Форма, Отказ, ТекстОшибки, СистемаНалогообложения);
		Возврат;
	КонецЕсли;
	
	ЧекККМ = Документы.ЧекККМ.ПустаяСсылка();
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Форма.ЧекККМВОбработке = ЧекККМ;
		Возврат;
	КонецЕсли;
	
	ТоварыИОплаты = ДанныеЧекаПоСистемеНалогообложения(Форма, СистемаНалогообложения, Форма.ОжидаемоеКоличествоЧеков);
	СкорректироватьСуммуНДСДляСворачиванияСтрокВЧеке(Форма, ТоварыИОплаты);
	
	Если ЗначениеЗаполнено(Форма.ЧекККМВОбработке)
		И ОбщегоНазначения.СсылкаСуществует(Форма.ЧекККМВОбработке) Тогда
		
		ТекущийЧек = Форма.ЧекККМВОбработке.ПолучитьОбъект();
		
		ТекущийЧек.Товары.Очистить();
		ТекущийЧек.Оплата.Очистить();
		
	ИначеЕсли ЗначениеЗаполнено(Форма.ОтложенныйЧек)
		И ОбщегоНазначения.СсылкаСуществует(Форма.ОтложенныйЧек) Тогда
		
		ТекущийЧек = Форма.ОтложенныйЧек.ПолучитьОбъект();
		
		ТекущийЧек.Товары.Очистить();
		ТекущийЧек.Оплата.Очистить();
		
	Иначе
		
		ТекущийЧек = Документы.ЧекККМ.СоздатьДокумент();
		
		Если ЗначениеЗаполнено(Форма.ЧекККМВОбработке) Тогда
			ТекущийЧек.УстановитьСсылкуНового(Форма.ЧекККМВОбработке);
		ИначеЕсли ЗначениеЗаполнено(Форма.ОтложенныйЧек) Тогда
			ТекущийЧек.УстановитьСсылкуНового(Форма.ОтложенныйЧек);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Форма.ПечататьБумажныйЧек Тогда
		ТекущийЧек.АдресЭП = Форма.ОтправкаЧекаПочта;
		Если ЗначениеЗаполнено(Форма.ОтправкаЧекаТелефон) И НЕ ЗначениеЗаполнено(Форма.ОтправкаЧекаПочта) Тогда
			ДлинаПоляНомераТелефона = ТекущийЧек.Метаданные().Реквизиты.Телефон.Тип.КвалификаторыСтроки.Длина;
			ТекущийЧек.Телефон = ПолучитьПоследниеЦифрыСтроки(Форма.ОтправкаЧекаТелефон, ДлинаПоляНомераТелефона);
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ТекущийЧек.Заблокировать();
	Исключение
		Отказ = Истина;
		ТекстОшибки = НСтр("ru = 'Ошибка блокировки документа.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстОшибки,
			УровеньЖурналаРегистрации.Ошибка,,
			ТекущийЧек,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Форма.ЧекККМВОбработке = ЧекККМ;
		Возврат;
	КонецПопытки;
	
	ТекущийЧек.Дата = ТекущаяДатаСеанса();
	
	СписокСвойств = "Товары, Оплата";
	
	Если Не ЗначениеЗаполнено(ТекущийЧек.ИдентификаторЧекаВОчереди) Тогда
		
		Идентификатор = Новый УникальныйИдентификатор;
		ТекущийЧек.ИдентификаторЧекаВОчереди = XMLСтрока(Идентификатор);
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущийЧек, Объект,,СписокСвойств);
	ДописатьВЧекКартуЛояльности(ТекущийЧек, Форма.ПараметрыКартыЛояльности);
	
	ТекущийЧек.Магазин = Объект.ТорговыйОбъект;
	ТекущийЧек.Ответственный = Объект.ПользовательБД;
	ТекущийЧек.Продавец = Объект.Кассир;
	ТекущийЧек.Комментарий = Форма.КомментарийКЧеку;
	
	Если ЗначениеЗаполнено(ТекущийЧек.ДисконтнаяКарта) И Не ЗначениеЗаполнено(ТекущийЧек.ВладелецДисконтнойКарты) 
		И ОбщегоНазначения.СсылкаСуществует(ТекущийЧек.ДисконтнаяКарта) Тогда
		ТекущийЧек.ВладелецДисконтнойКарты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийЧек.ДисконтнаяКарта,
			"ВладелецКарты");
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("СистемаНалогообложения", СистемаНалогообложения);
	ЗаполнитьСНОВЧекККМ(ТекущийЧек, СтруктураПараметров);
	ЗаполнитьАналитикуХозОперации(ТекущийЧек);
	
	ЗаполнитьТабличныеЧастиЧекККМ(Форма, ТоварыИОплаты, ТекущийЧек);
	
	ОбщегоНазначенияРМККлиентСервер.СуммаДокумента(ТекущийЧек);
	
	ЭтоПродажа = Ложь;
	ОпределитьВидОперации(ЭтоПродажа, Объект.ВидОперации);
	Если Не ЭтоПродажа И ЗначениеЗаполнено(Форма.ЧекККМПродажа)
		И Не Форма.ЭтоВозвратАванса Тогда
		
		ТекущийЧек.ЧекККМПродажа = Форма.ЧекККМПродажа;
		ПроверитьВозможностьВозвратаПоЧекуККМ(ТекущийЧек, Отказ, ТекстОшибки);
		
		Если Отказ Тогда
			Форма.ЧекККМВОбработке = ЧекККМ;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПродажа И Не ТекущийЧек.ОперацияСДенежнымиСредствами
		И (ТекущийЧек.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Отложенный
		ИЛИ НЕ ЗначениеЗаполнено(ТекущийЧек.СтатусЧекаККМ)) Тогда
		// ЕГАИС.
		УчетПродукцииЕГАИС = ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(ТекущийЧек.Организация,
			ТекущийЧек.Магазин, ТекущийЧек.Дата);
		Если УчетПродукцииЕГАИС Тогда
			ИнтеграцияЕГАИСРТ.ПроверитьЗаполнениеДокумента(ТекущийЧек, Отказ);
		КонецЕсли;
		
		// ИСМП.
		Если ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции() Тогда
			ИнтеграцияИСРТ.ПроверитьЗаполнениеАкцизныхМарок(ТекущийЧек, Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Форма.ЧекККМВОбработке = ЧекККМ;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьСкладПродажи(ТекущийЧек, Отказ, ТекстОшибки);
	Если Отказ Тогда
		Форма.ЧекККМВОбработке = ЧекККМ;
		Возврат;
	КонецЕсли;
	
	Попытка
		ТекущийЧек.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Отказ = Истина; 
		ИнформацияОбОшибке = ИнформацияОбОшибке(); 
		ТекстОшибки = ИнформацияОбОшибке.Причина.Описание + " " + НСтр("ru = 'Подробнее в журнале регистрации.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Запись документа ЧекККМ перед пробитием на ККТ.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, ТекущийЧек,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	Если Не Отказ Тогда
		
		Попытка
			ТекущийЧек.Записать(РежимЗаписи());
			Форма.ЧекККМВОбработке = ТекущийЧек.Ссылка;
		Исключение
			Отказ = Истина; 
			ИнформацияОбОшибке = ИнформацияОбОшибке(); 
			ТекстОшибки = ИнформацияОбОшибке.Причина.Описание + " " + НСтр("ru = 'Подробнее в журнале регистрации.'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Запись документа ЧекККМ перед пробитием на ККТ.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, ТекущийЧек,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
		
		Если Отказ Тогда 
			
			Попытка
				ТекущийЧек.Записать(РежимЗаписиДокумента.Запись);
				Форма.ЧекККМВОбработке = ТекущийЧек.Ссылка;
			Исключение
				Отказ = Истина; 
				ИнформацияОбОшибке = ИнформацияОбОшибке(); 
				ТекстОшибки = ИнформацияОбОшибке.Причина.Описание + " " + НСтр("ru = 'Подробнее в журнале регистрации.'", ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Запись документа ЧекККМ перед пробитием на ККТ.'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка, ТекущийЧек,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет данные для пробития на ККТ.
//
// Параметры:
//  ЧекККМВОбработке - ОпределяемыйТип.ЧекККМРМК - ссылка на документ печать, которого производится.
//  ДополнительныеПараметры - Структура:
//   *ЕстьПродукцияЕГАИС - Булево - признак наличия маркируемой алкогольной продукции.
//   *ПечататьБумажныйЧек - Булево - признак нужно печатать чек на ККТ или отправлять в эл.виде.
//   *СистемаНалогообложения - ОпределяемыеТипы.ТипыСистемНалогообложенияККТРМК - СНО ККТ для текущего чека.
//   *СворачиватьСтрокиПриПечатиЧека - Булево - признак нужно ли сворачивать маркируемые товары в чеке.
//   *ОсобенностиУчетаВозвращаемойМаркируемойПродукции - Список - значения особенностей учета товаров из чека,
//     по которым осуществляется возврат без марки.
//  ОбщиеПараметры - Массив - см.ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека().
//
Процедура ПодготовитьДанныеДляПробитияЧека(ЧекККМВОбработке, ДополнительныеПараметры, ОбщиеПараметры) Экспорт
	
	ЕстьПродукцияЕГАИС = ДополнительныеПараметры.ЕстьПродукцияЕГАИС;
	ПечататьБумажныйЧек = ДополнительныеПараметры.ПечататьБумажныйЧек;
	СистемаНалогообложения = ДополнительныеПараметры.СистемаНалогообложения;
	СворачиватьСтрокиПриПечатиЧека = ДополнительныеПараметры.СворачиватьСтрокиПриПечатиЧека;
	ОсобенностиУчетаВозвращаемойМаркируемойПродукции =
		ДополнительныеПараметры.ОсобенностиУчетаВозвращаемойМаркируемойПродукции;
	РабочееМестоКассира = ДополнительныеПараметры.РабочееМестоКассира;
	ВариантЗаполненияМестаРасчетов = ДополнительныеПараметры.ВариантЗаполненияМестаРасчетов;
	ВариантЗаполненияКассира = ДополнительныеПараметры.ВариантЗаполненияКассира;
	
	
	СтруктураДанных = РозничныеПродажиКлиентСервер.СтруктураДанныхДляПробитияЧека();
	СтруктураДанных.ЧекККМСсылка = ЧекККМВОбработке;
	СтруктураДанных.НеПечататьБумажныйЧек = НЕ ПечататьБумажныйЧек;
	СтруктураДанных.ЕстьАлкогольнаяПродукцияЕГАИС = ЕстьПродукцияЕГАИС;
	СтруктураДанных.ЭтоВозвратПродукцииИСМПБезМарки =
		ОсобенностиУчетаВозвращаемойМаркируемойПродукции.Количество() > 0;
	СтруктураДанных.РабочееМестоКассира = РабочееМестоКассира;
	СтруктураДанных.ВариантЗаполненияМестаРасчетов = ВариантЗаполненияМестаРасчетов;
	СтруктураДанных.ВариантЗаполненияКассира = ВариантЗаполненияКассира;
	
	Если ТипЗнч(ЧекККМВОбработке) = Тип("ДокументСсылка.ЧекКоррекции") Тогда
		ИдентификаторУстройстваВЧекеКоррекции = Неопределено;
		ОбщиеПараметры = Документы.ЧекКоррекции.ПодготовитьДанныеДляПробитияЧека(ЧекККМВОбработке, ИдентификаторУстройстваВЧекеКоррекции);
		
		Если ОбщиеПараметры.Свойство("ШаблонЧека") Тогда
			ОбщиеПараметры.Удалить("ШаблонЧека");
		КонецЕсли;
		
		ОбщиеПараметры.Вставить("ИдентификаторФискальнойЗаписи", XMLСтрока(ЧекККМВОбработке));
		ОбщиеПараметры.Вставить("СформироватьЧекКоррекцииСторно", Ложь);
		Если СворачиватьСтрокиПриПечатиЧека Тогда
			СвернутьСтрокиПриПечатиЧека(ОбщиеПараметры);
		КонецЕсли;
		Возврат;
		
	Иначе
		ОбщиеПараметры = РозничныеПродажиСервер.ПодготовитьДанныеДляПробитияЧека(СтруктураДанных);
	КонецЕсли;
	
	ЕстьПродукцияЕГАИС = СтруктураДанных.ЕстьАлкогольнаяПродукцияЕГАИС;
	ДополнительныеПараметры.ЕстьПродукцияЕГАИС = ЕстьПродукцияЕГАИС;
	
	Если СворачиватьСтрокиПриПечатиЧека Тогда
		СвернутьСтрокиПриПечатиЧека(ОбщиеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает ЧекККМ после пробития на ККИ.
//
// Параметры:
//  ВходящиеДанные - Структура - данные о результате пробития чека на ККТ.
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//
Процедура ПробитьЧекЗавершение(ВходящиеДанные, Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ВходящиеДанные.Свойство("Результат") Тогда
		
		//Чек в состоянии "Фискализируется".
		Если ВходящиеДанные.Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		//Чек в состоянии "Ошибка".
		Если Не ВходящиеДанные.Результат Тогда
		
			Если Не ВходящиеДанные.ЧекККМСсылка = Неопределено Тогда
				ЧекККМОбъект = ВходящиеДанные.ЧекККМСсылка.ПолучитьОбъект();
				
				ДокументЗаблокирован = Ложь;
				Попытка
					ЧекККМОбъект.Заблокировать();
					ЧекККМОбъект.Оплата.Очистить();
					ДокументЗаблокирован = Истина;
				Исключение
					ТекстОшибки = НСтр("ru = 'Ошибка блокировки документа.'", ОбщегоНазначения.КодОсновногоЯзыка());
					ЗаписьЖурналаРегистрации(ТекстОшибки,
						УровеньЖурналаРегистрации.Ошибка,,
						ЧекККМОбъект,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				
				Если ДокументЗаблокирован Тогда
					ЧекККМОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				КонецЕсли;
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ВходящиеДанные.ЧекККМСсылка) = Тип("ДокументСсылка.ЧекКоррекции") Тогда
		
		ЧекККМСсылка = ВходящиеДанные.ЧекККМСсылка;
		ЭтоЧекНаВозврат = ЧекККМСсылка.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств;
		ОтборПоВидуОперации = Новый Структура("Возврат", ЭтоЧекНаВозврат);
		
		Если Форма.ОжидаемоеКоличествоЧеков > 0 Тогда
			
			УспешноПробитыйЧек = Форма.ПробитыеЧеки.Добавить();
			УспешноПробитыйЧек.ЧекККМ = ВходящиеДанные.ЧекККМСсылка;
			УспешноПробитыйЧек.СистемаНалогообложения = ЧекККМСсылка.СистемаНалогообложения;
			УспешноПробитыйЧек.Организация = ЧекККМСсылка.Организация;
			УспешноПробитыйЧек.Возврат = ЭтоЧекНаВозврат;
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ЧекККМОбъект = ВходящиеДанные.ЧекККМСсылка.ПолучитьОбъект();
	
	Если ЧекККМОбъект.Товары.Количество() > 0 Тогда
		
		Если Форма.ЭтоЗаменаТоваров Тогда
		
			ЭтоЧекНаВозврат = ЧекККМОбъект.ВидОперации = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.ВидыОперацийЧекККМ.Возврат");
			ОтборПоВидуОперации = Новый Структура("Возврат", ЭтоЧекНаВозврат);
			
			СистемаНалогообложенияПродажи = ЧекККМОбъект.СистемаНалогообложения;
			
			Если Форма.ПробитыеЧеки.НайтиСтроки(ОтборПоВидуОперации).Количество() = 0
				И Форма.ОжидаемоеКоличествоЧеков > 0 Тогда
				
				УспешноПробитыйЧек = Форма.ПробитыеЧеки.Добавить();
				УспешноПробитыйЧек.ЧекККМ = ВходящиеДанные.ЧекККМСсылка;
				УспешноПробитыйЧек.СистемаНалогообложения = СистемаНалогообложенияПродажи;
				УспешноПробитыйЧек.Возврат = ЭтоЧекНаВозврат;
				УспешноПробитыйЧек.Организация = ЧекККМОбъект.Организация;
				
			КонецЕсли;
			
		Иначе
			ОплатыКРаспределению = Объект.Оплата.Выгрузить();
			
			Для каждого СтрокаОплатыЧека Из ЧекККМОбъект.Оплата Цикл
				
				ОтборПоВидуОплаты = Новый Структура("ВидОплаты",СтрокаОплатыЧека.ВидОплаты);
				СтрокиОплатыКРаспределению = ОплатыКРаспределению.НайтиСтроки(ОтборПоВидуОплаты);
				
				Если СтрокиОплатыКРаспределению.Количество() > 0 Тогда
					СтрокиОплатыКРаспределению[0].Сумма = СтрокиОплатыКРаспределению[0].Сумма - СтрокаОплатыЧека.Сумма;
				КонецЕсли;
				
			КонецЦикла;
			
			Объект.Оплата.Загрузить(ОплатыКРаспределению);
			
			СистемаНалогообложенияПродажи = ЧекККМОбъект.СистемаНалогообложения;
			
			ОтборПоСистемеНалогообложения = Новый Структура("СистемаНалогообложения", СистемаНалогообложенияПродажи);
			
			Если Форма.ПробитыеЧеки.НайтиСтроки(ОтборПоСистемеНалогообложения).Количество() = 0
				И Форма.ОжидаемоеКоличествоЧеков > 0 Тогда
				
				УспешноПробитыйЧек = Форма.ПробитыеЧеки.Добавить();
				УспешноПробитыйЧек.ЧекККМ = ВходящиеДанные.ЧекККМСсылка;
				УспешноПробитыйЧек.СистемаНалогообложения = СистемаНалогообложенияПродажи;
				УспешноПробитыйЧек.Организация = ЧекККМОбъект.Организация;
				УспешноПробитыйЧек.СуммаЧека = Форма.СуммаИтого;
				УспешноПробитыйЧек.ПринятоНаличными = Форма.СуммаОплаченоНал;
				УспешноПробитыйЧек.Сдача = Форма.Сдача;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура настраивает динамический список для получения списка чеков для возврата.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы выбора чеков.
//
Процедура ЗаполнитьТаблицуЧековККМНаВозврат(Форма) Экспорт
	
	НастроитьЗапросСписокЧеков(Форма);
	
	СтатусыЧеков = Новый Массив;
	СтатусыЧеков.Добавить(Перечисления.СтатусыЧековККМ.Архивный);
	СтатусыЧеков.Добавить(Перечисления.СтатусыЧековККМ.Пробитый);
	
	ВидыОперацииПродажа = Перечисления.ВидыОперацийЧекККМ.Продажа;
	
	ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(
		Форма.ТаблицаЧековККМ,
		"Статус",
		СтатусыЧеков,
		ВидСравненияКомпоновкиДанных.ВСписке);
		
	ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(
		Форма.ТаблицаЧековККМ,
		"ВидОперации",
		ВидыОперацииПродажа,
		ВидСравненияКомпоновкиДанных.Равно);
	
КонецПроцедуры

// Процедура настраивает динамический список для получения списка отложенных чеков.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы выбора чеков.
//
Процедура ЗаполнитьТаблицуОтложенныхЧековККМ(Форма) Экспорт
	
	НастроитьЗапросСписокЧеков(Форма);
	
	СтатусыЧеков = Новый Массив;
	СтатусыЧеков.Добавить(Перечисления.СтатусыЧековККМ.Отложенный);
	СтатусыЧеков.Добавить(Перечисления.СтатусыЧековККМ.ПустаяСсылка());
	
	ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(
		Форма.ТаблицаЧековККМ,
		"Статус",
		СтатусыЧеков,
		ВидСравненияКомпоновкиДанных.ВСписке);
	
КонецПроцедуры

// Процедура настраивает динамический список для получения списка чеков для повторной печати.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы выбора чеков.
//
Процедура ЗаполнитьТаблицуЧековККМДляПовторнойПечати(Форма) Экспорт
	
	НастроитьЗапросСписокЧеков(Форма);
	
	СтатусыЧеков = Новый Массив;
	СтатусыЧеков.Добавить(Перечисления.СтатусыЧековККМ.Архивный);
	СтатусыЧеков.Добавить(Перечисления.СтатусыЧековККМ.Пробитый);
	
	ВидыОперацийЧеков = Новый Массив;
	ВидыОперацийЧеков.Добавить(Перечисления.ВидыОперацийЧекККМ.Продажа);
	ВидыОперацийЧеков.Добавить(Перечисления.ВидыОперацийЧекККМ.Возврат);
	
	ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(
		Форма.ТаблицаЧековККМ,
		"Статус",
		СтатусыЧеков,
		ВидСравненияКомпоновкиДанных.ВСписке);
	
	ОтборыСписковКлиентСервер.УстановитьЭлементОтбораСписка(
		Форма.ТаблицаЧековККМ,
		"ВидОперации",
		ВидыОперацийЧеков,
		ВидСравненияКомпоновкиДанных.ВСписке);
		
КонецПроцедуры

// Процедура архивирует чеки при закрытии смены. При необходимости удаляет чеки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//  Параметры - Структура - параметры для анализа закрытия смены.
//
Процедура ЗаархивироватьЧекиККМ(Форма, Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(Форма.РабочееМесто) Тогда
		
		Параметры.ТекстОшибки = НСтр("ru = 'Ошибка определения рабочего места.
			|Обратитесь к администратору системы.'");
		Параметры.Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	СформироватьЗапросЧековККМДляЗакрытияСмены(Запрос, Форма);
	
	ТаблицаЧеков = Запрос.Выполнить().Выгрузить();
	
	//Архивация чеков ККМ.
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.ЧекККМ");
	ЭлементБлокировки.ИсточникДанных = ТаблицаЧеков;
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	Блокировка.Заблокировать();
	
	Попытка
		
		Для Каждого ТекущийЧек Из ТаблицаЧеков Цикл
			
			ДокументОбъект = ТекущийЧек.Ссылка.ПолучитьОбъект();
			ДокументОбъект.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Архивный;
			ДокументОбъект.КассоваяСмена = Форма.КассоваяСмена;
			ДокументОбъект.Записать(РежимЗаписи());
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Параметры.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось заархивировать чеки. %1'"),
			ОписаниеОшибки());
		Параметры.Отказ = Истина;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при архивации документов ""Чек ККМ"".'"),
			УровеньЖурналаРегистрации.Ошибка,,,Параметры.ТекстОшибки);
			
		Возврат;
		
	КонецПопытки;
	
	Если Не УдалятьЧекиПриЗакрытииСмены() Тогда
		Возврат;
	КонецЕсли;
	
	//Удаление отложенных и прочих чеков за текущую кассовую смену.
	Запрос = Новый Запрос;
	СформироватьЗапросЧековККМДляУдаления(Запрос, Форма);
	
	ТаблицаЧековДляУдаления = Запрос.Выполнить().Выгрузить();
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.ЧекККМ");
	ЭлементБлокировки.ИсточникДанных = ТаблицаЧековДляУдаления;
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	Блокировка.Заблокировать();
	
	Попытка
		
		Для Каждого ЧекДляУдаления Из ТаблицаЧековДляУдаления Цикл
			
			ЧекДляУдаления = ЧекДляУдаления.Ссылка.ПолучитьОбъект();
			Если ЧекДляУдаления.Проведен Тогда
				ЧекДляУдаления.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
			ЧекДляУдаления.Удалить();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Параметры.ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось удалить чеки. %1'"),ОписаниеОшибки());
		Параметры.Отказ = Истина;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при попытке удалить документ ""Чек ККМ"".'"),
			УровеньЖурналаРегистрации.Ошибка,,,Параметры.ТекстОшибки);
			
	КонецПопытки;
	
КонецПроцедуры

// Процедура заполняет доступные права для текущего пользователя.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//
Процедура ЗаполнитьТаблицуРолейПользователя(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	Форма.СписокРолейПользователя.Очистить();
	
	ТекущийПользователь = Объект.ПользовательБД;
	
	ЕстьПравоРучнаяСкидка = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
		ПланыВидовХарактеристик.ПраваПользователей.РазрешитьНазначениеРучныхСкидок,
		Ложь,
		ТекущийПользователь);
	Если ЕстьПравоРучнаяСкидка Тогда
		Форма.СписокРолейПользователя.Добавить("ПравоРучнаяСкидкаРМК");
	КонецЕсли;
	
	ЕстьПравоУдалитьСтроку = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
		ПланыВидовХарактеристик.ПраваПользователей.РазрешитьСторнированиеТовара,
		Ложь,
		ТекущийПользователь);
	Если ЕстьПравоУдалитьСтроку Тогда
		Форма.СписокРолейПользователя.Добавить("ПравоУдалитьСтрокуРМК");
	КонецЕсли;
	
	ЕстьПравоЧекНаВозврат = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
		ПланыВидовХарактеристик.ПраваПользователей.РазрешитьЧекВозврата,
		Ложь,
		ТекущийПользователь);
	Если ЕстьПравоЧекНаВозврат Тогда
		Форма.СписокРолейПользователя.Добавить("ПравоЧекНаВозвратРМК");
		Форма.СписокРолейПользователя.Добавить("ПравоПросмотраОстаткаНаличныхРМК");
	КонецЕсли;
	
	ЕстьПравоУдалитьЧек = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
		ПланыВидовХарактеристик.ПраваПользователей.РазрешитьРедактироватьНабранныйЧек,
		Ложь,
		ТекущийПользователь);
	Если ЕстьПравоУдалитьЧек Тогда
		Форма.СписокРолейПользователя.Добавить("ПравоУдалитьЧекРМК");
	КонецЕсли;
	
	ЕстьПравоИзменитьЦену = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
		ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену,
		Ложь,
		ТекущийПользователь);
	Если ЕстьПравоИзменитьЦену Тогда
		Форма.СписокРолейПользователя.Добавить("ПравоИзменятьЦенуРМК");
	КонецЕсли;
	
	ЕстьПравоОтложитьЧек = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
		ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОтложенныеЧеки,
		Ложь,
		ТекущийПользователь);
	Если ЕстьПравоОтложитьЧек Тогда
		Форма.СписокРолейПользователя.Добавить("ПравоОтложитьЧекРМК");
		Форма.СписокРолейПользователя.Добавить("ПравоПродолжитьЧекРМК");
	КонецЕсли;
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеЧековКоррекции", ТекущийПользователь) Тогда
		Форма.СписокРолейПользователя.Добавить("ПравоЧекКоррекцииРМК");
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет данные на форме РМК на освновании выбранного чека.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//  ЧекККМ - ДокументСсылка.ЧекККМ - выбранный чек ККМ.
//  ДополнительныеПараметры - Структура - структура дополнительных параметров для заполнения чека
//     *ПереноситьКодыМаркировки - Булево - признак необходимости заполнить коды маркировки из чека
//
Процедура ЗаполнитьНаОснованииЧекаККМ(Форма, ЧекККМ, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПереноситьКодыМаркировки = Ложь;
	Если (Не ДополнительныеПараметры = Неопределено) И ДополнительныеПараметры.Свойство("ПереноситьКодыМаркировки") Тогда
		ПереноситьКодыМаркировки = ДополнительныеПараметры.ПереноситьКодыМаркировки;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;

	Форма.ЧекККМПродажа = ЧекККМ.Ссылка;
	
	ЧекПродажиНаАванс = ЧекККМ.ОперацияСДенежнымиСредствами И ЧекККМ.Товары.Количество() = 0;
	ЧекПредоплаты = ЧекККМ.ОперацияСДенежнымиСредствами И ЧекККМ.Товары.Количество() > 0;
	
	ЭтоВозвратПредоплаты = Ложь;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат И ЧекПредоплаты Тогда
		ЭтоВозвратПредоплаты = Истина;
	КонецЕсли;
	
	ЭтоВозвратАванса = Ложь;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат И ЧекПродажиНаАванс Тогда
		ЭтоВозвратАванса = Истина;
	КонецЕсли;
	Форма.ЭтоВозвратАванса = ЭтоВозвратАванса;
	
	СписокСвойств = "Товары, Оплата, ВидОперации";
	Если ЗначениеЗаполнено(Объект.ДокументРасчета) Тогда
		СписокСвойств = СписокСвойств + ", ДокументРасчета";
	КонецЕсли;
	Если ЗначениеЗаполнено(ЧекККМ) Тогда
		КассаККМЧека = ЧекККМ.КассаККМ;
		Если НЕ Форма.ТаблицаКассККМОрганизаций.НайтиСтроки(Новый Структура("КассаККМ", КассаККМЧека)).Количество() Тогда
			СписокСвойств = СписокСвойств + ", КассаККМ";
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Объект, ЧекККМ,,СписокСвойств);
	
	Если ЧекПродажиНаАванс И Не ЗначениеЗаполнено(Объект.ДокументРасчета) Тогда
		
		Форма.ПриемАванса = Истина;
		
		НоваяСтрокаТовары = Объект.Товары.Добавить();
		НоваяСтрокаТовары.ПредставлениеНоменклатураХарактеристика = НСтр("ru = 'Аванс'");
		НоваяСтрокаТовары.ПредставлениеЕдиницыИзмерения = НСтр("ru = 'шт'");
		НоваяСтрокаТовары.Количество = 1;
		НоваяСтрокаТовары.КоличествоУпаковок = 1;
		НоваяСтрокаТовары.СистемаНалогообложения = ЧекККМ.СистемаНалогообложения;
		НоваяСтрокаТовары.Организация = ЧекККМ.Организация;
		НоваяСтрокаТовары.Цена = ЧекККМ.СуммаДокумента;
		НоваяСтрокаТовары.Сумма = ЧекККМ.СуммаДокумента;
		НоваяСтрокаТовары.СуммаБезСкидки = ЧекККМ.СуммаДокумента;
		
	Иначе
		ЗаполнитьТабличныеЧастиИзЧекККМ(ЧекККМ, Форма, ПереноситьКодыМаркировки, ДополнительныеПараметры);
	КонецЕсли;
	
	Если Форма.ЭтоЗачетАванса Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоВозвратАванса ИЛИ ЭтоВозвратПредоплаты Тогда
		Объект.ДокументРасчета = ЧекККМ;
	КонецЕсли;
	
	Форма.СуммаОплаченоНал = 0;
	Форма.СуммаОплаченоБН = 0;
	Объект.Оплата.Очистить();
	ВидОплатыКартой = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.ПустаяСсылка");
	
	Для Каждого СтрокаОплатыЧекККМ Из ЧекККМ.Оплата Цикл
		
		НоваяСтрокаОплата = Объект.Оплата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаОплата, СтрокаОплатыЧекККМ);
		
		Если СтрокаОплатыЧекККМ.ВидОплаты = Справочники.ВидыОплатЧекаККМ.Наличные Тогда
			Форма.СуммаОплаченоНал = Форма.СуммаОплаченоНал + СтрокаОплатыЧекККМ.Сумма;
		ИначеЕсли СтрокаОплатыЧекККМ.ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта Тогда
			
			Форма.СуммаОплаченоБН = Форма.СуммаОплаченоБН + СтрокаОплатыЧекККМ.Сумма;
			ВидОплатыКартой = СтрокаОплатыЧекККМ.ВидОплаты;
			НоваяОплатаКартой = Форма.ТаблицаОплатКартой.Добавить();
			НоваяОплатаКартой.СистемаНалогообложения = Форма.ВыбраннаяСистемаНалогообложения;
			НоваяОплатаКартой.Организация = ЧекККМ.Организация;
			НоваяОплатаКартой.Сумма = СтрокаОплатыЧекККМ.Сумма; 
			НоваяОплатаКартой.ВидОплаты = ВидОплатыКартой; 
			НоваяОплатаКартой.Оплачено = Истина;
			Если ЗначениеЗаполнено(СтрокаОплатыЧекККМ.ЭквайринговыйТерминал) Тогда
				Форма.ЭквайринговыйТерминалВыполненияОперации = СтрокаОплатыЧекККМ.ЭквайринговыйТерминал;
			КонецЕсли;
			
		ИначеЕсли СтрокаОплатыЧекККМ.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом Тогда
			
		Иначеесли СтрокаОплатыЧекККМ.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаВрассрочку Тогда
			Форма.СуммаОплаченоВРассрочку = Форма.СуммаОплаченоВРассрочку + СтрокаОплатыЧекККМ.Сумма;
			
		ИначеЕсли СтрокаОплатыЧекККМ.ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.БанковскийКредит Тогда
			
			Форма.СуммаОплаченоКредитом = Форма.СуммаОплаченоКредитом + СтрокаОплатыЧекККМ.Сумма;
			Форма.ПараметрыОплатыКредитом = Новый Структура("Сумма, ВидОплатыКредитом",
				Форма.СуммаОплаченоКредитом, СтрокаОплатыЧекККМ.ВидОплаты);
			
		КонецЕсли;
		
	КонецЦикла;

	Если ЗначениеЗаполнено(ВидОплатыКартой) Тогда
		
		СтруктураПоиска = Новый Структура("ВидОплаты", ВидОплатыКартой);
		МассивВидовОплат = Форма.ТаблицаПлатежныхКарт.НайтиСтроки(СтруктураПоиска);
		Если МассивВидовОплат.Количество() > 0 Тогда
			Форма.ВыбранныйВидОплаты = МассивВидовОплат[0].ИмяКоманды;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет данные на форме РМК на освновании выбранного отложенного чека.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//  ОтложенныйЧек - ДокументСсылка.ЧекККМ - выбранный отложенный чек ККМ.
//  ДополнительныеИсходящиеДанные - Структура - дополнительные данные, связанные с товароми чека.
//
Процедура ЗаполнитьДанныеИзОтложенногоЧека(Форма, ОтложенныйЧек, ДополнительныеИсходящиеДанные = Неопределено) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	Форма.КомментарийКЧеку = ОтложенныйЧек.Комментарий;
	
	СписокСвойств = "Товары, Оплата";
	ЗаполнитьЗначенияСвойств(Объект, ОтложенныйЧек,,СписокСвойств);
	
	ЗаполнитьТабличныеЧастиИзЧекККМ(ОтложенныйЧек, Форма, Истина, ДополнительныеИсходящиеДанные);
	
	СкладПродажи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТорговыйОбъект, "СкладПродажи");
	ТекущаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	Для Каждого НоваяСтрокаТовары Из Объект.Товары цикл
		
		ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьОрганизациюПродажи(НоваяСтрокаТовары, Форма);
		Если НЕ ЗначениеЗаполнено(НоваяСтрокаТовары.Организация) Тогда
			НоваяСтрокаТовары.Организация = Форма.ОсновнаяОрганизация;
		Иначе
			
			ОтборПоОрганизации = Новый Структура("Организация", НоваяСтрокаТовары.Организация);
			КассыККМПоОрганизации = Форма.ТаблицаКассККМОрганизаций.НайтиСтроки(ОтборПоОрганизации);
			Если КассыККМПоОрганизации.Количество() = 0 Тогда
				НоваяСтрокаТовары.Организация = Форма.ОсновнаяОрганизация;
			КонецЕсли;
			
		КонецЕсли;
		
		ТоварнаяГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрокаТовары.Номенклатура, "ТоварнаяГруппа");
		НоваяСтрокаТовары.СистемаНалогообложения = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложения(
			ТекущаяДата,
			НоваяСтрокаТовары.Организация,
			Объект.ТорговыйОбъект,
			СкладПродажи,
			ТоварнаяГруппа);
			
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.ДокументРасчета)
		И ТипЗнч(Объект.ДокументРасчета) = Тип("ДокументСсылка.РегистрацияБезналичнойОплаты") Тогда
		
		Форма.ВыбранБанковскийПлатеж = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет данные на форме РМК о номенклатуре.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//
Процедура ДополнитьСведенияОТоварах(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Упаковка КАК Упаковка,
	|	ТаблицаТовары.Серия КАК Серия
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	СпрНоменклатура.Наименование КАК НаименованиеНоменклатуры,
	|	СпрНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СпрНоменклатура.ОсобенностьУчета КАК ОсобенностьУчета,
	|	СпрХарактеристикиНоменклатуры.Наименование КАК НаименованиеХарактеристики,
	|	Товары.Характеристика КАК Характеристика,
	|	СпрНоменклатура.Наименование + ВЫБОР
	|		КОГДА НЕ Товары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА "" ("" + ЕСТЬNULL(СпрХарактеристикиНоменклатуры.Наименование, """") + "")""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПредставлениеНоменклатураХарактеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.Серия КАК Серия,
	|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьСерии, ЛОЖЬ)
	|		ИЛИ СпрНоменклатура.ИспользоватьСерийныеНомера КАК ПроверятьЗаполнениеСерий,
	|	СпрНоменклатура.ИспользоватьСерийныеНомера
	|		ИЛИ (ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьСерии, ЛОЖЬ) И ЕСТЬNULL(ВидыНоменклатуры.НастройкаИспользованияСерий, ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)) КАК УникальностьСерии,
	|	СпрНоменклатура.КодТРУ КАК КодТРУ,
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.КодТРУ = """"
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВозможнаОплатаЭС,
	|	ВЫБОР
	|		КОГДА &ПроверкаВводаДробногоКоличества
	|			ТОГДА НЕ СпрНоменклатура.РазрешитьВводДробногоКоличества
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗапретитьВводДробногоКоличества,
	|	СпрНоменклатура.Код КАК Код,
	|	СпрНоменклатура.Артикул КАК Артикул
	|ПОМЕСТИТЬ ПредставлениеТовара
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|			ПО СпрНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|		ПО Товары.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристикиНоменклатуры
	|		ПО Товары.Характеристика = СпрХарактеристикиНоменклатуры.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПредставлениеТовара.Номенклатура КАК Номенклатура,
	|	ПредставлениеТовара.Характеристика КАК Характеристика,
	|	ПредставлениеТовара.Серия КАК Серия,
	|	ПредставлениеТовара.Упаковка КАК Упаковка,
	|	ПредставлениеТовара.ОсобенностьУчета КАК ОсобенностьУчета,
	|	ПредставлениеТовара.ПредставлениеНоменклатураХарактеристика КАК ПредставлениеНоменклатураХарактеристика,
	|	ПредставлениеТовара.ПроверятьЗаполнениеСерий КАК ПроверятьЗаполнениеСерий,
	|	ПредставлениеТовара.УникальностьСерии КАК УникальностьСерии,
	|	ВЫБОР
	|		КОГДА ПредставлениеТовара.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ЕдиницыИзмерения.Наименование, """")
	|		ИНАЧЕ ЕСТЬNULL(Упаковки.Наименование, """")
	|	КОНЕЦ КАК ПредставлениеЕдиницыИзмерения,
	|	ПредставлениеТовара.КодТРУ КАК КодТРУ,
	|	ПредставлениеТовара.ВозможнаОплатаЭС КАК ВозможнаОплатаЭС,
	|	ПредставлениеТовара.ЗапретитьВводДробногоКоличества КАК ЗапретитьВводДробногоКоличества,
	|	ПредставлениеТовара.Код КАК Код,
	|	ПредставлениеТовара.Артикул КАК Артикул
	|ИЗ
	|	ПредставлениеТовара КАК ПредставлениеТовара
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БазовыеЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО ПредставлениеТовара.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК Упаковки
	|		ПО ПредставлениеТовара.Упаковка = Упаковки.Ссылка");
	
	ПроверкаВводаДробногоКоличества = ПолучитьФункциональнуюОпцию("ИспользоватьПроверкуНаВводДробногоКоличества");
	Запрос.УстановитьПараметр("ПроверкаВводаДробногоКоличества", ПроверкаВводаДробногоКоличества);
	Запрос.УстановитьПараметр("ТаблицаТовары", Объект.Товары.Выгрузить());
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из Объект.Товары Цикл
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Номенклатура", Строка.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", Строка.Характеристика);
		СтруктураПоиска.Вставить("Серия", Строка.Серия);
		СтруктураПоиска.Вставить("Упаковка", Строка.Упаковка);
		
		МассивСтрок = ТаблицаРезультат.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрок.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Строка, МассивСтрок[0]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет является ли вид оплаты безналичной формой оплаты.
//
//Параметры:
//  ВидОплаты - СправочникСсылка.ВидыОплат - вид оплаты.
//
// ВозвращаемоеЗначение:
//  Булево - Истина, если переданный вид оплаты является безналичной формой оплаты.
//
Функция ЭтоОплатаПлатежнойКартой(ВидОплаты) Экспорт
	
	Возврат ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта;
	
КонецФункции

// Определяет систему налогообложения чека ККМ.
//
// Параметры:
//  ЧекККМ - ОпределяемыйТип.ЧекККМРМК - чек ККМ, для которого нужно определить систему налогообложения.
//  СНО - ОпределяемыйТип.ТипыСистемНалогообложенияККТРМК - система налогообложения.
//
Процедура ЗаполнитьСНОЧекаККМ(ЧекККМ, СНО) Экспорт
	
	СНО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЧекККМ, "СистемаНалогообложения");
	
КонецПроцедуры

// Процедура устанавливает статус чека.
//
// Параметры:
//  ЧекККМ - ДокументОбъект.ЧекККМ - чек ККМ для смены статуса.
//  Статус - Строка - статус, который необходимо установить. Если пустая строка, то очистить статус.
//
Процедура УстановитьСтатусЧека(ЧекККМ, Статус) Экспорт
	
	Если Статус = "" Тогда
		ЧекККМ.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает вид оплаты платежной картой при продаже
//
// Параметры:
//  ЧекПродажи - ДокументСсылка.ЧекККМ - чек ККМ продажи.
//
// ВозвращаемоеЗначение:
//  ВидОплаты - СправочникСсылка.ВидыОплат - вид оплаты платежной карты, который был учтен при продаже.
//
Функция ВидОплатыПриПродаже(ЧекПродажи) Экспорт
	
	ВидОплаты = Неопределено;
	Для Каждого СтрокаОплаты Из ЧекПродажи.Оплата Цикл
		Если СтрокаОплаты.ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта Тогда
			ВидОплаты = СтрокаОплаты.ВидОплаты;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ВидОплаты) Тогда
		Для Каждого СтрокаОплаты Из ЧекПродажи.Оплата Цикл
			Если СтрокаОплаты.ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяСистема Тогда
				ВидОплаты = СтрокаОплаты.ВидОплаты;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ВидОплаты;
	
КонецФункции

// Процедура заполняет массив серий, исключая серии, которые уже присутствуют в РМК.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - товар, для которого необходимо заполнить серии.
//  МассивСерий - Массив - массив, в который необходимо добавить найденные серии.
//  ИсключаяСерии - Массив - массив, в котором содержаться серии, которые уже присутствуют в РМК и их нужно исключить.
//
Процедура ЗаполнитьСписокВыбораСерийНоменклатуры(Номенклатура, Характеристика, МассивСерий, ИсключаяСерии) Экспорт
	
	МассивДобавленныхСерий = Новый Массив;
	Для Каждого СтрокаМассива Из ИсключаяСерии Цикл
		Если ЗначениеЗаполнено(СтрокаМассива) Тогда
			МассивДобавленныхСерий.Добавить(СтрокаМассива);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СерииНоменклатуры.Ссылка КАК Серия
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.ВладелецСерии = &Номенклатура
	|	И НЕ СерииНоменклатуры.ПометкаУдаления
	|	И НЕ СерииНоменклатуры.Ссылка В (&МассивСерий)
	|	И ВЫБОР
	|			КОГДА СерииНоменклатуры.ГоденДо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СерииНоменклатуры.ГоденДо > &ТекущаяДата
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СерииНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.ВладелецСерии = &ВидНоменклатуры
	|	И НЕ СерииНоменклатуры.ПометкаУдаления
	|	И НЕ СерииНоменклатуры.Ссылка В (&МассивСерий)
	|	И ВЫБОР
	|			КОГДА СерииНоменклатуры.ГоденДо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СерииНоменклатуры.ГоденДо > &ТекущаяДата
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СерийныеНомера.Ссылка
	|ИЗ
	|	Справочник.СерийныеНомера КАК СерийныеНомера
	|ГДЕ
	|	СерийныеНомера.Владелец = &Номенклатура
	|	И НЕ СерийныеНомера.ПометкаУдаления");
	
	ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры");
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	Запрос.УстановитьПараметр("МассивСерий", МассивДобавленныхСерий);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивСерий.Добавить(Выборка.Серия);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет шаблон чека в параметры перед пробитием чека на ККТ.
//
// Параметры:
//  ЧекККМ - ДокументСсылка.ЧекККМ - ссылка на чек, который будет пробит.
//  ОбщиеПараметры - Структура - см. МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека().
//  ТекущаяНастройкаРМК - СправочникСсылка.НастройкиРабочегоМестаКассира - текущая настройка рабочего места кассира.
//
Процедура ЗаполнитьШаблонЧека(ЧекККМ, ОбщиеПараметры, ТекущаяНастройкаРМК) Экспорт
	
	
	
КонецПроцедуры

// Определяет возможность внесения денег.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ.
//  Организация - СправочникСсылка.Организации.
//
// Возвращаемое значение:
//  Булево - Ложь, если документы для внесения отсутствуют.
//
Функция ВозможностьВнесенияДенег(КассаККМ, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваКПоступлениюНаличныеОстатки.ДокументПередачи КАК Документ,
	|	ДенежныеСредстваКПоступлениюНаличныеОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ДенежныеСредстваКПоступлениюНаличныеОстатки.Организация КАК Организация,
	|	ДенежныеСредстваКПоступлениюНаличныеОстатки.Касса КАК Касса
	|ПОМЕСТИТЬ ТаблицаДокументовСОстатками
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКПоступлениюНаличные.Остатки(
	|			,
	|			Касса = &КассаККМ
	|				И Организация = &Организация) КАК ДенежныеСредстваКПоступлениюНаличныеОстатки
	|ГДЕ
	|	ДенежныеСредстваКПоступлениюНаличныеОстатки.СуммаОстаток > 0
	|	И ДенежныеСредстваКПоступлениюНаличныеОстатки.ДокументПередачи ССЫЛКА Документ.РасходныйКассовыйОрдер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка КАК РасходныйКассовыйОрдер,
	|	РасходныйКассовыйОрдер.Номер КАК Номер,
	|	РасходныйКассовыйОрдер.Дата КАК Дата,
	|	ТаблицаДокументовСОстатками.СуммаОстаток КАК СуммаОстаток,
	|	ТаблицаДокументовСОстатками.Организация КАК Организация,
	|	ТаблицаДокументовСОстатками.Касса КАК Касса
	|ИЗ
	|	ТаблицаДокументовСОстатками КАК ТаблицаДокументовСОстатками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ПО ТаблицаДокументовСОстатками.Документ = РасходныйКассовыйОрдер.Ссылка";
	
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

// Процедура изменяет запрос, если при пробитии чеков необходимо сворачивать строки.
//
// Параметры:
//  ТекстЗапроса - Строка - Текст запрос.
//
Процедура ПереопределитьЗапросДляСворачиванияСтрок(ТекстЗапроса) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура очищает значение параметра "ОтложенныйЧек", если у него пустой статус.
//
// Параметры:
//  ОтложенныйЧек - ОпределяемыйТип.ЧекККМРМК - ссылка на отложенный чек.
//
Процедура ОчиститьОтложенныйЧек(ОтложенныйЧек) Экспорт
	
	Если ЗначениеЗаполнено(ОтложенныйЧек)
		И ТипЗнч(ОтложенныйЧек) = Тип("ДокументОбъект.ЧекККМ")
		И ОтложенныйЧек.СтатусЧекаККМ.Пустая() Тогда
		
		ОтложенныйЧек = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Заполнение данных из выбранного документа заказ покупателя.
//
// Параметры:
//  Заказ - Структура, ДокументСсылка - выбранный документ заказ покупателя;
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира;
//  Отказ - Булево - флаг ошибки при выполнении;
//  ОписаниеОшибки - Строка - описание ошибки выполнения.
//  ДополнительныеИсходящиеДанные - Структура - дополнительные данные, связанные с товарами заказа.
//
Процедура ЗаполнитьПоЗаказу(Заказ, Форма, Отказ = Ложь, ОписаниеОшибки = "",
		ДополнительныеИсходящиеДанные = Неопределено) Экспорт
	
	ЗаказПокупателя = Заказ;
	Если Не ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Заказ, "ЗаказПокупателя")
			И ЗначениеЗаполнено(Заказ.ЗаказПокупателя) Тогда
			ЗаказПокупателя = Заказ.ЗаказПокупателя;
		Иначе
			Отказ = Истина;
			ОписаниеОшибки = НСтр("ru='Не выбран заказ покупателя'");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ИННЗаполненУКонтрагента(ЗаказПокупателя.Контрагент) Тогда
		Отказ = Истина;
		ОписаниеОшибки = НСтр("ru='У контрагента с правовым статусом ""Юридическое лицо"" не заполнен ИНН.'");
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Объект.ЗаказПокупателя = ЗаказПокупателя;
	
	ЗаполнитьЗначенияСвойств(Объект, ЗаказПокупателя,, "КассаККМ, Товары");
	Форма.ВыбраннаяСистемаНалогообложения = Форма.СистемаНалогообложенияОрганизацииПоУмолчанию;
	Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;
	
	Объект.Товары.Очистить();
	
	СкладПродажи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТорговыйОбъект, "СкладПродажи");
	ТекущаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
	ТаблицаТоваровЗаказа = ДанныеПоТоварамЗаказаПокупателя(ЗаказПокупателя, ДополнительныеИсходящиеДанные);
	
	Для Каждого СтрокаЗаказа Из ТаблицаТоваровЗаказа Цикл
		
		Если (СтрокаЗаказа.НеобходимостьВводаКодаМаркировки И Не СтрокаЗаказа.ПоштучноеВыбытие)
			Или (СтрокаЗаказа.НеобходимостьВводаСерии И СтрокаЗаказа.УникальностьСерии) Тогда
			
			Для НомерСтроки = 1 По СтрокаЗаказа.Количество Цикл
				
				НоваяСтрокаТовары = Объект.Товары.Добавить();
				НоваяСтрокаТовары.Количество = 1;
				НоваяСтрокаТовары.КоличествоУпаковок = 1;
				
				ИсключаяСвойства = "Количество, КоличествоУпаковок";
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаЗаказа, , ИсключаяСвойства);
				
				НоваяСтрокаТовары.СуммаАвтоматическойСкидки = Окр(НоваяСтрокаТовары.КоличествоУпаковок *
					НоваяСтрокаТовары.Цена * НоваяСтрокаТовары.ПроцентАвтоматическойСкидки / 100, 2);
				НоваяСтрокаТовары.СуммаСкидкиНаценки = Окр(НоваяСтрокаТовары.КоличествоУпаковок *
					НоваяСтрокаТовары.Цена * НоваяСтрокаТовары.ПроцентСкидкиНаценки / 100, 2);
				НоваяСтрокаТовары.Сумма = НоваяСтрокаТовары.КоличествоУпаковок * НоваяСтрокаТовары.Цена -
					НоваяСтрокаТовары.СуммаАвтоматическойСкидки - НоваяСтрокаТовары.СуммаСкидкиНаценки;
				НоваяСтрокаТовары.СуммаБезСкидки = НоваяСтрокаТовары.КоличествоУпаковок * НоваяСтрокаТовары.Цена;
				
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
					ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
				
				КэшированныеЗначения = Новый Структура;
				ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(НоваяСтрокаТовары, СтруктураДействий, КэшированныеЗначения);
				
				НоваяСтрокаТовары.Организация = Объект.Организация;
				ТоварнаяГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрокаТовары.Номенклатура, "ТоварнаяГруппа");
				НоваяСтрокаТовары.СистемаНалогообложения = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложения(
					ТекущаяДата,
					Объект.Организация,
					Объект.ТорговыйОбъект,
					СкладПродажи,
					ТоварнаяГруппа);
					
			КонецЦикла;
			
		Иначе
			
			НоваяСтрокаТовары = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаЗаказа);
			НоваяСтрокаТовары.Организация = Объект.Организация;
			ТоварнаяГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрокаТовары.Номенклатура, "ТоварнаяГруппа");
			НоваяСтрокаТовары.СистемаНалогообложения = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложения(
				ТекущаяДата,
				Объект.Организация,
				Объект.ТорговыйОбъект,
				СкладПродажи,
				ТоварнаяГруппа);
				
		КонецЕсли;
		
	КонецЦикла;
	
	// Кэшированые значения скидок наценок
	ОбщегоНазначенияРМК.ЗагрузитьВТаблицуЗначений(ЗаказПокупателя.СкидкиНаценки, Форма.ТаблицаСкидкиНаценки, Истина);
	Для Каждого СтрокаБонусов Из ЗаказПокупателя.БонусныеБаллыКНачислению Цикл
		НоваяСтрока = Форма.ТаблицаБонусныеБаллы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаБонусов);
		НоваяСтрока.БонуснаяПрограмма = СтрокаБонусов.БонуснаяПрограммаЛояльности;
		
		НоваяСтрока = Форма.ТаблицаБонусныеБаллыЧекаПродажи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаБонусов);
		НоваяСтрока.БонуснаяПрограмма = СтрокаБонусов.БонуснаяПрограммаЛояльности;
	КонецЦикла;
	
	РасчитатьСуммуСкидокВСтроках(Объект.Товары);
	
КонецПроцедуры

// Заполнение данных из выбранного документа безналичной оплаты.
//
// Параметры:
//  ДанныеВыбора - Структура - данные выбранного документа безналичной оплаты.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ДополнительныеИсходящиеДанные - Структура - дополнительные данные, связанные с товарами заказа.
//
Процедура ЗаполнитьПоДокументуБезналичнойОплаты(ДанныеВыбора, Форма,
		ДополнительныеИсходящиеДанные = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	
	Если Не ДанныеВыбора.Свойство("ДокументРасчета") Тогда
		Возврат;
	КонецЕсли;
	Если Не ДанныеВыбора.Свойство("ЗаказПокупателя") Тогда
		Возврат;
	КонецЕсли;
	Если Не ДанныеВыбора.Свойство("Сумма") И Не ДанныеВыбора.Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	Если Не ДанныеВыбора.Свойство("Контрагент") Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ОписаниеОшибки = "";
	
	ЗаполнитьПоЗаказу(ДанныеВыбора.ЗаказПокупателя, Форма, Отказ, ОписаниеОшибки, ДополнительныеИсходящиеДанные);
	
	Если НЕ Отказ Тогда
		Объект.Контрагент = ДанныеВыбора.Контрагент;
		Объект.ДокументРасчета = ДанныеВыбора.ДокументРасчета;
		
		Объект.Оплата.Очистить();
		
		НоваяСтрокаОплаты = Объект.Оплата.Добавить();
		НоваяСтрокаОплаты.ВидОплаты = Справочники.ВидыОплатЧекаККМ.БанковскийПлатеж;
		НоваяСтрокаОплаты.Сумма = ДанныеВыбора.Сумма;
		
		НастроитьЭлементыФормыПриБезналичнойОплате(Форма, ДанныеВыбора.Сумма);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает признак формы по одноименному значению функциональной опции.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы.
//  ИспользоватьБонусныеПрограммы - булево - признак использования бонусных программ.
//
Процедура УстановитьПризнакФормеПоДаннымФункциональнойОпции(Форма, ИмяФункциональнойОпции) Экспорт
	
	Если ИмяФункциональнойОпции = "ИспользоватьСерверЛояльностиПолучательДанных" Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (Метаданные.ФункциональныеОпции.Найти(ИмяФункциональнойОпции) = Неопределено)
			И РеквизитФормыСуществует(Форма,ИмяФункциональнойОпции) Тогда
				Форма[ИмяФункциональнойОпции] = ПолучитьФункциональнуюОпцию(ИмяФункциональнойОпции);
	КонецЕсли;
	
КонецПроцедуры

// Процедура производит дополнительные действия для настройки работы с оплатой по карте.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы.
//
Процедура НастроитьОплатуПлатежнымиКартами(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ТипРеквизита = Новый Массив;
	ТипРеквизита.Добавить(Тип("Строка"));
	ОписаниеТиповДляРеквизита = Новый ОписаниеТипов(ТипРеквизита);
	НовыйРеквизит = Новый РеквизитФормы("ВыбранныйВидОплаты", ОписаниеТиповДляРеквизита);
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	ТипРеквизита = Новый Массив;
	ТипРеквизита.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповДляРеквизита = Новый ОписаниеТипов(ТипРеквизита);
	НовыйРеквизит = Новый РеквизитФормы("ТаблицаПлатежныхКарт", ОписаниеТиповДляРеквизита);
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("ВидОплаты", Новый ОписаниеТипов("СправочникСсылка.ВидыОплатЧекаККМ"), "ТаблицаПлатежныхКарт");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("ИмяКоманды", Новый ОписаниеТипов("Строка"), "ТаблицаПлатежныхКарт");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыОплатЧекаККМ.Наименование КАК Наименование,
	|	ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.ВидОплаты КАК ВидОплаты
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы.ТарифыЗаРасчетноеОбслуживание КАК ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
	|		ПО ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.ВидОплаты = ВидыОплатЧекаККМ.Ссылка
	|ГДЕ
	|	НЕ ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.Ссылка.ПометкаУдаления
	|	И ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.Ссылка.Касса В (&КассыККМ)
	|	И ЭквайринговыеТерминалыТарифыЗаРасчетноеОбслуживание.Ссылка.Магазин = &Магазин";
	
	МассивКассККМ = Форма.ТаблицаКассККМОрганизаций.Выгрузить().ВыгрузитьКолонку("КассаККМ");

	Запрос.УстановитьПараметр("КассыККМ", МассивКассККМ);
	Запрос.УстановитьПараметр("Магазин", Объект.ТорговыйОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	НужноСоздаватьПодменюКарта = Выборка.Количество() > 1;
	Итератор = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НазваниеКоманды = СтрШаблон("ОплатаКартой_%1", Итератор);
		
		НоваяСтрокаТаблицыПлатКарт = Форма.ТаблицаПлатежныхКарт.Добавить();
		НоваяСтрокаТаблицыПлатКарт.ИмяКоманды = НазваниеКоманды;
		НоваяСтрокаТаблицыПлатКарт.ВидОплаты = Выборка.ВидОплаты;
		
		Итератор = Итератор + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Находит по магнитному коду карту лояльности и заполняет её данные.
//
// Параметры:
//  МагнитныйКод - Строка - код, по которому выполняется поиск.
//  ДанныеКарты - Структура - см.ШтрихкодированиеРМК.ДанныеКартыЛояльности().
//
Процедура ЗаполнитьДанныеКартыЛояльности(МагнитныйКод, ДанныеКарты) Экспорт
	
	НеизвестныеДанныеПО = Истина;
	НайденоОбъектов = 0;
	СтруктураПараметров = ПодключаемоеОборудованиеРТ.СтруктураДанныхПоиска();
	
	Если ШтрихкодированиеРТКлиентСервер.ТелефонКорректен(МагнитныйКод) Тогда
		
		НомерТелефона = ШтрихкодированиеРТКлиентСервер.ПодготовитьТелефон(МагнитныйКод);
		ПолныйНомер = НСтр("ru = '7'") + НомерТелефона;
		
		ШтрихкодированиеРТ.НайтиДисконтнуюКарту(Неопределено, СтруктураПараметров, ПолныйНомер, "НомерТелефона", НеизвестныеДанныеПО, НайденоОбъектов);
		
	ИначеЕсли ШтрихкодированиеРТКлиентСервер.ЕмаилКорректен(МагнитныйКод) Тогда
		
		ШтрихкодированиеРТ.НайтиДисконтнуюКарту(Неопределено, СтруктураПараметров, МагнитныйКод, "Email", НеизвестныеДанныеПО, НайденоОбъектов);
		
	Иначе
		
		ШтрихкодированиеРТ.НайтиДисконтнуюКарту(Неопределено, СтруктураПараметров, МагнитныйКод, "КодКарты", НеизвестныеДанныеПО, НайденоОбъектов);
		
	КонецЕсли;
	
	Если СтруктураПараметров.ЗначенияПоиска.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыНайденнойКарты = СтруктураПараметров.ЗначенияПоиска[0];
	
	ДанныеКарты.КартаЛояльности = ПараметрыНайденнойКарты.Карта;
	ДанныеКарты.Контрагент = ПараметрыНайденнойКарты.ВладелецКарты;
	ДанныеКарты.КодКарты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыНайденнойКарты.Карта, "КодКарты");
	ДанныеКарты.АдресЭПВладельцаКарты = ПараметрыНайденнойКарты.АдресЭП;
	ДанныеКарты.НомерТелефонаВладельцаКарты = ПараметрыНайденнойКарты.НомерТелефона;
	Если ТипЗнч(ПараметрыНайденнойКарты.ВладелецКарты) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ДанныеКарты.ДатаРождения = ПараметрыНайденнойКарты.ВладелецКарты.ДатаРождения;
	ИначеЕсли ТипЗнч(ПараметрыНайденнойКарты.ВладелецКарты) = Тип("СправочникСсылка.Контрагенты") Тогда
		ФизЛицоКонтрагента = ПараметрыНайденнойКарты.ВладелецКарты.ФизЛицо;
		Если ЗначениеЗаполнено(ФизЛицоКонтрагента) Тогда
			ДанныеКарты.ДатаРождения = ФизЛицоКонтрагента.ДатаРождения;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыНайденнойКарты.ВладелецКарты)
		И ТипЗнч(ПараметрыНайденнойКарты.ВладелецКарты) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛица.Наименование КАК ФИО,
		|	ФизическиеЛица.ДатаРождения КАК ДатаРождения
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО Контрагенты.ФизЛицо = ФизическиеЛица.Ссылка
		|ГДЕ
		|	Контрагенты.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ПараметрыНайденнойКарты.ВладелецКарты);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ДанныеКарты, Выборка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура производит обработку выбранного документа расчета.
//
// Параметры:
//  ПараметрыВыбора - Структура - данные выбранного документа расчета.
//  Форма - ФормаКлиентскогоПриложения - данные формы.
//  ДополнительныеИсходящиеДанные - Структура - дополнительные данные, связанные с товарами документа.
//
Процедура ОбработатьВыборДокументаРасчета(ПараметрыВыбора, Форма, ДополнительныеИсходящиеДанные = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	
	Форма.ЭтоЗачетАванса = ПараметрыВыбора.ЭтоЗачетАванса;
	Форма.ЭтоОплатаРассрочки = ПараметрыВыбора.ЭтоОплатаРассрочки;
	
	Объект.ДокументРасчета = ПараметрыВыбора.ДокументРасчета;
	Объект.Контрагент = ПараметрыВыбора.Контрагент;
	Если Не Объект.ЗаказПокупателя = ПараметрыВыбора.ЗаказПокупателя Тогда
		Объект.ЗаказПокупателя = ПараметрыВыбора.ЗаказПокупателя;
		Если ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
			Объект.ЗаказПокупателя = ПараметрыВыбора.ЗаказПокупателя;
			ЗаполнитьПоЗаказу(ПараметрыВыбора.ЗаказПокупателя, Форма, , , ДополнительныеИсходящиеДанные);
			ЕстьТоварыВДокументеРасчета = Объект.Товары.Количество() > 0;
			Если ПараметрыВыбора.ЭтоОплатаРассрочки И Не ЕстьТоварыВДокументеРасчета Тогда
				ЗаполнитьНаОснованииЧекаККМ(Форма, Объект.ДокументРасчета, ДополнительныеИсходящиеДанные);
				Объект.ОперацияСДенежнымиСредствами = Истина;
			КонецЕсли;
			Форма.ТаблицаДокументовРасчета.Очистить();
			Для Каждого ДокументРасчета Из ПараметрыВыбора.МассивДокументовРасчета Цикл
				НоваяСтрока = Форма.ТаблицаДокументовРасчета.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДокументРасчета);
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект.ДокументРасчета) = Тип("ДокументСсылка.ЧекККМ") Тогда
		ЗаполнитьНаОснованииЧекаККМ(Форма, Объект.ДокументРасчета, ДополнительныеИсходящиеДанные);
		Объект.ОперацияСДенежнымиСредствами = НЕ Объект.ОперацияСДенежнымиСредствами;
		ЕстьТоварыВДокументеРасчета = Объект.Товары.Количество() > 0;
	КонецЕсли;
	
	Если ПараметрыВыбора.МассивДокументовРасчета.Количество() > 1 Тогда
		Форма.СуммаОстаткаДокументаРасчета = 0;
		Для Каждого ДокументРасчета Из ПараметрыВыбора.МассивДокументовРасчета Цикл
			Форма.СуммаОстаткаДокументаРасчета = Форма.СуммаОстаткаДокументаРасчета + ДокументРасчета.Сумма;
		КонецЦикла;
	Иначе
		Форма.СуммаОстаткаДокументаРасчета = ПараметрыВыбора.Сумма;
	КонецЕсли;
	
	Если Форма.ЭтоЗачетАванса И Объект.Товары.Количество() = 0 Тогда
		
		ЗаполнитьСНОЧекаККМ(Объект.ДокументРасчета, Форма.ВыбраннаяСистемаНалогообложения);
		Форма.ВыбраннаяОрганизация = Объект.ДокументРасчета.Организация;
		
		Отбор = Новый Структура("Организация", Форма.ВыбраннаяОрганизация);
		СтрокаКассы = Форма.ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
		
		Форма.ПодключаемоеОборудование = СтрокаКассы.ИдентификаторУстройства;
		Объект.Организация = СтрокаКассы.Организация;
		Объект.КассаККМ = СтрокаКассы.КассаККМ;
		Форма.КассоваяСмена = СтрокаКассы.КассоваяСмена;
		Форма.ККМПоддерживаетПроверкуКодовМаркировки = СтрокаКассы.ПоддерживаетПроверкуКодовМаркировки;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает цену на товар.
//
//Параметры:
//  Магазин - СправочникСсылка.Магазины - Магазин, для которого нужно получить цену.
//  ДанныеТовара - Структура - структура с параметрами товара, для которых нужно получить цену.
//
// ВозвращаемоеЗначение:
//  Цена - Число - актцальное значения цены.
//
Функция ЦенаПродажи(Магазин, ДанныеТовара) Экспорт
	
	Номенклатура = ДанныеТовара.Номенклатура;
	
	Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	Если ДанныеТовара.Свойство("Характеристика") Тогда
		Характеристика = ДанныеТовара.Характеристика;
	КонецЕсли;
	
	Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
	Если ДанныеТовара.Свойство("Упаковка") Тогда
		Упаковка = ДанныеТовара.Упаковка;
	КонецЕсли;
	
	Дата = ТекущаяДатаСеанса();
	
	Цена = ЗапасыСервер.ЦенаПродажи(Магазин, Дата, Номенклатура, Характеристика, Упаковка, Истина);
	
	Возврат Цена;
	
КонецФункции

// Дополняет данные выбора товара. Актуально для вызова формы подбора прикладной конфигурации в новом РМК.
//
// Параметры:
//  ДанныеВыбора - Структура - См. ОбщегоНазначенияРМКРТКлиент.ОсновныеПоляФормыВыбораТоваровРМК
//  Магазин - СправочникСсылка.Магазины - текущий магазин
//
Процедура ДополнитьДанныеВыбора(ДанныеВыбора, Магазин) Экспорт
	
	Если ЗначениеЗаполнено(Магазин) И ЗначениеЗаполнено(ДанныеВыбора) Тогда
		
		Цена = ЦенаПродажи(Магазин, ДанныеВыбора);
		ДанныеВыбора.Цена = Цена;
		
		Если ЗначениеЗаполнено(ДанныеВыбора.Номенклатура) Тогда
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
			|	Номенклатура.ОсобенностьУчета КАК ОсобенностьУчета
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Ссылка = &Номенклатура
			|	И НЕ Номенклатура.ПометкаУдаления
			|	И НЕ Номенклатура.ЭтоГруппа");
			Запрос.УстановитьПараметр("Номенклатура", ДанныеВыбора.Номенклатура);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(ДанныеВыбора, Выборка);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует структуру данных, которая затем будет выгружена в XML.
//
// Параметры:
//  СтруктураНастроек - Структура - структура, в которую нужно добавить настройки.
//  НастройкаРМК - СправочникСсылка.НастройкиРабочегоМестаКассира - текущая настройка РМК.
//
Процедура СформироватьСтруктуруНастроек(СтруктураНастроек, Знач НастройкаРМК) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиПорядокОбластей.ОбластьРодитель КАК ОбластьРодитель,
	|	НастройкиПорядокОбластей.Область КАК Область,
	|	НастройкиПорядокОбластей.Порядок КАК Порядок,
	|	НастройкиПорядокОбластей.ВертикальнаяОриентация КАК ВертикальнаяОриентация
	|ИЗ
	|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРМК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиРабочегоМестаКассира.ПорядокОбластей КАК НастройкиПорядокОбластей
	|		ПО НастройкиРМК.Ссылка = НастройкиПорядокОбластей.Ссылка
	|			И НастройкиРМК.ВертикальнаяОриентация = НастройкиПорядокОбластей.ВертикальнаяОриентация
	|ГДЕ
	|	НастройкиРМК.Ссылка = &НастройкаРМК
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИспользоватьСерверЛояльностиПолучательДанных.Значение КАК ИспользоватьСерверЛояльностиПолучательДанных,
	|	НастройкиРабочегоМестаКассира.МаксимальныйПроцентРучнойСкидки КАК НастройкаРМК_МаксимальныйПроцентРучнойСкидки,
	|	НастройкиРабочегоМестаКассира.ПечататьБумажныйЧек КАК НастройкаРМК_ПечататьБумажныйЧек,
	|	НастройкиРабочегоМестаКассира.ВидОтображения КАК НастройкаРМК_ВидОтображения,
	|	НастройкиРабочегоМестаКассира.ТочностьОкругления КАК НастройкаРМК_ТочностьОкругления,
	|	НастройкиРабочегоМестаКассира.ОкруглятьПриПроизвольномВидеОплаты КАК НастройкаРМК_ОкруглятьПриПроизвольномВидеОплаты,
	|	НастройкиРабочегоМестаКассира.ОкруглятьЧекВПользуПокупателяПострочно КАК НастройкаРМК_ОкруглятьЧекВПользуПокупателяПострочно,
	|	НастройкиРабочегоМестаКассира.АдресСервераЛояльности КАК НастройкаРМК_АдресСервераЛояльности,
	|	НастройкиРабочегоМестаКассира.ПользовательСервераЛояльности КАК НастройкаРМК_ПользовательСервераЛояльности,
	|	НастройкиРабочегоМестаКассира.ТаймаутСерверЛояльности КАК НастройкаРМК_ТаймаутСерверЛояльности,
	|	НастройкиРабочегоМестаКассира.ЗапретитьПробитиеЧекаБезРасчетаСкидок КАК НастройкаРМК_ЗапретитьПробитиеЧекаБезРасчетаСкидок,
	|	НастройкиРабочегоМестаКассира.СворачиватьСтрокиПриПечатиЧека КАК НастройкаРМК_СворачиватьСтрокиПриПечатиЧека,
	|	НастройкиРабочегоМестаКассира.Наименование КАК НастройкаРМК_Наименование,
	|	НастройкиРабочегоМестаКассира.ЗапрещеноРедактированиеУсловийОграниченийПродаж КАК НастройкаРМК_ЗапрещеноРедактированиеУсловийОграниченийПродаж,
	|	НастройкиРабочегоМестаКассира.ИспользоватьНовыйПодборТоваров КАК НастройкаРМК_ИспользоватьНовыйПодборТоваров,
	|	НастройкиРабочегоМестаКассира.ЗакрыватьПодборПриВыбореТовара КАК НастройкаРМК_ЗакрыватьПодборПриВыбореТовара,
	|	НастройкиРабочегоМестаКассира.ПоказыватьАртикулНоменклатуры КАК НастройкаРМК_ПоказыватьАртикулНоменклатуры,
	|	НастройкиРабочегоМестаКассира.ПоказыватьКодНоменклатуры КАК НастройкаРМК_ПоказыватьКодНоменклатуры,
	|	НастройкиРабочегоМестаКассира.ВертикальнаяОриентация КАК НастройкаРМК_ВертикальнаяОриентация,
	|	НастройкиРабочегоМестаКассира.ОтображатьНумерациюСтрок КАК НастройкаРМК_ОтображатьНумерациюСтрок,
	|	НастройкиРабочегоМестаКассира.ВопросПоРасчетуСкидок КАК НастройкаРМК_ВопросПоРасчетуСкидок,
	|	НастройкиРабочегоМестаКассира.ВремяНачалаСмены КАК НастройкаРМК_ВремяНачалаСмены,
	|	НастройкиРабочегоМестаКассира.ИспользоватьСтрокуБыстрогоДобавленияТовара КАК НастройкаРМК_ИспользоватьСтрокуБыстрогоДобавленияТовара,
	|	НастройкиРабочегоМестаКассира.ДобавлятьВсеТоварыОтдельнойСтрокой КАК НастройкаРМК_ДобавлятьВсеТоварыОтдельнойСтрокой,
	|	НастройкиРабочегоМестаКассира.ОставлятьПоследнийЧекНаЭкране КАК НастройкаРМК_ОставлятьПоследнийЧекНаЭкране,
	|	НастройкиРабочегоМестаКассира.ИспользоватьОплатуНаличными КАК НастройкаРМК_ИспользоватьОплатуНаличными,
	|	НастройкиРабочегоМестаКассира.ИспользоватьПанельВводаНаличныхКупюр КАК НастройкаРМК_ИспользоватьПанельВводаНаличныхКупюр,
	|	НастройкиРабочегоМестаКассира.РаботаВРежимеМедленногоСоединения КАК НастройкаРМК_РаботаВРежимеМедленногоСоединения,
	|	НастройкиРабочегоМестаКассира.ВводНаличныхАкселераторAlt КАК НастройкаРМК_ВводНаличныхАкселераторAlt,
	|	НастройкиРабочегоМестаКассира.ВводНаличныхАкселераторCtrl КАК НастройкаРМК_ВводНаличныхАкселераторCtrl,
	|	НастройкиРабочегоМестаКассира.ВводНаличныхАкселераторShift КАК НастройкаРМК_ВводНаличныхАкселераторShift,
	|	НастройкиРабочегоМестаКассира.ВестиЖурналДействийКассира КАК НастройкаРМК_ВестиЖурналДействийКассира,
	|	НастройкиРабочегоМестаКассира.СрокХраненияОперацийСЧеком КАК НастройкаРМК_СрокХраненияОперацийСЧеком,
	|	НастройкиРабочегоМестаКассира.НеПечататьКодВозвратаСБП КАК НастройкаРМК_НеПечататьКодВозвратаСБП,
	|	НастройкиРабочегоМестаКассира.НеПечататьКодВозвратаНСПК КАК НастройкаРМК_НеПечататьКодВозвратаНСПК,
	|	НастройкиРабочегоМестаКассира.ОбновлятьКоличествоПриПовторномПолученииВеса КАК НастройкаРМК_ОбновлятьКоличествоПриПовторномПолученииВеса
	|ИЗ
	|	Константа.ИспользоватьСерверЛояльностиПолучательДанных КАК ИспользоватьСерверЛояльностиПолучательДанных,
	|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
	|ГДЕ
	|	НастройкиРабочегоМестаКассира.Ссылка = &НастройкаРМК");
	
	Запрос.УстановитьПараметр("НастройкаРМК", НастройкаРМК.Ссылка);
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	РезультатЗапросаНастроек = ПакетРезультатов[1];
	Выборка = РезультатЗапросаНастроек.Выбрать();
	Выборка.Следующий();
	
	СтруктураНастроек = Новый Структура;
	Для Каждого КолонкаЗапроса Из РезультатЗапросаНастроек.Колонки Цикл
		СтруктураНастроек.Вставить(КолонкаЗапроса.Имя, Выборка[КолонкаЗапроса.Имя]);
	КонецЦикла;
	
	ТаблицаГорячиеКлавиши = НастройкаРМК.ГорячиеКлавиши.Выгрузить();
	ТаблицаГорячиеКлавиши.Колонки.Удалить("НомерСтроки");
	ТаблицаГорячиеКлавиши.Колонки.Удалить("ИсходныйНомерСтроки");
	СтруктураНастроек.Вставить("НастройкаРМК_ГорячиеКлавиши", ТаблицаГорячиеКлавиши);
	
	ТаблицаБыстрыеТовары = НастройкаРМК.БыстрыеТовары.Выгрузить(, "Номенклатура, Характеристика");
	СтруктураНастроек.Вставить("НастройкаРМК_БыстрыеТовары", ТаблицаБыстрыеТовары);
	
	ТаблицаПорядка = ПакетРезультатов[0].Выгрузить();
	СтруктураНастроек.Вставить("НастройкаРМК_ПорядокОбластей", ТаблицаПорядка);
	
КонецПроцедуры

// Процедура производит переопределение запроса для формирования списка продавцов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма выбора продавцов.
//
Процедура ПереопределитьЗапросДоступныхПродавцов(Форма) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК Продавец
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СубъектыДляСкрытияПерсональныхДанных КАК СубъектыДляСкрытияПерсональныхДанных
	|		ПО ФизическиеЛица.Ссылка = СубъектыДляСкрытияПерсональныхДанных.Субъект
	|			И (СубъектыДляСкрытияПерсональныхДанных.Состояние = &СостояниеСкрытиеВыполнено)
	|ГДЕ
	|	НЕ ФизическиеЛица.ПометкаУдаления
	|	И НЕ ФизическиеЛица.ЭтоГруппа
	|	И ФизическиеЛица.Сотрудник
	|	И СубъектыДляСкрытияПерсональныхДанных.Субъект ЕСТЬ NULL";
	
	Форма.СписокПродавцов.ТекстЗапроса = ТекстЗапроса;
	Форма.СписокПродавцов.Параметры.УстановитьЗначениеПараметра("СостояниеСкрытиеВыполнено",
		Перечисления.СостоянияСубъектовДляСкрытия.СкрытиеВыполнено);
	
КонецПроцедуры

// Заполняет ставку НДС для товара по данным системы налогообложения.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - данные текущего объекта.
//  ТекущаяСтрока - СтрокаТабличнойЧасти - текущая строка.
//  СНОПоУмолчанию - ОпределяемыйТип.ТипыСистемНалогообложенияККТРМК - СНО по умолчанию в РМК.
//  СтавкаНДС - ОпределяемыйТип.СтавкаНДСРМК - ставка НДС для заполнения.
//
Процедура ЗаполнитьСтавкуНДС(Объект, ТекущаяСтрока, СНОПоУмолчанию, СтавкаНДС) Экспорт
	
	СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	
	ПрименяетсяНДС = ТекущаяСтрока.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ОСН;
	
	Если ПрименяетсяНДС Тогда
		Дата = ТекущаяДатаСеанса();
		РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ТекущаяСтрока.Номенклатура,
			"ТоварнаяГруппа, СтавкаНДС");
		СтавкаНДС = УчетНДС.СкорректироватьСтавкуНДС(РеквизитыНоменклатуры.СтавкаНДС, Дата);
	КонецЕсли;
	
КонецПроцедуры

// Процедура записывает в базу штрихкод.
//
// Параметры:
//  ДанныеСтроки - Структура - данные для записи в регистр штрихкодов.
//
Процедура ЗаписатьШтрихкод(ДанныеСтроки) Экспорт
	
	Штрихкод = ДанныеСтроки.Штрихкод;
	Если НЕ ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		ИспользоватьХарактеристики = Ложь;
		ЗаполнитьИспользованиеХарактеристик(ИспользоватьХарактеристики);
		
		Штрихкод = ДанныеСтроки.Штрихкод;
		ТипШтрихкодаРТ = ПодключаемоеОборудованиеРТ.ТипШтрихкода(Штрихкод);
		
		НовыйШтрихкод = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
		НовыйШтрихкод.Владелец = ДанныеСтроки.Номенклатура;
		Если ИспользоватьХарактеристики Тогда
			НовыйШтрихкод.Характеристика = ДанныеСтроки.Характеристика;
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
			НовыйШтрихкод.Упаковка = ДанныеСтроки.Упаковка;
		КонецЕсли;
		
		НовыйШтрихкод.ТипШтрихкода = ТипШтрихкодаРТ;
		НовыйШтрихкод.Штрихкод = Штрихкод;
		НовыйШтрихкод.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка записи в регистр ""Штрихкоды"".'"),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение;
	
	КонецПопытки;

	
КонецПроцедуры

// Возвращает структуру дисконтной карты
//
// Параметры:
//  СтруктураРезультат - Структура - параметры создания карты лояльности.
//  Форма - ФормаКлиентскогоПриложения - данные формы.
//
Процедура СоздатьЛокальноКартуЛояльности(СтруктураРезультат, Форма) Экспорт
	
	ПараметрыКарты = Новый Структура;
	ПараметрыКарты.Вставить("ИдентификаторКартыКлиента", Форма.НоваяКартаНомер);
	ПараметрыКарты.Вставить("ГУИДВидаКарты", Форма.НоваяКартаВидКарты);
	ПараметрыКарты.Вставить("Контрагент", Форма.Объект.Контрагент);
	ПараметрыКарты.Вставить("НомерТелефона", Форма.НоваяКартаТелефон);
	ПараметрыКарты.Вставить("АдресЭП", Форма.НоваяКартаПочта);
	ПараметрыКарты.Вставить("Клиент", Форма.НоваяКартаФИО);
	ПараметрыКарты.Вставить("ДатаРождения",
		ИнтерфейсРМКСлужебныйКлиентСервер.ПреобразоватьДатуИзСтроковогоПредставления(Форма.НоваяКартаДатаРождения));
		
	КартаКлиента 	= Неопределено;
		СерверЛояльностиПоставщикДанныхПереопределяемый.НайтиКартуКлиента(ПараметрыКарты, КартаКлиента);
		
	Если ЗначениеЗаполнено(КартаКлиента) Тогда
		СтруктураРезультат.ТекстОшибки = НСтр("ru = 'Карта с текущими параметрами уже существует'");
		СтруктураРезультат.ЕстьОшибки = Истина;
		Если Не ЗначениеЗаполнено(ПараметрыКарты.Контрагент) Тогда
			ВывестиДанныеСуществующейКарты(Форма, КартаКлиента);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		КартаКлиента = Неопределено;
		ДругойКлиент = Неопределено;
		СерверЛояльностиПоставщикДанныхПереопределяемый.СоздатьКартуКлиента(ПараметрыКарты, КартаКлиента, ДругойКлиент);
		Если Не ЗначениеЗаполнено(КартаКлиента) Тогда
			Если ЗначениеЗаполнено(ДругойКлиент) Тогда
				СтруктураРезультат.ТекстОшибки = НСтр("ru = 'Клиент с текущим e-mail, но другим телефоном уже существует'");
				СтруктураРезультат.ЕстьОшибки  = Истина;
				Возврат;
			Иначе
				ВызватьИсключение НСтр("ru = 'Зафиксированы ошибки при создании карты, подробности в журнале регистрации.'");
			КонецЕсли;
		КонецЕсли;
		Форма.Объект.ДисконтнаяКарта = КартаКлиента;
		ДанныеКарты = ПолучитьДанныеКартыКлиента(КартаКлиента);
		Форма.Объект.Контрагент = ДанныеКарты.ВладелецКарты;
		Форма.НайденнаяКартаНомер = ДанныеКарты.НомерКарты;
		Форма.НайденнаяКартаФИО = ДанныеКарты.НаименованиеВладельца;
		ДатаРожденияСтрокой
		= ?(ЗначениеЗаполнено(ДанныеКарты.ДатаРождения), Формат(ДанныеКарты.ДатаРождения, "ДФ=dd.MM.yyyy"), "");
		Форма.НайденнаяКартаДатаРождения = ДатаРожденияСтрокой;
		МаскаТелефона = ИнтерфейсРМКСлужебныйКлиентСервер.МаскаВводаТелефона();
		Форма.НайденнаяКартаТелефон
			= ИнтерфейсРМКСлужебныйКлиентСервер.ПривестиЗначениеКМаскеТелефона(ДанныеКарты.НомерТелефона, МаскаТелефона);
		Форма.НайденнаяКартаПочта = ДанныеКарты.АдресЭП;
			
		СтруктураРезультат.ЕстьОшибки  = Ложь;
		ЗафиксироватьТранзакцию();
		ИнтерфейсРМКСлужебныйКлиентСервер.НастроитьДоступностьСозданияКарты(Форма, Ложь, Ложь);
	Исключение
		ОтменитьТранзакцию();
		Форма.Объект.ДисконтнаяКарта   = Справочники.ИнформационныеКарты.ПустаяСсылка();
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СтруктураРезультат.ЕстьОшибки  = Истина;
		СтруктураРезультат.ТекстОшибки
			= СтрШаблон(НСтр("ru = 'Не удалось создать карту по причине: %1'"), ПредставлениеОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Обновляет исходные данные запрета продаж с выведением статуса обновления.
//
// Параметры:
//  ИсходныеДанные - Структура - содержит десериализованные данные ответа из сервиса лояльности.
//  ДанныеОбновлены - Булево - Истина, если данные успешно обновлены.
//
Процедура АктуализироватьДанныеЗапрета(ИсходныеДанные, ДанныеОбновлены) Экспорт
	
	Если ЗначениеЗаполнено(ИсходныеДанные) Тогда
		
		БазовыеУсловияЗапрета = Новый ТаблицаЗначений;
		БазовыеУсловияЗапрета.Колонки.Добавить("ДатаНачалаДействия");
		БазовыеУсловияЗапрета.Колонки.Добавить("ДатаОкончанияДействия");
		БазовыеУсловияЗапрета.Колонки.Добавить("ИдентификаторЗапрета");
		БазовыеУсловияЗапрета.Колонки.Добавить("ИмяЗапрещающегоДокументаМастерСистемы");
		БазовыеУсловияЗапрета.Колонки.Добавить("Организация");
		
		ЗаполнитьЗначенияСвойств(БазовыеУсловияЗапрета.Добавить(), ИсходныеДанные);
		
		ИсходныеДниНеделиЗапрета = Новый ТаблицаЗначений;
		ИсходныеДниНеделиЗапрета.Колонки.Добавить("ДеньНедели");
		ИсходныеДниНеделиЗапрета.Колонки.Добавить("ВремяНачала");
		ИсходныеДниНеделиЗапрета.Колонки.Добавить("ВремяОкончания");
		
		Для каждого День Из ИсходныеДанные.ДниНедели Цикл
			ЗаполнитьЗначенияСвойств(ИсходныеДниНеделиЗапрета.Добавить(), День);
		КонецЦикла;
		
		ДополнительныеУсловияЗапрета = Новый ТаблицаЗначений;
		ДополнительныеУсловияЗапрета.Колонки.Добавить("ВидНоменклатуры");
		ДополнительныеУсловияЗапрета.Колонки.Добавить("ОсобенностьУчета");
		
		ИтоговаяТаблица = БазовыеУсловияЗапрета.СкопироватьКолонки();
		ИтоговаяТаблица.Колонки.Добавить("ДеньНедели");
		ИтоговаяТаблица.Колонки.Добавить("ВремяНачала");
		ИтоговаяТаблица.Колонки.Добавить("ВремяОкончания");
		ИтоговаяТаблица.Колонки.Добавить("ВидНоменклатуры");
		ИтоговаяТаблица.Колонки.Добавить("ОсобенностьУчета");
		
		Для каждого ДополнительноеУсловие Из ИсходныеДанные.ДополнительныеУсловия Цикл
			ЗаполнитьЗначенияСвойств(ДополнительныеУсловияЗапрета.Добавить(), ДополнительноеУсловие);
		КонецЦикла;
		
	#Область Сворачивание_строк_запретов
		
		// запреты, действующие все дни недели в одно и то же время сворачиваются в одну запись
		
		ДанныеДляСворачивания = ИсходныеДниНеделиЗапрета.Скопировать();
		ДанныеДляСворачивания.Колонки.Добавить("Счетчик");
		
		ДанныеДляПодсчета = Новый Массив;
		Для ш = 0 По ДанныеДляСворачивания.Количество() - 1 Цикл
			ДанныеДляПодсчета.Добавить(1);
		КонецЦикла;
		
		ДанныеДляСворачивания.ЗагрузитьКолонку(ДанныеДляПодсчета, "Счетчик");
		ДанныеДляСворачивания.Свернуть("ВремяНачала,ВремяОкончания", "Счетчик");
		
		// опорная таблица для сворачивания подневных запретов в недельный
		ДниНеделиЗапрета = ИсходныеДниНеделиЗапрета.СкопироватьКолонки();
		
		Для каждого СтрокаДанныхДляСворачивания Из ДанныеДляСворачивания Цикл
			
			// для недельных запретов дни пустые
			Если СтрокаДанныхДляСворачивания.Счетчик = 7 Тогда
				ЗаполнитьЗначенияСвойств(ДниНеделиЗапрета.Добавить(), СтрокаДанныхДляСворачивания);
			Иначе
				
				ОтборПоиска = Новый Структура("ВремяНачала,ВремяОкончания");
				ЗаполнитьЗначенияСвойств(ОтборПоиска, СтрокаДанныхДляСворачивания);
				РезультатПоиска = ИсходныеДниНеделиЗапрета.НайтиСтроки(ОтборПоиска);
				
				Если РезультатПоиска.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(ДниНеделиЗапрета.Добавить(), РезультатПоиска[0]);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	#КонецОбласти
		
		//исходные данные для записи в регистр запретов
		Для каждого ЧасыЗапрета Из ДниНеделиЗапрета Цикл
			
			Для каждого ДополнительноеУсловие Из ДополнительныеУсловияЗапрета Цикл
				
				Для каждого БазовоеУсловиеЗапрета Из БазовыеУсловияЗапрета Цикл
					
					ДанныеИтоговойТаблицы = ИтоговаяТаблица.Добавить();
					ЗаполнитьЗначенияСвойств(ДанныеИтоговойТаблицы, БазовоеУсловиеЗапрета);
					ЗаполнитьЗначенияСвойств(ДанныеИтоговойТаблицы, ДополнительноеУсловие);
					ЗаполнитьЗначенияСвойств(ДанныеИтоговойТаблицы, ЧасыЗапрета);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;

		// обновить данные:
		// - ранее выгруженные из мастер - системы
		// - с ключом записи, аналогичным полученному из мастер - системы
		// создать новые записи
		
		ИдентификаторЗапрета = БазовыеУсловияЗапрета[0].ИдентификаторЗапрета;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	УсловияЗапретаПродаж.Организация КАК Организация,
		|	УсловияЗапретаПродаж.ВидНоменклатуры КАК ВидНоменклатуры,
		|	УсловияЗапретаПродаж.ОсобенностьУчета КАК ОсобенностьУчета,
		|	УсловияЗапретаПродаж.ДеньНедели КАК ДеньНедели,
		|	УсловияЗапретаПродаж.ДатаНачалаДействия КАК ДатаНачалаДействия,
		|	УсловияЗапретаПродаж.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
		|	УсловияЗапретаПродаж.ВремяНачала КАК ВремяНачала,
		|	УсловияЗапретаПродаж.ВремяОкончания КАК ВремяОкончания
		|ИЗ
		|	РегистрСведений.УсловияЗапретаПродажРМК КАК УсловияЗапретаПродаж
		|ГДЕ
		|	УсловияЗапретаПродаж.ИдентификаторЗапрета = &ИдентификаторЗапрета");
		Запрос.УстановитьПараметр("ИдентификаторЗапрета", ИдентификаторЗапрета);
		
		ЗаписиЗапретов = Запрос.Выполнить().Выбрать();
		
		Пока ЗаписиЗапретов.Следующий() Цикл
		
			ЗаписьЗапрета = РегистрыСведений.УсловияЗапретаПродажРМК.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ЗаписьЗапрета, ЗаписиЗапретов);
			ЗаписьЗапрета.Удалить();
		
		КонецЦикла;
		
		Если ИтоговаяТаблица.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Для каждого НовыйЗапрет Из ИтоговаяТаблица Цикл
		
			ЗаписьНовогоЗапрета = РегистрыСведений.УсловияЗапретаПродажРМК.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ЗаписьНовогоЗапрета, НовыйЗапрет);
			ЗаписьНовогоЗапрета.Прочитать();
			
			Если НЕ ЗаписьНовогоЗапрета.Выбран() Тогда
				
				ЗаполнитьЗначенияСвойств(ЗаписьНовогоЗапрета, НовыйЗапрет);
				
				Попытка
					ЗаписьНовогоЗапрета.Записать();
				Исключение
					
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Не удалось записать данные запрета продаж'"),
						УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
					
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеОбновлены = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет текущий торговый объект, который далее используется в РМК.
//
// Параметры:
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК - текущий торговый объект РМК.
//
Процедура ОпределитьТекущийТорговыйОбъект(ТорговыйОбъект) Экспорт
	
	ТорговыйОбъект = ПараметрыСеанса.ТекущийМагазин;
	
КонецПроцедуры

// Заполняет адрес торгового объекта.
//
// Параметры:
//  АдресМагазина - Строка - адрес торгового объекта.
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК - торговый объект для получения адреса.
//
Процедура ЗаполнитьАдресТорговогоОбъекта(АдресМагазина, ТорговыйОбъект) Экспорт
	
	АдресМагазина = ОбщегоНазначенияРТ.АдресМагазина(ТорговыйОбъект);
	
КонецПроцедуры

// Проверяет наличие в документе "ЧекККМ" аклогольной продукции.
//
// Параметры:
//  ЧекККМ - ОпределяемыйТип.ЧекККМРМК - документ, в котором нужно проверить наличии алкогольной продукции.
//  Результат - Булево - Истина, если в документе есть алкогольная продукция.
//
Процедура ПроверитьНаличиеПродукцииЕГАИСВЧекККМ(ЧекККМ, Результат) Экспорт
	
	Результат = ИнтеграцияЕГАИСРТ.ЕстьАлкогольнаяПродукцияЕГАИС(ЧекККМ.Товары);
	
КонецПроцедуры

// Определяет значение основной организации из настройки РМК.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияРМК - значение основной организации.
//  НастройкаРМК - СправочникСсылка.НастройкиРабочегоМестаКассира - настройка РМК, по которой необходимо определить основную организацию.
//
Процедура ЗаполнитьОрганизациюИзНастройкиРМК(Организация, НастройкаРМК) Экспорт
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаРМК.ОсновнаяКассаККМ, "Владелец");
КонецПроцедуры

// Обновляет данные карты лояльности
//
// Параметры:
//	КартаЛояльности - СправочникСсылка.КартыЛояльности - карта, данные которой будут изменены
//	ДанныеДляИзменения - Структура
//		* НомерКартыДоИзменения - Строка - предыдущее значение номера карты лояльности
//		* МагнитныйКодКартыЛояльности - Строка - магнитный код карты лояльности
//		* НовыйEmailКлиента - Строка - новый email владельца карты
//		* НовыйНомерТелефонаКлиента - Строка - новый номер телефона владельца карты
//
Процедура СохранитьДанныеКартыЛояльности(КартаЛояльности, ДанныеДляИзменения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Заполняет реквизиты кассы ККМ.
//
// Параметры:
//  КассаККМ - ОпределяемыйТип.КассаККМРМК - Ссылка на кассу ККМ.
//  РабочееМесто - ОпределяемыйТип.РабочееМестоРМК, Неопределено - (необязательный) ссылка на рабочее место.
//  Реквизиты - Структура:
//    Организация - ОпределяемыйТип.ОрганизацияРМК.
//    ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК.
//    РабочееМесто - ОпределяемыйТип.РабочееМестоРМК.
//    КассаККМ - ОпределяемыйТип.КассаККМРМК.
//
Процедура ЗаполнитьРеквизитыКассыККМ(КассаККМ, РабочееМесто, Реквизиты) Экспорт
	
	Реквизиты = Справочники.КассыККМ.РеквизитыКассыККМ(КассаККМ);
	
КонецПроцедуры

// Процедура заполняет организацию продажи в строке.
//
// Параметры:
//  ДанныеСтроки - Структура - данные текущей строки.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЗаполнитьОрганизациюПродажи(ДанныеСтроки, Форма) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РаспределениеНоменклатуры.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА РаспределениеНоменклатуры.РабочееМесто = &РабочееМесто
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ПолеУпорядочивания
	|ИЗ
	|	РегистрСведений.РаспределениеНоменклатуры КАК РаспределениеНоменклатуры
	|ГДЕ
	|	РаспределениеНоменклатуры.Магазин = &Магазин
	|	И РаспределениеНоменклатуры.ТоварнаяГруппа = &ТоварнаяГруппа
	|	И (РаспределениеНоменклатуры.РабочееМесто = &РабочееМесто
	|			ИЛИ РаспределениеНоменклатуры.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка))";
	
	Магазин = Форма.Объект.ТорговыйОбъект;
	ТоварнаяГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.Номенклатура, "ТоварнаяГруппа");
	СкладПродажи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Магазин, "СкладПродажи");
	
	Запрос.УстановитьПараметр("Магазин", Форма.Объект.ТорговыйОбъект);
	Запрос.УстановитьПараметр("РабочееМесто", Форма.РабочееМесто);
	Запрос.УстановитьПараметр("ТоварнаяГруппа", ТоварнаяГруппа);
	Запрос.УстановитьПараметр("Склад", СкладПродажи);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДанныеСтроки.Организация = Выборка.Организация;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеСтроки.Организация) Тогда
		ДанныеСтроки.Организация = Форма.ОсновнаяОрганизация;
	КонецЕсли;
	
	ТекущаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
	СистемаНалогообложения = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложения(
		ТекущаяДата,
		ДанныеСтроки.Организация,
		Магазин,
		СкладПродажи,
		ТоварнаяГруппа); 
	
	Если ДанныеСтроки.Свойство("СистемаНалогообложения") Тогда
		ДанныеСтроки.СистемаНалогообложения = СистемаНалогообложения;
	КонецЕсли;
	
КонецПроцедуры

// Процедура производит поиск подарочного сертификата.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура НайтиСертификатЛокально(Форма) Экспорт
	
	ПодарочныйСертификат = Неопределено;
	СуммаСертификата = 0;
	
	НомерСертификата = Форма.НомерСертификата;
	ВыбранныйСертификат = Форма.ПодарочныйСертификат;
	УказанНомерСертификата = ЗначениеЗаполнено(НомерСертификата);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СерийныеНомера.Владелец КАК Номенклатура,
	|	СерийныеНомера.Ссылка КАК СерийныйНомер,
	|	NULL КАК Номинал
	|ИЗ
	|	Справочник.СерийныеНомера КАК СерийныеНомера
	|ГДЕ
	|	НЕ СерийныеНомера.ПометкаУдаления
	|	И СерийныеНомера.КодСерийногоНомера = &НомерСертификата
	|	И &УказанНомерСертификата = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СерийныеНомера.Владелец,
	|	СерийныеНомера.Ссылка,
	|	NULL
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерийныеНомера КАК СерийныеНомера
	|		ПО Штрихкоды.Владелец = СерийныеНомера.Ссылка
	|ГДЕ
	|	Штрихкоды.Штрихкод = &НомерСертификата
	|	И Штрихкоды.Владелец ССЫЛКА Справочник.СерийныеНомера
	|	И &УказанНомерСертификата = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка),
	|	Номенклатура.Номинал
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &ВыбранныйСертификат
	|	И &УказанНомерСертификата = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("НомерСертификата", НомерСертификата);
	Запрос.УстановитьПараметр("УказанНомерСертификата", УказанНомерСертификата);
	Запрос.УстановитьПараметр("ВыбранныйСертификат", ВыбранныйСертификат);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПодарочныйСертификат = Выборка.Номенклатура;
		СерийныйНомер = Выборка.СерийныйНомер;
	КонецЕсли;
	
	Если ПодарочныйСертификат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	СтруктураДанныхСертификата = РаботаСПодарочнымиСертификатами.ПолучитьСтруктуруДанныхСертификата(ПодарочныйСертификат,
		СерийныйНомер,, ТекущаяДатаСеанса);
	
	Если Не СтруктураДанныхСертификата.Статус = Справочники.АналитикаХозяйственныхОпераций.РеализацияТоваров Тогда
		СтруктураДанныхСертификата.Остаток = 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ПодарочныеСертификатыКСписаниюСерверЛояльности.КСписанию) КАК КСписанию,
		|	ПодарочныеСертификатыКСписаниюСерверЛояльности.ПодарочныйСертификат КАК ПодарочныйСертификат,
		|	ПодарочныеСертификатыКСписаниюСерверЛояльности.СерийныйНомер КАК СерийныйНомер
		|ПОМЕСТИТЬ ВТ_ПодарочныеСертификатыРезерв
		|ИЗ
		|	РегистрСведений.ПодарочныеСертификатыКСписаниюСерверЛояльности КАК ПодарочныеСертификатыКСписаниюСерверЛояльности
		|ГДЕ
		|	ПодарочныеСертификатыКСписаниюСерверЛояльности.ПодарочныйСертификат = &ПодарочныйСертификат
		|	И ПодарочныеСертификатыКСписаниюСерверЛояльности.СерийныйНомер = &СерийныйНомер
		|
		|СГРУППИРОВАТЬ ПО
		|	ПодарочныеСертификатыКСписаниюСерверЛояльности.ПодарочныйСертификат,
		|	ПодарочныеСертификатыКСписаниюСерверЛояльности.СерийныйНомер
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПодарочныйСертификат,
		|	СерийныйНомер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&ПодарочныйСертификат КАК ПодарочныйСертификат,
		|	&СерийныйНомер КАК НомерСертификата,
		|	&Номинал КАК Номинал,
		|	&Остаток КАК Остаток
		|ПОМЕСТИТЬ ВТ_ОстаткиСертификата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_ОстаткиСертификата.ПодарочныйСертификат КАК ПодарочныйСертификат,
		|	ВТ_ОстаткиСертификата.НомерСертификата КАК НомерСертификата,
		|	ВТ_ОстаткиСертификата.Номинал КАК Номинал,
		|	ВЫБОР
		|		КОГДА СостояниеПодарочныхСертификатов.ПодарочныйСертификат ЕСТЬ NULL
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(ВТ_ПодарочныеСертификатыРезерв.КСписанию, 0) > ВТ_ОстаткиСертификата.Остаток
		|						ТОГДА 0
		|					ИНАЧЕ ВТ_ОстаткиСертификата.Остаток - ЕСТЬNULL(ВТ_ПодарочныеСертификатыРезерв.КСписанию, 0)
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Остаток,
		|	ВЫБОР
		|		КОГДА СостояниеПодарочныхСертификатов.ПодарочныйСертификат ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Заблокирован
		|ИЗ
		|	ВТ_ОстаткиСертификата КАК ВТ_ОстаткиСертификата
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеПодарочныхСертификатовСерверЛояльности КАК СостояниеПодарочныхСертификатов
		|		ПО ВТ_ОстаткиСертификата.ПодарочныйСертификат = СостояниеПодарочныхСертификатов.ПодарочныйСертификат
		|			И ВТ_ОстаткиСертификата.НомерСертификата = СостояниеПодарочныхСертификатов.СерийныйНомер
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПодарочныеСертификатыРезерв КАК ВТ_ПодарочныеСертификатыРезерв
		|		ПО ВТ_ОстаткиСертификата.ПодарочныйСертификат = ВТ_ПодарочныеСертификатыРезерв.ПодарочныйСертификат
		|			И ВТ_ОстаткиСертификата.НомерСертификата = ВТ_ПодарочныеСертификатыРезерв.СерийныйНомер";
	
	Запрос.УстановитьПараметр("ДатаЗапроса"				, ТекущаяДатаСеанса);
	Запрос.УстановитьПараметр("ПодарочныйСертификат"	, ПодарочныйСертификат);
	Запрос.УстановитьПараметр("СерийныйНомер"			, СерийныйНомер);
	Запрос.УстановитьПараметр("Номинал"					, СтруктураДанныхСертификата.Номинал);
	Запрос.УстановитьПараметр("Остаток"					, СтруктураДанныхСертификата.Остаток);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если УказанНомерСертификата Тогда
			СуммаСертификата = Выборка.Остаток;
		Иначе
			СуммаСертификата = Выборка.Номинал;
		КонецЕсли;
	КонецЕсли;
	
	Форма.СуммаСертификата = СуммаСертификата;
	Форма.ПодарочныйСертификат = ПодарочныйСертификат;
	
КонецПроцедуры

// Процедура производит поиск бонусных баллов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура НайтиБонусыЛокально(Форма) Экспорт
	
	ДисконтнаяКарта = Форма.Объект.ДисконтнаяКарта;
	БонуснаяПрограмма = ДисконтнаяКарта.БонуснаяПрограммаЛояльности;
	ДанныеБонусов = СерверЛояльностиПоставщикДанныхРТ.ПолучитьБонусыКлиента(ДисконтнаяКарта);
	
	ТекущийОстаток = 0;
	СтруктураОтбора = Новый Структура("ТекущийОстаток", Истина);
	СтрокиТекущихОстатков = ДанныеБонусов.НайтиСтроки(СтруктураОтбора);
	Для Каждого СтрокаТекущегоОстатка Из СтрокиТекущихОстатков Цикл
		ТекущийОстаток = ТекущийОстаток + СтрокаТекущегоОстатка.Сумма;
	КонецЦикла;
	
	Форма.КоличествоБонусов = ТекущийОстаток;
	Форма.БонусыДоступноКОплате = Форма.КоличествоБонусов * ?(БонуснаяПрограмма.КурсКонвертацииБонусовВВалюту = 0, 1, БонуснаяПрограмма.КурсКонвертацииБонусовВВалюту);
	Форма.ПроцентОплатыБонусами = БонуснаяПрограмма.МаксимальныйПроцентОплатыБонусами;
	
	Форма.Элементы.ОплатитьБонусами.Доступность = (Форма.КоличествоБонусов > 0 И Форма.Элементы.ГруппаОплатаБонусами.Доступность);
	ИнтерфейсРМКСлужебныйКлиентСервер.УстановитьВидимостьДоступныхБонусов(Форма.Элементы, Истина);
	
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Бонусами можно оплатить до %1%2 от суммы чека'"), Форма.ПроцентОплатыБонусами, "%");
	Форма.Элементы.ДекорацияВозможноОплатитьБонусами.Заголовок = ТекстСообщения;
	Форма.Элементы.ИнформацияМожноОплатитьБонусами.Заголовок = ТекстСообщения;
	
КонецПроцедуры

// Определяет необходимость контроля остатков при пробитии чека.
//
// Параметры:
//  ТребуетсяКонтрольОстатков - Булево - признак необходимости контроля остатков.
//
Процедура ОпределитьНеобходимостьКонтролироватьОстатки(ТребуетсяКонтрольОстатков) Экспорт
	
	ТребуетсяКонтрольОстатков = Истина;
	
КонецПроцедуры

// Процедура производит контроль остатков.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//  КонтрольОстатковПройден - Булево - признак успешной проверки остатков.
//  ТекстОшибки - Строка - текст возможной ошибки.
//
Процедура ПроверитьНаличиеТоваров(Форма, КонтрольОстатковПройден, ТекстОшибки) Экспорт
	
	ТаблицаТовары = Форма.Объект.Товары;

	КонтролироватьВсеОстатки = НеобходимоКонтролироватьОстатки();
	СтруктураПараметровЗаполнения = Новый Структура;
	СтруктураПараметровЗаполнения.Вставить("Магазин", Форма.Объект.ТорговыйОбъект);
	СтруктураПараметровЗаполнения.Вставить("РабочееМесто", Форма.РабочееМесто);
	СтруктураПараметровЗаполнения.Вставить("Организация", Форма.Объект.Организация);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", СтруктураПараметровЗаполнения);
	
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		Если Не ЗначениеЗаполнено(СтрокаТовары.Склад) Тогда
			ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСкладПродажиВСтрокеТЧСервер(СтрокаТовары, СтруктураДействий, Неопределено);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаКонтроля = ТаблицаТовары.Выгрузить();
	КоличествоСтрок = ТаблицаКонтроля.Количество();
	ПозицияСтроки = 0;
	Пока ПозицияСтроки < КоличествоСтрок Цикл
		ТекущийИндексСтроки = КоличествоСтрок - ПозицияСтроки - 1;
		ПроверяемыйТовар = ТаблицаКонтроля.Получить(ТекущийИндексСтроки);
		УдалитьИзСписка = ПроверяемыйТовар.Оплачена
			Или Не (КонтролироватьВсеОстатки Или ПроверяемыйТовар.КонтролироватьОстатки);
		Если УдалитьИзСписка Тогда
			ТаблицаКонтроля.Удалить(ТекущийИндексСтроки);
		КонецЕсли;
		ПозицияСтроки = ПозицияСтроки + 1;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Склад КАК Склад,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТоварыДокумента
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыДокумента.Номенклатура КАК Номенклатура,
	|	ТоварыДокумента.Характеристика КАК Характеристика,
	|	ТоварыДокумента.Склад КАК Склад,
	|	ТоварыДокумента.Количество КАК Количество,
	|	СпрНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТоварыДокумента.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТоварыДляПроверки
	|ИЗ
	|	ТоварыДокумента КАК ТоварыДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТоварыДокумента.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	НЕ СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|	ТоварыНаСкладахОстатки.Склад КАК Склад,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ТоварыНаСкладахОстатки.РезервОстаток КАК РезервОстаток
	|ПОМЕСТИТЬ ТаблицаОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			(Номенклатура, Характеристика, Склад) В
	|				(ВЫБРАТЬ
	|					ТоварыДляПроверки.Номенклатура КАК Номенклатура,
	|					ТоварыДляПроверки.Характеристика КАК Характеристика,
	|					ТоварыДляПроверки.Склад КАК Склад
	|				ИЗ
	|					ТоварыДляПроверки КАК ТоварыДляПроверки)) КАК ТоварыНаСкладахОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыДляПроверки.Номенклатура КАК Номенклатура,
	|	ТоварыДляПроверки.Характеристика КАК Характеристика,
	|	ТоварыДляПроверки.Склад КАК Склад,
	|	ТоварыДляПроверки.Количество - ЕСТЬNULL(ТаблицаОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТаблицаОстатки.РезервОстаток, 0) КАК НедостающееКоличество,
	|	ТоварыДляПроверки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТоварыДляПроверки.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТоварыДляПроверки КАК ТоварыДляПроверки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатки КАК ТаблицаОстатки
	|		ПО ТоварыДляПроверки.Номенклатура = ТаблицаОстатки.Номенклатура
	|			И ТоварыДляПроверки.Характеристика = ТаблицаОстатки.Характеристика
	|			И ТоварыДляПроверки.Склад = ТаблицаОстатки.Склад
	|ГДЕ
	|	ТоварыДляПроверки.Количество > ЕСТЬNULL(ТаблицаОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТаблицаОстатки.РезервОстаток, 0)";
	
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаКонтроля);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ШаблонСообщения = НСтр("ru = 'Товар: %1
		|Превышен остаток на складе %2 на %3 %4'");
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРезервированиеПоЗаказамПокупателей") Тогда
		ШаблонСообщения = НСтр("ru = 'Товар: %1
			|Превышен свободный остаток на складе %2 на %3 %4'");
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Форма.Элементы.Товары.ТекущаяСтрока = Форма.Объект.Товары[Выборка.НомерСтроки - 1].ПолучитьИдентификатор();
		
		ПредставлениеТовара = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
			Выборка.Номенклатура,
			Выборка.Характеристика);
		
		ТекстОшибки = ТекстОшибки + ?(КонтрольОстатковПройден, "", Символы.ПС) +
			СтрШаблон(ШаблонСообщения, ПредставлениеТовара, Выборка.Склад, Выборка.НедостающееКоличество, Выборка.ЕдиницаИзмерения) + Символы.ПС;
		
		КонтрольОстатковПройден = Ложь;
		
	КонецЦикла;
	
	Если Не КонтрольОстатковПройден Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.Объект.ОперацияСДенежнымиСредствами Тогда
		
		МассивСерийныхНомеров = ТаблицаКонтроля.ВыгрузитьКолонку("Серия");
		Если МассивСерийныхНомеров.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СерийныеНомера.Ссылка КАК СерийныйНомер
		|ПОМЕСТИТЬ ТаблицаСерийныхНомеров
		|ИЗ
		|	Справочник.СерийныеНомера КАК СерийныеНомера
		|ГДЕ
		|	СерийныеНомера.Ссылка В(&МассивСерийныхНомеров)
		|	И НЕ СерийныеНомера.Ссылка = ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СерийныйНомер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияСерийныхНомеров.Номенклатура КАК Номенклатура,
		|	ДвиженияСерийныхНомеров.СерийныйНомер КАК СерийныйНомер,
		|	ДвиженияСерийныхНомеров.Период КАК Период,
		|	ВЫБОР
		|		КОГДА ДвиженияСерийныхНомеров.АналитикаХозяйственнойОперации = ЗНАЧЕНИЕ(Справочник.АналитикаХозяйственныхОпераций.ПогашениеПодарочныхСертификатов)
		|			ТОГДА ДвиженияСерийныхНомеров.Получатель.Магазин
		|		ИНАЧЕ ДвиженияСерийныхНомеров.Отправитель.Магазин
		|	КОНЕЦ КАК Магазин,
		|	ВЫБОР
		|		КОГДА ДвиженияСерийныхНомеров.АналитикаХозяйственнойОперации = ЗНАЧЕНИЕ(Справочник.АналитикаХозяйственныхОпераций.РеализацияТоваров)
		|			ТОГДА ""Реализован""
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ДвиженияСерийныхНомеров.АналитикаХозяйственнойОперации = ЗНАЧЕНИЕ(Справочник.АналитикаХозяйственныхОпераций.ПогашениеПодарочныхСертификатов)
		|					ТОГДА ""Погашен""
		|				ИНАЧЕ ""Списан""
		|			КОНЕЦ
		|	КОНЕЦ КАК Действие
		|ИЗ
		|	РегистрСведений.ДвиженияСерийныхНомеров КАК ДвиженияСерийныхНомеров
		|ГДЕ
		|	ДвиженияСерийныхНомеров.Период < &Дата
		|	И ДвиженияСерийныхНомеров.СерийныйНомер В
		|			(ВЫБРАТЬ
		|				ТаблицаСерийныхНомеров.СерийныйНомер КАК СерийныйНомер
		|			ИЗ
		|				ТаблицаСерийныхНомеров КАК ТаблицаСерийныхНомеров)
		|	И (ДвиженияСерийныхНомеров.АналитикаХозяйственнойОперации = ЗНАЧЕНИЕ(Справочник.АналитикаХозяйственныхОпераций.РеализацияТоваров)
		|			ИЛИ ДвиженияСерийныхНомеров.АналитикаХозяйственнойОперации = ЗНАЧЕНИЕ(Справочник.АналитикаХозяйственныхОпераций.ПогашениеПодарочныхСертификатов)
		|			ИЛИ ДвиженияСерийныхНомеров.АналитикаХозяйственнойОперации.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеНаЗатраты)
		|			ИЛИ ДвиженияСерийныхНомеров.АналитикаХозяйственнойОперации.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеПоИнвентаризации))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		
		Запрос.УстановитьПараметр("МассивСерийныхНомеров", МассивСерийныхНомеров);
		Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
		
		ШаблонСообщения = НСтр("ru = 'Номер подарочного сертификата номенклатуры ""%1"" %2
									|%3 в магазине %4 Дата %5'");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстОшибки = ТекстОшибки + ?(КонтрольОстатковПройден, "", Символы.ПС)
				+ СтрШаблон(ШаблонСообщения, Выборка.Номенклатура, Выборка.СерийныйНомер, Выборка.Действие, Выборка.Магазин, Выборка.Период)
				+ Символы.ПС;
			
			КонтрольОстатковПройден = Ложь;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты эквайринговой операции Чека продажи.
//
// Параметры:
//  ЧекПродажи - ОпределяемыйТип.ЧекККМРМК - чек продажи, основание чека на возврат.
//  Реквизиты - Структура:
//    НомерПлатежнойКарты - Строка.
//    НомерЧекаЭТ - Строка.
//    СсылочныйНомер - Строка.
//    ЭквайринговыйТерминал - ОпределяемыйТип.ЭквайринговыйТерминалРМК.
//
Процедура ЗаполнитьРеквизитыЭквайринговойОперации(ЧекПродажи, Реквизиты) Экспорт
	
	Для Каждого СтрокаОплатыПродажи Из ЧекПродажи.Оплата Цикл
		Если СтрокаОплатыПродажи.ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта Тогда
			
			ЗаполнитьЗначенияСвойств(Реквизиты, СтрокаОплатыПродажи);
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает статус аннулированный у чекаККМ.
//
// Параметры:
//  ЧекККМ - ДокументСсылка.ЧекККМ - документ для изменения статуса.
//
Процедура АннулироватьЧек(ЧекККМ) Экспорт
	
	ЧекККМОбъект = ЧекККМ.ПолучитьОбъект();
	ДокументЗаблокирован = Истина;
	
	Попытка
		ЧекККМОбъект.Заблокировать();
	Исключение
		ДокументЗаблокирован = Ложь;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка блокировки документа.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,
			ЧекККМОбъект,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если ДокументЗаблокирован Тогда
		ЧекККМОбъект.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Аннулированный;
		
		РежимЗаписи = ?(ЧекККМОбъект.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись);
		Попытка
			ЧекККМОбъект.Записать(РежимЗаписи);
			ЧекККМ = Документы.ЧекККМ.ПустаяСсылка();
		Исключение
			ДокументЗаблокирован = Ложь;
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при аннулировании чека ККМ.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,
				ЧекККМОбъект,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет признак, который определяет возможность запуска РМК.
//
// Параметры:
//  МожноОткрыватьРМК - Булево - признак возможности запуска РМК.
//
Процедура ОпределитьВозможностьЗапускаРМК(МожноОткрыватьРМК) Экспорт
	
	МожноОткрыватьРМК = ВключеноИспользованиеНовогоРМК();
	
КонецПроцедуры

// Возвращает строку для печати на ФР разбитую по ширине ленты.
//
// Параметры:
//  МассивЧеков - Массив - массив документов, для которых нужно сформировать текст товарного чека.
//  ТекстЧека - Строка - текст товарного чека.
//  ШиринаЛенты - Число - ширина ленты печати.
//
Процедура СформироватьТекстТоварногоЧека(МассивЧеков, ТекстЧека, ШиринаЛенты) Экспорт
	ТекстЧека = Документы.ЧекККМ.ТекстПечатиЧекаНаФР(МассивЧеков, ШиринаЛенты);
КонецПроцедуры

// Формирует запрос, который производит поиск чека по фискальному признаку в регистре "Фискальные операции".
//
// Параметры:
//  Запрос - Запрос - переопределяемый запрос.
//  Форма - ФормаКлиентскогоПриложения - форма выбора чека.
//  РасшифровкаКода - Структура - см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыQRКодаЧекаККТ().
//
Процедура СформироватьЗапросЧекПоФискальномуПризнаку(Запрос, Форма, РасшифровкаКода) Экспорт
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФискальныеОперации.ДокументОснование КАК Ссылка
	|ИЗ
	|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|ГДЕ
	|	ФискальныеОперации.ФискальныйПризнак = &ФискальныйПризнак
	|	И ТИПЗНАЧЕНИЯ(ФискальныеОперации.ДокументОснование) = ТИП(Документ.ЧекККМ)";
	
	Запрос.УстановитьПараметр("ФискальныйПризнак", РасшифровкаКода.ФискальныйПризнак)
	
КонецПроцедуры

// Формирует запрос, который производит поиск чека по фискальному признаку в регистре "Фискальные операции".
//
// Параметры:
//  Запрос - Запрос - переопределяемый запрос.
//  Форма - ФормаКлиентскогоПриложения - форма выбора чека.
//  Штрихкод - Строка.
//
Процедура СформироватьЗапросЧекПоШтрихкоду(Запрос, Форма, Штрихкод) Экспорт
	
	НачалоТекущегоДня = НачалоДня(ТекущаяДатаСеанса());
	
	Если Форма.ПроверкаЧека И Форма.РежимКассыСамообслуживания Тогда
		НачалоТекущегоДня = НачалоДня(ТекущаяДатаСеанса());
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФискальныеОперации.ДокументОснование КАК Ссылка,
		|	ДокументЧекККМ.НомерЧекаККМ КАК НомерЧека,
		|	ДокументЧекККМ.Дата КАК Дата,
		|	ДокументЧекККМ.СуммаДокумента КАК СуммаДокумента
		|ИЗ
		|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ДокументЧекККМ
		|		ПО ФискальныеОперации.ДокументОснование = ДокументЧекККМ.Ссылка
		|ГДЕ
		|	ФискальныеОперации.ИдентификаторОплатыПлатежнойСистемы = &Штрихкод
		|	И ФискальныеОперации.ИдентификаторОплатыПлатежнойСистемы <> """"
		|	И ФискальныеОперации.Дата >= &НачалоПредыдущегоДня
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	НомерЧека";
		Запрос.УстановитьПараметр("НачалоПредыдущегоДня", НачалоДня(НачалоТекущегоДня - 1));
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДисконтныеКарты.Ссылка КАК ДисконтнаяКарта
		|ПОМЕСТИТЬ ВТДисконтныеКарты
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ДисконтныеКарты
		|ГДЕ
		|	ДисконтныеКарты.КодКарты = &Штрихкод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФискальныеОперации.ДокументОснование КАК Ссылка
		|ИЗ
		|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
		|ГДЕ
		|	ФискальныеОперации.ИдентификаторОплатыПлатежнойСистемы = &Штрихкод
		|	И ФискальныеОперации.ИдентификаторОплатыПлатежнойСистемы <> """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЧекККМ.Ссылка
		|ИЗ
		|	Документ.ЧекККМ КАК ЧекККМ
		|ГДЕ
		|	ЧекККМ.Дата >= &Период
		|	И ЧекККМ.ДисконтнаяКарта В
		|			(ВЫБРАТЬ
		|				ВТДисконтныеКарты.ДисконтнаяКарта
		|			ИЗ
		|				ВТДисконтныеКарты)
		|	И НЕ ЧекККМ.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Период", ДобавитьМесяц(НачалоТекущегоДня, -3));
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	
КонецПроцедуры

// Определяет присутствие товаров с возрастным ограничением в документе "ЧекККМ.
//
// Параметры:
//  ЧекККМ - ОпределяемыйТип.ЧекККМРМК - анализируемый документ.
//  Результат - Булево - Истина, если в документе есть товары с возрастным ограничением.
//
Процедура ЗаполнитьПризнакЕстьТоварСВозрастнымОграничемВЧекККМ(ЧекККМ, Результат) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИСТИНА КАК ЕстьТоварыСВозрастнымОграничением
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|ГДЕ
	|	ЧекККМТовары.Номенклатура.ОсобенностьУчета В(&ОсобенностиУчета)
	|	И ЧекККМТовары.Ссылка = &ЧекККМ");
	
	ОсобенностиУчета = Новый Массив;
	ОсобенностиУчета.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция);
	ОсобенностиУчета.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция);
	ОсобенностиУчета.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак);
	ОсобенностиУчета.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.НикотиносодержащаяПродукция);
	ОсобенностиУчета.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Пиво);

	
	Запрос.УстановитьПараметр("ОсобенностиУчета", ОсобенностиУчета);
	Запрос.УстановитьПараметр("ЧекККМ", ЧекККМ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Выборка.Следующий();
	
КонецПроцедуры

// Определяет необходимость ввода характеристики по переданной номенклатуре.
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.НоменклатураРМК - номенклатура, для которой необходимо проверить характеристики.
//  Результат - Булево - признак необходимости ввода характеристики для номенклатуры.
//
Процедура ОпределитьНеобходимостьВводаХарактеристикиДляНоменклатуры(Номенклатура, Результат) Экспорт
	
	Результат = Справочники.Номенклатура.ХарактеристикиИспользуются(Номенклатура);
	
КонецПроцедуры

// Определяет текущее рабочее место.
//
// Параметры:
//  РабочееМесто - ОпределяемыйТип.РабочееМестоРМК - текущее рабочее место.
//
Процедура ОпределитьТекущееРабочееМесто(РабочееМесто) Экспорт
	
	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	
КонецПроцедуры

// Заполняет массив видами номенклатуры, которые определили по значению особенности учета.
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - текущее значение особенности учета номенклатуры.
//  МассивВидовНоменклатуры - Массив - массив, в который необходимо добавить значения видов номенклатуры.
//
Процедура ЗаполнитьМассивВидовНоменклатурыПоОсобенностиУчета(ОсобенностьУчета, МассивВидовНоменклатуры) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 5
	|	Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ПометкаУдаления
	|	И Номенклатура.ОсобенностьУчета = &ОсобенностьУчета
	|	И НЕ Номенклатура.ЭтоГруппа
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура.ВидНоменклатуры,
	|	Номенклатура.ОсобенностьУчета");

	Запрос.УстановитьПараметр("ОсобенностьУчета", ОсобенностьУчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВидовНоменклатуры.Добавить(Выборка.ВидНоменклатуры);
	КонецЦикла;
	
КонецПроцедуры

// Определяет значение текущего префикса информационной базы.
//
// Параметры:
//  ОчищатьПрефикс - Булево - признак необходимости сброса значения префикса.
//  ТекущийПрефикс - Строка - Значение текущего префикса информационной базы.
//
Процедура ЗаполнитьТекущийПрефиксИБ(ОчищатьПрефикс, ТекущийПрефикс) Экспорт
КонецПроцедуры

// Определяет физ лицо для текущего пользователя.
//
// Параметры:
//  ФизЛицоПользователя - ОпределяемыйТип.КассирРМК - физ лицо пользователя.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ОпределитьФизЛицоПользователя(ФизЛицоПользователя, Форма) Экспорт
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ФизЛицоПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "ФизическоеЛицо");
	
КонецПроцедуры

// Формирует текст сообщения по шаблону сообщения.
//
// Параметры:
//  ШаблонСообщения - СправочникСсылка.ШаблоныСообщений - ссылка на шаблон сообщения.
//  ДополнительныеПараметры - Структура - список дополнительных параметров, который будет передан в параметр
//                                        Сообщение в процедурах ПриФормированииСообщения при создании сообщения.
//  ТекстСообщения - Строка - текст отправляемого сообщения.
//
Процедура СформироватьТекстСообщения(ШаблонСообщения, ДополнительныеПараметры, ТекстСообщения) Экспорт
	
	Предмет = Справочники.ИнформационныеКарты.ПустаяСсылка();
	НовыйИдентификатор = Новый УникальныйИдентификатор;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатСообщение = ШаблоныСообщений.СформироватьСообщение(ШаблонСообщения,
		Предмет,
		НовыйИдентификатор,
		ДополнительныеПараметры);
		
	ТекстСообщения = РезультатСообщение.Текст;
	
КонецПроцедуры

// Отправляет SMS через настроенного поставщика услуги.
//
// Параметры:
//  НомераПолучателей - Массив из Строка - номера получателей в формате +7ХХХХХХХХХХ.
//  ТекстСообщения - Строка - текст сообщения, максимальная длина у операторов может быть разной.
//  РезультатОтправки - Структура:
//    Результат - Булево - Истина, если отправка SMS прошла успешно.
//    ОписаниеОшибки - Строка - Текст ошибки.
//    НомерТелефона - Строка - номер телефона получателя.
//
Процедура ОтправитьSMS(НомераПолучателей, ТекстСообщения, РезультатОтправки) Экспорт
	
	РезультатОтправкиБСП = ОтправкаSMS.ОтправитьSMS(НомераПолучателей, ТекстСообщения);
	Если РезультатОтправкиБСП.ОтправленныеСообщения.Количество() = 0 Тогда
		Если РезультатОтправкиБСП.Свойство("ОписаниеОшибки") Тогда
			РезультатОтправки.ОписаниеОшибки = РезультатОтправкиБСП.ОписаниеОшибки;
		КонецЕсли;
	Иначе
		РезультатОтправки.Результат = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет имя кассира и его ИНН для печати на ККТ.
//
// Параметры:
//  ПараметрыОперации - см.ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОткрытияЗакрытияСмены().
//  Пользователь - СправочникСсылка.Пользователи - пользователь РМК.
//  Кассир - ОпределяемыйТип.КассирРМК - кассир РМК
//
Процедура ЗаполнитьПараметрыКассираДляПечати(ПараметрыОперации, Пользователь, Кассир) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК ФизЛицо,
	|	1 КАК Приоритет
	|ПОМЕСТИТЬ СписокФизЛиц
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &Кассир
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Пользователи.ФизическоеЛицо,
	|	2
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка = &Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СписокФизЛиц.ФизЛицо КАК ФизЛицо,
	|	МИНИМУМ(СписокФизЛиц.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ТаблицаФизЛицо
	|ИЗ
	|	СписокФизЛиц КАК СписокФизЛиц
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокФизЛиц.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпрФизЛица.Наименование КАК ФИО,
	|	СпрФизЛица.ИНН КАК ИНН
	|ИЗ
	|	ТаблицаФизЛицо КАК ТаблицаФизЛицо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК СпрФизЛица
	|		ПО ТаблицаФизЛицо.ФизЛицо = СпрФизЛица.Ссылка";
	
	Запрос.УстановитьПараметр("Кассир", Кассир);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПараметрыОперации.Кассир = Выборка.ФИО;
		ПараметрыОперации.КассирИНН = Выборка.ИНН;
	Иначе
		ПараметрыОперации.Кассир = НСтр("ru='Администратор'");
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ПараметрыОперации.КассаККМ) И НЕ ПараметрыОперации.КассаККМ.ИспользоватьБезПодключенияОборудования Тогда
		ПараметрыОперации.КассаККМ = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет сумму оплат, которые были приняты используя эквайринговый
// терминал, подключенный к программе.
//
// Параметры:
//  ЧекККМ - ОпределяемыйТип.ЧекККМРМК - анализируемый документ.
//  СуммаОплат - Число - сумма безналичной оплаты.
//
Процедура ЗаполнитьСуммуБНОплатыЧекаККМ(ЧекККМ, СуммаОплат) Экспорт
	
	Для Каждого СтрокаОплаты Из ЧекККМ.Оплата Цикл
		Если ЗначениеЗаполнено(СтрокаОплаты.СсылочныйНомер) тогда
			СуммаОплат = СуммаОплат + СтрокаОплаты.Сумма;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// В процедуре описывается условное оформление для настроек рабочего места кассира.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура НастроитьУсловноеОформлениеВНастройкахРМК(Форма) Экспорт
	
	//Пустое рабочее место.
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.СписокНастроек.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНастроек.РабочееМесто");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.РабочиеМеста.ПустаяСсылка();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(220, 220, 220));
	
	//Характеристики не используются.
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.НастройкаРМКБыстрыеТоварыХарактеристика.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(
		Форма.Элементы.НастройкаРМКБыстрыеТоварыХарактеристикиИспользуются.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	//Характеристики не заполнены.
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.НастройкаРМКБыстрыеТоварыХарактеристика.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(
		Форма.Элементы.НастройкаРМКБыстрыеТоварыХарактеристикиИспользуются.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(
		Форма.Элементы.НастройкаРМКБыстрыеТоварыХарактеристика.ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

// Получает цену емрц из данных информационной базы на дату.
//
// Параметры:
//  ОсобенностьУчета - Перечисления.ВидыМаркированнойПродукцииБПО - тип маркированной продукции для проверки цены.
//  Период - Дата - дата проверки цены.
//  ЕМРЦ - Число - значение емрц.
//
Процедура ПолучитьЦенуЕМРЦ(ОсобенностьУчета, Период = Неопределено, ЕМРЦ = 0) Экспорт
	
КонецПроцедуры

// Процедура фискализирует ЧекККМ после пробития на ККТ.
//
// Параметры:
//  ВходящиеДанные - Структура - данные о результате пробития чека на ККТ.
//  ДополнительныеПараметры - Структура - дополнительные параметры пробития чека.
//  РезультатВыполненияПакетнойОперации - Структура - результат выполнения пакетной операции.
//
Процедура ФискализироватьЧекЗавершение(ВходящиеДанные, ДополнительныеПараметры,
	РезультатВыполненияПакетнойОперации = Неопределено)Экспорт
	
	Если ТипЗнч(ДополнительныеПараметры.ДокументОснование) = Тип("ДокументСсылка.РегистрацияБезналичнойОплаты") Тогда
		
		РегистрацияБезналичнойОплатыОбъект = ДополнительныеПараметры.ДокументОснование.ПолучитьОбъект();
		ДокументЗаблокирован = Истина;
		
		Попытка
			РегистрацияБезналичнойОплатыОбъект.Заблокировать();
		Исключение
			ДокументЗаблокирован = Ложь;
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка блокировки документа.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,
			РегистрацияБезналичнойОплатыОбъект,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Если ДокументЗаблокирован Тогда
			
			РегистрацияБезналичнойОплатыОбъект.ПробитЧек = Истина;
			РегистрацияБезналичнойОплатыОбъект.НомерЧекаККМ = ДополнительныеПараметры.НомерЧека;
			
			Попытка
				РегистрацияБезналичнойОплатыОбъект.Записать(РежимЗаписи());
			Исключение
				ДокументЗаблокирован = Ложь;
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при записи документа.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,
				РегистрацияБезналичнойОплатыОбъект,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			ЗаказПокупателя = РегистрацияБезналичнойОплатыОбъект.ДокументОснование;
			ОбменССайтомРТ.ЗаписатьСостояниеОплатыЗаказаПокупателя(ЗаказПокупателя, ВходящиеДанные.ДокументОснование);
			
		КонецЕсли
		
	ИначеЕсли ТипЗнч(ДополнительныеПараметры.ДокументОснование) = Тип("ДокументСсылка.ЧекККМ")
		ИЛИ ТипЗнч(ДополнительныеПараметры.ДокументОснование) = Тип("ДокументСсылка.ЧекКоррекции") Тогда
		
		ЭквайринговыйТерминал = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ЭквайринговыеТерминалы.ПустаяСсылка");
		НомерПлатежнойКарты = "";
		НомерЧекаЭТ = "";
		СсылочныйНомер = "";
		
		ЧекККМОбъект = ДополнительныеПараметры.ДокументОснование.ПолучитьОбъект();
		ДокументЗаблокирован = Истина;
		
		Если Не ДополнительныеПараметры.Свойство("ПечатьИзФормыЧека") Тогда
			
			Попытка
				ЧекККМОбъект.Заблокировать();
			Исключение
				
				ДокументЗаблокирован = Ложь;
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка блокировки документа.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,
				ЧекККМОбъект,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			КонецПопытки;
			
		КонецЕсли;
		
		Если ДокументЗаблокирован Тогда
			
			Если ВходящиеДанные = Неопределено Тогда
				НомерЧекаККМ = ДополнительныеПараметры.НомерЧека;
				НомерСменыККМ = ДополнительныеПараметры.НомерСмены;
			Иначе
				НомерЧекаККМ = ВходящиеДанные.НомерЧекаККМ;
				НомерСменыККМ = ВходящиеДанные.НомерСменыККМ;
			КонецЕсли;
			
			Если ТипЗнч(ЧекККМОбъект) = Тип("ДокументОбъект.ЧекКоррекции") Тогда
				ЧекККМОбъект.НомерЧека = НомерЧекаККМ;
				ЧекККМОбъект.НомерСмены = НомерСменыККМ;
				ЧекККМОбъект.ПробитЧек = Истина;
			Иначе
				ЧекККМОбъект.НомерЧекаККМ = НомерЧекаККМ;
				ЧекККМОбъект.НомерСменыККМ = НомерСменыККМ;
				ЧекККМОбъект.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Пробитый;
			КонецЕсли;
			
			ЧекККМОбъект.Дата = ТекущаяДатаСеанса();
			
			Если ЗначениеЗаполнено(РезультатВыполненияПакетнойОперации)
				И РезультатВыполненияПакетнойОперации.Свойство("РезультатВыполненияЭквайринговойОперации")
				И ЗначениеЗаполнено(РезультатВыполненияПакетнойОперации.РезультатВыполненияЭквайринговойОперации) Тогда
				
				// заполнить таблицу оплат чека данными: номерКарты, номерЧекаЭТ, СсылочныйНомер
				//на основании РезультатВыполненияПакетнойОперации
				РезультатЭквайринговойОперации = РезультатВыполненияПакетнойОперации.РезультатВыполненияЭквайринговойОперации;
				ДополнительныеДанные = РезультатВыполненияПакетнойОперации.ПараметрыЭквайринговойОперации;
				СтруктураПоиска = Новый Структура();
				СтруктураПоиска.Вставить("ВидОплаты", ДополнительныеДанные.ВидОплаты);
				
				СуммаДляОтбора = 0;
				Для Каждого СтрокаОплат Из ДополнительныеПараметры.ТаблицаОплат Цикл
					
					Если СтрокаОплат.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно") Тогда
						СуммаДляОтбора = СтрокаОплат.Сумма;
					КонецЕсли;
					
				КонецЦикла;
		
				СтруктураПоиска.Вставить("Сумма", СуммаДляОтбора);
				
				МассивОплат = ЧекККМОбъект.Оплата.НайтиСтроки(СтруктураПоиска);
				
					Если МассивОплат.Количество() > 0 Тогда
						
						Если РезультатЭквайринговойОперации.Свойство("ИдентификаторУстройства") Тогда
						
							Запрос = Новый Запрос("ВЫБРАТЬ
							|	ЭквайринговыеТерминалы.Ссылка КАК Ссылка
							|ИЗ
							|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
							|ГДЕ
							|	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
							|	И НЕ ЭквайринговыеТерминалы.Недействителен
							|	И ЭквайринговыеТерминалы.ПодключаемоеОборудование = &ПодключаемоеОборудование");
							Запрос.УстановитьПараметр("ПодключаемоеОборудование", РезультатЭквайринговойОперации.ИдентификаторУстройства);
							Выборка = Запрос.Выполнить().Выбрать();
							Если Выборка.Следующий() Тогда
								ЭквайринговыйТерминал = Выборка.Ссылка;
							КонецЕсли;
						
						КонецЕсли;
						
						СтрокаОплаты = МассивОплат[0];
						СтрокаОплаты.ЭквайринговыйТерминал = ЭквайринговыйТерминал;
						СтрокаОплаты.ПроцентКомиссии = ДополнительныеДанные.ПроцентКомиссии;
						СтрокаОплаты.СуммаКомиссии = СтрокаОплаты.Сумма * СтрокаОплаты.ПроцентКомиссии / 100;
						
						Если РезультатЭквайринговойОперации.Свойство("НомерКарты") Тогда
							
							НомерПлатежнойКарты = РезультатЭквайринговойОперации.НомерКарты;
							СтрокаОплаты.НомерПлатежнойКарты = НомерПлатежнойКарты;
							
						КонецЕсли;
						
						Если РезультатЭквайринговойОперации.Свойство("НомерЧекаЭТ") Тогда
							
							НомерЧекаЭТ = РезультатЭквайринговойОперации.НомерЧекаЭТ;
							СтрокаОплаты.НомерЧекаЭТ = НомерЧекаЭТ;
							
						КонецЕсли;
						
						Если РезультатЭквайринговойОперации.Свойство("СсылочныйНомер") Тогда
							
							СсылочныйНомер = РезультатЭквайринговойОперации.СсылочныйНомер;
							СтрокаОплаты.СсылочныйНомер = СсылочныйНомер;
							
						КонецЕсли;
						
						Если РезультатЭквайринговойОперации.Свойство("ВидОплатыНаТерминалеКод") Тогда
							
							ВидОплатыНаТерминалеКод = Число(РезультатЭквайринговойОперации.ВидОплатыНаТерминалеКод);
							СтрокаОплаты.КодСпособаОплатыЭТ = ВидОплатыНаТерминалеКод;
							
						КонецЕсли;
						
					КонецЕсли;
				
			КонецЕсли;
			
			Если ДополнительныеПараметры.Свойство("ЕстьАлкогольнаяПродукцияЕГАИС") И ДополнительныеПараметры.ЕстьАлкогольнаяПродукцияЕГАИС Тогда
				ЧекККМОбъект.ПодписьЧекаЕГАИС = ДополнительныеПараметры.ДополнительныеПараметры.ПодписьЧека;
				ЧекККМОбъект.АдресЧекаЕГАИС = ДополнительныеПараметры.ДополнительныеПараметры.АдресЧека;
			КонецЕсли;
			
			Если ТипЗнч(ЧекККМОбъект) = Тип("ДокументОбъект.ЧекККМ")
				И ЧекККМОбъект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
				ОбщегоНазначенияИС.СписатьОстатокПоВскрытымПотребительскимУпаковкам(ЧекККМОбъект,
					ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(ЧекККМОбъект));
			КонецЕсли;
			
			Попытка
				ЧекККМОбъект.Записать(РежимЗаписи());
			Исключение
				ДокументЗаблокирован = Ложь;
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка при записи документа.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,
				ЧекККМОбъект,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет массив особенностями учета номенклатуры, для которых разрешен возврат без указания марки.
//
// Параметры:
//  МассивОсобенностейУчета - Массив - массив особенностей учета номенклатуры.
//
Процедура ЗаполнитьМассивОсобенностейУчетаДляВозвратаБезМарки(МассивОсобенностейУчета) Экспорт

	Антисептики = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Антисептики");
	Бады = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.БАДы");
	Велосипеды = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Велосипеды");
	Духи = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Духи");
	КреслаКоляски = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.КреслаКоляски");
	Обувь = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция");
	Одежда = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность");
	Фотоаппараты = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Фотоаппараты");
	Шины = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Шины");
	
	МассивОсобенностейУчета.Добавить(Велосипеды);
	МассивОсобенностейУчета.Добавить(Духи);
	МассивОсобенностейУчета.Добавить(КреслаКоляски);
	МассивОсобенностейУчета.Добавить(Обувь);
	МассивОсобенностейУчета.Добавить(Одежда);
	МассивОсобенностейУчета.Добавить(Фотоаппараты);
	МассивОсобенностейУчета.Добавить(Шины);
	
КонецПроцедуры

// Определяет является ли переданное значение особенности учета табачной продукцией.
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - особенность учета.
//  Результат - Булево - Истина, если особенность учета - табачная продукция.
//
Процедура ОпределитьОсобенностьУчетаТабачнаяПродукция(ОсобенностьУчета, Результат) Экспорт
	
	Если ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция Тогда
		Результат = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Определяет является ли переданное значение особенности учета алкогольная продукцией.
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - особенность учета.
//  Результат - Булево - Истина, если особенность учета - алкогольная продукция.
//
Процедура ОпределитьОсобенностьУчетаАлкогольнаяПродукция(ОсобенностьУчета, Результат) Экспорт
	
	Если ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция Тогда
		Результат = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Рассчитывает автоматические скидки 
//
// Параметры:
//  ФормаРМК - ДанныеФормыКоллекция - данные объекта рабочего места кассира.
//
Процедура РассчитатьАвтоматическиеСкидки(ФормаРМК, РезультатВыполненияРасчета) Экспорт
	
	ПараметрыРасчета = ПолучитьПараметрыРасчетаСкидок(ФормаРМК);
	СтруктураСкидок = СкидкиНаценкиСервер.ДеревоСкидокНаценок(ПараметрыРасчета, ПараметрыРасчета.ВходныеПараметры);
	ПараметрыРасчета.ТолькоСообщенияПослеОформления = Истина;
	СтруктураСкидокДополнительно = СкидкиНаценкиСервер.ДеревоСкидокНаценок(ПараметрыРасчета, ПараметрыРасчета.ВходныеПараметры);
	
	Если СтруктураСкидок.Свойство("ТаблицаСкидкиНаценки") Тогда
		ТаблицаСкидкиНаценки = СтруктураСкидок.ТаблицаСкидкиНаценки;
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(ПараметрыРасчета, "Товары", ТаблицаСкидкиНаценки);
		СкидкиНаценкиСервер.ОкруглитьЧекВПользуПокупателя(ПараметрыРасчета, "Товары", "СкидкиНаценки");
		ФормаРМК.Объект.Товары.Очистить();
		ФормаРМК.Объект.Товары.Загрузить(ПараметрыРасчета.Товары);
		
		ТаблицаСкидкиНаценки.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка", , , Новый КвалификаторыСтроки(36)));
		ТаблицаСкидкиНаценки.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
		Для Каждого СтрокаСкидки Из ТаблицаСкидкиНаценки Цикл
			Если ЗначениеЗаполнено(СтрокаСкидки.КлючСвязи) Тогда // Иначе, идентификатор строки не требуется
				СтрокиТоваровСкидки = ПараметрыРасчета.Товары.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаСкидки.КлючСвязи));
				Если СтрокиТоваровСкидки.Количество() Тогда
					СтрокаСкидки.ИдентификаторСтроки = СтрокиТоваровСкидки[0].ИдентификаторСтроки;
				КонецЕсли;
			КонецЕсли;
			СтрокаСкидки.Представление = Строка(СтрокаСкидки.СкидкаНаценка);
		КонецЦикла;
		
		ФормаРМК.ТаблицаСкидкиНаценки.Загрузить(ТаблицаСкидкиНаценки);
	КонецЕсли;
	
	Если СтруктураСкидок.Свойство("ТаблицаБонусов") Тогда
		Для Каждого СтрокаБонусов Из СтруктураСкидок.ТаблицаБонусов Цикл
			НоваяСтрока = ФормаРМК.ТаблицаБонусныеБаллы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаБонусов);
			НоваяСтрока.БонуснаяПрограмма = СтрокаБонусов.БонуснаяПрограммаЛояльности;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураСкидок.Свойство("ТаблицаПодарков") И СтруктураСкидок.ТаблицаПодарков.Количество() > 0 Тогда
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(ПараметрыРасчета, "Товары", СтруктураСкидок.ТаблицаСкидкиНаценки);
		ФормаРМК.ТаблицаПодарков.Очистить();
		Для каждого СтрокаПодарок Из СтруктураСкидок.ТаблицаПодарков Цикл
			НоваяСтрока = ФормаРМК.ТаблицаПодарков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПодарок);
			НоваяСтрока.ВладелецПодарка = XMLСтрока(СтрокаПодарок.СкидкаНаценка);
			НоваяСтрока.ВыборИзСписка = СтрокаПодарок.ПодарокИзСписка;
			НоваяСтрока.Склад = СтрокаПодарок.Склад;
			НоваяСтрока.КоличествоУпаковок = СтрокаПодарок.Количество;
			НоваяСтрока.Организация = ФормаРМК.Объект.Организация;
			НоваяСтрока.Упаковка = СтрокаПодарок.Упаковка;
			НоваяСтрока.ВыводитьПодарокВЧек = СтрокаПодарок.СкидкаНаценка.УчитыватьПодарокКакПродажу;
			НоваяСтрока.ПредставлениеВладельца = Строка(СтрокаПодарок.СкидкаНаценка);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураСкидок.Свойство("ДеревоСкидок") Тогда
		ТаблицаСкидок = Новый ТаблицаЗначений;
		ТаблицаСкидок = ДеревоЗначенийВТаблицуЗначений(СтруктураСкидок.ДеревоСкидок);
		ФормаРМК.ТаблицаДействующихСкидок.Очистить();
		Для Каждого СтрокаСкидкиНаценки Из ТаблицаСкидок Цикл
			Если СтрокаСкидкиНаценки.СкидкаНаценка = Null Или НЕ СтрокаСкидкиНаценки.СтруктураДополнительныхДанных.Свойство("ТаблицаСкидок") Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ФормаРМК.ТаблицаДействующихСкидок.Добавить();
			НоваяСтрока.СкидкаНаценка = СтрокаСкидкиНаценки.СкидкаНаценка;
			НоваяСтрока.СкидкаНаценкаПредставление = Строка(СтрокаСкидкиНаценки.СкидкаНаценка);
			НоваяСтрока.ЗначениеСкидкиНаценки = ?(СтрокаСкидкиНаценки.ЗначениеСкидкиНаценки = null, 0, СтрокаСкидкиНаценки.ЗначениеСкидкиНаценки);
			НоваяСтрока.ЭтоГруппа = СтрокаСкидкиНаценки.ЭтоГруппа;
			НоваяСтрока.Родитель = СтрокаСкидкиНаценки.СкидкаНаценка.Родитель;
			НоваяСтрока.КоличествоВыполненныхУсловий = СтрокаСкидкиНаценки.КоличествоВыполненийУсловия;
			УсловияПредоставления = "";
			Если СтрокаСкидкиНаценки.СтруктураДополнительныхДанных.Свойство("СтрокаУсловий") Тогда
				Для Каждого СтрокаВыполненныхУсловий Из СтрокаСкидкиНаценки.СтруктураДополнительныхДанных.СтрокаУсловий.Строки Цикл
					УсловияПредоставления = УсловияПредоставления + ?(УсловияПредоставления = "","",Символы.ПС) + Строка(СтрокаВыполненныхУсловий.Условие);
				КонецЦикла;
			КонецЕсли;
			НоваяСтрока.УсловияПредоставления = УсловияПредоставления;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураСкидок.Свойство("ТаблицаСообщений") И СтруктураСкидок.ТаблицаСообщений.Количество() > 0
		Или СтруктураСкидокДополнительно.Свойство("ТаблицаСообщений") И СтруктураСкидокДополнительно.ТаблицаСообщений.Количество() > 0 Тогда
		ФормаРМК.ТаблицаСообщений.Очистить();
		СкопироватьСообщенияВТаблицу(СтруктураСкидок.ТаблицаСообщений, ФормаРМК.ТаблицаСообщений);
		СкопироватьСообщенияВТаблицу(СтруктураСкидокДополнительно.ТаблицаСообщений, ФормаРМК.ТаблицаСообщений);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет свойства "КодТРУ" и "ВозможнаОплатаЭС" в строке товара.
//
// Параметры:
//  ДанныеСтроки - Структура - данные текущей строки.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЗаполнитьВозможностьОплатыЭС(ДанныеСтроки, Форма) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Номенклатура.КодТРУ КАК СТРОКА(30)) КАК КодТРУ,
	|	ВЫБОР
	|		КОГДА Номенклатура.КодТРУ = """"
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВозможнаОплатаЭС
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура");
	
	Запрос.УстановитьПараметр("Номенклатура", ДанныеСтроки.Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ДанныеСтроки.Свойство("КодТРУ") Тогда
			ДанныеСтроки.КодТРУ = Выборка.КодТРУ;
		КонецЕсли;
		Если ДанныеСтроки.Свойство("ВозможнаОплатаЭС") Тогда
			ДанныеСтроки.ВозможнаОплатаЭС = Выборка.ВозможнаОплатаЭС;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Определяет необходимость выполнения интерактивной проверки кода маркировки в форме РМК.
// Под проверкой понимается отправка и ожидание результата проверки кода маркировки от ОИСМ (если настройка включена).
//
// Параметры:
//  ПроверятьМаркированныйТоварНаККТ - Булево - признак необходимости проверки марки на ККТ.
//  ПодключаемоеОборудование - СправочникСсылка.ПодключаемоеОборудование - экземпляр подключаемого оборудования.
// 
Процедура ЗаполнитьНеобходимостьПроверкиМаркиНаККТ(ПроверятьМаркированныйТоварНаККТ, ПодключаемоеОборудование) Экспорт
	
	ПроверятьМаркированныйТоварНаККТ = Ложь;
	
КонецПроцедуры

// Настраивает запрос по умолчанию для динамического списка реквизита "ТаблицаЧековККМ".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы выбора чеков.
//
Процедура СформироватьЗапросТаблицаЧековПоУмолчанию(Форма) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЧекККМ.Номер КАК Номер,
	|	ЧекККМ.НомерЧекаККМ КАК НомерККМ,
	|	ЧекККМ.Дата КАК Дата,
	|	ЧекККМ.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|";
	
	Форма.ТаблицаЧековККМ.ПроизвольныйЗапрос = Истина;
	Форма.ТаблицаЧековККМ.ТекстЗапроса = ТекстЗапроса;
	
КонецПроцедуры

// Процедура определяет может ли операция являться сторнирующей по таким параметрам как:
// Чек продажи, сумма итого, текущая кассовая смена.
// Резльтат процедуры необходимо записать в "ПараметрыСторно.Результат".
//
// Параметры:
//  ПараметрыСторно - Структура - параметры операции. Содержит свойства:
//                    ЧекККМПродажа - ОпределяемыйТип.ЧекККМРМК - чек продажи.
//                    СуммаИтого - Число - возвращаемая сумма.
//                    КассоваяСмена - ДокументСсылка.КассоваяСмена - текущая кассовая смена.
//                    Результат - Булево - признак того, является ли текущая операция сторнирующей.
//
Процедура ЗаполнитьПризнакЭтоСторно(ПараметрыСторно) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыСторно.ЧекККМПродажа) И ЗначениеЗаполнено(ПараметрыСторно.КассоваяСмена)
		И ПараметрыСторно.СуммаИтого > 0 Тогда
		
		НомерСменыККМ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСторно.КассоваяСмена, "НомерСменыККТ");
		Если НЕ НомерСменыККМ = Неопределено Тогда
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	СУММА(ЧекККМОплата.Сумма) КАК Сумма
			|ПОМЕСТИТЬ СуммаЧЕКА
			|ИЗ
			|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
			|ГДЕ
			|	ЧекККМОплата.ЭквайринговыйТерминал = &ЭквайринговыйТерминал
			|	И ЧекККМОплата.Ссылка = &ЧекККМ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(ЧекККМ.НомерСменыККМ = &НомерСменыККМ
			|		И СуммаЧека.Сумма = &СуммаКСторнированию
			|		И ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробитый), ЛОЖЬ) КАК ЭтоСторноОплаты
			|ИЗ
			|	Документ.ЧекККМ КАК ЧекККМ,
			|	СуммаЧЕКА КАК СуммаЧека
			|ГДЕ
			|	ЧекККМ.Ссылка = &ЧекККМ");
			
			Запрос.УстановитьПараметр("НомерСменыККМ", НомерСменыККМ);
			Запрос.УстановитьПараметр("ЧекККМ", ПараметрыСторно.ЧекККМПродажа);
			Запрос.УстановитьПараметр("СуммаКСторнированию", ПараметрыСторно.СуммаИтого);
			Запрос.УстановитьПараметр("ЭквайринговыйТерминал", ПараметрыСторно.ЭквайринговыйТерминал);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ПараметрыСторно.Результат = Выборка.ЭтоСторноОплаты;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет признак возможности отправки СМС.
//
// Параметры:
//  ДоступнаОтправкаSMS - Булево - признак возможности отправки СМС
//
Процедура ПроверитьВозможностьОтправкиSMS(ДоступнаОтправкаSMS) Экспорт
	ДоступнаОтправкаSMS = ОтправкаSMS.НастройкаОтправкиSMSВыполнена();
КонецПроцедуры

// Заполняет таблицу данными о переданных товарах.
// Таблица должна содержать данные для заполнения табличной части "Товары" обработки "РабочееМестоКассира".
//
// Параметры:
//  МассивТоваров - Массив - массив, в котором содержится список товаров.
//  ТаблицаТовары - ТаблицаЗначений - таблица, в которую необходимо поместить информацию по товарам.
//  ДополнительныеИсходящиеДанные - Структура - дополнительные данные, связанные с получаемым товаром,
//												но не относящиеся к добавляемой строке товара непосредственно.
//
Процедура ЗаполнитьТаблицуТовары(МассивТоваров, ТаблицаТовары, ДополнительныеИсходящиеДанные = Неопределено) Экспорт
	
	ПроверкаВводаДробногоКоличества = ПолучитьФункциональнуюОпцию("ИспользоватьПроверкуНаВводДробногоКоличества");
	
	ТребуютсяДанныеКонтроля = Ложь;
	Если Не ДополнительныеИсходящиеДанные = Неопределено
			И ДополнительныеИсходящиеДанные.Свойство("ДанныеКонтроляПродаж")
			И ТипЗнч(ДополнительныеИсходящиеДанные.ДанныеКонтроляПродаж) = Тип("Структура") Тогда
		ТребуютсяДанныеКонтроля = Истина;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&ОпределениеПризнакаМаркируемаяПродукция КАК Маркируемый,
	|	СпрНоменклатура.СтавкаНДС КАК СтавкаНДС,
	|	СпрНоменклатура.ОсобенностьУчета КАК ОсобенностьУчета,
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.Весовой
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.Весовой
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	СпрНоменклатура.Наименование КАК Наименование,
	|	СпрНоменклатура.Весовой КАК Весовой,
	|	ЛОЖЬ КАК Фасованный,
	|	СпрНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВидыНоменклатуры.ИспользоватьСерии
	|		ИЛИ СпрНоменклатура.ИспользоватьСерийныеНомера КАК НеобходимоДобавитьСтроку,
	|	ВидыНоменклатуры.ИспользоватьСерии
	|		ИЛИ СпрНоменклатура.ИспользоватьСерийныеНомера КАК НеобходимостьВводаСерии,
	|	ВидыНоменклатуры.ИспользоватьСерии
	|		ИЛИ СпрНоменклатура.ИспользоватьСерийныеНомера КАК ПроверятьЗаполнениеСерий,
	|	СпрНоменклатура.ИспользоватьСерийныеНомера
	|		ИЛИ ВидыНоменклатуры.ИспользоватьСерии
	|			И ВидыНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара) КАК УникальностьСерии,
	|	ЛОЖЬ КАК ИспользоватьПартии,
	|	ЛОЖЬ КАК ПроверятьЗаполнениеПартий,
	|	ЛОЖЬ КАК ЭтоНабор,
	|	СпрНоменклатура.Ссылка КАК Номенклатура,
	|	ВидыНоменклатуры.Ссылка КАК ВидНоменклатуры,
	|	ВЫБОР
	|		КОГДА &ПроверкаВводаДробногоКоличества
	|			ТОГДА НЕ СпрНоменклатура.РазрешитьВводДробногоКоличества
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗапретитьВводДробногоКоличества,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.АгентскиеУслуги
	|			ТОГДА ЕСТЬNULL(СпрДоговорыКонтрагентов.Агент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СпрДоговорыКонтрагентов.Агент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВидыНоменклатуры.АгентскиеУслуги
	|	КОНЕЦ КАК ЭтоАгентскаяУслуга,
	|	СпрНоменклатура.Код КАК Код,
	|	СпрНоменклатура.Артикул КАК Артикул,
	|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьХарактеристики, ЛОЖЬ) КАК ПроверятьЗаполнениеХарактеристики
	|ПОМЕСТИТЬ ТаблицаНоменклатура
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО СпрНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК СпрДоговорыКонтрагентов
	|		ПО СпрНоменклатура.ДоговорКонтрагента = СпрДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	СпрНоменклатура.Ссылка В(&МассивТоваров)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатура.Маркируемый КАК Маркируемый,
	|	ТаблицаНоменклатура.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаНоменклатура.ОсобенностьУчета КАК ОсобенностьУчета,
	|	ТаблицаНоменклатура.Количество КАК Количество,
	|	ТаблицаНоменклатура.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаНоменклатура.Наименование КАК Наименование,
	|	ТаблицаНоменклатура.Весовой КАК Весовой,
	|	ТаблицаНоменклатура.Фасованный КАК Фасованный,
	|	ТаблицаНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаНоменклатура.НеобходимоДобавитьСтроку КАК НеобходимоДобавитьСтроку,
	|	ТаблицаНоменклатура.НеобходимостьВводаСерии КАК НеобходимостьВводаСерии,
	|	ТаблицаНоменклатура.ПроверятьЗаполнениеСерий КАК ПроверятьЗаполнениеСерий,
	|	ТаблицаНоменклатура.УникальностьСерии КАК УникальностьСерии,
	|	ТаблицаНоменклатура.ИспользоватьПартии КАК ИспользоватьПартии,
	|	ТаблицаНоменклатура.ПроверятьЗаполнениеПартий КАК ПроверятьЗаполнениеПартий,
	|	ТаблицаНоменклатура.ЭтоНабор КАК ЭтоНабор,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки, 0) КАК КоличествоВПотребительскойУпаковке,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия, ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИС.ПустаяСсылка)) КАК ВариантЧастичногоВыбытия,
	|	НЕ НастройкиЧастичногоВыбытияПродукцииИС.НоменклатураЧастичногоВыбытия ЕСТЬ NULL КАК ПоштучноеВыбытие,
	|	ТаблицаНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ТаблицаНоменклатура.ЗапретитьВводДробногоКоличества КАК ЗапретитьВводДробногоКоличества,
	|	ТаблицаНоменклатура.Поставщик КАК Поставщик,
	|	ТаблицаНоменклатура.ЭтоАгентскаяУслуга КАК ЭтоАгентскаяУслуга,
	|	ТаблицаНоменклатура.Код КАК Код,
	|	ТаблицаНоменклатура.Артикул КАК Артикул,
	|	ТаблицаНоменклатура.ПроверятьЗаполнениеХарактеристики КАК ПроверятьЗаполнениеХарактеристики
	|ИЗ
	|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЧастичногоВыбытияПродукцииИС КАК НастройкиЧастичногоВыбытияПродукцииИС
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|			ПО НастройкиЧастичногоВыбытияПродукцииИС.Номенклатура = ОписаниеНоменклатурыИС.Номенклатура
	|		ПО ТаблицаНоменклатура.Номенклатура = НастройкиЧастичногоВыбытияПродукцииИС.НоменклатураЧастичногоВыбытия";
	
	ОпределениеМаркируемаяПродукция = ИнтеграцияИСРТ.ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса("СпрНоменклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОпределениеПризнакаМаркируемаяПродукция", ОпределениеМаркируемаяПродукция);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Если ТребуютсяДанныеКонтроля Тогда
		РазделительЗапросов = "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		Запрос.Текст = СтрШаблон("%1%2%3", Запрос.Текст, РазделительЗапросов, ПолучитьТекстЗапросаКонтроляПродаж());
		ПараметрТаблицаТоваров = ПодготовитьТаблицуТоваровДляЗапроса(МассивТоваров,
			ДополнительныеИсходящиеДанные.Характеристика);
		
		УстановитьПараметрыЗапросаКонтроляПродаж(Запрос, ПараметрТаблицаТоваров, ДополнительныеИсходящиеДанные);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивТоваров", МассивТоваров);
	Запрос.УстановитьПараметр("ПроверкаВводаДробногоКоличества", ПроверкаВводаДробногоКоличества);
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	РезультатЗапросаТоваров = РезультатыЗапросов[1];
	
	ТаблицаТовары = РезультатЗапросаТоваров.Выгрузить();
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		
		Если Не СтрокаТовары.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаТовары.Маркируемый И СтрокаТовары.НеобходимостьВводаСерии Тогда
			СтрокаТовары.Маркируемый = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТребуютсяДанныеКонтроля Тогда
		НачальныйНомерЗапроса = 10;
		ДополнительныеИсходящиеДанные.ДанныеКонтроляПродаж
			= ПодготовитьДанныеКонтроляПродаж(РезультатыЗапросов, НачальныйНомерЗапроса);
	КонецЕсли;
	
КонецПроцедуры

// В процедуре производится получение состава набора и заполнение
// таблицы товарами, которые входят в состав набора.
// Также необходимо заполнить в таблице все данные для товара, которые получают в
// ОбщегоНазначенияРМКПереопределяемый.ТаблицаДанныхОТоварах.
//
// Параметры:
//  ДанныеНабора - Структура - данные выбранного набора.
//  ТаблицаСоставНабора - ТаблицаЗначений - таблица, в которой находятся строки с товарами из состава набора и их данные.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ЗаполнитьСоставНабора(ДанныеНабора, ТаблицаСоставНабора, Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура заполняет массив серий, исключая серии, которые уже присутствуют в РМК.
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.НоменклатураРМК - товар, для которого необходимо заполнить партии.
//  МассивПартий - Массив - массив, в который необходимо добавить найденные партии.
//
Процедура ЗаполнитьСписокВыбораПартийНоменклатуры(Номенклатура, МассивПартий) Экспорт
	
	Возврат;
	
КонецПроцедуры

// В процедуре производится прикладная логика, влияющая на
// заполнение серий и партий в строке товаров.
//
// Параметры:
//  ТекущаяСтрока - ДанныеТекущейСтроки - текущая строка товаров.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ПереопределитьПараметрыЗаполненияСерийИПартий(ТекущаяСтрока, Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Определяет является ли документ чеком продажи.
//
// Параметры:
//  Результат - Булево - Истина, если документ - чек продажи.
//  ЧекККМ - ОпределяемыйТип.ОпределяемыйТип.ЧекККМРМК - чек ккм.
//
Процедура ОпределитьЧекККМПродажа(Результат, ЧекККМ) Экспорт
	
	ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЧекККМ, "ВидОперации");
	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		Результат = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура настраивает динамический список для получения списка чеков для возврата скупки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы выбора чеков.
//
Процедура ЗаполнитьТаблицуЧековККМНаВозвратСкупки(Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура настраивает элементы настроек форм подбора в настройках РМК.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы настроек РМК.
//
Процедура НастроитьЭлементыПодбораТоваров(Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Метод реализующий дополнительную логику при сохранении настроек рабочего места кассира.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - ОбщаяФорма.НастройкиРабочегоМестаКассира.
//  Результат - Структура - возвращаемый параметр работы метода, ключи структуры:
//   * ВыполненоУспешно - Булево - Ложь, если сохранение настроек формы недопустимо.
//   * ТекстПредупрежденийОшибок - Строка - текст сообщения об ошибке, который будет выведен пользователю.
//
Процедура ПриСохраненииНастроекРМК(Форма, Результат) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Определяет является ли переданное значение особенности учета молочной продукцией.
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - особенность учета.
//  Результат - Булево - Истина, если особенность учета - молочная продукция.
//
Процедура ОпределитьОсобенностьУчетаМолочнаяПродукция(ОсобенностьУчета, Результат) Экспорт
	
	Если ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС
		ИЛИ ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
			Результат = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Позволяет обработать событие ОбработкаОповещения для формы Обработки.РабочееМестоКассира.Формы.ФормаРМК. на сервере.
// Дополнительно см. метод ОбщегоНазначенияРМККлиентПереопределяемый.ОбработкаОповещения.
//
Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Позволяет реализовать дополнительную логику заполнения подключаемого оборудования при обновлении
//  
// Параметры:
//  СсылкаПодключаемоеОборудование - СправочникСсылка.ПодключаемоеОборудование 
//
Процедура ОбновитьСправочникПодключаемогоОборудования(СсылкаПодключаемоеОборудование) Экспорт
	Возврат;
КонецПроцедуры

// Обновляет рабочие места касс ККМ, отличные от текущего рабочего места 
//
Процедура УстановитьТекущееРабочееМестоКассамККМ() Экспорт
	Возврат;
КонецПроцедуры

// Выполняет конвертацию настроек РМК в настройки нового РМК
//
// Параметры:
//  ЭтотОбъект - ФормаКлиентскогоПриложение - общая форма настройки рабочего места кассира
//
Процедура КонвертироватьНастройкиСтарогоРМК(ЭтотОбъект) Экспорт
	
	АктуализироватьНастройкиРМК();
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	НастройкиРабочегоМестаКассира.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
	|ГДЕ
	|	НЕ НастройкиРабочегоМестаКассира.ПометкаУдаления
	|	И НастройкиРабочегоМестаКассира.РабочееМесто = &РабочееМесто");
	
	ИдентификаторРабочегоМеста = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	Запрос.УстановитьПараметр("РабочееМесто", ИдентификаторРабочегоМеста);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЭтотОбъект.Параметры.НастройкаРабочегоМеста = ?(Выборка.Следующий() И Выборка.Количество() > 1,
		Неопределено,
		Выборка.Ссылка);
	
КонецПроцедуры

// Дополняет данные о цене, особенности учета, виде номенклатуры и остатке
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения.
//
Процедура ДополнитьОпорныеДанныеПанелиДляПостроенияПлиточногоИнтерфейса(Форма) Экспорт
	
	ВведеныОпорныеДанные = Форма.ОпорныеДанные.Количество() > 0;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ТекущийТорговыйОбъект") Тогда
		ТорговыйОбъект = Форма.ТекущийТорговыйОбъект;
	Иначе
		ТорговыйОбъект = Форма.Объект.ТорговыйОбъект;
	КонецЕсли;
	
	ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка");
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "РозничныйВидЦены") Тогда
		ВидЦены = Форма.РозничныйВидЦены;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТорговыйОбъект) И Не ЗначениеЗаполнено(ВидЦены) Тогда
		ВидЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТорговыйОбъект, "РозничныйВидЦен");
	КонецЕсли;
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ИсходныеДанные.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ИсходныеДанные.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));

	Если ВведеныОпорныеДанные И ЗначениеЗаполнено(ВидЦены) Тогда
	
		Для Каждого Запись Из Форма.ОпорныеДанные Цикл
			
			Если ЗначениеЗаполнено(Запись.Номенклатура) Тогда
				ЗаполнитьЗначенияСвойств(ИсходныеДанные.Добавить(), Запись);
			КонецЕсли;
			
		КонецЦикла;
		ИсходныеДанные.Свернуть("Номенклатура, Характеристика, Упаковка");
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	ТаблицаТовары.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ ТоварыСостава
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	ТаблицаТовары.Упаковка КАК Упаковка,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕдиницыИзмерения.Коэффициент
		|	КОНЕЦ КАК Коэффициент,
		|	ЕдиницыИзмерения.Наименование КАК ПредставлениеУпаковки
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	ТоварыСостава КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК ЕдиницыИзмерения
		|		ПО ТаблицаТовары.Упаковка = ЕдиницыИзмерения.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
		|	ЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЕдиницыИзмерения.Коэффициент, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕдиницыИзмерения.Коэффициент
		|	КОНЕЦ КАК Коэффициент
		|ПОМЕСТИТЬ втЦеныНоменклатуры
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&Дата,
		|			(Номенклатура, Характеристика) В
		|					(ВЫБРАТЬ
		|						втНоменклатура.Номенклатура КАК Номенклатура,
		|						втНоменклатура.Характеристика КАК Характеристика
		|					ИЗ
		|						Товары КАК втНоменклатура)
		|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК ЕдиницыИзмерения
		|		ПО ЦеныНоменклатурыСрезПоследних.Упаковка = ЕдиницыИзмерения.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыСостава.Номенклатура КАК Номенклатура,
		|	ТоварыСостава.Характеристика КАК Характеристика,
		|	втНоменклатура.ЕдиницаИзмерения КАК Упаковка,
		|	втНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	втНоменклатура.ОсобенностьУчета КАК ОсобенностьУчета,
		|	ВЫБОР
		|		КОГДА втНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|			ТОГДА втНоменклатура.Номинал
		|		ИНАЧЕ ЕСТЬNULL(втЦеныНоменклатуры.Цена, 0)
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР
		|		КОГДА втНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
		|			ТОГДА ИСТИНА
		|		КОГДА ЕСТЬNULL(втЦеныНоменклатуры.Цена, 0) > 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДоступностьКоманды,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыНаСкладахОстатки.РезервОстаток, 0) КАК Доступно,
		|	ПРЕДСТАВЛЕНИЕ(втНоменклатура.ЕдиницаИзмерения) КАК ПредставлениеЕдиницыИзмерения
		|ИЗ
		|	ТоварыСостава КАК ТоварыСостава
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК втНоменклатура
		|		ПО ТоварыСостава.Номенклатура = втНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЦеныНоменклатуры КАК втЦеныНоменклатуры
		|		ПО ТоварыСостава.Номенклатура = втЦеныНоменклатуры.Номенклатура
		|			И ТоварыСостава.Характеристика = втЦеныНоменклатуры.Характеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад = &СкладПродажи) КАК ТоварыНаСкладахОстатки
		|		ПО ТоварыСостава.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
		|			И ТоварыСостава.Характеристика = ТоварыНаСкладахОстатки.Характеристика");
		
		Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
		Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("ТаблицаТовары", ИсходныеДанные);
		
		СкладПродажи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТорговыйОбъект, "СкладПродажи");
		Запрос.УстановитьПараметр("ТорговыйОбъект", ТорговыйОбъект);
		Запрос.УстановитьПараметр("СкладПродажи", СкладПродажи);
		
		ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
		
		Для Каждого Строка Из Форма.ОпорныеДанные Цикл
			
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("Номенклатура", Строка.Номенклатура);
			СтруктураПоиска.Вставить("Характеристика", Строка.Характеристика);
			
			Результат = ТаблицаРезультат.НайтиСтроки(СтруктураПоиска);
			
			Если Результат.Количество() > 0 Тогда
				
				Для Каждого Элемент Из Результат Цикл
					ЗаполнитьЗначенияСвойств(Строка, Элемент);
					Если Элемент.ДоступностьКоманды = Неопределено Тогда
						Если Строка.ЭтоКатегория Или ЗначениеЗаполнено(Строка.Цена) Тогда
							Строка.ДоступностьКоманды = Истина;
						Иначе
							Строка.ДоступностьКоманды = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Создает/обновляет настройки нового РМК (справочник "Настройки рабочего места кассира") на основе
// значений по умолчанию, либо на основе ранее созданных настроек РМК ( справочник "Настройки РМК").
//
//
Процедура АктуализироватьНастройкиРМК() Экспорт
	
	ИсходныеДанные = ДействующиеНастройкиРМКДляВсехРабочихМест();
	
	Если ИсходныеДанные.Количество() > 0 Тогда
		
		Для Каждого Настройки Из ИсходныеДанные Цикл
			АктуализироватьНастройкуРМК(Настройки.НастройкиБРМК, Настройки.НастройкиРМК, Настройки.РабочееМесто);
		КонецЦикла;
		
	Иначе
		
		НастройкиБРМКСуществуют = СозданыНастройкиБРМКДляТекущегоРабочегоМеста();
		
		Если НЕ НастройкиБРМКСуществуют Тогда
			
			НастройкаБРМК = ПредопределенноеЗначение("Справочник.НастройкиРабочегоМестаКассира.ПустаяСсылка");
			АктуализироватьНастройкуРМК(НастройкаБРМК);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Заполняет вид номенклатуры
// 
// Параметры:
//  Номенклатура - ОпределяемыйТип.НоменклатураРМК номенклатура вид которой необходимо получить
//  Результат - ОпределяемыйТип.ВидНоменклатурыРМК - результат заполнения
//
Процедура ЗаполнитьВидНоменклатуры(Номенклатура, Результат) Экспорт
	Результат = Номенклатура.ВидНоменклатуры;
КонецПроцедуры

// Заполняет тип номенклатуры
// 
// Параметры:
//  Номенклатура - ОпределяемыйТип.НоменклатураРМК номенклатура вид которой необходимо получить
//  Результат - ПеречислениеСсылка.ТипНоменклатуры - результат заполнения
//
Процедура ЗаполнитьТипНоменклатуры(Номенклатура, Результат) Экспорт
	Результат = Номенклатура.ТипНоменклатуры;
КонецПроцедуры

// Получает ссылку на подарочный сертификат по ГУИД.
//
// Параметры:
//  ГУИД - Строка - значение ГУИД, по которому необходимо получить подарочный сертификат.
//  Результат - ОпределяемыйТип.НоменклатураРМК, Неопределено - возвращаемый параметр для значения подарочного сертификата.
//
Процедура ПодарочныйСертификатПоГУИД(ГУИД, Результат) Экспорт
	
	Попытка
		
		ПодарочныйСертификат = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
		
		Если ПодарочныйСертификат.Наименование = "" Тогда
			ПодарочныйСертификат = Неопределено;
		КонецЕсли;
		
	Исключение
		ПодарочныйСертификат = Неопределено;
	КонецПопытки;
	
	Результат = ПодарочныйСертификат;
	
КонецПроцедуры

// Получает адрес таблицы значений с используемыми подарочными сертификатами.
//
// Параметры:
//  Адрес - Строка - переменная, куда будет записан адрес таблицы с подарочными сертификатами.
//
Процедура ПолучитьАдресТаблицыПодарочныхСертификатов(Адрес) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО Номенклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец
		|			И (НЕ ХарактеристикиНоменклатуры.ПометкаУдаления)
		|			И (ХарактеристикиНоменклатуры.Владелец ССЫЛКА Справочник.Номенклатура)
		|ГДЕ
		|	НЕ Номенклатура.ПометкаУдаления
		|	И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(перечисление.ТипыНоменклатуры.ПодарочныйСертификат)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПодарочныхСертификатов = РезультатЗапроса.Выгрузить();
	Адрес = ПоместитьВоВременноеХранилище(ТаблицаПодарочныхСертификатов);
	
КонецПроцедуры

// Определяет используются ли серии для номенкдатуры
//
// Параметры:
//  Номенклатура - ОпределяемыйТип.НоменклатураРМК - позиция номенклатуры, для которой будет определяться использование серий.
//  Результат - Булево - переменная, куда будет записан результат проверки использования серий.
//
Процедура ОпределитьИспользованиеСерий(Номенклатура, Результат) Экспорт
	
	Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ИспользоватьСерийныеНомера");
	
КонецПроцедуры

// Процедура определяет актуальный баланс подарочного сертификата.
//
// Параметры:
//  ПараметрыСертификата - Структура:
//    БалансСертификата - Число - баланс подарочного сертификата.
//    Сертификат - ОпределяемыйТип.НоменклатураРМК - подарочный сертификат.
//    Серия - ОпределяемыйТип.СерияРМК - серия подарочного сертификата.
//
Процедура ЗапроситьБалансСертификата(ПараметрыСертификата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодарочныеСертификатыОстатки.СуммаОстаток КАК Остаток
	|ИЗ
	|	РегистрНакопления.ПодарочныеСертификаты.Остатки(
	|			,
	|			ПодарочныйСертификат = &ПодарочныйСертификат
	|				И НомерСертификата = &НомерСертификата) КАК ПодарочныеСертификатыОстатки";
	
	Запрос.УстановитьПараметр("ПодарочныйСертификат", ПараметрыСертификата.Сертификат);
	Запрос.УстановитьПараметр("НомерСертификата", ПараметрыСертификата.Серия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПараметрыСертификата.БалансСертификата = Выборка.Остаток;
	КонецЕсли;
	
КонецПроцедуры

// Процедура корректирует цену подарочного сертификата в строке.
// Если текущая операция возврат и в текущей строке серийный подарочный сертификат, то цена должна быть установлена
// равной 0, чтобы запросить актуальный баланс сертификата.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ТекущаяСтрока - Структура - данные текущей строки.
//
Процедура СкорректироватьЦенуПодарочногоСертификата(Форма, ТекущаяСтрока) Экспорт
	
	Если НЕ ТекущаяСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	ОбнулитьБалансСертификата = Ложь;
	Если Не ОбщегоНазначенияРМК.ЭтоВидОперацииПродажа(Объект.ВидОперации) Тогда
		ОбнулитьБалансСертификата = Истина;
	ИначеЕсли ТекущаяСтрока.Цена = 0 Тогда
		ТекущаяСтрока.ПроизвольныйПодарочныйСертификат = Истина;
	КонецЕсли;
	
	Если ОбнулитьБалансСертификата И ТекущаяСтрока.НеобходимостьВводаСерии Тогда
		
		Если ТекущаяСтрока.Свойство("Цена") Тогда
			ТекущаяСтрока.Цена = 0;
		КонецЕсли;
		Если ТекущаяСтрока.Свойство("Сумма") Тогда
			ТекущаяСтрока.Сумма = 0;
		КонецЕсли;
		Если ТекущаяСтрока.Свойство("СуммаБезСкидки") Тогда
			ТекущаяСтрока.СуммаБезСкидки = 0;
		КонецЕсли;
		Если ТекущаяСтрока.Свойство("СуммаНДС") Тогда
			ТекущаяСтрока.СуммаНДС = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет коды маркировки по данным информационной базы, актуальные для строки товаров.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ТекущаяСтрока - Структура - данные текущей строки.
//  КодыМаркировки - Таблица значений, См. ОбщегоНазначенияРМК.КодыМаркировкиПоДаннымИБШаблон - возвращаемое значение.
//
Процедура ЗаполнитьКодыМаркировкиПоДаннымИБ(Форма, ТекущаяСтрока, КодыМаркировки) Экспорт
	
	ТаблицаТовары = РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.НоваяТаблицаПоискаВскрытыхПотребительскихУпаковок();
	
	НоваяСтрока = ТаблицаТовары.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
	НоваяСтрока.Серия = Неопределено;
	НоваяСтрока.УчитыватьСерии = ЗначениеЗаполнено(НоваяСтрока.Серия);
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Форма);
	Если ЗначениеЗаполнено(ТекущаяСтрока.Организация) Тогда
		ПараметрыСканирования.Организация = ТекущаяСтрока.Организация;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяСтрока.ТорговыйОбъект) Тогда
		ПараметрыСканирования.Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.ТорговыйОбъект, "СкладПродажи");
	КонецЕсли;
	
	КодыМаркировкиПодключенныеКОборудованиюРозлива = РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.ВскрытыеПотребительскиеУпаковкиПоТаблицеТоваров(ТаблицаТовары, ПараметрыСканирования, Истина);
	Для Каждого КодМаркировкаНаОборудованииРозлива Из КодыМаркировкиПодключенныеКОборудованиюРозлива Цикл
		
		Если ТекущаяСтрока.ОсобенностьУчета = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
			ПолныйКодМаркировки = КодМаркировкаНаОборудованииРозлива.КодМаркировкиСтрокой;
		ИначеЕсли ЗначениеЗаполнено(КодМаркировкаНаОборудованииРозлива.ПолныйКодМаркировки) Тогда
			ПолныйКодМаркировки = КодМаркировкаНаОборудованииРозлива.ПолныйКодМаркировки;
		Иначе
			Продолжить;
		КонецЕсли;
		
		КодМаркировки = КодыМаркировки.Добавить();
		КодМаркировки.ПолныйКодМаркировки = КодМаркировкаНаОборудованииРозлива.ПолныйКодМаркировки;
		Если ЗначениеЗаполнено(КодМаркировкаНаОборудованииРозлива.Комментарий) Тогда
			КодМаркировки.КодМаркировкиПредставление = КодМаркировкаНаОборудованииРозлива.Комментарий;
		Иначе
			КодМаркировки.КодМаркировкиПредставление = КодМаркировкаНаОборудованииРозлива.КодМаркировкиСтрокой;
		КонецЕсли;
		
		КодМаркировки.ОстатокПоКодуМаркировки = КодМаркировкаНаОборудованииРозлива.ЕмкостьПотребительскойУпаковки;
	КонецЦикла;
	
КонецПроцедуры

// Рассчитывает цену на товар, который был выбран в строке быстрого добавления товара..
//
// Параметры:
//  ПараметрыРасчетаЦены - см. ОбщегоНазначенияРМК.ПараметрыРасчетаЦены().
//
Процедура РассчитатьЦенуВыбранногоТовара(ПараметрыРасчетаЦены) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка,
	|	ВЫБОР
	|		КОГДА НЕ ЦеныНоменклатурыСрезПоследних.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА СпрУпаковкиНоменклатуры.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Коэффициент
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Дата,
	|			Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика
	|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК СпрУпаковкиНоменклатуры
	|		ПО ЦеныНоменклатурыСрезПоследних.Упаковка = СпрУпаковкиНоменклатуры.Ссылка");
	
	Запрос.УстановитьПараметр("Номенклатура", ПараметрыРасчетаЦены.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВидЦены", ПараметрыРасчетаЦены.ВидЦены);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПараметрыРасчетаЦены.Цена = Выборка.Цена / Выборка.Коэффициент;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает признаки видов оплат в настройкахРМК по данным информационной базы.
//
// Параметры:
//  ОбъектНастройкаРМК - СправочникОбъект.НастройкиРабочегоМестаКассира - настройка РМК.
//
Процедура ОбновитьНастройкиПризнаковВидовОплат(ОбъектНастройкаРМК) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерверЛояльностиПолучательДанных") И Ложь Тогда
		ОбъектНастройкаРМК.ИспользоватьОплатуБонусами = Истина;
		ОбъектНастройкаРМК.ИспользоватьОплатуСертификатами = Истина;
	Иначе
		ОбъектНастройкаРМК.ИспользоватьОплатуБонусами = ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммыЛояльности");
		ОбъектНастройкаРМК.ИспользоватьОплатуСертификатами = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает признак использовать оплату платежными картами в настройкахРМК по данным информационной базы.
//
// Параметры:
//  ОбъектНастройкаРМК - СправочникОбъект.НастройкиРабочегоМестаКассира - настройка РМК.
//
Процедура ОбновитьПризнакОплатыПлатежнымиКартами(ОбъектНастройкаРМК) Экспорт
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами") Тогда
		ОбъектНастройкаРМК.ИспользоватьОплатуПлатежнымиКартами = Истина;
	КонецЕсли;
КонецПроцедуры

// Определяет является ли переданное значение особенности учета альтернативный табак.
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК - особенность учета.
//  Результат - Булево - Истина, если особенность учета - альтернативный табак.
//
Процедура ОпределитьОсобенностьУчетаАльтернативныйТабак(ОсобенностьУчета, Результат) Экспорт
	
	Если ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак Тогда
		Результат = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Определяет является ли переданное значение типа номенклатуры подарочный сертификат.
//
// Параметры:
//  ТипНоменклатуры - ОпределяемыйТип.ТипыНоменклатурыРМК - тип номенклатуры.
//  Результат - Булево - Истина, если типа номенклатуры - подарочный сертификат.
//
Процедура ОпределитьТипНоменклатурыПодарочныйСертификат(ТипНоменклатуры, Результат) Экспорт
	
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
		Результат = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Функция преобразует дерево значений в таблицу значений.
//
Функция ДеревоЗначенийВТаблицуЗначений(Дерево, Таблица = Неопределено) Экспорт
	
	Если Таблица = Неопределено Тогда
		
		Таблица = Новый ТаблицаЗначений;
		
		Для Каждого Колонка Из Дерево.Колонки Цикл
			Таблица.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл

		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ДеревоЗначенийВТаблицуЗначений(СтрокаДерева, Таблица);
		КонецЕсли;

	КонецЦикла;
	
	Возврат Таблица;
КонецФункции

// Процедура заполняет остаток по строке
//
// Параметры:
//  ДанныеСтроки - Структура - данные текущей строки.
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК - торговый объект для отбора остатков
//
Процедура ЗаполнитьКолонкуОстаток(ДанныеСтроки, ТорговыйОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.КоличествоОстаток - ТоварыНаСкладахОстатки.РезервОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика
	|				И Склад = &СкладПродажи) КАК ТоварыНаСкладахОстатки";
	Запрос.УстановитьПараметр("Номенклатура", ДанныеСтроки.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", ДанныеСтроки.Характеристика);
	
	СкладПродажи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТорговыйОбъект, "СкладПродажи");
	Запрос.УстановитьПараметр("СкладПродажи", СкладПродажи);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ДанныеСтроки.КоличествоОстаток = Выборка.КоличествоОстаток;
	Иначе
		ДанныеСтроки.КоличествоОстаток = 0;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Заполняет таблицу данных контрагента по переданному контрагенту
//
// Параметры:
//  Контрагент - ОпределяемыйТип.КонтрагентРМК.
//  АдресТаблицыДанныеКлиента - Строка - Адрес таблицы данных клиентов
//  	*Карта - ссылка на карту лояльности
//  	*НомерКарты - номер карты лояльности (штрихкод или магнитный код)
//  	*НомерТелефона - номер телефона владельца карты лояльности
//
Процедура ПолучитьДанныеЛокальнойКартыКонтрагента(Контрагент, АдресТаблицыДанныеКлиента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаДанныеКартыЛояльностиКлиента = ПолучитьИзВременногоХранилища(АдресТаблицыДанныеКлиента);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИнформационныеКарты.Ссылка КАК Ссылка,
	|	ИнформационныеКарты.ВладелецКарты КАК ВладелецКарты,
	|	МИНИМУМ(ИнфКартыКонтактнаяИнформацияТелефон.НомерСтроки) КАК НомерСтрокиКартаТелефон,
	|	МИНИМУМ(ФизЛицаКонтактнаяИнформацияТелефон.НомерСтроки) КАК НомерСтрокиФизЛицоТелефон,
	|	МИНИМУМ(КонтрагентыКонтактнаяИнформацияТелефон.НомерСтроки) КАК НомерСтрокиКонтрагентТелефон,
	|	МАКСИМУМ(ЕСТЬNULL(Штрихкоды.Штрихкод, """")) КАК КодКартыШтрихкод,
	|	ИнформационныеКарты.ВидКарты КАК ВидКарты
	|ПОМЕСТИТЬ КартыНомераСтрокКИ
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты.КонтактнаяИнформация КАК ИнфКартыКонтактнаяИнформацияТелефон
	|		ПО ИнформационныеКарты.Ссылка = ИнфКартыКонтактнаяИнформацияТелефон.Ссылка
	|			И (ИнфКартыКонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (НЕ ИнфКартыКонтактнаяИнформацияТелефон.НомерТелефона = """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты.КонтактнаяИнформация КАК ИнфКартыКонтактнаяИнформацияАдресЭП
	|		ПО ИнформационныеКарты.Ссылка = ИнфКартыКонтактнаяИнформацияАдресЭП.Ссылка
	|			И (ИнфКартыКонтактнаяИнформацияАдресЭП.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|			И (НЕ ИнфКартыКонтактнаяИнформацияАдресЭП.АдресЭП = """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизЛицаКонтактнаяИнформацияТелефон
	|		ПО ИнформационныеКарты.ВладелецКарты = ФизЛицаКонтактнаяИнформацияТелефон.Ссылка
	|			И (ФизЛицаКонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (НЕ ФизЛицаКонтактнаяИнформацияТелефон.НомерТелефона = """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизЛицаКонтактнаяИнформацияАдресЭП
	|		ПО ИнформационныеКарты.ВладелецКарты = ФизЛицаКонтактнаяИнформацияАдресЭП.Ссылка
	|			И (ФизЛицаКонтактнаяИнформацияАдресЭП.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|			И (НЕ ФизЛицаКонтактнаяИнформацияАдресЭП.АдресЭП = """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформацияТелефон
	|		ПО ИнформационныеКарты.ВладелецКарты = КонтрагентыКонтактнаяИнформацияТелефон.Ссылка
	|			И (КонтрагентыКонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (НЕ КонтрагентыКонтактнаяИнформацияТелефон.НомерТелефона = """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформацияАдресЭП
	|		ПО ИнформационныеКарты.ВладелецКарты = КонтрагентыКонтактнаяИнформацияАдресЭП.Ссылка
	|			И (КонтрагентыКонтактнаяИнформацияАдресЭП.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|			И (НЕ КонтрагентыКонтактнаяИнформацияАдресЭП.АдресЭП = """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО ИнформационныеКарты.Ссылка = Штрихкоды.Владелец
	|ГДЕ
	|	ИнформационныеКарты.ВладелецКарты = &ВладелецКарты
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнформационныеКарты.Ссылка,
	|	ИнформационныеКарты.ВладелецКарты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КартыНомераСтрокКИ.Ссылка КАК Карта,
	|	ЕСТЬNULL(ИнфКартыКонтактнаяИнформацияТелефон.НомерТелефона, ЕСТЬNULL(ФизЛицаКонтактнаяИнформацияТелефон.НомерТелефона, ЕСТЬNULL(КонтрагентыКонтактнаяИнформацияТелефон.НомерТелефона, """"))) КАК НомерТелефона,
	|	КартыНомераСтрокКИ.КодКартыШтрихкод КАК КодКартыШтрихкод,
	|	СпрИнформационныеКарты.КодКарты КАК КодКартыМагнитный,
	|	КартыНомераСтрокКИ.ВидКарты КАК ВидКарты
	|ИЗ
	|	КартыНомераСтрокКИ КАК КартыНомераСтрокКИ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СпрКонтрагенты
	|		ПО КартыНомераСтрокКИ.ВладелецКарты = СпрКонтрагенты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК СпрФизическиеЛица
	|		ПО КартыНомераСтрокКИ.ВладелецКарты = СпрФизическиеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты.КонтактнаяИнформация КАК ИнфКартыКонтактнаяИнформацияТелефон
	|		ПО КартыНомераСтрокКИ.Ссылка = ИнфКартыКонтактнаяИнформацияТелефон.Ссылка
	|			И КартыНомераСтрокКИ.НомерСтрокиКартаТелефон = ИнфКартыКонтактнаяИнформацияТелефон.НомерСтроки
	|			И (ИнфКартыКонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизЛицаКонтактнаяИнформацияТелефон
	|		ПО КартыНомераСтрокКИ.ВладелецКарты = ФизЛицаКонтактнаяИнформацияТелефон.Ссылка
	|			И КартыНомераСтрокКИ.НомерСтрокиФизЛицоТелефон = ФизЛицаКонтактнаяИнформацияТелефон.НомерСтроки
	|			И (ФизЛицаКонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформацияТелефон
	|		ПО КартыНомераСтрокКИ.ВладелецКарты = КонтрагентыКонтактнаяИнформацияТелефон.Ссылка
	|			И КартыНомераСтрокКИ.НомерСтрокиКонтрагентТелефон = КонтрагентыКонтактнаяИнформацияТелефон.НомерСтроки
	|			И (КонтрагентыКонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК СпрИнформационныеКарты
	|		ПО КартыНомераСтрокКИ.Ссылка = СпрИнформационныеКарты.Ссылка";
	Запрос.УстановитьПараметр("ВладелецКарты", Контрагент);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ТаблицаДанныеКартыЛояльностиКлиента.Добавить();
			НомерКарты = "";
			Если Выборка.ВидКарты = Перечисления.ВидыИнформационныхКарт.Магнитная Тогда
				НомерКарты = ?(СокрЛП(Выборка.КодКартыМагнитный) = "", Выборка.КодКартыШтрихкод, Выборка.КодКартыМагнитный);
			Иначе
				НомерКарты = ?(СокрЛП(Выборка.КодКартыШтрихкод) = "", Выборка.КодКартыМагнитный, Выборка.КодКартыШтрихкод);
			КонецЕсли;
			
			НоваяСтрока.Карта = Выборка.Карта;
			НоваяСтрока.НомерКарты = НомерКарты;
			НоваяСтрока.НомерТелефона = Выборка.НомерТелефона;
		КонецЦикла;
	КонецЕсли;
	
	АдресТаблицыДанныеКлиента = ПоместитьВоВременноеХранилище(ТаблицаДанныеКартыЛояльностиКлиента);

КонецПроцедуры

// Определяет факт наличия синхронизации нового РМК с мастер - системой.
//
// Параметры:
//  НастройкаСуществует - Булево - истина, если настройка существует.
//
Процедура ОпределитьСуществованиеНастройкиСинхронизацииДанных(НастройкаСуществует) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОбменСУРМК.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.ОбменСУРМК КАК ОбменСУРМК
	|ГДЕ
	|	НЕ ОбменСУРМК.ЭтотУзел
	|";
	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатЗапроса = Запрос.Выполнить();

	Если Не РезультатЗапроса.Пустой() Тогда
		НастройкаСуществует = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет нормализованный код маркировки
//
// Параметры:
//  КодМаркировки - Строка - исходный код маркировки
//  КодНормализованный - Строка - нормализованный код маркировки

Процедура ЗаполнитьНормализованныйКодМаркировки(КодМаркировки, КодНормализованный) Экспорт
	
	СимволGS1 = МенеджерОборудованияМаркировкаКлиентСервер.РазделительGS1();
	Разделитель = МенеджерОборудованияМаркировкаКлиентСервер.ЭкранированныйСимволGS1();
	КодМаркировкиОригинал = СтрЗаменить(КодМаркировки, Разделитель, СимволGS1);
	ДанныеРазбораКода = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(КодМаркировкиОригинал);
	
	Если НЕ ДанныеРазбораКода = Неопределено Тогда
		КодНормализованный = ДанныеРазбораКода.НормализованныйКодМаркировки;
	Иначе
		КодНормализованный = КодМаркировкиОригинал;
	КонецЕсли;
	
КонецПроцедуры

// Определяет является ли период хранения бессрочным.
//
// Параметры:
//  РезультатФункции - Булево - признак, который говорит, что период хранения бессрочный.
//  ПериодХранения - ПеречислениеСсылка.ПериодХраненияИсторииПлатежныхОпераций - текущий период хранения.
//
Процедура ОпределитьСрокХраненияВесьПериод(РезультатФункции, ПериодХранения) Экспорт
	
	Если ПериодХранения = Перечисления.ПериодХраненияИсторииПлатежныхОпераций.ВсеВремя Тогда
		РезультатФункции = Истина;
	Иначе
		РезультатФункции = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Определяет является ли период хранения - день.
//
// Параметры:
//  РезультатФункции - Булево - признак, который говорит, что период хранения = День.
//  ПериодХранения - ПеречислениеСсылка.ПериодХраненияИсторииПлатежныхОпераций - текущий период хранения.
//
Процедура ОпределитьСрокХраненияДень(РезультатФункции, ПериодХранения) Экспорт
	
	Если ПериодХранения = Перечисления.ПериодХраненияИсторииПлатежныхОпераций.День Тогда
		РезультатФункции = Истина;
	Иначе
		РезультатФункции = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Определяет является ли период хранения - неделя.
//
// Параметры:
//  РезультатФункции - Булево - признак, который говорит, что период хранения = Неделя.
//  ПериодХранения - ПеречислениеСсылка.ПериодХраненияИсторииПлатежныхОпераций - текущий период хранения.
//
Процедура ОпределитьСрокХраненияНеделя(РезультатФункции, ПериодХранения) Экспорт
	
	Если ПериодХранения = Перечисления.ПериодХраненияИсторииПлатежныхОпераций.Неделя Тогда
		РезультатФункции = Истина;
	Иначе
		РезультатФункции = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Определяет является ли период хранения - декада.
//
// Параметры:
//  РезультатФункции - Булево - признак, который говорит, что период хранения = Декада.
//  ПериодХранения - ПеречислениеСсылка.ПериодХраненияИсторииПлатежныхОпераций - текущий период хранения.
//
Процедура ОпределитьСрокХраненияДекада(РезультатФункции, ПериодХранения) Экспорт
	
	Если ПериодХранения = Перечисления.ПериодХраненияИсторииПлатежныхОпераций.Декада Тогда
		РезультатФункции = Истина;
	Иначе
		РезультатФункции = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Определяет является ли период хранения - месяц.
//
// Параметры:
//  РезультатФункции - Булево - признак, который говорит, что период хранения = Месяц.
//  ПериодХранения - ПеречислениеСсылка.ПериодХраненияИсторииПлатежныхОпераций - текущий период хранения.
//
Процедура ОпределитьСрокХраненияМесяц(РезультатФункции, ПериодХранения) Экспорт
	
	Если ПериодХранения = Перечисления.ПериодХраненияИсторииПлатежныхОпераций.Месяц Тогда
		РезультатФункции = Истина;
	Иначе
		РезультатФункции = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Определяет является ли период хранения - квартал.
//
// Параметры:
//  РезультатФункции - Булево - признак, который говорит, что период хранения = Квартал.
//  ПериодХранения - ПеречислениеСсылка.ПериодХраненияИсторииПлатежныхОпераций - текущий период хранения.
//
Процедура ОпределитьСрокХраненияКвартал(РезультатФункции, ПериодХранения) Экспорт
	
	Если ПериодХранения = Перечисления.ПериодХраненияИсторииПлатежныхОпераций.Квартал Тогда
		РезультатФункции = Истина;
	Иначе
		РезультатФункции = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Определяет является ли период хранения - полугодие.
//
// Параметры:
//  РезультатФункции - Булево - признак, который говорит, что период хранения = Полугодие.
//  ПериодХранения - ПеречислениеСсылка.ПериодХраненияИсторииПлатежныхОпераций - текущий период хранения.
//
Процедура ОпределитьСрокХраненияПолугодие(РезультатФункции, ПериодХранения) Экспорт
	
	Если ПериодХранения = Перечисления.ПериодХраненияИсторииПлатежныхОпераций.Полугодие Тогда
		РезультатФункции = Истина;
	Иначе
		РезультатФункции = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Определяет является ли период хранения - год.
//
// Параметры:
//  РезультатФункции - Булево - признак, который говорит, что период хранения = Год.
//  ПериодХранения - ПеречислениеСсылка.ПериодХраненияИсторииПлатежныхОпераций - текущий период хранения.
//
Процедура ОпределитьСрокХраненияГод(РезультатФункции, ПериодХранения) Экспорт
	
	Если ПериодХранения = Перечисления.ПериодХраненияИсторииПлатежныхОпераций.Год Тогда
		РезультатФункции = Истина;
	Иначе
		РезультатФункции = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет признак использования КМ по номенклатуре
//
// Параметры:
//  Номенклатура - Ссылка - номенклатура
//  НоменклатураИспользующаяКМ - Булево - Ложь, если номенклатура маркируется средством идентификации, не имеющий кода маркировки, иначе Истина
//
Процедура ЗаполнитьПризнакИспользованияКМПоНоменклатуре(Номенклатура, НоменклатураИспользующаяКМ) Экспорт
	
	НоменклатураИспользующаяКМ = Ложь;
	
	МассивПредметовРасчетаБезКМ = Новый Массив;
	МассивПредметовРасчетаБезКМ.Добавить(Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИИмеющийКМ);
	МассивПредметовРасчетаБезКМ.Добавить(Перечисления.ПризнакиПредметаРасчета.ТоварМаркируемыйСИИмеющийКМ);
	
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		ВидНоменклатуры = Номенклатура.ВидНоменклатуры;
		ПризнакПредметаРасчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ПризнакПредметаРасчета");
	Иначе
		ПризнакПредметаРасчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ПризнакПредметаРасчета");
	КонецЕсли;
	
	Если МассивПредметовРасчетаБезКМ.Найти(ПризнакПредметаРасчета.ТипПризнакаПредметаРасчета) <> Неопределено Тогда
		НоменклатураИспользующаяКМ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьИспользованиеРазрешительногоРежимаГосИС(Форма, Результат) Экспорт
	
	Результат = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП");
	
КонецПроцедуры

// Заполняет признак ведения учета маркируемой продукци переданного вида.
// 
// Параметры:
//  ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции
//  Результат - Булево - признак ведения учета маркируемой продукции переданного вида.
//
Процедура ЗаполнитьПризнакВедениеУчетМаркируемойПродукции(ВидМаркируемойПродукции, Результат) Экспорт
	
	Результат = ОбщегоНазначенияИСМПВызовСервера.ВестиУчетМаркируемойПродукции(ВидМаркируемойПродукции);
	
КонецПроцедуры

// Обновляет кэш особенностей учета номенклатуры, которую можно продать/вернуть без марки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма РМК
//
Процедура ОбновитьКэшОсобенностейУчетаБезМарки(Форма) Экспорт
	
	Форма.ОсобенностиУчетаДляПродажиБезМарки.Очистить();
	Форма.ОсобенностиУчетаДляВозвратаБезМарки.Очистить();
	ТекущаяДатаНачалоДня = НачалоДня(ТекущаяДатаСеанса());
	
	МассивВидовПродукцииПродажи = Новый Массив(
		ИнтеграцияИСМПКлиентСерверПовтИсп.ВидыПродукцииТестовогоПериода(ТекущаяДатаНачалоДня));
	
	МассивВидовПродукцииВозврата = Новый Массив(
		ИнтеграцияИСМПКлиентСерверПовтИсп.ВидыПродукцииТестовогоПериода(Неопределено));
		
	МассивОсобеностейУчетаПродажи = Новый Массив;
	Для Каждого ВидПродукции Из МассивВидовПродукцииПродажи Цикл
		ОсобенностьУчета = ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции);
		МассивОсобеностейУчетаПродажи.Добавить(ОсобенностьУчета);
	КонецЦикла;
	
	МассивОсобеностейУчетаВозврата = Новый Массив;
	Для Каждого ВидПродукции Из МассивВидовПродукцииВозврата Цикл
		ОсобенностьУчета = ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции);
		МассивОсобеностейУчетаВозврата.Добавить(ОсобенностьУчета);
	КонецЦикла;
	
	Форма.ОсобенностиУчетаДляПродажиБезМарки.ЗагрузитьЗначения(МассивОсобеностейУчетаПродажи);
	Форма.ОсобенностиУчетаДляВозвратаБезМарки.ЗагрузитьЗначения(МассивОсобеностейУчетаВозврата);
	
	Форма.ДатаКэшаОсобенностейУчетаБезМарки = ТекущаяДатаНачалоДня;
	
КонецПроцедуры

// Заполняет номенклатуру по уникальному идентификатору
//
// Параметры:
//  НоменклатураГУИД - Уникальный идентификатор
//  Номенклатура - СправочникСсылка.Номенклатура
//
Процедура ЗаполнитьНоменклатуруПоУникальномуИдентификатору(НоменклатураГУИД, Номенклатура) Экспорт
	
	Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(НоменклатураГУИД);

КонецПроцедуры

// Заполняет характеристику по уникальному идентификатору
//
// Параметры:
//  ХарактеристикаГУИД - Уникальный идентификатор
//  Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
//
Процедура ЗаполнитьХарактеристикуПоУникальномуИдентификатору(ХарактеристикаГУИД, Характеристика) Экспорт
	
	Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(ХарактеристикаГУИД);

КонецПроцедуры

// Заполняет упаковку по уникальному идентификатору
//
// Параметры:
//  УпаковкаГУИД - Уникальный идентификатор
//  Упаковка - СправочникСсылка.УпаковкиНоменклатуры
//
Процедура ЗаполнитьУпаковкуПоУникальномуИдентификатору(УпаковкаГУИД, Упаковка) Экспорт
	
	Упаковка = Справочники.УпаковкиНоменклатуры.ПолучитьСсылку(УпаковкаГУИД);

КонецПроцедуры

// Заполняет день недели по номеру дня
//
// Параметры:
//  НомерДняНедели - Число
//  ДеньНедели - ПеречислениеСсылка.ДниНедели
//
Процедура ЗаполнитьДеньНеделиПоНомеруДня(НомерДняНедели, ДеньНедели) Экспорт
	
	ДеньНедели = Неопределено;
	НомераДнейНедели = Новый Соответствие;
	НомераДнейНедели.Вставить(1, Перечисления.ДниНедели.Понедельник);
	НомераДнейНедели.Вставить(2, Перечисления.ДниНедели.Вторник);
	НомераДнейНедели.Вставить(3, Перечисления.ДниНедели.Среда);
	НомераДнейНедели.Вставить(4, Перечисления.ДниНедели.Четверг);
	НомераДнейНедели.Вставить(5, Перечисления.ДниНедели.Пятница);
	НомераДнейНедели.Вставить(6, Перечисления.ДниНедели.Суббота);
	НомераДнейНедели.Вставить(7, Перечисления.ДниНедели.Воскресенье);
	
	ЗначениеДняНедели = НомераДнейНедели.Получить(НомерДняНедели);
	Если Не ЗначениеДняНедели = Неопределено Тогда
		ДеньНедели = ЗначениеДняНедели;
	КонецЕсли;

КонецПроцедуры

// Заполняет колонки таблиц, которые необходимо передавать на сервер для подготовки данных перед пробитием чека
//
// Параметры:
//  КолонкиТаблицФормы - Структура - структура, где именем ключа является имя таблицы,
//									значением массив с именами колонок.
//
Процедура ЗаполнитьКолонкиТаблицФормыРабочегоМестаКассира(КолонкиТаблицФормы) Экспорт
	
	КвалификаторСтроки = Новый КвалификаторыСтроки(50);
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТипЧислоЦелое9 = ОбщегоНазначения.ОписаниеТипаЧисло(9, 0, ДопустимыйЗнак.Неотрицательный);
	ТипЧислоЦелое5 = ОбщегоНазначения.ОписаниеТипаЧисло(5, 0, ДопустимыйЗнак.Любой);
	ТипРезерв = Метаданные.ОпределяемыеТипы.РезервРМК.Тип;
	ТипНеотрицательноеЧисло15_2 = Метаданные.ОпределяемыеТипы.НеотрицательноеЧисло15_2_РМК.Тип;
	ТипЧисло15_2_РМК = Метаданные.ОпределяемыеТипы.Число15_2РМК.Тип;
	ТипСклад = Новый ОписаниеТипов("СправочникСсылка.Склады");
	ТипСтрока250 = ОбщегоНазначения.ОписаниеТипаСтрока(250);
	ТипТипНоменклатуры = Метаданные.ОпределяемыеТипы.ТипыНоменклатурыРМК.Тип;
	
	КолонкиТоваров
		= ПолучитьМассивКолонокКоллекции(Метаданные.Обработки.РабочееМестоКассира.ТабличныеЧасти.Товары.Реквизиты);
	ДобавитьОписаниеКолонкиВКоллекцию(КолонкиТоваров, "ИдентификаторСтрокиНаФорме", Новый ОписаниеТипов("Число"));
	ТипОсобенностьУчета = Метаданные.ОпределяемыеТипы.ОсобенностиУчетаНоменклатурыРМК.Тип;
	ДобавитьОписаниеКолонкиВКоллекцию(КолонкиТоваров, "ОсобенностьУчета", ТипОсобенностьУчета);
	ДобавитьОписаниеКолонкиВКоллекцию(КолонкиТоваров, "Резерв", ТипРезерв);
	ДобавитьОписаниеКолонкиВКоллекцию(КолонкиТоваров, "ТоварКЗамене", ТипБулево);
	ДобавитьОписаниеКолонкиВКоллекцию(КолонкиТоваров, "НомерСтроки", ТипЧислоЦелое9);
	ДобавитьОписаниеКолонкиВКоллекцию(КолонкиТоваров, "Склад", ТипСклад);
	ДобавитьОписаниеКолонкиВКоллекцию(КолонкиТоваров, "СуммаСкидокОбщая", ТипЧисло15_2_РМК);
	ДобавитьОписаниеКолонкиВКоллекцию(КолонкиТоваров, "ПредставлениеНоменклатураХарактеристика", ТипСтрока250);
	ДобавитьОписаниеКолонкиВКоллекцию(КолонкиТоваров, "ТипНоменклатуры", ТипТипНоменклатуры);
	ДобавитьОписаниеКолонкиВКоллекцию(КолонкиТоваров, "ПоштучноеВыбытие", ТипБулево);
	
	КолонкиОплаты
		= ПолучитьМассивКолонокКоллекции(Метаданные.Обработки.РабочееМестоКассира.ТабличныеЧасти.Оплата.Реквизиты);
	
	ТипЧисло15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Любой);
	ТипСтрокаИдентификатор = ОбщегоНазначения.ОписаниеТипаСтрока(36);
	ТипСкидкаНаценка = Метаданные.ОпределяемыеТипы.СкидкаНаценкаРМК.Тип;
	КолонкиСкидок = Новый Массив;
	ДобавитьОписаниеКолонкиВКоллекцию(КолонкиСкидок, "КлючСвязи", ТипЧислоЦелое5);
	ДобавитьОписаниеКолонкиВКоллекцию(КолонкиСкидок, "СкидкаНаценка", ТипСкидкаНаценка);
	ДобавитьОписаниеКолонкиВКоллекцию(КолонкиСкидок, "Сумма", ТипЧисло15_2);
	ДобавитьОписаниеКолонкиВКоллекцию(КолонкиСкидок, "ЗначениеСкидкиНаценки", ТипЧисло15_2);
	ДобавитьОписаниеКолонкиВКоллекцию(КолонкиСкидок, "ИдентификаторСтроки", ТипСтрокаИдентификатор);
	ДобавитьОписаниеКолонкиВКоллекцию(КолонкиСкидок, "ПриВозврате", ТипБулево);
	
	ТипТолькоДата = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата);
	ТипБонуснаяПрограмма = Метаданные.ОпределяемыеТипы.БонуснаяПрограммаРМК.Тип;
	КолонкиБонусныхБаллов = Новый Массив;
	ДобавитьОписаниеКолонкиВКоллекцию(КолонкиБонусныхБаллов, "КлючСвязи", ТипЧислоЦелое5);
	ДобавитьОписаниеКолонкиВКоллекцию(КолонкиБонусныхБаллов, "СкидкаНаценка", ТипСкидкаНаценка);
	ДобавитьОписаниеКолонкиВКоллекцию(КолонкиБонусныхБаллов, "БонуснаяПрограмма", ТипБонуснаяПрограмма);
	ДобавитьОписаниеКолонкиВКоллекцию(КолонкиБонусныхБаллов, "ДатаНачисления", ТипТолькоДата);
	ДобавитьОписаниеКолонкиВКоллекцию(КолонкиБонусныхБаллов, "ДатаСписания", ТипТолькоДата);
	ДобавитьОписаниеКолонкиВКоллекцию(КолонкиБонусныхБаллов, "КоличествоБонусныхБаллов", ТипЧисло15_2);
	
	КолонкиТаблицФормы.Вставить("Товары", КолонкиТоваров);
	КолонкиТаблицФормы.Вставить("Оплата", КолонкиОплаты);
	КолонкиТаблицФормы.Вставить("ТаблицаБонусныеБаллы", КолонкиБонусныхБаллов);
	КолонкиТаблицФормы.Вставить("ТаблицаСкидкиНаценки", КолонкиСкидок);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Конвертация_настроек_РМК_СлужебныеПроцедурыИФункции

Функция ДействующиеНастройкиРМКДляВсехРабочихМест()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("НастройкиРМК");
	Результат.Колонки.Добавить("НастройкиБРМК");
	Результат.Колонки.Добавить("РабочееМесто");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	НастройкаРМКНаКомпьютере.НастройкаРМК КАК НастройкиРМК,
	|	ЕСТЬNULL(НастройкиРабочегоМестаКассира.Ссылка, ЗНАЧЕНИЕ(Справочник.НастройкиРабочегоМестаКассира.ПустаяСсылка)) КАК НастройкиБРМК,
	|	РабочиеМеста.Ссылка КАК РабочееМесто
	|ИЗ
	|	РегистрСведений.НастройкаРМКНаКомпьютере КАК НастройкаРМКНаКомпьютере
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РабочиеМеста КАК РабочиеМеста
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
	|			ПО РабочиеМеста.Ссылка = НастройкиРабочегоМестаКассира.РабочееМесто
	|		ПО НастройкаРМКНаКомпьютере.Компьютер = РабочиеМеста.ИмяКомпьютера
	|ГДЕ
	|	НЕ РабочиеМеста.ПометкаУдаления
	|	И НЕ НастройкиРабочегоМестаКассира.ПометкаУдаления");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СозданыНастройкиБРМКДляТекущегоРабочегоМеста()
	
	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	
	Запрос = Новый Запрос( "ВЫБРАТЬ
	|	НастройкиРабочегоМестаКассира.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
	|ГДЕ
	|	НЕ НастройкиРабочегоМестаКассира.ПометкаУдаления
	|	И НастройкиРабочегоМестаКассира.РабочееМесто = &РабочееМесто");
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	
	Результат = Запрос.Выполнить().Выбрать();
	Возврат Результат.Следующий();

КонецФункции

Процедура АктуализироватьНастройкуРМК(НастройкиБРМК, НастройкиРМК = Неопределено, РабочееМесто = Неопределено)
	
	ТекущееРабочееМесто = ?(ЗначениеЗаполнено(РабочееМесто), РабочееМесто,
		МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	СозданыНастройкиБРМК = ЗначениеЗаполнено(НастройкиБРМК);
	
	ЕстьИсходныеДанныеДляКонвертации = ЗначениеЗаполнено(НастройкиРМК);
	
	ОбновитьНастройкиБРМК = Ложь;
	НастройкиБРМККИзменению = ?(СозданыНастройкиБРМК, НастройкиБРМК.ПолучитьОбъект(),
		Справочники.НастройкиРабочегоМестаКассира.СоздатьЭлемент());
		
	Если ЕстьИсходныеДанныеДляКонвертации Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	РаспределениеНоменклатуры.ТоварнаяГруппа КАК ТоварнаяГруппа
		|ИЗ
		|	РегистрСведений.РаспределениеНоменклатуры КАК РаспределениеНоменклатуры
		|ГДЕ
		|	РаспределениеНоменклатуры.РабочееМесто = &РабочееМесто");
		Запрос.УстановитьПараметр("РабочееМесто", ТекущееРабочееМесто);
		Выборка = Запрос.Выполнить().Выбрать();
		
		РаспределятьПродажи = Выборка.Количество() > 1;
		
		ИзменитьНастройкуРаспределенияПродажи = (НастройкиБРМККИзменению.ПродажиСНесколькихКассККМ <> РаспределятьПродажи);
		
		ОбновитьНастройкиБРМК = ИзменитьНастройкуРаспределенияПродажи;
		
		Если ИзменитьНастройкуРаспределенияПродажи Тогда
			НастройкиБРМККИзменению.ПродажиСНесколькихКассККМ = РаспределятьПродажи;
		КонецЕсли;
		
		НастройкиБРМККИзменению.СворачиватьСтрокиПриПечатиЧека = НастройкиРМК.ОбъединятьПозицииСОдинаковымТоваром;
		НастройкиБРМККИзменению.ЗакрыватьПодборПриВыбореТовара = НастройкиРМК.ЗакрыватьПодборПриВыбореТовара;
		НастройкиБРМККИзменению.ПоказыватьАртикулНоменклатуры = НастройкиРМК.ПоказыватьАртикулНоменклатуры;
		НастройкиБРМККИзменению.ПоказыватьКодНоменклатуры = НастройкиРМК.ПоказыватьКодНоменклатуры;
		
		
	//конвертация комбинаций горячих клавиш: кнопки нижней панели
		Если НастройкиРМК.КнопкиНижнейПанели.Количество() > 0 Тогда
				
				Запрос.Текст = "ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО01БыстрыеТовары""
				|			ТОГДА ""ОткрытьПанельИзбранныхТоваров""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО13ВвестиВыемкаДенег""
				|			ТОГДА ""Выемка""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО02ВвестиВнесениеДенег""
				|			ТОГДА ""Внесение""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО12ПолучитьВес""
				|			ТОГДА ""ПолучитьВес""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО26ОтчетБезГашения""
				|			ТОГДА ""СнятьОтчетБезГашения""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО07ОткрытьДенежныйЯщик""
				|			ТОГДА ""ОткрытьДенежныйЯщикПриВыдачеНаличных""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО27ПродажаПоЗаказу""
				|			ТОГДА ""ПродажаПоЗаказу""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО03ЗаменитьПрава""
				|			ТОГДА ""СменитьКассира""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО04ОтложитьЧек""
				|			ТОГДА ""ОтложитьЧек""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО06ВвестиШтрихкод""
				|			ТОГДА ""НайтиПоШтрихкоду""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО25ПечатьПробитогоЧека""
				|			ТОГДА ""ПовторнаяПечатьЧека""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО23ВвестиСерии""
				|			ТОГДА ""УказатьСерии""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО14Продавец""
				|			ТОГДА ""ДобавитьПродавца""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО21ПробитьЧек""
				|			ТОГДА ""ПробитьЧек""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО31ПолучитьДокументРасчета""
				|			ТОГДА ""ДокументРасчета""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО18ОткрытьПодарочныеСертификаты""
				|			ТОГДА ""ОплатаСертификатом""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО35ЗаявлениеНаВозврат""
				|			ТОГДА ""РаспечататьЗаявлениеНаВозврат""
				|		ИНАЧЕ ""-""
				|	КОНЕЦ КАК ПодменноеИмяКнопки,
				|	НастройкиРМККнопкиНижнейПанели.АкселераторAlt КАК Alt,
				|	НастройкиРМККнопкиНижнейПанели.АкселераторCtrl КАК Ctrl,
				|	НастройкиРМККнопкиНижнейПанели.АкселераторShift КАК Shift,
				|	НастройкиРМККнопкиНижнейПанели.Клавиша КАК Клавиша,
				|	ВЫБОР
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО01БыстрыеТовары""
				|			ТОГДА ""Избранные товары""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО13ВвестиВыемкаДенег""
				|			ТОГДА ""Выемка""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО02ВвестиВнесениеДенег""
				|			ТОГДА ""Внесение""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО12ПолучитьВес""
				|			ТОГДА ""Получить вес""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО26ОтчетБезГашения""
				|			ТОГДА ""Снять отчет без гашения""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО07ОткрытьДенежныйЯщик""
				|			ТОГДА ""Открыть денежный ящик""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО27ПродажаПоЗаказу""
				|			ТОГДА ""Продажа по заказу""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО03ЗаменитьПрава""
				|			ТОГДА ""Сменить кассира""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО04ОтложитьЧек""
				|			ТОГДА ""Отложить чек""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО06ВвестиШтрихкод""
				|			ТОГДА ""Найти по штрихкоду""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО25ПечатьПробитогоЧека""
				|			ТОГДА ""Повторная печать чека""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО23ВвестиСерии""
				|			ТОГДА ""Указать серии""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО14Продавец""
				|			ТОГДА ""Добавить продавца""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО21ПробитьЧек""
				|			ТОГДА ""Пробить чек""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО31ПолучитьДокументРасчета""
				|			ТОГДА ""Документ расчета""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО18ОткрытьПодарочныеСертификаты""
				|			ТОГДА ""Оплата подарочным сертификатом""
				|		КОГДА НастройкиРМККнопкиНижнейПанели.ИмяКоманды = ""КомандаПО35ЗаявлениеНаВозврат""
				|			ТОГДА ""Распечатать заявление на возврат""
				|		ИНАЧЕ ""-""
				|	КОНЕЦ КАК ЗаголовокКнопки
				|ПОМЕСТИТЬ втКомбинацииСПодменойИмен
				|ИЗ
				|	Справочник.НастройкиРМК.КнопкиНижнейПанели КАК НастройкиРМККнопкиНижнейПанели
				|ГДЕ
				|	НастройкиРМККнопкиНижнейПанели.Ссылка = &НастройкиРМК
				|	И НЕ НастройкиРМККнопкиНижнейПанели.Ссылка.ПометкаУдаления; ";
					
				Запрос.УстановитьПараметр("НастройкиРМК", НастройкиРМК);

				Если СозданыНастройкиБРМК Тогда
					
					Запрос.Текст = Запрос.Текст + "
					|ВЫБРАТЬ
					|	НастройкиРабочегоМестаКассираГорячиеКлавиши.ЗаголовокКнопки КАК ЗаголовокКнопки,
					|	НастройкиРабочегоМестаКассираГорячиеКлавиши.ИмяКнопки КАК ИмяКнопки,
					|	втКомбинацииСПодменойИмен.Alt КАК АкселераторAlt,
					|	втКомбинацииСПодменойИмен.Ctrl КАК АкселераторCtrl,
					|	втКомбинацииСПодменойИмен.Shift КАК АкселераторShift,
					|	втКомбинацииСПодменойИмен.Клавиша КАК Клавиша
					|ИЗ
					|	Справочник.НастройкиРабочегоМестаКассира.ГорячиеКлавиши КАК НастройкиРабочегоМестаКассираГорячиеКлавиши
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКомбинацииСПодменойИмен КАК втКомбинацииСПодменойИмен
					|		ПО НастройкиРабочегоМестаКассираГорячиеКлавиши.ИмяКнопки = втКомбинацииСПодменойИмен.ПодменноеИмяКнопки
					|ГДЕ
					|	НастройкиРабочегоМестаКассираГорячиеКлавиши.Ссылка = &НастройкиБРМК";
					Запрос.УстановитьПараметр("НастройкиБРМК", НастройкиБРМК);
					
				Иначе
					
					Запрос.Текст = Запрос.Текст + "
					|ВЫБРАТЬ
					|	втКомбинацииСПодменойИмен.ПодменноеИмяКнопки КАК ИмяКнопки,
					|	втКомбинацииСПодменойИмен.ЗаголовокКнопки КАК ЗаголовокКнопки,
					|	втКомбинацииСПодменойИмен.Alt КАК АкселераторAlt,
					|	втКомбинацииСПодменойИмен.Ctrl КАК АкселераторCtrl,
					|	втКомбинацииСПодменойИмен.Shift КАК АкселераторShift,
					|	втКомбинацииСПодменойИмен.Клавиша КАК Клавиша
					|ИЗ
					|	втКомбинацииСПодменойИмен КАК втКомбинацииСПодменойИмен
					|ГДЕ
					|	НЕ втКомбинацииСПодменойИмен.ПодменноеИмяКнопки = ""-""";
					
				КонецЕсли;
				
				
				ДанныеДляЗаполнения = Запрос.Выполнить().Выбрать();
				ОбновитьНастройкиБРМК = ДанныеДляЗаполнения.Количество() > 0;
				
				Пока ДанныеДляЗаполнения.Следующий() Цикл
				
					ДанныеОтбора = Новый Структура();
					ДанныеОтбора.Вставить("ИмяКнопки", ДанныеДляЗаполнения.ИмяКнопки);
					РезультатПоиска = НастройкиБРМККИзменению.ГорячиеКлавиши.НайтиСтроки(ДанныеОтбора);
					
					Если РезультатПоиска.Количество() > 0 Тогда
					
						Для Каждого Составляющая Из РезультатПоиска Цикл
							ЗаполнитьЗначенияСвойств(Составляющая, ДанныеДляЗаполнения);
						КонецЦикла;

					Иначе
						ЗаполнитьЗначенияСвойств(НастройкиБРМККИзменению.ГорячиеКлавиши.Добавить(), ДанныеДляЗаполнения);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
		
			//конвертация настроек избранных товаров
			МаксимальноеКоличествоИзбранныхТоваровБРМК = 10;
			КоличествоТоваровКДобавлению = МаксимальноеКоличествоИзбранныхТоваровБРМК - НастройкиБРМККИзменению.БыстрыеТовары.Количество();
			
			Если КоличествоТоваровКДобавлению > 0
				И ЗначениеЗаполнено(НастройкиРМК.ПалитраБыстрыхТоваров)
				И НастройкиРМК.ПалитраБыстрыхТоваров.БыстрыеТовары.Количество() > 0 Тогда
				
				Запрос.УстановитьПараметр("НастройкиРМК", НастройкиРМК);
				
				ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
				
				Если СозданыНастройкиБРМК Тогда
					
					ТекстЗапроса = ?(ИспользоватьХарактеристики, "ВЫБРАТЬ
					|	НастройкиРабочегоМестаКассираБыстрыеТовары.Номенклатура КАК Номенклатура,
					|	НастройкиРабочегоМестаКассираБыстрыеТовары.Характеристика КАК Характеристика
					|ПОМЕСТИТЬ втИзбранныеТоварыБРМК
					|ИЗ
					|	Справочник.НастройкиРабочегоМестаКассира.БыстрыеТовары КАК НастройкиРабочегоМестаКассираБыстрыеТовары
					|ГДЕ
					|	НастройкиРабочегоМестаКассираБыстрыеТовары.Ссылка = &НастройкиБРМК
					|	И НЕ НастройкиРабочегоМестаКассираБыстрыеТовары.Ссылка.ПометкаУдаления
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ ПЕРВЫЕ 10
					|	ПалитраБыстрыхТоваровБыстрыеТовары.Номенклатура КАК Номенклатура,
					|	ПалитраБыстрыхТоваровБыстрыеТовары.Характеристика КАК Характеристика,
					|	ПалитраБыстрыхТоваровБыстрыеТовары.НомерСтроки КАК НомерСтроки
					|ИЗ
					|	Справочник.ПалитраБыстрыхТоваров.БыстрыеТовары КАК ПалитраБыстрыхТоваровБыстрыеТовары
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиРМК КАК НастройкиРМК
					|		ПО ПалитраБыстрыхТоваровБыстрыеТовары.Ссылка = НастройкиРМК.ПалитраБыстрыхТоваров
					|		ЛЕВОЕ СОЕДИНЕНИЕ втИзбранныеТоварыБРМК КАК втИзбранныеТоварыБРМК
					|		ПО ПалитраБыстрыхТоваровБыстрыеТовары.Номенклатура = втИзбранныеТоварыБРМК.Номенклатура
					|			И ПалитраБыстрыхТоваровБыстрыеТовары.Характеристика = втИзбранныеТоварыБРМК.Характеристика
					|ГДЕ
					|	НастройкиРМК.Ссылка = &НастройкиРМК
					|	И НЕ НастройкиРМК.ПометкаУдаления
					|	И ЕСТЬNULL(втИзбранныеТоварыБРМК.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
					|	И ЕСТЬNULL(втИзбранныеТоварыБРМК.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
					|
					|УПОРЯДОЧИТЬ ПО
					|	НомерСтроки",
					"ВЫБРАТЬ
					|	НастройкиРабочегоМестаКассираБыстрыеТовары.Номенклатура КАК Номенклатура
					|ПОМЕСТИТЬ втИзбранныеТоварыБРМК
					|ИЗ
					|	Справочник.НастройкиРабочегоМестаКассира.БыстрыеТовары КАК НастройкиРабочегоМестаКассираБыстрыеТовары
					|ГДЕ
					|	НастройкиРабочегоМестаКассираБыстрыеТовары.Ссылка = &НастройкиБРМК
					|	И НЕ НастройкиРабочегоМестаКассираБыстрыеТовары.Ссылка.ПометкаУдаления
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ ПЕРВЫЕ 10
					|	ПалитраБыстрыхТоваровБыстрыеТовары.Номенклатура КАК Номенклатура,
					|	ПалитраБыстрыхТоваровБыстрыеТовары.НомерСтроки КАК НомерСтроки
					|ИЗ
					|	Справочник.ПалитраБыстрыхТоваров.БыстрыеТовары КАК ПалитраБыстрыхТоваровБыстрыеТовары
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиРМК КАК НастройкиРМК
					|		ПО ПалитраБыстрыхТоваровБыстрыеТовары.Ссылка = НастройкиРМК.ПалитраБыстрыхТоваров
					|		ЛЕВОЕ СОЕДИНЕНИЕ втИзбранныеТоварыБРМК КАК втИзбранныеТоварыБРМК
					|		ПО ПалитраБыстрыхТоваровБыстрыеТовары.Номенклатура = втИзбранныеТоварыБРМК.Номенклатура
					|ГДЕ
					|	НастройкиРМК.Ссылка = &НастройкиРМК
					|	И НЕ НастройкиРМК.ПометкаУдаления
					|	И ЕСТЬNULL(втИзбранныеТоварыБРМК.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
					|
					|УПОРЯДОЧИТЬ ПО
					|	НомерСтроки");

					Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 10", СтрШаблон("ПЕРВЫЕ %1", КоличествоТоваровКДобавлению));
					Запрос.УстановитьПараметр("НастройкиБРМК", НастройкиБРМК);
					
				Иначе
					
					ТекстЗапроса = ?(ИспользоватьХарактеристики,
					"ВЫБРАТЬ ПЕРВЫЕ 10
					 |	ПалитраБыстрыхТоваровБыстрыеТовары.Номенклатура КАК Номенклатура,
					 |	ПалитраБыстрыхТоваровБыстрыеТовары.Характеристика КАК Характеристика,
					 |	ПалитраБыстрыхТоваровБыстрыеТовары.НомерСтроки КАК НомерСтроки
					 |ИЗ
					 |	Справочник.ПалитраБыстрыхТоваров.БыстрыеТовары КАК ПалитраБыстрыхТоваровБыстрыеТовары
					 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиРМК КАК НастройкиРМК
					 |		ПО ПалитраБыстрыхТоваровБыстрыеТовары.Ссылка = НастройкиРМК.ПалитраБыстрыхТоваров
					 |ГДЕ
					 |	НастройкиРМК.Ссылка = &НастройкаРМК
					 |	И НЕ НастройкиРМК.ПометкаУдаления
					 |
					 |УПОРЯДОЧИТЬ ПО
					 |	НомерСтроки",
					"ВЫБРАТЬ ПЕРВЫЕ 10
					 |	ПалитраБыстрыхТоваровБыстрыеТовары.Номенклатура КАК Номенклатура,
					 |	ПалитраБыстрыхТоваровБыстрыеТовары.НомерСтроки КАК НомерСтроки
					 |ИЗ
					 |	Справочник.ПалитраБыстрыхТоваров.БыстрыеТовары КАК ПалитраБыстрыхТоваровБыстрыеТовары
					 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиРМК КАК НастройкиРМК
					 |		ПО ПалитраБыстрыхТоваровБыстрыеТовары.Ссылка = НастройкиРМК.ПалитраБыстрыхТоваров
					 |ГДЕ
					 |	НастройкиРМК.Ссылка = &НастройкаРМК
					 |	И НЕ НастройкиРМК.ПометкаУдаления
					 |
					 |УПОРЯДОЧИТЬ ПО
					 |	НомерСтроки");

					Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 10", СтрШаблон("ПЕРВЫЕ %1",
						МаксимальноеКоличествоИзбранныхТоваровБРМК));
					
				КонецЕсли;
				
				ДанныеЗаполненияИзбранныхТоваров = Запрос.Выполнить().Выбрать();
				ОбновитьНастройкиБРМК = ДанныеЗаполненияИзбранныхТоваров.Количество() > 0;
				
				Пока ДанныеЗаполненияИзбранныхТоваров.Следующий() Цикл
					
					Отбор = Новый Структура();
					Отбор.Вставить("Номенклатура", ДанныеЗаполненияИзбранныхТоваров.Номенклатура);
					
					Если ИспользоватьХарактеристики Тогда
						Отбор.Вставить("Характеристика", ДанныеЗаполненияИзбранныхТоваров.Характеристика);
					КонецЕсли;
						
					РезультатПоиска = НастройкиБРМККИзменению.БыстрыеТовары.НайтиСтроки(Отбор);
					Если РезультатПоиска.Количество() > 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(НастройкиБРМККИзменению.БыстрыеТовары.Добавить(), ДанныеЗаполненияИзбранныхТоваров);
				
				КонецЦикла;
				
			КонецЕсли;
		
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(НастройкиБРМККИзменению.Наименование) Тогда
		НастройкиБРМККИзменению.Наименование = НСтр("ru = 'Настройка РМК'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкиБРМККИзменению.РабочееМесто) Тогда
		НастройкиБРМККИзменению.РабочееМесто = ТекущееРабочееМесто;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкиБРМККИзменению.ТочностьОкругления) Тогда
		НастройкиБРМККИзменению.ТочностьОкругления = ПредопределенноеЗначение("Перечисление.ПорядкиОкругления.Окр0_01");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкиБРМККИзменению.ВидОтображения) Тогда
		НастройкиБРМККИзменению.ВидОтображения = ПредопределенноеЗначение("Перечисление.ВидыОтображения.Стандартный");
	КонецЕсли;
	
	ОбновитьНастройкиБРМК = ОбновитьНастройкиБРМК 
		Или Не(ЗначениеЗаполнено(НастройкиБРМККИзменению.Наименование)
			И ЗначениеЗаполнено(НастройкиБРМККИзменению.РабочееМесто)
			И ЗначениеЗаполнено(НастройкиБРМККИзменению.ТочностьОкругления)
			И Не ЗначениеЗаполнено(НастройкиБРМККИзменению.ВидОтображения));
	
	Если ОбновитьНастройкиБРМК Тогда
	
		Попытка
			НастройкиБРМККИзменению.Записать();
		Исключение

			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Конвертация настроек рабочего места кассира при обновлении программы.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЧекКоррекции

// Формирует и записывает документ "ЧекККМКоррекции" перед пробитием на ККТ.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - данные формы РМК.
//  Отказ - Булево - признак наличия ошибки при записи документа.
//  ТекстОшибки - Строка - текст ошибки.
//  СистемаНалогообложения - ОпределяемыеТипы.ТипыСистемНалогообложенияККТРМК - СНО ККТ для текущего чека.
//
// Возвращаемое значение:
//  ДокументСсылка.ЧекККМКоррекции - ссылка на документ Чек ККМ коррекции.
//
Функция ЗаписатьЧекККМПередПробитиемКоррекции(Форма, Отказ, ТекстОшибки, СистемаНалогообложения)
	
	
КонецФункции

Процедура ЗаполнитьПозицииЧекаИзXML(Товары, ЧекКоррекции)
	
	ПозицииЧека = ЧекКоррекции.ПозицииЧека;
	
	Для Каждого ПозицияЧека Из Товары Цикл
		
		Если ПозицияЧека.Свойство("ТекстоваяСтрока") Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ПозицииЧека.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПозицияЧека);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПозицияЧека.ДанныеКодаТоварнойНоменклатуры);
		
		НоваяСтрока.ОператорПереводаАдрес 			= ПозицияЧека.ДанныеАгента.ОператорПеревода.Адрес;
		НоваяСтрока.ОператорПереводаИНН 			= ПозицияЧека.ДанныеАгента.ОператорПеревода.ИНН;
		НоваяСтрока.ОператорПереводаНаименование 	= ПозицияЧека.ДанныеАгента.ОператорПеревода.Наименование;
		НоваяСтрока.ОператорПереводаТелефон 		= ПозицияЧека.ДанныеАгента.ОператорПеревода.Телефон;
		
		НоваяСтрока.ОператорПоПриемуПлатежейТелефон	= ПозицияЧека.ДанныеАгента.ОператорПоПриемуПлатежей.Телефон;
		
		НоваяСтрока.ПлатежныйАгентОперация 			= ПозицияЧека.ДанныеАгента.ПлатежныйАгент.Операция;
		НоваяСтрока.ПлатежныйАгентТелефон 			= ПозицияЧека.ДанныеАгента.ПлатежныйАгент.Телефон;
		
		НоваяСтрока.ДанныеПоставщикаИНН 			= ПозицияЧека.ДанныеПоставщика.ИНН;
		НоваяСтрока.ДанныеПоставщикаНаименование 	= ПозицияЧека.ДанныеПоставщика.Наименование;
		НоваяСтрока.ДанныеПоставщикаТелефон 		= ПозицияЧека.ДанныеПоставщика.Телефон;
		
		НоваяСтрока.НаименованиеПредметаРасчета 	= ПозицияЧека.Наименование;
		НоваяСтрока.СуммаСоСкидками 				= ПозицияЧека.Сумма;
		
		Если ПозицияЧека.СтавкаНДС = 0 Тогда
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
		ИначеЕсли ПозицияЧека.СтавкаНДС = 10 ИЛИ ПозицияЧека.СтавкаНДС = 110 Тогда
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
		ИначеЕсли ПозицияЧека.СтавкаНДС = 18 ИЛИ ПозицияЧека.СтавкаНДС = 118 Тогда
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		ИначеЕсли ПозицияЧека.СтавкаНДС = 20 ИЛИ ПозицияЧека.СтавкаНДС = 120 Тогда
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		Иначе
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		
		Если НоваяСтрока.СуммаНДС = 0 И ЗначениеЗаполнено(ПозицияЧека.СтавкаНДС) Тогда
			ТекПроцентНДС = ОбработкаТабличнойЧастиТоварыСерверПовтИсп.СтавкаНДСЧислом(НоваяСтрока.СтавкаНДС);
			НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаСоСкидками * ТекПроцентНДС / (ТекПроцентНДС + 1);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСМаркированнойПродукцией

Функция ОсобенностиУчетаПоВидамПродукции(ВидыПродукцииИСМП)
	
	Результат = Новый Массив();
	
 	Если ТипЗнч(ВидыПродукцииИСМП) = Тип("ФиксированныйМассив") Тогда
		
		Для Каждого Элемент Из ВидыПродукцииИСМП Цикл
			СопоставленноеЗначение = ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(Элемент);
	
			Если ЗначениеЗаполнено(СопоставленноеЗначение)
				И Результат.Найти(СопоставленноеЗначение) = Неопределено Тогда
					Результат.Добавить(СопоставленноеЗначение);
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Процедура АктуализироватьОтображениеЭлементовНастроек(Форма)
	
	ЭлементыФормы = Форма.Элементы;
	ЭлементыФормы.НастройкаРМКВыдаватьНаличныеНаКассе.Видимость = Ложь;
	ЭлементыФормы.КонвертироватьНастройкиСтарогоРМК.Видимость = Истина;
	ЭлементыФормы.НастройкаРМКСтруктураПлиточногоИнтерфейсаПодбора.Видимость = Ложь;
	ЭлементыФормы.НастройкаРМКСтруктураПлиточногоИнтерфейсаПодбора1.Видимость = Ложь;
	ЭлементыФормы.НастройкаРМКИспользоватьПромокоды.Видимость = Ложь;
	ЭлементыФормы.ГруппаSMSПриОплатеБонусов.Видимость = Ложь;
	ЭлементыФормы.НастройкаРМКШаблонSMSПриСписанииБонусов.Видимость = Ложь;
	ЭлементыФормы.ГруппаРезервноеКопированиеИВосстановление.Видимость = Ложь;
	ЭлементыФормы.ИспользоватьОплатуНесколькимиКартами.Видимость = Ложь;
	
КонецПроцедуры

// Возвращает признак нужно ли удалять чеки при закрытии смены.
//
// ВозвращаемоеЗначение:
//  Булево - нужно удалять чеки при закрытии смены.
//
Функция УдалятьЧекиПриЗакрытииСмены()
	
	Возврат Ложь;
	
КонецФункции

Функция ИННЗаполненУКонтрагента(Контрагент)
	
	Результат = Истина;
	ДанныеКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "ИНН, ЮрФизЛицо");
	Если ДанныеКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		Если Не ЗначениеЗаполнено(ДанныеКонтрагента.ИНН) Тогда
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура НастроитьИспользованиеРежимаСкупки(Форма)
	Форма.Элементы.НастройкаРМКИспользоватьРежимСкупки.Видимость = Ложь;
КонецПроцедуры

Процедура НастроитьТочностьОкругления(Форма)
	
	СписокВыбора = Форма.Элементы.НастройкаРМКТочностьОкругления.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(Перечисления.ПорядкиОкругления.Окр1, НСтр("ru = 'Без копеек'"));
	СписокВыбора.Добавить(Перечисления.ПорядкиОкругления.Окр0_01, НСтр("ru = 'С копейками'"));
	
	Если Не ЗначениеЗаполнено(Форма.НастройкаРМК.ТочностьОкругления) Тогда
		Форма.НастройкаРМК.ТочностьОкругления = Перечисления.ПорядкиОкругления.Окр0_01;
	КонецЕсли;
	
	ТекстПодсказки = НСтр("ru = 'Округление уменьшает сумму чека при оплате наличными.'");
	Форма.Элементы.НастройкаРМКТочностьОкругления.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	
КонецПроцедуры

Процедура НастроитьВариантыЗаполнения(Форма)
	
	Форма.Элементы.НастройкаРМКВариантЗаполненияМестаРасчетов.Видимость = Истина;
	
	СписокВыбора = Форма.Элементы.НастройкаРМКВариантЗаполненияМестаРасчетов.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(1, НСтр("ru = 'Магазин'"));
	СписокВыбора.Добавить(2, НСтр("ru = 'Магазин + Адрес'"));
	
	Если НЕ ЗначениеЗаполнено(Форма.НастройкаРМК.ВариантЗаполненияМестаРасчетов) Тогда
		Форма.НастройкаРМК.ВариантЗаполненияМестаРасчетов = 2;
	КонецЕсли;
	
	Форма.Элементы.НастройкаРМКВариантЗаполненияКассира.Видимость = Истина;
	
	СписокВыбора = Форма.Элементы.НастройкаРМКВариантЗаполненияКассира.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(1, НСтр("ru = 'ФИО'"));
	СписокВыбора.Добавить(2, НСтр("ru = 'ФИО + Должность'"));
	
	Если НЕ ЗначениеЗаполнено(Форма.НастройкаРМК.ВариантЗаполненияКассира) Тогда
		Форма.НастройкаРМК.ВариантЗаполненияКассира = 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьЗапускПодАдминистратором(Форма)
	
	Пользователь = Пользователи.ТекущийПользователь();
	ОткрыватьРМКПриСтарте = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
		ПланыВидовХарактеристик.ПраваПользователей.ОткрыватьРМКПриЗапускеПрограммы,
		Ложь,
		Пользователь);

	Форма.ЗапущеноПодАдминистратором = Не ОткрыватьРМКПриСтарте;
	
КонецПроцедуры

// Возвращает значение ФО ИспользоватьНовыйРМК.
// Значение по умолчанию Истина.
//
// ВозвращаемоеЗначение:
//  ИспользоватьНовыйРМК - булево - признак использования нового РМК.
//
Функция ВключеноИспользованиеНовогоРМК()
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьНовоеРМК");
	
КонецФункции

// Настройки видимости группы с шаблонами штрихкодов и заполнение значений префиксов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - общая форма настроек РМК.
//
Процедура ЗаполнитьПрефиксыВесовогоТовара(Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Настройки видимости группы синхронизация данных.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - общая форма настроек РМК.
//
Процедура НастроитьГруппуСинхронизацияДанных(Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ПроверитьВозможностьВозвратаПоЧекуККМ(ЧекККМ, Отказ, ТекстОшибки)
	
	Таблица = ПродажиСервер.СтрокиРасхожденияПоТоварамСЧекомПродажи(ЧекККМ);
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		Отказ = Истина;
		ШаблонТекстаОшибки = НСтр("ru = 'Попытка вернуть
										|%1 %2
										|в количестве %4 %3.
										|
										|Было продано: %5 %3.
										|Ранее возвращено: %6 %3.'");
		
		ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки,
			СтрокаТаблицы.Номенклатура,
			СтрокаТаблицы.Характеристика,
			СтрокаТаблицы.ЕдиницаИзмерения,
			СтрокаТаблицы.КоличествоВозвратаТекущего,
			СтрокаТаблицы.КоличествоПродажи,
			СтрокаТаблицы.КоличествоВозвратаПрошлого);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрограммноСоздатьРеквизитыФормы(Форма)
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"), "Объект.Товары"));
	
	КвалификаторЧисла = Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой);
	МассивРеквизитов.Добавить(Новый РеквизитФормы("КодСтроки", Новый ОписаниеТипов("Число", КвалификаторЧисла), "Объект.Товары"));
	
	Форма.ИзменитьРеквизиты(МассивРеквизитов);
	
КонецПроцедуры

Процедура ЗаполнитьАналитикуХозОперации(ЧекККМ)
	
	Если ЧекККМ.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		ЧекККМ.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.РеализацияТоваров;
	Иначе
		
		АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.ПустаяСсылка();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АналитикаХозяйственныхОпераций.Ссылка КАК АналитикаХозяйственнойОперации
		|ИЗ
		|	Справочник.АналитикаХозяйственныхОпераций КАК АналитикаХозяйственныхОпераций
		|ГДЕ
		|	АналитикаХозяйственныхОпераций.ХозяйственнаяОперация = &ХозяйственнаяОперация
		|	И НЕ АналитикаХозяйственныхОпераций.ПометкаУдаления";
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратОтПокупателя);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий()Тогда
			АналитикаХозяйственнойОперации = Выборка.АналитикаХозяйственнойОперации;
		КонецЕсли;
		
		ЧекККМ.АналитикаХозяйственнойОперации = АналитикаХозяйственнойОперации;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает количество отложенных чеков. Если количество отложенных чеков = 1, то заполняет
// реквизит "Отложенный чек" ссылкой на чекККМ.
//
// Параметры:
//  Объект - ДанныеФормыКоллекция - данные объекта рабочего места кассира.
//  СистемаНалогообложения - ПеречисленияСсылка.СистемыНалогообложения - СНО, для которой нужно получить данные по товарам и оплатам.
//  ОжидаемоеКоличествоЧеков - Число - количество предполагаемых чеков для печати.
//
// ВозвращаемоеЗначение:
//  Структура - структура со свойствами "Товары", "Оплата, СкидкиНаценки, БонусныеБаллыКНачислению", в которых хранятся данные для пробития чека.
//
Функция ДанныеЧекаПоСистемеНалогообложения(Форма, СистемаНалогообложения, ОжидаемоеКоличествоЧеков)
	
	Результат = Новый Структура("Товары,Оплата,СкидкиНаценки,БонусныеБаллыКНачислению");
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СистемаНалогообложения) Тогда
		
		СтруктураПараметровЗаполнения = Новый Структура;
		СтруктураПараметровЗаполнения.Вставить("Магазин", Объект.ТорговыйОбъект);
		СтруктураПараметровЗаполнения.Вставить("РабочееМесто", Форма.РабочееМесто);
		СтруктураПараметровЗаполнения.Вставить("Организация", Объект.Организация);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", СтруктураПараметровЗаполнения);
		
		ОрганизацияКассыККМ = Объект.КассаККМ.Владелец;
		ОтборПоСНО = Новый Структура("СистемаНалогообложения, Организация",СистемаНалогообложения, ОрганизацияКассыККМ);
		ПокупкиСУчетомСНО = Объект.Товары.НайтиСтроки(ОтборПоСНО);
		
		СуммаБонусовПоСНО = 0;
		СуммаПокупокПоСНО = 0;
		Для каждого СтрокаПокупок Из ПокупкиСУчетомСНО Цикл
			Если Не ЗначениеЗаполнено(СтрокаПокупок.Склад) Тогда
				ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСкладПродажиВСтрокеТЧСервер(СтрокаПокупок, СтруктураДействий, Неопределено);
			КонецЕсли;
			Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
				СуммаПокупокПоСНО = СуммаПокупокПоСНО + СтрокаПокупок.Сумма;
			Иначе
				СуммаПокупокПоСНО = СуммаПокупокПоСНО + СтрокаПокупок.Сумма + СтрокаПокупок.СуммаСкидкиОплатыБонусом;
			КонецЕсли;
			СуммаБонусовПоСНО = СуммаБонусовПоСНО + СтрокаПокупок.СуммаСкидкиОплатыБонусом;
		КонецЦикла;
		
		ОплатаПокупокПоСНО = Новый Массив;
		
		ОплатаСпискаПокупок = Объект.Оплата;
		ОплатаПокупокПоВидамОплат = ?(ТипЗнч(ОплатаСпискаПокупок) = Тип("ТаблицаЗначений"),
			ОплатаСпискаПокупок.Скопировать(), ОплатаСпискаПокупок.Выгрузить());
		
		ОсталосьРаспределить = СуммаПокупокПоСНО;
		
		ОплатаПокупокПоВидамОплат.Колонки.Добавить("Ранг",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(2,0)));
		
		ВидыОплат = Справочники.ВидыОплатЧекаККМ;
		
		Для каждого СтрокаОплаты Из ОплатаПокупокПоВидамОплат Цикл
			
			ВидОплаты = СтрокаОплаты.ВидОплаты;
			
			Если ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ЗачетАванса Тогда
				СтрокаОплаты.Ранг = 0;
			ИначеЕсли ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ВРассрочку Тогда
				СтрокаОплаты.Ранг = 1;
			ИначеЕсли ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.БанковскийПлатеж Тогда
				СтрокаОплаты.Ранг = 2;
			ИначеЕсли ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПодарочныйСертификат Тогда
				СтрокаОплаты.Ранг = 3;
			ИначеЕсли ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ВстречноеПредоставление Тогда
				СтрокаОплаты.Ранг = 4;
			ИначеЕсли ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта Тогда
				СтрокаОплаты.Ранг = 5;
			ИначеЕсли ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяСистема Тогда
				СтрокаОплаты.Ранг = 6;
			ИначеЕсли ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.БанковскийКредит Тогда
				СтрокаОплаты.Ранг = 7;
			ИначеЕсли ВидОплаты = ВидыОплат.ОплатаБонусамиКакСкидкой Тогда
				СтрокаОплаты.Ранг = 8;
				СтрокаОплаты.Сумма = СуммаБонусовПоСНО;
			ИначеЕсли ВидОплаты = ВидыОплат.Наличные Тогда
				СтрокаОплаты.Ранг = 10;
			Иначе
				СтрокаОплаты.Ранг = 9;
			КонецЕсли;
			
		КонецЦикла;
		
		ОплатаПокупокПоВидамОплат.Сортировать("Ранг Возр");
		
		Для каждого ОплатаСРазделениемПоВиду Из ОплатаПокупокПоВидамОплат Цикл
		
			Если ОсталосьРаспределить <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если ОплатаСРазделениемПоВиду.Сумма > 0 Тогда
				
				ЧастьОплаты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ОплатаСРазделениемПоВиду);
				
				Если ОплатаСРазделениемПоВиду.ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта Тогда
					ЧастьСуммыОплаты = Мин(ОсталосьРаспределить, ОплатаСРазделениемПоВиду.Сумма);
				ИначеЕсли ОплатаСРазделениемПоВиду.ВидОплаты = ВидыОплат.Наличные Тогда
						ЧастьСуммыОплаты = Макс(ОсталосьРаспределить, ОплатаСРазделениемПоВиду.Сумма);
				ИначеЕсли ОплатаСРазделениемПоВиду.ВидОплаты = ВидыОплат.БанковскийПлатеж
					И ОжидаемоеКоличествоЧеков = 1 Тогда
						ЧастьСуммыОплаты = Мин(ОсталосьРаспределить, ОплатаСРазделениемПоВиду.Сумма);
				ИначеЕсли ОплатаСРазделениемПоВиду.ВидОплаты = ВидыОплат.ОплатаВрассрочку
					И ОжидаемоеКоличествоЧеков = 1 Тогда
						ЧастьСуммыОплаты = Мин(ОсталосьРаспределить, ОплатаСРазделениемПоВиду.Сумма);
				ИначеЕсли ОплатаСРазделениемПоВиду.ВидОплаты = ВидыОплат.ЗачетАванса
					И ОжидаемоеКоличествоЧеков = 1 Тогда
						ЧастьСуммыОплаты = Мин(ОсталосьРаспределить, ОплатаСРазделениемПоВиду.Сумма);
				ИначеЕсли ОплатаСРазделениемПоВиду.ВидОплаты = ВидыОплат.ОплатаПодарочнымСертификатом
					И ОжидаемоеКоличествоЧеков = 1 Тогда
						ЧастьСуммыОплаты = Мин(ОсталосьРаспределить, ОплатаСРазделениемПоВиду.Сумма);
				ИначеЕсли ОплатаСРазделениемПоВиду.ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяСистема Тогда
						ЧастьСуммыОплаты = Мин(ОсталосьРаспределить, ОплатаСРазделениемПоВиду.Сумма);
				ИначеЕсли ОплатаСРазделениемПоВиду.ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ВстречноеПредоставление Тогда
						ЧастьСуммыОплаты = Мин(ОсталосьРаспределить, ОплатаСРазделениемПоВиду.Сумма);
				ИначеЕсли ОплатаСРазделениемПоВиду.ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.БанковскийКредит Тогда
						ЧастьСуммыОплаты = Мин(ОсталосьРаспределить, ОплатаСРазделениемПоВиду.Сумма);
				ИначеЕсли ОплатаСРазделениемПоВиду.ВидОплаты = ВидыОплат.ОплатаБонусамиКакСкидкой Тогда
						ЧастьСуммыОплаты = Мин(ОсталосьРаспределить, ОплатаСРазделениемПоВиду.Сумма);
				КонецЕсли;
				
				ЧастьОплаты.Сумма = ЧастьСуммыОплаты;
				ОплатаПокупокПоСНО.Добавить(ЧастьОплаты);
				ОплатаСРазделениемПоВиду.Сумма = ОплатаСРазделениемПоВиду.Сумма - ЧастьСуммыОплаты;
				ОсталосьРаспределить = ОсталосьРаспределить - ЧастьСуммыОплаты;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Форма.ЭтоЗаменаТоваров 
			И Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
				ТоварыИОплаты = Новый Структура("Товары,Оплата");

				СтруктураОтбораТовары = Новый Структура("ТоварКЗамене", Истина);
				СтруктураОтбораОплаты = Новый Структура("ВидОплаты", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.ВстречноеПредоставление"));
				Если ТипЗнч(Форма.Объект.Товары) = Тип("ТаблицаЗначений") Тогда
					ПокупкиСУчетомСНО = Форма.Объект.Товары.Скопировать(СтруктураОтбораТовары);
					ОплатаПокупокПоСНО = Форма.Объект.Оплата.Скопировать(СтруктураОтбораОплаты);
				Иначе
					ПокупкиСУчетомСНО = Форма.Объект.Товары.Выгрузить(СтруктураОтбораТовары);
					ОплатаПокупокПоСНО = Форма.Объект.Оплата.Выгрузить(СтруктураОтбораОплаты);
				КонецЕсли;
				
		КонецЕсли;
		
		Результат.Вставить("Товары",ПокупкиСУчетомСНО);
		Результат.Вставить("Оплата",ОплатаПокупокПоСНО);
		
		// Кэшированые значения скидок наценок
		МассивУдаляемыхСтрок = Новый Массив;
		СкидкиНаценки = ?(ТипЗнч(Форма.ТаблицаСкидкиНаценки) = Тип("ТаблицаЗначений"),
			Форма.ТаблицаСкидкиНаценки.Скопировать(), Форма.ТаблицаСкидкиНаценки.Выгрузить());
		Для Каждого СтрокаСкидкиНаценки Из СкидкиНаценки Цикл
			
			УдалятьСтроку = Истина;
			Для Каждого СтрокаТоваров Из ПокупкиСУчетомСНО Цикл
				Если СтрокаСкидкиНаценки.КлючСвязи = СтрокаТоваров.НомерСтроки Тогда
					УдалятьСтроку = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			Если УдалятьСтроку Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаСкидкиНаценки);
			КонецЕсли;
			
		КонецЦикла;
		Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
			СкидкиНаценки.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		МассивУдаляемыхСтрок = Новый Массив;
		БонусныеБаллыКНачислению = ?(ТипЗнч(Форма.ТаблицаБонусныеБаллы) = Тип("ТаблицаЗначений"),
			Форма.ТаблицаБонусныеБаллы.Скопировать(), Форма.ТаблицаБонусныеБаллы.Выгрузить());
		Для Каждого СтрокаБонусныеБаллыКНачислению Из БонусныеБаллыКНачислению Цикл
			
			УдалятьСтроку = Истина;
			Для Каждого СтрокаТоваров Из ПокупкиСУчетомСНО Цикл
				Если СтрокаБонусныеБаллыКНачислению.КлючСвязи = СтрокаТоваров.НомерСтроки Тогда
					УдалятьСтроку = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			Если УдалятьСтроку Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаБонусныеБаллыКНачислению);
			КонецЕсли;
			
		КонецЦикла;
		Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
			БонусныеБаллыКНачислению.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		Результат.Вставить("СкидкиНаценки", СкидкиНаценки);
		Результат.Вставить("БонусныеБаллыКНачислению", БонусныеБаллыКНачислению);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура НастроитьЗапросСписокЧеков(Форма)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДокументЧекККМ.Ссылка КАК Ссылка,
	|	ДокументЧекККМ.Номер КАК Номер,
	|	ДокументЧекККМ.НомерЧекаККМ КАК НомерККМ,
	|	ДокументЧекККМ.Дата КАК Дата,
	|	ДокументЧекККМ.ВидОперации КАК ВидОперации,
	|	ДокументЧекККМ.СтатусЧекаККМ КАК Статус,
	|	ДокументЧекККМ.СуммаДокумента КАК СуммаДокумента,
	|	ДокументЧекККМ.Комментарий КАК Комментарий,
	|	ДокументЧекККМ.КассаККМ КАК КассаККМ
	|ИЗ
	|	Документ.ЧекККМ КАК ДокументЧекККМ
	|ГДЕ
	|	НЕ ДокументЧекККМ.ПометкаУдаления
	|	И ДокументЧекККМ.Магазин = &ТорговыйОбъект
	|	И ДокументЧекККМ.Организация В(&МассивОрганизаций)";
	
	Форма.ТаблицаЧековККМ.ПроизвольныйЗапрос = Истина;
	Форма.ТаблицаЧековККМ.ТекстЗапроса = ТекстЗапроса;
	
КонецПроцедуры

Процедура НастроитьГруппуШаблоныЧеков(Форма)
	
	Форма.Элементы.ШаблоныЧекаККТ.Видимость = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьТабличныеЧастиЧекККМ(Форма, Источник, ТекущийЧек)
	
	ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(
		ТекущийЧек.Организация,
		ТекущийЧек.Магазин);
	
	ДобавлятьТовары = Истина;
	Если Форма.ПриемАванса Тогда
		ДобавлятьТовары = Ложь;
	ИначеЕсли Форма.ЭтоВозвратАванса Тогда
		ДобавлятьТовары = Ложь;
	ИначеЕсли Форма.ОтложенныйЧекПолностьюОплачен И ЗначениеЗаполнено(Форма.ОтложенныйЧек) Тогда
		ДобавлятьТовары = Ложь;
	КонецЕсли;
	
	ОсобенностиУчетаНеИСМП = МассивОсобенностейУчетаНеИСМП();
	
	ТекущийЧек.АкцизныеМарки.Очистить();
	ТекущийЧек.СерийныеНомера.Очистить();
	ТекущийЧек.Серии.Очистить();
	Если Не Форма.ОтложенныйЧекПолностьюОплачен Тогда
		ТекущийЧек.Товары.Очистить();
	КонецЕсли;
	
	Если ДобавлятьТовары Тогда
		
		Для Каждого СтрокаТовара Из Источник.Товары Цикл 
			
			Если СтрокаТовара.Подарок Тогда
				
				ГУИДСкидкиНаценки = СтрокаТовара.ВладелецПодарка;
				Попытка
					СкидкаНаценка = Справочники.СкидкиНаценки.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИДСкидкиНаценки));
				Исключение
					СкидкаНаценка = Справочники.СкидкиНаценки.ПустаяСсылка();
				КонецПопытки;
				
				Если СтрокаТовара.ВыводитьПодарокВЧек Тогда
					СтрокаСкидки = ТекущийЧек.СкидкиНаценки.Добавить();
					СтрокаСкидки.СкидкаНаценка = СкидкаНаценка;
					СтрокаСкидки.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;;
				Иначе
					СтрокаПодарок = ТекущийЧек.Подарки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПодарок, СтрокаТовара);
					СтрокаПодарок.Сумма = СтрокаТовара.Количество * СтрокаТовара.Цена;
					СтрокаПодарок.СкидкаНаценка = СкидкаНаценка;
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			НоваяСтрокаЧека = ТекущийЧек.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЧека, СтрокаТовара);
			
			ЗаполнитьДанныеМеховыхИзделий(НоваяСтрокаЧека, СтрокаТовара);
			
			Если ЗначениеЗаполнено(НоваяСтрокаЧека.Упаковка) Тогда
				КоэффициентУпаковки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрокаЧека.Упаковка, "Коэффициент");
				НоваяСтрокаЧека.Количество = НоваяСтрокаЧека.КоличествоУпаковок * КоэффициентУпаковки;
			КонецЕсли;
			
			НоваяСтрокаЧека.Резервировать = СтрокаТовара.Резерв;
			НоваяСтрокаЧека.ПроцентРучнойСкидки = СтрокаТовара.ПроцентСкидкиНаценки;
			НоваяСтрокаЧека.СуммаРучнойСкидки = СтрокаТовара.СуммаСкидкиНаценки;
			
			НоваяСтрокаЧека.ПроцентАвтоматическойСкидки = СтрокаТовара.ПроцентАвтоматическойСкидки;
			НоваяСтрокаЧека.СуммаАвтоматическойСкидки = СтрокаТовара.СуммаАвтоматическойСкидки;
			
			НоваяСтрокаЧека.СуммаСкидкиОплатыБонусом = СтрокаТовара.СуммаСкидкиОплатыБонусом;
			
			НоваяСтрокаЧека.НеобходимостьВводаАкцизнойМарки = СтрокаТовара.НеобходимостьВводаКодаМаркировки;
			
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(ТекущийЧек.Товары, НоваяСтрокаЧека, "КлючСвязи");
			
			КодМарки = СтрокаТовара.КодМаркировки;
			Если НоваяСтрокаЧека.НеобходимостьВводаАкцизнойМарки И ЗначениеЗаполнено(КодМарки) Тогда
				
				СтруктураШтрихкода = ШтрихкодУпаковкиТовараПоПолномуКодуМарки(КодМарки, СтрокаТовара);
				
				КодМаркировкиНормализованный = СтруктураШтрихкода.КодМаркировкиНормализованный;
				АкцизнаяМарка = СтруктураШтрихкода.ШтрихкодУпаковки;
				
				СтрокаТовара.КодМаркировки = КодМаркировкиНормализованный;
				
				Если НЕ ЗначениеЗаполнено(НоваяСтрокаЧека.Штрихкод)
					ИЛИ ОсобенностиУчетаНеИСМП.Найти(СтрокаТовара.ОсобенностьУчета) = Неопределено Тогда
					НоваяСтрокаЧека.Штрихкод = КодМаркировкиНормализованный;
				КонецЕсли;
				
				Если НЕ ТекущийЧек.ОперацияСДенежнымиСредствами Тогда
					
					НоваяСтрокаАкцизныеМарки = ТекущийЧек.АкцизныеМарки.Добавить();
					НоваяСтрокаАкцизныеМарки.КлючСвязи = НоваяСтрокаЧека.КлючСвязи;
					НоваяСтрокаАкцизныеМарки.КодАкцизнойМарки = КодМаркировкиНормализованный;
					
					НоваяСтрокаАкцизныеМарки.АкцизнаяМарка = АкцизнаяМарка;
					НоваяСтрокаАкцизныеМарки.ШтрихкодУпаковки = АкцизнаяМарка;
					
					Если ШтрихкодированиеОбщегоНазначенияЕГАИС.ЭтоШтрихкодАкцизнойМарки(КодМаркировкиНормализованный) И Не ОрганизацияЕГАИС = Неопределено Тогда
						ЗаполнитьСправку2(НоваяСтрокаАкцизныеМарки, ОрганизацияЕГАИС, ТекущийЧек.ВидОперации);
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(НоваяСтрокаАкцизныеМарки, СтрокаТовара);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТовара.НеобходимостьВводаСерии И ЗначениеЗаполнено(СтрокаТовара.Серия)
				И НЕ ТекущийЧек.ОперацияСДенежнымиСредствами Тогда
				
				Если СтрокаТовара.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
					ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(ТекущийЧек.Товары, НоваяСтрокаЧека, "КлючСвязиСерийныхНомеров");
					Если ЗначениеЗаполнено(НоваяСтрокаЧека.КлючСвязиСерийныхНомеров) Тогда
						НоваяСтрокаПС = ТекущийЧек.СерийныеНомера.Добавить();
						НоваяСтрокаПС.СерийныйНомер = СтрокаТовара.Серия;
						НоваяСтрокаПС.КлючСвязиСерийныхНомеров = НоваяСтрокаЧека.КлючСвязиСерийныхНомеров;
					КонецЕсли;
				Иначе
					НоваяСтрокаСерии = ТекущийЧек.Серии.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, СтрокаТовара);
				КонецЕсли;
				
				НоваяСтрокаЧека.СтатусУказанияСерий = 2;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущийЧек.ЗаказПокупателя) Тогда
				НоваяСтрокаЧека.ЗаказПокупателя = ТекущийЧек.ЗаказПокупателя;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//Получение бонусной программы
	БонуснаяПрограммаЛояльности = Справочники.БонусныеПрограммыЛояльности.ПустаяСсылка();
	ДисконтнаяКарта = Форма.Объект.ДисконтнаяКарта;
	Если ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
		БонуснаяПрограммаЛояльности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДисконтнаяКарта, "БонуснаяПрограммаЛояльности");
	КонецЕсли;
	
	ТекущийЧек.Оплата.Очистить();
	Для Каждого СтрокаОплатыРМК Из Источник.Оплата Цикл
		
		НоваяСтрокаОплатыЧекККМ = ТекущийЧек.Оплата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаОплатыЧекККМ, СтрокаОплатыРМК);
		
		Если СтрокаОплатыРМК.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом Тогда
			
			МассивСерийныхНомеров = МаркетинговыеАкцииСервер.СерийныеНомераПоТексту(
				СтрокаОплатыРМК.НомерСертификата,
				Новый Массив,
				СтрокаОплатыРМК.ПодарочныйСертификат);
				
			Если МассивСерийныхНомеров.Количество() > 0 Тогда
				НоваяСтрокаПогашенияПС = ТекущийЧек.ПогашениеПодарочныхСертификатов.Добавить();
				НоваяСтрокаПогашенияПС.ПодарочныйСертификат = СтрокаОплатыРМК.ПодарочныйСертификат;
				НоваяСтрокаПогашенияПС.СерийныйНомер = МассивСерийныхНомеров[0];
				НоваяСтрокаПогашенияПС.СуммаПогашенияСертификата = СтрокаОплатыРМК.Сумма;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаОплатыРМК.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой Тогда
			
			КурсКонвертацииБонусовВВалюту = БонуснаяПрограммаЛояльности.КурсКонвертацииБонусовВВалюту;
			
			НоваяСтрокаОплатыЧекККМ.БонуснаяПрограммаЛояльности = БонуснаяПрограммаЛояльности;
			НоваяСтрокаОплатыЧекККМ.Сумма = 0;
			НоваяСтрокаОплатыЧекККМ.СуммаБонусовВСкидках = СтрокаОплатыРМК.Сумма;
			НоваяСтрокаОплатыЧекККМ.КоличествоБонусовВСкидках = Цел(СтрокаОплатыРМК.Сумма / ?(КурсКонвертацииБонусовВВалюту = 0, 1, КурсКонвертацииБонусовВВалюту));
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяСтрокаОплатыЧекККМ.ЭквайринговыйТерминал) Тогда
			НоваяСтрокаОплатыЧекККМ.ДанныеПереданыВБанк = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Кэшированые значения скидок наценок
	Если Источник.Свойство("СкидкиНаценки") Тогда
		ТекущийЧек.СкидкиНаценки.Загрузить(Источник.СкидкиНаценки);
	КонецЕсли;
	Если Источник.Свойство("БонусныеБаллыКНачислению") Тогда
		Для Каждого СтрокаБонусов Из Источник.БонусныеБаллыКНачислению Цикл
			НоваяСтрока = ТекущийЧек.БонусныеБаллыКНачислению.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаБонусов);
			НоваяСтрока.БонуснаяПрограммаЛояльности = СтрокаБонусов.БонуснаяПрограмма;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция МассивОсобенностейУчетаНеИСМП()
	
	МассивНеИСМП = Новый Массив;
	МассивНеИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка"));
	МассивНеИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета"));
	МассивНеИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция"));
	
	Возврат МассивНеИСМП;
	
КонецФункции

Функция ШтрихкодУпаковкиТовараПоПолномуКодуМарки(КодМаркировки, СтруктураТовара)
	
	СимволGS1 = МенеджерОборудованияМаркировкаКлиентСервер.РазделительGS1();
	Разделитель = МенеджерОборудованияМаркировкаКлиентСервер.ЭкранированныйСимволGS1();
	КодМаркировкиОригинал = СтрЗаменить(КодМаркировки, Разделитель, СимволGS1);
	ДанныеРазбораКода = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(КодМаркировкиОригинал);
	
	Если НЕ ДанныеРазбораКода = Неопределено Тогда
		КодМаркировкиНормализованный = ДанныеРазбораКода.НормализованныйКодМаркировки;
	Иначе
		КодМаркировкиНормализованный = КодМаркировкиОригинал;
	КонецЕсли;
	
	ШтрихкодУпаковки = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьПоЗначениюШтрихкода(КодМаркировкиНормализованный);
	Если ШтрихкодУпаковки = Неопределено Тогда
		
		СтруктураСоздания = Справочники.ШтрихкодыУпаковокТоваров.СтруктураСозданияШтрихкодаУпаковки();
		Если СтруктураТовара.ПоштучноеВыбытие Тогда
			ДанныеОсновнойНоменклатурыЧастичногоВыбытия = ДанныеОсновнойНоменклатурыЧастичногоВыбытия(СтруктураТовара.Номенклатура,
				СтруктураТовара.Характеристика);
			ЗаполнитьЗначенияСвойств(СтруктураСоздания, ДанныеОсновнойНоменклатурыЧастичногоВыбытия);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтруктураСоздания.Номенклатура) Тогда
			СтруктураСоздания.Номенклатура = СтруктураТовара.Номенклатура;
			СтруктураСоздания.Характеристика = СтруктураТовара.Характеристика;
		КонецЕсли;
		СтруктураСоздания.Штрихкод = КодМаркировкиНормализованный;
		
		Если НЕ ДанныеРазбораКода = Неопределено И ДанныеРазбораКода.Свойство("ВидУпаковки")
			И ДанныеРазбораКода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			
			СтруктураСоздания.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
			СтруктураСоздания.Упаковка = СтруктураТовара.Упаковка;
			Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(СтруктураТовара.ОсобенностьУчета))
				И ЗначениеЗаполнено(СтруктураТовара.Упаковка)
				И ТипЗнч(СтруктураТовара.Упаковка) = Тип("СправочникСсылка.УпаковкиНоменклатуры") Тогда
				СтруктураСоздания.Количество = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураТовара.Упаковка, "Коэффициент");
			Иначе
				СтруктураСоздания.Количество = СтруктураТовара.Количество;
			КонецЕсли;
		Иначе
			СтруктураСоздания.Количество = 1;
			Если СтруктураТовара.ПоштучноеВыбытие Тогда
				СтруктураСоздания.Количество = 1;
			Иначе
				СтруктураСоздания.Количество = СтруктураТовара.Количество;
			КонецЕсли;
			СтруктураСоздания.КоличествоПотребительскихУпаковок = 1;
			СтруктураСоздания.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
		КонецЕсли;
	
		ШтрихкодУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодУпаковки(СтруктураСоздания);
		
	Иначе
		
		КоличествоВШтрихкодеДолжноБыть = 0;
		Если НЕ ДанныеРазбораКода = Неопределено И ДанныеРазбораКода.Свойство("ВидУпаковки")
			И ДанныеРазбораКода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(СтруктураТовара.ОсобенностьУчета))
				И ЗначениеЗаполнено(СтруктураТовара.Упаковка)
				И ТипЗнч(СтруктураТовара.Упаковка) = Тип("СправочникСсылка.УпаковкиНоменклатуры") Тогда
				КоличествоВШтрихкодеДолжноБыть = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураТовара.Упаковка, "Коэффициент");
			Иначе
				КоличествоВШтрихкодеДолжноБыть = СтруктураТовара.Количество;
			КонецЕсли;
		Иначе
			Если СтруктураТовара.ПоштучноеВыбытие Тогда
				КоличествоВШтрихкодеДолжноБыть = 1;
			Иначе
				КоличествоВШтрихкодеДолжноБыть = СтруктураТовара.Количество;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ КоличествоВШтрихкодеДолжноБыть = ШтрихкодУпаковки.Количество Тогда
			НовыеРеквизиты = Новый Структура;
			НовыеРеквизиты.Вставить("Количество", КоличествоВШтрихкодеДолжноБыть);
			Справочники.ШтрихкодыУпаковокТоваров.ИзменитьШтрихкодУпаковки(ШтрихкодУпаковки, НовыеРеквизиты);
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураШтрихкода = Новый Структура;
	СтруктураШтрихкода.Вставить("КодМаркировкиНормализованный", КодМаркировкиНормализованный);
	СтруктураШтрихкода.Вставить("ШтрихкодУпаковки", ШтрихкодУпаковки);
	
	Возврат СтруктураШтрихкода;
	
КонецФункции

Процедура ЗаполнитьСправку2(СтрокаАкцизныеМарки, ОрганизацияЕГАИС, ВидОперации)
	
	Справка2 = Справочники.Справки2ЕГАИС.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АкцизныеМаркиЕГАИС.Справка2 КАК Справка2
	|ИЗ
	|	РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	|ГДЕ
	|	АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|	И АкцизныеМаркиЕГАИС.АкцизнаяМарка = &АкцизнаяМарка
	|	И АкцизныеМаркиЕГАИС.Статус = &Статус";
	
	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		Статус = Перечисления.СтатусыАкцизныхМарок.ВНаличии;
	Иначе
		Статус = Перечисления.СтатусыАкцизныхМарок.Реализована;
	КонецЕсли;
	Запрос.УстановитьПараметр("АкцизнаяМарка", СтрокаАкцизныеМарки.АкцизнаяМарка);
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("Статус", Статус);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Справка2 = Выборка.Справка2;
	КонецЕсли;
	
	СтрокаАкцизныеМарки.Справка2 = Справка2;
	
КонецПроцедуры

Процедура ПодобратьСериюНоменклатурыИзТаблицыСерий(СтрокаЧека, ТаблицаСерийНоменклатуры)
	ОтборПоискаСерии = Новый Структура("Номенклатура,Характеристика,Количество", СтрокаЧека.Номенклатура, СтрокаЧека.Характеристика, СтрокаЧека.Количество);
	НайденныеСтрокиСерий = ТаблицаСерийНоменклатуры.НайтиСтроки(ОтборПоискаСерии);
	СерияРаспределена = Ложь;
	Позиция = 0;
	Пока Позиция < НайденныеСтрокиСерий.Количество() И Не СерияРаспределена Цикл
		Если Не НайденныеСтрокиСерий[Позиция].Распределена Тогда
			СтрокаЧека.Серия = НайденныеСтрокиСерий[Позиция].Серия;
			СтрокаЧека.СерияПредставление = Строка(СтрокаЧека.Серия);
			НайденныеСтрокиСерий[Позиция].Распределена = Истина;
			СерияРаспределена = Истина;
		КонецЕсли;
		Позиция = Позиция + 1;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьТабличныеЧастиИзЧекККМ(ЧекККМ, Форма, ПереноситьКодыМаркировки = Ложь,
		ДополнительныеИсходящиеДанные = Неопределено)
	
	Объект = Форма.Объект;
	СкладПродажи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТорговыйОбъект, "СкладПродажи");
	ТекущаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	Если Форма.ЭтоЗаменаТоваров Тогда
		Объект.Товары.Очистить();
	КонецЕсли;
	
	ТребуютсяДанныеКонтроля = Ложь;
	Если Не ДополнительныеИсходящиеДанные = Неопределено
			И ДополнительныеИсходящиеДанные.Свойство("ДанныеКонтроляПродаж")
			И ТипЗнч(ДополнительныеИсходящиеДанные.ДанныеКонтроляПродаж) = Тип("Структура") Тогда
		ТребуютсяДанныеКонтроля = Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЧекККМСерии.Номенклатура КАК Номенклатура,
	|	ЧекККМСерии.Характеристика КАК Характеристика,
	|	ЧекККМСерии.Количество КАК Количество,
	|	ЧекККМСерии.Серия КАК Серия
	|ИЗ
	|	Документ.ЧекККМ.Серии КАК ЧекККМСерии
	|ГДЕ
	|	ЧекККМСерии.Ссылка = &ЧекККМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМТовары.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЧекККМТовары.КлючСвязи КАК КлючСвязи,
	|	ЧекККМТовары.Количество КАК Количество,
	|	ЧекККМТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ЧекККМТовары.НеобходимостьВводаАкцизнойМарки КАК НеобходимостьВводаАкцизнойМарки,
	|	ЧекККМТовары.Номенклатура КАК Номенклатура,
	|	ЧекККМТовары.Продавец КАК Продавец,
	|	ЧекККМТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ЧекККМТовары.ПроцентРучнойСкидки КАК ПроцентСкидкиНаценки,
	|	ЧекККМТовары.Склад КАК Склад,
	|	ЧекККМТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЧекККМТовары.Сумма КАК Сумма,
	|	ЧекККМТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ЧекККМТовары.СуммаНДС КАК СуммаНДС,
	|	ЧекККМТовары.СуммаРучнойСкидки КАК СуммаСкидкиНаценки,
	|	ЧекККМТовары.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,
	|	ЧекККМТовары.Упаковка КАК Упаковка,
	|	ЧекККМТовары.Характеристика КАК Характеристика,
	|	ЧекККМТовары.Цена КАК Цена,
	|	ЧекККМТовары.Штрихкод КАК Штрихкод,
	|	ЧекККМТовары.НеобходимостьВводаКодаМаркировки КАК НеобходимостьВводаКодаМаркировки,
	|	ЧекККМТовары.МРЦ КАК МРЦ,
	|	СпрНоменклатура.Весовой КАК Весовой,
	|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьСерии, ЛОЖЬ)
	|		ИЛИ ЕСТЬNULL(СпрНоменклатура.ИспользоватьСерийныеНомера, ЛОЖЬ) КАК НеобходимостьВводаСерии,
	|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьСерии, ЛОЖЬ)
	|		ИЛИ ЕСТЬNULL(СпрНоменклатура.ИспользоватьСерийныеНомера, ЛОЖЬ) КАК ПроверятьЗаполнениеСерий,
	|	ЕСТЬNULL(СпрНоменклатура.ИспользоватьСерийныеНомера, ЛОЖЬ)
	|		ИЛИ ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьСерии, ЛОЖЬ)
	|			И ЕСТЬNULL(ВидыНоменклатуры.НастройкаИспользованияСерий, ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара) КАК УникальностьСерии,
	|	&ОпределениеПризнакаМаркируемаяПродукция КАК Маркируемый,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки, 0) КАК КоличествоВПотребительскойУпаковке,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия, ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИС.ПустаяСсылка)) КАК ВариантЧастичногоВыбытия,
	|	НЕ НастройкиЧастичногоВыбытияПродукцииИС.НоменклатураЧастичногоВыбытия ЕСТЬ NULL КАК ПоштучноеВыбытие,
	|	ЧекККМТовары.Цена * ЧекККМТовары.Количество КАК СуммаБезСкидки,
	|	ЕСТЬNULL(ЧекККМАкцизныеМарки.ЧастичноеВыбытиеКоличество, 0) КАК ЧастичноеВыбытиеКоличество,
	|	ЕСТЬNULL(ЧекККМАкцизныеМарки.ЧастичноеВыбытиеВариантУчета, ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИС.ПустаяСсылка)) КАК ЧастичноеВыбытиеВариантУчета,
	|	ЕСТЬNULL(ЧекККМАкцизныеМарки.ЧастичноеВыбытиеНоменклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК ЧастичноеВыбытиеНоменклатура,
	|	ЕСТЬNULL(ЧекККМАкцизныеМарки.ЧастичноеВыбытиеХарактеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЧастичноеВыбытиеХарактеристика,
	|	СпрНоменклатура.КодТРУ КАК КодТРУ,
	|	СпрНоменклатура.ОсобенностьУчета КАК ОсобенностьУчета,
	|	СпрНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВЫБОР
	|		КОГДА &ПереноситьКодыМаркировки
	|			ТОГДА ЕСТЬNULL(ЧекККМАкцизныеМарки.КодАкцизнойМарки, ЕСТЬNULL(ЧекККМКодыМаркировки.КодМаркировки, """"))
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодМаркировки,
	|	ВЫБОР
	|		КОГДА &ПереноситьКодыМаркировки
	|			ТОГДА ЕСТЬNULL(СпрШтрихкодыУпаковок.ЗначениеШтрихкода, """")
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодАкцизнойМарки,
	|	ЕСТЬNULL(ЧекККМСерийныеНомера.СерийныйНомер, ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка)) КАК ПодарочныйСертификат,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.АгентскиеУслуги
	|			ТОГДА ЕСТЬNULL(СпрДоговорыКонтрагентов.Агент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СпрДоговорыКонтрагентов.Агент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВидыНоменклатуры.АгентскиеУслуги
	|	КОНЕЦ КАК ЭтоАгентскаяУслуга,
	|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьХарактеристики, ЛОЖЬ) КАК ПроверятьЗаполнениеХарактеристики
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ЧекККМТовары.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.АкцизныеМарки КАК ЧекККМАкцизныеМарки
	|		ПО ЧекККМТовары.Ссылка = ЧекККМАкцизныеМарки.Ссылка
	|			И ЧекККМТовары.КлючСвязи = ЧекККМАкцизныеМарки.КлючСвязи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК СпрШтрихкодыУпаковок
	|		ПО (СпрШтрихкодыУпаковок.Ссылка = ЧекККМАкцизныеМарки.АкцизнаяМарка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.КодыМаркировки КАК ЧекККМКодыМаркировки
	|		ПО ЧекККМТовары.Ссылка = ЧекККМКодыМаркировки.Ссылка
	|			И ЧекККМТовары.КлючСвязи = ЧекККМКодыМаркировки.КлючСвязи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО ЧекККМТовары.Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК СпрДоговорыКонтрагентов
	|		ПО (СпрНоменклатура.ДоговорКонтрагента = СпрДоговорыКонтрагентов.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЧастичногоВыбытияПродукцииИС КАК НастройкиЧастичногоВыбытияПродукцииИС
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|			ПО НастройкиЧастичногоВыбытияПродукцииИС.Номенклатура = ОписаниеНоменклатурыИС.Номенклатура
	|		ПО ЧекККМТовары.Номенклатура = НастройкиЧастичногоВыбытияПродукцииИС.НоменклатураЧастичногоВыбытия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.СерийныеНомера КАК ЧекККМСерийныеНомера
	|		ПО ЧекККМТовары.КлючСвязиСерийныхНомеров = ЧекККМСерийныеНомера.КлючСвязиСерийныхНомеров
	|			И ЧекККМТовары.Ссылка = ЧекККМСерийныеНомера.Ссылка
	|ГДЕ
	|	ЧекККМТовары.Ссылка = &ЧекККМ";
	
	Если ТребуютсяДанныеКонтроля Тогда
		ТекстЗапросаТоваров = ПолучитьТекстЗапросаТоваровЧека();
		
		РазделительЗапросов = "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		ТекстЗапросаКонтроляПродаж = ПолучитьТекстЗапросаКонтроляПродаж(ТекстЗапросаТоваров);
		Запрос.Текст = СтрШаблон("%1%2%3", Запрос.Текст, РазделительЗапросов, ТекстЗапросаКонтроляПродаж);
		ПараметрТаблицаТоваров = Неопределено;
		
		УстановитьПараметрыЗапросаКонтроляПродаж(Запрос, ПараметрТаблицаТоваров, ДополнительныеИсходящиеДанные);
	КонецЕсли;
	
	ОпределениеМаркируемаяПродукция = ИнтеграцияИСРТ.ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса("СпрНоменклатура");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОпределениеПризнакаМаркируемаяПродукция", ОпределениеМаркируемаяПродукция);
	
	Запрос.УстановитьПараметр("ЧекККМ", ЧекККМ.Ссылка);
	Запрос.УстановитьПараметр("ПереноситьКодыМаркировки", ПереноситьКодыМаркировки);
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ТаблицаСерийНоменклатуры = РезультатыЗапросов[0].Выгрузить();
	ТаблицаТоварыЧека = РезультатыЗапросов[1].Выгрузить();
	ТаблицаСерийНоменклатуры.Колонки.Добавить("Распределена", Новый ОписаниеТипов("Булево"));
	Если ТаблицаСерийНоменклатуры.Количество() >= 100 Тогда
		ТаблицаСерийНоменклатуры.Индексы.Добавить("Номенклатура,Характеристика,Количество");
	КонецЕсли;
	
	// Дополним таблицу товаров кодами маркировки из пула.
	СимволGS1 = МенеджерОборудованияРМККлиентСервер.РазделительGS1();
	Разделитель = МенеджерОборудованияРМККлиентСервер.ЭкранированныйСимволGS1();
	АкцизныеМарки = ТаблицаТоварыЧека.ВыгрузитьКолонку("КодАкцизнойМарки");
	Если АкцизныеМарки.Количество() Тогда
		ДанныеКодовМаркировки = РегистрыСведений.ПулКодовМаркировкиСУЗ.ДанныеКодовМаркировки(АкцизныеМарки);
	КонецЕсли;
	
	Для Каждого СтрокаЧека Из ТаблицаТоварыЧека Цикл
		
		НоваяСтрокаТовары = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаЧека);
		
		Если ЗначениеЗаполнено(СтрокаЧека.КодАкцизнойМарки) Тогда
			ДанныеКодаМаркировки = ДанныеКодовМаркировки.Найти(СтрокаЧека.КодАкцизнойМарки);
			Если Не ДанныеКодаМаркировки = Неопределено
				И ЗначениеЗаполнено(ДанныеКодаМаркировки.ПолныйКодМаркировки) Тогда
				ПолныйКодМаркировки = МенеджерОборудованияКлиентСервер.Base64ВШтрихкод(ДанныеКодаМаркировки.ПолныйКодМаркировки);
				НоваяСтрокаТовары.КодМаркировки = СтрЗаменить(ПолныйКодМаркировки, СимволGS1, Разделитель);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаЧека.Упаковка) Тогда
			НоваяСтрокаТовары.Количество = СтрокаЧека.КоличествоУпаковок;
		КонецЕсли;
		
		Если СтрокаЧека.НеобходимостьВводаСерии Тогда
			ПодобратьСериюНоменклатурыИзТаблицыСерий(НоваяСтрокаТовары, ТаблицаСерийНоменклатуры);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяСтрокаТовары.КодТРУ) Тогда
			НоваяСтрокаТовары.ВозможнаОплатаЭС = Истина;
		КонецЕсли;
		
		ТоварнаяГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрокаТовары.Номенклатура, "ТоварнаяГруппа");
		НоваяСтрокаТовары.СистемаНалогообложения = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложения(
			ТекущаяДата,
			Объект.Организация,
			Объект.ТорговыйОбъект,
			СкладПродажи,
			ТоварнаяГруппа);
			
		ЗаполнитьОрганизациюПродажи(НоваяСтрокаТовары, Форма);
		
		Если СтрокаЧека.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха
			И СтрокаЧека.НеобходимостьВводаАкцизнойМарки
			И СтрокаЧека.НеобходимостьВводаСерии Тогда
			СтрокаЧека.НеобходимостьВводаСерии = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаЧека.ПодарочныйСертификат)
			И СтрокаЧека.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
			НоваяСтрокаТовары.Серия = СтрокаЧека.ПодарочныйСертификат;
		КонецЕсли;
		
		СкорректироватьЦенуПодарочногоСертификата(Форма, НоваяСтрокаТовары);
		
	КонецЦикла;
	
	ОбщегоНазначенияРМК.ЗагрузитьВТаблицуЗначений(ЧекККМ.Оплата, Объект.Оплата, Истина);

	// Кэшированые значения скидок наценок
	ОбщегоНазначенияРМК.ЗагрузитьВТаблицуЗначений(ЧекККМ.СкидкиНаценки, Форма.ТаблицаСкидкиНаценки, Истина);
	Для Каждого СтрокаБонусов Из ЧекККМ.БонусныеБаллыКНачислению Цикл
		НоваяСтрока = Форма.ТаблицаБонусныеБаллы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаБонусов);
		НоваяСтрока.БонуснаяПрограмма = СтрокаБонусов.БонуснаяПрограммаЛояльности;
		
		НоваяСтрока = Форма.ТаблицаБонусныеБаллыЧекаПродажи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаБонусов);
		НоваяСтрока.БонуснаяПрограмма = СтрокаБонусов.БонуснаяПрограммаЛояльности;
	КонецЦикла;
	
	Если Объект.Оплата.Количество() > 0 И ЧекККМ.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Отложенный Тогда
		Форма.ОтложенныйЧекПолностьюОплачен = Истина;
		Для Каждого Оплата Из Объект.Оплата Цикл
			Если Оплата.ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.Наличные Тогда
				Форма.СуммаОплаченоНал = Оплата.Сумма;
			ИначеЕсли Оплата.ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта Тогда
				Форма.СуммаОплаченоБН = Оплата.Сумма;
			ИначеЕсли Оплата.ВидОплаты.ТипОплаты= Перечисления.ТипыОплатЧекаККМ.БанковскийПлатеж ИЛИ
				Оплата.ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ЗачетАванса Тогда
				Форма.СуммаОплаченоБезнал = Оплата.Сумма;
			ИначеЕсли Оплата.ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.БанковскийКредит Тогда
				Форма.СуммаОплаченоКредитом = Оплата.Сумма;
			ИначеЕсли Оплата.ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ВРассрочку Тогда
				Форма.СуммаОплаченоВРассрочку = Оплата.Сумма; 
			ИначеЕсли Оплата.ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяСистема Тогда
				Если Оплата.ВидОплаты.ПлатежнаяСистема = Перечисления.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей Тогда
					Форма.СуммаОплаченоСБП = Оплата.Сумма;
				ИначеЕсли Оплата.ВидОплаты.ПлатежнаяСистема = Перечисления.ТипыПлатежнойСистемыККТ.ЮКасса Тогда
					Форма.СуммаОплаченоЮКасса = Оплата.Сумма;
				ИначеЕсли Оплата.ВидОплаты.ПлатежнаяСистема = Перечисления.ТипыПлатежнойСистемыККТ.СертификатНСПК Тогда
					Форма.СуммаОплаченоСертификатамиНСПК = Оплата.Сумма;
				КонецЕсли
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияРМК.ЭтоВидОперацииПродажа(Объект.ВидОперации) Тогда
		РасчитатьСуммуСкидокВСтроках(Объект.Товары);
	КонецЕсли;
	
	Если ТребуютсяДанныеКонтроля Тогда
		НачальныйНомерЗапроса = 10;
		ДополнительныеИсходящиеДанные.ДанныеКонтроляПродаж
			= ПодготовитьДанныеКонтроляПродаж(РезультатыЗапросов, НачальныйНомерЗапроса);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчитатьСуммуСкидокВСтроках(ТабличнаяЧастьТовары)
	
	Для Каждого Строка Из ТабличнаяЧастьТовары Цикл
		ИтоговаяСумма = Строка.Сумма + Строка.СуммаСкидкиОплатыБонусом + Строка.СуммаАвтоматическойСкидки + Строка.СуммаСкидкиНаценки;
		ИтоговаяЦенаПродажи = Окр(ИтоговаяСумма / Строка.Количество, 2, РежимОкругления.Окр15как10);
		
		Строка.Сумма = ИтоговаяСумма - Строка.СуммаСкидкиОплатыБонусом - Строка.СуммаАвтоматическойСкидки - Строка.СуммаСкидкиНаценки;
		Строка.СуммаБезСкидки = ИтоговаяСумма;
		Строка.СуммаАвтоматическойСкидкиЧекаПродажи = Строка.СуммаАвтоматическойСкидки;
		Строка.СуммаСкидкиНаценкиЧекаПродажи = Строка.СуммаСкидкиНаценки;
		Строка.СуммаСкидкиОплатыБонусомЧекаПродажи = Строка.СуммаСкидкиОплатыБонусом;
		Строка.СуммаСкидокОбщая = Строка.СуммаСкидкиОплатыБонусом + Строка.СуммаАвтоматическойСкидки + Строка.СуммаСкидкиНаценки;
		Строка.СуммаБезСкидкиЧекаПродажи = Строка.СуммаБезСкидки;
		Строка.Цена = ИтоговаяЦенаПродажи;
	КонецЦикла;
	
КонецПроцедуры

Процедура НастроитьИспользованиеПродажПоЗаказам(Форма)
	
	Форма.Элементы.ПродажаПоЗаказу.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПокупателей");
	
КонецПроцедуры

Функция ДанныеПоТоварамЗаказаПокупателя(ЗаказПокупателя, ДополнительныеИсходящиеДанные)
	
	ТребуютсяДанныеКонтроля = Ложь;
	Если Не ДополнительныеИсходящиеДанные = Неопределено
			И ДополнительныеИсходящиеДанные.Свойство("ДанныеКонтроляПродаж")
			И ТипЗнч(ДополнительныеИсходящиеДанные.ДанныеКонтроляПродаж) = Тип("Структура") Тогда
		ТребуютсяДанныеКонтроля = Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.КодСтроки КАК КодСтроки,
	|	СУММА(ВложенныйЗапрос.ЗаказаноОстаток) КАК ЗаказаноОстаток
	|ПОМЕСТИТЬ ТаблицаРегистра
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыПокупателейОстатки.Характеристика КАК Характеристика,
	|		ЗаказыПокупателейОстатки.КодСтроки КАК КодСтроки,
	|		ЗаказыПокупателейОстатки.ЗаказаноОстаток КАК ЗаказаноОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(, Заказ = &Заказ) КАК ЗаказыПокупателейОстатки
	|	ГДЕ
	|		ЗаказыПокупателейОстатки.ЗаказаноОстаток > 0) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяТовары.Характеристика КАК Характеристика,
	|	ЗаказПокупателяТовары.Количество КАК Количество,
	|	ЗаказПокупателяТовары.Упаковка КАК Упаковка,
	|	ЗаказПокупателяТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ЗаказПокупателяТовары.Цена КАК Цена,
	|	ЗаказПокупателяТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ЗаказПокупателяТовары.ПроцентРучнойСкидки КАК ПроцентСкидкиНаценки,
	|	ЗаказПокупателяТовары.Сумма КАК Сумма,
	|	ЗаказПокупателяТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПокупателяТовары.СуммаНДС КАК СуммаНДС,
	|	ЗаказПокупателяТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ЗаказПокупателяТовары.СуммаРучнойСкидки КАК СуммаСкидкиНаценки,
	|	ЗаказПокупателяТовары.КлючСвязи КАК КлючСвязи,
	|	ЗаказПокупателяТовары.КодСтроки КАК КодСтроки,
	|	ЗаказПокупателяТовары.Резервировать КАК Резерв
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка = &Заказ
	|	И ЗаказПокупателяТовары.Количество > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика КАК Характеристика,
	|	ТаблицаДокумента.Количество КАК Количество,
	|	ТаблицаДокумента.Упаковка КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаДокумента.Цена КАК Цена,
	|	ТаблицаДокумента.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ТаблицаДокумента.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ТаблицаДокумента.Сумма КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
	|	ТаблицаДокумента.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ТаблицаДокумента.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ТаблицаДокумента.КлючСвязи КАК КлючСвязи,
	|	ТаблицаДокумента.КодСтроки КАК КодСтроки,
	|	ТаблицаДокумента.Резерв КАК Резерв,
	|	ТаблицаРегистра.ЗаказаноОстаток КАК ЗаказаноОстаток
	|ПОМЕСТИТЬ ТаблицаДокументРегистр
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРегистра КАК ТаблицаРегистра
	|		ПО ТаблицаДокумента.Номенклатура = ТаблицаРегистра.Номенклатура
	|			И ТаблицаДокумента.Характеристика = ТаблицаРегистра.Характеристика
	|			И ТаблицаДокумента.КодСтроки = ТаблицаРегистра.КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументРегистр.Номенклатура КАК Номенклатура,
	|	ТаблицаДокументРегистр.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА ТаблицаДокументРегистр.Упаковка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА ТаблицаДокументРегистр.КоличествоУпаковок
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	ТаблицаДокументРегистр.Цена КАК Цена,
	|	ТаблицаДокументРегистр.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ТаблицаДокументРегистр.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ТаблицаДокументРегистр.Сумма * ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток / ТаблицаДокументРегистр.Количество
	|	КОНЕЦ КАК Сумма,
	|	ТаблицаДокументРегистр.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДокументРегистр.СуммаНДС * ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток / ТаблицаДокументРегистр.Количество
	|	КОНЕЦ КАК СуммаНДС,
	|	ТаблицаДокументРегистр.СуммаАвтоматическойСкидки * ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток / ТаблицаДокументРегистр.Количество
	|	КОНЕЦ КАК СуммаАвтоматическойСкидки,
	|	ТаблицаДокументРегистр.СуммаСкидкиНаценки * ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток / ТаблицаДокументРегистр.Количество
	|	КОНЕЦ КАК СуммаСкидкиНаценки,
	|	ТаблицаДокументРегистр.КлючСвязи КАК КлючСвязи,
	|	ТаблицаДокументРегистр.КодСтроки КАК КодСтроки,
	|	ТаблицаДокументРегистр.ЗаказаноОстаток КАК Количество,
	|	&Заказ КАК ЗаказПокупателя,
	|	&Склад КАК Склад,
	|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьСерии, ЛОЖЬ)
	|		ИЛИ ЕСТЬNULL(СпрНоменклатура.ИспользоватьСерийныеНомера, ЛОЖЬ) КАК НеобходимостьВводаСерии,
	|	ЕСТЬNULL(СпрНоменклатура.ИспользоватьСерийныеНомера, ЛОЖЬ)
	|		ИЛИ (ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьСерии, ЛОЖЬ) И ЕСТЬNULL(ВидыНоменклатуры.НастройкаИспользованияСерий, ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)) КАК УникальностьСерии,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ) = ИСТИНА
	|			ТОГДА ИСТИНА
	|		КОГДА НЕ СпрНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка)
	|				И НЕ СпрНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеобходимостьВводаКодаМаркировки,
	|	ТаблицаДокументРегистр.ЗаказаноОстаток * ТаблицаДокументРегистр.Цена КАК СуммаБезСкидки,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки, 0) КАК КоличествоВПотребительскойУпаковке,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия, ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИС.ПустаяСсылка)) КАК ЧастичноеВыбытиеВариантУчета,
	|	НЕ НастройкиЧастичногоВыбытияПродукцииИС.НоменклатураЧастичногоВыбытия ЕСТЬ NULL КАК ПоштучноеВыбытие,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА ТаблицаДокументРегистр.КоличествоУпаковок
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток
	|	КОНЕЦ КАК ЧастичноеВыбытиеКоличество,
	|	ТаблицаДокументРегистр.Резерв КАК Резерв,
	|	ТаблицаДокументРегистр.Номенклатура КАК ЧастичноеВыбытиеНоменклатура,
	|	ТаблицаДокументРегистр.Характеристика КАК ЧастичноеВыбытиеХарактеристика
	|ИЗ
	|	ТаблицаДокументРегистр КАК ТаблицаДокументРегистр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТаблицаДокументРегистр.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО (СпрНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|		ПО (СпрНоменклатура.ВидАлкогольнойПродукцииЕГАИС = ВидыАлкогольнойПродукции.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЧастичногоВыбытияПродукцииИС КАК НастройкиЧастичногоВыбытияПродукцииИС
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|			ПО НастройкиЧастичногоВыбытияПродукцииИС.Номенклатура = ОписаниеНоменклатурыИС.Номенклатура
	|		ПО ТаблицаДокументРегистр.Номенклатура = НастройкиЧастичногоВыбытияПродукцииИС.НоменклатураЧастичногоВыбытия
	|ГДЕ
	|	ТаблицаДокументРегистр.ЗаказаноОстаток > 0";
	
	Если ТребуютсяДанныеКонтроля Тогда
		ТекстЗапросаТоваров = ПолучитьТекстЗапросаТоваровЗаказа();
		
		РазделительЗапросов = "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		ТекстЗапросаКонтроляПродаж = ПолучитьТекстЗапросаКонтроляПродаж(ТекстЗапросаТоваров);
		Запрос.Текст = СтрШаблон("%1%2%3", Запрос.Текст, РазделительЗапросов, ТекстЗапросаКонтроляПродаж);
		ПараметрТаблицаТоваров = Неопределено;
		
		УстановитьПараметрыЗапросаКонтроляПродаж(Запрос, ПараметрТаблицаТоваров, ДополнительныеИсходящиеДанные);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Заказ", ЗаказПокупателя);
	Запрос.УстановитьПараметр("Склад", ЗаказПокупателя.Склад);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Результат = МассивРезультатов[3].Выгрузить();
	
	Если ТребуютсяДанныеКонтроля Тогда
		НачальныйНомерЗапроса = 12;
		ДополнительныеИсходящиеДанные.ДанныеКонтроляПродаж
			= ПодготовитьДанныеКонтроляПродаж(МассивРезультатов, НачальныйНомерЗапроса);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет факт существования реквизита формы по имени реквизита 
//
// Параметры:
//  Форма - Форма - форма, наличие реквизита у которой предстоит проверить
//  ИмяРеквизита - Строка - имя реквизита, наличие которого у формы предстоит проверить
//
// Возвращаемое значение:
//  Результат - Булево - результат проверки наличия реквизита
//
Функция РеквизитФормыСуществует(Форма, ИмяРеквизита)

	Результат = Ложь;
	
	Если ТипЗнч(ИмяРеквизита) = Тип("Строка") 
		И НЕ ПустаяСтрока(ИмяРеквизита) Тогда
		
		ИмяРеквизита = СокрЛП(ИмяРеквизита);
		РеквизитыФормы = Форма.ПолучитьРеквизиты();
		
		Для каждого РеквизитФормы Из РеквизитыФормы Цикл
		
			Если РеквизитФормы.Имя = ИмяРеквизита Тогда
				
				Результат = Истина;
				Прервать;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Процедура НастроитьГруппуЗапретыПродаж(Форма)
	
	ИспользоватьПоставляемыеОрганиченияПродаж = ОбщегоНазначенияРМК.ИспользоватьПоставляемыеОграниченияПродаж();
	ИспользоватьСерверЛояльностиПолучательДанных = ПолучитьФункциональнуюОпцию("ИспользоватьСерверЛояльностиПолучательДанных");
	Форма.Элементы.ГруппаИспользованиеЗапретовПродаж.Видимость = ИспользоватьСерверЛояльностиПолучательДанных
		ИЛИ ИспользоватьПоставляемыеОрганиченияПродаж;
		
КонецПроцедуры

Процедура НастроитьГруппуЗаказы(Форма)
	
	Форма.Элементы.ГруппаЗаказы.Видимость = Ложь;
	
КонецПроцедуры

Процедура НастроитьГруппуРаботыСОтложеннымиЧеками(Форма)
	
	Форма.НастройкаРМК.КоличествоДнейХраненияОтложенныхЧеков = Константы.КоличествоДнейХраненияОтложенныхЧеков.Получить();
	Форма.Элементы.ГруппаНастройкиУдаленияНепробитыхЧеков.Видимость = Ложь;
	Форма.Элементы.ГруппаКоличествоДнейХранения.Видимость = Ложь;
	
КонецПроцедуры

Процедура НастроитьИспользованиеБезналичныхПлатежей(Форма)
	
	Форма.Элементы.БезналичныеПлатежи.Видимость = Истина;
	
КонецПроцедуры

Процедура НастроитьЭлементыФормыПриБезналичнойОплате(Форма, Сумма)
	
	Форма.Элементы.ГруппаОплатаБезнал.Видимость = Истина;
	Форма.СуммаОплаченоБезнал = Сумма;
	
КонецПроцедуры

Процедура НастроитьИспользованиеРасчетовСКлиентами(Форма)
	
	ИспользоватьРасчетыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетыСКлиентами");
	ИспользоватьОплатуКредитом = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуБанковскимиКредитами");
	
	Форма.Элементы.ПриемАванса.Видимость = ИспользоватьРасчетыСКлиентами;
	Форма.Элементы.ДокументРасчета.Видимость = ИспользоватьРасчетыСКлиентами;
	Форма.Элементы.ГруппаВидОплатыВРассрочку.Видимость = ИспользоватьРасчетыСКлиентами;
	Форма.Элементы.ГруппаВидОплатыПредоплата.Видимость = ИспользоватьРасчетыСКлиентами;
	Форма.Элементы.ГруппаВидОплатыКредитом.Видимость = ИспользоватьОплатуКредитом;
	
	ПрограммноСоздатьТаблицуДокументовРасчета(Форма);
	
КонецПроцедуры

Процедура ПрограммноСоздатьТаблицуДокументовРасчета(Форма)
	
	ДобавляемыеРеквизиты = Новый Массив;
	КвалификаторЧисла15_2 = Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный);
	
	ТипРеквизита = Новый Массив;
	ТипРеквизита.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповДляРеквизита = Новый ОписаниеТипов(ТипРеквизита);
	НовыйРеквизит = Новый РеквизитФормы("ТаблицаДокументовРасчета", ОписаниеТиповДляРеквизита);
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("ДокументРасчета", Метаданные.ОпределяемыеТипы.ДокументРасчетаРМК.Тип, "ТаблицаДокументовРасчета");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("Сумма", Новый ОписаниеТипов("Число", КвалификаторЧисла15_2), "ТаблицаДокументовРасчета");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("ЭтоОплатаРассрочки", Новый ОписаниеТипов("Булево"), "ТаблицаДокументовРасчета");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("ЭтоЗачетАванса", Новый ОписаниеТипов("Булево"), "ТаблицаДокументовРасчета");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("Рассрочка", Новый ОписаниеТипов("Число", КвалификаторЧисла15_2), "ТаблицаДокументовРасчета");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("Аванс", Новый ОписаниеТипов("Число", КвалификаторЧисла15_2), "ТаблицаДокументовРасчета");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("ЗаказПокупателя", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"), "ТаблицаДокументовРасчета");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"), "ТаблицаДокументовРасчета");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"), "ТаблицаДокументовРасчета");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

Процедура НастроитьИспользованиеНовогоПодбораТоваров(Форма)
	
	Возврат;
	
КонецПроцедуры

Процедура ПроверитьСкладПродажи(ЧекККМ, Отказ, ТекстОшибки)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ОрганизацияПродажи КАК ОрганизацияПродажи,
	|	ТоварыДокумента.Склад КАК Склад,
	|	ТоварыДокумента.Номенклатура КАК Номенклатура,
	|	ТоварыДокумента.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТоварыДокумента КАК ТоварыДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.ОрганизацияПродажи КАК ОрганизацияПродажи,
	|	ТаблицаТовары.Склад КАК Склад,
	|	ЕСТЬNULL(Склады.Организация, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК ОрганизацияСклада,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|		ПО ТаблицаТовары.Склад = Склады.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	НЕ СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)";
	
	Запрос.УстановитьПараметр("ТоварыДокумента", ЧекККМ.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ОрганизацияПродажи", ЧекККМ.Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПредставлениеТовара = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
			Выборка.Номенклатура,
			Выборка.Характеристика);
			
		Если Выборка.Склад = Справочники.Склады.ПустаяСсылка() Тогда
			
			Отказ = Истина;
			ШаблонОшибки = НСтр("ru = 'В строке: %1
										|не заполнен склад продажи.'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, ПредставлениеТовара);
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Запись нового документа ЧекККМ перед пробитием на ККТ.'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
			
		ИначеЕсли Не Выборка.ОрганизацияПродажи = Выборка.ОрганизацияСклада Тогда
			
			Отказ = Истина;
			ШаблонОшибки = НСтр("ru = 'В строке: ""%1"" неверно заполнен склад.
										|В документе: ""%2""
										|В складе ""%3"": ""%4"".'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, ПредставлениеТовара, Выборка.ОрганизацияПродажи, Выборка.Склад, Выборка.ОрганизацияСклада);
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Запись нового документа ЧекККМ перед пробитием на ККТ.'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СвернутьСтрокиПриПечатиЧека(ДанныеДляПробитияЧека)
	
	ПозицииЧека = ДанныеДляПробитияЧека.ПозицииЧека;
	
	Если ПозицииЧека.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//Чеки с текстовыми строками не сворачиваются
	Для Каждого ПозицияЧека Из ПозицииЧека Цикл
		Если ПозицияЧека.Свойство("Текст") Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПозицийЧека = МассивВТаблицуЗначений(ПозицииЧека);
	
	ОтборДляСвертки = Новый Структура();
	ОтборДляСвертки.Вставить("СуммаСкидок", 0);
	
	МассивСтрокДляСвертки = ТаблицаПозицийЧека.НайтиСтроки(ОтборДляСвертки);
	
	Если МассивСтрокДляСвертки.Количество() > 1 Тогда
		
		КолонкиТаблицы = ТаблицаПозицийЧека.Колонки;
		МассивИменКолонокСтруктур = Новый Массив;
		
		Для Каждого СтрокаТовара Из ТаблицаПозицийЧека Цикл
			Для Каждого КолонкаТаблицы Из КолонкиТаблицы Цикл
				Если ТипЗнч(СтрокаТовара[КолонкаТаблицы.Имя]) = Тип("Структура") Тогда
					МассивИменКолонокСтруктур.Добавить(КолонкаТаблицы.Имя);
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЦикла;
		
		Для Каждого СтрокаДляСвертки Из МассивСтрокДляСвертки Цикл
			СтрокаДляСвертки.НомерСтрокиТовара = 0;
			Для Каждого КолонкаСтруктуры Из МассивИменКолонокСтруктур Цикл
				ЗначениеСтруктуры = СтрокаДляСвертки[КолонкаСтруктуры];
				СтруктураВСТрокеXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЗначениеСтруктуры);
				СтрокаДляСвертки[КолонкаСтруктуры] = СтруктураВСТрокеXML;
			КонецЦикла;
		КонецЦикла;
		
		ИменаКолонокСуммируемых = "";
		ИменаКолонокСвертки = "";
		
		Для Каждого КолонкаТаблицы Из ТаблицаПозицийЧека.Колонки Цикл	
			Если Лев(КолонкаТаблицы.Имя, 5) = "Сумма" ИЛИ Лев(КолонкаТаблицы.Имя, 10) = "Количество" Тогда
				ИменаКолонокСуммируемых = ИменаКолонокСуммируемых + ", " + КолонкаТаблицы.Имя;
			Иначе
				ИменаКолонокСвертки = ИменаКолонокСвертки + ", " + КолонкаТаблицы.Имя;
			КонецЕсли;
		КонецЦикла;
		
		ИменаКолонокСуммируемых = Сред(ИменаКолонокСуммируемых,3);
		ИменаКолонокСвертки = Сред(ИменаКолонокСвертки,3);
		
		ТаблицаПозицийЧека.Свернуть(ИменаКолонокСвертки, ИменаКолонокСуммируемых);
		
		НомерСтрокиТовара = 0;
		Для Каждого СтрокаТовара Из ТаблицаПозицийЧека Цикл
			Если СтрокаТовара.НомерСтрокиТовара = 0 Тогда
				Для Каждого КолонкаСтруктуры Из МассивИменКолонокСтруктур Цикл
					СтруктураВСТрокеXML = СтрокаТовара[КолонкаСтруктуры];
					ЗначениеСтруктуры = ОбщегоНазначения.ЗначениеИзСтрокиXML(СтруктураВСТрокеXML);
					СтрокаТовара[КолонкаСтруктуры] = ЗначениеСтруктуры;
				КонецЦикла;
			КонецЕсли;
			НомерСтрокиТовара = НомерСтрокиТовара + 1;
			СтрокаТовара.НомерСтрокиТовара = НомерСтрокиТовара;
		КонецЦикла;
		
		ПозицииЧека = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаПозицийЧека);
		ДанныеДляПробитияЧека.ПозицииЧека = ПозицииЧека;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицу значений на основании массива структур.
// 
// Параметры:
//  МассивСтруктур - Массив - массив структур, которые будут преобразованы в таблицу значений.
//                            Свойства структуры первого элемента массива определяют состав колонок результирующей таблицы.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица значений, созданная из массива структур.
// 
Функция МассивВТаблицуЗначений(МассивСтруктур)
	
	Таблица = Новый ТаблицаЗначений;
	// Создадим колонки по первой структуре массива
	Если ТипЗнч(МассивСтруктур) = Тип("Массив")
		И МассивСтруктур.Количество() <> 0 Тогда
		ПерваяСтруктура = МассивСтруктур[0];
		Для Каждого Свойство Из ПерваяСтруктура Цикл 
			Таблица.Колонки.Добавить(Свойство.Ключ);
		КонецЦикла;
		
		Для Каждого Структура Из МассивСтруктур Цикл 
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Структура);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

Процедура НастроитьИспользованиеОтправкиSMS(Форма)
	
	Возврат;
	
КонецПроцедуры

Функция ПолучитьПараметрыРасчетаСкидок(ФормаРМК)
	
	Объект = ФормаРМК.Объект;
	
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2));
	Товары = Объект.Товары.Выгрузить();
	Товары.Колонки.Добавить("КлючСвязи", ОписаниеТиповЧисло);
	Товары.Колонки.Добавить("КлючСвязиУслугаАгента", ОписаниеТиповЧисло);
	Товары.Колонки.Добавить("ПродажаПодарка", Новый ОписаниеТипов("Булево"));
	Товары.Колонки.Добавить("ПроцентРучнойСкидки", ОписаниеТиповЧисло);
	Товары.Колонки.Добавить("СуммаРучнойСкидки", ОписаниеТиповЧисло);
	Товары.Колонки.Добавить("СуммаВсего", ОписаниеТиповЧисло);
	Товары.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	
	//Бонусная программа
	БонуснаяПрограммаЛояльности = Неопределено;
	УменьшатьСуммуЧекаДляСкидок = Ложь;
	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		БонуснаяПрограммаЛояльности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДисконтнаяКарта, "БонуснаяПрограммаЛояльности");
		Если ЗначениеЗаполнено(БонуснаяПрограммаЛояльности) Тогда
			УменьшатьСуммуЧекаДляСкидок = БонуснаяПрограммаЛояльности.УменьшатьСуммуЧекаДляСкидок;
		КонецЕсли;
	КонецЕсли;
	
	Индекс = 1;
	Для Каждого СтрокаТовар Из Товары Цикл
		СтрокаТовар.КлючСвязи = Индекс;
		СтрокаТовар.КлючСвязиУслугаАгента = 0;
		СтрокаТовар.ПроцентРучнойСкидки = СтрокаТовар.ПроцентСкидкиНаценки;
		СтрокаТовар.СуммаРучнойСкидки = СтрокаТовар.СуммаСкидкиНаценки;
		СтрокаТовар.СуммаВсего = СтрокаТовар.СуммаБезСкидки - СтрокаТовар.СуммаСкидкиНаценки - СтрокаТовар.СуммаАвтоматическойСкидки;
		СтрокаТовар.Сумма = СтрокаТовар.Сумма + СтрокаТовар.СуммаСкидкиОплатыБонусом;
		СтрокаТовар.ДоговорКонтрагента = СтрокаТовар.Номенклатура.ДоговорКонтрагента;
		Индекс = Индекс + 1;
	КонецЦикла;

	ТекущаяДатаОбъекта = ТекущаяДатаСеанса();
	
	Если ФормаРМК.ЧекККМПродажа = Неопределено Тогда
		СкидкиНаценки = Документы.ЧекККМ.ПустаяСсылка().СкидкиНаценки;
	Иначе
		СкидкиНаценки = ФормаРМК.ЧекККМПродажа.СкидкиНаценки;
	КонецЕсли;
	
	ВходныеПараметры = Новый Структура; 
	ВходныеПараметры.Вставить("ПрименятьКОбъекту", Истина);
	ВходныеПараметры.Вставить("ТолькоПредварительныйРасчет"		, Ложь);
	
	ПараметрыСкидок = Новый Структура;
	ПараметрыСкидок.Вставить("Дата", ТекущаяДатаОбъекта);
	ПараметрыСкидок.Вставить("Ссылка", Документы.ЧекККМ.ПустаяСсылка());
	
	РеквизитыМагазина = "ИспользоватьПрименениеЦен, ФорматМагазина, СегментИсключаемойНоменклатуры, СкладПродажи, ВидМинимальныхЦенПродажи, ПравилоЦенообразования";
	МагазинСРеквизитами = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ТорговыйОбъект, РеквизитыМагазина);
	ДисконтныеКарты = МаркетинговыеАкцииСервер.ИсторияДисконтнойКарты(ТекущаяДатаОбъекта, Объект.ДисконтнаяКарта, Истина);
	
	ПараметрыРасчета = Новый Структура;
	
	ПараметрыРасчета.Вставить("ИспользоватьПрименениеЦен"		, МагазинСРеквизитами.ИспользоватьПрименениеЦен);
	ПараметрыРасчета.Вставить("ФорматМагазина"					, МагазинСРеквизитами.ФорматМагазина);
	ПараметрыРасчета.Вставить("СегментИсключаемойНоменклатуры"	, МагазинСРеквизитами.СегментИсключаемойНоменклатуры);
	ПараметрыРасчета.Вставить("СкладПродажи"					, МагазинСРеквизитами.СкладПродажи);
	ПараметрыРасчета.Вставить("ВидМинимальныхЦенПродажи"		, МагазинСРеквизитами.ВидМинимальныхЦенПродажи);
	ПараметрыРасчета.Вставить("ПравилоЦенообразования"  		, МагазинСРеквизитами.ПравилоЦенообразования);
	ПараметрыРасчета.Вставить("ДеньНедели"						, Перечисления.ДниНедели.Получить(ДеньНедели(ТекущаяДатаОбъекта) - 1));
	ПараметрыРасчета.Вставить("ВремяОбъекта"					, '00010101' + (ТекущаяДатаОбъекта - НачалоДня(ТекущаяДатаОбъекта)));
	ПараметрыРасчета.Вставить("ДисконтныеКарты"					, ДисконтныеКарты);
	ПараметрыРасчета.Вставить("ДисконтнаяКартаПредъявлена"		, ЗначениеЗаполнено(Объект.ДисконтнаяКарта));
	ПараметрыРасчета.Вставить("РабочееМесто"					, ФормаРМК.РабочееМесто);
	ПараметрыРасчета.Вставить("ПолучателиСкидок"				, СерверЛояльностиПоставщикДанныхРТ.СформироватьМассивПолучателейСкидок(ДисконтныеКарты));
	ПараметрыРасчета.Вставить("СкидкиНаценки"					, Ложь);
	ПараметрыРасчета.Вставить("Оплата"							, Объект.Оплата.Выгрузить());
	ПараметрыРасчета.Вставить("Регистратор"						, Документы.ЧекККМ.ПустаяСсылка());
	ПараметрыРасчета.Вставить("Ссылка"							, Документы.ЧекККМ.ПустаяСсылка());
	ПараметрыРасчета.Вставить("Магазин"							, Объект.ТорговыйОбъект);
	ПараметрыРасчета.Вставить("СкидкиНаценки"					, Документы.ЧекККМ.ПустаяСсылка().СкидкиНаценки);
	ПараметрыРасчета.Вставить("Товары"							, Товары);
	ПараметрыРасчета.Вставить("ЦенаВключаетНДС"				, Объект.ЦенаВключаетНДС);
	ПараметрыРасчета.Вставить("ТекущаяДата"						, ТекущаяДатаОбъекта);
	ПараметрыРасчета.Вставить("СписокОдноразовыхКодов"			, Новый Массив);
	ПараметрыРасчета.Вставить("ДеньРождения"					, МаркетинговыеАкцииСервер.БлижайшийДеньРождения(ТекущаяДатаОбъекта, Объект.ДисконтнаяКарта.ВладелецКарты));

	ПараметрыРасчета.Вставить("ВидМинимальныхЦенПродажи"		, Неопределено);
	ПараметрыРасчета.Вставить("УправляемыеСкидки"				, Неопределено);
	ПараметрыРасчета.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
	ПараметрыРасчета.Вставить("ТолькоСообщенияПослеОформления"	, Ложь);
	ПараметрыРасчета.Вставить("ТолькоПредварительныйРасчет"		, Ложь);
	ПараметрыРасчета.Вставить("РасчетПодарков"					, Истина);
	ПараметрыРасчета.Вставить("РасчетСообщений"					, Истина);
	
	ПараметрыРасчета.Вставить("ЕстьПодаркиВТЧ"					, Ложь);
	ПараметрыРасчета.Вставить("ИспользоватьПрименениеЦен"		, Ложь);
	ПараметрыРасчета.Вставить("КонтролироватьОстаткиТоваров"	, Ложь);
	ПараметрыРасчета.Вставить("СуммаДокумента"					, 0);
	ПараметрыРасчета.Вставить("СкидкиРассчитаны"				, Ложь);
	
	//Бонусная программа
	Если ЗначениеЗаполнено(БонуснаяПрограммаЛояльности) Тогда
		ВходныеПараметры.Вставить("БонуснаяПрограмма", БонуснаяПрограммаЛояльности);
		ПараметрыРасчета.Вставить("УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов", УменьшатьСуммуЧекаДляСкидок);
	КонецЕсли;
	ПараметрыРасчета.Вставить("ВходныеПараметры"				, ВходныеПараметры);
	
	Возврат ПараметрыРасчета;
	
КонецФункции

Процедура СкопироватьСообщенияВТаблицу(ТабилицаИсточник, ТаблицаПриемник)
	
	Для каждого СтрокаСообщения Из ТабилицаИсточник Цикл
		НоваяСтрока = ТаблицаПриемник.Добавить();
		НоваяСтрока.ТекстСообщения = СтрокаСообщения.ТекстСообщения;
		НоваяСтрока.ПослеОформленияЧека = (СтрокаСообщения.СкидкаНаценка.МоментВыдачиСообщения = 
		Перечисления.ТочкиВыдачиСообщенияКассиру.ПослеОформленияЧека);
	КонецЦикла;
	
КонецПроцедуры

Процедура НастроитьГруппуШаблоныШтрихкодов(Форма)
	
	Форма.Элементы.ГруппаШаблоныШтрихкодов.Видимость = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьСтавкиНДСДляЧекаКоррекции(Форма)
	
	СписокВыбора = Форма.Элементы.ТоварыСтавкаНДСПереключатель.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС20, "20%");
	СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС10, "10%");
	СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС0, "0%");
	
КонецПроцедуры

Процедура НастроитьИспользованиеСервераЛояльности(Форма)
	
	ЗаполнитьПризнакИспользоватьСерверЛояльностиПолучательДанных(Форма.ИспользоватьСерверЛояльностиПолучательДанных);
	
КонецПроцедуры

// Возвращает режим записи документа ЧекККМ.
//
// ВозвращаемоеЗначение:
//  РежимЗаписиДокумента - режим, который необходим при записи документа ЧекККМ.
//
Функция РежимЗаписи()
	
	Возврат РежимЗаписиДокумента.Проведение;
	
КонецФункции

// Возвращает признак использования контроля продаж.
//
// Возвращаемое значение:
//  ИспользоватьКонтрольПродаж - Булево - признак использования контроля продаж.
//
Функция ИспользоватьКонтрольПродаж()
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольПродаж");
	
КонецФункции

Процедура ЗаполнитьДанныеМеховыхИзделий(НоваяСтрока, СтрокаТовара)
	
	Если Не СтрокаТовара.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТовара.НеобходимостьВводаКодаМаркировки И ЗначениеЗаполнено(СтрокаТовара.КодМаркировки) Тогда
		КодМарки = СтрокаТовара.КодМаркировки;
		ДанныеШтрихкода = ШтрихкодированиеИСРТ.ДанныеШтрихкодаДляОбработки();
		ДанныеШтрихкода.Номенклатура = СтрокаТовара.Номенклатура;
		ДанныеШтрихкода.Штрихкод = КодМарки;
		СозданнаяСерия = ИнтеграцияИСРТ.НайтиСоздатьСериюПоДаннымШтрихкода(ДанныеШтрихкода);
	ИначеЕсли СтрокаТовара.НеобходимостьВводаСерии И ЗначениеЗаполнено(СтрокаТовара.Серия) Тогда
		КодМарки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовара.Серия, "НомерКиЗГИСМ");
		ДанныеШтрихкода = ШтрихкодУпаковкиТовараПоПолномуКодуМарки(КодМарки, СтрокаТовара);
		СтрокаТовара.КодМаркировки = КодМарки;
		СтрокаТовара.НеобходимостьВводаКодаМаркировки = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьВидимостьВыбораКонтрагента(Форма)
	
	Форма.Элементы.ВыбратьКонтрагента.Видимость = Истина;
	Форма.Элементы.ВыбратьКонтрагентаКартаНеНайдена.Видимость = Истина;
	
КонецПроцедуры

Процедура ОпределитьЗаполненностьФизЛицаТекущегоПользователя(ФизЛицоПользователяЗаполнено) Экспорт
	
	ФизЛицоПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователи.ТекущийПользователь(), "ФизическоеЛицо");
	ФизЛицоПользователяЗаполнено = ЗначениеЗаполнено(ФизЛицоПользователя);
	
КонецПроцедуры

// Заполняет ТаблицаОстатков на форме РМК
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ПараметрыПолученияОстатков - Структура:
//    Номенклатура - ОпределяемыйТип.НоменклатураРМК - номенклатура.
//    Характеристика - ОпределяемыйТип.ХарактеристикаРМК - характеристика.
//    Упаковка - ОпределяемыйТип.УпаковкаРМК - упаковка.
//
Процедура ЗаполнитьТаблицуОстатков(Форма, ПараметрыПолученияОстатков) Экспорт
	
	ТаблицаОстатков = СерверЛояльностиПоставщикДанныхРТ.ПолучитьТаблицуОстатков(ПараметрыПолученияОстатков);
	ТаблицаОстатковНаФорме = Форма.ТаблицаОстатков;
	
	Для Каждого СтрокаОстатков Из ТаблицаОстатков Цикл
		
		НоваяСтрока = ТаблицаОстатковНаФорме.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатков);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СкорректироватьСуммуНДСДляСворачиванияСтрокВЧеке(Форма, ТоварыИОплаты)
	Перем ТаблицаИтоговНДС;
	
	СворачиватьСтрокиПриПечатиЧека = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.ТекущаяНастройкаРМК,
		"СворачиватьСтрокиПриПечатиЧека");
	
	Если СворачиватьСтрокиПриПечатиЧека Тогда
		
		Если ТипЗнч(ТоварыИОплаты.Товары) = Тип("Массив") Тогда
			ТаблицаИтоговНДС = ?(ТипЗнч(Форма.Объект.Товары) = Тип("ТаблицаЗначений"),
				Форма.Объект.Товары.Скопировать(ТоварыИОплаты.Товары),
				Форма.Объект.Товары.Выгрузить(ТоварыИОплаты.Товары));
		Иначе
			ТаблицаИтоговНДС = ТоварыИОплаты.Товары.Скопировать();
		КонецЕсли;
		ИсключитьСтрокиСоСкидками(ТаблицаИтоговНДС);
		КолонкиСворачивания = СформироватьСтрокуКолонокСворачиванияЧека(ТаблицаИтоговНДС);
		ТаблицаИтоговНДС.Свернуть(КолонкиСворачивания, "Сумма,СуммаНДС");
		Если ТаблицаИтоговНДС.Количество() < ТоварыИОплаты.Товары.Количество() Тогда
			ПересчитатьСтрокиЗаполненныхСуммНДС(Форма.Объект, ТаблицаИтоговНДС);
			СкорректироватьСуммуНДСВСтрокахТоваров(ТоварыИОплаты.Товары, ТаблицаИтоговНДС, КолонкиСворачивания);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсключитьСтрокиСоСкидками(ТаблицаИтоговНДС)
	
	КоличествоСтрок = ТаблицаИтоговНДС.Количество();
	ПорядковыйНомер = 0;
	Пока ПорядковыйНомер < КоличествоСтрок Цикл
		ПорядковыйНомер = ПорядковыйНомер + 1;
		ИндексСтроки = КоличествоСтрок - ПорядковыйНомер;
		ТекущаяСтрока = ТаблицаИтоговНДС.Получить(ИндексСтроки);
		Если Не ТекущаяСтрока.СуммаСкидокОбщая = 0 Тогда
			ТаблицаИтоговНДС.Удалить(ИндексСтроки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция КолонкиИсключенияСвертки()
	
	КолонкиИсключения = Новый Массив;
	КолонкиИсключения.Добавить("ДоляСтоимости");
	КолонкиИсключения.Добавить("ЕМРЦ");
	КолонкиИсключения.Добавить("ЗапретОплатыБонусамиСкидками");
	КолонкиИсключения.Добавить("ИдентификаторСтроки");
	КолонкиИсключения.Добавить("ИндексКартинки");
	КолонкиИсключения.Добавить("ИсходныйНомерСтроки");
	КолонкиИсключения.Добавить("НомерСтроки");
	
	Возврат КолонкиИсключения;
	
КонецФункции

Функция СформироватьСтрокуКолонокСворачиванияЧека(ТаблицаИтоговНДС)
	
	ИменаКолонокСвертки = "";
	КолонкиИсключения = КолонкиИсключенияСвертки();
	
	Для Каждого КолонкаТаблицы Из ТаблицаИтоговНДС.Колонки Цикл
		Если Не (Лев(КолонкаТаблицы.Имя, 5) = "Сумма" ИЛИ Лев(КолонкаТаблицы.Имя, 10) = "Количество")
			И КолонкиИсключения.Найти(КолонкаТаблицы.Имя) = Неопределено Тогда
			
			ИменаКолонокСвертки = ИменаКолонокСвертки + ?(ИменаКолонокСвертки = "", "", ",") + КолонкаТаблицы.Имя;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИменаКолонокСвертки;
	
КонецФункции

Процедура ПересчитатьСтрокиЗаполненныхСуммНДС(Объект, ТаблицаИтоговНДС)
	
	КоличествоСтрок = ТаблицаИтоговНДС.Количество();
	ТаблицаИтоговНДС.Колонки.Добавить("БылаСуммаНДС", Метаданные.ОпределяемыеТипы.НеотрицательноеЧисло15_2_РМК.Тип);
	ПорядковыйИндекс = 0;
	Пока ПорядковыйИндекс < КоличествоСтрок Цикл
		ПорядковыйИндекс = ПорядковыйИндекс + 1;
		ИндексСтроки = КоличествоСтрок - ПорядковыйИндекс;
		ТекущаяСтрока = ТаблицаИтоговНДС.Получить(ИндексСтроки);
		Если ТекущаяСтрока.СуммаНДС = 0 Тогда
			ТаблицаИтоговНДС.Удалить(ТекущаяСтрока);
		Иначе
			ТекущаяСтрока.БылаСуммаНДС = ТекущаяСтрока.СуммаНДС;
			ОбщегоНазначенияРМКРТКлиентСервер.РассчитатьСуммуНДС(Объект, ТекущаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СкорректироватьСуммуНДСВСтрокахТоваров(ТаблицаТоваров, ТаблицаИтоговНДС, КолонкиСворачивания)
	
	МассивКолонок = СтрРазделить(КолонкиСворачивания, ",", Ложь);
	Для Каждого СтрокаИтогаНДС Из ТаблицаИтоговНДС Цикл
		Если СтрокаИтогаНДС.СуммаНДС <> СтрокаИтогаНДС.БылаСуммаНДС Тогда
			ОтборСтрок = ПодготовитьОтборСтрокСвернутыхТоваров(СтрокаИтогаНДС, МассивКолонок);
			СтрокиТоваров = ВыделитьСтрокиПоОтбору(ТаблицаТоваров, ОтборСтрок);
			КорректируемаяСтрока = ПолучитьСтрокуСМаксимальнойСуммойНДС(СтрокиТоваров);
			Если Не КорректируемаяСтрока = Неопределено Тогда
				КорректируемаяСтрока.СуммаНДС = КорректируемаяСтрока.СуммаНДС
						+ (СтрокаИтогаНДС.СуммаНДС - СтрокаИтогаНДС.БылаСуммаНДС);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВыделитьСтрокиПоОтбору(ТаблицаТоваров, ОтборСтрок)
	
	МассивСтрок = Новый Массив;
	Для Каждого Строкатовара Из ТаблицаТоваров Цикл
		Если СтрокаУдовлетворяетУсловиямОтбора(Строкатовара, ОтборСтрок) Тогда
			МассивСтрок.Добавить(Строкатовара);
		КонецЕсли;
	КонецЦикла;
	Возврат МассивСтрок;
	
КонецФункции

Функция СтрокаУдовлетворяетУсловиямОтбора(СтрокаТовара, ОтборСтрок)
	
	СтрокаПодходит = Истина;
	Для Каждого ЭлементОтбора Из ОтборСтрок Цикл
		Если Не СтрокаТовара[ЭлементОтбора.Ключ] = ЭлементОтбора.Значение Тогда
			СтрокаПодходит = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат СтрокаПодходит;
	
КонецФункции

Функция ПолучитьСтрокуСМаксимальнойСуммойНДС(СтрокиТоваров)
	
	РезультатФункции = Неопределено;
	КоличествоСтрок = СтрокиТоваров.Количество();
	ПорядковыйИндекс = 0;
	Пока ПорядковыйИндекс < КоличествоСтрок Цикл
		ПорядковыйИндекс = ПорядковыйИндекс + 1;
		ИндексСтроки = КоличествоСтрок - ПорядковыйИндекс;
		СтрокаТовара = СтрокиТоваров[ИндексСтроки];
		Если РезультатФункции = Неопределено Или РезультатФункции.СуммаНДС < СтрокаТовара.СуммаНДС Тогда
			РезультатФункции = СтрокаТовара;
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункции;
	
КонецФункции

Функция ПодготовитьОтборСтрокСвернутыхТоваров(СтрокаИтогаНДС, МассивКолонок)
	
	ОтборСтрок = Новый Структура;
	Для каждого КолонкаСворачивания Из МассивКолонок Цикл
		ОтборСтрок.Вставить(КолонкаСворачивания, СтрокаИтогаНДС[КолонкаСворачивания]);
	КонецЦикла;
	Возврат ОтборСтрок;
	
КонецФункции

Процедура ВывестиДанныеСуществующейКарты(Форма, КартаКлиента)
	
	ДанныеКарты = ПолучитьДанныеКартыКлиента(КартаКлиента);
	
	Форма.НоваяКартаНомер = ДанныеКарты.НомерКарты;
	Форма.НоваяКартаФИО = ДанныеКарты.НаименованиеВладельца;
	МаскаТелефона = ИнтерфейсРМКСлужебныйКлиентСервер.МаскаВводаТелефона();
	Форма.НоваяКартаТелефон
		= ИнтерфейсРМКСлужебныйКлиентСервер.ПривестиЗначениеКМаскеТелефона(ДанныеКарты.НомерТелефона, МаскаТелефона);
	Форма.НоваяКартаПочта = ДанныеКарты.АдресЭП;
	Форма.НоваяКартаДатаРождения
		= ?(ЗначениеЗаполнено(ДанныеКарты.ДатаРождения), Формат(ДанныеКарты.ДатаРождения, "ДФ=dd.MM.yyyy"), "");
	
КонецПроцедуры

Функция ПолучитьДанныеКартыКлиента(КартаКлиента)
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.Текст =
	"ВЫБРАТЬ
	|	ИнформационныеКарты.Ссылка КАК Ссылка,
	|	ИнформационныеКарты.ВладелецКарты КАК ВладелецКарты,
	|	МИНИМУМ(ИнфКартыКонтактнаяИнформацияТелефон.НомерСтроки) КАК НомерСтрокиКартаТелефон,
	|	МИНИМУМ(ИнфКартыКонтактнаяИнформацияАдресЭП.НомерСтроки) КАК НомерСтрокиКартаАдресЭП,
	|	МИНИМУМ(ФизЛицаКонтактнаяИнформацияТелефон.НомерСтроки) КАК НомерСтрокиФизЛицоТелефон,
	|	МИНИМУМ(ФизЛицаКонтактнаяИнформацияАдресЭП.НомерСтроки) КАК НомерСтрокиФизЛицоАдресЭП,
	|	МИНИМУМ(КонтрагентыКонтактнаяИнформацияТелефон.НомерСтроки) КАК НомерСтрокиКонтрагентТелефон,
	|	МИНИМУМ(КонтрагентыКонтактнаяИнформацияАдресЭП.НомерСтроки) КАК НомерСтрокиКонтрагентАдресЭП,
	|	МАКСИМУМ(ЕСТЬNULL(Штрихкоды.Штрихкод, """")) КАК КодКартыШтрихкод
	|ПОМЕСТИТЬ КартыНомераСтрокКИ
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты.КонтактнаяИнформация КАК ИнфКартыКонтактнаяИнформацияТелефон
	|		ПО ИнформационныеКарты.Ссылка = ИнфКартыКонтактнаяИнформацияТелефон.Ссылка
	|			И (ИнфКартыКонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (НЕ ИнфКартыКонтактнаяИнформацияТелефон.НомерТелефона = """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты.КонтактнаяИнформация КАК ИнфКартыКонтактнаяИнформацияАдресЭП
	|		ПО ИнформационныеКарты.Ссылка = ИнфКартыКонтактнаяИнформацияАдресЭП.Ссылка
	|			И (ИнфКартыКонтактнаяИнформацияАдресЭП.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|			И (НЕ ИнфКартыКонтактнаяИнформацияАдресЭП.АдресЭП = """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизЛицаКонтактнаяИнформацияТелефон
	|		ПО ИнформационныеКарты.ВладелецКарты = ФизЛицаКонтактнаяИнформацияТелефон.Ссылка
	|			И (ФизЛицаКонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (НЕ ФизЛицаКонтактнаяИнформацияТелефон.НомерТелефона = """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизЛицаКонтактнаяИнформацияАдресЭП
	|		ПО ИнформационныеКарты.ВладелецКарты = ФизЛицаКонтактнаяИнформацияАдресЭП.Ссылка
	|			И (ФизЛицаКонтактнаяИнформацияАдресЭП.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|			И (НЕ ФизЛицаКонтактнаяИнформацияАдресЭП.АдресЭП = """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформацияТелефон
	|		ПО ИнформационныеКарты.ВладелецКарты = КонтрагентыКонтактнаяИнформацияТелефон.Ссылка
	|			И (КонтрагентыКонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (НЕ КонтрагентыКонтактнаяИнформацияТелефон.НомерТелефона = """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформацияАдресЭП
	|		ПО ИнформационныеКарты.ВладелецКарты = КонтрагентыКонтактнаяИнформацияАдресЭП.Ссылка
	|			И (КонтрагентыКонтактнаяИнформацияАдресЭП.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|			И (НЕ КонтрагентыКонтактнаяИнформацияАдресЭП.АдресЭП = """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО ИнформационныеКарты.Ссылка = Штрихкоды.Владелец
	|ГДЕ
	|	ИнформационныеКарты.Ссылка = &КартаКлиента
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнформационныеКарты.Ссылка,
	|	ИнформационныеКарты.ВладелецКарты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КартыНомераСтрокКИ.Ссылка КАК КартаСсылка,
	|	КартыНомераСтрокКИ.ВладелецКарты КАК КлиентСсылка,
	|	ЕСТЬNULL(СпрФизическиеЛица.Наименование, ЕСТЬNULL(СпрКонтрагенты.Наименование, """")) КАК НаименованиеКлиента,
	|	ЕСТЬNULL(СпрФизическиеЛица.ДатаРождения, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаРождения,
	|	ЕСТЬNULL(ИнфКартыКонтактнаяИнформацияТелефон.НомерТелефона, ЕСТЬNULL(ФизЛицаКонтактнаяИнформацияТелефон.НомерТелефона, ЕСТЬNULL(КонтрагентыКонтактнаяИнформацияТелефон.НомерТелефона, """"))) КАК НомерТелефона,
	|	ЕСТЬNULL(ИнфКартыКонтактнаяИнформацияТелефон.АдресЭП, ЕСТЬNULL(ФизЛицаКонтактнаяИнформацияТелефон.АдресЭП, ЕСТЬNULL(КонтрагентыКонтактнаяИнформацияТелефон.АдресЭП, """"))) КАК АдресЭП,
	|	КартыНомераСтрокКИ.КодКартыШтрихкод КАК КодКартыШтрихкод,
	|	СпрИнформационныеКарты.КодКарты КАК КодКартыМагнитный,
	|	ВЫБОР
	|		КОГДА СпрИнформационныеКарты.ВидКарты = ЗНАЧЕНИЕ(Перечисление.ВидыИнформационныхКарт.Магнитная)
	|			ТОГДА ВЫБОР
	|					КОГДА СпрИнформационныеКарты.КодКарты = """"
	|						ТОГДА КартыНомераСтрокКИ.КодКартыШтрихкод
	|					ИНАЧЕ СпрИнформационныеКарты.КодКарты
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КартыНомераСтрокКИ.КодКартыШтрихкод = """"
	|					ТОГДА СпрИнформационныеКарты.КодКарты
	|				ИНАЧЕ КартыНомераСтрокКИ.КодКартыШтрихкод
	|			КОНЕЦ
	|	КОНЕЦ КАК НомерКарты
	|ИЗ
	|	КартыНомераСтрокКИ КАК КартыНомераСтрокКИ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СпрКонтрагенты
	|		ПО КартыНомераСтрокКИ.ВладелецКарты = СпрКонтрагенты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК СпрФизическиеЛица
	|		ПО КартыНомераСтрокКИ.ВладелецКарты = СпрФизическиеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты.КонтактнаяИнформация КАК ИнфКартыКонтактнаяИнформацияТелефон
	|		ПО КартыНомераСтрокКИ.Ссылка = ИнфКартыКонтактнаяИнформацияТелефон.Ссылка
	|			И КартыНомераСтрокКИ.НомерСтрокиКартаТелефон = ИнфКартыКонтактнаяИнформацияТелефон.НомерСтроки
	|			И (ИнфКартыКонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты.КонтактнаяИнформация КАК ИнфКартыКонтактнаяИнформацияАдресЭП
	|		ПО КартыНомераСтрокКИ.Ссылка = ИнфКартыКонтактнаяИнформацияАдресЭП.Ссылка
	|			И КартыНомераСтрокКИ.НомерСтрокиКартаАдресЭП = ИнфКартыКонтактнаяИнформацияАдресЭП.НомерСтроки
	|			И (ИнфКартыКонтактнаяИнформацияАдресЭП.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизЛицаКонтактнаяИнформацияТелефон
	|		ПО КартыНомераСтрокКИ.ВладелецКарты = ФизЛицаКонтактнаяИнформацияТелефон.Ссылка
	|			И КартыНомераСтрокКИ.НомерСтрокиФизЛицоТелефон = ФизЛицаКонтактнаяИнформацияТелефон.НомерСтроки
	|			И (ФизЛицаКонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизЛицаКонтактнаяИнформацияАдресЭП
	|		ПО КартыНомераСтрокКИ.ВладелецКарты = ФизЛицаКонтактнаяИнформацияАдресЭП.Ссылка
	|			И КартыНомераСтрокКИ.НомерСтрокиФизЛицоАдресЭП = ФизЛицаКонтактнаяИнформацияАдресЭП.НомерСтроки
	|			И (ФизЛицаКонтактнаяИнформацияАдресЭП.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформацияТелефон
	|		ПО КартыНомераСтрокКИ.ВладелецКарты = КонтрагентыКонтактнаяИнформацияТелефон.Ссылка
	|			И КартыНомераСтрокКИ.НомерСтрокиКонтрагентТелефон = КонтрагентыКонтактнаяИнформацияТелефон.НомерСтроки
	|			И (КонтрагентыКонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформацияАдресЭП
	|		ПО КартыНомераСтрокКИ.ВладелецКарты = КонтрагентыКонтактнаяИнформацияАдресЭП.Ссылка
	|			И КартыНомераСтрокКИ.НомерСтрокиКонтрагентАдресЭП = КонтрагентыКонтактнаяИнформацияАдресЭП.НомерСтроки
	|			И (КонтрагентыКонтактнаяИнформацияАдресЭП.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК СпрИнформационныеКарты
	|		ПО КартыНомераСтрокКИ.Ссылка = СпрИнформационныеКарты.Ссылка";
	ЗапросДанных.УстановитьПараметр("КартаКлиента", КартаКлиента);
	ВыборкаДанных = ЗапросДанных.Выполнить().Выбрать();
	ВыборкаДанных.Следующий();
	
	РеузльтатФункции = Новый Структура();
	РеузльтатФункции.Вставить("ВладелецКарты", ВыборкаДанных.КлиентСсылка);
	РеузльтатФункции.Вставить("НаименованиеВладельца", ВыборкаДанных.НаименованиеКлиента);
	РеузльтатФункции.Вставить("ДатаРождения", ВыборкаДанных.ДатаРождения);
	РеузльтатФункции.Вставить("НомерТелефона", ВыборкаДанных.НомерТелефона);
	РеузльтатФункции.Вставить("АдресЭП", ВыборкаДанных.АдресЭП);
	РеузльтатФункции.Вставить("КодКартыШтрихкод", ВыборкаДанных.КодКартыШтрихкод);
	РеузльтатФункции.Вставить("КодКартыМагнитный", ВыборкаДанных.КодКартыМагнитный);
	РеузльтатФункции.Вставить("НомерКарты", ВыборкаДанных.НомерКарты);
	
	Возврат РеузльтатФункции;
	
КонецФункции

// Возвращает значение перезаполнения данных в панели избранных товаров
//
// Параметры:
//  ОтображатьОстаток - Булево
//
Функция ПерезаполнитьИзбранное(ОтображатьОстаток) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	ОбновленыЦены = Константы.ОбновленаИнформацияПоЦенамИзбранныеТовары.Получить();
	
	Результат = ОбновленыЦены ИЛИ ОтображатьОстаток;
	
	Константы.ОбновленаИнформацияПоЦенамИзбранныеТовары.Установить(Ложь);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
КонецФункции

Функция ДанныеОсновнойНоменклатурыЧастичногоВыбытия(НоменклатураЧастичногоВыбытия, ХарактеристикаЧастичногоВыбытия)
	
	ВозвращаемоеЗначение = Новый  Структура;
	ВозвращаемоеЗначение.Вставить("Номенклатура",   ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	ВозвращаемоеЗначение.Вставить("Характеристика", ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиЧастичногоВыбытияПродукцииИС.Номенклатура КАК Номенклатура,
		|	НастройкиЧастичногоВыбытияПродукцииИС.Характеристика КАК Характеристика
		|ИЗ
		|	РегистрСведений.НастройкиЧастичногоВыбытияПродукцииИС КАК НастройкиЧастичногоВыбытияПродукцииИС
		|ГДЕ
		|	НастройкиЧастичногоВыбытияПродукцииИС.НоменклатураЧастичногоВыбытия = &НоменклатураЧастичногоВыбытия
		|	И НастройкиЧастичногоВыбытияПродукцииИС.ХарактеристикаЧастичногоВыбытия = &ХарактеристикаЧастичногоВыбытия";
	
	Запрос.УстановитьПараметр("НоменклатураЧастичногоВыбытия",   НоменклатураЧастичногоВыбытия);
	Запрос.УстановитьПараметр("ХарактеристикаЧастичногоВыбытия", ХарактеристикаЧастичногоВыбытия);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначение, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура УстановитьПризнакИзмененияЦеныПередЗаписью(Источник, Отказ, Замещение) Экспорт
	УстановитьПривилегированныйРежим(Истина);

	Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
	Для Каждого Запись из Источник Цикл
		Номенклатура = Запись.Номенклатура;
		Характеристика = Запись.Характеристика;
		ВидЦены = Запись.ВидЦены;
	КонецЦикла;
	ЗначениеОбновленаИнформацияПоЦенам = Константы.ОбновленаИнформацияПоЦенамИзбранныеТовары.Получить();
	
	Если НЕ ЗначениеОбновленаИнформацияПоЦенам Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	КассыККМ.РабочееМесто КАК РабочееМесто
		|ПОМЕСТИТЬ втРабочееМестоКассыККМ
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Магазины КАК Магазины
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаЦенообразования КАК ПравилаЦенообразования
		|			ПО Магазины.ПравилоЦенообразования = ПравилаЦенообразования.Ссылка
		|		ПО КассыККМ.Магазин = Магазины.Ссылка
		|ГДЕ
		|	ПравилаЦенообразования.ВидЦен = &ТекущийВидЦены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиРабочегоМестаКассира.СтруктураБыстрыхТоваров КАК СтруктураБыстрыхТоваров
		|ПОМЕСТИТЬ втНастройкиРабочегоМестаКассира
		|ИЗ
		|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРабочееМестоКассыККМ КАК втРабочееМестоКассыККМ
		|		ПО НастройкиРабочегоМестаКассира.РабочееМесто = втРабочееМестоКассыККМ.РабочееМесто
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПалитраТоваровРМКСостав.Ссылка КАК Ссылка
		|ИЗ
		|	втНастройкиРабочегоМестаКассира КАК втНастройкиРабочегоМестаКассира
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПалитраТоваровРМК.Состав КАК ПалитраТоваровРМКСостав
		|		ПО втНастройкиРабочегоМестаКассира.СтруктураБыстрыхТоваров = ПалитраТоваровРМКСостав.Ссылка
		|ГДЕ
		|	ПалитраТоваровРМКСостав.Номенклатура = &НоменклатураЗаписи
		|	И ПалитраТоваровРМКСостав.Характеристика = &ХарактеристикаЗаписи";
		
		Запрос.УстановитьПараметр("НоменклатураЗаписи", Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикаЗаписи", Характеристика);
		Запрос.УстановитьПараметр("ТекущийВидЦены", ВидЦены);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Константы.ОбновленаИнформацияПоЦенамИзбранныеТовары.Установить(Истина);
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Процедура ДописатьВЧекКартуЛояльности(ТекущийЧек, ПараметрыКартыЛояльности)
	
	Если Не ЗначениеЗаполнено(ТекущийЧек.ДисконтнаяКарта)
			И ИнтерфейсРМКСлужебныйКлиентСервер.ПараметрыКартыЗаполнены(ПараметрыКартыЛояльности) Тогда
			
		Если ЗначениеЗаполнено(ПараметрыКартыЛояльности.ИдентификаторКарты) Тогда
			КартаГУИД = Новый УникальныйИдентификатор(ПараметрыКартыЛояльности.ИдентификаторКарты);
			КартаКлиента = Справочники.ИнформационныеКарты.ПолучитьСсылку(КартаГУИД);
			
			ТекущийЧек.ДисконтнаяКарта = КартаКлиента;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПоследниеЦифрыСтроки(ИсходнаяСтрока, КоличествоЦифр)
	
	РезультатФункции = "";
	ЦифрДобавлено = 0;
	КоличествоСимволов = СтрДлина(ИсходнаяСтрока);
	ИндексСимвола = 0;
	Пока ИндексСимвола < КоличествоСимволов И ЦифрДобавлено < КоличествоЦифр Цикл
		ТекущийСимвол = Сред(ИсходнаяСтрока, КоличествоСимволов - ИндексСимвола, 1);
		Если СтрНайти("0123456789", ТекущийСимвол) > 0 Тогда
			РезультатФункции = ТекущийСимвол + РезультатФункции;
			ЦифрДобавлено = ЦифрДобавлено + 1;
		КонецЕсли;
		ИндексСимвола = ИндексСимвола + 1;
	КонецЦикла;
	
	Возврат РезультатФункции;
	
КонецФункции

// Заполняет данные выбора по номенклатуре, для добавления в корзину РМК
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира
//  ДанныеВыбора - Структура:
//    Номенклатура - ОпределяемыйТип.НоменклатураРМК - номенклатура.
//    Характеристика - ОпределяемыйТип.ХарактеристикаРМК - характеристика.
//    Упаковка - ОпределяемыйТип.УпаковкаРМК - упаковка.
//    Цена
//    ОсобенностьУчета
//    ВидНоменклатуры
//    ВыборТовараВручную
//
Процедура ПодготовитьДанныеВыбораНоменклатуры(Форма, ДанныеВыбора) Экспорт
	
	Номенклатура = ДанныеВыбора.Номенклатура;
	ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
	СписокТоваров = Форма.СписокТоваров;
	Элементы = Форма.Элементы;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокТоваров, "Упаковка", ЕдиницаИзмерения, , , Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокТоваров, "Номенклатура", Номенклатура, , , Истина);
	
	Схема = Элементы.СписокТоваров.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.СписокТоваров.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокТоваров, "Упаковка");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(СписокТоваров, "Номенклатура");
	
	Если Результат.Количество() <> 0 Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеВыбора, Результат[0]);
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значение для видимости ручной скидки на форме РМК
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира
//
//
Процедура УстановитьЗначениеПримененияРучнойСкидки(Форма) Экспорт
	
	ПравоУстанавливатьРучныеСкидки =
		НЕ (Форма.СписокРолейПользователя.НайтиПоЗначению("ПравоРучнаяСкидкаРМК") = Неопределено);
	
	Форма.ДопускаетсяПрименениеСкидок = ПравоУстанавливатьРучныеСкидки И (Форма.МаксимальныйПроцентРучнойСкидки > 0);
	
КонецПроцедуры

// Устанавливает видимость элементов доступных остатков в зависимости от настройки РМК
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира
//
Процедура ДополнитьНастройкиОтображенияОстатков(Форма) Экспорт
	
	ЭлементыФормы = Форма.Элементы;
	ОтображатьОстаток = Форма.ОтображатьОстаток;
	ЭлементыФормы.СписокТоваровДоступно.Видимость = ОтображатьОстаток;
	ЭлементыФормы.СписокТоваровВРезерве.Видимость = ОтображатьОстаток;
	
КонецПроцедуры

// Устанавливает признак пересчета автоматических скидок
//
// Параметры:
//  ВыполнитьПересчетАвтоматическихСкидок - Булево - признак пересчета автоматических скидок, после применения ручных
//
Процедура ЗаполнитьПризнакПересчетаСкидок(ВыполнитьПересчетАвтоматическихСкидок) Экспорт
	
	ВыполнитьПересчетАвтоматическихСкидок = Истина;
	
КонецПроцедуры

Процедура СкрытьСтрокуОборудованияУстройствРаспознавания(Форма)
	
	Элементы = Форма.Элементы;
	Элементы.НастройкаПОУстройствоРаспознавания.Видимость = Ложь;
	Элементы.ДекорацияПОУстройствоРаспознавания.Видимость = Ложь;
	Элементы.ДекорацияКПодключениюУстройствоРаспознавания.Видимость = Ложь;
	
КонецПроцедуры

Функция ЗапуститьРабочееМестоНаВесьЭкран()
	
	РезультатФункции = Ложь;
	Если Не (Пользователи.РолиДоступны("ПравоУдалитьЧекРМК") Или ОбщегоНазначения.ЭтоВебКлиент()) Тогда
		РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
		
		ЗапросОпции = Новый Запрос;
		ЗапросОпции.Текст =
		"ВЫБРАТЬ
		|	НастройкиРабочегоМестаКассира.ВестиЖурналДействийКассира КАК ВестиЖурналДействийКассира
		|ИЗ
		|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
		|ГДЕ
		|	НЕ НастройкиРабочегоМестаКассира.ПометкаУдаления
		|	И НастройкиРабочегоМестаКассира.РабочееМесто = &РабочееМесто";
		ЗапросОпции.УстановитьПараметр("РабочееМесто", РабочееМесто);
		ВыборкаОпции = ЗапросОпции.Выполнить().Выбрать();
		Если ВыборкаОпции.Следующий() И ВыборкаОпции.ВестиЖурналДействийКассира Тогда
			РезультатФункции = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗарегистрироватьОперациюОткладыванияЧека(Форма, ЧекККМОбъект)
	
	Если ИнтерфейсРМКСлужебныйКлиентСервер.РегистрироватьДействияКассира(Форма) Тогда
		ПараметрыОперации = ИнтерфейсРМКСлужебныйКлиентСервер.ПодготовитьПараметрыОперацииНаРабочемМестеКассира(Форма);
		ПараметрыОперации.РегистрируемаяОперация = Перечисления.ОперацииРабочегоМестаКассира.ОткладываниеЧека;
		ПараметрыОперации.Чек = ЧекККМОбъект.Ссылка;
		ПараметрыОперации.Сумма = ЧекККМОбъект.СуммаДокумента;
		
		РегистрыСведений.ЖурналДействийКассира.ЗарегистрироватьОперацию(ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет заказ покупателя по чеку.
// 
// Параметры:
//  ЧекККМ - ОпределяемыйТип.ЧекККМРМК - чек ккм.
//  ЗаказПокупателя - ОпределяемыйТип.ЗаказПокупателяРМК - заказ покупателя.
//
Процедура ЗаполнитьЗаказПокупателяПоЧеку(ЧекККМ, ЗаказПокупателя) Экспорт
	
	ЗаказПокупателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЧекККМ, "ЗаказПокупателя");
	
КонецПроцедуры

Процедура ТребуетсяОбновлениеСпискаCDNПлощадок(ТребуетсяОбновлениеСпискаCDNПлощадок, СтандартнаяОбработка) Экспорт
	ТребуетсяОбновлениеСпискаCDNПлощадок = ОбщегоНазначенияИСМП.ТребуетсяОбновлениеСпискаCDNПлощадок();
КонецПроцедуры

Процедура ЗаполнитьНастройкиРазрешительногоРежима(Форма)

	РазрешительныйРежимГосИС = ПолучитьФункциональнуюОпцию("ЗапрашиватьДанныеСервисаИСМП")
								И ОбщегоНазначенияИСМПВызовСервера.ВестиУчетМаркируемойПродукции();
								
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиРабочегоМестаКассира.Ссылка КАК Ссылка,
		|	НастройкиРабочегоМестаКассира.ОжидатьРезультатПроверкиМарок КАК ОжидатьРезультатПроверкиМарок
		|ИЗ
		|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
		|ГДЕ
		|	НЕ НастройкиРабочегоМестаКассира.ПометкаУдаления
		|	И НастройкиРабочегоМестаКассира.РабочееМесто = &РабочееМесто";
	Запрос.УстановитьПараметр("РабочееМесто", Форма.РабочееМесто);
	
	ВыборкаНастроек = Запрос.Выполнить().Выбрать();
	КоличествоНастроек = ВыборкаНастроек.Количество();
	
	Если КоличествоНастроек = 1 И ВыборкаНастроек.Следующий() Тогда
		ТекущаяНастройкаРМК = ВыборкаНастроек.Ссылка;
		РазрешительныйРежимРМК = ВыборкаНастроек.ОжидатьРезультатПроверкиМарок;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если РазрешительныйРежимГосИС <> РазрешительныйРежимРМК Тогда
	
		НастройкиРМК = ТекущаяНастройкаРМК.ПолучитьОбъект();
		НастройкиРМК.ОжидатьРезультатПроверкиМарок = РазрешительныйРежимГосИС;
		
		Попытка
			НастройкиРМК.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Установка разрешительного режима РМК по настройкам ГосИС.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	
	КонецЕсли;
	

КонецПроцедуры

// Заполняет признак контроля остатка наличных в кассе если используется переопределение настроек.
//
// Параметры:
//  КонтролироватьОстатокНаличных - Булево - заполняемый признак учета
//
Процедура ЗаполнитьПризнакКонтролироватьОстатокНаличных(КонтролироватьОстатокНаличных) Экспорт
	
	КонтролироватьОстатокНаличных = НЕ УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
		ПланыВидовХарактеристик.ПраваПользователей.РазрешитьПревышениеСвободногоОстаткаДС,
		Ложь);
	
КонецПроцедуры

// Заполняет количество наличных денежных средств в кассе ккм.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияРМК - Организация
//  КассаККМ - ОпределяемыйТип.КассаККМРМК - КассаККМ
//  Результат - Число - Наличные денежные средства в кассе ККМ.
//
Процедура ЗаполнитьНаличныеДенежныеСредстваВКассеККМ(Организация, КассаККМ, Результат) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДенежныеСредстваККМ.СуммаОстаток КАК СуммаОстаток
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваККМ.Остатки(
	|			,
	|			КассаККМ = &КассаККМ) КАК ДенежныеСредстваККМ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.СуммаОстаток;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает количество наличных денежных средств в кассе ккм.
// 
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияРМК - Организация
//  КассаККМ - ОпределяемыйТип.КассаККМРМК - КассаККМ
// Возвращаемое значение:
//  ПараметрыВыемки - Структура - Структура параметров выемки
//   *ТребуетсяВыемкаПриЗакрытииСмены - Булево - Признак необходимости делать автовыемку при закрытии смены.
//   *МинимальныйОстатокНаличныхВКассе - Число - Минимальный остаток наличных при автовыемки.
//
Процедура ЗаполнитьПараметрыВыемкиПриЗакрытииСмены(Организация, КассаККМ, Результат) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КассоваяДисциплинаВыемкиПриЗакрытииСмены.МаксимальнаяСуммаРазмена ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ТребуетсяВыемкаПриЗакрытииСмены,
	|	ЕСТЬNULL(КассоваяДисциплинаВыемкиПриЗакрытииСмены.МаксимальнаяСуммаРазмена, 0) КАК МинимальныйОстатокНаличныхВКассе
	|ИЗ
	|	РегистрСведений.КассоваяДисциплинаВыемкиПриЗакрытииСмены КАК КассоваяДисциплинаВыемкиПриЗакрытииСмены
	|ГДЕ
	|	КассоваяДисциплинаВыемкиПриЗакрытииСмены.Организация = &Организация
	|	И КассоваяДисциплинаВыемкиПриЗакрытииСмены.Магазин = &Магазин";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Магазин", КассаККМ.Магазин);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет признак запрета сопоставления товара на форме РМК
//
// Параметры:
//  ЗапретитьСопоставлениеТовара - Булево - Признак запрета сопоставления товара кассиром.
//
Процедура ЗаполнитьПризнакЗапретаСопоставленияТовара(ЗапретитьСопоставлениеТовара) Экспорт
	
	ЗапретитьСопоставлениеТовара = УправлениеПользователямиВызовСервера.ПолучитьБулевоЗначениеПраваПользователя(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ПраваПользователей.НеСопоставлятьТовары"), Ложь);
	
КонецПроцедуры

Функция СформироватьТаблицуНоменклатурыДляПалитрыПоВидуПродукции(ОсобенностьУчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ОсобенностьУчета = &ОсобенностьУчета";
	Запрос.УстановитьПараметр("ОсобенностьУчета", ОсобенностьУчета);
	ТаблицаНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаНоменклатуры;
	
КонецФункции

Процедура НастроитьФормуСпискаКонтроляПродаж(Форма)

	Форма.Элементы.ИспользованиеАвтономно.Видимость = Ложь;
	Форма.Элементы.Использование.Видимость = Истина;
	
КонецПроцедуры

Процедура НастроитьФормуЭлементаКонтроляПродаж(Форма)
	
	Форма.АвтономнаяЛогикаИспользования = Ложь;
	
КонецПроцедуры

Процедура НастроитьФормуЭлементаПалитрыТоваров(Форма)
	
	Форма.Объект.Служебная = Истина;
	Форма.Элементы.СформироватьПримерЗаполненияПанели.Видимость = Ложь;
	Форма.Элементы.Служебная.Доступность = Ложь;
	
КонецПроцедуры

Функция СформироватьТаблицуНоменклатурыДляПалитрыПоОтбору(ВидНоменклатуры, ОсобенностьУчета)
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
	|	И Номенклатура.ОсобенностьУчета = &ОсобенностьУчета";
	
	Если ВидНоменклатуры = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
			|	И", "");
	КонецЕсли;
	Если ОсобенностьУчета = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Номенклатура.ОсобенностьУчета = &ОсобенностьУчета", "");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	Запрос.УстановитьПараметр("ОсобенностьУчета", ОсобенностьУчета);
	
	ТаблицаНоменклатуры = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаНоменклатуры;
	
КонецФункции

Функция ПолучитьПалитруПоСлужебномуОтбору(ВидНоменклатуры, ОсобенностьУчета)
	
	РезультатФункции = Неопределено;
	
	НаименованиеПалитры = "";
	ОтборВидНоменклатуры = Неопределено;
	ОтборОсобенностьУчета = Неопределено;
	Если ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		ОтборВидНоменклатуры = ВидНоменклатуры;
		НаименованиеПалитры = ПолучитьНаименованиеЭлемента(ВидНоменклатуры);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОсобенностьУчета) Тогда
		ОтборОсобенностьУчета = ОсобенностьУчета;
		Если НаименованиеПалитры = "" Тогда
			НаименованиеПалитры = ПолучитьНаименованиеЭлемента(ОсобенностьУчета);
		Иначе
			НаименованиеПалитры = СтрШаблон("%1, %2", НаименованиеПалитры, ПолучитьНаименованиеЭлемента(ОсобенностьУчета));
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПалитраТоваровРМК.Ссылка КАК Палитра,
	|	ПалитраТоваровРМК.СлужебныйВидНоменклатуры КАК СлужебныйВидНоменклатуры,
	|	ПалитраТоваровРМК.СлужебнаяОсобенностьУчета КАК СлужебнаяОсобенностьУчета
	|ИЗ
	|	Справочник.ПалитраТоваровРМК КАК ПалитраТоваровРМК
	|ГДЕ
	|	НЕ ПалитраТоваровРМК.ПометкаУдаления
	|	И ПалитраТоваровРМК.СлужебныйВидНоменклатуры = &ОтборВидНоменклатуры
	|	И ПалитраТоваровРМК.СлужебнаяОсобенностьУчета = &ОтборОсобенностьУчета";
	
	Если ОтборВидНоменклатуры = Неопределено Тогда
		ТекстЗапроса
			= СтрЗаменить(ТекстЗапроса, "	И ПалитраТоваровРМК.СлужебныйВидНоменклатуры = &ОтборВидНоменклатуры", "");
	Иначе
		Запрос.УстановитьПараметр("ОтборВидНоменклатуры", ОтборВидНоменклатуры);
	КонецЕсли;
	Если ОтборОсобенностьУчета = Неопределено Тогда
		ТекстЗапроса
			= СтрЗаменить(ТекстЗапроса, "	И ПалитраТоваровРМК.СлужебнаяОсобенностьУчета = &ОтборОсобенностьУчета", "");
	Иначе
		Запрос.УстановитьПараметр("ОтборОсобенностьУчета", ОтборОсобенностьУчета);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	ВыборкаПалитр = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПалитр.Следующий() И РезультатФункции = Неопределено Цикл
		Если ОтборВидНоменклатуры = Неопределено Тогда
			Если Не ЗначениеЗаполнено(ВыборкаПалитр.СлужебныйВидНоменклатуры) Тогда
				РезультатФункции = ВыборкаПалитр.Палитра;
			КонецЕсли;
		ИначеЕсли ОтборОсобенностьУчета = Неопределено Тогда
			Если Не ЗначениеЗаполнено(ВыборкаПалитр.СлужебнаяОсобенностьУчета) Тогда
				РезультатФункции = ВыборкаПалитр.Палитра;
			КонецЕсли;
		Иначе
			РезультатФункции = ВыборкаПалитр.Палитра;
		КонецЕсли;
	КонецЦикла;
	
	Если РезультатФункции = Неопределено Тогда
		Палитраобъект = ОбщегоНазначенияРМК.ПолучитьШаблонСлужебнойПалитры(Неопределено, НаименованиеПалитры);
		ТаблицаНоменклатуры = СформироватьТаблицуНоменклатурыДляПалитрыПоОтбору(ОтборВидНоменклатуры, ОтборОсобенностьУчета);
		ЗаполнитьСоставПалитры(Палитраобъект, ТаблицаНоменклатуры);
		Палитраобъект.СлужебныйВидНоменклатуры = ВидНоменклатуры;
		Палитраобъект.СлужебнаяОсобенностьУчета = ОсобенностьУчета;
		Если ПалитраОбъект.Состав.Количество() > 0 Тогда
			ПалитраОбъект.Записать();
			РезультатФункции = ПалитраОбъект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ЗаполнитьСоставПалитры(Палитраобъект, ТаблицаНоменклатуры)

	ЦветПоУмолчанию = Новый Цвет();
	ЦветСтрокой = Общегоназначения.ЗначениеВСтрокуXML(ЦветПоУмолчанию);
	
	НомерСтроки = 1;
	Для Каждого СтрокаТовара Из ТаблицаНоменклатуры Цикл
		НоваяСтрока = ПалитраОбъект.Состав.Добавить();
		НоваяСтрока.ИндексПозиции = НомерСтроки;
		НоваяСтрока.ИмяЭлемента = СтрокаТовара.Наименование;
		НоваяСтрока.Номенклатура = СтрокаТовара.Номенклатура;
		НоваяСтрока.Шрифт = ПалитраОбъект.ШрифтЭлементовПодбора;
		НоваяСтрока.ЦветШрифта = ЦветСтрокой;
		НоваяСтрока.ЦветФона = ЦветСтрокой;
			
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОтборНоменклатурыВОписанииКонтроля(ОписаниеКонтроля, ВыборкаОсобенности, СписокТоваровПуст)
	
	Если ЗначениеЗаполнено(ВыборкаОсобенности.ВидНоменклатуры)
			Или ЗначениеЗаполнено(ВыборкаОсобенности.ОсобенностьУчета) Тогда
		НоваяСтрокаОтбора = ОписаниеКонтроля.ОписаниеОтбораНоменклатуры.Добавить();
		НоваяСтрокаОтбора.ВидНоменклатуры = ВыборкаОсобенности.ВидНоменклатуры;
		НоваяСтрокаОтбора.ОсобенностьУчета = ВыборкаОсобенности.ОсобенностьУчета;
		
		СлужебнаяПалитра
			= ПолучитьПалитруПоСлужебномуОтбору(ВыборкаОсобенности.ВидНоменклатуры, ВыборкаОсобенности.ОсобенностьУчета);
		
		Если СлужебнаяПалитра = Неопределено Тогда
			СписокТоваровПуст = Истина;
		Иначе
			НоваяСтрокаОтбора.СлужебнаяПалитра = СлужебнаяПалитра;
		КонецЕсли;
	Иначе
		ОписаниеКонтроля.ВсяНоменклатура = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОтборТорговыхОбъектовВОписанииКонтроля(ОписаниеКонтроля, Организация, ТаблицаТорговыхОбъектов)
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ОтборПоОрганизации = Новый Структура("Организация", Организация);
		СтрокиТорговыхОбъектов = ТаблицаТорговыхОбъектов.НайтиСтроки(ОтборПоОрганизации);
		Для Каждого СтрокаТорговогоОбъекта Из СтрокиТорговыхОбъектов Цикл
			Если ОписаниеКонтроля.ТорговыеОбъекты.Найти(СтрокаТорговогоОбъекта.ТорговыйОбъект) = Неопределено Тогда
				ОписаниеКонтроля.ТорговыеОбъекты.Добавить(СтрокаТорговогоОбъекта.ТорговыйОбъект);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ОписаниеКонтроля.ВсеТорговыеОбъекты = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНаименованиеЭлемента(ЛюбойЭлемент)
	
	РезультатФункции = "";
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(ЛюбойЭлемент));
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		РезультатФункции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЛюбойЭлемент, "Наименование");
	ИначеЕсли Метаданные.Перечисления.Содержит(ОбъектМетаданных) Тогда
		ИмяВидаПеречисления = ЛюбойЭлемент.Метаданные().Имя;
		ИндексЗначения = Перечисления[ИмяВидаПеречисления].Индекс(ЛюбойЭлемент);
		РезультатФункции = Метаданные.Перечисления[ИмяВидаПеречисления].ЗначенияПеречисления[ИндексЗначения].Синоним;
	Иначе
		РезультатФункции = Строка(ЛюбойЭлемент);
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПолучитьТекстЗапросаТоваровЗаказа()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяТовары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ втТоварыКонтроля
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка = &Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаТоваровЧека()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЧекККМТовары.Номенклатура КАК Номенклатура,
	|	ЧекККМТовары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ втТоварыКонтроля
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|ГДЕ
	|	ЧекККМТовары.Ссылка = &ЧекККМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаКонтроляПродаж(ТекстФормированияТаблицыТоваров = "")
	
	Если ТекстФормированияТаблицыТоваров = "" Тогда
		ТекстФормированияТаблицыТоваров =
		"ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ втТоварыКонтроля
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	ТекстОбщегоЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТолькоТовары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ втТолькоТовары
	|ИЗ
	|	втТоварыКонтроля КАК ТолькоТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпрКонтрольПродаж.Ссылка КАК КонтрольПродаж,
	|	СпрКонтрольПродаж.ДляВсейНоменклатуры КАК ДляВсейНоменклатуры,
	|	СпрКонтрольПродаж.ДляВсехТорговыхОбъектов КАК ДляВсехТорговыхОбъектов
	|ПОМЕСТИТЬ втЭлементыКонтроля
	|ИЗ
	|	Справочник.КонтрольПродаж КАК СпрКонтрольПродаж
	|ГДЕ
	|	СпрКонтрольПродаж.Использование
	|	И (СпрКонтрольПродаж.ВключенВРМК
	|			ИЛИ СпрКонтрольПродаж.Локальный)
	|	И НЕ СпрКонтрольПродаж.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлементыКонтроля.КонтрольПродаж КАК КонтрольПродаж,
	|	ЭлементыКонтроля.ДляВсейНоменклатуры КАК ДляВсейНоменклатуры
	|ПОМЕСТИТЬ втЭлементыКонтроляТорговогоОбъекта
	|ИЗ
	|	втЭлементыКонтроля КАК ЭлементыКонтроля
	|ГДЕ
	|	ЭлементыКонтроля.ДляВсехТорговыхОбъектов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлементыКонтроля.КонтрольПродаж,
	|	ЭлементыКонтроля.ДляВсейНоменклатуры
	|ИЗ
	|	втЭлементыКонтроля КАК ЭлементыКонтроля
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтрольПродаж.ТорговыеОбъекты КАК КонтрольПродажТорговыеОбъекты
	|		ПО ЭлементыКонтроля.КонтрольПродаж = КонтрольПродажТорговыеОбъекты.Ссылка
	|			И (КонтрольПродажТорговыеОбъекты.ТорговыйОбъект = &ТорговыйОбъект)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлементыКонтроля.КонтрольПродаж КАК КонтрольПродаж,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика
	|ПОМЕСТИТЬ втОтобранныйКонтроль
	|ИЗ
	|	втЭлементыКонтроляТорговогоОбъекта КАК ЭлементыКонтроля
	|ГДЕ
	|	ЭлементыКонтроля.ДляВсейНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлементыКонтроля.КонтрольПродаж,
	|	ТолькоТовары.Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|ИЗ
	|	втЭлементыКонтроляТорговогоОбъекта КАК ЭлементыКонтроля
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтрольПродаж.Номенклатура КАК КонтрольПродажНоменклатура
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТолькоТовары КАК ТолькоТовары
	|			ПО КонтрольПродажНоменклатура.Номенклатура = ТолькоТовары.Номенклатура
	|		ПО ЭлементыКонтроля.КонтрольПродаж = КонтрольПродажНоменклатура.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлементыКонтроля.КонтрольПродаж,
	|	ТоварыКонтроля.Номенклатура,
	|	ТоварыКонтроля.Характеристика
	|ИЗ
	|	втЭлементыКонтроляТорговогоОбъекта КАК ЭлементыКонтроля
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтрольПродаж.ПалитрыКонтроляПродаж КАК КонтрольПродажПалитрыКонтроляПродаж
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПалитраТоваровРМК.Состав КАК ПалитраТоваровРМКСостав
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТоварыКонтроля КАК ТоварыКонтроля
	|				ПО ПалитраТоваровРМКСостав.Номенклатура = ТоварыКонтроля.Номенклатура
	|					И ПалитраТоваровРМКСостав.Характеристика = ТоварыКонтроля.Характеристика
	|			ПО КонтрольПродажПалитрыКонтроляПродаж.Палитра = ПалитраТоваровРМКСостав.Ссылка
	|				И (НЕ ПалитраТоваровРМКСостав.Ссылка.ПометкаУдаления)
	|		ПО ЭлементыКонтроля.КонтрольПродаж = КонтрольПродажПалитрыКонтроляПродаж.Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЭлементыКонтроля.КонтрольПродаж,
	|	ТолькоТовары.Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|ИЗ
	|	втЭлементыКонтроляТорговогоОбъекта КАК ЭлементыКонтроля
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтрольПродаж.ПалитрыКонтроляПродаж КАК КонтрольПродажПалитрыКонтроляПродаж
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПалитраТоваровРМК.Состав КАК ПалитраТоваровРМКСостав
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТолькоТовары КАК ТолькоТовары
	|				ПО ПалитраТоваровРМКСостав.Номенклатура = ТолькоТовары.Номенклатура
	|					И (ПалитраТоваровРМКСостав.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			ПО КонтрольПродажПалитрыКонтроляПродаж.Палитра = ПалитраТоваровРМКСостав.Ссылка
	|				И (НЕ ПалитраТоваровРМКСостав.Ссылка.ПометкаУдаления)
	|		ПО ЭлементыКонтроля.КонтрольПродаж = КонтрольПродажПалитрыКонтроляПродаж.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтобранныйКонтроль.КонтрольПродаж КАК КонтрольПродаж,
	|	СтрокиКонтроляПродаж.ВидКонтроля КАК ВидКонтроля,
	|	СтрокиКонтроляПродаж.НачалоПериода КАК НачалоПериода,
	|	СтрокиКонтроляПродаж.КонецПериода КАК КонецПериода,
	|	СтрокиКонтроляПродаж.ДеньНедели КАК ДеньНедели,
	|	СтрокиКонтроляПродаж.ВремяНачала КАК ВремяНачала,
	|	СтрокиКонтроляПродаж.ВремяОкончания КАК ВремяОкончания
	|ПОМЕСТИТЬ втСтрокиКонтроля
	|ИЗ
	|	втОтобранныйКонтроль КАК ОтобранныйКонтроль
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтрольПродаж.КонтрольПродаж КАК СтрокиКонтроляПродаж
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыКонтроля КАК СпрВидыКонтроля
	|			ПО СтрокиКонтроляПродаж.ВидКонтроля = СпрВидыКонтроля.Ссылка
	|		ПО ОтобранныйКонтроль.КонтрольПродаж = СтрокиКонтроляПродаж.Ссылка
	|ГДЕ
	|	СтрокиКонтроляПродаж.НачалоПериода <= &НачалоСледующегоДня
	|	И СтрокиКонтроляПродаж.ДеньНедели В(&ДниСегодняЗавтра)
	|	И (СтрокиКонтроляПродаж.КонецПериода >= &НачалоТекущегоДня
	|			ИЛИ СтрокиКонтроляПродаж.КонецПериода = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|	И (&РежимКассыСамообслуживания
	|			ИЛИ НЕ СпрВидыКонтроля.ТипКонтроля = ЗНАЧЕНИЕ(Перечисление.ТипыКонтроля.КонтрольСотрудникомНаКСО))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиКонтроля.ВидКонтроля КАК ВидКонтроля
	|ПОМЕСТИТЬ втВидыКонтроля
	|ИЗ
	|	втСтрокиКонтроля КАК СтрокиКонтроля
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиКонтроля.КонтрольПродаж КАК КонтрольПродаж
	|ПОМЕСТИТЬ втКонтрольПродаж
	|ИЗ
	|	втСтрокиКонтроля КАК СтрокиКонтроля
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпрКонтрольПродаж.Ссылка КАК КонтрольПродаж,
	|	СпрКонтрольПродаж.НаименованиеГруппыТоваров КАК НаименованиеГруппыТоваров
	|ИЗ
	|	втКонтрольПродаж КАК втКонтрольПродаж
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтрольПродаж КАК СпрКонтрольПродаж
	|		ПО втКонтрольПродаж.КонтрольПродаж = СпрКонтрольПродаж.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпрВидыКонтроля.Ссылка КАК ВидКонтроля,
	|	СпрВидыКонтроля.ТипКонтроля КАК ТипКонтроля,
	|	СпрВидыКонтроля.ТекстШаблонаПредупреждения КАК ТекстШаблонаПредупреждения,
	|	СпрВидыКонтроля.ПараметрыКонтроля.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Параметр КАК Параметр,
	|		Значение КАК Значение
	|	) КАК ПараметрыКонтроля
	|ИЗ
	|	втВидыКонтроля КАК ВидыКонтроля
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыКонтроля КАК СпрВидыКонтроля
	|		ПО ВидыКонтроля.ВидКонтроля = СпрВидыКонтроля.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныйКонтроль.КонтрольПродаж КАК КонтрольПродаж,
	|	ОтобранныйКонтроль.Номенклатура КАК Номенклатура,
	|	ОтобранныйКонтроль.Характеристика КАК Характеристика
	|ИЗ
	|	втОтобранныйКонтроль КАК ОтобранныйКонтроль
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКонтрольПродаж КАК втКонтрольПродаж
	|		ПО (втКонтрольПродаж.КонтрольПродаж = ОтобранныйКонтроль.КонтрольПродаж)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиКонтроля.КонтрольПродаж КАК КонтрольПродаж,
	|	СтрокиКонтроля.ВидКонтроля КАК ВидКонтроля,
	|	СтрокиКонтроля.НачалоПериода КАК НачалоПериода,
	|	СтрокиКонтроля.КонецПериода КАК КонецПериода,
	|	СтрокиКонтроля.ДеньНедели КАК ДеньНедели,
	|	СтрокиКонтроля.ВремяНачала КАК ВремяНачала,
	|	СтрокиКонтроля.ВремяОкончания КАК ВремяОкончания
	|ИЗ
	|	втСтрокиКонтроля КАК СтрокиКонтроля";
	
	ТекстЗапроса = СтрШаблон("%1%2", ТекстФормированияТаблицыТоваров, ТекстОбщегоЗапроса);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПодготовитьДанныеКонтроляПродаж(РезультатыЗапроса, НачальныйНомерЗапроса)
	
	ТаблицаКонтроляИСвойств = РезультатыЗапроса[НачальныйНомерЗапроса].Выгрузить();
	ТаблицаВидовКонтроляСПараметрами = РезультатыЗапроса[НачальныйНомерЗапроса + 1].Выгрузить();
	ТаблицаКонтроляИНоменклатуры = РезультатыЗапроса[НачальныйНомерЗапроса + 2].Выгрузить();
	ТаблицаСтрокКонтроля = РезультатыЗапроса[НачальныйНомерЗапроса + 3].Выгрузить();
	
	НаборТаблиц = Новый Структура();
	НаборТаблиц.Вставить("ТаблицаКонтроляИСвойств", ТаблицаКонтроляИСвойств);
	НаборТаблиц.Вставить("ТаблицаВидовКонтроляСПараметрами", ТаблицаВидовКонтроляСПараметрами);
	НаборТаблиц.Вставить("ТаблицаКонтроляИНоменклатуры", ТаблицаКонтроляИНоменклатуры);
	НаборТаблиц.Вставить("ТаблицаСтрокКонтроля", ТаблицаСтрокКонтроля);
	
	ДанныеКонтроляПродаж = ИнтерфейсРМКСлужебный.ПодготовитьДанныеКонтроляПродаж(НаборТаблиц);
	
	Возврат ДанныеКонтроляПродаж;
	
КонецФункции

Функция ПодготовитьТаблицуТоваровДляЗапроса(МассивТоваров, Характеристика)
	
	ПараметрТаблицаТоваров = Новый ТаблицаЗначений;
	ПараметрТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ПараметрТаблицаТоваров.Колонки.Добавить("Характеристика",
		Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		
	Для Каждого Товар Из МассивТоваров Цикл
		НоваяСтрока = ПараметрТаблицаТоваров.Добавить();
		НоваяСтрока.Номенклатура = Товар;
		НоваяСтрока.Характеристика = Характеристика;
	КонецЦикла;
	
	Возврат ПараметрТаблицаТоваров;
	
КонецФункции

Процедура УстановитьПараметрыЗапросаКонтроляПродаж(ЗапросКонтроляПродаж, ТаблицаТоваров, ДополнительныеДанные)
	
	Сутки = 86400;
	НачалоТекущегоДня = НачалоДня(ТекущаяДатаСеанса());
	НачалоСледующегоДня = НачалоТекущегоДня + Сутки;
	ДниНеделиСегодняЗавтра = Новый Массив;
	ДеньНеделиСегодня = Неопределено;
	ДеньНеделиЗавтра = Неопределено;
	ДеньНеделиПустаяСсылка = Неопределено;
	ОбщегоНазначенияРМКРТКлиентСервер.ЗаполнитьДеньНеделиПеречислением(ДеньНеделиСегодня, НачалоТекущегоДня);
	ОбщегоНазначенияРМКРТКлиентСервер.ЗаполнитьДеньНеделиПеречислением(ДеньНеделиЗавтра, НачалоСледующегоДня);
	ОбщегоНазначенияРМКРТКлиентСервер.ЗаполнитьДеньНеделиПеречислением(ДеньНеделиПустаяСсылка, Неопределено);
	ДниНеделиСегодняЗавтра.Добавить(ДеньНеделиСегодня);
	ДниНеделиСегодняЗавтра.Добавить(ДеньНеделиЗавтра);
	ДниНеделиСегодняЗавтра.Добавить(ДеньНеделиПустаяСсылка);
	
	ЗапросКонтроляПродаж.УстановитьПараметр("ТаблицаТовары", ТаблицаТоваров);
	ЗапросКонтроляПродаж.УстановитьПараметр("НачалоСледующегоДня", НачалоСледующегоДня);
	ЗапросКонтроляПродаж.УстановитьПараметр("НачалоТекущегоДня", НачалоТекущегоДня);
	ЗапросКонтроляПродаж.УстановитьПараметр("ДниСегодняЗавтра", ДниНеделиСегодняЗавтра);
	ЗапросКонтроляПродаж.УстановитьПараметр("РежимКассыСамообслуживания",
		ДополнительныеДанные.РежимКассыСамообслуживания);
	ЗапросКонтроляПродаж.УстановитьПараметр("ТорговыйОбъект", ДополнительныеДанные.ТорговыйОбъект);
	
КонецПроцедуры

Функция НеобходимоКонтролироватьОстатки()
	
	ПользовательБД = Пользователи.ТекущийПользователь();
	Возврат УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
		ПланыВидовХарактеристик.ПраваПользователей.КонтролироватьОстатокПриПроведении,
			Ложь, ПользовательБД);
	
КонецФункции

Функция ПолучитьМассивКолонокКоллекции(КоллекцияКолонок)
	
	РезультатФункции = Новый Массив;
	Для Каждого КолонкаКоллекции Из КоллекцияКолонок Цикл
		ОписаниеКолонки = Новый Структура("Имя,Тип", КолонкаКоллекции.Имя, КолонкаКоллекции.Тип);
		РезультатФункции.Добавить(ОписаниеКолонки);
	КонецЦикла;
	Возврат РезультатФункции;
	
КонецФункции

Процедура ДобавитьОписаниеКолонкиВКоллекцию(КоллекцияКолонок, ИмяКолонки, ТипКолонки)
	
	ОписаниеКолонки = Новый Структура("Имя,Тип", ИмяКолонки, ТипКолонки);
	КоллекцияКолонок.Добавить(ОписаниеКолонки);
	
КонецПроцедуры

#Область ЗаполнениеХарактеристик

// Заполняет данные о характеристиках товаров
//
// Параметры:
//  СтруктураПараметров			 - Структура		 - настройки заполнения данных.
//  		* Номенклатура - ОпределяемыйТип.НоменклатураРМК - номенклатура текущей строки.
//  		* Характеристика - ОпределяемыйТип.ХарактеристикаРМК - характеристика текущей строки.
//  		* ВидЦены - ОпределяемыйТип.ВидЦеныРМК - вид цены рабочего места кассира.
//  		* ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектРМК - торговый объект рабочего места кассира.
//  ДанныеПлиткиПодбораЗначений	 - ТаблицаЗначений	 - таблица для заполнения плтики значениями подбора.
//
Процедура ЗаполнитьДанныеПлиткиВыбораЗначений(СтруктураПараметров, ДанныеПлиткиПодбораЗначений) Экспорт
	
	ДанныеПлиткиПодбораЗначений.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ВидыНоменклатуры.Ссылка КАК ВидНоменклатуры
	|ПОМЕСТИТЬ втДанныеНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|ГДЕ
	|	Номенклатура.Ссылка = &ТекущаяНоменклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокХарактеристик.Характеристика КАК ЗначениеВыбора,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА СписокХарактеристик.Характеристика = &Характеристика
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТекущаяХарактеристика,
	|	ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыНаСкладахОстатки.РезервОстаток, 0) КАК Доступно
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	|		втДанныеНоменклатуры.Номенклатура КАК Номенклатура
	|	ИЗ
	|		втДанныеНоменклатуры КАК втДанныеНоменклатуры
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|			ПО втДанныеНоменклатуры.Номенклатура = ХарактеристикиНоменклатуры.Владелец
	|	ГДЕ
	|		НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ХарактеристикиНоменклатуры.Ссылка,
	|		втДанныеНоменклатуры.Номенклатура
	|	ИЗ
	|		втДанныеНоменклатуры КАК втДанныеНоменклатуры
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|			ПО втДанныеНоменклатуры.ВидНоменклатуры = ХарактеристикиНоменклатуры.Владелец
	|	ГДЕ
	|		НЕ ХарактеристикиНоменклатуры.ПометкаУдаления) КАК СписокХарактеристик
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаСеанса, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО СписокХарактеристик.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|			И СписокХарактеристик.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаСеанса, Склад = &ТорговыйОбъект) КАК ТоварыНаСкладахОстатки
	|		ПО СписокХарактеристик.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	|			И СписокХарактеристик.Характеристика = ТоварыНаСкладахОстатки.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТекущаяХарактеристика УБЫВ";
	Запрос.УстановитьПараметр("ТекущаяНоменклатура", СтруктураПараметров.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", СтруктураПараметров.Характеристика);
	Запрос.УстановитьПараметр("ДатаСеанса", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ВидЦены", СтруктураПараметров.ВидЦены);
	СкладПродажи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.ТорговыйОбъект, "СкладПродажи");
	Запрос.УстановитьПараметр("ТорговыйОбъект", СкладПродажи);
	РезультатЗапроса = Запрос.Выполнить();
	КоличествоДобавленныхКнопок = 0;
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		КоличествоЭлементов = Выборка.Количество();
		Если КоличествоЭлементов > 12 Тогда
			КоличествоНаСтранице = 11;
		Иначе
			КоличествоНаСтранице = 12;
		КонецЕсли;
		
		ОстатокНаСтранице = КоличествоНаСтранице;
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ДанныеПлиткиПодбораЗначений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Шрифт = ШрифтыСтиля.ШрифтОбычныйПолужирный12РМК;
			НоваяСтрока.ЦветШрифта = ЦветаСтиля.ЦветНеАктивизированногоПунктаРМК;
			НоваяСтрока.ЦветФона = ?(Выборка.ТекущаяХарактеристика, ЦветаСтиля.ЦветЗеленойКнопкиРМК, ЦветаСтиля.ЦветХарактеристикиРМК);
			НоваяСтрока.ИмяЭлемента = Выборка.ЗначениеВыбора;
			НоваяСтрока.ИмяДействия = "ЗаполнитьДанныеВыборХарактеристики";
			
			//Уменьшение оставшихся элементов
			ОстатокНаСтранице = ОстатокНаСтранице - 1;
			Если ОстатокНаСтранице = 0
				И КоличествоЭлементов > 12 Тогда
				//Добавление команды управления списком
				НоваяСтрока = ДанныеПлиткиПодбораЗначений.Добавить();
				НоваяСтрока.Шрифт = ШрифтыСтиля.ШрифтОбычныйПолужирный12РМК;
				НоваяСтрока.ЦветШрифта = ЦветаСтиля.ЦветНеАктивизированногоПунктаРМК;
				НоваяСтрока.ЦветФона = ЦветаСтиля.ЦветАктивнойКнопкиРМК;
				НоваяСтрока.ИмяЭлемента = "Все";
				НоваяСтрока.ИмяДействия = "ПоказатьВсеХарактеристики";
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область НастройкиРасчетаСкидокИДисконтныхКарт
// Заполняет признак использования автоматических скидок в форме "Настройки рабочего места кассира"
//
// Параметры:
//  ИспользоватьСерверЛояльностиПолучательДанных - Булево	 - признак использования сервера лояльности
//  ИспользоватьАвтоматическиеСкидки			 - Булево	 - признак использования автоматических скидок
//
Процедура ЗаполнитьИспользованиеАвтоматическихСкидок(ИспользоватьСерверЛояльностиПолучательДанных, ИспользоватьАвтоматическиеСкидки) Экспорт
	
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах") Или ИспользоватьСерверЛояльностиПолучательДанных;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти