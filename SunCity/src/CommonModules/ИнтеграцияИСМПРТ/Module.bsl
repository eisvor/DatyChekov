
#Область ПрограммныйИнтерфейс

#Область НастройкиПрофилейДоступа

// Дополняет профиль ролями ИСМП для выполнения базовых функций работы с РТ
//
// Параметры:
//  ОписаниеПрофиля - Структура - описание поставляемого профиля 
//                    (см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа)
//
Процедура ДополнитьПрофильОбязательнымиРолямиИСМП(ОписаниеПрофиля)Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваИСМП");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеШтрихкодовУпаковокТоваров");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиПроверкаИПодборПродукцииИСМП");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиПроверкаИПодборТабачнойПродукцииМОТП");
	ОписаниеПрофиля.Роли.Добавить("РазрешитьКодыМаркировкиСОшибкамиПроверкиНаККТ");
	
КонецПроцедуры

// Дополняет профиль ролями ИСМП для чтения и просмотра документов и журналов ИСМП
//
// Параметры:
//  ОписаниеПрофиля - Структура - описание поставляемого профиля 
//                    (см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа)
//
Процедура ДополнитьПрофильПравамиЧтенияДокументовИСМП(ОписаниеПрофиля)Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВыводИзОборотаИСМП");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеЗаказНаЭмиссиюКодовМаркировкиСУЗ");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеМаркировкаТоваровИСМП");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПеремаркировкаТоваровИСМП");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСписаниеКодовМаркировкиИСМП");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОтгрузкаТоваровИСМП");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПриемкаТоваровИСМП");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВозвратВОборотИСМП");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОтчетИСМП");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеУточнениеСведенийОКодахМаркировкиИСМП");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВскрытыхПотребительскихУпаковокИС");
	
КонецПроцедуры

// Дополняет профиль ролями ИСМП для чтения и просмотра справочников и регистров ИСМП
//
// Параметры:
//  ОписаниеПрофиля - Структура - описание поставляемого профиля 
//                    (см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа)
//
Процедура ДополнитьПрофильПравамиЧтенияСправочнойИнформацииИСМП(ОписаниеПрофиля)Экспорт
	
	Возврат;
	
КонецПроцедуры

// Дополняет профиль ролями ИСМП для создания и изменения настроек ИСМП
//
// Параметры:
//  ОписаниеПрофиля - Структура - описание поставляемого профиля 
//                    (см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа)
//
Процедура ДополнитьПрофильПравамиНастройкиИСМП(ОписаниеПрофиля)Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиПанельАдминистрированияИСМП");
	
КонецПроцедуры

// Дополняет профиль ролями ИСМП для создания документов и выполнения обменов ИСМП
//
// Параметры:
//  ОписаниеПрофиля - Структура - описание поставляемого профиля 
//                    (см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа)
//
Процедура ДополнитьПрофильПравамиОбменаИСМП(ОписаниеПрофиля)Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВыводИзОборотаИСМП");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЗаказНаЭмиссиюКодовМаркировкиСУЗ");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеМаркировкаТоваровИСМП");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПеремаркировкаТоваровИСМП");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеСписаниеКодовМаркировкиИСМП");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеОтгрузкаТоваровИСМП");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеОтчетИСМП");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеУточнениеСведенийОКодахМаркировкиИСМП");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВскрытыхПотребительскихУпаковокИС");
	
КонецПроцедуры

// Дополняет профиль ролями ИСМП для добавления и изменения справочников и регистров ИСМП
//
// Параметры:
//  ОписаниеПрофиля - Структура - описание поставляемого профиля 
//                    (см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа)
//
Процедура ДополнитьПрофильПравамиСправочнойИнформацииИСМП(ОписаниеПрофиля)Экспорт
	
	Возврат;
	
КонецПроцедуры

// Дополняет профиль ролями ИСМП для работы с отчетами ИСМП
//
// Параметры:
//  ОписаниеПрофиля - Структура - описание поставляемого профиля 
//                    (см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа)
//
Процедура ДополнитьПрофильПравамиПросмотраОтчетовИСМП(ОписаниеПрофиля)Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиПанельОбменаИСМП");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОтчетаАнализРасхожденийПриМаркировкеТоваровИСМП");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОтчетаАнализРасхожденийПриВыводеИзОборотаИСМП");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОтчетаКодыМаркировкиДляДекларацииИСМП");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОтчетаСписокКИНаБалансеИСМП");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОтчетаСведенияОбОтклоненияхИСМП");
	
КонецПроцедуры

// Дополняет профиль ролью ПовторнаяПечатьКодовМаркировкиИСМП
//
// Параметры:
//  ОписаниеПрофиля - Структура - описание поставляемого профиля 
//                    (см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа)
//
Процедура ДополнитьПрофильРольюПовторнаяПечатьКодовМаркировкиИСМП(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ПовторнаяПечатьКодовМаркировкиИСМП");
	
КонецПроцедуры

// Дополняет профиль ролями ИСМП РТ
//
// Параметры:
//  ОписаниеПрофиля - Структура - описание поставляемого профиля 
//                    (см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа)
//
Процедура ДополнитьПрофильРолямиИСМПРТ(ОписаниеПрофиля)Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

// Получает виды маркируемой продукции по товарам, содержащимся в документе
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, виды маркируемой продукции которого необходимо получить.
//
// Возвращаемое значение:
//   Массив - Массив видов продукции.
Функция ВидыПродукцииДокумента(ДокументСсылка) Экспорт
	
	Если ИнтеграцияИСРТКлиентСервер.ЭтоДокументПоНаименованию(ДокументСсылка, "ПоступлениеТоваров") Тогда
		ТекстЗапроса = ТекстЗапросаВидыПродукцииДокумента(ДокументСсылка);
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
	ФильтрВидПродукции = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
	ОсобенностьУчета   = Новый Массив;
	Для Каждого ВидПродукции Из ФильтрВидПродукции Цикл
		ОсобенностьУчета.Добавить(ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("ОсобенностьУчета", ОсобенностьУчета);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидПродукции");
	
КонецФункции

// Отражает результаты проверки и подбора в документе, из которого была вызвана соотвествующая форма.
// 
// Параметры:
// 	ПараметрыОкончанияСканирования - Структура - (См. ПроверкаИПодборМОТП.ЗафиксироватьРезультатПроверкиИПодбора)
Процедура ОтразитьРезультатыСканированияВДокументе(ПараметрыОкончанияСканирования) Экспорт
	
	ТипПроверяемогоДокумента = ТипЗнч(ПараметрыОкончанияСканирования.ПроверяемыйДокумент);
	
	Если ТипПроверяемогоДокумента = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		
		ОтразитьРезультатыПроверкиИПодбораВоВходящемДокументе(ПараметрыОкончанияСканирования);
		
	ИначеЕсли ТипПроверяемогоДокумента = Тип("ДокументСсылка.ПеремещениеТоваров")
		ИЛИ ТипПроверяемогоДокумента = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		ИЛИ ТипПроверяемогоДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")Тогда
		
		Объект = ПараметрыОкончанияСканирования.ПроверяемыйДокумент.ПолучитьОбъект();
		
		ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Объект);
		
		ПараметрыШтрихкодаДляОбработки = ШтрихкодированиеИСРТ.ПараметрыШтрихкодаДляОбработки(Объект, ПараметрыСканирования);
		ПараметрыШтрихкодаДляОбработки.Вставить("ВидПродукцииИС", ПараметрыОкончанияСканирования.ВидПродукцииИС);
		Если ПараметрыШтрихкодаДляОбработки.Свойство("НеПерезаписыватьДокумент") Тогда
			ПараметрыШтрихкодаДляОбработки.Вставить("НеПерезаписыватьДокумент");
		КонецЕсли;
		
		Если ТипПроверяемогоДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")Тогда
			ШтрихкодыУпаковок = Новый Массив;	
			Для Каждого ШтрихкодУпаковки Из ПараметрыОкончанияСканирования.ТаблицаШтрихкодовВерхнегоУровня Цикл
				
				НовыйЭлемент = ШтрихкодированиеИС.НовыйЭлементКоллекцииУпаковокДляРаспределенияПоТоварам();
				ЗаполнитьЗначенияСвойств(НовыйЭлемент, ШтрихкодУпаковки);
				
				ШтрихкодыУпаковок.Добавить(НовыйЭлемент);
				
			КонецЦикла;
		Иначе
			ШтрихкодыУпаковок = ПараметрыОкончанияСканирования.ТаблицаШтрихкодовВерхнегоУровня.ВыгрузитьКолонку("ШтрихкодУпаковки");
		КонецЕсли;
			
		РезультатРазбора = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(ШтрихкодыУпаковок, ПараметрыСканирования);
		
		ИнтеграцияИСРТ.ЗафиксироватьРезультатПроверкиИПодбора(РезультатРазбора.ДеревоУпаковок, ПараметрыШтрихкодаДляОбработки);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при заверешении проверки и подбора для отражения данных в документе.
// Предназначена для сохранения связей номенклатуры с GTIN, с учетом коэффициентов групповых упаковок.
// 
// Параметры:
//  ТаблицаОписанияGTIN - см. ПроверкаИПодборПродукцииИСМП.ПустаяТаблицаОписанияGTIN.
Процедура ЗафиксироватьОписаниеGTIN(ТаблицаОписанияGTIN) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаДляЗапроса = ТаблицаОписанияGTIN.Скопировать();
	
	ТаблицаДляЗапроса.Колонки.Добавить("EAN", Метаданные.РегистрыСведений.Штрихкоды.Измерения.Штрихкод.Тип);
	
	Для Каждого СтрокаТаблицы Из ТаблицаДляЗапроса Цикл
		
		СтрокаТаблицы.EAN = РазборКодаМаркировкиИССлужебныйКлиентСервер.ШтрихкодEANИзGTIN(СтрокаТаблицы.GTIN);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсходнаяТаблица.EAN,
	|	ИсходнаяТаблица.GTIN,
	|	ИсходнаяТаблица.Номенклатура,
	|	ИсходнаяТаблица.Характеристика,
	|	ИсходнаяТаблица.Упаковка
	|ПОМЕСТИТЬ ИсходнаяТаблица
	|ИЗ
	|	&ИсходнаяТаблица КАК ИсходнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходнаяТаблица.EAN            КАК Штрихкод,
	|	ИсходнаяТаблица.Номенклатура   КАК Владелец,
	|	ИсходнаяТаблица.Характеристика КАК Характеристика,
	|	ИсходнаяТаблица.Упаковка       КАК Упаковка
	|ИЗ
	|	ИсходнаяТаблица КАК ИсходнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК ШтрихкодыНоменклатуры
	|		ПО ИсходнаяТаблица.EAN = ШтрихкодыНоменклатуры.Штрихкод
	|		ИЛИ ИсходнаяТаблица.GTIN = ШтрихкодыНоменклатуры.Штрихкод
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ИсходнаяТаблица", ТаблицаДляЗапроса);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
		
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаДетальныеЗаписи);
		МенеджерЗаписи.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
		
		МенеджерЗаписи.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает сформированный ранее Акт о расхождениях для переданного документа.
// 
// Параметры:
// 	ДокументОснование - ДокументСсылка - ссылка на документ, для которого необходимо получить Акт о расхождениях:
//	
Функция СформированныйАктОРасхождениях(ДокументОснование) Экспорт
	
	АктОРасхождениях      = Неопределено;
	ТипДокументаОснования = ТипЗнч(ДокументОснование);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Если ТипДокументаОснования = Тип("ДокументСсылка.ПоступлениеТоваров")
	 Или ТипДокументаОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	АктОРасхождениях.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.АктОРасхожденияхПриПриемкеТоваров КАК АктОРасхождениях
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктОРасхожденияхПриПриемкеТоваров.Товары КАК АктОРасхожденияхТовары
		|	ПО АктОРасхождениях.Ссылка = АктОРасхожденияхТовары.Ссылка
		|ГДЕ
		|	НЕ АктОРасхождениях.ПометкаУдаления
		|	И АктОРасхождениях.ДокументОснование = &ДокументОснование
		|СГРУППИРОВАТЬ ПО
		|	АктОРасхождениях.Ссылка
		|УПОРЯДОЧИТЬ ПО
		|	АктОРасхождениях.Дата УБЫВ
		|";
	Иначе
		Возврат АктОРасхождениях;
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		АктОРасхождениях = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат АктОРасхождениях;
	
КонецФункции

Процедура ОпределитьИспользованиеАктовОРасхождениииПослеПриемки(Документ, Используются) Экспорт
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		Используются = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Зполняет переданную таблицу данные из ТЧ документа.
// 
// Параметры:
//   Документ - ДокументСсылка - Документ из ТЧ которого будет происходить заполнение.
//   ТаблицаПродукции - ТаблицаЗначений - Таблица для заполнения данными из документа.
//   ВидыМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Массив - вид(ы) маркируемой продукции, которым(и) необходимо заполнить таблицу.
//
Процедура СформироватьТаблицуМаркируемойПродукцииДокумента(Документ, ТаблицаПродукции, ВидыМаркируемойПродукции) Экспорт
	
	ТипДокумента = ТипЗнч(Документ);
	Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваров")
		Или ТипДокумента = Тип("ДокументСсылка.РеализацияТоваров")
		Или ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		Или ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
		Или ТипДокумента = Тип("ДокументСсылка.ЧекККМ")
		Или ТипДокумента = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
		Или ТипДокумента = Тип("ДокументСсылка.ПересчетТоваров") Тогда
		
		ТекстЗапроса = ТекстЗапросаМаркируемойПродукции(Документ);
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Формирование таблицы маркируемой продукции указанного документа не определено';");
		
	КонецЕсли;
	
	УстановитьУсловиеПоВидуМаркируемойПродукции(ТекстЗапроса, ВидыМаркируемойПродукции);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Документ", Документ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает в тексте запроса условие отбора по маркируемой продукции требуемого вида.
// Текст запроса должен содержать строку вида "&УсловиеМаркируемаяПродукция" в условии соединения или условии отбора
// и таблицу с синонимом "СправочникНоменклатура", которой как правило является таблица справочника "Номенклатура".
// Параметры:
//   ТекстЗапроса - Строка - строка с текстом запроса, удовлетворяющая приведенным выше условиям.
//   ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Массив Из ПеречислениеСсылка.ВидыПродукцииИС - 
//     вид или виды маркируемой продукции, условие отбора по которым необходимо установить.
Процедура УстановитьУсловиеПоВидуМаркируемойПродукции(ТекстЗапроса,
	ВидМаркируемойПродукции,
	ПутьКПолюНоменклатура = "СправочникНоменклатура",
	ЗаменяемыйПараметр = "&УсловиеМаркируемаяПродукция") Экспорт
	
	Если ТипЗнч(ВидМаркируемойПродукции) = Тип("Массив")
		ИЛИ ТипЗнч(ВидМаркируемойПродукции) = Тип("ФиксированныйМассив") Тогда
		ВидыМаркируемойПродукции = ВидМаркируемойПродукции;
	Иначе
		ВидыМаркируемойПродукции = Новый Массив();
		Если ЗначениеЗаполнено(ВидМаркируемойПродукции) Тогда
			ВидыМаркируемойПродукции.Добавить(ВидМаркируемойПродукции);
		КонецЕсли;
	КонецЕсли;

	ЗначенияОсобенностейУчета = Новый Массив();
	
	Для Каждого ВидПродукции Из ВидыМаркируемойПродукции Цикл
		ОсобенностьУчета = ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции);
		Если ОсобенностьУчета <> Неопределено Тогда
			ЗначенияОсобенностейУчета.Добавить(СтрШаблон("ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.%1)", XMLСтрока(ОсобенностьУчета)));
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначенияОсобенностейУчета.Количество() > 0 Тогда
		УсловиеМаркируемаяПродукция = СтрШаблон("%1.ОсобенностьУчета В (%2)", ПутьКПолюНоменклатура, СтрСоединить(ЗначенияОсобенностейУчета, ","));
	Иначе
		УсловиеМаркируемаяПродукция = "ЛОЖЬ";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменяемыйПараметр, УсловиеМаркируемаяПродукция);
	
КонецПроцедуры

// Возвращает данные о настройках обмена с СУЗ для рабочего места.
// 
// Параметры:
//  РабочееМесто - СправочникСсылка.РабочиеМеста - рабочее место.
//  Магазин - СправочникСсылка.Магазины - магазин.
// Возвращаемое значение:
//  Таблица значений - Таблица значений с колонками:
//   * Организация - ОпределяемыйТип.Организация
//   * ПроизводственныйОбъект - ПроизводственныйОбъект
Функция НастройкиОбменаСУЗ(РабочееМесто, Магазин = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	НастройкиОбменаСУЗ.Организация КАК Организация,
		|	НастройкиОбменаСУЗ.ПроизводственныйОбъект КАК ПроизводственныйОбъект
		|ИЗ
		|	РегистрСведений.НастройкиОбменаСУЗ КАК НастройкиОбменаСУЗ
		|ГДЕ
		|	(НастройкиОбменаСУЗ.РабочееМесто = &РабочееМесто
		|			ИЛИ НастройкиОбменаСУЗ.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка))
		|	И &УсловиеМагазин";
	
	Если ЗначениеЗаполнено(Магазин) Тогда
		Запрос.УстановитьПараметр("Магазин", Магазин);
		УсловиеМагазин = "(НастройкиОбменаСУЗ.ПроизводственныйОбъект = &Магазин
			|		ИЛИ НастройкиОбменаСУЗ.ПроизводственныйОбъект = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))";
	Иначе
		УсловиеМагазин = "ИСТИНА";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&УсловиеМагазин", УсловиеМагазин);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#Область Серии

Функция ПараметрыУказанияСерийПроверкаИПодборПродукцииИСМП(Объект) Экспорт
	
	ПараметрыУказанияСерий = МаркировкаТоваровГИСМРТ.ПараметрыУказанияСерий();
	ПараметрыУказанияСерий.ПолноеИмяОбъекта                  = Объект.ИмяФормы;
	ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта = "ЭтотОбъект";
	
	ПараметрыУказанияСерий.ИмяТЧТовары       = "ПодобраннаяМаркируемаяПродукция";
	ПараметрыУказанияСерий.ИмяТЧСерии        = "ПодобраннаяМаркируемаяПродукция";
	ПараметрыУказанияСерий.ИмяПоляСклад      = "Склад";
	ПараметрыУказанияСерий.ИмяПоляКоличество = "Количество";
	
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("КоличествоПодобрано");
	
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = Объект.ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = Объект.ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.ИмяПоляСклад                   = Неопределено;
		
	ПараметрыУказанияСерий.Дата = ТекущаяДатаСеанса();
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

Процедура СгенерироватьСерии(ДанныеДляГенерации, ВидМаркируемойПродукции) Экспорт
	
	ТаблицаДанныхДляГенерацииСерий = ТаблицаДанныхДляГенерацииСерий(ВидМаркируемойПродукции);
	
	Для Каждого ЭлементМассива Из ДанныеДляГенерации Цикл
		НоваяСтрока = ТаблицаДанныхДляГенерацииСерий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементМассива);
		
		Если Не ЗначениеЗаполнено(НоваяСтрока.Серия) Тогда
			НоваяСтрока.Серия = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"); 
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ";
	
	Для Каждого Колонка Из ТаблицаДанныхДляГенерацииСерий.Колонки Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|Таблица." + Колонка.Имя + " КАК " + Колонка.Имя + ",";
	КонецЦикла;
	
	ТекстЗапроса = Сред(ТекстЗапроса, 1, СтрДлина(ТекстЗапроса) - 1);
	
	ТекстЗапроса = ТекстЗапроса + "
	|ПОМЕСТИТЬ
	|	ВтТовары
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВтТовары.Номенклатура                                    КАК Номенклатура,
	|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьСерии, ЛОЖЬ)       КАК ИспользоватьСерии,
	|	ЕСТЬNULL(ВладельцыСерии.Ссылка, ВидыНоменклатуры.Ссылка) КАК ВидНоменклатуры,
	|	ЕСТЬNULL(ВладельцыСерии.АвтоматическиГенерироватьСерии,
	|		ВидыНоменклатуры.АвтоматическиГенерироватьСерии)      КАК АвтоматическиГенерироватьСерии
	|	//ДополнительныеПоляВидаНоменклатуры
	|ПОМЕСТИТЬ
	|	ВтВидыНоменклатуры
	|ИЗ
	|	ВтТовары КАК ВтТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВтТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО СправочникНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВладельцыСерии
	|		ПО СправочникНоменклатура.ВладелецСерий = ВладельцыСерии.Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	ВтТовары.Номенклатура
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТовары.Номенклатура                             КАК Номенклатура,
	|	ВтВидыНоменклатуры.ВидНоменклатуры                КАК ВидНоменклатуры,
	|	ВтВидыНоменклатуры.ИспользоватьСерии              КАК ИспользоватьСерии,
	|	ВтВидыНоменклатуры.АвтоматическиГенерироватьСерии КАК АвтоматическиГенерироватьСерии,
	|	СправочникНоменклатура.Наименование               КАК НоменклатураНаименование,
	|	//ДополнительныеПоляВыборки
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА ВтВидыНоменклатуры.АвтоматическиГенерироватьСерии
	|			ТОГДА ЕСТЬNULL(СерииНоменклатуры.Ссылка,
	|				ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	|		ИНАЧЕ ВтТовары.Серия
	|	КОНЕЦ)                                            КАК Серия
	|ИЗ
	|	ВтТовары КАК ВтТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтВидыНоменклатуры
	|		ПО ВтТовары.Номенклатура = ВтВидыНоменклатуры.Номенклатура
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВтТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО СерииНоменклатуры.ВидНоменклатуры = ВтВидыНоменклатуры.ВидНоменклатуры
	|		И ВтВидыНоменклатуры.АвтоматическиГенерироватьСерии
	|		//ДополнительныеПоляСвязи
	|СГРУППИРОВАТЬ ПО
	|	ВтТовары.Номенклатура,
	|	ВтВидыНоменклатуры.ВидНоменклатуры,
	|	ВтВидыНоменклатуры.ИспользоватьСерии,
	|	ВтВидыНоменклатуры.АвтоматическиГенерироватьСерии,
	|	СправочникНоменклатура.Наименование
	|	//ДополнительныеПоляГруппировки
	|";
	
	ДополнитьТекстЗапросаГенерацииСерийПоВидуПродукции(ТекстЗапроса, ВидМаркируемойПродукции);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Таблица", ТаблицаДанныхДляГенерацииСерий);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеДляГенерации = Новый Массив();
	
	Пока Выборка.Следующий() Цикл
		ДанныеСерии = ИнтеграцияИСМПРТКлиентСервер.СтруктураДанныхДляГенерацииСерии(ВидМаркируемойПродукции); 
		ЗаполнитьЗначенияСвойств(ДанныеСерии, Выборка);
		
		Если Не Выборка.ИспользоватьСерии Тогда
			
			ДанныеСерии.ЕстьОшибка = Истина;
			ДанныеСерии.ТекстОшибки = СтрШаблон(НСтр("ru = 'Для номенклатуры %1 серии не используются.'"), Выборка.НоменклатураНаименование);
			
		ИначеЕсли НЕ Выборка.АвтоматическиГенерироватьСерии И Не ЗначениеЗаполнено(Выборка.Серия) Тогда
			
			ДанныеСерии.ЕстьОшибка = Истина;
			ДанныеСерии.ТекстОшибки = СтрШаблон(НСтр("ru = 'Для номенклатуры %1 не предусмотрена автоматическая генерация серий.'"), Выборка.НоменклатураНаименование);
			
		ИначеЕсли Выборка.АвтоматическиГенерироватьСерии И Не ЗначениеЗаполнено(Выборка.Серия) Тогда
				
			Попытка
				
				НоваяСерия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
				НоваяСерия.Заполнить(Выборка);
				НоваяСерия.Записать();
				
				ДанныеСерии.Серия = НоваяСерия.Ссылка;
				
			Исключение
				
				ДанныеСерии.ЕстьОшибка = Истина;
				ДанныеСерии.ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось сгенерировать серию для номенклатуры %1 по причине: %2'"),
					Выборка.НоменклатураНаименование,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));

			КонецПопытки;
		 
		КонецЕсли;
		
		ДанныеДляГенерации.Добавить(ДанныеСерии); 
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Номенклатура

// См. ИнтеграцияИСМППереопределяемый.ТоварныеЗнакиПоНоменклатуре
//
Процедура ТоварныеЗнакиПоНоменклатуре(Номенклатура, ТоварныеЗнакиПоНоменклатуре) Экспорт
	
	Если Номенклатура.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	Номенклатура.Производитель КАК Производитель
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В (&Номенклатура)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТоварныеЗнакиПоНоменклатуре.Вставить(Выборка.Номенклатура, Выборка.Производитель);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КаталогGS46

// Заполняет свойства номенклатуры, используемые для передачи в каталог GS46. Могут быть заполнены колонки:
//   * Торговая марка,
//   * Страна производства,
//   * Вид обуви,
//   * Материал верха,
//   * Материал подкладки,
//   * Материал низа,
//   * Цвет,
//   * Размер.
// 
// Параметры:
//   Товары - ДанныеФормыКоллекция - таблица для заполнения.
//
Процедура ЗаполнитьСвойстваНоменклатурыДляКаталогаGS46(Товары) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.КодТНВЭД       КАК КодТНВЭД,
	|	Товары.GTIN           КАК GTIN
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.GTIN                                           КАК GTIN,
	|	Товары.Номенклатура                                   КАК Номенклатура,
	|	Товары.Характеристика                                 КАК Характеристика,
	|	Товары.КодТНВЭД                                       КАК КодТНВЭД,
	|	ПРЕДСТАВЛЕНИЕ(СправочникНоменклатура.ВидНоменклатуры) КАК ВидОбуви,
	|	ПРЕДСТАВЛЕНИЕ(ХарактеристикиНоменклатуры.Ссылка)      КАК Размер,
	|	ПРЕДСТАВЛЕНИЕ(СправочникНоменклатура.Ссылка)          КАК Наименование,
	|	СправочникНоменклатура.Марка                          КАК ТорговаяМарка
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО Товары.Характеристика = ХарактеристикиНоменклатуры.Ссылка";
	Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Для Каждого СтрокаТовар Из Товары Цикл
		СтрокаТовар.Наименование = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
		СтрокаТовар.Наименование,
		СтрокаТовар.Размер);
	КонецЦикла;

	
КонецПроцедуры

Процедура ЗагрузитьПолученныеGTINКаталогаGS46(Товары) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.GTIN КАК GTIN
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.GTIN                                           КАК Штрихкод,
	|	Товары.Номенклатура                                   КАК Владелец,
	|	Товары.Характеристика                                 КАК Характеристика
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО Товары.GTIN = Штрихкоды.Штрихкод
	|ГДЕ
	|	Штрихкоды.Штрихкод ЕСТЬ NULL";
	
	Набор = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
	СтрокаНабора = Набор.Добавить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
		СтрокаНабора.ТипШтрихкода = ПодключаемоеОборудованиеРТ.ТипШтрихкода(Выборка.Штрихкод);
		Набор.Отбор.Штрихкод.Установить(Выборка.Штрихкод, Истина);
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПанельОбменаИСМП

//Предназачена для модификации текста запроса по расчету неоформленных документов ЭДО.
//   Сценарий использования: заменить текст запроса на требуемый (требующие оформления
//   с помощью ЭДО документы продажи с маркируемой продукцией).
//
//Параметры:
//  ТекстЗапроса - Строка - Текст запроса
//
Процедура ПриПолучениТекстаЗапросаНеоформленныхДокументовЭДО(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СостоянияПоОбъектамУчетаЭДО.СсылкаНаОбъект КАК Ссылка
	|ИЗ
	|	РегистрСведений.СостоянияПоОбъектамУчетаЭДО КАК СостоянияПоОбъектамУчетаЭДО
	|		ПОЛНОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.ШтрихкодыУпаковок КАК ШтрихкодыВозврата
	|		ПО СостоянияПоОбъектамУчетаЭДО.СсылкаНаОбъект = ШтрихкодыВозврата.Ссылка
	|ГДЕ
	|	СостоянияПоОбъектамУчетаЭДО.СостояниеЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.НеСформирован)
	|	И НЕ ШтрихкодыВозврата.Ссылка ЕСТЬ NULL
	|	И (&БезОтбораПоОрганизации
	|			ИЛИ ШтрихкодыВозврата.Ссылка.Организация В (&Организации))";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийДокументов

//Вызывается при вводе документа на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
//Параметры:
//   ДокументОбъект - ДокументОбъект - заполняемый документ,
//   ДанныеЗаполнения - Произвольный - значение, которое используется как основание для заполнения,
//   ТекстЗаполнения - Строка, Неопределено - текст, используемый для заполнения документа,
//   СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполненияДокумента(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ДанныеЗаполнения.Свойство("Организация", ДокументОбъект.Организация);
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказНаЭмиссиюКодовМаркировкиСУЗ") Тогда
		ОбработкаЗаполненияДокументаЗаказНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.МаркировкаТоваровИСМП") Тогда
		ОбработкаЗаполненияДокументаМаркировкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеКодовМаркировкиИСМП") Тогда
		ОбработкаЗаполненияДокументаСписаниеКодовМаркировкиИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВыводИзОборотаИСМП") Тогда
		ОбработкаЗаполненияДокументаВыводИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПеремаркировкаТоваровИСМП") Тогда
		ОбработкаЗаполненияДокументаПеремаркировкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтгрузкаТоваровИСМП") Тогда
		ОбработкаЗаполненияДокументаОтгрузкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВозвратВОборотИСМП") Тогда
		ОбработкаЗаполненияДокументаВозвратВОборотИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработкаЗаполнения

Процедура ОбработкаЗаполненияДокументаВыводИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		ЗаполнитьВыводИзОборотаИСМПНаОснованииОтчетаОРозничныхПродажах(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.СписаниеТоваров") Тогда
		ЗаполнитьВыводИзОборотаИСМПНаОснованииСписанияТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ЗаполнитьВыводИзОборотаИСМПНаОснованииВозвратаТоваровПоставщику(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияТоваров") Тогда
		ЗаполнитьВыводИзОборотаИСМПНаОснованииРеализацииТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.СборкаТоваров") Тогда
		ЗаполнитьВыводИзОборотаИСМПНаОснованииСборкиТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаЗаказНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.ЗаказПоставщику")Тогда
		ЗаполнитьЗаказНаЭмиссиюКодовМаркировкиСУЗНаОснованииЗаказаПоставщику(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаМаркировкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		ЗаполнитьМаркировкаТоваровИСМПНаОснованииПоступленияТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПересчетТоваров") Тогда
		ЗаполнитьМаркировкаТоваровИСМПНаОснованииПересчетТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЧекККМ") Тогда
		ЗаполнитьМаркировкаТоваровИСМПНаОснованииЧекККМ(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
		ЗаполнитьМаркировкаТоваровИСМПНаОснованииВходящейТранспортнойОперацииВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;

	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаПеремаркировкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		ЗаполнитьПеремаркировкуТоваровИСМПНаОснованииВозвратаТоваровОтПокупателя(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		ЗаполнитьПеремаркировкуТоваровИСМПНаОснованииОтчетаОРозничныхПродажах(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаСписаниеКодовМаркировкиИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаОтгрузкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ЗаполнитьОтгрузкуТоваровИСМПНаОснованииВозвратаТоваровПоставщику(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		ЗаполнитьОтгрузкуТоваровИСМПНаОснованииПеремещенияТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаВозвратВОборотИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		ЗаполнитьВозвратВОборотИСМПНаОснованииОтчетаОРозничныхПродажах(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

#Область МаркировкаОстатков

// См. ИнтеграцияИСМППереопределяемый.ЯвляетсяОснованиемДляМаркировкиОстатков
//
Процедура ЯвляетсяОснованиемДляМаркировкиОстатков(СсылкаНаДокумент, ЯвляетсяОснованием) Экспорт
	
	ТипДокумента = ТипЗнч(СсылкаНаДокумент);
	
	Если ТипДокумента = Тип("ДокументСсылка.ПересчетТоваров")
		Или ТипДокумента = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
		ЯвляетсяОснованием = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПриемкаТоваровИСМП
Процедура ЗаполнитьПоступлениеТоваровНаОснованииПриемкиТовароИСМП(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	Реквизиты = ДанныеПрикладныхДокументовИзПриемкиТоваровИСМП(ДанныеЗаполнения);
	Реквизиты.Следующий();
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Реквизиты, , "Товары");
		
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	
	Выборка = Реквизиты.Товары.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		
	КонецЦикла;
	
	ДокументОбъект.УчитыватьНДС = Истина;
	ДокументОбъект.ЦенаВключаетНДС = Истина;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДСУчитыватьНДС(ДокументОбъект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВТЧ(ДокументОбъект));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , ДокументОбъект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОтгрузкаТоваровИСМП

Процедура ЗаполнитьШапкуОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	Основание = ДанныеЗаполнения;
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		Основание = Основание.Основание;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействиеИСМП.ДокументСвязанСЭлектронным(Основание, Истина) Тогда
		ВызватьИсключение НСтр("ru = 'По текущему документу уже оформлен электронный документ с информацией о маркируемых товарах'");
	КонецЕсли;
	
	ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
КонецПроцедуры

Процедура ЗаполнитьТабличныеЧастиОтгрузкиТоваровИСМП(
	ДокументОбъект, ДанныеЗаполнения, ИмяДокумента, ТоварыСерии = Неопределено, Штрихкоды = Неопределено)
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьТабличнуюЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.ИмяФильтра = "ЗаполнениеСВидомПродукции" Тогда
			ФильтрВидПродукции = ДанныеЗаполнения.ЗначениеФильтра;
			ОсобенностьУчета   = ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ФильтрВидПродукции);
		КонецЕсли;
		Основание = ДанныеЗаполнения.Основание;
	Иначе
		Основание          = ДанныеЗаполнения;
		ФильтрВидПродукции = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП();
		ОсобенностьУчета   = Новый Массив;
		Для Каждого ВидПродукции Из ФильтрВидПродукции Цикл
			ОсобенностьУчета.Добавить(ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияОтгрузкиТоваровИСМПИзПрикладногоДокумента(ИмяДокумента, ТоварыСерии, Штрихкоды);
	
	Запрос.УстановитьПараметр("ЭтаСсылка",         ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("КонечныеСтатусы",   Документы.ОтгрузкаТоваровИСМП.КонечныеСтатусы());
	Запрос.УстановитьПараметр("ОсобенностьУчета",  ОсобенностьУчета);
	
	Пакет = Запрос.ВыполнитьПакет();
	ИндексТовары    = Пакет.Количество() - ?(Штрихкоды = Неопределено, 1, 2);
	ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, Пакет[ИндексТовары], Основание);
	
	Если ТипЗнч(ОсобенностьУчета) = Тип("Массив") Тогда
		ИнтеграцияИС.ЗаполнитьВидПродукцииПоТабличнойЧасти(ДокументОбъект);
	Иначе
		ДокументОбъект.ВидПродукции = ФильтрВидПродукции;
	КонецЕсли;
	
	Если Штрихкоды <> Неопределено Тогда
		
		ШтрихкодыОснования = Пакет[ИндексТовары+1].Выгрузить().ВыгрузитьКолонку("ШтрихкодУпаковки");
		ШтрихкодыПоВидуПродукции = ИнтеграцияИСРТ.ШтрихкодыСодержащиеВидыПродукции(ШтрихкодыОснования, ФильтрВидПродукции);
		Для Каждого ЭлементМассива Из ШтрихкодыПоВидуПродукции Цикл
			ДокументОбъект.ШтрихкодыУпаковок.Добавить().ШтрихкодУпаковки = ЭлементМассива;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеТабличнойЧастиДляФормированияОтгрузкиТоваровИСМП(ИмяТабличнойЧастиСерии = "")
	
	Результат = Новый Структура;
	Результат.Вставить("Товары"        , "Товары");
	Результат.Вставить("Серии"         , ИмяТабличнойЧастиСерии);
	Результат.Вставить("ПолеСтавкаНДС" , "ТаблицаТовары.СтавкаНДС");
	Результат.Вставить("ПолеКоличество", "ТаблицаТовары.Количество");
	Результат.Вставить("ПолеЦена"      , "ТаблицаТовары.Цена");
	Результат.Вставить("ПолеСумма"     , "ТаблицаТовары.Сумма");
	Результат.Вставить("ПолеСуммаСНДС" , "ТаблицаТовары.Сумма");
	Результат.Вставить("ПолеСуммаНДС"  , "ТаблицаТовары.СуммаНДС");
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаЗаполненияОтгрузкиТоваровИСМПИзПрикладногоДокумента(ИмяДокумента, ТабличныеЧастиТоварыСерии, ТабличнаяЧастьШтрихкоды)
	
	Если ТабличныеЧастиТоварыСерии = Неопределено Тогда
		ТабличныеЧастиТоварыСерии = Новый Массив;
		ТабличныеЧастиТоварыСерии.Добавить(ОписаниеТабличнойЧастиДляФормированияОтгрузкиТоваровИСМП());
	КонецЕсли;
	
	ТоварыСерииПоТабличнымЧастям = Новый Массив;
	ЭтоПервыйЭлемент = Истина;
	Для Каждого ТоварыСерии Из ТабличныеЧастиТоварыСерии Цикл
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура        КАК Номенклатура,
		|	ТаблицаТовары.Характеристика      КАК Характеристика,
		|	Неопределено                      КАК Серия,
		|	&ПолеСтавкаНДС                    КАК СтавкаНДС,
		|	СУММА(&ПолеКоличество)            КАК Количество,
		|	СУММА(&ПолеСумма)                 КАК Сумма,
		|	СУММА(&ПолеСуммаНДС)              КАК СуммаНДС,
		|	СУММА(&ПолеСуммаСНДС)             КАК СуммаСНДС
		|ПОМЕСТИТЬ ТоварыСерии
		|ИЗ
		|	&ОписаниеДокументаТовары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &ДокументОснование
		|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Серия,
		|	&ПолеСтавкаНДС
		|;";
		Если ТоварыСерии.Серии <> "" Тогда
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ТаблицаТовары.Номенклатура        КАК Номенклатура,
			|	ТаблицаТовары.Характеристика      КАК Характеристика,
			|	Неопределено               КАК Серия,
			|	&ПолеСтавкаНДС                    КАК СтавкаНДС,
			|	СУММА(&ПолеКоличество)            КАК Количество,
			|	СУММА(&ПолеСумма)                 КАК Сумма,
			|	СУММА(&ПолеСуммаНДС)              КАК СуммаНДС,
			|	СУММА(&ПолеСуммаСНДС)             КАК СуммаСНДС
			|ПОМЕСТИТЬ ТоварыСерии
			|ИЗ
			|	&ОписаниеДокументаТовары КАК ТаблицаТовары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ &ОписаниеДокументаСерии КАК ТаблицаСерии
			|		ПО ТаблицаТовары.Номенклатура = ТаблицаСерии.Номенклатура
			|		И ТаблицаТовары.Характеристика = ТаблицаСерии.Характеристика
			|		И ТаблицаСерии.Ссылка = &ДокументОснование
			|ГДЕ
			|	ТаблицаТовары.Ссылка = &ДокументОснование
			|	И ТаблицаСерии.Ссылка ЕСТЬ NULL
			|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаТовары.Номенклатура,
			|	ТаблицаТовары.Характеристика,
			|	&ПолеСтавкаНДС
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаСерии.Номенклатура,
			|	ТаблицаСерии.Характеристика,
			|	ТаблицаСерии.Серия,
			|	ТаблицаТовары.СтавкаНДС,
			|	СУММА(ТаблицаСерии.Количество),
			|	СУММА(ВЫБОР КОГДА ТаблицаТовары.Количество = 0 ТОГДА 0
			|		ИНАЧЕ ТаблицаСерии.Количество / ТаблицаТовары.Количество КОНЕЦ * ТаблицаТовары.Сумма),
			|	СУММА(ВЫБОР КОГДА ТаблицаТовары.Количество = 0 ТОГДА 0
			|		ИНАЧЕ ТаблицаСерии.Количество / ТаблицаТовары.Количество КОНЕЦ * ТаблицаТовары.СуммаНДС),
			|	СУММА(ВЫБОР КОГДА ТаблицаТовары.Количество = 0 ТОГДА 0
			|		ИНАЧЕ ТаблицаСерии.Количество / ТаблицаТовары.Количество КОНЕЦ * ТаблицаТовары.СуммаСНДС)
			|ИЗ
			|	&ОписаниеДокументаСерии КАК ТаблицаСерии
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		(ВЫБРАТЬ
			|			ТаблицаТовары.Номенклатура    КАК Номенклатура,
			|			ТаблицаТовары.Характеристика  КАК Характеристика,
			|			МАКСИМУМ(&ПолеСтавкаНДС)      КАК СтавкаНДС,
			|			СУММА(&ПолеКоличество)        КАК Количество,
			|			СУММА(&ПолеСумма)             КАК Сумма,
			|			СУММА(&ПолеСуммаНДС)          КАК СуммаНДС,
			|			СУММА(&ПолеСуммаСНДС)         КАК СуммаСНДС
			|		ИЗ
			|			&ОписаниеДокументаТовары КАК ТаблицаТовары
			|		ГДЕ
			|			ТаблицаТовары.Ссылка = &ДокументОснование
			|		СГРУППИРОВАТЬ ПО
			|			ТаблицаТовары.Номенклатура,
			|			ТаблицаТовары.Характеристика) КАК ТаблицаТовары
			|		ПО ТаблицаТовары.Номенклатура = ТаблицаСерии.Номенклатура
			|		И ТаблицаТовары.Характеристика = ТаблицаСерии.Характеристика
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|		ПО ТаблицаСерии.Номенклатура = СправочникНоменклатура.Ссылка
			|ГДЕ
			|	ТаблицаСерии.Ссылка = &ДокументОснование
			|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаСерии.Номенклатура,
			|	ТаблицаСерии.Характеристика,
			|	ТаблицаСерии.Серия,
			|	ТаблицаТовары.СтавкаНДС
			|;";
		КонецЕсли;
		
		Если ЭтоПервыйЭлемент Тогда
			ЭтоПервыйЭлемент = Ложь;
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТоварыСерии", "");
		КонецЕсли;
		
		ОписаниеДокумента = СтрШаблон("Документ.%1", ИмяДокумента);
		Если ЗначениеЗаполнено(ТоварыСерии.Товары) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", СтрШаблон("%1.%2", ОписаниеДокумента,ТоварыСерии.Товары));
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", ОписаниеДокумента);
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОписаниеДокументаСерии", СтрШаблон("%1.%2", ОписаниеДокумента,ТоварыСерии.Серии));
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСтавкаНДС",          ТоварыСерии.ПолеСтавкаНДС);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеКоличество",         ТоварыСерии.ПолеКоличество);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСуммаНДС",           ТоварыСерии.ПолеСуммаНДС);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСуммаСНДС",          ТоварыСерии.ПолеСуммаСНДС);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСумма",              ТоварыСерии.ПолеСумма);
		
		ТоварыСерииПоТабличнымЧастям.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	
	ТекстЗапроса = СтрСоединить(ТоварыСерииПоТабличнымЧастям, "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|");
	
	ТекстЗапроса = ТекстЗапроса + СтрШаблон(ШаблонОформленныеДокументы(),"ОтгрузкаТоваровИСМП");
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура        КАК Номенклатура,
	|	Товары.Характеристика      КАК Характеристика,
	|	Товары.Серия               КАК Серия,
	|	Товары.СтавкаНДС           КАК СтавкаНДС,
	|	Товары.Количество          КАК Количество,
	|	Товары.Сумма               КАК Сумма,
	|	Товары.СуммаНДС            КАК СуммаНДС,
	|	Товары.СуммаСНДС           КАК СуммаСНДС
	|	
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	ТоварыСерии КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	ОформленныеТовары.Серия,
	|	ОформленныеТовары.СтавкаНДС,
	|	-ОформленныеТовары.Количество,
	|	-ОформленныеТовары.Сумма,
	|	-ОформленныеТовары.СуммаНДС,
	|	-ОформленныеТовары.СуммаСНДС
	|ИЗ
	|	Документ.ОтгрузкаТоваровИСМП.Товары КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.Ссылка В (ВЫБРАТЬ Т.Ссылка ИЗ ОформленныеДокументыОтгрузкаТоваровИСМП КАК Т)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура      КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика    КАК Характеристика,
	|	ТоварыКОформлению.Серия             КАК Серия,
	|	ТоварыКОформлению.СтавкаНДС         КАК СтавкаНДС,
	|	СУММА(ТоварыКОформлению.Количество) КАК Количество,
	|	СУММА(ТоварыКОформлению.Количество) КАК КоличествоУпаковок,
	|	СУММА(ТоварыКОформлению.Сумма)      КАК Сумма,
	|	СУММА(ТоварыКОформлению.СуммаНДС)   КАК СуммаНДС,
	|	СУММА(ТоварыКОформлению.СуммаСНДС)  КАК СуммаСНДС,
	|	ВЫБОР КОГДА СУММА(ТоварыКОформлению.Количество) > 0 И СУММА(ТоварыКОформлению.Сумма) > 0
	|		ТОГДА СУММА(ТоварыКОформлению.Сумма) / СУММА(ТоварыКОформлению.Количество)
	|	ИНАЧЕ 0 КОНЕЦ                       КАК Цена
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия,
	|	ТоварыКОформлению.СтавкаНДС
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|;
	|";
	
	Если ТабличнаяЧастьШтрихкоды <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + СтрШаблон(
		"ВЫБРАТЬ
		|	Штрихкоды.%3 КАК ШтрихкодУпаковки
		|ИЗ
		|	Документ.%1.%2 КАК Штрихкоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтгрузкаТоваровИСМП.ШтрихкодыУпаковок КАК ОформленныеШтрихкоды
		|		ПО ОформленныеШтрихкоды.Ссылка В (ВЫБРАТЬ Т.Ссылка ИЗ ОформленныеДокументыОтгрузкаТоваровИСМП КАК Т)
		|		И ОформленныеШтрихкоды.ШтрихкодУпаковки = Штрихкоды.%3
		|ГДЕ
		|	Штрихкоды.Ссылка = &ДокументОснование
		|	И ОформленныеШтрихкоды.ШтрихкодУпаковки ЕСТЬ NULL
		|",
		ИмяДокумента,
		ТабличнаяЧастьШтрихкоды.ИмяТаблицыШтрихкодыУпаковок,
		ТабличнаяЧастьШтрихкоды.ИмяКолонкиШтрихкодУпаковки,
		);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьОтгрузкуТоваровИСМПНаОснованииВозвратаТоваровПоставщику(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	ДокументСсылка.Контрагент       КАК Контрагент,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ОтгрузкаПродажа) КАК Операция,
	|	ДокументСсылка.Номер            КАК НомерПервичногоДокумента,
	|	ДокументСсылка.Дата             КАК ДатаПервичногоДокумента,
	|	ДокументСсылка.Комментарий      КАК Комментарий,
	|	ДокументСсылка.Дата             КАК ДатаОтгрузки
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(ОписаниеТабличнойЧастиДляФормированияОтгрузкиТоваровИСМП("Серии"));
	ТабличнаяЧастьШтрихкоды = Новый Структура("ИмяТаблицыШтрихкодыУпаковок, ИмяКолонкиШтрихкодУпаковки", "ШтрихкодыУпаковок", "ШтрихкодУпаковки");
	ЗаполнитьТабличныеЧастиОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ВозвратТоваровПоставщику", ТабличныеЧасти, ТабличнаяЧастьШтрихкоды);
	
КонецПроцедуры

Процедура ЗаполнитьОтгрузкуТоваровИСМПНаОснованииПеремещенияТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка                КАК ДокументОснование,
	|	ДокументСсылка.Организация           КАК Организация,
	|	ДокументСсылка.ОрганизацияПолучатель КАК Контрагент,
	|	НЕ ДокументСсылка.Проведен
	|		Или ДокументСсылка.ОрганизацияПолучатель = ЗНАЧЕНИЕ(Справочник.Организации.Пустаяссылка)
	|		Или ДокументСсылка.Организация = ДокументСсылка.ОрганизацияПолучатель           КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ОтгрузкаПродажа) КАК Операция,
	|	ДокументСсылка.Номер                 КАК НомерПервичногоДокумента,
	|	ДокументСсылка.Дата                  КАК ДатаПервичногоДокумента,
	|	ДокументСсылка.Комментарий           КАК Комментарий,
	|	ДокументСсылка.Дата                  КАК ДатаОтгрузки
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
	ОписаниеТабличнойЧасти = ОписаниеТабличнойЧастиДляФормированияОтгрузкиТоваровИСМП("Серии");
	ОписаниеТабличнойЧасти.ПолеСтавкаНДС = "ТаблицаТовары.Номенклатура.СтавкаНДС";
	ОписаниеТабличнойЧасти.ПолеСуммаНДС = "0";
	ОписаниеТабличнойЧасти.ПолеСуммаСНДС = "0";
	
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(ОписаниеТабличнойЧасти);
	
	ТабличнаяЧастьШтрихкоды = Новый Структура("ИмяТаблицыШтрихкодыУпаковок, ИмяКолонкиШтрихкодУпаковки", "АкцизныеМарки", "АкцизнаяМарка");
	
	ЗаполнитьТабличныеЧастиОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ПеремещениеТоваров", ТабличныеЧасти, ТабличнаяЧастьШтрихкоды);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Функция ТипРасхожденияИСМПБрак() Экспорт
	
	Возврат Перечисления.ТипыРасхожденийИСМП.Брак;

КонецФункции

Функция ТипРасхожденияИСМПИзлишек() Экспорт
	
	Возврат Перечисления.ТипыРасхожденийИСМП.Излишек;

КонецФункции

Функция ТипРасхожденияИСМПНедостача() Экспорт
	
	Возврат Перечисления.ТипыРасхожденийИСМП.Недостача;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Серии

Функция ТаблицаДанныхДляГенерацииСерий(ВидМаркируемойПродукции)
	
	ТаблицаДанных = Новый ТаблицаЗначений();
	ТаблицаДанных.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаДанных.Колонки.Добавить("Серия",        Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаДанных.Колонки.Добавить("ЕстьОшибка",   Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ТекстОшибки",  ОбщегоНазначения.ОписаниеТипаСтрока(500));
	
	ДополнитьТаблицуДляГенерацииСерийПоВидуПродукции(ТаблицаДанных, ВидМаркируемойПродукции);
	
	Возврат ТаблицаДанных;
	
КонецФункции

Процедура ДополнитьТаблицуДляГенерацииСерийПоВидуПродукции(ТаблицаДанных, ВидМаркируемойПродукции)
	
	Если ВидМаркируемойПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
		ТаблицаДанных.Колонки.Добавить("МРЦ", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ИначеЕсли ВидМаркируемойПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
		ТаблицаДанных.Колонки.Добавить("ГоденДо", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТекстЗапросаГенерацииСерийПоВидуПродукции(ТекстЗапроса, ВидМаркируемойПродукции)
	
	ДополнительныеПоляВидаНоменклатуры = "";
	ДополнительныеПоляВыборки          = "";
	ДополнительныеПоляСвязи            = "";
	ДополнительныеПоляГруппировки      = "";
	
	Если ВидМаркируемойПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
		
		ДополнительныеПоляВидаНоменклатуры = ",
		|	ЕСТЬNULL(ВладельцыСерии.ИспользоватьМРЦМОТПСерии,
		|		ВидыНоменклатуры.ИспользоватьМРЦМОТПСерии) КАК ИспользоватьМРЦМОТПСерии";
		
		ДополнительныеПоляВыборки = "
		|	ВтТовары.МРЦ КАК МаксимальнаяРозничнаяЦенаМОТП,";
		
		ДополнительныеПоляСвязи = "
		|		И (ВЫБОР
		|			КОГДА ВтВидыНоменклатуры.ИспользоватьМРЦМОТПСерии = ИСТИНА
		|				ТОГДА СерииНоменклатуры.МаксимальнаяРозничнаяЦенаМОТП = ВтТовары.МРЦ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ)";
		
		ДополнительныеПоляГруппировки = ",
		|	ВтТовары.МРЦ";
	
	ИначеЕсли ВидМаркируемойПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
	
		ДополнительныеПоляВидаНоменклатуры = ",
		|	ЕСТЬNULL(ВладельцыСерии.ИспользоватьСрокГодностиСерии,
		|		ВидыНоменклатуры.ИспользоватьСрокГодностиСерии) КАК ИспользоватьСрокГодностиСерии";
		
		ДополнительныеПоляВыборки = "
		|	ВтТовары.ГоденДо КАК ГоденДо,";
		
		ДополнительныеПоляСвязи = "
		|		И (ВЫБОР
		|			КОГДА ВтВидыНоменклатуры.ИспользоватьСрокГодностиСерии = ИСТИНА
		|				ТОГДА СерииНоменклатуры.ГоденДо = ВтТовары.ГоденДо
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ)";
		
		ДополнительныеПоляГруппировки = ",
		|	ВтТовары.ГоденДо";
	
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДополнительныеПоляВидаНоменклатуры", ДополнительныеПоляВидаНоменклатуры);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДополнительныеПоляВыборки",          ДополнительныеПоляВыборки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДополнительныеПоляСвязи",            ДополнительныеПоляСвязи);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДополнительныеПоляГруппировки",      ДополнительныеПоляГруппировки);
	
КонецПроцедуры

#КонецОбласти

#Область Отладка

// См. ИнтеграцияИСМППереопределяемый.ПриОпределенииОбработкиПроверкиЗаполнения
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - проверяемый документ,
//  Отказ - Булево - признак отказа от проведения документа,
//  ПроверяемыеРеквизиты - Массив - массив путей к реквизитам, для которых будет выполнена проверка заполнения,
//  МассивНепроверяемыхРеквизитов - Массив - массив путей к реквизитам, для которых не будет выполнена проверка заполнения.
Процедура ПриОпределенииОбработкиПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказНаЭмиссиюКодовМаркировкиСУЗ")
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.МаркировкаТоваровИСМП")
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВыводИзОборотаИСМП")
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеКодовМаркировкиИСМП")
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтгрузкаТоваровИСМП")
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПриемкаТоваровИСМП")
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.УточнениеСведенийОКодахМаркировкиИСМП") Тогда
		
		ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказНаЭмиссиюКодовМаркировкиСУЗ")
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтгрузкаТоваровИСМП") Тогда
		
		ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеКоличества(ДокументОбъект, ПроверяемыеРеквизиты, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеДобавленныхИзмененныхСтрок

Процедура ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, СтруктураДействий)
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
	
	СтрокаТабличнойЧастиСтруктурой = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧастиСтруктурой.Вставить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);
	
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(СтрокаТабличнойЧастиСтруктурой, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТабличнойЧастиСтруктурой);
	
КонецПроцедуры

#КонецОбласти

#Область ОтражениеРезультатаПроверкиИПодбораВДокументе
#Область ВходящиеДокументы

// Переносит результат проверки и подбора табачной продукции во входящий документ.
//   Общая схема:
//    * Заполняет серии номенклатуры в документе, при необходимости создавая их,
//    * При использовании актов расхождений - создает акт, иначе
//    * Обновляет табличные части "Товары" и "Штрихкоды упаковок" актуальной табачной продукцией,
//    * Перезаписывает документ.
//
// Параметры:
//   ПараметрыОкончанияСканирования - Структура - (См. СверкаКодовМаркировкиИСМП.ЗафиксироватьРезультатСверки)
//
Процедура ОтразитьРезультатыПроверкиИПодбораВоВходящемДокументе(ПараметрыОкончанияСканирования)
	
	ДокументОбъект = ПараметрыОкончанияСканирования.ПроверяемыйДокумент.ПолучитьОбъект();
	
	Если ПараметрыОкончанияСканирования.СоздаватьАктОРасхождениях Тогда
		Если НЕ ДокументОбъект.ЕстьРасхождения Тогда
			ДокументОбъект.ЕстьРасхождения = Истина;
			
			// Заполним товары по данным постащика товарами до фиксации расхождений.
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ПараметрыОкончанияСканирования.ПроверяемыйДокумент);
			МенеджерОбъекта.ПерезаполнитьТоварыПоДаннымПоставщикаПоФакту(ДокументОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияРТ.ЕстьТЧОбъекта("ШтрихкодыУпаковокРасхождения", ДокументОбъект.Метаданные()) Тогда
		ОтразитьИзмененияТабличнойЧастиШтрихкодыУпаковокРасхождения(ДокументОбъект, ПараметрыОкончанияСканирования);
	КонецЕсли;
	
	// Удалим штрихкоды без упаковок.
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаШтрихкодУпаковки Из ДокументОбъект.ШтрихкодыУпаковок Цикл
		Если Не ЗначениеЗаполнено(СтрокаШтрихкодУпаковки.ШтрихкодУпаковки) Тогда
			СтрокиКУдалению.Добавить(СтрокаШтрихкодУпаковки);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ДокументОбъект.ШтрихкодыУпаковок.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	ОтразитьИзмененияТабличнойЧастиШтрихкодыУпаковок(
		ДокументОбъект,
		ПараметрыОкончанияСканирования.ТаблицаШтрихкодовВерхнегоУровня,
		ПараметрыОкончанияСканирования);
	
	ОтразитьИзменениеКоличестваВТоварах(ДокументОбъект, ПараметрыОкончанияСканирования);
	
	Если ДокументОбъект.Проведен Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись)
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ШтрихкодыСодержащиеМаркируемуюПродукцию(Знач ШтрихкодыДляПроверки, ВидПродукцииИС)
	
	Возврат ИнтеграцияИСРТ.ШтрихкодыСодержащиеВидыПродукции(ШтрихкодыДляПроверки, ВидПродукцииИС);
	
КонецФункции

// Переносит таблицу штрихкодов верхнего уровня в документ
//   Удаляет из табличной части "ШтрихкодыУпаковок" документа отсутствующие табачные (содержащие внутри хотя бы 1 шт 
//   табачной продукции) штрихкоды верхнего уровня
//   Добавляет в табличную часть "ШтрихкодыУпаковок" документа отсутствующие там фактические штрихкоды
//   Не меняет прочие (например алкогольные) штрихкоды
// 
// Параметры:
//  ДокументОбъект                  - ДокументОбъект  - документ для изменения
//  ТаблицаШтрихкодовВерхнегоУровня - ТаблицаЗначений - таблица с колонкой "ШтрихкодУпаковки" (фактические)
Процедура ОтразитьИзмененияТабличнойЧастиШтрихкодыУпаковок(ДокументОбъект, ТаблицаШтрихкодовВерхнегоУровня, ПараметрыОкончанияСканирования) Экспорт
	
	ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ИмяКолонкиШтрихкодУпаковки         = "ШтрихкодУпаковки";
	ИмяКолонкиЗначениеШтрихкода        = "";
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		ИмяТабличнойЧастиШтрихкодыУпаковок = "АкцизныеМарки";
		ИмяКолонкиШтрихкодУпаковки         = "АкцизнаяМарка";
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПоступлениеТоваров") Тогда
		ИмяКолонкиЗначениеШтрихкода        = "ЗначениеШтрихкода";
	КонецЕсли;
	
	ШтрихкодыДляПроверки = ДокументОбъект[ИмяТабличнойЧастиШтрихкодыУпаковок].Выгрузить().ВыгрузитьКолонку(ИмяКолонкиШтрихкодУпаковки);
	Для Каждого ЭлементВНаличии Из ТаблицаШтрихкодовВерхнегоУровня Цикл
		ЭлементМассива = ШтрихкодыДляПроверки.Найти(ЭлементВНаличии.ШтрихкодУпаковки);
		Если ЭлементМассива<>Неопределено Тогда
			ШтрихкодыДляПроверки.Удалить(ЭлементМассива);
		Иначе
			СтрокаШтрихкодУпаковки = ДокументОбъект[ИмяТабличнойЧастиШтрихкодыУпаковок].Добавить();
			СтрокаШтрихкодУпаковки[ИмяКолонкиШтрихкодУпаковки] = ЭлементВНаличии.ШтрихкодУпаковки;
			Если ЗначениеЗаполнено(ИмяКолонкиЗначениеШтрихкода) Тогда
				СтрокаШтрихкодУпаковки[ИмяКолонкиЗначениеШтрихкода] = ЭлементВНаличии.Штрихкод;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ШтрихкодыСодержащиеМаркируемуюПродукцию = ШтрихкодыСодержащиеМаркируемуюПродукцию(ШтрихкодыДляПроверки, ПараметрыОкончанияСканирования.ВидПродукцииИС);
	
	Для Каждого ЭлементОтсутствует Из ШтрихкодыСодержащиеМаркируемуюПродукцию Цикл
		ДокументОбъект[ИмяТабличнойЧастиШтрихкодыУпаковок].Удалить(ДокументОбъект[ИмяТабличнойЧастиШтрихкодыУпаковок].Найти(ЭлементОтсутствует, ИмяКолонкиШтрихкодУпаковки));
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтразитьИзмененияТабличнойЧастиШтрихкодыУпаковокРасхождения(ДокументОбъект, ПараметрыОкончанияСканирования)
	
	ПараметрыПоискаПродукция = Новый Структура("Номенклатура, Характеристика, ЗначениеШтрихкода");
	
	// Удалим из таблицы расхождений штрихкоды по виду маркируемой продукции.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ШтрихкодыУпаковокРасхожденияДокумента", ДокументОбъект.ШтрихкодыУпаковокРасхождения.Выгрузить());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ШтрихкодыУпаковокРасхожденияДокумента.Номенклатура КАК Номенклатура,
		|	ШтрихкодыУпаковокРасхожденияДокумента.Характеристика КАК Характеристика,
		|	ШтрихкодыУпаковокРасхожденияДокумента.ЗначениеШтрихкода КАК ЗначениеШтрихкода
		|ПОМЕСТИТЬ ШтрихкодыУпаковокРасхожденияДокумента
		|ИЗ
		|	&ШтрихкодыУпаковокРасхожденияДокумента КАК ШтрихкодыУпаковокРасхожденияДокумента
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ШтрихкодыУпаковокРасхожденияДокумента.Номенклатура КАК Номенклатура,
		|	ШтрихкодыУпаковокРасхожденияДокумента.Характеристика КАК Характеристика,
		|	&ОпределениеВидаПродукции КАК ВидПродукции,
		|	ШтрихкодыУпаковокРасхожденияДокумента.ЗначениеШтрихкода КАК ЗначениеШтрихкода
		|ИЗ
		|	ШтрихкодыУпаковокРасхожденияДокумента КАК ШтрихкодыУпаковокРасхожденияДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ШтрихкодыУпаковокРасхожденияДокумента.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	&УсловиеМаркируемаяПродукция";
	
	ИнтеграцияИСРТ.ОпределитьВидПродукцииТекстаЗапроса(Запрос.Текст, "СправочникНоменклатура");
	ВидМаркируемойПродукцииОтбор = ПараметрыОкончанияСканирования.ВидПродукцииИС;
	ИнтеграцияИСМПРТ.УстановитьУсловиеПоВидуМаркируемойПродукции(Запрос.Текст, ВидМаркируемойПродукцииОтбор);
	
	ВыборкаШтрихкодыРасхожденияКУдалению = Запрос.Выполнить().Выбрать();
	Пока ВыборкаШтрихкодыРасхожденияКУдалению.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ПараметрыПоискаПродукция, ВыборкаШтрихкодыРасхожденияКУдалению);
		СтрокиКУдалению = ДокументОбъект.ШтрихкодыУпаковокРасхождения.НайтиСтроки(ПараметрыПоискаПродукция);
		Для Каждого СтрокаУдалить Из СтрокиКУдалению Цикл
			ДокументОбъект.ШтрихкодыУпаковокРасхождения.Удалить(СтрокаУдалить);
		КонецЦикла;
	КонецЦикла;
	
	Если НЕ ПараметрыОкончанияСканирования.СоздаватьАктОРасхождениях Тогда
		Возврат;
	КонецЕсли;
	
	// Дополним таблицу расхождений.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ШтрихкодыУпаковокПланЭДО", ПараметрыОкончанияСканирования.ШтрихкодыУпаковокПланЭДО);
	Запрос.УстановитьПараметр("ШтрихкодыУпаковокФактЭДО", ПараметрыОкончанияСканирования.ШтрихкодыУпаковокФактЭДО);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ШтрихкодыУпаковокПланЭДО.Номенклатура КАК Номенклатура,
		|	ШтрихкодыУпаковокПланЭДО.Характеристика КАК Характеристика,
		|	ШтрихкодыУпаковокПланЭДО.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
		|	ШтрихкодыУпаковокПланЭДО.КоличествоНедостача КАК КоличествоНедостача,
		|	ШтрихкодыУпаковокПланЭДО.КоличествоБрак КАК КоличествоБрак,
		|	ШтрихкодыУпаковокПланЭДО.КоличествоПринято КАК КоличествоПринято
		|ПОМЕСТИТЬ ТаблицаШтрихкодыПлан
		|ИЗ
		|	&ШтрихкодыУпаковокПланЭДО КАК ШтрихкодыУпаковокПланЭДО
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	ЗначениеШтрихкода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ШтрихкодыУпаковокФактЭДО.Номенклатура КАК Номенклатура,
		|	ШтрихкодыУпаковокФактЭДО.Характеристика КАК Характеристика,
		|	ШтрихкодыУпаковокФактЭДО.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
		|	ШтрихкодыУпаковокФактЭДО.КоличествоИзлишек КАК КоличествоИзлишек,
		|	ШтрихкодыУпаковокФактЭДО.КоличествоБрак КАК КоличествоБрак,
		|	ШтрихкодыУпаковокФактЭДО.КоличествоПринято КАК КоличествоПринято,
		|	ШтрихкодыУпаковокФактЭДО.Брак КАК Брак
		|ПОМЕСТИТЬ ТаблицаШтрихкодыФакт
		|ИЗ
		|	&ШтрихкодыУпаковокФактЭДО КАК ШтрихкодыУпаковокФактЭДО
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	ЗначениеШтрихкода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаШтрихкодыПлан.Номенклатура КАК Номенклатура,
		|	ТаблицаШтрихкодыПлан.Характеристика КАК Характеристика,
		|	ТаблицаШтрихкодыПлан.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
		|	ТаблицаШтрихкодыПлан.КоличествоНедостача КАК Количество,
		|	ЛОЖЬ КАК Излишек,
		|	ЛОЖЬ КАК Брак
		|ПОМЕСТИТЬ ТаблицаРасхождений
		|ИЗ
		|	ТаблицаШтрихкодыПлан КАК ТаблицаШтрихкодыПлан
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаШтрихкодыФакт КАК ТаблицаШтрихкодыФакт
		|		ПО ТаблицаШтрихкодыПлан.ЗначениеШтрихкода = ТаблицаШтрихкодыФакт.ЗначениеШтрихкода
		|ГДЕ
		|	ТаблицаШтрихкодыФакт.Номенклатура ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаШтрихкодыФакт.Номенклатура,
		|	ТаблицаШтрихкодыФакт.Характеристика,
		|	ТаблицаШтрихкодыФакт.ЗначениеШтрихкода,
		|	ТаблицаШтрихкодыФакт.КоличествоИзлишек,
		|	ИСТИНА,
		|	ЛОЖЬ
		|ИЗ
		|	ТаблицаШтрихкодыФакт КАК ТаблицаШтрихкодыФакт
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаШтрихкодыПлан КАК ТаблицаШтрихкодыПлан
		|		ПО (ТаблицаШтрихкодыПлан.ЗначениеШтрихкода = ТаблицаШтрихкодыФакт.ЗначениеШтрихкода)
		|ГДЕ
		|	ТаблицаШтрихкодыПлан.Номенклатура ЕСТЬ NULL
		|	И ТаблицаШтрихкодыФакт.КоличествоИзлишек > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаШтрихкодыФакт.Номенклатура,
		|	ТаблицаШтрихкодыФакт.Характеристика,
		|	ТаблицаШтрихкодыФакт.ЗначениеШтрихкода,
		|	ТаблицаШтрихкодыФакт.КоличествоБрак,
		|	ЛОЖЬ,
		|	ИСТИНА
		|ИЗ
		|	ТаблицаШтрихкодыФакт КАК ТаблицаШтрихкодыФакт
		|ГДЕ
		|	(ТаблицаШтрихкодыФакт.Брак
		|			ИЛИ ТаблицаШтрихкодыФакт.КоличествоБрак > 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаРасхождений.Номенклатура КАК Номенклатура,
		|	ТаблицаРасхождений.Характеристика КАК Характеристика,
		|	&ОпределениеВидаПродукции КАК ВидПродукции,
		|	ТаблицаРасхождений.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
		|	ТаблицаРасхождений.Количество КАК Количество,
		|	ТаблицаРасхождений.Излишек КАК Излишек,
		|	ТаблицаРасхождений.Брак КАК Брак
		|ИЗ
		|	ТаблицаРасхождений КАК ТаблицаРасхождений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТаблицаРасхождений.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	&УсловиеМаркируемаяПродукция";
	
	ИнтеграцияИСРТ.ОпределитьВидПродукцииТекстаЗапроса(Запрос.Текст, "СправочникНоменклатура");
	ВидМаркируемойПродукцииОтбор = ПараметрыОкончанияСканирования.ВидПродукцииИС;
	ИнтеграцияИСМПРТ.УстановитьУсловиеПоВидуМаркируемойПродукции(Запрос.Текст, ВидМаркируемойПродукцииОтбор);
	
	ВыборкаШтрихкодыРасхожденияКДобавлению = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаШтрихкодыРасхожденияКДобавлению.Следующий() Цикл
		
		НоваяСтрока = ДокументОбъект.ШтрихкодыУпаковокРасхождения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаШтрихкодыРасхожденияКДобавлению);
		Если ВыборкаШтрихкодыРасхожденияКДобавлению.Излишек Тогда
			ТипРасхождения = ИнтеграцияИСМПРТ.ТипРасхожденияИСМПИзлишек();
		ИначеЕсли ВыборкаШтрихкодыРасхожденияКДобавлению.Брак Тогда
			ТипРасхождения = ИнтеграцияИСМПРТ.ТипРасхожденияИСМПБрак();
		Иначе
			ТипРасхождения = ИнтеграцияИСМПРТ.ТипРасхожденияИСМПНедостача();
		КонецЕсли;
		
		НоваяСтрока.ТипРасхождения = ТипРасхождения;
		
	КонецЦикла;
	
КонецПроцедуры

// Переносит маркируемую продукцию из формы проверки и подбора в документ Возврат товаров поставщику.
// Удаляет из табличных частей Товары, Серии отсутствующую в данных проверки табачную продукцию.
// Не меняет прочие товарные строки.
//
// Параметры:
//  ДокументОбъект           - ДокументОбъект.ВозвратТоваровПоставщику - документ к изменению
//  ПараметрыОкончанияПроверки - (См. ПроверкаИПодборПродукцииИСМП.ПараметрыОкончанияПроверки).
Процедура ОтразитьИзменениеКоличестваВТоварах(ДокументОбъект, ПараметрыОкончанияПроверки)

	Запрос = Новый Запрос;
	ТаблицаТовары = ДокументОбъект.Товары.Выгрузить();
	ТаблицаМаркируемойПродукции = ПараметрыОкончанияПроверки.ТаблицаПодобраннойПровереннойПродукции;
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТовары);
	Запрос.УстановитьПараметр("Подобрано", ТаблицаМаркируемойПродукции);
	Запрос.УстановитьПараметр("ОсобенностьУчета", ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ПараметрыОкончанияПроверки.ВидПродукцииИС));

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Количество КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подобрано.Номенклатура КАК Номенклатура,
	|	Подобрано.Характеристика КАК Характеристика,
	|	Подобрано.Серия КАК Серия,
	|	Подобрано.КоличествоПодобрано КАК Количество
	|ПОМЕСТИТЬ Подобрано
	|ИЗ
	|	&Подобрано КАК Подобрано
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ ТоварыСПризнакомМаркируемаяПродукция
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Ссылка = Товары.Номенклатура)
	|			И СправочникНоменклатура.ОсобенностьУчета = &ОсобенностьУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Подобрано.Номенклатура,
	|	Подобрано.Характеристика,
	|	Подобрано.Серия,
	|	-Подобрано.Количество
	|ИЗ
	|	Подобрано КАК Подобрано
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	СУММА(Товары.Количество) КАК Расхождение
	|ИЗ
	|	ТоварыСПризнакомМаркируемаяПродукция КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия
	|
	|ИМЕЮЩИЕ
	|	СУММА(Товары.Количество) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Расхождение УБЫВ";
	
	ВыборкаРасхождения = Запрос.Выполнить().Выбрать();
	Если ВыборкаРасхождения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиКУдалению = Новый Массив;
	ПараметрыПоиска = Новый Структура("Номенклатура, Характеристика");
	
	ДействияДобавлениеСтроки = ИнтеграцияИСРТ.ДействияДляОбработкиСтроки(ДокументОбъект, "Добавление");
	ДействияИзменениеСтроки =  ИнтеграцияИСРТ.ДействияДляОбработкиСтроки(ДокументОбъект, "Изменение");
	
	Пока ВыборкаРасхождения.Следующий() Цикл
		
		Расхождение = ВыборкаРасхождения.Расхождение;
		
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ВыборкаРасхождения);
		
		СтрокиТовары = ТаблицаТовары.НайтиСтроки(ПараметрыПоиска);
		
		Если Расхождение > 0 Тогда
			// Уменьшим количество на "Расхождение".
			Для Каждого СтрокаТаблицыТовары Из СтрокиТовары Цикл
				
				Списать = СтрокаТаблицыТовары.Количество;
				Списать = Мин(Списать, Расхождение);
				
				СтрокаТаблицыТовары.Количество = СтрокаТаблицыТовары.Количество - Списать;
				Расхождение = Расхождение - Списать;
				Если СтрокаТаблицыТовары.Количество = 0 Тогда
					СтрокиКУдалению.Добавить(СтрокаТаблицыТовары);
				Иначе
					ОбработатьСтрокуТабличнойЧасти(СтрокаТаблицыТовары, ДействияИзменениеСтроки);
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			// Увеличим количество на "Расхождение".
			Если СтрокиТовары.Количество() > 0 Тогда
				
				СтрокаТаблицыТовары = СтрокиТовары[0];
				СтрокаТаблицыТовары.Количество = СтрокаТаблицыТовары.Количество - Расхождение;
				ОбработатьСтрокуТабличнойЧасти(СтрокаТаблицыТовары, ДействияИзменениеСтроки);
				
			Иначе
				
				НоваяСтрокаТовары = ТаблицаТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, ПараметрыПоиска);
				НоваяСтрокаТовары.Количество = - Расхождение;
				ОбработатьСтрокуТабличнойЧасти(НоваяСтрокаТовары, ДействияДобавлениеСтроки);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаТовары.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	ДокументОбъект.Товары.Загрузить(ТаблицаТовары);
	
КонецПроцедуры

#КонецОбласти

Функция ТекстЗапросаМаркируемойПродукции(ДокументСсылка, ИмяТабЧастиТовары = Неопределено)
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Если ИмяТабЧастиТовары = Неопределено Тогда
		ИмяТабЧастиТовары = "Товары";
	КонецЕсли;
	
	ТекстЗапросаШаблон = "ВЫБРАТЬ
	|	Товары.Номенклатура      КАК Номенклатура,
	|	Товары.Характеристика    КАК Характеристика,
	|	Значение(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	СУММА(Товары.Количество) КАК Количество
	|ИЗ
	|	Документ.%1.%2 КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &Документ
	|	И &УсловиеМаркируемаяПродукция
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Значение(Справочник.СерииНоменклатуры.ПустаяСсылка)";
	
	ТекстЗапроса = СтрШаблон(ТекстЗапросаШаблон, МетаданныеДокумента.Имя, ИмяТабЧастиТовары);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВидыПродукцииДокумента(ДокументСсылка, ИмяТабЧастиТовары = Неопределено)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ Различные
	|	&ОпределениеВидаПродукции КАК ВидПродукции
	|ИЗ
	|	Документ.%1.%2 КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка В (&ДокументСсылка)
	|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
	|";
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	Если ИмяТабЧастиТовары = Неопределено Тогда
		ИмяТабЧастиТовары = "Товары";
	КонецЕсли;
	
	ТекстЗапроса = СтрШаблон(ТекстЗапроса, МетаданныеДокумента.Имя, ИмяТабЧастиТовары);
	
	ИнтеграцияИСРТ.ОпределитьВидПродукцииТекстаЗапроса(ТекстЗапроса, "СправочникНоменклатура");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьКодыТНВЭДПоНоменклатуреВТабличнойЧасти(ТабличнаяЧасть) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура
	|ПОМЕСТИТЬ вт_Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Товары.НомерСтроки КАК НомерСтроки,
	|	вт_Товары.Номенклатура,
	|	вт_Товары.Номенклатура.КодТНВЭД.Код КАК КодТНВЭД
	|ИЗ
	|	вт_Товары КАК вт_Товары
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Товары", ТабличнаяЧасть.Выгрузить(, "НомерСтроки, Номенклатура"));
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТабличнаяЧасть[Выборка.НомерСтроки - 1].КодТНВЭД = Выборка.КодТНВЭД;
	КонецЦикла;
	
КонецПроцедуры

//Проверяет что по текущему прикладному документу есть документ ПриемкаТоваровИСМП.
// Параметры:
//   Ссылка - ДокументСсылка - проверяемый документ
//
// Возвращаемое значение:
//   Булево - с текущим документом связан ПриемкаТоваровИСМП
Функция ДокументСвязанСПриемкойТоваровИСМП(Ссылка) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПриемкаТоваровИСМП.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПриемкаТоваровИСМП КАК ПриемкаТоваровИСМП
	|ГДЕ
	|	ПриемкаТоваровИСМП.ДокументОснование = &ДокументОснование");
	
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

// Вызывается при получении элеметнов проверки средставами ККТ для дозаполнения свойств прикладными данными.
// Используется для заполнения полей, которые будут переданы в методы проверки на ККТ, например, КодЕдиницыИзмерения.
// Необходимо заполнить поле КодЕдиницыИзмерения значением код единицы измерения в соответствии с общероссийским классификатором единиц измерения.
// 
// Параметры:
//  ДанныеДляОбработки - Массив из см. ШтрихкодированиеИСМПКлиентСервер.НовыйЭлементОбработкиУстановкиДополнительныхСвойствПриПроверкеККТ
Процедура ПриУстановкеДополнительныхСвойствЭлеметовПроверкиСредствамиККТ(ДанныеДляОбработки) Экспорт
	
	МассивНоменклатур = Новый Массив();
	
	Для Каждого СтрокаОбработки Из ДанныеДляОбработки Цикл
		Если МассивНоменклатур.Найти(СтрокаОбработки.Номенклатура) = Неопределено Тогда
			МассивНоменклатур.Добавить(СтрокаОбработки.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка               КАК Номенклатура,
		|	Номенклатура.ЕдиницаИзмерения.Код КАК КодЕдиницыИзмерения
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В (&МассивНоменклатур)";
	
	Запрос.УстановитьПараметр("МассивНоменклатур", МассивНоменклатур);
	
	Выборка            = Запрос.Выполнить().Выбрать();
	ЗначенияРеквизитов = Новый Соответствие();
	Пока Выборка.Следующий() Цикл
		ЗначенияРеквизитов.Вставить(Выборка.Номенклатура, Выборка.КодЕдиницыИзмерения);
	КонецЦикла;
	
	Для Каждого СтрокаОбработки Из ДанныеДляОбработки Цикл
		СтрокаОбработки.КодЕдиницыИзмерения = ЗначенияРеквизитов.Получить(СтрокаОбработки.Номенклатура);
	КонецЦикла;
	
КонецПроцедуры

#Область ОбработкаЗаполнения

#Область ОбщиеПроцедуры


Функция ОпределитьТипОснования(Знач ДанныеЗаполнения)
	
	ОснованиеЗаполнения = ДанныеЗаполнения;
	Если ТипЗнч(ОснованиеЗаполнения) = Тип("Структура") И ОснованиеЗаполнения.Свойство("Основание") Тогда
		ОснованиеЗаполнения = ОснованиеЗаполнения.Основание;
	КонецЕсли;
	Возврат ТипЗнч(ОснованиеЗаполнения);
	
КонецФункции

Функция ДополнитьУсловиеТабличнойЧасти(ИмяДокумента, ИмяТабличнойЧасти)
	
	МассивУсловийИ = Новый Массив;
	
	Возврат СтрСоединить(МассивУсловийИ);
	
КонецФункции

Процедура ЗаполнитьТабличнуюЧастьДокумента(ТабличнаяЧасть, РезультатЗапроса, ДанныеЗаполнения, ДополнительныеПараметры = Неопределено)
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЗаполнениеНеобязательно = ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ВозможноПустая");
	
	Если Выборка.Количество() = 0 И Не ЗаполнениеНеобязательно Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'В %1 отсутствует продукция для заполнения.';"),
			ДанныеЗаполнения);
		
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьШапку") Тогда
		Возврат;
	КонецЕсли;
	
	Основание = ДанныеЗаполнения;
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		Основание = Основание.Основание;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	
	РеквизитыДокумента = Запрос.Выполнить().Выбрать();
	РеквизитыДокумента.Следующий();
	
	ЭтоПерезаполнение = ЗначениеЗаполнено(ДокументОбъект.Ссылка);
	
	Если Не ЭтоПерезаполнение Тогда
		
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(РеквизитыДокумента.ДокументОснование);
			
		ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаТабличнойЧастиШтрихкодыУпаковок(ИмяДокумента)
	
	Возврат СтрШаблон(
	"ВЫБРАТЬ
	|	Таблица.ШтрихкодУпаковки,
	|	Таблица.ЗначениеШтрихкода
	|ИЗ
	|	Документ.%1.ШтрихкодыУпаковок КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка",
	ИмяДокумента);
	
КонецФункции

// Функция возвращает шаблон запроса оформленных документов
//
Функция ШаблонОформленныеДокументы()
	
	Шаблон =
	"ВЫБРАТЬ
	|	ТаблицаДокументы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОформленныеДокументы%1
	|ИЗ
	|	Документ.%1 КАК ТаблицаДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовИСМП КАК СтатусыДокументовИСМП
	|		ПО СтатусыДокументовИСМП.Документ = ТаблицаДокументы.Ссылка
	|ГДЕ
	|	ТаблицаДокументы.ДокументОснование = &ДокументОснование
	|	И ТаблицаДокументы.Ссылка <> &ЭтаСсылка
	|	И ТаблицаДокументы.Проведен
	|	И СтатусыДокументовИСМП.Статус НЕ В(&КонечныеСтатусы)
	|;
	|";
	
	Возврат Шаблон;
	
КонецФункции
#КонецОбласти


#Область ВыводИзОборотаИСМП

Процедура ЗаполнитьШапкуВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
КонецПроцедуры

Процедура ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(
	ДокументОбъект, ДанныеЗаполнения, ИмяДокумента, ТоварыСерии = Неопределено, Штрихкоды = Неопределено)
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьТабличнуюЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТоварыСерии = Неопределено Тогда
		ТоварыСерии = Новый Массив;
		ТоварыСерии.Добавить(Новый Структура("Товары, Серии, ПолеСумма", "Товары", "", ""));
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.ИмяФильтра = "ЗаполнениеСВидомПродукции" Тогда
			ФильтрВидПродукции = ДанныеЗаполнения.ЗначениеФильтра;
			ОсобенностьУчета   = ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ФильтрВидПродукции);
		КонецЕсли;
		Основание = ДанныеЗаполнения.Основание;
	Иначе
		ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
		УчитыватьТабачнуюПродукцию = НЕ ТипОснования = Тип("ДокументСсылка.РеализацияТоваров");
		
		Основание          = ДанныеЗаполнения;
		ФильтрВидПродукции = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(УчитыватьТабачнуюПродукцию);
		ОсобенностьУчета   = Новый Массив;
		Для Каждого ВидПродукции Из ФильтрВидПродукции Цикл
			ОсобенностьУчета.Добавить(ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияВыводаИзОборотаИСМПИзПрикладногоДокумента(ИмяДокумента, ТоварыСерии, Штрихкоды);
	
	Запрос.УстановитьПараметр("ЭтаСсылка",         ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("КонечныеСтатусы",   Документы.ВыводИзОборотаИСМП.КонечныеСтатусы());
	Запрос.УстановитьПараметр("ОсобенностьУчета",  ОсобенностьУчета);
	
	Пакет = Запрос.ВыполнитьПакет();
	ИндексТовары    = Пакет.Количество() - ?(Штрихкоды = Неопределено, 1, 2);
	ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, Пакет[ИндексТовары], Основание);
	
	Если ТипЗнч(ОсобенностьУчета) = Тип("Массив") Тогда
		ИнтеграцияИС.ЗаполнитьВидПродукцииПоТабличнойЧасти(ДокументОбъект);
	Иначе
		ДокументОбъект.ВидПродукции = ФильтрВидПродукции;
	КонецЕсли;
	
	Если Штрихкоды <> Неопределено Тогда
		ИндексШтрихкоды = Пакет.Количество() - 1;
		ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.ШтрихкодыУпаковок, Пакет[ИндексШтрихкоды], ДанныеЗаполнения, Новый Структура("ВозможноПустая"));
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаЗаполненияВыводаИзОборотаИСМПИзПрикладногоДокумента(ИмяДокумента, ТабличныеЧастиТоварыСерии, ТабличнаяЧастьШтрихкоды)
	
	ЕстьСтавкаНДС = ИмяДокумента = "ОтчетОРозничныхПродажах" ИЛИ ИмяДокумента = "ВозвратТоваровПоставщику";
	
	ТоварыСерииПоТабличнымЧастям = Новый Массив;
	ЭтоПервыйЭлемент = Истина;
	Для Каждого ТоварыСерии Из ТабличныеЧастиТоварыСерии Цикл
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
		|	ТаблицаТовары.Характеристика    КАК Характеристика,
		|	"+?(ЕстьСтавкаНДС,"ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,","ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС) КАК СтавкаНДС,")+"
		|	"+?(ЕстьСтавкаНДС,"СУММА(ТаблицаТовары.СуммаНДС) КАК СуммаНДС,","")+"
		|	Неопределено                    КАК Серия,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество,
		|	СУММА(&ПолеСумма)               КАК Сумма
		|ПОМЕСТИТЬ ТоварыСерии
		|ИЗ
		|	&ОписаниеДокументаТовары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &ДокументОснование
		|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
		|	И ТаблицаТовары.Количество > 0
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика
		|	"+?(ЕстьСтавкаНДС,", ТаблицаТовары.СтавкаНДС","")+"
		|;";
		Если ТоварыСерии.Серии <> "" Тогда
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ТаблицаТовары.Номенклатура   КАК Номенклатура,
			|	ТаблицаТовары.Характеристика КАК Характеристика,
			|	Неопределено                 КАК Серия,
			|	ТаблицаТовары.Количество     КАК Количество,
			|	&ПолеСумма                   КАК Сумма
			|ПОМЕСТИТЬ ТоварыСерии
			|ИЗ
			|	&ОписаниеДокументаТовары КАК ТаблицаТовары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ &ОписаниеДокументаСерии КАК ТаблицаСерии
			|		ПО ТаблицаТовары.Номенклатура = ТаблицаСерии.Номенклатура
			|		И ТаблицаТовары.Характеристика = ТаблицаСерии.Характеристика
			|		И ТаблицаСерии.Ссылка = &ДокументОснование
			|ГДЕ
			|	ТаблицаТовары.Ссылка = &ДокументОснование
			|	И ТаблицаСерии.Ссылка ЕСТЬ NULL
			|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаСерии.Номенклатура,
			|	ТаблицаСерии.Характеристика,
			|	ТаблицаСерии.Серия,
			|	ТаблицаСерии.Количество,
			|	ВЫБОР КОГДА ТаблицаТовары.Количество = 0 ТОГДА 0 ИНАЧЕ &ПолеСумма * ТаблицаСерии.Количество / ТаблицаТовары.Количество КОНЕЦ
			|ИЗ
			|	&ОписаниеДокументаСерии КАК ТаблицаСерии
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		(ВЫБРАТЬ
			|			ТаблицаТовары.Номенклатура      КАК Номенклатура,
			|			ТаблицаТовары.Характеристика    КАК Характеристика,
			|			СУММА(ТаблицаТовары.Количество) КАК Количество,
			|			СУММА(&ПолеСумма)               КАК Сумма
			|		ИЗ
			|			&ОписаниеДокументаТовары КАК ТаблицаТовары
			|		ГДЕ
			|			ТаблицаТовары.Ссылка = &ДокументОснование
			|		СГРУППИРОВАТЬ ПО
			|			ТаблицаТовары.Номенклатура,
			|			ТаблицаТовары.Характеристика) КАК ТаблицаТовары
			|		ПО ТаблицаТовары.Номенклатура = ТаблицаСерии.Номенклатура
			|		И ТаблицаТовары.Характеристика = ТаблицаСерии.Характеристика
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|		ПО ТаблицаСерии.Номенклатура = СправочникНоменклатура.Ссылка
			|ГДЕ
			|	ТаблицаСерии.Ссылка = &ДокументОснование
			|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
			|;";
		КонецЕсли;
		
		Если ЭтоПервыйЭлемент Тогда
			ЭтоПервыйЭлемент = Ложь;
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТоварыСерии", "");
		КонецЕсли;
		
		ОписаниеДокумента = СтрШаблон("Документ.%1", ИмяДокумента);
		Если ЗначениеЗаполнено(ТоварыСерии.Товары) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", СтрШаблон("%1.%2", ОписаниеДокумента,ТоварыСерии.Товары));
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", ОписаниеДокумента);
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОписаниеДокументаСерии", СтрШаблон("%1.%2", ОписаниеДокумента,ТоварыСерии.Серии));
		
		Если ЗначениеЗаполнено(ТоварыСерии.ПолеСумма) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСумма", ТоварыСерии.ПолеСумма);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСумма", "0");
		КонецЕсли;
		
		ТоварыСерииПоТабличнымЧастям.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	
	ТекстЗапроса = СтрСоединить(ТоварыСерииПоТабличнымЧастям, "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|");
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	"+?(ЕстьСтавкаНДС,"Товары.СтавкаНДС КАК СтавкаНДС,","ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС) КАК СтавкаНДС,")+"
	|	"+?(ЕстьСтавкаНДС,"Товары.СуммаНДС КАК СуммаНДС,","")+"
	|	Товары.Серия          КАК Серия,
	|	Товары.Количество     КАК Количество,
	|	Товары.Сумма          КАК Сумма
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	ТоварыСерии КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	"+?(ЕстьСтавкаНДС,"ОформленныеТовары.СтавкаНДС,","ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС),")+"
	|	"+?(ЕстьСтавкаНДС,"ОформленныеТовары.СуммаНДС КАК СуммаНДС,","")+"
	|	ОформленныеТовары.Серия,
	|	-ОформленныеТовары.Количество,
	|	-ОформленныеТовары.Сумма
	|ИЗ
	|	Документ.ВыводИзОборотаИСМП.Товары КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.Ссылка.Проведен
	|	И ОформленныеТовары.Ссылка.ДокументОснование = &ДокументОснование
	|	И ОформленныеТовары.Ссылка <> &ЭтаСсылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура      КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика    КАК Характеристика,
	|	"+?(ЕстьСтавкаНДС,"ТоварыКОформлению.СтавкаНДС КАК СтавкаНДС,","ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС) КАК СтавкаНДС,")+"
	|	"+?(ЕстьСтавкаНДС,"Сумма(ТоварыКОформлению.СуммаНДС) КАК СуммаНДС,","")+"
	|	ТоварыКОформлению.Серия             КАК Серия,
	|	СУММА(ТоварыКОформлению.Количество) КАК Количество,
	|	СУММА(ТоварыКОформлению.Количество) КАК КоличествоУпаковок,
	|	СУММА(ТоварыКОформлению.Сумма)      КАК Сумма,
	|	ВЫБОР КОГДА СУММА(ТоварыКОформлению.Количество) > 0 И СУММА(ТоварыКОформлению.Сумма) > 0
	|		ТОГДА СУММА(ТоварыКОформлению.Сумма) / СУММА(ТоварыКОформлению.Количество)
	|	ИНАЧЕ 0 КОНЕЦ                       КАК Цена
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	"+?(ЕстьСтавкаНДС,"ТоварыКОформлению.СтавкаНДС,","")+"
	|	ТоварыКОформлению.Серия
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|;
	|";
	Если ТабличнаяЧастьШтрихкоды <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + СтрШаблон(
		"ВЫБРАТЬ
		|	Штрихкоды.%3 КАК ШтрихкодУпаковки
		|ИЗ
		|	Документ.%1.%2 КАК Штрихкоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО Штрихкоды.%3.Номенклатура = СправочникНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВыводИзОборотаИСМП.ШтрихкодыУпаковок КАК ОформленныеШтрихкоды
		|		ПО ОформленныеШтрихкоды.Ссылка.ДокументОснование = &ДокументОснование
		|		И ОформленныеШтрихкоды.Ссылка <> &ЭтаСсылка
		|		И ОформленныеШтрихкоды.ШтрихкодУпаковки = Штрихкоды.%3
		|		И ОформленныеШтрихкоды.Ссылка.Проведен
		|ГДЕ
		|	Штрихкоды.Ссылка = &ДокументОснование
		|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
		|	И ОформленныеШтрихкоды.ШтрихкодУпаковки ЕСТЬ NULL
		|	И %4
		|",
		ИмяДокумента,
		ТабличнаяЧастьШтрихкоды.ИмяТаблицыШтрихкодыУпаковок,
		ТабличнаяЧастьШтрихкоды.ИмяКолонкиШтрихкодУпаковки,
		?(ИмяДокумента = "ОтчетОРозничныхПродажах", "НЕ Штрихкоды.Возврат", "Истина"));
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьВыводИзОборотаИСМПНаОснованииСписанияТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка КАК ДокументОснование,
	|	ДокументСсылка.Организация КАК Организация,
	|	НЕ ДокументСсылка.Проведен КАК ЕстьОшибкиПроведен,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(&ДокументОснование) = ТИП(Документ.СписаниеТоваров)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляСобственныхНуждПредприятия)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаУтратаПовреждениеТовара)
	|	КОНЕЦ КАК Операция,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(&ДокументОснование) = ТИП(Документ.СписаниеТоваров)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.АктУничтожения)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.Прочее)
	|	КОНЕЦ КАК ВидПервичногоДокумента,
	|	ДокументСсылка.Номер КАК НомерПервичногоДокумента,
	|	ДокументСсылка.Дата КАК ДатаПервичногоДокумента
	|ИЗ
	|	Документ.СписаниеТоваров КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование");
	
	ЗаполнитьШапкуВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
	ТоварыСерии = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Новый Структура("Товары, Серии, ПолеСумма", "Товары", "", "ТаблицаТовары.Сумма"));
	
	СтруктураШтрихкодыУпаковок = Новый Структура("ИмяТаблицыШтрихкодыУпаковок, ИмяКолонкиШтрихкодУпаковки", "АкцизныеМарки", "АкцизнаяМарка");
	
	ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, "СписаниеТоваров", ТоварыСерии, СтруктураШтрихкодыУпаковок);
	
КонецПроцедуры

Процедура ЗаполнитьВыводИзОборотаИСМПНаОснованииОтчетаОРозничныхПродажах(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка КАК ДокументОснование,
	|	ДокументСсылка.Организация КАК Организация,
	|	НЕ ДокументСсылка.Проведен КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа) КАК Операция,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.КассовыйЧек) КАК ВидПервичногоДокумента,
	|	ДокументСсылка.Номер КАК НомерПервичногоДокумента,
	|	ДокументСсылка.Дата КАК ДатаПервичногоДокумента
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование");
	
	ЗаполнитьШапкуВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(Новый Структура("Товары, Серии, ПолеСумма", "Товары", "", "ТаблицаТовары.Сумма"));
	ТабличнаяЧастьШтрихкоды = Новый Структура("ИмяТаблицыШтрихкодыУпаковок, ИмяКолонкиШтрихкодУпаковки", "АкцизныеМарки", "АкцизнаяМарка");
	ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, "ОтчетОРозничныхПродажах", ТабличныеЧасти, ТабличнаяЧастьШтрихкоды);
	
КонецПроцедуры

Процедура ЗаполнитьВыводИзОборотаИСМПНаОснованииВозвратаТоваровПоставщику(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка КАК ДокументОснование,
	|	ДокументСсылка.Организация КАК Организация,
	|	НЕ ДокументСсылка.Проведен КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаВозвратФизическомуЛицу) КАК Операция,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.УПД) КАК ВидПервичногоДокумента,
	|	ДокументСсылка.Номер КАК НомерПервичногоДокумента,
	|	ДокументСсылка.Дата КАК ДатаПервичногоДокумента
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование");
	
	ЗаполнитьШапкуВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(Новый Структура("Товары, Серии, ПолеСумма", "Товары", "", "ТаблицаТовары.Сумма"));
	ТабличнаяЧастьШтрихкоды = Новый Структура("ИмяТаблицыШтрихкодыУпаковок, ИмяКолонкиШтрихкодУпаковки", "ШтрихкодыУпаковок", "ШтрихкодУпаковки");
	ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, "ВозвратТоваровПоставщику", ТабличныеЧасти, ТабличнаяЧастьШтрихкоды);
	
КонецПроцедуры

Процедура ЗаполнитьВыводИзОборотаИСМПНаОснованииРеализацииТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка КАК ДокументОснование,
	|	ДокументСсылка.Организация КАК Организация,
	|	НЕ ДокументСсылка.Проведен КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа) КАК Операция,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.Прочее) КАК ВидПервичногоДокумента,
	|	ДокументСсылка.Номер КАК НомерПервичногоДокумента,
	|	ДокументСсылка.Дата КАК ДатаПервичногоДокумента,
	|	ТИПЗНАЧЕНИЯ(ДокументСсылка.Ссылка) КАК НаименованиеПервичногоДокумента
	|ИЗ
	|	Документ.РеализацияТоваров КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование");
	
	ЗаполнитьШапкуВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(ОписаниеТабличнойЧастиДляФормированияОтгрузкиТоваровИСМП("Серии"));
	ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, "РеализацияТоваров", ТабличныеЧасти);
	
КонецПроцедуры

Процедура ЗаполнитьВыводИзОборотаИСМПНаОснованииСборкиТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка КАК ДокументОснование,
	|	ДокументСсылка.Организация КАК Организация,
	|	НЕ ДокументСсылка.Проведен КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаФасовка) КАК Операция,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.Прочее) КАК ВидПервичногоДокумента,
	|	ДокументСсылка.Номер КАК НомерПервичногоДокумента,
	|	ДокументСсылка.Дата КАК ДатаПервичногоДокумента,
	|	ТИПЗНАЧЕНИЯ(ДокументСсылка.Ссылка) КАК НаименованиеПервичногоДокумента
	|ИЗ
	|	Документ.СборкаТоваров КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование");
	
	ЗаполнитьШапкуВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТоварыСерии = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Новый Структура("Товары, Серии, ПолеСумма", "", "", ""));
	ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, "СборкаТоваров", ТоварыСерии);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаказНаЭмиссиюКодовМаркировкиСУЗ

Процедура ЗаполнитьШапкуЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, ИмяДокумента, ИмяТабличнойЧасти = "Товары")
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьТабличнуюЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.ИмяФильтра = "ЗаполнениеСВидомПродукции" Тогда
			ФильтрВидПродукции = ДанныеЗаполнения.ЗначениеФильтра;
			ОсобенностьУчета   = ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ФильтрВидПродукции);
		КонецЕсли;
		Основание = ДанныеЗаполнения.Основание;
	Иначе
		Основание          = ДанныеЗаполнения;
		ФильтрВидПродукции = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Ложь);
		ФильтрВидПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак"));
		ОсобенностьУчета   = Новый Массив;
		Для Каждого ВидПродукции Из ФильтрВидПродукции Цикл
			ОсобенностьУчета.Добавить(ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияЗаказаНаЭмиссиюКодовМаркировкиСУЗИзПрикладногоДокумента(ИмяДокумента, ФильтрВидПродукции, ИмяТабличнойЧасти);
	
	Запрос.УстановитьПараметр("ЭтаСсылка",             ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование",     Основание);
	Запрос.УстановитьПараметр("КонечныеСтатусы",       Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.КонечныеСтатусы());
	Запрос.УстановитьПараметр("ОсобенностьУчета",      ОсобенностьУчета);
	
	ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, Запрос.Выполнить(), ДанныеЗаполнения);
	
	Если ТипЗнч(ОсобенностьУчета) = Тип("Массив") Тогда
		ИнтеграцияИС.ЗаполнитьВидПродукцииПоТабличнойЧасти(ДокументОбъект);
	Иначе
		ДокументОбъект.ВидПродукции = ФильтрВидПродукции;
	КонецЕсли;

КонецПроцедуры

Функция ТекстЗапросаЗаполненияЗаказаНаЭмиссиюКодовМаркировкиСУЗИзПрикладногоДокумента(ИмяДокумента, ВидПродукции, ИмяТабличнойЧасти)
	
	УсловиеОтбораТабличнойЧасти = ДополнитьУсловиеТабличнойЧасти(ИмяДокумента, ИмяТабличнойЧасти);
	ТекстЗапроса = СтрШаблон(
		"ВЫБРАТЬ
		|	Товары.Номенклатура      КАК Номенклатура,
		|	Товары.Характеристика    КАК Характеристика,
		|	СУММА(Товары.Количество) КАК Количество
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	Документ.%1.%2 КАК Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	Товары.Ссылка = &ДокументОснование
		|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
		|	 %3
		|СГРУППИРОВАТЬ ПО
		|	Товары.Номенклатура,
		|	Товары.Характеристика",
			ИмяДокумента,
			ИмяТабличнойЧасти,
			УсловиеОтбораТабличнойЧасти)
	+"
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Количество     КАК Количество
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	Товары КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	-1
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.ДокументОснование = &ДокументОснование
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура      КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика    КАК Характеристика,
	|	СУММА(ТоварыКОформлению.Количество) КАК Количество,
	|	СУММА(ТоварыКОформлению.Количество) КАК КоличествоУпаковок
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьЗаказНаЭмиссиюКодовМаркировкиСУЗНаОснованииЗаказаПоставщику(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка                                  КАК ДокументОснование,
	|	ДокументСсылка.Организация                             КАК Организация,
	|	ДокументСсылка.Магазин                                 КАК ПроизводственныйОбъект,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Импорт) КАК СпособВводаВОборот,
	|	НЕ ДокументСсылка.Проведен   КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличнуюЧастьЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, "ЗаказПоставщику");
	
КонецПроцедуры

#КонецОбласти

#Область МаркировкаТоваровИСМП

Процедура ЗаполнитьШапкуМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
КонецПроцедуры

Процедура ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(
	ДокументОбъект, ДанныеЗаполнения, ИмяДокумента, ТоварыСерии = Неопределено, ЕстьШтрихкодыУпаковок = Ложь)
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьТабличнуюЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТоварыСерии = Неопределено Тогда
		ТоварыСерии = Новый Массив;
		ТоварыСерии.Добавить(Новый Структура("Товары, Серии", "Товары", ""));
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.ИмяФильтра = "ЗаполнениеСВидомПродукции" Тогда
		Основание          = ДанныеЗаполнения.Основание;
		ФильтрВидПродукции = ДанныеЗаполнения.ЗначениеФильтра;
		ОсобенностьУчета   = ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ФильтрВидПродукции);
	Иначе
		Основание          = ДанныеЗаполнения;
		ОсобенностьУчета   = Новый Массив;
		ФильтрВидПродукции = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
		Для Каждого ВидПродукции Из ФильтрВидПродукции Цикл
			Если НЕ ИнтеграцияИСКлиентСервер.ВидПродукцииПодлежитМаркировкеОстатков(ВидПродукции) Тогда
				Продолжить;
			КонецЕсли;
			ОсобенностьУчета.Добавить(ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
		КонецЦикла;
	КонецЕсли;
	
	Если ИмяДокумента = "ПересчетТоваров" Тогда
		ВыражениеКоличество = "ТаблицаТовары.КоличествоФакт";
	Иначе
		ВыражениеКоличество = "ТаблицаТовары.Количество";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если ИмяДокумента = "ПроизводственнаяОперацияВЕТИС" Тогда
		Запрос.Текст = ТекстЗапросаЗаполненияМаркировкиТоваровИСМПИзОперацииВЕТИС(ИмяДокумента,
		"ВетеринарноСопроводительныйДокумент", "ЗНАЧЕНИЕ(Справочник.ВетеринарноСопроводительныйДокументВЕТИС.ПустаяСсылка)");
	ИначеЕсли ИмяДокумента = "ВходящаяТранспортнаяОперацияВЕТИС" Тогда
		Запрос.Текст = ТекстЗапросаЗаполненияМаркировкиТоваровИСМПИзОперацииВЕТИС(ИмяДокумента,
		"ЗаписьСкладскогоЖурнала", "ЗНАЧЕНИЕ(Справочник.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка)");
	Иначе
		Запрос.Текст = ТекстЗапросаЗаполненияМаркировкиТоваровИСМПИзПрикладногоДокумента(
		ИмяДокумента, ТоварыСерии, ВыражениеКоличество);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЭтаСсылка",         ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("КонечныеСтатусы",   Документы.МаркировкаТоваровИСМП.КонечныеСтатусы());
	Запрос.УстановитьПараметр("ОсобенностьУчета",  ОсобенностьУчета);
	
	ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, Запрос.Выполнить(), Основание);
	
	Если ЕстьШтрихкодыУпаковок Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаТабличнойЧастиШтрихкодыУпаковок(ИмяДокумента);
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
		ДокументОбъект.ШтрихкодыУпаковок.Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЕсли;
	
	Если ТипЗнч(ОсобенностьУчета) = Тип("Массив") Тогда
		ИнтеграцияИС.ЗаполнитьВидПродукцииПоТабличнойЧасти(ДокументОбъект);
	Иначе
		ДокументОбъект.ВидПродукции = ФильтрВидПродукции;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаЗаполненияМаркировкиТоваровИСМПИзПрикладногоДокумента(
	ИмяДокумента, ТабличныеЧастиТоварыСерии, ВыражениеКоличество = "ТаблицаТовары.Количество", ВыражениеСерия = "Неопределено")
	
	ТоварыСерииПоТабличнымЧастям = Новый Массив;
	ЭтоПервыйЭлемент = Истина;
	
	Для Каждого ТоварыСерии Из ТабличныеЧастиТоварыСерии Цикл
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
		|	ТаблицаТовары.Характеристика       КАК Характеристика,
		|	"+ВыражениеСерия+"                 КАК Серия,
		|	СУММА(" + ВыражениеКоличество + ") КАК Количество
		|ПОМЕСТИТЬ ТоварыСерии
		|ИЗ
		|	&ОписаниеДокументаТовары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &ДокументОснование
		|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика
		|	"+?(ВыражениеСерия = "Неопределено","",", ТаблицаТовары.Серия")+"
		|ИМЕЮЩИЕ
		|	СУММА(" + ВыражениеКоличество + ") > 0
		|";
		Если ТоварыСерии.Серии <> "" Тогда
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ТаблицаТовары.Номенклатура   КАК Номенклатура,
			|	ТаблицаТовары.Характеристика КАК Характеристика,
			|	ТаблицаТовары.Серия          КАК Серия,
			|	" + ВыражениеКоличество + "  КАК Количество
			|ПОМЕСТИТЬ ТоварыСерии
			|ИЗ
			|	&ОписаниеДокументаТовары КАК ТаблицаТовары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ &ОписаниеДокументаСерии КАК ТаблицаСерии
			|		ПО ТаблицаТовары.Номенклатура = ТаблицаСерии.Номенклатура
			|		И ТаблицаТовары.Характеристика = ТаблицаСерии.Характеристика
			|		И ТаблицаСерии.Ссылка = &ДокументОснование
			|ГДЕ
			|	ТаблицаТовары.Ссылка = &ДокументОснование
			|	И ТаблицаСерии.Ссылка ЕСТЬ NULL
			|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаСерии.Номенклатура,
			|	ТаблицаСерии.Характеристика,
			|	ТаблицаСерии.Серия,
			|	ТаблицаСерии.Количество
			|ИЗ
			|	&ОписаниеДокументаСерии КАК ТаблицаСерии
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|		ПО ТаблицаСерии.Номенклатура = СправочникНоменклатура.Ссылка
			|ГДЕ
			|	ТаблицаСерии.Ссылка = &ДокументОснование
			|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
			|";
		КонецЕсли;
		
		Если ЭтоПервыйЭлемент Тогда
			ЭтоПервыйЭлемент = Ложь;
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТоварыСерии", "");
		КонецЕсли;
		
		ОписаниеДокумента = СтрШаблон("Документ.%1", ИмяДокумента);
		Если ЗначениеЗаполнено(ТоварыСерии.Товары) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", СтрШаблон("%1.%2", ОписаниеДокумента,ТоварыСерии.Товары));
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", ОписаниеДокумента);
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаСерии", СтрШаблон("%1.%2", ОписаниеДокумента,ТоварыСерии.Серии));
		ТоварыСерииПоТабличнымЧастям.Добавить(ТекстЗапроса);
	КонецЦикла;
	ТекстЗапроса = СтрСоединить(ТоварыСерииПоТабличнымЧастям, "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|");
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия          КАК Серия,
	|	Товары.Количество     КАК Количество
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	ТоварыСерии КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	ОформленныеТовары.Серия,
	|	-ОформленныеТовары.Количество
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.Товары КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.Ссылка.Проведен
	|	И ОформленныеТовары.Ссылка <> &ЭтаСсылка
	|	И ОформленныеТовары.Ссылка.ДокументОснование = &ДокументОснование
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура      КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика    КАК Характеристика,
	|	ТоварыКОформлению.Серия             КАК Серия,
	|	СУММА(ТоварыКОформлению.Количество) КАК Количество,
	|	СУММА(ТоварыКОформлению.Количество) КАК КоличествоУпаковок
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗаполненияМаркировкиТоваровИСМПИзОперацииВЕТИС(ИмяДокумента, ИмяПоляИдентификатор, ПустоеЗначениеИдентификатор)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
	|	ТаблицаТовары.Характеристика       КАК Характеристика,
	|	ТаблицаТовары.Серия                КАК Серия,
	|	ТаблицаТовары.%2 КАК ИдентификаторПроисхожденияВЕТИС,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыСерии
	|ИЗ
	|	Документ.%1.Товары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ДокументОснование
	|	И ТаблицаТовары.%2 <> %3
	|	И (СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС)
	|		ИЛИ СправочникНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС))
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия,
	|	ТаблицаТовары.%2
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаТовары.Количество) > 0
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия          КАК Серия,
	|	Товары.ИдентификаторПроисхожденияВЕТИС КАК ИдентификаторПроисхожденияВЕТИС,
	|	Товары.Количество     КАК Количество
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	ТоварыСерии КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	ОформленныеТовары.Серия,
	|	ОформленныеТовары.ИдентификаторПроисхожденияВЕТИС,
	|	-ОформленныеТовары.Количество
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.Товары КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.Ссылка.Проведен
	|	И ОформленныеТовары.Ссылка <> &ЭтаСсылка
	|	И ОформленныеТовары.Ссылка.ДокументОснование = &ДокументОснование
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура      КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика    КАК Характеристика,
	|	ТоварыКОформлению.Серия             КАК Серия,
	|	ТоварыКОформлению.ИдентификаторПроисхожденияВЕТИС КАК ИдентификаторПроисхожденияВЕТИС,
	|	СУММА(ТоварыКОформлению.Количество) КАК Количество,
	|	СУММА(ТоварыКОформлению.Количество) КАК КоличествоУпаковок
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия,
	|	ТоварыКОформлению.ИдентификаторПроисхожденияВЕТИС
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|";
	
	Возврат СтрШаблон(ТекстЗапроса, ИмяДокумента, ИмяПоляИдентификатор, ПустоеЗначениеИдентификатор);
	
КонецФункции

Процедура ЗаполнитьМаркировкаТоваровИСМПНаОснованииПоступленияТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка      КАК ДокументОснование,
	|	ДокументСсылка.Организация КАК Организация,
	|	НЕ ДокументСсылка.Проведен КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС)КАК Операция
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(Новый Структура("Товары, Серии", "Товары", ""));
	ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ПоступлениеТоваров", ТабличныеЧасти, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьМаркировкаТоваровИСМПНаОснованииПересчетТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка КАК ДокументОснование,
	|	ДокументСсылка.Организация КАК Организация,
	|	НЕ ДокументСсылка.Проведен КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков)КАК Операция
	|ИЗ
	|	Документ.ПересчетТоваров КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование");
	
	ЗаполнитьШапкуМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(Новый Структура("Товары, Серии", "Товары", ""));
	ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ПересчетТоваров", ТабличныеЧасти);
	
КонецПроцедуры

Процедура ЗаполнитьМаркировкаТоваровИСМПНаОснованииЧекККМ(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка КАК ДокументОснование,
	|	ДокументСсылка.Организация КАК Организация,
	|	НЕ ДокументСсылка.Проведен КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков) КАК Операция
	|ИЗ
	|	Документ.ЧекККМ КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|	И ДокументСсылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)");
	
	ЗаполнитьШапкуМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(Новый Структура("Товары, Серии", "Товары", ""));
	ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ЧекККМ", ТабличныеЧасти);
	
КонецПроцедуры

Процедура ЗаполнитьМаркировкаТоваровИСМПНаОснованииВходящейТранспортнойОперацииВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка                          КАК ДокументОснование,
	|	ДокументСсылка.ГрузополучательХозяйствующийСубъект.Контрагент КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ОтчетОПередачеКМНаПроизводственнуюЛинию) КАК ОперацияНанесения,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС) КАК Операция,
	|	НЕ ДокументСсылка.Проведен                     КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ВходящаяТранспортнаяОперацияВЕТИС КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ВходящаяТранспортнаяОперацияВЕТИС");
	
КонецПроцедуры

#КонецОбласти

#Область ПеремаркировкаТоваровИСМП

Процедура ЗаполнитьШапкуПеремаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьПеремаркировкиТоваровИСМП(
	ДокументОбъект, ДанныеЗаполнения, ИмяДокумента, Штрихкоды = Неопределено)
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьТабличнуюЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	Если Штрихкоды = Неопределено Тогда
		Штрихкоды = Новый Структура;
		Штрихкоды.Вставить("ИмяТаблицыШтрихкодыУпаковок", "ШтрихкодыУпаковок");
		Штрихкоды.Вставить("ИмяКолонкиШтрихкодУпаковки",  "ШтрихкодУпаковки");
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.ИмяФильтра = "ЗаполнениеСВидомПродукции" Тогда
		Основание          = ДанныеЗаполнения.Основание;
		ФильтрВидПродукции = ДанныеЗаполнения.ЗначениеФильтра;
		ОсобенностьУчета   = ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ФильтрВидПродукции);
	Иначе
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			Основание = ДанныеЗаполнения.Основание;
		Иначе
			Основание = ДанныеЗаполнения;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОбъект.ВидПродукции) Тогда
			ФильтрВидПродукции = ДокументОбъект.ВидПродукции;
			ОсобенностьУчета   = ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ФильтрВидПродукции);
		Иначе
			ФильтрВидПродукции = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Ложь, Ложь);
			ОсобенностьУчета   = Новый Массив;
			Для Каждого ВидПродукции Из ФильтрВидПродукции Цикл
				Если НЕ ИнтеграцияИСКлиентСервер.ВидПродукцииПодлежитПеремаркировке(ВидПродукции) Тогда
					Продолжить;
				КонецЕсли;
				ОсобенностьУчета.Добавить(ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияПеремаркировкиТоваровИСМПИзПрикладногоДокумента(ИмяДокумента, Штрихкоды);
	
	Запрос.УстановитьПараметр("ЭтаСсылка",           ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование",   Основание);
	Запрос.УстановитьПараметр("ОсобенностьУчета",    ОсобенностьУчета);
	Запрос.УстановитьПараметр("РозничныйПокупатель", ОбщегоНазначенияРТ.РозничныйПокупатель());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Для Счетчик = 1 По Выборка.Количество Цикл
			НоваяСтрока = ДокументОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТипЗнч(ОсобенностьУчета) = Тип("Массив") Тогда
		ИнтеграцияИС.ЗаполнитьВидПродукцииПоТабличнойЧасти(ДокументОбъект);
	Иначе
		ДокументОбъект.ВидПродукции = ФильтрВидПродукции;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаЗаполненияПеремаркировкиТоваровИСМПИзПрикладногоДокумента(ИмяДокумента, ТабличнаяЧастьШтрихкоды)
	
	Если ИмяДокумента = "ОтчетОРозничныхПродажах" Тогда
		ПричинаПеремаркировки = "ЗНАЧЕНИЕ(Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратОтРозничногоПокупателя)";
	Иначе
		ПричинаПеремаркировки =
		"ВЫБОР КОГДА Документ.Контрагент = &РозничныйПокупатель
		|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратОтРозничногоПокупателя)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратОтЮридическогоЛица)
		|	КОНЕЦ";
	КонецЕсли;
	
	ТекстЗапроса = СтрШаблон(
	"ВЫБРАТЬ
	|	Товары.Номенклатура              КАК Номенклатура,
	|	Товары.Характеристика            КАК Характеристика,
	|	%7 * СУММА(Товары.КоличествоУпаковок) КАК КоличествоУпаковок
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.%1.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|	И %4
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика,
	|	-СУММА(ВЫБОР КОГДА ШтрихкодыУпаковокТоваров.Количество = 0 ТОГДА 1 ИНАЧЕ ШтрихкодыУпаковокТоваров.Количество КОНЕЦ)
	|ИЗ
	|	Документ.%1.%2 КАК ШтрихкодыУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО ШтрихкодыУпаковок.%3 = ШтрихкодыУпаковокТоваров.Ссылка
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &ДокументОснование
	|	И %5
	|
	|СГРУППИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваров.Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеШтрихкоды.Номенклатура,
	|	ОформленныеШтрихкоды.Характеристика,
	|	-СУММА(1)
	|ИЗ
	|	Документ.ПеремаркировкаТоваровИСМП.Товары КАК ОформленныеШтрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ОформленныеШтрихкоды.Номенклатура = СправочникНоменклатура.Ссылка
	|		И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
	|ГДЕ
	|	ОформленныеШтрихкоды.Ссылка.ДокументОснование = &ДокументОснование
	|	И ОформленныеШтрихкоды.Ссылка <> &ЭтаСсылка
	|	И ОформленныеШтрихкоды.Ссылка.Проведен
	|СГРУППИРОВАТЬ ПО
	|	ОформленныеШтрихкоды.Номенклатура,
	|	ОформленныеШтрихкоды.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	%6                                        КАК ПричинаПеремаркировки,
	|	ТоварыДокумента.Номенклатура              КАК Номенклатура,
	|	ТоварыДокумента.Номенклатура.КодТНВЭД     КАК КодТНВЭД,
	|	ТоварыДокумента.Характеристика            КАК Характеристика,
	|	ТоварыДокумента.Номенклатура              КАК НоваяНоменклатура,
	|	ТоварыДокумента.Характеристика            КАК НоваяХарактеристика,
	|	СУММА(ТоварыДокумента.КоличествоУпаковок) КАК Количество
	|ИЗ
	|	Товары КАК ТоварыДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.%1 КАК Документ
	|		ПО Документ.Ссылка = &ДокументОснование
	|СГРУППИРОВАТЬ ПО
	|	%6,
	|	ТоварыДокумента.Номенклатура,
	|	ТоварыДокумента.Номенклатура.КодТНВЭД,
	|	ТоварыДокумента.Характеристика
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыДокумента.КоличествоУпаковок) > 0",
	ИмяДокумента,
	ТабличнаяЧастьШтрихкоды.ИмяТаблицыШтрихкодыУпаковок,
	ТабличнаяЧастьШтрихкоды.ИмяКолонкиШтрихкодУпаковки,
	?(ИмяДокумента = "ОтчетОРозничныхПродажах", "Товары.КоличествоУпаковок < 0", "Истина"),
	?(ИмяДокумента = "ОтчетОРозничныхПродажах", "ШтрихкодыУпаковок.Возврат", "Истина"),
	ПричинаПеремаркировки,
	?(ИмяДокумента = "ОтчетОРозничныхПродажах", "-1", "1"));
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьПеремаркировкуТоваровИСМПНаОснованииВозвратаТоваровОтПокупателя(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.Перемаркировка) КАК Операция
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуПеремаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличнуюЧастьПеремаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ВозвратТоваровОтПокупателя");
	
КонецПроцедуры

Процедура ЗаполнитьПеремаркировкуТоваровИСМПНаОснованииОтчетаОРозничныхПродажах(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.Перемаркировка) КАК Операция
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуПеремаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличнаяЧастьШтрихкоды = Новый Структура("ИмяТаблицыШтрихкодыУпаковок, ИмяКолонкиШтрихкодУпаковки", "АкцизныеМарки", "АкцизнаяМарка");
	ЗаполнитьТабличнуюЧастьПеремаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ОтчетОРозничныхПродажах", ТабличнаяЧастьШтрихкоды);
	
КонецПроцедуры

#КонецОбласти

#Область ПриемкаТоваровИСМП
Функция ДанныеПрикладныхДокументовИзПриемкиТоваровИСМП(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриемкаТоваровИСМП.Организация КАК Организация,
	|	ПриемкаТоваровИСМП.Контрагент КАК Контрагент,
	|	ПриемкаТоваровИСМП.Комментарий КАК Комментарий,
	|	ПриемкаТоваровИСМП.Дата КАК Дата,
	|	НЕ ПриемкаТоваровИСМП.Проведен КАК ЕстьОшибкиПроведен,
	|	ВЫБОР
	|		КОГДА ПриемкаТоваровИСМП.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ПриемкаИзЕАЭССПризнаниемКМ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС)
	|		КОГДА ПриемкаТоваровИСМП.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ПриемкаКомиссия)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеТоваров)
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	ПриемкаТоваровИСМП.Товары.(
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		Серия КАК Серия,
	|		Упаковка КАК Упаковка,
	|		Количество КАК Количество,
	|		КоличествоУпаковок КАК КоличествоУпаковок,
	|		СтатусУказанияСерий КАК СтатусУказанияСерий
	|	) КАК Товары
	|ИЗ
	|	Документ.ПриемкаТоваровИСМП КАК ПриемкаТоваровИСМП
	|ГДЕ
	|	ПриемкаТоваровИСМП.Ссылка = &Ссылка";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

#КонецОбласти

#Область ВозвратВОборотИСМП

Процедура ЗаполнитьШапкуВозвратВОборотИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
КонецПроцедуры

Процедура ЗаполнитьТабличныеЧастиВозвратВОборотИСМП(
	ДокументОбъект, ДанныеЗаполнения, ИмяДокумента, ТоварыСерии = Неопределено, Штрихкоды = Неопределено)
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьТабличнуюЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТоварыСерии = Неопределено Тогда
		ТоварыСерии = Новый Массив;
		ТоварыСерии.Добавить(Новый Структура("Товары, Серии", "Товары", ""));
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.ИмяФильтра = "ЗаполнениеСВидомПродукции" Тогда
			ФильтрВидПродукции = ДанныеЗаполнения.ЗначениеФильтра;
			ОсобенностьУчета   = ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ФильтрВидПродукции);
		КонецЕсли;
		Основание = ДанныеЗаполнения.Основание;
	Иначе
		Основание          = ДанныеЗаполнения;
		ФильтрВидПродукции = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
		ОсобенностьУчета   = Новый Массив;
		Для Каждого ВидПродукции Из ФильтрВидПродукции Цикл
			Если НЕ ИнтеграцияИСКлиентСервер.ВидПродукцииПодлежитВозвратуВОборот(ВидПродукции) Тогда
				Продолжить;
			КонецЕсли;
			ОсобенностьУчета.Добавить(ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭтаСсылка",         ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("КонечныеСтатусы",   Документы.ВыводИзОборотаИСМП.КонечныеСтатусы());
	Запрос.УстановитьПараметр("ОсобенностьУчета",  ОсобенностьУчета);
	
	Если НЕ Штрихкоды = Неопределено Тогда
		Запрос.Текст = СтрШаблон(
		"ВЫБРАТЬ Первые 1
		|	Штрихкоды.%3 КАК КодМаркировки
		|ИЗ
		|	Документ.%1.%2 КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Ссылка = &ДокументОснование
		|	И %4
		|",
		ИмяДокумента,
		Штрихкоды.ИмяТаблицыШтрихкодыУпаковок,
		Штрихкоды.ИмяКолонкиШтрихкодУпаковки,
		?(ИмяДокумента = "ОтчетОРозничныхПродажах", "Штрихкоды.Возврат", "Истина"));
		
		Если Запрос.Выполнить().Пустой() Тогда
			Штрихкоды = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаЗаполненияВозвратаВОборотИСМПИзПрикладногоДокумента(ИмяДокумента, ТоварыСерии, Штрихкоды);
	
	// Заполним табличную часть.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Каждая единица отдельной строкой.
		Для К = 1 По Выборка.Количество Цикл
			НоваяСтрока = ДокументОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТипЗнч(ОсобенностьУчета) = Тип("Массив") Тогда
		ИнтеграцияИС.ЗаполнитьВидПродукцииПоТабличнойЧасти(ДокументОбъект);
	Иначе
		ДокументОбъект.ВидПродукции = ФильтрВидПродукции;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаЗаполненияВозвратаВОборотИСМПИзПрикладногоДокумента(ИмяДокумента, ТабличныеЧастиТоварыСерии, ТабличнаяЧастьШтрихкоды)
	
	ЕстьСтавкаНДС = ИмяДокумента = "ОтчетОРозничныхПродажах";
	
	ТоварыСерииПоТабличнымЧастям = Новый Массив;
	ЭтоПервыйЭлемент = Истина;
	
	Если ТабличнаяЧастьШтрихкоды <> Неопределено Тогда
		ТекстЗапроса = СтрШаблон(
		"ВЫБРАТЬ
		|	Штрихкоды.%3 КАК КодМаркировки,
		|	Штрихкоды.%3.Номенклатура КАК Номенклатура,
		|	Штрихкоды.%3.Характеристика КАК Характеристика,
		|	Неопределено КАК Серия,
		|	1 КАК Количество
		|ПОМЕСТИТЬ ТоварыКОформлению
		|ИЗ
		|	Документ.%1.%2 КАК Штрихкоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО Штрихкоды.%3.Номенклатура = СправочникНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратВОборотИСМП.Товары КАК ОформленныеШтрихкоды
		|		ПО ОформленныеШтрихкоды.Ссылка.ДокументОснование = &ДокументОснование
		|		И ОформленныеШтрихкоды.Ссылка <> &ЭтаСсылка
		|		И ОформленныеШтрихкоды.КодМаркировки = Штрихкоды.%3
		|		И ОформленныеШтрихкоды.Ссылка.Проведен
		|ГДЕ
		|	Штрихкоды.Ссылка = &ДокументОснование
		|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
		|	И ОформленныеШтрихкоды.КодМаркировки ЕСТЬ NULL
		|	И %4
		|;",
		ИмяДокумента,
		ТабличнаяЧастьШтрихкоды.ИмяТаблицыШтрихкодыУпаковок,
		ТабличнаяЧастьШтрихкоды.ИмяКолонкиШтрихкодУпаковки,
		?(ИмяДокумента = "ОтчетОРозничныхПродажах", "Штрихкоды.Возврат", "Истина"));
		
	Иначе
		Для Каждого ТоварыСерии Из ТабличныеЧастиТоварыСерии Цикл
		
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
			|	ТаблицаТовары.Характеристика    КАК Характеристика,
			|	Неопределено                    КАК Серия,
			|	СУММА(ТаблицаТовары.Количество) КАК Количество
			|ПОМЕСТИТЬ ТоварыСерии
			|ИЗ
			|	&ОписаниеДокументаТовары КАК ТаблицаТовары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
			|ГДЕ
			|	ТаблицаТовары.Ссылка = &ДокументОснование
			|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
			|	И ТаблицаТовары.Количество < 0
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаТовары.Номенклатура,
			|	ТаблицаТовары.Характеристика
			|;";
			Если ТоварыСерии.Серии <> "" Тогда
			ТекстЗапроса = 
				"ВЫБРАТЬ
				|	ТаблицаТовары.Номенклатура   КАК Номенклатура,
				|	ТаблицаТовары.Характеристика КАК Характеристика,
				|	Неопределено                 КАК Серия,
				|	ТаблицаТовары.Количество     КАК Количество
				|ПОМЕСТИТЬ ТоварыСерии
				|ИЗ
				|	&ОписаниеДокументаТовары КАК ТаблицаТовары
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
				|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
				|		ЛЕВОЕ СОЕДИНЕНИЕ &ОписаниеДокументаСерии КАК ТаблицаСерии
				|		ПО ТаблицаТовары.Номенклатура = ТаблицаСерии.Номенклатура
				|		И ТаблицаТовары.Характеристика = ТаблицаСерии.Характеристика
				|		И ТаблицаСерии.Ссылка = &ДокументОснование
				|ГДЕ
				|	ТаблицаТовары.Ссылка = &ДокументОснование
				|	И ТаблицаСерии.Ссылка ЕСТЬ NULL
				|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
				|	И ТаблицаТовары.Количество < 0
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ТаблицаСерии.Номенклатура,
				|	ТаблицаСерии.Характеристика,
				|	ТаблицаСерии.Серия,
				|	ТаблицаСерии.Количество
				|ИЗ
				|	&ОписаниеДокументаСерии КАК ТаблицаСерии
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
				|		(ВЫБРАТЬ
				|			ТаблицаТовары.Номенклатура      КАК Номенклатура,
				|			ТаблицаТовары.Характеристика    КАК Характеристика,
				|			СУММА(ТаблицаТовары.Количество) КАК Количество
				|		ИЗ
				|			&ОписаниеДокументаТовары КАК ТаблицаТовары
				|		ГДЕ
				|			ТаблицаТовары.Ссылка = &ДокументОснование
				|		СГРУППИРОВАТЬ ПО
				|			ТаблицаТовары.Номенклатура,
				|			ТаблицаТовары.Характеристика) КАК ТаблицаТовары
				|		ПО ТаблицаТовары.Номенклатура = ТаблицаСерии.Номенклатура
				|		И ТаблицаТовары.Характеристика = ТаблицаСерии.Характеристика
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
				|		ПО ТаблицаСерии.Номенклатура = СправочникНоменклатура.Ссылка
				|ГДЕ
				|	ТаблицаСерии.Ссылка = &ДокументОснование
				|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
				|	И ТаблицаСерии.Количество < 0
				|;";
			КонецЕсли;
			
			Если ЭтоПервыйЭлемент Тогда
				ЭтоПервыйЭлемент = Ложь;
			Иначе
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТоварыСерии", "");
			КонецЕсли;
			
			ОписаниеДокумента = СтрШаблон("Документ.%1", ИмяДокумента);
			Если ЗначениеЗаполнено(ТоварыСерии.Товары) Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", СтрШаблон("%1.%2", ОписаниеДокумента,ТоварыСерии.Товары));
			Иначе
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", ОписаниеДокумента);
			КонецЕсли;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОписаниеДокументаСерии", СтрШаблон("%1.%2", ОписаниеДокумента,ТоварыСерии.Серии));
			
			ТоварыСерииПоТабличнымЧастям.Добавить(ТекстЗапроса);
			
		КонецЦикла;
		
		ТекстЗапроса = СтрСоединить(ТоварыСерииПоТабличнымЧастям, "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|");
		
		ТекстЗапроса = ТекстЗапроса + "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО          КАК КодМаркировки,
		|	Товары.Номенклатура   КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Серия          КАК Серия,
		|	-Товары.Количество     КАК Количество
		|ПОМЕСТИТЬ ТоварыКОформлению
		|ИЗ
		|	ТоварыСерии КАК Товары
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО,
		|	ОформленныеТовары.Номенклатура,
		|	ОформленныеТовары.Характеристика,
		|	ОформленныеТовары.Серия,
		|	-1
		|ИЗ
		|	Документ.ВозвратВОборотИСМП.Товары КАК ОформленныеТовары
		|ГДЕ
		|	ОформленныеТовары.Ссылка.Проведен
		|	И ОформленныеТовары.Ссылка.ДокументОснование = &ДокументОснование
		|	И ОформленныеТовары.Ссылка <> &ЭтаСсылка
		|;";
		
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + СтрШаблон("
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.КодМаркировки     КАК КодМаркировки,
	|	ТоварыКОформлению.Номенклатура      КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика    КАК Характеристика,
	|	ТоварыКОформлению.Серия             КАК Серия,
	|	СУММА(ТоварыКОформлению.Количество) КАК Количество,
	|	ИСТИНА КАК Оплачен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.КассовыйЧек) КАК ВидПервичногоДокумента,
	|	ДокументОснование.Номер КАК НомерПервичногоДокумента,
	|	ДокументОснование.Дата КАК ДатаПервичногоДокумента
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению,
	|	Документ.%1 КАК ДокументОснование
	|	
	|ГДЕ
	|	ДокументОснование.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.КодМаркировки,
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия,
	|	ИСТИНА,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.КассовыйЧек),
	|	ДокументОснование.Номер,
	|	ДокументОснование.Дата
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|;
	|", ИмяДокумента);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьВозвратВОборотИСМПНаОснованииОтчетаОРозничныхПродажах(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка КАК ДокументОснование,
	|	ДокументСсылка.Организация КАК Организация,
	|	НЕ ДокументСсылка.Проведен КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВозвратВОборотПриРозничнойРеализации) КАК Операция
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование");
	
	ЗаполнитьШапкуВозвратВОборотИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(Новый Структура("Товары, Серии", "Товары", ""));
	ТабличнаяЧастьШтрихкоды = Новый Структура("ИмяТаблицыШтрихкодыУпаковок, ИмяКолонкиШтрихкодУпаковки", "АкцизныеМарки", "АкцизнаяМарка");
	ЗаполнитьТабличныеЧастиВозвратВОборотИСМП(ДокументОбъект, ДанныеЗаполнения, "ОтчетОРозничныхПродажах", ТабличныеЧасти, ТабличнаяЧастьШтрихкоды);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
