////////////////////////////////////////////////////////////////////////////////
// ОбщегоНазначенияРТВызовСервера содержит процедуры и функции 
// общего назначения для работы с конфигурацией.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область РаботаСДанными

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// Если доступа к реквизиту нет, возникнет исключение прав доступа.
// Если необходимо зачитать реквизит независимо от прав текущего пользователя,
// то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ЛюбаяСсылка - ссылка на объект метаданных для получения значения реквизита.
//  ИмяРеквизита - Строка - наименование реквизита строкой.
// 
// Возвращаемое значение:
//  Произвольный - зависит от типа значения прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

// Возвращает структуру значений реквизитов объекта.
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - ссылка на объект метаданных для получения значения реквизита.
//  СтруктураПолей - Структура - структура реквизитов объекта метаданных.
//
// Возвращаемое значение:
//  Структура - структура значений реквизитов объекта.
//
Функция ЗначенияРеквизитовОбъекта(Ссылка, СтруктураПолей) Экспорт
	
	Возврат ОбщегоНазначенияРТ.ЗначенияРеквизитовОбъекта(Ссылка, СтруктураПолей);
	
КонецФункции

// Получает настройку права пользователя "ОткрыватьРМКПриЗапускеПрограммы".
//
// Возвращаемое значение:
//  Булево - признак открытия РМК при запуске программы.
//
Функция ОткрыватьРМКПриЗапускеПрограммы() Экспорт
	
	ПараметрыОткрытияРМК = Новый Структура;
	ПараметрыОткрытияРМК.Вставить("ОткрыватьРМК", Ложь);
	
	МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
	СеансЗапущенБезРазделителей = МодульРаботаВМоделиСервиса.СеансЗапущенБезРазделителей();
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	ТекущийСеансЗаблокирован = Ложь;
	Если РазделениеВключено И НЕ СеансЗапущенБезРазделителей Тогда
		МодульТарификация = ОбщегоНазначения.ОбщийМодуль("Тарификация");
		ТекущийСеансЗаблокирован = МодульТарификация.ТекущийСеансЗаблокирован();
	КонецЕсли;
	
	Если РазделениеВключено И (СеансЗапущенБезРазделителей ИЛИ ТекущийСеансЗаблокирован) Тогда
		Возврат ПараметрыОткрытияРМК;
	КонецЕсли;
	
	ПравоДоступаРМКУправляемыйРежим = ПравоДоступа("Использование", Метаданные.Обработки.РМКУправляемыйРежим);
	
	ИспользоватьНовыйРМК = ПолучитьФункциональнуюОпцию("ИспользоватьНовоеРМК");
	
	Пользователь = Пользователи.ТекущийПользователь();
	ОткрыватьРМКПриЗапуске = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
		ПланыВидовХарактеристик.ПраваПользователей.ОткрыватьРМКПриЗапускеПрограммы,
		Ложь,
		Пользователь);
		
	Если ОткрыватьРМКПриЗапуске Тогда
		
		Если ПравоДоступаРМКУправляемыйРежим И Не ИспользоватьНовыйРМК Тогда
			ПараметрыОткрытияРМК.ОткрыватьРМК = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыОткрытияРМК;
	
КонецФункции

// Устанавливает значение экспортных переменных модуля приложения.
//
// Параметры:
//  ИмяПараметра - Строка - имя параметра для установки.
//  Кэш - Структура - значение кэшированных переменных.
//  ЗначениеПараметра - Произвольный - новое значение для установки.
//  ОбновлятьВоВсехКэшах - Булево - признак обновления переменной во всех кэшах.
//
Процедура УстановитьЗначениеПеременной(ИмяПараметра, Кэш, ЗначениеПараметра, ОбновлятьВоВсехКэшах = Ложь) Экспорт
	
	ОбщегоНазначенияРТ.УстановитьЗначениеПеременной(ИмяПараметра, Кэш, ЗначениеПараметра, ОбновлятьВоВсехКэшах);
	
КонецПроцедуры

// Возвращает склонение в выбранном падеже.
//
// Параметры:
//  ФИО		- Строка - Строка, в которой содержится ФИО для склонения.
//  Падеж 	- Число - падеж, в который необходимо просклонять представление объекта.
//							1 - Именительный.
//							2 - Родительный.
//							3 - Дательный.
//							4 - Винительный.
//							5 - Творительный.
//							6 - Предложный.
//  Объект 	- ОбъектСклонения - Ссылка на объект, реквизит которого склоняется.
//  Пол		- Число - Число - пол физического лица, 
//							1 - мужской, 
//							2 - женский.
//
// Возвращаемое значение:
//  Строка - Результат склонения ФИО в падеже.
//
Функция ПросклонятьФИО(ФИО, Падеж, Пол = Неопределено) Экспорт
	
	// Функция не обрабатывает пустые строки.
	Если ПустаяСтрока(ФИО) Тогда
		Возврат ФИО;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоLinuxКлиент() Тогда
		СклонениеФИО = ФИО;
	Иначе
		СклонениеФИО = СклонениеПредставленийОбъектов.ПросклонятьФИО(ФИО, Падеж, Неопределено, Пол);
	КонецЕсли;
	
	Возврат СклонениеФИО;
	
КонецФункции

// Возвращает Истина, если сервер запущен на Linux.
//
// Возвращаемое значение:
//  Булево - признак использования Linux сервера.
//
Функция ЭтоLinuxСервер() Экспорт
	Возврат ОбщегоНазначенияРТКлиентСерверПовтИсп.ЭтоLinuxСервер();
КонецФункции

// Возвращает именительный падеж по переданному реквизиту.
//
// Параметры:
//  ФизЛицо - Строка - наименование физического лица.
//
// Возвращаемое значение:
//  Строка - именительный падеж по реквизиту.
//
Функция ИменительныйПадежПоРеквизиту(ФизЛицо) Экспорт
	
	ФИОФизЛицаИП = "";
	Если Не ТипЗнч(ФизЛицо) = Тип("Строка")Тогда
		ФизЛицоФИО = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(, Новый Структура("ФизЛицо", ФизЛицо)); 
		ФИОФизЛицаИП = ФизЛицоФИО.Фамилия + " " + ФизЛицоФИО.Имя + " " + ФизЛицоФИО.Отчество;

		Если СокрЛП(ФИОФизЛицаИП) = "" Тогда
			ФИОФизЛицаИП = ФизЛицо.Наименование;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ФизЛицо) = Тип("Строка") Тогда
		ФИОФизЛицаИП = ФизЛицо;
	КонецЕсли;
	
	Возврат ФИОФизЛицаИП
	
КонецФункции

// Изменение текущего магазина после записи пользователя.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь для изменения.
//
// Возвращаемое значение:
//  Булево - результат выполнения функции.
//
Функция ТекущийПользовательИзменен(Пользователь) Экспорт
	
	Возврат ОбщегоНазначенияРТ.ТекущийПользовательИзменен(Пользователь);
	
КонецФункции

// Получает последний порядковый номер документа (чека) для КассыККМ.
//
// Параметры:
//  Ссылка - ДокументСсылка.ЧекККМ - ссылка на документ для получения номера.
// 
// Возвращаемое значение:
//  Число - номер последнего документа.
//
Функция ПоследнийНомерДокументаКассыККМ(Ссылка) Экспорт

	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(МАКСИМУМ(ОплатаОтПокупателяПлатежнойКартой.НомерЧекаККМ), 0) КАК НомерЧекаККМ
	|ПОМЕСТИТЬ ТаблицаПоследнихДокументов
	|ИЗ
	|	Документ.ОплатаОтПокупателяПлатежнойКартой КАК ОплатаОтПокупателяПлатежнойКартой
	|ГДЕ
	|	ОплатаОтПокупателяПлатежнойКартой.КассаККМ = &КассаККМ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(РегистрацияБезналичнойОплаты.НомерЧекаККМ), 0)
	|ИЗ
	|	Документ.РегистрацияБезналичнойОплаты КАК РегистрацияБезналичнойОплаты
	|ГДЕ
	|	РегистрацияБезналичнойОплаты.КассаККМ = &КассаККМ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ПриходныйКассовыйОрдер.НомерЧекаККМ), 0)
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.КассаККМ = &КассаККМ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(РасходныйКассовыйОрдер.НомерЧекаККМ), 0)
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.КассаККМ = &КассаККМ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ЧекККМ.НомерЧекаККМ), 0)
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.КассаККМ = &КассаККМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ТаблицаПоследнихДокументов.НомерЧекаККМ), 0) КАК НомерЧекаККМ
	|ПОМЕСТИТЬ ТаблицаПоследнихНомеров
	|ИЗ
	|	ТаблицаПоследнихДокументов КАК ТаблицаПоследнихДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоследнихНомеров.НомерЧекаККМ КАК НомерЧекаККМ
	|ИЗ
	|	ТаблицаПоследнихНомеров КАК ТаблицаПоследнихНомеров
	|ГДЕ
	|	ТаблицаПоследнихНомеров.НомерЧекаККМ <> 0
	|");
	Запрос.УстановитьПараметр("КассаККМ", Ссылка);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НомерЧекаККМ = Выборка.НомерЧекаККМ + 1;
		КонецЦикла; 
	КонецЕсли; 

	Возврат НомерЧекаККМ;
	
КонецФункции

// Возвращает функциональную опцию по имени.
//
// Параметры:
//  ИмяОпции - Строка - имя функциональной опции.
//
// Возвращаемое значение:
//  Произвольный - значение функциональной опции.
//
Функция ФункциональнаяОпция(ИмяОпции) Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию(ИмяОпции)
	
КонецФункции

// Возвращает значение константы по имени.
//
// Параметры:
//  ИмяКонстанты - Строка - имя константы.
//
// Возвращаемое значение:
//  Произвольный - значение константы.
//
Функция ЗначениеКонстанты(ИмяКонстанты) Экспорт
	
	Возврат Константы[ИмяКонстанты].Получить();
	
КонецФункции

// Возвращает признак равенства организаций с учетом обособленных подразделений
// Параметры:
//  Организация1, Организация2 - СправочникСсылка.Организации - сравниваемые организации
// 
// Возвращаемое значение:
//  Булево 
//
Функция ОрганизацииОднородны(Организация1, Организация2) Экспорт
	
	Возврат ОбщегоНазначенияРТ.ОрганизацииОднородны(Организация1, Организация2);
	
КонецФункции // ОрганизацииОднородны()

#КонецОбласти

#Область ДоступКОбъектам

// Проверяет доступ к реквизиту объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - объект доступ к реквизиту которого проверяется.
//  ИмяРеквизита - Строка - имя реквизита строкой.
//  ИмяТаблицыЗначений - Строка - имя таблицы значений строкой.
//
// Возвращаемое значение:
//  Булево - признак доступности реквизита.
// 
Функция РеквизитДоступен(Объект, ИмяРеквизита, ИмяТаблицыЗначений) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоступныеЗначенияРеквизита.Ссылка
	|ИЗ
	|	" + ИмяТаблицыЗначений + " КАК ДоступныеЗначенияРеквизита";
	
	Результат = Запрос.Выполнить();
	МассивРазрешенныхЗначенийРеквизита = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	УстановитьПривилегированныйРежим(Истина);
	ЗначениеРеквизита = Объект[ИмяРеквизита];
	
	Возврат МассивРазрешенныхЗначенийРеквизита.Найти(ЗначениеРеквизита) <> Неопределено;
	
КонецФункции

// Возвращает на клиент значение параметра сеанса по имени.
//
// Параметры:
//  ИмяПараметра - Строка - имя параметра сеанса строкой.
//
// Возвращаемое значение:
//  Произвольный - значение параметра сеанса.
//
Функция ЗначениеПараметраСеанса(ИмяПараметра) Экспорт
	
	Возврат ПараметрыСеанса[ИмяПараметра]
	
КонецФункции

// Устанавливает параметр сеанса по имени и значению, переданных с клиента.
//
// Параметры:
//  ИмяПараметра - Строка - имя параметра сеанса строкой.
//  ЗначениеПараметра - Произвольный - значение параметра сеанса для установки.
//
Процедура УстановитьЗначениеПараметраСеанса(ИмяПараметра, ЗначениеПараметра) Экспорт
	
	ПараметрыСеанса[ИмяПараметра] = ЗначениеПараметра;
	
КонецПроцедуры

#КонецОбласти

#Область ПеренаправлениеВызововБСП

// Возвращает структуру, содержащую ОбщиеНастройки и ПерсональныеНастройки\
//
Функция НастройкиРаботыСФайлами() Экспорт
	
	Возврат РаботаСФайлами.НастройкиРаботыСФайлами();
	
КонецФункции

// Удаляет набор записей в регистре по переданным значениям структуры.
//
// Параметры:
//  СтруктураЗаписи - Структура - структура, по значениям которой необходимо удалить набор записей.
//  ИмяРегистра     - Строка - имя регистра сведений, в котором необходимо удалить набор записей.
//  Загрузка        - Булево - признак загрузки.
// 
Процедура УдалитьНаборЗаписейВРегистреСведений(СтруктураЗаписи, ИмяРегистра, Загрузка = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначенияРТ.УдалитьНаборЗаписейВРегистреСведений(СтруктураЗаписи, ИмяРегистра, Загрузка);
	
КонецПроцедуры

// Проверяет, является ли текущий или указанный пользователь полноправным.
// 
// Полноправным считается пользователь, который
// а) при не пустом списке пользователей информационной базы:
// - в локальном режиме работы (без разделения данных) имеет роль ПолныеПрава и
//   роль для администрирования системы,
// - в модели сервиса (с разделением данных) имеет роль ПолныеПрава;
// б) при пустом списке пользователей информационной базы
//    основная роль конфигурации не задана или ПолныеПрава.
//
// Параметры:
//  Пользователь - Неопределено - проверяется текущий пользователь ИБ;
//                 СправочникСсылка.Пользователи,
//                 СправочникСсылка.ВнешниеПользователи - осуществляется поиск
//                    пользователя ИБ по уникальному идентификатору,
//                    заданному в реквизите ИдентификаторПользователяИБ.
//                    Прим.: если пользователь ИБ не найден, возвращается Ложь.
//                 ПользовательИнформационнойБазы - проверяется указанный
//                    пользователь ИБ.
//
//  ПроверятьПраваАдминистрированияСистемы - Булево - если задано Истина, тогда
//                 проверяется наличие роли для администрирования системы.
//                 Начальное значение: Ложь.
//
//  УчитыватьПривилегированныйРежим - Булево - если задано Истина, тогда
//                 функция возвращает Истина, когда установлен привилегированный режим.
//                 Начальное значение: Истина.
//
// Возвращаемое значение:
//  Булево - является ли пользователь полноправным.
//
Функция ЭтоПолноправныйПользователь(Пользователь = Неопределено,
                                    ПроверятьПраваАдминистрированияСистемы = Ложь,
                                    УчитыватьПривилегированныйРежим = Истина) Экспорт
	
	Возврат Пользователи.ЭтоПолноправныйПользователь(Пользователь,
													 ПроверятьПраваАдминистрированияСистемы,
													 УчитыватьПривилегированныйРежим)
	
КонецФункции

// Переносит строку из запроса в Структуру.
//
// Параметры:
//  РезультатЗапроса - РезультатЗапроса - выборка запроса.
//  СтрокаВыборки - Структура - строка выборки запроса для переноса.
//  СтруктураЭлемента - Структура - структура элемента для переноса строка.
//
Процедура ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, СтрокаВыборки, СтруктураЭлемента) Экспорт
	
	ОбщегоНазначенияРТ.ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, СтрокаВыборки, СтруктураЭлемента);
	
КонецПроцедуры

#КонецОбласти

// Адрес магазина.
//
// Параметры:
//  Магазин - СправочникСсылка.Магазины - магазин для получения адреса.
//
Функция АдресМагазина(Магазин) Экспорт
	
	Возврат ОбщегоНазначенияРТ.АдресМагазина(Магазин);
	
КонецФункции

// Возвращает Истина, если персональные данные физлица текущего пользователя были скрыты.
//
// Возвращаемое значение:
//  Булево - признак скрытых персональных данных пользователя.
//
Функция ФизЛицоПользователяСоСкрытымиПерсональнымиДанными() Экспорт
	
	Результат = Ложь;
	
	Пользователь = ОбщегоНазначенияРТ.ПользовательСУчетомИзмененныхПрав();
	ФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизическоеЛицо");
	
	Если ЗначениеЗаполнено(ФизЛицо) И ЗащитаПерсональныхДанных.ЭтоОбъектСоСкрытымиПерсональнымиДанными(ФизЛицо) Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает ФИО физлица, указанного в текущем пользователе, с учетом замены прав в РМК.
//
// Возвращаемое значение:
//  Строка - ФИО пользователя.
//
Функция ФИОФизЛицаПользователяСУчетомИзмененныхПрав() Экспорт
	
	Пользователь = ОбщегоНазначенияРТ.ПользовательСУчетомИзмененныхПрав();
	
	ФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизическоеЛицо");
	
	Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат "";
	КонецЕсли;
	
	СтруктураФИО = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(, Новый Структура("ФизЛицо", ФизЛицо)); 
	
	СтрокаФИО = "";
	СтрокаФИО = СтрокаФИО + ?(СтрокаФИО = "", "", " ") + СтруктураФИО.Фамилия;
	СтрокаФИО = СтрокаФИО + ?(СтрокаФИО = "" ИЛИ СтруктураФИО.Имя = "", "", " ") + СтруктураФИО.Имя;
	СтрокаФИО = СтрокаФИО + ?(СтрокаФИО = "" ИЛИ СтруктураФИО.Отчество = "", "", " ") + СтруктураФИО.Отчество;
	
	Возврат СтрокаФИО;
	
КонецФункции

// Возвращает ИНН физлица, указанного в текущем пользователе, с учетом замены прав в РМК.
//
// Возвращаемое значение:
//  Строка - ИНН физического лица.
//
Функция ИННФизЛицаПользователяСУчетомИзмененныхПрав() Экспорт
	
	Пользователь = ОбщегоНазначенияРТ.ПользовательСУчетомИзмененныхПрав();
	
	ФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизическоеЛицо");
	
	Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат "";
	КонецЕсли;
	
	ФизЛицоИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизЛицо, "ИНН");
	
	Возврат ФизЛицоИНН;
	
КонецФункции

// Возвращает реквизиты физлица, указанного в текущем пользователе, с учетом замены прав в РМК.
//
// Возвращаемое значение:
//  Стурктура.
//
Функция РеквизитыФизЛицаПользователяСУчетомИзмененныхПрав() Экспорт
	
	Пользователь = ОбщегоНазначенияРТ.ПользовательСУчетомИзмененныхПрав();
	ФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизическоеЛицо");
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Наименование");
	СтруктураРеквизитов.Вставить("ИНН");
	
	Если ЗначениеЗаполнено(ФизЛицо) Тогда
		РеквизитыКассир = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФизЛицо, СтруктураРеквизитов);
	КонецЕсли;
	
	Возврат РеквизитыКассир;
	
КонецФункции

// Возвращает контрагента розничного покупателя
// ВозвращаемоеЗначение:
//  СправочникСсылка.Контрагенты - контрагент Розничный покупатель.
Функция РозничныйПокупатель() Экспорт
	
	Возврат ОбщегоНазначенияРТ.РозничныйПокупатель();
	
КонецФункции

Функция ПолучитьДанныеШтрихкода(Штрихкод) Экспорт

	Возврат РаботаСНоменклатуройРТ.ПолучитьДанныеШтрихкода(Штрихкод);
	
КонецФункции

Процедура УстановитьРабочийСтолПользователя(ТребуетсяОбновлениеИнтерфейса) Экспорт
	ОбщегоНазначенияРТ.УстановитьРабочийСтолПользователя(ТребуетсяОбновлениеИнтерфейса);
КонецПроцедуры

Процедура УстановитьСтандартныйИнтерфейсПриложения() Экспорт
	ОбщегоНазначенияРТ.УстановитьСтандартныйИнтерфейсПриложения();
КонецПроцедуры

// Проверяет значение констант запуска
//
// Параметры:
//  ОрганизацииСЕНВД - Булево - наличие организаций с ЕНВД.
//
Процедура ПроверитьЗначениеКонстантЗапуска(ОрганизацииСЕНВД) Экспорт
	
	ОрганизацииСЕНВД = ЗначениеНастроекВызовСервера.ПолучитьЗначениеКонстанты("ЕНВДВОрганизациях");
	
КонецПроцедуры

Процедура ЗагрузитьКлассификаторБанков() Экспорт
	
	Обработки.ЗагрузкаКлассификатораБанков.ЗагрузитьКлассификаторБанков();
	
КонецПроцедуры

#КонецОбласти