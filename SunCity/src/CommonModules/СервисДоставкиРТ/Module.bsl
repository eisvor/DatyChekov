
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Сервис доставки (Розница)".
// ОбщийМодуль.СервисДоставкиРТ.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ЗаполнениеПараметровОтбора

// Заполняет параметры отбора для формы выбора адреса организации.
//
// Параметры:
//  ПараметрыОтбора - Структура - параметры отбора для формы выбора.
//  Организация     - ОпределяемыйТип.ОрганизацияСервисДоставки - ссылка на организацию.
//
Процедура ЗаполнитьПараметрыОтбораАдресаОрганизации(ПараметрыОтбора, Организация) Экспорт
	
КонецПроцедуры

// Заполняет параметры отбора для формы выбора адреса контрагента.
//
// Параметры:
//  ПараметрыОтбора - Структура - параметры отбора для формы выбора.
//  Контрагент      - ОпределяемыйТип.КонтрагентСервисДоставки - ссылка на контрагента.
//
Процедура ЗаполнитьПараметрыОтбораАдресаКонтрагента(ПараметрыОтбора, Контрагент) Экспорт
	
	ПараметрыОтбора.Вставить("Контрагент", Контрагент);
КонецПроцедуры

// Заполняет параметры отбора для формы выбора контактного лица организации.
//
// Параметры:
//  ПараметрыОтбора - Структура - параметры отбора для формы выбора.
//  Организация     - ОпределяемыйТип.ОрганизацияСервисДоставки - ссылка на организацию.
//
Процедура ЗаполнитьПараметрыОтбораКонтактногоЛицаОрганизации(ПараметрыОтбора, Организация) Экспорт
	
КонецПроцедуры

// Заполняет параметры отбора для формы выбора контактного лица контрагента.
//
// Параметры:
//  ПараметрыОтбора - Структура - параметры отбора для формы выбора.
//  Контрагент      - ОпределяемыйТип.КонтрагентСервисДоставки - ссылка на контрагента.
//
Процедура ЗаполнитьПараметрыОтбораКонтактногоЛицаКонтрагента(ПараметрыОтбора, Контрагент) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПараметровДаннымиИзУчетнойСистемы

// Заполняет параметры заказа на доставку данными из объекта-основания заказа.
//
// Параметры:
//  Параметры - Структура - см. СервисДоставки.ПараметрыЗаказаНаДоставку()
//
Процедура ЗаполнитьПараметрыЗаказаНаДоставку(Параметры) Экспорт
	
	ДокументыОснования = Параметры.ДокументыОснования;
	
	Для Каждого ДокументОснование Из ДокументыОснования Цикл
		
		ТекстЗапросаПоШапкеДокументаОснования = "";
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			
			ТекстЗапросаПоШапкеДокументаОснования = "ВЫБРАТЬ
			|	ЗаказКлиента.Ссылка КАК ДокументОснование,
			|	ОрганизацииБизнесСеть.Организация КАК ОрганизацияБизнесСетиСсылка,
			|	1 КАК ФормаОплаты,
			|	"""" КАК ГрузоперевозчикИдентификатор,
			|	"""" КАК ГрузоперевозчикНаименование,
			|	"""" КАК ГрузоперевозчикТелефон,
			|	"""" КАК ТарифНаименование,
			|	"""" КАК ТарифИдентификатор,
			|	"""" КАК ТарифНеГабарит,
			|	ЗаказКлиента.ЖелаемаяДатаПродажи КАК ДатаОтгрузки,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаДоставки,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ВремяОтгрузкиС,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ВремяОтгрузкиПо,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ВремяДоставкиС,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ВремяДоставкиПо,
			|	1 КАК СпособОтгрузки,
			|	1 КАК СпособДоставки,
			|	ЗаказКлиента.Организация КАК ОтправительКонтрагентСсылка,
			|	ЗаказКлиента.Организация.ИНН КАК ОтправительКонтрагентИНН,
			|	ЗаказКлиента.Организация.КПП КАК ОтправительКонтрагентКПП,
			|	ЗаказКлиента.Организация.НаименованиеПолное КАК ОтправительКонтрагентНаименование,
			|	ВЫБОР
			|		КОГДА ЗаказКлиента.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
			|			ТОГДА 1
			|		КОГДА ЗаказКлиента.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
			|			ТОГДА 2
			|		КОГДА ЗаказКлиента.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
			|			ТОГДА 3
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ОтправительКонтрагентЮрФизЛицо,
			|	ИСТИНА КАК ОтправительКонтрагентЭтоОрганизация,
			|	ЗаказКлиента.Организация КАК ОтправительКонтрагентЮридическийАдресВладелец,
			|	ЗаказКлиента.Магазин КАК ОтправительАдресВладелец,
			|	ЗаказКлиента.Магазин.Наименование КАК ОтправительАдресВладелецНаименование,
			|	"""" КАК ОтправительАдресПредставление,
			|	"""" КАК ОтправительАдресЗначение,
			|	ЕСТЬNULL(ОтветственныеЛица.ФизическоеЛицо, ЗаказКлиента.Продавец) КАК ОтправительКонтактноеЛицоСсылка,
			|	ЕСТЬNULL(ОтветственныеЛица.ФизическоеЛицо.Наименование, ЗаказКлиента.Продавец.Наименование) КАК ОтправительКонтактноеЛицоНаименование,
			|	"""" КАК ОтправительКонтактноеЛицоТелефонПредставление,
			|	"""" КАК ОтправительКонтактноеЛицоТелефонЗначение,
			|	ЗаказКлиента.Контрагент КАК ПолучательКонтрагентСсылка,
			|	ЗаказКлиента.Контрагент.ИНН КАК ПолучательКонтрагентИНН,
			|	ЗаказКлиента.Контрагент.КПП КАК ПолучательКонтрагентКПП,
			|	ВЫБОР
			|		КОГДА ЗаказКлиента.Контрагент.НаименованиеПолное = """"
			|			ТОГДА ЗаказКлиента.Контрагент.Наименование
			|		ИНАЧЕ ЗаказКлиента.Контрагент.НаименованиеПолное
			|	КОНЕЦ КАК ПолучательКонтрагентНаименование,
			|	ВЫБОР
			|		КОГДА ЗаказКлиента.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
			|			ТОГДА 1
			|		КОГДА ЗаказКлиента.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
			|			ТОГДА 2
			|		КОГДА ЗаказКлиента.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
			|			ТОГДА 3
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ПолучательКонтрагентЮрФизЛицо,
			|	ЛОЖЬ КАК ПолучательКонтрагентЭтоОрганизация,
			|	ЗаказКлиента.Контрагент КАК ПолучательКонтрагентЮридическийАдресВладелец,
			|	ЗаказКлиента.Контрагент КАК ПолучательАдресВладелец,
			|	ЗаказКлиента.Контрагент.Наименование КАК ПолучательАдресВладелецНаименование,
			|	ЗаказКлиента.АдресДоставки КАК ПолучательАдресПредставление,
			|	"""" КАК ПолучательАдресЗначенияПолей,
			|	"""" КАК ПолучательАдресЗначение,
			|	ЗаказКлиента.Контрагент.ФизЛицо КАК ПолучательКонтактноеЛицоСсылка,
			|	ЗаказКлиента.Контрагент.ФизЛицо.Наименование КАК ПолучательКонтактноеЛицоНаименование,
			|	"""" КАК ПолучательКонтактноеЛицоТелефонПредставление,
			|	"""" КАК ПолучательКонтактноеЛицоТелефонЗначение,
			|	ЗаказКлиента.Организация КАК ПлательщикКонтрагентСсылка,
			|	ЗаказКлиента.Организация.ИНН КАК ПлательщикКонтрагентИНН,
			|	ЗаказКлиента.Организация.КПП КАК ПлательщикКонтрагентКПП,
			|	ЗаказКлиента.Организация.НаименованиеПолное КАК ПлательщикКонтрагентНаименование,
			|	ВЫБОР
			|		КОГДА ЗаказКлиента.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
			|			ТОГДА 1
			|		КОГДА ЗаказКлиента.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
			|			ТОГДА 2
			|		КОГДА ЗаказКлиента.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
			|			ТОГДА 3
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ПлательщикКонтрагентЮрФизЛицо,
			|	ИСТИНА КАК ПлательщикКонтрагентЭтоОрганизация,
			|	ЗаказКлиента.Организация КАК ПлательщикКонтрагентЮридическийАдресВладелец,
			|	ЗаказКлиента.Продавец КАК ПлательщикКонтактноеЛицоСсылка,
			|	ЗаказКлиента.Продавец.Наименование КАК ПлательщикКонтактноеЛицоНаименование,
			|	"""" КАК ПлательщикКонтактноеЛицоТелефонПредставление,
			|	"""" КАК ПлательщикКонтактноеЛицоТелефонЗначение,
			|	1 КАК ПлательщикРоль
			|ИЗ
			|	Документ.ЗаказПокупателя КАК ЗаказКлиента
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
			|		ПО ЗаказКлиента.Организация = ОрганизацииБизнесСеть.Организация
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&Период, ) КАК ОтветственныеЛица
			|		ПО ЗаказКлиента.Организация = ОтветственныеЛица.СтруктурнаяЕдиница
			|			И (ОтветственныеЛица.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Логист))
			|ГДЕ
			|	ЗаказКлиента.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(Упаковки.Вес, Товары.Номенклатура.Вес) * ВЫБОР
			|		КОГДА Упаковки.Вес ЕСТЬ NULL
			|			ТОГДА Товары.Количество
			|		ИНАЧЕ Товары.КоличествоУпаковок
			|	КОНЕЦ КАК Вес
			|ИЗ
			|	Документ.ЗаказПокупателя.Товары КАК Товары
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК Упаковки
			|		ПО (Упаковки.Ссылка = Товары.Упаковка)
			|ГДЕ
			|	Товары.Ссылка = &Ссылка
			|ИТОГИ
			|	СУММА(Вес)
			|ПО
			|	ОБЩИЕ";
			
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЧекККМ") Тогда
			
			ТекстЗапросаПоШапкеДокументаОснования = "ВЫБРАТЬ
			|	ЗаказКлиента.Ссылка КАК ДокументОснование,
			|	ОрганизацииБизнесСеть.Организация КАК ОрганизацияБизнесСетиСсылка,
			|	1 КАК ФормаОплаты,
			|	"""" КАК ГрузоперевозчикИдентификатор,
			|	"""" КАК ГрузоперевозчикНаименование,
			|	"""" КАК ГрузоперевозчикТелефон,
			|	"""" КАК ТарифНаименование,
			|	"""" КАК ТарифИдентификатор,
			|	"""" КАК ТарифНеГабарит,
			|	ДОБАВИТЬКДАТЕ(ЗаказКлиента.Дата, ДЕНЬ, 1) КАК ДатаОтгрузки,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаДоставки,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ВремяОтгрузкиС,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ВремяОтгрузкиПо,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ВремяДоставкиС,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ВремяДоставкиПо,
			|	1 КАК СпособОтгрузки,
			|	1 КАК СпособДоставки,
			|	ЗаказКлиента.Организация КАК ОтправительКонтрагентСсылка,
			|	ЗаказКлиента.Организация.ИНН КАК ОтправительКонтрагентИНН,
			|	ЗаказКлиента.Организация.КПП КАК ОтправительКонтрагентКПП,
			|	ЗаказКлиента.Организация.НаименованиеПолное КАК ОтправительКонтрагентНаименование,
			|	ВЫБОР
			|		КОГДА ЗаказКлиента.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
			|			ТОГДА 1
			|		КОГДА ЗаказКлиента.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
			|			ТОГДА 2
			|		КОГДА ЗаказКлиента.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
			|			ТОГДА 3
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ОтправительКонтрагентЮрФизЛицо,
			|	ИСТИНА КАК ОтправительКонтрагентЭтоОрганизация,
			|	ЗаказКлиента.Организация КАК ОтправительКонтрагентЮридическийАдресВладелец,
			|	ЗаказКлиента.Магазин КАК ОтправительАдресВладелец,
			|	ЗаказКлиента.Магазин.Наименование КАК ОтправительАдресВладелецНаименование,
			|	"""" КАК ОтправительАдресПредставление,
			|	"""" КАК ОтправительАдресЗначение,
			|	ЕСТЬNULL(ОтветственныеЛица.ФизическоеЛицо, ЗаказКлиента.Продавец) КАК ОтправительКонтактноеЛицоСсылка,
			|	ЕСТЬNULL(ОтветственныеЛица.ФизическоеЛицо.Наименование, ЗаказКлиента.Продавец.Наименование) КАК ОтправительКонтактноеЛицоНаименование,
			|	"""" КАК ОтправительКонтактноеЛицоТелефонПредставление,
			|	"""" КАК ОтправительКонтактноеЛицоТелефонЗначение,
			|	ЗаказКлиента.Контрагент КАК ПолучательКонтрагентСсылка,
			|	ЗаказКлиента.Контрагент.ИНН КАК ПолучательКонтрагентИНН,
			|	ЗаказКлиента.Контрагент.КПП КАК ПолучательКонтрагентКПП,
			|	ВЫБОР
			|		КОГДА ЗаказКлиента.Контрагент.НаименованиеПолное = """"
			|			ТОГДА ЗаказКлиента.Контрагент.Наименование
			|		ИНАЧЕ ЗаказКлиента.Контрагент.НаименованиеПолное
			|	КОНЕЦ КАК ПолучательКонтрагентНаименование,
			|	ВЫБОР
			|		КОГДА ЗаказКлиента.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
			|			ТОГДА 1
			|		КОГДА ЗаказКлиента.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
			|			ТОГДА 2
			|		КОГДА ЗаказКлиента.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
			|			ТОГДА 3
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ПолучательКонтрагентЮрФизЛицо,
			|	ЛОЖЬ КАК ПолучательКонтрагентЭтоОрганизация,
			|	ЗаказКлиента.Контрагент КАК ПолучательКонтрагентЮридическийАдресВладелец,
			|	ЗаказКлиента.Контрагент КАК ПолучательАдресВладелец,
			|	ЗаказКлиента.Контрагент.Наименование КАК ПолучательАдресВладелецНаименование,
			|	"""" КАК ПолучательАдресПредставление,
			|	"""" КАК ПолучательАдресЗначенияПолей,
			|	"""" КАК ПолучательАдресЗначение,
			|	ЗаказКлиента.Контрагент.ФизЛицо КАК ПолучательКонтактноеЛицоСсылка,
			|	ЗаказКлиента.Контрагент.ФизЛицо.Наименование КАК ПолучательКонтактноеЛицоНаименование,
			|	"""" КАК ПолучательКонтактноеЛицоТелефонПредставление,
			|	"""" КАК ПолучательКонтактноеЛицоТелефонЗначение,
			|	ЗаказКлиента.Организация КАК ПлательщикКонтрагентСсылка,
			|	ЗаказКлиента.Организация.ИНН КАК ПлательщикКонтрагентИНН,
			|	ЗаказКлиента.Организация.КПП КАК ПлательщикКонтрагентКПП,
			|	ЗаказКлиента.Организация.НаименованиеПолное КАК ПлательщикКонтрагентНаименование,
			|	ВЫБОР
			|		КОГДА ЗаказКлиента.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
			|			ТОГДА 1
			|		КОГДА ЗаказКлиента.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
			|			ТОГДА 2
			|		КОГДА ЗаказКлиента.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
			|			ТОГДА 3
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ПлательщикКонтрагентЮрФизЛицо,
			|	ИСТИНА КАК ПлательщикКонтрагентЭтоОрганизация,
			|	ЗаказКлиента.Организация КАК ПлательщикКонтрагентЮридическийАдресВладелец,
			|	ЗаказКлиента.Продавец КАК ПлательщикКонтактноеЛицоСсылка,
			|	ЗаказКлиента.Продавец.Наименование КАК ПлательщикКонтактноеЛицоНаименование,
			|	"""" КАК ПлательщикКонтактноеЛицоТелефонПредставление,
			|	"""" КАК ПлательщикКонтактноеЛицоТелефонЗначение,
			|	1 КАК ПлательщикРоль
			|ИЗ
			|	Документ.ЧекККМ КАК ЗаказКлиента
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
			|		ПО ЗаказКлиента.Организация = ОрганизацииБизнесСеть.Организация
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&Период, ) КАК ОтветственныеЛица
			|		ПО ЗаказКлиента.Организация = ОтветственныеЛица.СтруктурнаяЕдиница
			|			И (ОтветственныеЛица.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Логист))
			|ГДЕ
			|	ЗаказКлиента.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(Упаковки.Вес, Товары.Номенклатура.Вес) * ВЫБОР
			|		КОГДА Упаковки.Вес ЕСТЬ NULL
			|			ТОГДА Товары.Количество
			|		ИНАЧЕ Товары.КоличествоУпаковок
			|	КОНЕЦ КАК Вес
			|ИЗ
			|	Документ.ЧекККМ.Товары КАК Товары
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК Упаковки
			|		ПО (Упаковки.Ссылка = Товары.Упаковка)
			|ГДЕ
			|	Товары.Ссылка = &Ссылка
			|ИТОГИ
			|	СУММА(Вес)
			|ПО
			|	ОБЩИЕ";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекстЗапросаПоШапкеДокументаОснования = "" Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапросаПоШапкеДокументаОснования;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	
	УстановитьПривилегированныйРежим(Истина);
	Результаты = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	РезультатПоШапке = Результаты[0];
	
	Если РезультатПоШапке.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	
	
	ТаблицаПоДокументу = РезультатПоШапке.Выгрузить();
	ДанныеПоДокументу = ТаблицаПоДокументу[0];
	
	СервисДоставкиКлиентСервер.ЗаполнитьСтруктуруПоЛинейнымДанным(Параметры, ДанныеПоДокументу, ТаблицаПоДокументу.Колонки);
	
	Параметры.Вставить("ОрганизацияБизнесСетиСсылка", ДанныеПоДокументу.ОрганизацияБизнесСетиСсылка);
	
	//Заполним значения адресов
	СервисДоставки.ЗаполнитьАдресПоПараметрам(Параметры.Отправитель.Адрес);
	СервисДоставки.ЗаполнитьАдресПоПараметрам(Параметры.Получатель.Адрес);
	СервисДоставки.ЗаполнитьАдресПоПараметрам(Параметры.Отправитель.Контрагент.ЮридическийАдрес);
	СервисДоставки.ЗаполнитьАдресПоПараметрам(Параметры.Получатель.Контрагент.ЮридическийАдрес);
	
	//Заполним телефоны контактных лиц
	ЗаполнитьТелефонКонтактногоЛицаПоОрганизации(Параметры.Отправитель);
	ЗаполнитьТелефонКонтактногоЛица(Параметры.Получатель.КонтактноеЛицо, Параметры.Получатель.Контрагент);
	
	//Заполним параметры грузовых мест
	Параметры.Груз.КоличествоГрузовыхМест = 1;
	Параметры.Груз.Объем = 0;
	Параметры.Груз.Стоимость = ДокументОснование.СуммаДокумента;
	
	РезультатВес = Результаты[1];
	
	Если РезультатВес.Пустой() Тогда
		Параметры.Груз.Вес = 0;
	Иначе
		ВыборкаВес = РезультатВес.Выбрать();
		ВыборкаВес.Следующий();
		
		Параметры.Груз.Вес = ВыборкаВес.Вес;
		Параметры.Груз.МаксимальныйВес = ВыборкаВес.Вес;
	КонецЕсли;
	
	Параметры.Груз.Содержимое = СтрШаблон(НСтр("ru = 'Товары по документу: %1'"), СокрЛП(ДокументОснование));
	
КонецПроцедуры

// Заполняет параметры контрагента данными по ссылке, указанной в Параметры.
//
// Параметры:
//  Параметры - Структура - см. СервисДоставки.ПараметрыКонтрагента()
//
Процедура ЗаполнитьПараметрыКонтрагента(Параметры) Экспорт
	
	ИмяСправочника = Неопределено;
	ВидЮридическогоАдреса = Неопределено;
	Если ТипЗнч(Параметры.Ссылка) = Тип("СправочникСсылка.Организации") Тогда
		ИмяСправочника = "Организации";
	ИначеЕСли ТипЗнч(Параметры.Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяСправочника = "Контрагенты";
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОсновнаяТаблица.Ссылка КАК Ссылка,
	|	ОсновнаяТаблица.ИНН КАК ИНН,
	|	ОсновнаяТаблица.КПП КАК КПП,
	|	ОсновнаяТаблица.НаименованиеПолное КАК Наименование,
	|	ВЫБОР
	|		КОГДА ОсновнаяТаблица.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|			ТОГДА 1
	|		КОГДА ОсновнаяТаблица.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|			ТОГДА 2
	|		КОГДА ОсновнаяТаблица.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЮрФизЛицо
	|ИЗ
	|	&ТаблицаДляЗапроса КАК ОсновнаяТаблица
	|ГДЕ
	|	ОсновнаяТаблица.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Параметры.Ссылка);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаДляЗапроса", "Справочник." + ИмяСправочника);
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ЗаполнитьЗначенияСвойств(Параметры, РезультатЗапроса.Выгрузить()[0]);
		
		Если Параметры.ЮрФизЛицо <> 2 Тогда
			
			Параметры.ЮридическийАдрес.Владелец = Параметры.Ссылка;
			СервисДоставкиСлужебный.ЗаполнитьАдресПоПараметрам(Параметры.ЮридическийАдрес);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Заполняет параметры контактного лица данными по ссылке, указанной в Параметры.
//
// Параметры:
//  Параметры - Структура - см. СервисДоставки.ПараметрыКонтактногоЛица()
//
Процедура ЗаполнитьПараметрыКонтактногоЛица(Параметры) Экспорт
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Ссылка, "Наименование");
	Параметры.Наименование = ЗначенияРеквизитов.Наименование;
	ЗаполнитьТелефонКонтактногоЛица(Параметры);
КонецПроцедуры

// Заполняет параметры телефона контактной информацией по владельцу, указанному в Параметры.
//
// Параметры:
//  Параметры - Структура - см. СервисДоставки.ПараметрыКонтактногоЛица().
//
Процедура ЗаполнитьТелефонКонтактногоЛица(Параметры, ПараметрыКонтрагента = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Параметры.Ссылка) Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонФизическогоЛица;
		Владелец = Параметры.Ссылка;
	Иначе
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		Владелец = ПараметрыКонтрагента.Ссылка;
	КонецЕсли;
	
	КонтактнаяИнформацияТаблица = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Владелец,
		ВидКИ,
		,
		Ложь);
	
	Если НЕ КонтактнаяИнформацияТаблица.Количество() = 0 Тогда
		КонтактнаяИнформация = КонтактнаяИнформацияТаблица[0];
		Параметры.Телефон.Представление = КонтактнаяИнформация.Представление;
		Параметры.Телефон.Значение = КонтактнаяИнформация.Значение;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет параметры телефона контактной информацией по владельцу, указанному в Параметры.
//
// Параметры:
//  Параметры - Структура - см. СервисДоставки.ПараметрыКонтактногоЛица().
//
Процедура ЗаполнитьТелефонКонтактногоЛицаПоОрганизации(Отправитель) Экспорт
	
	КонтактнаяИнформацияЛогиста = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Отправитель.КонтактноеЛицо.Ссылка,
		Справочники.ВидыКонтактнойИнформации.ТелефонФизическогоЛица,
		ТекущаяДатаСеанса(),
		Ложь);
		
	Если НЕ КонтактнаяИнформацияЛогиста.Количество() = 0 Тогда
		КонтактнаяИнформация = КонтактнаяИнформацияЛогиста[0];
		Отправитель.КонтактноеЛицо.Телефон.Представление = КонтактнаяИнформация.Представление;
		Отправитель.КонтактноеЛицо.Телефон.Значение = КонтактнаяИнформация.Значение;
		Возврат;
	КонецЕсли;
	
	КонтактнаяИнформацияОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Отправитель.Контрагент.Ссылка,
		Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,
		ТекущаяДатаСеанса(),
		Ложь);
		
	Если НЕ КонтактнаяИнформацияОрганизации.Количество() = 0 Тогда
		КонтактнаяИнформация = КонтактнаяИнформацияОрганизации[0];
		Отправитель.КонтактноеЛицо.Телефон.Представление = КонтактнаяИнформация.Представление;
		Отправитель.КонтактноеЛицо.Телефон.Значение = КонтактнаяИнформация.Значение;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ВидыКонтактнойИнформации

// Получает вид контактной информации для адреса по переданному владельцу.
//
// Параметры:
//  Владелец  - СправочникСсылка, ОбъектСсылка - владелец адреса.
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации.
//  ТипАдреса - Строка - тип адреса, доступны: АдресДоставки, Юридический, Фактический.
//
Процедура ПолучитьЗначениеВидаКонтактнойИнформацииДляАдресаПоВладельцу(Владелец, ВидКонтактнойИнформации, ТипАдреса = "АдресДоставки") Экспорт
	
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Если Владелец.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			Владелец = Владелец.ФизЛицо;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Магазины") Тогда
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресМагазина;
		
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
		
		Если ТипАдреса = "Юридический" Тогда
			ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		ИначеЕсли ТипАдреса = "Фактический" Тогда
			ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
		Если ТипАдреса = "Юридический" Тогда
			ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
		ИначеЕсли ТипАдреса = "Фактический" Тогда
			ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресФизическогоЛица;
		Если ТипАдреса = "Юридический" Тогда
			ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресФизическогоЛица;
		ИначеЕсли ТипАдреса = "Фактический" Тогда
			ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресФизическогоЛица;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Получает вид контактной информации для адреса доставки организации.
//
// Параметры:
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации,Неопределено - вид контактной информации.
//
Процедура ПолучитьЗначениеВидаКонтактнойИнформацииДляАдресаДоставкиСкладаОрганизации(ВидКонтактнойИнформации) Экспорт
	
	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресМагазина;
КонецПроцедуры

// Получает вид контактной информации для юридического адреса организации.
//
// Параметры:
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации,Неопределено - вид контактной информации.
//
Процедура ПолучитьЗначениеВидаКонтактнойИнформацииДляЮридическогоАдресаОрганизации(ВидКонтактнойИнформации) Экспорт
	
	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
КонецПроцедуры

// Получает вид контактной информации для адреса доставки контрагента.
//
// Параметры:
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации,Неопределено - вид контактной информации.
//
Процедура ПолучитьЗначениеВидаКонтактнойИнформацииДляАдресаДоставкиСкладаКонтрагента(ВидКонтактнойИнформации) Экспорт
	
	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
КонецПроцедуры

// Получает вид контактной информации для юридического адреса доставки.
//
// Параметры:
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации,Неопределено - вид контактной информации.
//
Процедура ПолучитьЗначениеВидаКонтактнойИнформацииДляЮридическогоАдресаКонтрагента(ВидКонтактнойИнформации) Экспорт
	
	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
КонецПроцедуры

// Получает вид контактной информации для телефона контактного лица контрагента.
//
// Параметры:
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации,Неопределено - вид контактной информации.
//
Процедура ПолучитьЗначениеВидаКонтактнойИнформацииДляТелефонаКонтактногоЛицаКонтрагента(ВидКонтактнойИнформации) Экспорт
	
	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонФизическогоЛица;
КонецПроцедуры

// Получает вид контактной информации для телефона контактного лица организации.
//
// Параметры:
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации,Неопределено - вид контактной информации.
//
Процедура ПолучитьЗначениеВидаКонтактнойИнформацииДляТелефонаКонтактногоЛицаОрганизации(ВидКонтактнойИнформации) Экспорт
	
	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонФизическогоЛица;
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Получение доступности функционала доставки в прикладном решении.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма панели настроек, в которой необходимо установить доступность.
//
Процедура УстановитьДоступностьНастройкиСервисаДоставки(Форма) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область Обработка_результатов_запросов_документов

// Обрабатывает результат создания заказа на доставку в сервисе 1С:Доставка.
//
// Параметры:
//  Результат - Структура - содержит результат выполнения запроса в сервис;
//  ДокументОснование - ОпределямыйТип.ОснованиеЗаказаСервисДоставки, Неопределено - документ, основание заказа на доставку.
//
Процедура ОбработатьРезультатСозданияЗаказаНаДоставку(Результат, ДокументОснование) Экспорт
	
	Если ДокументОснование = Неопределено Тогда
		ДокументОснование = ЗаказПокупателяПоИдентификаторуСервиса(Результат.Идентификатор)
	КонецЕсли;
	
	ЗаписатьСостояниеЗаказаНаДоставку(Результат, ДокументОснование);
КонецПроцедуры

// Обрабатывает результат оформления заказа на доставку в сервисе 1С:Доставка.
//
// Параметры:
//  Результат - Структура - содержит результат выполнения запроса в сервис;
//  ДокументОснование - ОпределямыйТип.ОснованиеЗаказаСервисДоставки, Неопределено - документ, основание заказа на доставку.
//
Процедура ОбработатьРезультатОформленияЗаказаНаДоставку(Результат, ДокументОснование) Экспорт
	
	Если ДокументОснование = Неопределено Тогда
		ДокументОснование = ЗаказПокупателяПоИдентификаторуСервиса(Результат.Идентификатор)
	КонецЕсли;
	
	ЗаписатьСостояниеЗаказаНаДоставку(Результат, ДокументОснование);
КонецПроцедуры

// Обрабатывает результат отмены заказа на доставку в сервисе 1С:Доставка.
//
// Параметры:
//  Результат - Структура - содержит результат выполнения запроса в сервис;
//  ДокументОснование - ОпределямыйТип.ОснованиеЗаказаСервисДоставки, Неопределено - документ, основание заказа на доставку.
//
Процедура ОбработатьРезультатОтменыЗаказаНаДоставку(Результат, ДокументОснование) Экспорт
	
	Если ДокументОснование = Неопределено Тогда
		ДокументОснование = ЗаказПокупателяПоИдентификаторуСервиса(Результат.Идентификатор)
	КонецЕсли;
	
	ЗаписатьСостояниеЗаказаНаДоставку(Результат, ДокументОснование);
КонецПроцедуры

// Обрабатывает результат запроса состояния заказа на доставку в сервисе 1С:Доставка.
//
// Параметры:
//  ИнформацияОЗаказе - Структура - содержит информацию о состоянии заказа в сервисе;
//  ДокументОснование - ОпределямыйТип.ОснованиеЗаказаСервисДоставки, Неопределено - документ, основание заказа на доставку.
//
Процедура ОбработатьРезультатСостоянияЗаказаНаДоставку(ИнформацияОЗаказе) Экспорт
	
	ИнформацияОЗаказе.Вставить("СтатусИдентификатор", ИнформацияОЗаказе.СостояниеИдентификатор);
	
	ЗаписатьСостояниеЗаказаНаДоставку(ИнформацияОЗаказе, ИнформацияОЗаказе.ДокументыОснования);
КонецПроцедуры

// Обрабатывает результат получения заказа на доставку из сервиса 1С:Доставка.
//
// Параметры:
//  Результат - Структура - содержит результат выполнения запроса в сервис;
//  ДокументОснование - ОпределямыйТип.ОснованиеЗаказаСервисДоставки, Неопределено - документ, основание заказа на доставку.
//
Процедура ОбработатьРезультатПолученияЗаказаНаДоставку(Результат, ДокументОснование) Экспорт
	
	ИнформацияОЗаказе = Результат.Данные;
	ИнформацияОЗаказе.Вставить("СтатусИдентификатор", ИнформацияОЗаказе.СостояниеИдентификатор);
	ИнформацияОЗаказе.Вставить("Идентификатор", ИнформацияОЗаказе.ИдентификаторЗаказа);
	
	
	ИнформацияОДоставке = Новый Структура();
	ИнформацияОДоставке.Вставить("Идентификатор", "");
	ИнформацияОДоставке.Вставить("Наименование", "");
	
	ЗаполнитьЗначенияСвойств(ИнформацияОДоставке, ИнформацияОЗаказе.Грузоперевозчик);
	
	ИнформацияОЗаказе.Вставить("ПеревозчикИдентификатор", ИнформацияОДоставке.Идентификатор);
	ИнформацияОЗаказе.Вставить("ПеревозчикНаименование", ИнформацияОДоставке.Наименование);
	
	ЗаписатьСостояниеЗаказаНаДоставку(ИнформацияОЗаказе, ДокументОснование);
КонецПроцедуры

#КонецОбласти

#Область ИспользованиеСервисаДоставки

Процедура СервисДоставкиКлиентамПриЗаписи(Источник, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьСервис1СДоставка = Ложь;
	
	НаборКонстант = Константы.СоздатьНабор("ИспользоватьОбменБизнесСеть");
	НаборКонстант.Прочитать();
	
	Если НаборКонстант.ИспользоватьОбменБизнесСеть Тогда
		ИспользоватьСервис1СДоставка = Источник.Значение;
	КонецЕсли;
	
	Константы.ИспользоватьСервис1СДоставка.Установить(ИспользоватьСервис1СДоставка);
КонецПроцедуры

#КонецОбласти

// Добавление команды поиска торговых предложений в формах.
//
// Параметры:
//  КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании.
//
Процедура ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Использование", Метаданные.Обработки.СервисДоставки) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "СервисДоставкиКлиентПереопределяемый.ЗаказНаДоставкуСоздатьНаОсновании";
		КомандаСоздатьНаОсновании.Идентификатор = "СоздатьНовыйЗаказНаДоставку";
		КомандаСоздатьНаОсновании.Представление = "Заказ на доставку в 1С:Доставка";
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьСервис1СДоставка";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьСостояниеЗаказаНаДоставку(СостояниеЗаказа, ДокументОснование)
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	ИнформацияОДоставке = Новый Структура();
	ИнформацияОДоставке.Вставить("Идентификатор", "");
	ИнформацияОДоставке.Вставить("СтатусИдентификатор", 0);
	ИнформацияОДоставке.Вставить("ТрекНомер", "");
	ИнформацияОДоставке.Вставить("ПеревозчикИдентификатор", "");
	ИнформацияОДоставке.Вставить("ПеревозчикНаименование", "");
	
	ЗаполнитьЗначенияСвойств(ИнформацияОДоставке, СостояниеЗаказа);
	
	СостояниеДоставкиЗаказа = СостояниеДоставкиЗаказа(ИнформацияОДоставке.СтатусИдентификатор);
	
	Перевозчик =
		ПеревозчикЗаказа(ИнформацияОДоставке.ПеревозчикИдентификатор, ИнформацияОДоставке.ПеревозчикНаименование);
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", ДокументОснование);
	Запрос.УстановитьПараметр("Состояние", СостояниеДоставкиЗаказа);
	Запрос.УстановитьПараметр("ТрекНомер", ИнформацияОДоставке.ТрекНомер);
	Запрос.УстановитьПараметр("ИдентификаторСервиса", ИнформацияОДоставке.Идентификатор);
	Запрос.УстановитьПараметр("ПеревозчикПредставление", ИнформацияОДоставке.ПеревозчикНаименование);
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СостояниеДоставки.ИдентификаторСервиса КАК ИдентификаторСервиса
	|ИЗ
	|	РегистрСведений.СостояниеДоставкиЗаказаПокупателя.СрезПоследних(
	|			&Период,
	|			ТрекНомер = &ТрекНомер
	|				И Состояние = &Состояние
	|				И ИдентификаторСервиса = &ИдентификаторСервиса
	|				И ПеревозчикПредставление = &ПеревозчикПредставление
	|				И ЗаказПокупателя В(&ЗаказПокупателя)) КАК СостояниеДоставки";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецЕсли;
	
	СостояниеДоставкиЗапись = РегистрыСведений.СостояниеДоставкиЗаказаПокупателя.СоздатьМенеджерЗаписи();
	СостояниеДоставкиЗапись.ЗаказПокупателя = ДокументОснование;
	
	СостояниеДоставкиЗапись.Состояние = СостояниеДоставкиЗаказа;
	СостояниеДоставкиЗапись.ИдентификаторСервиса = ИнформацияОДоставке.Идентификатор;
	СостояниеДоставкиЗапись.ТрекНомер = ИнформацияОДоставке.ТрекНомер;
	СостояниеДоставкиЗапись.ПеревозчикПредставление = ИнформацияОДоставке.ПеревозчикНаименование;
	СостояниеДоставкиЗапись.Перевозчик = Перевозчик;
	
	СостояниеДоставкиЗапись.Период = ТекущаяДатаСеанса();
	СостояниеДоставкиЗапись.Записать(Истина);
	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Функция СостояниеДоставкиЗаказа(СостояниеДоставки)
	
	СостояниеДоставкиЗаказа = Неопределено;
	
	Если СостояниеДоставки = 0 Тогда
		
		СостояниеДоставкиЗаказа = Перечисления.СостоянияДоставкиЗаказаПокупателя.НеСобран;
	ИначеЕсли СостояниеДоставки >=1 И СостояниеДоставки <= 3 Тогда
		
		СостояниеДоставкиЗаказа = Перечисления.СостоянияДоставкиЗаказаПокупателя.ГотовКОтгрузке;
		
	ИначеЕсли СостояниеДоставки >=4 И СостояниеДоставки <= 9 Тогда
		
		СостояниеДоставкиЗаказа = Перечисления.СостоянияДоставкиЗаказаПокупателя.Отгружен;
		
	ИначеЕсли СостояниеДоставки = 16 Тогда
		
		СостояниеДоставкиЗаказа = Перечисления.СостоянияДоставкиЗаказаПокупателя.ДоставкаЗавершена;
		
	ИначеЕсли СостояниеДоставки = 17 Или СостояниеДоставки = 18 Тогда
		
		СостояниеДоставкиЗаказа = Перечисления.СостоянияДоставкиЗаказаПокупателя.Отменен;
		
	КонецЕсли;
	
	Возврат СостояниеДоставкиЗаказа;
КонецФункции

Функция ПеревозчикЗаказа(КодПеревозчика, НаименованиеПеревозчика)
	
	Перевозчик = Справочники.Контрагенты.ПустаяСсылка();
	
	Возврат Перевозчик;
	
КонецФункции

Функция ЗаказПокупателяПоИдентификаторуСервиса(ИдентификаторСервиса)
	
	ЗаказПокупателя = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторСервиса", ИдентификаторСервиса);
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СостояниеДоставки.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	РегистрСведений.СостояниеДоставкиЗаказаПокупателя.СрезПоследних(
	|			&Период,
	|			ИдентификаторСервиса = &ИдентификаторСервиса
	|				) КАК СостояниеДоставки";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		
		Возврат ЗаказПокупателя;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ЗаказПокупателя;
	
КонецФункции

#КонецОбласти
