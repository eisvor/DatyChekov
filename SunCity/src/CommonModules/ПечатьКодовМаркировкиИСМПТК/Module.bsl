
#Область СлужебныйПрограммныйИнтерфейс

Процедура ПриПодготовкеСтруктурыДанныхДляПечати(СтруктураНастроек, Режим, Запрос, ИсходныеДанные) Экспорт
	
	Если Режим = "ЭтикеткаКодМаркировкиИСМП" Тогда
		
		Если ИсходныеДанные <> Неопределено Тогда
			
			ЗаполнитьДополнительныеПараметрыШтрихкодовУпаковок(ИсходныеДанные);
			
			НомерНачальнойПозиции = СтрНайти(Запрос.Текст, "(ВЫБРАТЬ");
			СодержимоеКонечнойПозиции = ") КАК ИсходныеДанные";
			НомерКонечнойПозиции  = СтрНайти(Запрос.Текст, СодержимоеКонечнойПозиции);
			ТекстЗаменяемогоПодзапроса = Сред(Запрос.Текст, НомерНачальнойПозиции, НомерКонечнойПозиции
				+ СтрДлина(СодержимоеКонечнойПозиции) - НомерНачальнойПозиции);
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстЗаменяемогоПодзапроса, "&Таблица КАК ИсходныеДанные");
			
			ИнтеграцияИСМПТКПереопределяемый.ПронумероватьТаблицуЗначений(ИсходныеДанные, "Порядок");
			Запрос.Параметры.Вставить("Таблица", ИсходныеДанные);
			
		КонецЕсли;
		
	ИначеЕсли Режим = "ШтрихкодыУпаковок" Тогда
		
		Если ИсходныеДанные <> Неопределено Тогда
			
			ЗаполнитьДополнительныеПараметрыШтрихкодовУпаковок(ИсходныеДанные);
			
			НомерНачальнойПозиции = СтрНайти(Запрос.Текст, "(ВЫБРАТЬ");
			СодержимоеКонечнойПозиции = " КАК ИсходныеДанные";
			НомерКонечнойПозиции  = СтрНайти(Запрос.Текст, СодержимоеКонечнойПозиции);
			ТекстЗаменяемогоПодзапроса = Сред(Запрос.Текст, НомерНачальнойПозиции, НомерКонечнойПозиции
				+ СтрДлина(СодержимоеКонечнойПозиции) - НомерНачальнойПозиции);
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстЗаменяемогоПодзапроса, "&Таблица КАК ИсходныеДанные");
			ИнтеграцияИСМПТКПереопределяемый.ПронумероватьТаблицуЗначений(ИсходныеДанные, "Порядок");
			Запрос.Параметры.Вставить("Таблица", ИсходныеДанные);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриПечати(КоллекцияПечатныхФорм, ПараметрыПечати, ОбъектыПечати) Экспорт

	Если ПечатьКодовМаркировкиИСМПТКПереопределяемый.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭтикеткаКодМаркировкиИСМП") Тогда
		
		СтруктураНастроек = СтруктураНастроекЭтикеткаИСМП();
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		СформироватьПечатнуюФормуЭтикеткиОбувь(ПараметрыПечати, ОбъектыПечати, СтруктураНастроек, ТабличныйДокумент);
		
		ПечатьКодовМаркировкиИСМПТКПереопределяемый.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЭтикеткаКодМаркировкиИСМП",
			НСтр("ru = 'Этикетка ИС МПТ'"),
			ТабличныйДокумент);
			
	КонецЕсли;
	
	Если ПечатьКодовМаркировкиИСМПТКПереопределяемый.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭтикеткаSSCC") Тогда
		
		СтруктураНастроек = Обработки.ПечатьКодовМаркировкиИСМПТК.СтруктураНастроек();
		СтруктураНастроек.ОбязательныеПоля.Добавить("Штрихкод");
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		СформироватьПечатнуюФормуЭтикеткиШтрихкодыУпаковки(ПараметрыПечати, ОбъектыПечати, СтруктураНастроек, ТабличныйДокумент);
		
		ПечатьКодовМаркировкиИСМПТКПереопределяемый.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ЭтикеткаШтрихкодыУпаковки",
		НСтр("ru = 'Этикетки штрихкодов упаковок'"),
		ТабличныйДокумент);
		
	КонецЕсли;

КонецПроцедуры

#Область ШтрихкодыУпаковок

Процедура СформироватьПечатнуюФормуЭтикеткиШтрихкодыУпаковки(ДанныеПечати, ОбъектыПечати, СтруктураНастроек, ТабличныйДокумент) Экспорт
	
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаШтрихкодыУпаковок";
	
	ШаблонЭтикетки        = ДанныеПечати.ШаблонЭтикетки;
	КоличествоЭкземпляров = ДанныеПечати.КоличествоЭкземпляров;
	
	СтруктураНастроек.ИсходныеДанные = ПолучитьИзВременногоХранилища(ДанныеПечати.АдресВХранилище);
	
	Если Не ДанныеПечати.Свойство("СтруктураМакетаШаблона") Или Не ЗначениеЗаполнено(ДанныеПечати.СтруктураМакетаШаблона) Тогда
		СтруктураШаблона = ШаблонЭтикетки.Шаблон.Получить();
	Иначе
		СтруктураШаблона = ДанныеПечати.СтруктураМакетаШаблона;
	КонецЕсли;
	
	Для Каждого Элемент Из СтруктураШаблона.ПараметрыШаблона Цикл
		СтруктураНастроек.ОбязательныеПоля.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	СтруктураРезультата = Обработки.ПечатьКодовМаркировкиИСМПТК.ПодготовитьСтруктуруДанных(СтруктураНастроек, "ШтрихкодыУпаковок");
	
	Эталон = Обработки.ПечатьКодовМаркировкиИСМПТК.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	НомерКолонки = 0;
	НомерРяда    = 0;
	
	Область = СтруктураШаблона.МакетЭтикетки.ПолучитьОбласть(СтруктураШаблона.ИмяОбластиПечати);
	
	Для Каждого СтрокаТаблицы Из СтруктураРезультата.Таблица Цикл
		
		ЗаполнитьЗначенияСвойств(ТабличныйДокумент, СтруктураШаблона.МакетЭтикетки, , "ОбластьПечати");
		
		ЗначениеШтрихкода = СтрокаТаблицы[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить("Штрихкод")];
		
		Для каждого ПараметрШаблона Из СтруктураШаблона.ПараметрыШаблона Цикл
			Если ОбщегоНазначенияИСМПТККлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Область.Параметры, ПараметрШаблона.Значение) Тогда
				ИмяПоляВШаблоне = Справочники.ХранилищеШаблоновИСМПТК.ИмяПоляВШаблоне(ПараметрШаблона.Ключ);
				НаименованиеКолонки = СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить(ИмяПоляВШаблоне);
				Если НаименованиеКолонки <> Неопределено Тогда
					Область.Параметры[ПараметрШаблона.Значение] = СтрокаТаблицы[НаименованиеКолонки];
				Иначе
					Если ИмяПоляВШаблоне = "СерияМарки" И СтрДлина(ЗначениеШтрихкода) = 150 Тогда
						Область.Параметры[ПараметрШаблона.Значение] = Сред(ЗначениеШтрихкода, 4,3);
					ИначеЕсли ИмяПоляВШаблоне = "НомерМарки" И СтрДлина(ЗначениеШтрихкода) = 150 Тогда
						Область.Параметры[ПараметрШаблона.Значение] = Сред(ЗначениеШтрихкода, 5,8);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Рисунок Из Область.Рисунки Цикл
			Если СтрНайти(Рисунок.Имя, Справочники.ХранилищеШаблоновИСМПТК.ИмяПараметраШтрихкод()) = 1 Тогда
				
				ЗначениеШтрихкода = СтрокаТаблицы[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицы.Получить("Штрихкод")];
				Если ЗначениеЗаполнено(ЗначениеШтрихкода) Тогда
					
					ЗначениеШтрихкодаДляКомпоненты = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.КодGS1ДляКомпонентыПечати(ЗначениеШтрихкода, СтруктураШаблона.ТипКода);
					
					Если СтруктураШаблона.Свойство("УровеньЧеткости") Тогда
						УровеньЧеткости = СтруктураШаблона.УровеньЧеткости;
					Иначе
						УровеньЧеткости = 1;
					КонецЕсли;
					
					ПараметрыШтрихкода = Новый Структура;
					ПараметрыШтрихкода.Вставить("Ширина",          Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
					ПараметрыШтрихкода.Вставить("Высота",          Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
					ПараметрыШтрихкода.Вставить("Штрихкод",        СокрЛП(ЗначениеШтрихкодаДляКомпоненты));
					ПараметрыШтрихкода.Вставить("ТипКода",         СтруктураШаблона.ТипКода);
					ПараметрыШтрихкода.Вставить("ОтображатьТекст", СтруктураШаблона.ОтображатьТекст);
					ПараметрыШтрихкода.Вставить("РазмерШрифта",    СтруктураШаблона.РазмерШрифта * УровеньЧеткости);
					
					Если СтруктураШаблона.Свойство("GS1DatabarКоличествоСтрок") Тогда
						ПараметрыШтрихкода.Вставить("GS1DatabarКоличествоСтрок", СтруктураШаблона.GS1DatabarКоличествоСтрок);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("ТипШрифта") Тогда
						ПараметрыШтрихкода.Вставить("ТипШрифта", СтруктураШаблона.МонохромныйШрифт);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("УголПоворота") Тогда
						ПараметрыШтрихкода.Вставить("УголПоворота", СтруктураШаблона.УголПоворота);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("МонохромныйШрифт") Тогда
						ПараметрыШтрихкода.Вставить("МонохромныйШрифт", СтруктураШаблона.МонохромныйШрифт);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("Масштабировать") Тогда
						ПараметрыШтрихкода.Вставить("Масштабировать", СтруктураШаблона.Масштабировать);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("СохранятьПропорции") Тогда
						ПараметрыШтрихкода.Вставить("СохранятьПропорции", СтруктураШаблона.СохранятьПропорции);
					КонецЕсли;
					Если СтруктураШаблона.Свойство("ВертикальноеВыравнивание") Тогда
						ПараметрыШтрихкода.Вставить("ВертикальноеВыравнивание", СтруктураШаблона.ВертикальноеВыравнивание);
					КонецЕсли;
					
					НеGS1 = ?(СтруктураШаблона.ТипКода = 18, Истина, Ложь);	
					ПараметрыШтрихкода.Вставить("НеGS1", НеGS1);
					
					Рисунок.Картинка = ПечатьКодовМаркировкиИСМПТКВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Для Счетчик = 1 По КоличествоЭкземпляров Цикл // Цикл по количеству экземпляров
			
			НомерКолонки = НомерКолонки + 1;
			
			Если НомерКолонки = 1 Тогда
				
				НомерРяда = НомерРяда + 1;
				
				ТабличныйДокумент.Вывести(Область);
				
			Иначе
				
				ТабличныйДокумент.Присоединить(Область);
				
			КонецЕсли;
			
			Если НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали
				И НомерРяда = СтруктураШаблона.КоличествоПоВертикали Тогда
				
				НомерРяда    = 0;
				НомерКолонки = 0;
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			ИначеЕсли НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали Тогда
				
				НомерКолонки = 0;
				
			КонецЕсли;
			
		КонецЦикла; // Цикл по количеству экземпляров
		
	КонецЦикла; // Цикл по строкам таблицы
	
	Возврат;
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеПараметрыШтрихкодовУпаковок(ТаблицаДанныхШтрихкодов) Экспорт
	
	// Добавляем колонки в таблицу.
	ПоддерживаемыеТипыШтрихкодов = Новый Массив;
	ПоддерживаемыеТипыШтрихкодов.Добавить(Перечисления.ТипыШтрихкодовИСМПТК.SSCC);
	ПоддерживаемыеТипыШтрихкодов.Добавить(Перечисления.ТипыШтрихкодовИСМПТК.GS1_128);
	
	Для каждого ПоддерживаемыйТипШтрихкода Из ПоддерживаемыеТипыШтрихкодов Цикл
		
		ИдентификаторыИТипыКолонокПечати = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПовтИсп.ТипыКолонокПечатиПоТипуШтрихкода(ПоддерживаемыйТипШтрихкода);
		Для каждого ИдентификаторИТипКолонки Из ИдентификаторыИТипыКолонокПечати Цикл
			ИдентификаторКолонки = ИдентификаторИТипКолонки.Ключ;
			Если ПоддерживаемыйТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.SSCC Тогда
				ИмяКолонки = ИдентификаторКолонки;
			Иначе
				ИмяКолонки = "ИдентификаторПрименения_" + ИдентификаторКолонки;
			КонецЕсли;
			Если ТаблицаДанныхШтрихкодов.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
				ТипКолонки = ИдентификаторИТипКолонки.Значение;
				ТаблицаДанныхШтрихкодов.Колонки.Добавить(ИмяКолонки, ТипКолонки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// Заполняем колонки прочитанными значениями.
	Для Каждого СтрокаТаблицы Из ТаблицаДанныхШтрихкодов Цикл
		Если СтрокаТаблицы.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.SSCC Тогда
			ПараметрыШтрихкода = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПараметрыШтрихкодаSSCC(СтрокаТаблицы.Штрихкод);
			Если Не ПараметрыШтрихкода.Результат = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыШтрихкода.Результат);
			Иначе
				Если ЗначениеЗаполнено(ПараметрыШтрихкода.ТекстОшибки) Тогда
					ТекстОшибки = НСтр("ru = 'Обнаружена проблема с кодом %1: '") + ПараметрыШтрихкода.ТекстОшибки;
				Иначе
					ТекстОшибки = НСтр("ru = 'Обнаружена проблема с кодом %1!'");
				КонецЕсли;
				ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаТаблицы.КодИдентификации);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;
		ИначеЕсли СтрокаТаблицы.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.GS1_128
			Или СтрокаТаблицы.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.GS1_DataBarExpandedStacked
			Или СтрокаТаблицы.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.GS1_DataMatrix Тогда
			ПараметрыШтрихкода = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ПараметрыШтрихкода(СтрокаТаблицы.Штрихкод);
			Если Не ПараметрыШтрихкода.Результат = Неопределено Тогда
				Для каждого СвойстваПараметраШтрихкода Из ПараметрыШтрихкода.Результат Цикл
					ИмяКолонки = "ИдентификаторПрименения_" + СвойстваПараметраШтрихкода.КлючИдентификатора;
					СтрокаТаблицы[ИмяКолонки] = СвойстваПараметраШтрихкода.Значение;
				КонецЦикла;
			Иначе
				Если ЗначениеЗаполнено(ПараметрыШтрихкода.ТекстОшибки) Тогда
					ТекстОшибки = НСтр("ru = 'Обнаружена проблема с кодом %1: '") + ПараметрыШтрихкода.ТекстОшибки;
				Иначе
					ТекстОшибки = НСтр("ru = 'Обнаружена проблема с кодом %1!'");
				КонецЕсли;
				ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаТаблицы.КодИдентификации);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

Процедура СформироватьПечатнуюФормуЭтикеткиОбувь(ДанныеПечати, ОбъектыПечати, СтруктураНастроек, ТабличныйДокумент) Экспорт
	
	РегистрыСведений.ПулКодовМаркировкиСУЗИСМПТК.РаспечататьЭтикеткиИЗафиксироватьДатуПечати(ДанныеПечати, ТабличныйДокумент, СтруктураНастроек);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает схему запроса по значению переданного индекса в пакете запросов
//
// Параметры:
//  СхемаЗапроса         - СхемаЗапроса - схема запроса
//  ИндексЗапросаВПакете - Число - индекс запроса в пакете запросов. Если не задано, то последний запрос в пакете.
//
// Возвращаемое значение:
//  ЗапросВыбораСхемыЗапроса, ЗапросУничтоженияТаблицыСхемыЗапроса - измененный текст запроса или запрос.
//
Функция ЗапросПакетаЗапросов(Знач СхемаЗапроса, ИндексЗапросаВПакете = Неопределено) Экспорт
	Перем ЗапросПакетаЗапросов;
	
	ПакетЗапросов = СхемаЗапроса.ПакетЗапросов;
	
	Если ИндексЗапросаВПакете = Неопределено Тогда
		ИндексЗапросаВПакете = ПакетЗапросов.Количество() - 1;
	КонецЕсли;
	
	ЗапросПакетаЗапросов = ПакетЗапросов.Получить(ИндексЗапросаВПакете);
	
	Возврат ЗапросПакетаЗапросов;
КонецФункции 

Функция ДобавитьРасширенноеПолеВОбластьЗапроса(Запрос, ТипОбласти, ВыражениеПоля, ПсевдонимПоля = "Поле1", ДочерниеПоля = Ложь) Экспорт
	ВставкаПроизведена = Ложь;
	
	Если ТипЗнч(Запрос) = Тип("Строка") Тогда
		ТекстЗапроса = Запрос;
	ИначеЕсли ТипЗнч(Запрос) = Тип("Запрос") Тогда 
		ТекстЗапроса = Запрос.Текст;
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректный тип параметра 1'") ;
	КонецЕсли;
	
	Если Не (ТипОбласти = "ВЫБРАТЬ" ИЛИ ТипОбласти = "ГДЕ") Тогда
		ВызватьИсключение НСтр("ru = 'Некорректное значение параметра 2'") ;
	КонецЕсли;
	
	ЭтоОбластьВыбрать   = (ТипОбласти = "ВЫБРАТЬ");
	ЭтоОбластьГде       = (ТипОбласти = "ГДЕ");
	
	ТегОбласти = "{" + ТипОбласти;
	ТегЗакрытияОбласти = "}";
	РазделительПолей = "," + Символы.ПС;
	ТипОбластиВРег = ВРег(ТипОбласти);
	
	// На шаге 1 выделим текст после начала области вставки
	ЭлементыОбластиШаг1 = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.РазложитьСтрокуВМассивПодстрок(ТекстЗапроса, ТегОбласти);
	КоличествоЭлементовЭтап1 = ЭлементыОбластиШаг1.Количество();
	
	Если Не (КоличествоЭлементовЭтап1 = 1 Или КоличествоЭлементовЭтап1 = 2) Тогда
		ТекстИсключения = НСтр("ru = 'Некорректная область %1 расширения языка запроса СКД'");
		ТекстИсключения = СтрШаблон(ТекстИсключения, ТипОбластиВРег);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	// На шаге 2 выделим текст до окончания области вставки
	Если КоличествоЭлементовЭтап1 = 2 Тогда
		СтрокиПослеОбласти = ЭлементыОбластиШаг1[1]; // Строки после тега области
		
		ЭлементыОбластиШаг2 = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.РазложитьСтрокуВМассивПодстрок(СтрокиПослеОбласти, ТегЗакрытияОбласти);
		КоличествоЭлементовЭтап2 = ЭлементыОбластиШаг2.Количество();
		
		Если КоличествоЭлементовЭтап2 = 1 Тогда
			ТекстИсключения = НСтр("ru = 'Некорректное закрытие области %1 расширения языка запроса СКД'");
			ТекстИсключения = СтрШаблон(ТекстИсключения, ТипОбластиВРег);
			
			ВызватьИсключение ТекстИсключения;
		Иначе
			ОбластьВставки = ЭлементыОбластиШаг2[0]; // Текст области - между фигурными скобками
			
			// Добавим новое расширенное поле
			ПоляОбласти = СтрРазделить(ОбластьВставки, РазделительПолей, Ложь);
			
			ВставляемоеВыражениеПоля = ?(Не ЭтоОбластьВыбрать, ВыражениеПоля + ?(ДочерниеПоля, ".*", "") +  " КАК ", "") + ?(ЗначениеЗаполнено(ПсевдонимПоля), ПсевдонимПоля, "");
			
			ПоляОбласти.Добавить(ВставляемоеВыражениеПоля);
			
			// Соберем текст области и текст запроса
			ОбластьВставки = СтрСоединить(ПоляОбласти, РазделительПолей);
		
		КонецЕсли;
		
		ЭлементыОбластиШаг2[0] = ОбластьВставки;
		ТекстЗапросаШаг2 = СтрСоединить(ЭлементыОбластиШаг2, ТегЗакрытияОбласти);
		
		ЭлементыОбластиШаг1[1] = ТекстЗапросаШаг2;
		ТекстЗапросаШаг1 = СтрСоединить(ЭлементыОбластиШаг1, ТегОбласти);
	Иначе
		ТекстЗапросаШаг1 = ТекстЗапроса;
	КонецЕсли;
		
	Если ТипЗнч(Запрос) = Тип("Строка") Тогда
		Запрос = ТекстЗапросаШаг1;
	ИначеЕсли ТипЗнч(Запрос) = Тип("Запрос") Тогда 
		Запрос.Текст = ТекстЗапросаШаг1;
	КонецЕсли;
		
	Возврат ВставкаПроизведена;
КонецФункции

// Подготавливает структуру дополнительных параметров для печати этикеток.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * КаждаяЭтикеткаНаНовомЛисте - Булево - Признак вывода разделителя страниц после каждой этикетки.
//
Функция СтруктураНастроекЭтикеткаИСМП() Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("КаждаяЭтикеткаНаНовомЛисте", Ложь);
	
	ПечатьКодовМаркировкиИСМПТКПереопределяемый.СтруктураНастроекЭтикеткаИСМП(СтруктураНастроек);
	
	Возврат СтруктураНастроек;
	
КонецФункции

#КонецОбласти

#Область ПечатьSSCC

Функция ПолучитьШаблонЭтикеткиSSCC() Экспорт
	
	Возврат Обработки.ПечатьКодовМаркировкиИСМПТК.ПолучитьМакет("SSCC");
	
КонецФункции

#КонецОбласти

#Область ГенерацияШК

Функция ИзображениеШтрихкода(ПараметрыШтрихкода) Экспорт
	
	ВнешняяКомпонента = ПодключитьКомпонентуГенерацииИзображенияШтрихкода();
	
	Если ВнешняяКомпонента = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка подключения внешней компоненты печати штрихкода.'");
		ИмяСобытия  = НСтр("ru = 'Ошибка генерации штрихкода'", ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.КодОсновногоЯзыка());
		ОбщегоНазначенияИСМПТКВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки, ИмяСобытия);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат ПодготовитьИзображениеШтрихкода(ВнешняяКомпонента, ПараметрыШтрихкода); 
	 
КонецФункции

Функция ПодключитьКомпонентуГенерацииИзображенияШтрихкода() Экспорт
	
	Возврат ИнтеграцияИСМПТКПереопределяемый.ПодключитьВнешнююКомпонентуПечатиШтрихкода();
		
КонецФункции

Функция ПодготовитьИзображениеШтрихкода(ВнешняяКомпонента, ПараметрыШтрихкода)
	
	// Результат 
	РезультатОперации = Новый Структура();
	РезультатОперации.Вставить("Результат", Ложь);
	РезультатОперации.Вставить("ДвоичныеДанные");
	РезультатОперации.Вставить("Картинка");
	
	// Зададим размер формируемой картинки.
	ШиринаШтрихкода = Окр(ПараметрыШтрихкода.Ширина);
	ВысотаШтрихкода = Окр(ПараметрыШтрихкода.Высота);
	Если ШиринаШтрихкода <= 0 Тогда
		ШиринаШтрихкода = 1
	КонецЕсли;
	Если ВысотаШтрихкода <= 0 Тогда
		ВысотаШтрихкода = 1
	КонецЕсли;
	ВнешняяКомпонента.Ширина  = ШиринаШтрихкода;
	ВнешняяКомпонента.Высота  = ВысотаШтрихкода;
	ВнешняяКомпонента.АвтоТип = Ложь;
	
	ШтрихкодВрем = Строка(ПараметрыШтрихкода.Штрихкод); // Преобразуем явно в строку.
	
	Если ПараметрыШтрихкода.ТипКода = 99 Тогда
		ВнешняяКомпонента.АвтоТип = Истина;
	Иначе
		ВнешняяКомпонента.АвтоТип = Ложь;
		ВнешняяКомпонента.ТипКода = ПараметрыШтрихкода.ТипКода;
	КонецЕсли;
	
	Если ПараметрыШтрихкода.Свойство("ПрозрачныйФон") Тогда
		ВнешняяКомпонента.ПрозрачныйФон = ПараметрыШтрихкода.ПрозрачныйФон;
	КонецЕсли;
	
	Если ПараметрыШтрихкода.Свойство("ТипВходныхДанных") Тогда
		ВнешняяКомпонента.ТипВходныхДанных = ПараметрыШтрихкода.ТипВходныхДанных;
	КонецЕсли;
	
	Если ПараметрыШтрихкода.Свойство("УбратьЛишнийФон") Тогда
		ВнешняяКомпонента.УбратьЛишнийФон = ПараметрыШтрихкода.УбратьЛишнийФон;
	КонецЕсли;
	
	Если ПараметрыШтрихкода.Свойство("РазмерШрифта") И (ПараметрыШтрихкода.РазмерШрифта > 0) 
		И (ПараметрыШтрихкода.ОтображатьТекст) И (ВнешняяКомпонента.РазмерШрифта <> ПараметрыШтрихкода.РазмерШрифта) Тогда
		ВнешняяКомпонента.РазмерШрифта = ПараметрыШтрихкода.РазмерШрифта;
	КонецЕсли;
		
	ВнешняяКомпонента.ОтображатьТекст = Истина;
	ВнешняяКомпонента.ЗначениеКода    = ШтрихкодВрем;
	ВнешняяКомпонента.УголПоворота 	  = ?(ПараметрыШтрихкода.Свойство("УголПоворота"), ПараметрыШтрихкода.УголПоворота, 0);
	ВнешняяКомпонента.УровеньКоррекцииQR = 1;
	
	// Если установленная нами ширина меньше минимально допустимой для этого штрихкода.
	Если ВнешняяКомпонента.Ширина < ВнешняяКомпонента.МинимальнаяШиринаКода Тогда
		ВнешняяКомпонента.Ширина = ВнешняяКомпонента.МинимальнаяШиринаКода;
	КонецЕсли;
	// Если установленная нами высота меньше минимально допустимой для этого штрихкода.
	Если ВнешняяКомпонента.Высота < ВнешняяКомпонента.МинимальнаяВысотаКода Тогда
		ВнешняяКомпонента.Высота = ВнешняяКомпонента.МинимальнаяВысотаКода;
	КонецЕсли;
		
	// Сформируем картинку
	ДвоичныеДанныеКартинки 		= ВнешняяКомпонента.ПолучитьШтрихкод();
	РезультатОперации.Результат = ВнешняяКомпонента.Результат = 0;
	// Если картинка сформировалась.
	Если ДвоичныеДанныеКартинки <> Неопределено Тогда
		РезультатОперации.ДвоичныеДанные = ДвоичныеДанныеКартинки;
		РезультатОперации.Картинка = Новый Картинка(ДвоичныеДанныеКартинки); // Формируем из двоичных данных.
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

#КонецОбласти