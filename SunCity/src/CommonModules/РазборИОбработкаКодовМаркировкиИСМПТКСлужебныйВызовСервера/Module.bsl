
#Область НастройкиРазбораКМ

Функция НастройкиРазбораКодаМаркировки(ВидыПродукции = Неопределено, ТолькоУчитываемыеВидыПродукции = Истина, ВалидироватьШтрихкодаGS1БезРазделителей = Истина) Экспорт
	
	Возврат РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ОбщиеНастройкиРазбораКодаМаркировки(Ложь, ВидыПродукции, ТолькоУчитываемыеВидыПродукции, ВалидироватьШтрихкодаGS1БезРазделителей);
	
КонецФункции

#КонецОбласти

#Область РазборИОбработкаКодаМаркировки_ОптоваяТорговля

//При оптовой торговле ИС МПТ:
//использует дополнительный функционал (регистрация ШК, построение дерева и т.д.)
//
//ДокументПоддерживаетСканированиеЕАН - по умолчанию документы библиотеки не поддерживают обработку сканирования обычного штрихкода. 
//Но в ЗаказахНаЭмиссиюКМ такое действие допускается.
Функция ПолучитьКодыМаркировки(ИсходныеДанные, ДокументПоддерживаетСканированиеЕАН = Ложь) Экспорт
	
	Если (ИсходныеДанные.Свойство("ФорматBase64") И ИсходныеДанные.ФорматBase64)
		//Дополнительная проверка, т.к. вызов этой функции может быть из разных мест и формат закодированных данных из-за этого может отличаться - где-то свойство в структуру добавляется, где-то нет
		Или РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ЭтоСтрокаФорматаBase64(ИсходныеДанные.Штрихкод) Тогда 
		ШтрихкодBase64 = ИсходныеДанные.Штрихкод;
		ШтрихкодСтрока = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(ИсходныеДанные.Штрихкод);
	Иначе
		ШтрихкодBase64 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.СтрокуВBase64(ИсходныеДанные.Штрихкод);
		ШтрихкодСтрока = ИсходныеДанные.Штрихкод;
	КонецЕсли;
	
	//Проверка на сканирование обычного штрихкода товара
	Если РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПовтИсп.ЭтоEAN13(ШтрихкодСтрока)
			Или РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСерверПовтИсп.ЭтоEAN8(ШтрихкодСтрока)
			И НЕ ДокументПоддерживаетСканированиеЕАН Тогда
		ТекстОшибки = НСтр("ru = 'Сканирование штрихкода EAN в документах маркировки не поддерживается.'");
		Возврат ТекстОшибки;
	КонецЕсли;
	ШтрихкодСтрока = ""; //Чтобы не возникало конфликтов со служебными спец.символами, если был отсканирован полный КМ.
	
	НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();  
	ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(ИсходныеДанные, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
	
	Если ДанныеРазбора = Неопределено Тогда 
		ТекстОшибки = НСтр("ru = 'Не удалось разобрать код маркировки. Возможно, код некорректен или в программе не включен учет маркировки этой товарной группы.'");
		Возврат ТекстОшибки;
	КонецЕсли;
	
	GTINВерхнегоУровня = "";
	GTIN = "";
			
	//Если это входящий документ, КМ не полный (есть только КИ) и наверняка определить из него вид продукции мы не можем.
	//Поэтому пытаемся найти в базе номенклатуру, связанную с этим КИ через GTIN и если такая номенклатура есть, 
	//определяем вид продукции по ее особенностям учета.
	//Если в базе ведется учет только одной ТГ маркируемых товаров, то вид продукции определяем напрямую из данных разбора. 
	Если НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции.Количество() = 1 Тогда
		
		Если ДанныеРазбора.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.SSCC Тогда 
			ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка");
			//Для транспортной (логистической) упаковки не можем сразу определить GTIN, нужен запрос данных вложенных позиций с сервера.
			//GTINВерхнегоУровня у транспортной упаковки всегда пустой, т.к. в коде SSCC не содержится GTIN.
			GTINВерхнегоУровня = "";
			GTIN = "";
			НайденнаяНоменклатура = Неопределено;
		Иначе
			ВидПродукции = НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции[0];
			
			//В ДанныеРазбора.СоставКодаМаркировки.GTIN содержится код товара верхнего уровня, т.е. для групповой упаковки - GTIN из КМ самой упаковки, а не вложенного товара.
			//В документах это реквизит GTINВерхнегоУровня
			//Для некоторых документов ИС МПТ важно указывать также GTIN вложенных позиций (реквизит GTIN).
			GTINВерхнегоУровня = ДанныеРазбора.СоставКодаМаркировки.GTIN;
			Если ДанныеРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда
				GTIN = ДанныеРазбора.СоставКодаМаркировки.GTIN; //Для потребительского кода оба реквизита GTIN равны.
			Иначе
				GTIN = "";
			КонецЕсли;
		КонецЕсли;
			
	ИначеЕсли ДанныеРазбора.ВидыПродукции.Количество() = 1 Тогда
		
		Если ДанныеРазбора.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.SSCC Тогда 
			ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка");
			//Для транспортной (логистической) упаковки не можем сразу определить GTIN, нужен запрос данных вложенных позиций с сервера.
			//GTINВерхнегоУровня у транспортной упаковки всегда пустой, т.к. в коде SSCC не содержится GTIN.
			GTINВерхнегоУровня = "";
			GTIN = "";
			НайденнаяНоменклатура = Неопределено;
		Иначе
			ВидПродукции = ДанныеРазбора.ВидыПродукции[0];
			
			GTINВерхнегоУровня = ДанныеРазбора.СоставКодаМаркировки.GTIN;
			Если ДанныеРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда
				GTIN = ДанныеРазбора.СоставКодаМаркировки.GTIN; //Для потребительского кода оба реквизита GTIN равны.
			Иначе
				GTIN = "";
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ДанныеРазбора.ТипШтрихкода = Перечисления.ТипыШтрихкодовИСМПТК.SSCC Тогда 
			ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка");
			//Для транспортной (логистической) упаковки не можем сразу определить GTIN, нужен запрос данных вложенных позиций с сервера.
			//GTINВерхнегоУровня у транспортной упаковки всегда пустой, т.к. в коде SSCC не содержится GTIN.
			GTINВерхнегоУровня = "";
			GTIN = "";
			НайденнаяНоменклатура = Неопределено;
		Иначе
			
			GTINВерхнегоУровня = ДанныеРазбора.СоставКодаМаркировки.GTIN;
			Если ДанныеРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Потребительская") Тогда
				GTIN = ДанныеРазбора.СоставКодаМаркировки.GTIN; //Для потребительского кода оба реквизита GTIN равны.
			Иначе
				GTIN = "";
			КонецЕсли;
			
			//Определяем номенклатуру верхнего уровня, т.е. для группового кода - номенклатуру упаковки (блока),
			//для потребительского - самого товара (штуки, пачки).
			ДанныеНоменклатуры = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, ДанныеРазбора.СоставКодаМаркировки.EAN);
			Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
				НайденнаяНоменклатура = ДанныеНоменклатуры.Номенклатура;
			Иначе
				НайденнаяНоменклатура = Неопределено;
			КонецЕсли;
			
			Если Не НайденнаяНоменклатура = Неопределено
				И Не НайденнаяНоменклатура.Пустая() Тогда
				ВидПродукции = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(НайденнаяНоменклатура);
			Иначе
				ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	КодыМаркировки = Новый Структура("КодМаркировки, КодИдентификации, GTIN, EAN, ВидУпаковки, ВидПродукции, Количество, GTINВерхнегоУровня");
	
	Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Групповая
		Или ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Потребительская Тогда 
		
		ГрупповаяУпаковка = ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Групповая;
		
		КодыМаркировки.КодМаркировки = ШтрихкодBase64;
		КодыМаркировки.GTIN = GTIN;
		КодыМаркировки.GTINВерхнегоУровня = GTINВерхнегоУровня;
		Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИСМПТК.Потребительская Тогда 
			КодыМаркировки.EAN = ДанныеРазбора.СоставКодаМаркировки.EAN;
		Иначе
			КодыМаркировки.EAN = "";
		КонецЕсли;
		КодыМаркировки.КодИдентификации = ДанныеРазбора.НормализованныйКодМаркировки;
		КодыМаркировки.ВидУпаковки		= ДанныеРазбора.ВидУпаковки;
		КодыМаркировки.ВидПродукции	= ВидПродукции;
		КодыМаркировки.Количество	= 1;
		
	Иначе
		
		КодыМаркировки.КодМаркировки = ШтрихкодBase64;
		КодыМаркировки.ВидУпаковки	 = ДанныеРазбора.ВидУпаковки;
		Если ДанныеРазбора.СоставКодаМаркировки.Свойство("SSCC") Тогда
			КодыМаркировки.GTIN = GTIN;
			КодыМаркировки.GTINВерхнегоУровня = GTINВерхнегоУровня;
			КодыМаркировки.EAN 	= ДанныеРазбора.СоставКодаМаркировки.SSCC;
		Иначе 
			КодыМаркировки.GTIN = GTIN;
			КодыМаркировки.GTINВерхнегоУровня = GTINВерхнегоУровня;
			КодыМаркировки.EAN 	= ДанныеРазбора.СоставКодаМаркировки.EAN;
		КонецЕсли;
		КодыМаркировки.КодИдентификации = ДанныеРазбора.НормализованныйКодМаркировки;
		КодыМаркировки.ВидУпаковки	= Перечисления.ВидыУпаковокИСМПТК.Логистическая;
		КодыМаркировки.ВидПродукции	= ВидПродукции;
		КодыМаркировки.Количество	= 1;
		
	КонецЕсли;
	
	Возврат КодыМаркировки;
	
КонецФункции

Функция ПолучитьДанныеРазбораКМ(ИсходныеДанные) Экспорт
	
	НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();  
	Возврат РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(ИсходныеДанные, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
	
КонецФункции
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает считанные из макета свойства ключей идентификаторов GS1
//
// Возвращаемое значение:
// 	Соответствие - Соответствие кодов идентификаторов их свойствам
// 	 * Ключ     - Строка - Код (ключ) идентификатора GS1. Только цифровые символы ключа идентификатора. Например, код "310X" будет преобразован в "310".
// 	 * Значение - Структура - Свойства идентификатора GS1
// 	   ** ИмяИдентификатора - Строка - Имя идентификатора применения в верхнем регистре, например, "МАССАНЕТТОВКГ" или "GTIN01" или "ДАТАПРОИЗВОДСТВА"
// 	   ** ПредставлениеИдентификатора - Строка - пользовательское Представление имени идентификатора, приводится к соответствующему языку в макете. Например, "Масса нетто в кг. (310Х)"
// 	   ** ПредставлениеИдентификатораДляУпорядочивания - Строка - Пользовательское представление имени идентификатора, ключ идентификатора с нецифровыми символами указывается в начале. 
// 	                                                              Используется в списках, где упорядочивание идет по представлению. Например, "(310Х) Масса нетто в кг."
// 	   ** ДлинаКода - Число - Количество знаков, отводимых в штрихкоде под значение параметра
// 	   ** ЗначениеПеременнойДлины - Булево - Признак переменной длины у параметра в штрихкоде
// 	   ** ДополнительныйПараметрИмя - Имя дополнительного параметра, прибавляемого к ключу (коду) идентификатора,
// 	                                  например, МассаНеттоВКг имеет ключ 310 и значение доп параметра от 0 до 5, тогда
// 	                                  полное значение ключа будет от 3100 до 3105, или в скобках от (3100) до (3105).
// 	                                  В данном случае дополнительный параметр задает количество знаков после запятой в штрихкоде.
// 	                                  Имя дополнительного параметра кодирует смысловое предназначение параметра.
// 	   ** ДлинаДопПараметра - Число - Длина дополнительного параметра в штрихкоде.
// 	   ** ДополнительныйПараметрМинимальноеЗначение - Число - Минимальное значение дополнительного параметра. Задается
// 	                                                          для случаев ручного интерактивного изменения (например при генерации штрихкода)
// 	   ** ДополнительныйПараметрМаксимальноеЗначение - Число - Максимальное значение дополнительного параметра
// 	   ** ДополнительныйПараметрЗначениеПоУмолчанию - Число - Значение по умолчанию для дополнительного параметра
// 	   ** ДополнительныйПараметрПредставление - Строка - Пользовательское представление имени дополнительного идентификатора
// 	   ** БазовыйТипДанных - Описание типов данных - Описание типов данных для значения идентификатора GS1. Может уточняться в зависимости
// 	                                                 от значения дополнительного параметра.
//
Функция ПрочитатьСвойстваКлючейИдентификаторовПрименения() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Базовый тип данных может уточняться значениями квалификаторов типов
	// в зависимости от значения дополнительного параметра.
	// См. ПечатьКодовМаркировкиИСМПКлиентСервер.ТипЗначенияПараметра
	КлючиИдентификаторов = Новый Соответствие;
	Макет = Обработки.ГенерацияШтрихкодовИСМПТК.ПолучитьМакет("ИдентификаторыПримененияGS1");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	Цифры = Новый Массив;
	Для ЗначениеСчетчика = 0 По 9 Цикл
		Цифры.Добавить(Формат(ЗначениеСчетчика, "ЧН=0; ЧГ=0"));
	КонецЦикла;
	
	Для НомерСтроки = 2 По ВысотаТаблицы Цикл
		ШаблонИмениОбласти = "R" + Формат(НомерСтроки, "ЧН=0; ЧГ=0");
		
		КлючИдентификатора    					   = СокрЛП(Макет.Область(ШаблонИмениОбласти + "C1").Текст);
		ИмяИдентификатора     					   = ВРЕГ(СокрЛП(Макет.Область(ШаблонИмениОбласти + "C2").Текст));
		ПредставлениеИдентификатора  			   = СокрЛП(Макет.Область(ШаблонИмениОбласти + "C3").Текст);
		БазовыйТипДанныхСтрока					   = ВРЕГ(СокрЛП(Макет.Область(ШаблонИмениОбласти + "C4").Текст));
		ДлинаКода             					   = СокрЛП(Макет.Область(ШаблонИмениОбласти + "C5").Текст);
		ЗначениеПеременнойДлины     			   = СокрЛП(Макет.Область(ШаблонИмениОбласти + "C6").Текст);
		ДополнительныйПараметрИмя    			   = ВРЕГ(СокрЛП(Макет.Область(ШаблонИмениОбласти + "C7").Текст));
		ДлинаДополнительногоПараметра			   = СокрЛП(Макет.Область(ШаблонИмениОбласти + "C8").Текст);
		ДополнительныйПараметрМинимальноеЗначение  = СокрЛП(Макет.Область(ШаблонИмениОбласти + "C9").Текст);
		ДополнительныйПараметрМаксимальноеЗначение = СокрЛП(Макет.Область(ШаблонИмениОбласти + "C10").Текст);
		ДополнительныйПараметрЗначениеПоУмолчанию  = СокрЛП(Макет.Область(ШаблонИмениОбласти + "C11").Текст);
		
		Если ПустаяСтрока(КлючИдентификатора) Тогда
			Продолжить;
		КонецЕсли;
		
		//КлючИдентификатора может содержать не цифровые символы дополнительных параметров
		КоличествоСимволов		  = СтрДлина(КлючИдентификатора);
		КлючИдентификатораЦифрами = "";
		Для ЗначениеСчетчика = 1 По КоличествоСимволов Цикл
			Символ = Сред(КлючИдентификатора, ЗначениеСчетчика, 1);
			Если НЕ Цифры.Найти(Символ) = Неопределено Тогда
				КлючИдентификатораЦифрами = КлючИдентификатораЦифрами + Символ;
			КонецЕсли;
		КонецЦикла;
		
		ДлинаКода = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СтрокаВЧисло(ДлинаКода);
		
		ЗначениеПеременнойДлины = ?(ВРЕГ(ЗначениеПеременнойДлины) = "ИСТИНА", Истина, Ложь);
		
		Если БазовыйТипДанныхСтрока 	   = ВРЕГ("Число") Тогда
			Если ДополнительныйПараметрИмя = ВРЕГ("ЧислоЗнаковПослеЗапятой") Тогда
				ЧислоЗнаковПослеЗапятой    = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СтрокаВЧисло(ДополнительныйПараметрЗначениеПоУмолчанию);
			Иначе
				ЧислоЗнаковПослеЗапятой = 0;
			КонецЕсли;
			КвалификаторыЧисла = Новый КвалификаторыЧисла(ДлинаКода, ЧислоЗнаковПослеЗапятой, ДопустимыйЗнак.Неотрицательный);
		Иначе
			КвалификаторыЧисла = Новый КвалификаторыЧисла;
		КонецЕсли;
		
		Если БазовыйТипДанныхСтрока = ВРЕГ("Строка") Тогда
			КвалификаторыСтроки = Новый КвалификаторыСтроки(ДлинаКода, ?(ЗначениеПеременнойДлины = Истина, ДопустимаяДлина.Переменная, ДопустимаяДлина.Фиксированная));
		Иначе
			КвалификаторыСтроки = Новый КвалификаторыСтроки;
		КонецЕсли;
		
		Если БазовыйТипДанныхСтрока = ВРЕГ("Дата") Тогда
			КвалификаторыДаты = Новый КвалификаторыДаты(ЧастиДаты.Дата);
		ИначеЕсли БазовыйТипДанныхСтрока = ВРЕГ("ДатаВремя") Тогда
			КвалификаторыДаты = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
			БазовыйТипДанныхСтрока = ВРЕГ("Дата");
		ИначеЕсли БазовыйТипДанныхСтрока = ВРЕГ("Время") Тогда
			КвалификаторыДаты = Новый КвалификаторыДаты(ЧастиДаты.Время);
			БазовыйТипДанныхСтрока = ВРЕГ("Дата");
		Иначе
			КвалификаторыДаты = Новый КвалификаторыДаты;
		КонецЕсли;
		
		БазовыйТипДанных = Новый ОписаниеТипов(БазовыйТипДанныхСтрока,,, КвалификаторыЧисла, КвалификаторыСтроки, КвалификаторыДаты);
		
		ДлинаДополнительногоПараметра 			   = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СтрокаВЧисло(ДлинаДополнительногоПараметра);
		ДополнительныйПараметрМинимальноеЗначение  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СтрокаВЧисло(ДополнительныйПараметрМинимальноеЗначение);
		ДополнительныйПараметрМаксимальноеЗначение = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СтрокаВЧисло(ДополнительныйПараметрМаксимальноеЗначение);
		ДополнительныйПараметрЗначениеПоУмолчанию  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СтрокаВЧисло(ДополнительныйПараметрЗначениеПоУмолчанию);
		
		Если ДополнительныйПараметрИмя = ВРЕГ("ЧислоЗнаковПослеЗапятой") Тогда
			ДополнительныйПараметрПредставление = НСтр("ru = 'Точность'");
		Иначе
			ДополнительныйПараметрПредставление = "";
		КонецЕсли;
		
		// Представление идентификатора для отображения на форме обработки
		ПредставлениеИдентификатораСКодомВКонце = ПредставлениеИдентификатора + " " + ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку("(%1)", КлючИдентификатора);
		// Представление идентификатора в списках, упорядочиваемых по представлению
		ПредставлениеИдентификатораДляУпорядочивания = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку("(%1)", КлючИдентификатора) + " " + ПредставлениеИдентификатора;
		
		Свойства = Новый Структура;
		Свойства.Вставить("ИмяИдентификатора", 							  ИмяИдентификатора);
		Свойства.Вставить("ПредставлениеИдентификатора", 				  ПредставлениеИдентификатораСКодомВКонце);
		Свойства.Вставить("ПредставлениеИдентификатораДляУпорядочивания", ПредставлениеИдентификатораДляУпорядочивания);
		Свойства.Вставить("ДлинаКода", 									  ДлинаКода);
		Свойства.Вставить("ЗначениеПеременнойДлины",					  ЗначениеПеременнойДлины);
		Свойства.Вставить("ДополнительныйПараметрИмя", 					  ДополнительныйПараметрИмя);
		Свойства.Вставить("ДлинаДопПараметра", 							  ДлинаДополнительногоПараметра);
		Свойства.Вставить("ДополнительныйПараметрМинимальноеЗначение", 	  ДополнительныйПараметрМинимальноеЗначение);
		Свойства.Вставить("ДополнительныйПараметрМаксимальноеЗначение",   ДополнительныйПараметрМаксимальноеЗначение);
		Свойства.Вставить("ДополнительныйПараметрЗначениеПоУмолчанию", 	  ДополнительныйПараметрЗначениеПоУмолчанию);
		Свойства.Вставить("ДополнительныйПараметрПредставление", 		  ДополнительныйПараметрПредставление);
		Свойства.Вставить("БазовыйТипДанных", 							  БазовыйТипДанных);
		КлючиИдентификаторов.Вставить(КлючИдентификатораЦифрами, Свойства);
		
	КонецЦикла;
	
	Возврат КлючиИдентификаторов;
	
КонецФункции

#Область МобильноеПриложение

Функция ЗагруженныеДокументыСканированияВыборНаСервере(Номер) Экспорт
	
	Возврат ОбменДаннымиМобильноеПриложениеМаркировкаИСМПТК.ЗагруженныеДокументыСканированияВыборНаСервере(Номер);
	
КонецФункции

Функция МобильноеПриложениеЗагрузитьТоварыНаСервере() Экспорт
	
	Список = Новый СписокЗначений;
	
	Соединение = ОбменДаннымиМобильноеПриложениеМаркировкаИСМПТК.УстановитьСоединениеССервером();
	Если Соединение = Неопределено Тогда
		Возврат Список;
	КонецЕсли;
	
	ТЗСериализованная = Соединение.GiveAllDocs();
	ТЗ = ОбменДаннымиМобильноеПриложениеМаркировкаИСМПТК.Десериализовать(ТЗСериализованная);
	
	Для Каждого Строка Из ТЗ Цикл
		Список.Добавить(Строка.Number,Строка.Name + " от " + Строка.Date);
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

#КонецОбласти

#КонецОбласти