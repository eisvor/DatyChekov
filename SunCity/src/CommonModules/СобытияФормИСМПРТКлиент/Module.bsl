#Область СобытияЭлементовФорм

// Клиентская переопределяемая процедура, вызываемая из обработчика события элемента.
//
// Параметры:
//   Форма                   - УправляемаяФорма - форма, из которой происходит вызов процедуры.
//   Элемент                 - Строка           - имя элемента-источника события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	Если Форма.ИмяФормы = "Документ.РеализацияТоваров.Форма.ФормаДокумента" Тогда
		
		Если Элемент = Форма.Элементы.Товары Тогда
		
			ТекущаяСтрока = Форма.Элементы.Товары.ТекущиеДанные;
			Если ТекущаяСтрока = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			НужноПересчитатьКеш = ПроверкаИПодборПродукцииИСКлиент.ПрименитьКешПоСтроке(
				Форма,
				Форма.Объект.Товары,
				ТекущаяСтрока,
				Форма.ТоварыКешТекущейСтроки);
			
			Если НужноПересчитатьКеш Тогда
				ДополнительныеПараметры.Вставить("ТребуетсяСерверныйВызов");
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Форма.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаЭлемента"
		И Элемент = Форма.Элементы.ВидНоменклатуры Тогда
		ИнтеграцияИСРТКлиентСервер.ЗаполнитьДанныеНастройкиПараметровНоменклатурыИС(Форма, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриВыбореЭлемента(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры) Экспорт

	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

// См. СобытияФормИСМПКлиентПереопределяемый.ОбработкаОповещения
//
Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры) Экспорт
	
	Если СтрНачинаетсяС(ИмяСобытия, "ЗакрытиеФормыПроверкиИПодбораГосИС")
		И ДополнительныеПараметры <> Неопределено Тогда
		Если Источник = Форма.УникальныйИдентификатор Тогда
			ДополнительныеПараметры.СтандартнаяОбработка = Ложь;
			ДополнительныеПараметры.ТребуетсяСерверныйВызов = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// См. СобытияФормИСМПКлиентПереопределяемый.ОбработкаНавигационнойСсылки
//
Процедура ОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// См. СобытияФормИСМПКлиентПереопределяемый.ПослеЗаписи
//
Процедура ПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	Возврат;
	
КонецПроцедуры

// См. СобытияФормИСМПКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду
//
Процедура ВыполнитьПереопределяемуюКоманду(Форма, Команда, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Команда) = Тип("Строка") Тогда
		ИмяКоманды = Команда;
	Иначе
		ИмяКоманды = Команда.Имя;
	КонецЕсли;
	
	Если ИмяКоманды = "ОтправитьРаспоряжениеНаПриемкуКладовщику" Тогда
		Контекст = Новый Структура;
		Контекст.Вставить("ОтправитьРаспоряжениеНаПриемкуКладовщику");
		Форма.Подключаемый_ВыполнитьПереопределяемуюКомандуНаСервере(Контекст, Неопределено);
	ИначеЕсли ИмяКоманды = "НайтиПараметрыУказанияСерийФормы" Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыУказанияСерий") Тогда
			ДополнительныеПараметры = Форма.ПараметрыУказанияСерий;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСТСД

// В процедуре нужно реализовать алгоритм передачи данных в ТСД.
//
// Параметры:
//  Форма - УправляемаяФорма - форма документа, инициировавшая выгрузку.
Процедура ВыгрузитьДанныеВТСД(Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// В процедуре нужно реализовать алгоритм заполнения формы данными из ТСД.
//
// Параметры:
//  ОписаниеОповещения - ОписаниеОповещения - процедура, которую нужно вызвать после заполнения данных формы,
//  Форма - УправляемаяФорма - форма, данные в которой требуется заполнить,
//  РезультатВыполнения - (См. МенеджерОборудованияКлиент.ПараметрыВыполненияОперацииНаОборудовании).
Процедура ПриПолученииДанныхИзТСД(ОписаниеОповещения, Форма, РезультатВыполнения) Экспорт
	
	
	Если РезультатВыполнения.Результат Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения.ТаблицаТоваров);
		
	Иначе
		
		СобытияФормИСКлиент.СообщитьОбОшибке(РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Номенклатура

// См. СобытияФормИСМПКлиентПереопределяемый.ПриСозданииНоменклатуры.
//
// Параметры:
//  Владелец     - УправляемаяФорма            - Форма владелец.
//  ДанныеСтроки - ДанныеФормыЭлементКоллекции - текущие данные строки таблицы товаров откуда производится создание.
Процедура ПриСозданииНоменклатуры(Владелец, ДанныеСтроки, СтандартнаяОбработка, ВидПродукцииИС) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	
	ОсобенностьУчета = ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукцииИС);
	
	Если ОсобенностьУчета <> Неопределено Тогда
		ПараметрыФормы.Вставить("ОсобенностьУчета", ОсобенностьУчета);
	КонецЕсли;
	
	Если ДанныеСтроки.Свойство("ПредставлениеНоменклатуры") Тогда
		ПараметрыФормы.Вставить("Наименование", ДанныеСтроки.ПредставлениеНоменклатуры);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыФормы, Владелец);
	
КонецПроцедуры

// См. СобытияФормИСМПКлиентПереопределяемый.ОбработкаВыбораНоменклатуры.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - Метод формы, который обрабатывает событие выбора.
//  ВыбранноеЗначение       - ОпределяемыйТип..Номенклатура - Результат выбора.
//  ИсточникВыбора          - УправляемаяФорма - Форма, в которой произведен выбор.
Процедура ОбработкаВыбораНоменклатуры(ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	Если СтрНачинаетсяС(ИсточникВыбора.ИмяФормы, "Справочник.Номенклатура") Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

// См. СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииНоменклатуры.
//
// Параметры:
//  Форма                  - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока          - ДанныеФормыЭлементКоллекции - текущие данные редактируемой строки таблицы товаров,
//  КэшированныеЗначения   - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыУказанияСерий - ФиксированнаяСтруктура - параметры указаний серий формы
Процедура ПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий = Неопределено) Экспорт
	
	СтруктураДействий = Новый Структура;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Характеристика") Тогда
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Номенклатура", "Номенклатура");
		СтруктураПараметров.Вставить("ХарактеристикиИспользуются", "ХарактеристикиИспользуются");
		
		СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметров);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Артикул") Тогда
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ЕдиницаИзмерения") Тогда
		СтруктураДействий.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ЕдиницаИзмерения"));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СтавкаНДС") Тогда
		СтруктураПараметровСтавкиНДС = Новый Структура;
		СтруктураПараметровСтавкиНДС.Вставить("Дата", Форма.Объект.Дата);
		СтруктураПараметровСтавкиНДС.Вставить("УчитыватьНДС", Истина);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", СтруктураПараметровСтавкиНДС);
	КонецЕсли;

	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СуммаНДС") Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СуммаСНДС") Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Сумма") Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Упаковка") Тогда
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КодТНВЭД") Тогда
		СтруктураДействий.Вставить("ЗаполнитьКодТНВЭД");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбработатьСтрокуТЧСВызовомСервера(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

// Открывает форму подбора номенклатуры.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой вызывается команда открытия обработки сопоставления,
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы подбора.
Процедура ОткрытьФормуПодбораНоменклатуры(Форма, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Форма.Объект.Ссылка);
	Иначе
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.МаркировкаТоваровИСМП") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Маркировка товаров ИС МП'"));
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Заказ на эмиссию кодов маркировки СУЗ ИС МП'"));
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ОтгрузкаТоваровИСМП") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Отгрузка товаров ИС МП'"));
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.СписаниеКодовМаркировкиИСМП") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Списание кодов маркировки ИС МП'"));
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ВыводИзОборотаИСМП") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Вывод из оборота ИС МП'"));
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ПеремаркировкаТоваровИСМП") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Перемаркировка товаров ИС МП'"));
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ОсобенностьУчета"                       , ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(Форма.Объект.ВидПродукции));
	ПараметрыФормы.Вставить("РежимПодбораБезКоличественныхПараметров", Истина);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров"      , Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены"                 , Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры"        , Истина);
	ПараметрыФормы.Вставить("Заголовок"                              , ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата"                                   , Форма.Объект.Дата);
	ПараметрыФормы.Вставить("Документ"                               , Форма.Объект.Ссылка);
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, Форма, Форма.УникальныйИдентификатор,,, ОповещениеПриЗавершении);
	
КонецПроцедуры

#КонецОбласти

#Область ХарактеристикиНоменклатуры

// См. СобытияФормИСМПКлиентПереопределяемый.ПриНачалеВыбораХарактеристики.
//
// Параметры:
//  Владелец     - УправляемаяФорма            - форма, в которой вызывается команда выбора характеристики.
//  ДанныеСтроки - ДанныеФормыЭлементКоллекции - текущие данные строки таблицы товаров откуда производится выбор.
//  СтандартнаяОбработка - Булево - Выключается в переопределении
//  Описание - ОписаниеОповещения - Вызывается при выборе значения в форме выбора.
//
Процедура ПриНачалеВыбораХарактеристики(
	Владелец, ДанныеСтроки, СтандартнаяОбработка, ИмяКолонкиНоменклатура = "Номенклатура", Описание = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыХарактеристики = Новый Структура;
	ПараметрыХарактеристики.Вставить("Номенклатура", ДанныеСтроки[ИмяКолонкиНоменклатура]);
	
	ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора", ПараметрыХарактеристики, Владелец,,,, Описание);
	
КонецПроцедуры

// См. СобытияФормИСМПКлиентПереопределяемый.ОбработкаВыбораХарактеристики.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - Метод формы, который обрабатывает событие выбора.
//  ВыбранноеЗначение      - ОпределяемыйТип.ХарактеристикаНоменклатуры - результат выбора.
//  ИсточникВыбора         - УправляемаяФорма - Форма, в которой произведен выбор.
Процедура ОбработкаВыбораХарактеристики(ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	Если СтрНачинаетсяС(ИсточникВыбора.ИмяФормы, "Справочник.ХарактеристикиНоменклатуры") Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

// См. СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииХарактеристики.
//
// Параметры:
//  Форма                - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - текущие данные редактируемой строки таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
Процедура ПриИзмененииХарактеристики(Форма, ТекущаяСтрока, КэшированныеЗначения) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти


#Область Количество

// См. СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииКоличества.
//
Процедура ПриИзмененииКоличества(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий = Неопределено) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Товары") Тогда
		
		СтруктураДействий = Новый Структура;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Упаковка") Тогда
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		КонецЕсли;
		
		Если КэшированныеЗначения = Неопределено Тогда
			КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
		КонецЕсли;
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Форма.Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КОнецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СуммаИНДС

// См. СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииСтавкиНДС.
//
// Параметры:
//  Форма                  - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока          - ДанныеФормыЭлементКоллекции - текущие данные редактируемой строки таблицы товаров,
//  КэшированныеЗначения   - Структура - сохраненные значения параметров, используемых при обработке,
Процедура ПриИзмененииСтавкиНДС(Форма, ТекущаяСтрока, КэшированныеЗначения) Экспорт
	
	СтруктураДействий = Новый Структура;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СуммаНДС") Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СуммаСНДС") Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Сумма") Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
	КонецЕсли;
	ОбработкаТабличнойЧастиТоварыКлиент.ОбработатьСтрокуТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

// См. СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииСуммы.
//
// Параметры:
//  Форма                  - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока          - ДанныеФормыЭлементКоллекции - текущие данные редактируемой строки таблицы товаров,
//  КэшированныеЗначения   - Структура - сохраненные значения параметров, используемых при обработке,
Процедура ПриИзмененииСуммы(Форма, ТекущаяСтрока, КэшированныеЗначения) Экспорт
	
	СтруктураДействий = Новый Структура;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СуммаНДС") Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СуммаСНДС") Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
	КонецЕсли;
	ОбработкаТабличнойЧастиТоварыКлиент.ОбработатьСтрокуТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	
КонецПроцедуры

// См. СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииСуммыНДС.
//
// Параметры:
//  Форма                  - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока          - ДанныеФормыЭлементКоллекции - текущие данные редактируемой строки таблицы товаров,
//  КэшированныеЗначения   - Структура - сохраненные значения параметров, используемых при обработке,
Процедура ПриИзмененииСуммыНДС(Форма, ТекущаяСтрока, КэшированныеЗначения) Экспорт
	
	СтруктураДействий = Новый Структура;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СуммаСНДС") Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
	КонецЕсли;
	ОбработкаТабличнойЧастиТоварыКлиент.ОбработатьСтрокуТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

// См. СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииЦены.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыУказанияСерий - ФиксированнаяСтруктура - параметры указаний серий формы
Процедура ПриИзмененииЦены(Форма, ТекущаяСтрока, КэшированныеЗначения) Экспорт
	
	СтруктураДействий = Новый Структура;
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
	КонецЕсли;
	ОбработкаТабличнойЧастиТоварыКлиент.ОбработатьСтрокуТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

#Область GTIN

Процедура ПриНачалеВыбораGTIN(Элемент, ТекущиеДанные, СтандартнаяОбработка) Экспорт
	
	МассивGTIN = ИнтеграцияИСРТВызовСервера.МассивGTINМаркированногоТовара(
	ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика);
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(МассивGTIN);
	
КонецПроцедуры

Процедура ПриНачалеВыбораКодТНВЭД(Владелец, ДанныеСтроки, СтандартнаяОбработка, Описание = Неопределено) Экспорт
	
	Если ДанныеСтроки <> Неопределено Тогда
		
		ПараметрыФормы = Новый Структура;
		
		ТНВЭД = ИнтеграцияИСМПВызовСервера.КлассификаторТНВЭДПоКоду(ДанныеСтроки.КодТНВЭД);
		Если ЗначениеЗаполнено(ТНВЭД) Тогда
			ПараметрыФормы.Вставить("ТекущаяСтрока", ТНВЭД);
		КонецЕсли;
		
		ОткрытьФорму("Справочник.КлассификаторТНВЭД.ФормаВыбора", ПараметрыФормы, Владелец,,,, Описание);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти




#КонецОбласти
