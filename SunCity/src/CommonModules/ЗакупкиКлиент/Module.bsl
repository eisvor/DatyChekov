////////////////////////////////////////////////////////////////////////////////
// ЗакупкиКлиент. Содержит вспомогательные процедуры и функции
//  обработки закупок.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПроцедурыТабличнойЧастиЭтапыОплат

// Формирует строку ТЧ ЭтапыОплаты,
// стандартная обработка игнорируется через параметр Отказ.
//
// Параметры:
//  Объект - ДокументОбъект.ЗаказПостащику,
//           ДокументОбъект.ОтчетКомитентуОПродажах,
//           ДокументОбъект.ПоступлениеТоваров - документ в табличную часть которого будет добавлен этап оплаты.
//  Элементы - элементы формы.
//  СуммаЗаказа - Число - сумма заказа документа.
//  ДокументПоступленияСуществует - Булево - признак наличия документа поступления.
//  Отказ - Булево - признак отказа от выполнения операции.
//  Копирование - Булево - признак копирования этапа оплаты.
//  ЗапрашиватьДатуПлатежа - Булево - признак необходимости запрашивания даты платежа.
//
Процедура ДобавитьЭтапОплаты(Объект, Элементы, СуммаЗаказа, ДокументПоступленияСуществует, Отказ, Копирование = Ложь, ЗапрашиватьДатуПлатежа = Истина) Экспорт
	
	СуммаОплаты = Объект.ЭтапыОплат.Итог("Сумма");
	
	ЭтоЗаказПоставщику = ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику");
	
	Если СуммаОплаты > СуммаЗаказа Тогда
		
		Если ДокументПоступленияСуществует Тогда
			
			ТекстОшибки = НСтр("ru = 'Добавление платежа не требуется
			|сумма оплат %СуммаОплаты% превышает сумму 
			|поступления товаров %СуммаЗаказа%'");
			
		Иначе
			
			ТекстОшибки = НСтр("ru = 'Добавление платежа не требуется
			|сумма оплат %СуммаОплаты% превышает 
			|сумму заказа %СуммаЗаказа%'");
						
		КонецЕсли;
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки,"%СуммаОплаты%",СуммаОплаты);
		ТекстОшибки = СтрЗаменить(ТекстОшибки,"%СуммаЗаказа%",СуммаЗаказа);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстОшибки,
			,
			"Объект.ЭтапыОплат",
			,
			Отказ);
	
	ИначеЕсли СуммаЗаказа <> 0 И СуммаОплаты = СуммаЗаказа Тогда
				
		Если ДокументПоступленияСуществует Тогда
			
			ТекстОшибки = НСтр("ru = 'Добавление платежа не требуется
			|сумма оплат %СуммаОплаты% соответствует сумме 
			|поступления товаров %СуммаЗаказа%'");
			
		Иначе
			
			ТекстОшибки = НСтр("ru = 'Добавление платежа не требуется
			|сумма оплат %СуммаОплаты% соответствует
			|сумме заказа %СуммаЗаказа%'");
			
		КонецЕсли;
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки,"%СуммаОплаты%",СуммаОплаты);
		ТекстОшибки = СтрЗаменить(ТекстОшибки,"%СуммаЗаказа%",СуммаЗаказа);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстОшибки,
			,
			"Объект.ЭтапыОплат",
			,
			Отказ);
		
	ИначеЕсли СуммаЗаказа = 0 Тогда
									
		ТекстОшибки = НСтр("ru = 'Не заданы суммы в табличной части ""Товары""'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстОшибки,
			,
			"Объект.Товары",
			,
			Отказ);
		
	Иначе
		
		ДатаПоступления = ?(ЭтоЗаказПоставщику, Объект.ДатаПоступления, НачалоДня(Объект.Дата));
		
		СуммаОплаты = СуммаЗаказа - СуммаОплаты;
		
		Если СуммаОплаты <> 0 Тогда
			
			ДатаЭтапаПлатежа = ДатаПоступления;
			
			Если Объект.ЭтапыОплат.Количество() > 0 Тогда
				
				ДатаЭтапаПлатежа = Макс(Объект.ЭтапыОплат[Объект.ЭтапыОплат.Количество()-1].ДатаПлатежа,ДатаПоступления);
				
			КонецЕсли;
			
				
			Если ДатаЭтапаПлатежа = Дата('00010101') Тогда
				
				ТекстОшибки = НСтр("ru = 'Не выбрана дата платежа'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(
				ТекстОшибки,
				,
				"Объект",
				,
				Отказ);
				
			Иначе
				
				
				СтрокаЭтапаОплаты = Объект.ЭтапыОплат.Добавить();
				СтрокаЭтапаОплаты.ДатаПлатежа   = ДатаЭтапаПлатежа;
				СтрокаЭтапаОплаты.ПроцентОплаты = ?(СуммаЗаказа = 0, 0, Окр(100*СуммаОплаты/СуммаЗаказа, 2, РежимОкругления.Окр15как20));
				
				Для Инд = 0 По Объект.ЭтапыОплат.Количество() - 2 Цикл
					ПересчитатьСуммуПроцентОплаты(Объект, СуммаЗаказа, Объект.ЭтапыОплат[Инд], Объект.ЭтапыОплат[Инд].Сумма, Истина);
				КонецЦикла;
				
				СтрокаЭтапаОплаты.Сумма = СуммаОплаты;
				СтрокаЭтапаОплаты.Сумма = СтрокаЭтапаОплаты.Сумма + (СуммаЗаказа - Объект.ЭтапыОплат.Итог("Сумма"));
				ВидПлатежа = ПредопределенноеЗначение("Перечисление.ВидПлатежа.ОтсрочкаПлатежа");
				Если Копирование Тогда
					ТекущаяСтрока = Элементы.ЭтапыОплат.ТекущиеДанные;
					Если ТекущаяСтрока <> Неопределено Тогда
						СтрокаЭтапаОплаты.ФормаОплаты = ТекущаяСтрока.ФормаОплаты;
					КонецЕсли;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СтрокаЭтапаОплаты.ФормаОплаты) Тогда
					СтрокаЭтапаОплаты.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная");
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДатаПоступления) Тогда
					
					Если ДатаЭтапаПлатежа < ДатаПоступления Тогда
						
						ВидПлатежа = ПредопределенноеЗначение("Перечисление.ВидПлатежа.Предоплата");
						
					Иначе
						
						СтрокаЭтапаОплаты.ОтсрочкаПлатежа = (ДатаЭтапаПлатежа - ДатаПоступления) / 86400;
						
					КонецЕсли;
					
				Иначе
					
					ВидПлатежа = ПредопределенноеЗначение("Перечисление.ВидПлатежа.Предоплата");
					
				КонецЕсли;
				
				СтрокаЭтапаОплаты.ВидПлатежа = ВидПлатежа;
				
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Показывает оповещение пользователя об окончании заполнения этапов оплаты.
//
// Параметры:
// Контрагент - Булево - Признак успешного расчета цен хотя бы в одной строке.
//
Процедура ОповеститьОбОкончанииЗаполненияЭтаповОплаты(Контрагент) Экспорт
	
	ПоказатьОповещениеПользователя(
				НСтр("ru = 'Этапы оплаты заполнены'"),
				,
				СтрЗаменить(НСтр("ru='Этапы оплаты по поставщику ""%Контрагент%"" в документе заполнены'"), "%Контрагент%", Контрагент),
				БиблиотекаКартинок.Информация32);
			
КонецПроцедуры

// Пересчитывает процент оплаты и сумму оплаты.
//
// Параметры:
//  Объект - ДокументОбъект.ЗаказПостащику,
//           ДокументОбъект.ОтчетКомитентуОПродажах,
//           ДокументОбъект.ПоступлениеТоваров - документ в котором необходимо пересчитать процент и суммы оплаты.
//  СуммаИтог - Число - итоговая сумма документа после пересчета.
//  СтрокаПересчета  - Строка - строка табличной части Этапы оплат.
//  ЗначениеПересчета - Число - Значение относительно которого выполняется пересчет.
//  ПересчитатьПроцентОплаты - Булево - Признак что пересчитывается процент оплаты или сумма оплаты.
//
Процедура ПересчитатьСуммуПроцентОплаты(Объект, СуммаИтог, СтрокаПересчета, ЗначениеПересчета, ПересчитатьПроцентОплаты) Экспорт 
	
	
	ИмяКолонкиПроцент = "ПроцентОплаты";
	
	Если НЕ СуммаИтог = 0 Тогда
		
		Если ПересчитатьПроцентОплаты Тогда
			
			СтрокаПересчета[ИмяКолонкиПроцент] = Окр(100*ЗначениеПересчета/СуммаИтог, 2, РежимОкругления.Окр15как20);
			
		Иначе
			
			СтрокаПересчета.Сумма = Окр(ЗначениеПересчета / 100 * СуммаИтог, 2, РежимОкругления.Окр15как20);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Создает документ "Счет-фактура полученный" с признаком "Исправление" или открывает существующий.
//
// Параметры:
//  Форма - Форма - Форма, из которой вызвана команда. Устанавливается владельцем открываемой формы счета-фактуры.
//  Организация - СправочникСсылка.Организации - Организация, на имя которой оформляется счет-фактура.
//  ОткрыватьСуществующую - Булево - Признак необходимости поиска и открытия формы найденного счета-фактуры.
//  Исправление - Булево - Истина - Создается исправление счета-фактуры.
//  Корректировочный - Булево - Истина - Создается корректировка счета-фактуры.
//
Процедура ВвестиСчетФактуру(Форма, Организация, ОткрыватьСуществующую = Ложь, Исправление = Ложь, Корректировочный = Ложь) Экспорт
	
	ВводитьСчетФактуру = Истина;
	
	Если ОткрыватьСуществующую Тогда
		СчетФактураДокумента = ЗакупкиВызовСервера.СчетФактураДокумента(Форма.Объект.Ссылка, Организация, Ложь, Исправление);
		Если ЗначениеЗаполнено(СчетФактураДокумента) Тогда
			ВводитьСчетФактуру = Ложь;
			
			ПараметрыФормы = Новый Структура("Ключ, ДокументОснование, ВозвращатьПараметрыПредставления",
				СчетФактураДокумента, Форма.Объект.Ссылка, Истина);
			ОткрытьФорму("Документ.СчетФактураПолученный.ФормаОбъекта", ПараметрыФормы, Форма);
		КонецЕсли;
	КонецЕсли;
	
	Если ВводитьСчетФактуру
		И (НЕ ЗначениеЗаполнено(Форма.Объект.Ссылка)
		ИЛИ НЕ Форма.Объект.Проведен
		ИЛИ Форма.Модифицированность) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Организация", Организация);
		ДополнительныеПараметры.Вставить("Исправление", Исправление);
		ДополнительныеПараметры.Вставить("Корректировочный", Корректировочный);
		ДополнительныеПараметры.Вставить("ОткрыватьСуществующую", ОткрыватьСуществующую);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеВопросНаПроведение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Ввод счета-фактуры возможен только после проведения документа, провести документ?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ОткрытьФормуСчетаФактуры(Форма, Организация, ВводитьСчетФактуру, Исправление, ОткрыватьСуществующую, Корректировочный);
		
	КонецЕсли;
	
КонецПроцедуры

// Оповещение ответ на вопрос о проведении.
//
// Параметры:
//  КодОтвета - Булево - ответ на вопрос всплывающего окна.
//  ДополнительныеПараметры - Структура - дополнительные параметры процедуры.
//
Процедура ОповещениеВопросНаПроведение(КодОтвета, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	Организация = ДополнительныеПараметры.Организация;
	Исправление = ДополнительныеПараметры.Исправление;
	Корректировочный = ДополнительныеПараметры.Корректировочный;
	ОткрыватьСуществующую = ДополнительныеПараметры.ОткрыватьСуществующую;
	
	Если КодОтвета = КодВозвратаДиалога.Да Тогда
		Попытка
			ВводитьСчетФактуру = Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		Исключение
			ПоказатьПредупреждение(,НСтр("ru = 'Не удалось выполнить проведение документа'"));
			ВводитьСчетФактуру = Ложь;
			Возврат;
		КонецПопытки;
	Иначе
		ВводитьСчетФактуру = Ложь;
	КонецЕсли;
	
	ОткрытьФормуСчетаФактуры(Форма, Организация, ВводитьСчетФактуру, Исправление, ОткрыватьСуществующую, Корректировочный);
	
КонецПроцедуры

#КонецОбласти

#Область КомиссионнаяТорговля

// Устанавливает доступность элементов табличной части товары на клиенте.
//
// Параметры:
//  Форма - Форма - форма, из которой вызвана команда. Устанавливается владельцем открываемой формы счета-фактуры.
//  ТекущиеДанные - ТекущиеДанные - текущие данные формы.
//  ДоступныеЭлементы - Массив - массив доступных элементов для которых необходимо изменить доступность.
//
Функция УстановитьДоступностьЭлементовТабличнойЧастиТоварыКлиент(Форма, ТекущиеДанные, ДоступныеЭлементы) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ДоступностьЭлементовСтроки              = Ложь;
	ДоступностьРедактированияНоменклатуры   = Истина;
	ДоступностьРедактированияХарактеристики = Ложь;
	
	Если ТекущиеДанные.Характеристика.Пустая() Тогда
		ДоступностьРедактированияХарактеристики = Истина;
	КонецЕсли;
	
	Элементы.ТоварыНоменклатура.ТолькоПросмотр   = Не ДоступностьРедактированияНоменклатуры;
	Элементы.ТоварыХарактеристика.ТолькоПросмотр = Не ДоступностьРедактированияХарактеристики;
	
	Для каждого ТекущийЭлемент Из ДоступныеЭлементы Цикл
		Элементы[ТекущийЭлемент].ТолькоПросмотр = ДоступностьЭлементовСтроки;
	КонецЦикла; 
	
КонецФункции

// Проверяет возможность заполнения табличной части по графику поставщика.
//
// Параметры:
//  Параметры - Структура - параметры процедуры.
//
Функция ЕстьВозможностьЗаполнитьПоГрафикуПоставщика(Параметры) Экспорт
	
	Отказ          = Ложь; 
	ТекстСообщения = НСтр("ru = 'Табличная часть ""%1"" не заполнена.'");
	
	Если Параметры.ТоварыОтсутствуют Тогда
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%1", "Товары" );
		Отказ = Истина;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстСообщения",ТекстСообщения);
	Результат.Вставить("Отказ",         Отказ);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыОбработкиКомандПользователя

// Формирует список выбора номеров ГТД с отбором по номенклатуре, характеристике
//
// Параметры:
//	ТекущаяСтрока - ДанныеФормыЭлементКоллекции - текущая строка таблицы Товары
//	СписокВыбора  - СписокЗначений - список выбора номеров ГТД.
//
Процедура ЗаполнитьСписокВыбораНомеровГТД(ТекущаяСтрока, СписокВыбора) Экспорт
	
	Если ТекущаяСтрока = Неопределено Или Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		СписокВыбора.Очистить();
	Иначе
		СписокЗначений = ЗакупкиВызовСервера.ЗаполнитьСписокВыбораНомеровГТД(
			ТекущаяСтрока.Номенклатура,
			ТекущаяСтрока.Характеристика);
		
		СписокВыбора.Очистить();
		Для каждого ТекСтр Из СписокЗначений Цикл
			НовСтрока = СписокВыбора.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока,ТекСтр);
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОткрытьФормуСчетаФактуры(Форма, Организация, ВводитьСчетФактуру, Исправление, ОткрыватьСуществующую, Корректировочный)
	
	Если ВводитьСчетФактуру И (Исправление Или Корректировочный) Тогда
		СчетФактураДокумента = ЗакупкиВызовСервера.СчетФактураДокумента(Форма.Объект.Ссылка, Организация, Ложь, Исправление);
		Если ЗначениеЗаполнено(СчетФактураДокумента)
				И НЕ ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(СчетФактураДокумента, "Проведен") Тогда
			Если Исправление Тогда
				ПоказатьПредупреждение(,НСтр("ru = 'Ввод исправительного счета-фактуры возможен только на основании проведенного счета-фактуры.'"));
			ИначеЕсли Корректировочный Тогда
				ПоказатьПредупреждение(,НСтр("ru = 'Ввод корректировочного счета-фактуры возможен только на основании проведенного счета-фактуры.'"));
			КонецЕсли;
			ВводитьСчетФактуру = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ВводитьСчетФактуру Тогда
		
		ДанныеСчетаФактуры = Новый Структура;
		ДанныеСчетаФактуры.Вставить("ДокументОснование", Форма.Объект.Ссылка);
		ДанныеСчетаФактуры.Вставить("Организация"      , Организация);
		ДанныеСчетаФактуры.Вставить("Исправление"      , Исправление);
		ДанныеСчетаФактуры.Вставить("Корректировочный" , Корректировочный);
		
		Если Форма.Объект.Свойство("Контрагент") Тогда
			ДанныеСчетаФактуры.Вставить("Контрагент", Форма.Объект.Контрагент);
		ИначеЕсли Форма.Объект.Свойство("Организация") Тогда
			ДанныеСчетаФактуры.Вставить("Контрагент",
			ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(Форма.Объект.Организация,"СобственныйКонтрагент"));
		КонецЕсли;
		
		Если ОткрыватьСуществующую Тогда
			ДанныеСчетаФактуры.Вставить("ДатаИсправления", Форма.Объект.Дата);
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("Основание, ДокументОснование, ВозвращатьПараметрыПредставления",
			ДанныеСчетаФактуры, Форма.Объект.Ссылка, Истина);
		ОткрытьФорму("Документ.СчетФактураПолученный.ФормаОбъекта", ПараметрыФормы, Форма);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
