#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытийФормы

// См. СобытияФормИСКлиентПереопределяемый.ПроверитьЗаполнение
//
Процедура ПроверитьЗаполнение(Форма, Отказ) Экспорт
	
	Если Форма.ИмяФормы = "ОбщаяФорма.ФормаУточненияДанныхИС" Тогда
		Если Не ЗначениеЗаполнено(Форма.Характеристика) И Форма.ХарактеристикиИспользуются Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчики событий обрабатываемых БГосИС в прикладных формах
//
// Параметры:
//  Форма                   - УправляемаяФорма - оповещаемая форма,
//  ИмяСобытия              - Строка           - имя события,
//  Параметр                - Произвольный     - параметр сообщения. Могут быть переданы любые необходимые данные,
//  Источник                - Произвольный     - источник события.
//  ДополнительныеПараметры - Структура        - дополнительные параметры обработки
Процедура ОбработкаОповещенияИС(Форма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры) Экспорт
	
	Если Форма.ИмяФормы = "Обработка.РМКУправляемыйРежим.Форма.Форма"
		Или Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента" Тогда
			
		Если Источник = "ПодключаемоеОборудование" И Форма.ВводДоступен() Тогда
			Если ИмяСобытия = "ScanData" И ПодключаемоеОборудованиеРТКлиент.ЕстьНеобработанноеСобытие() Тогда
				Если Форма.ИспользоватьАкцизныеМарки Тогда
					ДополнительныеПараметры.СтандартнаяОбработка = Ложь;
					МенеджерОборудованияКлиентПереопределяемый.ОбработатьСобытие();
					
					ДанныеШтрихкода = МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр);
					ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьКодМаркировки", Форма);
					ВыполнитьОбработкуОповещения(ОписаниеОповещения, ДанныеШтрихкода);
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает нажатие на гиперссылку со статусом обработки в ИС.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло нажатие на гиперссылку,
//  НавигационнаяСсылкаФорматированнойСтроки - Строка - значение гиперссылки форматированной строки,
//  СтандартнаяОбработка - Булево - признак стандартной (системной) обработки события.
//
Процедура ОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	Если Форма.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаЭлемента"
		И СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "ГиперссылкаОткрытьФормуНастройкиПараметровНоменклатурыИС") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыОповещения = Новый Структура();
		ПараметрыОповещения.Вставить("Гиперссылка", НавигационнаяСсылкаФорматированнойСтроки);
		ПараметрыОповещения.Вставить("ИмяЭлемента", "НастройкаПараметровНоменклатурыИС");
		
		Оповестить("ГиперссылкаОткрытьФормуНастройкиПараметровНоменклатурыИС", ПараметрыОповещения, Форма);
		
	ИначеЕсли Форма.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаЭлемента"
		И СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "ГиперссылкаОткрытьФормуНастройкиВидовУпаковокПоGTINИСМП") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыОповещения = Новый Структура();
		ПараметрыОповещения.Вставить("Гиперссылка", НавигационнаяСсылкаФорматированнойСтроки);
		ПараметрыОповещения.Вставить("ИмяЭлемента", "ОткрытьФормуНастройкиВидовУпаковокПоGTINИСМП");
		
		Оповестить("ГиперссылкаОткрытьФормуНастройкиВидовУпаковокПоGTINИСМП", ПараметрыОповещения, Форма);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

// Обработчик переопределяемой команды формы.
//
// Параметры:
//  Форма   - УправляемаяФорма - форма объекта справочника или документа,
//  Команда - КомандаФормы     - команда формы.
//
Процедура ВыполнитьПереопределяемуюКоманду(Форма, Команда) Экспорт
	
	Возврат;
	
КонецПроцедуры

// См. СобытияФормИСКлиентПереопределяемый.ВыполнитьПереопределяемуюКомандуИС
//
Процедура ВыполнитьПереопределяемуюКомандуИС(Форма, Команда, ДополнительныеПараметры) Экспорт
	
	Если Форма.ИмяФормы = "Обработка.РМКУправляемыйРежим.Форма.Форма"
		Или Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ПеремещениеТоваров.Форма.ФормаДокумента" Тогда
		
		АлкогольнаяПродукция = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная");
		
		Номенклатура = Неопределено;
		ВидПродукцииИС = Неопределено;
		ДобавленныеВидыПродукции = Новый Массив;
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
			ДополнительныеПараметры.Свойство("Номенклатура", Номенклатура);
			ДополнительныеПараметры.Свойство("ВидПродукцииИС", ВидПродукцииИС);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидПродукцииИС) Тогда
			ДобавленныеВидыПродукции.Добавить(ВидПродукцииИС);
		ИначеЕсли Форма.Объект.Товары.Количество()
			И Форма.Объект.Товары[0].Свойство("ВидПродукцииИС") Тогда
			
			Для Каждого СтрокаТовары Из Форма.Объект.Товары Цикл
				Если ЗначениеЗаполнено(СтрокаТовары.ВидПродукцииИС)
					И ДобавленныеВидыПродукции.Найти(СтрокаТовары.ВидПродукцииИС) = Неопределено Тогда
					ДобавленныеВидыПродукции.Добавить(СтрокаТовары.ВидПродукцииИС);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ДобавленныеВидыПродукции.Количество() = 0 Тогда
			Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЕГАИС")<>Неопределено Тогда
				ДобавленныеВидыПродукции.Добавить(АлкогольнаяПродукция);
			КонецЕсли;
			Если Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП")<>Неопределено Тогда
				Для Каждого ВидПродукции Из Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП").ВидыПродукции Цикл
					ДобавленныеВидыПродукции.Добавить(ВидПродукции);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ДобавленныеВидыПродукции.Количество() = 1 Тогда
			
			ВидПродукции = ДобавленныеВидыПродукции[0];
			
			Если НЕ ИнтеграцияИСРТКлиент.ТребуетсяВыбратьОрганизациюГОСИС(Форма, ВидПродукции, Номенклатура) Тогда
				Если ВидПродукции = АлкогольнаяПродукция Тогда
					Команда = Новый Структура("Имя", "ПроверитьАкцизныеМаркиЕГАИС");
				Иначе
					Команда = Новый Структура("Имя",
						СтрШаблон("ПроверитьАкцизныеМаркиГосИС%1",
							ОбщегоНазначенияИСКлиентСервер.ИндексВидаПродукцииИС(ВидПродукции)));
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Команда = Новый Структура("Имя", "");
			
			Если ДобавленныеВидыПродукции.Количество() Тогда
				
				СписокВыбора = Новый СписокЗначений;
				Если ДобавленныеВидыПродукции.Найти(АлкогольнаяПродукция) <> Неопределено Тогда
					СписокВыбора.Добавить(АлкогольнаяПродукция, НСтр("ru = 'Алкогольная продукция'"));
				КонецЕсли;
				
				Для Каждого ВидПродукцииИС Из ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина) Цикл
					Если ДобавленныеВидыПродукции.Найти(ВидПродукцииИС) <> Неопределено Тогда
						СписокВыбора.Добавить(ВидПродукцииИС, "" + ВидПродукцииИС);
					КонецЕсли;
				КонецЦикла;
				
				ПараметрыФормы = Новый Структура("СписокВыбора", СписокВыбора);
				
				ДополнительныеПараметры = Новый Структура("Форма", Форма);
				ОповещениеОВыборе = Новый ОписаниеОповещения("ОбработатьВыборФормыСканирования", ИнтеграцияИСРТКлиент, ДополнительныеПараметры);
				ОткрытьФорму("ОбщаяФорма.ФормаВыбораВидовПродукцииГосИС",
					ПараметрыФормы,
					Форма,,,,
					ОповещениеОВыборе,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчики БГосИС элементов прикладных форм
//   Ограничения: не предполагает контекстный серверный вызов
//
// Параметры:
//   Форма                   - УправляемаяФорма - форма, из которой происходит вызов процедуры.
//   Элемент                 - ЭлементФормы     - элемент-источник события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	Если Форма.ИмяФормы = "Обработка.РМКУправляемыйРежим.Форма.Форма"
		Или Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента"
		ИЛИ Форма.ИмяФормы = "Документ.ПеремещениеТоваров.Форма.ФормаДокумента" Тогда
		
		Если Элемент = "Товары" Тогда
			
			ТребуетсяСерверныйВызов = Истина;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ТребуетсяПересчетМарокПослеУдаленияСтрок") Тогда
				Если ДополнительныеПараметры.Свойство("ПередУдалением") Тогда
					Форма.ТребуетсяПересчетМарокПослеУдаленияСтрок = Ложь;
					Для Каждого СтрокаТовары Из Форма.Элементы.Товары.ВыделенныеСтроки Цикл
						Если Форма.Элементы.Товары.ДанныеСтроки(СтрокаТовары).МаркируемаяПродукция Тогда
							Форма.ТребуетсяПересчетМарокПослеУдаленияСтрок = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Возврат;
				КонецЕсли;
				
				Если ДополнительныеПараметры.Свойство("ПослеУдаления") Тогда
					ТребуетсяСерверныйВызов = Форма.ТребуетсяПересчетМарокПослеУдаленияСтрок
						И Форма.Объект.АкцизныеМарки.Количество();
				КонецЕсли;
			КонецЕсли;
			
			Если ТребуетсяСерверныйВызов Тогда
				ДополнительныеПараметры.Вставить("ТребуетсяСерверныйВызов", Истина);
			КонецЕсли;
			
		ИначеЕсли Элемент = "Штрихкоды" Тогда
			
			ИнтеграцияИСРТКлиент.ПодготовитьОткрытьФормуСчитыванияАкцизнойМарки(Форма, ДополнительныеПараметры);
			
		ИначеЕсли Элемент = "Подключаемый_ОткрытьФормуУточненияДанных" Тогда
			
			Если Форма.ИспользоватьАкцизныеМарки Тогда
				
				ШтрихкодированиеИСКлиент.Подключаемый_ОткрытьФормуУточненияДанных(Форма, Новый ОписаниеОповещения("ОбработатьКодМаркировки", Форма));
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ВозвратТоваровПоставщику.Форма.ФормаДокумента"
		ИЛИ Форма.ИмяФормы = "Документ.ВозвратТоваровОтПокупателя.Форма.ФормаДокумента"
		ИЛИ Форма.ИмяФормы = "Документ.ПоступлениеТоваров.Форма.ФормаДокумента" Тогда 
		
		Если Элемент = "Товары" Тогда
			
			Если НЕ ДополнительныеПараметры = Неопределено Тогда
				ДополнительныеПараметры.Вставить("ТребуетсяСерверныйВызов", Истина);
			КонецЕсли;
			
		ИначеЕсли Элемент = "Подключаемый_ОткрытьФормуУточненияДанных" Тогда
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ИспользоватьАкцизныеМарки")
				И Форма.ИспользоватьАкцизныеМарки Тогда
				
				ШтрихкодированиеИСКлиент.Подключаемый_ОткрытьФормуУточненияДанных(Форма, Новый ОписаниеОповещения("ОбработатьКодМаркировки", Форма));
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Форма.ИмяФормы = "Документ.РеализацияТоваров.Форма.ФормаДокумента"  Тогда
		
		ШтрихкодированиеИСКлиент.Подключаемый_ОткрытьФормуУточненияДанных(Форма, Новый ОписаниеОповещения("ОбработатьКодМаркировки", Форма));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФорм

// Выполняется при начале выбора номенклатуры. Требуется определить и открыть форму выбора.
//
// Параметры:
//  Владелец             - ФормаКлиентскогоПриложения  - Форма владелец (возможен владелец - элемент формы).
//  ВидыПродукции        - ПеречислениеСсылка.ВидыПродукцииИС, Массив Из ПеречислениеСсылка.ВидыПродукцииИС - Виды продукции.
//  СтандартнаяОбработка - Булево - Использовать стандартную обработку события.
//  ОписаниеОповещения   - ОписаниеОповещения - Вызывается при выборе значения в форме выбора.
//  Реквизиты            - Структура - параметры формы создания номенклатуры.
//
Процедура ПриНачалеВыбораНоменклатуры(Владелец, ВидыПродукции, СтандартнаяОбработка, Описание = Неопределено, Знач Реквизиты = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	
	Если ТипЗнч(ВидыПродукции) = Тип("Массив") Тогда
		ВидыПродукцииИС = ВидыПродукции;
	Иначе
		ВидыПродукцииИС = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидыПродукции);
	КонецЕсли;
	
	ОсобенностиУчета = Новый Массив;
	Для Каждого ВидПродукцииИС Из ВидыПродукцииИС Цикл
		ОсобенностьУчета = ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукцииИС);
		Если ЗначениеЗаполнено(ОсобенностьУчета) Тогда
			ОсобенностиУчета.Добавить(ОсобенностьУчета);
		КонецЕсли;
	КонецЦикла;
	
	Если ОсобенностиУчета.Количество() > 0 Тогда
		ПараметрыОтбора.Вставить("ОсобенностьУчета", ОсобенностиУчета);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормы.Вставить("Отбор",                ПараметрыОтбора);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, Владелец,,,, Описание);
	
КонецПроцедуры


#КонецОбласти


#Область ПодключаемоеОборудование

// Вызывается перед обработкой штрихкодов, не привязанных ни к одной номенклатуре.
//
// Параметры:
//  ОписаниеОповещения - ОписаниеОповещения - процедура, которую нужно вызвать после выполнения обработки,
//  Форма - УправляемаяФорма - форма, в которой отсканировали штрихкоды,
//  ИмяСобытия - Строка - имя события, инициировавшее оповещение,
//  Параметр - Структура - данные для обработки,
//  Источник - Произвольный - источник события.
//
Процедура ОбработкаОповещенияОбработаныНеизвестныеШтрихкоды(ОписаниеОповещения, Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = Форма.УникальныйИдентификатор Тогда
		
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ДанныеШтрихкодов);
		
	КонецЕсли;
	
КонецПроцедуры

// В процедуре нужно реализовать алгоритм преобразования данных из подсистемы подключаемого оборудования.
//
// Параметры:
//   Результат - Структура - со свойствами Штрихкод, Количество
//   Параметр  - Массив    - входящие данные.
//
Процедура ПреобразоватьДанныеСоСканераВСтруктуру(Результат, Параметр) Экспорт
	
	Результат = МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр);
	
КонецПроцедуры

// В процедуре нужно реализовать алгоритм преобразования данных из подсистемы подключаемого оборудования.
//
// Параметры:
//   Результат - Массив - Массив структур со свойствами Штрихкод, Количество.
//   Параметр  - Массив - входящие данные.
//
Процедура ПреобразоватьДанныеСоСканераВМассив(Результат, Параметр) Экспорт
	
	Результат = МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
	
КонецПроцедуры


Процедура ПриПолученииДанныхИзТСД(ОписаниеОповещения, Форма, РезультатВыполнения) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения.ТаблицаТоваров);
		
	Иначе
		
		СобытияФормИСКлиент.СообщитьОбОшибке(РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Вызывает процедуру обработки подбора, если произошло оповещение из формы подбора.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура завершения подбора номенклатуры,
//  ИмяСобытия - Строка - имя события, о котором происходит оповещение,
//  Параметр - Произвольный - переданный в сообщение параметр,
//  Источник - УправляемаяФорма - форма, в которой произошло оповещение.
//
Процедура ОбработкаОповещенияПодборНоменклатуры(ОповещениеПриЗавершении, ИмяСобытия, Параметр, Источник) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Вызывает процедуру обработки подбора, если произошел выбор из формы подбора.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура завершения подбора номенклатуры,
//  ВыбранноеЗначение - Произвольный - результат выбора в подчиненной форме,
//  ИсточникВыбора - УправляемаяФорма - форма, где осуществлен выбор.
//
Процедура ОбработкаВыбораПодборНоменклатуры(ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает процедуру обработки выбора контрагента, если произошел выбор из формы выбора.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура завершения подбора номенклатуры,
//  ВыбранноеЗначение - Произвольный - результат выбора в подчиненной форме,
//  ИсточникВыбора - УправляемаяФорма - форма, где осуществлен выбор.
//
Процедура ОбработкаВыбораКонтрагента(ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	Если СтрНачинаетсяС(ИсточникВыбора.ИмяФормы, "Справочник.Контрагенты") Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
