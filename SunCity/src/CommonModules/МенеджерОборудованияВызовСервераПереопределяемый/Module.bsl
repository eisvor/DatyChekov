
#Область ПрограммныйИнтерфейс

// Возвращает список доступных типов оборудования.
//
// Возвращаемое значение:
//   Массив - Массив доступных типов подключаемого оборудования в конфигурации.
//
Функция ПолучитьДоступныеТипыОборудования() Экспорт
	
	СписокОборудования = Новый Массив;

	// Сканеры штрихкода
	СписокОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.СканерШтрихкода);
	// Конец Сканеры штрихкода

	// Считыватели магнитных карт
	СписокОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.СчитывательМагнитныхКарт);
	// Конец Считыватели магнитных карт.

	// Считыватели RFID
	СписокОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.СчитывательRFID);
	// Конец Считыватели RFID.
	
	// ККТ с передачей данных ОФД
	СписокОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ККТ);
	// Конец ККТ с передачей данных ОФД.
	
	// Фискальные регистраторы
	СписокОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор);
	// Конец Фискальные регистраторы.

	// Принтеры чеков
	СписокОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ПринтерЧеков);
	// Конец принтеры чеков.

	// Дисплеи покупателя
	СписокОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя);
	// Конец Дисплеи покупателя

	// Терминалы сбора данных
	СписокОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ТерминалСбораДанных);
	// Конец Терминалы сбора данных.

	// Эквайринговые терминалы
	СписокОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал);
	// Конец Эквайринговые терминалы.
	
	// Электронные весы
	СписокОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ЭлектронныеВесы);
	// Конец Электронные весы
	
	Если ОбщегоНазначенияРТ.ИспользоватьПодключаемоеОборудованиеOffline() Тогда
		
		// Весы с печатью этикеток
		СписокОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток);
		// Конец Весы с печатью этикеток.
		
		// ККМ offline
		СписокОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ККМОфлайн);
		// Конец ККМ offline
	
	КонецЕсли;

	// Принтер этикеток
	СписокОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ПринтерЭтикеток);
	// Конец Принтер этикеток
	
	Возврат СписокОборудования;

КонецФункции

// Возвращает флаг возможности добавления новых драйверов в справочник драйверов.
//
// Возвращаемое значение:
//   Булево - В случае разрешение добавления новых драйверов возвращает Истина.
//
Функция ВозможностьДобавленияНовыхДрайверов() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает флаг возможности использовать подключаемое оборудование.
// 
// Возвращаемое значение:
//   Булево - В случае разрешение использовать подключаемое оборудование.
//
Функция ИспользоватьПодключаемоеОборудование() Экспорт
	
	Возврат ЗначениеНастроекВызовСервера.ИспользоватьПодключаемоеОборудование();
	
КонецФункции

// Возвращает признак возможности обращения к разделенным данным из текущего сеанса.
//
// Возвращаемое значение:
//  Булево - В случае вызова в неразделенной конфигурации возвращает Истина.
//
Функция ДоступноИспользованиеРазделенныхДанных() Экспорт

	Возврат ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных();

КонецФункции

// Обновление библиотеки в целевой конфигурации.
//                                   
Процедура ОбновлениеБиблиотеки() Экспорт
	
	ОбновитьПоставляемыеДрайвера();
	ОбновитьУстановленныеДрайвера();
	
КонецПроцедуры

// Обновить поставляемые драйверы в составе конфигурации.
//                                   
Процедура ОбновитьПоставляемыеДрайвера() Экспорт
	
	// Сканеры штрихкода
	ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.СканерШтрихкода;
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодСканерыШтрихкода, "AddIn.ScancodeScanner", , Истина, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолСканерыШтрихкода, "AddIn.Scaner45", , Истина, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССканерыШтрихкода, "AddIn.Scanner", "Драйвер1ССканерШтрихкода", Ложь, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССканерыШтрихкодаNative, "AddIn.InputDevice", "Драйвер1СУстройстваВводаNative", Ложь, "9.0.9.2");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикГексагонСканерыШтрихкода, "AddIn.ProtonScanner", "ДрайверГексагонСканерыШтрихкода", Ложь);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолСканерыШтрихкода8X, "AddIn.ATOL_Scaners_1CInt", "ДрайверАТОЛУстройстваВвода8X", Ложь);
	// Конец Сканеры штрихкода
	
	// Считыватели магнитных карт
	ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.СчитывательМагнитныхКарт;
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССчитывателиМагнитныхКарт, "AddIn.Scanner", "Драйвер1ССканерШтрихкода", Ложь, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССчитывателиМагнитныхКартNative, "AddIn.InputDevice", "Драйвер1СУстройстваВводаNative", Ложь, "9.0.9.2");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолСчитывателиМагнитныхКарт, "AddIn.Scaner45", , Истина, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолСчитывателиМагнитныхКарт8X, "AddIn.ATOL_Scaners_1CInt", "ДрайверАТОЛУстройстваВвода8X", Ложь);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикIronLogicСчитывателиБесконтактныхКарт, "AddIn.ZR1CExtension", "ДрайверIronLogicСчитывателиБесконтактныхКарт", Ложь, "1.5.2.1");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикРусГардСчитывательМагнитныхКарт, "AddIn.RgReaderExtension", "ДрайверРусГардСчитывательМагнитныхКарт", Ложь, "4.1");
	// Конец Считыватели магнитных карт.
	
	// Фискальные регистраторы
	ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор;
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СФискальныйРегистраторЭмулятор, "AddIn.EmulatorFP1C", , Истина,, Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СРарусФискальныеРегистраторыФеликс, "AddIn.fr_feliksRMK1c82", , Истина, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СРарусФискальныеРегистраторыМебиус, "AddIn.fr_moebius1c82", , Истина, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолФискальныеРегистраторы, "AddIn.ATOL_KKM_1C", , Истина, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолФискальныеРегистраторыУниверсальный, "AddIn.ATOL_KKM_1C", , Истина, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолФискальныеРегистраторы8X, "AddIn.ATOL_KKM_1C82", , Истина, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикВерсияТФискальныеРегистраторы, "AddIn.KSBFR1K1C", , Истина, ,Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикККСФискальныеРегистраторы, "AddIn.SparkTF", , Истина, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМФискальныеРегистраторы, "AddIn.DrvFR1C", , Истина, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМФискальныеРегистраторыУниверсальный, "AddIn.SMDrvFR1C", , Истина, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикОРИОНФискальныеРегистраторы, "AddIn.OrionFR_1C8", , Истина, ,Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикКристаллСервисФискальныеРегистраторыPirit, "AddIn.PiritK", , Истина, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикДримкасФискальныеРегистраторыVikiPrint, "AddIn.VikiP", , Истина, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикИскраФискальныеРегистраторыПрим, "AddIn.IskraFR", , Истина, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикWebkassaФискальныеРегистраторы);
	// Конец Фискальные регистраторы.
	
	// ККТ с передачей данных   
	ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ;
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолККТ54ФЗ , "AddIn.ATOL_KKM_1C82_54FZ", , Ложь, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолККТ54ФЗ9X , "AddIn.ATOL_KKT_1C83_V9", "ДрайверАтолККТ54ФЗ9X", Ложь, ,Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолККТ54ФЗ10X, "AddIn.ATOL_KKT_1C83_V10", "ДрайверАтолККТ54ФЗ10X", Ложь);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАТОЛККТ54ФЗ10XФФД12, "AddIn.ATOL_KKT_1C_V10", "ДрайверАТОЛККТ54ФЗ10XФФД12", Ложь);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМККТ54ФЗ, "AddIn.SMDrvFR1C22", "ДрайверШтрихМККТ54ФЗ", Ложь, ,Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМККТ54ФЗ415, "AddIn.SMDrvFR1C3", "ДрайверШтрихМККТ54ФЗ415", Ложь);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМККТ54ФЗ4ФФД12, "AddIn.SMDrvFR1C34", "ДрайверШтрихМККТ54ФЗ4ФФД12", Ложь);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикВерсияТK1Ф54ФЗ, "AddIn.VT_KKT_V2", "ДрайверВерсияТK1Ф54ФЗ", Ложь, "2.0.0.57");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикИскраККТ54ФЗ, "AddIn.IskraKKT", "ДрайверИскраККТ54ФЗ", Ложь, "3.0.1.6");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикККСККТ54ФЗ, "AddIn.Spark115F", "ДрайверККСККТ54ФЗ", Ложь, "1.0.0.1", Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикККСККТ54ФЗ2Х, "AddIn.Spark130", "ДрайверККСККТ54ФЗ2Х", Ложь, "2.0.0.2");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикMSTARККТ54ФЗ, "AddIn.AlfaFiscalPrinter", "ДрайверMSTARККТ54ФЗ", Ложь, "1.3.29");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСчетмашККТ54ФЗ, "AddIn.fr_feliksrmf1c83", "ДрайверСчетмашККТ54ФЗ", Ложь, "1.1.20.331");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикNEWTONККТ54ФЗ, "AddIn.NewtonMicroFR54FZ", "ДрайверNEWTONККТ54ФЗ",  Ложь, "1.0.5.6");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикARSККТ54ФЗ, "AddIn.Ars1CFiscalDriver", "ДрайверARSККТ54ФЗ",  Ложь, "1.0.9", Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикДримкасККТ54ФЗ, "AddIn.VikiP", "ДрайверДримкасККТ54ФЗ",  Ложь, "1.6.0.6");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикИнитпроККТ54ФЗ, "AddIn.NKR_KKT", "ДрайверИнитпроККТ54ФЗ",  Ложь, "1.3.0.1");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикFITККТ54ФЗ, "AddIn.FIT_KKT_1C83_V10", "ДрайверFITККТ54ФЗ",  Ложь, "1.09");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикИнкотексККТ54ФЗ, "AddIn.INCOTEX_KKT", "ДрайверИнкотексККТ54ФЗ",  Ложь, "1.0");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикМЕБИУСККТ54ФЗ, "AddIn.Moebius1C_NET", "ДрайверМЕБИУСККТ54ФЗ",  Ложь, "3.1.1.3");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикWNJIККТ54ФЗ, "AddIn.WnjiFiscalPrinter", "ДрайверWNJIККТ54ФЗ",  Ложь, "1.3.30");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикКАСТОМФ54ФЗ, "AddIn.q3xfru", "ДрайверКАСТОМФ54ФЗ",  Ложь, "1.94");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикЭвоторККТ54ФЗ, "AddIn.EvoKKMExtension33", "ДрайверЭвоторККТ54ФЗ",  Ложь, "1.4.0525.0941");
	// Конец ККТ с передачей данных                                                                                              
	
	// Принтеры чеков
	ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ПринтерЧеков;
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СПринтерЧеков, "AddIn.ReceiptPrinterNative", "Драйвер1СПринтерЧеков", Ложь, "3.1.4.6");
	// Конец Принтеры чеков.
	
	// Дисплеи покупателя
	ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя;
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолДисплеиПокупателя, "AddIn.Line45", , Истина, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикККСДисплеиПокупателя, "AddIn.VFCD220E", "ДрайверККСДисплеиПокупателя", Ложь, "1.0.1.1");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодДисплеиПокупателя, "AddIn.1CDSPPromag", , Истина, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМДисплеиПокупателя, "AddIn.LineDisplay", , Истина, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикКристаллСервисДисплеиПокупателяVikiVision, "AddIn.VikiVision", "ДрайверКристаллСервисДисплеиПокупателяVikiVision", Ложь, "1.03");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СДисплейПокупателя, "AddIn.CustomerDisplay1C", "Драйвер1СДисплейПокупателя", Ложь, "3.0.1.6");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолДисплеиПокупателя8X, "AddIn.ATOL_Line_1CInt", "ДрайверАтолДисплеиПокупателя8X", Ложь);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодДисплеиПокупателяNative, "AddIn.DSPPromag8", "ДрайверСканкодДисплеиПокупателяNative", Ложь, "1.0.0.3");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикPOSUAДисплеиПокупателя, "AddIn.LPOSVFD", "ДрайверPOSUAДисплеиПокупателя", Ложь, "1.0.8.0");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СРарусДисплеиПокупателя, "Addin.d_android1c83", "Драйвер1СРарусДисплеиПокупателя", Ложь, "1.0.15.54");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикЭвоторДисплейПокупателя, "AddIn.EvoKKMExtension33", "ДрайверЭвоторККТ54ФЗ",  Ложь, "1.4.0525.0941");
	// Конец Дисплеи покупателя
	
	// Терминалы сбора данных
	ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ТерминалСбораДанных;
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолТерминалыСбораДанных, "AddIn.PDX45", , Истина, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикГексагонТерминалыСбораДанных, "AddIn.ProtonTSD", "ДрайверГексагонТерминалыСбораДанных", Ложь, "8.4.2");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодТерминалыСбораДанных, "AddIn.CipherLab", , Истина, ,Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканситиТерминалыСбораДанных, "AddIn.iPOSoft_DT", , Истина, ,Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикКлеверенсТерминалыСбораДанных, "AddIn.Cleverence.TO_TSD", "ДрайверКлеверенсТерминалыСбораДанных", Ложь);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМТерминалыСбораДанных, "AddIn.Terminals", , Истина, ,Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолТерминалыСбораДанныхMobileLogistics, "AddIn.PDX1C_Int", "ДрайверАТОЛТСДMobileLogistics", Ложь);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодТерминалыСбораДанныхNative, "AddIn.CipherLab8", "ДрайверСканкодТерминалыСбораДанныхNative", Ложь, "1.0.0.9", Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикRightScanТерминалыСбораДанных, "AddIn.RSExchange", "ДрайверRightScanТерминалыСбораДанных", Ложь, "2.68");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканситиТерминалСбораДанныхCitySoftBusiness, "AddIn.CitySoftBusinessDriver", "ДрайверСканситиТерминалСбораДанныхCitySoftBusiness", Ложь, "4.0.12.747");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодТерминалыСбораДанныхCipherLab8G2, "AddIn.CipherLab8G2", "ДрайверСканкодТерминалыСбораДанныхCipherLab8G2", Ложь, "2.0.0.20");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканситиТерминалСбораДанныхCitySoftLite, "AddIn.CitySoftLiteEquipmentDriver", "ДрайверСканситиТерминалСбораДанныхCitySoftLite", Ложь, "5.8.3.260");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканситиТерминалСбораДанныхCitySoftStandart, "AddIn.CitySoftStandartDriver", "ДрайверСканситиТерминалСбораДанныхCitySoftStandart", Ложь, "4.5.0.881");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикХарвестрТерминалыСбораДанных, "AddIn.HarvesterEquipmentNative", "ДрайверХарвестрТерминалыСбораДанных", Ложь, "1.2.3.8");
	// Конец Терминалы сбора данных.
	
	// Эквайринговые терминалы
	ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал;
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикИНПАСЭквайринговыеТерминалыSmart, "AddIn.a_inpas1c82", , Ложь, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикИНПАСЭквайринговыеТерминалыUNIPOS, "AddIn.a_inpasDC1c83", "ДрайверИНПАСЭквайринговыеТерминалыUNIPOS", Ложь, "1.1.1.2");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикTRPOSЭквайринговыеТерминалы, "AddIn.a_trpos1c82", "ДрайверTRPOSЭквайринговыеТерминалы", Ложь, "1.0.0.34");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСБРФЭквайринговыеТерминалы, "AddIn.SBRFCOMObject|AddIn.SBRFCOMExtension", , Истина, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикUCSEFTPOSЭквайринговыеТерминалы, "AddIn.UcsAT", "ДрайверUCSEFTPOSЭквайринговыеТерминалы", Ложь, "1.1.7");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикГАЗПРОМБАНКЭквайринговыеТерминалы, "AddIn.GPBEMVGateNativeAPI1C", "ДрайверГАЗПРОМБАНКЭквайринговыеТерминалы", Ложь, "1.0.3.5");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикARCUS2ЭквайринговыеТерминалыIngenico, "AddIn.IngenicoDriver1C", "ДрайверARCUS2ЭквайринговыеТерминалыIngenico", Ложь, "1.0.0.2");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикIboxProПоддержкаMPosЭквайринга, "AddIn.iboxPro", "ДрайверIboxProПоддержкаMPosЭквайринга", Ложь, "1.2.4");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМПлатежныйТерминалYarus, "AddIn.ShtrihPayMan1C", "ДрайверШтрихМПлатежныйТерминалYarus", Ложь);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СЭквайринговыеТерминалыСбербанк, "AddIn.SberAcquiringTerminal", "Драйвер1СЭквайринговыеТерминалыСбербанк", Ложь, "1.0.2.2");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикMPos2canЭквайринг, "AddIn.mPos2can", "ДрайверMPos2canЭквайринг", Ложь, "1.5.9");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикSKAM1CЭквайринговыеСистемы, "AddIn.skam", "ДрайверSKAM1CЭквайринговыеСистемы", Ложь, "1.0.4");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикSKAMUNIPOSЭквайринговыеСистемы, "AddIn.skam2", "ДрайверSKAMUNIPOSЭквайринговыеСистемы", Ложь, "1.0.5_ds");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СЭквайринговыеТерминалыСбербанк2х, "AddIn.SberAcquiringTerminal2", "Драйвер1СЭквайринговыеТерминалыСбербанк2х", Ложь, "2.2.2.1");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикПБФЭквайринговыеТерминалы, "AddIn.TerminalAisino", "ДрайверПБФЭквайринговыеТерминалы", Ложь, "0.2.3");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикSkyPOSЭквайринговыеТерминалы, "AddIn.CSkyposDriver", "ДрайверSkyPOSЭквайринговыеТерминалы", Ложь, "1.0.16");
	// Конец Эквайринговые терминалы.         
	
	// Электронные весы
	ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭлектронныеВесы;
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолЭлектронныеВесы, "AddIn.Scale45", , Истина, , Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМЭлектронныеВесы, "AddIn.Scale45", , Истина, ,Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикCASЭлектронныеВесы, "AddIn.CasCentreSimpleScale", "ДрайверCASЭлектронныеВесы", Ложь);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикCASЭлектронныеВесы2х, "AddIn.CAS_Scale_nLP", "ДрайверCASЭлектронныеВесы2х", Ложь, "2.13");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолЭлектронныеВесы8X, "AddIn.ATOL_Scale_1CInt", "ДрайверАТОЛЭлектронныеВесы8X", Ложь);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикМассаКЭлектронныеВесы, "AddIn.MassaKDriverR1C", "ДрайверМассаКЭлектронныеВесыИСПечатьюЭтикеток", Ложь, "8.1.2");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМЭлектронныеВесыPOS2, "AddIn.DrvSM1C", "ДрайверШтрихМЭлектронныеВесыPOS2", Ложь);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСервисПлюсЭлектронныеВесы, "AddIn.Cw100Driver", "ДрайверСервисПлюсЭлектронныеВесы", Ложь);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикМАСЭлектронныеВесы, "AddIn.ScaleMAS", "ДрайверМАСЭлектронныеВесы", Ложь);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СЭлектронныеВесы, "AddIn.CheckoutScales", "Драйвер1СЭлектронныеВесы", Ложь, "1.1.1.2");
	// Конец Электронные весы
	
	// Весы с печатью этикеток
	ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток;
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикACOMВесыСПечатьюЭтикеток, , , , ,Истина);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМВесыСПечатьюЭтикеток, "AddIn.DrvLP", , Истина, ,Истина);    
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикCASВесыСПечатьюЭтикеток, "AddIn.CasCentrePrintingScale", "ДрайверCASВесыСПечатьюЭтикеток", Ложь); 
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикМассаКВесыСПечатьюЭтикеток, "AddIn.MassaKDriverR1C", "ДрайверМассаКЭлектронныеВесыИСПечатьюЭтикеток", Ложь, "8.1.2");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАТОЛВесыСПечатьюЭтикеток8X, "AddIn.ATOL_ScaleLP_1CInt", "ДрайверАТОЛВесыСПечатьюЭтикеток8X", Ложь);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикРБСВесыCПечатьюЭтикеток, "AddIn.Rbs1CDriver", "ДрайверРБСВесыCПечатьюЭтикеток", Ложь, "1.0.6");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМВесыСПечатьюЭтикетокШтрихПринт, "AddIn.DrvLP1C", "ДрайверШтрихМВесыСПечатьюЭтикетокШтрихПринт", Ложь, "A.1.8.550");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикBizerbaВесыСПечатьюЭтикеток, "AddIn.BizerbaNative", "ДрайверBizerbaВесыСПечатьюЭтикеток", Ложь, "1.3.3");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСервисПлюсВесыСПечатьюЭтикеток, "AddIn.Sm320Driver", "ДрайверСервисПлюсВесыСПечатьюЭтикеток", Ложь, "1.0.6");
	// Конец Весы с печатью этикеток.
	
	// Офлайн оборудование
	ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККМОфлайн;
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолККМOffline);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикШтрихМККМOffline);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СККМOffline);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СЭвоторККМOffline);
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СККМED);
	// Конец Офлайн оборудование
	
	// Принтеры этикеток
	ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ПринтерЭтикеток;
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикГексагонПринтераЭтикеток, "AddIn.HexagonLabelPrinterDriver", "ДрайверГексагонПринтераЭтикеток", Ложь, "3.3.1");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканситиПринтераЭтикеток, "AddIn.ScanCityTSC1C", "ДрайверСканситиПринтераЭтикеток", Ложь, "1.0.0.42");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодПринтераЭтикетокGodexEZPL8Native, "AddIn.GodexEZPL8", "ДрайверСканкодПринтераЭтикетокGodexEZPL8Native", Ложь, "1.0.0.45");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикАтолПринтераЭтикеток, "Addin.lp_atol1c8x3n", "ДрайверАТОЛПринтераЭтикеток", Ложь, "1.1.6.38");
	// Конец Принтеры этикеток.
	
	// RFID считыватели
	ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.СчитывательRFID;
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикERFIDСчитывательRFID, "AddIn.RFIDReader", "ДрайверERFIDСчитывательRFID", Ложь, "1.0.0.11");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикКлеверенсСчитывателиRFID, "AddIn.Cleverence.TO_RFID", "ДрайверКлеверенсСчитывателиRFID", Ложь, "1.2.33");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикСканкодСчитывательRFIDCipherLab, "AddIn.CipherLab186x", "ДрайверСканкодСчитывательRFIDCipherLab", Ложь, "1.0.0.12");
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(ТипОборудования, Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикISBCСчитывательRFID, "AddIn.RFIDDevice", "ДрайверISBCСчитывательRFID", Ложь, "1.1.1.0");
	// Конец RFID считыватели
	
КонецПроцедуры

// Обновить установленные драйвера.
//
Процедура ОбновитьУстановленныеДрайвера() Экспорт
	
	// ККТ с передачей данных ОФД
	МенеджерОборудованияВызовСервера.ОбновитьУстановленныеДрайвера(Перечисления.ТипыПодключаемогоОборудования.ККТ);
	// Конец ККТ с передачей данных ОФД.
	
	// Принтеры чеков
	МенеджерОборудованияВызовСервера.ОбновитьУстановленныеДрайвера(Перечисления.ТипыПодключаемогоОборудования.ПринтерЭтикеток);
	// Конец Принтеры чеков.
	
	// Сканеры штрихкода
	МенеджерОборудованияВызовСервера.ОбновитьУстановленныеДрайвера(Перечисления.ТипыПодключаемогоОборудования.СканерШтрихкода);
	// Конец Сканеры штрихкода
	
КонецПроцедуры

// Возвращает флаг возможности использовать драйверов снятых с поддержки.
// 
// Возвращаемое значение:
//   Булево - В случае возможность использовать снятых с поддержки драйверов возвращает Истина.
//
Функция ВозможностьИспользоватьСнятыхСПоддержкиДрайверов() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Переопределяемая процедура для подсистемы управление доступом СтандартныеПодсистемы
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Менеджер, Ограничение) Экспорт

    ПодключаемоеОборудованиеРТ.ПриЗаполненииОграниченияДоступа(Менеджер, Ограничение);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСЭлементомФормы

// Дополнительные переопределяемые действия с элементом формы 
// служит для учета специфики визуального отображения в зависимости от типа клиента.
//
Процедура ПодготовитьЭлементУправления(ЭлементУправления, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Дополнительные переопределяемые действия с управляемой формой в Список Фискальные операции
// при событии "ПриСозданииНаСервере".
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения - Форма настройки оборудования
//  Отказ - Булево - Отказ создания
//  Параметры - Структура - Параметры операции
//  СтандартнаяОбработка - Булево - Стандартная обработка
//
Процедура СписокФискальныеОперацииПриСозданииНаСервере(ЭтаФорма, Отказ, Параметры, СтандартнаяОбработка) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбновленияБПОМеждуВерсиями

// Обновить параметры ККТ.
//
Процедура ОбновитьПараметрыККТ() Экспорт
	
	// ККТ - при переходе на 2.0.4
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.СпособФорматноЛогическогоКонтроля = &СпособФорматноЛогическогоКонтроля
	|	И ПодключаемоеОборудование.ТипОборудования = &ТипОборудования";
	Запрос.УстановитьПараметр("СпособФорматноЛогическогоКонтроля", Перечисления.СпособыФорматноЛогическогоКонтроля.ПустаяСсылка());
	Запрос.УстановитьПараметр("ТипОборудования", Перечисления.ТипыПодключаемогоОборудования.ККТ);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Оборудование = Выборка.Ссылка.ПолучитьОбъект();
		Оборудование.СпособФорматноЛогическогоКонтроля = Перечисления.СпособыФорматноЛогическогоКонтроля.РазделятьСтроки;
		Оборудование.ДопустимоеРасхождениеФорматноЛогическогоКонтроля = 0.01;
		Оборудование.ОбменДанными.Загрузка = Истина;
		Оборудование.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Обновить параметры ККМ Офлайн.
//
Процедура ОбновитьПараметрыККМОфлайн205() Экспорт
	
	// Проверка на наличие драйвера Справочник.ДрайверыОборудования.Драйвер1СККМOffline
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДрайверыОборудования.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДрайверыОборудования КАК ДрайверыОборудования
	|ГДЕ
	|	ДрайверыОборудования.ОбработчикДрайвера = ЗНАЧЕНИЕ(Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СККМOffline)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Пока РезультатЗапроса.Пустой() Цикл
		Возврат;
	КонецЦикла;
	
	
	// 1С ККМОфлайн - при переходе с 2.0.4 на 2.0.5
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Идентификатор,
	|	ПодключаемоеОборудование.УдалитьВерсияФорматаОбмена КАК ВерсияФорматаОбмена,
	|	ПодключаемоеОборудование.ВидТранспортаОфлайнОбмена КАК ВидТранспортаОфлайнОбмена
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККМОфлайн)
	|	И ПодключаемоеОборудование.ДрайверОборудования = ЗНАЧЕНИЕ(Справочник.ДрайверыОборудования.Драйвер1СККМOffline)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ВидТранспортаОфлайнОбмена) Тогда
			Продолжить; // обработка уже была
		КонецЕсли;
		
		ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Выборка.Идентификатор);
		
		НовыеЗначениеПараметров = Новый Структура;
		НовыеЗначениеПараметров.Вставить("ВерсияФорматаОбмена", Выборка.ВерсияФорматаОбмена);
		НовыеЗначениеПараметров.Вставить("ВидТранспортаОфлайнОбмена", Перечисления.ВидыТранспортаОфлайнОбмена.FILE);
		
		Если Выборка.ВерсияФорматаОбмена > 2000 Тогда
			
			Если ДанныеУстройства.Параметры.Свойство("КаталогОбмена") Тогда
				НовыеЗначениеПараметров.Вставить("КаталогОбмена", ДанныеУстройства.Параметры.КаталогОбмена);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ИмяФайлаЗагрузки") Тогда
				НовыеЗначениеПараметров.Вставить("ИмяФайлаЗагрузки", ДанныеУстройства.Параметры.ИмяФайлаЗагрузки);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ИмяФайлаВыгрузки") Тогда
				НовыеЗначениеПараметров.Вставить("ИмяФайлаВыгрузки", ДанныеУстройства.Параметры.ИмяФайлаВыгрузки);
			КонецЕсли;
			
		Иначе
			
			Если ДанныеУстройства.Параметры.Свойство("КаталогВыгрузки") Тогда
				НовыеЗначениеПараметров.Вставить("КаталогВыгрузки", ДанныеУстройства.Параметры.КаталогВыгрузки);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ИмяФайлаНастроек") Тогда
				НовыеЗначениеПараметров.Вставить("ИмяФайлаНастроек", ДанныеУстройства.Параметры.ИмяФайлаНастроек);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ИмяФайлаПрайсЛиста") Тогда
				НовыеЗначениеПараметров.Вставить("ИмяФайлаПрайсЛиста", ДанныеУстройства.Параметры.ИмяФайлаПрайсЛиста);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("КаталогЗагрузки") Тогда
				НовыеЗначениеПараметров.Вставить("КаталогЗагрузки", ДанныеУстройства.Параметры.КаталогЗагрузки);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ИмяЗагружаемогоФайла") Тогда
				НовыеЗначениеПараметров.Вставить("ИмяЗагружаемогоФайла", ДанныеУстройства.Параметры.ИмяЗагружаемогоФайла);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("КоличествоЭлементовВПакете") Тогда
				НовыеЗначениеПараметров.Вставить("КоличествоЭлементовВПакете", ДанныеУстройства.Параметры.КоличествоЭлементовВПакете);
			КонецЕсли;
			
		КонецЕсли;
		
		МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Выборка.Идентификатор, НовыеЗначениеПараметров);
		
		ОборудованиеОбъект = Выборка.Идентификатор.ПолучитьОбъект();
		ОборудованиеОбъект.ТипОфлайнОборудования = Перечисления.ТипыОфлайнОборудования.ККМ;
		ОборудованиеОбъект.ВидТранспортаОфлайнОбмена = Перечисления.ВидыТранспортаОфлайнОбмена.FILE;
		ОборудованиеОбъект.Записать();
		
	КонецЦикла;
	
	// WebСервис -> ККМОфлайн
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Идентификатор,
	|	ПодключаемоеОборудование.УдалитьВерсияФорматаОбмена КАК ВерсияФорматаОбмена,
	|	ПодключаемоеОборудование.ВидТранспортаОфлайнОбмена КАК ВидТранспортаОфлайнОбмена
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.УдалитьWebСервисОборудование)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ВидТранспортаОфлайнОбмена) Тогда
			Продолжить; // обработка уже была
		КонецЕсли;
		
		ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Выборка.Идентификатор);
		
		НовыеЗначениеПараметров = Новый Структура;
		НовыеЗначениеПараметров.Вставить("ВерсияФорматаОбмена", Выборка.ВерсияФорматаОбмена);
		НовыеЗначениеПараметров.Вставить("ВидТранспортаОфлайнОбмена", Перечисления.ВидыТранспортаОфлайнОбмена.WS);
		
		Если ДанныеУстройства.Параметры.Свойство("КоличествоЭлементовВПакете") Тогда
			НовыеЗначениеПараметров.Вставить("КоличествоЭлементовВПакете", ДанныеУстройства.Параметры.КоличествоЭлементовВПакете);
		КонецЕсли;
		
		МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Выборка.Идентификатор, НовыеЗначениеПараметров);
		
		ОборудованиеОбъект = Выборка.Идентификатор.ПолучитьОбъект();
		
		ОборудованиеОбъект.ВидТранспортаОфлайнОбмена = Перечисления.ВидыТранспортаОфлайнОбмена.WS;
		ОборудованиеОбъект.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККМОфлайн;
		ОборудованиеОбъект.ТипОфлайнОборудования = Перечисления.ТипыОфлайнОборудования.ККМ;
		ОборудованиеОбъект.ДрайверОборудования = Справочники.ДрайверыОборудования.Драйвер1СККМOffline;
		ОборудованиеОбъект.РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
		ОборудованиеОбъект.Записать();
		
	КонецЦикла;
	
	
	// Заполнение ТипОфлайнОборудования И ВидТранспортаОфлайнОбмена
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодключаемоеОборудование.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
		|ГДЕ
		|	ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККМОфлайн)
		|	И ПодключаемоеОборудование.ТипОфлайнОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыОфлайнОборудования.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОборудованиеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ОборудованиеОбъект.ТипОфлайнОборудования = Перечисления.ТипыОфлайнОборудования.ККМ;
		ОборудованиеОбъект.ВидТранспортаОфлайнОбмена = Перечисления.ВидыТранспортаОфлайнОбмена.FILE;
		ОборудованиеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Обновить параметры ККМ Офлайн.
//
Процедура ОбновитьПараметрыККМОфлайн211() Экспорт
	
	// Проверка на наличие драйвера Справочник.ДрайверыОборудования.Драйвер1СККМOffline
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДрайверыОборудования.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДрайверыОборудования КАК ДрайверыОборудования
	|ГДЕ
	|	ДрайверыОборудования.ОбработчикДрайвера = ЗНАЧЕНИЕ(Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СККМOffline)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Пока РезультатЗапроса.Пустой() Цикл
		Возврат;
	КонецЦикла;
	
	// 1С ККМОфлайн - при переходе с 2.0.6 на 2.1.1
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Идентификатор,
	|	ПодключаемоеОборудование.ВидТранспортаОфлайнОбмена КАК ВидТранспортаОфлайнОбмена
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККМОфлайн)
	|	И ПодключаемоеОборудование.ДрайверОборудования = ЗНАЧЕНИЕ(Справочник.ДрайверыОборудования.Драйвер1СККМOffline)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Выборка.Идентификатор);
		
		Если ДанныеУстройства.Параметры.Свойство("ВерсияФорматаОбмена") Тогда
			ВерсияФорматаОбмена = ДанныеУстройства.Параметры.ВерсияФорматаОбмена;
		Иначе
			Продолжить;
		КонецЕсли;
		
		НоваяВерсия = 3000;
		Если НЕ (ВерсияФорматаОбмена > 2000 И НЕ ВерсияФорматаОбмена = НоваяВерсия) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.ВидТранспортаОфлайнОбмена = Перечисления.ВидыТранспортаОфлайнОбмена.FILE Тогда
			
			НовыеЗначениеПараметров = Новый Структура;
			НовыеЗначениеПараметров.Вставить("ВерсияФорматаОбмена", НоваяВерсия);
			НовыеЗначениеПараметров.Вставить("ВидТранспортаОфлайнОбмена", Перечисления.ВидыТранспортаОфлайнОбмена.FILE);
			
			Если ДанныеУстройства.Параметры.Свойство("КаталогОбмена") Тогда
				НовыеЗначениеПараметров.Вставить("КаталогОбмена", ДанныеУстройства.Параметры.КаталогОбмена);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ИмяФайлаЗагрузки") Тогда
				НовыеЗначениеПараметров.Вставить("ИмяФайлаЗагрузки", ДанныеУстройства.Параметры.ИмяФайлаЗагрузки);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ИмяФайлаВыгрузки") Тогда
				НовыеЗначениеПараметров.Вставить("ИмяФайлаВыгрузки", ДанныеУстройства.Параметры.ИмяФайлаВыгрузки);
			КонецЕсли;
			
			МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Выборка.Идентификатор, НовыеЗначениеПараметров);
			
		ИначеЕсли Выборка.ВидТранспортаОфлайнОбмена = Перечисления.ВидыТранспортаОфлайнОбмена.WS Тогда
			
			НовыеЗначениеПараметров = Новый Структура;
			НовыеЗначениеПараметров.Вставить("ВерсияФорматаОбмена", НоваяВерсия);
			НовыеЗначениеПараметров.Вставить("ВидТранспортаОфлайнОбмена", Перечисления.ВидыТранспортаОфлайнОбмена.WS);
			
			Если ДанныеУстройства.Параметры.Свойство("КоличествоЭлементовВПакете") Тогда
				НовыеЗначениеПараметров.Вставить("КоличествоЭлементовВПакете", ДанныеУстройства.Параметры.КоличествоЭлементовВПакете);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ПараметрыДрайвераККМ") Тогда
				НовыеЗначениеПараметров.Вставить("ПараметрыДрайвераККМ", ДанныеУстройства.Параметры.ПараметрыДрайвераККМ);
			КонецЕсли;
			
			МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Выборка.Идентификатор, НовыеЗначениеПараметров);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//Обновить параметры ККМ Офлайн Эвотор
Процедура ОбновитьПараметрыККМОфлайнЭвотор() Экспорт
	
	//Проверка на наличие драйвера Справочник.ДрайверыОборудования.Драйвер1СЭвоторККМOffline
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДрайверыОборудования.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДрайверыОборудования КАК ДрайверыОборудования
	|ГДЕ
	|	ДрайверыОборудования.ОбработчикДрайвера = ЗНАЧЕНИЕ(Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СЭвоторККМOffline)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Пока РезультатЗапроса.Пустой() Цикл
		Возврат;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККМОфлайн)
	|	И ПодключаемоеОборудование.ДрайверОборудования = ЗНАЧЕНИЕ(Справочник.ДрайверыОборудования.Драйвер1СЭвоторККМOffline)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	УстановитьПривилегированныйРежим(Истина);
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Выборка.Ссылка);
		
		Если ДанныеУстройства.Свойство("ПериодИзмененВручную") Тогда
			Продолжить;
		КонецЕсли;
		
		НовыеЗначениеПараметров = Новый Структура;
		НовыеЗначениеПараметров.Вставить("ЭтоПерваяЗагрузка", Истина);
		НовыеЗначениеПараметров.Вставить("ПериодИзмененВручную", Ложь);
		
		Если ДанныеУстройства.Параметры.Свойство("Токен") Тогда
			НовыеЗначениеПараметров.Вставить("Токен", ДанныеУстройства.Параметры.Токен);
		КонецЕсли;
		
		Если ДанныеУстройства.Параметры.Свойство("Магазин") Тогда
			НовыеЗначениеПараметров.Вставить("Магазин", ДанныеУстройства.Параметры.Магазин);
		КонецЕсли;
		
		Если ДанныеУстройства.Параметры.Свойство("МагазинЗначение") Тогда
			НовыеЗначениеПараметров.Вставить("МагазинЗначение", ДанныеУстройства.Параметры.МагазинЗначение);
		КонецЕсли;
		
		Если ДанныеУстройства.Параметры.Свойство("Терминал") Тогда
			НовыеЗначениеПараметров.Вставить("Терминал", ДанныеУстройства.Параметры.Терминал);
		КонецЕсли;
		
		Если ДанныеУстройства.Параметры.Свойство("ТерминалЗначение") Тогда
			НовыеЗначениеПараметров.Вставить("ТерминалЗначение", ДанныеУстройства.Параметры.ТерминалЗначение);
		КонецЕсли;
		
		Если ДанныеУстройства.Параметры.Свойство("ПериодВыгрузки") Тогда
			НовыеЗначениеПараметров.Вставить("ДатаНачала", ДанныеУстройства.Параметры.ПериодВыгрузки.ДатаНачала);
		КонецЕсли;
		
		Если ДанныеУстройства.Параметры.Свойство("ПериодВыгрузки") Тогда
			НовыеЗначениеПараметров.Вставить("ДатаОкончания", ДанныеУстройства.Параметры.ПериодВыгрузки.ДатаОкончания);
		КонецЕсли;
		
		МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Выборка.Ссылка, НовыеЗначениеПараметров);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

//Обновить параметры ККМ Офлайн Эвотор
Процедура ОбновитьПараметрыДатыЗагрузкиККМОфлайнЭвотор() Экспорт
	
	// Проверка на наличие драйвера Справочник.ДрайверыОборудования.Драйвер1СЭвоторККМOffline
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДрайверыОборудования.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДрайверыОборудования КАК ДрайверыОборудования
	|ГДЕ
	|	ДрайверыОборудования.ОбработчикДрайвера = ЗНАЧЕНИЕ(Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1СЭвоторККМOffline)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Пока РезультатЗапроса.Пустой() Цикл
		Возврат;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККМОфлайн)
	|	И ПодключаемоеОборудование.ДрайверОборудования = ЗНАЧЕНИЕ(Справочник.ДрайверыОборудования.Драйвер1СЭвоторККМOffline)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	УстановитьПривилегированныйРежим(Истина);
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Выборка.Ссылка);
		
		Если ДанныеУстройства.Параметры.Свойство("ДатаНачала") И ДанныеУстройства.Параметры.Свойство("ДатаОкончания") Тогда
			Продолжить;
		Иначе
			
			НовыеЗначениеПараметров = Новый Структура;
			НовыеЗначениеПараметров.Вставить("ЭтоПерваяЗагрузка", Истина);
			НовыеЗначениеПараметров.Вставить("ПериодИзмененВручную", Ложь);
			
			Если ДанныеУстройства.Параметры.Свойство("Токен") Тогда
				НовыеЗначениеПараметров.Вставить("Токен", ДанныеУстройства.Параметры.Токен);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("Магазин") Тогда
				НовыеЗначениеПараметров.Вставить("Магазин", ДанныеУстройства.Параметры.Магазин);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("МагазинЗначение") Тогда
				НовыеЗначениеПараметров.Вставить("МагазинЗначение", ДанныеУстройства.Параметры.МагазинЗначение);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("Терминал") Тогда
				НовыеЗначениеПараметров.Вставить("Терминал", ДанныеУстройства.Параметры.Терминал);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ТерминалЗначение") Тогда
				НовыеЗначениеПараметров.Вставить("ТерминалЗначение", ДанныеУстройства.Параметры.ТерминалЗначение);
			КонецЕсли;
			
			НовыеЗначениеПараметров.Вставить("ДатаНачала", Неопределено);
			НовыеЗначениеПараметров.Вставить("ДатаОкончания", Неопределено);
				
			МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Выборка.Ссылка, НовыеЗначениеПараметров);
		
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Обновить параметры ККМ Офлайн.
//
Процедура УстановитьПоследнююВерсиюФорматаОфлайнОборудование() Экспорт
	
	// 1С ККМОфлайн - установка последней версии формата обмена
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Идентификатор,
	|	ПодключаемоеОборудование.ВидТранспортаОфлайнОбмена КАК ВидТранспортаОфлайнОбмена
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККМОфлайн)
	|	И ПодключаемоеОборудование.ДрайверОборудования = ЗНАЧЕНИЕ(Справочник.ДрайверыОборудования.Драйвер1СККМOffline)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Выборка.Идентификатор);
		
		Если ДанныеУстройства.Параметры.Свойство("ВерсияФорматаОбмена") Тогда
			ВерсияФорматаОбмена = ДанныеУстройства.Параметры.ВерсияФорматаОбмена;
		Иначе
			Продолжить;
		КонецЕсли;
		
		ДоступныеВерсии = МенеджерОфлайнОборудования.ДоступныеВерсииФорматовОбмена();
		НоваяВерсия = ДоступныеВерсии[ДоступныеВерсии.Количество() -1].Значение;
		
		Если ВерсияФорматаОбмена = НоваяВерсия Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.ВидТранспортаОфлайнОбмена = Перечисления.ВидыТранспортаОфлайнОбмена.FILE Тогда
			
			НовыеЗначениеПараметров = Новый Структура;
			НовыеЗначениеПараметров.Вставить("ВерсияФорматаОбмена", НоваяВерсия);
			НовыеЗначениеПараметров.Вставить("ВидТранспортаОфлайнОбмена", Перечисления.ВидыТранспортаОфлайнОбмена.FILE);
			
			Если ДанныеУстройства.Параметры.Свойство("КаталогОбмена") Тогда
				НовыеЗначениеПараметров.Вставить("КаталогОбмена", ДанныеУстройства.Параметры.КаталогОбмена);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ИмяФайлаЗагрузки") Тогда
				НовыеЗначениеПараметров.Вставить("ИмяФайлаЗагрузки", ДанныеУстройства.Параметры.ИмяФайлаЗагрузки);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ИмяФайлаВыгрузки") Тогда
				НовыеЗначениеПараметров.Вставить("ИмяФайлаВыгрузки", ДанныеУстройства.Параметры.ИмяФайлаВыгрузки);
			КонецЕсли;
			
			МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Выборка.Идентификатор, НовыеЗначениеПараметров);
			
		ИначеЕсли Выборка.ВидТранспортаОфлайнОбмена = Перечисления.ВидыТранспортаОфлайнОбмена.WS Тогда
			
			НовыеЗначениеПараметров = Новый Структура;
			НовыеЗначениеПараметров.Вставить("ВерсияФорматаОбмена", НоваяВерсия);
			НовыеЗначениеПараметров.Вставить("ВидТранспортаОфлайнОбмена", Перечисления.ВидыТранспортаОфлайнОбмена.WS);
			
			Если ДанныеУстройства.Параметры.Свойство("КоличествоЭлементовВПакете") Тогда
				НовыеЗначениеПараметров.Вставить("КоличествоЭлементовВПакете", ДанныеУстройства.Параметры.КоличествоЭлементовВПакете);
			КонецЕсли;
			
			Если ДанныеУстройства.Параметры.Свойство("ПараметрыДрайвераККМ") Тогда
				НовыеЗначениеПараметров.Вставить("ПараметрыДрайвераККМ", ДанныеУстройства.Параметры.ПараметрыДрайвераККМ);
			КонецЕсли;
			
			МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Выборка.Идентификатор, НовыеЗначениеПараметров);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОборудованиеККТ

// Процедура заполняет реквизиты организации для регистрации ФН.
//
Процедура ЗаполнитьРеквизитыОрганизацииДляРегистрацииФН(Организация, ПараметрыРегистрации) Экспорт
	
	ПараметрыРегистрации.ОрганизацияИНН = Организация.ИНН;  
	ПараметрыРегистрации.ОрганизацияНазвание = ?(НЕ ПустаяСтрока(Организация.НаименованиеСокращенное), Организация.НаименованиеСокращенное, Организация.Наименование);
	
КонецПроцедуры

// Переопределяет формируемый шаблон чека.
//
Функция СформироватьШаблонЧека(ОбщиеПараметры, ДополнительныйТекст, СтандартнаяОбработка, ТипОборудования = "") Экспорт
	
	Если ОбщиеПараметры.Свойство("ШаблонЧека")
		И ОбщиеПараметры.Свойство("КассаККМ")
		И ЗначениеЗаполнено(ОбщиеПараметры.ШаблонЧека)
		И ЗначениеЗаполнено(ОбщиеПараметры.КассаККМ) Тогда
		
		ШаблонЧека = ПолучитьСтруктуруШаблонаЧека(ОбщиеПараметры, ДополнительныйТекст, ТипОборудования);
		Если ШаблонЧека <> Неопределено Тогда
			СтандартнаяОбработка = Ложь;
			Возврат ШаблонЧека;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает для каких типов идентификаторов будет заполняться тег 1162 (код товара).
//
// Параметры:
//  ТипыИдентификаторов - Массив из ПеречислениеСсылка.ТипыИдентификаторовТовараККТ
//  СтандартнаяОбработка - Булево - Стандартная обработка
//
Процедура КодТовараЗаполняетсяДляТиповИдентификаторов(ТипыИдентификаторов, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Получить структуру шаблона чека.
//
Функция ПолучитьСтруктуруШаблонаЧека(ПараметрыШаблонаЧека, ДополнительныйТекст = "", ТипОборудования = "") Экспорт
	
	ХранилищеШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыШаблонаЧека.ШаблонЧека, "Шаблон");
	СтруктураХранилища = ХранилищеШаблона.Получить();
	
	Если СтруктураХранилища = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыеПараметрыЧека = Новый Структура;
	Для Каждого ВходящийПараметр Из ПараметрыШаблонаЧека Цикл
		Если ВходящийПараметр.Ключ = "ПозицииЧека" Тогда
			НовыеПараметрыЧека.Вставить("ПозицииЧека", Новый Массив);
		Иначе
			НовыеПараметрыЧека.Вставить(ВходящийПараметр.Ключ, ВходящийПараметр.Значение);
		КонецЕсли;
	КонецЦикла;
	НовыйТипШаблона = Ложь;
	СКД = Неопределено;
	Если ТипОборудования = "ККТ" Тогда
		СКД = ПараметрыШаблонаЧека.ШаблонЧека.СхемаКомпоновкиДанных.Получить();
		НовыйТипШаблона = Истина;
	ИначеЕсли ТипОборудования = "ПринтерЧеков" Тогда
		ТипШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыШаблонаЧека.ШаблонЧека, "ТипШаблона");
		Если ТипШаблона = Перечисления.ТипыШаблонов.ЧекККТ Тогда
			СКД = ПараметрыШаблонаЧека.ШаблонЧека.СхемаКомпоновкиДанных.Получить();
			НовыйТипШаблона = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НовыйТипШаблона Тогда
		Если СКД = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ТаблицаДанных = УправлениеШаблонами.ТаблицаСКД(СКД, ПараметрыШаблонаЧека.ДокументОснование);
		ШаблонДерево = СтруктураХранилища.Шаблон;
		КоличествоСтрокТабличнойЧасти = 0;
		Для Каждого СтрокаДерева Из ШаблонДерево.Строки Цикл
			Если СтрокаДерева.ИмяКолонки = "ФискальныйДокумент" Тогда
				Для Каждого СтрокаЧека Из СтрокаДерева.Строки Цикл
					Если СтрокаЧека.ИмяКолонки = "СоставЧека" Тогда
						Для Каждого СтрокаОсновногоРаздела Из СтрокаЧека.Строки Цикл
							УправлениеШаблонами.ОбработатьСоставЧека(НовыеПараметрыЧека, СтрокаОсновногоРаздела, ТаблицаДанных, ПараметрыШаблонаЧека.ПозицииЧека);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли СтрокаДерева.ИмяКолонки = "НефискальныйДокумент" Тогда
				НовыйНефискальныйДокумент = Новый Структура;
				НовыйНефискальныйДокумент.Вставить("ПозицииЧека", Новый Массив);
				НовыйНефискальныйДокумент.Вставить("ДокументОснование", НовыеПараметрыЧека.ДокументОснование);
				Для Каждого СтрокаЧека Из СтрокаДерева.Строки Цикл
					Если СтрокаЧека.ИмяКолонки = "СоставЧека" Тогда
						Для Каждого СтрокаОсновногоРаздела Из СтрокаЧека.Строки Цикл
							УправлениеШаблонами.ОбработатьСоставЧека(НовыйНефискальныйДокумент, СтрокаОсновногоРаздела, ТаблицаДанных, ПараметрыШаблонаЧека.ПозицииЧека);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				Если НовыйНефискальныйДокумент.ПозицииЧека.Количество() > 0 Тогда
					НовыеПараметрыЧека.НефискальныеДокументы.Добавить(НовыйНефискальныйДокумент.ПозицииЧека);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		СтруктураШаблонаЧека = Новый Структура;
		СтруктураШаблонаЧека.Вставить("Шапка", Новый Массив);
		СтруктураШаблонаЧека.Вставить("МассивТекстаСтрокиШапки", Новый Массив);
		СтруктураШаблонаЧека.Вставить("МассивТекстаСтрокиПодвал", Новый Массив);
		СтруктураШаблонаЧека.Вставить("Подвал", Новый Массив);
		СтруктураШаблонаЧека.Вставить("ОднаФискальнаяСтрока", Ложь);
		СтруктураШаблонаЧека.Вставить("ФискальнаяСтрокаБезПечати", Ложь);
		
		ТаблицаИсходная_Количество = ПараметрыШаблонаЧека.ПозицииЧека.Количество();
		
		Для Итератор = 0 По ТаблицаИсходная_Количество - 1 Цикл
			СтруктураШаблонаЧека.МассивТекстаСтрокиШапки.Добавить(Новый Массив);
			СтруктураШаблонаЧека.МассивТекстаСтрокиПодвал.Добавить(Новый Массив);
		КонецЦикла;
		
		СкидкиНаценкиСерверПереопределяемый.ОбработатьСтруктуруШаблонаЧекаПриПечати(СтруктураХранилища, ПараметрыШаблонаЧека.ДокументОснование);
		СтруктураШаблонаЧека.ФискальнаяСтрокаБезПечати = Истина;

		МассивТекстаСтрокиШапки = Новый Массив;
		МассивТекстаСтрокиПодвал = Новый Массив;
		
		ПараметрыМакета = Новый Структура;
		ПараметрыМакета.Вставить("СхемаКомпоновкиДанных", Неопределено);
		ПараметрыМакета.Вставить("КомпоновщикМакета", Неопределено);
		ПараметрыМакета.Вставить("КэшМакетов", Неопределено);
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ПараметрыШаблонаЧека.ДокументОснование);
		Шаблон = МенеджерОбъекта.МакетФискальногоЧека(ПараметрыШаблонаЧека.ДокументОснование, СтруктураХранилища.Шаблон, СтруктураХранилища.ШиринаЧека, ПараметрыМакета);
		СтруктураХранилища.Вставить("Шаблон", Шаблон);
		СтруктураХранилища.Вставить("СоставнойМассив", Новый Массив);
		
		СтруктураШаблонаЧека.Вставить("Шапка", ПечатьФискальныхЧеков.НапечататьСтроки(СтруктураХранилища, "Шапка"));
		
		Для Итератор = 0 По ТаблицаИсходная_Количество - 1 Цикл
			МассивСтрокиШапки = ПечатьФискальныхЧеков.НапечататьСтроки(СтруктураХранилища, "ТелоШапка_" + Итератор);
			МассивТекстаСтрокиШапки.Добавить(МассивСтрокиШапки);
			МассивСтрокиПодвал = ПечатьФискальныхЧеков.НапечататьСтроки(СтруктураХранилища, "ТелоПодвал_" + Итератор);
			МассивТекстаСтрокиПодвал.Добавить(МассивСтрокиПодвал);
		КонецЦикла;
		СтруктураШаблонаЧека.Вставить("Подвал", ПечатьФискальныхЧеков.НапечататьСтроки(СтруктураХранилища, "Подвал"));
		СтруктураШаблонаЧека.Вставить("МассивТекстаСтрокиШапки", МассивТекстаСтрокиШапки);
		СтруктураШаблонаЧека.Вставить("МассивТекстаСтрокиПодвал", МассивТекстаСтрокиПодвал);
		СтруктураШаблонаЧека.ОднаФискальнаяСтрока = СтруктураХранилища.ОднаФискальнаяСтрока;
	
		// Печатаем строки чека   
			
		МассивТекстаСтрокиШапки   = СтруктураШаблонаЧека.МассивТекстаСтрокиШапки;
		МассивТекстаСтрокиПодвал  = СтруктураШаблонаЧека.МассивТекстаСтрокиПодвал;
		МассивШапкаЧека           = СтруктураШаблонаЧека.Шапка;
		МассивПодвалЧека          = СтруктураШаблонаЧека.Подвал;
		ОднаФискальнаяСтрока      = СтруктураШаблонаЧека.ОднаФискальнаяСтрока;
		ФискальнаяСтрокаБезПечати = СтруктураШаблонаЧека.ФискальнаяСтрокаБезПечати;
		
		ИтогПоЧеку = 0;
		ПроцентСкидки = 0;
		НомерСекции = 0;
		
		// Печать шапки чека.
		Для Каждого СтрокаШапки Из МассивШапкаЧека Цикл
			СтрокаПозицииЧека = Новый Структура;
			СтрокаПозицииЧека.Вставить("ТекстоваяСтрока");
			СтрокаПозицииЧека.Вставить("Текст", СтрокаШапки);
			НовыеПараметрыЧека.ПозицииЧека.Добавить(СтрокаПозицииЧека);
			НовыеПараметрыЧека.Вставить("ПечатьКлише", Ложь);
		КонецЦикла;
		
		// Товарный состав
		Для ИндексМассива = 0 По ТаблицаИсходная_Количество - 1 Цикл
			
			СтрокаИсходная = ПараметрыШаблонаЧека.ПозицииЧека[ИндексМассива];
			
			Если СтрокаИсходная.Свойство("ФискальнаяСтрока") Тогда
			
				// Печать шапки строки.
				Для Каждого СтрокаШапки Из МассивТекстаСтрокиШапки[ИндексМассива] Цикл
					СтрокаПозицииЧека = Новый Структура();
					СтрокаПозицииЧека.Вставить("ТекстоваяСтрока");
					СтрокаПозицииЧека.Вставить("Текст", СтрокаШапки);
					НовыеПараметрыЧека.ПозицииЧека.Добавить(СтрокаПозицииЧека);
				КонецЦикла;
				
				Если ОднаФискальнаяСтрока Тогда
					Сумма = ?(СтрокаИсходная.Свойство("Сумма"), СтрокаИсходная.Сумма, 0);
					ИтогПоЧеку = ИтогПоЧеку + Сумма;
				Иначе
					Если ФискальнаяСтрокаБезПечати Тогда
						Наименование = "";
					Иначе
						Наименование  = ?(СтрокаИсходная.Свойство("Наименование") , СтрокаИсходная.Наименование, "");
					КонецЕсли;
					
					Количество    = ?(СтрокаИсходная.Свойство("Количество")   , СтрокаИсходная.Количество  , 1);
					Цена          = ?(СтрокаИсходная.Свойство("Цена")         , СтрокаИсходная.Цена        , 0);
					Сумма         = ?(СтрокаИсходная.Свойство("Сумма")        , СтрокаИсходная.Сумма       , 0);
					НомерСекции   = ?(СтрокаИсходная.Свойство("НомерСекции")  , СтрокаИсходная.НомерСекции , 0);
					СтавкаНДС     = ?(СтрокаИсходная.Свойство("СтавкаНДС")    , СтрокаИсходная.СтавкаНДС   , 0);
					
					СтрокаПозицииЧека = Новый Структура;
					СтрокаПозицииЧека.Вставить("ФискальнаяСтрока");
					СтрокаПозицииЧека.Вставить("Наименование", Наименование);
					СтрокаПозицииЧека.Вставить("Количество"  , Количество);
					СтрокаПозицииЧека.Вставить("Цена"        , Цена);
					СтрокаПозицииЧека.Вставить("Сумма"       , Сумма);
					СтрокаПозицииЧека.Вставить("НомерСекции" , НомерСекции);
					СтрокаПозицииЧека.Вставить("СтавкаНДС"   , СтавкаНДС);
					
					НовыеПараметрыЧека.ПозицииЧека.Добавить(СтрокаПозицииЧека);
					
				КонецЕсли;
				
				// Печать подвала строки.
				Для Каждого СтрокаПодвала Из МассивТекстаСтрокиПодвал[ИндексМассива] Цикл
					СтрокаПозицииЧека = Новый Структура;
					СтрокаПозицииЧека.Вставить("ТекстоваяСтрока");
					СтрокаПозицииЧека.Вставить("Текст", СтрокаПодвала);
					НовыеПараметрыЧека.ПозицииЧека.Добавить(СтрокаПозицииЧека);
				КонецЦикла;
			Иначе
				СтрокаПозицииЧека = Новый Структура;
				Для Каждого ПолеИсходное Из СтрокаИсходная Цикл
					СтрокаПозицииЧека.Вставить(ПолеИсходное.Ключ, ПолеИсходное.Значение);
				КонецЦикла;
				НовыеПараметрыЧека.ПозицииЧека.Добавить(СтрокаПозицииЧека);
			КонецЕсли;
			
		КонецЦикла;
			
		// если одна фискальная строка в чеке.
		Если ОднаФискальнаяСтрока Тогда
			СтрокаПозицииЧека = Новый Структура;
			СтрокаПозицииЧека.Вставить("ФискальнаяСтрока");
			СтрокаПозицииЧека.Вставить("Наименование", НСтр("ru='Всего:'"));
			СтрокаПозицииЧека.Вставить("Количество"  , 1);
			СтрокаПозицииЧека.Вставить("Цена"        , ИтогПоЧеку);
			СтрокаПозицииЧека.Вставить("Сумма"       , ИтогПоЧеку);
			СтрокаПозицииЧека.Вставить("НомерСекции" , НомерСекции);
			СтрокаПозицииЧека.Вставить("СтавкаНДС"   , 0);
			НовыеПараметрыЧека.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		КонецЕсли;
		
		// Печать подвала чека.
		Для Каждого СтрокаПодвала Из МассивПодвалЧека Цикл
			СтрокаПозицииЧека = Новый Структура;
			СтрокаПозицииЧека.Вставить("ТекстоваяСтрока");
			СтрокаПозицииЧека.Вставить("Текст", СтрокаПодвала);
			НовыеПараметрыЧека.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(ДополнительныйТекст) Тогда
			СтрокаПозицииЧека = Новый Структура();
			СтрокаПозицииЧека.Вставить("ТекстоваяСтрока");
			СтрокаПозицииЧека.Вставить("Текст",  ДополнительныйТекст);
			НовыеПараметрыЧека.Добавить(СтрокаПозицииЧека);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НовыеПараметрыЧека;
	
КонецФункции 

#КонецОбласти

#Область ОборудованиеOffline

// Функция возвращает префикс весового товара применяемого для генерации штрихкода.
// Используется при выгрузке в весы с печатью этикеток.
//
// Параметры:
//  ПодключаемоеОборудованиеСсылка - Ссылка на экземпляр подключаемого оборудования.
// 
// Возвращаемое значение:
//   Число - Префикс весового товара.
//
Функция ПолучитьПрефиксВесовогоТовара(ПодключаемоеОборудованиеСсылка) Экспорт
	
	Префикс = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ПрефиксВнутреннегоШтрихкодаВесовогоТовара");
	Возврат Префикс;
	
КонецФункции

// Функция возвращает префикс штучного товара применяемого для генерации штрихкода.
// Используется при выгрузке в весы с печатью этикеток.
//
// Параметры:
//  ПодключаемоеОборудованиеСсылка - Ссылка на экземпляр подключаемого оборудования.
// 
// Возвращаемое значение:
//   Число - Префикс штучного товара который фасуется на весах.
//
Функция ПолучитьПрефиксШтучногоТовара(ПодключаемоеОборудованиеСсылка) Экспорт
	
	Префикс  = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ПрефиксВнутреннегоШтрихкодаШтучногоФасованногоТовара");
	Возврат Префикс;
	
КонецФункции

#КонецОбласти

#Область РаботаСФормойЭкземпляраОборудования

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ПриСозданииНаСервере".
//
Процедура ЭкземплярОборудованияПриСозданииНаСервере(Объект, ЭтаФорма, Отказ, Параметры, СтандартнаяОбработка) Экспорт
	
	Элемент = ЭтаФорма.Элементы.Добавить("ПравилоОбмена", Тип("ПолеФормы"), );
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = "Объект.ПравилоОбмена";
	
	// Доступ к узлу есть только для соответствующего оборудования.
	Если Объект.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККМОфлайн
		ИЛИ Объект.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
		ЭтаФорма.Элементы.ПравилоОбмена.Видимость = Истина;
		ПараметрыВыбораПравилаОбмена = ПодключаемоеОборудованиеOfflineВызовСервера.ПолучитьПараметрыВыбораПравилаОбмена(Объект);
		Если ЗначениеЗаполнено(ПараметрыВыбораПравилаОбмена) Тогда
			ЭтаФорма.Элементы.ПравилоОбмена.ПараметрыВыбора = ПараметрыВыбораПравилаОбмена;
		КонецЕсли;
	Иначе
		ЭтаФорма.Элементы.ПравилоОбмена.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ПриЧтенииНаСервере".
//
Процедура ЭкземплярОборудованияПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма) Экспорт

КонецПроцедуры

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ПередЗаписьюНаСервере".
//
Процедура ЭкземплярОборудованияПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт

КонецПроцедуры

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ПриЗаписиНаСервере".
//
Процедура ЭкземплярОборудованияПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт

КонецПроцедуры

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ПослеЗаписиНаСервере".
//
Процедура ЭкземплярОборудованияПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи) Экспорт

КонецПроцедуры

// Дополнительные переопределяемые действия с управляемой формой в Экземпляре оборудования
// при событии "ОбработкаПроверкиЗаполненияНаСервере".
//
Процедура ЭкземплярОборудованияОбработкаПроверкиЗаполненияНаСервере(Объект, ЭтаФорма, Отказ, ПроверяемыеРеквизиты) Экспорт

КонецПроцедуры

#КонецОбласти