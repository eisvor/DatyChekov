
#Область РегламентныеЗадания

// Обработчик регламентного задания очистки пула кодов маркировки
// 
Процедура ОчисткаПулаКодовМаркировкиРегламентноеЗадание() Экспорт
	
	ОбщегоНазначенияИСМПТКПереопределяемый.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОчисткаПулаКодовМаркировкиИСМПТК);
	
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСведений.ПулКодовМаркировкиСУЗИСМПТК.ОчисткаПулаКодовМаркировки();
	
КонецПроцедуры

// Выполнить регламентное задание обмена с ИС
//
Процедура ВыполнитьОбменРегламентноеЗадание() Экспорт
	
	ОбщегоНазначенияИСМПТКПереопределяемый.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаПолучениеДанныхИСМПТК);
	УстановитьПривилегированныйРежим(Истина);
		
КонецПроцедуры

// Выполнить регламентное задание обмена с ИС СУЗ
//
Процедура ВыполнитьОбменРегламентноеЗадание_ОбменСУЗ() Экспорт
	
	ОбщегоНазначенияИСМПТКПереопределяемый.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаПолучениеДанныхСУЗИСМПТК);
	
	УстановитьПривилегированныйРежим(Истина);
	Документы.ЗаказКодовМаркировкиСУЗИСМПТК.ПолучитьИнформациюПоСтатусамЗаказов();
	Документы.АгрегацияКодовМаркировкиСУЗИСМПТК.ПолучитьИнформациюПоСтатусамАгрегации();
	Документы.НанесениеКодовМаркировкиСУЗИСМПТК.ПолучитьИнформациюПоСтатусамНанесения();
	
КонецПроцедуры

// Заполняет представление регламентного задания (реквизиты ЗаданиеАктивно, ТекстРасписания)
//
// Параметры:
//  Задание				 - РегламентноеЗадание, Неопределено - регламентное задание представление которого необходимо получить
//  ТекстРасписания		 - Строка - представление расписания (выходной)
//  РасписаниеАктивно	 - Булево - использование задания (выходной)
//
Процедура ПолучитьТекстЗаголовкаИРасписанияРегламентнойНастройки(Задание, ТекстРасписания, РасписаниеАктивно) Экспорт
	
	РасписаниеАктивно = Ложь;
	
	Если Задание = Неопределено Тогда
		
		ТекстРасписания = НСтр("ru = '<Расписание не задано>'");
		
	Иначе
		
		Если Задание.Использование Тогда
			РасписаниеАктивно = Истина;
			ТекстРасписания = СтрШаблон(НСтр("ru = 'Расписание: %1'"), Строка(Задание.Расписание));
		Иначе
			ТекстРасписания = СтрШаблон(НСтр("ru = 'Расписание (НЕ АКТИВНО): %1'"), Строка(Задание.Расписание));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаИПолучениеНастроекУчета

Функция ПолучитьАдресаСерверовИС() Экспорт
	
	СервераИС = Новый Структура();
	СервераИС.Вставить("АдресИСМПТ",  Константы.АдресСервераИСМПТК.Получить());
	СервераИС.Вставить("АдресИСЦЭДМ", Константы.АдресСервераИСЦЭДМ.Получить());
	СервераИС.Вставить("АдресСУЗ",	  Константы.АдресСервераСУЗИСМПТК.Получить());
	
	Возврат СервераИС;
	
КонецФункции

//Обрезает адрес сервера для использования в методах АПИ
//
Функция ОбработатьАдресИСМПТКонстанта(АдресКонстанта) Экспорт
	
	АдресИСМПТ = "";
	
	Если ЗначениеЗаполнено(АдресКонстанта) Тогда
		АдресКонстанта = СокрЛП(АдресКонстанта);
		Если НЕ СтрНайти(АдресКонстанта, "https://") = 0 Тогда
			АдресИСМПТ = СтрЗаменить(АдресКонстанта, "https://", "");
		ИначеЕсли НЕ СтрНайти(АдресКонстанта, "http://") = 0 Тогда
			АдресИСМПТ = СтрЗаменить(АдресКонстанта, "http://", "");
		Иначе
			АдресИСМПТ = АдресКонстанта;
		КонецЕсли;
		
		Если НЕ СтрНайти(АдресИСМПТ, "/") = 0 Тогда
			АдресИСМПТ = СтрЗаменить(АдресИСМПТ, "/", "");
		КонецЕсли;
	КонецЕсли;
	
	Возврат АдресИСМПТ;
	
КонецФункции

Функция ПолучитьТекущиюВерсиюМакета() Экспорт
	
	Возврат "5.24";
	
КонецФункции

// Возвращает параметры метода API ИС МПТ, сохраненные в регистре сведений ПараметрыМетодовИСМПТК.
//
// Параметры:
//  СтруктурнаяЕдиница - См. Метаданные.РегистрыСведений.ПараметрыМетодовИСМПТК.Измерения.СтруктурнаяЕдиница.Тип - Структурная единица, от имени которой будет вызываться метод.
//  ИмяМетода - Строка - Имя метода, параметры которого необходимо получить.
//  Направление - ПеречислениеСсылка.НаправленияДокументовИСМПТК - Направление документов, для которого необходимо получить параметры.
//
// Возвращаемое значение:
//  Структура - Ключ - Имя параметра, Значение - Значение параметра.
//                     Имя параметра возвращается в верхнем регистре.
//
Функция ПолучитьПараметрыМетода(Знач СтруктурнаяЕдиница, Знач СкладЦЭДМ, Знач ИмяМетода, Знач Направление) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыМетодовИСМПТК.ИмяПараметра,
	|	ПараметрыМетодовИСМПТК.ЗначениеПараметра
	|ИЗ
	|	РегистрСведений.ПараметрыМетодовИСМПТК КАК ПараметрыМетодовИСМПТК
	|ГДЕ
	|	ПараметрыМетодовИСМПТК.Организация = &СтруктурнаяЕдиница
	|	И ПараметрыМетодовИСМПТК.ИмяМетода = &ИмяМетода" + ?(ЗначениеЗаполнено(Направление), "
	|	И ПараметрыМетодовИСМПТК.Направление = &Направление", "")+ ?(ЗначениеЗаполнено(СкладЦЭДМ), "
	|	И ПараметрыМетодовИСМПТК.СкладЦЭДМ = &СкладЦЭДМ", ""); // параметр может быть не заполнен 
	
	Запрос.УстановитьПараметр("ИмяМетода", 	 ИмяМетода);
	Запрос.УстановитьПараметр("Направление", Направление);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("СкладЦЭДМ", СкладЦЭДМ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыМетода = Новый Соответствие();
	
	Пока Выборка.Следующий() Цикл
		ПараметрыМетода.Вставить(Выборка.ИмяПараметра, Выборка.ЗначениеПараметра);
	КонецЦикла;
	
	Возврат ПараметрыМетода;
	
КонецФункции

#КонецОбласти

#Область УстановкаСоответствийЗначений

Функция ИмяМетодаДляВидаДокументов(ВидыДокументов) Экспорт
	
	Если ВидыДокументов = "Акты" Тогда
		Возврат Перечисления.ИменаМетодовИСМПТК.ВходящиеАктыППИСМПТ;
	ИначеЕсли ВидыДокументов = "УведомленияОВвозе" Тогда
		Возврат Перечисления.ИменаМетодовИСМПТК.ВходящиеУведомленияОВвозеИзЕАЭСИСМПТК;
	ИначеЕсли ВидыДокументов = "УведомленияОВвозеИмпорт" Тогда
		Возврат Перечисления.ИменаМетодовИСМПТК.ВходящиеУведомленияОВвозеИмпортИСМПТК;
	ИначеЕсли ВидыДокументов = "УведомленияОбОтгрузке" Тогда
		Возврат Перечисления.ИменаМетодовИСМПТК.ВходящиеУведомленияОбОтгрузкеИСМПТК;
	КонецЕсли;
	
КонецФункции 

Функция ИмяМетодаДляВидаДокументовЦЭДМ(ВидыДокументов) Экспорт
	
	Если ВидыДокументов = "1,10" Или ВидыДокументов = "1" Или ВидыДокументов = "10" Тогда
		Возврат Перечисления.ИменаМетодовИСМПТК.ВходящиеАктыППИСЦЭДМ;
	ИначеЕсли ВидыДокументов = "6,7"  Или ВидыДокументов = "6" Или ВидыДокументов = "7" Тогда
		Возврат Перечисления.ИменаМетодовИСМПТК.ВходящиеАктыВнутреннегоПеремещенияИСЦЭДМ;
	ИначеЕсли ВидыДокументов = "11" Тогда
		Возврат Перечисления.ИменаМетодовИСМПТК.ВходящиеОтчетыОПередачиКИОтНерезедентаИСЦЭДМ;
	ИначеЕсли ВидыДокументов = "7000" Тогда
		Возврат Перечисления.ИменаМетодовИСМПТК.ВходящиеУведомленияОРасхожденияхИСЦЭДМ;
	ИначеЕсли ВидыДокументов = "2" Тогда
		Возврат Перечисления.ИменаМетодовИСМПТК.ВходящиеУведомленияОВвозеИзЕАЭСИСЦЭДМ;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗначениеСтатусаКМПоСоответствию(СтатусКМСервер) Экспорт
	
	//Не локализуется! Должно соответствовать тексту АПИ.
	
	Если СтатусКМСервер = "INTRODUCED" 
		Или СтатусКМСервер = 2 
		ИЛИ СтатусКМСервер = "Введен в оборот" Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.ВведенВОборот");
		
	ИначеЕсли СтатусКМСервер = "INTRODUCED_RETURNED" 
		Или СтатусКМСервер = 6 
		Или СтатусКМСервер = "Возвращён в оборот" Тогда 
		
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.ВозвращенВОборот");
		
	ИначеЕсли СтатусКМСервер = "WITHDRAWN"
		Или СтатусКМСервер = 4 
		Или СтатусКМСервер = "Выведен из оборота, продан" Тогда 

		Возврат ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.ВыведенИзОборота");
		
	ИначеЕсли СтатусКМСервер = "LOAN_RETIRED"
		Или СтатусКМСервер = 10 
		Или СтатусКМСервер = "Выведен из оборота по договору рассрочки" Тогда 
		
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.ВыведенИзОборотаРассрочка");
		
	ИначеЕсли СтатусКМСервер = "REMARK_RETIRED"
		Или СтатусКМСервер = 11 
		Или СтатусКМСервер = "Выведен из оборота при перемаркировке" Тогда 
		
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.ВыведенИзОборотаПриПеремаркировке");
		
	ИначеЕсли СтатусКМСервер = "DISAGGREGATED"
		Или СтатусКМСервер = 7 
		Или СтатусКМСервер = "Дезагрегирован" Тогда 
		
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.Дезагрегирован");
		
	ИначеЕсли СтатусКМСервер = "RESERVED_NOT_USED"
		Или СтатусКМСервер = 5 
		Или СтатусКМСервер = "Зарезервировано. Не использовать" Тогда 
		
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.Дезагрегирован");
		
	ИначеЕсли СтатусКМСервер = "EXPORTED"
		Или СтатусКМСервер = 9 
		Или СтатусКМСервер = "Используется для документов экспорта" Тогда 
		
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.Экспорт");
		
	ИначеЕсли СтатусКМСервер = "APPLIED"
		Или СтатусКМСервер = 1 
		Или СтатусКМСервер = "Нанесён"
		Или СтатусКМСервер = "Нанесен КМ" Тогда 
		
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.Нанесен");
		
	ИначеЕсли СтатусКМСервер = "APPLIED_NOT_PAID"
		Или СтатусКМСервер = 12 
		Или СтатусКМСервер = "Нанесён, не оплачен" Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.НанесенНеОплачен");
		
	ИначеЕсли СтатусКМСервер = "WRITTEN_OFF"
		Или СтатусКМСервер = 3 
		Или СтатусКМСервер = "Утилизирован" 
		Или СтатусКМСервер = "Списан" Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.Утилизирован");
		
	ИначеЕсли СтатусКМСервер = "EMITTED"
		Или СтатусКМСервер = 0 
		Или СтатусКМСервер = "Эмитирован"
		Или СтатусКМСервер = "Эмитирован КМ" Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.Эмитирован");
		
	ИначеЕсли СтатусКМСервер = "Активный" Тогда
		
		//ИС ЦЭДМ, упаковка
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМПТК.Активный");
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции

Функция ПолучитьЗначениеВидаПродукцииПоСоответствию(ВидПродукцииСервер) Экспорт
	
	Если ВидПродукцииСервер = "tobacco"
		Или ВидПродукцииСервер = 3 Тогда
		
		Возврат Перечисления.ВидыПродукцииИСМПТК.Табачная;
		
	ИначеЕсли ВидПродукцииСервер = "shoes" 
		Или ВидПродукцииСервер = 2 Тогда
		
		Возврат Перечисления.ВидыПродукцииИСМПТК.Обувная;
		
	ИначеЕсли ВидПродукцииСервер = "milk"
		Или ВидПродукцииСервер = 8 Тогда
		
		Возврат Перечисления.ВидыПродукцииИСМПТК.МолочнаяПродукция;
		
	ИначеЕсли ВидПродукцииСервер = "pharma"
		Или ВидПродукцииСервер = 7 Тогда
		
		Возврат Перечисления.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты;
		
	ИначеЕсли ВидПродукцииСервер = "lp" Тогда
		Возврат Перечисления.ВидыПродукцииИСМПТК.ЛегкаяПромышленность;
		
	ИначеЕсли ВидПродукцииСервер = "water" Тогда
		Возврат Перечисления.ВидыПродукцииИСМПТК.БезалкогольныеНапитки;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗначениеВидУпаковкиПоСоответствию(ВидУпаковкиСервер) Экспорт
	
	Если ВидУпаковкиСервер = "UNIT" Тогда  
		Возврат Перечисления.ВидыУпаковокИСМПТК.Потребительская;
		
	ИначеЕсли ВидУпаковкиСервер = "LEVEL1" Тогда
		Возврат Перечисления.ВидыУпаковокИСМПТК.Групповая;
		
	ИначеЕсли ВидУпаковкиСервер = "LEVEL2" Тогда
		Возврат Перечисления.ВидыУпаковокИСМПТК.Логистическая;
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция ПуолучитьИдентификаторУровняУпаковки(УровеньУпаковки) Экспорт
	
	ИДУпаковки = "";
	
	Если УровеньУпаковки = Перечисления.УровниУпаковокИСЦЭДМ.Пачка Тогда 
		ИДУпаковки = "UNIT";
	ИначеЕсли УровеньУпаковки = Перечисления.УровниУпаковокИСЦЭДМ.Коробка Тогда 
		ИДУпаковки = "LEVEL2"; 
	ИначеЕсли УровеньУпаковки = Перечисления.УровниУпаковокИСЦЭДМ.Паллета Тогда 
		ИДУпаковки = "LEVEL3"; 
	ИначеЕсли УровеньУпаковки = Перечисления.УровниУпаковокИСЦЭДМ.Упаковка4Уровень Тогда 
		ИДУпаковки = "LEVEL4";
	ИначеЕсли УровеньУпаковки = Перечисления.УровниУпаковокИСЦЭДМ.Упаковка5Уровень Тогда 
		ИДУпаковки = "LEVEL5";
	ИначеЕсли УровеньУпаковки = Перечисления.УровниУпаковокИСЦЭДМ.Комплект Тогда 
		ИДУпаковки = "BUNDLE";
	КонецЕсли;
	
	Возврат ИДУпаковки;
	
КонецФункции

Функция ПолучитьУровеньУпаковкиПоИдентификатору(ИдентификаторУпаковки) Экспорт
	
	Упаковка = Перечисления.УровниУпаковокИСЦЭДМ.ПустаяСсылка();
	
	Если ИдентификаторУпаковки = "UNIT" Тогда 
		Упаковка = Перечисления.УровниУпаковокИСЦЭДМ.Пачка;
	ИначеЕсли ИдентификаторУпаковки = "LEVEL2" Тогда 
		Упаковка = Перечисления.УровниУпаковокИСЦЭДМ.Коробка;
	ИначеЕсли ИдентификаторУпаковки = "LEVEL3" Тогда 
		Упаковка = Перечисления.УровниУпаковокИСЦЭДМ.Паллета; 
	ИначеЕсли ИдентификаторУпаковки = "LEVEL4" Тогда 
		Упаковка = Перечисления.УровниУпаковокИСЦЭДМ.Упаковка4Уровень;
	ИначеЕсли ИдентификаторУпаковки =  "LEVEL5" Тогда 
		Упаковка =Перечисления.УровниУпаковокИСЦЭДМ.Упаковка5Уровень;
	ИначеЕсли ИдентификаторУпаковки = "BUNDLE" Тогда 
		Упаковка = Перечисления.УровниУпаковокИСЦЭДМ.Комплект;
	КонецЕсли;
	
	Возврат Упаковка;
	
КонецФункции

Функция ПолучитьВидУпаковкиПоИдентификаторуУровня(ИдентификаторУпаковки) Экспорт
	
	//Применяется только в ИС ЦЭДМ, групповых упаковок не предусмотрено
	Упаковка = Перечисления.ВидыУпаковокИСМПТК.ПустаяСсылка();
	
	Если ИдентификаторУпаковки = "UNIT" Тогда 
		Упаковка = Перечисления.ВидыУпаковокИСМПТК.Потребительская;
	Иначе
		Упаковка = Перечисления.ВидыУпаковокИСМПТК.Логистическая;
	КонецЕсли;
	
	Возврат Упаковка;
	
КонецФункции

#КонецОбласти

#Область РаботаСВнешнимиСервисами

// Сохраняет параметр метода API ИС МПТ в регистр сведений ПараметрыМетодовИСМПТК.
//
// Параметры:
//  СтруктурнаяЕдиница - См. Метаданные.РегистрыСведений.ПараметрыМетодовИСМПТК.Измерения.СтруктурнаяЕдиница.Тип - Структурная единица, от имени которой будет вызываться метод.
//  ИмяМетода - Строка - Имя метода, параметр которого необходимо сохранить.
//  Направление - ПеречислениеСсылка.НаправленияДокументовИСМПТК - Направление документа, для которого необходимо сохранить параметр.
//  ИмяПараметра - Строка - Имя сохраняемого параметра.
//  ЗначениеПараметра - Строка - Значение сохраняемого парметра.
//
Процедура СохранитьПараметрыМетода(Знач СтруктурнаяЕдиница, Знач СкладЦЭДМ, Знач ИмяМетода, Знач Направление, Знач ИмяПараметра, Знач ЗначениеПараметра) Экспорт
	
	НаборЗаписей = РегистрыСведений.ПараметрыМетодовИСМПТК.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(СтруктурнаяЕдиница);
	НаборЗаписей.Отбор.СкладЦЭДМ.Установить(СкладЦЭДМ);
	НаборЗаписей.Отбор.ИмяМетода.Установить(ИмяМетода);
	НаборЗаписей.Отбор.Направление.Установить(Направление);
	НаборЗаписей.Отбор.ИмяПараметра.Установить(ИмяПараметра); 
	
	НаборЗаписей.Прочитать();
	
	Если Не НаборЗаписей.Количество() = 1 Тогда
		НаборЗаписей.Очистить();
		ЗаписьПараметра = НаборЗаписей.Добавить();
		ЗаписьПараметра.Организация  = СтруктурнаяЕдиница;
		ЗаписьПараметра.СкладЦЭДМ 	 = СкладЦЭДМ;
		ЗаписьПараметра.ИмяМетода 	 = ИмяМетода;
		ЗаписьПараметра.Направление  = Направление;
		ЗаписьПараметра.ИмяПараметра = ИмяПараметра;
	Иначе 
		ЗаписьПараметра = НаборЗаписей[0];
	КонецЕсли;
		
	ЗаписьПараметра.ЗначениеПараметра = ЗначениеПараметра;
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция URLЗапроса(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, HTTPМетод) Экспорт

	Если ПараметрыОтправкиHTTPЗапросов.ИспользоватьЗащищенноеСоединение Тогда
		Протокол = "https";
	Иначе
		Протокол = "http";
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"%1 %2://%3:%4/%5",
		HTTPМетод,
		Протокол,
		ПараметрыОтправкиHTTPЗапросов.Сервер,
		Формат(ПараметрыОтправкиHTTPЗапросов.Порт, "ЧГ=0;"),
		HTTPЗапрос.АдресРесурса);
	
	Возврат URLЗапроса;

КонецФункции

Функция ВремяОжидания(НомерИтерации) Экспорт
	
	Если НомерИтерации <= 1 Тогда
		ВремяОжидания = 5;
	ИначеЕсли НомерИтерации < 15 Тогда
		ВремяОжидания = 5 * Pow(1.4, НомерИтерации - 1);
	Иначе
		ВремяОжидания = 120;
	КонецЕсли;
	
	Возврат ВремяОжидания;
	
КонецФункции

// Формирует пустую структуру сообщения XML
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ТекстОшибки                 - Строка - Текст ошибки.
//   * Ошибки                      - Соответствие - Описание ошибок.
//   * Описание                    - Строка - Описание для отображения в форме подписания.
//   * ТекстСообщенияJSON          - Строка - Текст сообщения JSON.
//   * ТипЗапроса                  - ПеречислениеСсылка.ТипыЗапросовИСМПТК - Тип сообщения.
//   * Организация                 - ОпределяемыйТип.Организации - Организация.
//   * Операция                    - ПеречислениеСсылка.ВидыОперацийИСМПТК - Вид операции.
//   * Документ                    - ДокументСсылка - Документ.
//   * Версия                      - Строка - Версия сообщения.
//   * СообщениеОснование          - СправочникСсылка.ИСМППрисоединенныеФайлы - сообщение основание.
//   * ДанныеДляПолученияДокумента - Структура - Данные для получения документа.
//   * ДокументОснование           - ДокументСсылка - Документ основание.
Функция СтруктураСообщенияJSON() Экспорт
	
	СообщениеJSON = Новый Структура;
	
	СообщениеJSON.Вставить("ТекстОшибки", "");
	СообщениеJSON.Вставить("Ошибки", Новый Соответствие);
	СообщениеJSON.Вставить("ИдентификаторЗаявки");

	// Для отображения в форме подписания
	СообщениеJSON.Вставить("Описание", "");
	// Для управления очередностью
	СообщениеJSON.Вставить("Идентификатор");
	СообщениеJSON.Вставить("ЗагружатьДо");
	СообщениеJSON.Вставить("ЗагружатьПосле");
	
	// Для использования в механизмах электронной подписи
	СообщениеJSON.Вставить("ТекстСообщенияJSON");
	СообщениеJSON.Вставить("ТребуетсяПодписание");
	СообщениеJSON.Вставить("ТипСообщения");
	СообщениеJSON.Вставить("Версия", 0);
	
	// Для сохранения в Протокол обмена
	СообщениеJSON.Вставить("ВерсияГосИС");
	СообщениеJSON.Вставить("ВидПродукции");
	СообщениеJSON.Вставить("Операция");
	СообщениеJSON.Вставить("Назначение");
	СообщениеJSON.Вставить("СтанцияУправленияЗаказами");
	
	// Используется при запросах квитанций
	СообщениеJSON.Вставить("СообщениеОснование");
	
	// Используется при получении кодов маркировки из СУЗ
	СообщениеJSON.Вставить("ПараметрыЗапроса");
	
	// Для обновления в формах
	СообщениеJSON.Вставить("Организация");
	СообщениеJSON.Вставить("Документ");
	СообщениеJSON.Вставить("ДокументОснование");
	
	Возврат СообщениеJSON;
	
КонецФункции

// Формирует пустую структуру изменений данных
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//
Функция СтруктураИзменения() Экспорт
	
	СтруктураИзменения = Новый Структура;
	
	// Назначение сообщений
	СтруктураИзменения.Вставить("Операция");
	СтруктураИзменения.Вставить("Назначение");
	СтруктураИзменения.Вставить("СтанцияУправленияЗаказами");
	
	// Источник
	СтруктураИзменения.Вставить("Организация");
	СтруктураИзменения.Вставить("Объект");
	СтруктураИзменения.Вставить("ДокументОснование");
	
	// Событие
	СтруктураИзменения.Вставить("ТекстОшибки",           "");
	СтруктураИзменения.Вставить("ПодготовленоКПередаче", Ложь);
	СтруктураИзменения.Вставить("Передано",              Ложь);
	СтруктураИзменения.Вставить("Принято",               Ложь);
	СтруктураИзменения.Вставить("ОбъектИзменен",         Ложь);
	СтруктураИзменения.Вставить("НовыйСтатус",           Неопределено);
	
	// Описание, протокол
	СтруктураИзменения.Вставить("Сообщение");
	СтруктураИзменения.Вставить("ТекстСообщения");
	СтруктураИзменения.Вставить("ПредставлениеПротоколаОбмена");
	
	Возврат СтруктураИзменения;
	
КонецФункции

// Вывести HTTP-Запрос в лог
//
// Параметры:
//  HTTPЗапрос - HTTPЗапрос - HTTP-запрос для вывода в файл.
//             - HTTPОтвет  - HTTP-ответ для вывода в файл.
//  ПутьКФайлу - Строка - Путь к файлу для записи лога.
//
// Возвращаемое значение:
//  Строка - Представление протокола
Функция ВывестиHTTPЗапросВЛог(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, HTTPМетод, ПутьКФайлу = Неопределено, ТекстОшибки = "") Экспорт
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	Если ПутьКФайлу <> Неопределено Тогда
		ТекстовыйДокумент.Прочитать(ПутьКФайлу, КодировкаТекста.UTF8);
	КонецЕсли;
	
	Если HTTPЗапрос <> Неопределено Тогда
		Если ТипЗнч(HTTPЗапрос) = Тип("HTTPЗапрос") Тогда
			
			Если ТекстовыйДокумент.КоличествоСтрок() > 0 Тогда
				ТекстовыйДокумент.ДобавитьСтроку("");
			КонецЕсли;
			
			URLЗапроса = URLЗапроса(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, HTTPМетод);
			
			ТекстовыйДокумент.ДобавитьСтроку(URLЗапроса);
		ИначеЕсли ТипЗнч(HTTPЗапрос) = Тип("HTTPОтвет") Тогда
			ТекстовыйДокумент.ДобавитьСтроку("");
		КонецЕсли;
	
		Для Каждого КлючИЗначение Из HTTPЗапрос.Заголовки Цикл
			ТекстовыйДокумент.ДобавитьСтроку(
				СтрШаблон("%1: %2", КлючИЗначение.Ключ, КлючИЗначение.Значение));
		КонецЦикла;
	
		Тело = HTTPЗапрос.ПолучитьТелоКакСтроку();
	
		Если Не ПустаяСтрока(Тело) Тогда
			ТекстовыйДокумент.ДобавитьСтроку(Тело);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстовыйДокумент.ДобавитьСтроку(ТекстОшибки);
	КонецЕсли;
	
	Если ПутьКФайлу <> Неопределено Тогда
		ТекстовыйДокумент.Записать(ПутьКФайлу, КодировкаТекста.UTF8);
	КонецЕсли;

	Возврат ТекстовыйДокумент.ПолучитьТекст();

КонецФункции

Функция ПолучитьДанныеИзСервиса(АдресЗапроса, КлючСессии, ПараметрыОтправкиHTTPЗапросов, ЗаголовокHTTP = Неопределено) Экспорт
	
	Если ЗаголовокHTTP = Неопределено Тогда
		ЗаголовокHTTP = Новый Соответствие();
		ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
		ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
		Если КлючСессии <> Неопределено Тогда
			ЗаголовокHTTP.Вставить("Authorization", СтрШаблон("Bearer %1", КлючСессии));
		КонецЕсли;
	КонецЕсли;
	
	HTTPЗапрос  = Новый HTTPЗапрос(АдресЗапроса, ЗаголовокHTTP);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	Если ПараметрыОтправкиHTTPЗапросов.ИспользоватьЗащищенноеСоединение Тогда
		ИнтернетПрокси = ИнтеграцияИСМПТКПереопределяемый.ПолучитьПрокси("HTTPS");
		ЗащищенноеСоединение = ИнтеграцияИСМПТКПовтИсп.ЗащищенноеСоединение();
	Иначе
		ИнтернетПрокси = ИнтеграцияИСМПТКПереопределяемый.ПолучитьПрокси("HTTP");
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			ПараметрыОтправкиHTTPЗапросов.Сервер,
			ПараметрыОтправкиHTTPЗапросов.Порт,,,
			ИнтернетПрокси,
			ПараметрыОтправкиHTTPЗапросов.Таймаут,
			ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ПолучитьДанныеИзСервиса");
		
		ТекстОшибкиЖурнал = НСтр("ru = 'Ошибка при выполнении запроса GET ""%ИмяМетода%"" на сервере %ИмяМодуля% (%АдресСервера%, порт %АдресПорта%): '")
						  + Символы.ПС
						  + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибкиЖурнал = СтрЗаменить(ТекстОшибкиЖурнал, "%ИмяМетода%",    АдресЗапроса);
		ТекстОшибкиЖурнал = СтрЗаменить(ТекстОшибкиЖурнал, "%ИмяМодуля%",    ПараметрыОтправкиHTTPЗапросов.ПредставлениеСервиса);
		ТекстОшибкиЖурнал = СтрЗаменить(ТекстОшибкиЖурнал, "%АдресСервера%", ПараметрыОтправкиHTTPЗапросов.Сервер);
		ТекстОшибкиЖурнал = СтрЗаменить(ТекстОшибкиЖурнал, "%АдресПорта%",   ПараметрыОтправкиHTTPЗапросов.Порт);
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибкиЖурнал);
				
	КонецПопытки;
	
	ПутьКФайлу = Неопределено;
	ИнтеграцияИСМПТКПереопределяемый.ПриОпределенииПутиКФайлуЛогирования(ПутьКФайлу);
	Если ПутьКФайлу <> Неопределено Тогда
		ВывестиHTTPЗапросВЛог(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, "GET", ПутьКФайлу);
		ВывестиHTTPЗапросВЛог(HTTPОтвет,  Неопределено, Неопределено, ПутьКФайлу, ТекстОшибки);
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ПараметрыОтправкиHTTPЗапросов", ПараметрыОтправкиHTTPЗапросов);
	ВозвращаемоеЗначение.Вставить("HTTPМетод",   "GET");
	ВозвращаемоеЗначение.Вставить("HTTPЗапрос",  HTTPЗапрос);
	ВозвращаемоеЗначение.Вставить("HTTPОтвет",   HTTPОтвет);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки", ТекстОшибки);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ОтправитьДанныеВСервис(АдресЗапроса, ТелоЗапроса, КлючСессии, HTTPМетод, ПараметрыОтправкиHTTPЗапросов, ЗаголовокHTTP = Неопределено) Экспорт
	
	Если ТелоЗапроса <> Неопределено И ТипЗнч(ТелоЗапроса) = Тип("Строка") Тогда
		ТелоЗапросаJSON = ТелоЗапроса;
	ИначеЕсли ТелоЗапроса <> Неопределено Тогда
		ТелоЗапросаJSON = ОбъектВТекстJSON(ТелоЗапроса, Истина);
	КонецЕсли;
	
	Если ЗаголовокHTTP = Неопределено Тогда
		ЗаголовокHTTP = Новый Соответствие();
		ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
		ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
		Если КлючСессии <> Неопределено Тогда
			ЗаголовокHTTP.Вставить("Authorization", СтрШаблон("Bearer %1", КлючСессии));
		КонецЕсли;
	КонецЕсли;
	
	HTTPЗапрос  = Новый HTTPЗапрос(АдресЗапроса, ЗаголовокHTTP);
	Если ТелоЗапроса <> Неопределено Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапросаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли;
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	Если ПараметрыОтправкиHTTPЗапросов.ИспользоватьЗащищенноеСоединение Тогда
		ИнтернетПрокси = ИнтеграцияИСМПТКПереопределяемый.ПолучитьПрокси("HTTPS");
		ЗащищенноеСоединение = ИнтеграцияИСМПТКПовтИсп.ЗащищенноеСоединение();
	Иначе
		ИнтернетПрокси = ИнтеграцияИСМПТКПереопределяемый.ПолучитьПрокси("HTTP");
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			ПараметрыОтправкиHTTPЗапросов.Сервер,
			ПараметрыОтправкиHTTPЗапросов.Порт,,,
			ИнтернетПрокси,
			ПараметрыОтправкиHTTPЗапросов.Таймаут,
			ЗащищенноеСоединение);
		
		Если HTTPМетод = "POST" Тогда
			HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		Иначе
			HTTPОтвет = Соединение.ВызватьHTTPМетод(HTTPМетод, HTTPЗапрос);
		КонецЕсли;
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОтправитьДанныеВСервис");
		
		ТекстОшибкиЖурнал = НСтр("ru = 'Ошибка при выполнении запроса POST ""%ИмяМетода%"" на сервере ИС МПТ (%ИмяСервера%): '")
						  + Символы.ПС
						  + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибкиЖурнал = СтрЗаменить(ТекстОшибкиЖурнал, "%ИмяМетода%",  АдресЗапроса);
		ТекстОшибкиЖурнал = СтрЗаменить(ТекстОшибкиЖурнал, "%ИмяСервера%", ИнтеграцияИСМПТККлиентСервер.АдресСервера_ИСМП());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибкиЖурнал);
		
	КонецПопытки;
	
	ПутьКФайлу = Неопределено;
	ИнтеграцияИСМПТКПереопределяемый.ПриОпределенииПутиКФайлуЛогирования(ПутьКФайлу);
	Если ПутьКФайлу <> Неопределено Тогда
		ВывестиHTTPЗапросВЛог(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, HTTPМетод, ПутьКФайлу, ТекстОшибки);
		ВывестиHTTPЗапросВЛог(HTTPОтвет,  Неопределено, Неопределено, ПутьКФайлу);
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ПараметрыОтправкиHTTPЗапросов", ПараметрыОтправкиHTTPЗапросов);
	ВозвращаемоеЗначение.Вставить("HTTPМетод",   HTTPМетод);
	ВозвращаемоеЗначение.Вставить("HTTPЗапрос",  HTTPЗапрос);
	ВозвращаемоеЗначение.Вставить("HTTPОтвет",   HTTPОтвет);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки", ТекстОшибки);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПодписьИзСвойствПодписи(ВходящиеДанные)

	Если ТипЗнч(ВходящиеДанные) = Тип("Строка") Тогда
		СвойстваПодписи = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	Иначе
		СвойстваПодписи = ВходящиеДанные;
	КонецЕсли;

	Если ТипЗнч(СвойстваПодписи) = Тип("Структура") Тогда
		Подпись = СвойстваПодписи.Подпись;
	Иначе
		Подпись = "";
	КонецЕсли;

	Возврат Подпись;

КонецФункции

Функция ПолучитьСписокПрофилейИсходящихДокументов(ИдентификаторДокумента, БИНОрганизации, СтруктурнаяЕдиница, ТипДокументов, ТокенАвторизации = Неопределено) Экспорт
	
	Параметры = Новый Структура();	
	Параметры.Вставить("Bin", БИНОрганизации);
	Параметры.Вставить("documentID", ИдентификаторДокумента);
	
	Возврат ЭлектронноеВзаимодействиеССервисамиМаркировка.ПолучитьСписокПрофилейИсходящихДокументов(Параметры, СтруктурнаяЕдиница, ТипДокументов, ТокенАвторизации);
	
КонецФункции

Функция ПолучитьСписокПрофилейВходящихДокументов(ИдентификаторДокумента, БИНОрганизации, СтруктурнаяЕдиница, ТипДокументов, ТокенАвторизации = Неопределено) Экспорт

	Параметры = Новый Структура();	
	Параметры.Вставить("Bin", БИНОрганизации);
	Параметры.Вставить("documentID", ИдентификаторДокумента);
	
	Возврат ЭлектронноеВзаимодействиеССервисамиМаркировка.ПолучитьСписокПрофилейВходящихДокументов(Параметры, СтруктурнаяЕдиница, ТипДокументов, ТокенАвторизации);
	
КонецФункции 

Функция ПолучитьПрофильДокумента(ИдентификаторДокумента, БИНОрганизации, СтруктурнаяЕдиница, ТипДокументов, ТокенАвторизации = Неопределено) Экспорт

	Параметры = Новый Структура();
	Параметры.Вставить("Bin", БИНОрганизации);
	Параметры.Вставить("documentID", ИдентификаторДокумента);
	
	Возврат ЭлектронноеВзаимодействиеССервисамиМаркировка.ПолучитьПрофильДокумента(Параметры, СтруктурнаяЕдиница, ТипДокументов, ТокенАвторизации);
	
КонецФункции

#КонецОбласти

#Область ИСМПТ_АПИ_РаботаСДокументами

#Область СоздатьИСМПТ

Функция СоздатьОбновитьПолученныеДокументы(СтруктурнаяЕдиница, РезультатВыполненияНаСервере, ЭтоИсходящиеДокументы = Ложь, ТокенАвторизации = Неопределено)
	
	ИнформацияОбОшибке = Неопределено;
	Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
		ТекстСообщения = НСтр("ru = 'При создании/обновлении документов с сервера произошла ошибка.'") + " "
					   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПодробностиВЖурналеРегистрации();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		ТекстОшибки = НСтр("ru = 'При создании/обновлении документов с сервера произошла ошибка:'")
					+ Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
					
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.СоздатьОбновитьПолученныеДокументы");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		Возврат 0;
	КонецЕсли;
	
	//новый массив загружаемых документов
	Направление = ?(ЭтоИсходящиеДокументы = Истина, Перечисления.НаправленияДокументовИСМПТК.Исходящий, Перечисления.НаправленияДокументовИСМПТК.Входящий);
	ТекстОтвета = РезультатВыполненияНаСервере.ТекстОтвета;
	МассивАктов = НовыйМассивЗагружаемыхДокументов(ТекстОтвета, СтруктурнаяЕдиница, Направление);
	
	МассивСтарыхДокументов = Новый Массив;
	Для каждого ДокументОбъект Из МассивАктов Цикл
		Если ДокументОбъект.Ссылка.Пустая() Тогда
			ДокументОбъект.Записать();
		Иначе
			КопияДокумента = ДокументОбъект.Скопировать();
			Если КопияДокумента.Марки.Количество() = 0 Тогда
				КопияДокумента.Марки.Загрузить(ДокументОбъект.Марки.Выгрузить());
			КонецЕсли;
			ИсходныйНовый = Новый Структура;
			ИсходныйНовый.Вставить("ИсходныйОбъект", КопияДокумента);
			ИсходныйНовый.Вставить("ОбновленныйОбъект", ДокументОбъект);
			МассивСтарыхДокументов.Добавить(ИсходныйНовый);
		КонецЕсли;
	КонецЦикла;
	
	СчетчикДокументы = 0;
	СчетчикДокументыОшибка = 0;
	
	Для каждого ДокументОбъект Из МассивАктов Цикл
		
		ПараметрыДокумента = Новый Структура;
		ПараметрыДокумента.Вставить("Исходящий", ЭтоИсходящиеДокументы);
		ПараметрыДокумента.Вставить("Идентификатор", ДокументОбъект.Идентификатор);
		РезультатВыполненияНаСервере = ПолучитьДокументСервера(ПараметрыДокумента, СтруктурнаяЕдиница, ТокенАвторизации);
		
		//Дополним ответ сервера информацией по авторизации
		РезультатВыполненияНаСервере.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
		РезультатВыполненияНаСервере.Вставить("ТокенАвторизации", ТокенАвторизации);

		Успешно = Ложь;
		ОбновитьАктПоДаннымСервера(РезультатВыполненияНаСервере, ДокументОбъект.Ссылка, Неопределено, Успешно);
		Если Успешно Тогда
			СчетчикДокументы = СчетчикДокументы + 1;
		Иначе
			СчетчикДокументыОшибка = СчетчикДокументыОшибка + 1;
		КонецЕсли;		
	КонецЦикла;
	
	Если РаботаСДокументамиИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанныхИСМПТ() Тогда
		//// Вывод сообщений о результатах операции ////
		Если Не СчетчикДокументы = 0 Тогда
			Если ЭтоИсходящиеДокументы Тогда
				ТекстСообщения = НСтр("ru = 'Обновлено по данным сервера: %КоличествоДокументов% Акта(-ов) приема/передачи (исходящий).'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Обновлено по данным сервера: %КоличествоДокументов% Акта(-ов) приема/передачи (входящий).'");
			КонецЕсли;
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоДокументов%", СчетчикДокументы);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Не СчетчикДокументыОшибка = 0 Тогда
			Если ЭтоИсходящиеДокументы Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось обновить по данным сервера: %КоличествоДокументов% Акта(-ов) приема/передачи (исходящий).'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Не удалось обновить по данным сервера: %КоличествоДокументов% Акта(-ов) приема/передачи (входящий).'");
			КонецЕсли;
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоДокументов%", СчетчикДокументыОшибка);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если СчетчикДокументы = 0 И СчетчикДокументыОшибка = 0 Тогда
			Если ЭтоИсходящиеДокументы Тогда
				ТекстСообщения = НСтр("ru = 'В указанном периоде нет Актов приема/передачи (исходящих), требующих синхронизации.'");
			Иначе
				ТекстСообщения = НСтр("ru = 'В указанном периоде нет Актов приема/передачи (входящих), требующих синхронизации.'");
			КонецЕсли;
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		////////////////
	КонецЕсли;
	
	ИнтерфейсИСМПТК.ВосстановитьСсылочныеРеквизитыДокументов(МассивСтарыхДокументов);
	ПолучитьДокументыУведомлениеОРасхождении(СтруктурнаяЕдиница, ТекстОтвета, ЭтоИсходящиеДокументы, ТокенАвторизации);
	
КонецФункции

// Функция создаёт либо обновляет документ Уведомление об отгрузки из ЕАЭС
// СтруктураДокумента - структура Документа полученная со стороны сервера ИС МПТ
// ИдентификаторДокумента - Идентификатор документа
//
Функция СоздатьОбновитьУведомлениеОбОтгрузкеЕАЭС(СтруктураДокумента, ИдентификаторДокумента, ДокументОбъектОтгрузка = Неопределено) Экспорт
	
	Если ДокументОбъектОтгрузка = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =  "ВЫБРАТЬ
		|	УведомлениеОбОтгрузкеЕАЭСИСМПТК.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.УведомлениеОбОтгрузкеЕАЭСИСМПТК КАК УведомлениеОбОтгрузкеЕАЭСИСМПТК
		|ГДЕ
		|	УведомлениеОбОтгрузкеЕАЭСИСМПТК.Идентификатор = &Идентификатор";
		
		Запрос.УстановитьПараметр("Идентификатор", ИдентификаторДокумента);
		
		Результат = Запрос.Выполнить();
		
		ОбновитьДокумент = Не Результат.Пустой();
		
		Если Не ОбновитьДокумент Тогда 
			ДокументОбъектОтгрузка = Документы.УведомлениеОбОтгрузкеЕАЭСИСМПТК.СоздатьДокумент();
			ДокументОбъектОтгрузка.Дата = ТекущаяДата();
		Иначе 
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ДокументОбъектОтгрузка = Выборка.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		
	Иначе 
		ОбновитьДокумент = Истина;
	КонецЕсли;

	ДокументОбъектОтгрузка.Марки.Очистить();
	ДокументОбъектОтгрузка.ДокументыСоответствия.Очистить();
	ДокументОбъектОтгрузка.Ошибки.Очистить();
		
	//Заполним статус документа
	ДокументОбъектОтгрузка.Статус = ПолучитьСтатусУведомлениеОбОтгрузкеЕАЭСПоКоду(СтруктураДокумента.status);
	
	НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();
	
	//Коды идентификации переданные документом
	СообщенияОбОшибках = Новый Соответствие();
	Для Каждого СтруктураКИ Из СтруктураДокумента.products Цикл 
		
		ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(СтруктураКИ.cis, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
		
		НоваяСтрокаКИ = ДокументОбъектОтгрузка.Марки.Добавить();
		НоваяСтрокаКИ.КодИдентификации = СтруктураКИ.cis;
		СтруктураКИ.Свойство("accepted", 	НоваяСтрокаКИ.Принят);
		СтруктураКИ.Свойство("productCost", НоваяСтрокаКИ.ЦенаЗаЕдиницу);
		СтруктураКИ.Свойство("productTax", 	НоваяСтрокаКИ.СуммаНДС);
		
		НайденнаяНоменклатура = Неопределено;
		
		НоваяСтрокаКИ.ВидУпаковки = ДанныеРазбора.ВидУпаковки;
		ЗаполнитьРеквизитыGTINПоДаннымРазбораКода(НоваяСтрокаКИ, ДанныеРазбора, НайденнаяНоменклатура, СообщенияОбОшибках);
		НоваяСтрокаКИ.Номенклатура = НайденнаяНоменклатура;
		
		Если Не НайденнаяНоменклатура = Неопределено
			И Не НайденнаяНоменклатура.Пустая() Тогда
			НоваяСтрокаКИ.ВидПродукции = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(НайденнаяНоменклатура);
		Иначе
			НоваяСтрокаКИ.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка");
		КонецЕсли;
		
		НоваяСтрокаКИ.ИдентификаторСтроки = ДокументОбъектОтгрузка.Марки.Индекс(НоваяСтрокаКИ) + 1;
		НоваяСтрокаКИ.Количество = 1;
		
		Для Каждого  ДокументСоответствия Из СтруктураКИ.certificateDocumentData Цикл
			НоваяСтрока = ДокументОбъектОтгрузка.ДокументыСоответствия.Добавить();
			НоваяСтрока.ИдентификаторСтроки = НоваяСтрокаКИ.ИдентификаторСтроки;
			НоваяСтрока.ТипДокумента 		= ВидДокументаСертификации(ДокументСоответствия.certificateType);
			НоваяСтрока.НомерДокумента 		= ДокументСоответствия.certificateNum;
			НоваяСтрока.ДатаДокумента 		= ДокументСоответствия.certificateDate;
		КонецЦикла;
		
	КонецЦикла;
	Если Не ОбновитьДокумент //выводим собщения только в новосозданных документах
		И Не СообщенияОбОшибках.Количество() = 0 Тогда
		Для Каждого СообщениеОшибка Из СообщенияОбОшибках Цикл 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СообщениеОшибка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	//Ошибки документа
	Если СтруктураДокумента.Свойство("documentErrors") Тогда 
		Для Каждого ОшибкаДокумента Из СтруктураДокумента.documentErrors Цикл
			
			НоваяСтрока = ДокументОбъектОтгрузка.Ошибки.Добавить();
			НоваяСтрока.КодОшибки		= ОшибкаДокумента.errorCode;
			НоваяСтрока.ОписаниеОшибки	= ОшибкаДокумента.errorDescription;
			
		КонецЦикла;
	КонецЕсли;
	
	//Если обновляем существующий документ в дальнейшем заполнении нет необходимости
	Если ОбновитьДокумент Тогда
		Возврат ДокументОбъектОтгрузка;
	КонецЕсли;
	
	СоответствияИдентификаторовИСсылок = РаботаСДокументамиИСМПТК.НайтиКонтрагентовИСтруктурныеЕдиницыПоИдентификационнымНомерам(СтруктураДокумента.exporterInn, СтруктураДокумента.receiverInn);
	
	//Получатель
	Если Не СоответствияИдентификаторовИСсылок.СоответствияСтруктурныхЕдиниц[СтруктураДокумента.receiverInn] = Неопределено Тогда 
		
		ДокументОбъектОтгрузка.Организация = СоответствияИдентификаторовИСсылок.СоответствияСтруктурныхЕдиниц[СтруктураДокумента.receiverInn];
		ДокументОбъектОтгрузка.Получатель  = ДокументОбъектОтгрузка.Организация;
		ДокументОбъектОтгрузка.ПолучательНаименование = ДокументОбъектОтгрузка.Организация.Наименование;
		
	КонецЕсли;	
	ДокументОбъектОтгрузка.ПолучательИдентификационныйНомер = СтруктураДокумента.receiverInn;
	
	//Поставщик
	ИдентификационныеНомераКонтрагентов 	 = Новый Массив;
	ИдентификационныеНомераСтруктурныхЕдиниц = Новый Массив;
	ИдентификационныеНомераКонтрагентов.Добавить(СтруктураДокумента.exporterInn);
	ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(СтруктураДокумента.exporterInn);
	СоответствияИдентификаторовИСсылок = РаботаСДокументамиИСМПТК.НайтиКонтрагентовИСтруктурныеЕдиницыПоИдентификационнымНомерам(ИдентификационныеНомераКонтрагентов, ИдентификационныеНомераСтруктурныхЕдиниц);
	// Заполнить ссылки на контрагентов. 
	СоответствияКонтрагентов      = СоответствияИдентификаторовИСсылок.СоответствияКонтрагентов;
	СоответствияСтруктурныхЕдиниц = СоответствияИдентификаторовИСсылок.СоответствияСтруктурныхЕдиниц;
	Контрагент = Неопределено;
	Если Не СоответствияКонтрагентов.Количество() = 0 Тогда 
		Для Каждого ЭлементСоответствияКонтрагентов Из СоответствияКонтрагентов Цикл
			Идентификатор = ЭлементСоответствияКонтрагентов.Ключ;
			Контрагент	  = ЭлементСоответствияКонтрагентов.Значение;
		КонецЦикла;
	Иначе
		Для Каждого ЭлементСоответствияСтруктурныхЕдиниц Из СоответствияСтруктурныхЕдиниц Цикл
			Идентификатор = ЭлементСоответствияСтруктурныхЕдиниц.Ключ;
			Контрагент	  = ЭлементСоответствияСтруктурныхЕдиниц.Значение;
		КонецЦикла;
	КонецЕсли;
	
	ДокументОбъектОтгрузка.Поставщик  = Контрагент;
	ДокументОбъектОтгрузка.Контрагент = Контрагент;
	
	ДокументОбъектОтгрузка.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий");
	
	ДокументОбъектОтгрузка.ПоставщикНаименование 		   = СтруктураДокумента.senderName;
	ДокументОбъектОтгрузка.ПоставщикИдентификационныйНомер = СтруктураДокумента.exporterInn;
	
	ДокументОбъектОтгрузка.СтранаОтправления = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьСтрануПоКоду(СтруктураДокумента.senderCountryCode);
	
	ДокументОбъектОтгрузка.НомерПервичногоДокумента = СтруктураДокумента.documentNum;
	ДокументОбъектОтгрузка.ДатаПервичногоДокумента 	= ПрочитатьДатуJSON(СтруктураДокумента.documentDate, ФорматДатыJSON.ISO);
	
	ДокументОбъектОтгрузка.ДатаОтгрузки  = ПрочитатьДатуJSON(СтруктураДокумента.transferDate, ФорматДатыJSON.ISO);
	ДокументОбъектОтгрузка.ДатаПолучения = ПрочитатьДатуJSON(СтруктураДокумента.receivedAt,   ФорматДатыJSON.ISO);  //Дата ИС МПТ
	Если СтруктураДокумента.Свойство("acceptanceDate") Тогда
		ДокументОбъектОтгрузка.ДатаПриемки = ПрочитатьДатуJSON(СтруктураДокумента.acceptanceDate, ФорматДатыJSON.ISO);
	КонецЕсли;
	
	ДокументОбъектОтгрузка.Идентификатор = ИдентификаторДокумента; 
	
	Возврат ДокументОбъектОтгрузка;
	
КонецФункции

///////////// Акты приема/передачи /////////////

// Создает коллекцию XML строк актов и коллекцию XML строк SignedContent на основе документов Акт приема-передачи.
//
// Параметры:
Процедура СоздатьИсходящиеАкты(Знач МассивДокументов, Знач УстанавливатьПодпись, Знач ТипПодписи, КоллекцияInvoiceXML, КоллекцияSignedContentXML) Экспорт
	
	КоллекцияInvoiceXML = Новый Соответствие;
	КоллекцияSignedContentXML = Новый Соответствие;
	
	Фабрика = Фабрика_XML_API("СхемаАПП_XML_API_ИСМПТК");
	
	Для Каждого СсылкаДокумент Из МассивДокументов Цикл
		
		ОбъектДокумент = СсылкаДокумент.ПолучитьОбъект();
		ДокументXDTO = НовыйАкт(ОбъектДокумент, Фабрика);
		ДокументXML  = ОбщегоНазначенияИСМПТК.КаноническаяСтрокаXMLИзОбъектаXDTO(ДокументXDTO, "file", Фабрика);
		//заменяем атрибуты для соответствия формату
		ПространствоИмен = ПолучитьПространствоИменИСМПТ();
		ДокументXML = "<?xml version=""1.0"" encoding=""UTF-8""?>" + СтрЗаменить(ДокументXML, "xmlns=""" + ПространствоИмен + """", "xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""xsd_act.xsd""");
		ДокументXML = СтрЗаменить(ДокументXML, """ version", "Z"" version");
		КоллекцияInvoiceXML.Вставить(СсылкаДокумент, ДокументXML);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйАкт(Знач АктПП, Знач Фабрика)
	
	//пространство имен добавлено вручную в схему, чтобы работать в 1С
	ПространствоИмен = ПолучитьПространствоИменИСМПТ();
	ИмяУзла = "file";
	
	СвойствоЗаголовка = Фабрика.Пакеты.Получить(ПространствоИмен).КорневыеСвойства.Получить(ИмяУзла);
	ТипXDTOЗаголовка  = СвойствоЗаголовка.Тип;
	
	АктXDTO = Фабрика.Создать(ТипXDTOЗаголовка);
	ЗаполнитьАкт(АктПП, Фабрика, АктXDTO);
	
	Возврат АктXDTO;
	
КонецФункции

Процедура ЗаполнитьАкт(Знач АктПП, Знач Фабрика, АктXDTO)
	
	//////////////////////////////////////////////////////////////////////////////
	// Шапка.
	ИдентификаторФайла 		 = ?(АктПП.ЭтоКорректировка, "COR_ACT_%1", "EEU_ACT_%1");
	АктXDTO.fileId 			 = СтрШаблон(ИдентификаторФайла, АктПП.Ссылка.УникальныйИдентификатор());
	АктXDTO.version 		 = "1.0";
	АктXDTO.sendingDateTime  = Формат(УниверсальноеВремя(ТекущаяДатаСеанса()),"ДФ=ггг-ММ-ддThh:mm:ss");//YYYY-MMDDThh:mm:ssZ
		
	participants 			 = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(АктXDTO, "participants", Фабрика);
	participants.supplierId  = АктПП.ПоставщикИдентификационныйНомер;
	participants.consigneeId = АктПП.ПолучательИдентификационныйНомер;
	
	document = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(АктXDTO, "document", Фабрика);
	
	document.correctionFlag = ?(АктПП.ЭтоКорректировка, Истина, Ложь);
	Если АктПП.ЭтоКорректировка Тогда
		СсылкаНаСвязанныйАкт = РаботаСДокументамиИСМПТК.НайтиДокументПоИдентификаторуДляУстановкиСвязи(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК(), АктПП.ИдентификаторАПППервичный);
		Если Не СсылкаНаСвязанныйАкт = Неопределено Тогда
			ДанныеСвязанногоАкта =  ОбщегоНазначенияИСМПТК.ЗначенияРеквизитовОбъекта(СсылкаНаСвязанныйАкт, "НомерИСМПТ, ДатаВИСМПТ, Идентификатор");
		Иначе
			ТекстСообщения = НСтр("ru = 'При отправке Акта приема/передачи (корректировочный) произошла ошибка: не удалось получить информацию об исправляемом Акте приема/передачи.'");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
			ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ЗаполнитьАкт");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
			Возврат;
		КонецЕсли;
		document.correctionDocId = ДанныеСвязанногоАкта.Идентификатор;
		document.regNumber 	 	 = ДанныеСвязанногоАкта.НомерИСМПТ;
		document.regDate 	 	 = Формат(ДанныеСвязанногоАкта.ДатаВИСМПТ,"ДФ=dd.MM.yyyy");//dd.mm.yyyy
	КонецЕсли;

	Если АктПП.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСМПТК.Реализация") Тогда
		document.operationType = 1; // 1 - реализация, 2 - коммисия/агентская торговля
	ИначеЕсли АктПП.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСМПТК.КомиссияИАгентскаяТорговля") Тогда
		document.operationType = 2; // 1 - реализация, 2 - коммисия/агентская торговля
	КонецЕсли;
	
	mainInfo		= ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(АктXDTO.document, 		 "mainInfo", 		Фабрика);
	supplierInfo 	= ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(АктXDTO.document.mainInfo, "supplierInfo",	Фабрика);
	consigneeInfo 	= ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(АктXDTO.document.mainInfo, "consigneeInfo", 	Фабрика);
	originalDocInfo = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(АктXDTO.document.mainInfo, "originalDocInfo", Фабрика);
	
	Если Не ЗначениеЗаполнено(АктПП.ПоставщикНаименование) Тогда
		supplierInfo.Сбросить("supplierName");
	Иначе 
		supplierInfo.supplierName = АктПП.ПоставщикНаименование;
	КонецЕсли;
	supplierInfo.supplierIdentificationCode   = АктПП.ПоставщикИдентификационныйНомер;
	
	Если Не ЗначениеЗаполнено(АктПП.ПолучательНаименование) Тогда
		consigneeInfo.Сбросить("consigneeName");
	Иначе 
		consigneeInfo.consigneeName	= АктПП.ПолучательНаименование;
	КонецЕсли;
	consigneeInfo.consigneeIdentificationCode = АктПП.ПолучательИдентификационныйНомер;
	
	originalDocInfo.docNumber = АктПП.РегНомерНаБумажномНосителе;
	originalDocInfo.docDate   = Формат(АктПП.ДатаВыпискиНаБумажномНосителе, "ДФ=dd.MM.yyyy");
	
	Если Не ЗначениеЗаполнено(АктПП.РегНомерНаБумажномНосителе) И Не ЗначениеЗаполнено(АктПП.ДатаВыпискиНаБумажномНосителе) Тогда
		АктXDTO.document.mainInfo.Сбросить("originalDocInfo");
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////
	// Табличные части
	productList	  = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(АктXDTO.document, "productList",   Фабрика);
	productTotals = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(АктXDTO.document, "productTotals", Фабрика);
	
	Для Каждого МаркиСтрока Из АктПП.Марки Цикл
		
		product = ОбщегоНазначенияИСМПТК.НовыйЭлементСпискаXDTO(АктXDTO.document.productList.iCode, Фабрика);
		product.__content = МаркиСтрока.КодИдентификации;
		product.count 	  = МаркиСтрока.Количество;
		
	КонецЦикла;
	
	ТаблицаКодов 			= ПолучитьТаблицуКодовGTIN(АктПП.Марки, АктПП.Организация); 
	ПередаватьДанныеОЦенах 	= ИнтеграцияИСМПТККлиентСервер.ПередаватьЦеновыеПоказателиВДокументахИСМПТК();
	КонтролироватьИтоги 	= АктПП.ТоварнаяГруппа = Перечисления.ВидыПродукцииИСМПТК.Табачная;
	
	Для Каждого КодыСтрока Из ТаблицаКодов Цикл
		
		productTotal = ОбщегоНазначенияИСМПТК.НовыйЭлементСпискаXDTO(АктXDTO.document.productTotals.gtin, Фабрика);
		productTotal.__content = КодыСтрока.Ключ;
		productTotal.count 	   = КодыСтрока.Значение; 
		
		Если ПередаватьДанныеОЦенах Тогда
			
			СуммовыеПоказатели = АктПП.Итоги.Найти(КодыСтрока.Ключ);
			
			Если Не СуммовыеПоказатели = Неопределено
				И Не СуммовыеПоказатели.Количество = КодыСтрока.Значение
				И КонтролироватьИтоги Тогда
				
				ТекстСообщения = НСтр("ru = 'При отправке Акта приема/передачи произошла ошибка: не актуальная информация по количеству для GTIN: %GTIN% в табличной части итогов документа.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%GTIN%", КодыСтрока.Ключ);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
				ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ЗаполнитьАкт");
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
				Возврат;
				
			ИначеЕсли СуммовыеПоказатели = Неопределено И КонтролироватьИтоги Тогда 
				
				ТекстСообщения = НСтр("ru = 'При отправке Акта приема/передачи произошла ошибка: отсутствуют итоги для GTIN: %GTIN%  части итогов документа.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%GTIN%", КодыСтрока.Ключ);
				ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
				ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ЗаполнитьАкт");
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
				Возврат;
				
			ИначеЕсли Не СуммовыеПоказатели = Неопределено Тогда 
				
				productTotal.unitPrice	= СуммовыеПоказатели.Цена;
				productTotal.netAmount	= СуммовыеПоказатели.СуммаБезНДС;
				productTotal.VatRate	= ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПолучитьСтавкуНДСЧислом(СуммовыеПоказатели.СтавкаНДС);
				productTotal.VatAmount	= СуммовыеПоказатели.СуммаНДС;
				productTotal.TotalPrice	= СуммовыеПоказатели.Сумма;
				productTotal.tnved		= СуммовыеПоказатели.КодТНВЭД;

			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////  
///////////// Уведомление о вводе в оборот /////////////

Процедура СоздатьИсходящиеУведомленияОВводеВОборот(Знач МассивДокументов, Знач УстанавливатьПодпись, Знач ТипПодписи, КоллекцияInvoiceXML, КоллекцияSignedContentXML) Экспорт
	
	КоллекцияInvoiceXML = Новый Соответствие;
	КоллекцияSignedContentXML = Новый Соответствие;
	
	Фабрика = Фабрика_XML_API("СхемаУВВО_XML_API_ИСМПТК");
	
	Для Каждого СсылкаДокумент Из МассивДокументов Цикл
		
		ОбъектДокумент = СсылкаДокумент.ПолучитьОбъект();
		ДокументXDTO = НовоеУведомленияОВводеВОборот(ОбъектДокумент, Фабрика);
		ДокументXML  = ОбщегоНазначенияИСМПТК.КаноническаяСтрокаXMLИзОбъектаXDTO(ДокументXDTO, "file", Фабрика);
		//заменяем атрибуты для соответствия формату
		ПространствоИмен = ПолучитьПространствоИменИСМПТ();
		ДокументXML = "<?xml version=""1.0"" encoding=""UTF-8""?>" + СтрЗаменить(ДокументXML, "xmlns=""" + ПространствоИмен + """", "xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""xsd_notific_ReturnGoodsIntroduce.xsd""");
		ДокументXML = СтрЗаменить(ДокументXML, """ version", "Z"" version");
		КоллекцияInvoiceXML.Вставить(СсылкаДокумент, ДокументXML);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовоеУведомленияОВводеВОборот(Знач Уведомление, Знач Фабрика)
	
	//пространство имен добавлено вручную в схему, чтобы работать в 1С
	ПространствоИмен = ПолучитьПространствоИменИСМПТ();
	ИмяУзла = "file";
	
	СвойствоЗаголовка = Фабрика.Пакеты.Получить(ПространствоИмен).КорневыеСвойства.Получить(ИмяУзла);
	ТипXDTOЗаголовка  = СвойствоЗаголовка.Тип;
	
	УведомлениеXDTO = Фабрика.Создать(ТипXDTOЗаголовка);
	ЗаполнитьУведомлениеОВводеВОборот(Уведомление, Фабрика, УведомлениеXDTO);
	
	Возврат УведомлениеXDTO;
	
КонецФункции

Процедура ЗаполнитьУведомлениеОВводеВОборот(Знач Уведомление, Знач Фабрика, УведомлениеXDTO)
	
	//////////////////////////////////////////////////////////////////////////////
	// Шапка.
	УведомлениеXDTO.fileId = СтрШаблон("KZ_EAES_%1", Уведомление.Ссылка.УникальныйИдентификатор());
	УведомлениеXDTO.sendingDateTime = Формат(УниверсальноеВремя(ТекущаяДатаСеанса()),"ДФ=ггг-ММ-ддThh:mm:ss");//YYYY-MMDDThh:mm:ssZ
	УведомлениеXDTO.version = "1.0";
	
	document = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO, "document", Фабрика);
	mainInfo = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document, "mainInfo", Фабрика);
	mainInfo.reason = КодПричиныПовторногоВвода(Уведомление.ПричинаВводаВОборот);
	participantInfo = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "participantInfo", Фабрика);
	originalDocInfo = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "originalDocInfo", Фабрика);
	
	//при заполнении уведомления поставщика и получателя меняем местами, так как представление в базе отличается от представления на сервере
	//supplierInfo.supplierName = Уведомление.ПолучательНаименование;
	//supplierInfo.supplierIdentificationCode = Уведомление.ПолучательИдентификационныйНомер;
	participantInfo.participantName = Уведомление.ПоставщикНаименование;
	participantInfo.participantIdentificationCode = Уведомление.ПоставщикИдентификационныйНомер;
	originalDocInfo.docName   = Уведомление.ДокументОснованиеНаименование;
	originalDocInfo.docNumber = Уведомление.ДокументОснованиеНомер;
	originalDocInfo.docDate   = Формат(Уведомление.ДокументОснованиеДата,"ДФ=dd.MM.yyyy");
	
	//////////////////////////////////////////////////////////////////////////////
	// Табличные части
	productList = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document, "productList", Фабрика);
	
	Для каждого МаркиСтрока Из Уведомление.Марки Цикл
		
		product = ОбщегоНазначенияИСМПТК.НовыйЭлементСпискаXDTO(УведомлениеXDTO.document.productList.iCode, Фабрика);
		product.__content = МаркиСтрока.КодИдентификации;
		product.count = МаркиСтрока.Количество;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////  
///////////// Уведомление о выводе из оборота /////////////

Процедура СоздатьИсходящиеУведомленияОВыводеИзОборота(Знач МассивДокументов, Знач УстанавливатьПодпись, Знач ТипПодписи, КоллекцияInvoiceXML, КоллекцияSignedContentXML) Экспорт
	
	КоллекцияInvoiceXML = Новый Соответствие;
	КоллекцияSignedContentXML = Новый Соответствие;
	
	Фабрика = Фабрика_XML_API("СхемаУВИО_XML_API_ИСМПТК");
	
	Для Каждого СсылкаДокумент Из МассивДокументов Цикл
		
		ОбъектДокумент = СсылкаДокумент.ПолучитьОбъект();
		ДокументXDTO = НовоеУведомленияОВыводеИзОборота(ОбъектДокумент, Фабрика);
		ДокументXML = ОбщегоНазначенияИСМПТК.КаноническаяСтрокаXMLИзОбъектаXDTO(ДокументXDTO, "file", Фабрика);
		//заменяем атрибуты для соответствия формату
		ПространствоИмен = ПолучитьПространствоИменИСМПТ();
		ДокументXML = "<?xml version=""1.0"" encoding=""UTF-8""?>" + СтрЗаменить(ДокументXML, "xmlns=""" + ПространствоИмен + """", "xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""xsd_notific_WithdrawalWritingOffGoods.xsd""");
		ДокументXML = СтрЗаменить(ДокументXML, """ version", "Z"" version");
		КоллекцияInvoiceXML.Вставить(СсылкаДокумент, ДокументXML);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовоеУведомленияОВыводеИзОборота(Знач Уведомление, Знач Фабрика)
	
	//пространство имен добавлено вручную в схему, чтобы работать в 1С
	ПространствоИмен = ПолучитьПространствоИменИСМПТ();
	ИмяУзла = "file";
	
	СвойствоЗаголовка = Фабрика.Пакеты.Получить(ПространствоИмен).КорневыеСвойства.Получить(ИмяУзла);
	ТипXDTOЗаголовка  = СвойствоЗаголовка.Тип;
	
	УведомлениеXDTO = Фабрика.Создать(ТипXDTOЗаголовка);
	ЗаполнитьУведомленияОВыводеИзОборота(Уведомление, Фабрика, УведомлениеXDTO);
	
	Возврат УведомлениеXDTO;
	
КонецФункции

Процедура ЗаполнитьУведомленияОВыводеИзОборота(Знач Уведомление, Знач Фабрика, УведомлениеXDTO)
	
	//////////////////////////////////////////////////////////////////////////////
	// Шапка.
	УведомлениеXDTO.fileId = СтрШаблон("KZ_EAES_%1", Уведомление.Ссылка.УникальныйИдентификатор());
	УведомлениеXDTO.sendingDateTime = Формат(УниверсальноеВремя(ТекущаяДатаСеанса()),"ДФ=ггг-ММ-ддThh:mm:ss");//YYYY-MMDDThh:mm:ssZ
	УведомлениеXDTO.version = "1.0";
	
	document = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO, "document", Фабрика);
	mainInfo = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document, "mainInfo", Фабрика);
	mainInfo.reason = КодПричиныВыводаИзОборота(Уведомление.ПричинаВыводаИзОборота);
	participantInfo = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "participantInfo", Фабрика);
	originalDocInfo = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "originalDocInfo", Фабрика);
	
	participantInfo.participantName = Уведомление.ПоставщикНаименование;
	participantInfo.participantIdentificationCode = Уведомление.ПоставщикИдентификационныйНомер;
	originalDocInfo.docName   = Уведомление.ДокументОснованиеНаименование;
	originalDocInfo.docNumber = Уведомление.ДокументОснованиеНомер;
	originalDocInfo.docDate   = Формат(Уведомление.ДокументОснованиеДата,"ДФ=dd.MM.yyyy");
	
	//////////////////////////////////////////////////////////////////////////////
	// Табличные части
	productList = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document, "productList", Фабрика);
	
	Для каждого МаркиСтрока Из Уведомление.Марки Цикл
		
		product = ОбщегоНазначенияИСМПТК.НовыйЭлементСпискаXDTO(УведомлениеXDTO.document.productList.iCode, Фабрика);
		product.__content = МаркиСтрока.КодИдентификации;
		product.count = МаркиСтрока.Количество;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////  
///////////// Уведомление о ввозе ЕАЭС /////////////

Процедура СоздатьИсходящиеУведомленияОВвозе(Знач МассивДокументов, Знач УстанавливатьПодпись, Знач ТипПодписи, КоллекцияInvoiceXML, КоллекцияSignedContentXML) Экспорт
	
	КоллекцияInvoiceXML = Новый Соответствие;
	КоллекцияSignedContentXML = Новый Соответствие;
	
	Для Каждого СсылкаДокумент Из МассивДокументов Цикл
		
		ОбъектДокумент = СсылкаДокумент.ПолучитьОбъект();
		Фабрика = Фабрика_XML_API("СхемаВвозИзЕАЭС_XML_API_ИСМПТК");
		ДокументXDTO = НовоеУведомлениеОВвозе(ОбъектДокумент, Фабрика);
		ДокументXML = ОбщегоНазначенияИСМПТК.КаноническаяСтрокаXMLИзОбъектаXDTO(ДокументXDTO, "file", Фабрика);
		//заменяем атрибуты для соответствия формату
		ПространствоИмен = ПолучитьПространствоИменИСМПТ();
		ДокументXML = "<?xml version=""1.0"" encoding=""UTF-8""?>" + СтрЗаменить(ДокументXML, "xmlns=""" + ПространствоИмен + """", "xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""schemas_xsd_%D0%95%D0%90%D0%AD%D0%A1_%D0%9A%D0%97.xsd""");
		ДокументXML = СтрЗаменить(ДокументXML, """ version", "Z"" version");
		КоллекцияInvoiceXML.Вставить(СсылкаДокумент, ДокументXML);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовоеУведомлениеОВвозе(Знач Уведомление, Знач Фабрика)
	
	//пространство имен добавлено вручную в схему, чтобы работать в 1С
	ПространствоИмен = ПолучитьПространствоИменИСМПТ();
	ИмяУзла = "file";
	
	СвойствоЗаголовка = Фабрика.Пакеты.Получить(ПространствоИмен).КорневыеСвойства.Получить(ИмяУзла);
	ТипXDTOЗаголовка  = СвойствоЗаголовка.Тип;
	
	УведомлениеXDTO = Фабрика.Создать(ТипXDTOЗаголовка);
	ЗаполнитьУведомлениеОВвозе(Уведомление, Фабрика, УведомлениеXDTO);
	
	Возврат УведомлениеXDTO;
	
КонецФункции

Процедура ЗаполнитьУведомлениеОВвозе(Знач Уведомление, Знач Фабрика, УведомлениеXDTO)
	
	//////////////////////////////////////////////////////////////////////////////
	// Шапка.   
	Если Уведомление.ЭтоКорректировка Тогда
		ИмяДокументаДляСхемы = "IM_TRANSIT_COR_%1";
	Иначе
		ИмяДокументаДляСхемы = "IMPORT_TRANSIT_%1";
	КонецЕсли;
	УведомлениеXDTO.fileId = СтрШаблон(ИмяДокументаДляСхемы, Уведомление.Ссылка.УникальныйИдентификатор());
	УведомлениеXDTO.sendingDateTime = Формат(УниверсальноеВремя(ТекущаяДатаСеанса()),"ДФ=ггг-ММ-ддThh:mm:ss");//YYYY-MMDDThh:mm:ssZ
	УведомлениеXDTO.version = "5.01";//5.01 в шаблоне
	
	participants			 = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO, "participants", Фабрика);
	participants.supplierId  = Уведомление.ПоставщикИдентификационныйНомер;
	participants.consigneeId = Уведомление.ПолучательИдентификационныйНомер;
	
	document = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO, "document", Фабрика);
	document.correctionFlag 	  = ?(Уведомление.ЭтоКорректировка, Истина, Ложь);
	Если Уведомление.ЭтоКорректировка Тогда
		ДанныеСвязанногоАкта = Неопределено;
		Если ЗначениеЗаполнено(Уведомление.ИдентификаторВвозПервичный) Тогда
			ДанныеСвязанногоАкта = РаботаСДокументамиИСМПТК.НайтиДокументПоИдентификаторуДляУстановкиСвязи(
								   ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСМПТК(), Уведомление.ИдентификаторВвозПервичный);
		КонецЕсли;
		Если Не ДанныеСвязанногоАкта = Неопределено Тогда
			document.primaryDocId 	  = ДанныеСвязанногоАкта.Идентификатор;
			document.primaryDocNumber = ДанныеСвязанногоАкта.НомерИСМПТ;
			document.primaryDocDate   = Формат(ДанныеСвязанногоАкта.ДатаВИСМПТ,"ДФ=dd.MM.yyyy");//dd.mm.yyyy
 		КонецЕсли;
	КонецЕсли;
	
	mainInfo = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document, "mainInfo", Фабрика);
	
	supplierInfo = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "supplierInfo", Фабрика);
	supplierInfo.supplierName = Уведомление.ПоставщикНаименование;
	supplierInfo.supplierIdentificationCode = Уведомление.ПоставщикИдентификационныйНомер;
	supplierInfo.supplierCountryCode = ОбщегоНазначенияИСМПТК.ЗначенияРеквизитовОбъекта(Уведомление.СтранаОтправления, "КодАльфа2").КодАльфа2;
	
	consigneeInfo  = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "consigneeInfo", Фабрика);
	Если Не ЗначениеЗаполнено(Уведомление.ПолучательНаименование) Тогда 
		consigneeInfo.Сбросить("consigneeName");
	Иначе 
		consigneeInfo.consigneeName = Уведомление.ПолучательНаименование;
	КонецЕсли;
	consigneeInfo.consigneeIdentificationCode = Уведомление.ПолучательИдентификационныйНомер;
	
	Если ЗначениеЗаполнено(Уведомление.РегНомерНаБумажномНосителе) Тогда
		originalDocInfo = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "originalDocInfo", Фабрика);
		originalDocInfo.docNumber = Уведомление.РегНомерНаБумажномНосителе;
		originalDocInfo.docDate	  = Формат(Уведомление.ДатаВыпискиНаБумажномНосителе, "ДФ=dd.MM.yyyy");
	Иначе
		УведомлениеXDTO.document.mainInfo.Сбросить("originalDocInfo");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Уведомление.НомерКвитанцииАкциза) Тогда
		exciseDocInfo = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "exciseDocInfo", Фабрика);
		exciseDocInfo.exciseDocNumber = Уведомление.НомерКвитанцииАкциза;
		exciseDocInfo.exciseDocDate	  = Формат(Уведомление.ДатаУплатыАкциза, "ДФ=dd.MM.yyyy");
		exciseDocInfo.exciseAmount 	  = Формат(Уведомление.СуммаАкциза, "ЧДЦ=2; ЧРД=.; ЧН=Ноль; ЧГ=0");
	Иначе
		УведомлениеXDTO.document.mainInfo.Сбросить("exciseDocInfo");
	КонецЕсли;
	
	// Табличные части
	Если Не Уведомление.ДокументыСоответствия.Количество() = 0 Тогда
		complianceInfo = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "complianceInfo", Фабрика);
		Для каждого СтрокаСоответствия Из Уведомление.ДокументыСоответствия Цикл
			complianceDocumentInfo = ОбщегоНазначенияИСМПТК.НовыйЭлементСпискаXDTO(УведомлениеXDTO.document.mainInfo.complianceInfo.complianceDocumentInfo, Фабрика);
			complianceDocumentInfo.complianceDocDate   = Формат(СтрокаСоответствия.ДатаДокумента, "ДФ=dd.MM.yyyy");
			complianceDocumentInfo.complianceDocNumber = СтрокаСоответствия.НомерДокумента;
			complianceDocumentInfo.complianceDocType   = Строка(СтрокаСоответствия.ТипДокумента);
		КонецЦикла;
	КонецЕсли;
	
	productList = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document, "productList", Фабрика);
	
	Для Каждого МаркиСтрока Из Уведомление.Марки Цикл
		productList.iCode.Добавить(МаркиСтрока.КодИдентификации);
	КонецЦикла;
	
	ТаблицаКодов  = ПолучитьТаблицуКодовGTIN(Уведомление.Марки, Уведомление.Организация);
	productTotals = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document, "productTotals", Фабрика);
	
	Для Каждого КодыСтрока Из ТаблицаКодов Цикл
		productTotal = ОбщегоНазначенияИСМПТК.НовыйЭлементСпискаXDTO(УведомлениеXDTO.document.productTotals.gtin, Фабрика);
		productTotal.__content = КодыСтрока.Ключ;
		productTotal.count     = КодыСтрока.Значение;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////  
///////////// Уведомление о ввозе Импорт /////////////

Процедура СоздатьИсходящиеУведомленияОВвозеИзТретьихСтран(Знач МассивДокументов, Знач УстанавливатьПодпись, Знач ТипПодписи, КоллекцияInvoiceXML, КоллекцияSignedContentXML, ДанныеГрупповыхКодов) Экспорт
	
	КоллекцияInvoiceXML = Новый Соответствие;
	КоллекцияSignedContentXML = Новый Соответствие;
	
	Для Каждого СсылкаДокумент Из МассивДокументов Цикл
		
		ОбъектДокумент = СсылкаДокумент.ПолучитьОбъект();
		Фабрика = Фабрика_XML_API("СхемаВвозИзТретьихСтран_XML_API_ИСМПТК");
		ДокументXDTO = НовоеУведомлениеОВвозеИзТретьихСтран(ОбъектДокумент, Фабрика, ДанныеГрупповыхКодов);
		ДокументXML  = ОбщегоНазначенияИСМПТК.КаноническаяСтрокаXMLИзОбъектаXDTO(ДокументXDTO, "file", Фабрика);
		//заменяем атрибуты для соответствия формату
		ПространствоИмен = ПолучитьПространствоИменИСМПТ();
		ДокументXML = "<?xml version=""1.0"" encoding=""UTF-8""?>" + СтрЗаменить(ДокументXML, "xmlns=""" + ПространствоИмен + """", "xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""schemas_xsd_%D0%95%D0%90%D0%AD%D0%A1_%D0%9A%D0%97.xsd""");
		ДокументXML = СтрЗаменить(ДокументXML, """ version", "Z"" version");
		
		//замена decisionDateTime
		ДатаДоПреобразования = Сред(ДокументXML,СтрНайти(ДокументXML, "decisionDateTime"), 37);
		ДокументXML = СтрЗаменить(ДокументXML, ДатаДоПреобразования, ДатаДоПреобразования + "Z");
		
		КоллекцияInvoiceXML.Вставить(СсылкаДокумент, ДокументXML);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовоеУведомлениеОВвозеИзТретьихСтран(Знач Уведомление, Знач Фабрика, ДанныеГрупповыхКодов = Неопределено)
	
	//пространство имен добавлено вручную в схему, чтобы работать в 1С
	ПространствоИмен = ПолучитьПространствоИменИСМПТ();
	ИмяУзла = "file";
	
	СвойствоЗаголовка = Фабрика.Пакеты.Получить(ПространствоИмен).КорневыеСвойства.Получить(ИмяУзла);
	ТипXDTOЗаголовка  = СвойствоЗаголовка.Тип;
	
	УведомлениеXDTO = Фабрика.Создать(ТипXDTOЗаголовка);
	ЗаполнитьУведомлениеОВвозеИзТретьихСтран(Уведомление, Фабрика, УведомлениеXDTO, ДанныеГрупповыхКодов);
	
	Возврат УведомлениеXDTO;
	
КонецФункции

Процедура ЗаполнитьУведомлениеОВвозеИзТретьихСтран(Знач Уведомление, Знач Фабрика, УведомлениеXDTO, ДанныеГрупповыхКодов)
	
	//////////////////////////////////////////////////////////////////////////////
	// Шапка.
	УведомлениеXDTO.fileId = СтрШаблон("IMPORT_%1", Уведомление.Ссылка.УникальныйИдентификатор());
	УведомлениеXDTO.sendingDateTime = Формат(УниверсальноеВремя(ТекущаяДатаСеанса()),"ДФ=ггг-ММ-ддThh:mm:ss");//YYYY-MMDDThh:mm:ssZ
	УведомлениеXDTO.version = "1.0";
	
	document = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO, "document", Фабрика);
	
	mainInfo = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document, "mainInfo", Фабрика);
	
	importerInfo = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "importerInfo", Фабрика);
	importerInfo.importerName = Уведомление.ПолучательНаименование;
	importerInfo.importerCode = Уведомление.ПолучательИдентификационныйНомер;
	
	mainInfo.exportCountry = ОбщегоНазначенияИСМПТК.ЗначенияРеквизитовОбъекта(Уведомление.СтранаОтправления, "КодАльфа2").КодАльфа2;
	
	customDocument = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "customDocument", Фабрика);
	Если Уведомление.ТипДокументаТаможенногоОформления = Перечисления.ТипДокументаТаможенногоОформленияИСМПТК.ДекларацияНаТовары Тогда
		customDocument.docType = "DECLARATION";
	ИначеЕсли Уведомление.ТипДокументаТаможенногоОформления = Перечисления.ТипДокументаТаможенногоОформленияИСМПТК.ЗаявлениеОВыпускеТоваров Тогда
		customDocument.docType = "STATEMENT";
	КонецЕсли;
	customDocument.regNumber = Уведомление.НомерДокументаТаможенногоОформления;
	customDocument.regDate 	 = Уведомление.ДатаДокументаТаможенногоОформления;
	
	customDecisionInfo = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "customDecisionInfo", Фабрика);
	
	ДатаИВремяРешения = Уведомление.ДатаВремяПринятияРешения;
	customDecisionInfo.decisionCode 	= Уведомление.КодРешенияТаможенногоОргана;
	customDecisionInfo.decisionDateTime = Формат(УниверсальноеВремя(ДатаИВремяРешения), "ДФ=ггг-ММ-ддTHH:mm:ss");//2021-07-02T12:00:00Z
	customDecisionInfo.customCode 		= Уведомление.КодТаможенногоОргана;
	
	originalDocInfo = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "originalDocInfo", Фабрика);
	originalDocInfo.docNumber = Уведомление.РегНомерНаБумажномНосителе;
	originalDocInfo.docDate   = Уведомление.ДатаВыпискиНаБумажномНосителе;
	Если Не ЗначениеЗаполнено(Уведомление.РегНомерНаБумажномНосителе) И Не ЗначениеЗаполнено(Уведомление.ДатаВыпискиНаБумажномНосителе) Тогда
		УведомлениеXDTO.document.mainInfo.Сбросить("originalDocInfo");
	КонецЕсли;

	//должен быть один элемент, возможно необходимо поправить в документе
	certificationInfo = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "certificationInfo", Фабрика);
	Для каждого СтрокаСоответствия Из Уведомление.ДокументыСоответствия Цикл
		certificationInfo.docDate 	= СтрокаСоответствия.ДатаДокумента;
		certificationInfo.docNumber = СтрокаСоответствия.НомерДокумента;
		certificationInfo.docType 	= Строка(СтрокаСоответствия.ТипДокумента);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	УведомлениеОВвозеИзТретьихСтранИСМПТКМарки.КодИдентификации КАК КодИдентификации,
	|	УведомлениеОВвозеИзТретьихСтранИСМПТКТовары.ТНВЭД КАК ТНВЭД,
	|	УведомлениеОВвозеИзТретьихСтранИСМПТКТовары.GTIN КАК GTIN,
	|	ЕСТЬNULL(УведомлениеОВвозеИзТретьихСтранИСМПТКТовары.СтранаПроизводства.КодАльфа2, """") КАК СтранаПроизводстваКодАльфа2,
	|	УведомлениеОВвозеИзТретьихСтранИСМПТКТовары.НомерПозицииВДекларацииИлиЗаявлении КАК НомерПозицииВДекларацииИлиЗаявлении
	|ИЗ
	|	Документ.УведомлениеОВвозеИзТретьихСтранИСМПТК.Товары КАК УведомлениеОВвозеИзТретьихСтранИСМПТКТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УведомлениеОВвозеИзТретьихСтранИСМПТК.Марки КАК УведомлениеОВвозеИзТретьихСтранИСМПТКМарки
	|			ПО УведомлениеОВвозеИзТретьихСтранИСМПТКТовары.GTIN = УведомлениеОВвозеИзТретьихСтранИСМПТКМарки.GTIN
	|	ГДЕ
	|		УведомлениеОВвозеИзТретьихСтранИСМПТКМарки.Ссылка = &Ссылка
	|		И УведомлениеОВвозеИзТретьихСтранИСМПТКТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Уведомление.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		productItems = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document, "productItems",   Фабрика);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		item = ОбщегоНазначенияИСМПТК.НовыйЭлементСпискаXDTO(УведомлениеXDTO.document.productItems.item, Фабрика);
		item.iCodeFromDeclaration = Выборка.КодИдентификации;
		product = ОбщегоНазначенияИСМПТК.НовыйЭлементСпискаXDTO(item.product, Фабрика);
		product.tnved = Выборка.ТНВЭД;
		product.gtin = Выборка.GTIN;
		//коды стран прописаны в схеме, поэтому пустую взять тоже нельзя - выдает ошибку
		//поэтому при проверке на нулл можно взять <xs:enumeration value="Неизвестна"/> 
		//для проверки перечисления кодов стран можно использовать список фасетов (ниже)
		//product.Тип().Свойства.Получить("originCountry").Тип.Фасеты.Перечисления
		product.originCountry = Выборка.СтранаПроизводстваКодАльфа2;
		//<xs:restriction base="xs:integer">
		//	<xs:minInclusive value="1"/>
		//</xs:restriction> 
		//Номер в декларации обязателен к заполнению
		product.itemNumber = Выборка.НомерПозицииВДекларацииИлиЗаявлении;
		
		Если ДанныеГрупповыхКодов <> Неопределено Тогда
			Если ДанныеГрупповыхКодов.ДанныеОбАгрегации = Неопределено Тогда //нет упаковок вообще
				iCode = ОбщегоНазначенияИСМПТК.НовыйЭлементСпискаXDTO(product.iCode, Фабрика);
				iCode.__content = Выборка.КодИдентификации;
			Иначе
				ВложенныеКоды = ДанныеГрупповыхКодов.ДанныеОбАгрегации[Выборка.КодИдентификации];
				Если ВложенныеКоды <> Неопределено Тогда  //упаковка и в ней что-то есть
					Для каждого Код Из ВложенныеКоды Цикл
						iCode = ОбщегоНазначенияИСМПТК.НовыйЭлементСпискаXDTO(product.iCode, Фабрика);
						iCode.__content = Код;
					КонецЦикла;
				Иначе //упаковка, но либо пустая (не сделана агрегация), либо ограничение по владельцу и инф-ю получить не можем
					//для кода нет информации о вложенных
					iCode = ОбщегоНазначенияИСМПТК.НовыйЭлементСпискаXDTO(product.iCode, Фабрика);
					iCode.__content = Выборка.КодИдентификации;
				КонецЕсли;
			КонецЕсли;
		Иначе
			iCode = ОбщегоНазначенияИСМПТК.НовыйЭлементСпискаXDTO(product.iCode, Фабрика);
			iCode.__content = Выборка.КодИдентификации;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////  
///////////// Уведомление об экспорте /////////////

Процедура СоздатьИсходящиеУведомленияОбЭкспортеЕАЭС(Знач МассивДокументов, Знач УстанавливатьПодпись, Знач ТипПодписи, КоллекцияInvoiceXML, КоллекцияSignedContentXML) Экспорт
	
	КоллекцияInvoiceXML = Новый Соответствие;
	КоллекцияSignedContentXML = Новый Соответствие;
	Для Каждого СсылкаДокумент Из МассивДокументов Цикл
		
		ОбъектДокумент = СсылкаДокумент.ПолучитьОбъект();
		ДокументXML = НовоеУведомлениеОбЭкспортеЕАЭС(ОбъектДокумент);
		КоллекцияInvoiceXML.Вставить(СсылкаДокумент, ДокументXML);
		
	КонецЦикла;
	
КонецПроцедуры 

Функция НовоеУведомлениеОбЭкспортеЕАЭС(Знач Уведомление)
	
	УведомлениеJSON = "";
	ЗаполнитьУведомлениеОбЭкспортеЕАЭС(Уведомление, УведомлениеJSON);
	Возврат УведомлениеJSON;
	
КонецФункции

Процедура ЗаполнитьУведомлениеОбЭкспортеЕАЭС(Знач Уведомление, УведомлениеJSON)
	
	//////////////////////////////////////////////////////////////////////////////
	// Шапка.
	
	ДанныеДляОтправки = Новый Структура;
	//шапка
	Если Уведомление.ТоварнаяГруппа = Перечисления.ВидыПродукцииИСМПТК.Обувная Тогда
		ДанныеДляОтправки.Вставить("productGroup", "shoes");
	КонецЕсли;
	
	ДанныеДляОтправки.Вставить("exporterName", Уведомление.ПоставщикНаименование);
	ДанныеДляОтправки.Вставить("exporterCode", Уведомление.ПоставщикИдентификационныйНомер);
	КодСтраны = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьКодСтраныДляУведомленияОввозе(Уведомление.СтранаПолучатель); 
	Если КодСтраны <> "RU" Тогда
		ТекстСообщения = НСтр("ru = 'В. Страна отправления указана некорректно. Доступное значение: Россия).'"); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	ДанныеДляОтправки.Вставить("receiverCountryCode", КодСтраны);
	ДанныеДляОтправки.Вставить("receiverCode", 	 Уведомление.ПолучательИдентификационныйНомер);
	ДанныеДляОтправки.Вставить("receiverName", 	 Уведомление.ПолучательНаименование);
	ДанныеДляОтправки.Вставить("documentNumber", Уведомление.НомерДокументаТрансграна);//? возможно стоит брать номер самой системы
	ДанныеДляОтправки.Вставить("documentDate", 	 Формат(Уведомление.ДатаДокументаТрансграна,"ДФ=yyyy-MM-dd"));
	ДанныеДляОтправки.Вставить("transferDate", 	 Формат(Уведомление.ДатаВремяОтгрузки,"ДФ=yyyy-MM-dd"));
	
	//данные о товарах
	МассивТоваров = Новый Массив;
	
	Для каждого СтрокаМарки Из Уведомление.Марки Цикл
		
		СведенияОТоваре = Новый Структура;
		СведенияОТоваре.Вставить("cis", СтрокаМарки.КодИдентификации);
		СтрокиТоваров = Уведомление.Товары.НайтиСтроки(Новый Структура("GTIN", СтрокаМарки.GTIN)); 
		Если Не СтрокиТоваров.Количество() = 0 Тогда
			СтрокаТовары = СтрокиТоваров[0];
			Если ЗначениеЗаполнено(СтрокаТовары.ЦенаСНДС) Тогда
				СведенияОТоваре.Вставить("price", СтрокаТовары.ЦенаСНДС);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТовары.НДС) Тогда
				СведенияОТоваре.Вставить("vat", СтрокаТовары.НДС);
			КонецЕсли;
		КонецЕсли;
		
		Если Ложь Тогда
			
			МассивДокументов = Новый Массив;
			Для каждого СтрокаДокументы Из Уведомление.ДокументыСоответствия Цикл
				
				ПодтверждающийДокумент = Новый Структура;
				Если ЗначениеЗаполнено(СтрокаДокументы.ТипДокумента) Тогда
					Если СтрокаДокументы.ТипДокумента = Перечисления.ВидыДокументовОбязательнойСертификацииИСМПТК.ДекларацияСоответствия Тогда
						ПодтверждающийДокумент.Вставить("docKind", "declaration");
					ИначеЕсли СтрокаДокументы.ТипДокумента = Перечисления.ВидыДокументовОбязательнойСертификацииИСМПТК.СертификатСоответствия Тогда
						ПодтверждающийДокумент.Вставить("docKind", "certificate");
					КонецЕсли;
				КонецЕсли;
				
				ПодтверждающийДокумент.Вставить("docNumber", Строка(СтрокаДокументы.НомерДокумента));
				ПодтверждающийДокумент.Вставить("docDate",   Формат(СтрокаДокументы.ДатаДокумента,"ДФ=yyyy-MM-dd"));
				МассивДокументов.Добавить(ПодтверждающийДокумент);
				
			КонецЦикла;
			СведенияОТоваре.Вставить("documentList", МассивДокументов);
		КонецЕсли;
		МассивТоваров.Добавить(СведенияОТоваре);
	КонецЦикла;
	
	ДанныеДляОтправки.Вставить("productList", МассивТоваров);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ДанныеДляОтправки);
	УведомлениеJSON = ЗаписьJSON.Закрыть();
	
КонецПроцедуры

////////////////////////////////////////////////  
///////////// Уведомление о приемке /////////////

Процедура СоздатьИсходящиеУведомлениеОПриемкеЕАЭС(Знач МассивДокументов, Знач УстанавливатьПодпись, Знач ТипПодписи, КоллекцияInvoiceXML, КоллекцияSignedContentXML) Экспорт
	
	КоллекцияInvoiceXML = Новый Соответствие;
	КоллекцияSignedContentXML = Новый Соответствие;
	Для Каждого СсылкаДокумент Из МассивДокументов Цикл
		
		ОбъектДокумент = СсылкаДокумент.ПолучитьОбъект();
		ДокументXML = НовоеУведомлениеУведомленияОПриемкеТоваровЕАЭС(ОбъектДокумент);
		КоллекцияInvoiceXML.Вставить(СсылкаДокумент, ДокументXML);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовоеУведомлениеУведомленияОПриемкеТоваровЕАЭС(Знач Уведомление)
	
	УведомлениеJSON = "";
	ЗаполнитьУведомленияОПриемкеТоваровЕАЭС(Уведомление, УведомлениеJSON);
	Возврат УведомлениеJSON;
	
КонецФункции

Процедура ЗаполнитьУведомленияОПриемкеТоваровЕАЭС(Знач Уведомление, УведомлениеJSON)
	
	ДанныеДляОтправки = Новый Структура;
	//шапка
	
	ДанныеДляОтправки.Вставить("shipment_id", 	Уведомление.ИдентификаторДокументаОтгрузки);
	ДанныеДляОтправки.Вставить("document_num", 	Уведомление.НомерПервичногоДокумента);
	ДанныеДляОтправки.Вставить("document_date",	Уведомление.ДатаПервичногоДокумента);
	ДанныеДляОтправки.Вставить("receiver_inn", 	Уведомление.ПолучательИдентификационныйНомер);
	ДанныеДляОтправки.Вставить("receiver", 		Уведомление.ПолучательНаименование);
	ДанныеДляОтправки.Вставить("exporter_taxpayer_id", Уведомление.ПоставщикИдентификационныйНомер);
	ДанныеДляОтправки.Вставить("exporter_name",	Уведомление.ПоставщикНаименование);
	
	КодСтраны = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьКодСтраны(Уведомление.СтранаОтправления);
	ДанныеДляОтправки.Вставить("sender_country_code", КодСтраны);
	
	ДанныеДляОтправки.Вставить("request_type", 	  "ACCEPTANCE");
	ДанныеДляОтправки.Вставить("acceptance_date", Уведомление.ДатаПриемки);
	ДанныеДляОтправки.Вставить("reject_all", 	  Уведомление.ОтклонитьВсеТовары);
	
	//данные о товарах
	МассивКИ = Новый Массив;
	
	Для каждого СтрокаМарки Из Уведомление.Марки Цикл
		
		СведенияОТоваре = Новый Структура;
		СведенияОТоваре.Вставить("cis", 	 СтрокаМарки.КодИдентификации);
		СведенияОТоваре.Вставить("accepted", СтрокаМарки.СтатусПриемки);
		
		МассивКИ.Добавить(СведенияОТоваре);
		
	КонецЦикла;
	
	ДанныеДляОтправки.Вставить("products", МассивКИ);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ДанныеДляОтправки);
	УведомлениеJSON = ЗаписьJSON.Закрыть();
	
КонецПроцедуры

////////////////////////////////////////////////  
///////////// Уведомление о расхождениях /////////////

// Создает коллекцию XML строк актов и коллекцию XML строк SignedContent на основе документов Акт приема-передачи.
//
// Параметры:
Процедура СоздатьИсходящиеУведомления(Знач МассивДокументов, Знач УстанавливатьПодпись, Знач ТипПодписи, КоллекцияInvoiceXML, КоллекцияSignedContentXML) Экспорт
	
	КоллекцияInvoiceXML = Новый Соответствие;
	КоллекцияSignedContentXML = Новый Соответствие;
	
	Фабрика = Фабрика_XML_API("СхемаУОР_XML_API_ИСМПТК");
	
	Для Каждого СсылкаДокумент Из МассивДокументов Цикл
		
		ОбъектДокумент = СсылкаДокумент.ПолучитьОбъект();
		ДокументXDTO = НовоеУведомление(ОбъектДокумент, Фабрика);
		ДокументXML  = ОбщегоНазначенияИСМПТК.КаноническаяСтрокаXMLИзОбъектаXDTO(ДокументXDTO, "file", Фабрика);
		//заменяем атрибуты для соответствия формату
		ПространствоИмен = ПолучитьПространствоИменИСМПТ();
		ДокументXML = "<?xml version=""1.0"" encoding=""UTF-8""?>" + СтрЗаменить(ДокументXML, "xmlns=""" + ПространствоИмен + """", "xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""xsd_notific_divergences.xsd""");
		ДокументXML = СтрЗаменить(ДокументXML, """ version", "Z"" version");
		КоллекцияInvoiceXML.Вставить(СсылкаДокумент, ДокументXML);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовоеУведомление(Знач Уведомление, Знач Фабрика)
	
	//пространство имен добавлено вручную в схему, чтобы работать в 1С
	ПространствоИмен = ПолучитьПространствоИменИСМПТ();
	ИмяУзла = "file";
	
	СвойствоЗаголовка = Фабрика.Пакеты.Получить(ПространствоИмен).КорневыеСвойства.Получить(ИмяУзла);
	ТипXDTOЗаголовка  = СвойствоЗаголовка.Тип;
	
	УведомлениеXDTO = Фабрика.Создать(ТипXDTOЗаголовка);
	ЗаполнитьУведомление(Уведомление, Фабрика, УведомлениеXDTO);
	
	Возврат УведомлениеXDTO;
	
КонецФункции

Процедура ЗаполнитьУведомление(Знач Уведомление, Знач Фабрика, УведомлениеXDTO)
	
	СсылкаНаСвязанныйАкт = РаботаСДокументамиИСМПТК.НайтиДокументПоИдентификаторуДляУстановкиСвязи(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК(), Уведомление.ИдентификаторАПППервичный);
	Если Не СсылкаНаСвязанныйАкт = Неопределено Тогда
		ДанныеСвязанногоАкта = ОбщегоНазначенияИСМПТК.ЗначенияРеквизитовОбъекта(СсылкаНаСвязанныйАкт, "НомерИСМПТ, ДатаВИСМПТ, Идентификатор");
	Иначе
		ТекстСообщения = НСтр("ru = 'При отправке Уведомления о расхождениях произошла ошибка: не удалось получить информацию об исправляемом Акте приема/передачи.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ЗаполнитьУведомление");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////
	// Шапка.
	УведомлениеXDTO.fileId 	= СтрШаблон("DIVERG_%1", Уведомление.Ссылка.УникальныйИдентификатор());
	УведомлениеXDTO.version = "1.0";
	УведомлениеXDTO.sendingDateTime = Формат(УниверсальноеВремя(ТекущаяДатаСеанса()),"ДФ=ггг-ММ-ддThh:mm:ss");//YYYY-MMDDThh:mm:ssZ
		
	document = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO, "document", Фабрика);
	
	//данные из акта - correctionDocId GUID документа (исходного Акта), на который создается Уведомление  
	//regNumber Регистрационный номер документа (исходного Акта), на который передается корректировка НомерИСМПТ
	//regDate Дата регистрации документа (исходного Акта), на который передается корректировка, в формате dd.mm.yyyy ДатаВИСМПТ
	
	document.correctionDocId = ДанныеСвязанногоАкта.Идентификатор;

	document.regNumber = ДанныеСвязанногоАкта.НомерИСМПТ;
	document.regDate   = Формат(ДанныеСвязанногоАкта.ДатаВИСМПТ,"ДФ=dd.MM.yyyy");//dd.mm.yyyy
	
	mainInfo 		= ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document, 		 "mainInfo", 		Фабрика);
	supplierInfo 	= ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "supplierInfo",	Фабрика);
	consigneeInfo 	= ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "consigneeInfo", 	Фабрика);
	originalDocInfo = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document.mainInfo, "originalDocInfo", Фабрика);
	
	Если Уведомление.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСМПТК.Реализация") Тогда
		document.operationType = 1; // 1 - реализация, 2 - коммисия/агентская торговля
	ИначеЕсли Уведомление.ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперацииИСМПТК.КомиссияИАгентскаяТорговля") Тогда
		document.operationType = 2; // 1 - реализация, 2 - коммисия/агентская торговля
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Уведомление.ПоставщикНаименование) Тогда
		supplierInfo.Сбросить("supplierName");
	Иначе 
		supplierInfo.supplierName = Уведомление.ПоставщикНаименование;//Уведомление.ПолучательНаименование;
	КонецЕсли;
	supplierInfo.supplierIdentificationCode = Уведомление.ПоставщикИдентификационныйНомер;//Уведомление.ПолучательИдентификационныйНомер;
	
	Если Не ЗначениеЗаполнено(Уведомление.ПолучательНаименование) Тогда
		consigneeInfo.Сбросить("consigneeName");
	Иначе 
		consigneeInfo.consigneeName = Уведомление.ПолучательНаименование;//Уведомление.ПоставщикНаименование;
	КонецЕсли;
	consigneeInfo.consigneeIdentificationCode = Уведомление.ПолучательИдентификационныйНомер;//Уведомление.ПоставщикИдентификационныйНомер;
	
	//////////////////////////////////////////////////////////////////////////////
	// Табличные части
	productList = ОбщегоНазначенияИСМПТК.НовоеСвойствоОбъектаXDTO(УведомлениеXDTO.document, "productList", Фабрика);
	
	Для Каждого МаркиСтрока Из Уведомление.Марки Цикл
		product = ОбщегоНазначенияИСМПТК.НовыйЭлементСпискаXDTO(УведомлениеXDTO.document.productList.iCode, Фабрика);
		product.__content = МаркиСтрока.КодИдентификации;
		product.reviseStatusCode = СтатусСверкиДляСервера(МаркиСтрока.СтатусСверкиКода);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////  

#КонецОбласти

#Область ОтправитьИСМПТ

// Создание титула POST /edo-api/incoming-documents/{documentId}/events/{decision}
Функция ВыполнитьСозданиеТитулаДляПодписи(ИдентификаторДокумента, Принять, ДанныеПрофилей, Версия, СтруктурнаяЕдиница = Неопределено)
	
	Действие 	 = ?(Принять, "approve", "reject");
	АдресРесурса = СтрШаблон("api/v3/true-api/edo-api/incoming-documents/%1/events/%2", ИдентификаторДокумента, Действие);
	Заголовки 	 = Новый Соответствие();
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница,,, ДанныеПрофилей, Истина);
	
КонецФункции

// Подписание титула POST /edo-api/incoming-documents/{documentId}/events/{decision}/signature
Функция ВыполнитьПодписаниеТитула(ИдентификаторДокумента, Принять, ПодписанныйТитул, ДанныеПрофилей, Версия, СтруктурнаяЕдиница = Неопределено)
	
	Действие = ?(Принять, "approve", "reject");
	АдресРесурса = СтрШаблон("api/v3/true-api/edo-api/incoming-documents/%1/events/%2/signature", ИдентификаторДокумента, Действие);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "text/plain");
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, ПодписанныйТитул,, ДанныеПрофилей, Истина);
	
КонецФункции

///////////// Акты приема/передачи /////////////

Функция ОтправитьИсходящиеАкты(Знач КоллекцияПодписанныхДокументов, Знач ТокенАвторизации) Экспорт
		
	Результат = Неопределено;
	
	Для Каждого СгруппированныеАктыXML Из КоллекцияПодписанныхДокументов Цикл
		
		СтруктурнаяЕдиница = СгруппированныеАктыXML.Ключ;
		ДанныеКоллекцииАктовXML = СгруппированныеАктыXML.Значение;
		
		Если ТипЗнч(ДанныеКоллекцииАктовXML) = Тип("Соответствие") Тогда
			КоллекцияАктовXML = ДанныеКоллекцииАктовXML;
		Иначе
			КоллекцияАктовXML = ПолучитьИзВременногоХранилища(ДанныеКоллекцииАктовXML);
		КонецЕсли;
		
		Результат = ОтправитьИсходящиеАктыПП(КоллекцияАктовXML, Неопределено, СтруктурнаяЕдиница, ТокенАвторизации);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьИсходящиеАктыПП(Знач КоллекцияАктовXML, ДанныеПрофилей, СтруктурнаяЕдиница = Неопределено, ТокенАвторизации) Экспорт
	
	РезультатОтправки = Новый Соответствие;
	//обходим коллекцию актов 
	Для Каждого ЭлементКоллекции Из КоллекцияАктовXML Цикл
		
		Если РаботаСДокументамиИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанныхИСМПТ() Тогда 
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПроводитсяОтправкаДокумента();
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ЭлементКоллекции.Ключ);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		АктBase64 = ЭлементКоллекции.Значение.ДокументBase64;
		ПодписанныйАкт = ЭлементКоллекции.Значение.ПодписанныйДокумент;
		НомерДокумента = ЭлементКоллекции.Ключ.Номер;
		
		//Если Акт не был подписан (например, отменили выбор сертификата), тогда исключаем его из отправки и обновления
		Если ПодписанныйАкт = "НеВыбран" Тогда 
			
			Текст = НСтр("ru = 'Документ %1 был исключен из отправки, т.к. не был подписан ключом ЭЦП.'");
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Текст, ЭлементКоллекции.Ключ);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Продолжить;
			
		КонецЕсли;
		
		//каждый акт передаем в процедуру отправки
		РезультатВыполненияНаСервере = ВыполнитьСозданиеАктаПриемаПередачи(АктBase64, ПодписанныйАкт, НомерДокумента, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации);
		РезультатОтправки.Вставить(ЭлементКоллекции.Ключ, РезультатВыполненияНаСервере);
		
	КонецЦикла;

	// Обновим статусы отправленных и заполняем идентификаторы после завершения отправки всех документов
	ОбновитьАктыПослеОтправки(РезультатОтправки, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации);
	
	Текст = НСтр("ru = 'Отправка завершена.'");
	ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(Текст);
		
	Возврат РезультатОтправки;
	
КонецФункции

// Создание POST outgoing-documents/formal
Функция ВыполнитьСозданиеАктаПриемаПередачи(Знач АктBase64, ПодписанныйАкт, НомерДокумента, ДанныеПрофилей, СтруктурнаяЕдиница = Неопределено, ТокенАвторизации)
		
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("content",   	  СтрЗаменить(СтрЗаменить(АктBase64, Символы.ВК, ""),Символы.ПС,""));
	ПараметрыЗапроса.Вставить("signature", 	  ПодписанныйАкт);
	ПараметрыЗапроса.Вставить("type", 		  "1000");
	ПараметрыЗапроса.Вставить("for_approval", "true");
	ПараметрыЗапроса.Вставить("number",		  НомерДокумента);
	
	Разделитель = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	ТекстОтправки = "";
	Для каждого Параметр Из ПараметрыЗапроса Цикл
		ДобавитьПараметрВТелоЗапроса(ТекстОтправки, Параметр.Ключ, Параметр.Значение, Разделитель);
	КонецЦикла;
	ТекстОтправки = Лев(ТекстОтправки, СтрДлина(ТекстОтправки)-2) + "--" + Символы.ВК + Символы.ПС;
	
	АдресРесурса = "api/v3/true-api/edo-api/outgoing-documents/formal";
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + Разделитель);
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, ТекстОтправки,, ТокенАвторизации, Истина);
	
КонецФункции

////////////////////////////////////////////////  
///////////// Уведомления о расхождениях /////////////

Функция ОтправитьИсходящиеУведомления(Знач КоллекцияДанныеКоллекцииАктовXML, Знач КоллекцияПодписей, Знач ТокенАвторизации) Экспорт
		
	Результат = Неопределено;
	
	Для Каждого СгруппированныеДокументыXML Из КоллекцияПодписей Цикл
		
		СтруктурнаяЕдиница = СгруппированныеДокументыXML.Ключ;
		ДанныеКоллекцииДокументовXML = СгруппированныеДокументыXML.Значение;
		
		Если ТипЗнч(ДанныеКоллекцииДокументовXML) = Тип("Соответствие") Тогда
			КоллекцияДокументовXML = ДанныеКоллекцииДокументовXML;
		Иначе
			КоллекцияДокументовXML = ПолучитьИзВременногоХранилища(ДанныеКоллекцииДокументовXML);
		КонецЕсли;
		
		Результат = ОтправитьИсходящиеУведомленияОРасхождении(КоллекцияДокументовXML, Неопределено, СтруктурнаяЕдиница, ТокенАвторизации);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьИсходящиеУведомленияОРасхождении(Знач КоллекцияУведомленийXML, ДанныеПрофилей, СтруктурнаяЕдиница = Неопределено, ТокенАвторизации) Экспорт
	
	РезультатОтправки = Новый Соответствие;
	//обходим коллекцию актов 
	Для Каждого ЭлементКоллекции Из КоллекцияУведомленийXML Цикл
		
		Если РаботаСДокументамиИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанныхИСМПТ() Тогда 
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПроводитсяОтправкаДокумента();
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ЭлементКоллекции.Ключ);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		УведомлениеBase64   = ЭлементКоллекции.Значение.ДокументBase64;
		ПодписанныйДокумент = ЭлементКоллекции.Значение.ПодписанныйДокумент;
		НомерДокумента 		= ЭлементКоллекции.Ключ.Номер;
		
		Если ПодписанныйДокумент = "НеВыбран" Тогда 
			Текст = НСтр("ru = 'Документ %1 был исключен из отправки, т.к. не был подписан ключом ЭЦП.'");
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Текст, НомерДокумента); 
			СообщениеПользователя = Новый СообщениеПользователю;
			СообщениеПользователя.Текст = ТекстСообщения;
			СообщениеПользователя.Сообщить();
			Продолжить;
		КонецЕсли;
		
		//каждый документ передаем в процедуру отправки
		РезультатВыполненияНаСервере = ВыполнитьСозданиеУведомленияОРасхождении(УведомлениеBase64, ПодписанныйДокумент, НомерДокумента, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации);
		РезультатОтправки.Вставить(ЭлементКоллекции.Ключ, РезультатВыполненияНаСервере);
		
	КонецЦикла;
	
	// Обновим статусы отправленных и заполняем идентификаторы после завершения отправки всех документов
	ОбновитьУведомлениеПослеОтправки(РезультатОтправки, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации);
	
	Возврат РезультатОтправки;
	
КонецФункции

// Создание уведомления POST /documents/edo/discrepancy
Функция ВыполнитьСозданиеУведомленияОРасхождении(Знач УведомлениеBase64, ПодписанныйДокумент, НомерДокумента, ДанныеПрофилей, СтруктурнаяЕдиница = Неопределено, ТокенАвторизации)
	                                                                                	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("content",   	  СтрЗаменить(СтрЗаменить(УведомлениеBase64, Символы.ВК, ""),Символы.ПС,""));
	ПараметрыЗапроса.Вставить("signature", 	  ПодписанныйДокумент);
	ПараметрыЗапроса.Вставить("type", 		  "1005");
	ПараметрыЗапроса.Вставить("for_approval", "true");
	ПараметрыЗапроса.Вставить("number", 	  НомерДокумента);
	
	Разделитель = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	ТекстОтправки = "";
	Для каждого Параметр Из ПараметрыЗапроса Цикл
		ДобавитьПараметрВТелоЗапроса(ТекстОтправки, Параметр.Ключ, Параметр.Значение, Разделитель);
	КонецЦикла;
	ТекстОтправки = Лев(ТекстОтправки, СтрДлина(ТекстОтправки)-2) + "--" + Символы.ВК + Символы.ПС;
	
	АдресРесурса = "api/v3/true-api/edo-api/outgoing-documents/formal"; //вынести в отдельную процедуру
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + Разделитель);
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, ТекстОтправки,, ТокенАвторизации, Истина);
	
КонецФункции

////////////////////////////////////////////////
///////////// Уведомления о вводе в оборот /////////////

Функция ОтправитьИсходящиеУведомленияВВО(Знач КоллекцияДанныеКоллекцииАктовXML, Знач КоллекцияПодписей, Знач ТокенАвторизации) Экспорт
		
	РезультатОтправки = Новый Соответствие;
	
	Для Каждого СгруппированныеДокументыXML Из КоллекцияПодписей Цикл
		
		СтруктурнаяЕдиница = СгруппированныеДокументыXML.Ключ;
		ДанныеКоллекцииДокументовXML = СгруппированныеДокументыXML.Значение;
		
		Если ТипЗнч(ДанныеКоллекцииДокументовXML) = Тип("Соответствие") Тогда
			КоллекцияДокументовXML = ДанныеКоллекцииДокументовXML;
		Иначе
			КоллекцияДокументовXML = ПолучитьИзВременногоХранилища(ДанныеКоллекцииДокументовXML);
		КонецЕсли;
		
		//обходим коллекцию актов 
		Для Каждого ЭлементКоллекции Из КоллекцияДокументовXML Цикл
			
			Если РаботаСДокументамиИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанныхИСМПТ() Тогда 
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПроводитсяОтправкаДокумента();
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ЭлементКоллекции.Ключ);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			УведомлениеBase64 = ЭлементКоллекции.Значение.ДокументBase64;
			ПодписанныйДокумент = ЭлементКоллекции.Значение.ПодписанныйДокумент;
			
			Если ПодписанныйДокумент = "НеВыбран" Тогда 
				Текст = НСтр("ru = 'Документ %1 был исключен из отправки, т.к. не был подписан ключом ЭЦП.'");
				НомерДокументаОтправки = ЭлементКоллекции.Ключ.Номер;
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Текст, НомерДокументаОтправки); 
				СообщениеПользователя = Новый СообщениеПользователю;
				СообщениеПользователя.Текст = ТекстСообщения;
				СообщениеПользователя.Сообщить();
				Продолжить;
			КонецЕсли;
			
			//каждый документ передаем в процедуру отправки
			РезультатВыполненияНаСервере = ВыполнитьСозданиеУведомленияВВО(УведомлениеBase64, ПодписанныйДокумент, Неопределено, СтруктурнаяЕдиница, ТокенАвторизации);
			РезультатОтправки.Вставить(ЭлементКоллекции.Ключ, РезультатВыполненияНаСервере);
			
		КонецЦикла;
		
		// Обновим статусы отправленных и заполняем идентификаторы после завершения отправки всех документов
		ОбновитьУведомлениеВводаВыводаПослеОтправки(РезультатОтправки, Неопределено, СтруктурнаяЕдиница, ТокенАвторизации, ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСМПТК());
        	
	КонецЦикла;
		
	Возврат РезультатОтправки;
	
КонецФункции

Функция ВыполнитьСозданиеУведомленияВВО(Знач УведомлениеBase64, ПодписанныйДокумент, ДанныеПрофилей, СтруктурнаяЕдиница = Неопределено, ТокенАвторизации)
	
	АдресРесурса = "api/v3/true-api/documents/transit/introduce-goods/create"; //вынести в отдельную процедуру
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("document",   СтрЗаменить(СтрЗаменить(УведомлениеBase64, Символы.ВК, ""),Символы.ПС,""));
	ПараметрыЗапроса.Вставить("signature", ПодписанныйДокумент);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ПараметрыЗапроса);
	ТекстОтправки = ЗаписьJSON.Закрыть();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, ТекстОтправки, , ТокенАвторизации, Истина);
	
КонецФункции

Процедура ОбновитьУведомлениеВводаВыводаПослеОтправки(РезультатОтправкиДокументов, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации, ТипДокумента)
	
	Для каждого РезультатОтправки Из РезультатОтправкиДокументов Цикл
		ИнформацияОбОшибке = Неопределено;
		Если ЭтоОшибка(РезультатОтправки.Значение, ИнформацияОбОшибке) Тогда
			ЗаполнитьОшибкиДокумента(РезультатОтправки.Ключ, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОтправкеДокументаПодробно() + " "
						   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПодробностиВЖурналеРегистрации();
		    ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОтправляемыйДокумент%", РезультатОтправки.Ключ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеСервера%",  РаботаСТекстамиИСМПТККлиентСервер.НаименованиеИСМПТ());
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
			ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОтправкеДокумента()
						+ Символы.ПС 
						+ ИнформацияОбОшибке.ПодробноеПредставление;
			ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
			ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомлениеВводаВыводаПослеОтправки");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
			Продолжить;
		Иначе
			
			Если РаботаСДокументамиИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанныхИСМПТ() Тогда 
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументУспешноОтправленНаСервер();
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеСервера%", РаботаСТекстамиИСМПТККлиентСервер.НаименованиеИСМПТ());
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
			ОчиститьОшибкиДокумента(РезультатОтправки.Ключ);	
		КонецЕсли;
		
		Идентификатор = СтрШаблон("KZ_EAES_%1", РезультатОтправки.Ключ.УникальныйИдентификатор());
		//идентификатор необходимо сохранить до получения обновления
		ИнтерфейсИСМПТК.ЗаполнитьИдентификаторДокумента(РезультатОтправки.Ключ, Идентификатор, Перечисления.СтатусыДокументовИСМПТК.Проверяется);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////
///////////// Уведомления о выводе из оборота /////////////

Функция ОтправитьИсходящиеУведомленияВИО(Знач КоллекцияДанныеКоллекцииАктовXML, Знач КоллекцияПодписей, Знач ТокенАвторизации) Экспорт
		
	РезультатОтправки = Новый Соответствие;
	
	Для Каждого СгруппированныеДокументыXML Из КоллекцияПодписей Цикл
		
		СтруктурнаяЕдиница = СгруппированныеДокументыXML.Ключ;
		ДанныеКоллекцииДокументовXML = СгруппированныеДокументыXML.Значение;
		
		Если ТипЗнч(ДанныеКоллекцииДокументовXML) = Тип("Соответствие") Тогда
			КоллекцияДокументовXML = ДанныеКоллекцииДокументовXML;
		Иначе
			КоллекцияДокументовXML = ПолучитьИзВременногоХранилища(ДанныеКоллекцииДокументовXML);
		КонецЕсли;
			
		//обходим коллекцию актов 
		Для Каждого ЭлементКоллекции Из КоллекцияДокументовXML Цикл
			
			Если РаботаСДокументамиИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанныхИСМПТ() Тогда 
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПроводитсяОтправкаДокумента();
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ЭлементКоллекции.Ключ);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			УведомлениеBase64 = ЭлементКоллекции.Значение.ДокументBase64;
			ПодписанныйДокумент = ЭлементКоллекции.Значение.ПодписанныйДокумент;
			
			Если ПодписанныйДокумент = "НеВыбран" Тогда 
				Текст = НСтр("ru = 'Документ %1 был исключен из отправки, т.к. не был подписан ключом ЭЦП.'");
				НомерДокументаОтправки = ЭлементКоллекции.Ключ.Номер;
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Текст, НомерДокументаОтправки); 
				СообщениеПользователя = Новый СообщениеПользователю;
				СообщениеПользователя.Текст = ТекстСообщения;
				СообщениеПользователя.Сообщить();
				Продолжить;
			КонецЕсли;
			
			//каждый документ передаем в процедуру отправки
			РезультатВыполненияНаСервере = ВыполнитьСозданиеУведомленияВИО(УведомлениеBase64, ПодписанныйДокумент, Неопределено, СтруктурнаяЕдиница, ТокенАвторизации);
			РезультатОтправки.Вставить(ЭлементКоллекции.Ключ, РезультатВыполненияНаСервере);
			
		КонецЦикла;
		
		// Обновим статусы отправленных и заполняем идентификаторы после завершения отправки всех документов
		ОбновитьУведомлениеВводаВыводаПослеОтправки(РезультатОтправки, Неопределено, СтруктурнаяЕдиница, ТокенАвторизации, ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСМПТК());
	    		
	КонецЦикла;
	
	Возврат РезультатОтправки;
	
КонецФункции

Функция ВыполнитьСозданиеУведомленияВИО(Знач УведомлениеBase64, ПодписанныйДокумент, ДанныеПрофилей, СтруктурнаяЕдиница = Неопределено, ТокенАвторизации)
	
	АдресРесурса = "api/v3/true-api/documents/writeOff"; //вынести в отдельную процедуру
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("document",   СтрЗаменить(СтрЗаменить(УведомлениеBase64, Символы.ВК, ""),Символы.ПС,""));
	ПараметрыЗапроса.Вставить("signature", ПодписанныйДокумент);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ПараметрыЗапроса);
	ТекстОтправки = ЗаписьJSON.Закрыть();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, ТекстОтправки, , ТокенАвторизации, Истина);
	
КонецФункции

////////////////////////////////////////////////
///////////// Уведомления о ввозе ЕАЭС /////////////

Функция ОтправитьУведомленияОВвозе(Знач КоллекцияДанныеКоллекцииАктовXML, Знач КоллекцияПодписей, Знач ТокенАвторизации) Экспорт
	
	Результат = Неопределено;
	
	Для Каждого СгруппированныеДокументыXML Из КоллекцияПодписей Цикл
		
		СтруктурнаяЕдиница = СгруппированныеДокументыXML.Ключ;
		ДанныеКоллекцииДокументовXML = СгруппированныеДокументыXML.Значение;
		
		Если ТипЗнч(ДанныеКоллекцииДокументовXML) = Тип("Соответствие") Тогда
			КоллекцияДокументовXML = ДанныеКоллекцииДокументовXML;
		Иначе
			КоллекцияДокументовXML = ПолучитьИзВременногоХранилища(ДанныеКоллекцииДокументовXML);
		КонецЕсли;
				
		РезультатОтправки = Новый Соответствие;
		//обходим коллекцию документов 
		Для Каждого ЭлементКоллекции Из КоллекцияДокументовXML Цикл
			УведомлениеBase64 = ЭлементКоллекции.Значение.ДокументBase64;
			ПодписанныйДокумент = ЭлементКоллекции.Значение.ПодписанныйДокумент;
			
			Если ПодписанныйДокумент = "НеВыбран" Тогда 
				НомерДокумента = ЭлементКоллекции.Ключ.Номер;
				Текст = НСтр("ru = 'Документ %1 был исключен из отправки, т.к. не был подписан ключом ЭЦП.'");
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Текст, НомерДокумента); 
				СообщениеПользователя = Новый СообщениеПользователю;
				СообщениеПользователя.Текст = ТекстСообщения;
				СообщениеПользователя.Сообщить();
				Продолжить;
			КонецЕсли;
			
			//каждый документ передаем в процедуру отправки
			РезультатВыполненияНаСервере = ВыполнитьСозданиеУведомленияОВвозеИзЕАЭС(УведомлениеBase64, ПодписанныйДокумент, 0, Неопределено, СтруктурнаяЕдиница, ТокенАвторизации);
			РезультатОтправки.Вставить(ЭлементКоллекции.Ключ, РезультатВыполненияНаСервере);
		КонецЦикла;
		
		// Обновим статусы отправленных и заполняем идентификаторы после завершения отправки всех документов
		ОбновитьУведомлениеОВвозеПослеОтправки(РезультатОтправки, Неопределено, СтруктурнаяЕдиница, ТокенАвторизации);
		
		Результат = РезультатОтправки;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Создание POST outgoing-documents/formal
Функция ВыполнитьСозданиеУведомленияОВвозеИзЕАЭС(Знач ДокументBase64, ПодписанныйДокумент, НомерДокумента, ДанныеПрофилей, СтруктурнаяЕдиница = Неопределено, ТокенАвторизации)
		
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("content",   СтрЗаменить(СтрЗаменить(ДокументBase64, Символы.ВК, ""),Символы.ПС,""));
	ПараметрыЗапроса.Вставить("signature", ПодписанныйДокумент);
	//ПараметрыЗапроса.Вставить("type", "1000");
	//ПараметрыЗапроса.Вставить("for_approval", "true");
	//ПараметрыЗапроса.Вставить("number", НомерДокумента);
	//
	Разделитель = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	ТекстОтправки = "";
	Для каждого Параметр Из ПараметрыЗапроса Цикл
		ДобавитьПараметрВТелоЗапроса(ТекстОтправки, Параметр.Ключ, Параметр.Значение, Разделитель);
	КонецЦикла;
	ТекстОтправки = Лев(ТекстОтправки, СтрДлина(ТекстОтправки)-2) + "--" + Символы.ВК + Символы.ПС;
	
	АдресРесурса = "api/v3/true-api/edo-api/outgoing-documents/formal";
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + Разделитель);
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, ТекстОтправки,, ТокенАвторизации, Истина);
	
КонецФункции

Процедура ОбновитьУведомлениеОВвозеПослеОтправки(РезультатОтправкиДокументов, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации)
	
	Для каждого РезультатОтправки Из РезультатОтправкиДокументов Цикл
		ИнформацияОбОшибке = Неопределено;
		Если ЭтоОшибка(РезультатОтправки.Значение, ИнформацияОбОшибке) Тогда
			ЗаполнитьОшибкиДокумента(РезультатОтправки.Ключ, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОтправкеДокументаПодробно() + " "
						   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПодробностиВЖурналеРегистрации();
		    ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОтправляемыйДокумент%", РезультатОтправки.Ключ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеСервера%",  РаботаСТекстамиИСМПТККлиентСервер.НаименованиеИСМПТ());
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
			ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОтправкеДокумента()
						+ Символы.ПС 
						+ ИнформацияОбОшибке.ПодробноеПредставление;
			ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
			ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомлениеОВвозеПослеОтправки");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
			Продолжить;
		Иначе
			
			Если РаботаСДокументамиИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанныхИСМПТ() Тогда 
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументУспешноОтправленНаСервер();
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеСервера%", РаботаСТекстамиИСМПТККлиентСервер.НаименованиеИСМПТ());
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
			ОчиститьОшибкиДокумента(РезультатОтправки.Ключ);	
		КонецЕсли;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(РезультатОтправки.Значение.ТекстОтвета);
		РезультатЗапроса = ПрочитатьJSON(ЧтениеJSON);
		
		ИдентификаторНаСервере = ?(РезультатЗапроса.Свойство("id"), РезультатЗапроса.id, "");
		ДопДанныеДокумента = ПолучитьДополнительныеДанныеПоИдентификатору(ИдентификаторНаСервере, ДанныеПрофилей, СтруктурнаяЕдиница, Истина, ТокенАвторизации);
		
		Попытка
			ДокументОбъект = РезультатОтправки.Ключ.ПолучитьОбъект();
			ДокументОбъект.Идентификатор = ИдентификаторНаСервере;
			ДокументОбъект.НомерИСМПТ 	 = ДопДанныеДокумента.НомерИСМПТ;
			ДокументОбъект.ДатаВИСМПТ 	 = ДопДанныеДокумента.ДатаВИСМПТ;
			Статус = ПолучитьСтатусДокументаПоКоду(ДопДанныеДокумента.Статус);
			Если Статус <> Неопределено Тогда
				ДокументОбъект.Статус = Статус;
			КонецЕсли;
			ДокументОбъект.Записать();
		Исключение
			//ОписаниеОшибки()
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////
///////////// Уведомления о ввозе Импорт /////////////

Функция ОтправитьУведомленияОВвозеИзТретьихСтран(Знач КоллекцияДанныеКоллекцииАктовXML, Знач КоллекцияПодписей, Знач ТокенАвторизации) Экспорт
	
	Результат = Неопределено;
	
	Для Каждого СгруппированныеДокументыXML Из КоллекцияПодписей Цикл
		
		СтруктурнаяЕдиница = СгруппированныеДокументыXML.Ключ;
		ДанныеКоллекцииДокументовXML = СгруппированныеДокументыXML.Значение;
		
		Если ТипЗнч(ДанныеКоллекцииДокументовXML) = Тип("Соответствие") Тогда
			КоллекцияДокументовXML = ДанныеКоллекцииДокументовXML;
		Иначе
			КоллекцияДокументовXML = ПолучитьИзВременногоХранилища(ДанныеКоллекцииДокументовXML);
		КонецЕсли;
		
		РезультатОтправки = Новый Соответствие;
		//обходим коллекцию документов 
		Для Каждого ЭлементКоллекции Из КоллекцияДокументовXML Цикл
			УведомлениеBase64 = ЭлементКоллекции.Значение.ДокументBase64;
			ПодписанныйДокумент = ЭлементКоллекции.Значение.ПодписанныйДокумент;
			
			Если ПодписанныйДокумент = "НеВыбран" Тогда 
				НомерДокумента = ЭлементКоллекции.Ключ.Номер;
				Текст = НСтр("ru = 'Документ %1 был исключен из отправки, т.к. не был подписан ключом ЭЦП.'");
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Текст, НомерДокумента); 
				СообщениеПользователя = Новый СообщениеПользователю;
				СообщениеПользователя.Текст = ТекстСообщения;
				СообщениеПользователя.Сообщить();
				Продолжить;
			КонецЕсли;
			
			//каждый документ передаем в процедуру отправки
			РезультатВыполненияНаСервере = ВыполнитьСозданиеУведомленияОВвозеИзТретьихСтран(УведомлениеBase64, ПодписанныйДокумент, 0, Неопределено, СтруктурнаяЕдиница, ТокенАвторизации);
			РезультатОтправки.Вставить(ЭлементКоллекции.Ключ, РезультатВыполненияНаСервере);
		КонецЦикла;
		
		// Обновим статусы отправленных и заполняем идентификаторы после завершения отправки всех документов
		ОбновитьУведомлениеОВвозеИзТретьихСтранПослеОтправки(РезультатОтправки, Неопределено, СтруктурнаяЕдиница, ТокенАвторизации);
		
		Результат = РезультатОтправки;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Создание POST outgoing-documents/formal
Функция ВыполнитьСозданиеУведомленияОВвозеИзТретьихСтран(Знач ДокументBase64, ПодписанныйДокумент, НомерДокумента, ДанныеПрофилей, СтруктурнаяЕдиница = Неопределено, ТокенАвторизации)
		
	//ПараметрыЗапроса = Новый Структура;
	//ПараметрыЗапроса.Вставить("content",   СтрЗаменить(СтрЗаменить(ДокументBase64, Символы.ВК, ""),Символы.ПС,""));
	//ПараметрыЗапроса.Вставить("signature", ПодписанныйДокумент);
	//
	//Разделитель = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	//ТекстОтправки = "";
	//Для каждого Параметр Из ПараметрыЗапроса Цикл
	//	ДобавитьПараметрВТелоЗапроса(ТекстОтправки, Параметр.Ключ, Параметр.Значение, Разделитель);
	//КонецЦикла;
	//ТекстОтправки = Лев(ТекстОтправки, СтрДлина(ТекстОтправки)-2) + "--" + Символы.ВК + Символы.ПС;
	//
	//АдресРесурса = "api/v3/true-api/documents/transit/import/third_countries";
	//
	//Заголовки = Новый Соответствие();
	//Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + Разделитель);
	
	АдресРесурса = "api/v3/true-api/documents/transit/import/third_countries"; //вынести в отдельную процедуру
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("document",   СтрЗаменить(СтрЗаменить(ДокументBase64, Символы.ВК, ""),Символы.ПС,""));
	ПараметрыЗапроса.Вставить("signature", ПодписанныйДокумент);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ПараметрыЗапроса);
	ТекстОтправки = ЗаписьJSON.Закрыть();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, ТекстОтправки,, ТокенАвторизации, Истина);
	
КонецФункции

Процедура ОбновитьУведомлениеОВвозеИзТретьихСтранПослеОтправки(РезультатОтправкиДокументов, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации)
	
		Для каждого РезультатОтправки Из РезультатОтправкиДокументов Цикл
		ИнформацияОбОшибке = Неопределено;
		Если ЭтоОшибка(РезультатОтправки.Значение, ИнформацияОбОшибке) Тогда
			ЗаполнитьОшибкиДокумента(РезультатОтправки.Ключ, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОтправкеДокументаПодробно() + " "
						   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПодробностиВЖурналеРегистрации();
		    ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОтправляемыйДокумент%", РезультатОтправки.Ключ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеСервера%",  РаботаСТекстамиИСМПТККлиентСервер.НаименованиеИСМПТ());
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
			ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОтправкеДокумента()
						+ Символы.ПС 
						+ ИнформацияОбОшибке.ПодробноеПредставление;
			ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
			ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомлениеОВвозеИзТретьихСтранПослеОтправки");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
			Продолжить;
		Иначе
			
			Если РаботаСДокументамиИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанныхИСМПТ() Тогда 
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументУспешноОтправленНаСервер();
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеСервера%", РаботаСТекстамиИСМПТККлиентСервер.НаименованиеИСМПТ());
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
			ОчиститьОшибкиДокумента(РезультатОтправки.Ключ);	
		КонецЕсли;
		
		Идентификатор = СтрШаблон("IMPORT_%1", РезультатОтправки.Ключ.УникальныйИдентификатор());
		//идентификатор необходимо сохранить до получения обновления
		ИнтерфейсИСМПТК.ЗаполнитьИдентификаторДокумента(РезультатОтправки.Ключ, Идентификатор, Перечисления.СтатусыДокументовИСМПТК.Проверяется);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////
///////////// Уведомления об экспорте /////////////

Функция ОтправитьУведомленияОбЭкспортеЕАЭС(Знач КоллекцияДанныеКоллекцииАктовXML, Знач КоллекцияПодписей, Знач ТокенАвторизации) Экспорт
	
	Результат = Неопределено;
	
	Для Каждого СгруппированныеДокументыXML Из КоллекцияПодписей Цикл
		
		СтруктурнаяЕдиница = СгруппированныеДокументыXML.Ключ;
		ДанныеКоллекцииДокументовXML = СгруппированныеДокументыXML.Значение;
		
		Если ТипЗнч(ДанныеКоллекцииДокументовXML) = Тип("Соответствие") Тогда
			КоллекцияДокументовXML = ДанныеКоллекцииДокументовXML;
		Иначе
			КоллекцияДокументовXML = ПолучитьИзВременногоХранилища(ДанныеКоллекцииДокументовXML);
		КонецЕсли;
		
		Результат = ОтправитьИсходящиеУведомленияОбЭкспортеЕАЭС(КоллекцияДокументовXML, Неопределено, СтруктурнаяЕдиница, ТокенАвторизации);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьИсходящиеУведомленияОбЭкспортеЕАЭС(Знач КоллекцияУведомленийXML, ДанныеПрофилей, СтруктурнаяЕдиница = Неопределено, ТокенАвторизации) Экспорт
	
	РезультатОтправки = Новый Соответствие;
	//обходим коллекцию документов
	Для Каждого ЭлементКоллекции Из КоллекцияУведомленийXML Цикл
		
		Если РаботаСДокументамиИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанныхИСМПТ() Тогда 
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПроводитсяОтправкаДокумента();
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ЭлементКоллекции.Ключ);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		УведомлениеBase64   = ЭлементКоллекции.Значение.ДокументBase64;
		ПодписанныйДокумент = ЭлементКоллекции.Значение.ПодписанныйДокумент;
		
		Если ПодписанныйДокумент = "НеВыбран" Тогда 
			НомерДокумента = ЭлементКоллекции.Ключ.Номер;
			Текст = НСтр("ru = 'Документ %1 был исключен из отправки, т.к. не был подписан ключом ЭЦП.'");
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Текст, НомерДокумента); 
			СообщениеПользователя = Новый СообщениеПользователю;
			СообщениеПользователя.Текст = ТекстСообщения;
			СообщениеПользователя.Сообщить();
			Продолжить;
		КонецЕсли;
		
		РезультатВыполненияНаСервере = ВыполнитьСозданиеУведомленияОбЭкспортеЕАЭС(УведомлениеBase64, ПодписанныйДокумент, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации);
		РезультатОтправки.Вставить(ЭлементКоллекции.Ключ, РезультатВыполненияНаСервере);
		
	КонецЦикла;
	
	// Обновим статусы отправленных и заполняем идентификаторы после завершения отправки всех документов
	ОбновитьУведомленияОбЭкспортеЕАЭСПослеОтправки(РезультатОтправки, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации);
	
	Возврат РезультатОтправки;
	
КонецФункции

// Создание POST edo-api/shipments
Функция ВыполнитьСозданиеУведомленияОбЭкспортеЕАЭС(Знач ДокументBase64, ПодписанныйДокумент, ДанныеПрофилей, СтруктурнаяЕдиница = Неопределено, ТокенАвторизации)
	
	АдресРесурса = "api/v3/true-api/edo-api/shipments";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("document",  СтрЗаменить(СтрЗаменить(ДокументBase64, Символы.ВК, ""),Символы.ПС,""));
	ПараметрыЗапроса.Вставить("signature", ПодписанныйДокумент);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ПараметрыЗапроса);
	ТекстОтправки = ЗаписьJSON.Закрыть();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, ТекстОтправки, , ТокенАвторизации, Истина);
	
КонецФункции

Процедура ОбновитьУведомленияОбЭкспортеЕАЭСПослеОтправки(РезультатОтправкиДокументов, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации)
	
	Для каждого РезультатОтправки Из РезультатОтправкиДокументов Цикл
		ИнформацияОбОшибке = Неопределено;
		ЕстьОшибки = Ложь;
		Если ЭтоОшибка(РезультатОтправки.Значение, ИнформацияОбОшибке) Тогда
			ЗаполнитьОшибкиДокумента(РезультатОтправки.Ключ, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОтправкеДокументаПодробно() + " "
						   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПодробностиВЖурналеРегистрации();
		    ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОтправляемыйДокумент%", РезультатОтправки.Ключ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеСервера%",  РаботаСТекстамиИСМПТККлиентСервер.НаименованиеИСМПТ());
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
			ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОтправкеДокумента()
						+ Символы.ПС 
						+ ИнформацияОбОшибке.ПодробноеПредставление;
			ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
			ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомленияОбЭкспортеЕАЭСПослеОтправки");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
			Продолжить;
		Иначе
			//проверяем ответ сервера на наличие ошибок валидации
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(РезультатОтправки.Значение.ТекстОтвета);
			ОтветСервера = ПрочитатьJSON(ЧтениеJSON);
			ОписаниеОшибок = "";
			Для каждого СтрокаОшибки Из ОтветСервера.errors Цикл
				ПозицияРазделителя = СтрНайти(СтрокаОшибки, ":", НаправлениеПоиска.СНачала);
				Если ПозицияРазделителя > 0 Тогда
					КодОшибки = Сред(СтрокаОшибки, 0, ПозицияРазделителя - 1);
					ТекстОшибки = СокрЛП(Сред(СтрокаОшибки, ПозицияРазделителя + 1, СтрДлина(СтрокаОшибки) - ПозицияРазделителя));
					Если КодОшибки <> "0" Тогда
						ЕстьОшибки = Истина;
						ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + ТекстОшибки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если ЕстьОшибки Тогда
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОтправкеДокументаПодробно() + " "
							   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПодробностиВЖурналеРегистрации();
			    ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОтправляемыйДокумент%", РезультатОтправки.Ключ);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеСервера%",  РаботаСТекстамиИСМПТККлиентСервер.НаименованиеИСМПТ());
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				
				ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОтправкеДокумента()
							+ Символы.ПС 
							+ ИнформацияОбОшибке.ПодробноеПредставление;
				ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
				ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомленияОбЭкспортеЕАЭСПослеОтправки");
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
			Иначе
				//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
				ОчиститьОшибкиДокумента(РезультатОтправки.Ключ);
				ИдентификаторНаСервере = ?(ОтветСервера.Свойство("shipmentId"), ОтветСервера.shipmentId, "");
				
				РезультатВыполнения = ПолучитьСтатусУведомленияОбЭкспортеЕАЭС(Новый Структура("Идентификатор", ИдентификаторНаСервере), СтруктурнаяЕдиница, ТокенАвторизации);
				СтатусДокумента = Неопределено;
				Если Не ЭтоОшибка(РезультатВыполнения, ИнформацияОбОшибке) Тогда
					ЧтениеJSON = Новый ЧтениеJSON;
					ЧтениеJSON.УстановитьСтроку(РезультатВыполнения.ТекстОтвета);
					СтруктураСтатус = ПрочитатьJSON(ЧтениеJSON);
					СтатусДокумента = СтруктураСтатус.status;
					
					Если РаботаСДокументамиИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанныхИСМПТ() Тогда 
						ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументУспешноОтправленНаСервер();
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеСервера%", РаботаСТекстамиИСМПТККлиентСервер.НаименованиеИСМПТ());
						ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					КонецЕсли;
					
				КонецЕсли;
				
				Попытка
					ДокументОбъект = РезультатОтправки.Ключ.ПолучитьОбъект();
					Если ЗначениеЗаполнено(ИдентификаторНаСервере) Тогда
						ДокументОбъект.Идентификатор = ИдентификаторНаСервере;
					КонецЕсли;
					ДокументОбъект.НомерИСМПТ = ИдентификаторНаСервере;
					Статус = ПолучитьСтатусДокументаПоКоду(СтатусДокумента);  //Перечисления.СтатусыДокументовИСМПТК.Проверяется
					Если Статус <> Неопределено Тогда
						ДокументОбъект.Статус = Статус;
					КонецЕсли;
					ДокументОбъект.Записать();
				Исключение
					//ОписаниеОшибки()
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////
///////////// Уведомления о приемке /////////////

Функция ОтправитьОтправитьУведомлениеОПриемкеЕАЭС(Знач КоллекцияДанныеКоллекцииАктовXML, Знач КоллекцияПодписей, Знач ТокенАвторизации) Экспорт
	
	Результат = Неопределено;
	
	Для Каждого СгруппированныеДокументыXML Из КоллекцияПодписей Цикл
		
		СтруктурнаяЕдиница = СгруппированныеДокументыXML.Ключ;
		ДанныеКоллекцииДокументовXML = СгруппированныеДокументыXML.Значение;
		
		Если ТипЗнч(ДанныеКоллекцииДокументовXML) = Тип("Соответствие") Тогда
			КоллекцияДокументовXML = ДанныеКоллекцииДокументовXML;
		Иначе
			КоллекцияДокументовXML = ПолучитьИзВременногоХранилища(ДанныеКоллекцииДокументовXML);
		КонецЕсли;
		
		Результат = ОтправитьИсходящиеУведомленияОПриемкеТоваровЕАЭС(КоллекцияДокументовXML, Неопределено, СтруктурнаяЕдиница, ТокенАвторизации);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции 

Функция ОтправитьИсходящиеУведомленияОПриемкеТоваровЕАЭС(Знач КоллекцияУведомленийXML, ДанныеПрофилей, СтруктурнаяЕдиница = Неопределено, ТокенАвторизации) Экспорт
	
	РезультатОтправки = Новый Соответствие;
	//обходим коллекцию документов
	Для Каждого ЭлементКоллекции Из КоллекцияУведомленийXML Цикл
		
		Если РаботаСДокументамиИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанныхИСМПТ() Тогда 
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПроводитсяОтправкаДокумента();
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ЭлементКоллекции.Ключ);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		УведомлениеBase64   = ЭлементКоллекции.Значение.ДокументBase64;
		ПодписанныйДокумент = ЭлементКоллекции.Значение.ПодписанныйДокумент;
		
		Если ПодписанныйДокумент = "НеВыбран" Тогда 
			НомерДокумента = ЭлементКоллекции.Ключ.Номер;
			Текст = НСтр("ru = 'Документ %1 был исключен из отправки, т.к. не был подписан ключом ЭЦП.'");
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Текст, НомерДокумента); 
			СообщениеПользователя = Новый СообщениеПользователю;
			СообщениеПользователя.Текст = ТекстСообщения;
			СообщениеПользователя.Сообщить();
			Продолжить;
		КонецЕсли;
		
		РезультатВыполненияНаСервере = ВыполнитьСозданиеУведомленияОПриемкеТоваровЕАЭС(УведомлениеBase64, ПодписанныйДокумент, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации);
		РезультатОтправки.Вставить(ЭлементКоллекции.Ключ, РезультатВыполненияНаСервере);
		
	КонецЦикла;
	
	ОбновитьУведомленияОПриемкеТоваровЕАЭСПослеОтправки(РезультатОтправки, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации);
	
	Возврат РезультатОтправки;
	
КонецФункции

// Создание POST edo-api/shipments
Функция ВыполнитьСозданиеУведомленияОПриемкеТоваровЕАЭС(Знач ДокументBase64, ПодписанныйДокумент, ДанныеПрофилей, СтруктурнаяЕдиница = Неопределено, ТокенАвторизации)
	
	АдресРесурса = "api/v3/true-api/documents/import/acceptancies";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("document",  СтрЗаменить(СтрЗаменить(ДокументBase64, Символы.ВК, ""),Символы.ПС,""));
	ПараметрыЗапроса.Вставить("signature", ПодписанныйДокумент);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ПараметрыЗапроса);
	ТекстОтправки = ЗаписьJSON.Закрыть();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, ТекстОтправки, , ТокенАвторизации, Истина);
	
КонецФункции

Процедура ОбновитьУведомленияОПриемкеТоваровЕАЭСПослеОтправки(РезультатОтправкиДокументов, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации)
	
	Для Каждого РезультатОтправки Из РезультатОтправкиДокументов Цикл
		
		ИнформацияОбОшибке = Неопределено;
		ЕстьОшибки = Ложь;
		
		Если ЭтоОшибка(РезультатОтправки.Значение, ИнформацияОбОшибке) Тогда
			
			ЗаполнитьОшибкиДокумента(РезультатОтправки.Ключ, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
			
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОтправкеДокументаПодробно() + " "
						   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПодробностиВЖурналеРегистрации();
		    ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОтправляемыйДокумент%", РезультатОтправки.Ключ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеСервера%",  РаботаСТекстамиИСМПТККлиентСервер.НаименованиеИСМПТ());
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
			ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОтправкеДокумента()
						+ Символы.ПС 
						+ ИнформацияОбОшибке.ПодробноеПредставление;
			ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
			ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомленияОПриемкеТоваровЕАЭСПослеОтправки");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
			Продолжить;
		Иначе
			//проверяем ответ сервера на наличие ошибок валидации
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(РезультатОтправки.Значение.ТекстОтвета);
			ОтветСервера = ПрочитатьJSON(ЧтениеJSON);
			
			ОписаниеОшибок = "";
			ДокументПринят = Ложь;
			ИдентификаторНаСервере = "";
			
			Если ОтветСервера.Свойство("acceptionId") Тогда
				
				ДокументПринят = Истина;
				ИдентификаторНаСервере = ОтветСервера.acceptionId;
				
				Если ОтветСервера.Свойство("errors") Тогда 
					Для каждого СтрокаОшибки Из ОтветСервера.errors Цикл
						КодОшибки 	= СтрокаОшибки.errorCode;
						ТекстОшибки = СтрокаОшибки.errorMessage;
						Если КодОшибки <> "0" Тогда
							ЕстьОшибки = Истина;
							ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + ТекстОшибки;
							ЗаполнитьОшибкиДокумента(РезультатОтправки.Ключ, ТекстОшибки);
						КонецЕсли;
					КонецЦикла;
					
					ТекстСообщения = НСтр("ru = 'Документ был принят на сервере с ошибками: '") + Символы.ПС + ОписаниеОшибок;
					ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
					ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомленияОПриемкеТоваровЕАЭСПослеОтправки");
					ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				Иначе
					Если РаботаСДокументамиИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанныхИСМПТ() Тогда 
						ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументУспешноОтправленНаСервер();
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеСервера%", РаботаСТекстамиИСМПТККлиентСервер.НаименованиеИСМПТ());
						ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				КодОшибки 	= ОтветСервера.Code;
				ТекстОшибки = ОтветСервера.errors;
				
				ТекстСообщения = НСтр("ru = 'Документ не был принят на сервере: '") + Символы.ПС + ТекстОшибки;
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
				ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомленияОПриемкеТоваровЕАЭСПослеОтправки");
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
					
			КонецЕсли;
				
			Если ДокументПринят Тогда 
				
				РезультатВыполнения = ПолучитьСтатусДокументаИмпортаТоваровЕАЭС(Новый Структура("Идентификатор", ИдентификаторНаСервере), СтруктурнаяЕдиница, ТокенАвторизации);
				СтатусДокумента = Неопределено;
				
				//Статус получить не удалось
				Если ЭтоОшибка(РезультатВыполнения, ИнформацияОбОшибке) Тогда
					ЗаполнитьОшибкиДокумента(РезультатОтправки.Ключ, ИнформацияОбОшибке.ПодробноеПредставление);
					ТекстСообщения = НСтр("ru = 'При получении информации об отправленном документе произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
					ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
					ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомленияОПриемкеТоваровЕАЭСПослеОтправки");
					ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				Иначе
					
					ЧтениеJSON = Новый ЧтениеJSON;
					ЧтениеJSON.УстановитьСтроку(РезультатВыполнения.ТекстОтвета);
					СтруктураСтатус = ПрочитатьJSON(ЧтениеJSON);
					
					//В структуре присутствует статус
					Если СтруктураСтатус.Свойство("status") Тогда
						СтатусДокумента = СтруктураСтатус.status;
						//Кроме статуса есть ошибки
						Если СтруктураСтатус.Свойство("documentErrors") Тогда 
							Для каждого СтрокаОшибки Из ОтветСервера.documentErrors Цикл
								КодОшибки 	= СтрокаОшибки.errorCode;
								ТекстОшибки = СтрокаОшибки.errorDescription;
								ЕстьОшибки = Истина;
								ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + ТекстОшибки;
								ЗаполнитьОшибкиДокумента(РезультатОтправки.Ключ, ТекстОшибки);
							КонецЦикла;
						КонецЕсли;
					Иначе
						
						КодОшибки 	= ОтветСервера.Code;
						ТекстОшибки = ОтветСервера.description;
						
						ТекстОшибки = КодОшибки + " - " + ТекстОшибки;
						
						ТекстСообщения = НСтр("ru = 'При получении информации сервер вернул ошибку: '") + Символы.ПС + ТекстОшибки;
						ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
						ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
						ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомленияОПриемкеТоваровЕАЭСПослеОтправки");
						ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
						
					КонецЕсли;
					
				КонецЕсли;
				
				Попытка
					ДокументОбъект = РезультатОтправки.Ключ.ПолучитьОбъект();
					Если ЗначениеЗаполнено(ИдентификаторНаСервере) Тогда
						ДокументОбъект.Идентификатор = ИдентификаторНаСервере;
					КонецЕсли;
					Статус = ПолучитьСтатусДокументаУведомленияПоКоду(СтатусДокумента);  //Перечисления.СтатусыДокументовИСМПТК.Проверяется
					Если Статус <> Неопределено Тогда
						ДокументОбъект.Статус = Статус;
					КонецЕсли;
					ДокументОбъект.Записать();
				Исключение
					//ОписаниеОшибки()
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////

#КонецОбласти

#Область ОбновитьИСМПТ

Процедура ОбновитьДокументыИзИСМПТ(Знач Параметры, Знач ДанныеПрофилей, СписокТокеновАвторизации) Экспорт
		
	Для Каждого СгруппированныеАкты Из Параметры.КоллекцияСгруппированныхДокументовИСМПТ Цикл
		
		ТокенАвторизации = СписокТокеновАвторизации.Получить(СгруппированныеАкты.Ключ);
		СтруктурнаяЕдиница = СгруппированныеАкты.Ключ;
		СгруппированныйМассивДокументов = СгруппированныеАкты.Значение;
		
		ТолькоОбновитьСтатус = Ложь;
		Параметры.Свойство("ТолькоОбновитьСтатус", ТолькоОбновитьСтатус);
		
		Если ТолькоОбновитьСтатус Тогда
			Если Параметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК()
				Или Параметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОРасхожденииИСМПТК()
				Или Параметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСМПТК() 
				ИЛИ Параметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСМПТК() Тогда
				
				ОбновитьСтатусыДокументовПередачи(СгруппированныйМассивДокументов, СтруктурнаяЕдиница, Параметры.ТипДокументаИСМПТ, ТокенАвторизации);
				
			ИначеЕсли Параметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСМПТК()
				ИЛИ Параметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСМПТК()  Тогда
				
				ОбновитьСтатусыУведомлениеОВводеВыводе(СгруппированныйМассивДокументов, Параметры.ТипДокументаИСМПТ, СтруктурнаяЕдиница, ТокенАвторизации);
				
			ИначеЕсли Параметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОбЭкспортеЕАЭСИСМПТК() Тогда
				
				ОбновитьУведомлениеОбЭкспортеЕАЭС(СгруппированныйМассивДокументов, СтруктурнаяЕдиница, ТокенАвторизации);
				
			ИначеЕсли Параметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОПриемкеЕАЭСИСМПТК() Тогда
				
				ОбновитьУведомлениеОПриемкеЕАЭС(СгруппированныйМассивДокументов, СтруктурнаяЕдиница, ТокенАвторизации);
				
			ИначеЕсли Параметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОбОтгрузкеЕАЭСИСМПТК() Тогда
				
				ОбновитьУведомлениеОбОтгрузкеЕАЭС(СгруппированныйМассивДокументов, СтруктурнаяЕдиница, ТокенАвторизации);
				
			КонецЕсли;
		Иначе
			Если Параметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК() Тогда
				
				ОбновитьАктыПП(СгруппированныйМассивДокументов, СтруктурнаяЕдиница, ТокенАвторизации);
				
			ИначеЕсли Параметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОРасхожденииИСМПТК() Тогда
				
				ОбновитьУведомлениеПоИдентификатору(СгруппированныйМассивДокументов, СтруктурнаяЕдиница, ТокенАвторизации);
				
			ИначеЕсли Параметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСМПТК() ИЛИ Параметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСМПТК() Тогда
				
				ОбновитьУведомлениеОВводеВыводе(СгруппированныйМассивДокументов, Параметры.ТипДокументаИСМПТ, СтруктурнаяЕдиница, ТокенАвторизации);
				
			ИначеЕсли Параметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСМПТК() Тогда
				
				ОбновитьУведомлениеОВвозеИзЕАЭС(СгруппированныйМассивДокументов, СтруктурнаяЕдиница, ТокенАвторизации);
				
			ИначеЕсли Параметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСМПТК() Тогда
				
				ОбновитьУведомлениеОВвозеИзТретьихСтран(СгруппированныйМассивДокументов, СтруктурнаяЕдиница, ТокенАвторизации);
				
			ИначеЕсли Параметры.ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОбЭкспортеЕАЭСИСМПТК() Тогда
				
				ОбновитьУведомлениеОбЭкспортеЕАЭС(СгруппированныйМассивДокументов, СтруктурнаяЕдиница, ТокенАвторизации);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

Процедура ОбновитьСтатусыДокументовПередачи(Знач МассивДокументов, ДанныеПрофилей, ТипДокументаИСМПТ, ТокенАвторизации) Экспорт
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Идентификатор КАК Идентификатор,
	|	Док.Направление КАК Направление
	|ИЗ
	|	Документ." + ТипДокументаИСМПТ + " КАК Док
	|ГДЕ
	|	Док.Ссылка В(&МассивДокументов)
	|	И НЕ Док.Идентификатор = """"
	|ИТОГИ ПО
	|	Направление";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	ВыборкаНаправление = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНаправление.Следующий() Цикл
		
		ПараметрыЗапроса = Новый Структура;
		
		Исходящий = ВыборкаНаправление.Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий;
		Исходящий = ?(ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОРасхожденииИСМПТК(), Не Исходящий, Исходящий);
		
		Если Исходящий Тогда
			РезультатВыполненияНаСервере = ПолучитьСписокИсходящихДокументов(ПараметрыЗапроса, ДанныеПрофилей, ТокенАвторизации);
		Иначе
			РезультатВыполненияНаСервере = ПолучитьСписокВходящихДокументов(ПараметрыЗапроса,  ДанныеПрофилей, ТокенАвторизации);
		КонецЕсли;
		
		ИнформацияОбОшибке = Неопределено;
		Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриПолученииДанныхССервера() + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
			ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьСтатусыДокументовПередачи");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(РезультатВыполненияНаСервере.ТекстОтвета);
		РезультатЗапроса = ПрочитатьJSON(ЧтениеJSON);
		
		Выборка = ВыборкаНаправление.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
				//ошибка, в документе нет идентификатора
				Продолжить;
			КонецЕсли;
			
			ДополнительныеДанные = НайтиДополнительныеДанныеПоИдентификатору(РезультатЗапроса, Выборка.Идентификатор);
			
			Если ЗначениеЗаполнено(ДополнительныеДанные) Тогда
				
				Статус = ПолучитьСтатусДокументаПоКоду(ДополнительныеДанные.Статус);
				Если Статус <> Неопределено Тогда
					
					ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
					ДокументОбъект.Статус 		= Статус;
					ДокументОбъект.НомерИСМПТ 	= ДополнительныеДанные.НомерИСМПТ;
					ДокументОбъект.ДатаВИСМПТ 	= ДополнительныеДанные.ДатаВИСМПТ;
					
					//Очистим таблицу ошибок, документ получен в базе и его статус успешно обновлён
					ДокументОбъект.Ошибки.Очистить();
					
					Попытка
						//провести документы Акт ПП
						ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					Исключение
						
						ОтменитьТранзакцию();
						ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
						ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
						ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьСтатусыДокументовПередачи");
						ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
						
						ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						
					КонецПопытки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСтатусыУведомлениеОВводеВыводе(Знач МассивДокументов, ТипДокумента, ДанныеПрофилей, ТокенАвторизации) Экспорт
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Уведомление.Ссылка КАК Ссылка,
	|	Уведомление.Идентификатор КАК Идентификатор,
	|	Уведомление.НомерИСМПТ КАК НомерИСМПТ
	|ИЗ
	|	Документ.%ТипДокумента% КАК Уведомление
	|ГДЕ
	|	Уведомление.Ссылка В(&МассивДокументов)
	|	И НЕ Уведомление.Идентификатор = """"";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТипДокумента%", ТипДокумента);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
			//документы без идентификаторов не обрабатываются
			Продолжить;
		КонецЕсли;
		
		ПараметрыДокумента = Новый Структура;
		
		ПараметрыДокумента.Вставить("Идентификатор", Выборка.Идентификатор);
		РезультатВыполненияНаСервере = ПолучитьУведомленияВводаВывода(ПараметрыДокумента, ДанныеПрофилей, ТокенАвторизации);
		
		ИнформацияОбОшибке = Неопределено;
		Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
			ЗаполнитьОшибкиДокумента(Выборка.Ссылка, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОбновленииДокументаССервера() + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
			ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьСтатусыУведомлениеОВводеВыводе");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
			Возврат;
		Иначе
			//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
			ОчиститьОшибкиДокумента(Выборка.Ссылка);
		КонецЕсли;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(РезультатВыполненияНаСервере.ТекстОтвета);
		ОтветСервера    = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON);
		СтатусДокумента = ПолучитьСтатусДокументаУведомленияПоКоду(ОтветСервера.status);
		
		Если СтатусДокумента <> Неопределено Тогда
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Статус 		= СтатусДокумента;
			ДокументОбъект.НомерИСМПТ 	= ОтветСервера.number;
			ДокументОбъект.ДатаВИСМПТ 	= ПрочитатьДатуJSON(ОтветСервера.docDate, ФорматДатыJSON.ISO);

			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				
				ОтменитьТранзакцию();
				ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				
				ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
				ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьСтатусыУведомлениеОВводеВыводе");
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
				
				ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьУведомлениеОбЭкспортеЕАЭС(Знач МассивДокументов, ДанныеПрофилей, ТокенАвторизации) Экспорт
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Уведомление.Ссылка КАК Ссылка,
	|	Уведомление.Идентификатор КАК Идентификатор
	|ИЗ
	|	Документ.УведомлениеОбЭкспортеЕАЭСИСМПТК КАК Уведомление
	|ГДЕ
	|	Уведомление.Ссылка В(&МассивДокументов)
	|	И НЕ Уведомление.Идентификатор = """"
	|";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
			//ошибка, в документе нет идентификатора
			Продолжить;
		КонецЕсли;
		
		ПараметрыДокумента = Новый Структура;
		ПараметрыДокумента.Вставить("Идентификатор",Выборка.Идентификатор);
		РезультатВыполненияНаСервере = ПолучитьСтатусУведомленияОбЭкспортеЕАЭС(ПараметрыДокумента, ДанныеПрофилей, ТокенАвторизации);
		
		//в зависимости от статуса обновляем статус в базе и при необходимости стираем/добавляем информацию об ошибках
		ОбновитьУведомлениеОбЭкспортеЕАЭСПоДаннымСервера(РезультатВыполненияНаСервере, Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

//Обновляет документ Уведомление об экспорте в ЕАЭС по данным сервера
Процедура ОбновитьУведомлениеОбЭкспортеЕАЭСПоДаннымСервера(РезультатВыполненияНаСервере, УведомлениеСсылка, ДополнительныеДанные = Неопределено)
	
	ИнформацияОбОшибке = Неопределено;
	Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
		ЗаполнитьОшибкиДокумента(УведомлениеСсылка, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОбновленииДокументаССервера() + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомлениеОбЭкспортеЕАЭСПоДаннымСервера");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
		Возврат;
	Иначе
		//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
		ОчиститьОшибкиДокумента(УведомлениеСсылка);	
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(РезультатВыполненияНаСервере.ТекстОтвета);
		ОтветСервера   = ПрочитатьJSON(ЧтениеJSON);
		ДокументОбъект = УведомлениеСсылка.ПолучитьОбъект();
		НовыйСтатус    = Неопределено;
		НеобходимаЗаписьДокумента = Ложь;
		//Статус обработки документа в ИС МПТ со значениями:
		//- CHECKING -Проверяется 
		//- SENT -Отправлен в ГИС МТ
		//- WAITING_ACCEPTANCE - ожидает подтверждения
		//- ACCEPTED - Принят.
		//- ERROR – Обработкадокумента выполненас ошибкой. Конечный статус
		Если ОтветСервера.status = "CHECKING" Тогда
			//проверяется
			НовыйСтатус = Перечисления.СтатусыДокументовИСМПТК.Проверяется;
		ИначеЕсли ОтветСервера.status = "SENT" Тогда
			//успешно отправлен
			НовыйСтатус = Перечисления.СтатусыДокументовИСМПТК.Отправлен;
		ИначеЕсли ОтветСервера.status = "WAITING_ACCEPTANCE" Тогда
			//успешно отправлен
			НовыйСтатус = Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку;
		ИначеЕсли ОтветСервера.status = "ACCEPTED" Тогда
			//успешно отправлен
			НовыйСтатус = Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден;
		ИначеЕсли ОтветСервера.status = "ERROR" Тогда
			//выполнено с ошибкой, прочитать ошибки
			НовыйСтатус = Перечисления.СтатусыДокументовИСМПТК.Ошибка;
			ДокументОбъект.Ошибки.Очистить();
			Для каждого Ошибка Из ОтветСервера.errors Цикл
				КодОшибки    = Ошибка.errorCode;
				ТекстОшибки  = СокрЛП(Ошибка.errorMessage);
				ОшибкиСтрока = ДокументОбъект.Ошибки.Добавить();
				ОшибкиСтрока.Текст = СтрШаблон(НСтр("ru = 'Код ошибки %1: %2'"), КодОшибки, ТекстОшибки);
			КонецЦикла;
			НеобходимаЗаписьДокумента = Истина;
		КонецЕсли;
		
		Если НовыйСтатус <> ДокументОбъект.Статус ИЛИ НеобходимаЗаписьДокумента Тогда
			//провести документы
			ДокументОбъект.Статус = НовыйСтатус;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомлениеОбЭкспортеЕАЭСПоДаннымСервера");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьУведомлениеОПриемкеЕАЭС (Знач МассивДокументов, ДанныеПрофилей, ТокенАвторизации) Экспорт
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Уведомление.Ссылка КАК Ссылка,
	|	Уведомление.Идентификатор КАК Идентификатор
	|ИЗ
	|	Документ.УведомлениеОПриемкеЕАЭСИСМПТК КАК Уведомление
	|ГДЕ
	|	Уведомление.Ссылка В(&МассивДокументов)
	|	И НЕ Уведомление.Идентификатор = """"
	|";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
			//ошибка, в документе нет идентификатора
			Продолжить;
		КонецЕсли;
		
		ПараметрыДокумента = Новый Структура;
		ПараметрыДокумента.Вставить("Идентификатор",Выборка.Идентификатор);
		РезультатВыполненияНаСервере = ПолучитьСтатусДокументаИмпортаТоваровЕАЭС(ПараметрыДокумента, ДанныеПрофилей, ТокенАвторизации);
		
		//в зависимости от статуса обновляем статус в базе и при необходимости стираем/добавляем информацию об ошибках
		ОбновитьУведомлениеОПриемкеЕАЭСПоДаннымСервера(РезультатВыполненияНаСервере, Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

//Обновляет документ Уведомление об приемки в ЕАЭС по данным сервера
Процедура ОбновитьУведомлениеОПриемкеЕАЭСПоДаннымСервера(РезультатВыполненияНаСервере, УведомлениеСсылка, ДополнительныеДанные = Неопределено)
	
	ИнформацияОбОшибке = Неопределено;
	Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
		ЗаполнитьОшибкиДокумента(УведомлениеСсылка, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОбновленииДокументаССервера() + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомлениеОПриемкеЕАЭСПоДаннымСервера");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,	ТекстСообщения);
		Возврат;
	Иначе
		//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
		ОчиститьОшибкиДокумента(УведомлениеСсылка);	
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(РезультатВыполненияНаСервере.ТекстОтвета);
		СтруктураСтатус = ПрочитатьJSON(ЧтениеJSON);
		
		//В структуре присутствует статус
		Если СтруктураСтатус.Свойство("status") Тогда
			СтатусДокумента = СтруктураСтатус.status;
			//Кроме статуса есть ошибки
			Если СтруктураСтатус.Свойство("documentErrors") Тогда 
				Для каждого СтрокаОшибки Из СтруктураСтатус.documentErrors Цикл
					КодОшибки 	= СтрокаОшибки.errorCode;
					ТекстОшибки = СтрокаОшибки.errorDescription;
					ЕстьОшибки = Истина;
					ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + ТекстОшибки;
					ЗаполнитьОшибкиДокумента(УведомлениеСсылка, ТекстОшибки);
				КонецЦикла;
			КонецЕсли;
			
			ДокументОбъект = УведомлениеСсылка.ПолучитьОбъект();
			СтатусДокумента = ПолучитьСтатусДокументаУведомленияПоКоду(СтатусДокумента);
			
			Если СтатусДокумента <> ДокументОбъект.Статус Тогда
				//провести документы
				ДокументОбъект.Статус = СтатусДокумента;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
		Иначе
			
			КодОшибки 	= СтруктураСтатус.Code;
			ТекстОшибки = СтруктураСтатус.description;
			
			ТекстОшибки = КодОшибки + " - " + ТекстОшибки;
			
			ТекстСообщения = НСтр("ru = 'При получении информации сервер вернул ошибку: '") + Символы.ПС + ТекстОшибки;
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
			ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
			ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомлениеОПриемкеЕАЭСПоДаннымСервера");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомлениеОПриемкеЕАЭСПоДаннымСервера");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,	ТекстСообщения);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьУведомлениеОбОтгрузкеЕАЭС (Знач МассивДокументов, ДанныеПрофилей, ТокенАвторизации) Экспорт
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Уведомление.Ссылка КАК Ссылка,
	|	Уведомление.Идентификатор КАК Идентификатор
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеЕАЭСИСМПТК КАК Уведомление
	|ГДЕ
	|	Уведомление.Ссылка В(&МассивДокументов)
	|	И НЕ Уведомление.Идентификатор = """"
	|";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
			//ошибка, в документе нет идентификатора
			Продолжить;
		КонецЕсли;
		
		ДокументСервера = ПолучитьУведомлениеОбОтгрузкеЕАЭС(ДанныеПрофилей, Выборка.Идентификатор, ТокенАвторизации);
		ДокументОбъект = СоздатьОбновитьУведомлениеОбОтгрузкеЕАЭС(ДокументСервера, Выборка.Идентификатор, Выборка.Ссылка.ПолучитьОбъект());
		
		Попытка
			ДокументОбъект.Записать();
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОбновленииДокументаССервера()
						   + Символы.ПС
						   + ПодробноеПредставлениеОшибки;
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбновитьАктыПП(Знач МассивДокументов,Знач ДанныеПрофилей, ТокенАвторизации) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ОбновитьАктыПППоИдентификатору(МассивДокументов, ДанныеПрофилей, ТокенАвторизации);
		ЗафиксироватьТранзакцию();
		
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
	КонецПопытки;
	
КонецФункции

Процедура ОбновитьАктыПППоИдентификатору(Знач МассивДокументов, ДанныеПрофилей, ТокенАвторизации) Экспорт
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АктПП.Ссылка КАК Ссылка,
	|	АктПП.Идентификатор КАК Идентификатор,
	|	АктПП.Направление КАК Направление,
	|	АктПП.НомерИСМПТ КАК НомерИСМПТ,
	|	АктПП.ТипАкта КАК ТипАкта
	|ИЗ
	|	Документ.АктПриемаПередачиИСМПТК КАК АктПП
	|ГДЕ
	|	АктПП.Ссылка В(&МассивДокументов)
	|	И НЕ АктПП.Идентификатор = """"
	|ИТОГИ ПО
	|	Направление";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	ВыборкаНаправление = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНаправление.Следующий() Цикл
		
		Выборка = ВыборкаНаправление.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
				//ошибка, в документе нет идентификатора
				Продолжить;
			КонецЕсли;
			
			ПараметрыДокумента = Новый Структура;
			ПараметрыДокумента.Вставить("Исходящий", ?(Выборка.Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий, Истина, Ложь));
			ПараметрыДокумента.Вставить("Идентификатор",Выборка.Идентификатор);
			РезультатВыполненияНаСервере = ПолучитьДокументСервера(ПараметрыДокумента, ДанныеПрофилей, ТокенАвторизации);
			ДополнительныеДанные = ПолучитьДополнительныеДанныеПоИдентификатору(Выборка.Идентификатор, ДанныеПрофилей, ДанныеПрофилей, ПараметрыДокумента.Исходящий, ТокенАвторизации);
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			КопияДокумента = ДокументОбъект.Скопировать();
			Если КопияДокумента.Марки.Количество() = 0 Тогда
				КопияДокумента.Марки.Загрузить(ДокументОбъект.Марки.Выгрузить());
			КонецЕсли;
			МассивСтарыхДокументов = Новый Массив;
			ИсходныйНовый = Новый Структура;
			ИсходныйНовый.Вставить("ИсходныйОбъект", КопияДокумента);
			ИсходныйНовый.Вставить("ОбновленныйОбъект", ДокументОбъект);
			МассивСтарыхДокументов.Добавить(ИсходныйНовый);
			
			ОбновитьАктПоДаннымСервера(РезультатВыполненияНаСервере, Выборка.Ссылка, ДополнительныеДанные);
			ИнтерфейсИСМПТК.ВосстановитьСсылочныеРеквизитыДокументов(МассивСтарыхДокументов);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьУведомлениеПоИдентификатору(Знач МассивДокументов, ДанныеПрофилей, ТокенАвторизации) Экспорт
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УОР.Ссылка КАК Ссылка,
	|	УОР.Идентификатор КАК Идентификатор,
	|	УОР.Направление КАК Направление,
	|	УОР.НомерИСМПТ КАК НомерИСМПТ
	|ИЗ
	|	Документ.УведомлениеОРасхожденииИСМПТК КАК УОР
	|ГДЕ
	|	УОР.Ссылка В(&МассивДокументов)
	|	И НЕ УОР.Идентификатор = """"
	|ИТОГИ ПО
	|	Направление";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	ВыборкаНаправление = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНаправление.Следующий() Цикл
		
		Выборка = ВыборкаНаправление.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
				//ошибка, в документе нет идентификатора
				Продолжить;
			КонецЕсли;
			
			ПараметрыДокумента = Новый Структура;
			ПараметрыДокумента.Вставить("Исходящий", ?(Выборка.Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий, Истина, Ложь));
			
			ПараметрыДокумента.Вставить("Идентификатор", Выборка.Идентификатор);
			РезультатВыполненияНаСервере = ПолучитьДокументСервера(ПараметрыДокумента, ДанныеПрофилей, ТокенАвторизации);
			ДополнительныеДанные = ПолучитьДополнительныеДанныеПоИдентификатору(Выборка.Идентификатор, ДанныеПрофилей, ДанныеПрофилей, НЕ ПараметрыДокумента.Исходящий, ТокенАвторизации);
			ОбновитьУведомлениеПоДаннымСервера(РезультатВыполненияНаСервере, Выборка.Ссылка, ДополнительныеДанные);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

//Обновляет документ Акт приема-передачи по данным сервера
Процедура ОбновитьАктПоДаннымСервера(РезультатВыполненияНаСервере, АктСсылка, ДополнительныеДанные, Успешно = Ложь)
	
	ИнформацияОбОшибке = Неопределено;
	Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
		ЗаполнитьОшибкиДокумента(АктСсылка, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОбновленииДокументаССервера() + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьАктПоДаннымСервера");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
		Возврат;
	Иначе
		//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
		ОчиститьОшибкиДокумента(АктСсылка);	
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		ДвоичныеДанныеXML = Base64Значение(РезультатВыполненияНаСервере.ТекстОтвета);
		СтрокаXML 		  = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеXML, КодировкаТекста.UTF8);
		
		Фабрика   = Фабрика_XML_API("СхемаАПП_XML_API_ИСМПТК");
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
		ОбъектXDTO   = Фабрика.ПрочитатьXML(ЧтениеXML);
		ДокументXDTO = ОбъектXDTO.document;
		//correctionFlag - Признак исправленного Акта
		//mainInfo
		//consigneeInfo
		//consigneeIdentificationCode ИИН/БИН получателя
		//consigneeName Наименование получателя
		//originalDocInfo Реквизиты бумажного документа
		//docDate Дата первичного документа
		//docNumber Номер первичного документа
		//supplierInfo
		//supplierIdentificationCode ИИН/БИН отправителя
		//supplierName Наименование отправителя
		//operationType Тип операции:1 - Реализация; 2 - Комиссия/агентская торговля
		//productList 
		//iCode Код идентификации
		//count Количество потребительских упаковок.
		//productTotals
		//gtin GTIN товаров
		//count Количество потребительских упаковок в GTIN
		
		//заполнить документ по данным сервера
		ДокументОбъект = АктСсылка.ПолучитьОбъект();
		ИсходныйДокумент = ДокументОбъект.Скопировать();
		Если ИсходныйДокумент.Марки.Количество() = 0 Тогда
			ИсходныйДокумент.Марки.Загрузить(ДокументОбъект.Марки.Выгрузить());
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДополнительныеДанные) Тогда
			ЗаполнитьЗначенияСвойств(ДокументОбъект, ДополнительныеДанные, "НомерИСМПТ, ДатаВИСМПТ");
			Статус = ПолучитьСтатусДокументаПоКоду(ДополнительныеДанные.Статус);
			Если Статус <> Неопределено Тогда
				ДокументОбъект.Статус = Статус;
			КонецЕсли;
		КонецЕсли;
		
		Если ДокументXDTO.operationType = "1" Тогда
			ДокументОбъект.ВидОперации = Перечисления.ХозяйственныеОперацииИСМПТК.Реализация;
		ИначеЕсли ДокументXDTO.operationType = "2" Тогда
			ДокументОбъект.ВидОперации = Перечисления.ХозяйственныеОперацииИСМПТК.КомиссияИАгентскаяТорговля;
		КонецЕсли;
		
		ДокументОбъект.ТипАкта = ?(ДокументXDTO.correctionFlag = "false", Перечисления.ВидыДокументаИСМПТК.Исходный, Перечисления.ВидыДокументаИСМПТК.Исправленный);
		
		Если ДокументОбъект.ТипАкта = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исправленный") Тогда
			ДокументОбъект.ЭтоКорректировка = Истина;
		КонецЕсли;
		
		Если ДокументОбъект.ЭтоКорректировка Тогда
			Если Не ДокументXDTO.Свойства().Получить("regNumber") = Неопределено Тогда  
				НомерДокументаДляПоиска = ДокументXDTO.regNumber;
			Иначе
				НомерДокументаДляПоиска = ДокументОбъект.НомерИСМПТ;
			КонецЕсли;
			//Нужно найти ссылки на первичный Акт и УОР
			
			ПараметрыПоиска = Новый Структура("ИмяДокумента, ИмяПараметра, ВидДокумента",
											  ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК(),
											  "НомерИСМПТ",
											  Перечисления.ВидыДокументаИСМПТК.Исходный);
			СсылкаАПППервичный = РаботаСДокументамиИСМПТК.НайтиДокументИСПоНомеру(НомерДокументаДляПоиска, ПараметрыПоиска);
			Если Не СсылкаАПППервичный = Неопределено Тогда
				ДокументОбъект.ИдентификаторАПППервичный = ИнтеграцияИСМПТКПереопределяемый.ЗначениеРеквизитаОбъекта(
														   СсылкаАПППервичный, "Идентификатор"); 
				ДокументОбъект.ИдентификаторУведОРасхождениях = ИнтеграцияИСМПТКПереопределяемый.ЗначениеРеквизитаОбъекта(
														   СсылкаАПППервичный, "ИдентификаторУведОРасхождениях");
				ДокументОбъект.РегистрационныйНомерСвязанногоАкта = НомерДокументаДляПоиска;
			КонецЕсли;
		Иначе
			//проверяем наличие ссылок на связанные УОР и корректировочный Акт
			//Ищем АПП-корректировочный
			СтруктураПоискаДокумента = РаботаСДокументамиИСМПТК.ПолучитьПустуюСтруктураДляПоискаДокументаПоИдентификаторуОтОбратного();
			СтруктураПоискаДокумента.ИмяДокументаДляЗапроса = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК();
			СтруктураПоискаДокумента.ОтборПоВидуДокумента   = Истина;
			СтруктураПоискаДокумента.ВидДокументаДляЗапроса = ПредопределенноеЗначение("Перечисление.ВидыДокументаИСМПТК.Исправленный");
			СтруктураПоискаДокумента.НаправлениеДокументаДляЗапроса = ДокументОбъект.Направление;
			СтруктураПоискаДокумента.ИмяРеквизитаВидДокумента 	= "ТипАкта";
			СтруктураПоискаДокумента.ИмяРеквизитаИдентификатора = "ИдентификаторАПППервичный";
			СтруктураПоискаДокумента.ИдентификаторДокумента 	= ДокументОбъект.Идентификатор;
			
			СсылкаАППКорректировка = РаботаСДокументамиИСМПТК.НайтиСвязанныйДокументПоИдентификаторуОтОбратного(СтруктураПоискаДокумента);
			Если Не СсылкаАППКорректировка = Неопределено Тогда
				ДокументОбъект.ИдентификаторАППИсправленный = СсылкаАППКорректировка;
			КонецЕсли;
			
			СтруктураПоискаДокумента = РаботаСДокументамиИСМПТК.ПолучитьПустуюСтруктураДляПоискаДокументаПоИдентификаторуОтОбратного();
			СтруктураПоискаДокумента.ИмяДокументаДляЗапроса = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОРасхожденииИСМПТК();
			СтруктураПоискаДокумента.ОтборПоВидуДокумента 	= Ложь;
			СтруктураПоискаДокумента.ВидДокументаДляЗапроса = Неопределено;
			СтруктураПоискаДокумента.НаправлениеДокументаДляЗапроса = ?(ДокументОбъект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий"),
																		ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий"),
																		ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий"));
			СтруктураПоискаДокумента.ИмяРеквизитаВидДокумента 	= Неопределено;
			СтруктураПоискаДокумента.ИмяРеквизитаИдентификатора = "ИдентификаторАПППервичный";
			СтруктураПоискаДокумента.ИдентификаторДокумента 	= ДокументОбъект.Идентификатор;
			
			СсылкаУОР = РаботаСДокументамиИСМПТК.НайтиСвязанныйДокументПоИдентификаторуОтОбратного(СтруктураПоискаДокумента);
			Если Не СсылкаУОР = Неопределено Тогда
				ДокументОбъект.ИдентификаторУведОРасхождениях = СсылкаУОР;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ДокументXDTO.mainInfo.supplierInfo.Свойства().Получить("supplierName") = Неопределено Тогда
			ДокументОбъект.ПоставщикНаименование = ДокументXDTO.mainInfo.supplierInfo.supplierName;
		КонецЕсли;
		ДокументОбъект.ПоставщикИдентификационныйНомер = ДокументXDTO.mainInfo.supplierInfo.supplierIdentificationCode;
		
		Если Не ДокументXDTO.mainInfo.consigneeInfo.Свойства().Получить("consigneeName") = Неопределено Тогда
			ДокументОбъект.ПолучательНаименование = ДокументXDTO.mainInfo.consigneeInfo.consigneeName;
		КонецЕсли;
		ДокументОбъект.ПолучательИдентификационныйНомер = ДокументXDTO.mainInfo.consigneeInfo.consigneeIdentificationCode;
		
		Если Не ДокументXDTO.mainInfo.Свойства().Получить("originalDocInfo") = Неопределено Тогда
			ДокументОбъект.РегНомерНаБумажномНосителе    = ДокументXDTO.mainInfo.originalDocInfo.docNumber;
			ДокументОбъект.ДатаВыпискиНаБумажномНосителе = Дата(ДокументXDTO.mainInfo.originalDocInfo.docDate + " 00:00:00");
		КонецЕсли;
		
		ИдентификационныеНомераКонтрагентов		 = Новый Массив;
		ИдентификационныеНомераСтруктурныхЕдиниц = Новый Массив;	
		
		Если ЗначениеЗаполнено(ДокументОбъект.ПоставщикИдентификационныйНомер) Тогда
			ИдентификационныеНомераКонтрагентов.Добавить(ДокументОбъект.ПоставщикИдентификационныйНомер);
			ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(ДокументОбъект.ПоставщикИдентификационныйНомер);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОбъект.ПолучательИдентификационныйНомер) Тогда
			ИдентификационныеНомераКонтрагентов.Добавить(ДокументОбъект.ПолучательИдентификационныйНомер);
			ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(ДокументОбъект.ПолучательИдентификационныйНомер);
		КонецЕсли;
		
		СоответствияИдентификаторовИСсылок = РаботаСДокументамиИСМПТК.НайтиКонтрагентовИСтруктурныеЕдиницыПоИдентификационнымНомерам(ИдентификационныеНомераКонтрагентов, ИдентификационныеНомераСтруктурныхЕдиниц);
		
		// Заполнить ссылки на контрагентов. 
		СоответствияКонтрагентов = СоответствияИдентификаторовИСсылок.СоответствияКонтрагентов;
		Для Каждого ЭлементСоответствияКонтрагентов Из СоответствияКонтрагентов Цикл
			
			Идентификатор = ЭлементСоответствияКонтрагентов.Ключ;
			Контрагент 	  = ЭлементСоответствияКонтрагентов.Значение;
			
			Если ДокументОбъект.ПоставщикИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Поставщик = Контрагент;
			КонецЕсли;
			
			Если ДокументОбъект.ПолучательИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Получатель = Контрагент;
			КонецЕсли;
			
		КонецЦикла;
		
		// Заполнить ссылки на структурные единицы.
		СоответствияСтруктурныхЕдиниц = СоответствияИдентификаторовИСсылок.СоответствияСтруктурныхЕдиниц;
		Для Каждого ЭлементСоответствияСтруктурныхЕдиниц Из СоответствияСтруктурныхЕдиниц Цикл
			
			Идентификатор = ЭлементСоответствияСтруктурныхЕдиниц.Ключ;
			Контрагент	  = ЭлементСоответствияСтруктурныхЕдиниц.Значение;
			
			Если ДокументОбъект.ПоставщикИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Поставщик = Контрагент;
			КонецЕсли;
			
			Если ДокументОбъект.ПолучательИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Получатель = Контрагент;
			КонецЕсли;
			
		КонецЦикла;
		
		НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();
		
		Если ТипЗнч(ДокументXDTO.productList.iCode) = Тип("ОбъектXDTO") Тогда
			
			ДокументОбъект.Марки.Очистить();
			КодXDTO = ДокументXDTO.productList.iCode;
			НоваяСтрока = ДокументОбъект.Марки.Добавить();
			НоваяСтрока.КодИдентификации = КодXDTO.Последовательность().ПолучитьТекст(0);
			НоваяСтрока.Количество  = ?(КодXDTO.count = "0", 1, КодXDTO.count);
			
			ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(НоваяСтрока.КодИдентификации, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
			
			Если Не ДанныеРазбора = Неопределено Тогда
				
				НоваяСтрока.ВидУпаковки = ДанныеРазбора.ВидУпаковки;
				НайденнаяНоменклатура   = Неопределено;
				
				ЗаполнитьРеквизитыGTINПоДаннымРазбораКода(НоваяСтрока, ДанныеРазбора, НайденнаяНоменклатура);
				
				НоваяСтрока.Номенклатура = НайденнаяНоменклатура;
				
				Если Не НайденнаяНоменклатура = Неопределено
					И Не НайденнаяНоменклатура.Пустая() Тогда
					НоваяСтрока.ВидПродукции = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(НайденнаяНоменклатура);
				Иначе
					НоваяСтрока.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка");
				КонецЕсли;
			Иначе
				ТекстСообщения = НСтр("ru = 'Не удалось определить коды маркировки в документе %1! Возможно, документ содержит транспортные упаковки или КМ по товарной группе, учет которой не ведется.'");
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект.Ссылка); 
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
				ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьАктПоДаннымСервера");
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);	
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументXDTO.productList.iCode) = Тип("СписокXDTO") Тогда
			
			ДокументОбъект.Марки.Очистить();
			
			Для Каждого СтрокаXDTO Из ДокументXDTO.productList.iCode Цикл
				
				КодXDTO = СтрокаXDTO;
				НоваяСтрока = ДокументОбъект.Марки.Добавить();
				НоваяСтрока.КодИдентификации = КодXDTO.Последовательность().ПолучитьТекст(0);
				НоваяСтрока.Количество		 = ?(КодXDTO.count = "0", 1, КодXDTO.count);
				
				ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(НоваяСтрока.КодИдентификации, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
				
				Если Не ДанныеРазбора = Неопределено Тогда
					
					НоваяСтрока.ВидУпаковки = ДанныеРазбора.ВидУпаковки;
					НайденнаяНоменклатура   = Неопределено;
					
					ЗаполнитьРеквизитыGTINПоДаннымРазбораКода(НоваяСтрока, ДанныеРазбора, НайденнаяНоменклатура);
									
					Если Не НайденнаяНоменклатура = Неопределено
						И Не НайденнаяНоменклатура.Пустая() Тогда
						НоваяСтрока.ВидПродукции = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(НайденнаяНоменклатура);
					Иначе
						НоваяСтрока.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка");
					КонецЕсли;
				Иначе
					ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПредупреждениеПриРазбореВДокументеМожетБытьНеподходящаяПродукция();
					ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект.Ссылка); 
					ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
					ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьАктПоДаннымСервера");
					ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//Заполнить табличную часть Итоги
		Если ТипЗнч(ДокументXDTO.productTotals.gtin) = Тип("ОбъектXDTO") Тогда
			
			ДокументОбъект.Итоги.Очистить();
			КодXDTO 				= ДокументXDTO.productTotals.gtin;
			НоваяСтрока 			= ДокументОбъект.Итоги.Добавить();
			НоваяСтрока.GTIN 		= КодXDTO.Последовательность().ПолучитьТекст(0);
			НоваяСтрока.Количество 	= ?(КодXDTO.count = "0", 1, КодXDTO.count);
			
			КоллекцияСвойствИтоги = КодXDTO.Свойства();
			
			EAN 				= РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(НоваяСтрока.GTIN);
			ДанныеНоменклатуры 	= ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, EAN,,);
			
			НоваяСтрока.EAN = EAN;
			Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда 
				НоваяСтрока.Номенклатура 	= ДанныеНоменклатуры.Номенклатура;
				НоваяСтрока.Характеристика 	= ДанныеНоменклатуры.Характеристика;
				Если ДокументОбъект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") 
					И ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик") Тогда
					НоваяСтрока.КодТНВЭД 		= РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьКодТНВЭДПоНоменклатуре(НоваяСтрока.Номенклатура);
					НоваяСтрока.СтавкаНДС 		= ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьСтавкуНДСПоНоменклатуре(НоваяСтрока.Номенклатура);
				КонецЕсли;
			КонецЕсли;
			
			Если Не КоллекцияСвойствИтоги.Получить("tnved") = Неопределено Тогда 
				НоваяСтрока.КодТНВЭД = КодXDTO.tnved;
			КонецЕсли; 
			
			Если Не КоллекцияСвойствИтоги.Получить("unitPrice") = Неопределено Тогда 
				НоваяСтрока.Цена = Число(КодXDTO.unitPrice);
			КонецЕсли;
			
			Если Не КоллекцияСвойствИтоги.Получить("netAmount") = Неопределено Тогда 
				НоваяСтрока.СуммаБезНДС = Число(КодXDTO.netAmount);
			КонецЕсли;
			
			Если Не КоллекцияСвойствИтоги.Получить("vatRate") = Неопределено Тогда
				НоваяСтрока.СтавкаНДСЧисло = Число(КодXDTO.vatRate);
				НоваяСтрока.СтавкаНДС = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьСтавкуНДСПоЗначению(Число(КодXDTO.vatRate));
			КонецЕсли;
			
			Если Не КоллекцияСвойствИтоги.Получить("vatAmount") = Неопределено Тогда 
				НоваяСтрока.СуммаНДС = Число(КодXDTO.vatAmount);
			КонецЕсли;
			
			Если Не КоллекцияСвойствИтоги.Получить("TotalPrice") = Неопределено Тогда 
				НоваяСтрока.Сумма = Число(КодXDTO.TotalPrice);
			КонецЕсли;

		ИначеЕсли ТипЗнч(ДокументXDTO.productTotals.gtin) = Тип("СписокXDTO") Тогда
			
			ДокументОбъект.Итоги.Очистить();
			
			Для Каждого СтрокаXDTO Из ДокументXDTO.productTotals.gtin Цикл
				
				КодXDTO 				= СтрокаXDTO;
				НоваяСтрока 			= ДокументОбъект.Итоги.Добавить();
				НоваяСтрока.GTIN 		= КодXDTO.Последовательность().ПолучитьТекст(0);
				НоваяСтрока.Количество	= ?(КодXDTO.count = "0", 1, КодXDTO.count);
				
				КоллекцияСвойствИтоги = КодXDTO.Свойства();
				
				EAN 				= РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(НоваяСтрока.GTIN);
				ДанныеНоменклатуры 	= ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, EAN,,);
				
				НоваяСтрока.EAN = EAN;
				Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда 
					НоваяСтрока.Номенклатура 	= ДанныеНоменклатуры.Номенклатура;
					НоваяСтрока.Характеристика 	= ДанныеНоменклатуры.Характеристика;
					Если ДокументОбъект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") 
						И ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик") Тогда
						НоваяСтрока.КодТНВЭД 		= РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьКодТНВЭДПоНоменклатуре(НоваяСтрока.Номенклатура);
						НоваяСтрока.СтавкаНДС 		= ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьСтавкуНДСПоНоменклатуре(НоваяСтрока.Номенклатура);
					КонецЕсли;
				КонецЕсли;
				
				Если Не КоллекцияСвойствИтоги.Получить("tnved") = Неопределено Тогда 
					НоваяСтрока.КодТНВЭД = КодXDTO.tnved;
				КонецЕсли; 
				
				Если Не КоллекцияСвойствИтоги.Получить("unitPrice") = Неопределено Тогда 
					НоваяСтрока.Цена = Число(КодXDTO.unitPrice);
				КонецЕсли;
				
				Если Не КоллекцияСвойствИтоги.Получить("netAmount") = Неопределено Тогда 
					НоваяСтрока.СуммаБезНДС = Число(КодXDTO.netAmount);
				КонецЕсли;
				
				Если Не КоллекцияСвойствИтоги.Получить("vatRate") = Неопределено Тогда
					НоваяСтрока.СтавкаНДСЧисло = Число(КодXDTO.vatRate);
					НоваяСтрока.СтавкаНДС = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьСтавкуНДСПоЗначению(Число(КодXDTO.vatRate));
				КонецЕсли;
				
				Если Не КоллекцияСвойствИтоги.Получить("vatAmount") = Неопределено Тогда 
					НоваяСтрока.СуммаНДС = Число(КодXDTO.vatAmount);
				КонецЕсли;
				
				Если Не КоллекцияСвойствИтоги.Получить("TotalPrice") = Неопределено Тогда 
					НоваяСтрока.Сумма = Число(КодXDTO.TotalPrice);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		
		//табличная часть Товары
		ДокументОбъект.Товары.Очистить();
		ТоварыПоМаркам = ДокументОбъект.Марки.Выгрузить(,"Количество, Номенклатура, EAN, GTIN, GTINВерхнегоУровня, ВидПродукции");
		ТоварыПоМаркам.Свернуть("Номенклатура, EAN, GTIN, GTINВерхнегоУровня, ВидПродукции", "Количество");
		
		Для Каждого СтрокаТовары Из ТоварыПоМаркам Цикл
			
			НоваяСтрока = ДокументОбъект.Товары.Добавить();
			НоваяСтрока.Номенклатура 	   = СтрокаТовары.Номенклатура;
			НоваяСтрока.КоличествоИсточник = СтрокаТовары.Количество;
			НоваяСтрока.GTIN			   = СтрокаТовары.GTIN;
			НоваяСтрока.EAN 			   = СтрокаТовары.EAN;
			НоваяСтрока.ВидПродукции 	   = СтрокаТовары.ВидПродукции;
			НоваяСтрока.ЕдиницаИзмерения   = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьЕдиницуИзмерения(НоваяСтрока.Номенклатура);
			
		КонецЦикла;
		
		Если ДокументОбъект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") Тогда
			ДокументОбъект.Контрагент = ДокументОбъект.Поставщик;
		Иначе
			ДокументОбъект.Контрагент = ДокументОбъект.Получатель;
		КонецЕсли;
		
		
		//Заполним ВидПродукции у входящего документа
		Если ДокументОбъект.Направление = Перечисления.НаправленияДокументовИСМПТК.Входящий 
			И Не ЗначениеЗаполнено(ДокументОбъект.ТоварнаяГруппа)
			И Не ДокументОбъект.Итоги.Количество() = 0
			И Не РезультатВыполненияНаСервере.Свойство("ТокенАвторизации") = Неопределено Тогда
			
			ПерваяСтрока = ДокументОбъект.Итоги[0];
			
			ОтветПоGTIN = ПолучитьДанныеПоGTIN(ПерваяСтрока.GTIN, РезультатВыполненияНаСервере.СтруктурнаяЕдиница, РезультатВыполненияНаСервере.ТокенАвторизации);
			
			ИнформацияОбОшибке = Неопределено;
			Если ЭтоОшибка(ОтветПоGTIN, ИнформацияОбОшибке) Тогда
				ТекстСообщения = НСтр("ru = 'При получении информации по Виду продукции с сервера произошла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
				ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
				ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьАктПоДаннымСервера");
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
				Возврат;
			Иначе
				
				СтрокаОтвета = ОтветПоGTIN.ТекстОтвета;
				СтрокаОтвета = СтрЗаменить(СтрокаОтвета, "tg-id", "tg_id");
				СтрокаОтвета = СтрЗаменить(СтрокаОтвета, "tg-name", "tg_name");
				СтрокаОтвета = СтрЗаменить(СтрокаОтвета, "error-code", "error_code");
				СтрокаОтвета = СтрЗаменить(СтрокаОтвета, "error-msg", "error_msg");
				
				Попытка
					ЧтениеJSON = Новый ЧтениеJSON;
					ЧтениеJSON.УстановитьСтроку(СтрокаОтвета);
					РезультатЗапроса = ПрочитатьJSON(ЧтениеJSON); 
					
					ДокументОбъект.ТоварнаяГруппа = ПолучитьЗначениеВидаПродукцииПоСоответствию(РезультатЗапроса[0].tg_name);
				Исключение
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
		
		
		//провести документы Акт ПП
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		ЗафиксироватьТранзакцию();
		Успешно = Истина;
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьАктПоДаннымСервера");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

//Обновляет документы Уведомление о расхождении
Процедура ОбновитьУведомлениеПоДаннымСервера(РезультатВыполненияНаСервере, УведомлениеСсылка, ДополнительныеДанные, Успешно = Ложь)
	
	ИнформацияОбОшибке = Неопределено;
	
	Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
		ЗаполнитьОшибкиДокумента(УведомлениеСсылка, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОбновленииДокументаССервера() + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомлениеПоДаннымСервера");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
		Возврат;
	Иначе
		//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
		ОчиститьОшибкиДокумента(УведомлениеСсылка);		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		ДвоичныеДанныеXML = Base64Значение(РезультатВыполненияНаСервере.ТекстОтвета);
		СтрокаXML = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеXML, КодировкаТекста.UTF8);
		
		Фабрика = Фабрика_XML_API("СхемаУОР_XML_API_ИСМПТК");
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
		ОбъектXDTO = Фабрика.ПрочитатьXML(ЧтениеXML);
		ДокументXDTO = ОбъектXDTO.document;
		//correctionDocId - Признак исправленного Акта
		//mainInfo
		//consigneeInfo
		//consigneeIdentificationCode ИИН/БИН получателя
		//consigneeName Наименование получателя
		//originalDocInfo Реквизиты бумажного документа
		//docDate Дата первичного документа
		//docNumber Номер первичного документа
		//supplierInfo
		//supplierIdentificationCode ИИН/БИН отправителя
		//supplierName Наименование отправителя
		//operationType Тип операции:1 - Реализация; 2 - Комиссия/агентская торговля
		//productList 
		//iCode Код идентификации
		//count Количество потребительских упаковок.
		//reviseStatusCode Статус сверки Кода
		
		//заполнить документ по данным сервера
		ДокументОбъект = УведомлениеСсылка.ПолучитьОбъект();
		ИсходныйДокумент = ДокументОбъект.Скопировать();
		
		Если ИсходныйДокумент.Марки.Количество() = 0 Тогда
			ИсходныйДокумент.Марки.Загрузить(ДокументОбъект.Марки.Выгрузить());
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДополнительныеДанные) Тогда
			
			ЗаполнитьЗначенияСвойств(ДокументОбъект, ДополнительныеДанные, "НомерИСМПТ, ДатаВИСМПТ");
			Статус = ПолучитьСтатусДокументаПоКоду(ДополнительныеДанные.Статус);
			
			Если Статус <> Неопределено Тогда
				ДокументОбъект.Статус = Статус;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДокументXDTO.Свойства().Получить("correctionDocId") <> Неопределено Тогда
			СсылкаАПППервичный = РаботаСДокументамиИСМПТК.НайтиДокументПоИдентификаторуДляУстановкиСвязи(
								 ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК(), ДокументXDTO.correctionDocId);
			Если Не СсылкаАПППервичный = Неопределено Тогда
				ДокументОбъект.РегистрационныйНомерСвязанногоАкта = ИнтеграцияИСМПТКПереопределяемый.ЗначениеРеквизитаОбъекта(СсылкаАПППервичный, "НомерИСМПТ");
				ДокументОбъект.ИдентификаторАПППервичный = ИнтеграцияИСМПТКПереопределяемый.ЗначениеРеквизитаОбъекта(СсылкаАПППервичный, "Идентификатор");
				ДокументОбъект.ВидОперации = ИнтеграцияИСМПТКПереопределяемый.ЗначениеРеквизитаОбъекта(СсылкаАПППервичный, "ВидОперации");
			КонецЕсли;
		КонецЕсли;
		
		Если ДокументОбъект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") Тогда
		
		Если ДокументXDTO.Свойства().Получить("operationType") <> Неопределено Тогда
			Если ДокументXDTO.operationType = "1" Тогда
				ДокументОбъект.ВидОперации = Перечисления.ХозяйственныеОперацииИСМПТК.Реализация;
			ИначеЕсли ДокументXDTO.operationType = "2" Тогда
				ДокументОбъект.ВидОперации = Перечисления.ХозяйственныеОперацииИСМПТК.КомиссияИАгентскаяТорговля;
			КонецЕсли;
		КонецЕсли;
		
		//если в данных нет информации о виде операции, то заполняем по умолчанию значением Реализация
		Если Не ЗначениеЗаполнено(ДокументОбъект.ВидОперации) Тогда
			ДокументОбъект.ВидОперации = Перечисления.ХозяйственныеОперацииИСМПТК.Реализация;
		КонецЕсли;
		
		Если Не ДокументXDTO.mainInfo.supplierInfo.Свойства().Получить("supplierName") = Неопределено Тогда
			ДокументОбъект.ПоставщикНаименование = ДокументXDTO.mainInfo.supplierInfo.supplierName;
		КонецЕсли;
		ДокументОбъект.ПоставщикИдентификационныйНомер = ДокументXDTO.mainInfo.supplierInfo.supplierIdentificationCode;
		
		
		Если Не ДокументXDTO.mainInfo.consigneeInfo.Свойства().Получить("consigneeName") = Неопределено Тогда
			ДокументОбъект.ПолучательНаименование = ДокументXDTO.mainInfo.consigneeInfo.consigneeName;
		КонецЕсли;
		ДокументОбъект.ПолучательИдентификационныйНомер = ДокументXDTO.mainInfo.consigneeInfo.consigneeIdentificationCode;
		
		ИдентификационныеНомераКонтрагентов 	 = Новый Массив;
		ИдентификационныеНомераСтруктурныхЕдиниц = Новый Массив;	
		
		Если ЗначениеЗаполнено(ДокументОбъект.ПоставщикИдентификационныйНомер) Тогда
			ИдентификационныеНомераКонтрагентов.Добавить(ДокументОбъект.ПоставщикИдентификационныйНомер);
			ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(ДокументОбъект.ПоставщикИдентификационныйНомер);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОбъект.ПолучательИдентификационныйНомер) Тогда
			ИдентификационныеНомераКонтрагентов.Добавить(ДокументОбъект.ПолучательИдентификационныйНомер);
			ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(ДокументОбъект.ПолучательИдентификационныйНомер);
		КонецЕсли;
		
		СоответствияИдентификаторовИСсылок = РаботаСДокументамиИСМПТК.НайтиКонтрагентовИСтруктурныеЕдиницыПоИдентификационнымНомерам(ИдентификационныеНомераКонтрагентов, ИдентификационныеНомераСтруктурныхЕдиниц);
		
		// Заполнить ссылки на контрагентов. 
		СоответствияКонтрагентов = СоответствияИдентификаторовИСсылок.СоответствияКонтрагентов;
		
		Для Каждого ЭлементСоответствияКонтрагентов Из СоответствияКонтрагентов Цикл
			
			Идентификатор = ЭлементСоответствияКонтрагентов.Ключ;
			Контрагент	  = ЭлементСоответствияКонтрагентов.Значение;
			
			Если ДокументОбъект.ПоставщикИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Поставщик  = Контрагент;
			КонецЕсли;
			
			Если ДокументОбъект.ПолучательИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Получатель = Контрагент;
			КонецЕсли;
			
		КонецЦикла;
		
		// Заполнить ссылки на структурные единицы.
		СоответствияСтруктурныхЕдиниц = СоответствияИдентификаторовИСсылок.СоответствияСтруктурныхЕдиниц;
		
		Для Каждого ЭлементСоответствияСтруктурныхЕдиниц Из СоответствияСтруктурныхЕдиниц Цикл
			
			Идентификатор = ЭлементСоответствияСтруктурныхЕдиниц.Ключ;
			Контрагент 	  = ЭлементСоответствияСтруктурныхЕдиниц.Значение;
			
			Если ДокументОбъект.ПоставщикИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Поставщик  = Контрагент;
			КонецЕсли;
			
			Если ДокументОбъект.ПолучательИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Получатель = Контрагент;
			КонецЕсли;
			
		КонецЦикла;
		
		НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();  
		
		Если ТипЗнч(ДокументXDTO.productList.iCode) = Тип("ОбъектXDTO") Тогда
			
			ДокументОбъект.Марки.Очистить();
			КодXDTO 	= ДокументXDTO.productList.iCode;
			НоваяСтрока = ДокументОбъект.Марки.Добавить();
			НоваяСтрока.КодИдентификации = КодXDTO.Последовательность().ПолучитьТекст(0);
			НоваяСтрока.СтатусСверкиКода = СтатусСверкиПоКоду(КодXDTO.reviseStatusCode);
			
			ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(НоваяСтрока.КодИдентификации, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
			
			Если Не ДанныеРазбора = Неопределено Тогда
				НоваяСтрока.ВидУпаковки 	= ДанныеРазбора.ВидУпаковки;
				НоваяСтрока.ВидПродукции	= ДанныеРазбора.ВидыПродукции[0];
				
				НоваяСтрока.Количество = 1;
				НайденнаяНоменклатура = Неопределено;
				
				ЗаполнитьРеквизитыGTINПоДаннымРазбораКода(НоваяСтрока, ДанныеРазбора, НайденнаяНоменклатура);
				НоваяСтрока.Номенклатура = НайденнаяНоменклатура;
				
			Иначе
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПредупреждениеПриРазбореВДокументеМожетБытьНеподходящаяПродукция();
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект.Ссылка); 
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
				ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомлениеПоДаннымСервера");
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ДокументXDTO.productList.iCode)=Тип("СписокXDTO") Тогда
			
			ДокументОбъект.Марки.Очистить();
			Для каждого СтрокаXDTO Из ДокументXDTO.productList.iCode Цикл
				
				КодXDTO = СтрокаXDTO;
				НоваяСтрока = ДокументОбъект.Марки.Добавить();
				НоваяСтрока.КодИдентификации = КодXDTO.Последовательность().ПолучитьТекст(0);
				НоваяСтрока.СтатусСверкиКода = СтатусСверкиПоКоду(КодXDTO.reviseStatusCode);
				
				ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(НоваяСтрока.КодИдентификации, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
				
				Если Не ДанныеРазбора = Неопределено Тогда
					НоваяСтрока.ВидУпаковки 	= ДанныеРазбора.ВидУпаковки;
					НоваяСтрока.ВидПродукции	= ДанныеРазбора.ВидыПродукции[0];
					
					НоваяСтрока.Количество = 1;
					НайденнаяНоменклатура = Неопределено;
				
					ЗаполнитьРеквизитыGTINПоДаннымРазбораКода(НоваяСтрока, ДанныеРазбора, НайденнаяНоменклатура);
					
					НоваяСтрока.Номенклатура = НайденнаяНоменклатура;
				Иначе
					ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПредупреждениеПриРазбореВДокументеМожетБытьНеподходящаяПродукция();
					ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект.Ссылка); 
					ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
					ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомлениеПоДаннымСервера");
					ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ДокументОбъект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") Тогда
			ДокументОбъект.Контрагент = ДокументОбъект.Получатель;
		Иначе
			ДокументОбъект.Контрагент = ДокументОбъект.Поставщик;
		КонецЕсли;

		КонецЕсли;
		
		//провести документы 
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		ЗафиксироватьТранзакцию();
		Успешно = Истина;
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомлениеПоДаннымСервера");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьУведомлениеОВводеВыводе(Знач МассивДокументов, ТипДокумента, ДанныеПрофилей, ТокенАвторизации) Экспорт
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Уведомление.Ссылка КАК Ссылка,
	|	Уведомление.Идентификатор КАК Идентификатор,
	|	Уведомление.НомерИСМПТ КАК НомерИСМПТ
	|ИЗ
	|	Документ.%ТипДокумента% КАК Уведомление
	|ГДЕ
	|	Уведомление.Ссылка В(&МассивДокументов)
	|	И НЕ Уведомление.Идентификатор = """"";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТипДокумента%", ТипДокумента);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
			//документы без идентификаторов не обрабатываются
			Продолжить;
		КонецЕсли;
		
		ПараметрыДокумента = Новый Структура;
		
		ПараметрыДокумента.Вставить("Идентификатор", Выборка.Идентификатор);
		РезультатВыполненияНаСервере = ПолучитьУведомленияВводаВывода(ПараметрыДокумента, ДанныеПрофилей, ТокенАвторизации);
		Если ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСМПТК() Тогда
			ОбновитьУведомленияОВводеВОборотПоДаннымСервера(РезультатВыполненияНаСервере, Выборка.Ссылка);
		ИначеЕсли ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСМПТК() Тогда
			ОбновитьУведомленияОВыводеИзОборотаПоДаннымСервера(РезультатВыполненияНаСервере, Выборка.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//Обновляет документ Уведомление о повторном вводе в оборот
Процедура ОбновитьУведомленияОВводеВОборотПоДаннымСервера(РезультатВыполненияНаСервере, УведомлениеСсылка)
	
	ИнформацияОбОшибке = Неопределено;
	Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
		ЗаполнитьОшибкиДокумента(УведомлениеСсылка, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОбновленииДокументаССервера() + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомленияОВводеВОборотПоДаннымСервера");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
		Возврат;
	Иначе
		//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
		ОчиститьОшибкиДокумента(УведомлениеСсылка);	
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(РезультатВыполненияНаСервере.ТекстОтвета);
		ОтветСервера    = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON);
		СтатусДокумента = ПолучитьСтатусДокументаУведомленияПоКоду(ОтветСервера.status);
		СтрокаXML       = ОтветСервера.content;
		ДополнительныеДанные = Новый Структура("НомерИСМПТ, ДатаВИСМПТ");
		ДополнительныеДанные.НомерИСМПТ = ОтветСервера.number;
		ДополнительныеДанные.ДатаВИСМПТ = ПрочитатьДатуJSON(ОтветСервера.docDate, ФорматДатыJSON.ISO);
		
		Фабрика = Фабрика_XML_API("СхемаУВИО_XML_API_ИСМПТК");
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
		ОбъектXDTO   = Фабрика.ПрочитатьXML(ЧтениеXML);
		ДокументXDTO = ОбъектXDTO.document;
		//mainInfo
		//consigneeInfo
		//reason Причина вывода
		//participantIdentificationCode ИИН/БИН отправителя
		//participantName Наименование отправителя
		//originalDocInfo 
		//docName Наименование первичного документа 
		//docNumber Номер первичного документа 
		//docDate Дата первичного документа  в формате .yyyy dd.mm
		//productList 
		//iCode Код идентификации
		//count Количество потребительских упаковок.
		
		//заполнить документ по данным сервера
		ДокументОбъект = УведомлениеСсылка.ПолучитьОбъект();
		
		Если ЗначениеЗаполнено(ДополнительныеДанные) Тогда
			ЗаполнитьЗначенияСвойств(ДокументОбъект, ДополнительныеДанные, "НомерИСМПТ, ДатаВИСМПТ");
			Статус = ПолучитьСтатусДокументаУведомленияПоКоду(ОтветСервера.status);
			Если Статус <> Неопределено Тогда
				ДокументОбъект.Статус = Статус;
			КонецЕсли;
		КонецЕсли;
		
		ДокументОбъект.ПоставщикНаименование = ДокументXDTO.mainInfo.participantInfo.participantName;
		ДокументОбъект.ПоставщикИдентификационныйНомер = ДокументXDTO.mainInfo.participantInfo.participantIdentificationCode;
			
		ИдентификационныеНомераКонтрагентов = Новый Массив;
		ИдентификационныеНомераСтруктурныхЕдиниц = Новый Массив;
		
		Если ЗначениеЗаполнено(ДокументОбъект.ПоставщикИдентификационныйНомер) Тогда
			ИдентификационныеНомераКонтрагентов.Добавить(ДокументОбъект.ПоставщикИдентификационныйНомер);
			ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(ДокументОбъект.ПоставщикИдентификационныйНомер);
		КонецЕсли;
	
		СоответствияИдентификаторовИСсылок = РаботаСДокументамиИСМПТК.НайтиКонтрагентовИСтруктурныеЕдиницыПоИдентификационнымНомерам(ИдентификационныеНомераКонтрагентов, ИдентификационныеНомераСтруктурныхЕдиниц);
		
		// Заполнить ссылки на контрагентов. 
		СоответствияКонтрагентов = СоответствияИдентификаторовИСсылок.СоответствияКонтрагентов;
		Для Каждого ЭлементСоответствияКонтрагентов Из СоответствияКонтрагентов Цикл
			
			Идентификатор = ЭлементСоответствияКонтрагентов.Ключ;
			Контрагент = ЭлементСоответствияКонтрагентов.Значение;
			
			Если ДокументОбъект.ПоставщикИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Поставщик = Контрагент;
			КонецЕсли;
			
		КонецЦикла;
		
		// Заполнить ссылки на структурные единицы.
		СоответствияСтруктурныхЕдиниц = СоответствияИдентификаторовИСсылок.СоответствияСтруктурныхЕдиниц;
		Для Каждого ЭлементСоответствияСтруктурныхЕдиниц Из СоответствияСтруктурныхЕдиниц Цикл
			
			Идентификатор = ЭлементСоответствияСтруктурныхЕдиниц.Ключ;
			Контрагент = ЭлементСоответствияСтруктурныхЕдиниц.Значение;
			
			Если ДокументОбъект.ПоставщикИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Поставщик = Контрагент;
			КонецЕсли;
			
		КонецЦикла;
		
		НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();  
		
		Если ТипЗнч(ДокументXDTO.productList.iCode)=Тип("ОбъектXDTO") Тогда
			ДокументОбъект.Марки.Очистить();
			КодXDTO = ДокументXDTO.productList.iCode;
			НоваяСтрока = ДокументОбъект.Марки.Добавить();
			НоваяСтрока.КодИдентификации = КодXDTO.Последовательность().ПолучитьТекст(0);
			НоваяСтрока.Количество = КодXDTO.count;
			
			ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(НоваяСтрока.КодИдентификации, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
			
			Если Не ДанныеРазбора = Неопределено Тогда
				НоваяСтрока.ВидУпаковки 	= ДанныеРазбора.ВидУпаковки;
				НоваяСтрока.ВидПродукции	= ДанныеРазбора.ВидыПродукции[0];
				НайденнаяНоменклатура = Неопределено;
				
				ЗаполнитьРеквизитыGTINПоДаннымРазбораКода(НоваяСтрока, ДанныеРазбора, НайденнаяНоменклатура);
				
				НоваяСтрока.Номенклатура = НайденнаяНоменклатура;
			Иначе
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПредупреждениеПриРазбореВДокументеМожетБытьНеподходящаяПродукция();
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект.Ссылка); 
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
				ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомленияОВводеВОборотПоДаннымСервера");
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументXDTO.productList.iCode)=Тип("СписокXDTO") Тогда
			
			ДокументОбъект.Марки.Очистить();
			
			Для Каждого СтрокаXDTO Из ДокументXDTO.productList.iCode Цикл
				КодXDTO = СтрокаXDTO;
				НоваяСтрока = ДокументОбъект.Марки.Добавить();
				НоваяСтрока.КодИдентификации = КодXDTO.Последовательность().ПолучитьТекст(0);
				НоваяСтрока.Количество = КодXDTO.count;
				
				ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(НоваяСтрока.КодИдентификации, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
				
				Если Не ДанныеРазбора = Неопределено Тогда
					
					НоваяСтрока.ВидУпаковки 	= ДанныеРазбора.ВидУпаковки;
					НоваяСтрока.ВидПродукции	= ДанныеРазбора.ВидыПродукции[0];
					НайденнаяНоменклатура = Неопределено;
				
					ЗаполнитьРеквизитыGTINПоДаннымРазбораКода(НоваяСтрока, ДанныеРазбора, НайденнаяНоменклатура);
					
					НоваяСтрока.Номенклатура = НайденнаяНоменклатура;
				Иначе
					ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПредупреждениеПриРазбореВДокументеМожетБытьНеподходящаяПродукция();
					ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект.Ссылка); 
					ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
					ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомленияОВводеВОборотПоДаннымСервера");
					ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//табличная часть Товары
		ДокументОбъект.Товары.Очистить();
		ТоварыПоМаркам = ДокументОбъект.Марки.Выгрузить(,"Количество, Номенклатура, EAN, GTIN");
		ТоварыПоМаркам.Свернуть("Номенклатура, EAN, GTIN", "Количество");
		Для каждого СтрокаТовары Из ТоварыПоМаркам Цикл
			НоваяСтрока = ДокументОбъект.Товары.Добавить();
			НоваяСтрока.Номенклатура = СтрокаТовары.Номенклатура;
			НоваяСтрока.КоличествоИсточник = СтрокаТовары.Количество;
			НоваяСтрока.ЕдиницаИзмерения = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьЕдиницуИзмерения(НоваяСтрока.Номенклатура);
		КонецЦикла;
		
		//провести документы
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомленияОВводеВОборотПоДаннымСервера");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

//Обновляет документ Уведомление о выводе из оборота по данным сервера
Процедура ОбновитьУведомленияОВыводеИзОборотаПоДаннымСервера(РезультатВыполненияНаСервере, УведомлениеСсылка)
	
	ИнформацияОбОшибке = Неопределено;
	Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
		ЗаполнитьОшибкиДокумента(УведомлениеСсылка, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОбновленииДокументаССервера() + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомленияОВыводеИзОборотаПоДаннымСервера");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
		Возврат;
	Иначе
		//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
		ОчиститьОшибкиДокумента(УведомлениеСсылка);	
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(РезультатВыполненияНаСервере.ТекстОтвета);
		ОтветСервера = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON);
		СтатусДокумента = ПолучитьСтатусДокументаУведомленияПоКоду(ОтветСервера.status);
		СтрокаXML = ОтветСервера.content;
		ДополнительныеДанные = Новый Структура("НомерИСМПТ, ДатаВИСМПТ");
		ДополнительныеДанные.НомерИСМПТ = ОтветСервера.number;
		ДополнительныеДанные.ДатаВИСМПТ = ПрочитатьДатуJSON(ОтветСервера.docDate, ФорматДатыJSON.ISO);
		
		Фабрика = Фабрика_XML_API("СхемаУВИО_XML_API");
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
		ОбъектXDTO = Фабрика.ПрочитатьXML(ЧтениеXML);
		ДокументXDTO = ОбъектXDTO.document;
		//mainInfo
		//consigneeInfo
		//reason Причина вывода
		//participantIdentificationCode ИИН/БИН отправителя
		//participantName Наименование отправителя
		//originalDocInfo 
		//docName Наименование первичного документа 
		//docNumber Номер первичного документа 
		//docDate Дата первичного документа  в формате .yyyy dd.mm
		//productList 
		//iCode Код идентификации
		//count Количество потребительских упаковок.
		
		//заполнить документ по данным сервера
		ДокументОбъект = УведомлениеСсылка.ПолучитьОбъект();
		
		Если ЗначениеЗаполнено(ДополнительныеДанные) Тогда
			ЗаполнитьЗначенияСвойств(ДокументОбъект, ДополнительныеДанные, "НомерИСМПТ, ДатаВИСМПТ");
			Статус = ПолучитьСтатусДокументаУведомленияПоКоду(ОтветСервера.status);
			Если Статус <> Неопределено Тогда
				ДокументОбъект.Статус = Статус;
			КонецЕсли;
		КонецЕсли;
		
		ДокументОбъект.ПоставщикНаименование = ДокументXDTO.mainInfo.participantInfo.participantName;
		ДокументОбъект.ПоставщикИдентификационныйНомер = ДокументXDTO.mainInfo.participantInfo.participantIdentificationCode;
			
		ИдентификационныеНомераКонтрагентов = Новый Массив;
		ИдентификационныеНомераСтруктурныхЕдиниц = Новый Массив;
		
		Если ЗначениеЗаполнено(ДокументОбъект.ПоставщикИдентификационныйНомер) Тогда
			ИдентификационныеНомераКонтрагентов.Добавить(ДокументОбъект.ПоставщикИдентификационныйНомер);
			ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(ДокументОбъект.ПоставщикИдентификационныйНомер);
		КонецЕсли;
	
		СоответствияИдентификаторовИСсылок = РаботаСДокументамиИСМПТК.НайтиКонтрагентовИСтруктурныеЕдиницыПоИдентификационнымНомерам(ИдентификационныеНомераКонтрагентов, ИдентификационныеНомераСтруктурныхЕдиниц);
		
		// Заполнить ссылки на контрагентов. 
		СоответствияКонтрагентов = СоответствияИдентификаторовИСсылок.СоответствияКонтрагентов;
		Для Каждого ЭлементСоответствияКонтрагентов Из СоответствияКонтрагентов Цикл
			
			Идентификатор = ЭлементСоответствияКонтрагентов.Ключ;
			Контрагент = ЭлементСоответствияКонтрагентов.Значение;
			
			Если ДокументОбъект.ПоставщикИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Поставщик = Контрагент;
			КонецЕсли;
			
		КонецЦикла;
		
		// Заполнить ссылки на структурные единицы.
		СоответствияСтруктурныхЕдиниц = СоответствияИдентификаторовИСсылок.СоответствияСтруктурныхЕдиниц;
		Для Каждого ЭлементСоответствияСтруктурныхЕдиниц Из СоответствияСтруктурныхЕдиниц Цикл
			
			Идентификатор = ЭлементСоответствияСтруктурныхЕдиниц.Ключ;
			Контрагент = ЭлементСоответствияСтруктурныхЕдиниц.Значение;
			
			Если ДокументОбъект.ПоставщикИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Поставщик = Контрагент;
			КонецЕсли;
			
		КонецЦикла;
		
		НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();  
		
		Если ТипЗнч(ДокументXDTO.productList.iCode)=Тип("ОбъектXDTO") Тогда
			
			ДокументОбъект.Марки.Очистить();
			КодXDTO = ДокументXDTO.productList.iCode;
			НоваяСтрока = ДокументОбъект.Марки.Добавить();
			НоваяСтрока.КодИдентификации = КодXDTO.Последовательность().ПолучитьТекст(0);
			НоваяСтрока.Количество = КодXDTO.count;
			
			ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(НоваяСтрока.КодИдентификации, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
			
			Если Не ДанныеРазбора = Неопределено Тогда
				
				НоваяСтрока.ВидУпаковки 	= ДанныеРазбора.ВидУпаковки;
				НоваяСтрока.ВидПродукции	= ДанныеРазбора.ВидыПродукции[0];
				НайденнаяНоменклатура = Неопределено;
				
				ЗаполнитьРеквизитыGTINПоДаннымРазбораКода(НоваяСтрока, ДанныеРазбора, НайденнаяНоменклатура);
				
				НоваяСтрока.Номенклатура = НайденнаяНоменклатура;
			Иначе
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПредупреждениеПриРазбореВДокументеМожетБытьНеподходящаяПродукция();
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект.Ссылка); 
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
				ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомленияОВыводеИзОборотаПоДаннымСервера");
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);		
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументXDTO.productList.iCode)=Тип("СписокXDTO") Тогда
			
			ДокументОбъект.Марки.Очистить();
			
			Для Каждого СтрокаXDTO Из ДокументXDTO.productList.iCode Цикл
				
				КодXDTO = СтрокаXDTO;
				НоваяСтрока = ДокументОбъект.Марки.Добавить();
				НоваяСтрока.КодИдентификации = КодXDTO.Последовательность().ПолучитьТекст(0);
				НоваяСтрока.Количество = КодXDTO.count;
				
				ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(НоваяСтрока.КодИдентификации, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
				
				Если Не ДанныеРазбора = Неопределено Тогда
					
					НоваяСтрока.ВидУпаковки 	= ДанныеРазбора.ВидУпаковки;
					НоваяСтрока.ВидПродукции	= ДанныеРазбора.ВидыПродукции[0];
					НайденнаяНоменклатура = Неопределено;
				
					ЗаполнитьРеквизитыGTINПоДаннымРазбораКода(НоваяСтрока, ДанныеРазбора, НайденнаяНоменклатура);
					
					НоваяСтрока.Номенклатура = НайденнаяНоменклатура;
				Иначе
					ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПредупреждениеПриРазбореВДокументеМожетБытьНеподходящаяПродукция();
					ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект.Ссылка); 
					ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
					ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомленияОВыводеИзОборотаПоДаннымСервера");
					ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//табличная часть Товары
		ДокументОбъект.Товары.Очистить();
		ТоварыПоМаркам = ДокументОбъект.Марки.Выгрузить(,"Количество, Номенклатура, EAN, GTIN");
		ТоварыПоМаркам.Свернуть("Номенклатура, EAN, GTIN", "Количество");
		Для каждого СтрокаТовары Из ТоварыПоМаркам Цикл
			НоваяСтрока = ДокументОбъект.Товары.Добавить();
			НоваяСтрока.Номенклатура = СтрокаТовары.Номенклатура;
			НоваяСтрока.КоличествоИсточник = СтрокаТовары.Количество;
			НоваяСтрока.ЕдиницаИзмерения = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьЕдиницуИзмерения(НоваяСтрока.Номенклатура);
		КонецЦикла;
		
		//провести документы
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		ЗафиксироватьТранзакцию();
				
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомленияОВыводеИзОборотаПоДаннымСервера");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьУведомлениеОВвозеИзЕАЭС(Знач МассивДокументов, ДанныеПрофилей, ТокенАвторизации) Экспорт
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Уведомление.Ссылка КАК Ссылка,
	|	Уведомление.Идентификатор КАК Идентификатор,
	|	Уведомление.Направление КАК Направление
	|ИЗ
	|	Документ.УведомлениеОВвозеИзЕАЭСИСМПТК КАК Уведомление
	|ГДЕ
	|	Уведомление.Ссылка В(&МассивДокументов)
	|	И НЕ Уведомление.Идентификатор = """"
	|ИТОГИ ПО
	|	Направление";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	ВыборкаНаправление = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНаправление.Следующий() Цикл
		
		Выборка = ВыборкаНаправление.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
				//ошибка, в документе нет идентификатора
				Продолжить;
			КонецЕсли;
			
			ПараметрыДокумента = Новый Структура;
			ПараметрыДокумента.Вставить("Исходящий", ?(Выборка.Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий, Истина, Ложь));
			ПараметрыДокумента.Вставить("Идентификатор",Выборка.Идентификатор);
			РезультатВыполненияНаСервере = ПолучитьДокументСервера(ПараметрыДокумента, ДанныеПрофилей, ТокенАвторизации);
			ДополнительныеДанные = ПолучитьДополнительныеДанныеПоИдентификатору(Выборка.Идентификатор, ДанныеПрофилей, ДанныеПрофилей, ПараметрыДокумента.Исходящий, ТокенАвторизации);
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			КопияДокумента = ДокументОбъект.Скопировать();
			Если КопияДокумента.Марки.Количество() = 0 Тогда
				КопияДокумента.Марки.Загрузить(ДокументОбъект.Марки.Выгрузить());
			КонецЕсли;
			МассивСтарыхДокументов = Новый Массив;
			ИсходныйНовый = Новый Структура;
			ИсходныйНовый.Вставить("ИсходныйОбъект", КопияДокумента);
			ИсходныйНовый.Вставить("ОбновленныйОбъект", ДокументОбъект);
			МассивСтарыхДокументов.Добавить(ИсходныйНовый);
			
			ОбновитьУведомлениеОВвозеПоДаннымСервера(РезультатВыполненияНаСервере, Выборка.Ссылка, ДополнительныеДанные);
			ИнтерфейсИСМПТК.ВосстановитьСсылочныеРеквизитыДокументов(МассивСтарыхДокументов);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

//Обновляет документ Уведомление о ввозе из ЕАЭС по данным сервера
Процедура ОбновитьУведомлениеОВвозеПоДаннымСервера(РезультатВыполненияНаСервере, УведомлениеСсылка, ДополнительныеДанные, Успешно = Ложь)
	
	ИнформацияОбОшибке = Неопределено;
	Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
		ЗаполнитьОшибкиДокумента(УведомлениеСсылка, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОбновленииДокументаССервера() + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомлениеОВвозеПоДаннымСервера");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
		Возврат;
	Иначе
		//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
		ОчиститьОшибкиДокумента(УведомлениеСсылка);	
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		ДвоичныеДанныеXML = Base64Значение(РезультатВыполненияНаСервере.ТекстОтвета);
		СтрокаXML = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеXML, КодировкаТекста.UTF8);
		
		Фабрика = Фабрика_XML_API("СхемаВвозИзЕАЭС_XML_API_ИСМПТК");
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
		ОбъектXDTO   = Фабрика.ПрочитатьXML(ЧтениеXML);
		ДокументXDTO = ОбъектXDTO.document;
		
		//заполнить документ по данным сервера
		ДокументОбъект = УведомлениеСсылка.ПолучитьОбъект();
		
		Если ЗначениеЗаполнено(ДополнительныеДанные) Тогда
			ЗаполнитьЗначенияСвойств(ДокументОбъект, ДополнительныеДанные, "НомерИСМПТ, ДатаВИСМПТ");
			Статус = ПолучитьСтатусДокументаПоКоду(ДополнительныеДанные.Статус);
			Если Статус <> Неопределено Тогда
				ДокументОбъект.Статус = Статус;
			КонецЕсли;
		КонецЕсли;
		
		ДокументОбъект.ТипУведомления = ?(ДокументXDTO.correctionFlag = "false", Перечисления.ВидыДокументаИСМПТК.Исходный, Перечисления.ВидыДокументаИСМПТК.Исправленный);
		
		Если Не ДокументXDTO.mainInfo.supplierInfo.Свойства().Получить("supplierName") = Неопределено Тогда
			ДокументОбъект.ПоставщикНаименование 		= ДокументXDTO.mainInfo.supplierInfo.supplierName;
		КонецЕсли;
		ДокументОбъект.ПоставщикИдентификационныйНомер 	= ДокументXDTO.mainInfo.supplierInfo.supplierIdentificationCode;
		
		Если Не ДокументXDTO.mainInfo.consigneeInfo.Свойства().Получить("consigneeName") = Неопределено Тогда
			ДокументОбъект.ПолучательНаименование 		= ДокументXDTO.mainInfo.consigneeInfo.consigneeName;
		КонецЕсли;
		ДокументОбъект.ПолучательИдентификационныйНомер = ДокументXDTO.mainInfo.consigneeInfo.consigneeIdentificationCode;
		
		ИдентификационныеНомераКонтрагентов 	 = Новый Массив;
		ИдентификационныеНомераСтруктурныхЕдиниц = Новый Массив;
		
		Если ЗначениеЗаполнено(ДокументОбъект.ПоставщикИдентификационныйНомер) Тогда
			ИдентификационныеНомераКонтрагентов.Добавить(ДокументОбъект.ПоставщикИдентификационныйНомер);
			ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(ДокументОбъект.ПоставщикИдентификационныйНомер);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОбъект.ПолучательИдентификационныйНомер) Тогда
			ИдентификационныеНомераКонтрагентов.Добавить(ДокументОбъект.ПолучательИдентификационныйНомер);
			ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(ДокументОбъект.ПолучательИдентификационныйНомер);
		КонецЕсли;
		
		СоответствияИдентификаторовИСсылок = РаботаСДокументамиИСМПТК.НайтиКонтрагентовИСтруктурныеЕдиницыПоИдентификационнымНомерам(ИдентификационныеНомераКонтрагентов, ИдентификационныеНомераСтруктурныхЕдиниц);
		
		// Заполнить ссылки на контрагентов. 
		СоответствияКонтрагентов = СоответствияИдентификаторовИСсылок.СоответствияКонтрагентов;
		Для Каждого ЭлементСоответствияКонтрагентов Из СоответствияКонтрагентов Цикл
			
			Идентификатор = ЭлементСоответствияКонтрагентов.Ключ;
			Контрагент	  = ЭлементСоответствияКонтрагентов.Значение;
			
			Если ДокументОбъект.ПоставщикИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Поставщик = Контрагент;
			КонецЕсли;
			
			Если ДокументОбъект.ПолучательИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Получатель = Контрагент;
			КонецЕсли;
			
		КонецЦикла;
		
		// Заполнить ссылки на структурные единицы.
		СоответствияСтруктурныхЕдиниц = СоответствияИдентификаторовИСсылок.СоответствияСтруктурныхЕдиниц;
		Для Каждого ЭлементСоответствияСтруктурныхЕдиниц Из СоответствияСтруктурныхЕдиниц Цикл
			
			Идентификатор = ЭлементСоответствияСтруктурныхЕдиниц.Ключ;
			Контрагент 	  = ЭлементСоответствияСтруктурныхЕдиниц.Значение;
			
			Если ДокументОбъект.ПоставщикИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Поставщик = Контрагент;
			КонецЕсли;
			
			Если ДокументОбъект.ПолучательИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Получатель = Контрагент;
			КонецЕсли;
			
		КонецЦикла;
		
		СтранаМира = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьСтрануПоКоду(ДокументXDTO.mainInfo.supplierInfo.supplierCountryCode);
		Если ЗначениеЗаполнено(СтранаМира) Тогда
			ДокументОбъект.СтранаОтправления = СтранаМира;
		КонецЕсли;
		
		ОбщиеСвойства = ДокументXDTO.mainInfo.Свойства();
		
		Если ОбщиеСвойства.Количество() > 0 И ОбщиеСвойства.Получить("exciseDocInfo") <> Неопределено Тогда
			Если ТипЗнч(ДокументXDTO.mainInfo.exciseDocInfo) = Тип("ОбъектXDTO") Тогда
				ДокументОбъект.ДатаУплатыАкциза = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СтрокаВДату(ДокументXDTO.mainInfo.exciseDocInfo.exciseDocDate);
				ДокументОбъект.НомерКвитанцииАкциза = ДокументXDTO.mainInfo.exciseDocInfo.exciseDocNumber;
				ДокументОбъект.СуммаАкциза = ДокументXDTO.mainInfo.exciseDocInfo.exciseAmount;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщиеСвойства.Количество() > 0 И ОбщиеСвойства.Получить("complianceInfo") <> Неопределено Тогда
			//complianceInfo
			Если ТипЗнч(ДокументXDTO.mainInfo.complianceInfo) = Тип("ОбъектXDTO") Тогда
				ВсеСвойства = ДокументXDTO.mainInfo.complianceInfo.Свойства();
				Если ВсеСвойства.Количество() > 0 И ВсеСвойства.Получить("complianceDocumentInfo") <> Неопределено Тогда
					Если ТипЗнч(ДокументXDTO.mainInfo.complianceInfo.complianceDocumentInfo) = Тип("ОбъектXDTO") Тогда
						ДокументОбъект.ДокументыСоответствия.Очистить();
						complianceDocumentInfo = ДокументXDTO.mainInfo.complianceInfo.complianceDocumentInfo;
						НоваяСтрока = ДокументОбъект.ДокументыСоответствия.Добавить();
						Если complianceDocumentInfo.complianceDocType = "Сертификат соответствия" Тогда
							НоваяСтрока.ТипДокумента = Перечисления.ВидыДокументовОбязательнойСертификацииИСМПТК.СертификатСоответствия;
						ИначеЕсли complianceDocumentInfo.complianceDocType = "Декларация соответствия" Тогда
							НоваяСтрока.ТипДокумента = Перечисления.ВидыДокументовОбязательнойСертификацииИСМПТК.ДекларацияСоответствия;
						КонецЕсли;
						НоваяСтрока.ДатаДокумента  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СтрокаВДату(complianceDocumentInfo.complianceDocDate);
						НоваяСтрока.НомерДокумента = complianceDocumentInfo.complianceDocNumber;
					ИначеЕсли ТипЗнч(ДокументXDTO.mainInfo.complianceInfo.complianceDocumentInfo)=Тип("СписокXDTO") Тогда
						ДокументОбъект.ДокументыСоответствия.Очистить();
						Для каждого СтрокаXDTO Из ДокументXDTO.mainInfo.complianceInfo.complianceDocumentInfo Цикл
							complianceDocumentInfo = СтрокаXDTO;
							НоваяСтрока = ДокументОбъект.ДокументыСоответствия.Добавить();
							Если complianceDocumentInfo.complianceDocType = "Сертификат соответствия" Тогда
								НоваяСтрока.ТипДокумента = Перечисления.ВидыДокументовОбязательнойСертификацииИСМПТК.СертификатСоответствия;
							ИначеЕсли complianceDocumentInfo.complianceDocType = "Декларация соответствия" Тогда
								НоваяСтрока.ТипДокумента = Перечисления.ВидыДокументовОбязательнойСертификацииИСМПТК.ДекларацияСоответствия;
							КонецЕсли;
							НоваяСтрока.ДатаДокумента  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СтрокаВДату(complianceDocumentInfo.complianceDocDate);
							НоваяСтрока.НомерДокумента = complianceDocumentInfo.complianceDocNumber;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//productList
		НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();   
		
		Если ТипЗнч(ДокументXDTO.productList.iCode)=Тип("ОбъектXDTO") Тогда
			ДокументОбъект.Марки.Очистить();
			КодXDTO 	= ДокументXDTO.productList.iCode;
			НоваяСтрока = ДокументОбъект.Марки.Добавить();
			НоваяСтрока.КодИдентификации = КодXDTO;
			НоваяСтрока.Количество		 = 1;
			
			ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(НоваяСтрока.КодИдентификации, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
			
			Если Не ДанныеРазбора = Неопределено Тогда
				
				НоваяСтрока.ВидУпаковки 	= ДанныеРазбора.ВидУпаковки;
				НоваяСтрока.ВидПродукции	= ДанныеРазбора.ВидыПродукции[0];
				НайденнаяНоменклатура		= Неопределено;
				
				ЗаполнитьРеквизитыGTINПоДаннымРазбораКода(НоваяСтрока, ДанныеРазбора, НайденнаяНоменклатура);
				
				НоваяСтрока.Номенклатура = НайденнаяНоменклатура;
			Иначе
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПредупреждениеПриРазбореВДокументеМожетБытьНеподходящаяПродукция();
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект.Ссылка); 
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
				ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомленияОВвозеПоДаннымСервера");
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументXDTO.productList.iCode)=Тип("СписокXDTO") Тогда
			
			ДокументОбъект.Марки.Очистить();
			
			Для Каждого СтрокаXDTO Из ДокументXDTO.productList.iCode Цикл
				
				КодXDTO = СтрокаXDTO;
				НоваяСтрока = ДокументОбъект.Марки.Добавить();
				НоваяСтрока.КодИдентификации = КодXDTO;
				НоваяСтрока.Количество = 1;
				
				ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(НоваяСтрока.КодИдентификации, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
				
				Если Не ДанныеРазбора = Неопределено Тогда
					
					НоваяСтрока.ВидУпаковки 	= ДанныеРазбора.ВидУпаковки;
					НоваяСтрока.ВидПродукции	= ДанныеРазбора.ВидыПродукции[0];
					НайденнаяНоменклатура 		= Неопределено;
				
					ЗаполнитьРеквизитыGTINПоДаннымРазбораКода(НоваяСтрока, ДанныеРазбора, НайденнаяНоменклатура);
					
					НоваяСтрока.Номенклатура = НайденнаяНоменклатура;
				Иначе
					ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПредупреждениеПриРазбореВДокументеМожетБытьНеподходящаяПродукция();
					ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект.Ссылка); 
					ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
					ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомленияОВвозеПоДаннымСервера");
					ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//табличная часть Товары
		ДокументОбъект.Товары.Очистить();
		ТоварыПоМаркам = ДокументОбъект.Марки.Выгрузить(,"Количество, Номенклатура, EAN, GTIN");
		ТоварыПоМаркам.Свернуть("Номенклатура, EAN, GTIN", "Количество");
		Для каждого СтрокаТовары Из ТоварыПоМаркам Цикл
			НоваяСтрока = ДокументОбъект.Товары.Добавить();
			НоваяСтрока.Номенклатура 	   = СтрокаТовары.Номенклатура;
			НоваяСтрока.КоличествоИсточник = СтрокаТовары.Количество;
		КонецЦикла;
			
		//провести документы
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		ЗафиксироватьТранзакцию();
		Успешно = Истина;
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомленияОВвозеПоДаннымСервера");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьУведомлениеОВвозеИзТретьихСтран(Знач МассивДокументов, ДанныеПрофилей, ТокенАвторизации) Экспорт
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Уведомление.Ссылка КАК Ссылка,
	|	Уведомление.Идентификатор КАК Идентификатор,
	|	Уведомление.Направление КАК Направление
	|ИЗ
	|	Документ.УведомлениеОВвозеИзТретьихСтранИСМПТК КАК Уведомление
	|ГДЕ
	|	Уведомление.Ссылка В(&МассивДокументов)
	|	И НЕ Уведомление.Идентификатор = """"
	|ИТОГИ ПО
	|	Направление";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	ВыборкаНаправление = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНаправление.Следующий() Цикл
		
		Выборка = ВыборкаНаправление.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
				//ошибка, в документе нет идентификатора
				Продолжить;
			КонецЕсли;
			
			ПараметрыДокумента = Новый Структура;
			ПараметрыДокумента.Вставить("Идентификатор",Выборка.Идентификатор);
			РезультатВыполненияНаСервере = ПолучитьУведомленияВводаВывода(ПараметрыДокумента, ДанныеПрофилей, ТокенАвторизации);
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			КопияДокумента = ДокументОбъект.Скопировать();
			Если КопияДокумента.Марки.Количество() = 0 Тогда
				КопияДокумента.Марки.Загрузить(ДокументОбъект.Марки.Выгрузить());
			КонецЕсли;
			МассивСтарыхДокументов = Новый Массив;
			ИсходныйНовый = Новый Структура;
			ИсходныйНовый.Вставить("ИсходныйОбъект", КопияДокумента);
			ИсходныйНовый.Вставить("ОбновленныйОбъект", ДокументОбъект);
			МассивСтарыхДокументов.Добавить(ИсходныйНовый);
			
			ОбновитьУведомлениеОВвозеИзТретьихСтранПоДаннымСервера(РезультатВыполненияНаСервере, Выборка.Ссылка);
			ИнтерфейсИСМПТК.ВосстановитьСсылочныеРеквизитыДокументов(МассивСтарыхДокументов);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

//Обновляет документ Уведомление о ввозе из ЕАЭС по данным сервера
Процедура ОбновитьУведомлениеОВвозеИзТретьихСтранПоДаннымСервера(РезультатВыполненияНаСервере, УведомлениеСсылка, ДополнительныеДанные = Неопределено, Успешно = Ложь)
	
	ИнформацияОбОшибке = Неопределено;
	Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
		ЗаполнитьОшибкиДокумента(УведомлениеСсылка, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОбновленииДокументаССервера() + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомленияОВвозеИзТретьихСтранПоДаннымСервера");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
		Возврат;
	Иначе
		//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
		ОчиститьОшибкиДокумента(УведомлениеСсылка);	
	КонецЕсли;
	
	НачатьТранзакцию();
			
	Попытка
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(РезультатВыполненияНаСервере.ТекстОтвета);
		ОтветСервера = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON);
		СтрокаXML    = ОтветСервера.content;
		ДополнительныеДанные = Новый Структура("НомерИСМПТ, ДатаВИСМПТ");
		ДополнительныеДанные.НомерИСМПТ = ОтветСервера.number;
		ДополнительныеДанные.ДатаВИСМПТ = УниверсальноеВремя(ПрочитатьДатуJSON(ОтветСервера.docDate, ФорматДатыJSON.ISO));
		
		Фабрика   = Фабрика_XML_API("СхемаВвозИзТретьихСтран_XML_API_ИСМПТК");
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
		ОбъектXDTO   = Фабрика.ПрочитатьXML(ЧтениеXML);
		ДокументXDTO = ОбъектXDTO.document;
		//заполнить документ по данным сервера
		ДокументОбъект = УведомлениеСсылка.ПолучитьОбъект();
		
		Если ЗначениеЗаполнено(ДополнительныеДанные) Тогда
			ЗаполнитьЗначенияСвойств(ДокументОбъект, ДополнительныеДанные, "НомерИСМПТ, ДатаВИСМПТ");
			Статус = ПолучитьСтатусДокументаУведомленияПоКоду(ОтветСервера.status);
			Если Статус <> Неопределено Тогда
				ДокументОбъект.Статус = Статус;
			КонецЕсли;
		КонецЕсли;
			
		ДокументОбъект.ПолучательНаименование 			= ДокументXDTO.mainInfo.importerInfo.importerName;
		ДокументОбъект.ПолучательИдентификационныйНомер = ДокументXDTO.mainInfo.importerInfo.importerCode;
		
		Если Не ДокументXDTO.mainInfo.Свойства().Получить("originalDocInfo") = Неопределено Тогда
			ДокументОбъект.РегНомерНаБумажномНосителе    = ДокументXDTO.mainInfo.originalDocInfo.docNumber;
			ДокументОбъект.ДатаВыпискиНаБумажномНосителе = 
				?(ЗначениеЗаполнено(ДокументXDTO.mainInfo.originalDocInfo.docDate),
				Дата(ДокументXDTO.mainInfo.originalDocInfo.docDate + " 00:00:00"),
				Неопределено);
		КонецЕсли;
		
		ИдентификационныеНомераКонтрагентов = Новый Массив;
		ИдентификационныеНомераСтруктурныхЕдиниц = Новый Массив;	
		
		Если ЗначениеЗаполнено(ДокументОбъект.ПолучательИдентификационныйНомер) Тогда
			ИдентификационныеНомераКонтрагентов.Добавить(ДокументОбъект.ПолучательИдентификационныйНомер);
			ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(ДокументОбъект.ПолучательИдентификационныйНомер);
		КонецЕсли;
		
		СоответствияИдентификаторовИСсылок = РаботаСДокументамиИСМПТК.НайтиКонтрагентовИСтруктурныеЕдиницыПоИдентификационнымНомерам(ИдентификационныеНомераКонтрагентов, ИдентификационныеНомераСтруктурныхЕдиниц);
		
		// Заполнить ссылки на структурные единицы.
		СоответствияСтруктурныхЕдиниц = СоответствияИдентификаторовИСсылок.СоответствияСтруктурныхЕдиниц;
		Для Каждого ЭлементСоответствияСтруктурныхЕдиниц Из СоответствияСтруктурныхЕдиниц Цикл
			
			Идентификатор = ЭлементСоответствияСтруктурныхЕдиниц.Ключ;
			Контрагент = ЭлементСоответствияСтруктурныхЕдиниц.Значение;
			Если ДокументОбъект.ПолучательИдентификационныйНомер = Идентификатор Тогда
				ДокументОбъект.Получатель = Контрагент;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ДокументXDTO.mainInfo.Свойства().Получить("exportCountry") = Неопределено И ЗначениеЗаполнено(ДокументXDTO.mainInfo.exportCountry) Тогда
			СтранаМира = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьСтрануПоКоду(ДокументXDTO.mainInfo.exportCountry);
			Если ЗначениеЗаполнено(СтранаМира) Тогда
				ДокументОбъект.СтранаОтправления = СтранаМира;
			КонецЕсли;
		КонецЕсли;
		
		Если ДокументXDTO.mainInfo.customDocument.docType = "DECLARATION" Тогда
			ДокументОбъект.ТипДокументаТаможенногоОформления = Перечисления.ТипДокументаТаможенногоОформленияИСМПТК.ДекларацияНаТовары;
		ИначеЕсли ДокументXDTO.mainInfo.customDocument.docType = "STATEMENT" Тогда
			ДокументОбъект.ТипДокументаТаможенногоОформления = Перечисления.ТипДокументаТаможенногоОформленияИСМПТК.ЗаявлениеОВыпускеТоваров;
		КонецЕсли;
		
		ДокументОбъект.НомерДокументаТаможенногоОформления = ДокументXDTO.mainInfo.customDocument.regNumber;
		ДокументОбъект.ДатаДокументаТаможенногоОформления  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СтрокаВДату(ДокументXDTO.mainInfo.customDocument.regDate, Истина);
		
		ДокументОбъект.КодРешенияТаможенногоОргана = ДокументXDTO.mainInfo.customDecisionInfo.decisionCode;
		ДокументОбъект.КодТаможенногоОргана = ДокументXDTO.mainInfo.customDecisionInfo.customCode;
		ДатаИВремяРешения = УниверсальноеВремя(ПрочитатьДатуJSON(ДокументXDTO.mainInfo.customDecisionInfo.decisionDateTime, ФорматДатыJSON.ISO));
		ДокументОбъект.ДатаВремяПринятияРешения = ДатаИВремяРешения;
		
		Если ТипЗнч(ДокументXDTO.mainInfo.certificationInfo) = Тип("ОбъектXDTO") Тогда
			
			ДокументОбъект.ДокументыСоответствия.Очистить();
			certificationInfo = ДокументXDTO.mainInfo.certificationInfo;
			НоваяСтрока = ДокументОбъект.ДокументыСоответствия.Добавить();
			НоваяСтрока.ТипДокумента = certificationInfo.docType;
			НоваяСтрока.ДатаДокумента = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СтрокаВДату(certificationInfo.DocDate, Истина);
			НоваяСтрока.НомерДокумента = certificationInfo.DocNumber;
			
		ИначеЕсли ТипЗнч(ДокументXDTO.mainInfo.certificationInfo)=Тип("СписокXDTO") Тогда
			
			ДокументОбъект.ДокументыСоответствия.Очистить();
			
			Для каждого СтрокаXDTO Из ДокументXDTO.mainInfo.certificationInfo Цикл
				certificationInfo = СтрокаXDTO;
				НоваяСтрока = ДокументОбъект.ДокументыСоответствия.Добавить();
				НоваяСтрока.ТипДокумента   = certificationInfo.docType;
				НоваяСтрока.ДатаДокумента  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СтрокаВДату(certificationInfo.DocDate, Истина);
				НоваяСтрока.НомерДокумента = certificationInfo.DocNumber;
			КонецЦикла;
			
		КонецЕсли;
		
		//ДокументXDTO.productItems.item
		Если ТипЗнч(ДокументXDTO.productItems.item)=Тип("ОбъектXDTO") Тогда
			
			ДокументОбъект.Марки.Очистить();
			ДокументОбъект.Товары.Очистить();
			
			НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();   
			СтрокаXDTO = ДокументXDTO.productItems.item;
			
			НоваяСтрокаТовары = ДокументОбъект.Товары.Добавить();
			НоваяСтрокаТовары.ТНВЭД = СтрокаXDTO.product.tnved;
			НоваяСтрокаТовары.GTIN = СтрокаXDTO.product.gtin;
			НоваяСтрокаТовары.НомерПозицииВДекларацииИлиЗаявлении = СтрокаXDTO.product.itemNumber;
			НоваяСтрокаТовары.КоличествоКМ = 1;
			
			Если Не СтрокаXDTO.product.Свойства().Получить("originCountry") = Неопределено И ЗначениеЗаполнено(СтрокаXDTO.product.originCountry) Тогда
				СтранаМира = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьСтрануПоКоду(СтрокаXDTO.product.originCountry);
				Если ЗначениеЗаполнено(СтранаМира) Тогда
					НоваяСтрокаТовары.СтранаПроизводства = СтранаМира;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрокаМарки = ДокументОбъект.Марки.Добавить();
			НоваяСтрокаМарки.КодИдентификации = СтрокаXDTO.iCodeFromDeclaration;
			НоваяСтрокаМарки.GTIN = СтрокаXDTO.product.gtin;
			НоваяСтрокаМарки.Количество = 1;
			
			ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(НоваяСтрокаМарки.КодИдентификации, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
			
			Если Не ДанныеРазбора = Неопределено Тогда
				
				НоваяСтрокаМарки.ВидУпаковки 	= ДанныеРазбора.ВидУпаковки;
				НайденнаяНоменклатура = Неопределено;
				
				ЗаполнитьРеквизитыGTINПоДаннымРазбораКода(НоваяСтрокаМарки, ДанныеРазбора, НайденнаяНоменклатура);
				
				НоваяСтрокаМарки.Номенклатура = НайденнаяНоменклатура;
				
				Если Не НайденнаяНоменклатура = Неопределено
					И Не НайденнаяНоменклатура.Пустая() Тогда
					НоваяСтрокаМарки.ВидПродукции = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(НайденнаяНоменклатура);
				Иначе
					НоваяСтрокаМарки.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка");
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, НоваяСтрокаМарки, "Номенклатура, EAN, ВидПродукции");
			Иначе
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПредупреждениеПриРазбореВДокументеМожетБытьНеподходящаяПродукция();
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект.Ссылка); 
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
				ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомлениеОВвозеИзТретьихСтранПоДаннымСервера");
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			КонецЕсли;
			
			//свернуть товары
			ДокументОбъект.Товары.Свернуть("Номенклатура, ТНВЭД, СтранаПроизводства, НомерПозицииВДекларацииИлиЗаявлении, EAN, ВидПродукции, GTIN, Характеристика", "КоличествоКМ");
			
		ИначеЕсли ТипЗнч(ДокументXDTO.productItems.item)=Тип("СписокXDTO") Тогда
			
			ДокументОбъект.Марки.Очистить();
			ДокументОбъект.Товары.Очистить();
			НастройкиРазбораКодаМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйПовтИсп.НастройкиРазбораКодаМаркировки();  
			
			Для Каждого СтрокаXDTO Из ДокументXDTO.productItems.item Цикл
				
				НоваяСтрокаТовары = ДокументОбъект.Товары.Добавить();
				НоваяСтрокаТовары.ТНВЭД = СтрокаXDTO.product.tnved;
				НоваяСтрокаТовары.GTIN  = СтрокаXDTO.product.gtin;
				НоваяСтрокаТовары.НомерПозицииВДекларацииИлиЗаявлении = СтрокаXDTO.product.itemNumber;
				НоваяСтрокаТовары.КоличествоКМ = 1;
				
				Если Не СтрокаXDTO.product.Свойства().Получить("originCountry") = Неопределено И ЗначениеЗаполнено(СтрокаXDTO.product.originCountry) Тогда
					СтранаМира = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьСтрануПоКоду(СтрокаXDTO.product.originCountry);
					Если ЗначениеЗаполнено(СтранаМира) Тогда
						НоваяСтрокаТовары.СтранаПроизводства = СтранаМира;
					КонецЕсли;
				КонецЕсли;
				
				НоваяСтрокаМарки = ДокументОбъект.Марки.Добавить();
				НоваяСтрокаМарки.КодИдентификации = СтрокаXDTO.iCodeFromDeclaration;
				НоваяСтрокаМарки.GTIN = СтрокаXDTO.product.gtin;
				НоваяСтрокаМарки.Количество = 1;
				
				ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(НоваяСтрокаМарки.КодИдентификации, НастройкиРазбораКодаМаркировки.ДоступныеВидыПродукции, , НастройкиРазбораКодаМаркировки);
				
				Если Не ДанныеРазбора = Неопределено Тогда
					
					НоваяСтрокаМарки.ВидУпаковки = ДанныеРазбора.ВидУпаковки;
					НайденнаяНоменклатура = Неопределено;
					
					ЗаполнитьРеквизитыGTINПоДаннымРазбораКода(НоваяСтрокаМарки, ДанныеРазбора, НайденнаяНоменклатура);
					
					НоваяСтрокаМарки.Номенклатура = НайденнаяНоменклатура;
					
					Если Не НайденнаяНоменклатура = Неопределено
						И Не НайденнаяНоменклатура.Пустая() Тогда
						НоваяСтрокаМарки.ВидПродукции = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьВидПродукцииПоНоменклатуре(НайденнаяНоменклатура);
					Иначе
						НоваяСтрокаМарки.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ПустаяСсылка");
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, НоваяСтрокаМарки, "Номенклатура, EAN, ВидПродукции");
				Иначе
					ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПредупреждениеПриРазбореВДокументеМожетБытьНеподходящаяПродукция();
					ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект.Ссылка); 
					ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
					ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомлениеОВвозеИзТретьихСтранПоДаннымСервера");
					ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				КонецЕсли;
				
			КонецЦикла;
			//свернуть товары
			ДокументОбъект.Товары.Свернуть("Номенклатура, ТНВЭД, СтранаПроизводства, НомерПозицииВДекларацииИлиЗаявлении, EAN, ВидПродукции, GTIN, Характеристика", "КоличествоКМ");
			
		КонецЕсли;
		
		//провести документы
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		ЗафиксироватьТранзакцию();
		Успешно = Истина;
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомлениеОВвозеИзТретьихСтранПоДаннымСервера");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьАктыПослеОтправки(РезультатОтправкиДокументов, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации)
	
	Для каждого РезультатОтправки Из РезультатОтправкиДокументов Цикл
		ИнформацияОбОшибке = Неопределено;
		Если ЭтоОшибка(РезультатОтправки.Значение, ИнформацияОбОшибке) Тогда
			ЗаполнитьОшибкиДокумента(РезультатОтправки.Ключ, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОбновленииДокументаССервера() + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
			ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьАктыПослеОтправки");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			Продолжить;
		Иначе
			
			Если РаботаСДокументамиИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанныхИСМПТ() Тогда 
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументУспешноОтправленНаСервер();
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеСервера%", РаботаСТекстамиИСМПТККлиентСервер.НаименованиеИСМПТ());
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
			ОчиститьОшибкиДокумента(РезультатОтправки.Ключ);
		КонецЕсли;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(РезультатОтправки.Значение.ТекстОтвета);
		РезультатЗапроса = ПрочитатьJSON(ЧтениеJSON);
		
		// получаем id
		ИдентификаторНаСервере = ?(РезультатЗапроса.Свойство("id"), РезультатЗапроса.id, "");
		ДопДанныеДокумента 	   = ПолучитьДополнительныеДанныеПоИдентификатору(ИдентификаторНаСервере, ДанныеПрофилей, СтруктурнаяЕдиница, Истина, ТокенАвторизации);
		
		Попытка
			ДокументОбъект = РезультатОтправки.Ключ.ПолучитьОбъект();
			ДокументОбъект.Идентификатор = ИдентификаторНаСервере;
			ДокументОбъект.НомерИСМПТ 	 = ДопДанныеДокумента.НомерИСМПТ;
			ДокументОбъект.ДатаВИСМПТ 	 = ДопДанныеДокумента.ДатаВИСМПТ;
			Статус = ПолучитьСтатусДокументаПоКоду(ДопДанныеДокумента.Статус);
			Если Статус <> Неопределено Тогда
				ДокументОбъект.Статус = Статус;
			КонецЕсли;
			ДокументОбъект.Записать();
		Исключение
		    //ОписаниеОшибки()
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьУведомлениеПослеОтправки(РезультатОтправкиДокументов, ДанныеПрофилей, СтруктурнаяЕдиница, ТокенАвторизации)
	
	Для каждого РезультатОтправки Из РезультатОтправкиДокументов Цикл
		ИнформацияОбОшибке = Неопределено;
		Если ЭтоОшибка(РезультатОтправки.Значение, ИнформацияОбОшибке) Тогда
			ЗаполнитьОшибкиДокумента(РезультатОтправки.Ключ, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОтправкеДокументаПодробно() + " "
						   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПодробностиВЖурналеРегистрации();
		    ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОтправляемыйДокумент%", РезультатОтправки.Ключ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеСервера%",  РаботаСТекстамиИСМПТККлиентСервер.НаименованиеИСМПТ());
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
			ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОтправкеДокумента()
						+ Символы.ПС 
						+ ИнформацияОбОшибке.ПодробноеПредставление;
						
			ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
			ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьУведомлениеПослеОтправки");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
			Продолжить;
		Иначе
			
			Если РаботаСДокументамиИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанныхИСМПТ() Тогда 
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументУспешноОтправленНаСервер();
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеСервера%", РаботаСТекстамиИСМПТККлиентСервер.НаименованиеИСМПТ());
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
			ОчиститьОшибкиДокумента(РезультатОтправки.Ключ);	
		КонецЕсли;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(РезультатОтправки.Значение.ТекстОтвета);
		РезультатЗапроса = ПрочитатьJSON(ЧтениеJSON);
		
		ИдентификаторНаСервере = ?(РезультатЗапроса.Свойство("id"), РезультатЗапроса.id, "");
		ДопДанныеДокумента = ПолучитьДополнительныеДанныеПоИдентификатору(ИдентификаторНаСервере, ДанныеПрофилей, СтруктурнаяЕдиница, Ложь, ТокенАвторизации);
		
		Попытка
			ДокументОбъект = РезультатОтправки.Ключ.ПолучитьОбъект();
			ДокументОбъект.Идентификатор = ИдентификаторНаСервере;
			ДокументОбъект.НомерИСМПТ = ДопДанныеДокумента.НомерИСМПТ;
			ДокументОбъект.ДатаВИСМПТ = ДопДанныеДокумента.ДатаВИСМПТ;
			Статус = ПолучитьСтатусДокументаПоКоду(ДопДанныеДокумента.Статус);
			Если Статус <> Неопределено Тогда
				ДокументОбъект.Статус = Статус;
			КонецЕсли;
			ДокументОбъект.Записать();
		Исключение
			//ОписаниеОшибки()
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

//Обновляет статус в документе
Процедура ОбновитьСтатусДокумента(СсылкаНаДокумент, НовыйСтатус)
	
	Если Не ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();
		ДокументОбъект.Статус = НовыйСтатус;
		ДокументОбъект.Записать();
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстСообщения = НСтр("ru = 'При обновлении статуса документа возникла ошибка:'")
		 			   + Символы.ПС
					   + ПодробноеПредставлениеОшибки;
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
		
КонецПроцедуры

#КонецОбласти

#Область ПолучитьИСМПТ

// получение входящих актов с сервера GET /edo-api/incoming-documents
// 
Функция ПолучитьСписокВходящихДокументов(Параметры, СтруктурнаяЕдиница, ТокенАвторизации = Неопределено) Экспорт
	
	Возврат ЭлектронноеВзаимодействиеССервисамиМаркировка.ПолучитьСписокВходящихДокументов(Параметры, СтруктурнаяЕдиница, ТокенАвторизации);
	
КонецФункции

// получение исходящих актов с сервера GET /edo-api/outgoing-documents
// 
Функция ПолучитьСписокИсходящихДокументов(Параметры, СтруктурнаяЕдиница, ТокенАвторизации = Неопределено) Экспорт
	
	Возврат ЭлектронноеВзаимодействиеССервисамиМаркировка.ПолучитьСписокИсходящихДокументов(Параметры, СтруктурнаяЕдиница, ТокенАвторизации);
	
КонецФункции

Функция ПолучитьНовыеДокументыИСМПТ(ДополнительныеПараметры, АдресРезультата = "") Экспорт
	
	МассивПрофилейИСМПТСДатойСинхронизации = ДополнительныеПараметры.МассивПрофилейИСМПТСДатойСинхронизации;
			
	Для каждого СтруктураПрофиляСинхронизации Из МассивПрофилейИСМПТСДатойСинхронизации Цикл
		
		СтруктурнаяЕдиница = СтруктураПрофиляСинхронизации.СтруктурнаяЕдиница;
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("ДатаНачалаВыгрузки",    СтруктураПрофиляСинхронизации.ДатаНачалаСинхронизацииВходящихДокументовИСМПТ);
		ПараметрыЗапроса.Вставить("ДатаОкончанияВыгрузки", СтруктураПрофиляСинхронизации.ДатаОкончанияСинхронизацииИСМПТ);
		
		ТекстСообщения = НСтр("ru = 'Начата синхронизация с ИС МПТ по организации %1...'");
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения,СтруктурнаяЕдиница); 
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
        	
		Если СтруктураПрофиляСинхронизации.ВидыДокументов = "Акты" Тогда
			//входящие документы
			РезультатВыполненияНаСервере = ПолучитьСписокВходящихДокументов(ПараметрыЗапроса, СтруктурнаяЕдиница, СтруктураПрофиляСинхронизации.ТокенАвторизации);
			СоздатьОбновитьПолученныеДокументы(СтруктурнаяЕдиница, РезультатВыполненияНаСервере, Ложь, СтруктураПрофиляСинхронизации.ТокенАвторизации);
			//исходящие документы
			РезультатВыполненияНаСервере = ПолучитьСписокИсходящихДокументов(ПараметрыЗапроса, СтруктурнаяЕдиница, СтруктураПрофиляСинхронизации.ТокенАвторизации);
			СоздатьОбновитьПолученныеДокументы(СтруктурнаяЕдиница, РезультатВыполненияНаСервере, Истина, СтруктураПрофиляСинхронизации.ТокенАвторизации);
			
		ИначеЕсли СтруктураПрофиляСинхронизации.ВидыДокументов = "УведомленияОВвозе" Тогда
			РезультатВыполненияНаСервере = ПолучитьСписокИсходящихДокументов(ПараметрыЗапроса, СтруктурнаяЕдиница, СтруктураПрофиляСинхронизации.ТокенАвторизации);
			ПолучитьДокументыУведомлениеОВвозеИзЕАЭС(СтруктурнаяЕдиница, РезультатВыполненияНаСервере, Истина, СтруктураПрофиляСинхронизации.ТокенАвторизации);
			
		ИначеЕсли СтруктураПрофиляСинхронизации.ВидыДокументов = "УведомленияОВвозеИмпорт" Тогда
			РезультатВыполненияНаСервере = ПолучитьСписокДокументовИмпорта(ПараметрыЗапроса, СтруктурнаяЕдиница, СтруктураПрофиляСинхронизации.ТокенАвторизации);
			ПолучитьДокументыУведомлениеОВвозеИзТретьихСтран(СтруктурнаяЕдиница, РезультатВыполненияНаСервере, Истина, СтруктураПрофиляСинхронизации.ТокенАвторизации);
			
		ИначеЕсли СтруктураПрофиляСинхронизации.ВидыДокументов = "УведомленияОбОтгрузке" Тогда
			РезультатВыполненияНаСервере = ПолучитьМассивДокументовИмпортаВзаимноеПризнание(СтруктурнаяЕдиница, "EAS_CROSSBORDER", 
					ПараметрыЗапроса.ДатаНачалаВыгрузки, ПараметрыЗапроса.ДатаОкончанияВыгрузки, СтруктураПрофиляСинхронизации.ТокенАвторизации);
					
			Если Не РезультатВыполненияНаСервере = Неопределено Тогда
				ПолучитьДокументыУведомленийОбОтгрузкеЕАЭС(СтруктурнаяЕдиница, РезультатВыполненияНаСервере, СтруктураПрофиляСинхронизации.ТокенАвторизации);
			КонецЕсли;
					
		КонецЕсли;
		
		//уменьшаем на одну секундку, чтобы не потерять документы
		ПараметрДата = СтруктураПрофиляСинхронизации.ДатаОкончанияСинхронизацииИСМПТ - 1;
		СохранитьПараметрыМетода(
			СтруктурнаяЕдиница, Справочники.СкладыИСЦЭДМ.ПустаяСсылка(),
			ИмяМетодаДляВидаДокументов(СтруктураПрофиляСинхронизации.ВидыДокументов),
			Перечисления.НаправленияДокументовИСМПТК.ПустаяСсылка(), 
			Перечисления.ИменаПараметровИСМПТК.СоздаватьСДаты, 
			ПараметрДата);
			
		ТекстСообщения = НСтр("ru = 'Синхронизация с ИС МПТ по организации %1 завершена.'");
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтруктурнаяЕдиница); 
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);

	КонецЦикла;
	
КонецФункции

// получение акта с сервера
// входящие - GET incoming-documents/{documentId}/base64
// исходящие - GET outgoing-documents/{documentId}/base64
Функция ПолучитьДокументСервера(Параметры, СтруктурнаяЕдиница, ТокенАвторизации) Экспорт
	
	Если Параметры.Исходящий Тогда
		ВидДокумента = "outgoing-documents";
	Иначе
		ВидДокумента = "incoming-documents";
	КонецЕсли;
	АдресРесурса = СтрШаблон("api/v3/true-api/edo-api/%1/%2/base64", ВидДокумента, Параметры.Идентификатор);
	Заголовки = Новый Соответствие();
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, , "GET", ТокенАвторизации, Истина);
	
КонецФункции

Функция ПолучитьИнформациюПоАгрегированнымКМ(Метод = "GET", URLЗапроса, ТелоЗапроса = Неопределено, Организация = Неопределено, КлючСессии, ТГ = Неопределено, ВыводитьСообщениеПриЗапросе = Истина) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ДанныеОбАгрегации",              Неопределено);
	ВозвращаемоеЗначение.Вставить("СодержимоеНедоступно",           Ложь);
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		ВозвращаемоеЗначение.ТекстОшибки = НСтр("ru = 'Не удалось подключиться к серверу ИС МПТ, требуется обновление ключа сессии: перезапустите программу.'");
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	РезультатЗапроса = ОтправитьДанныеВСервис(URLЗапроса, ТелоЗапроса, КлючСессии, Метод, ИнтеграцияИСМПТККлиентСервер.ПараметрыОтправкиHTTPЗапросов_ИСМП(""));
	РезультатОтправкиЗапроса = ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			Иначе
				ВозвращаемоеЗначение.ДанныеОбАгрегации = ДанныеОбработки;
			КонецЕсли;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 403 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Если ВыводитьСообщениеПриЗапросе Тогда
				ТекстСообщения = НСтр("ru = 'Включен учет, но не подписан договор по товарной группе %1. Обратитесь в техническую поддерку ИС МПТ.'");
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ТГ);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 404 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 500 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Если ВыводитьСообщениеПриЗапросе Тогда
				ТекстСообщения = НСтр("ru = 'Операция не выполнена: внутренняя ошибка сервера ИС МПТ. Повторите запрос позднее.'");
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
		КонецЕсли;
		
	Иначе
		ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьИнформациюПоКМ(Метод = "POST", URLЗапроса, ТелоЗапроса = Неопределено, Организация = Неопределено, КлючСессии) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ДанныеКМ",              			Неопределено);
	ВозвращаемоеЗначение.Вставить("СодержимоеНедоступно",           Ложь);
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		ВозвращаемоеЗначение.ТекстОшибки = НСтр("ru = 'Не удалось подключиться к серверу ИС МПТ, требуется обновление ключа сессии'");
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	РезультатЗапроса = ОтправитьДанныеВСервис(URLЗапроса, ТелоЗапроса, КлючСессии,	Метод, ИнтеграцияИСМПТККлиентСервер.ПараметрыОтправкиHTTPЗапросов_ИСМП(""));
	РезультатОтправкиЗапроса = ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			Иначе
				ВозвращаемоеЗначение.ДанныеКМ = ДанныеОбработки;
			КонецЕсли;
		
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 403 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
		КонецЕсли;
		
	Иначе
		ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// получения содержимого прочих документов
// GET /documents/{document_id}/info
Функция ПолучитьУведомленияВводаВывода(Параметры, СтруктурнаяЕдиница, ТокенАвторизации) Экспорт
	
	АдресРесурса = СтрШаблон("api/v3/true-api/documents/%1/info", Параметры.Идентификатор);
	Заголовки = Новый Соответствие();
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, , "GET", ТокенАвторизации, Истина);
	
КонецФункции

//Описание АПИ: Метод позволяет получить документ Отгрузки по его идентификатору. 
//Метод получает на вход идентификатор документа отгрузки в ИС МПТ и возвращает структурированный документ. Метод синхронный.
//
Функция ПолучитьУведомлениеОбОтгрузкеЕАЭС(СтруктурнаяЕдиница, ИдентификаторДокумента, ТокенАвторизации) Экспорт
	
	АдресРесурса = "api/v3/true-api/documents/import/shipment/" + ИдентификаторДокумента;
	
	Заголовки = Новый Соответствие();
	
	ИнформацияОбОшибке = Неопределено;
	
	РезультатЗапроса = ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, , "GET", ТокенАвторизации, Истина);
	
	Если ЭтоОшибка(РезультатЗапроса, ИнформацияОбОшибке) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОбновленииДокументаССервера() + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ПолучитьУведомлениеОбОтгрузкеЕАЭС");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(РезультатЗапроса.ТекстОтвета);
	СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
	
	Если СтруктураОтвета.Свойство("code") Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОбновленииДокументаССервера() + СтруктураОтвета.code + Символы.ПС + СтруктураОтвета.errors;
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ПолучитьУведомлениеОбОтгрузкеЕАЭС");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

Процедура ПолучитьДокументыУведомленийОбОтгрузкеЕАЭС(СтруктурнаяЕдиница, МассивДокументов, ТокенАвторизации) Экспорт
	
	СчетчикДокументы = 0;
	СчетчикДокументыОшибка = 0;
	
	Для Каждого ЗагружаемыйДокумент Из МассивДокументов Цикл 
		
		ДокументСервера = ПолучитьУведомлениеОбОтгрузкеЕАЭС(СтруктурнаяЕдиница, ЗагружаемыйДокумент.fileId, ТокенАвторизации);
		
		Если Не ДокументСервера = Неопределено Тогда
						
			ДокументОбъект = СоздатьОбновитьУведомлениеОбОтгрузкеЕАЭС(ДокументСервера, ЗагружаемыйДокумент.fileId);
			
			Попытка
				ДокументОбъект.Записать();
				СчетчикДокументы = СчетчикДокументы + 1;
			Исключение
				
				СчетчикДокументыОшибка = СчетчикДокументыОшибка + 1;
				
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				
				ТекстСообщения = НСтр("ru = 'При обновлении документа возникла ошибка:'")
							   + Символы.ПС
							   + ПодробноеПредставлениеОшибки; 
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если РаботаСДокументамиИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанныхИСМПТ() Тогда
		//// Вывод сообщений о результатах операции ////
		Если Не СчетчикДокументы = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Обновлено по данным сервера: %КоличествоДокументов% Уведомления(-й) об отгрузке (ЕАЭС).'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоДокументов%", СчетчикДокументы);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Не СчетчикДокументыОшибка = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось обновить по данным сервера: %КоличествоДокументов% Уведомления(-й) об отгрузке (ЕАЭС).'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоДокументов%", СчетчикДокументыОшибка);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;	
		
		Если СчетчикДокументы = 0 И СчетчикДокументыОшибка = 0 Тогда
			ТекстСообщения = НСтр("ru = 'В указанном периоде нет Уведомлений об отгрузке (ЕАЭС), требующих синхронизации.'");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		////////////////
	КонецЕсли;
	
КонецПроцедуры

//Получает с сервера документы Уведомление о ввозе из ЕАЭС
//
Процедура ПолучитьДокументыУведомлениеОВвозеИзЕАЭС(СтруктурнаяЕдиница, РезультатВыполненияНаСервере, ЭтоИсходящиеДокументы, ТокенАвторизации)
	
	ИнформацияОбОшибке = Неопределено;
	Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОбновленииДокументаССервера() + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ПолучитьДокументыУведомлениеОВвозеИзЕАЭС");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	//новый массив загружаемых документов
	Направление = ?(ЭтоИсходящиеДокументы = Истина, Перечисления.НаправленияДокументовИСМПТК.Исходящий, Перечисления.НаправленияДокументовИСМПТК.Входящий);
	ТекстОтвета = РезультатВыполненияНаСервере.ТекстОтвета;
	ОтветСервера = ТекстОтвета;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСервера);
	ОбъектXDTO = ПрочитатьJSON(ЧтениеJSON);
	
	Если ОбъектXDTO.count = 0 Тогда
		//в ответе вернулся пустой список
		Возврат;
	КонецЕсли;
	
	МассивИдентификаторов = Новый Массив;
	СоответствиеНомерам = Новый Соответствие;
	
	Для каждого ЭлементСписка Из ОбъектXDTO.items Цикл
		
		//обрабатываем только элементы с типом 1200 - Ввоз из ЕАЭС
		Если ЭлементСписка.type <> 1200 Тогда
			Продолжить;
		КонецЕсли;
		
		//делаем запрос по номеру
		ПараметрыДокумента = Новый Структура;
		ПараметрыДокумента.Вставить("Исходящий", НЕ ЭтоИсходящиеДокументы); // если документы Акт входящие, то УОР наоборот
		ПараметрыДокумента.Вставить("Идентификатор", ЭлементСписка.id);
		РезультатВыполненияНаСервере = ПолучитьДокументСервера(ПараметрыДокумента, СтруктурнаяЕдиница, ТокенАвторизации);
		
		Если РезультатВыполненияНаСервере.КодСостояния = 200 И ЗначениеЗаполнено(РезультатВыполненияНаСервере.ТекстОтвета) Тогда
			МассивИдентификаторов.Добавить(ЭлементСписка.id);
			ДанныеДокумента = Новый Структура("Номер, Дата, Статус", ЭлементСписка.number, ЭлементСписка.date, ЭлементСписка.status);
			ДанныеДокумента.Вставить("РезультатВыполненияНаСервере", РезультатВыполненияНаСервере);
			СоответствиеНомерам.Вставить(ЭлементСписка.id, ДанныеДокумента);
		Иначе
			ИнформацияОбОшибке = Неопределено;
			Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
				ТекстСообщения = НСтр("ru = 'При обращении к серверу произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
				ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ПолучитьДокументыУведомлениеОВвозеИзЕАЭС");
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	СуществующиеДокументы = Новый Соответствие;
	// Заполнить соответствие пустыми ссылками.
	ПустаяСсылка = Документы.УведомлениеОВвозеИзЕАЭСИСМПТК.ПустаяСсылка();
	
	Для Каждого ЭлементМассива Из МассивИдентификаторов Цикл
		СуществующиеДокументы.Вставить(ЭлементМассива, ПустаяСсылка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УведомлениеОВвозеИзЕАЭС.Ссылка КАК НайденнаяСсылка,
	|	УведомлениеОВвозеИзЕАЭС.Идентификатор КАК Идентификатор
	|ИЗ
	|	Документ.УведомлениеОВвозеИзЕАЭСИСМПТК КАК УведомлениеОВвозеИзЕАЭС
	|ГДЕ
	|	УведомлениеОВвозеИзЕАЭС.Идентификатор В(&Идентификаторы)";
	
	Запрос.УстановитьПараметр("Идентификаторы", МассивИдентификаторов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СуществующиеДокументы.Вставить(Выборка.Идентификатор, Выборка.НайденнаяСсылка);
	КонецЦикла;
	//уведомление о ввозе из ЕАЭС всегда являются исходящими документами
	Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий;
	МассивДокументов = Новый Массив;
	
	Для Каждого ЭлементКоллекции Из СуществующиеДокументы Цикл
		
		Идентификатор = ЭлементКоллекции.Ключ;
		Ссылка = ЭлементКоллекции.Значение;
		
		Если Ссылка.Пустая() Тогда
			
			НовыйДокумент = Документы.УведомлениеОВвозеИзЕАЭСИСМПТК.СоздатьДокумент();
			НовыйДокумент.Дата = ТекущаяДатаСеанса();
			НовыйДокумент.Идентификатор = Идентификатор;
			ДанныеДокумента = СоответствиеНомерам.Получить(Идентификатор);
			НовыйДокумент.НомерИСМПТ = ДанныеДокумента.Номер;
			НовыйДокумент.ДатаВИСМПТ = Дата(1970,1,1,0,0,0) + ДанныеДокумента.Дата;
			Статус = ПолучитьСтатусДокументаПоКоду(ДанныеДокумента.Статус);
			Если Статус <> Неопределено Тогда
				НовыйДокумент.Статус = Статус;
			КонецЕсли;
			НовыйДокумент.Направление = Направление;
			
			ТекущийПользователь = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь();
			НовыйДокумент.Автор = ТекущийПользователь;
			НовыйДокумент.Организация = СтруктурнаяЕдиница;
			
			МассивДокументов.Добавить(НовыйДокумент);
			
		Иначе
			МассивДокументов.Добавить(Ссылка.ПолучитьОбъект());
		КонецЕсли;
		
	КонецЦикла;
	
	МассивСтарыхДокументов = Новый Массив;
	Для каждого ДокументОбъект Из МассивДокументов Цикл
		Если ДокументОбъект.Ссылка.Пустая() Тогда
			ДокументОбъект.Записать();
		Иначе
			КопияДокумента = ДокументОбъект.Скопировать();
			Если КопияДокумента.Марки.Количество() = 0 Тогда
				КопияДокумента.Марки.Загрузить(ДокументОбъект.Марки.Выгрузить());
			КонецЕсли;
			ИсходныйНовый = Новый Структура;
			ИсходныйНовый.Вставить("ИсходныйОбъект", 	КопияДокумента);
			ИсходныйНовый.Вставить("ОбновленныйОбъект", ДокументОбъект);
			МассивСтарыхДокументов.Добавить(ИсходныйНовый);
		КонецЕсли;
	КонецЦикла;
	
	СчетчикДокументы = 0;
	СчетчикДокументыОшибка = 0;
	
	Для каждого ДокументОбъект Из МассивДокументов Цикл
		ДанныеДокумента = СоответствиеНомерам.Получить(ДокументОбъект.Идентификатор);
		Успешно = Ложь;
		ОбновитьУведомлениеОВвозеПоДаннымСервера(ДанныеДокумента.РезультатВыполненияНаСервере, ДокументОбъект.Ссылка, Неопределено, Успешно);
		Если Успешно Тогда
			СчетчикДокументы = СчетчикДокументы + 1;
		Иначе
			СчетчикДокументыОшибка = СчетчикДокументыОшибка + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если РаботаСДокументамиИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанныхИСМПТ() Тогда
		//// Вывод сообщений о результатах операции ////
		Если Не СчетчикДокументы = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Обновлено по данным сервера: %КоличествоДокументов% Уведомления(-й) о ввозе (ЕАЭС).'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоДокументов%", СчетчикДокументы);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Не СчетчикДокументыОшибка = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось обновить по данным сервера: %КоличествоДокументов% Уведомления(-й) о ввозе (ЕАЭС).'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоДокументов%", СчетчикДокументыОшибка);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если СчетчикДокументы = 0 И СчетчикДокументыОшибка = 0 Тогда
			ТекстСообщения = НСтр("ru = 'В указанном периоде нет Уведомлений о ввозе (ЕАЭС), требующих синхронизации.'");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		////////////////
	КонецЕсли;
	
	ИнтерфейсИСМПТК.ВосстановитьСсылочныеРеквизитыДокументов(МассивСтарыхДокументов);
	
КонецПроцедуры

//Получает с сервера документы Уведомление о ввозе из ЕАЭС
//
Процедура ПолучитьДокументыУведомлениеОВвозеИзТретьихСтран(СтруктурнаяЕдиница, РезультатВыполненияНаСервере, ЭтоИсходящиеДокументы, ТокенАвторизации)
	
	ИнформацияОбОшибке = Неопределено;
	Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОбновленииДокументаССервера() + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ПолучитьДокументыУведомлениеОВвозеИзТретьихСтран");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекстОтвета = РезультатВыполненияНаСервере.ТекстОтвета;
	ОтветСервера = ТекстОтвета;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСервера);
	СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
	
	Если СтруктураОтвета.total = 0 Тогда
		//в ответе вернулся пустой список
		Возврат;
	КонецЕсли;
	
	МассивИдентификаторов = Новый Массив;
	СоответствиеНомерам = Новый Соответствие;
	
	Для каждого ЭлементСписка Из СтруктураОтвета.results Цикл
		
		//делаем запрос по номеру
		ПараметрыДокумента = Новый Структура;
		ПараметрыДокумента.Вставить("Исходящий", НЕ ЭтоИсходящиеДокументы); // если документы Акт входящие, то УОР наоборот
		ПараметрыДокумента.Вставить("Идентификатор", ЭлементСписка.number);
		РезультатВыполненияНаСервере = ПолучитьУведомленияВводаВывода(ПараметрыДокумента, СтруктурнаяЕдиница, ТокенАвторизации);
		
		//проверяем результат на ошибки
		Если РезультатВыполненияНаСервере.КодСостояния = 404 Тогда
			//это номер акта, уведомления по нему нет
			//поэтому никаких действий делать не нужно
		ИначеЕсли РезультатВыполненияНаСервере.КодСостояния = 200 И ЗначениеЗаполнено(РезультатВыполненияНаСервере.ТекстОтвета) Тогда
			МассивИдентификаторов.Добавить(ЭлементСписка.number);
			ДанныеДокумента = Новый Структура("Номер, Дата, Статус", ЭлементСписка.number, ЭлементСписка.docDate, ЭлементСписка.status);
			ДанныеДокумента.Вставить("РезультатВыполненияНаСервере", РезультатВыполненияНаСервере);
			СоответствиеНомерам.Вставить(ЭлементСписка.number, ДанныеДокумента);
		Иначе
			ИнформацияОбОшибке = Неопределено;
			Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
				ТекстСообщения = НСтр("ru = 'При обращении к серверу произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
				ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ПолучитьДокументыУведомлениеОВвозеИзТретьихСтран");
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СуществующиеДокументы = Новый Соответствие;
	// Заполнить соответствие пустыми ссылками.
	ПустаяСсылка = Документы.УведомлениеОВвозеИзЕАЭСИСМПТК.ПустаяСсылка();
	
	Для Каждого ЭлементМассива Из МассивИдентификаторов Цикл
		СуществующиеДокументы.Вставить(ЭлементМассива, ПустаяСсылка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УведомлениеОВвозеИмпорт.Ссылка КАК НайденнаяСсылка,
	|	УведомлениеОВвозеИмпорт.Идентификатор КАК Идентификатор
	|ИЗ
	|	Документ.УведомлениеОВвозеИзТретьихСтранИСМПТК КАК УведомлениеОВвозеИмпорт
	|ГДЕ
	|	УведомлениеОВвозеИмпорт.Идентификатор В(&Идентификаторы)";
	
	Запрос.УстановитьПараметр("Идентификаторы", МассивИдентификаторов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СуществующиеДокументы.Вставить(Выборка.Идентификатор, Выборка.НайденнаяСсылка);
	КонецЦикла;
	//уведомление о ввозе по импорту всегда являются исходящими документами
	Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий;
	МассивДокументов = Новый Массив;
	
	Для Каждого ЭлементКоллекции Из СуществующиеДокументы Цикл
		
		Идентификатор = ЭлементКоллекции.Ключ;
		Ссылка = ЭлементКоллекции.Значение;
		
		Если Ссылка.Пустая() Тогда
			
			НовыйДокумент = Документы.УведомлениеОВвозеИзТретьихСтранИСМПТК.СоздатьДокумент();
			НовыйДокумент.Дата = ТекущаяДатаСеанса();
			НовыйДокумент.Идентификатор = Идентификатор;
			ДанныеДокумента = СоответствиеНомерам.Получить(Идентификатор);
			НовыйДокумент.НомерИСМПТ = ДанныеДокумента.Номер;
			НовыйДокумент.ДатаВИСМПТ = ПрочитатьДатуJSON(ДанныеДокумента.Дата, ФорматДатыJSON.ISO);
			Статус = ПолучитьСтатусДокументаУведомленияПоКоду(ДанныеДокумента.Статус);
			Если Статус <> Неопределено Тогда
				НовыйДокумент.Статус = Статус;
			КонецЕсли;
			НовыйДокумент.Направление = Направление;
			
			ТекущийПользователь = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь();
			НовыйДокумент.Автор = ТекущийПользователь;
			НовыйДокумент.Организация = СтруктурнаяЕдиница;
			
			МассивДокументов.Добавить(НовыйДокумент);
			
		Иначе
			МассивДокументов.Добавить(Ссылка.ПолучитьОбъект());
		КонецЕсли;
		
	КонецЦикла;
	
	МассивСтарыхДокументов = Новый Массив;
	Для каждого ДокументОбъект Из МассивДокументов Цикл
		Если ДокументОбъект.Ссылка.Пустая() Тогда
			ДокументОбъект.Записать();
		Иначе
			КопияДокумента = ДокументОбъект.Скопировать();
			Если КопияДокумента.Марки.Количество() = 0 Тогда
				КопияДокумента.Марки.Загрузить(ДокументОбъект.Марки.Выгрузить());
			КонецЕсли;
			ИсходныйНовый = Новый Структура;
			ИсходныйНовый.Вставить("ИсходныйОбъект", 	КопияДокумента);
			ИсходныйНовый.Вставить("ОбновленныйОбъект", ДокументОбъект);
			МассивСтарыхДокументов.Добавить(ИсходныйНовый);
		КонецЕсли;
	КонецЦикла;
	
	СчетчикДокументы = 0;
	СчетчикДокументыОшибка = 0;

	Для каждого ДокументОбъект Из МассивДокументов Цикл
		ДанныеДокумента = СоответствиеНомерам.Получить(ДокументОбъект.Идентификатор);
		Успешно = Ложь;
		ОбновитьУведомлениеОВвозеИзТретьихСтранПоДаннымСервера(ДанныеДокумента.РезультатВыполненияНаСервере, ДокументОбъект.Ссылка, Неопределено, Успешно);
		Если Успешно Тогда
			СчетчикДокументы = СчетчикДокументы + 1;
		Иначе
			СчетчикДокументыОшибка = СчетчикДокументыОшибка + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если РаботаСДокументамиИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанныхИСМПТ() Тогда
		//// Вывод сообщений о результатах операции ////
		Если Не СчетчикДокументы = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Обновлено по данным сервера: %КоличествоДокументов% Уведомления(-й) о ввозе (импорт).'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоДокументов%", СчетчикДокументы);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Не СчетчикДокументыОшибка = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось обновить по данным сервера: %КоличествоДокументов% Уведомления(-й) о ввозе (импорт).'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоДокументов%", СчетчикДокументыОшибка);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли; 
		
		Если СчетчикДокументы = 0 И СчетчикДокументыОшибка = 0 Тогда
			ТекстСообщения = НСтр("ru = 'В указанном периоде нет Уведомлений о ввозе (импорт), требующих синхронизации.'");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		////////////////
	КонецЕсли;
	
	ИнтерфейсИСМПТК.ВосстановитьСсылочныеРеквизитыДокументов(МассивСтарыхДокументов);
	
КонецПроцедуры

//Заполняет информацию об ошибках в табличную часть документа
//
Процедура ПолучитьДокументыУведомлениеОРасхождении(СтруктурнаяЕдиница, ОтветСервера, ЭтоИсходящиеДокументы, ТокенАвторизации)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСервера);
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON);
	
	Если ОбъектXDTO.count = 0 Тогда
		//в ответе вернулся пустой список
		Возврат;
	КонецЕсли;
	
	МассивИдентификаторов = Новый Массив;
	СоответствиеНомерам = Новый Соответствие;
	
	Если ТипЗнч(ОбъектXDTO.items.items) = Тип("СписокXDTO") Тогда
		
		Для каждого ЭлементСписка Из ОбъектXDTO.items.items Цикл
			
			//пропускаем элементы с типом 1000 - Акты ПП
			Если ЭлементСписка.type <> 1005 Тогда
				Продолжить;
			КонецЕсли;
			
			//делаем запрос по номеру
			ПараметрыДокумента = Новый Структура;
			ПараметрыДокумента.Вставить("Исходящий", НЕ ЭтоИсходящиеДокументы); // если документы Акт входящие, то УОР наоборот
			ПараметрыДокумента.Вставить("Идентификатор", ЭлементСписка.number);
			РезультатВыполненияНаСервере = ПолучитьДокументСервера(ПараметрыДокумента, СтруктурнаяЕдиница, ТокенАвторизации);
			
			//проверяем результат на ошибки
			Если РезультатВыполненияНаСервере.КодСостояния = 404 Тогда
				//это номер акта, уведомления по нему нет
				//поэтому никаких действий делать не нужно
			ИначеЕсли РезультатВыполненияНаСервере.КодСостояния = 200 И ЗначениеЗаполнено(РезультатВыполненияНаСервере.ТекстОтвета) Тогда
				//это номер уведомления и получено тело УОР
				МассивИдентификаторов.Добавить(ЭлементСписка.number);
				ДанныеДокумента = Новый Структура("Номер, Дата, Статус", ЭлементСписка.number, ЭлементСписка.date, ЭлементСписка.status);
				ДанныеДокумента.Вставить("РезультатВыполненияНаСервере", РезультатВыполненияНаСервере);
				СоответствиеНомерам.Вставить(ЭлементСписка.number, ДанныеДокумента);
			Иначе
				ИнформацияОбОшибке = Неопределено;
				Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
					ТекстСообщения = НСтр("ru = 'При обращении к серверу произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
					ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
					ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ПолучитьДокументыУведомлениеОРасхождении");
					ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ЭлементСписка = ОбъектXDTO.items.items;
		Если ЭлементСписка.type = 1005 Тогда
			
			//делаем запрос по номеру
			ПараметрыДокумента = Новый Структура;
			ПараметрыДокумента.Вставить("Исходящий", 	 НЕ ЭтоИсходящиеДокументы); // если документы Акт входящие, то УОР наоборот
			ПараметрыДокумента.Вставить("Идентификатор", ЭлементСписка.number);
			РезультатВыполненияНаСервере = ПолучитьДокументСервера(ПараметрыДокумента, СтруктурнаяЕдиница, ТокенАвторизации);
			
			//проверяем результат на ошибки
			Если РезультатВыполненияНаСервере.КодСостояния = 404 Тогда
				//это номер акта, уведомления по нему нет
				//поэтому никаких действий делать не нужно
			ИначеЕсли РезультатВыполненияНаСервере.КодСостояния = 200 И ЗначениеЗаполнено(РезультатВыполненияНаСервере.ТекстОтвета) Тогда
				//это номер уведомления и получено тело УОР
				МассивИдентификаторов.Добавить(ЭлементСписка.number);
				ДанныеДокумента = Новый Структура("Номер, Дата, Статус", ЭлементСписка.number, ЭлементСписка.date, ЭлементСписка.status);
				ДанныеДокумента.Вставить("РезультатВыполненияНаСервере", РезультатВыполненияНаСервере);
				СоответствиеНомерам.Вставить(ЭлементСписка.number, ДанныеДокумента);
			Иначе
				ИнформацияОбОшибке = Неопределено;
				Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
					ТекстСообщения = НСтр("ru = 'При обращении к серверу произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
					ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
					ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ПолучитьДокументыУведомлениеОРасхождении");
					ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СуществующиеДокументы = Новый Соответствие;
	// Заполнить соответствие пустыми ссылками.
	ПустаяСсылка = Документы.УведомлениеОРасхожденииИСМПТК.ПустаяСсылка();
	
	Для Каждого ЭлементМассива Из МассивИдентификаторов Цикл
		СуществующиеДокументы.Вставить(ЭлементМассива, ПустаяСсылка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УведомлениеОРасхожденииИСМПТ.Ссылка КАК НайденнаяСсылка,
	|	УведомлениеОРасхожденииИСМПТ.Идентификатор КАК Идентификатор
	|ИЗ
	|	Документ.УведомлениеОРасхожденииИСМПТК КАК УведомлениеОРасхожденииИСМПТ
	|ГДЕ
	|	УведомлениеОРасхожденииИСМПТ.Идентификатор В(&Идентификаторы)";
	
	Запрос.УстановитьПараметр("Идентификаторы", МассивИдентификаторов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СуществующиеДокументы.Вставить(Выборка.Идентификатор, Выборка.НайденнаяСсылка);
	КонецЦикла;
	
	Направление = ?(ЭтоИсходящиеДокументы, Перечисления.НаправленияДокументовИСМПТК.Входящий, Перечисления.НаправленияДокументовИСМПТК.Исходящий);
	МассивДокументов = Новый Массив;
	
	Для Каждого ЭлементКоллекции Из СуществующиеДокументы Цикл
		
		Идентификатор = ЭлементКоллекции.Ключ;
		Ссылка = ЭлементКоллекции.Значение;
		
		Если Ссылка.Пустая() Тогда
			
			НовыйДокумент = Документы.УведомлениеОРасхожденииИСМПТК.СоздатьДокумент();
			НовыйДокумент.Дата = ТекущаяДатаСеанса();
			НовыйДокумент.Идентификатор = Идентификатор;
			ДанныеДокумента = СоответствиеНомерам.Получить(Идентификатор);
			НовыйДокумент.НомерИСМПТ = ДанныеДокумента.Номер;
			НовыйДокумент.ДатаВИСМПТ = Дата(1970,1,1,0,0,0) + ДанныеДокумента.Дата;
			Статус = ПолучитьСтатусДокументаПоКоду(ДанныеДокумента.Статус);
			Если Статус <> Неопределено Тогда
				НовыйДокумент.Статус = Статус;
			КонецЕсли;
			НовыйДокумент.Направление = Направление;
			
			ТекущийПользователь = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь();
			НовыйДокумент.Автор = ТекущийПользователь;
			НовыйДокумент.Организация = СтруктурнаяЕдиница;
			
			МассивДокументов.Добавить(НовыйДокумент);
			
			//Попытка
			//	НовыйДокумент.Записать();
			//	ОбновитьУведомлениеПоДаннымСервера(ДанныеДокумента.РезультатВыполненияНаСервере, НовыйДокумент.Ссылка, Неопределено);
			//Исключение
			//    //ОписаниеОшибки()
			//КонецПопытки;
			
		Иначе
			МассивДокументов.Добавить(Ссылка.ПолучитьОбъект());
			//ДанныеДокумента = СоответствиеНомерам.Получить(Идентификатор);
			//ОбновитьУведомлениеПоДаннымСервера(ДанныеДокумента.РезультатВыполненияНаСервере, Ссылка, Неопределено);
		КонецЕсли;
		
	КонецЦикла;
	
	МассивСтарыхДокументов = Новый Массив;
	Для каждого ДокументОбъект Из МассивДокументов Цикл
		Если ДокументОбъект.Ссылка.Пустая() Тогда
			ДокументОбъект.Записать();
		Иначе
			КопияДокумента = ДокументОбъект.Скопировать();
			Если КопияДокумента.Марки.Количество() = 0 Тогда
				КопияДокумента.Марки.Загрузить(ДокументОбъект.Марки.Выгрузить());
			КонецЕсли;
			ИсходныйНовый = Новый Структура;
			ИсходныйНовый.Вставить("ИсходныйОбъект", 	КопияДокумента);
			ИсходныйНовый.Вставить("ОбновленныйОбъект", ДокументОбъект);
			МассивСтарыхДокументов.Добавить(ИсходныйНовый);
		КонецЕсли;
	КонецЦикла;
	
	СчетчикДокументы = 0;
	СчетчикДокументыОшибка = 0;
	
	Для каждого ДокументОбъект Из МассивДокументов Цикл
		ДанныеДокумента = СоответствиеНомерам.Получить(ДокументОбъект.Идентификатор);
		Успешно = Ложь;
		ОбновитьУведомлениеПоДаннымСервера(ДанныеДокумента.РезультатВыполненияНаСервере, ДокументОбъект.Ссылка, Неопределено, Успешно);
		Если Успешно Тогда
			СчетчикДокументы = СчетчикДокументы + 1;
		Иначе
			СчетчикДокументыОшибка = СчетчикДокументыОшибка + 1;
		КонецЕсли;		
	КонецЦикла;
	
	Если РаботаСДокументамиИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанныхИСМПТ() Тогда
		//// Вывод сообщений о результатах операции ////
		Если Не СчетчикДокументы = 0 Тогда
			Если ЭтоИсходящиеДокументы Тогда
				ТекстСообщения = НСтр("ru = 'Обновлено по данным сервера: %КоличествоДокументов% Уведомления(-й) о расхождениях (входящий).'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Обновлено по данным сервера: %КоличествоДокументов% Уведомления(-й) о расхождениях (исходящий).'");
			КонецЕсли;
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоДокументов%", СчетчикДокументы);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Не СчетчикДокументыОшибка = 0 Тогда
			Если ЭтоИсходящиеДокументы Тогда
				//Для УОР это входящие
				ТекстСообщения = НСтр("ru = 'Не удалось обновить по данным сервера: %1 Уведомления(-й) о расхождениях (входящий).'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Не удалось обновить по данным сервера: %1 Уведомления(-й) о расхождениях (исходящий).'");
			КонецЕсли;
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СчетчикДокументыОшибка);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если СчетчикДокументы = 0 И СчетчикДокументыОшибка = 0 Тогда
			Если ЭтоИсходящиеДокументы Тогда
				ТекстСообщения = НСтр("ru = 'В указанном периоде нет Уведомлений о расхождениях (входящих), требующих синхронизации.'");
			Иначе
				ТекстСообщения = НСтр("ru = 'В указанном периоде нет Уведомлений о расхождениях (исходящих), требующих синхронизации.'");
			КонецЕсли;
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		////////////////
	КонецЕсли;

	ИнтерфейсИСМПТК.ВосстановитьСсылочныеРеквизитыДокументов(МассивСтарыхДокументов);
	
КонецПроцедуры

// получение документом уведомление о ввозе из третьих стран (Импорт) с сервера GET /doc/listV2
// 
Функция ПолучитьСписокДокументовИмпорта(Параметры, СтруктурнаяЕдиница, ТокенАвторизации = Неопределено) Экспорт
	
	Возврат ЭлектронноеВзаимодействиеССервисамиМаркировка.ПолучитьСписокДокументовИмпорта(Параметры, СтруктурнаяЕдиница, ТокенАвторизации);
	
КонецФункции

//Метод получает массив документов из ИС МПТ по заданному параметру:
//- только Уведомление о приемке товаров ЕАЭС 
//- только Уведомление об отгрузке товаров ЕАЭС
//- оба уведомления сразу
Функция ПолучитьМассивДокументовИмпортаВзаимноеПризнание(СтруктурнаяЕдиница, ТипДокумента = "EAS_CROSSBORDER_GROUP", ДатаНачала, ДатаОкончания, ТокенАвторизации) Экспорт
	
	ИнформацияОбОшибке = Неопределено;
	
	РезультатЗапроса = ЭлектронноеВзаимодействиеССервисамиМаркировка.ПолучитьМассивДокументовИмпортаВзаимноеПризнание(СтруктурнаяЕдиница, ТипДокумента, ДатаНачала, ДатаОкончания, ТокенАвторизации);
	
	Если ЭтоОшибка(РезультатЗапроса, ИнформацияОбОшибке) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОбновленииДокументаССервера() + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ПолучитьМассивДокументовИмпортаВзаимноеПризнание");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(РезультатЗапроса.ТекстОтвета);
	СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
	
	Если СтруктураОтвета.Свойство("code") Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОбновленииДокументаССервера() + СтруктураОтвета.code + Символы.ПС + СтруктураОтвета.errors;
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ПолучитьМассивДокументовИмпортаВзаимноеПризнание");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураОтвета.Свойство("documents") Тогда
		Возврат СтруктураОтвета.documents;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции

Функция ПолучитьДанныеПоGTIN(GTIN, СтруктурнаяЕдиница, ТокенАвторизации) Экспорт
	
	СтруктураGTIN = Новый Структура("data", Новый Массив);
	СтруктураGTIN.data.Добавить(GTIN);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураGTIN);
	
	ТекстОтправки = ЗаписьJSON.Закрыть();
	
	АдресРесурса = "api/v3/true-api/product/route/gtin";   
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-type", "application/json");
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, ТекстОтправки, "POST", ТокенАвторизации, Истина);
	
КонецФункции

////////////////////////////////////////////////  
///////////// Статус документа /////////////

// получения содержимого прочих документов
// GET /documents/{document_id}/info
Функция ПолучитьСтатусУведомленияОбЭкспортеЕАЭС(Параметры, СтруктурнаяЕдиница, ТокенАвторизации) Экспорт
	
	АдресРесурса = СтрШаблон("api/v3/true-api/edo-api/shipments/%1/status", Параметры.Идентификатор);
	Заголовки = Новый Соответствие();
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, , "GET", ТокенАвторизации, Истина);
	
КонецФункции

// получения содержимого прочих документов
// GET documents/import/status/
Функция ПолучитьСтатусДокументаИмпортаТоваровЕАЭС(Параметры, СтруктурнаяЕдиница, ТокенАвторизации) Экспорт
	
	АдресРесурса = СтрШаблон("api/v3/true-api/documents/import/status/%1", Параметры.Идентификатор);
	Заголовки = Новый Соответствие();
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, , "GET", ТокенАвторизации, Истина);
	
КонецФункции

Функция ПолучитьСтатусДокументаУведомленияПоКоду(КодСтатуса)
	
	Если КодСтатуса = "IN_PROGRESS" Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.Проверяется;
	ИначеЕсли КодСтатуса = "CHECKED_OK" Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.Оформлен;
	ИначеЕсли КодСтатуса = "CHECKED_NOT_OK" Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.ОшибкаПриПроверке;
	ИначеЕсли КодСтатуса = "PROCESSING_ERROR" Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.ОшибкаПриОбработке;
	ИначеЕсли КодСтатуса = "UNDEFINED" Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.НеОпределен;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтатусУведомлениеОбОтгрузкеЕАЭСПоКоду(КодСтатуса) Экспорт
	
	Если КодСтатуса = "IN_PROGRESS" Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.Проверяется;
	ИначеЕсли КодСтатуса = "CHECKED_NOT_OK" Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.ОшибкаПриОбработке;
	ИначеЕсли КодСтатуса = "ACCEPTED" Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден;
	ИначеЕсли КодСтатуса = "WAIT_ACCEPTANCE" Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку;
	ИначеЕсли КодСтатуса = "CHECKED_OK" Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.Оформлен;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////  

#КонецОбласти

#Область ПодтвердитьИСМПТ

Функция ПодтвердитьВходящиеАкты_СозданиеТитулов(Знач КоллекцияСгруппированныхДокументов, Знач СписокТокеновАвторизации) Экспорт
	
	Возврат	ПодтвердитьОтклонитьАкт_СозданиеТитулов(КоллекцияСгруппированныхДокументов,, Истина, СписокТокеновАвторизации);
	
КонецФункции

Функция ПодтвердитьВходящиеАкты_ПодписьТитуловЗавершение(Знач КоллекцияСгруппированныхДокументов, Знач СписокТокеновАвторизации) Экспорт
	
	Результат = Неопределено;
	ПодтвердитьОтклонитьАкт_ПодписьТитуловЗавершение(КоллекцияСгруппированныхДокументов, СписокТокеновАвторизации);
	Возврат Результат;
	
КонецФункции

Функция ПодтвердитьОтклонитьАкт_СозданиеТитулов(КоллекцияСгруппированныхДокументов, ДанныеПрофилей = Неопределено, ЭтоПодтверждение, СписокТокеновАвторизации)
	
	ДанныеДляПодписи = Новый Соответствие();
	
	Для каждого СгруппированныеАкты Из КоллекцияСгруппированныхДокументов Цикл
		
		//получить идентификаторы запросом
		СтруктурнаяЕдиница = СгруппированныеАкты.Ключ;
		МассивДокументов = СгруппированныеАкты.Значение;
		Если МассивДокументов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК();
		Если ТипЗнч(МассивДокументов[0]) = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК") Тогда
			ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК();
		ИначеЕсли ТипЗнч(МассивДокументов[0]) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСМПТК") Тогда
			ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСМПТК();
		КонецЕсли;
		
		ТокенАвторизации = СписокТокеновАвторизации.Получить(СтруктурнаяЕдиница);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Документ.Ссылка КАК Ссылка,
		|	Документ.Идентификатор КАК Идентификатор
		|ИЗ
		|	Документ."+ИмяДокумента+" КАК Документ
		|ГДЕ
		|	Документ.Ссылка В(&МассивДокументов)
		|	И НЕ Документ.Идентификатор = """"";
		
		Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			//получаем титул в бейс64
			РезультатВыполненияНаСервере = ВыполнитьСозданиеТитулаДляПодписи(Выборка.Идентификатор, ЭтоПодтверждение, ТокенАвторизации, "", СтруктурнаяЕдиница);
			ИнформацияОбОшибке = Неопределено;
			Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
				ЗаполнитьОшибкиДокумента(Выборка.Ссылка, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
				ТекстСообщения = НСтр("ru = 'При создании титула для подписи произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
				ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ПодтвердитьОтклонитьАкт_СозданиеТитулов");
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
				Продолжить;
			Иначе
				
				Если РаботаСДокументамиИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанныхИСМПТ() Тогда 
					Если ЭтоПодтверждение Тогда
						ТекстСообщения = НСтр("ru = 'Документ успешно подтвержден.'");
					Иначе
						ТекстСообщения = НСтр("ru = 'Документ успешно отклонен.'");
					КонецЕсли;
					ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
				//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
				ОчиститьОшибкиДокумента(Выборка.Ссылка);	
			КонецЕсли;
			
			ТитулДляПодписи = РезультатВыполненияНаСервере.ТекстОтвета;
			
			СтруктураДанных = Новый Структура();
			СтруктураДанных.Вставить("ТитулДляПодписи",    ТитулДляПодписи);
			СтруктураДанных.Вставить("Токен", 			   ТокенАвторизации);
			СтруктураДанных.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
			СтруктураДанных.Вставить("СсылкаДокумент", 	   Выборка.Ссылка);
			СтруктураДанных.Вставить("ЭтоПодтверждение",   ЭтоПодтверждение);
			
			ДанныеДляПодписи.Вставить(Выборка.Идентификатор, СтруктураДанных);
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДанныеДляПодписи;
	
КонецФункции

// Процедура ПодтвердитьОтклонитьАкт()
//
// Описание: Выполняет подтверждение или отклонение актов на сервере
//
//
// Параметры 
//	ЭтоПодтверждение - Истина - выполнить подтверждение документа
//						Ложь - выполнить отклонение документа
//
Процедура ПодтвердитьОтклонитьАкт_ПодписьТитуловЗавершение(КоллекцияСгруппированныхДокументов, СписокТокеновАвторизации) Экспорт
	
	Для Каждого ДанныеДокумента Из КоллекцияСгруппированныхДокументов Цикл
		
		//отправляем подписанный
		РезультатВыполненияНаСервере = ВыполнитьПодписаниеТитула(ДанныеДокумента.Идентификатор, ДанныеДокумента.ЭтоПодтверждение, ДанныеДокумента.ПодписанныйТитул, ДанныеДокумента.ТокенАвторизации, "", ДанныеДокумента.СтруктурнаяЕдиница);
		                               
		ИнформацияОбОшибке = Неопределено;
		Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
			ЗаполнитьОшибкиДокумента(ДанныеДокумента.СсылкаДокумент, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
			ТекстСообщения = НСтр("ru = 'При подписи титула произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
			ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ПодтвердитьОтклонитьАкт_ПодписьТитуловЗавершение");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
			Продолжить;
		Иначе
			
			Если РаботаСДокументамиИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанныхИСМПТ() Тогда 
				Если ДанныеДокумента.ЭтоПодтверждение Тогда
					ТекстСообщения = НСтр("ru = 'Документ успешно подтвержден.'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Документ успешно отклонен.'");
				КонецЕсли;
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
			ОчиститьОшибкиДокумента(ДанныеДокумента.СсылкаДокумент);	
		КонецЕсли;
		
		Если РезультатВыполненияНаСервере.КодСостояния = 201 Тогда
			КодСтатуса = ?(ДанныеДокумента.ЭтоПодтверждение, 4, 5); // 4-Подписан получателем (или подтвержден), 5 - Отклонен
			ОбновитьСтатусДокумента(ДанныеДокумента.СсылкаДокумент, ПолучитьСтатусДокументаПоКоду(КодСтатуса));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //ПодтвердитьОтклонитьАкт()

#КонецОбласти

#Область ОтклонитьИСМПТ

Функция ОтклонитьВходящиеАкты_СозданиеТитулов(Знач ТипДокумента, Знач КоллекцияСгруппированныхДокументов, Знач СписокТокеновАвторизации) Экспорт
	
	Если ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК() Тогда
		Возврат ПодтвердитьОтклонитьАкт_СозданиеТитулов(КоллекцияСгруппированныхДокументов, Неопределено, Ложь, СписокТокеновАвторизации);
	ИначеЕсли ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОРасхожденииИСМПТК() Тогда
		Возврат ОтклонитьУведомление_СозданиеТитулов(КоллекцияСгруппированныхДокументов, Неопределено, СписокТокеновАвторизации);
	КонецЕсли;
	
КонецФункции

Функция ОтклонитьВходящиеАкты_ПодписьТитуловЗавершение(Знач ТипДокументаИСМПТ, Знач КоллекцияСгруппированныхДокументов, Знач СписокТокеновАвторизации) Экспорт
	
	Если ТипДокументаИСМПТ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК() Тогда
		Результат = Неопределено;
		ПодтвердитьОтклонитьАкт_ПодписьТитуловЗавершение(КоллекцияСгруппированныхДокументов, СписокТокеновАвторизации);
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

// Процедура ОтклонитьУведомление()
//
// Описание: Выполняет подтверждение или отклонение актов на сервере
//
// Параметры 
//	КоллекцияСгруппированныхДокументов - Соответствие - коллекция сгруппированных по структурным единицам документам
//	ДанныеПрофилей - Структура - данные для авторизации пользователя
//
Функция ОтклонитьУведомление_СозданиеТитулов(КоллекцияСгруппированныхДокументов, ДанныеПрофилей, СписокТокеновАвторизации)
	
	Для каждого СгруппированныеДокументы Из КоллекцияСгруппированныхДокументов Цикл
		
		//получить идентификаторы запросом
		СтруктурнаяЕдиница = СгруппированныеДокументы.Ключ;
		МассивДокументов = СгруппированныеДокументы.Значение;
		Если МассивДокументов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТокенАвторизации = СписокТокеновАвторизации.Получить(СтруктурнаяЕдиница);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УОР.Ссылка КАК Ссылка,
		|	УОР.Идентификатор КАК Идентификатор,
		|	УОР.Направление КАК Направление,
		|	УОР.НомерИСМПТ КАК НомерИСМПТ
		|ИЗ
		|	Документ.УведомлениеОРасхожденииИСМПТК КАК УОР
		|ГДЕ
		|	УОР.Ссылка В(&МассивДокументов)
		|	И НЕ УОР.Идентификатор = """"";
		
		Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			РезультатВыполненияНаСервере = ВыполнитьОтклонениеУведомленияОРасхождении(Выборка.Идентификатор, ТокенАвторизации, СтруктурнаяЕдиница);
			ИнформацияОбОшибке = Неопределено;
			
			Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
				ЗаполнитьОшибкиДокумента(Выборка.Ссылка, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
				ТекстСообщения = НСтр("ru = 'При отклонении Уведомления произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
				ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОтклонитьУведомление_СозданиеТитулов");
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
				Продолжить;
			Иначе
				
				Если РаботаСДокументамиИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанныхИСМПТ() Тогда 
					ТекстСообщения = НСтр("ru = 'Документ успешно отклонен.'");
					ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
				//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
				ОчиститьОшибкиДокумента(Выборка.Ссылка);	
			КонецЕсли;
			
			Если РезультатВыполненияНаСервере.КодСостояния = 200 Тогда
				КодСтатуса = 5; // 4-Подписан получателем (или подтвержден), 5 - Отклонен
				ОбновитьСтатусДокумента(Выборка.Ссылка, ПолучитьСтатусДокументаПоКоду(КодСтатуса));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецФункции //ОтклонитьУведомление()

// Отклонение уведомления POST /documents/edo/discrepancy/reject
Функция ВыполнитьОтклонениеУведомленияОРасхождении(ИдентификаторДокумента, ТокенАвторизации, СтруктурнаяЕдиница = Неопределено)
	
	АдресРесурса = СтрШаблон("api/v3/true-api/edo-api/incoming-documents/%1/events/reject", ИдентификаторДокумента);
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница,,, ТокенАвторизации, Истина);
	
КонецФункции

#КонецОбласти

#Область ОтозватьИСМПТ

// Создание титула (Отзыв акта поставщиком) POST /edo-api/outgoing-documents/{documentId}/events/withdraw
Функция ВыполнитьСозданиеТитулаДляОтзыва(ИдентификаторДокумента, ТокенАвторизации, Версия, СтруктурнаяЕдиница = Неопределено)
	
	АдресРесурса = СтрШаблон("api/v3/true-api/edo-api/outgoing-documents/%1/events/withdraw", ИдентификаторДокумента);
	Заголовки = Новый Соответствие();
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница,,, ТокенАвторизации, Истина);
	
КонецФункции

// Подписание титула (Отзыв акта поставщиком) POST /edo-api/outgoing-documents/{documentId}/events/signature
Функция ВыполнитьПодписаниеТитулаДляОтзыва(ИдентификаторДокумента, ПодписанныйТитул, ТокенАвторизации, Версия, СтруктурнаяЕдиница = Неопределено)
	
	АдресРесурса = СтрШаблон("api/v3/true-api/edo-api/outgoing-documents/%1/events/signature", ИдентификаторДокумента);
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "text/plain");
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, ПодписанныйТитул,, ТокенАвторизации, Истина);
	
КонецФункции

Функция ОтозватьИсходящиеДокументы_СозданиеТитулов(Знач ТипДокумента, Знач КоллекцияСгруппированныхДокументов, Знач СписокТокеновАвторизации) Экспорт
	
	Если ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК() Тогда
		Возврат ОтозватьАктыПП_СозданиеТитулов(КоллекцияСгруппированныхДокументов, СписокТокеновАвторизации);
	ИначеЕсли ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСМПТК() Тогда
		Возврат ОтозватьУведомлениеОВвозе_СозданиеТитулов(КоллекцияСгруппированныхДокументов, СписокТокеновАвторизации);
	КонецЕсли;
	
КонецФункции

// Процедура ОтозватьАктыПП()
//
// Описание: Выполняет отзыв исходящих актов на сервере
//
// Параметры 
//	КоллекцияСгруппированныхДокументов - 
//
Функция ОтозватьАктыПП_СозданиеТитулов(КоллекцияСгруппированныхДокументов, СписокТокеновАвторизации) Экспорт
	
	ДанныеДляПодписи = Новый Соответствие();
	
	Для каждого СгруппированныеАкты Из КоллекцияСгруппированныхДокументов Цикл
		
		//получить идентификаторы запросом
		СтруктурнаяЕдиница = СгруппированныеАкты.Ключ;
		МассивДокументов = СгруппированныеАкты.Значение;
		Если МассивДокументов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТокенАвторизации = СписокТокеновАвторизации.Получить(СтруктурнаяЕдиница);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АктПП.Ссылка КАК Ссылка,
		|	АктПП.Идентификатор КАК Идентификатор,
		|	АктПП.Направление КАК Направление,
		|	АктПП.НомерИСМПТ КАК НомерИСМПТ,
		|	АктПП.ТипАкта КАК ТипАкта
		|ИЗ
		|	Документ.АктПриемаПередачиИСМПТК КАК АктПП
		|ГДЕ
		|	АктПП.Ссылка В(&МассивДокументов)
		|	И НЕ АктПП.Идентификатор = """"";
		
		Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			//получаем титул в бейс64
			РезультатВыполненияНаСервере = ВыполнитьСозданиеТитулаДляОтзыва(Выборка.Идентификатор, ТокенАвторизации , "", СтруктурнаяЕдиница);
			ИнформацияОбОшибке = Неопределено;
			
			Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
				ЗаполнитьОшибкиДокумента(Выборка.Ссылка, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
				ТекстСообщения = НСтр("ru = 'При создании титула для подписи произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
				ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОтозватьАктыПП_СозданиеТитулов");
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
				Продолжить;
			Иначе
				//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
				ОчиститьОшибкиДокумента(Выборка.Ссылка);	
			КонецЕсли;
			
			ТитулДляПодписи = РезультатВыполненияНаСервере.ТекстОтвета;
			
			СтруктураДанных = Новый Структура();
			СтруктураДанных.Вставить("ТитулДляПодписи",    ТитулДляПодписи);
			СтруктураДанных.Вставить("Токен", 			   ТокенАвторизации);
			СтруктураДанных.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
			СтруктураДанных.Вставить("СсылкаДокумент", 	   Выборка.Ссылка);
			
			ДанныеДляПодписи.Вставить(Выборка.Идентификатор, СтруктураДанных);
			
		КонецЦикла;
	КонецЦикла;
	
	//Возвращаемся на клиент для подписания данных
	Возврат ДанныеДляПодписи;
	
КонецФункции

// Процедура ОтозватьАктыПП()
//
// Описание: Выполняет отзыв исходящих актов на сервере
//
// Параметры 
//	КоллекцияСгруппированныхДокументов - 
//
Функция ОтозватьУведомлениеОВвозе_СозданиеТитулов(КоллекцияСгруппированныхДокументов, СписокТокеновАвторизации) Экспорт
	
	ДанныеДляПодписи = Новый Соответствие();
	
	Для каждого СгруппированныеДокументы Из КоллекцияСгруппированныхДокументов Цикл
		
		//получить идентификаторы запросом
		СтруктурнаяЕдиница = СгруппированныеДокументы.Ключ;
		МассивДокументов = СгруппированныеДокументы.Значение;
		Если МассивДокументов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСМПТК();
		Если ТипЗнч(МассивДокументов[0]) = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК") Тогда
			ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК();
		ИначеЕсли ТипЗнч(МассивДокументов[0]) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСМПТК") Тогда
			ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСМПТК();
		ИначеЕсли ТипЗнч(МассивДокументов[0]) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСМПТК") Тогда
			ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСМПТК();
		КонецЕсли;
		
		ТокенАвторизации = СписокТокеновАвторизации.Получить(СтруктурнаяЕдиница);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УведомлениеОВвозе.Ссылка КАК Ссылка,
		|	УведомлениеОВвозе.Идентификатор КАК Идентификатор
		|ИЗ
		|	Документ." + ИмяДокумента + " КАК УведомлениеОВвозе
		|ГДЕ
		|	УведомлениеОВвозе.Ссылка В(&МассивДокументов)
		|	И НЕ УведомлениеОВвозе.Идентификатор = """"";
		
		Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			//получаем титул в бейс64
			РезультатВыполненияНаСервере = ВыполнитьСозданиеТитулаДляОтзыва(Выборка.Идентификатор, ТокенАвторизации , "", СтруктурнаяЕдиница);
			ИнформацияОбОшибке = Неопределено;
			
			Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
				ЗаполнитьОшибкиДокумента(Выборка.Ссылка, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
				ТекстСообщения = НСтр("ru = 'При создании титула для подписи произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
				ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОтозватьУведомлениеОВвозе_СозданиеТитулов");
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
				Продолжить;
			Иначе
				//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
				ОчиститьОшибкиДокумента(Выборка.Ссылка);	
			КонецЕсли;
			
			ТитулДляПодписи = РезультатВыполненияНаСервере.ТекстОтвета;
			
			СтруктураДанных = Новый Структура();
			СтруктураДанных.Вставить("ТитулДляПодписи",    ТитулДляПодписи);
			СтруктураДанных.Вставить("Токен", 			   ТокенАвторизации);
			СтруктураДанных.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
			СтруктураДанных.Вставить("СсылкаДокумент", 	   Выборка.Ссылка);
			
			ДанныеДляПодписи.Вставить(Выборка.Идентификатор, СтруктураДанных);
			
		КонецЦикла;
	КонецЦикла;
	
	//Возвращаемся на клиент для подписания данных
	Возврат ДанныеДляПодписи;
	
КонецФункции

Функция ОтозватьИсходящиеДокументы_ПодписьТитуловЗавершение(Знач КоллекцияСгруппированныхДокументов, Знач СписокТокеновАвторизации) Экспорт
	
	Для Каждого ДанныеДокумента Из КоллекцияСгруппированныхДокументов Цикл
		
		//отправляем подписанный
		РезультатВыполненияНаСервере = ВыполнитьПодписаниеТитулаДляОтзыва(ДанныеДокумента.Идентификатор, ДанныеДокумента.ПодписанныйТитул, ДанныеДокумента.ТокенАвторизации, "", ДанныеДокумента.СтруктурнаяЕдиница);
		
		ИнформацияОбОшибке = Неопределено;
		Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
			ЗаполнитьОшибкиДокумента(ДанныеДокумента.СсылкаДокумент, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
			ТекстСообщения = НСтр("ru = 'При подписи титула произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
			ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОтозватьИсходящиеДокументы_ПодписьТитуловЗавершение");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
			Продолжить;
		Иначе
			
			Если РаботаСДокументамиИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанныхИСМПТ() Тогда 
				ТекстСообщения = НСтр("ru = 'Документ успешно отозван.'");
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
			ОчиститьОшибкиДокумента(ДанныеДокумента.СсылкаДокумент);	
		КонецЕсли;
		
		Если РезультатВыполненияНаСервере.КодСостояния = 201 Тогда
			КодСтатуса = 16; // 16-Отозван
			ОбновитьСтатусДокумента(ДанныеДокумента.СсылкаДокумент, ПолучитьСтатусДокументаПоКоду(КодСтатуса));
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ИСМПТ_АПИ

#Область БалансПредприятия

Функция СоздатьСчетНаОплату(Параметры, ТокенАвторизации) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ДанныеОСчетах",                  Неопределено);
	ВозвращаемоеЗначение.Вставить("СодержимоеНедоступно",           Ложь);
	
	URLЗапроса = СтрШаблон("api/v3/true-api/elk/crm-api/prequests");
	РезультатОтправкиЗапроса = ВыполнитьСозданиеСчетаНаОплату(
		Параметры.НомерЛицевогоСчета, Параметры.Сумма, Параметры.АдресПочты, ТокенАвторизации);
	
	РезультатОтправкиЗапроса.Вставить("ОтветПолучен", ?(РезультатОтправкиЗапроса.КодСостояния = Неопределено, Ложь, Истина)); 
	
	Попытка
		ОтветСервераОбъект = ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстОтвета, Ложь);
	Исключение
		ОтветСервераОбъект = ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстОтвета, Истина);
	КонецПопытки;
	Если ОтветСервераОбъект <> Неопределено Тогда
		РезультатОтправкиЗапроса.Вставить("ТекстВходящегоСообщенияJSON", ОбъектВТекстJSON(ОтветСервераОбъект));
	Иначе
		РезультатОтправкиЗапроса.Вставить("ТекстВходящегоСообщенияJSON", РезультатОтправкиЗапроса.ТекстОтвета);
	КонецЕсли;
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Ложь);
			
			Если ДанныеОбработки = Неопределено Тогда
				ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			Иначе
				ВозвращаемоеЗначение.ДанныеОСчетах = ДанныеОбработки;
			КонецЕсли;
		
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 403 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
		КонецЕсли;
		
	Иначе
		ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получение счета на оплату по указанному лицевому счету
//
//
Функция ВыполнитьСозданиеСчетаНаОплату(ИдентификаторДоговора, Сумма, АдресПочты, ТокенАвторизации, СтруктурнаяЕдиница = Неопределено) Экспорт
	
	АдресРесурса = "api/v3/true-api/elk/crm-api/prequests";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("contractId", ИдентификаторДоговора);
	ПараметрыЗапроса.Вставить("amount",     Сумма);
	ПараметрыЗапроса.Вставить("sendto",     АдресПочты);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ПараметрыЗапроса);
	ТекстОтправки = ЗаписьJSON.Закрыть();
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, ТекстОтправки, , ТокенАвторизации);
	
КонецФункции

#КонецОбласти

#Область ОтправкаДокументовИСМПТ

// Проверяет корректность заполнения документов для отправки в ИС МПТ.
//
// Параметры:
//  МассивИсходящихДокументовИСМПТ - Массив - Массив документов, 
//   у которых необходимо проверить корректность заполнения.
//   Каждый элемент массива должен иметь тип "ДокументСсылка./Имя документа ИСМПТ/".
//	 ВАЖНО! Массив изменяется внутрии функции, Знач не устанавливаем перед объявлением переменной
//  ПоказыватьСообщения - Булево - Показывать сообщения об ошибках,
//   выявленных в ходе проверки, или не показывать.
//  ТекстыСообщений - Соответствие - Тексты ошибок, выявленных в ходе проверки.
//   |- Ключ - ДокументСсылка./Имя документа ИСМПТ/ - Документ, для которого найдены ошибки.
//   |- Значение - Соответствие - Тексты найденных ошибок.
//       |- Ключ - Строка - Путь к полю, в котором найдена ошибка.
//       |- Значение - Строка - Текст ошибки.
//
// Возвращаемое значение:
//  Булево - Возможность отправки всех документов ИСМПТ.
//   Истина - Если все документы из массива можно отправлять. 
//   Ложь - Если хотя бы один документ нельзя отправлять.
//
Функция ПроверитьВозможностьОтправкиДокументовПоставитьВОчередьОтправкиДокументИСМПТ(МассивИсходящихДокументовИСМПТ, ДополнительныеПараметры) Экспорт
    
	МассивИсключаемыхДокументовИСМПТ = Новый Массив;

	НеПерезаполнятьОчередьОтправки = ДополнительныеПараметры.Свойство("НеПерезаполнятьОчередьОтправки");
	
	СообщениеПользователю = Новый СообщениеПользователю;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивИсходящихДокументовИСМПТ", МассивИсходящихДокументовИСМПТ);
	
	МассивИсключаемыхСтатусов = Новый Массив;
	//АПП:
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыДокументовИСМПТК.Отозван);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыДокументовИСМПТК.Отклонен);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыДокументовИСМПТК.Отправлен);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыДокументовИСМПТК.Аннулирован);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыДокументовИСМПТК.НаСогласовании);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден);
	//Уведомления:
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыДокументовИСМПТК.Оформлен);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыДокументовИСМПТК.Проверяется);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыДокументовИСМПТК.Новое);
	
	Запрос.УстановитьПараметр("Статусы", МассивИсключаемыхСтатусов);
	
	Если ТипЗнч(МассивИсходящихДокументовИСМПТ[0]) = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК") Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаДокументИСМПТ_Общий(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК());
		
	ИначеЕсли ТипЗнч(МассивИсходящихДокументовИСМПТ[0]) = Тип("ДокументСсылка.УведомлениеОРасхожденииИСМПТК") Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаДокументИСМПТ_Общий(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОРасхожденииИСМПТК());		
		
	ИначеЕсли ТипЗнч(МассивИсходящихДокументовИСМПТ[0]) = Тип("ДокументСсылка.УведомлениеОВводеВОборотИСМПТК") Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаДокументИСМПТ_Общий(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСМПТК());
		
	ИначеЕсли ТипЗнч(МассивИсходящихДокументовИСМПТ[0]) = Тип("ДокументСсылка.УведомлениеОВыводеИзОборотаИСМПТК") Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаДокументИСМПТ_Общий(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСМПТК());
		
	ИначеЕсли ТипЗнч(МассивИсходящихДокументовИСМПТ[0]) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСМПТК") Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаДокументИСМПТ_Общий(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСМПТК());
		
	ИначеЕсли ТипЗнч(МассивИсходящихДокументовИСМПТ[0]) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСМПТК") Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаДокументИСМПТ_Общий(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСМПТК());
		
	ИначеЕсли ТипЗнч(МассивИсходящихДокументовИСМПТ[0]) = Тип("ДокументСсылка.УведомлениеОбЭкспортеЕАЭСИСМПТК") Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаДокументИСМПТ_Общий(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОбЭкспортеЕАЭСИСМПТК());
		
	ИначеЕсли ТипЗнч(МассивИсходящихДокументовИСМПТ[0]) = Тип("ДокументСсылка.УведомлениеОбЭкспортеЕАЭСИСМПТК") Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаДокументИСМПТ_Общий(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОбЭкспортеЕАЭСИСМПТК());
		
	ИначеЕсли ТипЗнч(МассивИсходящихДокументовИСМПТ[0]) = Тип("ДокументСсылка.УведомлениеОПриемкеЕАЭСИСМПТК") Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаДокументИСМПТ_Общий(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОПриемкеЕАЭСИСМПТК());
 		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл		
		
		МассивИсключаемыхДокументовИСМПТ.Добавить(ВыборкаДетальныеЗаписи.СсылкаДокументИСМПТ);
		
		Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда  		
			ТекстСообщения = НСтр("ru = 'Документ ""%1"" со статусом ""%2"" исключен из пакета отправки, т.к. отправке подлежат только документы со статусами: ""%3"", ""%4"", ""%5"", ""%6"", ""%7""'");
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения,
																										   ВыборкаДетальныеЗаписи.СсылкаДокументИСМПТ,
																										   ВыборкаДетальныеЗаписи.Статус,
																										   Перечисления.СтатусыДокументовИСМПТК.Черновик,
																										   Перечисления.СтатусыДокументовИСМПТК.Ошибка,
																										   Перечисления.СтатусыДокументовИСМПТК.ОшибкаПриПроверке,
																										   Перечисления.СтатусыДокументовИСМПТК.ОшибкаПриОбработке);
			
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаДокументИСМПТ Из МассивИсключаемыхДокументовИСМПТ Цикл		
		
		ИндексСтроки = МассивИсходящихДокументовИСМПТ.Найти(СтрокаДокументИСМПТ);		
		Если НЕ ИндексСтроки = Неопределено Тогда			
			МассивИсходящихДокументовИСМПТ.Удалить(ИндексСтроки);		
		КонецЕсли;		
		
	КонецЦикла;
	
	Для Каждого СсылкаДокументИСМПТ Из МассивИсходящихДокументовИСМПТ Цикл
		
		РезультатПроверки = РаботаСДокументамиИСМПТК.ПроверитьДокументИСМПТ(СсылкаДокументИСМПТ);
		РаботаСДокументамиИСМПТК.СообщитьОбнаруженыОшибки(СсылкаДокументИСМПТ, РезультатПроверки);
		
		Если РезультатПроверки.ЗапрещающиеОшибки.Количество() <> 0 Тогда
			Возврат Ложь;	
		КонецЕсли;
		
	КонецЦикла;	
		
	Возврат МассивИсходящихДокументовИСМПТ.Количество() > 0;
	
КонецФункции

Функция ПолучитьТекстЗапросаДокументИСМПТ_Общий(ИмяДокумента)

	Текст = "ВЫБРАТЬ
	|	ДокументИС.Ссылка КАК СсылкаДокументИСМПТ,
	|	ДокументИС.Статус КАК Статус
	|ИЗ
	|	Документ.%ИмяДокумента% КАК ДокументИС
	|ГДЕ
	|	ДокументИС.Ссылка В(&МассивИсходящихДокументовИСМПТ) 
	|	И ДокументИС.Статус В (&Статусы)";

	Возврат СтрЗаменить(Текст, "%ИмяДокумента%", ИмяДокумента);
	
КонецФункции

#КонецОбласти

#Область ОтправкаДокументовСУЗ

// Проверяет корректность заполнения документов для отправки в СУЗ.
//
// Параметры:
//  МассивИсходящихДокументовИСМПТ - Массив - Массив документов, 
//   у которых необходимо проверить корректность заполнения.
//   Каждый элемент массива должен иметь тип "ДокументСсылка./Имя документа ИСМПТ/".
//	 ВАЖНО! Массив изменяется внутрии функции, Знач не устанавливаем перед объявлением переменной
//  ПоказыватьСообщения - Булево - Показывать сообщения об ошибках,
//   выявленных в ходе проверки, или не показывать.
//  ТекстыСообщений - Соответствие - Тексты ошибок, выявленных в ходе проверки.
//   |- Ключ - ДокументСсылка./Имя документа ИСМПТ/ - Документ, для которого найдены ошибки.
//   |- Значение - Соответствие - Тексты найденных ошибок.
//       |- Ключ - Строка - Путь к полю, в котором найдена ошибка.
//       |- Значение - Строка - Текст ошибки.
//
// Возвращаемое значение:
//  Булево - Возможность отправки всех документов ИСМПТ.
//   Истина - Если все документы из массива можно отправлять. 
//   Ложь - Если хотя бы один документ нельзя отправлять.
//
Функция ПроверитьВозможностьОтправкиДокументовПоставитьВОчередьОтправкиДокументСУЗ(МассивИсходящихДокументовСУЗ, ДополнительныеПараметры) Экспорт

	МассивИсключаемыхДокументовСУЗ = Новый Массив;

	НеПерезаполнятьОчередьОтправки = ДополнительныеПараметры.Свойство("НеПерезаполнятьОчередьОтправки");
	
	СообщениеПользователю = Новый СообщениеПользователю;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивИсходящихДокументовСУЗ", МассивИсходящихДокументовСУЗ);
	
	МассивИсключаемыхСтатусов = Новый Массив;
	//Заказы:
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.ПринятКОбработке);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.ПодтвержденИСМП);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.НеПодтвержденИСМП);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.ПринятКПроизводству);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.КодыМаркировкиЭмитированы);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.КодыМаркировкиЭмитированыЧастично);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Выполнен);
	//Отчеты:
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.ВОжидании);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.Отклонен);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.Отправлен);
	
	Запрос.УстановитьПараметр("Статусы", МассивИсключаемыхСтатусов);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	Если ТипЗнч(МассивИсходящихДокументовСУЗ[0]) = Тип("ДокументСсылка.ЗаказКодовМаркировкиСУЗИСМПТК") Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаДокументСУЗ_Общая(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаЗаказКодовМаркировкиСУЗИСМПТК());
		
	ИначеЕсли ТипЗнч(МассивИсходящихДокументовСУЗ[0]) = Тип("ДокументСсылка.АгрегацияКодовМаркировкиСУЗИСМПТК") Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаДокументСУЗ_Общая(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАгрегацияКодовМаркировкиСУЗИСМПТК());
		
	ИначеЕсли ТипЗнч(МассивИсходящихДокументовСУЗ[0]) = Тип("ДокументСсылка.НанесениеКодовМаркировкиСУЗИСМПТК") Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаДокументСУЗ_Общая(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаНанесениеКодовМаркировкиСУЗИСМПТК());
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		МассивИсключаемыхДокументовСУЗ.Добавить(ВыборкаДетальныеЗаписи.СсылкаДокументИСМПТ);
		
		Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
			
			ТекстСообщения = НСтр("ru = 'Документ ""%1"" со статусом ""%2"" исключен из пакета отправки. Отправке подлежат документы со статусом ""%3"", не отправлявшиеся ранее.'");
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаДетальныеЗаписи.СсылкаДокументИСМПТ, ВыборкаДетальныеЗаписи.Статус, Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Черновик);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаДокументИСМПТ Из МассивИсключаемыхДокументовСУЗ Цикл		
		
		ИндексСтроки = МассивИсходящихДокументовСУЗ.Найти(СтрокаДокументИСМПТ);		
		Если НЕ ИндексСтроки = Неопределено Тогда			
			МассивИсходящихДокументовСУЗ.Удалить(ИндексСтроки);		
		КонецЕсли;		
		
	КонецЦикла;
	
	Для Каждого СсылкаДокументИСМПТ Из МассивИсходящихДокументовСУЗ Цикл
		
		РезультатПроверки = РаботаСДокументамиИСМПТК.ПроверитьДокументСУЗ(СсылкаДокументИСМПТ);
		РаботаСДокументамиИСМПТК.СообщитьОбнаруженыОшибки(СсылкаДокументИСМПТ, РезультатПроверки);
		
		Если РезультатПроверки.ЗапрещающиеОшибки.Количество() <> 0 Тогда
			Возврат Ложь;	
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаДокументСУЗ Из МассивИсключаемыхДокументовСУЗ Цикл
		
		ИндексСтроки = МассивИсходящихДокументовСУЗ.Найти(СтрокаДокументСУЗ);
		Если НЕ ИндексСтроки = Неопределено Тогда
			МассивИсходящихДокументовСУЗ.Удалить(ИндексСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивИсходящихДокументовСУЗ.Количество() > 0;
	
КонецФункции

Функция ПолучитьТекстЗапросаДокументСУЗ_Общая(ИмяДокумента)
	
	Текст = "ВЫБРАТЬ
	|	ДокументСУЗ.Ссылка КАК СсылкаДокументИСМПТ,
	|	ДокументСУЗ.Статус КАК Статус
	|ИЗ
	|	Документ.%ИмяДокумента% КАК ДокументСУЗ
	|ГДЕ
	|	ДокументСУЗ.Ссылка В(&МассивИсходящихДокументовСУЗ)
	|	И (ДокументСУЗ.Статус В(&Статусы)
	|	ИЛИ НЕ ДокументСУЗ.OrderID = &ПустаяСтрока)";
	
	Возврат СтрЗаменить(Текст, "%ИмяДокумента%", ИмяДокумента);
	
КонецФункции

#КонецОбласти

#Область РаботаСЗаказомКМ

Процедура ОтметитьВыгрузкуКодовМаркировкиЗаказа(СписокКодов) Экспорт 
	
	Для Каждого СтрокаКод Из СписокКодов Цикл
		НаборДанныхДляОбновления = РегистрыСведений.ПулКодовМаркировкиСУЗИСМПТК.СоздатьНаборЗаписей();
		НаборДанныхДляОбновления.Отбор.ХешСуммаКодаИдентификации.Установить(ОбщегоНазначенияИСМПТК.ХэшСуммаСтроки(СтрокаКод.КодИдентификации));
		НаборДанныхДляОбновления.Прочитать();
		НаборДанныхДляОбновления[0].ДатаВыгрузки = ТекущаяДатаСеанса();
		НаборДанныхДляОбновления.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСписокЗависшихЗаказовСУЗ(Организация) Экспорт
	
	Запрос = Новый Запрос();
	ТекстЗапроса = "ВЫБРАТЬ
	|	СтатусыЗаказовИСМПТК.ЗаказНаЭмиссию КАК Заказ
	|ИЗ
	|	РегистрСведений.СтатусыЗаказовИСМПТК КАК СтатусыЗаказовИСМПТК
	|ГДЕ
	|	СтатусыЗаказовИСМПТК.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПодзаказовКодовМаркировкиСУЗИСМПТК.Запрошен)
	|	<Организация>
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатусыЗаказовИСМПТК.ЗаказНаЭмиссию";
				   
	Если ЗначениеЗаполнено(Организация) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<Организация>", "И СтатусыЗаказовИСМПТК.ЗаказНаЭмиссию.Организация = &Организация");
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Организация", Организация);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<Организация>", "");
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли;

	СписокЗависшихЗаказовСУЗ = Новый Массив();
	Выборка	= Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		СписокЗависшихЗаказовСУЗ.Добавить(Выборка.Заказ);
	КонецЦикла;
	
	Возврат СписокЗависшихЗаказовСУЗ;
	
КонецФункции

#КонецОбласти

Функция СверитьКИВходящегоДокумента(БИНОрганизации, СтруктурнаяЕдиница, ИДДокумента, МассивКИ, ТокенАвторизации = Неопределено) Экспорт
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("documentId", Число(ИДДокумента));
	ПараметрыЗапроса.Вставить("codes", МассивКИ);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("InnBin", БИНОрганизации);
	Заголовки.Вставить("Commoditygroup", "pharma");
	
	Возврат ЭлектронноеВзаимодействиеССервисамиМаркировка.СверитьКИВходящегоДокумента(ПараметрыЗапроса, Заголовки, СтруктурнаяЕдиница, ТокенАвторизации);
	
КонецФункции 

Процедура ПолучитьСписокМарокДокумента(ИДДокумента, БИН, СтруктурнаяЕдиница, РазмерБлока = 500, Страница = 1, ТаблицаКодов, ТокенАвторизации) Экспорт
	
	АдресРесурса = "apiUot/api/v2/private/document/codes/" + ИДДокумента;
	
	Параметры = Новый Структура("limit, page, type", РазмерБлока, Страница, 3);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Параметры);
	
	ТекстОтправки = ЗаписьJSON.Закрыть();
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Innbin", БИН);
	Заголовки.Вставить("Commoditygroup", "pharma");
	
	ОтветСервера = ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, ТекстОтправки, , ТокенАвторизации, Ложь);
	
	ИнформацияОбОшибке = Неопределено;
	Если ЭтоОшибкаИСЦЭДМ(ОтветСервера, ИнформацияОбОшибке) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриПолученииДанныхССервера() + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		ИдЗапроса = "";
		Если ОтветСервера.Свойство("ИдентификаторЗапроса", ИдЗапроса) Тогда 
			ТекстСообщения = ТекстСообщения
						   + Символы.ПС
						   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИдентификаторЗапросаКСерверу();
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИдентификатоНомер%", ИдЗапроса);
		КонецЕсли;
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ПолучитьСписокМарокДокумента");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		СтруктураДанных = Неопределено;
	Иначе 
		СтруктураДанных = ОбщегоНазначенияИСМПТК.ПреобразоватьJSON_В_МассивСтруктур(ОтветСервера.ТекстОтвета);
	КонецЕсли;
	
	Если Не СтруктураДанных = Неопределено Тогда
		
		СписокКодов = СтруктураДанных.rows;
		
		Для Каждого КодВходящий Из СписокКодов Цикл 
			Если КодВходящий.aggregate = "" Тогда 
				
				НоваяСтрока = ТаблицаКодов.Добавить();
				НоваяСтрока.ВидУпаковки 		= ПолучитьВидУпаковкиПоИдентификаторуУровня(КодВходящий.typePackage);
				НоваяСтрока.КоличествоИсточник 	= 1;
				НоваяСтрока.Количество			= 1;
				Если Не КодВходящий.child = Неопределено Тогда
					НоваяСтрока.Количество = КодВходящий.child.Количество();
				КонецЕсли;
				НоваяСтрока.GTIN = КодВходящий.gtin;
				НоваяСтрока.GTINВерхнегоУровня = КодВходящий.gtin;
				
				СтруктураНоменклатуры    = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, Сред(КодВходящий.GTIN, 2, 13));
				НоваяСтрока.Номенклатура = ?(Не СтруктураНоменклатуры = Неопределено, СтруктураНоменклатуры.Номенклатура, Неопределено);
				
				НоваяСтрока.EAN = Сред(КодВходящий.GTIN, 2, 13);
				НоваяСтрока.КодИдентификации = КодВходящий.mark;
				НоваяСтрока.ВидПродукции = Перечисления.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты;
				НоваяСтрока.СрокГодности = ОбщегоНазначенияИСМПТК.ПривестиСтрокуКДате(КодВходящий.expireDate, "дмг");
				НоваяСтрока.НомерПартии  = КодВходящий.NumberParty;
				
			КонецЕсли;
		КонецЦикла; 
		
		Если СтруктураДанных.totalPages > Страница Тогда 
			ПолучитьСписокМарокДокумента(ИДДокумента, БИН, СтруктурнаяЕдиница, РазмерБлока, Страница + 1, ТаблицаКодов, ТокенАвторизации);
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

Функция ПолучитьПустуюТаблицуКодов()
	
	ТаблицаКодов = Новый ТаблицаЗначений;
	ТаблицаКодов.Колонки.Добавить("ВидУпаковки");
	ТаблицаКодов.Колонки.Добавить("Количество");
	ТаблицаКодов.Колонки.Добавить("GTIN");
	ТаблицаКодов.Колонки.Добавить("GTINВерхнегоУровня");
	ТаблицаКодов.Колонки.Добавить("Номенклатура");
	ТаблицаКодов.Колонки.Добавить("EAN");
	ТаблицаКодов.Колонки.Добавить("КодИдентификации");
	ТаблицаКодов.Колонки.Добавить("ВидПродукции");
	ТаблицаКодов.Колонки.Добавить("СрокГодности");
	ТаблицаКодов.Колонки.Добавить("НомерПартии");
	ТаблицаКодов.Колонки.Добавить("КодМаркировки");
	ТаблицаКодов.Колонки.Добавить("КоличествоИсточник");
	
	Возврат ТаблицаКодов;
	
КонецФункции

Функция ВыполнитьМетодСервера(АдресРесурса, ДополнительныеЗаголовки, СтруктурнаяЕдиница, ТелоЗапроса = Неопределено, Метод = "POST", ТокенАвторизации = Неопределено, ИСМПТ = Истина) Экспорт
	
	Если ИСМПТ Тогда 
		ПараметрыПодключения = ИнтеграцияИСМПТККлиентСервер.ПараметрыОтправкиHTTPЗапросов_ИСМП(Неопределено, Истина);
	Иначе 
		ПараметрыПодключения = ИнтеграцияИСМПТККлиентСервер.ПараметрыОтправкиHTTPЗапросов_ИСЦЭДМ(Неопределено, Истина);	
		ДополнительныеЗаголовки.Вставить("Request-Id", Новый УникальныйИдентификатор);
	КонецЕсли;
	
	HTTPСоединение = Новый HTTPСоединение(
		ПараметрыПодключения.Сервер,
		ПараметрыПодключения.Порт, 
		, 
		, 
		,
		0,
		Новый ЗащищенноеСоединениеOpenSSL(,));
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", ТокенАвторизации));
	Если ЗначениеЗаполнено(ДополнительныеЗаголовки) Тогда
		Для каждого Заголовок Из ДополнительныеЗаголовки Цикл
			Заголовки.Вставить(Заголовок.Ключ, Заголовок.Значение);
		КонецЦикла;
	КонецЕсли; 
	
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.АдресРесурса = АдресРесурса;
	HTTPЗапрос.Заголовки = Заголовки;
	Если ЗначениеЗаполнено(ТелоЗапроса) Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли;
	
	Попытка
		
		Если Метод = "POST" Тогда
			HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		ИначеЕсли Метод = "PUT" Тогда 
			HTTPОтвет = HTTPСоединение.Записать(HTTPЗапрос);
		Иначе 
			HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
		КонецЕсли; 
		
		КодСостояния = HTTPОтвет.КодСостояния;
		ТекстОтвета = СокрЛП(HTTPОтвет.ПолучитьТелоКакСтроку());
		
	Исключение
		
		Если HTTPОтвет = Неопределено Тогда
			ОписаниеОшибкиHTTP = НСтр("ru = 'Превышен таймаут ожидания ответа от сервера'");
		Иначе
			ОписаниеОшибкиHTTP = ОписаниеОшибки();
		КонецЕсли;
		
		ОшибкаСоединения = НСтр("ru = 'При установке соединения с сервером возникла ошибка:'")
						 + Символы.ПС
						 + ОписаниеОшибкиHTTP;
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ОшибкаСоединения);
		
		ТекстОтвета = "";
		КодСостояния = Неопределено;
		
	КонецПопытки;
	
	Возврат Новый Структура("КодСостояния, ТекстОтвета, ИдентификаторЗапроса", КодСостояния, ТекстОтвета, Заголовки["Request-Id"]);
	
КонецФункции

Функция ПолучитьЗаголовкиСТокеном(Токен)
	
	headers = Новый Соответствие;
	headers.Вставить("Authorization", "Bearer " + Токен);
	headers.Вставить("Content-Type",  "application/json");
	
	Возврат headers; 
	
КонецФункции

// Заполняет документ СНТ на основании первичного документа.
//
// Параметры:
//  СсылкаПервичныйДокументСНТ - ДокументСсылка -
//   Счет-Документа, на основании которого необходимо заполнить СНТ.
//  ОбъектСНТ - ДокументОбъект.СНТ - СНТ, который необходимо заполнить.
//
Процедура ЗаполнитьИсходящийДокументИСМПТ(Знач ДокументОснованиеДляЗаполнения, ОбъектИСМПТ) Экспорт
	
	Если ДокументОснованиеДляЗаполнения = Неопределено Тогда
		Возврат
	ИначеЕсли ТипЗнч(ДокументОснованиеДляЗаполнения) = Тип("Массив") 
		И ДокументОснованиеДляЗаполнения.Количество() <> 0 Тогда
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения[0]);
	Иначе
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения);
	КонецЕсли;
	
	ПараметрыЗаполнения = РаботаСДокументамиИСМПТК.ПолучитьПараметрыЗаполненияДокументовИСМПТПоУмолчанию();
	
	ДатаДокумента = ДокументОснованиеДляЗаполнения.Дата;
	
	ПараметрыЗаполнения.Вставить("ДатаНачала",    НачалоДня(ДатаДокумента));
	ПараметрыЗаполнения.Вставить("ДатаОкончания", КонецДня(ДатаДокумента));
	
	ПараметрыЗаполнения.Вставить("МассивДокументов", 	 ДокументОснованиеДляЗаполнения);
	ПараметрыЗаполнения.Вставить("МассивВидовДокумента", Новый Массив);
	
	ТипДокументаИСМПТ = ОбъектИСМПТ.Ссылка;
	МассивДанныхДляЗаполнения = РаботаСДокументамиИСМПТК.ПодготовитьДанныеДляЗаполненияДокументаИСМПТ(ПараметрыЗаполнения, ТипДокументаИСМПТ);
	
	Если ТипЗнч(МассивДанныхДляЗаполнения) = Тип("Массив") И МассивДанныхДляЗаполнения.Количество() > 0 Тогда
		
		СтруктураДокумента = МассивДанныхДляЗаполнения[0];
		
		//Заполняем шапку документа
		ЗаполнитьЗначенияСвойств(ОбъектИСМПТ, СтруктураДокумента.Реквизиты[0]);
		
		ОбъектИСМПТ.Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий; 
		ОбъектИСМПТ.Состояние = Перечисления.СостоянияДокументовИСМПТК.Сформирован; 
		
		Если Не ТипЗнч(ОбъектИСМПТ.Ссылка) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСМПТК") Тогда
			//Заполняем табличную часть "Товары"
			Если СтруктураДокумента.Свойство("Товары") Тогда
				Для Каждого СтрокаТЧ Из СтруктураДокумента.Товары Цикл
					НоваяСтрокаТЧ = ОбъектИСМПТ.Товары.Добавить();
					НоваяСтрокаТЧ.Номенклатура = СтрокаТЧ.Номенклатура;
					НоваяСтрокаТЧ.КоличествоИсточник = СтрокаТЧ.КоличествоИсточник;
				КонецЦикла;
			Иначе
				Для Каждого СтрокаТЧ Из СтруктураДокумента.Марки Цикл
					НоваяСтрокаТЧ = ОбъектИСМПТ.Марки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьИсходящиеДокументыИСМПТ(Знач МассивИсходящихДокументов) Экспорт
	
	РаботаСДокументамиИСМПТК.ПроверитьИсходящиеДокументыИСМПТОбработка(МассивИсходящихДокументов);
	
КонецПроцедуры

Функция ПроверитьСтатусУведомления(УОР) Экспорт 
	
	Если УОР.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Черновик") 
		ИЛИ УОР.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.Ошибка") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура СоздатьДокументыАгрегацииВФоне(Параметры, АдресХранилища) Экспорт
	
	МассивУпаковок 			 = Параметры.МассивУпаковок;
	ДанныеШапки 			 = Параметры.ДанныеШапки;
	ЕмкостьУпаковки		  	 = Параметры.ЕмкостьУпаковок;
	СписокСозданныхАгрегаций = Параметры.СписокСозданныхАгрегаций;
	
	ВыполненоУспешно = Ложь;
	
	//Начинаем создание документов по полученным наборам данных
	Если Не МассивУпаковок.Количество() = 0 Тогда
		Для Каждого Набор Из МассивУпаковок Цикл
			
			НовыйДокументАгрегация = Документы.АгрегацияКодовМаркировкиСУЗИСМПТК.СоздатьДокумент();
			
			//Заполнение реквизитов шапки
			ЗаполнитьЗначенияСвойств(НовыйДокументАгрегация, ДанныеШапки);
			
			//Заполнение кода агрегата
			КоличествоФакт = Набор.МассивВложенныхТоваров.Количество();
			
			//Если код агрегата - DataMatrix, разделяем его на КМ и КИ. Если SSCC - оставляем без изменений
			ИсходныеДанные = Новый Структура();
			ИсходныеДанные.Вставить("Штрихкод", 	Набор.КодАгрегата);
			ИсходныеДанные.Вставить("ФорматBase64", Истина);
			СтруктураКодовМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(ИсходныеДанные);
			
			Если Не ТипЗнч(СтруктураКодовМаркировки) = Тип("Строка") Тогда 
				//Удалось разобрать код, значит это групповая упаковка
				КИ = СтруктураКодовМаркировки.КодИдентификации;
			Иначе
				//Это SSCC 
				КИ = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(Набор.КодАгрегата);
			КонецЕсли;
			
			СтрокаКодАгрегации = НовыйДокументАгрегация.Упаковки.Добавить();
			СтрокаКодАгрегации.ИдентификационныйКодЕдиницыАгрегации = Набор.КодАгрегата; //Это КМ в Base64
			СтрокаКодАгрегации.КодИдентификацииУпаковки  = КИ; //Это КИ, выводим в форму
			СтрокаКодАгрегации.ТипАгрегации    			 = ПредопределенноеЗначение("Перечисление.ТипыАгрегацииИСМПТК.НоваяАгрегация");
			СтрокаКодАгрегации.ЕмкостьУпаковки 			 = ?(ЕмкостьУпаковки = 0, КоличествоФакт, ЕмкостьУпаковки); 
			СтрокаКодАгрегации.ФактическоеКоличествоШтук = КоличествоФакт;
			
			НомерСтрокиАгрегата = СтрокаКодАгрегации.НомерСтроки; 
			
			//Заполнение вложенных товаров
			Для Каждого КодМаркировкиBase64 Из Набор.МассивВложенныхТоваров Цикл
				
				КодМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(КодМаркировкиBase64);
				
				//Получаем информацию для заполнения строки
				СтруктураКода 		 = Новый Структура("ШтрихКод, ФорматBase64", КодМаркировкиBase64.Значение, Истина);
				ДанныеКодаМаркировки = ИнтеграцияИСМПТКВызовСервера.ПолучитьКодыМаркировки(СтруктураКода);
				
				Если ДанныеКодаМаркировки = Неопределено Тогда
					ТекстОшибки = НСтр("ru = 'Не удалось распознать код маркировки ""%1""'");
					ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, КодМаркировки);
					ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
					Продолжить;
				ИначеЕсли ТипЗнч(ДанныеКодаМаркировки) = Тип("Строка") Тогда 
					ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ДанныеКодаМаркировки);
					Продолжить;
				КонецЕсли;
								
				СтрокаВложенныйТовар = НовыйДокументАгрегация.АгрегированныеКМ.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаВложенныйТовар, ДанныеКодаМаркировки,, "КодМаркировки");
				СтрокаВложенныйТовар.КодМаркировки 		 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(ДанныеКодаМаркировки.КодМаркировки);
				СтрокаВложенныйТовар.ИдентификаторСтроки = НомерСтрокиАгрегата;
				
			КонецЦикла;
			
			//Заполнение стандартных полей
			НовыйДокументАгрегация.Дата   = ТекущаяДатаСеанса();
			НовыйДокументАгрегация.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОтчетовСУЗИСМПТК.Черновик");
			
			НовыйДокументАгрегация.Записать();
			СписокСозданныхАгрегаций.Добавить(НовыйДокументАгрегация.Ссылка);			
		КонецЦикла;
		
		ВыполненоУспешно = Истина;
		
	КонецЕсли;
		
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("СписокСозданныхАгрегаций", СписокСозданныхАгрегаций);
	РезультатВыполнения.Вставить("Успешно",	ВыполненоУспешно);
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	
КонецПроцедуры

Функция ПолучитьСсылкуСвязанногоДокументаПриемкиДляОтгрузки(ДокументСсылкаОтгрузка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УведомлениеОПриемкеЕАЭСИСМПТК.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УведомлениеОПриемкеЕАЭСИСМПТК КАК УведомлениеОПриемкеЕАЭСИСМПТК
	|ГДЕ
	|	УведомлениеОПриемкеЕАЭСИСМПТК.ДокументОснование = &Отгрузка";
	
	Запрос.УстановитьПараметр("Отгрузка", ДокументСсылкаОтгрузка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат ПредопределенноеЗначение("Документ.УведомлениеОПриемкеЕАЭСИСМПТК.ПустаяСсылка");
	
КонецФункции

Процедура ЗавершениеПолучитьДанныеПоГрупповымКодамМаркировки_Общая(Форма, РезультатВыполнения, Направление, НеОтправлен) Экспорт
	
	Объект = Форма.Объект;
	СоответствиеГрупповыхКМ = Новый Соответствие;
	МассивГрупповыхКМ		= Новый Массив;
	
	Если Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
		СтруктураОтбора   = Новый Структура("ВидУпаковки", Перечисления.ВидыУпаковокИСМПТК.Групповая);
		СтрокиГрупповыхКМ = Объект.Марки.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого ГрупповаяКМ Из СтрокиГрупповыхКМ Цикл 
			СоответствиеГрупповыхКМ.Вставить(Новый Структура("КИ, ВипУпаковки", ГрупповаяКМ.КодИдентификации, ГрупповаяКМ.ВидУпаковки), ГрупповаяКМ.ПолучитьИдентификатор());
			МассивГрупповыхКМ.Добавить(ГрупповаяКМ.КодИдентификации);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ВидУпаковки", Перечисления.ВидыУпаковокИСМПТК.Логистическая);
	МассивЛогистическихКМ = Объект.Марки.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого ЛогистическаяКМ Из МассивЛогистическихКМ Цикл 
		Если Константы.ПоддержкаДвойногоФорматаТранспортныхКодовИСМПТК.Получить() Тогда
			//В этом случае придется проверять каждый транспортный код в нескольких форматах (с/без идентификатора 00)
			//Подготавливаем данные для проверки кода в разных форматах
			ИсходныйФормат = ЛогистическаяКМ.КодИдентификации;
			Если СтрДлина(ИсходныйФормат) = 20 Тогда
				ПреобразованныйКод = Сред(ИсходныйФормат, 3); //18-значный SSCC
				ДополнительныйКод  = Неопределено;
			ИначеЕсли СтрДлина(ИсходныйФормат) = 18 Тогда
				ПреобразованныйКод = "00"   + ИсходныйФормат;
				ДополнительныйКод  = "(00)" + ИсходныйФормат;
			Иначе
				ПреобразованныйКод = Неопределено;
				ДополнительныйКод  = Неопределено;
			КонецЕсли;
			
			МассивГрупповыхКМДляПроверки = Новый Массив();
			МассивГрупповыхКМДляПроверки.Добавить(ИсходныйФормат);
			Если НЕ ПреобразованныйКод = Неопределено Тогда
				МассивГрупповыхКМДляПроверки.Добавить(ПреобразованныйКод);
			КонецЕсли;
			Если НЕ ДополнительныйКод = Неопределено Тогда
				МассивГрупповыхКМДляПроверки.Добавить(ДополнительныйКод);
			КонецЕсли;
			
			//Начинаем опрос сервера по каждому из сформированных кодов для проверки наличия на сервере информации по составу
			Для Каждого КодSSCC Из МассивГрупповыхКМДляПроверки Цикл
				СтруктураЗапрос = Новый Структура("Штрихкод, ВидУпаковки, ВидПродукции, ФорматBase64", 
										КодSSCC, Перечисления.ВидыУпаковокИСМПТК.Логистическая, Перечисления.ВидыПродукцииИСМПТК.Обувная, Ложь); //общие параметры у кодов одинаковые
										
				ТокенАвторизации = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
				ДанныеПоГрупповомуКоду = ИнтеграцияИСМПТКВызовСервера.ЗапроситьДанныеПоКодуАгрегации(СтруктураЗапрос, Объект.Организация, ТокенАвторизации, Ложь);	
				
				Если Не ЗначениеЗаполнено(ДанныеПоГрупповомуКоду.ТекстОшибки) Тогда
					
					Если Не КодSSCC = ИсходныйФормат Тогда
						//Нужно заменить исходное значение кода на тот, который вернул сервер
						СтрокаВДокументе = Объект.Марки.НайтиСтроки(Новый Структура("КодИдентификации", ИсходныйФормат));
						СтрокаВДокументе[0].КодИдентификации = КодSSCC;
						СтрокаВДокументе[0].КодМаркировки = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(КодSSCC);
						СтрокаВДокументе[0].EAN = КодSSCC;
						СоответствиеГрупповыхКМ.Вставить(Новый Структура("КИ, ВипУпаковки", КодSSCC, ЛогистическаяКМ.ВидУпаковки), ЛогистическаяКМ.ПолучитьИдентификатор());
						МассивГрупповыхКМ.Добавить(КодSSCC);
					Иначе
						СоответствиеГрупповыхКМ.Вставить(Новый Структура("КИ, ВипУпаковки", ИсходныйФормат, ЛогистическаяКМ.ВидУпаковки), ЛогистическаяКМ.ПолучитьИдентификатор());
						МассивГрупповыхКМ.Добавить(ИсходныйФормат);
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СоответствиеГрупповыхКМ.Вставить(Новый Структура("КИ, ВипУпаковки", ЛогистическаяКМ.КодИдентификации, ЛогистическаяКМ.ВидУпаковки), ЛогистическаяКМ.ПолучитьИдентификатор());
			МассивГрупповыхКМ.Добавить(ЛогистическаяКМ.КодИдентификации);
		КонецЕсли;		
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура("ВидУпаковки", Перечисления.ВидыУпаковокИСМПТК.Неопределен);
	МассивНеопознанныхКМ = Объект.Марки.НайтиСтроки(СтруктураОтбора);
	Для Каждого НеопознанныйКМ Из МассивНеопознанныхКМ Цикл 
		СоответствиеГрупповыхКМ.Вставить(Новый Структура("КИ, ВипУпаковки", НеопознанныйКМ.КодИдентификации, НеопознанныйКМ.ВидУпаковки), НеопознанныйКМ.ПолучитьИдентификатор());
		МассивГрупповыхКМ.Добавить(НеопознанныйКМ.КодИдентификации);
	КонецЦикла;
		
	Если МассивГрупповыхКМ.Количество() = 0 Тогда
		Если Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
			ТекстОшибки = НСтр("ru = 'В табличной части ""Марки"" отсутствуют коды маркировки упаковок.'"); 
		Иначе
			ТекстОшибки = НСтр("ru = 'В табличной части ""Марки"" отсутствуют транспортные коды маркировки.'"); 
		КонецЕсли;
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
			
	ТокенАвторизации = ?(ЗначениеЗаполнено(РезультатВыполнения), РезультатВыполнения, Неопределено);
	СтруктураКодов   = Новый Структура("МассивКодов", МассивГрупповыхКМ);
	ДанныеПоГрупповомуКоду = ЗапроситьДанныеОбАгрегацииСпискаКМ(СтруктураКодов, Объект.Организация, ТокенАвторизации);
	
	Если ЗначениеЗаполнено(ДанныеПоГрупповомуКоду.ТекстОшибки) Тогда
		
		ТекстОшибки = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаЗапросаСоставаУпаковкиПоДаннымСервера();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		ОбщегоНазначенияИСМПТКВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ДанныеПоГрупповомуКоду.ТекстОшибки, , Объект.Ссылка);
		
	Иначе
		
		Для Каждого ОбновляемыйГрупповойКод Из СоответствиеГрупповыхКМ Цикл   //исходные КМ упаковок из таблицы документа
			
			//Получение вложенных позиций по КМ упаковки
			СтруктураКода = ИнтеграцияИСМПТКВызовСервера.ПолучитьИнформациюПоГрупповомуКоду(ДанныеПоГрупповомуКоду, ОбновляемыйГрупповойКод.Ключ.КИ, ОбновляемыйГрупповойКод.Ключ.ВипУпаковки);
			
			GTIN 			   = СтруктураКода.GTIN;
			GTINВерхнегоУровня = СтруктураКода.GTINВерхнегоУровня;
			EAN                = СтруктураКода.EAN;
			EANВерхнегоУровня  = СтруктураКода.EANВерхнегоУровня;
			Номенклатура       = СтруктураКода.Номенклатура;
			Характеристика 	   = СтруктураКода.Характеристика;
			ВидПродукции 	   = СтруктураКода.ВидПродукции;
			Количество		   = СтруктураКода.Количество;
			ЭтоГрупповаяУпаковка = СтруктураКода.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая");
			
			Если ЗначениеЗаполнено(GTIN) Тогда
				
				СтрокаКМ = Объект.Марки.НайтиПоИдентификатору(ОбновляемыйГрупповойКод.Значение);
				Если НеОтправлен Тогда
					//Количество изменяем только у не отправленного документа. При уточнении номенклатуры у отправленного оставляем старое кол-во, т.к. оно уже ушло на сервер.
					СтрокаКМ.Количество = Количество;
				КонецЕсли;
				
				СтрокаКМ.GTIN = ?(ЗначениеЗаполнено(GTINВерхнегоУровня) И Не ЭтоГрупповаяУпаковка, GTINВерхнегоУровня, GTIN);  
				СтрокаКМ.EAN  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(СтрокаКМ.GTIN);
				СтрокаКМ.GTINВерхнегоУровня = ?(ЭтоГрупповаяУпаковка, GTINВерхнегоУровня, "");
				СтрокаКМ.Номенклатура = Номенклатура;
				СтрокаКМ.ВидПродукции = ВидПродукции;
								
				Если НеОтправлен Тогда
					Форма.Модифицированность = Истина;
				Иначе
					Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСМПТК") Тогда
						//В уже отправленном документе Уведомление о ввозе (Импорт) в ТЧ Товары также присутствует информация о вложенных позициях. Для документов, созданных и обновленных с сервера
						//в базе с версией БМ 1.0.4.4 и ниже номенклатура в ТЧ очищалась при обновлении документа, поэтому проверяем таблицу и восстанавливаем данные при необходимости.
						Для Каждого СтрокаТовар Из Объект.Товары Цикл
							Если Не ЗначениеЗаполнено(СтрокаТовар.Номенклатура) Тогда
								
								ДанныеНоменклатуры = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, СтрокаТовар.EAN);
								Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
									Номенклатура   = ДанныеНоменклатуры.Номенклатура;
									Характеристика = ДанныеНоменклатуры.Характеристика;
								Иначе
									Номенклатура   = Неопределено;
									Характеристика = Неопределено;
								КонецЕсли;
								СтрокаТовар.Номенклатура   = Номенклатура;
								СтрокаТовар.Характеристика = Характеристика;
								
							Иначе
								Продолжить;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Форма.Записать();
					
				КонецЕсли;
				
			Иначе
				
				//В полученном с сервера ответе по вложенности не поступило информации о составе упаковки
				Если Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
					ТекстОшибки = НСтр("ru = 'Для кода %1 не удалось получить данные с сервера. Возможно, у организации нет доступа к просмотру содержимого этой агрегации на стороне ИС МПТ или упаковка уже расформирована.'");
				Иначе
					Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСМПТК.ОжидаетПриемку") Тогда
						ТекстОшибки = НСтр("ru = 'Для кода %1 не удалось получить данные с сервера. Информация о вложенности кода будет доступна только после приемки документа.'");
					Иначе
						ТекстОшибки = НСтр("ru = 'Для кода %1 не удалось получить данные с сервера. Возможно, упаковка уже расформирована.'");
					КонецЕсли;
				КонецЕсли;
				ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, ОбновляемыйГрупповойКод.Ключ.КИ);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
				
			КонецЕсли;
			
		КонецЦикла;
	
		Форма.СформироватьДеревоКодовМаркировки();
		
	КонецЕсли;
	
КонецПроцедуры

//В структуре ОтветСервераСостояниеКМ:
//ТекстОшибки - Если в запросе передан 1 код и:
//					- на текущий момент код есть в базе ИС МПТ и принадлежит организации или когда-то состоял на ее балансе - строка пустая,
//							параметр РезультатОтправкиЗапроса.КодСостояния = 200.
//					- на текущий момент код есть в базе ИС МПТ, но он не принадлежит организации и никогда не состоял на ее балансе - строка пустая,
//							параметр РезультатОтправкиЗапроса.КодСостояния = 200.
//					- на текущий момент отсутствует в базе ИС МПТ (был удален или передан некорректный код) - строка = информация об ошибке запроса, 
//							параметр РезультатОтправкиЗапроса.КодСостояния = 404.
//				Если в запросе передано несколько кодов и:
//					- все они на текущий момент есть в базе ИС МПТ и принадлежат орг-и или хотя бы раз когда-то были на ее балансе - строка пустая,
//							параметр РезультатОтправкиЗапроса.КодСостояния = 200.
//					- все они на текущий момент есть в базе ИС МПТ, но никогда не состояли на балансе организации -  строка пустая, 
//							параметр РезультатОтправкиЗапроса.КодСостояния = 200.
//					- все они на текущий момент отсутствуют в базе ИС МПТ (удалены или переданные коды некорректны) - строка = информация об ошибке общего запроса,
//							параметр РезультатОтправкиЗапроса.КодСостояния = 404.
//					- набор содержит как корректные, так и некорректные КМ - строка пустая,
//							параметр РезультатОтправкиЗапроса.КодСостояния = 200.
//
//ДанныеКМ	  - Если в запросе передано несколько кодов и:
//					- все они на текущий момент отсутствуют в базе ИС МПТ, то параметр = Неопределено. Обрабатывается в ветке (1)
//					- все они на текущий момент есть в базе ИС МПТ, но ни один не принадлежит организации и никогда не был на ее балансе, то параметр = Соответствие, но пустое. Обрабатывается в ветке (2)
//					- все они на текущий момент есть в базе ИС МПТ и принадлежат орг-и или когда-то были на ее балансе, то параметр = Соответствие с информацией по каждому коду (структура данных). Обрабатывается в ветке (3)
//					- набор содержит как корректные, так и некорректные КМ, то параметр = Соответствие, где:
//							- принадлежащие организации КМ, найденные в базе ИС МПТ - есть в соответствии с информацией о статусе и владельце; Обрабатывается в ветке (3.4)
//                          - не принадлежащие организации КМ, но когда-то состоявшие на балансе, найденные в базе ИС МПТ - есть в соответствии с информацией о статусе и владельце; Обрабатывается в ветке (3.3)
//                          - не принадлежащие организации КМ, никогда у нее не состоявшие, найденные в базе ИС МПТ:
//									- если Организация разделяет карточку GTIN этого кода в Нац. каталоге (совместное использование) - в структуре ответа в соответствии будет заполнен только GTIN. Обрабатывается в ветке (3.2)
//									- если Организация не имеет в списке товаров такой GTIN - в структуре ответа в соответствии будет только информация, что GTIN не найден. Обрабатывается в ветке (3.1)
//                          - КМ, не найденные в базе ИС МПТ - есть в соответствии с пометкой, что GTIN не найдены; Обрабатывается в ветке (3.1)
// 				Если в запросе передан 1 код и:
//					- на текущий момент код есть в базе ИС МПТ и принадлежит организации или когда-то состоял на ее балансе, то параметр = Соответствие со структурой данных КМ. Обрабатывается в ветке (3)
//					- на текущий момент код есть в базе ИС МПТ, но он не принадлежит организации и никогда не состоял на ее балансе, параметр = Соответствие, но пустое. Обрабатывается в ветке (2)
//					- на текущий момент отсутствует в базе ИС МПТ (был удален или передан некорректный код), параметр = Неопределено. Обрабатывается в ветке (1)
//
Процедура ОбработатьОтветСервераПоСостояниюКМ_Общая(Форма, МассивКМ, ОтветСервераСостояниеКМ, ИмяДокумента, НовоеСоответствиеСтатусов = Неопределено) Экспорт
	
	//См. комментарий по обработке ответа сервера в шапке процедуры.
	Если МассивКМ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	ТекстСообщенияОбщее = "";
	НовоеСоответствиеСтатусов = Новый Соответствие;
	
	////Обработка ответа сервера: ветка (1)////
	Если ЗначениеЗаполнено(ОтветСервераСостояниеКМ.ТекстОшибки) Тогда
		
		//Наличие ошибки в структуре ответа подразумевает, что ни один из запрошенных КМ не найден на сервере ИС МПТ.
		Для Каждого КИ Из МассивКМ Цикл
			ТекстСообщения = НСтр("ru = 'Не удалось получить информацию по коду %1: данные отсутствуют на сервере ИС МПТ. Возможно, допущена ошибка в текстовом представлении кода маркировки. Документ может быть отклонен сервером после отправки!'");
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КИ);
			ТекстСообщенияОбщее = ?(ТекстСообщенияОбщее = "", ТекстСообщения, ТекстСообщенияОбщее + Символы.ПС + ТекстСообщения);
			
			НовоеСоответствиеСтатусов.Вставить(КИ, Истина);
		КонецЦикла;
		
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(НСтр("ru = 'Внимание! При проверке статуса КМ по данным сервера ИС МПТ обнаружены замечания.'"));
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияОбщее);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(НСтр("ru = 'Результаты проверки будут сброшены при записи или закрытии формы документа.'"));
		Возврат;
		
	КонецЕсли;
	////////////////////////////////////////////
	
	ДанныеПоКодамСервер = ОтветСервераСостояниеКМ.ДанныеКМ;
	ТекстСообщенияОшибкаДоступа   = "";
	ТекстСообщенияОшибкаНеНайден  = "";
	ТекстСообщениеОшибкаВладельца = "";
	ТекстСообщенияОшибкаСтатуса   = "";
		
	Для Каждого КИ Из МассивКМ Цикл
		
		НайденноеСоответствиеКода = ДанныеПоКодамСервер.Получить(КИ);
		Если НайденноеСоответствиеКода = Неопределено Тогда
			
			////Обработка ответа сервера: ветка (2)////
			ТекстСообщения = НСтр("ru = 'Не удалось получить информацию по коду %1: у организации нет доступа к просмотру информации. Возможно, этот код еще не принадлежит организации по данным ИС МПТ. Документ может быть отклонен сервером после отправки!'");
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КИ);
			ТекстСообщенияОшибкаДоступа = ?(ТекстСообщенияОшибкаДоступа = "", ТекстСообщения, ТекстСообщенияОшибкаДоступа + Символы.ПС + ТекстСообщения); 
			
			НовоеСоответствиеСтатусов.Вставить(КИ, Истина);
			////////////////////////////////////////////			
		Иначе
			
			////Обработка ответа сервера: ветка (3)////
			//3.1 - Код маркировки может или совсем отсутствовать на сервере ИС МПТ (ошибка 404 - код удален из базы или передан некорректно),
			//		или он не принадлежит организации сейчас и никогда не состоял на ее балансе, 
			//      и сама организация не разделяет карточку этого товара в Нац.каталоге, поэтому доступа к информации нет.
			//		В данном случае не можем разделить данные варианты, поэтому формируем общее сообщение.
			Если НайденноеСоответствиеКода.GTIN = "GTIN не найден" Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось получить информацию по коду %1: не найдена информация о GTIN. Документ может быть отклонен сервером после отправки!'");
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КИ, );
				ТекстСообщенияОшибкаНеНайден = ?(ТекстСообщенияОшибкаНеНайден = "", ТекстСообщения, ТекстСообщенияОшибкаНеНайден + Символы.ПС + ТекстСообщения); 
				
				НовоеСоответствиеСтатусов.Вставить(КИ, Истина);
				Продолжить;
			КонецЕсли;
			
			//3.2 - Организация может разделять карточку товара в Нац.каталоге, однако переданный код или отсутствует на сервере вообще,
			//      или не принадлежит и никогда не состоял на балансе организации. В этом случае в ответе сервера содержится только GTIN.
			Если НайденноеСоответствиеКода.СтатусКМ = Неопределено Тогда 
				ТекстСообщения = НСтр("ru = 'Не удалось получить информацию по коду %1: возможно, он не состоит на балансе организации по данным сервера ИС МПТ. Документ может быть отклонен сервером после отправки!'");
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КИ, );
				ТекстСообщенияОшибкаНеНайден = ?(ТекстСообщенияОшибкаНеНайден = "", ТекстСообщения, ТекстСообщенияОшибкаНеНайден + Символы.ПС + ТекстСообщения); 
				
				НовоеСоответствиеСтатусов.Вставить(КИ, Истина);
				Продолжить;
			КонецЕсли;
			
			//3.3 - Код маркировки когда-то состоял на балансе организации, поэтому к нему есть доступ. Но на текущий момент он числится у другого участника системы
			//		и его нельзя использовать.
			ТекущийВладелецНаименование = НайденноеСоответствиеКода.Владелец; //Наименование с сервера
			ТекущийВладелец = НайденноеСоответствиеКода.ВладелецСсылка;
			Если Не ТекущийВладелец = Объект.Организация Тогда
				ТекстСообщения = НСтр("ru = 'Обнаружено несоответствие: текущий владелец кода %1 - %2. В документе нельзя указывать коды, не принадлежащие организации. Документ может быть отклонен сервером после отправки!'");
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КИ, ?(ЗначениеЗаполнено(ТекущийВладелец), ТекущийВладелец, ТекущийВладелецНаименование));
				ТекстСообщениеОшибкаВладельца = ?(ТекстСообщениеОшибкаВладельца = "", ТекстСообщения, ТекстСообщениеОшибкаВладельца + Символы.ПС + ТекстСообщения); 
				
				НовоеСоответствиеСтатусов.Вставить(КИ, Истина);
				Продолжить;
			КонецЕсли;
			
			//3.4 - Код маркировки принадлежит организации и данные по нему получены. Нужно проверить текущий статус кода - подходит ли он для заполняемого документа.
			СтатусКода = НайденноеСоответствиеКода.СтатусКМ;
			МассивДопустимыхСтатусовКМ = РаботаСДокументамиИСМПТК.ДопустимыеСтатусыКМДляДокументаИСМПТ(ИмяДокумента);
			Если МассивДопустимыхСтатусовКМ.Найти(СтатусКода) = Неопределено Тогда 
				ТекстСообщения = НСтр("ru = 'Обнаружено несоответствие: код %1 имеет статус ""%2"" по данным сервера ИС МПТ. Его нельзя указывать в текущем документе. Документ может быть отклонен сервером после отправки!'");
				ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КИ, СтатусКода);
				ТекстСообщенияОшибкаСтатуса = ?(ТекстСообщенияОшибкаСтатуса = "", ТекстСообщения, ТекстСообщенияОшибкаСтатуса + Символы.ПС + ТекстСообщения); 
				
				НовоеСоответствиеСтатусов.Вставить(КИ, Истина);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ТекстСообщенияОбщее = ТекстСообщенияОшибкаДоступа   + ?(ТекстСообщенияОшибкаДоступа   = "", "", Символы.ПС)
						+ ТекстСообщенияОшибкаНеНайден  + ?(ТекстСообщенияОшибкаНеНайден  = "", "", Символы.ПС)
						+ ТекстСообщениеОшибкаВладельца + ?(ТекстСообщениеОшибкаВладельца = "", "", Символы.ПС)
						+ ТекстСообщенияОшибкаСтатуса;
	
	Если Не ТекстСообщенияОбщее = "" Тогда 
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(НСтр("ru = 'Внимание! При проверке статуса КМ по данным сервера ИС МПТ обнаружены замечания.'"));
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияОбщее);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(НСтр("ru = 'Результаты проверки будут сброшены при записи или закрытии формы документа.'"));
	Иначе
		//Все коды в порядке, выводим общее сообщение
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияКодыДоступныДляИспользованияВДокументе(МассивКМ.Количество() = 1); 
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаличиеУпаковокПоКоторымНеПолучилосьВыполнитьЗапросСостава(Форма) Экспорт
	
	//Вызывается после загрузки данных из файла/ТСД/МП в таблицу документа.
	//Необходимо проверить выполнялся ли автоматический запрос данных упаковок с сервера ИС МПТ и если выполнялся - 
	//не осталось ли упаковок, по которым не удалось получить состав.
	//Если такие коды были, нужно оповестить
	Если Константы.АвтоОпределениеЛогистическихКодовИСМПТК.Получить() Тогда
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("GTIN", ""); //содержит информацию о вложенных товарах
		СтруктураОтбора.Вставить("ВидУпаковки", ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая"));
		
		НайденныеСтроки = Форма.Объект.Марки.НайтиСтроки(СтруктураОтбора);
		Если Не НайденныеСтроки.Количество() = 0 Тогда
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(нСтр("ru='При загрузке списка кодов маркировки не удалось получить информацию о вложенности некоторых транспортных упаковок.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Удаляет из массива штрихкодов обработанные для уменьшения объема данных к передаче на клиент
// 
// Параметры:
// 	РезультатЗагрузки - См. РезультатЗагрузкиШтрихкодовИзТСД
Процедура ОставитьНеобработанныеДанные(РезультатЗагрузки) Экспорт
	
	Если РезультатЗагрузки.Обработано > 0 Тогда
		
		РезультатЗагрузки.Счетчик = РезультатЗагрузки.Счетчик + РезультатЗагрузки.Обработано;
		ШтрихкодыТСД = Новый Массив;
		
		Для Индекс = РезультатЗагрузки.Обработано По РезультатЗагрузки.Всего - 1 Цикл
			ШтрихкодыТСД.Добавить(РезультатЗагрузки.ШтрихкодыТСД[Индекс]);
		КонецЦикла;
		
		РезультатЗагрузки.ШтрихкодыТСД = ШтрихкодыТСД;
		РезультатЗагрузки.Всего        = РезультатЗагрузки.Всего - РезультатЗагрузки.Обработано;
		РезультатЗагрузки.Обработано   = 0;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВидУпаковкиИПредставлениеШтрихкода(Знач Штрихкод, ВидПродукции, КешДанныхРазбора = Неопределено, НастройкиРазбораКодовМаркировки = Неопределено, ПроверятьАлфавитКодовМаркировки = Истина) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВидУпаковки", Неопределено);
	Результат.Вставить("НормализованныйШтрихкод", Штрихкод);
	
	ДанныеРазбораИРезультат = КешДанныхРазбора[Штрихкод];
	Если ДанныеРазбораИРезультат <> Неопределено Тогда
		ДанныеРазбора = ДанныеРазбораИРезультат.ДанныеРазбора;
		Если ДанныеРазбора <> Неопределено Тогда
			Результат.ВидУпаковки 			  = ДанныеРазбораИРезультат.ДанныеРазбора.ВидУпаковки;
			Результат.НормализованныйШтрихкод = ДанныеРазбораИРезультат.ДанныеРазбора.НормализованныйКодМаркировки;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	РезультатРазбора            = Неопределено;
	ПримечаниеКРазборуШтрихкода = Неопределено;
	
	Если ИнтеграцияИСМПТКПереопределяемый.ПозицияНедопустимогоСимвола(Штрихкод) > 0 Тогда
		РезультатРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.РазобратьСтрокуШтрихкодаGS1(Штрихкод);  //Проверка, что Штрихкод это код маркировки
		Если РезультатРазбора.Разобран Тогда
			СтрокаКМПредставление = "";
			СтрокаКМСпецсимволы   = ""; //ПолныйКодМаркировки
			РозничноеВыбытиеИСМПТК.ПолныйШтрихкодИзНормализованного(РезультатРазбора.ДанныеШтрихкода, СтрокаКМПредставление, СтрокаКМСпецсимволы);
			ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(СтрокаКМСпецсимволы, ВидПродукции, ПримечаниеКРазборуШтрихкода,	НастройкиРазбораКодовМаркировки, ПроверятьАлфавитКодовМаркировки);
		Иначе
			ДанныеРазбора = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(Штрихкод, ВидПродукции, ПримечаниеКРазборуШтрихкода,	НастройкиРазбораКодовМаркировки, ПроверятьАлфавитКодовМаркировки);
		КонецЕсли;
	Иначе
		ДанныеРазбора 	 = РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.РазобратьКодМаркировки(Штрихкод, ВидПродукции, ПримечаниеКРазборуШтрихкода, НастройкиРазбораКодовМаркировки, ПроверятьАлфавитКодовМаркировки);
	КонецЕсли;
	
	ВидУпаковки = Неопределено;
	Если ДанныеРазбора = Неопределено Тогда
		Если РезультатРазбора <> Неопределено И РезультатРазбора.Разобран Тогда
			НормализованныйШтрихкод = РезультатРазбора.ПредставлениеШтрихкода;
		Иначе
			НормализованныйШтрихкод = Штрихкод;
		КонецЕсли;
	Иначе
		ВидУпаковки             = ДанныеРазбора.ВидУпаковки;
		НормализованныйШтрихкод = ДанныеРазбора.НормализованныйКодМаркировки;
	КонецЕсли;
	
	ДанныеРазбораИРезультат = Новый Структура;
	ДанныеРазбораИРезультат.Вставить("ДанныеРазбора",               ДанныеРазбора);
	ДанныеРазбораИРезультат.Вставить("ПримечаниеКРазборуШтрихкода", ПримечаниеКРазборуШтрихкода);
	КешДанныхРазбора.Вставить(Штрихкод, ДанныеРазбораИРезультат);
	
	Результат.ВидУпаковки 			  = ВидУпаковки;
	Результат.НормализованныйШтрихкод = НормализованныйШтрихкод;
	
	Возврат Результат;
	
КонецФункции

// Подготовливает параметр сканирования ДополнительныеВариантыСопоставленияНоменклатуры
//
// Параметры:
//  ПараметрыСканирования - См. ШтрихкодированиеИС.ПараметрыСканирования
//  ПодобраннаяМаркируемаяПродукция - ДанныеФормыКоллекция Из ДанныеФормыСтруктура - Таблица ПодобраннаяМаркируемаяПродукция из формы проверки и подбора:
//    * GTIN - Строка - GTIN
//    * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура
//    * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика номенклатуры
//    * Серия - ОпределяемыйТип.СерияНоменклатуры - Серия номенклатуры
//
Процедура ПодготовитьДополнительныеВариантыСопоставленияНоменклатуры(ПараметрыСканирования, ПодобраннаяМаркируемаяПродукция) Экспорт
	
	ПараметрыСканирования.ДополнительныеВариантыСопоставленияНоменклатуры = Новый Соответствие;
	
	ТаблицаСопоставленияПоGTIN = ПодобраннаяМаркируемаяПродукция.Выгрузить(, "GTIN, Номенклатура, Характеристика, Серия");
	ТаблицаСопоставленияПоGTIN.Свернуть("GTIN, Номенклатура, Характеристика, Серия");
	
	Для Каждого СтрокаТаблицы Из ТаблицаСопоставленияПоGTIN Цикл
		
		ШтрихкодEAN = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(СтрокаТаблицы.GTIN);
		
		ВариантыСопоставления = ПараметрыСканирования.ДополнительныеВариантыСопоставленияНоменклатуры.Получить(ШтрихкодEAN);
		Если ВариантыСопоставления = Неопределено Тогда
			ВариантыСопоставления = Новый Массив;
		КонецЕсли;
		
		ВариантСопоставления = Новый Структура("Номенклатура, Характеристика, Серия");
		ЗаполнитьЗначенияСвойств(ВариантСопоставления, СтрокаТаблицы);
		ВариантыСопоставления.Добавить(ВариантСопоставления);
		
		ПараметрыСканирования.ДополнительныеВариантыСопоставленияНоменклатуры.Вставить(ШтрихкодEAN, ВариантыСопоставления);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИСЦЭДМ_АПИ

#Область СгруппироватьПоСтруктурам

Функция Переопределяемый_СгруппироватьДокументыИСЦЭДМПоСтруктурнымЕдиницам(Знач МассивДокументовИСЦЭДМ) Экспорт

	ТекстЗапроса = "";
	Если ТипЗнч(МассивДокументовИСЦЭДМ[0]) = Тип("ДокументСсылка.АктПриемаПередачиИСЦЭДМ") Тогда
		ТекстЗапроса = ТекстЗапросаСгруппироватьПоСтруктурамИСЦЭДМ_Общая(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСЦЭДМ());
		
	ИначеЕсли ТипЗнч(МассивДокументовИСЦЭДМ[0]) = Тип("ДокументСсылка.УведомлениеОВводеВОборотИСЦЭДМ") Тогда
		ТекстЗапроса = ТекстЗапросаСгруппироватьПоСтруктурамИСЦЭДМ_Общая(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСЦЭДМ());
		
	ИначеЕсли ТипЗнч(МассивДокументовИСЦЭДМ[0]) = Тип("ДокументСсылка.УведомлениеОВыводеИзОборотаИСЦЭДМ") Тогда
		ТекстЗапроса = ТекстЗапросаСгруппироватьПоСтруктурамИСЦЭДМ_Общая(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСЦЭДМ());
		
	ИначеЕсли ТипЗнч(МассивДокументовИСЦЭДМ[0]) = Тип("ДокументСсылка.АгрегацияВнеПроизводстваИСЦЭДМ") Тогда
		ТекстЗапроса = ТекстЗапросаСгруппироватьПоСтруктурамИСЦЭДМ_Общая(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАгрегацияВнеПроизводстваИСЦЭДМ());
		
	ИначеЕсли ТипЗнч(МассивДокументовИСЦЭДМ[0]) = Тип("ДокументСсылка.АктВнутреннегоПеремещенияИСЦЭДМ") Тогда
		ТекстЗапроса = ТекстЗапросаСгруппироватьПоСтруктурамИСЦЭДМ_Общая(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктВнутреннегоПеремещенияИСЦЭДМ());
		
	ИначеЕсли ТипЗнч(МассивДокументовИСЦЭДМ[0]) = Тип("ДокументСсылка.ОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ") Тогда
		ТекстЗапроса = ТекстЗапросаСгруппироватьПоСтруктурамИСЦЭДМ_Общая(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ());
		
	ИначеЕсли ТипЗнч(МассивДокументовИСЦЭДМ[0]) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСЦЭДМ") Тогда
		ТекстЗапроса = ТекстЗапросаСгруппироватьПоСтруктурамИСЦЭДМ_Общая(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСЦЭДМ()); 
		
	ИначеЕсли ТипЗнч(МассивДокументовИСЦЭДМ[0]) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСЦЭДМ") Тогда
		ТекстЗапроса = ТекстЗапросаСгруппироватьПоСтруктурамИСЦЭДМ_Общая(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСЦЭДМ()); 
		
	ИначеЕсли ТипЗнч(МассивДокументовИСЦЭДМ[0]) = Тип("ДокументСсылка.УведомлениеОРасхожденияхИСЦЭДМ") Тогда
		ТекстЗапроса = ТекстЗапросаСгруппироватьПоСтруктурамИСЦЭДМ_Общая(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОРасхожденияхИСЦЭДМ());
		
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивДокументовИСЦЭДМ", МассивДокументовИСЦЭДМ);
	
	ВыборкаСтруктурнаяЕдиница = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	КоллекцияСгруппированныхДокументовИСЦЭДМ = Новый Соответствие;
	
	Пока ВыборкаСтруктурнаяЕдиница.Следующий() Цикл
		
		СгруппированныйМассивДокументовИСЦЭДМ = Новый Массив;
		
		ВыборкаДетальныеЗаписи = ВыборкаСтруктурнаяЕдиница.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СгруппированныйМассивДокументовИСЦЭДМ.Добавить(ВыборкаДетальныеЗаписи.ДокументИСЦЭДМ);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ВыборкаСтруктурнаяЕдиница.СтруктурнаяЕдиница) Тогда
			
			КоллекцияСгруппированныхДокументовИСЦЭДМ.Вставить(ВыборкаСтруктурнаяЕдиница.СтруктурнаяЕдиница, СгруппированныйМассивДокументовИСЦЭДМ);
			
		Иначе
			
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУказанаОрганизациВСпискеДокументовСПараметром();
			
			СтрокаСписокДокументовИСЦЭДМ = "";
			Для Каждого СсылкаДокументИСЦЭДМ Из СгруппированныйМассивДокументовИСЦЭДМ Цикл
				СтрокаСписокДокументовИСЦЭДМ = СтрокаСписокДокументовИСЦЭДМ + "- " + СсылкаДокументИСЦЭДМ + Символы.ПС;
			КонецЦикла;
			СтрокаСписокДокументовИСЦЭДМ = СокрЛП(СтрокаСписокДокументовИСЦЭДМ);
			
			ПодстрокаЗамены = Символы.ПС + СтрокаСписокДокументовИСЦЭДМ + Символы.ПС;
			ТекстСообщения  = СтрЗаменить(ТекстСообщения, "%СписокДокументов%", ПодстрокаЗамены);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоллекцияСгруппированныхДокументовИСЦЭДМ;
	
КонецФункции

Функция ТекстЗапросаСгруппироватьПоСтруктурамИСЦЭДМ_Общая(ДокументИСЦЭДМ)

	ТекстЗапроса = "ВЫБРАТЬ
	|	ДокументИС.Организация КАК СтруктурнаяЕдиница,
	|	ДокументИС.Ссылка КАК ДокументИСЦЭДМ
	|ИЗ
	|	Документ.%ИмяДокумента% КАК ДокументИС
	|ГДЕ
	|	ДокументИС.Ссылка В(&МассивДокументовИСЦЭДМ)
	|ИТОГИ ПО
	|	СтруктурнаяЕдиница";
	
	Возврат СтрЗаменить(ТекстЗапроса, "%ИмяДокумента%", ДокументИСЦЭДМ);

КонецФункции

#КонецОбласти

Функция ПолучитьТокенАвторизацииИСЦЭДМ(ПрофильИСЦЭДМ = Неопределено) Экспорт
	
	Если ПрофильИСЦЭДМ = Неопределено ИЛИ Не ЗначениеЗаполнено(ПрофильИСЦЭДМ) Тогда 
		ОшибкаПодписи = НСтр("ru = 'Не получены данные об авторизации. Невозможно получить токен сеанса!'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ОшибкаПодписи);	
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыЗапросаКлючаСессии = ИнтеграцияИСМПТККлиентСервер.ПараметрыЗапросаКлючаСессии_ИСЦЭДМ(ПрофильИСЦЭДМ);
	Токен = ИнтерфейсИСМПТКВызовСервера.ПроверитьОбновитьКлючСессииИСЦЭДМ(ПараметрыЗапросаКлючаСессии, Неопределено, Ложь);

	Возврат Токен;
	
КонецФункции

//МассивКодов - Данные должны передаваться в формате массива, даже если КМ только один
//
Функция ЗапроситьДанныеПоМассивуКМ(МассивКодов, Организация, БИНОрганизации = "") Экспорт
	
	АдресРесурса 	 = "apiUot/api/v1/private/info-km";
	ТокенАвторизации = ИнтерфейсИСМПТК.ПолучитьТокенАвторизацииИСЦЭДМ(Организация);
	СтруктураОтвета  = Новый Структура("МассивСтруктур, ТекстОшибки");
	
	Если ТокенАвторизации = Неопределено Тогда
		СтруктураОтвета.ТекстОшибки = НСтр("ru='Информация по кодам маркировки не получена'");
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	// Подключаемся на сервис
	ПараметрыПодключения = ИнтеграцияИСМПТККлиентСервер.ПараметрыОтправкиHTTPЗапросов_ИСЦЭДМ(Неопределено, Истина);
	HTTPСоединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер, ПараметрыПодключения.Порт , , , , 0, Новый ЗащищенноеСоединениеOpenSSL(,));
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, ПолучитьЗаголовкиСТокеном(ТокенАвторизации));
	
	Если Не ЗначениеЗаполнено(БИНОрганизации) Тогда 
		ИмяРеквизитаИдентификатора 	= ИнтеграцияИСМПТКПереопределяемый.ПолучитьРеквизитИИНОрганизации();
		СтруктураРеквизитов = ИнтеграцияИСМПТКПереопределяемый.ПолучитьРеквизитыОрганизацииКонтрагента(Организация, ИмяРеквизитаИдентификатора);
		БинОрганизации 		= СтруктураРеквизитов[ИмяРеквизитаИдентификатора + "ИдентификационныйНомер"];
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("bin",   БинОрганизации);
	ПараметрыЗапроса.Вставить("codes", МассивКодов);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ПараметрыЗапроса);
	ТекстОтправки = ЗаписьJSON.Закрыть();
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстОтправки);
	
	HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);  // POST
	
	Если HTTPОтвет <> Неопределено И HTTPОтвет.КодСостояния = 200 Тогда    // успех
		
		Ответ = HTTPОтвет.ПолучитьТелоКакСтроку();
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ЗапроситьДанныеПоМассивуКМ");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация,,,"Успех");
		
		РазобранныеДанные = ОбщегоНазначенияИСМПТК.ПреобразоватьJSON_В_МассивСтруктур(Ответ);
		
		Если РазобранныеДанные <> Неопределено Тогда
			СтруктураОтвета.МассивСтруктур = РазобранныеДанные;
			СтруктураОтвета.ТекстОшибки = Неопределено;
		Иначе
			СтруктураОтвета.МассивСтруктур = Неопределено;
			СтруктураОтвета.ТекстОшибки = НСтр("ru='По данным кодам нет данных!'");
		КонецЕсли;
		
	ИначеЕсли HTTPОтвет <> Неопределено И HTTPОтвет.КодСостояния <> 200 Тогда
		
		ТекстОшибки = "" + HTTPОтвет.КодСостояния + " " + HTTPОтвет.ПолучитьТелоКакСтроку();
		СтруктураОтвета.МассивСтруктур = Неопределено;
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		
	Иначе
		
		СтруктураОтвета.ТекстОшибки = НСтр("ru='Ошибка получения информации по кодам маркировки со стороны сервера'");
		Возврат СтруктураОтвета;
		
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ПолучитьСтатусТранспортногоКода(ТранспортныйКод, Организация) Экспорт
	
	МассивКодов = Новый Массив;
	МассивКодов.Добавить(ТранспортныйКод);
	
	СтруктураДанныхКода = ЗапроситьДанныеПоМассивуКМ(МассивКодов, Организация);
	
	ДоступностьКода = Новый Структура("Создание, Корректировка, Сообщение");
	
	Если ЗначениеЗаполнено(СтруктураДанныхКода.ТекстОшибки) Тогда
		//Не удалось получить корректный ответ сервера по коду, попытку создания/корректировки не запрещаем
		ДоступностьКода.Создание 	  = Истина;
		ДоступностьКода.Корректировка = Истина;
	Иначе 
		
		Если СтруктураДанныхКода.МассивСтруктур.Количество() = 0 Тогда
			//Такой код не найден на стороне сервера
			ДоступностьКода.Создание 	  = Истина;
			ДоступностьКода.Корректировка = Ложь;
		Иначе
			
			Если СтруктураДанныхКода.МассивСтруктур[0].status = "Дезагрегирован" Тогда 
				//Код ранее был разукомплектован
				ДоступностьКода.Создание 	  = Ложь;
				ДоступностьКода.Корректировка = Ложь;
				ДоступностьКода.Сообщение 	  = НСтр("ru='Данный код ранее был дезагрегирован, работа с ним невозможна'");
			Иначе 
				//Код существует и он активен
				ДоступностьКода.Создание 	  = Ложь;
				ДоступностьКода.Корректировка = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДоступностьКода;
	
КонецФункции

Функция ЗапроситьДанныеПосоставуАгрегата(КодАгрегации, Организация) Экспорт
	
	АдресРесурса 	 = "apiUot/api/v1/private/aggregate";
	ТокенАвторизации = ИнтерфейсИСМПТК.ПолучитьТокенАвторизацииИСЦЭДМ(Организация);
	СтруктураОтвета  = Новый Структура("МассивСтруктур, ТекстОшибки");
	
	Если ТокенАвторизации = Неопределено Тогда
		СтруктураОтвета.ТекстОшибки = НСтр("ru='Информация по кодам маркировки не получена'");
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ИмяРеквизитаИдентификатора 	= ИнтеграцияИСМПТКПереопределяемый.ПолучитьРеквизитИИНОрганизации();
	СтруктураРеквизитов = ИнтеграцияИСМПТКПереопределяемый.ПолучитьРеквизитыОрганизацииКонтрагента(Организация, ИмяРеквизитаИдентификатора);
	БинОрганизации 		= СтруктураРеквизитов[ИмяРеквизитаИдентификатора + "ИдентификационныйНомер"];
	
	// Подключаемся на сервис
	ПараметрыПодключения = ИнтеграцияИСМПТККлиентСервер.ПараметрыОтправкиHTTPЗапросов_ИСЦЭДМ(Неопределено, Истина);
	HTTPСоединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер, ПараметрыПодключения.Порт , , , , 0, Новый ЗащищенноеСоединениеOpenSSL(,));
	
	ЗаголовкиЗапроса = ПолучитьЗаголовкиСТокеном(ТокенАвторизации);
	ЗаголовкиЗапроса.Вставить("Innbin", БинОрганизации);
	ЗаголовкиЗапроса.Вставить("Commoditygroup", "pharma");
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса + "/" + КодАгрегации, ЗаголовкиЗапроса);
	
	HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);  // GET
	
	Если HTTPОтвет <> Неопределено И HTTPОтвет.КодСостояния = 200 Тогда    // успех
		
		Ответ = HTTPОтвет.ПолучитьТелоКакСтроку();        
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ЗапроситьДанныеПосоставуАгрегата");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация,,,"Успех");
		
		РазобранныеДанные = ОбщегоНазначенияИСМПТК.ПреобразоватьJSON_В_МассивСтруктур(Ответ);
		
		Если РазобранныеДанные <> Неопределено Тогда
			СтруктураОтвета.МассивСтруктур = РазобранныеДанные;
			СтруктураОтвета.ТекстОшибки = Неопределено;
		Иначе
			СтруктураОтвета.МассивСтруктур = Неопределено;
			СтруктураОтвета.ТекстОшибки = НСтр("ru='По коду агрегации нет данных!'");
		КонецЕсли;
		
	ИначеЕсли HTTPОтвет <> Неопределено И HTTPОтвет.КодСостояния <> 200 Тогда
		
		ТекстОшибки = "" + HTTPОтвет.КодСостояния + " " + HTTPОтвет.ПолучитьТелоКакСтроку();   
		СтруктураОтвета.МассивСтруктур = Неопределено;
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		
	Иначе
		
		СтруктураОтвета.ТекстОшибки = НСтр("ru='Ошибка получения информации по кодам маркировки со стороны сервера'");
		Возврат СтруктураОтвета;
		
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ПолучитьТекстЗапросаДокументЦЭДМ_Общий(ИмяДокумента)
	
	Текст = "ВЫБРАТЬ
	|	ДокументИС.Ссылка КАК СсылкаДокументИСЦЭДМ,
	|	ДокументИС.Статус КАК Статус
	|ИЗ
	|	Документ.%ИмяДокумента% КАК ДокументИС
	|ГДЕ
	|	ДокументИС.Ссылка В(&МассивИсходящихДокументовИСЦЭДМ) 
	|	И ДокументИС.Статус В (&Статусы)";
	
	Возврат СтрЗаменить(Текст, "%ИмяДокумента%", ИмяДокумента);
	
КонецФункции

// Проверяет корректность заполнения документов для отправки в ИС ЦЭДМ.
//
// Параметры:
//  МассивИсходящихДокументовИСЦЭДМ - Массив - Массив документов, 
//   у которых необходимо проверить корректность заполнения.
//   Каждый элемент массива должен иметь тип "ДокументСсылка./Имя документа ИСЦЭДМ/".
//	 ВАЖНО! Массив изменяется внутрии функции, Знач не устанавливаем перед объявлением переменной
//  ПоказыватьСообщения - Булево - Показывать сообщения об ошибках,
//   выявленных в ходе проверки, или не показывать.
//  ТекстыСообщений - Соответствие - Тексты ошибок, выявленных в ходе проверки.
//   |- Ключ - ДокументСсылка./Имя документа ИСЦЭДМ/ - Документ, для которого найдены ошибки.
//   |- Значение - Соответствие - Тексты найденных ошибок.
//       |- Ключ - Строка - Путь к полю, в котором найдена ошибка.
//       |- Значение - Строка - Текст ошибки.
//
// Возвращаемое значение:
//  Булево - Возможность отправки всех документов ИСЦЭДМ.
//   Истина - Если все документы из массива можно отправлять. 
//   Ложь - Если хотя бы один документ нельзя отправлять.
//
Функция ПроверитьВозможностьОтправкиДокументовПоставитьВОчередьОтправкиДокументИСЦЭДМ(МассивИсходящихДокументовИСЦЭДМ) Экспорт

	МассивИсключаемыхДокументовИСЦЭДМ = Новый Массив;
	СообщениеПользователю = Новый СообщениеПользователю;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивИсходящихДокументовИСЦЭДМ", МассивИсходящихДокументовИСЦЭДМ);
	
	МассивИсключаемыхСтатусов = Новый Массив;
	//АПП:
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыДокументовИСЦЭДМ.Отозван);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыДокументовИСЦЭДМ.Принят);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыДокументовИСЦЭДМ.Отклонен);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыДокументовИСЦЭДМ.Аннулирован);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыДокументовИСЦЭДМ.ОшибкаПриПроверке);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыДокументовИСЦЭДМ.ОжидаетПодтверждение);
	//Уведомления:
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыДокументовИСЦЭДМ.Сформирован);
	
	Запрос.УстановитьПараметр("Статусы", МассивИсключаемыхСтатусов);
	
	//Агреагация позовляет повторную отправку ранее принятого кода
	Запрос.УстановитьПараметр("СтатусыАгрегация", Перечисления.СтатусыДокументовИСЦЭДМ.Аннулирован);
	
	Если ТипЗнч(МассивИсходящихДокументовИСЦЭДМ[0]) = Тип("ДокументСсылка.АктПриемаПередачиИСЦЭДМ") Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаДокументЦЭДМ_Общий(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСЦЭДМ());
		
	ИначеЕсли ТипЗнч(МассивИсходящихДокументовИСЦЭДМ[0]) = Тип("ДокументСсылка.УведомлениеОВводеВОборотИСЦЭДМ") Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаДокументЦЭДМ_Общий(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСЦЭДМ());
		
	ИначеЕсли ТипЗнч(МассивИсходящихДокументовИСЦЭДМ[0]) = Тип("ДокументСсылка.УведомлениеОВыводеИзОборотаИСЦЭДМ") Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаДокументЦЭДМ_Общий(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСЦЭДМ());
		
	ИначеЕсли ТипЗнч(МассивИсходящихДокументовИСЦЭДМ[0]) = Тип("ДокументСсылка.АгрегацияВнеПроизводстваИСЦЭДМ") Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаДокументЦЭДМ_Общий(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАгрегацияВнеПроизводстваИСЦЭДМ());
		
	ИначеЕсли ТипЗнч(МассивИсходящихДокументовИСЦЭДМ[0]) = Тип("ДокументСсылка.АктВнутреннегоПеремещенияИСЦЭДМ") Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаДокументЦЭДМ_Общий(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктВнутреннегоПеремещенияИСЦЭДМ());
		
	ИначеЕсли ТипЗнч(МассивИсходящихДокументовИСЦЭДМ[0]) = Тип("ДокументСсылка.ОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ") Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаДокументЦЭДМ_Общий(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ());
		
	ИначеЕсли ТипЗнч(МассивИсходящихДокументовИСЦЭДМ[0]) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСЦЭДМ") Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаДокументЦЭДМ_Общий(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСЦЭДМ());
		
	ИначеЕсли ТипЗнч(МассивИсходящихДокументовИСЦЭДМ[0]) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСЦЭДМ") Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаДокументЦЭДМ_Общий(ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСЦЭДМ());
				
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл		
		
		МассивИсключаемыхДокументовИСЦЭДМ.Добавить(ВыборкаДетальныеЗаписи.СсылкаДокументИСЦЭДМ);
		
		Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда  		
			
			ТекстСообщения = НСтр("ru = 'Документ ""%1"" со статусом ""%2"" исключен из пакета отправки, т.к. отправке подлежат только документы со статусами: ""%3"", ""%4"", ""%5""'");
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения,
																										   ВыборкаДетальныеЗаписи.СсылкаДокументИСЦЭДМ,
																										   ВыборкаДетальныеЗаписи.Статус,
																										   Перечисления.СтатусыДокументовИСЦЭДМ.НеОпределен,
																										   Перечисления.СтатусыДокументовИСЦЭДМ.РасчетИтогов,
																										   Перечисления.СтатусыДокументовИСЦЭДМ.Черновик);
			
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаДокументИСЦЭДМ Из МассивИсключаемыхДокументовИСЦЭДМ Цикл		
		
		ИндексСтроки = МассивИсходящихДокументовИСЦЭДМ.Найти(СтрокаДокументИСЦЭДМ);		
		Если НЕ ИндексСтроки = Неопределено Тогда			
			МассивИсходящихДокументовИСЦЭДМ.Удалить(ИндексСтроки);		
		КонецЕсли;		
		
	КонецЦикла;
	
	Для Каждого СсылкаДокументИСЦЭДМ Из МассивИсходящихДокументовИСЦЭДМ Цикл
		
		РезультатПроверки = РаботаСДокументамиИСМПТК.ПроверитьДокументИСЦЭДМ(СсылкаДокументИСЦЭДМ);
		РаботаСДокументамиИСМПТК.СообщитьОбнаруженыОшибки(СсылкаДокументИСЦЭДМ, РезультатПроверки);
		
		Если РезультатПроверки.ЗапрещающиеОшибки.Количество() <> 0 Тогда
			Возврат Ложь;	
		КонецЕсли;
		
	КонецЦикла;	
		
	Возврат МассивИсходящихДокументовИСЦЭДМ.Количество() > 0;
	
КонецФункции

Процедура ОбновитьДокументыИСЦЭДМ(Параметры) Экспорт

	Для Каждого СгруппированныеАкты Из Параметры.КоллекцияСгруппированныхДокументовИСЦЭДМ Цикл
		
		СтруктурнаяЕдиница = СгруппированныеАкты.Ключ;
		ПрофильДоступа = ИнтеграцияИСМПТКПовтИсп.ПолучитьДанныеПрофиляДоступаКЭДО(СтруктурнаяЕдиница, ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь());
		
		Если ПрофильДоступа = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru='Операция прервана: не определён профиль доступа к ИС ЦЭДМ для пользователя %1 по организации %2.'");
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь(), СтруктурнаяЕдиница);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Возврат;
			
		КонецЕсли;
		
		ТокенАвторизации = ПолучитьТокенАвторизацииИСЦЭДМ(ПрофильДоступа);
		СгруппированныйМассивДокументов = СгруппированныеАкты.Значение;
						
		Если Параметры.ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСЦЭДМ() Тогда
			ОбновитьАктыПП_ИСЦЭДМ(СгруппированныйМассивДокументов, СтруктурнаяЕдиница, ТокенАвторизации, ПрофильДоступа);
		ИначеЕсли Параметры.ТипДокументаИСЦЭДМ = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАгрегацияВнеПроизводстваИСЦЭДМ() Тогда
			ОбновитьАгрегациювнеПроизводства_ИСЦЭДМ(СгруппированныйМассивДокументов, ТокенАвторизации);
		Иначе
			ОбновитьИсходящиеДокументы_ИСЦЭДМ(СгруппированныйМассивДокументов, Параметры.ТипДокументаИСЦЭДМ, ПрофильДоступа, ТокенАвторизации, СтруктурнаяЕдиница);
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

#Область ПолучениеДанных

Функция ПолучитьНовыеДокументыИСЦЭДМ(ДополнительныеПараметры, АдресРезультата = "") Экспорт
	
	МассивПрофилейИСЦЭДМСДатойСинхронизации = ДополнительныеПараметры.МассивПрофилейИСЦЭДМСДатойСинхронизации;
	
	Для каждого СтруктураПрофиляСинхронизации Из МассивПрофилейИСЦЭДМСДатойСинхронизации Цикл
		
		СтруктурнаяЕдиница = СтруктураПрофиляСинхронизации.СтруктурнаяЕдиница;
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("ДатаНачалаВыгрузки",		СтруктураПрофиляСинхронизации.ДатаНачалаСинхронизацииВходящихДокументовИСЦЭДМ);
		ПараметрыЗапроса.Вставить("ДатаОкончанияВыгрузки",	СтруктураПрофиляСинхронизации.ДатаОкончанияСинхронизацииИСЦЭДМ);
		ПараметрыЗапроса.Вставить("ВидыДокументов",			СтруктураПрофиляСинхронизации.ВидыДокументов);
		ПараметрыЗапроса.Вставить("СтруктурнаяЕдиница",		СтруктураПрофиляСинхронизации.СтруктурнаяЕдиница);
		ПараметрыЗапроса.Вставить("БИН",					СтруктураПрофиляСинхронизации.БИН);
		ПараметрыЗапроса.Вставить("Организация",			СтруктураПрофиляСинхронизации.Организация);
		ПараметрыЗапроса.Вставить("НаправлениеДокумента",	"inbox");
		
		Если Не ЗначениеЗаполнено(СтруктураПрофиляСинхронизации.ТокенАвторизации) Тогда
			ТекстСообщения = НСтр("ru = 'Не получен токен авторизации для структурной единицы %1'");
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтруктураПрофиляСинхронизации.СтруктурнаяЕдиница); 
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'Начата синхронизация с ИС ЦЭДМ по структурной единице %1...'");
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтруктураПрофиляСинхронизации.СтруктурнаяЕдиница); 
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		ТаблицаВходящихДокументов = ПолучитьСписокДокументовПоПараметрамОтбора(ПараметрыЗапроса, СтруктураПрофиляСинхронизации.ТокенАвторизации);
		Если Не ТаблицаВходящихДокументов = Неопределено Тогда 
			СоздатьОбновитьДокументыИСЦЭДМ(ТаблицаВходящихДокументов, СтруктураПрофиляСинхронизации);
		КонецЕсли; 
		
		//Для Уведомления о расхождении получим и исходящиее
		Если Не СтруктураПрофиляСинхронизации.ВидыДокументов.Найти(7000) = Неопределено Тогда 
			ПараметрыЗапроса.НаправлениеДокумента = "outgoing";
			ТаблицаИсходящихДокументов = ПолучитьСписокДокументовПоПараметрамОтбора(ПараметрыЗапроса, СтруктураПрофиляСинхронизации.ТокенАвторизации);
			Если Не ТаблицаИсходящихДокументов = Неопределено Тогда 
				СоздатьОбновитьДокументыИСЦЭДМ(ТаблицаИсходящихДокументов, СтруктураПрофиляСинхронизации);
			КонецЕсли;
		КонецЕсли;
		
		//уменьшаем на одну секундку, чтобы не потерять документы
		ПараметрДата = СтруктураПрофиляСинхронизации.ДатаОкончанияСинхронизацииИСЦЭДМ - 1;
		СкладЦЭДМ 	 = ?(СтруктураПрофиляСинхронизации.СтруктурнаяЕдиница = СтруктураПрофиляСинхронизации.Организация, Справочники.СкладыИСЦЭДМ.ПустаяСсылка(), СтруктураПрофиляСинхронизации.СтруктурнаяЕдиница);
		ТипДокумента = СтрЗаменить(Строка(СтруктураПрофиляСинхронизации.ВидыДокументов[0]),Символы.НПП,"");
		СохранитьПараметрыМетода(СтруктураПрофиляСинхронизации.Организация, СкладЦЭДМ, ИмяМетодаДляВидаДокументовЦЭДМ(ТипДокумента), Перечисления.НаправленияДокументовИСМПТК.ПустаяСсылка(), Перечисления.ИменаПараметровИСМПТК.СоздаватьСДаты, ПараметрДата);
		
		ТекстСообщения = НСтр("ru = 'Синхронизация с ИС ЦЭДМ по структурной единице %1 завершена.'");
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтруктураПрофиляСинхронизации.СтруктурнаяЕдиница); 
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	КонецЦикла;
	
КонецФункции 

Функция ПолучитьСписокДокументовПоПараметрамОтбора(ПараметрыОтбора, ТокенАвторизации)
	
	РезультатВыполненияНаСервере = ЭлектронноеВзаимодействиеССервисамиМаркировка.ПолучитьСписокДокументовИСЦЭДМ(ПараметрыОтбора, ТокенАвторизации);
	
	ИнформацияОбОшибке = Неопределено;
	Если ЭтоОшибкаИСЦЭДМ(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриПолученииДанныхССервера() + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		ИдЗапроса = "";
		Если РезультатВыполненияНаСервере.Свойство("ИдентификаторЗапроса", ИдЗапроса) Тогда 
			ТекстСообщения = ТекстСообщения
						   + Символы.ПС
						   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИдентификаторЗапросаКСерверу();
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИдентификатоНомер%", ИдЗапроса);
		КонецЕсли;
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ПолучитьНовыеДокументыИСЦЭДМ");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		ДополнительныеДанные = Неопределено;
	Иначе 
		ДополнительныеДанные = ОбщегоНазначенияИСМПТК.ПреобразоватьJSON_В_МассивСтруктур(РезультатВыполненияНаСервере.ТекстОтвета);
	КонецЕсли; 
	
	Если ДополнительныеДанные = Неопределено Тогда
		СписокАктов = Неопределено;
		ТекстСообщения = НСтр("ru = 'Данных для синхронизации не обнаружено.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	Иначе
		МассивДокументов = ДополнительныеДанные.documents;
		Если МассивДокументов <> Неопределено Тогда 
			Возврат ПолучитьТЗДокументовИСЦЭДМ(ДополнительныеДанные.documents);
		Иначе
			ТекстСообщения = НСтр("ru = 'Данных для синхронизации не обнаружено.'");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТЗДокументовИСЦЭДМ(СписокДокументов)

	СтруктурДокументов = Новый Структура();
	
	Для каждого СтрокаДок Из СписокДокументов Цикл
		
		Если СтрокаДок.doc_type = "6" Или СтрокаДок.doc_type = "7" Тогда
			ТипДок = "Перемещение";
		ИначеЕсли СтрокаДок.doc_type = "1" Или СтрокаДок.doc_type = "10" Тогда
			ТипДок = "Акт";
		ИначеЕсли СтрокаДок.doc_type = "7000" Тогда
			ТипДок = "Расхождение";
		ИначеЕсли СтрокаДок.doc_type = "2" Тогда
			ТипДок = "ВвозЕАЭС";
		Иначе
			ТипДок = "ПередачаКИ";
		КонецЕсли;
		
		Если СтруктурДокументов.Свойство(ТипДок) Тогда 
			СтруктурДокументов[ТипДок].Добавить(ОбщегоНазначенияИСМПТК.УдалитьРазрывыВСтроке(СтрокаДок.ID));
		Иначе
			НовыйМассив = Новый Массив;
			НовыйМассив.Добавить(ОбщегоНазначенияИСМПТК.УдалитьРазрывыВСтроке(СтрокаДок.ID));
			СтруктурДокументов.Вставить(ТипДок, НовыйМассив);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Если СтруктурДокументов.Свойство("Акт") Тогда 
		
		Запрос.Текст = "ВЫБРАТЬ
		|	АктПриемаПередачиИСЦЭДМ.Ссылка КАК Ссылка,
		|	АктПриемаПередачиИСЦЭДМ.Идентификатор КАК Идентификатор,
		|	&ТипДокументаСлужебный КАК ТипДокумента
		|ИЗ
		|	Документ.АктПриемаПередачиИСЦЭДМ КАК АктПриемаПередачиИСЦЭДМ
		|ГДЕ
		|	АктПриемаПередачиИСЦЭДМ.Идентификатор В(&МассивID_Акт)"; 
		
		Запрос.УстановитьПараметр("МассивID_Акт", СтруктурДокументов["Акт"]);
		Запрос.УстановитьПараметр("ТипДокументаСлужебный", ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСЦЭДМ());
		
	КонецЕсли;
	
	Если СтруктурДокументов.Свойство("Перемещение") Тогда
		
		Если ЗначениеЗаполнено(Запрос.Текст) Тогда
			Запрос.Текст = Запрос.Текст + "
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
		|	АктВнутреннегоПеремещенияИСЦЭДМ.Ссылка КАК Ссылка,
		|	АктВнутреннегоПеремещенияИСЦЭДМ.Идентификатор КАК Идентификатор,
		|	&ТипДокументаСлужебный КАК ТипДокумента
		|ИЗ
		|	Документ.АктВнутреннегоПеремещенияИСЦЭДМ КАК АктВнутреннегоПеремещенияИСЦЭДМ
		|ГДЕ
		|	АктВнутреннегоПеремещенияИСЦЭДМ.Идентификатор В(&МассивID_Перемещение)";
		
		Запрос.УстановитьПараметр("МассивID_Перемещение",  СтруктурДокументов["Перемещение"]);
		Запрос.УстановитьПараметр("ТипДокументаСлужебный", ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктВнутреннегоПеремещенияИСЦЭДМ());
		
	КонецЕсли;
	
	Если СтруктурДокументов.Свойство("ПередачаКИ") Тогда
		
		Если ЗначениеЗаполнено(Запрос.Текст) Тогда
			Запрос.Текст = Запрос.Текст + "
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
		|	ОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ.Ссылка КАК Ссылка,
		|	ОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ.Идентификатор КАК Идентификатор,
		|	&ТипДокументаСлужебный КАК ТипДокумента
		|ИЗ
		|	Документ.ОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ КАК ОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ
		|ГДЕ
		|	ОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ.Идентификатор В(&МассивID_ПередачаКИ)";
		
		Запрос.УстановитьПараметр("МассивID_ПередачаКИ", СтруктурДокументов["ПередачаКИ"]);
		Запрос.УстановитьПараметр("ТипДокументаСлужебный", ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ());
		
	КонецЕсли;
	
	Если СтруктурДокументов.Свойство("Расхождение") Тогда
		
		Если ЗначениеЗаполнено(Запрос.Текст) Тогда
			Запрос.Текст = Запрос.Текст + "
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
		|	УведомлениеОРасхожденияхИСЦЭДМ.Ссылка КАК Ссылка,
		|	УведомлениеОРасхожденияхИСЦЭДМ.Идентификатор КАК Идентификатор,
		|	&ТипДокументаСлужебный КАК ТипДокумента
		|ИЗ
		|	Документ.УведомлениеОРасхожденияхИСЦЭДМ КАК УведомлениеОРасхожденияхИСЦЭДМ
		|ГДЕ
		|	УведомлениеОРасхожденияхИСЦЭДМ.Идентификатор В(&МассивID_Расхождение)";
		
		Запрос.УстановитьПараметр("МассивID_Расхождение", СтруктурДокументов["Расхождение"]);
		Запрос.УстановитьПараметр("ТипДокументаСлужебный", ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОРасхожденияхИСЦЭДМ());
		
	КонецЕсли;
	
	Если СтруктурДокументов.Свойство("ВвозЕАЭС") Тогда
		
		Если ЗначениеЗаполнено(Запрос.Текст) Тогда
			Запрос.Текст = Запрос.Текст + "
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
		|	УведомлениеОВвозеИзЕАЭСИСЦЭДМ.Ссылка КАК Ссылка,
		|	УведомлениеОВвозеИзЕАЭСИСЦЭДМ.Идентификатор КАК Идентификатор,
		|	&ТипДокументаСлужебный КАК ТипДокумента
		|ИЗ
		|	Документ.УведомлениеОВвозеИзЕАЭСИСЦЭДМ КАК УведомлениеОВвозеИзЕАЭСИСЦЭДМ
		|ГДЕ
		|	УведомлениеОВвозеИзЕАЭСИСЦЭДМ.Идентификатор В(&МассивID_ВвозЕАЭС)";
		
		Запрос.УстановитьПараметр("МассивID_ВвозЕАЭС", СтруктурДокументов["ВвозЕАЭС"]);
		Запрос.УстановитьПараметр("ТипДокументаСлужебный", ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСЦЭДМ());
		
	КонецЕсли;

	ДанныеПоДокументамИБ = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаДок Из СписокДокументов Цикл
		
		Если ДанныеПоДокументамИБ.Найти(ОбщегоНазначенияИСМПТК.УдалитьРазрывыВСтроке(СтрокаДок.ID), "Идентификатор") = Неопределено Тогда 
			
			НоваяСтрока = ДанныеПоДокументамИБ.Добавить();
			НоваяСтрока.Идентификатор = ОбщегоНазначенияИСМПТК.УдалитьРазрывыВСтроке(СтрокаДок.ID);
			
			Если СтрокаДок.doc_type = "6" Или СтрокаДок.doc_type = "7" Тогда
				ТипДок = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктВнутреннегоПеремещенияИСЦЭДМ();
			ИначеЕсли СтрокаДок.doc_type = "1" Или СтрокаДок.doc_type = "10" Тогда
				ТипДок = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСЦЭДМ();
			ИначеЕсли СтрокаДок.doc_type = "7000" Тогда
				ТипДок = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОРасхожденияхИСЦЭДМ();
			ИначеЕсли СтрокаДок.doc_type = "2" Тогда
				ТипДок = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСЦЭДМ();
			Иначе
				ТипДок = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ();
			КонецЕсли;
			
			НоваяСтрока.ТипДокумента = ТипДок;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеПоДокументамИБ;
	
КонецФункции

Процедура СоздатьОбновитьДокументыИСЦЭДМ(ТаблицаВходящихДокументов, Контекст)
	
	РезультатСинхронизацииПротокол = Новый Структура();
	РезультатСинхронизацииПротокол.Вставить("СозданоНовыхДокументов", 0);
	РезультатСинхронизацииПротокол.Вставить("ОбновленоДокументов", 0);
	РезультатСинхронизацииПротокол.Вставить("ОбработаноСОшибкой", 0);
		
	Для каждого ДанныеВходящегоДокумента Из ТаблицаВходящихДокументов Цикл
		
		Организация = Неопределено;
		Если Не Контекст.Свойство("Организация", Организация) Тогда 
			Организация = Контекст.СтруктурнаяЕдиница;
		КонецЕсли;
		
		РезультатВыполненияНаСервере = ПолучитьПрофильДокумента(ДанныеВходящегоДокумента.Идентификатор, Контекст.БИН, 
																	Организация, ДанныеВходящегоДокумента.ТипДокумента, Контекст.ТокенАвторизации);
		
		ИнформацияОбОшибке = Неопределено;
		Если ЭтоОшибкаИСЦЭДМ(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриПолученииДанныхССервера() + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			ИдЗапроса = "";
			Если РезультатВыполненияНаСервере.Свойство("ИдентификаторЗапроса", ИдЗапроса) Тогда 
				ТекстСообщения = ТекстСообщения
							   + Символы.ПС
							   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИдентификаторЗапросаКСерверу();
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИдентификатоНомер%", ИдЗапроса);
			КонецЕсли;
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
			ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.СоздатьОбновитьДокументыИСЦЭДМ");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			СтруктураДокументаПолученная = Неопределено;
		Иначе 
			СтруктураДокументаПолученная = ОбщегоНазначенияИСМПТК.ПреобразоватьJSON_В_МассивСтруктур(РезультатВыполненияНаСервере.ТекстОтвета);
		КонецЕсли;
		
		Если ДанныеВходящегоДокумента.ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСЦЭДМ() Тогда
			ЗаполнитьДокументАктППИСЦЭДМ(СтруктураДокументаПолученная, ДанныеВходящегоДокумента, Контекст.СтруктурнаяЕдиница, РезультатСинхронизацииПротокол);
		ИначеЕсли ДанныеВходящегоДокумента.ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктВнутреннегоПеремещенияИСЦЭДМ() Тогда
			ЗаполнитьДокументАктВнтуреннегоПеремещенияИСЦЭДМ(СтруктураДокументаПолученная, ДанныеВходящегоДокумента, Контекст.СтруктурнаяЕдиница, РезультатСинхронизацииПротокол);
		ИначеЕсли ДанныеВходящегоДокумента.ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ() Тогда
			ЗаполнитьДокументОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ(СтруктураДокументаПолученная, ДанныеВходящегоДокумента, Контекст.СтруктурнаяЕдиница, Контекст.ТокенАвторизации, РезультатСинхронизацииПротокол);
		ИначеЕсли ДанныеВходящегоДокумента.ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОРасхожденияхИСЦЭДМ() Тогда
			ЗаполнитьДокументУведомлениеОРасхожденияхИСЦЭДМ(СтруктураДокументаПолученная, ДанныеВходящегоДокумента, Контекст.СтруктурнаяЕдиница, Контекст.ТокенАвторизации, РезультатСинхронизацииПротокол);
		ИначеЕсли ДанныеВходящегоДокумента.ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСЦЭДМ() Тогда
			ЗаполнитьДокументУведомлениеОВвозеИзЕАЭСИСЦЭДМ(СтруктураДокументаПолученная, ДанныеВходящегоДокумента, Контекст.СтруктурнаяЕдиница, Контекст.ТокенАвторизации, РезультатСинхронизацииПротокол);
		КонецЕсли;
	
	КонецЦикла;
	
	Если РаботаСДокументамиИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанныхИСЦЭДМ() Тогда
		СообщениеДокументовСоздано = НСтр("ru = 'При выполнении обмена с сервером ИС ЦЭДМ было получено %Количество% новых документов.'");
		СообщениеДокументовСоздано = СтрЗаменить(СообщениеДокументовСоздано, "%Количество%", РезультатСинхронизацииПротокол.СозданоНовыхДокументов);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СообщениеДокументовСоздано);
		
		СообщениеДокументовОбновлено = НСтр("ru = 'При выполнении обмена с сервером ИС ЦЭДМ было обновлено %Количество% документов.'");
		СообщениеДокументовОбновлено = СтрЗаменить(СообщениеДокументовОбновлено, "%Количество%", РезультатСинхронизацииПротокол.ОбновленоДокументов);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СообщениеДокументовОбновлено);
		
		СообщениеОбработаноСОшибкой = НСтр("ru = 'При выполнении обмена с сервером ИС ЦЭДМ не удалось обработать %Количество% документов.'");
		СообщениеОбработаноСОшибкой = СтрЗаменить(СообщениеОбработаноСОшибкой, "%Количество%", РезультатСинхронизацииПротокол.ОбработаноСОшибкой);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(СообщениеОбработаноСОшибкой); 
	КонецЕсли;
		
КонецПроцедуры

Функция ЗаполнитьДокументАктППИСЦЭДМ(СтруктураДокументаПолученная, ДанныеВходящегоДокумента, ТРП, РезультатСинхронизацииПротокол = Неопределено)

	//Для вывода сообщения в форме синхронизации
	ЕстьОшибка = Ложь;
	ДокументСоздан = Ложь;
	
	Если СтруктураДокументаПолученная = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеВходящегоДокумента.Ссылка) Тогда
    	АктОбъект = Документы[ДанныеВходящегоДокумента.ТипДокумента].СоздатьДокумент();
		АктОбъект.Дата = ТекущаяДатаСеанса();
		ДокументСоздан = Истина;
	Иначе
		АктОбъект = ДанныеВходящегоДокумента.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	Если ТипЗнч(ТРП) = Тип("СправочникСсылка.СкладыИСЦЭДМ") Тогда 
		АктОбъект.Организация 	= ТРП.Организация;
	Иначе
		АктОбъект.Организация 	= ТРП;
	КонецЕсли;
	
	АктОбъект.Идентификатор = ДанныеВходящегоДокумента.Идентификатор;
	
	Попытка 
		ДатаПолученная = СтруктураДокументаПолученная.createDocDate;
		АктОбъект.ДатаВИСЦЭДМ = ОбщегоНазначенияИСМПТК.ПривестиСтрокуКДате(ДатаПолученная, "дмг");
	Исключение
	
	КонецПопытки;
	
	АктОбъект.НомерИСЦЭДМ = СтруктураДокументаПолученная.edoId;
	Статус = ПолучитьСтатусДокументаИСЦЭДМПоИдентификатору(СтруктураДокументаПолученная.stateId);
	
	Если Статус <> Неопределено Тогда
		АктОбъект.Статус = Статус;
	КонецЕсли;
	
	Если АктОбъект.Ссылка.Пустая() Тогда
		Если СтатусПроцессЗавершен(АктОбъект.Статус) Тогда
			//Когда с сервера получили новый документ, которого еще не было в базе, но он уже отработан (например, на сайте).
			АктОбъект.СтатусСверкиТоваров = Перечисления.СтатусыСверкиПолученныхКодовИСЦЭДМ.СверкаНеТребуется;
		Иначе 
			Если АктОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.ЗапрошеноУточнение") Тогда
				АктОбъект.СтатусСверкиТоваров = Перечисления.СтатусыСверкиПолученныхКодовИСЦЭДМ.СверкаВыполненаЕстьРасхождения;
			Иначе
				АктОбъект.СтатусСверкиТоваров = Перечисления.СтатусыСверкиПолученныхКодовИСЦЭДМ.СверкаНеВыполнялась;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДокументаПолученная.docType = "1" Тогда
		АктОбъект.ВидОперации = Перечисления.ХозяйственныеОперацииИСЦЭДМ.Реализация; 
	ИначеЕсли СтруктураДокументаПолученная.docType = "10" Тогда
		АктОбъект.ВидОперации = Перечисления.ХозяйственныеОперацииИСЦЭДМ.РеализацияОтКонтрагента; 
	КонецЕсли; 
	
	Если ТипЗнч(ДанныеВходящегоДокумента) = Тип("Структура")
				И ДанныеВходящегоДокумента.Свойство("Направление") Тогда 
		АктОбъект.Направление = ДанныеВходящегоДокумента.Направление;
	Иначе 
		АктОбъект.Направление = Перечисления.НаправленияДокументовИСМПТК.Входящий;
	КонецЕсли;
	
	Если АктОбъект.Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий Тогда 
		
		АктОбъект.ЭтапОформления = Перечисления.ЭтапыОформленияДокументовИСЦЭДМ.Отправлен;
		
	КонецЕсли; 
	
	АктОбъект.РегНомерНаБумажномНосителе 	= СтруктураДокументаПолученная.paperNum;
	Если ЗначениеЗаполнено(СтруктураДокументаПолученная.paperDate) Тогда 
		АктОбъект.ДатаВыпискиНаБумажномНосителе = ПрочитатьДатуJSON(СтруктураДокументаПолученная.paperDate, ФорматДатыJSON.ISO);
	КонецЕсли;
	
	АктОбъект.ТипАкта = Перечисления.ВидыДокументаИСМПТК.Исходный; 
	
	Если СтруктураДокументаПолученная.Свойство("primaryDocId") Тогда
		АктОбъект.ИсходноеУведомлениеОРасхожденияхИдентификатор = СтрЗаменить(Строка(Строка(СтруктураДокументаПолученная.primaryDocId)),Символы.НПП,"");
	КонецЕсли;
	
	АктОбъект.ПоставщикНаименование = СтруктураДокументаПолученная.sender.orgRu;
	
	Если СтрДлина(СтруктураДокументаПолученная.sender.bin) > 12 Тогда
		АктОбъект.ПоставщикСкладЦЭДМИдентификационныйНомер 		= СтруктураДокументаПолученная.sender.bin;
		АктОбъект.ПоставщикИдентификационныйНомер 	= Сред(СтруктураДокументаПолученная.sender.bin, 1, 12);
	Иначе
		АктОбъект.ПоставщикИдентификационныйНомер  = СтруктураДокументаПолученная.sender.bin;
	КонецЕсли;
	
	АктОбъект.ПолучательНаименование = СтруктураДокументаПолученная.receiver.orgRu;
	Если АктОбъект.ПолучательНаименование = "" Тогда
		АктОбъект.ПолучательНаименование = ТРП.НаименованиеПолное;
	КонецЕсли;
	
	Если СтрДлина(СтруктураДокументаПолученная.receiver.bin) > 12 Тогда
		АктОбъект.ПолучательСкладЦЭДМИдентификационныйНомер = СтруктураДокументаПолученная.receiver.bin;
		АктОбъект.ПолучательИдентификационныйНомер 	= Сред(СтруктураДокументаПолученная.receiver.bin, 1, 12);
	Иначе 
		АктОбъект.ПолучательИдентификационныйНомер = СтруктураДокументаПолученная.receiver.bin;
	КонецЕсли;
	
	ИдентификационныеНомераКонтрагентов	= Новый Массив;
	ИдентификационныеНомераСтруктурныхЕдиниц = Новый Массив;	
	
	Если ЗначениеЗаполнено(АктОбъект.ПоставщикИдентификационныйНомер) Тогда
		ИдентификационныеНомераКонтрагентов.Добавить(АктОбъект.ПоставщикИдентификационныйНомер);
		ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(АктОбъект.ПоставщикИдентификационныйНомер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АктОбъект.ПолучательИдентификационныйНомер) Тогда
		ИдентификационныеНомераКонтрагентов.Добавить(АктОбъект.ПолучательИдентификационныйНомер);
		ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(АктОбъект.ПолучательИдентификационныйНомер);
	КонецЕсли;
	
	СоответствияИдентификаторовИСсылок = РаботаСДокументамиИСМПТК.НайтиКонтрагентовИСтруктурныеЕдиницыПоИдентификационнымНомерам(ИдентификационныеНомераКонтрагентов, ИдентификационныеНомераСтруктурныхЕдиниц);
	
	СоответствияКонтрагентов = СоответствияИдентификаторовИСсылок.СоответствияКонтрагентов;
	
	Для Каждого ЭлементСоответствияКонтрагентов Из СоответствияКонтрагентов Цикл
		
		Идентификатор = ЭлементСоответствияКонтрагентов.Ключ;
		КонтрагентТех = ЭлементСоответствияКонтрагентов.Значение;
		
		Если АктОбъект.ПоставщикИдентификационныйНомер = Идентификатор Тогда
			АктОбъект.Поставщик = КонтрагентТех;
		КонецЕсли;
		
		Если АктОбъект.ПолучательИдентификационныйНомер = Идентификатор Тогда
			АктОбъект.Получатель = КонтрагентТех;
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнить ссылки на структурные единицы.
	СоответствияСтруктурныхЕдиниц = СоответствияИдентификаторовИСсылок.СоответствияСтруктурныхЕдиниц;
	Для Каждого ЭлементСоответствияСтруктурныхЕдиниц Из СоответствияСтруктурныхЕдиниц Цикл
		
		Идентификатор = ЭлементСоответствияСтруктурныхЕдиниц.Ключ;
		КонтрагентТех = ЭлементСоответствияСтруктурныхЕдиниц.Значение;
		
		Если АктОбъект.ПоставщикИдентификационныйНомер = Идентификатор Тогда
			АктОбъект.Поставщик = КонтрагентТех;
		КонецЕсли;
		
		Если АктОбъект.ПолучательИдентификационныйНомер = Идентификатор Тогда
			АктОбъект.Получатель = КонтрагентТех;
		КонецЕсли;
	
	КонецЦикла;
	
	Если ЗначениеЗаполнено(АктОбъект.ПолучательСкладЦЭДМИдентификационныйНомер) Тогда
		
		ДанныеСкладаЦЭДМ = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьДанныеСкладаПоИдентификаторуЦЭДМ(АктОбъект.ПолучательСкладЦЭДМИдентификационныйНомер, АктОбъект.Организация);
		
		Если Не ДанныеСкладаЦЭДМ = Неопределено Тогда
			АктОбъект.Склад 	= ДанныеСкладаЦЭДМ.Склад;
			АктОбъект.СкладЦЭДМ = ДанныеСкладаЦЭДМ.СкладЦЭДМ;
		КонецЕсли;
		
	КонецЕсли;
	
	//табличная часть Итоги
	АктОбъект.Итоги.Очистить();
	ТаблицаИтогов = СтруктураДокументаПолученная.total;
	
	Если Не ТаблицаИтогов = Неопределено Тогда
		Для Каждого СтрокаТовары Из ТаблицаИтогов Цикл
			
			НоваяСтрока = АктОбъект.Итоги.Добавить();
			
			СтруктураНоменклатуры = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, Сред(СтрокаТовары.GTIN, 2, 13));
			НоваяСтрока.Номенклатура = ?(Не СтруктураНоменклатуры = Неопределено, СтруктураНоменклатуры.Номенклатура, Неопределено);
			НоваяСтрока.Количество	 = СтрокаТовары.total;
			НоваяСтрока.GTIN		 = СтрокаТовары.GTIN;
			НоваяСтрока.Цена		 = СтрокаТовары.price;
			НоваяСтрока.EAN			 = Сред(СтрокаТовары.GTIN, 2, 13);
			
		КонецЦикла;
	КонецЕсли;
	
	АктОбъект.Контрагент = АктОбъект.Поставщик;
	
	Попытка
		АктОбъект.Записать(РежимЗаписиДокумента.Запись); 
	Исключение
		ИнформацияОбОшибке  = ИнформацияОбОшибке();
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОбновленииДокументаССервера()
					   + Символы.ПС + ПредставлениеОшибки;
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ЗаполнитьДокументАктППИСЦЭДМ");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		ЕстьОшибка = Истина;
	КонецПопытки;
	
	//Для вывода сообщения в форме синхронизации
	Если Не РезультатСинхронизацииПротокол = Неопределено Тогда
		Если ЕстьОшибка Тогда
			РезультатСинхронизацииПротокол.ОбработаноСОшибкой = РезультатСинхронизацииПротокол.ОбработаноСОшибкой + 1;
		Иначе
			Если ДокументСоздан Тогда
				РезультатСинхронизацииПротокол.СозданоНовыхДокументов = РезультатСинхронизацииПротокол.СозданоНовыхДокументов + 1;
			Иначе
				РезультатСинхронизацииПротокол.ОбновленоДокументов = РезультатСинхронизацииПротокол.ОбновленоДокументов + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Возврат АктОбъект.Ссылка;
	
КонецФункции

Функция ЗаполнитьДокументАктВнтуреннегоПеремещенияИСЦЭДМ(СтруктураДокументаПолученная, ДанныеВходящегоДокумента, Организация, РезультатСинхронизацииПротокол = Неопределено);
	
	//Для вывода сообщения в форме синхронизации
	ЕстьОшибка = Ложь;
	ДокументСоздан = Ложь;
	
	Если СтруктураДокументаПолученная = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеВходящегоДокумента.Ссылка) Тогда
	    АктОбъект = Документы[ДанныеВходящегоДокумента.ТипДокумента].СоздатьДокумент();
		АктОбъект.Дата = ТекущаяДатаСеанса();
		ДокументСоздан = Истина;
	Иначе
		АктОбъект = ДанныеВходящегоДокумента.Ссылка.ПолучитьОбъект();
	КонецЕсли;

	Если ТипЗнч(Организация) = Тип("СправочникСсылка.СкладыИСЦЭДМ") Тогда 
		АктОбъект.Организация = Организация.Организация;
	Иначе 
		АктОбъект.Организация = Организация;
	КонецЕсли;
	АктОбъект.Идентификатор = ДанныеВходящегоДокумента.Идентификатор;
		
	Попытка 
		ДатаПолученная = СтруктураДокументаПолученная.createDocDate;
		АктОбъект.ДатаВИСЦЭДМ = ОбщегоНазначенияИСМПТК.ПривестиСтрокуКДате(ДатаПолученная, "дмг");
	Исключение
	
	КонецПопытки;
	
	АктОбъект.НомерИСЦЭДМ = СтруктураДокументаПолученная.edoId;
	Статус = ПолучитьСтатусДокументаИСЦЭДМПоИдентификатору(СтруктураДокументаПолученная.stateId); 
	
	АктОбъект.РегНомерНаБумажномНосителе 	= СтруктураДокументаПолученная.paperNum; 
	Если ЗначениеЗаполнено(СтруктураДокументаПолученная.paperDate) Тогда 
		АктОбъект.ДатаВыпискиНаБумажномНосителе = ПрочитатьДатуJSON(СтруктураДокументаПолученная.paperDate, ФорматДатыJSON.ISO);
	КонецЕсли;
	
	Если Статус <> Неопределено Тогда
		АктОбъект.Статус = Статус;
		Если Не Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.Черновик")
			И Не Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.НеОпределен") Тогда
			АктОбъект.ЭтапОформления = ПредопределенноеЗначение("Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.Отправлен");
		Иначе
			АктОбъект.ЭтапОформления = ПредопределенноеЗначение("Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.ВРаботе");
		КонецЕсли;
	КонецЕсли;
	
	Если АктОбъект.Ссылка.Пустая() Тогда
		Если СтатусПроцессЗавершен(АктОбъект.Статус) Тогда
			//Когда с сервера получили новый документ, которого еще не было в базе, но он уже отработан (например, на сайте).
			АктОбъект.СтатусСверкиТоваров = Перечисления.СтатусыСверкиПолученныхКодовИСЦЭДМ.СверкаНеТребуется;
		Иначе                             
			Если АктОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.ЗапрошеноУточнение") Тогда
				АктОбъект.СтатусСверкиТоваров = Перечисления.СтатусыСверкиПолученныхКодовИСЦЭДМ.СверкаВыполненаЕстьРасхождения;
			Иначе
				АктОбъект.СтатусСверкиТоваров = Перечисления.СтатусыСверкиПолученныхКодовИСЦЭДМ.СверкаНеВыполнялась;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДокументаПолученная.Свойство("primaryDocId") Тогда
		АктОбъект.ИсходноеУведомлениеОРасхожденияхИдентификатор = СтрЗаменить(Строка(Строка(СтруктураДокументаПолученная.primaryDocId)),Символы.НПП,"");
	КонецЕсли;
	
	Если СтруктураДокументаПолученная.docType = "6" Тогда
		АктОбъект.ВидОперации = Перечисления.ХозяйственныеОперацииИСЦЭДМ.ВнутреннееПеремещение; 
	ИначеЕсли СтруктураДокументаПолученная.docType = "7" Тогда
		АктОбъект.ВидОперации = Перечисления.ХозяйственныеОперацииИСЦЭДМ.ВнутреннееПеремещениеЕД; 
	КонецЕсли; 
	
	АктОбъект.ПоставщикНаименование = СтруктураДокументаПолученная.sender.orgRu;
	АктОбъект.ПоставщикИдентификационныйНомер = СтруктураДокументаПолученная.sender.bin;
	
	АктОбъект.ПолучательНаименование = СтруктураДокументаПолученная.receiver.orgRu;
	Если АктОбъект.ПолучательНаименование = "" Тогда
		АктОбъект.ПолучательНаименование = Организация.НаименованиеПолное;
	КонецЕсли;
	
	АктОбъект.ПолучательИдентификационныйНомер = СтруктураДокументаПолученная.receiver.bin;
	
	Если СтрДлина(АктОбъект.ПолучательИдентификационныйНомер) > 12 Тогда
		ДанныеСкладаЦЭДМ = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьДанныеСкладаПоИдентификаторуЦЭДМ(АктОбъект.ПолучательИдентификационныйНомер, АктОбъект.Организация);
		Если Не ДанныеСкладаЦЭДМ = Неопределено Тогда
			АктОбъект.Получатель = ДанныеСкладаЦЭДМ.СкладЦЭДМ;
			АктОбъект.СкладПолучатель = ДанныеСкладаЦЭДМ.Склад;
		КонецЕсли;
	Иначе
		Получатель = ИнтеграцияИСМПТКПереопределяемый.ПодобратьСсылкуНаУчастникаМаркировкиПоБИН(АктОбъект.ПолучательИдентификационныйНомер);
		Если Не Получатель = Неопределено Тогда 
			АктОбъект.Получатель = Получатель;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрДлина(АктОбъект.ПоставщикИдентификационныйНомер) > 12 Тогда
		ДанныеСкладаЦЭДМ = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьДанныеСкладаПоИдентификаторуЦЭДМ(АктОбъект.ПоставщикИдентификационныйНомер, АктОбъект.Организация);
		Если Не ДанныеСкладаЦЭДМ = Неопределено Тогда
			АктОбъект.Поставщик = ДанныеСкладаЦЭДМ.СкладЦЭДМ;
			АктОбъект.СкладПоставщик = ДанныеСкладаЦЭДМ.Склад;
		КонецЕсли;
	Иначе
		Поставщик = ИнтеграцияИСМПТКПереопределяемый.ПодобратьСсылкуНаУчастникаМаркировкиПоБИН(АктОбъект.ПоставщикИдентификационныйНомер);
		Если Не Поставщик = Неопределено Тогда 
			АктОбъект.Поставщик = Поставщик;
		КонецЕсли;
	КонецЕсли;
	
	//табличная часть Итоги
	АктОбъект.Итоги.Очистить();
	ТаблицаИтогов = СтруктураДокументаПолученная.total;
	
	Если Не ТаблицаИтогов = Неопределено Тогда
		Для Каждого СтрокаТовары Из ТаблицаИтогов Цикл
			
			НоваяСтрока = АктОбъект.Итоги.Добавить();
			СтруктураНоменклатуры = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, Сред(СтрокаТовары.GTIN, 2, 13));
			НоваяСтрока.Номенклатура = ?(Не СтруктураНоменклатуры = Неопределено, СтруктураНоменклатуры.Номенклатура, Неопределено);
			НоваяСтрока.Количество	 = СтрокаТовары.total;
			НоваяСтрока.GTIN = СтрокаТовары.GTIN;
			НоваяСтрока.EAN  = Сред(СтрокаТовары.GTIN, 2, 13);

		КонецЦикла;
	КонецЕсли; 
	
	Попытка 
		АктОбъект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ИнформацияОбОшибке  = ИнформацияОбОшибке();
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОбновленииДокументаССервера()
					   + Символы.ПС + ПредставлениеОшибки;
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ЗаполнитьДокументАктВнтуреннегоПеремещенияИСЦЭДМ");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		ЕстьОшибка = Истина;
	КонецПопытки;
	
	//Для вывода сообщения в форме синхронизации
	Если Не РезультатСинхронизацииПротокол = Неопределено Тогда
		Если ЕстьОшибка Тогда
			РезультатСинхронизацииПротокол.ОбработаноСОшибкой = РезультатСинхронизацииПротокол.ОбработаноСОшибкой + 1;
		Иначе
			Если ДокументСоздан Тогда
				РезультатСинхронизацииПротокол.СозданоНовыхДокументов = РезультатСинхронизацииПротокол.СозданоНовыхДокументов + 1;
			Иначе
				РезультатСинхронизацииПротокол.ОбновленоДокументов = РезультатСинхронизацииПротокол.ОбновленоДокументов + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат АктОбъект.Ссылка;

КонецФункции

Процедура ЗаполнитьДокументОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ(СтруктураДокументаПолученная, ДанныеВходящегоДокумента, ТРП, ТокенАвторизации, РезультатСинхронизацииПротокол = Неопределено);
	
	//Для вывода сообщения в форме синхронизации
	ЕстьОшибка = Ложь;
	ДокументСоздан = Ложь;
	
	Если СтруктураДокументаПолученная = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеВходящегоДокумента.Ссылка) Тогда
      	ОтчетОпередачеОбъект = Документы[ДанныеВходящегоДокумента.ТипДокумента].СоздатьДокумент();
		ОтчетОпередачеОбъект.Дата = ТекущаяДатаСеанса();
		ДокументСоздан = Истина;
	Иначе
		ОтчетОпередачеОбъект = ДанныеВходящегоДокумента.Ссылка.ПолучитьОбъект();
	КонецЕсли;

	Если ТипЗнч(ТРП) = Тип("СправочникСсылка.СкладыИСЦЭДМ") Тогда
		ОтчетОпередачеОбъект.Организация    = ТРП.Организация;
	Иначе
		ОтчетОпередачеОбъект.Организация    = ТРП;
	КонецЕсли;
	
	ОтчетОпередачеОбъект.Идентификатор 	= ДанныеВходящегоДокумента.Идентификатор;
	
	Попытка 
		ДатаПолученная = СтруктураДокументаПолученная.createDocDate;
		ОтчетОпередачеОбъект.ДатаВИСЦЭДМ = ОбщегоНазначенияИСМПТК.ПривестиСтрокуКДате(ДатаПолученная, "дмг");
	Исключение
	
	КонецПопытки;
	
	ОтчетОпередачеОбъект.НомерИСЦЭДМ = СтруктураДокументаПолученная.edoId;
	Статус = ПолучитьСтатусДокументаИСЦЭДМПоИдентификатору(СтруктураДокументаПолученная.stateId);
	ОтчетОпередачеОбъект.Направление = Перечисления.НаправленияДокументовИСМПТК.Входящий; 
	
	ОтчетОпередачеОбъект.СтранаОтправления = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьСтрануПоКоду(СтрЗаменить(СтруктураДокументаПолученная.countryCode, "1", ""));
	
	ОтчетОпередачеОбъект.РегНомерНаБумажномНосителе 	= СтруктураДокументаПолученная.paperNum; 
	Если ЗначениеЗаполнено(СтруктураДокументаПолученная.paperDate) Тогда 
		ОтчетОпередачеОбъект.ДатаВыпискиНаБумажномНосителе = ПрочитатьДатуJSON(СтруктураДокументаПолученная.paperDate, ФорматДатыJSON.ISO);
	КонецЕсли;
	
	Если Статус <> Неопределено Тогда
		ОтчетОпередачеОбъект.Статус = Статус;
	КонецЕсли;
	
	Если СтруктураДокументаПолученная.Свойство("shipmentDate") Тогда 
		ОтчетОпередачеОбъект.ДатаОтгрузки =  XMLЗначение(Тип("Дата"), СтруктураДокументаПолученная.shipmentDate);
	КонецЕсли;
	
	ОтчетОпередачеОбъект.ПоставщикНаименование = СтруктураДокументаПолученная.sender.orgRu;
	
	Если СтрДлина(СтруктураДокументаПолученная.sender.bin) > 12 Тогда
		ОтчетОпередачеОбъект.ПоставщикСкладЦЭДМИдентификационныйНомер = СтруктураДокументаПолученная.sender.bin;
		ОтчетОпередачеОбъект.ПоставщикИдентификационныйНомер = Сред(СтруктураДокументаПолученная.sender.bin, 1, 12);
	Иначе
		ОтчетОпередачеОбъект.ПоставщикИдентификационныйНомер = СтруктураДокументаПолученная.sender.bin;
	КонецЕсли;
	
	ОтчетОпередачеОбъект.ПолучательНаименование = СтруктураДокументаПолученная.receiver.orgRu;
	Если ОтчетОпередачеОбъект.ПолучательНаименование = "" Тогда
		ОтчетОпередачеОбъект.ПолучательНаименование = ТРП.НаименованиеПолное;
	КонецЕсли;
	
	Если СтрДлина(СтруктураДокументаПолученная.receiver.bin) > 12 Тогда
		ОтчетОпередачеОбъект.ПолучательСкладЦЭДМИдентификационныйНомер = СтруктураДокументаПолученная.receiver.bin;
		ОтчетОпередачеОбъект.ПолучательИдентификационныйНомер = Сред(СтруктураДокументаПолученная.receiver.bin, 1, 12);
	Иначе 
		ОтчетОпередачеОбъект.ПолучательИдентификационныйНомер = СтруктураДокументаПолученная.receiver.bin;
	КонецЕсли;
	
	ИдентификационныеНомераОрганизации = Новый Массив;
	
	Если ЗначениеЗаполнено(ОтчетОпередачеОбъект.ПоставщикИдентификационныйНомер) Тогда
		ИдентификационныеНомераОрганизации.Добавить(ОтчетОпередачеОбъект.ПоставщикИдентификационныйНомер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтчетОпередачеОбъект.ПолучательСкладЦЭДМИдентификационныйНомер) Тогда
		
		ДанныеСкладаЦЭДМ = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьДанныеСкладаПоИдентификаторуЦЭДМ(ОтчетОпередачеОбъект.ПолучательСкладЦЭДМИдентификационныйНомер, ОтчетОпередачеОбъект.Организация);
		
		Если Не ДанныеСкладаЦЭДМ = Неопределено Тогда
			ОтчетОпередачеОбъект.СкладЦЭДМ 	= ДанныеСкладаЦЭДМ.СкладЦЭДМ;
		КонецЕсли;
		
	КонецЕсли;
	
	ИдентификационныеНомераКонтрагентов		 = Новый Массив;
	ИдентификационныеНомераСтруктурныхЕдиниц = Новый Массив;	
	
	Если ЗначениеЗаполнено(ОтчетОпередачеОбъект.ПоставщикИдентификационныйНомер) Тогда
		ИдентификационныеНомераКонтрагентов.Добавить(ОтчетОпередачеОбъект.ПоставщикИдентификационныйНомер);
		ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(ОтчетОпередачеОбъект.ПоставщикИдентификационныйНомер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтчетОпередачеОбъект.ПолучательИдентификационныйНомер) Тогда
		ИдентификационныеНомераКонтрагентов.Добавить(ОтчетОпередачеОбъект.ПолучательИдентификационныйНомер);
		ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(ОтчетОпередачеОбъект.ПолучательИдентификационныйНомер);
	КонецЕсли;
	
	СоответствияИдентификаторовИСсылок = РаботаСДокументамиИСМПТК.НайтиКонтрагентовИСтруктурныеЕдиницыПоИдентификационнымНомерам(ИдентификационныеНомераКонтрагентов, ИдентификационныеНомераСтруктурныхЕдиниц);
	СоответствияКонтрагентов = СоответствияИдентификаторовИСсылок.СоответствияКонтрагентов;
	
	Для Каждого ЭлементСоответствияКонтрагентов Из СоответствияКонтрагентов Цикл
		
		Идентификатор = ЭлементСоответствияКонтрагентов.Ключ;
		КонтрагентТех = ЭлементСоответствияКонтрагентов.Значение;
		
		Если ОтчетОпередачеОбъект.ПоставщикИдентификационныйНомер = Идентификатор Тогда
			ОтчетОпередачеОбъект.Поставщик  = КонтрагентТех; //контрагент 
			ОтчетОпередачеОбъект.Контрагент = ОтчетОпередачеОбъект.Поставщик;
		КонецЕсли;
		
		Если ОтчетОпередачеОбъект.ПолучательИдентификационныйНомер = Идентификатор Тогда
			ОтчетОпередачеОбъект.Получатель = КонтрагентТех; // организация
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнить ссылки на структурные единицы.
	СоответствияСтруктурныхЕдиниц = СоответствияИдентификаторовИСсылок.СоответствияСтруктурныхЕдиниц;
	Для Каждого ЭлементСоответствияСтруктурныхЕдиниц Из СоответствияСтруктурныхЕдиниц Цикл
		
		Идентификатор = ЭлементСоответствияСтруктурныхЕдиниц.Ключ;
		КонтрагентТех = ЭлементСоответствияСтруктурныхЕдиниц.Значение;
		
		Если ОтчетОпередачеОбъект.ПоставщикИдентификационныйНомер = Идентификатор Тогда
			ОтчетОпередачеОбъект.Поставщик  = КонтрагентТех;
			ОтчетОпередачеОбъект.Контрагент = ОтчетОпередачеОбъект.Поставщик;
		КонецЕсли;
		
		Если ОтчетОпередачеОбъект.ПолучательИдентификационныйНомер = Идентификатор Тогда
			ОтчетОпередачеОбъект.Получатель = КонтрагентТех;
		КонецЕсли;
	
	КонецЦикла;
	
	ОтчетОпередачеОбъект.Марки.Очистить();
	ТаблицаКодов = ПолучитьПустуюТаблицуКодов();
	ПолучитьСписокМарокДокумента(СтруктураДокументаПолученная.id, СтруктураДокументаПолученная.receiver.bin, ОтчетОпередачеОбъект.Организация, , , ТаблицаКодов, ТокенАвторизации);
	
	Для Каждого КодПолученный Из ТаблицаКодов Цикл 
		
		НоваяСтрока = ОтчетОпередачеОбъект.Марки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, КодПолученный);
		
	КонецЦикла;

	ОтчетОпередачеОбъект.Марки.Сортировать("КодТранспортнойУпаковки");
	
	Попытка 
		ОтчетОпередачеОбъект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ИнформацияОбОшибке  = ИнформацияОбОшибке();
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОбновленииДокументаССервера()
					   + Символы.ПС + ПредставлениеОшибки;
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ЗаполнитьДокументОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		ЕстьОшибка = Истина;
	КонецПопытки;
	
	//Для вывода сообщения в форме синхронизации
	Если Не РезультатСинхронизацииПротокол = Неопределено Тогда
		Если ЕстьОшибка Тогда
			РезультатСинхронизацииПротокол.ОбработаноСОшибкой = РезультатСинхронизацииПротокол.ОбработаноСОшибкой + 1;
		Иначе
			Если ДокументСоздан Тогда
				РезультатСинхронизацииПротокол.СозданоНовыхДокументов = РезультатСинхронизацииПротокол.СозданоНовыхДокументов + 1;
			Иначе
				РезультатСинхронизацииПротокол.ОбновленоДокументов = РезультатСинхронизацииПротокол.ОбновленоДокументов + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументУведомлениеОРасхожденияхИСЦЭДМ(СтруктураДокументаПолученная, ДанныеВходящегоДокумента, ТРП, ТокенАвторизации, РезультатСинхронизацииПротокол = Неопределено);

	//Для вывода сообщения в форме синхронизации
	ЕстьОшибка = Ложь;
	ДокументСоздан = Ложь;
	
	Если СтруктураДокументаПолученная = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеВходящегоДокумента.Ссылка) Тогда
     	УведомлениеОРасхожденияхОбъект = Документы[ДанныеВходящегоДокумента.ТипДокумента].СоздатьДокумент();
		УведомлениеОРасхожденияхОбъект.Дата  = ТекущаяДатаСеанса();
		УведомлениеОРасхожденияхОбъект.Автор = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь();
		ДокументСоздан = Истина;
	Иначе
		УведомлениеОРасхожденияхОбъект = ДанныеВходящегоДокумента.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	Если ТипЗнч(ТРП) = Тип("СправочникСсылка.СкладыИСЦЭДМ") Тогда 
		УведомлениеОРасхожденияхОбъект.Организация 	= ТРП.Организация;
	Иначе
		УведомлениеОРасхожденияхОбъект.Организация 	= ТРП;
	КонецЕсли;

	УведомлениеОРасхожденияхОбъект.Идентификатор = СтруктураДокументаПолученная.id;
	
	Попытка 
		ДатаПолученная = СтруктураДокументаПолученная.createDocDate;
		УведомлениеОРасхожденияхОбъект.ДатаВИСЦЭДМ = ОбщегоНазначенияИСМПТК.ПривестиСтрокуКДате(ДатаПолученная, "дмг");
	Исключение
	
	КонецПопытки;
	
	УведомлениеОРасхожденияхОбъект.НомерИСЦЭДМ = СтруктураДокументаПолученная.edoId;
	Статус = ПолучитьСтатусДокументаИСЦЭДМПоИдентификатору(СтруктураДокументаПолученная.stateId);
	
	Если Статус <> Неопределено Тогда
		УведомлениеОРасхожденияхОбъект.Статус = Статус;
	КонецЕсли;
	
	УведомлениеОРасхожденияхОбъект.ПоставщикНаименование = СтруктураДокументаПолученная.sender.orgRu;
	УведомлениеОРасхожденияхОбъект.ПоставщикИдентификационныйНомер  = СтруктураДокументаПолученная.sender.bin;
	
	УведомлениеОРасхожденияхОбъект.ПолучательНаименование = СтруктураДокументаПолученная.receiver.orgRu;
	Если УведомлениеОРасхожденияхОбъект.ПолучательНаименование = "" Тогда
		УведомлениеОРасхожденияхОбъект.ПолучательНаименование = УведомлениеОРасхожденияхОбъект.Организация.НаименованиеПолное;
	КонецЕсли;
	
	УведомлениеОРасхожденияхОбъект.ПолучательИдентификационныйНомер = СтруктураДокументаПолученная.receiver.bin;
	
	Если СтрДлина(УведомлениеОРасхожденияхОбъект.ПолучательИдентификационныйНомер) > 12 Тогда
		ДанныеСкладаЦЭДМ = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьДанныеСкладаПоИдентификаторуЦЭДМ(УведомлениеОРасхожденияхОбъект.ПолучательИдентификационныйНомер, УведомлениеОРасхожденияхОбъект.Организация);
		Если Не ДанныеСкладаЦЭДМ = Неопределено Тогда
			УведомлениеОРасхожденияхОбъект.Получатель = ДанныеСкладаЦЭДМ.СкладЦЭДМ;
		КонецЕсли;
	Иначе
		Получатель = ИнтеграцияИСМПТКПереопределяемый.ПодобратьСсылкуНаУчастникаМаркировкиПоБИН(УведомлениеОРасхожденияхОбъект.ПолучательИдентификационныйНомер);
		Если Не Получатель = Неопределено Тогда 
			УведомлениеОРасхожденияхОбъект.Получатель = Получатель;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрДлина(УведомлениеОРасхожденияхОбъект.ПоставщикИдентификационныйНомер) > 12 Тогда
		ДанныеСкладаЦЭДМ = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьДанныеСкладаПоИдентификаторуЦЭДМ(УведомлениеОРасхожденияхОбъект.ПоставщикИдентификационныйНомер, УведомлениеОРасхожденияхОбъект.Организация);
		Если Не ДанныеСкладаЦЭДМ = Неопределено Тогда
			УведомлениеОРасхожденияхОбъект.Поставщик = ДанныеСкладаЦЭДМ.СкладЦЭДМ;
		КонецЕсли;
	Иначе
		Поставщик = ИнтеграцияИСМПТКПереопределяемый.ПодобратьСсылкуНаУчастникаМаркировкиПоБИН(УведомлениеОРасхожденияхОбъект.ПоставщикИдентификационныйНомер);
		Если Не Поставщик = Неопределено Тогда 
			УведомлениеОРасхожденияхОбъект.Поставщик = Поставщик;
		КонецЕсли;
	КонецЕсли;
	
	УведомлениеОРасхожденияхОбъект.ИдентификаторДокументОснование = СтрЗаменить(Строка(Строка(СтруктураДокументаПолученная.primaryDocId)),Символы.НПП,"");
	
	УведомлениеОРасхожденияхОбъект.РегНомерНаБумажномНосителе = СтруктураДокументаПолученная.paperNum;
	УведомлениеОРасхожденияхОбъект.ДатаВыпискиНаБумажномНосителе = ОбщегоНазначенияИСМПТК.ПривестиСтрокуКДате(СтруктураДокументаПолученная.paperDate, "дмг"); 
	
	СсылкаОснования = ПолучитьКорректируемыйДокумент(УведомлениеОРасхожденияхОбъект.ИдентификаторДокументОснование);
	УведомлениеОРасхожденияхОбъект.ДокументОснование = СсылкаОснования;
	
	Если ТипЗнч(СсылкаОснования) = Тип("ДокументСсылка.АктВнутреннегоПеремещенияИСЦЭДМ")
		Или ТипЗнч(СсылкаОснования) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСЦЭДМ") Тогда 
		УведомлениеОРасхожденияхОбъект.Направление = Перечисления.НаправленияДокументовИСМПТК.Входящий;
	ИначеЕсли ТипЗнч(СсылкаОснования) = Тип("ДокументСсылка.АктПриемаПередачиИСЦЭДМ") Тогда 
		УведомлениеОРасхожденияхОбъект.Направление = ?(СсылкаОснования.Направление = Перечисления.НаправленияДокументовИСМПТК.Входящий, 
													   Перечисления.НаправленияДокументовИСМПТК.Исходящий,
													   Перечисления.НаправленияДокументовИСМПТК.Входящий);
	ИначеЕсли СсылкаОснования = Неопределено Тогда
		УведомлениеОРасхожденияхОбъект.Направление = Перечисления.НаправленияДокументовИСМПТК.Входящий;
	КонецЕсли;
	
	УведомлениеОРасхожденияхОбъект.НайденныеКМ.Очистить();
	УведомлениеОРасхожденияхОбъект.ДобавленныеКМ.Очистить();
	УведомлениеОРасхожденияхОбъект.НеНайденныеКМ.Очистить();
	
	СтруктураКодов = Неопределено;
	
	Если СтруктураДокументаПолученная.Свойство("markTotal", СтруктураКодов) Тогда 
		
		ЗаполнитьТЧУведомленияОРасхождении(УведомлениеОРасхожденияхОбъект.НайденныеКМ, 	 СтруктураКодов.marksExists);
		ЗаполнитьТЧУведомленияОРасхождении(УведомлениеОРасхожденияхОбъект.ДобавленныеКМ, СтруктураКодов.marksNew);
		ЗаполнитьТЧУведомленияОРасхождении(УведомлениеОРасхожденияхОбъект.НеНайденныеКМ, СтруктураКодов.unknownElements);
		
	КонецЕсли;

	Попытка
		УведомлениеОРасхожденияхОбъект.Записать(РежимЗаписиДокумента.Запись);
    Исключение
		ИнформацияОбОшибке  = ИнформацияОбОшибке();
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОбновленииДокументаССервера()
					   + Символы.ПС + ПредставлениеОшибки;
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ЗаполнитьДокументУведомлениеОРасхожденияхИСЦЭДМ");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		ЕстьОшибка = Истина;
	КонецПопытки;
	
	//Для вывода сообщения в форме синхронизации
	Если Не РезультатСинхронизацииПротокол = Неопределено Тогда
		Если ЕстьОшибка Тогда
			РезультатСинхронизацииПротокол.ОбработаноСОшибкой = РезультатСинхронизацииПротокол.ОбработаноСОшибкой + 1;
		Иначе
			Если ДокументСоздан Тогда
				РезультатСинхронизацииПротокол.СозданоНовыхДокументов = РезультатСинхронизацииПротокол.СозданоНовыхДокументов + 1;
			Иначе
				РезультатСинхронизацииПротокол.ОбновленоДокументов = РезультатСинхронизацииПротокол.ОбновленоДокументов + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьДокументУведомлениеОВвозеИзЕАЭСИСЦЭДМ(СтруктураДокументаПолученная, ДанныеВходящегоДокумента, ТРП, ТокенАвторизации, РезультатСинхронизацииПротокол = Неопределено);

	//Для вывода сообщения в форме синхронизации
	ЕстьОшибка = Ложь;
	ДокументСоздан = Ложь;
	
	Если СтруктураДокументаПолученная = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеВходящегоДокумента.Ссылка) Тогда
		УведомлениеОВвозеИзЕАЭС = Документы[ДанныеВходящегоДокумента.ТипДокумента].СоздатьДокумент();
		УведомлениеОВвозеИзЕАЭС.Дата = ТекущаяДатаСеанса();
		ДокументСоздан = Истина;
	Иначе
		УведомлениеОВвозеИзЕАЭС = ДанныеВходящегоДокумента.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	Если ТипЗнч(ТРП) = Тип("СправочникСсылка.СкладыИСЦЭДМ") Тогда 
		УведомлениеОВвозеИзЕАЭС.Организация = ТРП.Организация;
	Иначе
		УведомлениеОВвозеИзЕАЭС.Организация = ТРП;
	КонецЕсли;
	
	УведомлениеОВвозеИзЕАЭС.Идентификатор = СтруктураДокументаПолученная.id;
		
	Попытка 
		ДатаПолученная = СтруктураДокументаПолученная.createDocDate;
		УведомлениеОВвозеИзЕАЭС.ДатаВИСЦЭДМ = ОбщегоНазначенияИСМПТК.ПривестиСтрокуКДате(ДатаПолученная, "дмг");
	Исключение
	
	КонецПопытки;
	
	УведомлениеОВвозеИзЕАЭС.НомерИСЦЭДМ = СтруктураДокументаПолученная.edoId;
	Статус = ПолучитьСтатусДокументаИСЦЭДМПоИдентификатору(СтруктураДокументаПолученная.stateId);
	УведомлениеОВвозеИзЕАЭС.Направление = Перечисления.НаправленияДокументовИСМПТК.Входящий;
	
	Если СтруктураДокументаПолученная.Свойство("countryCodeEAEU") Тогда 
		УведомлениеОВвозеИзЕАЭС.СтранаОтправления = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьСтрануПоКоду(СтрЗаменить(СтруктураДокументаПолученная.countryCodeEAEU, "1", ""));
	КонецЕсли;
		
	Если Статус <> Неопределено Тогда
		УведомлениеОВвозеИзЕАЭС.Статус = Статус;
	КонецЕсли;

	Если УведомлениеОВвозеИзЕАЭС.Ссылка.Пустая() Тогда
		Если СтатусПроцессЗавершен(УведомлениеОВвозеИзЕАЭС.Статус) Тогда
			//Когда с сервера получили новый документ, которого еще не было в базе, но он уже отработан (например, на сайте).
			УведомлениеОВвозеИзЕАЭС.СтатусСверкиТоваров = Перечисления.СтатусыСверкиПолученныхКодовИСЦЭДМ.СверкаНеТребуется;
		Иначе                             
			Если УведомлениеОВвозеИзЕАЭС.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.ЗапрошеноУточнение") Тогда
				УведомлениеОВвозеИзЕАЭС.СтатусСверкиТоваров = Перечисления.СтатусыСверкиПолученныхКодовИСЦЭДМ.СверкаВыполненаЕстьРасхождения;
			Иначе
				УведомлениеОВвозеИзЕАЭС.СтатусСверкиТоваров = Перечисления.СтатусыСверкиПолученныхКодовИСЦЭДМ.СверкаНеВыполнялась;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДокументаПолученная.Свойство("primaryDocId") Тогда
		УведомлениеОВвозеИзЕАЭС.ИсходноеУведомлениеОРасхожденияхИдентификатор = СтрЗаменить(Строка(Строка(СтруктураДокументаПолученная.primaryDocId)),Символы.НПП,"");
	КонецЕсли;
	
	УведомлениеОВвозеИзЕАЭС.РегНомерНаБумажномНосителе 	= СтруктураДокументаПолученная.paperNum; 
	Если ЗначениеЗаполнено(СтруктураДокументаПолученная.paperDate) Тогда 
		УведомлениеОВвозеИзЕАЭС.ДатаВыпискиНаБумажномНосителе = ПрочитатьДатуJSON(СтруктураДокументаПолученная.paperDate, ФорматДатыJSON.ISO);
	КонецЕсли;
	
	УведомлениеОВвозеИзЕАЭС.ПоставщикНаименование = СтруктураДокументаПолученная.supplierName;
	УведомлениеОВвозеИзЕАЭС.ПоставщикИдентификационныйНомер  = СтруктураДокументаПолученная.supplierId;
	
	Поставщик = ИнтеграцияИСМПТКПереопределяемый.ПодобратьСсылкуНаУчастникаМаркировкиПоБИН(УведомлениеОВвозеИзЕАЭС.ПоставщикИдентификационныйНомер);
	Если Не Поставщик = Неопределено Тогда 
		УведомлениеОВвозеИзЕАЭС.Поставщик  = Поставщик;
		УведомлениеОВвозеИзЕАЭС.Контрагент = Поставщик;
	КонецЕсли;
	
	УведомлениеОВвозеИзЕАЭС.ПолучательНаименование = СтруктураДокументаПолученная.receiver.orgRu;
	Если УведомлениеОВвозеИзЕАЭС.ПолучательНаименование = "" Тогда
		УведомлениеОВвозеИзЕАЭС.ПолучательНаименование = УведомлениеОВвозеИзЕАЭС.Организация.НаименованиеПолное;
	КонецЕсли;
	УведомлениеОВвозеИзЕАЭС.ПолучательИдентификационныйНомер = СтруктураДокументаПолученная.receiver.bin;
	
	Если СтрДлина(УведомлениеОВвозеИзЕАЭС.ПолучательИдентификационныйНомер) > 12 Тогда
		
		ДанныеСкладаЦЭДМ = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьДанныеСкладаПоИдентификаторуЦЭДМ(УведомлениеОВвозеИзЕАЭС.ПолучательИдентификационныйНомер, УведомлениеОВвозеИзЕАЭС.Организация);
		Если Не ДанныеСкладаЦЭДМ = Неопределено Тогда
			УведомлениеОВвозеИзЕАЭС.СкладЦЭДМ = ДанныеСкладаЦЭДМ.СкладЦЭДМ;
			УведомлениеОВвозеИзЕАЭС.Склад 	  = ДанныеСкладаЦЭДМ.Склад;
		КонецЕсли;
		
		УведомлениеОВвозеИзЕАЭС.ПолучательСкладЦЭДМИдентификационныйНомер = СтруктураДокументаПолученная.receiver.bin;
		УведомлениеОВвозеИзЕАЭС.ПолучательИдентификационныйНомер = Сред(СтруктураДокументаПолученная.receiver.bin, 1, 12);
		
	Иначе 
		УведомлениеОВвозеИзЕАЭС.ПолучательИдентификационныйНомер = СтруктураДокументаПолученная.receiver.bin;
		Получатель = ИнтеграцияИСМПТКПереопределяемый.ПодобратьСсылкуНаУчастникаМаркировкиПоБИН(УведомлениеОВвозеИзЕАЭС.ПолучательИдентификационныйНомер);
		Если Не Получатель = Неопределено Тогда 
			УведомлениеОВвозеИзЕАЭС.Получатель = Получатель;
		КонецЕсли;
	КонецЕсли;
	
	//табличная часть Итоги
	УведомлениеОВвозеИзЕАЭС.Итоги.Очистить();
	ТаблицаИтогов = СтруктураДокументаПолученная.total;
	
	Если Не ТаблицаИтогов = Неопределено Тогда 
		Для Каждого СтрокаТовары Из ТаблицаИтогов Цикл
			
			НоваяСтрока = УведомлениеОВвозеИзЕАЭС.Итоги.Добавить();
			СтруктураНоменклатуры = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, Сред(СтрокаТовары.GTIN, 2, 13));
			НоваяСтрока.Номенклатура = ?(Не СтруктураНоменклатуры = Неопределено, СтруктураНоменклатуры.Номенклатура, Неопределено);
			НоваяСтрока.Количество	 = СтрокаТовары.total;
			НоваяСтрока.GTIN = СтрокаТовары.GTIN;
			НоваяСтрока.Цена = СтрокаТовары.price;
			НоваяСтрока.EAN	 = Сред(СтрокаТовары.GTIN, 2, 13);
			
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		УведомлениеОВвозеИзЕАЭС.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ИнформацияОбОшибке  = ИнформацияОбОшибке();
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОбновленииДокументаССервера()
					   + Символы.ПС + ПредставлениеОшибки;
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ЗаполнитьДокументУведомлениеОВвозеИзЕАЭСИСЦЭДМ");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		ЕстьОшибка = Истина;
	КонецПопытки;
	
	//Для вывода сообщения в форме синхронизации
	Если Не РезультатСинхронизацииПротокол = Неопределено Тогда
		Если ЕстьОшибка Тогда
			РезультатСинхронизацииПротокол.ОбработаноСОшибкой = РезультатСинхронизацииПротокол.ОбработаноСОшибкой + 1;
		Иначе
			Если ДокументСоздан Тогда
				РезультатСинхронизацииПротокол.СозданоНовыхДокументов = РезультатСинхронизацииПротокол.СозданоНовыхДокументов + 1;
			Иначе
				РезультатСинхронизацииПротокол.ОбновленоДокументов = РезультатСинхронизацииПротокол.ОбновленоДокументов + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат УведомлениеОВвозеИзЕАЭС.Ссылка;

КонецФункции

Функция ПолучитьКорректируемыйДокумент(ИдДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АктПриемаПередачиИСЦЭДМ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АктПриемаПередачиИСЦЭДМ КАК АктПриемаПередачиИСЦЭДМ
	|ГДЕ
	|	АктПриемаПередачиИСЦЭДМ.Идентификатор = &Идентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктВнутреннегоПеремещенияИСЦЭДМ.Ссылка
	|ИЗ
	|	Документ.АктВнутреннегоПеремещенияИСЦЭДМ КАК АктВнутреннегоПеремещенияИСЦЭДМ
	|ГДЕ
	|	АктВнутреннегоПеремещенияИСЦЭДМ.Идентификатор = &Идентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УведомлениеОВвозеИзЕАЭСИСЦЭДМ.Ссылка
	|ИЗ
	|	Документ.УведомлениеОВвозеИзЕАЭСИСЦЭДМ КАК УведомлениеОВвозеИзЕАЭСИСЦЭДМ
	|ГДЕ
	|	УведомлениеОВвозеИзЕАЭСИСЦЭДМ.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", ИдДокумента);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка;
		
	Иначе 
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	
КонецФункции

Процедура ЗаполнитьТЧУведомленияОРасхождении(ТЧДокумента, ТаблицаСервера)
	
	Для Каждого СтруктураКода Из ТаблицаСервера Цикл 
		НоваяСтрока = ТЧДокумента.Добавить();
		НоваяСтрока.GTINВерхнегоУровня 	= СтруктураКода.gtin;
		НоваяСтрока.EAN = Сред(СтруктураКода.GTIN, 2, 13);
		НоваяСтрока.Количество = СтруктураКода.total;
		
		ДанныеНоменклатуры = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, НоваяСтрока.EAN);
		НоваяСтрока.Номенклатура = ?(Не ДанныеНоменклатуры = Неопределено, ДанныеНоменклатуры.Номенклатура, Неопределено);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСтатусДокументаИСЦЭДМПоНаименованию(КодСтатуса)
	
	//Не локализуется! Должно соответствовать АПИ
	Если КодСтатуса = "Черновик" Тогда
		Возврат Перечисления.СтатусыДокументовИСЦЭДМ.Черновик;
	ИначеЕсли КодСтатуса = "Отклонен" Тогда
		Возврат Перечисления.СтатусыДокументовИСЦЭДМ.Отклонен;
	ИначеЕсли КодСтатуса = "Ожидает подтверждения" Тогда
		Возврат Перечисления.СтатусыДокументовИСЦЭДМ.ОжидаетПодтверждение;
	ИначеЕсли КодСтатуса = "Принят" Тогда 
		Возврат Перечисления.СтатусыДокументовИСЦЭДМ.Принят;
	ИначеЕсли КодСтатуса = "Сформирован" Тогда
		Возврат Перечисления.СтатусыДокументовИСЦЭДМ.Сформирован;
	ИначеЕсли КодСтатуса = "Ошибка при проверке" Тогда
		Возврат Перечисления.СтатусыДокументовИСЦЭДМ.ОшибкаПриПроверке;
	ИначеЕсли КодСтатуса = "Отозван" Тогда
		Возврат Перечисления.СтатусыДокументовИСЦЭДМ.Отозван;
	ИначеЕсли КодСтатуса = "Аннулирован" Тогда
		Возврат Перечисления.СтатусыДокументовИСЦЭДМ.Аннулирован;
	ИначеЕсли КодСтатуса = "Расчет итогов" Тогда
		Возврат Перечисления.СтатусыДокументовИСЦЭДМ.РасчетИтогов;
	ИначеЕсли КодСтатуса = "Запрошено уточнение" Тогда
		Возврат Перечисления.СтатусыДокументовИСЦЭДМ.ЗапрошеноУточнение;
	Иначе
		Возврат Перечисления.СтатусыДокументовИСЦЭДМ.НеОпределен;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтатусДокументаИСЦЭДМПоИдентификатору(КодСтатуса)
	
	Если КодСтатуса = 1 Тогда
		Возврат Перечисления.СтатусыДокументовИСЦЭДМ.Черновик;
	ИначеЕсли КодСтатуса = 2 Тогда
		Возврат Перечисления.СтатусыДокументовИСЦЭДМ.Отклонен;
	ИначеЕсли КодСтатуса = 3 Или  КодСтатуса = 100 Тогда
		Возврат Перечисления.СтатусыДокументовИСЦЭДМ.ОжидаетПодтверждение;
	ИначеЕсли КодСтатуса = 4 Тогда 
		Возврат Перечисления.СтатусыДокументовИСЦЭДМ.Принят;
	ИначеЕсли КодСтатуса = 11 Тогда
		Возврат Перечисления.СтатусыДокументовИСЦЭДМ.Сформирован;
	ИначеЕсли КодСтатуса = 12 Тогда
		Возврат Перечисления.СтатусыДокументовИСЦЭДМ.ОшибкаПриПроверке;
	ИначеЕсли КодСтатуса = 16 Тогда
		Возврат Перечисления.СтатусыДокументовИСЦЭДМ.Отозван;
	ИначеЕсли КодСтатуса = 17 Тогда
		Возврат Перечисления.СтатусыДокументовИСЦЭДМ.Аннулирован;
	ИначеЕсли КодСтатуса = 18 Тогда
		Возврат Перечисления.СтатусыДокументовИСЦЭДМ.РасчетИтогов;
	ИначеЕсли КодСтатуса = 30 Тогда
		Возврат Перечисления.СтатусыДокументовИСЦЭДМ.ЗапрошеноУточнение;
	ИначеЕсли КодСтатуса = 33 Тогда
		Возврат Перечисления.СтатусыДокументовИСЦЭДМ.Создан;
	ИначеЕсли КодСтатуса = 21 Тогда
		Возврат Перечисления.СтатусыДокументовИСЦЭДМ.ОшибкаОбработкиПриПриеме;
	ИначеЕсли КодСтатуса = 20 Тогда
		Возврат Перечисления.СтатусыДокументовИСЦЭДМ.ОшибкаОбработкиПриОтправке;
	ИначеЕсли КодСтатуса = 0 Тогда
		Возврат Перечисления.СтатусыДокументовИСЦЭДМ.Отправлен;
	ИначеЕсли КодСтатуса = 10 Тогда
		Возврат Перечисления.СтатусыДокументовИСЦЭДМ.Проверяется;
	Иначе
		Возврат Перечисления.СтатусыДокументовИСЦЭДМ.НеОпределен;
	КонецЕсли;
	
КонецФункции

Функция ДопустимыеСтатусыКМДляДокументаИСЦЭДМ(НаименованиеДокумента) Экспорт
	
	ДопустимыеСтатусы = Новый Массив();
	
	Если НаименованиеДокумента = "УведОВводеВОборот" Тогда
		
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.ВыведенИзОборота);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.ВыведенИзОборотаПриПеремаркировке);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.ВыведенИзОборотаРассрочка);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.Активный); //Упаковка ЦЭДМ
		
	ИначеЕсли НаименованиеДокумента = "УведОВыводеИзВОборота" Тогда 
		
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.ВведенВОборот);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.ВозвращенВОборот);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.Нанесен);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.Активный); //Упаковка ЦЭДМ
		
	ИначеЕсли НаименованиеДокумента = "АктПриемаПередачи" Тогда 
		
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.ВведенВОборот);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.ВозвращенВОборот);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.Нанесен); 
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.Экспорт); 
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.Активный); //Упаковка ЦЭДМ
		
	ИначеЕсли НаименованиеДокумента = "АгрегацияВнеПроизводства" Тогда 
		
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.ВведенВОборот);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.ВозвращенВОборот);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.Нанесен);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.Экспорт);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.Активный);
		
	ИначеЕсли НаименованиеДокумента = "АктВнутреннегоПеремещения" Тогда 
		
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.ВведенВОборот);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.ВозвращенВОборот);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.Нанесен);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.Экспорт);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.Активный); //Упаковка ЦЭДМ
		
	ИначеЕсли НаименованиеДокумента = "УведОВвозеИмпорт" Тогда 
		
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.Нанесен); 
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.Активный); //Упаковка ЦЭДМ

	ИначеЕсли НаименованиеДокумента = "УведОВвозеЕАЭС" Тогда 
		
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.Нанесен); 
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.Активный); //Упаковка ЦЭДМ
		
	ИначеЕсли НаименованиеДокумента = "ОтчетОПередачеКИ" Тогда 
		
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.Нанесен); 
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыКодовМаркировкиИСМПТК.Активный); //Упаковка ЦЭДМ
		
   	КонецЕсли;
	
	Возврат ДопустимыеСтатусы;
	
КонецФункции

#КонецОбласти

Процедура ОбновитьАгрегациювнеПроизводства_ИСЦЭДМ(Знач МассивДокументов, ТокенАвторизации) Экспорт
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АгрегацияВнеПроизводстваИСЦЭДМ.Ссылка КАК Ссылка,
	|	АгрегацияВнеПроизводстваИСЦЭДМ.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
	|	АгрегацияВнеПроизводстваИСЦЭДМ.КодАгрегата КАК КодАгрегата,
	|	АгрегацияВнеПроизводстваИСЦЭДМ.Организация КАК Организация,
	|	АгрегацияВнеПроизводстваИСЦЭДМ.Идентификатор КАК Идентификатор
	|ИЗ
	|	Документ.АгрегацияВнеПроизводстваИСЦЭДМ КАК АгрегацияВнеПроизводстваИСЦЭДМ
	|ГДЕ
	|	АгрегацияВнеПроизводстваИСЦЭДМ.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
			//документы без идентификаторов не обрабатываются
			Продолжить;
		КонецЕсли;
		
		МассивКодов = Новый Массив;
		МассивКодов.Добавить(Выборка.КодАгрегата);
		
		ОтветСервера = ЗапроситьДанныеПоМассивуКМ(МассивКодов, Выборка.Организация, Выборка.ПоставщикИдентификационныйНомер);
		
		Если ЗначениеЗаполнено(ОтветСервера.ТекстОшибки) Тогда
			ТекстСообщения = ОтветСервера.ТекстОшибки;
			ИдЗапроса = "";
			Если ОтветСервера.Свойство("ИдентификаторЗапроса", ИдЗапроса) Тогда 
				ТекстСообщения = ТекстСообщения
							   + Символы.ПС
							   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИдентификаторЗапросаКСерверу();
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИдентификатоНомер%", ИдЗапроса);
			КонецЕсли;
			
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
			ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьАгрегациювнеПроизводства_ИСЦЭДМ");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		РезультатЗапроса = ОтветСервера.МассивСтруктур;
		
		Если РезультатЗапроса.Количество() = 1 Тогда 
			
			Попытка
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				
				Если РезультатЗапроса[0].status = "Активный" Тогда 
					ДокументОбъект.Статус = Перечисления.СтатусыДокументовИСЦЭДМ.Принят;
				ИначеЕсли РезультатЗапроса[0].status = "Дезагрегирован" Тогда
					ДокументОбъект.Статус = Перечисления.СтатусыДокументовИСЦЭДМ.Аннулирован;
				КонецЕсли;
				ДокументОбъект.Записать();
			Исключение
				//ОписаниеОшибки()
			КонецПопытки; 
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьИсходящиеДокументы_ИСЦЭДМ(Знач МассивДокументов, ТипДокумента, ДанныеПрофилей, ТокенАвторизации, СтруктурнаяЕдиница) Экспорт
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Идентификатор КАК Идентификатор,
	|	Док.НомерИСЦЭДМ КАК НомерИСЦЭДМ,
	|	%ИдентификаторВладельца%
	|ИЗ
	|	Документ.%ТипДокумента% КАК Док
	|ГДЕ
	|	Док.Ссылка В(&МассивДокументов)
	|	И НЕ Док.Идентификатор = """"";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТипДокумента%", ТипДокумента);
	
	Если ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСЦЭДМ()
		Или ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ() Тогда
		
		ТекстВладельца = "ВЫБОР
		|КОГДА Док.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияДокументовИСМПТК.Входящий)
		|	ТОГДА ВЫБОР
		|			КОГДА Док.ПолучательСкладЦЭДМИдентификационныйНомер = """"
		|				ТОГДА Док.ПолучательИдентификационныйНомер
		|			ИНАЧЕ Док.ПолучательСкладЦЭДМИдентификационныйНомер
		|		КОНЕЦ
		|ИНАЧЕ ВЫБОР
		|		КОГДА Док.ПоставщикСкладЦЭДМИдентификационныйНомер = """"
		|			ТОГДА Док.ПоставщикИдентификационныйНомер
		|		ИНАЧЕ Док.ПоставщикСкладЦЭДМИдентификационныйНомер
		|	КОНЕЦ
		|КОНЕЦ КАК ИдентификаторВладельца";
		
	ИначеЕсли ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСЦЭДМ()
		Или ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСЦЭДМ() Тогда
		
		ТекстВладельца = "ВЫБОР
		|	КОГДА Док.ПоставщикСкладЦЭДМИдентификационныйНомер = """"
		|		ТОГДА Док.ПоставщикИдентификационныйНомер
		|	ИНАЧЕ Док.ПоставщикСкладЦЭДМИдентификационныйНомер
		|КОНЕЦ КАК ИдентификаторВладельца";
		
	ИначеЕсли ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАгрегацияВнеПроизводстваИСЦЭДМ()
		Или ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктВнутреннегоПеремещенияИСЦЭДМ()
		Или ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАгрегацияВнеПроизводстваИСЦЭДМ() Тогда
		
		ТекстВладельца = "Док.ПоставщикИдентификационныйНомер КАК ИдентификаторВладельца";
		
	ИначеЕсли ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСЦЭДМ()
		Или ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСЦЭДМ() Тогда
		
		ТекстВладельца = "ВЫБОР
		|	КОГДА Док.ПолучательСкладЦЭДМИдентификационныйНомер = """"
		|		ТОГДА Док.ПолучательИдентификационныйНомер
		|	ИНАЧЕ Док.ПолучательСкладЦЭДМИдентификационныйНомер
		|КОНЕЦ КАК ИдентификаторВладельца";
		
	ИначеЕсли ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОРасхожденияхИСЦЭДМ() Тогда
		
		ТекстВладельца = "ВЫБОР
		|КОГДА Док.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияДокументовИСМПТК.Входящий)
		|	ТОГДА Док.ПолучательИдентификационныйНомер
		|	ИНАЧЕ Док.ПоставщикИдентификационныйНомер
		|КОНЕЦ КАК ИдентификаторВладельца";
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИдентификаторВладельца%", ТекстВладельца);
		
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
			//документы без идентификаторов не обрабатываются
			Продолжить;
		КонецЕсли;
		
		ДопДанныеДокумента = ПолучитьДополнительныеДанныеПоИдентификаторуИСЦЭДМ(Выборка.Идентификатор, СтруктурнаяЕдиница, Выборка.ИдентификаторВладельца, ТипДокумента, ТокенАвторизации);
		
		Попытка
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.НомерИСЦЭДМ = ДопДанныеДокумента.НомерИСЦЭДМ;
			ДокументОбъект.ДатаВИСЦЭДМ = ДопДанныеДокумента.ДатаВИСЦЭДМ;
			Статус = ПолучитьСтатусДокументаИСЦЭДМПоИдентификатору(ДопДанныеДокумента.Статус);
			Если Статус <> Неопределено Тогда
				ДокументОбъект.Статус = Статус;
			КонецЕсли;
			ДокументОбъект.Записать();
		Исключение
			   //ОписаниеОшибки()
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьСтруктуруТитуловИСЦЭДМ(КоллекцияСгруппированныхДокументовИСЦЭДМ) Экспорт
	
	Возврат СозданиеТитуловИСЦЭДМ(КоллекцияСгруппированныхДокументовИСЦЭДМ, 0);
	
КонецФункции

Функция ОтозватьИсходящиеДокументы_СозданиеТитулов_ИСЦЭДМ(Знач КоллекцияСгруппированныхДокументовИСЦЭДМ) Экспорт
	
	Возврат СозданиеТитуловИСЦЭДМ(КоллекцияСгруппированныхДокументовИСЦЭДМ, 2);
	
КонецФункции

Процедура ОтозватьИсходящиеДокументы_ПодписьТитуловЗавершение_ИСЦЭДМ(Знач НоваяКоллекцияСгруппированныхДокументовИСЦЭДМ) Экспорт
	
	ПодтвердитьОтклонитьОтозватьАкт_ПодписьТитуловЗавершение_ИСЦЭДМ(НоваяКоллекцияСгруппированныхДокументовИСЦЭДМ);
		
КонецПроцедуры

Процедура ОтправитьДокументы_ПодписьТитуловЗавершение_ИСЦЭДМ(Знач НоваяКоллекцияСгруппированныхДокументовИСЦЭДМ, Знач СписокТокеновАвторизации, БИНОрганизации = "") Экспорт
	
	ОтправитьАкт_ПодписьТитуловЗавершение_ИСЦЭДМ(НоваяКоллекцияСгруппированныхДокументовИСЦЭДМ, СписокТокеновАвторизации, БИНОрганизации);
		
КонецПроцедуры 

Процедура ОтправитьПодписанныйДокументыИСЦЭДМ(ДанныеПодписанногоТитула) Экспорт
	
	//отправляем подписанный
	РезультатВыполненияНаСервере = ВыполнитьПодписаниеТитулаИСЦЭДМ(ДанныеПодписанногоТитула.Идентификатор, ДанныеПодписанногоТитула.ПодписанныйТитул, 
			ДанныеПодписанногоТитула.ТитулДляПодписи, ДанныеПодписанногоТитула.ТокенАвторизации, "", ДанныеПодписанногоТитула.СтруктурнаяЕдиница);
	
	ИнформацияОбОшибке = Неопределено;
	Если ЭтоОшибкаИСЦЭДМ(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
		ЗаполнитьОшибкиДокумента(ДанныеПодписанногоТитула.СсылкаДокумент, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
		ТекстСообщения = НСтр("ru = 'При подписи титула произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		ИдЗапроса = "";
		Если РезультатВыполненияНаСервере.Свойство("ИдентификаторЗапроса", ИдЗапроса) Тогда 
			ТекстСообщения = ТекстСообщения
						   + Символы.ПС
						   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИдентификаторЗапросаКСерверу();
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИдентификатоНомер%", ИдЗапроса);
		КонецЕсли;
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОтправитьПодписанныйДокументыИСЦЭДМ");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
		Возврат;
	Иначе
		//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
		ОчиститьОшибкиДокумента(ДанныеПодписанногоТитула.СсылкаДокумент);	
	КонецЕсли;
	
	ДополнительныеДанные = ОбщегоНазначенияИСМПТК.ПреобразоватьJSON_В_МассивСтруктур(РезультатВыполненияНаСервере.ТекстОтвета);
	
	Если ДополнительныеДанные.status = 200 ИЛИ ДополнительныеДанные.status = 1 Тогда
		
		ТипДокументов = РаботаСДокументамиИСМПТК.ОпределитьТипДокументаПоСсылке(ДанныеПодписанногоТитула.СсылкаДокумент); 
		
		ДопДанныеДокумента = ПолучитьДополнительныеДанныеПоИдентификаторуИСЦЭДМ(ДанныеПодписанногоТитула.Идентификатор, ДанныеПодписанногоТитула.СтруктурнаяЕдиница, 
				ПолучитьИдентификаторОтправителя(ДанныеПодписанногоТитула.СсылкаДокумент), ТипДокументов, ДанныеПодписанногоТитула.ТокенАвторизации);
		
		Попытка
			ДокументОбъект = ДанныеПодписанногоТитула.СсылкаДокумент.ПолучитьОбъект();
			ДокументОбъект.НомерИСЦЭДМ = ДопДанныеДокумента.НомерИСЦЭДМ;
			ДокументОбъект.ДатаВИСЦЭДМ = ДопДанныеДокумента.ДатаВИСЦЭДМ;
			Статус = ПолучитьСтатусДокументаИСЦЭДМПоИдентификатору(ДопДанныеДокумента.Статус);
			Если Статус <> Неопределено Тогда
				ДокументОбъект.Статус = Статус;
			КонецЕсли;
			ДокументОбъект.Записать();
		Исключение
			//ОписаниеОшибки()
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИдентификаторОтправителя(Документ)
	
	ИмяРеквизитаСклад 			= "ПоставщикСкладЦЭДМИдентификационныйНомер";
	ИмяРеквизитаОтправитель 	= "ПоставщикИдентификационныйНомер";
	
	//В заявлениях о ввозе отправитель является фактическим получателем кодов
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСЦЭДМ") 
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСЦЭДМ") Тогда
		
		ИмяРеквизитаСклад 			= "ПолучательСкладЦЭДМИдентификационныйНомер";
		ИмяРеквизитаОтправитель 	= "ПолучательИдентификационныйНомер"; 
	КонецЕсли;
	
	Если ОбщегоНазначенияИСМПТК.ЕстьРеквизитОбъекта(Документ, ИмяРеквизитаСклад) Тогда 
		ИдСкладаПоставщика = ОбщегоНазначенияИСМПТК.ЗначенияРеквизитовОбъекта(Документ, ИмяРеквизитаСклад);
		Если ЗначениеЗаполнено(ИдСкладаПоставщика[ИмяРеквизитаСклад]) Тогда 
			Возврат ИдСкладаПоставщика[ИмяРеквизитаСклад];
		Иначе
			ИдПоставщика = ОбщегоНазначенияИСМПТК.ЗначенияРеквизитовОбъекта(Документ, ИмяРеквизитаОтправитель);
			Возврат ИдПоставщика[ИмяРеквизитаОтправитель];
		КонецЕсли;
	Иначе
		ИдПоставщика = ОбщегоНазначенияИСМПТК.ЗначенияРеквизитовОбъекта(Документ, ИмяРеквизитаОтправитель);
		Возврат ИдПоставщика[ИмяРеквизитаОтправитель];
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПричинуВыводаИзОборота(ПричинаВыводаИзОборота)

	КодПричины = "9";
	
	Если ПричинаВыводаИзОборота = Перечисления.ПричиныВыводаКМИзОборотаИСЦЭДМ.ВнутреннееИспользование Тогда 
		КодПричины = "5";
	ИначеЕсли ПричинаВыводаИзОборота = Перечисления.ПричиныВыводаКМИзОборотаИСЦЭДМ.ВнутреннееИспользованиеПокупателем Тогда	
		КодПричины = "16";
	ИначеЕсли ПричинаВыводаИзОборота = Перечисления.ПричиныВыводаКМИзОборотаИСЦЭДМ.ВозвратФизЛицу Тогда	
		КодПричины = "8";
	ИначеЕсли ПричинаВыводаИзОборота = Перечисления.ПричиныВыводаКМИзОборотаИСЦЭДМ.ВыбылПереработка Тогда	
		КодПричины = "14";
	ИначеЕсли ПричинаВыводаИзОборота = Перечисления.ПричиныВыводаКМИзОборотаИСЦЭДМ.Другое Тогда	
		КодПричины = "18";
	ИначеЕсли ПричинаВыводаИзОборота = Перечисления.ПричиныВыводаКМИзОборотаИСЦЭДМ.ИнтернетТорговля Тогда	
		КодПричины = "7";
	ИначеЕсли ПричинаВыводаИзОборота = Перечисления.ПричиныВыводаКМИзОборотаИСЦЭДМ.Конфискация Тогда	
		КодПричины = "17";
	ИначеЕсли ПричинаВыводаИзОборота = Перечисления.ПричиныВыводаКМИзОборотаИСЦЭДМ.МедицинскоеНазначение Тогда	
		КодПричины = "9";
	ИначеЕсли ПричинаВыводаИзОборота = Перечисления.ПричиныВыводаКМИзОборотаИСЦЭДМ.Образцы Тогда	
		КодПричины = "6";
	ИначеЕсли ПричинаВыводаИзОборота = Перечисления.ПричиныВыводаКМИзОборотаИСЦЭДМ.ОтпускПоРецепту Тогда	
		КодПричины = "10";
	ИначеЕсли ПричинаВыводаИзОборота = Перечисления.ПричиныВыводаКМИзОборотаИСЦЭДМ.Повреждение Тогда	
		КодПричины = "3";
	ИначеЕсли ПричинаВыводаИзОборота = Перечисления.ПричиныВыводаКМИзОборотаИСЦЭДМ.ПродажаГосПредприятию Тогда	
		КодПричины = "15";
	ИначеЕсли ПричинаВыводаИзОборота = Перечисления.ПричиныВыводаКМИзОборотаИСЦЭДМ.РозничнаяПродажа Тогда	
		КодПричины = "13";
	ИначеЕсли ПричинаВыводаИзОборота = Перечисления.ПричиныВыводаКМИзОборотаИСЦЭДМ.Уничтожение Тогда	
		КодПричины = "4";
	ИначеЕсли ПричинаВыводаИзОборота = Перечисления.ПричиныВыводаКМИзОборотаИСЦЭДМ.Утрата Тогда	
		КодПричины = "2";
	ИначеЕсли ПричинаВыводаИзОборота = Перечисления.ПричиныВыводаКМИзОборотаИСЦЭДМ.ЭкспортЕАЭС Тогда	
		КодПричины = "11";
	ИначеЕсли ПричинаВыводаИзОборота = Перечисления.ПричиныВыводаКМИзОборотаИСЦЭДМ.ЭкспортТретьиСтраны Тогда	
		КодПричины = "12";
	ИначеЕсли ПричинаВыводаИзОборота = Перечисления.ПричиныВыводаКМИзОборотаИСЦЭДМ.СиловыеСтруктуры Тогда
		КодПричины = "19";
	ИначеЕсли ПричинаВыводаИзОборота = Перечисления.ПричиныВыводаКМИзОборотаИСЦЭДМ.Брак Тогда
		КодПричины = "1";
	КонецЕсли;
	
	Возврат КодПричины;

КонецФункции

Процедура СоздатьУведомленияОРасхождении(МассивДокументов) Экспорт
	
	//Сгруппировали документы по организации
	ВыборкаПоОрганизации = ПолучитьДокументыСРасхождением(МассивДокументов);
	
	Пока ВыборкаПоОрганизации.Следующий() Цикл 
		
		ТокенАвторизации = ИнтерфейсИСМПТК.ПолучитьТокенАвторизацииИСЦЭДМ(ВыборкаПоОрганизации.Организация);
		
		Если ТокенАвторизации = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		МассивДокументов = Новый Массив;
		ВыборкаПоДокуменатам = ВыборкаПоОрганизации.Выбрать();
		Пока ВыборкаПоДокуменатам.Следующий() Цикл 
			МассивДокументов.Добавить(ВыборкаПоДокуменатам.Ссылка);
		КонецЦикла;
		
		//Выполнили сверку документов
		РезультатСверки = Неопределено;
		СверитьМассивДокументов(МассивДокументов, РезультатСверки, Ложь);
		
		Для Каждого РезультатОтправки Из РезультатСверки Цикл
			
			ИнформацияОбОшибке = Неопределено;
			
			Если ЭтоОшибкаИСЦЭДМ(РезультатОтправки.Значение, ИнформацияОбОшибке) Тогда
				
				ЗаполнитьОшибкиДокумента(РезультатОтправки.Ключ, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
				ТекстСообщения = НСтр("ru = 'При получении информации о сверке кодов получена ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
				ИдЗапроса = "";
				Если РезультатОтправки.Значение.Свойство("ИдентификаторЗапроса", ИдЗапроса) Тогда 
					ТекстСообщения = ТекстСообщения
								   + Символы.ПС
								   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИдентификаторЗапросаКСерверу();
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИдентификатоНомер%", ИдЗапроса);
				КонецЕсли;
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
				ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.СоздатьУведомленияОРасхождении");
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				Продолжить;
				
			КонецЕсли;
			
			//Получили информацию по расхождению со стороны сервера
			РазобранныеДанные = ОбщегоНазначенияИСМПТК.ПреобразоватьJSON_В_МассивСтруктур(РезультатОтправки.Значение.ТекстОтвета);
			
			Если (РазобранныеДанные.Свойство("marksNew") И Не РазобранныеДанные.marksNew.Количество() = 0)
				Или (РазобранныеДанные.Свойство("unknownElements") И Не РазобранныеДанные.unknownElements.Количество() = 0) Тогда 
				
				СтруктураДляСоздания = Новый Структура("documentId, marksNew, unknownElements, marksExist");
				ЗаполнитьЗначенияСвойств(СтруктураДляСоздания, РазобранныеДанные);
				
				Если ОбщегоНазначенияИСМПТК.ЕстьРеквизитОбъекта(РезультатОтправки.Ключ, "ПолучательСкладЦЭДМИдентификационныйНомер") Тогда
					ИдентификаторПолучателя = ?(ЗначениеЗаполнено(РезультатОтправки.Ключ.ПолучательСкладЦЭДМИдентификационныйНомер),
													РезультатОтправки.Ключ.ПолучательСкладЦЭДМИдентификационныйНомер,
														РезультатОтправки.Ключ.ПолучательИдентификационныйНомер);
				Иначе 
					ИдентификаторПолучателя = РезультатОтправки.Ключ.ПолучательИдентификационныйНомер;
				КонецЕсли;
				
				ЗаголовкиЗапроса = Новый Соответствие;
				ЗаголовкиЗапроса.Вставить("Commoditygroup", "pharma");
				ЗаголовкиЗапроса.Вставить("InnBin", ИдентификаторПолучателя);
				
				//Создали Уведомление о расхождении по результатам сверки
				РезультатСозданияУведомленияОРасхождении = ЭлектронноеВзаимодействиеССервисамиМаркировка.СоздатьУведомлениеОРасхождении(СтруктураДляСоздания, ЗаголовкиЗапроса, ВыборкаПоОрганизации.Организация, ТокенАвторизации);
				
				ИнформацияОбОшибке = Неопределено;
				
				Если ЭтоОшибкаИСЦЭДМ(РезультатСозданияУведомленияОРасхождении, ИнформацияОбОшибке) Тогда
					
					ЗаполнитьОшибкиДокумента(РезультатОтправки.Ключ, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
					ТекстСообщения = НСтр("ru = 'При создании Уведомления о расхождении произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
					ИдЗапроса = "";
					Если РезультатСозданияУведомленияОРасхождении.Свойство("ИдентификаторЗапроса", ИдЗапроса) Тогда 
						ТекстСообщения = ТекстСообщения
									   + Символы.ПС
									   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИдентификаторЗапросаКСерверу();
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИдентификатоНомер%", ИдЗапроса);
					КонецЕсли;
					ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
					ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.СоздатьУведомленияОРасхождении");
					ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
					Продолжить;
					
				Иначе 
					
					ДанныеПоУведомлению = ОбщегоНазначенияИСМПТК.ПреобразоватьJSON_В_МассивСтруктур(РезультатСозданияУведомленияОРасхождении.ТекстОтвета);
					ИдУведомления = СтрЗаменить(Строка(Строка(ДанныеПоУведомлению.id)),Символы.НПП,"");
					
					//Создали документ Уведосление о расхождении в ИБ по данным сервера
					РезультатВыполненияНаСервере = ПолучитьПрофильДокумента(ИдУведомления, ИдентификаторПолучателя, 
																			ВыборкаПоОрганизации.Организация, ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОРасхожденияхИСЦЭДМ(), ТокенАвторизации);
					
					ИнформацияОбОшибке = Неопределено;
					Если ЭтоОшибкаИСЦЭДМ(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
						ТекстСообщения = НСтр("ru = 'При получении данных созданного Уведомления о расхождении со стороны сервера произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
						ИдЗапроса = "";
						Если РезультатВыполненияНаСервере.Свойство("ИдентификаторЗапроса", ИдЗапроса) Тогда 
							ТекстСообщения = ТекстСообщения
										   + Символы.ПС
										   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИдентификаторЗапросаКСерверу();
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИдентификатоНомер%", ИдЗапроса);
						КонецЕсли;
						
						ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
						ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
						ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.СоздатьУведомленияОРасхождении");
						ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
						СтруктураДокументаПолученная = Неопределено;
					Иначе 
						СтруктураДокументаПолученная = ОбщегоНазначенияИСМПТК.ПреобразоватьJSON_В_МассивСтруктур(РезультатВыполненияНаСервере.ТекстОтвета);
					КонецЕсли;
					
					ДанныеВходящегоДокумента = Новый Структура("Ссылка, ТипДокумента, Идентификатор", Неопределено, ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОРасхожденияхИСЦЭДМ(), "");
					ЗаполнитьДокументУведомлениеОРасхожденияхИСЦЭДМ(СтруктураДокументаПолученная, ДанныеВходящегоДокумента, ВыборкаПоОрганизации.Организация, ТокенАвторизации);
				
				КонецЕсли;
			Иначе
				//Если неожиданно расхождений не нашлось обновим статус сверки документа
				УстановитьСтатусСверкиДокумента(РезультатОтправки.Ключ, Перечисления.СтатусыСверкиПолученныхКодовИСЦЭДМ.СверкаВыполненаРасхожденийНеОбнаружено);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры 

Функция ПолучитьДокументысРасхождением(МассивДокументов)
	
	ТипДокумента = РаботаСДокументамиИСМПТК.ОпределитьТипДокументаПоСсылке(МассивДокументов[0]); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДокументСверки.Идентификатор КАК Идентификатор,
	|	ДокументСверки.Ссылка КАК Ссылка,
	|	&КодИдентификации КАК ИдентификационныйНомер,
	|	ДокументСверки.Организация КАК Организация
	|ИЗ
	|	Документ." + ТипДокумента + " КАК ДокументСверки
	|ГДЕ
	|	ДокументСверки.Ссылка В(&МассивДокументов)
	|	И ДокументСверки.СтатусСверкиТоваров = ЗНАЧЕНИЕ(Перечисление.СтатусыСверкиПолученныхКодовИСЦЭДМ.СверкаВыполненаЕстьРасхождения)
	|ИТОГИ ПО
	|	Организация"; 
	
	Если ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСЦЭДМ() Тогда
		
		ТекстКодаИД = "ВЫБОР
		|		КОГДА НЕ ДокументСверки.Ссылка.ПолучательСкладЦЭДМИдентификационныйНомер = """"
		|			ТОГДА ДокументСверки.Ссылка.ПолучательСкладЦЭДМИдентификационныйНомер
		|		ИНАЧЕ ДокументСверки.Ссылка.ПолучательИдентификационныйНомер
		|	КОНЕЦ";
		
	Иначе 
		
		ТекстКодаИД = "ДокументСверки.Ссылка.ПолучательИдентификационныйНомер";
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КодИдентификации", ТекстКодаИД);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Возврат Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
	
КонецФункции

#Область АКТПриемаПередачи

Процедура ОтправитьАкт_ПодписьТитуловЗавершение_ИСЦЭДМ(КоллекцияСгруппированныхДокументов, СписокТокеновАвторизации, БИНОрганизации) Экспорт
	
	Для Каждого ДанныеДокумента Из КоллекцияСгруппированныхДокументов Цикл
		
		Если ДанныеДокумента.ПодписанныйТитул = "НеВыбран" Тогда 
			Продолжить;
		КонецЕсли;
		
		//отправляем подписанный
		РезультатВыполненияНаСервере = ВыполнитьПодписаниеТитулаИСЦЭДМ(ДанныеДокумента.Идентификатор, ДанныеДокумента.ПодписанныйТитул, ДанныеДокумента.ТитулДляПодписи, ДанныеДокумента.ТокенАвторизации, "", ДанныеДокумента.СтруктурнаяЕдиница);
		                               
		ИнформацияОбОшибке = Неопределено;
		Если ЭтоОшибкаИСЦЭДМ(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
			ЗаполнитьОшибкиДокумента(ДанныеДокумента.СсылкаДокумент, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
			ТекстСообщения = НСтр("ru = 'При подписи титула произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			ИдЗапроса = "";
			Если РезультатВыполненияНаСервере.Свойство("ИдентификаторЗапроса", ИдЗапроса) Тогда 
				ТекстСообщения = ТекстСообщения
							   + Символы.ПС
							   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИдентификаторЗапросаКСерверу();
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИдентификатоНомер%", ИдЗапроса);
			КонецЕсли;
			
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
			ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОтправитьАкт_ПодписьТитуловЗавершение_ИСЦЭДМ");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			Продолжить;
		Иначе
			//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
			ОчиститьОшибкиДокумента(ДанныеДокумента.СсылкаДокумент);	
		КонецЕсли;
		
		ДополнительныеДанные = ОбщегоНазначенияИСМПТК.ПреобразоватьJSON_В_МассивСтруктур(РезультатВыполненияНаСервере.ТекстОтвета);
		
		Если ДополнительныеДанные.status = 200 ИЛИ ДополнительныеДанные.status = 1 Тогда
			
			ТипДокументов = РаботаСДокументамиИСМПТК.ОпределитьТипДокументаПоСсылке(ДанныеДокумента.СсылкаДокумент);
			ДопДанныеДокумента 	   = ПолучитьДополнительныеДанныеПоИдентификаторуИСЦЭДМ(ДанныеДокумента.Идентификатор, ДанныеДокумента.СтруктурнаяЕдиница, БИНОрганизации, ТипДокументов, ДанныеДокумента.ТокенАвторизации);
			
			Попытка
				ДокументОбъект = ДанныеДокумента.СсылкаДокумент.ПолучитьОбъект();
				ДокументОбъект.НомерИСЦЭДМ = ДопДанныеДокумента.НомерИСЦЭДМ;
				ДокументОбъект.ДатаВИСЦЭДМ = ДопДанныеДокумента.ДатаВИСЦЭДМ;
				Статус = ПолучитьСтатусДокументаИСЦЭДМПоИдентификатору(ДопДанныеДокумента.Статус);
				Если Статус <> Неопределено Тогда
					ДокументОбъект.Статус = Статус;
				КонецЕсли;
				ДокументОбъект.Записать();
			Исключение
			    //ОписаниеОшибки()
			КонецПопытки;
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //ПодтвердитьОтклонитьАкт()

Процедура ПодтвердитьОтклонитьОтозватьАкт_ПодписьТитуловЗавершение_ИСЦЭДМ(КоллекцияСгруппированныхДокументов) Экспорт
	
	Для Каждого ДанныеДокумента Из КоллекцияСгруппированныхДокументов Цикл
		
		Если ДанныеДокумента.ПодписанныйТитул = "НеВыбран"
				Или ДанныеДокумента.ПодписанныйТитул = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		ИдентификационныйНомер = ПолучитьИдентификационныйНомерВлыдельцаДокумента(ДанныеДокумента.СсылкаДокумент, ДанныеДокумента.ДействиеИндекс);
			
		//отправляем подписанный
		РезультатВыполненияНаСервере = ВыполнитьПодписаниеТитулаОтклонениеПодтверждениеОтзыв_ИСЦЭДМ(ДанныеДокумента.Идентификатор, ДанныеДокумента.ДействиеИндекс, ДанныеДокумента.ПодписанныйТитул, ДанныеДокумента.ТитулДляПодписи, ДанныеДокумента.ТокенАвторизации, "", ИдентификационныйНомер);
		
		ИнформацияОбОшибке = Неопределено;
		Если ЭтоОшибкаИСЦЭДМ(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
			ЗаполнитьОшибкиДокумента(ДанныеДокумента.СсылкаДокумент, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
			ТекстСообщения = НСтр("ru = 'При подписи титула произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			ИдЗапроса = "";
			Если РезультатВыполненияНаСервере.Свойство("ИдентификаторЗапроса", ИдЗапроса) Тогда 
				ТекстСообщения = ТекстСообщения
							   + Символы.ПС
							   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИдентификаторЗапросаКСерверу();
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИдентификатоНомер%", ИдЗапроса);
			КонецЕсли;
			
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
			ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ПодтвердитьОтклонитьОтозватьАкт_ПодписьТитуловЗавершение_ИСЦЭДМ");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
			ДополнительныеДанные = Неопределено;
			Продолжить;
		Иначе
			ДополнительныеДанные = ОбщегоНазначенияИСМПТК.ПреобразоватьJSON_В_МассивСтруктур(РезультатВыполненияНаСервере.ТекстОтвета);
			
			Если РаботаСДокументамиИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанныхИСЦЭДМ() Тогда 
				Если ДанныеДокумента.ДействиеИндекс = 0 Тогда 
					ТекстСообщения = НСтр("ru = 'Документ успешно подтвержден.'");
				ИначеЕсли ДанныеДокумента.ДействиеИндекс = 1 Тогда
					ТекстСообщения = НСтр("ru = 'Документ успешно отклонен.'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Документ успешно отозван.'");
				КонецЕсли;
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
			ОчиститьОшибкиДокумента(ДанныеДокумента.СсылкаДокумент);	
		КонецЕсли;
		
		Если ДополнительныеДанные.status = 200 Тогда
			КодСтатуса = ?(ДанныеДокумента.ДействиеИндекс=0, 4, ?(ДанныеДокумента.ДействиеИндекс=1, 2, 16)); // 4-Подписан получателем (или подтвержден), 2 - Отклонен, 16 - Отован
			ОбновитьСтатусДокумента(ДанныеДокумента.СсылкаДокумент, ПолучитьСтатусДокументаИСЦЭДМПоИдентификатору(КодСтатуса));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //ПодтвердитьОтклонитьАкт()

Функция СозданиеТитуловИСЦЭДМИзМассиваДокументов(ДокументыОрганизации, ТокенАвторизации) Экспорт 
	
	ДанныеДляПодписи = Новый Структура("МассивДокументов, МассивТитуловДляПодписи, МассивИдентификаторов, ТокенАвторизации", новый Массив, Новый Массив, Новый Массив, ТокенАвторизации);
	
	Выборка = ПолучитьДанныеДляСозданияТитулов(ДокументыОрганизации);
	
	Пока Выборка.Следующий() Цикл
		
		//получаем титул в бейс64
		РезультатВыполненияНаСервере = ВыполнитьСозданиеТитулаДляПодписиИСЦЭДМ(Выборка.Идентификатор, ТокенАвторизации, "");
		ИнформацияОбОшибке = Неопределено;
		Если ЭтоОшибкаИСЦЭДМ(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
			ЗаполнитьОшибкиДокумента(Выборка.Ссылка, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
			ТекстСообщения = НСтр("ru = 'При создании титула для подписи произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			ИдЗапроса = "";
			Если РезультатВыполненияНаСервере.Свойство("ИдентификаторЗапроса", ИдЗапроса) Тогда 
				ТекстСообщения = ТекстСообщения
							   + Символы.ПС
							   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИдентификаторЗапросаКСерверу();
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИдентификатоНомер%", ИдЗапроса);
			КонецЕсли;
			
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
			ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.СозданиеТитуловИСЦЭДМИзМассиваДокументов");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
			Продолжить;
		Иначе
			//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
			ОчиститьОшибкиДокумента(Выборка.Ссылка);	
		КонецЕсли;
		
		ДанныеДляПодписиТитул = ОбщегоНазначенияИСМПТК.ПреобразоватьJSON_В_МассивСтруктур(РезультатВыполненияНаСервере.ТекстОтвета);
		Если ДанныеДляПодписиТитул.Количество() <> 0 Тогда
			ТитулДляПодписи = ДанныеДляПодписиТитул.result;
		Иначе 
			ТитулДляПодписи = "";
		КонецЕсли;
		
		ДанныеДляПодписи.МассивДокументов.Добавить(Выборка.Ссылка);
		ДанныеДляПодписи.МассивТитуловДляПодписи.Добавить(ТитулДляПодписи); 
		ДанныеДляПодписи.МассивИдентификаторов.Добавить(Выборка.Идентификатор);
		
	КонецЦикла;

	
	Возврат ДанныеДляПодписи;
	
КонецФункции

Функция ПолучитьДанныеДляСозданияТитулов(МассивДокументов)
	
	Запрос = Новый Запрос;
	СтруктураЗапроса = Новый Структура;
	
	Для Каждого ДокументОрганизации Из МассивДокументов Цикл
		
		ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСЦЭДМ();
		Если ТипЗнч(ДокументОрганизации) = Тип("ДокументСсылка.АктПриемаПередачиИСЦЭДМ") Тогда
			ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСЦЭДМ();
		ИначеЕсли ТипЗнч(ДокументОрганизации) = Тип("ДокументСсылка.УведомлениеОВыводеИзОборотаИСЦЭДМ") Тогда
			ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСЦЭДМ();
		ИначеЕсли ТипЗнч(ДокументОрганизации) = Тип("ДокументСсылка.УведомлениеОВводеВОборотИСЦЭДМ") Тогда
			ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСЦЭДМ();
		ИначеЕсли ТипЗнч(ДокументОрганизации) = Тип("ДокументСсылка.АктВнутреннегоПеремещенияИСЦЭДМ") Тогда
			ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктВнутреннегоПеремещенияИСЦЭДМ();
		ИначеЕсли ТипЗнч(ДокументОрганизации) = Тип("ДокументСсылка.ОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ") Тогда
			ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ();
		ИначеЕсли ТипЗнч(ДокументОрганизации) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСЦЭДМ") Тогда
			ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСЦЭДМ(); 
		ИначеЕсли ТипЗнч(ДокументОрганизации) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСЦЭДМ") Тогда
			ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСЦЭДМ();
		КонецЕсли; 
		
		Если СтруктураЗапроса.Свойство(ИмяДокумента) Тогда 
			МассивДокументов = СтруктураЗапроса["ИмяДокумента"];
			МассивДокументов.Добавить(ДокументОрганизации);
			СтруктураЗапроса.Вставить(ИмяДокумента, МассивДокументов);
		Иначе 
			МассивДокументов = Новый Массив;
			МассивДокументов.Добавить(ДокументОрганизации);
			СтруктураЗапроса.Вставить(ИмяДокумента, МассивДокументов);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЗапросПоДокументу Из СтруктураЗапроса Цикл 
		
		Если ЗначениеЗаполнено(Запрос.Текст) Тогда 
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			| ";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Документ.Ссылка КАК Ссылка,
		|	Документ.Идентификатор КАК Идентификатор
		|ИЗ
		|	Документ." + ЗапросПоДокументу.Ключ + " КАК Документ
		|ГДЕ
		|	Документ.Ссылка В(&МассивДокументов" + ЗапросПоДокументу.Ключ + ")
		|	И НЕ Документ.Идентификатор = """"";
		
		Запрос.УстановитьПараметр("МассивДокументов" + ЗапросПоДокументу.Ключ, ЗапросПоДокументу.Значение);
		
	КонецЦикла;
	
	Возврат Запрос.Выполнить().Выбрать();
	
	
КонецФункции

Функция СозданиеТитуловИСЦЭДМ(КоллекцияСгруппированныхДокументов, ДействиеИндекс) Экспорт
	
	ДанныеДляПодписи = Новый Соответствие();
	
	Для каждого СгруппированныеАкты Из КоллекцияСгруппированныхДокументов Цикл
		
		//получить идентификаторы запросом
		СтруктурнаяЕдиница = СгруппированныеАкты.Ключ;
		МассивДокументов   = СгруппированныеАкты.Значение;
		Если МассивДокументов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСЦЭДМ();
		Если ТипЗнч(МассивДокументов[0]) = Тип("ДокументСсылка.АктПриемаПередачиИСЦЭДМ") Тогда
			ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСЦЭДМ();
		ИначеЕсли ТипЗнч(МассивДокументов[0]) = Тип("ДокументСсылка.УведомлениеОВыводеИзОборотаИСЦЭДМ") Тогда
			ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСЦЭДМ();
		ИначеЕсли ТипЗнч(МассивДокументов[0]) = Тип("ДокументСсылка.УведомлениеОВводеВОборотИСЦЭДМ") Тогда
			ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСЦЭДМ();
		ИначеЕсли ТипЗнч(МассивДокументов[0]) = Тип("ДокументСсылка.АктВнутреннегоПеремещенияИСЦЭДМ") Тогда
			ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктВнутреннегоПеремещенияИСЦЭДМ();
		ИначеЕсли ТипЗнч(МассивДокументов[0]) = Тип("ДокументСсылка.ОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ") Тогда
			ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ();
		ИначеЕсли ТипЗнч(МассивДокументов[0]) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСЦЭДМ") Тогда
			ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСЦЭДМ(); 
		ИначеЕсли ТипЗнч(МассивДокументов[0]) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСЦЭДМ") Тогда
			ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСЦЭДМ();
		КонецЕсли;
		
		ПрофильДоступа = ИнтеграцияИСМПТКПовтИсп.ПолучитьДанныеПрофиляДоступаКЭДО(СтруктурнаяЕдиница, ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь());
		ПараметрыЗапросаКлючаСессии = ИнтеграцияИСМПТККлиентСервер.ПараметрыЗапросаКлючаСессии_ИСЦЭДМ(ПрофильДоступа);
		ТокенАвторизации = ИнтерфейсИСМПТКВызовСервера.ПроверитьОбновитьКлючСессииИСЦЭДМ(ПараметрыЗапросаКлючаСессии, Неопределено, Ложь);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Документ.Ссылка КАК Ссылка,
		|	Документ.Идентификатор КАК Идентификатор
		|ИЗ
		|	Документ."+ИмяДокумента+" КАК Документ
		|ГДЕ
		|	Документ.Ссылка В(&МассивДокументов)
		|	И НЕ Документ.Идентификатор = """"";
		
		Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			//получаем титул в бейс64
			РезультатВыполненияНаСервере = ВыполнитьСозданиеТитулаДляПодписиИСЦЭДМ(Выборка.Идентификатор, ТокенАвторизации, "", СтруктурнаяЕдиница);
			ИнформацияОбОшибке = Неопределено;
			Если ЭтоОшибкаИСЦЭДМ(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
				ЗаполнитьОшибкиДокумента(Выборка.Ссылка, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
				ТекстСообщения = НСтр("ru = 'При создании титула для подписи произошла ошибка: '") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
				ИдЗапроса = "";
				Если РезультатВыполненияНаСервере.Свойство("ИдентификаторЗапроса", ИдЗапроса) Тогда 
					ТекстСообщения = ТекстСообщения
								   + Символы.ПС
								   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИдентификаторЗапросаКСерверу();
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИдентификатоНомер%", ИдЗапроса);
				КонецЕсли;
			
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
				ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.СозданиеТитуловИСЦЭДМ");
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,	ТекстСообщения);
				Продолжить;
			Иначе
				//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
				ОчиститьОшибкиДокумента(Выборка.Ссылка);	
			КонецЕсли;
			
			ДанныеДляПодписиТитул = ОбщегоНазначенияИСМПТК.ПреобразоватьJSON_В_МассивСтруктур(РезультатВыполненияНаСервере.ТекстОтвета);
			Если ДанныеДляПодписиТитул.Количество() <> 0  Тогда
				ТитулДляПодписи = ДанныеДляПодписиТитул.result;
			Иначе 
				ТитулДляПодписи = "";
			КонецЕсли;
			
			СтруктураДанных = Новый Структура();
			СтруктураДанных.Вставить("ТитулДляПодписи",    ТитулДляПодписи);
			СтруктураДанных.Вставить("Токен", 			   ТокенАвторизации);
			СтруктураДанных.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
			СтруктураДанных.Вставить("СсылкаДокумент", 	   Выборка.Ссылка);
			СтруктураДанных.Вставить("ДействиеИндекс",     ДействиеИндекс);
			СтруктураДанных.Вставить("Идентификатор",	   Выборка.Идентификатор);
			
			ДанныеДляПодписи.Вставить(Выборка.Ссылка, СтруктураДанных);
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДанныеДляПодписи;
	
КонецФункции

// Подписание титула POST /edo-api/incoming-documents/{documentId}/events/{decision}/signature
Функция ВыполнитьПодписаниеТитулаОтклонениеПодтверждениеОтзыв_ИСЦЭДМ(ИдентификаторДокумента, ДействиеИндекс, ПодписанныйТитул, ТитулДляПодписи, ДанныеПрофилей, Версия, ИдентификационныйНомер)
	
	массивДействий = Новый Массив();
	массивДействий.Добавить("accept");
	массивДействий.Добавить("reject");
	массивДействий.Добавить("revoke");		
			
	Действие = массивДействий[ДействиеИндекс];
	АдресРесурса = СтрШаблон("apiUot/api/v1/private/document/%1", Действие);
	
	ПараметрыApiSign = Новый Структура();
	ПараметрыApiSign.Вставить("content",   ТитулДляПодписи);
	ПараметрыApiSign.Вставить("signature", ПодписанныйТитул);
					
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("trueAPISign", 	 ПараметрыApiSign);
	ПараметрыЗапроса.Вставить("commoditygroup",  "pharma");
	ПараметрыЗапроса.Вставить("documentId", 	 РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СтрокаВЧисло(ИдентификаторДокумента));
	ПараметрыЗапроса.Вставить("organizationBin", ИдентификационныйНомер);
			
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ПараметрыЗапроса);
	ТекстОтправки = ЗаписьJSON.Закрыть();

	Заголовки = Новый Соответствие();
		
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, , ТекстОтправки,, ДанныеПрофилей, Ложь);
	
КонецФункции

Функция ОбновитьАктыПП_ИСЦЭДМ(Знач МассивДокументов,Знач Организация, ТокенАвторизации, ПрофильДоступаКЭДО) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ОбновитьАктыПППоИдентификатору_ИСЦЭДМ(МассивДокументов, ПрофильДоступаКЭДО, ТокенАвторизации);
		ЗафиксироватьТранзакцию();
		
	Исключение

		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
	КонецПопытки;
	
КонецФункции

Процедура ОбновитьАктыПППоИдентификатору_ИСЦЭДМ(Знач МассивДокументов, ПрофильДоступаКЭДО, ТокенАвторизации) Экспорт
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АктПП.Ссылка КАК Ссылка,
	|	АктПП.Идентификатор КАК Идентификатор,
	|	АктПП.Направление КАК Направление,
	|	АктПП.НомерИСЦЭДМ КАК НомерИСЦЭДМ,
	|	АктПП.ТипАкта КАК ТипАкта,
	|	АктПП.ПоставщикИдентификационныйНомер КАК ПоставщикИдентификационныйНомер,
	|	АктПП.ПолучательИдентификационныйНомер КАК ПолучательИдентификационныйНомер,
	|	ВЫБОР
	|		КОГДА АктПП.ПолучательСкладЦЭДМИдентификационныйНомер = """"
	|			ТОГДА АктПП.ПолучательИдентификационныйНомер
	|		ИНАЧЕ АктПП.ПолучательСкладЦЭДМИдентификационныйНомер
	|	КОНЕЦ КАК ИдентификаторПолучатель,
	|	ВЫБОР
	|		КОГДА АктПП.ПоставщикСкладЦЭДМИдентификационныйНомер = """"
	|			ТОГДА АктПП.ПоставщикИдентификационныйНомер
	|		ИНАЧЕ АктПП.ПоставщикСкладЦЭДМИдентификационныйНомер
	|	КОНЕЦ КАК ИдентификаторПоставщик
	|ИЗ
	|	Документ.АктПриемаПередачиИСЦЭДМ КАК АктПП
	|ГДЕ
	|	АктПП.Ссылка В(&МассивДокументов)
	|	И НЕ АктПП.Идентификатор = """"
	|	И АктПП.ПометкаУдаления = ЛОЖЬ
	|ИТОГИ ПО
	|	Направление";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	ВыборкаНаправление = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Контекст = Новый Структура("ПрофильИСЦЭДМ, СтруктурнаяЕдиница, ТокенАвторизации");
	Контекст.ПрофильИСЦЭДМ = ПрофильДоступаКЭДО; 
	Контекст.СтруктурнаяЕдиница = ПрофильДоступаКЭДО.Организация; 
	Контекст.ТокенАвторизации = ТокенАвторизации; 
	
	Пока ВыборкаНаправление.Следующий() Цикл
		
		Выборка = ВыборкаНаправление.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
				//ошибка, в документе нет идентификатора
				Продолжить;
			КонецЕсли;
			
			СтруктураДокумента = Новый Структура("ID");
			СтруктураДокумента.ID = ОбщегоНазначенияИСМПТК.УдалитьРазрывыВСтроке(Выборка.Идентификатор);
			
			ТипДокументов = РаботаСДокументамиИСМПТК.ОпределитьТипДокументаПоСсылке(Выборка.Ссылка);
			Если Выборка.Направление = Перечисления.НаправленияДокументовИСМПТК.Исходящий Тогда 
				БИН = Выборка.ИдентификаторПоставщик;
			Иначе 
				БИН = Выборка.ИдентификаторПолучатель;
			КонецЕсли;
			
			РезультатВыполненияНаСервере = ПолучитьПрофильДокумента(ОбщегоНазначенияИСМПТК.УдалитьРазрывыВСтроке(СтруктураДокумента.ID), БИН, Контекст.СтруктурнаяЕдиница, ТипДокументов, Контекст.ТокенАвторизации);
			
			ИнформацияОбОшибке = Неопределено;
			Если ЭтоОшибкаИСЦЭДМ(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриПолученииДанныхССервера() + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
				ИдЗапроса = "";
				Если РезультатВыполненияНаСервере.Свойство("ИдентификаторЗапроса", ИдЗапроса) Тогда 
					ТекстСообщения = ТекстСообщения
								   + Символы.ПС
								   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИдентификаторЗапросаКСерверу();
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИдентификатоНомер%", ИдЗапроса);
				КонецЕсли;
				
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
				ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьАктыПППоИдентификатору_ИСЦЭДМ");
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
				ДополнительныеДанные = Неопределено;
			Иначе 
				ДополнительныеДанные = ОбщегоНазначенияИСМПТК.ПреобразоватьJSON_В_МассивСтруктур(РезультатВыполненияНаСервере.ТекстОтвета);
			КонецЕсли;
			Если Выборка.Направление = Перечисления.НаправленияДокументовИСМПТК.Входящий Тогда
				ЗаполнитьДокумент_ИСЦЭДМ(ДополнительныеДанные, СтруктураДокумента.ID, Контекст.СтруктурнаяЕдиница, Выборка.Ссылка); 
			Иначе 
				ЗаполнитьОбновленныеДанныеИсходящихАктов_ИСЦЭДМ(ДополнительныеДанные, СтруктураДокумента.ID, Выборка.Ссылка);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОбновленныеДанныеИсходящихАктов_ИСЦЭДМ(Данные, ИдентификаторДокумента, СсылкаНаАкт)
	
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Попытка
		ДокументОбъект = СсылкаНаАкт.ПолучитьОбъект();
		ДокументОбъект.НомерИСЦЭДМ 	 = Данные.edoId;
		ДокументОбъект.ДатаВИСЦЭДМ 	 = ОбщегоНазначенияИСМПТК.ПривестиСтрокуКДате(Данные.createDocDate, "дмг");
		Статус = ПолучитьСтатусДокументаИСЦЭДМПоИдентификатору(Данные.stateId);
		Если Статус <> Неопределено Тогда
			ДокументОбъект.Статус = Статус;
		КонецЕсли;
		ДокументОбъект.Записать();
	Исключение
		//ОписаниеОшибки()
	КонецПопытки;
	
КонецПроцедуры	

Процедура ЗаполнитьДокумент_ИСЦЭДМ(Данные, ID, Организация, СсылкаНаАкт = Неопределено)
	
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СсылкаНаАкт = Неопределено Тогда
	
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	АктПриемаПередачиИСЦЭДМ.Ссылка КАК НайденнаяСсылка,
		               |	АктПриемаПередачиИСЦЭДМ.Идентификатор КАК Идентификатор
		               |ИЗ
		               |	Документ.АктПриемаПередачиИСЦЭДМ КАК АктПриемаПередачиИСЦЭДМ
		               |ГДЕ
		               |	АктПриемаПередачиИСЦЭДМ.Идентификатор В(&Идентификаторы)
		               |	И АктПриемаПередачиИСЦЭДМ.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("Идентификаторы", ID);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
		
			АктОбъект = Выборка.НайденнаяСсылка.ПолучитьОбъект();
			
		Иначе
			
			АктОбъект = Документы.АктПриемаПередачиИСЦЭДМ.СоздатьДокумент();
			АктОбъект.Дата = ТекущаяДатаСеанса();
		
		КонецЕсли;

	Иначе

		АктОбъект = СсылкаНаАкт.ПолучитьОбъект();
		
	КонецЕсли;

	АктОбъект.Организация = Организация;
	АктОбъект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий");	
	
	АктОбъект.Идентификатор = ID;
	
	Попытка
	
		АктОбъект.ДатаВИСЦЭДМ = ОбщегоНазначенияИСМПТК.ПривестиСтрокуКДате(Данные.createDocDate, "дмг");
	
	Исключение
	
	КонецПопытки;
	
	АктОбъект.НомерИСЦЭДМ = Данные.edoId;
	
	Статус = ПолучитьСтатусДокументаИСЦЭДМПоИдентификатору(Данные.stateId);
	
	Если Статус <> Неопределено Тогда
		АктОбъект.Статус = Статус;
	КонецЕсли;
	
	Если Данные.docType = "1" Тогда
		АктОбъект.ВидОперации = Перечисления.ХозяйственныеОперацииИСЦЭДМ.Реализация; 
	ИначеЕсли Данные.docType = "10" Тогда
		АктОбъект.ВидОперации = Перечисления.ХозяйственныеОперацииИСЦЭДМ.РеализацияОтКонтрагента; 
	КонецЕсли;
	
	АктОбъект.ТипАкта = Перечисления.ВидыДокументаИСМПТК.Исходный;
	
	АктОбъект.ПоставщикНаименование 		   = Данные.sender.orgRu;
	
	Если СтрДлина(Данные.sender.bin) > 12 Тогда
		АктОбъект.ПоставщикСкладЦЭДМИдентификационныйНомер 		= Данные.sender.bin;
		АктОбъект.ПоставщикИдентификационныйНомер	= Сред(Данные.sender.bin, 1, 12);
	Иначе
		АктОбъект.ПоставщикИдентификационныйНомер	= Данные.sender.bin;
	КонецЕсли;
		
	АктОбъект.ПолучательНаименование 		   = Данные.receiver.orgRu;
	Если АктОбъект.ПолучательНаименование = "" Тогда
		АктОбъект.ПолучательНаименование 		   = Организация.НаименованиеПолное;
	КонецЕсли;
	
	Если СтрДлина(Данные.receiver.bin) > 12 Тогда
		АктОбъект.ПолучательСкладЦЭДМИдентификационныйНомер 		= Данные.receiver.bin;
		АктОбъект.ПолучательИдентификационныйНомер	= Сред(Данные.receiver.bin, 1, 12);
	Иначе 
		АктОбъект.ПолучательИдентификационныйНомер = Данные.receiver.bin;
	КонецЕсли;
	
	ИдентификационныеНомераКонтрагентов		 = Новый Массив;
	ИдентификационныеНомераСтруктурныхЕдиниц = Новый Массив;	
	
	Если ЗначениеЗаполнено(АктОбъект.ПоставщикИдентификационныйНомер) Тогда
		ИдентификационныеНомераКонтрагентов.Добавить(АктОбъект.ПоставщикИдентификационныйНомер);
		ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(АктОбъект.ПоставщикИдентификационныйНомер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АктОбъект.ПолучательИдентификационныйНомер) Тогда
		ИдентификационныеНомераКонтрагентов.Добавить(АктОбъект.ПолучательИдентификационныйНомер);
		ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(АктОбъект.ПолучательИдентификационныйНомер);
	КонецЕсли;
	
	СоответствияИдентификаторовИСсылок = РаботаСДокументамиИСМПТК.НайтиКонтрагентовИСтруктурныеЕдиницыПоИдентификационнымНомерам(ИдентификационныеНомераКонтрагентов, ИдентификационныеНомераСтруктурныхЕдиниц);
	
	СоответствияКонтрагентов = СоответствияИдентификаторовИСсылок.СоответствияКонтрагентов;
	Для Каждого ЭлементСоответствияКонтрагентов Из СоответствияКонтрагентов Цикл
		
		Идентификатор = ЭлементСоответствияКонтрагентов.Ключ;
		КонтрагентТех = ЭлементСоответствияКонтрагентов.Значение;
		
		Если АктОбъект.ПоставщикИдентификационныйНомер = Идентификатор Тогда
			АктОбъект.Поставщик = КонтрагентТех;
		КонецЕсли;
		
		Если АктОбъект.ПолучательИдентификационныйНомер = Идентификатор Тогда
			АктОбъект.Получатель = КонтрагентТех;
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнить ссылки на структурные единицы.
	СоответствияСтруктурныхЕдиниц = СоответствияИдентификаторовИСсылок.СоответствияСтруктурныхЕдиниц;
	Для Каждого ЭлементСоответствияСтруктурныхЕдиниц Из СоответствияСтруктурныхЕдиниц Цикл
		
		Идентификатор = ЭлементСоответствияСтруктурныхЕдиниц.Ключ;
		КонтрагентТех = ЭлементСоответствияСтруктурныхЕдиниц.Значение;
		
		Если АктОбъект.ПоставщикИдентификационныйНомер = Идентификатор Тогда
			АктОбъект.Поставщик = КонтрагентТех;
		КонецЕсли;
		
		Если АктОбъект.ПолучательИдентификационныйНомер = Идентификатор Тогда
			АктОбъект.Получатель = КонтрагентТех;
		КонецЕсли;
	
	КонецЦикла;

	//табличная часть Итоги
	АктОбъект.Итоги.Очистить();
	ТаблицаИтогов = Данные.total;
	
	Если Не ТаблицаИтогов = Неопределено Тогда
		Для Каждого СтрокаТовары Из ТаблицаИтогов Цикл
			
			НоваяСтрока = АктОбъект.Итоги.Добавить();
			
			СтруктураНоменклатуры = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, Сред(СтрокаТовары.GTIN, 2, 13));
			НоваяСтрока.Номенклатура = ?(Не СтруктураНоменклатуры = Неопределено, СтруктураНоменклатуры.Номенклатура, Неопределено);
			НоваяСтрока.Количество	 = СтрокаТовары.total;
			НоваяСтрока.GTIN = СтрокаТовары.GTIN;
			НоваяСтрока.Цена = СтрокаТовары.price;
			НоваяСтрока.EAN	 = Сред(СтрокаТовары.GTIN, 2, 13);
			
		КонецЦикла;
	КонецЕсли;
	
	//табличная часть Товары
	АктОбъект.Товары.Очистить();
	ТоварыПоМаркам = АктОбъект.Итоги.Выгрузить(,"Количество, Номенклатура, EAN, GTIN");
	ТоварыПоМаркам.Свернуть("Номенклатура, EAN, GTIN", "Количество");
	
	Для Каждого СтрокаТовары Из ТоварыПоМаркам Цикл
		
		НоваяСтрока = АктОбъект.Товары.Добавить();
		НоваяСтрока.Номенклатура = СтрокаТовары.Номенклатура;
		НоваяСтрока.КоличествоИсточник = СтрокаТовары.Количество;
		НоваяСтрока.GTIN = СтрокаТовары.GTIN;
		НоваяСтрока.EAN  = СтрокаТовары.EAN;
		НоваяСтрока.ВидПродукции 	 = Перечисления.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты;
		НоваяСтрока.ЕдиницаИзмерения = РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьЕдиницуИзмерения(НоваяСтрока.Номенклатура);
		
	КонецЦикла;
	
	АктОбъект.Контрагент = АктОбъект.Поставщик;
	АктОбъект.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры

Процедура СоздатьИсходящиеАктыИСЦЭДМ(Знач МассивДокументов) Экспорт

	АдресРесурса = "apiUot/api/v1/private/create-doc";
	РезультатОтправки 	= Новый Соответствие;
	ТокенАвторизации 	= ИнтерфейсИСМПТК.ПолучитьТокенАвторизацииИСЦЭДМ(МассивДокументов[0].Организация);
	РеквизитыЕдиногоДистрибьютера 	= ИнтеграцияИСМПТКПереопределяемый.ПолучитьРеквизитыОрганизацииКонтрагента(Константы.ЕдиныйДистрибьюторЛСИСЦЭДМ.Получить(), "Дистрибьютор");
	
	Для каждого ДокументИзМассива Из МассивДокументов Цикл
	
		СтруктураАктаПП = Новый Структура;
		Если ДокументИзМассива.ВидОперации = Перечисления.ХозяйственныеОперацииИСЦЭДМ.РеализацияОтКонтрагента Тогда
			СтруктураАктаПП.Вставить("docType", "10");
		ИначеЕсли ДокументИзМассива.ВидОперации = Перечисления.ХозяйственныеОперацииИСЦЭДМ.Реализация Тогда //от Единого дистрибьютора
			СтруктураАктаПП.Вставить("docType", "1");
			СтруктураАктаПП.Вставить("ownerBin", РеквизитыЕдиногоДистрибьютера.ДистрибьюторИдентификационныйНомер);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументИзМассива.ПоставщикСкладЦЭДМИдентификационныйНомер) Тогда 
			СтруктураАктаПП.Вставить("senderBin", ДокументИзМассива.ПоставщикСкладЦЭДМИдентификационныйНомер);
		Иначе 
			СтруктураАктаПП.Вставить("senderBin", ДокументИзМассива.ПоставщикИдентификационныйНомер);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументИзМассива.ПолучательСкладЦЭДМИдентификационныйНомер) Тогда
			СтруктураАктаПП.Вставить("receiverBin", ДокументИзМассива.ПолучательСкладЦЭДМИдентификационныйНомер);
		Иначе
			СтруктураАктаПП.Вставить("receiverBin", ДокументИзМассива.ПолучательИдентификационныйНомер);
		КонецЕсли;

		СтруктураАктаПП.Вставить("paperNum",  ДокументИзМассива.РегНомерНаБумажномНосителе);
		СтруктураАктаПП.Вставить("paperDate", Формат(ДокументИзМассива.ДатаВыпискиНаБумажномНосителе, "ДФ=гггг-ММ-дд"));
		СтруктураАктаПП.Вставить("comment",   Неопределено);
		СтруктураАктаПП.Вставить("addInfo",   Неопределено);

		МассивКодовМаркировки = Новый Массив;
		Для каждого Стр Из ДокументИзМассива.Марки Цикл 
			МассивКодовМаркировки.Добавить(Стр.КодИдентификации);
		КонецЦикла;

		СтруктураАктаПП.Вставить("codes", МассивКодовМаркировки);
	
		СтруктураПередачи = Новый Структура;
		СтруктураПередачи.Вставить("commoditygroup", "pharma");
		СтруктураПередачи.Вставить("document", СтруктураАктаПП);

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, СтруктураПередачи);
		ТекстОтправки = ЗаписьJSON.Закрыть(); 
		
		Заголовки = Новый Соответствие();
		
		РезультатВыполненияНаСервере = ВыполнитьМетодСервера(АдресРесурса, Заголовки, Неопределено, ТекстОтправки,, ТокенАвторизации, Ложь);
		РезультатОтправки.Вставить(ДокументИзМассива, РезультатВыполненияНаСервере); 
		
	КонецЦикла;
	
	// Обновим статусы отправленных и заполняем идентификаторы после завершения отправки всех документов
	ОбновитьДокументыПослеОтправкиЧерновика(РезультатОтправки);
	
КонецПроцедуры

Процедура ОбновитьДокументыПослеОтправкиЧерновика(РезультатОтправкиДокументов)
		
	Для каждого РезультатОтправки Из РезультатОтправкиДокументов Цикл
		ИнформацияОбОшибке = Неопределено;
		Если ЭтоОшибкаИСЦЭДМ(РезультатОтправки.Значение, ИнформацияОбОшибке) Тогда
			ЗаполнитьОшибкиДокумента(РезультатОтправки.Ключ, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОбновленииДокументаССервера() + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			ИдЗапроса = "";
			Если РезультатОтправки.Значение.Свойство("ИдентификаторЗапроса", ИдЗапроса) Тогда 
				ТекстСообщения = ТекстСообщения 
							   + Символы.ПС
							   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИдентификаторЗапросаКСерверу();
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИдентификатоНомер%", ИдЗапроса);
			КонецЕсли;
			
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
			ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьДокументыПослеОтправкиЧерновика");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			//Очистить статус и идентификатор документа
			ДокОбъект = РезультатОтправки.Ключ.ПолучитьОбъект();
			ДокОбъект.Статус = Перечисления.СтатусыДокументовИСЦЭДМ.НеОпределен;
			ДокОбъект.Идентификатор = "";
						
			Попытка
				ДокОбъект.Записать();
			Исключение
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьОчиститьИдентификаторДокумента();
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбрабатываемыйДокумент%", РезультатОтправки.Ключ);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецПопытки;
			
			Продолжить;
		Иначе
			//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
			ОчиститьОшибкиДокумента(РезультатОтправки.Ключ);
		КонецЕсли;
		
		РазобранныеДанные = ОбщегоНазначенияИСМПТК.ПреобразоватьJSON_В_МассивСтруктур(РезультатОтправки.Значение.ТекстОтвета);
		ТипДокумента = ТипЗнч(РезультатОтправки.Ключ);
		
		// меняем статус документа
		Если РазобранныеДанные.code = "200" Тогда 
			
			Если РаботаСДокументамиИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанныхИСЦЭДМ() Тогда
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументУспешноОтправленНаСервер();
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеСервера%", РаботаСТекстамиИСМПТККлиентСервер.НаименованиеИСЦЭДМ());
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			Направление = Неопределено;
			//Заявления о ввозе всегда входящие
			Если ТипДокумента = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСЦЭДМ") Тогда
				Направление = Перечисления.НаправленияДокументовИСМПТК.Входящий;
			КонецЕсли;
			
			УстановитьСтатусДокументу(РезультатОтправки.Ключ, Перечисления.СтатусыДокументовИСЦЭДМ.Черновик, РазобранныеДанные.id_doc,, Направление);
			
		ИначеЕсли РазобранныеДанные.code = "500" Тогда
			
			Комментарий = ?(СтрНайти(ДокОбъект.Комментарий, РазобранныеДанные.message)= 0, ДокОбъект.Комментарий + РазобранныеДанные.message, ДокОбъект.Комментарий);
			УстановитьСтатусДокументу(РезультатОтправки.Ключ, Перечисления.СтатусыДокументовИСЦЭДМ.НеОпределен, , Комментарий);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 

Функция ЗаполнитьЦеныДокументов(ДополнительныеПараметры, АдресРезультата = "") Экспорт
	
	Для Каждого СгруппированныеИСЦЭДМ Из ДополнительныеПараметры Цикл
		
		МассивДокументов = СгруппированныеИСЦЭДМ.Значение;
		ТокенАвторизации = ИнтерфейсИСМПТК.ПолучитьТокенАвторизацииИСЦЭДМ(МассивДокументов[0].Организация);
		
		Для Сч = -МассивДокументов.Количество() + 1 По 0 Цикл
		
			ОшибкаЗаполнения = ЗаполнитьЦеныДокументаВРазрезеGTIN(МассивДокументов[-Сч], ТокенАвторизации);
			
			Если ЗначениеЗаполнено(ОшибкаЗаполнения) Тогда
				
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ОшибкаЗаполнения);
				ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
				ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ЗаполнитьЦеныДокументаВРазрезеGTIN");
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ОшибкаЗаполнения);
				МассивДокументов.Удалить(-Сч);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДополнительныеПараметры;

КонецФункции

Функция ЗаполнитьЦеныДокументаВРазрезеGTIN(Документ, ТокенАвторизации) Экспорт
	
	АдресРесурса = "apiUot/api/v1/private/document/gtin/";
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСЦЭДМ")
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.УведомлениеОВвозеИзТретьихСтранИСЦЭДМ") Тогда
		//Для документов импорта фактическим отправитлем является получатель
		ИдентификаторОтправителя = ?(ЗначениеЗаполнено(Документ.ПолучательСкладЦЭДМИдентификационныйНомер),
													   Документ.ПолучательСкладЦЭДМИдентификационныйНомер,
													   Документ.ПолучательИдентификационныйНомер);
	Иначе 
		ИдентификаторОтправителя = ?(ЗначениеЗаполнено(Документ.ПоставщикСкладЦЭДМИдентификационныйНомер),
													   Документ.ПоставщикСкладЦЭДМИдентификационныйНомер,
													   Документ.ПоставщикИдентификационныйНомер);
	КонецЕсли;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Innbin", ИдентификаторОтправителя);
	
	Пока Истина Цикл 
		
		РезультатВыполненияНаСервере = ВыполнитьМетодСервера(АдресРесурса + Документ.Идентификатор, Заголовки,,, "GET", ТокенАвторизации, Ложь); 
		
		Если РезультатВыполненияНаСервере.КодСостояния = 200 Тогда
			
			ДанныеПоGTIN = ОбщегоНазначенияИСМПТК.ПреобразоватьJSON_В_МассивСтруктур(РезультатВыполненияНаСервере.ТекстОтвета);
			
			Если ДанныеПоGTIN = Неопределено Тогда
				
				ПрофильДокумента = ПолучитьПрофильДокумента(Документ.Идентификатор, ИдентификаторОтправителя, Документ.Организация, РаботаСДокументамиИСМПТК.ОпределитьТипДокументаПоСсылке(Документ), ТокенАвторизации);
				ИнформацияОбОшибке = Неопределено;
				
				Если Не ЗначениеЗаполнено(ПрофильДокумента.ТекстОтвета) Тогда
					ТекстСообщения = ТекстСообщения 
								   + Символы.ПС
								   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьЗаполнитьЦеныДокумента();
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбрабатываемыйДокумент%", Документ);
					Возврат ТекстСообщения;
				КонецЕсли;
				
				Если ЭтоОшибкаИСЦЭДМ(ПрофильДокумента, ИнформацияОбОшибке) Тогда
					ЗаполнитьОшибкиДокумента(Документ, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
					ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриПолученииСтатусаДокументаССервера()
								   + Символы.ПС 
								   + ИнформацияОбОшибке.ПодробноеПредставление;
					ИдЗапроса = "";
					Если ПрофильДокумента.Свойство("ИдентификаторЗапроса", ИдЗапроса) Тогда 
						ТекстСообщения = ТекстСообщения
									   + Символы.ПС 
									   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИдентификаторЗапросаКСерверу();
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИдентификатоНомер%", ИдЗапроса);
					КонецЕсли;
					
					ТекстСообщения = ТекстСообщения 
								   + Символы.ПС
								   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьЗаполнитьЦеныДокумента();
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбрабатываемыйДокумент%", Документ);
					
					Возврат ТекстСообщения;
					
				КонецЕсли;
				
				СтруктураДокумента = ОбщегоНазначенияИСМПТК.ПреобразоватьJSON_В_МассивСтруктур(ПрофильДокумента.ТекстОтвета);
				
				Если СтруктураДокумента.stateId = 18
					Или СтруктураДокумента.stateId = 1 Тогда
					//Расчет итогов не завершился, выполним запрос через 3 сек
					ИнтеграцияИСМПТКПереопределяемый.Пауза(3);
					Продолжить;
				Иначе
					//Расчет итогов завершён но данных по GTIN нет - вероятно ошибка документа
					ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриПолученииСтатусаДокументаССервера()
								   + Символы.ПС
								   + НСтр("ru = 'Документ находится в статусе %СтатусДокумента%, который не позволяет вести работу с этим документом.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтатусДокумента%", ПолучитьСтатусДокументаИСЦЭДМПоИдентификатору(СтруктураДокумента.stateId));
					Если ПрофильДокумента.Свойство("ИдентификаторЗапроса", ИдЗапроса) Тогда 
						ТекстСообщения = ТекстСообщения 
									   + Символы.ПС
									   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИдентификаторЗапросаКСерверу();
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИдентификатоНомер%", ИдЗапроса);
					КонецЕсли;
					
					ТекстСообщения = ТекстСообщения 
								   + Символы.ПС
								   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьЗаполнитьЦеныДокумента();
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбрабатываемыйДокумент%", Документ);
					
					Возврат ТекстСообщения;
					
				КонецЕсли;
					
			КонецЕсли;
			
			ТаблицаТоваров = Документ.Итоги.Выгрузить(, "GTIN, Цена");
			
			Для Каждого СтрокаGTIN Из ДанныеПоGTIN Цикл 
				
				СтрокаДокумента = ТаблицаТоваров.Найти(СтрокаGTIN.GTIN, "GTIN");
				Если Не СтрокаДокумента = Неопределено Тогда 
					СтрокаGTIN.price = СтрокаДокумента.Цена;
				Иначе
					СтрокаGTIN.price = 0;
				КонецЕсли;
				
			КонецЦикла;
			
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			ЗаписатьJSON(ЗаписьJSON, ДанныеПоGTIN);
			ТекстОтправки = ЗаписьJSON.Закрыть();
			
			РезультатВыполненияНаСервере = ВыполнитьМетодСервера(АдресРесурса + Документ.Идентификатор, Заголовки,, ТекстОтправки, "PUT", ТокенАвторизации, Ложь);
			
			Если РезультатВыполненияНаСервере.КодСостояния = 200 Тогда
				
				ДокОбъект = Документ.ПолучитьОбъект();
				ДокОбъект.ЦеныПереданыУспешно = Истина;
				
				Попытка
					ДокОбъект.Записать();
				Исключение
					ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьИзменитьСтатусДокумента();
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбрабатываемыйДокумент%", Документ);
					ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
		//Данные запрос по цена был выполнен
		Прервать;
		
	КонецЦикла;
	
КонецФункции

Функция ПроверитьСтатусДокументов(ДополнительныеПараметры, АдресРезультата = "") Экспорт
	
	Для Каждого СгруппированныеИСЦЭДМ Из ДополнительныеПараметры Цикл
		
		МассивДокументов = СгруппированныеИСЦЭДМ.Значение;
		ТокенАвторизации = ИнтерфейсИСМПТК.ПолучитьТокенАвторизацииИСЦЭДМ(МассивДокументов[0].Организация);
		
		Для Сч = -МассивДокументов.Количество() + 1 По 0 Цикл
		
			ОшибкаЗаполнения = ПроверкаСтатусаДокумента(МассивДокументов[-Сч], ТокенАвторизации);
			
			Если ЗначениеЗаполнено(ОшибкаЗаполнения) Тогда
				
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ОшибкаЗаполнения);
				ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
				ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ЗаполнитьЦеныДокументаВРазрезеGTIN");
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ОшибкаЗаполнения);
				МассивДокументов.Удалить(-Сч);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДополнительныеПараметры;

КонецФункции

Функция ПроверкаСтатусаДокумента(Документ, ТокенАвторизации) Экспорт
	
	АдресРесурса = "apiUot/api/v2/private/check-documents";
	
	МассивИдентификаторов = Новый Массив;
	МассивИдентификаторов.Добавить(Число(Документ.Идентификатор));
	
	СтруктураОтправки = Новый Структура("documentId", МассивИдентификаторов);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураОтправки);
	ТекстОтправки = ЗаписьJSON.Закрыть();
	
	Пока Истина Цикл 
		
		РезультатВыполненияНаСервере = ВыполнитьМетодСервера(АдресРесурса, Новый Соответствие,, ТекстОтправки, "POST", ТокенАвторизации, Ложь); 
		
		Если РезультатВыполненияНаСервере.КодСостояния = 200 Тогда
			
			РазобранныйОтветСервера = ОбщегоНазначенияИСМПТК.ПреобразоватьJSON_В_МассивСтруктур(РезультатВыполненияНаСервере.ТекстОтвета);
			
			ДанныеПоСтатусуДокумента = РазобранныйОтветСервера[0].status;
			
			Если ДанныеПоСтатусуДокумента.Id = 18 Тогда
				//Расчет итогов не завершился, выполним запрос через 3 сек
				ИнтеграцияИСМПТКПереопределяемый.Пауза(3);
				Продолжить;
				
			ИначеЕсли ДанныеПоСтатусуДокумента.Id = 1 Тогда
				
				Прервать;
				
			Иначе
				
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриПолученииСтатусаДокументаССервера()
				+ Символы.ПС
				+ НСтр("ru = 'Документ находится в статусе %СтатусДокумента%, который не позволяет вести работу с этим документом.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтатусДокумента%", ПолучитьСтатусДокументаИСЦЭДМПоИдентификатору(ДанныеПоСтатусуДокумента.Id));
				
				ИдЗапроса = "";
				
				Если РезультатВыполненияНаСервере.Свойство("ИдентификаторЗапроса", ИдЗапроса) Тогда 
					ТекстСообщения = ТекстСообщения 
					+ Символы.ПС
					+ РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИдентификаторЗапросаКСерверу();
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИдентификатоНомер%", ИдЗапроса);
				КонецЕсли;
				
				ТекстСообщения = ТекстСообщения 
				+ Символы.ПС
				+ РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьЗаполнитьЦеныДокумента();
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбрабатываемыйДокумент%", Документ);
				
				Возврат ТекстСообщения;
				
			КонецЕсли;
			
		Иначе 
			
			ИнформацияОбОшибке = Неопределено;
			
			Если ЭтоОшибкаИСЦЭДМ(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
				
				ЗаполнитьОшибкиДокумента(Документ, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриПолученииСтатусаДокументаССервера()
				+ Символы.ПС 
				+ ИнформацияОбОшибке.ПодробноеПредставление;
				ИдЗапроса = "";
				
				Если РезультатВыполненияНаСервере.Свойство("ИдентификаторЗапроса", ИдЗапроса) Тогда 
					ТекстСообщения = ТекстСообщения
					+ Символы.ПС 
					+ РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИдентификаторЗапросаКСерверу();
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИдентификатоНомер%", ИдЗапроса);
				КонецЕсли;
				
				ТекстСообщения = ТекстСообщения 
				+ Символы.ПС
				+ НСтр("ru = 'Не удалось проверить статус документа %ОбрабатываемыйДокумент%.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбрабатываемыйДокумент%", Документ);
				
				Возврат ТекстСообщения;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Прервать;
		
	КонецЦикла;
	
КонецФункции

Функция ПодтвердитьВходящиеАкты_СозданиеТитулов_ИСЦЭДМ(Знач КоллекцияСгруппированныхДокументовИСЦЭДМ) Экспорт
	
	Возврат СозданиеТитуловИСЦЭДМ(КоллекцияСгруппированныхДокументовИСЦЭДМ, 0);
	
КонецФункции

Функция ОтклонитьВходящиеАкты_СозданиеТитулов_ИСЦЭДМ(Знач КоллекцияСгруппированныхДокументовИСЦЭДМ) Экспорт
	
	Возврат СозданиеТитуловИСЦЭДМ(КоллекцияСгруппированныхДокументовИСЦЭДМ, 1);
	
КонецФункции

Процедура ПодтвердитьВходящиеАкты_ПодписьТитуловЗавершение_ИСЦЭДМ(Знач КоллекцияСгруппированныхДокументовИСЦЭДМ) Экспорт
	
	ПодтвердитьОтклонитьОтозватьАкт_ПодписьТитуловЗавершение_ИСЦЭДМ(КоллекцияСгруппированныхДокументовИСЦЭДМ);
		
КонецПроцедуры

Процедура ОтклонитьВходящиеАкты_ПодписьТитуловЗавершение_ИСЦЭДМ(Знач НоваяКоллекцияСгруппированныхДокументовИСЦЭДМ) Экспорт
	
	ПодтвердитьОтклонитьОтозватьАкт_ПодписьТитуловЗавершение_ИСЦЭДМ(НоваяКоллекцияСгруппированныхДокументовИСЦЭДМ);
		
КонецПроцедуры

#КонецОбласти

#Область ВводВОборот

Процедура СоздатьИсходящиеУведомленияОВводеВОборотИСЦЭДМ(Знач МассивДокументов) Экспорт
	
	АдресРесурса 	  = "apiUot/api/v1/private/create-doc";
	РезультатОтправки = Новый Соответствие;
	ТокенАвторизации  = ИнтерфейсИСМПТК.ПолучитьТокенАвторизацииИСЦЭДМ(МассивДокументов[0].Организация);
	
	Для каждого ДокументИзМассива Из МассивДокументов Цикл
	
		СтруктураУведомления = Новый Структура;
		СтруктураУведомления.Вставить("docType", "5");
		
		Если ЗначениеЗаполнено(ДокументИзМассива.ПоставщикСкладЦЭДМИдентификационныйНомер) Тогда 
			СтруктураУведомления.Вставить("senderBin", ДокументИзМассива.ПоставщикСкладЦЭДМИдентификационныйНомер);
		Иначе 
			СтруктураУведомления.Вставить("senderBin", ДокументИзМассива.ПоставщикИдентификационныйНомер);
		КонецЕсли;
		
		СтруктураУведомления.Вставить("ReasonIntroduce", "1");

		СтруктураУведомления.Вставить("docName", ДокументИзМассива.ДокументОснованиеНаименование);
		СтруктураУведомления.Вставить("docNum",  ДокументИзМассива.ДокументОснованиеНомер);
		СтруктураУведомления.Вставить("docDate", Формат(ДокументИзМассива.ДокументОснованиеДата, "ДФ=гггг-ММ-дд"));
		
		СтруктураУведомления.Вставить("comment", ДокументИзМассива.Комментарий);
		СтруктураУведомления.Вставить("addInfo", Неопределено);

		МассивКодовМаркировки = Новый Массив;
		Для каждого Стр Из ДокументИзМассива.Марки Цикл 
			МассивКодовМаркировки.Добавить(Стр.КодИдентификации);
		КонецЦикла;

		СтруктураУведомления.Вставить("codes", МассивКодовМаркировки);
	
		СтруктураПередачиДанных = Новый Структура;
		СтруктураПередачиДанных.Вставить("commoditygroup", "pharma");
		СтруктураПередачиДанных.Вставить("document", СтруктураУведомления);

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, СтруктураПередачиДанных);
		ТекстОтправки = ЗаписьJSON.Закрыть();
		
		Заголовки = Новый Соответствие();
		
		РезультатВыполненияНаСервере = ВыполнитьМетодСервера(АдресРесурса, Заголовки, Неопределено, ТекстОтправки,, ТокенАвторизации, Ложь);
		РезультатОтправки.Вставить(ДокументИзМассива, РезультатВыполненияНаСервере); 
		
	КонецЦикла;
	
	// Обновим статусы отправленных и заполняем идентификаторы после завершения отправки всех документов
	ОбновитьДокументыПослеОтправкиЧерновика(РезультатОтправки);
	
КонецПроцедуры

#КонецОбласти

#Область ВыводИзОборота

Процедура СоздатьИсходящиеУведомленияОВыводеИзОборотаИСЦЭДМ(Знач МассивДокументов) Экспорт
	
	АдресРесурса 	  = "apiUot/api/v1/private/create-doc";
	РезультатОтправки = Новый Соответствие;
	ТокенАвторизации  = ИнтерфейсИСМПТК.ПолучитьТокенАвторизацииИСЦЭДМ(МассивДокументов[0].Организация);
	
	Для каждого ДокументИзМассива Из МассивДокументов Цикл
	
		СтруктураУведомления = Новый Структура;
		СтруктураУведомления.Вставить("docType", "4"); 
		
		Если ЗначениеЗаполнено(ДокументИзМассива.ПоставщикСкладЦЭДМИдентификационныйНомер) Тогда
			СтруктураУведомления.Вставить("senderBin", ДокументИзМассива.ПоставщикСкладЦЭДМИдентификационныйНомер);
		Иначе
			СтруктураУведомления.Вставить("senderBin", ДокументИзМассива.ПоставщикИдентификационныйНомер);
		КонецЕсли;
		
		ПричинаВыводаИзОборота = ПолучитьПричинуВыводаИзОборота(ДокументИзМассива.ПричинаВыводаИзОборота);
		
		СтруктураУведомления.Вставить("ReasonWithdrawal", ПричинаВыводаИзОборота);

		СтруктураУведомления.Вставить("docName", ДокументИзМассива.ДокументОснованиеНаименование);
		СтруктураУведомления.Вставить("docNum",  ДокументИзМассива.ДокументОснованиеНомер);
		СтруктураУведомления.Вставить("docDate", Формат(ДокументИзМассива.ДокументОснованиеДата, "ДФ=гггг-ММ-дд"));

		СтруктураУведомления.Вставить("comment", ДокументИзМассива.Комментарий);
		СтруктураУведомления.Вставить("addInfo", Неопределено);

		МассивКодовМаркировки = Новый Массив;
		Для каждого Стр Из ДокументИзМассива.Марки Цикл 
			МассивКодовМаркировки.Добавить(Стр.КодИдентификации);
		КонецЦикла;

		СтруктураУведомления.Вставить("codes", МассивКодовМаркировки);
	
		СтруктураОтправкиДанных = Новый Структура;
		СтруктураОтправкиДанных.Вставить("commoditygroup", "pharma"); 
		СтруктураОтправкиДанных.Вставить("document", СтруктураУведомления);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, СтруктураОтправкиДанных);
		
		ТекстОтправки = ЗаписьJSON.Закрыть(); 
		
		Заголовки = Новый Соответствие();
		
		РезультатВыполненияНаСервере = ВыполнитьМетодСервера(АдресРесурса, Заголовки, Неопределено, ТекстОтправки,, ТокенАвторизации, Ложь);
		РезультатОтправки.Вставить(ДокументИзМассива, РезультатВыполненияНаСервере); 
		
	КонецЦикла;
	
	
	// Обновим статусы отправленных и заполняем идентификаторы после завершения отправки всех документов
	ОбновитьДокументыПослеОтправкиЧерновика(РезультатОтправки);
	
КонецПроцедуры

#КонецОбласти 

#Область Агрегация_ИСЦЭДМ

Процедура ОбновитьСтатусыДокументовАгрегаци(РезультатОтправкиДокументов) Экспорт
	
	Для Каждого РезультатОтправки Из РезультатОтправкиДокументов Цикл
		ИнформацияОбОшибке = Неопределено;
		Если ЭтоОшибкаИСЦЭДМ(РезультатОтправки.Значение, ИнформацияОбОшибке) Тогда
			
			ЗаполнитьОшибкиДокумента(РезультатОтправки.Ключ, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
			ТекстСообщения = НСтр("ru = 'При отправке документа %1 со стороны сервера получена ошибка: '") 
						   + Символы.ПС 
						   + ИнформацияОбОшибке.ПодробноеПредставление;
			ИдЗапроса = "";
			Если РезультатОтправки.Значение.Свойство("ИдентификаторЗапроса", ИдЗапроса) Тогда 
				ТекстСообщения = ТекстСообщения 
							   + Символы.ПС
							   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИдентификаторЗапросаКСерверу();
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИдентификатоНомер%", ИдЗапроса);
			КонецЕсли;
			
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, РезультатОтправки.Ключ);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
			ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
			ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьСтатусыДокументовАгрегаци");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			//Очистить статус и идентификатор документа
			ДокОбъект = РезультатОтправки.Ключ.ПолучитьОбъект();
			ДокОбъект.Статус = Перечисления.СтатусыДокументовИСЦЭДМ.НеОпределен;
			ДокОбъект.Идентификатор = "";
			
			Попытка
				ДокОбъект.Записать();
			Исключение
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьОчиститьИдентификаторДокумента();
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбрабатываемыйДокумент%", РезультатОтправки.Ключ);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецПопытки;
			
			Продолжить;
			
		Иначе
			//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
			ОчиститьОшибкиДокумента(РезультатОтправки.Ключ);
		КонецЕсли;
		
		РазобранныеДанные = ОбщегоНазначенияИСМПТК.ПреобразоватьJSON_В_МассивСтруктур(РезультатОтправки.Значение.ТекстОтвета);
		ТипДокумента = ТипЗнч(РезультатОтправки.Ключ);
		
		// меняем статус документа
		Если РазобранныеДанные.code = "200" Тогда
			
			Если РаботаСДокументамиИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанныхИСЦЭДМ() Тогда
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументУспешноОбновленПоДаннымСервера();
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеСервера%", РаботаСТекстамиИСМПТККлиентСервер.НаименованиеИСЦЭДМ());
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			УстановитьСтатусДокументу(РезультатОтправки.Ключ, Перечисления.СтатусыДокументовИСЦЭДМ.Принят, РазобранныеДанные.id_doc)
			
		ИначеЕсли РазобранныеДанные.code = "500" Тогда
			Комментарий = ?(СтрНайти(ДокОбъект.Комментарий, РазобранныеДанные.message)= 0, ДокОбъект.Комментарий + РазобранныеДанные.message, ДокОбъект.Комментарий);			
			УстановитьСтатусДокументу(РезультатОтправки.Ключ, Перечисления.СтатусыДокументовИСЦЭДМ.НеОпределен, , Комментарий)
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСтатусДокументу(Документ, Статус, Идентификатор = "", Комментарий = "", Направление = Неопределено) Экспорт
	
	ДокОбъект = Документ.ПолучитьОбъект();
	ДокОбъект.Статус = Статус;
	
	ТипДокумента = ТипЗнч(ДокОбъект.Ссылка);
	Если ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("ИспользоватьЭтапыОформленияДокументовИСЦЭДМ") Тогда
		Если ТипДокумента = Тип("ДокументСсылка.АктПриемаПередачиИСЦЭДМ")
			Или ТипДокумента = Тип("ДокументСсылка.УведомлениеОВыводеИзОборотаИСЦЭДМ")
			Или ТипДокумента = Тип("ДокументСсылка.УведомлениеОВводеВОборотИСЦЭДМ")
			Или ТипДокумента = Тип("ДокументСсылка.АктВнутреннегоПеремещенияИСЦЭДМ") Тогда
			ДокОбъект.ЭтапОформления = ПредопределенноеЗначение("Перечисление.ЭтапыОформленияДокументовИСЦЭДМ.Отправлен");
		КонецЕсли;
	КонецЕсли;
	
	Если ТипДокумента = Тип("ДокументСсылка.АктВнутреннегоПеремещенияИСЦЭДМ")
		Или ТипДокумента = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСЦЭДМ") Тогда 
		ДокОбъект.СтатусСверкиТоваров = Перечисления.СтатусыСверкиПолученныхКодовИСЦЭДМ.СверкаНеВыполнялась;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда 
		ДокОбъект.Идентификатор = Идентификатор;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Комментарий) Тогда 
		ДокОбъект.Комментарий = Идентификатор;
	КонецЕсли;  
	
	Если ЗначениеЗаполнено(Направление) Тогда 
		ДокОбъект.Направление = Направление;
	КонецЕсли;
	
	Попытка
		ДокОбъект.Записать();
	Исключение
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьИзменитьСтатусДокумента();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбрабатываемыйДокумент%", Документ);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Функция ПодготовитьДанныеПоДокументамАгрегации(МассивДокументов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АгрегацияВнеПроизводстваИСЦЭДМУпаковки.КодИдентификации КАК КИ,
	|	АгрегацияВнеПроизводстваИСЦЭДМУпаковки.Ссылка.КодАгрегата КАК КодАгрегата,
	|	АгрегацияВнеПроизводстваИСЦЭДМУпаковки.Ссылка.УровеньУпаковки КАК УровеньУпаковки
	|ИЗ
	|	Документ.АгрегацияВнеПроизводстваИСЦЭДМ.АгрегированныеКМ КАК АгрегацияВнеПроизводстваИСЦЭДМУпаковки
	|ГДЕ
	|	АгрегацияВнеПроизводстваИСЦЭДМУпаковки.Ссылка В(&МассивДокументов)
	|ИТОГИ ПО
	|	КодАгрегата";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Возврат Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить данные для отправки'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область АктВнутреннегоПеремещения_ИСЦЭДМ

Процедура СоздатьИсходящиеАктыВнутреннегоПеремещенияИСЦЭДМ(Знач МассивДокументов) Экспорт
	
	АдресРесурса = "apiUot/api/v1/private/create-doc";
	РезультатОтправки 	= Новый Соответствие;
	ТокенАвторизации 	= ИнтерфейсИСМПТК.ПолучитьТокенАвторизацииИСЦЭДМ(МассивДокументов[0].Организация);
	РеквизитыЕдиногоДистрибьютера 	= ИнтеграцияИСМПТКПереопределяемый.ПолучитьРеквизитыОрганизацииКонтрагента(Константы.ЕдиныйДистрибьюторЛСИСЦЭДМ.Получить(), "Дистрибьютор");
	
	Для каждого ДокументИзМассива Из МассивДокументов Цикл
		
		СтруктураДокумента = Новый Структура;
		
		Если ДокументИзМассива.ВидОперации = Перечисления.ХозяйственныеОперацииИСЦЭДМ.ВнутреннееПеремещение Тогда
			СтруктураДокумента.Вставить("docType", "6");
		ИначеЕсли ДокументИзМассива.ВидОперации = Перечисления.ХозяйственныеОперацииИСЦЭДМ.ВнутреннееПеремещениеЕД Тогда //от Единого дистрибьютора
			СтруктураДокумента.Вставить("docType", "7");
			СтруктураДокумента.Вставить("ownerBin", РеквизитыЕдиногоДистрибьютера.ДистрибьюторИдентификационныйНомер);
		КонецЕсли;
		
		СтруктураДокумента.Вставить("senderBin",	ДокументИзМассива.ПоставщикИдентификационныйНомер);

		СтруктураДокумента.Вставить("receiverBin",	ДокументИзМассива.ПолучательИдентификационныйНомер);
		
		СтруктураДокумента.Вставить("paperNum", ?(ЗначениеЗаполнено(ДокументИзМассива.РегНомерНаБумажномНосителе), 
																ДокументИзМассива.РегНомерНаБумажномНосителе, Неопределено));
																
		СтруктураДокумента.Вставить("paperDate", ?(ЗначениеЗаполнено(ДокументИзМассива.ДатаВыпискиНаБумажномНосителе), 
																Формат(ДокументИзМассива.ДатаВыпискиНаБумажномНосителе, "ДФ=гггг-ММ-дд"), Неопределено));

		СтруктураДокумента.Вставить("comment", ДокументИзМассива.Комментарий);
		СтруктураДокумента.Вставить("addInfo", Неопределено);

		МассивКодовМаркировки = Новый Массив;
		Для каждого Стр Из ДокументИзМассива.Марки Цикл 
			МассивКодовМаркировки.Добавить(Стр.КодИдентификации);
		КонецЦикла;

		СтруктураДокумента.Вставить("codes", МассивКодовМаркировки);
	
		СтруктураОтправкиДанных = Новый Структура;
		СтруктураОтправкиДанных.Вставить("commoditygroup", "pharma"); 
		СтруктураОтправкиДанных.Вставить("document", СтруктураДокумента);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, СтруктураОтправкиДанных);
		
		ТекстОтправки = ЗаписьJSON.Закрыть(); 
		
		Заголовки = Новый Соответствие();
		
		РезультатВыполненияНаСервере = ВыполнитьМетодСервера(АдресРесурса, Заголовки, Неопределено, ТекстОтправки,, ТокенАвторизации, Ложь);
		РезультатОтправки.Вставить(ДокументИзМассива, РезультатВыполненияНаСервере); 
		
	КонецЦикла;
	
	// Обновим статусы отправленных и заполняем идентификаторы после завершения отправки всех документов
	ОбновитьДокументыПослеОтправкиЧерновика(РезультатОтправки);
	
КонецПроцедуры

#КонецОбласти 

#Область ОтчетОПередачеКИОтНерезидентаРК_ИСЦЭДМ

Процедура СоздатьИсходящиеОтчетыОПередачеКИОтНерезидентаРКИСЦЭДМ(Знач МассивДокументов) Экспорт
	
	АдресРесурса 	  = "apiUot/api/v1/private/create-doc";
	РезультатОтправки = Новый Соответствие;
	ТокенАвторизации  = ИнтерфейсИСМПТК.ПолучитьТокенАвторизацииИСЦЭДМ(МассивДокументов[0].Организация);
	
	Для каждого ДокументИзМассива Из МассивДокументов Цикл
		
		Если ЗначениеЗаполнено(ДокументИзМассива.Идентификатор) Тогда 
			//Документ уже отправлен на сервер
			Продолжить;
		КонецЕсли;
		
		СтруктураДокумента = Новый Структура;
		СтруктураДокумента.Вставить("docType", "11");
		
		Если ЗначениеЗаполнено(ДокументИзМассива.ПоставщикСкладЦЭДМИдентификационныйНомер) Тогда
			СтруктураДокумента.Вставить("senderBin", ДокументИзМассива.ПоставщикСкладЦЭДМИдентификационныйНомер);
		Иначе 
			СтруктураДокумента.Вставить("senderBin", ДокументИзМассива.ПоставщикИдентификационныйНомер);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументИзМассива.ПолучательСкладЦЭДМИдентификационныйНомер) Тогда
			СтруктураДокумента.Вставить("receiverBin", ДокументИзМассива.ПолучательСкладЦЭДМИдентификационныйНомер);
		Иначе 
			СтруктураДокумента.Вставить("receiverBin", ДокументИзМассива.ПолучательИдентификационныйНомер);
		КонецЕсли;
		
		СтруктураДокумента.Вставить("countryCode",   РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьКодСтраныДляУведомленияОввозе(ДокументИзМассива.СтранаОтправления));
		СтруктураДокумента.Вставить("shipment_date", Формат(ДокументИзМассива.ДатаОтгрузки, "ДФ=гггг-ММ-дд"));
		СтруктураДокумента.Вставить("paperNum",  	 ДокументИзМассива.РегНомерНаБумажномНосителе);
		СтруктураДокумента.Вставить("paperDate", 	 Формат(ДокументИзМассива.ДатаВыпискиНаБумажномНосителе, "ДФ=гггг-ММ-дд"));
		СтруктураДокумента.Вставить("addInfo",   	 Неопределено);

		МассивКодовМаркировки = Новый Массив;
		Для каждого Стр Из ДокументИзМассива.Марки Цикл 
			МассивКодовМаркировки.Добавить(Стр.КодИдентификации);
		КонецЦикла;

		СтруктураДокумента.Вставить("codes", МассивКодовМаркировки);
	
		СтруктураОтправкиДанных = Новый Структура;
		СтруктураОтправкиДанных.Вставить("commoditygroup", "pharma"); 
		СтруктураОтправкиДанных.Вставить("document", 	   СтруктураДокумента);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, СтруктураОтправкиДанных);
		
		ТекстОтправки = ЗаписьJSON.Закрыть(); 
		
		Заголовки = Новый Соответствие();
		РезультатВыполненияНаСервере = ВыполнитьМетодСервера(АдресРесурса, Заголовки, Неопределено, ТекстОтправки,, ТокенАвторизации, Ложь);
		РезультатОтправки.Вставить(ДокументИзМассива, РезультатВыполненияНаСервере); 
		
	КонецЦикла;
	
	// Обновим статусы отправленных и заполняем идентификаторы после завершения отправки всех документов
	ОбновитьДокументыПослеОтправкиЧерновика(РезультатОтправки);
	
КонецПроцедуры

#КонецОбласти  

#Область СоздатьИсходящиеУведомленияОВвозеИзЕАЭС_ИСЦЭДМ

Процедура СоздатьИсходящиеУведомленияОВвозеИзЕАЭСИСЦЭДМ(Знач МассивДокументов) Экспорт
	
	АдресРесурса = "apiUot/api/v1/private/create-doc";
	РезультатОтправки 	= Новый Соответствие;
	ТокенАвторизации 	= ИнтерфейсИСМПТК.ПолучитьТокенАвторизацииИСЦЭДМ(МассивДокументов[0].Организация);
	
	Для каждого ДокументИзМассива Из МассивДокументов Цикл
		
		Если ЗначениеЗаполнено(ДокументИзМассива.Идентификатор) Тогда 
			//Документ уже отправлен на сервер
			Продолжить;
		КонецЕсли;
		
		СтруктураДокумента = Новый Структура;
		СтруктураДокумента.Вставить("docType", "2");
		
		СтруктураДокумента.Вставить("supplierID",	ДокументИзМассива.ПоставщикИдентификационныйНомер); 
		СтруктураДокумента.Вставить("supplierName",	ДокументИзМассива.ПоставщикНаименование);
		
		Если ЗначениеЗаполнено(ДокументИзМассива.ПолучательСкладЦЭДМИдентификационныйНомер) Тогда
			СтруктураДокумента.Вставить("receiverBin",	ДокументИзМассива.ПолучательСкладЦЭДМИдентификационныйНомер);
		Иначе 
			СтруктураДокумента.Вставить("receiverBin",	ДокументИзМассива.ПолучательИдентификационныйНомер);
		КонецЕсли;
		
		СтруктураДокумента.Вставить("countryCodeEAEU",
									РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьКодСтраныДляУведомленияОввозе(ДокументИзМассива.СтранаОтправления));
		СтруктураДокумента.Вставить("docDate", 
									?(ЗначениеЗаполнено(ДокументИзМассива.ДатаВыпискиНаБумажномНосителе), 
									Формат(ДокументИзМассива.ДатаВыпискиНаБумажномНосителе, 
									"ДФ=гггг-ММ-дд"), Неопределено));
		СтруктураДокумента.Вставить("docNum", 
									?(ЗначениеЗаполнено(ДокументИзМассива.РегНомерНаБумажномНосителе),
									ДокументИзМассива.РегНомерНаБумажномНосителе,
									Неопределено));

		СтруктураДокумента.Вставить("addInfo", Неопределено);
		СтруктураДокумента.Вставить("comment", ДокументИзМассива.Комментарий);

		МассивКодовМаркировки = Новый Массив;
		Для каждого Стр Из ДокументИзМассива.Марки Цикл 
			МассивКодовМаркировки.Добавить(Стр.КодИдентификации);
		КонецЦикла;

		СтруктураДокумента.Вставить("codes", МассивКодовМаркировки);
	
		СтруктураОтправкиДанных = Новый Структура;
		СтруктураОтправкиДанных.Вставить("commoditygroup", "pharma"); 
		СтруктураОтправкиДанных.Вставить("document", 	   СтруктураДокумента);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, СтруктураОтправкиДанных);
		
		ТекстОтправки = ЗаписьJSON.Закрыть(); 
		Заголовки 	  = Новый Соответствие();
		РезультатВыполненияНаСервере = ВыполнитьМетодСервера(АдресРесурса, Заголовки, Неопределено, ТекстОтправки,, ТокенАвторизации, Ложь);
		РезультатОтправки.Вставить(ДокументИзМассива, РезультатВыполненияНаСервере); 
		
	КонецЦикла;
	
	// Обновим статусы отправленных и заполняем идентификаторы после завершения отправки всех документов
	ОбновитьДокументыПослеОтправкиЧерновика(РезультатОтправки);
	
КонецПроцедуры

#КонецОбласти

#Область СоздатьИсходящиеУведомленияОВвозеИзТретьихСтран_ИСЦЭДМ

Процедура СоздатьИсходящиеУведомленияОВвозеИзТретьихСтранИСЦЭДМ(Знач МассивДокументов) Экспорт
	
	АдресРесурса = "apiUot/api/v1/private/create-doc";
	РезультатОтправки 	= Новый Соответствие;
	ТокенАвторизации 	= ИнтерфейсИСМПТК.ПолучитьТокенАвторизацииИСЦЭДМ(МассивДокументов[0].Организация);
	
	Для каждого ДокументИзМассива Из МассивДокументов Цикл
		
		Если ЗначениеЗаполнено(ДокументИзМассива.Идентификатор) Тогда 
			//Документ уже отправлен на сервер
			Продолжить;
		КонецЕсли;
		
		СтруктураДокумента = Новый Структура;
		СтруктураДокумента.Вставить("docType", "3");
		
		Если ЗначениеЗаполнено(ДокументИзМассива.ПолучательСкладЦЭДМИдентификационныйНомер) Тогда
			СтруктураДокумента.Вставить("receiverBin",	ДокументИзМассива.ПолучательСкладЦЭДМИдентификационныйНомер);
		Иначе 
			СтруктураДокумента.Вставить("receiverBin",	ДокументИзМассива.ПолучательИдентификационныйНомер);
		КонецЕсли;
		
		СтруктураДокумента.Вставить("countryCode", 
											РаботаСДокументамиИСМПТКПереопределяемый.ПолучитьКодСтраныДляУведомленияОввозе(ДокументИзМассива.СтранаОтправления));
											
		Если ДокументИзМассива.ТипДокументаТаможенногоОформления = Перечисления.ТипДокументаТаможенногоОформленияИСМПТК.ДекларацияНаТовары Тогда
			СтруктураДокумента.Вставить("docTypeCustom", "DECLARATION");
		ИначеЕсли ДокументИзМассива.ТипДокументаТаможенногоОформления = Перечисления.ТипДокументаТаможенногоОформленияИСМПТК.ЗаявлениеОВыпускеТоваров Тогда
			СтруктураДокумента.Вставить("docTypeCustom", "STATEMENT");
		КонецЕсли;
		
		СтруктураДокумента.Вставить("regNumDoc", ДокументИзМассива.НомерДокументаТаможенногоОформления);
		СтруктураДокумента.Вставить("regDateDoc", Формат(ДокументИзМассива.ДатаДокументаТаможенногоОформления, "ДФ=гггг-ММ-дд"));
		
		СтруктураДокумента.Вставить("decisionCode", ДокументИзМассива.КодРешенияТаможенногоОргана);
		СтруктураДокумента.Вставить("decisionDate", Формат(ДокументИзМассива.ДатаВремяПринятияРешения, "ДФ=гггг-ММ-дд"));
		СтруктураДокумента.Вставить("decisionTime", Формат(ДокументИзМассива.ДатаВремяПринятияРешения, "ДФ=ЧЧ:мм"));
		
		СтруктураДокумента.Вставить("customsCode", ДокументИзМассива.КодТаможенногоОргана);
		
		ДокументыСоответствия = ДокументИзМассива.ДокументыСоответствия;
		
		Если Не ДокументыСоответствия.Количество() = 0 Тогда
			СтруктураДокумента.Вставить("documentType", ДокументыСоответствия[0].ТипДокумента);
			СтруктураДокумента.Вставить("documentNum",  ДокументыСоответствия[0].НомерДокумента);
			СтруктураДокумента.Вставить("documentDate", Формат(ДокументыСоответствия[0].ДатаДокумента, "ДФ=гггг-ММ-дд"));
		Иначе
			СтруктураДокумента.Вставить("documentType", "");
			СтруктураДокумента.Вставить("documentNum",  "");
			СтруктураДокумента.Вставить("documentDate", Формат(Дата(1, 1, 1, 0, 0, 0), "ДФ=гггг-ММ-дд"));
		КонецЕсли;
											
		СтруктураДокумента.Вставить("paperDate", ?(ЗначениеЗаполнено(ДокументИзМассива.ДатаВыпискиНаБумажномНосителе), 
													Формат(ДокументИзМассива.ДатаВыпискиНаБумажномНосителе, "ДФ=гггг-ММ-дд"), Неопределено));
		СтруктураДокумента.Вставить("paperNum", ?(ЗначениеЗаполнено(ДокументИзМассива.РегНомерНаБумажномНосителе), ДокументИзМассива.РегНомерНаБумажномНосителе, Неопределено));

		СтруктураДокумента.Вставить("addInfo", Неопределено);
		СтруктураДокумента.Вставить("comment", ДокументИзМассива.Комментарий);

		МассивКодовМаркировки = Новый Массив;
		Для каждого Стр Из ДокументИзМассива.Марки Цикл 
			МассивКодовМаркировки.Добавить(Стр.КодИдентификации);
		КонецЦикла;

		СтруктураДокумента.Вставить("codes", МассивКодовМаркировки);
	
		СтруктураОтправкиДанных = Новый Структура;
		СтруктураОтправкиДанных.Вставить("commoditygroup", "pharma"); 
		СтруктураОтправкиДанных.Вставить("document", СтруктураДокумента);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, СтруктураОтправкиДанных);
		
		ТекстОтправки = ЗаписьJSON.Закрыть(); 
		
		Заголовки = Новый Соответствие();
		
		РезультатВыполненияНаСервере = ВыполнитьМетодСервера(АдресРесурса, Заголовки, Неопределено, ТекстОтправки,, ТокенАвторизации, Ложь);
		РезультатОтправки.Вставить(ДокументИзМассива, РезультатВыполненияНаСервере); 
		
	КонецЦикла;
	
	// Обновим статусы отправленных и заполняем идентификаторы после завершения отправки всех документов
	ОбновитьДокументыПослеОтправкиЧерновика(РезультатОтправки);

КонецПроцедуры

#КонецОбласти

Функция СоздатьДокументыКорректировки(Знач МассивДокументов) Экспорт

	АдресРесурса = "apiUot/api/v1/private/generate-discrepancy-doc";
	РезультатОтправки 	= Новый Соответствие;
	ТокенАвторизации 	= ИнтерфейсИСМПТК.ПолучитьТокенАвторизацииИСЦЭДМ(МассивДокументов[0].Организация);
	
	Для каждого ДокументИзМассива Из МассивДокументов Цикл
		
		РквизитыДокумента = ОбщегоНазначенияИСМПТК.ЗначенияРеквизитовОбъекта(ДокументИзМассива, "Организация, Идентификатор, ПолучательИдентификационныйНомер");
		
		СтруктураПередачи = Новый Структура;
		СтруктураПередачи.Вставить("documentId", Число(РквизитыДокумента.Идентификатор));

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, СтруктураПередачи);
		ТекстОтправки = ЗаписьJSON.Закрыть(); 
		
		Заголовки = Новый Соответствие();
		Заголовки.Вставить("commoditygroup", "pharma");
		Заголовки.Вставить("Innbin", РквизитыДокумента.ПолучательИдентификационныйНомер);
		
		РезультатВыполненияНаСервере = ВыполнитьМетодСервера(АдресРесурса, Заголовки, Неопределено, ТекстОтправки,, ТокенАвторизации, Ложь);
		
		//Дополним структуру для получения докуменат
		Если Не РезультатВыполненияНаСервере = Неопределено Тогда 
			ИнтеграцияИСМПТКПереопределяемый.ДополнитьСтруктуру(РезультатВыполненияНаСервере, РквизитыДокумента);
		КонецЕсли;
		
		РезультатОтправки.Вставить(ДокументИзМассива, РезультатВыполненияНаСервере); 
		
	КонецЦикла;
	
	// Обновим статусы отправленных и заполняем идентификаторы после завершения отправки всех документов
	Возврат ПолучитьСозданныеДокументыКорректировки(РезультатОтправки, ТокенАвторизации);
	
КонецФункции

Функция ПолучитьСозданныеДокументыКорректировки(РезультатОтправкиДокументов, ТокенАвторизации)
	
	МассивСозданныхДокументов = Новый Массив;
	
	Для каждого РезультатОтправки Из РезультатОтправкиДокументов Цикл
		
		Если РезультатОтправки.Значение = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ИнформацияОбОшибке = Неопределено;
		
		Если ЭтоОшибкаИСЦЭДМ(РезультатОтправки.Значение, ИнформацияОбОшибке) Тогда
			ЗаполнитьОшибкиДокумента(РезультатОтправки.Ключ, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
			ТекстСообщения = НСтр("ru = 'При создании корректировочного документа произошла ошибка: '") 
						   + Символы.ПС 
						   + ИнформацияОбОшибке.ПодробноеПредставление;
			ИдЗапроса = "";
				Если РезультатОтправки.Значение.Свойство("ИдентификаторЗапроса", ИдЗапроса) Тогда 
					ТекстСообщения = ТекстСообщения 
								   + Символы.ПС
								   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИдентификаторЗапросаКСерверу();
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИдентификатоНомер%", ИдЗапроса);
				КонецЕсли;
			
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
			ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ПолучитьСозданныеДокументыКорректировки");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		РазобранныеДанные = ОбщегоНазначенияИСМПТК.ПреобразоватьJSON_В_МассивСтруктур(РезультатОтправки.Значение.ТекстОтвета);
		
		ИдентификаторДокумента = СтрЗаменить(Строка(Строка(РазобранныеДанные.id)),Символы.НПП,"");
		
		ПрофильСозданногоДокумента = ПолучитьПрофильДокумента(ИдентификаторДокумента, РезультатОтправки.Значение.ПолучательИдентификационныйНомер, РезультатОтправки.Значение.Организация, ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОРасхожденияхИСЦЭДМ(), ТокенАвторизации);
		
		ИнформацияОбОшибке = Неопределено;
		Если ЭтоОшибкаИСЦЭДМ(ПрофильСозданногоДокумента, ИнформацияОбОшибке) Тогда
			
			ТекстСообщения = НСтр("ru = 'При получении данных профиля созданного корректировочного документа с сервера произошла ошибка: '") 
						   + Символы.ПС 
						   + ИнформацияОбОшибке.ПодробноеПредставление;
			ИдЗапроса = "";
			Если ПрофильСозданногоДокумента.Свойство("ИдентификаторЗапроса", ИдЗапроса) Тогда 
				ТекстСообщения = ТекстСообщения 
							   + Символы.ПС
							   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИдентификаторЗапросаКСерверу();
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИдентификатоНомер%", ИдЗапроса);
			КонецЕсли;
			
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
			ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ПолучитьСозданныеДокументыКорректировки");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);

		Иначе 
			
			СтруктураДокументаПолученная = ОбщегоНазначенияИСМПТК.ПреобразоватьJSON_В_МассивСтруктур(ПрофильСозданногоДокумента.ТекстОтвета); 
			
			ТипДокумента = ПолучитьТипДокументаПоИдентификатору(СтруктураДокументаПолученная.docType);
			ДанныеВходящегоДокумента = Новый Структура("Ссылка, ТипДокумента, Идентификатор", Неопределено, ТипДокумента, ИдентификаторДокумента);
			
			СозданныйДокСсылка = Неопределено;
			
			Если ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСЦЭДМ() Тогда 
				ДанныеВходящегоДокумента.Вставить("Направление", Перечисления.НаправленияДокументовИСМПТК.Исходящий);
				СозданныйДокСсылка = ЗаполнитьДокументАктППИСЦЭДМ(СтруктураДокументаПолученная, ДанныеВходящегоДокумента, РезультатОтправки.Значение.Организация);
			ИначеЕсли ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктВнутреннегоПеремещенияИСЦЭДМ() Тогда
				СозданныйДокСсылка = ЗаполнитьДокументАктВнтуреннегоПеремещенияИСЦЭДМ(СтруктураДокументаПолученная, ДанныеВходящегоДокумента, РезультатОтправки.Значение.Организация);
			ИначеЕсли ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСЦЭДМ() Тогда
				СозданныйДокСсылка = ЗаполнитьДокументУведомлениеОВвозеИзЕАЭСИСЦЭДМ(СтруктураДокументаПолученная, ДанныеВходящегоДокумента, РезультатОтправки.Значение.Организация, ТокенАвторизации);
			КонецЕсли;
			
			МассивСозданныхДокументов.Добавить(СозданныйДокСсылка);
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат МассивСозданныхДокументов;
	
КонецФункции

Функция ПолучитьТипДокументаПоИдентификатору(Идентификатор) Экспорт
	
	Если Идентификатор = "1" Или Идентификатор = "10" Тогда 
		Возврат ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСЦЭДМ();
	ИначеЕсли Идентификатор = "7" Или Идентификатор = "6" Тогда
		Возврат ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктВнутреннегоПеремещенияИСЦЭДМ();
	ИначеЕсли Идентификатор = "4" Тогда
		Возврат ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСЦЭДМ();
	ИначеЕсли Идентификатор = "5" Тогда
		Возврат ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСЦЭДМ();
	ИначеЕсли Идентификатор = "2" Тогда
		Возврат ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСЦЭДМ();
	ИначеЕсли Идентификатор = "3" Тогда
		Возврат ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСЦЭДМ();
	ИначеЕсли Идентификатор = "11" Тогда
		Возврат ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаОтчетОПередачеКИОтНерезидентаРКИСЦЭДМ();
	ИначеЕсли Идентификатор = "6000" Тогда
		Возврат ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАгрегацияВнеПроизводстваИСЦЭДМ();
	ИначеЕсли Идентификатор = "7000" Тогда
		Возврат ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОРасхожденияхИСЦЭДМ();
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#Область ИСЦЭДМ_МетодыAPI

Процедура СверитьМассивДокументов(Знач МассивДокументов, РезультатОтправки = Неопределено, ОбновитьДокументы = Истина) Экспорт 
	
	РезультатОтправки = Новый Соответствие;
	ТокенАвторизации  = ИнтерфейсИСМПТК.ПолучитьТокенАвторизацииИСЦЭДМ(МассивДокументов[0].Организация); 
	
	ДанныеДляСверки   = ПолучитьДанныеСверкиКодов(МассивДокументов);
	РезультатОтправки = Новый Соответствие;
	
	Если Не ДанныеДляСверки = Неопределено Тогда 
		
		Пока ДанныеДляСверки.Следующий() Цикл 
			
			БИНОрганизации = ДанныеДляСверки.ИдентификационныйНомер;
			СтруктурнаяЕдиница = ДанныеДляСверки.Организация;
			ИДДокумента	= ДанныеДляСверки.Идентификатор;
			
			МассивКИ = Новый Массив;
			
			ВыборкаПоКодам = ДанныеДляСверки.Выбрать();
			Пока ВыборкаПоКодам.Следующий() Цикл 
				МассивКИ.Добавить(ВыборкаПоКодам.КодИдентификации);
			КонецЦикла;
			
			РезультатСверки = СверитьКИВходящегоДокумента(БИНОрганизации, СтруктурнаяЕдиница, ИДДокумента, МассивКИ, ТокенАвторизации); 
			РезультатОтправки.Вставить(ДанныеДляСверки.Ссылка, РезультатСверки);

		КонецЦикла;
		
	КонецЕсли;
	
	Если ОбновитьДокументы Тогда
		ОбновитьДокументыПослеСверки(РезультатОтправки);
	КонецЕсли;
	
КонецПроцедуры 

Функция ПолучитьДанныеСверкиКодов(МассивДокументов)
	
	ТипДокумента = РаботаСДокументамиИСМПТК.ОпределитьТипДокументаПоСсылке(МассивДокументов[0]);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДокументСверки.Ссылка.Идентификатор КАК Идентификатор,
	|	&КодИдентификации КАК ИдентификационныйНомер,
	|	ДокументСверки.Ссылка.ПолучательИдентификационныйНомер КАК БИН,
	|	ДокументСверки.КодИдентификации КАК КодИдентификации,
	|	ДокументСверки.Ссылка КАК Ссылка,
	|	ДокументСверки.Ссылка.Организация КАК Организация
	|ИЗ
	|	Документ." + ТипДокумента + ".РезультатСверки КАК ДокументСверки
	|ГДЕ
	|	ДокументСверки.Ссылка В(&МассивДокументов)
	|ИТОГИ ПО
	|	Ссылка";
	
	Если ТипДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСЦЭДМ() Тогда
		
		ТекстКодаИД = "ВЫБОР
		|		КОГДА НЕ ДокументСверки.Ссылка.ПолучательСкладЦЭДМИдентификационныйНомер = """"
		|			ТОГДА ДокументСверки.Ссылка.ПолучательСкладЦЭДМИдентификационныйНомер
		|		ИНАЧЕ ДокументСверки.Ссылка.ПолучательИдентификационныйНомер
		|	КОНЕЦ";
		
	Иначе 
		
		ТекстКодаИД = "ДокументСверки.Ссылка.ПолучательИдентификационныйНомер";
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КодИдентификации", ТекстКодаИД);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 
		Возврат Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ОбновитьДокументыПослеСверки(МассивРезультатовОтправки)
	
	Для Каждого РезультатОтправки Из МассивРезультатовОтправки Цикл
		ИнформацияОбОшибке = Неопределено;
		Если ЭтоОшибкаИСЦЭДМ(РезультатОтправки.Значение, ИнформацияОбОшибке) Тогда
			
			ЗаполнитьОшибкиДокумента(РезультатОтправки.Ключ, ИнформацияОбОшибке.ПодробноеПредставление, Истина);
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОбновленииДокументаССервера() + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			ИдЗапроса = "";
			Если РезультатОтправки.Значение.Свойство("ИдентификаторЗапроса", ИдЗапроса) Тогда 
				ТекстСообщения = ТекстСообщения 
							   + Символы.ПС 
							   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИдентификаторЗапросаКСерверу();
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИдентификатоНомер%", ИдЗапроса);
			КонецЕсли;
			
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
			ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ОбновитьДокументыПослеСверки");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			
			//Очистить статус и идентификатор документа
			ДокОбъект = РезультатОтправки.Ключ.ПолучитьОбъект();
			ДокОбъект.СтатусСверкиТоваров = Перечисления.СтатусыСверкиПолученныхКодовИСЦЭДМ.СверкаНеВыполнялась;
			Попытка
				ДокОбъект.Записать();
			Исключение
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьОчиститьИдентификаторДокумента();
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбрабатываемыйДокумент%", РезультатОтправки.Ключ);
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецПопытки;
			
			Продолжить;
		Иначе
			//все прошло успешно, на всякий случай очищаем ТЧ ошибки, если они были ранее
			Если РаботаСДокументамиИСМПТКПереопределяемый.ВыводитьПодробнуюИнформациюПриЗагрузкеДанныхИСЦЭДМ() Тогда
				ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияДокументУспешноОбновленПоДаннымСервера();
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеСервера%", РаботаСТекстамиИСМПТККлиентСервер.НаименованиеИСЦЭДМ());
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			ОчиститьОшибкиДокумента(РезультатОтправки.Ключ);
		КонецЕсли;
		
		РазобранныеДанные = ОбщегоНазначенияИСМПТК.ПреобразоватьJSON_В_МассивСтруктур(РезультатОтправки.Значение.ТекстОтвета);
		
		СтатусСверки = Перечисления.СтатусыСверкиПолученныхКодовИСЦЭДМ.СверкаВыполненаРасхожденийНеОбнаружено;
		
		Если (РазобранныеДанные.Свойство("marksNew") И Не РазобранныеДанные.marksNew.Количество() = 0)
			Или (РазобранныеДанные.Свойство("unknownElements") И Не РазобранныеДанные.unknownElements.Количество() = 0) Тогда 
			
			СтатусСверки = Перечисления.СтатусыСверкиПолученныхКодовИСЦЭДМ.СверкаВыполненаЕстьРасхождения;
			
		КонецЕсли;
		
		УстановитьСтатусСверкиДокумента(РезультатОтправки.Ключ, СтатусСверки);
		
	КонецЦикла;
	
КонецФункции 

Процедура УстановитьСтатусСверкиДокумента(Документ, Статус, Идентификатор = "", Комментарий = "") Экспорт
	
	ДокОбъект = Документ.ПолучитьОбъект();
	ДокОбъект.СтатусСверкиТоваров = Статус;
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда 
		ДокОбъект.Идентификатор = Идентификатор;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Комментарий) Тогда 
		ДокОбъект.Комментарий = Идентификатор;
	КонецЕсли;
	
	Попытка
		ДокОбъект.Записать();
	Исключение
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияНеУдалосьИзменитьСтатусДокумента();
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбрабатываемыйДокумент%", Документ);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьОшибкиJSON_ИСЦЭДМ(ТекстОшибки, ИнформацияОбОшибке) Экспорт
	
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТекстОшибки);
		
		Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение НСтр("ru = 'Не получен ответ от сервера (ошибка 404).'");
		КонецЕсли;
		
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON);
		СвойстваОбъектXDTO = ОбъектXDTO.Свойства();
		Свойство_message = СвойстваОбъектXDTO.Получить("message");
		Если Свойство_message = Неопределено Тогда 
			ИнформацияОбОшибке.ПодробноеПредставление = НСтр("ru = 'Не получен ответ от сервера.'");	
		Иначе 
			ИнформацияОбОшибке.ПодробноеПредставление = ОбъектXDTO.message;
		КонецЕсли;
	Исключение
		ПредставлениеОшибки = ИнформацияОбОшибке();
		ТекстОшибки = НСтр("ru='Ошибка при чтении ответа сервера: %ТекстОшибки%'"); 
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТекстОшибки%", ПредставлениеОшибки.Описание);
		
		Если Не ПредставлениеОшибки.Причина = Неопределено Тогда 
			ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru='Возникла ошибка по причине: '") + ПредставлениеОшибки.Причина.Описание;
		КонецЕсли; 
		ИнформацияОбОшибке.ПодробноеПредставление = ТекстОшибки;
	КонецПопытки;
	
КонецПроцедуры

Функция ЭтоОшибкаИСЦЭДМ(РезультатОперации, ИнформацияОбОшибке = Неопределено) Экспорт
	
	ИнформацияОбОшибке = Новый Структура("ПодробноеПредставление");
	КодСостояния = РезультатОперации.КодСостояния;
	Результат = Истина;
	Если КодСостояния = 200 ИЛИ КодСостояния = 201 ИЛИ КодСостояния = 202 Тогда
		//коды успешного выполнения запроса
		Результат = Ложь;
	ИначеЕсли КодСостояния = 400 Тогда
		ОбработатьОшибкиJSON_ИСЦЭДМ(РезультатОперации.ТекстОтвета, ИнформацияОбОшибке);
		Результат = Истина;
	ИначеЕсли КодСостояния = 401 Тогда
		ОбработатьОшибкиJSON_ИСЦЭДМ(РезультатОперации.ТекстОтвета, ИнформацияОбОшибке);
		Результат = Истина;
	ИначеЕсли КодСостояния = 402 Тогда
		ОбработатьОшибкиJSON_ИСЦЭДМ(РезультатОперации.ТекстОтвета, ИнформацияОбОшибке);
		//ИнформацияОбОшибке.ПодробноеПредставление = нСтр("ru='Ошибка в атрибутивном составе тела запроса (Код 402)'");
		Результат = Истина;
	ИначеЕсли КодСостояния = 403 Тогда
		ОбработатьОшибкиJSON_ИСЦЭДМ(РезультатОперации.ТекстОтвета, ИнформацияОбОшибке);
		Результат = Истина;
	ИначеЕсли КодСостояния = 404 Тогда
		ОбработатьОшибкиJSON_ИСЦЭДМ(РезультатОперации.ТекстОтвета, ИнформацияОбОшибке);
		Результат = Истина;
	ИначеЕсли КодСостояния = 409 Тогда
		ОбработатьОшибкиJSON_ИСЦЭДМ(РезультатОперации.ТекстОтвета, ИнформацияОбОшибке);
		//ИнформацияОбОшибке.ПодробноеПредставление = нСтр("ru='Запрос не может быть выполнен из-за конфликтного обращения к ресурсу (Код 409)'");
		Результат = Истина;
	ИначеЕсли КодСостояния = 410 Тогда
		ОбработатьОшибкиJSON_ИСЦЭДМ(РезультатОперации.ТекстОтвета, ИнформацияОбОшибке);
		//ИнформацияОбОшибке.ПодробноеПредставление = нСтр("ru='Ресурс ранее был доступен по указанному URL, но сейчас он удалён и недоступен (Код 410)'");
		Результат = Истина;
	ИначеЕсли КодСостояния = 413 Тогда
		ОбработатьОшибкиJSON_ИСЦЭДМ(РезультатОперации.ТекстОтвета, ИнформацияОбОшибке);
		Результат = Истина;
	ИначеЕсли КодСостояния = 500 Тогда
		ОбработатьОшибкиJSON_ИСЦЭДМ(РезультатОперации.ТекстОтвета, ИнформацияОбОшибке);
		Результат = Истина;
	ИначеЕсли КодСостояния = 503 Тогда
		ОбработатьОшибкиJSON_ИСЦЭДМ(РезультатОперации.ТекстОтвета, ИнформацияОбОшибке);
		Результат = Истина;
	ИначеЕсли КодСостояния = 504 Тогда
		ОбработатьОшибкиJSON_ИСЦЭДМ(РезультатОперации.ТекстОтвета, ИнформацияОбОшибке);
		Результат = Истина;
	ИначеЕсли КодСостояния = 418 Тогда
		ОбработатьОшибкиJSON_ИСЦЭДМ(РезультатОперации.ТекстОтвета, ИнформацияОбОшибке);
		Результат = Истина;
	Иначе
		//Неизвестный код состояния ответа сервиса
		ИнформацияОбОшибке.ПодробноеПредставление = СтрШаблон(нСтр("ru='Неизвестный код состояния ответа сервера: ""%1"". Текст ответа: %2'"), КодСостояния, РезультатОперации.ТекстОтвета);
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Создание титула POST /edo-api/incoming-documents/{documentId}/events/{decision}
Функция ВыполнитьСозданиеТитулаДляПодписиИСЦЭДМ(ИдентификаторДокумента, ДанныеПрофилей, Версия, СтруктурнаяЕдиница = Неопределено)
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("docid", РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СтрокаВЧисло(ИдентификаторДокумента));
			
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ПараметрыЗапроса);
	ТекстОтправки = ЗаписьJSON.Закрыть();
	
	АдресРесурса = "/apiUot/api/v1/private/getDataForSign";
	Заголовки = Новый Соответствие();
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, ТекстОтправки,, ДанныеПрофилей, Ложь);
	
КонецФункции

// Подписание титула POST /edo-api/incoming-documents/{documentId}/events/{decision}/signature
Функция ВыполнитьПодписаниеТитулаИСЦЭДМ(ИдентификаторДокумента, ПодписанныйТитул, ТитулДляПодписи, ДанныеПрофилей, Версия, СтруктурнаяЕдиница = Неопределено)
	
	АдресРесурса = "apiUot/api/v1/private/sendSigned";
	
	ПараметрыApiSign = Новый Структура();
	ПараметрыApiSign.Вставить("content",   ТитулДляПодписи);
	ПараметрыApiSign.Вставить("signature", ПодписанныйТитул);
					
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("trueAPISign", ПараметрыApiSign);
	ПараметрыЗапроса.Вставить("id", 		 РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.СтрокаВЧисло(ИдентификаторДокумента));
			
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ПараметрыЗапроса);
	ТекстОтправки = ЗаписьJSON.Закрыть();

	Заголовки = Новый Соответствие();
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, ТекстОтправки,, ДанныеПрофилей, Ложь);
	
КонецФункции

Функция ПолучитьДополнительныеДанныеПоИдентификаторуИСЦЭДМ(ИдентификаторДокумента, СтруктурнаяЕдиница, БИНОрганизации, ТипДокументов, ТокенАвторизации = Неопределено)
	
	ДополнительныеДанные = Новый Структура("НомерИСЦЭДМ, ДатаВИСЦЭДМ, Статус");
	
	РезультатВыполненияНаСервере = ПолучитьПрофильДокумента(ИдентификаторДокумента, БИНОрганизации,  СтруктурнаяЕдиница, ТипДокументов, ТокенАвторизации);
	
	ИнформацияОбОшибке = Неопределено;
	Если ЭтоОшибкаИСЦЭДМ(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриПолученииДанныхССервера() + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		ИдЗапроса = "";
		Если РезультатВыполненияНаСервере.Свойство("ИдентификаторЗапроса", ИдЗапроса) Тогда 
			ТекстСообщения = ТекстСообщения 
						   + Символы.ПС 
						   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияИдентификаторЗапросаКСерверу();
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИдентификатоНомер%", ИдЗапроса);
		КонецЕсли;
		
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ПолучитьДополнительныеДанныеПоИдентификаторуИСЦЭДМ");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		Возврат ДополнительныеДанные;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(РезультатВыполненияНаСервере.ТекстОтвета);
	РезультатЗапроса = ПрочитатьJSON(ЧтениеJSON);
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат ДополнительныеДанные;
	КонецЕсли;
	
	ДополнительныеДанные.НомерИСЦЭДМ = РезультатЗапроса.edoId;
	ДополнительныеДанные.ДатаВИСЦЭДМ = ОбщегоНазначенияИСМПТК.ПривестиСтрокуКДате(РезультатЗапроса.createDocDate, "дмг");
	ДополнительныеДанные.Статус 	 = РезультатЗапроса.stateId;
	
	Возврат ДополнительныеДанные;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДополнительнойИнформацииПоКодуВДокументах

Функция ПолучитьДополнительныеСведенияОКодахМаркировки(МассивДляЗапросаИнформации, Организация) Экспорт
	
	ОтветСервера = ЗапроситьДанныеПоМассивуКМ(МассивДляЗапросаИнформации, Организация);
	
	Если ЗначениеЗаполнено(ОтветСервера.ТекстОшибки) Тогда 
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ОтветСервера.ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОтветСервера.Свойство("МассивСтруктур")
		И Не ОтветСервера.МассивСтруктур.Количество() = 0 Тогда 
		
		СоответствиеДанныхКМ = Новый Соответствие;
		Для Каждого ОтветКод Из ОтветСервера.МассивСтруктур Цикл
			
			КодИдентификации = ОтветКод.requestedCis;
			Статус = ПолучитьЗначениеСтатусаКМПоСоответствию(ОтветКод.status);
			GTIN   = ОтветКод.gtin;
			Если ЗначениеЗаполнено(ОтветКод.limitDate) Тогда
				//Обратный порядок значений в дате
				Если СтрНайти(ОтветКод.limitDate, "-") = 3 Тогда
					СтрДата = Сред(ОтветКод.limitDate, 7, 4) + "-" + Сред(ОтветКод.limitDate, 4, 2) + "-" + Сред(ОтветКод.limitDate, 1, 2) + Сред(ОтветКод.limitDate, 11, СтрДлина(ОтветКод.limitDate));
					СрокГодности   = ПрочитатьДатуJSON(СтрДата, ФорматДатыJSON.ISO);
				Иначе 
					СрокГодности   = ПрочитатьДатуJSON(ОтветКод.limitDate, ФорматДатыJSON.ISO);
				КонецЕсли;
			Иначе
				СрокГодности = Неопределено;
			КонецЕсли;
			НомерПартии    = ОтветКод.partyNum;
			БИНВладельца   = ОтветКод.ownerBin;
			РодительскийКМ = ОтветКод.parent;
			Если ОтветКод.child = Неопределено Тогда
				КоличествоВложенных = 0;
				GTINВложенных = Неопределено;
			Иначе
				КоличествоВложенных = ОтветКод.child.Количество();
				GTINВложенных = Сред(ОтветКод.child[0], 3, 14);
			КонецЕсли;
			
			СведенияОКодахМаркировки = Новый Структура;
			СведенияОКодахМаркировки.Вставить("СтатусКМ", Статус);
			СведенияОКодахМаркировки.Вставить("GTIN", 	  GTIN);
			СведенияОКодахМаркировки.Вставить("СрокГодности",   СрокГодности);
			СведенияОКодахМаркировки.Вставить("БИНВладельца",   БИНВладельца);
			СведенияОКодахМаркировки.Вставить("РодительскийКМ", РодительскийКМ);
			СведенияОКодахМаркировки.Вставить("НомерПартии", 	НомерПартии);
			СведенияОКодахМаркировки.Вставить("КоличествоВложенных", КоличествоВложенных);
			СведенияОКодахМаркировки.Вставить("GTINВложенных",  GTINВложенных);
			
			СоответствиеДанныхКМ.Вставить(КодИдентификации, СведенияОКодахМаркировки);
		КонецЦикла;
		
		Возврат СоответствиеДанныхКМ;
		
	Иначе
		Если МассивДляЗапросаИнформации.Количество() = 1 Тогда 
			ТекстСообщения = НСтр("ru = 'Не удалось получить информацию по указанному коду маркировки со стороны ИС ЦЭДМ. Возможно, код не принадлежат организации. Обратитесь в техническую поддержку ИС ЦЭДМ.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось получить информацию по указанным в документе кодам со стороны ИС ЦЭДМ. Возможно, коды не принадлежат организации. Обратитесь в техническую поддержку ИС ЦЭДМ.'");
		КонецЕсли;
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);	
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСоставКодаАгрегации(КодАгрегации, Организация) Экспорт
	
	ОтветСервера = ЗапроситьДанныеПосоставуАгрегата(КодАгрегации, Организация);
	
	Если ЗначениеЗаполнено(ОтветСервера.ТекстОшибки) Тогда 
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ОтветСервера.ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОтветСервера.Свойство("МассивСтруктур")
		И Не ОтветСервера.МассивСтруктур.Количество() = 0 Тогда 
		
		Возврат ОтветСервера.МассивСтруктур;
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить информацию по указанным в документе кодам со стороны ИС ЦЭДМ. Возможно, коды не принадлежат организации. Обратитесь в техническую поддержку ИС ЦЭДМ.'");
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);	
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИдентификационныйНомерВлыдельцаДокумента(Документ, ДействиеИндекс = 0)
	
	ИдентификационныйНомер = Неопределено; 
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.АктВнутреннегоПеремещенияИСЦЭДМ") Тогда
		НаправлениеДокумента = ?(ДействиеИндекс = 2, ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий"), 
		ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий"));
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.УведомлениеОВвозеИзЕАЭСИСЦЭДМ") Тогда
		//Для заявления о ввозе идентификационный номер всегда получателя
		НаправлениеДокумента = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий");
	Иначе
		НаправлениеДокумента = ОбщегоНазначенияИСМПТК.ЗначениеРеквизитаОбъекта(Документ, "Направление");
	КонецЕсли;
	
	Если НаправлениеДокумента = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Входящий") Тогда
		
		ИдентификационныйНомер = ОбщегоНазначенияИСМПТК.ЗначениеРеквизитаОбъекта(Документ, "ПолучательИдентификационныйНомер");
		
		Если ОбщегоНазначенияИСМПТК.ЕстьРеквизитОбъекта(Документ, "ПолучательСкладЦЭДМИдентификационныйНомер") Тогда 
			ИдентификаторТРП = ОбщегоНазначенияИСМПТК.ЗначениеРеквизитаОбъекта(Документ, "ПолучательСкладЦЭДМИдентификационныйНомер");
			Если ЗначениеЗаполнено(ИдентификаторТРП) Тогда
				ИдентификационныйНомер = ИдентификаторТРП;
			КонецЕсли; 
		КонецЕсли;
		
	Иначе 
		
		ИдентификационныйНомер = ОбщегоНазначенияИСМПТК.ЗначениеРеквизитаОбъекта(Документ, "ПоставщикИдентификационныйНомер");
		
		Если ОбщегоНазначенияИСМПТК.ЕстьРеквизитОбъекта(Документ, "ПоставщикСкладЦЭДМИдентификационныйНомер") Тогда
			ИдентификаторТРП = ОбщегоНазначенияИСМПТК.ЗначениеРеквизитаОбъекта(Документ, "ПоставщикСкладЦЭДМИдентификационныйНомер");
			Если ЗначениеЗаполнено(ИдентификаторТРП) Тогда
				ИдентификационныйНомер = ОбщегоНазначенияИСМПТК.ЗначениеРеквизитаОбъекта(Документ, "ПоставщикСкладЦЭДМИдентификационныйНомер");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИдентификационныйНомер;
	
КонецФункции

#Конецобласти

Функция СтатусПроцессЗавершен(СтатусДокумента) Экспорт

	Возврат СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.Аннулирован")
		Или СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.Отклонен")
		Или СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.Отозван")
		Или СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыДокументовИСЦЭДМ.Принят");
	
КонецФункции

Процедура ЗапроситьСписокКодовМаркировкиССервераЦЭДМ(ДополнительныеПараметры, АдресХранилища) Экспорт

	ТокенАвторизации = ДополнительныеПараметры.ТокенАвторизации;
	Идентификатор 	 = ДополнительныеПараметры.Идентификатор;
	Организация		 = ДополнительныеПараметры.Организация;
	Если Не ЗначениеЗаполнено(ДополнительныеПараметры.ИИНБИНСклада) Тогда
		ИИНБИН = Организация[ИнтеграцияИСМПТКПереопределяемый.ПолучитьРеквизитИИНОрганизации()];
	Иначе
		ИИНБИН = ДополнительныеПараметры.ИИНБИНСклада;
	КонецЕсли;
		
	ТаблицаКодов = ПолучитьПустуюТаблицуКодов();
	ПолучитьСписокМарокДокумента(Идентификатор, ИИНБИН, Организация,,, ТаблицаКодов, ТокенАвторизации);
	
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("ТаблицаПолученныхКодов", ТаблицаКодов);
	РезультатВыполнения.Вставить("Успешно", 			   Истина);
	ПоместитьВоВременноеХранилище(РезультатВыполнения,     АдресХранилища)
	
КонецПроцедуры

#КонецОбласти

#Область СУЗ_АПИ_РаботаСДокументами

#Область ЗаказНаЭмиссиюКМ

Функция ЗаявкаНаЭмиссиюКодовМаркировкиJSON(ДокументСсылка, НастройкаОбменаСУЗ) Экспорт
	
	СписокЗапросов = Новый СписокЗначений;
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	Неопределено			                 КАК ДокументОснование,
	|	
	|	// Общие реквизиты для табака и обуви
	|	Шапка.ВидПродукции                         КАК ВидПродукции,
	|	Шапка.ИдентификаторПроизводственногоЗаказа КАК ИдентификаторПроизводственногоЗаказа,
	|	Шапка.СпособВводаВОборот                   КАК СпособВводаВОборот,
	|
	|	// Основные реквизиты
	|	Шапка.Организация                КАК Организация,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|	Шапка.СтранаПроизводства		 КАК СтранаПроизводства,
	|
	|	Шапка.КонтактноеЛицо             КАК Ответственный,
	|	Шапка.КонтактноеЛицо			 КАК ОтветственныйПредставление,
	|
	|	// Лекарственные препараты
	|	Представление(Шапка.ИдентификаторПроизводства)           КАК ИдентификаторПроизводства,
	|	Представление(Шапка.СтранаПроизводителя)                 КАК СтранаПроизводителя,
	|	Представление(Шапка.КодПродукта)                         КАК КодПродукта,
	|	Представление(Шапка.ИдентификаторПроизводственнойЛинии)  КАК ИдентификаторПроизводственнойЛинии,
	|	Представление(Шапка.ОписаниеПродукта)                    КАК ОписаниеПродукта
	|
	|ИЗ
	|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	
	|	// Универсальные реквизиты
	|	Товары.Номенклатура                      КАК Номенклатура,
	|	Товары.Характеристика                    КАК Характеристика,
	|	Товары.GTIN                              КАК GTIN,
	|	Товары.Количество                        КАК Количество,
	|	Товары.СпособФормированияСерийногоНомера КАК СпособФормированияСерийногоНомера,
	|	1                                        КАК КоличествоСтрок,
	|	ЛОЖЬ                                     КАК СтрокаДобавлена,
	|	
	|	// Табачная продукция
	|	Представление(Товары.Номенклатура)                  КАК НоменклатураПредставление,
	|	Представление(Товары.Характеристика)                КАК ХарактеристикаПредставление,
	|	
	|	Товары.Шаблон                    КАК Шаблон
	|	
	|ИЗ
	|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|",
	"Товары");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	СерийныеНомера.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СерийныеНомера.СерийныйНомер       КАК СерийныйНомер
	|ИЗ
	|	Документ.ЗаказКодовМаркировкиСУЗИСМПТК.СерийныеНомера КАК СерийныеНомера
	|ГДЕ
	|	СерийныеНомера.Ссылка = &Ссылка
	|",
	"СерийныеНомера");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = ОбщегоНазначенияИСМПТК.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	
	ТабличнаяЧастьТовары         = РезультатЗапроса["Товары"].Выгрузить();
	ТабличнаяЧастьСерийныеНомера = РезультатЗапроса["СерийныеНомера"].Выгрузить();
	
	Если ТабличнаяЧастьТовары.Количество() = 0 Тогда
		
		СообщениеJSON = СтруктураСообщенияJSON();
		СообщениеJSON.Документ = ДокументСсылка;
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		
		Возврат СообщениеJSON;
		
	КонецЕсли;
	
	СтанцияУправленияЗаказами = Неопределено;	
	
	Если НастройкаОбменаСУЗ.Количество() = 0 Тогда
		
		СообщениеJSON = СтруктураСообщенияJSON();
		СообщениеJSON.Документ = ДокументСсылка;
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Для организации не настроен обмен с СУЗ!'");
		
		Возврат СообщениеJSON;
		
	КонецЕсли;
	
	Организация       = НастройкаОбменаСУЗ.Организация;
	РезультатПроверки = ПроверитьДоступностьСУЗ_V2(Шапка.ВидПродукции, НастройкаОбменаСУЗ);
	Если РезультатПроверки.Доступен = Истина Тогда
		СтанцияУправленияЗаказами = НастройкаОбменаСУЗ.СтанцияУправленияЗаказами;
	КонецЕсли;
	
	Если СтанцияУправленияЗаказами = Неопределено Тогда
		СообщениеJSON = СтруктураСообщенияJSON();
		СообщениеJSON.Организация       = Шапка.Организация;
		СообщениеJSON.Документ          = ДокументСсылка;
		СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
		
		ИнтеграцияИСМПТККлиентСервер.ДобавитьТекстОшибки(СообщениеJSON,
									СтрШаблон(НСтр("ru = 'Не удалось определить активный СУЗ для организации %1.'"),
									Шапка.Организация));
		Возврат СообщениеJSON;
		
	КонецЕсли;
	
	Шаблон = ИнтеграцияИСМПТККлиентСервер.ШаблонКодаМаркировкиПоВидуПродукции(Шапка.ВидПродукции);
	ИдентификаторШаблона = ШаблонКодаМаркировки(Шаблон);
	
	МассивГруппСтрок = МассивГруппСтрокПоGTINИКоличеству(ТабличнаяЧастьТовары);
	
	Для Каждого ГруппаСтрок Из МассивГруппСтрок Цикл
		
		СообщениеJSON = СтруктураСообщенияJSON();
		СообщениеJSON.Организация       = Шапка.Организация;
		СообщениеJSON.Документ          = ДокументСсылка;
		СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
		СообщениеJSON.ПараметрыЗапроса  = Новый Массив;
		
		ТелоЗапроса = Новый Структура;
		Если Шапка.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная") Тогда
			ТелоЗапроса.Вставить("contactPerson", Шапка.ОтветственныйПредставление);
		КонецЕсли;
		
		ТелоЗапроса.Вставить("releaseMethodType", СпособВыпускаВОборот_СУЗ(Шапка.СпособВводаВОборот, "СУЗ"));
		
		Если НЕ Шапка.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты")
			И НЕ Шапка.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда
			ТелоЗапроса.Вставить("createMethodType",   "SELF_MADE");  // SELF_MADE или CEM
			ТелоЗапроса.Вставить("productionOrderId",  Шапка.ИдентификаторПроизводственногоЗаказа);
			ТелоЗапроса.Вставить("products",           Новый Массив);
		Иначе
			ТелоЗапроса.Вставить("factoryId", 		   Шапка.ИдентификаторПроизводства);
			ТелоЗапроса.Вставить("factoryCountry",     Шапка.СтранаПроизводителя);
			ТелоЗапроса.Вставить("productionLineId",   Шапка.ИдентификаторПроизводственнойЛинии);
			ТелоЗапроса.Вставить("productCode",        Шапка.КодПродукта);      // Уточняется обязательность поля для передачи по АПИ
			ТелоЗапроса.Вставить("productDescription", Шапка.ОписаниеПродукта); // Уточняется обязательность поля для передачи по АПИ
			ТелоЗапроса.Вставить("products",           Новый Массив);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.СтранаПроизводства) Тогда
			ТелоЗапроса.Вставить("country", ОбщегоНазначенияИСМПТК.ЗначенияРеквизитовОбъекта(Шапка.СтранаПроизводства, "КодАльфа2").КодАльфа2);
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из ГруппаСтрок Цикл
			
			СтрокаЗаказаКодовМаркировки = Новый Структура;
			СтрокаЗаказаКодовМаркировки.Вставить("gtin",             СтрокаТЧ.GTIN);
			СтрокаЗаказаКодовМаркировки.Вставить("quantity",         Строка(Формат(СтрокаТЧ.Количество, "ЧГ=")));
			СтрокаЗаказаКодовМаркировки.Вставить("serialNumberType", СпособФормированияСерийногоНомера(СтрокаТЧ.СпособФормированияСерийногоНомера)); // OPERATOR или SELF_MADE
			Если Не Шапка.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная") Тогда
				СтрокаЗаказаКодовМаркировки.Вставить("templateId",   ИдентификаторШаблона);
			Иначе
				//У табачной продукции два разных шаблона - проверяем построчно
				СтрокаЗаказаКодовМаркировки.Вставить("templateId",   ПолучитьИдентификаторШаблонаПоШаблонуКода(СтрокаТЧ.Шаблон));
			КонецЕсли;
			Если Шапка.ВидПродукции    = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция")
				ИЛИ Шапка.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность")
				ИЛИ Шапка.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.БезалкогольныеНапитки") Тогда
				СтрокаЗаказаКодовМаркировки.Вставить("cisType", "UNIT"); 
			КонецЕсли;		
				
			Если СтрокаТЧ.СпособФормированияСерийногоНомера = Перечисления.СпособыФормированияСерийногоНомераСУЗИСМПТК.Самостоятельно Тогда
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ИдентификаторСтроки", СтрокаТЧ.ИдентификаторСтроки);
				СтрокаЗаказаКодовМаркировки.Вставить("serialNumbers", ТабличнаяЧастьСерийныеНомера.Скопировать(ПараметрыОтбора).ВыгрузитьКолонку("СерийныйНомер"));
			КонецЕсли;
			
			ТелоЗапроса["products"].Добавить(СтрокаЗаказаКодовМаркировки);
			
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить("GTIN",   СтрокаТЧ.GTIN);
			ПараметрыЗапроса.Вставить("ИдентификаторБизнесЗаказа", "");
			ПараметрыЗапроса.Вставить("ИдентификаторСтрокиЗаказа", СтрокаТЧ.ИдентификаторСтроки);
			ПараметрыЗапроса.Вставить("Шаблон", Шаблон);
						
			СообщениеJSON.ПараметрыЗапроса.Добавить(ПараметрыЗапроса);
			
		КонецЦикла;
		
		ТелоСообщенияJSON = ОбъектВТекстJSON(ТелоЗапроса, Истина);
		
		СообщениеJSON.ТекстСообщенияJSON = ТелоСообщенияJSON;
		СообщениеJSON.ТипСообщения       = Перечисления.ТипыЗапросовИСМПТК.Исходящий;	
		СообщениеJSON.ВидПродукции       = Шапка.ВидПродукции;
		СообщениеJSON.ТребуетсяПодписание       = Истина;
		СообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
		
	КонецЦикла;
	
	Возврат СообщениеJSON;
	
КонецФункции

Функция ПолучитьСтатусЗаказаЭмиссииКМ(НастройкаОбменаСУЗ, ВидПродукции) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ДанныеОСтатусах",                Неопределено);
	ВозвращаемоеЗначение.Вставить("СодержимоеНедоступно",           Ложь);
	
	URLЗапроса = "api/v2/extension/orders?omsId=" + НастройкаОбменаСУЗ.Идентификатор;
	Extension  = СоответствиеВидовПродукцииURL()[ВидПродукции];
	URLЗапроса = СтрЗаменить(URLЗапроса, "extension", Extension);
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("clientToken",    НастройкаОбменаСУЗ.Токен);
	
	РезультатЗапроса = ОтправитьДанныеВСервис(URLЗапроса, Неопределено, Неопределено, "GET", НастройкаОбменаСУЗ, ЗаголовокHTTP);
	РезультатОтправкиЗапроса = ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			Иначе
				ВозвращаемоеЗначение.ДанныеОСтатусах = ДанныеОбработки;
			КонецЕсли;
		
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 403 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
		КонецЕсли;
		
	Иначе
		ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьПричинуОтказаЗаказаЭмиссииКМ(НастройкаОбменаСУЗ, ВидПродукции, СтруктураЗаказа) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ДанныеОСтатусах",              Неопределено);
	ВозвращаемоеЗначение.Вставить("СодержимоеНедоступно",           Ложь);
	
	URLЗапроса = "api/v2/extension/buffer/status?omsId=" + НастройкаОбменаСУЗ.Идентификатор;
	URLЗапроса = URLЗапроса + "&orderId=" + СтруктураЗаказа.orderId;
	URLЗапроса = URLЗапроса + "&gtin=" + СтруктураЗаказа.GTIN;
	
	Extension = СоответствиеВидовПродукцииURL()[ВидПродукции];
	URLЗапроса = СтрЗаменить(URLЗапроса, "extension", Extension);
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("clientToken", НастройкаОбменаСУЗ.Токен);
	
	РезультатЗапроса = ОтправитьДанныеВСервис(
	URLЗапроса, Неопределено, Неопределено,
		"GET", НастройкаОбменаСУЗ, ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			Иначе
				ВозвращаемоеЗначение.ДанныеОСтатусах = ДанныеОбработки;
			КонецЕсли;
		
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 403 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
		КонецЕсли;
		
	Иначе
		ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьКМПоЗаказуНаЭмиссию(НастройкаОбменаСУЗ, ВидПродукции, ИдентификаторДокумента, GTIN, Количество, ИдентификаторПоследнегоБлока = "") Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ДанныеОКМ",              Неопределено);
	ВозвращаемоеЗначение.Вставить("СодержимоеНедоступно",           Ложь);
	
	omsId_ 		= "omsId="     + НастройкаОбменаСУЗ.Идентификатор;
	orderId_ 	= "&orderId="  + ИдентификаторДокумента;
	GTIN_ 		= "&gtin=" 	   + GTIN;
	quantity_ 	= "&quantity=" + Строка(Формат(Количество, "ЧГ="));
	
	blockId_ 	= ?(ЗначениеЗаполнено(ИдентификаторПоследнегоБлока), "&blockId="  + ИдентификаторПоследнегоБлока, ИдентификаторПоследнегоБлока);
	
	URLЗапроса = "api/v2/extension/codes?" + omsId_ + orderId_ + GTIN_ + quantity_ + blockId_;
	Extension  = СоответствиеВидовПродукцииURL()[ВидПродукции];
	URLЗапроса = СтрЗаменить(URLЗапроса, "extension", Extension);
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("clientToken", 	 НастройкаОбменаСУЗ.Токен);

	РезультатЗапроса = ОтправитьДанныеВСервис(URLЗапроса, Неопределено, Неопределено, "GET", НастройкаОбменаСУЗ, ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			Иначе
				ВозвращаемоеЗначение.ДанныеОКМ = ДанныеОбработки;
			КонецЕсли;
		
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 403 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 400 Тогда
			
			Объект = ВозвращаемоеЗначение.РезультатОтправкиЗапроса.Объект;
			
			ТекстОшибки = НСтр("ru = 'При выполнении запроса %1 возникла ошибка.'")
						+ Символы.ПС
						+ НСтр("ru = 'Код состояния HTTP: %2.'")
						+ Символы.ПС
						+ НСтр("ru = 'Текст ошибки: '");
			ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, URLЗапроса, РезультатОтправкиЗапроса.КодСостояния);
			
			Если Не Объект = Неопределено Тогда
				Если Объект.Свойство("globalErrors") Тогда
					МассивСообщений = Объект["globalErrors"];
				ИначеЕсли Объект.Свойство("fieldErrors") Тогда
					МассивСообщений = Объект["fieldErrors"];
				Иначе 
					МассивСообщений = Новый Массив;
				КонецЕсли;
				
				Для Каждого СообщениеОбОшибке Из МассивСообщений Цикл
					
					Если ТипЗнч(СообщениеОбОшибке) = Тип("Структура") Тогда 
						ТекстСообщения = СообщениеОбОшибке.fieldError;
					Иначе
						ТекстСообщения = СообщениеОбОшибке;
					КонецЕсли;
					
					ТекстОшибки = ТекстОшибки + Символы.ПС + ТекстСообщения;
					
				КонецЦикла;
			КонецЕсли;
			
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибки;
			
		Иначе
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
		КонецЕсли;
	Иначе
		ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьСтатусGTINПоЗаказуНаЭмиссию(НастройкаОбменаСУЗ, ВидПродукции, ИдентификаторДокумента, GTIN) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки", "");
	ВозвращаемоеЗначение.Вставить("ДанныеОКМ",   Неопределено);
	ВозвращаемоеЗначение.Вставить("СодержимоеНедоступно", Ложь);
	
	omsId_ 	 = "omsId="    + НастройкаОбменаСУЗ.Идентификатор;
	orderId_ = "&orderId=" + ИдентификаторДокумента;
	GTIN_ 	 = "&gtin="    + GTIN;
	
	URLЗапроса = "api/v2/extension/codes/blocks?" + omsId_ + orderId_ + GTIN_;
	Extension  = СоответствиеВидовПродукцииURL()[ВидПродукции];
	URLЗапроса = СтрЗаменить(URLЗапроса, "extension", Extension);
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("clientToken", 	 НастройкаОбменаСУЗ.Токен);

	РезультатЗапроса = ОтправитьДанныеВСервис(URLЗапроса, Неопределено, Неопределено, "GET", НастройкаОбменаСУЗ, ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			Иначе
				ВозвращаемоеЗначение.ДанныеОКМ = ДанныеОбработки;
			КонецЕсли;
		
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 403 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 400 Тогда
			
			Объект = ВозвращаемоеЗначение.РезультатОтправкиЗапроса.Объект;
			
			ТекстОшибки = НСтр("ru = 'При выполнении запроса %1 возникла ошибка.'")
						+ Символы.ПС
						+ НСтр("ru = 'Код состояния HTTP: %2.'")
						+ Символы.ПС
						+ НСтр("ru = 'Текст ошибки: '");
			ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, URLЗапроса, РезультатОтправкиЗапроса.КодСостояния);
			
			Если Не Объект = Неопределено Тогда
				Если Объект.Свойство("globalErrors") Тогда
					МассивСообщений = Объект["globalErrors"];
				ИначеЕсли Объект.Свойство("fieldErrors") Тогда
					МассивСообщений = Объект["fieldErrors"];
				Иначе 
					МассивСообщений = Новый Массив;
				КонецЕсли;
				
				Для Каждого СообщениеОбОшибке Из МассивСообщений Цикл
					
					Если ТипЗнч(СообщениеОбОшибке) = Тип("Структура") Тогда 
						ТекстСообщения = СообщениеОбОшибке.fieldError;
					Иначе
						ТекстСообщения = СообщениеОбОшибке;
					КонецЕсли;
					
					ТекстОшибки = ТекстОшибки + Символы.ПС + ТекстСообщения;
					
				КонецЦикла;
			КонецЕсли;
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибки;
		Иначе
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
		КонецЕсли;
	Иначе
		ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПовторноПолучитьКМПоЗаказуНаЭмиссию(НастройкаОбменаСУЗ, ВидПродукции, ИдентификаторДокумента, GTIN, ИдентификаторБлокаКодов, Количество) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса", Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки", "");
	ВозвращаемоеЗначение.Вставить("ДанныеОКМ",   Неопределено);
	ВозвращаемоеЗначение.Вставить("СодержимоеНедоступно", Ложь);
	
	omsId_ 	   = "omsId="     + НастройкаОбменаСУЗ.Идентификатор;
	orderId_   = "&orderId="  + ИдентификаторДокумента;
	GTIN_ 	   = "&gtin=" 	  + GTIN;
	quantity_  = "&quantity=" + Строка(Формат(Количество, "ЧГ="));
	blockId_   = "&blockId="  + ИдентификаторБлокаКодов;
	
	URLЗапроса = "api/v2/extension/codes/retry?" + omsId_ + orderId_ + GTIN_ + quantity_ + blockId_;
	Extension  = СоответствиеВидовПродукцииURL()[ВидПродукции];
	URLЗапроса = СтрЗаменить(URLЗапроса, "extension", Extension);
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("clientToken", 	 НастройкаОбменаСУЗ.Токен);

	РезультатЗапроса = ОтправитьДанныеВСервис(URLЗапроса, Неопределено, Неопределено, "GET", НастройкаОбменаСУЗ, ЗаголовокHTTP);
	РезультатОтправкиЗапроса = ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			Если ДанныеОбработки = Неопределено Тогда
				ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			Иначе
				ВозвращаемоеЗначение.ДанныеОКМ = ДанныеОбработки;
			КонецЕсли;
		
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 403 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 400 Тогда
			
			Объект = ВозвращаемоеЗначение.РезультатОтправкиЗапроса.Объект;
			
			ТекстОшибки = НСтр("ru = 'При выполнении запроса %1 возникла ошибка.'")
						+ Символы.ПС
						+ НСтр("ru = 'Код состояния HTTP: %2.'")
						+ Символы.ПС
						+ НСтр("ru = 'Текст ошибки: '");
			ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, URLЗапроса, РезультатОтправкиЗапроса.КодСостояния);
			
			Если Не Объект = Неопределено Тогда
				МассивСообщений = Объект["globalErrors"];
				Для Каждого СообщениеОбОшибке Из МассивСообщений Цикл 
					ТекстОшибки = ТекстОшибки + Символы.ПС + СообщениеОбОшибке;
				КонецЦикла;
			КонецЕсли;
			
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибки;
		Иначе
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
		КонецЕсли;
		
	Иначе
		ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЗакрытьПодзаказПоGTIN(НастройкаОбменаСУЗ, ВидПродукции, ИдентификаторДокумента, GTIN, ИдентификаторБлокаКодов) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ДанныеОКМ",              Неопределено);
	ВозвращаемоеЗначение.Вставить("СодержимоеНедоступно",           Ложь);
	
	omsId_ 			= "omsId=" + НастройкаОбменаСУЗ.Идентификатор;
	orderId_ 		= "&orderId=" + ИдентификаторДокумента;
	GTIN_ 			= "&gtin=" + GTIN;
	lastBlockId_ 	= "&lastBlockId=" + ИдентификаторБлокаКодов;
	
	URLЗапроса = "api/v2/extension/buffer/close?" + omsId_ + orderId_ + GTIN_ + lastBlockId_;
	Extension = СоответствиеВидовПродукцииURL()[ВидПродукции];
	URLЗапроса = СтрЗаменить(URLЗапроса, "extension", Extension);
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("clientToken", НастройкаОбменаСУЗ.Токен);
	
	РезультатЗапроса = ОтправитьДанныеВСервис(
	URLЗапроса, Неопределено, Неопределено,
		"POST", НастройкаОбменаСУЗ, ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			Иначе
				ВозвращаемоеЗначение.ДанныеОКМ = ДанныеОбработки;
			КонецЕсли;
		
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса,РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 403 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
		КонецЕсли;
		
	Иначе
		ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область АгрегацияКМ

Функция АгрегацияКодовМаркировкиJSON(ДокументСсылка, НастройкаОбменаСУЗ) Экспорт
	
	СписокЗапросов = Новый СписокЗначений;
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	Неопределено			                 КАК ДокументОснование,
	|	
	|	// Общие реквизиты для табака и обуви
	|	Шапка.ВидПродукции                         КАК ВидПродукции,
	|
	|	// Основные реквизиты
	|	Шапка.Организация                		КАК Организация,
	|	Представление(Шапка.Организация) 		КАК ОрганизацияПредставление,
	|	Шапка.ОрганизацияИдентификационныйНомер КАК ИИН,
	|
	|	Шапка.Ответственный                КАК Ответственный,
	|	Представление(Шапка.Ответственный) КАК ОтветственныйПредставление,
	|
	|	// Доп реквизиты
	|	ШапкаДопДанные.ТипАгрегации КАК ТипАгрегации,
	|	ШапкаДопДанные.ИдентификационныйКодЕдиницыАгрегации КАК ИдентификационныйКодЕдиницыАгрегации,
	|	ШапкаДопДанные.КодИдентификацииУпаковки КАК КодИдентификацииУпаковки,
	|	ШапкаДопДанные.ЕмкостьУпаковки КАК ЕмкостьУпаковки,
	|	ШапкаДопДанные.ФактическоеКоличествоШтук КАК ФактическоеКоличествоШтук,
	|
	|	// Доп реквизиты
	|
	|	Шапка.ИдентификаторПроизводственнойЛинии КАК ИдентификаторПроизводственнойЛинии,
	|	Шапка.ИдентификаторПроизводственногоЗаказа КАК ИдентификаторПроизводственногоЗаказа
	|ИЗ
	|	Документ.АгрегацияКодовМаркировкиСУЗИСМПТК КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АгрегацияКодовМаркировкиСУЗИСМПТК.Упаковки КАК ШапкаДопДанные
	|		ПО ШапкаДопДанные.Ссылка = Шапка.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	АгрегированныеКМ.КодИдентификации КАК КодИдентификации
	|	
	|ИЗ
	|	Документ.АгрегацияКодовМаркировкиСУЗИСМПТК.АгрегированныеКМ КАК АгрегированныеКМ
	|ГДЕ
	|	АгрегированныеКМ.Ссылка = &Ссылка
	|",
	"СписокКМ");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = ОбщегоНазначенияИСМПТК.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	
	ТабличнаяЧастьКМ = РезультатЗапроса["СписокКМ"].Выгрузить();
	
	Если ТабличнаяЧастьКМ.Количество() = 0 Тогда
		
		СообщениеJSON = СтруктураСообщенияJSON();
		СообщениеJSON.Документ = ДокументСсылка;
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		
		Возврат СообщениеJSON;
		
	КонецЕсли;
	
	СтанцияУправленияЗаказами = Неопределено;
	Организация 		= НастройкаОбменаСУЗ.Организация;
	РезультатПроверки 	= ПроверитьДоступностьСУЗ_V2(Шапка.ВидПродукции, НастройкаОбменаСУЗ);
	
	Если РезультатПроверки.Доступен = Истина Тогда
		СтанцияУправленияЗаказами = НастройкаОбменаСУЗ.СтанцияУправленияЗаказами;
	КонецЕсли;
	
	Если СтанцияУправленияЗаказами = Неопределено Тогда
		
		СообщениеJSON = СтруктураСообщенияJSON();
		СообщениеJSON.Организация       = Шапка.Организация;
		СообщениеJSON.Документ          = ДокументСсылка;
		СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
		СообщениеJSON.ТекстОшибки		= НСтр("ru = 'Для организации не настроен обмен с СУЗ!'");
		Возврат СообщениеJSON;
		
	КонецЕсли;
	
	СообщениеJSON = СтруктураСообщенияJSON();
	СообщениеJSON.Организация       = Шапка.Организация;
	СообщениеJSON.Документ          = ДокументСсылка;
	СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
	СообщениеJSON.ПараметрыЗапроса  = Новый Массив;
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("participantId", 		Шапка.ИИН);
	
	Если Шапка.ВидПродукции = Перечисления.ВидыПродукцииИСМПТК.Табачная 
		ИЛИ Шапка.ВидПродукции = Перечисления.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты Тогда 
		ТелоЗапроса.Вставить("productionLineId", 		Шапка.ИдентификаторПроизводственнойЛинии);
		ТелоЗапроса.Вставить("productionOrderId", 		Шапка.ИдентификаторПроизводственногоЗаказа);
	КонецЕсли;
	
	ТелоЗапроса.Вставить("aggregationUnits",	Новый Массив);
	
	//Реализуется только одна строка агрегации
	СтрокаАгрегацииКодовМаркировки = Новый Структура;
	СтрокаАгрегацииКодовМаркировки.Вставить("aggregatedItemsCount",		Шапка.ФактическоеКоличествоШтук);
	СтрокаАгрегацииКодовМаркировки.Вставить("aggregationType",			ТипыАгрегации_СУЗ(Шапка.ТипАгрегации));
	СтрокаАгрегацииКодовМаркировки.Вставить("aggregationUnitCapacity",	Шапка.ЕмкостьУпаковки);
	СтрокаАгрегацииКодовМаркировки.Вставить("unitSerialNumber",			Шапка.КодИдентификацииУпаковки);
		
	СтрокаАгрегацииКодовМаркировки.Вставить("sntins", ТабличнаяЧастьКМ.ВыгрузитьКолонку("КодИдентификации"));
	
	ТелоЗапроса["aggregationUnits"].Добавить(СтрокаАгрегацииКодовМаркировки);
	
	ТелоСообщенияJSON = ОбъектВТекстJSON(ТелоЗапроса, Истина);
	
	СообщениеJSON.ТекстСообщенияJSON = ТелоСообщенияJSON;
	СообщениеJSON.ТипСообщения       = Перечисления.ТипыЗапросовИСМПТК.Исходящий;	
	СообщениеJSON.ВидПродукции       = Шапка.ВидПродукции;
	СообщениеJSON.ТребуетсяПодписание       = Истина;
	СообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
	
	Возврат СообщениеJSON;
	
КонецФункции

Функция ПолучитьСтатусАгрегацииКМ(НастройкаОбменаСУЗ, ВидПродукции, ИдентификаторОтчета) Экспорт
	
	Возврат ПолучитьСтатусОтчетаСУЗОбщийМетод(НастройкаОбменаСУЗ, ВидПродукции, ИдентификаторОтчета);
	
КонецФункции

#КонецОбласти

#Область НанесениеКМ

Функция ПолучитьСтатусНанесенияКМ(НастройкаОбменаСУЗ, ВидПродукции, ИдентификаторОтчета) Экспорт
	
	Возврат ПолучитьСтатусОтчетаСУЗОбщийМетод(НастройкаОбменаСУЗ, ВидПродукции, ИдентификаторОтчета);
	
КонецФункции

Функция НанесениеКодовМаркировкиJSON(ДокументСсылка, НастройкаОбменаСУЗ) Экспорт
	
	СписокЗапросов = Новый СписокЗначений;
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер КАК Номер,
	|	Шапка.Дата КАК Дата,
	|	Неопределено КАК ДокументОснование,
	|	
	|	Шапка.ВидПродукции КАК ВидПродукции,
	|
	|	Шапка.Организация КАК Организация,
	|	Представление(Шапка.Организация)КАК ОрганизацияПредставление,
	|
	|	Шапка.Ответственный КАК Ответственный,
	|	Представление(Шапка.Ответственный) КАК ОтветственныйПредставление,
	|
	|	Шапка.ТипИспользования КАК ТипИспользования,
	|	Шапка.НомерПроизводственнойСерии КАК НомерПроизводственнойСерии,
	|	Шапка.НомерПроизводственнойСерии КАК ИдентификаторПроизводственнойЛинии,
	|	Шапка.СрокГодности КАК СрокГодности
	|ИЗ
	|	Документ.НанесениеКодовМаркировкиСУЗИСМПТК КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.КодМаркировки КАК КодМаркировки
	|ИЗ
	|	Документ.НанесениеКодовМаркировкиСУЗИСМПТК.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|",
	"СписокКМ");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = ОбщегоНазначенияИСМПТК.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	
	ТабличнаяЧастьКМ = РезультатЗапроса["СписокКМ"].Выгрузить();
	
	Если ТабличнаяЧастьКМ.Количество() = 0 Тогда
		
		СообщениеJSON = СтруктураСообщенияJSON();
		СообщениеJSON.Документ 	  = ДокументСсылка;
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		
		Возврат СообщениеJSON;
		
	КонецЕсли;
	
	СтанцияУправленияЗаказами = Неопределено;
	Организация 		= НастройкаОбменаСУЗ.Организация;
	РезультатПроверки 	= ПроверитьДоступностьСУЗ_V2(Шапка.ВидПродукции, НастройкаОбменаСУЗ);
	
	Если РезультатПроверки.Доступен = Истина Тогда
		СтанцияУправленияЗаказами = НастройкаОбменаСУЗ.СтанцияУправленияЗаказами;
	КонецЕсли;
	
	Если СтанцияУправленияЗаказами = Неопределено Тогда
		
		СообщениеJSON = СтруктураСообщенияJSON();
		СообщениеJSON.Организация       = Шапка.Организация;
		СообщениеJSON.Документ          = ДокументСсылка;
		СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
		СообщениеJSON.ТекстОшибки		= НСтр("ru = 'Для организации не настроен обмен с СУЗ!'");
		Возврат СообщениеJSON;
		
	КонецЕсли;
	
	СообщениеJSON = СтруктураСообщенияJSON();
	СообщениеJSON.Организация       = Шапка.Организация;
	СообщениеJSON.Документ          = ДокументСсылка;
	СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
	СообщениеJSON.ПараметрыЗапроса  = Новый Массив;
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("usageType", ПолучитьТипИспользованияПриНанесении(Шапка.ТипИспользования));
	
	Если Шапка.ВидПродукции = Перечисления.ВидыПродукцииИСМПТК.МолочнаяПродукция 
		ИЛИ Шапка.ВидПродукции = Перечисления.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты Тогда 
		ТелоЗапроса.Вставить("seriesNumber",   Шапка.НомерПроизводственнойСерии);
		ТелоЗапроса.Вставить("expirationDate", Формат(Шапка.СрокГодности, "ДФ=yyyy-MM-dd"));
		
	ИначеЕсли Шапка.ВидПродукции = Перечисления.ВидыПродукцииИСМПТК.Табачная Тогда
		ТелоЗапроса.Вставить("productionLineId ", Шапка.ИдентификаторПроизводственнойЛинии);
		
	КонецЕсли;
	
	ТелоЗапроса.Вставить("sntins", Новый Массив);
	
	ТаблицаКодовМаркировки = ТабличнаяЧастьКМ.ВыгрузитьКолонку("КодМаркировки");
	Для Каждого СтрокаКод Из ТаблицаКодовМаркировки Цикл
		ДанныеШтрихкода = Новый Структура();
		ДанныеШтрихкода.Вставить("ФорматBase64", Истина);
		ДанныеШтрихкода.Вставить("Штрихкод",     СтрокаКод);
		РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ДекодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
		ТелоЗапроса["sntins"].Добавить(ДанныеШтрихкода.Штрихкод);
	КонецЦикла;
			
	ТелоСообщенияJSON = ОбъектВТекстJSON(ТелоЗапроса, Истина);
	
	СообщениеJSON.ТекстСообщенияJSON = ТелоСообщенияJSON;
	СообщениеJSON.ТипСообщения       = Перечисления.ТипыЗапросовИСМПТК.Исходящий;	
	СообщениеJSON.ВидПродукции       = Шапка.ВидПродукции;
	СообщениеJSON.ТребуетсяПодписание       = Ложь;
	СообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
	
	Возврат СообщениеJSON;
	
КонецФункции

#КонецОбласти

Функция ПолучитьСтатусОтчетаСУЗОбщийМетод(НастройкаОбменаСУЗ, ВидПродукции, ИдентификаторОтчета) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ДанныеОСтатусах",              	Неопределено);
	ВозвращаемоеЗначение.Вставить("СодержимоеНедоступно",           Ложь);
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		ВозвращаемоеЗначение.ТекстОшибки = НСтр("ru = 'Не удалось подключиться к серверу СУЗ, требуется обновление ключа сессии!'");
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	URLЗапроса = "api/v2/extension/report/info?omsId=" + НастройкаОбменаСУЗ.Идентификатор + "&reportId=" + ИдентификаторОтчета;
	Extension = СоответствиеВидовПродукцииURL()[ВидПродукции];
	URLЗапроса = СтрЗаменить(URLЗапроса, "extension", Extension);
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("clientToken", 	 НастройкаОбменаСУЗ.Токен);
	
	РезультатЗапроса = ОтправитьДанныеВСервис(URLЗапроса, Неопределено, Неопределено, "GET", НастройкаОбменаСУЗ, ЗаголовокHTTP);
	РезультатОтправкиЗапроса = ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			Иначе
				ВозвращаемоеЗначение.ДанныеОСтатусах = ДанныеОбработки;
			КонецЕсли;
		
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 400 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 404 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 500 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
		КонецЕсли;
		
	Иначе
		ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область МетодыАПИ

Функция URLЗапроса_V2(URLЗапроса, ВидПродукцииДокумента)
	
	Если ВидПродукцииДокумента = Перечисления.ВидыПродукцииИСМПТК.Табачная Тогда
		ВидПродукции = "tobacco";
	ИначеЕсли ВидПродукцииДокумента = Перечисления.ВидыПродукцииИСМПТК.Обувная Тогда
		ВидПродукции = "shoes";
	ИначеЕсли ВидПродукцииДокумента = Перечисления.ВидыПродукцииИСМПТК.МолочнаяПродукция Тогда
		ВидПродукции = "milk";
	ИначеЕсли ВидПродукцииДокумента = Перечисления.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты Тогда
		ВидПродукции = "pharma";
	ИначеЕсли ВидПродукцииДокумента = Перечисления.ВидыПродукцииИСМПТК.ЛегкаяПромышленность Тогда
		ВидПродукции = "lp";
	ИначеЕсли ВидПродукцииДокумента = Перечисления.ВидыПродукцииИСМПТК.БезалкогольныеНапитки Тогда
		ВидПродукции = "water";
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный вид продукции: %1'"), ВидПродукцииДокумента);
	КонецЕсли;
	
	Возврат СтрЗаменить(URLЗапроса, "extension", ВидПродукции);
	
КонецФункции

Функция Фабрика_XML_API(ИмяСхемы)
	
	ФабрикаИзПакета = Неопределено;
	ФабрикаИзПакета = НоваяФабрикаXDTOИзXSD(ИмяСхемы);
	
	Возврат ФабрикаИзПакета;
	
КонецФункции

Функция НоваяФабрикаXDTOИзXSD(Знач ИмяМакета) Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xsd");
	ПолучитьОбщийМакет(ИмяМакета).Записать(ИмяВременногоФайла, "UTF-8");
	НоваяФабрикаXDTO = СоздатьФабрикуXDTO(ИмяВременногоФайла);
	
	ОбщегоНазначенияИСМПТККлиентСервер.УдалитьВременныеФайлы(ИмяВременногоФайла);
	
	Возврат НоваяФабрикаXDTO;
	
КонецФункции

Функция ПолучитьПространствоИменИСМПТ()
	
	АдресаСерверовИСМПТ = ИнтеграцияИСМПТКВызовСервера.ПолучитьАдресаСерверовИС();
	АдресИСМПТ = ИнтеграцияИСМПТКВызовСервера.ПроверитьНаличиеПротоколаВАдресе(АдресаСерверовИСМПТ.АдресИСМПТ);
	АдресСУЗ   = ИнтеграцияИСМПТКВызовСервера.ПроверитьНаличиеПротоколаВАдресе(АдресаСерверовИСМПТ.АдресСУЗ);
	
	АдресИСМПТ = "https://stage.ismet.kz/";
	
	Возврат АдресИСМПТ;
	
КонецФункции

Процедура ДобавитьПараметрВТелоЗапроса(ТекстОтправки, ИмяПараметра, ЗначениеПараметра, РазделительТелаЗапроса)
	
	Если ТекстОтправки="" Тогда
		ДобавитьСтрокуСРазделителем(ТекстОтправки, "--" + РазделительТелаЗапроса);
	КонецЕсли;
	
	ДобавитьСтрокуСРазделителем(ТекстОтправки, "Content-Disposition: form-data; name="""+ИмяПараметра+"""" + Символы.ВК + Символы.ПС);
	ДобавитьСтрокуСРазделителем(ТекстОтправки, ЗначениеПараметра);
	ДобавитьСтрокуСРазделителем(ТекстОтправки, "--" + РазделительТелаЗапроса);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСОшибками

// Сформировать текст ошибки по результату отправки запроса.
//
// Параметры:
//  Заголовок - Строка - Заголовок ошибки, например: Параметры авторизации не получены.
//  РезультатОтправкиЗапроса - Структура - Результат отправки HTTP-запроса:
//  * ЗапросОтправлен             - Булево - признак того, что сообщение отправлено.
//  * ОтветПолучен                - Булево - признак того, что сообщение получено.
//  * КодСостояния                - Число  - Код состояния HTTP-запроса.
//  * ТекстОшибки                 - Строка - текст ошибки, если таковая возникла.
//  * ТекстВходящегоСообщенияJSON - Строка - текст ответа, на отправленное сообщение.
// Возвращаемое значение:
//  Строка - Текст ошибки.
Функция ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса) Экспорт
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда

		ТекстОшибки = НСтр("ru = 'При выполнении запроса к серверу ""%1"" возникла ошибка.'")
		            + Символы.ПС
					+ НСтр("ru = 'Код состояния HTTP: %2.'")
					+ Символы.ПС
				    + НСтр("ru = 'Текст ошибки: %3.'");
		ТекстОшибки = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, URLЗапроса, РезультатОтправкиЗапроса.КодСостояния, РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);

	Иначе
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'При отправке запроса %1 возникла ошибка. Текст ошибки: %2'"), URLЗапроса, РезультатОтправкиЗапроса.ТекстОшибки);

	КонецЕсли;
	
	Возврат ТекстОшибки;

КонецФункции

Функция ЭтоОшибка(РезультатОперации, ИнформацияОбОшибке = Неопределено) Экспорт
	
	ИнформацияОбОшибке = Новый Структура("ПодробноеПредставление");
	КодСостояния = РезультатОперации.КодСостояния;
	Результат = Истина;
	Если КодСостояния = 200 ИЛИ КодСостояния = 201 ИЛИ КодСостояния = 202 Тогда
		//коды успешного выполнения запроса
		Результат = Ложь;
	ИначеЕсли КодСостояния = 400 Тогда
		ОбработатьОшибкиJSON(РезультатОперации.ТекстОтвета, ИнформацияОбОшибке);
		Результат = Истина;
	ИначеЕсли КодСостояния = 401 Тогда
		ОбработатьОшибкиXML(РезультатОперации.ТекстОтвета, ИнформацияОбОшибке);
		Результат = Истина;
	ИначеЕсли КодСостояния = 402 Тогда
		ИнформацияОбОшибке.ПодробноеПредставление = нСтр("ru='Ошибка в атрибутивном составе тела запроса (Код 402)'");
		Результат = Истина;
	ИначеЕсли КодСостояния = 403 Тогда
		ОбработатьОшибкиJSON(РезультатОперации.ТекстОтвета, ИнформацияОбОшибке);
		Результат = Истина;
	ИначеЕсли КодСостояния = 404 Тогда
		ОбработатьОшибкиJSON(РезультатОперации.ТекстОтвета, ИнформацияОбОшибке);
		Результат = Истина;
	ИначеЕсли КодСостояния = 409 Тогда
		ИнформацияОбОшибке.ПодробноеПредставление = нСтр("ru='Запрос не может быть выполнен из-за конфликтного обращения к ресурсу (Код 409)'");
		Результат = Истина;
	ИначеЕсли КодСостояния = 410 Тогда
		ИнформацияОбОшибке.ПодробноеПредставление = нСтр("ru='Ресурс ранее был доступен по указанному URL, но сейчас он удалён и недоступен (Код 410)'");
		Результат = Истина;
	ИначеЕсли КодСостояния = 413 Тогда
		ОбработатьОшибкиJSON(РезультатОперации.ТекстОтвета, ИнформацияОбОшибке);
		Результат = Истина;
	ИначеЕсли КодСостояния = 500 Тогда
		ОбработатьОшибкиJSON(РезультатОперации.ТекстОтвета, ИнформацияОбОшибке);
		Результат = Истина;
	ИначеЕсли КодСостояния = 503 Тогда
		ОбработатьОшибкиJSON(РезультатОперации.ТекстОтвета, ИнформацияОбОшибке);
		Результат = Истина;
	ИначеЕсли КодСостояния = 504 Тогда
		ОбработатьОшибкиJSON(РезультатОперации.ТекстОтвета, ИнформацияОбОшибке);
		Результат = Истина;
	ИначеЕсли КодСостояния = 418 Тогда
		ОбработатьОшибкиJSON(РезультатОперации.ТекстОтвета, ИнформацияОбОшибке);
		Результат = Истина;
	Иначе
		//Неизвестный код состояния ответа сервиса
		ИнформацияОбОшибке.ПодробноеПредставление = СтрШаблон(нСтр("ru='Неизвестный код состояния ответа сервера: ""%1"". Текст ответа: %2'"), КодСостояния, РезультатОперации.ТекстОтвета);
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьОшибкиJSON(ТекстОшибки, ИнформацияОбОшибке)
	
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТекстОшибки);
		
		Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение НСтр("ru = 'Не получен ответ от сервера (ошибка 404).'");
		КонецЕсли;
		
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON);
		
		//Проверим на варианты заполнения
		Если Не ОбъектXDTO.Свойства().Получить("error_message") = Неопределено Тогда
			ИнформацияОбОшибке.ПодробноеПредставление = ОбъектXDTO.error_message;
		ИначеЕсли Не ОбъектXDTO.Свойства().Получить("description") = Неопределено Тогда
			ИнформацияОбОшибке.ПодробноеПредставление = ОбъектXDTO.description;
		ИначеЕсли Не ОбъектXDTO.Свойства().Получить("description") = Неопределено Тогда
			ИнформацияОбОшибке.ПодробноеПредставление = ОбъектXDTO.description;
		Иначе
			ПредставлениеОшибки = ИнформацияОбОшибке();
			ИнформацияОбОшибке.ПодробноеПредставление = НСтр("ru='Ошибка при чтении ответа сервера: '") + ПредставлениеОшибки.Описание;
		КонецЕсли;
		
	Исключение
		ПредставлениеОшибки = ИнформацияОбОшибке();
		ИнформацияОбОшибке.ПодробноеПредставление = НСтр("ru='Ошибка при чтении ответа сервера: '") + ПредставлениеОшибки.Описание;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьОшибкиXML(ТекстОшибки, ИнформацияОбОшибке)
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ТекстОшибки);
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		Если СтрНайти(ТекстОшибки,"InvalidTokenException") <> 0 Тогда
			ИнформацияОбОшибке.ПодробноеПредставление = СтрШаблон(нСтр("ru='Ошибка токена: %1'"), ОбъектXDTO.error);
		ИначеЕсли СтрНайти(ТекстОшибки,"UnauthorizedException") <> 0 Тогда
			ИнформацияОбОшибке.ПодробноеПредставление = СтрШаблон(нСтр("ru='Ошибка доступа: %1 (%2)'"), ОбъектXDTO.error, ОбъектXDTO.error_description);
		КонецЕсли;
	Исключение
		ИнформацияОбОшибке.ПодробноеПредставление = нСтр("ru='Ошибка при чтении ответа сервера: '") + ИнформацияОбОшибке();
	КонецПопытки;
	
КонецПроцедуры

//Заполняет информацию об ошибках в табличную часть документа
//
Процедура ЗаполнитьОшибкиДокумента(СсылкаНаДокумент, ПредставлениеОшибки, ОчищатьТаблицу = Ложь)
	
	Попытка
		ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();
		
		Если ДокументОбъект.Метаданные().ТабличныеЧасти.Найти("Ошибки") = Неопределено Тогда
			ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОбновленииДокументаССервера()
						   + Символы.ПС 
						   + ПредставлениеОшибки;
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Возврат
		КонецЕсли;
		
		Если ОчищатьТаблицу Тогда
			ДокументОбъект.Ошибки.Очистить();
		КонецЕсли;
		ОшибкиСтрока = ДокументОбъект.Ошибки.Добавить();
		ОшибкиСтрока.Текст = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриОбновленииДокументаССервера()
						   + Символы.ПС 
						   + ПредставлениеОшибки;
		ДокументОбъект.Записать();
		
	Исключение
		   //ОписаниеОшибки()
	КонецПопытки; 
	
КонецПроцедуры

//Заполняет информацию об ошибках в табличную часть документа
//
Процедура ОчиститьОшибкиДокумента(СсылкаНаДокумент)
	
	Попытка
		ДокументОбъект = СсылкаНаДокумент.ПолучитьОбъект();
		ДокументОбъект.Ошибки.Очистить();
		ДокументОбъект.Записать();
	Исключение
		   //ОписаниеОшибки()
	КонецПопытки; 
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеНаборовДанных

Функция МассивГруппСтрокПоGTINИКоличеству(ТабличнаяЧастьТовары)
	
	МаксимальноеКоличествоСтрокВЗаказе = 10;
		
	МассивГруппСтрок = Новый Массив;
	
	ТаблицаПодсчетаGTIN = ТабличнаяЧастьТовары.Скопировать(, "GTIN,КоличествоСтрок");
	ТаблицаПодсчетаGTIN.Свернуть("GTIN", "КоличествоСтрок");
	ТабличнаяЧастьТовары.Индексы.Добавить("GTIN");

	Пока Истина Цикл
		
		ТаблицаПодсчетаGTIN.Сортировать("КоличествоСтрок Убыв");
		
		ТекущаяГруппаСтрок = Новый Массив;
		
		Для Каждого СтрокаТаблицыПодсчета Из ТаблицаПодсчетаGTIN Цикл
			
			Если СтрокаТаблицыПодсчета.КоличествоСтрок = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПоискаСтрок = Новый Структура("GTIN, СтрокаДобавлена", СтрокаТаблицыПодсчета.GTIN, Ложь);
			ПоискСтрокТовары     = ТабличнаяЧастьТовары.НайтиСтроки(СтруктураПоискаСтрок);
			
			ВсеСтрокиПоGTINВыбраны = Истина;
			Для Каждого СтрокаТаблицы Из ПоискСтрокТовары Цикл
				Если ТекущаяГруппаСтрок.Количество() = МаксимальноеКоличествоСтрокВЗаказе Тогда
					ВсеСтрокиПоGTINВыбраны = Ложь;
				Иначе
					ТекущаяГруппаСтрок.Добавить(СтрокаТаблицы);
					СтрокаТаблицы.СтрокаДобавлена = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если ВсеСтрокиПоGTINВыбраны Тогда
				СтрокаТаблицыПодсчета.КоличествоСтрок = СтрокаТаблицыПодсчета.КоличествоСтрок - ПоискСтрокТовары.Количество();
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТекущаяГруппаСтрок.Количество() Тогда
			МассивГруппСтрок.Добавить(ТекущаяГруппаСтрок);
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивГруппСтрок;

КонецФункции

Функция ПолучитьТаблицуКодовGTIN(ТабличнаяЧасть, Организация, НужноОповеститьОбОшибке = Ложь) Экспорт
	
	ПараметрыЗапросаКлючаСессии   = ИнтеграцияИСМПТККлиентСервер.ПараметрыЗапросаКлючаСессии_ИСМП(Организация);
	КлючСессии = ИнтерфейсИСМПТКВызовСервера.ПроверитьОбновитьКлючСессииИСМПТ(ПараметрыЗапросаКлючаСессии, Неопределено, Ложь);
	
	РезультатЗапроса = ЗапроситьИтогиПоАгрегированнымКМ(ТабличнаяЧасть.ВыгрузитьКолонку("КодИдентификации"), Организация, КлючСессии);
	
	Если Не ЗначениеЗаполнено(РезультатЗапроса.ТекстОшибки) Тогда 
		Если РезультатЗапроса.ДанныеОбАгрегации["gtinsCounts"].Количество() = 0 Тогда
			Если НужноОповеститьОбОшибке Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось получить информацию об актуальных итогах с сервера: данные не обнаружены. Итоги были рассчитаны непосредственно по данным таблицы ""Марки"".'");
				ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			Возврат ВернутьИтогиПоТаблицеМарокИСМПТ(ТабличнаяЧасть);
		Иначе 
			Возврат РезультатЗапроса.ДанныеОбАгрегации["gtinsCounts"];
		КонецЕсли;
	Иначе 
		Если НужноОповеститьОбОшибке Тогда
			//Для случаев, когда обработчик вызывается командой расчета итогов в документе,
			//а не при отправке на сервер самого документа
			ТекстСообщения = НСтр("ru = 'При выполнении запроса к серверу ИС МПТ для получения актуальных итогов произошла ошибка. Итоги были рассчитаны непосредственно по данным таблицы ""Марки"".'");
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			ТекстСообщенияСервер = НСтр("ru = 'Ошибка сервера: '") + РезультатЗапроса.ТекстОшибки;
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияСервер);
		КонецЕсли;
		
		Возврат ВернутьИтогиПоТаблицеМарокИСМПТ(ТабличнаяЧасть);
		
	КонецЕсли;
	
КонецФункции

Функция ВернутьИтогиПоТаблицеМарокИСМПТ(ТабличнаяЧасть)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабличнаяЧастьДокумента.GTIN КАК GTIN,
	|	ТабличнаяЧастьДокумента.Количество КАК Количество
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	&ТабличнаяЧасть КАК ТабличнаяЧастьДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.GTIN КАК Ключ,
	|	СУММА(ДанныеДокумента.Количество) КАК Значение
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.GTIN";
	
	Запрос.УстановитьПараметр("ТабличнаяЧасть", ТабличнаяЧасть);
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаКодов = РезультатЗапроса.Выгрузить();
	
	Возврат ТаблицаКодов;
	
КонецФункции

Процедура ЗаполнитьРеквизитыGTINПоДаннымРазбораКода(НоваяСтрока, ДанныеРазбора, НайденнаяНоменклатура, СообщенияОбОшибках = Неопределено) 
	
	Если СообщенияОбОшибках = Неопределено Тогда
		СообщенияОбОшибках = Новый Соответствие();
	КонецЕсли;
	
	Если ДанныеРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Логистическая") Тогда
		//Логистические (транспортные) упаковки в зависимости от Товарной группы могут быть в двух форматах:
		//GS-128 (code128) или в его упрощенном виде - SSCC. Первый вариант допускает наличие дополнительных данных (групп идентификации),
		//использование букв, при этом в доп. группах может содержаться информация о товарах. 
		//Второй - только цифры и строго прописанные группы данных, при этом информации о товарах там не содержится.
		//Соответственно, если разбирался штрихкод SSCC, данные о GTIN отсутствуют.
		//Если GS-128, то присутствуют. 
		Если Не ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN") Тогда
			GTIN = "";
			НоваяСтрока.EAN  = ""; 
		Иначе
			GTIN = ДанныеРазбора.СоставКодаМаркировки.GTIN;
			НоваяСтрока.EAN  = ДанныеРазбора.СоставКодаМаркировки.EAN;
		КонецЕсли;
			
		GTINВерхнегоУровня = "";
		НайденнаяНоменклатура = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьПустуюСсылкуНоменклатура();
	ИначеЕсли ДанныеРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИСМПТК.Групповая") Тогда
		GTIN = "";
		GTINВерхнегоУровня = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.GTINПоКодуМаркировки(ДанныеРазбора.КодМаркировки);
		НоваяСтрока.EAN    = ДанныеРазбора.СоставКодаМаркировки.EAN;
		EANВерхнегоУровня  = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.EANПоGTIN(GTINВерхнегоУровня);
		ДанныеНоменклатуры = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, EANВерхнегоУровня,, СообщенияОбОшибках);
		Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
			НайденнаяНоменклатура = ДанныеНоменклатуры.Номенклатура;
		Иначе
			НайденнаяНоменклатура = ДанныеНоменклатуры;
		КонецЕсли;
	Иначе
		GTIN = ДанныеРазбора.СоставКодаМаркировки.GTIN;
		GTINВерхнегоУровня = ДанныеРазбора.СоставКодаМаркировки.GTIN;
		НоваяСтрока.EAN    = ДанныеРазбора.СоставКодаМаркировки.EAN;
		ДанныеНоменклатуры = ОбщегоНазначенияИСМПТКПереопределяемый.ПолучитьДанныеНоменклатурыИзРегистраШтрихкодовПоШтрихкоду(, НоваяСтрока.EAN,, СообщенияОбОшибках);
		Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
			НайденнаяНоменклатура = ДанныеНоменклатуры.Номенклатура;
		Иначе
			НайденнаяНоменклатура = ДанныеНоменклатуры;
		КонецЕсли;
	КонецЕсли;	
	
	НоваяСтрока.GTIN = GTIN;
	НоваяСтрока.GTINВерхнегоУровня = GTINВерхнегоУровня;
	НоваяСтрока.Номенклатура = НайденнаяНоменклатура;
			
КонецПроцедуры

Функция НовыйМассивЗагружаемыхДокументов(Знач ОтветСервера, Знач СтруктурнаяЕдиница, НаправлениеДокумента)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ОтветСервера);
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON);
	
	Если ОбъектXDTO.count = 0 Тогда
		//в ответе вернулся пустой список
		Возврат Новый Массив;
	КонецЕсли;
	
	МассивИдентификаторов = Новый Массив;
	СоответствиеНомерам = Новый Соответствие;
	//ТипЗнч(ОбъектXDTO.items.items) = Тип("СписокXDTO")
	//ТипЗнч(ОбъектXDTO.items.items) = Тип("ОбъектXDTO")
	Если ТипЗнч(ОбъектXDTO.items.items) = Тип("СписокXDTO") Тогда
		Для каждого ЭлементСписка Из ОбъектXDTO.items.items Цикл
			//пропускаем элементы с типом 1005 - УОР
			Если ЭлементСписка.type <> 1000 И ЭлементСписка.type <> 1100 Тогда
				Продолжить;
			КонецЕсли;
			МассивИдентификаторов.Добавить(ЭлементСписка.id);
			ДанныеДокумента = Новый Структура("Номер, Дата, Статус, Тип", ЭлементСписка.number, ЭлементСписка.date, ЭлементСписка.status, ЭлементСписка.type);
			СоответствиеНомерам.Вставить(ЭлементСписка.id, ДанныеДокумента);
		КонецЦикла;
	Иначе
		ЭлементСписка = ОбъектXDTO.items.items;
		Если ЭлементСписка.type = 1000 ИЛИ ЭлементСписка.type = 1100 Тогда
			МассивИдентификаторов.Добавить(ЭлементСписка.id);
			ДанныеДокумента = Новый Структура("Номер, Дата, Статус, Тип", ЭлементСписка.number, ЭлементСписка.date, ЭлементСписка.status, ЭлементСписка.type);
			СоответствиеНомерам.Вставить(ЭлементСписка.id, ДанныеДокумента);
		КонецЕсли;
	КонецЕсли;
	
	СуществующиеДокументы = Новый Соответствие;
	// Заполнить соответствие пустыми ссылками.
	ПустаяСсылка = Документы.АктПриемаПередачиИСМПТК.ПустаяСсылка();
	Для Каждого ЭлементМассива Из МассивИдентификаторов Цикл
		СуществующиеДокументы.Вставить(ЭлементМассива, ПустаяСсылка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АктПриемаПередачиИСМПТ.Ссылка КАК НайденнаяСсылка,
	|	АктПриемаПередачиИСМПТ.Идентификатор КАК Идентификатор
	|ИЗ
	|	Документ.АктПриемаПередачиИСМПТК КАК АктПриемаПередачиИСМПТ
	|ГДЕ
	|	АктПриемаПередачиИСМПТ.Идентификатор В(&Идентификаторы)";
	
	Запрос.УстановитьПараметр("Идентификаторы", МассивИдентификаторов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СуществующиеДокументы.Вставить(Выборка.Идентификатор, Выборка.НайденнаяСсылка);
	КонецЦикла;
	
	МассивДокументов = Новый Массив;
	Для Каждого ЭлементКоллекции Из СуществующиеДокументы Цикл
		
		Идентификатор = ЭлементКоллекции.Ключ;
		Ссылка = ЭлементКоллекции.Значение;
		Если Ссылка.Пустая() Тогда
			НовыйДокумент = Документы.АктПриемаПередачиИСМПТК.СоздатьДокумент();
			
			НовыйДокумент.Дата = ТекущаяДатаСеанса();
			НовыйДокумент.Идентификатор = Идентификатор;
			
			ДанныеДокумента = СоответствиеНомерам.Получить(Идентификатор);
			
			НовыйДокумент.НомерИСМПТ = ДанныеДокумента.Номер;
			НовыйДокумент.ДатаВИСМПТ = Дата(1970,1,1,0,0,0) + ДанныеДокумента.Дата;
			НовыйДокумент.ТипАкта 	 = ?(ДанныеДокумента.Тип = 1000, Перечисления.ВидыДокументаИСМПТК.Исходный, Перечисления.ВидыДокументаИСМПТК.Исправленный);
		
			Статус = ПолучитьСтатусДокументаПоКоду(ДанныеДокумента.Статус);
			
			Если Статус <> Неопределено Тогда
				НовыйДокумент.Статус = Статус;
			КонецЕсли;
			
			НовыйДокумент.Направление = НаправлениеДокумента;
			
			ТекущийПользователь = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ТекущийПользователь();
			
			НовыйДокумент.Автор = ТекущийПользователь;
			НовыйДокумент.Организация = СтруктурнаяЕдиница;
			
			МассивДокументов.Добавить(НовыйДокумент);
		Иначе
			МассивДокументов.Добавить(Ссылка.ПолучитьОбъект());
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивДокументов;
	
КонецФункции

#КонецОбласти

#Область УстановкаСоответствийЗначений

// Преобразовывает текстовое представление статуса кода маркировки в значение перечисления.
//
// Параметры:
//  ЗначениеПоиска - Строка - значение для перекодировки
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыКодовМаркировкиСУЗ - статус кода маркировки.
//
Функция СтатусБизнесЗаказа(Знач ЗначениеПоиска) Экспорт
	
	ЗначениеПоиска = ВРег(ЗначениеПоиска);
	
	Если ЗначениеПоиска = "CREATED" Тогда
		Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Создан;
	ИначеЕсли ЗначениеПоиска = "PENDING" Тогда
		Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.ПринятКОбработке;
	ИначеЕсли ЗначениеПоиска = "APPROVED" Тогда
		Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.ПодтвержденИСМП;
	ИначеЕсли ЗначениеПоиска = "READY" Тогда
		Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.КодыМаркировкиЭмитированы;
	ИначеЕсли ЗначениеПоиска = "CLOSED" Тогда
		Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.Выполнен;
	ИначеЕсли ЗначениеПоиска = "DECLINED" Тогда
		Возврат Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМПТК.НеПодтвержденИСМП;
	КонецЕсли;
	
	ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный статус отчета СУЗ: %1'"),
			ЗначениеПоиска);
	
КонецФункции

// Преобразовывает текстовое представление статуса кода маркировки в значение перечисления.
//
// Параметры:
//  ЗначениеПоиска - Строка - значение для перекодировки
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыКодовМаркировкиСУЗ - статус кода маркировки.
//
Функция СтатусОбработкиОтчета(Знач ЗначениеПоиска) Экспорт
	
	ЗначениеПоиска = ВРег(ЗначениеПоиска);
	
	Если ЗначениеПоиска = "PENDING" Тогда
		Возврат Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.ВОжидании;
	ИначеЕсли ЗначениеПоиска = "READY_TO_SEND" Тогда
		Возврат Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.ГотовКОтправке;
	ИначеЕсли ЗначениеПоиска = "REJECTED" Тогда
		Возврат Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.Отклонен;
	ИначеЕсли ЗначениеПоиска = "SENT" Тогда
		Возврат Перечисления.СтатусыОбработкиОтчетовСУЗИСМПТК.Отправлен;
	КонецЕсли;
	
	ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный статус отчета СУЗ: %1'"),
			ЗначениеПоиска);
	
КонецФункции

// Перекодирует способ выпуска товаров в для обмена с СУЗ ИС МП.
//
// Параметры:
//  ЗначениеПоиска - Строка, ПеречислениеСсылка.СпособыВводаВОборотСУЗИСМПТК - значение для перекодировки.
// 
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.СпособыВводаВОборотСУЗИСМПТК - Результат перекодирования.
//
Функция СпособВыпускаВОборот_СУЗ(Знач ЗначениеПоиска, Назначение = "СУЗ") Экспорт
	
	Если ЗначениеПоиска = "PRODUCTION" Или ЗначениеПоиска = "LOCAL" Или ЗначениеПоиска = "PRODUCED_IN_RF" Тогда
		Результат = Перечисления.СпособыВводаВОборотСУЗИСМПТК.Производство;
	ИначеЕсли ЗначениеПоиска = "IMPORT" Или ЗначениеПоиска = "FOREIGN" Или ЗначениеПоиска = "IMPORTED_INTO_RF" Тогда
		Результат = Перечисления.СпособыВводаВОборотСУЗИСМПТК.Импорт;
	ИначеЕсли ЗначениеПоиска = "REMAINS" Тогда
		Результат = Перечисления.СпособыВводаВОборотСУЗИСМПТК.МаркировкаОстатков;
	ИначеЕсли ЗначениеПоиска = "COMMISSION" Тогда
		Результат = Перечисления.СпособыВводаВОборотСУЗИСМПТК.ПринятНаКомиссию;
	ИначеЕсли ЗначениеПоиска = "REMARK" Тогда
		Результат = Перечисления.СпособыВводаВОборотСУЗИСМПТК.Перемаркировка;
		
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗИСМПТК.Производство И Назначение = "СУЗ" Тогда
		Результат = "PRODUCTION";
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗИСМПТК.Импорт И Назначение = "СУЗ" Тогда
		Результат = "IMPORT";
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗИСМПТК.МаркировкаОстатков И Назначение = "СУЗ" Тогда
		Результат = "REMAINS";
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗИСМПТК.ПринятНаКомиссию И Назначение = "СУЗ" Тогда
		Результат = "COMMISSION";
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗИСМПТК.Перемаркировка И Назначение = "СУЗ" Тогда
		Результат = "REMARK";
		
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗИСМПТК.Производство И Назначение = "ИСМП" Тогда
		Результат = "LOCAL";
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗИСМПТК.Импорт И Назначение = "ИСМП" Тогда
		Результат = "FOREIGN";
		
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗИСМПТК.Производство И Назначение = "ОСТАТКИ" Тогда
		Результат = "PRODUCED_IN_RF";
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗИСМПТК.Импорт И Назначение = "ОСТАТКИ" Тогда
		Результат = "IMPORTED_INTO_RF";
	
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗИСМПТК.МаркировкаОстатков Тогда
		Результат = "REMAINS";
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗИСМПТК.ПринятНаКомиссию Тогда
		Результат = "COMMISSION";
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыВводаВОборотСУЗИСМПТК.Перемаркировка Тогда
		Результат = "REMARK";
		
	Иначе
		ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный способ выпуска в оборот: %1'"),
			ЗначениеПоиска);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТипыАгрегации_СУЗ(Знач ЗначениеПоиска) Экспорт
	
	Если ЗначениеПоиска = Перечисления.ТипыАгрегацииИСМПТК.НоваяАгрегация Тогда
		Результат = "AGGREGATION";
	ИначеЕсли ЗначениеПоиска = Перечисления.ТипыАгрегацииИСМПТК.ОбновлениеСуществующейАгрегации Тогда
		Результат = "UPDATE";
	Иначе
		ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный способ агрегации: %1'"),
			ЗначениеПоиска);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВидДокументаСертификации(Знач ЗначениеПоиска) Экспорт
	
	Если ЗначениеПоиска = "CONFORMITY_DECLARATION" Тогда
		Результат = Перечисления.ВидыДокументовОбязательнойСертификацииИСМПТК.ДекларацияСоответствия;
	ИначеЕсли ЗначениеПоиска = "CONFORMITY_CERTIFICATE" Тогда
		Результат = Перечисления.ВидыДокументовОбязательнойСертификацииИСМПТК.СертификатСоответствия;
	
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыДокументовОбязательнойСертификацииИСМПТК.ДекларацияСоответствия Тогда
		Результат = "CONFORMITY_DECLARATION";
	ИначеЕсли ЗначениеПоиска = Перечисления.ВидыДокументовОбязательнойСертификацииИСМПТК.СертификатСоответствия Тогда
		Результат = "CONFORMITY_CERTIFICATE";
	Иначе
		ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный вид документа сертификации: %1'"),
			ЗначениеПоиска);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Перекодирует шаблон кода маркировки для обмена с СУЗ ИС МП.
//
// Параметры:
//  ЗначениеПоиска - Строка, ПеречислениеСсылка.ШаблоныКодовМаркировкиСУЗИСМПТК - значение для перекодировки.
// 
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.ШаблоныКодовМаркировкиСУЗИСМПТК - Результат перекодирования.
//
Функция ШаблонКодаМаркировки(Знач ЗначениеПоиска) Экспорт
	
	// Значение параметра templateId
	Если ЗначениеПоиска = 1 Тогда
		Результат = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь;
	ИначеЕсли ЗначениеПоиска = 20 Тогда
		Результат = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.МолочнаяПродукция;
	ИначеЕсли ЗначениеПоиска = 10 Тогда
		Результат = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛегкаяПромышленность;
	ИначеЕсли ЗначениеПоиска = 16 Тогда
		Результат = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.УпакованнаяВодаИНапитки;
	ИначеЕсли ЗначениеПоиска = 5 Тогда
		Результат = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты;
	ИначеЕсли ЗначениеПоиска = 3 Тогда
		Результат = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек;
	ИначеЕсли ЗначениеПоиска = 4 Тогда
		Результат = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка;
			
	ИначеЕсли ЗначениеПоиска = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь Тогда
		Результат =  1;
	ИначеЕсли ЗначениеПоиска = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.МолочнаяПродукция Тогда
		Результат =  20;
	ИначеЕсли ЗначениеПоиска = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.УпакованнаяВодаИНапитки Тогда
		Результат =  16;
	ИначеЕсли ЗначениеПоиска = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛегкаяПромышленность Тогда
		Результат =  10;
	ИначеЕсли ЗначениеПоиска = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты Тогда
		Результат =  5;
	ИначеЕсли ЗначениеПоиска = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка Тогда
		Результат =  4;
	ИначеЕсли ЗначениеПоиска = Перечисления.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек Тогда
		Результат =  3;
		
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный шаблон кода маркировки: %1'"),
				ЗначениеПоиска);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Перекодирует способ формирования серийного номера кода маркировки для обмена с СУЗ ИС МП.
//
// Параметры:
//  ЗначениеПоиска - Строка, ПеречислениеСсылка.СпособыФормированияСерийногоНомераСУЗИСМПТК - значение для перекодировки.
// 
// Возвращаемое значение:
//  Строка, ПеречислениеСсылка.СпособыФормированияСерийногоНомераСУЗИСМПТК - Результат перекодирования.
//
Функция СпособФормированияСерийногоНомера(Знач ЗначениеПоиска) Экспорт
	
	Если ЗначениеПоиска = "SELF_MADE" Тогда
		Результат = Перечисления.СпособыФормированияСерийногоНомераСУЗИСМПТК.Самостоятельно;
	ИначеЕсли ЗначениеПоиска = "OPERATOR" Тогда
		Результат = Перечисления.СпособыФормированияСерийногоНомераСУЗИСМПТК.Автоматически;
	
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыФормированияСерийногоНомераСУЗИСМПТК.Самостоятельно Тогда
		Результат =  "SELF_MADE";
	ИначеЕсли ЗначениеПоиска = Перечисления.СпособыФормированияСерийногоНомераСУЗИСМПТК.Автоматически Тогда
		Результат =  "OPERATOR";
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный способ формирования серийного номера: %1'"),
				ЗначениеПоиска);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьПредставлениеСостояния(Документ) Экспорт
	
	Если СтрНайти(Документ.Ссылка, "ИСМПТК") Тогда
		Сервис = НСтр("ru = 'ИС МПТ'");
	Иначе
		Сервис = НСтр("ru = 'ИС ЦЭДМ'");
	КонецЕсли;
	
	Если Документ.Состояние = Перечисления.СостоянияДокументовИСМПТК.Сформирован Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ готов к отправке на сервер %1'");
		ПредставлениеСостояния = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ПредставлениеСостояния, Сервис);
		
	ИначеЕсли Документ.Состояние = Перечисления.СостоянияДокументовИСМПТК.Аннулирован Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ аннулирован в системе %1'");
		ПредставлениеСостояния = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ПредставлениеСостояния, Сервис);
		
	ИначеЕсли Документ.Состояние = Перечисления.СостоянияДокументовИСМПТК.Отозван Тогда
		
		Если Документ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияДокументовИСМПТК.Исходящий") Тогда
			ПредставлениеСостояния = НСтр("ru = 'Документ отозван'");
		Иначе
			ПредставлениеСостояния = НСтр("ru = 'Документ отозван отправителем'");
		КонецЕсли;
		
	ИначеЕсли Документ.Состояние = Перечисления.СостоянияДокументовИСМПТК.ПринятОтПоставщика Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ принят от поставщика, требуется сверка данных'");
				
	ИначеЕсли Документ.Состояние = Перечисления.СостоянияДокументовИСМПТК.ДоставленПолучателю Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ доставлен получателю'");
		
	ИначеЕсли Документ.Состояние = Перечисления.СостоянияДокументовИСМПТК.ОтклоненПолучателем Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ отклонен получателем'");
		
	ИначеЕсли Документ.Состояние = Перечисления.СостоянияДокументовИСМПТК.ПодтвержденПолучателем Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ подтвержден получателем'");
		
	ИначеЕсли Документ.Состояние = Перечисления.СостоянияДокументовИСМПТК.ОтклоненСервером Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ отклонен сервером %1, т.к. содержит ошибки'");
		ПредставлениеСостояния = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ПредставлениеСостояния, Сервис); 
		
	ИначеЕсли Документ.Состояние = Перечисления.СостоянияДокументовИСМПТК.ОбрабатываетсяСервером Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ обрабатывается сервером %1'");
		ПредставлениеСостояния = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ПредставлениеСостояния, Сервис); 
		
	ИначеЕсли Документ.Состояние = Перечисления.СостоянияДокументовИСМПТК.ПринятСервером Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ успешно принят сервером %1'");
		ПредставлениеСостояния = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ПредставлениеСостояния, Сервис); 
		
	ИначеЕсли Документ.Состояние = Перечисления.СостоянияДокументовИСМПТК.ОшибкаДанных Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ отклонен сервером %1, т.к. содержит ошибки'");
		ПредставлениеСостояния = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ПредставлениеСостояния, Сервис); 
		
	ИначеЕсли Документ.Состояние = Перечисления.СостоянияДокументовИСМПТК.ПринятПроверен Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'В документе проведена сверка данных, ожидает подтверждения'");
		
	Иначе	
		
		ПредставлениеСостояния = НСтр("ru = 'Документ %Состояние%'");
		ПредставлениеСостояния = СтрЗаменить(ПредставлениеСостояния, "%Состояние%", НРег(Документ.Состояние));
		
	КонецЕсли;
	
	Возврат ПредставлениеСостояния;
	
КонецФункции
	
Функция ПолучитьСостояниеПоСтатусу(Документ) Экспорт

	//ИСЦЭДМ
	Если Документ.Статус = Перечисления.СтатусыДокументовИСЦЭДМ.Черновик Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.Сформирован;
		
	ИначеЕсли Документ.Статус = Перечисления.СтатусыДокументовИСЦЭДМ.Отклонен Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ОтклоненПолучателем;
		
	ИначеЕсли Документ.Статус = Перечисления.СтатусыДокументовИСЦЭДМ.ОжидаетПодтверждение Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ДоставленПолучателю;
		
	ИначеЕсли Документ.Статус = Перечисления.СтатусыДокументовИСЦЭДМ.Принят Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ПринятОтПоставщика;
		
	ИначеЕсли Документ.Статус = Перечисления.СтатусыДокументовИСЦЭДМ.ОшибкаПриПроверке Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ОшибкаДанных;
		
	ИначеЕсли Документ.Статус = Перечисления.СтатусыДокументовИСЦЭДМ.НеОпределен Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.Сформирован;
		
	ИначеЕсли Документ.Статус = Перечисления.СтатусыДокументовИСЦЭДМ.Отозван Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.Отозван;
		
	ИначеЕсли Документ.Статус = Перечисления.СтатусыДокументовИСЦЭДМ.Аннулирован Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.Аннулирован;
		
	ИначеЕсли Документ.Статус = Перечисления.СтатусыДокументовИСЦЭДМ.РасчетИтогов Тогда 
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ПринятСервером;
		
	ИначеЕсли Документ.Статус = Перечисления.СтатусыДокументовИСЦЭДМ.Сформирован Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.Сформирован;
		
	/////////////////
	//ИСМПТ
	ИначеЕсли Документ.Статус = Перечисления.СтатусыДокументовИСМПТК.Черновик Тогда
		
		//Это новый созданный документ для: АПП, УОР, Экспорт ЕАЭС
		Состояние = Перечисления.СостоянияДокументовИСМПТК.Сформирован;
		
	ИначеЕсли Документ.Статус = Перечисления.СтатусыДокументовИСМПТК.Отправлен Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.Сформирован;
		
	ИначеЕсли Документ.Статус = Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку Тогда
		
		Если Документ.Направление = Перечисления.НаправленияДокументовИСМПТК.Входящий Тогда 
			Если Документ.Проверен Тогда
				//Специфическое состояние, выставляется после проведение сверки товаров
				Состояние = Перечисления.СостоянияДокументовИСМПТК.ПринятПроверен;
			Иначе
				Состояние = Перечисления.СостоянияДокументовИСМПТК.ПринятОтПоставщика;
			КонецЕсли;
		Иначе
			Состояние = Перечисления.СостоянияДокументовИСМПТК.ДоставленПолучателю;
		КонецЕсли;
		
	ИначеЕсли Документ.Статус = Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ПодтвержденПолучателем;
		
	ИначеЕсли Документ.Статус = Перечисления.СтатусыДокументовИСМПТК.Отклонен Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ОтклоненПолучателем;
		
	ИначеЕсли Документ.Статус = Перечисления.СтатусыДокументовИСМПТК.Отозван Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.Отозван;
		
	ИначеЕсли Документ.Статус = Перечисления.СтатусыДокументовИСМПТК.Аннулирован Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.Аннулирован;
		
	ИначеЕсли Документ.Статус = Перечисления.СтатусыДокументовИСМПТК.НаСогласовании Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ОбрабатываетсяСервером;
		
	ИначеЕсли Документ.Статус = Перечисления.СтатусыДокументовИСМПТК.Ошибка Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ОтклоненСервером;
		
	ИначеЕсли Документ.Статус = Перечисления.СтатусыДокументовИСМПТК.Проверяется Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ОбрабатываетсяСервером;
		
	ИначеЕсли Документ.Статус = Перечисления.СтатусыДокументовИСМПТК.Оформлен Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ПринятСервером;
		
	ИначеЕсли Документ.Статус = Перечисления.СтатусыДокументовИСМПТК.ОшибкаПриПроверке Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ОшибкаДанных;
		
	ИначеЕсли Документ.Статус = Перечисления.СтатусыДокументовИСМПТК.ОшибкаПриОбработке Тогда
		
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ОтклоненСервером;
		
	ИначеЕсли Документ.Статус = Перечисления.СтатусыДокументовИСМПТК.НеОпределен Тогда
		
		//Это новый созданный документ для: Ввод в оборот, Вывод из оборота, Ввоз ЕАЭС, Ввоз Импорт
		Состояние = Перечисления.СостоянияДокументовИСМПТК.Сформирован;
		
	ИначеЕсли Документ.Статус = Перечисления.СтатусыДокументовИСМПТК.Новое Тогда  
		
		//Для Увед. о расхождениях. 
		//У получателя это статус Новое, у отправителя Отправлен
		Состояние = Перечисления.СостоянияДокументовИСМПТК.ПринятСервером;
		
	Иначе	
		//Пустая ссылка может привести к ошибкам при открытии из-за проверок доступности команд по значению состояния
		Состояние = Перечисления.СостоянияДокументовИСМПТК.Сформирован; 
	КонецЕсли;	
	
	Возврат Состояние;

КонецФункции

Функция СоответствиеВидовПродукцииURL()
	
	СоответствиеВидовПродкуцииURL = Новый Соответствие;
	СоответствиеВидовПродкуцииURL.Вставить(Перечисления.ВидыПродукцииИСМПТК.Обувная, 				"shoes");
	СоответствиеВидовПродкуцииURL.Вставить(Перечисления.ВидыПродукцииИСМПТК.Табачная, 				"tobacco");
	СоответствиеВидовПродкуцииURL.Вставить(Перечисления.ВидыПродукцииИСМПТК.Алкогольная, 			"alcohol");
	СоответствиеВидовПродкуцииURL.Вставить(Перечисления.ВидыПродукцииИСМПТК.МолочнаяПродукция, 		"milk");
	СоответствиеВидовПродкуцииURL.Вставить(Перечисления.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты, "pharma");
	СоответствиеВидовПродкуцииURL.Вставить(Перечисления.ВидыПродукцииИСМПТК.ЛегкаяПромышленность, 	"lp");
	
	Возврат СоответствиеВидовПродкуцииURL;
	
КонецФункции

Функция ПолучитьИдентификаторШаблонаПоШаблонуКода(Шаблон)
	
	Если Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.БлокТабачныхПачек") Тогда
		Возврат 3;
	Иначе
		Возврат 4; //Табачная пачка
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТипИспользованияПриНанесении(ТипИспользования) 
	
	Если ТипИспользования = ПредопределенноеЗначение("Перечисление.ТипыИспользованияСУЗИСМПТК.НанесениеПодтверждено") Тогда
		Возврат "VERIFIED";
	ИначеЕсли ТипИспользования = ПредопределенноеЗначение("Перечисление.ТипыИспользованияСУЗИСМПТК.Напечатан") Тогда
		Возврат "PRINTED";
	Иначе
		Возврат "VERIFIED";
	КонецЕсли;
	
КонецФункции

Функция СтатусСверкиДляСервера(Статус)
	
	Если Статус = Перечисления.СтатусыСверкиКодаИСМПТК.НеНайден Тогда
		Возврат "NOT_FOUND";
	ИначеЕсли Статус = Перечисления.СтатусыСверкиКодаИСМПТК.Найден Тогда
		Возврат "FOUND";
	ИначеЕсли Статус = Перечисления.СтатусыСверкиКодаИСМПТК.Исключен Тогда
		Возврат "EXCLUDED";
	ИначеЕсли Статус = Перечисления.СтатусыСверкиКодаИСМПТК.Добавлен Тогда
		Возврат "ADDED";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция СтатусСверкиПоКоду(СтатусСервера)
	
	Если СтатусСервера = "NOT_FOUND" Тогда
		Возврат Перечисления.СтатусыСверкиКодаИСМПТК.НеНайден;
	ИначеЕсли СтатусСервера = "FOUND" Тогда
		Возврат Перечисления.СтатусыСверкиКодаИСМПТК.Найден;
	ИначеЕсли СтатусСервера = "EXCLUDED" Тогда
		Возврат Перечисления.СтатусыСверкиКодаИСМПТК.Исключен;
	ИначеЕсли СтатусСервера = "ADDED" Тогда
		Возврат Перечисления.СтатусыСверкиКодаИСМПТК.Добавлен;
	Иначе
		Возврат Перечисления.СтатусыСверкиКодаИСМПТК.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтатусДокументаПоКоду(КодСтатуса)
	
	Если КодСтатуса = 0 Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.Черновик;
	ИначеЕсли КодСтатуса = 1 Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.Отправлен;
	ИначеЕсли КодСтатуса = 2 Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.Новое;
	ИначеЕсли КодСтатуса = 3 
		ИЛИ КодСтатуса = "WAITING_ACCEPTANCE" Тогда //Увед.об экспорте
		Возврат Перечисления.СтатусыДокументовИСМПТК.ОжидаетПриемку;
	ИначеЕсли КодСтатуса = 4 
		ИЛИ КодСтатуса = "ACCEPTED" Тогда //Увед.об экспортеТогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.ПринятПодтвержден;
	ИначеЕсли КодСтатуса = 5 Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.Отклонен;
	ИначеЕсли КодСтатуса = 8 Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.НаСогласовании;
	ИначеЕсли КодСтатуса = 10   //АПП и УОР
		ИЛИ КодСтатуса = "ERROR" Тогда	//Увед.об экспорте
		Возврат Перечисления.СтатусыДокументовИСМПТК.Ошибка;
	ИначеЕсли КодСтатуса = 16 Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.Отозван;
	ИначеЕсли КодСтатуса = 17 Тогда
		Возврат Перечисления.СтатусыДокументовИСМПТК.Аннулирован;
	ИначеЕсли КодСтатуса = 20	//АПП и УОР 
		ИЛИ КодСтатуса = "SENT" Тогда	//Увед.об экспорте
		Возврат Перечисления.СтатусыДокументовИСМПТК.Отправлен;
	ИначеЕсли КодСтатуса = "CHECKING" Тогда	//Увед.об экспорте
		Возврат Перечисления.СтатусыДокументовИСМПТК.Проверяется;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает код причины повторного ввода в оборот для отправки на сервер
//
// Параметры:
//  Причина - ПеречислениеСсылка.ПричиныПовторногоВводаКМВОборотИСМПТ - причина ввода в оборот
// 
//Возвращаемое значение:
//  Число - код причины.
//
Функция КодПричиныПовторногоВвода(Причина)
	
	Результат = Неопределено;
	Если Причина = Перечисления.ПричиныПовторногоВводаКМВОборотИСМПТК.Излишки Тогда
		Результат = 1;
	ИначеЕсли Причина = Перечисления.ПричиныПовторногоВводаКМВОборотИСМПТК.ДоДатыОбязательнойМаркировки Тогда
		Результат = 2;
	ИначеЕсли Причина = Перечисления.ПричиныПовторногоВводаКМВОборотИСМПТК.Конфискат Тогда
		Результат = 3;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции //КодПричиныПовторногоВвода

// Возвращает код причины вывода из оборота для отправки на сервер
//
// Параметры:
//  Причина - ПеречислениеСсылка.ПричиныВыводаКМИзОборотаИСМПТ - причина вывода из оборота
// 
//Возвращаемое значение:
//  Число - код причины.
//
Функция КодПричиныВыводаИзОборота(Причина)
	
	Результат = Неопределено;
	Если Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.Брак Тогда
		Результат = 1;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.Утрата Тогда
		Результат = 2;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.Повреждение Тогда
		Результат = 3;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.Уничтожение Тогда
		Результат = 4;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.ВнутреннееИспользование Тогда
		Результат = 5;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.Образцы Тогда
		Результат = 6;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.ИнтернетТорговля Тогда
		Результат = 7;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.ВозвратФизЛицу Тогда
		Результат = 8;	
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.МедицинскоеНазначение Тогда
		Результат = 9;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.ОтпускПоРецепту Тогда
		Результат = 10;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.ЭкспортЕАЭС Тогда
		Результат = 11;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.ЭкспортТретьиСтраны Тогда
		Результат = 12;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.РозничнаяПродажа Тогда
		Результат = 13;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.ВыбылПереработка Тогда
		Результат = 14;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.ПродажаГосПредприятию Тогда
		Результат = 15;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.ВнутреннееИспользованиеПокупателем Тогда
		Результат = 16;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.Конфискация Тогда
		Результат = 17;
	ИначеЕсли Причина = Перечисления.ПричиныВыводаКМИзОборотаИСМПТК.Другое Тогда
		Результат = 18;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //КодПричиныВыводаИзОборота

#КонецОбласти 

#Область НастройкиОбмена

// Параметры для настройки обмена с СУЗ
//
// Возвращаемое значение:
// 	Структура - Параметры для настройки обмена с СУЗ:
// * Таймаут - Число - Таймаут
// * Порт - Число - Порт
// * Адрес - Строка - Адрес
// * Идентификатор - Строка - Адрес
// * Токен - Строка - Адрес
// * ФорматОбмена - ПеречислениеСсылка.ВерсииФорматаОбменаСУЗ - Формат обмена с СУЗ
Функция НоваяНастройкаОбменаСУЗ() Экспорт

	АдресСУЗКонстанта = ПолучитьАдресаСерверовИС().АдресСУЗ;
	АдресСУЗ = ОбработатьАдресИСМПТКонстанта(АдресСУЗКонстанта);
			
	НастройкиОбмена = Новый Структура;
	НастройкиОбмена.Вставить("Сервер",  АдресСУЗ);
	НастройкиОбмена.Вставить("Порт",    443);
	НастройкиОбмена.Вставить("Таймаут", 60);
	НастройкиОбмена.Вставить("СтанцияУправленияЗаказами", Справочники.СтанцииУправленияЗаказамиИСМПТК.ПустаяСсылка());
	НастройкиОбмена.Вставить("Идентификатор",   "");
	НастройкиОбмена.Вставить("Токен",           "");
	НастройкиОбмена.Вставить("ИмяПользователя", "");
	НастройкиОбмена.Вставить("ИспользоватьЗащищенноеСоединение", Ложь);
	НастройкиОбмена.Вставить("Организация",		Неопределено);
	НастройкиОбмена.Вставить("ПредставлениеСервиса", РаботаСТекстамиИСМПТККлиентСервер.НаименованиеСУЗ());
	
	Возврат НастройкиОбмена;
	
КонецФункции

Функция НастройкиОбменаСУЗ(Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиОбменаСУЗИСМПТК.Организация КАК Организация,
	|	НастройкиОбменаСУЗИСМПТК.СтанцияУправленияЗаказами КАК СтанцияУправленияЗаказами,
	|	НастройкиОбменаСУЗИСМПТК.Адрес КАК Сервер,
	|	НастройкиОбменаСУЗИСМПТК.Порт КАК Порт,
	|	НастройкиОбменаСУЗИСМПТК.Таймаут КАК Таймаут,
	|	НастройкиОбменаСУЗИСМПТК.Токен КАК Токен,
	|	НастройкиОбменаСУЗИСМПТК.ОбменНаСервере КАК ОбменНаСервере,
	|	НастройкиОбменаСУЗИСМПТК.ИспользоватьЗащищенноеСоединение КАК ИспользоватьЗащищенноеСоединение,
	|	НастройкиОбменаСУЗИСМПТК.СтанцияУправленияЗаказами.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.НастройкиОбменаСУЗИСМПТК КАК НастройкиОбменаСУЗИСМПТК
	|ГДЕ
	|	НастройкиОбменаСУЗИСМПТК.Организация = &Организация";
		
	//Получаем предопределенные данные
	АдресСУЗКонстанта  = ПолучитьАдресаСерверовИС().АдресСУЗ;
	АдресСУЗДляЗапроса = ОбработатьАдресИСМПТКонстанта(АдресСУЗКонстанта);
	
	Если НЕ СтрНайти(АдресСУЗКонстанта, "https://") = 0 Тогда
		ПортПоКонстанте    = 443;
		ТаймаутПоКонстанте = 60;
	Иначе
		ПортПоКонстанте    = 80;
		ТаймаутПоКонстанте = 60;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда 
		ТекстСообщения = НСтр("ru = 'Для организации ""%1"" не определена настройка взаимодействия с СУЗ.'");
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Организация);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	МассивНастроек = Новый Массив();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Сервер = АдресСУЗДляЗапроса Тогда
			
			Если Не ЗначениеЗаполнено(Выборка.Порт)
				Или Выборка.Порт = 0 Тогда
				Порт = ПортПоКонстанте;
			Иначе
				Порт = Выборка.Порт;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Выборка.Таймаут)
				Или Выборка.Таймаут = 0 Тогда
				Таймаут = ТаймаутПоКонстанте;
			Иначе
				Таймаут = Выборка.Таймаут;
			КонецЕсли;
			
			Если Не СтрНайти(Выборка.Сервер, "https://") = 0 
				И Не Выборка.ИспользоватьЗащищенноеСоединение Тогда
				ИспользоватьЗащищенноеСоединение = Истина;
			Иначе
				ИспользоватьЗащищенноеСоединение = Выборка.ИспользоватьЗащищенноеСоединение;
			КонецЕсли;
				
			НастройкаОбменаСУЗ = НоваяНастройкаОбменаСУЗ();
			НастройкаОбменаСУЗ.Сервер  = Выборка.Сервер;
			НастройкаОбменаСУЗ.Порт    = Порт;
			НастройкаОбменаСУЗ.Таймаут = Таймаут;
			НастройкаОбменаСУЗ.ИспользоватьЗащищенноеСоединение = ИспользоватьЗащищенноеСоединение;
			НастройкаОбменаСУЗ.СтанцияУправленияЗаказами        = Выборка.СтанцияУправленияЗаказами;
			НастройкаОбменаСУЗ.Идентификатор   = Выборка.Идентификатор;
			НастройкаОбменаСУЗ.Токен           = Выборка.Токен;
			НастройкаОбменаСУЗ.Организация 	   = Выборка.Организация;
			
			МассивНастроек.Добавить(НастройкаОбменаСУЗ);
			
		КонецЕсли;
	КонецЦикла;
	
	Если Не МассивНастроек.Количество() = 1 Тогда
		ТекстСообщения = НСтр("ru = 'Для организации ""%1"" не удалось однозначно определить активную настройку взаимодействия с СУЗ.'");
		ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Организация);
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	Иначе
	    Возврат МассивНастроек[0];
	КонецЕсли;
	
КонецФункции

Функция ПроверитьДоступностьСУЗ_V2(ВидПродукции, ПараметрыСУЗ) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса", Неопределено);
	ВозвращаемоеЗначение.Вставить("Доступен", Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки", "");

	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");
	ЗаголовокHTTP.Вставить("Accept",       "application/json");
	ЗаголовокHTTP.Вставить("clientToken",  ПараметрыСУЗ.Токен);
	
	ЗаголовокHTTP.Вставить("omsId", ПараметрыСУЗ.Идентификатор);
	
	URLЗапроса = СтрШаблон(URLЗапроса_V2("api/v2/extension/ping?omsId=%1", ВидПродукции), ПараметрыСУЗ.Идентификатор);
	РезультатЗапроса = ПолучитьДанныеИзСервиса(URLЗапроса, Неопределено, ПараметрыСУЗ, ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			// Структура - Ожидаемое результат запроса:
			//  * omsId - GUID - Идентификатор СУЗ
			ДанныеОбработки = ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			Если ДанныеОбработки = Неопределено Тогда
				ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			Иначе
				ВозвращаемоеЗначение.Доступен = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 400 Тогда
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
		Иначе
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
		КонецЕсли;
		
	Иначе
		ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область ЗапросыИнформацииССервера

#Область ЗапросСоставаУпаковок

Функция ЗапроситьДанныеОбАгрегацииКМ(СтруктураКодов, Организация, ТокенАвторизации, ВыводитьСообщениеПриЗапросе = Истина) Экспорт
	
	ДоступныеВидыПродукции = ОбщегоНазначенияИСМПТК.УчитываемыеВидыМаркируемойПродукции();
	
	Если СтруктураКодов.Свойство("ФорматBase64") Тогда
		Если СтруктураКодов.ФорматBase64 Тогда
			Штрихкод = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(СтруктураКодов.Штрихкод);
		Иначе
			Штрихкод = СтруктураКодов.Штрихкод;
		КонецЕсли;
	ИначеЕсли РазборИОбработкаКодовМаркировкиИСМПТКСлужебный.ЭтоСтрокаФорматаBase64(СтруктураКодов.Штрихкод) Тогда
		Штрихкод = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(СтруктураКодов.Штрихкод);
	Иначе
		Штрихкод = СтруктураКодов.Штрихкод;
	КонецЕсли;
	
	АгрегированныйКод = ОбщегоНазначенияИСМПТКВызовСервера.EncodeURIcomponent(Штрихкод);
	
	Для Каждого ВидПродукции Из ДоступныеВидыПродукции Цикл 
		ВидПродукции = СоответствиеВидовПродукцииURL()[ВидПродукции];
		ОтветСервера = ПолучитьИнформациюПоАгрегированнымКМ("GET", "api/v3/true-api/cises/aggregated/list?pg=" + ВидПродукции + "&codes=" + АгрегированныйКод, , Организация, ТокенАвторизации,, ВыводитьСообщениеПриЗапросе);
		Если Не ЗначениеЗаполнено(ОтветСервера.ТекстОшибки) Тогда 
			Возврат ОтветСервера;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОтветСервера;
	
КонецФункции

Функция ЗапроситьДанныеОбАгрегацииСпискаКМ(СтруктураКодов, Организация, ТокенАвторизации) Экспорт
	
	ДоступныеВидыПродукции = ОбщегоНазначенияИСМПТК.УчитываемыеВидыМаркируемойПродукции();
	СоответствиеАгрегированныхКодов = Новый Соответствие;
	
	Для Каждого ВидПродукции Из ДоступныеВидыПродукции Цикл 
		ВидПродукции = СоответствиеВидовПродукцииURL()[ВидПродукции];
		ОтветСервера = ПолучитьИнформациюПоАгрегированнымКМ("POST", "api/v3/true-api/cises/aggregated/list?pg=" + ВидПродукции, СтруктураКодов.МассивКодов, Организация, ТокенАвторизации, ВидПродукции);
		Если Не ЗначениеЗаполнено(ОтветСервера.ТекстОшибки) Тогда
			Для Каждого СоответствиеКодов Из ОтветСервера.ДанныеОбАгрегации Цикл 
				СоответствиеАгрегированныхКодов.Вставить(СоответствиеКодов.Ключ, СоответствиеКодов.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если Не СоответствиеАгрегированныхКодов.Количество() = 0 Тогда 
		ОтветСервера.ДанныеОбАгрегации = СоответствиеАгрегированныхКодов;
		ОтветСервера.ТекстОшибки 	   = "";
	КонецЕсли;
	
	Возврат ОтветСервера;
	
КонецФункции

Функция ЗапроситьИтогиПоАгрегированнымКМ(КодыМаркировки, Организация, ТокенАвторизации) Экспорт
	
	ТелоЗапроса = Новый Массив;
	Для Каждого СтрокаКодаМаркировки Из КодыМаркировки Цикл
		ТелоЗапроса.Добавить(СтрокаКодаМаркировки);
	КонецЦикла;
	
	Возврат ПолучитьИнформациюПоАгрегированнымКМ("POST", "api/v3/true-api/cis/cises-units-count", ТелоЗапроса, Организация, ТокенАвторизации);
	
КонецФункции

#КонецОбласти

#Область ПроверкаСостоянияКодаНаСервере

Функция ЗапроситьДанныеОСостоянииКМ(СтруктураКодов, Организация, ТокенАвторизации) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураКодов);
	
	ОтветСервера = ПолучитьИнформациюПоКМ("POST", "api/v3/true-api/cises/info", ЗаписьJSON.Закрыть(), Организация, ТокенАвторизации);
	
	Если Не ЗначениеЗаполнено(ОтветСервера.ТекстОшибки) Тогда
		
		МассивОписанияКодов = ОтветСервера.ДанныеКМ;
		СоответствиеКодов   = Новый Соответствие;
		
		Для Каждого ОписаниеКода Из МассивОписанияКодов Цикл 
			
			ИнформацияПоКоду = ОписаниеКода["cisInfo"];
			
			//Разбор значений, которые вернул сервер
			СтатусКМ 		= ПолучитьЗначениеСтатусаКМПоСоответствию(ИнформацияПоКоду["status"]);
			НаименованиеТовара = ИнформацияПоКоду["productName"];
			GTIN 			= ИнформацияПоКоду["gtin"];
			ВидПродукции    = ПолучитьЗначениеВидаПродукцииПоСоответствию(ИнформацияПоКоду["productGroup"]); 
			ВидУпаковки 	= ПолучитьЗначениеВидУпаковкиПоСоответствию(ИнформацияПоКоду["packageType"]); 
			
			Владелец        = ИнформацияПоКоду["ownerName"];
			ВладелецИИНБИН	= ИнформацияПоКоду["ownerBin"];
			ВладелецСсылка  = ИнтеграцияИСМПТКПереопределяемый.ПодобратьСсылкуНаУчастникаМаркировкиПоБИН(ВладелецИИНБИН);
			
			Производитель	= ИнформацияПоКоду["producerName"];
			ПроизводительИИНБИН = ИнформацияПоКоду["producerBin"];
			ПроизводительСсылка = ИнтеграцияИСМПТКПереопределяемый.ПодобратьСсылкуНаУчастникаМаркировкиПоБИН(ПроизводительИИНБИН);
			
			ДатаВводаВОборотСервер = ИнформацияПоКоду["producedDate"];
			ДатаДляЗаполнения = ?(ДатаВводаВОборотСервер = Неопределено, Неопределено, ПрочитатьДатуJSON(ДатаВводаВОборотСервер, ФорматДатыJSON.ISO));
			
			КодВерхнегоУровня = ИнформацияПоКоду["parent"];
			
			//Заполнение итоговой структуры данных
			СтруктураСведенийОКМ = Новый Структура();
			СтруктураСведенийОКМ.Вставить("СтатусКМ", 			 СтатусКМ);
			СтруктураСведенийОКМ.Вставить("НаименованиеТовара",  НаименованиеТовара);
			СтруктураСведенийОКМ.Вставить("GTIN", 				 GTIN);
			СтруктураСведенийОКМ.Вставить("ВидПродукции",   	 ВидПродукции);
			СтруктураСведенийОКМ.Вставить("ВидУпаковки", 		 ВидУпаковки);
			СтруктураСведенийОКМ.Вставить("Владелец", 			 Владелец);
			СтруктураСведенийОКМ.Вставить("ВладелецИИНБИН", 	 ВладелецИИНБИН);
			СтруктураСведенийОКМ.Вставить("ВладелецСсылка", 	 ВладелецСсылка);
			СтруктураСведенийОКМ.Вставить("Производитель", 		 Производитель);
			СтруктураСведенийОКМ.Вставить("ПроизводительИИНБИН", ПроизводительИИНБИН);
			СтруктураСведенийОКМ.Вставить("ПроизводительСсылка", ПроизводительСсылка);
			СтруктураСведенийОКМ.Вставить("ДатаВводаВОборот", 	 ДатаДляЗаполнения);  //даты может не быть, если статус кода Эмитирован 
			СтруктураСведенийОКМ.Вставить("КодВерхнегоУровня", 	 КодВерхнегоУровня); //присутствует в запросе только у сагрегированных кодов
						
			СоответствиеКодов.Вставить(ИнформацияПоКоду["requestedCis"], СтруктураСведенийОКМ);
			
		КонецЦикла; 
		
		ОтветСервера.ДанныеКМ = СоответствиеКодов;
	КонецЕсли;
	
	Возврат ОтветСервера;
	
КонецФункции

Функция ЗапроситьДанныеИсторииКМ(КМ, Организация, ТокенАвторизации) Экспорт
	
	ОбработанныйКМ = ОбщегоНазначенияИСМПТКВызовСервера.EncodeURIcomponent(КМ);
	ОтветСервера   = ПолучитьИнформациюПоКМ("GET", "api/v3/true-api/cises/history?code=" + ОбработанныйКМ, , Организация, ТокенАвторизации);
		
	Если Не ЗначениеЗаполнено(ОтветСервера.ТекстОшибки) Тогда
		
		МассивОписанияКодов = ОтветСервера.ДанныеКМ;
		СоответствиеКодов   = Новый Соответствие;
		
		МассивСведенийИстории = Новый Массив();
		
		Для Каждого ОписаниеКода Из МассивОписанияКодов Цикл
			
			КодИдентификации 	 = ОписаниеКода["cis"];
			СтатусКода			 = ПолучитьЗначениеСтатусаКМПоСоответствию(ОписаниеКода["status"]);
			НомерДокументаИСМПТ  = ОписаниеКода["docId"];
			ДатаДокументаИСМПТ   = ПрочитатьДатуJSON(ОписаниеКода["operationDate"], ФорматДатыJSON.ISO);
			ВладелецНаименование = ОписаниеКода["ownerName"];
			ВладелецИИНБИН		 = ОписаниеКода["ownerBin"];
			ВладелецСсылка		 = ИнтеграцияИСМПТКПереопределяемый.ПодобратьСсылкуНаУчастникаМаркировкиПоБИН(ВладелецИИНБИН);
			
			СтруктураСведенийОКМ = Новый Структура();
			СтруктураСведенийОКМ.Вставить("СтатусКода", 		 СтатусКода);
			СтруктураСведенийОКМ.Вставить("НомерДокументаИСМПТ", НомерДокументаИСМПТ); //может отсутствовать для некоторых статусов КМ
			СтруктураСведенийОКМ.Вставить("ДатаДокументаИСМПТ",  ДатаДокументаИСМПТ);
			
			СтруктураСведенийОКМ.Вставить("ВладелецНаименование", ВладелецНаименование);
			СтруктураСведенийОКМ.Вставить("ВладелецИИНБИН",  	  ВладелецИИНБИН);
			СтруктураСведенийОКМ.Вставить("ВладелецСсылка",  	  ВладелецСсылка);
			
			МассивСведенийИстории.Добавить(СтруктураСведенийОКМ);
									
		КонецЦикла;
		
		СоответствиеКодов.Вставить(КМ, МассивСведенийИстории);
		ОтветСервера.ДанныеКМ = СоответствиеКодов;
	КонецЕсли;
	
	Возврат ОтветСервера;
	
КонецФункции

Функция ЗапроситьУровеньАгрегированногоКода(КодМаркировки, Организация, ТокенАвторизации) Экспорт
	
	Штрихкод = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.Base64ВШтрихкод(КодМаркировки);
	
	МассивКодов = Новый Массив;
	МассивКодов.Добавить(Штрихкод);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, МассивКодов);
	ТелоЗапроса = ЗаписьJSON.Закрыть();
	
	РезультатЗапроса = ОтправитьДанныеВСервис("api/v3/true-api/cises/info", ТелоЗапроса, ТокенАвторизации, "POST", ИнтеграцияИСМПТККлиентСервер.ПараметрыОтправкиHTTPЗапросов_ИСМП(""));
	
	РезультатОтправкиЗапроса = ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ТипКодаАгрегата = Перечисления.ВидыУпаковокИСМПТК.Неопределен;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса("api/v3/true-api/cises/info", РезультатОтправкиЗапроса);
			Иначе
				ДанныеПоКоду = ДанныеОбработки[0]["cisInfo"];
				УровеньГруппировки = ДанныеПоКоду["packageType"];
				
				Если УровеньГруппировки = "LEVEL1" Тогда
					ТипКодаАгрегата = Перечисления.ВидыУпаковокИСМПТК.Групповая;
				ИначеЕсли УровеньГруппировки = "UNIT" Тогда
					ТипКодаАгрегата = Перечисления.ВидыУпаковокИСМПТК.Потребительская;
				Иначе 
					ТипКодаАгрегата = Перечисления.ВидыУпаковокИСМПТК.Логистическая;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипКодаАгрегата;
	
КонецФункции

#КонецОбласти

#Область БалансПредприятия

Функция ПолучитьСостояниеСчетовПоВсемГруппам(ТокенАвторизации) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ДанныеОСчетах",                  Неопределено);
	ВозвращаемоеЗначение.Вставить("СодержимоеНедоступно",           Ложь);
	
	URLЗапроса = СтрШаблон("api/v3/true-api/elk/product-groups/balance/all");
	РезультатОтправкиЗапроса = ПолучитьБалансПоВсемГруппам(ТокенАвторизации);
	
	РезультатОтправкиЗапроса.Вставить("ОтветПолучен", ?(РезультатОтправкиЗапроса.КодСостояния = Неопределено, Ложь, Истина)); 
	
	Попытка
		ОтветСервераОбъект = ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстОтвета, Ложь);
	Исключение
		ОтветСервераОбъект = ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстОтвета, Истина);
	КонецПопытки;
	Если ОтветСервераОбъект <> Неопределено Тогда
		РезультатОтправкиЗапроса.Вставить("ТекстВходящегоСообщенияJSON", ОбъектВТекстJSON(ОтветСервераОбъект));
	Иначе
		РезультатОтправкиЗапроса.Вставить("ТекстВходящегоСообщенияJSON", РезультатОтправкиЗапроса.ТекстОтвета);
	КонецЕсли;
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Ложь);
			
			Если ДанныеОбработки = Неопределено Тогда
				ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			Иначе
				ВозвращаемоеЗначение.ДанныеОСчетах = ДанныеОбработки;
			КонецЕсли;
		
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 403 Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
			ВозвращаемоеЗначение.СодержимоеНедоступно = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
		КонецЕсли;
		
	Иначе
		ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получение значения баланса лицевых счетов для каждой его товарной группы
//
//
Функция ПолучитьБалансПоВсемГруппам(ТокенАвторизации, СтруктурнаяЕдиница = Неопределено) Экспорт
	
	АдресРесурса = СтрШаблон("api/v3/true-api/elk/product-groups/balance/all");
	Заголовки = Новый Соответствие();
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, , "GET", ТокенАвторизации);
	
КонецФункции

// Получение значения баланса лицевого счета для запрашиваемой товарной группы
//
//
Функция ПолучитьБалансПоТоварнойГруппе(ИдентификаторТоварнойГруппы, ТокенАвторизации, СтруктурнаяЕдиница = Неопределено) Экспорт
	
	АдресРесурса = СтрШаблон("api/v3/true-api/elk/product-groups/balance?productGroupId=%1", ИдентификаторТоварнойГруппы);
	Заголовки = Новый Соответствие();
	
	Возврат ВыполнитьМетодСервера(АдресРесурса, Заголовки, СтруктурнаяЕдиница, , "GET", ТокенАвторизации);
	
КонецФункции

#КонецОбласти 

Функция ПолучитьДополнительныеДанныеПоИдентификатору(ИдентификаторДокумента, ДанныеПрофилей, СтруктурнаяЕдиница, Исходящий, ТокенАвторизации = Неопределено)
	
	ДополнительныеДанные = Новый Структура("НомерИСМПТ, ДатаВИСМПТ, Статус");
	
	ПараметрыЗапроса = Новый Структура;
	Если Исходящий Тогда
		РезультатВыполненияНаСервере = ПолучитьСписокИсходящихДокументов(ПараметрыЗапроса, СтруктурнаяЕдиница, ТокенАвторизации);
	Иначе
		РезультатВыполненияНаСервере = ПолучитьСписокВходящихДокументов(ПараметрыЗапроса,  СтруктурнаяЕдиница, ТокенАвторизации);
	КонецЕсли;
	
	ИнформацияОбОшибке = Неопределено;
	Если ЭтоОшибка(РезультатВыполненияНаСервере, ИнформацияОбОшибке) Тогда
		ТекстСообщения = НСтр("ru = 'При попытке выполнения запроса данных документов со стороны сервера произошла ошибка.'") + " "
					   + РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияПодробностиВЖурналеРегистрации();
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		ТекстСообщения = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаПриПолученииДанныхССервера() + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
		ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ИнтеграцияИСМПТК.ПолучитьДополнительныеДанныеПоИдентификатору");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		Возврат ДополнительныеДанные;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(РезультатВыполненияНаСервере.ТекстОтвета);
	РезультатЗапроса = ПрочитатьJSON(ЧтениеJSON);
	
	Если РезультатЗапроса.Свойство("items") Тогда
		ДокументыСервера = РезультатЗапроса.items;
		Для каждого ДанныеДокумента Из ДокументыСервера Цикл
			Если ДанныеДокумента.id = ИдентификаторДокумента Тогда
				ДополнительныеДанные.НомерИСМПТ = ДанныеДокумента.number;
				ДополнительныеДанные.ДатаВИСМПТ = Дата(1970,1,1,0,0,0) + ДанныеДокумента.date;
				ДополнительныеДанные.Статус 	= ДанныеДокумента.status;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДополнительныеДанные;
	
КонецФункции

Функция НайтиДополнительныеДанныеПоИдентификатору(СписокДокументовСервера, ИдентификаторДокумента)
	
	ДополнительныеДанные = Новый Структура("НомерИСМПТ, ДатаВИСМПТ, Статус");
	
	Если СписокДокументовСервера.Свойство("items") Тогда
		ДокументыСервера = СписокДокументовСервера.items;
		Для каждого ДанныеДокумента Из ДокументыСервера Цикл
			Если ДанныеДокумента.id = ИдентификаторДокумента Тогда
				ДополнительныеДанные.НомерИСМПТ = ДанныеДокумента.number;
				ДополнительныеДанные.ДатаВИСМПТ = Дата(1970,1,1,0,0,0) + ДанныеДокумента.date;
				ДополнительныеДанные.Статус 	= ДанныеДокумента.status;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДополнительныеДанные;
	
КонецФункции

#КонецОбласти

#Область JSON

// Получить из текста JSON структуру.
// 
// Параметры:
// 	ТекстJSON                    - Строка - Текст JSON.
// 	ПреобразовыватьВСоответствие - Булево - Признак преобразования в соответствие.
// Возвращаемое значение:
// 	Структура, Неопределено - Результат преобразования JSON.
Функция ТекстJSONВОбъект(ТекстJSON, ПреобразовыватьВСоответствие = Ложь) Экспорт
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ТекстJSON);
	
	Попытка
		РезультатРазбора = ПрочитатьJSON(Чтение, ПреобразовыватьВСоответствие);
	Исключение
		РезультатРазбора = Неопределено;
	КонецПопытки;
	
	Возврат РезультатРазбора;
	
КонецФункции

// Формирует из структуры текст JSON
// 
// Параметры:
// 	Структура - Структура - Произвольная структура данных
// Возвращаемое значение:
// 	Строка - Текст JSON
Функция ОбъектВТекстJSON(Структура, УдалитьПробелыИПереносыСтрок = Ложь) Экспорт
	
	Если УдалитьПробелыИПереносыСтрок Тогда
		ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, "");
	Иначе
		ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, "  ");
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	ЗаписатьJSON(ЗаписьJSON, Структура);
	
	ТекстJSON = ЗаписьJSON.Закрыть();
	
	Возврат ТекстJSON;
	
КонецФункции

Функция ОбъектXDTOИзСтрокиJSON(Знач СтрокаJSON, Знач Фабрика) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);	
	ОбъектXDTO = Фабрика.ПрочитатьJSON(ЧтениеJSON);
	
	Возврат ОбъектXDTO;
	
КонецФункции

#КонецОбласти

#Область HTTPЗапросы

// Структура результата HTTP запроса
// 
// Параметры:
// Возвращаемое значение:
// 	Структура - Результат HTTP-запроса:
// * КодСостояния - Число        - Код состояния HTTP
// * Заголовки    - Соответствие - Заголовки HTTP ответа
// * ТекстОтвета  - Строка       - Текст ответа
// * ТекстОшибки  - Строка       - Текст ошибки
Функция РезультатHTTPЗапроса() Экспорт
	
	РезультатHTTPЗапроса = Новый Структура;
	РезультатHTTPЗапроса.Вставить("КодСостояния");
	РезультатHTTPЗапроса.Вставить("Заголовки");
	РезультатHTTPЗапроса.Вставить("ТекстОтвета");
	РезультатHTTPЗапроса.Вставить("ТекстОшибки");
	
	Возврат РезультатHTTPЗапроса;
	
КонецФункции

// Инициализирует структуру результата обработки HTTP-запроса после получения ответа.
// 
// Параметры:
// 	ТекстВходящегоСообщенияJSON - Строка - Текст входящего сообщения.
// 	КодСостояния                - Число  - Код состояния.
// 
// Возвращаемое значение:
// Структура - Структура со свойствами:
//   ЗапросОтправлен             - Булево - признак того, что сообщение отправлено.
//   ОтветПолучен                - Булево - признак того, что сообщение обработано сервером.
//   КодСостояния                - Число  - Код состояния HTTP-запроса.
//   ТекстОшибки                 - Строка - текст ошибки, если таковая возникла.
//   ТекстВходящегоСообщенияJSON - Строка - текст ответа, на отправленное сообщение.
//
Функция HTTPОтветПолучен(ТекстВходящегоСообщенияJSON, КодСостояния = 200, КакФайл = Ложь, ДополнительныеПараметры = Неопределено)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	ВозвращаемоеЗначение.Вставить("ЗапросОтправлен",         Истина);
	ВозвращаемоеЗначение.Вставить("ОтветПолучен",            Истина);
	
	ВозвращаемоеЗначение.Вставить("КодСостояния", КодСостояния);
	ВозвращаемоеЗначение.Вставить("Объект",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",  "");
	
	Если КакФайл Тогда
		ВозвращаемоеЗначение.Вставить("ИмяФайла", ТекстВходящегоСообщенияJSON);
	Иначе
		Попытка
			ВозвращаемоеЗначение.Объект = ТекстJSONВОбъект(ТекстВходящегоСообщенияJSON, Ложь);
		Исключение
			ВозвращаемоеЗначение.Объект = ТекстJSONВОбъект(ТекстВходящегоСообщенияJSON, Истина);
		КонецПопытки;
		Если ВозвращаемоеЗначение.Объект <> Неопределено Тогда
			ВозвращаемоеЗначение.Вставить("ТекстВходящегоСообщенияJSON", ОбъектВТекстJSON(ВозвращаемоеЗначение.Объект));
		Иначе
			ВозвращаемоеЗначение.Вставить("ТекстВходящегоСообщенияJSON", ТекстВходящегоСообщенияJSON);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Инициализирует структуру результата обработки HTTP-запроса после отправки сообщения, но до получения ответа.
// 
// Возвращаемое значение:
// Структура:
//   ЗапросОтправлен             - Булево - признак того, что сообщение отправлено.
//   ОтветПолучен                - Булево - признак того, что сообщение получено.
//   КодСостояния                - Число  - Код состояния HTTP-запроса.
//   ТекстОшибки                 - Строка - текст ошибки, если таковая возникла.
//   ТекстВходящегоСообщенияJSON - Строка - текст ответа, на отправленное сообщение.
//
Функция HTTPОтветНеПолучен(Ошибка, ЗапросОтправлен, КодСостояния = Неопределено, КакФайл = Ложь, ДополнительныеПараметры = Неопределено)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	ВозвращаемоеЗначение.Вставить("ЗапросОтправлен",         ЗапросОтправлен);
	ВозвращаемоеЗначение.Вставить("ОтветПолучен",            Ложь);
	
	ВозвращаемоеЗначение.Вставить("КодСостояния", КодСостояния);
	ВозвращаемоеЗначение.Вставить("Объект",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",  Строка(Ошибка));
	
	Если КакФайл Тогда
		ВозвращаемоеЗначение.Вставить("ИмяФайла", "");
	Иначе
		ВозвращаемоеЗначение.Вставить("ТекстВходящегоСообщенияJSON", "");
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Обработать результат отправки HTTP-запроса к сервису.
// 
// Параметры:
//  РезультатЗапроса - (См. РезультатЗапроса) - Результат запроса.
// Возвращаемое значение:
// Структура - Результат отправки HTTP-запроса:
//  * ЗапросОтправлен             - Булево - признак того, что сообщение отправлено.
//  * ОтветПолучен                - Булево - признак того, что сообщение получено.
//  * КодСостояния                - Число  - Код состояния HTTP-запроса.
//  * ТекстОшибки                 - Строка - текст ошибки, если таковая возникла.
//  * ТекстВходящегоСообщенияJSON - Строка - текст ответа, на отправленное сообщение.
Функция ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	РезультатОтправкиHTTPЗапроса = РезультатHTTPЗапроса();
	РезультатОтправкиHTTPЗапроса.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
	Если РезультатЗапроса.HTTPОтвет <> Неопределено Тогда
		РезультатОтправкиHTTPЗапроса.КодСостояния = РезультатЗапроса.HTTPОтвет.КодСостояния;
		РезультатОтправкиHTTPЗапроса.Заголовки    = РезультатЗапроса.HTTPОтвет.Заголовки;
		РезультатОтправкиHTTPЗапроса.ТекстОтвета  = РезультатЗапроса.HTTPОтвет.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	КодСостояния = РезультатОтправкиHTTPЗапроса.КодСостояния;
	ТекстОтвета  = РезультатОтправкиHTTPЗапроса.ТекстОтвета;
	
	Если ЗначениеЗаполнено(ТекстОтвета) Тогда
		
		ВозвращаемоеЗначение = HTTPОтветПолучен(ТекстОтвета, КодСостояния, Ложь, РезультатЗапроса);
		
	Иначе
		
		Если Не ЗначениеЗаполнено(КодСостояния) Тогда
			ТекстСообщенияXMLОтправлен = Ложь;
			ЗаголовокОшибки = НСтр("ru = 'HTTP-запрос не отправлен.'");
		Иначе
			ТекстСообщенияXMLОтправлен = Истина;
			ЗаголовокОшибки = СтрШаблон(НСтр("ru = 'Код состояния HTTP: %1.'"), КодСостояния);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатОтправкиHTTPЗапроса.ТекстОшибки) Тогда
			ТекстОшибки = ЗаголовокОшибки + Символы.ПС + РезультатОтправкиHTTPЗапроса.ТекстОшибки;
		Иначе
			ТекстОшибки = ЗаголовокОшибки;
		КонецЕсли;
		
		ВозвращаемоеЗначение = HTTPОтветНеПолучен(ТекстОшибки, ТекстСообщенияXMLОтправлен, КодСостояния, Ложь, РезультатЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Обработать результат отправки HTTP-запроса к сервису.
// 
// Параметры:
//  РезультатЗапроса - (См. РезультатЗапроса) - Результат запроса.
// Возвращаемое значение:
// Структура - Результат отправки HTTP-запроса:
//  * ЗапросОтправлен - Булево - признак того, что сообщение отправлено.
//  * ОтветПолучен    - Булево - признак того, что сообщение получено.
//  * КодСостояния    - Число  - Код состояния HTTP-запроса.
//  * ТекстОшибки     - Строка - текст ошибки, если таковая возникла.
//  * ИмяФайла        - Строка - ИмяФайла.
Функция ОбработатьРезультатОтправкиHTTPЗапросаКакФайл(РезультатЗапроса) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	РезультатОтправкиHTTPЗапроса = РезультатHTTPЗапроса();
	РезультатОтправкиHTTPЗапроса.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
	Если РезультатЗапроса.HTTPОтвет <> Неопределено Тогда
		РезультатОтправкиHTTPЗапроса.КодСостояния = РезультатЗапроса.HTTPОтвет.КодСостояния;
		РезультатОтправкиHTTPЗапроса.Заголовки    = РезультатЗапроса.HTTPОтвет.Заголовки;
		РезультатОтправкиHTTPЗапроса.ТекстОтвета  = РезультатЗапроса.HTTPОтвет.ПолучитьИмяФайлаТела();
	КонецЕсли;
	
	КодСостояния = РезультатОтправкиHTTPЗапроса.КодСостояния;
	ТекстОтвета  = РезультатОтправкиHTTPЗапроса.ТекстОтвета;
	
	Если ЗначениеЗаполнено(ТекстОтвета) Тогда
		
		ВозвращаемоеЗначение = HTTPОтветПолучен(ТекстОтвета, КодСостояния, Истина, РезультатЗапроса);
		
	Иначе
		
		Если Не ЗначениеЗаполнено(КодСостояния) Тогда
			ТекстСообщенияXMLОтправлен = Ложь;
			ЗаголовокОшибки = НСтр("ru = 'HTTP-запрос не отправлен.'");
		Иначе
			ТекстСообщенияXMLОтправлен = Истина;
			ЗаголовокОшибки = СтрШаблон(НСтр("ru = 'Код состояния HTTP: %1.'"), КодСостояния);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатОтправкиHTTPЗапроса.ТекстОшибки) Тогда
			ТекстОшибки = ЗаголовокОшибки + Символы.ПС + РезультатОтправкиHTTPЗапроса.ТекстОшибки;
		Иначе
			ТекстОшибки = ЗаголовокОшибки;
		КонецЕсли;
		
		ВозвращаемоеЗначение = HTTPОтветНеПолучен(ТекстОшибки, ТекстСообщенияXMLОтправлен, КодСостояния, Истина, РезультатЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область JWT

Функция РасшифроватьТокенJWT(Токен) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("РезультатРасшифровки", Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки", "");
	
	ЭлементыТокена = СтрРазделить(Токен, ".");
	Если ЭлементыТокена.Count() <> 3 Тогда
		ВозвращаемоеЗначение.ТекстОшибки = НСтр("ru = 'Токен не соответствует формату JWT'");
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ЭлементТокенаДанные = ЭлементыТокена[1];

	Данные = ТекстJSONВОбъект(ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеЭлементаТокенаJWT(ЭлементТокенаДанные)));

	Возврат Данные;
	
КонецФункции

Функция ДвоичныеДанныеЭлементаТокенаJWT(Знач Значение)
	
	Значение = СтрЗаменить(Значение, "-", "+");
	Значение = СтрЗаменить(Значение, "_", "/");
	
	Остаток = СтрДлина(Значение) % 4;

	Если Остаток = 1 Тогда
		Возврат Неопределено;
	ИначеЕсли Остаток = 2 Тогда
		Значение = Значение + "==";
	ИначеЕсли Остаток = 3 Тогда
		Значение = Значение + "=";
	КонецЕсли;
	
	Возврат Base64Значение(Значение);
	
КонецФункции

#КонецОбласти

Процедура ДобавитьСтрокуСРазделителем(НачСтрока, ДобавитьТекст)
	
	НачСтрока = НачСтрока + ДобавитьТекст + Символы.ВК + Символы.ПС;
	
КонецПроцедуры

#КонецОбласти