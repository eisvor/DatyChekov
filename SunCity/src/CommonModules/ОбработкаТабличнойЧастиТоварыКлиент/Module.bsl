////////////////////////////////////////////////////////////////////////////////
// ОбработкаТабличнойЧастиТоварыКлиент содержит процедуры и функции 
// для работы с табличными частями товаров документов.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// "ПриИзмененииРеквизитовВТЧКлиент" на клиенте.
// Вызов этой процедуры должен осуществляться из форм документов.
//
// Параметры:
//  ТЧ - ТабличнаяЧасть - табличная часть документа.
//  ТекущаяСтрока - СтрокаТабличнойЧасти - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - Возможно передавать следующие поля:
//   "ПроверитьХарактеристикуПоВладельцу", Характеристика.
//   "ПроверитьЗаполнитьУпаковкуПоВладельцу", Упаковка.
//   "ПересчитатьКоличествоЕдиниц".
//   "ПересчитатьКоличествоЕдиницПлан".
//   "ПересчитатьКоличествоЕдиницФакт", ИмяФакта
//   "ОчиститьКоличествоУчет"
//   "ОбнулитьЦену", ИмяРеквизитаЦены
//   "ЗаполнитьОбъемВесУпаковки", Упаковка.
//   "ЗаполнитьЦенуПродажи", СтруктураПараметровДействия.
//   "ПересчитатьСумму", ИмяКоличества
//   "ПересчитатьСуммуСУчетомРучнойСкидки", СтруктураПараметровДействия.
//   "ПересчитатьСуммуСУчетомАвтоматическойСкидки", СтруктураПараметровДействия.
//   "ПересчитатьЦенуЗаУпаковку", КоличествоЕдиницДоПересчета.
//   "ПересчитатьСуммуНДС",
//   "ЗаполнитьСтавкуНДС",
//   "ПересчитатьКоличествоУпаковок", Имя
//   "ПересчитатьКоличествоУпаковокФакт", ИмяФакта
//   "ОбработатьШтрихкоды",
//   "ПроверитьСерийныеНомераПоВладельцу", СтруктураПараметровДействия.
//   "ЗаполнитьЦенуПродажиРозница" , СтруктураПараметровДействия.
//   "ПересчитатьСуммуРучнойСкидки",
//   "ПересчитатьПроцентРучнойСкидки",
//   "ПересчитатьСуммуФактВСтрокеТЧКлиент", ИмяКоличества
//   "ПересчитатьЦенуПоСуммеФактВСтрокеТЧКлиент",
//   "ПересчитатьСуммуПродажи".
//  КэшированныеЗначения - Структура - Структура данных кэшированных значений.
//
Процедура ПриИзмененииРеквизитовВТЧКлиент(ТЧ, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем ЗначениеИзСтруктуры;

	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
	КонецЕсли;

	ПараметрыОбработкиТЧ = ПолучитьПараметрыОбработкиТЧ(ТЧ,
		ТекущаяСтрока,
		СтруктураДействий,
		КэшированныеЗначения
	);
	
	ПроверятьДробноеКоличество = ОбработкаТабличнойЧастиТоварыВызовСервера.ВводДробногоКоличества();	
	Если ПроверятьДробноеКоличество И ТекущаяСтрока <> Неопределено Тогда 
		Если ТипЗнч(ТЧ) = Тип("ДанныеФормыКоллекция") И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)
			И СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц")
			ИЛИ СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницФакт")
			ИЛИ СтруктураДействий.Свойство("ПересчитатьКоличество") Тогда
			ПроверитьДробноеКоличество(ТекущаяСтрока, СтруктураДействий);
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыОбработкиТЧ.НеобходимВызовСервера Тогда
		СтруктураТЧ = Новый Структура;
		СтруктураТЧ.Вставить("СтруктураПолейТЧ", СтруктураПолейТЧ(ПараметрыОбработкиТЧ.СтруктураДействий));

		Если ПараметрыОбработкиТЧ.НеобходимоОбработатьВсюТЧ Тогда
			СтрокиТЧ = Новый Массив;
			Для Каждого ТекущаяСтрокаТЧ Из ТЧ Цикл
				ТекущаяСтрока = ДанныеТекущейСтроки(ТекущаяСтрокаТЧ, СтруктураТЧ.СтруктураПолейТЧ);
				ТекущаяСтрока.Вставить("_ИдентификаторСтроки_", ТекущаяСтрокаТЧ.ПолучитьИдентификатор());

				СтрокиТЧ.Добавить(ТекущаяСтрока);
			КонецЦикла;

			СтруктураТЧ.Вставить("СтрокиТЧ" , СтрокиТЧ);

			ОбработкаТабличнойЧастиТоварыВызовСервера.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, КэшированныеЗначения);

			Для Каждого ТекСтрока Из СтруктураТЧ.СтрокиТЧ Цикл
				Если ТекСтрока.Свойство("_ИдентификаторСтроки_", ЗначениеИзСтруктуры) Тогда
					ТекСтрокаТЧ = ТЧ.НайтиПоИдентификатору(ЗначениеИзСтруктуры);
				Иначе
					ТекСтрокаТЧ = ТЧ.Добавить();
				КонецЕсли;

				ЗаполнитьЗначенияСвойств(ТекСтрокаТЧ, ТекСтрока);
			КонецЦикла;
		Иначе
			СтруктураТЧ.Вставить("ТекущаяСтрока" , ДанныеТекущейСтроки(ТекущаяСтрока, СтруктураТЧ.СтруктураПолейТЧ));

			ОбработкаТабличнойЧастиТоварыВызовСервера.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, КэшированныеЗначения);
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураТЧ.ТекущаяСтрока);
		КонецЕсли;
	Иначе // Все можно обработать на клиенте.
		СоответствиеДействий = Новый Соответствие;

		ОбработатьШтрихкодыКлиент(ТЧ, СтруктураДействий, КэшированныеЗначения, СоответствиеДействий);
		ПересчитатьСуммыНДСКлиент(ТЧ, СтруктураДействий, КэшированныеЗначения, СоответствиеДействий);
		ОчиститьКоличествоУчетКлиент(ТЧ, СтруктураДействий, КэшированныеЗначения, СоответствиеДействий);
		
		Если ПараметрыОбработкиТЧ.НеобходимоОбработатьВсюТЧ Тогда
			Для Каждого ТекущаяСтрока Из ТЧ Цикл
				
				ТекСтруктураДействий = СоответствиеДействий[ТекущаяСтрока];
				
				Если ТекСтруктураДействий <> Неопределено Тогда
					ОбработатьСтрокуТЧКлиент(ТекущаяСтрока, ТекСтруктураДействий, КэшированныеЗначения);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ОбработатьСтрокуТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//Обрабатывает строку табличной части на сервере.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ОбработатьСтрокуТЧСВызовомСервера(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
	КонецЕсли;
	
	СтруктураПолей = СтруктураПолейТЧ(СтруктураДействий);
	
	СтрокаДляСервера = ДанныеТекущейСтроки(ТекущаяСтрока, СтруктураПолей);
	
	ОбработкаТабличнойЧастиТоварыВызовСервера.ОбработатьСтрокуТЧСервер(СтрокаДляСервера, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаДляСервера);
	
КонецПроцедуры

// Обрабатывает строку табличной части на клиенте.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействия - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ОбработатьСтрокуТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	ПроверитьСерийныеНомераПоВладельцуКлиент(ТекущаяСтрока                   , СтруктураДействий, КэшированныеЗначения);
	ПроверитьНезаполненностьСтрокиПоступленияТоваровЕГАИС(ТекущаяСтрока      , СтруктураДействий, КэшированныеЗначения);
	ПроверитьНеобходимостьВводаАкцизнойМарки(ТекущаяСтрока                   , СтруктураДействий, КэшированныеЗначения);
	ПроверитьНеобходимостьВводаМаркируемойПродукцииГосИС(ТекущаяСтрока       , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьПараметрыАлкогольнойПродукции(ТекущаяСтрока                     , СтруктураДействий, КэшированныеЗначения);
	ПроверитьНеобходимостьВводаСправкиНаАлкоголь(ТекущаяСтрока               , СтруктураДействий, КэшированныеЗначения);
	ОчиститьДанныеПоЗаказуКлиент(ТекущаяСтрока                               , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьДанныеПоДокументуПродажиВСтрокеТЧКлиент(ТекущаяСтрока           , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьТипНоменклатурыВСтрокеТЧКлиент(ТекущаяСтрока                    , СтруктураДействий, КэшированныеЗначения);
	ПроверитьФлагРезервированияВСтрокеТЧКлиент(ТекущаяСтрока                 , СтруктураДействий, КэшированныеЗначения);
	ПроверитьКорректностьЗаполнитьХарактеристикиИУпаковкиКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоУпаковокВСтрокеТЧКлиент(ТекущаяСтрока               , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоУпаковокФактВСтрокеТЧКлиент(ТекущаяСтрока           , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоЕдиницПланВСтрокеТЧКлиент(ТекущаяСтрока             , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоЕдиницФактВСтрокеТЧКлиент(ТекущаяСтрока             , СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ПересчитатьКоличествоЕдиницВЕТИСВСтрокеТЧКлиент(ТекущаяСтрока            , СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ПересчитатьКоличествоЕдиницПоВЕТИСВСтрокеТЧКлиент(ТекущаяСтрока          , СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ПересчитатьКоличествоЕдиницВЕТИСПоЕдиницеИзмеренияКлиент(ТекущаяСтрока   , СтруктураДействий, КэшированныеЗначения);
	
	ПересчитатьОчиститьКоличествоУчетВСтрокеТЧКлиент(ТекущаяСтрока           , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоЕдиницВСтрокеТЧКлиент(ТекущаяСтрока                 , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуЗаУпаковкуВСтрокеТЧКлиент(ТекущаяСтрока                   , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСкладПродажиВСтрокеТЧКлиент(ТекущаяСтрока                       , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьВидНалогаПоСкладуПродажиВСтрокеТЧКлиент(ТекущаяСтрока           , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьОрганизациюПродажиВСтрокеТЧКлиент(ТекущаяСтрока                 , СтруктураДействий, КэшированныеЗначения);
	ОбнулитьЦенуВСтрокеТЧКлиент(ТекущаяСтрока                                , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЦенуПродажиРозницаВСтрокеТЧКлиент(ТекущаяСтрока                 , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЦенуЗакупкиВСтрокеТЧКлиент(ТекущаяСтрока                        , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЦенуПрошлойЗакупкиВСтрокеТЧКлиент(ТекущаяСтрока                 , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьДействующуюЦенуПродажиВСтрокеТЧКлиент(ТекущаяСтрока             , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуСУчетомАгентскогоВознаграждения(ТекущаяСтрока             , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСтавкуНДСВСтрокеТЧКлиент(ТекущаяСтрока                          , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСтавкуНДСВСтрокеСкладВСтрокеТЧКлиент(ТекущаяСтрока              , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСтавкуНДСВСтрокеСкладВШапкеТЧКлиент(ТекущаяСтрока               , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьПроцентРучнойСкидкиВСтрокеТЧКлиент(ТекущаяСтрока              , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуРучнойСкидкиВСтрокеТЧКлиент(ТекущаяСтрока                , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуВСтрокеТЧКлиент(ТекущаяСтрока                            , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуСкидкуПоСуммеВПродажахВСтрокеТЧКлиент(ТекущаяСтрока       , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуСкидкуПоСуммеВЗакупкахВСтрокеТЧКлиент(ТекущаяСтрока       , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуСУчетомАвтоматическойСкидкиВСтрокеТЧКлиент(ТекущаяСтрока , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуСУчетомРучнойСкидкиВСтрокеТЧКлиент(ТекущаяСтрока         , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуНДСВСтрокеТЧКлиент(ТекущаяСтрока                         , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуНДСПоСуммеСНДСВСтрокеТЧКлиент(ТекущаяСтрока              , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуСНДСВСтрокеТЧКлиент(ТекущаяСтрока                        , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуФактВСтрокеТЧКлиент(ТекущаяСтрока                        , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуПоСуммеФактВСтрокеТЧКлиент(ТекущаяСтрока                  , СтруктураДействий, КэшированныеЗначения);
	ПроставитьПродавцаВСтрокеТЧКлиент(ТекущаяСтрока                          , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуПоСуммеСНДСВСтрокеТЧКлиент(ТекущаяСтрока                 , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуПоСуммеВЗакупкахВСтрокеТЧКлиент(ТекущаяСтрока             , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьПредставлениеТаблоВСтрокеТЧКлиент(ТекущаяСтрока                 , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьРасхожденияВСтрокеТЧКлиент(ТекущаяСтрока                      , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьКиЗВСтрокеКлиент(ТекущаяСтрока                                  , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуПоСумме(ТекущаяСтрока                                     , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуЗакупкиВСтрокеТЧКлиент(ТекущаяСтрока                     , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуПродажиВСтрокеТЧКлиент(ТекущаяСтрока                     , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуПродажиПоСуммеПродажи(ТекущаяСтрока                       , СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ПересчитатьКоличествоПоРНПТВСтрокеТЧ(ТекущаяСтрока					   , СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

#Область ПроцедурыПересчетаИЗаполненияКлиент

// Пересчитывает количество единиц плановых в строке.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьКоличествоЕдиницПланВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницПлан") Тогда
		ТекущаяСтрока.КоличествоПлан = ТекущаяСтрока.КоличествоУпаковокПлан
		   * КоэффициентУпаковкиКлиент(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

//Пересчитывает количество единиц в строке фактическое.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействия - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьКоличествоЕдиницФактВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	ИмяФакта = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницФакт",ИмяФакта) Тогда
		ТекущаяСтрока["Количество"+ИмяФакта] = ТекущаяСтрока["КоличествоУпаковок"+ИмяФакта]
		   * КоэффициентУпаковкиКлиент(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

// Очищает количество учет в строке.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействия - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьОчиститьКоличествоУчетВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ОчиститьКоличествоУчет") Тогда
		
		ТекущаяСтрока.Количество 		 = 0;
		ТекущаяСтрока.КоличествоУпаковок = 0;
		
	КонецЕсли;

КонецПроцедуры

// Пересчитывает цену за упаковку.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьЦенуЗаУпаковкуВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем КоличествоЕдиницДоПересчета;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаУпаковку", КоличествоЕдиницДоПересчета)
	   И КоличествоЕдиницДоПересчета <> 0 И НЕ КоличествоЕдиницДоПересчета = Неопределено Тогда
		ТекущаяСтрока.Цена = ТекущаяСтрока.Цена
		   / КоличествоЕдиницДоПересчета
		   * ТекущаяСтрока.Количество;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет ставку НДС в строке.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействия - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ЗаполнитьСтавкуНДСВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС") Тогда
		ТекущаяСтрока.СтавкаНДС = Неопределено;
	КонецЕсли;

КонецПроцедуры

// Заполняет ставку НДС склада в строке.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ЗаполнитьСтавкуНДСВСтрокеСкладВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДССкладВСтроке") Тогда
		ТекущаяСтрока.СтавкаНДС = Неопределено;
	КонецЕсли;

КонецПроцедуры

// Заполняет ставку НДС склада в шапке.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ЗаполнитьСтавкуНДСВСтрокеСкладВШапкеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДССкладВШапке") Тогда
		ТекущаяСтрока.СтавкаНДС = Неопределено;
	КонецЕсли;

КонецПроцедуры

// Пересчитывает сумму в строке.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьСуммуВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	ИмяКоличества = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСумму",ИмяКоличества) Тогда
		Если Не ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "КоличествоУпаковок";
		КонецЕсли;
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока[ИмяКоличества];
	КонецЕсли;

КонецПроцедуры

// Обнуляет цену в строке.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ОбнулитьЦенуВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	ИмяРеквизитаЦены = "";
	Если СтруктураДействий.Свойство("ОбнулитьЦену", ИмяРеквизитаЦены) Тогда
		Если Не ЗначениеЗаполнено(ИмяРеквизитаЦены) Тогда
			ИмяРеквизитаЦены = "Цена"
		КонецЕсли;
		ТекущаяСтрока[ИмяРеквизитаЦены] = 0;
	КонецЕсли;

КонецПроцедуры

// Пересчитывает сумму фактическую в строке табличной части.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьСуммуФактВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	ИмяКоличества = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуФакт",ИмяКоличества) Тогда
		Если Не ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "КоличествоУпаковокФакт";
		КонецЕсли;
		ТекущаяСтрока.СуммаФакт = ТекущаяСтрока.Цена * ТекущаяСтрока[ИмяКоличества];
	КонецЕсли;

КонецПроцедуры

// Пересчитывает процент ручной скидки в строке.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьПроцентРучнойСкидкиВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьПроцентРучнойСкидки", СтруктураПараметровДействия) Тогда
		
		Если ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена <> 0 Тогда
			ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100*ТекущаяСтрока.СуммаРучнойСкидки / (ТекущаяСтрока.КоличествоУпаковок *ТекущаяСтрока.Цена), 2);
		Иначе
			ТекущаяСтрока.ПроцентРучнойСкидки = 0;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Пересчитывает сумму ручной скидки в строке.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьСуммуРучнойСкидкиВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуРучнойСкидки", СтруктураПараметровДействия) Тогда
		
		ТекущаяСтрока.СуммаРучнойСкидки = Окр(ТекущаяСтрока.КоличествоУпаковок *ТекущаяСтрока.Цена * ТекущаяСтрока.ПроцентРучнойСкидки / 100, 2);
		
	КонецЕсли;

КонецПроцедуры

// Пересчитывает сумму с учетом ручной скидки в строке.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьСуммуСУчетомРучнойСкидкиВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомРучнойСкидки", СтруктураПараметровДействия) Тогда
		
		Очищать = Неопределено;
		ПересчитыватьСуммуСкидки = Неопределено;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			
			СтруктураПараметровДействия.Свойство("Очищать", Очищать);
			СтруктураПараметровДействия.Свойство("ПересчитыватьСуммуСкидки", ПересчитыватьСуммуСкидки);
			
			Если Очищать = Истина Тогда
				
				ТекущаяСтрока.СуммаРучнойСкидки = 0;
				ТекущаяСтрока.ПроцентРучнойСкидки = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ПересчитыватьСуммуСкидки = Ложь Тогда
			ТекущаяСтрока.СуммаРучнойСкидки = Окр(ТекущаяСтрока.КоличествоУпаковок *ТекущаяСтрока.Цена * ТекущаяСтрока.ПроцентРучнойСкидки / 100, 2);
		КонецЕсли;
			
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаРучнойСкидки;
		
	КонецЕсли;

КонецПроцедуры

// Пересчитывает цену скидку по сумме в продажах.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьЦенуСкидкуПоСуммеВПродажахВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПараметровДействия) Тогда
		
		ИспользоватьРучныеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьРучныеСкидки") Тогда
				ИспользоватьРучныеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ИспользоватьАвтоматическиеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьАвтоматическиеСкидки") Тогда
				ИспользоватьАвтоматическиеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Если используются ручные скидки - перерасчитаем процент и сумму ручной скидки, иначе перерасчитываем цену.
		Если ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВПродажах Тогда
			
			Если ТекущаяСтрока.КоличествоУпаковок = 0 Тогда
				Сумма = ТекущаяСтрока.Цена;
			Иначе
				Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок;
			КонецЕсли;
			
			Если Сумма = 0 Или ТекущаяСтрока.Сумма = 0 Тогда
				
				ТекущаяСтрока.Цена                = ТекущаяСтрока.Сумма;
				ТекущаяСтрока.СуммаРучнойСкидки   = 0;
				ТекущаяСтрока.ПроцентРучнойСкидки = 0;
			Иначе
				
				ТекущаяСтрока.СуммаРучнойСкидки   = Сумма - ТекущаяСтрока.Сумма;
				ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100*ТекущаяСтрока.СуммаРучнойСкидки / Сумма, 2);
				
			КонецЕсли;
			
		Иначе
			
			Если ТекущаяСтрока.КоличествоУпаковок = 0 Тогда
				ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма;
			Иначе
				ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.КоличествоУпаковок, 2);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИспользоватьАвтоматическиеСкидки Тогда
			Если КэшированныеЗначения.ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
				ТекущаяСтрока.СуммаАвтоматическойСкидки   = 0;
				ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает цену скидку по сумме в закупках
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьЦенуСкидкуПоСуммеВЗакупкахВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВЗакупках", СтруктураПараметровДействия) Тогда
		
		ИспользоватьРучныеСкидки =Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьРучныеСкидки") Тогда
				ИспользоватьРучныеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Если используются ручные скидки - перерасчитаем процент и сумму ручной скидки, иначе перерасчитываем цену.
		Если ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВЗакупках Тогда
			
			Если ТекущаяСтрока.КоличествоУпаковок = 0 Тогда
				Сумма = ТекущаяСтрока.Цена;
			Иначе
				Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок;
			КонецЕсли;
			
			Если Сумма = 0 Или ТекущаяСтрока.Сумма = 0 Тогда
				
				ТекущаяСтрока.Цена                = ТекущаяСтрока.Сумма;
				ТекущаяСтрока.СуммаРучнойСкидки   = 0;
				ТекущаяСтрока.ПроцентРучнойСкидки = 0;
			Иначе
				
				ТекущаяСтрока.СуммаРучнойСкидки   = Сумма - ТекущаяСтрока.Сумма;
				ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100*ТекущаяСтрока.СуммаРучнойСкидки / Сумма, 2);
				
			КонецЕсли;
			
		Иначе
			
			Если ТекущаяСтрока.КоличествоУпаковок = 0 Тогда
				ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма;
			Иначе
				ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.КоличествоУпаковок, 2);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает цену по сумме в закупках.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьЦенуПоСуммеВЗакупкахВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуПоСуммеВЗакупках", СтруктураПараметровДействия) Тогда
		
		Если ТекущаяСтрока.КоличествоУпаковок = 0 Тогда
			ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма;
		Иначе
			ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.КоличествоУпаковок, 2);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает цену по фактической сумме.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьЦенуПоСуммеФактВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуПоСуммеФакт", СтруктураПараметровДействия) Тогда
		
		Если ТекущаяСтрока.КоличествоУпаковокФакт = 0 Тогда
			
			ТекущаяСтрока.Цена = ТекущаяСтрока.СуммаФакт;
			
		Иначе
			
			ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.СуммаФакт / ТекущаяСтрока.КоличествоУпаковокФакт, 2);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает сумму с учетом автоматической скидки.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьСуммуСУчетомАвтоматическойСкидкиВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомАвтоматическойСкидки", СтруктураПараметровДействия) Тогда
		
		Очищать = Неопределено;
		ПересчитыватьСуммуСкидки = Неопределено;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			
			СтруктураПараметровДействия.Свойство("Очищать", Очищать);
			СтруктураПараметровДействия.Свойство("ПересчитыватьСуммуСкидки", ПересчитыватьСуммуСкидки);
			
			Если Очищать = Истина Тогда
				
				ТекущаяСтрока.СуммаАвтоматическойСкидки = 0;
				ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ПересчитыватьСуммуСкидки = Ложь Тогда
			ТекущаяСтрока.СуммаАвтоматическойСкидки = Окр(ТекущаяСтрока.КоличествоУпаковок *ТекущаяСтрока.Цена * ТекущаяСтрока.ПроцентАвтоматическойСкидки / 100, 2);
		КонецЕсли;
		
		Скидка = ТекущаяСтрока.СуммаАвтоматическойСкидки;
		
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма - Скидка;
		
	КонецЕсли;

КонецПроцедуры

// Пересчитывает сумму НДС по сумме с НДС.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьСуммуНДСПоСуммеСНДСВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДСПоСуммеСНДС", СтруктураПараметровДействия) Тогда
		
		ИмяРеквизитаСумма = "СуммаВсего";
		Если СтруктураПараметровДействия.Свойство("ИмяРеквизитаСуммаВсего") Тогда
			ИмяРеквизитаСумма = СтруктураПараметровДействия.ИмяРеквизитаСуммаВсего;
		КонецЕсли;
		
		ТекПроцентНДС = ПроцентНДСКлиент(ТекущаяСтрока.СтавкаНДС, КэшированныеЗначения);
		ТекущаяСтрока.СуммаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаНДС(ТекущаяСтрока[ИмяРеквизитаСумма], ТекПроцентНДС, Истина);
	
	КонецЕсли;

КонецПроцедуры

// Пересчитывает сумму по сумме с НДС.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьСуммуПоСуммеСНДСВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПоСуммеСНДС", СтруктураПараметровДействия) Тогда
		
		ИмяРеквизитаСумма = "СуммаВсего";
		Если СтруктураПараметровДействия.Свойство("ИмяРеквизитаСуммаВсего") Тогда
			ИмяРеквизитаСумма = СтруктураПараметровДействия.ИмяРеквизитаСуммаВсего;
		КонецЕсли;
		
		Если СтруктураПараметровДействия.ЦенаВключаетНДС Тогда
			ТекущаяСтрока.Сумма = ТекущаяСтрока[ИмяРеквизитаСумма];
		Иначе
			ТекущаяСтрока.Сумма = ТекущаяСтрока[ИмяРеквизитаСумма] - ТекущаяСтрока.СуммаНДС;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает сумму с НДС.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьСуммуСНДСВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСНДС", СтруктураПараметровДействия) Тогда
		
		ТекущаяСтрока.СуммаСНДС = ТекущаяСтрока.Сумма + ?(СтруктураПараметровДействия.ЦенаВключаетНДС, 0, ТекущаяСтрока.СуммаНДС);
	
	КонецЕсли;

КонецПроцедуры

// Пересчитывает количество упаковок.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьКоличествоУпаковокВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Имя = "";
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок",Имя) Тогда
		ТекущаяСтрока["КоличествоУпаковок" + Имя] = ТекущаяСтрока["Количество" + Имя]
		   / КоэффициентУпаковкиКлиент(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

// Пересчитывает фактическое количество упаковок.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьКоличествоУпаковокФактВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	ИмяФакта = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокФакт",ИмяФакта) Тогда
		ТекущаяСтрока["КоличествоУпаковок" + ИмяФакта] = ТекущаяСтрока["Количество" + ИмяФакта]
		   / КоэффициентУпаковкиКлиент(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

// Заполняет розничную цену продажи.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ЗаполнитьЦенуПродажиРозницаВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажиРозница") Тогда
		ТекущаяСтрока.Цена = 0;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет цену закупки.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ЗаполнитьЦенуЗакупкиВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуЗакупки") Тогда
		ТекущаяСтрока.Цена = 0;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет цену прошлой закупки.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ЗаполнитьЦенуПрошлойЗакупкиВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПрошлойЗакупки") Тогда
		ТекущаяСтрока.ЦенаПрошлойЗакупки = 0;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет действующую цену продажи
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ЗаполнитьДействующуюЦенуПродажиВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ЗаполнитьДействующуюЦенуПродажи") Тогда
		ТекущаяСтрока.Цена = 0;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет склад продажи.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ЗаполнитьСкладПродажиВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ЗаполнитьСкладПродажи") Тогда
		ТекущаяСтрока.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет вид налога по складу продажи.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ЗаполнитьВидНалогаПоСкладуПродажиВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ЗаполнитьВидНалога") Тогда
		ТекущаяСтрока.ВидНалога = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет организацию продажи.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ЗаполнитьОрганизациюПродажиВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ЗаполнитьОрганизациюПродажи") Тогда
		ТекущаяСтрока.Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФункцииПолученияСтруктураПараметровДляОбработкиТабличнойЧастиТовары

// Получает структуру пересчета суммы НДС в строке.
//
// Параметры:
//  Объект - ДокументОбъект,
//           ОбработкаОбъект.РМКУправляемыйРежим - объект табличная часть которого обрабатывается.
//
// Возвращаемое значение:
//  Структура - структура возвращаемых данных.
//
Функция СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект) Экспорт
	Возврат ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект);
КонецФункции

// Получает структуру пересчета суммы НДС в ТЧ.
//
// Параметры:
//  Объект - ДокументОбъект,
//           ОбработкаОбъект.РМКУправляемыйРежим - объект табличная часть которого обрабатывается.
//
// Возвращаемое значение:
//  Структура - структура возвращаемых данных.
//
Функция СтруктураПересчетаСуммыНДСВТЧ(Объект) Экспорт
	Возврат ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВТЧ(Объект);
КонецФункции

// Получает структуру заполнения цены закупки в строке.
//
// Параметры:
//  Объект - ДокументОбъект,
//           ОбработкаОбъект.РМКУправляемыйРежим - объект табличная часть которого обрабатывается.
//
// Возвращаемое значение:
//  Структура - структура возвращаемых данных.
//
Функция СтруктураЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект) Экспорт
	Возврат ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект);
КонецФункции

// Получает структуру заполнения ставки НДС.
//
// Параметры:
//  Объект - ДокументОбъект,
//           ОбработкаОбъект.РМКУправляемыйРежим - объект табличная часть которого обрабатывается.
//
// Возвращаемое значение:
//  Структура - структура возвращаемых данных.
//
Функция СтруктураЗаполненияСтавкиНДС(Объект) Экспорт
	Возврат ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураЗаполненияСтавкиНДС(Объект);
КонецФункции

// Получает структуру заполнения ставки НДС.
//
// Параметры:
//  Объект - ДокументОбъект,
//           ОбработкаОбъект.РМКУправляемыйРежим - объект табличная часть которого обрабатывается.
//  Штрихкоды - Массив - массив штрихкодов для обработки.
//  СтруктураДействийСДобавленнымиСтроками - Структура - действия необходимые совершить над добавленными строками.
//  СтруктураДействийСИзмененнымиСтроками - Структура - действия необходимые совершить над измененными строками.
//
// Возвращаемое значение:
//  Структура - структура возвращаемых данных.
//
Функция СтруктураОбработкиШтрихкодов(Объект, Штрихкоды, СтруктураДействийСДобавленнымиСтроками, СтруктураДействийСИзмененнымиСтроками) Экспорт
	Возврат ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураОбработкиШтрихкодов(Объект, Штрихкоды, СтруктураДействийСДобавленнымиСтроками, СтруктураДействийСИзмененнымиСтроками);
КонецФункции

// Получает структуру проверки серийных номеров по владельцу.
//
// Параметры:
//  ТекущаяСтрока - СтрокаТаблицыЗначений - строка со значением ключа связи для поиска серийных номеров по владельцу.
//  ТЧСерийныеНомера - ТаблицаЗначений - табличная часть серийных номеров для поиска.
//
// Возвращаемое значение:
//  Структура - структура возвращаемых данных.
//
Функция СтруктураПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, ТЧСерийныеНомера) Экспорт
	Возврат ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, ТЧСерийныеНомера);
КонецФункции

// Получает массив серийных номеров для строки товаров.
// 
// Параметры:
//  ТекущаяСтрока - СтрокаТаблицыЗначений - строка со значением ключа связи для поиска серийных номеров по владельцу.
//  ТЧСерийныеНомера - ТаблицаЗначений - табличная часть серийных номеров для поиска.
//
// Возвращаемое значение:
//  Массив - массив серийных номеров для строки товаров.
//
Функция МассивСерийныхНомеровДляСтрокиТоваров(КлючСвязи, ТЧСерийныеНомера) Экспорт
	Возврат ОбработкаТабличнойЧастиТоварыКлиентСервер.МассивСерийныхНомеровДляСтрокиТоваров(КлючСвязи, ТЧСерийныеНомера);
КонецФункции

// Получает структуру пересчета скидки при продажах.
// 
// Параметры:
//  Объект - ДокументОбъект,
//           ОбработкаОбъект.РМКУправляемыйРежим - объект табличная часть которого обрабатывается.
//
// Возвращаемое значение:
//  Структура - структура возвращаемых данных.
//
Функция СтруктураПересчетаЦеныСкидкиВПродажахВТЧ(Объект) Экспорт
	
	Возврат ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаЦеныСкидкиВПродажахВТЧ(Объект);
	
КонецФункции

// Получает структуру пересчета цены скидки при закупках.
// 
// Параметры:
//  Объект - ДокументОбъект,
//           ОбработкаОбъект.РМКУправляемыйРежим - объект табличная часть которого обрабатывается.
//
// Возвращаемое значение:
//  Структура - структура возвращаемых данных.
//
Функция СтруктураПересчетаЦеныСкидкиВЗакупкахВТЧ(Объект) Экспорт
	
	Возврат ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаЦеныСкидкиВЗакупкахВТЧ(Объект);
	
КонецФункции

// Получает структуру заполнения цены продажи в строке.
// 
// Параметры:
//  Объект - ДокументОбъект,
//           ОбработкаОбъект.РМКУправляемыйРежим - объект табличная часть которого обрабатывается.
//  ПриводитьКМинимальнойЦене - Булево - признак приведения к минимальной цене.
//  ОбнулятьЦену - Булево - признак обнуления цены.
//
// Возвращаемое значение:
//  Структура - структура возвращаемых данных.
//
Функция СтруктураЗаполненияЦеныПродажиВСтрокеТЧ(Объект, ПриводитьКМинимальнойЦене = Ложь, ОбнулятьЦену = Истина) Экспорт
	Возврат ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, ПриводитьКМинимальнойЦене, ОбнулятьЦену);
КонецФункции

// Получает структуры заполнения назначенной цены.
// 
// Параметры:
//  Объект - ДокументОбъект,
//           ОбработкаОбъект.РМКУправляемыйРежим - объект табличная часть которого обрабатывается.
//
// Возвращаемое значение:
//  Структура - структура возвращаемых данных.
//
Функция СтруктураЗаполненияЦеныНазначеннойВСтрокеТЧ(Объект) Экспорт
	Возврат ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураЗаполненияЦеныНазначеннойВСтрокеТЧ(Объект);
КонецФункции

// Получает структуру заполнения цены по виду цен.
// 
// Параметры:
//  Объект - ДокументОбъект,
//           ОбработкаОбъект.РМКУправляемыйРежим - объект табличная часть которого обрабатывается.
//
// Возвращаемое значение:
//  Структура - структура возвращаемых данных.
//
Функция СтруктураЗаполненияЦеныПоВидуЦенВСтрокеТЧ(Объект) Экспорт
	Возврат ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураЗаполненияЦеныПоВидуЦенВСтрокеТЧ(Объект);
КонецФункции

#КонецОбласти

#Область ИнтерактивныеПроцедуры

// Получает список упаковок для выбора.
//
// Параметры:
//  ДанныеВыбора - СписокЗначений - список упаковок для выбора.
//  СтандартнаяОбработка - Булево - признак стандартной обработки.
//  ТекущаяСтрока - Структура - строка табличной части с текущими данными.
//  ДобавлятьПустуюУпаковку - Булево - признак добавления пустой упаковки.
//
Процедура ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, ТекущаяСтрока, ДобавлятьПустуюУпаковку = Истина) Экспорт

	СтандартнаяОбработка = Ложь;

	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		ДанныеВыбора = Новый СписокЗначений;
		ОбработкаТабличнойЧастиТоварыВызовСервера.СписокДляВыбораУпаковок(ТекущаяСтрока.Номенклатура, ДанныеВыбора, ДобавлятьПустуюУпаковку);
	КонецЕсли;

КонецПроцедуры

// Получает характеристики номенклатуры.
//
// Параметры:
//  Форма - Форма - форма владелец в которой осуществляется выбор характеристики.
//  Элемент - ЭлементыФормы.Элемент - элемент формы вызывающий процедуру.
//  СтандартнаяОбработка - Булево - признак стандартной обработки.
//  ТекущаяСтрока - Структура - строка с текущими данными.
//  ОткрытьСозданиеНовойХарактеристики - Булево - признак необходимости создания новой характеристики.
//  ИмяТЧ - Строка - наименование табличной части.
// 
Процедура ВыбратьХарактеристикуНоменклатуры(Форма, 
											Элемент, 
											СтандартнаяОбработка, 
											ТекущаяСтрока, 
											ОткрытьСозданиеНовойХарактеристики = Ложь,
											ИмяТЧ = "Товары") Экспорт

	СтандартнаяОбработка = Ложь;

	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		ВладелецХарактеристики = Неопределено;
		Если ОбработкаТабличнойЧастиТоварыВызовСервера.ИспользованиеХарактеристикИВладелецДляВыбора(ТекущаяСтрока.Номенклатура, ВладелецХарактеристики) Тогда
			Если ВладелецХарактеристики = Неопределено Тогда
				ПоказатьПредупреждение(,НСтр("ru = 'Для данной номенклатуры характеристики не заданы.'"));
				Возврат;
			Иначе
				ПараметрыФормыВыбора = Новый Структура;
				ПараметрыФормыВыбора.Вставить("ТекущийЭлемент"  , ТекущаяСтрока.Характеристика);
				ПараметрыФормыВыбора.Вставить("ПараметрВладелец", ВладелецХарактеристики);
				ПараметрыФормыВыбора.Вставить("Номенклатура"    , ТекущаяСтрока.Номенклатура);
				Если ОткрытьСозданиеНовойХарактеристики Тогда
					ПараметрыФормыВыбора.Вставить("ОткрытьСозданиеНовойХарактеристики");
					
					ПараметрыСоздания = Новый Структура;
					ПараметрыСоздания.Вставить("ИдентификаторТекущейСтроки", ТекущаяСтрока.ПолучитьИдентификатор());
					ПараметрыСоздания.Вставить("ИмяТЧ", ИмяТЧ);
					ОбработчикОповещения = Новый ОписаниеОповещения("ОбработатьСозданиеИВыборНовойХарактеристики", Форма, ПараметрыСоздания);
					ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора", ПараметрыФормыВыбора, Элемент,,,,ОбработчикОповещения,);
					
				Иначе
					ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора", ПараметрыФормыВыбора, Элемент);
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Для данной номенклатуры отключено использование характеристик.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Создает характеристику номенклатуры.
//
// Параметры:
//  Форма - Форма - форма владелец, которая инициирует создание характеристики.
//  Элемент - ЭлементыФормы.Элемент - элемент формы вызывающий процедуру.
//  СтандартнаяОбработка - Булево - признак стандартной обработки.
//  ТекущаяСтрока - Структура - строка с текущими данными.
//  ИмяТЧ - Строка - наименование табличной части.
//  ИмяРеквизита - Строка - наименование реквизита.
// 
Процедура СоздатьХарактеристикуНоменклатуры(Форма, 
											Элемент, 
											СтандартнаяОбработка, 
											ТекущаяСтрока, 
											ИмяТЧ = "Товары",
											ИмяРеквизита = "Характеристика") Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		ВладелецХарактеристики = Неопределено;
		Если ОбработкаТабличнойЧастиТоварыВызовСервера.ИспользованиеХарактеристикИВладелецДляВыбора(ТекущаяСтрока.Номенклатура, ВладелецХарактеристики) Тогда
			Если ВладелецХарактеристики = Неопределено Тогда
				ПоказатьПредупреждение(,НСтр("ru = 'Для данной номенклатуры характеристики не заданы.'"));
				Возврат;
			Иначе
				ПараметрыФормыВыбора = Новый Структура;
				ПараметрыФормыВыбора.Вставить("ТекущийЭлемент"  , ТекущаяСтрока[ИмяРеквизита]);
				ПараметрыФормыВыбора.Вставить("ПараметрВладелец", ВладелецХарактеристики);
				ПараметрыФормыВыбора.Вставить("Номенклатура"    , ТекущаяСтрока.Номенклатура);
				ПараметрыФормыВыбора.Вставить("ОткрытьСозданиеНовойХарактеристики");
				
				ПараметрыСоздания = Новый Структура;
				
				Если ТипЗнч(ТекущаяСтрока) = Тип("Структура") Тогда
					ПараметрыСоздания.Вставить("ИдентификаторТекущейСтроки", ТекущаяСтрока.ИдентификаторТекущейСтроки);
				Иначе
					ПараметрыСоздания.Вставить("ИдентификаторТекущейСтроки", ТекущаяСтрока.ПолучитьИдентификатор());
				КонецЕсли;
				
				ПараметрыСоздания.Вставить("ИмяТЧ", ИмяТЧ);
				ПараметрыСоздания.Вставить("ИмяРеквизита", ИмяРеквизита);
				
				ОбработчикОповещения = Новый ОписаниеОповещения("ОбработатьСозданиеИВыборНовойХарактеристики", Форма, ПараметрыСоздания);
				ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаЭлемента", ПараметрыФормыВыбора, Элемент,,,,ОбработчикОповещения,);
				
			КонецЕсли;
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Для данной номенклатуры отключено использование характеристик.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработки ручного ввода штрихкода.
//
// Параметры:
//  Объект - ДокументОбъект - документ в котором осуществляется ввод штрихкода.
//
Процедура ВвестиШтрихкод(Объект) Экспорт
	
	Штрихкод = "";
	ТекстЗаголовка = НСтр("ru = 'Введите штрихкод'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеПоискаПоШтрихкоду", Объект);
	
	ПоказатьВводСтроки(ОписаниеОповещения, Штрихкод, ТекстЗаголовка);
	
КонецПроцедуры

// Обрабатывает ручной ввод штрихкода серии.
//
// Параметры:
//  Объект - ДокументОбъект - документ в котором осуществляется ввод штрихкода.
//
Процедура ВвестиШтрихкодСерии(Объект) Экспорт
	
	Штрихкод = "";
	ТекстЗаголовка = НСтр("ru = 'Введите штрихкод серии'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеПоискаПоШтрихкоду", Объект);
	
	ПоказатьВводСтроки(ОписаниеОповещения, Штрихкод, ТекстЗаголовка);
	
КонецПроцедуры

// Осуществляет поиск по магнитному коду.
//
// Параметры:
//  Объект - ДокументОбъект - документ в котором осуществляется ввод штрихкода.
//
Процедура ВвестиМагнитныйКод(Объект) Экспорт
	
	Код = "";
	ТекстЗаголовка = НСтр("ru = 'Введите магнитный код'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеПоискаПоМагнитномуКоду", Объект);
	
	ПоказатьВводСтроки(ОписаниеОповещения, Код, ТекстЗаголовка);
	
КонецПроцедуры

// Разбивает строку табличной части.
// 
// Параметры:
//  Форма - Форма - форма владелец, которая инициирует разбитие строки.
//  ТЧ - ТабличнаяЧасть - табличная часть товаров.
//  ДанныеФормы - ДанныеФормыКоллекция - данные текущей формы.
//  ИмяПоляКоличество - Строка - наименование поля количество.
//  Заголовок - Строка - заголовок поля.
//  РазрешитьНулевоеКоличество - Булево - признак возможности нулевого количества.
//
Процедура РазбитьСтрокуТЧ(Форма, ТЧ, ДанныеФормы, ИмяПоляКоличество = "", Заголовок = "", РазрешитьНулевоеКоличество = Истина) Экспорт
	
	Если Не ЗначениеЗаполнено(ИмяПоляКоличество) Тогда
		ИмяПоляКоличество = "КоличествоУпаковок";
	КонецЕсли;
	
	ТекущаяСтрока	= ДанныеФормы.ТекущиеДанные;
	ЧислоВведено = Истина;
	ТекстЗаголовка	= ?(ЗначениеЗаполнено(Заголовок), Заголовок, НСтр("ru = 'Введите количество товара в новой строке'"));
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Для выполнения команды требуется выбрать строку табличной части.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат;
	ИначеЕсли ТекущаяСтрока[ИмяПоляКоличество] = 0
		И Не РазрешитьНулевоеКоличество Тогда
		ТекстСообщения = НСтр("ru = 'Невозможно разбить строку с нулевым количеством.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РазрешитьНулевоеКоличество", РазрешитьНулевоеКоличество);
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ДополнительныеПараметры.Вставить("ТЧ", ТЧ);
	ДополнительныеПараметры.Вставить("ДанныеФормы", ДанныеФормы);
	ДополнительныеПараметры.Вставить("ИмяПоляКоличество", ИмяПоляКоличество);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Заголовок", Заголовок);
	ДополнительныеПараметры.Вставить("НоваяСтрока", Неопределено);
	
	
	Если ТекущаяСтрока[ИмяПоляКоличество] <> 0 Тогда
		
		Количество = ТекущаяСтрока[ИмяПоляКоличество];
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеРазбитьСтроку", Форма, ДополнительныеПараметры);
		
		ПоказатьВводЧисла(ОписаниеОповещения, Количество, ТекстЗаголовка, 15, 3);
		
	Иначе
		
		Количество = 0;
		
		ИндексТекущейСтроки 	 = ТЧ.Индекс(ТекущаяСтрока);
		НоваяСтрока 			 = ТЧ.Вставить(ИндексТекущейСтроки + 1);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		
		НоваяСтрока[ИмяПоляКоличество]      = Количество;
		ТекущаяСтрока[ИмяПоляКоличество] 	= ТекущаяСтрока[ИмяПоляКоличество] - НоваяСтрока[ИмяПоляКоличество];
		
		ДанныеФормы.ТекущаяСтрока  = НоваяСтрока.ПолучитьИдентификатор();
		
		ДополнительныеПараметры.НоваяСтрока = НоваяСтрока;

		Форма.ОповещениеРазбитьСтроку(Количество, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет значение количества в новой строке.
//
// Параметры:
//  Количество - Число - значение количества.
//  ДополнительныеПараметры - Структура - структура дополнительных параметров по которым проверяется значение.
//
Процедура РазбитьСтрокуТЧПроверитьЧисло(Количество, ДополнительныеПараметры) Экспорт
	
	ЧислоВведено               = НЕ (Количество = Неопределено);
	РазрешитьНулевоеКоличество = ДополнительныеПараметры.РазрешитьНулевоеКоличество;
	ТекущаяСтрока              = ДополнительныеПараметры.ТекущаяСтрока;
	ТЧ                         = ДополнительныеПараметры.ТЧ;
	ДанныеФормы                = ДополнительныеПараметры.ДанныеФормы;
	ИмяПоляКоличество          = ДополнительныеПараметры.ИмяПоляКоличество;
	Форма                      = ДополнительныеПараметры.Форма;
	Заголовок                  = ДополнительныеПараметры.Заголовок;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РазбитьСтрокуТЧОповещениеПредупреждения", ОбработкаТабличнойЧастиТоварыКлиент, ДополнительныеПараметры);
	
	Если Не ЧислоВведено Тогда
		Возврат;
		
	ИначеЕсли Количество = 0
		И Не РазрешитьНулевоеКоличество Тогда
		ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть равно нулю.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Количество = Неопределено;
		
	ИначеЕсли ТекущаяСтрока[ИмяПоляКоличество] >= 0
		И Количество < 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть отрицательным.'");
		Количество = Неопределено;
		ПоказатьПредупреждение(ОписаниеОповещения ,ТекстСообщения);
		
	ИначеЕсли ТекущаяСтрока[ИмяПоляКоличество] <= 0
		И Количество > 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть положительным.'");
		Количество = Неопределено;
		ПоказатьПредупреждение(ОписаниеОповещения ,ТекстСообщения);
		
	ИначеЕсли ТекущаяСтрока[ИмяПоляКоличество] >= 0
		И Количество >  ТекущаяСтрока[ИмяПоляКоличество] Тогда
		
		ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть больше количества в текущей.'");
		ПоказатьПредупреждение(ОписаниеОповещения ,ТекстСообщения);
		Количество = Неопределено;
		
	ИначеЕсли ТекущаяСтрока[ИмяПоляКоличество] <= 0
		И Количество < ТекущаяСтрока[ИмяПоляКоличество] Тогда
		
		ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть меньше количества в текущей.'");
		ПоказатьПредупреждение(ОписаниеОповещения ,ТекстСообщения);
		Количество = Неопределено;
		
	ИначеЕсли Количество =  ТекущаяСтрока[ИмяПоляКоличество]
		И Не РазрешитьНулевоеКоличество Тогда
		
		ТекстСообщения = НСтр("ru = 'Количество в новой строке должно отличаться от количества в текущей.'");
		ПоказатьПредупреждение(ОписаниеОповещения ,ТекстСообщения);
		Количество = Неопределено;

	КонецЕсли;
	
	Если НЕ Количество = Неопределено Тогда
		
		ИндексТекущейСтроки = ТЧ.Индекс(ТекущаяСтрока);
		НоваяСтрока         = ТЧ.Вставить(ИндексТекущейСтроки + 1);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		
		НоваяСтрока[ИмяПоляКоличество]      = Количество;
		ТекущаяСтрока[ИмяПоляКоличество] 	= ТекущаяСтрока[ИмяПоляКоличество] - НоваяСтрока[ИмяПоляКоличество];
		
		ДанныеФормы.ТекущаяСтрока  = НоваяСтрока.ПолучитьИдентификатор();
		ДополнительныеПараметры.НоваяСтрока = НоваяСтрока;
		
	КонецЕсли;
	
КонецПроцедуры

// Описание оповещения разбития строки.
//
// Параметры:
//  ДополнительныеПараметры - Структура - структура дополнительных параметров по которым проверяется значение.
//
Процедура РазбитьСтрокуТЧОповещениеПредупреждения(ДополнительныеПараметры) Экспорт
	
	РазрешитьНулевоеКоличество = ДополнительныеПараметры.РазрешитьНулевоеКоличество;
	ТекущаяСтрока              = ДополнительныеПараметры.ТекущаяСтрока;
	ТЧ                         = ДополнительныеПараметры.ТЧ;
	ДанныеФормы                = ДополнительныеПараметры.ДанныеФормы;
	ИмяПоляКоличество          = ДополнительныеПараметры.ИмяПоляКоличество;
	Форма                      = ДополнительныеПараметры.Форма;
	Заголовок                  = ДополнительныеПараметры.Заголовок;
	
	РазбитьСтрокуТЧ(Форма, ТЧ, ДанныеФормы, ИмяПоляКоличество, Заголовок, РазрешитьНулевоеКоличество);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработкиВыбораСерийныхНомеровВДокументах

// Вводит номера подарочных сертификатов в ТЧ.
//
// Параметры:
//  Форма - Форма - форма владелец в которой осуществлялся ввод номеров подарочных сертификатов.
//  ТЧСерийныеНомера - ТабличнаяЧасть - табличная часть серийных номеров объекта.
//  СтрокаТЧ - Структура - строка по которой необходимо ввести серийные номера.
//
Процедура ВвестиСерийныеНомераНоменклатурыВТЧ(Форма, ТЧСерийныеНомера, СтрокаТЧ) Экспорт
	Перем НовыйКлючСвязи;
	Перем Количество;

	Если СтрокаТЧ = Неопределено Тогда

		ПоказатьПредупреждение(,НСтр("ru = 'Не выбрана строка, для которой необходимо Ввести подарочные сертификаты.'"));
		Возврат;

	ИначеЕсли Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда

		ПоказатьПредупреждение(,НСтр("ru = 'Для ввода номеров подарочных сертификатов необходимо выбрать номенклатуру.'"));
		Возврат;

	КонецЕсли;
	
	ВвестиПодарочныеСертификаты(Форма, ТЧСерийныеНомера, СтрокаТЧ, НовыйКлючСвязи, Количество)
	
КонецПроцедуры

// Обрабатывает события после ввода номеров подарочных сертификатов.
//
// Параметры:
//  НовыеСерийныеНомера - Массив - массив новых введеных серийных номеров.
//  ДополнительныеПараметры - Структура - дополнительные параметры процедуры.
//
Процедура ПослеВводаНомеровПодарочныхСертификатов(НовыеСерийныеНомера, ДополнительныеПараметры) Экспорт
	
	ТЧСерийныеНомера = ДополнительныеПараметры.ТЧСерийныеНомера;
	ТекущийКлючСвязи = ДополнительныеПараметры.ТекущийКлючСвязи;
	СтрокаТЧ         = ДополнительныеПараметры.СтрокаТЧ;
	Форма            = ДополнительныеПараметры.Форма;
	ПересчетКоличества = Ложь;
	
	Если ТипЗнч(НовыеСерийныеНомера) = Тип("Массив") Тогда
		НовыйКлючСвязи = ДобавитьСерийныеНомераВТабличнуюЧасть(ТЧСерийныеНомера, НовыеСерийныеНомера, ТекущийКлючСвязи);
		Количество = НовыеСерийныеНомера.Количество();
		
		Форма.Модифицированность          = Истина;
		СтрокаТЧ.КлючСвязиСерийныхНомеров = НовыйКлючСвязи;
		СтрокаТЧ.КоличествоУпаковок       = Количество;
		ПересчетКоличества                = Истина;
		
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ПересчетКоличества", ПересчетКоличества);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыРаботыССериями

// Проверяет необходимость указания серий в строке.
//
// Параметры:
//  Форма - Форма - форма документа, в которой инициировано указание серий.
//  ПараметрыУказанияСерий - Структура - структура параметров указания серий, возвращаемая соответствующей процедурой модуля
//                           менеджера документа.
//  ВводСерийРазрешен - Булево - признак запрета ввода серий.
//  ИмяТабличногоПоля - Строка - наименование табличного поля в строке для заполнения.
//  ОсобыйВыводСообщения - Булево - признак особого вывода сообщения пользователю.
//  ТекстСообщения - Строка - текст возвращаемого сообщения пользователю.
//
Процедура ПроверитьВозможностьУказанияСерий(Форма, ПараметрыУказанияСерий, ВводСерийРазрешен, ИмяТабличногоПоля = "", ОсобыйВыводСообщения = Ложь, ТекстСообщения = "") Экспорт
	
	ВводСерийРазрешен = Истина;
	
	ИмяТЧТовары = "";
	ИмяТЧСерии  = "";
	ТоварВШапке = Ложь;
	Если Не ПараметрыУказанияСерий.Свойство("ТоварВШапке", ТоварВШапке) Тогда
		ТоварВШапке = Ложь;
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧТовары", ИмяТЧТовары) Тогда
		ИмяТЧТовары = "Товары";
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧСерии", ИмяТЧСерии) Тогда
		ИмяТЧСерии = "Серии";
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.Свойство("ТекущиеДанные") Тогда
		ТекущиеДанные = ПараметрыУказанияСерий.ТекущиеДанные;
	Иначе
		ТекущиеДанные = Неопределено;
	КонецЕсли;
	
	Если ИмяТабличногоПоля = "" Тогда
		ИмяТабличногоПоля = ИмяТЧТовары;
	КонецЕсли;
	
	Если ТоварВШапке Тогда
		Если Форма.Объект.СтатусУказанияСерий = 0 Тогда
			ТекстСообщения = НСтр("ru='Для указанного товара серии указывать не нужно.'");
			Если НЕ ОсобыйВыводСообщения Тогда
				ПоказатьПредупреждение(,ТекстСообщения);
			КонецЕсли;
			ВводСерийРазрешен = Ложь;
		КонецЕсли;
		
	Иначе
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанные = Форма.Элементы[ИмяТабличногоПоля].ТекущиеДанные;
		КонецЕсли;
		
		ЭтоМаркировкаТоваровГИСМ = ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.МаркировкаПродукцииДляГИСМ")) <> Неопределено;
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекстСообщения = НСтр("ru='Необходимо выбрать строку товаров, для которой необходимо указать серии.'");
			Если НЕ ОсобыйВыводСообщения Тогда
				ПоказатьПредупреждение(,ТекстСообщения);
			КонецЕсли;
			ВводСерийРазрешен = Ложь;
		ИначеЕсли ТекущиеДанные.СтатусУказанияСерий = 0 Тогда
			Если Не ЭтоМаркировкаТоваровГИСМ Тогда
				ТекстСообщения = НСтр("ru='Для этого товара серии указывать не нужно.'");
			Иначе
				ТекстСообщения = НСтр("ru='Для этого товара не настроено указание серий в магазине %Магазин%.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, " %Магазин%", Форма.Объект.Магазин);
			КонецЕсли;
			ТекстСообщения = НСтр("ru='Для выбранной строки товаров серии указывать не нужно.'");
			Если НЕ ОсобыйВыводСообщения Тогда
				ПоказатьПредупреждение(,ТекстСообщения);
			КонецЕсли;
			ВводСерийРазрешен = Ложь;
		ИначеЕсли ЭтоМаркировкаТоваровГИСМ
			И (Не ЗначениеЗаполнено(ТекущиеДанные.НоменклатураКиЗ)
				Или ТекущиеДанные.ХарактеристикиКиЗИспользуются
					И Не ЗначениеЗаполнено(ТекущиеДанные.ХарактеристикаКиЗ)
				Или Не ЗначениеЗаполнено(ТекущиеДанные.GTIN)) Тогда
				Если Не ЗначениеЗаполнено(ТекущиеДанные.GTIN) Тогда
					ТекстСообщения = НСтр("ru='Перед указанием серий нужно указать GTIN.'");
				Иначе
					ТекстСообщения = НСтр("ru='Перед указанием серий нужно выбрать КиЗ.'");
				КонецЕсли;
		ИначеЕсли ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено
			И Не ЗначениеЗаполнено(ТекущиеДанные.Упаковка) Тогда
			
			ТекстСообщения = НСтр("ru='Перед указанием серий нужно заполнить упаковку.'");
			Если НЕ ОсобыйВыводСообщения Тогда
				ПоказатьПредупреждение(,ТекстСообщения);
			КонецЕсли;
			ВводСерийРазрешен = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет кэш ключевых реквизитов текущей строки товаров. По ключевым реквизитам осуществляется связь
// между ТЧ серий и ТЧ товаров.
//
// Параметры:
//  ТаблицаФормы - ТабличнаяЧасть - таблица формы, отображающая ТЧ товаров.
//  КэшированныеЗначения - Структура - переменная модуля формы, в которой хранятся кэшируемые значения.
//  ПараметрыУказанияСерий - Структура - структура параметров указания серий, возвращаемая соответствующей процедурой модуля
//                                       менеджера документа.
//  Копирование - Булево - признак, что кэшированная строка скопирована (параметр события ПриНачалеРедактирования).
//
Процедура ОбновитьКэшированныеЗначенияДляУчетаСерий(ТаблицаФормы, КэшированныеЗначения, ПараметрыУказанияСерий, Копирование = Ложь) Экспорт
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьКэшированныеЗначенияДляУчетаСерий(ТекущиеДанные,КэшированныеЗначения,ПараметрыУказанияСерий,Копирование);
КонецПроцедуры

// Обновляет кэш ключевых реквизитов товара в шапке документа. По ключевым реквизитам осуществляется связь
// между ТЧ серий товаром.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - основной реквизит формы.
//  КэшированныеЗначения - Структура - переменная модуля формы, в которой хранятся кэшируемые значения.
//  ПараметрыУказанияСерий - Структура - структура параметров указания серий, возвращаемая соответствующей процедурой модуля
//                                       менеджера документа.
//
Процедура ОбновитьКэшированныеЗначенияШапкиДляУчетаСерий(Объект, КэшированныеЗначения, ПараметрыУказанияСерий) Экспорт
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
	КонецЕсли;
	
	КэшированныеЗначения.Вставить("НоменклатураШапка",Объект.Номенклатура);
	КэшированныеЗначения.Вставить("ХарактеристикаШапка",Объект.Характеристика);
	КэшированныеЗначения.Вставить("КоличествоШапка",Объект.Количество);
	
	Для Каждого СтрокаМассива Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		КэшированныеЗначения.Вставить(СтрокаМассива+"Шапка",Объект[СтрокаМассива]);
	КонецЦикла;
		
КонецПроцедуры

// Проверяет необходимость обновления статусов указания серий при окончании редактирования строки товаров.
//
// Параметры:
//  ТаблицаФормы - ТаблицаЗначений - таблица формы, отображающая ТЧ товаров.
//  КэшированныеЗначения - Структура - переменная модуля формы, в которой хранятся кэшируемые значения.
//  ПараметрыУказанияСерий - Структура - структура параметров указания серий, возвращаемая соответствующей процедурой модуля
//                                       менеджера документа.
//  Удаление - Булево - признак, что проверка вызывается при удалении строки ТЧ.
//
// Возвращаемое значение:
//  Булево - если Истина - нужно обновить статусы указания серий, Ложь в противном случае.
//
Функция НеобходимоОбновитьСтатусыСерий(ТаблицаФормы, КэшированныеЗначения, ПараметрыУказанияСерий, Удаление = Ложь) Экспорт
	
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Удаление Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИмяТЧТовары = "";
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧТовары", ИмяТЧТовары) Тогда
		ИмяТЧТовары = "Товары";
	КонецЕсли;
	
	ИмяТЧСерии  = "";
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧСерии", ИмяТЧСерии) Тогда
		ИмяТЧСерии = "Серии";
	КонецЕсли;
	
	Если ИмяТЧТовары = ИмяТЧСерии Тогда
		Если КэшированныеЗначения.Номенклатура = ТекущиеДанные.Номенклатура Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	ТекстПоляСвязи = "";
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Для Каждого СтрокаМассива Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляСвязи = ТекстПоляСвязи + "," + СтрокаМассива;
	КонецЦикла;
	
	Если ПараметрыУказанияСерий.Свойство("ЭтоЗаказ")
		И ПараметрыУказанияСерий.ЭтоЗаказ
		И ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаКомплектующихДляСборки")) = Неопределено
		И ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаКомплектовДляРазборки")) = Неопределено Тогда
		ЕстьОтменаСтроки = Истина;
	Иначе
		ЕстьОтменаСтроки = Ложь;
	КонецЕсли;
	
	Если ЕстьОтменаСтроки Тогда
		ТекстПоляСвязи = ТекстПоляСвязи + ",Отменено";
	КонецЕсли;
	
	ИмяКолонкиКоличество = "";
	Если Не ПараметрыУказанияСерий.Свойство("ИмяКолонкиКоличество", ИмяКолонкиКоличество) Тогда
		ИмяКолонкиКоличество = "Количество";
	КонецЕсли;
	
	Если Не ОбщегоНазначенияРТКлиентСервер.СтруктурыРавны(КэшированныеЗначения, ТекущиеДанные,
		ИмяКолонкиКоличество + ",Номенклатура,Характеристика"+ТекстПоляСвязи) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Проверяет необходимость обновления статуса указания серий для товара в шапке документа.
//
// Параметры:
//  Объект - ДокументОбъект.СборкаТоваров - документ для обновления статусов серий.
//  КэшированныеЗначения - Структура - переменная модуля формы, в которой хранятся кэшируемые значения.
//  ПараметрыУказанияСерий - Структура - структура параметров указания серий, возвращаемая соответствующей процедурой модуля
//                                       менеджера документа.
//
// Возвращаемое значение
//  Булево - Иистина - нужно обновить статус указания серий, Ложь в противном случае.
//
Функция НеобходимоОбновитьСтатусСерийВШапке(Объект, КэшированныеЗначения, Знач ПараметрыУказанияСерий) Экспорт
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если КэшированныеЗначения.НоменклатураШапка <> Объект.Номенклатура
		Или  КэшированныеЗначения.ХарактеристикаШапка <> Объект.Характеристика
		Или  КэшированныеЗначения.КоличествоШапка <> Объект.Количество Тогда
		Возврат Истина;
	Иначе	
		Для Каждого СтрокаМассива Из ПараметрыУказанияСерий.ПоляСвязи Цикл
			Если КэшированныеЗначения[СтрокаМассива+"Шапка"] <> Объект[СтрокаМассива] Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Обновляет статус серий и подарочных сертификатов в строке документа.
//
// Параметры:
//  СтрокаТаблица - Структура - строка в которой необходимо обновить статусы серий и подарочных сертификатов.
//
Процедура ОбновитьСтатусСерийИПодарочныхСертификатов(СтрокаТаблицы) Экспорт

	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы.СтатусыСерийИПодарочныхСертификатов = 0;
	
	Если СтрокаТаблицы.Свойство("ИспользоватьСерийныеНомера") И СтрокаТаблицы.ИспользоватьСерийныеНомера Тогда
		СтрокаТаблицы.СтатусыСерийИПодарочныхСертификатов = 12;
	ИначеЕсли СтрокаТаблицы.Свойство("СтатусУказанияСерий") Тогда
		СтрокаТаблицы.СтатусыСерийИПодарочныхСертификатов = СтрокаТаблицы.СтатусУказанияСерий;
	КонецЕсли;

КонецПроцедуры

// Получает сумму документа без подарочных сертификатов.
//
// Параметры:
//  Объект - ОбработкаОбъект.РМКУправляемыйРежим - объект в котором необходимо по которому необходимо получить сумму.
//  ИмяТч - Строка - имя табличной части по которой будет получена сумма.
//
// Возвращаемое значение:
//  Число - сумма документа без подарочных сертификатов.
//
Функция СуммаДокументаБезПодарочныхСертификатов(Объект, ИмяТЧ = "Товары") Экспорт
	
	СуммаДокументаБезПодарочныхСертификатов = Объект[ИмяТЧ].Итог("Сумма");
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
	
	СтрокиПодарочныхСертификатов = Объект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаПодарочногоСертификата Из СтрокиПодарочныхСертификатов Цикл
	
		СуммаДокументаБезПодарочныхСертификатов = СуммаДокументаБезПодарочныхСертификатов - СтрокаПодарочногоСертификата.Сумма;
	
	КонецЦикла;
	
	Возврат СуммаДокументаБезПодарочныхСертификатов;
	
КонецФункции

// Заполняет реквизиты КиЗ.
//
// Параметры:
//  ТекущаяСтрока - Структура - структура со свойствами строки документа.
//  СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//  КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ЗаполнитьКиЗВСтрокеКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьКиЗВСтроке", СтруктураПараметровДействия) Тогда
		Если ОбщегоНазначенияРТКлиентСервер.ЕстьРеквизитОбъекта(ТекущаяСтрока, "НоменклатураКиЗ") Тогда
			ТекущаяСтрока.НоменклатураКиЗ   = СтруктураПараметровДействия.НоменклатураКиЗ;
			ТекущаяСтрока.ХарактеристикаКиЗ = СтруктураПараметровДействия.ХарактеристикаКиЗ;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает цену от стоимости товара в текущей строке табличной части документа.
//
// Параметры:
//  ТекущаяСтрока - Структура - структура со свойствами строки документа.
//  СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//  КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьЦенуПоСумме(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ИмяКоличества = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуПоСумме",ИмяКоличества) Тогда
		Если Не ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "КоличествоУпаковок";
		КонецЕсли;
		Если ТекущаяСтрока[ИмяКоличества] = 0 Тогда
			ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма;
		Иначе
			ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока[ИмяКоличества], 2);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет возможность ввода дробного количества.
//
// Параметры:
//  ТекущаяСтрока - Структура - структура со свойствами строки документа.
//  СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//
Процедура ПроверитьДробноеКоличество(ТекущаяСтрока, СтруктураДействий) Экспорт 
	
	ПредупредитьПользователя = Ложь;
	
	РазрешитьДробноеКоличество = ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(
	ТекущаяСтрока.Номенклатура, "РазрешитьВводДробногоКоличества");
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц") Тогда
		
		ЧислоЕдиниц 		= ТекущаяСтрока.КоличествоУпаковок;
		ЦелоеЧислоЕдиниц 	= Цел(ЧислоЕдиниц);
		ДробнаяЧасть 		= ЧислоЕдиниц - ЦелоеЧислоЕдиниц;
		
		Если Не РазрешитьДробноеКоличество И ДробнаяЧасть > 0 Тогда
			
			Если СтруктураДействий.Свойство("ЭтоРМК") И СтруктураДействий.Свойство("ЗапретитьРедактироватьНабранныйЧек") Тогда
				ТекущаяСтрока.КоличествоУпаковок = ЦелоеЧислоЕдиниц;
			Иначе
				ТекущаяСтрока.КоличествоУпаковок = 0;
			КонецЕсли;
			
			ПредупредитьПользователя = Истина;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницФакт") Тогда 
		ДробнаяЧасть = ТекущаяСтрока.КоличествоУпаковокФакт - Цел(ТекущаяСтрока.КоличествоУпаковокФакт);
		
		Если Не РазрешитьДробноеКоличество И ДробнаяЧасть > 0 Тогда 
			ТекущаяСтрока.КоличествоУпаковокФакт = 0;
			ПредупредитьПользователя = Истина;
		КонецЕсли;
		
	ИначеЕсли СтруктураДействий.Свойство("ПересчитатьКоличество") Тогда
		ДробнаяЧасть = ТекущаяСтрока.Количество - Цел(ТекущаяСтрока.Количество);
		
		Если Не РазрешитьДробноеКоличество И ДробнаяЧасть > 0 Тогда 
			ТекущаяСтрока.Количество = 0;
			ПредупредитьПользователя = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПредупредитьПользователя Тогда
		
		ТекстСообщения = НСтр("ru = 'Для номенклатуры ""%1"" не допустим ввод дробного количества.'"); 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, СокрЛП(ТекущаяСтрока.Номенклатура));
		
		Если СтруктураДействий.Свойство("ЭтоРМК") Тогда
			ЗаголовокИнформации = НСтр("ru = 'Ошибка ввода количества'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
		Иначе 
			ПоказатьПредупреждение(, ТекстСообщения);	
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область КомиссионнаяТорговля

// Пересчитывает сумма продажи в строке табличной части.
//
// Параметры:
//  ТекущаяСтрока - Структура - структура со свойствами строки документа.
//  СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//  КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьСуммуПродажиВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ИмяКоличества = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажи",ИмяКоличества) Тогда
		Если ИмяКоличества = Неопределено Тогда
			ИмяКоличества = "КоличествоУпаковок";
		КонецЕсли;
		ТекущаяСтрока.СуммаПродажи = ТекущаяСтрока.ЦенаПродажи * ТекущаяСтрока[ИмяКоличества];
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает сумму закупки в строке табличной части.
//
// Параметры:
//  ТекущаяСтрока - Структура - структура со свойствами строки документа.
//  СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//  КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьСуммуЗакупкиВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ИмяКоличества = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуЗакупки",ИмяКоличества) Тогда
		Если ИмяКоличества = Неопределено Тогда
			ИмяКоличества = "КоличествоУпаковок";
		КонецЕсли;
		ТекущаяСтрока.СуммаЗакупки = ТекущаяСтрока.ЦенаЗакупки * ТекущаяСтрока[ИмяКоличества];
	КонецЕсли;
	
КонецПроцедуры


// Пересчитывает цену от стоимости товара в текущей строке табличной части документа.
//
// Параметры:
//  ТекущаяСтрока - Структура - структура со свойствами строки документа.
//  СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//  КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьЦенуПродажиПоСуммеПродажи(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ИмяКоличества = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуПродажиПоСуммеПродажи",ИмяКоличества) Тогда
		Если ИмяКоличества = Неопределено Тогда
			ИмяКоличества = "КоличествоУпаковок";
		КонецЕсли;
		Если ТекущаяСтрока[ИмяКоличества] = 0 Тогда
			ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма;
		Иначе
			ТекущаяСтрока.ЦенаПродажи = Окр(ТекущаяСтрока.СуммаПродажи / ТекущаяСтрока[ИмяКоличества], 2);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти

#Область ПроцедурыПересчетаИЗаполненияКлиент

// Пересчитывает количество единиц в строке табличной части документа.
//
// Параметры:
//  ТекущаяСтрока - Структура - структура со свойствами строки документа.
//  СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//  КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьКоличествоЕдиницВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц") Тогда
		ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоУпаковок
		   * КоэффициентУпаковкиКлиент(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

// Пересчитывает сумму ндс в строке табличной части документа.
//
// Параметры:
//  ТекущаяСтрока - Структура - структура со свойствами строки документа.
//  СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//  КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьСуммуНДСВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС", СтруктураПараметровДействия) Тогда
		
		НДСПострочно = ОбработкаТабличнойЧастиТоварыКлиентСервер.НДСПострочно(ТекущаяСтрока);
		
		ТекПроцентНДС = ПроцентНДСКлиент(ТекущаяСтрока.СтавкаНДС, КэшированныеЗначения);
		
		Если НДСПострочно Тогда
			ТекущаяСтрока.СуммаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаНДСПоСтрочно(ТекущаяСтрока.Сумма,
										ТекущаяСтрока.Количество,
										ТекПроцентНДС,
										СтруктураПараметровДействия.ЦенаВключаетНДС);
		Иначе
			ТекущаяСтрока.СуммаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаНДС(ТекущаяСтрока.Сумма,
										ТекПроцентНДС,
										СтруктураПараметровДействия.ЦенаВключаетНДС);
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработкиВыбораСерийныхНомеровВДокументах

// Добавляет номера подарочного сертификата в табличную часть документа.
//
// Параметры:
//  ТЧСерийныеНомера - ТаблицаЗначений - таблица значений в которую необходимо добавить номера подарочных сертификатов.
//  МассивСерийныхНомеров - Массив - массив серийных номеров для заполнения.
//  ТекущийКлючСвязи - Число - ключ связи для добавления серийных номеров.
//
// Возвращаемое значение:
//  Число - новый ключ связи.
//
Функция ДобавитьСерийныеНомераВТабличнуюЧасть(ТЧСерийныеНомера, МассивСерийныхНомеров, ТекущийКлючСвязи) Экспорт

	НовыйКлючСвязи = 0;

	Если ТекущийКлючСвязи <> 0 Тогда

		Для Каждого СтрокаТЧ Из ТЧСерийныеНомера.НайтиСтроки(Новый Структура("КлючСвязиСерийныхНомеров", ТекущийКлючСвязи)) Цикл
			ТЧСерийныеНомера.Удалить(ТЧСерийныеНомера.Индекс(СтрокаТЧ));
		КонецЦикла;

	КонецЕсли;

	Если МассивСерийныхНомеров.Количество() = 0 Тогда

		НовыйКлючСвязи = 0;

	Иначе

		Если ТекущийКлючСвязи = 0 Тогда

			ВремКлючСвязи = 0;
			Для Каждого СтрокаТЧ Из ТЧСерийныеНомера Цикл
				Если ВремКлючСвязи < СтрокаТЧ.КлючСвязиСерийныхНомеров Тогда
					ВремКлючСвязи = СтрокаТЧ.КлючСвязиСерийныхНомеров;
				КонецЕсли;
			КонецЦикла;

			НовыйКлючСвязи = ВремКлючСвязи + 1;

		Иначе
			НовыйКлючСвязи = ТекущийКлючСвязи;
		КонецЕсли;

		Для Каждого СерийныйНомер Из МассивСерийныхНомеров Цикл

			НоваяСтрокаСН = ТЧСерийныеНомера.Добавить();
			НоваяСтрокаСН.СерийныйНомер            = СерийныйНомер;
			НоваяСтрокаСН.КлючСвязиСерийныхНомеров = НовыйКлючСвязи;

		КонецЦикла;
	КонецЕсли;

	Возврат НовыйКлючСвязи;

КонецФункции

#КонецОбласти

#Область АгентскоеВознаграждение

// Пересчитывает цену с учетом агентского вознаграждения.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьЦенуСУчетомАгентскогоВознаграждения(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	ПараметрыЗаполнения = Неопределено;
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСУчетомАгентскогоВознаграждения", ПараметрыЗаполнения) Тогда
		
		Если ЗначениеЗаполнено(ПараметрыЗаполнения) И ПараметрыЗаполнения.Цена = ТекущаяСтрока.Цена Тогда
			// Выделение не требуется.
			Возврат;
		КонецЕсли;
		
		ДанныеАгентскогоДоговора = ОбработкаТабличнойЧастиТоварыКлиентСервер.ДанныеАгентскогоДоговора(ТекущаяСтрока);
		Если ЗначениеЗаполнено(ДанныеАгентскогоДоговора) И ДанныеАгентскогоДоговора.ВознаграждениеВключеноВСтоимость Тогда
			Цена = 0;
			ЦенаСАгентскимВознаграждением = ТекущаяСтрока.Цена;
			ДенежныеСредстваКлиентСервер.РассчитатьПоказателиАгентскогоПлатежа(ДанныеАгентскогоДоговора, Цена, ЦенаСАгентскимВознаграждением);
			
			ТекущаяСтрока.Цена = Цена;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ВыделитьАгентскоеВознаграждение(Объект, Форма, СтруктураДействий = Неопределено, ТекущаяСтрока = Неопределено, КэшированныеЗначения = Неопределено) Экспорт
	
	КоллекцияДействийСоСтроками = Новый Соответствие;
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ВыделитьАгентскоеВознаграждениеВТаблице(Объект, СтруктураДействий, ТекущаяСтрока, КоллекцияДействийСоСтроками);
	Для Каждого ЭлементКоллекции Из КоллекцияДействийСоСтроками Цикл
		// Выполним действия со строкой.
		ПриИзмененииРеквизитовВТЧКлиент(
			Объект.Товары,
			ЭлементКоллекции.Ключ,
			КоллекцияДействийСоСтроками[ЭлементКоллекции.Ключ],
			КэшированныеЗначения);
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьРасчетныеПоляАгентскогоВознаграждения(Объект, ТекущаяСтрока);
	
	Если ТекущаяСтрока = Неопределено ИЛИ СтруктураДействий.Свойство("ЗаполнитьДоговорПлатежногоАгента") Тогда
		ОбработкаТабличнойЧастиТоварыКлиентСервер.УстановитьВидимостьДоступностьЭлементовАгентскогоВознаграждения(Форма, Объект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьНеобходимостьВводаМаркируемойПродукцииГосИС(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Если СтруктураДействий.Свойство("ПроверитьНеобходимостьВводаМаркируемойПродукцииГосИС")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "МаркируемаяПродукция") Тогда
		ТекущаяСтрока.МаркируемаяПродукция = Ложь;
		ТекущаяСтрока.ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПустаяСсылка");
	КонецЕсли;

КонецПроцедуры

#Область ПроцедурыПересчетаИЗаполненияКлиентСлужебный

// Проверяет серийные номера по владельцу
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПроверитьСерийныеНомераПоВладельцуКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если СтруктураДействий.Свойство("ПроверитьСерийныеНомераПоВладельцу") Тогда
		
		
	КонецЕсли;

КонецПроцедуры

// Проверяет корректность заполнения характеристик и упаковок.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПроверитьКорректностьЗаполнитьХарактеристикиИУпаковкиКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу") Тогда
		ТекущаяСтрока.Характеристика = Неопределено;
		ТекущаяСтрока.ХарактеристикиИспользуются = Ложь;
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу") Тогда
		ТекущаяСтрока.Упаковка = Неопределено;
	КонецЕсли;

КонецПроцедуры

// Проставляет продавца в строке.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПроставитьПродавцаВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	Перем Продавец;

	Если СтруктураДействий.Свойство("ПроставитьПродавца", Продавец) Тогда
		
		ТекущаяСтрока.Продавец = Продавец;
		
	КонецЕсли;

КонецПроцедуры

// Обрабатывает штрихкоды в табличной части.
//
// Параметры:
//  ТЧ - ТаблицаЗначений - таблица значений над которой необходимо совершить действие.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//  СоответствиеДействий - Соответствие - соответствие действий и данных.
//
Процедура ОбработатьШтрихкодыКлиент(ТЧ, СтруктураДействий, КэшированныеЗначения, СоответствиеДействий)

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ОбработатьШтрихкоды", СтруктураПараметровДействия) Тогда
		Для Каждого ТекШтрихкод Из СтруктураПараметровДействия.Штрихкоды Цикл
			ДанныеШтрихкода = КэшированныеЗначения.Штрихкоды[ТекШтрихкод.Штрихкод];

			Если ДанныеШтрихкода.Количество() = 0 Тогда
				СтруктураПараметровДействия.НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
			Иначе
				НоваяСтруктураДействий = Новый Структура;
				ОбщегоНазначенияРТКлиентСервер.ДобавитьВСтруктуру(НоваяСтруктураДействий, СтруктураДействий);

				МассивСтрокТЧ = ТЧ.НайтиСтроки(ДанныеШтрихкода);
				Если МассивСтрокТЧ.Количество() = 0 Тогда
					ОбщегоНазначенияРТКлиентСервер.ДобавитьВСтруктуру(НоваяСтруктураДействий, СтруктураПараметровДействия.СтруктураДействийСДобавленнымиСтроками);

					НайденнаяСтрока = ТЧ.Добавить();
					НайденнаяСтрока.Номенклатура       = ДанныеШтрихкода.Номенклатура;
					НайденнаяСтрока.Характеристика     = ДанныеШтрихкода.Характеристика;
					НайденнаяСтрока.Упаковка           = ДанныеШтрихкода.Упаковка;
					НайденнаяСтрока.КоличествоУпаковок = ТекШтрихкод.Количество;
				Иначе
					ОбщегоНазначенияРТКлиентСервер.ДобавитьВСтруктуру(НоваяСтруктураДействий, СтруктураПараметровДействия.СтруктураДействийСИзмененнымиСтроками);

					НайденнаяСтрока = МассивСтрокТЧ[0];
					НайденнаяСтрока.КоличествоУпаковок = НайденнаяСтрока.КоличествоУпаковок + ТекШтрихкод.Количество;
				КонецЕсли;

				СоответствиеДействий.Вставить(НайденнаяСтрока, НоваяСтруктураДействий);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Пересчитывает суммы НДС.
//
// Параметры:
//  ТЧ - ТаблицаЗначений - таблица значений над которой необходимо совершить действие.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//  СоответствиеДействий - Соответствие - соответствие действий и данных.
//
Процедура ПересчитатьСуммыНДСКлиент(ТЧ, СтруктураДействий, КэшированныеЗначения, СоответствиеДействий)

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС", СтруктураПараметровДействия) ИЛИ СтруктураДействий.Свойство("ПересчитатьСуммуНДСПоСуммеСНДС", СтруктураПараметровДействия) Тогда
		Если СтруктураПараметровДействия.Свойство("НеобходимоОбработатьВсюТЧ") Тогда
			Для Каждого ТекСтрока Из ТЧ Цикл
				НоваяСтруктураДействий = Новый Структура;
				ОбщегоНазначенияРТКлиентСервер.ДобавитьВСтруктуру(НоваяСтруктураДействий, СтруктураДействий);
				СоответствиеДействий.Вставить(ТекСтрока, НоваяСтруктураДействий);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Очищает учетное количество.
//
// Параметры:
//  ТЧ - ТаблицаЗначений - таблица значений над которой необходимо совершить действие.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//  СоответствиеДействий - Соответствие - соответствие действий и данных.
//
Процедура ОчиститьКоличествоУчетКлиент(ТЧ, СтруктураДействий, КэшированныеЗначения, СоответствиеДействий)
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ОчиститьКоличествоУчет", СтруктураПараметровДействия) Тогда
		Если ТипЗнч(СтруктураПараметровДействия) = Тип("Структура") Тогда
			Если СтруктураПараметровДействия.Свойство("НеобходимоОбработатьВсюТЧ") Тогда
				Для Каждого ТекСтрока Из ТЧ Цикл
					НоваяСтруктураДействий = Новый Структура;
					ОбщегоНазначенияРТКлиентСервер.ДобавитьВСтруктуру(НоваяСтруктураДействий, СтруктураДействий);
					СоответствиеДействий.Вставить(ТекСтрока, НоваяСтруктураДействий);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Заполняет тип номенклатуры в строке.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ЗаполнитьТипНоменклатурыВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если СтруктураДействий.Свойство("ЗаполнитьТипНоменклатуры") Тогда
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТипНоменклатурыВСтрокеТЧКлиент()

// Проверяет флаг резервирования в строке.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПроверитьФлагРезервированияВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если СтруктураДействий.Свойство("ПроверитьФлагРезервирования") Тогда
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьФлагРезервированияВСтрокеТЧКлиент()

// Заполняет данные по документу продажи.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ЗаполнитьДанныеПоДокументуПродажиВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если СтруктураДействий.Свойство("ЗаполнитьДанныеПоДокументуПродажи") Тогда
		
		
	КонецЕсли;

КонецПроцедуры

// Очищает данные по заказу.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ОчиститьДанныеПоЗаказуКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если СтруктураДействий.Свойство("ОчиститьДанныеПоЗаказу") Тогда
		
		ТекущаяСтрока.КодСтроки = 0;
		ТекущаяСтрока.ЗаказПокупателя = ПредопределенноеЗначение("Документ.ЗаказПокупателя.ПустаяСсылка");
		
	КонецЕсли;

КонецПроцедуры

// Заполняет табло представление.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ЗаполнитьПредставлениеТаблоВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если СтруктураДействий.Свойство("ЗаполнитьПредставлениеТабло") Тогда
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПредставлениеТаблоВСтрокеТЧКлиент()

// Пересчитывает расхождения товаров.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьРасхожденияВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если СтруктураДействий.Свойство("ПересчитатьРасхождения") Тогда
		
		ТекущаяСтрока.КоличествоУпаковокРасхождения = ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.КоличествоУпаковокВДокументе;
		ТекущаяСтрока.ЕстьРасхождения               = (ТекущаяСтрока.КоличествоУпаковокРасхождения <> 0);
		
		Если ТекущаяСтрока.КоличествоУпаковокРасхождения = 0 Тогда
			ТекущаяСтрока.ВариантУчетаРасхождения = ПредопределенноеЗначение("Перечисление.ВариантыУчетаРасхождений.ПустаяСсылка");
			
		ИначеЕсли ТекущаяСтрока.КоличествоУпаковокРасхождения > 0
			И ТекущаяСтрока.ВариантУчетаРасхождения = ПредопределенноеЗначение("Перечисление.ВариантыУчетаРасхождений.ЗаСчетПеревозчика") Тогда
			
			ТекущаяСтрока.ВариантУчетаРасхождения = ПредопределенноеЗначение("Перечисление.ВариантыУчетаРасхождений.ПустаяСсылка");
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработкиВыбораСерийныхНомеровВДокументахСлужебный

// Проверяет использование номеров подарочных сертификатов.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура для проверки.
//  ИспользоватьСерийныеНомера - Булево - признак использования номеров подарочных сертификатов.
//
Процедура ПроверитьИспользованиеСерийныхНомеров(Номенклатура, ИспользоватьСерийныеНомера)

	ЗначениеРеквизитов = ОбщегоНазначенияРТВызовСервера.ЗначенияРеквизитовОбъекта(Номенклатура,
			Новый Структура("ИспользоватьСерийныеНомера, ТипНоменклатуры, Представление"));

	Если НЕ ЗначениеРеквизитов.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда
		ИспользоватьСерийныеНомера = Ложь;
		
		СтрокаСообщения = НСтр("ru = 'Номенклатура ""%1%"" не является подарочным сертификатом.'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ЗначениеРеквизитов.Представление);
		ПоказатьПредупреждение(,СтрокаСообщения);
		Возврат;
	ИначеЕсли Не ЗначениеРеквизитов.ИспользоватьСерийныеНомера Тогда
		ИспользоватьСерийныеНомера = Ложь;
		
		СтрокаСообщения = НСтр("ru = 'Для номенклатуры ""%1%"" не используются номера подарочных сертификатов.'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ЗначениеРеквизитов.Представление);
		ПоказатьПредупреждение(,СтрокаСообщения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВвестиПодарочныеСертификаты(Форма, ТЧСерийныеНомера, СтрокаТЧ, НовыйКлючСвязи, Количество = 0)
	
	ТекущийКлючСвязи = СтрокаТЧ.КлючСвязиСерийныхНомеров;
	Номенклатура = СтрокаТЧ.Номенклатура;
	
	ИспользоватьСерийныеНомера = Истина;
	ПроверитьИспользованиеСерийныхНомеров(Номенклатура, ИспользоватьСерийныеНомера);
	
	Если ИспользоватьСерийныеНомера Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("МассивСерийныхНомеров",     МассивСерийныхНомеровДляСтрокиТоваров(ТекущийКлючСвязи, ТЧСерийныеНомера));
		ПараметрыФормы.Вставить("Номенклатура"             , Номенклатура);
		ПараметрыФормы.Вставить("ПредставлениеНоменклатуры", Строка(Номенклатура));
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТЧСерийныеНомера", ТЧСерийныеНомера);
		ДополнительныеПараметры.Вставить("ТекущийКлючСвязи", ТекущийКлючСвязи);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("СтрокаТЧ", СтрокаТЧ);
		ДополнительныеПараметры.Вставить("КоличествоУпаковок", СтрокаТЧ.КоличествоУпаковок);
		
		РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодбораПодарочныхСертификатов", Форма, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ПодборСерийныхНомеровПодарочныхСертификатов.Форма.ФормаВводаСерийныхНомеров", ПараметрыФормы, Форма,,,,ОписаниеОповещения,РежимОткрытия);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыРаботыССериямиСлужебный

// Получает данные текущей строки по структуре полей.
// 
// Параметры:
//  ТекущаяСтрока - Структура - структура данных текущей строки.
//  СтруктураПолейТЧ - Структура - структура полей табличной части.
//
// Возвращаемое значение:
//  Структура - данные текущей строки в соответствии со структурой полей.
//
Функция ДанныеТекущейСтроки(ТекущаяСтрока, СтруктураПолейТЧ)

	ДанныеТекущейСтроки = Новый Структура;
	ОбщегоНазначенияРТКлиентСервер.ДобавитьВСтруктуру(ДанныеТекущейСтроки, СтруктураПолейТЧ);
	ЗаполнитьЗначенияСвойств(ДанныеТекущейСтроки, ТекущаяСтрока);

	Возврат ДанныеТекущейСтроки;

КонецФункции

// Получает коэффициент упаковки.
//
// Параметры:
//  ТекУпаковка - СправочникСсылка.Упаковки - упаковка по которой получается информация.
//  КэшированныеЗначения - Структура - - структура данных кэшированных значений.
//
// Возвращаемое значение:
//  Число - текущий коэффициент.
//
Функция КоэффициентУпаковкиКлиент(ТекУпаковка, КэшированныеЗначения)

	Если ЗначениеЗаполнено(ТекУпаковка) Тогда
		ТекКоэффициент = КэшированныеЗначения.КоэффициентыУпаковок[ТекУпаковка];
		Если ТекКоэффициент = Неопределено Тогда
			ТекКоэффициент = 1;
		КонецЕсли; 
	Иначе
		ТекКоэффициент = 1;
	КонецЕсли;

	Возврат ТекКоэффициент;

КонецФункции

// Получает процент НДС.
//
// Параметры:
//  ТекУпаковка - ПеречислениеСсылка.СтавкиНДС - текущая ставка НДС.
//  КэшированныеЗначения - Структура - - структура данных кэшированных значений.
//
// Возвращаемое значение:
//  Число - ставка НДС числом.
//
Функция ПроцентНДСКлиент(ТекСтавкаНДС, КэшированныеЗначения)
	
	Результат = 0;
	Если ЗначениеЗаполнено(ТекСтавкаНДС) Тогда
		Если КэшированныеЗначения.Свойство("ПроцентыСтавокНДС") Тогда
			ТекПроцентНДС = КэшированныеЗначения.ПроцентыСтавокНДС[ТекСтавкаНДС];
		Иначе
			КэшированныеЗначения.Вставить("ПроцентыСтавокНДС", Новый Соответствие);
			ТекПроцентНДС = Неопределено;
		КонецЕсли;
		
		Если ТекПроцентНДС = Неопределено Тогда
			ТекПроцентНДС = ОбработкаТабличнойЧастиТоварыКлиентПовтИсп.СтавкаНДСЧислом(ТекСтавкаНДС);
			КэшированныеЗначения.ПроцентыСтавокНДС.Вставить(ТекСтавкаНДС, ТекПроцентНДС);
			Результат = ТекПроцентНДС;
		Иначе
			Результат = ТекПроцентНДС;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Проверяет полноту заполненности данных строки Поступления товаров
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПроверитьНезаполненностьСтрокиПоступленияТоваровЕГАИС(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если СтруктураДействий.Свойство("ПроверитьНезаполненностьСтрокиПоступленияТоваровЕГАИС") Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			Если ТекущаяСтрока.ХарактеристикиИспользуются Тогда
				Если ЗначениеЗаполнено(ТекущаяСтрока.Характеристика)  Тогда
					ТекущаяСтрока.ЕстьОшибкиВЗаполненииСтроки = Ложь;
				Иначе
					ТекущаяСтрока.ЕстьОшибкиВЗаполненииСтроки = Истина;
				КонецЕсли;
			Иначе
				ТекущаяСтрока.ЕстьОшибкиВЗаполненииСтроки = Ложь;
			КонецЕсли;
		Иначе
			ТекущаяСтрока.ЕстьОшибкиВЗаполненииСтроки = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьНеобходимостьВводаАкцизнойМарки(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Если СтруктураДействий.Свойство("ПроверитьНеобходимостьВводаАкцизнойМарки") Тогда
		ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПараметрыАлкогольнойПродукции(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Если СтруктураДействий.Свойство("ЗаполнитьПараметрыАлкогольнойПродукции") Тогда
		ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьНеобходимостьВводаСправкиНаАлкоголь(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Если СтруктураДействий.Свойство("ПроверитьНеобходимостьВводаСправкиНаАлкоголь") Тогда
		ТекущаяСтрока.НеобходимостьВводаСправкиНаАлкоголь = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедуры

// Получает параметры для обработки ТЧ.
//
// Параметры:
//  ТЧ - ТаблицаЗначений - табличная часть для обработки.
//  ТекущаяСтрока - Структура - структура данных.
//  СтруктураОбщихДействий - Структура - структура общих действий над таблицей значений.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
// Возвращаемое значение:
//  Структура - структура параметров и действий для обработки табличной части.
//
Функция ПолучитьПараметрыОбработкиТЧ(ТЧ, ТекущаяСтрока, СтруктураОбщихДействий, КэшированныеЗначения)

	Перем Характеристика;
	Перем Упаковка;
	Перем СтруктураПараметровДействия;

	НеобходимВызовСервера     = Ложь;
	НеобходимоОбработатьВсюТЧ = Ложь;

	СтруктураДействий = Новый Структура;
	ОбщегоНазначенияРТКлиентСервер.ДобавитьВСтруктуру(СтруктураДействий, СтруктураОбщихДействий);

	БудутДобавленныеСтроки = Ложь;
	БудутИзмененныеСтроки  = Ложь;
	
	Если СтруктураДействий.Свойство("ПроверитьСерийныеНомераПоВладельцу", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		НеобходимВызовСервера = Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьНеобходимостьВводаАкцизнойМарки")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		НеобходимВызовСервера = Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьНеобходимостьВводаМаркируемойПродукцииГосИС")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		НеобходимВызовСервера = Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПараметрыАлкогольнойПродукции")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		НеобходимВызовСервера = Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьНеобходимостьВводаСправкиНаАлкоголь")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		НеобходимВызовСервера = Истина;
	КонецЕсли;
	
	ПроверитьХарактеристикуПоВладельцу = СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу", Характеристика);
	ПроверитьЗаполнитьУпаковкуПоВладельцу = СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу", Упаковка);
	
	Если (ПроверитьХарактеристикуПоВладельцу
		ИЛИ ПроверитьЗаполнитьУпаковкуПоВладельцу) 
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		 
		НеобходимВызовСервера = Истина;
				
	КонецЕсли;

	УпаковкаНоменклатура = Неопределено;
	
	Если (СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц")
	 Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок")
	 Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокФакт")
	 Или СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницПлан")
	 Или СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницФакт")
	 Или СтруктураДействий.Свойство("ЗаполнитьОбъемВесУпаковки")) Тогда
		
		Если НеобходимоОбработатьВсюТЧ Тогда
			Если БудутДобавленныеСтроки Тогда
				НеобходимВызовСервера = Истина;
			Иначе
				Для Каждого СтрокаТЧ Из ТЧ Цикл
					Если ЗначениеЗаполнено(СтрокаТЧ.Упаковка)
					   И КэшированныеЗначения.КоэффициентыУпаковок[СтрокаТЧ.Упаковка] = Неопределено Тогда
						НеобходимВызовСервера = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)
			   И ЗначениеЗаполнено(ТекущаяСтрока.Упаковка)
			   И КэшированныеЗначения.КоэффициентыУпаковок[ТекущаяСтрока.Упаковка] = Неопределено Тогда
				НеобходимВызовСервера = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПересчета = Неопределено;
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоПоРНПТ", ПараметрыПересчета) Тогда
		МестоХранения = ?(ПараметрыПересчета.МестоХраненияВТабличнойЧасти,
					ТекущаяСтрока[ПараметрыПересчета.ИмяПоляМестоХранения],
					ПараметрыПересчета.МестоХранения);
					
		КлючКоэффициента = ОбработкаТабличнойЧастиТоварыКлиентСервер.КлючКэшаКоэффициентРНПТ(ПараметрыПересчета.Организация,
			ТекущаяСтрока.Номенклатура,
			ТекущаяСтрока.Характеристика,
			МестоХранения,
			ТекущаяСтрока.НомерГТД);
			
		Кэш = КэшированныеЗначения.КоэффициентыРНПТ[КлючКоэффициента];
		
		Если Кэш = Неопределено Тогда
			НеобходимВызовСервера = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницВЕТИС", УпаковкаНоменклатура)
	 Или СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницПоВЕТИС", УпаковкаНоменклатура)
	 Или СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницВЕТИСПоЕдиницеИзмерения", УпаковкаНоменклатура)) Тогда
	
		ПараметрыПересчета = ОбработкаТабличнойЧастиТоварыКлиентСервер.НормализоватьПараметрыПересчетаЕдиниц(ТекущаяСтрока, УпаковкаНоменклатура);
		
		КлючКоэффициента = ОбработкаТабличнойЧастиТоварыКлиентСервер.КлючКэшаУпаковки(ПараметрыПересчета.Номенклатура, ПараметрыПересчета.Упаковка);
		
		Если ЗначениеЗаполнено(ПараметрыПересчета.Упаковка)
			И ЗначениеЗаполнено(ПараметрыПересчета.Номенклатура)
			И КэшированныеЗначения.КоэффициентыУпаковок[КлючКоэффициента] = Неопределено Тогда
			
				НеобходимВызовСервера = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьКоличествоУчет", СтруктураПараметровДействия) Тогда
		Если НЕ СтруктураПараметровДействия = Неопределено И СтруктураПараметровДействия.Свойство("НеобходимоОбработатьВсюТЧ") Тогда
			НеобходимоОбработатьВсюТЧ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажи", СтруктураПараметровДействия) Тогда
		Если НеобходимоОбработатьВсюТЧ Тогда
			Если БудутДобавленныеСтроки Тогда
				НеобходимВызовСервера = Истина;
			Иначе
				Для Каждого СтрокаТЧ Из ТЧ Цикл
					Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура)  Тогда
						НеобходимВызовСервера = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
				НеобходимВызовСервера = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПоВидуЦен", СтруктураПараметровДействия) Тогда
		Если НеобходимоОбработатьВсюТЧ Тогда
			Если БудутДобавленныеСтроки Тогда
				НеобходимВызовСервера = Истина;
			Иначе
				Для Каждого СтрокаТЧ Из ТЧ Цикл
					Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура)  Тогда
						НеобходимВызовСервера = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
				НеобходимВызовСервера = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;                                             
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуЗакупки", СтруктураПараметровДействия) Тогда
		Если НеобходимоОбработатьВсюТЧ Тогда
			Если БудутДобавленныеСтроки Тогда
				НеобходимВызовСервера = Истина;
			Иначе
				Для Каждого СтрокаТЧ Из ТЧ Цикл
					Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) 
						И ЗначениеЗаполнено(СтруктураПараметровДействия.Контрагент) Тогда
						НеобходимВызовСервера = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)  
				И ЗначениеЗаполнено(СтруктураПараметровДействия.Контрагент) Тогда
				НеобходимВызовСервера = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПрошлойЗакупки", СтруктураПараметровДействия) Тогда
		Если НеобходимоОбработатьВсюТЧ Тогда
			Если БудутДобавленныеСтроки Тогда
				НеобходимВызовСервера = Истина;
			Иначе
				Для Каждого СтрокаТЧ Из ТЧ Цикл
					Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
						НеобходимВызовСервера = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
				НеобходимВызовСервера = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;   
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС", СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия.Свойство("НеобходимоОбработатьВсюТЧ") Тогда
			НеобходимоОбработатьВсюТЧ = Истина;
		КонецЕсли;
		
		Если НеобходимоОбработатьВсюТЧ Тогда
			Если БудутДобавленныеСтроки Тогда
				НеобходимВызовСервера = Истина;
			Иначе
				Для Каждого СтрокаТЧ Из ТЧ Цикл
					Если КэшированныеЗначения.ПроцентыСтавокНДС[СтрокаТЧ.СтавкаНДС] = Неопределено Тогда
						НеобходимВызовСервера = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если КэшированныеЗначения.ПроцентыСтавокНДС[ТекущаяСтрока.СтавкаНДС] = Неопределено Тогда
				НеобходимВызовСервера = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДСПоСуммеСНДС", СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия.Свойство("НеобходимоОбработатьВсюТЧ") Тогда
			НеобходимоОбработатьВсюТЧ = Истина;
		КонецЕсли;
		
		Если НеобходимоОбработатьВсюТЧ Тогда
			Если БудутДобавленныеСтроки Тогда
				НеобходимВызовСервера = Истина;
			Иначе
				Для Каждого СтрокаТЧ Из ТЧ Цикл
					Если КэшированныеЗначения.ПроцентыСтавокНДС[СтрокаТЧ.СтавкаНДС] = Неопределено Тогда
						НеобходимВызовСервера = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если КэшированныеЗначения.ПроцентыСтавокНДС[ТекущаяСтрока.СтавкаНДС] = Неопределено Тогда
				НеобходимВызовСервера = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьТипНоменклатуры", СтруктураПараметровДействия) 
		И СтруктураДействий.Свойство("ПроверитьФлагРезервирования")
		И СтруктураДействий.Свойство("ЗаполнитьПредставлениеТабло") Тогда
		Если НеобходимоОбработатьВсюТЧ Тогда
			Если БудутДобавленныеСтроки Тогда
				НеобходимВызовСервера = Истина;
			Иначе
				Для Каждого СтрокаТЧ Из ТЧ Цикл
					Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
						НеобходимВызовСервера = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
				НеобходимВызовСервера = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
			
	Если СтруктураДействий.Свойство("ЗаполнитьРеквизитыПоНоменклатуре", СтруктураПараметровДействия)
	   И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		НеобходимВызовСервера = Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуВозвратСУчетомОснования", СтруктураПараметровДействия) Тогда
		НеобходимВызовСервера = Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровДействия) Тогда
		НеобходимВызовСервера = Истина;
		
		Если СтруктураПараметровДействия.Свойство("НеобходимоОбработатьВсюТЧ") Тогда
			НеобходимоОбработатьВсюТЧ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДССкладВШапке", СтруктураПараметровДействия) Тогда
		НеобходимВызовСервера = Истина;
		
		Если СтруктураПараметровДействия.Свойство("НеобходимоОбработатьВсюТЧ") Тогда
			НеобходимоОбработатьВсюТЧ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПараметровДействия) Тогда
		
		ИспользоватьРучныеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьРучныеСкидки") Тогда
				ИспользоватьРучныеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ИспользоватьАвтоматическиеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьАвтоматическиеСкидки") Тогда
				ИспользоватьАвтоматическиеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если (ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВПродажах = Неопределено)
			Или (ИспользоватьАвтоматическиеСкидки И КэшированныеЗначения.ИспользоватьАвтоматическиеСкидкиВПродажах = Неопределено) Тогда
			
			НеобходимВызовСервера = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВЗакупках", СтруктураПараметровДействия) Тогда
		
		ИспользоватьРучныеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьРучныеСкидки") Тогда
				ИспользоватьРучныеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользоватьРучныеСкидки  <> Неопределено И КэшированныеЗначения.ИспользоватьРучныеСкидкиВЗакупках = Неопределено Тогда
			НеобходимВызовСервера = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьДанныеПоДокументуПродажи", СтруктураПараметровДействия) Тогда
		
		НеобходимВызовСервера = Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьАссортиментСтроки")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		НеобходимВызовСервера = Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗапретРозничнойПродажи")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		НеобходимВызовСервера = Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВидНалога")
		И ЗначениеЗаполнено(ТекущаяСтрока.Склад) Тогда
		
		НеобходимВызовСервера = Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПродукциюВЕТИС") Тогда
		
		НеобходимВызовСервера = Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьОтличныеДоговорыПлатежныхАгентов") Тогда
		
		НеобходимВызовСервера = Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьИдентификаторНоменклатурыПоставщика") Тогда
		
		НеобходимВызовСервера = Истина;
		
	КонецЕсли;
	
	Возврат Новый Структура("НеобходимВызовСервера, НеобходимоОбработатьВсюТЧ, СтруктураДействий",
	   НеобходимВызовСервера,
	   НеобходимоОбработатьВсюТЧ,
	   СтруктураДействий);

КонецФункции

// Получает структуру полей ТЧ.
//
// Параметры:
//  СтруктураДействий - Структура - структура действия над табличной частью.
//
// Возвращаемое значение:
//  Структура - структура полей табличной части по структуре действий.
// 
Функция СтруктураПолейТЧ(СтруктураДействий)

	Перем СтруктураПараметровДействия;

	СтруктураПолейТЧ = Новый Структура;

	Если СтруктураДействий.Свойство("ОбработатьШтрихкоды", СтруктураПараметровДействия) Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьСерийныеНомераПоВладельцу") Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("КлючСтроки");
		СтруктураПолейТЧ.Вставить("КлючСвязиСерийныхНомеров");
		СтруктураПолейТЧ.Вставить("ИспользоватьСерийныеНомера");
		
	КонецЕсли;

	СтруктураПроверки = Неопределено;
	Если СтруктураДействий.Свойство("ПроверитьНеобходимостьВводаАкцизнойМарки", СтруктураПроверки) Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		Если ТипЗнч(СтруктураПроверки) = Тип("Структура") И СтруктураПроверки.Свойство("Организация") И СтруктураПроверки.Организация = Неопределено Тогда
			СтруктураПолейТЧ.Вставить("Организация");
		КонецЕсли;
		СтруктураПолейТЧ.Вставить("КлючСтроки");
		СтруктураПолейТЧ.Вставить("КлючСвязи");
		СтруктураПолейТЧ.Вставить("НеобходимостьВводаАкцизнойМарки");
		СтруктураПолейТЧ.Вставить("ОсобенностиУчетаНоменклатуры");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьНеобходимостьВводаМаркируемойПродукцииГосИС") Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("КлючСвязи");
		СтруктураПолейТЧ.Вставить("МаркируемаяПродукция");
		СтруктураПолейТЧ.Вставить("ОсобенностиУчетаНоменклатуры");
		СтруктураПолейТЧ.Вставить("ВидПродукцииИС");
		СтруктураПолейТЧ.Вставить("НеобходимостьВводаАкцизнойМарки");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПараметрыАлкогольнойПродукции") Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("КлючСтроки");
		СтруктураПолейТЧ.Вставить("КлючСвязи");
		СтруктураПолейТЧ.Вставить("НеобходимостьВводаАкцизнойМарки");
		СтруктураПолейТЧ.Вставить("АлкогольнаяПродукция");
		СтруктураПолейТЧ.Вставить("ВидАлкогольнойПродукцииЕГАИС");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьНеобходимостьВводаСправкиНаАлкоголь") Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("НеобходимостьВводаСправкиНаАлкоголь");
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьНезаполненностьСтрокиПоступленияТоваровЕГАИС") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ЕстьОшибкиВЗаполненииСтроки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоПоРНПТ") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("НомерГТД");
		СтруктураПолейТЧ.Вставить("Количество");
		СтруктураПолейТЧ.Вставить("КоличествоПоРНПТ");
		Если СтруктураДействий.ПересчитатьКоличествоПоРНПТ.МестоХраненияВТабличнойЧасти Тогда
			СтруктураПолейТЧ.Вставить(СтруктураДействий.ПересчитатьКоличествоПоРНПТ.ИмяПоляМестоХранения);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;
	
	ИмяРеквизитаЦены = "";
	Если СтруктураДействий.Свойство("ОбнулитьЦену", ИмяРеквизитаЦены) Тогда
		Если НЕ ЗначениеЗаполнено(ИмяРеквизитаЦены)  Тогда
			ИмяРеквизитаЦены = "Цена";
		КонецЕсли;
		СтруктураПолейТЧ.Вставить(ИмяРеквизитаЦены, 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажи") Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПоВидуЦен") Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуЗакупки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПрошлойЗакупки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ЦенаПрошлойЗакупки", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СтавкаНДС", 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" ,0);
		СтруктураПолейТЧ.Вставить("НДСПострочно" , 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДСПоСуммеСНДС") Тогда
		СтруктураПолейТЧ.Вставить("СуммаВсего", 0);
		СтруктураПолейТЧ.Вставить("СтавкаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС"  , 0);
		СтруктураПолейТЧ.Вставить("СуммаСНДС" , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаСНДС", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСумму") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"             , 0);
		СтруктураПолейТЧ.Вставить("Цена"              , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажи") Тогда
		СтруктураПолейТЧ.Вставить("СуммаПродажи"             , 0);
		СтруктураПолейТЧ.Вставить("ЦенаПродажи"              , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"       , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуЗакупки") Тогда
		СтруктураПолейТЧ.Вставить("СуммаЗакупки"             , 0);
		СтруктураПолейТЧ.Вставить("ЦенаЗакупки"              , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"       , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомРучнойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"              , 0);
		СтруктураПолейТЧ.Вставить("Количество"         , 0);
		СтруктураПолейТЧ.Вставить("Цена      "         , 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомАвтоматическойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
	КонецЕсли;
	
	ИмяКоличества = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуФакт", ИмяКоличества) Тогда
		             	
		Если Не ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "Факт";
		КонецЕсли;
				
		СтруктураПолейТЧ.Вставить("СуммаФакт"                         , 0);
		СтруктураПолейТЧ.Вставить("Цена"                              , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок" + ИмяКоличества, 0);
				
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуВозвратСУчетомОснования") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Коэффициент"         , 1);
		СтруктураПолейТЧ.Вставить("ПроцентСкидкиНаценки", 1);
		СтруктураПолейТЧ.Вставить("Сумма"               , 0);
		СтруктураПолейТЧ.Вставить("Цена"                , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"  , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаУпаковку") Тогда
		СтруктураПолейТЧ.Вставить("Цена"      , 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВПродажах") Тогда
		СтруктураПолейТЧ.Вставить("Цена"                       , 0);
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"          , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки"        , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок "        , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВЗакупках") Тогда
		СтруктураПолейТЧ.Вставить("Цена"                       , 0);
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"          , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки"        , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок "        , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок", ИмяКоличества) Тогда
		
		СтруктураПолейТЧ.Вставить("Упаковка");
		Если ЗначениеЗаполнено(ИмяКоличества) Тогда
			СтруктураПолейТЧ.Вставить("КоличествоУпаковок" + ИмяКоличества, 0);
			СтруктураПолейТЧ.Вставить("Количество" + ИмяКоличества, 0);
		Иначе
			СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
			СтруктураПолейТЧ.Вставить("Количество" , 0);
		КонецЕсли;	
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницПлан") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПлан", 0);
		СтруктураПолейТЧ.Вставить("КоличествоПлан"        , 0);
	КонецЕсли;
	
	ИмяФакта = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницФакт",ИмяФакта) Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"+ИмяФакта, 0);
		СтруктураПолейТЧ.Вставить("Количество"+ИмяФакта    , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьКоличествоУчет") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("Количество");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокФакт",ИмяФакта) Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"+ИмяФакта, 0);
		СтруктураПолейТЧ.Вставить("Количество"+ИмяФакта    , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьРасхождения") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументе");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокРасхождения");
		СтруктураПолейТЧ.Вставить("ЕстьРасхождения");
		СтруктураПолейТЧ.Вставить("ВариантУчетаРасхождения");
	КонецЕсли; 
	
	Если СтруктураДействий.Свойство("ЗаполнитьРеквизитыПоНоменклатуре") Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ЭтоУслуга");
		СтруктураПолейТЧ.Вставить("ЭтоПодарочныйСертификат");
		СтруктураПолейТЧ.Вставить("ОсобенностиУчетаНоменклатуры");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьТипНоменклатуры") Тогда
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("ПроизвольныйНоминал");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("КодТРУ");
		СтруктураПолейТЧ.Вставить("ВозможнаОплатаЭС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтрануПроисхождения") Тогда
		СтруктураПолейТЧ.Вставить("СтранаПроисхождения");
		СтруктураПолейТЧ.Вставить("Номенклатура");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьДоговорПлатежногоАгента") Тогда
		СтруктураПолейТЧ.Вставить("ДоговорКонтрагента");
		СтруктураПолейТЧ.Вставить("ДанныеАгентскогоДоговора");
		СтруктураПолейТЧ.Вставить("Номенклатура");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСУчетомАгентскогоВознаграждения") Тогда
		СтруктураПолейТЧ.Вставить("Цена");
		СтруктураПолейТЧ.Вставить("ДанныеАгентскогоДоговора");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьПредставлениеТабло") Тогда
		СтруктураПолейТЧ.Вставить("ПредставлениеТабло");
		СтруктураПолейТЧ.Вставить("Номенклатура");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьФлагРезервирования") Тогда
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Резервировать");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьСкладПродажи") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Склад");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВидНалога") Тогда
		СтруктураПолейТЧ.Вставить("Склад");
		СтруктураПолейТЧ.Вставить("ВидНалога");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОрганизациюПродажи") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Склад");
		СтруктураПолейТЧ.Вставить("Организация");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДССкладВСтроке") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Склад");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСОрганизацияВСтроке") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Склад");
		СтруктураПолейТЧ.Вставить("Организация");
		СтруктураПолейТЧ.Вставить("ВидНалога");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДССкладВШапке") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроставитьПродавца") Тогда
		СтруктураПолейТЧ.Вставить("Продавец");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьДанныеПоДокументуПродажи") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ДокументПродажи");
		СтруктураПолейТЧ.Вставить("ЧекККМ");
		СтруктураПолейТЧ.Вставить("Продавец");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Цена");
		СтруктураПолейТЧ.Вставить("Сумма");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		СтруктураПолейТЧ.Вставить("Количество");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьАлкогольнуюПродукцию") Тогда
		СтруктураПолейТЧ.Вставить("Серия");
		СтруктураПолейТЧ.Вставить("НоменклатураДляВыбора");
		СтруктураПолейТЧ.Вставить("АлкогольнаяПродукция");
		СтруктураПолейТЧ.Вставить("СопоставлениеАлкогольнаяПродукция");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуПоСуммеВЗакупках") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("Цена");
		СтруктураПолейТЧ.Вставить("СуммаВсего");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПоСуммеСНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьАссортиментСтроки") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("Номенклатура");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗапретРозничнойПродажи") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("Номенклатура");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьДанныеПоЗаказу") Тогда
		СтруктураПолейТЧ.Вставить("КодСтроки");
		СтруктураПолейТЧ.Вставить("ЗаказПокупателя");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьОтличныеДоговорыПлатежныхАгентов") Тогда
		СтруктураПолейТЧ.Вставить("ДоговорКонтрагента");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуПоСумме") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("Количество");
		СтруктураПолейТЧ.Вставить("Цена");
		СтруктураПолейТЧ.Вставить("Сумма");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницВЕТИС", СтруктураПараметровДействия)
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницПоВЕТИС", СтруктураПараметровДействия) Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияВЕТИС");
		СтруктураПолейТЧ.Вставить("Количество" + СтруктураПараметровДействия.Суффикс + "ВЕТИС", 0);
		СтруктураПолейТЧ.Вставить("Количество" + СтруктураПараметровДействия.Суффикс, 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницВЕТИСПоЕдиницеИзмерения", СтруктураПараметровДействия) Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияВЕТИС");
		СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия.ИмяПоляКоличества, 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПродукциюВЕТИС", СтруктураПараметровДействия) Тогда
		
		СтруктураПолейТЧ.Вставить("Продукция");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Серия");
		СтруктураПолейТЧ.Вставить("НоменклатураДляВыбора");
		СтруктураПолейТЧ.Вставить("СопоставлениеТекст");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияСопоставленияВетис") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмерения");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьИдентификаторНоменклатурыПоставщика") Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("НаименованиеНоменклатурыПоставщика");
		СтруктураПолейТЧ.Вставить("ИдентификаторНоменклатурыПоставщика");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагНДСПоСтрочно") Тогда 
		СтруктураПолейТЧ.Вставить("НДСПоСтрочно");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьКодТНВЭД") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("КодТНВЭД");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСлужебныеРеквизиты") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураПолейТЧ, СтруктураДействий.ЗаполнитьСлужебныеРеквизиты);
	КонецЕсли;
	
	Возврат СтруктураПолейТЧ;

КонецФункции

#КонецОбласти

#КонецОбласти