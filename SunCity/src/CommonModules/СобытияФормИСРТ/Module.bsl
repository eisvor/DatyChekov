#Область СлужебныйПрограммныйИнтерфейс

#Область Локализация

//Обработчик события вызывается на сервере при открытии формы конфигурации.
//   Выполняется определение необходимости встраивания подсистем (с учетом их наличия) в форму.
//
// Параметры:
//   Форма            - УправляемаяФорма - форма конфигурации
//   МодулиИнтеграции - Массив           - используемые модули интеграции
//
Процедура ПриОпределенииПараметровИнтеграцииФормыПрикладногоОбъекта(Форма, МодулиИнтеграции) Экспорт
	
	Модули = Новый Соответствие;
	ИмяФормы = Форма.ИмяФормы;
	
	Если ИмяФормы = "Документ.ПоступлениеТоваров.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ВозвратТоваровОтПокупателя.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ВозвратТоваровПоставщику.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ЗаказПоставщику.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.СписаниеТоваров.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.РеализацияТоваров.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ОтчетОРозничныхПродажах.Форма.ФормаДокумента" Тогда
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ")
			И НЕ ИнтеграцияГИСМ.ПодсистемаНеИспользуется() Тогда
			Модули.Вставить("СобытияФормГИСМ");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяФормы = "Документ.ПоступлениеТоваров.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ВозвратТоваровОтПокупателя.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ВозвратТоваровПоставщику.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ПеремещениеТоваров.Форма.ФормаДокумента"
		Или ИмяФормы = "Обработка.РМКУправляемыйРежим.Форма.Форма" Тогда
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
			Модули.Вставить("СобытияФормИСМП");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяФормы = "Справочник.Номенклатура.Форма.ФормаЭлемента" Тогда
		Если ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
			Модули.Вставить("СобытияФормИСМП");
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
			Модули.Вставить("СобытияФормЕГАИС");
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
		И ТипЗнч(Форма.Объект) = Тип("ДанныеФормыСтруктура") Тогда
		
		Если ИнтеграцияЕГАИС.ИспользуетсяИнтеграцияВФормеДокументаОснования(Форма, Форма.Объект) Тогда
			Модули.Вставить("СобытияФормЕГАИС");
		КонецЕсли;
		
		Если ИнтеграцияВЕТИС.ИспользуетсяИнтеграцияВФормеДокументаОснования(Форма, Форма.Объект) Тогда
			Модули.Вставить("СобытияФормВЕТИС");
		КонецЕсли;
		
		Если ИмяФормы <> "Документ.РеализацияТоваров.Форма.ФормаДокумента" Тогда 
			Если ИнтеграцияИСМП.ИспользуетсяИнтеграцияВФормеДокументаОснования(Форма, Форма.Объект) Тогда
				Модули.Вставить("СобытияФормИСМП");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Модули Цикл
		МодулиИнтеграции.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
КонецПроцедуры

// Серверные обработчики БГосИС элементов прикладных форм
//
// Параметры:
//   Форма                   - УправляемаяФорма - форма, из которой происходит вызов процедуры.
//   Элемент                 - Произвольный     - элемент-источник события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	Если Форма.ИмяФормы = "Обработка.РМКУправляемыйРежим.Форма.Форма"
		Или Форма.ИмяФормы = "Документ.ПеремещениеТоваров.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента" Тогда
		
		Если Элемент = "Товары"
			И Форма.Объект.Товары.Количество()
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект.Товары[0], "МаркируемаяПродукция") Тогда
			
			НастройкиИсточникаКешаЧека = ПроверкаИПодборПродукцииИСМПРТ.НастройкиИсточникаКешаЧека();
			Если Форма.ИмяФормы = "Документ.ПеремещениеТоваров.Форма.ФормаДокумента" Тогда
				НастройкиИсточникаКешаЧека.ЧастичноеВыбытие = Ложь;
				НастройкиИсточникаКешаЧека.ИспользоватьОСУ  = Истина;
				ПроверкаИПодборПродукцииИСМП.ЗаполнитьПризнакАвтоматическийОСУИСВТаблице(Форма.Объект.Товары);
			Иначе
				ДобавитьИзменитьКодМаркировкиКегаНаОборудованииРозлива(Форма, Элемент, ДополнительныеПараметры);
			КонецЕсли;
			
			ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(Форма, НастройкиИсточникаКешаЧека);
			ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(Форма, НастройкиИсточникаКешаЧека, Истина);
			ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(Форма);
			
		КонецЕсли;
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ВозвратТоваровОтПокупателя.Форма.ФормаДокумента" Тогда
		
		Если Элемент = "Товары" Тогда
			
			Если Форма.Объект.Товары.Количество()
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект.Товары[0], "МаркируемаяПродукция") Тогда
				НастройкиИсточникаКеша = ПроверкаИПодборПродукцииИС.НастройкиИсточникаКешаШтрихкодовУпаковок(Ложь);
				НастройкиИсточникаКеша.ЧастичноеВыбытие = Истина;
				НастройкиИсточникаКеша.ИспользоватьОСУ = Ложь;
				ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(Форма,
					НастройкиИсточникаКеша,
					Истина);
				ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(Форма);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Если Элемент = "Товары" Тогда
			
			Если Не ЭлектронноеВзаимодействиеИСМП.ДокументСвязанСЭлектронным(Форма.Объект.Ссылка)
				И Не ИнтеграцияИСМПРТ.ДокументСвязанСПриемкойТоваровИСМП(Форма.Объект.Ссылка)
				И Форма.Объект.Товары.Количество()
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект.Товары[0], "МаркируемаяПродукция") Тогда
				НастройкиИсточникаКеша = ПроверкаИПодборПродукцииИС.НастройкиИсточникаКешаШтрихкодовУпаковок(Ложь);
				Если Не ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
					НастройкиИсточникаКеша.ИспользоватьОСУ = Ложь;
				Иначе
					ПроверкаИПодборПродукцииИСМП.ЗаполнитьПризнакАвтоматическийОСУИСВТаблице(Форма.Объект.Товары);
				КонецЕсли;
				ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(Форма, НастройкиИсточникаКеша, Истина);
				
				ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(Форма);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после записи объекта на сервере.
//
// Параметры:
//  Форма - УправляемаяФорма - источник вызова
Процедура ПослеЗаписиНаСервереФормыПрикладногоОбъекта(Форма) Экспорт
	
	Если Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокументаРМК"
		Или Форма.ИмяФормы = "Документ.ПеремещениеТоваров.Форма.ФормаДокументаРМК"
		Или Форма.ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокументаРМК" Тогда
		
		ИнтеграцияИСРТ.МодифицироватьИнициализироватьФормуРМК(Форма);
		
	ИначеЕсли Форма.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаЭлемента" Тогда
		
		ИнтеграцияИСРТКлиентСервер.ЗаполнитьДанныеНастройкиПараметровНоменклатурыИС(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСозданииНаСервереВФормеПрикладногоОбъекта(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	Если Форма.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаЭлемента"
			И (Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП") <> Неопределено
			Или Форма.ПараметрыИнтеграцииГосИС.Получить("ЕГАИС") <> Неопределено) Тогда
			
		ИмяЭлементаНастройки = "НастройкаПараметровНоменклатурыИС";
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавляемыеРеквизиты.Добавить(
			Новый РеквизитФормы(ИмяЭлементаНастройки, Новый ОписаниеТипов("ФорматированнаяСтрока")));
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		Элемент = Форма.Элементы.Вставить(
			ИмяЭлементаНастройки,
			Тип("ПолеФормы"),
			Форма.Элементы.ОписаниеПраваяКолонка,
			Форма.Элементы.ТоварнаяГруппа);
		Элемент.АвтоМаксимальнаяШирина = Ложь;
		Элемент.ПутьКДанным            = ИмяЭлементаНастройки;
		Элемент.ПоложениеЗаголовка     = ПоложениеЗаголовкаЭлементаФормы.Нет;
		
		ИнтеграцияИСРТКлиентСервер.ЗаполнитьДанныеНастройкиПараметровНоменклатурыИС(Форма);
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийОбъектов

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяСправочника - Строка - имя справочника, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, УправляемаяФорма - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыСправочника(ИмяСправочника, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяДокумента - Строка - имя документа, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, УправляемаяФорма - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыДокумента(ИмяДокумента, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ВидФормы = "ФормаСписка"
		И Параметры.Свойство("ТекущаяСтрока") Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ФормаСпискаДокументов";
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяРегистра - Строка - имя регистра сведений, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, УправляемаяФорма - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыРегистраСведений(ИмяРегистра, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Возникает на сервере при создании формы.
//
// Параметры:
//  Форма - УправляемаяФорма - создаваемая форма,
//  Отказ - Булево - признак отказа от создания формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	СобытияФормИС.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка, Неопределено);
	
	ШтрихкодированиеИС.ИнициализироватьКэшМаркируемойПродукции(Форма);
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
	Если Форма.ИмяФормы = "Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.Форма.ФормаВыбора" Тогда
		Если Форма.ИмяФормы = "Документ.ВозвратИзРегистра2ЕГАИС.Форма.ФормаСпискаДокументов" Тогда
			Форма.Элементы.СтраницаКОформлению.Видимость = Ложь;
			Форма.Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		КонецЕсли;
	ИначеЕсли Форма.ИмяФормы = "Справочник.Справки2ЕГАИС.Форма.ФормаВыбора" Тогда
		ПриСозданииНаСервереФормаВыбораСправки2ЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли СтрНайти(Форма.ИмяФормы, "Справочник.ШтрихкодыУпаковокТоваров.Форма") > 0 Тогда
		ПриСозданииНаСервереФормСправочникаШтрихкодыУпаковокТоваров(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ЧекЕГАИС.Форма.ФормаСпискаДокументов" Тогда
		ПриСозданииНаСервереФормаСпискаДокументовЧекЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.АктПостановкиНаБалансЕГАИС.Форма.ФормаДокумента" Тогда
		ПриСозданииНаСервереФормаДокументаАктПостановкиНаБалансЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.АктПостановкиНаБалансЕГАИС.Форма.ФормаСпискаДокументов" Тогда
		ПриСозданииНаСервереФормаСпискаАктПостановкиНаБалансЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.АктСписанияЕГАИС.Форма.ФормаДокумента" Тогда
		ПриСозданииНаСервереФормаДокументаАктСписанияЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ВозвратИзРегистра2ЕГАИС.Форма.ФормаДокумента" Тогда
		ПриСозданииНаСервереФормаДокументаВозвратИзРегистра2ЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ПередачаВРегистр2ЕГАИС.Форма.ФормаДокумента" Тогда
		ПриСозданииНаСервереФормаДокументаПередачаВРегистр2ЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ЧекЕГАИС.Форма.ФормаДокумента" Тогда
		ПриСозданииНаСервереФормаДокументаЧекЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ЧекЕГАИСВозврат.Форма.ФормаДокумента" Тогда
		ПриСозданииНаСервереФормаДокументаЧекЕГАИСВозврат(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ТТНВходящаяЕГАИС.Форма.ФормаДокумента" Тогда
		ПриСозданииНаСервереФормаДокументаТТНВходящаяЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ТТНВходящаяЕГАИС.Форма.ФормаСпискаДокументов" Тогда
		
		Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.ПоступлениеТоваров) Тогда
			Форма.Элементы.Действия.Видимость = Ложь;
			Форма.Элементы.СписокОформитьДокументПоступления.Видимость = Ложь;
		КонецЕсли;
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ТТНИсходящаяЕГАИС.Форма.ФормаДокумента" Тогда
		ПриСозданииНаСервереФормаДокументаТТНИсходящаяЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Обработка.СопоставлениеКлассификаторовЕГАИС.Форма.СопоставлениеКлассификаторовЕГАИС" Тогда
		ПриСозданииНаСервереФормаОбработкиСопоставлениеКлассификаторовЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ПроверкаИПодбор" Тогда
		ПриСозданииНаСервереФормаОбработкиПроверкаИПодборАлкогольнойПродукцииЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "РегистрСведений.СоответствиеНоменклатурыЕГАИС.Форма.ФормаЗаписи" Тогда
		ПриСозданииНаСервереФормаЗаписиРегистрСведенийСоответствиеНоменклатурыЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "РегистрСведений.СоответствиеНоменклатурыЕГАИС.Форма.ФормаСписка" Тогда
		ПриСозданииНаСервереФормаСпискаРегистрСведенийСоответствиеНоменклатурыЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ОтчетЕГАИС.Форма.ФормаСпискаДокументов" Тогда
		
		Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.ОтчетЕГАИС) Тогда
			Форма.Элементы.ПодменюСоздатьНаОсновании.Видимость = Ложь;
		КонецЕсли;
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ВходящаяТранспортнаяОперацияВЕТИС.Форма.ФормаДокумента" Тогда
		Форма.Элементы.ГруппаТоварыБезРазбиенияСерия.Видимость = Ложь;
		Форма.Элементы.ТоварыСерия.Видимость = Ложь;
		Форма.Элементы.ГруппаТоварыБезРазбиенияХарактеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
		Форма.Элементы.ТоварыХарактеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
	ИначеЕсли Форма.ИмяФормы = "Документ.ВходящаяТранспортнаяОперацияВЕТИС.Форма.ТоварыУточнение" Тогда
		Форма.Элементы.ТоварыУточнениеСерия.Видимость = Ложь;
		Форма.Элементы.ТоварыУточнениеХарактеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
	ИначеЕсли Форма.ИмяФормы = "Документ.ЗапросСкладскогоЖурналаВЕТИС.Форма.ФормаДокумента" Тогда
		Форма.Элементы.ТоварыСерия.Видимость = Ложь;
		Форма.Элементы.ТоварыХарактеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
	ИначеЕсли Форма.ИмяФормы = "Документ.ИнвентаризацияПродукцииВЕТИС.Форма.ФормаДокумента" Тогда
		Форма.Элементы.ТоварыСерия.Видимость = Ложь;
		Форма.Элементы.ТоварыХарактеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
	ИначеЕсли Форма.ИмяФормы = "Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Форма.ФормаДокумента" Тогда
		Форма.Элементы.ТоварыСерия.Видимость = Ложь;
		Форма.Элементы.ТоварыХарактеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
	ИначеЕсли Форма.ИмяФормы = "Документ.ПроизводственнаяОперацияВЕТИС.Форма.ФормаДокумента" Тогда
		Форма.Элементы.ТоварыСерия.Видимость = Ложь;
		Форма.Элементы.ТоварыХарактеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
		
		Форма.Элементы.СырьеСерия.Видимость  = Ложь;
		
		Форма.Элементы.СтраницаСырье.Видимость                  = Ложь;
		Форма.Элементы.СтраницаТехнологическийПроцесс.Видимость = Ложь;
	ИначеЕсли Форма.ИмяФормы = "Документ.СоответствиеНоменклатурыВЕТИС.Форма.ФормаЗаписи" Тогда
		
		Форма.Элементы.Характеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
		Форма.Элементы.Серия.Видимость = Ложь;
		
	ИначеЕсли Форма.ИмяФормы = "Документ.СоответствиеНоменклатурыВЕТИС.Форма.ФормаСписка" Тогда
		
		Форма.Элементы.Характеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
		Форма.Элементы.Серия.Видимость = Ложь;
		
	ИначеЕсли Форма.ИмяФормы = "Обработка.ПанельОбменВЕТИС.Форма.Форма" Тогда
		
		Форма.Элементы.ГруппаПроизводственнаяОперацияВЕТИС.Видимость = Ложь;
		Форма.Элементы.ГруппаОбъединениеЗаписейСкладскогоЖурналаВЕТИС.Видимость = Ложь;
		
	ИначеЕсли Форма.ИмяФормы = "Обработка.ПанельОбменИСМП.Форма.Форма" Тогда
		
		Форма.Элементы.ГруппаПроизводство.Заголовок = "Маркировка";
		Форма.Элементы.ГруппаЗакупки.Заголовок = "Текущие дела ЭДО";
		
		Форма.Элементы.ГруппаСклад.Заголовок = "Прямой обмен";
		Форма.Элементы.ГруппаПродажи.Видимость = Ложь;
		
		Форма.Элементы.Переместить(Форма.Элементы.ГруппаПеремаркировкаТоваровИСМП, Форма.Элементы.ГруппаПроизводство);
		Форма.Элементы.Переместить(Форма.Элементы.ГруппаВыводИзОборотаИСМП, Форма.Элементы.ГруппаПроизводство);
		Форма.Элементы.Переместить(Форма.Элементы.ГруппаЭлектронныйДокументИсходящий, Форма.Элементы.ГруппаЗакупки);
		Форма.Элементы.Переместить(Форма.Элементы.ГруппаСписаниеКодовМаркировкиИСМП, Форма.Элементы.ГруппаПроизводство);
		Форма.Элементы.Переместить(Форма.Элементы.ГруппаПриемкаТоваровИСМП, Форма.Элементы.ГруппаСклад);
		Форма.Элементы.Переместить(Форма.Элементы.ГруппаОтгрузкаТоваровИСМП, Форма.Элементы.ГруппаСклад);
		Форма.Элементы.Переместить(Форма.Элементы.ГруппаВозвратВОборотИСМП, Форма.Элементы.ГруппаПроизводство);
		Форма.Элементы.Переместить(Форма.Элементы.ГруппаУточнениеСведенийОКодахМаркировкиИСМП, Форма.Элементы.ГруппаПроизводство);
		Форма.Элементы.Переместить(Форма.Элементы.ГруппаВскрытыеПотребительскиеУпаковкиИС, Форма.Элементы.ГруппаПроизводство);
		
		Форма.Элементы.ГруппаЗакупки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		
	ИначеЕсли Форма.ИмяФормы = "Обработка.ПанельАдминистрированияЕГАИС.Форма.НастройкиЕГАИС" Тогда
		
		// Добавим зависимые константы.
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ДополнительныеКонстанты") Тогда
			СтрокаКонстант = Форма.ДополнительныеКонстанты.Добавить();
			СтрокаКонстант.Имя = "ВыгружатьПродажиНемаркируемойПродукцииВЕГАИСРТ";
			СтрокаКонстант.Заголовок = НСтр("ru = 'Выгружать продажи немаркируемой продукции в ЕГАИС'");
			СтрокаКонстант.Описание = НСтр("ru = 'В некоторых случаях выгрузка немаркируемой алкогольной продукции в ЕГАИС может не производиться'");
			
			СтрокаКонстант = Форма.ДополнительныеКонстанты.Добавить();
			СтрокаКонстант.Имя = "ИспользоватьЕдиныйШтриховойКодДляККТИЕГАИС";
			СтрокаКонстант.Заголовок = НСтр("ru = 'Использовать единый штриховой код для ККТ и ЕГАИС'");
			СтрокаКонстант.Описание = НСтр("ru = 'Отдельный штриховой код для алкогольной продукции наноситься не будет.'");
		КонецЕсли;
		
		// Ограничим доступность при использовании РИБ.
		Если ОбменДаннымиРТ.ЭтоПодчиненныйУзелПоМагазину()
			ИЛИ ОбменДаннымиРТ.ЭтоПодчиненныйУзелПоРабочемуМесту() Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВестиУчетСведенийПоАлкогольнойПродукцииЕГАИС", "ТолькоПросмотр", Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ДатаНачалаРегистрацииРозничныхПродажВЕГАИС", "ТолькоПросмотр", Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ДатаНачалаРегистрацииРозничныхПродажВЕГАИСВСельскойМестности", "ТолькоПросмотр", Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВыгружатьПродажиНемаркируемойПродукцииВЕГАИСРТ", "ТолькоПросмотр", Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ИспользоватьЕдиныйШтриховойКодДляККТИЕГАИС", "ТолькоПросмотр", Истина);
			
		КонецЕсли;
		
	ИначеЕсли Форма.ИмяФормы = "Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ПроверкаИПодбор"
		Или Форма.ИмяФормы = "Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ПроверкаИПодбор" Тогда
		СобытияФормИСМП.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ОтгрузкаТоваровИСМП.Форма.ФормаДокумента" Тогда
		
		ЭлементПриемкаПриобретениеГосПредприятием = Форма.Элементы.Операция.СписокВыбора.НайтиПоЗначению(
			Перечисления.ВидыОперацийИСМП.ПриемкаПриобретениеГосПредприятием);
		ЭлементОтгрузкаКомиссия = Форма.Элементы.Операция.СписокВыбора.НайтиПоЗначению(
			Перечисления.ВидыОперацийИСМП.ОтгрузкаКомиссия);
		ЭлементОтгрузкаАгент = Форма.Элементы.Операция.СписокВыбора.НайтиПоЗначению(
			Перечисления.ВидыОперацийИСМП.ОтгрузкаАгент);
		
		Если ЭлементПриемкаПриобретениеГосПредприятием <> Неопределено Тогда
			Форма.Элементы.Операция.СписокВыбора.Удалить(ЭлементПриемкаПриобретениеГосПредприятием);
		КонецЕсли;
		
		Если ЭлементОтгрузкаКомиссия <> Неопределено Тогда
			Форма.Элементы.Операция.СписокВыбора.Удалить(ЭлементОтгрузкаКомиссия);
		КонецЕсли;
		
		Если ЭлементОтгрузкаАгент <> Неопределено
			И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьКомиссионнуюТорговлю") Тогда
			Форма.Элементы.Операция.СписокВыбора.Удалить(ЭлементОтгрузкаАгент);
		КонецЕсли;
		
	ИначеЕсли Форма.ИмяФормы = "ОбщаяФорма.ФормаУточненияДанныхИС" Тогда
		
		ЭлементДанныхКоличество = Форма.Элементы.ДанныеДокументаКоличество;
		
		ЭлементДанныхКоличество.Видимость = Истина;
		ЭлементДанныхКоличество.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		ЭлементДанныхКоличество.ФиксацияВТаблице = ФиксацияВТаблице.Право;
		
		УстановитьУсловноеОформлениеКоличество(Форма);
		
		Если ЗначениеЗаполнено(Форма.Склад) Тогда
			// Заполним остаток.
			ТаблицаДанныеДокумента = Форма.ДанныеДокумента.Выгрузить(, "Номенклатура, Характеристика");
			ТаблицаДанныеДокумента.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
			
			ТаблицаОстатков = ЗапасыСервер.ОстаткиНоменклатурыПоМагазину(ТаблицаДанныеДокумента, Форма.Склад);
			
			ПараметрыПоиска = Новый Структура("Номенклатура, Характеристика");
			Для Каждого ЭлементДанных Из Форма.ДанныеДокумента Цикл
				ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ЭлементДанных);
				
				СтрокиОстатков = ТаблицаОстатков.НайтиСтроки(ПараметрыПоиска);
				Если СтрокиОстатков.Количество() > 0 Тогда
					ЭлементДанных.Количество = СтрокиОстатков[0].Остаток;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Форма.ИмяФормы = "ОбщаяФорма.ВскрытиеПотребительскойУпаковкиИС" Тогда
		
		Если Не ЗначениеЗаполнено(Форма.АдресПодключенияСтрокой) И Форма.Элементы.АдресПодключенияСтрокой.ТолькоПросмотр Тогда
			Форма.Элементы.АдресПодключенияСтрокой.ТолькоПросмотр = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
#Область ОграничениеУпаковки
	Если Форма.ИмяФормы = "Документ.МаркировкаТоваровИСМП.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ВыводИзОборотаИСМП.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.СписаниеКодовМаркировкиИСМП.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.УточнениеСведенийОКодахМаркировкиИСМП.Форма.ФормаДокумента" Тогда
		
		// устанавливаем связи параметров выбора для поля "Упаковка" в таблице "Товары"
		Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.Товары.ТекущиеДанные.Номенклатура");
		
		МассивСвязи = Новый Массив();
		МассивСвязи.Добавить(Связь);
		
		ФиксМассивСвязи = Новый ФиксированныйМассив(МассивСвязи);
		Форма.Элементы.ТоварыУпаковка.СвязиПараметровВыбора = ФиксМассивСвязи;
		
		// отключаем свойство "ВыбиратьТип"
		Форма.Элементы.ТоварыУпаковка.ВыбиратьТип = Ложь;
	КонецЕсли;
#КонецОбласти
	
	Если Форма.Команды.Найти("ОткрытьПодбор") <> Неопределено Тогда
		Форма.Команды["ОткрытьПодбор"].Картинка = БиблиотекаКартинок.ПодобратьТовары;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при чтении объекта на сервере.
//
// Параметры:
//  Форма - УправляемаяФорма - форма читаемого объекта,
//  ТекущийОбъект - ДокументОбъект, СправочникОбъект - читаемый объект.
//
Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	СобытияФормРТ.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
	
КонецПроцедуры

// См. СобытияФормИСПереопределяемый.ОбработкаПроверкиЗаполненияНаСервере
//
Процедура ОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если Форма.ИмяФормы = "ОбщаяФорма.ФормаУточненияДанныхИС"
		Или Форма.ИмяФормы = "ОбщаяФорма.ФормаУточненияПодобраннойПродукцииИСМП" Тогда
		МассивНепроверяемыхРеквизитов = Новый Массив;
		Если Не Форма.ХарактеристикиИспользуются Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Характеристика");
		КонецЕсли;
		
		МассивНепроверяемыхРеквизитов.Добавить("Серия");
		
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиДействийФорм

// Возникает на сервере при записи константы в формах настроек.
//   если запись одной константы может повлечь изменение других отображаемых в этой же форме
//
// Параметры:
//   Форма             - УправляемаяФорма - форма,
//   КонстантаИмя      - Строка           - записываемая константа,
//   КонстантаЗначение - Произвольный     - значение константы.
//
Процедура ОбновитьФормуНастройкиПриЗаписиПодчиненныхКонстант(Форма, КонстантаИмя, КонстантаЗначение) Экспорт
	
	// Установим значение зависимой константы.
	Если Форма.ИмяФормы = "Обработка.ПанельАдминистрированияЕГАИС.Форма.НастройкиЕГАИС"
		И КонстантаИмя = "ВестиСведенияДляДекларацийПоАлкогольнойПродукции" Тогда
		
		Константы.ВыгружатьПродажиНемаркируемойПродукцииВЕГАИСРТ.Установить(КонстантаЗначение);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВыгружатьПродажиНемаркируемойПродукцииВЕГАИСРТ") Тогда
			Форма.ВыгружатьПродажиНемаркируемойПродукцииВЕГАИСРТ = КонстантаЗначение;
		КонецЕсли;
		
	ИначеЕсли Форма.ИмяФормы = "Обработка.ПанельАдминистрированияГИСМ.Форма.НастройкиГИСМ"
		И КонстантаИмя = "ВестиУчетМаркировкиПродукцииВГИСМ" Тогда
		
		Если КонстантаЗначение = Истина
			И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
			Константы.ИспользоватьСерииНоменклатуры.Установить(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

// Устанавливается свойство ОтображениеПредупрежденияПриРедактировании элемента формы.
//
Процедура ОтображениеПредупрежденияПриРедактировании(Элемент, Отображать) Экспорт

	Возврат
	
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление

// Устанавливает условное оформление для поля "Характеристика".
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой нужно установить условное оформление,
//  ИмяПоляВводаХарактеристики - Строка - имя элемента формы "Характеристика",
//  ПутьКПолюОтбора - Строка - полный путь к реквизиту "Характеристики используются".
//
Процедура УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
	Форма,
	ИмяПоляВводаХарактеристики = "ТоварыХарактеристика",
	ПутьКПолюОтбора = "Объект.Товары.ХарактеристикиИспользуются") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
																
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаХарактеристики].Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

// Устанавливает условное оформление для поля "Единица измерения".
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой нужно установить условное оформление,
//  ИмяПоляВводаЕдиницИзмерения - Строка - имя элемента формы "Единица измерения",
//  ПутьКПолюОтбора - Строка - полный путь к реквизиту "Упаковка".
//
Процедура УстановитьУсловноеОформлениеЕдиницИзмерения(Форма,
	                                                  ИмяПоляВводаЕдиницИзмерения = "ТоварыНоменклатураЕдиницаИзмерения",
	                                                  ПутьКПолюОтбора = "Объект.Товары.Упаковка") Экспорт
	
	Возврат;
	
КонецПроцедуры

// Устанавливает условное оформление для поля "Серия".
//
// Параметры:
//	Форма - УправляемаяФорма - Форма, в которой нужно установить условное оформление,
//
Процедура УстановитьУсловноеОформлениеСерийНоменклатуры(Форма,
														ИмяПоляВводаСерии = "ТоварыСерия",
														ПутьКПолюОтбораСтатусУказанияСерий = "Объект.Товары.СтатусУказанияСерий",
														ПутьКПолюОтбораТипНоменклатуры = "Объект.Товары.ТипНоменклатуры") Экспорт
	
	Форма.Элементы[ИмяПоляВводаСерии].Видимость = Ложь;
	
КонецПроцедуры

// Устанавливает условное оформление для поля "Количество".
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой нужно установить условное оформление,
//  ИмяПоляВводаХарактеристики - Строка - имя элемента формы "Характеристика",
//  ПутьКПолюОтбора - Строка - полный путь к реквизиту "Характеристики используются".
//
Процедура УстановитьУсловноеОформлениеКоличество(
	Форма,
	ИмяПоляВводаХарактеристики = "ДанныеДокументаКоличество",
	ПутьКПолюОтбора = "Склад")
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаХарактеристики].Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не указан магазин>'"));
	
КонецПроцедуры

#КонецОбласти

#Область СвязиПараметровВыбора

// Устанавливает связь элемента формы с полем ввода номенклатуры.
//
// Параметры:
//	Форма					- УправляемаяФорма	- Форма, в которой нужно установить связь.
//	ИмяПоляВвода			- Строка			- Имя поля, связываемого с номенклатурой.
//	ПутьКДаннымНоменклатуры	- Строка			- Путь к данным текущей номенклатуры в форме.
//
Процедура УстановитьСвязиПараметровВыбораСНоменклатурой(Форма, ИмяПоляВвода,
	ПутьКДаннымНоменклатуры = "Элементы.Товары.ТекущиеДанные.Номенклатура") Экспорт
	
	СвязиПараметровВыбора = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора);
	СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Номенклатура", ПутьКДаннымНоменклатуры));
	
	Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	
КонецПроцедуры

// Устанавливает связь элемента формы с полем ввода характеристики номенклатуры.
//
// Параметры:
//	Форма						- УправляемаяФорма	- Форма, в которой нужно установить связь.
//	ИмяПоляВвода				- Строка			- Имя поля, связываемого с номенклатурой.
//	ПутьКДаннымХарактеристики	- Строка			- Путь к данным текущей характеристики номенклатуры в форме.
//
Процедура УстановитьСвязиПараметровВыбораСХарактеристикой(Форма, ИмяПоляВвода,
	ПутьКДаннымХарактеристики = "Элементы.Товары.ТекущиеДанные.Характеристика") Экспорт
	
	СвязиПараметровВыбора = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора);
	СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Характеристика", ПутьКДаннымХарактеристики));
	
	Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиИзмененияОпределяемыхТипов

// Выполняет действия при изменении номенклатуры в объекте (форме, строке табличной части итп).
//
// Параметры:
//  Форма                  - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока          - Произвольный - контекст редактирования (текущая строка таблицы, шапка объекта, форма)
//  КэшированныеЗначения   - Неопределено, Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыУказанияСерий - Произвольный - параметры указания серий формы
Процедура ПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Объект = Форма;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Характеристика") Тогда
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",
			ТекущаяСтрока.Характеристика);
			
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Номенклатура", "Номенклатура");
		СтруктураПараметров.Вставить("ХарактеристикиИспользуются", "ХарактеристикиИспользуются");
		
		СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметров);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СтавкаНДС") Тогда
		ПараметрыЗаполненияНДС = Новый Структура;
		ПараметрыЗаполненияНДС.Вставить("Дата");
		ПараметрыЗаполненияНДС.Вставить("Организация");
		ПараметрыЗаполненияНДС.Вставить("УчитыватьНДС", Истина);
		ЗаполнитьЗначенияСвойств(ПараметрыЗаполненияНДС, Объект);
		
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Склад") Тогда
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", ПараметрыЗаполненияНДС);
		Иначе
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ПараметрыЗаполненияНДС);
		КОнецЕсли;
	КонецЕсли;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СуммаНДС")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СтавкаНДС") Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СуммаСНДС") Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Сумма") Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Упаковка") Тогда
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КодТНВЭД") Тогда
		СтруктураДействий.Вставить("ЗаполнитьКодТНВЭД");
	КонецЕсли;
	
	СлужебныеРеквизиты = Новый Структура;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ТребуетВзвешивания") Тогда
		СлужебныеРеквизиты.Вставить("ТребуетВзвешивания");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ПроизвольнаяЕдиницаУчета") Тогда
		СлужебныеРеквизиты.Вставить("ПроизвольнаяЕдиницаУчета");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СкоропортящаясяПродукция") Тогда
		СлужебныеРеквизиты.Вставить("СкоропортящаясяПродукция");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ЕдиницаИзмерения") Тогда
		СлужебныеРеквизиты.Вставить("ЕдиницаИзмерения");
	КонецЕсли;
	
	Если СлужебныеРеквизиты.Количество() Тогда
		СтруктураДействий.Вставить("ЗаполнитьСлужебныеРеквизиты", СлужебныеРеквизиты);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры


#КонецОбласти

#Область Прочее

// Устанавливает у элемента формы Упаковка подсказку ввода для соответствующей номенклатуры
//
// Параметры:
// 	Форма - УправляемаяФорма - Форма объекта.
//
Процедура УстановитьИнформациюОЕдиницеХранения(Форма) Экспорт
	
	Форма.Элементы.Упаковка.ПодсказкаВвода = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.Объект.Номенклатура, "ЕдиницаИзмерения");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииРТ

// Вызывается при создании на сервере формы выбора справочника Справки2ЕГАИС.
//
Процедура ПриСозданииНаСервереФормаВыбораСправки2ЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Если Форма.Параметры.Свойство("Номенклатура")
		И Форма.Параметры.Свойство("Характеристика") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствиеЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция
		|ИЗ
		|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеЕГАИС
		|ГДЕ
		|	СоответствиеЕГАИС.Номенклатура = &Номенклатура
		|	И СоответствиеЕГАИС.Характеристика = &Характеристика";
		
		Запрос.УстановитьПараметр("Номенклатура", Форма.Параметры.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", Форма.Параметры.Характеристика);
		
		МассивПродукции = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("АлкогольнаяПродукция");
		
		Если МассивПродукции.Количество() > 0 Тогда
			ОбщегоНазначенияРТКлиентСервер.ИзменитьЭлементОтбораСписка(
				Форма.Список,
				"АлкогольнаяПродукция",
				МассивПродукции,
				Истина,
				ВидСравненияКомпоновкиДанных.ВСписке,
				РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
				
			СтрокаОтбораПоНоменклатуре = НСтр("ru = 'Соответствующие номенклатуре: %1'");
			Если ЗначениеЗаполнено(Форма.Параметры.Характеристика) Тогда
				ПредставлениеНоменклатуры = Строка(Форма.Параметры.Номенклатура) + " / " + Строка(Форма.Параметры.Характеристика);
			Иначе
				ПредставлениеНоменклатуры = Строка(Форма.Параметры.Номенклатура);
			КонецЕсли;
			
			Форма.ИнформацияОбОтборе = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОтбораПоНоменклатуре, ПредставлениеНоменклатуры);
			Форма.Элементы.ИнформацияОбОтборе.Видимость = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при создании на сервере форм справочника ШтрихкодыУпаковокТоваров.
//
Процедура ПриСозданииНаСервереФормСправочникаШтрихкодыУпаковокТоваров(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.Серия.Видимость = Ложь;
	
КонецПроцедуры

// Вызывается при создании на сервере формы списка документов ЧекЕГАИС.
//
Процедура ПриСозданииНаСервереФормаСпискаДокументовЧекЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Если Форма.Параметры.Отбор.Свойство("ВидОперации") И Форма.Параметры.Отбор.ВидОперации = Перечисления.ВидыОперацийЧекаЕГАИС.ВскрытиеТары Тогда
		Форма.АвтоЗаголовок = Ложь;
		Форма.Заголовок = НСтр("ru='Вскрытия тары ЕГАИС'");
		
		Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.СтраницаОформлено;
		Форма.Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при создании на сервере формы списка документов АктПостановкиНаБалансЕГАИС.
//
Процедура ПриСозданииНаСервереФормаДокументаАктПостановкиНаБалансЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.ТоварыСерия.Видимость = Ложь;
	Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.ОприходованиеТоваров) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ПодменюСоздатьНаОснованииОбычное_СоздатьНаОснованииОприходованиеТоваров",
			"Видимость",
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при создании на сервере формы списка документов АктПостановкиНаБалансЕГАИС.
//
Процедура ПриСозданииНаСервереФормаСпискаАктПостановкиНаБалансЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.ОприходованиеТоваров) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ПодменюСоздатьНаОснованииОбычное_СоздатьНаОснованииОприходованиеТоваров",
			"Видимость",
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при создании на сервере формы списка документов АктСписанияЕГАИС.
//
Процедура ПриСозданииНаСервереФормаДокументаАктСписанияЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.ТоварыСерия.Видимость = Ложь;
	
КонецПроцедуры

// Вызывается при создании на сервере формы списка документов ВозвратИзРегистра2ЕГАИС.
//
Процедура ПриСозданииНаСервереФормаДокументаВозвратИзРегистра2ЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.ТоварыСерия.Видимость = Ложь;
	
КонецПроцедуры

// Вызывается при создании на сервере формы списка документов ПередачаВРегистр2ЕГАИС.
//
Процедура ПриСозданииНаСервереФормаДокументаПередачаВРегистр2ЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.ТоварыСерия.Видимость = Ложь;
	
КонецПроцедуры

// Вызывается при создании на сервере формы документа ЧекЕГАИС.
//
Процедура ПриСозданииНаСервереФормаДокументаЧекЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.ВидОперации.ТолькоПросмотр = Истина;
	
	Если Форма.Объект.ВидОперации = Перечисления.ВидыОперацийЧекаЕГАИС.ВскрытиеТары Тогда
		ИнтеграцияЕГАИСРТКлиентСервер.УстановитьЗаголовокВскрытиеТары(Форма);
	КонецЕсли;
	
	Если Форма.Объект.ВидОперации = Перечисления.ВидыОперацийЧекаЕГАИС.ВскрытиеТары
		ИЛИ Форма.Объект.ВидОперации = Перечисления.ВидыОперацийЧекаЕГАИС.РеализацияЮридическомуЛицуСБезналичнойОплатой Тогда
		Форма.Элементы.НомерЧекаККМ.Видимость = Ложь;
	КонецЕсли;
	
	Форма.Элементы.ТоварыСерия.Видимость = Ложь;
	
	Попытка
		Для каждого СтрокаТаблицы Из Форма.Объект.Товары Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.АлкогольнаяПродукция) И 
				СтрокаТаблицы.НоменклатураДляВыбора.Количество() = 1 Тогда
				СтрокаТаблицы.АлкогольнаяПродукция = СтрокаТаблицы.НоменклатураДляВыбора[0].Значение;
			КонецЕсли;
		КонецЦикла;
	Исключение
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Вызывается при создании на сервере формы документа ЧекЕГАИСВозврат.
//
Процедура ПриСозданииНаСервереФормаДокументаЧекЕГАИСВозврат(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.ВидОперации.ТолькоПросмотр = Истина;
	
	Если Форма.Объект.ВидОперации = Перечисления.ВидыОперацийЧекаЕГАИСВозврат.ВозвратОтЮридическогоЛицаСБезналичнойОплатой Тогда
		Форма.Элементы.НомерЧекаККМ.Видимость = Ложь;
	КонецЕсли;
	
	Форма.Элементы.ТоварыСерия.Видимость = Ложь;
	
КонецПроцедуры

// Вызывается при создании на сервере формы обработки СопоставлениеКлассификаторовЕГАИС.
//
Процедура ПриСозданииНаСервереФормаОбработкиСопоставлениеКлассификаторовЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.ТоварыСерия.Видимость = Ложь;
	
КонецПроцедуры

// Вызывается при создании на сервере формы обработки ПроверкаИПодборАлкогольнойПродукцииЕГАИС.
//
Процедура ПриСозданииНаСервереФормаОбработкиПроверкаИПодборАлкогольнойПродукцииЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.АлкогольнаяПродукцияКОпределениюСправок2Серия.Видимость = Ложь;
	СобытияФормИСМП.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

// Вызывается при создании на сервере формы документа ТТНВходящаяЕГАИС.
//
Процедура ПриСозданииНаСервереФормаДокументаТТНВходящаяЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.ТоварыСерия.Видимость = Ложь;
	Форма.Элементы.ТоварыГруппаДополнительныеКоманды.Видимость = Ложь;
	
КонецПроцедуры

// Вызывается при создании на сервере формы документа ТТНИсходящаяЕГАИС.
//
Процедура ПриСозданииНаСервереФормаДокументаТТНИсходящаяЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.ТоварыСерия.Видимость = Ложь;
	Форма.Элементы.ТоварыГруппаДополнительныеКоманды.Видимость = Ложь;
	
КонецПроцедуры

// Вызывается при создании на сервере формы записи регистра сведений СоответствиеНоменклатурыЕГАИС.
//
Процедура ПриСозданииНаСервереФормаЗаписиРегистрСведенийСоответствиеНоменклатурыЕГАИС(Форма, Отказ, СтандартнаяОбработка);
	
	Форма.Элементы.Серия.Видимость = Ложь;
	
КонецПроцедуры

// Вызывается при создании на сервере формы списка регистра сведений СоответствиеНоменклатурыЕГАИС.
//
Процедура ПриСозданииНаСервереФормаСпискаРегистрСведенийСоответствиеНоменклатурыЕГАИС(Форма, Отказ, СтандартнаяОбработка);
	
	Форма.Элементы.Серия.Видимость = Ложь;
	
КонецПроцедуры

Процедура ДобавитьИзменитьКодМаркировкиКегаНаОборудованииРозлива(Форма, Элемент, ДополнительныеПараметры)
	
	ТаблицаТовары = Форма.Объект.Товары.Выгрузить();
	ТаблицаТовары.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Форма);
	Результат = ШтрихкодированиеИС.ДобавитьИзменитьКодМаркировкиВскрытойПотребительскойУпаковки(
		ПараметрыСканирования,
		ТаблицаТовары,
		Форма.Объект[ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок]);
	
	Если Результат.ЕстьИзменения Тогда
		
		ПараметрыПоиска = Новый Структура(ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки);
		Для Каждого ШтрихкодУпаковки Из Результат.УдалитьКодыМакрировки Цикл
			ПараметрыПоиска[ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки] = ШтрихкодУпаковки;
			ШтрихкодыУпаковок = Форма.Объект[ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок].НайтиСтроки(ПараметрыПоиска);
			Для Каждого СтрокаКУдалению Из ШтрихкодыУпаковок Цикл
				Форма.Объект[ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок].Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого КлючИЗначение Из Результат.КодыМаркировки Цикл
			
			СтрокаТовары   = КлючИЗначение.Ключ;
			ДанныеУпаковки = КлючИЗначение.Значение;
			
			Для Каждого СтрокаДанныхУпаковки Из ДанныеУпаковки Цикл
				ПараметрыПоиска[ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки] = СтрокаДанныхУпаковки.ШтрихкодУпаковки;
				ШтрихкодыУпаковок = Форма.Объект[ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок].НайтиСтроки(ПараметрыПоиска);
				Если ШтрихкодыУпаковок.Количество() = 0 Тогда
					ШтрихкодУпаковки = Форма.Объект[ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок].Добавить();
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ШтрихкодУпаковки, "КлючСвязи") Тогда
						ШтрихкодУпаковки.КлючСвязи = СтрокаТовары.КлючСвязи;
					КонецЕсли;
				Иначе
					ШтрихкодУпаковки = ШтрихкодыУпаковок[0];
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ШтрихкодУпаковки, СтрокаДанныхУпаковки);
				ШтрихкодУпаковки[ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки] = СтрокаДанныхУпаковки.ШтрихкодУпаковки;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
