#Область ПрограммныйИнтерфейс

// Обработчик команды формы, требующей контекстного вызова сервера.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, из которой выполняется команда.
//   ПараметрыВызова - Структура - параметры вызова.
//   Источник - ТаблицаФормы, ДанныеФормыСтруктура - объект или список формы с полем "Ссылка".
//   Результат - Структура - результат выполнения команды.
//
Процедура ВыполнитьПереопределяемуюКоманду(Знач Форма, Знач ПараметрыВызова, Знач Источник, Результат) Экспорт
	
	Если ПараметрыВызова.Свойство("ОтправитьРаспоряжениеНаПриемкуКладовщику") Тогда
		ИнтеграцияИСРТ.ОтправитьРаспоряжениеНаПриемкуКладовщику(Форма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияФорм

// Серверная переопределяемая процедура, вызываемая при заполнении реквизитов формы созданных ИСМП (при открытии)
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, из которой происходит вызов процедуры.
//
Процедура ЗаполнениеРеквизитовФормы(Форма) Экспорт
	
	Если СтрНачинаетсяС(Форма.ИмяФормы,"Документ.ЧекККМ.")
		Или СтрНачинаетсяС(Форма.ИмяФормы,"Справочник.ХранилищеШаблонов.")
		Или СтрНачинаетсяС(Форма.ИмяФормы,"Документ.ПеремещениеТоваров.") И НЕ (Форма.ОперацияОтражаетсяВИСМП ИЛИ Форма.ОперацияОтражаетсяВЕГАИС) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыИнтеграции = Неопределено;
	Для Каждого ВидПродукции Из ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина) Цикл
		ПараметрыИнтеграции = Форма.ПараметрыИнтеграцииГосИС.Получить(ВидПродукции);
		Если ПараметрыИнтеграции <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыИнтеграции = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ПараметрыИнтеграции) = Тип("Массив") Тогда
		ПараметрыИнтеграции = ПараметрыИнтеграции[0];
	КонецЕсли;
	
	Если ПараметрыИнтеграции.ИспользоватьКолонкуСтатусаПроверкиПодбора Тогда
		
		Объект = ПараметрыИнтеграции.ИмяРеквизитаФормыОбъект;
		Товары = ПараметрыИнтеграции.ИмяТабличнойЧастиТовары;
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьМаркируемаяПродукцияГосИС(Форма[Объект][Товары], Новый Структура("ИмяФормы", Форма.ИмяФормы));
		
		Для Каждого СтрокаТаблицы Из Форма[Объект][Товары] Цикл
			Если СтрокаТаблицы.МаркируемаяПродукция И СтрокаТаблицы.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
				СтрокаТаблицы.МаркируемаяПродукция = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Если ПараметрыИнтеграции.ДоступныОбъемноСортовыеКоды Тогда
			ПроверкаИПодборПродукцииИСМП.ЗаполнитьПризнакАвтоматическийОСУИСВТаблице(Форма[Объект][Товары]);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Переопределение параметров интеграции ИСМП (расположения команды проверки и подбора)
//
// Параметры:
//   Форма                - ФормаКлиентскогоПриложения - прикладная форма для встраивания форматированной строки
//   СтандартнаяОбработка - Булево - стандартная работа с элементами проверки подбора
//   ПараметрыИнтеграции  - Соответствие - автоматически заданные параметры интеграции
//
Процедура ПриОпределенииПараметровИнтеграции(Форма, СтандартнаяОбработка, ПараметрыИнтеграции) Экспорт
	
	Возврат;
	
КонецПроцедуры

//Переопределение параметров интеграции ИСМП (расположения форматированной строки перехода к связанному объекту)
//
//Параметры:
//   Форма            - ФормаКлиентскогоПриложения - прикладная форма для встраивания форматированной строки
//   ПараметрыНадписи - Структура        - (см. СобытияФормИСМП.ПараметрыИнтеграцииГиперссылкиИСМП)
//
Процедура ПриОпределенииПараметровИнтеграцииГиперссылкиИСМП(Форма, ПараметрыНадписи) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
		И ТипЗнч(Форма.Объект) = Тип("ДанныеФормыСтруктура")
		И ИнтеграцияИСМП.ИспользуетсяИнтеграцияВФормеДокументаОснования(Форма, Форма.Объект) Тогда
		
		ПараметрыНадписи.Вставить("ИмяЭлементаФормы",  "ТекстДокументаИСМП");
		ПараметрыНадписи.Вставить("ИмяРеквизитаФормы", "ТекстДокументаИСМП");
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "ГруппаСостояние") Тогда
		ПараметрыНадписи.РазмещениеВ = "ГруппаСостояние";
	КонецЕсли;
	
КонецПроцедуры

// Переопределение доступности интеграции формы сверки для прикладной формы (расположения форматированной строки перехода к связанному объекту)
//
// Параметры:
//   Форма            - ФормаКлиентскогоПриложения - прикладная форма для встраивания форматированной строки
//   СтандартнаяОбработка - Булево - установить ложь, если требуется отменить выполнение стандартной обработки.
//
Процедура ПриОпределенииДоступностиИнтеграцииФормыСверкиКодовМаркировки(Форма, СтандартнаяОбработка) Экспорт
	
	Возврат;
	//-
КонецПроцедуры

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если Форма.ИмяФормы = "Обработка.РМКУправляемыйРежим.Форма.Форма"
		Или Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента" Тогда
		
		ИнтеграцияИСРТ.МодифицироватьИнициализироватьФормуРМК(Форма);
	ИначеЕсли Форма.ИмяФормы = "Документ.ВозвратТоваровОтПокупателя.Форма.ФормаДокумента"
		ИЛИ Форма.ИмяФормы = "Документ.ВозвратТоваровПоставщику.Форма.ФормаДокумента" Тогда
		
		ИнтеграцияИСРТ.МодифицироватьИнициализироватьФормуПрикладногоДокумента(Форма);
		
	ИначеЕсли Форма.ИмяФормы = "ОбщаяФорма.ФормаНастройкиНоменклатурыИС" Тогда
		
		// устанавливаем связи параметров выбора для поля "Упаковка"
		Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Номенклатура");
		
		МассивСвязи = Новый Массив();
		МассивСвязи.Добавить(Связь);
		
		ФиксМассивСвязи = Новый ФиксированныйМассив(МассивСвязи);
		Форма.Элементы.ПотребительскаяУпаковка.СвязиПараметровВыбора = ФиксМассивСвязи;
		
		// отключаем свойство "ВыбиратьТип"
		Форма.Элементы.ПотребительскаяУпаковка.ВыбиратьТип = Ложь;
		Форма.Элементы.ПотребительскаяУпаковка.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры");
		
	ИначеЕсли Форма.ИмяФормы = "Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ПроверкаИПодбор"
		Или Форма.ИмяФормы = "Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ПроверкаИПодбор"
		Или Форма.ИмяФормы = "Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ПроверкаИПодбор" Тогда
		
		ПроверяемыйДокумент = Форма.ПроверяемыйДокумент;
		
		Если ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.ПоступлениеТоваров")
			Или ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
			Если УправлениеМобильнымиПриложениями.ИспользоватьОбменСМобильнымиПриложениями() Тогда
				ИмяПланаОбмена = УправлениеМобильнымиПриложениямиКлиентСервер.ИмяПланаОбмена();
				МобильноеПриложение = Справочники.МобильныеПриложения.НайтиПоРеквизиту("ВариантНастройки", "Кладовщик");
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("МобильноеПриложение", МобильноеПриложение);
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				|	ОбменСМобильнымиПриложениями.Ссылка КАК Ссылка
				|ИЗ
				|	ПланОбмена." + ИмяПланаОбмена + " КАК ОбменСМобильнымиПриложениями
				|ГДЕ
				|	ОбменСМобильнымиПриложениями.МобильноеПриложение = &МобильноеПриложение
				|	И НЕ ОбменСМобильнымиПриложениями.ЭтотУзел
				|	И НЕ ОбменСМобильнымиПриложениями.ПометкаУдаления";
				
				Результат = Запрос.Выполнить();
				Если Не Результат.Пустой() Тогда
					ИмяКоманды = "ОтправитьРаспоряжениеНаПриемкуКладовщику";
					НоваяКоманда = Форма.Команды.Добавить(ИмяКоманды);
					НоваяКоманда.Действие = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
					НоваяКоманда.Заголовок = НСтр("ru = 'Отправить в 1С:Кладовщик'");
					
					НоваяКнопка = Форма.Элементы.Добавить("ИмяКоманды",
					Тип("КнопкаФормы"), Форма.Элементы.ГруппаМаркированнаяКоманднаяПанель);
					НоваяКнопка.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
					НоваяКнопка.ИмяКоманды = ИмяКоманды;
					
					ДанныеПроверкиИПодбора = Неопределено;
					Если ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
						ДанныеПроверкиИПодбора = ПроверяемыйДокумент.ДанныеПроверкиИПодбора.Получить();
					Иначе
						НаборЗаписей = РегистрыСведений.СтатусыПроверкиИПодбораДокументовИС.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.Документ.Установить(ПроверяемыйДокумент);
						НаборЗаписей.Прочитать();
						Для Каждого Запись Из НаборЗаписей Цикл
							ДанныеПроверкиИПодбора = Запись.ДанныеПроверкиИПодбора.Получить();
						КонецЦикла;
					КонецЕсли;
					
					КомандаДоступна = Истина;
					Если ДанныеПроверкиИПодбора <> Неопределено Тогда
						Для Каждого СтрокаДерева Из ДанныеПроверкиИПодбора.ДеревоМаркированнойПродукции.Строки Цикл
							Если НЕ ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
								Если СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отложена Тогда
									КомандаДоступна = Ложь;
									Прервать;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Если Не КомандаДоступна Тогда
						НоваяКоманда.Заголовок = НСтр("ru = 'Отправлено в 1С:Кладовщик'");
						КоллекцияЭлементов = Форма.Элементы.ГруппаМаркированнаяКоманднаяПанель.ПодчиненныеЭлементы;
						Для Каждого ЭлементФормы из КоллекцияЭлементов Цикл
							ЭлементФормы.Доступность = Ложь;
						КонецЦикла;
						Если Форма.Элементы.Найти("ПодобраннаяМаркируемаяПродукцияКоманднаяПанель") <> Неопределено Тогда
							КоллекцияЭлементов = Форма.Элементы.ПодобраннаяМаркируемаяПродукцияКоманднаяПанель.ПодчиненныеЭлементы;
							Для Каждого ЭлементФормы из КоллекцияЭлементов Цикл
								ЭлементФормы.Доступность = Ложь;
							КонецЦикла;
						КонецЕсли;
						КоллекцияЭлементов = Форма.КоманднаяПанель.ПодчиненныеЭлементы;
						Для Каждого ЭлементФормы из КоллекцияЭлементов Цикл
							Если ЭлементФормы.Имя = "ДеревоМаркированнойПродукцииНачатьПроверкуЗаново"
								Или ЭлементФормы.Имя = "ФормаСохранитьПромежуточныеРезультатыПроверки" Тогда
								Продолжить;
							КонецЕсли;
							ЭлементФормы.Доступность = Ложь;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма         - ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
//  ТекущийОбъект - ДокументОбъект - объект, который будет прочитан.
//
Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Если Форма.ИмяФормы = "Документ.ПеремещениеТоваров.Форма.ФормаДокумента" Тогда
		ИнтеграцияИСРТ.МодифицироватьИнициализироватьФормуРМК(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФорм

// Серверная переопределяемая процедура, вызываемая из обработчика события элемента.
//
// Параметры:
//   Форма                   - ФормаКлиентскогоПриложения - форма, из которой происходит вызов процедуры.
//   Элемент                 - Строка           - имя элемента-источника события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	Если Форма.ИмяФормы = "Документ.ВозвратТоваровПоставщику.Форма.ФормаДокумента"
		ИЛИ Форма.ИмяФормы = "Документ.ВозвратТоваровОтПокупателя.Форма.ФормаДокумента"
		ИЛИ Форма.ИмяФормы = "Документ.ПеремещениеТоваров.Форма.ФормаДокумента" Тогда
		
		ПроверкаИПодборПродукцииИСМП.ПрименитьКешШтрихкодовУпаковок(Форма, Истина);
		ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(Форма);
		
	ИначеЕсли Форма.ИмяФормы = "Обработка.РМКУправляемыйРежим.Форма.Форма"
		Или Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента" Тогда
		
		Если Элемент = "Событие" И СтрНачинаетсяС(ДополнительныеПараметры.ИмяСобытия,"ЗакрытиеФормыПроверкиИПодбораГосИС") Тогда
			
			ПроверкаИПодборПродукцииИСМПРТ.ПриЗакрытииФормыПроверкиИПодбораРМК(
				Форма,
				ДополнительныеПараметры.Параметр,
				Перечисления.ВидыПродукцииИС.Получить(Число(СтрЗаменить(ДополнительныеПараметры.ИмяСобытия, "ЗакрытиеФормыПроверкиИПодбораГосИС", ""))));
			
		КонецЕсли;
			
	ИначеЕсли Форма.ИмяФормы = "ОбщаяФорма.ВскрытиеПотребительскойУпаковкиИС" Тогда
		
		Если ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Имя = "Склад"
			Или ТипЗнч(Элемент) = Тип("Строка") И Элемент = "Склад" Тогда
			
			Если ЗначениеЗаполнено(Форма.Склад) Тогда
				Магазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.Склад, "Магазин");
				
				КонтактнаяИнформацияОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
					Магазин, Справочники.ВидыКонтактнойИнформации.ФактАдресМагазина, ТекущаяДатаСеанса(), Ложь);
				
				Если ТипЗнч(КонтактнаяИнформацияОбъекта) = Тип("ТаблицаЗначений") И КонтактнаяИнформацияОбъекта.Количество() > 0 Тогда
					Форма.АдресПодключения = КонтактнаяИнформацияОбъекта[0].Значение;
					Форма.АдресПодключенияСтрокой = КонтактнаяИнформацияОбъекта[0].Представление;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыВыбора

// Устанавливает параметры выбора шаблона этикетки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой нужно установить параметры выбора,
//  ИмяПоляВвода - Строка - имя поля ввода шаблона этикетки.
Процедура УстановитьПараметрыВыбораШаблонаЭтикетки(Форма,  ИмяПоляВвода) Экспорт
	
	ПараметрыВыбора = ОбщегоНазначения.СкопироватьРекурсивно(Форма.Элементы[ИмяПоляВвода].ПараметрыВыбора, Ложь);
	
	ТипШаблона = ПредопределенноеЗначение("Перечисление.ТипыШаблонов.ЭтикеткаКодМаркировкиИСМП");
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипШаблона", ТипШаблона));
	
	Форма.Элементы[ИмяПоляВвода].ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	Форма.Элементы[ИмяПоляВвода].КнопкаСоздания = Истина;
	
КонецПроцедуры

// Устанавливает параметры выбора контрагента.
//
//Параметры:
//   Форма                   - ФормаКлиентскогоПриложения - форма, в которой нужно установить параметры выбора.
//   ТолькоЮрЛицаНерезиденты - Неопределено, Булево - Признак нерезидента.
//   ИмяПоляВвода            - Строка               - имя поля ввода номенклатуры.
//
Процедура УстановитьПараметрыВыбораКонтрагента(Форма, ТолькоЮрЛицаНерезиденты = Неопределено, ИмяПоляВвода = "Контрагент") Экспорт
	
	ПараметрыВыбора = Новый Массив();
	Для Каждого ПараметрВыбора Из Форма.Элементы[ИмяПоляВвода].ПараметрыВыбора Цикл
		Если ПараметрВыбора.Имя <> "Отбор.ЮрФизЛицо" Тогда
			ПараметрыВыбора.Добавить(ОбщегоНазначения.СкопироватьРекурсивно(ПараметрВыбора, Ложь));
		КонецЕсли;
	КонецЦикла;
	
	Если ТолькоЮрЛицаНерезиденты = Истина Тогда
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ЮрФизЛицо", Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент));
	ИначеЕсли ТолькоЮрЛицаНерезиденты = Ложь Тогда
		МассивДанных = Новый Массив();
		Для Каждого ЗначениеПеречисления Из Метаданные.Перечисления.ЮрФизЛицо.ЗначенияПеречисления Цикл
			Если ЗначениеПеречисления <> Метаданные.Перечисления.ЮрФизЛицо.ЗначенияПеречисления.Найти("ЮрЛицоНеРезидент") Тогда
				МассивДанных.Добавить(Перечисления.ЮрФизЛицо[ЗначениеПеречисления.Имя]);
			КонецЕсли;
		КонецЦикла;
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ЮрФизЛицо", ОбщегоНазначения.СкопироватьРекурсивно(МассивДанных)));
	КонецЕсли;
	
	Форма.Элементы[ИмяПоляВвода].ПараметрыВыбора = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыВыбора, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выполняет действия при изменении номенклатуры в строке табличной части.
//
// Параметры:
//  Форма                  - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока          - ДанныеФормыЭлементКоллекции - редактируемая строка таблицы,
//  КэшированныеЗначения   - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыУказанияСерий - Структура - (См. ПроверкаИПодборПродукцииМОТП.ПараметрыУказанияСерий).
Процедура ПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий = Неопределено) Экспорт
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",
	ТекущаяСтрока.Характеристика);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Номенклатура", "Номенклатура");
	СтруктураПараметров.Вставить("ХарактеристикиИспользуются", "ХарактеристикиИспользуются");
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметров);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ТипНоменклатуры") Тогда
		СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Упаковка") Тогда
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КодТНВЭД") Тогда
		СтруктураДействий.Вставить("ЗаполнитьКодТНВЭД");
	КонецЕсли;
	
	СлужебныеРеквизиты = Новый Структура;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ТребуетВзвешивания") Тогда
		СлужебныеРеквизиты.Вставить("ТребуетВзвешивания");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ПроизвольнаяЕдиницаУчета") Тогда
		СлужебныеРеквизиты.Вставить("ПроизвольнаяЕдиницаУчета");
	КонецЕсли;
	
	Если СлужебныеРеквизиты.Количество() Тогда
		СтруктураДействий.Вставить("ЗаполнитьСлужебныеРеквизиты", СлужебныеРеквизиты);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

// Выполняет действия при изменении подобранного количества (поле КоличествоУпаковок) в строке таблицы формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыУказанияСерий - ФиксированнаяСтруктура - параметры указаний серий формы
Процедура ПриИзмененииКоличества(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий = Неопределено) Экспорт
	
	СтруктураДействий = Новый Структура;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Упаковка") Тогда
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

// Выполняет действия при изменении подобранного количества (поле Количество) в строке таблицы формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыУказанияСерий - ФиксированнаяСтруктура - параметры указаний серий формы
Процедура ПриИзмененииКоличестваЕдиниц(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий = Неопределено) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Заполняет табличную часть Товары подобранными товарами.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой производится подбор,
//  ВыбранноеЗначение - Произвольный - данные, содержащие подобранную пользователем номенклатуру,
//  ПараметрыЗаполнения - Структура - дополнительные параметры заполнения
//  ПараметрыЗаполнения - Структура - параметры заполнения,
//  КэшированныеЗначения - Неопределено, Структура - сохраненные значения параметров, используемых при обработке,
//  ДобавленныеСтроки - Неопределено, Массив из ДанныеФормыЭлементКоллекции - массив добавленных строк таблицы товаров
Процедура ОбработкаРезультатаПодбораНоменклатуры(
	Форма, ВыбранноеЗначение, ПараметрыЗаполнения,
	КэшированныеЗначения = Неопределено, ДобавленныеСтроки = Неопределено) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
	
	ТекущаяСтрока = Неопределено;
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Форма.Объект.Товары.Добавить();
		
		СписокСвойств = "Номенклатура, Характеристика";
		
		Если ТекущаяСтрока.Свойство("Упаковка") Тогда
			СписокСвойств = СписокСвойств + ", Упаковка";
		КонецЕсли;
		
		Если ТекущаяСтрока.Свойство("КоличествоУпаковок") Тогда
			СписокСвойств = СписокСвойств + ", КоличествоУпаковок";
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, СписокСвойств);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		
		Если ТекущаяСтрока.Свойство("Упаковка") Тогда
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		КонецЕсли;

		Если ТекущаяСтрока.Свойство("Количество") Тогда
			Если ПараметрыЗаполнения.Свойство("ПересчитатьКоличествоЕдиниц")
				И ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц Тогда
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыЗаполнения.Свойство("ЗаполнитьИндексАкцизнойМарки")
			И ПараметрыЗаполнения.ЗаполнитьИндексАкцизнойМарки Тогда
			СтруктураДействий.Вставить("ЗаполнитьИндексАкцизнойМарки");
		КонецЕсли;
		
		Если ПараметрыЗаполнения.Свойство("ПересчитатьСумму")
			И ПараметрыЗаполнения.ПересчитатьСумму Тогда
			СтруктураДействий.Вставить("ПересчитатьСумму");
		КонецЕсли;
		
		СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый",
		Новый Структура("ИмяФормы, ИмяТабличнойЧасти", Форма.ИмяФормы, "Товары"));
		
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		Форма.Элементы.Товары.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
