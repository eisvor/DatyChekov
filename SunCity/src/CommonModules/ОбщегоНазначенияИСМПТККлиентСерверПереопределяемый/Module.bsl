
#Область СлужебныеПроцедурыИФункции

Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	СтрокаПодстановки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаПодстановки,
	Параметр1, Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);	
	
	Возврат СтрокаПодстановки;
	
КонецФункции

Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияПользователю,
														КлючДанных,
														Поле,
														ПутьКДанным,
														Отказ);	
КонецПроцедуры

// Определяет принадлежность имени объекта к контексту.
//
// Параметры:
//  Контекст - УправляемаяФорма, ДокументСсылка, СправчникСсылка, Обработка - контекст.
//  ИмяОбъекта - Строка - Имя объекта.
// Возвращаемое значение:
//  Булево - Истина, если имя объекта принадлежит контексту.
Функция ЭтоКонтекстОбъекта(Контекст, Знач ИмяОбъекта) Экспорт
	
	ЭтоСсылка   = Ложь;
	ЭтоФорма    = Ложь;
	Разделитель = ".";
	
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		
		ЭтоФорма       = Истина;
		МассивПодстрок = РазложитьСтрокуВМассивПодстрок(Контекст.ИмяФормы, Разделитель);
		ИмяФормы       = МассивПодстрок[0] + Разделитель + МассивПодстрок[1];
		
	Иначе
		
		ЭтоСсылка      = Истина;
		МассивПодстрок = РазложитьСтрокуВМассивПодстрок(ИмяОбъекта, Разделитель);
		
		Если МассивПодстрок[0] <> "Документ" Тогда
			Возврат Ложь;
		КонецЕсли;
		
		МассивПодстрок[0] = МассивПодстрок[0] + "Ссылка";
		ИмяОбъекта = СтрСоединить(МассивПодстрок, Разделитель);
		
	КонецЕсли;
	
	Возврат ЭтоФорма И ИмяФормы = ИмяОбъекта Или ЭтоСсылка И ТипЗнч(Контекст) = Тип(ИмяОбъекта);

КонецФункции

// Возвращает текущего пользователя ИБ.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - Текущий пользователь ИБ.
//
Функция ТекущийПользователь() Экспорт
	
	Возврат ПользователиКлиентСервер.ТекущийПользователь();
	
КонецФункции

Функция ИспользуютсяСтруктурныеПодразделения() Экспорт
	
	Возврат Ложь;
	
КонецФункции

Функция ИспользоватьФоновуюОтправкуДокументовИСЦЭДМ() Экспорт
	
	Возврат Ложь;
	
КонецФункции

Функция ИмяПропуститьПроверкуЗапретаИзменения() Экспорт
	
	Возврат "ПропуститьПроверкуЗапретаИзменения";
	
КонецФункции

Функция ИспользоватьФоновуюОтправкуДокументовИСМПТ() Экспорт
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьЗначениеВидимостиГруппыИСМПТК(ИмяДокумента) Экспорт
	
	Если ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаЗаказКодовМаркировкиСУЗИСМПТК() Тогда 
		Возврат Истина;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Значение, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Значение, Разделитель, ПропускатьПустыеСтроки, СокращатьНепечатаемыеСимволы);
	
КонецФункции 

Функция КодОсновногоЯзыка() Экспорт

	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Возврат ОбщегоНазначения.КодОсновногоЯзыка();
	#Иначе
		Возврат СтандартныеПодсистемыКлиент.ПараметрКлиента("КодОсновногоЯзыка");
	#КонецЕсли

КонецФункции

Процедура УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля,
	ПравоеЗначение = Неопределено,
	ВидСравнения = Неопределено,
	Представление = Неопределено,
	Использование = Неопределено,
	РежимОтображения = Неопределено,
	ИдентификаторПользовательскойНастройки = Неопределено) Экспорт

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля, ПравоеЗначение, ВидСравнения, Представление, Использование, РежимОтображения, ИдентификаторПользовательскойНастройки);
	
КонецПроцедуры

Процедура ОбновитьКоманды(Форма, Источник) Экспорт

	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(Форма, Источник);
	
КонецПроцедуры

Процедура СкопироватьЭлементы(ПриемникЗначения, ИсточникЗначения, ОчищатьПриемник = Истина) Экспорт

	КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(ПриемникЗначения, ИсточникЗначения, ОчищатьПриемник);
	
КонецПроцедуры

Функция ПредопределенныйЭлемент(ПолноеИмяПредопределенного) Экспорт

	Возврат ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент(ПолноеИмяПредопределенного);
	
КонецФункции

// Заменяет недопустимые символы в XML-строке на заданные символы.
//
// Параметры:
//   Текст - Строка - строка, в которой требуется выполнить замену недопустимых символов.
//   СимволЗамены - Строка - строка, на которую требуется выполнить замену недопустимого символа в XML-строке.
// 
// Возвращаемое значение:
//    Строка - строка, полученная заменой недопустимых символов в XML-строке.
//
Функция ЗаменитьНедопустимыеСимволыXML(Знач Текст, СимволЗамены = " ") Экспорт
	
	Позиция = 0;
	КодПроверки = "Позиция = НайтиНедопустимыеСимволыXML(Текст, ПозицияНачала)";
	СисИнфо = Новый СистемнаяИнформация;
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии("8.3.21.0", СисИнфо.ВерсияПриложения) < 0 Тогда 
		КодПроверки = "Позиция = ОбработкаСтрокиXML.НайтиНедопустимыеСимволыXML(Текст, ПозицияНачала)";
	КонецЕсли;
	
#Если Не ВебКлиент Тогда
	ПозицияНачала = 1;
	Выполнить(КодПроверки);
	Пока Позиция > 0 Цикл
		НедопустимыйСимвол = Сред(Текст, Позиция, 1);
		Текст = СтрЗаменить(Текст, НедопустимыйСимвол, СимволЗамены);
		ПозицияНачала = Позиция + СтрДлина(СимволЗамены);
		Если ПозицияНачала > СтрДлина(Текст) Тогда
			Прервать;
		КонецЕсли;
		Выполнить(КодПроверки);
	КонецЦикла;
	
	Возврат Текст;
#Иначе
	// Коды символов от 0 до 2^16-1, которые метод НайтиНедопустимыеСимволыXML
	// считает недопустимыми: 0-8, 11-12, 14-31, 55296-57343.
	Итог = "";
	ДлинаСтроки = СтрДлина(Текст);
	
	Для НомерСимвола = 1 По ДлинаСтроки Цикл
		Символ = Сред(Текст, НомерСимвола, 1);
		КодСимвола = КодСимвола(Символ);
		
		Если КодСимвола < 9
		 Или КодСимвола > 10    И КодСимвола < 13
		 Или КодСимвола > 13    И КодСимвола < 32
		 Или КодСимвола > 55295 И КодСимвола < 57344 Тогда
			
			Символ = СимволЗамены;
		КонецЕсли;
		Итог = Итог + Символ;
	КонецЦикла;
	
	Возврат Итог;
#КонецЕсли
	
КонецФункции

// Возвращает числовое значение ставки НДС
//
// Параметры:
//  СтавкаНДС - СправчоникСсылка.СтавкиНДС - значение ставки НДС.
//
// Возвращаемое значение:
//  Число - Значение ставки НДС числом. В формате значения процента (Например 12% - 12)
//
Функция ПолучитьСтавкуНДСЧислом(Знач СтавкаНДС) Экспорт
	
	СтавкаНДСЧислом = ОбработкаТабличнойЧастиТоварыСерверПовтИсп.СтавкаНДСЧислом(СтавкаНДС);
	Возврат СтавкаНДСЧислом * 100;
	
КонецФункции

#КонецОбласти