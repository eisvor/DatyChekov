////////////////////////////////////////////////////////////////////////////////
// УправлениеПечатьюВызовСервера содержит процедуры и функции для работы 
// с печатью и обработки действий пользователя с печатью.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Параметры:
//  МассивДокументов - Массив - массив документов для выбора данных по ценникам и этикеткам.
//  МассивНепроведенныхДокументов - Массив - массив непроведенных документов для выбора данных по ценникам и этикеткам.
//  ПараметрыПечатиЦенниковИЭтикеток - Структура - параметры печати.
//
// Возвращаемое значение:
//  Строка - адрес структуры данных во временном хранилище.
//
Функция СтруктураДанныхЦенниковИЭтикеток(МассивДокументов, МассивНепроведенныхДокументов, ПараметрыПечатиЦенниковИЭтикеток) Экспорт
	
	Возврат УправлениеПечатьюРТ.СтруктураДанныхЦенниковИЭтикеток(МассивДокументов, МассивНепроведенныхДокументов, ПараметрыПечатиЦенниковИЭтикеток);
	
КонецФункции

// Помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Параметры:
//  МассивДокументов - Массив - массив документов для выбора данных по ценникам и этикеткам.
//  МассивНепроведенныхДокументов - Массив - массив непроведенных документов для выбора данных по ценникам и этикеткам.
//  ПараметрыПечатиЦенниковИЭтикеток - Структура - параметры печати.
//
// Возвращаемое значение:
//  Строка - адрес структуры данных во временном хранилище.
//
Функция СтруктураДанныхЦенниковИЭтикетокДляУстановкиЦен(МассивДокументов, МассивНепроведенныхДокументов, ПараметрыПечатиЦенниковИЭтикеток) Экспорт
	
	Возврат УправлениеПечатьюРТ.СтруктураДанныхЦенниковИЭтикетокДляУстановкиЦен(МассивДокументов, МассивНепроведенныхДокументов, ПараметрыПечатиЦенниковИЭтикеток);
	
КонецФункции

// Помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Параметры:
//  МассивДокументов - Массив - массив документов для выбора данных по ценникам и этикеткам.
//  МассивНепроведенныхДокументов - Массив - массив непроведенных документов для выбора данных по ценникам и этикеткам.
//  ПараметрыПечатиЦенниковИЭтикеток - Структура - параметры печати.
//
// Возвращаемое значение:
//  Строка - адрес структуры данных во временном хранилище.
//
Функция СтруктураДанныхЦенниковИЭтикетокДляПримененияЦен(МассивДокументов, МассивНепроведенныхДокументов, ПараметрыПечатиЦенниковИЭтикеток) Экспорт
	
	Возврат УправлениеПечатьюРТ.СтруктураДанныхЦенниковИЭтикетокДляПримененияЦен(МассивДокументов, МассивНепроведенныхДокументов, ПараметрыПечатиЦенниковИЭтикеток);
	
КонецФункции

// Помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Параметры:
//  МассивДокументов - Массив - массив документов для выбора данных по ценникам и этикеткам.
//  МассивНепроведенныхДокументов - Массив - массив непроведенных документов для выбора данных по ценникам и этикеткам.
//  ПараметрыПечатиЦенниковИЭтикеток - Структура - параметры печати.
//
// Возвращаемое значение:
//  Строка - адрес структуры данных во временном хранилище.
//
Функция СтруктураДанныхЦенниковИЭтикетокДляПеремещенияТоваров(МассивДокументов, МассивНепроведенныхДокументов, ПараметрыПечатиЦенниковИЭтикеток) Экспорт
	
	Возврат УправлениеПечатьюРТ.СтруктураДанныхЦенниковИЭтикетокДляПеремещенияТоваров(МассивДокументов, МассивНепроведенныхДокументов, ПараметрыПечатиЦенниковИЭтикеток);
	
КонецФункции

// Помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Параметры:
//  МассивДокументов - Массив - массив документов для выбора данных по ценникам и этикеткам.
//  МассивНепроведенныхДокументов - Массив - массив непроведенных документов для выбора данных по ценникам и этикеткам.
//  ПараметрыПечатиЦенниковИЭтикеток - Структура - параметры печати.
//
// Возвращаемое значение:
//  Строка - адрес структуры данных во временном хранилище.
//
Функция СтруктураДанныхЭтикетокСправокБЕГАИСДляПеремещенияТоваров(МассивДокументов, МассивНепроведенныхДокументов, ПараметрыПечатиЦенниковИЭтикеток) Экспорт
	
	Возврат УправлениеПечатьюРТ.СтруктураДанныхЭтикетокСправокБЕГАИСДляПеремещенияТоваров(МассивДокументов, МассивНепроведенныхДокументов, ПараметрыПечатиЦенниковИЭтикеток);
	
КонецФункции

// Помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Параметры:
//  МассивДокументов - Массив - массив документов для выбора данных по ценникам и этикеткам.
//  МассивНепроведенныхДокументов - Массив - массив непроведенных документов для выбора данных по ценникам и этикеткам.
//  ПараметрыПечатиЦенниковИЭтикеток - Структура - параметры печати.
//
// Возвращаемое значение:
//  Строка - адрес структуры данных во временном хранилище.
//
Функция СтруктураДанныхЭтикетокСправокБЕГАИСДляТТНВходящаяЕГАИС(МассивДокументов, МассивНепроведенныхДокументов, ПараметрыПечатиЦенниковИЭтикеток) Экспорт
	
	Возврат УправлениеПечатьюРТ.СтруктураДанныхЭтикетокСправокБЕГАИСДляТТНВходящаяЕГАИС(МассивДокументов, МассивНепроведенныхДокументов, ПараметрыПечатиЦенниковИЭтикеток);
	
КонецФункции

// Помещает таблицу во временное хранилище 
// и возвращает адрес этой таблицы.
//
// Параметры:
//  ТаблицаДляРазмещения - ТаблицаЗначений - таблица для помещения в хранилище.
//
// Возвращаемое значение:
//  Строка - адрес таблицы во временном хранилище.
//
Функция АдресТаблицыВоВременномХранилище(Знач ТаблицаДляРазмещения) Экспорт
	
	Возврат УправлениеПечатьюРТ.АдресТаблицыВоВременномХранилище(ТаблицаДляРазмещения);
	
КонецФункции

// Возвращает массив чеков ККМ-возвратов из переданного массива чеков ККМ.
//
// Параметры:
//  МассивДокументов - массив чеков ККМ.
//
// Возвращаемое значение:
//  Массив - массив чеков возврата.
//
Функция МассивВозвратовЧекККМ(Знач МассивДокументов) Экспорт
	
	Возврат УправлениеПечатьюРТ.МассивВозвратовЧекККМ(МассивДокументов);
	
КонецФункции

// Возвращает структуру: идентификатор ФР и ширину ленты.
//
// Параметры:
//  МассивДокументов - Массив - массив документов для которых возвращаются параметры.
//  РабочееМесто - СправочникСсылка.РабочиеМеста - рабочее место оборудования.
//
// Возвращаемое значение:
//  Структура - параметры фискального регистратора.
//
Функция СтруктураПараметровПечатиЧекаДляФР(МассивДокументов, РабочееМесто) Экспорт
	
	Возврат УправлениеПечатьюРТ.СтруктураПараметровПечатиЧекаДляФР(МассивДокументов, РабочееМесто);
	
КонецФункции

// Возвращает строку для печати на ФР разбитую по ширине ленты.
//
// Параметры:
//  МассивДокументов - Массив - массив документов для которых возвращается строка.
//  ШиринаЛенты - Число - ширина ленты печати.
//
// Возвращаемое значение:
//  Строка - строка печати на оборудовании.
//
Функция СтрокаПечатиНаФР(МассивДокументов, ШиринаЛенты) Экспорт
	
	Возврат УправлениеПечатьюРТ.СтрокаПечатиНаФР(МассивДокументов, ШиринаЛенты);
	
КонецФункции

// Возвращает соответствие физических лиц в именительном падеже к документам Возврат Товаров.
//
// Параметры:
//  МассивДокументов - Массив - массив документов возврата товаров.
//
// Возвращаемое значение:
//  Соответствие - соответствие физичиского лица в им. падаже к документу возврата.
//
Функция СоответствиеФизЛицВИменительномПадежеВозвратовТоваров(МассивДокументов) Экспорт
	
	Возврат УправлениеПечатьюРТ.СоответствиеФизЛицВИменительномПадежеВозвратовТоваров(МассивДокументов);
	
КонецФункции

// Возвращает сумму выделенных ячеек табличного документа.
//
// Параметры:
//  Результат - ТабличныйДокумент - табличный документ по которому ищется сумма.
//  КэшВыделеннойОбласти - Массив - массив выделенной области.
// 
// Возвращаемое значение:
//  Число - сумма выделенных ячеек.
//  
Функция ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(Знач Результат, КэшВыделеннойОбласти) Экспорт
	
	Сумма = 0;
	Для Каждого КлючИЗначение Из КэшВыделеннойОбласти Цикл
		СтруктураАдресВыделеннойОбласти = КлючИЗначение.Значение;
		Для ИндексСтрока = СтруктураАдресВыделеннойОбласти.Верх По СтруктураАдресВыделеннойОбласти.Низ Цикл
			Для ИндексКолонка = СтруктураАдресВыделеннойОбласти.Лево По СтруктураАдресВыделеннойОбласти.Право Цикл
				Попытка
					Ячейка = Результат.Область(ИндексСтрока, ИндексКолонка, ИндексСтрока, ИндексКолонка);
					Если Ячейка.Видимость = Истина Тогда
						Если Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
							Сумма = Сумма + Ячейка.Значение;
						ИначеЕсли ЗначениеЗаполнено(Ячейка.Текст) И СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Ячейка.Текст) <> Неопределено Тогда
							Сумма = Сумма + Число(СтрЗаменить(Ячейка.Текст, " ", ""));
						КонецЕсли;
					КонецЕсли;
				Исключение
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Вычисление суммы выделенных ячеек'"),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ВызватьИсключение;
				КонецПопытки;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	КэшВыделеннойОбласти.Вставить("Сумма", Сумма);
	
	Возврат Сумма;
	
КонецФункции

// Устанавливает настройки по умолчанию.
// 
// Параметры:
//  ФормаОтчета - УправляемаяФорма - форма для установки настроек.
//
Процедура УстановитьНастройкиПоУмолчанию(ФормаОтчета) Экспорт
	
	Отчет = ФормаОтчета.Отчет;
	
	Если Отчет.Свойство("НачалоПериода") Тогда
		Отчет.НачалоПериода = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	Если Отчет.Свойство("КонецПериода") Тогда
		Отчет.КонецПериода  = КонецМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	ИдентификаторОбъекта = УправлениеПечатьюРТКлиентСервер.ИдентификаторОбъекта(ФормаОтчета);
	Если ИдентификаторОбъекта = "ОборотноСальдоваяВедомость" Тогда
		Если Отчет.ДополнительныеПоля.НайтиСтроки(Новый Структура("Поле", "Счет.Наименование")).Количество() = 0 Тогда
			НоваяСтрока = ФормаОтчета.Отчет.ДополнительныеПоля.Добавить();
			НоваяСтрока.Представление = НСтр("ru = 'Выводить наименование счета'");
			НоваяСтрока.Поле          = "Счет.Наименование";
			НоваяСтрока.Использование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Установка начальных значений Группировки
	Если Отчет.Свойство("Группировка") Тогда
		Отчет.Группировка.Очистить();
		Для Каждого ЭлементСтруктуры Из Отчет.КомпоновщикНастроек.Настройки.Структура Цикл
			Если ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
				Для Каждого Серия Из ЭлементСтруктуры.Серии Цикл
					Если Серия.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Серия, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для Каждого Точка Из ЭлементСтруктуры.Точки Цикл
					Если Точка.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Точка, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
				Для Каждого Колонка Из ЭлементСтруктуры.Колонки Цикл
					Если Колонка.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Колонка, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для Каждого Строка Из ЭлементСтруктуры.Строки Цикл
					Если Строка.Имя = "Группировка" Тогда
						ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, Строка, Отчет.Группировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				Если ЭлементСтруктуры.Имя = "Группировка" Тогда
					Отчет.Группировка.Очистить();
					ЗаполнитьГруппировкиИзНастроек(Отчет.КомпоновщикНастроек, ЭлементСтруктуры, Отчет.Группировка);
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Отчет.Свойство("Интервалы") Тогда
		Отчет.Интервалы.Очистить();
		
		НоваяСтрока = Отчет.Интервалы.Добавить();
		НоваяСтрока.Значение      = 7;
		НоваяСтрока.Представление = НСтр("ru = 'До 7 дней'");
		
		НоваяСтрока = Отчет.Интервалы.Добавить();
		НоваяСтрока.Значение      = 15;
		НоваяСтрока.Представление = НСтр("ru = 'От 8 до 15 дней'");
		
		НоваяСтрока = Отчет.Интервалы.Добавить();
		НоваяСтрока.Значение      = 30;
		НоваяСтрока.Представление = НСтр("ru = 'От 16 до 30 дней'");
		
		НоваяСтрока = Отчет.Интервалы.Добавить();
		НоваяСтрока.Значение      = 60;
		НоваяСтрока.Представление = НСтр("ru = 'От 31 до 60 дней'");
		
		НоваяСтрока = Отчет.Интервалы.Добавить();
		НоваяСтрока.Значение      = 90;
		НоваяСтрока.Представление = НСтр("ru = 'От 61 до 90 дней'");
	КонецЕсли;
	
	Если Отчет.Свойство("Период") Тогда
		Отчет.Период = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ЕстьРеквизитФормы(ФормаОтчета, "ВыводитьЗаголовок") Тогда
		ФормаОтчета.ВыводитьЗаголовок = Истина;
	КонецЕсли;
	
	Если ЕстьРеквизитФормы(ФормаОтчета, "ВыводитьДиаграмму") Тогда
		ФормаОтчета.ВыводитьДиаграмму = Истина;
	КонецЕсли;
	
	Если Отчет.Свойство("РазмещениеДополнительныхПолей") Тогда
		Отчет.РазмещениеДополнительныхПолей = ПолучитьРазмещениеДополнительныхПолей(Отчет.КомпоновщикНастроек);
	КонецЕсли;
	
	Если Отчет.Свойство("Группировка") И Отчет.Свойство("ДополнительныеПоля") Тогда
		ЗаполнитьДополнительныеПоляИзНастроек(Отчет.КомпоновщикНастроек, Отчет.ДополнительныеПоля, Отчет.Группировка);
	КонецЕсли;
	
	Если Отчет.Свойство("ПоказательПоступление") Тогда
		Отчет.ПоказательПоступление = Истина;
	КонецЕсли;
	Если Отчет.Свойство("ПоказательРасход") Тогда
		Отчет.ПоказательРасход = Истина;
	КонецЕсли;
	
	Если Отчет.Свойство("ПоказательЗадолженность") Тогда
		Отчет.ПоказательЗадолженность = Истина;
	КонецЕсли;
	Если Отчет.Свойство("ПоказательПросроченнаяЗадолженность") Тогда
		Отчет.ПоказательПросроченнаяЗадолженность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура загрузки пользовательских настроек.
// 
// Параметры:
//  ФормаОтчета - УправляемаяФорма - форма отчета.
//  Настройки - Структура - структура настроек отчета.
//  ЗагружатьТолькоРеквизиты - Булево - признак загрузки только реквизитов.
//
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(ФормаОтчета, Настройки, ЗагружатьТолькоРеквизиты = Ложь) Экспорт

	// Для отчетов использующих варианты отчетов, при инициализации отчета
	// происходит загрузка варианта и пользовательских настроек поэтому,
	// перед тем как загружать настройки, проверим режим расшифровки
	РежимРасшифровки = Ложь;
	Отчет = ФормаОтчета.Отчет;
	Если Отчет.Свойство("РежимРасшифровки") И ФормаОтчета.Отчет.РежимРасшифровки Тогда
		РежимРасшифровки = Истина;
	КонецЕсли;
	
	// Если настройки не заданы или отчет в режиме расшифровки
	// загружаем настройки по умолчанию
	Если Настройки = Неопределено ИЛИ РежимРасшифровки Тогда
		// Установка настроек по умолчанию
		УстановитьНастройкиПоУмолчанию(ФормаОтчета);
	Иначе 
		// Восстановление сохраненных настроек
		Если Настройки.ДополнительныеСвойства.Свойство("ДанныеОтчета") Тогда
			ДополнительныеСвойства = Настройки.ДополнительныеСвойства.ДанныеОтчета.Получить();
			Для Каждого ЭлементСтруктуры Из ДополнительныеСвойства Цикл
				// Восстановление реквизитов отчета
				Если ФормаОтчета.Отчет.Свойство(ЭлементСтруктуры.Ключ) Тогда
					Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("ТаблицаЗначений") Тогда
						ФормаОтчета.Отчет[ЭлементСтруктуры.Ключ].Загрузить(ЭлементСтруктуры.Значение);
					ИначеЕсли ЭлементСтруктуры.Ключ = "Организация" 
						И Не ОрганизацииСлужебный.ИспользуетсяНесколькоОрганизаций() Тогда
						ФормаОтчета.Отчет[ЭлементСтруктуры.Ключ] = Справочники.Организации.ОрганизацияПоУмолчанию();
					ИначеЕсли ЭлементСтруктуры.Ключ <> "РежимРасшифровки" Тогда
						ФормаОтчета.Отчет[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
					КонецЕсли;
				КонецЕсли;
				
				// Восстановление реквизитов формы
				Если ЭлементСтруктуры.Ключ = "ВыводитьЗаголовок" И ЕстьРеквизитФормы(ФормаОтчета, "ВыводитьЗаголовок") Тогда
					ФормаОтчета.ВыводитьЗаголовок = ЭлементСтруктуры.Значение;
				ИначеЕсли ЭлементСтруктуры.Ключ = "ВыводитьПодвал" И ЕстьРеквизитФормы(ФормаОтчета, "ВыводитьПодвал") Тогда
					ФормаОтчета.ВыводитьПодвал = ЭлементСтруктуры.Значение;
				ИначеЕсли ЭлементСтруктуры.Ключ = "ВыводитьЕдиницуИзмерения" И ЕстьРеквизитФормы(ФормаОтчета, "ВыводитьЕдиницуИзмерения") Тогда
					ФормаОтчета.ВыводитьЕдиницуИзмерения = ЭлементСтруктуры.Значение;
				ИначеЕсли ЭлементСтруктуры.Ключ = "ВыводитьДиаграмму" И ЕстьРеквизитФормы(ФормаОтчета, "ВыводитьДиаграмму") Тогда
					ФормаОтчета.ВыводитьДиаграмму = ЭлементСтруктуры.Значение;
				ИначеЕсли ЭлементСтруктуры.Ключ = "МакетОформления" И ЕстьРеквизитФормы(ФормаОтчета, "МакетОформления") Тогда
					ФормаОтчета.МакетОформления = ЭлементСтруктуры.Значение;
					УправлениеПечатьюРТКлиентСервер.УстановитьПараметрВывода(
						ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки, 
						"МакетОформления", ФормаОтчета.МакетОформления);
				ИначеЕсли ЭлементСтруктуры.Ключ = "ВидПериода" И ЕстьРеквизитФормы(ФормаОтчета, "ВидПериода") Тогда
					ФормаОтчета.ВидПериода = ЭлементСтруктуры.Значение;
				КонецЕсли;
				Если ЭлементСтруктуры.Ключ = "СкрыватьНастройкиПриФормированииОтчета" И ЕстьРеквизитФормы(ФормаОтчета, "СкрыватьНастройкиПриФормированииОтчета") Тогда
					ФормаОтчета.СкрыватьНастройкиПриФормированииОтчета = ЭлементСтруктуры.Значение;		
				КонецЕсли;
				Если ЭлементСтруктуры.Ключ = "ВидимостьПанелиНастроек" И НЕ ЕстьЭлементФормы(ФормаОтчета, "РазделыОтчета") Тогда
					Если ЕстьЭлементФормы(ФормаОтчета, "ПанельНастроек") Тогда
						УправлениеПечатьюРТКлиентСервер.ИзменитьЗаголовокКнопкиПанельНастроек(
							ФормаОтчета.Элементы.ПанельНастроек, ДополнительныеСвойства.ВидимостьПанелиНастроек);
					КонецЕсли;
					Если ЕстьЭлементФормы(ФормаОтчета, "ГруппаПанельНастроек") Тогда
 						ФормаОтчета.Элементы.ГруппаПанельНастроек.Видимость = ДополнительныеСвойства.ВидимостьПанелиНастроек;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ДополнительныеСвойства.Свойство("ВыводитьДиаграмму") И ЕстьРеквизитФормы(ФормаОтчета, "ВыводитьДиаграмму") Тогда
				
				ФормаОтчета.ВыводитьДиаграмму = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		Если Не ЗагружатьТолькоРеквизиты Тогда
			ТекущиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки;
			
			// Установка пользовательских настроек
			ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
			ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
			ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
			
			// Перенос пользовательских настроек в основные
			ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Настройки);
			ФормаОтчета.Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(ФормаОтчета.Отчет.КомпоновщикНастроек.ПолучитьНастройки());
			
			// Очистка пользовательских настроек
			ТекущиеНастройки = ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки;
			ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
			ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
			ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
		КонецЕсли;		
	КонецЕсли;
	
	Если ЕстьРеквизитФормы(ФормаОтчета, "МинимальныйВидПериода") Тогда
		МинимальныйВидПериода = ФормаОтчета.МинимальныйВидПериода;
	Иначе
		МинимальныйВидПериода = Неопределено;
	КонецЕсли;
	
	ИдентификаторОбъекта = УправлениеПечатьюРТКлиентСервер.ИдентификаторОбъекта(ФормаОтчета);
	Если ИдентификаторОбъекта = "ОборотноСальдоваяВедомость" Тогда
		Если ФормаОтчета.Отчет.ДополнительныеПоля.НайтиСтроки(Новый Структура("Поле", "Счет.Наименование")).Количество() = 0 Тогда
			НоваяСтрока = ФормаОтчета.Отчет.ДополнительныеПоля.Добавить();
			НоваяСтрока.Представление = НСтр("ru = 'Выводить наименование счета'");
			НоваяСтрока.Поле          = "Счет.Наименование";
			НоваяСтрока.Использование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует массив с данными для печати на принтере этикеток.
//
// Параметры:
//  Параметры - Структура - структура параметров выполнения операции.
//  МенеджерПечати - Строка - менеджер печати строкой.
//  Размер - Число - размер макета.
// 
// Возвращаемое значение:
//  Массив - массив данных ценников и этикеток.
//
Функция СтруктураДанныхЦенниковИЭтикетокДляПринтераЭтикеток(Знач Параметры, Знач МенеджерПечати, Размер) Экспорт
	
	МенеджерПечати = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МенеджерПечати);
	
	Данные = МенеджерПечати.ПолучитьДанныеДляПринтераЭтикеток(Параметры);
	
	Результат = Новый Массив;
	
	Для Каждого ТекШаблон Из Данные Цикл
		
		Если ТекШаблон.Шаблон.РазмерМакета = Размер Тогда
			
			Пакет = Новый Структура;
			Пакет.Вставить("XML", ТекШаблон.ТабличныйДокумент.XML);
			Пакет.Вставить("Этикетки", Новый Массив);
			
			Для Каждого ТекЭтикетка Из ТекШаблон.ТабличныйДокумент.Этикетки Цикл
				
				НоваяЭтикетка = Новый Структура;
				НоваяЭтикетка.Вставить("Количество", ТекЭтикетка.Количество);
				НоваяЭтикетка.Вставить("Поля", ТекЭтикетка.ЗначенияПолей);
				
				Пакет.Этикетки.Добавить(НоваяЭтикетка);
				
			КонецЦикла;
			
			Результат.Добавить(Пакет);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработкаПодбораТоваровДляПечатиЭтикетокИЦенниковЗавершение(Результат, ПараметрыОперации, МассивТоваровДляПечати) Экспорт
	
	УправлениеПечатьюРТ.ОбработкаПодбораТоваровДляПечатиЭтикетокИЦенниковЗавершение(Результат, ПараметрыОперации, МассивТоваровДляПечати);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьГруппировкиИзНастроек(КомпоновщикНастроек, Структура, Группировка)
	
	Если Структура.ПоляГруппировки.Элементы.Количество() > 0 Тогда
		Поле = Строка(Структура.ПоляГруппировки.Элементы[0].Поле);
		НоваяСтрока = Группировка.Добавить();
		
		НоваяСтрока.Использование  = Структура.Использование;
		НоваяСтрока.Поле           = Поле;
		НоваяСтрока.Представление  = УправлениеПечатьюРТКлиентСервер.СвойствоПоля(КомпоновщикНастроек, НоваяСтрока.Поле);
		ТипГруппировки = Структура.ПоляГруппировки.Элементы[0].ТипГруппировки;
		Если ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия Тогда
			НоваяСтрока.ТипГруппировки = 1;
		ИначеЕсли ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия Тогда
			НоваяСтрока.ТипГруппировки = 2;
		Иначе
			НоваяСтрока.ТипГруппировки = 0;
		КонецЕсли;
		Если Структура.Структура.Количество() > 0 Тогда
			ЗаполнитьГруппировкиИзНастроек(КомпоновщикНастроек, Структура.Структура[0], Группировка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьРеквизитФормы(Форма, ИмяРеквизита) 
	
	Для Каждого РеквизитФормы Из Форма.ПолучитьРеквизиты() Цикл
		Если ВРег(РеквизитФормы.Имя) = ВРег(ИмяРеквизита) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьРазмещениеДополнительныхПолей(КомпоновщикНастроек) 
	
	РасположениеРеквизитов = УправлениеПечатьюРТКлиентСервер.ПараметрВывода(КомпоновщикНастроек, "РасположениеРеквизитов");	
	
	Если РасположениеРеквизитов.Использование = Истина
		И РасположениеРеквизитов.Значение = РасположениеРеквизитовКомпоновкиДанных.Отдельно Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДополнительныеПоляИзНастроек(КомпоновщикНастроек, ДополнительныеПоля, Группировка)
	
	Если Группировка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПоля.Очистить();
	Для Каждого ВыбранноеПоле Из КомпоновщикНастроек.Настройки.Выбор.Элементы Цикл
		Если ТипЗнч(ВыбранноеПоле) = Тип("ВыбранноеПолеКомпоновкиДанных") 
			И Найти(Строка(ВыбранноеПоле.Поле), ".") > 0 Тогда
			Поле = Строка(ВыбранноеПоле.Поле);
			МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поле, ".");
			
			Если Группировка.НайтиСтроки(Новый Структура("Поле", МассивПолей[0])).Количество() > 0 Тогда
				НоваяСтрока = ДополнительныеПоля.Добавить();
				НоваяСтрока.Использование = ВыбранноеПоле.Использование;
				НоваяСтрока.Поле          = Поле;
				НоваяСтрока.Представление = УправлениеПечатьюРТКлиентСервер.СвойствоПоля(КомпоновщикНастроек, НоваяСтрока.Поле);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьЭлементФормы(Форма, ИмяЭлемента)
	
	Возврат Форма.Элементы.Найти(ИмяЭлемента) <> Неопределено;
	
КонецФункции

#КонецОбласти
