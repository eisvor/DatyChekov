
#Область ПрограммныйИнтерфейс

#Область РаботаСКатегориями

// Функция возвращает идентификаторы категорий по переданным ссылкам.
//
// Параметры:
//  ВидыНоменклатуры - Массив - массив ссылок типа ОпределяемыйТип.ВидНоменклатурыРаботаСНоменклатурой.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с данными. Колонки:
//    * ВидНоменклатуры - Ссылка - ссылка на вид номенклатуры.
//    * ИдентификаторКатегории - Строка - идентификатор категории.
//    * ПредставлениеКатегории - Строка - представление категории.
//
Функция ПолучитьСоответствиеВидовНоменклатурыПоСсылкам(ВидыНоменклатуры) Экспорт
	
	Запрос       = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры КАК ВидНоменклатуры,
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ИдентификаторКатегории КАК ИдентификаторКатегории,
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ПредставлениеКатегории КАК ПредставлениеКатегории
	|ИЗ
	|	РегистрСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой КАК СоответствиеВидовНоменклатурыРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеВидовНоменклатурыРаботаСНоменклатурой.ВидНоменклатуры В(&ВидыНоменклатуры)";
	
	Запрос.УстановитьПараметр("ВидыНоменклатуры", ВидыНоменклатуры);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область АвтоподборНоменклатуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьМассивПолейСобытияИзменениеТекстаРедактирования.
Процедура ЗаполнитьМассивПолейСобытияИзменениеТекстаРедактирования(МассивПолей) Экспорт
	
	МассивПолей.Добавить("Наименование");
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеОбъектовИнформационнойБазы

// См. РаботаСНоменклатуройПереопределяемый.СоздатьОбновитьЗначениеРеквизита.
Процедура СоздатьОбновитьЗначениеРеквизита(ДополнительныйРеквизит, СтрокаДанных, ЗначениеРеквизитаСсылка) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		Если ЗначениеЗаполнено(ЗначениеРеквизитаСсылка) Тогда
			
			ЭлектронноеВзаимодействиеРТ.УстановитьУправляемуюБлокировкуПоСсылке(ЗначениеРеквизитаСсылка, 
				РежимБлокировкиДанных.Исключительный);
			
			ЗначениеОбъект = ЗначениеРеквизитаСсылка.ПолучитьОбъект();
		Иначе
			ЗначениеОбъект = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
		КонецЕсли;
		
		ЗначениеОбъект.Владелец				= ДополнительныйРеквизит;
		ЗначениеОбъект.Наименование			= СтрокаДанных.Наименование;
		ЗначениеОбъект.ПолноеНаименование	= СтрокаДанных.Наименование;
		
		ЗначениеОбъект.Записать();
		ЗначениеРеквизитаСсылка = ЗначениеОбъект.Ссылка;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Работа с номенклатурой.Создание/обновление значение дополнительного реквизита'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.СоздатьОбновитьДополнительныйРеквизит.
Процедура СоздатьОбновитьДополнительныйРеквизит(ВидНоменклатуры, СтрокаДанных, РеквизитСсылка) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ЗначениеЗаполнено(РеквизитСсылка) Тогда
			
			ЭлектронноеВзаимодействиеРТ.УстановитьУправляемуюБлокировкуПоСсылке(РеквизитСсылка, 
				РежимБлокировкиДанных.Исключительный);
			
			РеквизитОбъект = РеквизитСсылка.ПолучитьОбъект();
			
		Иначе
			РеквизитОбъект = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
			
			РеквизитОбъект.ТипЗначения = 
				РаботаСНоменклатурой.ОписаниеТипаНаОснованииТипаСервиса(СтрокаДанных.Тип);
		КонецЕсли;
		
		НаборСвойств		= ВидНоменклатуры.НаборСвойств;
		УИД					= Новый УникальныйИдентификатор();
		СтрокаУИД			= СтрЗаменить(Строка(УИД), "-", "");
		ИмяРеквизита		= СтрокаДанных.Наименование + "_" + СтрокаУИД;
		НаименованиеНабора	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НаборСвойств, "Наименование");
		Наименование		= СтрокаДанных.Наименование + " (" + НаименованиеНабора + ")";
		
		РеквизитОбъект.Имя			= ИмяРеквизита;
		РеквизитОбъект.НаборСвойств	= НаборСвойств;
		РеквизитОбъект.Доступен		= Истина;
		РеквизитОбъект.Наименование	= Наименование;
		РеквизитОбъект.Заголовок	= СтрокаДанных.Наименование;
		
		РеквизитОбъект.Записать();
		
		РеквизитСсылка = РеквизитОбъект.Ссылка;
		
		ЗафиксироватьТранзакцию();
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Создание/обновление дополнительного реквизита'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.СоздатьВидНоменклатуры.
Процедура СоздатьВидНоменклатуры(ДанныеЗаполнения, ВидНоменклатурыСсылка) Экспорт
		
	СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
	ПреобразоватьСтавкуНДССервиса(ДанныеЗаполнения.СтавкаНДС, СтавкаНДС);
	
	ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПустаяСсылка();
	ПреобразоватьТипНоменклатурыСервиса(ДанныеЗаполнения.Тип, ТипНоменклатуры);
	
	ОсобенностьУчетаНоменклатуры = Перечисления.ОсобенностиУчетаНоменклатуры.ПустаяСсылка();
	ПреобразоватьОсобенностьУчетаНоменклатурыСервиса(ДанныеЗаполнения.Идентификатор, ОсобенностьУчетаНоменклатуры);
	
	// Заполнение объекта
	
	ВидНоменклатурыОбъект = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
	
	ВидНоменклатурыОбъект.Заполнить(Неопределено);
	ВидНоменклатурыОбъект.УстановитьНовыйКод();
	
	ВидНоменклатурыОбъект.Наименование		= ДанныеЗаполнения.Наименование;
	ВидНоменклатурыОбъект.Родитель			= ДанныеЗаполнения.РодительИнформационнойБазы;
	ВидНоменклатурыОбъект.СтавкаНДС			= СтавкаНДС;
	ВидНоменклатурыОбъект.ТипНоменклатуры	= ТипНоменклатуры;
	
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
		
		ВидНоменклатурыОбъект.ПризнакПредметаРасчета = Справочники.ПризнакиПредметовРасчета.Товар;
		
	ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
		
		ВидНоменклатурыОбъект.ПризнакПредметаРасчета = Справочники.ПризнакиПредметовРасчета.Услуга;
		
	КонецЕсли;

	ВидНоменклатурыОбъект.ОсобенностьУчета = ОсобенностьУчетаНоменклатуры;
	
	Если ПолучитьФункциональнуюОпцию("ОтключенныйФункционал") Тогда 
	Если ОсобенностьУчетаНоменклатуры = Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция Тогда
		ВидНоменклатурыОбъект.ПризнакПредметаРасчета = Справочники.ПризнакиПредметовРасчета.ПодакцизныйТоварМаркируемыйСИНеИмеющийКМ;
	ИначеЕсли ОсобенностьУчетаНоменклатуры = Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция
		Или ОсобенностьУчетаНоменклатуры = Перечисления.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак
		Или ОсобенностьУчетаНоменклатуры = Перечисления.ОсобенностиУчетаНоменклатуры.НикотиносодержащаяПродукция Тогда
		ВидНоменклатурыОбъект.ПризнакПредметаРасчета = Справочники.ПризнакиПредметовРасчета.ПодакцизныйТоварМаркируемыйСИИмеющийКМ;
	ИначеЕсли ОсобенностьУчетаНоменклатуры = Перечисления.ОсобенностиУчетаНоменклатуры.Пиво Тогда
		Если ВидНоменклатурыОбъект.ПродаетсяВРозлив Тогда
			ВидНоменклатурыОбъект.ПризнакПредметаРасчета = Справочники.ПризнакиПредметовРасчета.ПодакцизныйТоварМаркируемыйСИНеИмеющийКМ;
		Иначе
			ВидНоменклатурыОбъект.ПризнакПредметаРасчета = Справочники.ПризнакиПредметовРасчета.ПодакцизныйТоварМаркируемыйСИИмеющийКМ;
		КонецЕсли;
	ИначеЕсли ОсобенностьУчетаНоменклатуры = Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха Тогда
		ВидНоменклатурыОбъект.ПризнакПредметаРасчета = Справочники.ПризнакиПредметовРасчета.Товар;
	Иначе
		
		ВидыПродукциИСМП = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Ложь, Истина);
		
		МаркируемаяНеподакцизнаяПродукция = Новый Массив;
		Для Каждого ВидПродукцииИСМП Из ВидыПродукциИСМП Цикл
			ОсобенностьУчетаИСМП = ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукцииИСМП, Ложь);
			МаркируемаяНеподакцизнаяПродукция.Добавить(ОсобенностьУчетаИСМП);
		КонецЦикла;
		
		Если МаркируемаяНеподакцизнаяПродукция.Найти(ОсобенностьУчетаНоменклатуры) = Неопределено Тогда
			ВидНоменклатурыОбъект.ПризнакПредметаРасчета = Справочники.ПризнакиПредметовРасчета.Товар;
		Иначе
			ВидНоменклатурыОбъект.ПризнакПредметаРасчета = Справочники.ПризнакиПредметовРасчета.ТоварМаркируемыйСИИмеющийКМ;
		КонецЕсли;
	КонецЕсли;
	КонецЕсли;
	
	Попытка
		ВидНоменклатурыОбъект.Записать();
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Создание вида номенклатуры'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат;
		
	КонецПопытки;
	
	ВидНоменклатурыСсылка = ВидНоменклатурыОбъект.Ссылка;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.СоздатьОбновитьГруппуВидовНоменклатуры.
Процедура СоздатьОбновитьГруппуВидовНоменклатуры(ДанныеЗаполнения, ГруппаВидовНоменклатурыСсылка) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ЗначениеЗаполнено(ГруппаВидовНоменклатурыСсылка) Тогда
			
			ЭлектронноеВзаимодействиеРТ.УстановитьУправляемуюБлокировкуПоСсылке(ГруппаВидовНоменклатурыСсылка,
				РежимБлокировкиДанных.Исключительный);
			
			НоваяГруппа = ГруппаВидовНоменклатурыСсылка.ПолучитьОбъект();
			
		Иначе
			НоваяГруппа = Справочники.ВидыНоменклатуры.СоздатьГруппу();
		КонецЕсли;
		
		НоваяГруппа.Наименование	= ДанныеЗаполнения.Наименование;
		НоваяГруппа.Родитель		= ДанныеЗаполнения.РодительИнформационнойБазы;
		
		НоваяГруппа.Записать();
		ГруппаВидовНоменклатурыСсылка = НоваяГруппа.Ссылка;
		
		ЗафиксироватьТранзакцию();
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Запись группы вида номенклатуры'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.СоздатьНоменклатуру.
Процедура СоздатьНоменклатуру(ДанныеЗаполнения, НоменклатураСсылка) Экспорт
	
	// Подготовка данных
	
	СтавкаНДС = Справочники.СтавкиНДС.ПолучитьСтавкуНДСПоЗначению(?(Не ДанныеЗаполнения.СтавкаНДС = "0", 12, 0));
	
	СсылкаНаЕдиницуИзмерения = Справочники.БазовыеЕдиницыИзмерения.ПустаяСсылка();
	ЕдиницаИзмеренияПоДаннымСервиса(ДанныеЗаполнения.ЕдиницаИзмерения, СсылкаНаЕдиницуИзмерения);
	
	Производитель = Справочники.Контрагенты.ПустаяСсылка();
	НайтиПроизводителяПоДаннымСервиса(ДанныеЗаполнения.Производитель, Производитель);
	
	СсылкаНаМарку = Справочники.Марки.ПустаяСсылка();
	МаркаПоДаннымСервиса(ДанныеЗаполнения.Бренд, СсылкаНаМарку);
	
	// Заполнение объекта
	
	НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
	НоменклатураОбъект.Заполнить(Неопределено);
	
	НоменклатураОбъект.УстановитьНовыйКод();
	
	НаименованиеПолное = ?(ЗначениеЗаполнено(ДанныеЗаполнения.НаименованиеДляПечати), 
		ДанныеЗаполнения.НаименованиеДляПечати, 
		ДанныеЗаполнения.Наименование);
		
	НоменклатураОбъект.Артикул			= ДанныеЗаполнения.Артикул;
	НоменклатураОбъект.Наименование		= ДанныеЗаполнения.Наименование;
	НоменклатураОбъект.НаименованиеПолное = НаименованиеПолное;
	НоменклатураОбъект.ЕдиницаИзмерения	= СсылкаНаЕдиницуИзмерения;
	НоменклатураОбъект.Производитель	= Производитель;
	НоменклатураОбъект.Марка			= СсылкаНаМарку;
	НоменклатураОбъект.СтавкаНДС		= СтавкаНДС;
	НоменклатураОбъект.Описание			= ДанныеЗаполнения.Описание;
	НоменклатураОбъект.ВидНоменклатуры 	= ДанныеЗаполнения.ВидНоменклатурыПоУмолчанию.ВидНоменклатуры;
	НоменклатураОбъект.ТипНоменклатуры 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатураОбъект.ВидНоменклатуры,
																					"ТипНоменклатуры");
	НоменклатураОбъект.ОсобенностьУчета 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатураОбъект.ВидНоменклатуры,
																					"ОсобенностьУчета");
	НоменклатураОбъект.АлкогольнаяПродукция = ДанныеЗаполнения.УчастникЕГАИС;
	
	НоменклатураОбъект.ОбменДанными.Загрузка = Истина;
	
	Попытка
		НоменклатураОбъект.Записать();
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Создание номенклатуры'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат;
		
	КонецПопытки;
	
	НоменклатураСсылка = НоменклатураОбъект.Ссылка;
	
	// Сохранение изображения из сервиса
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Изображения) Тогда
		СохранитьИзображенияНоменклатуры(НоменклатураСсылка, ДанныеЗаполнения.Изображения);
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.СоздатьХарактеристикуСДополнительнымиРеквизитами.
Процедура СоздатьХарактеристикуСДополнительнымиРеквизитами(ДанныеЗаполнения, Владелец, ХарактеристикаСсылка) Экспорт
	
	ЗначенияДополнительныхРеквизитов = Новый ТаблицаЗначений;
	
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Свойство");
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Значение");
	
	ЗаполнитьЗначенияРеквизитовХарактеристики(
		ЗначенияДополнительныхРеквизитов, 
		ДанныеЗаполнения);
	
	Если ЗначенияДополнительныхРеквизитов.Количество() <> 0 Тогда
		ХарактеристикаСсылка = Неопределено;
		СоздатьХарактеристику(ДанныеЗаполнения, Владелец, ХарактеристикаСсылка);
		
		Если ХарактеристикаСсылка <> Неопределено Тогда
			УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(ХарактеристикаСсылка, ЗначенияДополнительныхРеквизитов);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.СоздатьХарактеристику.
Процедура СоздатьХарактеристику(ДанныеЗаполнения, Владелец, ХарактеристикаСсылка) Экспорт
	
	НоваяХарактеристика = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
	НоваяХарактеристика.Владелец = Владелец;
	НоваяХарактеристика.УстановитьНовыйКод();
	НоваяХарактеристика.Наименование = ДанныеЗаполнения.Наименование;
	
	Попытка
		НоваяХарактеристика.Записать();
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Создание номенклатуры'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат;
		
	КонецПопытки;
	
	ХарактеристикаСсылка = НоваяХарактеристика.Ссылка;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьЗначенияДополнительныхРеквизитов.
Процедура ЗаполнитьЗначенияДополнительныхРеквизитов(ДанныеЗаполнения, НоменклатураСсылка) Экспорт
	
	ЗначенияДополнительныхРеквизитов = Новый ТаблицаЗначений;
	
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Свойство");
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Значение");
	
	Для Каждого ДополнительныйРеквизит Из ДанныеЗаполнения Цикл
		
		Если НЕ ЗначениеЗаполнено(ДополнительныйРеквизит.РеквизитИнформационнойБазы) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ЗначенияДополнительныхРеквизитов.Добавить();
		
		НоваяСтрока.Свойство = ДополнительныйРеквизит.РеквизитИнформационнойБазы;
		НоваяСтрока.Значение = РаботаСНоменклатурой.ЗначениеДополнительногоРеквизита(ДополнительныйРеквизит);
		
	КонецЦикла;
	
	Если ЗначенияДополнительныхРеквизитов.Количество() > 0 Тогда
		УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(НоменклатураСсылка, ЗначенияДополнительныхРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.СформироватьНаименованиеПоХарактеристике.
Процедура СформироватьНаименованиеПоХарактеристике(НаименованиеНоменклатуры, 
													ПредставлениеХарактеристики, 
													НаименованиеХарактеристики) Экспорт
	
	НаименованиеХарактеристики = СтрШаблон("%1 ,%2", НаименованиеНоменклатуры, ПредставлениеХарактеристики);
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаписатьШтрихкоды.
Процедура ЗаписатьШтрихкоды(ДанныеПоШтрихкодам) Экспорт 
	
	Для Каждого ЭлементКоллекции Из ДанныеПоШтрихкодам Цикл
		
		МенеджерЗаписи = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Штрихкод = ЭлементКоллекции.Штрихкод;
		МенеджерЗаписи.ПредставлениеШтрихкода = ЭлементКоллекции.Штрихкод;
		МенеджерЗаписи.Владелец = ЭлементКоллекции.Номенклатура;
		МенеджерЗаписи.Характеристика = ЭлементКоллекции.Характеристика;
		МенеджерЗаписи.ТипШтрихкода = ПодключаемоеОборудованиеРТ.ТипШтрихкода(
			ЭлементКоллекции.Штрихкод);
		
		Попытка
			МенеджерЗаписи.Записать(Истина);
		Исключение
		
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Запись штрихкодов'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Продолжить;
		
		КонецПопытки;
	
	КонецЦикла;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПрисвоитьРеквизитыОбъекту.
Процедура ПрисвоитьРеквизитыОбъекту(ВидНоменклатуры, ДополнительныеРеквизиты, ЯвляетсяРеквизитомХарактеристики) Экспорт
	
	Если ЯвляетсяРеквизитомХарактеристики Тогда
		НаборСвойств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "НаборСвойствХарактеристик");
	Иначе
		НаборСвойств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "НаборСвойств");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаборСвойств) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		ЭлектронноеВзаимодействиеРТ.УстановитьУправляемуюБлокировкуПоСсылке(НаборСвойств, 
			РежимБлокировкиДанных.Исключительный);
		
		НаборСвойствОбъект = НаборСвойств.ПолучитьОбъект();
		
		Для Каждого ДополнительныйРеквизит Из ДополнительныеРеквизиты Цикл
			
			НоваяСтрокаРеквизита = НаборСвойствОбъект.ДополнительныеРеквизиты.Добавить();
			НоваяСтрокаРеквизита.Свойство = ДополнительныйРеквизит;
			
		КонецЦикла;
		
		НаборСвойствОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Запись дополнительных реквизитов'",
		ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.СохранитьИзображенияНоменклатуры.
Процедура СохранитьИзображенияНоменклатуры(НоменклатураСсылка, Изображения) Экспорт
	
	СозданныеИзображения = Новый Массив;
	
	Для каждого ЭлементКоллекции Из Изображения Цикл
		
		ИзображениеURL = ЭлементКоллекции.ИзображениеURL;
		
		ДанныеИзображения = ДвоичныеДанныеПоАдресуURL(ИзображениеURL);
		
		ИмяИзображения = "";
		РасширениеИзображения = "";
		
		ПодстрокиАдреса = СтрРазделить(ИзображениеURL, "/");		
		
		Если ПодстрокиАдреса.Количество() > 0  Тогда
			ИмяИзображения = ПодстрокиАдреса[ПодстрокиАдреса.ВГраница()];
			
			ПодстрокиИмени = СтрРазделить(ИмяИзображения, ".");
			
			Если ПодстрокиИмени.Количество() = 2 Тогда
				ИмяИзображения = ПодстрокиИмени[0];	
				РасширениеИзображения = ПодстрокиИмени[1];	
			КонецЕсли;	
		КонецЕсли;
				
		ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
		
		ПараметрыФайла.Вставить("Автор",              Пользователи.АвторизованныйПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов",     НоменклатураСсылка);
		ПараметрыФайла.Вставить("ИмяБезРасширения",   ИмяИзображения);
		ПараметрыФайла.Вставить("РасширениеБезТочки", РасширениеИзображения);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		
		СозданныеИзображения.Добавить(
			РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ПоместитьВоВременноеХранилище(ДанныеИзображения)));
		
	КонецЦикла;
	
	Если СозданныеИзображения.Количество() > 0 Тогда
		
		НачатьТранзакцию();
		
		Попытка
			
			ЭлектронноеВзаимодействиеРТ.УстановитьУправляемуюБлокировкуПоСсылке(НоменклатураСсылка,
				РежимБлокировкиДанных.Исключительный);
			
			НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
			
			
			НоменклатураОбъект.ФайлКартинки          = СозданныеИзображения[0];
			НоменклатураОбъект.ОбменДанными.Загрузка = Истина;
			
			НоменклатураОбъект.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Изменение номенклатуры'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхИнформационнойБазы

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияРеквизитовВидаНоменклатурыИзФормы.
Процедура ПолучитьЗначенияРеквизитовВидаНоменклатурыИзФормы(Форма, ЗначенияРеквизитов) Экспорт
	
	ЗначенияРеквизитов.Вставить("Наименование");
	ЗначенияРеквизитов.Вставить("ТипНоменклатуры");
	ЗначенияРеквизитов.Вставить("СтавкаНДС");
	
	Для каждого ЭлементКоллекции Из ЗначенияРеквизитов Цикл
		ЗначенияРеквизитов[ЭлементКоллекции.Ключ] = Форма.Объект[ЭлементКоллекции.Ключ];
	КонецЦикла;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьТаблицуХарактеристикПоВидуНоменклатуры.
Процедура ЗаполнитьТаблицуХарактеристикПоВидуНоменклатуры(ВидНоменклатуры, ЗначенияХарактеристикТекущейБазы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка КАК ХарактеристикаБазы,
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиНоменклатурыДополнительныеРеквизиты
	|ГДЕ
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка.Владелец = &ВидНоменклатуры
	|	И НЕ ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	ЗначенияХарактеристикТекущейБазы = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьДополнительныеРеквизитыВидаНоменклатуры.
Процедура ПолучитьДополнительныеРеквизитыВидаНоменклатуры(ВидНоменклатуры, ТаблицаРеквизитов) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Свойство КАК РеквизитВидаНоменклатуры,
	|	ЛОЖЬ КАК ЯвляетсяХарактеристикой,
	|	ДополнительныеРеквизиты.Свойство.Заголовок КАК РеквизитВидаНоменклатурыПредставление
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО (ВидыНоменклатуры.Ссылка = &ВидНоменклатуры)
	|			И ДополнительныеРеквизиты.Ссылка = ВидыНоменклатуры.НаборСвойств
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Свойство,
	|	ИСТИНА,
	|	ДополнительныеРеквизиты.Свойство.Заголовок
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО (ВидыНоменклатуры.Ссылка = &ВидНоменклатуры)
	|			И ДополнительныеРеквизиты.Ссылка = ВидыНоменклатуры.НаборСвойствХарактеристик";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	ТаблицаРеквизитов = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияРеквизитовВидовНоменклатуры.
Процедура ПолучитьЗначенияРеквизитовВидовНоменклатуры(Знач ВидыНоменклатуры, Результат) Экспорт
	
	Если ТипЗнч(ВидыНоменклатуры) <> Тип("Массив") Тогда
		ВидыНоменклатуры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидыНоменклатуры);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка КАК ВидНоменклатуры,
	|	ВидыНоменклатуры.Наименование КАК Наименование,
	|	ВидыНоменклатуры.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВидыНоменклатуры.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	ВидыНоменклатуры.Ссылка В(&ВидыНоменклатуры)";
	
	Запрос.УстановитьПараметр("ВидыНоменклатуры", ВидыНоменклатуры);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияРеквизитовНоменклатуры.
Процедура ПолучитьЗначенияРеквизитовНоменклатуры(Знач Номенклатура, Результат) Экспорт
	
	Если ТипЗнч(Номенклатура) <> Тип("Массив") Тогда
		Номенклатура = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Номенклатура);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	Номенклатура.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Номенклатура.Описание КАК Описание,
	|	Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	Номенклатура.Производитель.ИНН КАК ПроизводительИНН,
	|	Номенклатура.Производитель.КПП КАК ПроизводительКПП,
	|	Номенклатура.Производитель.Наименование КАК ПроизводительНаименование,
	|	Номенклатура.Марка КАК Марка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Номенклатура)";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияДополнительныхРеквизитов.
Процедура ПолучитьЗначенияДополнительныхРеквизитов(Номенклатура, ЗначенияРеквизитов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураДополнительныеРеквизиты.Ссылка КАК ВладелецСвойств,
	|	НоменклатураДополнительныеРеквизиты.Свойство КАК Свойство,
	|	НоменклатураДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|ГДЕ
	|	НоменклатураДополнительныеРеквизиты.Ссылка В(&Номенклатура)";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	ЗначенияРеквизитов = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьВидНоменклатуры.
Процедура ПолучитьВидНоменклатуры(НоменклатураСсылка, ВидНоменклатуры) Экспорт
	
	ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатураСсылка, "ВидНоменклатуры");
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьВидНоменклатурыИзФормы.
Процедура ПолучитьВидНоменклатурыИзФормы(Форма, ВидНоменклатуры) Экспорт
	
	ВидНоменклатуры = Форма.Объект.ВидНоменклатуры;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияРеквизитовНоменклатурыИзФормы.
Процедура ПолучитьЗначенияРеквизитовНоменклатурыИзФормы(Форма, ЗначенияРеквизитов) Экспорт
	
	ЗначенияРеквизитов.Вставить("Артикул");
	ЗначенияРеквизитов.Вставить("Наименование");
	ЗначенияРеквизитов.Вставить("НаименованиеПолное");
	ЗначенияРеквизитов.Вставить("ЕдиницаИзмерения");
	ЗначенияРеквизитов.Вставить("Марка");
	ЗначенияРеквизитов.Вставить("СтавкаНДС");
	ЗначенияРеквизитов.Вставить("ВидНоменклатуры");
	ЗначенияРеквизитов.Вставить("ТипНоменклатуры");
	ЗначенияРеквизитов.Вставить("АлкогольнаяПродукция");
	ЗначенияРеквизитов.Вставить("Описание");
	
	Для каждого ЭлементКоллекции Из ЗначенияРеквизитов Цикл
		ЗначенияРеквизитов[ЭлементКоллекции.Ключ] = Форма.Объект[ЭлементКоллекции.Ключ];
	КонецЦикла;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияДополнительныхРеквизитовИзФормы.
Процедура ПолучитьЗначенияДополнительныхРеквизитовИзФормы(Форма, ЗначенияРеквизитов) Экспорт
	
	УправлениеСвойствами.ПеренестиЗначенияИзРеквизитовФормыВОбъект(Форма,Форма.Объект);
	
	ЗначенияРеквизитов = Форма.Объект.ДополнительныеРеквизиты.Выгрузить(, "Свойство, Значение");
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьНоменклатуруПоШтрихкодам.
Процедура ПолучитьНоменклатуруПоШтрихкодам(Штрихкоды, ДанныеПоШтрихкодам) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Штрихкоды.Владелец КАК Номенклатура,
	|	Штрихкоды.Характеристика КАК Характеристика,
	|	Штрихкоды.Штрихкод КАК Штрихкод,
	|	Штрихкоды.Упаковка КАК ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод В(&ШтрихКоды)
	|	И Штрихкоды.Владелец ССЫЛКА Справочник.Номенклатура";
	
	Запрос.УстановитьПараметр("ШтрихКоды", ШтрихКоды);
	
	ДанныеПоШтрихкодам = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьШтрихкоды.
// Получение штрихкодов в разрезе номенклатуры и характеристик номенклатуры. 
// Порядок строк должен порядку строк в исходной таблице (Номенклатура Возр, Характеристика Возр).
//
// Параметры:
//  НоменклатураИХарактеристики	 - ТаблицаЗначений - исходная таблица с номенклатурой и характеристиками.
//    Колонки:
//    * Номенклатура - Ссылка - ссылка на номенклатуру.
//    * Характеристика - Ссылка - ссылка на характеристику.
//  ДанныеПоШтрихкодам - ТаблицаЗначений - таблица с данными по штрихкодам.
//    Колонки:
//    * Номенклатура - Ссылка - ссылка на номенклатуру.
//    * Характеристика - Ссылка - ссылка на характеристику.
//    * Штрихкод - Строка - штрихкод.
//
Процедура ПолучитьШтрихкоды(НоменклатураИХарактеристики, ДанныеПоШтрихкодам) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураИХарактеристикиСсылки.Номенклатура КАК Номенклатура,
	|	НоменклатураИХарактеристикиСсылки.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ НоменклатураИХарактеристики
	|ИЗ
	|	&НоменклатураИХарактеристики КАК НоменклатураИХарактеристикиСсылки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """") КАК Штрихкод,
	|	НоменклатураИХарактеристики.Номенклатура КАК Номенклатура,
	|	НоменклатураИХарактеристики.Характеристика КАК Характеристика
	|ИЗ
	|	НоменклатураИХарактеристики КАК НоменклатураИХарактеристики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО НоменклатураИХарактеристики.Номенклатура = Штрихкоды.Владелец
	|			И НоменклатураИХарактеристики.Характеристика = Штрихкоды.Характеристика
	|			И (Штрихкоды.Владелец ССЫЛКА Справочник.Номенклатура)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика";
	
	Запрос.УстановитьПараметр("НоменклатураИХарактеристики", НоменклатураИХарактеристики);
	
	ДанныеПоШтрихкодам = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Формирование текста запроса номенклатуры и характеристик для последующего чтение из информационной базы.
// На основании текста запроса, на стороне библиотеки будет подготовлен итоговый запрос, 
// для порционного чтения объектов из информационной базы.
//
// Требование к запросу:
// - в результате запроса строки должны быть уникальны
// - не должны использоваться временные таблицы
// - в результате выполнения запроса должны попадать два поля: 
//		- Номенклатура (ОпределяемыйТип.НоменклатураРаботаСНоменклатурой)
//		- Характеристика (ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой)
// - если характеристики для номенклатуры не используются, в поле характеристики должно 
//   содержаться пустое значение объекта ОпределяемыйТип.ХарактеристикаРаботаСНоменклатурой
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса.
//    Поля результата запроса:
//    * Номенклатура - Ссылка - ссылка на номенклатуру.
//    * Характеристика - Ссылка - ссылка на характеристику (в запросе следует заложить проверку на NULL).
//
Процедура ТекстЗапросаНоменклатурыИХарактеристик(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО СправочникНоменклатура.ВидНоменклатуры = ХарактеристикиНоменклатуры.Владелец
	|ГДЕ
	|	НЕ СправочникНоменклатура.ЭтоГруппа
	|	И НЕ СправочникНоменклатура.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				ТОГДА НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО СправочникНоменклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец
	|ГДЕ
	|	НЕ СправочникНоменклатура.ЭтоГруппа
	|	И НЕ СправочникНоменклатура.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				ТОГДА НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьВидыНоменклатурыПоНоменклатуре.
// Получение видов номенклатуры в разрезе номенклатуры.
//
// Параметры:
//  Номенклатура	 - Массив - (Ссылка) ссылки на номенклатуру.
//  ВидыНоменклатуры - ТаблицаЗначений - данные по видам номенклатуры.
//    Колонки:
//    * Номенклатура - Ссылка - ссылка на номенклатуру.
//    * ВидНоменклатуры - Ссылка - ссылка на вид номенклатуры.
//
Процедура ПолучитьВидыНоменклатурыПоНоменклатуре(Номенклатура, ВидыНоменклатуры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В (&Номенклатура)";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	ВидыНоменклатуры = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

#КонецОбласти

#Область СопоставлениеДанных

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьОтличияВидаНоменклатурыИКатегории.
Процедура ПолучитьОтличияВидаНоменклатурыИКатегории(ДанныеКатегории, 
													ДанныеВидаНоменклатуры, 
													ТаблицаОтличийРеквизитов) Экспорт
	
	// Проверка наименования
	Если ДанныеВидаНоменклатуры.Наименование <> ДанныеКатегории.Наименование Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"Наименование", ДанныеКатегории.Наименование, ДанныеВидаНоменклатуры.Наименование);
	КонецЕсли; 
	
	// Проверка ставки НДС
	СтавкаНДССервиса = Справочники.СтавкиНДС.ПустаяСсылка();
	ПреобразоватьСтавкуНДССервиса(ДанныеКатегории.СтавкаНДС, СтавкаНДССервиса);
	
	Если ДанныеВидаНоменклатуры.СтавкаНДС <> СтавкаНДССервиса Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"СтавкаНДС", СтавкаНДССервиса, ДанныеВидаНоменклатуры.СтавкаНДС, НСтр("ru = 'Ставка НДС'"));
	КонецЕсли; 
	
	// Проверка типа номенклатуры
	ТипНоменклатурыСервиса = Перечисления.ТипыНоменклатуры.ПустаяСсылка();
	ПреобразоватьТипНоменклатурыСервиса(ДанныеКатегории.Тип, ТипНоменклатурыСервиса);
	
	Если ДанныеВидаНоменклатуры.ТипНоменклатуры <> ТипНоменклатурыСервиса Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
															"ТипНоменклатуры", 
															ТипНоменклатурыСервиса, 
															ДанныеВидаНоменклатуры.ТипНоменклатуры, 
															НСтр("ru = 'Тип номенклатуры'"));
	КонецЕсли; 
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьОтличияНоменклатуры.
Процедура ПолучитьОтличияНоменклатуры(ДанныеНоменклатурыСервиса, ДанныеНоменклатурыБазы, ТаблицаОтличийРеквизитов) Экспорт
	
	// Проверка наименования
	
	Если ДанныеНоменклатурыБазы.Наименование <> ДанныеНоменклатурыСервиса.Наименование Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"Наименование", ДанныеНоменклатурыСервиса.Наименование, ДанныеНоменклатурыБазы.Наименование);
	КонецЕсли;
	
	// Полное наименование
	
	Если ДанныеНоменклатурыБазы.НаименованиеПолное <> ДанныеНоменклатурыСервиса.Наименование Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
															"НаименованиеПолное", 
															ДанныеНоменклатурыСервиса.Наименование, 
															ДанныеНоменклатурыБазы.НаименованиеПолное, 
															НСтр("ru = 'Полное наименование'"));
	КонецЕсли;
		
	// Проверка вида номенклатуры
	
	ВидыНоменклатуры = РаботаСНоменклатурой.ВидыНоменклатурыПоИдентификаторуКатегории(
		ДанныеНоменклатурыСервиса.Категория.Идентификатор);
	
	Если ВидыНоменклатуры.Количество() Тогда
		Если ВидыНоменклатуры.Найти(ДанныеНоменклатурыБазы.ВидНоменклатуры) = Неопределено Тогда 
			РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов,
																"ВидНоменклатуры", 
																ВидыНоменклатуры[0], 
																ДанныеНоменклатурыБазы.ВидНоменклатуры, 
																НСтр("ru = 'Вид номенклатуры'"), 
																ДанныеНоменклатурыСервиса.Категория.Наименование);
		КонецЕсли;
	КонецЕсли;
		
	// Проверка единицы измерения
	ЕдиницаИзмеренияСервиса = ДанныеНоменклатурыСервиса.ЕдиницаИзмерения;
	Если Строка(ДанныеНоменклатурыСервиса.ЕдиницаИзмерения.Наименование) <> 
			ДанныеНоменклатурыБазы.ЕдиницаИзмерения.Наименование Тогда
		
		ЕдиницаИзмеренияВБазе = Неопределено;
		ЕдиницаИзмеренияВБазе(ЕдиницаИзмеренияСервиса, ЕдиницаИзмеренияВБазе);
		Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияВБазе) Тогда 
			ЕдиницаИзмеренияПоДаннымСервиса(ЕдиницаИзмеренияСервиса, ЕдиницаИзмеренияВБазе)
		КонецЕсли;
		
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
															"ЕдиницаИзмерения", 
															ЕдиницаИзмеренияВБазе, 
															ДанныеНоменклатурыБазы.ЕдиницаИзмерения.Наименование, 
															НСтр("ru = 'Единица измерения'"), 
															ЕдиницаИзмеренияСервиса.Наименование);
	КонецЕсли; 
	
	// Проверка ставки НДС
	СтавкаНДССервиса = Справочники.СтавкиНДС.ПустаяСсылка();
	ПреобразоватьСтавкуНДССервиса(ДанныеНоменклатурыСервиса.СтавкаНДС, СтавкаНДССервиса, ДанныеНоменклатурыСервиса.ВидНоменклатурыПоУмолчанию);
	
	Если ДанныеНоменклатурыБазы.СтавкаНДС <> СтавкаНДССервиса Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов,
			"СтавкаНДС", СтавкаНДССервиса, ДанныеНоменклатурыБазы.СтавкаНДС, НСтр("ru = 'Ставка НДС'"));
	КонецЕсли; 
	
	// Проверка типа номенклатуры
	ТипНоменклатурыСервиса = Перечисления.ТипыНоменклатуры.ПустаяСсылка();
	ПреобразоватьТипНоменклатурыСервиса(ДанныеНоменклатурыСервиса.Тип, ТипНоменклатурыСервиса);
	
	Попытка
		Если ТипЗнч(ДанныеНоменклатурыБазы) = Тип("Структура")
			И ДанныеНоменклатурыБазы.Свойство("ТипНоменклатуры")
			И ДанныеНоменклатурыБазы.ТипНоменклатуры <> ТипНоменклатурыСервиса Тогда
			РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
																"ТипНоменклатуры", 
																ТипНоменклатурыСервиса, 
																ДанныеНоменклатурыБазы.ТипНоменклатуры, 
																НСтр("ru = 'Тип номенклатуры'"));
		КонецЕсли;
	Исключение
		СтрокаОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	// Проверка производителя
	ПроизводительСервиса = ДанныеНоменклатурыСервиса.Производитель;
	Если ТипЗнч(ПроизводительСервиса) = Тип("Структура") 
		И ПроизводительСервиса.Свойство("ИНН")
		И ПроизводительСервиса.Свойство("КПП")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеНоменклатурыБазы, "ПроизводительИНН")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеНоменклатурыБазы, "ПроизводительКПП") Тогда
		
		Если Строка(ПроизводительСервиса.ИНН) <> ДанныеНоменклатурыБазы.ПроизводительИНН
			ИЛИ Строка(ПроизводительСервиса.КПП) <> ДанныеНоменклатурыБазы.ПроизводительКПП Тогда
			
			Производитель = Справочники.Контрагенты.ПустаяСсылка();
			НайтиПроизводителяПоДаннымСервиса(ПроизводительСервиса, Производитель);
			
			РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
				"Производитель", 
				Производитель, 
				ДанныеНоменклатурыБазы.ПроизводительНаименование, 
				НСтр("ru = 'Производитель'"), 
				ПроизводительСервиса.Наименование);
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка марки
	МаркаВБазеНаименование = ДанныеНоменклатурыБазы.Марка.Наименование;
	МаркаСервиса = ДанныеНоменклатурыСервиса.Бренд;
	Если ТипЗнч(МаркаСервиса) = Тип("Структура") И (Строка(МаркаСервиса.Наименование) <> МаркаВБазеНаименование ИЛИ 
		МаркаСервиса.Идентификатор <> ДанныеНоменклатурыБазы.Марка.ИдентификаторСервиса) Тогда
		
		МаркаВБазе = Неопределено;
		МаркаВБазе(МаркаСервиса, МаркаВБазе);
		Если Не ЗначениеЗаполнено(МаркаВБазе) Тогда 
			МаркаПоДаннымСервиса(МаркаСервиса, МаркаВБазе)
		КонецЕсли;
		
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
															"Марка",
															МаркаВБазе,
															МаркаВБазеНаименование,
															НСтр("ru = 'Марка (Бренд)'"),
															МаркаСервиса.Наименование);
	КонецЕсли;
	
	// Проверка описания
	Если ДанныеНоменклатурыБазы.Описание <> ДанныеНоменклатурыСервиса.Описание Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"Описание", ДанныеНоменклатурыСервиса.Описание, ДанныеНоменклатурыБазы.Описание);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДанных

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьВидНоменклатурыВФорме.
Процедура ЗаполнитьВидНоменклатурыВФорме(Форма, 
										ТаблицаОтличий = Неопределено, 
										ДанныеИнтерактивногоЗаполнения = Неопределено) Экспорт
	
	Если ТаблицаОтличий <> Неопределено Тогда  // заполнение при наличии изменений
		
		// Заполнение при наличии отличий после работы формы заполнения.
		
		Для каждого ЭлементКоллекции Из ТаблицаОтличий Цикл
			Если ЭлементКоллекции.Пометка Тогда
				Форма.Объект[ЭлементКоллекции.РеквизитОбъекта] = ЭлементКоллекции.НовоеЗначение;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка)
			И ДанныеИнтерактивногоЗаполнения <> Неопределено Тогда
			
			// Для новых объектов идет заполнение дополнительных реквизитов на форме для имитации их присутствия.
			
			ЗаполнитьДополнительныеРеквизитыНаФорме(Форма, ДанныеИнтерактивногоЗаполнения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьВидНоменклатуры.
Процедура ЗаполнитьВидНоменклатуры(ВидНоменклатурыСсылка, ТаблицаИзменений) Экспорт
	
	Если ТаблицаИзменений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		ЭлектронноеВзаимодействиеРТ.УстановитьУправляемуюБлокировкуПоСсылке(ВидНоменклатурыСсылка,
			РежимБлокировкиДанных.Исключительный);
		
		ВидНоменклатурыОбъект = ВидНоменклатурыСсылка.ПолучитьОбъект();
		
		Для каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
			ВидНоменклатурыОбъект[ЭлементКоллекции.РеквизитОбъекта] = ЭлементКоллекции.НовоеЗначение;
		КонецЦикла;
		
		ВидНоменклатурыОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Изменение вида номенклатуры'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьНоменклатуру.
Процедура ЗаполнитьНоменклатуру(НоменклатураСсылка, ТаблицаИзменений) Экспорт
	
	Если ТаблицаИзменений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		ЭлектронноеВзаимодействиеРТ.УстановитьУправляемуюБлокировкуПоСсылке(НоменклатураСсылка,
			РежимБлокировкиДанных.Исключительный);
		
		НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
		
		Для каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
			НоменклатураОбъект[ЭлементКоллекции.РеквизитОбъекта] = ЭлементКоллекции.НовоеЗначение;
		КонецЦикла;
		
		НоменклатураОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Заполнение номенклатуры'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьДополнительныеРеквизитыНоменклатуры.
Процедура ЗаполнитьДополнительныеРеквизитыНоменклатуры(НоменклатураСсылка, ДополнительныеРеквизиты) Экспорт
	
	Если ДополнительныеРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияДополнительныхРеквизитов = Новый ТаблицаЗначений;
	
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Свойство");
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Значение");
	
	Для каждого Реквизит Из ДополнительныеРеквизиты Цикл
		
		НоваяСтрока = ЗначенияДополнительныхРеквизитов.Добавить();
		
		НоваяСтрока.Свойство = Реквизит.РеквизитОбъекта;
		НоваяСтрока.Значение = Реквизит.НовоеЗначение;
		
	КонецЦикла;
	
	УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(НоменклатураСсылка, ЗначенияДополнительныхРеквизитов);
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьНоменклатуруВФорме.
Процедура ЗаполнитьНоменклатуруВФорме(Форма, 
									  ТаблицаИзменений = Неопределено, 
									  ДанныеИнтерактивногоЗаполнения = Неопределено) Экспорт
	
	Если ТаблицаИзменений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаИзменений.Количество() > 0 Тогда
		Форма.Модифицированность = Истина;
	Иначе
		Возврат;
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
		Форма.Объект[ЭлементКоллекции.РеквизитОбъекта] = ЭлементКоллекции.НовоеЗначение;
	КонецЦикла;
	
	Если Форма.Объект.ТипНоменклатуры  = Перечисления.ТипыНоменклатуры.ПустаяСсылка() 
		И НЕ Форма.Объект.ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка() Тогда
		
		ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.Объект.ВидНоменклатуры, 
																	"ТипНоменклатуры");
		Форма.Объект.ТипНоменклатуры = ТипНоменклатуры;
		
	КонецЕсли;
	
	// Отображение картинки на форме.
	
	Если Не ЗначениеЗаполнено(Форма.АдресКартинки)
		И ЗначениеЗаполнено(ДанныеИнтерактивногоЗаполнения)
		И ЗначениеЗаполнено(ДанныеИнтерактивногоЗаполнения[0].Изображения) Тогда
		
		Форма.Элементы.АдресКартинки.ТекстНевыбраннойКартинки = НСтр("ru = 'Изображение появится после записи'");
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьДополнительныеРеквизитыНоменклатурыВФорме.
Процедура ЗаполнитьДополнительныеРеквизитыНоменклатурыВФорме(Форма, ТаблицаИзменений) Экспорт
	
	Если ТаблицаИзменений.Количество() > 0 Тогда
		Форма.Модифицированность = Истина;
	Иначе
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Для Каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
		
		СтрокиРеквизита = Объект.ДополнительныеРеквизиты.НайтиСтроки(
			Новый Структура("Свойство", ЭлементКоллекции.РеквизитОбъекта));
		
		Если СтрокиРеквизита.Количество() = 0 Тогда
			НоваяСтрока = Объект.ДополнительныеРеквизиты.Добавить();
			НоваяСтрока.Свойство = ЭлементКоллекции.РеквизитОбъекта;
			НоваяСтрока.Значение = ЭлементКоллекции.НовоеЗначение;
		Иначе
			СтрокиРеквизита[0].Значение = ЭлементКоллекции.НовоеЗначение;
		КонецЕсли;
		
	КонецЦикла;
	
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(Форма, Объект);
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПриФормированииСпискаБлокируемыхРеквизитов.
// Процедура позволяет переопределить перечень блокируемых реквизитов. Если используется подсистема запрета редактирования,
// и для объекта настроен список блокируемых реквизитов, перечень реквизитов будет передаваться в параметре БлокируемыеРеквизиты.
//
// Параметры:
//  ПолноеИмя			 - Строка - полное имя объекта метаданных.
//  БлокируемыеРеквизиты - Массив - (Строка) массив имен блокируемых реквизитов.
//
Процедура ПриФормированииСпискаБлокируемыхРеквизитов(ПолноеИмя, БлокируемыеРеквизиты) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСХарактеристиками

// См. РаботаСНоменклатуройПереопределяемый.ТекстЗапросаХарактеристикПоВладельцу.
Процедура ТекстЗапросаХарактеристикПоВладельцу(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Характеристики.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК Характеристики
	|ГДЕ
	|	Характеристики.Владелец = &Владелец";
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьВариантИспользованияХарактеристик.
Процедура ПолучитьВариантИспользованияХарактеристик(ВидНоменклатуры, Результат) Экспорт
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ВидНоменклатуры, "ИспользованиеХарактеристик, ИспользоватьХарактеристики");	
	
	Если ЗначенияРеквизитов.ИспользоватьХарактеристики 
		И ЗначенияРеквизитов.ИспользованиеХарактеристик = 
			Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры Тогда
		
		Результат = "Индивидуальные";
		
	ИначеЕсли ЗначенияРеквизитов.ИспользоватьХарактеристики 
		И ЗначенияРеквизитов.ИспользованиеХарактеристик = 
			Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры Тогда
		
		Результат = "Общие";
		
	ИначеЕсли Не ЗначенияРеквизитов.ИспользоватьХарактеристики 
		ИЛИ ЗначенияРеквизитов.ИспользованиеХарактеристик = 
				Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать Тогда
				
		Результат = "НеВедутся";
		
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьКоличествоХарактеристик.
Процедура ПолучитьКоличествоХарактеристик(Номенклатура, Результат) Экспорт
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("ВидНоменклатуры", 			"ВидНоменклатуры");
	СтруктураРеквизитов.Вставить("ИспользованиеХарактеристик", 	"ВидНоменклатуры.ИспользованиеХарактеристик");	
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, СтруктураРеквизитов);

	Если ЗначенияРеквизитов.ИспользованиеХарактеристик = 
		Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначенияРеквизитов.ИспользованиеХарактеристик = 
		Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры Тогда
		Владелец = Номенклатура;
	Иначе
		Владелец = ЗначенияРеквизитов.ВидНоменклатуры;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(ХарактеристикиНоменклатуры.Ссылка), 0) КАК КоличествоХарактеристик
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.КоличествоХарактеристик;
	Иначе
		Результат = 0;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливаем условное оформление для характеристик номенклатуры.
//
// Параметры:
// 	 Форма - Форма - управляемая форму.
// 	 ИмяПоляВводаХарактеристики - Строка - наименование элемента формы, содержащего характеристику.
// 	 ПутьКПолюОтбора - Строка - полный путь к реквизиту.
//
Процедура УстановитьУсловноеОформлениеХарактеристикНоменклатуры(Форма,
	ИмяПоляВводаХарактеристики = "ТоварыХарактеристика",
	ПутьКПолюОтбора = "Объект.Товары.ХарактеристикиИспользуются") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаХарактеристики].Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

// Устанавливаем условное оформление для единиц измерения номенклатуры.
//
// Параметры:
// 	 Форма - Форма - управляемая форму.
// 	 ИмяПоляВводаЕдиницИзмерения - Строка - наименование элемента формы, содержащего ед. измерения номенклатуры.
// 	 ПутьКПолюОтбора - Строка - полный путь к реквизиту.
//
Процедура УстановитьУсловноеОформлениеЕдиницИзмерения(Форма, Знач ИмяПоляВводаЕдиницИзмерения, Знач ПутьКПолюОтбора) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаЕдиницИзмерения].Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СопоставлениеНоменклатурыСРубрикатором

// См. РаботаСНоменклатуройПереопределяемый.ИнициализацияЗапросаОтбораДанныхНоменклатуры.
Процедура ИнициализацияЗапросаОтбораДанныхНоменклатуры(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	СправочникНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	СправочникНоменклатура.Родитель КАК Родитель
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|ГДЕ
	|	НЕ СправочникНоменклатура.ПометкаУдаления
	|{ГДЕ
	|	СправочникНоменклатура.Ссылка.* КАК Номенклатура,
	|	СправочникНоменклатура.ВидНоменклатуры.* КАК ВидНоменклатуры,
	|	СправочникНоменклатура.Родитель.* КАК Родитель,
	|	СправочникНоменклатура.Код,
	|	СправочникНоменклатура.Артикул}
	|{ХАРАКТЕРИСТИКИ
	|	ТИП(Справочник.Номенклатура)
	|	ВИДЫХАРАКТЕРИСТИК (ВЫБРАТЬ
	|			ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка,
	|			ДополнительныеРеквизитыИСведения.Наименование + "" ("" + ДополнительныеРеквизитыИСведения.НаборСвойств.Наименование + "")"" КАК Наименование,
	|			ДополнительныеРеквизитыИСведения.ТипЗначения КАК ТипЗначения
	|		ИЗ
	|			ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения)
	|	ПОЛЕКЛЮЧА Ссылка
	|	ПОЛЕИМЕНИ Наименование
	|	ПОЛЕТИПАЗНАЧЕНИЯ ТипЗначения
	|	ЗНАЧЕНИЯХАРАКТЕРИСТИК (ВЫБРАТЬ
	|			НоменклатураДополнительныеРеквизиты.Ссылка КАК Ссылка,
	|			НоменклатураДополнительныеРеквизиты.Свойство КАК Свойство,
	|			НоменклатураДополнительныеРеквизиты.Значение КАК Значение
	|		ИЗ
	|			Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты)
	|	ПОЛЕОБЪЕКТА Ссылка
	|	ПОЛЕВИДА Свойство
	|	ПОЛЕЗНАЧЕНИЯ Значение }";
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ИнициализацияЗапросаОтбораДанныхНоменклатуры.
Процедура ИнициализацияЗапросаОтбораНоменклатурыСХарактеристиками(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ХарактеристикиНоменклатуры.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА ХарактеристикиНоменклатуры.Ссылка
	|		КОГДА ХарактеристикиВидаНоменклатуры.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА ХарактеристикиВидаНоменклатуры.Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО СправочникНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиВидаНоменклатуры
	|		ПО СправочникНоменклатура.ВидНоменклатуры = ХарактеристикиВидаНоменклатуры.Владелец
	|			И (ВидыНоменклатуры.ИспользоватьХарактеристики = ИСТИНА)
	|			И (НЕ ВидыНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО СправочникНоменклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец
	|			И (ВидыНоменклатуры.ИспользоватьХарактеристики = ИСТИНА)
	|			И (ВидыНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры))
	|ГДЕ
	|	НЕ СправочникНоменклатура.ЭтоГруппа
	|{ГДЕ
	|	СправочникНоменклатура.Ссылка.* КАК Номенклатура,
	|	СправочникНоменклатура.ВидНоменклатуры.* КАК ВидНоменклатуры,
	|	СправочникНоменклатура.Родитель.* КАК Родитель,
	|	СправочникНоменклатура.Код,
	|	СправочникНоменклатура.Артикул,
	|	(ВЫБОР
	|			КОГДА ХарактеристикиНоменклатуры.Ссылка ЕСТЬ НЕ NULL 
	|				ТОГДА ХарактеристикиНоменклатуры.Ссылка
	|			КОГДА ХарактеристикиВидаНоменклатуры.Ссылка ЕСТЬ НЕ NULL 
	|				ТОГДА ХарактеристикиВидаНоменклатуры.Ссылка
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		КОНЕЦ).* КАК Характеристика}
	|{ХАРАКТЕРИСТИКИ
	|	ТИП(Справочник.Номенклатура)
	|	ВИДЫХАРАКТЕРИСТИК (ВЫБРАТЬ
	|			ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка,
	|			ДополнительныеРеквизитыИСведения.Наименование + "" ("" + ДополнительныеРеквизитыИСведения.НаборСвойств.Наименование + "")"" КАК Наименование,
	|			ДополнительныеРеквизитыИСведения.ТипЗначения КАК ТипЗначения
	|		ИЗ
	|			ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения)
	|	ПОЛЕКЛЮЧА Ссылка
	|	ПОЛЕИМЕНИ Наименование
	|	ПОЛЕТИПАЗНАЧЕНИЯ ТипЗначения
	|	ЗНАЧЕНИЯХАРАКТЕРИСТИК (ВЫБРАТЬ
	|			НоменклатураДополнительныеРеквизиты.Ссылка КАК Ссылка,
	|			НоменклатураДополнительныеРеквизиты.Свойство КАК Свойство,
	|			НоменклатураДополнительныеРеквизиты.Значение КАК Значение
	|		ИЗ
	|			Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты)
	|	ПОЛЕОБЪЕКТА Ссылка
	|	ПОЛЕВИДА Свойство
	|	ПОЛЕЗНАЧЕНИЯ Значение }";
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ИнициализацияСпискаСопоставленияПоНоменклатуре.
Процедура ИнициализацияСпискаСопоставленияПоНоменклатуре(Список) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(СоответствиеПоНоменклатуре.ПредставлениеКатегории, ЕСТЬNULL(СоответствиеПоВидам.ПредставлениеКатегории, СоответствиеПоИерархии.ПредставлениеКатегории)) КАК Категория,
	|	ЕСТЬNULL(СоответствиеПоНоменклатуре.ИдентификаторКатегории, ЕСТЬNULL(СоответствиеПоВидам.ИдентификаторКатегории, СоответствиеПоИерархии.ИдентификаторКатегории)) КАК ИдентификаторКатегории,
	|	СоответствиеПоНоменклатуре.ПредставлениеКатегории КАК КатегорияПоНоменклатуре,
	|	СоответствиеПоНоменклатуре.ИдентификаторКатегории КАК ИдентификаторКатегорииПоНоменклатуре,
	|	СоответствиеПоВидам.ПредставлениеКатегории КАК КатегорияПоВидам,
	|	СоответствиеПоВидам.ИдентификаторКатегории КАК ИдентификаторКатегорииПоВидам,
	|	СоответствиеПоИерархии.ПредставлениеКатегории КАК КатегорияПоИерархии,
	|	СоответствиеПоИерархии.ИдентификаторКатегории КАК ИдентификаторКатегорииПоИерархии,
	|	Номенклатура.Родитель КАК Родитель,
	|	Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыБизнесСеть КАК СоответствиеПоНоменклатуре
	|		ПО Номенклатура.Ссылка = СоответствиеПоНоменклатуре.ОбъектСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыБизнесСеть КАК СоответствиеПоИерархии
	|		ПО Номенклатура.Родитель = СоответствиеПоИерархии.ОбъектСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыБизнесСеть КАК СоответствиеПоВидам
	|		ПО Номенклатура.ВидНоменклатуры = СоответствиеПоВидам.ОбъектСопоставления
	|{ГДЕ
	|	Номенклатура.Ссылка.* КАК Номенклатура,
	|	Номенклатура.ВидНоменклатуры.* КАК ВидНоменклатуры,
	|	Номенклатура.Код,
	|	Номенклатура.Артикул}
	|{ХАРАКТЕРИСТИКИ
	|	ТИП(Справочник.Номенклатура)
	|	ВИДЫХАРАКТЕРИСТИК (ВЫБРАТЬ
	|			ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка,
	|			ДополнительныеРеквизитыИСведения.Наименование + "" ("" + ДополнительныеРеквизитыИСведения.НаборСвойств.Наименование + "")"" КАК Наименование,
	|			ДополнительныеРеквизитыИСведения.ТипЗначения КАК ТипЗначения
	|		ИЗ
	|			ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения)
	|	ПОЛЕКЛЮЧА Ссылка
	|	ПОЛЕИМЕНИ Наименование
	|	ПОЛЕТИПАЗНАЧЕНИЯ ТипЗначения
	|	ЗНАЧЕНИЯХАРАКТЕРИСТИК (ВЫБРАТЬ
	|			НоменклатураДополнительныеРеквизиты.Ссылка КАК Ссылка,
	|			НоменклатураДополнительныеРеквизиты.Свойство КАК Свойство,
	|			НоменклатураДополнительныеРеквизиты.Значение КАК Значение
	|		ИЗ
	|			Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты)
	|	ПОЛЕОБЪЕКТА Ссылка
	|	ПОЛЕВИДА Свойство
	|	ПОЛЕЗНАЧЕНИЯ Значение }";
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ОсновнаяТаблица              = "Справочник.Номенклатура";
	СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
	СвойстваСписка.ТекстЗапроса                 = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Список, СвойстваСписка);
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ИнициализацияСпискаСопоставленияПоИерархии.
Процедура ИнициализацияСпискаСопоставленияПоИерархии(Список) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Наименование КАК Наименование,
	|	СоответствиеКатегорий.ПредставлениеКатегории КАК Категория,
	|	СоответствиеКатегорий.ИдентификаторКатегории КАК ИдентификаторКатегории
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыБизнесСеть КАК СоответствиеКатегорий
	|		ПО Номенклатура.Ссылка = СоответствиеКатегорий.ОбъектСопоставления
	|ГДЕ
	|	Номенклатура.ЭтоГруппа";
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ОсновнаяТаблица = "Справочник.Номенклатура";
	СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
	СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Список, СвойстваСписка);
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ИнициализацияСпискаСопоставленияНоменклатуры.
Процедура ИнициализацияСпискаСопоставленияНоменклатуры(Список) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СправочникВидыНоменклатуры.Ссылка КАК Ссылка,
	|	СправочникВидыНоменклатуры.Наименование КАК Наименование,
	|	СоответствиеКатегорий.ПредставлениеКатегории КАК Категория,
	|	СоответствиеКатегорий.ИдентификаторКатегории КАК ИдентификаторКатегории
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК СправочникВидыНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыБизнесСеть КАК СоответствиеКатегорий
	|		ПО СправочникВидыНоменклатуры.Ссылка = СоответствиеКатегорий.ОбъектСопоставления";
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ОсновнаяТаблица              = "Справочник.ВидыНоменклатуры";
	СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
	СвойстваСписка.ТекстЗапроса                 = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Список, СвойстваСписка);
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьДоступныеТипыЗначенийСвойствДляСопоставления.
Процедура ПолучитьДоступныеТипыЗначенийСвойствДляСопоставления(ТипыЗначенийСвойств) Экспорт
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПустаяСсылкаРеквизитаОбъектаДляСопоставления.
Процедура ПустаяСсылкаРеквизитаОбъектаДляСопоставления(Ссылка) Экспорт
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ИнициализацияЗапросаСоответствияЗначенийРеквизитовВидаНоменклатуры.
Процедура ИнициализацияЗапросаСоответствияЗначенийРеквизитовВидаНоменклатуры(Запрос) Экспорт
		
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьРеквизитыНоменклатурыДоступныеДляПубликации.
Процедура ПолучитьРеквизитыНоменклатурыДоступныеДляПубликации(ПубликуемыеРеквизиты) Экспорт
	
	ПубликуемыеРеквизиты = Новый Соответствие;
	
	РеквизитАртикул = Новый Структура;
	РеквизитАртикул.Вставить("Представление",    НСтр("ru = 'Артикул'"));
	РеквизитАртикул.Вставить("ПутьКДанным",      "Номенклатура.Артикул");
	РеквизитАртикул.Вставить("ТипЗначения",      Новый ОписаниеТипов("Строка"));
	РеквизитАртикул.Вставить("ПустоеЗначение",   Перечисления.РеквизитыСопоставленияНоменклатурыБизнесСеть.ПустаяСсылка());
	ПубликуемыеРеквизиты.Вставить(Перечисления.РеквизитыСопоставленияНоменклатурыБизнесСеть.Артикул, РеквизитАртикул);
	
	РеквизитВес = Новый Структура;
	РеквизитВес.Вставить("Представление",    НСтр("ru = 'Вес'"));
	РеквизитВес.Вставить("ПутьКДанным",      "Номенклатура.Вес");
	РеквизитВес.Вставить("ТипЗначения",      Новый ОписаниеТипов("Число"));
	РеквизитВес.Вставить("ПустоеЗначение",   0);
	ПубликуемыеРеквизиты.Вставить(Перечисления.РеквизитыСопоставленияНоменклатурыБизнесСеть.Вес, РеквизитВес);
	
	РеквизитПроизводитель = Новый Структура;
	РеквизитПроизводитель.Вставить("Представление",    НСтр("ru = 'Производитель'"));
	РеквизитПроизводитель.Вставить("ПутьКДанным",      "Номенклатура.Производитель");
	РеквизитПроизводитель.Вставить("ТипЗначения",      Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	РеквизитПроизводитель.Вставить("ПустоеЗначение",   Справочники.Контрагенты.ПустаяСсылка());
	ПубликуемыеРеквизиты.Вставить(Перечисления.РеквизитыСопоставленияНоменклатурыБизнесСеть.Производитель, РеквизитПроизводитель);
	
	РеквизитМарка = Новый Структура;
	РеквизитМарка.Вставить("Представление", НСтр("ru = 'Марка'"));
	РеквизитМарка.Вставить("ПутьКДанным", "Номенклатура.Марка");
	РеквизитМарка.Вставить("ТипЗначения", Новый ОписаниеТипов("СправочникСсылка.Марки"));
	РеквизитМарка.Вставить("ПустоеЗначение", Справочники.Марки.ПустаяСсылка());
	ПубликуемыеРеквизиты.Вставить(Перечисления.РеквизитыСопоставленияНоменклатурыБизнесСеть.Марка, РеквизитМарка);
	
КонецПроцедуры 

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьСопоставленныеЗначенияРеквизитаВидаНоменклатуры.
Процедура ПолучитьСопоставленныеЗначенияРеквизитаВидаНоменклатуры(Знач ОбъектСопоставления, Знач РеквизитОбъекта, Знач ТипЗначения, ЗначенияРеквизита) Экспорт
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьДанныеСопоставленияРеквизитов.
Процедура ПолучитьДанныеСопоставленияРеквизитов(ОбъектСопоставления, СопоставленныеРеквизиты, ДополнительныеРеквизиты, РасчетСоответствий) Экспорт
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ИнициализацияЗапросаЗначенийДополнительныхРеквизитов.
Процедура ИнициализацияЗапросаЗначенийДополнительныхРеквизитов(Запрос, ДополнительныеРеквизиты) Экспорт 
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Владелец КАК РеквизитОбъекта,
	|	ЗначенияСвойствОбъектов.Ссылка КАК Значение
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Владелец В(&ДополнительныеРеквизиты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Владелец,
	|	ЗначенияСвойствОбъектов.Ссылка
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектовИерархия КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Владелец В(&ДополнительныеРеквизиты)";
	
	Если ДополнительныеРеквизиты = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗначенияСвойствОбъектов.Владелец В(&ДополнительныеРеквизиты)", "ИСТИНА");
	Иначе 
		Запрос.УстановитьПараметр("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаНоменклатуры

// См. РаботаСНоменклатуройПереопределяемый.ИнициализацияЗапросаВыборкиДанныхДляВыгрузки.
Процедура ИнициализацияЗапросаВыборкиДанныхДляВыгрузки(Запрос) Экспорт
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС
	+ "ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	ОтборНоменклатуры.Характеристика КАК Характеристика,
	|	СправочникНоменклатура.Наименование КАК Наименование,
	|	ОтборНоменклатуры.Характеристика.Наименование КАК ХарактеристикаНаименование,
	|	СправочникНоменклатура.Артикул КАК Артикул,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|			ТОГДА &НДС10
	|		КОГДА СправочникНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|			ТОГДА &НДС10
	|		КОГДА СправочникНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|			ТОГДА &НДС18
	|		КОГДА СправочникНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|			ТОГДА &НДС18
	|		КОГДА СправочникНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|			ТОГДА &НДС20
	|		КОГДА СправочникНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
	|			ТОГДА &НДС20
	|		КОГДА СправочникНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|			ТОГДА &НДС0
	|		КОГДА СправочникНоменклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА &НДС0
	|	КОНЕЦ КАК СтавкаНДС,
	|	СправочникНоменклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|	СправочникНоменклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКодОКЕИ,
	|	СправочникНоменклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименованиеПолное,
	|	NULL КАК ЕдиницаИзмеренияМеждународноеСокращение,
	|	NULL КАК ЕдиницаИзмеренияБазоваяЕдиница,
	|	NULL КАК ЕдиницаИзмеренияЧислитель,
	|	NULL КАК ЕдиницаИзмеренияЗнаменатель,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|			ТОГДА &Товар
	|		ИНАЧЕ &Услуга
	|	КОНЕЦ КАК ТипНоменклатуры,
	|	СправочникНоменклатура.Описание КАК Описание,
	|	NULL КАК НаименованияДляПечатиЧека,
	|	NULL КАК ВестиУчетПоГТД,
	|	NULL КАК ПродукцияМаркируемаяДляГИСМ,
	|	NULL КАК ПодакцизныйТовар,
	|	NULL КАК СтранаПроисхождения,
	|	СправочникНоменклатура.Производитель КАК Производитель,
	|	СправочникНоменклатура.Производитель.Наименование КАК ПроизводительНаименование,
	|	СправочникНоменклатура.Производитель.ИНН КАК ПроизводительИНН,
	|	СправочникНоменклатура.Производитель.КПП КАК ПроизводительКПП,
	|	Марки.Ссылка КАК Марка,
	|	Марки.Наименование КАК МаркаНаименование,
	|	NULL КАК КоличествоВУпаковке,
	|	NULL КАК КоличествоВУпаковкеЕдиницаИзмерения,
	|	NULL КАК КоличествоВУпаковкеЕдиницаИзмеренияКодОКЕИ,
	|	NULL КАК КоличествоВУпаковкеЕдиницаИзмеренияТипИзмеряемойВеличины,
	|	NULL КАК КоличествоВУпаковкеЕдиницаИзмеренияНаименованиеПолное,
	|	NULL КАК КоличествоВУпаковкеЕдиницаИзмеренияМеждународноеСокращение,
	|	NULL КАК КоличествоВУпаковкеЕдиницаИзмеренияБазоваяЕдиница,
	|	NULL КАК КоличествоВУпаковкеЕдиницаИзмеренияЧислитель,
	|	NULL КАК КоличествоВУпаковкеЕдиницаИзмеренияЗнаменатель,
	|	СправочникНоменклатура.Вес КАК ВесЧислитель,
	|	1 КАК ВесЗнаменатель,
	|	NULL КАК ВесЕдиницаИзмерения,
	|	NULL КАК ВесЕдиницаИзмеренияКодОКЕИ,
	|	NULL КАК ВесЕдиницаИзмеренияНаименованиеПолное,
	|	NULL КАК ВесЕдиницаИзмеренияМеждународноеСокращение,
	|	NULL КАК ВесЕдиницаИзмеренияБазоваяЕдиница,
	|	NULL КАК ВесЕдиницаИзмеренияЧислитель,
	|	NULL КАК ВесЕдиницаИзмеренияЗнаменатель,
	|	NULL КАК ДлинаЧислитель,
	|	NULL КАК ДлинаЗнаменатель,
	|	NULL КАК ДлинаЕдиницаИзмерения,
	|	NULL КАК ДлинаЕдиницаИзмеренияКодОКЕИ,
	|	NULL КАК ДлинаЕдиницаИзмеренияНаименованиеПолное,
	|	NULL КАК ДлинаЕдиницаИзмеренияМеждународноеСокращение,
	|	NULL КАК ДлинаЕдиницаИзмеренияБазоваяЕдиница,
	|	NULL КАК ДлинаЕдиницаИзмеренияЧислитель,
	|	NULL КАК ДлинаЕдиницаИзмеренияЗнаменатель,
	|	NULL КАК ОбъемЧислитель,
	|	NULL КАК ОбъемЗнаменатель,
	|	NULL КАК ОбъемЕдиницаИзмерения,
	|	NULL КАК ОбъемЕдиницаИзмеренияКодОКЕИ,
	|	NULL КАК ОбъемЕдиницаИзмеренияНаименованиеПолное,
	|	NULL КАК ОбъемЕдиницаИзмеренияМеждународноеСокращение,
	|	NULL КАК ОбъемЕдиницаИзмеренияБазоваяЕдиница,
	|	NULL КАК ОбъемЕдиницаИзмеренияЧислитель,
	|	NULL КАК ОбъемЕдиницаИзмеренияЗнаменатель,
	|	NULL КАК ПлощадьЧислитель,
	|	NULL КАК ПлощадьЗнаменатель,
	|	NULL КАК ПлощадьЕдиницаИзмерения,
	|	NULL КАК ПлощадьЕдиницаИзмеренияКодОКЕИ,
	|	NULL КАК ПлощадьЕдиницаИзмеренияНаименованиеПолное,
	|	NULL КАК ПлощадьЕдиницаИзмеренияМеждународноеСокращение,
	|	NULL КАК ПлощадьЕдиницаИзмеренияБазоваяЕдиница,
	|	NULL КАК ПлощадьЕдиницаИзмеренияЧислитель,
	|	NULL КАК ПлощадьЕдиницаИзмеренияЗнаменатель
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	ОтборНоменклатуры КАК ОтборНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ОтборНоменклатуры.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО (СправочникНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Марки КАК Марки
	|		ПО СправочникНоменклатура.Марка = Марки.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтборНоменклатуры.Номенклатура КАК Номенклатура,
	|	ОтборНоменклатуры.Номенклатура.ВидНоменклатуры КАК Категория,
	|	ОтборНоменклатуры.Номенклатура.ВидНоменклатуры.Наименование КАК Наименование,
	|	ОтборНоменклатуры.Номенклатура.ВидНоменклатуры.Родитель КАК Родитель
	|ПОМЕСТИТЬ Категории
	|ИЗ
	|	ОтборНоменклатуры КАК ОтборНоменклатуры
	|ГДЕ
	|	ОтборНоменклатуры.Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтборНоменклатуры.Номенклатура,
	|	ОтборНоменклатуры.Номенклатура.ВидНоменклатуры.Родитель,
	|	ОтборНоменклатуры.Номенклатура.ВидНоменклатуры.Родитель.Наименование,
	|	ОтборНоменклатуры.Номенклатура.ВидНоменклатуры.Родитель.Родитель
	|ИЗ
	|	ОтборНоменклатуры КАК ОтборНоменклатуры
	|ГДЕ
	|	ОтборНоменклатуры.Номенклатура.ВидНоменклатуры.Родитель <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтборНоменклатуры.Номенклатура,
	|	ОтборНоменклатуры.Номенклатура.Родитель,
	|	ОтборНоменклатуры.Номенклатура.Родитель.Наименование,
	|	ОтборНоменклатуры.Номенклатура.Родитель.Родитель
	|ИЗ
	|	ОтборНоменклатуры КАК ОтборНоменклатуры
	|ГДЕ
	|	ОтборНоменклатуры.Номенклатура.Родитель <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтборНоменклатуры.Номенклатура,
	|	ОтборНоменклатуры.Номенклатура.Родитель.Родитель,
	|	ОтборНоменклатуры.Номенклатура.Родитель.Родитель.Наименование,
	|	ОтборНоменклатуры.Номенклатура.Родитель.Родитель.Родитель
	|ИЗ
	|	ОтборНоменклатуры КАК ОтборНоменклатуры
	|ГДЕ
	|	ОтборНоменклатуры.Номенклатура.Родитель.Родитель <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураДополнительныеРеквизиты.Ссылка КАК Номенклатура,
	|	NULL КАК Характеристика,
	|	НоменклатураДополнительныеРеквизиты.Свойство КАК Свойство,
	|	НоменклатураДополнительныеРеквизиты.Значение КАК Значение,
	|	ЛОЖЬ КАК РеквизитХарактеристики
	|ПОМЕСТИТЬ Свойства
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|ГДЕ
	|	НЕ НоменклатураДополнительныеРеквизиты.Свойство В (&ИсключенныеДополнительныеРеквизиты)
	|	И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ОтборНоменклатуры КАК Товары
	|			ГДЕ
	|				Товары.Номенклатура = НоменклатураДополнительныеРеквизиты.Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтборНоменклатуры.Номенклатура,
	|	ОтборНоменклатуры.Характеристика,
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство,
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение,
	|	ИСТИНА
	|ИЗ
	|	ОтборНоменклатуры КАК ОтборНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиНоменклатурыДополнительныеРеквизиты
	|		ПО ОтборНоменклатуры.Характеристика = ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка
	|ГДЕ
	|	НЕ ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство В (&ИсключенныеДополнительныеРеквизиты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	NULL,
	|	&Свойство,
	|	&Значение,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ОтборНоменклатуры КАК Товары
	|			ГДЕ
	|				Товары.Номенклатура = Номенклатура.Ссылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтборНоменклатуры.Номенклатура КАК Номенклатура,
	|	ОтборНоменклатуры.Характеристика КАК Характеристика,
	|	Штрихкоды.Упаковка КАК Упаковка,
	|	Штрихкоды.Штрихкод КАК Штрихкод
	|ПОМЕСТИТЬ Штрихкоды
	|ИЗ
	|	ОтборНоменклатуры КАК ОтборНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО ОтборНоменклатуры.Номенклатура = Штрихкоды.Владелец
	|			И ОтборНоменклатуры.Характеристика = Штрихкоды.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтборНоменклатуры.Номенклатура КАК Номенклатура,
	|	NULL КАК Характеристика,
	|	&ТНВЭД КАК Наименование,
	|	КлассификаторТНВЭД.Код,
	|	КлассификаторТНВЭД.Наименование
	|ПОМЕСТИТЬ Классификаторы
	|ИЗ
	|	ОтборНоменклатуры КАК ОтборНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
	|		ПО ОтборНоменклатуры.Номенклатура.КодТНВЭД = КлассификаторТНВЭД.Ссылка
	|ГДЕ
	|	(ЕСТЬNULL(ОтборНоменклатуры.Характеристика, ИСТИНА), ИСТИНА) В
	|		(ВЫБРАТЬ
	|			МАКСИМУМ(ЕСТЬNULL(ТаблицаУсловия.Характеристика, ИСТИНА)),
	|			ИСТИНА
	|		ИЗ
	|			ОтборНоменклатуры КАК ТаблицаУсловия
	|		ГДЕ
	|			ТаблицаУсловия.Номенклатура = ОтборНоменклатуры.Номенклатура)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтборНоменклатуры.Номенклатура,
	|	ОтборНоменклатуры.Характеристика,
	|	&КодПродукцииЕГАИС,
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция.Код,
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция.Наименование
	|ИЗ
	|	ОтборНоменклатуры КАК ОтборНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО ОтборНоменклатуры.Номенклатура = СоответствиеНоменклатурыЕГАИС.Номенклатура
	|		И ОтборНоменклатуры.Характеристика = СоответствиеНоменклатурыЕГАИС.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтборНоменклатуры.Номенклатура,
	|	ОтборНоменклатуры.Характеристика,
	|	&ИдентификаторВЕТИС,
	|	СоответствиеНоменклатурыВЕТИС.Продукция.Идентификатор,
	|	СоответствиеНоменклатурыВЕТИС.Продукция.Наименование
	|ИЗ
	|	ОтборНоменклатуры КАК ОтборНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС
	|		ПО ОтборНоменклатуры.Номенклатура = СоответствиеНоменклатурыВЕТИС.Номенклатура
	|		И ОтборНоменклатуры.Характеристика = СоответствиеНоменклатурыВЕТИС.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура";
	
	Запрос.УстановитьПараметр("КодПродукцииЕГАИС", "EGAIS_code");
	Запрос.УстановитьПараметр("ИдентификаторВЕТИС", "Mercury");
	ДобавитьРеквизитыНоменклатурыВЗапрос(Запрос);
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ФормализованныеРеквизитыНоменклатурыДляВыгрузки.
Процедура ФормализованныеРеквизитыНоменклатурыДляВыгрузки(Реквизиты) Экспорт
	
	Реквизиты.Артикул 		= Перечисления.РеквизитыСопоставленияНоменклатурыБизнесСеть.Артикул;
	Реквизиты.ВесЧислитель 	= Перечисления.РеквизитыСопоставленияНоменклатурыБизнесСеть.Вес;
	Реквизиты.Марка 		= Перечисления.РеквизитыСопоставленияНоменклатурыБизнесСеть.Марка;
	Реквизиты.Производитель = Перечисления.РеквизитыСопоставленияНоменклатурыБизнесСеть.Производитель;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ДополнительныеРеквизитыНоменклатурыДляВыгрузки.
Процедура ДополнительныеРеквизитыНоменклатурыДляВыгрузки(ДополнительныеРеквизиты, ВидыНоменклатуры) Экспорт
	
	ДополнительныеРеквизиты.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка КАК ВидНоменклатуры,
	|	ВидыНоменклатуры.Наименование + &ПояснениеВид КАК ВидНоменклатурыНаименование,
	|	ВидыНоменклатуры.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
	|	ДополнительныеРеквизиты.Ссылка КАК Свойство,
	|	ДополнительныеРеквизиты.ТипЗначения КАК ТипЗначения,
	|	ДополнительныеРеквизиты.Наименование КАК Синоним
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК Наборы
	|		ПО ВидыНоменклатуры.НаборСвойств = Наборы.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизиты
	|		ПО (Наборы.Свойство = ДополнительныеРеквизиты.Ссылка)
	|ГДЕ
	|	НЕ ДополнительныеРеквизиты.ПометкаУдаления
	|	И ВидыНоменклатуры.Ссылка В(&ВидыНоменклатуры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка,
	|	ВидыНоменклатуры.Наименование + &ПояснениеВид,
	|	ИСТИНА,
	|	ДополнительныеРеквизиты.Ссылка,
	|	ДополнительныеРеквизиты.ТипЗначения,
	|	ДополнительныеРеквизиты.Наименование
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК Наборы
	|		ПО ВидыНоменклатуры.НаборСвойствХарактеристик = Наборы.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизиты
	|		ПО (Наборы.Свойство = ДополнительныеРеквизиты.Ссылка)
	|ГДЕ
	|	НЕ ДополнительныеРеквизиты.ПометкаУдаления
	|	И ВидыНоменклатуры.Ссылка В(&ВидыНоменклатуры)
	|	И ВидыНоменклатуры.ИспользоватьХарактеристики
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка),
	|	&ПояснениеОбщие,
	|	ЛОЖЬ,
	|	ДополнительныеРеквизиты.Ссылка,
	|	ДополнительныеРеквизиты.ТипЗначения,
	|	ДополнительныеРеквизиты.Заголовок
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизиты
	|ГДЕ
	|	НЕ ДополнительныеРеквизиты.ПометкаУдаления
	|	И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК Наборы
	|			ГДЕ
	|				Наборы.Ссылка = &Набор_Справочник_Номенклатура_Общие
	|				И Наборы.Свойство = ДополнительныеРеквизиты.Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка),
	|	&ПояснениеОбщие,
	|	ЛОЖЬ,
	|	ДополнительныеРеквизиты.Ссылка,
	|	ДополнительныеРеквизиты.ТипЗначения,
	|	ДополнительныеРеквизиты.Заголовок
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизиты
	|ГДЕ
	|	НЕ ДополнительныеРеквизиты.ПометкаУдаления
	|	И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК Наборы
	|			ГДЕ
	|				Наборы.Ссылка = &Набор_Справочник_ХарактеристикиНоменклатуры_Общие
	|				И Наборы.Свойство = ДополнительныеРеквизиты.Ссылка)";
	
	Если ВидыНоменклатуры = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВидыНоменклатуры.Ссылка В(&ВидыНоменклатуры)", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("ВидыНоменклатуры", ВидыНоменклатуры);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПояснениеВид", СтрШаблон(НСтр("ru = '%1(Вид номенклатуры)';
															|en = '%1(Products kinds)'"), " "));
	Запрос.УстановитьПараметр("ПояснениеОбщие", НСтр("ru = 'Общие доп.реквизиты';
													|en = 'Overall add.attributes'"));
	Запрос.УстановитьПараметр("Набор_Справочник_Номенклатура_Общие", УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Номенклатура_Общие"));
	Запрос.УстановитьПараметр("Набор_Справочник_ХарактеристикиНоменклатуры_Общие", УправлениеСвойствами.НаборСвойствПоИмени("Справочник_ХарактеристикиНоменклатуры_Общие"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДополнительныеРеквизиты.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.СоставныеФормализованныеРеквизитыНоменклатуры.
Процедура СоставныеФормализованныеРеквизитыНоменклатуры(Реквизиты) Экспорт
	
	РеквизитыЕдиницаИзмерения = Новый Массив;
	РеквизитыЕдиницаИзмерения.Добавить("ЕдиницаИзмеренияКод");
	РеквизитыЕдиницаИзмерения.Добавить("ЕдиницаИзмеренияНаименованиеПолное");
	Реквизиты.ЕдиницаИзмерения = РеквизитыЕдиницаИзмерения;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьТоварныеГруппыНоменклатуры.
Процедура ПолучитьТоварныеГруппыНоменклатуры(ТоварныеГруппыНоменклатуры) Экспорт
	
	Номенклатура     = Новый Массив;
	ВидыНоменклатуры = Новый Массив;
	Для каждого ЭлементКоллекции Из ТоварныеГруппыНоменклатуры Цикл
		СсылкаНаОбъект = ЭлементКоллекции.Ключ;
		Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Номенклатура") Тогда
			Номенклатура.Добавить(СсылкаНаОбъект);
		ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
			ВидыНоменклатуры.Добавить(СсылкаНаОбъект);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.ОсобенностьУчета КАК ТоварнаяГруппа
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Номенклатура)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка,
	|	ВидыНоменклатуры.ОсобенностьУчета
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	ВидыНоменклатуры.Ссылка В(&ВидыНоменклатуры)";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ВидыНоменклатуры", ВидыНоменклатуры);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТоварныеГруппыНоменклатуры.Вставить(Выборка.Ссылка, ТоварнаяГруппаСервиса(Выборка.ТоварнаяГруппа));
	КонецЦикла;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПредставлениеТоварныхГрупп.
Процедура ПредставлениеТоварныхГрупп(ЗаголовокТоварныхГрупп, ТоварныеГруппыСервиса) Экспорт 
	
	ЗаголовокТоварныхГрупп = НСтр("ru = 'особенность учета'");
	
	СоответствиеТоварныхГрупп = СоответствиеТоварныхГрупп();
	
	Для каждого ТоварнаяГруппа Из ТоварныеГруппыСервиса Цикл
		ТоварныеГруппыСервиса.Вставить(ТоварнаяГруппа.Ключ, СоответствиеТоварныхГрупп.Получить(ТоварнаяГруппа.Ключ));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Разное

// См. РаботаСНоменклатуройПереопределяемый.ПриСозданииНаСервереФормаПанельАдминистрирования.
Процедура ПриСозданииНаСервереФормаПанельАдминистрирования(Форма) Экспорт
	
	Форма.Элементы.ГруппаОбновитьОКПД2.Видимость = Ложь;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПриОпределенииНастроек.
Процедура ПриОпределенииНастроек(Настройки) Экспорт
	
	Настройки.ИспользоватьВидыНоменклатуры				= Истина;
	Настройки.ИспользоватьХарактеристики				= ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	Настройки.ИспользоватьПакетноеСозданиеНоменклатуры	= Истина;
	Настройки.ИспользоватьПоискПоШтрихкодуВСервисе		= Истина;
	Настройки.СохранятьИерархиюКатегорийПриЗагрузке		= Истина;
	Настройки.ИспользоватьДополнительныеРеквизиты		= Истина;
	Настройки.ИспользоватьВыгрузкуВНациональныйКаталог	= Истина;
	Настройки.ИспользоватьПодборНоменклатурыСХарактеристиками = Истина;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьКонтактнуюИнформациюПользователя.
Процедура ПолучитьКонтактнуюИнформациюПользователя(Знач КонтактноеЛицо, Результат) Экспорт
	
	Если КонтактноеЛицо = Пользователи.СсылкаНеуказанногоПользователя() Тогда 
		Возврат;
	КонецЕсли;
	
	Результат.ФИО = Строка(КонтактноеЛицо);
	Результат.ЭлектроннаяПочта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(КонтактноеЛицо, Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	Результат.Телефон = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(КонтактноеЛицо, Справочники.ВидыКонтактнойИнформации.ТелефонПользователя);
	
КонецПроцедуры

#КонецОбласти

#Область ФормаПоискНоменклатурыПоШтрихкоду

// См. РаботаСНоменклатуройПереопределяемый.ПоискНоменклатурыПоШтрихкодуПриСозданииНаСервере.
Процедура ПоискНоменклатурыПоШтрихкодуПриСозданииНаСервере(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	// Связь характеристики и номенклатуры
	
	СвязиПараметровВыбора = Новый Массив();
	СвязиПараметровВыбора.Добавить(
		Новый СвязьПараметраВыбора("Номенклатура", 
			"Элементы.ШтрихкодыНоменклатуры.ТекущиеДанные.Номенклатура", 
			РежимИзмененияСвязанногоЗначения.НеИзменять));
	
	Элементы.ШтрихкодыНоменклатурыХарактеристика.СвязиПараметровВыбора = 
		Новый ФиксированныйМассив(СвязиПараметровВыбора);
		
	// Добавление реквизитов
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("АлкогольнаяПродукция", 
										 Новый ОписаниеТипов("Строка"), 
										 "ШтрихкодыНоменклатуры"));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЕстьАлкогольнаяПродукция", 
										 Новый ОписаниеТипов("Булево")));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИспользоватьПодключаемоеОборудование", 
										Новый ОписаниеТипов("Булево")));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПоддерживаемыеТипыПодключаемогоОборудования", 
										Новый ОписаниеТипов("Строка")));
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	// Добавление элементов
	
	НовыйЭлемент             = Форма.Элементы.Вставить("АлкогольнаяПродукция", 
														Тип("ПолеФормы"), 
														Элементы.ШтрихкодыНоменклатуры, 
														Элементы.ШтрихкодыНоменклатурыШтрихкод);
	НовыйЭлемент.Вид         = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ШтрихкодыНоменклатуры.АлкогольнаяПродукция";
	НовыйЭлемент.Заголовок   = НСтр("ru = 'Алкогольная продукция'");
	НовыйЭлемент.Видимость   = Ложь;
	
	// Настройка видимости колонки алкогольной продукции
	
	ДанныеСтроки = Новый Структура("АлкогольнаяПродукция", "");
	
	Для каждого ЭлементКоллекции Из Форма.Параметры.НеизвестныеШтрихкоды Цикл
		
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, ЭлементКоллекции);
		
		Если ЗначениеЗаполнено(ДанныеСтроки.АлкогольнаяПродукция) Тогда
			Форма.ЕстьАлкогольнаяПродукция = Истина;
			НовыйЭлемент.Видимость = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПоискНоменклатурыПоШтрихкодуОбработкаПроверкиЗаполнения.
Процедура ПоискНоменклатурыПоШтрихкодуОбработкаПроверкиЗаполнения(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ШтрихкодыНоменклатуры = Форма.ШтрихкодыНоменклатуры;
	СтруктураВыгрузки = Новый Структура("Зарегистрирован", Ложь);
	Штрихкоды = ШтрихкодыНоменклатуры.Выгрузить(СтруктураВыгрузки,"Штрихкод").ВыгрузитьКолонку("Штрихкод");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Владелец КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Владелец.Наименование КАК НоменклатураПредставление,
	|	ШтрихкодыНоменклатуры.Характеристика.Наименование КАК ХарактеристикаПредставление
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод В(&Штрихкоды)";
	
	Запрос.УстановитьПараметр("Штрихкоды", Штрихкоды);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда // Штрихкод уже записан в БД
		
		СтрокаТЧ = ШтрихкодыНоменклатуры.НайтиСтроки(Новый Структура("Штрихкод", СокрЛП(Выборка.Штрихкод)))[0];
		
		ХарактеристикаПредставление = "";
		Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
			ХарактеристикаПредставление = СтрШаблон(НСтр("ru='с характеристикой %1'"), 
													Выборка.ХарактеристикаПредставление);
		КонецЕсли;
		
		ОписаниеОшибки = СокрЛП(СтрШаблон(НСтр("ru='Такой штрихкод уже назначен для номенклатуры %1 %2'"), 
										  Выборка.НоменклатураПредставление, 
										  ХарактеристикаПредставление));
		
		Поле = "ШтрихкодыНоменклатуры["+ШтрихкодыНоменклатуры.Индекс(СтрокаТЧ)+"].Штрихкод";
		ОбщегоНазначения.СообщитьПользователю(
			ОписаниеОшибки,
			,
			"ШтрихкодыНоменклатуры["+ШтрихкодыНоменклатуры.Индекс(СтрокаТЧ)+"].Штрихкод",
			,
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗарегистрироватьШтрихкоды.
Процедура ЗарегистрироватьШтрихкоды(ШтрихкодыНоменклатуры) Экспорт
	
	Блокировка = Новый БлокировкаДанных();
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.Штрихкоды");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Блокировка.Заблокировать();
	
	Для Каждого СтрокаШтрихкода Из ШтрихкодыНоменклатуры Цикл
		
		МенеджерЗаписи = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Штрихкод = СтрокаШтрихкода.Штрихкод;
		МенеджерЗаписи.ПредставлениеШтрихкода = СтрокаШтрихкода.Штрихкод;
		МенеджерЗаписи.Владелец = СтрокаШтрихкода.Номенклатура;
		МенеджерЗаписи.Характеристика = СтрокаШтрихкода.Характеристика;
		МенеджерЗаписи.ТипШтрихкода = ПодключаемоеОборудованиеРТ.ТипШтрихкода(
			СтрокаШтрихкода.Штрихкод);
		МенеджерЗаписи.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПоискНоменклатурыПоШтрихкодуПослеЗагрузкиНоменклатуры.
Процедура ПоискНоменклатурыПоШтрихкодуПослеЗагрузкиНоменклатуры(СтрокаТаблицыШтрихкодов, НоменклатураСсылка) Экспорт
	
	СтрокаТаблицыШтрихкодов.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатураСсылка, 
																						 "ЕдиницаИзмерения");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеФункцииИПроцедуры

Процедура ПреобразоватьСтавкуНДССервиса(Знач Значение, Ссылка, ВидНоменклатурыПоУмолчанию = Неопределено)
	
	Если ЗначениеЗаполнено(ВидНоменклатурыПоУмолчанию) Тогда
		Если ТипЗнч(ВидНоменклатурыПоУмолчанию) = Тип("Структура")
			И ВидНоменклатурыПоУмолчанию.Свойство("ВидНоменклатуры") Тогда
			
			Если ЗначениеЗаполнено(ВидНоменклатурыПоУмолчанию.ВидНоменклатуры) И
				ЗначениеЗаполнено(ВидНоменклатурыПоУмолчанию.ВидНоменклатуры.СтавкаНДС) Тогда
				
				Ссылка = ВидНоменклатурыПоУмолчанию.ВидНоменклатуры.СтавкаНДС;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтандартнаяСтавкаНДС = Справочники.СтавкиНДС.ПолучитьСтавкуНДСПоЗначению(12);
	
	Ссылка = СтандартнаяСтавкаНДС;
	
	Если Значение = "10" Или Значение = "18" Или Значение = "20" Тогда
		Ссылка = СтандартнаяСтавкаНДС;
	Иначе
		Ссылка = Справочники.СтавкиНДС.ПолучитьСтавкуНДСБезНДС();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПреобразоватьТипНоменклатурыСервиса(Знач Значение, Результат)
	
	Если Значение = "Услуга" Тогда 
		Результат = Перечисления.ТипыНоменклатуры.Услуга;
	ИначеЕсли Значение = "Товар" Тогда 
		Результат = Перечисления.ТипыНоменклатуры.Товар;
	Иначе 
		Результат = Перечисления.ТипыНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПреобразоватьОсобенностьУчетаНоменклатурыСервиса(ИдентификаторКатегории, Результат)
	
	Результат = Перечисления.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета;
	ТоварнаяГруппа = РаботаСНоменклатурой.ТоварнаяГруппаПоКатегорииСервиса(ИдентификаторКатегории);
	Если Не ЗначениеЗаполнено(ТоварнаяГруппа) Тогда
		Возврат;
	КонецЕсли;
	
	СвязьОсобенностейУчетаИФО = Перечисления.ОсобенностиУчетаНоменклатуры.СвязьОсобенностейУчетаИФО();
	
	Для Каждого ЗначениеПеречисления Из Перечисления.ОсобенностиУчетаНоменклатуры Цикл
		
		ОсобенностьВключена = Ложь;
		ИменаФО = СвязьОсобенностейУчетаИФО.Получить(ЗначениеПеречисления);
		
		Если ИменаФО <> Неопределено Тогда
			МассивИменФО = СтрРазделить(ИменаФО, ",");
			Для Каждого СтрМас Из МассивИменФО Цикл
				Если Не ПолучитьФункциональнуюОпцию(СтрМас) Тогда
					ОсобенностьВключена = Ложь;
					Прервать;
				Иначе
					ОсобенностьВключена = Истина;
					ЕстьОсобенностьПоТоварам = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ИмяЗначенияПеречисления = ОбщегоНазначения.ИмяЗначенияПеречисления(ЗначениеПеречисления);
		Если ОсобенностьВключена И ИмяЗначенияПеречисления = ТоварнаяГруппа Тогда
			Результат = ЗначениеПеречисления;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЕдиницаИзмеренияПоДаннымСервиса(ЕдиницаИзмеренияСервиса, ЕдиницаИзмеренияСсылка) 
	
	// Поиск элемента в базе
	
	ЕдиницаИзмеренияВБазе(ЕдиницаИзмеренияСервиса, ЕдиницаИзмеренияСсылка);
	
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	// Создание элемента если не найдено
	
	ЕдиницаИзмеренияОбъект = Справочники.БазовыеЕдиницыИзмерения.СоздатьЭлемент();
	
	ЕдиницаИзмеренияОбъект.Наименование = СокрЛП(ЕдиницаИзмеренияСервиса.Наименование);
	
	Если ЕдиницаИзмеренияСервиса.Свойство("ОКЕИ") Тогда
		ЕдиницаИзмеренияОбъект.Код = ЕдиницаИзмеренияСервиса.ОКЕИ;
	КонецЕсли;
	
	Попытка
		ЕдиницаИзмеренияОбъект.Записать();
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой.Создание единицы измерения'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат;
		
	КонецПопытки;
	
	ЕдиницаИзмеренияСсылка = ЕдиницаИзмеренияОбъект.Ссылка;
	
КонецПроцедуры

Процедура ЕдиницаИзмеренияВБазе(ЕдиницаИзмеренияСервиса, ЕдиницаИзмеренияСсылка)
	
	СсылкаНаЕдиницуИзмерения = Неопределено;
	
	Если ЕдиницаИзмеренияСервиса.Свойство("ОКЕИ")
		И ЗначениеЗаполнено(ЕдиницаИзмеренияСервиса.ОКЕИ) Тогда
		СсылкаНаЕдиницуИзмерения = ЭлектронноеВзаимодействиеРТ.НайтиСсылкуНаОбъектПоРеквизиту("БазовыеЕдиницыИзмерения", 
			"Код", ЕдиницаИзмеренияСервиса.ОКЕИ);
	Иначе
		
		НаименованиеЕдиницыИзмерения = СокрЛП(ЕдиницаИзмеренияСервиса.Наименование);
		Если НЕ ЗначениеЗаполнено(НаименованиеЕдиницыИзмерения) Тогда
			Возврат;
		КонецЕсли;
		СсылкаНаЕдиницуИзмерения = ЭлектронноеВзаимодействиеРТ.НайтиСсылкуНаОбъектПоРеквизиту("БазовыеЕдиницыИзмерения", 
				"Наименование", НаименованиеЕдиницыИзмерения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаЕдиницуИзмерения) Тогда
		ЕдиницаИзмеренияСсылка = СсылкаНаЕдиницуИзмерения;
	КонецЕсли;
	
КонецПроцедуры

Процедура МаркаПоДаннымСервиса(МаркаСервиса, МаркаСсылка) 
	
	// Поиск элемента в базе
	
	Если Не ЗначениеЗаполнено(МаркаСервиса) Тогда
		Возврат;
	КонецЕсли;
	
	МаркаВБазе(МаркаСервиса, МаркаСсылка);
	
	Если ЗначениеЗаполнено(МаркаСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	// Создание элемента если не найдено
	
	МаркаОбъект = Справочники.Марки.СоздатьЭлемент();
	
	МаркаОбъект.Наименование = СокрЛП(МаркаСервиса.Наименование);
	
	Если МаркаСервиса.Свойство("Идентификатор") Тогда
		МаркаОбъект.ИдентификаторСервиса = СокрЛП(МаркаСервиса.Идентификатор);
	КонецЕсли;
	
	Попытка
		МаркаОбъект.Записать();
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Работа с номенклатурой. Создание марки'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат;
		
	КонецПопытки;
	
	МаркаСсылка = МаркаОбъект.Ссылка;
	
КонецПроцедуры

Процедура МаркаВБазе(МаркаСервиса, МаркаСсылка)
	
	СсылкаНаМарку 			= Неопределено;
	ИдентификаторСервиса 	= ?(МаркаСервиса.Свойство("Идентификатор"), МаркаСервиса.Идентификатор, Неопределено);
	НаименованиеМарки		= ?(МаркаСервиса.Свойство("Наименование"), СокрЛП(МаркаСервиса.Наименование), Неопределено);
	
	Если ЗначениеЗаполнено(ИдентификаторСервиса) Тогда
		СсылкаНаМарку = ЭлектронноеВзаимодействиеРТ.НайтиСсылкуНаОбъектПоРеквизиту("Марки", 
				"ИдентификаторСервиса", МаркаСервиса.Идентификатор);
	КонецЕсли;
	Если ЗначениеЗаполнено(НаименованиеМарки) И НЕ ЗначениеЗаполнено(СсылкаНаМарку) Тогда
		СсылкаНаМарку = ЭлектронноеВзаимодействиеРТ.НайтиСсылкуНаОбъектПоРеквизиту("Марки", 
				"Наименование", НаименованиеМарки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаМарку) Тогда
		МаркаСсылка = СсылкаНаМарку;
		РеквизитыМарки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МаркаСсылка, "Наименование, ИдентификаторСервиса");
		Если НЕ РеквизитыМарки.Наименование = НаименованиеМарки ИЛИ НЕ РеквизитыМарки.ИдентификаторСервиса = ИдентификаторСервиса Тогда
			МаркаОбъект = МаркаСсылка.ПолучитьОбъект();
			МаркаОбъект.Наименование = НаименованиеМарки;
			МаркаОбъект.ИдентификаторСервиса = ИдентификаторСервиса;
			МаркаОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияРеквизитовХарактеристики(ЗначенияДополнительныхРеквизитов, Характеристика)
	
	ЗначенияДополнительныхРеквизитов.Очистить();
	
	Для Каждого Свойство Из Характеристика.ДополнительныеРеквизиты Цикл
		
		Если Не ЗначениеЗаполнено(Свойство.РеквизитИнформационнойБазы) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ЗначенияДополнительныхРеквизитов.Добавить();
		
		НоваяСтрока.Свойство = Свойство.РеквизитИнформационнойБазы;
		НоваяСтрока.Значение = РаботаСНоменклатурой.ЗначениеДополнительногоРеквизита(Свойство);
		
	КонецЦикла;
	
КонецПроцедуры

// Получение двоичных данных по адресу URL, например изображения.
//
// Параметры:
//  АдресURL - Строка - адрес хранения данных.
// 
// Возвращаемое значение:
//  ДвоичныеДанные - полученные данные.
//
Функция ДвоичныеДанныеПоАдресуURL(АдресURL)
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресURL);
	
	ПараметрыСоединения = Новый Структура("Протокол, 
										  |ИмяСервера, 
										  |АдресРесурса, 
										  |Порт, 
										  |Таймаут, 
										  |ЗащищенноеСоединение, 
										  |Прокси");
	ПараметрыСоединения.Протокол     = СтруктураURI.Схема;
	ПараметрыСоединения.ИмяСервера   = СтруктураURI.Хост;
	ПараметрыСоединения.АдресРесурса = СтруктураURI.ПутьНаСервере;
	ПараметрыСоединения.Порт         = СтруктураURI.Порт;
	ПараметрыСоединения.Таймаут      = 30;
	ПараметрыСоединения.ЗащищенноеСоединение = ПараметрыСоединения.Протокол = "https";
	ПараметрыСоединения.Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(ПараметрыСоединения.Протокол);
	
	ЗащищенноеСоединение = Неопределено;
	Если ПараметрыСоединения.ЗащищенноеСоединение Тогда
		СертификатыУдостоверяющихЦентров = Неопределено;
		Если Не ОбщегоНазначения.ЭтоLinuxСервер() И Не ОбщегоНазначения.РазделениеВключено() Тогда
			// Ошибка фреша при работе с веб сервисами. 
			// Не работает проверка доверенных сертификатов при установке соединения.
			СертификатыУдостоверяющихЦентров = Новый СертификатыУдостоверяющихЦентровWindows;
		КонецЕсли;
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(, 
			СертификатыУдостоверяющихЦентров);
	КонецЕсли;
	
	Попытка
		Соединение = Новый HTTPСоединение(ПараметрыСоединения.ИмяСервера,
			ПараметрыСоединения.Порт,,,,ПараметрыСоединения.Таймаут, ЗащищенноеСоединение);
	Исключение
		ВызватьИсключение НСтр("ru = 'Ошибка установки соединения при получении изображения'");
	КонецПопытки;
	
	HTTPЗапрос = Новый HTTPЗапрос(ПараметрыСоединения.АдресРесурса);
	
	Попытка
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	Исключение
		ВызватьИсключение НСтр("ru = 'Ошибка получения изображения'");
	КонецПопытки;
	
	Возврат HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
	
КонецФункции

// При объединении категорий в одну, метода заполняет представления дополнительных реквизитов на форма.
//
// Параметры:
//  Форма							 - УправляемаяФорма - форма вида номенклатуры.
//  ДанныеИнтерактивногоЗаполнения	 - ТаблицаЗначения - см. РаботаСНоменклатурой.ДанныеКатегорийСервиса.
//
Процедура ЗаполнитьДополнительныеРеквизитыНаФорме(Форма, ДанныеИнтерактивногоЗаполнения)
	
	Объект = Форма.Объект;
	
	// Заполнение наименование на основании всех выбранных категорий при множественной привязке.
	
	Если ДанныеИнтерактивногоЗаполнения.Количество() > 1
		И Не ЗначениеЗаполнено(Объект.Наименование) Тогда
		
		Объект.Наименование =
			СтрСоединить(ДанныеИнтерактивногоЗаполнения.ВыгрузитьКолонку("Наименование"), "; ");
	КонецЕсли;
	
	// Заполнение дополнительных реквизитов и реквизитов характеристик.
	
	ДанныеДополнительныхРеквизитов = РаботаСНоменклатурой.ОбъединитьДанныеДополнительныхРеквизитов(
		ДанныеИнтерактивногоЗаполнения);
	
	Если ДанныеДополнительныхРеквизитов.ДополнительныеРеквизиты.Количество() > 0 Тогда
		
		Если Форма.Элементы.Найти("НаборСвойств") <> Неопределено Тогда
			Форма.Элементы.НаборСвойств.ПодсказкаВвода = Объект.Наименование;
		КонецЕсли;
		
		Если Форма.Элементы.Найти("НаборСвойств1") <> Неопределено Тогда
			Форма.Элементы.НаборСвойств1.ПодсказкаВвода = Объект.Наименование;
		КонецЕсли;
	
	КонецЕсли;
	
	Если ДанныеДополнительныхРеквизитов.Характеристики.ДополнительныеРеквизиты.Количество() > 0 Тогда
		
		Если Форма.Элементы.Найти("НаборСвойствХарактеристик") <> Неопределено Тогда
			Форма.Элементы.НаборСвойствХарактеристик.ПодсказкаВвода = 
				Объект.Наименование + НСтр("ru = '(Для характеристик)'");
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиПроизводителяПоДаннымСервиса(ДанныеПроизводителя, Производитель)
	
	Если ДанныеПроизводителя = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ДанныеПроизводителя.ИНН) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.КПП = &КПП";
	
	Запрос.УстановитьПараметр("ИНН", ДанныеПроизводителя.ИНН);
	Запрос.УстановитьПараметр("КПП", ДанныеПроизводителя.КПП);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		
		Выборка.Следующий();
		Производитель = Выборка.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры

// Дополнение в запрос источников по дополнительным реквизитам номенклатуры.
//
// Параметры:
//   Запрос - Запрос - основной запрос сбора данных.
//
Процедура ДобавитьРеквизитыНоменклатурыВЗапрос(Запрос)
	
	БлокРеквизитовШаблон = "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	NULL,
	|	&Свойство,
	|	&Значение,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ОтборНоменклатуры КАК Товары
	|			ГДЕ
	|				Товары.Номенклатура = Номенклатура.Ссылка)";
	
	ДоступныеДляПубликацииРеквизиты = Новый Соответствие;
	ПолучитьРеквизитыНоменклатурыДоступныеДляПубликации(ДоступныеДляПубликацииРеквизиты);
	
	МассивПодзапросов = Новый Массив;
	СчетчикРеквизитов = 0;
	Для каждого СвойстваРеквизита Из ДоступныеДляПубликацииРеквизиты Цикл
		
		Если Запрос.Параметры.ИсключенныеДополнительныеРеквизиты.Найти(СвойстваРеквизита.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексСтрокой = XMLСтрока(СчетчикРеквизитов);
		ПутьКДанным   = СвойстваРеквизита.Значение.ПутьКДанным;
		СчетчикРеквизитов = СчетчикРеквизитов + 1;
		ТекстПодзапроса = БлокРеквизитовШаблон;
		
		ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&Значение", ПутьКДанным);
		ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&Свойство", "&Свойство" + ИндексСтрокой);
		
		Запрос.УстановитьПараметр("Свойство" + ИндексСтрокой, СвойстваРеквизита.Ключ);
		
		Если СвойстваРеквизита.Значение.Свойство("ПустоеЗначение") Тогда
			ТекстПодзапроса = ТекстПодзапроса + Символы.ПС
				+ "И НЕ "+ ПутьКДанным + " = &ПустоеЗначение" + ИндексСтрокой;
			Запрос.УстановитьПараметр("ПустоеЗначение" + ИндексСтрокой,
				СвойстваРеквизита.Значение.ПустоеЗначение);
		КонецЕсли;
		
		МассивПодзапросов.Добавить(ТекстПодзапроса);
		
	КонецЦикла;
	
	БлокРеквизитовПодстановка = СтрСоединить(МассивПодзапросов, Символы.ПС + Символы.ПС);
	
	// Если реквизиты не найдены, удалить БлокРеквизитовШаблон.
	Если ПустаяСтрока(БлокРеквизитовПодстановка) Тогда
		БлокРеквизитовПодстановка = "";
	КонецЕсли;
	
	Если СтрЧислоВхождений(Запрос.Текст, БлокРеквизитовШаблон) = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка компоновки запроса получения данных номенклатуры.'");
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, БлокРеквизитовШаблон, БлокРеквизитовПодстановка);
	
КонецПроцедуры

Функция ПолучитьДанныеШтрихкода(Штрихкод) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Владелец КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод";
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДанныеШтрихкода = Новый Структура("Номенклатура, Характеристика, Упаковка");
		ЗаполнитьЗначенияСвойств(ДанныеШтрихкода, Выборка);
		Возврат ДанныеШтрихкода;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ТоварнаяГруппаСервиса(ОсобенностьУчета)

	Возврат СоответствиеТоварныхГрупп().Получить(ОсобенностьУчета);

КонецФункции

Функция СоответствиеТоварныхГрупп()
	
	СоответствиеТоварныхГрупп = Новый Соответствие;
	СоответствиеТоварныхГрупп.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.Велосипеды, "Велосипеды");
	СоответствиеТоварныхГрупп.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.Духи, "Духи");
	СоответствиеТоварныхГрупп.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.КреслаКоляски, "КреслаКоляски");
	СоответствиеТоварныхГрупп.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность, "ЛегкаяПромышленность");
	СоответствиеТоварныхГрупп.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС, "МолочнаяПродукция");
	СоответствиеТоварныхГрупп.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС, "МолочнаяПродукция");
	СоответствиеТоварныхГрупп.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция, "ОбувнаяПродукция");
	СоответствиеТоварныхГрупп.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция, "ТабачнаяПродукция");
	СоответствиеТоварныхГрупп.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.Фотоаппараты, "Фотоаппараты");
	СоответствиеТоварныхГрупп.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.Шины, "Шины");
	
	СоответствиеТоварныхГрупп.Вставить("Велосипеды", Перечисления.ОсобенностиУчетаНоменклатуры.Велосипеды);
	СоответствиеТоварныхГрупп.Вставить("Духи", Перечисления.ОсобенностиУчетаНоменклатуры.Духи);
	СоответствиеТоварныхГрупп.Вставить("КреслаКоляски", Перечисления.ОсобенностиУчетаНоменклатуры.КреслаКоляски);
	СоответствиеТоварныхГрупп.Вставить("ЛегкаяПромышленность", Перечисления.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность);
	СоответствиеТоварныхГрупп.Вставить("МолочнаяПродукция", Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС);
	СоответствиеТоварныхГрупп.Вставить("ОбувнаяПродукция", Перечисления.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция);
	СоответствиеТоварныхГрупп.Вставить("ТабачнаяПродукция", Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция);
	СоответствиеТоварныхГрупп.Вставить("Фотоаппараты", Перечисления.ОсобенностиУчетаНоменклатуры.Фотоаппараты);
	СоответствиеТоварныхГрупп.Вставить("Шины", Перечисления.ОсобенностиУчетаНоменклатуры.Шины);
	
	Возврат СоответствиеТоварныхГрупп;
	
КонецФункции

#КонецОбласти
