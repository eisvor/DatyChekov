////////////////////////////////////////////////////////////////////////////////
// ПодключаемоеОборудованиеРТВызовСервера содержит процедуры и функции 
// для работы с подключаемым оборудованием.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПроцедурыПоискаИОпределенияТиповШтрихкодов

// Подготовка данных для выбора.
//
// Параметры:
//  СтруктураРезультат - Структура - структура данных для выбора.
//
Процедура ПодготовитьДанныеДляВыбора(СтруктураРезультат) Экспорт
	
	ПодключаемоеОборудованиеРТ.ПодготовитьДанныеДляВыбора(СтруктураРезультат);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработкиРаспределенияВыручкиПоСекциямФР

// Возвращает распределение выручки по секциям фискального регистратора.
//
// Параметры:
//  НастройкаРаспределения - СправочникСсылка.НастройкиРаспределенияВыручкиПоСекциямФР - настройки распределения выручка.
//
// Возвращаемое значение:
//  Структура - распределение выручки по секциям.
//
Функция РаспределениеВыручкиПоСекциям(НастройкаРаспределения) Экспорт
	
	Результат = Новый Структура;   
	
	СоответствиеВидовНоменклатурыСекциям = Новый Соответствие();
	СоответствиеДоговоровСекциям = Новый Соответствие();
	Результат.Вставить("НомерСекцииДляПриходныхКассовыхОрдеров"  , 2);
	Результат.Вставить("НомерСекцииДляРасходныхКассовыхОрдеров"  , 2);
	Результат.Вставить("НомерСекцииДляОплатыКартой"              , 2);
	Результат.Вставить("НомерСекцииДляВозвратаОплатыНаКарту"     , 2);
	Результат.Вставить("НомерСекцииПоУмолчаниюДляФискальныхЧеков", 1);
	Результат.Вставить("СоответствиеВидовНоменклатурыСекциям", СоответствиеВидовНоменклатурыСекциям);
	Результат.Вставить("СоответствиеДоговоровСекциям", СоответствиеДоговоровСекциям);
	
	Распределение = НастройкаРаспределения;
	
	Если (Распределение = Неопределено) Или (Распределение = Справочники.НастройкиРаспределенияВыручкиПоСекциямФР.ПустаяСсылка()) Тогда
		// Получаем распределение по умолчанию.
		Распределение = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.НастройкиРаспределенияВыручкиПоСекциямФР.РаспределениеПоУмолчанию");
		
		Если НЕ ЗначениеЗаполнено(Распределение) Тогда 
			Возврат Результат;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.НомерСекцииДляПриходныхКассовыхОрдеров   = Распределение.НомерСекцииДляПриходныхКассовыхОрдеров; 
	Результат.НомерСекцииДляРасходныхКассовыхОрдеров   = Распределение.НомерСекцииДляРасходныхКассовыхОрдеров;
	Результат.НомерСекцииДляОплатыКартой               = Распределение.НомерСекцииДляОплатыКартой;
	Результат.НомерСекцииДляВозвратаОплатыНаКарту      = Распределение.НомерСекцииДляВозвратаОплатыНаКарту;
	Результат.НомерСекцииПоУмолчаниюДляФискальныхЧеков = Распределение.НомерСекцииПоУмолчаниюДляФискальныхЧеков;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаспределениеВыручкиПоСекциямФР.НомерСекции КАК НомерСекции,
	|	РаспределениеВыручкиПоСекциямФР.ВидНоменклатуры КАК ВидНоменклатуры
	|ИЗ
	|	Справочник.НастройкиРаспределенияВыручкиПоСекциямФР.СоответствиеВидовНоменклатурыСекциям КАК РаспределениеВыручкиПоСекциямФР
	|ГДЕ РаспределениеВыручкиПоСекциямФР.Ссылка = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", Распределение.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат.СоответствиеВидовНоменклатурыСекциям.Вставить(ВыборкаДетальныеЗаписи.ВидНоменклатуры, ВыборкаДетальныеЗаписи.НомерСекции);
	КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаспределениеВыручкиПоСекциямФР.НомерСекции КАК НомерСекции,
	|	РаспределениеВыручкиПоСекциямФР.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ИЗ
	|	Справочник.НастройкиРаспределенияВыручкиПоСекциямФР.СоответствиеДоговоровПлатежныхАгентовСекциям КАК РаспределениеВыручкиПоСекциямФР
	|ГДЕ РаспределениеВыручкиПоСекциямФР.Ссылка = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", Распределение.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.СоответствиеДоговоровСекциям.Вставить(Выборка.ДоговорКонтрагента, Выборка.НомерСекции);
	КонецЦикла;
	Возврат Результат;

КонецФункции

// Записывает признак пробития чека в документ.
//
// Параметры:
//  ДокументыНаККМ - ДокументСсылка - документ для пробития.
//  НомерЧекаККМ - Число - номер чека ККМ.
//
// Возвращаемое значение:
//  Булево - признак выполнения операции.
//
Функция ПровестиПробитыйДокумент(ДокументНаККМ, НомерЧекаККМ) Экспорт
	
	Возврат ПодключаемоеОборудованиеРТ.ПровестиПробитыйДокумент(ДокументНаККМ, НомерЧекаККМ);
	
КонецФункции
// Подготавливает данные для печати чека на ФР.
// 
// Параметры:
//  ДокументыНаККМ - ДокументСсылка - документ для пробития.
//  РаспределениеВыручкиПоСекциям - 
//  НомерЧекаККМ - Число - номер чека ККМ.
//
Функция ВходящиеДанныеДляФР(ДокументНаККМ, РаспределениеВыручкиПоСекциям, НомерЧека) Экспорт
	
	Возврат ПодключаемоеОборудованиеРТ.ВходящиеДанныеДляФР(ДокументНаККМ, РаспределениеВыручкиПоСекциям, НомерЧека);;
	
КонецФункции

// Возвращает значение реквизита документа "СуммаДокумента".
//
// Параметры:
//  ДокументНаККМ - ДокументСсылка - документ по которому необходимо получить сумму.
//
// Возвращаемое значение:
//  Число - сумма документа.
// 
Функция СуммаДокумента(ДокументНаККМ) Экспорт
	
	Возврат ДокументНаККМ.СуммаДокумента;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыПоискаИОпределенияПоМагнитномуКоду

// Возвращает список кодов карты, полученный из данных
// карты с применением форматов записи кодов магнитных карт.
// 
// Параметры:
//  ДанныеКарты - Строка - данные магнитной карты.
//
// Возвращаемое значение:
//  СписокЗначений - таблица кодов карты.
//
Функция ПолучитьКодыКарты(ДанныеКарты) Экспорт
	
	Возврат ПодключаемоеОборудованиеРТ.ПолучитьКодыКарты(ДанныеКарты);
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеФункцииИПроцедурыОбработкиСобытийПоискаПоШКМКИРаботыСТСД

// Сформировать массив товаров по массиву штрихкодов.
// 
// Параметры:
//  ДанныеШтрихкодов - Массив - данные штрихкодов.
//  ОбновитьКоличество - Булево - признак необходимости обновления количества.
//
// Возвращаемое значение:
//  Структура - структруа сформированных товаров.
//
Функция СформироватьМассивТоваров(ДанныеШтрихкодов, ОбновитьКоличество) Экспорт
	
	Возврат ПодключаемоеОборудованиеРТ.СформироватьМассивТоваров(ДанныеШтрихкодов, ОбновитьКоличество);
	
КонецФункции

// Обрабатывает данные по номенклатуре из ТСД
//
// Параметры:
//  СтруктураПараметров - Структура - структура параметров свертки данных.
//
// Возвращаемое значение:
//  Массив - массив свернутых данных по номенклатуре.
// 
Функция СвернутьДанныеПоНоменклатуреИзТСДСервер(СтруктураПараметров) Экспорт
	
	Возврат ПодключаемоеОборудованиеРТ.СвернутьДанныеПоНоменклатуреИзТСДСервер(СтруктураПараметров);
	
КонецФункции

Функция МаркируемаяПродукция(Штрихкод) Экспорт
	
	Возврат ПодключаемоеОборудованиеРТ.МаркируемаяПродукция(Штрихкод);
	
КонецФункции

#КонецОбласти

Процедура ДанныеПоШтрихкоду(Штрихкод, МассивТоваровДляПечати) Экспорт
	
	ПодключаемоеОборудованиеРТ.ДанныеПоШтрихкоду(Штрихкод, МассивТоваровДляПечати);
	
КонецПроцедуры

// Переопределяет печать слип чека эквайринговой операции. 
//  ПечатьСлипЧека - Булево - Определяет будет ли распечатан слип-чек, по умолчанию Истина.  
//  ПолныйСлипЧек  - Булево - Определяет какой слип-чек будет распечатан полный или короткий, по умолчанию Истина. 
//  СтандартнаяОбработка - Булево - выполнение стандартной обработки.
//
Процедура ПечатьСлипЧекаЭквайринговойОперации(ПечатьСлипЧека, ПолныйСлипЧек, СтандартнаяОбработка) Экспорт
	
	ПодключаемоеОборудованиеРТ.ПечатьСлипЧекаЭквайринговойОперации(ПечатьСлипЧека, ПолныйСлипЧек, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти
