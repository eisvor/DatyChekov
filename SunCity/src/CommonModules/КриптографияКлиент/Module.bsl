#Область ПрограммныйИнтерфейс

// Получает параметры ключа ЭЦП, учитывая тип провайдера криптографии.
//
// Параметры:
//   ОбработчикОповещения - Процедура/Функция - обработчик оповещения, вызываемый после получения параметров.
//   ДополнительныеПараметры - Любой - дополнительные параметры для передачи в форму.
//
Функция ПолучитьПараметрыКлючаЭЦП(ОбработчикОповещения = Неопределено, ДополнительныеПараметры = Неопределено, ВыбиратьПутьКлючаДляNCALayer = Ложь) Экспорт
	ПровайдерКриптографии = КриптографияВызовСервера.ПолучитьТипПровайдераКриптографии();
	
	Если ПровайдерКриптографии = ПредопределенноеЗначение("Перечисление.ТипПровайдераКриптографии.NCALayer")
		И Не ВыбиратьПутьКлючаДляNCALayer Тогда
		
		ДанныеЭЦП                  = КриптографияКлиентСервер.ПолучитьПараметрыДанныхЭЦП();
		ДанныеЭЦП.ПровайдерСсылка  = ПредопределенноеЗначение("Перечисление.ТипПровайдераКриптографии.NCALayer");
		ДанныеЭЦП.ПровайдерСтрокой = "NCALAYER";
		
		ВыполнитьОбработкуОповещения(ОбработчикОповещения,ДанныеЭЦП);
	Иначе
		ОткрытьФормуВводаДанныхКриптография(ОбработчикОповещения, ДополнительныеПараметры);
	КонецЕсли;
КонецФункции

// Открывает форму ввода данных ключа ЭЦП.
//
// Параметры:
//   ОбработчикОповещения - Процедура/Функция - обработчик, вызываемый после закрытия формы.
//   ПараметрыФормы - Структура - параметры для передачи в форму.
//
Процедура ОткрытьФормуВводаДанныхКриптография(ОбработчикОповещения = Неопределено, ПараметрыФормы = Неопределено) Экспорт
	
	ОткрытьФорму("ОбщаяФорма.ВводДанныхКриптографии", ПараметрыФормы,,,,,ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Возвращает текст вопроса при изменении места установки библиотеки.
//
// Возвращаемое значение:
//   Строка – Локализованный текст вопроса для пользователя.
//
Функция ТекстВопросаМестоУстановкиБиблиотекиПриИзменении() Экспорт
	Возврат НСтр("ru='При использовании варианта ""На компьютерах пользователей"" возможно потребуется настройка клиентской среды.
			|После сохранения настроек, включение варианта ""На сервере 1С:Предприятие"" будет недоступно. Продолжить?'");
КонецФункции

#Область ПодписьCMS

// Создает цифровую подпись (ЭЦП) в формате CMS.
// Параметры:
//  ДанныеДляПодписи - Массив или Строка – данные для подписания.
//  ПараметрыВзаимодействия - Структура – настройки взаимодействия с криптопровайдером.
// Возвращаемое значение:
//   Структура – результат подписи, включая статус и служебные данные.
//
Функция СоздатьЭЦП_CMS(Знач ДанныеДляПодписи, ПараметрыВзаимодействия, ИспользоватьНастройкуМестаКриптографии = Истина) Экспорт
	
	Если ИспользоватьНастройкуМестаКриптографии Тогда
		Если Не КриптографияВызовСервера.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
			Результат = КриптографияВызовСервера.СоздатьЭЦП_CMS(ДанныеДляПодписи, ПараметрыВзаимодействия);
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Результат = КриптографияКлиентСервер.СоздатьЭЦП_CMS(ДанныеДляПодписи, ПараметрыВзаимодействия);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПодписьXML

// Создает цифровую подпись (ЭЦП) в формате XML.
// Параметры:
//  ДанныеДляПодписи - Массив или Строка – данные для подписания.
//  ПараметрыВзаимодействия - Структура – настройки взаимодействия с криптопровайдером.
// Возвращаемое значение:
//   Структура – результат подписи, включая статус и служебные данные.
//
Функция СоздатьЭЦП_XML(Знач ДанныеДляПодписи, ПараметрыВзаимодействия, ИспользоватьНастройкуМестаКриптографии = Истина) Экспорт
	
	Если ИспользоватьНастройкуМестаКриптографии Тогда
		Если Не КриптографияВызовСервера.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
			Результат = КриптографияВызовСервера.СоздатьЭЦП_XML(ДанныеДляПодписи, ПараметрыВзаимодействия);
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Результат = КриптографияКлиентСервер.СоздатьЭЦП_XML(ДанныеДляПодписи, ПараметрыВзаимодействия);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПодписьRaw

// Создает цифровую подпись (ЭЦП) в формате сырой подписи Raw.
// Параметры:
//  ДанныеДляПодписи - Массив или Строка – данные для подписания.
//  ПараметрыВзаимодействия - Структура – настройки взаимодействия с криптопровайдером.
// Возвращаемое значение:
//   Структура – результат подписи, включая статус и служебные данные.
//
Функция СоздатьЭЦП_Raw(Знач ДанныеДляПодписи, ПараметрыВзаимодействия, ИспользоватьНастройкуМестаКриптографии = Истина) Экспорт
	
	Если ИспользоватьНастройкуМестаКриптографии Тогда
		Если Не КриптографияВызовСервера.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
			Результат = КриптографияВызовСервера.СоздатьЭЦП_Raw(ДанныеДляПодписи, ПараметрыВзаимодействия);
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Результат = КриптографияКлиентСервер.СоздатьЭЦП_Raw(ДанныеДляПодписи, ПараметрыВзаимодействия);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДанныеСертификата

// Получает данный сертификата ключа.
// Параметры:
//  ПараметрыВзаимодействия - Структура – настройки взаимодействия с криптопровайдером.
// Возвращаемое значение:
//   Структура – результат, включая статус и служебные данные.
//
Функция ПолучитьДанныеСертификата(ПараметрыВзаимодействия, ИспользоватьНастройкуМестаКриптографии = Истина) Экспорт
	
	Если ИспользоватьНастройкуМестаКриптографии Тогда
		Если Не КриптографияВызовСервера.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
			Результат = КриптографияВызовСервера.ПолучитьДанныеСертификата(ПараметрыВзаимодействия);
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Результат = КриптографияКлиентСервер.ПолучитьДанныеСертификата(ПараметрыВзаимодействия);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти