
#Область ПрограммныйИнтерфейс

// Заполняет представление единицы измерения номенклатуры.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура, для которой необходимо получить представление единицы измерения.
//  ПредставлениеЕИ - Строка - представление единицы измерения номенклатуры.
//  ПредставлениеЕИЧастичногоВыбытия - Строка - представление единицы измерения емкости номенклатуры
//   при частичном выбытии.
//
Процедура ЗаполнитьПредставлениеЕдиницыИзмерения(ТекущаяСтрока, ПредставлениеЕИ, ПредставлениеЕИЧастичногоВыбытия) Экспорт
	
	Результат = НСтр("ru = ''");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БазовыеЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО Номенклатура.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка
	|ГДЕ
	|	Номенклатура.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ТекущаяСтрока.Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Наименование;
	КонецЕсли;
	
	ПредставлениеЕИЧастичногоВыбытия = Результат;
	Если ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
		ПредставлениеЕИ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Упаковка, "Наименование");
	Иначе
		ПредставлениеЕИ = Результат;
	КонецЕсли;
	
КонецПроцедуры

// Поиск кассира по считанному коду.
//
// Параметры
//  Объект - ДанныеФормыСткруктура - форма, в которой переопредляются значения.
//  Штрихкод - Строка - код, по которому выполняется поиск.
//
Процедура ВыполнитьПоискКассира(Объект, Штрихкод) Экспорт
	
	Если Не ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИнформационныеКарты.ВладелецКарты КАК Кассир
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|		ПО Штрихкоды.Владелец = ИнформационныеКарты.Ссылка
	|ГДЕ
	|	Штрихкоды.Штрихкод = &Штрихкод
	|	И Штрихкоды.Владелец ССЫЛКА Справочник.ИнформационныеКарты
	|	И ИнформационныеКарты.ВладелецКарты ССЫЛКА Справочник.ФизическиеЛица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИнформационныеКарты.ВладелецКарты
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|		ПО Штрихкоды.Владелец = ИнформационныеКарты.Ссылка
	|ГДЕ
	|	Штрихкоды.Штрихкод = &Штрихкод
	|	И Штрихкоды.Владелец ССЫЛКА Справочник.ИнформационныеКарты
	|	И ИнформационныеКарты.ВладелецКарты ССЫЛКА Справочник.Пользователи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИнформационныеКарты.ВладелецКарты
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|ГДЕ
	|	НЕ ИнформационныеКарты.ПометкаУдаления
	|	И ИнформационныеКарты.ВладелецКарты ССЫЛКА Справочник.ФизическиеЛица
	|	И ИнформационныеКарты.КодКарты = &Штрихкод
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИнформационныеКарты.ВладелецКарты
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|ГДЕ
	|	НЕ ИнформационныеКарты.ПометкаУдаления
	|	И ИнформационныеКарты.ВладелецКарты ССЫЛКА Справочник.Пользователи
	|	И ИнформационныеКарты.КодКарты = &Штрихкод");
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если ТипЗнч(Выборка.Кассир) = Тип("СправочникСсылка.Пользователи") Тогда
			
			Объект.Кассир = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Кассир, "ФизическоеЛицо");
			Объект.ПользовательБД = Выборка.Кассир;
			
		Иначе
			
			Объект.Кассир = Выборка.Кассир;
			Объект.ПользовательБД = Пользователи.ТекущийПользователь();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру кассира если владельцем является пользователь или физическое лицо.
//
// Параметры:
//  ВладелецШтрихкода - СправочникСсылка - объект для проверки и заполнения структуры.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  НайденныйКассир - Структура - содержащая данные кассира
//
Процедура ЗаполнитьДанныеНайденногоКассира(ВладелецШтрихкода, Форма, НайденныйКассир) Экспорт
	
	Если ТипЗнч(ВладелецШтрихкода) = Тип("СправочникСсылка.ИнформационныеКарты") Тогда
		
		Если ВладелецШтрихкода.ТипКарты = Перечисления.ТипыИнформационныхКарт.Регистрационная Тогда
			
			СтруктураКассира = Новый Структура;
			СтруктураКассира.Вставить("Кассир");
			СтруктураКассира.Вставить("ПользовательБД");
			
			ВладелецКарты = ВладелецШтрихкода.ВладелецКарты;
			
			Если ТипЗнч(ВладелецКарты) = Тип("СправочникСсылка.Пользователи") Тогда
				
				СтруктураКассира.Кассир = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецКарты, "ФизЛицо");
				СтруктураКассира.ПользовательБД = ВладелецКарты;
				
			ИначеЕсли ТипЗнч(ВладелецКарты) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				
				СтруктураКассира.Кассир = ВладелецКарты;
				СтруктураКассира.ПользовательБД = Пользователи.ТекущийПользователь();
				
			ИначеЕсли ТипЗнч(ВладелецКарты) = Тип("СправочникСсылка.Контрагенты") Тогда
				
				СтруктураКассира.Кассир = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецКарты, "ФизЛицо");
				СтруктураКассира.ПользовательБД = Пользователи.ТекущийПользователь();
				
			КонецЕсли;
			
			НайденныйКассир = СтруктураКассира;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру дисконтной карты если владельцем является карта лояльности.
//
// Параметры:
//  ВладелецШтрихкода - СправочникСсылка - объект для проверки и заполнения структуры.
//  НайденнаяКартаЛояльности - Структура - содержащая данные карты лояльности
//
Процедура ЗаполнитьДанныеНайденнойКартыЛояльности(ВладелецШтрихкода, НайденнаяКартаЛояльности) Экспорт

	Если ТипЗнч(ВладелецШтрихкода) = Тип("СправочникСсылка.ИнформационныеКарты")
		ИЛИ ТипЗнч(ВладелецШтрихкода) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		СтруктураДисконтнойКарты = Новый Структура;
		СтруктураДисконтнойКарты.Вставить("КартаЛояльности");
		СтруктураДисконтнойКарты.Вставить("Контрагент");
		СтруктураДисконтнойКарты.Вставить("КодКарты");
		СтруктураДисконтнойКарты.Вставить("АдресЭПВладельцаКарты");
		СтруктураДисконтнойКарты.Вставить("НомерТелефонаВладельцаКарты");
		СтруктураДисконтнойКарты.Вставить("ДатаРождения");
		СтруктураДисконтнойКарты.Вставить("ФИО");
		СтруктураДисконтнойКарты.Вставить("СуммаПродаж");
		СтруктураДисконтнойКарты.Вставить("ЭтоКомпания", Ложь);
		
		Запрос = Новый Запрос;
		Если ТипЗнч(ВладелецШтрихкода) = Тип("СправочникСсылка.ИнформационныеКарты") Тогда
			
			Если Не ВладелецШтрихкода.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная Тогда
				НайденнаяКартаЛояльности = СтруктураДисконтнойКарты;
				Возврат
			КонецЕсли;
			
			// убрать ВледелецКарты = ВладелецШтрихкода;
			ВладелецКарты = ВладелецШтрихкода.ВладелецКарты;
			ЗаполнитьЗначенияСвойств(СтруктураДисконтнойКарты, ВладелецШтрихкода);
			СтруктураДисконтнойКарты.КартаЛояльности = ВладелецШтрихкода;
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ИнформационныеКарты.КодКарты КАК КодКарты,
			|	ИнформационныеКарты.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ИнформационныеКарты
			|ИЗ
			|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
			|ГДЕ
			|	ИнформационныеКарты.Ссылка = &КартаЛояльности
			|	И НЕ ИнформационныеКарты.КодКарты = """"
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Штрихкоды.Штрихкод,
			|	Штрихкоды.Владелец
			|ИЗ
			|	РегистрСведений.Штрихкоды КАК Штрихкоды
			|ГДЕ
			|	Штрихкоды.Владелец = &КартаЛояльности
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИнформационныеКарты.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ втКартыСсылки
			|ИЗ
			|	ИнформационныеКарты КАК ИнформационныеКарты
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СУММА(ЕСТЬNULL(ПродажиПоДисконтнымКартамОбороты.СуммаОборот, 0)) КАК СуммаПродаж,
			|	втКартыСсылки.Ссылка КАК ДисконтнаяКарта
			|ПОМЕСТИТЬ ТаблицаПродаж
			|ИЗ
			|	втКартыСсылки КАК втКартыСсылки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты КАК ПродажиПоДисконтнымКартамОбороты
			|		ПО втКартыСсылки.Ссылка = ПродажиПоДисконтнымКартамОбороты.ДисконтнаяКарта
			|
			|СГРУППИРОВАТЬ ПО
			|	втКартыСсылки.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИнформационныеКарты.КодКарты КАК КодКарты,
			|	ТаблицаПродаж.СуммаПродаж КАК СуммаПродаж
			|ИЗ
			|	ИнформационныеКарты КАК ИнформационныеКарты
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПродаж КАК ТаблицаПродаж
			|		ПО ИнформационныеКарты.Ссылка = ТаблицаПродаж.ДисконтнаяКарта";
			
			Запрос.УстановитьПараметр("КартаЛояльности", ВладелецШтрихкода);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СтруктураДисконтнойКарты.КодКарты = Выборка.КодКарты;
				СтруктураДисконтнойКарты.СуммаПродаж = Выборка.СуммаПродаж;
			КонецЕсли;
			
		Иначе
			ВладелецКарты = ВладелецШтрихкода;
		КонецЕсли;
		
		СтруктураДисконтнойКарты.Контрагент = ВладелецКарты;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ФизическиеЛица.Наименование КАК ФИО,
		|	ФизическиеЛица.ДатаРождения КАК ДатаРождения
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	НЕ ФизическиеЛица.ЭтоГруппа
		|	И НЕ ФизическиеЛица.ПометкаУдаления
		|	И ФизическиеЛица.Ссылка = &ВладелецКарты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ФизическиеЛица.Наименование,
		|	ФизическиеЛица.ДатаРождения
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО Контрагенты.ФизЛицо = ФизическиеЛица.Ссылка
		|ГДЕ
		|	НЕ Контрагенты.ЭтоГруппа
		|	И НЕ Контрагенты.ПометкаУдаления
		|	И Контрагенты.Ссылка = &ВладелецКарты";
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ФизическиеЛица.Наименование КАК ФИО,
		|	ФизическиеЛица.ДатаРождения КАК ДатаРождения,
		|	ЛОЖЬ КАК ЭтоКомпания
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	НЕ ФизическиеЛица.ЭтоГруппа
		|	И НЕ ФизическиеЛица.ПометкаУдаления
		|	И ФизическиеЛица.Ссылка = &ВладелецКарты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ФизическиеЛица.Наименование, Контрагенты.Наименование),
		|	ФизическиеЛица.ДатаРождения,
		|	ВЫБОР
		|		КОГДА ФизическиеЛица.Ссылка ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО Контрагенты.ФизЛицо = ФизическиеЛица.Ссылка
		|ГДЕ
		|	НЕ Контрагенты.ПометкаУдаления
		|	И Контрагенты.Ссылка = &ВладелецКарты";
		
		Запрос.УстановитьПараметр("ВладелецКарты", ВладелецКарты);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(СтруктураДисконтнойКарты, Выборка);
		КонецЕсли;
		
		СписокТелефонов = ПодключаемоеОборудованиеРТ.ТелефоныОбъектаДляЧека(ВладелецШтрихкода);
		Если СписокТелефонов.Количество() > 0 Тогда
			СтруктураДисконтнойКарты.НомерТелефонаВладельцаКарты = СписокТелефонов[0].Представление;
		Иначе
			
			СписокТелефоновВладельца = ПодключаемоеОборудованиеРТ.ТелефоныОбъектаДляЧека(ВладелецКарты);
			Если СписокТелефоновВладельца.Количество() > 0 Тогда
				СтруктураДисконтнойКарты.НомерТелефонаВладельцаКарты = СписокТелефоновВладельца[0].Представление;
			Иначе
				Если ТипЗнч(ВладелецКарты) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ВладелецКарты.ФизЛицо) Тогда
					СтруктураДисконтнойКарты.НомерТелефонаВладельцаКарты = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
						ВладелецКарты.ФизЛицо, Перечисления.ТипыКонтактнойИнформации.Телефон);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		СписокЭлПочты = ПодключаемоеОборудованиеРТ.EmailОбъектаДляЧека(ВладелецШтрихкода);
		Если СписокЭлПочты.Количество() > 0 Тогда
			СтруктураДисконтнойКарты.АдресЭПВладельцаКарты = СписокЭлПочты[0].Значение;
		Иначе
			
			СписокЭлПочтыВладельца = ПодключаемоеОборудованиеРТ.EmailОбъектаДляЧека(ВладелецКарты);
			Если СписокЭлПочтыВладельца.Количество() > 0 Тогда
				СтруктураДисконтнойКарты.АдресЭПВладельцаКарты = СписокЭлПочтыВладельца[0].Представление;
			Иначе
				Если ТипЗнч(ВладелецКарты) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ВладелецКарты.ФизЛицо) Тогда
					СтруктураДисконтнойКарты.АдресЭПВладельцаКарты = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
						ВладелецКарты.ФизЛицо, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		НайденнаяКартаЛояльности = СтруктураДисконтнойКарты;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру позиции номенклатуры если владельцем является номенклатура.
//
// Параметры:
//  СтрокаРезультата - Структура - параметры для проверки и заполнения.
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ПараметрыДляОбработкиШтрихкода - Структура - данные для обработки штрихкода.
//  НайденнаяНоменклатура - Структура - содержащая данные номенклатуры
//     * Весовой - Булево
//     * Количество - Число
//     * КоличествоУпаковок - Число
//     * Маркируемый - Булево
//     * НеобходимостьВводаСерии - Булево
//     * Номенклатура - ОпределяемыйТип.НоменклатураРМК
//     * ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК
//     * ПредставлениеНоменклатураХарактеристика - Строка
//     * Серия - ОпределяемыйТип.СерияРМК
//     * СистемаНалогообложения - ОпределяемыйТип.ТипыСистемНалогообложенияККТРМК
//     * СтавкаНДС - ОпределяемыйТип.СтавкаНДСРМК
//     * ТипНоменклатуры - ОпределяемыйТип.ТипыНоменклатурыРМК
//     * Упаковка - ОпределяемыйТип.УпаковкаРМК
//     * Фасованный - Булево
//     * Характеристика - ОпределяемыйТип.ХарактеристикаРМК
//     * Цена - Число
//     * Штрихкод - Строка
//     * Организация - ОпределяемыйТип.ОрганизацияРМК
//     * Партия - ОпределяемыйТип.ПартияРМК
//     * ИспользоватьПартии - Булево
//     * ПроверятьЗаполнениеПартий - Булево
//     * ПроверятьЗаполнениеСерий - Булево
//     * УникальностьСерии - Булево
//     * ЭтоНабор - Булево
//
Процедура ЗаполнитьДанныеНайденнойНоменклатуры(СтрокаРезультата, Форма, ПараметрыДляОбработкиШтрихкода,
		НайденнаяНоменклатура) Экспорт
	
	ВладелецШтрихкода = СтрокаРезультата.Владелец;
	ШтрихкодУпаковки = Неопределено;
	
	Если ТипЗнч(ВладелецШтрихкода) = Тип("СправочникСсылка.ШтрихкодыУпаковокТоваров") Тогда
		ВладелецШтрихкода = ВладелецШтрихкода.Номенклатура;
		ШтрихкодУпаковки = СтрокаРезультата.Владелец;
	ИначеЕсли ТипЗнч(ВладелецШтрихкода) = Тип("СправочникСсылка.СерийныеНомера") Тогда
		ВладелецШтрихкода = ВладелецШтрихкода.Владелец;
	КонецЕсли;
	
	Если ТипЗнч(ВладелецШтрихкода) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		СтруктураВыбора = Новый Структура;
		ЗаполнитьСтруктуруВыбора(СтруктураВыбора);
		
		СтруктураВыбора.ПоштучноеВыбытие = Ложь;
		Если СтрокаРезультата.Свойство("РазрешительныйРежимИдентификаторЗапросаГИСМТ") Тогда
			ЗаполнитьЗначенияСвойств(СтруктураВыбора, СтрокаРезультата, 
				"РазрешительныйРежимИдентификаторЗапросаГИСМТ, РазрешительныйРежимДатаЗапросаГИСМТ");
		Конецесли;
		
		СтруктураВыбора.Штрихкод = СтрокаРезультата.ДанныеПО;
		СтруктураВыбора.Номенклатура = ВладелецШтрихкода;
		СтруктураВыбора.Характеристика = СтрокаРезультата.Характеристика;
		
		ЗаполнитьДанныеНоменклатуры(СтруктураВыбора);
		
		ДатаПроверки = ТекущаяДатаСеанса();
		
		ЭтоНеразливнойАлкоголь = ЭтоНеразливнойАлкоголь(СтруктураВыбора.Номенклатура);
		ЭтоМеховаяПродукция =
			(СтруктураВыбора.ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.КиЗГИСМ"));
			
		ВидПродукции = ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(СтруктураВыбора.ОсобенностьУчета);
		ПодлежитОбязательнойМаркировке =
			ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции(ВидПродукции);
		СтруктураВыбора.Маркируемый = ЭтоНеразливнойАлкоголь ИЛИ ЭтоМеховаяПродукция ИЛИ ПодлежитОбязательнойМаркировке;

		Если СтруктураВыбора.Маркируемый И Не ТипЗнч(Форма) = Тип("Структура") Тогда
			ЗаполнитьПризнакиПоштучногоВыбытия(СтруктураВыбора.Номенклатура, СтруктураВыбора.Характеристика, СтруктураВыбора, Форма);
		КонецЕсли;
		
		Количество = СтрокаРезультата.Количество;
		Если НЕ СтрокаРезультата.Свойство("ВесИзШтрихкода") И ВладелецШтрихкода.Весовой Тогда
			Количество = 0;
		КонецЕсли;
		
		СтруктураВыбора.Количество = Количество;
		СтруктураВыбора.КоличествоУпаковок = Количество;
		
		Если СтрокаРезультата.Свойство("СерийныйНомер") Тогда
			СтруктураВыбора.Серия = СтрокаРезультата.СерийныйНомер;
		Иначеесли СтрокаРезультата.Свойство("СерияНоменклатуры") Тогда
			СтруктураВыбора.Серия = СтрокаРезультата.СерияНоменклатуры;
		КонецЕсли;
		
		Если СтрокаРезультата.Свойство("Упаковка") Тогда
			СтруктураВыбора.Упаковка = СтрокаРезультата.Упаковка;
		КонецЕсли;
		
		СтруктураВыбора.ЭтоНабор = Ложь;
		СтруктураВыбора.ИспользоватьПартии = Ложь;
		СтруктураВыбора.ПроверятьЗаполнениеПартий = Ложь;
		
		Если Не ШтрихкодУпаковки = Неопределено Тогда
			ПроверитьЗаполненностьСерии(СтруктураВыбора, ШтрихкодУпаковки);
		КонецЕсли;
		СтруктураВыбора.ПроверятьЗаполнениеСерий = СтруктураВыбора.НеобходимостьВводаСерии;
		
		СтруктураВыбора.Фасованный = Ложь;
		
		СтруктураВыбора.ОплатаНедоступна = Ложь;
		ОбщегоНазначенияРМКРТ.ЗаполнитьОрганизациюПродажи(СтруктураВыбора, Форма);
		Если Не ЗначениеЗаполнено(СтруктураВыбора.Организация) Тогда
			СтруктураВыбора.Организация = Форма.ОсновнаяОрганизация;
		Иначе
			
			Если ТипЗнч(Форма) = Тип("Структура") Тогда
				МассивОрганизаций = Форма.МассивОрганизаций;
				СтруктураВыбора.ОплатаНедоступна = МассивОрганизаций.Найти(СтруктураВыбора.Организация) = Неопределено;
			Иначе
				ОтборПоОрганизации = Новый Структура("Организация", СтруктураВыбора.Организация);
				КассыККМПоОрганизации = Форма.ТаблицаКассККМОрганизаций.НайтиСтроки(ОтборПоОрганизации);
				Если КассыККМПоОрганизации.Количество() = 0 Тогда
					СтруктураВыбора.ОплатаНедоступна = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураВыбора.СистемаНалогообложения = ОбщегоНазначенияРМК.СНОККТДляОрганизации(Форма, СтруктураВыбора);
		Если Не ЗначениеЗаполнено(СтруктураВыбора.СистемаНалогообложения) Тогда
			СтруктураВыбора.СистемаНалогообложения = Форма.СистемаНалогообложенияОрганизацииПоУмолчанию;
		КонецЕсли;
		
		КодТРУ = ВладелецШтрихкода.КодТРУ;
		СтруктураВыбора.КодТРУ = КодТРУ;
		СтруктураВыбора.ВозможнаОплатаЭС = ЗначениеЗаполнено(КодТРУ);
		
		ПредставлениеХарактеристики = "";
		Если ЗначениеЗаполнено(СтруктураВыбора.Характеристика) Тогда
			ПредставлениеХарактеристики = " (" + СтруктураВыбора.Характеристика.Наименование + ")";
		КонецЕсли;
		
		ПредставлениеТовара = СтруктураВыбора.Наименование + ПредставлениеХарактеристики;
		СтруктураВыбора.ПредставлениеНоменклатураХарактеристика = ПредставлениеТовара;
		
		Цена = ЗапасыСервер.ЦенаПродажи(
			Форма.Объект.ТорговыйОбъект,
			ТекущаяДатаСеанса(),
			СтруктураВыбора.Номенклатура,
			СтруктураВыбора.Характеристика,
			СтруктураВыбора.Упаковка,
			Истина);
			
		СтруктураВыбора.Цена = Цена;
		
		ОбщегоНазначенияРМКПереопределяемый.СкорректироватьЦенуПодарочногоСертификата(Форма, СтруктураВыбора);
		
		НайденнаяНоменклатура = СтруктураВыбора;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет серию номенклатуры если ею является.
//
// Параметры:
//  ВладелецШтрихкода - СправочникСсылка - объект для проверки и заполнения структуры.
//  НайденнаяСерияНоменклатуры - ОпределяемыйТип.СерияНоменклатурыШтрихкода
//
Процедура ЗаполнитьДанныеНайденнойСерииНоменклатуры(ВладелецШтрихкода, НайденнаяСерияНоменклатуры) Экспорт

	Если ТипЗнч(ВладелецШтрихкода) = Тип("СправочникСсылка.СерииНоменклатуры")
		ИЛИ ТипЗнч(ВладелецШтрихкода) = Тип("СправочникСсылка.СерийныеНомера") Тогда
		
		НайденнаяСерияНоменклатуры = ВладелецШтрихкода;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет партию номенклатуры если ею является.
//
// Параметры:
//  ВладелецШтрихкода - СправочникСсылка - объект для проверки и заполнения структуры.
//  НайденнаяПартияНоменклатуры - ОпределяемыйТип.ПартияНоменклатурыШтрихкода
//
Процедура ЗаполнитьДанныеНайденнойПартииНоменклатуры(ВладелецШтрихкода, НайденнаяПартияНоменклатуры) Экспорт

	Возврат;
	
КонецПроцедуры

// Заполняет структуру дисконтной карты
//
// Параметры:
//  МагнитныйКод - Строка - код, по которому выполняется поиск;
//  НомерТелефона - Строка - (необязательный) номер телефона владельца карты
//  ДанныеКарты - Структура,Неопределено - Параметры дисконтной карты, или Неопределено если карта не найдена
//
Процедура ЗаполнитьДанныеКартыЛояльностиПоМагнитномуКоду(МагнитныйКод, НомерТелефона, ДанныеКарты) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Заполняет сведения о существующей для номенклатуры упаковки
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура, для запроса информации об упаковке
//  ДанныеУпаковки - Структура
//     *Коэффициент - Число - коэффициент кратности упаковки
//     *Упаковка - СправочникСсылка.Упаковки - найденная упаковка для номенклатуры
//
Процедура ЗаполнитьДанныеУпаковкиДляТовара(Номенклатура, ДанныеУпаковки) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Коэффициент", 1);
	Результат.Вставить("Упаковка",
		ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.УпаковкиНоменклатуры.ПустаяСсылка"));
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Упаковки.Ссылка КАК Упаковка,
		|	Упаковки.Коэффициент КАК Коэффициент
		|ИЗ
		|	Справочник.УпаковкиНоменклатуры КАК Упаковки
		|ГДЕ
		|	НЕ Упаковки.ПометкаУдаления
		|	И Упаковки.Владелец = &Номенклатура");
		
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Выборка = Запрос.Выполнить().Выбрать();
		
		МаксимальныйКоэффициент = 0;
		УпаковкаМаксКоэффициент = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Коэффициент > МаксимальныйКоэффициент Тогда
				
				МаксимальныйКоэффициент = Выборка.Коэффициент;
				УпаковкаМаксКоэффициент = Выборка.Упаковка;
				ЗаполнитьЗначенияСвойств(Результат, Выборка);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеУпаковки = Результат;
	
КонецПроцедуры

// Заполняет признак того, нужно ли проверять статус акцизной марки.
//
// НужнаПроверкаСтатусаМарки - Булево - Истина, если нужна проверка статуса марки.
//
Процедура ЗаполнитьПризнакНеобходимостиПроверкиСтатусаМарки(НужнаПроверкаСтатусаМарки) Экспорт
	
	НужнаПроверкаСтатусаМарки = Истина;
	
КонецПроцедуры

// Проверка статуса марки.
//
// Параметры
//  ПараметрыПроверки - Структура - параметры для проверки марки.
//
Процедура ПроверитьСтатусМарки(ПараметрыПроверки) Экспорт
	
	ТекстОшибки = "";
	
	Объект = ПараметрыПроверки.Объект;
	СтрокаТовары = ПараметрыПроверки.СтрокаТовары;
	ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(
		СтрокаТовары.Организация,
		Объект.ТорговыйОбъект);
		
	Если ОрганизацияЕГАИС = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось определить организацию ЕГАИС.'");
		ПараметрыПроверки.Вставить("ОшибкаЕГАИС", ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТовары, "ПоштучноеВыбытие")
		И СтрокаТовары.ПоштучноеВыбытие Тогда
		Возврат;
	КонецЕсли;
	
	Операция = "Продажа";
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		Операция = "Возврат";
	КонецЕсли;
	
	АкцизныеМаркиЕГАИСРТ.ПроверитьУникальностьАкцизнойМарки(
		Операция,
		ПараметрыПроверки.Штрихкод,
		ТекстОшибки,
		ОрганизацияЕГАИС);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ПараметрыПроверки.Вставить("ОшибкаЕГАИС", ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьСтруктуруВыбора(СтруктураВыбора)
	
	СтруктураВыбора = Новый Структура;
	СтруктураВыбора.Вставить("Весовой");
	СтруктураВыбора.Вставить("Количество");
	СтруктураВыбора.Вставить("КоличествоУпаковок");
	СтруктураВыбора.Вставить("Маркируемый");
	СтруктураВыбора.Вставить("НеобходимостьВводаСерии");
	СтруктураВыбора.Вставить("Номенклатура");
	СтруктураВыбора.Вставить("ОсобенностьУчета");
	СтруктураВыбора.Вставить("ПредставлениеНоменклатураХарактеристика");
	СтруктураВыбора.Вставить("Серия");
	СтруктураВыбора.Вставить("СистемаНалогообложения");
	СтруктураВыбора.Вставить("СтавкаНДС");
	СтруктураВыбора.Вставить("ТипНоменклатуры");
	СтруктураВыбора.Вставить("Упаковка");
	СтруктураВыбора.Вставить("Фасованный");
	СтруктураВыбора.Вставить("Характеристика");
	СтруктураВыбора.Вставить("Цена");
	СтруктураВыбора.Вставить("Штрихкод");
	СтруктураВыбора.Вставить("Организация");
	СтруктураВыбора.Вставить("Партия");
	СтруктураВыбора.Вставить("ИспользоватьПартии");
	СтруктураВыбора.Вставить("ПроверятьЗаполнениеПартий");
	СтруктураВыбора.Вставить("ПроверятьЗаполнениеСерий");
	СтруктураВыбора.Вставить("УникальностьСерии");
	СтруктураВыбора.Вставить("ЭтоНабор");
	СтруктураВыбора.Вставить("ПоштучноеВыбытие");
	СтруктураВыбора.Вставить("ЧастичноеВыбытиеНоменклатура");
	СтруктураВыбора.Вставить("ЧастичноеВыбытиеХарактеристика");
	СтруктураВыбора.Вставить("ЧастичноеВыбытиеВариантУчета");
	СтруктураВыбора.Вставить("ЧастичноеВыбытиеКоличество");
	СтруктураВыбора.Вставить("КоличествоВПотребительскойУпаковке");
	СтруктураВыбора.Вставить("Наименование");
	СтруктураВыбора.Вставить("КодТРУ");
	СтруктураВыбора.Вставить("ВозможнаОплатаЭС");
	СтруктураВыбора.Вставить("ОплатаНедоступна");
	СтруктураВыбора.Вставить("ЗапретитьВводДробногоКоличества");
	СтруктураВыбора.Вставить("РазрешительныйРежимИдентификаторЗапросаГИСМТ");
	СтруктураВыбора.Вставить("РазрешительныйРежимДатаЗапросаГИСМТ");
	СтруктураВыбора.Вставить("ПроверятьЗаполнениеХарактеристики");
	
КонецПроцедуры

Процедура ЗаполнитьПризнакиПоштучногоВыбытия(Номенклатура, Характеристика, СтруктураВыбора, Форма)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиЧастичногоВыбытияПродукцииИС.Номенклатура КАК Номенклатура,
	|	НастройкиЧастичногоВыбытияПродукцииИС.Характеристика КАК Характеристика,
	|	НастройкиЧастичногоВыбытияПродукцииИС.НоменклатураЧастичногоВыбытия КАК НоменклатураЧастичногоВыбытия,
	|	НастройкиЧастичногоВыбытияПродукцииИС.ХарактеристикаЧастичногоВыбытия КАК ХарактеристикаЧастичногоВыбытия
	|ПОМЕСТИТЬ ТаблицаЧастичногоВыбытияПодменыНоменклатуры
	|ИЗ
	|	РегистрСведений.НастройкиЧастичногоВыбытияПродукцииИС КАК НастройкиЧастичногоВыбытияПродукцииИС
	|ГДЕ
	|	НастройкиЧастичногоВыбытияПродукцииИС.Номенклатура = &Номенклатура
	|	И НастройкиЧастичногоВыбытияПродукцииИС.Характеристика = &Характеристика
	|	И НЕ НастройкиЧастичногоВыбытияПродукцииИС.Номенклатура ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК ПоштучноеВыбытие,
	|	ТаблицаЧастичногоВыбытияПодменыНоменклатуры.НоменклатураЧастичногоВыбытия КАК ЧастичноеВыбытиеНоменклатура,
	|	ТаблицаЧастичногоВыбытияПодменыНоменклатуры.ХарактеристикаЧастичногоВыбытия КАК ЧастичноеВыбытиеХарактеристика,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия, ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИС.ПустаяСсылка)) КАК ЧастичноеВыбытиеВариантУчета,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки, 0) КАК КоличествоВПотребительскойУпаковке,
	|	1 КАК ЧастичноеВыбытиеКоличество,
	|	ТаблицаЧастичногоВыбытияПодменыНоменклатуры.НоменклатураЧастичногоВыбытия КАК Номенклатура,
	|	ТаблицаЧастичногоВыбытияПодменыНоменклатуры.ХарактеристикаЧастичногоВыбытия КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаДанныеПодменыНоменклатуры
	|ИЗ
	|	ТаблицаЧастичногоВыбытияПодменыНоменклатуры КАК ТаблицаЧастичногоВыбытияПодменыНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|		ПО ТаблицаЧастичногоВыбытияПодменыНоменклатуры.Номенклатура = ОписаниеНоменклатурыИС.Номенклатура
	|ГДЕ
	|	НЕ ОписаниеНоменклатурыИС.Номенклатура ЕСТЬ NULL
	|	И ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиЧастичногоВыбытияПродукцииИС.Номенклатура КАК Номенклатура,
	|	НастройкиЧастичногоВыбытияПродукцииИС.Характеристика КАК Характеристика,
	|	НастройкиЧастичногоВыбытияПродукцииИС.НоменклатураЧастичногоВыбытия КАК НоменклатураЧастичногоВыбытия,
	|	НастройкиЧастичногоВыбытияПродукцииИС.ХарактеристикаЧастичногоВыбытия КАК ХарактеристикаЧастичногоВыбытия
	|ПОМЕСТИТЬ ТаблицаЧастичногоВыбытия
	|ИЗ
	|	РегистрСведений.НастройкиЧастичногоВыбытияПродукцииИС КАК НастройкиЧастичногоВыбытияПродукцииИС
	|ГДЕ
	|	НастройкиЧастичногоВыбытияПродукцииИС.НоменклатураЧастичногоВыбытия = &Номенклатура
	|	И НастройкиЧастичногоВыбытияПродукцииИС.ХарактеристикаЧастичногоВыбытия = &Характеристика
	|	И НЕ НастройкиЧастичногоВыбытияПродукцииИС.НоменклатураЧастичногоВыбытия ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК ПоштучноеВыбытие,
	|	ТаблицаЧастичногоВыбытия.НоменклатураЧастичногоВыбытия КАК ЧастичноеВыбытиеНоменклатура,
	|	ТаблицаЧастичногоВыбытия.ХарактеристикаЧастичногоВыбытия КАК ЧастичноеВыбытиеХарактеристика,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия, ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИС.ПустаяСсылка)) КАК ЧастичноеВыбытиеВариантУчета,
	|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки, 0) КАК КоличествоВПотребительскойУпаковке,
	|	1 КАК ЧастичноеВыбытиеКоличество,
	|	ТаблицаЧастичногоВыбытия.НоменклатураЧастичногоВыбытия КАК Номенклатура,
	|	ТаблицаЧастичногоВыбытия.ХарактеристикаЧастичногоВыбытия КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаДанныеПоштучногоВыбытия
	|ИЗ
	|	ТаблицаЧастичногоВыбытия КАК ТаблицаЧастичногоВыбытия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|		ПО ТаблицаЧастичногоВыбытия.Номенклатура = ОписаниеНоменклатурыИС.Номенклатура
	|ГДЕ
	|	НЕ ОписаниеНоменклатурыИС.Номенклатура ЕСТЬ NULL
	|	И ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанныеПодменыНоменклатуры.ПоштучноеВыбытие КАК ПоштучноеВыбытие,
	|	ТаблицаДанныеПодменыНоменклатуры.ЧастичноеВыбытиеНоменклатура КАК ЧастичноеВыбытиеНоменклатура,
	|	ТаблицаДанныеПодменыНоменклатуры.ЧастичноеВыбытиеХарактеристика КАК ЧастичноеВыбытиеХарактеристика,
	|	ТаблицаДанныеПодменыНоменклатуры.ЧастичноеВыбытиеВариантУчета КАК ЧастичноеВыбытиеВариантУчета,
	|	ТаблицаДанныеПодменыНоменклатуры.КоличествоВПотребительскойУпаковке КАК КоличествоВПотребительскойУпаковке,
	|	ТаблицаДанныеПодменыНоменклатуры.ЧастичноеВыбытиеКоличество КАК ЧастичноеВыбытиеКоличество,
	|	ТаблицаДанныеПодменыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаДанныеПодменыНоменклатуры.Характеристика КАК Характеристика
	|ИЗ
	|	ТаблицаДанныеПодменыНоменклатуры КАК ТаблицаДанныеПодменыНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДанныеПоштучногоВыбытия.ПоштучноеВыбытие,
	|	ТаблицаДанныеПоштучногоВыбытия.ЧастичноеВыбытиеНоменклатура,
	|	ТаблицаДанныеПоштучногоВыбытия.ЧастичноеВыбытиеХарактеристика,
	|	ТаблицаДанныеПоштучногоВыбытия.ЧастичноеВыбытиеВариантУчета,
	|	ТаблицаДанныеПоштучногоВыбытия.КоличествоВПотребительскойУпаковке,
	|	ТаблицаДанныеПоштучногоВыбытия.ЧастичноеВыбытиеКоличество,
	|	ТаблицаДанныеПоштучногоВыбытия.Номенклатура,
	|	ТаблицаДанныеПоштучногоВыбытия.Характеристика
	|ИЗ
	|	ТаблицаДанныеПоштучногоВыбытия КАК ТаблицаДанныеПоштучногоВыбытия";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВыбора, Выборка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеНоменклатуры(СтруктураВыбора)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпрНоменклатура.Весовой КАК Весовой,
	|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьСерии, ЛОЖЬ)
	|		ИЛИ СпрНоменклатура.ИспользоватьСерийныеНомера КАК НеобходимостьВводаСерии,
	|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьСерии, ЛОЖЬ)
	|		ИЛИ СпрНоменклатура.ИспользоватьСерийныеНомера КАК ПроверятьЗаполнениеСерий,
	|	СпрНоменклатура.ИспользоватьСерийныеНомера
	|		ИЛИ ВидыНоменклатуры.ИспользоватьСерии
	|			И ВидыНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара) КАК УникальностьСерии,
	|	СпрНоменклатура.ОсобенностьУчета КАК ОсобенностьУчета,
	|	СпрНоменклатура.СтавкаНДС КАК СтавкаНДС,
	|	СпрНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	СпрНоменклатура.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА &ПроверкаВводаДробногоКоличества
	|			ТОГДА НЕ СпрНоменклатура.РазрешитьВводДробногоКоличества
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗапретитьВводДробногоКоличества,
	|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьХарактеристики, ЛОЖЬ) КАК ПроверятьЗаполнениеХарактеристики
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО СпрНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &Номенклатура";
	
	ПроверкаВводаДробногоКоличества = ПолучитьФункциональнуюОпцию("ИспользоватьПроверкуНаВводДробногоКоличества");
	Запрос.УстановитьПараметр("ПроверкаВводаДробногоКоличества", ПроверкаВводаДробногоКоличества);
	Запрос.УстановитьПараметр("Номенклатура", СтруктураВыбора.Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВыбора, Выборка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполненностьСерии(СтруктураВыбора, ШтрихкодУпаковки)
	
	Если Не СтруктураВыбора.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха Тогда
		Возврат;
	КонецЕсли;
	
	Серия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ШтрихкодУпаковки, "Серия");
	Если ЗначениеЗаполнено(Серия) Тогда
		СтруктураВыбора.Серия = Серия;
	Иначе
		
		ДанныеШтрихкода = ШтрихкодированиеИСРТ.ДанныеШтрихкодаДляОбработки();
		ДанныеШтрихкода.Номенклатура = СтруктураВыбора.Номенклатура;
		ДанныеШтрихкода.Штрихкод = СтруктураВыбора.Штрихкод;
		Серия = ИнтеграцияИСРТ.НайтиСоздатьСериюПоДаннымШтрихкода(ДанныеШтрихкода);
		
		ШтрихкодУпаковкиОбъект = ШтрихкодУпаковки.ПолучитьОбъект();
		ШтрихкодУпаковкиОбъект.Серия = Серия;
		ШтрихкодУпаковкиОбъект.Записать();
		СтруктураВыбора.Серия = Серия;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоНеразливнойАлкоголь(Номенклатура)
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ЕСТЬNULL(Номенклатура.ВидАлкогольнойПродукцииЕГАИС.Маркируемый, ЛОЖЬ) КАК ЭтоНеразливнойАлкоголь
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &Ссылка
		|	И НЕ Номенклатура.ПометкаУдаления
		|	И НЕ Номенклатура.ЭтоГруппа");
		Запрос.УстановитьПараметр("Ссылка", Номенклатура);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Результат = Выборка.ЭтоНеразливнойАлкоголь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
