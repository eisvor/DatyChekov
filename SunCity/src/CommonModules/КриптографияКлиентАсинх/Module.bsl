#Область ПрограммныйИнтерфейс

#Область УстановкаКриптографии

// Проверяет возможность подключения криптопровайдера НЦА.
//
// Параметры:
//  Версия           - Строка     - Версия криптопровайдера.
//  РежимТишины      - Булево     - Флаг активации "тихого режима" подключения.
//  ТолькоПодключение - Булево    - Флаг, указывающий, нужно ли только подключить провайдер без проверки других параметров.
//
// Возвращаемое значение:
//   Булево          - Истина, если подключение выполнено успешно; Ложь в противном случае.
//
Асинх Функция УдалосьПодключитьКриптопровайдерНЦА(Версия = "", РежимТишины = Ложь, ТолькоПодключение = Ложь) Экспорт
	Криптопровайдер = Ждать КриптографияКлиентПовтИспАсинх.НовыйКриптопровайдерWSSocket(, РежимТишины, ТолькоПодключение);
		
	Если Криптопровайдер = Неопределено Тогда
		ОбновитьПовторноИспользуемыеЗначения();
		Подключается = Ложь;
		Версия = "";
	Иначе
		Подключается = Истина;
		Версия = Криптопровайдер.Версия;
	КонецЕсли;
	
	Возврат Подключается;
КонецФункции

#КонецОбласти

// Проверяет, можно ли подключить криптопровайдер только новой версии.
//
// Параметры:
//  Версия                      - Строка     - Версия криптопровайдера.
//  РежимТишины                 - Булево     - Флаг активации "тихого режима" подключения.
//  МестоВыполненияОпераций     - Любой      - Контекст выполнения операции.
//  ТолькоПодключение           - Булево     - Флаг, указывающий, нужно ли только подключить провайдер без проверки других параметров.
//  ПроверятьНЦА                - Любой      - Параметр для дополнительных проверок НЦА.
//
// Возвращаемое значение:
//   Булево                     - Истина, если удалось подключить новую версию криптопровайдера; Ложь в противном случае.
//
Асинх Функция КриптопровайдерПодключается(Версия = "", РежимТишины = Ложь, МестоВыполненияОпераций = Неопределено, ТолькоПодключение = Ложь, ИспользоватьНастройкуМестаКриптографии = Истина) Экспорт
	
	Если Не ИспользоватьНастройкуМестаКриптографии Тогда
		Подключается =  Ждать УдалосьПодключитьКриптопровайдерНЦА(Версия, РежимТишины, ТолькоПодключение);
		Возврат Подключается;
	КонецЕсли;
	
	// Место выполнения операции
	ВыполнятьКриптографическиеОперацииНаКлиенте = Неопределено;
	
	Если ЗначениеЗаполнено(МестоВыполненияОпераций) Тогда
		ВыполнятьКриптографическиеОперацииНаКлиенте = МестоВыполненияОпераций = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаКлиенте");
	Иначе
		ВыполнятьКриптографическиеОперацииНаКлиенте = КриптографияВызовСервера.ВыполнятьКриптографическиеОперацииНаКлиенте();
	КонецЕсли;
	
	Если ВыполнятьКриптографическиеОперацииНаКлиенте Тогда
		Подключается = Ждать УдалосьПодключитьКриптопровайдерНЦА(Версия, РежимТишины, ТолькоПодключение);
	Иначе
		Подключается = КриптографияВызовСервера.УдалосьПодключитьКриптопровайдерНЦА(Версия, РежимТишины);
	КонецЕсли;
	
	Возврат Подключается;
	
КонецФункции

// Получает версию криптопровайдера.
//
// Параметры:
//  РежимТишины                 - Булево     - Флаг активации "тихого режима" подключения.
//  ТолькоПодключение           - Булево     - Флаг, указывающий, нужно ли только подключить провайдер без проверки других параметров.
//
// Возвращаемое значение:
//   Число                     - Версия криптопровайдера..
//
Асинх Функция ПолучитьВерсиюКриптопровайдера(РежимТишины = Ложь, ТолькоПодключение = Ложь) Экспорт
	
	Криптопровайдер = Ждать КриптографияКлиентПовтИспАсинх.НовыйКриптопровайдерWSSocket(, РежимТишины, ТолькоПодключение);
	
	Если Криптопровайдер = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат Криптопровайдер.Версия;
	КонецЕсли;
	
КонецФункции


#Область ПодписьCMS

// Создает цифровую подпись (ЭЦП) в формате CMS, асинхронный вызов.
// Параметры:
//  ДанныеДляПодписи - Массив или Строка – данные для подписания.
//  ПараметрыВзаимодействия - Структура – настройки взаимодействия с криптопровайдером.
// Возвращаемое значение:
//   Структура – результат подписи, включая статус и служебные данные.
//
Асинх Функция СоздатьЭЦП_CMS(Знач ДанныеДляПодписи, ПараметрыВзаимодействия, ИспользоватьНастройкуМестаКриптографии = Истина) Экспорт
	
	Если ИспользоватьНастройкуМестаКриптографии Тогда
		Если Не КриптографияВызовСервера.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
			Результат = КриптографияВызовСервера.СоздатьЭЦП_CMS(ДанныеДляПодписи, ПараметрыВзаимодействия);
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	ПодписьСписка = ТипЗнч(ДанныеДляПодписи) = Тип("Массив");
	
	ДанныеДляПодписи = КриптографияКлиентСервер.ПреобразоватьДанныеВBase64(ДанныеДляПодписи, ПодписьСписка, ПараметрыВзаимодействия);

	ДанныеДляПодписиJSON = КриптографияВызовСервера.НовыйЗапросJSON(ДанныеДляПодписи);
	
	СтруктураКриптопровайдера = Неопределено;
	
	Попытка
		Криптопровайдер = Ждать КриптографияКлиентПовтИспАсинх.НовыйКриптопровайдерWSSocket();
		
		Если ПодписьСписка Тогда
			
			ОтветОтКриптопровайдера =  Ждать Криптопровайдер.GetCMSesSignАсинх(
				ПараметрыВзаимодействия.ИдентификаторКлиента,
				ПараметрыВзаимодействия.ИдентификаторСервиса,
				ПараметрыВзаимодействия.ДополнительныеПараметры,
				ДанныеДляПодписиJSON,
				ПараметрыВзаимодействия.ВключатьДанныеВПодпись,
				ПараметрыВзаимодействия.ВключатьШтампВремениВПодпись);
			
		Иначе
			
			ОтветОтКриптопровайдера = Ждать Криптопровайдер.GetCMSSignАсинх(
				ПараметрыВзаимодействия.ИдентификаторКлиента,
				ПараметрыВзаимодействия.ИдентификаторСервиса,
				ПараметрыВзаимодействия.ДополнительныеПараметры,
				ДанныеДляПодписиJSON,
				ПараметрыВзаимодействия.ВключатьДанныеВПодпись,
				ПараметрыВзаимодействия.ВключатьШтампВремениВПодпись);
			
		КонецЕсли;
		
		СтруктураКриптопровайдера = Ждать ПолучитьСтруктуруИзКриптопровайдераАсинх(Криптопровайдер);
		
		СтруктураОтвета = КриптографияКлиентСервер.ОбработатьОтветКриптопровайдера(ОтветОтКриптопровайдера.Значение, СтруктураКриптопровайдера, ПодписьСписка);
		
		Если СтруктураОтвета.ЭтоОшибка И Не ПараметрыВзаимодействия.ТихийРежим Тогда
			КриптографияКлиентСерверПереопределяемый.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Операция не выполнена. %1 %2'"),
					СтруктураОтвета.КодОшибки,
					СтруктураОтвета.ТекстОшибки)
				);
		КонецЕсли;
		
		Возврат СтруктураОтвета;
		
	Исключение
		
		Если СтруктураКриптопровайдера = Неопределено Тогда
			СтруктураКриптопровайдера = Ждать ПолучитьСтруктуруИзКриптопровайдераАсинх(Криптопровайдер);
		КонецЕсли;
		
		КриптографияКлиентСервер.ОбработатьИсключениеКриптопровайдера(СтруктураКриптопровайдера, ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область ПодписьXML

// Создает цифровую подпись (ЭЦП) в формате XML, асинхронный вызов.
// Параметры:
//  ДанныеДляПодписи - Массив или Строка – данные для подписания.
//  ПараметрыВзаимодействия - Структура – настройки взаимодействия с криптопровайдером.
// Возвращаемое значение:
//   Структура – результат подписи, включая статус и служебные данные.
//
Асинх Функция СоздатьЭЦП_XML(Знач ДанныеДляПодписи, ПараметрыВзаимодействия, ИспользоватьНастройкуМестаКриптографии = Истина) Экспорт
	
	Если ИспользоватьНастройкуМестаКриптографии Тогда
		Если Не КриптографияВызовСервера.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
			Результат = КриптографияВызовСервера.СоздатьЭЦП_XML(ДанныеДляПодписи, ПараметрыВзаимодействия);
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	ПодписьСписка = ТипЗнч(ДанныеДляПодписи) = Тип("Массив");
	
	ДанныеДляПодписи = КриптографияКлиентСервер.ПреобразоватьДанныеВBase64(ДанныеДляПодписи, ПодписьСписка, ПараметрыВзаимодействия);

	ДанныеДляПодписиJSON = КриптографияВызовСервера.НовыйЗапросJSON(ДанныеДляПодписи);
	
	СтруктураКриптопровайдера = Неопределено;

	Попытка
		Криптопровайдер = Ждать КриптографияКлиентПовтИспАсинх.НовыйКриптопровайдерWSSocket();
		
		Если ПодписьСписка Тогда
			
			ОтветОтКриптопровайдера = Ждать Криптопровайдер.GetXMLsSignАсинх(
				ПараметрыВзаимодействия.ИдентификаторКлиента,
				ПараметрыВзаимодействия.ИдентификаторСервиса,
				ПараметрыВзаимодействия.ДополнительныеПараметры,
				ДанныеДляПодписиJSON,
				ПараметрыВзаимодействия.ТегПодписываемыхДанных,
				ПараметрыВзаимодействия.ЭлементРазмещенияПодписиXML);
			
		Иначе
			
			ОтветОтКриптопровайдера = Ждать Криптопровайдер.GetXMLSignАсинх(
				ПараметрыВзаимодействия.ИдентификаторКлиента,
				ПараметрыВзаимодействия.ИдентификаторСервиса,
				ПараметрыВзаимодействия.ДополнительныеПараметры,
				ДанныеДляПодписиJSON,
				ПараметрыВзаимодействия.ТегПодписываемыхДанных,
				ПараметрыВзаимодействия.ЭлементРазмещенияПодписиXML);
			
		КонецЕсли;
		
		СтруктураКриптопровайдера = Ждать ПолучитьСтруктуруИзКриптопровайдераАсинх(Криптопровайдер);
		
		СтруктураОтвета = КриптографияКлиентСервер.ОбработатьОтветКриптопровайдера(ОтветОтКриптопровайдера.Значение, СтруктураКриптопровайдера, ПодписьСписка);
		
		Если СтруктураОтвета.ЭтоОшибка И Не ПараметрыВзаимодействия.ТихийРежим Тогда
			КриптографияКлиентСерверПереопределяемый.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Операция не выполнена. %1 %2'"),
					СтруктураОтвета.КодОшибки,
					СтруктураОтвета.ТекстОшибки)
				);
		КонецЕсли;
		
		Возврат СтруктураОтвета;
		
	Исключение
		
		Если СтруктураКриптопровайдера = Неопределено Тогда
			СтруктураКриптопровайдера = Ждать ПолучитьСтруктуруИзКриптопровайдераАсинх(Криптопровайдер);
		КонецЕсли;
		
		КриптографияКлиентСервер.ОбработатьИсключениеКриптопровайдера(СтруктураКриптопровайдера, ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область ПодписьRaw

// Создает цифровую подпись (ЭЦП) в формате сырой подписи Raw, асинхронный вызов.
// Параметры:
//  ДанныеДляПодписи - Массив или Строка – данные для подписания.
//  ПараметрыВзаимодействия - Структура – настройки взаимодействия с криптопровайдером.
// Возвращаемое значение:
//   Структура – результат подписи, включая статус и служебные данные.
//
Асинх Функция СоздатьЭЦП_Raw(Знач ДанныеДляПодписи, ПараметрыВзаимодействия, ИспользоватьНастройкуМестаКриптографии = Истина) Экспорт
	
	Если ИспользоватьНастройкуМестаКриптографии Тогда
		Если Не КриптографияВызовСервера.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
			Результат = КриптографияВызовСервера.СоздатьЭЦП_Raw(ДанныеДляПодписи, ПараметрыВзаимодействия);
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	ПодписьСписка = ТипЗнч(ДанныеДляПодписи) = Тип("Массив");
	
	ДанныеДляПодписи = КриптографияКлиентСервер.ПреобразоватьДанныеВBase64(ДанныеДляПодписи, ПодписьСписка, ПараметрыВзаимодействия);

	ДанныеДляПодписиJSON = КриптографияВызовСервера.НовыйЗапросJSON(ДанныеДляПодписи);
	
	СтруктураКриптопровайдера = Неопределено;

	Попытка
		Криптопровайдер = Ждать КриптографияКлиентПовтИспАсинх.НовыйКриптопровайдерWSSocket();
		
		Если ПодписьСписка Тогда
			
			ОтветОтКриптопровайдера = Ждать Криптопровайдер.GetRawsSignАсинх(
				ПараметрыВзаимодействия.ИдентификаторКлиента,
				ПараметрыВзаимодействия.ИдентификаторСервиса,
				ПараметрыВзаимодействия.ДополнительныеПараметры,
				ДанныеДляПодписиJSON);
			
		Иначе
			
			ОтветОтКриптопровайдера = Ждать Криптопровайдер.GetRawSignАсинх(
				ПараметрыВзаимодействия.ИдентификаторКлиента,
				ПараметрыВзаимодействия.ИдентификаторСервиса,
				ПараметрыВзаимодействия.ДополнительныеПараметры,
				ДанныеДляПодписиJSON);
			
		КонецЕсли;
		
		СтруктураКриптопровайдера = Ждать ПолучитьСтруктуруИзКриптопровайдераАсинх(Криптопровайдер);
		
		СтруктураОтвета = КриптографияКлиентСервер.ОбработатьОтветКриптопровайдера(ОтветОтКриптопровайдера.Значение, СтруктураКриптопровайдера, ПодписьСписка);
		
		Если СтруктураОтвета.ЭтоОшибка И Не ПараметрыВзаимодействия.ТихийРежим Тогда
			КриптографияКлиентСерверПереопределяемый.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Операция не выполнена. %1 %2'"),
					СтруктураОтвета.КодОшибки,
					СтруктураОтвета.ТекстОшибки)
				);
		КонецЕсли;
		
		Возврат СтруктураОтвета;
		
	Исключение
		
		Если СтруктураКриптопровайдера = Неопределено Тогда
			СтруктураКриптопровайдера = Ждать ПолучитьСтруктуруИзКриптопровайдераАсинх(Криптопровайдер);
		КонецЕсли;
		
		КриптографияКлиентСервер.ОбработатьИсключениеКриптопровайдера(СтруктураКриптопровайдера, ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область ДанныеСертификата

// Получает данный сертификата ключа, асинхронный вызов.
// Параметры:
//  ПараметрыВзаимодействия - Структура – настройки взаимодействия с криптопровайдером.
// Возвращаемое значение:
//   Структура – результат, включая статус и служебные данные.
//
Асинх Функция ПолучитьДанныеСертификата(ПараметрыВзаимодействия, ИспользоватьНастройкуМестаКриптографии = Истина) Экспорт
	
	Если ИспользоватьНастройкуМестаКриптографии Тогда
		Если Не КриптографияВызовСервера.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
			Результат = КриптографияВызовСервера.ПолучитьДанныеСертификата(ПараметрыВзаимодействия);
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураКриптопровайдера = Неопределено;

	Попытка
		Криптопровайдер = Ждать КриптографияКлиентПовтИспАсинх.НовыйКриптопровайдерWSSocket();
		
		ОтветОтКриптопровайдера = Ждать Криптопровайдер.GetKeyInfoАсинх(
				ПараметрыВзаимодействия.ИдентификаторКлиента,
				ПараметрыВзаимодействия.ИдентификаторСервиса,
				ПараметрыВзаимодействия.ДополнительныеПараметры);
			
		СтруктураКриптопровайдера = Ждать ПолучитьСтруктуруИзКриптопровайдераАсинх(Криптопровайдер);
		
		СтруктураОтвета = КриптографияКлиентСервер.ОбработатьОтветКриптопровайдера(ОтветОтКриптопровайдера.Значение, СтруктураКриптопровайдера, Ложь);
		
		Если СтруктураОтвета.ЭтоОшибка И Не ПараметрыВзаимодействия.ТихийРежим Тогда
			КриптографияКлиентСерверПереопределяемый.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Операция не выполнена. %1 %2'"),
					СтруктураОтвета.КодОшибки,
					СтруктураОтвета.ТекстОшибки)
				);
		КонецЕсли;
		
		Возврат СтруктураОтвета;
		
	Исключение
		
		Если СтруктураКриптопровайдера = Неопределено Тогда
			СтруктураКриптопровайдера = Ждать ПолучитьСтруктуруИзКриптопровайдераАсинх(Криптопровайдер);
		КонецЕсли;
		
		КриптографияКлиентСервер.ОбработатьИсключениеКриптопровайдера(СтруктураКриптопровайдера, ИнформацияОбОшибке()); 
		
	КонецПопытки;
	
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область ДополнительныеСведения

// Получает дополнительные сведения работы внешней компоненты, асинхронный вызов.
// Параметры:
//  ПараметрыВзаимодействия - Структура – настройки взаимодействия с криптопровайдером.
// Возвращаемое значение:
//   Структура – результат, включая статус и служебные данные.
//
Асинх Функция ПолучитьДополнительныеСведения(ПараметрыВзаимодействия) Экспорт
	
	СтруктураКриптопровайдера = Неопределено;
	
	Попытка
		Криптопровайдер = Ждать КриптографияКлиентПовтИспАсинх.НовыйКриптопровайдерWSSocket();
		
		ОтветОтКриптопровайдера = Ждать Криптопровайдер.GetAdditionalInfoАсинх();
			
		СтруктураКриптопровайдера =Ждать ПолучитьСтруктуруИзКриптопровайдераАсинх(Криптопровайдер);
		
		СтруктураОтвета = КриптографияКлиентСервер.ОбработатьОтветКриптопровайдера(ОтветОтКриптопровайдера.Значение, СтруктураКриптопровайдера, Ложь);
		
		Если СтруктураОтвета.ЭтоОшибка И Не ПараметрыВзаимодействия.ТихийРежим Тогда
			КриптографияКлиентСерверПереопределяемый.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Операция не выполнена. %1 %2'"),
					СтруктураОтвета.КодОшибки,
					СтруктураОтвета.ТекстОшибки)
				);
		КонецЕсли;
		
		Возврат СтруктураОтвета;
		
	Исключение
		
		Если СтруктураКриптопровайдера = Неопределено Тогда
			СтруктураКриптопровайдера = Ждать ПолучитьСтруктуруИзКриптопровайдераАсинх(Криптопровайдер);
		КонецЕсли;
		
		КриптографияКлиентСервер.ОбработатьИсключениеКриптопровайдера(СтруктураКриптопровайдера, ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получить структуру данных из криптопровайдера, асинхронный вызов.
//
// Параметры:
//  Криптопровайдер  - Неопределено или Объект - Криптопровайдер, из которого необходимо получить данные.
//
// Возвращаемое значение:
//   Структура       - Структура - Структура, содержащая данные из криптопровайдера:
//                      * СлужебныеДанные - служебные данные криптопровайдера;
//                      * Версия - версия криптопровайдера;
//                      * КодОшибки - код ошибки, возвращенный криптопровайдером;
//                      * ТекстОшибки - текст ошибки, возвращенный криптопровайдером.
//
Асинх Функция ПолучитьСтруктуруИзКриптопровайдераАсинх(Криптопровайдер)
	СтруктураКриптопровайдера = Новый Структура("СлужебныеДанные,Версия,КодОшибки,ТекстОшибки",
		"","","","");
	
	Если Криптопровайдер <> Неопределено Тогда
		СтруктураКриптопровайдера.СлужебныеДанные	= Ждать КриптоПровайдер.ПолучитьServiceDataTicketАсинх();
		СтруктураКриптопровайдера.Версия			= Ждать Криптопровайдер.ПолучитьВерсияАсинх();
		СтруктураКриптопровайдера.КодОшибки			= Ждать Криптопровайдер.ПолучитьКодОшибкиАсинх();
		СтруктураКриптопровайдера.ТекстОшибки		= Ждать Криптопровайдер.ПолучитьТекстОшибкиАсинх();
	КонецЕсли;
	
	Возврат СтруктураКриптопровайдера;
КонецФункции

#КонецОбласти