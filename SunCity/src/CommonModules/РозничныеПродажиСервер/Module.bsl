#Область ПрограммныйИнтерфейс

#Область ФункцииСводногоОтчета 

// Функция заполнения документа СводныйОтчетПоКассовойСмене.
//
Функция ПолучитьОтчетыОРозничныхПродажахДляСводногоОтчета(СтруктураПараметров) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтчетККМ.Ссылка КАК ОтчетОРозничныхПродажах,
	|	ОтчетККМ.КассаККМ.Владелец КАК Организация
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетККМ
	|ГДЕ
	|	ОтчетККМ.Проведен
	|	И ОтчетККМ.Магазин = &Магазин
	|	И &ОтчетККМУсловиеОрганизация
	|	И ОтчетККМ.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И (НЕ ОтчетККМ.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах
	|				ИЗ
	|					Документ.СводныйОтчетПоКассовойСмене.ОтчетыОРозничныхПродажах КАК СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах
	|				ГДЕ
	|					СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.Ссылка.Проведен
	|					И СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.Ссылка <> &ЭтотСводныйОтчетПоКассовойСмене
	|					И СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах.Магазин = &Магазин
	|					И СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|					И &СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажахУсловиеОрганизация))
	|ИТОГИ ПО
	|	Организация,
	|	ОтчетОРозничныхПродажах";
	
	Запрос.УстановитьПараметр("Магазин", СтруктураПараметров.Магазин);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(СтруктураПараметров.Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(СтруктураПараметров.Дата));
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтчетККМУсловиеОрганизация", "ОтчетККМ.Организация = &Организация");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажахУсловиеОрганизация", "СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах.Организация = &Организация");
		
		Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтчетККМУсловиеОрганизация", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажахУсловиеОрганизация", "ИСТИНА");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЭтотСводныйОтчетПоКассовойСмене", СтруктураПараметров.ДокументСсылка);
	
	ДеревоОтчетов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат ДеревоОтчетов;

КонецФункции

// Процедура проверки заполнения документа СводныйОтчетПоКассовойСмене.
//
Процедура ПроверитьСводныйОтчет(ДокументОбъект, ИмяТабличнойЧасти, Отказ) Экспорт
	
	ЗапросПоТабличнойЧасти = Новый Запрос;
	ЗапросПоТабличнойЧасти.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах КАК Документ.ОтчетОРозничныхПродажах) КАК ОтчетОРозничныхПродажах
	|ПОМЕСТИТЬ ТаблицаОтчетовРозничныхПродаж
	|ИЗ
	|	&ОтчетыОРозничныхПродажах КАК СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.НомерСтроки) КАК НомерСтроки,
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах
	|ПОМЕСТИТЬ ТаблицаОтчетовРозничныхПродажСвернутоПоОтчетам
	|ИЗ
	|	ТаблицаОтчетовРозничныхПродаж КАК СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах
	|
	|СГРУППИРОВАТЬ ПО
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах,
	|	КОЛИЧЕСТВО(СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах) КАК КоличествоДокументов
	|ПОМЕСТИТЬ ТаблицаКоличестваОтчетов
	|ИЗ
	|	ТаблицаОтчетовРозничныхПродаж КАК СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах
	|
	|СГРУППИРОВАТЬ ПО
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКоличестваОтчетов.ОтчетОРозничныхПродажах,
	|	ТаблицаКоличестваОтчетов.ОтчетОРозничныхПродажах.Представление КАК ПредставлениеДокумента,
	|	ТаблицаКоличестваОтчетов.КоличествоДокументов,
	|	ТаблицаОтчетовРозничныхПродажСвернутоПоОтчетам.НомерСтроки
	|ИЗ
	|	ТаблицаКоличестваОтчетов КАК ТаблицаКоличестваОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтчетовРозничныхПродажСвернутоПоОтчетам КАК ТаблицаОтчетовРозничныхПродажСвернутоПоОтчетам
	|		ПО ТаблицаКоличестваОтчетов.ОтчетОРозничныхПродажах = ТаблицаОтчетовРозничныхПродажСвернутоПоОтчетам.ОтчетОРозничныхПродажах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах,
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах.Представление КАК ПредставлениеДокумента,
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах.Проведен КАК Проведен,
	|	ВложенныйЗапрос.Ссылка.Представление КАК ПредставлениеПроведенногоСводногоОтчета,
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаОтчетовРозничныхПродаж КАК СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах2.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах,
	|			СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах2.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.СводныйОтчетПоКассовойСмене.ОтчетыОРозничныхПродажах КАК СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах2
	|		ГДЕ
	|			СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах2.Ссылка <> &ДокументСсылка
	|			И СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах2.Ссылка.Проведен) КАК ВложенныйЗапрос
	|		ПО СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах = ВложенныйЗапрос.ОтчетОРозничныхПродажах
	|ИТОГИ ПО
	|	ОтчетОРозничныхПродажах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах,
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах.Представление КАК ПредставлениеДокумента,
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах.Проведен КАК Проведен,
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаОтчетовРозничныхПродаж КАК СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах
	|ГДЕ
	|	(НЕ СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах.Проведен)";
	
	ЗапросПоТабличнойЧасти.УстановитьПараметр("ДокументСсылка"          , ДокументОбъект.Ссылка);
	ЗапросПоТабличнойЧасти.УстановитьПараметр("ОтчетыОРозничныхПродажах", ДокументОбъект[ИмяТабличнойЧасти].Выгрузить());
	
	РезультатПакетногоВыполненияЗапроса = ЗапросПоТабличнойЧасти.ВыполнитьПакет();
	
	ВыборкаПоКоличествуДокументов = РезультатПакетногоВыполненияЗапроса[3].Выбрать();
	Пока ВыборкаПоКоличествуДокументов.Следующий() Цикл
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 встречается в табличной части %2 раз(а)! Повторения документов быть не должно!'"),
			ВыборкаПоКоличествуДокументов.ПредставлениеДокумента,
			Строка(ВыборкаПоКоличествуДокументов.КоличествоДокументов)
		);
		ОбщегоНазначения.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			ИмяТабличнойЧасти+"[" + (ВыборкаПоКоличествуДокументов.НомерСтроки - 1) + "].ОтчетОРозничныхПродажах" ,
			,
			Отказ
		);
		
	КонецЦикла;
	
	ВыборкаПоТабличнойЧасти = РезультатПакетногоВыполненияЗапроса[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоТабличнойЧасти.Следующий() Цикл
		
		ВыборкаПоСводнымОтчетам = ВыборкаПоТабличнойЧасти.Выбрать();
		
		Пока ВыборкаПоСводнымОтчетам.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаПоСводнымОтчетам.ПредставлениеПроведенногоСводногоОтчета) Тогда
				
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1 уже включен в %2.'"),
					ВыборкаПоСводнымОтчетам.ПредставлениеДокумента,
					ВыборкаПоСводнымОтчетам.ПредставлениеПроведенногоСводногоОтчета
				);
				ОбщегоНазначения.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					ИмяТабличнойЧасти+"[" + (ВыборкаПоСводнымОтчетам.НомерСтроки - 1) + "].ОтчетОРозничныхПродажах" ,
					,
					Отказ
				);
				
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ВыборкаПоТабличнойЧасти = РезультатПакетногоВыполненияЗапроса[5].Выбрать();
	
	Пока ВыборкаПоТабличнойЧасти.Следующий() Цикл
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 не проведен! В табличной части не должно быть непроведенных документов!'"),
			ВыборкаПоТабличнойЧасти.ПредставлениеДокумента
		);
		ОбщегоНазначения.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			ИмяТабличнойЧасти+"[" + (ВыборкаПоТабличнойЧасти.НомерСтроки - 1) + "].ОтчетОРозничныхПродажах" ,
			,
			Отказ
		);
		
	КонецЦикла;
	
	
КонецПроцедуры

#КонецОбласти

#Область ФункцииПроверкиСостоянияКассовойСмены

// Функция получает открытую кассовую смену по Кассе ККМ в заданный период.
// Используется для контроля пересечения кассовых смен.
// За один период может одновременно существовать только одна кассовая смена.
//
Функция ПолучитьОткрытуюКассовуюСмену(КассаККМ, КассоваяСмена, НачалоКассовойСмены, ОкончаниеКассовойСмены) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КассоваяСмена.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.НачалоКассовойСмены <= &НачалоКассовойСмены
	|	И ВЫБОР
	|			КОГДА КассоваяСмена.ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены >= &НачалоКассовойСмены
	|		КОНЕЦ
	|	И КассоваяСмена.КассаККМ = &КассаККМ
	|	И КассоваяСмена.Ссылка <> &КассоваяСмена
	|	И КассоваяСмена.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	&ОкончаниеКассовойСмены <> ДАТАВРЕМЯ(1, 1, 1)
	|	И КассоваяСмена.НачалоКассовойСмены <= &ОкончаниеКассовойСмены
	|	И ВЫБОР
	|			КОГДА КассоваяСмена.ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены >= &ОкончаниеКассовойСмены
	|		КОНЕЦ
	|	И КассоваяСмена.КассаККМ = &КассаККМ
	|	И КассоваяСмена.Ссылка <> &КассоваяСмена
	|	И КассоваяСмена.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	&ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|	И КассоваяСмена.НачалоКассовойСмены >= &НачалоКассовойСмены
	|	И КассоваяСмена.КассаККМ = &КассаККМ
	|	И КассоваяСмена.Ссылка <> &КассоваяСмена
	|	И КассоваяСмена.Проведен";
	
	Запрос.УстановитьПараметр("КассаККМ",               КассаККМ);
	Запрос.УстановитьПараметр("НачалоКассовойСмены",    НачалоКассовойСмены);
	Запрос.УстановитьПараметр("ОкончаниеКассовойСмены", ОкончаниеКассовойСмены);
	Запрос.УстановитьПараметр("КассоваяСмена",          КассоваяСмена);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция возвращает пустую структуру состояния кассовой смены.
//
Функция ПолучитьСтруктуруОписанияКассовойСмены()
	
	СостояниеКассовойСмены = Новый Структура;
	СостояниеКассовойСмены.Вставить("ДатаИзмененияСтатуса");
	СостояниеКассовойСмены.Вставить("СтатусКассовойСмены");
	СостояниеКассовойСмены.Вставить("КассоваяСмена");
	СостояниеКассовойСмены.Вставить("НаличностьВКассе");
	СостояниеКассовойСмены.Вставить("НомерКассовойСмены");
	СостояниеКассовойСмены.Вставить("СменаОткрыта", Ложь);
	
	// Описание реквизитов кассовой смены.
	СостояниеКассовойСмены.Вставить("КассаККМ");
	СостояниеКассовойСмены.Вставить("Организация");
	СостояниеКассовойСмены.Вставить("Кассир");
	СостояниеКассовойСмены.Вставить("Магазин");
	
	Возврат СостояниеКассовойСмены;
	
КонецФункции

// Функция возвращает структуру, характеризующую состояние последней кассовой смены по кассе ККМ.
//
Функция ПолучитьСостояниеКассовойСмены(КассаККМ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Номер КАК НомерКассовойСмены,
	|	КассоваяСмена.Ссылка КАК КассоваяСмена,
	|	КассоваяСмена.Статус КАК СтатусКассовойСмены,
	|	КассоваяСмена.КассаККМ КАК КассаККМ,
	|	КассоваяСмена.Организация КАК Организация,
	|	КассоваяСмена.Магазин КАК Магазин,
	|	КассоваяСмена.Кассир КАК Кассир,
	|	ВЫБОР
	|		КОГДА КассоваяСмена.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СменаОткрыта,
	|	ВЫБОР
	|		КОГДА КассоваяСмена.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА КассоваяСмена.НачалоКассовойСмены
	|		ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены
	|	КОНЕЦ КАК ДатаИзмененияСтатуса,
	|	ЕСТЬNULL(ДенежныеСредстваККМОстатки.СуммаОстаток, 0) КАК НаличностьВКассе
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваККМ.Остатки(
	|				,
	|				КассаККМ = &КассаККМ
	|					И ДоговорКонтрагента = &ПустойДоговор) КАК ДенежныеСредстваККМОстатки
	|		ПО КассоваяСмена.КассаККМ = ДенежныеСредстваККМОстатки.КассаККМ
	|ГДЕ
	|	КассоваяСмена.Проведен
	|	И КассоваяСмена.КассаККМ = &КассаККМ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КассоваяСмена.Дата УБЫВ,
	|	КассоваяСмена УБЫВ";
	
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	Запрос.УстановитьПараметр("ПустойДоговор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ОписаниеКассовойСмены = ПолучитьСтруктуруОписанияКассовойСмены();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеКассовойСмены, Выборка);
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ДенежныеСредстваККМОстатки.СуммаОстаток, 0) КАК НаличностьВКассе
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваККМ.Остатки(
		|				,
		|				КассаККМ = &КассаККМ
		|					И ДоговорКонтрагента = &ПустойДоговор) КАК ДенежныеСредстваККМОстатки
		|		ПО (ДенежныеСредстваККМОстатки.КассаККМ = КассыККМ.Ссылка)
		|ГДЕ
		|	КассыККМ.Ссылка = &КассаККМ";
		
		Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
		Запрос.УстановитьПараметр("ПустойДоговор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ОписаниеКассовойСмены.НаличностьВКассе    = Выборка.НаличностьВКассе;
		
	КонецЕсли;
	
	Возврат ОписаниеКассовойСмены;
	
КонецФункции

// Функция выполняет открытие кассовой смены.
//
Функция ОткрытьКассовуюСмену(КассаККМ, ОписаниеОшибки = "", ТекстПереходящегоОстатка = "") Экспорт
	
	Результат = Истина;
	
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСмены(КассаККМ);
	
	ДатаОткрытияКассовойСмены = ТекущаяДатаСеанса();
	
	ТекстПереходящегоОстатка = "";
	Если СтруктураСостояниеКассовойСмены.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта Тогда
		
		// Если смена открыта, то с момента открытия должно пройти не больше чем 24 часа.
		Если ДатаОткрытияКассовойСмены - СтруктураСостояниеКассовойСмены.ДатаИзмененияСтатуса < 86400 Тогда
			
			// Все в порядке
			СформироватьТекстПриОткрытииСмены(КассаККМ, ТекстПереходящегоОстатка);
			
		Иначе
			
			Результат = Ложь;
			// Вероятно, что смена была не закрыта.
			ОписаниеОшибки = НСтр("ru = 'С момента открытия кассовой смены истекло более 24 часов.'");
			
		КонецЕсли;
		
	Иначе
		
		// Смена закрыта. Откроем новую кассовую смену.
		
		НоваяКассоваяСмена = Документы.КассоваяСмена.СоздатьДокумент();
		РеквизитыКассыККМ = Справочники.КассыККМ.РеквизитыКассыККМ(КассаККМ);
		ЗаполнитьЗначенияСвойств(НоваяКассоваяСмена, РеквизитыКассыККМ);
		
		НоваяКассоваяСмена.Дата                   = ДатаОткрытияКассовойСмены;
		НоваяКассоваяСмена.Статус    = Перечисления.СтатусыКассовойСмены.Открыта;
		НоваяКассоваяСмена.НачалоКассовойСмены    = ДатаОткрытияКассовойСмены;
		НоваяКассоваяСмена.ОкончаниеКассовойСмены = '00010101';
		НоваяКассоваяСмена.Кассир                 = Пользователи.ТекущийПользователь();
		
		Если НоваяКассоваяСмена.ПроверитьЗаполнение() Тогда
			НоваяКассоваяСмена.Записать(РежимЗаписиДокумента.Проведение);
			
			СформироватьТекстПриОткрытииСмены(КассаККМ, ТекстПереходящегоОстатка);
			
		Иначе
			Результат = Ложь;
			ОписаниеОшибки = НСтр("ru = 'Проверьте настройки кассы ККМ.'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура выполняет закрытие кассовой смены.
//
Функция ЗакрытьКассовуюСмену(КассаККМ, ОписаниеОшибки = "", СсылкаНаОтчет = Неопределено) Экспорт
	
	Результат = Истина;
	
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСмены(КассаККМ);
	
	Если СтруктураСостояниеКассовойСмены.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта Тогда
		
		КассоваяСменаОбъект = СтруктураСостояниеКассовойСмены.КассоваяСмена.ПолучитьОбъект();
		КассоваяСменаОбъект.Дата                   = ТекущаяДатаСеанса();
		КассоваяСменаОбъект.Статус    = Перечисления.СтатусыКассовойСмены.Закрыта;
		КассоваяСменаОбъект.ОкончаниеКассовойСмены = КассоваяСменаОбъект.Дата;
		
		Попытка
			КассоваяСменаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Если НЕ СсылкаНаОтчет = Неопределено Тогда
				
				ОбъектОтчет = СсылкаНаОтчет.ПолучитьОбъект();
				ОбъектОтчет.КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
				ОбъектОтчет.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		Исключение
			
			Результат = Ложь;
			
			ОписаниеОшибки = НСтр("ru = 'При закрытии кассовой смены произошла ошибка.
			                            |Дополнительное описание:
			                            |%ДополнительноеОписание%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
			
		КонецПопытки;
		
	Иначе
		
		// Смена не открыта.
		Попытка
			Если НЕ СсылкаНаОтчет = Неопределено Тогда
				ОбъектОтчет = СсылкаНаОтчет.ПолучитьОбъект();
				ОбъектОтчет.КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
				ОбъектОтчет.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		Исключение
			
			Результат = Ложь;
			
			ОписаниеОшибки = НСтр("ru = 'При закрытии кассовой смены произошла ошибка.
			                            |Дополнительное описание:
			                            |%ДополнительноеОписание%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция проверяет состояние кассовой смены на дату. Если смена не открыта - возвращается описание ошибки.
//
Функция СменаОткрыта(КассоваяСмена, Дата, ОписаниеОшибки = "") Экспорт
	
	СменаОткрыта = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КассоваяСмена.Статус    КАК СтатусКассовойСмены,
	|	КассоваяСмена.НачалоКассовойСмены    КАК НачалоКассовойСмены,
	|	КассоваяСмена.ОкончаниеКассовойСмены КАК ОкончаниеКассовойСмены
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.Проведен
	|	И КассоваяСмена.Ссылка = &КассоваяСмена";
	
	Запрос.УстановитьПараметр("КассоваяСмена", КассоваяСмена);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта Тогда
			
			// Если смена открыта, то с момента открытия должно пройти не больше чем 24 часа.
			Если Дата - Выборка.НачалоКассовойСмены < 86400 Тогда
				
				СменаОткрыта = Истина;
				
			Иначе
				
				ОписаниеОшибки = НСтр("ru = 'С момента открытия кассовой смены истекло более 24 часов.'");
				СменаОткрыта = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Выборка.СтатусКассовойСмены) Тогда
			
			Если Выборка.ОкончаниеКассовойСмены >= Дата И Выборка.НачалоКассовойСмены <= Дата Тогда
				
				СменаОткрыта = Истина;
				
			Иначе
				
				ОписаниеОшибки = НСтр("ru = 'Кассовая смена закрыта.'");
				СменаОткрыта = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ОписаниеОшибки = НСтр("ru = 'Кассовая смена не открыта.'");
		СменаОткрыта = Ложь;
		
	КонецЕсли;
	
	Возврат СменаОткрыта;
	
КонецФункции

// Функция возвращает текущую сумму положительного остатка денежных средств (ДС) по кассе ККМ.
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ
// Возвращаемое значение:
//  Число
//
Функция СуммаОстаткаДСПоКассеККМ(КассаККМ, ДоговорКонтрагента = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросОстатокДСвКассе = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДенежныеСредстваККМОстатки.СуммаОстаток КАК СуммаОстатка
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваККМ.Остатки(
		|			,
		|			КассаККМ = &КассаККМ
		|				И &УсловиеДоговорКонтрагента) КАК ДенежныеСредстваККМОстатки
		|ГДЕ
		|	ДенежныеСредстваККМОстатки.СуммаОстаток > 0";
	
	Если ДоговорКонтрагента = Неопределено Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьАгентскиеПлатежиИРазделениеВыручки") Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДоговорКонтрагента", "Истина");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДоговорКонтрагента", "ДоговорКонтрагента = &ДоговорКонтрагента");
			ЗапросОстатокДСвКассе.УстановитьПараметр("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		КонецЕсли;
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДоговорКонтрагента", "ДоговорКонтрагента = &ДоговорКонтрагента");
		ЗапросОстатокДСвКассе.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	КонецЕсли;
	
	ЗапросОстатокДСвКассе.Текст = ТекстЗапроса;
	ЗапросОстатокДСвКассе.УстановитьПараметр("КассаККМ", КассаККМ);
	
	ВыборкаОстатокДСвКассе = ЗапросОстатокДСвКассе.Выполнить().Выбрать();
	Если ВыборкаОстатокДСвКассе.Следующий() Тогда
		СуммаОстатка = ВыборкаОстатокДСвКассе.СуммаОстатка;
	Иначе
		СуммаОстатка = 0;
	КонецЕсли;
	
	Возврат СуммаОстатка;
	
КонецФункции // СуммаОстаткаДСПоКассеККМ()

// Функция возвращает структуру агентских договоров,
// по которым числятся суммы положительного остатка денежных средств (ДС) по кассе ККМ
// в разрезе агентских договоров.
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ
// Возвращаемое значение:
//  Число
//
Функция МассивАгентскихДоговоровВКассеККМ(КассаККМ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросОстатокДСвКассе= Новый Запрос();
	ЗапросОстатокДСвКассе.Текст = 
	"ВЫБРАТЬ
	|	ДенежныеСредстваККМОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваККМ.Остатки(
	|			,
	|			КассаККМ = &КассаККМ
	|				И ДоговорКонтрагента <> &ПустойДоговор) КАК ДенежныеСредстваККМОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ДенежныеСредстваККМОстатки.ДоговорКонтрагента
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДенежныеСредстваККМОстатки.СуммаОстаток) > 0";
	
	ЗапросОстатокДСвКассе.УстановитьПараметр("КассаККМ", КассаККМ);
	ЗапросОстатокДСвКассе.УстановитьПараметр("ПустойДоговор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	ВыборкаОстатокДСвКассе = ЗапросОстатокДСвКассе.Выполнить().Выбрать();
	МассивДоговоров = Новый Массив;
	Пока ВыборкаОстатокДСвКассе.Следующий() Цикл
		МассивДоговоров.Добавить(ВыборкаОстатокДСвКассе.ДоговорКонтрагента);
	КонецЦикла;
	
	Возврат МассивДоговоров;
	
КонецФункции

// Возвращает массив открытых кассовых смен.
//
// Возвращаемое значение:
//   Массив - ДокументСсылка.КассоваяСмена
//
Функция НезакрытыеКассовыеСмены() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КассоваяСмена.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КассоваяСмена КАК КассоваяСмена
		|		ПО (КассоваяСмена.КассаККМ = КассыККМ.Ссылка)
		|			И (КассоваяСмена.Проведен)
		|			И (КассоваяСмена.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта))
		|ГДЕ
		|	НЕ КассыККМ.ПометкаУдаления
		|	И НЕ КассыККМ.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|	И НЕ КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ККМOffline)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#КонецОбласти

#Область ФункцииЗаказыПокупателей

// Процедура устанавливает в строках табличной части.
//
Функция УстановитьКлючВСтрокахТабличнойЧасти(Объект, ИмяТабличнойЧасти, РеквизитМаксимальныйКодСтроки = "МаксимальныйКодСтроки") Экспорт

	СтрокиБезКлюча = Объект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура("КодСтроки", 0));
	Если СтрокиБезКлюча.Количество() > 0 Тогда
		
		ТекущийКод = Объект[РеквизитМаксимальныйКодСтроки];
		
		Для Каждого СтрокаТовары Из СтрокиБезКлюча Цикл
			
			ТекущийКод = ТекущийКод + 1;
			СтрокаТовары.КодСтроки = ТекущийКод;
			
		КонецЦикла;
		
		Объект[РеквизитМаксимальныйКодСтроки] = ТекущийКод;
		
	КонецЕсли;

КонецФункции

// Процедура заполняет документ или обработку по остаткам заказа.
// 
Процедура ЗаполнитьПоОстаткамЗаказа(Объект, ЗаказПокупателя) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.КодСтроки КАК КодСтроки,
	|	СУММА(ВложенныйЗапрос.ЗаказаноОстаток) КАК ЗаказаноОстаток
	|ПОМЕСТИТЬ ТаблицаРегистра
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыПокупателейОстатки.Характеристика КАК Характеристика,
	|		ЗаказыПокупателейОстатки.КодСтроки КАК КодСтроки,
	|		ЗаказыПокупателейОстатки.ЗаказаноОстаток КАК ЗаказаноОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(, Заказ = &Заказ) КАК ЗаказыПокупателейОстатки
	|	ГДЕ
	|		ЗаказыПокупателейОстатки.ЗаказаноОстаток > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыПокупателей.Номенклатура,
	|		ЗаказыПокупателей.Характеристика,
	|		ЗаказыПокупателей.КодСтроки,
	|		ЗаказыПокупателей.Заказано
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей
	|	ГДЕ
	|		ЗаказыПокупателей.Регистратор = &Регистратор
	|		И ЗаказыПокупателей.Заказ = &Заказ) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяТовары.Характеристика КАК Характеристика,
	|	ЗаказПокупателяТовары.Количество КАК Количество,
	|	ЗаказПокупателяТовары.Упаковка КАК Упаковка,
	|	ЗаказПокупателяТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ЗаказПокупателяТовары.Цена КАК Цена,
	|	ЗаказПокупателяТовары.Продавец КАК Продавец,
	|	ЗаказПокупателяТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ЗаказПокупателяТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ЗаказПокупателяТовары.Сумма КАК Сумма,
	|	ЗаказПокупателяТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПокупателяТовары.СуммаНДС КАК СуммаНДС,
	|	ЗаказПокупателяТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ЗаказПокупателяТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ЗаказПокупателяТовары.КлючСвязи КАК КлючСвязи,
	|	ЗаказПокупателяТовары.КодСтроки КАК КодСтроки,
	|	ЗаказПокупателяТовары.Резервировать КАК Резервировать,
	|	ЗаказПокупателяТовары.ПродажаПодарка КАК ПродажаПодарка,
	|	ЗаказПокупателяТовары.КлючСвязиУслугаАгента КАК КлючСвязиУслугаАгента,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяТовары.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателяТовары.Номенклатура.ДоговорКонтрагента
	|		ИНАЧЕ ЗаказПокупателяТовары.ДоговорКонтрагента
	|	КОНЕЦ КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка = &Заказ
	|	И ЗаказПокупателяТовары.Количество > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика КАК Характеристика,
	|	ТаблицаДокумента.Количество КАК Количество,
	|	ТаблицаДокумента.Упаковка КАК Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаДокумента.Цена КАК Цена,
	|	ТаблицаДокумента.Продавец КАК Продавец,
	|	ТаблицаДокумента.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ТаблицаДокумента.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ТаблицаДокумента.Сумма КАК Сумма,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
	|	ТаблицаДокумента.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ТаблицаДокумента.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ТаблицаДокумента.КлючСвязи КАК КлючСвязи,
	|	ТаблицаДокумента.КодСтроки КАК КодСтроки,
	|	ТаблицаДокумента.ПродажаПодарка КАК ПродажаПодарка,
	|	ТаблицаРегистра.ЗаказаноОстаток КАК ЗаказаноОстаток,
	|	ТаблицаДокумента.Резервировать КАК Резервировать,
	|	ТаблицаДокумента.КлючСвязиУслугаАгента КАК КлючСвязиУслугаАгента,
	|	ТаблицаДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ ТаблицаДокументРегистр
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРегистра КАК ТаблицаРегистра
	|		ПО ТаблицаДокумента.Номенклатура = ТаблицаРегистра.Номенклатура
	|			И ТаблицаДокумента.Характеристика = ТаблицаРегистра.Характеристика
	|			И ТаблицаДокумента.КодСтроки = ТаблицаРегистра.КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументРегистр.Номенклатура КАК Номенклатура,
	|	ТаблицаДокументРегистр.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА ТаблицаДокументРегистр.Упаковка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА ТаблицаДокументРегистр.КоличествоУпаковок
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	ТаблицаДокументРегистр.Цена КАК Цена,
	|	ТаблицаДокументРегистр.Продавец КАК Продавец,
	|	ТаблицаДокументРегистр.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ТаблицаДокументРегистр.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ТаблицаДокументРегистр.Сумма * ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток / ТаблицаДокументРегистр.Количество
	|	КОНЕЦ КАК Сумма,
	|	ТаблицаДокументРегистр.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДокументРегистр.СуммаНДС * ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток / ТаблицаДокументРегистр.Количество
	|	КОНЕЦ КАК СуммаНДС,
	|	ТаблицаДокументРегистр.СуммаАвтоматическойСкидки * ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток / ТаблицаДокументРегистр.Количество
	|	КОНЕЦ КАК СуммаАвтоматическойСкидки,
	|	ТаблицаДокументРегистр.СуммаРучнойСкидки * ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток / ТаблицаДокументРегистр.Количество
	|	КОНЕЦ КАК СуммаРучнойСкидки,
	|	ТаблицаДокументРегистр.КлючСвязи КАК КлючСвязи,
	|	ТаблицаДокументРегистр.КодСтроки КАК КодСтроки,
	|	ТаблицаДокументРегистр.ЗаказаноОстаток КАК Количество,
	|	&Заказ КАК ЗаказПокупателя,
	|	&Склад КАК Склад,
	|	ТаблицаДокументРегистр.ПродажаПодарка КАК ПродажаПодарка,
	|	ТаблицаДокументРегистр.Резервировать КАК Резервировать,
	|	СпрНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция) КАК ТабачнаяПродукция,
	|	ТаблицаДокументРегистр.КлючСвязиУслугаАгента КАК КлючСвязиУслугаАгента,
	|	ТаблицаДокументРегистр.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ИЗ
	|	ТаблицаДокументРегистр КАК ТаблицаДокументРегистр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТаблицаДокументРегистр.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	ТаблицаДокументРегистр.ЗаказаноОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументРегистр.КлючСвязи КАК КлючСвязи,
	|	ТаблицаДокументРегистр.Количество КАК Количество,
	|	ТаблицаДокументРегистр.ЗаказаноОстаток КАК ЗаказаноОстаток
	|ПОМЕСТИТЬ ТаблицаСкидокПоТоварам
	|ИЗ
	|	ТаблицаДокументРегистр КАК ТаблицаДокументРегистр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяСкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	ЗаказПокупателяСкидкиНаценки.Сумма КАК Сумма,
	|	ЗаказПокупателяСкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка
	|ПОМЕСТИТЬ ТаблицаДокументаСкидки
	|ИЗ
	|	Документ.ЗаказПокупателя.СкидкиНаценки КАК ЗаказПокупателяСкидкиНаценки
	|ГДЕ
	|	ЗаказПокупателяСкидкиНаценки.Ссылка = &Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументаСкидки.КлючСвязи КАК КлючСвязи,
	|	ТаблицаДокументаСкидки.Сумма * ВЫБОР
	|		КОГДА ТаблицаСкидокПоТоварам.Количество = ТаблицаСкидокПоТоварам.ЗаказаноОстаток
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаСкидокПоТоварам.ЗаказаноОстаток / ТаблицаСкидокПоТоварам.Количество
	|	КОНЕЦ КАК Сумма,
	|	ТаблицаДокументаСкидки.СкидкаНаценка КАК СкидкаНаценка
	|ИЗ
	|	ТаблицаСкидокПоТоварам КАК ТаблицаСкидокПоТоварам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументаСкидки КАК ТаблицаДокументаСкидки
	|		ПО ТаблицаСкидокПоТоварам.КлючСвязи = ТаблицаДокументаСкидки.КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЧекККМ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Проведен
	|	И ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|	И ЧекККМ.ЗаказПокупателя = &Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяПодарки.НомерСтроки КАК НомерСтроки,
	|	ЗаказПокупателяПодарки.СкидкаНаценка КАК СкидкаНаценка,
	|	ЗаказПокупателяПодарки.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяПодарки.Характеристика КАК Характеристика,
	|	ЗаказПокупателяПодарки.Количество КАК Количество,
	|	ЗаказПокупателяПодарки.Цена КАК Цена,
	|	ЗаказПокупателяПодарки.Сумма КАК Сумма,
	|	ЗаказПокупателяПодарки.Склад КАК Склад,
	|	ЗаказПокупателяПодарки.КлючСвязи КАК КлючСвязи,
	|	ЗаказПокупателяПодарки.Упаковка КАК Упаковка,
	|	ЗаказПокупателяПодарки.КоличествоУпаковок КАК КоличествоУпаковок
	|ИЗ
	|	Документ.ЗаказПокупателя.Подарки КАК ЗаказПокупателяПодарки
	|ГДЕ
	|	ЗаказПокупателяПодарки.Ссылка = &Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументаСкидки.СкидкаНаценка КАК СкидкаНаценка
	|ИЗ
	|	ТаблицаДокументаСкидки КАК ТаблицаДокументаСкидки
	|ГДЕ
	|	ТаблицаДокументаСкидки.СкидкаНаценка.Управляемая
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БонусныеБаллыКНачислению.КлючСвязи КАК КлючСвязи,
	|	БонусныеБаллыКНачислению.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	БонусныеБаллыКНачислению.СкидкаНаценка КАК СкидкаНаценка,
	|	БонусныеБаллыКНачислению.ДатаНачисления КАК ДатаНачисления,
	|	БонусныеБаллыКНачислению.ДатаСписания КАК ДатаСписания,
	|	БонусныеБаллыКНачислению.КоличествоБонусныхБаллов КАК КоличествоБонусныхБаллов
	|ПОМЕСТИТЬ ТаблицаДокументаБонусы
	|ИЗ
	|	Документ.ЗаказПокупателя.БонусныеБаллыКНачислению КАК БонусныеБаллыКНачислению
	|ГДЕ
	|	БонусныеБаллыКНачислению.Ссылка = &Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументаБонусы.КлючСвязи КАК КлючСвязи,
	|	ТаблицаДокументаБонусы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	ТаблицаДокументаБонусы.СкидкаНаценка КАК СкидкаНаценка,
	|	ТаблицаДокументаБонусы.ДатаНачисления КАК ДатаНачисления,
	|	ТаблицаДокументаБонусы.ДатаСписания КАК ДатаСписания,
	|	ТаблицаДокументаБонусы.КоличествоБонусныхБаллов * ВЫБОР
	|		КОГДА ТаблицаСкидокПоТоварам.Количество = ТаблицаСкидокПоТоварам.ЗаказаноОстаток
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаСкидокПоТоварам.ЗаказаноОстаток / ТаблицаСкидокПоТоварам.Количество
	|	КОНЕЦ КАК КоличествоБонусныхБаллов
	|ИЗ
	|	ТаблицаСкидокПоТоварам КАК ТаблицаСкидокПоТоварам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументаБонусы КАК ТаблицаДокументаБонусы
	|		ПО ТаблицаСкидокПоТоварам.КлючСвязи = ТаблицаДокументаБонусы.КлючСвязи";
	
	Запрос.УстановитьПараметр("Заказ",       ЗаказПокупателя);
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	Запрос.УстановитьПараметр("Склад",       ЗаказПокупателя.Склад);
	
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаТоваров = Результат[3].Выгрузить();
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияТоваров") Тогда 
		Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл 
			
			Если СтрокаТаблицы.ТабачнаяПродукция Тогда 
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Объект.Товары.Добавить(), СтрокаТаблицы);
			
		КонецЦикла;
	Иначе 
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаТоваров, Объект["Товары"]);
	КонецЕсли;
	
	ТаблицаСкидок = Результат[6].Выгрузить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаСкидок, Объект["СкидкиНаценки"]);
	
	МетаданныеДокумента = Объект.Ссылка.Метаданные();
	
	Если Результат[7].Пустой() 
		И ОбщегоНазначенияРТ.ЕстьТЧОбъекта("Подарки", МетаданныеДокумента) Тогда
		ТаблицаПодарков = Результат[8].Выгрузить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПодарков, Объект["Подарки"]);
	КонецЕсли;
	
	Если ОбщегоНазначенияРТ.ЕстьТЧОбъекта("УправляемыеСкидки", МетаданныеДокумента) Тогда
		ТаблицаУправляемыеСкидки = Результат[9].Выгрузить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаУправляемыеСкидки, Объект["УправляемыеСкидки"]);
	КонецЕсли;
	
	Если ОбщегоНазначенияРТ.ЕстьТЧОбъекта("БонусныеБаллыКНачислению", МетаданныеДокумента) Тогда
		ТаблицаБонусов = Результат[11].Выгрузить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаБонусов, Объект["БонусныеБаллыКНачислению"]);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоОстаткуЗаказа()

// Процедура заполняет табличную часть по остаткам заказа без резерва.
//
Процедура ЗаполнитьТабличнуюЧастьПоОстаткамЗаказаБезРезерва(Объект, ИмяТабличнойЧастиТовары, ЗаказПокупателя) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.Номенклатура,
	|	ЗаказыПокупателейОстатки.Характеристика,
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток,
	|	ЗаказыПокупателейОстатки.КодСтроки
	|ПОМЕСТИТЬ ТаблицаРегистра
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(, Заказ = &Заказ) КАК ЗаказыПокупателейОстатки
	|ГДЕ
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяТовары.Номенклатура,
	|	ЗаказПокупателяТовары.Характеристика,
	|	ЗаказПокупателяТовары.Количество,
	|	ЗаказПокупателяТовары.Упаковка,
	|	ЗаказПокупателяТовары.КоличествоУпаковок,
	|	ЗаказПокупателяТовары.Цена,
	|	ЗаказПокупателяТовары.Продавец,
	|	ЗаказПокупателяТовары.ПроцентАвтоматическойСкидки,
	|	ЗаказПокупателяТовары.ПроцентРучнойСкидки,
	|	ЗаказПокупателяТовары.Сумма,
	|	ЗаказПокупателяТовары.СтавкаНДС,
	|	ЗаказПокупателяТовары.СуммаНДС,
	|	ЗаказПокупателяТовары.СуммаАвтоматическойСкидки,
	|	ЗаказПокупателяТовары.СуммаРучнойСкидки,
	|	ЗаказПокупателяТовары.КлючСвязи,
	|	ЗаказПокупателяТовары.КодСтроки,
	|	ЗаказПокупателяТовары.Резервировать
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка = &Заказ
	|	И ЗаказПокупателяТовары.Количество > 0
	|	И НЕ ЗаказПокупателяТовары.Резервировать
	|	И НЕ ЗаказПокупателяТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура,
	|	ТаблицаДокумента.Характеристика,
	|	ТаблицаДокумента.Количество,
	|	ТаблицаДокумента.Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок,
	|	ТаблицаДокумента.Цена,
	|	ТаблицаДокумента.Продавец,
	|	ТаблицаДокумента.ПроцентАвтоматическойСкидки,
	|	ТаблицаДокумента.ПроцентРучнойСкидки,
	|	ТаблицаДокумента.Сумма,
	|	ТаблицаДокумента.СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС,
	|	ТаблицаДокумента.СуммаАвтоматическойСкидки,
	|	ТаблицаДокумента.СуммаРучнойСкидки,
	|	ТаблицаДокумента.КлючСвязи,
	|	ТаблицаДокумента.КодСтроки,
	|	ТаблицаРегистра.ЗаказаноОстаток,
	|	ТаблицаДокумента.Резервировать
	|ПОМЕСТИТЬ ТаблицаДокументРегистр
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРегистра КАК ТаблицаРегистра
	|		ПО ТаблицаДокумента.Номенклатура = ТаблицаРегистра.Номенклатура
	|			И ТаблицаДокумента.Характеристика = ТаблицаРегистра.Характеристика
	|			И ТаблицаДокумента.КодСтроки = ТаблицаРегистра.КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументРегистр.Номенклатура,
	|	ТаблицаДокументРегистр.Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА ТаблицаДокументРегистр.Упаковка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА ТаблицаДокументРегистр.КоличествоУпаковок
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	ТаблицаДокументРегистр.Цена,
	|	ТаблицаДокументРегистр.Продавец,
	|	ТаблицаДокументРегистр.ПроцентАвтоматическойСкидки,
	|	ТаблицаДокументРегистр.ПроцентРучнойСкидки,
	|	ТаблицаДокументРегистр.Сумма * ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток / ТаблицаДокументРегистр.Количество
	|	КОНЕЦ КАК Сумма,
	|	ТаблицаДокументРегистр.СтавкаНДС,
	|	ТаблицаДокументРегистр.СуммаНДС * ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток / ТаблицаДокументРегистр.Количество
	|	КОНЕЦ КАК СуммаНДС,
	|	ТаблицаДокументРегистр.СуммаАвтоматическойСкидки * ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток / ТаблицаДокументРегистр.Количество
	|	КОНЕЦ КАК СуммаАвтоматическойСкидки,
	|	ТаблицаДокументРегистр.СуммаРучнойСкидки * ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток / ТаблицаДокументРегистр.Количество
	|	КОНЕЦ КАК СуммаРучнойСкидки,
	|	ТаблицаДокументРегистр.КлючСвязи,
	|	ТаблицаДокументРегистр.КодСтроки,
	|	ТаблицаДокументРегистр.ЗаказаноОстаток КАК Количество
	|ИЗ
	|	ТаблицаДокументРегистр КАК ТаблицаДокументРегистр
	|ГДЕ
	|	ТаблицаДокументРегистр.ЗаказаноОстаток > 0";
	
	Запрос.УстановитьПараметр("Заказ", ЗаказПокупателя);
	
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаТоваров = Результат[3].Выгрузить();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаТоваров, Объект[ИмяТабличнойЧастиТовары]);
	
КонецПроцедуры

// Функция возвращает признак наличия незарезервированных строк.
//
Функция НаличиеНезарезервированныхСтрок(Знач Товары) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ЗаказПокупателяТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ЗаказПокупателяТовары.Резервировать,
	|	ЗаказПокупателяТовары.Отменено
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	&Товары КАК ЗаказПокупателяТовары
	|ГДЕ
	|	НЕ ЗаказПокупателяТовары.Резервировать
	|	И НЕ ЗаказПокупателяТовары.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаВЗапросе.Номенклатура
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|ГДЕ
	|	ТаблицаВЗапросе.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)";
	
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить());
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

// Процедура проверяет отмену строк в табличной части документа.
// Параметры:
//	Объект - проверяемый ДокументОбъект.
//	ИмяТЧ - Строка - имя проверяемой табличной части.
//	ИмяРеквизитаОтменыСтрок - Строка - имя проверяемого реквизита ТЧ. Тип реквизита Булево.
//
Функция ВсеСтрокиОтменены(Объект, ИмяТЧ, ИмяРеквизитаОтменыСтрок) Экспорт
	
	СтруктураОтбора = Новый Структура(ИмяРеквизитаОтменыСтрок, Ложь);
	НеОтмененныеСтроки = Объект[ИмяТЧ].НайтиСтроки(СтруктураОтбора);
	
	Возврат (НеОтмененныеСтроки.Количество() = 0);
	
КонецФункции

// Отменяет все строки, по которым не было документально оформлена реализация.
//
// Параметры:
// 		ДокументЗаказа   - ДокументСсылка - ссылка на документ заказа,
// 			в котором необходимо отменить непроданные строк.
// 		ИмяТабличнойЧасти - Строка - имя табличной части, в которой необходимо осуществить проверку.
// 		ПричинаОтмены     - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - причина, по которой отменяются строки.
// 		ПроверятьОстатки  - Булево - признак, указывающий на необходимость запроса для проверки остатков.
//
// Возвращаемое значение:
// 		Число - Количество отмененных строк.
//
Функция ОтменитьСНепроданнымиТоварами(ДокументЗаказа, ИмяТабличнойЧасти, Знач ПричинаОтмены, Знач ПроверятьОстатки = Ложь) Экспорт
	
	КоличествоОтмененныхСтрок = 0;
	ТаблицаТовары = ДокументЗаказа[ИмяТабличнойЧасти];
	
	СвойстваОтмененнойСтроки = Новый Структура(
		"Резервировать, Отменено, ПричинаОтмены",
		Ложь, Истина, ПричинаОтмены
	);
	
	Если Не ПроверятьОстатки Тогда
		Для Индекс = 0 По ТаблицаТовары.Количество() - 1 Цикл
			Если Не ТаблицаТовары[Индекс].Отменено Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаТовары[Индекс], СвойстваОтмененнойСтроки);
				КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
			КонецЕсли;
		КонецЦикла;
		Возврат КоличествоОтмененныхСтрок;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТовары.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТовары.КодСтроки КАК ЧИСЛО) КАК КодСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Упаковка КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Количество КАК ЧИСЛО) КАК Количество,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Отменено КАК БУЛЕВО) КАК Отменено
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Отменено = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.КодСтроки КАК КодСтроки,
	|	ЕСТЬNULL(ТаблицаТовары.Упаковка.Коэффициент, 1) КАК КоэффициентУпаковки,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Количество > ЗаказыПокупателейОстатки.ЗаказаноОстаток
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РазбитьСтроку
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(, Заказ = &ЗаказПокупателя) КАК ЗаказыПокупателейОстатки
	|		ПО ТаблицаТовары.КодСтроки = ЗаказыПокупателейОстатки.КодСтроки
	|			И (ЗаказыПокупателейОстатки.ЗаказаноОстаток > 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", ДокументЗаказа.Ссылка);
	Запрос.УстановитьПараметр(
		"ТаблицаТовары",
		ДокументЗаказа[ИмяТабличнойЧасти].Выгрузить(
			, // Массив строк для выгрузки
			"НомерСтроки, КодСтроки, Упаковка, Количество, Отменено"
		)
	);
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	Если ПакетРезультатов[1].Пустой() Тогда
		Возврат КоличествоОтмененныхСтрок;
	КонецЕсли;
	
	Выборка = ПакетРезультатов[1].Выбрать();
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
	
	Пока Выборка.Следующий() Цикл
		
		Строка = ДокументЗаказа[ИмяТабличнойЧасти][Выборка.НомерСтроки-1];
		
		Если Выборка.РазбитьСтроку Тогда
			
			НоваяСтрока = ДокументЗаказа[ИмяТабличнойЧасти].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СвойстваОтмененнойСтроки);
			НоваяСтрока.КодСтроки = 0;
			
			ПересчитатьНаЕдиницуИзмерения = Ложь;
			
			Если Выборка.КоэффициентУпаковки <> 1
				И Цел(Выборка.ЗаказаноОстаток / Выборка.КоэффициентУпаковки) <> (Выборка.ЗаказаноОстаток / Выборка.КоэффициентУпаковки) Тогда
				
				ПересчитатьНаЕдиницуИзмерения = Истина;
				
			КонецЕсли;
			
			Строка.Количество              = Выборка.Количество - Выборка.ЗаказаноОстаток;
			Если ПересчитатьНаЕдиницуИзмерения Тогда
				Строка.КоличествоУпаковок      = Строка.Количество;
				Строка.Упаковка                = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
			Иначе
				Строка.КоличествоУпаковок      = (Выборка.Количество - Выборка.ЗаказаноОстаток) / Выборка.КоэффициентУпаковки;
			КонецЕсли;
			
			СуммаИзмененияАвтоматическойСкидки = 0;
			СуммаИзмененияРучнойСкидки = 0;
			Если Выборка.Количество <> 0 Тогда
				СуммаИзмененияАвтоматическойСкидки = Строка.СуммаАвтоматическойСкидки * Выборка.ЗаказаноОстаток / Выборка.Количество;
				Строка.СуммаАвтоматическойСкидки   = Строка.СуммаАвтоматическойСкидки - СуммаИзмененияАвтоматическойСкидки;
				
				СуммаИзмененияРучнойСкидки = Строка.СуммаРучнойСкидки * Выборка.ЗаказаноОстаток / Выборка.Количество;
				Строка.СуммаРучнойСкидки   = Строка.СуммаРучнойСкидки - СуммаИзмененияРучнойСкидки;
				
			КонецЕсли;
			
			НоваяСтрока.Количество         = Выборка.ЗаказаноОстаток;
			Если ПересчитатьНаЕдиницуИзмерения Тогда
				НоваяСтрока.КоличествоУпаковок      = НоваяСтрока.Количество;
				НоваяСтрока.Упаковка                = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
			Иначе
				НоваяСтрока.КоличествоУпаковок      = Выборка.ЗаказаноОстаток / Выборка.КоэффициентУпаковки;
			КонецЕсли;
			НоваяСтрока.СуммаАвтоматическойСкидки = СуммаИзмененияАвтоматическойСкидки;
			НоваяСтрока.СуммаАвтоматическойСкидки = СуммаИзмененияРучнойСкидки;
			
			СтруктураДействий = Новый Структура;
			
			Если ПересчитатьНаЕдиницуИзмерения Тогда
				СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", Строка.Количество);
			КонецЕсли;
			
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(ДокументЗаказа));
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
			
			ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(Строка, СтруктураДействий, КэшированныеЗначения);
			
			Если ПересчитатьНаЕдиницуИзмерения Тогда
				СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", НоваяСтрока.Количество);
			КонецЕсли;
			ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
			
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(Строка, ДокументЗаказа.ЦенаВключаетНДС);
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(НоваяСтрока, ДокументЗаказа.ЦенаВключаетНДС);
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(Строка, СвойстваОтмененнойСтроки);
			
		КонецЕсли;
		
		КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
		
	КонецЦикла;
	
	Возврат КоличествоОтмененныхСтрок;
	
КонецФункции

// Резервирует по заказу все что есть на складе.
// 		ДокументЗаказа   - ДокументСсылка - ссылка на документ заказа,
// 		ИмяТабличнойЧасти - Строка - имя табличной части, в которой необходимо осуществить проверку.
//
Функция РезервироватьПоДаннымОстатков(ДокументЗаказа, ИмяТабличнойЧасти) Экспорт
	
	КоличествоСтрок = 0;
	ТаблицаТовары = ДокументЗаказа[ИмяТабличнойЧасти];
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТовары.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТовары.КодСтроки КАК ЧИСЛО) КАК КодСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Упаковка КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Количество КАК ЧИСЛО) КАК Количество,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Отменено КАК БУЛЕВО) КАК Отменено,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Резервировать КАК БУЛЕВО) КАК Резервировать
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	НЕ ТаблицаТовары.Отменено
	|	И НЕ ТаблицаТовары.Резервировать
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.КодСтроки КАК КодСтроки,
	|	ЕСТЬNULL(ТаблицаТовары.Упаковка.Коэффициент, 1) КАК КоэффициентУпаковки,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Количество > ЗаказыПокупателейОстатки.ЗаказаноОстаток
	|				ИЛИ ТаблицаТовары.Количество > ТаблицаОстатков.СвободныйОстаток
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РазбитьСтроку,
	|	ТаблицаОстатков.СвободныйОстаток,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Количество <= ЗаказыПокупателейОстатки.ЗаказаноОстаток
	|				И ТаблицаТовары.Количество <= ТаблицаОстатков.СвободныйОстаток
	|			ТОГДА ТаблицаТовары.Количество
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗаказыПокупателейОстатки.ЗаказаноОстаток <= ТаблицаОстатков.СвободныйОстаток
	|					ТОГДА ЗаказыПокупателейОстатки.ЗаказаноОстаток
	|				ИНАЧЕ ТаблицаОстатков.СвободныйОстаток
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоРезерва
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(, Заказ = &ЗаказПокупателя) КАК ЗаказыПокупателейОстатки
	|		ПО ТаблицаТовары.КодСтроки = ЗаказыПокупателейОстатки.КодСтроки
	|			И (ЗаказыПокупателейОстатки.ЗаказаноОстаток > 0)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|			ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|			ТоварыНаСкладахОстатки.КоличествоОстаток - ТоварыНаСкладахОстатки.РезервОстаток КАК СвободныйОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыНаСкладах.Остатки(
	|					,
	|					Склад = &Склад
	|						И Номенклатура В
	|							(ВЫБРАТЬ
	|								ТаблицаТовары.Номенклатура
	|							ИЗ
	|								ТаблицаТовары КАК ТаблицаТовары)) КАК ТоварыНаСкладахОстатки
	|		ГДЕ
	|			ТоварыНаСкладахОстатки.КоличествоОстаток - ТоварыНаСкладахОстатки.РезервОстаток > 0) КАК ТаблицаОстатков
	|		ПО ТаблицаТовары.Номенклатура = ТаблицаОстатков.Номенклатура
	|			И ТаблицаТовары.Характеристика = ТаблицаОстатков.Характеристика
	|			И (ТаблицаОстатков.СвободныйОстаток > 0)
	|ГДЕ
	|	НЕ (ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", ДокументЗаказа.Ссылка);
	Запрос.УстановитьПараметр("Склад"          , ДокументЗаказа.Склад);
	Запрос.УстановитьПараметр(
		"ТаблицаТовары",
		ДокументЗаказа[ИмяТабличнойЧасти].Выгрузить(
			, // Массив строк для выгрузки
			"НомерСтроки, КодСтроки, Упаковка, Количество, Отменено, Резервировать, Номенклатура, Характеристика"
		)
	);
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	Если ПакетРезультатов[1].Пустой() Тогда
		Возврат КоличествоСтрок;
	КонецЕсли;
	
	Выборка = ПакетРезультатов[1].Выбрать();
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
	
	Пока Выборка.Следующий() Цикл
		
		Строка = ДокументЗаказа[ИмяТабличнойЧасти][Выборка.НомерСтроки-1];
		
		Если Выборка.РазбитьСтроку Тогда
			
			НоваяСтрока = ДокументЗаказа[ИмяТабличнойЧасти].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Резервировать = Истина;
			НоваяСтрока.КодСтроки = 0;
			
			ПересчитатьНаЕдиницуИзмерения = Ложь;
			
			Если Выборка.КоэффициентУпаковки <> 1
				И Цел(Выборка.ЗаказаноОстаток / Выборка.КоэффициентУпаковки) <> (Выборка.ЗаказаноОстаток / Выборка.КоэффициентУпаковки) Тогда
				
				ПересчитатьНаЕдиницуИзмерения = Истина;
				
			КонецЕсли;
			
			Строка.Количество = Выборка.Количество - Выборка.КоличествоРезерва;
			Если ПересчитатьНаЕдиницуИзмерения Тогда
				Строка.КоличествоУпаковок      = Строка.Количество;
				Строка.Упаковка                = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
			Иначе
				Строка.КоличествоУпаковок      = (Выборка.Количество - Выборка.КоличествоРезерва) / Выборка.КоэффициентУпаковки;
			КонецЕсли;
			
			СуммаИзмененияАвтоматическойСкидки = 0;
			СуммаИзмененияРучнойСкидки = 0;
			Если Выборка.Количество <> 0 Тогда
				СуммаИзмененияАвтоматическойСкидки = Строка.СуммаАвтоматическойСкидки * Выборка.КоличествоРезерва / Выборка.Количество;
				Строка.СуммаАвтоматическойСкидки   = Строка.СуммаАвтоматическойСкидки - СуммаИзмененияАвтоматическойСкидки;
				
				СуммаИзмененияРучнойСкидки = Строка.СуммаРучнойСкидки * Выборка.КоличествоРезерва / Выборка.Количество;
				Строка.СуммаРучнойСкидки   = Строка.СуммаРучнойСкидки - СуммаИзмененияРучнойСкидки;
				
			КонецЕсли;
			
			НоваяСтрока.Количество         = Выборка.КоличествоРезерва;
			Если ПересчитатьНаЕдиницуИзмерения Тогда
				НоваяСтрока.КоличествоУпаковок      = НоваяСтрока.Количество;
				НоваяСтрока.Упаковка                = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
			Иначе
				НоваяСтрока.КоличествоУпаковок      = Выборка.КоличествоРезерва / Выборка.КоэффициентУпаковки;
			КонецЕсли;
			НоваяСтрока.СуммаАвтоматическойСкидки = СуммаИзмененияАвтоматическойСкидки;
			НоваяСтрока.СуммаАвтоматическойСкидки = СуммаИзмененияРучнойСкидки;
			
			СтруктураДействий = Новый Структура;
			
			Если ПересчитатьНаЕдиницуИзмерения Тогда
				СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", Строка.Количество);
			КонецЕсли;
			
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(ДокументЗаказа));
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
			
			ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(Строка, СтруктураДействий, КэшированныеЗначения);
			
			Если ПересчитатьНаЕдиницуИзмерения Тогда
				СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", НоваяСтрока.Количество);
			КонецЕсли;
			ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
			
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(Строка, ДокументЗаказа.ЦенаВключаетНДС);
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(НоваяСтрока, ДокументЗаказа.ЦенаВключаетНДС);
			
		Иначе
			
			Строка.Резервировать = Истина;
			
		КонецЕсли;
		
		КоличествоСтрок = КоличествоСтрок + 1;
		
	КонецЦикла;
	
	Возврат КоличествоСтрок;
	
	
КонецФункции // РезервироватьПоДаннымОстатков()

// Общая процедура Остатков серийных номеров.
//
// Параметры:
//  ИмяТабличнойЧасти - Имя табличной части Товары.
//  ЗаказПокупателя - заказ покупателя по которому проверяются остатки.
//  Отказ - Переменная отвечающая за прерывание проведения.
//  ТекстОшибки - текст сообщения об ошибке.
//
Процедура ПроверитьОстаткиЗаказовПокупателей(
		ТаблицаЗначений_Товары, 
		ЗаказПокупателя,
		Отказ,
		ТекстОшибки) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ВЫРАЗИТЬ(ТаблицаТовары.ЗаказПокупателя КАК Документ.ЗаказПокупателя) КАК ЗаказПокупателя,
	|	ВЫРАЗИТЬ(ТаблицаТовары.КодСтроки КАК ЧИСЛО(10, 0)) КАК КодСтроки
	|ПОМЕСТИТЬ ДокТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокТовары.Номенклатура,
	|	ДокТовары.Характеристика,
	|	СУММА(ДокТовары.Количество) КАК Количество,
	|	ДокТовары.ЗаказПокупателя,
	|	ДокТовары.КодСтроки
	|ПОМЕСТИТЬ ТаблицаДляАнализа
	|ИЗ
	|	ДокТовары КАК ДокТовары
	|ГДЕ
	|	НЕ ДокТовары.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТовары.Номенклатура,
	|	ДокТовары.Характеристика,
	|	ДокТовары.ЗаказПокупателя,
	|	ДокТовары.КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.Заказ,
	|	ЗаказыПокупателейОстатки.КодСтроки,
	|	ЗаказыПокупателейОстатки.Номенклатура,
	|	ЗаказыПокупателейОстатки.Характеристика,
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток
	|ПОМЕСТИТЬ ТаблицаРегистра
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(, Заказ = &ЗаказПокупателя) КАК ЗаказыПокупателейОстатки
	|ГДЕ
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДляАнализа.Номенклатура,
	|	ТаблицаДляАнализа.Характеристика,
	|	ТаблицаДляАнализа.ЗаказПокупателя,
	|	ТаблицаДляАнализа.КодСтроки,
	|	ТаблицаДляАнализа.Количество - ЕСТЬNULL(ТаблицаРегистра.ЗаказаноОстаток, 0) КАК Количество,
	|	ТаблицаДляАнализа.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	ТаблицаДляАнализа КАК ТаблицаДляАнализа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРегистра КАК ТаблицаРегистра
	|		ПО ТаблицаДляАнализа.Номенклатура = ТаблицаРегистра.Номенклатура
	|			И ТаблицаДляАнализа.Характеристика = ТаблицаРегистра.Характеристика
	|			И ТаблицаДляАнализа.ЗаказПокупателя = ТаблицаРегистра.Заказ
	|			И ТаблицаДляАнализа.КодСтроки = ТаблицаРегистра.КодСтроки
	|ГДЕ
	|	ТаблицаДляАнализа.Количество - ЕСТЬNULL(ТаблицаРегистра.ЗаказаноОстаток, 0) > 0";

	Запрос.УстановитьПараметр("ТаблицаТовары"  , ТаблицаЗначений_Товары);
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ШаблонСообщения = НСтр("ru = 'Номенклатура %1 
		|Превышен остаток по заказу в строке заказа %2 на %3 %4'");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Отказ = Истина;
		ТекстОшибки = ТекстОшибки + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Выборка.Номенклатура, Выборка.Характеристика),
			Строка(Выборка.КодСтроки),
			Строка(Выборка.Количество),
			Строка(Выборка.ЕдиницаИзмерения));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Сопоставить алкогольную продукцию с номенклатурой.
//
// Параметры:
//  Объект - ДокументОбъект - Объект в котором сопоставляется номенклатура.
//  ИмяКолонки - Строка - Имя колонки с номенклатурой ЕГАИС.
//  ЗаписыватьСправку2 - Булево - признак сопоставления по справке 2.
//  СопоставлятьПоИдентификаторуУпаковки - Булево - признак сопоставления по идентификатору.
//
Процедура СопоставитьАлкогольнуюПродукциюСНоменклатурой(Объект, ИмяКолонки = "НоменклатураЕГАИС", ЗаписыватьСправку2 = Ложь, СопоставлятьПоИдентификаторуУпаковки = Ложь, СопоставлятьПоСерии = Истина) Экспорт
	
	КолонкиДляВыгрузки = ИмяКолонки + ", " + "Номенклатура, Характеристика";
	Если СопоставлятьПоСерии Тогда
		КолонкиДляВыгрузки = КолонкиДляВыгрузки + ", Серия";
	КонецЕсли;
	Если СопоставлятьПоИдентификаторуУпаковки Тогда
		КолонкиДляВыгрузки = КолонкиДляВыгрузки + ", ИдентификаторУпаковки";
	КонецЕсли;
	Если ЗаписыватьСправку2 Тогда
		КолонкиДляВыгрузки = КолонкиДляВыгрузки + ", Справка2";
	КонецЕсли;
	Данные = Объект.Товары.Выгрузить(, КолонкиДляВыгрузки);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	&ИмяКолонкиАлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	&ИмяКолонкиСерия КАК Серия,
	|	&ИмяКолонкиИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	&ИмяКолонкиСправка2 КАК Справка2
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Серия КАК Серия,
	|	Таблица.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	Таблица.Справка2 КАК Справка2,
	|	Сопоставлено.АлкогольнаяПродукция КАК Сопоставлено,
	|	МАКСИМУМ(ЕСТЬNULL(Сопоставлено.Порядок,ЕСТЬNULL(СопоставленоБЕЗСерии.Порядок,0))) КАК Порядок
	|ИЗ
	|	Таблица КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК Сопоставлено
	|		ПО Сопоставлено.Номенклатура = Таблица.Номенклатура
	|		 И Сопоставлено.Характеристика = Таблица.Характеристика
	|		 И Сопоставлено.ИдентификаторУпаковки = Таблица.ИдентификаторУпаковки
	|		 И Сопоставлено.Справка2 = Таблица.Справка2
	|		 И Сопоставлено.Серия = Таблица.Серия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СопоставленоБЕЗСерии
	|		ПО СопоставленоБЕЗСерии.Номенклатура = Таблица.Номенклатура
	|		 И СопоставленоБЕЗСерии.Характеристика = Таблица.Характеристика
	|		 И СопоставленоБЕЗСерии.ИдентификаторУпаковки = Таблица.ИдентификаторУпаковки
	|		 И СопоставленоБЕЗСерии.Справка2 = Таблица.Справка2
	|ГДЕ
	|	Таблица.АлкогольнаяПродукция <> ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|	И Таблица.Номенклатура <> &ПустаяСсылкаНоменклатура
	|	И Сопоставлено.АлкогольнаяПродукция ЕСТЬ NULL
	|СГРУППИРОВАТЬ ПО
	|	Таблица.АлкогольнаяПродукция,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Серия,
	|	Таблица.ИдентификаторУпаковки,
	|	Таблица.Справка2,
	|	Сопоставлено.АлкогольнаяПродукция
	|");
	
	Запрос.УстановитьПараметр("Таблица", Данные);
	Запрос.УстановитьПараметр("ПустаяСсылкаНоменклатура", ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Запрос.УстановитьПараметр("ПустаяСправка2", Справочники.Справки2ЕГАИС.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСерия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяКолонкиАлкогольнаяПродукция", ИмяКолонки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ИмяКолонкиИдентификаторУпаковки",
		?(СопоставлятьПоИдентификаторуУпаковки, "Т.ИдентификаторУпаковки", "&ПустаяСтрока"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ИмяКолонкиСерия",
		?(СопоставлятьПоСерии, "Т.Серия", "&ПустаяСерия"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ИмяКолонкиСправка2",
		?(ЗаписыватьСправку2, "Т.Справка2", "&ПустаяСправка2"));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыЕГАИС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура, Истина);
		НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика, Истина);
		НаборЗаписей.Отбор.Серия.Установить(Выборка.Серия, Истина);
		НаборЗаписей.Отбор.АлкогольнаяПродукция.Установить(Выборка.АлкогольнаяПродукция, Истина);
		НаборЗаписей.Отбор.ИдентификаторУпаковки.Установить(Выборка.ИдентификаторУпаковки, Истина);
		НаборЗаписей.Отбор.Справка2.Установить(Выборка.Справка2, Истина);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Номенклатура          = Выборка.Номенклатура;
		НоваяЗапись.Характеристика        = Выборка.Характеристика;
		НоваяЗапись.Серия                 = Выборка.Серия;
		НоваяЗапись.АлкогольнаяПродукция  = Выборка.АлкогольнаяПродукция;
		НоваяЗапись.ИдентификаторУпаковки = Выборка.ИдентификаторУпаковки;
		НоваяЗапись.Справка2              = Выборка.Справка2;
		НоваяЗапись.Порядок               = Выборка.Порядок + 1;
	
		Попытка
			НаборЗаписей.Записать();
		Исключение
			
			ТекстОшибки = НСтр("ru = 'При записи соответствия номенклатуры произошла ошибка:
			                         |%1'");
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
			
			ОбщегоНазначенияЕГАИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет соответствие значений Номенклатура, Характеристика, Упаковка
// в табличной части значениям, которые указаные в записи регистра сведений Штрихкоды
// для переданного штрихкода.
//
// Возвращаемое значение:
//  РезультатПроверки - Булево - Истина, если соответствие значений в табличной части и
//     в записи регистра установлено.
//
Функция КодСоответствуетНоменклатуреИУпаковке(Форма, КодМаркировки, ДополнительныеПараметры, ОсобыйВыводСообщения = Ложь) Экспорт
	
	РезультатПроверки = Ложь;
	СтрокаТЧ = Форма.Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	
	Если СтрокаТЧ = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана строка в табличной части ""Товары"".'");
		Если ОсобыйВыводСообщения Тогда
			ДополнительныеПараметры.Вставить("ТекстСообщения", ТекстСообщения)
		Иначе
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Форма, "Объект.Товары");
		КонецЕсли;
	Иначе
		
		ДанныеМаркировки = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьКодМаркировки(КодМаркировки);
		Если ДанныеМаркировки.Разобран Тогда
			
			Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
			Если ЗначениеЗаполнено(СтрокаТЧ.Упаковка) Тогда 
				Упаковка = СтрокаТЧ.Упаковка;
			КонецЕсли;
			
			Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			Если ЗначениеЗаполнено(СтрокаТЧ.Характеристика) Тогда 
				Характеристика = СтрокаТЧ.Характеристика;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Штрихкоды.Штрихкод КАК Штрихкод,
			|	Штрихкоды.Владелец КАК Владелец,
			|	Штрихкоды.Характеристика КАК Характеристика,
			|	Штрихкоды.Упаковка КАК Упаковка
			|ИЗ
			|	РегистрСведений.Штрихкоды КАК Штрихкоды
			|ГДЕ
			|	Штрихкоды.Штрихкод = &EAN
			|	И Штрихкоды.Владелец = &Номенклатура
			|	И Штрихкоды.Характеристика = &Характеристика
			|	И Штрихкоды.Упаковка = &Упаковка";
			
			Запрос.УстановитьПараметр("EAN",            ДанныеМаркировки.EAN);
			Запрос.УстановитьПараметр("Номенклатура",   СтрокаТЧ.Номенклатура);
			Запрос.УстановитьПараметр("Характеристика", Характеристика);
			Запрос.УстановитьПараметр("Упаковка",       Упаковка);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				РезультатПроверки = Истина;
			Иначе
				ТекстСообщения = НСтр("ru = 'Считанный код маркировки %1 не соответствует выбранной номенклатуре %2.'");
				ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'Попробуйте удалить строку и считать только код маркировки.'");
				ПредставлениеНоменклатуры = Строка(СтрокаТЧ.Номенклатура) 
											+ ?(ЗначениеЗаполнено(СтрокаТЧ.Упаковка), "[" + Строка(СтрокаТЧ.Упаковка) + "]", "");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
					КодМаркировки, 
					ПредставлениеНоменклатуры);
					
				Если ОсобыйВыводСообщения Тогда
					ДополнительныеПараметры.Вставить("ТекстСообщения", ТекстСообщения)
				Иначе
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, 
						Форма, 
						"Объект.Товары[" + (СтрокаТЧ.НомерСтроки - 1) + "].Номенклатура");
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Считанный код маркировки %1 не соответствует формату'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КодМаркировки);
			Если ОсобыйВыводСообщения Тогда
				ДополнительныеПараметры.Вставить("ТекстСообщения", ТекстСообщения)
			Иначе
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Форма);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Функция определяет физическое лицо пользователя, к которому 
// привязана регистрационная карта.
// 
// Параметры:
//  ВладелецКарты - СправочникСсылка.Пользователи.
//
// Возвращаемое значение:
//  ФизЛицо - СправочникСсылка.ФизическиеЛица.
//
Функция ФизЛицоВладельцаКарты(ВладелецКарты) Экспорт 
	
	ФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	ФизЛицоПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецКарты, "ФизическоеЛицо");
	Если ЗначениеЗаполнено(ФизЛицоПользователя) Тогда 
		ФизЛицо = ФизЛицоПользователя;
	КонецЕсли;
	
	Возврат ФизЛицо;
	
КонецФункции

// Возвращет склад продажи по переданной структуре поиска.
//
// Параметры:
//  РеквизитыПоиска - Структура, может содержать:
//    Организация - СправочникСсылка.Организации;
//    РабочееМесто - СправочникСсылка.РабочиеМеста;
//    Магазин - СправочникСсылка.Магазины;
//    Номенклатура - СправочникСсылка.Номенклатура;
//    Склад - СправочникСсылка.Склады;
//    ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры.
//
// Возвращаемое значение:
//  СправочникСсылка.Склады.
//
Функция СкладПродажиПоУмолчанию(РеквизитыПоиска) Экспорт
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Организация");
	ПараметрыПоиска.Вставить("РабочееМесто");
	ПараметрыПоиска.Вставить("Магазин");
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, РеквизитыПоиска);
	
	ВыполняемыеДействия = Новый Структура();
	ВыполняемыеДействия.Вставить("ЗаполнитьСкладПродажи", ПараметрыПоиска);
	
	СтрокаПоиска = Новый Структура();
	СтрокаПоиска.Вставить("Номенклатура");
	СтрокаПоиска.Вставить("ТипНоменклатуры");
	СтрокаПоиска.Вставить("Склад");
	
	ЗаполнитьЗначенияСвойств(СтрокаПоиска, РеквизитыПоиска);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСкладПродажиВСтрокеТЧСервер(СтрокаПоиска, ВыполняемыеДействия, Неопределено);
	
	Возврат СтрокаПоиска.Склад;
КонецФункции

Процедура ОбработатьСоздатьДокументыПоСмене(ЕстьОшибки, ПараметрыСмены, СсылкаНаОтчет, СписокНеПроведенныхДокументов, СписокАктовСписанияЕГАИС) Экспорт
	
	КассаККМ = ПараметрыСмены.КассаККМ;
	
	КэшированныеЗначения = Новый Структура;
	
	МассивДокументовКПроведению = Новый Массив;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Документы.ОтчетОРозничныхПродажах.СоздатьВТДокументыНаККМ(МенеджерВременныхТаблиц, ПараметрыСмены);
	
	ЗапросПоЧекам = Новый Запрос;
	ЗапросПоЧекам.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ЗапросПоЧекам.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	втТаблицаЧеков КАК Док
	|";
	
	РезультатЗапросаПоЧекам  = ЗапросПоЧекам.Выполнить();
	ТаблицаЧеков = РезультатЗапросаПоЧекам.Выгрузить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.ЧекККМ");
	ЭлементБлокировки.ИсточникДанных = ТаблицаЧеков;
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	Блокировка.Заблокировать();
	
	ОтчетОРозничныхПродажах = СоздатьОтчетОРозничныхПродажах(ПараметрыСмены);
	
	Отказ = Ложь;
	
	Документы.ОтчетОРозничныхПродажах.ЗаполнитьОтчетОРозничныхПродажахПоДаннымВЧеках(ОтчетОРозничныхПродажах, МенеджерВременныхТаблиц, Отказ);
	
	Если НЕ Отказ Тогда
		
		// Удаление отложенных чеков
		УдалениеОтложенныхЧеков(МенеджерВременныхТаблиц, КассаККМ, Отказ);
		
		ЕстьПродажиВозвратыТовара = ОтчетОРозничныхПродажах.Товары.Количество() > 0 
									Или ОтчетОРозничныхПродажах.ВозвращенныеТовары.Количество() > 0;
		
		ЕстьПрочаяВыручка 		  = ОтчетОРозничныхПродажах.ПрочаяВыручка.Количество() > 0;
		ЕстьЧеки 				  = ТаблицаЧеков.Количество() > 0;
		
		МассивСписанийТоваров 	  = Новый Массив;
		
		// Записываем ОтчетОРозничныхПродажах.
		Если НЕ Отказ 
			 И (ЕстьЧеки ИЛИ ЕстьПрочаяВыручка) Тогда
				
			Если ЕстьПродажиВозвратыТовара Тогда
				МассивСписанийТоваров = СписаниеПодарков(МенеджерВременныхТаблиц, КассаККМ, Отказ);
			КонецЕсли;
			
			Попытка

				ОтчетОРозничныхПродажах.Записать(РежимЗаписиДокумента.Запись);
				СсылкаНаОтчет = ОтчетОРозничныхПродажах.Ссылка;
				
				ИнформацияВозвратТоваров = ОтчетОРозничныхПродажах.ВозвращенныеТовары.Итог("Сумма");
				ИнформацияПроданоТоваров = ОтчетОРозничныхПродажах.Товары.Итог("Сумма") + ИнформацияВозвратТоваров;
				ИнформацияПрочаяОперацииОплат = ОтчетОРозничныхПродажах.ПрочаяВыручка.Итог("СуммаПоступления");
				ИнформацияПрочаяОперацииВозвратов = ОтчетОРозничныхПродажах.ПрочаяВыручка.Итог("СуммаВозврата");
				ИнформацияВыручка = (ИнформацияПроданоТоваров - ИнформацияВозвратТоваров) 
									+ (ИнформацияПрочаяОперацииОплат - ИнформацияПрочаяОперацииВозвратов);
				
				
				МассивДокументовКПроведению.Добавить(ОтчетОРозничныхПродажах);
				
				Для каждого СписаниеТоваров Из МассивСписанийТоваров Цикл
					СписаниеТоваров.ОтчетОРозничныхПродажах = СсылкаНаОтчет;
					СписаниеТоваров.Записать(РежимЗаписиДокумента.Запись);
					МассивДокументовКПроведению.Добавить(СписаниеТоваров);
				КонецЦикла;
				
				// Архивация чеков происходит только после записи отчета ККМ.
				Если НЕ Отказ Тогда
					Попытка
						МассивСсылокЧекиККМ = РезультатЗапросаПоЧекам.Выгрузить().ВыгрузитьКолонку("Ссылка");
						
						Для Каждого текСсылкаЧекККМ Из МассивСсылокЧекиККМ Цикл
							АрхивироватьЧекККМ(текСсылкаЧекККМ, СсылкаНаОтчет);
						КонецЦикла;
						
					Исключение
						Отказ = Истина;
	
					КонецПопытки;
					
					ОбработатьДокументыПрочейВыручки(МенеджерВременныхТаблиц, КассаККМ, СсылкаНаОтчет, Отказ);					
					
					Попытка
						
						Если ИнтеграцияЕГАИСРТ.НужноРаботатьСЕГАИС(ОтчетОРозничныхПродажах.Дата) Тогда
							
							ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(
								ОтчетОРозничныхПродажах.Организация,
								ОтчетОРозничныхПродажах.Магазин);
							
							ДобавитьМаркируемуюПродукцию = Ложь;
						
							Если ЗначениеЗаполнено(ОрганизацияЕГАИС) Тогда
								НаходитсяВСельскойМестности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОрганизацияЕГАИС, "НаходитсяВСельскойМестности");
								Если НаходитсяВСельскойМестности
									И Константы.ДатаНачалаРегистрацииРозничныхПродажВЕГАИСВСельскойМестности.Получить() > ОтчетОРозничныхПродажах.Дата Тогда
									ДобавитьМаркируемуюПродукцию = Истина;
								КонецЕсли;
							КонецЕсли;
							
							ДобавитьНеМаркируемуюПродукцию = Константы.ВыгружатьПродажиНемаркируемойПродукцииВЕГАИСРТ.Получить();
							
							СписокСкладов = ИнтеграцияЕГАИСРТ.СписокСкладовДляКоторыхНужноСоздаватьАктыСписания(СсылкаНаОтчет, ДобавитьМаркируемуюПродукцию, ДобавитьНеМаркируемуюПродукцию);
							
							Если СписокСкладов.Количество() > 0 Тогда
								
								АктСписанияИзРегистра1 = Документы.АктСписанияЕГАИС.СоздатьДокумент();
								АктСписанияИзРегистра1.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра1;
								ИнтеграцияЕГАИСРТ.ЗаполнитьАктСписанияЕГАИСНаОснованииОтчетаОРозничныхПродажах(АктСписанияИзРегистра1, СсылкаНаОтчет, ДобавитьМаркируемуюПродукцию, ДобавитьНеМаркируемуюПродукцию);
								Документы.АктСписанияЕГАИС.ПодобратьСправки2(АктСписанияИзРегистра1);
								
								ПараметрыОтбора = Новый Структура;
								ПараметрыОтбора.Вставить("Справка2", Справочники.Справки2ЕГАИС.ПустаяСсылка());
								СтрокиБезСправки = АктСписанияИзРегистра1.Товары.НайтиСтроки(ПараметрыОтбора);
								Если СтрокиБезСправки.Количество() Тогда
									ТоварыБезСправок = АктСписанияИзРегистра1.Товары.Выгрузить(СтрокиБезСправки);
									Для Каждого СтрокаБезСправки Из СтрокиБезСправки Цикл
										АктСписанияИзРегистра1.Товары.Удалить(СтрокаБезСправки);
									КонецЦикла;
									
									АктСписанияИзРегистра2 = Документы.АктСписанияЕГАИС.СоздатьДокумент();
									АктСписанияИзРегистра2.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра2;
									ИнтеграцияЕГАИСРТ.ЗаполнитьАктСписанияЕГАИСНаОснованииОтчетаОРозничныхПродажах(АктСписанияИзРегистра2, СсылкаНаОтчет, ДобавитьМаркируемуюПродукцию, ДобавитьНеМаркируемуюПродукцию);
									АктСписанияИзРегистра2.Товары.Загрузить(ТоварыБезСправок);
									
									МассивДокументовКПроведению.Добавить(АктСписанияИзРегистра2);
								КонецЕсли;
								
								Если АктСписанияИзРегистра1.Товары.Количество() Тогда
									МассивДокументовКПроведению.Добавить(АктСписанияИзРегистра1);
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЕсли;
						
					Исключение
						Отказ = Истина;
	
					КонецПопытки;
					
				КонецЕсли;
				
			Исключение
				Отказ = Истина;

			КонецПопытки;
		КонецЕсли;

		Если Отказ Тогда
			ЕстьОшибки = Истина;
		Иначе
			Для Каждого ДокументКПроведению Из МассивДокументовКПроведению Цикл
				Попытка
					РезультатПроверки = ДокументКПроведению.ПроверитьЗаполнение();
					
					Если РезультатПроверки Тогда
						
						ДокументКПроведению.Записать(РежимЗаписиДокумента.Проведение);
						
						Если НЕ ДокументКПроведению.Проведен Тогда
							СписокНеПроведенныхДокументов.Добавить(ДокументКПроведению.Ссылка, ДокументКПроведению.Ссылка.Метаданные().Имя);
						ИначеЕсли ТипЗнч(ДокументКПроведению) = Тип("ДокументОбъект.АктСписанияЕГАИС") Тогда
							СписокАктовСписанияЕГАИС.Добавить(ДокументКПроведению.Ссылка, ДокументКПроведению.Ссылка.Метаданные().Имя);
						КонецЕсли;
					Иначе
						ДокументКПроведению.Записать(РежимЗаписиДокумента.Запись);
						СписокНеПроведенныхДокументов.Добавить(ДокументКПроведению.Ссылка, ДокументКПроведению.Ссылка.Метаданные().Имя);
					КонецЕсли;
				Исключение
					СписокНеПроведенныхДокументов.Добавить(ДокументКПроведению.Ссылка, ДокументКПроведению.Ссылка.Метаданные().Имя);
										
					ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось провести документ ""%1"".'"),
						Строка(ДокументКПроведению));
						
					ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + ОписаниеОшибки();

					ЗаписьЖурналаРегистрации(ОбменДаннымиСервер.СобытиеЖурналаРегистрацииОбменДанными(),
						УровеньЖурналаРегистрации.Предупреждение,,, ОписаниеОшибки);
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

Процедура УдалениеОтложенныхЧеков(МенеджерВременныхТаблиц, КассаККМ, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	ЗапросПоОтложеннымЧекам = Новый Запрос;
	ЗапросПоОтложеннымЧекам.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросПоОтложеннымЧекам.Текст = ТекстЗапросаПоОтложеннымЧекам();
	ЗапросПоОтложеннымЧекам.УстановитьПараметр("КассаККМ"     , КассаККМ);
	ЗапросПоОтложеннымЧекам.УстановитьПараметр("ТекущееВремя" , ТекущаяДатаСеанса());
	
	РезультатЗапросаПоОтложеннымЧекам = ЗапросПоОтложеннымЧекам.Выполнить();
	
	Попытка
		МассивСсылокОтложенныеЧеки = РезультатЗапросаПоОтложеннымЧекам.Выгрузить().ВыгрузитьКолонку("ОтложенныйЧек");
		
		Для Каждого ОтложенныйЧек Из МассивСсылокОтложенныеЧеки Цикл
			ОтложенныйЧекОбъект = ОтложенныйЧек.ПолучитьОбъект();
			Если ОтложенныйЧекОбъект.Проведен Тогда 
				ОтложенныйЧекОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
			ОтложенныйЧекОбъект.Удалить(); 
		КонецЦикла;
		
	Исключение
		Отказ = Истина;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
		
КонецПроцедуры

Процедура ОбработатьДокументыПрочейВыручки(МенеджерВременныхТаблиц, КассаККМ, СсылкаНаОтчет, Отказ) Экспорт
	
	ЗапросДокументыНаККМ = Новый Запрос;
	ЗапросДокументыНаККМ.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросДокументыНаККМ.Текст = ТекстЗапросаДокументыНаККМ();
	ЗапросДокументыНаККМ.УстановитьПараметр("КассаККМ", КассаККМ);
	
	РезультатЗапросаДокументыНаККМ	  = ЗапросДокументыНаККМ.Выполнить();
	
	Попытка
		
		МассивДокументовККМ = РезультатЗапросаДокументыНаККМ.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Для Каждого СсылкаДокументККМ Из МассивДокументовККМ Цикл
			
			ДокументОбъект = СсылкаДокументККМ.ПолучитьОбъект();
			ДокументОбъект.ОтчетОРозничныхПродажах = СсылкаНаОтчет;
			ДокументОбъект.СменаЗакрыта = Истина;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЦикла;
		
	Исключение
		Отказ = Истина;
		
	КонецПопытки;
	
	
КонецПроцедуры

Процедура АрхивироватьЧекККМ(СсылкаЧекККМ, СсылкаНаОтчет) Экспорт
							
	ДокументОбъект = СсылкаЧекККМ.ПолучитьОбъект();
	ДокументОбъект.СтатусЧекаККМ           = Перечисления.СтатусыЧековККМ.Архивный;
	ДокументОбъект.ОтчетОРозничныхПродажах = СсылкаНаОтчет;
	ДокументОбъект.мЗакрытиеСмены          = Истина; 
	
	// заполнение ТЧ Комиссионные товары
	ДокументОбъект.ТоварыОрганизации.Очистить();
	
	Запрос = Новый Запрос(ТекстЗапросаТоварыОрганизацииЧека());
	Запрос.УстановитьПараметр("Ссылка", СсылкаЧекККМ);
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		СтрокаТоваров = ДокументОбъект.Товары[ВыборкаЗапроса.НомерСтрокиДокумента-1];
		
		Если НЕ ЗначениеЗаполнено(СтрокаТоваров.КлючСвязи) Тогда
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(ДокументОбъект.Товары, СтрокаТоваров, "КлючСвязи");
		КонецЕсли;
		
		СтрокаТоварыОрганизации = ДокументОбъект.ТоварыОрганизации.Добавить();
		СтрокаТоварыОрганизации.КлючСвязи = СтрокаТоваров.КлючСвязи;
		
		ЗаполнитьЗначенияСвойств(СтрокаТоварыОрганизации, ВыборкаЗапроса);
		
	КонецЦикла;
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Функция СписаниеПодарков(МенеджерВременныхТаблиц, КассаККМ, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросПоПодаркам = Новый Запрос;
	ЗапросПоПодаркам.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросПоПодаркам.Текст = ТекстЗапросаПоПодаркам();
	ЗапросПоПодаркам.УстановитьПараметр("КассаККМ"          , КассаККМ);
	ЗапросПоПодаркам.УстановитьПараметр("ВидОперацииПродажа", Перечисления.ВидыОперацийЧекККМ.Продажа);
	
	ЗапросПоСериямПодарков = Новый Запрос;
	ЗапросПоСериямПодарков.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросПоСериямПодарков.Текст = ТекстЗапросаПоСериямПодарков();
	ЗапросПоСериямПодарков.УстановитьПараметр("КассаККМ"           , КассаККМ);
	ЗапросПоСериямПодарков.УстановитьПараметр("ВидОперацииПродажа" , Перечисления.ВидыОперацийЧекККМ.Продажа);
	
	РезультатЗапросаПоПодаркам        = ЗапросПоПодаркам.Выполнить();
	
	Если РезультатЗапросаПоПодаркам.Пустой() Тогда
		РезультатЗапросаПоСериямПодарков = Неопределено;
	Иначе
		РезультатЗапросаПоСериямПодарков = ЗапросПоСериямПодарков.Выполнить();
	КонецЕсли;
	
	МассивСписанийТоваров = Новый Массив;
	ВыборкаПоПодаркамСклад = РезультатЗапросаПоПодаркам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ЕстьСерииПодарков = Ложь;
	Если РезультатЗапросаПоСериямПодарков <> Неопределено Тогда
		ТаблицаСерийПодарков = РезультатЗапросаПоСериямПодарков.Выгрузить();
		Если ТаблицаСерийПодарков.Количество() > 0 Тогда
			ЕстьСерииПодарков = Истина;
			СтруктураПоискаСерий = Новый Структура;
			СтруктураПоискаСерий.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
			СтруктураПоискаСерий.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		КонецЕсли;
	КонецЕсли;
	
	Пока ВыборкаПоПодаркамСклад.Следующий() Цикл
		
		СписаниеТоваров = СоздатьСписаниеТоваров(ВыборкаПоПодаркамСклад.Склад, КассаККМ);
		
		ВыборкаПоПодаркамНоменклатура = ВыборкаПоПодаркамСклад.Выбрать();
		Пока ВыборкаПоПодаркамНоменклатура.Следующий() Цикл
			Если ВыборкаПоПодаркамНоменклатура.Количество()>0 Тогда
				СтрокаСписанияТоваров = СписаниеТоваров.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСписанияТоваров, ВыборкаПоПодаркамНоменклатура);
				ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(СписаниеТоваров.Товары, СтрокаСписанияТоваров, "КлючСвязи");
				Если СтрокаСписанияТоваров.СтатусУказанияСерий > 0
					И СтрокаСписанияТоваров.Количество > 0
					И ЕстьСерииПодарков Тогда
					СтруктураПоискаСерий.Номенклатура = СтрокаСписанияТоваров.Номенклатура;
					СтруктураПоискаСерий.Характеристика = СтрокаСписанияТоваров.Характеристика;
					СтрокиСерий = ТаблицаСерийПодарков.НайтиСтроки(СтруктураПоискаСерий);
					ОсталосьСерий = СтрокаСписанияТоваров.Количество;
					Для Каждого СтрокаСерии Из СтрокиСерий Цикл
						Если СтрокаСерии.Количество > 0 Тогда
							НоваяСтрокаСерии = СписаниеТоваров.Серии.Добавить();
							НоваяСтрокаСерии.Серия = СтрокаСерии.Серия;
							НоваяСтрокаСерии.Номенклатура = СтрокаСерии.Номенклатура;
							НоваяСтрокаСерии.Характеристика = СтрокаСерии.Характеристика;
							Если ОсталосьСерий > СтрокаСерии.Количество Тогда
								НоваяСтрокаСерии.Количество = СтрокаСерии.Количество;
								ОсталосьСерий = ОсталосьСерий - СтрокаСерии.Количество;
								СтрокаСерии.Количество = 0;
							ИначеЕсли ОсталосьСерий = СтрокаСерии.Количество Тогда
								НоваяСтрокаСерии.Количество = СтрокаСерии.Количество;
								ОсталосьСерий = 0;
								СтрокаСерии.Количество = 0;
							Иначе
								НоваяСтрокаСерии.Количество = ОсталосьСерий;
								СтрокаСерии.Количество = СтрокаСерии.Количество - ОсталосьСерий;
								ОсталосьСерий = 0;
							КонецЕсли;
						КонецЕсли;
						Если ОсталосьСерий <= 0 Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если ЗначениеЗаполнено(ВыборкаПоПодаркамНоменклатура.ШтрихкодУпаковки) Тогда 
					СтрокаМарки = СписаниеТоваров.АкцизныеМарки.Добавить();
					СтрокаМарки.КлючСвязи = СтрокаСписанияТоваров.КлючСвязи;
					СтрокаМарки.АкцизнаяМарка = ВыборкаПоПодаркамНоменклатура.ШтрихкодУпаковки;
					СтрокаМарки.Справка2 = ВыборкаПоПодаркамНоменклатура.Справка2;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если СписаниеТоваров.Товары.Количество() > 0 Тогда
			МассивСписанийТоваров.Добавить(СписаниеТоваров)
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МассивСписанийТоваров;			
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область Интерфейс

//Заполняет для переданной картинки значение шрифт и цвет.
//
Процедура ЗаполнитьШрифтЦвет(ЭлементКартинки, ШрифтВXML, ЦветВXML) Экспорт 
	
	Попытка
		Если ЗначениеЗаполнено(ШрифтВXML) Тогда 
			ЭлементКартинки.Шрифт = ОбщегоНазначения.ЗначениеИзСтрокиXML(ШрифтВXML);
		КонецЕсли;
		Если ЗначениеЗаполнено(ЦветВXML) Тогда 
			ВыбранныйЦвет = ОбщегоНазначения.ЗначениеИзСтрокиXML(ЦветВXML);
			ЭлементКартинки.ЦветРамки = ВыбранныйЦвет;
			ЭлементКартинки.ЦветТекста = ВыбранныйЦвет;
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации(Нстр("ru='Преобразование настроек РМК'"),
						УровеньЖурналаРегистрации.Предупреждение,,, Нстр("ru='Не удалось заполнить оформление настройки'") + ЭлементКартинки.Заголовок);
	КонецПопытки;
	
КонецПроцедуры

// Настройка доступности элементов формы РМК.
//
// Параметры:
//  Элементы - ВсеЭлементыФормы.
//  СтруктураДанных - Структура со свойствами:
//     НаборПравИНастроек - Структура.
//     ЦенаВключаетНДС - Булево.
//     ТаблицаКассККМОрганизаций - ТаблицаЗначений.
//     ПодключаемоеОборудованиеЕстьТСД - Булево.
//     ПодключаемоеОборудованиеЕстьВесы - Булево.
//
Процедура УстановитьДоступностьЭлементовФормыРМК(Элементы, СтруктураДанных) Экспорт 
	
	НаборПравИНастроек               = СтруктураДанных.НаборПравИНастроек;
	ЦенаВключаетНДС                  = СтруктураДанных.ЦенаВключаетНДС;
	ТаблицаКассККМОрганизаций        = СтруктураДанных.ТаблицаКассККМОрганизаций;
	ПодключаемоеОборудованиеЕстьТСД  = СтруктураДанных.ПодключаемоеОборудованиеЕстьТСД;
	ПодключаемоеОборудованиеЕстьВесы = СтруктураДанных.ПодключаемоеОборудованиеЕстьВесы;
	Магазин                          = СтруктураДанных.Магазин;
	ЭтоВозврат                       = СтруктураДанных.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	
	Элементы.ТоварыЦена.ТолькоПросмотр = НЕ НаборПравИНастроек.ИзменятьЦену;
	Элементы.ТоварыСумма.ТолькоПросмотр = НЕ НаборПравИНастроек.ИзменятьЦену;
	Элементы.ТоварыСуммаВсего.ТолькоПросмотр = НЕ НаборПравИНастроек.ИзменятьЦену;
	Элементы.ТоварыПродавец.Видимость = НаборПравИНастроек.ИзменятьПродавца;
	Элементы.ТоварыСуммаНДС.Видимость = НЕ ЦенаВключаетНДС;
	Элементы.ТоварыСуммаВсего.Видимость = НЕ ЦенаВключаетНДС;
	Элементы.ТоварыОстаток.Видимость = НаборПравИНастроек.ПоказыватьКолонкуОстаток;
	Элементы.ТоварыСтатусУказанияСерий.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	Элементы.ТоварыНоменклатура.ТолькоПросмотр = НЕ НаборПравИНастроек.РазрешитьРедактироватьНабранныйЧек;
	Элементы.ТоварыНоменклатура.КнопкаОчистки = НаборПравИНастроек.РазрешитьСторнированиеТовара;
	Элементы.ТоварыНоменклатураАртикул.Видимость = НаборПравИНастроек.ПоказыватьАртикулНоменклатуры;
	Элементы.ТоварыНоменклатураКод.Видимость = НаборПравИНастроек.ПоказыватьКодНоменклатуры;
	Элементы.ТоварыНоменклатураКрепость.Видимость = НаборПравИНастроек.ПоказыватьКрепостьНоменклатуры;
	Элементы.ТоварыНоменклатураОбъемДАЛ.Видимость = НаборПравИНастроек.ПоказыватьОбъемНоменклатуры;
	Элементы.ТоварыНоменклатураПроизводитель.Видимость = НаборПравИНастроек.ПоказыватьПроизводителяНоменклатуры;
	Элементы.ТоварыУпаковкаЕдиницаИзмерения.Видимость = НаборПравИНастроек.ВыборУпаковкиПриПродаже;
	
	ЕстьБыстрыеТовары = Элементы.ГруппаБыстрыхТоваров.Доступность;
	
	ТаблицаЗначенийКассИОрганизаций = ТаблицаКассККМОрганизаций.Выгрузить();
		
	ЕстьВозможностьОплатыПлатежнойКартой =
		ПродажиСервер.ЕстьВозможностьОплатыПлатежнойКартой(ТаблицаЗначенийКассИОрганизаций.ВыгрузитьКолонку("КассаККМ"));
		
	НесколькоККМ = ТаблицаКассККМОрганизаций.Количество() > 1;
		
	УстановитьДоступностьОтдельныхЭлементовФормы(
		"КомандаЧО06ПлатежнаяКарта", ЕстьВозможностьОплатыПлатежнойКартой, Элементы);
	УстановитьДоступностьОтдельныхЭлементовФормы(
		"КомандаЧО04Возврат", НаборПравИНастроек.РазрешитьЧекВозврата, Элементы);
	УстановитьДоступностьОтдельныхЭлементовФормы(
		"КомандаПО01БыстрыеТовары", ЕстьБыстрыеТовары, Элементы);
	УстановитьДоступностьОтдельныхЭлементовФормы(
		"КомандаПО02ВвестиВнесениеДенег", НаборПравИНастроек.РазрешитьВнесениеДенег, Элементы);
	УстановитьДоступностьОтдельныхЭлементовФормы(
		"КомандаПО04ОтложитьЧек", НаборПравИНастроек.РазрешитьОтложенныеЧеки, Элементы);
	УстановитьДоступностьОтдельныхЭлементовФормы(
		"КомандаПО05ВвестиАннулирование", НаборПравИНастроек.РазрешитьАннулированиеЧека, Элементы);
	УстановитьДоступностьОтдельныхЭлементовФормы(
		"КомандаПО08РасчетСкидок", НаборПравИНастроек.РазрешитьНазначениеАвтоматическихСкидок, Элементы);
	УстановитьДоступностьОтдельныхЭлементовФормы(
		"КомандаПО28ПросмотрНакоплений" , НаборПравИНастроек.РазрешитьНазначениеАвтоматическихСкидок, Элементы);
	УстановитьДоступностьОтдельныхЭлементовФормы(
		"КомандаПО10НапечататьПоследнийСлипЧек", ЕстьВозможностьОплатыПлатежнойКартой, Элементы);
	УстановитьДоступностьОтдельныхЭлементовФормы(
		"КомандаПО13ВвестиВыемкаДенег", НаборПравИНастроек.РазрешитьИзъятиеДенег, Элементы);
	УстановитьДоступностьОтдельныхЭлементовФормы(
		"КомандаПО14Продавец", НаборПравИНастроек.ИзменятьПродавца, Элементы);
	УстановитьДоступностьОтдельныхЭлементовФормы(
		"КомандаПО15ПродолжитьЧек", НаборПравИНастроек.РазрешитьОтложенныеЧеки, Элементы);
	УстановитьДоступностьОтдельныхЭлементовФормы(
		"КомандаПО16ВвестиВозвратТовараОтРозничногоПокупателя", НаборПравИНастроек.РазрешитьЧекВозврата, Элементы);
	УстановитьДоступностьОтдельныхЭлементовФормы(
		"КомандаПО17ВвестиИнформационнуюКарту", НаборПравИНастроек.РазрешитьПодборИнформационнойКарты, Элементы);
	УстановитьДоступностьОтдельныхЭлементовФормы(
		"КомандаПО19УправляемыеСкидки", НаборПравИНастроек.РазрешитьНазначениеУправляемыхСкидок, Элементы);
	УстановитьДоступностьОтдельныхЭлементовФормы(
		"КомандаПО20ЗаменаКарты", НаборПравИНастроек.РазрешитьЗаменуДисконтныхКарт, Элементы);
	УстановитьДоступностьОтдельныхЭлементовФормы(
		"КомандаПО22РучныеСкидки", НаборПравИНастроек.РазрешитьНазначениеРучныхСкидок, Элементы);
	УстановитьДоступностьЭлементаФормы(
		"ГруппаПанельРучныхСкидок", НаборПравИНастроек.РазрешитьНазначениеРучныхСкидок, Элементы);
	УстановитьДоступностьОтдельныхЭлементовФормы(
		"КомандаПО23ВвестиСерии", ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры"), Элементы);
	УстановитьДоступностьОтдельныхЭлементовФормы(
		"КомандаПО24ПолучитьИзТСД", ПодключаемоеОборудованиеЕстьТСД, Элементы);
	УстановитьДоступностьОтдельныхЭлементовФормы(
		"КомандаПО26ОтчетБезГашения", НаборПравИНастроек.РазрешитьОтчетОСменеБезГашения, Элементы);
	УстановитьДоступностьОтдельныхЭлементовФормы(
		"КомандаПО12ПолучитьВес", ПодключаемоеОборудованиеЕстьВесы, Элементы);
	УстановитьДоступностьОтдельныхЭлементовФормы(
		"КомандаПО27ПродажаПоЗаказу", ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПокупателей"), Элементы);
	УстановитьДоступностьОтдельныхЭлементовФормы(
		"КомандаПО30ВозвратПоследнегоЧека", НаборПравИНастроек.РазрешитьЧекВозврата, Элементы);
	УстановитьДоступностьОтдельныхЭлементовФормы(
		"КомандаЧО08ОплатаБонусами", НаборПравИНастроек.РазрешитьБонусныеПрограммыЛояльности, Элементы);
	УстановитьВидимостьОтдельныхЭлементовФормы(
		"КомандаЧО08ОплатаБонусами", НаборПравИНастроек.РазрешитьБонусныеПрограммыЛояльности, Элементы);
	УстановитьДоступностьОтдельныхЭлементовФормы(
		"КомандаПО29ОтменитьОплатуБонусами", НаборПравИНастроек.РазрешитьБонусныеПрограммыЛояльности, Элементы);
	УстановитьДоступностьОтдельныхЭлементовФормы(
		"КомандаЧО09ОперацияДС", НаборПравИНастроек.РазрешитьРасчетыСКлиентами, Элементы);
	УстановитьВидимостьОтдельныхЭлементовФормы(
		"КомандаЧО09ОперацияДС", НаборПравИНастроек.РазрешитьРасчетыСКлиентами, Элементы);
	УстановитьДоступностьОтдельныхЭлементовФормы(
		"КомандаПО31ПолучитьДокументРасчета", НаборПравИНастроек.РазрешитьРасчетыСКлиентами, Элементы);
	УстановитьДоступностьОтдельныхЭлементовФормы(
		"КомандаПО33ПоискПоНаименованию", ПолучитьФункциональнуюОпцию("ИспользоватьПравилаИменованияНоменклатуры"), Элементы);
	УстановитьВидимостьОтдельныхЭлементовФормы(
		"КомандаПО34ВыборКассыККМ", НесколькоККМ, Элементы);
	УстановитьВидимостьОтдельныхЭлементовФормы(
		"КартинкаПО34ВыборКассыККМ", НесколькоККМ, Элементы);
	УстановитьДоступностьОтдельныхЭлементовФормы(
		"КомандаПО35ЗаявлениеНаВозврат", ЭтоВозврат, Элементы);
	УстановитьДоступностьОтдельныхЭлементовФормы(
		"КартинкаПО35ЗаявлениеНаВозвратНажатие", ЭтоВозврат, Элементы);
	
КонецПроцедуры

// Настройка доступности отдельных элементов формы РМК.
//
Процедура УстановитьДоступностьОтдельныхЭлементовФормы(БазовоеИмяЭлемента, Доступность, ЭлементыФормы) Экспорт 
	
	УстановитьДоступностьЭлементаФормы(БазовоеИмяЭлемента, Доступность, ЭлементыФормы);
	
	ТекущееИмяЭлемента = "Программно" + БазовоеИмяЭлемента;
	УстановитьДоступностьЭлементаФормы(ТекущееИмяЭлемента, Доступность, ЭлементыФормы);
	
	ТекущееИмяЭлемента = БазовоеИмяЭлемента + "Акселераторы";
	УстановитьДоступностьЭлементаФормы(ТекущееИмяЭлемента, Доступность, ЭлементыФормы);
	
	ТекущееИмяЭлемента = "Программно" + БазовоеИмяЭлемента + "Акселераторы";
	УстановитьДоступностьЭлементаФормы(ТекущееИмяЭлемента, Доступность, ЭлементыФормы);
	
	БазовоеИмяЭлемента = СтрЗаменить(БазовоеИмяЭлемента, "Команда", "Картинка");
	УстановитьДоступностьЭлементаФормы(БазовоеИмяЭлемента, Доступность, ЭлементыФормы);
	
	ТекущееИмяЭлемента = "Программно" + БазовоеИмяЭлемента;
	УстановитьДоступностьЭлементаФормы(ТекущееИмяЭлемента, Доступность, ЭлементыФормы);
	
	ТекущееИмяЭлемента = БазовоеИмяЭлемента + "Акселераторы";
	УстановитьДоступностьЭлементаФормы(ТекущееИмяЭлемента, Доступность, ЭлементыФормы);
	
	ТекущееИмяЭлемента = "Программно" + БазовоеИмяЭлемента + "Акселераторы";
	УстановитьДоступностьЭлементаФормы(ТекущееИмяЭлемента, Доступность, ЭлементыФормы);
	
КонецПроцедуры

// Настройка доступности элемента формы РМК.
//
Процедура УстановитьДоступностьЭлементаФормы(ИмяЭлемента, Доступность, Элементы)
	
	Если РозничныеПродажиКлиентСервер.ПроверитьНаличиеЭлементаФормы(Элементы, ИмяЭлемента) Тогда
		Элемент = Элементы[ИмяЭлемента];
		Элемент.Доступность = Доступность;
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			Для каждого ПодЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
				 УстановитьДоступностьЭлементаФормы(ПодЭлемент.Имя, Доступность, Элементы)
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Настройка видимости элемента формы РМК.
//
Процедура УстановитьВидимостьЭлементаФормы(ИмяЭлемента, Видимость, Элементы)
	
	Если РозничныеПродажиКлиентСервер.ПроверитьНаличиеЭлементаФормы(Элементы, ИмяЭлемента) Тогда
		Элемент = Элементы[ИмяЭлемента];
		Элемент.Видимость = Видимость;
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			Для каждого ПодЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
				 УстановитьВидимостьЭлементаФормы(ПодЭлемент.Имя, Видимость, Элементы)
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Настройка видимости отдельных элементов формы РМК.
//
Процедура УстановитьВидимостьОтдельныхЭлементовФормы(БазовоеИмяЭлемента, Видимость, ЭлементыФормы)
	
	УстановитьВидимостьЭлементаФормы(БазовоеИмяЭлемента, Видимость, ЭлементыФормы);
	
	ТекущееИмяЭлемента = "Программно" + БазовоеИмяЭлемента;
	УстановитьВидимостьЭлементаФормы(ТекущееИмяЭлемента, Видимость, ЭлементыФормы);
	
	ТекущееИмяЭлемента = БазовоеИмяЭлемента + "Акселераторы";
	УстановитьВидимостьЭлементаФормы(ТекущееИмяЭлемента, Видимость, ЭлементыФормы);
	
	ТекущееИмяЭлемента = "Программно" + БазовоеИмяЭлемента + "Акселераторы";
	УстановитьВидимостьЭлементаФормы(ТекущееИмяЭлемента, Видимость, ЭлементыФормы);
	
	БазовоеИмяЭлемента = СтрЗаменить(БазовоеИмяЭлемента, "Команда", "Картинка");
	УстановитьВидимостьЭлементаФормы(БазовоеИмяЭлемента, Видимость, ЭлементыФормы);
	
	ТекущееИмяЭлемента = "Программно" + БазовоеИмяЭлемента;
	УстановитьВидимостьЭлементаФормы(ТекущееИмяЭлемента, Видимость, ЭлементыФормы);
	
	ТекущееИмяЭлемента = БазовоеИмяЭлемента + "Акселераторы";
	УстановитьВидимостьЭлементаФормы(ТекущееИмяЭлемента, Видимость, ЭлементыФормы);
	
	ТекущееИмяЭлемента = "Программно" + БазовоеИмяЭлемента + "Акселераторы";
	УстановитьВидимостьЭлементаФормы(ТекущееИмяЭлемента, Видимость, ЭлементыФормы);
КонецПроцедуры

// Заполняет значение НаборПравИНастроек в соответствии с настройкой дополнительных
// прав для текущего пользователя.
//
// Параметры:
//  НаборПравИНастроек - Произвольный.
//  НастройкаРМК - СправочникСсылка.НастройкиРМК.
//
Процедура ЗаполнитьНаборПравИНастроекРМК(НаборПравИНастроек, НастройкаРМК) Экспорт 

	УстановитьПривилегированныйРежим(Истина);
	Пользователь = ОбщегоНазначенияРТ.ПользовательСУчетомИзмененныхПрав();
	
	НаборПравИНастроек = Новый Структура;
	
	НаборПравИНастроек.Вставить("РазрешитьЧекВозврата",
		УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
			ПланыВидовХарактеристик.ПраваПользователей.РазрешитьЧекВозврата,
			Ложь,
			Пользователь));
	
	НаборПравИНастроек.Вставить("ИзменятьЦену",
		УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
			ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену,
			Ложь,
			Пользователь));
	
	НаборПравИНастроек.Вставить("ИзменятьПродавца",
		УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
			ПланыВидовХарактеристик.ПраваПользователей.ИзменятьПродавца,
			Ложь,
			Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьАннулированиеЧека",
		УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
			ПланыВидовХарактеристик.ПраваПользователей.РазрешитьАннулированиеЧека,
			Ложь,
			Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьВнесениеДенег",
		УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
			ПланыВидовХарактеристик.ПраваПользователей.РазрешитьВнесениеДенег,
			Ложь,
			Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьВыборКартыБезSMS",
		УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
			ПланыВидовХарактеристик.ПраваПользователей.РазрешитьВыборКартыБезSMS,
			Ложь,
			Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьВыборКартыБезEmailПодтверждения",
		УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
			ПланыВидовХарактеристик.ПраваПользователей.РазрешитьВыборКартыБезEmailПодтверждения,
			Ложь,
			Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьИзъятиеДенег",
		УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
			ПланыВидовХарактеристик.ПраваПользователей.РазрешитьИзъятиеДенег,
			Ложь,
			Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьПодборИнформационнойКарты",
		УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
			ПланыВидовХарактеристик.ПраваПользователей.РазрешитьПодборИнформационнойКарты,
			Ложь,
			Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьСторнированиеТовара",
		УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
			ПланыВидовХарактеристик.ПраваПользователей.РазрешитьСторнированиеТовара,
			Ложь,
			Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьОтложенныеЧеки",
		УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
			ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОтложенныеЧеки,
			Ложь,
			Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьРедактироватьНабранныйЧек",
		УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
			ПланыВидовХарактеристик.ПраваПользователей.РазрешитьРедактироватьНабранныйЧек,
			Ложь,
			Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьЗаменуДисконтныхКарт",
		УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
			ПланыВидовХарактеристик.ПраваПользователей.РазрешитьЗаменуДисконтныхКарт,
			Ложь,
			Пользователь));
	
	НаборПравИНастроек.Вставить("ПоказыватьКолонкуОстаток",
		УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
			ПланыВидовХарактеристик.ПраваПользователей.ПоказыватьКолонкуОстаток,
			Ложь,
			Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьНазначениеАвтоматическихСкидок",
		ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах"));
	
	НаборПравИНастроек.Вставить("РазрешитьНазначениеУправляемыхСкидок",
		ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах")
			И УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
				ПланыВидовХарактеристик.ПраваПользователей.РазрешитьНазначениеУправляемыхСкидок,
				Ложь,
				Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьНазначениеРучныхСкидок",
		ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах")
			И УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
				ПланыВидовХарактеристик.ПраваПользователей.РазрешитьНазначениеРучныхСкидок,
				Ложь,
				Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьОтчетОСменеБезГашения",
		УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
			ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОтчетОСменеБезГашения,
			Ложь,
			Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьБонусныеПрограммыЛояльности",
		ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммыЛояльности"));
	
	НаборПравИНастроек.Вставить("РазрешитьРасчетыСКлиентами",
		ПолучитьФункциональнуюОпцию("ИспользоватьРасчетыСКлиентами"));
	
	НаборПравИНастроек.Вставить("НазначатьЦенуТоварамСНулевойЦеной");
	НаборПравИНастроек.Вставить("ОбъединятьПозицииСОдинаковымТоваром");
	НаборПравИНастроек.Вставить("ВыборИнформационнойКартыТолькоПоКоду");
	НаборПравИНастроек.Вставить("ПроводитьОпросВладельцаКарты");
	НаборПравИНастроек.Вставить("КонтролироватьОстаткиТоваровПриЗакрытииЧека");
	НаборПравИНастроек.Вставить("ПриВозвратеРаспечатыватьПакетДокументов");
	НаборПравИНастроек.Вставить("ШаблонРаботыДисплеяПокупателя");
	НаборПравИНастроек.Вставить("ИнтервалАвтоматическогоСохраненияЧекаККМ");
	НаборПравИНастроек.Вставить("ЛогироватьДействияКассира");
	НаборПравИНастроек.Вставить("ЗакрыватьПодборПриВыбореТовара");
	НаборПравИНастроек.Вставить("ПоказыватьАртикулНоменклатуры");
	НаборПравИНастроек.Вставить("ПоказыватьКодНоменклатуры");
	НаборПравИНастроек.Вставить("ПоказыватьКрепостьНоменклатуры");
	НаборПравИНастроек.Вставить("ПоказыватьОбъемНоменклатуры");
	НаборПравИНастроек.Вставить("ПоказыватьПроизводителяНоменклатуры");
	НаборПравИНастроек.Вставить("ВремяПредупрежденияОСкоромЗакрытииСмены");
	НаборПравИНастроек.Вставить("ЗакрыватьБыстрыеТоварыПриВыбореТовара");
	НаборПравИНастроек.Вставить("КопироватьПараметрыБонусовПриЗаменеКарты");
	НаборПравИНастроек.Вставить("ОткрыватьРедактированиеСтрокиПриПоискеТоваров");
	НаборПравИНастроек.Вставить("ЗапросТабло");
	НаборПравИНастроек.Вставить("ВсегдаОткрыватьФормуМножественногоВводаАкцизныхМарок");
	НаборПравИНастроек.Вставить("ВыборУпаковкиПриПродаже");
	
	ЗаполнитьЗначенияСвойств(НаборПравИНастроек, НастройкаРМК);
	
	НаборПравИНастроек.Вставить("ВыводитьПромИтогНаДисплей");
	НаборПравИНастроек.Вставить("ТекстПриПростое");
	НаборПравИНастроек.Вставить("ТекстВНерабочемСостоянии");
	
	ЗаполнитьЗначенияСвойств(НаборПравИНастроек, НастройкаРМК.ШаблонРаботыДисплеяПокупателя);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЛогированиеДействийКассираВРМК") Тогда
		НаборПравИНастроек.ЛогироватьДействияКассира = Ложь;
	КонецЕсли;
	
	НаборПравИНастроек.Вставить("ЛогируемыеДействия", Новый Структура);
	
	Если НаборПравИНастроек.ЛогироватьДействияКассира Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	НастройкиЛогированияПоВидамДействийКассираВРМК.ВидДействияКассираВРМК
		|ИЗ
		|	РегистрСведений.НастройкиЛогированияПоВидамДействийКассираВРМК КАК НастройкиЛогированияПоВидамДействийКассираВРМК";
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ИндексПеречисления = Перечисления.ВидыДействийКассираВРМК.Индекс(Выборка.ВидДействияКассираВРМК);
			ИмяМетаданныхПеречисления
				= Метаданные.Перечисления.ВидыДействийКассираВРМК.ЗначенияПеречисления[ИндексПеречисления].Имя;
			НаборПравИНастроек.ЛогируемыеДействия.Вставить(ИмяМетаданныхПеречисления);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Кнопки нижней панели в РМК в соответствии с текущей настройкой РМК.
//
Процедура ЗаполнитьКнопкиНижнейПанели(Отказ, ПараметрыИнформации, Элементы, СтруктураДанных, ЭтотОбъект) Экспорт 
	
	НастройкаРМК                = СтруктураДанных.НастройкаРМК;
	ИспользоватьНастройкуРМК    = СтруктураДанных.ИспользоватьНастройкуРМК;
	ПрограммноСозданныеЭлементы = СтруктураДанных.ПрограммноСозданныеЭлементы;
	КартинкиБыстрыхТоваров      = СтруктураДанных.КартинкиБыстрыхТоваров;
	УникальныйИдентификатор     = СтруктураДанных.УникальныйИдентификатор;
	ПрограммноСозданныеКоманды  = СтруктураДанных.ПрограммноСозданныеКоманды;
	ТаблицаБыстрыхТоваров       = СтруктураДанных.ТаблицаБыстрыхТоваров;
	
	АкселераторКнопкиЗаменыПрав = " (Alt+F4)";
	
	МаксимальноеКоличествоКнопокВОдномРяду = 0;
	МаксимальноеКоличествоКнопокВКонфигураторе = ПродажиСервер.МаксимальноеКоличествоКнопокВКонфигураторе();
	
	ШаблонПустойКартинки = Элементы.КартинкаПустаяБыстрыеТоварыШаблон;
	
	ОткрыватьНижнююПанельПриЗапуске = НастройкаРМК.ОткрыватьНижнююПанельПриЗапуске;
	
	ШаблонДляЗаполненияКнопки = Элементы.КартинкаПО01БыстрыеТовары;
	ШаблонДляЗаполненияКнопкиАкселераторы = Элементы.КомандаПО01БыстрыеТоварыАкселераторы;
	
	КартинкаБыстрыеТоварыШаблон = Элементы.КартинкаБыстрыеТоварыШаблон;
	
	РеверсКнопкиПродавец = Ложь;
	ВыводитьПолныйОстатокПустыхКартинок = Ложь;
	
	Для Каждого ЭлементГруппыПрочихОпераций Из Элементы.ГруппаПрочихОпераций.ПодчиненныеЭлементы Цикл
		МаксимальноеКоличествоКнопокВКонфигураторе =
			Макс(МаксимальноеКоличествоКнопокВКонфигураторе, ЭлементГруппыПрочихОпераций.ПодчиненныеЭлементы.Количество());
	КонецЦикла;
	
	Если ИспользоватьНастройкуРМК И НастройкаРМК.ИспользоватьРасширеннуюНастройкуКнопокНижнейПанели
		И НастройкаРМК.КнопкиНижнейПанели.Количество() > 0 Тогда
		
		ИспользоватьРасширеннуюНастройкуКнопокНижнейПанели = Истина;
		// Очистить кнопки.
		МаксимальноеКоличествоКнопокВКонфигураторе = 0;
		ШаблонДляЗаполненияГруппы = Неопределено;
		ШаблонДляЗаполненияКнопки = Неопределено;
		Для Каждого ЭлементГруппыПрочихОпераций Из Элементы.ГруппаПрочихОпераций.ПодчиненныеЭлементы Цикл
			ЭлементГруппыПрочихОпераций.Видимость   = Ложь;
			ЭлементГруппыПрочихОпераций.Доступность = Ложь;
			ШаблонДляЗаполненияГруппы = ЭлементГруппыПрочихОпераций;
			Для Каждого ЭлементКнопкаКонфигуратора Из ЭлементГруппыПрочихОпераций.ПодчиненныеЭлементы Цикл
				ЭлементКнопкаКонфигуратора.Видимость   = Ложь;
				ЭлементКнопкаКонфигуратора.Доступность = Ложь;
				ШаблонДляЗаполненияКнопки = ЭлементКнопкаКонфигуратора;
			КонецЦикла;
		КонецЦикла;
		
		// Очистить акселераторы.
		Для каждого КомандаФормы Из ЭтотОбъект.Команды Цикл
			ИмяКоманды = КомандаФормы.Имя;
			Если Найти(ИмяКоманды, "КомандаПО") = 1 Тогда
				КомандаФормы.СочетаниеКлавиш = ЭтотОбъект.Команды.КомандаБыстрыеТоварыТовар.СочетаниеКлавиш;
			КонецЕсли;
		КонецЦикла;
		
		// Очистить подменю командной панели.
		
		Для каждого ЭлементПодменюПрочихОпераций Из Элементы.ГруппаПанельПрочихОпераций.ПодчиненныеЭлементы Цикл
			ЭлементПодменюПрочихОпераций.Видимость   = Ложь;
			ЭлементПодменюПрочихОпераций.Доступность = Ложь;
		КонецЦикла;
		
		Если НастройкаРМК.МаксимальноеКоличествоКнопокВОдномРяду > 0 Тогда
			МаксимальноеКоличествоКнопокВОдномРяду = НастройкаРМК.МаксимальноеКоличествоКнопокВОдномРяду;
		Иначе 
			МаксимальноеКоличествоКнопокВОдномРяду = МаксимальноеКоличествоКнопокВКонфигураторе;
		КонецЕсли;
		
		КоличествоКнопокНижнейПанели = НастройкаРМК.КнопкиНижнейПанели.Количество();
		
		// Рассчитать высоту панели
		КоличествоРядовКнопок = Цел(КоличествоКнопокНижнейПанели/МаксимальноеКоличествоКнопокВОдномРяду);
		
		Если Не КоличествоРядовКнопок = (КоличествоКнопокНижнейПанели/МаксимальноеКоличествоКнопокВОдномРяду) Тогда
			КоличествоРядовКнопок = КоличествоРядовКнопок + 1;
		КонецЕсли;
		
		Если КоличествоРядовКнопок > 1 Тогда
			ВыводитьПолныйОстатокПустыхКартинок = Истина;
		КонецЕсли;
		
		Элементы.ГруппаПрочихОпераций.Высота = ШаблонДляЗаполненияГруппы.Высота * КоличествоРядовКнопок + 1;
		
		// Создать группы 
		Для Ряд = 1 По КоличествоРядовКнопок Цикл
			ЭлементРяд = Элементы.Вставить(
				"ПрограммноГруппаПрочихОперацийРяд" + Формат(Ряд,"ЧГ=0"),
				Тип("ГруппаФормы"),
				Элементы.ГруппаПрочихОпераций);
			ЭлементРяд.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ЗаполнитьЗначенияСвойств(ЭлементРяд, ШаблонДляЗаполненияГруппы,,
				"Имя, Заголовок, ПутьКДаннымЗаголовка, Видимость, Доступность");
		КонецЦикла;
		
		// Заполнить кнопки
		НомерКнопки = 0;
		Для каждого СтрокаНастройкиКнопок Из НастройкаРМК.КнопкиНижнейПанели Цикл
			
			НомерКнопки = НомерКнопки + 1;
			
			НомерСтрокиНастройки = НомерКнопки;
			Ряд = Цел((НомерСтрокиНастройки - 1) / МаксимальноеКоличествоКнопокВОдномРяду) + 1;
			ПозицияВРяду = НомерСтрокиНастройки -
				(МаксимальноеКоличествоКнопокВОдномРяду *
					Цел((МаксимальноеКоличествоКнопокВОдномРяду * Ряд-1)/МаксимальноеКоличествоКнопокВОдномРяду));
			ЗаголовокКнопки = СтрокаНастройкиКнопок.ЗаголовокКнопки;
			
			ГруппаРяда = Элементы["ПрограммноГруппаПрочихОперацийРяд" + Формат(Ряд,"ЧГ=0")];
			
			// Создать кнопку формы в панели.
			ИмяКоманды = СтрокаНастройкиКнопок.ИмяКоманды;
			ИмяКомандыПрограммно = "Программно" + ИмяКоманды;
			ИмяКартинки = СтрЗаменить(ИмяКоманды, "КомандаПО", "КартинкаПО");
			ИмяКартинкиПрограммно = СтрЗаменить(ИмяКомандыПрограммно, "КомандаПО", "КартинкаПО");
			
			СочетаниеКлавиш = Новый СочетаниеКлавиш(
				Клавиша[СтрокаНастройкиКнопок.Клавиша],
				СтрокаНастройкиКнопок.АкселераторAlt,
				СтрокаНастройкиКнопок.АкселераторCtrl,
				СтрокаНастройкиКнопок.АкселераторShift);
			
			Если ИмяКоманды = "КомандаПО16ВвестиВозвратТовараОтРозничногоПокупателя" Тогда
				ЗаголовокКнопки = НСтр("ru = 'Возврат без основания (%1)'");
				ТекстСочетания = ?(СочетаниеКлавиш.Alt, "Alt + ", "") +
					?(СочетаниеКлавиш.Ctrl, "Ctrl + ", "") +
					?(СочетаниеКлавиш.Shift, "Shift + ", "") +
					Строка(СочетаниеКлавиш.Клавиша);
				ЗаголовокКнопки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокКнопки, ТекстСочетания);
			КонецЕсли;
			ЭлементПолеКартинка = Элементы.Вставить(ИмяКартинкиПрограммно, Тип("ПолеФормы"),ГруппаРяда);
			ЭлементПолеКартинка.ПутьКДанным = "КартинкаШаблон";
			ЭлементПолеКартинка.Вид = ВидПоляФормы.ПолеКартинки;
			
			ЭлементПолеКартинка.ТекстНевыбраннойКартинки = ЗаголовокКнопки;
			ЭлементПолеКартинка.Заголовок = ЗаголовокКнопки;
			
			ЗаполнитьЗначенияСвойств(ЭлементПолеКартинка, КартинкаБыстрыеТоварыШаблон,,
				"Имя, Заголовок, Видимость, Доступность, ПутьКДанным, ТекстНевыбраннойКартинки");
			ЭлементПолеКартинка.УстановитьДействие("Нажатие", ИмяКартинки + "Нажатие");
			ЭлементПолеКартинка.СочетаниеКлавиш = СочетаниеКлавиш;
			
			ЗаполнитьШрифтЦвет(ЭлементПолеКартинка, СтрокаНастройкиКнопок.Шрифт, СтрокаНастройкиКнопок.Цвет);
			
			// Создать кнопку формы в подменю.
			
			ЭлементКнопка = Элементы.Вставить(
				ИмяКартинкиПрограммно + "Акселераторы", Тип("КнопкаФормы"), Элементы.ГруппаПанельПрочихОпераций);
			ЭлементКнопка.Заголовок = ЗаголовокКнопки;
			
			Попытка
				ЭлементКнопка.ИмяКоманды = ИмяКоманды;
			Исключение
				ПараметрыИнформации.ЗаголовокИнформации =
					НСтр("ru = 'Не правильно настроены кнопки. Обратитесь к администратору.'");
				ПараметрыИнформации.ТекстИнформации = ЗаголовокКнопки;
				Отказ = Истина;
				Возврат;
			КонецПопытки;
			
			ЗаполнитьЗначенияСвойств(ЭлементКнопка, ШаблонДляЗаполненияКнопкиАкселераторы,,
				"Имя, Заголовок, ИмяКоманды, Видимость, Доступность");
			ЭлементКнопка.СочетаниеКлавиш = СочетаниеКлавиш;
			
			Если ИмяКоманды = "КомандаПО03ЗаменитьПрава" Тогда
				АкселераторКнопкиЗаменыПрав = СтрЗаменить(ЗаголовокКнопки, НСтр("ru = 'Заменить права'"), "");
			ИначеЕсли ИмяКоманды = "КомандаПО14Продавец" Тогда
				РеверсКнопкиПродавец = Найти(ЗаголовокКнопки, НСтр("ru = 'Выбор продавца'")) > 0;
				ИмяКнопкиПродавец = ИмяКартинкиПрограммно;
			КонецЕсли;
			
		КонецЦикла;
		
		ВыводимыйОстатокПО = КоличествоРядовКнопок * МаксимальноеКоличествоКнопокВОдномРяду - КоличествоКнопокНижнейПанели;
		ГруппаРядаПО = ГруппаРяда;
		
	Иначе
		
		Элементы.ГруппаКнопкиНевключенныеПоУмолчанию.Видимость = Ложь;
		Элементы.ГруппаКнопкиНевключенныеПоУмолчанию.Доступность = Ложь;
		
		Для Каждого ЭлементКнопкаКонфигуратора Из Элементы.ГруппаКнопкиНевключенныеПоУмолчанию.ПодчиненныеЭлементы Цикл
			ЭлементКнопкаКонфигуратора.Видимость = Ложь;
			ЭлементКнопкаКонфигуратора.Доступность = Ложь;
		КонецЦикла;
		
		РеверсКнопкиПродавец = Истина;
		ИмяКнопкиПродавец = "КартинкаПО14Продавец";
		ВыводитьПолныйОстатокПустыхКартинок = Истина;
		ВыводимыйОстатокПО = 0;
		МаксимальноеКоличествоКнопокВОдномРяду = МаксимальноеКоличествоКнопокВКонфигураторе;
		Элементы.КартинкаПО16ВвестиВозвратТовараОтРозничногоПокупателя.Заголовок =
			НСтр("ru = 'Возврат без основания (Ctrl+R)'");
		Элементы.КартинкаПО16ВвестиВозвратТовараОтРозничногоПокупателя.ТекстНевыбраннойКартинки =
			НСтр("ru = 'Возврат без основания (Ctrl+R)'");
		Элементы.КомандаПО16ВвестиВозвратТовараОтРозничногоПокупателяАкселераторы.Заголовок =
			НСтр("ru = 'Возврат без основания (Ctrl+R)'");
	КонецЕсли;
	
	Элементы.ГруппаПрочихОпераций.Видимость = ОткрыватьНижнююПанельПриЗапуске;
	
	// Быстрые товары
	
	Элементы.ГруппаБыстрыхТоваровРядШаблон.Видимость = Ложь;
	Элементы.ГруппаБыстрыхТоваровРядШаблон.Доступность = Ложь;
	
	Для Каждого ЭлементКонфигуратора Из Элементы.ГруппаБыстрыхТоваровРядШаблон.ПодчиненныеЭлементы Цикл
		ЭлементКонфигуратора.Видимость = Ложь;
		ЭлементКонфигуратора.Доступность = Ложь;
	КонецЦикла;
	
	ЕстьПанельБТ = Ложь;
	Если ИспользоватьНастройкуРМК Тогда
		
		ПалитраБыстрыхТоваров = НастройкаРМК.ПалитраБыстрыхТоваров;
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПалитраБыстрыхТоваровБыстрыеТовары.Название КАК Название,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.ЭтоСтраница КАК ЭтоСтраница,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.НомерСтраницы КАК НомерСтраницы,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.СтраницаРазмещения КАК СтраницаРазмещения,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.ИмяКнопки КАК ИмяКнопки,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.Номенклатура КАК Номенклатура,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.Характеристика КАК Характеристика,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.ФайлКартинки КАК ФайлКартинки,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.Клавиша КАК Клавиша,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.АкселераторAlt КАК АкселераторAlt,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.АкселераторCtrl КАК АкселераторCtrl,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.АкселераторShift КАК АкселераторShift,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.Шрифт КАК Шрифт,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.Цвет КАК Цвет
		|ИЗ
		|	Справочник.ПалитраБыстрыхТоваров.БыстрыеТовары КАК ПалитраБыстрыхТоваровБыстрыеТовары
		|ГДЕ
		|	ПалитраБыстрыхТоваровБыстрыеТовары.Ссылка = &Ссылка
		|	И ПалитраБыстрыхТоваровБыстрыеТовары.СтраницаРазмещения = &НомерСтраницы";
		
		Запрос.УстановитьПараметр("Ссылка", ПалитраБыстрыхТоваров);
		Запрос.УстановитьПараметр("НомерСтраницы", 0);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		КоличествоБыстрыхТоваров = Выборка.Количество();
		
		Если КоличествоБыстрыхТоваров > 0  Тогда
			
			ЕстьПанельБТ = Истина;
			// Рассчитать высоту группы
			КоличествоРядовКнопок = Цел(КоличествоБыстрыхТоваров/МаксимальноеКоличествоКнопокВОдномРяду);
			
			Если Не Цел(КоличествоБыстрыхТоваров / МаксимальноеКоличествоКнопокВОдномРяду) =
					(КоличествоБыстрыхТоваров / МаксимальноеКоличествоКнопокВОдномРяду) Тогда
				
				КоличествоРядовКнопок = КоличествоРядовКнопок + 1;
			КонецЕсли;
			
			Если КоличествоРядовКнопок > 1 Тогда
				ВыводитьПолныйОстатокПустыхКартинок = Истина;
			КонецЕсли;
			
			Элементы.ГруппаБыстрыхТоваров.Высота = Элементы.ГруппаБыстрыхТоваровРядШаблон.Высота * КоличествоРядовКнопок;
			
			// Создать группы 
			Для Ряд = 1 По КоличествоРядовКнопок Цикл
				ИмяЭлемента = "ПрограммноГруппаБыстрыхТоваровРяд"+Формат(Ряд,"ЧГ=0");
				СтрокаТаблицы = ПрограммноСозданныеЭлементы.Добавить();
				СтрокаТаблицы.Имя = ИмяЭлемента;
				ЭлементРяд = Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), Элементы.ГруппаБыстрыхТоваров);
				ЭлементРяд.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				ЗаполнитьЗначенияСвойств(ЭлементРяд, Элементы.ГруппаБыстрыхТоваровРядШаблон,,
					"Имя, Заголовок, ПутьКДаннымЗаголовка, Видимость, Доступность");
			КонецЦикла;
			
			// Заполнить картинки.
			НомерСтрокиНастройки = 0;
			Пока Выборка.Следующий() Цикл
				Если КоличествоБыстрыхТоваров = 1 Тогда
					ОткрытиеБыстрыхТоваровБезПанели = Выборка.ЭтоСтраница;
				КонецЕсли;
				СтрокаКартинкиБыстрыхТоваров = КартинкиБыстрыхТоваров.Добавить();
				
				ИмяКнопки = "БыстрыйТовар" + Формат(Выборка.РеквизитДопУпорядочивания, "ЧН=0; ЧГ=0");
				НомерСтрокиНастройки = НомерСтрокиНастройки + 1;
				Ряд = Цел((НомерСтрокиНастройки - 1) / МаксимальноеКоличествоКнопокВОдномРяду) + 1;
				ПозицияВРяду = НомерСтрокиНастройки - 
					(МаксимальноеКоличествоКнопокВОдномРяду * 
						Цел((МаксимальноеКоличествоКнопокВОдномРяду * Ряд-1)/МаксимальноеКоличествоКнопокВОдномРяду));
				ЗаголовокКнопки = Выборка.Название;
				
				ГруппаРяда = Элементы["ПрограммноГруппаБыстрыхТоваровРяд" + Формат(Ряд,"ЧГ=0")];
				
				// Создать картинку.
				ЭтоКартинка = Ложь;
				ФайлКартинки = Выборка.ФайлКартинки;
				Если Не ФайлКартинки.Пустая() Тогда
					ДанныеФайла = НавигационнаяСсылкаКартинки(ФайлКартинки, УникальныйИдентификатор);
					ФайлХранилище = ПолучитьИзВременногоХранилища(ДанныеФайла);
					
					Если НЕ ФайлХранилище = Неопределено Тогда
						Если ТипЗнч(ФайлХранилище) = Тип("ДвоичныеДанные") Тогда
							ЭтоКартинка = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				СочетаниеКлавиш = Новый СочетаниеКлавиш(
					Клавиша[Выборка.Клавиша],
					Выборка.АкселераторAlt,
					Выборка.АкселераторCtrl,
					Выборка.АкселераторShift);
				
				ИмяКоманды = "ПрограммноКомандаБыстрыеТовары" + ИмяКнопки;
				СтрокаТаблицы = ПрограммноСозданныеКоманды.Добавить();
				СтрокаТаблицы.Имя = ИмяКоманды;
				КомандаФормы = ЭтотОбъект.Команды.Добавить(ИмяКоманды);
				КомандаФормы.Действие = "КомандаБыстрыеТоварыТовар";
				
				ИмяЭлемента = "Программно" + ИмяКнопки;
				СтрокаТаблицы = ПрограммноСозданныеЭлементы.Добавить();
				СтрокаТаблицы.Имя = ИмяЭлемента;
				ЭлементПолеКартинка = Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"),ГруппаРяда);
				ЭлементПолеКартинка.ПутьКДанным =
					"КартинкиБыстрыхТоваров[" + Формат(НомерСтрокиНастройки - 1, "ЧН=0; ЧГ=0") + "].АдресКартинки";
				
				ЭлементПолеКартинка.Вид = ВидПоляФормы.ПолеКартинки;
				
				Если ЭтоКартинка Тогда
					СтрокаКартинкиБыстрыхТоваров.АдресКартинки = ДанныеФайла;
				Иначе
					ЭлементПолеКартинка.ТекстНевыбраннойКартинки = ЗаголовокКнопки;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ЭлементПолеКартинка, КартинкаБыстрыеТоварыШаблон,,
					"Имя, Заголовок, Видимость, Доступность, ПутьКДанным, ТекстНевыбраннойКартинки");
				
				ЭлементПолеКартинка.УстановитьДействие("Нажатие", "КартинкаБыстрыеТоварыШаблонНажатие");
				ЭлементПолеКартинка.СочетаниеКлавиш =  СочетаниеКлавиш;
				
				ЗаполнитьШрифтЦвет(ЭлементПолеКартинка, Выборка.Шрифт, Выборка.Цвет); 
				
				// Создать кнопку формы в подменю.
				ЭлементКнопка = Элементы.Вставить(
					ИмяКоманды + "Акселераторы", Тип("КнопкаФормы"), Элементы.ГруппаПанельБыстрыхТоваров);
				ЭлементКнопка.Заголовок = ЗаголовокКнопки;
				
				Попытка
					ЭлементКнопка.ИмяКоманды = ИмяКоманды;
				Исключение
					ПараметрыИнформации.ЗаголовокИнформации =
						НСтр("ru = 'Не правильно настроены кнопки. Обратитесь к администратору.'");
					ПараметрыИнформации.ТекстИнформации = ЗаголовокКнопки;
					Отказ = Истина;
					Возврат;
				КонецПопытки;
				
				ЗаполнитьЗначенияСвойств(ЭлементКнопка, ШаблонДляЗаполненияКнопкиАкселераторы,,
					"Имя, Заголовок, ИмяКоманды, Видимость, Доступность");
				ЭлементКнопка.СочетаниеКлавиш = СочетаниеКлавиш;
				
				СтрокаТаблицыБыстрыхТоваров = ТаблицаБыстрыхТоваров.Добавить();
				СтрокаТаблицыБыстрыхТоваров.ИдентификаторБыстрогоТовара = ИмяКнопки;
				СтрокаТаблицыБыстрыхТоваров.Номенклатура = Выборка.Номенклатура;
				СтрокаТаблицыБыстрыхТоваров.Характеристика = Выборка.Характеристика;
				СтрокаТаблицыБыстрыхТоваров.ЭтоСтраница = Выборка.ЭтоСтраница;
				СтрокаТаблицыБыстрыхТоваров.НомерСтраницы = Выборка.НомерСтраницы;
				
			КонецЦикла;
			
			ВыводимыйОстатокБТ = КоличествоРядовКнопок * МаксимальноеКоличествоКнопокВОдномРяду - КоличествоБыстрыхТоваров;
			ГруппаРядаБТ = ГруппаРяда;
			
		Иначе
			Элементы.ГруппаБыстрыхТоваров.Доступность = Ложь;
			ВыводимыйОстатокБТ = 0;
		КонецЕсли;
	Иначе
		Элементы.ГруппаБыстрыхТоваров.Доступность = Ложь;
		ВыводимыйОстатокБТ = 0;
	КонецЕсли;
	
	Если ВыводитьПолныйОстатокПустыхКартинок Тогда
		
		Для Индекс = 1 По ВыводимыйОстатокПО Цикл
			ИмяЭлемента = "ПрограммноПустаяКартинкаПрочихОпераций" + Формат(Индекс,"ЧГ=0");
			ЭлементПолеКартинка = Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"),ГруппаРядаПО);
			ЭлементПолеКартинка.ПутьКДанным = "КартинкаШаблон";
			ЭлементПолеКартинка.Вид = ВидПоляФормы.ПолеКартинки;
			ЗаполнитьЗначенияСвойств(ЭлементПолеКартинка, ШаблонПустойКартинки,,
				"Имя, Заголовок, Видимость, ПутьКДанным, ТекстНевыбраннойКартинки");
		КонецЦикла;
		
		Для Индекс = 1 По ВыводимыйОстатокБТ Цикл
			ИмяЭлемента = "ПрограммноПустаяКартинкаБыстрыхТоваров" + Формат(Индекс,"ЧГ=0");
			ЭлементПолеКартинка = Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"),ГруппаРядаБТ);
			ЭлементПолеКартинка.ПутьКДанным = "КартинкаШаблон";
			ЭлементПолеКартинка.Вид = ВидПоляФормы.ПолеКартинки;
			ЗаполнитьЗначенияСвойств(ЭлементПолеКартинка, ШаблонПустойКартинки,,
				"Имя, Заголовок, Видимость, ПутьКДанным, ТекстНевыбраннойКартинки");
		КонецЦикла;
	ИначеЕсли ЕстьПанельБТ Тогда
		Если ВыводимыйОстатокБТ > ВыводимыйОстатокПО Тогда
			ВыводимыйОстатокБТ = ВыводимыйОстатокБТ - ВыводимыйОстатокПО;
			Для Индекс = 1 По ВыводимыйОстатокБТ Цикл
				ИмяЭлемента = "ПрограммноПустаяКартинкаБыстрыхТоваров" + Формат(Индекс,"ЧГ=0");
				ЭлементПолеКартинка = Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"),ГруппаРядаБТ);
				ЭлементПолеКартинка.ПутьКДанным = "КартинкаШаблон";
				ЭлементПолеКартинка.Вид = ВидПоляФормы.ПолеКартинки;
				ЗаполнитьЗначенияСвойств(ЭлементПолеКартинка, ШаблонПустойКартинки,,
					"Имя, Заголовок, Видимость, ПутьКДанным, ТекстНевыбраннойКартинки");
			КонецЦикла;
		ИначеЕсли ВыводимыйОстатокПО > ВыводимыйОстатокБТ Тогда
			ВыводимыйОстатокПО = ВыводимыйОстатокПО - ВыводимыйОстатокБТ;
			Для Индекс = 1 По ВыводимыйОстатокПО Цикл
				ИмяЭлемента = "ПрограммноПустаяКартинкаПрочихОпераций" + Формат(Индекс,"ЧГ=0");
				ЭлементПолеКартинка = Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"),ГруппаРядаПО);
				ЭлементПолеКартинка.ПутьКДанным = "КартинкаШаблон";
				ЭлементПолеКартинка.Вид = ВидПоляФормы.ПолеКартинки;
				ЗаполнитьЗначенияСвойств(ЭлементПолеКартинка, ШаблонПустойКартинки,,
					"Имя, Заголовок, Видимость, ПутьКДанным, ТекстНевыбраннойКартинки");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаБыстрыхТоваров.Видимость   = Ложь;
	
	УстановитьДоступностьЭлементовФормыРМК(Элементы, СтруктураДанных.ПараметрыДоступностиЭлементов);
	
КонецПроцедуры

// Получает ссылку на картинку.
//
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	
КонецФункции

// Заполняет представление табло. Используется в РМК.
//
Процедура ЗаполнитьПредставлениеТаблоСервер(ЗапросТабло, Товары) Экспорт 
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПредставлениеТабло", ЗапросТабло);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПредставлениеТаблоСервер(Товары, СтруктураДействий);
	
КонецПроцедуры

// Заполнияет кнопки верхней панели в РМК, настраивает цвет и шрифт.
//
// Параметры:
//  Элементы - ВсеЭлементыФормы.
//  ИспользоватьНастройкуРМК - Булево.
//  КнопкиВерхнейПанели - ТабличнаяЧасть.
//
Процедура ЗаполнитьКнопкиВерхнейПанели(Элементы, ИспользоватьНастройкуРМК, КнопкиВерхнейПанели) Экспорт 
	
	Если ИспользоватьНастройкуРМК Тогда 
		
		Для Каждого КнопкаВрехнейПанели Из КнопкиВерхнейПанели Цикл
			Попытка
				Если Не КнопкаВрехнейПанели.ДоступнаКнопка Тогда 
					Элементы[КнопкаВрехнейПанели.ИмяКнопки].Видимость = Ложь;
				КонецЕсли;
				Если Не КнопкаВрехнейПанели.ДоступнаКоманда Тогда 
					Элементы[КнопкаВрехнейПанели.ИмяКоманды].Видимость = Ложь;
				КонецЕсли;
				Если ЗначениеЗаполнено(КнопкаВрехнейПанели.Шрифт) Тогда 
					Элементы[КнопкаВрехнейПанели.ИмяКнопки].Шрифт = ОбщегоНазначения.ЗначениеИзСтрокиXML(КнопкаВрехнейПанели.Шрифт);
				КонецЕсли;
				Если ЗначениеЗаполнено(КнопкаВрехнейПанели.Цвет) Тогда 
					Цвет = ОбщегоНазначения.ЗначениеИзСтрокиXML(КнопкаВрехнейПанели.Цвет);
					Элементы[КнопкаВрехнейПанели.ИмяКнопки].ЦветРамки = Цвет;
					Элементы[КнопкаВрехнейПанели.ИмяКнопки].ЦветТекста = Цвет;
				КонецЕсли;
			Исключение
				ЗаписьЖурналаРегистрации(Нстр("ru='Преобразование настроек РМК'"),
						УровеньЖурналаРегистрации.Предупреждение,,, Нстр("ru='Не удалось заполнить оформление настройки'") + КнопкаВрехнейПанели.ЗаголовокКнопки);
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает кнопки верхней панели для текущей настройки РМК.
// 
// Параметры:
//  НастройкаРМК - СправочникСсылка.НастройкиРМК.
//  МассивКнопок - Массив.
//
Процедура ПолучитьКнопкиВерхнейПанели(НастройкаРМК, МассивКнопок) Экспорт 
	
	Для Каждого Кнопка Из НастройкаРМК.КнопкиВерхнейПанели Цикл 
		МассивКнопок.Добавить(Кнопка.ИмяКнопки);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Оплата

// Заполняет в документе ЧекККМ табличную часть Оплата.
//
Процедура ДобавитьОплатуБонусамиВЧек(Объект, ОбъектЧекККМ, ОтбиратьПоОрганизации) Экспорт 
	
	Для Каждого СтрокаОплаты Из Объект.ОплатаБонуснымиБаллами Цикл
		Если ОтбиратьПоОрганизации И ОбъектЧекККМ.Организация <> СтрокаОплаты.Организация Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ОбъектЧекККМ.Оплата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплаты);
		
		КурсКонвертации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОплаты.БонуснаяПрограммаЛояльности, "КурсКонвертацииБонусовВВалюту");
		НоваяСтрока.СуммаБонусовВСкидках = ОбъектЧекККМ.Товары.Итог("СуммаСкидкиОплатыБонусом");
		НоваяСтрока.КоличествоБонусов = НоваяСтрока.СуммаБонусовВСкидках / ?(ЗначениеЗаполнено(КурсКонвертации), КурсКонвертации, 1);
		НоваяСтрока.КоличествоБонусовВСкидках = НоваяСтрока.КоличествоБонусов;
	КонецЦикла;
	
КонецПроцедуры

// Получает оставшуюся сумму для оплаты документа Заказ покупателя.
//
Процедура ЗаполнитьСуммуОстаткаДокументаРасчета(СуммаОстатка, ДокументРасчета, ЗаказПокупателя) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыСКлиентамиОстатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(
	|			,
	|			ДокументРасчета = &ДокументРасчета
	|				И ЗаказПокупателя = &ЗаказПокупателя) КАК РасчетыСКлиентамиОстатки";
	
	Запрос.УстановитьПараметр("ДокументРасчета", ДокументРасчета);
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		СуммаОстатка = Выборка.Сумма;
	Иначе
		СуммаОстатка = 0;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет табличные части СкидкиНаценки, Подарки на основании соответствующих
// табличных частей в документе Заказ покупателя.
//
Процедура ЗаполнитьТабличныеЧастиНаОснованииЗаказаПокупателя(Объект) Экспорт 
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Объект.ЗаказПокупателя["Товары"], Объект["Товары"]);
	
	ТЗ = Объект["Товары"].Выгрузить();
	ТЗ.ЗаполнитьЗначения(Объект.ЗаказПокупателя.Организация, "Организация");
	ТЗ.ЗаполнитьЗначения(Объект.ЗаказПокупателя.Склад      , "Склад");
	
	Объект["Товары"].Загрузить(ТЗ);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Объект.ЗаказПокупателя["СкидкиНаценки"], Объект["СкидкиНаценки"]);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Объект.ЗаказПокупателя["Подарки"], Объект["Подарки"]);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяСкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка
	|ИЗ
	|	Документ.ЗаказПокупателя.СкидкиНаценки КАК ЗаказПокупателяСкидкиНаценки
	|ГДЕ
	|	ЗаказПокупателяСкидкиНаценки.СкидкаНаценка.Управляемая
	|	И ЗаказПокупателяСкидкиНаценки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.ЗаказПокупателя);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Запрос.Выполнить().Выгрузить(), Объект["УправляемыеСкидки"]);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
		Объект.ЗаказПокупателя["БонусныеБаллыКНачислению"], Объект["БонусныеБаллыКНачислению"]);
	
КонецПроцедуры

// Распределяет оплату бонусами в разрезе организаций в чеке.
//
// Параметры:
//  ЧекККМВОбработке - ДокументСсылка.ЧекККМ.
//  Объект - ДанныеФормаКоллекция.
//
Процедура РаспределитьОплатуБонусамиПоОрганизациямПриВосстановлении(ЧекККМВОбработке, Объект) Экспорт
	
	СтруктураИменРеквизитовКарты = Новый Структура;
	СтруктураИменРеквизитовКарты.Вставить("БонуснаяПрограммаЛояльности", "БонуснаяПрограммаЛояльности");
	СтруктураИменРеквизитовКарты.Вставить("ВидОплаты", "БонуснаяПрограммаЛояльности.ВидОплаты");
	ЗначенияРеквизитовКарты =
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДисконтнаяКарта, СтруктураИменРеквизитовКарты);
	
	ТаблицаОрганизаций = Объект.Товары.Выгрузить();
	ТаблицаОрганизаций.Свернуть("Организация", "СуммаСкидкиОплатыБонусом");
	Для Каждого СтрокаОплаты Из ЧекККМВОбработке.Оплата Цикл
		НоваяСтрока = Объект.ОплатаБонуснымиБаллами.Добавить();
		НоваяСтрока.БонуснаяПрограммаЛояльности = ЗначенияРеквизитовКарты.БонуснаяПрограммаЛояльности;
		НоваяСтрока.ВидОплаты = СтрокаОплаты.ВидОплаты;
		
		НоваяСтрока.КоличествоБонусовВСкидках = СтрокаОплаты.КоличествоБонусовВСкидках;
		НоваяСтрока.СуммаБонусовВСкидках = СтрокаОплаты.СуммаБонусовВСкидках;
		НоваяСтрока.КоличествоБонусов = СтрокаОплаты.КоличествоБонусов;
		НоваяСтрока.СуммаБонусов = СтрокаОплаты.Сумма;
		
		СтрокаОрганизации = Неопределено;
		Если НоваяСтрока.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой Тогда
			СтрокаОрганизации = ТаблицаОрганизаций.Найти(СтрокаОплаты.СуммаБонусовВСкидках, "СуммаСкидкиОплатыБонусом");
		Иначе
			СтрокаОрганизации = ТаблицаОрганизаций.Найти(СтрокаОплаты.Сумма, "СуммаСкидкиОплатыБонусом");
		КонецЕсли;
		Если СтрокаОрганизации = Неопределено Тогда
			НоваяСтрока.Организация = Объект.Организация;
		Иначе
			НоваяСтрока.Организация = СтрокаОрганизации.Организация;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет оплату бонусами в чеке.
//
// Параметры:
//  Параметр - Структура.
//  Объект - ДанныеФормаКоллекция.
//
Процедура ОбработатьОплатуБонусами(Параметр, Объект) Экспорт
	
	Объект.ЕстьОплатаБонусами = Истина;
	
	ТаблицаРаспределения = ПолучитьИзВременногоХранилища(Параметр.АдресВоВременномХранилище);
	//ВидОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметр.БонуснаяПрограмма, "ВидОплаты");
	ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой;
	
	ТаблицаОрганизаций = ТаблицаРаспределения.Скопировать();
	ТаблицаОрганизаций.Свернуть("Организация", "КоличествоБонусовОплачено, СуммаОплачено");
	
	Для Каждого СтрокаОрганизации Из ТаблицаОрганизаций Цикл
		НоваяСтрока = Объект.ОплатаБонуснымиБаллами.Добавить();
		НоваяСтрока.Организация = СтрокаОрганизации.Организация;
		НоваяСтрока.БонуснаяПрограммаЛояльности = Параметр.БонуснаяПрограмма;
		НоваяСтрока.ВидОплаты = ВидОплаты;
		
		НоваяСтрока.КоличествоБонусовВСкидках = СтрокаОрганизации.КоличествоБонусовОплачено;
		НоваяСтрока.СуммаБонусовВСкидках = СтрокаОрганизации.СуммаОплачено;
	КонецЦикла;
	
	Для Каждого СтрокаРаспределения Из ТаблицаРаспределения Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерСтроки", СтрокаРаспределения.НомерСтроки);
		СтрокиТоваров = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТоваров.Количество() > 0 Тогда
			СтрокаТоваров = СтрокиТоваров[0];
			СтрокаТоваров.СуммаСкидкиОплатыБонусом = СтрокаРаспределения.СуммаОплачено;
			СтрокаТоваров.Сумма = СтрокаТоваров.Сумма - СтрокаТоваров.СуммаСкидкиОплатыБонусом;
			СтрокаТоваров.СуммаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаНДС(
			СтрокаТоваров.Сумма,
			СтрокаТоваров.СтавкаНДС,
			Объект.ЦенаВключаетНДС);
		КонецЕсли;
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийЧекККМ.Возврат И НЕ Объект.ПродажаПоЗаказу Тогда
		СкидкиНаценкиСервер.ОкруглитьЧекВПользуПокупателя(Объект, "Товары", "СкидкиНаценки");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
КонецПроцедуры

// Заполняет таблицу погашения подарочных сертификатов.
//
// Параметры:
//  АдресТаблицы - Строка.
//  Организация - СправочникСсылка.Организации.
//  КлючСвязиТПЧеков - Число.
//  ТаблицаСертификаты - Табличная часть.
//
Процедура ДобавитьТаблицуПогашениеПодарочныхСертификатов(АдресТаблицы, Организация, КлючСвязиТПЧеков, ТаблицаСертификаты) Экспорт
	
	Если КлючСвязиТПЧеков = Неопределено Тогда
		
		ТаблицаСертификаты.Очистить();
		
	Иначе
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязиТПЧеков", КлючСвязиТПЧеков);
		
		СтрокиОплаты = ТаблицаСертификаты.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаОплаты Из СтрокиОплаты Цикл
			
			ТаблицаСертификаты.Удалить(СтрокаОплаты);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаОплаты = ПолучитьИзВременногоХранилища(АдресТаблицы);
	
	Для Каждого СтрокаОплаты Из ТаблицаОплаты Цикл
		
		НоваяСтрокаОплата = ТаблицаСертификаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаОплата, СтрокаОплаты);
		Если Не КлючСвязиТПЧеков = Неопределено Тогда
			НоваяСтрокаОплата.КлючСвязиТПЧеков = КлючСвязиТПЧеков;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет таблицу оплат по ключу связи.
//
// Параметры:
//  РезультатОткрытияФормы - Структура.
//  Организация - СправочникСсылка.Организации.
//  КлючСвязиТПЧеков - Число.
//  Объект - ДанныеФормаКоллекция.
//
Процедура ДобавитьТаблицуОплат(РезультатОткрытияФормы, Организация, КлючСвязиТПЧеков, Объект) Экспорт
	
	Если РезультатОткрытияФормы.Свойство("Телефон") Тогда
		Объект.Телефон = РезультатОткрытияФормы.Телефон;
	КонецЕсли;
	
	Если РезультатОткрытияФормы.Свойство("Email") Тогда
		Объект.АдресЭП = РезультатОткрытияФормы.Email;
	КонецЕсли;
	
	Если РезультатОткрытияФормы.Свойство("Контрагент") Тогда
		Объект.Контрагент = РезультатОткрытияФормы.Контрагент;
	КонецЕсли;
	
	Если РезультатОткрытияФормы.Свойство("НеПечататьБумажныйЧек") Тогда
		Объект.НеПечататьБумажныйЧек = РезультатОткрытияФормы.НеПечататьБумажныйЧек;
	КонецЕсли;
	
	Если РезультатОткрытияФормы.Свойство("СохранятьТелефонEmail") Тогда
		Если ЗначениеЗаполнено(Объект.Телефон) Тогда
			ПодключаемоеОборудованиеРТ.ЗаписатьТелефонВИнформационнуюКарту(Объект.ДисконтнаяКарта, Объект.Телефон);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.АдресЭП) Тогда
			ПодключаемоеОборудованиеРТ.ЗаписатьEmailВИнформационнуюКарту(Объект.ДисконтнаяКарта, Объект.АдресЭП);
		КонецЕсли;
	КонецЕсли;
	
	АдресТаблицы = РезультатОткрытияФормы.АдресТаблицыОплата;
	
	Если КлючСвязиТПЧеков = Неопределено Тогда
		Объект.Оплата.Очистить();
	Иначе
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязиТПЧеков", КлючСвязиТПЧеков);
		
		СтрокиОплаты = Объект.Оплата.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаОплаты Из СтрокиОплаты Цикл
			Объект.Оплата.Удалить(СтрокаОплаты);
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаОплаты = ПолучитьИзВременногоХранилища(АдресТаблицы);
	
	Для Каждого СтрокаОплаты Из ТаблицаОплаты Цикл
		НоваяСтрокаОплата = Объект.Оплата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаОплата, СтрокаОплаты);
		Если Не КлючСвязиТПЧеков = Неопределено Тогда
			НоваяСтрокаОплата.КлючСвязиТПЧеков = КлючСвязиТПЧеков;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обработка отмены оплаты и удаление расчитанных скидок.
//
// Параметры:
//  Объект - ДанныеФормаКоллекция.
//  ОтменаОкругленияПриОплатеНаличными - Булево - Признак очистки округления в пользу покупателя.
//
Процедура ОбработатьОтменуОплаты(Объект, ОтменаОкругленияПриОплатеНаличными = Ложь) Экспорт 

	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		Возврат
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ПродажаПодарка", Истина);
	СтрокиТовары = Объект.Товары.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиТовары.Количество() > 0 Тогда
		
		СкидкиНаценкиСерверПереопределяемый.ОчиститьТоварыОтПодарков(Объект);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СкидкиНаценки.НомерСтроки КАК НомерСтроки,
		|	СкидкиНаценки.КлючСвязи КАК КлючСвязи,
		|	СкидкиНаценки.Сумма КАК Сумма,
		|	ВЫРАЗИТЬ(СкидкиНаценки.СкидкаНаценка КАК Справочник.СкидкиНаценки) КАК СкидкаНаценка
		|ПОМЕСТИТЬ ТаблицаВЗапросе
		|ИЗ
		|	&СкидкиНаценки КАК СкидкиНаценки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЧекККМТовары.НомерСтроки КАК НомерСтроки,
		|	ЧекККМТовары.КлючСвязи КАК КлючСвязи
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	&Товары КАК ЧекККМТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаВЗапросе.НомерСтроки КАК НомерСтроки,
		|	ТаблицаВЗапросе.КлючСвязи КАК КлючСвязи,
		|	ТаблицаВЗапросе.Сумма КАК Сумма,
		|	СкидкиНаценки.Ссылка КАК СкидкаНаценка,
		|	ТаблицаТоваров.НомерСтроки КАК НомерСтрокиТовары
		|ИЗ
		|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
		|		ПО ТаблицаВЗапросе.КлючСвязи = ТаблицаТоваров.КлючСвязи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки КАК СкидкиНаценки
		|		ПО ТаблицаВЗапросе.СкидкаНаценка = СкидкиНаценки.Ссылка
		|ГДЕ
		|	СкидкиНаценки.УчитыватьПодарокКакПродажу
		|	И СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Подарок)";
		
		Запрос.УстановитьПараметр("СкидкиНаценки", Объект.СкидкиНаценки.Выгрузить());
		Запрос.УстановитьПараметр("Товары"       , Объект.Товары.Выгрузить());
		
		Результат = Запрос.Выполнить();
		ТаблицаЗапроса = Результат.Выгрузить();
		
		МассивУдаляемыхСтрок = Новый Массив;
		ЕстьИзмененияТоваров = Ложь;
		
		Для Каждого СтрокаСкидки Из ТаблицаЗапроса Цикл
			
			СтрокаТовары = Объект.Товары[СтрокаСкидки.НомерСтрокиТовары - 1];
			СтрокаТовары.СуммаАвтоматическойСкидки = СтрокаТовары.СуммаАвтоматическойСкидки - СтрокаСкидки.Сумма;
			СтрокаТовары.Сумма = СтрокаТовары.Сумма + СтрокаСкидки.Сумма;
			
			СтрокаТовары.СуммаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаНДС(
				СтрокаТовары.Сумма, СтрокаТовары.СтавкаНДС, Объект.ЦенаВключаетНДС);
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(СтрокаТовары, Объект.ЦенаВключаетНДС);
			Объект.СкидкиРассчитаны = Ложь;
			
			МассивУдаляемыхСтрок.Добавить(Объект.СкидкиНаценки[СтрокаСкидки.НомерСтроки - 1]);
			
		КонецЦикла;
		
		Для каждого ЭлементМассива Из МассивУдаляемыхСтрок Цикл
			Объект.СкидкиНаценки.Удалить(ЭлементМассива);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОтменаОкругленияПриОплатеНаличными Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СкидкиНаценки.НомерСтроки КАК НомерСтроки,
		|	СкидкиНаценки.КлючСвязи КАК КлючСвязи,
		|	СкидкиНаценки.Сумма КАК Сумма,
		|	ВЫРАЗИТЬ(СкидкиНаценки.СкидкаНаценка КАК Справочник.СкидкиНаценки) КАК СкидкаНаценка
		|ПОМЕСТИТЬ ТаблицаВЗапросе
		|ИЗ
		|	&СкидкиНаценки КАК СкидкиНаценки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЧекККМТовары.НомерСтроки КАК НомерСтроки,
		|	ЧекККМТовары.КлючСвязи КАК КлючСвязи
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	&Товары КАК ЧекККМТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаВЗапросе.НомерСтроки КАК НомерСтроки,
		|	ТаблицаВЗапросе.КлючСвязи КАК КлючСвязи,
		|	ТаблицаВЗапросе.Сумма КАК Сумма,
		|	ТаблицаТоваров.НомерСтроки КАК НомерСтрокиТовары
		|ИЗ
		|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
		|		ПО ТаблицаВЗапросе.КлючСвязи = ТаблицаТоваров.КлючСвязи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки КАК СкидкиНаценки
		|		ПО ТаблицаВЗапросе.СкидкаНаценка = СкидкиНаценки.Ссылка
		|ГДЕ
		|	СкидкиНаценки.Ссылка ЕСТЬ NULL";
		
		Запрос.УстановитьПараметр("СкидкиНаценки", Объект.СкидкиНаценки.Выгрузить());
		Запрос.УстановитьПараметр("Товары"       , Объект.Товары.Выгрузить());
		
		Результат = Запрос.Выполнить();
		ТаблицаЗапроса = Результат.Выгрузить();
		
		МассивУдаляемыхСтрок = Новый Массив;
		ЕстьИзмененияТоваров = Ложь;
		
		Для Каждого СтрокаСкидки Из ТаблицаЗапроса Цикл
			
			СтрокаТовары = Объект.Товары[СтрокаСкидки.НомерСтрокиТовары - 1];
			СтрокаТовары.СуммаАвтоматическойСкидки = СтрокаТовары.СуммаАвтоматическойСкидки - СтрокаСкидки.Сумма;
			СтрокаТовары.Сумма = СтрокаТовары.Сумма + СтрокаСкидки.Сумма;
			
			СтрокаТовары.СуммаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаНДС(
				СтрокаТовары.Сумма, СтрокаТовары.СтавкаНДС, Объект.ЦенаВключаетНДС);
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(СтрокаТовары, Объект.ЦенаВключаетНДС);
			
			МассивУдаляемыхСтрок.Добавить(Объект.СкидкиНаценки[СтрокаСкидки.НомерСтроки - 1]);
			
		КонецЦикла;
		
		Для каждого ЭлементМассива Из МассивУдаляемыхСтрок Цикл
			Объект.СкидкиНаценки.Удалить(ЭлементМассива);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет соответствие суммы оплаты и номинал подарочного сертификата.
//
// Параметры:
//  ПроверкаВРазрезеОрганизаций - Булево.
//  Объект - ДанныеФормаКоллекция.
//  ПараметрыИнформации - Структура.
//
// Возвращаемое значение:
//  Булево - Ложь, если сумма оплаты меньше номинала подарочного сертификата.
//
Функция ПроверкаСогласияПокупателяСОстаткомПоПодарочнымСертификатам(ПроверкаВРазрезеОрганизаций, ПараметрыИнформации, Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПодключаемоеОборудованиеРТ.ТекстЗапросаПоВнереализациннойПрибыли();
	
	ПогашениеПодарочныхСертификатов =  Объект.ПогашениеПодарочныхСертификатов.Выгрузить();
	ПогашениеПодарочныхСертификатов.Свернуть("Организация, ПодарочныйСертификат, СерийныйНомер", "СуммаПогашенияСертификата");
	
	Запрос.УстановитьПараметр("ПроверкаВРазрезеОрганизаций", ПроверкаВРазрезеОрганизаций);
	Запрос.УстановитьПараметр("ПогашениеПодарочныхСертификатов", ПогашениеПодарочныхСертификатов);
	Запрос.УстановитьПараметр("Оплата", Объект.Оплата.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТаблицаЗапроса = Результат.Выгрузить();
	
	ОстатокПокупателя = ТаблицаЗапроса.Итог("Остаток");
	Если ОстатокПокупателя > 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Остаток суммы по сертификату'");
		СуммаПредупреждения = ОстатокПокупателя;
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Потеря покупателя'");
		СуммаПредупреждения = ТаблицаЗапроса.Итог("Разница");
	КонецЕсли;
	
	Заголовок = НСтр("ru = 'Оплата подарочным сертификатом.'");
	Текст = ТекстПредупреждения + Символы.НПП + СтрШаблон(НСтр("ru = 'составляет - %1 тг.'"),
		Формат(СуммаПредупреждения, "ЧЦ=15; ЧДЦ=2; ЧГ=3,0"));
	Текст = Текст + Символы.ПС + Символы.ПС + НСтр("ru = 'Продолжить подбор товаров?'");
	
	ПараметрыИнформации.ЗаголовокИнформации = Заголовок;
	ПараметрыИнформации.ТекстИнформации     = Текст;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область Скидки

// Заполняет в документе ЧекККМ табличную часть УправляемыеСкидки.
//
Процедура ЗаполнитьУправляемыеСкидки(ОбъектЧекККМ, УправляемыеСкидки) Экспорт 
	
	ОбъектЧекККМ.УправляемыеСкидки.Очистить();
	
	Для каждого ЭлементСписка Из УправляемыеСкидки Цикл
		СкидкаНаценка = УправляемыеСкидки[0].Значение;
		СтрокаТаблица = ОбъектЧекККМ.УправляемыеСкидки.Добавить();
		СтрокаТаблица.СкидкаНаценка = СкидкаНаценка;
	КонецЦикла;
	
КонецПроцедуры

// Заполнияет серии для выбранного подарка при продаже.
//
// Параметры:
//  ИдентификаторСтроки - Число.
//  СтруктураЗаполнения - Структура.
//  Объект - ДанныеФормаКоллекция.
//
Процедура ДополнитьСерииПодаркаИзСписка(ИдентификаторСтроки, СтруктураЗаполнения, Знач Объект) Экспорт 
	
	СтрокаПодарка = Объект.Подарки.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если СтрокаПодарка <> Неопределено Тогда
		
		СерииВХранилище = ПолучитьИзВременногоХранилища(СтруктураЗаполнения.АдресСерийВХранилище);
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", СтрокаПодарка.Номенклатура);
		СтруктураОтбора.Вставить("Характеристика", СтрокаПодарка.Характеристика);
		СтрокиСерий = СерииВХранилище.НайтиСтроки(СтруктураОтбора);
		
		СтрокаСерий = Новый Структура;
		Для Каждого КолонкаТЗ ИЗ СерииВХранилище.Колонки Цикл 
			СтрокаСерий.Вставить(КолонкаТЗ.Имя);
		КонецЦикла;
		
		СтрокиСерийСтруктурой = Новый Массив;
		Для Каждого СтрокаСерии Из СтрокиСерий Цикл
			ЗаполнитьЗначенияСвойств(СтрокаСерий, СтрокаСерии);
			СтрокиСерийСтруктурой.Добавить(СтрокаСерий);
		КонецЦикла;
		
		Серии = Новый Структура("СтрокаПодаркаКлючСвязи, СтрокиСерий", СтрокаПодарка.КлючСвязи, СтрокиСерийСтруктурой);
		СтруктураЗаполнения.Вставить("СерииПодарка", Серии);
		
	КонецЕсли;
	
КонецПроцедуры

// Поиск дисконтной карты по различным режимам поиска карты.
//
// Параметры:
//  РезультатОткрытияФормы - Структура.
//  ДополнительныеПараметры - Структура.
//
// Возвращаемое значение:
//  РезультатыПоиска - Массив.
//
Функция НайтиКарту(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт 
	
	РезультатыПоиска = Новый Массив;
	
	ЗапросПоиска = Новый Запрос;
	Если РезультатОткрытияФормы.РежимПоискаКарты = "НомерТелефона" Тогда
		
		ЗапросПоиска.Текст = ИнформационныеКартыВызовСервера.ТекстЗапросаПоискаКарты(1);
		ЗапросПоиска.УстановитьПараметр("ВведенноеЧисло", РезультатОткрытияФормы.ВведенноеЧисло);
		ЗапросПоиска.УстановитьПараметр("ВведенноеЧислоСВосьмеркой", "8" + Сред(РезультатОткрытияФормы.ВведенноеЧисло, 2));
		
	ИначеЕсли РезультатОткрытияФормы.РежимПоискаКарты = "ФИО" Тогда
		
		ЗапросПоиска.Текст = ИнформационныеКартыВызовСервера.ТекстЗапросаПоискаКарты(2);
		ЗапросПоиска.УстановитьПараметр("Наименование", "%" + РезультатОткрытияФормы.ВведенноеЧисло + "%");
		
		ТипыИнформации = Новый Массив;
		ТипыИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
		ТипыИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		ЗапросПоиска.УстановитьПараметр("ТипыИнформации", ТипыИнформации);
		
	ИначеЕсли РезультатОткрытияФормы.РежимПоискаКарты = "Email" Тогда
		
		ЗапросПоиска.Текст = ИнформационныеКартыВызовСервера.ТекстЗапросаПоискаКарты(3);
		ЗапросПоиска.УстановитьПараметр("АдресЭП", "%" + РезультатОткрытияФормы.ВведенноеЧисло + "%");
		
	Иначе
		
		Возврат РезультатыПоиска;
		
	КонецЕсли;
	
	ЗапросПоиска.УстановитьПараметр("ТипКарты", Перечисления.ТипыИнформационныхКарт.Дисконтная);
	
	Выборка = ЗапросПоиска.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("Ссылка", Выборка.Ссылка);
		СтруктураСтроки.Вставить("ВладелецКарты", Выборка.ВладелецКарты);
		СтруктураСтроки.Вставить("НомерТелефона", Выборка.НомерТелефона);
		СтруктураСтроки.Вставить("АдресЭП"      , Выборка.АдресЭП);
		РезультатыПоиска.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат РезультатыПоиска;
	
КонецФункции

// Выполняет расчёт скидок и помещает во временное хранилище.
//
// Параметры:
//  СтруктураПараметры - Структура.
//  Объект - ДанныеФормаКоллекция.
//  УникальныйИдентификатор - УникальныйИдентификатор.
//
// Возвращаемое значение:
//  АдресВоВременномХранилище - Строка.
//
Функция ВыполнитьПредварительныйРасчетСкидокНаСервере(СтруктураПараметры, Объект, УникальныйИдентификатор) Экспорт 
	
	СегментИсключаемойНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Объект.Магазин, 
		"СегментИсключаемойНоменклатуры");
	
	СведенияДокумента = Новый Структура;
	СведенияДокумента.Вставить("СегментИсключаемойНоменклатуры", СегментИсключаемойНоменклатуры);
	СведенияДокумента.Вставить("Товары",                         Объект.Товары);
	
	СтруктураПараметры.Вставить("СведенияДокумента", СведенияДокумента);
	
	ДеревоСкидок = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	
	Возврат ПоместитьВоВременноеХранилище(ДеревоСкидок, УникальныйИдентификатор);
	
КонецФункции

// Получает структуру данных для выдачи подарков.
//
// Параметры:
//  Объект - ДанныеФормаКоллекция.
//  УникальныйИдентификатор - УникальныйИдентификатор.
//
// Возвращаемое значение:
//  СтруктураОтвета - Структура.
//
Функция СтруктураПолученияПодарков(Объект, УникальныйИдентификатор) Экспорт
	
	СтруктураОтвета = Новый Структура;
	Если Объект.Подарки.Количество() = 0 Тогда
		
		СтруктураОтвета.Вставить("Действие", "ПрекратитьВыдачуПодарков");
		
	Иначе
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Подарки, Объект.Подарки[0], "КлючСвязи");
		
		ТаблицаПодарков = Объект.Подарки.Выгрузить();
		МассивУдаляемых = Новый Массив;
		
		ЕстьПодаркиКВыдаче = Ложь;
		
		Для Каждого СтрокаПодарка Из ТаблицаПодарков Цикл
			
			Если СтрокаПодарка.Получен Тогда
				МассивУдаляемых.Добавить(СтрокаПодарка);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого УдаляемаяСтрока Из МассивУдаляемых Цикл
			ТаблицаПодарков.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		Если ТаблицаПодарков.Количество() = 0 Тогда
			
			СтруктураОтвета.Вставить("Действие", "ПрекратитьВыдачуПодарков");
			
		Иначе
			
			СтруктураОтвета.Вставить("Действие", "ВыдатьПодарки");
			АдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаПодарков, УникальныйИдентификатор);
			СтруктураОтвета.Вставить("АдресТаблицы", АдресТаблицы);
			
			ТаблицаСерий = Объект.СерииПодарков.Выгрузить();
			АдресТаблицыСерий = ПоместитьВоВременноеХранилище(ТаблицаСерий, Новый УникальныйИдентификатор);
			СтруктураОтвета.Вставить("АдресТаблицыСерий", АдресТаблицыСерий);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Получает структуру данных для выдачи подарков при использовании текущей скидки.
//
// Параметры:
//  СтруктураДанных - Структура.
//
// Возвращаемое значение:
//  СтруктураОтвета - Структура.
//
Функция СтруктураПолученияПодарковИзСкидки(СтруктураДанных) Экспорт
	
	СкидкаНаценка                              = СтруктураДанных.СкидкаНаценка;
	КоличествоНаборов                          = СтруктураДанных.КоличествоНаборов;
	СкладПродажиПоУмолчанию                    = СтруктураДанных.СкладПродажиПоУмолчанию;
	Магазин                                    = СтруктураДанных.Магазин;
	РабочееМесто                               = СтруктураДанных.РабочееМесто;
	АдресПримененныхСкидокВоВременномХранилище = СтруктураДанных.АдресПримененныхСкидокВоВременномХранилище;
	КонтролироватьОстаткиТоваровПриЗакрытииЧека= СтруктураДанных.КонтролироватьОстаткиТоваровПриЗакрытииЧека;
	УникальныйИдентификатор                    = СтруктураДанных.УникальныйИдентификатор;
	
	ЕстьТаблицаПодарков = Ложь;
	Если ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		СкидкиВХранилище = ПолучитьИзВременногоХранилища(АдресПримененныхСкидокВоВременномХранилище);
		Если СкидкиВХранилище <> Неопределено Тогда
			Если СкидкиВХранилище.Свойство("ТаблицаПодарков") Тогда
				ЕстьТаблицаПодарков = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьТаблицаПодарков Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("СкидкаНаценка", СкидкаНаценка);
		ТаблицаЗапроса = СкидкиВХранилище.ТаблицаПодарков.Скопировать(СтруктураОтбора);
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СкидкиНаценкиНаборПодарков.Ссылка КАК Ссылка,
		|	СкидкиНаценкиНаборПодарков.НомерСтроки КАК НомерСтроки,
		|	СкидкиНаценкиНаборПодарков.Номенклатура КАК Номенклатура,
		|	СкидкиНаценкиНаборПодарков.Характеристика КАК Характеристика,
		|	СкидкиНаценкиНаборПодарков.Упаковка КАК Упаковка,
		|	СкидкиНаценкиНаборПодарков.КоличествоУпаковок * &КоличествоНаборов КАК КоличествоУпаковок,
		|	СкидкиНаценкиНаборПодарков.Количество * &КоличествоНаборов КАК Количество,
		|	СкидкиНаценкиНаборПодарков.Номенклатура.ТоварнаяГруппа КАК ТоварнаяГруппа
		|ПОМЕСТИТЬ ТаблицаПодарков
		|ИЗ
		|	Справочник.СкидкиНаценки.НаборПодарков КАК СкидкиНаценкиНаборПодарков
		|ГДЕ
		|	СкидкиНаценкиНаборПодарков.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаспределениеНоменклатуры.СкладПродажи КАК Склад,
		|	ВЫБОР
		|		КОГДА РаспределениеНоменклатуры.РабочееМесто = &РабочееМесто
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК ПолеУпорядочивания,
		|	РаспределениеНоменклатуры.ТоварнаяГруппа КАК ТоварнаяГруппа
		|ПОМЕСТИТЬ ТаблицаСкладов
		|ИЗ
		|	РегистрСведений.РаспределениеНоменклатуры КАК РаспределениеНоменклатуры
		|ГДЕ
		|	РаспределениеНоменклатуры.Магазин = &Магазин
		|	И РаспределениеНоменклатуры.ТоварнаяГруппа В
		|			(ВЫБРАТЬ
		|				ТаблицаПодарков.ТоварнаяГруппа
		|			ИЗ
		|				ТаблицаПодарков)
		|	И (РаспределениеНоменклатуры.РабочееМесто = &РабочееМесто
		|			ИЛИ РаспределениеНоменклатуры.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	ВложенныйЗапрос.Характеристика КАК Характеристика,
		|	ВложенныйЗапрос.Упаковка КАК Упаковка,
		|	ВложенныйЗапрос.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ВложенныйЗапрос.Количество КАК Количество,
		|	ВложенныйЗапрос.ТоварнаяГруппа КАК ТоварнаяГруппа,
		|	ВложенныйЗапрос.ПолеУпорядочивания КАК ПолеУпорядочивания,
		|	ЕСТЬNULL(ТаблицаСкладов.Склад, &ОсновнойСклад) КАК Склад
		|ПОМЕСТИТЬ ТаблицаПодарочковСоСкладами
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаПодарков.Ссылка КАК Ссылка,
		|		ТаблицаПодарков.НомерСтроки КАК НомерСтроки,
		|		ТаблицаПодарков.Номенклатура КАК Номенклатура,
		|		ТаблицаПодарков.Характеристика КАК Характеристика,
		|		ТаблицаПодарков.Упаковка КАК Упаковка,
		|		ТаблицаПодарков.КоличествоУпаковок КАК КоличествоУпаковок,
		|		ТаблицаПодарков.Количество КАК Количество,
		|		ТаблицаПодарков.ТоварнаяГруппа КАК ТоварнаяГруппа,
		|		МИНИМУМ(ЕСТЬNULL(ТаблицаСкладов.ПолеУпорядочивания, 3)) КАК ПолеУпорядочивания
		|	ИЗ
		|		ТаблицаПодарков КАК ТаблицаПодарков
		|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСкладов КАК ТаблицаСкладов
		|			ПО (ТаблицаПодарков.ТоварнаяГруппа = ТаблицаСкладов.ТоварнаяГруппа)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТаблицаПодарков.Номенклатура,
		|		ТаблицаПодарков.Упаковка,
		|		ТаблицаПодарков.Характеристика,
		|		ТаблицаПодарков.Ссылка,
		|		ТаблицаПодарков.ТоварнаяГруппа,
		|		ТаблицаПодарков.НомерСтроки,
		|		ТаблицаПодарков.КоличествоУпаковок,
		|		ТаблицаПодарков.Количество) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСкладов КАК ТаблицаСкладов
		|		ПО ВложенныйЗапрос.ТоварнаяГруппа = ТаблицаСкладов.ТоварнаяГруппа
		|			И ВложенныйЗапрос.ПолеУпорядочивания = ТаблицаСкладов.ПолеУпорядочивания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаПодарочковСоСкладами.Ссылка КАК Ссылка,
		|	ТаблицаПодарочковСоСкладами.НомерСтроки КАК НомерСтроки,
		|	ТаблицаПодарочковСоСкладами.Номенклатура КАК Номенклатура,
		|	ТаблицаПодарочковСоСкладами.Характеристика КАК Характеристика,
		|	ТаблицаПодарочковСоСкладами.Упаковка КАК Упаковка,
		|	ТаблицаПодарочковСоСкладами.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТаблицаПодарочковСоСкладами.Количество КАК Количество,
		|	ТаблицаПодарочковСоСкладами.ТоварнаяГруппа КАК ТоварнаяГруппа,
		|	ТаблицаПодарочковСоСкладами.ПолеУпорядочивания КАК ПолеУпорядочивания,
		|	ТаблицаПодарочковСоСкладами.Склад КАК Склад
		|ИЗ
		|	ТаблицаПодарочковСоСкладами КАК ТаблицаПодарочковСоСкладами";
		
		Если КонтролироватьОстаткиТоваровПриЗакрытииЧека Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
			|		ПО ТаблицаПодарочковСоСкладами.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
			|			И ТаблицаПодарочковСоСкладами.Характеристика = ТоварыНаСкладахОстатки.Характеристика
			|			И ТаблицаПодарочковСоСкладами.Склад = ТоварыНаСкладахОстатки.Склад
			|ГДЕ
			|	ТаблицаПодарочковСоСкладами.Количество <= ТоварыНаСкладахОстатки.КоличествоОстаток";
			
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПолеУпорядочивания";
		
		Запрос.УстановитьПараметр("Магазин"          , Магазин);
		Запрос.УстановитьПараметр("РабочееМесто"     , РабочееМесто);
		Запрос.УстановитьПараметр("ОсновнойСклад"    , СкладПродажиПоУмолчанию);
		Запрос.УстановитьПараметр("Ссылка"           , СкидкаНаценка);
		Запрос.УстановитьПараметр("КоличествоНаборов", КоличествоНаборов);
		
		Результат = Запрос.Выполнить();
		ТаблицаЗапроса = Результат.Выгрузить();
		
	КонецЕсли;
		
	СтруктураОтвета = Новый Структура;
	
	Если ТаблицаЗапроса.Количество() = 1 Тогда
		
		СтруктураОтвета.Вставить("Действие", "ПоследующийВыбор");
		СтруктураВыборки = ОбщегоНазначенияРТ.СтруктураПоСтрокеВыборки(ТаблицаЗапроса, ТаблицаЗапроса[0]);
		СтруктураВыборки.Вставить("Получен", Ложь);
		СтруктураОтвета.Вставить("СтруктураВыборки", СтруктураВыборки);
		
	ИначеЕсли ТаблицаЗапроса.Количество() = 0 Тогда
		
		СтруктураОтвета.Вставить("Действие", "УдалениеСтрокиЧека");
		
	Иначе
		
		СтруктураОтвета.Вставить("Действие", "ВыборИзСписка");
		АдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаЗапроса, УникальныйИдентификатор);
		СтруктураОтвета.Вставить("АдресТаблицы", АдресТаблицы);
		
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Производит расчёт скидок.
//
// Параметры:
//  СтруктураПараметры - Структура.
//  Объект - ДанныеФормаКоллекция.
//  АдресПримененныхСкидок - Строка.
//  УникальныйИдентификатор - УникальныйИдентификатор.
//
Процедура РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры, Объект, АдресПримененныхСкидок, УникальныйИдентификатор, ВывестиСообщения) Экспорт
	
	ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	
	ВывестиСообщения = Ложь;
	
	Если ЗначениеЗаполнено(АдресПримененныхСкидок) Тогда
		УдалитьИзВременногоХранилища(АдресПримененныхСкидок);
	КонецЕсли;
	
	АдресПримененныхСкидок =
		ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
	Если ПримененныеСкидки.ТаблицаСообщений.Количество() > 0 Тогда
		ВывестиСообщения = Истина;
	КонецЕсли;
	
	Если ПримененныеСкидки.Свойство("ТаблицаПодарковНаВыбор") Тогда
		ТаблицаПодарковНаВыбор = ПримененныеСкидки.ТаблицаПодарковНаВыбор;
		Если ТаблицаПодарковНаВыбор.Количество() > 0 Тогда
			ТаблицаПодарковНаВыбор.Свернуть("СкидкаНаценка, КлючСвязи, Склад");
			Для Каждого СтрокаПодарка Из ТаблицаПодарковНаВыбор Цикл
				НоваяСтрока = Объект.Подарки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПодарка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = НЕ СтруктураПараметры.ТолькоСообщенияПослеОформления;
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийЧекККМ.Возврат
		И НЕ СтруктураПараметры.ТолькоСообщенияПослеОформления Тогда
		СкидкиНаценкиСервер.ОкруглитьЧекВПользуПокупателя(Объект, "Товары", "СкидкиНаценки");
	КонецЕсли;
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
		Объект.СкидкиРассчитаны = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Назначает или отменяет ручную скидку.
//
// Параметры:
//  СуммаСкидкиНаценки - Число.
//  Объект - ДанныеФормаКоллекция.
//
Процедура НазначитьРучнуюСкидку(СуммаСкидкиНаценки, Объект) Экспорт
	
	Если СуммаСкидкиНаценки <> 0 Тогда
		СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "Товары", СуммаСкидкиНаценки, Истина, Истина);
	Иначе
		СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочие_операции

// Отправляет СМС сообщение на указанный номер телефона.
//
// Параметры:
//   * КодПроверкиСМС - Строка.
//   * НомерТелефона - Строка.
//
// Возвращаемое значение:
//  РезультатОтправки - Структура со свойствами:
//   * Результат - Булево.
//   * ОписаниеОшибки - Строка.
//   * НомерТелефона - Строка.
//
Функция ОтправитьСообщениеСКодом(КодПроверкиСМС, НомерТелефона) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатОтправки = Новый Структура;
	РезультатОтправки.Вставить("Результат", Ложь);
	РезультатОтправки.Вставить("ОписаниеОшибки", "");
	РезультатОтправки.Вставить("НомерТелефона", "");
	Если ЗначениеЗаполнено(НомерТелефона) Тогда
		ТекстСообщения = НСтр("ru = 'Код подтверждения для выбора дисконтной карты %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КодПроверкиСМС);
		МассивНомеров = Новый Массив;
		МассивНомеров.Добавить(НомерТелефона);
		РезультатОтправкиБСП = ОтправкаSMS.ОтправитьSMS(МассивНомеров, ТекстСообщения, Неопределено, Ложь);
		Если РезультатОтправкиБСП.ОтправленныеСообщения.Количество() = 0 Тогда
			Если РезультатОтправкиБСП.Свойство("ОписаниеОшибки") Тогда
				РезультатОтправки.ОписаниеОшибки = РезультатОтправкиБСП.ОписаниеОшибки;
			КонецЕсли;
		Иначе
			РезультатОтправки.Результат = Истина;
		КонецЕсли;
	Иначе
		РезультатОтправки.ОписаниеОшибки = НСтр("ru = 'Для владельца карты не задан номер телефона. Выслать код подтверждения не удалось'");
	КонецЕсли;
	
	Возврат РезультатОтправки;
	
КонецФункции

// Отправляет Email на указанный адрес электронной почты.
//
// Параметры:
//   * КодПроверкиСМС - Строка.
//   * АдресЭП - Строка.
//
// Возвращаемое значение:
//  РезультатОтправки - Структура со свойствами:
//   * Результат - Булево.
//   * ОписаниеОшибки - Строка.
//   * АдресЭП - Строка.
//
Функция ОтправитьEmailСКодом(КодПроверки, АдресЭП) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатОтправки = Новый Структура;
	РезультатОтправки.Вставить("Результат", Ложь);
	РезультатОтправки.Вставить("ОписаниеОшибки", "");
	РезультатОтправки.Вставить("АдресЭП", "");
	
	Если ЗначениеЗаполнено(АдресЭП) Тогда
		ТекстСообщения = НСтр("ru = 'Код подтверждения для выбора дисконтной карты %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КодПроверки);
		
		ПараметрыПисьма = Новый Структура;
		ПараметрыПисьма.Вставить("Кому", АдресЭП);
		ПараметрыПисьма.Вставить("Тема", КодПроверки);
		ПараметрыПисьма.Вставить("Тело", ТекстСообщения);
		
		РезультатОтправкиБСП = РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(
			РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись(),
			ПараметрыПисьма);
		
		Если ЗначениеЗаполнено(РезультатОтправкиБСП)  Тогда
			РезультатОтправки.Результат = Истина;
		Иначе
			РезультатОтправки.ОписаниеОшибки = НСтр("ru = 'Нет возможности отправить E-mail'") ;
		КонецЕсли;
	Иначе
		РезультатОтправки.ОписаниеОшибки =
			НСтр("ru = 'Для владельца карты не задан E-mail. Выслать код подтверждения не удалось'");
	КонецЕсли;
	
	Возврат РезультатОтправки;
	
КонецФункции

// Заполняет таблицу систем налогообложения в РМК для текущего магазина.
//
// Параметры:
//   * ТаблицаСистемНалогообложения - ТаблицаЗначений.
//   * Магазин - СправочникСсылка.Магазины.
//
Процедура ЗаполнитьСистемыНалогообложенияРМК(ТаблицаСистемНалогообложения, Магазин) Экспорт 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПрименениеСистемНалогообложенияСрезПоследних.Период КАК Период,
	|	ПрименениеСистемНалогообложенияСрезПоследних.Организация КАК Организация,
	|	ПрименениеСистемНалогообложенияСрезПоследних.Магазин КАК Магазин,
	|	ПрименениеСистемНалогообложенияСрезПоследних.Склад КАК Склад,
	|	ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа КАК ТоварнаяГруппа,
	|	ПрименениеСистемНалогообложенияСрезПоследних.СистемаНалогообложения КАК СистемаНалогообложения
	|ПОМЕСТИТЬ ВТСрезПоследних
	|ИЗ
	|	РегистрСведений.ПрименениеСистемНалогообложения.СрезПоследних(
	|			&Дата,
	|			(Магазин = &Магазин
	|				ИЛИ Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
	|				И ВЫБОР
	|					КОГДА СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.ТипыСистемНалогообложенияККТ.Патент)
	|						ТОГДА &Дата >= ДатаНачалаПатента
	|									И &Дата <= ДатаОкончанияПатента
	|								ИЛИ ДатаНачалаПатента = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|									И ДатаОкончанияПатента = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК ПрименениеСистемНалогообложенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТСрезПоследних.Период) КАК Период,
	|	ВТСрезПоследних.Организация КАК Организация,
	|	ВТСрезПоследних.Магазин КАК Магазин,
	|	ВТСрезПоследних.Склад КАК Склад,
	|	ВТСрезПоследних.ТоварнаяГруппа КАК ТоварнаяГруппа
	|ПОМЕСТИТЬ ВТПериод
	|ИЗ
	|	ВТСрезПоследних КАК ВТСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСрезПоследних.Организация,
	|	ВТСрезПоследних.Магазин,
	|	ВТСрезПоследних.Склад,
	|	ВТСрезПоследних.ТоварнаяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСрезПоследних.Организация КАК Организация,
	|	ВТСрезПоследних.Магазин КАК Магазин,
	|	ВТСрезПоследних.Склад КАК Склад,
	|	ВТСрезПоследних.ТоварнаяГруппа КАК ТоварнаяГруппа,
	|	ВТСрезПоследних.СистемаНалогообложения КАК СистемаНалогообложения
	|ПОМЕСТИТЬ ВТСистемыНалогообложения
	|ИЗ
	|	ВТСрезПоследних КАК ВТСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериод КАК ВТПериод
	|		ПО ВТСрезПоследних.Период = ВТПериод.Период
	|			И ВТСрезПоследних.Организация = ВТПериод.Организация
	|			И ВТСрезПоследних.Магазин = ВТПериод.Магазин
	|			И ВТСрезПоследних.Склад = ВТПериод.Склад
	|			И ВТСрезПоследних.ТоварнаяГруппа = ВТПериод.ТоварнаяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрименениеСистемНалогообложенияСрезПоследних.Организация КАК Организация,
	|	ПрименениеСистемНалогообложенияСрезПоследних.Склад КАК Склад,
	|	ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа КАК ТоварнаяГруппа,
	|	ПрименениеСистемНалогообложенияСрезПоследних.СистемаНалогообложения КАК СистемаНалогообложения,
	|	ВЫБОР
	|		КОГДА ПрименениеСистемНалогообложенияСрезПоследних.Магазин <> ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|				И ПрименениеСистемНалогообложенияСрезПоследних.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				И ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа <> ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА ПрименениеСистемНалогообложенияСрезПоследних.Магазин <> ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|				И ПрименениеСистемНалогообложенияСрезПоследних.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				И ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа <> ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)
	|			ТОГДА 2
	|		КОГДА ПрименениеСистемНалогообложенияСрезПоследних.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|				И ПрименениеСистемНалогообложенияСрезПоследних.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				И ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа <> ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)
	|			ТОГДА 3
	|		КОГДА ПрименениеСистемНалогообложенияСрезПоследних.Магазин <> ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|				И ПрименениеСистемНалогообложенияСрезПоследних.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				И ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)
	|			ТОГДА 4
	|		КОГДА ПрименениеСистемНалогообложенияСрезПоследних.Магазин <> ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|				И ПрименениеСистемНалогообложенияСрезПоследних.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				И ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)
	|			ТОГДА 5
	|		КОГДА ПрименениеСистемНалогообложенияСрезПоследних.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|				И ПрименениеСистемНалогообложенияСрезПоследних.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				И ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)
	|			ТОГДА 6
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	ВТСистемыНалогообложения КАК ПрименениеСистемНалогообложенияСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет");
	
	Запрос.УстановитьПараметр("Дата",    НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя()));
	Запрос.УстановитьПараметр("Магазин", Магазин);
	
	Результат = Запрос.Выполнить();
	ТаблицаСистемНалогообложения.Загрузить(Результат.Выгрузить());
	
КонецПроцедуры

// Определяет можно ли продавать в текущее время и включен ли товар в ассортимент магазина.
//
// Параметры:
//  СтруктураДанных - Структура со свойствами:
//     ВидОпреации - ПеречислениеСсылка.ВидыОперацийЧекККМ.
//     ИспользоватьАссортимент - Булево.
//     Номенклатура - СправочникСсылка.Номенклатура.
//     ФорматМагазина - СправочникСсылка.ФорматыМагазинов.
//     Магазин - СправочникСсылка.Магазины.
//  ТекстСообщения - Строка.
//
// Возвращаемое значение:
//  Булево - Ложь, если продажа разрешена.
//
Функция НельзяПродавать(СтруктураДанных, ТекстСообщения) Экспорт 
	
	ВидОперации             = СтруктураДанных.ВидОперации;
	ИспользоватьАссортимент = СтруктураДанных.ИспользоватьАссортимент;
	Номенклатура            = СтруктураДанных.Номенклатура;
	ФорматМагазина          = СтруктураДанных.ФорматМагазина;
	Магазин                 = СтруктураДанных.Магазин;
	
	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		ДатаВремяДействия = ТекущаяДатаСеанса();
		
		Если ИспользоватьАссортимент Тогда
			
			СтруктураСостоянияАссортимента = АссортиментСервер.СтруктураСостоянияАссортиментаТовараВФормате(Номенклатура,
				ФорматМагазина,
				ДатаВремяДействия);
				
			Если НЕ СтруктураСостоянияАссортимента.РазрешеныПродажи Тогда
				
				ТекстСообщения = НСтр("ru = 'Номенклатура ""%1"" не включена в ассортимент или запрещена к продаже.'"); 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
					Номенклатура);
					
				Возврат Истина;
				
			КонецЕсли;
		КонецЕсли;
		
		Если СкидкиНаценкиСерверПереопределяемый.ЗапрещенаПродажаТовара(Номенклатура, Магазин, ДатаВремяДействия) Тогда
			
			ТекстСообщения = НСтр("ru = 'Номенклатура ""%1"" запрещена к продаже.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
				Номенклатура);
				
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // НельзяПродавать()

// Определяет возможность внесения денег.
//
// Параметры:
//  ТаблицаКассККМОрганизаций - ТаблицаЗначений:
//
// Возвращаемое значение:
//  Булево - Ложь, если документы для внесения отсутствуют.
//
Функция ВозможностьВнесенияДенег(ТаблицаКассККМОрганизаций) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваКПоступлениюНаличныеОстатки.ДокументПередачи КАК Документ,
	|	ДенежныеСредстваКПоступлениюНаличныеОстатки.СуммаОстаток,
	|	ДенежныеСредстваКПоступлениюНаличныеОстатки.Организация,
	|	ДенежныеСредстваКПоступлениюНаличныеОстатки.Касса
	|ПОМЕСТИТЬ ТаблицаДокументовСОстатками
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКПоступлениюНаличные.Остатки(
	|			,
	|			Касса В (&КассыККМ)
	|				И Организация В (&Организации)) КАК ДенежныеСредстваКПоступлениюНаличныеОстатки
	|ГДЕ
	|	ДенежныеСредстваКПоступлениюНаличныеОстатки.СуммаОстаток > 0
	|	И ДенежныеСредстваКПоступлениюНаличныеОстатки.ДокументПередачи ССЫЛКА Документ.РасходныйКассовыйОрдер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка КАК РасходныйКассовыйОрдер,
	|	РасходныйКассовыйОрдер.Номер,
	|	РасходныйКассовыйОрдер.Дата,
	|	ТаблицаДокументовСОстатками.СуммаОстаток,
	|	ТаблицаДокументовСОстатками.Организация,
	|	ТаблицаДокументовСОстатками.Касса
	|ИЗ
	|	ТаблицаДокументовСОстатками КАК ТаблицаДокументовСОстатками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ПО ТаблицаДокументовСОстатками.Документ = РасходныйКассовыйОрдер.Ссылка";
	
	ТаблицаЗначенийКассИОрганизаций = ТаблицаКассККМОрганизаций.Выгрузить();
	
	Запрос.УстановитьПараметр("КассыККМ" , ТаблицаЗначенийКассИОрганизаций.ВыгрузитьКолонку("КассаККМ"));
	Запрос.УстановитьПараметр("Организации", ТаблицаЗначенийКассИОрганизаций.ВыгрузитьКолонку("Организация"));
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

// Очищает табличные части в переданном объекте.
//
Процедура ОчиститьТабличныеЧастиРМК(ОбъектОчистки, УправляемыеСкидки) Экспорт
	
	ОбъектОчистки.Оплата.Очистить();
	ОбъектОчистки.ОплатаБонуснымиБаллами.Очистить();
	ОбъектОчистки.Товары.Очистить();
	ОбъектОчистки.СерийныеНомера.Очистить();
	ОбъектОчистки.Серии.Очистить();
	ОбъектОчистки.СерииПодарков.Очистить();
	ОбъектОчистки.Подарки.Очистить();
	ОбъектОчистки.ПогашениеПодарочныхСертификатов.Очистить();
	ОбъектОчистки.СкидкиНаценки.Очистить();
	ОбъектОчистки.УправляемыеСкидки.Очистить();
	ОбъектОчистки.АкцизныеМарки.Очистить();
	
	УправляемыеСкидки.Очистить();
	
КонецПроцедуры

// Заполняет документ ЧекККМ данными.
//
Процедура ЗаполнитьЧекПоВсемДанным(ОбъектЧекККМ, Объект, УправляемыеСкидки, ОтбиратьПоОрганизации, ТабличноеПолеЧеков) Экспорт 
	
	ЗаполнитьЗначенияСвойств(ОбъектЧекККМ, Объект,,"Ссылка, Дата");
	Если ТабличноеПолеЧеков.Количество() > 0 Тогда
		ОбъектЧекККМ.СистемаНалогообложения = ТабличноеПолеЧеков[0].ВидНалога;
	КонецЕсли;
	
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(Объект.Товары , ОбъектЧекККМ.Товары, Истина);
	
	//ИнтеграцияИСМПТК_РозничноеВыбытие
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(Объект.КодыМаркировкиИСМПТК , ОбъектЧекККМ.КодыМаркировкиИСМПТК, Истина);
	//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
	
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(Объект.Подарки , ОбъектЧекККМ.Подарки, Истина);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(Объект.СкидкиНаценки , ОбъектЧекККМ.СкидкиНаценки, Истина);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(Объект.СерийныеНомера , ОбъектЧекККМ.СерийныеНомера, Истина);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(Объект.Серии , ОбъектЧекККМ.Серии, Истина);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(Объект.СерииПодарков , ОбъектЧекККМ.СерииПодарков, Истина);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(Объект.Оплата , ОбъектЧекККМ.Оплата, Истина);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(
		Объект.ПогашениеПодарочныхСертификатов, ОбъектЧекККМ.ПогашениеПодарочныхСертификатов, Истина);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(
		Объект.БонусныеБаллыКНачислению , ОбъектЧекККМ.БонусныеБаллыКНачислению, Истина);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(Объект.АкцизныеМарки , ОбъектЧекККМ.АкцизныеМарки, Истина);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(
		Объект.ПредъявленныеКодыОднократныхСкидок, ОбъектЧекККМ.ПредъявленныеКодыОднократныхСкидок, Истина);

	ЗаполнитьУправляемыеСкидки(ОбъектЧекККМ, УправляемыеСкидки);
	ДобавитьОплатуБонусамиВЧек(Объект, ОбъектЧекККМ, ОтбиратьПоОрганизации);
	
КонецПроцедуры

// Функция возвращает данные эквайрингового терминала.
//
// Параметры:
//  Терминал - СправочникСсылка.ЭквайринговыеТерминалы.
//
// Возвращаемое значение:
//  СтруктураВозврата - Структура со свойства:
//     ПодключаемоеОборудование - СправочникСсылка.ПодключаемоеОборудование.
//     ИспользоватьБезПодключенияОборудования - Булево.
//
Функция СтруктураДанныхЭТ(Терминал) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование,
	|	ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования,
	|	ЭквайринговыеТерминалы.Ссылка
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Терминал);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СтруктураВозврата = Новый Структура("ПодключаемоеОборудование, ИспользоватьБезПодключенияОборудования");
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
	Иначе
		СтруктураВозврата.ПодключаемоеОборудование = Справочники.ПодключаемоеОборудование.ПустаяСсылка();
		СтруктураВозврата.ИспользоватьБезПодключенияОборудования = Истина;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Заполнияет колонку Остаток в РМК, в случае, если у колонки Видимость = Истина
//
// Параметры:
//  ОстатокВидимость - Булево.
//  Объект - ДанныеФормыСтруктура.
//
Процедура ЗаполнитьОстаткиСервер(ОстатокВидимость, Объект) Экспорт 
	
	Если ОстатокВидимость Тогда
		ЗапасыСервер.ЗаполнитьОстаткиНоменклатуры(Объект, "Товары");
	КонецЕсли;
	
КонецПроцедуры

// Получает последний пробитый чек с видом операции "Продажа".
//
// Параметры:
//  МассивКассККМ - Массив.
//
// Возвращаемое значение:
//  ПоследнийЧек - ДокументСсылка.ЧекККМ
//
Функция ПоследнийПробитыйЧекПродажи(МассивКассККМ) Экспорт 
	
	ПоследнийЧек = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.Дата КАК Дата
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.СтатусЧекаККМ = &Пробитый
	|	И ЧекККМ.ВидОперации = &Продажа
	|	И ЧекККМ.КассаККМ В(&МассивКассККМ)
	|	И ЧекККМ.СсылкаЯндексКассы = """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ,
	|	Ссылка УБЫВ";
	
	Запрос.УстановитьПараметр("Пробитый", Перечисления.СтатусыЧековККМ.Пробитый);
	Запрос.УстановитьПараметр("Продажа", Перечисления.ВидыОперацийЧекККМ.Продажа);
	Запрос.УстановитьПараметр("МассивКассККМ", МассивКассККМ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПоследнийЧек = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ПоследнийЧек;
	
КонецФункции

// Очищает серийные номера в строке табличной части.
//
// Параметры:
//  ИдентификаторСтроки - Число.
//  Объект - ДанныеФормаКоллекция.
//
Процедура ОчиститьСерийныеНомераВСтроке(ИдентификаторСтроки, Объект) Экспорт
	
	Если Объект.СерийныеНомера.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязиСерийныхНомеров", СтрокаТабличнойЧасти.КлючСвязиСерийныхНомеров);

	МассивЭлементов = Объект.СерийныеНомера.НайтиСтроки(СтруктураПоиска);
	Если МассивЭлементов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	КоличествоОсталось = 0;
	Для Каждого СтрокаМассива Из МассивЭлементов Цикл
		ВладелецНомера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаМассива.СерийныйНомер, "Владелец");
		Если СтрокаТабличнойЧасти.Номенклатура = ВладелецНомера Тогда
			КоличествоОсталось = КоличествоОсталось + 1;
		Иначе
			Объект.СерийныеНомера.Удалить(СтрокаМассива);
		КонецЕсли;
	КонецЦикла;
	
	СтрокаТабличнойЧасти.КоличествоУпаковок = КоличествоОсталось;
	
КонецПроцедуры

// Помещает таблицу марок во временное хранилище.
//
// Параметры:
//  КлючСвязи - Число.
//  ИмяТаблицы - Строка.
//  Объект - ДанныеФормаКоллекция.
//  УникальныйИдентификатор - УникальныйИдентификатор.
//
// Возвращаемое значение:
//  АдресМарок - Строка.
//
Функция АдресМарокВХранилище(КлючСвязи, ИмяТаблицы, Объект, УникальныйИдентификатор) Экспорт
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязи", КлючСвязи);
	СтрокиМарок = Объект[ИмяТаблицы].НайтиСтроки(СтруктураОтбора);
	АдресМарок = ПоместитьВоВременноеХранилище(СтрокиМарок, УникальныйИдентификатор);
	
	Возврат АдресМарок;
	
КонецФункции

// Получает данные для пробития чека.
//
// Параметры:
//  ДанныеДляЧека - Структура - см. РозничныеПродажиКлиентСервер.СтруктураДанныхДляПробитияЧека();
//
// Возвращаемое значение:
//  ДанныеДляПробитияЧека - Структура.
//
Функция ПодготовитьДанныеДляПробитияЧека(ДанныеДляЧека) Экспорт
	
	ЧекККМСсылка = ДанныеДляЧека.ЧекККМСсылка;
	Объект = ДанныеДляЧека.Объект;
	
	Если НЕ Объект = Неопределено
		И Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа
		И НЕ Объект.ОперацияСДенежнымиСредствами Тогда
		
		СкидкиНаценкиСерверПереопределяемый.АктивироватьСкидкиПоИдентификаторуЧека(
			ЧекККМСсылка, Объект.Магазин, Объект.Дата);
	КонецЕсли;
	
	ДанныеДляПробитияЧека = Документы.ЧекККМ.ПодготовитьДанныеДляПробитияЧека(ДанныеДляЧека);
	
	Возврат ДанныеДляПробитияЧека;
	
КонецФункции

// Помещает во временное хранилище таблицу объекта.
//
// Параметры:
//  ИмяТаблицы - Строка.
//  Объект - ДанныеФормаКоллекция.
//  УникальныйИдентификатор - УникальныйИдентификатор.
//
// Возвращаемое значение:
//  ВозвращаемыйАдрес - Строка.
//
Функция АдресВХранилище(ИмяТаблицы, Объект, УникальныйИдентификатор) Экспорт
	
	ВозвращаемыйАдрес = "";
	
	Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
		ВозвращаемыйАдрес = ПоместитьВоВременноеХранилище(Объект[ИмяТаблицы].Выгрузить(), УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат ВозвращаемыйАдрес;
	
КонецФункции

// Заполняет таблицу значений "ТабличноеПолеЧеков" и устанавливает КлючСвязи.
//
// Параметры:
//  ТабличноеПолеЧеков - ТаблицаЗначений.
//  Объект - ДанныеФормаКоллекция.
//  СтруктураДанных - Структура.
//  АдресТаблицыЧеков - Строка.
//
Процедура ЗаполнитьТаблицуЧеков(ТабличноеПолеЧеков, Объект, СтруктураДанных, АдресТаблицыЧеков) Экспорт
	
	СуммаОстаткаДокументаРасчета = СтруктураДанных.СуммаОстаткаДокументаРасчета;
	УникальныйИдентификатор = СтруктураДанных.УникальныйИдентификатор;
	ТаблицаКассККМОрганизаций = СтруктураДанных.ТаблицаКассККМОрганизаций;
	ТекущаяКассаККМ = СтруктураДанных.ТекущаяКассаККМ;
	ТекущаяОрганизация = Объект.Организация;
	ТекущийМагазин = Объект.Магазин;
	ТекущийСкладПродажи = Справочники.Склады.ПустаяСсылка();
	
	Если НЕ ЗначениеЗаполнено(ТекущаяКассаККМ) И ТаблицаКассККМОрганизаций.Количество() = 1 Тогда
		ТекущаяКассаККМ = ТаблицаКассККМОрганизаций[0].КассаККМ;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяКассаККМ) И ЗначениеЗаполнено(ТекущаяОрганизация) Тогда
		ИспользуемыеККМ = ТаблицаКассККМОрганизаций.НайтиСтроки(
			Новый Структура("Организация, ПоУмолчанию", Объект.Организация, Истина));
			
		Если ИспользуемыеККМ.Количество() = 1 Тогда
			ТекущаяКассаККМ = ИспользуемыеККМ[0].КассаККМ;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяКассаККМ) Тогда
		ИспользуемыеККМ = ТаблицаКассККМОрганизаций.НайтиСтроки(
			Новый Структура("ПоУмолчанию", Истина));
			
		Если ИспользуемыеККМ.Количество() > 0 Тогда
			ТекущаяКассаККМ = ИспользуемыеККМ[0].КассаККМ;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяКассаККМ) Тогда
		ДанныеКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяКассаККМ, "Владелец, Магазин");
		ТекущаяОрганизация = ДанныеКассыККМ.Владелец;
		ТекущийМагазин = ДанныеКассыККМ.Магазин;
		ТекущийСкладПродажи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийМагазин, "СкладПродажи");
		
		Если НЕ Объект.Организация = ТекущаяОрганизация Тогда
			Объект.Организация = ТекущаяОрганизация;
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущийВидНалога = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложения(
			ОбщегоНазначения.ТекущаяДатаПользователя(),
			ТекущаяОрганизация,
			ТекущийМагазин,
			ТекущийСкладПродажи);
	
	ТабличноеПолеЧеков.Очистить();
	
	Если Объект.ОперацияСДенежнымиСредствами
		И Объект.Товары.Количество() = 0
		И Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		
		СтрокаТаблицыЧеков = ТабличноеПолеЧеков.Добавить();
		СтрокаТаблицыЧеков.КассаККМ = ТекущаяКассаККМ;
		СтрокаТаблицыЧеков.Организация = ТекущаяОрганизация;
		СтрокаТаблицыЧеков.ВидНалога = ТекущийВидНалога;
		СтрокаТаблицыЧеков.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
		
		СтрокаТаблицыЧеков.Сумма = СуммаОстаткаДокументаРасчета;
		
	ИначеЕсли Объект.ОперацияСДенежнымиСредствами
			И Объект.Товары.Количество() = 0
			И НЕ ЗначениеЗаполнено(Объект.ДокументРасчета) Тогда
			
		СтрокаТаблицыЧеков = ТабличноеПолеЧеков.Добавить();
		СтрокаТаблицыЧеков.КассаККМ = ТекущаяКассаККМ;
		СтрокаТаблицыЧеков.Организация = ТекущаяОрганизация;
		СтрокаТаблицыЧеков.ВидНалога = ТекущийВидНалога;
		СтрокаТаблицыЧеков.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
		
		СтрокаТаблицыЧеков.Сумма = 0;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаВЗапросе.Организация КАК Организация,
		|	ТаблицаВЗапросе.СуммаВсего КАК Сумма,
		|	ТаблицаВЗапросе.ВидНалога КАК ВидНалога
		|ПОМЕСТИТЬ ТаблицаВЗапросе
		|ИЗ
		|	&Товары КАК ТаблицаВЗапросе
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаВзапросе.Организация КАК Организация,
		|	ТаблицаВзапросе.ВидНалога КАК ВидНалога,
		|	СУММА(ТаблицаВзапросе.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ТаблицаЧеков
		|ИЗ
		|	ТаблицаВЗапросе КАК ТаблицаВзапросе
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаВзапросе.Организация,
		|	ТаблицаВзапросе.ВидНалога
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаКассККМОрганизаций.Организация КАК Организация,
		|	ТаблицаКассККМОрганизаций.КассаККМ КАК КассаККМ,
		|	ТаблицаКассККМОрганизаций.ПоУмолчанию КАК ПоУмолчанию
		|ПОМЕСТИТЬ ТаблицаКассККМОрганизаций
		|ИЗ
		|	&ТаблицаКассККМОрганизаций КАК ТаблицаКассККМОрганизаций
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЧеков.Организация КАК Организация,
		|	ТаблицаЧеков.ВидНалога КАК ВидНалога,
		|	ТаблицаЧеков.Сумма КАК Сумма,
		|	ТаблицаКассККМОрганизаций.КассаККМ КАК КассаККМ
		|ИЗ
		|	ТаблицаЧеков КАК ТаблицаЧеков
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКассККМОрганизаций КАК ТаблицаКассККМОрганизаций
		|		ПО ТаблицаЧеков.Организация = ТаблицаКассККМОрганизаций.Организация
		|			И (ТаблицаКассККМОрганизаций.ПоУмолчанию)";
		
		Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
		Запрос.УстановитьПараметр("ТаблицаКассККМОрганизаций", ТаблицаКассККМОрганизаций.Выгрузить());
		
		Результат = Запрос.Выполнить();
		ТаблицаЗапроса = Результат.Выгрузить();
		
		ТабличноеПолеЧеков.Загрузить(ТаблицаЗапроса);
		
		СтрокиДляУдаления = Новый Массив;
		Если ТаблицаКассККМОрганизаций.Количество() = 1 Тогда
		
			Для Каждого СтрокаТаблицыЧеков Из ТабличноеПолеЧеков Цикл
				
				Если СтрокаТаблицыЧеков.КассаККМ <> ТекущаяКассаККМ
					ИЛИ СтрокаТаблицыЧеков.Организация <> ТекущаяОрганизация Тогда
					
					СтруктураПоискаТовары = Новый Структура();
					СтруктураПоискаТовары.Вставить("Организация", СтрокаТаблицыЧеков.Организация);
					
					СтрокиТовары = Объект.Товары.НайтиСтроки(СтруктураПоискаТовары);
					
					Для Каждого СтрокаТовары Из СтрокиТовары Цикл
						Если НЕ СтрокаТовары.Организация = ТекущаяОрганизация Тогда
							СтрокаТовары.Организация = ТекущаяОрганизация;
							СтрокаТовары.ВидНалога = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложения(
								ОбщегоНазначения.ТекущаяДатаПользователя(),
								ТекущаяОрганизация,
								ТекущийМагазин,
								СтрокаТовары.Склад,
								ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовары.Номенклатура, "ТоварнаяГруппа"));
						КонецЕсли;
					КонецЦикла;
					
					Если НЕ СтрокаТаблицыЧеков.КассаККМ = ТекущаяКассаККМ Тогда
						СтрокаТаблицыЧеков.КассаККМ = ТекущаяКассаККМ;
					КонецЕсли;
					
					Если НЕ СтрокаТаблицыЧеков.Организация = ТекущаяОрганизация Тогда
						СтрокаТаблицыЧеков.Организация = ТекущаяОрганизация;
						Объект.Организация             = ТекущаяОрганизация;
						СтрокаТаблицыЧеков.ВидНалога = ТекущийВидНалога;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьОрганизациюВСериях(Объект.Товары, Объект.Серии);
	
	ТабличноеПолеЧековДляПередачиВФормуОплат = ТабличноеПолеЧеков.Выгрузить(Новый Массив());
	КЧ70 = Новый КвалификаторыЧисла(7, 0, ДопустимыйЗнак.Неотрицательный);
	ТабличноеПолеЧековДляПередачиВФормуОплат.Колонки.Добавить("КлючСвязиТПЧеков", Новый ОписаниеТипов("Число", КЧ70));
	
	Для Каждого СтрокаТП Из ТабличноеПолеЧеков Цикл
		НоваяСтрокаДляПередачи = ТабличноеПолеЧековДляПередачиВФормуОплат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДляПередачи, СтрокаТП);
		НоваяСтрокаДляПередачи.КлючСвязиТПЧеков = СтрокаТП.ПолучитьИдентификатор();
	КонецЦикла;
	
	АдресТаблицыЧеков = ПоместитьВоВременноеХранилище(ТабличноеПолеЧековДляПередачиВФормуОплат, УникальныйИдентификатор);
	
	Если Объект.Оплата.Количество() > 0 И ТабличноеПолеЧеков.Количество() > 0 Тогда
		ПервыйИдентификатор = ТабличноеПолеЧеков[0].ПолучитьИдентификатор();
		Для Каждого СтрокаОплаты Из Объект.Оплата Цикл
			СтрокаОплаты.КлючСвязиТПЧеков = ПервыйИдентификатор;
			ПервыйИдентификатор = ПервыйИдентификатор + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет возможность выемки из КассыККМ на требуемую сумму.
//
// Параметры:
//  ПараметрыВыполнения - Структура.
//  ПараметрыИнформации - Структура.
//  ИспользоватьАгентскиеПлатежиИРазделениеВыручки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если есть возможность произвести выемку ДС.
//
Функция ВозможностьОперацииВыемкиДенежныхСредств(ПараметрыВыполнения, ПараметрыИнформации, ИспользоватьАгентскиеПлатежиИРазделениеВыручки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДенежныеСредстваККМОстатки.КассаККМ КАК КассаККМ,
	|	ДенежныеСредстваККМОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДенежныеСредстваККМОстатки.СуммаОстаток - &ИзымаемаяСумма КАК СуммаОстаток
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваККМ.Остатки(
	|			,
	|			КассаККМ = &КассаККМ
	|				И ДоговорКонтрагента = &ДоговорКонтрагента) КАК ДенежныеСредстваККМОстатки
	|ГДЕ
	|	ДенежныеСредстваККМОстатки.СуммаОстаток - &ИзымаемаяСумма < 0";
	
	Запрос.УстановитьПараметр("КассаККМ", ПараметрыВыполнения.КассаККМ);
	Запрос.УстановитьПараметр("ИзымаемаяСумма", ПараметрыВыполнения.ИзымаемаяСумма);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",
		ПараметрыВыполнения.ДополнительныеПараметры.ДоговорКонтрагента);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
			
			ШаблонСообщения =
				НСтр("ru = 'Превышен на %1 тг. остаток денежных средств в кассе ККМ ""%2"" по типу выручки ""%3""'");
			ТипВыручки = Выборка.ДоговорКонтрагента;
			Если ТипВыручки = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
				ТипВыручки = НСтр("ru = 'Собственные средства'");
			КонецЕсли;
			ТекстСообщения = СтрШаблон(ШаблонСообщения, - Выборка.СуммаОстаток, Выборка.КассаККМ, ТипВыручки);
			
		Иначе
			
			ШаблонСообщения = НСтр("ru = 'Превышен на %1 тг. остаток денежных средств в кассе ККМ ""%2""'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, - Выборка.СуммаОстаток, Выборка.КассаККМ);
			
		КонецЕсли;
		
		ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка выемки денег'");
		ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет наличие товаров и подарков на складе.
//
// Параметры:
//  Отказ - Булево.
//  ПараметрыИнформации - Структура.
//  Объект - ДанныеФормаКоллекция.
//  КонтролироватьОстаткиТоваровПриЗакрытииЧека - Булево.
//
Процедура ПроверитьНаличиеТоваровИСерийныхСертификатов(Отказ, ПараметрыИнформации, Объект, КонтролироватьОстаткиТоваровПриЗакрытииЧека) Экспорт

	Если НЕ КонтролироватьОстаткиТоваровПриЗакрытииЧека Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Резервировать КАК БУЛЕВО) КАК Резервировать,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Склад КАК Справочник.Склады) КАК Склад
	|ПОМЕСТИТЬ ДокТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаПодарки.СкидкаНаценка КАК Справочник.СкидкиНаценки) КАК СкидкаНаценка,
	|	ВЫРАЗИТЬ(ТаблицаПодарки.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаПодарки.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаПодарки.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ВЫРАЗИТЬ(ТаблицаПодарки.Склад КАК Справочник.Склады) КАК Склад,
	|	ЛОЖЬ КАК Резервировать
	|ПОМЕСТИТЬ ДокПодарки
	|ИЗ
	|	&ТаблицаПодарки КАК ТаблицаПодарки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокТовары.Номенклатура КАК Номенклатура,
	|	ДокТовары.Характеристика КАК Характеристика,
	|	ДокТовары.Количество КАК Количество,
	|	ДокТовары.Склад КАК Склад,
	|	ДокТовары.Резервировать КАК Резервировать
	|ПОМЕСТИТЬ ДокТоварыПодарки
	|ИЗ
	|	ДокТовары КАК ДокТовары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокПодарки.Номенклатура,
	|	ДокПодарки.Характеристика,
	|	ДокПодарки.Количество,
	|	ДокПодарки.Склад,
	|	ДокПодарки.Резервировать
	|ИЗ
	|	ДокПодарки КАК ДокПодарки
	|ГДЕ
	|	НЕ ДокПодарки.СкидкаНаценка.ПодарокИзСписка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокТоварыПодарки.Номенклатура КАК Номенклатура,
	|	ДокТоварыПодарки.Характеристика КАК Характеристика,
	|	СУММА(ДокТоварыПодарки.Количество) КАК Количество,
	|	ДокТоварыПодарки.Склад КАК Склад,
	|	ДокТоварыПодарки.Резервировать КАК Резервировать
	|ПОМЕСТИТЬ ДокТоварыБезЛишнего
	|ИЗ
	|	ДокТоварыПодарки КАК ДокТоварыПодарки
	|ГДЕ
	|	ДокТоварыПодарки.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|	И НЕ ДокТоварыПодарки.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И НЕ ДокТоварыПодарки.Номенклатура.ИспользоватьСерийныеНомера
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТоварыПодарки.Номенклатура,
	|	ДокТоварыПодарки.Характеристика,
	|	ДокТоварыПодарки.Склад,
	|	ДокТоварыПодарки.Резервировать
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Склад КАК Склад,
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ТоварыНаСкладахОстатки.РезервОстаток КАК РезервОстаток
	|ПОМЕСТИТЬ ТаблицаОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			(Склад, Номенклатура, Характеристика) В
	|				(ВЫБРАТЬ
	|					ДокТоварыБезЛишнего.Склад,
	|					ДокТоварыБезЛишнего.Номенклатура,
	|					ДокТоварыБезЛишнего.Характеристика
	|				ИЗ
	|					ДокТоварыБезЛишнего КАК ДокТоварыБезЛишнего)) КАК ТоварыНаСкладахОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокТоварыБезЛишнего.Номенклатура КАК Номенклатура,
	|	ДокТоварыБезЛишнего.Характеристика КАК Характеристика,
	|	ДокТоварыБезЛишнего.Количество КАК Количество,
	|	ДокТоварыБезЛишнего.Склад КАК Склад,
	|	ЕСТЬNULL(ТаблицаОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	ДокТоварыБезЛишнего.Количество КАК НедостающееКоличество,
	|	ДокТоварыБезЛишнего.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	ДокТоварыБезЛишнего КАК ДокТоварыБезЛишнего
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатки КАК ТаблицаОстатки
	|		ПО ДокТоварыБезЛишнего.Номенклатура = ТаблицаОстатки.Номенклатура
	|			И ДокТоварыБезЛишнего.Характеристика = ТаблицаОстатки.Характеристика
	|			И ДокТоварыБезЛишнего.Склад = ТаблицаОстатки.Склад
	|ГДЕ
	|	ДокТоварыБезЛишнего.Резервировать
	|	И ДокТоварыБезЛишнего.Количество > ЕСТЬNULL(ТаблицаОстатки.КоличествоОстаток, 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокТоварыБезЛишнего.Номенклатура,
	|	ДокТоварыБезЛишнего.Характеристика,
	|	ДокТоварыБезЛишнего.Количество,
	|	ДокТоварыБезЛишнего.Склад,
	|	ЕСТЬNULL(ТаблицаОстатки.КоличествоОстаток, 0),
	|	ДокТоварыБезЛишнего.Количество - (ЕСТЬNULL(ТаблицаОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТаблицаОстатки.РезервОстаток, 0)),
	|	ДокТоварыБезЛишнего.Номенклатура.ЕдиницаИзмерения
	|ИЗ
	|	ДокТоварыБезЛишнего КАК ДокТоварыБезЛишнего
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатки КАК ТаблицаОстатки
	|		ПО ДокТоварыБезЛишнего.Номенклатура = ТаблицаОстатки.Номенклатура
	|			И ДокТоварыБезЛишнего.Характеристика = ТаблицаОстатки.Характеристика
	|			И ДокТоварыБезЛишнего.Склад = ТаблицаОстатки.Склад
	|ГДЕ
	|	НЕ ДокТоварыБезЛишнего.Резервировать
	|	И ДокТоварыБезЛишнего.Количество > ЕСТЬNULL(ТаблицаОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТаблицаОстатки.РезервОстаток, 0)";
	
	ТаблицаТоваров  = Объект.Товары.Выгрузить(, "Номенклатура, Характеристика, Количество, Склад, Резервировать");
	ТаблицаПодарков = Объект.Подарки.Выгрузить();
	
	Запрос.УстановитьПараметр("ТаблицаТовары" , ТаблицаТоваров);
	Запрос.УстановитьПараметр("ТаблицаПодарки", ТаблицаПодарков);
	
	ТаблицаПоОтрицательнымОстаткам = Запрос.Выполнить().Выгрузить();
	
	ТекстСообщения = "";
	
	ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Отрицательные остатки'");
	
	ШаблонСообщения = НСтр("ru = '%5 %1 
		|Превышен остаток на складе %2 на %3 %4'");
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРезервированиеПоЗаказамПокупателей") Тогда
		ШаблонСообщения = НСтр("ru = '%5 %1 
			|Превышен свободный остаток на складе %2 на %3 %4'");
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаПоОтрицательнымОстаткам Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура"  , СтрокаТаблицы.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаТаблицы.Характеристика);
		
		Если ТаблицаТоваров.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
			Если ТаблицаПодарков.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
				СтрокаПозиции = НСтр("ru = 'Номенклатура и подарок'");
			Иначе
				СтрокаПозиции = НСтр("ru = 'Номенклатура'");
			КонецЕсли;
		Иначе
			СтрокаПозиции = НСтр("ru = 'Подарок'");
		КонецЕсли;
		
		ТекстСообщения = ТекстСообщения + ?(Отказ, Символы.ПС, "") + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
				СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика),
			Строка(СтрокаТаблицы.Склад),
			Строка(СтрокаТаблицы.НедостающееКоличество),
			Строка(СтрокаТаблицы.ЕдиницаИзмерения),
			СтрокаПозиции);
		
		Отказ = Истина;
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПопыткиПродажПревышающихОстаток") 
		И ТаблицаПоОтрицательнымОстаткам.Количество() > 0 Тогда
		
		ДатаПродажи = ТекущаяДатаСеанса();
		
		ТаблицаПоОтрицательнымОстаткам.Колонки.Добавить(
			"ДатаПродажи", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
		ТаблицаПоОтрицательнымОстаткам.ЗаполнитьЗначения(НачалоДня(ДатаПродажи),"ДатаПродажи");
		
		ПродажиСервер.ОтразитьПопыткиПродаж(ТаблицаПоОтрицательнымОстаткам, ДатаПродажи);
		
	КонецЕсли;
	
	МаркетинговыеАкцииСерверПривилегированный.ПроверитьОстаткиСерийныхНомеров(
		Объект.Товары.Выгрузить(, "Номенклатура, КлючСвязиСерийныхНомеров, Склад"), 
		Объект.СерийныеНомера.Выгрузить(),
		Отказ,
		ТекстСообщения);
	
	Если Объект.ПродажаПоЗаказу Тогда
	
		РозничныеПродажиСервер.ПроверитьОстаткиЗаказовПокупателей(
			Объект.Товары.Выгрузить(,"Номенклатура, Характеристика, Количество, ЗаказПокупателя, КодСтроки"), 
			Объект.ЗаказПокупателя,
			Отказ,
			ТекстСообщения);
	
	КонецЕсли;
	
	ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
	
КонецПроцедуры

// Проверяет заполнение табличных частей перед началом оплаты.
//
// Параметры:
//  Отказ - Булево.
//  ПараметрыИнформации - Структура.
//  СтруктураДанных - Структура.
//  Объект - ДанныеФормаКоллекция.
//  ОплатаТолькоНаличными - Булево.
//
Процедура ПроверитьЗаполнениеТабличнойЧасти(Отказ, ПараметрыИнформации, СтруктураДанных, Объект, ОплатаТолькоНаличными) Экспорт 
	
	ВестиУчетМаркируемойПродукцииИСМП           = СтруктураДанных.ВестиУчетМаркируемойПродукцииИСМП;
	КонтролироватьОстаткиТоваровПриЗакрытииЧека = СтруктураДанных.КонтролироватьОстаткиТоваровПриЗакрытииЧека;
	ОрганизацияЕГАИС                            = СтруктураДанных.ОрганизацияЕГАИС;
	ЭтоВозвратПродукцииИСМПБезМарки             = СтруктураДанных.ЭтоВозвратПродукцииИСМПБезМарки;
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Количество,
	|	Товары.Сумма,
	|	Товары.НомерСтроки,
	|	Товары.Склад
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВЗапросе.НомерСтроки,
	|	ТаблицаВЗапросе.Номенклатура,
	|	ТаблицаВЗапросе.Характеристика,
	|	ТаблицаВЗапросе.Количество,
	|	ТаблицаВЗапросе.Сумма,
	|	ТаблицаВЗапросе.Склад,
	|	ВЫБОР
	|		КОГДА ТаблицаВЗапросе.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаНоменклатуры,
	|	ВЫБОР
	|		КОГДА (ТаблицаВЗапросе.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
	|				ИЛИ ТаблицаВЗапросе.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры))
	|				И ТаблицаВЗапросе.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаХарактеристики,
	|	ВЫБОР
	|		КОГДА ТаблицаВЗапросе.Количество = 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаКоличество,
	|	ВЫБОР
	|		КОГДА ТаблицаВЗапросе.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) И (ТаблицаВЗапросе.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаСклада
	|ПОМЕСТИТЬ ТаблицаСОшибками
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСОшибками.Номенклатура,
	|	ТаблицаСОшибками.Характеристика,
	|	ТаблицаСОшибками.Количество,
	|	ТаблицаСОшибками.Сумма,
	|	ТаблицаСОшибками.НомерСтроки,
	|	ТаблицаСОшибками.ОшибкаНоменклатуры,
	|	ТаблицаСОшибками.ОшибкаХарактеристики,
	|	ТаблицаСОшибками.ОшибкаКоличество,
	|	ТаблицаСОшибками.Склад,
	|	ТаблицаСОшибками.ОшибкаСклада
	|ИЗ
	|	ТаблицаСОшибками КАК ТаблицаСОшибками
	|ГДЕ
	|	(ТаблицаСОшибками.ОшибкаНоменклатуры
	|			ИЛИ ТаблицаСОшибками.ОшибкаХарактеристики
	|			ИЛИ ТаблицаСОшибками.ОшибкаКоличество
	|			ИЛИ ТаблицаСОшибками.ОшибкаСклада)";
	
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	Если ТаблицаЗапроса.Количество() > 0 Тогда
		Отказ = Истина;
		ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Есть ошибки заполнения табличной части'");
		ПараметрыИнформации.ТекстИнформации     = "";
		Для каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
			
			Если СтрокаТаблицы.ОшибкаНоменклатуры Тогда
				
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В строке №%1 табличной части не заполнена номенклатура'"),
				СтрокаТаблицы.НомерСтроки);
				ПараметрыИнформации.ТекстИнформации = ПараметрыИнформации.ТекстИнформации + Символы.ПС + Текст;
				
			ИначеЕсли СтрокаТаблицы.ОшибкаХарактеристики Тогда
				
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В строке №%1 табличной части не заполнена характеристика'"),
				СтрокаТаблицы.НомерСтроки);
				ПараметрыИнформации.ТекстИнформации = ПараметрыИнформации.ТекстИнформации + Символы.ПС + Текст;
				
			ИначеЕсли СтрокаТаблицы.ОшибкаСклада Тогда
				
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В строке №%1 табличной части не смогли заполнить склад'"),
				СтрокаТаблицы.НомерСтроки);
				ПараметрыИнформации.ТекстИнформации = ПараметрыИнформации.ТекстИнформации + Символы.ПС + Текст;
				
			ИначеЕсли СтрокаТаблицы.ОшибкаКоличество Тогда
				
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В строке №%1 табличной части не заполнено количество'"),
				СтрокаТаблицы.НомерСтроки);
				ПараметрыИнформации.ТекстИнформации = ПараметрыИнформации.ТекстИнформации + Символы.ПС + Текст;
				
			КонецЕсли;
		КонецЦикла;
	Иначе
		
		СтрокаОшибки = "";
		
		МаркетинговыеАкцииСервер.ПроверитьЗаполнениеТабличнойЧастиСерийныеНомера(
		Объект,
		"Товары",
		"СерийныеНомера",
		Отказ,
		СтрокаОшибки,
		Истина);
		
		Если Отказ Тогда
			ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Есть ошибки заполнения табличной части'");
			ПараметрыИнформации.ТекстИнформации = СтрокаОшибки;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОшибки = "";
	
	ИспользуетсяРегистрацияРозничныхПродажВЕГАИС =
	ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(Объект.Организация, Объект.Магазин);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		
		Если ЭтоВозвратДеньВДень(Объект) Тогда 
			ОтдельноПроверитьВозможностьОплатыТолькоНаличными = ОплатаТолькоНаличными И Объект.ЧекККМПродажа.Оплата.Итог("Сумма") > 0;
			ОтдельноПроверитьВозможностьОплатыБанковскойКартой = НЕ ОплатаТолькоНаличными;
		Иначе
			ОтдельноПроверитьВозможностьОплатыТолькоНаличными = Ложь;
			ОтдельноПроверитьВозможностьОплатыБанковскойКартой = Ложь;
		КонецЕсли;
		
		ПродажиСервер.ПроверитьВозможностьВозвратаПоЧекуККМ(
		Объект,
		Отказ, 
		СтрокаОшибки,
		Истина,
		ОтдельноПроверитьВозможностьОплатыТолькоНаличными,
		ОтдельноПроверитьВозможностьОплатыБанковскойКартой,
		ИспользуетсяРегистрацияРозничныхПродажВЕГАИС);
		
		Если Отказ Тогда
			ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка возврат товара'");
			ПараметрыИнформации.ТекстИнформации = СтрокаОшибки;
			Возврат;
		КонецЕсли;
	Иначе
		
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		СтруктураДокумента = Новый Структура;
		СтруктураДокумента.Вставить("ДокументОбъект", Объект);
		СтруктураДокумента.Вставить("ЭтоДокумент", Ложь);
		СтруктураДокумента.Вставить("ЭтоНовый", Истина);
		СтруктураДокумента.Вставить("ИмяТабличнойЧасти", "Товары");
		СтруктураДокумента.Вставить("ТаблицаЗначений_Товары", Объект.Товары.Выгрузить());
		СтруктураДокумента.Вставить("ТаблицаЗначений_СерийныеНомера", Объект.СерийныеНомера.Выгрузить());
		
		Если НЕ Объект.ОперацияСДенежнымиСредствами Тогда
			МаркетинговыеАкцииСерверПривилегированный.ПроверитьДвиженияСерийныхНомеров(
			СтруктураДокумента,
			Отказ,
			СтрокаОшибки,
			ТекущаяДатаСеанса);
		КонецЕсли;
		
		МаркетинговыеАкцииСерверПривилегированный.ПроверитьОкончаниеАбсолютныхСроковДействияСертификатов(
		СтруктураДокумента,
		Отказ,
		СтрокаОшибки,
		ТекущаяДатаСеанса);
		
		Если Отказ Тогда
			ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибки подарочных сертификатов'");
			ПараметрыИнформации.ТекстИнформации = СтрокаОшибки;
			Возврат;
		КонецЕсли;
		
		Если НЕ Объект.ПродажаПоЗаказу Тогда
			АссортиментСервер.ПроверитьАссортиментТаблицыТоваровДокументаПродажи(
			Объект,
			Отказ,
			Ложь,
			СтрокаОшибки,
			ТекущаяДатаСеанса);
		КонецЕсли;
		
		СкидкиНаценкиСерверПереопределяемый.ПроверитьЗапретРозничнойПродажиТаблицыТоваров(
		Объект,
		"Товары",
		Отказ,
		СтрокаОшибки,
		ТекущаяДатаСеанса,
		Ложь);
		
		Если Отказ Тогда
			ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибки проверки запрета продаж'");
			ПараметрыИнформации.ТекстИнформации = СтрокаОшибки;
			Возврат;
		КонецЕсли;
		
		ПроверитьНаличиеТоваровИСерийныхСертификатов(Отказ, ПараметрыИнформации, Объект, КонтролироватьОстаткиТоваровПриЗакрытииЧека);
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Если НЕ Объект.ОперацияСДенежнымиСредствами
			И (ИспользуетсяРегистрацияРозничныхПродажВЕГАИС
			ИЛИ ВестиУчетМаркируемойПродукцииИСМП) Тогда
			
			// Проверим корректность заполнения ГОСИС.
			Если НЕ Отказ Тогда
				// ЕГАИС.
				ПродажаСПроверкойЕГАИС = Ложь;
				Если ИнтеграцияЕГАИСРТ.ЕстьАлкогольнаяПродукцияЕГАИС(Объект.Товары) Тогда
					ПродажаСПроверкойЕГАИС =
						ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(
							Объект.Организация,
							Объект.Магазин,
							Объект.Дата);
				КонецЕсли;
				
				Если ПродажаСПроверкойЕГАИС Тогда
					ИнтеграцияЕГАИСРТ.ПроверитьЗаполнениеДокумента(Объект, Отказ);
				КонецЕсли;
				
				//ИСМП.
				Если ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции() И НЕ ЭтоВозвратПродукцииИСМПБезМарки  Тогда
					ИнтеграцияИСРТ.ПроверитьЗаполнениеАкцизныхМарок(Объект, Отказ);
				КонецЕсли;
				
				Если Отказ Тогда
					ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибки маркировки'");
					ПараметрыИнформации.ТекстИнформации = НСтр("ru = 'Некорректно заполнены данные маркируемой продукции'");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		СтрокаОшибки = "";
		ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеСерий(
		Объект,
		Документы.ЧекККМ.ПараметрыУказанияСерий(Объект),
		Отказ,
		,
		Ложь,
		СтрокаОшибки);
		
		ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибки серий'");
		ПараметрыИнформации.ТекстИнформации = СтрокаОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет, что это возврат по чеку "День в день".
//
// Параметры:
//  Объект - ДанныеФормаКоллекция.
//
// Возвращаемое значение:
//  Булево - Истина, если возврат "День в день".
//
Функция ЭтоВозвратДеньВДень(Объект) Экспорт
	
	Возврат НЕ ЗначениеЗаполнено(Объект.ЧекККМПродажа.ОтчетОРозничныхПродажах);
	
КонецФункции

// Проверяет состояние кассовых смен для текущих касс ККМ.
//
// Параметры:
//  Отказ - Булево.
//  ПараметрыИнформации - Структура.
//  ТаблицаКассККМОрганизаций - ТаблицаЗначений.
//
Процедура ПроверитьКассовыеСмены(Отказ, ПараметрыИнформации, ТаблицаКассККМОрганизаций) Экспорт
	
	ДоступныеКассыККМ = ТаблицаКассККМОрганизаций.Выгрузить().ВыгрузитьКолонку("КассаККМ");
	ТекущаяДата = ОБщегоназначения.ТекущаяДатаПользователя();
	
	Для каждого ПроверяемаяКасса Из ДоступныеКассыККМ Цикл
	
		СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(ПроверяемаяКасса);
		КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
		ТекстОшибки = НСтр("ru='Кассовая смена не открыта!'");
		
		Если НЕ РозничныеПродажиСервер.СменаОткрыта(КассоваяСмена, ТекущаяДата, ТекстОшибки) Тогда
			
			ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
			ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Касса ККМ: %1 - '"), ПроверяемаяКасса);
			ПараметрыИнформации.ЗаголовокИнформации = ТекстЗаголовка;
			ПараметрыИнформации.ТекстИнформации = ТекстОшибки;
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получает массив реквизтов ключей.
//
// Параметры:
//  ИмяРеквизитаКлюча - Строка.
//  СтруктураПоиска - Структура.
//  Объект - ДанныеФормаКоллекция.
//
// Возвращаемое значение:
//  Массив - массив значений с реквизитами ключей.
//
Функция ПолучитьМассивКлючей(ИмяРеквизитаКлюча, СтруктураПоиска, Объект) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТовары." + ИмяРеквизитаКлюча + " КАК РеквизитКлюча
	|	&ДополнительныеПоляВыборки
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВЗапросе.РеквизитКлюча
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|ГДЕ
	|	&ФразаГде";
	
	Запрос.УстановитьПараметр("ТаблицаТовары", Объект.Товары.Выгрузить());
	
	ФразаГде = "";
	ДополнительныеПоляВыборки = "";
	Для Каждого ПолеПоиска Из СтруктураПоиска Цикл
		
		ДополнительныеПоляВыборки = ДополнительныеПоляВыборки + ", ТаблицаТовары." + ПолеПоиска.Ключ;
		
		Если Не ФразаГде = "" Тогда
			ФразаГде = ФразаГде + " и ";
		КонецЕсли;
		
		ФразаГде = ФразаГде + "ТаблицаВЗапросе." + ПолеПоиска.Ключ + " = &Параметр" + ПолеПоиска.Ключ;
		
		Запрос.УстановитьПараметр("Параметр" + ПолеПоиска.Ключ, ПолеПоиска.Значение);
		
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ФразаГде", ФразаГде);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеПоляВыборки", ДополнительныеПоляВыборки);
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	Возврат ТаблицаЗапроса.ВыгрузитьКолонку("РеквизитКлюча");
	
КонецФункции

// Удаляет строки из табличной части по переданным значениям "КлючСвязи".
//
// Параметры:
//  ИмяТабличнойЧасти - Строка.
//  ИмяРеквизитаКлюча - Строка.
//  МассивКлючей - Массив.
//  ВключаяПустойКлюч - Булево.
//  Объект - ДанныеФормаКоллекция.
//
Процедура УдалитьСтрокиИзТабличнойЧастиПоКлючам(ИмяТабличнойЧасти, ИмяРеквизитаКлюча, МассивКлючей, ВключаяПустойКлюч, Объект) Экспорт
	
	МассивУдаляемыхСтрок = Новый Массив;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
		Если МассивКлючей = Неопределено Тогда
			Если ВключаяПустойКлюч Тогда
				Если СтрокаТабличнойЧасти[ИмяРеквизитаКлюча] = 0 Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаТабличнойЧасти);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли МассивКлючей.Найти(СтрокаТабличнойЧасти[ИмяРеквизитаКлюча]) <> Неопределено
			ИЛИ (ВключаяПустойКлюч <> Неопределено И ВключаяПустойКлюч И СтрокаТабличнойЧасти[ИмяРеквизитаКлюча] = 0) Тогда
			МассивУдаляемыхСтрок.Добавить(СтрокаТабличнойЧасти);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
		Объект[ИмяТабличнойЧасти].Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Удаляет строки из таблицы печатных форм.
//
// Параметры:
//  ТаблицаПечатныхФорм - ТабличнаяЧасть.
//  ЗначениеКолонки - Строка.
//  ИмяКолонки - Строка.
//
Процедура УдалитьСтрокуВТаблицеПечатныхФорм(ТаблицаПечатныхФорм, ЗначениеКолонки, ИмяКолонки) Экспорт
	
	Если ТаблицаПечатныхФорм.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаПечатныхФорм.Найти(ЗначениеКолонки, ИмяКолонки);
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		ТаблицаПечатныхФорм.Удалить(СтрокаТаблицы)
	КонецЕсли;
	
КонецПроцедуры

// Помещает во временное хранилище таблицу печатных форм.
//
// Параметры:
//  МассивСсылокЧеков - Массив.
//  АдресТаблицыПечатныхФорм - Строка.
//  ПриВозвратеРаспечатыватьПакетДокументов - Булево.
//  ОперацияСДенежнымиСредствами - Булево.
//  УникальныйИдентификатор - УникальныйИдентификатор.
//
Процедура ЗаполнитьАдресТаблицыПечатныхФорм(МассивСсылокЧеков, 
											АдресТаблицыПечатныхФорм, 
											ОперацияСДенежнымиСредствами,
											УникальныйИдентификатор,
											ЗаявлениеБезПроведения,
											ПечатнаяФорма = Неопределено) Экспорт
	
	ТаблицаПечатныхФорм = УправлениеПечатью.КомандыПечатиФормы("Документ.ЧекККМ.Форма.ФормаДокумента");
	
	Если ЗначениеЗаполнено(АдресТаблицыПечатныхФорм) Тогда
		УдалитьИзВременногоХранилища(АдресТаблицыПечатныхФорм);
	КонецЕсли;
	
	Если ЗаявлениеБезПроведения Тогда
		ФормыДоПробитияЧека = РозничныеПродажиКлиентСервер.ФормыЗаявленийДоПробитияЧека();
		КоличествоСтрок = ТаблицаПечатныхФорм.Количество();
		Для Индекс = 1 По КоличествоСтрок Цикл
			СтрокаТаблицы = ТаблицаПечатныхФорм[КоличествоСтрок - Индекс];
			Идентификатор = СтрокаТаблицы.Идентификатор;
			Если ФормыДоПробитияЧека.Найти(Идентификатор) = Неопределено Тогда
				УдалитьСтрокуВТаблицеПечатныхФорм(ТаблицаПечатныхФорм, Идентификатор, "Идентификатор");
			КонецЕсли;
		КонецЦикла;
		АдресТаблицыПечатныхФорм = ПоместитьВоВременноеХранилище(ТаблицаПечатныхФорм, УникальныйИдентификатор);
		Если ТаблицаПечатныхФорм.Количество() = 1 Тогда
			ПечатнаяФорма = ТаблицаПечатныхФорм[0].Идентификатор;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЧекККМ.Ссылка
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|	И ЧекККМ.Ссылка В(&МассивСсылокЧеков)";
	
	Запрос.УстановитьПараметр("МассивСсылокЧеков", МассивСсылокЧеков);
	Результат = Запрос.Выполнить();
	ЕстьВозврат = НЕ Результат.Пустой();
	
	ЕстьСерии = Ложь;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЧекККМСерии.Ссылка КАК Ссылка,
		|	ЧекККМСерии.Серия КАК Серия
		|ИЗ
		|	Документ.ЧекККМ.Серии КАК ЧекККМСерии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ПО ЧекККМСерии.Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
		|ГДЕ
		|	ЧекККМСерии.Ссылка В(&МассивСсылокЧеков)
		|	И ВидыНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
		|	И ВидыНоменклатуры.СрокГарантии > 0";
		
		Запрос.УстановитьПараметр("МассивСсылокЧеков", МассивСсылокЧеков);
		Результат = Запрос.Выполнить();
		ЕстьСерии = НЕ Результат.Пустой();
		
	КонецЕсли;
	
	Если НЕ ЕстьВозврат Тогда
		УдалитьСтрокуВТаблицеПечатныхФорм(ТаблицаПечатныхФорм, "КМ3", "Идентификатор");
		УдалитьСтрокуВТаблицеПечатныхФорм(ТаблицаПечатныхФорм, "ЗаявлениеНаВозврат", "Идентификатор");
		УдалитьСтрокуВТаблицеПечатныхФорм(ТаблицаПечатныхФорм, "ЗаявлениеНаУтерянныйЧек", "Идентификатор");
		УдалитьСтрокуВТаблицеПечатныхФорм(ТаблицаПечатныхФорм, "ЗаявлениеОбОшибочноПробитомЧеке", "Идентификатор");
	КонецЕсли;
	
	Если НЕ ЕстьСерии Тогда
		УдалитьСтрокуВТаблицеПечатныхФорм(ТаблицаПечатныхФорм, "ГарантийныйТалон", "Идентификатор");
	КонецЕсли;
	
	Если ОперацияСДенежнымиСредствами Тогда 
		УдалитьСтрокуВТаблицеПечатныхФорм(ТаблицаПечатныхФорм, "ТоварныйЧек", 		"Идентификатор");
		УдалитьСтрокуВТаблицеПечатныхФорм(ТаблицаПечатныхФорм, "ТоварныйЧекДляПД", 	"Идентификатор");
		УдалитьСтрокуВТаблицеПечатныхФорм(ТаблицаПечатныхФорм, "ТоварныйЧекДляФР", 	"Идентификатор");
		УдалитьСтрокуВТаблицеПечатныхФорм(ТаблицаПечатныхФорм, "КопияЧекаДляФР", 	"Идентификатор");
	КонецЕсли;
	
	АдресТаблицыПечатныхФорм = ПоместитьВоВременноеХранилище(ТаблицаПечатныхФорм, УникальныйИдентификатор);
	Если ТаблицаПечатныхФорм.Количество() = 1 Тогда
		ПечатнаяФорма = ТаблицаПечатныхФорм[0].Идентификатор;
	КонецЕсли;
	
КонецПроцедуры

// Получает команды печати.
//
// Параметры:
//  Идентификатор - Строка.
//  АдресТаблицыПечатныхФорм - Строка.
//
// Возвращаемое значение:
//  Структура - если в таблице печатных форм присутствует строка с текущим идентификаторм, иначе Неопределено.
//
Функция СтруктураКомандыПечати(Идентификатор, АдресТаблицыПечатныхФорм) Экспорт
	
	ТаблицаПечатныхФорм = ПолучитьИзВременногоХранилища(АдресТаблицыПечатныхФорм);
	
	Если ТаблицаПечатныхФорм.Колонки.Найти("Идентификатор") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаПечатныхФорм.Найти(Идентификатор, "Идентификатор");
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицы);
	КонецЕсли;
	
КонецФункции

// Заполняет параметры выемки денежных средств из кассы ККМ.
//
// Параметры:
//  ПараметрыВыемки - Структура - См. РозничныеПродажиКлиент.ПараметрыВыемкиИзКассы.
//
Процедура ИнициализироватьПараметрыВыемкиИзКассы(ПараметрыВыемки) Экспорт
	
	ПараметрыВыемки.ИспользоватьАгентскиеПлатежиИРазделениеВыручки = ПолучитьФункциональнуюОпцию("ИспользоватьАгентскиеПлатежиИРазделениеВыручки");
	
	// Заполним параметры по умолчанию.
	ПараметрыВыемки.СуммаОстаток             = 0;
	ПараметрыВыемки.ПроизводитьВыемку        = Ложь;
	ПараметрыВыемки.ЗапрашиватьСуммуВыемки   = Ложь;
	ПараметрыВыемки.МаксимальнаяСуммаРазмена = 0;
	ПараметрыВыемки.СуммаОстатокАгентские    = 0;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыемки.КассаККМ) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыемки.СуммаОстаток = СуммаОстаткаДСПоКассеККМ(ПараметрыВыемки.КассаККМ, ПараметрыВыемки.ДоговорКонтрагента);
	
	Если ПараметрыВыемки.ДоговорКонтрагента = Неопределено Тогда
		// Заполним параметры, необходимые при закрытии смены.
		КассоваяДисциплина = ПродажиСервер.КассоваяДисциплинаВыемкиПриЗакрытииСмены(ПараметрыВыемки.КассаККМ);
		ПараметрыВыемки.ПроизводитьВыемку        = НЕ КассоваяДисциплина.ТипВыемкиПриЗакрытииСмены = Перечисления.ТипыВыемкиПриЗакрытииСмены.ВыемкуНеПроизводить;;
		ПараметрыВыемки.ЗапрашиватьСуммуВыемки   = КассоваяДисциплина.ЗапрашиватьСуммуВыемки;
		ПараметрыВыемки.МаксимальнаяСуммаРазмена = КассоваяДисциплина.МаксимальнаяСуммаРазмена;
		
		Если ПараметрыВыемки.ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
			СуммаОстатокСобственные = СуммаОстаткаДСПоКассеККМ(ПараметрыВыемки.КассаККМ, Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
			ПараметрыВыемки.СуммаОстатокАгентские = ПараметрыВыемки.СуммаОстаток - СуммаОстатокСобственные;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Фомирует текст, который будет выведен при открытии смены.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ.
//  ТекстПереходящегоОстатка - Строка.
//
Процедура СформироватьТекстПриОткрытииСмены(КассаККМ, ТекстПереходящегоОстатка)
	
	СуммаОстатка = РозничныеПродажиСервер.СуммаОстаткаДСПоКассеККМ(КассаККМ);
	
	ТекстПереходящегоОстатка = НСтр("ru = 'Сумма остатка в кассе: %1 тг.'");
	ТекстПереходящегоОстатка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПереходящегоОстатка, 
		Формат(СуммаОстатка, "ЧЦ=15; ЧДЦ=2; ЧРГ=' '; ЧН=0,00; ЧГ=3,0"));
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАгентскиеПлатежиИРазделениеВыручки") Тогда
		
		СуммаОстатокСобственные = РозничныеПродажиСервер.СуммаОстаткаДСПоКассеККМ(КассаККМ, Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		СуммаОстатокАгентсике   = СуммаОстатка - СуммаОстатокСобственные;
		
		ТекстПереходящегоОстатка = ТекстПереходящегоОстатка + СтрШаблон(НСтр("ru = '    в т.ч. агентские: %1 %2'"),
			Формат(СуммаОстатокАгентсике, "ЧЦ=15; ЧДЦ=2; ЧРГ=' '; ЧН=0,00; ЧГ=3,0"),
			ОбщегоНазначенияРТКлиентСервер.Валюта());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗакрытиеСмены

Функция СоздатьОтчетОРозничныхПродажах(ПараметрыСмены)

	ДатаДокумента = ПараметрыСмены.ОкончаниеКассовойСмены;
	
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ТекущаяДата   = ТекущаяДатаСеанса();
		ДатаДокумента = КонецДня(ТекущаяДата);
	КонецЕсли;
	
	Отчет               = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
	Отчет.Дата          = ДатаДокумента;
	Отчет.КассаККМ      = ПараметрыСмены.КассаККМ;
	Отчет.Магазин       = Отчет.КассаККМ.Магазин;
	Отчет.Ответственный = Пользователи.ТекущийПользователь();
	Отчет.Организация   = Отчет.КассаККМ.Владелец;

	Отчет.УчитыватьНДС     = Ложь;
	Отчет.ЦенаВключаетНДС  = ОбщегоНазначенияРТ.ЗначениеРеквизитаВПривилегированномРежиме(Отчет.Магазин.ПравилоЦенообразования, "ЦенаВключаетНДС");

	Возврат Отчет;

КонецФункции

Функция СоздатьСписаниеТоваров(Склад, КассаККМ)

	ТекущаяДата   = ТекущаяДатаСеанса();
	ДатаДокумента = КонецДня(ТекущаяДата);
	
	СписаниеТоваров = Документы.СписаниеТоваров.СоздатьДокумент();
	СписаниеТоваров.Дата                  = ДатаДокумента;
	СписаниеТоваров.Склад                 = Склад;
	СписаниеТоваров.Магазин               = КассаККМ.Магазин;
	СписаниеТоваров.Ответственный         = Пользователи.ТекущийПользователь();
	СписаниеТоваров.Организация           = СписаниеТоваров.Склад.Организация;
	
	СписаниеТоваров.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.СкидкиПодарки;
	Возврат СписаниеТоваров;

КонецФункции

Функция ТекстЗапросаТоварыОрганизацииЧека() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТоварыОрганизаций.Номенклатура КАК Номенклатура,
	|	ТоварыОрганизаций.Характеристика КАК Характеристика,
	|	ТоварыОрганизаций.Поставщик КАК Поставщик,
	|	ТоварыОрганизаций.Договор КАК Договор,
	|	ТоварыОрганизаций.НомерГТД КАК НомерГТД,
	|	ТоварыОрганизаций.Количество КАК Количество,
	|	ТоварыОрганизаций.НомерСтрокиДокумента КАК НомерСтрокиДокумента
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
	|ГДЕ
	|	ТоварыОрганизаций.Регистратор = &Ссылка
	|	И (ТоварыОрганизаций.Договор <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ИЛИ ТоварыОрганизаций.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка))";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПоОтложеннымЧекам()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.Дата КАК Дата
	|ПОМЕСТИТЬ ЧекиККМ
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.КассаККМ = &КассаККМ
	|	И ЧекККМ.Ссылка В(ВЫБРАТЬ ТаблицаЧеков.Ссылка ИЗ втТаблицаЧеков КАК ТаблицаЧеков)
	|	И ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекиККМ.Ссылка КАК ОтложенныйЧек
	|ИЗ
	|	ЧекиККМ КАК ЧекиККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.КоличествоДнейХраненияОтложенныхЧеков КАК КоличествоДнейХраненияОтложенныхЧеков
	|		ПО (ИСТИНА)
	|ГДЕ
	|	КоличествоДнейХраненияОтложенныхЧеков.Значение > 0
	|	И ДОБАВИТЬКДАТЕ(ЧекиККМ.Дата, ДЕНЬ, КоличествоДнейХраненияОтложенныхЧеков.Значение) < &ТекущееВремя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекиККМ.Ссылка
	|ИЗ
	|	ЧекиККМ КАК ЧекиККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.КоличествоДнейХраненияОтложенныхЧеков КАК КоличествоДнейХраненияОтложенныхЧеков
	|		ПО (ИСТИНА)
	|ГДЕ
	|	КоличествоДнейХраненияОтложенныхЧеков.Значение = 0";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПоПодаркам()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.Характеристика КАК Характеристика,
	|	СУММА(ВЫБОР
	|			КОГДА Док.Ссылка.ВидОперации = &ВидОперацииПродажа
	|				ТОГДА Док.Количество
	|			ИНАЧЕ -1 * Док.Количество
	|		КОНЕЦ) КАК Количество,
	|	Док.Склад КАК Склад,
	|	Док.Цена КАК Цена,
	|	СУММА(ВЫБОР
	|			КОГДА Док.Ссылка.ВидОперации = &ВидОперацииПродажа
	|				ТОГДА Док.Сумма
	|			ИНАЧЕ -1 * Док.Сумма
	|		КОНЕЦ) КАК Сумма,
	|	Док.Упаковка КАК Упаковка,
	|	СУММА(ВЫБОР
	|			КОГДА Док.Ссылка.ВидОперации = &ВидОперацииПродажа
	|				ТОГДА Док.КоличествоУпаковок
	|			ИНАЧЕ -1 * Док.КоличествоУпаковок
	|		КОНЕЦ) КАК КоличествоУпаковок,
	|	Док.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Док.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	Док.Справка2 КАК Справка2
	|ИЗ
	|	Документ.ЧекККМ.Подарки КАК Док
	|ГДЕ
	|	Док.Ссылка.КассаККМ = &КассаККМ
	|	И НЕ Док.Ссылка.ОперацияСДенежнымиСредствами
	|	И Док.Ссылка.Проведен
	|	И Док.Ссылка В(ВЫБРАТЬ Ссылка ИЗ втТаблицаЧеков)
	|	И НЕ Док.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
	|	И НЕ Док.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
	|	И НЕ Док.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.Характеристика,
	|	Док.Склад,
	|	Док.Цена,
	|	Док.Упаковка,
	|	Док.СтатусУказанияСерий,
	|	Док.ШтрихкодУпаковки,
	|	Док.Справка2
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА Док.Ссылка.ВидОперации = &ВидОперацииПродажа
	|				ТОГДА Док.Количество
	|			ИНАЧЕ -1 * Док.Количество
	|		КОНЕЦ) <> 0
	|ИТОГИ ПО
	|	Склад";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПоСериямПодарков()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.ВидОперации КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА ЧекККМ.ВидОперации = &ВидОперацииПродажа
	|			ТОГДА 1
	|		ИНАЧЕ -1
	|	КОНЕЦ КАК КоэффициентОперации
	|ПОМЕСТИТЬ ТаблицаЧеков
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.КассаККМ = &КассаККМ
	|	И ЧекККМ.Проведен
	|	И ЧекККМ.Ссылка В(ВЫБРАТЬ ТаблицаЧеков.Ссылка ИЗ втТаблицаЧеков КАК ТаблицаЧеков)
	|	И НЕ ЧекККМ.ОперацияСДенежнымиСредствами
	|	И НЕ ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
	|	И НЕ ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
	|	И НЕ ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Док.Серия,
	|	Док.Номенклатура,
	|	Док.Характеристика,
	|	СУММА(Док.Количество * ТаблицаЧеков.КоэффициентОперации) КАК Количество
	|ИЗ
	|	Документ.ЧекККМ.СерииПодарков КАК Док
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЧеков КАК ТаблицаЧеков
	|		ПО Док.Ссылка = ТаблицаЧеков.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Серия,
	|	Док.Номенклатура,
	|	Док.Характеристика
	|	
	|ИМЕЮЩИЕ
	|	СУММА(Док.Количество * ТаблицаЧеков.КоэффициентОперации) <> 0
	|;
	|//////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаЧеков";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДокументыНаККМ()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументыНаККМ.Ссылка КАК Ссылка
	|ИЗ
	|	втДокументыНаККМ КАК ДокументыНаККМ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗаполнениеПоЧекамККМ

Процедура ВыполнитьЗаполнениеПоЧекамККМ(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Ссылка КАК Ссылка,
	|	ОтчетОРозничныхПродажах.Проведен КАК Проведен
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОтчетОРозничныхПродажахОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ОписаниеОшибки = "";
		
		Документы.ОтчетОРозничныхПродажах.ЗаполнитьОтчетОРозничныхПродажахПоДаннымВЧеках(ОтчетОРозничныхПродажахОбъект);
		
		Если ОтчетОРозничныхПродажахОбъект.Проведен Тогда
			Попытка
				ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				
				ТекстОшибки = ОписаниеОшибки();
				Если СтрНайти(ТекстОшибки, НСтр("ru = 'Не удалось провести'")) > 0 Тогда
					ОписаниеОшибки = НСтр("ru = 'Не удалось провести '") + ОтчетОРозничныхПродажахОбъект;
				Иначе
					ОписаниеОшибки = НСтр(
						"ru = 'При проведении отчета о розничных продажах произошла ошибка.'")
						+ Символы.ПС + ОписаниеОшибки();
				КонецЕсли;
				
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки, ОтчетОРозничныхПродажахОбъект);
				
			КонецПопытки;
		Иначе
			Попытка
				ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				
				ОписаниеОшибки = НСтр(
					"ru = 'При записи отчета о розничных продажах произошла ошибка.'")
					+ Символы.ПС + ОписаниеОшибки();
					
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки, ОтчетОРозничныхПродажахОбъект);
				
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 

#КонецОбласти

Функция КассаФискализацииРаспределяемойНоменклатуры(Магазин, РабочееМесто, Номенклатура, Склад) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РаспределениеНоменклатуры.РабочееМесто = &РабочееМесто
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет,
	|	РаспределениеНоменклатуры.Организация КАК Организация
	|ПОМЕСТИТЬ втОрганизации
	|ИЗ
	|	РегистрСведений.РаспределениеНоменклатуры КАК РаспределениеНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО РаспределениеНоменклатуры.ТоварнаяГруппа = Номенклатура.ТоварнаяГруппа
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|	И &УсловиеМагазинРаспределения
	|	И (РаспределениеНоменклатуры.РабочееМесто = &РабочееМесто
	|			ИЛИ РаспределениеНоменклатуры.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	Склады.Организация
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	&УсловиеСклад
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4,
	|	Магазины.СкладПродажи.Организация
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	&УсловиеМагазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КассыККМ.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ИЗ
	|	втОрганизации КАК втОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КассыККМ КАК КассыККМ
	|		ПО втОрганизации.Организация = КассыККМ.Владелец
	|			И (КассыККМ.РабочееМесто = &РабочееМесто)
	|			И (ЕСТЬNULL(КассыККМ.ПодключаемоеОборудование.ТипОборудования, ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККТ))
	|
	|УПОРЯДОЧИТЬ ПО
	|	втОрганизации.Приоритет";
	
	УсловиеМагазинРаспределения = "ЛОЖЬ";
	УсловиеМагазин = "ЛОЖЬ";
	УсловиеСклад = "ЛОЖЬ";
	Если ЗначениеЗаполнено(Магазин) Тогда
		Запрос.УстановитьПараметр("Магазин", Магазин);
		УсловиеМагазинРаспределения = "РаспределениеНоменклатуры.Магазин = &Магазин";
		УсловиеМагазин = "Магазины.Ссылка = &Магазин";
	КонецЕсли;
	Если ЗначениеЗаполнено(Склад) Тогда
		Запрос.УстановитьПараметр("Склад", Склад);
		УсловиеСклад = "Склады.Ссылка = &Склад";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеМагазинРаспределения", УсловиеМагазинРаспределения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеМагазин", УсловиеМагазин);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСклад", УсловиеСклад);
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПодключаемоеОборудование = Неопределено;
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ПодключаемоеОборудование)
			И МенеджерОборудованияВызовСервера.ФискальноеУстройствоПоддерживаетПроверкуКодовМаркировки(Выборка.ПодключаемоеОборудование) Тогда
			ПодключаемоеОборудование = Выборка.ПодключаемоеОборудование;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодключаемоеОборудование;
	
КонецФункции

#КонецОбласти

