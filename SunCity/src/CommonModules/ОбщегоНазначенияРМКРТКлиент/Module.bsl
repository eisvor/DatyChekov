
///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ВидыОпераций

// Определяет является ли полученный вид операции операцией продажи.
//
// Параметры:
//  ЭтоОперацияПродажи - Булево - признак, который говорит, что текущий вид операции это продажа.
//  ВидОперации - ОпределяемыйТип.ВидОперацииРМК - текущий вид операции.
//
Процедура ОпределитьВидОперацииПродажа(ЭтоОперацияПродажи, ВидОперации) Экспорт
	
	Если ВидОперации = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
		ЭтоОперацияПродажи = Истина;
	Иначе
		ЭтоОперацияПродажи = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Определяет является ли полученный вид операции операцией возврата продажи.
//
// Параметры:
//  ЭтоОперацияВозвратПродажи - Булево - признак, который говорит, что текущий вид операции это возврат продажи.
//  ВидОперации - ОпределяемыйТип.ВидОперацииРМК - текущий вид операции.
//
Процедура ОпределитьВидОперацииВозвратПродажи(ЭтоОперацияВозвратПродажи, ВидОперации) Экспорт
	
	Если ВидОперации = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		ЭтоОперацияВозвратПродажи = Истина;
	Иначе
		ЭтоОперацияВозвратПродажи = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Определяет является ли полученный вид операции операцией скупка.
//
// Параметры:
//  ЭтоОперацияСкупка - Булево - признак, который говорит, что текущий вид операции это скупка.
//  ВидОперации - ОпределяемыйТип.ВидОперацииРМК - текущий вид операции.
//
Процедура ОпределитьВидОперацииСкупка(ЭтоОперацияСкупка, ВидОперации) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Определяет является ли полученный вид операции операцией возврат скупки.
//
// Параметры:
//  ЭтоОперацияВозвратСкупки - Булево - признак, который говорит, что текущий вид операции это возврат скупки.
//  ВидОперации - ОпределяемыйТип.ВидОперацииРМК - текущий вид операции.
//
Процедура ОпределитьВидОперацииВозвратСкупки(ЭтоОперацияВозвратСкупки, ВидОперации) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ВидыОплат

// Определяет является ли полученный вид оплаты наличной формой оплаты.
//
// Параметры:
//  ЭтоОплатаНаличными - Булево - признак, который говорит, что текущий вид оплаты это наличные.
//  ВидОплаты - ОпределяемыйТип.ВидОплатыРМК - вид оплаты.
//
Процедура ОпределитьВидОплатыНаличные(ЭтоОплатаНаличными, ВидОплаты) Экспорт
	
	Если ВидОплаты = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.Наличные") Тогда
		ЭтоОплатаНаличными = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Определяет является ли полученный вид оплаты оплатой платежной картой.
//
// Параметры:
//  ЭтоОплатаПлатежнойКартой - Булево - признак, который говорит, что текущий вид оплаты это платежная карта.
//  ВидОплаты - ОпределяемыйТип.ВидОплатыРМК - вид оплаты.
//
Процедура ОпределитьВидОплатыПлатежнаяКарта(ЭтоОплатаПлатежнойКартой, ВидОплаты) Экспорт
	
	ЭтоОплатаПлатежнойКартой = ОбщегоНазначенияРМКРТВызовСервера.ЭтоОплатаПлатежнойКартой(ВидОплаты);
	
КонецПроцедуры

// Определяет является ли полученный вид оплаты зачетом аванса.
//
// Параметры:
//  ЭтоОплатаЗачетАванса - Булево - признак, который говорит, что текущий вид оплаты это зачет аванса.
//  ВидОплаты - ОпределяемыйТип.ВидОплатыРМК - вид оплаты.
//
Процедура ОпределитьВидОплатыЗачетАванса(ЭтоОплатаЗачетАванса, ВидОплаты) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Определяет является ли полученный вид оплаты безналичными.
//
// Параметры:
//  ЭтоОплатаБезналичные - Булево - признак, который говорит, что текущий вид оплаты это безналичные.
//  ВидОплаты - ОпределяемыйТип.ВидОплатыРМК - вид оплаты.
//
Процедура ОпределитьВидОплатыБезналичные(ЭтоОплатаБезналичные, ВидОплаты) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Определяет является ли полученный вид оплаты - оплатой в рассрочку.
//
// Параметры:
//  ЭтоОплатаВРассрочку - Булево - признак, который говорит, что текущий вид оплаты это оплата в рассрочку.
//  ВидОплаты - ОпределяемыйТип.ВидОплатыРМК - вид оплаты.
//
Процедура ОпределитьВидОплатыВРассрочку(ЭтоОплатаВРассрочку, ВидОплаты) Экспорт
	
	Если ВидОплаты = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.ОплатаВрассрочку") Тогда
		ЭтоОплатаВРассрочку = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Определяет является ли полученный вид оплаты - оплатой встречным предоставлением.
//
// Параметры:
//  ЭтоОплатаВстречнымПредоставлением - Булево - признак, который говорит, что текущий вид оплаты это оплата встречным предоставлением.
//  ВидОплаты - ОпределяемыйТип.ВидОплатыРМК - вид оплаты.
//
Процедура ОпределитьВидОплатыВстречнымПредоставлением(ЭтоОплатаВстречнымПредоставлением, ВидОплаты) Экспорт
	
	Если ВидОплаты = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.ВстречноеПредоставление") Тогда
		ЭтоОплатаВстречнымПредоставлением = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет полученный параметр значением вида оплаты - платежная карта для НСПК.
//
// Параметры:
//  ВидОплатыПлатежнаяКартаНСПК - Неопределено - значение для заполнения.
//
Процедура ОпределитьВидОплатыПлатежнаяКартаНСПК(ВидОплатыПлатежнаяКартаНСПК) Экспорт
	
	ЭлектронныеСертификатыНСПКРТ.ЗаполнитьВидОплатыПлатежнаяКартаНСПК(ВидОплатыПлатежнаяКартаНСПК);
	
КонецПроцедуры

// Определяет является ли полученный вид оплаты - оплатой кредитом.
//
// Параметры:
//  ЭтоОплатаКредитом - Булево - признак, который говорит, что текущий вид оплаты это оплата кредитом.
//  ВидОплаты - ОпределяемыйТип.ВидОплатыРМК - вид оплаты.
//
Процедура ОпределитьВидОплатыКредитом(ЭтоОплатаКредитом, ВидОплаты) Экспорт
	
	ТипОплаты = ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(ВидОплаты, "ТипОплаты");
	Если ТипОплаты = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ТипыОплатЧекаККМ.БанковскийКредит") Тогда
		ЭтоОплатаКредитом = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Определяет является ли полученный вид оплаты - оплатой подарочным сертификатом.
//
// Параметры:
//  ЭтоОплатаПодарочнымСертификатом - Булево - признак, который говорит, что текущий вид оплаты это подарочным сертификатом.
//  ВидОплаты - ОпределяемыйТип.ВидОплатыРМК - вид оплаты.
//
Процедура ОпределитьВидОплатыПодарочнымСертификатом(ЭтоОплатаПодарочнымСертификатом, ВидОплаты) Экспорт
	
	Если ВидОплаты = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом") Тогда
		ЭтоОплатаПодарочнымСертификатом = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТипыЗначений

// Процедура определяет значение типа номенклатуры "Товар".
//
// Параметры:
//  ТипНоменклатуры - ОпределяемыйТип.ТипыНоменклатурыРМК, Неопределено - значение типа номенклатуры.
//
Процедура ОпределитьТипНоменклатурыТовар(ТипНоменклатуры) Экспорт
	
	ТипНоменклатуры = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
		"Перечисление.ТипыНоменклатуры.Товар");
	
КонецПроцедуры

// Процедура определяет значение типа номенклатуры "Подарочный сертификат".
//
// Параметры:
//  ТипНоменклатуры - ОпределяемыйТип.ТипыНоменклатурыРМК, Неопределено - значение типа номенклатуры.
//
Процедура ОпределитьТипНоменклатурыПодарочныйСертификат(ТипНоменклатуры) Экспорт
	
	ТипНоменклатуры = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
		"Перечисление.ТипыНоменклатуры.ПодарочныйСертификат");
	
КонецПроцедуры

// Процедура определяет значение особенности учета номенклатуры "Алкоголь".
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК, Неопределено - значение особенности учета номенклатуры.
//
Процедура ОпределитьОсобенностьУчетаАлкоголь(ОсобенностьУчета) Экспорт
	
	ОсобенностьУчета = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
		"Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция");
	
КонецПроцедуры

// Процедура определяет значение особенности учета номенклатуры "ГИСМ".
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК, Неопределено - значение особенности учета номенклатуры.
//
Процедура ОпределитьОсобенностьУчетаГИСМ(ОсобенностьУчета) Экспорт
	
	ОсобенностьУчета = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
		"Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха");
	
КонецПроцедуры

// Процедура определяет значение особенности учета номенклатуры "Табак".
//
// Параметры:
//  ОсобенностьУчета - ОпределяемыйТип.ОсобенностиУчетаНоменклатурыРМК, Неопределено - значение особенности учета номенклатуры.
//
Процедура ОпределитьОсобенностьУчетаТабак(ОсобенностьУчета) Экспорт
	
	ОсобенностьУчета = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
		"Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция");
	
КонецПроцедуры

#КонецОбласти

#Область Печать_товарного_чека_ПрограммныйИнтерфейс

Процедура СформироватьПечатнуюФормуТоварногоЧека(ЧекККМ, Форма) Экспорт
	
	ИмяМенеджераПечати = "Документ.ЧекККМ";
	ИменаМакетов = "ТоварныйЧек";
	
	МассивЧековККМ = Новый Массив;
	МассивЧековККМ.Добавить(ЧекККМ);
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("Представление", НСтр("ru='Товарный чек'"));
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(ИмяМенеджераПечати, ИменаМакетов, МассивЧековККМ, Форма, ПараметрыПечати);
	
КонецПроцедуры

Процедура СформироватьПечатнуюФормуЗаказаПокупателя(Заказ, Форма) Экспорт
	
	ИмяМенеджераПечати = "Документ.ЗаказПокупателя";
	ИменаМакетов = "Заказ";
	
	МассивЗаказов = Новый Массив;
	МассивЗаказов.Добавить(Заказ);
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("Представление", НСтр("ru='Заказ покупателя'"));
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(ИмяМенеджераПечати, ИменаМакетов, МассивЗаказов, Форма, ПараметрыПечати);
	
КонецПроцедуры

#КонецОбласти

#Область ПлиточныйИнтерфейсПодбораТоваров

// Вызывает интерфейс для подбора номенклатуры
//
// Параметры:
//  ЭтотОбъект - ФормаКлиентскогоПриложения - форма элемента структуры плиточного интерфейса.
//  Параметры - Структура - параметры открытия формы.
//  ОповещениеОВыборе - ОписаниеОповещения - оповещение об обработке выбора.
//
Процедура ОткрытьИнтерфейсПодбораНоменклатуры(ЭтотОбъект, Параметры, ОповещениеОВыборе) Экспорт
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаПодбораВПалитру", Параметры, ЭтотОбъект,
		ЭтотОбъект.УникальныйИдентификатор,,,ОповещениеОВыборе);
КонецПроцедуры

// Переопределяет заполнение параметров открытия формы подбора товаров в состав палитры.
//
// Параметры:
//  Параметры - Структура - параметры открытия формы.
//
Процедура ЗаполнитьПараметрыОткрытияФормыПодбораВСоставПалитрыТоваров(Параметры) Экспорт
	
	Параметры.Вставить("ЗакрыватьПриВыборе", Ложь);
	Параметры.Вставить("МножественныйВыбор", Истина);
	
КонецПроцедуры

#КонецОбласти

// Заполняет параметры для передачи в ОбщаяФорма.ПечатьДокументов
//
// Параметры:
//  ЧекККМ - ОпределяемыйТип.ЧекККМРМК.
//  ПараметрыОткрытия - Структура:
//   * ИмяМенеджераПечати - Строка.
//   * ИменаМакетов - Строка.
//   * ПараметрКоманды - Массив из ОпределяемыйТип.ЧекККМРМК.
//   * ПараметрыПечати - Строка.
//  СтандартнаяОбработка - Булево.
//
Процедура ЗаполнитьПараметрыОткрытияФормыПечатиДокументовДляТоварногоЧека(ЧекККМ, ПараметрыОткрытия,
	СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	МассивЧеков = Новый Массив;
	МассивЧеков.Добавить(ЧекККМ);

	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("Представление", "Товарный чек");
	
	ПараметрыОткрытия.ИмяМенеджераПечати = "Документ.ЧекККМ";
	ПараметрыОткрытия.ИменаМакетов		 = "ТоварныйЧек";
	ПараметрыОткрытия.ПараметрКоманды	 = МассивЧеков;
	ПараметрыОткрытия.ПараметрыПечати	 = ПараметрыПечати;
	
КонецПроцедуры

// Процедура получает и заполняет рабочее место в параметр сеанса и на форме.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения.
//
Процедура ЗаполнитьРабочееМесто(Форма) Экспорт
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		Форма.РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет таблицу оплат на форме рабочего места кассира.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения.
//
Процедура ЗаполнитьТаблицуОплат(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	Объект.Оплата.Очистить();
	
	Если Не Форма.СуммаОплаченоЗачетАванса = 0 Тогда
		
		МассивОплатЗачетАванса = Объект.Оплата.НайтиСтроки(
			Новый Структура("ВидОплаты",ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.ЗачетАванса")));
			
		Если МассивОплатЗачетАванса.Количество() = 0 Тогда
			
			НоваяОплата = Объект.Оплата.Добавить();
			НоваяОплата.ВидОплаты = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.ЗачетАванса");
			НоваяОплата.Сумма = Форма.СуммаОплаченоЗачетАванса;
			
		Иначе
			МассивОплатЗачетАванса[0].Сумма = Форма.СуммаОплаченоЗачетАванса;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Форма.СуммаОплаченоВРассрочку = 0 Тогда
		
		МассивОплатРассрочка = Объект.Оплата.НайтиСтроки(
			Новый Структура("ВидОплаты",ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.ОплатаВрассрочку")));
			
		Если МассивОплатРассрочка.Количество() = 0 Тогда
			
			НоваяОплата = Объект.Оплата.Добавить();
			НоваяОплата.ВидОплаты = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.ОплатаВрассрочку");
			НоваяОплата.Сумма = Форма.СуммаОплаченоВРассрочку;
			
		Иначе
			МассивОплатРассрочка[0].Сумма = Форма.СуммаОплаченоВРассрочку;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Форма.СуммаОплаченоБезнал = 0 Тогда
		
		МассивОплатБезнал = Объект.Оплата.НайтиСтроки(
			Новый Структура("ВидОплаты",ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.БанковскийПлатеж")));
			
		Если МассивОплатБезнал.Количество() = 0 Тогда
			
			НоваяОплата = Объект.Оплата.Добавить();
			НоваяОплата.ВидОплаты = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.БанковскийПлатеж");
			НоваяОплата.Сумма = Форма.СуммаОплаченоБезнал;
			
		Иначе
			МассивОплатБезнал[0].Сумма = Форма.СуммаОплаченоБезнал;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Форма.СуммаОплаченоКредитом = 0 Тогда
		Если Не Форма.ПараметрыОплатыКредитом = Неопределено Тогда
			
			ВидОплатыКредитом = Неопределено;
			Форма.ПараметрыОплатыКредитом.Свойство("ВидОплатыКредитом", ВидОплатыКредитом);
			
			Если Не ВидОплатыКредитом = Неопределено Тогда
				
				МассивОплатКредитом = Объект.Оплата.НайтиСтроки(Новый Структура("ВидОплаты", ВидОплатыКредитом));
				
				Если МассивОплатКредитом.Количество() = 0 Тогда
					
					НоваяОплата = Объект.Оплата.Добавить();
					НоваяОплата.ВидОплаты = ВидОплатыКредитом;
					НоваяОплата.Сумма = Форма.СуммаОплаченоКредитом;
					
				Иначе
					МассивОплатРассрочка[0].Сумма = Форма.СуммаОплаченоКредитом;
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не Форма.СуммаОплаченоНал = 0 Тогда
		
		МассивОплатНаличные = Объект.Оплата.НайтиСтроки(
			Новый Структура("ВидОплаты",ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.Наличные")));
			
		Если МассивОплатНаличные.Количество() = 0 Тогда
			
			НоваяОплата = Объект.Оплата.Добавить();
			НоваяОплата.ВидОплаты = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.Наличные");
			НоваяОплата.Сумма = Форма.СуммаОплаченоНал;
			
		Иначе
			МассивОплатНаличные[0].Сумма = Форма.СуммаОплаченоНал;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Форма.СуммаОплаченоСертификатами = 0 Тогда 
		
		ВидОплаты = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом");
		МассивОплатПС = Объект.Оплата.НайтиСтроки(
							Новый Структура("ВидОплаты", ВидОплаты));
		
		Если МассивОплатПС.Количество() <> 0 Тогда
			Для Каждого СтрокаОплаты Из МассивОплатПС Цикл
				Объект.Оплата.Удалить(СтрокаОплаты);
			КонецЦикла;
		КонецЕсли;
		
		Организация = Форма.ВыбраннаяОрганизация;
		СистемаНалогообложения = Форма.ВыбраннаяСистемаНалогообложения;
		
		ОтборПоСНО = Новый Структура("Организация, СистемаНалогообложения", Организация, СистемаНалогообложения);
		СтрокиОплатПС = Форма.ТаблицаПодарочныхСертификатов.НайтиСтроки(ОтборПоСНО);
		
		Для каждого ОплатаСертификатом Из СтрокиОплатПС Цикл
			НоваяОплата = Объект.Оплата.Добавить();
			НоваяОплата.ВидОплаты = ВидОплаты;
			НоваяОплата.Сумма = ОплатаСертификатом.СуммаСертификата;
			НоваяОплата.НомерСертификата = ОплатаСертификатом.НомерСертификата;
			НоваяОплата.ПодарочныйСертификат = ОплатаСертификатом.ПодарочныйСертификат;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не Форма.СуммаОплаченоБН = 0 Тогда
		
		ВидОплаты = Неопределено;
		
		Если Форма.ВыбранныйВидОплаты = "ОплатаКартой" Тогда
			ВидОплаты = Форма.ТаблицаПлатежныхКарт[0].ВидОплаты;
		Иначе
			ЭтоПродажа = Истина;
			ОпределитьВидОперацииПродажа(ЭтоПродажа, Объект.ВидОперации);
			Если Форма.ЭтоЗаменаТоваров ИЛИ ЭтоПродажа Или Не ЗначениеЗаполнено(Форма.ЧекККМПродажа) Тогда
				ИмяВидаОплаты = Форма.ВыбранныйВидОплаты;
				СтруктураПоиска = Новый Структура("ИмяКоманды", ИмяВидаОплаты);
				МассивВидовОплат = Форма.ТаблицаПлатежныхКарт.НайтиСтроки(СтруктураПоиска);
				Если МассивВидовОплат.Количество() > 0 Тогда
					ВидОплаты = МассивВидовОплат[0].ВидОплаты;
				КонецЕсли;
			Иначе
				ВидОплаты = ОбщегоНазначенияРМКРТВызовСервера.ВидОплатыПриПродаже(Форма.ЧекККМПродажа);
			КонецЕсли;
		КонецЕсли;
		
		Если ВидОплаты = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		МассивОплатПоКарте = Объект.Оплата.НайтиСтроки(Новый Структура("ВидОплаты", ВидОплаты));
		Если МассивОплатПоКарте.Количество() > 0 Тогда
			СтрокаОплатыПоКарте = МассивОплатПоКарте[0];
			СтрокаОплатыПоКарте.Сумма = Форма.СуммаОплаченоБН;
		Иначе
			СтрокаОплатыПоКарте = Объект.Оплата.Добавить();
			СтрокаОплатыПоКарте.ВидОплаты = ВидОплаты;
			СтрокаОплатыПоКарте.Сумма = Форма.СуммаОплаченоБН;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.ЧекККМПродажа) Тогда
			РеквизитыОперации = ОбщегоНазначенияРМКВызовСервера.РеквизитыЭквайринговойОперацииПродажи(Форма.ЧекККМПродажа);
			ЗаполнитьЗначенияСвойств(СтрокаОплатыПоКарте, РеквизитыОперации);
		КонецЕсли;
			
	КонецЕсли;
	
	Если Не (Форма.СуммаОплаченоСБП = 0 И Форма.СуммаОплаченоЮКасса = 0)
		И ЗначениеЗаполнено(Форма.ПлатежнаяСистема_ВидОплаты) Тогда 
		
		МассивОплатПС = Объект.Оплата.НайтиСтроки(
			Новый Структура("ВидОплаты", Форма.ПлатежнаяСистема_ВидОплаты));
			
		Если МассивОплатПС.Количество() = 0 Тогда
			
			НоваяОплата = Объект.Оплата.Добавить();
			
		Иначе
			НоваяОплата = МассивОплатПС[0];
		КонецЕсли;
		
		НоваяОплата.ИдентификаторПлатежнойСистемы   = Форма.ПлатежнаяСистема_ИдентификаторПС;
		НоваяОплата.ВидОплаты 						= Форма.ПлатежнаяСистема_ВидОплаты;
		НоваяОплата.Сумма 							= ?(Форма.СуммаОплаченоСБП = 0, Форма.СуммаОплаченоЮКасса, Форма.СуммаОплаченоСБП);
		НоваяОплата.СсылочныйНомер 					= Форма.ПлатежнаяСистема_НоваяЗаявка.СсылочныйНомер;
		
	КонецЕсли;
	
	Если Не Форма.СуммаОплаченоСертификатамиНСПК = 0 Тогда
		
		ВидОплатыНСПК = Форма.ВидОплатыНСПК;
		МассивОплатНСПК = Объект.Оплата.НайтиСтроки(
			Новый Структура("ВидОплаты", ВидОплатыНСПК));
		
		Если МассивОплатНСПК.Количество() = 0 Тогда
			НоваяОплата = Объект.Оплата.Добавить();
		Иначе
			НоваяОплата = МассивОплатНСПК[0];
		КонецЕсли;
		НоваяОплата.ВидОплаты = ВидОплатыНСПК;
		НоваяОплата.Сумма = Форма.СуммаОплаченоСертификатамиНСПК;
		
	КонецЕсли;
	
	Если Не Форма.СуммаОплаченоБонусами = 0 Тогда
		
		ВидОплатыБонусами = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой");
		МассивОплатБонусами = Объект.Оплата.НайтиСтроки(
			Новый Структура("ВидОплаты", ВидОплатыБонусами));
		
		Если МассивОплатБонусами.Количество() = 0 Тогда
			НоваяОплата = Объект.Оплата.Добавить();
		Иначе
			НоваяОплата = МассивОплатБонусами[0];
		КонецЕсли;
		НоваяОплата.ВидОплаты = ВидОплатыБонусами;
		НоваяОплата.Сумма = Форма.СуммаОплаченоБонусами;
		
	КонецЕсли;
	
	Если Не Форма.СуммаТоваровКЗамене = 0 Тогда
		
		ВидОплатыВстречноеПредоставление = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.ВстречноеПредоставление");
		МассивОплатВстречноеПредоставление = Объект.Оплата.НайтиСтроки(
			Новый Структура("ВидОплаты", ВидОплатыВстречноеПредоставление));
			
		Если МассивОплатВстречноеПредоставление.Количество() = 0 Тогда
			
			НоваяОплата = Объект.Оплата.Добавить();
			НоваяОплата.ВидОплаты = ВидОплатыВстречноеПредоставление;
			НоваяОплата.Сумма = Форма.СуммаТоваровКЗамене;
			
		Иначе
			МассивОплатВстречноеПредоставление[0].Сумма = Форма.СуммаТоваровКЗамене;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура сохраняет выбранный вид платежной карты
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ИмяКоманды - Строка - наименование переданной команды вида оплаты.
//
Процедура ЗаполнитьВыбранныйВидОплаты(Форма, ИмяКоманды) Экспорт
	
	ЗначениеКомандыПоУмолчанию = "оплатакартой";
	ЗаполненаТаблицаПлатежныхКарт = Форма.ТаблицаПлатежныхКарт.Количество();
	
	Если НРег(ИмяКоманды) = ЗначениеКомандыПоУмолчанию
		И ЗаполненаТаблицаПлатежныхКарт
		И ЗначениеЗаполнено(Форма.ТаблицаПлатежныхКарт[0].ИмяКоманды) Тогда
			Форма.ВыбранныйВидОплаты = Форма.ТаблицаПлатежныхКарт[0].ИмяКоманды;
	Иначе
		Форма.ВыбранныйВидОплаты = ИмяКоманды;
	КонецЕсли;
	
КонецПроцедуры

// По переданным параметрам вида операции определяет текущий вид операции.
//
// Параметры:
//  ПараметрыВидаОперации - Структура - см.ОбщегоНазначенияРМККлиентСервер.ПараметрыВидаОперации().
//
Процедура ЗаполнитьВидОперацииЧекаККМ(ПараметрыВидаОперации) Экспорт
	
	Если ПараметрыВидаОперации.ЭтоВозврат Тогда
		ВидОперации = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ВидыОперацийЧекККМ.Возврат");
	Иначе
		ВидОперации = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ВидыОперацийЧекККМ.Продажа");
	КонецЕсли;
	
	ПараметрыВидаОперации.ВидОперации = ВидОперации;
	
КонецПроцедуры

// Процедура производит закрытие смены.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//  ЗакрытиеСменыПереопределено - Булево - признак того, что используется прикладной механизм закрытия смены. Значение по умолчанию Ложь.
//
Процедура ЗакрытьСмену(Форма, ЗакрытиеСменыПереопределено) Экспорт
	
	ЗакрытиеСменыПереопределено = Истина;
	
	КассаККМ = Форма.Объект.КассаККМ;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КассаККМ", КассаККМ);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуПроверкиНепробитыхЧеков",
		ОбщегоНазначенияРМКРТКлиент,
		ДополнительныеПараметры);
		
	ПройденаПроверкаНепробитыхЧеков = РозничныеПродажиКлиент.ПройденаПроверкаНепробитыхЧеков(КассаККМ, ОбработчикОповещения);
	
	Если ПройденаПроверкаНепробитыхЧеков Тогда
		ПродолжитьОткрытиеОбработкиЗакрытияКассовойСмены(КассаККМ);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет данные текущих эквайринговых терминалов.
// Поиск терминалов просходит в реквизите "ТаблицаТерминалы" формы рабочего места кассира.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  Результат - Массив - массив для заполнения данными текущих терминалов.
//
// Возвращаемое значение:
//  Массив - данные текущих эквайринговых терминалов.
//
Процедура ЗаполнитьДанныеТекущихЭквайринговыхТерминалов(Форма, Результат) Экспорт
	
	ИмяВидаОплаты = Форма.ВыбранныйВидОплаты;
	ВидОплаты = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.ПустаяСсылка");
	
	ПараметрыПоискаВидаОплаты = Новый Структура;
	ПараметрыПоискаВидаОплаты.Вставить("ИмяКоманды", ИмяВидаОплаты);
	
	МассивВидовОплат = Форма.ТаблицаПлатежныхКарт.НайтиСтроки(ПараметрыПоискаВидаОплаты);
	
	Если МассивВидовОплат.Количество() > 0 Тогда
		ВидОплаты = МассивВидовОплат[0].ВидОплаты;
	Иначе
		ВидОплаты = Форма.ВыбранныйВидОплаты;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ВидОплаты, Организация",
		ВидОплаты, Форма.ВыбраннаяОрганизация);
	
	Результат = Форма.ТаблицаТерминалы.НайтиСтроки(СтруктураПоиска);
	
КонецПроцедуры

// Заполняет данные текущего эквайрингового терминала.
// Поиск по реквизиту формы РМК - "ТаблицаТерминалы".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ДанныеЭТ - Массив - данные текущего эквайрингового терминала.
//
Процедура ЗаполнитьДанныеТекущегоЭквайринговогоТерминала(Форма, ДанныеЭТ) Экспорт
	
	ЭтоПродажа = Истина;
	ОпределитьВидОперацииПродажа(ЭтоПродажа, Форма.Объект.ВидОперации);
	Если ЭтоПродажа Тогда
		
		ВидОплаты = Неопределено;
		Если Форма.ТаблицаПлатежныхКарт.Количество() = 1 Тогда
			ВидОплаты = Форма.ТаблицаПлатежныхКарт[0].ВидОплаты;
		ИначеЕсли Форма.ТаблицаПлатежныхКарт.Количество() > 1 Тогда
			
			ПараметрыПоискаВидаОплаты = Новый Структура;
			ПараметрыПоискаВидаОплаты.Вставить("ИмяКоманды", Форма.ВыбранныйВидОплаты);
			МассивВидовОплат = Форма.ТаблицаПлатежныхКарт.НайтиСтроки(ПараметрыПоискаВидаОплаты);
			
			Если МассивВидовОплат.Количество() > 0 Тогда
				ВидОплаты = МассивВидовОплат[0].ВидОплаты;
			КонецЕсли;
		КонецЕсли;
		
		Если ВидОплаты = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыПоискаЭТ = Новый Структура;
		ПараметрыПоискаЭТ.Вставить("ВидОплаты", ВидОплаты);
		МассивЭТ = Форма.ТаблицаТерминалы.НайтиСтроки(ПараметрыПоискаЭТ);
		Если МассивЭТ.Количество() > 0 Тогда
			ДанныеЭТ = МассивЭТ[0];
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(Форма.ЧекККМПродажа) Тогда
			ВидОплаты = ОбщегоНазначенияРМКРТВызовСервера.ВидОплатыПриПродаже(Форма.ЧекККМПродажа);
			Если Не ВидОплаты = Неопределено Тогда
				МассивЭТ = Форма.ТаблицаТерминалы.НайтиСтроки(Новый Структура("ВидОплаты", ВидОплаты));
				Если МассивЭТ.Количество() > 0 Тогда
					ДанныеЭТ = МассивЭТ[0];
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			ВидОплаты = Неопределено;
			Если Форма.ТаблицаПлатежныхКарт.Количество() = 1 Тогда
				ВидОплаты = Форма.ТаблицаПлатежныхКарт[0].ВидОплаты;
			ИначеЕсли Форма.ТаблицаПлатежныхКарт.Количество() > 1 Тогда
				ПараметрыПоискаВидаОплаты = Новый Структура;
				ПараметрыПоискаВидаОплаты.Вставить("ИмяКоманды", Форма.ВыбранныйВидОплаты);
				МассивВидовОплат = Форма.ТаблицаПлатежныхКарт.НайтиСтроки(ПараметрыПоискаВидаОплаты);
				Если МассивВидовОплат.Количество() > 0 Тогда
					ВидОплаты = МассивВидовОплат[0].ВидОплаты;
				КонецЕсли;
			КонецЕсли;
			
			Если ВидОплаты = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ПараметрыПоискаЭТ = Новый Структура;
			ПараметрыПоискаЭТ.Вставить("ВидОплаты", ВидОплаты);
			МассивЭТ = Форма.ТаблицаТерминалы.НайтиСтроки(ПараметрыПоискаЭТ);
			Если МассивЭТ.Количество() > 0 Тогда
				ДанныеЭТ = МассивЭТ[0];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет данные текущих эквайринговых терминалов.
// Поиск терминалов просходит в реквизите "ТаблицаТерминалы" формы рабочего места кассира.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  Результат - Массив - массив для заполнения данными текущих терминалов.
//
// Возвращаемое значение:
//  Массив - данные текущих эквайринговых терминалов.
//
Процедура ЗаполнитьДанныеОплатКартойПоЧеку(Форма, Результат) Экспорт
	
	Для Каждого Оплата ИЗ Форма.Объект.Оплата Цикл
		Если ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(Оплата.ВидОплаты, "ТипОплаты") = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта") Тогда
			Результат.Добавить(Оплата);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура производит выемку денежных средств из кассы ККМ.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ВыполнитьОперациюВыемка(Форма, ДополнительныеПараметры) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметрыВыемки = Новый Структура;
	ДополнительныеПараметрыВыемки.Вставить("ДоговорКонтрагента",
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"));
	
	ПараметрыВыполнения = ДенежныеСредстваКлиент.ПараметрыВыполненияОперацииВыемкаДенег();
	ПараметрыВыполнения.ИзымаемаяСумма = Форма.СуммаВыемка;
	ПараметрыВыполнения.КассаККМ = Объект.КассаККМ;
	ПараметрыВыполнения.УникальныйИдентификатор = Форма.УникальныйИдентификатор;
	ПараметрыВыполнения.ДополнительныеПараметры = ДополнительныеПараметрыВыемки; 
	ПараметрыВыполнения.БезВыводаСообщений = Истина;
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОперациюВыемкаЗавершение", Форма);
	
	Если ОбщегоНазначенияРМКРТВызовСервера.ВозможностьВыемкиДС(ПараметрыВыполнения, ПараметрыИнформации) Тогда
		ДенежныеСредстваКлиент.НачатьВыемкуДенег(ОписаниеОповещения, ПараметрыВыполнения);
	Иначе
		
		Форма.Доступность = Истина;
		
		РезультатВыполнения = Новый Структура;
		РезультатВыполнения.Вставить("ОписаниеОшибки", ПараметрыИнформации.ТекстИнформации);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура производит дополнительные действия при операции внесение.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ВыполнитьОперациюВнесение(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияРМКРТВызовСервера.ВозможностьВнесенияДенег(Объект.КассаККМ, Объект.Организация) Тогда
		
		РезультатВыполнения = Новый Структура;
		РезультатВыполнения.Вставить("ОписаниеОшибки", НСтр("ru = 'Нет документов по внесению денежных средств'"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОперациюВнесениеЗавершение", Форма, РезультатВыполнения);
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения);
		
		Возврат;
		
	КонецЕсли;
	
	МассивКассККМ = Новый Массив;
	МассивКассККМ.Добавить(Объект.КассаККМ);
	
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Объект.Организация);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КассыККМ", МассивКассККМ);
	ПараметрыФормы.Вставить("Организации", МассивОрганизаций);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораВнесенияДенег",
		ОбщегоНазначенияРМКРТКлиент,
		ДополнительныеПараметры);
		
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораВнесенияДенег",
		ПараметрыФормы, Форма.УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	
КонецПроцедуры

// Заполняет признак использования стандартного интерфейса внесения денежных средств.
// Если признак имеет значение Ложь, то механизм внесения необходимо описать в переопределении.
//
// Параметры:
//  Результат - Булево - признак использования стандартного интерфейса внесения.
//
Процедура ЗаполнитьПризнакСтандартныйИнтерфейсВнесения(Результат) Экспорт
	
	Результат = Ложь;
	
КонецПроцедуры

// Процедура производит выбор документа для продажи по заказу.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ВыбратьДокументЗаказПокупателя(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	МассивСтруктурОтбора = Новый Массив;
	
	СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
	СтруктураОтбора.Поле = "Ссылка.Статус";
	СтруктураОтбора.Значение =  ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.СтатусыЗаказовПокупателей.Согласован");
	СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	СтруктураОтбора.Использование = Истина;
	МассивСтруктурОтбора.Добавить(СтруктураОтбора);

	СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
	СтруктураОтбора.Поле = "Магазин";
	СтруктураОтбора.Значение = Объект.ТорговыйОбъект;
	СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	СтруктураОтбора.Использование = Истина;
	МассивСтруктурОтбора.Добавить(СтруктураОтбора);

	СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
	СтруктураОтбора.Поле = "Ссылка.Организация";
	СтруктураОтбора.Значение = Объект.Организация;
	СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	СтруктураОтбора.Использование = Истина;
	МассивСтруктурОтбора.Добавить(СтруктураОтбора);

	СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
	СтруктураОтбора.Поле = "Ссылка.Проведен";
	СтруктураОтбора.Значение = Истина;
	СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	СтруктураОтбора.Использование = Истина;
	МассивСтруктурОтбора.Добавить(СтруктураОтбора);

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивСтруктурОтбора", МассивСтруктурОтбора);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораЗаказаПокупателя", Форма);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораЗаказаПокупателя",
		ПараметрыФормы,
		Форма.УникальныйИдентификатор,,,,
		ОбработчикОповещения,
		Режим);
	
	
КонецПроцедуры

// Процедура производит выбор документа безналичной оплаты.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ВыбратьДокументБезналичнойОплаты(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Объект.Организация);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыФормы.Вставить("Магазин", Объект.ТорговыйОбъект);
	ПараметрыФормы.Вставить("МассивОрганизаций", МассивОрганизаций);
	ПараметрыФормы.Вставить("ЗаказПокупателя", Объект.ЗаказПокупателя);
	ПараметрыФормы.Вставить("ЭтоБезналичнаяОплата", Истина);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВыборДокументаБезналичнойОплаты", Форма);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораДокументаРасчета",
		ПараметрыФормы,
		Форма.УникальныйИдентификатор,,,,
		ОбработчикОповещения,
		Режим);
	
КонецПроцедуры

// Процедура выполняет допоплнительные действия после того, как прошла оплата по карте.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения.
//
Процедура ДозаполнитьДанныеПослеОплатыПоКарте(Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура производит выбор документа расчета.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ВыбратьДокументРасчета(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Объект.Организация);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыФормы.Вставить("Магазин", Объект.ТорговыйОбъект);
	ПараметрыФормы.Вставить("МассивОрганизаций", МассивОрганизаций);
	ПараметрыФормы.Вставить("ЗаказПокупателя", Объект.ЗаказПокупателя);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВыборДокументаРасчета", Форма);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораДокументаРасчета",
		ПараметрыФормы,
		Форма.УникальныйИдентификатор,,,,
		ОбработчикОповещения,
		Режим);
	
КонецПроцедуры

// Процедура формирует и устанавливает заголовок программы.
//
// Параметры
//  ТекстЗаголовка - Строка - текст заголовка программы.
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура СформироватьЗаголовокПрограммы(ТекстЗаголовка, Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если Объект.ВидОперации = ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		Если Объект.ОперацияСДенежнымиСредствами Тогда
			ТекстЗаголовка = НСтр("ru = 'Возврат денежных средств без передачи товаров'");
		Иначе
			ТекстЗаголовка = НСтр("ru = 'Возврат'") 
		КонецЕсли;
	Иначе
		Если Объект.ОперацияСДенежнымиСредствами Тогда
			ТекстЗаголовка = НСтр("ru = 'Прием денежных средств без передачи товаров'");
		Иначе
			ТекстЗаголовка = НСтр("ru = 'Продажа'");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
		
		ПредставлениеЗаказа = Строка(Объект.ЗаказПокупателя);
		ПредставлениеЗаказа = СтрЗаменить(ПредставлениеЗаказа, "Заказ", "заказу");
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' по '") + ПредставлениеЗаказа;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ДокументРасчета) И Форма.ЭтоЗачетАванса Тогда
		
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' Зачет аванса '") +
			Формат(Форма.СуммаОстаткаДокументаРасчета, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧГ=3,0");
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ДокументРасчета) И Форма.ЭтоОплатаРассрочки Тогда
		
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' Остаток рассрочки '") +
			Формат(Форма.СуммаОстаткаДокументаРасчета, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧГ=3,0");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Кассир) Тогда
		ТекстЗаголовка = ТекстЗаголовка + " - "+ Строка(Объект.Кассир);
	КонецЕсли;
	
	Если Форма.ЗапущеноПодАдминистратором Тогда
		Форма.Заголовок = ТекстЗаголовка;
	Иначе
		КлиентскоеПриложение.УстановитьЗаголовок(ТекстЗаголовка);
	КонецЕсли;
	
КонецПроцедуры

// Процедура открывает форму подбора товаров в рабочем месте кассира.
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ОткрытьФормуПодбораТоваров(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Магазин", Объект.ТорговыйОбъект);
	ПараметрыОткрытия.Вставить("ЗакрыватьПодборПриВыбореТовара", Форма.ЗакрыватьПодборПриВыбореТовара);
	
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаПодборТовара", ПараметрыОткрытия, Форма);
	
КонецПроцедуры

// Процедура анализирует данные выбранные пользователем и дозаполняет при необходимости.
// В массив данных необходимо добавить выбранные значения из формы подбора. Т.к возможна
// ситуация, когда в форме подбора реализован множественный выбор строк.
//
// Параметры
//  ДанныеВыбора - Структура - выбранные данные в форме ручного подбора.
//                 Обязательно должна содержать ключи Номенклатура, Цена.
//                 Опционально - Характеристика, Упаковка.
//  МассивДанных - Массив - массив, в который нужно добавить выбранные данные.
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ДозаполнитьДанныеРучногоВыбора(ДанныеВыбора, МассивДанных, Форма) Экспорт
	
	Если ТипЗнч(ДанныеВыбора) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		МассивДанных.Добавить(ДанныеВыбора);
		Возврат;
	КонецЕсли;
	
	Буфер = ОсновныеПоляФормыВыбораТоваровРМК();
	
	Если ТипЗнч(ДанныеВыбора) = Тип("Структура") Тогда
		
		Если ДанныеВыбора.Свойство("ИмяДействия") Тогда
			
			Если ДанныеВыбора.ИмяДействия = НСтр("ru = 'Подбор номенклатуры'") Тогда
				
				Если ДанныеВыбора.Свойство("Характеристика") Тогда
					Буфер.Вставить("Характеристика");
				КонецЕсли;
				
				Если ДанныеВыбора.Свойство("Упаковка") Тогда
					Буфер.Вставить("Упаковка");
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(Буфер, ДанныеВыбора);
				
				Магазин = Форма.Объект.ТорговыйОбъект;
				ОбщегоНазначенияРМКРТВызовСервера.ДополнитьДанныеВыбора(Буфер, Магазин);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	МассивДанных.Добавить(Буфер);
	
КонецПроцедуры

// Проверяет использование внешнего события в конфигурации при получении данных с торгового оборудования.
//
// Параметры:
//  Результат - Булево - признак использования внешнего события.
//
Процедура ЗаполнитьПризнакИспользованияВнешнегоСобытия(Результат) Экспорт
	
	Результат = Ложь;
	
КонецПроцедуры

// Заполняет признак, который отвечает за способ создания карты лояльности.
// Значение по умолчанию - Ложь, карта лояльности будет создана в сервисе лояльности.
//
// Параметры:
//  Результат - Булево - признак, отвечающий за способ создания карты лояльности.
//
Процедура ЗаполнитьПризнакСоздаватьЛокальноКартуЛояльности(Результат) Экспорт
	
	Результат = Истина;
	
КонецПроцедуры

// Заполняет признак использования локального поиска подарочного сертификата.
// Если признак имеет значение Ложь, то поиск сертификата будет идти через запрос сервиса лояльности.
//
// Параметры:
//  Результат - Булево - признак использования локального поиска сертификата.
//
Процедура ЗаполнитьПризнакИспользоватьПоискСертификатаЛокально(Результат) Экспорт
	
	Результат = Истина;
	
КонецПроцедуры

// Заполняет признак использования локального запроса бонусов.
// Если признак имеет значение Ложь, то бонусы будут запрошены используя сервис лояльности.
//
// Параметры:
//  Результат - Булево - признак использования локального запроса бонусов.
//
Процедура ЗаполнитьПризнакИспользоватьЗапросБонусовЛокально(Результат) Экспорт
	
	Результат = Истина;
	
КонецПроцедуры

// Проверяет является ли переданное значение - документом безналичной оплаты.
//
// Параметры:
//  ДокументСсылка - ОпределяемыйТип.ДокументРасчетаРМК - ссылка на документ расчета.
//  ЭтоДокументБезналичнойОплаты - Булево - Истина, если это документ безналичной оплаты.
//
Процедура ЗаполнитьПризнакЭтоДокументБезналичнойОплаты(ДокументСсылка, ЭтоДокументБезналичнойОплаты) Экспорт
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегистрацияБезналичнойОплаты") Тогда
		ЭтоДокументБезналичнойОплаты = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет массив особенностями учета номенклатуры, для которых необходима проверка возраста.
//
// Параметры:
//  МассивДанных - Массив - массив, который нужно заполнить.
//
Процедура ЗаполнитьМассивДляПроверкиВозраста(МассивДанных) Экспорт
	
	МассивДанных.Добавить(
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция"));
	МассивДанных.Добавить(
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция"));
	МассивДанных.Добавить(
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак"));
	МассивДанных.Добавить(
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ОсобенностиУчетаНоменклатуры.НикотиносодержащаяПродукция"));
	МассивДанных.Добавить(
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент("Перечисление.ОсобенностиУчетаНоменклатуры.Пиво"));
	
КонецПроцедуры

// Процедура производит обработку выбранного значения при подборе
// номенклатуры в таблицу быстрых товаров.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма настроек рабочего места кассира.
//  ВыбранноеЗначение - Структура - данные для обработки.
//  СтандартнаяОбработка - Булево - признак использования стандартной обработки.
//
Процедура ОбработатьВыбранноеЗначениеБыстрыхТоваров(Форма, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура производит обработку выбранного значения кода доступа
// кассира в помощнике настройки рабочего места кассира.
// Если СтандартнаяОбработка = Ложь, то необходимо вызвать обработку оповещения "ОповещениеВыборКодаДоступа"
// в форме помощника настройки кассового места.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма настроек рабочего места кассира.
//  ВыбранноеЗначение - Структура - данные для обработки.
//  СтандартнаяОбработка - Булево - признак использования стандартной обработки.
//
Процедура ОбработатьВыбранноеЗначениеКодаДоступа(Форма, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОповещениеВыборКодаДоступа", Форма);
	
	ФормаЗаписи = ПолучитьФорму("РегистрСведений.Штрихкоды.Форма.ФормаЗаписи");
	ФормаЗаписи.Запись.Владелец = ВыбранноеЗначение;
	ФормаЗаписи.ОписаниеОповещенияОЗакрытии = ОповещениеОЗакрытии;
	ФормаЗаписи.Открыть();
	
КонецПроцедуры

// Заполняет параметры выбора для отбора характеристик по владельцу.
//
// Параметры:
//  ПараметрыВыбора - Структура - параметры для отбора характеристик.
//  Номенклатура - ОпределяемыйТип.НоменклатураРМК - владелец характеристик.
//  СтандартнаяОбработка - Булево - признак использования стандартной обработки.
//
Процедура ЗаполнитьПараметрыВыбораХарактеристик(ПараметрыВыбора, Номенклатура, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПараметрыВыбора.Вставить("Номенклатура", Номенклатура);
	
КонецПроцедуры

// Процедура производит действия после открытия чека в очереди.
//
// Параметры:
//  ПараметрыВыполнения - Структура - параметры пробития чека на ККТ.
//  ДополнительныеПараметры - Структура - дополнительные параметры процедуры.
//
Процедура ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ШапкаЧека = ПараметрыВыполнения.ВходныеПараметры;
	
	НомерСмены = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерСмены);
	
	Если НомерСмены <> 0 Тогда
		ШапкаЧека.НомерСменыККТ = НомерСмены;
	КонецЕсли;
	
	НомерЧека = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерЧека);
	
	Если НомерЧека <> 0 Тогда
		ШапкаЧека.НомерЧекаККТ = НомерЧека;
	КонецЕсли;
	
	Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ПараметрыВыполнения, "ЗаводскойНомерФН")
		И ЗначениеЗаполнено(ПараметрыВыполнения.ЗаводскойНомерФН) Тогда
		ШапкаЧека.ЗаводскойНомерФН = ПараметрыВыполнения.ЗаводскойНомерФН;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ЕстьАлкогольнаяПродукцияЕГАИС") 
		И ДополнительныеПараметры.ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		ПараметрыОперации = Новый Структура();
		ПараметрыОперации.Вставить("НомерСмены", ШапкаЧека.НомерСменыККТ);
		ПараметрыОперации.Вставить("НомерЧека", ШапкаЧека.НомерЧекаККТ);
		ПараметрыОперации.Вставить("СерийныйНомер", ШапкаЧека.ЗаводскойНомерФН);
		
		ОбменДаннымиЕГАИСКлиент.ПередатьНемедленно(
		ШапкаЧека.ДокументОснование,
		ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
		"Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные"),
		ПараметрыОперации,
		Новый ОписаниеОповещения("ПослеПередачиЧекаЕГАИС", МенеджерОборудованияРМККлиент, ПараметрыВыполнения));
		
		ПараметрыВыполнения.Вставить("ДанныеОтправленыВЕГАИС", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура производит действия после ошибки печати чека в очереди.
//
// Параметры:
//  ПараметрыВыполнения - Структура - параметры пробития чека на ККТ.
//  ДополнительныеПараметры - Структура - дополнительные параметры процедуры.
//
Процедура ПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("ЕстьАлкогольнаяПродукцияЕГАИС") 
		И ДополнительныеПараметры.ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		
		НомерСмены = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерСмены);
		Если НомерСмены = 0 Тогда
			НомерСмены = 1;
		КонецЕсли;
		
		НомерЧека = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерЧека);
		
		Если НомерЧека = 0 Тогда
			НомерЧека = 1;
		КонецЕсли;
		
		ПараметрыОперации = Новый Структура();
		ПараметрыОперации.Вставить("НомерСмены", НомерСмены);
		ПараметрыОперации.Вставить("НомерЧека", НомерЧека + 1000000);
		ПараметрыОперации.Вставить("СерийныйНомер", НСтр("ru = ''"));
		
		Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(ПараметрыВыполнения, "ЗаводскойНомерФН")
			И ЗначениеЗаполнено(ПараметрыВыполнения.ЗаводскойНомерФН) Тогда
			ПараметрыОперации.СерийныйНомер = ПараметрыВыполнения.ЗаводскойНомерФН;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыОперации.СерийныйНомер) Тогда
			ПараметрыОперации.СерийныйНомер = НСтр("ru = '1'");
		КонецЕсли;
		
		ДанныеДляВыполненияОбменаНаКлиенте = ОбменДаннымиЕГАИСВызовСервера.ПодготовитьКПередаче(
			ПараметрыВыполнения.ВходныеПараметры.ДокументОснование,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию"),
			ПараметрыОперации,
			Истина);
		
		ОбменДаннымиЕГАИССлужебныйКлиент.ОбработатьОчередьПередачиДанных(
		Новый ОписаниеОповещения("ПриОтменеОперации", ИнтеграцияЕГАИСРТКлиент, ПараметрыВыполнения.ВходныеПараметры.ДокументОснование),
		ДанныеДляВыполненияОбменаНаКлиенте);
		
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет доступное ККТ для фискализации чека
// Параметры:
//  РеквизитыЧека - Структура - реквизиты фискального чека
//  СписокУстройств - Массив - список доступных ККТ для фискализации
//  ИдентификаторУстройстваККТ - СправочникСсылка.ПодключаемоеОборудование - выбранное ККТ для фискализации
//  СтандартнаяОбработка - Булево - выполнение стандартной обработки
//
Процедура ДоступноеККТДляФискализации(РеквизитыЧека, СписокУстройств, ИдентификаторУстройстваККТ, СтандартнаяОбработка = Истина) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Заполняет массив, который содержит особенности учета номенклатуры, которые можно возвращать без марки.
//
// Параметры:
//  МассивОсобенностей - Массив - массив, который содержит занчения особенностей номенклатуры, которые
//    можно возвращать без марки.
//
Процедура ЗаполнитьМассивОсобенностейДляВозвратаБезМарки(МассивОсобенностей) Экспорт
	
	Антисептики = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Антисептики");
	Бады = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.БАДы");
	Велосипеды = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Велосипеды");
	Духи = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Духи");
	КреслаКоляски = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.КреслаКоляски");
	Обувь = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция");
	Одежда = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность");
	ПродукцияИзНатуральногоМеха =
		ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха");
	Фотоаппараты = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Фотоаппараты");
	Шины = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.Шины");

	МассивОсобенностей.Добавить(Антисептики);
	МассивОсобенностей.Добавить(БАДы);
	МассивОсобенностей.Добавить(Велосипеды);
	МассивОсобенностей.Добавить(Духи);
	МассивОсобенностей.Добавить(КреслаКоляски);
	МассивОсобенностей.Добавить(Обувь);
	МассивОсобенностей.Добавить(Одежда);
	МассивОсобенностей.Добавить(ПродукцияИзНатуральногоМеха);
	МассивОсобенностей.Добавить(Фотоаппараты);
	МассивОсобенностей.Добавить(Шины);
	
КонецПроцедуры

// Проверяет необходимость заполнения контрагента при выполнении операций "Предоплата", "Оплата в рассрочку".
//
// Параметры:
//  Результат - Булево - признак необходимости заполнения контрагента.
//
Процедура ПроверитьНеобходимостьЗаполненияКонтрагента(Результат) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Открывает форму помощника настройки обмена 1С:РМК с другими системами.
//
Процедура ОткрытьПомощникНастройкиОбмена() Экспорт
	
	Возврат;
	
КонецПроцедуры

// Процедура выполняет дополнительные действия при открытии каталога товаров.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ПриОткрытииКаталогаТоваров(Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Метод реализует собственную логику в конфигурации потребителе по созданию документов списания алкогольной продукции.
//
Процедура СписатьАлкогольнуюПродукцию(Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Заполняет признак, от которого будет зависеть будет ли задаваться вопрос для подтверждения
// верности владельца для ввода марки. Значение по умолчанию признака - Истина.
// 
// Параметры:
//  НужноПодтверждениеМаркиАлкоголя - Булево - признак, от значения которого зависит будет ли выводиться вопрос
//    при сканировании марки алкоголя.
//
Процедура ЗаполнитьПодтверждениеМаркиАлкоголя(НужноПодтверждениеМаркиАлкоголя) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Открывает форму опроса владельца карты.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ПровестиОпросВладельцаКарты(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ДатаСобытия = ОбщегоНазначенияКлиент.ДатаСеанса();
	Карта = Объект.ДисконтнаяКарта;
	НуженОпрос = ИнформационныеКартыВызовСервера.НеобходимостьОпросаВладельца(Карта, ДатаСобытия);
	
	Если НуженОпрос Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Карта", Карта);
		
		ОповещениеОЗакрытииФормыОпроса =
			Новый ОписаниеОповещения("ЗавершитьОпросПоДисконтнойКарте", Форма);
		
		ОткрытьФорму("Справочник.ИнформационныеКарты.Форма.ФормаОпросаПоДисконтнойКарте", ПараметрыФормы, , , , ,ОповещениеОЗакрытииФормыОпроса);
		
	КонецЕсли;
	
КонецПроцедуры

// Метод для обработки событий элементов формы добавленных программным способом.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - ОбщаяФорма.НастройкиРабочегоМестаКассира.
//  Элемент - ПолеФормы - Имя элемента.
//
Процедура ПроизвольнаяНастройкаПриИзменении(Форма, Элемент) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Стандартный обработчик события формы см. вызов из Обработки.РабочееМестоКассира.Формы.ФормаРМК
// с возможностью вернуть во входящий параметр ОбработатьОповещениеНаСервере значение Истина, если
// далее требуется обработать событие на сервере.
// Дополнительно см. метод ОбщегоНазначенияРМКПереопределяемый.ОбработкаОповещения.
//
Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ОбработатьОповещениеНаСервере) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Проверяет наличие ошибок при заполнении данных карты лояльности на форме РМК.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//  ЕстьОшибки - Булево - признак наличия ошибок.
//
Процедура ПроверитьОшибкиЗаполненияКартыЛояльности(Форма, ЕстьОшибки) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Проверяет корректность заполнения оплат перед пробитием чека
//
// Параметры:
//  ОплатаЗаполненаВерно - Булево - признак верно заполненной оплаты
//  СтруктураОшибки - Структура - текст заголовка и ошибки.
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//  СтандартнаяОбработка - Булево - признак использования стандартной обработки.
//
Процедура ПроверитьЗаполнениеОплатПередПробитиемЧека(ОплатаЗаполненаВерно, СтруктураОшибки, Форма, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Настраивает элементы формы настроек РМК по разделу SMS подтверждение
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма настроек РМК.
//  СтандартнаяОбработка - Булево - признак использования стандартной обработки.
//
Процедура НастроитьЭлементыSMSПодтвержденияНаФормеНастроек(Форма, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ИспользоватьШаблоныСообщений = Форма.ИспользоватьШаблоныСообщений;
	Элементы = Форма.Элементы;
	НастройкаРМК = Форма.НастройкаРМК;
	
	Если НЕ ИспользоватьШаблоныСообщений Тогда
		НастройкаРМК.ОтправлятьSMSКодПриЗаведенииКарты = Ложь;
		Форма.ОтправлятьSMSПриОплатеБонусами = Ложь;
		Форма.ОтправлятьSMSПриПоискеКартыПоНомеруТелефона = Ложь;
	КонецЕсли;
	
	Форма.Элементы.ГруппаSMSПодтверждениеНиз.Доступность = ИспользоватьШаблоныСообщений;
	
	Элементы.НастройкаРМКШаблонSMSПриЗаведенииКарты.Доступность = НастройкаРМК.ОтправлятьSMSКодПриЗаведенииКарты;
		
	Элементы.НастройкаРМКШаблонSMSПриПродаже.Доступность = Форма.ОтправлятьSMSПриПоискеКартыПоНомеруТелефона;
		
	Элементы.НастройкаРМКШаблонSMSПриСписанииБонусов.Доступность = Форма.ОтправлятьSMSПриОплатеБонусами;
		
	Элементы.НастройкаРМКСуммаПодтвержденияСписанияБонусов.Доступность = Форма.ОтправлятьSMSПриОплатеБонусами;
		
	Элементы.БонусыОкончание.Доступность = Форма.ОтправлятьSMSПриОплатеБонусами;
	
КонецПроцедуры

// Открывает форму настроек распределения продаж по кассам ККМ
//
Процедура ОткрытьНастройкиРаспределенияПродаж() Экспорт
	Возврат;
КонецПроцедуры

// Заполняет признак использования автоматических скидок/бонусных программ
// 
// Параметры:
//  Результат - Булево - признак использования автоматических скидок/бонусных программ
//
Процедура ЗаполнитьПризнакИспользованияАвтоматическихСкидок(Результат) Экспорт
	
	ОбщегоНазначенияРМКРТВызовСервера.ЗаполнитьПризнакИспользованияАвтоматическихСкидок(Результат);
	
КонецПроцедуры

// Открывает форму списка чеков ККМ с ошибками НСПК.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//
Процедура ОткрытьСписокЧековСОшибкамиНСПК(Форма, ОповещениеОЗакрытии) Экспорт
	
	ОткрытьФорму("Документ.ЧекККМ.ФормаСписка", Новый Структура("ОшибкиОтправкиНСПК", Истина), Форма,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

// Открывает форму оплаты кредитом
//
// Параметры
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира.
//
Процедура ОткрытьФормуОплатыКредитом(Форма) Экспорт
	
	ВидОплатыБанковскийКредит = ОбщегоНазначенияРМКРТВызовСервера.ПолучитьВидОплатыКредитом();
	
	Если НЕ ВидОплатыБанковскийКредит = Неопределено Тогда
		
		ПараметрыОплаты = Новый Структура;
		ПараметрыОплаты.Вставить("Сумма", Форма.СуммаОплаченоКредитом);
		ПараметрыОплаты.Вставить("ВидОплатыКредитом", ВидОплатыБанковскийКредит);
		ОповещениеНаФорму = Новый ОписаниеОповещения("ДобавитьОплатуКредитомЗавершение", Форма);
		ВыполнитьОбработкуОповещения(ОповещениеНаФорму, ПараметрыОплаты);
		
	Иначе
		
		ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.БанковскийКредит");
		
		Отбор = Новый Структура;
		Отбор.Вставить("ИмяПоляОтбораЛевоеЗначение", "ТипОплаты");
		Отбор.Вставить("ПравоеЗначение"            , ТипОплаты);
		Отбор.Вставить("Отрицание"                 , Ложь);
		
		ПараметрыФормы =  Новый Структура("СтруктураПараметрыОтбора", Отбор);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТипОплаты", ТипОплаты);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ВыбратьВидОплатыКредитомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Справочник.ВидыОплатЧекаККМ.ФормаВыбора", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
		
	КонецЕсли;

	
КонецПроцедуры

// Структура буфера, хранящего данные выбора из формы подбора РМК
//
// Возвращаемое значение:
//  Результат - Структура - набор основных полей, имитирующий структуры выбранной строки:
//   * ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры
//   * Номенклатура - СправочникСсылка.Номенклатура
//   * Организация - СправочникСсылка.Организации
//   * ОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры
//   * Цена - Число
//
Функция ОсновныеПоляФормыВыбораТоваровРМК() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ВидНоменклатуры", ПредопределенноеЗначение("Справочник.ВидыНоменклатуры.ПустаяСсылка"));
	Результат.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	Результат.Вставить("Организация", ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	Результат.Вставить("ОсобенностьУчета",
		ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПустаяСсылка"));
	Результат.Вставить("Цена", 0);
	
	Возврат Результат;
	
КонецФункции

// Определяет необходимость запрашивать баланс подарочного сертификата при возврате.
//
// Параметры:
//  ЗапрашиватьБаланс - Булево - истина, если требуется запрашивать баланс сертификата.
//
Процедура ОпределитьНеобходимостьЗапросаБалансаСертификата(ЗапрашиватьБаланс) Экспорт
	ЗапрашиватьБаланс = Истина;
КонецПроцедуры

// Открывает форму настройки эквайринга.
//
// Параметры:
//  СтруктураПараметров - Структура - содержит:
//    * ОписаниеОповещенияОЗакрытии - описание оповещения о закрытии формы выбора.
//  СтандартнаяОбработка - Булево - признак стандартной обработки события.
//
Процедура ОткрытьФормуНастройкиЭквайринга(СтруктураПараметров, СтандартнаяОбработка) Экспорт
	
	ОткрытьФорму("Справочник.ЭквайринговыеТерминалы.ФормаСписка");
	
КонецПроцедуры

// Переопределяет настройки элементов видов оплат.
//
// Параметры:
//  СтруктураПараметров - Структура - содержит:
//    * Форма - ФормаКлиентскогоПриложения - форма настроек рабочего места кассира.
//  СтандартнаяОбработка - Булево - признак стандартной обработки события.
//
Процедура НастроитьЭлементыВидовОплат(СтруктураПараметров, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Форма = СтруктураПараметров.Форма;
	НачальныйТекст = Форма.Элементы.ГруппаБонусыИСертификатыРасширеннаяПодсказка.Заголовок;
	
	Если СтрНайти(НачальныйТекст, НСтр("ru = 'Настройках'")) = 0 Тогда
		
		СсылкаНаНастройки = новый ФорматированнаяСтрока(НСтр("ru = 'Маркетинг'"), , , ,
			"e1cib/command/Обработка.ПанельАдминистрированияРТ.Команда.Маркетинг");
		
		МассивЗоголовка = Новый Массив;
		МассивЗоголовка.Добавить(НачальныйТекст);
		МассивЗоголовка = Новый Массив;
		МассивЗоголовка.Добавить(
			НСтр("ru = 'Для использования бонусов необходимо включить соответствующую опцию в группе ""Скидки, наценки, ограничения"" в разделе '"));
		МассивЗоголовка.Добавить(СсылкаНаНастройки);
		
		НовыйЗаголовок = Новый ФорматированнаяСтрока(МассивЗоголовка);
		Форма.Элементы.ГруппаБонусыИСертификатыРасширеннаяПодсказка.Заголовок = НовыйЗаголовок;
		
	КонецЕсли;
	
	Если Форма.ИспользоватьСерверЛояльностиПолучательДанных И Ложь Тогда
		
		Форма.Элементы.НастройкаРМКИспользоватьОплатуБонусами.Доступность = Истина;
		Форма.Элементы.НастройкаРМКИспользоватьОплатуСертификатами.Доступность = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	ИспользоватьОплатуБонусами =
		ОбщегоНазначенияРТВызовСервера.ЗначениеКонстанты("ИспользоватьБонусныеПрограммыЛояльности");
		
	ИспользоватьОплатуСертификатами = Истина;
		
	Форма.Элементы.НастройкаРМКИспользоватьОплатуБонусами.Доступность = ИспользоватьОплатуБонусами;
	Форма.Элементы.НастройкаРМКИспользоватьОплатуСертификатами.Доступность = ИспользоватьОплатуСертификатами;
		
	Если Не ИспользоватьОплатуБонусами Тогда
		Форма.НастройкаРМК.ИспользоватьОплатуБонусами = Ложь;
	КонецЕсли;
	
	Если Не ИспользоватьОплатуСертификатами Тогда
		Форма.НастройкаРМК.ИспользоватьОплатуСертификатами = Ложь;
	КонецЕсли;
	
	Форма.Элементы.ГруппаУчетНаличных.Видимость = Ложь;
	
КонецПроцедуры

// Открывает форму выбора контрагента.
//
// Параметры:
//  СтруктураПараметров - Структура - содержит:
//    * ОписаниеОповещенияОЗакрытии - описание оповещения о закрытии формы выбора.
//  СтандартнаяОбработка - Булево - признак стандартной обработки события.
//
Процедура ОткрытьФормуВыбораКонтрагента(СтруктураПараметров, СтандартнаяОбработка) Экспорт
	
	ОписаниеОповещенияОЗакрытии = СтруктураПараметров.ОписаниеОповещенияОЗакрытии;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Покупатель", Истина);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыФормы, , , , , ОписаниеОповещенияОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Переопределяет настройки формы
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК
//
Процедура ИнициализироватьФормуРабочегоМестаКассира(Форма) Экспорт
	
	Форма.ИспользоватьВидКартыСЛ = Истина;
	Форма.Элементы.ГруппаНоваяКартаВидКарты.Видимость = Истина;
	
КонецПроцедуры

// Переопределяет имена реквизитов объекта формы для формирования структуры реквизитов аналогичной объекту формыРМК.
// Структура требуется для обработки добавления строки товара.
//
// Параметры:
//  ИменаРеквизитов - Строка - Имена реквизитов через запятую.
//
Процедура ДополнитьИменаРеквизитовОбъектаФормыРМКДляДобавленияСтроки(ИменаРеквизитов) Экспорт
	Возврат;
КонецПроцедуры

// Переопределяет имена реквизитов формы для формирования структуры реквизитов аналогичной формеРМК.
// Структура требуется для обработки добавления строки товара.
//
// Параметры:
//  ИменаРеквизитов - Строка - Имена реквизитов через запятую.
//
Процедура ДополнитьИменаРеквизитовФормыРМКДляДобавленияСтроки(ИменаРеквизитов) Экспорт
	
	Если СтрНайти(ИменаРеквизитов, "РабочееМесто") = 0 Тогда
		ИменаРеквизитовРТ = "РабочееМесто";
		ИменаРеквизитов = СтрШаблон("%1, %2", ИменаРеквизитов, ИменаРеквизитовРТ);
	КонецЕсли;
	
	Если СтрНайти(ИменаРеквизитов, "СистемаНалогообложенияОрганизацииПоУмолчанию") = 0 Тогда
		ИменаРеквизитовРТ = "СистемаНалогообложенияОрганизацииПоУмолчанию";
		ИменаРеквизитов = СтрШаблон("%1, %2", ИменаРеквизитов, ИменаРеквизитовРТ);
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет имена реквизитов текущей строки таблицы товаров формы для формирования структуры реквизитов аналогичной формеРМК.
// Структура требуется для обработки добавления строки товара.
//
// Параметры:
//  ИменаРеквизитов - Строка - Имена реквизитов через запятую.
//
Процедура ДополнитьИменаРеквизитовТекущейСтрокиФормыРМКДляДобавленияСтроки(ИменаРеквизитов) Экспорт
	Возврат;
КонецПроцедуры

// Производит подключение кега к оборудованию розлива.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции, Неопределено - строка товаров, для которой производится переопределение.
//  ОповещениеОЗавершении - ОписаниеОповещения - оповещение, которое необходимо выполнить после подключения
//
Процедура ПодключитьКегКОборудованиюРозлива(Форма, ТекущаяСтрока, ОповещениеОЗавершении) Экспорт
	
	ПараметрыФормы = Новый Структура;
	Если Не ТекущаяСтрока = Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.Организация) Тогда
			ПараметрыФормы.Вставить("Организация", ТекущаяСтрока.Организация);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			ПараметрыФормы.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
			ПараметрыФормы.Вставить("Характеристика", ТекущаяСтрока.Характеристика);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПараметрыФормы.Свойство("Организация") И ЗначениеЗаполнено(Форма.Объект.Организация) Тогда
		ПараметрыФормы.Вставить("Организация", Форма.Объект.Организация);
	КонецЕсли;
	ПараметрыФормы.Вставить("ИмяПодсистемы", "ИСМП");
	
	ФормаПодключения = ОткрытьФорму(
		"ОбщаяФорма.ВскрытиеПотребительскойУпаковкиИС",
		ПараметрыФормы,
		Форма,,,,
		ОповещениеОЗавершении);
		
	Если Не ТекущаяСтрока = Неопределено
		И ЗначениеЗаполнено(ТекущаяСтрока.КодМаркировки) Тогда
		
		СимволGS1 = МенеджерОборудованияРМККлиентСервер.РазделительGS1();
		Разделитель = МенеджерОборудованияРМККлиентСервер.ЭкранированныйСимволGS1();
		КодМаркировкиОригинал = СтрЗаменить(ТекущаяСтрока.КодМаркировки, Разделитель, СимволGS1);
		
		ДанныеШтрихкода = Новый Структура;
		ДанныеШтрихкода.Вставить("Штрихкод", КодМаркировкиОригинал);
		ДанныеШтрихкода.Вставить("Количество", 1);
		
		ВыполнитьОбработкуОповещения(Новый ОписаниеОповещения("РучнойВводШтрихкодаЗавершение", ФормаПодключения),
			ДанныеШтрихкода);
		
	КонецЕсли;
	
КонецПроцедуры

// Производит отключение кега от оборудования розлива.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира
//  ОповещениеОЗавершении - ОписаниеОповещения - оповещение, которое необходимо выполнить после отключения
//
Процедура ОтключитьКегОтОборудованияРозлива(Форма, ОповещениеОЗавершении) Экспорт
	
	ПараметрыОткрытия = ИнтеграцияИСКлиент.ПараметрыОткрытияФормыСпискаПотребительскихУпаковок();
	Если ЗначениеЗаполнено(Форма.Объект.Организация) Тогда
		ПараметрыОткрытия.Организациия = Форма.Объект.Организация;
	КонецЕсли;
	
	ПараметрыОткрытия.ВладелецФормы = Форма;
	ПараметрыОткрытия.ОповещениеОЗакрытии = ОповещениеОЗавершении;
	
	ИнтеграцияИСМПКлиент.ОткрытьФормуСпискаВскрытыхПотребительскихУпаковок(ПараметрыОткрытия);
	
КонецПроцедуры

// Производит вскрытие упаковки поштучного выбытия.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции, Неопределено - строка товаров, для которой производится переопределение.
//  ОповещениеОЗавершении - ОписаниеОповещения - оповещение, которое необходимо выполнить после подключения
//
Процедура ВскрытьПотребительскуюУпаковку(Форма, ТекущаяСтрока, ОповещениеОЗавершении) Экспорт
	
	ПараметрыФормы = Новый Структура;
	Если Не ТекущаяСтрока = Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.Организация) Тогда
			ПараметрыФормы.Вставить("Организация", ТекущаяСтрока.Организация);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущаяСтрока.ТорговыйОбъект) Тогда
			ПараметрыФормы.Вставить("Склад", ТекущаяСтрока.ТорговыйОбъект);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			ПараметрыФормы.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
			ПараметрыФормы.Вставить("Характеристика", ТекущаяСтрока.Характеристика);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущаяСтрока.Серия) Тогда
			ПараметрыФормы.Вставить("Серия", ТекущаяСтрока.Серия);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПараметрыФормы.Свойство("Организация") И ЗначениеЗаполнено(Форма.Объект.Организация) Тогда
		ПараметрыФормы.Вставить("Организация", Форма.Объект.Организация);
	КонецЕсли;
	
	Если Не ПараметрыФормы.Свойство("ТорговыйОбъект") И ЗначениеЗаполнено(Форма.Объект.ТорговыйОбъект) Тогда
		ПараметрыФормы.Вставить("Склад", Форма.Объект.ТорговыйОбъект);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ИмяПодсистемы", ?(ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияИСМП(ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ТекущаяСтрока.ОсобенностьУчета), Истина), "ИСМП", "ЕГАИС"));
	
	ФормаПодключения = ОткрытьФорму(
		"ОбщаяФорма.ВскрытиеПотребительскойУпаковкиИС",
		ПараметрыФормы,
		Форма,,,,
		ОповещениеОЗавершении);
		
	Если Не ТекущаяСтрока = Неопределено
		И ЗначениеЗаполнено(ТекущаяСтрока.КодМаркировки) Тогда
		
		СимволGS1 = МенеджерОборудованияРМККлиентСервер.РазделительGS1();
		Разделитель = МенеджерОборудованияРМККлиентСервер.ЭкранированныйСимволGS1();
		КодМаркировкиОригинал = СтрЗаменить(ТекущаяСтрока.КодМаркировки, Разделитель, СимволGS1);
		
		ДанныеШтрихкода = Новый Структура;
		ДанныеШтрихкода.Вставить("Штрихкод", КодМаркировкиОригинал);
		ДанныеШтрихкода.Вставить("Количество", 1);
		
		ВыполнитьОбработкуОповещения(Новый ОписаниеОповещения("РучнойВводШтрихкодаЗавершение", ФормаПодключения),
			ДанныеШтрихкода);
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит предупреждение об остатке частичного выбытия
//
// Параметры:
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции, Неопределено - строка товаров, для которой производится переопределение.
//  СтандартнаяОбработка - Булево - признак стандартной обработки события.
//
Процедура ВывестиПредупреждениеОстаткаЧастичноеВыбытие(ТекущаяСтрока, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// Установливает видимость индикатора остатка
//
// Параметры:
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции, Неопределено - строка товаров, для которой производится переопределение.
//  ЭлементИндикатора - Элемент формы - Элемент индикатора остатка
//  СтандартнаяОбработка - Булево - признак стандартной обработки события.
//
Процедура УстановитьВидимостьИндикатораОстатка(ТекущаяСтрока, ЭлементИндикатора, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь;
	ЭлементИндикатора.Видимость = Ложь;
КонецПроцедуры

Процедура ОпределитьСуществованиеПодсистемыГосИС(Форма, Результат) Экспорт
	
	Результат = ОбщегоНазначенияКлиент.ПодсистемаСуществует("ГосИС.ИСМП");
	
Конецпроцедуры

// Заполняет дополнительные данные для пробития чека
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма РМК.
//  ДополнительныеДанные - Структура - дополнительные данные для пробития чека.
//
Процедура ЗаполнитьДополнительныеДанныеДляПробитияЧека(Форма, ДополнительныеДанные) Экспорт
	
	РеквизитыФормы = ДополнительныеДанные.РеквизитыФормы;
	ОбъектСтруктурой = ДополнительныеДанные.РеквизитыФормы.Объект;
	Для Каждого ИмяРеквизита Из Форма.РеквизитыОбъекта Цикл
		Если Не ОбъектСтруктурой.Свойство(ИмяРеквизита) Тогда
			ОбъектСтруктурой.Вставить(ИмяРеквизита, Форма.Объект[ИмяРеквизита]);
		КонецЕсли;
	КонецЦикла;
	ИмяТаблицыОплата = "Оплата";
	ИмяТаблицыТовары = "Товары";
	ИмяКолонкиИдентификаторСтроки = "ИдентификаторСтрокиНаФорме";
	
	ТаблицаИсточник = Неопределено;
	Для Каждого ОписаниеТаблицы Из Форма.КолонкиТаблицФормы Цикл
		
		Если ОписаниеТаблицы.Ключ = ИмяТаблицыОплата Или ОписаниеТаблицы.Ключ = ИмяТаблицыТовары Тогда
			ТаблицаИсточник = Форма.Объект[ОписаниеТаблицы.Ключ];
		Иначе
			ТаблицаИсточник = Форма[ОписаниеТаблицы.Ключ];
		КонецЕсли;
		СтруктураПриемник = Новый Массив;
		Для Каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл
			ДанныеСтроки = Новый Структура();
			Для Каждого КолонкаТаблицы Из ОписаниеТаблицы.Значение Цикл
				Если КолонкаТаблицы.Имя = ИмяКолонкиИдентификаторСтроки И ОписаниеТаблицы.Ключ = ИмяТаблицыТовары Тогда
					ДанныеСтроки.Вставить(КолонкаТаблицы.Имя, СтрокаТаблицыИсточника.ПолучитьИдентификатор());
				Иначе
					ДанныеСтроки.Вставить(КолонкаТаблицы.Имя, СтрокаТаблицыИсточника[КолонкаТаблицы.Имя]);
				КонецЕсли;
			КонецЦикла;
			СтруктураПриемник.Добавить(ДанныеСтроки);
		КонецЦикла;
		Если ОписаниеТаблицы.Ключ = ИмяТаблицыОплата Или ОписаниеТаблицы.Ключ = ИмяТаблицыТовары Тогда
			ОбъектСтруктурой.Вставить(ОписаниеТаблицы.Ключ, СтруктураПриемник);
		Иначе
			РеквизитыФормы.Вставить(ОписаниеТаблицы.Ключ, СтруктураПриемник);
		КонецЕсли;
		
	КонецЦикла;
	
	РеквизитыФормы.Вставить("ОтложенныйЧек", Форма.ОтложенныйЧек);
	РеквизитыФормы.Вставить("КомментарийКЧеку", Форма.КомментарийКЧеку);
	РеквизитыФормы.Вставить("ПараметрыКартыЛояльности", Форма.ПараметрыКартыЛояльности);
	РеквизитыФормы.Вставить("ЭтоЗаменаТоваров", Форма.ЭтоЗаменаТоваров);
	РеквизитыФормы.Вставить("ОжидаемоеКоличествоЧеков", Форма.ОжидаемоеКоличествоЧеков);
	РеквизитыФормы.Вставить("КолонкиТаблицФормы", Форма.КолонкиТаблицФормы);
	
	РеквизитыФормы.Вставить("СуммаИтого", Форма.СуммаИтого);
	РеквизитыФормы.Вставить("СуммаОплаченоВРассрочку", Форма.СуммаОплаченоВРассрочку);
	РеквизитыФормы.Вставить("РабочееМесто", Форма.РабочееМесто);
	РеквизитыФормы.Вставить("ОтложенныйЧекПолностьюОплачен", Форма.ОтложенныйЧекПолностьюОплачен);
	РеквизитыФормы.Вставить("ОтправкаЧекаПочта", Форма.ОтправкаЧекаПочта);
	РеквизитыФормы.Вставить("ОтправкаЧекаТелефон", Форма.ОтправкаЧекаТелефон);
	РеквизитыФормы.Вставить("ПриемАванса", Форма.ПриемАванса);
	РеквизитыФормы.Вставить("ЭтоВозвратАванса", Форма.ЭтоВозвратАванса);
	
КонецПроцедуры

// Обновляет данные на форме рабочего места кассира, которые изменяются на сервере при подготовке данных
// для пробития чека
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма рабочего места кассира,
//  ДополнительныеДанные - Структура - дополнительные данные для пробития чека.
//
Процедура ОбновитьРеквизитыФормыПослеПодготовкиДанныхДляЧека(Форма, ДополнительныеДанные) Экспорт
	
	ОбъектСтруктурой = ДополнительныеДанные.РеквизитыФормы.Объект;
	Для Каждого СтрокаТовара Из ОбъектСтруктурой.Товары Цикл
		СтрокаТовараНаФорме = Форма.Объект.Товары.НайтиПоИдентификатору(СтрокаТовара.ИдентификаторСтрокиНаФорме);
		ЗаполнитьЗначенияСвойств(СтрокаТовараНаФорме, СтрокаТовара);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОповещениеОткрытьФормуПроверкиНепробитыхЧеков(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если РезультатОткрытияФормы = НСтр("ru = 'Закрытие смены'") Тогда
		ПродолжитьОткрытиеОбработкиЗакрытияКассовойСмены(ДополнительныеПараметры);
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Закрытие смены.'");
		ТекстОшибки = НСтр("ru = 'Закрытие кассовой смены прервано пользователем.'");
		ПоказатьПредупреждение(, ТекстОшибки,,ТекстЗаголовка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПродолжитьОткрытиеОбработкиЗакрытияКассовойСмены(ПараметрыЗакрытияСмены)
	
	ПараметрыВыемки = РозничныеПродажиКлиентСервер.ПараметрыВыемкиИзКассы();
	Если ТипЗнч(ПараметрыЗакрытияСмены) = Тип("Структура") И ПараметрыЗакрытияСмены.Свойство("КассаККМ") Тогда 
		ПараметрыВыемки.КассаККМ = ПараметрыЗакрытияСмены.КассаККМ;
	ИначеЕсли ТипЗнч(ПараметрыЗакрытияСмены) = Тип("СправочникСсылка.КассыККМ") Тогда 
		ПараметрыВыемки.КассаККМ = ПараметрыЗакрытияСмены;
	КонецЕсли;
	
	ОбщегоНазначенияРМКРТВызовСервера.ИнициализироватьПараметрыВыемкиИзКассы(ПараметрыВыемки);
	
	ЗавершитьОткрытиеОбработкиЗакрытияКассовойСмены(ПараметрыВыемки, 0);
	
КонецПроцедуры

Процедура ЗавершитьОткрытиеОбработкиЗакрытияКассовойСмены(ПараметрыВыемки, СуммаФактическойВыемки)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДокументыОткрыватьМодально", Истина);
	ПараметрыФормы.Вставить("ВыводитьСообщенияВРежимеРМК", Истина);
	ПараметрыФормы.Вставить("ПараметрыВыемки", ПараметрыВыемки);
	ПараметрыФормы.Вставить("СуммаФактическойВыемки" , СуммаФактическойВыемки);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КассаККМ", ПараметрыВыемки.КассаККМ);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуЗакрытияКассовойСмены",
		ОбщегоНазначенияРМКРТКлиент,
		ДополнительныеПараметры);
		
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.ЗакрытиеКассовойСмены.Форма.Форма",
		ПараметрыФормы,
		ОбщегоНазначенияРМКРТКлиент,,,,
		ОбработчикОповещения,
		Режим);
	
КонецПроцедуры

Процедура ОповещениеОткрытьФормуЗакрытияКассовойСмены(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Оповестить("ИзменениеСостоянияКассовойСмены", ДополнительныеПараметры.КассаККМ);
	
КонецПроцедуры

Процедура ОповещениеОткрытьФормуВыбораВнесенияДенег(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено И ТипЗнч(РезультатОткрытияФормы) = Тип("Структура") Тогда
		
		Форма = ДополнительныеПараметры.Форма;
		
		ПараметрыВыполнения = ДенежныеСредстваКлиент.ПараметрыВыполненияОперацииВнесениеДенег();
		ПараметрыВыполнения.СуммаВнесения = РезультатОткрытияФормы.Сумма;
		ПараметрыВыполнения.РКО = РезультатОткрытияФормы.РасходныйКассовыйОрдер;
		ПараметрыВыполнения.КассаККМ = РезультатОткрытияФормы.Касса;
		ПараметрыВыполнения.УникальныйИдентификатор = Форма.УникальныйИдентификатор;
		
		Оповещение = Новый ОписаниеОповещения("ВыполнитьОперациюВнесениеЗавершение", Форма, ПараметрыВыполнения);
		ДенежныеСредстваКлиент.НачатьВнесениеДенег(Оповещение, ПараметрыВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОповещениеОткрытьФормуВводаСуммыФактическойВыемки(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьОткрытиеОбработкиЗакрытияКассовойСмены(РезультатЗакрытия.ПараметрыВыемки, РезультатЗакрытия.ВведенноеЧисло);
	
КонецПроцедуры

Процедура ВыбратьВидОплатыКредитомЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если Результат = Неопределено Тогда
		ПараметрыОплаты = Неопределено;
	Иначе
		ПараметрыОплаты = Новый Структура;
		ПараметрыОплаты.Вставить("Сумма", Форма.СуммаОплаченоКредитом);
		ПараметрыОплаты.Вставить("ВидОплатыКредитом", Результат);
	КонецЕсли;
	
	ОповещениеНаФорму = Новый ОписаниеОповещения("ДобавитьОплатуКредитомЗавершение", Форма);
	ВыполнитьОбработкуОповещения(ОповещениеНаФорму, ПараметрыОплаты);
	
КонецПроцедуры

#КонецОбласти


