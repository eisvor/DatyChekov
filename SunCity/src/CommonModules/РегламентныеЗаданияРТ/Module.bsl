#Область ПрограммныйИнтерфейс

// Возвращает структуру параметров поиска задания для обычного режима и режима разделения данных.
//
// Параметры:
//  РегламентноеЗадание  - УникальныйИдентификатор - уникальный идентификатор регламентного задания или очереди заданий областей данных
//  МетаданныеЗадания  - Метаданные - метаданные искомого регламентного задания
// Возвращаемое значение:
//   Структура   - содержит параметры поиска задания
Функция ПараметрыПоискаЗаданий(РегламентноеЗадание, МетаданныеЗадания) Экспорт
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Метаданные", МетаданныеЗадания);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ПараметрыПоиска.Вставить("Идентификатор", Справочники.ОчередьЗаданий.ПолучитьСсылку(РегламентноеЗадание));
	Иначе
		ПараметрыПоиска.Вставить("УникальныйИдентификатор", РегламентноеЗадание);
	КонецЕсли;
	
	Возврат ПараметрыПоиска;
	
КонецФункции // ПараметрыПоискаЗаданий()

// Возвращает идентификатор задания для обычного режима и режима разделения данных.
//
// Параметры:
//  Задание  - УникальныйИдентификатор - уникальный идентификатор регламентного задания или очереди заданий областей данных
// Возвращаемое значение:
//   УникальныйИдентификатор   - Регламентного задания или элемента справочника ОчередьЗаданийОбластейДанных
Функция ИдентификаторЗадания(Задание) Экспорт
	
	Идентификатор = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
	
	Если ТипЗнч(Задание) = Тип("РегламентноеЗадание") Тогда
		Идентификатор = Задание.УникальныйИдентификатор;
	ИначеЕсли ТипЗнч(Задание.Идентификатор) = Тип("СправочникСсылка.ОчередьЗаданий") Тогда
		Идентификатор = Задание.Идентификатор.УникальныйИдентификатор();
	Конецесли;
	
	Возврат Идентификатор;
	
КонецФункции // ИдентификаторЗадания()

// Заполняет представление регламентного задания (реквизиты ЗаданиеАктивно, ТекстРасписания)
//
// Параметры:
//  Задание				 - РегламентноеЗадание, Неопределено - регламентное задание представление которого необходимо получить
//  ТекстРасписания		 - Строка - представление расписания (выходной)
//  РасписаниеАктивно	 - Булево - использование задания (выходной)
//
Процедура ПолучитьТекстЗаголовкаИРасписанияРегламентнойНастройки(Задание, ТекстРасписания, РасписаниеАктивно) Экспорт
	
	РасписаниеАктивно = Ложь;
	
	Если Задание = Неопределено Тогда
		
		ТекстРасписания = НСтр("ru = '<Расписание не задано>'");
		
	Иначе
		
		Если Задание.Использование Тогда
			РасписаниеАктивно = Истина;
			ТекстРасписания = СтрШаблон(НСтр("ru = 'Расписание: %1'"), Строка(Задание.Расписание));
		Иначе
			ТекстРасписания = СтрШаблон(НСтр("ru = 'Расписание (НЕ АКТИВНО): %1'"), Строка(Задание.Расписание));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти