////////////////////////////////////////////////////////////////////////////////
// ОбщегоНазначенияРТКлиент содержит процедуры и функции 
// общего назначения для работы с конфигурацией.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПроверкиЗаполнения

// Проверяет возможность заполнения табличной части документа.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма документа.
//  ТабличнаяЧасть - ДанныеФормыКоллекция - Проверяемая табличная часть.
//  СтруктураРеквизитов - Структура - Проверяемые реквизиты.
//  ОповещениеЗавершения - ОписаниеОповещения - оповещение о возможности заполнения табличной части.
//
Процедура ПроверитьВозможностьЗаполненияТабличнойЧасти(Форма, ТабличнаяЧасть, СтруктураРеквизитов, ЗаполнятьТабличнуюЧасть, ОповещениеЗавершения) Экспорт
	
	Если Форма.Объект.Проведен Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
		ДополнительныеПараметры.Вставить("ЗаполнятьТабличнуюЧасть", ЗаполнятьТабличнуюЧасть);
		ДополнительныеПараметры.Вставить("ТабличнаяЧасть", ТабличнаяЧасть);
		ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеВопросаОтменыПроведения", ОбщегоНазначенияРТКлиент, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Заполнение возможно только в не проведенном документе, отменить проведение?'"), РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПроверитьВозможностьЗаполненияТабличнойЧастиОчисткаТЧ(Форма, ТабличнаяЧасть, СтруктураРеквизитов, ЗаполнятьТабличнуюЧасть, ОповещениеЗавершения);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка ответа на вопрос об отмене проведения.
//
// Параметры:
//  КодОтвета - КодВозвратаДиалога - код возврата диалога.
//  ДополнительныеПараметры - Структура - структура дополнительных параметров выполнения операции.
//
Процедура ОповещениеВопросаОтменыПроведения(КодОтвета, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	СтруктураРеквизитов = ДополнительныеПараметры.СтруктураРеквизитов;
	ЗаполнятьТабличнуюЧасть = ДополнительныеПараметры.ЗаполнятьТабличнуюЧасть;
	ТабличнаяЧасть = ДополнительныеПараметры.ТабличнаяЧасть;
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	
	Если КодОтвета = КодВозвратаДиалога.Да Тогда
		Если Не Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения)) Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Не удалось отменить проведение документа'"));
			ЗаполнятьТабличнуюЧасть = Ложь;
			Возврат;
		Иначе
			ПроверитьВозможностьЗаполненияТабличнойЧастиОчисткаТЧ(Форма, ТабличнаяЧасть, СтруктураРеквизитов, ЗаполнятьТабличнуюЧасть, ОповещениеЗавершения);
		КонецЕсли;
	Иначе
		ЗаполнятьТабличнуюЧасть = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обработка ответа на вопрос об очистке табличной части.
//
// Параметры:
//  КодОтвета - КодВозвратаДиалога - код возврата диалога.
//  ДополнительныеПараметры - Структура - структура дополнительных параметров выполнения операции.
//
Процедура ОповещениеВопросаОчисткиТЧ(КодОтвета, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	СтруктураРеквизитов = ДополнительныеПараметры.СтруктураРеквизитов;
	ЗаполнятьТабличнуюЧасть = ДополнительныеПараметры.ЗаполнятьТабличнуюЧасть;
	
	Если КодОтвета = КодВозвратаДиалога.Нет Тогда
		ЗаполнятьТабличнуюЧасть = Ложь;
	КонецЕсли;
	
	Если СтруктураРеквизитов <> Неопределено
		И ЗаполнятьТабличнуюЧасть Тогда
		ЗаполнятьТабличнуюЧасть = ПроверитьЗаполнениеРеквизитов(Форма.Объект, СтруктураРеквизитов);
	КонецЕсли;
	
	Форма.ПослеПроверкиВозможностиЗаполнения(ЗаполнятьТабличнуюЧасть, Неопределено);
	
КонецПроцедуры

// Процедура выполняет проверку заполнения необходимых реквизитов табличной части объекта.
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - данные формы.
//  СтруктураРеквизитов - Структура - проверяемые реквизиты.
//  СтруктураТабличнаяЧасть - Структура - структура содержащая наименование и представление табличной части.
//
Процедура ПроверитьЗаполнениеРеквизитовТабличнойЧасти(Объект, СтруктураТабличнаяЧасть, СтруктураРеквизитов, Отказ) Экспорт
	
	Для Каждого ТабличнаяЧасть Из СтруктураТабличнаяЧасть Цикл
		Для Каждого ПроверяемаяСтрокаТаблицы Из Объект[ТабличнаяЧасть.Ключ] Цикл
			Для Каждого ПроверяемыйРеквизит Из СтруктураРеквизитов Цикл
				Если НЕ ЗначениеЗаполнено(ПроверяемаяСтрокаТаблицы[ПроверяемыйРеквизит.Ключ]) Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3""'"),
						ПроверяемыйРеквизит.Значение,
						ПроверяемаяСтрокаТаблицы.НомерСтроки,
						ТабличнаяЧасть.Значение);
					ОбщегоНазначенияКлиент.СообщитьПользователю(
						ТекстСообщения,
						Объект,
						"Объект." + ТабличнаяЧасть.Ключ + "["+ (ПроверяемаяСтрокаТаблицы.НомерСтроки - 1) + "]." + ПроверяемыйРеквизит.Ключ,
						,
						Отказ);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеРеквизитовТабличнойЧасти()

// Процедура проверяет заполнение необходимых реквизитов объекта.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - данные формы.
//  СтруктураРеквизитов - Структура - проверяемые реквизиты.
//
// Возвращаемое значение:
//  Булево - Истина - ошибок не обнаружено.
//
Функция ПроверитьЗаполнениеРеквизитов(Объект, СтруктураРеквизитов) Экспорт
	
	РеквизитыЗаполнены = Истина;
	ОчиститьСообщения();
	
	Для Каждого Элемент Из СтруктураРеквизитов Цикл
		
		Если Не ЗначениеЗаполнено(Объект[Элемент.Ключ]) Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Поле ""%1"" не заполнено'"),
			?(ПустаяСтрока(Элемент.Значение), Элемент.Ключ, Элемент.Значение));
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(Текст, ,Элемент.Ключ, "Объект");
			
			РеквизитыЗаполнены = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РеквизитыЗаполнены;
	
КонецФункции

#КонецОбласти

#Область КомпонентаСклонения

// Возвращает склонение в выбранном падеже.
//
// Параметры:
//  ФИО		- Строка - Строка, в которой содержится ФИО для склонения.
//  Падеж 	- Число - падеж, в который необходимо просклонять представление объекта.
//							1 - Именительный.
//							2 - Родительный.
//							3 - Дательный.
//							4 - Винительный.
//							5 - Творительный.
//							6 - Предложный.
//  Объект 	- ОбъектСклонения - Ссылка на объект, реквизит которого склоняется.
//  Пол		- Число - Число - пол физического лица, 
//							1 - мужской, 
//							2 - женский.
//
// Возвращаемое значение:
//  Строка - Результат склонения ФИО в падеже.
//
Функция ПросклонятьФИО(ФИО, Падеж) Экспорт
	
	Возврат ОбщегоНазначенияРТВызовСервера.ПросклонятьФИО(ФИО, Падеж);
	
КонецФункции

// Проверяет необходимость установки компоненту склонения и устанавливает ее.
//
// Параметры:
//  ОбработчикОповещения - ОписаниеОповещения - оповещение после выполнения установки компоненты.
//
// Возвращаемые параметры:
//  Булево - результат установки компоненты
//
Функция КомпонентаСклоненияУстановлена(ОбработчикОповещения) Экспорт
	
	#Если ТонкийКлиент ИЛИ ВебКлиент Тогда
		Если НЕ ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаСклоненияФИО", "Decl") Тогда
			Если ОбработчикОповещения = Неопределено Тогда
				НачатьУстановкуВнешнейКомпоненты(, "ОбщийМакет.КомпонентаСклоненияФИО");
			Иначе
				НачатьУстановкуВнешнейКомпоненты(ОбработчикОповещения, "ОбщийМакет.КомпонентаСклоненияФИО");
			КонецЕсли;
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	#КонецЕсли
	
КонецФункции // КомпонентаСклоненияУстановлена()

#КонецОбласти

#Область РМК

Функция ПроверитьДанныеЭлектронногоЧека(Телефон, Email, ОбработчикОповещения) Экспорт
	
	Если Не ЗначениеЗаполнено(Телефон)
		И Не ЗначениеЗаполнено(Email) Тогда
		
		ЗаголовокИнформации = НСтр("ru = 'Ошибка данных электронного чека.'");
		ТекстИнформации		= НСтр("ru = 'Не заполнены данные номера телефона или адреса ЭП'");
		Кнопки				= Новый СписокЗначений;
		Кнопки.Добавить("ОтветДа",  "Закрыть");
		Кнопки.Добавить("ОтветНет", "Бумажный чек");
		
		ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации, , ОбработчикОповещения, , Кнопки);
		
		Возврат Ложь;
		
	КонецЕСли;
	
	Возврат Истина;
	
КонецФункции

// Открывает форму ФормаРМКУправляемаяИнформацииОбОшибке в модальном режиме из РМК (управляемый режим).
//
Функция ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации, 
												ОбработчикОповещения = Неопределено,
												ВладелецФормы = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаголовокИнформации", ПараметрыИнформации.ЗаголовокИнформации);
	
	Если ПараметрыИнформации.Свойство("ТекстИнформации") Тогда
		ПараметрыФормы.Вставить("ТекстИнформации", ПараметрыИнформации.ТекстИнформации);
	КонецЕсли;
	
	Если ПараметрыИнформации.Свойство("ТипОтвета") И ЗначениеЗаполнено(ПараметрыИнформации.ТипОтвета) Тогда
		ПараметрыФормы.Вставить("ТипОтвета", ПараметрыИнформации.ТипОтвета);
	КонецЕсли;
	
	Если ПараметрыИнформации.Свойство("ОтветПоУмолчанию") И ЗначениеЗаполнено(ПараметрыИнформации.ОтветПоУмолчанию) Тогда
		ПараметрыФормы.Вставить("ОтветПоУмолчанию", ПараметрыИнформации.ОтветПоУмолчанию);
	КонецЕсли;
	
	Если ПараметрыИнформации.Свойство("ПоказатьПодсказку") И ПараметрыИнформации.ПоказатьПодсказку Тогда
		ПараметрыФормы.Вставить("Подсказка", ПараметрыИнформации.Подсказка);
	КонецЕсли;
	
	Если ПараметрыИнформации.Свойство("Кнопки") И ЗначениеЗаполнено(ПараметрыИнформации.Кнопки) Тогда
		ПараметрыФормы.Вставить("Кнопки", ПараметрыИнформации.Кнопки);
	КонецЕсли;
	
	Если ВладелецФормы = Неопределено Тогда
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		
		// &ЗамерПроизводительности
		ОценкаПроизводительностиРТКлиент.НачатьЗамер(
								Истина, "ОбщаяФорма.ФормаРМКУправляемаяИнформацииОбОшибке.Открытие");
		
		ОткрытьФорму("ОбщаяФорма.ФормаРМКУправляемаяИнформацииОбОшибке", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
	Иначе
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		// &ЗамерПроизводительности
		ОценкаПроизводительностиРТКлиент.НачатьЗамер(
								Истина, "ОбщаяФорма.ФормаРМКУправляемаяИнформацииОбОшибке.Открытие");
		
		ОткрытьФорму("ОбщаяФорма.ФормаРМКУправляемаяИнформацииОбОшибке", ПараметрыФормы, ВладелецФормы,,,, ОбработчикОповещения, Режим); 
	КонецЕсли;
	
КонецФункции

// Процедура открывает форму ФормаРМКУправляемаяИнформацииОбОшибке с текстом информации.
//
Процедура ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, 
											 ТекстИнформации = Неопределено, 
											 ОбработчикОповещения = Неопределено, 
											 ВладелецФормы = Неопределено,
											 Подсказка = Неопределено) Экспорт
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
	ПараметрыИнформации.ЗаголовокИнформации = ЗаголовокИнформации;
	Если ТекстИнформации = Неопределено Тогда
		ПараметрыИнформации.ТекстИнформации = Символы.Таб;
	Иначе
		ПараметрыИнформации.ТекстИнформации = ТекстИнформации;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подсказка) Тогда
		ПараметрыИнформации.ПоказатьПодсказку = Истина;
		ПараметрыИнформации.Подсказка = Подсказка;
	КонецЕсли;
	
	ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации, ОбработчикОповещения, ВладелецФормы);
	
КонецПроцедуры

// Открывает форму ФормаРМКУправляемаяИнформацииОбОшибке с текстом вопроса.
//
Функция ВывестиВопросДляРМКУправляемой(ЗаголовокИнформации, 
									   ТекстИнформации = Неопределено, 
									   ОтветПоУмолчанию = "Нет", 
									   ОбработчикОповещения = Неопределено,
									   ВладелецФормы = Неопределено,
									   Кнопки = Неопределено) Экспорт

	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
	ПараметрыИнформации.ЗаголовокИнформации = ЗаголовокИнформации;
	Если ТекстИнформации = Неопределено Тогда
		ПараметрыИнформации.ТекстИнформации = Символы.Таб;
	Иначе
		ПараметрыИнформации.ТекстИнформации = ТекстИнформации;
	КонецЕсли;
	ПараметрыИнформации.ТипОтвета           = "Вопрос";
	ПараметрыИнформации.ОтветПоУмолчанию    = ОтветПоУмолчанию;
	ПараметрыИнформации.Кнопки    			= Кнопки;
	
	ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации, ОбработчикОповещения, ВладелецФормы);
	
КонецФункции

// Процедура - подключение открытия РМК (управляемый режим)события таймера.
//
Процедура ОткрытьМеню() Экспорт
	
	#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
		ПодключитьОбработчикОжидания("ОткрытьМенюРМКУправляемыйРежимПриЗапуске",0.1,Истина);
	#КонецЕсли
	
КонецПроцедуры

// Процедура открывает меню РМК.
//
Процедура ОткрытьМенюРМКУправляемыйРежим() Экспорт
	
	ФормаРабочегоМестаКассира = ОбщегоНазначенияРТВызовСервера.ЗначениеПараметраСеанса("ФормаРабочегоМестаКассира");
	
	Если Не ЗначениеЗаполнено(ФормаРабочегоМестаКассира) Тогда
		
		Если ОбщегоНазначенияРМКРТВызовСервера.ВключеноИспользованиеНовогоРМК() Тогда
			// &ЗамерПроизводительности
			ОценкаПроизводительностиРТКлиент.НачатьЗамер(
				Истина, "Обработка.РабочееМестоКассира.Форма.ФормаРМК.ПриОткрытии");
			ОбщегоНазначенияРМККлиент.ОткрытьРабочееМестоКассира();
		Иначе
			// &ЗамерПроизводительности
			ОценкаПроизводительностиРТКлиент.НачатьЗамер(
				Истина, "Обработка.РМКУправляемыйРежим.Форма.ФормаМеню.ПриОткрытии");
		
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуРМКУправляемый", ЭтотОбъект);
			Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
			ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаМеню",,,,,, ОбработчикОповещения, Режим);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Открывает интерфейс помощника настройки рабочего места кассира
//
Процедура ОткрытьИнтерфейсПомощникаНастройкиМестаКассира() Экспорт

	АвтозавершениеПриЗамере = Истина;
	
	ИспользоватьБРМК = ОбщегоНазначенияРМКРТВызовСервера.ВключеноИспользованиеНовогоРМК();
	ИмяФормыПомощника = ?(ИспользоватьБРМК,
		"Обработка.ПомощникНастройкиКассовогоМестаРМК.Форма.Форма",
		"Обработка.ПомощникНастройкиКассовогоМеста.Форма.Форма");
	ИмяСобытия = ?(ИспользоватьБРМК,
		"Обработка.ПомощникНастройкиКассовогоМестаРМК.Форма.Форма.ПриОткрытии",
		"Обработка.ПомощникНастройкиКассовогоМеста.Форма.Форма.ПриОткрытии");

		// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(АвтозавершениеПриЗамере, ИмяСобытия);
	ОткрытьФорму(ИмяФормыПомощника);
	
КонецПроцедуры

// Обработка результата открытия формы РМК управляемый.
//
Процедура ОповещениеОткрытьФормуРМКУправляемый(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если РезультатОткрытияФормы = "ЗавершитьРаботуСистемы" Тогда
		ЗавершитьРаботуСистемы(Ложь);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Прочие

// Выполняет установку стандартного
// заголовка приложения, используя имя представление текущего пользователя и
// и строку в константе ЗаголовокПриложения (если задана) или
// текущий заголовок приложения ПолучитьЗаголовокПриложения() (если константа не установлена).
//
Процедура УстановитьЗаголовокПриложенияРТ() Экспорт
	
	СвойстваКлиента = Новый Структура;
	
	// Установка даты клиента непосредственно перед вызовом, чтобы уменьшить погрешность.
	СвойстваКлиента.Вставить("ТекущаяДатаНаКлиенте", ОбщегоНазначенияКлиент.ДатаСеанса()); // Для расчета ПоправкаКВремениСеанса.
	СвойстваКлиента.Вставить("ТекущаяУниверсальнаяДатаВМиллисекундахНаКлиенте",
		ТекущаяУниверсальнаяДатаВМиллисекундах());
		
	ПредставлениеЗаголовка = "";
	ШаблонЗаголовка = НСтр("ru = '%ОсновнойЗаголовок'");
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыВызовСервера.ПараметрыРаботыКлиента(СвойстваКлиента);
	ЗаголовокПриложения = СтрЗаменить(ШаблонЗаголовка, "%ОсновнойЗаголовок", ПараметрыРаботыКлиента.ПодробнаяИнформация);
	
	Если ПараметрыРаботыКлиента.ДоступноИспользованиеРазделенныхДанных Тогда
		
		ПредставлениеЗаголовка = ПараметрыРаботыКлиента.ЗаголовокПриложения;
		ПредставлениеПользователя = ПараметрыРаботыКлиента.АвторизованныйПользователь;
		ПредставлениеМагазина = ПараметрыРаботыКлиента.ТекущийМагазин;
		Если ЗначениеЗаполнено(ПредставлениеМагазина) Тогда
			ШаблонЗаголовка = НСтр("ru = '%ОсновнойЗаголовок /%ТекущийМагазин / %Пользователь /'");
		Иначе
			ШаблонЗаголовка = НСтр("ru = '%ОсновнойЗаголовок / %Пользователь /'");
		КонецЕсли;
		
		Если Не ПустаяСтрока(СокрЛП(ПредставлениеЗаголовка)) Тогда
			ЗаголовокПриложения = СтрЗаменить(ШаблонЗаголовка, "%ОсновнойЗаголовок", СокрЛП(ПредставлениеЗаголовка));
		Иначе
			ЗаголовокПриложения = СтрЗаменить(ШаблонЗаголовка, "%ОсновнойЗаголовок", ПараметрыРаботыКлиента.СинонимКонфигурации);
		КонецЕсли;
		
		ЗаголовокПриложения = СтрЗаменить(ЗаголовокПриложения, "%Пользователь", ПредставлениеПользователя);
		ЗаголовокПриложения = СтрЗаменить(ЗаголовокПриложения, "%ТекущийМагазин", ПредставлениеМагазина);
	КонецЕсли;
	
	КлиентскоеПриложение.УстановитьЗаголовок(ЗаголовокПриложения);
КонецПроцедуры

// Устанавливает разрешенность редактирования для тех реквизитов, описание которых подготовлено в форме.
// Используется, когда доступность элементов формы изменяется самостоятельно, без
// использования функции УстановитьДоступностьЭлементовФормы.
//
// Параметры:
//  Форма        - УправляемаяФорма - форма, в которой требуется разрешить
//                 редактирование реквизитов объекта.
//  
//  Реквизиты    - Массив - реквизиты, которые нужно пометить, как разрешенные для изменения.
//  
//  РедактированиеРазрешено - Булево, начальное значение Истина - значение разрешенности редактирования реквизитов,
//                 которое нужно установить. Значение не будет установлено Истина, если нет права редактирования
//                 реквизита. Неопределено - не изменять разрешенность редактирования реквизитов.
//                 Ложь, Истина - установить указанное значение разрешенности редактирования реквизитов.
// 
//  ПравоРедактирования - Булево, начальное значение Неопределено - позволяет переопределить или доопределить
//                 возможность разблокировки реквизитов, которая вычисляется автоматически с помощью метода
//                 ПравоДоступа. Неопределено - не изменять ПравоРедактирования
//                 Ложь, Истина - установить указанное значение ПраваРедактирования для указанных реквизитов.
// 
Процедура УстановитьРазрешенностьРедактированияРеквизитовСПроверкой(Знач Форма, Знач Реквизиты, Знач РедактированиеРазрешено = Истина, Знач ПравоРедактирования = Неопределено) Экспорт
	
	Если ТипЗнч(Реквизиты) = Тип("Массив") Тогда
		
		СинонимыРеквизитов = Новый Массив;
		
		Для Каждого Реквизит Из Реквизиты Цикл
			ОписаниеРеквизита = Форма.ПараметрыЗапретаРедактированияРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", Реквизит))[0];
			СинонимыРеквизитов.Добавить(ОписаниеРеквизита.Представление);
		КонецЦикла;
		
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(Форма.Объект.Ссылка);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Реквизиты", Реквизиты);
		ДополнительныеПараметры.Вставить("РедактированиеРазрешено", РедактированиеРазрешено);
		ДополнительныеПараметры.Вставить("ПравоРедактирования", ПравоРедактирования);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("РазрешитьРедактированиеРеквизитовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ЗапретРедактированияРеквизитовОбъектовКлиент.ПроверитьСсылкиНаОбъект(ОбработчикОповещения, МассивСсылок, СинонимыРеквизитов);
		
	КонецЕсли;
	
	
	
КонецПроцедуры

// Устанавливает доступность элементов формы, связанных с заданными реквизитами,
// для которых установлено разрешение изменения. Если передать массив реквизитов,
// тогда сначала будет дополнен состав реквизитов разрешенных для изменения.
//   Если разблокировка элементов формы, связанных с заданными реквизитами
// снята для всех реквизитов, тогда кнопка разрешения редактирования блокируется.
//
// Параметры:
//  Форма        - УправляемаяФорма - форма, в которой требуется разрешить
//                 редактирование элементов формы, заданных реквизитов.
//  
//  Реквизиты    - Массив       - имена реквизитов, для которых нужно установить разрешенность изменения.
//                                Используется, когда функция РазрешитьРедактированиеРеквизитовОбъекта
//                                не используется.
//                 Неопределено - состав реквизитов доступных для редактирования не изменяется,
//                                а для элементов формы, связанных с реквизитами, изменение которых
//                                разрешено устанавливается доступность.
//
Процедура УстановитьДоступностьЭлементовФормы(Знач Форма, Знач Реквизиты = Неопределено) Экспорт
	
	УстановитьРазрешенностьРедактированияРеквизитовСПроверкой(Форма, Реквизиты);
	
	Для Каждого ОписаниеБлокируемогоРеквизита Из Форма.ПараметрыЗапретаРедактированияРеквизитов Цикл
		Если ОписаниеБлокируемогоРеквизита.РедактированиеРазрешено Тогда
			Для Каждого БлокируемыйЭлементФормы Из ОписаниеБлокируемогоРеквизита.БлокируемыеЭлементы Цикл
				ЭлементФормы = Форма.Элементы.Найти(БлокируемыйЭлементФормы.Значение);
				Если ЭлементФормы <> Неопределено Тогда
					Если ТипЗнч(ЭлементФормы) = Тип("ПолеФормы")
					 ИЛИ ТипЗнч(ЭлементФормы) = Тип("ТаблицаФормы") Тогда
						ЭлементФормы.ТолькоПросмотр = Ложь;
					Иначе
						ЭлементФормы.Доступность = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает фильтр, используемый для выбора файлов-изображений.
//
// Возвращаемое значение:
//  Строка - строка, содержащая фильтр для файлов-изображений.
//
Функция ФильтрФайловИзображений() Экспорт
	Возврат НСтр("ru = 'Все картинки (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf"
		                            + "|Все файлы(*.*)|*.*"
		                            + "|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle"
		                            + "|Формат GIF(*.gif*)|*.gif"
		                            + "|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg"
		                            + "|Формат PNG(*.png*)|*.png"
		                            + "|Формат TIFF(*.tif)|*.tif"
		                            + "|Формат icon(*.ico)|*.ico"
		                            + "|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'");
КонецФункции

// Обработчик завершения разблокирования реквизитов.
//
// Параметры:
//  Результат - Структура - результат выполнения операции.
//  ДополнительныеПараметры - Структура - дополнительные параметры выполнения операции.
//
Процедура РазрешитьРедактированиеРеквизитовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	Реквизиты = ДополнительныеПараметры.Реквизиты;
	РедактированиеРазрешено = ДополнительныеПараметры.РедактированиеРазрешено;
	ПравоРедактирования = ДополнительныеПараметры.ПравоРедактирования;
	
	Если Результат <> Неопределено Тогда
		Если ТипЗнч(Реквизиты) = Тип("Массив") Тогда
			
			Для Каждого Реквизит Из Реквизиты Цикл
				ОписаниеРеквизита = Форма.ПараметрыЗапретаРедактированияРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", Реквизит))[0];
				Если ТипЗнч(ПравоРедактирования) = Тип("Булево") Тогда
					ОписаниеРеквизита.ПравоРедактирования = ПравоРедактирования;
				КонецЕсли;
				Если ТипЗнч(РедактированиеРазрешено) = Тип("Булево") Тогда
					ОписаниеРеквизита.РедактированиеРазрешено = ОписаниеРеквизита.ПравоРедактирования И РедактированиеРазрешено;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Обновление доступности команды РазрешитьРедактированиеРеквизитовОбъекта.
		ВсеРеквизитыРазблокированы = Истина;
		
		Для каждого ОписаниеБлокируемогоРеквизита Из Форма.ПараметрыЗапретаРедактированияРеквизитов Цикл
			Если ОписаниеБлокируемогоРеквизита.ПравоРедактирования
			И НЕ ОписаниеБлокируемогоРеквизита.РедактированиеРазрешено Тогда
				ВсеРеквизитыРазблокированы = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ВсеРеквизитыРазблокированы Тогда
			Форма.Элементы.РазрешитьРедактированиеРеквизитовОбъекта.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает значение экспортных переменных модуля приложений из параметра сеанса.
// Необходимо для возможности создания объектов на сервере.
//
// Параметры:
//  ИмяПараметра - Строка - имя параметра для установки.
//  Кэш - Структура - значение кэшированных переменных.
//  КэшИзменен - Булево - признак изменения кэща.
//
// Возвращаемое значение:
//  Произвольное - значение переменной.
//
Функция ПолучитьЗначениеПеременной(ИмяПараметра, Кэш = Неопределено, КэшИзменен = Ложь) Экспорт
	
	Если Кэш = Неопределено Тогда
		// Кэш не был проинициализирован.
		Кэш = Новый Структура;
	Иначе
		// Ищем значение в структуре
		НайденноеЗначение = Неопределено;
		Если Кэш.Свойство(ИмяПараметра, НайденноеЗначение) Тогда
			Возврат НайденноеЗначение;
		КонецЕсли;
	КонецЕсли;
	
	Если ВРег(ИмяПараметра) = ВРег("ЗначенияДополнительныхПравПользователя") Тогда
		НайденноеЗначение = Новый Соответствие;
	КонецЕсли;
	
	Кэш.Вставить(ИмяПараметра, НайденноеЗначение);
	КэшИзменен = Истина;
	
	Возврат НайденноеЗначение;
	
КонецФункции

// Проверяет необходимость изменения параметра "Текущий магазин"
// и устанавливает заголовок системы.
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь для изменения.
//
Процедура ИзменитьТекущегоПользователя(Пользователь) Экспорт
	
	Если ОбщегоНазначенияРТВызовСервера.ТекущийПользовательИзменен(Пользователь) Тогда
		УстановитьЗаголовокПриложенияРТ()
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действие после записи объекта метаданных.
//
// Параметры:
//  Форма - УправляемаяФорма - форма родитель.
//  Объект - ЛюбаяСсылка - ссылка на объект метаданных основание.
//  ПараметрыЗаписи - Структура - структура параметров записи объекта.
//
Процедура ВыполнитьДействияПослеЗаписи(Форма, Объект, ПараметрыЗаписи) Экспорт
	
	Если Не ПараметрыЗаписи.Свойство("НовыйОбъект") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи.НовыйОбъект Тогда
		ТекстЗаголовка = НСтр("ru='Создание:'");
	Иначе
		ТекстЗаголовка = НСтр("ru='Изменение:'");
	КонецЕсли;
	ОповеститьПользователяОбИзмененииОбъекта(Объект.Ссылка, ТекстЗаголовка);
	
	Если Форма.ПринудительноЗакрытьФорму Тогда
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьФорму", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура оповещение, записывает в историю пользователя изменение объекта, как делает платформа
//
// Параметры:
//  СсылкаНаОбъект - ЛюбаяСсылка - измененный объект.
//  ТекстЗаголовка - Строка - текст заголовка строкой.
//
Процедура ОповеститьПользователяОбИзмененииОбъекта(СсылкаНаОбъект, ТекстЗаголовка = "") Экспорт
	
	Если ПустаяСтрока(ТекстЗаголовка) Тогда	
		ТекстЗаголовка = НСтр("ru='Изменение:'");
	КонецЕсли;
	ТекстСообщения = Строка(СсылкаНаОбъект);
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СсылкаНаОбъект);
	ПоказатьОповещениеПользователя(ТекстЗаголовка, НавигационнаяСсылка, ТекстСообщения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// Служебная функция возвращает пользователя с учетом измененных прав
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - пользователь с учетом измененных прав.
//
Функция ПользовательСУчетомИзмененныхПрав() Экспорт
	
	Пользователь = глЗначениеПеременной("ПользовательИзмененныхПрав");
	
	Если Пользователь = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = ПользователиКлиент.ТекущийПользователь();
	КонецЕсли;
	
	Возврат Пользователь
КонецФункции // ПользовательСУчетомИзмененныхПрав()

#Область ЗаписьОбъектов

// Записать объект и замерить длительность его записи.
//
// Параметры:
//  Форма - УправляемаяФорма - форма в которой выполняется вызов этой функции.
//  ЕстьВопросыПередЗаписью - Булево - Истина, если при записи могут отображаться вопросы пользователю.
//  ДействиеПослеЗаписи - ОписаниеОповещения - обработчик, выполняемый после записи объекта.
//
Процедура Записать(Форма, ЕстьВопросыПередЗаписью = Ложь, ДействиеПослеЗаписи = Неопределено) Экспорт
	
	ПараметрыЗаписи = СтруктураПараметровЗаписиОбъекта();
	ПараметрыЗаписи.ЕстьВопросыПередЗаписью = ЕстьВопросыПередЗаписью;
	
	Если ДействиеПослеЗаписи <> Неопределено Тогда
		ПараметрыЗаписи.Вставить("ДействиеПослеЗаписи", ДействиеПослеЗаписи);
	КонецЕсли;
	
	ЗаписатьОбъект(Форма, ПараметрыЗаписи);
	
КонецПроцедуры

// Провести документ и замерить длительность его проведения.
//
// Параметры:
//  Форма - УправляемаяФорма - форма в которой выполняется вызов этой функции.
//  ЕстьВопросыПередЗаписью - Булево - Истина, если при записи могут отображаться вопросы пользователю.
//  ДействиеПослеЗаписи - ОписаниеОповещения - обработчик, выполняемый после записи объекта.
//
Процедура Провести(Форма, ЕстьВопросыПередЗаписью = Ложь, ДействиеПослеЗаписи = Неопределено) Экспорт
	
	ПараметрыЗаписи = СтруктураПараметровЗаписиОбъекта();
	ПараметрыЗаписи.ЕстьВопросыПередЗаписью = ЕстьВопросыПередЗаписью;
	ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	
	Если ДействиеПослеЗаписи <> Неопределено Тогда
		ПараметрыЗаписи.Вставить("ДействиеПослеЗаписи", ДействиеПослеЗаписи);
	КонецЕсли;
	
	ЗаписатьОбъект(Форма, ПараметрыЗаписи);
	
КонецПроцедуры

Функция ЗаписатьОбъект(Форма, ПараметрыЗаписи)
	
	Перем Проведен, ДействиеПослеЗаписи;
	
	ОчиститьСообщения();
	
	Если Не ПараметрыЗаписи.ЕстьВопросыПередЗаписью Тогда
		Если Не Форма.Объект.Свойство("Проведен", Проведен) Тогда
			Проведен =  Ложь;
		КонецЕсли;
		
		Если Проведен Тогда
			ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
		
		НачатьЗамерВремениЗаписиОбъекта(Форма, ПараметрыЗаписи);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ДействиеПослеЗаписи", ДействиеПослеЗаписи) Тогда
		ПараметрыЗаписи.Удалить("ДействиеПослеЗаписи");
	КонецЕсли;
	
	Результат = Форма.Записать(ПараметрыЗаписи);
	
	Если ДействиеПослеЗаписи <> Неопределено Тогда
		Если Результат Тогда
			ВыполнитьОбработкуОповещения(ДействиеПослеЗаписи, Результат);
		КонецЕсли;
		
		ПараметрыЗаписи.Вставить("ДействиеПослеЗаписи", ДействиеПослеЗаписи);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураПараметровЗаписиОбъекта()
	
	ПараметрыЗаписи = Новый Структура;
	
	ПараметрыЗаписи.Вставить("ЕстьВопросыПередЗаписью", Ложь);
	ПараметрыЗаписи.Вставить("НовыйОбъект", Ложь);
	ПараметрыЗаписи.Вставить("ПринудительноЗакрытьФорму", Ложь);
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
	ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Неоперативный);
	
	Возврат ПараметрыЗаписи;
	
КонецФункции

Процедура НачатьЗамерВремениЗаписиОбъекта(Форма, ПараметрыЗаписи)
	
	Перем ПринудительноЗакрытьФорму;
	Перем РежимЗаписи;
	
	Если Не ПараметрыЗаписи.Свойство("ПринудительноЗакрытьФорму", ПринудительноЗакрытьФорму) Тогда
		ПринудительноЗакрытьФорму = Ложь;
	КонецЕсли;
	
	Если Не ПараметрыЗаписи.Свойство("РежимЗаписи", РежимЗаписи) Тогда
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Запись И Не ПринудительноЗакрытьФорму Тогда
		ШаблонКлючевойОперации = "Записать.%1";
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Запись И ПринудительноЗакрытьФорму Тогда
		ШаблонКлючевойОперации = "ЗаписатьИЗакрыть.%1";
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение И Не ПринудительноЗакрытьФорму Тогда
		ШаблонКлючевойОперации = "Провести.%1";
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение И ПринудительноЗакрытьФорму Тогда
		ШаблонКлючевойОперации = "ПровестиИЗакрыть.%1";
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И Не ПринудительноЗакрытьФорму Тогда
		ШаблонКлючевойОперации = "ОтменитьПроведение.%1";
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И ПринудительноЗакрытьФорму Тогда
		ШаблонКлючевойОперации = "ОтменитьПроведениеИЗакрыть.%1";
	КонецЕсли;
	
	ИмяКлючевойОперации = СтрШаблон(ШаблонКлючевойОперации, Форма.ИмяФормы);
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, ИмяКлючевойОперации);
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#Область НомерДокументаКассыККМ

// Заполняет глобальную переменной НомерДокументаКассыККМ
//
// КассаККМ - СправочникСсылка.КассыККМ - кассаККМ по которой необходимо заполнить номер документа.
//
Процедура ЗаполнитьНомерДокументаКассыККМ(КассаККМ) Экспорт
	
	Если ЗначениеЗаполнено(КассаККМ) И НомерДокументаКассыККМ[КассаККМ] = Неопределено Тогда
		НомерЧекаККМ = ОбщегоНазначенияРТВызовСервера.ПоследнийНомерДокументаКассыККМ(КассаККМ);
	КонецЕсли; 
	Если Не (НомерЧекаККМ <> Неопределено И НомерЧекаККМ <> 0) Тогда
		НомерЧекаККМ = 1;
	КонецЕсли; 
	НомерДокументаКассыККМ.Вставить(КассаККМ, НомерЧекаККМ);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьВозможностьЗаполненияТабличнойЧастиОчисткаТЧ(Форма, ТабличнаяЧасть, СтруктураРеквизитов, ЗаполнятьТабличнуюЧасть, ОповещениеЗавершения)
	
	Если ТабличнаяЧасть <> Неопределено И ТабличнаяЧасть.Количество() > 0 И ЗаполнятьТабличнуюЧасть Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
		ДополнительныеПараметры.Вставить("ЗаполнятьТабличнуюЧасть", ЗаполнятьТабличнуюЧасть);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеВопросаОчисткиТЧ", ОбщегоНазначенияРТКлиент, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Табличная часть будет очищена, продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
	Иначе
		Если СтруктураРеквизитов <> Неопределено
			И ЗаполнятьТабличнуюЧасть Тогда
			ЗаполнятьТабличнуюЧасть = ПроверитьЗаполнениеРеквизитов(Форма.Объект, СтруктураРеквизитов);
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, ЗаполнятьТабличнуюЧасть);	
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти