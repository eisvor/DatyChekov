////////////////////////////////////////////////////////////////////////////////
// ИнтеграцияWebKassaКлиент: общий механизм интеграции с сервисом 1С:WebKassa.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Процедура интерактивно запрашивает логин и пароль у пользователя.
//
Процедура НачатьАутентификациюПользователя(ОповещениеПриЗавершении, НастройкиОрганизации = Истина) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ОповещениеПриЗавершении.ДополнительныеПараметры.Вставить("ОповещениеПриОшибкеАвторизации", ОповещениеПриЗавершении);
	
	Организация = Неопределено;
	Если НастройкиОрганизации Тогда
		ОповещениеПриЗавершении.ДополнительныеПараметры.Параметры.Свойство("Организация", Организация);
		
		АдресСервиса = ИнтеграцияWebKassaВызовСервера.АдресСервиса(Организация);
		Если ОповещениеПриЗавершении.ДополнительныеПараметры.ПараметрыПодключения.Свойство("АдресСервиса") Тогда
			ОповещениеПриЗавершении.ДополнительныеПараметры.ПараметрыПодключения.АдресСервиса = АдресСервиса;
		Иначе
			ОповещениеПриЗавершении.ДополнительныеПараметры.ПараметрыПодключения.Вставить("АдресСервиса", АдресСервиса);
		КонецЕсли;
		
		ОповещениеПриЗавершении.ДополнительныеПараметры.Вставить("Организация", Организация);
	КонецЕсли;
	ДополнительныеПараметры.Вставить("Организация", Организация);
	
	ЛогинПарольТокен = ПолучитьПарольИзГлобальнойПеременной(Организация);
	Если ЛогинПарольТокен = Неопределено Тогда
		ПараметрыФормы = Новый Структура("ПредлагатьЗапомнитьПароль", Организация<>Неопределено);
		ПараметрыФормы.Вставить("Организация", Организация);
		ОповещениеПослеАутентификации = Новый ОписаниеОповещения("НачатьАутентификациюПользователя_ПослеВводаДанныхАутентификации", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.Панель1СWebKassa.Форма.АутентификацияПользователя", ПараметрыФормы, , , , , ОповещениеПослеАутентификации);
	ИначеЕсли ЛогинПарольТокен.Свойство("Токен") Тогда
		ОповещениеПриЗавершении.ДополнительныеПараметры.ПараметрыПодключения.Вставить("ТокенАвторизации", ЛогинПарольТокен.Токен);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Новый Структура("РезультатВыполнения", Истина));
	Иначе
		НачатьАутентификациюПользователя_ПослеВводаДанныхАутентификации(ЛогинПарольТокен, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Процедура осуществляет аутентификацию пользователя по логину и паролю на сервере WebKassa
//
Процедура НачатьАутентификациюПользователя_ПослеВводаДанныхАутентификации(Результат, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = Новый Массив();
	
	Если Результат = Неопределено Тогда
		
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не удалось получить данные пользователя.
		|Для корректной работы устройства необходимо ввести логин и пароль пользователя.'"));
		
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("РезультатВыполнения, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	АдресСервиса = ДополнительныеПараметры.ОповещениеПриЗавершении.ДополнительныеПараметры.ПараметрыПодключения.АдресСервиса;
	Если АдресСервиса = Неопределено Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не настроены параметры устройства.
		|Для корректной работы устройства необходимо задать параметры его работы.
		|Сделать это можно при помощи формы ""Настройка параметров"" модели
		|подключаемого оборудования в форме ""Подключение и настройка оборудования"".'"));
		
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("РезультатВыполнения, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Login",    Результат.Пользователь);
	ПараметрыЗапроса.Вставить("Password", Результат.ПарольПользователя);
	
	Если ТипЗнч(ДополнительныеПараметры) <> Тип("Структура") Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	ЗапомнитьПароль = Ложь;
	Результат.Свойство("ЗапомнитьПароль", ЗапомнитьПароль);
	ДополнительныеПараметры.Вставить("ЗапомнитьЛогинПароль", ЗапомнитьПароль);
	
	ДополнительныеПараметры.ОповещениеПриЗавершении.ДополнительныеПараметры.Вставить("ИДУстройства", Результат.Пользователь);
	
	НачатьВыполнениеМетодаВебСервиса(АдресСервиса, "Authorize", ПараметрыЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НачатьРегистрациюОрганизации(ОповещениеПриЗавершении, ВходныеПараметры, ПараметрыПодключения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Параметры"       , ВходныеПараметры);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , Новый Массив);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Результат = Новый Структура("РезультатВыполнения", Истина);
	НачатьРегистрациюОрганизации_ПослеАутентификации(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НачатьРегистрациюОрганизации_ПослеАутентификации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.РезультатВыполнения Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("РезультатВыполнения, ВыходныеПараметры", Ложь, Результат.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	АдресСервиса = ДополнительныеПараметры.ПараметрыПодключения.АдресСервиса;
	
	ДанныеОрганизации = Новый Структура;
	ДанныеОрганизации.Вставить("Xin",  ДополнительныеПараметры.Параметры.ИНН);
	ДанныеОрганизации.Вставить("IsLegal", ДополнительныеПараметры.Параметры.ПризнакЮрЛица);
	ДанныеОрганизации.Вставить("FullName",  ДополнительныеПараметры.Параметры.ПолноеНаименование);
	ДанныеОрганизации.Вставить("LegalAddress",  ДополнительныеПараметры.Параметры.ЮридическийАдрес);
	ДанныеОрганизации.Вставить("TaxationType",  ДополнительныеПараметры.Параметры.ВидНалогообложения);
	ДанныеОрганизации.Вставить("EconomicActivityCode",  ДополнительныеПараметры.Параметры.КодОКЭД);
	ДанныеОрганизации.Вставить("VATPayer",   ДополнительныеПараметры.Параметры.ПлательщикНДС);
	ДанныеОрганизации.Вставить("VATSeries",  ДополнительныеПараметры.Параметры.СерияНДС);
	ДанныеОрганизации.Вставить("VATNumber",  ДополнительныеПараметры.Параметры.НомерНДС);
	
	ДанныеПользователя = Новый Структура;
	ДанныеПользователя.Вставить("FullName",    ДополнительныеПараметры.Параметры.ФИО);
	ДанныеПользователя.Вставить("PhoneNumber", ДополнительныеПараметры.Параметры.НомерТелефона);
	ДанныеПользователя.Вставить("Email",       ДополнительныеПараметры.Параметры.Email);
	ДанныеПользователя.Вставить("Password",    ДополнительныеПараметры.Параметры.Пароль);
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Organization", ДанныеОрганизации);
	ПараметрыЗапроса.Вставить("Employee",     ДанныеПользователя);
	
	НачатьВыполнениеМетодаВебСервиса(АдресСервиса, "OrganizationRegistration", ПараметрыЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НачатьРегистрациюОрганизации_ПослеОтветаВебСервера(РезультатЗапроса, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = Новый Массив;
	Если ТипЗнч(РезультатЗапроса) <> Тип("Структура") Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить("999");
			ВыходныеПараметры.Добавить("Ошибка работы с сервером.");
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если РезультатЗапроса.РезультатВыполнения = Ложь И ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатЗапроса.РезультатВыполнения, РезультатЗапроса.ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = Истина;
	
	Попытка
		ОбъектыJSON = РезультатЗапроса.ОбъектыJSON;
		Для Каждого ОбъектJSON из ОбъектыJSON Цикл
			Если ОбъектJSON.Ключ = "Errors" И ОбъектJSON.Значение<>Неопределено Тогда
				РезультатВыполнения = Ложь;
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить("");
				ВыходныеПараметры[1] = ИнтеграцияWebKassaКлиентСервер.ПолучитьОписаниеОшибки(ОбъектJSON.Значение[0].Code) + "(" + ОбъектJSON.Значение[0].Text + ")";
			ИначеЕсли ОбъектJSON.Ключ = "Data" Тогда
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(ИнтеграцияWebKassaКлиентПереопределяемый.ДатаСеанса());
			КонецЕсли;
		КонецЦикла;
	Исключение
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ВыходныеПараметры[1] = НСтр("ru='Ошибка работы с сервером. Невозможно распознать ответ сервера.'");
		РезультатВыполнения = Ложь;
	КонецПопытки;
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатЗапроса.РезультатВыполнения, РезультатЗапроса.ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПолучениеСведенийОрганизации(ОповещениеПриЗавершении, ВходныеПараметры, ПараметрыПодключения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Параметры"       , ВходныеПараметры);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , Новый Массив);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПолучениеСведенийОрганизации_ПослеАутентификации", ЭтотОбъект, ДополнительныеПараметры);
	НачатьАутентификациюПользователя(ОписаниеОповещения);
	
КонецПроцедуры

Процедура НачатьПолучениеСведенийОрганизацииБезНастроек(ОповещениеПриЗавершении, ВходныеПараметры, ПараметрыПодключения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Параметры"       , ВходныеПараметры);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , Новый Массив);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПолучениеСведенийОрганизации_ПослеАутентификации", ЭтотОбъект, ДополнительныеПараметры);
	НачатьАутентификациюПользователя(ОписаниеОповещения, Ложь);
	
КонецПроцедуры

Процедура НачатьПолучениеСведенийОрганизации_ПослеАутентификации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.РезультатВыполнения Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("РезультатВыполнения, ВыходныеПараметры", Ложь, Результат.ВыходныеПараметры);
				ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	АдресСервиса = ДополнительныеПараметры.ПараметрыПодключения.АдресСервиса;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Token",      ДополнительныеПараметры.ПараметрыПодключения.ТокенАвторизации);
	
	НачатьВыполнениеМетодаВебСервиса(АдресСервиса, "Organization/OrganizationInfo", ПараметрыЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НачатьРегистрациюКассира(ОповещениеПриЗавершении, ВходныеПараметры, ПараметрыПодключения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Параметры"       , ВходныеПараметры);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , Новый Массив);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьРегистрациюКассира_ПослеАутентификации", ЭтотОбъект, ДополнительныеПараметры);
	НачатьАутентификациюПользователя(ОписаниеОповещения);
	
КонецПроцедуры

Процедура НачатьРегистрациюКассира_ПослеАутентификации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.РезультатВыполнения Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("РезультатВыполнения, ВыходныеПараметры", Ложь, Результат.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	АдресСервиса = ДополнительныеПараметры.ПараметрыПодключения.АдресСервиса;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Token",      ДополнительныеПараметры.ПараметрыПодключения.ТокенАвторизации);
	ПараметрыЗапроса.Вставить("FullName",   ДополнительныеПараметры.Параметры.ФИО);
	ПараметрыЗапроса.Вставить("PhoneNumber",ДополнительныеПараметры.Параметры.НомерТелефона);
	ПараметрыЗапроса.Вставить("Email",      ДополнительныеПараметры.Параметры.Логин);
	ПараметрыЗапроса.Вставить("Password",   ДополнительныеПараметры.Параметры.Пароль);
	ПараметрыЗапроса.Вставить("Cashboxes",  ДополнительныеПараметры.Параметры.ПереченьКасс);
	
	НачатьВыполнениеМетодаВебСервиса(АдресСервиса, "Employee/Register", ПараметрыЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НачатьИзменениеПравКассира(ОповещениеПриЗавершении, ВходныеПараметры, ПараметрыПодключения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Параметры"       , ВходныеПараметры);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , Новый Массив);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьИзменениеПравКассира_ПослеАутентификации", ЭтотОбъект, ДополнительныеПараметры);
	НачатьАутентификациюПользователя(ОписаниеОповещения);
	
КонецПроцедуры

Процедура НачатьИзменениеПравКассира_ПослеАутентификации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.РезультатВыполнения Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("РезультатВыполнения, ВыходныеПараметры", Ложь, Результат.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	АдресСервиса = ДополнительныеПараметры.ПараметрыПодключения.АдресСервиса;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Token",      ДополнительныеПараметры.ПараметрыПодключения.ТокенАвторизации);
	ПараметрыЗапроса.Вставить("EmployeeLogin",  ДополнительныеПараметры.Параметры.ИмяПользователя);
	ПараметрыЗапроса.Вставить("Cashboxes",  ДополнительныеПараметры.Параметры.ПереченьКасс);
	
	НачатьВыполнениеМетодаВебСервиса(АдресСервиса, "Employee/AccessToCashboxes", ПараметрыЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НачатьРегистрациюКассы(ОповещениеПриЗавершении, ВходныеПараметры, ПараметрыПодключения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Параметры"       , ВходныеПараметры);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , Новый Массив);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьРегистрациюКассы_ПослеАутентификации", ЭтотОбъект, ДополнительныеПараметры);
	НачатьАутентификациюПользователя(ОписаниеОповещения);
	
КонецПроцедуры

Процедура НачатьРегистрациюКассы_ПослеАутентификации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.РезультатВыполнения Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("РезультатВыполнения, ВыходныеПараметры", Ложь, Результат.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	АдресСервиса = ДополнительныеПараметры.ПараметрыПодключения.АдресСервиса;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Token",      ДополнительныеПараметры.ПараметрыПодключения.ТокенАвторизации);
	ПараметрыЗапроса.Вставить("Name",  ДополнительныеПараметры.Параметры.Наименование);
	ПараметрыЗапроса.Вставить("TimeZone",   ДополнительныеПараметры.Параметры.ЧасовойПояс);
	ПараметрыЗапроса.Вставить("ProductRegistrationNumber", ДополнительныеПараметры.Параметры.РегистрационныйНомерПродукта);
	ПараметрыЗапроса.Вставить("ModelType", ДополнительныеПараметры.Параметры.ТипМоделиККМ);
	ПараметрыЗапроса.Вставить("Address", ДополнительныеПараметры.Параметры.АдресККМ);
	
	НачатьВыполнениеМетодаВебСервиса(АдресСервиса, "Cashbox/Register", ПараметрыЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НачатьПолучениеСпискаКасс(ОповещениеПриЗавершении, ВходныеПараметры, ПараметрыПодключения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Параметры"       , ВходныеПараметры);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , Новый Массив);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПолучениеСпискаКасс_ПослеАутентификации", ЭтотОбъект, ДополнительныеПараметры);
	НачатьАутентификациюПользователя(ОписаниеОповещения);
	
КонецПроцедуры

Процедура НачатьПолучениеСпискаКасс_ПослеАутентификации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.РезультатВыполнения Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("РезультатВыполнения, ВыходныеПараметры", Ложь, Результат.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	АдресСервиса = ДополнительныеПараметры.ПараметрыПодключения.АдресСервиса;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Token", ДополнительныеПараметры.ПараметрыПодключения.ТокенАвторизации);
	
	НачатьВыполнениеМетодаВебСервиса(АдресСервиса, "Cashboxes/List", ПараметрыЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НачатьПолучениеСпискаПользователей(ОповещениеПриЗавершении, ВходныеПараметры, ПараметрыПодключения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Параметры"       , ВходныеПараметры);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , Новый Массив);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПолучениеСпискаПользователей_ПослеАутентификации", ЭтотОбъект, ДополнительныеПараметры);
	НачатьАутентификациюПользователя(ОписаниеОповещения);
	
КонецПроцедуры

Процедура НачатьПолучениеСпискаПользователей_ПослеАутентификации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.РезультатВыполнения Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("РезультатВыполнения, ВыходныеПараметры", Ложь, Результат.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	АдресСервиса = ДополнительныеПараметры.ПараметрыПодключения.АдресСервиса;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Token", ДополнительныеПараметры.ПараметрыПодключения.ТокенАвторизации); 
	НачатьВыполнениеМетодаВебСервиса(АдресСервиса, "Employee/List", ПараметрыЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НачатьПолучениеИнформацииКассы(ОповещениеПриЗавершении, ВходныеПараметры, ПараметрыПодключения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Параметры"       , ВходныеПараметры);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , Новый Массив);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПолучениеИнформацииКассы_ПослеАутентификации", ЭтотОбъект, ДополнительныеПараметры);
	НачатьАутентификациюПользователя(ОписаниеОповещения);
	
КонецПроцедуры

Процедура НачатьПолучениеИнформацииКассы_ПослеАутентификации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.РезультатВыполнения Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("РезультатВыполнения, ВыходныеПараметры", Ложь, Результат.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	АдресСервиса = ДополнительныеПараметры.ПараметрыПодключения.АдресСервиса;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Token", ДополнительныеПараметры.ПараметрыПодключения.ТокенАвторизации);
	ПараметрыЗапроса.Вставить("CashboxUniqueNumber", ДополнительныеПараметры.Параметры.СерийныйНомер);
	
	НачатьВыполнениеМетодаВебСервиса(АдресСервиса, "Cashbox/RegistrationInformation", ПараметрыЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НачатьСкачиваниеКарточкиКассы(ОповещениеПриЗавершении, ВходныеПараметры, ПараметрыПодключения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Параметры"       , ВходныеПараметры);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , Новый Массив);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьСкачиваниеКарточкиКассы_ПослеАутентификации", ЭтотОбъект, ДополнительныеПараметры);
	НачатьАутентификациюПользователя(ОписаниеОповещения);
	
КонецПроцедуры

Процедура НачатьСкачиваниеКарточкиКассы_ПослеАутентификации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.РезультатВыполнения Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("РезультатВыполнения, ВыходныеПараметры", Ложь, Результат.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	АдресСервиса = ДополнительныеПараметры.ПараметрыПодключения.АдресСервиса;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Token",               ДополнительныеПараметры.ПараметрыПодключения.ТокенАвторизации);
	ПараметрыЗапроса.Вставить("CashboxUniqueNumber", ДополнительныеПараметры.Параметры.СерийныйНомер);
	
	НачатьВыполнениеМетодаВебСервиса(АдресСервиса, "Cashbox/DownloadCard", ПараметрыЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НачатьПодтверждениеРегистрацииКассы(ОповещениеПриЗавершении, ВходныеПараметры, ПараметрыПодключения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Параметры"       , ВходныеПараметры);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , Новый Массив);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПодтверждениеРегистрацииКассы_ПослеАутентификации", ЭтотОбъект, ДополнительныеПараметры);
	НачатьАутентификациюПользователя(ОписаниеОповещения);
	
КонецПроцедуры

Процедура НачатьПодтверждениеРегистрацииКассы_ПослеАутентификации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.РезультатВыполнения Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("РезультатВыполнения, ВыходныеПараметры", Ложь, Результат.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	АдресСервиса = ДополнительныеПараметры.ПараметрыПодключения.АдресСервиса;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Token",               ДополнительныеПараметры.ПараметрыПодключения.ТокенАвторизации);
	ПараметрыЗапроса.Вставить("CashboxUniqueNumber", ДополнительныеПараметры.Параметры.СерийныйНомер);
	ПараметрыЗапроса.Вставить("RegistrationNumber",  ДополнительныеПараметры.Параметры.РегистрационныйНомерКГД);
	ПараметрыЗапроса.Вставить("IdentityNumber",      ДополнительныеПараметры.Параметры.ИдентификационныйНомерОФД);
	ПараметрыЗапроса.Вставить("OfdToken",            ДополнительныеПараметры.Параметры.ТокенОФД);
	ПараметрыЗапроса.Вставить("Ofd",                 ДополнительныеПараметры.Параметры.ОФД);
	
	НачатьВыполнениеМетодаВебСервиса(АдресСервиса, "Cashbox/ConfirmOfdRegistration", ПараметрыЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НачатьАктивациюКассы(ОповещениеПриЗавершении, ВходныеПараметры, ПараметрыПодключения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Параметры"       , ВходныеПараметры);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , Новый Массив);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьАктивациюКассы_ПослеАутентификации", ЭтотОбъект, ДополнительныеПараметры);
	НачатьАутентификациюПользователя(ОписаниеОповещения);
	
КонецПроцедуры

Процедура НачатьАктивациюКассы_ПослеАутентификации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.РезультатВыполнения Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("РезультатВыполнения, ВыходныеПараметры", Ложь, Результат.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	АдресСервиса = ДополнительныеПараметры.ПараметрыПодключения.АдресСервиса;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Token",               ДополнительныеПараметры.ПараметрыПодключения.ТокенАвторизации);
	ПараметрыЗапроса.Вставить("CashboxUniqueNumber", ДополнительныеПараметры.Параметры.СерийныйНомер);
	ПараметрыЗапроса.Вставить("CardNumber",          ДополнительныеПараметры.Параметры.НомерКарты);
	ПараметрыЗапроса.Вставить("ActivationNumber",    ДополнительныеПараметры.Параметры.КодАктивации);
	ПараметрыЗапроса.Вставить("PartnerXin",          ДополнительныеПараметры.Параметры.НомерПартнера);
	
	НачатьВыполнениеМетодаВебСервиса(АдресСервиса, "Cashbox/Activate", ПараметрыЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НачатьПолучениеСпискаПартнеров(ОповещениеПриЗавершении, ВходныеПараметры, ПараметрыПодключения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Параметры"       , ВходныеПараметры);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , Новый Массив);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПолучениеСпискаПартнеров_ПослеАутентификации", ЭтотОбъект, ДополнительныеПараметры);
	НачатьАутентификациюПользователя(ОписаниеОповещения);
	
КонецПроцедуры

Процедура НачатьПолучениеСпискаПартнеров_ПослеАутентификации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.РезультатВыполнения Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("РезультатВыполнения, ВыходныеПараметры", Ложь, Результат.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	АдресСервиса = ДополнительныеПараметры.ПараметрыПодключения.АдресСервиса;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Token", ДополнительныеПараметры.ПараметрыПодключения.ТокенАвторизации); 
	НачатьВыполнениеМетодаВебСервиса(АдресСервиса, "Partners/List", ПараметрыЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НачатьСменуТокенаОФД(ОповещениеПриЗавершении, ВходныеПараметры, ПараметрыПодключения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Параметры"       , ВходныеПараметры);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , Новый Массив);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьСменуТокенаОФД_ПослеАутентификации", ЭтотОбъект, ДополнительныеПараметры);
	НачатьАутентификациюПользователя(ОписаниеОповещения);
	
КонецПроцедуры

Процедура НачатьСменуТокенаОФД_ПослеАутентификации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.РезультатВыполнения Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("РезультатВыполнения, ВыходныеПараметры", Ложь, Результат.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	АдресСервиса = ДополнительныеПараметры.ПараметрыПодключения.АдресСервиса;
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Token",               ДополнительныеПараметры.ПараметрыПодключения.ТокенАвторизации);
	ПараметрыЗапроса.Вставить("CashboxUniqueNumber", ДополнительныеПараметры.Параметры.СерийныйНомер);
	ПараметрыЗапроса.Вставить("OfdToken",            ДополнительныеПараметры.Параметры.ТокенОФД);
	НачатьВыполнениеМетодаВебСервиса(АдресСервиса, "Cashbox/ChangeToken", ПараметрыЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НачатьСменуПароля_ПослеАутентификации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.РезультатВыполнения Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("РезультатВыполнения, ВыходныеПараметры", Ложь, Результат.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	АдресСервиса = ДополнительныеПараметры.ПараметрыПодключения.АдресСервиса;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Token",       ДополнительныеПараметры.ПараметрыПодключения.ТокенАвторизации);
	ПараметрыЗапроса.Вставить("OldPassword", ДополнительныеПараметры.Параметры.ТекущийПароль);
	ПараметрыЗапроса.Вставить("NewPassword", ДополнительныеПараметры.Параметры.НовыйПароль);
	
	НачатьВыполнениеМетодаВебСервиса(АдресСервиса, "Employee/ChangePassword", ПараметрыЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НачатьПолучениеЧекаПоНомеру(ОповещениеПриЗавершении, ВходныеПараметры, ПараметрыПодключения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Параметры"       , ВходныеПараметры);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , Новый Массив);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПолучениеЧекаПоНомеру_ПослеАутентификации", ЭтотОбъект, ДополнительныеПараметры);
	НачатьАутентификациюПользователя(ОписаниеОповещения);
	
КонецПроцедуры

Процедура НачатьПолучениеЧекаПоНомеру_ПослеАутентификации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.РезультатВыполнения Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("РезультатВыполнения, ВыходныеПараметры", Ложь, Результат.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	АдресСервиса = ДополнительныеПараметры.ПараметрыПодключения.АдресСервиса;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Token",               ДополнительныеПараметры.ПараметрыПодключения.ТокенАвторизации);
	ПараметрыЗапроса.Вставить("CashboxUniqueNumber", ДополнительныеПараметры.Параметры.СерийныйНомер);
	ПараметрыЗапроса.Вставить("Number",              ДополнительныеПараметры.Параметры.НомерЧека);
	ПараметрыЗапроса.Вставить("ShiftNumber",         ДополнительныеПараметры.Параметры.НомерСмены);
	
	НачатьВыполнениеМетодаВебСервиса(АдресСервиса, "Check/HistoryByNumber", ПараметрыЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НачатьПолучениеОтчетаПоНомеру(ОповещениеПриЗавершении, ВходныеПараметры, ПараметрыПодключения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Параметры"       , ВходныеПараметры);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , Новый Массив);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПолучениеОтчетаПоНомеру_ПослеАутентификации", ЭтотОбъект, ДополнительныеПараметры);
	НачатьАутентификациюПользователя(ОписаниеОповещения);
	
КонецПроцедуры

Процедура НачатьПолучениеОтчетаПоНомеру_ПослеАутентификации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.РезультатВыполнения Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("РезультатВыполнения, ВыходныеПараметры", Ложь, Результат.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	АдресСервиса = ДополнительныеПараметры.ПараметрыПодключения.АдресСервиса;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Token",               ДополнительныеПараметры.ПараметрыПодключения.ТокенАвторизации);
	ПараметрыЗапроса.Вставить("CashboxUniqueNumber", ДополнительныеПараметры.Параметры.СерийныйНомер);
	ПараметрыЗапроса.Вставить("ShiftNumber",         ДополнительныеПараметры.Параметры.НомерСмены);
	
	НачатьВыполнениеМетодаВебСервиса(АдресСервиса, "ZReport/ByShiftNumber", ПараметрыЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НачатьПолучениеКонтрольнойЛенты(ОповещениеПриЗавершении, ВходныеПараметры, ПараметрыПодключения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Параметры"       , ВходныеПараметры);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , Новый Массив);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПолучениеКонтрольнойЛенты_ПослеАутентификации", ЭтотОбъект, ДополнительныеПараметры);
	НачатьАутентификациюПользователя(ОписаниеОповещения);
	
КонецПроцедуры

Процедура НачатьПолучениеКонтрольнойЛенты_ПослеАутентификации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.РезультатВыполнения Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("РезультатВыполнения, ВыходныеПараметры", Ложь, Результат.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	АдресСервиса = ДополнительныеПараметры.ПараметрыПодключения.АдресСервиса;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Token",               ДополнительныеПараметры.ПараметрыПодключения.ТокенАвторизации);
	ПараметрыЗапроса.Вставить("CashboxUniqueNumber", ДополнительныеПараметры.Параметры.СерийныйНомер);
	ПараметрыЗапроса.Вставить("ShiftNumber",         ДополнительныеПараметры.Параметры.НомерСмены);
	
	НачатьВыполнениеМетодаВебСервиса(АдресСервиса, "Reports/ControlTape", ПараметрыЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НачатьПереводКассы(ОповещениеПриЗавершении, ВходныеПараметры, ПараметрыПодключения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Параметры"       , ВходныеПараметры);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , Новый Массив);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПереводКассы_ПослеАутентификации", ЭтотОбъект, ДополнительныеПараметры);
	НачатьАутентификациюПользователя(ОписаниеОповещения);
	
КонецПроцедуры

Процедура НачатьПереводКассы_ПослеАутентификации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.РезультатВыполнения Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("РезультатВыполнения, ВыходныеПараметры", Ложь, Результат.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	АдресСервиса = ДополнительныеПараметры.ПараметрыПодключения.АдресСервиса;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Token",               ДополнительныеПараметры.ПараметрыПодключения.ТокенАвторизации);
	ПараметрыЗапроса.Вставить("CashboxUniqueNumber", ДополнительныеПараметры.Параметры.НомерКассы);
	ПараметрыЗапроса.Вставить("ValidationCode",      ДополнительныеПараметры.Параметры.КодПодтверждения);
	ПараметрыЗапроса.Вставить("PartnerXin",          ДополнительныеПараметры.Параметры.НомерПартнера);
	ПараметрыЗапроса.Вставить("PartnerCode",         ДополнительныеПараметры.Параметры.КодПартнера);
	ПараметрыЗапроса.Вставить("CardNumber",          ДополнительныеПараметры.Параметры.НомерКарты);
	ПараметрыЗапроса.Вставить("ActivationNumber",    ДополнительныеПараметры.Параметры.КодАктивации);
	
	НачатьВыполнениеМетодаВебСервиса(АдресСервиса, "Cashbox/ConvertTo1C", ПараметрыЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НачатьСменуПартнера(ОповещениеПриЗавершении, ВходныеПараметры, ПараметрыПодключения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Параметры"       , ВходныеПараметры);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , Новый Массив);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьСменуПартнера_ПослеАутентификации", ЭтотОбъект, ДополнительныеПараметры);
	НачатьАутентификациюПользователя(ОписаниеОповещения);
	
КонецПроцедуры

Процедура НачатьСменуПартнера_ПослеАутентификации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.РезультатВыполнения Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("РезультатВыполнения, ВыходныеПараметры", Ложь, Результат.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	АдресСервиса = ДополнительныеПараметры.ПараметрыПодключения.АдресСервиса;
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Token",               ДополнительныеПараметры.ПараметрыПодключения.ТокенАвторизации);
	ПараметрыЗапроса.Вставить("CashboxUniqueNumber", ДополнительныеПараметры.Параметры.СерийныйНомер);
	ПараметрыЗапроса.Вставить("PartnerXin",          ДополнительныеПараметры.Параметры.НомерПартнера);
	ПараметрыЗапроса.Вставить("PartnerCode",         ДополнительныеПараметры.Параметры.КодПартнера);
	ПараметрыЗапроса.Вставить("CardNumber",          ДополнительныеПараметры.Параметры.НомерКарты);
	ПараметрыЗапроса.Вставить("ActivationNumber",    ДополнительныеПараметры.Параметры.КодАктивации);
	НачатьВыполнениеМетодаВебСервиса(АдресСервиса, "Cashbox/Change1CServiceCenter", ПараметрыЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НачатьПолучениеИсторииЧеков(ОповещениеПриЗавершении, ВходныеПараметры, ПараметрыПодключения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Параметры"       , ВходныеПараметры);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , Новый Массив);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПолучениеИсторииЧеков_ПослеАутентификации", ЭтотОбъект, ДополнительныеПараметры);
	НачатьАутентификациюПользователя(ОписаниеОповещения);
	
КонецПроцедуры

Процедура НачатьПолучениеИсторииЧеков_ПослеАутентификации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.РезультатВыполнения Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("РезультатВыполнения, ВыходныеПараметры", Ложь, Результат.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	АдресСервиса = ДополнительныеПараметры.ПараметрыПодключения.АдресСервиса;
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Token",               ДополнительныеПараметры.ПараметрыПодключения.ТокенАвторизации);
	ПараметрыЗапроса.Вставить("CashboxUniqueNumber", ДополнительныеПараметры.Параметры.СерийныйНомер);
	ПараметрыЗапроса.Вставить("Skip",                ДополнительныеПараметры.Параметры.Отступ);
	ПараметрыЗапроса.Вставить("Take",                ДополнительныеПараметры.Параметры.Количество);
	ПараметрыЗапроса.Вставить("ShiftNumber",         ДополнительныеПараметры.Параметры.НомерСмены);
	НачатьВыполнениеМетодаВебСервиса(АдресСервиса, "Check/History", ПараметрыЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НачатьПолучениеСменныхОтчетов(ОповещениеПриЗавершении, ВходныеПараметры, ПараметрыПодключения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Параметры"       , ВходныеПараметры);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , Новый Массив);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПолучениеСменныхОтчетов_ПослеАутентификации", ЭтотОбъект, ДополнительныеПараметры);
	НачатьАутентификациюПользователя(ОписаниеОповещения);
	
КонецПроцедуры

Процедура НачатьПолучениеСменныхОтчетов_ПослеАутентификации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.РезультатВыполнения Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("РезультатВыполнения, ВыходныеПараметры", Ложь, Результат.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	АдресСервиса = ДополнительныеПараметры.ПараметрыПодключения.АдресСервиса;
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Token",               ДополнительныеПараметры.ПараметрыПодключения.ТокенАвторизации);
	ПараметрыЗапроса.Вставить("CashboxUniqueNumber", ДополнительныеПараметры.Параметры.СерийныйНомер);
	ПараметрыЗапроса.Вставить("Skip",                ДополнительныеПараметры.Параметры.Отступ);
	ПараметрыЗапроса.Вставить("Take",                ДополнительныеПараметры.Параметры.Количество);
	НачатьВыполнениеМетодаВебСервиса(АдресСервиса, "ZReport/History", ПараметрыЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НачатьПолучениеЕдиницИзмерения(ОповещениеПриЗавершении, ВходныеПараметры, ПараметрыПодключения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Параметры"       , ВходныеПараметры);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , Новый Массив);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПолучениеЕдиницИзмерения_ПослеАутентификации", ЭтотОбъект, ДополнительныеПараметры);
	НачатьАутентификациюПользователя(ОписаниеОповещения);
	
КонецПроцедуры

Процедура НачатьПолучениеЕдиницИзмерения_ПослеАутентификации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.РезультатВыполнения Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("РезультатВыполнения, ВыходныеПараметры", Ложь, Результат.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	АдресСервиса = ДополнительныеПараметры.ПараметрыПодключения.АдресСервиса;
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Token",               ДополнительныеПараметры.ПараметрыПодключения.ТокенАвторизации);
	НачатьВыполнениеМетодаВебСервиса(АдресСервиса, "references/RefUnits", ПараметрыЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура НачатьВыполнениеМетодаВебСервиса(АдресСервиса, ИмяМетода, ПараметрыЗапроса, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = Новый Массив();
	
	ЗапросJSON = НовыйЗапросJSON(ПараметрыЗапроса);
	
	РезультатВыполнения = Истина;
	
	РезультатЗапроса = ОтправитьЗапросНаСервисWebkassa(АдресСервиса, "/api/v2/" + ИмяМетода, ЗапросJSON);
	
	Если РезультатЗапроса = Неопределено Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ВыходныеПараметры[1] = НСтр("ru='Не удалось подключиться к серверу.'");
		РезультатВыполнения = Ложь;
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("РезультатВыполнения, ВыходныеПараметры, ОбъектыJSON", РезультатВыполнения, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	Иначе
		Попытка
			
			ОбъектыJSON = ПрочитатьОтветJSON(РезультатЗапроса);
			
			Для Каждого ОбъектJSON Из ОбъектыJSON Цикл
				Если ОбъектJSON.Ключ = "Errors" И ОбъектJSON.Значение<>Неопределено Тогда
					КодОшибки = ОбъектJSON.Значение[0].Code;
					Организация = "";
					Если КодОшибки = 1 Тогда
						ДополнительныеПараметры.Свойство("Организация", Организация);
						ЛогинПарольТокен = ПолучитьПарольИзГлобальнойПеременной(Организация);
						Если ЛогинПарольТокен<>Неопределено Тогда
							ДобавитьПарольВГлобальнуюПеременную(Организация, Неопределено);
							НачатьАутентификациюПользователя(ДополнительныеПараметры.ОповещениеПриЗавершении.ДополнительныеПараметры.ОповещениеПриОшибкеАвторизации);
							Возврат;
						КонецЕсли;
					КонецЕсли;
					Если КодОшибки = 2 Тогда
						ДополнительныеПараметры.Свойство("Организация", Организация);
						ЛогинПарольТокен = ПолучитьПарольИзГлобальнойПеременной(Организация);
						Если ЛогинПарольТокен<>Неопределено И ЛогинПарольТокен.Свойство("Токен") И ЛогинПарольТокен.Токен <> Неопределено Тогда
							СохраняемоеЗначение = Новый Структура("Пользователь, ПарольПользователя", ЛогинПарольТокен.Пользователь, ЛогинПарольТокен.ПарольПользователя);
							ДобавитьПарольВГлобальнуюПеременную(Организация, СохраняемоеЗначение);
						КонецЕсли;
						НачатьАутентификациюПользователя(ДополнительныеПараметры.ОповещениеПриОшибкеАвторизации);
						Возврат;
					КонецЕсли;
					РезультатВыполнения = Ложь;
					ВыходныеПараметры.Очистить();
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить("");
					ВыходныеПараметры[1] = ИнтеграцияWebKassaКлиентСервер.ПолучитьОписаниеОшибки(ОбъектJSON.Значение[0].Code) + "(" + ОбъектJSON.Значение[0].Text + ").";
				ИначеЕсли ОбъектJSON.Ключ = "Data" И Не ТипЗнч(ОбъектJSON.Значение) = Тип("Булево") И ОбъектJSON.Значение <> Неопределено И
							Тип(ОбъектJSON.Значение) = Тип("Структура") И ОбъектJSON.Значение.Свойство("Token") Тогда
					
					ТокенАвторизации = ОбъектJSON.Значение.Token;
					ДополнительныеПараметры.ОповещениеПриЗавершении.ДополнительныеПараметры.ПараметрыПодключения.Вставить("ТокенАвторизации", ТокенАвторизации);
					
					ВыходныеПараметры.Очистить();
					ВыходныеПараметры.Добавить("");
					ВыходныеПараметры.Добавить(Неопределено);
				ИначеЕсли ОбъектJSON.Ключ = "Message" Тогда
					РезультатВыполнения = Ложь;
					ВыходныеПараметры.Очистить();
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить("");
					ТекстОшибки = НСтр("ru='Ошибка работы с сервером. Сообщение сервера: ""%Сообщение%""'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Сообщение%", ОбъектыJSON.MessageDetail);
					ВыходныеПараметры[1] = ТекстОшибки;
				КонецЕсли;
			КонецЦикла;
		Исключение
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ВыходныеПараметры[1] = НСтр("ru='Ошибка работы с сервером. Невозможно распознать ответ сервера.'");
			РезультатВыполнения = Ложь;
		КонецПопытки;
		
		ЗапомнитьЛогинПароль = Ложь;
		ДополнительныеПараметры.Свойство("ЗапомнитьЛогинПароль", ЗапомнитьЛогинПароль);
		Организация = Неопределено;
		
		Если РезультатВыполнения = Истина И ЗапомнитьЛогинПароль = Истина
			И ДополнительныеПараметры.Свойство("Организация", Организация) Тогда
			СохраняемоеЗначение = Новый Структура("Пользователь, ПарольПользователя, Токен", ПараметрыЗапроса.Login, ПараметрыЗапроса.Password, ТокенАвторизации);
			ДобавитьПарольВГлобальнуюПеременную(Организация, СохраняемоеЗначение);
		КонецЕсли;
		
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("РезультатВыполнения, ВыходныеПараметры, ОбъектыJSON, ДополнительныеПараметры",
				РезультатВыполнения,
				ВыходныеПараметры,
				ОбъектыJSON,
				ДополнительныеПараметры);
			
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйЗапросJSON(ПараметрыЗапроса) Экспорт
	
	#Если ВебКлиент Тогда
		Возврат ИнтеграцияWebKassaВызовСервера.ЗапросJSON(ПараметрыЗапроса);
	#Иначе
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, ПараметрыЗапроса);
		
		Возврат ЗаписьJSON.Закрыть();
	#КонецЕсли
	
КонецФункции

Функция ПрочитатьОтветJSON(РезультатЗапроса) Экспорт
	
	#Если ВебКлиент Тогда
		ОбъектыJSON = ИнтеграцияWebKassaВызовСервера.ПрочитатьОтветJSON(РезультатЗапроса);
	#Иначе
		ОтветСервиса = Новый ЧтениеJSON;
		ОтветСервиса.УстановитьСтроку(РезультатЗапроса);
		ОбъектыJSON = ПрочитатьJSON(ОтветСервиса);
		ОтветСервиса.Закрыть();
	#КонецЕсли
	
	Возврат ОбъектыJSON;
	
КонецФункции

// Функция выполняет запрос к сервису и возвращает результат выполнения операции.
//
Функция ОтправитьЗапросНаСервисWebkassa(АдресСервиса, ПутьОперации, ЗапросJSON) Экспорт
	
	#Если ВебКлиент Тогда
		Возврат ИнтеграцияWebKassaВызовСервера.ОтправитьЗапросНаСервисWebkassa(АдресСервиса, ПутьОперации, ЗапросJSON);
	#Иначе
		Возврат ИнтеграцияWebKassaКлиентСервер.ОтправитьЗапросНаСервисWebkassa(АдресСервиса, ПутьОперации, ЗапросJSON);
	#КонецЕсли
	
КонецФункции

Процедура ДобавитьПарольВГлобальнуюПеременную(СохраняемыйКлюч, СохраняемоеЗначение)
	//СохраняемоеЗначение-структура СохраняемыйКлюч-идентификатор
	Соответствие = Новый Соответствие;
	СоответствиеПользователяИПароля = ИнтеграцияWebKassaКлиентПереопределяемый.ПолучитьПараметрыПриложения("1СWebKassa.СоответствиеПользователяИПароля");
	Если ТипЗнч(СоответствиеПользователяИПароля) = Тип("ФиксированноеСоответствие") Тогда
		Для Каждого Элемент Из СоответствиеПользователяИПароля Цикл
			Соответствие.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Соответствие.Вставить(СохраняемыйКлюч, СохраняемоеЗначение);
	
	ИнтеграцияWebKassaКлиентПереопределяемый.ДобавитьВПараметрыПриложения("1СWebKassa.СоответствиеПользователяИПароля",
		Новый ФиксированноеСоответствие(Соответствие));
	
КонецПроцедуры

Функция ПолучитьПарольИзГлобальнойПеременной(Ключ)
	
	СоответствиеПользователяИПароля = ИнтеграцияWebKassaКлиентПереопределяемый.ПолучитьПараметрыПриложения("1СWebKassa.СоответствиеПользователяИПароля");
	Если ТипЗнч(СоответствиеПользователяИПароля) = Тип("ФиксированноеСоответствие") Тогда
		Возврат СоответствиеПользователяИПароля.Получить(Ключ);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Процедура выбора кассы ККМ из доступных, при выборе в качестве оборудования ФР Webkassa.
//
Процедура ПредложитьВыбратьКассуККМ(ОповещениеВыбора, ТекстЗаголовкаВыбора, 
	СообщениеНеПодключен = "", СообщениеНеВыбран = "", БезСообщений = Ложь, ТекстСообщения = "") Экспорт
	
	//сообщения по умолчанию
	СообщениеНеПодключен = ?(СообщениеНеПодключен="",НСтр("ru = 'Нет касс ККМ соответствующих параметрам'"),СообщениеНеПодключен);
	СообщениеНеВыбран = ?(СообщениеНеВыбран="",НСтр("ru = 'Не выбрана касса ККМ.'"),СообщениеНеВыбран);
	ТекстСообщения = ?(ТекстСообщения="",НСтр("ru = 'Не выбрана касса ККМ'"),ТекстСообщения);
	//выводим список касс ккм
	СписокКассККМ = ИнтеграцияWebKassaВызовСервераПереопределяемый.ПолучитьСписокКассККМ(
		ОповещениеВыбора.ДополнительныеПараметры.ИдентификаторУстройства);
	Если СписокКассККМ.Количество() = 0 Тогда
		Если Не ПустаяСтрока(СообщениеНеПодключен) Тогда
			Если БезСообщений Тогда
				ТекстСообщения = СообщениеНеПодключен;
			Иначе
				ИнтеграцияWebKassaКлиентПереопределяемый.СообщитьПользователю(СообщениеНеПодключен);
			КонецЕсли;
		КонецЕсли;
		ВыполнитьОбработкуОповещения(ОповещениеВыбора, Неопределено);
	Иначе
		СписокКасс = Новый СписокЗначений();
		Для каждого Касса Из СписокКассККМ Цикл
			СписокКасс.Добавить(Касса.Ссылка, Касса.Наименование);
		КонецЦикла;
		Если СписокКасс.Количество() = 1 Тогда
			ИдентификаторКассы = СписокКасс[0].Значение;
			ОповещениеВыбора.ДополнительныеПараметры.Вставить("ИдентификаторКассы",ИдентификаторКассы);
			РеквизитыКассы = ИнтеграцияWebKassaВызовСервераПереопределяемый.ПолучитьРеквизитыКассы(ИдентификаторКассы);
			Если ОповещениеВыбора.ДополнительныеПараметры.ВходныеПараметры=Неопределено Тогда
				ОповещениеВыбора.ДополнительныеПараметры.ВходныеПараметры = Новый Массив();
			КонецЕсли;
			ОповещениеВыбора.ДополнительныеПараметры.ВходныеПараметры.Добавить(РеквизитыКассы.СерийныйНомер);
			ОповещениеВыбора.ДополнительныеПараметры.ВходныеПараметры.Добавить(РеквизитыКассы.Владелец);
			Идентификатор = ОповещениеВыбора.ДополнительныеПараметры.ИдентификаторУстройства;
			ВыполнитьОбработкуОповещения(ОповещениеВыбора, Идентификатор); 
		Иначе
			Контекст = Новый Структура;
			Контекст.Вставить("СледующееОповещение", ОповещениеВыбора);
			Контекст.Вставить("СообщениеНеВыбран"  , ?(ПустаяСтрока(СообщениеНеВыбран), СообщениеНеПодключен, СообщениеНеВыбран));
			Контекст.Вставить("БезСообщений"       , БезСообщений);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПредложитьВыбратьКассуККМЗавершение", ЭтотОбъект, Контекст);
			СписокКасс.ПоказатьВыборЭлемента(ОписаниеОповещения, ТекстЗаголовкаВыбора);
		КонецЕсли;
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

// Процедура завершения выбора кассы ККМ из доступных.
//
Процедура ПредложитьВыбратьКассуККМЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Если Параметры <> Неопределено Тогда
			Если НЕ Параметры.БезСообщений И Не ПустаяСтрока(Параметры.СообщениеНеВыбран) Тогда
				ИнтеграцияWebKassaКлиентПереопределяемый.СообщитьПользователю(Параметры.СообщениеНеВыбран);
			КонецЕсли;
			
			Если Параметры.СледующееОповещение <> Неопределено Тогда
				ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, Неопределено);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Параметры <> Неопределено И Параметры.СледующееОповещение <> Неопределено Тогда
			ИдентификаторКассы = Результат.Значение;
			РеквизитыКассы = ИнтеграцияWebKassaВызовСервераПереопределяемый.ПолучитьРеквизитыКассы(ИдентификаторКассы);
			Если Параметры.СледующееОповещение.ДополнительныеПараметры.ВходныеПараметры=Неопределено Тогда
				Параметры.СледующееОповещение.ДополнительныеПараметры.ВходныеПараметры = Новый Массив();
			КонецЕсли;
			Параметры.СледующееОповещение.ДополнительныеПараметры.ВходныеПараметры.Добавить(РеквизитыКассы.СерийныйНомер);
			Параметры.СледующееОповещение.ДополнительныеПараметры.ВходныеПараметры.Добавить(РеквизитыКассы.Владелец);
			Идентификатор = Параметры.СледующееОповещение.ДополнительныеПараметры.ИдентификаторУстройства;
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, Идентификатор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
