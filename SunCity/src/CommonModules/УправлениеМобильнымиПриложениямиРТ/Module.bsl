#Область СлужебныйПрограммныйИнтерфейс

// Заполняет информацию о поставляемых мобильных приложениях,
// с которыми текущая конфигурация поддерживает обмен данными.
//
// Параметры:
//  ПараметрыПоставляемыхПриложений - Структура - структура с ключами:
//    * ПоставляемыеВариантыНастроек - Массив - содержит перечисленные варианты настроек 
//                                              мобильных приложений, с которыми поддерживает обмен
//                                              текущая конфигурация.
//    * ОписаниеПриложений - Массив из см. УправлениеМобильнымиПриложениями.ПараметрыПриложения
//
Процедура ПараметрыПоставляемыхПриложений(ПараметрыПоставляемыхПриложений) Экспорт
	
	ВариантыНастроек = ПараметрыПоставляемыхПриложений.ПоставляемыеВариантыНастроек;
	ОписаниеПриложений = ПараметрыПоставляемыхПриложений.ОписаниеПриложений;
	
	ВариантыНастроек.Добавить("Кладовщик");
	ОписаниеПриложения = УправлениеМобильнымиПриложениями.ПараметрыПриложения();
	ОписаниеПриложения.Наименование = НСтр("ru = '1С:Кладовщик'");
	ОписаниеПриложения.ВариантНастройки = "Кладовщик";
	ОписаниеПриложения.ВерсияПриложения = "1.0";
	ОписаниеПриложения.КраткаяИнформация = НСтр("ru = 'Приложение для выполнения складских операций со смартфона.'");
	ОписаниеПриложения.СайтПриложения = "https://v8.1c.ru/retail/storekeeper/";
	ОписаниеПриложения.Разработчик = НСтр("ru = '1С'");
	ОписаниеПриложения.СайтРазработчика = "https://mobile.1c.ru/";
	ОписаниеПриложения.ИдентификаторПриложенияGoogle = "com.e1c.storekeeper.market";
	ОписаниеПриложений.Добавить(ОписаниеПриложения);

	ВариантыНастроек.Добавить("МобильнаяКасса");
	ОписаниеПриложения = УправлениеМобильнымиПриложениями.ПараметрыПриложения();
	ОписаниеПриложения.Наименование = НСтр("ru = '1С:Мобильная касса'");
	ОписаниеПриложения.ВариантНастройки = "МобильнаяКасса";
	ОписаниеПриложения.ВерсияПриложения = "3.0";
	ОписаниеПриложения.КраткаяИнформация = НСтр("ru = 'Приложение для ведения торговли со смартфона или планшета. '") +
		НСтр("ru = 'Подходит для небольших торговых точек, курьеров, торговых агентов, мобильной торговли.'");
	ОписаниеПриложения.СайтПриложения = "https://torg.1c.ru/programs/1s-mobilnaya-kassa/";
	ОписаниеПриложения.Разработчик = НСтр("ru = '1С'");
	ОписаниеПриложения.СайтРазработчика = "https://mobile.1c.ru/";
	ОписаниеПриложения.ИдентификаторПриложенияGoogle = "com.e1c.mobilecashboxmarket";
	ОписаниеПриложений.Добавить(ОписаниеПриложения);
	
	ВариантыНастроек.Добавить("ПроверкаЦенников");
	ОписаниеПриложения = УправлениеМобильнымиПриложениями.ПараметрыПриложения();
	ОписаниеПриложения.Наименование = НСтр("ru = '1С:Проверка ценников'");
	ОписаниеПриложения.ВариантНастройки = "ПроверкаЦенников";
	ОписаниеПриложения.ВерсияПриложения = "1.2";
	ОписаниеПриложения.КраткаяИнформация = НСтр("ru = 'Приложение для проверки актуальности ценников в торговом зале.'");
	ОписаниеПриложения.СайтПриложения = "https://v8.1c.ru/retail/checkpricetag/";
	ОписаниеПриложения.Разработчик = НСтр("ru = '1С'");
	ОписаниеПриложения.СайтРазработчика = "https://mobile.1c.ru/";
	ОписаниеПриложения.ИдентификаторПриложенияGoogle = "com.e1c.CheckPriceTag";
	ОписаниеПриложений.Добавить(ОписаниеПриложения);
	
КонецПроцедуры

// Выполняет необходимые действия после записи узла обмена.
// Например, регистрацию настроек к обмену.
//
// Параметры:
//   УзелОбмена - ПланОбменаСсылка - См. УправлениеМобильнымиПриложениямиКлиентСервер.ИмяПланаОбмена
//   СтандартнаяОбработка - Булево - признак используется для переопределения действий после записи узла
//
Процедура ПослеЗаписиНастройки(УзелОбмена, СтандартнаяОбработка) Экспорт
	
	Если УзелОбмена.МобильноеПриложение.ВариантНастройки = "Кладовщик" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		НастройкиОбмена = УзелОбмена.НастройкиОбмена.Получить();
		Если НастройкиОбмена = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Магазин = Справочники.Магазины.ПустаяСсылка();
		ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
			НастройкиОбмена.Отбор, "Магазин");
		Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
			Если ЭлементОтбора.Использование Тогда
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					Магазин = ЭлементОтбора.ПравоеЗначение;
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Магазин);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Организации = Новый Массив;
		ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
			НастройкиОбмена.Отбор, "Организация");
		Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
			Если ЭлементОтбора.Использование Тогда
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					Организации.Добавить(ЭлементОтбора.ПравоеЗначение);
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
					Организации = ЭлементОтбора.ПравоеЗначение.ВыгрузитьЗначения();
				КонецЕсли;
				Для Каждого Организация Из Организации Цикл
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Организация);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Если Организации.Количество() = 0 Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Метаданные.Справочники.Организации);
		КонецЕсли;
	
		Склады = Новый Массив;
		ИспользуетсяОтборПоСкладу = Ложь;
		ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
			НастройкиОбмена.Отбор, "Склад");
		Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
			Если ЭлементОтбора.Использование Тогда
				ИспользуетсяОтборПоСкладу = Истина;
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					Склады.Добавить(ЭлементОтбора.ПравоеЗначение);
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
					Склады = ЭлементОтбора.ПравоеЗначение.ВыгрузитьЗначения();
				КонецЕсли;
				Для Каждого Склад Из Склады Цикл
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Склад);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ИспользуетсяОтборПоСкладу Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Магазин", Магазин);
			Запрос.УстановитьПараметр("Организации", Организации);
			Запрос.УстановитьПараметр("ИспользоватьОтборПоОрганизации", Организации.Количество() > 0);
			Запрос.Текст = "ВЫБРАТЬ
			|	Склады.Ссылка КАК Склад
			|ИЗ
			|	Справочник.Склады КАК Склады
			|ГДЕ
			|	НЕ Склады.ПометкаУдаления
			|	И Склады.Магазин = &Магазин
			|	И Склады.Организация В (&Организации)
			|	И &ИспользоватьОтборПоОрганизации
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Склады.Ссылка
			|ИЗ
			|	Справочник.Склады КАК Склады
			|ГДЕ
			|	НЕ Склады.ПометкаУдаления
			|	И Склады.Магазин = &Магазин
			|	И НЕ &ИспользоватьОтборПоОрганизации";
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				Возврат;
			КонецЕсли;
			
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Склад);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Изменяет компоновщик настроек при изменении обязательной настройки.
//
// Параметры:
//  ИмяНастройки - Строка - имя элемента формы, который был изменен и является обязательным
//  КомпоновщикНастроек - КомпоновщикНастроек - компоновщик настроек данных с настройками приложения
//
Процедура ПриИзмененииОбязательнойНастройки(ИмяНастройки, КомпоновщикНастроек) Экспорт
	
	Если ИмяНастройки <> "Магазин" Тогда
		Возврат;
	КонецЕсли;

	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
		КомпоновщикНастроек.Настройки.Отбор, "Склад");
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		ИдентификаторПользовательскойНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
		ЭлементОтбораСклад = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
			ЭлементОтбора.ИдентификаторПользовательскойНастройки);
		Если ЭлементОтбораСклад <> Неопределено Тогда
			ЭлементОтбораСклад.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбораСклад.ПравоеЗначение = Справочники.Склады.ПустаяСсылка();
			ЭлементОтбораСклад.Использование = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Используется для проверки изменений компоновщика настроек.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма узла обмена
//   КомпоновщикНастроек - КомпоновщикНастроек - компоновщик настроек данных с настройками приложения
//
Процедура ПриИзмененииТаблицыНастроек(Форма, КомпоновщикНастроек) Экспорт
	
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
		КомпоновщикНастроек.Настройки.Отбор, "Склад");
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		ИдентификаторПользовательскойНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
		ЭлементОтбораСклад = 
			КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
		Если ЭлементОтбораСклад = Неопределено
			Или (ЭлементОтбораСклад <> Неопределено И Не ЭлементОтбораСклад.Использование) Тогда
			Возврат;
		ИначеЕсли ЭлементОтбораСклад <> Неопределено Тогда
			Если ЭлементОтбораСклад.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				Если ЭлементОтбораСклад.ПравоеЗначение.Количество() = 0 Тогда
					ЭлементОтбораСклад.Использование = Ложь;
					Возврат;
				КонецЕсли;
			ИначеЕсли Не ЗначениеЗаполнено(ЭлементОтбораСклад.ПравоеЗначение) Тогда
				ЭлементОтбораСклад.Использование = Ложь;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЭлементМагазин = Форма.Элементы.Найти("Магазин");
	Если ЭлементМагазин <> Неопределено Тогда
		Магазин = Форма[ЭлементМагазин.ПутьКДанным];
		Если Не ЗначениеЗаполнено(Магазин) Тогда
			Магазин = Неопределено;
		КонецЕсли;
	Иначе
		Магазин = Неопределено;
	КонецЕсли;
	
	МассивОрганизаций = Новый Массив;
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(КомпоновщикНастроек.Настройки.Отбор,
		"Организация");
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		ИдентификаторПользовательскойНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
		ЭлементОтбораОрганизация = 
			КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
		Если ЭлементОтбораОрганизация <> Неопределено 
			И ЭлементОтбораОрганизация.Использование Тогда
			Если ЭлементОтбораОрганизация.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				Для Каждого Организация Из ЭлементОтбораОрганизация.ПравоеЗначение Цикл
					Если ЗначениеЗаполнено(Организация.Значение) Тогда
						МассивОрганизаций.Добавить(Организация.Значение);
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ЗначениеЗаполнено(ЭлементОтбораОрганизация.ПравоеЗначение) Тогда
				МассивОрганизаций.Добавить(ЭлементОтбораОрганизация.ПравоеЗначение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Магазин = Неопределено И МассивОрганизаций.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементОтбораСклад.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		МассивСкладов = Новый Массив;
		
		Для Каждого ЭлементСклад Из ЭлементОтбораСклад.ПравоеЗначение Цикл
			Склад = ЭлементСклад.Значение;
			
			ОтказМагазин = Ложь;
			Если Магазин <> Неопределено И Склад.Магазин <> Магазин Тогда
				ОтказМагазин = Истина;
			КонецЕсли;
			
			ОтказОрганизация = Ложь;
			Если МассивОрганизаций.Количество() > 0
				И МассивОрганизаций.Найти(Склад.Организация) = Неопределено Тогда
				ОтказОрганизация = Истина;
			КонецЕсли;
			
			Если ОтказМагазин Или ОтказОрганизация Тогда
				Если ОтказМагазин И ОтказОрганизация Тогда
					ПредставлениеОтбора = "по магазину и организации";
				ИначеЕсли ОтказМагазин Тогда
					ПредставлениеОтбора = "по магазину";
				Иначе
					ПредставлениеОтбора = "по организации";
				КонецЕсли;
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Склад ""%1"" не входит в отбор %2'"), Склад, ПредставлениеОтбора);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Иначе
				МассивСкладов.Добавить(Склад);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивСкладов.Количество() = 0 Тогда
			ЭлементОтбораСклад.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбораСклад.ПравоеЗначение = Справочники.Склады.ПустаяСсылка();
			ЭлементОтбораСклад.Использование = Ложь;
		Иначе
			ЭлементОтбораСклад.ПравоеЗначение.ЗагрузитьЗначения(МассивСкладов);
		КонецЕсли;
	Иначе
		Склад = ЭлементОтбораСклад.ПравоеЗначение;
		
		ОтказМагазин = Ложь;
		Если Магазин <> Неопределено И Склад.Магазин <> Магазин Тогда
			ОтказМагазин = Истина;
		КонецЕсли;
		
		ОтказОрганизация = Ложь;
		Если МассивОрганизаций.Количество() > 0
			И МассивОрганизаций.Найти(Склад.Организация) = Неопределено Тогда
			ОтказОрганизация = Истина;
		КонецЕсли;
		
		Если ОтказМагазин Или ОтказОрганизация Тогда
			Если ОтказМагазин И ОтказОрганизация Тогда
				ПредставлениеОтбора = "по магазину и организации";
			ИначеЕсли ОтказМагазин Тогда
				ПредставлениеОтбора = "по магазину";
			Иначе
				ПредставлениеОтбора = "по организации";
			КонецЕсли;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Склад ""%1"" не входит в отбор %2'"), Склад, ПредставлениеОтбора);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			ЭлементОтбораСклад.ПравоеЗначение = Справочники.Склады.ПустаяСсылка();
			ЭлементОтбораСклад.Использование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список настроек мобильного приложения.
//
// Параметры:
//  МобильноеПриложение - СправочникСсылка.МобильныеПриложения
//  НастройкиПриложения - Соответствие - см. УправлениеМобильнымиПриложениями.НастройкаПриложения
//
Процедура ПриОпределенииНастроекПриложения(МобильноеПриложение, НастройкиПриложения) Экспорт
	
	Если МобильноеПриложение.ВариантНастройки = "Кладовщик" Тогда
		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ОбязательноеЗаполнение = Истина;
		НастройкиПриложения.Вставить("Магазин", НастройкаПриложения);
		
		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкиПриложения.Вставить("ИспользоватьВес", НастройкаПриложения);

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ИмяФункциональнойОпции = "ИспользоватьСерииНоменклатуры";
		НастройкиПриложения.Вставить("ИспользоватьСерии", НастройкаПриложения);

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ИмяФункциональнойОпции = "ИспользоватьУпаковкиНоменклатуры";
		НастройкиПриложения.Вставить("ИспользоватьУпаковки", НастройкаПриложения);

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкиПриложения.Вставить("РедактироватьЦеныТоваров", НастройкаПриложения);

		НастройкаПриложения = УправлениеМобильнымиПриложениями.НастройкаПриложения();
		НастройкаПриложения.ЭтоОтбор = Истина;
		НастройкаПриложения.ИмяФункциональнойОпции = "ИспользоватьНесколькоОрганизаций";
		НастройкиПриложения.Вставить("Организация", НастройкаПриложения);
	КонецЕсли;
	
КонецПроцедуры

// Определяет версию формата обмена мобильного приложения.
//
Процедура ПриОпределенииВерсииФорматаОбмена(ВерсияФорматаОбмена, МобильноеПриложение) Экспорт
	
	Если МобильноеПриложение.ВариантНастройки = "Кладовщик" Тогда
		ВерсияФорматаОбмена = "1.7.Storekeeper";
	КонецЕсли;
	
КонецПроцедуры

// Определяет список выбора поля "Наименование" формы узла обмена с мобильными приложениями.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма узла обмена
//   Наименование - ПолеФормы - поле для данных узла Объект.Наименование
//   МобильноеПриложение - СправочникСсылка.МобильныеПриложения - мобильное приложение узла обмена
//   НастройкиПриложения - Соответствие - см. УправлениеМобильнымиПриложениями.НастройкиПриложения
//
Процедура ПриОпределенииСпискаВыбораНаименования(Форма, Наименование, МобильноеПриложение, НастройкиПриложения) Экспорт

	НастройкаДляШаблона = "Магазин";
	НастройкаНайдена = Ложь;
	Для Каждого Настройка Из НастройкиПриложения Цикл
		Если Настройка.Ключ = НастройкаДляШаблона Тогда
			НастройкаНайдена = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ШаблонНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, %2'"),
		МобильноеПриложение,
		?(ЗначениеЗаполнено(Форма[НастройкаДляШаблона]), Форма[НастройкаДляШаблона], НСтр("ru = '<Магазин не указан>'")));
	
	Наименование.СписокВыбора.Добавить(ШаблонНаименования);

КонецПроцедуры

// Определяет список мобильных приложений для плана обмена с мобильными приложениями,
// См. УправлениеМобильнымиПриложениямиКлиентСервер.ИмяПланаОбмена.
//
// Параметры:
//   СписокПриложений - Массив - массив ссылок на мобильные приложения
//   СтандартнаяОбработка - Булево - используется переопределяемая обработка, если ЛОЖЬ
//
Процедура ПриОпределенииСпискаМобильныхПриложений(СписокПриложений, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура("ВариантНастройки", "Кладовщик");
	ВыборкаМобильныеПриложения = Справочники.МобильныеПриложения.Выбрать(,, Отбор);
	Пока ВыборкаМобильныеПриложения.Следующий() Цикл
		Если ВыборкаМобильныеПриложения.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		СписокПриложений.Добавить(ВыборкаМобильныеПриложения.Ссылка);
	КонецЦикла;

КонецПроцедуры

// Определяет двоичные данные иконки мобильного приложения.
//
// Параметры:
//   МобильноеПриложение - СправочникСсылка.МобильныеПриложения - мобильное приложение
//   ДвоичныеДанныеИконки - Неопределено, ДвоичныеДанные - данные иконки мобильного приложения
//
Процедура ПриПолученииИконкиПриложения(МобильноеПриложение, ДвоичныеДанныеИконки) Экспорт
	
	ВариантНастройки = МобильноеПриложение.ВариантНастройки;
	ДвоичныеДанныеИконки = Справочники.МобильныеПриложения.ПолучитьМакет(ВариантНастройки + "Иконка");
	
КонецПроцедуры

// Определяет адрес QR-кода для скачивания приложения.
//
// Параметры:
//   МобильноеПриложение - СправочникСсылка.МобильныеПриложения - мобильное приложение
//   УникальныйИдентификатор - УникальныйИдентификатор - идентификатор формы, в которой требуется отобразить QR-код
//   АдресСсылкиGooglePlay - Строка - адрес QR-кода во временном хранилище
//
Процедура ПриПолученииСсылкиНаСкачивание(МобильноеПриложение, УникальныйИдентификатор, АдресСсылкиGooglePlay) Экспорт
	
	ВариантНастройки = МобильноеПриложение.ВариантНастройки;
	Если ВариантНастройки = "Кладовщик" Тогда
		ДвоичныеДанные = БиблиотекаКартинок.КладовщикQRКод.ПолучитьДвоичныеДанные();
		АдресСсылкиGooglePlay = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	ИначеЕсли ВариантНастройки = "МобильнаяКасса" Тогда
		ДвоичныеДанные = БиблиотекаКартинок.МобильнаяКассаQRКод.ПолучитьДвоичныеДанные();
		АдресСсылкиGooglePlay = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	ИначеЕсли ВариантНастройки = "ПроверкаЦенников" Тогда
		ДвоичныеДанные = БиблиотекаКартинок.ПроверкаЦенниковQRКод.ПолучитьДвоичныеДанные();
		АдресСсылкиGooglePlay = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Определяет схему компоновки настроек для мобильного приложения.
//
// Параметры:
//  МобильноеПриложение - СправочникСсылка.МобильныеПриложения
//  СхемаКомпоновки - Неопределено, СхемаКомпоновкиДанных
//
// Пример:
//   СхемаКомпоновки = Справочники.МобильныеПриложения.ПолучитьМакет("КладовщикСхемаКомпоновкиНастроек");
//
Процедура ПриПолученииСхемыКомпоновкиНастроек(МобильноеПриложение, СхемаКомпоновки) Экспорт
	
	Если МобильноеПриложение.ВариантНастройки = "Кладовщик" Тогда
		СхемаКомпоновки = Справочники.МобильныеПриложения.ПолучитьМакет("КладовщикСхемаКомпоновкиНастроек");
	КонецЕсли;
	
КонецПроцедуры

#Область РегистрацияДокументов

// Проверяет проходит ли склад по фильтру узла обмена.
//
// Параметры:
//   УзелОбмена - ПланОбменаСсылка - См. УправлениеМобильнымиПриложениямиКлиентСервер.ИмяПланаОбмена
//   Склад - СправочникСсылка.Склады - проверяемый склад
//   Магазин - Неопределено, СправочникСсылка.Магазины - проверяемый магазин
//   Организация - Неопределено, СправочникСсылка.Организации - проверяемая организация
//
Функция ПроверитьФильтрПоСкладу(УзелОбмена, Склад, Магазин = Неопределено, Организация = Неопределено) Экспорт
	
	Настройки = УзелОбмена.НастройкиОбмена.Получить();
	
	Если Настройки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
		Настройки.Отбор, "Склад");
		
	ДанныеПроходятПоФильтру = Ложь;
	ОтборПоСкладуИспользуется = Ложь;
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ЭлементОтбора.Использование Тогда
			ОтборПоСкладуИспользуется = Истина;
			Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				Если Склад = ЭлементОтбора.ПравоеЗначение Тогда
					ДанныеПроходятПоФильтру = Истина;
				КонецЕсли;
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				Если ЭлементОтбора.ПравоеЗначение.НайтиПоЗначению(Склад) <> Неопределено Тогда
					ДанныеПроходятПоФильтру = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ОтборПоСкладуИспользуется И Не ДанныеПроходятПоФильтру Тогда
		Возврат Ложь;
	Иначе
		Если Магазин = Неопределено Тогда
			Магазин = Склад.Магазин;
		КонецЕсли;
		Если Организация = Неопределено Тогда
			Организация = Склад.Организация;
		КонецЕсли;
		ДанныеПроходятПоФильтру = ПроверитьФильтрПоМагазинуИОрганизации(УзелОбмена, Магазин, Организация);
	КонецЕсли;
	
	Возврат ДанныеПроходятПоФильтру;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РегистрацияДокументов

// Проверяет проходит ли магазин и организация по фильтру узла обмена.
//
// Параметры:
//   УзелОбмена - ПланОбменаСсылка - См. УправлениеМобильнымиПриложениямиКлиентСервер.ИмяПланаОбмена
//   Магазин - СправочникСсылка.Магазины - проверяемый магазин
//   Организация - СправочникСсылка.Организации - проверяемая организация
//
Функция ПроверитьФильтрПоМагазинуИОрганизации(УзелОбмена, Магазин, Организация)
	
	Настройки = УзелОбмена.НастройкиОбмена.Получить();
	
	Если Настройки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
		Настройки.Отбор, "Магазин");
		
	ДанныеПроходятПоФильтру = Ложь;
	ОтборПоМагазинуИспользуется = Ложь;
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ЭлементОтбора.Использование Тогда
			ОтборПоМагазинуИспользуется = Истина;
			Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				Если Магазин = ЭлементОтбора.ПравоеЗначение Тогда
					ДанныеПроходятПоФильтру = Истина;
				КонецЕсли;
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				Если ЭлементОтбора.ПравоеЗначение.НайтиПоЗначению(Магазин) <> Неопределено Тогда
					ДанныеПроходятПоФильтру = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ОтборПоМагазинуИспользуется И Не ДанныеПроходятПоФильтру Тогда
		Возврат Ложь;
	Иначе
		ДанныеПроходятПоФильтру = Истина;
	КонецЕсли;
	
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
		Настройки.Отбор, "Организация");
		
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ЭлементОтбора.Использование Тогда
			Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				Если Организация <> ЭлементОтбора.ПравоеЗначение Тогда
					ДанныеПроходятПоФильтру = Ложь;
				КонецЕсли;
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				Если ЭлементОтбора.ПравоеЗначение.НайтиПоЗначению(Организация) = Неопределено Тогда
					ДанныеПроходятПоФильтру = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеПроходятПоФильтру;
	
КонецФункции

#КонецОбласти

#КонецОбласти




