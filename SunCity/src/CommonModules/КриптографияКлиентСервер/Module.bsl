
#Область ПрограммныйИнтерфейс

// Создает новый криптопровайдер WSSocket, см. КриптографияКлиентСерверПовтИсп.НовыйКриптопровайдерWSSocket.
//
// Параметры:
//  УникальныйИдентификаторФормыКлиента - Любой      - Идентификатор формы клиента, необходимый для временного хранения ссылки на модуль.
//  РежимТишины                        - Булево     - Флаг активации "тихого режима" работы. Если Истина, исключения не вызываются.
//  ТолькоПодключение                  - Булево     - Флаг, указывающий, нужно ли только подключить внешнюю компоненту без создания криптопровайдера.
//
// Возвращаемое значение:
//   Объект                            - Экземпляр криптопровайдера, если подключение выполнено успешно.
//
Функция НовыйКриптопровайдерWSSocket(УникальныйИдентификаторФормыКлиента = Неопределено, РежимТишины = Ложь, ТолькоПодключение = Ложь) Экспорт
	Возврат КриптографияКлиентСерверПовтИсп.НовыйКриптопровайдерWSSocket(УникальныйИдентификаторФормыКлиента, РежимТишины, ТолькоПодключение);
КонецФункции

// Возвращает номер версии библиотеки.
//
// Возвращаемое значение:
//  Строка - номер сборки.
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат "1.0.1.8";
	
КонецФункции

// Возвращает текущую версию компоненты НЦА, установленной в информационной базе.
//
// Возвращаемое значение:
//   Строка         - Версия компоненты НЦА.
//
Функция ВерсияКомпонентыНЦАВБазе() Экспорт
	Возврат "5.42";
КонецФункции

// Проверяет, можно ли подключить криптопровайдер только новой версии.
//
// Параметры:
//  Версия                      - Строка     - Версия криптопровайдера.
//  РежимТишины                 - Булево     - Флаг активации "тихого режима" подключения.
//  МестоВыполненияОпераций     - Любой      - Контекст выполнения операции.
//  ТолькоПодключение           - Булево     - Флаг, указывающий, нужно ли только подключить провайдер без проверки других параметров.
//  ПроверятьНЦА                - Любой      - Параметр для дополнительных проверок НЦА.
//
// Возвращаемое значение:
//   Булево                     - Истина, если удалось подключить новую версию криптопровайдера; Ложь в противном случае.
//
Функция КриптопровайдерПодключается(Версия = "", РежимТишины = Ложь, МестоВыполненияОпераций = Неопределено, ТолькоПодключение = Ложь, ИспользоватьНастройкуМестаКриптографии = Истина) Экспорт
	
	Если Не ИспользоватьНастройкуМестаКриптографии Тогда
		Подключается = УдалосьПодключитьКриптопровайдерНЦА(Версия, РежимТишины, ТолькоПодключение);
		Возврат Подключается;
	КонецЕсли;
	
	// Место выполнения операции
	ВыполнятьКриптографическиеОперацииНаКлиенте = Неопределено;
	
	Если ЗначениеЗаполнено(МестоВыполненияОпераций) Тогда
		ВыполнятьКриптографическиеОперацииНаКлиенте = МестоВыполненияОпераций = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаКлиенте");
	Иначе
		ВыполнятьКриптографическиеОперацииНаКлиенте = КриптографияВызовСервера.ВыполнятьКриптографическиеОперацииНаКлиенте();
	КонецЕсли;
	
	Если ВыполнятьКриптографическиеОперацииНаКлиенте Тогда
		Подключается = УдалосьПодключитьКриптопровайдерНЦА(Версия, РежимТишины, ТолькоПодключение);
	Иначе
		Подключается = КриптографияВызовСервера.УдалосьПодключитьКриптопровайдерНЦА(Версия, РежимТишины);
	КонецЕсли;
	
	Возврат Подключается;
	
КонецФункции

#Область ПодписьCMS

// Создает цифровую подпись (ЭЦП) в формате CMS.
// Параметры:
//  ДанныеДляПодписи - Массив или Строка – данные для подписания.
//  ПараметрыВзаимодействия - Структура – настройки взаимодействия с криптопровайдером.
// Возвращаемое значение:
//   Структура – результат подписи, включая статус и служебные данные.
//
Функция СоздатьЭЦП_CMS(Знач ДанныеДляПодписи, ПараметрыВзаимодействия) Экспорт
	
	ПодписьСписка = ТипЗнч(ДанныеДляПодписи) = Тип("Массив");
	
	ДанныеДляПодписи = ПреобразоватьДанныеВBase64(ДанныеДляПодписи, ПодписьСписка, ПараметрыВзаимодействия);
	
	ДанныеДляПодписиJSON = КриптографияВызовСервера.НовыйЗапросJSON(ДанныеДляПодписи);
	
	СтруктураКриптопровайдера = Неопределено;
	
	Попытка
		Криптопровайдер = НовыйКриптопровайдерWSSocket();
		
		Если ПодписьСписка Тогда
			
			ОтветОтКриптопровайдера = Криптопровайдер.GetCMSesSign(
				ПараметрыВзаимодействия.ИдентификаторКлиента,
				ПараметрыВзаимодействия.ИдентификаторСервиса,
				ПараметрыВзаимодействия.ДополнительныеПараметры,
				ДанныеДляПодписиJSON,
				ПараметрыВзаимодействия.ВключатьДанныеВПодпись,
				ПараметрыВзаимодействия.ВключатьШтампВремениВПодпись);
			
		Иначе
			
			ОтветОтКриптопровайдера = Криптопровайдер.GetCMSSign(
				ПараметрыВзаимодействия.ИдентификаторКлиента,
				ПараметрыВзаимодействия.ИдентификаторСервиса,
				ПараметрыВзаимодействия.ДополнительныеПараметры,
				ДанныеДляПодписиJSON,
				ПараметрыВзаимодействия.ВключатьДанныеВПодпись,
				ПараметрыВзаимодействия.ВключатьШтампВремениВПодпись);
			
		КонецЕсли;
		
		СтруктураКриптопровайдера = ПолучитьСтруктуруИзКриптопровайдера(Криптопровайдер);
		
		СтруктураОтвета = ОбработатьОтветКриптопровайдера(ОтветОтКриптопровайдера, СтруктураКриптопровайдера, ПодписьСписка);
		
		Если СтруктураОтвета.ЭтоОшибка И Не ПараметрыВзаимодействия.ТихийРежим Тогда
			КриптографияКлиентСерверПереопределяемый.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Операция не выполнена. %1 %2'"),
					СтруктураОтвета.КодОшибки,
					СтруктураОтвета.ТекстОшибки)
				);
		КонецЕсли;
		
		Возврат СтруктураОтвета;
		
	Исключение
		
		Если СтруктураКриптопровайдера = Неопределено Тогда
			СтруктураКриптопровайдера = ПолучитьСтруктуруИзКриптопровайдера(Криптопровайдер);
		КонецЕсли;
		
		ОбработатьИсключениеКриптопровайдера(СтруктураКриптопровайдера, ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область ПодписьXML

// Создает цифровую подпись (ЭЦП) в формате XML.
// Параметры:
//  ДанныеДляПодписи - Массив или Строка – данные для подписания.
//  ПараметрыВзаимодействия - Структура – настройки взаимодействия с криптопровайдером.
// Возвращаемое значение:
//   Структура – результат подписи, включая статус и служебные данные.
//
Функция СоздатьЭЦП_XML(Знач ДанныеДляПодписи, ПараметрыВзаимодействия) Экспорт
	
	ПодписьСписка = ТипЗнч(ДанныеДляПодписи) = Тип("Массив");
	
	ДанныеДляПодписи = ПреобразоватьДанныеВBase64(ДанныеДляПодписи, ПодписьСписка, ПараметрыВзаимодействия);
	
	ДанныеДляПодписиJSON = КриптографияВызовСервера.НовыйЗапросJSON(ДанныеДляПодписи);
	
	СтруктураКриптопровайдера = Неопределено;
	
	Попытка
		Криптопровайдер = НовыйКриптопровайдерWSSocket();
		
		Если ПодписьСписка Тогда
			
			ОтветОтКриптопровайдера = Криптопровайдер.GetXMLsSign(
				ПараметрыВзаимодействия.ИдентификаторКлиента,
				ПараметрыВзаимодействия.ИдентификаторСервиса,
				ПараметрыВзаимодействия.ДополнительныеПараметры,
				ДанныеДляПодписиJSON,
				ПараметрыВзаимодействия.ТегПодписываемыхДанных,
				ПараметрыВзаимодействия.ЭлементРазмещенияПодписиXML);
			
		Иначе
			
			ОтветОтКриптопровайдера = Криптопровайдер.GetXMLSign(
				ПараметрыВзаимодействия.ИдентификаторКлиента,
				ПараметрыВзаимодействия.ИдентификаторСервиса,
				ПараметрыВзаимодействия.ДополнительныеПараметры,
				ДанныеДляПодписиJSON,
				ПараметрыВзаимодействия.ТегПодписываемыхДанных,
				ПараметрыВзаимодействия.ЭлементРазмещенияПодписиXML);
			
		КонецЕсли;
		
		СтруктураКриптопровайдера = ПолучитьСтруктуруИзКриптопровайдера(Криптопровайдер);
		
		СтруктураОтвета = ОбработатьОтветКриптопровайдера(ОтветОтКриптопровайдера, СтруктураКриптопровайдера, ПодписьСписка);
		
		Если СтруктураОтвета.ЭтоОшибка И Не ПараметрыВзаимодействия.ТихийРежим Тогда
			КриптографияКлиентСерверПереопределяемый.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Операция не выполнена. %1 %2'"),
					СтруктураОтвета.КодОшибки,
					СтруктураОтвета.ТекстОшибки)
				);
		КонецЕсли;
		
		Возврат СтруктураОтвета;
		
	Исключение
		
		Если СтруктураКриптопровайдера = Неопределено Тогда
			СтруктураКриптопровайдера = ПолучитьСтруктуруИзКриптопровайдера(Криптопровайдер);
		КонецЕсли;
		
		ОбработатьИсключениеКриптопровайдера(СтруктураКриптопровайдера, ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область ПодписьRaw

// Создает цифровую подпись (ЭЦП) в формате сырой подписи Raw.
// Параметры:
//  ДанныеДляПодписи - Массив или Строка – данные для подписания.
//  ПараметрыВзаимодействия - Структура – настройки взаимодействия с криптопровайдером.
// Возвращаемое значение:
//   Структура – результат подписи, включая статус и служебные данные.
//
Функция СоздатьЭЦП_Raw(Знач ДанныеДляПодписи, ПараметрыВзаимодействия) Экспорт
	
	ПодписьСписка = ТипЗнч(ДанныеДляПодписи) = Тип("Массив");
	
	ДанныеДляПодписи = ПреобразоватьДанныеВBase64(ДанныеДляПодписи, ПодписьСписка, ПараметрыВзаимодействия);
	
	ДанныеДляПодписиJSON = КриптографияВызовСервера.НовыйЗапросJSON(ДанныеДляПодписи);
	
	СтруктураКриптопровайдера = Неопределено;
	
	Попытка
		Криптопровайдер = НовыйКриптопровайдерWSSocket();
		
		Если ПодписьСписка Тогда
			
			ОтветОтКриптопровайдера = Криптопровайдер.GetRawsSign(
				ПараметрыВзаимодействия.ИдентификаторКлиента,
				ПараметрыВзаимодействия.ИдентификаторСервиса,
				ПараметрыВзаимодействия.ДополнительныеПараметры,
				ДанныеДляПодписиJSON);
			
		Иначе
			
			ОтветОтКриптопровайдера = Криптопровайдер.GetRawSign(
				ПараметрыВзаимодействия.ИдентификаторКлиента,
				ПараметрыВзаимодействия.ИдентификаторСервиса,
				ПараметрыВзаимодействия.ДополнительныеПараметры,
				ДанныеДляПодписиJSON);
			
		КонецЕсли;
		
		СтруктураКриптопровайдера = ПолучитьСтруктуруИзКриптопровайдера(Криптопровайдер);
		
		СтруктураОтвета = ОбработатьОтветКриптопровайдера(ОтветОтКриптопровайдера, СтруктураКриптопровайдера, ПодписьСписка);
		
		Если СтруктураОтвета.ЭтоОшибка И Не ПараметрыВзаимодействия.ТихийРежим Тогда
			КриптографияКлиентСерверПереопределяемый.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Операция не выполнена. %1 %2'"),
					СтруктураОтвета.КодОшибки,
					СтруктураОтвета.ТекстОшибки)
				);
		КонецЕсли;
		
		Возврат СтруктураОтвета;
		
	Исключение
		
		Если СтруктураКриптопровайдера = Неопределено Тогда
			СтруктураКриптопровайдера = ПолучитьСтруктуруИзКриптопровайдера(Криптопровайдер);
		КонецЕсли;
		
		ОбработатьИсключениеКриптопровайдера(СтруктураКриптопровайдера, ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область ДанныеСертификата

// Получает данный сертификата ключа.
// Параметры:
//  ПараметрыВзаимодействия - Структура – настройки взаимодействия с криптопровайдером.
// Возвращаемое значение:
//   Структура – результат, включая статус и служебные данные.
//
Функция ПолучитьДанныеСертификата(ПараметрыВзаимодействия) Экспорт
	
	СтруктураКриптопровайдера = Неопределено;
	
	Попытка
		Криптопровайдер = НовыйКриптопровайдерWSSocket();
		
		ОтветОтКриптопровайдера = Криптопровайдер.GetKeyInfo(
				ПараметрыВзаимодействия.ИдентификаторКлиента,
				ПараметрыВзаимодействия.ИдентификаторСервиса,
				ПараметрыВзаимодействия.ДополнительныеПараметры);
			
		СтруктураКриптопровайдера = ПолучитьСтруктуруИзКриптопровайдера(Криптопровайдер);
		
		СтруктураОтвета = ОбработатьОтветКриптопровайдера(ОтветОтКриптопровайдера, СтруктураКриптопровайдера, Ложь);
		
		Если СтруктураОтвета.ЭтоОшибка И Не ПараметрыВзаимодействия.ТихийРежим Тогда
			КриптографияКлиентСерверПереопределяемый.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Операция не выполнена. %1 %2'"),
					СтруктураОтвета.КодОшибки,
					СтруктураОтвета.ТекстОшибки)
				);
		КонецЕсли;
		
		Возврат СтруктураОтвета;
		
	Исключение
		
		Если СтруктураКриптопровайдера = Неопределено Тогда
			СтруктураКриптопровайдера = ПолучитьСтруктуруИзКриптопровайдера(Криптопровайдер);
		КонецЕсли;
		
		ОбработатьИсключениеКриптопровайдера(СтруктураКриптопровайдера, ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область ДополнительныеСведения

// Получает дополнительные сведения работы внешней компоненты.
// Параметры:
//  ПараметрыВзаимодействия - Структура – настройки взаимодействия с криптопровайдером.
// Возвращаемое значение:
//   Структура – результат, включая статус и служебные данные.
//
Функция ПолучитьДополнительныеСведения(ПараметрыВзаимодействия) Экспорт
	
	СтруктураКриптопровайдера = Неопределено;
	
	Попытка
		Криптопровайдер = НовыйКриптопровайдерWSSocket();
		
		ОтветОтКриптопровайдера = Криптопровайдер.GetAdditionalInfo();
			
		СтруктураКриптопровайдера = ПолучитьСтруктуруИзКриптопровайдера(Криптопровайдер);
		
		СтруктураОтвета = ОбработатьОтветКриптопровайдера(ОтветОтКриптопровайдера, СтруктураКриптопровайдера, Ложь);
		
		Если СтруктураОтвета.ЭтоОшибка И Не ПараметрыВзаимодействия.ТихийРежим Тогда
			КриптографияКлиентСерверПереопределяемый.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Операция не выполнена. %1 %2'"),
					СтруктураОтвета.КодОшибки,
					СтруктураОтвета.ТекстОшибки)
				);
		КонецЕсли;
		
		Возврат СтруктураОтвета;
		
	Исключение
		
		Если СтруктураКриптопровайдера = Неопределено Тогда
			СтруктураКриптопровайдера = ПолучитьСтруктуруИзКриптопровайдера(Криптопровайдер);
		КонецЕсли;
		
		ОбработатьИсключениеКриптопровайдера(СтруктураКриптопровайдера, ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область УстановкаКриптографии

// Проверяет возможность подключения криптопровайдера НЦА.
//
// Параметры:
//  Версия           - Строка     - Версия криптопровайдера.
//  РежимТишины      - Булево     - Флаг активации "тихого режима" подключения.
//  ТолькоПодключение - Булево    - Флаг, указывающий, нужно ли только подключить провайдер без проверки других параметров.
//
// Возвращаемое значение:
//   Булево          - Истина, если подключение выполнено успешно; Ложь в противном случае.
//
Функция УдалосьПодключитьКриптопровайдерНЦА(Версия = "", РежимТишины = Ложь, ТолькоПодключение = Ложь) Экспорт
	Криптопровайдер = КриптографияКлиентСерверПовтИсп.НовыйКриптопровайдерWSSocket(, РежимТишины, ТолькоПодключение);
		
	Если Криптопровайдер = Неопределено Тогда
		ОбновитьПовторноИспользуемыеЗначения();
		Подключается = Ложь;
		Версия = "";
	Иначе
		Подключается = Истина;
		Версия = Криптопровайдер.Версия;
	КонецЕсли;
	
	Возврат Подключается;
КонецФункции

// Возвращает адрес библиотеки криптографии НЦА, см. КриптографияВызовСервера.АдресБиблиотекиКриптографииНЦА.
// При вызове процедуры из конекста клиента необходимо передавать идентификатор клиентской формы,
// иначе хранилище будет очищено при возврате в контекст клиента
//
// Параметры:
//  УникальныйИдентификаторФормыКлиента - Любой      - Идентификатор формы клиента, необходимый для временного хранения ссылки на модуль.
//
// Возвращаемое значение:
//   Строка         - Адрес библиотеки криптографии.
//
Функция АдресБиблиотекиКриптографииНЦА(УникальныйИдентификаторФормыКлиента = Неопределено) Экспорт
	Возврат КриптографияВызовСервера.АдресБиблиотекиКриптографииНЦА(УникальныйИдентификаторФормыКлиента);
КонецФункции

// Генерирует уникальное имя компоненты криптографии НЦА с учетом текущего сеанса.
//
// Возвращаемое значение:
//   Строка         - Уникальное имя компоненты криптографии.
//
Функция ИмяКомпонентыКриптографииНЦА() Экспорт
	// для обхода ошибки подключения внешней компоненты на серверных базах
	// при параллельных сеансах работы пользователей используем номер сеанса ИБ, начиная с версии 8.3.7
	Попытка
		
		ТекущийСеансИБ = Вычислить("ПолучитьТекущийСеансИнформационнойБазы()");
		
		УникальныйНомерКомпоненты = "" + Формат(ТекущийСеансИБ.НомерСеанса, "ЧРГ=_") + "" + Формат(ТекущийСеансИБ.НачалоСеанса, "ДФ=ддММгггЧЧммсс");
		
		Результат = "";
		
		Для НомерСимвола = 1 По СтрДлина(УникальныйНомерКомпоненты) Цикл
			КодСимвола = КодСимвола(УникальныйНомерКомпоненты, НомерСимвола);
			Если КодСимвола > 47 И КодСимвола < 58 Тогда // Число.
				Результат = Результат + Символ(КодСимвола);
			КонецЕсли;
		КонецЦикла;
		
		УникальныйНомерКомпоненты = Результат;
		
	Исключение
		
		УникальныйНомерКомпоненты = "";
		
	КонецПопытки;
	
	Возврат "WSCrypto" + УникальныйНомерКомпоненты;
КонецФункции

// Возвращает имя объекта криптографии НЦА.
//
// Возвращаемое значение:
//   Строка         - Имя объекта криптографии.
//
Функция ИмяОбъектаКриптографииНЦА() Экспорт
	Возврат "AddIn." + ИмяКомпонентыКриптографииНЦА() + ".WSCrypto";
КонецФункции

#КонецОбласти

#Область ОшибкиКриптографии

// Обрабатывает сообщение об ошибке, полученное от компоненты криптографии.
//
// Параметры:
//  ОтветСокетаJson - Структура или Неопределено - ответ в формате JSON.
//  Криптопровайдер - Структура - данные объекта внешней компоненты криптопровайдера.
// Возвращаемое значение:
//   Строка - описание ошибки для пользователя.
//
Функция ОбработатьСообщениеОбОшибке(ОтветСокетаJson, Криптопровайдер) Экспорт
	Если ОтветСокетаJson = Неопределено Тогда
		Возврат ЛокализоватьСтрокуОшибки("ОшибкаNCALayer");
	КонецЕсли;
	
	Если ОтветСокетаJson.Свойство("Code") Тогда
		СообщениеОбОшибке = СообщениеПоКодуОшибки(ОтветСокетаJson.Code, ОтветСокетаJson, Криптопровайдер);
		Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
			Возврат СообщениеОбОшибке;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЛокализоватьСтрокуОшибки("ОшибкаВызоваКомпоненты");
КонецФункции

// Вспомогательная функция возвращает сообщение об ошибке по коду.
//
// Параметры:
//  КодОшибки - Строка - код ошибки.
//  ОтветСокетаJson - Структура - структура ответа.
//  Криптопровайдер - Структура - данные объекта внешней компоненты криптопровайдера.
//
// Возвращаемое значение:
//   Строка - сообщение об ошибке.
//
Функция СообщениеПоКодуОшибки(КодОшибки, ОтветСокетаJson, Криптопровайдер)
	СообщенияОшибок = Новый Соответствие;
	СообщенияОшибок.Вставить("500", ЛокализоватьСтрокуОшибки("НеквалифицированнаяОшибка"));
	СообщенияОшибок.Вставить("101", ЛокализоватьСтрокуОшибки("ОшибкаПерекодировкиДанных"));
	СообщенияОшибок.Вставить("201", ЛокализоватьСтрокуОшибки("ОшибкаВходныхПараметров"));
	СообщенияОшибок.Вставить("300", ЛокализоватьСтрокуОшибки("ОшибкаРаботыСокета"));
	
	Если СообщенияОшибок.Получить(КодОшибки) <> Неопределено Тогда
		Если КодОшибки = "500" И ОтветСокетаJson.Свойство("message") Тогда
			Если ОтветСокетаJson.message = "action.canceled" Тогда
				Возврат ЛокализоватьСтрокуОшибки("ОтменаВыбораКлюча");
			ИначеЕсли ЗначениеЗаполнено(ОтветСокетаJson.message) И ЗначениеЗаполнено(Криптопровайдер.ТекстОшибки) Тогда
				Возврат СтрШаблон(ЛокализоватьСтрокуОшибки("ТехническаяИнформация"), ОтветСокетаJson.message + " " + Криптопровайдер.ТекстОшибки);
			ИначеЕсли ЗначениеЗаполнено(Криптопровайдер.ТекстОшибки) Тогда
				Возврат СтрШаблон(ЛокализоватьСтрокуОшибки("ТехническаяИнформация"), Криптопровайдер.ТекстОшибки);
			Иначе
				Возврат СтрШаблон(ЛокализоватьСтрокуОшибки("ТехническаяИнформация"), ОтветСокетаJson.message);
			КонецЕсли;
		КонецЕсли;
		Возврат СообщенияОшибок[КодОшибки];
	КонецЕсли;
	
	Если ОтветСокетаJson.Свойство("message") Тогда
		Возврат ОтветСокетаJson.message;
	КонецЕсли;
	
	Возврат "";
КонецФункции

// Локализует строки для ошибок.
//
// Параметры:
//  Ключ - Строка - ключ сообщения.
// Возвращаемое значение:
//   Строка - локализованное сообщение.
//
Функция ЛокализоватьСтрокуОшибки(Ключ) Экспорт
	Сообщения = Новый Соответствие;
	Сообщения.Вставить("ОшибкаNCALayer",            НСтр("ru='Возникла проблема при использовании NCALayer. Возможно, программа не запущена, или не установлен модуль ""1С-Рейтинг ЭДО""'"));
	Сообщения.Вставить("ОшибкаВызоваКомпоненты",    НСтр("ru='Ошибка вызова внешней компоненты.'"));
	Сообщения.Вставить("НеквалифицированнаяОшибка", НСтр("ru='Неквалифицированная ошибка вызова внешней компоненты.'"));
	Сообщения.Вставить("ОшибкаПерекодировкиДанных", НСтр("ru='Ошибка перекодировки данных.'"));
	Сообщения.Вставить("ОшибкаВходныхПараметров",   НСтр("ru='Ошибка входных параметров.'"));
	Сообщения.Вставить("ОшибкаРаботыСокета",        НСтр("ru='Ошибка при работе с сокетом.'"));
	Сообщения.Вставить("ОтменаВыбораКлюча",         НСтр("ru='Отмена выбора ключа подписи.'"));
	Сообщения.Вставить("ТехническаяИнформация",     НСтр("ru='Тех. информация: %1'"));
	Сообщения.Вставить("ОтветНеПолучен",            НСтр("ru='Ошибка выполнения: ответ от криптопровайдера не получен.'"));
	Сообщения.Вставить("НеверныйФайл",              НСтр("ru='Возможно выбранный файл не является файлом сертификата ""*.p12"".'"));
	Сообщения.Вставить("НеверныйПароль",            НСтр("ru='Возможно был введен некорректный пароль для файла сертификата.'"));
	Сообщения.Вставить("НевернаяСтруктураОтвета",   НСтр("ru='Ответ от криптопровайдера имеет неверную или неполную структуру данных.'"));
	
	Если Сообщения.Получить(Ключ) <> Неопределено Тогда
		Возврат Сообщения[Ключ];
	КонецЕсли;
	
	Возврат НСтр("ru='Неизвестная ошибка.'");
КонецФункции

// Функция создает описание ошибки криптопровайдера на основе переданной информации.
//
// Параметры:
//  Криптопровайдер - Структура - данные объекта внешней компоненты криптопровайдера.
//  ИнформацияОбОшибке - Структура - дополнительные данные об ошибке.
// Возвращаемое значение:
//   Структура - описание ошибки с подробностями.
//
Функция ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке) Экспорт
	Ошибка = Новый Структура;
	
	Если Криптопровайдер = Неопределено Тогда
		Ошибка.Вставить("Версия", "");
		Ошибка.Вставить("КодОшибки", "");
		Ошибка.Вставить("ОписаниеОшибки", "");
	Иначе
		Ошибка.Вставить("Версия", Криптопровайдер.Версия);
		Ошибка.Вставить("КодОшибки", Криптопровайдер.КодОшибки);
		Ошибка.Вставить("ОписаниеОшибки", Криптопровайдер.ТекстОшибки);
	КонецЕсли;
	
	Ошибка.Вставить("ИнформацияОбОшибке", ИнформацияОбОшибке);
	
	ТипОшибки = ТипОшибкиКриптопровайдера(Ошибка);
	Ошибка.Вставить("ТипОшибки", ТипОшибки);
	
	ПредставленияОшибки = ПредставленияОшибкиКриптопровайдера(Ошибка);
	Ошибка.Вставить("КраткоеПредставление", ПредставленияОшибки.КраткоеПредставление);
	Ошибка.Вставить("ПодробноеПредставление", ПредставленияОшибки.ПодробноеПредставление);
	
	Возврат Ошибка;
КонецФункции

// Определяет тип ошибки на основе описания.
// Параметры:
//  Ошибка - Структура – структура с данными об ошибке.
// Возвращаемое значение:
//   Строка – тип ошибки.
//
Функция ТипОшибкиКриптопровайдера(Ошибка)
	ТипОшибки = Ошибка_НеизвестнаяОшибка();
	
	Если Найти(Ошибка.ОписаниеОшибки, "0D0680A8") Тогда
		ТипОшибки = "НеверныйФайл";
	ИначеЕсли Найти(Ошибка.ОписаниеОшибки, "23076071") Тогда
		ТипОшибки = "НеверныйПароль";
	КонецЕсли;
	
	Возврат ТипОшибки;
КонецФункции

// Возвращает представления ошибок в кратком и полном формате.
// Параметры:
//  Ошибка - Структура – структура с данными об ошибке.
// Возвращаемое значение:
//   Структура – краткое и подробное представление ошибки.
//
Функция ПредставленияОшибкиКриптопровайдера(Ошибка)
	ПредставленияОшибки = Новый Структура;
	
	КраткоеПредставление = КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка);
	КраткоеПредставление = СтрШаблон(НСтр("ru = '%1 . Подробности ошибки смотрите в журнале регистрации.'"),КраткоеПредставление);
	ПредставленияОшибки.Вставить("КраткоеПредставление", КраткоеПредставление);
	
	ПодробноеПредставление = ПодробноеПредставлениеОшибкиКриптопровайдера(Ошибка);
	ПредставленияОшибки.Вставить("ПодробноеПредставление", ПодробноеПредставление);
	
	Возврат ПредставленияОшибки;
КонецФункции

// Возвращает краткое описание ошибки криптопровайдера.
// Параметры:
//  Ошибка - Структура – структура с данными об ошибке.
// Возвращаемое значение:
//   Строка – краткое описание ошибки.
//
Функция КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка)
	КраткоеПредставление = "";
	
	Если Ошибка.ТипОшибки = Ошибка_НеизвестнаяОшибка() Тогда
		КраткоеПредставление = КраткоеПредставлениеОшибки(Ошибка.ИнформацияОбОшибке);
	Иначе
		КраткоеПредставление = ЛокализоватьСтрокуОшибки(Ошибка.ТипОшибки);
	КонецЕсли;
	
	Возврат КраткоеПредставление;
КонецФункции

// Формирует подробное описание ошибки криптопровайдера.
//
// Параметры:
//  Ошибка - Структура - структура с данными об ошибке.
// Возвращаемое значение:
//   Строка - подробное описание ошибки.
//
Функция ПодробноеПредставлениеОшибкиКриптопровайдера(Ошибка)
	КраткоеПредставление = КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка);
	
	Если ПустаяСтрока(Ошибка.Версия) И ПустаяСтрока(Ошибка.КодОшибки) И ПустаяСтрока(Ошибка.ОписаниеОшибки) Тогда
		ИнформацияИзКриптопровайдера = "";
	Иначе
		ИнформацияИзКриптопровайдера = СтрШаблон(
		НСтр("ru = 'Версия криптографии: %1, Код ошибки: %2, Описание ошибки: %3'"),
		Ошибка.Версия, Ошибка.КодОшибки, Ошибка.ОписаниеОшибки
		);
	КонецЕсли;
	
	ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(Ошибка.ИнформацияОбОшибке);
	
	Возврат СтрШаблон(
		НСтр("ru = '%1
		|%2
		|%3'"),
		КраткоеПредставление, ИнформацияИзКриптопровайдера, ПодробноеПредставлениеОшибки);
	
КонецФункции

// Возвращает идентификатор неизвестной ошибки криптопровайдера.
//
// Возвращаемое значение:
//   Строка - идентификатор ошибки "НеизвестнаяОшибка".
//
Функция Ошибка_НеизвестнаяОшибка()
	Возврат "НеизвестнаяОшибка";
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает параметры взаимодействия с криптопровайдером для подписи CMS.
// Возвращаемое значение:
//   Структура с настройками взаимодействия.
//
Функция ПолучитьПараметрыВзаимодействияКриптопровайдера() Экспорт
	ПараметрыВзаимодействия = Новый Структура;
	
	ПараметрыВзаимодействия.Вставить("ДополнительныеПараметры",       "");
	ПараметрыВзаимодействия.Вставить("ИдентификаторСервиса",          "1CService");
	ПараметрыВзаимодействия.Вставить("ТихийРежим",                    Ложь);
	ПараметрыВзаимодействия.Вставить("КодироватьВbase64",             Ложь);
	ПараметрыВзаимодействия.Вставить("ИдентификаторКлиента",          "");
	//специфические параметры XML подписи
	ПараметрыВзаимодействия.Вставить("ТегПодписываемыхДанных",        "");
	ПараметрыВзаимодействия.Вставить("ЭлементРазмещенияПодписиXML",   "");
	//специфические параметры CMS подписи
	ПараметрыВзаимодействия.Вставить("ВключатьШтампВремениВПодпись",  Ложь);
	ПараметрыВзаимодействия.Вставить("ВключатьДанныеВПодпись",        Ложь);
	
	Возврат ПараметрыВзаимодействия;
КонецФункции

// Возвращает структуру для хранения результатов обработки ответа от криптопровайдера.
// Возвращаемое значение:
//   Структура – пустая структура с полями для хранения результатов.
//
Функция ПолучитьСтруктуруОтветаКриптопровайдера() Экспорт
	СтруктураОтветаКриптопровайдера = Новый Структура;
	
	СтруктураОтветаКриптопровайдера.Вставить("ОтветКриптопровайдера",         Неопределено);
	СтруктураОтветаКриптопровайдера.Вставить("ОтветКриптопровайдераСтрокой",  "");
	СтруктураОтветаКриптопровайдера.Вставить("ПодписанныеДанные",             Неопределено);
	СтруктураОтветаКриптопровайдера.Вставить("ДанныеСертификата",             Неопределено);
	СтруктураОтветаКриптопровайдера.Вставить("ДополнительныеСведения",        Неопределено);
	СтруктураОтветаКриптопровайдера.Вставить("СлужебныеДанные",               "");
	СтруктураОтветаКриптопровайдера.Вставить("ЭтоОшибка",                     Ложь);
	СтруктураОтветаКриптопровайдера.Вставить("ТекстОшибки",                   "");
	СтруктураОтветаКриптопровайдера.Вставить("КодОшибки",                     "");
	СтруктураОтветаКриптопровайдера.Вставить("ЭтоПодписьСписка",              Ложь);
	
	Возврат СтруктураОтветаКриптопровайдера;
КонецФункции

// Преобразует данные в формат Base64 при необходимости.
// Параметры:
//  ДанныеДляПодписи - Массив или Строка – данные для подписания или обработки.
//  ПодписьСписка - Булево значение – указывает, является ли подпись списком данных.
//  ПараметрыВзаимодействия - Структура – настройки, содержащие флаг кодирования в Base64.
// Возвращаемое значение:
//   Массив или Строка – преобразованные данные, закодированные в Base64, если это необходимо.
//
Функция ПреобразоватьДанныеВBase64(ДанныеДляПодписи, ПодписьСписка, ПараметрыВзаимодействия) Экспорт
	// Проверка, требуется ли кодирование в Base64
	Если ПараметрыВзаимодействия.КодироватьВbase64 Тогда
		// Если нужно подписывать список, то преобразуем каждый элемент списка
		Если ПодписьСписка Тогда
			Для Сч = 0 По ДанныеДляПодписи.Количество() - 1 Цикл
				ДанныеДляПодписи[Сч] = ПреобразоватьВBase64(ДанныеДляПодписи[Сч]);
			КонецЦикла;
		Иначе
			// Если подпись не является списком, преобразуем весь объект
			ДанныеДляПодписи = ПреобразоватьВBase64(ДанныеДляПодписи)
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеДляПодписи;
КонецФункции

// Преобразует строку в формат Base64, удаляя символы переноса.
// Параметры:
//  СтрокаДанных - Строка – строка для преобразования.
// Возвращаемое значение:
//   Строка – строка в формате Base64.
//
Функция ПреобразоватьВBase64(Знач СтрокаДанных)
	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки(СтрокаДанных);
	Возврат СтрЗаменить(
		СтрЗаменить(Base64Строка(ДвоичныеДанные), Символы.ВК, ""),
		Символы.ПС, ""
	);
КонецФункции

// Получить структуру данных из криптопровайдера
//
// Параметры:
//  Криптопровайдер  - Неопределено или Объект - Криптопровайдер, из которого необходимо получить данные.
//
// Возвращаемое значение:
//   Структура       - Структура - Структура, содержащая данные из криптопровайдера:
//                      * СлужебныеДанные - служебные данные криптопровайдера;
//                      * Версия - версия криптопровайдера;
//                      * КодОшибки - код ошибки, возвращенный криптопровайдером;
//                      * ТекстОшибки - текст ошибки, возвращенный криптопровайдером.
//
Функция ПолучитьСтруктуруИзКриптопровайдера(Криптопровайдер)
	СтруктураКриптопровайдера = Новый Структура("СлужебныеДанные,Версия,КодОшибки,ТекстОшибки",
		"","","","");
	
	Если Криптопровайдер <> Неопределено Тогда
		СтруктураКриптопровайдера.СлужебныеДанные	= Криптопровайдер.ServiceDataTicket;
		СтруктураКриптопровайдера.Версия			= Криптопровайдер.Версия;
		СтруктураКриптопровайдера.КодОшибки			= Криптопровайдер.КодОшибки;
		СтруктураКриптопровайдера.ТекстОшибки		= Криптопровайдер.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураКриптопровайдера;
КонецФункции

// Обрабатывает ответ от криптопровайдера и формирует структуру результата.
// Параметры:
//  ОтветОтКриптопровайдера - Строка или Структура – ответ от криптопровайдера.
//  Криптопровайдер - Структура - данные объекта внешней компоненты криптопровайдера.
//  ТихийРежим - Булево – флаг, указывающий, нужно ли подавлять сообщения об ошибках.
//  ПодписьСписка - Булево - указывает, был ли передан массив данных для подписи криптопровайдером.
// Возвращаемое значение:
//   Структура – структура результата обработки.
//
Функция ОбработатьОтветКриптопровайдера(ОтветОтКриптопровайдера, Криптопровайдер, ПодписьСписка) Экспорт
	СтруктураОтвета = ПолучитьСтруктуруОтветаКриптопровайдера();
	СтруктураОтвета.СлужебныеДанные = Криптопровайдер.СлужебныеДанные;
	СтруктураОтвета.ЭтоПодписьСписка = ПодписьСписка;
	
	Если ТипЗнч(ОтветОтКриптопровайдера) = Тип("Строка") Тогда
		Если ПустаяСтрока(ОтветОтКриптопровайдера) Тогда
			Возврат ОбработатьПустойОтвет(СтруктураОтвета, Криптопровайдер);
		КонецЕсли;
		
		СтруктураОтвета.ОтветКриптопровайдера        = КриптографияВызовСервера.ПрочитатьОтветJSON(ОтветОтКриптопровайдера);
		СтруктураОтвета.ОтветКриптопровайдераСтрокой = ОтветОтКриптопровайдера;
		
		Если СтруктураОтвета.ОтветКриптопровайдера.Свойство("Code") Тогда
			Если СтруктураОтвета.ОтветКриптопровайдера.Code = "200" Тогда
				РазобратьДанныеОтветаКриптопровайдера(СтруктураОтвета, Криптопровайдер);
			Иначе
				Возврат ОбработатьКодОшибки(СтруктураОтвета, Криптопровайдер);
			КонецЕсли;
		//Временный флаг до стандартизации метода GetAdditionalInfo в компоненте
		ИначеЕсли СтруктураОтвета.ОтветКриптопровайдера.Свойство("version") Тогда
			РазобратьДанныеОтветаКриптопровайдера(СтруктураОтвета, Криптопровайдер);
		Иначе
			Возврат ОбработатьНевернуюСтруктуруОтвета(СтруктураОтвета, Криптопровайдер);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОтветОтКриптопровайдера) <> Тип("Структура") Тогда
		Возврат ОбработатьНекорректныйОтвет(СтруктураОтвета, Криптопровайдер);
	КонецЕсли;
	
	Возврат СтруктураОтвета;
КонецФункции

// Разбирает ответ от криптопровайдера, извлекает данные сертификата
//   и подписанные данные, заполняя ими переданную структуру результатов.
//
// Параметры:
//  СтруктураОтвета - Структура - структура, в которую будут записаны результаты разбора
//   (данные сертификата, подписанные данные или информация об ошибках).
//  Криптопровайдер - Структура - данные объекта внешней компоненты криптопровайдера.
//
Процедура РазобратьДанныеОтветаКриптопровайдера(СтруктураОтвета, Криптопровайдер)
	ОтветКриптопровайдера = СтруктураОтвета.ОтветКриптопровайдера;
	СвойствоResponseObject = Неопределено;
	Если ОтветКриптопровайдера.Свойство("responseObject",СвойствоResponseObject) Тогда
		// RAW или KeyInfo
		Если ТипЗнч(СвойствоResponseObject) = Тип("Структура") Тогда
			
			// Разбор данных сертификата
			ОбработатьПолучениеДанныхСертификата(СтруктураОтвета, СвойствоResponseObject);
			
			// Разбор подписанных данных
			Если СвойствоResponseObject.Свойство("signResult") Тогда
				Если СтруктураОтвета.ЭтоПодписьСписка Тогда
					СвойствоSignResult = КриптографияВызовСервера.ПрочитатьОтветJSON(СвойствоResponseObject.signResult);
				Иначе
					СвойствоSignResult = СвойствоResponseObject.signResult;
				КонецЕсли;
				Если ТипЗнч(СвойствоSignResult) = Тип("Массив") Тогда
					Для Каждого ЭлементМассива Из СвойствоSignResult Цикл
						Если Не ЗначениеЗаполнено(ЭлементМассива) Тогда
							ОбработатьПустойОтвет(СтруктураОтвета, Криптопровайдер);
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ТипЗнч(СвойствоSignResult) = Тип("Строка") Тогда
					Если Не ЗначениеЗаполнено(СвойствоSignResult) Тогда
						ОбработатьПустойОтвет(СтруктураОтвета, Криптопровайдер);
					КонецЕсли;
				Иначе
					ОбработатьПустойОтвет(СтруктураОтвета, Криптопровайдер);
				КонецЕсли;
				СтруктураОтвета.ПодписанныеДанные = СвойствоSignResult;
			КонецЕсли;
			
		//XML или CMS
		ИначеЕсли ТипЗнч(СвойствоResponseObject) = Тип("Массив") Тогда
			Для Каждого ЭлементМассива Из СвойствоResponseObject Цикл
				Если Не ЗначениеЗаполнено(ЭлементМассива) Тогда
					ОбработатьПустойОтвет(СтруктураОтвета, Криптопровайдер);
				КонецЕсли;
			КонецЦикла;
			СтруктураОтвета.ПодписанныеДанные = СвойствоResponseObject;
		ИначеЕсли ТипЗнч(СвойствоResponseObject) = Тип("Строка") Тогда
			Если Не ЗначениеЗаполнено(СвойствоResponseObject) Тогда
				ОбработатьПустойОтвет(СтруктураОтвета, Криптопровайдер);
			КонецЕсли;
			СтруктураОтвета.ПодписанныеДанные = СвойствоResponseObject;
		Иначе
			ОбработатьНевернуюСтруктуруОтвета(СтруктураОтвета, Криптопровайдер);
		КонецЕсли;
	//Временный флаг до стандартизации метода GetAdditionalInfo в компоненте
	ИначеЕсли СтруктураОтвета.ОтветКриптопровайдера.Свойство("version") Тогда
		ОбработатьПолучениеДополнительныхСведенийКомпоненты(СтруктураОтвета)
	Иначе
		ОбработатьНевернуюСтруктуруОтвета(СтруктураОтвета, Криптопровайдер);
	КонецЕсли;
	
КонецПроцедуры

// Разбирает строку KeyInfo на ключ-значение пары, отфильтровывает пустые,
//   а для тега "pem" извлекает содержимое сертификата из строки.
//
// Параметры:
//  СтрокаKeyInfo - Строка - исходная строка, содержащая данные о ключе.
// 
// Возвращаемое значение:
//   Структура - структура, содержащая найденные пары ключ-значение.
//
Функция РазобратьПоУзламKeyInfo(СтрокаKeyInfo)
	ЗначенияКлючей = Новый Структура;
	СтрокаKeyInfo = СтрЗаменить(СтрокаKeyInfo, "KeyInfo(", ""); 
	МассивKeyInfo = СтрРазделить(СтрокаKeyInfo, ",", Ложь);
	
	Для каждого УзелKeyInfo Из МассивKeyInfo Цикл
		ПозицияРавенства = СтрНайти(УзелKeyInfo, "=",,,1);
		Если ПозицияРавенства <> 0 Тогда
			Ключ = СокрЛП(Лев(УзелKeyInfo, ПозицияРавенства-1));
			Значение = Сред(УзелKeyInfo, ПозицияРавенства+1, СтрДлина(УзелKeyInfo) - ПозицияРавенства);
			
			Если Ключ = "pem" Тогда
				НачалоСертификата = 0;
				КонецСертификата = 0;
				ТегНачалоСертификата = "-----BEGIN CERTIFICATE-----";
				ТегКонецСертификата = "-----END CERTIFICATE-----";
				Если СтрНайти(Значение, ТегНачалоСертификата) <> 0 Тогда
					НачалоСертификата = СтрНайти(Значение, ТегНачалоСертификата) + СтрДлина(ТегНачалоСертификата) + 1;
					КонецСертификата = СтрНайти(Значение, ТегКонецСертификата) - НачалоСертификата - 1;
				КонецЕсли;
				Значение = ?(НачалоСертификата = 0, СокрЛП(Значение), СокрЛП(Сред(Значение, НачалоСертификата, КонецСертификата)));
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(Ключ) И ЗначениеЗаполнено(Значение) Тогда
				ЗначенияКлючей.Вставить(Ключ, Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗначенияКлючей;
КонецФункции

// Определяет тип ключа по имени алгоритма (RSA или GOST).
//
// Параметры:
//  ИмяАлгоритма - Строка - имя алгоритма шифрования.
//
// Возвращаемое значение:
//   Строка - "RSA", "GOST" или пустая строка, если определить не удалось.
//
Функция ОпределитьТипКлючаПоАлгоритму(ИмяАлгоритма) Экспорт
	ТипКлюча = "";
	
	Если ИмяАлгоритма <> Неопределено Тогда
		Если Найти(ВРег(ИмяАлгоритма), "RSA") <> 0 Тогда
			ТипКлюча = КлючRSA();
		ИначеЕсли Найти(ВРег(ИмяАлгоритма), "GOST") <> 0 Тогда
			ТипКлюча = КлючGOST();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипКлюча;
КонецФункции

// Возвращает обозначение ключа типа GOST.
//
// Возвращаемое значение:
//   Строка - "GOST".
//
Функция КлючGOST() Экспорт
	Возврат "GOST";
КонецФункции

// Возвращает обозначение ключа типа RSA.
//
// Возвращаемое значение:
//  Строка - "RSA".
//
Функция КлючRSA() Экспорт
	Возврат "RSA";
КонецФункции

// Обрабатывает полученные данные сертификата и извлекает необходимые свойства,
// формируя структуру результата для дальнейшего использования.
//
// Параметры:
//  СтруктураОтвета      - Структура - структура, в которую будет помещен результат обработки данных сертификата.
//  СтруктураСертификата - Структура - структура, содержащая данные о сертификате, полученном от криптопровайдера.
//
Процедура ОбработатьПолучениеДанныхСертификата(СтруктураОтвета, СтруктураСертификата)
	// Проверяем, есть ли в структуре сертификата свойство "signerCert"
	Если СтруктураСертификата.Свойство("signerCert") Тогда
		СтруктураОтвета.ДанныеСертификата = Новый Структура;
		ЗначениеТэгов = РазобратьПоУзламKeyInfo(СтруктураСертификата.signerCert);
		Если ЗначениеТэгов.Свойство("pem") Тогда
			СтруктураОтвета.ДанныеСертификата.Вставить("ОткрытыйСертификатBase64", ЗначениеТэгов.pem);
		КонецЕсли;
		Если ЗначениеТэгов.Свойство("algorithm") Тогда
			СтруктураОтвета.ДанныеСертификата.Вставить("ТипКлюча", ОпределитьТипКлючаПоАлгоритму(ЗначениеТэгов.algorithm));
		КонецЕсли;
	// Если нет "signerCert", но есть "pem", получаем данные из ответа криптопровайдера
	ИначеЕсли СтруктураСертификата.Свойство("pem") Тогда
		СтруктураОтвета.ДанныеСертификата = ПолучитьДанныеСертификатаИзОтветаКриптопровайдера(СтруктураСертификата);
	КонецЕсли;
КонецПроцедуры

// Обрабатывает полученные данные настроек внешней компоненты,
// формируя структуру результата для дальнейшего использования.
//
// Параметры:
//  СтруктураОтвета      - Структура - структура, в которую будет помещен результат обработки данных сертификата.
//
Процедура ОбработатьПолучениеДополнительныхСведенийКомпоненты(СтруктураОтвета)
	ДополнительныеСведения = СтруктураОтвета.ОтветКриптопровайдера;
	Если ДополнительныеСведения.Свойство("version") Тогда
		СтруктураОтвета.ДополнительныеСведения = Новый Структура;
		СтруктураОтвета.ДополнительныеСведения.Вставить("Версия", ДополнительныеСведения.version);
		Если ДополнительныеСведения.Свойство("NCALayer") Тогда
			СведенияNCALayer = ДополнительныеСведения.NCALayer;
			NCALayer = Новый Структура;
			Если СведенияNCALayer.Свойство("NCALayer_Port") Тогда
				NCALayer.Вставить("Порт", СведенияNCALayer.NCALayer_Port);
			КонецЕсли;
			Если СведенияNCALayer.Свойство("NCALayer_Connected") Тогда
				NCALayer.Вставить("Подключен", СведенияNCALayer.NCALayer_Connected);
			КонецЕсли;
			Если СведенияNCALayer.Свойство("NCALayer_ModuleEDOInstalled") Тогда
				NCALayer.Вставить("МодульЭДОУстановлен", СведенияNCALayer.NCALayer_ModuleEDOInstalled);
			КонецЕсли;
			Если СведенияNCALayer.Свойство("NCALayer_ModuleEDOVersion") Тогда
				NCALayer.Вставить("МодульЭДОВерсия", СведенияNCALayer.NCALayer_ModuleEDOVersion);
			КонецЕсли;
			СтруктураОтвета.ДополнительныеСведения.Вставить("NCALayer", NCALayer);
		КонецЕсли;
		Если ДополнительныеСведения.Свойство("Kalkan") Тогда
			СведенияKalkan = ДополнительныеСведения.Kalkan;
			Kalkan = Новый Структура;
			Если СведенияKalkan.Свойство("Kalan_Init") Тогда
				Kalkan.Вставить("Подключен", СведенияKalkan.Kalan_Init);
			КонецЕсли;
			СтруктураОтвета.ДополнительныеСведения.Вставить("Kalkan", Kalkan);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Формирует структуру данных сертификата на основе ответа криптопровайдера,
// извлекая ключевые параметры (имя издателя, сроки действия, ИИН субъекта и прочие данные).
//
// Параметры:
//  СтруктураСертификата - Структура - данные о сертификате, предоставленные криптопровайдером.
//
// Возвращаемое значение:
//  Структура - структура со свойствами сертификата.
//
Функция ПолучитьДанныеСертификатаИзОтветаКриптопровайдера(Знач СтруктураСертификата) Экспорт
	ДанныеСертификата = ПолучитьСтруктуруСертификата();
	
	ДанныеСертификата.ИдентификаторОткрытогоКлюча = ПолучитьСвойствоСертификата(СтруктураСертификата, "authorityKeyIdentifier", "");
	ДанныеСертификата.ИмяИздателя                 = ПолучитьСвойствоСертификата(СтруктураСертификата, "issuerCn","");
	ДанныеСертификата.СрокГодностиОт              = ПолучитьЗначениеДатыСертификата(ПолучитьСвойствоСертификата(СтруктураСертификата, "certNotBefore", ""));
	ДанныеСертификата.СрокГодностиДо              = ПолучитьЗначениеДатыСертификата(ПолучитьСвойствоСертификата(СтруктураСертификата, "certNotAfter", ""));
	ДанныеСертификата.ИмяФамилияСубъекта          = ПолучитьСвойствоСертификата(СтруктураСертификата, "subjectCn", "");
	СвойствоSubjectDn                             = ПолучитьСвойствоСертификата(СтруктураСертификата, "subjectDn", "");
	ДанныеSubjectDn                               = РазобратьСвойствоSubjectDn(СвойствоSubjectDn);
	ДанныеСертификата.ИИНСубъекта                 = Сред(ПолучитьСвойствоСертификата(ДанныеSubjectDn, "SERIALNUMBER", ""),4);
	ДанныеСертификата.Страна                      = ПолучитьСвойствоСертификата(ДанныеSubjectDn, "C", "");
	ДанныеСертификата.НаименованиеОрганизации     = ПолучитьСвойствоСертификата(ДанныеSubjectDn, "O", "");
	ДанныеСертификата.ОтчествоСубъекта            = ПолучитьСвойствоСертификата(ДанныеSubjectDn, "G", "");
	ДанныеСертификата.БИНОрганизации              = ПолучитьЗначениеБИНСертификата(ПолучитьСвойствоСертификата(ДанныеSubjectDn, "OU", ""));
	ДанныеСертификата.EmailСубъекта               = ПолучитьСвойствоСертификата(ДанныеSubjectDn, "E", "");
	
	//ДанныеСертификата.EmailСубъекта             = ПолучитьСвойствоСертификата(СтруктураСертификата, "subject.emailAddress", "");	
	//ДанныеСертификата.РегионОбласть             = ПолучитьСвойствоСертификата(СтруктураСертификата, "subject.ST", "");	
	//ДанныеСертификата.Город                     = ПолучитьСвойствоСертификата(СтруктураСертификата, "subject.L", "");	
	
	ДанныеСертификата.ТипКлюча                    = ОпределитьТипКлючаПоАлгоритму(ПолучитьСвойствоСертификата(СтруктураСертификата, "algorithm", ""));
	// Формируем описание сертификата в удобочитаемом виде
	ДанныеСертификата.ОписаниеСертификата         = ПолучитьОписаниеСертификатаСтрокой(ДанныеСертификата);
	
	Возврат ДанныеСертификата;
КонецФункции

// Возвращает пустую структуру сертификата с предопределенным набором свойств.
//
// Возвращаемое значение:
//  Структура - структура, содержащая предопределенные поля для данных о сертификате.
//
Функция ПолучитьСтруктуруСертификата()
	СвойстваСертификата = Новый Структура;
	
	СвойстваСертификата.Вставить("ИдентификаторОткрытогоКлюча", "");
	СвойстваСертификата.Вставить("ИмяИздателя", "");
	СвойстваСертификата.Вставить("СрокГодностиОт", "");
	СвойстваСертификата.Вставить("СрокГодностиДо", "");
	СвойстваСертификата.Вставить("ИмяФамилияСубъекта", "");
	СвойстваСертификата.Вставить("ОтчествоСубъекта", "");
	СвойстваСертификата.Вставить("ИИНСубъекта", "");
	СвойстваСертификата.Вставить("EmailСубъекта", "");
	СвойстваСертификата.Вставить("Страна", "");
	СвойстваСертификата.Вставить("РегионОбласть", "");
	СвойстваСертификата.Вставить("Город", "");
	СвойстваСертификата.Вставить("БИНОрганизации", "");
	СвойстваСертификата.Вставить("НаименованиеОрганизации", "");
	СвойстваСертификата.Вставить("ТипКлюча", "");
	СвойстваСертификата.Вставить("ОписаниеСертификата", "");
	
	Возврат СвойстваСертификата;
КонецФункции

// Возвращает значение указанного свойства сертификата,
// если оно присутствует в структуре, иначе возвращает переданное значение по умолчанию.
//
// Параметры:
//  ДанныеСертификата - Структура - структура с данными сертификата.
//  ИмяСвойства       - Строка    - имя свойства, которое необходимо получить.
//  ПустоеЗначение    - Произвольный тип - значение, возвращаемое по умолчанию, если свойство отсутствует.
//
// Возвращаемое значение:
//  Произвольный тип - Значение свойства или значение по умолчанию.
//
Функция ПолучитьСвойствоСертификата(ДанныеСертификата, ИмяСвойства, ПустоеЗначение)
	
	ЗначениеСвойства = ПустоеЗначение;
	
	Если ДанныеСертификата.Свойство(ИмяСвойства) Тогда
		ЗначениеСвойства = ДанныеСертификата[ИмяСвойства];
	КонецЕсли;
	
	Возврат ЗначениеСвойства;
	
КонецФункции

// Преобразует строковое значение даты/времени в тип Дата.
// Пытается определить формат входной строки, поддерживая форматы с двоеточиями и точками.
//
// Параметры:
//  ДанныеДаты - Строка - строковое представление даты и/или времени.
//
// Возвращаемое значение:
//  Дата - значение даты и времени, полученное из строки или дата "00010101" в случае неудачи.
//
Функция ПолучитьЗначениеДатыСертификата(ДанныеДаты)
	ЗначениеДаты = Дата("00010101");
	
	Попытка 
		Если СтрНайти(ДанныеДаты,":") <> 0
			ИЛИ СтрНайти(ДанныеДаты,".") <> 0 Тогда
			ЗначениеДаты = СтрокаВДатуВремя(ДанныеДаты);
		Иначе
			// Если строка без разделителей, считаем, что это формат timestamp
			ЗначениеДаты = МестноеВремя('19700101' + Лев(ДанныеДаты,10));
		КонецЕсли;
	Исключение
	
	КонецПопытки;
	
	Возврат ЗначениеДаты
КонецФункции

// Преобразует строку формата "дд.мм.гггг чч:мм:сс" в тип Дата.
//
// Параметры:
//  ДатаСтрока - Строка - дата и время в строковом формате "дд.мм.гггг чч:мм:сс".
//
// Возвращаемое значение:
//  Дата - преобразованное значение даты и времени.
//
Функция СтрокаВДатуВремя(ДатаСтрока)
	ЗначениеДаты = Дата("00010101");
	
	// Разделяем строку по пробелам
	ЧастиСтроки = СтрРазделить(ДатаСтрока, " ");
	
	// Извлекаем дату и время
	ДатаЧасть = ЧастиСтроки[0];
	ВремяЧасть = ЧастиСтроки[1];
	
	// Разделим дату по точкам
	ЧастиДаты = СтрРазделить(ДатаЧасть, ".");
	День = Число(ЧастиДаты[0]);
	Месяц = Число(ЧастиДаты[1]);
	Год = Число(ЧастиДаты[2]);
	
	// Разделим время по двоеточиям
	ЧастиВремени = СтрРазделить(ВремяЧасть, ":");
	Час = Число(ЧастиВремени[0]);
	Минута = Число(ЧастиВремени[1]);
	Секунда = Число(ЧастиВремени[2]);
	
	// Формируем дату
	ЗначениеДаты = Дата(Год, Месяц, День, Час, Минута, Секунда);
	
	Возврат ЗначениеДаты;
КонецФункции

// Разбирает строку SubjectDn сертификата, выделяя пары ключ=значение и возвращая их в структуре.
//
// Параметры:
//  СоставнаяСтрокаДанных - Строка - значение поля subjectDn.
//
// Возвращаемое значение:
//  Структура - структура ключ - значение, извлеченная из subjectDn.
//
Функция РазобратьСвойствоSubjectDn(СоставнаяСтрокаДанных) Экспорт
	Если Не ЗначениеЗаполнено(СоставнаяСтрокаДанных) Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	ЗначенияПолей = Новый Структура;
	Попытка
		РазделительСтроки = ПолучитьРазделительСвойствоSubjectDn(СоставнаяСтрокаДанных);
		МассивПолей = СтрРазделить(СоставнаяСтрокаДанных, РазделительСтроки, Ложь); 
		Для каждого Поле Из МассивПолей Цикл
			Поз = СтрНайти(Поле, "=",,,1);
			Если Поз <> 0 Тогда
				Ключ = СокрЛП(Лев(Поле, Поз-1));
				Значение = Сред(Поле, Поз+1, СтрДлина(Поле) - (Поз));
				Если ЗначениеЗаполнено(Ключ) И ЗначениеЗаполнено(Значение) Тогда
					ЗначенияПолей.Вставить(Ключ, Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Исключение
		Возврат Новый Структура;
	КонецПопытки;
	
	Возврат ЗначенияПолей;
КонецФункции

// Определяет используемый разделитель в строке subjectDn (например, ',' или '/'),
// исходя из положения определенных полей.
//
// Параметры:
//  СтрокаДанных - Строка - значение поля subjectDn.
//
// Возвращаемое значение:
//  Строка - разделитель, используемый в поле subjectDn.
//
Функция ПолучитьРазделительСвойствоSubjectDn(СтрокаДанных)
	РазделительСтроки = ",";
	СтрокаВНижнемРегистре = НРег(СтрокаДанных);
	ОбязательноеПоле = "serialnumber";
	ПозицияРазделителя = СтрНайти(СтрокаВНижнемРегистре, ОбязательноеПоле);
	
	Если ПозицияРазделителя = 1 Тогда
		Если СтрНайти(СтрокаВНижнемРегистре, "/") > 0 Тогда
			РазделительСтроки = "/";
		ИначеЕсли СтрНайти(СтрокаВНижнемРегистре, ",") > 0 Тогда
			РазделительСтроки = ",";
		КонецЕсли;
	Иначе
		НеПустоеЗначениеРазделителя = Неопределено;
		
		Для Индекс = 1 По ПозицияРазделителя - 1 Цикл
			НеПустоеЗначениеРазделителя = Сред(СтрокаВНижнемРегистре, ПозицияРазделителя-Индекс, 1);
			Если НеПустоеЗначениеРазделителя <> " " Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(НеПустоеЗначениеРазделителя) Тогда
			РазделительСтроки = НеПустоеЗначениеРазделителя;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РазделительСтроки;
КонецФункции

// Определяет значение БИН из строки данных OU. Если строка содержит "BIN", то возвращает
// подстроку без "BIN", иначе возвращает исходное значение.
//
// Параметры:
//  ДанныеБИН - Строка - значение поля OU.
//
// Возвращаемое значение:
//  Строка - значение БИН или пустая строка, если данных нет.
//
Функция ПолучитьЗначениеБИНСертификата(ДанныеБИН)
	ЗначениеБИН = "";
	
	Если ЗначениеЗаполнено(ДанныеБИН) Тогда
		Если Найти(ВРег(ДанныеБИН), "BIN") Тогда
			ЗначениеБИН = Сред(ДанныеБИН, 4);
		Иначе
			ЗначениеБИН = ДанныеБИН;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеБИН;
КонецФункции

// Формирует текстовое описание сертификата (организация, ФИО владельца, сроки действия и т.д.).
//
// Параметры:
//  Свойства - Структура - структура со свойствами сертификата (см. ПолучитьСтруктуруСертификата()).
//
// Возвращаемое значение:
//  Строка - Текстовое описание сертификата.
//
Функция ПолучитьОписаниеСертификатаСтрокой(Знач Свойства) Экспорт
	//Наименование организации:
	//БИН организации: 
	//
	//ФИО владельца:
	//ИИН владельца:
	//Адрес владельца:
	//Email владельца:
	//
	//Издатель сертификата:
	//Начало действия сертификата:
	//Окончание действия сертификата:
	//Идентификатор открытого ключа:
	
	Описание = "";
	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Наименование организации'"), Свойства.НаименованиеОрганизации);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'БИН организации'"), Свойства.БИНОрганизации);
	
	Описание = Описание + Символы.ПС;
	
	ФИО = СокрЛП(Свойства.ИмяФамилияСубъекта + " " + Свойства.ОтчествоСубъекта);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'ФИО владельца'"), ФИО);
	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'ИИН владельца'"), Свойства.ИИНСубъекта);
	
	Адрес = Свойства.Страна + ", " + Свойства.РегионОбласть + ", " + Свойства.Город;
	Пока Лев(Адрес, 2) = ", " Цикл
		Адрес = Сред(Адрес, 3);
	КонецЦикла;
	Пока Прав(Адрес, 2) = ", " Цикл
		Адрес = Сред(Адрес, 1, СтрДлина(Адрес) - 2);
	КонецЦикла;	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Адрес владельца'"), Адрес);	
	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Email владельца'"), Свойства.EmailСубъекта);
	
	Описание = Описание + Символы.ПС;
	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Издатель сертификата'"),           Свойства.ИмяИздателя);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Начало действия сертификата'"),    Свойства.СрокГодностиОт);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Окончание действия сертификата'"), Свойства.СрокГодностиДо);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Идентификатор открытого ключа'"),  Свойства.ИдентификаторОткрытогоКлюча);
	
	Возврат СокрЛП(Описание);
КонецФункции

// Добавляет строку описания в итоговый текст описания сертификата.
// Если значение не пусто, то строка добавляется в формате "<Наименование>: <Значение>".
//
// Параметры:
//  Описание    - Строка - текущее описание, в которое добавляется строка.
//  Наименование - Строка - наименование свойства.
//  Значение    - Строка - значение свойства.
//
Процедура ДобавитьСтрокуОписания(Описание, Знач Наименование, Знач Значение) Экспорт
	
	Если НЕ ПустаяСтрока(Значение) Тогда
		Строка = СтрШаблон(НСтр("ru = '%1: %2'"),Наименование,Значение);
		Описание = Описание + Строка + Символы.ПС;
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает пустой ответ от криптопровайдера.
// Параметры:
//  СтруктураОтвета - Структура – структура ответа от криптопровайдера.
//  Криптопровайдер - Структура - данные объекта внешней компоненты криптопровайдера.
// Возвращаемое значение:
//   Структура – структура с информацией об ошибке.
//
Функция ОбработатьПустойОтвет(СтруктураОтвета, Криптопровайдер)
	Если Не ЗначениеЗаполнено(СтруктураОтвета.ОтветКриптопровайдера) Тогда
		СтруктураОтвета.ОтветКриптопровайдера = Новый Структура();
	КонецЕсли;
	СтруктураОтвета.ЭтоОшибка             = Истина; 
	
	Если ЗначениеЗаполнено(Криптопровайдер.ТекстОшибки) Тогда
		СтруктураОтвета.ТекстОшибки           = Криптопровайдер.ТекстОшибки;
	Иначе
		СтруктураОтвета.ТекстОшибки           = ЛокализоватьСтрокуОшибки("ОтветНеПолучен");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Криптопровайдер.КодОшибки) Тогда
		СтруктураОтвета.КодОшибки             = Криптопровайдер.КодОшибки;
	Иначе
		СтруктураОтвета.КодОшибки             = "204";
	КонецЕсли;
	
	Возврат СтруктураОтвета;
КонецФункции

// Обрабатывает неверную структуру от криптопровайдера.
// Параметры:
//  СтруктураОтвета - Структура – структура ответа от криптопровайдера.
//  Криптопровайдер - Структура - данные объекта внешней компоненты криптопровайдера.
// Возвращаемое значение:
//   Структура – структура с информацией об ошибке.
//
Функция ОбработатьНевернуюСтруктуруОтвета(СтруктураОтвета, Криптопровайдер)
	Если Не ЗначениеЗаполнено(СтруктураОтвета.ОтветКриптопровайдера) Тогда
		СтруктураОтвета.ОтветКриптопровайдера = Новый Структура();
	КонецЕсли;
	СтруктураОтвета.ЭтоОшибка             = Истина;
	
	Если ЗначениеЗаполнено(Криптопровайдер.ТекстОшибки) Тогда
		СтруктураОтвета.ТекстОшибки           = Криптопровайдер.ТекстОшибки;
	Иначе
		СтруктураОтвета.ТекстОшибки           = ЛокализоватьСтрокуОшибки("НевернаяСтруктураОтвета");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Криптопровайдер.КодОшибки) Тогда
		СтруктураОтвета.КодОшибки             = Криптопровайдер.КодОшибки;
	Иначе
		СтруктураОтвета.КодОшибки             = "400";
	КонецЕсли;
	
	Возврат СтруктураОтвета;
КонецФункции

// Обрабатывает ответ с кодом ошибки от криптопровайдера.
// Параметры:
//  СтруктураОтвета - Структура – структура ответа от криптопровайдера.
//  Криптопровайдер - Структура - данные объекта внешней компоненты криптопровайдера.
// Возвращаемое значение:
//   Структура – структура с информацией об ошибке.
//
Функция ОбработатьКодОшибки(СтруктураОтвета, Криптопровайдер)
	СтруктураОтвета.ЭтоОшибка   = Истина;
	СтруктураОтвета.ТекстОшибки = ОбработатьСообщениеОбОшибке(СтруктураОтвета.ОтветКриптопровайдера, Криптопровайдер);
	СтруктураОтвета.КодОшибки   = СтруктураОтвета.ОтветКриптопровайдера.Code;
	
	Возврат СтруктураОтвета;
КонецФункции

// Обрабатывает некорректный ответ от криптопровайдера.
// Параметры:
//  Криптопровайдер - Структура - данные объекта внешней компоненты криптопровайдера.
//  СтруктураОтвета - Структура – структура ответа от криптопровайдера.
// Возвращаемое значение:
//   Структура – структура с информацией об ошибке.
//
Функция ОбработатьНекорректныйОтвет(СтруктураОтвета, Криптопровайдер)
	Ошибка = ОшибкаКриптопровайдера(Криптопровайдер, "");
	СтруктураОтвета.ЭтоОшибка   = Истина;
	СтруктураОтвета.ТекстОшибки = СокрЛП(Ошибка.ОписаниеОшибки);
	СтруктураОтвета.КодОшибки   = СокрЛП(Строка(Ошибка.КодОшибки));
	
	Возврат СтруктураОтвета;
КонецФункции

// Обрабатывает исключение, возникшее при работе с криптопровайдером.
// Параметры:
//  Криптопровайдер - Внешняя компонента - объект внешней компоненты криптопровайдера.
//  ИнформацияОбОшибке - Структура – информация об исключении.
//
Процедура ОбработатьИсключениеКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке) Экспорт
	Ошибка = ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке);
	КриптографияВызовСервера.СоздатьЗаписьЖурналаРегистрации(
		НСтр("ru = 'Криптопровайдер. Ошибка выполнения'"), "Ошибка", , , Ошибка.ПодробноеПредставление);
	ВызватьИсключение НСтр("ru = 'Не удалось сформировать ЭЦП: '") + Ошибка.КраткоеПредставление;
КонецПроцедуры

// Получает параметры данных ЭЦП по умолчанию.
//
// Возвращаемое значение:
//   Структура - структура с полями:
//     * ИмяФайлаКлюча    (Строка) - имя файла ключа (по умолчанию пустая строка).
//     * ПолныйПутьКлюча  (Строка) - полный путь к файлу ключа (по умолчанию пустая строка).
//     * ПутьКлюча        (Строка) - путь к каталогу, где расположен ключ (по умолчанию пустая строка).
//     * ПарольКлюча      (Строка) - пароль для ключа (по умолчанию пустая строка).
//     * ПровайдерСсылка  (Ссылка Или Неопределено) - ссылка перечисления ТипПровайдераКриптографии (по умолчанию неопределено).
//     * ПровайдерСтрокой (Строка) - строковое представление типа провайдера (по умолчанию пустая строка).
//
Функция ПолучитьПараметрыДанныхЭЦП() Экспорт
	
	ДанныеЭЦП = Новый Структура;
	ДанныеЭЦП.Вставить("ИмяФайлаКлюча",    "");
	ДанныеЭЦП.Вставить("ПолныйПутьКлюча",  "");
	ДанныеЭЦП.Вставить("ПутьКлюча",        "");
	ДанныеЭЦП.Вставить("ПарольКлюча",      "");
	ДанныеЭЦП.Вставить("ПровайдерСсылка",  Неопределено);
	ДанныеЭЦП.Вставить("ПровайдерСтрокой", "");
	
	Возврат ДанныеЭЦП;
КонецФункции

#КонецОбласти
