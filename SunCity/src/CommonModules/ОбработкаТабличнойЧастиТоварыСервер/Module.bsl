////////////////////////////////////////////////////////////////////////////////
// ОбработкаТабличнойЧастиТоварыСервер содержит процедуры и функции 
// для работы с табличными частями товаров документов.
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// "ПриИзмененииРеквизитовВТЧКлиент" на клиенте.
// Вызов этой процедуры должен осуществляться из форм документов. При необходимости выполнения на сервере.
//
// Параметры:
//  СтруктураТЧ - ТабличнаяЧасть - табличная часть документа.
//  СтруктураДействий - Структура - Возможно передавать следующие поля:
//   "ПроверитьХарактеристикуПоВладельцу", Характеристика.
//   "ПроверитьЗаполнитьУпаковкуПоВладельцу"      , Упаковка.
//   "ЗаполнитьОбъемВесУпаковки"	        , Упаковка.
//   "ПересчитатьКоличествоЕдиниц".
//   "ПересчитатьКоличествоЕдиницПлан".
//   "ПересчитатьКоличествоЕдиницФакт". ИмяФакта
//   "ОчиститьКоличествоУчет"
//   "ЗаполнитьЦенуПродажи"              , СтруктураПараметровДействия.
//   "ЗаполнитьЦенуПоВидуЦен"            , СтруктураПараметровДействия.
//   "ПересчитатьСумму".
//   "ПересчитатьСуммуСУчетомРучнойСкидки"     , СтруктураПараметровДействия.
//   "ПересчитатьСуммуСУчетомАвтоматическойСкидки"     , СтруктураПараметровДействия.
//   "ПересчитатьЦенуЗаУпаковку".
//   "ПересчитатьСуммуНДС".
//   "ЗаполнитьСтавкуНДС".
//   "ПересчитатьКоличествоУпаковок"., Имя
//   "ПересчитатьКоличествоУпаковок"., ИмяФакта
//   "ЗаполнитьНоменклатуруПоНоменклатуреПоставщика".
//   "ПересчитатьСуммуФакт",ИмяКоличества.
//   "ЗаполнитьЦенуЗакупки"            , СтруктураПараметровДействия
//   "ЗаполнитьЦенуПрошлойЗакупки"            , СтруктураПараметровДействия
//  КэшированныеЗначения - Структура - Структура данных кэшированных значений.
// 
Процедура ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ЗначениеИзСтруктуры;
	
	СоответствиеДействий = Новый Соответствие;
	
	// Для случая когда процедура вызывается напрямую с сервера.
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС") Тогда
		ПересчитатьСуммыНДССервер(СтруктураТЧ, СтруктураДействий, КэшированныеЗначения, СоответствиеДействий);
		
	Иначе
		Если СтруктураДействий.Свойство("НеобходимоОбработатьВсюТЧ") Тогда
			Для Каждого ТекСтрока Из СтруктураТЧ.СтрокиТЧ Цикл
				НоваяСтруктураДействий = Новый Структура;
				ОбщегоНазначенияРТКлиентСервер.ДобавитьВСтруктуру(НоваяСтруктураДействий, СтруктураДействий);
				СоответствиеДействий.Вставить(ТекСтрока, НоваяСтруктураДействий);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	
	Если СтруктураТЧ.Свойство("СтрокиТЧ", ЗначениеИзСтруктуры) Тогда
		Для Каждого ТекущаяСтрока Из ЗначениеИзСтруктуры Цикл
			ТекСтруктураДействий = СоответствиеДействий[ТекущаяСтрока];
			Если ТекСтруктураДействий <> Неопределено Тогда
				ОбработатьСтрокуТЧСервер(ТекущаяСтрока, ТекСтруктураДействий, КэшированныеЗначения);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если СтруктураТЧ.Свойство("ТекущаяСтрока", ЗначениеИзСтруктуры) Тогда
		ОбработатьСтрокуТЧСервер(ЗначениеИзСтруктуры, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

// Процедура обработки строки ТЧ на сервере.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ПроверитьАссортиментСтроки(ТекущаяСтрока                                 , СтруктураДействий);
	ПроверитьЗапретРозничнойПродажи(ТекущаяСтрока                            , СтруктураДействий);
	ПроверитьСерийныеНомераПоВладельцуСервер(ТекущаяСтрока                   , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьПараметрыАлкогольнойПродукции(ТекущаяСтрока                     , СтруктураДействий, КэшированныеЗначения);
	ПроверитьНеобходимостьВводаСправкиНаАлкоголь(ТекущаяСтрока               , СтруктураДействий, КэшированныеЗначения);
	ПроверитьНезаполненностьСтрокиПоступленияТоваровЕГАИССервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОчиститьДанныеПоЗаказуСервер(ТекущаяСтрока                               , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьДанныеПоДокументуПродажиВСтрокеТЧСервер(ТекущаяСтрока           , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьТипНоменклатурыВСтрокеТЧСервер(ТекущаяСтрока                    , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСтрануПроисхожденияВСтрокеТЧСервер(ТекущаяСтрока                , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьДоговорПлатежногоАгентаВСтрокеТЧСервер(ТекущаяСтрока            , СтруктураДействий, КэшированныеЗначения);
	ПроверитьОтличныеДоговорыПлатежныхАгентов(ТекущаяСтрока                  , СтруктураДействий);
	ПроверитьФлагРезервированияВСтрокеТЧСервер(ТекущаяСтрока                 , СтруктураДействий, КэшированныеЗначения);
	ПроверитьКорректностьЗаполнитьХарактеристикиИУпаковкиСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоУпаковокВСтрокеТЧСервер(ТекущаяСтрока               , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоУпаковокФактВСтрокеТЧСервер(ТекущаяСтрока           , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоЕдиницПланВСтрокеТЧСервер(ТекущаяСтрока             , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоЕдиницФактВСтрокеТЧСервер(ТекущаяСтрока             , СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьНоменклатуруЕГАИС(ТекущаяСтрока                                 , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьАлкогольнуюПродукцию(ТекущаяСтрока                              , СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьЕдиницуИзмеренияСопоставленияВЕТИС(ТекущаяСтрока                , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьПродукциюВЕТИС(ТекущаяСтрока                                    , СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ПересчитатьКоличествоЕдиницВЕТИСВСтрокеТЧКлиент(ТекущаяСтрока            ,
		СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ПересчитатьКоличествоЕдиницПоВЕТИСВСтрокеТЧКлиент(ТекущаяСтрока          ,
		СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ПересчитатьКоличествоЕдиницВЕТИСПоЕдиницеИзмеренияКлиент(ТекущаяСтрока   ,
		СтруктураДействий, КэшированныеЗначения);
	
	ПересчитатьОчиститьКоличествоУчетВСтрокеТЧСервер(ТекущаяСтрока           , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоЕдиницВСтрокеТЧСервер(ТекущаяСтрока                 , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЗаполнитьОбъемВесПоУпаковкеВСтрокеТЧСервер(ТекущаяСтрока        , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуЗаУпаковкуВСтрокеТЧСервер(ТекущаяСтрока                   , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСкладПродажиВСтрокеТЧСервер(ТекущаяСтрока                       , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьОрганизациюПродажиВСтрокеТЧСервер(ТекущаяСтрока                 , СтруктураДействий, КэшированныеЗначения);
	ПроверитьНеобходимостьВводаАкцизнойМарки(ТекущаяСтрока                   , СтруктураДействий, КэшированныеЗначения);
	ПроверитьНеобходимостьВводаМаркируемойПродукцииГосИС(ТекущаяСтрока       , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСлужебныеРеквизиты(ТекущаяСтрока                                , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьВидНалогаПродажиВСтрокеТЧСервер(ТекущаяСтрока                   , СтруктураДействий, КэшированныеЗначения);
	ОбнулитьЦенуВСтрокеТЧСервер(ТекущаяСтрока                                , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЦенуПродажиВСтрокеТЧСервер(ТекущаяСтрока                        , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЦенуПоВидуЦенВСтрокеТЧСервер(ТекущаяСтрока                      , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЦенуЗакупкиВСтрокеТЧСервер(ТекущаяСтрока                        , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЦенуПрошлойЗакупкиВСтрокеТЧСервер(ТекущаяСтрока                 , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЦенуМРЦВСтрокеТЧСервер(ТекущаяСтрока                            , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуСУчетомАгентскогоВознаграждения(ТекущаяСтрока             , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСтавкуНДСВСтрокеТЧСервер(ТекущаяСтрока                          , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСтавкуНДСВСтрокеСкладВСтрокеТЧСервер(ТекущаяСтрока              , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСтавкуНДСВСтрокеОрганизацияВСтрокеТЧСервер(ТекущаяСтрока        , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСтавкуНДСВСтрокеСкладВШапкеТЧСервер(ТекущаяСтрока               , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуРучнойСкидкиВСтрокеТЧСервер(ТекущаяСтрока                , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьПроцентРучнойСкидкиВСтрокеТЧСервер(ТекущаяСтрока              , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуВСтрокеТЧСервер(ТекущаяСтрока                            , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуФактВСтрокеТЧСервер(ТекущаяСтрока                        , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуСкидкуПоСуммеВПродажахВСтрокеТЧСервер(ТекущаяСтрока       , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуСкидкуПоСуммеВЗакупкахВСтрокеТЧСервер(ТекущаяСтрока       , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуСУчетомАвтоматическойСкидкиВСтрокеТЧСервер(ТекущаяСтрока , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуСУчетомРучнойСкидкиВСтрокеТЧСервер(ТекущаяСтрока         , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьФлагНДСПострочноСервер(ТекущаяСтрока                            , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуНДСВСтрокеТЧСервер(ТекущаяСтрока                         , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуСНДСВСтрокеТЧСервер(ТекущаяСтрока                        , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуНДСПоСуммеСНДСВСтрокеТЧСервер(ТекущаяСтрока              , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЗаполнитьРеквизитыПоНоменклатуреВСтрокеТЧСервер(ТекущаяСтрока   , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуВозвратСУчетомОснованияВСтрокеТЧСервер(ТекущаяСтрока     , СтруктураДействий, КэшированныеЗначения);
	ПроставитьПродавцаВСтрокеТЧСервер(ТекущаяСтрока                          , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуПоСуммеСНДСВСтрокеТЧСервер(ТекущаяСтрока                 , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуПоСуммеВЗакупкахВСтрокеТЧСервер(ТекущаяСтрока             , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьПредставлениеТаблоВСтрокеТЧСервер(ТекущаяСтрока                 , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьРасхожденияВСтрокеТЧСервер(ТекущаяСтрока                      , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьКиЗВСтрокеСервер(ТекущаяСтрока                                  , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьGTINВСтроке(ТекущаяСтрока                                       , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьПризнакХарактеристикиИспользуются(ТекущаяСтрока                 , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьПризнакМаркируемаяАлкогольнаяПродукция(ТекущаяСтрока            , СтруктураДействий, КэшированныеЗначения);
	ПроверитьСерииПоВладельцу(ТекущаяСтрока                                  , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуПоСумме(ТекущаяСтрока                                     , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуПродажиВСтрокеТЧСервер(ТекущаяСтрока                     , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуЗакупкиВСтрокеТЧСервер(ТекущаяСтрока                     , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуПродажиПоСуммеПродажиВСтрокеТЧСервер(ТекущаяСтрока        , СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуЗакупкиПоСуммеЗакупкиВСтрокеТЧСервер(ТекущаяСтрока        , СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьИдентификаторНоменклатурыПоставщикаВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьКодТНВЭДПоНоменклатуреВСтрокеТЧ(ТекущаяСтрока                   , СтруктураДействий);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ПересчитатьКоличествоПоРНПТВСтрокеТЧ(ТекущаяСтрока					   , 
		СтруктураДействий, КэшированныеЗначения);
		
КонецПроцедуры

#Область ПроцедурыПересчетаИЗаполнения

// Пересчитывает количество единиц в строке табличной части.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьКоличествоЕдиницВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц") Тогда
		ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоУпаковок
		   * КоэффициентУпаковкиСервер(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

// Заполняет объем и вес упаковки.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ЗаполнитьЗаполнитьОбъемВесПоУпаковкеВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	Если СтруктураДействий.Свойство("ЗаполнитьОбъемВесУпаковки") Тогда
		ТекущаяСтрока.ОбъемУпаковки = ОбъемУпаковкиСервер(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
		ТекущаяСтрока.ВесУпаковки = ВесУпаковкиСервер(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;
КонецПроцедуры

// Пересчитывает плановое количество единиц в табличной части.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьКоличествоЕдиницПланВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницПлан") Тогда
		ТекущаяСтрока.КоличествоПлан = ТекущаяСтрока.КоличествоУпаковокПлан
		   * КоэффициентУпаковкиСервер(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

// Пересчитывает фактическое количество единиц в строке в табличной части.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьКоличествоЕдиницФактВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	ИмяФакта = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницФакт",ИмяФакта) Тогда
		ТекущаяСтрока["Количество" + ИмяФакта]  = ТекущаяСтрока["КоличествоУпаковок" + ИмяФакта]
		   * КоэффициентУпаковкиСервер(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

// Очищает учетное количество в строке в табличной части.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьОчиститьКоличествоУчетВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ОчиститьКоличествоУчет") Тогда
		
		ТекущаяСтрока.Количество 		 = 0;
		ТекущаяСтрока.КоличествоУпаковок = 0;
		
	КонецЕсли;

КонецПроцедуры

// Пересчитывает цену за упаковку в строке табличной части.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьЦенуЗаУпаковкуВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем КоличествоЕдиницДоПересчета;

	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаУпаковку", КоличествоЕдиницДоПересчета)
	   И КоличествоЕдиницДоПересчета <> 0 И НЕ КоличествоЕдиницДоПересчета = Неопределено Тогда
		ТекущаяСтрока.Цена = ТекущаяСтрока.Цена
		   / КоличествоЕдиницДоПересчета
		   * ТекущаяСтрока.Количество;
	КонецЕсли;

КонецПроцедуры

// Заполняет цену продажи в строке табличной части.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ЗаполнитьЦенуПродажиВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажи", СтруктураПараметровДействия) Тогда
		
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		Если СтруктураПараметровДействия.Дата = НачалоДня(ТекущаяДатаСеанса) Тогда
			СтруктураПараметровДействия.Дата = ТекущаяДатаСеанса;
		КонецЕсли;
		
		Цена = ЗапасыСервер.ЦенаПродажи(
			СтруктураПараметровДействия.ОбъектЦенообразования,
			СтруктураПараметровДействия.Дата, 
			ТекущаяСтрока.Номенклатура, 
			ТекущаяСтрока.Характеристика, ТекущаяСтрока.Упаковка,
			СтруктураПараметровДействия.ПриводитьКМинимальнойЦене);
			
		Если Цена > 0 Тогда
			ТекущаяСтрока.Цена = Цена;
		Иначе
			ОбнулятьЦену = Истина;
			Если СтруктураПараметровДействия.Свойство("ОбнулятьЦену") Тогда
				ОбнулятьЦену = СтруктураПараметровДействия.ОбнулятьЦену;
			КонецЕсли;
			Если ОбнулятьЦену Тогда
				ТекущаяСтрока.Цена = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Заполняет цену МРЦ в строке табличной части.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ЗаполнитьЦенуМРЦВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуМРЦ", СтруктураПараметровДействия) Тогда
		
		Если ТекущаяСтрока.Свойство("ВидПродукцииИС") И ТекущаяСтрока.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Табак Тогда
			// Заполним МРЦ по данным штрихкода.
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.МРЦ) И ШтрихкодированиеИСРТ.ЭтоМарка(ТекущаяСтрока.Штрихкод) Тогда
				ДанныеТабачнойПродукции = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкода(ТекущаяСтрока.Штрихкод);
				СоставКодаМаркировки = ДанныеТабачнойПродукции.СоставКодаМаркировки;
				Если СоставКодаМаркировки.Свойство("МРЦ") И ЗначениеЗаполнено(СоставКодаМаркировки.МРЦ) Тогда
					ТекущаяСтрока.МРЦ = СоставКодаМаркировки.МРЦ;
				КонецЕсли;
			КонецЕсли;
			
			// Проверим цену.
			Если ЗначениеЗаполнено(ТекущаяСтрока.МРЦ) Тогда
				Если ТекущаяСтрока.Цена < ТекущаяСтрока.МРЦ * 0.75 ИЛИ ТекущаяСтрока.Цена > ТекущаяСтрока.МРЦ Тогда
					ТекущаяСтрока.Цена = ТекущаяСтрока.МРЦ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет цену по виду цен в строке табличной части.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ЗаполнитьЦенуПоВидуЦенВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПоВидуЦен", СтруктураПараметровДействия) Тогда
		
		Цена = ЗапасыСервер.ЦенаПоВидуЦен(
			СтруктураПараметровДействия.ВидЦены, 
			СтруктураПараметровДействия.Дата, 
			ТекущаяСтрока.Номенклатура, 
			ТекущаяСтрока.Характеристика, 
			ТекущаяСтрока.Упаковка);
			
		Если Цена > 0 Тогда
			ТекущаяСтрока.Цена = Цена;	
		КонецЕсли;	
		
	КонецЕсли;

КонецПроцедуры

// Заполнить цену закупки в строке табличной части.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ЗаполнитьЦенуЗакупкиВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ЗаполнитьЦенуЗакупки", СтруктураПараметровДействия) Тогда
				
		Цена = ЗапасыСервер.ЦенаПоследнейЗакупки(
			СтруктураПараметровДействия.Дата,
			СтруктураПараметровДействия.Магазин,
			СтруктураПараметровДействия.Контрагент, 
			СтруктураПараметровДействия.Ссылка, 
			ТекущаяСтрока.Номенклатура, 
			ТекущаяСтрока.Характеристика, 
			ТекущаяСтрока.Упаковка);
			
		Если Цена > 0 Тогда
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ЦенаЗакупки") Тогда
				ТекущаяСтрока.ЦенаЗакупки = Цена;
			Иначе
				ТекущаяСтрока.Цена = Цена;
			КонецЕсли; 
		КонецЕсли;	
			
	КонецЕсли;

КонецПроцедуры

// Заполнить цену прошлой закупкив строке табличной части.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ЗаполнитьЦенуПрошлойЗакупкиВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПрошлойЗакупки", СтруктураПараметровДействия) Тогда
				
		Цена = ЗапасыСервер.ЦенаПоследнейЗакупки(
			СтруктураПараметровДействия.Дата,
			Справочники.Магазины.ПустаяСсылка(),
			Справочники.Контрагенты.ПустаяСсылка(), 
			СтруктураПараметровДействия.Ссылка, 
			ТекущаяСтрока.Номенклатура, 
			ТекущаяСтрока.Характеристика, 
			ТекущаяСтрока.Упаковка);
					
		ТекущаяСтрока.ЦенаПрошлойЗакупки = Цена;
					
	КонецЕсли;

КонецПроцедуры

// Заполнить ставку НДС в строке табличной части.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ЗаполнитьСтавкуНДСВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем ПараметрыНалогообложения;

	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС", ПараметрыНалогообложения) Тогда	
		
		НалогообложениеНДС = ПараметрыНалогообложения.УчитыватьНДС;
		Если НалогообложениеНДС = Истина Тогда
			СтавкаНДСВНоменклатуре = Справочники.Номенклатура.ПолучитьРеквизитыНоменклатуры(ТекущаяСтрока.Номенклатура).СтавкаНДС;
			СтавкаНДС = УчетНДС.СкорректироватьСтавкуНДС(СтавкаНДСВНоменклатуре, ПараметрыНалогообложения.Дата);
		ИначеЕсли НалогообложениеНДС = Ложь Тогда
			СтавкаНДС = Справочники.СтавкиНДС.ПолучитьСтавкуНДСБезНДС();
		Иначе
			СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
		КонецЕсли;

		ТекущаяСтрока.СтавкаНДС = СтавкаНДС;

	КонецЕсли;	
	
КонецПроцедуры

// Заполняет ставку НДС склада в строке.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ЗаполнитьСтавкуНДСВСтрокеСкладВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровДействия) Тогда
		ЗаполнитьСтавкуНДСВСтрокеПоПараметрам(ТекущаяСтрока, СтруктураПараметровДействия, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

// Заполнить ставку НДС склада в шапке документа.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ЗаполнитьСтавкуНДСВСтрокеСкладВШапкеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДССкладВШапке", СтруктураПараметровДействия) Тогда
		ЗаполнитьСтавкуНДСВСтрокеПоПараметрам(ТекущаяСтрока, СтруктураПараметровДействия, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

// Заполнить ставкуНДС организации в строке табличной части.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ЗаполнитьСтавкуНДСВСтрокеОрганизацияВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСОрганизацияВСтроке", СтруктураПараметровДействия) Тогда
		ЗаполнитьСтавкуНДСВСтрокеПоПараметрам(ТекущаяСтрока, СтруктураПараметровДействия, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает сумму в строке табличной части.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьСуммуВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ПересчитатьСумму") Тогда
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок;
	КонецЕсли;

КонецПроцедуры

// Обнуляет цену в строке табличной части.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ОбнулитьЦенуВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	ИмяРеквизитаЦены = "";
	Если СтруктураДействий.Свойство("ОбнулитьЦену", ИмяРеквизитаЦены) Тогда
		Если Не ЗначениеЗаполнено(ИмяРеквизитаЦены) Тогда
			ИмяРеквизитаЦены = "Цена"
		КонецЕсли;
		ТекущаяСтрока[ИмяРеквизитаЦены] = 0;
	КонецЕсли;

КонецПроцедуры

// Пересчитывает фактическую сумму в строке.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьСуммуФактВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	ИмяКоличества = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуФакт",ИмяКоличества) Тогда
		Если Не ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "КоличествоУпаковокФакт";
		КонецЕсли;
		ТекущаяСтрока.СуммаФакт = ТекущаяСтрока.Цена * ТекущаяСтрока[ИмяКоличества];
	КонецЕсли;

КонецПроцедуры

// Пересчитывает процент ручной скидки в строке.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьПроцентРучнойСкидкиВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьПроцентРучнойСкидки", СтруктураПараметровДействия) Тогда
		
		Если ТекущаяСтрока.КоличествоУпаковок * ТекущаяСтрока.Цена <> 0 Тогда
			ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100*ТекущаяСтрока.СуммаРучнойСкидки / (ТекущаяСтрока.КоличествоУпаковок *ТекущаяСтрока.Цена), 2);
		Иначе
			ТекущаяСтрока.ПроцентРучнойСкидки = 0;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Пересчитывает сумму ручной скидки в строке.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьСуммуРучнойСкидкиВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуРучнойСкидки", СтруктураПараметровДействия) Тогда
		
		ТекущаяСтрока.СуммаРучнойСкидки = Окр(ТекущаяСтрока.КоличествоУпаковок *ТекущаяСтрока.Цена * ТекущаяСтрока.ПроцентРучнойСкидки / 100, 2);
		
	КонецЕсли;

КонецПроцедуры

// Пересчитывает цену и скидку по сумме в продажах.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьЦенуСкидкуПоСуммеВПродажахВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПараметровДействия) Тогда
		
		ИспользоватьРучныеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьРучныеСкидки") Тогда
				ИспользоватьРучныеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ИспользоватьАвтоматическиеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьАвтоматическиеСкидки") Тогда
				ИспользоватьАвтоматическиеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВПродажах = Неопределено Тогда
			КэшированныеЗначения.ИспользоватьРучныеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
		КонецЕсли;
		
		Если ИспользоватьАвтоматическиеСкидки И КэшированныеЗначения.ИспользоватьАвтоматическиеСкидкиВПродажах = Неопределено Тогда
			КэшированныеЗначения.ИспользоватьАвтоматическиеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
		КонецЕсли;
		
		// Если используются ручные скидки - перерасчитаем процент и сумму ручной скидки, иначе перерасчитываем цену.
		Если ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВПродажах Тогда
				
				Если ТекущаяСтрока.КоличествоУпаковок = 0 Тогда
					Сумма = ТекущаяСтрока.Цена;
				Иначе
					Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок;
				КонецЕсли;
				
				Если Сумма = 0 Или ТекущаяСтрока.Сумма = 0 Тогда
					
					ТекущаяСтрока.Цена                = ТекущаяСтрока.Сумма;
					ТекущаяСтрока.СуммаРучнойСкидки   = 0;
					ТекущаяСтрока.ПроцентРучнойСкидки = 0;
					
				Иначе
					
					ТекущаяСтрока.СуммаРучнойСкидки   = Сумма - ТекущаяСтрока.Сумма;
					ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100*ТекущаяСтрока.СуммаРучнойСкидки / Сумма, 2);
					
				КонецЕсли;
			
		Иначе
			
			Если ТекущаяСтрока.КоличествоУпаковок = 0 Тогда
				ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма;
			Иначе
				ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.КоличествоУпаковок, 2);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИспользоватьАвтоматическиеСкидки Тогда
			Если КэшированныеЗначения.ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
				ТекущаяСтрока.СуммаАвтоматическойСкидки   = 0;
				ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает цену и скикду по сумме в закупках.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьЦенуСкидкуПоСуммеВЗакупкахВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВЗакупках", СтруктураПараметровДействия) Тогда
		
		// Если используются ручные скидки - перерасчитаем процент и сумму ручной скидки, иначе перерасчитываем цену.
		ИспользоватьРучныеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьРучныеСкидки") Тогда
				ИспользоватьРучныеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВЗакупках = Неопределено Тогда
			
			КэшированныеЗначения.ИспользоватьРучныеСкидкиВЗакупках = Ложь;
			
		КонецЕсли;
		
		// Если используются ручные скидки - перерасчитаем процент и сумму ручной скидки, иначе перерасчитываем цену.
		Если ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВЗакупках Тогда
			
				Если ТекущаяСтрока.КоличествоУпаковок = 0 Тогда
					Сумма = ТекущаяСтрока.Цена;
				Иначе
					Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок;
				КонецЕсли;
				
				Если Сумма = 0 Или ТекущаяСтрока.Сумма = 0 Тогда
					
					ТекущаяСтрока.Цена                = ТекущаяСтрока.Сумма;
					ТекущаяСтрока.СуммаРучнойСкидки   = 0;
					ТекущаяСтрока.ПроцентРучнойСкидки = 0;
					
				Иначе
					
					ТекущаяСтрока.СуммаРучнойСкидки   = Сумма - ТекущаяСтрока.Сумма;
					ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100*ТекущаяСтрока.СуммаРучнойСкидки / Сумма, 2);
					
				КонецЕсли;
			
		Иначе
			
			Если ТекущаяСтрока.КоличествоУпаковок = 0 Тогда
				ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма;
			Иначе
				ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.КоличествоУпаковок, 2);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает цену по сумме в закупках.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьЦенуПоСуммеВЗакупкахВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуПоСуммеВЗакупках", СтруктураПараметровДействия) Тогда
		
		Если ТекущаяСтрока.КоличествоУпаковок = 0 Тогда
			ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма;
		Иначе
			ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.КоличествоУпаковок, 2);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает цену по фактической сумме.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьЦенуПоСуммеФактВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуПоСуммеФакт", СтруктураПараметровДействия) Тогда
						
		Если ТекущаяСтрока.КоличествоУпаковокФакт = 0 Тогда
			
			ТекущаяСтрока.Цена = ТекущаяСтрока.СуммаФакт;
			
		Иначе
			
			ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.СуммаФакт / ТекущаяСтрока.КоличествоУпаковокФакт, 2);
			
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает сумму с учетом ручной скидки в строке.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьСуммуСУчетомРучнойСкидкиВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомРучнойСкидки", СтруктураПараметровДействия) Тогда
		
		Очищать = Неопределено;
		ПересчитыватьСуммуСкидки = Неопределено;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			
			СтруктураПараметровДействия.Свойство("Очищать", Очищать);
			СтруктураПараметровДействия.Свойство("ПересчитыватьСуммуСкидки", ПересчитыватьСуммуСкидки);
			
			Если Очищать = Истина Тогда
				
				ТекущаяСтрока.СуммаРучнойСкидки   = 0;
				ТекущаяСтрока.ПроцентРучнойСкидки = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ПересчитыватьСуммуСкидки = Ложь Тогда


			ТекущаяСтрока.СуммаРучнойСкидки = Окр(ТекущаяСтрока.КоличествоУпаковок *ТекущаяСтрока.Цена * ТекущаяСтрока.ПроцентРучнойСкидки / 100, 2);
		КонецЕсли;
		
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаРучнойСкидки;
		
	КонецЕсли;

КонецПроцедуры

// Пересчитывает сумму с учетом автоматической скидки в строке.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьСуммуСУчетомАвтоматическойСкидкиВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомАвтоматическойСкидки", СтруктураПараметровДействия) Тогда
		
		Очищать = Неопределено;
		ПересчитыватьСуммуСкидки = Неопределено;
		Если СтруктураПараметровДействия <> Неопределено Тогда

			
			СтруктураПараметровДействия.Свойство("Очищать", Очищать);
			СтруктураПараметровДействия.Свойство("ПересчитыватьСуммуСкидки", ПересчитыватьСуммуСкидки);
			
			Если Очищать = Истина Тогда
				
				ТекущаяСтрока.СуммаАвтоматическойСкидки = 0;
				ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПересчитыватьСуммуСкидки <> Ложь Тогда
			ТекущаяСтрока.СуммаАвтоматическойСкидки = Окр(ТекущаяСтрока.КоличествоУпаковок *ТекущаяСтрока.Цена * ТекущаяСтрока.ПроцентАвтоматическойСкидки / 100, 2);
		КонецЕсли;
		
		Скидка = ТекущаяСтрока.СуммаАвтоматическойСкидки;
		
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма - Скидка;
		
	КонецЕсли;

КонецПроцедуры

// Пересчитывает сумму НДС в строке.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьСуммуНДСВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС", СтруктураПараметровДействия) Тогда
		
		Если КэшированныеЗначения.Свойство("ПроцентыСтавокНДС") Тогда
			ТекПроцентНДС = КэшированныеЗначения.ПроцентыСтавокНДС[ТекущаяСтрока.СтавкаНДС];
		Иначе
			КэшированныеЗначения.Вставить("ПроцентыСтавокНДС", Новый Соответствие);
			ТекПроцентНДС = Неопределено;
		КонецЕсли;
		
		Если ТекПроцентНДС = Неопределено Тогда
			
			ТекПроцентНДС = ОбработкаТабличнойЧастиТоварыСерверПовтИсп.СтавкаНДСЧислом(ТекущаяСтрока.СтавкаНДС);
			КэшированныеЗначения.ПроцентыСтавокНДС.Вставить(ТекущаяСтрока.СтавкаНДС, ТекПроцентНДС);
			
		КонецЕсли;
		
		НДСПострочно = ОбработкаТабличнойЧастиТоварыКлиентСервер.НДСПострочно(ТекущаяСтрока);
		
		Если НДСПострочно Тогда
			ТекущаяСтрока.СуммаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаНДСПострочно(ТекущаяСтрока.Сумма,
																	ТекущаяСтрока.Количество,
																	ТекПроцентНДС,
																	СтруктураПараметровДействия.ЦенаВключаетНДС);
		Иначе
			ТекущаяСтрока.СуммаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаНДС(ТекущаяСтрока.Сумма,
															ТекПроцентНДС,
															СтруктураПараметровДействия.ЦенаВключаетНДС);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Пересчитывает сумму НДС по сумме с НДС в строке.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьСуммуНДСПоСуммеСНДСВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДСПоСуммеСНДС", СтруктураПараметровДействия) Тогда
		
		Если КэшированныеЗначения.Свойство("ПроцентыСтавокНДС") Тогда
			ТекПроцентНДС = КэшированныеЗначения.ПроцентыСтавокНДС[ТекущаяСтрока.СтавкаНДС];
		Иначе
			КэшированныеЗначения.Вставить("ПроцентыСтавокНДС", Новый Соответствие);
			ТекПроцентНДС = Неопределено;
		КонецЕсли;
		
		Если ТекПроцентНДС = Неопределено Тогда
			
			ТекПроцентНДС = ОбработкаТабличнойЧастиТоварыСерверПовтИсп.СтавкаНДСЧислом(ТекущаяСтрока.СтавкаНДС);
			КэшированныеЗначения.ПроцентыСтавокНДС.Вставить(ТекущаяСтрока.СтавкаНДС, ТекПроцентНДС);
			
		КонецЕсли;
		
		ИмяРеквизитаСумма = "СуммаВсего";
		Если СтруктураПараметровДействия.Свойство("ИмяРеквизитаСуммаВсего") Тогда
			ИмяРеквизитаСумма = СтруктураПараметровДействия.ИмяРеквизитаСуммаВсего;
		КонецЕсли;
		
		ТекущаяСтрока.СуммаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаНДС(ТекущаяСтрока[ИмяРеквизитаСумма], ТекПроцентНДС, Истина);
	
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает сумму по сумме с НДС в строке.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьСуммуПоСуммеСНДСВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПоСуммеСНДС", СтруктураПараметровДействия) Тогда
		
		ИмяРеквизитаСумма = "СуммаВсего";
		Если СтруктураПараметровДействия.Свойство("ИмяРеквизитаСуммаВсего") Тогда
			ИмяРеквизитаСумма = СтруктураПараметровДействия.ИмяРеквизитаСуммаВсего;
		КонецЕсли;
		
		Если СтруктураПараметровДействия.ЦенаВключаетНДС Тогда
			ТекущаяСтрока.Сумма = ТекущаяСтрока[ИмяРеквизитаСумма];
		Иначе
			ТекущаяСтрока.Сумма = ТекущаяСтрока[ИмяРеквизитаСумма] - ТекущаяСтрока.СуммаНДС;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает сумму с НДС в строке.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьСуммуСНДСВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСНДС", СтруктураПараметровДействия) Тогда
		
		ТекущаяСтрока.СуммаСНДС = ТекущаяСтрока.Сумма + ?(СтруктураПараметровДействия.ЦенаВключаетНДС, 0, ТекущаяСтрока.СуммаНДС);
	
	КонецЕсли;

КонецПроцедуры

// Пересчитывает сумму продажи в строке.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьСуммуПродажиВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажи") Тогда
		ТекущаяСтрока.СуммаПродажи = ТекущаяСтрока.ЦенаПродажи * ТекущаяСтрока.КоличествоУпаковок;
	КонецЕсли;

КонецПроцедуры

// Пересчитывает сумму продажи в строке.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьСуммуЗакупкиВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ПересчитатьСуммуЗакупки") Тогда
		ТекущаяСтрока.СуммаЗакупки = ТекущаяСтрока.ЦенаЗакупки * ТекущаяСтрока.КоличествоУпаковок;
	КонецЕсли;

КонецПроцедуры

// Пересчитывает цену от стоимости товара в текущей строке табличной части документа.
//
// Параметры:
//  ТекущаяСтрока - Структура - структура со свойствами строки документа.
//  СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//  КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьЦенуПоСумме(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ИмяКоличества = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуПоСумме",ИмяКоличества) Тогда
		Если Не ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "КоличествоУпаковок";
		КонецЕсли;
		Если ТекущаяСтрока[ИмяКоличества] = 0 Тогда
			ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма;
		Иначе
			ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока[ИмяКоличества], 2);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает цену по сумме в закупках.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьЦенуПродажиПоСуммеПродажиВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуПродажиПоСуммеПродажи") Тогда
		
		Если ТекущаяСтрока.КоличествоУпаковок = 0 Тогда
			ТекущаяСтрока.ЦенаПродажи = ТекущаяСтрока.СуммаПродажи;
		Иначе
			ТекущаяСтрока.ЦенаПродажи = Окр(ТекущаяСтрока.СуммаПродажи / ТекущаяСтрока.КоличествоУпаковок, 2);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает цену по сумме в закупках.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьЦенуЗакупкиПоСуммеЗакупкиВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗакупкиПоСуммеЗакупки") Тогда
		
		Если ТекущаяСтрока.КоличествоУпаковок = 0 Тогда
			ТекущаяСтрока.ЦенаПродажи = ТекущаяСтрока.СуммаПродажи;
		Иначе
			ТекущаяСтрока.ЦенаПродажи = Окр(ТекущаяСтрока.СуммаПродажи / ТекущаяСтрока.КоличествоУпаковок, 2);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает количество упаковок в строке табличной части.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьКоличествоУпаковокВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Имя = "";
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок",Имя) Тогда
		ТекущаяСтрока["КоличествоУпаковок" + Имя] = ТекущаяСтрока["Количество" + Имя]
		   / КоэффициентУпаковкиСервер(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

// Пересчитывает фактическое количество упаковок.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьКоличествоУпаковокФактВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	ИмяФакта = "";
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокФакт",ИмяФакта) Тогда
		ТекущаяСтрока["КоличествоУпаковок" + ИмяФакта] = ТекущаяСтрока["Количество" + ИмяФакта]
		   / КоэффициентУпаковкиСервер(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

// Заполняет тип номенклатуры в строке.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ЗаполнитьТипНоменклатурыВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ЗаполнитьТипНоменклатуры") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	Номенклатура.ПроизвольныйНоминал КАК ПроизвольныйНоминал,
		|	Номенклатура.КодТРУ КАК КодТРУ,
		|	ВЫБОР
		|		КОГДА Номенклатура.КодТРУ = """"
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВозможнаОплатаЭС
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &Номенклатура");

		Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);

		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ТекущаяСтрока.ТипНоменклатуры = Выборка.ТипНоменклатуры;
			Если ТекущаяСтрока.Свойство("ПроизвольныйНоминал") Тогда
				ТекущаяСтрока.ПроизвольныйНоминал = Выборка.ПроизвольныйНоминал;
			КонецЕсли;
			Если ТекущаяСтрока.Свойство("КодТРУ") Тогда
				ТекущаяСтрока.КодТРУ = Выборка.КодТРУ;
			КонецЕсли;
			Если ТекущаяСтрока.Свойство("ВозможнаОплатаЭС") Тогда
				ТекущаяСтрока.ВозможнаОплатаЭС = Выборка.ВозможнаОплатаЭС;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТипНоменклатурыВСтрокеТЧСервер()

// Заполняет тип номенклатуры в табличной части.
//
// Параметры:
//  ТаблицаФормы - ДанныеФормыКоллекция - таблицы формы.
//
Процедура ЗаполнитьТипНоменклатурыВТЧСервер(ТаблицаФормы) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Номенклатура
	|ПОМЕСТИТЬ ТаблицаЗапроса
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапроса.НомерСтроки,
	|	ТаблицаЗапроса.Номенклатура,
	|	ТаблицаЗапроса.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаЗапроса.Номенклатура.ПроизвольныйНоминал КАК ПроизвольныйНоминал,
	|	ТаблицаЗапроса.Номенклатура.КодТРУ КАК КодТРУ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапроса.Номенклатура.КодТРУ = """"
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВозможнаОплатаЭС
	|ИЗ
	|	ТаблицаЗапроса КАК ТаблицаЗапроса
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаЗапроса.НомерСтроки";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",  ТаблицаФормы.Выгрузить(,"НомерСтроки,Номенклатура"));
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из ТаблицаФормы Цикл
		
		СтрокаРезультата = ТаблицаРезультата[Строка.НомерСтроки-1];
		
		Строка.ТипНоменклатуры = СтрокаРезультата.ТипНоменклатуры;
		Если Строка.Свойство("ПроизвольныйНоминал") Тогда
			Строка.ПроизвольныйНоминал = СтрокаРезультата.ПроизвольныйНоминал;
		КонецЕсли;
		Если Строка.Свойство("КодТРУ") Тогда
			Строка.КодТРУ = СтрокаРезультата.КодТРУ;
		КонецЕсли;
		Если Строка.Свойство("ВозможнаОплатаЭС") Тогда
			Строка.ВозможнаОплатаЭС = СтрокаРезультата.ВозможнаОплатаЭС;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет цену МРЦ в табличной части при необходимости.
//
// Параметры:
//  ТаблицаФормы - ДанныеФормыКоллекция - таблицы формы.
//
Процедура ЗаполнитьЦенуМРЦВТЧ(ТаблицаФормы) Экспорт

	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура
	|ПОМЕСТИТЬ ТаблицаЗапроса
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапроса.Номенклатура,
	|	&ОпределениеВидаПродукции КАК ВидПродукцииИС
	|ИЗ
	|	ТаблицаЗапроса КАК ТаблицаЗапроса";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаФормы.Выгрузить(,"Номенклатура, МРЦ, Штрихкод"));
	ИнтеграцияИСРТ.ОпределитьВидПродукцииТекстаЗапроса(ТекстЗапроса, "ТаблицаЗапроса.Номенклатура");
	Запрос.Текст = ТекстЗапроса;
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрТабл Из ТаблицаФормы Цикл
		Если Не ЗначениеЗаполнено(СтрТабл.МРЦ) ИЛИ СтрТабл.МРЦ = 0 Тогда
			СтрокаРезультата = ТаблицаРезультата[СтрТабл.НомерСтроки-1];
			
			Если СтрокаРезультата.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Табак Тогда
				
				Если ШтрихкодированиеИСРТ.ЭтоМарка(СтрТабл.Штрихкод) Тогда
					ДанныеТабачнойПродукции = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкода(СтрТабл.Штрихкод);
					СоставКодаМаркировки = ДанныеТабачнойПродукции.СоставКодаМаркировки;
					Если СоставКодаМаркировки.Свойство("МРЦСтрокой") Тогда
						СтрТабл.МРЦ = СоставКодаМаркировки.МРЦ;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет типы оплат в ТЧ.
//
// Параметры:
//  Объект - ДокументОбъект - документ в котором необходимо заполнить типы оплат.
//
Процедура ЗаполнитьТипыОплатВТЧСервер(Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Оплата.ВидОплаты
	|ПОМЕСТИТЬ ТаблицаВидов
	|ИЗ
	|	&Оплата КАК Оплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидов.ВидОплаты.ТипОплаты КАК ТипОплаты
	|ИЗ
	|	ТаблицаВидов КАК ТаблицаВидов";
	
	Запрос.УстановитьПараметр("Оплата", Объект.Оплата.Выгрузить());
	
	Результат = Запрос.Выполнить();
	ТаблицаТиповОплат = Результат.Выгрузить();
	МассивТиповОплат = ТаблицаТиповОплат.ВыгрузитьКолонку("ТипОплаты");
	
	ТаблицаОплата = Объект.Оплата.Выгрузить();
	ТаблицаОплата.ЗагрузитьКолонку(МассивТиповОплат, "ТипОплаты");
	
	Объект.Оплата.Загрузить(ТаблицаОплата);
	
КонецПроцедуры

// Заполняет использование серийных номеров в ТЧ.
//
// Параметры:
//  ТаблицаФормы - ДанныеФормыКоллекция - таблицы формы.
//
Процедура ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(ТаблицаФормы) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Номенклатура
	|ПОМЕСТИТЬ ТаблицаЗапроса
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапроса.НомерСтроки,
	|	ТаблицаЗапроса.Номенклатура,
	|	ТаблицаЗапроса.Номенклатура.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера
	|ИЗ
	|	ТаблицаЗапроса КАК ТаблицаЗапроса
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаЗапроса.НомерСтроки";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",  ТаблицаФормы.Выгрузить(,"НомерСтроки,Номенклатура"));
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрТабл Из ТаблицаФормы Цикл
		
		СтрокаРезультата = ТаблицаРезультата[СтрТабл.НомерСтроки-1];
		
		СтрТабл.ИспользоватьСерийныеНомера = СтрокаРезультата.ИспользоватьСерийныеНомера;
		
	КонецЦикла;
	

КонецПроцедуры

// Заполняет реквизиты по номенклатуре в строке табличной части.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ЗаполнитьЗаполнитьРеквизитыПоНоменклатуреВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ЗаполнитьРеквизитыПоНоменклатуре", СтруктураПараметровДействия) Тогда
		Реквизиты = Справочники.Номенклатура.ПолучитьРеквизитыНоменклатуры(ТекущаяСтрока.Номенклатура);
		ТекущаяСтрока.ЭтоУслуга               = Реквизиты.ЭтоУслуга;
		ТекущаяСтрока.ЭтоПодарочныйСертификат = Реквизиты.ЭтоПодарочныйСертификат;
	КонецЕсли;

КонецПроцедуры

// Заполняет договор платежного агента в табличной части.
//
// Параметры:
//  ТаблицаФормы - ДанныеФормыКоллекция - таблицы формы.
//
Процедура ЗаполнитьДоговорПлатежногоАгентаВТЧСервер(ТаблицаФормы) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Номенклатура
	|ПОМЕСТИТЬ ТаблицаЗапроса
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапроса.НомерСтроки,
	|	ТаблицаЗапроса.Номенклатура,
	|	ТаблицаЗапроса.Номенклатура.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ИЗ
	|	ТаблицаЗапроса КАК ТаблицаЗапроса
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаЗапроса.НомерСтроки";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",  ТаблицаФормы.Выгрузить(,"НомерСтроки,Номенклатура"));
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрТабл Из ТаблицаФормы Цикл
		
		СтрокаРезультата = ТаблицаРезультата[СтрТабл.НомерСтроки-1];
		
		СтрТабл.ДоговорКонтрагента = СтрокаРезультата.ДоговорКонтрагента;
		
	КонецЦикла;
	

КонецПроцедуры

// Заполняет договор платежного агента в строке табличной части.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ЗаполнитьДоговорПлатежногоАгентаВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт

	ПараметрыЗаполнения = Неопределено;
	Если СтруктураДействий.Свойство("ЗаполнитьДоговорПлатежногоАгента", ПараметрыЗаполнения) Тогда
		
		ТекстЗапросаИсточник = 
			"ВЫБРАТЬ
			|	НоменклатураДокумента.Ссылка КАК Номенклатура,
			|	НоменклатураДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента
			|ПОМЕСТИТЬ ТаблицаИсточник
			|ИЗ
			|	Справочник.Номенклатура КАК НоменклатураДокумента
			|ГДЕ
			|	НоменклатураДокумента.Ссылка = &Номенклатура";
		
		ТекстыЗапроса = Новый Массив;
		ТекстыЗапроса.Добавить(ТекстЗапросаИсточник);
		ТекстыЗапроса.Добавить(ТекстЗапросДанныеАгентскогоДоговора());
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());

		Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
		Если ТипЗнч(ПараметрыЗаполнения) = Тип("Структура") И ПараметрыЗаполнения.Свойство("Дата") Тогда
			Запрос.УстановитьПараметр("Период", ПараметрыЗаполнения.Дата);
		Иначе
			Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ТекущаяСтрока.ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
			
			Если Выборка.ДоговорПлатежногоАгента И Выборка.АвтоматическиВыделятьВознаграждениеВЧеке Тогда
				ДанныеАгентскогоДоговора = ДанныеАгентскогоДоговораШаблон();
				ЗаполнитьЗначенияСвойств(ДанныеАгентскогоДоговора, Выборка);
			Иначе
				ДанныеАгентскогоДоговора = Неопределено;
			КонецЕсли;
			
			ТекущаяСтрока.ДанныеАгентскогоДоговора = ДанныеАгентскогоДоговора;
		КонецЕсли;
		
	КонецЕсли;
	

КонецПроцедуры

// Заполняет представление договора платежного агента в строке табличной части.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ЗаполнитьПредставлениеТаблоВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем ТекстЗапроса;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПредставлениеТабло", ТекстЗапроса) Тогда
		Если ЗначениеЗаполнено(ТекстЗапроса) 
			И ЗначениеЗаполнено( ТекущаяСтрока.Номенклатура) Тогда
			
			ПостроительЗапроса = Новый ПостроительЗапроса;
			ПостроительЗапроса.Текст = ТекстЗапроса;
			ПостроительЗапроса.ЗаполнитьНастройки();
			
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("Ссылка", ТекущаяСтрока.Номенклатура);
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			ТекстНадписи = "";
			Если Выборка.Следующий() Тогда
				Разделитель = "";
				Для каждого ДоступноеПоле Из ПостроительЗапроса.ДоступныеПоля Цикл
					Значение = Выборка[ДоступноеПоле.Имя];
					ТекстНадписи = ТекстНадписи + Разделитель + Строка(Значение);
					Разделитель = " ";
				КонецЦикла;
				ТекущаяСтрока.ПредставлениеТабло = ТекстНадписи;
			КонецЕсли;
		Иначе
			ТекущаяСтрока.ПредставлениеТабло = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Заполняет страну происхождения в строке.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ЗаполнитьСтрануПроисхожденияВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ЗаполнитьСтрануПроисхождения") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
				|	Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения
				|ИЗ
				|	Справочник.Номенклатура КАК Номенклатура
				|ГДЕ
				|	Номенклатура.Ссылка = &Номенклатура");
		
		Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ТекущаяСтрока.СтранаПроисхождения = Выборка.СтранаПроисхождения;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет колонки "ХарактеристикиИспользуются" в формах.
//
// Параметры:
//  ТаблицаФормы - ДанныеФормыКоллекция
//  ПараметрыЗаполнения - структура возможное поле (необязательное):
//  	*СуффиксДопРеквизита - суффикс реквизитов "Номенклатура" и "Характеристика", если в ТЧ есть такие реквизиты.
//  НомерСтроки - Число - номер строки для заполнения.
//
Процедура ЗаполнитьПризнакИспользованияХарактеристик(ТаблицаФормы, ПараметрыЗаполнения = Неопределено, НомерСтроки = Неопределено) Экспорт
	
	Перем СуффиксДопРеквизита;
	
	Если ТаблицаФормы.Количество() = 0
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаполнения <> Неопределено Тогда
		
		ПараметрыЗаполнения.Свойство("СуффиксДопРеквизита",СуффиксДопРеквизита);	
		
	КонецЕсли;
	
	Если НомерСтроки = Неопределено Тогда
		Запрос = Новый Запрос;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки,";
		Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
			ТекстЗапроса = ТекстЗапроса + "	
		|	ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +"  КАК Номенклатура" + СуффиксДопРеквизита +","; 
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "	
		|	ТаблицаТоваров.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки,";
		Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
			ТекстЗапроса = ТекстЗапроса + "	
			|	ВЫБОР
			|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
			|				ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)	
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ХарактеристикиИспользуются" + СуффиксДопРеквизита +",";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "	
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
		|			ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются
		|ИЗ
		|	ТаблицаТоваров КАК ТаблицаТоваров
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		Запрос.Текст = ТекстЗапроса;
		
		СтрокаДопРеквизитов = ?(Не ЗначениеЗаполнено(СуффиксДопРеквизита), "", ",Номенклатура"+СуффиксДопРеквизита);
		Запрос.УстановитьПараметр("ТаблицаТоваров",  ТаблицаФормы.Выгрузить(,"НомерСтроки,Номенклатура"+СтрокаДопРеквизитов));
		
		ТаблицаПризнаков = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрТабл Из ТаблицаФормы Цикл
			
			СтрокаХарактеристик = ТаблицаПризнаков[СтрТабл.НомерСтроки-1];
			
			СтрТабл.ХарактеристикиИспользуются = СтрокаХарактеристик.ХарактеристикиИспользуются;
			Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
				СтрТабл["ХарактеристикиИспользуются"+СуффиксДопРеквизита] = СтрокаХарактеристик["ХарактеристикиИспользуются"+СуффиксДопРеквизита];
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		ОбрабатываемаяСтрока = ТаблицаФормы.НайтиПоИдентификатору(НомерСтроки);
		Запрос = Новый Запрос;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК НомерСтроки,";
		Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
			ТекстЗапроса = ТекстЗапроса + "	
		|	ТаблицаТоваров" + СуффиксДопРеквизита +"  КАК Номенклатура" + СуффиксДопРеквизита +","; 
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "	
		|	ТаблицаТоваров.Ссылка КАК Номенклатура
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	Справочник.Номенклатура КАК ТаблицаТоваров
		|ГДЕ
		|	ТаблицаТоваров.Ссылка = &Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки,";
		Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
			ТекстЗапроса = ТекстЗапроса + "	
			|	ВЫБОР
			|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
			|				ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)	
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ХарактеристикиИспользуются" + СуффиксДопРеквизита +",";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "	
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
		|			ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются
		|ИЗ
		|	ТаблицаТоваров КАК ТаблицаТоваров
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Номенклатура", ОбрабатываемаяСтрока.Номенклатура);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОбрабатываемаяСтрока.ХарактеристикиИспользуются = Выборка.ХарактеристикиИспользуются;
			Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
				ОбрабатываемаяСтрока["ХарактеристикиИспользуются" + СуффиксДопРеквизита] = Выборка["ХарактеристикиИспользуются" + СуффиксДопРеквизита];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет заполнение колонок "Характеристика" в формах.
//
// Параметры:
//  Объект - ДокументОбъект (СправочникОбъект и т.п.) - объект в котором проверяется заполнение колонок.
//  МассивНепроверяемыхРеквизитов - Массив - массив реквизитов, которые не нужно проверять платформенной проверкой.
//  Отказ - Булево - отказ продолжения операции.
//  ПараметрыПроверки - Структура - возможные поля (все необязательные):
//  	*СуффиксДопРеквизита - суффикс реквизитов "Номенклатура" и "Характеристика", если в ТЧ есть такие реквизиты,
//						например, "Оприходование", если в ТЧ помимо "Номенклатура" и "Характеристика" есть еще
//						"НоменклатураОприходование" и "ХарактеристикаОприходование".
//		*ИмяТЧ - имя проверяемой табличной части, если оно отличается от "Товары".
//
Процедура ПроверитьЗаполнениеХарактеристик(Объект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки = Неопределено) Экспорт
	
	Перем СуффиксДопРеквизита;
	Перем ИмяТЧ;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьЦенуНоменклатуры = Ложь;
	Если ПараметрыПроверки <> Неопределено Тогда
		
		ПараметрыПроверки.Свойство("ИмяТЧ",ИмяТЧ);
		ПараметрыПроверки.Свойство("СуффиксДопРеквизита",СуффиксДопРеквизита);
		ПараметрыПроверки.Свойство("ИспользоватьЦенуНоменклатуры",ИспользоватьЦенуНоменклатуры);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяТЧ) Тогда
		ИмяТЧ = "Товары";
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ+".Характеристика");
	
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ+".Характеристика"+СуффиксДопРеквизита);
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("УправляемаяФорма") Тогда
		МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	Иначе
		МетаданныеОбъекта = Объект.Метаданные();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,";
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = ТекстЗапроса + "
	|	ТаблицаТоваров.Номенклатура"+СуффиксДопРеквизита+" КАК Номенклатура"+СуффиксДопРеквизита+",
	|	ТаблицаТоваров.Характеристика"+СуффиксДопРеквизита+" КАК Характеристика"+СуффиксДопРеквизита+",";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ СтрокиСОшибками
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = ТекстЗапроса + "
	|	ИЛИ ТаблицаТоваров.Характеристика"+СуффиксДопРеквизита+" = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиСОшибками.НомерСтроки,";
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = ТекстЗапроса + "	
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
		|				ИЛИ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры))
		|			И СтрокиСОшибками.Характеристика"+СуффиксДопРеквизита+" = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) 
		|			И (НЕ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользоватьЦенуНоменклатуры И &ИспользоватьЦенуНоменклатуры = ИСТИНА ИЛИ НЕ &ИспользоватьЦенуНоменклатуры = ИСТИНА) ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеЗаполненаХарактеристика" + СуффиксДопРеквизита +",";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "	
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
	|			ИЛИ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры))
	|			И СтрокиСОшибками.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) 
	|			И (НЕ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользоватьЦенуНоменклатуры И &ИспользоватьЦенуНоменклатуры = ИСТИНА ИЛИ НЕ &ИспользоватьЦенуНоменклатуры = ИСТИНА) ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаХарактеристика
	|ИЗ
	|	СтрокиСОшибками КАК СтрокиСОшибками
	|ГДЕ
	|	(ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
	|			ИЛИ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры))
	| 	И СтрокиСОшибками.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	И (НЕ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользоватьЦенуНоменклатуры И &ИспользоватьЦенуНоменклатуры = ИСТИНА ИЛИ НЕ &ИспользоватьЦенуНоменклатуры = ИСТИНА)";
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = ТекстЗапроса + "
	|	ИЛИ (ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
	|			ИЛИ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры))
	|	И СтрокиСОшибками.Характеристика"+СуффиксДопРеквизита+" = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	И (НЕ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользоватьЦенуНоменклатуры И &ИспользоватьЦенуНоменклатуры = ИСТИНА ИЛИ НЕ &ИспользоватьЦенуНоменклатуры = ИСТИНА)";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	СтрокаДопРеквизитов = ?(Не ЗначениеЗаполнено(СуффиксДопРеквизита), "", ",Номенклатура"+СуффиксДопРеквизита+",Характеристика"+СуффиксДопРеквизита);
	
	Если Не ПараметрыПроверки = Неопределено Тогда
		СписокСтрок = Неопределено;
		ОтборПроверяемыхСтрок = Неопределено;
		ЕстьСписокСтрок = ПараметрыПроверки.Свойство("СписокСтрок",СписокСтрок);
		ЕстьОтборПроверяемыхСтрок = ПараметрыПроверки.Свойство("ОтборПроверяемыхСтрок",ОтборПроверяемыхСтрок);
		
		Если СписокСтрок = Неопределено 
			И ЕстьОтборПроверяемыхСтрок 
			И (Не ОтборПроверяемыхСтрок = Неопределено) 
			И ОтборПроверяемыхСтрок.Количество() >0 Тогда
			
			ОтборСтрокДляПроверки = ПараметрыПроверки.ОтборПроверяемыхСтрок;
		Иначе
			ОтборСтрокДляПроверки = СписокСтрок;
		КонецЕсли;
		
		Если ОтборСтрокДляПроверки = Неопределено Тогда
			Запрос.УстановитьПараметр("ТаблицаТоваров",  Объект[ИмяТЧ].Выгрузить(,"НомерСтроки,Номенклатура,Характеристика"+СтрокаДопРеквизитов));
		Иначе
			Запрос.УстановитьПараметр("ТаблицаТоваров",
			Объект[ИмяТЧ].Выгрузить(ОтборСтрокДляПроверки, "НомерСтроки,Номенклатура,Характеристика"+СтрокаДопРеквизитов));
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("ТаблицаТоваров",  Объект[ИмяТЧ].Выгрузить(,"НомерСтроки,Номенклатура,Характеристика"+СтрокаДопРеквизитов));
	КонецЕсли;
	Запрос.УстановитьПараметр("ИспользоватьЦенуНоменклатуры", ИспользоватьЦенуНоменклатуры);
	
	ШаблонСообщения = НСтр("ru='Не заполнена колонка ""%Характеристика%"" в строке %НомерСтроки% списка ""%ТаблицаТовары%"".'");
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПредставлениеТЧ                      = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;
	ПредставлениеРеквизитаХарактеристика = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты.Характеристика.Синоним;
	ПредставлениеРеквизитаХарактеристикаДоп = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты["Характеристика"+СуффиксДопРеквизита].Синоним;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НеЗаполненаХарактеристика Тогда
			
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Характеристика%", ПредставлениеРеквизитаХарактеристика);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Характеристика");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СуффиксДопРеквизита)
			И Выборка["НеЗаполненаХарактеристика" + СуффиксДопРеквизита] Тогда
			
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Характеристика%", ПредставлениеРеквизитаХарактеристикаДоп);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Характеристика"+СуффиксДопРеквизита);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

// Проверяет заполнение колонки "Номенклатура" в документах.
//
// Параметры:
//  Объект - ДокументОбъект - объект в котором проверяется заполнение колонок.
//  Отказ - Булево - отказ продолжения операции.
//  ПараметрыПроверки - Структура - возможные поля (все необязательные):
//  	*ИмяРеквизита - Строка - имя проверяемого реквизита с типом СправочникСсылка.Номенклатура, по умолчанию "Номенклатура".
//  	*ИмяТЧ - Строка - имя проверяемой табличной части, по умолчанию "Товары".
//
Процедура ПроверитьЗаполнениеТЧПриНаличииОбменаСУправлениемТорговлей(Объект, Отказ, ПараметрыПроверки = Неопределено) Экспорт
	
	Перем ИмяРеквизита;
	Перем ИмяТЧ;
		
	ИспользуетсяОбменСУправлениемТорговлей = Константы.ИспользуетсяОбменСУправлениемТорговлей.Получить();
	Если НЕ ИспользуетсяОбменСУправлениемТорговлей Тогда
		Возврат;
	КонецЕсли;	
	
	ИмяТЧ = "Товары";
	ИмяРеквизита = "Номенклатура";
	
	Если ПараметрыПроверки <> Неопределено Тогда
		Если ПараметрыПроверки.Свойство("ИмяТЧ") Тогда
			ИмяТЧ = ПараметрыПроверки.ИмяТЧ;
		КонецЕсли;	
		Если ПараметрыПроверки.Свойство("ИмяРеквизита") Тогда
			ИмяРеквизита = ПараметрыПроверки.ИмяРеквизита;
		КонецЕсли;			
	КонецЕсли;
			
	МетаданныеОбъекта = Объект.Метаданные();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТаблицаТоваров КАК Товары
	|ГДЕ
	|	Товары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	СправочникНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|			ТОГДА 1
	|		КОГДА СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЕстьТовары,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЕстьСертификаты
	|ПОМЕСТИТЬ Т
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура
	|ИЗ
	|	Т КАК ТоварыСводно
	|		ЛЕВОЕ СОЕДИНЕНИЕ Т КАК Товары
	|		ПО (ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.НомерСтроки,
	|	Товары.ТипНоменклатуры
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ТоварыСводно.ЕстьТовары) = 1 И
	|	МАКСИМУМ(ТоварыСводно.ЕстьСертификаты) = 1 И
	|	Товары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)");
	
	
	ТаблицаТоваров = Объект[ИмяТЧ].Выгрузить(,"НомерСтроки," + ИмяРеквизита);
	КолонкаТаблицыТоваров = ТаблицаТоваров.Колонки[ИмяРеквизита];
	КолонкаТаблицыТоваров.Имя = "Номенклатура";
	Запрос.УстановитьПараметр("ТаблицаТоваров",  ТаблицаТоваров);
	
	ПредставлениеТЧ                      = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;
	ПредставлениеРеквизитаНоменклатура   = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты[ИмяРеквизита].Синоним;
	ШаблонСообщения = НСтр("ru='В строке %НомерСтроки% в колонке ""%Номенклатура%"" списка ""%ТаблицаТоваров%""
	|указан подарочный сертификат.
	|При совместном использовании с конфигурацией ""Управление торговлей 11"" 
	|операции с подарочными сертификатами оформляются отдельным документом'");
	ШаблонСообщения = СтрЗаменить(ШаблонСообщения, "%Номенклатура%", ПредставлениеРеквизитаНоменклатура);
	ШаблонСообщения = СтрЗаменить(ШаблонСообщения, "%ТаблицаТоваров%", ПредставлениеТЧ);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
		ОбщегоНазначения.СообщитьПользователю(
			ТекстСообщения,
			,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, ИмяРеквизита),
			"Объект",
			Отказ);
			
	КонецЦикла;

КонецПроцедуры

// Проверяет заполнения реквизита Количество и КоличествоУпаковок в документах.
//
// Параметры:
//  Объект - ДокументОбъект - объект в котором проверяется заполнение количества.
//  ПроверяемыеРеквизиты - Структура - структура проверяемых реквизитов.
//  Отказ - Булево - отказ продолжения операции.
//  ИмяТабЧасти - Строка - наименование табличной части.
//
Процедура ПроверитьЗаполнениеКоличества(Объект, ПроверяемыеРеквизиты, Отказ, ИмяТабЧасти = "Товары") Экспорт
	
	ИмяРеквизита = "КоличествоУпаковок";
	
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти(ИмяТабЧасти + ".Количество"));
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти(ИмяТабЧасти + ".КоличествоУпаковок"));
	
	ШаблонОшибкаКоличества = НСтр("ru = 'Не заполнена колонка ""Количество"" в строке №%1 списка ""%2""'");
	ШаблонОшибкаПересчета = НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения в строке %1 списка ""%2""'");
	
	Для Каждого СтрокаТаб Из Объект[ИмяТабЧасти] Цикл
		Если СтрокаТаб.Количество = 0 И СтрокаТаб.КоличествоУпаковок <> 0 Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибкаПересчета,
				Строка(СтрокаТаб.НомерСтроки),
				ИмяТабЧасти);
			
			
			ОбщегоНазначения.СообщитьПользователю(Текст,
				Объект,
				ОбщегоНазначенияРТ.ТекстДляВыдачиСообщенийПоСтрокеТЧ(ИмяТабЧасти, СтрокаТаб.НомерСтроки, ИмяРеквизита),
				,
				Отказ);
			
		ИначеЕсли СтрокаТаб.Количество = 0 Или СтрокаТаб.КоличествоУпаковок = 0 Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибкаКоличества,
				Строка(СтрокаТаб.НомерСтроки),
				ИмяТабЧасти);
			
			ОбщегоНазначения.СообщитьПользователю(Текст,
				Объект,
				ОбщегоНазначенияРТ.ТекстДляВыдачиСообщенийПоСтрокеТЧ(ИмяТабЧасти, СтрокаТаб.НомерСтроки, ИмяРеквизита),
				,
				Отказ);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет склад продажи в строках.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ЗаполнитьСкладПродажиВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ЗаполнитьСкладПродажи", СтруктураПараметровДействия) Тогда
		
		ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
		ТоварнаяГруппа = Справочники.ТоварныеГруппы.ПустаяСсылка();
		
		Если СтрокаКоллекцииИмеетСвойство(ТекущаяСтрока, "ТипНоменклатуры")
				И ЗначениеЗаполнено(ТекущаяСтрока.ТипНоменклатуры) Тогда
			ТипНоменклатуры = ТекущаяСтрока.ТипНоменклатуры;
		КонецЕсли;
		
		Если СтрокаКоллекцииИмеетСвойство(ТекущаяСтрока, "Номенклатура")
				И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			РеквизитыНоменклатуры =
				ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяСтрока.Номенклатура, "ТипНоменклатуры, ТоварнаяГруппа");
			ТипНоменклатуры = РеквизитыНоменклатуры.ТипНоменклатуры;
			ТоварнаяГруппа = РеквизитыНоменклатуры.ТоварнаяГруппа;
		КонецЕсли;
		
		Если ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга Тогда
			
			ОрганизацияСклада = Справочники.Организации.ПустаяСсылка();
			Если СтруктураПараметровДействия.Свойство("Организация") Тогда
				ОрганизацияСклада = СтруктураПараметровДействия.Организация;
			КонецЕсли;
			
			ТекущаяСтрока.Склад = ПолучитьСкладПродажи(ТоварнаяГруппа, СтруктураПараметровДействия.Магазин,
				СтруктураПараметровДействия.РабочееМесто, ОрганизацияСклада, ТекущаяСтрока.Склад);
			
		Иначе
			ТекущаяСтрока.Склад = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Заполняет организацию продажи в строках.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ЗаполнитьОрганизациюПродажиВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем СтруктураПараметровДействия, ОрганизацияПоУмолчанию;

	Если СтруктураДействий.Свойство("ЗаполнитьОрганизациюПродажи", СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия.Свойство("ОрганизацияПоУмолчанию", ОрганизацияПоУмолчанию) Тогда
			ТекущаяСтрока.Организация = ОрганизацияПоУмолчанию;
			Возврат;
		КонецЕсли;
		
		ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
		ТоварнаяГруппа = Справочники.ТоварныеГруппы.ПустаяСсылка();
		
		Если ТекущаяСтрока.Свойство("ТипНоменклатуры") И ЗначениеЗаполнено(ТекущаяСтрока.ТипНоменклатуры) Тогда
			ТипНоменклатуры = ТекущаяСтрока.ТипНоменклатуры;
		КонецЕсли;
		
		Если ТекущаяСтрока.Свойство("Номенклатура") И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			РеквизитыНоменклатуры =
				ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяСтрока.Номенклатура, "ТипНоменклатуры, ТоварнаяГруппа");
			ТипНоменклатуры = РеквизитыНоменклатуры.ТипНоменклатуры;
			ТоварнаяГруппа = РеквизитыНоменклатуры.ТоварнаяГруппа;
		КонецЕсли;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	РаспределениеНоменклатуры.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА РаспределениеНоменклатуры.РабочееМесто = &РабочееМесто
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК ПолеУпорядочивания
		|ИЗ
		|	РегистрСведений.РаспределениеНоменклатуры КАК РаспределениеНоменклатуры
		|ГДЕ
		|	РаспределениеНоменклатуры.Магазин = &Магазин
		|	И РаспределениеНоменклатуры.ТоварнаяГруппа = &ТоварнаяГруппа
		|	И (РаспределениеНоменклатуры.РабочееМесто = &РабочееМесто
		|			ИЛИ РаспределениеНоменклатуры.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Склады.Организация,
		|	3
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка = &Склад
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Магазины.СкладПродажи.Организация,
		|	4
		|ИЗ
		|	Справочник.Магазины КАК Магазины
		|ГДЕ
		|	Магазины.Ссылка = &Магазин
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПолеУпорядочивания");
		
		Запрос.УстановитьПараметр("Магазин", СтруктураПараметровДействия.Магазин);
		Запрос.УстановитьПараметр("РабочееМесто", СтруктураПараметровДействия.РабочееМесто);
		Запрос.УстановитьПараметр("ТоварнаяГруппа", ТоварнаяГруппа);
		Запрос.УстановитьПараметр("Склад", ТекущаяСтрока.Склад);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			ТекущаяСтрока.Организация = Выборка.Организация;
		Иначе
			ТекущаяСтрока.Организация = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет организацию продажи в ТЧ.
//
// Параметры:
//  ТаблицаФормы - ДанныеФормыКоллекция - строка табличной части товаров для обработки.
//  СтруктураПараметров - Структура - структура параметров выполнения операции.
//
Процедура ЗаполнитьОрганизациюПродажиВТЧСервер(ТаблицаФормы, СтруктураПараметров) Экспорт
	
	Перем ОрганизацияПоУмолчанию;
	
	Если ТаблицаФормы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ОрганизацияПоУмолчанию", ОрганизацияПоУмолчанию) Тогда
		Для Каждого СтрТабл Из ТаблицаФормы Цикл
			СтрТабл.Организация = ОрганизацияПоУмолчанию;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(&Магазин КАК Справочник.Магазины) КАК Магазин,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(&РабочееМесто КАК Справочник.РабочиеМеста) КАК РабочееМесто,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Склад КАК Справочник.Склады) КАК Склад
	|ПОМЕСТИТЬ ТаблицаЗапроса
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапроса.НомерСтроки КАК НомерСтроки,
	|	ТаблицаЗапроса.РабочееМесто КАК РабочееМесто,
	|	ТаблицаЗапроса.Магазин КАК Магазин,
	|	ТаблицаЗапроса.Магазин.СкладПродажи.Организация КАК ОрганизацияСкладаПродажи,
	|	ТаблицаЗапроса.Склад.Организация КАК ОрганизацияСклада,
	|	ТаблицаЗапроса.Номенклатура.ТоварнаяГруппа КАК ТоварнаяГруппа
	|ПОМЕСТИТЬ ВТ_ПодготовленныеДанные
	|ИЗ
	|	ТаблицаЗапроса КАК ТаблицаЗапроса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ПодготовленныеДанные.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РаспределениеНоменклатуры.РабочееМесто, ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА ЕСТЬNULL(РаспределениеНоменклатуры.РабочееМесто, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка)
	|			ТОГДА 2
	|	КОНЕЦ КАК Приоритет,
	|	РаспределениеНоменклатуры.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ПриоритетыОрганизаций
	|ИЗ
	|	ВТ_ПодготовленныеДанные КАК ВТ_ПодготовленныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеНоменклатуры КАК РаспределениеНоменклатуры
	|		ПО ВТ_ПодготовленныеДанные.Магазин = РаспределениеНоменклатуры.Магазин
	|			И ВТ_ПодготовленныеДанные.ТоварнаяГруппа = РаспределениеНоменклатуры.ТоварнаяГруппа
	|			И (ВТ_ПодготовленныеДанные.РабочееМесто = РаспределениеНоменклатуры.РабочееМесто
	|				ИЛИ РаспределениеНоменклатуры.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка))
	|ГДЕ
	|	НЕ РаспределениеНоменклатуры.Магазин ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ПодготовленныеДанные.НомерСтроки,
	|	3,
	|	ВТ_ПодготовленныеДанные.ОрганизацияСклада
	|ИЗ
	|	ВТ_ПодготовленныеДанные КАК ВТ_ПодготовленныеДанные
	|ГДЕ
	|	ЕСТЬNULL(ВТ_ПодготовленныеДанные.ОрганизацияСклада, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ПодготовленныеДанные.НомерСтроки,
	|	4,
	|	ВТ_ПодготовленныеДанные.ОрганизацияСкладаПродажи
	|ИЗ
	|	ВТ_ПодготовленныеДанные КАК ВТ_ПодготовленныеДанные
	|ГДЕ
	|	ЕСТЬNULL(ВТ_ПодготовленныеДанные.ОрганизацияСкладаПродажи, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПриоритетыОрганизаций.НомерСтроки КАК НомерСтроки,
	|	МИНИМУМ(ВТ_ПриоритетыОрганизаций.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ВТ_МинимальныйПриоритетПоСтроке
	|ИЗ
	|	ВТ_ПриоритетыОрганизаций КАК ВТ_ПриоритетыОрганизаций
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПриоритетыОрганизаций.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МинимальныйПриоритетПоСтроке.НомерСтроки КАК НомерСтроки,
	|	ВТ_ПриоритетыОрганизаций.Организация КАК Организация
	|ИЗ
	|	ВТ_МинимальныйПриоритетПоСтроке КАК ВТ_МинимальныйПриоритетПоСтроке
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПриоритетыОрганизаций КАК ВТ_ПриоритетыОрганизаций
	|		ПО ВТ_МинимальныйПриоритетПоСтроке.НомерСтроки = ВТ_ПриоритетыОрганизаций.НомерСтроки
	|			И ВТ_МинимальныйПриоритетПоСтроке.Приоритет = ВТ_ПриоритетыОрганизаций.Приоритет";
	
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",
		ТаблицаФормы.Выгрузить(, "НомерСтроки, Номенклатура, Склад"));
	Запрос.УстановитьПараметр("Магазин", СтруктураПараметров.Магазин);
	Запрос.УстановитьПараметр("РабочееМесто", СтруктураПараметров.РабочееМесто);
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрТабл Из ТаблицаФормы Цикл
		
		СтруктураПоиска = Новый Структура("НомерСтроки", СтрТабл.НомерСтроки);
		НайденныеСтроки = ТаблицаРезультата.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаРезультата = НайденныеСтроки[0];
			СтрТабл.Организация = СтрокаРезультата.Организация;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет представление табло. Используется в РМК.
//
// Параметры:
//  ТаблицаФормы - ДанныеФормыКоллекция - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//
Процедура ЗаполнитьПредставлениеТаблоСервер(ТаблицаФормы, СтруктураДействий) Экспорт
	
	Перем ТекстЗапроса;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПредставлениеТабло", ТекстЗапроса) Тогда
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			Для каждого ТекущаяСтрока Из ТаблицаФормы Цикл
				ЗаполнитьПредставлениеТаблоВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения организации в сериях.
//
// Параметры:
//  ТаблицаИсточник - ТаблицаЗначений - таблица значений по которой будут заполнены организации.
//  ТаблицаПриема - ТаблицаЗначений - таблица значений в которой будут заполнены организации в сериях.
//
Процедура ЗаполнитьОрганизациюВСериях(ТаблицаИсточник, ТаблицаПриема) Экспорт
	
	Для каждого СтрокаПриема Из ТаблицаПриема Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура"  , СтрокаПриема.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаПриема.Характеристика);
		
		СтрокиИсточника = ТаблицаИсточник.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиИсточника.Количество() > 0  Тогда
			
			СтрокаПриема.Организация = СтрокиИсточника[0].Организация;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КолвоЭлементовКоллекции = ТаблицаПриема.Количество();
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
		ЭлементКоллекции = ТаблицаПриема[КолвоЭлементовКоллекции - ОбратныйИндекс];

		Если НЕ ЗначениеЗаполнено(ЭлементКоллекции.Организация) Тогда
			ТаблицаПриема.Удалить(ЭлементКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

// Получает по документу, номенклатуре и характеристике номенклатуры, таблицу строк номенклатуры.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ по которому будет получена таблица строк.
//  МетаданныеНаименование - Строка - имя метаданных документа.
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура по которой будет получена таблица строк
//  Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика по которой будет получена таблица строк.
//  ПолучитьДокументПродажи - Булево - признак возврата документа продажи.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица значений строк документа продажи.
//
Функция ПолучитьТаблицуСтрокДокументаПродажи(Документ, МетаданныеНаименование, Номенклатура, Характеристика) Экспорт

	ПолучитьДокументПродажиЧекаККМ = МетаданныеНаименование = "ЧекККМ";
	
	Если ПолучитьДокументПродажиЧекаККМ Тогда
		СтрокаДокументаПродажи = " ПЕРВЫЕ 1	ДокументПродажиТовары.Ссылка.ОтчетОРозничныхПродажах КАК ДокументПродажи, "
	Иначе
		СтрокаДокументаПродажи = " РАЗЛИЧНЫЕ ДокументПродажиТовары.Ссылка КАК ДокументПродажи,";
	КонецЕсли;
	
	СтрокаПродавец = "ДокументПродажиТовары.Продавец";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ " + СтрокаДокументаПродажи + "
	|	ДокументПродажиТовары.Количество КАК КоличествоВДокументеПродажи,
	|	ДокументПродажиТовары.Сумма,
	|	ДокументПродажиТовары.СтавкаНДС,
	|	" + СтрокаПродавец + " КАК Продавец,
	|	ВЫБОР
	|		КОГДА ДокументПродажиТовары.Количество = 0
	|			ТОГДА ДокументПродажиТовары.Цена
	|		ИНАЧЕ ДокументПродажиТовары.Сумма / ДокументПродажиТовары.Количество
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	Документ." + МетаданныеНаименование +  ".Товары КАК ДокументПродажиТовары
	|ГДЕ
	|	ДокументПродажиТовары.Ссылка = &Ссылка
	|	И ДокументПродажиТовары.Номенклатура = &Номенклатура
	|	И ДокументПродажиТовары.Характеристика = &Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	Цена";

	
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);

	
	ТаблицаСтрок = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСтрок;

КонецФункции

// Получает по документу, номенклатуре и характеристике номенклатуры, строку таблицы.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ по которому будет получена таблица строк.
//  МетаданныеНаименование - Строка - имя метаданных документа.
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура по которой будет получена таблица строк
//  Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика по которой будет получена таблица строк.
//
// Возвращаемое значение:
//   СтрокаТаблицыЗначений - строка таблицы значений документа продажи.
//
Функция ПолучитьСтруктуруСтрокиТоваровВДокументеПродажи(Документ, МетаданныеНаименование, Номенклатура, Характеристика) Экспорт
	
	Перем Результат;
	
	Результат = Неопределено;
	
	ТаблицаСтрок = ПолучитьТаблицуСтрокДокументаПродажи(Документ, МетаданныеНаименование, Номенклатура, Характеристика);
	
	Если НЕ ТаблицаСтрок.Количество() = 0 Тогда
		Результат = ТаблицаСтрок[0];
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Добавляет серийных номеров в ТЧ.
//
// Параметры:
//  ТЧСерийныеНомера - табличная часть серийных номеров для заполнения.
//  МассивСерийныхНомеров - Массив - массив серийных номеров, которые необходимо заполнить.
//  ТекущийКлючСвязи - Число - текущий ключ связи таблиц.
//
// Возвращаемое значение:
//  Число - новый ключ связи.
//
Функция ДобавитьСерийныеНомераВТабличнуюЧасть(ТЧСерийныеНомера, МассивСерийныхНомеров, ТекущийКлючСвязи) Экспорт

	НовыйКлючСвязи = 0;

	Если ТекущийКлючСвязи <> 0 Тогда

		Для Каждого СтрокаТЧ Из ТЧСерийныеНомера.НайтиСтроки(Новый Структура("КлючСвязиСерийныхНомеров", ТекущийКлючСвязи)) Цикл
			ТЧСерийныеНомера.Удалить(ТЧСерийныеНомера.Индекс(СтрокаТЧ));
		КонецЦикла;

	КонецЕсли;

	Если МассивСерийныхНомеров.Количество() = 0 Тогда

		НовыйКлючСвязи = 0;

	Иначе

		Если ТекущийКлючСвязи = 0 Тогда

			ВремКлючСвязи = 0;
			Для Каждого СтрокаТЧ Из ТЧСерийныеНомера Цикл
				Если ВремКлючСвязи < СтрокаТЧ.КлючСвязиСерийныхНомеров Тогда
					ВремКлючСвязи = СтрокаТЧ.КлючСвязиСерийныхНомеров;
				КонецЕсли;
			КонецЦикла;

			НовыйКлючСвязи = ВремКлючСвязи + 1;

		Иначе
			НовыйКлючСвязи = ТекущийКлючСвязи;
		КонецЕсли;

		Для Каждого СерийныйНомер Из МассивСерийныхНомеров Цикл

			НоваяСтрокаСН = ТЧСерийныеНомера.Добавить();
			НоваяСтрокаСН.СерийныйНомер            = СерийныйНомер;
			НоваяСтрокаСН.КлючСвязиСерийныхНомеров = НовыйКлючСвязи;

		КонецЦикла;
	КонецЕсли;

	Возврат НовыйКлючСвязи;

КонецФункции

// Проверяет объект на содержание только услуг, исключает склад из проверки.
//
// Параметры:
//  Объект - ДокументОбъект - объект в котором проверяется заполнение количества.
//  ПроверяемыеРеквизиты - Структура - структура проверяемых реквизитов.
//  ИмяТабЧасти - Строка - наименование табличной части.
//
Процедура ПроверитьСодержитТолькоУслуги(Объект, ПроверяемыеРеквизиты, ИмяТабЧасти = "Товары") Экспорт
	
	МассивНоменклатуры = Объект[ИмяТабЧасти].ВыгрузитьКолонку("Номенклатура");
	
	Если ЗначениеЗаполнено(МассивНоменклатуры) Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивНоменклатуры)
		|
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура.ТипНоменклатуры";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() И Выборка.Количество() = 1 Тогда
			Если Выборка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Склад"));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыРаботыССериями

// Заполняет статусы указания серий в строках ТЧ товары (комментарий содержит описание подсистемы серий).
// Возможные статусы указания серий:
//		0 - Серии указывать не требуется
//		нечетные статусы - количество по сериям не совпадает с количеством товаров
//		четные статусы   - количество по сериям не совпадает с количеством товаров
//		1,2 - серии указываются справочно
//		3,4 - по сериям учитываются остатки, серии указываются по факту отбора
//		5,6 - по сериям учитываются остатки, серии указываются при планировании отбора,
//		      заполняются по FEFO (используются только в документах отгрузки товаров)
//		7,8  - по сериям учитываются остатки, серии указываются при планировании отбора
//		9,10 - по сериям учитываются остатки, серии указываются при планировании отгрузки,
//			   по сериям формируются движения по регистру СвободныеОстатки (как при приходе, так и при расходе)
//		11 - серии не указаны, указание не обязательно (используется только в заказах).
//
// Параметры:
//  Объект - ДанныеФормыСтруктура, ДокументОбъект - объект, в котором нужно заполнить статусы.
//  ПараметрыУказанияСерий -Структура - структура параметров указания серий, возвращаемая соответствующей процедурой модуля
//                                      менеджера документа (обработки) с колонками:
//		* ИспользоватьСерииНоменклатуры - Булево - признак, нужно ли в документе заполнять статусы указания серий.
//		* ПоляСвязиСерий - Массив - массив с именами реквизитов ТЧ Товары и ТЧ Серии, по которым устанавливается
//									связь между табличными частями (поля связи "Номенклатура" и "Характеристика" 
//						   присутствуют всегда, их отдельно указывать не нужно).
//		* СкладскиеОперации - Массив - массив значений ПеречислениеСсылка.СкладскиеОперации - складские операции, оформляемые документом.
//		* ТолькоПросмотр - Булево - признак того, что серии в документе можно только просматривать (значение по
//									умолчанию ЛОЖЬ).
//		* ТоварВШапке - Булево - признак, что параметры указания серий определены для товара в шапке (иначе - для товара в ТЧ)
//								(значение по умолчанию ЛОЖЬ).
//		* БлокироватьДанныеФормы - признак того, что перед открытием форму указания серий, нужно заблокировать форму
//								   документа (значение по умолчанию ИСТИНА) если ТолькоПросмотр - Истина, то данные формы
//								   не блокируются.
//		* ИмяТЧТовары - Строка - имя табличной части со списком товаров (значение по умолчанию - "Товары").
//		* ИмяТЧСерии - Строка - имя табличной части со списком серий (значение по умолчанию - "Серии").
//		* ИмяПоляКоличество - Строка - имя поля в ТЧ "Товары", в котором пользователь редактирует количество (значение по
//									   умолчанию - "КоличествоУпаковок").
//		* ИмяПоляСклад - Строка - имя реквизита склада (значение по умолчанию - "Склад").
//		* ИмяПоляПомещение - Строка - имя реквизита помещения, если не задано, значит в документе нет помещений.
//		* ПроцедураЗаполненияСерий - Строка - содержит имя документа: если параметр задан, то заполнение статусов указания серий
//											  делается одноименной процедурой, размещенной в модуле менеджера документа.
//		* ЭтоОрдер - Булево - признак того, что документ является ордером (значение по умолчанию ЛОЖЬ).
//		* ЭтоЗаказ - Булево - признак того, что документ является заказом (значение по умолчанию ЛОЖЬ).
//		* ЭтоНакладная - Булево - признак того, что документ является накладной (значение по умолчанию ЛОЖЬ).
//		* ПроверкаОтбора - Булево - на адресном складе перед проверкой должны быть заполнены все серии, по которым ведется
//						   учет остатков.
//  СтрокиТоваровДляОбработки - Массив - массив строк товаров, в которых нужно заполнить статусы указания серий,
//                              если передано "Неопределено", то статусы заполняются во всех строках товаров.
//  СтрокиСерийДляОбработки - Массив - массив строк серий, по данным которых нужно заполнить статусы указания серий,
//                            если передано "Неопределено", то учитываются все строки серий.
//
Процедура ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий, СтрокиТоваровДляОбработки = Неопределено, СтрокиСерийДляОбработки = Неопределено) Экспорт
	
	ИмяТЧТовары = "";
	ТоварВШапке = Ложь;
	
	Если ПараметрыУказанияСерий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("ТоварВШапке", ТоварВШапке) Тогда
		ТоварВШапке = Ложь;
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧТовары", ИмяТЧТовары) Тогда
		ИмяТЧТовары = "Товары";
	КонецЕсли;
	
	Если Не (ТоварВШапке
		Или Объект[ИмяТЧТовары].Количество() <> 0 ) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяМенеджера = "";
	
	Если ПараметрыУказанияСерий.Свойство("ПроцедураЗаполненияСерий",ИмяМенеджера) Тогда
		Если ПараметрыУказанияСерий.Свойство("ЭтоОбработка")
		   И ПараметрыУказанияСерий.ЭтоОбработка Тогда
			Обработки[ИмяМенеджера].ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий,СтрокиТоваровДляОбработки,СтрокиСерийДляОбработки);
		Иначе
			Документы[ИмяМенеджера].ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий,СтрокиТоваровДляОбработки,СтрокиСерийДляОбработки);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ИмяТЧСерии  = "";
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧСерии", ИмяТЧСерии) Тогда
		ИмяТЧСерии = "Серии";
	КонецЕсли;
	
	Если ИмяТЧТовары = ИмяТЧСерии Тогда
		ЗаполнитьСтатусУказанияСерииВТЧТовары(Объект, Объект[ИмяТЧТовары],ПараметрыУказанияСерий);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.Свойство("ЭтоЗаказ") Тогда
		ЭтоЗаказ = ПараметрыУказанияСерий.ЭтоЗаказ
	Иначе
		ЭтоЗаказ = Ложь;
	КонецЕсли;
	
	ИмяПоляМагазин = "";
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяПоляМагазин", ИмяПоляМагазин) Тогда
		ИмяПоляМагазин = "Магазин";
	КонецЕсли;
	
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
			Если ТоварВШапке Тогда
				Если ЭтоЗаказ Тогда
					Объект.УказыватьСерии = Ложь;
				КонецЕсли;
				Объект.СтатусУказанияСерий = 0;	
			Иначе
				Для Каждого СтрТабл Из Объект[ИмяТЧТовары] Цикл
					СтрТабл.СтатусУказанияСерий = 0;	
					Если ЭтоЗаказ Тогда
						СтрТабл.УказыватьСерии = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	
	Если ЭтоЗаказ
		И Не ТоварВШапке
		И ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаКомплектующихДляСборки) = Неопределено 
		И ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаКомплектовДляРазборки) = Неопределено Тогда
		ЕстьОтменаСтроки = Истина;
	Иначе
		ЕстьОтменаСтроки = Ложь;
	КонецЕсли;
	
	ТекстПоляВыбораТовары = "";
	ТекстПоляВыбораСерии = "";
	ТекстПоляСвязиСоединениеТоварыСерии = "";
	ТекстПоляСвязиСоединениеТоварыВсеТовары = "";
	ТекстПоляСвязиВыгружаемыеКолонкиТовары = "";
	ТекстПоляСвязиВыгружаемыеКолонкиСерии = "";
	
	Для Каждого СтрокаМассива Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляВыбораТовары = ТекстПоляВыбораТовары + "
		|	ТаблицаТоваров." + СтрокаМассива + ",";
		ТекстПоляВыбораСерии = ТекстПоляВыбораСерии + "
		|	ТаблицаСерий." + СтрокаМассива + ",";
		ТекстПоляСвязиСоединениеТоварыСерии = ТекстПоляСвязиСоединениеТоварыСерии + "
	|			И ТаблицаТоваровДляЗапроса."+СтрокаМассива+" = ТаблицаСерийДляЗапроса."+СтрокаМассива;
		ТекстПоляСвязиСоединениеТоварыВсеТовары = ТекстПоляСвязиСоединениеТоварыВсеТовары + "
	|			И ТаблицаТоваров."+СтрокаМассива+" = ТаблицаТоваровДляЗапроса." + СтрокаМассива;
		ТекстПоляСвязиВыгружаемыеКолонкиТовары = ТекстПоляСвязиВыгружаемыеКолонкиТовары + ", " + СтрокаМассива;
		ТекстПоляСвязиВыгружаемыеКолонкиСерии = ТекстПоляСвязиВыгружаемыеКолонкиСерии + ", " + СтрокаМассива;
	КонецЦикла;
	
	Если ЕстьОтменаСтроки Тогда
		ТекстПоляВыбораТовары = ТекстПоляВыбораТовары + "
		|	ТаблицаТоваров.Отменено,";
		ТекстПоляСвязиВыгружаемыеКолонкиТовары = ТекстПоляСвязиВыгружаемыеКолонкиТовары + ", Отменено";
		УсловиеПоОтмененнойСтроке = "		КОГДА ТаблицаТоваров.Отменено 
									|			ТОГДА 0 ";
	Иначе
		УсловиеПоОтмененнойСтроке = "		КОГДА ЛОЖЬ 
									|			ТОГДА 0 ";
	КонецЕсли;
	
	ТекстПоляСвязиСоединениеМагазин = " ПО (МагазиныПолитикиУчетаСерий.Магазин = &Магазин)";

	ТекстЗапроса = 
	"ВЫБРАТЬ " +
	ТекстПоляВыбораТовары + "
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Количество,
	|	ТаблицаТоваров.СтатусУказанияСерий,
	|	ТаблицаТоваров.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ " +
	ТекстПоляВыбораТовары + "
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	СУММА(ТаблицаТоваров.Количество) КАК Количество,
	|	ТаблицаТоваров.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры
	|ПОМЕСТИТЬ ТаблицаТоваровДляЗапроса
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров ";
	Если ЕстьОтменаСтроки Тогда
	ТекстЗапроса = ТекстЗапроса + "
	|ГДЕ
	|	НЕ ТаблицаТоваров.Отменено ";
	КонецЕсли;	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|СГРУППИРОВАТЬ ПО " +
	ТекстПоляВыбораТовары + "
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Номенклатура.ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ " +
	ТекстПоляВыбораСерии + "
	|	ТаблицаСерий.Номенклатура,
	|	ТаблицаСерий.Характеристика,
	|	ТаблицаСерий.Количество
	|ПОМЕСТИТЬ ТаблицаСерий
	|ИЗ
	|	&ТаблицаСерий КАК ТаблицаСерий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ " +
	ТекстПоляВыбораСерии + "
	|	ТаблицаСерий.Номенклатура,
	|	ТаблицаСерий.Характеристика,
	|	СУММА(ТаблицаСерий.Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаСерийДляЗапроса
	|ИЗ
	|	ТаблицаСерий КАК ТаблицаСерий
	|
	|СГРУППИРОВАТЬ ПО " +
	ТекстПоляВыбораСерии + "
	|	ТаблицаСерий.Номенклатура,
	|	ТаблицаСерий.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР "+
		 УсловиеПоОтмененнойСтроке + "
	|		ИНАЧЕ ВЫБОР
	|				КОГДА МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|					ТОГДА 0
	|				ИНАЧЕ ВЫБОР
	|						КОГДА (&СправочныйВводСерий)
	|							ТОГДА ВЫБОР
	|										КОГДА ТаблицаТоваровДляЗапроса.Количество = ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0)
	|												И ТаблицаТоваровДляЗапроса.Количество > 0
	|											ТОГДА 2
	|										ИНАЧЕ 11
	|									КОНЕЦ
	|						КОГДА ((&ЭтоОрдер
	|									ИЛИ (НЕ Магазины.ИспользоватьОрдернуюСхемуПриОтгрузке)
	|										И &ЭтоНакладная)
	|									И (МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеКлиенту
	|											И &ОтгрузкаКлиенту
	|										ИЛИ МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеВРозницу
	|											И &ОтгрузкаВРозницу
	|										ИЛИ МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеКомплектующихДляСборки
	|											И &ОтгрузкаКомплектующихДляСборки
	|											И ((НЕ &ТоварВШапке)
	|												ИЛИ &ЭтоОрдер)
	|										ИЛИ МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеКомплектовДляРазборки
	|											И &ОтгрузкаКомплектовДляРазборки
	|											И (&ТоварВШапке
	|												ИЛИ &ЭтоОрдер)
	|										ИЛИ МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеПоВозвратуПоставщику
	|											И &ОтгрузкаПоВозвратуПоставщику))
	|							ТОГДА ВЫБОР
	|											КОГДА ТаблицаТоваровДляЗапроса.Количество = ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0)
	|													И ТаблицаТоваровДляЗапроса.Количество <> 0
	|												ТОГДА 2
	|											ИНАЧЕ 1
	|									КОНЕЦ
	|						КОГДА (&ЭтоОрдер
	|									ИЛИ (НЕ Магазины.ИспользоватьОрдернуюСхемуПриПеремещении)
	|										И &ЭтоНакладная)
	|										И (МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеПоПеремещению
	|											И &ОтгрузкаПоПеремещению)
	|							ТОГДА ВЫБОР
	|											КОГДА ТаблицаТоваровДляЗапроса.Количество = ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0)
	|													И ТаблицаТоваровДляЗапроса.Количество <> 0
	|												ТОГДА 2
	|											ИНАЧЕ 1
	|									КОНЕЦ
	|						КОГДА МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемке
	|								И (НЕ &ЭтоЗаказ)
	|								И (&ЭтоОрдер
	|									ИЛИ (НЕ Магазины.ИспользоватьОрдернуюСхемуПриПоступлении)
	|										И &ЭтоНакладная)
	|								И (МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеОтПоставщика
	|										И &ПриемкаОтПоставщика
	|									ИЛИ МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеПоВозвратуОтКлиента
	|										И &ПриемкаПоВозвратуОтКлиента
	|									ИЛИ МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеКомплектующихПослеРазборки
	|										И &ПриемкаКомплектующихПослеРазборки
	|										И ((НЕ &ТоварВШапке)
	|											ИЛИ &ЭтоОрдер)
	|									ИЛИ МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеСобранныхКомплектов
	|										И &ПриемкаСобранныхКомплектов
	|										И (&ТоварВШапке
	|											ИЛИ &ЭтоОрдер))
	|							ТОГДА ВЫБОР
	|											КОГДА ТаблицаТоваровДляЗапроса.Количество = ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0)
	|													И ТаблицаТоваровДляЗапроса.Количество <> 0
	|												ТОГДА 2
	|											ИНАЧЕ 1
	|									КОНЕЦ
	|						КОГДА МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемке
	|								И (НЕ &ЭтоЗаказ)
	|								И (&ЭтоОрдер
	|									ИЛИ (НЕ Магазины.ИспользоватьОрдернуюСхемуПриПеремещении)
	|										И &ЭтоНакладная)
	|								И (МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеПоПеремещению
	|										И &ПриемкаПоПеремещению)
	|							ТОГДА ВЫБОР
	|											КОГДА ТаблицаТоваровДляЗапроса.Количество = ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0)
	|													И ТаблицаТоваровДляЗапроса.Количество <> 0
	|												ТОГДА 2
	|											ИНАЧЕ 1
	|									КОНЕЦ
	|						КОГДА МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтраженииИзлишковНедостачПорчи
	|								И (&ЭтоОрдер
	|									ИЛИ (НЕ Магазины.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач)
	|										И &ЭтоНакладная)
	|								И (&ОтражениеИзлишков
	|									ИЛИ &ОтражениеНедостач
	|									ИЛИ &МаркировкаПродукцииДляГИСМ
	|									ИЛИ &ОтражениеПорчи)
	|							ТОГДА ВЫБОР
	|											КОГДА ТаблицаТоваровДляЗапроса.Количество = ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0)
	|													И ТаблицаТоваровДляЗапроса.Количество <> 0
	|												ТОГДА 2
	|											ИНАЧЕ 1
	|									КОНЕЦ
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ ТаблицаСтатусов
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТоваровДляЗапроса КАК ТаблицаТоваровДляЗапроса
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСерийДляЗапроса КАК ТаблицаСерийДляЗапроса
	|			ПО ТаблицаТоваровДляЗапроса.Номенклатура = ТаблицаСерийДляЗапроса.Номенклатура
	|				И ТаблицаТоваровДляЗапроса.Характеристика = ТаблицаСерийДляЗапроса.Характеристика " +
					ТекстПоляСвязиСоединениеТоварыСерии + "
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК МагазиныПолитикиУчетаСерий
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Магазины КАК Магазины
	|				ПО МагазиныПолитикиУчетаСерий.Магазин = Магазины.Ссылка" +
				ТекстПоляСвязиСоединениеМагазин + "
	|			И ТаблицаТоваровДляЗапроса.ВидНоменклатуры = МагазиныПолитикиУчетаСерий.Ссылка
	|		ПО ТаблицаТоваров.Номенклатура = ТаблицаТоваровДляЗапроса.Номенклатура
	|			И ТаблицаТоваров.Характеристика = ТаблицаТоваровДляЗапроса.Характеристика" +
				ТекстПоляСвязиСоединениеТоварыВсеТовары + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСтатусов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаСтатусов.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	ТаблицаСтатусов КАК ТаблицаСтатусов
	|ГДЕ
	|	ТаблицаСтатусов.СтатусУказанияСерий <> ТаблицаСтатусов.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;

	Запрос.УстановитьПараметр("Магазин", Объект[ИмяПоляМагазин]);
	
	Запрос.УстановитьПараметр("ТоварВШапке", ТоварВШапке);
	
 	УстановитьПараметрыЗапросаПоПараметрамУказанияСерий(Запрос,ПараметрыУказанияСерий);
	
	Если ТоварВШапке Тогда
		
		ТаблицаТоваров = Новый ТаблицаЗначений;
		ТаблицаТоваров.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаТоваров.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаТоваров.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
		ТаблицаТоваров.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(5,0,ДопустимыйЗнак.Неотрицательный)));
		ТаблицаТоваров.Колонки.Добавить("СтатусУказанияСерий",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(2,0,ДопустимыйЗнак.Неотрицательный)));
		
		Для Каждого СтрокаМассива Из ПараметрыУказанияСерий.ПоляСвязи Цикл
			Типы = Новый Массив;
			Типы.Добавить(ТипЗнч(Объект[СтрокаМассива]));
			ТаблицаТоваров.Колонки.Добавить(СтрокаМассива,Новый ОписаниеТипов(Типы));
		КонецЦикла;
		
		СтрокаТовара = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовара,Объект);
		СтрокаТовара.НомерСтроки = 1;
		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика" + ТекстПоляСвязиВыгружаемыеКолонкиТовары);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,Объект);
		
		НайденныеСтрокиСерий =  Объект[ИмяТЧСерии].НайтиСтроки(СтруктураПоиска);
		
		Запрос.УстановитьПараметр("ТаблицаТоваров",ТаблицаТоваров);
		Запрос.УстановитьПараметр("ТаблицаСерий", Объект[ИмяТЧСерии].Выгрузить(НайденныеСтрокиСерий,"Номенклатура, Характеристика, Количество" + ТекстПоляСвязиВыгружаемыеКолонкиСерии));
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
		
 			Объект.СтатусУказанияСерий = Выборка.СтатусУказанияСерий;
			Если ЭтоЗаказ Тогда
				Если (Выборка.СтатусУказанияСерий = 11
					Или Выборка.СтатусУказанияСерий = 0) Тогда
					Объект.УказыватьСерии = Ложь;
				Иначе
					Объект.УказыватьСерии = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	Иначе	
		Если СтрокиСерийДляОбработки <> Неопределено
			И СтрокиТоваровДляОбработки <> Неопределено Тогда
			Запрос.УстановитьПараметр("ТаблицаТоваров", Объект[ИмяТЧТовары].Выгрузить(СтрокиТоваровДляОбработки,"Номенклатура, Характеристика, Количество,НомерСтроки, СтатусУказанияСерий" + ТекстПоляСвязиВыгружаемыеКолонкиТовары));
			Запрос.УстановитьПараметр("ТаблицаСерий", Объект[ИмяТЧСерии].Выгрузить(СтрокиСерийДляОбработки,"Номенклатура, Характеристика, Количество" + ТекстПоляСвязиВыгружаемыеКолонкиСерии));
		Иначе
			Запрос.УстановитьПараметр("ТаблицаТоваров", Объект[ИмяТЧТовары].Выгрузить(,"Номенклатура, Характеристика, Количество,НомерСтроки, СтатусУказанияСерий" + ТекстПоляСвязиВыгружаемыеКолонкиТовары));
			Запрос.УстановитьПараметр("ТаблицаСерий", Объект[ИмяТЧСерии].Выгрузить(,"Номенклатура, Характеристика, Количество" + ТекстПоляСвязиВыгружаемыеКолонкиСерии));
		КонецЕсли;
		
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрТабл = Объект[ИмяТЧТовары][Выборка.НомерСтроки - 1];
			
			СтрТабл.СтатусУказанияСерий = Выборка.СтатусУказанияСерий;
			
			Если ЭтоЗаказ Тогда
				Если (Выборка.СтатусУказанияСерий = 11
					Или Выборка.СтатусУказанияСерий = 0) Тогда
					СтрТабл.УказыватьСерии = Ложь;
				Иначе
					СтрТабл.УказыватьСерии = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Заполняет колонки "СтатусУказанияСерий" в формах, в которых серия редактируется в одной таблице с товарами.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура, ДокументОбъект - объект, в котором нужно заполнить статусы.
//  ТЧ - ТабличнаяЧасть - табличная часть для указания статусов серий.
//  ПараметрыУказанияСерий - Структура - структура параметров указания серий, возвращаемая соответствующей процедурой модуля
//                                       менеджера документа.
//  СтрокиТоваровДляОбработки - Массив - массив строк товаров, в которых нужно заполнить статусы указания серий,
//                                       если передано "Неопределено", то статусы заполняются во всех строках.
//
Процедура ЗаполнитьСтатусУказанияСерииВТЧТовары(Объект, ТЧ, ПараметрыУказанияСерий, СтрокиТоваровДляОбработки = Неопределено)
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
			Для Каждого СтрТабл Из ТЧ Цикл
				СтрТабл.СтатусУказанияСерий = 0;
				СтрТабл.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
			КонецЦикла;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Серия,
	|	ТаблицаТоваров.СтатусУказанияСерий,
	|	ТаблицаТоваров.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА (НЕ МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL )
	|			ТОГДА ВЫБОР
	|					КОГДА МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПересчетеТоваров
	|							И (&ОтражениеРезультатовПересчетов
	|							ИЛИ &Пересчет)
	|						ТОГДА 2
	|					КОГДА МагазиныПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтраженииИзлишковНедостачПорчи
	|							И (&ЭтоОрдер
	|								ИЛИ (НЕ Магазины.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач))
	|							И (&ОтражениеИзлишков
	|								ИЛИ &ОтражениеНедостач)
	|						ТОГДА 2
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ТаблицаТовары.Серия КАК Справочник.СерииНоменклатуры).ВидНоменклатуры = ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СерияУказанаКорректно
	|ПОМЕСТИТЬ ТаблицаСтатусов
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК МагазиныПолитикиУчетаСерий
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Магазины КАК Магазины
	|			ПО МагазиныПолитикиУчетаСерий.Магазин = Магазины.Ссылка
	|		ПО (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = МагазиныПолитикиУчетаСерий.Ссылка)
	|			И (МагазиныПолитикиУчетаСерий.Магазин = &Магазин)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСтатусов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаСтатусов.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ТаблицаСтатусов.СерияУказанаКорректно КАК СерияУказанаКорректно
	|ИЗ
	|	ТаблицаСтатусов КАК ТаблицаСтатусов
	|ГДЕ
	|	(ТаблицаСтатусов.СтарыйСтатусУказанияСерий <> ТаблицаСтатусов.СтатусУказанияСерий
	|			ИЛИ (НЕ ТаблицаСтатусов.СерияУказанаКорректно))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Если СтрокиТоваровДляОбработки = Неопределено Тогда
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТЧ.Выгрузить(,"НомерСтроки,Номенклатура,СтатусУказанияСерий,Серия"));
	Иначе
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТЧ.Выгрузить(СтрокиТоваровДляОбработки,"НомерСтроки,Номенклатура,СтатусУказанияСерий, Серия"));
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	
	УстановитьПараметрыЗапросаПоПараметрамУказанияСерий(Запрос,ПараметрыУказанияСерий);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрТабл = ТЧ[Выборка.НомерСтроки - 1];
		
		СтрТабл.СтатусУказанияСерий = Выборка.СтатусУказанияСерий;
		Если Выборка.СтатусУказанияСерий = 0
			Или Не Выборка.СерияУказанаКорректно Тогда
			СтрТабл.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет параметры запроса по параметрам указания серий товаров.
//
// Параметры:
//  Запрос - Запрос - Запрос, для которого устанавливаются параметры.
//  ПараметрыУказанияСерий - Структура - Структура параметров указания серий.
//
Процедура УстановитьПараметрыЗапросаПоПараметрамУказанияСерий(Запрос, ПараметрыУказанияСерий) Экспорт
	
	Если ПараметрыУказанияСерий.Свойство("ЭтоОрдер") Тогда
		Запрос.УстановитьПараметр("ЭтоОрдер", ПараметрыУказанияСерий.ЭтоОрдер);
	Иначе
		Запрос.УстановитьПараметр("ЭтоОрдер", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.Свойство("ЭтоНакладная") Тогда
		Запрос.УстановитьПараметр("ЭтоНакладная", ПараметрыУказанияСерий.ЭтоНакладная);
	Иначе
		Запрос.УстановитьПараметр("ЭтоНакладная", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.Свойство("ЭтоЗаказ") Тогда
		Запрос.УстановитьПараметр("ЭтоЗаказ", ПараметрыУказанияСерий.ЭтоЗаказ);
	Иначе
		Запрос.УстановитьПараметр("ЭтоЗаказ", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.Свойство("СправочныйВводСерий") Тогда
		Запрос.УстановитьПараметр("СправочныйВводСерий", ПараметрыУказанияСерий.СправочныйВводСерий);
	Иначе
		Запрос.УстановитьПараметр("СправочныйВводСерий", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаВРозницу) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаВРозницу", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаВРозницу", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаКлиенту) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаКлиенту", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаКлиенту", Ложь);
	КонецЕсли;
		
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаКомплектующихДляСборки) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаКомплектующихДляСборки", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаКомплектующихДляСборки", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаКомплектовДляРазборки) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаКомплектовДляРазборки", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаКомплектовДляРазборки", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаПоВозвратуПоставщику) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаПоВозвратуПоставщику", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаПоВозвратуПоставщику", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаПоПеремещению", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаПоПеремещению", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаОтПоставщика) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаОтПоставщика", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаОтПоставщика", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаПоВозвратуОтКлиента) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаПоВозвратуОтКлиента", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаПоВозвратуОтКлиента", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаПоПеремещению) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаПоПеремещению", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаПоПеремещению", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаПоПрочемуОприходованию) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаПоПрочемуОприходованию", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаПоПрочемуОприходованию", Ложь);            
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаСобранныхКомплектов) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаСобранныхКомплектов", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаСобранныхКомплектов", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаКомплектующихПослеРазборки) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаКомплектующихПослеРазборки", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаКомплектующихПослеРазборки", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтражениеИзлишков) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтражениеИзлишков", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтражениеИзлишков", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтражениеНедостач) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтражениеНедостач", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтражениеНедостач", Ложь);
	КонецЕсли;

	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтражениеПорчи) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтражениеПорчи", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтражениеПорчи", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.Пересчет) <> Неопределено Тогда
		Запрос.УстановитьПараметр("Пересчет", Истина);
	Иначе
		Запрос.УстановитьПараметр("Пересчет", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтражениеРезультатовПересчетов) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтражениеРезультатовПересчетов", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтражениеРезультатовПересчетов", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.МаркировкаПродукцииДляГИСМ) <> Неопределено Тогда
		Запрос.УстановитьПараметр("МаркировкаПродукцииДляГИСМ", Истина);
	Иначе
		Запрос.УстановитьПараметр("МаркировкаПродукцииДляГИСМ", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.Свойство("ПроверкаОтбора") Тогда
		Запрос.УстановитьПараметр("ПроверкаОтбора", ПараметрыУказанияСерий.ПроверкаОтбора);
	Иначе
		Запрос.УстановитьПараметр("ПроверкаОтбора", Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, предусматривает ли политика указания серий на переданном Магазине указание серий 
// и проверяет принадлежность серии.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура
//  Магазин - СправочникСсылка.Магазин
//  ИмяПараметраПолитикиУчетаСерий - Строка - имя реквизита политики учета серий, по которому нужно проверить
//                                            статус указания серий.
// Возвращаемое значение:
//  Структура - :
//		* СтатусУказанияСерий - Строка - статус указания серий.
//		* Серия - СправочникСсылка.СерииНоменклатуры - если серия принадлежит тому же виду номенклатуры,
//				 то переданная серия, иначе - пустая ссылка.
//
Функция СерияУказанаКорректно(Магазин, Номенклатура, Серия, ИмяПараметраПолитикиУчетаСерий) Экспорт
	Результат = Новый Структура("СтатусУказанияСерий,Серия");
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий." + ИмяПараметраПолитикиУчетаСерий + "
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ВидыНоменклатурыПолитикиУчетаСерий
	|		ПО Номенклатура.ВидНоменклатуры = ВидыНоменклатурыПолитикиУчетаСерий.Ссылка
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|	И ВидыНоменклатурыПолитикиУчетаСерий.Магазин = &Магазин
	|	И ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий." + ИмяПараметраПолитикиУчетаСерий;
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Магазин", Магазин);
	
	Если Запрос.Выполнить().Пустой() Тогда
		Результат.СтатусУказанияСерий = 0;
	Иначе
		Результат.СтатусУказанияСерий = 2;
	КонецЕсли;
	
	Если Результат.СтатусУказанияСерий = 0 Тогда
		Результат.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
	Иначе
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Серия, "ВидНоменклатуры")
			 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры") Тогда
			Результат.Серия = Серия;
		Иначе
			Результат.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет правильность указания серий товаров по статусам в ТЧ "Товары".
// Если статусы:
// 1 - количество по сериям не совпадает с количеством товаров (движения по сериям делать не нужно),
// 3 - количество по сериям не совпадает с количеством товаров (нужно делать движения по сериям),
// 5 - количество по сериям не совпадает с количеством товаров (нужно делать движения по сериям, серии
//     заполняются по FEFO),
// 7 - количество по сериям не совпадает с количеством товаров (серии указываются при планировании отгрузки),
// то выдается ошибка.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - документ в котором нужно проверить указание серий.
//  ПараметрыУказанияСерий - Структура - структура параметров указания серий, возвращаемая соответствующей процедурой модуля
//                                       менеджера документа.
//  Отказ - Булево - признак ошибки проверки.
//  МассивНепроверяемыхРеквизитов - Массив - массив игнорируемых реквизитов для проверки.
//  ВыдаватьСообщение - Булево - признак вывода сообщения пользователю.
//  ТекстСообщения - Строка - текст сообщения пользователю.
//
Процедура ПроверитьЗаполнениеСерий(
	ДокументОбъект, 
	ПараметрыУказанияСерий, 
	Отказ, 
	МассивНепроверяемыхРеквизитов = Неопределено, 
	ВыдаватьСообщения = Истина, 
	ТекстСообщения = "") Экспорт
	
	ИмяТЧТовары = "";
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧТовары", ИмяТЧТовары) Тогда
		ИмяТЧТовары = "Товары";
	КонецЕсли;
	
	Если МассивНепроверяемыхРеквизитов <> Неопределено Тогда
		МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧТовары+".Серия");
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТЧСерии  = "";
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧСерии", ИмяТЧСерии) Тогда
		ИмяТЧСерии = "Серии";
	КонецЕсли;
	
	Если ИмяТЧТовары = ИмяТЧСерии Тогда
		
		ИмяПоляКоличество = "";
		
		Если Не ПараметрыУказанияСерий.Свойство("ИмяПоляКоличество", ИмяПоляКоличество) Тогда
			ИмяПоляКоличество = "КоличествоУпаковок";
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСерий.НомерСтроки КАК НомерСтроки,
		|	ТаблицаСерий.Номенклатура КАК Номенклатура,
		|	ТаблицаСерий.Серия КАК Серия,
		|	ТаблицаСерий."+ИмяПоляКоличество+" КАК КоличествоУпаковок,
		|	ТаблицаСерий.СтатусУказанияСерий КАК СтатусУказанияСерий
		|ПОМЕСТИТЬ ТаблицаСерий
		|ИЗ
		|	&ТаблицаСерий КАК ТаблицаСерий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСерий.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаСерий.Номенклатура) КАК ТоварПредставление,
		|	ВЫБОР
		|		КОГДА ТаблицаСерий.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СерияНеЗаполнена,
		|	ВЫБОР
		|		КОГДА (НЕ ВЫРАЗИТЬ(ТаблицаСерий.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользоватьКоличествоСерии)
		|				И ТаблицаСерий.КоличествоУпаковок <> 1
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаКоличества
		|ИЗ
		|	ТаблицаСерий КАК ТаблицаСерий
		|ГДЕ
		|	ТаблицаСерий.СтатусУказанияСерий <> 0
		|	И (ТаблицаСерий.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|			ИЛИ (НЕ ВЫРАЗИТЬ(ТаблицаСерий.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользоватьКоличествоСерии)
		|				И ТаблицаСерий.КоличествоУпаковок <> 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	СерияНеЗаполнена,
		|	ОшибкаКоличества";
		
		Запрос.УстановитьПараметр("ТаблицаСерий",ДокументОбъект[ИмяТЧТовары].Выгрузить(,"НомерСтроки,Номенклатура,Серия,СтатусУказанияСерий, " + ИмяПоляКоличество));
		
		Если ВыдаватьСообщения Тогда
			Выборка = Запрос.Выполнить().Выбрать();
			
			МетаданныеОбъекта = ДокументОбъект.Метаданные();
			ПредставлениеТЧ = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧТовары].Синоним;
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.СерияНеЗаполнена Тогда
					ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Серия"" в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(Выборка.НомерСтроки));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТЧ%", ПредставлениеТЧ);
					
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧТовары, Выборка.НомерСтроки, "Серия");
					
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
				КонецЕсли;
				
				Если Выборка.ОшибкаКоличества Тогда
					ТекстСообщения = НСтр("ru = 'В строке %НомерСтроки% количество должно равняться 1, т.к. политика учета серий товара"
					+ " ""%ТоварПредставление%"" предусматривает, что количество по любой серии этого товара всегда будет равно 1""'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(Выборка.НомерСтроки));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТоварПредставление%", Выборка.ТоварПредставление);
					
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧТовары, Выборка.НомерСтроки, "КоличествоУпаковок");
					
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ДокументОбъект,Поле,"Объект",Отказ);
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Если Не Запрос.Выполнить().Пустой() Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ТекстПоляВыбораТовары = "";
	ТекстПоляВыбораСерии = "";
	ТекстПоляСвязиСоединениеТоварыСерии = "";
	ТекстПоляСвязиСоединениеТоварыВсеТовары = "";
	ТекстПоляСвязиВыгружаемыеКолонкиТовары = "";
	ТекстПоляСвязиВыгружаемыеКолонкиСерии = "";
	
	Для Каждого СтрокаМассива Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляВыбораТовары = ТекстПоляВыбораТовары + "
		|	ТаблицаТоваров." + СтрокаМассива + ",";
		ТекстПоляВыбораСерии = ТекстПоляВыбораСерии + "
		|	ТаблицаСерий." + СтрокаМассива + ",";
		ТекстПоляСвязиСоединениеТоварыСерии = ТекстПоляСвязиСоединениеТоварыСерии + "
	|			И ТаблицаТоваровДляЗапроса."+СтрокаМассива+" = ТаблицаСерийДляЗапроса."+СтрокаМассива;
		ТекстПоляСвязиСоединениеТоварыВсеТовары = ТекстПоляСвязиСоединениеТоварыВсеТовары + "
	|			И ТаблицаТоваров."+СтрокаМассива+" = ТаблицаТоваровДляЗапроса." + СтрокаМассива;
		ТекстПоляСвязиВыгружаемыеКолонкиТовары = ТекстПоляСвязиВыгружаемыеКолонкиТовары + ", " + СтрокаМассива;
		ТекстПоляСвязиВыгружаемыеКолонкиСерии = ТекстПоляСвязиВыгружаемыеКолонкиСерии + ", " + СтрокаМассива;
	КонецЦикла;
	
	Если ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено Тогда
		ИмяПоляКоличество       = "КоличествоУпаковок";
		ИмяПоляЕдиницаИзмерения = "Упаковка";
	Иначе
		ИмяПоляКоличество       = "Количество";
		ИмяПоляЕдиницаИзмерения = "Номенклатура.ЕдиницаИзмерения";
	КонецЕсли;
	
	ТекстПоляСвязиВыгружаемыеКолонкиТовары = ТекстПоляСвязиВыгружаемыеКолонкиТовары + ", " + ИмяПоляКоличество;
	ТекстПоляСвязиВыгружаемыеКолонкиСерии = ТекстПоляСвязиВыгружаемыеКолонкиСерии + ", " + ИмяПоляКоличество;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ " +
	ТекстПоляВыбораТовары + "
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров." + ИмяПоляКоличество + " КАК Количество,
	|	ТаблицаТоваров.СтатусУказанияСерий,
	|	ТаблицаТоваров.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|   ТаблицаТоваров.СтатусУказанияСерий В (1,3,5,7,9)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ " +
	ТекстПоляВыбораТовары + "
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров."  +ИмяПоляЕдиницаИзмерения + " КАК ЕдиницаИзмерения,
	|	ТаблицаТоваров.Характеристика,
	|	СУММА(ТаблицаТоваров.Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаТоваровДляЗапроса
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО " +
	ТекстПоляВыбораТовары + "
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров."  +ИмяПоляЕдиницаИзмерения + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ " +
	ТекстПоляВыбораСерии + "
	|	ТаблицаСерий.Номенклатура,
	|	ТаблицаСерий.Характеристика,
	|	ТаблицаСерий." + ИмяПоляКоличество + " КАК Количество
	|ПОМЕСТИТЬ ТаблицаСерий
	|ИЗ
	|	&ТаблицаСерий КАК ТаблицаСерий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ " +
	ТекстПоляВыбораСерии + "
	|	ТаблицаСерий.Номенклатура,
	|	ТаблицаСерий.Характеристика,
	|	СУММА(ТаблицаСерий.Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаСерийДляЗапроса
	|ИЗ
	|	ТаблицаСерий КАК ТаблицаСерий
	|
	|СГРУППИРОВАТЬ ПО " +
	ТекстПоляВыбораСерии + "
	|	ТаблицаСерий.Номенклатура,
	|	ТаблицаСерий.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0) КАК КоличествоСерий,
	|	ТаблицаТоваровДляЗапроса.Количество КАК КоличествоТоваров,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваровДляЗапроса.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваров.Номенклатура) КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваров.Характеристика) КАК Характеристика
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваровДляЗапроса КАК ТаблицаТоваровДляЗапроса
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСерийДляЗапроса КАК ТаблицаСерийДляЗапроса
	|			ПО ТаблицаТоваровДляЗапроса.Номенклатура = ТаблицаСерийДляЗапроса.Номенклатура
	|				И ТаблицаТоваровДляЗапроса.Характеристика = ТаблицаСерийДляЗапроса.Характеристика "
					+ ТекстПоляСвязиСоединениеТоварыСерии + "
	|		ПО ТаблицаТоваров.Номенклатура = ТаблицаТоваровДляЗапроса.Номенклатура
	|			И ТаблицаТоваров.Характеристика = ТаблицаТоваровДляЗапроса.Характеристика "
					+ ТекстПоляСвязиСоединениеТоварыВсеТовары + "
	|ГДЕ
	|	ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0) <> ТаблицаТоваровДляЗапроса.Количество
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ДокументОбъект[ИмяТЧТовары].Выгрузить(,"НомерСтроки,СтатусУказанияСерий,Номенклатура,Характеристика"+ТекстПоляСвязиВыгружаемыеКолонкиТовары));
	Запрос.УстановитьПараметр("ТаблицаСерий", ДокументОбъект[ИмяТЧСерии].Выгрузить(,"Номенклатура,Характеристика"+ТекстПоляСвязиВыгружаемыеКолонкиСерии));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если ВыдаватьСообщения Тогда
		
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = НСтр("ru = 'Для товара ""%Товар%""  указано по сериям %КоличествоСерий% %ЕдиницаИзмерения%. Необходимо указать %КоличествоТоваров% %ЕдиницаИзмерения%. Исправьте серии.'");
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Товар%",ОбщегоНазначенияРТ.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоСерий%",Выборка.КоличествоСерий);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоТоваров%",Выборка.КоличествоТоваров);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмерения%",Выборка.ЕдиницаИзмерения);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧТовары, Выборка.НомерСтроки, "СтатусыСерийИПодарочныхСертификатов");
			
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				Отказ = Истина;
			#Иначе
				ОбщегоНазначения.СообщитьПользователю(
					ТекстСообщения,
					ДокументОбъект,
					Поле,
					"Объект",
					Отказ);
			#КонецЕсли
			
		КонецЦикла;
	Иначе
		Если Не Запрос.Выполнить().Пустой() Тогда
			
			Пока Выборка.Следующий() Цикл
				
				ТекстСообщения = НСтр("ru = 'Для товара ""%Товар%""  указано по сериям %КоличествоСерий% %ЕдиницаИзмерения%. Необходимо указать %КоличествоТоваров% %ЕдиницаИзмерения%. Исправьте серии.'");
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Товар%",ОбщегоНазначенияРТ.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоСерий%",Выборка.КоличествоСерий);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоТоваров%",Выборка.КоличествоТоваров);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмерения%",Выборка.ЕдиницаИзмерения);
				
				Прервать;
			КонецЦикла;
			
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура проверяет правильность указания серий товаров по статусам в шапке документа.
// Если статусы:
// 1 - количество по сериям не совпадает с количеством товаров (движения по сериям делать не нужно),
// 3 - количество по сериям не совпадает с количеством товаров (нужно делать движения по сериям),
// то выдается ошибка.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - документ в котором нужно проверить указание серий.
//  ПараметрыУказанияСерий - Структура - структура параметров указания серий, возвращаемая соответствующей процедурой модуля
//                           менеджера документа.
//  Отказ - Булево - признак ошибки проверки.
//
Процедура ПроверитьЗаполнениеСерийВШапке(ДокументОбъект,ПараметрыУказанияСерий,Отказ) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументОбъект.СтатусУказанияСерий = 1
		Или ДокументОбъект.СтатусУказанияСерий = 3 Тогда 
		
		ТекстСообщения = НСтр("ru = 'Для товара ""%Товар%"" необходимо указать серии'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Товар%",ОбщегоНазначенияРТ.ПредставлениеНоменклатуры(ДокументОбъект.Номенклатура, ДокументОбъект.Характеристика) );
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Номенклатура","Объект",Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Помещает строки ТЧ "Серии", соответствующие ключевым полям во временное хранилище, для передачи в форму
// редактирования серий.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - основной реквизит формы документа.
//  ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соответствующей процедурой модуля
//                           менеджера документа.
//  ТекущиеДанныеИдентификатор - идентификатор текущей строки товаров в форме документа.
//  УникальныйИдентификаторФормы - уникальный идентификатор формы, к которому привязываются данные, помещенные во
//                                 временное хранилище.
//
// Возвращаемое значение:
//  Структура - структура параметров формы указания серий.
//
Функция ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, Форма) Экспорт
	ТоварВШапке = Ложь;
	Если Не ПараметрыУказанияСерий.Свойство("ТоварВШапке", ТоварВШапке) Тогда
		ТоварВШапке = Ложь;
	КонецЕсли;
	
	УникальныйИдентификаторФормы = Форма.УникальныйИдентификатор;
	
	ТолькоПросмотр = Ложь;
	БлокироватьДанныеФормы = Истина;
	
	Если Не ПараметрыУказанияСерий.Свойство("ТолькоПросмотр",ТолькоПросмотр) Тогда
		ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("БлокироватьДанныеФормы",БлокироватьДанныеФормы) Тогда
		БлокироватьДанныеФормы = Истина;
	КонецЕсли;
	
	// Если нужно будет изменять количество, то данные формы нужно заблокировать.
	// Если заблокировать не удастся - вылетит исключение.
	Если Не ТолькоПросмотр
		И БлокироватьДанныеФормы Тогда
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	ПроверкаДокумента = ПараметрыУказанияСерий.Свойство("ПроверкаТоваровВДокументе");
	
	ИмяТЧТовары  = "";
	ИмяТЧСерии   = "";
	ИмяПоляПомещение = "";
	ЭтоЗаказ = Ложь;
	ИмяКолонкиКоличество         = "";
	ИмяКолонкиКоличествоУпаковок = "";
	
	Если Не ПараметрыУказанияСерий.Свойство("ЭтоЗаказ",ЭтоЗаказ) Тогда
		ЭтоЗаказ = Ложь;
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧТовары", ИмяТЧТовары) Тогда
		ИмяТЧТовары = "Товары";
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧСерии", ИмяТЧСерии) Тогда
		ИмяТЧСерии = "Серии";
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяПоляПомещение", ИмяПоляПомещение) Тогда
		ИмяПоляПомещение = "";
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяКолонкиКоличество", ИмяКолонкиКоличество) Тогда
		ИмяКолонкиКоличество = "Количество";
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяКолонкиКоличествоУпаковок", ИмяКолонкиКоличествоУпаковок) Тогда
		ИмяКолонкиКоличествоУпаковок = "КоличествоУпаковок";
	КонецЕсли;
	
	
	ТекстПоляСвязи = "";
	ТекстВыбораТоваров = "";
	
	Для Каждого СтрокаМассива Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстВыбораТоваров = ТекстВыбораТоваров + "
		|	ТаблицаТоваров."  + СтрокаМассива + ", ";
		
		ТекстПоляСвязи = ТекстПоляСвязи + "," + СтрокаМассива  ;
	КонецЦикла;
	

	РегистрироватьСерии = ОбработкаТабличнойЧастиТоварыКлиентСервер.НеобходимоРегистрироватьСерии(ПараметрыУказанияСерий);
	
	Если ТоварВШапке Тогда
		ТекущиеДанные = Объект;
	Иначе
		ТекущиеДанные = Объект[ИмяТЧТовары].НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	КонецЕсли;

	ЕстьУпаковки = ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено;
	НомераСтрокДокумента = "";
	
	Если ТоварВШапке Тогда
		КоличествоВДокументе = Объект.Количество;
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,Объект);
	Иначе
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,ТекущиеДанные);
		
		НайденныеСтрокиТоваров = Объект[ИмяТЧТовары].НайтиСтроки(СтруктураПоиска);
		
		КоличествоВДокументе = 0;
		Для Каждого СтрокаМассива Из НайденныеСтрокиТоваров Цикл
			ИмяКолонкиКоличество         = ?(ПроверкаДокумента, "КоличествоВДокументе"        , ИмяКолонкиКоличество);
			ИмяКолонкиКоличествоУпаковок = ?(ПроверкаДокумента, "КоличествоУпаковокВДокументе", ИмяКолонкиКоличествоУпаковок);
			
			Если ЕстьУпаковки Тогда
				КоличествоВДокументе = КоличествоВДокументе + СтрокаМассива[ИмяКолонкиКоличествоУпаковок];
			Иначе
				КоличествоВДокументе = КоличествоВДокументе + СтрокаМассива[ИмяКолонкиКоличество];
			КонецЕсли;
			
			НомераСтрокДокумента = НомераСтрокДокумента + Строка(СтрокаМассива.НомерСтроки) + ", ";
		КонецЦикла;
		
		Если Не ПустаяСтрока(НомераСтрокДокумента) Тогда
			НомераСтрокДокумента = Лев(НомераСтрокДокумента, СтрДлина(НомераСтрокДокумента)-2);
		КонецЕсли;
	КонецЕсли;
	
	НайденныеСтрокиСерий = Объект[ИмяТЧСерии].НайтиСтроки(СтруктураПоиска);
	
	ТаблицаСерий = Новый ТаблицаЗначений;
	ТаблицаСерий.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаСерий.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаСерий.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	
	Если ПроверкаДокумента Тогда
		ТаблицаСерий.Колонки.Добавить("КоличествоНеОтгружать", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
		ТаблицаСерий.Колонки.Добавить("КоличествоУпаковокНеОтгружать", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
		ТаблицаСерий.Колонки.Добавить("КоличествоВДокументе", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
		ТаблицаСерий.Колонки.Добавить("КоличествоУпаковокВДокументе", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	КонецЕсли;
	
	Для Каждого СтрокаМассива Из НайденныеСтрокиСерий Цикл
		
		НоваяСтрока = ТаблицаСерий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассива);
		
		Если Не ЕстьУпаковки Тогда
			НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
			Если ПроверкаДокумента Тогда
				НоваяСтрока.КоличествоУпаковокНеОтгружать = НоваяСтрока.КоличествоНеОтгружать;
				Если Не ЕстьУпаковки Тогда
					НоваяСтрока.КоличествоУпаковокВДокументе = НоваяСтрока.КоличествоВДокументе;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТаблицаСерий,УникальныйИдентификаторФормы);
	
	ПараметрыФормыУказанияСерий = Новый Структура("Номенклатура,Характеристика,СтатусУказанияСерий,ХарактеристикиИспользуются"+ТекстПоляСвязи);
	ПараметрыФормыУказанияСерий.Вставить("НомераСтрокДокумента", НомераСтрокДокумента); 
	
	Если НЕ ТоварВШапке Тогда
		АдресВоВременномХранилищеНайденныеСтрокиТоваров = ПоместитьВоВременноеХранилище(НайденныеСтрокиТоваров,УникальныйИдентификаторФормы);
		ПараметрыФормыУказанияСерий.Вставить("НайденныеСтрокиТоваров", АдресВоВременномХранилищеНайденныеСтрокиТоваров);
		
		ПараметрыФормыУказанияСерий.Вставить("НомерСтроки", ТекущиеДанные.НомерСтроки);
		
	КонецЕсли;
	
	Если ТоварВШапке Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыФормыУказанияСерий,Объект);
		Если ЭтоЗаказ Тогда
			ПараметрыФормыУказанияСерий.Вставить("КлючУникальности",1);		
		КонецЕсли;
	Иначе
		ЗаполнитьЗначенияСвойств(ПараметрыФормыУказанияСерий,ТекущиеДанные);
		Если ЭтоЗаказ Тогда
			ПараметрыФормыУказанияСерий.Вставить("КлючУникальности",0);		
			ПараметрыФормыУказанияСерий.УказыватьСерии = Истина;		
		КонецЕсли;
	КонецЕсли;
	
	ИмяПоляМагазин = "";
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяПоляМагазин", ИмяПоляМагазин) Тогда
		ИмяПоляМагазин = "Магазин";
	КонецЕсли;
	
	ПараметрыФормыУказанияСерий.Вставить("АдресВоВременномХранилище",АдресВоВременномХранилище);
	ПараметрыФормыУказанияСерий.Вставить("РегистрироватьСерии",Истина);
	ПараметрыФормыУказанияСерий.Вставить("Магазин",Объект[ИмяПоляМагазин]);
	ПараметрыФормыУказанияСерий.Вставить("Помещение","");
	ПараметрыФормыУказанияСерий.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыФормыУказанияСерий.Вставить("Количество",КоличествоВДокументе);
	ПараметрыФормыУказанияСерий.Вставить("АдресВоВременномХранилище",АдресВоВременномХранилище);
	ПараметрыФормыУказанияСерий.Вставить("СерииВТЧТовары",ИмяТЧСерии = ИмяТЧТовары);
	Попытка
		Если Объект.Свойство("Ссылка") Тогда
			ПараметрыФормыУказанияСерий.Вставить("Регистратор",Объект.Ссылка);
		КонецЕсли;
	Исключение
		СтрокаОшибки = ОписаниеОшибки();
	КонецПопытки;
	ПараметрыФормыУказанияСерий.Вставить("ПараметрыУказанияСерий",ПараметрыУказанияСерий);
	
	ИмяФормы = "Обработка.ПодборСерийВДокументы.Форма.ФормаРегистрацииСерий";
	
	ПараметрыФормыУказанияСерий.Вставить("ИмяФормы", ИмяФормы);
	
	Возврат ПараметрыФормыУказанияСерий;
	
КонецФункции

// Извлекает из временного хранилища серии, указанные в форме редактирования серий, помещает эти строки в ТЧ
// "Серии" документа, перерасчитывает статусы указания серий строках товаров.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - основной реквизит формы документа.
//  ПараметрыУказанияСерий - Структура - структура параметров указания серий, возвращаемая соответствующей процедурой модуля
//                                       менеджера документа.
//  ПараметрыФормыУказанияСерий - Структура - структура, которая была передана в форму редактирования серий как параметры формы.
//
Процедура ОбработатьУказаниеСерий(Объект, ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий, СтруктураДействий = Неопределено) Экспорт
	
	ИмяТЧТовары = "";
	ИмяТЧСерии  = "";
	ЭтоЗаказ    = Ложь;
	ТоварВШапке = Ложь;
	Если Не ПараметрыУказанияСерий.Свойство("ТоварВШапке", ТоварВШапке) Тогда
		ТоварВШапке = Ложь;
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧТовары", ИмяТЧТовары) Тогда
		ИмяТЧТовары = "Товары";
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧСерии", ИмяТЧСерии) Тогда
		ИмяТЧСерии = "Серии";
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("ЭтоЗаказ", ЭтоЗаказ) Тогда
		ЭтоЗаказ = Ложь;
	КонецЕсли;
	
	
	// Если обрабатывается результаты формы подбора серий,
	// то серии целиком загружаются из обработки.
	Если Не ПараметрыФормыУказанияСерий.РегистрироватьСерии Тогда 
		
		СтруктураВозврата = ПолучитьИзВременногоХранилища(ПараметрыФормыУказанияСерий.АдресВоВременномХранилище);
		Объект[ИмяТЧСерии].Загрузить(СтруктураВозврата.ТаблицаСерий);
		
		Если ЭтоЗаказ Тогда
			Если ТоварВШапке Тогда
				Объект.УказыватьСерии = СтруктураВозврата.ТаблицаСерий.Количество() > 0;
			Иначе
				ТаблицаТоваров = СтруктураВозврата.ТаблицаТоваров;
				Для Каждого СтрТабл Из ТаблицаТоваров Цикл
					НомераСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрТабл.НомераСтрокДокумента, ", ");
					
					Для Каждого НомерСтроки Из НомераСтрок Цикл
						
						СтрокаТабличнойЧасти = Объект[ИмяТЧТовары][Число(Формат(НомерСтроки,"ЧГ=0"))-1];
						СтрокаТабличнойЧасти.УказыватьСерии = СтрТабл.УказыватьСерии;
						
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		
		Возврат;
	КонецЕсли;
	
	// Удалим прежние строки серий.
	ТекстПоляСвязи = "";
	
	Для Каждого СтрокаМассива Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляСвязи = ТекстПоляСвязи + "," + СтрокаМассива  ;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
	ЗаполнитьЗначенияСвойств(СтруктураПоиска,ПараметрыФормыУказанияСерий);
	НайденныеСтрокиСерий = Объект[ИмяТЧСерии].НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаМассива Из НайденныеСтрокиСерий Цикл
		
		Объект[ИмяТЧСерии].Удалить(СтрокаМассива);
		
	КонецЦикла;
	
	// Добавим новые строки серий
	ТаблицаСерий = ПолучитьИзВременногоХранилища(ПараметрыФормыУказанияСерий.АдресВоВременномХранилище);
	
	Для Каждого СтрТабл Из ТаблицаСерий Цикл
		
		НоваяСтрока = Объект[ИмяТЧСерии].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ПараметрыФормыУказанияСерий);
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТабл);
	
	КонецЦикла;
	
	Если ИмяТЧСерии = ИмяТЧТовары Тогда
		Возврат;
	КонецЕсли;
	
	
	ЕстьУпаковки = ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено; 
	
	Если ЕстьУпаковки Тогда
		КоличествоСерий = ТаблицаСерий.Итог("КоличествоУпаковок");
	Иначе
		КоличествоСерий = ТаблицаСерий.Итог("Количество");
	КонецЕсли;	
	
	ИмяКолонкиКоличество         = "";
	ИмяКолонкиКоличествоУпаковок = "";
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяКолонкиКоличество", ИмяКолонкиКоличество) Тогда
		ИмяКолонкиКоличество = "Количество";
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяКолонкиКоличествоУпаковок", ИмяКолонкиКоличествоУпаковок) Тогда
		ИмяКолонкиКоличествоУпаковок = "КоличествоУпаковок";
	КонецЕсли;
	
	КоличествоТоваров = ПараметрыФормыУказанияСерий.Количество;
	
	Если ТоварВШапке Тогда
		
		СерииУказаныПолностью = (КоличествоСерий = КоличествоТоваров
								И КоличествоТоваров > 0);
		
		ЧетныйСтатус = Объект.СтатусУказанияСерий % 2 = 0;
		
		Если Не ЧетныйСтатус
			И СерииУказаныПолностью Тогда
			Объект.СтатусУказанияСерий = Объект.СтатусУказанияСерий + 1;
		ИначеЕсли ЧетныйСтатус
			И Не СерииУказаныПолностью Тогда
			Объект.СтатусУказанияСерий = Объект.СтатусУказанияСерий - 1;
		КонецЕсли;
		
	Иначе
		
		НайденныеСтрокиТоваров = Объект[ИмяТЧТовары].НайтиСтроки(СтруктураПоиска);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
		
		Если ПараметрыФормыУказанияСерий.Свойство("ЗначениеВозврата") 
			И НЕ ПустаяСтрока(ПараметрыФормыУказанияСерий.ЗначениеВозврата.АдресИзмененныеРеквизиты) Тогда
			
			ИзмененныеРеквизиты = ПолучитьИзВременногоХранилища(ПараметрыФормыУказанияСерий.ЗначениеВозврата.АдресИзмененныеРеквизиты);
			Если НЕ ИзмененныеРеквизиты = Неопределено Тогда
				Товары = Объект[ИмяТЧТовары];
				Для Каждого ИзмененныйРеквизит Из ИзмененныеРеквизиты Цикл
					
					СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
					
					СтрокаТоваров = Товары[ИзмененныйРеквизит.НомерСтроки-1];
					
					Если ИзмененныйРеквизит.ИмяРеквизита = "Количество" Тогда
						ИмяРеквизита = ИмяКолонкиКоличество;
					ИначеЕсли ИзмененныйРеквизит.ИмяРеквизита = "КоличествоУпаковок" Тогда
						ИмяРеквизита = ИмяКолонкиКоличествоУпаковок;
					ИначеЕсли ИзмененныйРеквизит.ИмяРеквизита = "Упаковка" Тогда
						ИмяРеквизита = "Упаковка";
					КонецЕсли;
					
					СтрокаТоваров[ИмяРеквизита] = ИзмененныйРеквизит.Значение;
					
					Если ИзмененныйРеквизит.ИмяРеквизита = "Упаковка" Тогда
						Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаУпаковку") Тогда
							СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", СтрокаТоваров.Количество);
						КонецЕсли;
					КонецЕсли;
					
					КоличествоДоПересчета = СтрокаТоваров.Количество;
					ОбработатьСтрокуТЧСервер(СтрокаТоваров, СтруктураДействий, КэшированныеЗначения);
					Дельта = СтрокаТоваров.Количество - КоличествоДоПересчета;
					КоличествоТоваров = КоличествоТоваров + Дельта;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли КоличествоСерий <> КоличествоТоваров 
			И СтруктураДействий <> Неопределено
			И СтруктураДействий.Свойство("ОбновлятьКоличествоТоваровПриРегистрацииСерий")
			И СтруктураДействий.ОбновлятьКоличествоТоваровПриРегистрацииСерий Тогда
			
			ЕстьПересчетКоличества = Ложь;
			
			Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц") Тогда
				СтруктураДействий.Удалить("ПересчитатьКоличествоЕдиниц");
				ЕстьПересчетКоличества = Истина;
			КонецЕсли;
			
			Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
				СтруктураДействий.Удалить("ПересчитатьКоличествоУпаковок");
				ЕстьПересчетКоличества = Истина;
			КонецЕсли;
			
			КоличествоКРаспределению = КоличествоСерий - КоличествоТоваров;
			
			Для Каждого СтрокаТоваров Из НайденныеСтрокиТоваров Цикл
				Дельта = КоличествоКРаспределению;
				
				Если ЕстьУпаковки Тогда
					Если -Дельта > СтрокаТоваров[ИмяКолонкиКоличествоУпаковок] Тогда
						Дельта = -СтрокаТоваров[ИмяКолонкиКоличествоУпаковок];
						СтрокаТоваров[ИмяКолонкиКоличествоУпаковок] = 0;
					Иначе
						СтрокаТоваров[ИмяКолонкиКоличествоУпаковок] = СтрокаТоваров[ИмяКолонкиКоличествоУпаковок] + Дельта;
					КонецЕсли;
					
					Если ЕстьПересчетКоличества Тогда
						СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
					КонецЕсли;
				Иначе
					Если -Дельта > СтрокаТоваров[ИмяКолонкиКоличество] Тогда
						Дельта = -СтрокаТоваров[ИмяКолонкиКоличество];
						СтрокаТоваров[ИмяКолонкиКоличество] = 0;
					Иначе
						СтрокаТоваров[ИмяКолонкиКоличество] = СтрокаТоваров[ИмяКолонкиКоличество] + Дельта;
					КонецЕсли;
					
					Если ЕстьПересчетКоличества Тогда
						СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
					КонецЕсли;
				КонецЕсли;
				
				КоличествоТоваров = КоличествоТоваров + Дельта;
				
				КоличествоКРаспределению = КоличествоКРаспределению - Дельта;
				
				ОбработатьСтрокуТЧСервер(СтрокаТоваров, СтруктураДействий, КэшированныеЗначения);
				
				Если КоличествоКРаспределению = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
				
		СерииУказаныПолностью = (КоличествоСерий = КоличествоТоваров И КоличествоТоваров > 0);
		
		Для Каждого СтрокаМассива Из НайденныеСтрокиТоваров Цикл
			
			Если ПараметрыУказанияСерий.Свойство("СправочныйВводСерий")
				И ПараметрыУказанияСерий.СправочныйВводСерий Тогда
				
				Если СерииУказаныПолностью Тогда
					СтрокаМассива.СтатусУказанияСерий = 2;
				Иначе
					СтрокаМассива.СтатусУказанияСерий = 11;
				КонецЕсли;
			Иначе
				ЧетныйСтатус = СтрокаМассива.СтатусУказанияСерий % 2 = 0;
				
				Если Не ЧетныйСтатус
					И СерииУказаныПолностью Тогда
					СтрокаМассива.СтатусУказанияСерий = СтрокаМассива.СтатусУказанияСерий + 1;
				ИначеЕсли ЧетныйСтатус
					И Не СерииУказаныПолностью Тогда
					СтрокаМассива.СтатусУказанияСерий = СтрокаМассива.СтатусУказанияСерий - 1;
				КонецЕсли;
			КонецЕсли;
			
			Если ПараметрыУказанияСерий.Свойство("ЭтоПеремещениеМеждуСкладами")
				И ПараметрыУказанияСерий.ЭтоПеремещениеМеждуСкладами Тогда
				
				ЧетныйСтатус = СтрокаМассива.СтатусУказанияСерийОтправитель % 2 = 0;
				
				Если Не ЧетныйСтатус
					И СерииУказаныПолностью Тогда
					СтрокаМассива.СтатусУказанияСерийОтправитель = СтрокаМассива.СтатусУказанияСерийОтправитель + 1;
				ИначеЕсли ЧетныйСтатус
					И Не СерииУказаныПолностью Тогда
					СтрокаМассива.СтатусУказанияСерийОтправитель = СтрокаМассива.СтатусУказанияСерийОтправитель - 1;
				КонецЕсли;
				
				ЧетныйСтатус = СтрокаМассива.СтатусУказанияСерийПолучатель % 2 = 0;
				
				Если Не ЧетныйСтатус
					И СерииУказаныПолностью Тогда
					СтрокаМассива.СтатусУказанияСерийПолучатель = СтрокаМассива.СтатусУказанияСерийПолучатель + 1;
				ИначеЕсли ЧетныйСтатус
					И Не СерииУказаныПолностью Тогда
					СтрокаМассива.СтатусУказанияСерийПолучатель = СтрокаМассива.СтатусУказанияСерийПолучатель - 1;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Получает количество введенных серий.
//
// Параметры:
//  ПараметрыФормыУказанияСерий - Структура - структура, которая была передана в форму редактирования серий как параметры формы.
//
// Возвращаемое значение:
//  Число - количество серий в таблице.
//
Функция КоличествоСерийВТаблице(ПараметрыФормыУказанияСерий) Экспорт
	
	ТаблицаСерий = ПолучитьИзВременногоХранилища(ПараметрыФормыУказанияСерий.АдресВоВременномХранилище);
	КоличествоСерий = ТаблицаСерий.Итог("КоличествоУпаковок");
	Возврат КоличествоСерий;
	
КонецФункции

// Пересчитывает статусы указания серий в строках товаров, если это необходимо, переподчиняет строки серий
// другим строкам ТЧ "Товары".
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - основной реквизит формы документа.
//  ПараметрыУказанияСерий - Структура - структура параметров указания серий, возвращаемая соответствующей процедурой модуля
//                           менеджера документа.
//  ТекущиеДанныеИдентификатор - УникальныйИдентификатор - идентификатор текущей строки товаров в форме документа.
//  КэшированныеЗначения - Структура - структура кеша реквизитов текущей строки товаров.
//
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения, ЗапускИзРМК = Ложь) Экспорт
	
	ИмяТЧТовары = "";
	ИмяТЧСерии  = "";
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧТовары", ИмяТЧТовары) Тогда
		ИмяТЧТовары = "Товары";
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧСерии", ИмяТЧСерии) Тогда
		ИмяТЧСерии = "Серии";
	КонецЕсли;
	
	Если ЗапускИзРМК Тогда
		ТекущаяСтрока = ТекущаяСтрокаИдентификатор;
	ИначеЕсли ТекущаяСтрокаИдентификатор <> Неопределено Тогда
		ТекущаяСтрока = Объект[ИмяТЧТовары].НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	Иначе
		ТекущаяСтрока = Неопределено; // Значит, строку удалили.
	КонецЕсли;
	
	Если ИмяТЧТовары = ИмяТЧСерии Тогда
		НайденныеСтрокиТоваров = Новый Массив;
		НайденныеСтрокиТоваров.Добавить(ТекущаяСтрока);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий,НайденныеСтрокиТоваров);
		Возврат;
	КонецЕсли;
	
	ТекстПоляСвязи = "";
	
	Для Каждого СтрокаМассива Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляСвязи = ТекстПоляСвязи + "," + СтрокаМассива  ;
	КонецЦикла;
	
	ЕстьУпаковки = ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено; 
	ЕстьПризнакУказанияСерий = ПараметрыУказанияСерий.ПоляСвязи.Найти("УказыватьСерии") <> Неопределено;
	
	
	// Если строка новая (в т.ч. скопированная) - будет кэшировано Неопределено.
	// Тогда не нужно искать строки со старыми значениями.
	Если КэшированныеЗначения <> Неопределено
		И КэшированныеЗначения.Номенклатура <> Неопределено Тогда
		СтруктураПоискаСтарыеЗначения = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаСтарыеЗначения,КэшированныеЗначения);
		
		НайденныеСтрокиТоваров = Объект[ИмяТЧТовары].НайтиСтроки(СтруктураПоискаСтарыеЗначения);
		НайденныеСтрокиСерий = Объект[ИмяТЧСерии].НайтиСтроки(СтруктураПоискаСтарыеЗначения);
	Иначе
		НайденныеСтрокиТоваров = Новый Массив;
		НайденныеСтрокиСерий   = Новый Массив;
	КонецЕсли;
	
	// Если поменялись ключевые поля:
	// - возможно нужно переподчинять серии
	// - статус указания серий нужно пересчитывать в строках по новым ключевым полям и по старым.
	Если ТекущаяСтрока <> Неопределено
		И КэшированныеЗначения <> Неопределено
		И НЕ ОбщегоНазначенияРТКлиентСервер.СтруктурыРавны(КэшированныеЗначения, ТекущаяСтрока, "Номенклатура,Характеристика"+ТекстПоляСвязи) Тогда
		
		ПереподчинитьСерии    = Ложь;
		ПересчитатьКоличество = Ложь;
		// Определим, нужно ли переподчинять серии. Это нужно если:
		// - серии относились только к одной строке
		// - новые и старые ключевые поля поддерживают одну политику учета.
		// Если строки нужно переподчинять, то определим, нужно ли пересчитывать количество.
		Если КэшированныеЗначения.Номенклатура <> Неопределено 
			// Т.к. строк с такими ключевыми полями не осталось больше не осталось, значит такая строка была одна.
			И НайденныеСтрокиТоваров.Количество() = 0 Тогда
			
			// Т.е. изменились поля, от которых политика учета не зависит.
			Если КэшированныеЗначения.Номенклатура = ТекущаяСтрока.Номенклатура Тогда
				Если (Не ЕстьПризнакУказанияСерий 
					Или КэшированныеЗначения.УказыватьСерии = ТекущаяСтрока.УказыватьСерии) Тогда
					ПереподчинитьСерии = Истина;
				Иначе
					ПереподчинитьСерии = Ложь;
				КонецЕсли;
			Иначе // Будем переподчинять, если не поменялся вид номенклатуры.
				ВидНоменклатурыТекущий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КэшированныеЗначения.Номенклатура,"ВидНоменклатуры");
				ВидНоменклатурыНовый   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура, "ВидНоменклатуры");
				
				ПереподчинитьСерии = (ВидНоменклатурыТекущий = ВидНоменклатурыНовый);
			КонецЕсли;
			
			Если ПереподчинитьСерии
				И ЕстьУпаковки
				И КэшированныеЗначения.Упаковка <> ТекущаяСтрока.Упаковка Тогда
				
				ПересчитатьКоличество = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Если строка удалена, то в качестве текущих значений будет передано Неопределено.
		// Тогда не нужно искать строки с новыми значениями.
		СтруктураПоискаНовыеЗначения = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаНовыеЗначения,ТекущаяСтрока);
		
		НайденныеСтрокиТоваровНовые = Объект[ИмяТЧТовары].НайтиСтроки(СтруктураПоискаНовыеЗначения);    
		
		// Добавим строки по новым ключевым полям в массив строк для пересчета статуса указания серий.
		
		// При объединении массивов будем обходить меньший массив.
		Если НайденныеСтрокиТоваров.Количество() < НайденныеСтрокиТоваровНовые.Количество() Тогда
			Для Каждого СтрокаМассива Из НайденныеСтрокиТоваров Цикл
				НайденныеСтрокиТоваровНовые.Добавить(СтрокаМассива);
			КонецЦикла;
			НайденныеСтрокиТоваров = НайденныеСтрокиТоваровНовые;
		Иначе
			Для Каждого СтрокаМассива Из НайденныеСтрокиТоваровНовые Цикл
				НайденныеСтрокиТоваров.Добавить(СтрокаМассива);
			КонецЦикла;
		КонецЕсли;
		
		// Определим массив строк серий, который должен участвовать в пересчете статусов,
		Если ПереподчинитьСерии Тогда
			// Сначала переподчиним серии
			
			Для Каждого СтрокаМассива Из НайденныеСтрокиСерий Цикл
				
				ЗаполнитьЗначенияСвойств(СтрокаМассива,ТекущаяСтрока, "Номенклатура,Характеристика"+ТекстПоляСвязи);
				
				Если ПересчитатьКоличество Тогда
					ПересчитатьКоличествоУпаковокВСтрокеТЧСервер(СтрокаМассива, Новый Структура("ПересчитатьКоличествоУпаковок"), КэшированныеЗначения);
				КонецЕсли;
				
			КонецЦикла;
			
			// Если серии переподчинены, то достаточно произвести поиск по новым полям поиска.
			НайденныеСтрокиСерий = Объект[ИмяТЧСерии].НайтиСтроки(СтруктураПоискаНовыеЗначения);
			
		Иначе	
			НайденныеСтрокиСерийНовые = Объект[ИмяТЧСерии].НайтиСтроки(СтруктураПоискаНовыеЗначения);
			
			// Если серии не переподчинены, то к строкам по старым ключевым полям нужно добавить строки по новым ключевым полям.
			
			// При объединении массивов будем обходить меньший массив.
			Если НайденныеСтрокиСерий.Количество() < НайденныеСтрокиСерийНовые.Количество() Тогда
				Для Каждого СтрокаМассива Из НайденныеСтрокиСерий Цикл
					НайденныеСтрокиСерийНовые.Добавить(СтрокаМассива);
				КонецЦикла;
				НайденныеСтрокиСерий = НайденныеСтрокиСерийНовые;
			Иначе
				Для Каждого СтрокаМассива Из НайденныеСтрокиСерийНовые Цикл
					НайденныеСтрокиСерий.Добавить(СтрокаМассива);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НайденныеСтрокиТоваров.Количество() > 0 Тогда 
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий,НайденныеСтрокиТоваров,НайденныеСтрокиСерий);
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает статус указания серий для товара в шапке документа, если это необходимо, переподчиняет
// строки серий.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - основной реквизит формы документа.
//  ПараметрыУказанияСерий - Структура - структура параметров указания серий, возвращаемая соответствующей процедурой модуля
//                                       менеджера документа.
//  КэшированныеЗначения - Структура -структура кеша реквизитов текущей строки товаров.
//
Процедура ЗаполнитьСтатусыУказанияСерийПриИзмененииТовараВШапке(Объект, Знач ПараметрыУказанияСерий, КэшированныеЗначения) Экспорт
	
	ИмяТЧСерии  = "";
	
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧСерии", ИмяТЧСерии) Тогда
		ИмяТЧСерии = "Серии";
	КонецЕсли;
	
	ТекстПоляСвязи = "";
	
	Для Каждого СтрокаМассива Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляСвязи = ","+ ТекстПоляСвязи + СтрокаМассива  ;
	КонецЦикла;
	
	ЕстьУпаковки = ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено; 
	
	
	// Если поменялись ключевые поля:
	// - возможно нужно переподчинять серии
	// - статус указания серий нужно пересчитывать в строках по новым ключевым полям и по старым.
	
	ИзменилисьКлючевыеПоля = Ложь;
	
	Если КэшированныеЗначения.НоменклатураШапка <> Объект.Номенклатура
		Или  КэшированныеЗначения.ХарактеристикаШапка <> Объект.Характеристика Тогда
		ИзменилисьКлючевыеПоля = Истина;
	Иначе	
		Для Каждого СтрокаМассива Из ПараметрыУказанияСерий.ПоляСвязи Цикл
			Если КэшированныеЗначения[СтрокаМассива+"Шапка"] <> Объект[СтрокаМассива] Тогда
				ИзменилисьКлючевыеПоля = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ПересчитатьСтатус = Ложь;

	Если ИзменилисьКлючевыеПоля Тогда
		
		ПереподчинитьСерии    = Ложь;
		ПересчитатьКоличество = Ложь;
		// Определим, нужно ли переподчинять серии. Это нужно если:
		// - серии относились только к одной строке
		// - новые и старые ключевые поля поддерживают одну политику учета.
		// Если строки нужно переподчинять, то определим, нужно ли пересчитывать количество.
		
		// Т.е. изменились поля, от которых политика учета не зависит.
		Если КэшированныеЗначения.НоменклатураШапка = Объект.Номенклатура Тогда
			ПереподчинитьСерии = Истина;
		Иначе // Будем переподчинять, если не поменялся вид номенклатуры.
			ВидНоменклатурыТекущий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КэшированныеЗначения.НоменклатураШапка,"ВидНоменклатуры");
			ВидНоменклатурыНовый   = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Номенклатура, "ВидНоменклатуры");
			
			ПереподчинитьСерии = (ВидНоменклатурыТекущий = ВидНоменклатурыНовый);
			ПересчитатьСтатус  = Не (ВидНоменклатурыТекущий = ВидНоменклатурыНовый);
		КонецЕсли;
		
		Если ПереподчинитьСерии
			И ЕстьУпаковки
			И КэшированныеЗначения.УпаковкаШапка <> Объект.Упаковка Тогда
			
			ПересчитатьКоличество = Истина;
			
		КонецЕсли;
			
		Если ПереподчинитьСерии Тогда		
			СтруктураПоискаСтарыеЗначения = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
			Для Каждого КлючИЗначение Из СтруктураПоискаСтарыеЗначения Цикл
				СтруктураПоискаСтарыеЗначения[КлючИЗначение.Ключ] = КэшированныеЗначения[КлючИЗначение.Ключ+"Шапка"]	
			КонецЦикла;
			
			НайденныеСтрокиСерий = Объект[ИмяТЧСерии].НайтиСтроки(СтруктураПоискаСтарыеЗначения);
			
			Для Каждого СтрокаМассива Из НайденныеСтрокиСерий Цикл
				
				ЗаполнитьЗначенияСвойств(СтрокаМассива,Объект, "Номенклатура,Характеристика"+ТекстПоляСвязи);
				
				Если ПересчитатьКоличество Тогда
					ПересчитатьКоличествоУпаковокВСтрокеТЧСервер(СтрокаМассива, Новый Структура("ПересчитатьКоличествоУпаковок"), КэшированныеЗначения);
				КонецЕсли;	
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьУпаковки Тогда
		Если КэшированныеЗначения.КоличествоУпаковокШапка <> Объект.КоличествоУпаковок Тогда
			ПересчитатьСтатус = Истина;
		КонецЕсли;
	Иначе
		Если КэшированныеЗначения.КоличествоШапка <> Объект.Количество Тогда
			ПересчитатьСтатус = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПересчитатьСтатус Тогда 
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий,Неопределено,Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает действия после ввода номеров подарочных сертфикатов.
//
// Параметры:
//  НовыеСерийныеНомера - Массив - массив новых серийных номеров для ввода.
//  ДополнительныеПараметры - Структура - дополнительные параметры обработки данных.
//
Процедура ПослеВводаНомеровПодарочныхСертификатов(НовыеСерийныеНомера, ДополнительныеПараметры) Экспорт
	
	ТЧСерийныеНомера = ДополнительныеПараметры.ТЧСерийныеНомера;
	ТекущийКлючСвязи = ДополнительныеПараметры.ТекущийКлючСвязи;
	СтрокаТЧ         = ДополнительныеПараметры.СтрокаТЧ;
	Форма            = ДополнительныеПараметры.Форма;
	ПересчетКоличества = Ложь;
	
	Если ТипЗнч(НовыеСерийныеНомера) = Тип("Массив") Тогда
		НовыйКлючСвязи = ДобавитьСерийныеНомераВТабличнуюЧасть(ТЧСерийныеНомера, НовыеСерийныеНомера, ТекущийКлючСвязи);
		Количество = НовыеСерийныеНомера.Количество();
		
		Форма.Модифицированность          = Истина;
		СтрокаТЧ.КлючСвязиСерийныхНомеров = НовыйКлючСвязи;
		СтрокаТЧ.КоличествоУпаковок       = Количество;
		ПересчетКоличества                = Истина;
		
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ПересчетКоличества", ПересчетКоличества);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыРаботыСПересортицей

// Проверяет выбор номенклатуры при пересортице.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - документ в котором проверяется выбор номенклатуры.
//  Отказ - Булево - признак отказа от проведения операции.
//
Процедура ПроверитьВыборНоменклатуры(ДокументОбъект, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПересортицаТоваровСписания.НомерСтроки,
	|	ПересортицаТоваровСписания.Номенклатура,
	|	&Номенклатура КАК ГрафаПроверки
	|ПОМЕСТИТЬ ПересортицаТоваровСписания
	|ИЗ
	|	&ПересортицаТоваровСписания КАК ПересортицаТоваровСписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПересортицаТоваровОприходования.НоменклатураОприходование КАК Номенклатура,
	|	ПересортицаТоваровОприходования.НомерСтроки,
	|	&НоменклатураОприходование КАК ГрафаПроверки
	|ПОМЕСТИТЬ ПересортицаТоваровОприходования
	|ИЗ
	|	&ПересортицаТоваровОприходования КАК ПересортицаТоваровОприходования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПересортицаТоваровСписания.НомерСтроки,
	|	ПересортицаТоваровСписания.Номенклатура,
	|	ПересортицаТоваровСписания.ГрафаПроверки,
	|	ВЫБОР
	|		КОГДА ПересортицаТоваровСписания.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ТОГДА &Услуга
	|		ИНАЧЕ &ИспользованиеНомеровПодарочныхСертификатов
	|	КОНЕЦ КАК НаименованиеОшибки
	|ИЗ
	|	ПересортицаТоваровСписания КАК ПересортицаТоваровСписания
	|ГДЕ
	|	(ПересортицаТоваровСписания.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ИЛИ ПересортицаТоваровСписания.Номенклатура.ИспользоватьСерийныеНомера)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПересортицаТоваровОприходования.НомерСтроки,
	|	ПересортицаТоваровОприходования.Номенклатура,
	|	ПересортицаТоваровОприходования.ГрафаПроверки,
	|	ВЫБОР
	|		КОГДА ПересортицаТоваровОприходования.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ТОГДА &Услуга
	|		ИНАЧЕ &ИспользованиеНомеровПодарочныхСертификатов
	|	КОНЕЦ
	|ИЗ
	|	ПересортицаТоваровОприходования КАК ПересортицаТоваровОприходования
	|ГДЕ
	|	(ПересортицаТоваровОприходования.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ИЛИ ПересортицаТоваровОприходования.Номенклатура.ИспользоватьСерийныеНомера)";
	
	Запрос.УстановитьПараметр("Номенклатура", "Номенклатура");
	Запрос.УстановитьПараметр("НоменклатураОприходование", "НоменклатураОприходование");
	Запрос.УстановитьПараметр("Услуга", "Услуга");
	Запрос.УстановитьПараметр("ИспользованиеНомеровПодарочныхСертификатов", "Использование номеров подарочных сертификатов");
	
	Запрос.УстановитьПараметр("ПересортицаТоваровСписания", ДокументОбъект["Товары"].Выгрузить(,"НомерСтроки,Номенклатура"));
	Запрос.УстановитьПараметр("ПересортицаТоваровОприходования", ДокументОбъект["Товары"].Выгрузить(,"НомерСтроки,НоменклатураОприходование"));
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	Для каждого СтрокаТЗ Из ТаблицаЗапроса Цикл
		
		Если СтрокаТЗ.ГрафаПроверки = "НоменклатураОприходование" Тогда
			Если СтрокаТЗ.НаименованиеОшибки = "Услуга" Тогда
				ТекстСообщения = НСтр("ru = 'В строке %1 номенклатура оприходования %2 указана услуга'"); 
			Иначе
				ТекстСообщения = НСтр("ru = 'В строке %1 по номенклатуре оприходования %2 ведется учет по номерам подарочных сертификатов'"); 
			КонецЕсли;
		Иначе
			Если СтрокаТЗ.НаименованиеОшибки = "Услуга" Тогда
				ТекстСообщения = НСтр("ru = 'В строке %1 номенклатура списания %2 указана услуга'"); 
			Иначе
				ТекстСообщения = НСтр("ru = 'В строке %1 по номенклатуре оприходования %2 ведется учет по номерам подарочных сертификатов'"); 
			КонецЕсли;
		КонецЕсли;
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения,
			СтрокаТЗ.НомерСтроки,
			СтрокаТЗ.Номенклатура);
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТЗ.НомерСтроки, СтрокаТЗ.ГрафаПроверки);
		
		ОбщегоНазначения.СообщитьПользователю(
			ТекстСообщения,
			ДокументОбъект,
			Поле,
			,
			Отказ);

		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область АгентскоеВознаграждение

// Пересчитывает цену с учетом агентского вознаграждения.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПересчитатьЦенуСУчетомАгентскогоВознаграждения(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	ПараметрыЗаполнения = Неопределено;
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСУчетомАгентскогоВознаграждения", ПараметрыЗаполнения) Тогда
		
		Если ЗначениеЗаполнено(ПараметрыЗаполнения) И ПараметрыЗаполнения.Цена = ТекущаяСтрока.Цена Тогда
			// Выделение не требуется.
			Возврат;
		КонецЕсли;
		
		ДанныеАгентскогоДоговора = ОбработкаТабличнойЧастиТоварыКлиентСервер.ДанныеАгентскогоДоговора(ТекущаяСтрока);
		Если ЗначениеЗаполнено(ДанныеАгентскогоДоговора) И ДанныеАгентскогоДоговора.ВознаграждениеВключеноВСтоимость Тогда
			Цена = 0;
			ЦенаСАгентскимВознаграждением = ТекущаяСтрока.Цена;
			ДенежныеСредстваКлиентСервер.РассчитатьПоказателиАгентскогоПлатежа(ДанныеАгентскогоДоговора, Цена, ЦенаСАгентскимВознаграждением);
			
			ТекущаяСтрока.Цена = Цена;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ВыделитьАгентскоеВознаграждение(Объект, Форма, СтруктураДействий = Неопределено, ТекущаяСтрока = Неопределено, КэшированныеЗначения = Неопределено) Экспорт
	
	ИспользоватьАгентскиеПлатежиИРазделениеВыручки = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ИспользоватьАгентскиеПлатежиИРазделениеВыручки") Тогда
		ИспользоватьАгентскиеПлатежиИРазделениеВыручки = Форма.ИспользоватьАгентскиеПлатежиИРазделениеВыручки;
	КонецЕсли;
	Если НЕ ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		Возврат;
	КОнецЕсли;
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
	КонецЕсли;
	
	КоллекцияДействийСоСтроками = Новый Соответствие;
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ВыделитьАгентскоеВознаграждениеВТаблице(Объект, СтруктураДействий, ТекущаяСтрока, КоллекцияДействийСоСтроками);
	Для Каждого ЭлементКоллекции Из КоллекцияДействийСоСтроками Цикл
		// Выполним действия со строкой.
		ОбработатьСтрокуТЧСервер(
			ЭлементКоллекции.Ключ,
			ЭлементКоллекции.Значение,
			КэшированныеЗначения);
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьРасчетныеПоляАгентскогоВознаграждения(Объект, ТекущаяСтрока);
	
	Если ТекущаяСтрока = Неопределено ИЛИ СтруктураДействий.Свойство("ЗаполнитьДоговорПлатежногоАгента") Тогда
		ОбработкаТабличнойЧастиТоварыКлиентСервер.УстановитьВидимостьДоступностьЭлементовАгентскогоВознаграждения(Форма, Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеЭлементамиАгентскогоВознаграждения(Форма, Объект) Экспорт
	
	ИспользоватьАгентскиеПлатежиИРазделениеВыручки = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ИспользоватьАгентскиеПлатежиИРазделениеВыручки") Тогда
		ИспользоватьАгентскиеПлатежиИРазделениеВыручки = Форма.ИспользоватьАгентскиеПлатежиИРазделениеВыручки;
	КонецЕсли;
	Если НЕ ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
		Возврат;
	КОнецЕсли;
	
	// Заполнить данные договора.
	ЗаполнитьДанныеАгентскогоДоговора(Объект);
	
	// Заполнить расчетные поля.
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьРасчетныеПоляАгентскогоВознаграждения(Объект);
	
	// Установить видимость.
	ОбработкаТабличнойЧастиТоварыКлиентСервер.УстановитьВидимостьДоступностьЭлементовАгентскогоВознаграждения(Форма, Объект);
	
КонецПроцедуры

#КонецОбласти

#Область Прочие

// Очищает колонки табличной части.
//
// Параметры:
//  Форма - Форма - форма родитель из которой вызывается процедура.
//  ИмяТабличной части - Строка - табличная часть для очистки.
//  ИменаКолонок - Массив - массив имен колонок.
//
Процедура ОчиститьКолонкиТабличнойЧасти(Форма, ИмяТабличнойЧасти, ИменаКолонок) Экспорт

	ТзТовары = Форма.Объект.Товары.Выгрузить();
	ТзТовары.ЗаполнитьЗначения(0, ИменаКолонок);
	Форма.Объект.Товары.Загрузить(ТзТовары);

КонецПроцедуры

// Очищает табличную часть.
//
// Параметры:
//  Форма - Форма - форма родитель из которой вызывается процедура.
//  ИмяТабличной части - Строка - табличная часть для очистки.
//
Процедура ОчиститьТабличнуюЧасть(Форма, ИмяТабличнойЧасти) Экспорт

	Форма.Объект[ИмяТабличнойЧасти].Очистить();

КонецПроцедуры

// Получает сумму документа без подарочных сертификатов.
//
// Параметры:
//  Объект - ДокументОбъект - докумет по которому необходимо получить сумму.
//  ИмяТЧ - Строка - имя табличной части для получения суммы.
//
// Возвращаемое значение:
//  Число - сумма документа.
//
Функция СуммаДокументаБезПодарочныхСертификатов(Объект, ИмяТЧ = "Товары") Экспорт
	
	СуммаДокументаБезПодарочныхСертификатов = Объект[ИмяТЧ].Итог("Сумма");
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.ПодарочныйСертификат);
	
	СтрокиПодарочныхСертификатов = Объект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаПодарочногоСертификата Из СтрокиПодарочныхСертификатов Цикл
	
		СуммаДокументаБезПодарочныхСертификатов = СуммаДокументаБезПодарочныхСертификатов - СтрокаПодарочногоСертификата.Сумма;
	
	КонецЦикла;
	
	Возврат СуммаДокументаБезПодарочныхСертификатов;
	
КонецФункции

// Проверяет соответствия флага и типа номенклатуры в строке.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ПроверитьФлагРезервированияВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ПроверитьФлагРезервирования") Тогда
		
		Если ТекущаяСтрока.Резервировать И ТекущаяСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
			
			ТекущаяСтрока.Резервировать = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьФлагРезервированияВСтрокеТЧСервер()

// Очищает данные по заказу.
//
// Параметры:
//  ТекущаяСтрока - Структура - строка табличной части товаров для обработки.
//  СтруктураДействий - Структура - структура действий к выполнению при изменении реквизитов.
//  КэшированныеЗначения - Структура - структура данных кэшированных значений.
//
Процедура ОчиститьДанныеПоЗаказуСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ОчиститьДанныеПоЗаказу") Тогда
		
		ТекущаяСтрока.КодСтроки = 0;
		ТекущаяСтрока.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
		
	КонецЕсли;

КонецПроцедуры

// Проверяет соответствия резервирования и типа номенклатуры.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - документ в котором проверяется соответствие резервирования.
//  ИмяТабличнойЧасти - Строка - имя табличной части для проверки соответствия.
//  Отказ - Булево - признак отказа от выполнения операции.
//
Процедура ПроверитьСоответствиеФлагаРезервированиеИТипаНоменклатуры(
	ДокументОбъект, 
	ИмяТабличнойЧасти, 
	Отказ) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Резервировать
	|ПОМЕСТИТЬ ТабТоварыВСЕ
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабТовары.Номенклатура.Наименование КАК Наименование,
	|	ТабТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТабТоварыВСЕ КАК ТабТовары
	|ГДЕ
	|	ТабТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|	И ТабТовары.Резервировать
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Товары", ДокументОбъект[ИмяТабличнойЧасти].Выгрузить());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В строке №%1 резервируется Номенклатура: %2, являющаяся услугой'"),
			Выборка.НомерСтроки,
			Выборка.Наименование);
		ОбщегоНазначения.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			ИмяТабличнойЧасти+"[" + (Выборка.НомерСтроки - 1) + "].Номенклатура" ,
			,
			Отказ);
			
	КонецЦикла;

	

КонецПроцедуры

// Заполняет признак "ЕстьПродажиПоСтроке", используемый при интерактивной работе с заказами.
//
// Параметры:
//  Заказ - ДокументОбъект.ЗаказПокупателя - заказ в котором необходимо заполнить признак продажи по строке.
//  ТаблицаФормы - ДанныеФормыКоллекция - данные текущей формы.
//
Процедура ЗаполнитьПризнакЕстьПродажиПоСтроке(Заказ, ТаблицаФормы) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРезервированиеПоЗаказамПокупателей") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяТовары.НомерСтроки,
	|	ЗаказПокупателяТовары.КодСтроки КАК КодСтроки
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаТоваров КАК ЗаказПокупателяТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыПокупателей.КодСтроки КАК КодСтроки
	|ПОМЕСТИТЬ ТаблицаРегистра
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей КАК ЗаказыПокупателей
	|ГДЕ
	|	ЗаказыПокупателей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ЗаказыПокупателей.Заказано > 0
	|	И ЗаказыПокупателей.Заказ = &Заказ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.КодСтроки,
	|	ВЫБОР
	|		КОГДА ТаблицаРегистра.КодСтроки ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьПродажиПоСтроке
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРегистра КАК ТаблицаРегистра
	|		ПО ТаблицаДокумента.КодСтроки = ТаблицаРегистра.КодСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",  ТаблицаФормы.Выгрузить(,"НомерСтроки,КодСтроки"));
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	ТаблицаПризнаков = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрТабл Из ТаблицаФормы Цикл
		
		СтрокаПризнаков = ТаблицаПризнаков[СтрТабл.НомерСтроки-1];
		
		СтрТабл.ЕстьПродажиПоСтроке = СтрокаПризнаков.ЕстьПродажиПоСтроке;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет заполнения поля "Доля стоимости" в документе Сборка товаров.
//
// Параметры:
//  Объект - ДокументОбъект.СборкаТоваров - документ в котором проверяется заполнение поля "Доля стоимости".
//  МассивНепроверяемыхРеквизитов - Массив - массив игнорируемых реквизитов для проверки.
//  Отказ - Булево - признак отказа от выполнения операции.
//  ПараметрыПроверки - Структура - структура параметров проверки данных.
//
Процедура ПроверитьЗаполнениеДолейСтоимости(Объект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки = Неопределено) Экспорт
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.ДоляСтоимости");
	МетаданныеОбъекта = Объект.Метаданные();
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ СтрокиСОшибками
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.ДоляСтоимости = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиСОшибками.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	СтрокиСОшибками КАК СтрокиСОшибками
	|ГДЕ
	|	НЕ СтрокиСОшибками.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", Объект.Товары.Выгрузить(,"НомерСтроки,Номенклатура,ДоляСтоимости"));
	
	ШаблонСообщения = НСтр("ru='Не заполнена колонка ""%Доля стоимости%"" в строке %НомерСтроки% списка ""%ТаблицаТовары%"".'");
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПредставлениеТЧ            = МетаданныеОбъекта.ТабличныеЧасти.Товары.Синоним;
	ПредставлениеДоляСтоимости = МетаданныеОбъекта.ТабличныеЧасти.Товары.Реквизиты.ДоляСтоимости.Синоним;
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Доля стоимости%", ПредставлениеДоляСтоимости);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "ДоляСтоимости");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Возврашает структуру параметров заполнения склада продажи.
//
// Параметры:
//  Объект - ДокументСсылка - объект по которому заполняется структура склада продажи.
//
// Возвращаемое значение:
//  Структура - структура параметров заполнения склада продажи.
//
Функция СтруктураЗаполненияСкладаПродажиВСтрокеТЧ(Объект) Экспорт
	
	СтруктураПараметровЗаполнения =
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияПоОбъекту(Объект);
	
	Если ЗначениеЗаполнено(СтруктураПараметровЗаполнения.КассаККМ)
		И (НЕ ЗначениеЗаполнено(СтруктураПараметровЗаполнения.Магазин)
		ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметровЗаполнения.РабочееМесто)
		ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметровЗаполнения.Организация)) Тогда
		
		ДанныеККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СтруктураПараметровЗаполнения.КассаККМ,
			"Магазин, РабочееМесто, Владелец");
		
		ЗаполнитьЗначенияСвойств(СтруктураПараметровЗаполнения, ДанныеККМ);
		
		СтруктураПараметровЗаполнения.Организация = ДанныеККМ.Владелец;
	КонецЕсли;
	
	Возврат СтруктураПараметровЗаполнения;
КонецФункции

// Удаляет несвязанные серийные номера.
//
// Параметры:
//  Форма - Форма - форма родитель на которой необходимо произвести удаление.
//
Процедура УдалитьНесвязанныеСерийныеНомера(Форма) Экспорт
	
	КлючиСерийныхНомеров = Форма.Объект.СерийныеНомера.Выгрузить();
	КлючиСерийныхНомеров.Свернуть("КлючСвязиСерийныхНомеров");
	Для Каждого СтрокаКлюча Из КлючиСерийныхНомеров Цикл
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("КлючСвязиСерийныхНомеров", СтрокаКлюча.КлючСвязиСерийныхНомеров);
		СтрокиТоваров = Форма.Объект.Товары.НайтиСтроки(СтруктураКлюча);
		Если СтрокиТоваров.Количество() = 0 Тогда
			УдаляемыеСтроки = Форма.Объект.СерийныеНомера.НайтиСтроки(СтруктураКлюча);
			Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
				Форма.Объект.СерийныеНомера.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Удаляет несвязанные акцизы.
//
// Параметры:
//  Форма - Форма - форма родитель на которой необходимо произвести удаление.
//
Процедура УдалитьНесвязанныеАкцизы(Форма) Экспорт
	
	ШаблонПоискаКлюч = Новый Структура("КлючСвязи");
	ШаблонПоискаДанные = ИнтеграцияИСРТКлиентСервер.ПоляДляПоискаМаркированнойПродукции();
	
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаАкцизныхМарок Из Форма.Объект.АкцизныеМарки Цикл
		Если ЗначениеЗаполнено(СтрокаАкцизныхМарок.КлючСвязи) Тогда
			ПараметрыПоиска = ШаблонПоискаКлюч;
			ЗаполнитьЗначенияСвойств(ПараметрыПоиска, СтрокаАкцизныхМарок);
		Иначе
			ПараметрыПоиска = ШаблонПоискаДанные;
			ДанныеМарки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаАкцизныхМарок.ШтрихкодУпаковки, "Номенклатура, Характеристика, ТипУпаковки");
			ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ДанныеМарки);
		КонецЕсли;
		
		СтрокиТоваров = Форма.Объект.Товары.НайтиСтроки(ПараметрыПоиска);
		Если СтрокиТоваров.Количество() = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаАкцизныхМарок);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		Форма.Объект.АкцизныеМарки.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет наличие ошибок данных ЕГАИС.
//
// Параметры:
//  ТаблицаФормы - ДанныеФормыКоллекция - таблица формы в которой необходимо заполнить наличие ошибок данных ЕГАИС.
//
Процедура ЗаполнитьНаличиеОшибокДанныхЕГАИС(ТаблицаФормы) Экспорт
	
	Если ТаблицаФормы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаФормы Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Если СтрокаТаблицы.ХарактеристикиИспользуются Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицы.Характеристика)  Тогда
					СтрокаТаблицы.ЕстьОшибкиВЗаполненииСтроки = Ложь;
				Иначе
					СтрокаТаблицы.ЕстьОшибкиВЗаполненииСтроки = Истина;
				КонецЕсли;
			Иначе
				СтрокаТаблицы.ЕстьОшибкиВЗаполненииСтроки = Ложь;
			КонецЕсли;
		Иначе
			СтрокаТаблицы.ЕстьОшибкиВЗаполненииСтроки = Истина;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

// Заполняет необходимость ввода акцизной марки.
//
// Параметры:
//  ТаблицаФормы - ДанныеФормыКоллекция - таблица формы в которой необходимо заполнить необходимость ввода акцизной марки.
//  ДополнительныеПараметры - Структура - дополнительные параметры выполнения операции.
//
Процедура ЗаполнитьНеобходимостьВводаАкцизнойМарки(ТаблицаФормы, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТаблицаФормы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемаяДата = ТекущаяДатаСеанса();
	УчитыватьОбувьТабак = Истина;
	
	Если НЕ ДополнительныеПараметры = Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("Дата") Тогда
			ПроверяемаяДата = ДополнительныеПараметры.Дата;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("УчитыватьОбувьТабак") Тогда 
			УчитыватьОбувьТабак = ДополнительныеПараметры.УчитыватьОбувьТабак;
		КонецЕсли;
	КонецЕсли;
	
	ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = Неопределено;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("Магазин") Тогда
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("Организация") И ЗначениеЗаполнено(ДополнительныеПараметры.Организация) Тогда
			ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(
				ДополнительныеПараметры.Организация, ДополнительныеПараметры.Магазин, ПроверяемаяДата);
		КонецЕсли;
	Иначе
		ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(Неопределено, Неопределено, ПроверяемаяДата);
	КонецЕсли;
	
	Если ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = Неопределено Тогда
		ТаблицаЗначений = ТаблицаФормы.Выгрузить();
		Если ТаблицаЗначений.Колонки.Найти("Организация") = Неопределено Тогда
			ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(Неопределено, Неопределено, ПроверяемаяДата);
		Иначе
			ТаблицаОрганизаций = ТаблицаЗначений.Скопировать(, "Организация");
			ТаблицаОрганизаций.Свернуть("Организация");
			МассивОрганизацийИспользующихРозничныеПродажиЕГАИС = Новый Массив();
			Для Каждого СтрокаОрганизации Из ТаблицаОрганизаций Цикл
				Если ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(СтрокаОрганизации.Организация, ДополнительныеПараметры.Магазин, ПроверяемаяДата) Тогда
					МассивОрганизацийИспользующихРозничныеПродажиЕГАИС.Добавить(СтрокаОрганизации.Организация);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ОперацияСДенежнымиСредствами = Ложь;
	
	Если НЕ ДополнительныеПараметры = Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("ОперацияСДенежнымиСредствами") Тогда
			ОперацияСДенежнымиСредствами = ДополнительныеПараметры.ОперацияСДенежнымиСредствами;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = Ложь
		ИЛИ ОперацияСДенежнымиСредствами Тогда
		Для Каждого СтрТабл Из ТаблицаФормы Цикл
			СтрТабл.НеобходимостьВводаАкцизнойМарки = Ложь;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	" + ?(ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = Неопределено, "ТаблицаТоваров.Организация, ", "") + "
	|	ТаблицаТоваров.Номенклатура
	|ПОМЕСТИТЬ ТаблицаЗапроса
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапроса.НомерСтроки,
	|	ТаблицаЗапроса.Номенклатура,
	|	" + ?(ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = Неопределено, "ТаблицаЗапроса.Организация, ", "") + "
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция), ЛОЖЬ)
	|				ИЛИ ЕСТЬNULL(ВидыНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция), ЛОЖЬ)
	|			ТОГДА &УчитыватьОбувьТабак
	|		КОГДА ЕСТЬNULL(ВидыАлкогольнойПродукцииЕГАИС.Маркируемый, ЛОЖЬ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ 
	|			ЛОЖЬ
	|		КОНЕЦ
 	|	КАК НеобходимостьВводаАкцизнойМарки
	|ИЗ
	|	ТаблицаЗапроса КАК ТаблицаЗапроса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукцииЕГАИС
	|		ПО (ВидыАлкогольнойПродукцииЕГАИС.Ссылка = ТаблицаЗапроса.Номенклатура.ВидАлкогольнойПродукцииЕГАИС)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО (ВидыНоменклатуры.Ссылка = ТаблицаЗапроса.Номенклатура.ВидНоменклатуры)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаЗапроса.НомерСтроки";
	
	Если ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = Неопределено Тогда
		Запрос.УстановитьПараметр("ТаблицаТоваров",  ТаблицаФормы.Выгрузить(,"НомерСтроки,Номенклатура, Организация"));
	Иначе
		Запрос.УстановитьПараметр("ТаблицаТоваров",  ТаблицаФормы.Выгрузить(,"НомерСтроки,Номенклатура"));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("УчитыватьОбувьТабак", УчитыватьОбувьТабак);
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицыФормы Из ТаблицаФормы Цикл
		
		Если СтрокаТаблицыФормы.Свойство("ОсобенностиУчетаНоменклатуры") И 
			Не ЗначениеЗаполнено(СтрокаТаблицыФормы.ОсобенностиУчетаНоменклатуры) Тогда 
			
			СтрокаТаблицыФормы.НеобходимостьВводаАкцизнойМарки = Ложь;
			
		Иначе
			
			СтрокаРезультата = ТаблицаРезультата[СтрокаТаблицыФормы.НомерСтроки-1];
			
			Если ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = Неопределено Тогда
				
				Если МассивОрганизацийИспользующихРозничныеПродажиЕГАИС.Найти(СтрокаТаблицыФормы.Организация) = Неопределено Тогда
					
					СтрокаТаблицыФормы.НеобходимостьВводаАкцизнойМарки = Ложь;
					
				Иначе
					
					СтрокаТаблицыФормы.НеобходимостьВводаАкцизнойМарки = СтрокаРезультата.НеобходимостьВводаАкцизнойМарки;
					
				КонецЕсли;
			Иначе
				
				СтрокаТаблицыФормы.НеобходимостьВводаАкцизнойМарки = СтрокаРезультата.НеобходимостьВводаАкцизнойМарки;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет необходимость ввода справки на алкоголь.
//
// Параметры:
//  ТаблицаФормы - ДанныеФормыКоллекция - таблица формы в которой необходимо заполнить необходимость ввода акцизной марки.
//  ДополнительныеПараметры - Структура - дополнительные параметры выполнения операции.
//
Процедура ЗаполнитьНеобходимостьВводаСправкиНаАлкоголь(ТаблицаФормы, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПроверяемаяДата = ТекущаяДатаСеанса();
	
	Если НЕ ДополнительныеПараметры = Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("Дата") Тогда
			ПроверяемаяДата = ДополнительныеПараметры.Дата;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ИнтеграцияЕГАИСРТ.НужноРаботатьСЕГАИС(ПроверяемаяДата) Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаФормы Цикл
			СтрокаТаблицы.НеобходимостьВводаСправкиНаАлкоголь = Ложь;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Номенклатура
	|ПОМЕСТИТЬ ТаблицаЗапроса
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапроса.НомерСтроки,
	|	ТаблицаЗапроса.Номенклатура,
	|	ЕСТЬNULL(ТаблицаЗапроса.Номенклатура.АлкогольнаяПродукция, ЛОЖЬ) КАК НеобходимостьВводаСправкиНаАлкоголь
	|ИЗ
	|	ТаблицаЗапроса КАК ТаблицаЗапроса
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаЗапроса.НомерСтроки";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",  ТаблицаФормы.Выгрузить(,"НомерСтроки,Номенклатура"));
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрТабл Из ТаблицаФормы Цикл
		
		СтрокаРезультата = ТаблицаРезультата[СтрТабл.НомерСтроки-1];
		
		СтрТабл.НеобходимостьВводаСправкиНаАлкоголь = СтрокаРезультата.НеобходимостьВводаСправкиНаАлкоголь;
		
	КонецЦикла;
	

КонецПроцедуры

// Проверяет необходимость ввода кода акцизной марки.
// 
// Параметры:
//  ТекущаяСтрока - проверяемая строка табличной части;
//  СтруктураДействий - Структура - содержит перечень действий со строкой табличной части;
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке строки таблицы.
//
Процедура ПроверитьНеобходимостьВводаАкцизнойМарки(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Перем СтруктураПараметровДействия, ОперацияОтражаетсяВЕГАИС;
	
	Если СтруктураДействий.Свойство("ПроверитьНеобходимостьВводаАкцизнойМарки", СтруктураПараметровДействия) Тогда
		
		Если ТипЗнч(СтруктураПараметровДействия) = Тип("Структура") 
			И СтруктураПараметровДействия.Свойство("ОбработатьБезМаркировки") Тогда 
			
			ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки = Ложь;
			
		ИначеЕсли ТипЗнч(СтруктураПараметровДействия) = Тип("Структура") 
			И СтруктураПараметровДействия.Свойство("ОперацияОтражаетсяВЕГАИС", ОперацияОтражаетсяВЕГАИС)
			И НЕ ОперацияОтражаетсяВЕГАИС Тогда
			ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки = Ложь;
			
		Иначе 
			
			ПроверяемаяДата = ТекущаяДатаСеанса();
			
			Если СтруктураПараметровДействия <> Неопределено Тогда
				Если СтруктураПараметровДействия.Свойство("Дата") Тогда
					ПроверяемаяДата = СтруктураПараметровДействия.Дата;
				КонецЕсли;
			КонецЕсли;
			
			ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = Неопределено;
			Если ТипЗнч(СтруктураПараметровДействия) = Тип("Структура") И СтруктураПараметровДействия.Свойство("Магазин") Тогда
				
				МагазинПроверки = СтруктураПараметровДействия.Магазин;
				
				Если СтруктураПараметровДействия.Свойство("Организация") И ЗначениеЗаполнено(СтруктураПараметровДействия.Организация) Тогда
					ОрганизацияПроверки = СтруктураПараметровДействия.Организация;
				ИначеЕсли ТекущаяСтрока.Свойство("Организация") И ЗначениеЗаполнено(ТекущаяСтрока.Организация) Тогда
					ОрганизацияПроверки = ТекущаяСтрока.Организация;
				Иначе
					ОрганизацияПроверки = Неопределено;
				КонецЕсли;
				
				Если НЕ ОрганизацияПроверки = Неопределено Тогда
					ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(
						ОрганизацияПроверки, 
						МагазинПроверки, 
						ПроверяемаяДата);
				КонецЕсли;
				
			КонецЕсли;
			
			
			Если ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = Неопределено Тогда
				ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(
					Неопределено, 
					Неопределено, 
					ПроверяемаяДата);
			КонецЕсли;
			
			ОперацияСДенежнымиСредствами = Ложь;
			
			Если НЕ СтруктураПараметровДействия = Неопределено Тогда
				Если СтруктураПараметровДействия.Свойство("ОперацияСДенежнымиСредствами") Тогда
					ОперацияСДенежнымиСредствами = СтруктураПараметровДействия.ОперацияСДенежнымиСредствами;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ОперацияСДенежнымиСредствами Тогда
				
				ДанныеПродукции = ИнтеграцияИС.СвойстваМаркируемойПродукции(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика);
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ОсобенностиУчетаНоменклатуры") Тогда 
					ТекущаяСтрока.ОсобенностиУчетаНоменклатуры = ИнтеграцияИСРТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ДанныеПродукции.ВидПродукции);
				КонецЕсли;
				
				Если (ИспользуетсяРегистрацияРозничныхПродажВЕГАИС
					И ДанныеПродукции.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная)
					ИЛИ ИнтеграцияИС.ИспользуетсяМаркируемаяПродукция() Тогда
					ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки = ДанныеПродукции.МаркируемаяПродукция;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Заполняет GTIN в строке.
//
// Параметры:
//  ТекущаяСтрока - Структура - структура со свойствами строки документа.
//  СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//  КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ЗаполнитьGTINВСтроке(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	Перем Параметры;
	
	Если СтруктураДействий.Свойство("ЗаполнитьGTINВСтроке", Параметры) Тогда
		Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ШтрихкодыНоменклатуры.Владелец КАК Номенклатура,
			|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
			|	ШтрихкодыНоменклатуры.Штрихкод КАК GTIN
			|ИЗ
			|	РегистрСведений.Штрихкоды КАК ШтрихкодыНоменклатуры
			|ГДЕ
			|	ШтрихкодыНоменклатуры.Владелец = &Номенклатура
			|	И ВЫБОР
			|			КОГДА &ХарактеристикаЗаполнена
			|				ТОГДА ШтрихкодыНоменклатуры.Характеристика = &Характеристика
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ";
		Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", ТекущаяСтрока.Характеристика);
		Запрос.УстановитьПараметр("ХарактеристикаЗаполнена", ЗначениеЗаполнено(ТекущаяСтрока.Характеристика));
		ТаблицаGTIN = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаGTIN.Количество() = 1 Тогда
			СтрокаТаблицы = ТаблицаGTIN.Получить(0);
			Если МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(СтрокаТаблицы.GTIN) Тогда
				ТекущаяСтрока.GTIN = СтрокаТаблицы.GTIN;
			КонецЕсли;
		ИначеЕсли ТаблицаGTIN.Найти(ТекущаяСтрока.GTIN, "GTIN") <> Неопределено Тогда
			// ничего не делаем, GTIN подходит
		Иначе
			ТекущаяСтрока.GTIN = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты КиЗ.
//
//  ТекущаяСтрока - Структура - структура со свойствами строки документа.
//  СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//  КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ЗаполнитьКиЗВСтрокеСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьКиЗВСтроке", СтруктураПараметровДействия) Тогда
		Если ОбщегоНазначенияРТКлиентСервер.ЕстьРеквизитОбъекта(ТекущаяСтрока, "НоменклатураКиЗ") Тогда
			ТекущаяСтрока.НоменклатураКиЗ   = СтруктураПараметровДействия.НоменклатураКиЗ;
			ТекущаяСтрока.ХарактеристикаКиЗ = СтруктураПараметровДействия.ХарактеристикаКиЗ;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет признак характеристики используются.
//
// Параметры:
//  ТекущаяСтрока - Структура - структура со свойствами строки документа.
//  СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//  КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ЗаполнитьПризнакХарактеристикиИспользуются(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	Перем Параметры;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются", Параметры) Тогда
		
		Номенклатура = Параметры.Номенклатура;
		ХарактеристикиИспользуются = Параметры.ХарактеристикиИспользуются;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
		|				ИЛИ Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИспользованиеХарактеристик
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ТекущаяСтрока[Номенклатура]);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			ТекущаяСтрока[ХарактеристикиИспользуются] = Выборка.ИспользованиеХарактеристик;
		Иначе
			ТекущаяСтрока[ХарактеристикиИспользуются] = Ложь;
		КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет серии по владельцу.
//
// Параметры:
//  ТекущаяСтрока - Структура - структура со свойствами строки документа.
//  СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//  КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПроверитьСерииПоВладельцу(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	Перем Параметры;
	
	Если СтруктураДействий.Свойство("ПроверитьСерииПоВладельцу", Параметры) Тогда
		
		Владелец = Параметры.Владелец;
		Если ТипЗнч(Владелец) = Тип("СправочникСписок.Номенклатура") Тогда
			Владелец = Владелец.ВидНоменклатуры;
		КонецЕсли;
		
		Если НЕ ТипЗнч(Владелец) = Тип("СправочникСписок.ВидыНоменклатуры") Тогда
			Возврат
		КонецЕсли;
		
		Магазин = Параметры.Магазин;
		ПроверяемыеЗначения = Параметры.ПроверяемыеЗначения;
		
		ТаблицаРеквизитов = Новый ТаблицаЗначений;
		ТаблицаРеквизитов.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Стока"));
		ТаблицаРеквизитов.Колонки.Добавить("ЗначениеРеквизита", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		
		Для каждого ПроверяемоеЗначение Из ПроверяемыеЗначения Цикл
			СтрокаТаблицы = ТаблицаРеквизитов.Добавить();
			СтрокаТаблицы.ИмяРеквизита = ПроверяемоеЗначение.Ключ;
			СтрокаТаблицы.ЗначениеРеквизита = ПроверяемоеЗначение.Значение;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаРеквизитов.ИмяРеквизита,
		|	ТаблицаРеквизитов.ЗначениеРеквизита
		|ПОМЕСТИТЬ ТаблицаРеквизитов
		|ИЗ
		|	&ТаблицаРеквизитов КАК ТаблицаРеквизитов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаРеквизитов.ИмяРеквизита,
		|	ВЫРАЗИТЬ(ТаблицаРеквизитов.ЗначениеРеквизита КАК Справочник.СерииНоменклатуры) КАК ЗначениеРеквизита
		|ПОМЕСТИТЬ ТаблицаСТипами
		|ИЗ
		|	ТаблицаРеквизитов КАК ТаблицаРеквизитов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСТипами.ИмяРеквизита,
		|	ТаблицаСТипами.ЗначениеРеквизита
		|ИЗ
		|	ТаблицаСТипами КАК ТаблицаСТипами
		|ГДЕ
		|	ТаблицаСТипами.ЗначениеРеквизита.ВидНоменклатуры <> &ВидНоменклатуры";
		
		Запрос.УстановитьПараметр("ВидНоменклатуры", Владелец);
		Запрос.УстановитьПараметр("ТаблицаРеквизитов", ТаблицаРеквизитов);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ТекущаяСтрока[Выборка.ИмяРеквизита] = Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет вид налога в строках.
//
// Параметры:
//  ТекущаяСтрока - Структура - структура со свойствами строки документа.
//  СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//  КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ЗаполнитьВидНалогаПродажиВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВидНалога", СтруктураПараметровДействия) Тогда
		
		Склад = Неопределено;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Склад") Тогда
			Склад = ТекущаяСтрока.Склад;
		Иначе
			СтруктураПараметровДействия.Свойство("Склад", Склад);
		КонецЕсли;
		
		Организация = Неопределено;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Организация") Тогда
			Организация = ТекущаяСтрока.Организация;
		Иначе
			СтруктураПараметровДействия.Свойство("Организация", Организация);
		КонецЕсли;
		
		Магазин = Неопределено;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Магазин") Тогда
			Магазин = ТекущаяСтрока.Магазин;
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтруктураПараметровДействия, "Магазин") Тогда
			Магазин = СтруктураПараметровДействия.Магазин;
		Иначе
			Магазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "Магазин");
		КонецЕсли;
		
		ТоварнаяГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура, "ТоварнаяГруппа");
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ТипНоменклатуры")
			И ТекущаяСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
			
			Если СтруктураПараметровДействия.Свойство("РабочееМесто")
				И ЗначениеЗаполнено(СтруктураПараметровДействия.РабочееМесто)  Тогда
				
				РабочееМесто = СтруктураПараметровДействия.РабочееМесто;
				
			ИначеЕсли СтруктураПараметровДействия.Свойство("КассаККМ")
				И ЗначениеЗаполнено(СтруктураПараметровДействия.КассаККМ)  Тогда
				
				РабочееМесто = СтруктураПараметровДействия.КассаККМ.РабочееМесто;
				
			КонецЕсли;
			
			Склад = ПолучитьСкладПродажи(ТоварнаяГруппа, Магазин, РабочееМесто, Организация, Склад);
			
		КонецЕсли;
		
		ТекущаяСтрока.ВидНалога = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложения(
			СтруктураПараметровДействия.Дата,
			Организация,
			Магазин,
			Склад,
			ТоварнаяГруппа);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет вид налога в строках.
//
// Параметры:
//  ТаблицаДанных	    - таблица для заполнения вида налога. 
//  СтруктураПараметров - структура параметров для определения вида налога:
//      * Дата     		- Дата - дата, на которую определяется вид налога.
//      * Магазин 		- СправочникСсылка.Магазины - магазин, в котором определяется вид налога.
//      * Организация 	- СправочникСсылка.Организации - организация, в которой определяется вид налога. Используется если в ТаблицаДанных нет колонки "Организация".
//      * ВидОперации 	- ПеречислениеСсылка.ВидыОперацийЧекККМ - вид операции документа.
//      * ЧекККМПродажа - ДокументОбъект.ЧекККМ - документ продажи, заполняется при возврате Документ.ЧекККМ.
//
Процедура ЗаполнитьВидНалогаВТЧСервер(ТаблицаДанных, СтруктураПараметров) Экспорт
	
	Если ТаблицаДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
		|	&Организация КАК Организация,
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Склад КАК Справочник.Склады) КАК Склад,
		|	&Магазин КАК Магазин,
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
		|ПОМЕСТИТЬ ТаблицаЗапроса
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрименениеСистемНалогообложенияСрезПоследних.СистемаНалогообложения КАК СистемаНалогообложения,
		|	ПрименениеСистемНалогообложенияСрезПоследних.ОсвобожденОтНДС КАК ОсвобожденОтНДС,
		|	ПрименениеСистемНалогообложенияСрезПоследних.Период КАК Период,
		|	ПрименениеСистемНалогообложенияСрезПоследних.Организация КАК Организация,
		|	ПрименениеСистемНалогообложенияСрезПоследних.Магазин КАК Магазин,
		|	ПрименениеСистемНалогообложенияСрезПоследних.Склад КАК Склад,
		|	ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа КАК ТоварнаяГруппа
		|ПОМЕСТИТЬ ВТСрезПоследних
		|ИЗ
		|	РегистрСведений.ПрименениеСистемНалогообложения.СрезПоследних(
		|			&Дата,
		|			ВЫБОР
		|				КОГДА СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.ТипыСистемНалогообложенияККТ.Патент)
		|					ТОГДА &Дата >= ДатаНачалаПатента
		|								И &Дата <= ДатаОкончанияПатента
		|							ИЛИ ДатаНачалаПатента = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|								И ДатаОкончанияПатента = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ) КАК ПрименениеСистемНалогообложенияСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВТСрезПоследних.Период) КАК Период,
		|	ВТСрезПоследних.Организация КАК Организация,
		|	ВТСрезПоследних.Магазин КАК Магазин,
		|	ВТСрезПоследних.Склад КАК Склад,
		|	ВТСрезПоследних.ТоварнаяГруппа КАК ТоварнаяГруппа
		|ПОМЕСТИТЬ ВТПериод
		|ИЗ
		|	ВТСрезПоследних КАК ВТСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТСрезПоследних.Организация,
		|	ВТСрезПоследних.Магазин,
		|	ВТСрезПоследних.Склад,
		|	ВТСрезПоследних.ТоварнаяГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТСрезПоследних.СистемаНалогообложения КАК СистемаНалогообложения,
		|	ВТСрезПоследних.ОсвобожденОтНДС КАК ОсвобожденОтНДС,
		|	ВТСрезПоследних.Организация КАК Организация,
		|	ВТСрезПоследних.Магазин КАК Магазин,
		|	ВТСрезПоследних.Склад КАК Склад,
		|	ВТСрезПоследних.ТоварнаяГруппа КАК ТоварнаяГруппа
		|ПОМЕСТИТЬ ВТСистемыНалогообложения
		|ИЗ
		|	ВТСрезПоследних КАК ВТСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериод КАК ВТПериод
		|		ПО ВТСрезПоследних.Период = ВТПериод.Период
		|			И ВТСрезПоследних.Организация = ВТПериод.Организация
		|			И ВТСрезПоследних.Магазин = ВТПериод.Магазин
		|			И ВТСрезПоследних.Склад = ВТПериод.Склад
		|			И ВТСрезПоследних.ТоварнаяГруппа = ВТПериод.ТоварнаяГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗапроса.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА ПрименениеСистемНалогообложенияСрезПоследних.Магазин <> ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа <> ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)
		|			ТОГДА 1
		|		КОГДА ПрименениеСистемНалогообложенияСрезПоследних.Магазин <> ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа <> ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)
		|			ТОГДА 2
		|		КОГДА ПрименениеСистемНалогообложенияСрезПоследних.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа <> ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)
		|			ТОГДА 3
		|		КОГДА ПрименениеСистемНалогообложенияСрезПоследних.Магазин <> ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)
		|			ТОГДА 4
		|		КОГДА ПрименениеСистемНалогообложенияСрезПоследних.Магазин <> ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)
		|			ТОГДА 5
		|		КОГДА ПрименениеСистемНалогообложенияСрезПоследних.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)
		|			ТОГДА 6
		|	КОНЕЦ КАК Приоритет,
		|	ПрименениеСистемНалогообложенияСрезПоследних.СистемаНалогообложения КАК СистемаНалогообложения
		|ПОМЕСТИТЬ ВТ_ТаблицаПриоритетовИСНО
		|ИЗ
		|	ТаблицаЗапроса КАК ТаблицаЗапроса
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСистемыНалогообложения КАК ПрименениеСистемНалогообложенияСрезПоследних
		|		ПО ТаблицаЗапроса.Организация = ПрименениеСистемНалогообложенияСрезПоследних.Организация
		|			И (ТаблицаЗапроса.Магазин = ПрименениеСистемНалогообложенияСрезПоследних.Магазин
		|				ИЛИ ПрименениеСистемНалогообложенияСрезПоследних.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
		|			И (ТаблицаЗапроса.Номенклатура.ТоварнаяГруппа = ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа
		|				ИЛИ ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка))
		|			И (ТаблицаЗапроса.Склад = ПрименениеСистемНалогообложенияСрезПоследних.Склад
		|				ИЛИ ПрименениеСистемНалогообложенияСрезПоследних.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаПриоритетовИСНО.НомерСтроки КАК НомерСтроки,
		|	МИНИМУМ(ВТ_ТаблицаПриоритетовИСНО.Приоритет) КАК МинимальныйПриоритет
		|ПОМЕСТИТЬ ВТ_МинимальныйПриоритетПоСтроке
		|ИЗ
		|	ВТ_ТаблицаПриоритетовИСНО КАК ВТ_ТаблицаПриоритетовИСНО
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ТаблицаПриоритетовИСНО.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_МинимальныйПриоритетПоСтроке.НомерСтроки КАК НомерСтроки,
		|	ВТ_ТаблицаПриоритетовИСНО.СистемаНалогообложения КАК СистемаНалогообложения
		|ИЗ
		|	ВТ_МинимальныйПриоритетПоСтроке КАК ВТ_МинимальныйПриоритетПоСтроке
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаПриоритетовИСНО КАК ВТ_ТаблицаПриоритетовИСНО
		|		ПО ВТ_МинимальныйПриоритетПоСтроке.МинимальныйПриоритет = ВТ_ТаблицаПриоритетовИСНО.Приоритет
		|			И (ВТ_ТаблицаПриоритетовИСНО.НомерСтроки = ВТ_МинимальныйПриоритетПоСтроке.НомерСтроки)";
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(СтруктураПараметров.Дата));
	Запрос.УстановитьПараметр("Магазин",СтруктураПараметров.Магазин);
	
	Если ТипЗнч(ТаблицаДанных) = Тип("ТаблицаЗначений") Тогда
		ТаблицаТоваров = ТаблицаДанных.Скопировать();
	Иначе
		ТаблицаТоваров = ТаблицаДанных.Выгрузить();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	
	Если ТаблицаТоваров.Колонки.Найти("ТипНоменклатуры") <> Неопределено Тогда
		РаспределитьУслугиПоСкладамПродажи(ТаблицаТоваров, СтруктураПараметров);
	КонецЕсли;
	
	Если ТаблицаТоваров.Колонки.Найти("Организация") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&Организация",
		"ВЫРАЗИТЬ(ТаблицаТоваров.Организация КАК Справочник.Организации)");
	Иначе
		Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		
		СтруктураПоиска = Новый Структура("НомерСтроки", СтрокаДанных.НомерСтроки);
		НайденныеСтроки = Результат.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаРезультата = НайденныеСтроки[0];
			СтрокаДанных.ВидНалога = СтрокаРезультата.СистемаНалогообложения;
		Иначе
			СтрокаДанных.ВидНалога = Перечисления.ТипыСистемНалогообложенияККТ.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет признак маркируемой алкогольной продукции.
//
// Параметры:
//  ТекущаяСтрока - Структура - структура со свойствами строки документа.
//  СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//  КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ЗаполнитьПризнакМаркируемаяАлкогольнаяПродукция(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	Перем Параметры;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакМаркируемаяАлкогольнаяПродукция", Параметры) Тогда
		
		Номенклатура = Параметры.Номенклатура;
		МаркируемаяПродукция = Параметры.МаркируемаяПродукция;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(Номенклатура.ВидАлкогольнойПродукцииЕГАИС.Маркируемый, ЛОЖЬ) КАК МаркируемаяАлкогольнаяПродукция
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ТекущаяСтрока[Номенклатура]);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			ТекущаяСтрока[МаркируемаяПродукция] = Выборка.МаркируемаяАлкогольнаяПродукция;
		Иначе
			ТекущаяСтрока[МаркируемаяПродукция] = Ложь;
		КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет единицу измерения номенклатуры в строке табличной части
//
// Параметры:
//  ТекущаяСтрока - Структура - структура со свойствами строки документа.
//  СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//  КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ЗаполнитьЕдиницуИзмеренияСопоставленияВЕТИС(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияСопоставленияВетис") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Ссылка = &Номенклатура");
		
		Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ТекущаяСтрока.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьЕдиницуИзмеренияСопоставленияВЕТИС()

// Возвращает сведения о коэффициенте пересчета единицы измерения ВетИС.
//
// Параметры:
//	ЕдиницаИзмеренияВЕТИС	- СправочникСсылка.ЕдиницыИзмеренияВЕТИС	- Единица измерения ВетИС, коэффициент которой нужно 
//																		получить.
//	Номенклатура			- СправочникСсылка.Номенклатура				- Номенклатура для единицы хранения, которой осуществляется 
//																		получение коэффициента пересчета.
//	КэшированныеЗначения	- Структура									- Сохраненные значения параметров, используемых при обработке 
//																		строки таблицы.
//
// Возвращаемое значение:
//	Структура - см. описание модуля менеджера УпаковкиЕдиницы.КоэффициентЕдиницыИзмеренияПоВЕТИС.
//
Функция ДанныеЕдиницыИзмеренияВЕТИС(ЕдиницаИзмеренияВЕТИС, Номенклатура, КэшированныеЗначения) Экспорт
	
	ДанныеЕдиницыИзмеренияВЕТИС = Справочники.БазовыеЕдиницыИзмерения.КоэффициентЕдиницыИзмеренияПоВЕТИС(
									ЕдиницаИзмеренияВЕТИС, Номенклатура);
	
	Если ДанныеЕдиницыИзмеренияВЕТИС.КэшироватьДанные Тогда
		
		КлючКоэффициента = ОбработкаТабличнойЧастиТоварыКлиентСервер.КлючКэшаУпаковки(Номенклатура, ЕдиницаИзмеренияВЕТИС);
		
		ДанныеКлюча = Новый Структура;
		ДанныеКлюча.Вставить("КодОшибки",                ДанныеЕдиницыИзмеренияВЕТИС.КодОшибки);
		ДанныеКлюча.Вставить("Коэффициент",              ДанныеЕдиницыИзмеренияВЕТИС.Коэффициент);
		ДанныеКлюча.Вставить("ТипИзмеряемойВеличины",    ДанныеЕдиницыИзмеренияВЕТИС.ТипИзмеряемойВеличины);
		ДанныеКлюча.Вставить("НужноОкруглятьКоличество", ДанныеЕдиницыИзмеренияВЕТИС.НужноОкруглятьКоличество);
		
		Если КэшированныеЗначения = Неопределено Тогда
			КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
		КонецЕсли; 
		КэшированныеЗначения.КоэффициентыУпаковок.Вставить(КлючКоэффициента, ДанныеКлюча);
		
	КонецЕсли;
	
	Возврат ДанныеЕдиницыИзмеренияВЕТИС;
	
КонецФункции

// Заполняет идентификатор номенклатуры поставщика в строках (ЭДО, Бизнес-сеть).
//
// Параметры:
//  ТекущаяСтрока - Структура - структура со свойствами строки документа.
//  СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//  КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ЗаполнитьИдентификаторНоменклатурыПоставщикаВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем Параметры;
	
	Если СтруктураДействий.Свойство("ЗаполнитьИдентификаторНоменклатурыПоставщика", Параметры) Тогда
		НоменклатураИБ = Новый Структура;
		НоменклатураИБ.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура);
		НоменклатураИБ.Вставить("Характеристика", ТекущаяСтрока.Характеристика);
		НоменклатураИБ.Вставить("Упаковка", ТекущаяСтрока.Упаковка);
		
		Отбор = Новый Структура("Владелец,НоменклатураИБ", Параметры.Контрагент, НоменклатураИБ);
		Сопоставление = СопоставлениеНоменклатурыКонтрагентов.НайтиСоответствиеНоменклатуры(Отбор);
		
		Если Сопоставление.Количество() >= 1 Тогда
			Элемент = Сопоставление[0];
			НоменклатураКонтрагента = Элемент.НоменклатураКонтрагента;
			ТекущаяСтрока.ИдентификаторНоменклатурыПоставщика = НоменклатураКонтрагента.Идентификатор;
			Представление = НоменклатураКонтрагента.Наименование;
			Если ЗначениеЗаполнено(НоменклатураКонтрагента.Характеристика) Тогда
				Представление = Представление + ", " + НоменклатураКонтрагента.Характеристика;
			КонецЕсли;
			Если ЗначениеЗаполнено(НоменклатураКонтрагента.ЕдиницаИзмерения) Тогда
				Представление = Представление + ", " + НоменклатураКонтрагента.ЕдиницаИзмерения;
			КонецЕсли;
			ТекущаяСтрока.НаименованиеНоменклатурыПоставщика = Представление;
		ИначеЕсли Сопоставление.Количество() = 0 Тогда
			ТекущаяСтрока.ИдентификаторНоменклатурыПоставщика = "";
			ТекущаяСтрока.НаименованиеНоменклатурыПоставщика = "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет признак маркируемой продукции ГосИС.
//
// Параметры:
//  ТаблицаФормы - ДанныеФормыКоллекция - таблица формы в которой необходимо заполнить необходимость ввода акцизной марки.
//  СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//
Процедура ЗаполнитьМаркируемаяПродукцияГосИС(ТаблицаФормы, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТаблицаФормы.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаЗапроса
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапроса.НомерСтроки КАК НомерСтроки,
	|	ТаблицаЗапроса.Номенклатура КАК Номенклатура,
	|	&ОпределениеВидаПродукции КАК ВидПродукцииИС,
	|	&ОпределениеПризнакаМаркируемаяПродукция КАК МаркируемаяПродукция
	|ИЗ
	|	ТаблицаЗапроса КАК ТаблицаЗапроса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТаблицаЗапроса.Номенклатура = СпрНоменклатура.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаЗапроса.НомерСтроки";
	
	ИнтеграцияИСРТ.ОпределитьВидПродукцииТекстаЗапроса(ТекстЗапроса, "СпрНоменклатура");
	ОпределениеМаркируемаяПродукция = ИнтеграцияИСРТ.ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса("спрНоменклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОпределениеПризнакаМаркируемаяПродукция", ОпределениеМаркируемаяПродукция);
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаФормы.Выгрузить(,"НомерСтроки, Номенклатура"));
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрТабл Из ТаблицаФормы Цикл
		
		СтрокаРезультата = ТаблицаРезультата.Найти(СтрТабл.НомерСтроки, "НомерСтроки");
		
		Если СтрокаРезультата = Неопределено Тогда
			МаркируемаяПродукция = Ложь;
			ВидПродукцииИС       = Неопределено;
		Иначе
			МаркируемаяПродукция = СтрокаРезультата.МаркируемаяПродукция;
			ВидПродукцииИС       = СтрокаРезультата.ВидПродукцииИС;
		КонецЕсли;
		
		СтрТабл.МаркируемаяПродукция = МаркируемаяПродукция;
		СтрТабл.ВидПродукцииИС       = ВидПродукцииИС;
		
		Если ОбщегоНазначенияРТКлиентСервер.ЕстьРеквизитОбъекта(СтрТабл, "НеобходимостьВводаАкцизнойМарки") Тогда
			СтрТабл.НеобходимостьВводаАкцизнойМарки = МаркируемаяПродукция;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Процедура для заполнения признака расчета суммы НДС по строчно
//
// Параметры:
//  ТаблицаФормы - ДанныеФормыКоллекция - таблица формы в которой необходимо заполнить необходимость ввода акцизной марки.
//
Процедура ЗаполнитьНДСПострочно(ТаблицаФормы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаЗапроса
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапроса.НомерСтроки КАК НомерСтроки,
	|	ТаблицаЗапроса.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапроса.Номенклатура.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	&ОпределениеПризнакаМаркируемаяПродукция КАК МаркируемаяПродукция
	|ИЗ
	|	ТаблицаЗапроса КАК ТаблицаЗапроса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТаблицаЗапроса.Номенклатура = СпрНоменклатура.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаЗапроса.НомерСтроки";
	
	ОпределениеМаркируемаяПродукция = ИнтеграцияИСРТ.ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса("ТаблицаЗапроса.Номенклатура");
	ОпределениеМаркируемаяПродукция = СтрЗаменить(ОпределениеМаркируемаяПродукция, "ЕСТЬNULL(ТаблицаЗапроса.Номенклатура.ВидАлкогольнойПродукцииЕГАИС.Маркируемый, ЛОЖЬ)
	|ИЛИ ", "");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОпределениеПризнакаМаркируемаяПродукция", ОпределениеМаркируемаяПродукция);
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаФормы.Выгрузить(,"НомерСтроки,Номенклатура"));
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаРезультата.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрТабл Из ТаблицаФормы Цикл
		
		СтрокаРезультата = ТаблицаРезультата[СтрТабл.НомерСтроки-1];
		
		Если СтрокаРезультата.МаркируемаяПродукция И Не СтрокаРезультата.АлкогольнаяПродукция Тогда
			СтрТабл.НДСПострочно = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет Ставку НДС в строках.
//
// Параметры:
//  ТаблицаДанных		 - 	 таблица для заполнения Ставки НДС. 
//  СтруктураПараметров  - 	 структура параметров для определения вида налога:
//      * Дата     		- дата, на которую определяется вид налога.
//      * Магазин 		- магазин, в котором определяется вид налога.
//      * ВидОперации 	- вид операции документа, Перечисление.ВидыОперацийЧекККМ
//
Процедура ЗаполнитьСтавкуНДСВТЧСервер(ТаблицаДанных, СтруктураПараметровДействия) Экспорт
	
	Если ТаблицаДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляЗапроса = Новый ТаблицаЗначений;
	ДанныеДляЗапроса.Колонки.Добавить("НомерСтроки", 	ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ДанныеДляЗапроса.Колонки.Добавить("Организация", 	Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеДляЗапроса.Колонки.Добавить("Склад", 			Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ДанныеДляЗапроса.Колонки.Добавить("Номенклатура", 	Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	Для каждого Строка Из ТаблицаДанных Цикл
		
		Если СтруктураПараметровДействия.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат 
			И ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
			
			Продолжить;
			
		ИначеЕсли Строка.ВидНалога = Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД 
			ИЛИ Строка.ВидНалога = Перечисления.ТипыСистемНалогообложенияККТ.Патент 
			ИЛИ Строка.ВидНалога = Перечисления.ТипыСистемНалогообложенияККТ.УСНДоход 
			ИЛИ Строка.ВидНалога = Перечисления.ТипыСистемНалогообложенияККТ.УСНДоходРасход 
			ИЛИ (Строка.ВидНалога = Перечисления.ТипыСистемНалогообложенияККТ.ЕСН 
				И УчетНДС.ДатаПереходногоПериода() < СтруктураПараметровДействия.Дата) Тогда
			
			Строка.СтавкаНДС = Справочники.СтавкиНДС.ПолучитьСтавкуНДСБезНДС();
			
		Иначе
			
			НоваяСтрока = ДанныеДляЗапроса.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеДляЗапроса.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Организация КАК Справочник.Организации) КАК Организация,
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Склад КАК Справочник.Склады) КАК Склад,
		|	&Магазин КАК Магазин,
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
		|ПОМЕСТИТЬ ТаблицаЗапроса
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрименениеСистемНалогообложенияСрезПоследних.СистемаНалогообложения КАК СистемаНалогообложения,
		|	ПрименениеСистемНалогообложенияСрезПоследних.ОсвобожденОтНДС КАК ОсвобожденОтНДС,
		|	ПрименениеСистемНалогообложенияСрезПоследних.Период КАК Период,
		|	ПрименениеСистемНалогообложенияСрезПоследних.Организация КАК Организация,
		|	ПрименениеСистемНалогообложенияСрезПоследних.Магазин КАК Магазин,
		|	ПрименениеСистемНалогообложенияСрезПоследних.Склад КАК Склад,
		|	ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа КАК ТоварнаяГруппа
		|ПОМЕСТИТЬ ВТСрезПоследних
		|ИЗ
		|	РегистрСведений.ПрименениеСистемНалогообложения.СрезПоследних(
		|			&Дата,
		|			ВЫБОР
		|				КОГДА СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.ТипыСистемНалогообложенияККТ.Патент)
		|					ТОГДА &Дата >= ДатаНачалаПатента
		|								И &Дата <= ДатаОкончанияПатента
		|							ИЛИ ДатаНачалаПатента = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|								И ДатаОкончанияПатента = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ) КАК ПрименениеСистемНалогообложенияСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВТСрезПоследних.Период) КАК Период,
		|	ВТСрезПоследних.Организация КАК Организация,
		|	ВТСрезПоследних.Магазин КАК Магазин,
		|	ВТСрезПоследних.Склад КАК Склад,
		|	ВТСрезПоследних.ТоварнаяГруппа КАК ТоварнаяГруппа
		|ПОМЕСТИТЬ ВТПериод
		|ИЗ
		|	ВТСрезПоследних КАК ВТСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТСрезПоследних.Организация,
		|	ВТСрезПоследних.Магазин,
		|	ВТСрезПоследних.Склад,
		|	ВТСрезПоследних.ТоварнаяГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТСрезПоследних.СистемаНалогообложения КАК СистемаНалогообложения,
		|	ВТСрезПоследних.ОсвобожденОтНДС КАК ОсвобожденОтНДС,
		|	ВТСрезПоследних.Организация КАК Организация,
		|	ВТСрезПоследних.Магазин КАК Магазин,
		|	ВТСрезПоследних.Склад КАК Склад,
		|	ВТСрезПоследних.ТоварнаяГруппа КАК ТоварнаяГруппа
		|ПОМЕСТИТЬ ВТСистемыНалогообложения
		|ИЗ
		|	ВТСрезПоследних КАК ВТСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериод КАК ВТПериод
		|		ПО ВТСрезПоследних.Период = ВТПериод.Период
		|			И ВТСрезПоследних.Организация = ВТПериод.Организация
		|			И ВТСрезПоследних.Магазин = ВТПериод.Магазин
		|			И ВТСрезПоследних.Склад = ВТПериод.Склад
		|			И ВТСрезПоследних.ТоварнаяГруппа = ВТПериод.ТоварнаяГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗапроса.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА ПрименениеСистемНалогообложенияСрезПоследних.Магазин <> ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа <> ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)
		|			ТОГДА 1
		|		КОГДА ПрименениеСистемНалогообложенияСрезПоследних.Магазин <> ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа <> ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)
		|			ТОГДА 2
		|		КОГДА ПрименениеСистемНалогообложенияСрезПоследних.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа <> ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)
		|			ТОГДА 3
		|		КОГДА ПрименениеСистемНалогообложенияСрезПоследних.Магазин <> ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)
		|			ТОГДА 4
		|		КОГДА ПрименениеСистемНалогообложенияСрезПоследних.Магазин <> ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)
		|			ТОГДА 5
		|		КОГДА ПрименениеСистемНалогообложенияСрезПоследних.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|				И ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка)
		|			ТОГДА 6
		|	КОНЕЦ КАК Приоритет,
		|	ПрименениеСистемНалогообложенияСрезПоследних.СистемаНалогообложения КАК СистемаНалогообложения,
		|	ПрименениеСистемНалогообложенияСрезПоследних.ОсвобожденОтНДС КАК ОсвобожденОтНДС,
		|	ТаблицаЗапроса.Номенклатура.СтавкаНДС КАК НоменклатураСтавкаНДС
		|ПОМЕСТИТЬ ВТ_ТаблицаПриоритетовИСНО
		|ИЗ
		|	ТаблицаЗапроса КАК ТаблицаЗапроса
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСистемыНалогообложения КАК ПрименениеСистемНалогообложенияСрезПоследних
		|		ПО ТаблицаЗапроса.Организация = ПрименениеСистемНалогообложенияСрезПоследних.Организация
		|			И (ТаблицаЗапроса.Магазин = ПрименениеСистемНалогообложенияСрезПоследних.Магазин
		|				ИЛИ ПрименениеСистемНалогообложенияСрезПоследних.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
		|			И (ТаблицаЗапроса.Номенклатура.ТоварнаяГруппа = ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа
		|				ИЛИ ПрименениеСистемНалогообложенияСрезПоследних.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка))
		|			И (ТаблицаЗапроса.Склад = ПрименениеСистемНалогообложенияСрезПоследних.Склад
		|				ИЛИ ПрименениеСистемНалогообложенияСрезПоследних.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаПриоритетовИСНО.НомерСтроки КАК НомерСтроки,
		|	МИНИМУМ(ВТ_ТаблицаПриоритетовИСНО.Приоритет) КАК МинимальныйПриоритет,
		|	ВТ_ТаблицаПриоритетовИСНО.НоменклатураСтавкаНДС КАК НоменклатураСтавкаНДС
		|ПОМЕСТИТЬ ВТ_МинимальныйПриоритетПоСтроке
		|ИЗ
		|	ВТ_ТаблицаПриоритетовИСНО КАК ВТ_ТаблицаПриоритетовИСНО
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ТаблицаПриоритетовИСНО.НомерСтроки,
		|	ВТ_ТаблицаПриоритетовИСНО.НоменклатураСтавкаНДС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_МинимальныйПриоритетПоСтроке.НомерСтроки КАК НомерСтроки,
		|	ВТ_ТаблицаПриоритетовИСНО.ОсвобожденОтНДС КАК ОсвобожденОтНДС,
		|	ВТ_МинимальныйПриоритетПоСтроке.НоменклатураСтавкаНДС КАК НоменклатураСтавкаНДС
		|ИЗ
		|	ВТ_МинимальныйПриоритетПоСтроке КАК ВТ_МинимальныйПриоритетПоСтроке
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаПриоритетовИСНО КАК ВТ_ТаблицаПриоритетовИСНО
		|		ПО ВТ_МинимальныйПриоритетПоСтроке.МинимальныйПриоритет = ВТ_ТаблицаПриоритетовИСНО.Приоритет
		|			И (ВТ_ТаблицаПриоритетовИСНО.НомерСтроки = ВТ_МинимальныйПриоритетПоСтроке.НомерСтроки)";
		
		Запрос.УстановитьПараметр("Дата", 			НачалоДня(СтруктураПараметровДействия.Дата));
		Запрос.УстановитьПараметр("Магазин", 		СтруктураПараметровДействия.Магазин);
		Запрос.УстановитьПараметр("ТаблицаТоваров",	ДанныеДляЗапроса);
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
			
			СтруктураПоиска = Новый Структура("НомерСтроки", СтрокаДанных.НомерСтроки);
			НайденныеСтроки = Результат.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				СтрокаРезультата = НайденныеСтроки[0];
				
				Если СтрокаРезультата.ОсвобожденОтНДС Тогда
					
					СтрокаДанных.СтавкаНДС = Справочники.СтавкиНДС.ПолучитьСтавкуНДСБезНДС();
					
				Иначе
					
					СтрокаДанных.СтавкаНДС = СтрокаРезультата.НоменклатураСтавкаНДС;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает Ставку НДС в строках.
//
// Параметры:
//  ТаблицаДанных		- таблица для заполнения Ставки НДС. 
//  СтруктураПараметров - структура параметров для определения вида налога:
//      * Дата     		- дата, на которую определяется вид налога.
//      * Магазин 		- магазин, в котором определяется вид налога.
//      * ВидОперации 	- вид операции документа, Перечисление.ВидыОперацийЧекККМ
//
Процедура ПересчитатьСуммуНДСВТЧСервер(ТаблицаДанных, СтруктураПараметровДействия) Экспорт
	
	КэшированныеЗначения = Новый Структура;
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		
		ПересчитатьСуммуНДСВСтрокеТЧСервер(
			СтрокаДанных, 
			Новый Структура("ПересчитатьСуммуНДС", СтруктураПараметровДействия),
			КэшированныеЗначения);
		
	КонецЦикла;
	
КонецПроцедуры

//Заполняет данные о маркированной продукции в табличной части
//
Процедура ЗаполнитьДанныеМаркировки(Форма) Экспорт 
	
	Если ТипЗнч(Форма) = Тип("ДанныеФормыСтруктура") Тогда 
		Объект = Форма;
	Иначе
		Объект = Форма.Объект;
	КонецЕсли;
	
	ТабличнаяЧастьТовары = Объект.Товары;
	
	ОперацияСДенежнымиСредствами = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект,
		"ОперацияСДенежнымиСредствами") Тогда
		ОперацияСДенежнымиСредствами = Объект.ОперацияСДенежнымиСредствами;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТабличнаяЧастьТовары Цикл 
		
		Если Не ОперацияСДенежнымиСредствами Тогда 
			ЗаполнитьДанныеМаркировкиВСтроке(Форма, СтрокаТаблицы);
		Иначе
			СтрокаТаблицы.НеобходимостьВводаАкцизнойМарки = Ложь;
			СтрокаТаблицы.МаркируемаяПродукция = Ложь;
			СтрокаТаблицы.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//Заполняет данные о маркированной продукции в строке табличной части
//
Процедура ЗаполнитьДанныеМаркировкиВСтроке(Форма, ТекущаяСтрока) Экспорт 
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ОсобенностиУчетаНоменклатуры") Тогда 
		ТекущаяСтрока.ОсобенностиУчетаНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура, "ОсобенностьУчета");
	КонецЕсли;
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "МаркируемаяПродукция") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПродукции = ИнтеграцияИС.СвойстваМаркируемойПродукции(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика);
	
	ТекущаяСтрока.МаркируемаяПродукция           = ДанныеПродукции.МаркируемаяПродукция;
	ТекущаяСтрока.ВидПродукцииИС                 = ДанныеПродукции.ВидПродукции;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "НеобходимостьВводаАкцизнойМарки") Тогда
		ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки = ДанныеПродукции.МаркируемаяПродукция;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКодТНВЭДПоНоменклатуреВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий)
	
	Если СтруктураДействий.Свойство("ЗаполнитьКодТНВЭД")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КодТНВЭД") Тогда
		ТекущаяСтрока.КодТНВЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура, "КодТНВЭД");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыПересчетаИЗаполненияСлужебные

Процедура ПроверитьСерийныеНомераПоВладельцуСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ПроверитьСерийныеНомераПоВладельцу", СтруктураПараметровДействия) Тогда
		Если СтруктураПараметровДействия = Неопределено ИЛИ НЕ СтруктураПараметровДействия.Свойство("МассивСерийныхНомеров") Тогда
			ТекущаяСтрока.КлючСвязиСерийныхНомеров = 0;
		ИначеЕсли ТекущаяСтрока.КлючСвязиСерийныхНомеров <> 0 И Справочники.СерийныеНомера.СерийныеНомераНеПринадлежатВладельцу(ТекущаяСтрока.Номенклатура, СтруктураПараметровДействия.МассивСерийныхНомеров) Тогда
			ТекущаяСтрока.КлючСвязиСерийныхНомеров = 0;
		КонецЕсли;
		ТекущаяСтрока.ИспользоватьСерийныеНомера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура, "ИспользоватьСерийныеНомера");
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьКорректностьЗаполнитьХарактеристикиИУпаковкиСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем Характеристика;
	Перем Упаковка;
	
	ПроверитьХарактеристикуПоВладельцу    = СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу", Характеристика);
	ПроверитьЗаполнитьУпаковкуПоВладельцу = СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу", Упаковка);
	
	Если ПроверитьХарактеристикуПоВладельцу И НЕ ЗначениеЗаполнено(Характеристика) Тогда
		Характеристика = ТекущаяСтрока.Характеристика;
	КонецЕсли;
	Если ПроверитьЗаполнитьУпаковкуПоВладельцу И НЕ ЗначениеЗаполнено(Упаковка) Тогда
		Упаковка = ТекущаяСтрока.Упаковка;
	КонецЕсли;
	
	Если ПроверитьХарактеристикуПоВладельцу Или ПроверитьЗаполнитьУпаковкуПоВладельцу Тогда
		РезультатПроверки = Справочники.Номенклатура.ПроверитьПринадлежностьХарактеристикиИУпаковкиВладельцу(ТекущаяСтрока.Номенклатура, Характеристика, Упаковка);
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока,РезультатПроверки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуВозвратСУчетомОснованияВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуВозвратСУчетомОснования", СтруктураПараметровДействия) Тогда
		
		ЦенаВСтроке = ЦенаВозврата(ТекущаяСтрока, СтруктураПараметровДействия.Основание);
		
		Если ЗначениеЗаполнено(ЦенаВСтроке) Тогда
			ТекущаяСтрока.Сумма = ЦенаВСтроке * ТекущаяСтрока.КоличествоУпаковок;
		Иначе
			ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоУпаковок;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроставитьПродавцаВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	Перем Продавец;

	Если СтруктураДействий.Свойство("ПроставитьПродавца", Продавец) Тогда
		
		ТекущаяСтрока.Продавец = Продавец;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДанныеПоДокументуПродажиВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	Перем ИмяДокумента;

	Если СтруктураДействий.Свойство("ЗаполнитьДанныеПоДокументуПродажи", ИмяДокумента) Тогда
		
		СвойстваСтроки = ПолучитьСтруктуруСтрокиТоваровВДокументеПродажи(ТекущаяСтрока.ЧекККМ, 
																		 ИмяДокумента, 
																		 ТекущаяСтрока.Номенклатура, 
																		 ТекущаяСтрока.Характеристика);
		
		Если Не СвойстваСтроки = Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СвойстваСтроки, , "Сумма");
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьРасхожденияВСтрокеТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Если СтруктураДействий.Свойство("ПересчитатьРасхождения") Тогда
		
		ТекущаяСтрока.КоличествоУпаковокРасхождения = ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.КоличествоУпаковокВДокументе;
		ТекущаяСтрока.ЕстьРасхождения               = ТекущаяСтрока.КоличествоУпаковокРасхождения <> 0;
		
		Если ТекущаяСтрока.КоличествоУпаковокРасхождения = 0 Тогда
			ТекущаяСтрока.ВариантУчетаРасхождения = ПредопределенноеЗначение("Перечисление.ВариантыУчетаРасхождений.ПустаяСсылка");
			
		ИначеЕсли ТекущаяСтрока.КоличествоУпаковокРасхождения > 0
			И ТекущаяСтрока.ВариантУчетаРасхождения = ПредопределенноеЗначение("Перечисление.ВариантыУчетаРасхождений.ЗаСчетПеревозчика") Тогда
			
			ТекущаяСтрока.ВариантУчетаРасхождения = ПредопределенноеЗначение("Перечисление.ВариантыУчетаРасхождений.ПустаяСсылка");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммыНДССервер(СтруктураТЧ, СтруктураДействий, КэшированныеЗначения, СоответствиеДействий)

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС", СтруктураПараметровДействия) Тогда
		Если СтруктураПараметровДействия.Свойство("НеобходимоОбработатьВсюТЧ") Тогда
			Для Каждого ТекСтрока Из СтруктураТЧ.СтрокиТЧ Цикл
				НоваяСтруктураДействий = Новый Структура;
				ОбщегоНазначенияРТКлиентСервер.ДобавитьВСтруктуру(НоваяСтруктураДействий, СтруктураДействий);
				СоответствиеДействий.Вставить(ТекСтрока, НоваяСтруктураДействий);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункцииСлужебные

Функция КоэффициентРНПТ(ИсключаемыйДокумент, Организация, Товары, КэшированныеЗначения) Экспорт
	
	Коэффициенты = РегистрыНакопления.ТоварыОрганизаций.ПолучитьКоэффициентыПрослеживаемыхТоваров(ИсключаемыйДокумент,
																									Организация,
																									Товары);
	Если Коэффициенты.Количество() 
		И КэшированныеЗначения <> Неопределено Тогда																								
		
		Коэффициент		 = Коэффициенты[0].Коэффициент;
		ТекущаяСтрока	 = Товары[0];
		
		КлючКоэффициента = ОбработкаТабличнойЧастиТоварыКлиентСервер.КлючКэшаКоэффициентРНПТ(Организация, ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика, ТекущаяСтрока.МестоХранения, ТекущаяСтрока.НомерГТД);
		КэшированныеЗначения.КоэффициентыРНПТ.Вставить(КлючКоэффициента, Коэффициент);
		
	КонецЕсли;
	
	Возврат Коэффициенты;
	
КонецФункции

Функция КоэффициентУпаковкиСервер(ТекУпаковка, КэшированныеЗначения)

	ТекКоэффициент = Неопределено;
	
	Если ЗначениеЗаполнено(ТекУпаковка) И ТипЗнч(ТекУпаковка) = Тип("СправочникСсылка.УпаковкиНоменклатуры") Тогда
		Если ЗначениеЗаполнено(КэшированныеЗначения) Тогда
			Если КэшированныеЗначения.Свойство("КоэффициентыУпаковок") Тогда
				ТекКоэффициент = КэшированныеЗначения.КоэффициентыУпаковок[ТекУпаковка];
			КонецЕсли;
			Если ТекКоэффициент = Неопределено Тогда
				ТекКоэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекУпаковка, "Коэффициент");
				КэшированныеЗначения.КоэффициентыУпаковок.Вставить(ТекУпаковка, ТекКоэффициент);
				КэшированныеЗначения.ОбъемУпаковок.Вставить(ТекУпаковка, ТекУпаковка.Объем);
				КэшированныеЗначения.ВесУпаковок.Вставить(ТекУпаковка, ТекУпаковка.Вес);
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекКоэффициент) Тогда
		ТекКоэффициент = 1;
	КонецЕсли;
	
	Возврат ТекКоэффициент;
	
КонецФункции

Функция ВесУпаковкиСервер(ТекУпаковка, КэшированныеЗначения)

	Если ЗначениеЗаполнено(ТекУпаковка) Тогда
		ТекВес = КэшированныеЗначения.ВесУпаковок[ТекУпаковка];
		Если ТекВес = Неопределено Тогда
			ТекВес = ТекУпаковка.Вес;
			КэшированныеЗначения.КоэффициентыУпаковок.Вставить(ТекУпаковка, ТекУпаковка.Коэффициент);
			КэшированныеЗначения.ОбъемУпаковок.Вставить(ТекУпаковка, ТекУпаковка.Объем);
			КэшированныеЗначения.ВесУпаковок.Вставить(ТекУпаковка, ТекВес);
		КонецЕсли;
	Иначе
		ТекВес = 0;
	КонецЕсли;

	Возврат ТекВес;

КонецФункции

Функция ОбъемУпаковкиСервер(ТекУпаковка, КэшированныеЗначения)

	Если ЗначениеЗаполнено(ТекУпаковка) Тогда
		ТекОбъем = КэшированныеЗначения.ОбъемУпаковок[ТекУпаковка];
		Если ТекОбъем = Неопределено Тогда
			ТекОбъем = ТекУпаковка.Объем;
			КэшированныеЗначения.КоэффициентыУпаковок.Вставить(ТекУпаковка, ТекУпаковка.Коэффициент);
			КэшированныеЗначения.ОбъемУпаковок.Вставить(ТекУпаковка, ТекОбъем);
			КэшированныеЗначения.ВесУпаковок.Вставить(ТекУпаковка, ТекУпаковка.Вес);
		КонецЕсли;
	Иначе
		ТекОбъем = 0;
	КонецЕсли;

	Возврат ТекОбъем;

КонецФункции

Функция ЦенаВозврата(СтрокаТабличнойЧасти, Основание)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Количество = 0
	|			ТОГДА ВложенныйЗапрос.Сумма
	|		ИНАЧЕ ВложенныйЗапрос.Сумма / ВложенныйЗапрос.Количество
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ЧекККМТовары.Сумма) КАК Сумма,
	|		СУММА(ВЫБОР
	|				КОГДА &Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|					ТОГДА ЧекККМТовары.Количество
	|				ИНАЧЕ ЧекККМТовары.КоличествоУпаковок
	|			КОНЕЦ) КАК Количество
	|	ИЗ
	|		Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|	ГДЕ
	|		ЧекККМТовары.Ссылка = &Ссылка
	|		И ЧекККМТовары.Номенклатура = &Номенклатура
	|		И ЧекККМТовары.Характеристика = &Характеристика
	|		И (ЧекККМТовары.Упаковка = &Упаковка
	|				ИЛИ &Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка))) КАК ВложенныйЗапрос";
	
	Запрос.УстановитьПараметр("Ссылка"        , Основание);
	Запрос.УстановитьПараметр("Упаковка"      , СтрокаТабличнойЧасти.Упаковка);
	Запрос.УстановитьПараметр("Номенклатура"  , СтрокаТабличнойЧасти.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Цена;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ЦенаВозврата()

#КонецОбласти

#Область ПрочиеСлужебные

Функция ПолучитьСкладПродажи(ТоварнаяГруппа, Магазин, РабочееМесто, Организация, СкладПоУмолчанию = Неопределено)
	
	ТоварнаяГруппаСклада    = Справочники.ТоварныеГруппы.ПустаяСсылка();
	ОрганизацияСклада 		= Справочники.Организации.ПустаяСсылка();
	РабочееМестоСклада		= Справочники.РабочиеМеста.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ТоварнаяГруппа) Тогда
		ТоварнаяГруппаСклада = ТоварнаяГруппа;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Организация) Тогда
		ОрганизацияСклада = Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РабочееМесто) Тогда
		РабочееМестоСклада = РабочееМесто;
	КонецЕсли;
		
	ПустаяОрганизация = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийРТ")
							ИЛИ НЕ ЗначениеЗаполнено(ОрганизацияСклада);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРаспределениеНоменклатуры();
	
	Запрос.УстановитьПараметр("Магазин", 			Магазин);
	Запрос.УстановитьПараметр("РабочееМесто", 		РабочееМестоСклада);
	Запрос.УстановитьПараметр("ТоварнаяГруппа", 	ТоварнаяГруппаСклада);
	Запрос.УстановитьПараметр("Организация", 		ОрганизацияСклада);
	Запрос.УстановитьПараметр("ПустаяОрганизация",  ПустаяОрганизация);
	
	Результат 		= Запрос.Выполнить();
	Выборка 		= Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		СкладПродажи = Выборка.Склад;
	Иначе
		СкладПродажи = СкладПоУмолчанию;
	КонецЕсли;
	
	Возврат СкладПродажи;
	
КонецФункции

Функция ТекстЗапросаРаспределениеНоменклатуры()
	
	Возврат
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РаспределениеНоменклатуры.СкладПродажи КАК Склад,
	|	1 КАК ПолеУпорядочивания
	|ПОМЕСТИТЬ Склады
	|ИЗ
	|	РегистрСведений.РаспределениеНоменклатуры КАК РаспределениеНоменклатуры
	|ГДЕ
	|	РаспределениеНоменклатуры.Магазин = &Магазин
	|	И РаспределениеНоменклатуры.ТоварнаяГруппа = &ТоварнаяГруппа
	|	И РаспределениеНоменклатуры.РабочееМесто = &РабочееМесто
	|	И НЕ РаспределениеНоменклатуры.СкладПродажи = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаспределениеНоменклатуры.СкладПродажи,
	|	2
	|ИЗ
	|	РегистрСведений.РаспределениеНоменклатуры КАК РаспределениеНоменклатуры
	|ГДЕ
	|	РаспределениеНоменклатуры.Магазин = &Магазин
	|	И РаспределениеНоменклатуры.ТоварнаяГруппа = &ТоварнаяГруппа
	|	И РаспределениеНоменклатуры.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка)
	|	И НЕ РаспределениеНоменклатуры.СкладПродажи = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Склады.Ссылка,
	|	3
	|ИЗ
	|	Справочник.Склады КАК Склады
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Магазины КАК Магазины
	|		ПО Склады.Ссылка = Магазины.СкладПродажи
	|			И (Магазины.Ссылка = &Магазин)
	|ГДЕ
	|	Склады.Магазин = &Магазин
	|	И Склады.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Склады.Ссылка,
	|	4
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Магазин = &Магазин
	|	И Склады.Организация = &Организация
	|	И НЕ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Магазины.СкладПродажи,
	|	5
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	Магазины.Ссылка = &Магазин
	|	И &ПустаяОрганизация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПолеУпорядочивания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Склады.Склад КАК Склад
	|ИЗ
	|	Склады КАК Склады";
	
КонецФункции

Процедура РаспределитьУслугиПоСкладамПродажи(ТаблицаТоваров, СтруктураПараметров)
	
	Магазин			= СтруктураПараметров.Магазин;
	РабочееМесто	= Справочники.РабочиеМеста.ПустаяСсылка();
	Организация		= Справочники.Организации.ПустаяСсылка();
	
	ОрганизацияВТЧ 	= Ложь;
	
	Если СтруктураПараметров.Свойство("РабочееМесто") 
		И ЗначениеЗаполнено(СтруктураПараметров.РабочееМесто) Тогда
		
		РабочееМесто = СтруктураПараметров.РабочееМесто;
		
	ИначеЕсли СтруктураПараметров.Свойство("КассаККМ") 
		И ЗначениеЗаполнено(СтруктураПараметров.КассаККМ)  Тогда
				
		РабочееМесто = СтруктураПараметров.КассаККМ.РабочееМесто;

	КонецЕсли;			
	
	Если СтруктураПараметров.Свойство("Организация") 
		И ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
		Организация = СтруктураПараметров.Организация;
	КонецЕсли;
	
	Если ТаблицаТоваров.Колонки.Найти("Организация") <> Неопределено Тогда
		ОрганизацияВТЧ = Истина;
	КонецЕсли;
	
	ТаблицаТоваров.Индексы.Добавить("ТипНоменклатуры");
	
	СтрокиСУслугами = ТаблицаТоваров.НайтиСтроки(Новый Структура("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Услуга));
	
	Для Каждого СтрокаТЧ ИЗ СтрокиСУслугами Цикл
		
		ОрганизацияСклада = ?(ОрганизацияВТЧ, СтрокаТЧ.Организация, Организация);
		ТоварнаяГруппа	  = ?(ЗначениеЗаполнено(СтрокаТЧ.Номенклатура), 
								ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.Номенклатура, "ТоварнаяГруппа"),
								Неопределено);
		
		СтрокаТЧ.Склад 	  = ПолучитьСкладПродажи(ТоварнаяГруппа, Магазин, РабочееМесто, ОрганизацияСклада, СтрокаТЧ.Склад);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьАссортиментСтроки(ТекущаяСтрока, СтруктураДействий)
	
	Перем СтруктураПараметровДействия, ЗначениеСвойства;
	
	Если Не СтруктураДействий.Свойство("ПроверитьАссортиментСтроки", СтруктураПараметровДействия) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметровДействия.ПроверитьТоварВЗаказе) Тогда
		Если ТоварСодержитсяВЗаказе(ТекущаяСтрока.Номенклатура, СтруктураПараметровДействия.ПроверитьТоварВЗаказе) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураСостояния = АссортиментСервер.СтруктураСостоянияАссортиментаТовараВФормате(ТекущаяСтрока.Номенклатура,
																						СтруктураПараметровДействия.Магазин,
																						СтруктураПараметровДействия.Дата);
	
	Если НЕ СтруктураСостояния[СтруктураПараметровДействия.ИмяРесурсаАссортимента] Тогда
		
		ТекстСообщения = СтруктураПараметровДействия.ТекстСообщения;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущаяСтрока.Номенклатура);
		Если СтруктураПараметровДействия.РазрешатьДобавление Тогда
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,
				СтруктураПараметровДействия.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект." + СтруктураПараметровДействия.ИмяТабличнойЧасти,
																	ТекущаяСтрока.НомерСтроки,
																	"Номенклатура"));
		Иначе
			ТекущаяСтрока.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьОтличныеДоговорыПлатежныхАгентов(ТекущаяСтрока, СтруктураДействий)
	
	Перем СтруктураПараметровДействия, ЗначениеСвойства;
	
	Если Не СтруктураДействий.Свойство("ПроверитьОтличныеДоговорыПлатежныхАгентов", СтруктураПараметровДействия) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СтруктураПараметровДействия.ДоговорКонтрагента = ТекущаяСтрока.ДоговорКонтрагента Тогда
		
		ТекстСообщения = СтруктураПараметровДействия.ТекстСообщения;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущаяСтрока.Номенклатура);
		ТекущаяСтрока.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		ТекущаяСтрока.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТоварСодержитсяВЗаказе(Номенклатура, Заказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказПоставщикуТовары.Номенклатура
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|ГДЕ
	|	ЗаказПоставщикуТовары.Ссылка = &Ссылка
	|	И ЗаказПоставщикуТовары.Номенклатура = &Номенклатура";
	Запрос.УстановитьПараметр("Ссылка", Заказ);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

Процедура ПроверитьЗапретРозничнойПродажи(ТекущаяСтрока, СтруктураДействий)
	
	Перем СтруктураПараметровДействия, ЗначениеСвойства;
	
	Если Не СтруктураДействий.Свойство("ПроверитьЗапретРозничнойПродажи", СтруктураПараметровДействия) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	Если СкидкиНаценкиСерверПереопределяемый.ЗапрещенаПродажаТовара(ТекущаяСтрока.Номенклатура,
																	СтруктураПараметровДействия.Магазин,
																	СтруктураПараметровДействия.Дата) Тогда
		ТекстСообщения = СтруктураПараметровДействия.ТекстСообщения;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущаяСтрока.Номенклатура);
		ТекущаяСтрока.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет полноту заполненности данных строки поступления товаров
//
Процедура ПроверитьНезаполненностьСтрокиПоступленияТоваровЕГАИССервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если СтруктураДействий.Свойство("ПроверитьНезаполненностьСтрокиПоступленияТоваровЕГАИС") Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			Если ТекущаяСтрока.ХарактеристикиИспользуются Тогда
				Если ЗначениеЗаполнено(ТекущаяСтрока.Характеристика)  Тогда
					ТекущаяСтрока.ЕстьОшибкиВЗаполненииСтроки = Ложь;
				Иначе
					ТекущаяСтрока.ЕстьОшибкиВЗаполненииСтроки = Истина;
				КонецЕсли;
			Иначе
				ТекущаяСтрока.ЕстьОшибкиВЗаполненииСтроки = Ложь;
			КонецЕсли;
		Иначе
			ТекущаяСтрока.ЕстьОшибкиВЗаполненииСтроки = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Заполняет реквизиты АлкогольнаяПродукция, ВидАлкогольнойПродукции, НеобходимостьВводаАкцизнойМарки
// в строке ТЧ Товары
Процедура ЗаполнитьПараметрыАлкогольнойПродукции(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ЗаполнитьПараметрыАлкогольнойПродукции", СтруктураПараметровДействия) Тогда
		ПроверяемаяДата = ТекущаяДатаСеанса();
		
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("Дата") Тогда
				ПроверяемаяДата = СтруктураПараметровДействия.Дата;
			КонецЕсли;
		КонецЕсли;
		
		Если ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(Неопределено, Неопределено, ПроверяемаяДата) Тогда
			
			ДанныеПродукции = ИнтеграцияЕГАИСРТ.ДанныеАлкогольнойПродукции(ТекущаяСтрока.Номенклатура);
			
			ТекущаяСтрока.АлкогольнаяПродукция = ДанныеПродукции.ЭтоАлкогольнаяПродукция;
			ТекущаяСтрока.ВидАлкогольнойПродукцииЕГАИС = ДанныеПродукции.ВидАлкогольнойПродукцииЕГАИС;
			
			Если ДанныеПродукции.ЭтоАлкогольнаяПродукция
				И ДанныеПродукции.Маркируемый Тогда
					ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки = Истина;
			Иначе
				ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки = Ложь;
			КонецЕсли;
			
		Иначе
			
			ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьНеобходимостьВводаСправкиНаАлкоголь(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ПроверитьНеобходимостьВводаСправкиНаАлкоголь", СтруктураПараметровДействия) Тогда
		ПроверяемаяДата = ТекущаяДатаСеанса();
		
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("Дата") Тогда
				ПроверяемаяДата = СтруктураПараметровДействия.Дата;
			КонецЕсли;
		КонецЕсли;
		
		Если ИнтеграцияЕГАИСРТ.НужноРаботатьСЕГАИС(ПроверяемаяДата) Тогда
			ТекущаяСтрока.НеобходимостьВводаСправкиНаАлкоголь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура, "АлкогольнаяПродукция");
		Иначе
			ТекущаяСтрока.НеобходимостьВводаСправкиНаАлкоголь = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьНоменклатуруЕГАИС(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем Параметры;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруЕГАИС", Параметры) Тогда
		
		Если Параметры.Свойство("ИмяКолонки") Тогда
			ИмяКолонки = Параметры.ИмяКолонки;
		Иначе
			ИмяКолонки = "НоменклатураЕГАИС";
		КонецЕсли;
		
		Если Параметры.Свойство("ЗаполнитьФлагАлкогольнаяПродукция") Тогда
			ЗаполнитьФлагАлкогольнаяПродукция = Параметры.ЗаполнитьФлагАлкогольнаяПродукция;
		Иначе
			ЗаполнитьФлагАлкогольнаяПродукция = Ложь;
		КонецЕсли;
		
		Если Параметры.Свойство("Серии") Тогда
			Серии = Параметры.Серии.Выгрузить();
		Иначе
			Серии = Новый ТаблицаЗначений;
			Серии.Колонки.Добавить("Номенклатура"  , Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			Серии.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
			Серии.Колонки.Добавить("Серия"         , Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		КонецЕсли;
		
		Если Параметры.Свойство("ЗаполнитьФлагМаркируемаяАлкогольнаяПродукция") Тогда
			ЗаполнитьФлагЗаполнитьФлагМаркируемаяАлкогольнаяПродукция = Параметры.ЗаполнитьФлагМаркируемаяАлкогольнаяПродукция;
		Иначе
			ЗаполнитьФлагЗаполнитьФлагМаркируемаяАлкогольнаяПродукция = Ложь;
		КонецЕсли;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТЧСерии.Серия КАК Серия,
		|	ТЧСерии.Номенклатура КАК Номенклатура,
		|	ТЧСерии.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ
		|	Серии
		|ИЗ
		|	&Серии КАК ТЧСерии
		|ГДЕ
		|	ТЧСерии.Номенклатура = &Номенклатура
		|	И ТЧСерии.Характеристика = &Характеристика;
		|
		|ВЫБРАТЬ
		|	ТЧСерии.Серия КАК Серия,
		|	ТЧСерии.Номенклатура КАК Номенклатура,
		|	ТЧСерии.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ
		|	ВтСерии
		|ИЗ
		|	Серии КАК ТЧСерии
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Серия КАК Серия,
		|	&Номенклатура КАК Номенклатура,
		|	&Характеристика КАК Характеристика
		|;
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК НоменклатураЕГАИС,
		|	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция.ВидПродукции.Маркируемый, ЛОЖЬ)
		|				ИЛИ ЕСТЬNULL(СоответствиеНоменклатурыЕГАИС.Номенклатура.ВидАлкогольнойПродукцииЕГАИС.Маркируемый, ЛОЖЬ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК МаркируемаяАлкогольнаяПродукция,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоответствиеНоменклатурыЕГАИС.Номенклатура.АлкогольнаяПродукция, ЛОЖЬ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК АлкогольнаяПродукция
		|ИЗ
		|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСерии КАК ВтСерии
		|		ПО ВтСерии.Номенклатура = СоответствиеНоменклатурыЕГАИС.Номенклатура
		|			И ВтСерии.Характеристика = СоответствиеНоменклатурыЕГАИС.Характеристика
		|			И ВтСерии.Серия = СоответствиеНоменклатурыЕГАИС.Серия
		|ГДЕ
		|	СоответствиеНоменклатурыЕГАИС.Номенклатура = &Номенклатура
		|	И СоответствиеНоменклатурыЕГАИС.Характеристика = &Характеристика");
		
		Запрос.УстановитьПараметр("Номенклатура",   ТекущаяСтрока.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", ТекущаяСтрока.Характеристика);
		Запрос.УстановитьПараметр("Серия", Справочники.СерииНоменклатуры.ПустаяСсылка());
		Запрос.УстановитьПараметр("Серии", Серии);
		
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		КоличествоСопоставлено = Выборка.Количество();
		
		Пока Выборка.Следующий() Цикл
			Если КоличествоСопоставлено = 1 Тогда
				Если ЗаполнитьФлагЗаполнитьФлагМаркируемаяАлкогольнаяПродукция Тогда
					ТекущаяСтрока.МаркируемаяАлкогольнаяПродукция = Выборка.МаркируемаяАлкогольнаяПродукция;
				КонецЕсли;
				Если ЗаполнитьФлагАлкогольнаяПродукция Тогда
					ТекущаяСтрока.АлкогольнаяПродукция = Выборка.АлкогольнаяПродукция;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоСопоставлено = 0 Тогда
			ТекущаяСтрока.АлкогольнаяПродукция = Неопределено;
		КонецЕсли;
		Если КоличествоСопоставлено > 1 Тогда
			ТекущаяСтрока.СопоставлениеАлкогольнаяПродукция = СтрШаблон(НСтр("ru = '<Несколько позиций (%1)>'"), КоличествоСопоставлено);
		ИначеЕсли КоличествоСопоставлено = 1 Тогда
			ТекущаяСтрока.СопоставлениеАлкогольнаяПродукция = "";
		Иначе
			ТекущаяСтрока.СопоставлениеАлкогольнаяПродукция = НСтр("ru = '<Не сопоставлено>'");
		КонецЕсли;
		
		Если КоличествоСопоставлено <> 1 Тогда
			ТекущаяСтрока[ИмяКолонки] = Неопределено;
			Если ЗаполнитьФлагЗаполнитьФлагМаркируемаяАлкогольнаяПродукция Тогда
				ТекущаяСтрока.МаркируемаяАлкогольнаяПродукция = Ложь;
			КонецЕсли;
			Если ЗаполнитьФлагАлкогольнаяПродукция Тогда
				ТекущаяСтрока.АлкогольнаяПродукция = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьАлкогольнуюПродукцию(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Если СтруктураДействий.Свойство("ЗаполнитьАлкогольнуюПродукцию") Тогда
		
		ЕстьПолеНоменклатураДляВыбора =  ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока,
			"НоменклатураДляВыбора");
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
		|ГДЕ
		|	СоответствиеНоменклатурыЕГАИС.Номенклатура = &Номенклатура
		|	И СоответствиеНоменклатурыЕГАИС.Характеристика = &Характеристика
		|	И (СоответствиеНоменклатурыЕГАИС.Серия = &Серия 
		|		ИЛИ &СерияЗаполнена = ЛОЖЬ)
		|");
		
		Запрос.УстановитьПараметр("Номенклатура",   ТекущаяСтрока.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", ТекущаяСтрока.Характеристика);
		Запрос.УстановитьПараметр("Серия",          ТекущаяСтрока.Серия);
		Запрос.УстановитьПараметр("СерияЗаполнена", ЗначениеЗаполнено(ТекущаяСтрока.Серия));
		
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		КоличествоСопоставлено = Выборка.Количество();
		
		Если ЕстьПолеНоменклатураДляВыбора Тогда
			ТекущаяСтрока.НоменклатураДляВыбора.Очистить();
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			Если КоличествоСопоставлено = 1 Тогда
				ТекущаяСтрока.АлкогольнаяПродукция = Выборка.АлкогольнаяПродукция;
			КонецЕсли;
			Если ЕстьПолеНоменклатураДляВыбора Тогда
				ТекущаяСтрока.НоменклатураДляВыбора.Добавить(Выборка.АлкогольнаяПродукция);
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоСопоставлено = 0 Тогда
			ТекущаяСтрока.АлкогольнаяПродукция = Неопределено;
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СопоставлениеАлкогольнаяПродукция") Тогда
			Если КоличествоСопоставлено > 1 Тогда
				ТекущаяСтрока.СопоставлениеАлкогольнаяПродукция = СтрШаблон(НСтр("ru = '<Несколько позиций (%1)>'"), КоличествоСопоставлено);
			ИначеЕсли КоличествоСопоставлено = 1 Тогда
				ТекущаяСтрока.СопоставлениеАлкогольнаяПродукция = "";
			Иначе
				ТекущаяСтрока.СопоставлениеАлкогольнаяПродукция = НСтр("ru = '<Не сопоставлено>'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПродукциюВЕТИС(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	ПараметрыЗаполнения = Неопределено;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПродукциюВЕТИС", ПараметрыЗаполнения) Тогда
		Если НЕ ПараметрыЗаполнения.ЗаполнитьПродукциюВЕТИС Тогда
			Возврат
		КонецЕсли;
		
		Отбор = Неопределено;
		ПараметрыЗаполнения.Свойство("ОтборПродукция",Отбор);
		
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоответствиеНоменклатурыВЕТИС.Продукция КАК Продукция,
		|	СоответствиеНоменклатурыВЕТИС.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС
		|ГДЕ
		|	СоответствиеНоменклатурыВЕТИС.Номенклатура = &Номенклатура
		|	И СоответствиеНоменклатурыВЕТИС.Характеристика = &Характеристика
		|	И (СоответствиеНоменклатурыВЕТИС.Продукция.Производители.Производитель = &Предприятие
		|			ИЛИ &Предприятие = ЗНАЧЕНИЕ(Справочник.ПредприятияВЕТИС.ПустаяСсылка))
		|	И (СоответствиеНоменклатурыВЕТИС.Продукция.ХозяйствующийСубъектПроизводитель = &ХозяйствующийСубъект
		|			ИЛИ &ХозяйствующийСубъект = ЗНАЧЕНИЕ(Справочник.ХозяйствующиеСубъектыВЕТИС.ПустаяСсылка))
		|	И (НЕ &ИсключатьПродукциюТретьегоУровня
		|			ИЛИ СоответствиеНоменклатурыВЕТИС.Продукция.Идентификатор <> """")");
		
		Запрос.УстановитьПараметр("Номенклатура",   ТекущаяСтрока.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", ТекущаяСтрока.Характеристика);
		
		ИсключатьПродукциюТретьегоУровня = Неопределено;
		ПараметрыЗаполнения.Свойство("ИсключатьПродукциюТретьегоУровня",ИсключатьПродукциюТретьегоУровня);
		Если ИсключатьПродукциюТретьегоУровня = Неопределено Тогда
			ИсключатьПродукциюТретьегоУровня = Ложь;
		КонецЕсли;
		Запрос.УстановитьПараметр("ИсключатьПродукциюТретьегоУровня", ИсключатьПродукциюТретьегоУровня);
		
		Если ЗначениеЗаполнено(Отбор) Тогда
			Если Отбор.Свойство("Предприятие") Тогда
				Запрос.УстановитьПараметр("Предприятие", Отбор.Предприятие);
			Иначе
				Запрос.УстановитьПараметр("Предприятие", Справочники.ПредприятияВЕТИС.ПустаяСсылка());
			КонецЕсли;
			Если Отбор.Свойство("ХозяйствующийСубъект") Тогда
				Запрос.УстановитьПараметр("ХозяйствующийСубъект", Отбор.ХозяйствующийСубъект);
			Иначе
				Запрос.УстановитьПараметр("ХозяйствующийСубъект", Справочники.ХозяйствующиеСубъектыВЕТИС.ПустаяСсылка());
			КонецЕсли;
		Иначе
			Запрос.УстановитьПараметр("Предприятие", Справочники.ПредприятияВЕТИС.ПустаяСсылка());
			Запрос.УстановитьПараметр("ХозяйствующийСубъект", Справочники.ХозяйствующиеСубъектыВЕТИС.ПустаяСсылка());
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		КоличествоСопоставлено = Выборка.Количество();
		ТекущаяСтрока.НоменклатураДляВыбора.Очистить();
		
		Пока Выборка.Следующий() Цикл
			Если КоличествоСопоставлено = 1 Тогда
				ТекущаяСтрока.Продукция = Выборка.Продукция;
			КонецЕсли;
			ТекущаяСтрока.НоменклатураДляВыбора.Добавить(Выборка.Продукция);
		КонецЦикла;
		
		Если КоличествоСопоставлено = 0 Тогда
			ТекущаяСтрока.Продукция = Неопределено;
		КонецЕсли;
		Если КоличествоСопоставлено > 1 Тогда
			ТекущаяСтрока.СопоставлениеТекст = СтрШаблон(НСтр("ru = '<Несколько позиций (%1)>'"), КоличествоСопоставлено);
		ИначеЕсли КоличествоСопоставлено = 1 Тогда
			ТекущаяСтрока.СопоставлениеТекст = "";
		Иначе
			ТекущаяСтрока.СопоставлениеТекст = НСтр("ru = '<Не сопоставлено>'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьФлагНДСПострочноСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагНДСПострочно") Тогда
		
		ТекущаяСтрока.НДСПострочно = Ложь;
		
		ЭтоМаркируемаяПродукцияИСМП = Ложь;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) И
			ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
			
			ВидПродукции = ИнтеграцияИС.ВидПродукцииПоНоменклатуре(ТекущаяСтрока.Номенклатура);
			ЭтоМаркируемаяПродукцияИСМП = ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияИСМП(ВидПродукции, Истина);
		КонецЕсли;
		
		Если ЭтоМаркируемаяПродукцияИСМП Тогда 
			ТекущаяСтрока.НДСПострочно = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНеобходимостьВводаМаркируемойПродукцииГосИС(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПроверитьНеобходимостьВводаМаркируемойПродукцииГосИС", СтруктураПараметровДействия) Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда 
			
			Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "МаркируемаяПродукция") Тогда
				Возврат;
			КонецЕсли;
			
			Если ТипЗнч(СтруктураПараметровДействия) = Тип("Структура") 
				И СтруктураПараметровДействия.Свойство("БезМаркировки") Тогда 
				
				ТекущаяСтрока.МаркируемаяПродукция            = Ложь;
				ТекущаяСтрока.ВидПродукцииИС                  = Перечисления.ВидыПродукцииИС.ПустаяСсылка();
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "НеобходимостьВводаАкцизнойМарки") Тогда
					ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки = Ложь;
				КонецЕсли;

				
			Иначе 
				
				ОперацияСДенежнымиСредствами = Ложь;
				
				Если СтруктураДействий.ПроверитьНеобходимостьВводаМаркируемойПродукцииГосИС <> Неопределено
					И СтруктураДействий.ПроверитьНеобходимостьВводаМаркируемойПродукцииГосИС.Свойство("ОперацияСДенежнымиСредствами") Тогда
					ОперацияСДенежнымиСредствами = СтруктураДействий.ПроверитьНеобходимостьВводаМаркируемойПродукцииГосИС.ОперацияСДенежнымиСредствами;
				КонецЕсли;
				
				ДанныеПродукции = ИнтеграцияИС.СвойстваМаркируемойПродукции(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика);
				
				Если НЕ ОперацияСДенежнымиСредствами Тогда
					ТекущаяСтрока.МаркируемаяПродукция           = ДанныеПродукции.МаркируемаяПродукция;
					ТекущаяСтрока.ВидПродукцииИС                 = ДанныеПродукции.ВидПродукции;
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "НеобходимостьВводаАкцизнойМарки") Тогда
						ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки = ДанныеПродукции.МаркируемаяПродукция;
					КонецЕсли;
				Иначе 
					ТекущаяСтрока.МаркируемаяПродукция            = Ложь;
					ТекущаяСтрока.ВидПродукцииИС                  = Перечисления.ВидыПродукцииИС.ПустаяСсылка();
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "НеобходимостьВводаАкцизнойМарки") Тогда
						ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет ставку НДС. Необходимые параметры пытается определить в текущей строке.
// Если необходимого свойства нет в строке, данные берутся из СтруктураПараметровДействия.
//
// Параметры:
//  ТекущаяСтрока				 - СтрокаТЧ, Структура - объект, в котором требуется заполнить ставку НДС
//  СтруктураПараметровДействия	 - Структура - структура с параметрами необходимыми для заполнения ставки НДС
//  КэшированныеЗначения		 - Структура - Сохраненные значения параметров, используемых при обработке 
//											   строки таблицы
//
Процедура ЗаполнитьСтавкуНДСВСтрокеПоПараметрам(ТекущаяСтрока, СтруктураПараметровДействия, КэшированныеЗначения)
	
	СтавкаНДС 						= Неопределено;
	СтавкаНДСПоУмолчанию 			= Справочники.СтавкиНДС.ПолучитьСтавкуНДСБезНДС();
	ОпределятьПризнакПлательщикаНДС = Истина;
	
	Если СтруктураПараметровДействия.Свойство("ВидНалогаВШапке") Тогда
		
		ВидНалогаВШапке = СтруктураПараметровДействия.ВидНалогаВШапке;
		
		Если ЗначениеЗаполнено(ВидНалогаВШапке) 
			И ВидНалогаВШапке <> Перечисления.ТипыСистемНалогообложенияККТ.ОСН 
			И НЕ (ВидНалогаВШапке = Перечисления.ТипыСистемНалогообложенияККТ.ЕСН
			И СтруктураПараметровДействия.Дата >= УчетНДС.ДатаПереходногоПериода()) Тогда
		
			СтавкаНДС = Справочники.СтавкиНДС.ПолучитьСтавкуНДСБезНДС();
			
		Иначе
			
			Организация = Неопределено;
			СтруктураПараметровДействия.Свойство("Организация", Организация);
			
			Склад = Неопределено;
			СтруктураПараметровДействия.Свойство("Склад", Склад);
			
			Магазин = Неопределено;
			Если НЕ СтруктураПараметровДействия.Свойство("Магазин", Магазин) Тогда
				Магазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "Магазин");
			КонецЕсли;
			
			ПрименяетсяНДС = УчетНДС.ПрименяетсяНДС(СтруктураПараметровДействия.Дата,
												Организация,
												Магазин,
												Склад);
			
			Если ПрименяетсяНДС Тогда
				
				СтавкаНДС = УчетНДС.СкорректироватьСтавкуНДС(
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура,"СтавкаНДС"), 
					СтруктураПараметровДействия.Дата);
				
			Иначе
				
				СтавкаНДС = Справочники.СтавкиНДС.ПолучитьСтавкуНДСБезНДС();
				
			КонецЕсли;
		
		КонецЕсли;
		
	Иначе
		
		ВидНалога = Неопределено;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ВидНалога") Тогда
			ВидНалога = ТекущаяСтрока.ВидНалога;
		ИначеЕсли СтруктураПараметровДействия.Свойство("ВидНалога") Тогда
			ВидНалога = СтруктураПараметровДействия.ВидНалога;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидНалога)
			И ВидНалога <> Перечисления.ТипыСистемНалогообложенияККТ.ОСН 
			И НЕ (ВидНалога = Перечисления.ТипыСистемНалогообложенияККТ.ЕСН
			И СтруктураПараметровДействия.Дата >= УчетНДС.ДатаПереходногоПериода()) Тогда
			
			ОпределятьПризнакПлательщикаНДС = Ложь;
			
		КонецЕсли;
		
		Если ОпределятьПризнакПлательщикаНДС Тогда
			
			Склад = Неопределено;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Склад") Тогда
				Склад = ТекущаяСтрока.Склад;
			Иначе
				СтруктураПараметровДействия.Свойство("Склад", Склад);
			КонецЕсли;
			
			Организация = Неопределено;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Организация") Тогда
				Организация = ТекущаяСтрока.Организация;
			Иначе
				СтруктураПараметровДействия.Свойство("Организация", Организация);
			КонецЕсли;
			
			Магазин = Неопределено;
			Если НЕ СтруктураПараметровДействия.Свойство("Магазин", Магазин) Тогда
				Магазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "Магазин");
			КонецЕсли;
			
			РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяСтрока.Номенклатура,"ТоварнаяГруппа, СтавкаНДС");
			
			ПрименяетсяНДС = УчетНДС.ПрименяетсяНДС(
				СтруктураПараметровДействия.Дата,
				Организация,
				Магазин,
				Склад,
				РеквизитыНоменклатуры.ТоварнаяГруппа);
			
			Если ПрименяетсяНДС Тогда
				
				СтавкаНДС = УчетНДС.СкорректироватьСтавкуНДС(РеквизитыНоменклатуры.СтавкаНДС, СтруктураПараметровДействия.Дата);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтавкаНДС) Тогда
		СтавкаНДС = СтавкаНДСПоУмолчанию;
	КонецЕсли;
	
	ТекущаяСтрока.СтавкаНДС = СтавкаНДС;
	
КонецПроцедуры

// Возвращает коэффициенты по РНПТ для указанной Организации и списка товаров.
//
// Параметры:
//	ИсключаемыйДокумент - ДокументСсылка - документ, движения которого исключаются при расчета коэффициента по РНПТ.
//	Организация - СправочникСсылка.Организации - организация, для которой рассчитываются коэффициенты по РНПТ.
//	Товары - ТаблицаЗначений - таблица, содержащая сведения о товарах.
//	КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке данных.
//	
// Возвращаемое значение:
//	ТаблицаЗначений - см. описание РегистрыНакопления.ТоварыОрганизаций.ПолучитьКоэффициентыПрослеживаемыхТоваров().
//
Функция ПолучитьКоэффициентРНПТ(ИсключаемыйДокумент, Организация, Товары, КэшированныеЗначения) Экспорт
	
	Коэффициенты = РегистрыНакопления.ТоварыОрганизаций.ПолучитьКоэффициентыПрослеживаемыхТоваров(ИсключаемыйДокумент,
																									Организация,
																									Товары);
	
	Возврат Коэффициенты;
	
КонецФункции

Процедура ЗаполнитьСлужебныеРеквизиты(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСлужебныеРеквизиты", СтруктураПараметровДействия) Тогда
		
		ЗаполняемыеРеквизиты = Новый Структура;
		Если СтруктураПараметровДействия.Свойство("ТребуетВзвешивания") Тогда
			ЗаполняемыеРеквизиты.Вставить("ТребуетВзвешивания", Ложь);
		КонецЕсли;
		
		Если СтруктураПараметровДействия.Свойство("ПроизвольнаяЕдиницаУчета") Тогда
			ЗаполняемыеРеквизиты.Вставить("ПроизвольнаяЕдиницаУчета", Ложь);
		КонецЕсли;
		
		Если СтруктураПараметровДействия.Свойство("СкоропортящаясяПродукция") Тогда
			ЗаполняемыеРеквизиты.Вставить("СкоропортящаясяПродукция", Ложь);
		КонецЕсли;
		
		Если СтруктураПараметровДействия.Свойство("ЕдиницаИзмерения") Тогда
			ЗаполняемыеРеквизиты.Вставить("ЕдиницаИзмерения");
		КонецЕсли;
		
		Если ЗаполняемыеРеквизиты.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Номенклатура")
			И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЕСТЬNULL(ВидыНоменклатуры.ТочностьУказанияСрокаГодностиСерии, ЗНАЧЕНИЕ(Перечисление.ТочностиУказанияСрокаГодности.СТочностьюДоДней)) = ЗНАЧЕНИЕ(Перечисление.ТочностиУказанияСрокаГодности.СТочностьюДоЧасов) КАК СкоропортящаясяПродукция,
			|	ЕСТЬNULL(ОписаниеИС.КоличествоВПотребительскойУпаковке, 1) = 0
			|		ИЛИ СправочникНоменклатура.Весовой КАК ТребуетВзвешивания,
			|	ЕСТЬNULL(ОписаниеИС.КоличествоВПотребительскойУпаковке, 1) <> 1
			|		ИЛИ ЕСТЬNULL(ОписаниеИС.ЕмкостьПотребительскойУпаковки, 1) > 1
			|		ИЛИ ОписаниеИС.Номенклатура ЕСТЬ NULL
			|			И СправочникНоменклатура.ОсобенностьУчета В (ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС), ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС),
			|				ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Пиво), ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезалкогольноеПиво), ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС))
			|			И СправочникНоменклатура.Весовой КАК ПроизвольнаяЕдиницаУчета,
			|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
			|ИЗ
			|	Справочник.Номенклатура КАК СправочникНоменклатура
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
			|		ПО СправочникНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
			|			И (ВидыНоменклатуры.ИспользоватьСерии)
			|			И (ВидыНоменклатуры.ИспользоватьСрокГодностиСерии)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеИС
			|		ПО СправочникНоменклатура.Ссылка = ОписаниеИС.Номенклатура
			|ГДЕ
			|	СправочникНоменклатура.Ссылка = &Номенклатура";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(ЗаполняемыеРеквизиты, Выборка);
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ЗаполняемыеРеквизиты);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтрокаКоллекцииИмеетСвойство(СтрокаКоллекции, ИмяСвойства)
	
	РезультатФункции = Ложь;
	
	Если ТипЗнч(СтрокаКоллекции) = Тип("СтрокаТаблицыЗначений") Тогда
		ТаблицаРодитель = СтрокаКоллекции.Владелец();
		Если Не ТаблицаРодитель.Колонки.Найти(ИмяСвойства) = Неопределено Тогда
			РезультатФункции = Истина;
		КонецЕсли;
	ИначеЕсли СтрокаКоллекции.Свойство(ИмяСвойства) Тогда
		РезультатФункции = Истина;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти

#Область АгентскоеВознаграждение

Функция ТекстЗапросДанныеАгентскогоДоговора()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаИсточник.*,
		|	ЕСТЬNULL(ПроцентыВознагражденияПоДоговорамСрезПоследних.ПроцентВознаграждения, ДоговорыКонтрагентов.ПроцентКомиссионногоВознаграждения) КАК ПроцентВознаграждения,
		|	ДоговорыКонтрагентов.АвтоматическиВыделятьВознаграждениеВЧеке КАК АвтоматическиВыделятьВознаграждениеВЧеке,
		|	ДоговорыКонтрагентов.ВознаграждениеВключеноВСтоимость КАК ВознаграждениеВключеноВСтоимость,
		|	ДоговорыКонтрагентов.УслугаКомиссионногоВознаграждения КАК УслугаАгента,
		|	ЕстьNull(ДоговорыКонтрагентов.ПризнакАгента В (
		|		ЗНАЧЕНИЕ(Перечисление.ПризнакиАгента.Агент),
		|		ЗНАЧЕНИЕ(Перечисление.ПризнакиАгента.БанковскийПлатежныйАгент),
		|		ЗНАЧЕНИЕ(Перечисление.ПризнакиАгента.БанковскийПлатежныйСубагент),
		|		ЗНАЧЕНИЕ(Перечисление.ПризнакиАгента.ПлатежныйАгент),
		|		ЗНАЧЕНИЕ(Перечисление.ПризнакиАгента.ПлатежныйСубагент)), Ложь) КАК ДоговорПлатежногоАгента
		|ИЗ
		|	ТаблицаИсточник КАК ТаблицаИсточник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ТаблицаИсточник.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцентыВознагражденияПоДоговорам.СрезПоследних(&Период, ) КАК ПроцентыВознагражденияПоДоговорамСрезПоследних
		|		ПО ТаблицаИсточник.ДоговорКонтрагента = ПроцентыВознагражденияПоДоговорамСрезПоследних.ДоговорКонтрагента
		|			И ТаблицаИсточник.Номенклатура = ПроцентыВознагражденияПоДоговорамСрезПоследних.Номенклатура";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьДанныеАгентскогоДоговора(Объект)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ВидОперации")
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаИсточник = 
		"ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА &ДоговорКонтрагентаШапка = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|			ТОГДА ТаблицаТоваров.ДоговорКонтрагента
		|		ИНАЧЕ &ДоговорКонтрагентаШапка
		|	КОНЕЦ КАК ДоговорКонтрагента,
		|	ТаблицаТоваров.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ТаблицаИсточник
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров";
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ТекстЗапросаИсточник);
	ТекстыЗапроса.Добавить(ТекстЗапросДанныеАгентскогоДоговора());
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());

	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ДоговорКонтрагента") Тогда
		ДоговорКонтрагентаШапка = Объект.ДоговорКонтрагента;
	Иначе
		ДоговорКонтрагентаШапка = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", Объект.Товары.Выгрузить(,"НомерСтроки, Номенклатура, ДоговорКонтрагента"));
	Запрос.УстановитьПараметр("ДоговорКонтрагентаШапка", ДоговорКонтрагентаШапка);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ДоговорПлатежногоАгента И Выборка.АвтоматическиВыделятьВознаграждениеВЧеке Тогда
			ДанныеАгентскогоДоговора = ДанныеАгентскогоДоговораШаблон();
			ЗаполнитьЗначенияСвойств(ДанныеАгентскогоДоговора, Выборка);
		Иначе
			ДанныеАгентскогоДоговора = Неопределено;
		КонецЕсли;
		
		Объект.Товары[Выборка.НомерСтроки - 1].ДанныеАгентскогоДоговора = ДанныеАгентскогоДоговора;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеАгентскогоДоговораШаблон()
	ДанныеАгентскогоДоговора = Новый Структура;
	ДанныеАгентскогоДоговора.Вставить("ПроцентВознаграждения");
	ДанныеАгентскогоДоговора.Вставить("ВознаграждениеВключеноВСтоимость");
	ДанныеАгентскогоДоговора.Вставить("УслугаАгента");
	
	Возврат ДанныеАгентскогоДоговора;
КонецФункции

#КонецОбласти

#КонецОбласти

