
#Область ПрограммныйИнтерфейс

// Создает новый криптопровайдер WSSocket, подключая и инициализируя внешнюю компоненту для работы с криптографией.
//
// Параметры:
//  УникальныйИдентификаторФормыКлиента - Любой      - Идентификатор формы клиента, необходимый для временного хранения ссылки на модуль.
//  РежимТишины                        - Булево     - Флаг активации "тихого режима" работы. Если Истина, исключения не вызываются.
//  ТолькоПодключение                  - Булево     - Флаг, указывающий, нужно ли только подключить внешнюю компоненту без создания криптопровайдера.
//
// Возвращаемое значение:
//   Объект                            - Экземпляр криптопровайдера, если подключение выполнено успешно.
//   Неопределено                      - Если режим тишины активен и подключение не удалось.
//
Асинх Функция НовыйКриптопровайдерWSSocket(УникальныйИдентификаторФормыКлиента = Неопределено, РежимТишины = Ложь, ТолькоПодключение = Ложь) Экспорт
	
	// Для сохранения ссылки в контексте перехода с клиента на сервер (в случае если криптопровацйдер создается на клиенте),
	// выделение адреса ссылки происходит в контексте вызова (на клиенте)
	СсылкаНаМодуль = КриптографияКлиентСервер.АдресБиблиотекиКриптографииНЦА(УникальныйИдентификаторФормыКлиента);
	
	Если ТипЗнч(ПолучитьИзВременногоХранилища(СсылкаНаМодуль)) <> Тип("ДвоичныеДанные") Тогда
		СсылкаНаМодуль = "ОбщийМакет.КомпонентаКриптографииWSCrypto";
	КонецЕсли;
	
	УдалосьПодключить =  Ждать ПодключитьВнешнююКомпонентуАсинх(СсылкаНаМодуль,
		КриптографияКлиентСервер.ИмяКомпонентыКриптографииНЦА(),
		ТипВнешнейКомпоненты.Native,
		ТипПодключенияВнешнейКомпоненты.НеИзолированно
	);
	
	Если УдалосьПодключить Тогда
		
		Криптопровайдер = Новый(КриптографияКлиентСервер.ИмяОбъектаКриптографииНЦА());
		
	Иначе
		
		#Если Сервер ИЛИ ВнешнееСоединение Тогда
			Если РежимТишины Тогда
				Возврат Неопределено;
			Иначе
				// Это сервер. На сервере НЕ требуется установка внешней компоненты перед подключением.
				ВызватьИсключение НСтр("ru = 'Не удалось подключить внешнюю компоненту для работы с криптографией.'");
			КонецЕсли;
			
		#Иначе
			
			//Если НЕ ТолькоПодключение Тогда
				
				//внешнюю компоненту WSCrypto можно попробовать установить сразу
				Попытка
					Ждать УстановитьВнешнююКомпонентуАсинх(СсылкаНаМодуль);
					УдалосьПодключить = Ждать ПодключитьВнешнююКомпонентуАсинх(СсылкаНаМодуль,
						КриптографияКлиентСервер.ИмяКомпонентыКриптографииНЦА(),
						ТипВнешнейКомпоненты.Native,
						ТипПодключенияВнешнейКомпоненты.НеИзолированно
					);
					Если УдалосьПодключить Тогда
						Криптопровайдер = Новый(КриптографияКлиентСервер.ИмяОбъектаКриптографииНЦА());
					КонецЕсли;
				Исключение
					КриптографияВызовСервера.СоздатьЗаписьЖурналаРегистрации(
						НСтр("ru = 'Не удалось установить внешнюю компоненту работы с криптографией.'"),
						"Ошибка",,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				
			//КонецЕсли;
			
		#КонецЕсли
		
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(СсылкаНаМодуль) Тогда
		УдалитьИзВременногоХранилища(СсылкаНаМодуль);
	КонецЕсли;
	
	Если НЕ ТолькоПодключение И КриптографияКлиентСервер.ВерсияКомпонентыНЦАВБазе() > СтрЗаменить(Ждать Криптопровайдер.ПолучитьВерсияАсинх(), ",", ".") Тогда 
		ВызватьИсключение НСтр("ru = 'Новая версия библиотеки работы с NCA Layer загружена в информационную базу, требуется обновление на компьютере пользователя. Обновление доступно в настройках электронных счетов-фактур.'");
	КонецЕсли;
	
	Возврат Криптопровайдер;
	
КонецФункции

#КонецОбласти