
#Область ОбработчикиСобытий

// Серверные обработчики элементов прикладных форм
//
// Параметры:
//   Форма                   - УправляемаяФорма - форма, из которой происходит вызов процедуры.
//   Элемент                 - Произвольный     - элемент-источник события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Возникает на сервере при создании формы.
//
// Параметры:
//  Форма - УправляемаяФорма - создаваемая форма,
//  Отказ - Булево - признак отказа от создания формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки.
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт

	Если ВРег(СтрРазделить(Форма.ИмяФормы, ".")[0]) = "ДОКУМЕНТ"
		Или ВРег(СтрРазделить(Форма.ИмяФормы, ".")[0]) = "СПРАВОЧНИК" Тогда
		// СтандартныеПодсистемы.ПодключаемыеКоманды
		ПодключаемыеКоманды.ПриСозданииНаСервере(Форма);
		// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	КонецЕсли;
	
	Если ОбщегоНазначенияИСМПТКПереопределяемый.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов")
		И Не ВРег(СтрРазделить(Форма.ИмяФормы, ".")[0]) = "ОБЩАЯФОРМА" Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначенияИСМПТКПереопределяемый.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЧтенииНаСервере(ТекущийОбъект, Форма) Экспорт
	
	Если ОбщегоНазначенияИСМПТКПереопределяемый.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначенияИСМПТКПереопределяемый.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
//          См. справочную информацию по событиям управляемой формы.
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект = Неопределено, ПараметрыЗаписи = Неопределено)Экспорт
	
	Если ОбщегоНазначенияИСМПТКПереопределяемый.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначенияИСМПТКПереопределяемый.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюНаСервере(Форма, Объект, ПараметрыЗаписи) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ПриСозданииНаСервере_НастроитьПодключаемоеОборудование(Форма, ДопПараметры = Неопределено) Экспорт
	
	Если Не ДопПараметры = Неопределено
		И ДопПараметры.Свойство("ПрефиксыЭлементовФормы") Тогда
		ПрефиксыЭлементовФормы = ДопПараметры.ПрефиксыЭлементовФормы;
	Иначе
		ПрефиксыЭлементовФормы = "";
	КонецЕсли;
	
	ИнтеграцияИСРТ.НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы);

КонецПроцедуры

//Используется в формах настроек маркировки 
//
Процедура ОбновитьФормуНастройкиПриЗаписиПодчиненныхКонстант(Форма, КонстантаИмя, КонстантаЗначение) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает условное оформление для поля "Характеристика".
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой нужно установить условное оформление,
//  ИмяПоляВводаХарактеристики - Строка - имя элемента формы "Характеристика",
//  ПутьКПолюОтбора - Строка - полный путь к реквизиту "Характеристики используются".
Процедура УстановитьУсловноеОформлениеХарактеристикНоменклатуры(Форма, ИмяПоляВводаХарактеристики = "ТоварыХарактеристика", ПутьКПолюОтбора = "Объект.Товары.ХарактеристикиИспользуются") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
																
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаХарактеристики].Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(192,192,192));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(КоллекцияДанных, СтруктураДействий, СтрокиЗаполнения = Неопределено) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакИспользованияХарактеристик(ТаблицаФормы, ПараметрыЗаполнения = Неопределено, НомерСтроки = Неопределено) Экспорт
	
	Перем СуффиксДопРеквизита;
	
	Если ТаблицаФормы.Количество() = 0
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаполнения <> Неопределено Тогда
		
		ПараметрыЗаполнения.Свойство("СуффиксДопРеквизита",СуффиксДопРеквизита);	
		
	КонецЕсли;
	
	Если НомерСтроки = Неопределено Тогда
		Запрос = Новый Запрос;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки,";
		Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
			ТекстЗапроса = ТекстЗапроса + "	
		|	ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +"  КАК Номенклатура" + СуффиксДопРеквизита +","; 
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "	
		|	ТаблицаТоваров.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки,";
		Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
			ТекстЗапроса = ТекстЗапроса + "	
			|	ВЫБОР
			|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
			|				ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)	
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ХарактеристикиИспользуются" + СуффиксДопРеквизита +",";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "	
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
		|			ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются
		|ИЗ
		|	ТаблицаТоваров КАК ТаблицаТоваров
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		Запрос.Текст = ТекстЗапроса;
		
		СтрокаДопРеквизитов = ?(Не ЗначениеЗаполнено(СуффиксДопРеквизита), "", ",Номенклатура"+СуффиксДопРеквизита);
		Запрос.УстановитьПараметр("ТаблицаТоваров",  ТаблицаФормы.Выгрузить(,"НомерСтроки,Номенклатура"+СтрокаДопРеквизитов));
		
		ТаблицаПризнаков = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрТабл Из ТаблицаФормы Цикл
			
			СтрокаХарактеристик = ТаблицаПризнаков[СтрТабл.НомерСтроки-1];
			
			СтрТабл.ХарактеристикиИспользуются = СтрокаХарактеристик.ХарактеристикиИспользуются;
			Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
				СтрТабл["ХарактеристикиИспользуются"+СуффиксДопРеквизита] = СтрокаХарактеристик["ХарактеристикиИспользуются"+СуффиксДопРеквизита];
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		ОбрабатываемаяСтрока = ТаблицаФормы.НайтиПоИдентификатору(НомерСтроки);
		Запрос = Новый Запрос;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	1 КАК НомерСтроки,";
		Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
			ТекстЗапроса = ТекстЗапроса + "	
		|	ТаблицаТоваров" + СуффиксДопРеквизита +"  КАК Номенклатура" + СуффиксДопРеквизита +","; 
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "	
		|	ТаблицаТоваров.Ссылка КАК Номенклатура
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	Справочник.Номенклатура КАК ТаблицаТоваров
		|ГДЕ
		|	ТаблицаТоваров.Ссылка = &Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки,";
		Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
			ТекстЗапроса = ТекстЗапроса + "	
			|	ВЫБОР
			|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
			|				ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)	
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ХарактеристикиИспользуются" + СуффиксДопРеквизита +",";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "	
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
		|			ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются
		|ИЗ
		|	ТаблицаТоваров КАК ТаблицаТоваров
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Номенклатура", ОбрабатываемаяСтрока.Номенклатура);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОбрабатываемаяСтрока.ХарактеристикиИспользуются = Выборка.ХарактеристикиИспользуются;
			Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
				ОбрабатываемаяСтрока["ХарактеристикиИспользуются" + СуффиксДопРеквизита] = Выборка["ХарактеристикиИспользуются" + СуффиксДопРеквизита];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьПризнакИспользованияХарактеристикВРабочемМесте(ТаблицаФормы) Экспорт
	
	Если ТаблицаФормы.Количество() = 0
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновленнаяТаблицаФормы = ТаблицаФормы.Выгрузить();
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
	|				ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
	|				ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ТаблицаТоваров.Номенклатура";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТаблицаТоваров", ОбновленнаяТаблицаФормы);
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		
		Номенклатура = Выборка.Номенклатура;
		ХарактеристикиИспользуются = Выборка.ХарактеристикиИспользуются;
		
		СтрокиДляУстановкиПризнака = ОбновленнаяТаблицаФормы.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
		
		Для Каждого Строка Из СтрокиДляУстановкиПризнака Цикл
			Строка.ХарактеристикиИспользуются = ХарактеристикиИспользуются;
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаФормы.Загрузить(ОбновленнаяТаблицаФормы);
		
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеХарактеристикНоменклатурыВРабочемМесте(Форма, ДанныеНоменклатура, ДанныеХарактеристика) Экспорт
	
	Элементы = Форма.Элементы;
	
	//НОМЕНКЛАТУРА//
	УстанавливатьДляНоменклатуры = ДанныеНоменклатура.Использовать;
	ИмяПоляНоменклатура	 		 = ДанныеНоменклатура.ИмяПоля;
	ПутьКПолюНоменклатура		 = ДанныеНоменклатура.ПутьКПолю;
	
	Если УстанавливатьДляНоменклатуры Тогда 
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяПоляНоменклатура].Имя);
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюНоменклатура);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(192,192,192));
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<штрихкод товара не зарегистрирован>'"));
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	КонецЕсли;

	Если Не ИнтеграцияИСМПТКПереопределяемый.ПроверитьИспользованиеХарактеристик() Тогда
		Возврат;
	КонецЕсли;
	
	//ХАРАКТЕРИСТИКИ//
	УстанавливатьДляХарактеристики = ДанныеХарактеристика.Использовать;
	ИмяПоляХарактеристика   	   = ДанныеХарактеристика.ИмяПоля;
	ПутьКПолюХарактеристика		   = ДанныеХарактеристика.ПутьКПолю;
	
	Если УстанавливатьДляХарактеристики Тогда
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяПоляХарактеристика].Имя);
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюХарактеристика);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(192,192,192));
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	КонецЕсли;

КонецПроцедуры

//В функции определяются значения параметров отображения элементов на форме настроек обмена с ИС МПТ.
//Возвращаемое значение - массив, где каждый элемент - структура.
//Обязательный шаблон структуры:
//"ИмяЭлементаФормы, Свойство, Значение";
//
Функция ПолучитьСписокПереопределяемыхНастроекФормыОбменаИСМПТ() Экспорт
	
	МассивПараметров = Новый Массив();
	ВидимостьВидыНоменклатуры = ПравоДоступа("Просмотр", Метаданные.Справочники.ВидыНоменклатуры);
	СтруктураПараметра = Новый Структура("ИмяЭлементаФормы, Свойство, Значение", "РозничныеПродажи", "Видимость", Истина);
	МассивПараметров.Добавить(СтруктураПараметра);
	
	Возврат МассивПараметров;
	
КонецФункции

//В функции определяются значения параметров отображения элементов на форме рабочего места ИС МПТ.
//Возвращаемое значение - массив, где каждый элемент - структура.
//Обязательный шаблон структуры:
//"ИмяЭлементаФормы, Свойство, Значение";
//
Функция ПолучитьСписокПереопределяемыхНастроекФормыОсновноеРабочееМестоИСМПТ() Экспорт

	МассивПараметров = Новый Массив();
	
	ВидимостьНоменклатура = ПравоДоступа("Просмотр", Метаданные.Справочники.Номенклатура);
	СтруктураПараметра = Новый Структура("ИмяЭлементаФормы, Свойство, Значение", "ОткрытьНоменклатуру", "Видимость", ВидимостьНоменклатура);
	МассивПараметров.Добавить(СтруктураПараметра);
	
	ВидимостьВидыНоменклатуры = ПравоДоступа("Просмотр", Метаданные.Справочники.ВидыНоменклатуры);
	СтруктураПараметра = Новый Структура("ИмяЭлементаФормы, Свойство, Значение", "ОткрытьВидыНоменклатуры", "Видимость", ВидимостьВидыНоменклатуры);
	МассивПараметров.Добавить(СтруктураПараметра);
	
	Возврат МассивПараметров;	
	
КонецФункции

//Используется в формах настроек учета товарных групп (включение маркировки)
//
Функция ПроверитьВозможностьИзменения(ОбъектПутьКДанным, Форма) Экспорт
	 
	Если НРег(Лев(ОбъектПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(ОбъектПутьКДанным, 15);
		
		Если КонстантаИмя <> "ВестиУчетМаркируемогоТабакаИСМПТК"
			И КонстантаИмя <> "ВестиУчетМаркируемойОбувиИСМПТК"
			И КонстантаИмя <> "ВестиУчетМаркируемыхЛекарствИСМПТК"
			И КонстантаИмя <> "ВестиУчетМаркируемойМолочкиИСМПТК"
			И КонстантаИмя <> "ВестиУчетМаркируемогоАлкоголяИСМПТК"
			И КонстантаИмя <> "ВестиУчетМаркируемогоТекстиляИСМПТК" Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
		Если КонстантаИмя = "ВестиУчетМаркируемогоТабакаИСМПТК" Тогда
			ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция;
		ИначеЕсли КонстантаИмя = "ВестиУчетМаркируемойОбувиИСМПТК" Тогда
			ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция;
		ИначеЕсли КонстантаИмя = "ВестиУчетМаркируемойМолочкиИСМПТК" Тогда
			ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС;
		ИначеЕсли КонстантаИмя = "ВестиУчетМаркируемогоАлкоголяИСМПТК" Тогда
			ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция;
		ИначеЕсли КонстантаИмя = "ВестиУчетМаркируемогоТекстиляИСМПТК" Тогда
			ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность;
		ИначеЕсли КонстантаИмя = "ВестиУчетМаркируемыхЛекарствИСМПТК" Тогда
			ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ЛекарственныеПрепараты;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = Форма.НаборКонстант[КонстантаИмя];  // Новое значение константы
		
		// При включении ведения маркировки проверка не выполняется 
		Если КонстантаЗначение = Истина Тогда
			Возврат Истина;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ОсобенностьУчета = &ОсобенностьУчета
		|	И НЕ Номенклатура.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ОсобенностьУчета", ОсобенностьУчета);
		
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			Форма.НаборКонстант[КонстантаИмя] = КонстантаМенеджер.Получить();
			ТекстСообщения = НСтр("ru='В информационной базе уже зарегистрирована номенклатура с особенностью учета ""%1""! Данные не сохранены.'");
			ТекстСообщения = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ОсобенностьУчета);
			ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
			
КонецФункции

#КонецОбласти