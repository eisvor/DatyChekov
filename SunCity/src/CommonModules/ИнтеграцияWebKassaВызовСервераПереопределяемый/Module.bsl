#Область Прочее

// Функция возвращает список касс ККМ
//
Функция ПолучитьСписокКассККМ(ПодключаемоеОборудование) Экспорт

	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	СписокКассККМ = Новый Массив();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КассыККМ.Ссылка,
	|	КассыККМ.Наименование
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.РабочееМесто = &РабочееМесто
	|	И КассыККМ.ПодключаемоеОборудование = &ПодключаемоеОборудование
	|	И КассыККМ.ПометкаУдаления = Ложь");
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Запрос.УстановитьПараметр("ПодключаемоеОборудование", ПодключаемоеОборудование);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КассаККМ = Новый Структура;
		КассаККМ.Вставить("Ссылка",      Выборка.Ссылка);
		КассаККМ.Вставить("Наименование",Выборка.Наименование);
		СписокКассККМ.Добавить(КассаККМ);
	КонецЦикла;
	
	Возврат СписокКассККМ;
	
КонецФункции

// Функция возвращает сведения об организации
//
Функция ПолучитьСведенияОбОрганизации(Организация, ДатаПериода) Экспорт
	
	Сведения = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(Организация,ДатаПериода);
	НДС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация,"СерияСвидетельстваПоНДС, НомерСвидетельстваПоНДС");
	Сведения.Вставить("СерияСвидетельстваПоНДС",НДС.СерияСвидетельстваПоНДС);
	Сведения.Вставить("НомерСвидетельстваПоНДС",НДС.НомерСвидетельстваПоНДС);
	Сведения.Вставить("ПризнакЮрЛица", ?(Сведения.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, Истина, Ложь));
	//Имя кассира
	Кассир = "";
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияКлиентСерверПереопределяемый.ОбработкаЗаполненияИмяКассира(Кассир, СтандартнаяОбработка); 
	Кассир = ?(Не СтандартнаяОбработка, Кассир, НСтр("ru='Администратор'")); 
	Сведения.Вставить("Кассир", Кассир);
	Возврат Сведения;
	
КонецФункции

// Функция возвращает параметры кассы ККМ
//
Функция ПолучитьРеквизитыКассы(КассаККМ) Экспорт
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КассаККМ,"СерийныйНомер, РегистрационныйНомер, Наименование, Владелец");
	//Реквизиты.Вставить("Кассир",ПолучитьКассираКассовойСмены(КассаККМ));
	//Имя кассира
	Кассир = "";
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияКлиентСерверПереопределяемый.ОбработкаЗаполненияИмяКассира(Кассир, СтандартнаяОбработка); 
	Кассир = ?(Не СтандартнаяОбработка, Кассир, НСтр("ru='Администратор'")); 
	Реквизиты.Вставить("Кассир", Кассир);
	Возврат Реквизиты;
	
КонецФункции

// Функция возвращает кассира для кассовой смены кассы ККМ
//
Функция ПолучитьКассираКассовойСмены(КассаККМ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КассоваяСмена.Кассир.Наименование КАК Кассир
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.Проведен
	|	И КассоваяСмена.КассаККМ = &КассаККМ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КассоваяСмена.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Кассир;
	Иначе
		Возврат "";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Функция возвращает сведения об организации и параметры кассы ККМ
//
Функция ПолучитьСведенияОбОрганизацииИКассеККМ(Организация, ДатаПериода, КассаККМ) Экспорт
	
	Если Организация=Неопределено Тогда 
		 Организация = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КассаККМ,"Владелец").Владелец;
	КонецЕсли;
	Сведения = ПолучитьСведенияОбОрганизации(Организация,ДатаПериода);
	РеквизитыКассыККМ = ПолучитьРеквизитыКассы(КассаККМ);
	Сведения.Вставить("СерийныйНомер",РеквизитыКассыККМ.СерийныйНомер);
	Сведения.Вставить("РегистрационныйНомер",РеквизитыКассыККМ.РегистрационныйНомер);
	Сведения.Вставить("Кассир",РеквизитыКассыККМ.Кассир);
	Сведения.Вставить("ОрганизацияСсылка",Организация);
	
	Возврат Сведения;
	
КонецФункции

// Функция возвращает сведения об организации и параметры кассы ККМ по документу
//
Функция ПолучитьСведенияОбОрганизацииИКассеККМПоДокументу(Документ, КассаККМ) Экспорт
	
	Возврат ПолучитьСведенияОбОрганизацииИКассеККМ(Документ.Организация, Документ.Дата, КассаККМ);
	
КонецФункции

// Функция возвращает параметры подключаемого оборудования
//
Функция ПолучитьСерийныйНомерУстройства(ПодключаемоеОборудование) Экспорт
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПодключаемоеОборудование,"СерийныйНомер, ДрайверОборудования, РабочееМесто, Параметры");
	Возврат Реквизиты.СерийныйНомер;
	
КонецФункции

//Функция вызывает стандартную проверку, чтобы определить включена ли ф.о "Использовать подключаемое оборудование"
//
Функция ИспользоватьПодключаемоеОборудование() Экспорт
	
	Возврат ОбщегоНазначенияРТ.ИспользоватьПодключаемоеОборудование();
	
КонецФункции

// Функция регистрирует новое подключаемое оборудование с драйвером 1С:WebKassa.
//
Функция СоздатьПодключаемоеОборудованиеWebkassa(Организация, Наименование = "", СерийныйНомер) Экспорт
	
	Результат = Истина;
	
	Если Не ЗначениеЗаполнено(Организация)
		Или Не ЗначениеЗаполнено(СерийныйНомер) Тогда
		Результат = Ложь;
		Возврат Результат;
	КонецЕсли;
	
	НовыеЗначениеПараметров = Новый Структура;
	НовыеЗначениеПараметров.Вставить("АвтоматическаяПечатьЧека", Ложь);
	НовыеЗначениеПараметров.Вставить("ШиринаЛенты"             , Неопределено);
	//МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	
	НовоеОборудование = Справочники.ПодключаемоеОборудование.СоздатьЭлемент();
	НовоеОборудование.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор;
	НовоеОборудование.ДрайверОборудования = Справочники.ДрайверыОборудования.ДрайверWebkassaФискальныеРегистраторы;
	НовоеОборудование.УстройствоИспользуется = Истина;
	НовоеОборудование.Организация = Организация;
	НовоеОборудование.Параметры = НовыеЗначениеПараметров;
	НовоеОборудование.РабочееМесто = РабочееМесто;
	НовоеОборудование.СерийныйНомер = СерийныйНомер;
	
	ШаблонНаименования = НСтр("ru = '''1С:WebKassa''- %1 (%2) на %3'");
	ШаблонНаименования = СтрЗаменить(ШаблонНаименования, "%1", Наименование);
	ШаблонНаименования = СтрЗаменить(ШаблонНаименования, "%2", СерийныйНомер);
	ШаблонНаименования = СтрЗаменить(ШаблонНаименования, "%3", РабочееМесто);
	НовоеОборудование.Наименование = ШаблонНаименования;
	Попытка
		НовоеОборудование.Записать();
		Результат = НовоеОборудование.Ссылка;
	Исключение
		Результат = Ложь;
		ТекстСообщения = НСтр("ru = 'Не удалось создать подключаемое оборудование по причине: %Причина%'");
		//ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Организация);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(ИнтеграцияWebKassaКлиентСервер.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
			НовоеОборудование.Ссылка.Метаданные(), , ТекстСообщения);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ИзменитьСерийныйНомерОборудования(Оборудование, НовыйСерийныйНомер) Экспорт
	
	Результат = Ложь;
	
	НачатьТранзакцию();
	
	Попытка
		
		// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Оборудование.Ссылка.Метаданные().ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Оборудование.Ссылка);
		Блокировка.Заблокировать();
		
		ОбъектДляОбработки = Оборудование.Ссылка.ПолучитьОбъект();
		Если ОбъектДляОбработки = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		ОбъектДляОбработки.СерийныйНомер = НовыйСерийныйНомер;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектДляОбработки, Истина, Истина);
		
		ЗафиксироватьТранзакцию();
		
		Результат = Истина;
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = НСтр("ru = 'Не удалось серийный номер %Ссылка% по причине: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Оборудование.Ссылка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(ИнтеграцияWebKassaКлиентСервер.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
			Оборудование.Ссылка.Метаданные(), Оборудование.Ссылка, ТекстСообщения);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьНаименованиеЕдиницыИзмерения(КодЕдиницыИзмерения = "") Экспорт
	
	Результат = "";
	Если Не ЗначениеЗаполнено(КодЕдиницыИзмерения) Тогда
		Возврат Результат;
	КонецЕсли;
	
	//ищем единицу измерения по справочнику
	ЕдиницаИзмерения = Справочники.БазовыеЕдиницыИзмерения.НайтиПоКоду(КодЕдиницыИзмерения, Ложь);
	Если Не ЕдиницаИзмерения = Справочники.БазовыеЕдиницыИзмерения.ПустаяСсылка() Тогда
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдиницаИзмерения, "Наименование");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Значение реквизита, прочитанного из информационной базы по ссылке на объект.
//
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

// Возвращает макет печатной формы по полному пути к макету.
//
Функция ПолучитьМакетПечатнойФормы(ИмяМакета) Экспорт
	
	Возврат УправлениеПечатью.МакетПечатнойФормы(ИмяМакета);
	
КонецФункции

// Возвращает двоичные данные для формирования QR кода.
//
Функция ПолучитьQRКод(QRСтрока, УровеньКоррекции, Размер) Экспорт
	
	Возврат УправлениеПечатью.ДанныеQRКода(QRСтрока, УровеньКоррекции, Размер);
	
КонецФункции

// Проверяет наличие у произвольного объекта реквизита с указанным именем.
//
Функция ЕстьРеквизитОбъекта(Объект, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначенияРТКлиентСервер.ЕстьРеквизитОбъекта(Объект, ИмяРеквизита);
	
КонецФункции

// Подставляет параметры в строку.
//
Функция ПодставитьПараметрыВСтроку(ШаблонСообщения, Параметр1) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Параметр1);
	
КонецФункции

//Выводит сообщение пользователю
//
Процедура СообщитьПользователю(ТекстСообщения, Знач КлючДанных = Неопределено, Знач Поле = "", Знач ПутьКДанным = "") Экспорт
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
		КлючДанных,
		Поле,
		ПутьКДанным);
	
КонецПроцедуры

Процедура УдалитьНепроверяемыеРеквизитыИзМассива(МассивРеквизитов, МассивНепроверяемыхРеквизитов) Экспорт
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(МассивРеквизитов, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

// Получает рабочее место клиента
//
Функция ПолучитьРабочееМестоКлиента() Экспорт
	
	Возврат МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	
КонецФункции

// Получает параметры идентификатора
//
Функция ПолучитьПараметрыУстройства(Идентификатор) Экспорт
	
	Возврат МенеджерОборудованияВызовСервера.ПолучитьПараметрыУстройства(Идентификатор);
	
КонецФункции

#КонецОбласти
