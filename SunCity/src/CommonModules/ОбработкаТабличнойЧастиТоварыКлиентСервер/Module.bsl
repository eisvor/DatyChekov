////////////////////////////////////////////////////////////////////////////////
// ОбработкаТабличнойЧастиТоварыКлиентСервер содержит процедуры и функции 
// для работы с табличными частями товаров документов.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает структуру кэшируемых значений.
//
// Возвращаемое значение:
//  Структура - структура кэшируемых значений.
//
Функция СтруктураКэшируемыхЗначений() Экспорт
	
	КэшированныеЗначения = Новый Структура;
	КэшированныеЗначения.Вставить("КоэффициентыУпаковок", Новый Соответствие);
	КэшированныеЗначения.Вставить("ОбъемУпаковок",        Новый Соответствие);
	КэшированныеЗначения.Вставить("ВесУпаковок",          Новый Соответствие);
	КэшированныеЗначения.Вставить("ПроцентыСтавокНДС",    Новый Соответствие);
	КэшированныеЗначения.Вставить("Штрихкоды",            Новый Соответствие);
	КэшированныеЗначения.Вставить("ИспользоватьРучныеСкидкиВПродажах",         Неопределено);
	КэшированныеЗначения.Вставить("ИспользоватьАвтоматическиеСкидкиВПродажах", Неопределено);
	КэшированныеЗначения.Вставить("ИспользоватьРучныеСкидкиВЗакупках",         Неопределено);
	КэшированныеЗначения.Вставить("КоэффициентыРНПТ", Новый Соответствие);
	
	Возврат КэшированныеЗначения;
	
КонецФункции // ПолучитьСтруктуруКэшируемыеЗначения()

// Возвращает структуру, содержащую поля значений, используемых для заполнения количества по РНПТ в строках табличной
// части документа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - данные формы объекта.
//	ИмяПоляМестоХранения - Строка - имя поля Склад, находящегося в шапке объекта или табличной части.
//	МестоХраненияВТабличнойЧасти - Булево - признак наличия поля Склад в табличной части объекта.
//
// Возвращаемое значение:
//	Структура - см. описание УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ПараметрыПолученияКоэффициентаРНПТ().
//
Функция ПараметрыПолученияКоэффициентаРНПТ(Объект, ИмяПоляМестоХранения = "Склад", МестоХраненияВТабличнойЧасти = Ложь) Экспорт
	
	Возврат УчетПрослеживаемыхТоваровКлиентСерверРТ.ПараметрыПолученияКоэффициентаРНПТ(Объект,
																							ИмяПоляМестоХранения,
																							МестоХраненияВТабличнойЧасти);
	
КонецФункции

// Возвращает структуру, содержащую поля кэшируемой информации, получаемой по штрихкоду товара.
//
// Возвращаемое значение:
//	Структура - структура кэшируемых данных товара, получаемая по штрихкоду товара, со следующими полями:
Функция СтруктураКешируемойИнформацииПоШтрихкоду() Экспорт
	
	ИнформацияПоШтрихкоду = Новый Структура;
	
	ИнформацияПоШтрихкоду.Вставить("Номенклатура");
	ИнформацияПоШтрихкоду.Вставить("Характеристика");
	ИнформацияПоШтрихкоду.Вставить("Упаковка");
	ИнформацияПоШтрихкоду.Вставить("МаркируемаяПродукция", Ложь);
	ИнформацияПоШтрихкоду.Вставить("Штрихкод", "");
	
	Возврат ИнформацияПоШтрихкоду;
	
КонецФункции

// Рассчитывает сумму НДС от суммы в зависимости от включения НДС в цену.
//
// Параметры:
//  ЦенаВключаетНДС - Булево - Признак включения НДС в цену.
//  ПроцентНДС      - Число - Ставка НДС числом.
//  Сумма           - Число - Сумма, от которой необходимо рассчитать сумму НДС.
//
// Возвращаемое значение:
//  Число - сумма ндс.
//
Функция СуммаНДС(Сумма, СтавкаНДС, ЦенаВключаетНДС = Истина) Экспорт
	
	Если Не ЦенаВключаетНДС = Истина Тогда
		ЦенаВключаетНДС = Ложь;
	КонецЕсли;
	
	ПроцентНДС = 0;
	Если ТипЗнч(СтавкаНДС) = Тип("СправочникСсылка.СтавкиНДС") Тогда
		ПроцентНДС = ОбработкаТабличнойЧастиТоварыСерверПовтИсп.СтавкаНДСЧислом(СтавкаНДС);
	ИначеЕсли ТипЗнч(СтавкаНДС) = Тип("Число") Тогда
		Если СтавкаНДС > 100 Тогда
			ПроцентНДС = (СтавкаНДС - 100)/100;
		ИначеЕсли СтавкаНДС > 1 Тогда
			ПроцентНДС = СтавкаНДС/100;
		Иначе
			ПроцентНДС = СтавкаНДС;
		КонецЕсли;
	КонецЕсли;
	
	Если ЦенаВключаетНДС Тогда
		СуммаНДС = Сумма * ПроцентНДС / (ПроцентНДС + 1);
	Иначе
		СуммаНДС = Сумма * ПроцентНДС;
	КонецЕсли;
	
	Возврат СуммаНДС;
	
КонецФункции // СуммаНДС()

// Получает структуру, которая затем обрабатывается процедурами заполнения ТЧ.
//
// Параметры:
//  Штрихкод - Строка - штрихкод, который необходимо обработать.
//  Количество - Число - количество товаров с указанным штрихкодом.
//
// Возвращаемое значение:
//  Структура - структура данных штрихкода.
//
Функция СтруктураДанныхШтрихкода(Штрихкод, Количество) Экспорт

	Возврат Новый Структура("Штрихкод, Количество", Штрихкод, Количество);

КонецФункции

// Определяет сумму изменений автоматической скидки и пропорционально изменяет суммы скидок по строке.
//
// Параметры:
//  Скидки - ТаблицаЗначений - табличная часть СкидкиНаценки (На клиенте ДанныеКоллекция).
//  КлючСвязи - Число - ключ связи строки.
//  СуммаАвтоматическойСкидки - Число - новая сумма скидки.
//
Процедура РаспределитьСуммуИзмененийСтрокиТоваровНаТабличнуюЧастьСкидки(СкидкиНаценки, КлючСвязи, СуммаАвтоматическойСкидки) Экспорт
	
	МассивСтрокСкидки = СкидкиНаценки.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));
	
	Если МассивСтрокСкидки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщаяСуммаСкидкиВТаблице = 0;
	МаксСуммаСкидки          = 0;
	МаксСтрокаТаблицы        = Неопределено;
	
	Для каждого СтрокаСкидки Из МассивСтрокСкидки Цикл
		
		ОбщаяСуммаСкидкиВТаблице = ОбщаяСуммаСкидкиВТаблице + СтрокаСкидки.Сумма;
		СуммаВСтроке = ?(СтрокаСкидки.Сумма > 0, СтрокаСкидки.Сумма, - СтрокаСкидки.Сумма);
		
		Если МаксСуммаСкидки < СуммаВСтроке Тогда
			МаксСуммаСкидки   = СуммаВСтроке;
			#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
				МаксСтрокаТаблицы = СтрокаСкидки;
			#Иначе
				МаксСтрокаТаблицы = СтрокаСкидки.ПолучитьИдентификатор();
			#КонецЕсли
		КонецЕсли;
		
	КонецЦикла;
	
	Если МаксСтрокаТаблицы = Неопределено ИЛИ ОбщаяСуммаСкидкиВТаблице = 0 Тогда
		Возврат
	КонецЕсли;
	
	КоэффициентПересчета = СуммаАвтоматическойСкидки / ОбщаяСуммаСкидкиВТаблице;
	ОбщаяСуммаСкидкиВТаблице = 0;
	
	Для каждого СтрокаСкидки Из МассивСтрокСкидки Цикл
		СтрокаСкидки.Сумма = КоэффициентПересчета * СтрокаСкидки.Сумма;
		ОбщаяСуммаСкидкиВТаблице = ОбщаяСуммаСкидкиВТаблице + СтрокаСкидки.Сумма;
	КонецЦикла;
	
	Если (СуммаАвтоматическойСкидки - ОбщаяСуммаСкидкиВТаблице) <> 0 Тогда
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			СтрокаМакСкидки = МаксСтрокаТаблицы;
		#Иначе
			СтрокаМакСкидки = СкидкиНаценки.НайтиПоИдентификатору(МаксСтрокаТаблицы);
		#КонецЕсли
		СтрокаСкидки.Сумма = СтрокаСкидки.Сумма + (СуммаАвтоматическойСкидки - ОбщаяСуммаСкидкиВТаблице);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьСтруктуруДействиямиПриИзмененииЭлемента(Объект, СтруктураДействий, Элемент) Экспорт
	
	Если Элемент = "Номенклатура" Тогда
		
		Если НЕ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПеремещениеТоваров")
			И НЕ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			СтруктураДействий.Вставить("ЗаполнитьДоговорПлатежногоАгента");
		КонецЕсли;
		
		Если НЕ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
			И НЕ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
		КонецЕсли;
		
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу");
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу");
		
	КонецЕсли;
	
КонецПроцедуры

#Область ФункцииПолученияСтруктурПараметровДляОбработкиТабличнойЧастиТовары

// Возвращает структуру пересчета суммы НДС в строке.
//
// Параметры:
//  Объект - ДокументОбъект - документ по которому заполняется структура пересчета суммы НДС в строке.
//
// Возвращаемое значение:
//  Структура - структура параметров.
//
Функция СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	
	Возврат СтруктураЗаполненияЦены;
КонецФункции

// Возвращает структуру пересчета суммы НДС в табличной части.
//
// Параметры:
//  Объект - ДокументОбъект - документ по которому заполняется структура пересчета суммы НДС в табличной части.
//
// Возвращаемое значение:
//  Структура - структура параметров.
//
Функция СтруктураПересчетаСуммыНДСВТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	СтруктураЗаполненияЦены.Вставить("НеобходимоОбработатьВсюТЧ");
	
	Возврат СтруктураЗаполненияЦены;
КонецФункции

// Возвращает структуру заполнения ставки НДС.
//
// Параметры:
//  Объект - ДокументОбъект - документ по которому заполняется ставка НДС;
//  СтруктураПараметровЗаполнения - Структура - предзаполненная структура параметров объекта,
//    см. ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияПоОбъекту.
//
// Возвращаемое значение:
//  Структура - структура параметров.
//
Функция СтруктураЗаполненияСтавкиНДС(Объект, СтруктураПараметровЗаполнения = Неопределено) Экспорт
	
	Если СтруктураПараметровЗаполнения = Неопределено Тогда
		СтруктураПараметровЗаполнения = СтруктураПараметровЗаполненияПоОбъекту(Объект);
	КонецЕсли;
	
	Возврат СтруктураПараметровЗаполнения;
КонецФункции

// Возвращает структуру обработки штрихкода.
//
// Параметры:
//  Объект - ДокументОбъект - документ по которому обрабатываются штрихкоды.
//  Штрихкоды - Массив - массив штрихкодов для обработки.
//  СтруктураДействийСДобавленнымиСтроками - Структура - структура действий над добавленными строками.
//  СтруктураДействийСИзмененнымиСтроками - Структура - структура действий с измененными строками.
// 
// Возвращаемое значение:
//  Структура - структура параметров.
//
Функция СтруктураОбработкиШтрихкодов(Объект, Штрихкоды, СтруктураДействийСДобавленнымиСтроками, СтруктураДействийСИзмененнымиСтроками) Экспорт
	
	Если ТипЗнч(Штрихкоды) = Тип("Массив") Тогда
		МассивШтрихкодов = Штрихкоды;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(Штрихкоды);
	КонецЕсли;
	
	СтруктураОбработкиШтрихкода = Новый Структура;
	СтруктураОбработкиШтрихкода.Вставить("Штрихкоды",                              МассивШтрихкодов);
	СтруктураОбработкиШтрихкода.Вставить("СтруктураДействийСДобавленнымиСтроками", СтруктураДействийСДобавленнымиСтроками);
	СтруктураОбработкиШтрихкода.Вставить("СтруктураДействийСИзмененнымиСтроками",  СтруктураДействийСИзмененнымиСтроками);
	СтруктураОбработкиШтрихкода.Вставить("НеизвестныеШтрихкоды",                   Новый Массив);
	
	Возврат СтруктураОбработкиШтрихкода;
	
КонецФункции

// Возвращает структуру проверки серийных номеров по владельцу.
//
// Параметры:
//  ТекущаяСтрока - Структура - структура данных с параметрами проверки.
//  ТЧСерийныеНомера - ТаблицаЗначений - таблица серийных номеров для проверки.
// 
// Возвращаемое значение:
//  Структура - структура проверки серийных номеров.
//
Функция СтруктураПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, ТЧСерийныеНомера) Экспорт
	
	СтруктураПроверкиСерийныхНомеровПоВладельцу = Новый Структура;
	СтруктураПроверкиСерийныхНомеровПоВладельцу.Вставить(
		"МассивСерийныхНомеров",
		МассивСерийныхНомеровДляСтрокиТоваров(ТекущаяСтрока.КлючСвязиСерийныхНомеров, ТЧСерийныеНомера));
	
	Возврат СтруктураПроверкиСерийныхНомеровПоВладельцу;
	
КонецФункции

// Возвращает массив серийных номеров строки товаров.
//
// Параметры:
//  КлючСвязи - Число - ключ связи.
//  ТЧСерийныеНомера - ТаблицаЗначений - таблица серийных номеров для проверки.
// 
// Возвращаемое значение:
//  Массив - массив серийных номеров для строки.
//
Функция МассивСерийныхНомеровДляСтрокиТоваров(КлючСвязи, ТЧСерийныеНомера) Экспорт
	
	Результат = Новый Массив;
	Если КлючСвязи > 0 Тогда
		Для Каждого ТекСтрока Из ТЧСерийныеНомера.НайтиСтроки(Новый Структура("КлючСвязиСерийныхНомеров", КлючСвязи)) Цикл
			Результат.Добавить(ТекСтрока.СерийныйНомер);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру пересчета цены и скидки при продаже.
//
// Параметры:
//  Объект - ДокументОбъект - документ по которому пересчитываются цены скидки.
// 
// Возвращаемое значение:
//  Структура - структура параметров заполнения цены.
//
Функция СтруктураПересчетаЦеныСкидкиВПродажахВТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("ИспользоватьРучныеСкидки");
	СтруктураЗаполненияЦены.Вставить("ИспользоватьАвтоматическиеСкидки");
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Возвращает структуру пересчета цены и скидки при продаже.
//
// Параметры:
//  Объект - ДокументОбъект - документ по которому пересчитываются цены скидки.
// 
// Возвращаемое значение:
//  Структура - структура заполнения цены.
//
Функция СтруктураПересчетаЦеныСкидкиВЗакупкахВТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("ИспользоватьРучныеСкидки");
	СтруктураЗаполненияЦены.Вставить("ИспользоватьАвтоматическиеСкидки");
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Возвращает структуру пересчета цены и скидки при продаже.
//
// Параметры:
//  Объект - ДокументОбъект - документ по которому пересчитываются цены скидки.
//
// Возвращаемое значение:
//  Структура - структура заполнения цены.
//
Функция ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, ПриводитьКМинимальнойЦене = Ложь, ОбнулятьЦену = Истина) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	
	СтруктураЗаполненияЦены.Вставить("Дата"                     , Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("ОбъектЦенообразования"    , Объект.Магазин);
	СтруктураЗаполненияЦены.Вставить("ПриводитьКМинимальнойЦене", ПриводитьКМинимальнойЦене);
	СтруктураЗаполненияЦены.Вставить("ОбнулятьЦену", ОбнулятьЦену);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Возвращает структуру заполнения цены.
//
// Параметры:
//  Объект - ДокументОбъект - документ по которому заполняется цена.
//
// Возвращаемое значение:
//  Структура - структура заполнения цены.
//
Функция СтруктураЗаполненияЦеныНазначеннойВСтрокеТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата", Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("ОбъектЦенообразования", Объект.Магазин);
	СтруктураЗаполненияЦены.Вставить("ПриводитьКМинимальнойЦене", Ложь);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Возвращает структуру заполнения цены по виду цен.
//
// Параметры:
//  Объект - ДокументОбъект - документ по которому заполняются цены по виду цен;
//  СтруктураПараметровЗаполнения - Структура - предзаполненная структура параметров объекта,
//    см. ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияПоОбъекту.
//
// Возвращаемое значение:
//  Структура - структура заполнения цены.
//
Функция СтруктураЗаполненияЦеныПоВидуЦенВСтрокеТЧ(Объект, СтруктураПараметровЗаполнения = Неопределено) Экспорт
	
	Если СтруктураПараметровЗаполнения = Неопределено Тогда
		СтруктураПараметровЗаполнения = СтруктураПараметровЗаполненияПоОбъекту(Объект);
	КонецЕсли;
	
	СтруктураПараметровЗаполнения.Вставить("ВидЦены", Объект.ВидЦены);
	
	Возврат СтруктураПараметровЗаполнения;
КонецФункции

// Возвращает структуру заполнения цены закупки в строке.
//
// Параметры:
//  Объект - ДокументОбъект - документ по которому заполняется цена закупки;
//  СтруктураПараметровЗаполнения - Структура - предзаполненная структура параметров объекта,
//    см. ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияПоОбъекту.
//
// Возвращаемое значение:
//  Структура - структура заполнения цены.
//
Функция СтруктураЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект, СтруктураПараметровЗаполнения = Неопределено) Экспорт
	
	Если СтруктураПараметровЗаполнения = Неопределено Тогда
		СтруктураПараметровЗаполнения = СтруктураПараметровЗаполненияПоОбъекту(Объект);
	КонецЕсли;
	
	СтруктураПараметровЗаполнения.Вставить("Контрагент", Объект.Контрагент);
	СтруктураПараметровЗаполнения.Вставить("Ссылка" , Объект.Ссылка);
	
	Возврат СтруктураПараметровЗаполнения;
КонецФункции

// Возвращает структуру заполнения ставки НДС.
// Склад указывается в строке.
//
// Параметры:
//  Объект - ДокументОбъект - документ по которому заполняется ставка НДС;
//  СтруктураПараметровЗаполнения - Структура - предзаполненная структура параметров объекта,
//    см. ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияПоОбъекту.
//
// Возвращаемое значение:
//  Структура - структура заполнения ставки НДС.
//
Функция СтруктураПараметровСтавкиНДС(Объект, СтруктураПараметровЗаполнения = Неопределено) Экспорт
	
	Если СтруктураПараметровЗаполнения = Неопределено Тогда
		СтруктураПараметровЗаполнения = СтруктураПараметровЗаполненияПоОбъекту(Объект);
	КонецЕсли;
	
	Возврат СтруктураПараметровЗаполнения;
	
КонецФункции

// Возвращает структуру заполнения ставки НДС.
//
// Параметры:
//  Объект - ДокументОбъект - документ по которому заполняется ставка НДС;
//  СтруктураПараметровЗаполнения - Структура - предзаполненная структура параметров объекта,
//    см. ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияПоОбъекту.
//
// Возвращаемое значение:
//  Структура - структура заполнения ставки НДС.
//
Функция СтруктураПараметровСтавкиНДСВТЧ(Объект, СтруктураПараметровЗаполнения = Неопределено) Экспорт
	
	Если СтруктураПараметровЗаполнения = Неопределено Тогда
		СтруктураПараметровЗаполнения = СтруктураПараметровЗаполненияПоОбъекту(Объект);
	КонецЕсли;
	
	СтруктураПараметровЗаполнения.Вставить("ВидОперации", Объект.ВидОперации);
	
	Возврат СтруктураПараметровЗаполнения;
КонецФункции

// Возвращает структуру заполнения ставки НДС
// Склад указывается в шапке.
//
// Параметры:
//  Объект - ДокументОбъект - документ по которому заполняется ставка НДС;
//  СтруктураПараметровЗаполнения - Структура - предзаполненная структура параметров объекта,
//    см. ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияПоОбъекту.
//
// Возвращаемое значение:
//  Структура - структура заполнения ставки НДС.
//
Функция СтруктураПараметровСтавкиНДССкладВШапке(Объект, СтруктураПараметровЗаполнения = Неопределено) Экспорт
	
	Если СтруктураПараметровЗаполнения = Неопределено Тогда
		СтруктураПараметровЗаполнения = СтруктураПараметровЗаполненияПоОбъекту(Объект);
	КонецЕсли;
	
	СтруктураПараметровЗаполнения.Вставить("Склад", Объект.Склад);
	
	Возврат СтруктураПараметровЗаполнения;
КонецФункции

// Возвращает структуру заполнения ставки НДС. Если в объекте нет реквизита СистемаНалогообложения,
// то устанавливается Неопределено(для Заказа покупателя). Далее структура используется в 
// ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтавкуНДСВСтрокеПоПараметрам
//
// Параметры:
//  Объект - ДокументОбъект - документ по которому заполняется ставка НДС;
//  СтруктураПараметровЗаполнения - Структура - предзаполненная структура параметров объекта,
//    см. ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияПоОбъекту.
//
// Возвращаемое значение:
//  Структура - структура заполнения ставки НДС.
//
Функция СтруктураПараметровСтавкиНДССкладВидНалогаВШапке(Объект, СтруктураПараметровЗаполнения = Неопределено) Экспорт
	
	Если СтруктураПараметровЗаполнения = Неопределено Тогда
		СтруктураПараметровЗаполнения = СтруктураПараметровЗаполненияПоОбъекту(Объект);
	КонецЕсли;
	
	СтруктураПараметровЗаполнения.Вставить("Склад", Объект.Склад);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "СистемаНалогообложения") Тогда
		
		СтруктураПараметровЗаполнения.Вставить("ВидНалогаВШапке", Объект.СистемаНалогообложения);
	Иначе
		
		СтруктураПараметровЗаполнения.Вставить("ВидНалогаВШапке", Неопределено);
	КонецЕсли;
	
	Возврат СтруктураПараметровЗаполнения;
КонецФункции

// Возвращает структуру заполнения ставки НДС.
// Ставка НДС зависит от параметра УчитыватьНДС.
//
// Параметры:
//  Объект - ДокументОбъект - документ по которому заполняется ставка НДС.
//
// Возвращаемое значение:
//  Структура - структура заполнения ставки НДС.
//
Функция СтруктураПараметровСтавкиНДСУчитыватьНДС(Объект) Экспорт
	
	СтруктураПараметровСтавкиНДС = Новый Структура;
	СтруктураПараметровСтавкиНДС.Вставить("Дата", Объект.Дата);
	СтруктураПараметровСтавкиНДС.Вставить("УчитыватьНДС", Объект.УчитыватьНДС);
	
	Возврат СтруктураПараметровСтавкиНДС;
КонецФункции

// Возвращает структуру заполнения Вида налога.
//
// Параметры:
//  Объект - ДокументОбъект - документ по которому заполняется ставка НДС;
//  СтруктураПараметровЗаполнения - Структура - предзаполненная структура параметров объекта,
//    см. ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияПоОбъекту.
//
// Возвращаемое значение:
//  Структура - структура заполнения, содержит:
//    ВидОперации - ПеречислениеСсылка.ВидыОперацийЧекККМ;
//    ЧекККМПродажа - ДокументСсылка.ЧекККМ.
//
Функция СтруктураПараметровЗаполненияВидаНалога(Объект, СтруктураПараметровЗаполнения = Неопределено) Экспорт
	
	Если СтруктураПараметровЗаполнения = Неопределено Тогда
		СтруктураПараметровЗаполнения = СтруктураПараметровЗаполненияПоОбъекту(Объект);
	КонецЕсли;
	
	СтруктураПараметровЗаполнения.Вставить("ВидОперации", Объект.ВидОперации);
	СтруктураПараметровЗаполнения.Вставить("ЧекККМПродажа", Объект.ЧекККМПродажа);
	
	Возврат СтруктураПараметровЗаполнения;
	
КонецФункции

// Возвращает структуру параметров для заполнения различных реквизитов.
//
// Параметры:
//  Объект - ДокументОбъект, ОбработкаОбъект - документ или обработка, по которому заполняются параметры.
//
// Возвращаемое значение:
//  Структура - структура параметров заполнения, содержит:
//    Дата - Дата
//    Организация - СправочникСсылка.Организации;
//    Магазин - СправочникСсылка.Магазины;
//    РабочееМесто - СправочникСсылка.РабочиеМеста;
//
Функция СтруктураПараметровЗаполненияПоОбъекту(Объект) Экспорт
	
	СтруктураПараметровЗаполнения = Новый Структура("Дата, Магазин, РабочееМесто, Организация, КассаККМ");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровЗаполнения, Объект);
	
	Возврат СтруктураПараметровЗаполнения;
КонецФункции

#КонецОбласти

#Область ФункцииОтображенияИтоговТЧНаФормеДокумента

// Заполняет поле СуммаВсего в зависимости от признака включения НДС в цену.
//
// Параметры:
// Таблица         - ДанныеФормыКоллекция - таблица, в которой необходимо заполнить колонку СуммаВсего.
// ЦенаВключаетНДС - Булево - признак включения НДС в цену.
//
Процедура ЗаполнитьСуммуВсегоВТаблице(Таблица, ЦенаВключаетНДС) Экспорт
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		ЗаполнитьСуммуВсегоВСтрокеТаблицы(СтрокаТаблицы, ЦенаВключаетНДС);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСуммуВсегоВТаблице()

// Заполняет поле СуммаВсего в зависимости от признака включения НДС в цену.
//
// Параметры:
// СтрокаТаблицы   - ДанныеФормыЭлементКоллекции - Строка таблицы, в которой необходимо заполнить поле СуммаВсего.
// ЦенаВключаетНДС - Булево - признак включения НДС в цену.
//
Процедура ЗаполнитьСуммуВсегоВСтрокеТаблицы(СтрокаТаблицы, ЦенаВключаетНДС) Экспорт
	
	Если ЦенаВключаетНДС Тогда
		СтрокаТаблицы.СуммаВсего = СтрокаТаблицы.Сумма;
	Иначе
		СтрокаТаблицы.СуммаВсего = СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНДС;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСуммуВсегоВСтрокеТаблицы()

// Получает сумму ручных скидок.
//
// Параметры:
// Товары                 - ДанныеФормыКоллекция - тч документа для подсчета суммы ручных скидок.
// СуммаРучныхСкидок      - Число - переменная, в которую будет помещена итоговая сумма.
//
Процедура ПолучитьСуммуРучныхСкидокДокумента(Знач Товары, СуммаРучныхСкидок) Экспорт
	
	СуммаИтог = Товары.Итог("СуммаРучнойСкидки");

	Если СуммаИтог <> СуммаРучныхСкидок Тогда
		СуммаРучныхСкидок = СуммаИтог;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСуммуВсегоВСтрокеТаблицы()

// Рассчитывает сумму документа и помещает рассчитанное значение в реквизит формы СуммаВсего.
//
// Параметры:
// Товары          - ДанныеФормыКоллекция - тч документа для подсчета суммы документа.
// ЦенаВключаетНДС - Булево - Признак включения НДС в цену документа.
// СуммаВсего      - Число - Реквизит формы документа, в который будет помещена сумма.
//
Процедура ОбновитьСуммыПодвала(Знач Товары, Знач ЦенаВключаетНДС, СуммаВсего) Экспорт

	СуммаДокумента = СуммаДокумента(Товары, ЦенаВключаетНДС);

	Если СуммаДокумента <> СуммаВсего Тогда
		СуммаВсего = СуммаДокумента;
	КонецЕсли;

КонецПроцедуры

// Рассчитывает дополнительную сумму документа и добавляет рассчитанное значение к реквизиту формы СуммаВсего.
//
// Параметры:
// Товары       - ДанныеФормыКоллекция - тч документа для подсчета суммы документа.
// ИмяРеквизита - Булево - Имя реквизита по которому рассчитывается Итог.
// СуммаВсего   - Число - Реквизит формы документа, в который будет помещена сумма.
//
Процедура ДополнитьСуммыПодвала(Знач Товары, Знач ИмяРеквизита = "Сумма", СуммаВсего) Экспорт

	ДополнительнаяСумма = Товары.Итог(ИмяРеквизита);

	Если ДополнительнаяСумма <> 0 Тогда
		СуммаВсего = СуммаВсего + ДополнительнаяСумма;
	КонецЕсли;

КонецПроцедуры

// Возвращает сумму документа с учетом НДС.
//
// Параметры:
// Товары          - ДанныеФормыКоллекция - тч документа для подсчета суммы документа.
// ЦенаВключаетНДС - Булево - Признак включения НДС в цену документа.
//
// Возвращаемое значение:
// Число - сумма документа с учетом НДС.
//
Функция СуммаДокумента(Знач Товары, Знач ЦенаВключаетНДС) Экспорт

	СуммаДокумента = Товары.Итог("Сумма");

	Если Не ЦенаВключаетНДС Тогда
		СуммаДокумента = СуммаДокумента + Товары.Итог("СуммаНДС");
	КонецЕсли;

	Возврат СуммаДокумента;

КонецФункции

Функция НормализоватьПараметрыПересчетаЕдиниц(ТекущаяСтрока, УпаковкаНоменклатура) Экспорт
	
	Если УпаковкаНоменклатура = Неопределено Тогда
		
		Номенклатура   = ТекущаяСтрока.Номенклатура;
		Упаковка       = ТекущаяСтрока.Упаковка;
		НужноОкруглять = Истина;
		
	ИначеЕсли ТипЗнч(УпаковкаНоменклатура) = Тип("Структура") Тогда
		
		Если УпаковкаНоменклатура.Свойство("Упаковка") Тогда
			Упаковка = УпаковкаНоменклатура.Упаковка;
		ИначеЕсли УпаковкаНоменклатура.Свойство("ЕдиницаИзмеренияВЕТИС") Тогда
			Если ЗначениеЗаполнено(УпаковкаНоменклатура.ЕдиницаИзмеренияВЕТИС) Тогда
				Упаковка = УпаковкаНоменклатура.ЕдиницаИзмеренияВЕТИС;
			Иначе
				Упаковка = ТекущаяСтрока.ЕдиницаИзмеренияВЕТИС;
			КонецЕсли;
		Иначе
			Упаковка = ТекущаяСтрока.Упаковка;
		КонецЕсли;
		
		Если УпаковкаНоменклатура.Свойство("Номенклатура") Тогда
			Номенклатура = УпаковкаНоменклатура.Номенклатура;
		Иначе
			Номенклатура = ТекущаяСтрока.Номенклатура;
		КонецЕсли;
		
		Если УпаковкаНоменклатура.Свойство("НужноОкруглять") Тогда
			НужноОкруглять = УпаковкаНоменклатура.НужноОкруглять;
		Иначе
			НужноОкруглять = Истина;
		КонецЕсли;
		
	Иначе
		Упаковка       = УпаковкаНоменклатура;
		Номенклатура   = ТекущаяСтрока.Номенклатура;
		НужноОкруглять = Истина;
	КонецЕсли;
	
	Возврат Новый Структура("Номенклатура,Упаковка,НужноОкруглять", Номенклатура, Упаковка, НужноОкруглять);
	
КонецФункции

Функция НормализоватьПараметрыПересчетаЕдиницСуффикс(ТекущаяСтрока, ПараметрыПересчета) Экспорт
	
	Суффикс = "";
	НужноОкруглять = Истина;
	
	Если ТипЗнч(ПараметрыПересчета) = Тип("Структура") Тогда
		
		Если ПараметрыПересчета.Свойство("Суффикс") Тогда
			Суффикс = ПараметрыПересчета.Суффикс;
		КонецЕсли;
		
		Если ПараметрыПересчета.Свойство("НужноОкруглять") Тогда
			НужноОкруглять = ПараметрыПересчета.НужноОкруглять;
		КонецЕсли;
	Иначе
		Суффикс = ПараметрыПересчета;
	КонецЕсли;

	Если Суффикс = Неопределено Тогда
		Суффикс = "";
	КонецЕсли;
	
	Возврат Новый Структура("Суффикс,НужноОкруглять", Суффикс, НужноОкруглять); 
	
КонецФункции

// Пересчитывает количество товара (в единицах хранения) в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьКоличествоПоРНПТВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт 

	Перем ПараметрыПересчета;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоПоРНПТ", ПараметрыПересчета) Тогда
		
		Коэффициент = КоэффициентРНПТ(ПараметрыПересчета,
			ТекущаяСтрока,
			КэшированныеЗначения);
			
		ТекущаяСтрока.КоличествоПоРНПТ = ТекущаяСтрока.Количество * Коэффициент;
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает количество товара ВетИС в текущей строке табличной части документа.
//
// Параметры:
//  ТекущаяСтрока			- Структура - Структура со свойствами строки документа.
//  СтруктураДействий		- Структура - Структура с действиями, которые нужно произвести.
//  КэшированныеЗначения	- Структура - Сохраненные значения параметров, используемых при обработке строки таблицы.
//
Процедура ПересчитатьКоличествоЕдиницВЕТИСВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыПересчетаКоличестваВЕТИС, ТекстОшибки;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницВЕТИС", ПараметрыПересчетаКоличестваВЕТИС) Тогда
		
		ПараметрыПересчета = НормализоватьПараметрыПересчетаЕдиниц(ТекущаяСтрока, ПараметрыПересчетаКоличестваВЕТИС);
		
		КоличествоВЕТИС = ИнтеграцияВЕТИСРТКлиентСервер.ПересчитатьКоличествоЕдиницВЕТИС(
											ТекущаяСтрока["Количество"+ПараметрыПересчетаКоличестваВЕТИС.Суффикс],
											ПараметрыПересчета.Номенклатура,
											ПараметрыПересчета.Упаковка,
											ПараметрыПересчета.НужноОкруглять,
											КэшированныеЗначения,
											ТекстОшибки);
		
		Если КоличествоВЕТИС <> Неопределено Тогда
			ИмяКоличестваВЕТИС = "Количество" + ПараметрыПересчетаКоличестваВЕТИС.Суффикс + "ВЕТИС";
			
			ТекущаяСтрока[ИмяКоличестваВЕТИС] = КоличествоВЕТИС;
		ИначеЕсли ТекстОшибки <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает количество товара (в единицах хранения) в текущей строке табличной части документа.
//
// Параметры:
//  ТекущаяСтрока			- Структура - Структура со свойствами строки документа.
//  СтруктураДействий		- Структура - Структура с действиями, которые нужно произвести.
//  КэшированныеЗначения	- Структура - Сохраненные значения параметров, используемых при обработке строки таблицы.
//
Процедура ПересчитатьКоличествоЕдиницПоВЕТИСВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыПересчетаКоличества, ТекстОшибки;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницПоВЕТИС", ПараметрыПересчетаКоличества) Тогда
		
		ПараметрыПересчета = НормализоватьПараметрыПересчетаЕдиниц(ТекущаяСтрока, ПараметрыПересчетаКоличества);
		ИмяКоличестваВЕТИС = "Количество" + ПараметрыПересчетаКоличества.Суффикс + "ВЕТИС";
		
		Количество = ИнтеграцияВЕТИСРТКлиентСервер.ПересчитатьКоличествоЕдиниц(
											ТекущаяСтрока[ИмяКоличестваВЕТИС],
											ПараметрыПересчета.Номенклатура,
											ПараметрыПересчета.Упаковка,
											ПараметрыПересчета.НужноОкруглять,
											КэшированныеЗначения,
											ТекстОшибки);
											
		Если Количество <> Неопределено Тогда
			ТекущаяСтрока["Количество" + ПараметрыПересчетаКоличества.Суффикс] = Количество;
		ИначеЕсли ТекстОшибки <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает количество товара ВетИС при изменении единицы измерения ВетИС в текущей строке табличной 
// части документа.
//
// Параметры:
//  ТекущаяСтрока			- Структура - Структура со свойствами строки документа.
//  СтруктураДействий		- Структура - Структура с действиями, которые нужно произвести.
//  КэшированныеЗначения	- Структура - Сохраненные значения параметров, используемых при обработке строки таблицы.
//
Процедура ПересчитатьКоличествоЕдиницВЕТИСПоЕдиницеИзмеренияКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыПересчетаКоличестваВЕТИС, ТекстОшибки;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницВЕТИСПоЕдиницеИзмерения", ПараметрыПересчетаКоличестваВЕТИС) Тогда
		
		ПараметрыПересчета = НормализоватьПараметрыПересчетаЕдиниц(ТекущаяСтрока, ПараметрыПересчетаКоличестваВЕТИС);
		ИмяКоличестваВЕТИС = ПараметрыПересчетаКоличестваВЕТИС.ИмяПоляКоличества;
		
		КоличествоВЕТИС = ИнтеграцияВЕТИСРТКлиентСервер.ПересчитатьКоличествоЕдиницВЕТИС(
											ТекущаяСтрока[ИмяКоличестваВЕТИС],
											ПараметрыПересчета.Номенклатура,
											ПараметрыПересчета.Упаковка,
											ПараметрыПересчета.НужноОкруглять,
											КэшированныеЗначения,
											ТекстОшибки);
		
		Если КоличествоВЕТИС <> Неопределено Тогда
			ТекущаяСтрока[ИмяКоличестваВЕТИС] = КоличествоВЕТИС;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Серии

// Обновляет кеш ключевых реквизитов текущей строки товаров. По ключевым реквизитам осуществляется связь
// между ТЧ серий и ТЧ товаров.
//
// Параметры:
//  ТаблицаФормы - ДанныеФормыКоллеция - таблица формы, отображающая ТЧ товаров.
//  КэшированныеЗначения - Структура - переменная модуля формы, в которой хранятся кэшируемые значения.
//  ПараметрыУказанияСерий - Структура - структура параметров указания серий, возвращаемая соответствующей процедурой модуля
//                           менеджера документа.
//  Копирование - Булево - признак, что кэшированная строка скопирована (параметр события ПриНачалеРедактирования).
//
Процедура ОбновитьКэшированныеЗначенияДляУчетаСерий(ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий, Копирование = Ложь) Экспорт
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = СтруктураКэшируемыхЗначений();
	КонецЕсли;
	
	ИмяТЧТовары = "";
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧТовары", ИмяТЧТовары) Тогда
		ИмяТЧТовары = "Товары";
	КонецЕсли;
	
	ИмяТЧСерии  = "";
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧСерии", ИмяТЧСерии) Тогда
		ИмяТЧСерии = "Серии";
	КонецЕсли;
	
	ИмяКолонкиКоличество = "";
	Если Не ПараметрыУказанияСерий.Свойство("ИмяКолонкиКоличество", ИмяКолонкиКоличество) Тогда
		ИмяКолонкиКоличество = "Количество";
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.Свойство("ЭтоЗаказ")
		И ПараметрыУказанияСерий.ЭтоЗаказ
		И ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаКомплектующихДляСборки")) = Неопределено
		И ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаКомплектовДляРазборки")) = Неопределено Тогда
		ЕстьОтменаСтроки = Истина;
	Иначе
		ЕстьОтменаСтроки = Ложь;
	КонецЕсли;
	
	Если ТекущаяСтрока <> Неопределено
		И (Не Копирование
			Или ИмяТЧТовары = ИмяТЧСерии) Тогда
		
		КэшированныеЗначения.Вставить("Номенклатура"      , ТекущаяСтрока.Номенклатура);
		КэшированныеЗначения.Вставить("Характеристика"    , ТекущаяСтрока.Характеристика);
		КэшированныеЗначения.Вставить(ИмяКолонкиКоличество, ТекущаяСтрока[ИмяКолонкиКоличество]);
		
		Для Каждого СтрокаМассива Из ПараметрыУказанияСерий.ПоляСвязи Цикл
			КэшированныеЗначения.Вставить(СтрокаМассива,ТекущаяСтрока[СтрокаМассива]);
		КонецЦикла;
		Если ЕстьОтменаСтроки Тогда
			КэшированныеЗначения.Вставить("Отменено",ТекущаяСтрока.Отменено);
		КонецЕсли;
		
	Иначе
		КэшированныеЗначения.Вставить("Номенклатура"        , Неопределено);
		КэшированныеЗначения.Вставить("Характеристика"      , Неопределено);
		КэшированныеЗначения.Вставить(ИмяКолонкиКоличество, 0);
		
		Если ЕстьОтменаСтроки Тогда
			КэшированныеЗначения.Вставить("Отменено", Неопределено);
		КонецЕсли;
		
		Для Каждого СтрокаМассива Из ПараметрыУказанияСерий.ПоляСвязи Цикл
			КэшированныеЗначения.Вставить(СтрокаМассива,Неопределено);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Определяет возможность регистрации новых серий, при указании серий в документе.
//
// Параметры:
//  ПараметрыУказанияСерий - Структура - структура параметров указания серий, возвращаемая соответствующей процедурой модуля
//                                       менеджера документа.
//
// Возвращаемое значение:
//  Булево - Если Истина - можно регистрировать новые серии, Ложь - серии можно подбирать
//                         только по остаткам.
//
Функция НеобходимоРегистрироватьСерии(ПараметрыУказанияСерий) Экспорт
	ТоварВШапке = Ложь;
	Если Не ПараметрыУказанияСерий.Свойство("ТоварВШапке", ТоварВШапке) Тогда
		ТоварВШапке = Ложь;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.Свойство("РегистрироватьСерии") Тогда
		РегистрироватьСерии = ПараметрыУказанияСерий.РегистрироватьСерии;
	ИначеЕсли (ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаКлиенту")) <> Неопределено 
		Или ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаКомплектующихДляСборки")) <> Неопределено
		    И Не ТоварВШапке
		Или ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаКомплектовДляРазборки")) <> Неопределено
		    И ТоварВШапке
		Или ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаПоВозвратуПоставщику")) <> Неопределено 
		Или ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаПоПеремещению")) <> Неопределено) Тогда
		РегистрироватьСерии = Ложь;
	Иначе
		РегистрироватьСерии = Истина;
	КонецЕсли;
	
	Возврат РегистрироватьСерии;
КонецФункции

// Пересчитывает статусс серий подарочных сертификатов в табличной части.
//
// Параметры:
//  Товары - ДанныеФормыКоллекция - таблица формы, отображающая ТЧ товаров.
//
Процедура ОбновитьСтатусыСерийИПодарочныхСертификатов(Товары) Экспорт
	
	Для Каждого СтрокаТаблицы Из Товары Цикл
		
		ОбновитьСтатусыСерийИПодарочныхСертификатовВСтроке(СтрокаТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры

// Пересчитывает статус серий и подарочных сертификатов в строке табличной части.
//
// Параметры:
//  СтрокаТаблицы - ДанныеФормыЭлементКоллекции - строка таблица формы для пересчета.
//
Процедура ОбновитьСтатусыСерийИПодарочныхСертификатовВСтроке(СтрокаТаблицы) Экспорт
	
	СтрокаТаблицы.СтатусыСерийИПодарочныхСертификатов = 0;
	Если СтрокаТаблицы.Свойство("ИспользоватьСерийныеНомера") И СтрокаТаблицы.ИспользоватьСерийныеНомера Тогда
		СтрокаТаблицы.СтатусыСерийИПодарочныхСертификатов = 12;
	ИначеЕсли СтрокаТаблицы.Свойство("СтатусУказанияСерий") Тогда
		СтрокаТаблицы.СтатусыСерийИПодарочныхСертификатов = СтрокаТаблицы.СтатусУказанияСерий;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет ключи связи по таблице документа или обработки.
//
// Параметры: 
//  ТабличнаяЧасть - ДанныеФормыКоллекция - табличная часть документа для заполнения ключей связи.
//  ИмяРеквизитаСвязи - Строка - наименование реквизита строкой.
//
Процедура ЗаполнитьКлючиСвязиТЧ(ТабличнаяЧасть, ИмяРеквизитаСвязи) Экспорт
	
	ВремКлючСвязи = 0;
	
	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		ВремКлючСвязи = ЗаполнитьКлючСвязи(ТабличнаяЧасть, СтрокаТЧ, ИмяРеквизитаСвязи)
	КонецЦикла;
	
КонецПроцедуры

// Заполняет ключ связи таблиц документа или обработки.
//
// Параметры: 
//  ТабличнаяЧасть - ДанныеФормыКоллекция - табличная часть документа для заполнения ключей связи.
//  СтрокаТаблицы - ДанныеФормыЭлементКоллекции - строка таблица формы.
//  ИмяРеквизитаСвязи - Строка - наименование реквизита связи строкой.
//  ВремКлючСвязи - Число - временный ключ связи.
//
Функция ЗаполнитьКлючСвязи(ТабличнаяЧасть, СтрокаТабличнойЧасти, ИмяРеквизитаСвязи, ВремКлючСвязи = 0) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти[ИмяРеквизитаСвязи]) Тогда
		Если ВремКлючСвязи = 0 Тогда
			Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
				Если ВремКлючСвязи < СтрокаТЧ[ИмяРеквизитаСвязи] Тогда
					ВремКлючСвязи = СтрокаТЧ[ИмяРеквизитаСвязи];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		СтрокаТабличнойЧасти[ИмяРеквизитаСвязи] = ВремКлючСвязи + 1;
	КонецЕсли;
	
	Возврат СтрокаТабличнойЧасти[ИмяРеквизитаСвязи];
	
КонецФункции

Функция КоэффициентРНПТ(ПараметрыПересчета, ТекущаяСтрока, КэшированныеЗначения) Экспорт
	
	Возврат УчетПрослеживаемыхТоваровКлиентСерверРТ.КоэффициентРНПТ(ПараметрыПересчета,
				ТекущаяСтрока,
				КэшированныеЗначения);
	
КонецФункции

// Возвращает сведения о коэффициенте пересчета единицы измерения ВетИС.
//
// Параметры:
//	ЕдиницаИзмеренияВЕТИС	- СправочникСсылка.ЕдиницыИзмеренияВЕТИС	- Единица измерения ВетИС, коэффициент которой нужно 
//																		получить.
//	КэшированныеЗначения	- Структура									- Сохраненные значения параметров, используемых при обработке 
//																		строки таблицы.
//	Номенклатура			- СправочникСсылка.Номенклатура				- Номенклатура для единицы хранения, которой осуществляется 
//																		получение коэффициента пересчета.
//
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//		* КодОшибки					- Число				- Код ошибки получения коэффициента.
//															0 - Нет ошибок;
//															1 - Не заполнена единица измерения в справочнике 'ЕдиницыИзмеренияВЕТИС';
//															2 - В справочнике 'Номенклатура' выключена возможность пересчета количества 
//																в соответствующую мерную единицу измерения;
//															3 - Не удалось сопоставить единицу хранения справочника 'Номенклатура' 
//																с единицей измерения справочника 'ЕдиницыИзмеренияВЕТИС'.
//		* Коэффициент				- Число				- Коэффициент пересчета единицы измерения ВетИС.
//		* ТипИзмеряемойВеличины		- ПеречислениеСсылка.ТипыИзмеряемыхВеличин - Тип измеряемой величины единицы измерения 
//																					справочника 'ЕдиницыИзмеренияВЕТИС'.
//		* НужноОкруглятьКоличество	- Булево, Истина	- Признак необходимости округления количества при пересчете.
//
Функция КоэффициентЕдиницыИзмеренияВЕТИС(ЕдиницаИзмеренияВЕТИС, КэшированныеЗначения, Номенклатура = Неопределено) Экспорт
	
	Результат = Новый Структура("КодОшибки, Коэффициент, ТипИзмеряемойВеличины, НужноОкруглятьКоличество");
	
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияВЕТИС) Тогда
		
		КлючКоэффициента = КлючКэшаУпаковки(Номенклатура, ЕдиницаИзмеренияВЕТИС);
		Если КэшированныеЗначения = Неопределено Тогда
			Кэш = Неопределено;
		Иначе
			Кэш = КэшированныеЗначения.КоэффициентыУпаковок[КлючКоэффициента];
		КонецЕсли;
		
		Если Кэш = Неопределено Тогда
			#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
				ЗначенияРеквизитов = ОбработкаТабличнойЧастиТоварыСервер.ДанныеЕдиницыИзмеренияВЕТИС(
										ЕдиницаИзмеренияВЕТИС, 
										Номенклатура,
										КэшированныеЗначения);
				
				ЗаполнитьЗначенияСвойств(Результат, ЗначенияРеквизитов);
			#Иначе
				ТекстИсключения = НСтр("ru = 'Попытка получения коэффициента единицы измерения ВетИС на клиенте.'");
				ВызватьИсключение ТекстИсключения;
			#КонецЕсли
		Иначе
			Результат = Кэш;
		КонецЕсли;
	Иначе
		Результат.КодОшибки                = 0;
		Результат.Коэффициент              = 1;
		Результат.ТипИзмеряемойВеличины    = Неопределено;
		Результат.НужноОкруглятьКоличество = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КлючКэшаКоэффициентРНПТ(Организация, Номенклатура, Характеристика, Склад, НомерГТД) Экспорт
	
	Возврат УчетПрослеживаемыхТоваровКлиентСерверРТ.КлючКэшаКоэффициентРНПТ(Организация,
				Номенклатура,
				Характеристика,
				Склад,
				НомерГТД);
	
КонецФункции

//Возвращает ключ кэша упаковки.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура по которой получается кэш.
//  Упаковка - СправочникСссылка.УпаковкиНоменклатуры - упаковка по которой получается кэш.
//
// Возвращаемое значение:
//  Строка - ключ кэша номенклатуры и упаковки.
//
Функция КлючКэшаУпаковки(Номенклатура, Упаковка) Экспорт
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		КлючНоменклатура = Строка(Номенклатура.УникальныйИдентификатор());
	Иначе
		КлючНоменклатура = "ПустоеЗначение";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Упаковка) Тогда
		КлючУпаковка = Строка(Упаковка.УникальныйИдентификатор());
	Иначе
		КлючУпаковка = "ПустоеЗначение";
	КонецЕсли;
	
	Возврат КлючНоменклатура + КлючУпаковка;
	
КонецФункции

// Возвращает сумму НДС от суммы через количество.
//
// Параметры:
//  Сумма - Число - общая сумма товаров.
//  Количество - Число - количество товаров для рассчета.
//  ПроцентНДС - Число - процент НДС товара.
//  ЦенаВключаетНДС - Булево - признак включения НДС в цену.
//
// Возвращаемое значение:
//  Число - сумма НДС построчно.
//
Функция СуммаНДСПострочно(Сумма, Количество, ПроцентНДС, ЦенаВключаетНДС = Истина) Экспорт
	
	СуммаНДС = 0;
	
	Если Сумма = 0 Тогда
		Возврат СуммаНДС;
	КонецЕсли;
	
	Коэффициенты = Новый Массив(?(Количество >= 1, Количество, 1));
	
	Индекс = 0;
	
	Для Каждого Итерация Из Коэффициенты Цикл
		Коэффициенты[Индекс] = 1;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	РаспределенныеСуммы = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(Сумма, Коэффициенты);
	
	Для Каждого РаспределеннаяСумма Из РаспределенныеСуммы Цикл
		СуммаНДС = СуммаНДС + Окр(СуммаНДС(РаспределеннаяСумма, ПроцентНДС, ЦенаВключаетНДС), 2);
	КонецЦикла;
	
	Возврат СуммаНДС;
	
КонецФункции

// Возвращает признак необходимости расчета суммы НДС по строчно (с учетом количества).
//
// Параметры:
//  СтрокаТЧ - ДанныеФормыЭлементКоллекции - строка табличной части.
//
// Возвращаемое значение:
//  Булево - использование рассчета ндс построчно.
//
Функция НДСПострочно(СтрокаТЧ) Экспорт
	
	НДСПострочно = Ложь;
	
	Если ТипЗнч(СтрокаТЧ) = Тип("Структура") ИЛИ ТипЗНЧ(СтрокаТЧ) = Тип("ДанныеФормыЭлементКоллекции") Тогда 
		Если СтрокаТЧ.Свойство("НДСПострочно", НДСПострочно) И СтрокаТЧ.Свойство("Количество") Тогда
			Если НДСПострочно = Неопределено 
				ИЛИ СтрокаТЧ.Количество <> Цел(СтрокаТЧ.Количество) Тогда
				НДСПострочно = Ложь;
			КонецЕсли;
		Иначе
			НДСПострочно = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НДСПострочно;
	
КонецФункции

#КонецОбласти

#Область АгентскоеВознаграждение

// Возвращает строку табличной части с услугой агента, привязанную к текущей строке.
//
// Параметры:
//  Товары - Табличная часть, ДанныеФормыКоллекция - табличная часть "Товары",
//  ТекущаяСтрока - Строка табличной части, ДанныеФормыЭлементКоллекции - текущая строка табличной части "Товары".
// 
// Возвращаемое значение:
//  Строка табличной части, ДанныеФормыЭлементКоллекции, Неопределено - строка с услугой агента.
//
Функция СтрокаУслугаАгента(Товары, ТекущаяСтрока) Экспорт
	
	СтрокаУслугаАгента = Неопределено;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.КлючСвязи) Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("КлючСвязиУслугаАгента", ТекущаяСтрока.КлючСвязи);
		
		НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаУслугаАгента = НайденныеСтроки[0];
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрокаУслугаАгента;
	
КонецФункции

// Переносит договор из шапки документа в ТЧ "Товары".
//
// Параметры:
//  Объект - ДокументОбъект.
//
Процедура ПеренестиДоговорКотрагентаВТЧ(Объект) Экспорт
	
	ДоговорКонтрагента = Неопределено;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ДоговорКонтрагента") Тогда
		ДоговорКонтрагента = Объект.ДоговорКонтрагента;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) ИЛИ Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		СтрокаТовары.ДоговорКонтрагента = ДоговорКонтрагента;
	КонецЦикла;
	
	Объект.ДоговорКонтрагента = Неопределено;
	
КонецПроцедуры

// Удаляет строки с агентскими услугами в ТЧ "Товары".
//
// Параметры:
//  Товары - Табличная часть, ДанныеФормыКоллекция - табличная часть "Товары",
//  ТекущаяСтрока - Строка табличной части, ДанныеФормыЭлементКоллекции - текущая строка табличной части "Товары".
//
Процедура УдалитьСтрокиАгентскогоВознаграждения(Товары, ТекущаяСтрока = Неопределено) Экспорт
	
	СтрокиКУдалению = Новый Массив;
	Если ТекущаяСтрока = Неопределено Тогда
		Для Каждого СтрокаТовары Из Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТовары.КлючСвязиУслугаАгента) Тогда
				СтрокиКУдалению.Добавить(СтрокаТовары);
			КонецЕсли;
		КонецЦикла;
	Иначе
		СтрокаУслугаАгента = СтрокаУслугаАгента(Товары, ТекущаяСтрока);
		Если НЕ СтрокаУслугаАгента = Неопределено Тогда
			СтрокиКУдалению.Добавить(СтрокаУслугаАгента);
		КонецЕсли;
	КонецЕсли;
	
	// Удалим строки с услугой агента.
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		Товары.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область АгентскоеВознаграждение

// Возвращает данные агентского договора.
//
// Параметры:
//  ТекущаяСтрока - СтрокаТЧ, Структура, ДанныеФормыЭлементКоллекции - объект, из котрого следует получить данные агентского договора.
//
// Возвращаемое значение:
//  Структура - структура данных договора.
//
Функция ДанныеАгентскогоДоговора(ТекущаяСтрока) Экспорт
	
	ДанныеСтроки = Новый Структура("ДанныеАгентскогоДоговора");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущаяСтрока);
	
	Возврат ДанныеСтроки.ДанныеАгентскогоДоговора;
	
КонецФункции

Процедура ВыделитьАгентскоеВознаграждениеВТаблице(Объект, СтруктураДействий, ТекущаяСтрока, КоллекцияДействийСоСтроками) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ВидОперации")
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействий = Неопределено Тогда
		СтруктураДействий = Новый Структура;
	КонецЕсли;
	
	СтрокиКУдалению = Новый Массив;
	Если ТекущаяСтрока = Неопределено Тогда
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			ВыделитьАгентскоеВознаграждениеВСтроке(Объект, СтруктураДействий, СтрокаТовары, КоллекцияДействийСоСтроками, СтрокиКУдалению);
		КонецЦикла;
	Иначе
		ВыделитьАгентскоеВознаграждениеВСтроке(Объект, СтруктураДействий, ТекущаяСтрока, КоллекцияДействийСоСтроками, СтрокиКУдалению);
	КонецЕсли;
	
	// Удалим строки с услугой агента, не привязанные к строке с основной номенклатурой.
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		Объект.Товары.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыделитьАгентскоеВознаграждениеВСтроке(Объект, СтруктураДействий, ТекущаяСтрока, КоллекцияДействийСоСтроками, СтрокиКУдалению)
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.КлючСвязиУслугаАгента) Тогда
		// Строка является услугой агента, выделение не требуется.
		Возврат;
	КонецЕсли;
	
	ДанныеАгентскогоДоговора = ДанныеАгентскогоДоговора(ТекущаяСтрока);
	
	// Найдем связанную строку с услугой агента.
	СтрокаУслугаАгента = СтрокаУслугаАгента(Объект.Товары, ТекущаяСтрока);
	
	Если НЕ ЗначениеЗаполнено(ДанныеАгентскогоДоговора) Тогда
		// Удалим строку с агентским вознаграждением.
		Если НЕ СтрокаУслугаАгента = Неопределено Тогда
			СтрокиКУдалению.Добавить(СтрокаУслугаАгента);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.КлючСвязи) Тогда
		ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
	КонецЕсли;
	
	// Добавим строку при необходимости.
	Если СтрокаУслугаАгента = Неопределено Тогда
		//СтрокаУслугаАгента = Объект.Товары.Добавить();
		Индекс = Объект.Товары.Индекс(ТекущаяСтрока);
		СтрокаУслугаАгента = Объект.Товары.Вставить(Индекс + 1);
		СтрокаУслугаАгента.КлючСвязиУслугаАгента = ТекущаяСтрока.КлючСвязи;
		СтрокаУслугаАгента.Количество = 1;
		СтрокаУслугаАгента.КоличествоУпаковок = 1;
		
		ЗаполнитьКлючСвязи(Объект.Товары, СтрокаУслугаАгента, "КлючСвязи");
	КонецЕсли;
	
	
	// Рассчитаем показатели агентского вознаграждения.
	АгентскоеВознаграждение         = 0;
	Платеж                          = ТекущаяСтрока.Сумма;
	ПлатежСАгентскимВознаграждением = 0;
	
	ДенежныеСредстваКлиентСервер.РассчитатьПоказателиАгентскогоПлатежа(ДанныеАгентскогоДоговора, Платеж, ПлатежСАгентскимВознаграждением, АгентскоеВознаграждение);
	
	// Подготовим действия для строки с услугой агента.
	СтруктураДействийУслугаАгента = Новый Структура;
	СтруктураДействийУслугаАгента.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
	Если СтруктураДействий.Свойство("ЗаполнитьДоговорПлатежногоАгента") Тогда
		// Обновим параметры агентского договора.
		СтрокаУслугаАгента.Номенклатура = ДанныеАгентскогоДоговора.УслугаАгента;
		СтруктураДействийУслугаАгента.Вставить("ЗаполнитьТипНоменклатуры");
		//СтруктураДействийУслугаАгента.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДС(Объект));
	КонецЕсли;
	
	НаследуемыеДействия = Новый Массив;
	НаследуемыеДействия.Добавить("ПроставитьПродавца");
	НаследуемыеДействия.Добавить("ЗаполнитьВидНалога");
	НаследуемыеДействия.Добавить("ЗаполнитьОрганизациюПродажи");
	НаследуемыеДействия.Добавить("ЗаполнитьСкладПродажи");
	НаследуемыеДействия.Добавить("ЗаполнитьСтавкуНДССкладВСтроке");
	НаследуемыеДействия.Добавить("ЗаполнитьСтавкуНДССкладВШапке");
	НаследуемыеДействия.Добавить("ЗаполнитьПредставлениеТабло");
	Для Каждого НаследуемоеДействие Из НаследуемыеДействия Цикл
		Если СтруктураДействий.Свойство(НаследуемоеДействие) Тогда
			СтруктураДействийУслугаАгента.Вставить(НаследуемоеДействие, СтруктураДействий[НаследуемоеДействие]);
		КонецЕсли;
	КонецЦикла;
	
	КоллекцияДействийСоСтроками.Вставить(СтрокаУслугаАгента, СтруктураДействийУслугаАгента);
	
	СтрокаУслугаАгента.Сумма = АгентскоеВознаграждение;
	СтрокаУслугаАгента.Цена  = АгентскоеВознаграждение;
	
КонецПроцедуры

Процедура УстановитьВидимостьДоступностьЭлементовАгентскогоВознаграждения(Форма, Объект) Экспорт
	
	ВидимостьАВ = ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Форма.Элементы, "ТоварыЦенаСАгентскимВознаграждением", "Видимость");
	
	Если НЕ ВидимостьАВ = Ложь Тогда
		// По умолчанию видимость элементов агентского вознаграждения отключена.
		// После включения в течение сеана работы с объектом не меняем.
		// Также учитываем "Неопределено".
		Возврат;
	КонецЕсли;
	
	СтрокиУслугаАгента = Объект.Товары.НайтиСтроки(Новый Структура("УслугаАгента", Истина));
	Если СтрокиУслугаАгента.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ТоварыЦенаСАгентскимВознаграждением", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ТоварыДоговорКонтрагента", "Видимость", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРасчетныеПоляАгентскогоВознаграждения(Объект, ТекущаяСтрока = Неопределено) Экспорт
	
	Если ТекущаяСтрока = Неопределено Тогда
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			ЗаполнитьРасчетныеПоляАгентскогоВознагражденияСтроки(Объект, СтрокаТовары);
		КонецЦикла;
	Иначе
		ЗаполнитьРасчетныеПоляАгентскогоВознагражденияСтроки(Объект, ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРасчетныеПоляАгентскогоВознагражденияСтроки(Объект, ТекущаяСтрока, СтрокаУслугаАгента = Неопределено)
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.КлючСвязиУслугаАгента) Тогда
		// Самостоятельно строку с услугой агента не обрабатываем.
		Возврат;
	КонецЕсли;
	
	Цена                          = ТекущаяСтрока.Цена;
	ЦенаСАгентскимВознаграждением = 0;
	
	ДанныеАгентскогоДоговора = ДанныеАгентскогоДоговора(ТекущаяСтрока);
	Если ЗначениеЗаполнено(ДанныеАгентскогоДоговора) Тогда
		// Строка с основной номенклатурой.
		Если СтрокаУслугаАгента = Неопределено Тогда
			СтрокаУслугаАгента = СтрокаУслугаАгента(Объект.Товары, ТекущаяСтрока);
		КонецЕсли;
		Если СтрокаУслугаАгента = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ДенежныеСредстваКлиентСервер.РассчитатьПоказателиАгентскогоПлатежа(ДанныеАгентскогоДоговора, Цена, ЦенаСАгентскимВознаграждением);
	
		СтрокаУслугаАгента.УслугаАгента = Истина;
	КонецЕсли;
	
	ТекущаяСтрока.ЦенаСАгентскимВознаграждением = ЦенаСАгентскимВознаграждением;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
