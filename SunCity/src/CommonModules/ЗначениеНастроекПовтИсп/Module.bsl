#Область ПрограммныйИнтерфейс

#Область ОбщиеЗначения

// Получение предопределенного значения.
//
// Параметры:
//  СтруктураЗапроса - Массив - результат запроса.
//
// Возвращаемое значение:
//  Структура - структура содержащая предопределенные значения.
//
Функция ПолучитьПредопределенныеЗначения(СтруктураЗапроса) Экспорт
	
	ВозвращаемаяСтруктура = Новый Структура;
	
	Для каждого КлючИЗначение Из СтруктураЗапроса Цикл
		
		Если КлючИЗначение.Ключ = "Перечисления" Тогда
			
			ВозвращаемаяСтруктура.Вставить("Перечисления", Новый Структура);
			
			Для каждого КлючИЗначениеПеречисления Из СтруктураЗапроса.Перечисления Цикл
				
				ПеречислениеМенеджер = Перечисления[КлючИЗначениеПеречисления.Ключ];
				
				ВозвращаемаяСтруктура2Уровень = Новый Структура;
				
				ВозвращаемаяСтруктура.Перечисления.Вставить(КлючИЗначениеПеречисления.Ключ, ВозвращаемаяСтруктура2Уровень);
				
				Для каждого КлючИЗначениеЗначенияПеречисления Из СтруктураЗапроса.Перечисления[КлючИЗначениеПеречисления.Ключ] Цикл
					
					Если КлючИЗначениеЗначенияПеречисления.Ключ = "ПустаяСсылка" Тогда
						ЗначениеПеречисления = ПеречислениеМенеджер.ПустаяСсылка();
						ВозвращаемаяСтруктура2Уровень.Вставить(КлючИЗначениеЗначенияПеречисления.Ключ, ЗначениеПеречисления);
					Иначе
						ЗначениеПеречисления = ПеречислениеМенеджер[КлючИЗначениеЗначенияПеречисления.Ключ];
						ВозвращаемаяСтруктура2Уровень.Вставить(КлючИЗначениеЗначенияПеречисления.Ключ, ЗначениеПеречисления);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		ИначеЕсли КлючИЗначение.Ключ = "ФункциональныеОпции" Тогда
			
			ВозвращаемаяСтруктура.Вставить("ФункциональныеОпции", Новый Структура);
			
			Для каждого КлючИЗначениеФО Из СтруктураЗапроса.ФункциональныеОпции Цикл
				
				ЗначениеФО = ПолучитьФункциональнуюОпцию(КлючИЗначениеФО.Ключ);
				
				ВозвращаемаяСтруктура.ФункциональныеОпции.Вставить(КлючИЗначениеФО.Ключ, ЗначениеФО);
				
			КонецЦикла;
			
		ИначеЕсли КлючИЗначение.Ключ = "ПустыеСсылкиНаСправочники" Тогда
			
			ВозвращаемаяСтруктура.Вставить("ПустыеСсылкиНаСправочники", Новый Структура);
			
			Для каждого КлючИЗначениеПС Из СтруктураЗапроса.ПустыеСсылкиНаСправочники Цикл
				
				ПустаяСсылка = Справочники[КлючИЗначениеПС.Ключ].ПустаяСсылка();
				
				ВозвращаемаяСтруктура.ПустыеСсылкиНаСправочники.Вставить(КлючИЗначениеПС.Ключ, ПустаяСсылка);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции

// Получение значения константы.
//
// Параметры:
//  ИмяКонстанты - Строка - наименование константы.
//
// Возвращаемое значение:
//  Значение - значение константы.
Функция ПолучитьЗначениеКонстанты(ИмяКонстанты) Экспорт

	Возврат Константы[ИмяКонстанты].Получить();

КонецФункции

#КонецОбласти

#Область ПолучениеНастроек

// Получает организацию, указанную в настройках пользователя.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь, по которому будет получена организация.
//
// Возвращаемое значение:
//  СправочникСсылка.Организации - организация по пользователю.
//
Функция ОрганизацияПользователяПоУмолчанию(Пользователь) Экспорт
	Возврат ЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнаяОрганизация");
КонецФункции

// Получает склад поступления, указанный в настройках пользователя.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь, по которому будет получен склад поступления.
//
// Возвращаемое значение:
//  СправочникСсылка.Склады - склад поступления по пользователю.
//
Функция СкладПоступленияПользователяПоУмолчанию(Пользователь) Экспорт
	Возврат ЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойСкладПоступления");
КонецФункции 

// Получает склад продажи, указанный в настройках пользователя.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь, по которому будет получен склад продажи.
//
// Возвращаемое значение:
//  СправочникСсылка.Склады - склад продажи по пользователю.
//
Функция СкладПродажиПользователяПоУмолчанию(Пользователь) Экспорт
	Возврат ЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойСкладПродажи");
КонецФункции 

// Получает поставщика, указанного в настройках пользователя.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь, по которому будет получен поставщик.
//
// Возвращаемое значение:
//  СправочникСсылка.Контрагенты - поставщик по пользователю.
//
Функция ПоставщикПользователяПоУмолчанию(Пользователь) Экспорт
	Возврат ЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойПоставщик");
КонецФункции 

// Получает покупателя, указанного в настройках пользователя.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь, по которому будет получен покупатель.
//
// Возвращаемое значение:
//  СправочникСсылка.ФизическиеЛица - покупатель по пользователю.
//
Функция ПокупательПользователяПоУмолчанию(Пользователь) Экспорт
	Возврат ЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойПокупатель");
КонецФункции 

// Получает продавца, указанного в настройках пользователя.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь, по которому будет получен продавец.
//
// Возвращаемое значение:
//  СправочникСсылка.ФизическиеЛица - продавец по пользователю.
//
Функция ПродавецПользователяПоУмолчанию(Пользователь) Экспорт
	Возврат ЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойПродавец");
КонецФункции 

// Получает кассу, указанного в настройках пользователя.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь, по которому будет получена касса.
//
// Возвращаемое значение:
//  СправочникСсылка.Кассы - касса по пользователю.
//
Функция КассаПользователяПоУмолчанию(Пользователь) Экспорт
	Возврат ЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнаяКасса");
КонецФункции

// Получает кассу ККМ, указанную в настройках пользователя.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь, по которому будет получена КассаККМ.
//
// Возвращаемое значение:
//  СправочникСсылка.КассыККМ - КассаККМ по пользователю.
//
Функция КассаККМПользователяПоУмолчанию(Пользователь) Экспорт
	Возврат ЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнаяКассаККМ");
КонецФункции 

// Получает Ставку НДС, указанную в настройках пользователя.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь, по которому будет получен ставка НДС.
//
// Возвращаемое значение:
//  Перечисления.СтавкиНДС - ставка НДС по пользователю.
//
Функция СтавкаНДСНовыхНоменклатурныхПозицийПользователяПоУмолчанию(Пользователь) Экспорт
	Возврат ЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнаяСтавкаНДСНовыхНоменклатурныхПозиций");
КонецФункции 

#КонецОбласти

#Область ПолучениеЗначенийПоУмолчанию

// Общая служебная функция получения значения настроек пользователя.
//
// Параметры: 
// Пользователь - СправочникСсылка.Пользователи - пользователь, по которому берутся значения по умолчанию.
// Настройка - Строка - наименование настройки.
// СписокПолей - СписокЗначений.
//
// Возвращаемое значение:
//  Значение - значение настройки по пользователю.
//
Функция ЗначениеПоУмолчаниюПользователя(Пользователь, Настройка, СписокПолей = Неопределено) Экспорт
	
	НастройкаТипЗнч = ПланыВидовХарактеристик.НастройкиПользователей[Настройка].ТипЗначения;
	НастройкаТипЗнчСправочник = Справочники.ТипВсеСсылки().СодержитТип(НастройкаТипЗнч.Типы()[0]);
	Если НастройкаТипЗнчСправочник Тогда
		МетаданныеТипаНастройки = Метаданные.НайтиПоТипу(НастройкаТипЗнч.Типы()[0]);
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Магазин", ПараметрыСеанса.ТекущийМагазин);
	Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.НастройкиПользователей[Настройка]);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Значение КАК Значение";
	Если СписокПолей <> Неопределено И НастройкаТипЗнчСправочник Тогда
		СправочникИмя = МетаданныеТипаНастройки.Имя;
		Для каждого Элемент Из СписокПолей Цикл
			ИмяРеквизита = Элемент.Значение;
			Представление = Элемент.Представление;
			Если ПустаяСтрока(Представление) Тогда
				Представление = ИмяРеквизита;
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + ",
			|ВЫРАЗИТЬ(Значение КАК Справочник." + СправочникИмя + ")." + ИмяРеквизита + "  КАК " + Представление;
		КонецЦикла;
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК РегистрЗначениеПрав
	|
	|ГДЕ
	|	Пользователь = &Пользователь
	|	И Магазин    = &Магазин
	|	И Настройка  = &Настройка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Если СписокПолей = Неопределено Тогда
		ПустоеЗначение = НастройкаТипЗнч.ПривестиЗначение();
	Иначе
		ПустоеЗначение = Новый Структура("Значение", НастройкаТипЗнч.ПривестиЗначение());
		Для каждого ЭлементСписка Из СписокПолей Цикл
			ПустоеЗначение.Вставить(?(ПустаяСтрока(ЭлементСписка.Представление), ЭлементСписка.Значение, ЭлементСписка.Представление));
		КонецЦикла;
	КонецЕсли;
	Если Выборка.Следующий() Тогда
		Если Не ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат ПустоеЗначение;
		КонецЕсли;
		Если НастройкаТипЗнчСправочник И ПараметрыДоступа("Чтение", МетаданныеТипаНастройки, "Ссылка").ОграничениеУсловием Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 1 ИЗ Справочник." + МетаданныеТипаНастройки.Имя + " ГДЕ Ссылка = &Ссылка";
			Запрос.УстановитьПараметр("Ссылка", Выборка.Значение);
			РезультатЗапроса = Запрос.Выполнить();
			Если РезультатЗапроса.Пустой() Тогда
				Возврат ПустоеЗначение;
			КонецЕсли;
		КонецЕсли;
		Если СписокПолей = Неопределено Тогда
			Возврат Выборка.Значение;
		Иначе
			ЗаполнитьЗначенияСвойств(ПустоеЗначение, Выборка);
			Возврат ПустоеЗначение;
		КонецЕсли;
	Иначе
		Возврат ПустоеЗначение;
	КонецЕсли;
	
КонецФункции // ЗначениеПоУмолчаниюПользователя()

// Возвращает кассу организации, если она одна в ИБ.
//
// Параметры:
//  Организация    - СправочникСсылка.Организации - Организация, для которой необходимо получить счет.
//  ФормаОплаты    - ПеречислениеСсылка.ФормыОплаты - Форма оплаты, по которой определяется необходимость.
//                   получения кассы.
//  Касса - СправочникСсылка.Кассы - Касса, которую нужно заполнить.
//  Магазин - СправочникСсылка.Магазины - магазин, по которому подбирается касса.
//  Пользователь - СправочникСсылка.Пользователи - пользователь, по которому подбирается касса.
//
// Возвращаемое значение:
//  СправочникСсылка.Кассы - касса организации. Если переданная в качестве параметра касса уже заполнена - возвращает ее.
//                           Если касса не передана в качестве параметра или передана пустая,
//                           возвращает единственную в информационной базе кассу. Если касса
//                           в базе не одна - возвращает пустую ссылку на кассу.
//                           Возвращает кассу, только если переданная форма оплаты наличная или Неопределено.
//
Функция КассаОрганизацииПоУмолчанию(
	Знач Организация = Неопределено,
	Знач ФормаОплаты = Неопределено,
	Знач Касса = Неопределено,
	Знач Магазин = Неопределено,
	Пользователь = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Касса)
		И (ФормаОплаты = Неопределено Или ФормаОплаты = Перечисления.ФормыОплаты.Наличная) Тогда
		
		Если ЗначениеЗаполнено(Пользователь) Тогда
			Касса = КассаПользователяПоУмолчанию(Пользователь);
			Если ЗначениеЗаполнено(Касса) Тогда
				РеквизитыКассы = Справочники.Кассы.РеквизитыКассы(Касса);
				Если ЗначениеЗаполнено(Организация) И НЕ Организация = РеквизитыКассы.Организация
					ИЛИ ЗначениеЗаполнено(Магазин) И НЕ Магазин = РеквизитыКассы.Магазин Тогда
					Касса = Справочники.Кассы.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Организация) И НЕ ЗначениеЗаполнено(Касса) Тогда
			Касса = Справочники.Кассы.КассаПоУмолчанию(Организация, Магазин);
		КонецЕсли;
		
		Возврат Касса;
	Иначе
		Возврат Касса;
	КонецЕсли;
	
КонецФункции // КассаОрганизацииПоУмолчанию()

// Получает организацию, если она одна в ИБ.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация, которую нужно заполнить.
//  Пользователь - СправочникСсылка.Пользователи - Пользователь, по которому подбирается организация.
//
// Возвращаемое значение:
//  СправочникСсылка.Организации - организация по умолчанию. Если переданная в качестве параметра 
//                                 организация уже заполнена - возвращает ее.
//                                 Если организация не передана в качестве параметра или передана пустая,
//                                 возвращает единственную в информационной базе организацию. Если организация
//                                 в базе не одна - возвращает пустую ссылку на организацию.
//
Функция ОрганизацияПоУмолчанию(Знач Организация = Неопределено, Пользователь = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
			Возврат Справочники.Организации.ПолучитьОрганизациюПоУмолчанию();
		Иначе
			ОрганизацияНастроек = ОрганизацияПользователяПоУмолчанию(Пользователь);
			Если ЗначениеЗаполнено(ОрганизацияНастроек) Тогда
				Возврат ОрганизацияНастроек;
			Иначе
				Возврат Справочники.Организации.ПолучитьОрганизациюПоУмолчанию();
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат Организация;
	КонецЕсли;
	
КонецФункции // ПолучитьОрганизациюПоУмолчанию()

// Возвращает склад поступления по умолчанию.
//
// Параметры:
//  Магазин - СправочникСсылка.Магазины - Магазин, по которому определяется склад.
//  ТипСклада - ПеречислениеСсылка.ТипыСкладов - тип склада.
//  Склад - СправочникСсылка.Склады - Склад, который нужно заполнить.
//  Пользователь - СправочникСсылка.Пользователи - - Пользователь, по которому подбирается склад поступления.
//
// Возвращаемое значение:
//  СправочникСсылка.Склады - склад по умолчанию
// 
Функция СкладПоступленияПоУмолчанию(Знач Магазин, ТипСклада = Неопределено, Знач Склад = Неопределено, Пользователь = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда		
			Если ЗначениеЗаполнено(Магазин) Тогда
				Возврат Справочники.Склады.ПолучитьСкладПоступленияПоУмолчанию(Магазин, ТипСклада);
			Иначе
				Возврат Справочники.Склады.ПустаяСсылка();
			КонецЕсли;			
		Иначе
			СкладНастроек = СкладПоступленияПользователяПоУмолчанию(Пользователь);
			Если ЗначениеЗаполнено(Магазин)
				И ЗначениеЗаполнено(СкладНастроек)
				И СкладНастроек.Магазин <> Магазин Тогда
				СкладНастроек = Справочники.Склады.ПустаяСсылка();
			КонецЕсли;			
			Если ЗначениеЗаполнено(СкладНастроек) Тогда
				Возврат СкладНастроек;
			Иначе
				Если ЗначениеЗаполнено(Магазин) Тогда
					Возврат Справочники.Склады.ПолучитьСкладПоступленияПоУмолчанию(Магазин, ТипСклада);
				Иначе
					Возврат Справочники.Склады.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	Иначе
		Возврат Склад;
	КонецЕсли;

КонецФункции 

// Возвращает склад продажи по умолчанию.
//
// Параметры:
//  Магазин - СправочникСсылка.Магазины - Магазин, по которому определяется склад.
//  ТипСклада - ПеречислениеСсылка.ТипыСкладов - Склад, который нужно заполнить.
//  Склад - СправочникСсылка.Склады - Склад, который нужно заполнить.
//  Пользователь - СправочникСсылка.Пользователи - пользователь, по которому определяется склад.
//
// Возвращаемое значение:
// СправочникСсылка.Склады - склад продажи по умолчанию.
//
Функция СкладПродажиПоУмолчанию(Знач Магазин, ТипСклада = Неопределено, Знач Склад = Неопределено, Пользователь = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда		
			Если ЗначениеЗаполнено(Магазин) Тогда
				Возврат Справочники.Склады.ПолучитьСкладПродажиПоУмолчанию(Магазин, ТипСклада);
			Иначе
				Возврат Справочники.Склады.ПустаяСсылка();
			КонецЕсли;			
		Иначе
			СкладНастроек = СкладПродажиПользователяПоУмолчанию(Пользователь);
			Если ЗначениеЗаполнено(Магазин)
				И ЗначениеЗаполнено(СкладНастроек)
				И СкладНастроек.Магазин <> Магазин Тогда
				СкладНастроек = Справочники.Склады.ПустаяСсылка();
			КонецЕсли;	
			Если ЗначениеЗаполнено(СкладНастроек) Тогда
				Возврат СкладНастроек;
			Иначе
				Если ЗначениеЗаполнено(Магазин) Тогда
					Возврат Справочники.Склады.ПолучитьСкладПродажиПоУмолчанию(Магазин, ТипСклада);
				Иначе
					Возврат Справочники.Склады.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	Иначе
		Возврат Склад;
	КонецЕсли;

КонецФункции 

// Возвращает магазин по умолчанию.
//
// Параметры:
//  Магазин - СправочникСсылка.Магазины - Магазин, который нужно заполнить.
//
// Возвращаемое значение:
//  СправочникСсылка.Магазины - магазин по умолчанию.
//
Функция МагазинПоУмолчанию(Знач Магазин = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Магазин) Тогда
		МагазинСеанса = ПараметрыСеанса.ТекущийМагазин;
		Если ЗначениеЗаполнено(МагазинСеанса) Тогда
			Возврат МагазинСеанса;
		Иначе
			Возврат Справочники.Магазины.МагазинПоУмолчанию();
		КонецЕсли;
	Иначе
		Возврат Магазин;
	КонецЕсли;
	
КонецФункции // МагазинПоУмолчанию()

// Возвращает формат магазина по умолчанию.
//
// Параметры:
//  ФорматМагазина - СправочникСсылка.ФорматыМагазинов - формат магазина, который нужно заполнить.
//
// Возвращаемое значение:
//  СправочникСсылка.ФорматыМагазинов - формат магазина по умолчанию.
//
Функция ФорматМагазинаПоУмолчанию(Знач ФорматМагазина = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(ФорматМагазина) Тогда
		Возврат Справочники.ФорматыМагазинов.ПолучитьФорматМагазинаПоУмолчанию();
	Иначе
		Возврат ФорматМагазина;
	КонецЕсли;
	
КонецФункции // ПолучитьМагазинПоУмолчанию()

// Возвращает поставщика по умолчанию.
//
// Параметры:
//  Поставщик - СправочникСсылка.Контрагенты - контрагент, которого нужно заполнить.
//  Пользователь - СправочникСсылка.Пользователи - пользовател, по которому заполняется поставщик.
//
// Возвращаемое значение:
//  СправочникСсылка.Контрагенты - контрагент по умолчанию.
//
Функция ПоставщикПоУмолчанию(Пользователь, Знач Поставщик = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Поставщик) Тогда
		ПоставщикНастроек = ПоставщикПользователяПоУмолчанию(Пользователь);
		Если ЗначениеЗаполнено(ПоставщикНастроек) Тогда
			Возврат ПоставщикНастроек;
		Иначе
			Возврат Справочники.Контрагенты.ПустаяСсылка();				
		КонецЕсли;	      
	Иначе
		Возврат Поставщик;
	КонецЕсли;
		
КонецФункции 

// Возвращает покупателя по умолчанию.
//
// Параметры:
//  Покупатель - СправочникСсылка.Контрагенты - покупатель для заполнения.
//  Пользователь - СправочникСсылка.Пользователи - пользователь, по которому заполняется покупатель.
//
// Возвращаемое значение:
//  СправочникСсылка.Контрагенты - покупатель по умолчанию.
//
Функция ПокупательПоУмолчанию(Пользователь, Знач Покупатель = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Покупатель) Тогда
		ПокупательНастроек = ПокупательПользователяПоУмолчанию(Пользователь);
		Если ЗначениеЗаполнено(ПокупательНастроек) Тогда
			Возврат ПокупательНастроек;
		Иначе
			Возврат Справочники.Контрагенты.ПустаяСсылка();				
		КонецЕсли;	      
	Иначе
		Возврат Покупатель;
	КонецЕсли;
		
КонецФункции 

// Возвращает продавца по умолчанию.
//
// Параметры:
//  Продавец - СправочникСсылка.ФизическиеЛица - продавец для заполения.
//  Пользователь - СправочникСсылка.Пользователи - пользователь, по которому заполняется продавец.
//
// Возвращаемое значение:
//  СправочникСсылка.ФизическиеЛица - продавец по умолчанию.
//
Функция ПродавецПоУмолчанию(Пользователь, Знач Продавец = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Продавец) Тогда
		ПродавецНастроек = ПродавецПользователяПоУмолчанию(Пользователь);
		Если ЗначениеЗаполнено(ПродавецНастроек) Тогда
			Возврат ПродавецНастроек;
		Иначе
			Возврат Справочники.ФизическиеЛица.ПустаяСсылка();				
		КонецЕсли;	      
	Иначе
		Возврат Продавец;
	КонецЕсли;
		
КонецФункции 

// Возвращает кассу ККМ по умолчанию.
//
// Параметры:
//  Организация    - СправочникСсылка.Организации - Организация, для которой необходимо получить счет.
//  КассаККМ       - СправочникСсылка.КассыККМ - Касса ККМ, которую нужно заполнить.
//  Магазин        - СправочникСсылка.Магазины - магазин, по которому заполняется Касса ККМ.
//  Пользователь   - СправочникСсылка.Пользователи - пользователь, по которому заполняется Касса ККМ.
//
// Возвращаемое значение:
//  СправочникСсылка.КассыККМ - Касса ККМ по умолчанию.
//
Функция КассаККМПоУмолчанию(Знач Организация, Знач Магазин, Знач КассаККМ = Неопределено, Пользователь = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		Если ЗначениеЗаполнено(Пользователь) Тогда
			КассаККМНастроек = КассаККМПользователяПоУмолчанию(Пользователь);
			Если ЗначениеЗаполнено(КассаККМНастроек) Тогда
				Возврат КассаККМНастроек;
			Иначе
				Возврат Справочники.КассыККМ.КассаПоУмолчанию(Организация, Магазин);
			КонецЕсли;
		Иначе
			Возврат Справочники.КассыККМ.КассаПоУмолчанию(Организация, Магазин);
		КонецЕсли;
	Иначе
		Возврат КассаККМ;
	КонецЕсли;
	
КонецФункции

// Возвращает ставку НДС для новых номенклатурных позиций по умолчанию.
//
// Параметры:
//  СтавкаНДС - СправочникСсылка.СтавкиНДС - ставка НДС по умолчанию.
//  Пользователь - СправочникСсылка.Пользователи - пользователь, по которому заполняется ставка НДС.
//
// Возвращаемое значение:
//  Справочники.СтавкиНДС - ставка НДС по умолчанию.
//
Функция СтавкаНДСНовыхНоменклатурныхПозицийПоУмолчанию(Пользователь, Знач СтавкаНДС = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(СтавкаНДС) Тогда
		СтавкаНДСНастроек = СтавкаНДСНовыхНоменклатурныхПозицийПользователяПоУмолчанию(Пользователь);
		Если ЗначениеЗаполнено(СтавкаНДСНастроек) Тогда
			Возврат СтавкаНДСНастроек;
		Иначе
			Возврат Справочники.СтавкиНДС.ПустаяСсылка();
		КонецЕсли;
	Иначе
		Возврат СтавкаНДС;
	КонецЕсли;
	
КонецФункции

// Возвращает вид номенклатуры для новых номенклатурных позиций по умолчанию.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь, по которому заполняется вид номенклатуры.
//  ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - вид номенклатуры для заполнения.
//
// Возвращаемое значение:
//  СправочникСсылка.ВидыНоменклатуры - вид номенклатуры по умолчанию
//
Функция ВидНоменклатурыПоУмолчанию(Пользователь, ВидНоменклатуры = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		ВидНоменклатурыПользователя = ЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойВидНоменклатуры");
		Если ЗначениеЗаполнено(ВидНоменклатурыПользователя) Тогда
			Возврат ВидНоменклатурыПользователя;
		Иначе
			Возврат Справочники.ВидыНоменклатуры.ПолучитьВидНоменклатурыПоУмолчанию();
		КонецЕсли;
	Иначе
		Возврат ВидНоменклатуры;
	КонецЕсли;
	
КонецФункции

// Возвращает банковский счет организации.
//
// Параметры:
//  Организация    - СправочникСсылка.Организации - Организация, для которой необходимо получить счет.
//  ФормаОплаты    - ПеречислениеСсылка.ФормыОплаты - Форма оплаты, по которой определяется необходимость
//                                                    получения банковского счета.
// БанковскийСчет - СправочникСсылка.БанковскиеСчета - Банковский счет, который нужно заполнить.
//
// Возвращаемое значение:
// СправочникСсылка.БанковскиеСчета              - банковский счет организации, если он один в ИБ.
//                                               Если переданный в качестве параметра банковский счет уже заполнен - возвращает его.
//                                               Если банковский счет не передан в качестве параметра или передан пустой,
//                                               возвращает единственный в информационной базе банковский счет. Если банковский счет
//                                               в базе не один - возвращает пустую ссылку на банковский счет.
//                                               Возвращает банковский счет, только если переданная форма оплаты безналичная или Неопределено.
//
Функция БанковскийСчетОрганизацииПоУмолчанию(Знач Организация = Неопределено, Знач ФормаОплаты = Неопределено, Знач БанковскийСчет = Неопределено) Экспорт
	
	Если (ФормаОплаты = Неопределено Или ФормаОплаты = Перечисления.ФормыОплаты.Безналичная)
		И Не ЗначениеЗаполнено(БанковскийСчет) И (ЗначениеЗаполнено(Организация) Или Организация = Неопределено) Тогда
		
		Возврат Справочники.БанковскиеСчета.ПолучитьБанковскийСчетПоУмолчанию(Организация);
		
	Иначе
		Возврат БанковскийСчет;
	КонецЕсли;
	
КонецФункции // БанковскийСчетОрганизацииПоУмолчанию()

// Возвращает хозяйственную операцию по коду хозяйственной операции.
//
// Параметры:
//  АналитикаХозяйственнойОперации - СправочникСсылка.АналитикаХозяйственнойОперации - аналитика хозяйственной операции для заполнения.
//  ХозяйственнаяОперация - СправочникСсылка.ХозяйственныеОперации - хозяйственная операция, по которой заполняется аналитика.
//  
// Возвращаемое значение:
//   Справочник.АналитикаХозяйственныхОпераций - аналитика хозяйственной операции по умолчанию.
//
Функция АналитикаХозяйственнойОперацииПоУмолчанию(Знач АналитикаХозяйственнойОперации, Знач ХозяйственнаяОперация) Экспорт

	Если Не ЗначениеЗаполнено(АналитикаХозяйственнойОперации) Тогда
		Возврат Справочники.АналитикаХозяйственныхОпераций.ПолучитьОперациюПоУмолчанию(ХозяйственнаяОперация);
	Иначе
		Возврат АналитикаХозяйственнойОперации;
	КонецЕсли;

КонецФункции // АналитикаХозяйственнойОперацииПоУмолчанию()

// Получает статью движения денежных средств для выбранной хозяйственной операции.
//
// Параметры:
//  ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
//
// Возвращаемое значение:
//  СправочникСсылка.СтатьиДвиженияДенежныхСредств - Предопределенная статья ДДС.
//
Функция СтатьяДвиженияДенежныхСредств(ХозяйственнаяОперация) Экспорт
	
	Возврат Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ХозяйственнаяОперация);
	
КонецФункции // СтатьяДвиженияДенежныхСредств()

// Возвращает банковский счет контрагента, если он один в ИБ.
//
// Параметры:
// Контрагент     - СправочникСсылка.Контрагенты - Контрагент, для которой необходимо получить счет.
// БанковскийСчет - СправочникСсылка.БанковскиеСчетаКонтрагентов - Банковский счет, который нужно заполнить.
//
// Возвращаемое значение:
// СправочникСсылка.БанковскиеСчетаКонтрагентов - банковский счет контрагента.
//                                                Если переданный в качестве параметра банковский счет уже заполнен - возвращает его.
//                                                Если банковский счет не передан в качестве параметра или передан пустой,
//                                                возвращает единственный в информационной базе банковский счет. Если банковский счет
//                                                в базе не один - возвращает пустую ссылку на банковский счет.
//                                                Возвращает банковский счет, только если переданная форма оплаты безналичная или Неопределено.
//
Функция БанковскийСчетКонтрагентаПоУмолчанию(Знач Контрагент, Знач БанковскийСчет = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(БанковскийСчет) И (ЗначениеЗаполнено(Контрагент)) Тогда
		
		Возврат Справочники.БанковскиеСчета.ПолучитьБанковскийСчетПоУмолчанию(Контрагент);
		
	Иначе
		Возврат БанковскийСчет;
	КонецЕсли;
	
КонецФункции // БанковскийСчетКонтрагентаПоУмолчанию()

// Получает предопределенную статью движения денежных средств для выбранной хозяйственной операции.
//
// Параметры:
//  ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
//
// Возвращаемое значение:
//  СправочникСсылка.СтатьиДвиженияДенежныхСредств - Предопределенная статья ДДС.
//
Функция ПредопределеннаяСтатьяДвиженияДенежныхСредств(ХозяйственнаяОперация) Экспорт
	
	Возврат Справочники.СтатьиДвиженияДенежныхСредств.ПредопределеннаяСтатьяДДСПоХозяйственнойОперации(ХозяйственнаяОперация);
	
КонецФункции // ПредопределеннаяСтатьяДвиженияДенежныхСредств()

#КонецОбласти

#Область Прочие

// Возвращает структуру с параметрами учетной политики по сериям.
//
// Параметры:
//  ВидНоменклатуры - вид номенклатуры для которого нужно получить параметры учетной политики по сериям.
//
// Возвращаемое значение:
//  Стуктура - см. Справочники.ВидыНоменклатуры.ПараметрыСерийНоменклатуры.
//
Функция ПараметрыСерийНоменклатуры(ВидНоменклатуры, ВладелецСерии) Экспорт
	Возврат Справочники.ВидыНоменклатуры.ПараметрыСерийНоменклатуры(ВидНоменклатуры, ВладелецСерии);
КонецФункции

// Возвращает структуру с параметрами политики учета серий.
//
// Параметры:
//  ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - политика, параметры которой нужно получить.
//  Склад - СправочникСсылка.Склады - склад, для которого нужно получить параметры учетной политики по сериям.
//
// Возвращаемое значение
//  Структура:
//   ПолитикаУчетаСерий
//   ВидНоменклатуры
//   УказыватьПриПоступлении
//   УказыватьПриОтгрузке
//   УказыватьПриПланированииОтгрузки
//   УчетСерийПоFEFO
//   УказыватьПоФактуОтбора
//   УчитыватьОстаткиСерий
//   ИспользоватьНомер
//   ИспользоватьСрокГодности
//   УказыватьСрокГодностиСТочностьюДоЧасов
//   ФорматнаяСтрокаСрокаГодности
//   МаскаВводаСрокаГодности.
//
Функция ПараметрыПолитикиУчетаСерийПоВидуНоменклатуры(ВидНоменклатуры, Магазин, Номенклатура)Экспорт
	Возврат Справочники.ПолитикиУчетаСерий.ПараметрыПолитикиУчетаСерийПоВидуНоменклатуры(ВидНоменклатуры, Магазин, Номенклатура);
КонецФункции

// Определяет, есть ли у текущего пользователя право изменять номенклатуру.
//
// Возвращаемое значение:
//  Булево - право изменения номенклатуры.
//
Функция ЕстьПравоИзмененияНоменклатуры() Экспорт
	
	Если Пользователи.РолиДоступны("ПолныеПрава") Тогда
		Возврат Истина;
	Иначе
		Возврат ПравоДоступа("Изменение", Метаданные.Справочники.Номенклатура);
	КонецЕсли;
	
КонецФункции

// Возвращает вид оплаты по типу, если вид по выбранному типу один
// в противном случае возвращается Неопределенно.
// 
// Параметры:
//  ТипОплаты - ПеречислениеСсылка.ТипыОплатЧекаККМ - тип оплаты по которому возвращается вид оплаты.
//
// Возвращаемое значение:
//  СправочникСсылка.ВидыОплатЧекаККМ - если вид по выбранному типу один.
//  Неопределено - если вид по выбранному типу не один.
//
Функция ВидОплатыПоТипу(ТипОплаты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ВидыОплатЧекаККМ.Ссылка
	|ИЗ
	|	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
	|ГДЕ
	|	НЕ ВидыОплатЧекаККМ.ПометкаУдаления
	|	И ВидыОплатЧекаККМ.ТипОплаты = &ТипОплаты";
	
	Запрос.УстановитьПараметр("ТипОплаты", ТипОплаты);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возращает стуктуру с параметрами шаблона серий номенклатуры
//
// Параметры:
//  ВидНоменклатуры    - СправочникСсылка.ВидыНоменклатуры - вид номенклатуры, параметры серий которого которой нужно получить
//  СкладПодразделение - СправочникСсылка.Склады, СправочникСсылка.СтруктураПредприятия - склад или производственное подразделение
//                       для которого нужно получить настройки серий. Если значение не задано - возвращаются настройки, которые
//                       от склада не зависят.
//
// Возвращаемое значение:
//  Структура - см. Справочники.ВидыНоменклатуры.НастройкиИспользованияСерий 
//
Функция НастройкиИспользованияСерий(ВидНоменклатуры, СкладПодразделение = Неопределено, Номенклатура = Неопределено) Экспорт
	Возврат Справочники.ВидыНоменклатуры.НастройкиИспользованияСерий(ВидНоменклатуры, СкладПодразделение, Номенклатура);
КонецФункции

#КонецОбласти

#КонецОбласти