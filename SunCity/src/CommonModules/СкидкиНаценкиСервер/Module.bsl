////////////////////////////////////////////////////////////////////////////////
// СкидкиНаценкиСервер содержит процедуры и функции для работы 
// со скидками и обработки действий пользователя со скидками.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполняет ключи связи в таблице товаров.
//
// Параметры:
//  Объект - ДокументОбъект, ОбработкаОбъект - объект в табличной части которого заполняются ключи связи.
//  ИмяТЧ - Строка - наименование таблицы товаров.
//
Процедура ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, ИмяТЧ) Экспорт
	
	ВремКлючСвязи = 0;
	ТабличнаяЧасть = Объект[ИмяТЧ];
	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		ВремКлючСвязи = ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(ТабличнаяЧасть, СтрокаТЧ, "КлючСвязи")
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает данные о выбранных управляемых скидках.
//
// Параметры:
//  Объект - ДокументОбъект - объект из которого выбираются данные об управляемых скидках.
//  ВходныеПараметры - Структура - структура выходных параметров куда помещаются данные о скидках..
//
Процедура ПодготовитьДанныеОВыбранныхУправляемыхСкидках(Объект, ВходныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаСкидок = Объект.СкидкиНаценки.Выгрузить(, "СкидкаНаценка");
	ТаблицаСкидок.Свернуть("СкидкаНаценка");
	
	МассивСкидок = ТаблицаСкидок.ВыгрузитьКолонку("СкидкаНаценка");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка КАК СкидкаНаценка
	|ИЗ
	|	Справочник.СкидкиНаценки КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.Управляемая
	|	И СкидкиНаценки.Ссылка В(&МассивСкидок)";
	
	Запрос.УстановитьПараметр("МассивСкидок", МассивСкидок);
	
	МассивУправляемыхСкидок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СкидкаНаценка");
	ВходныеПараметры.Вставить("МассивУправляемыхСкидок", МассивУправляемыхСкидок);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Формирует итоговое дерево скидок.
//
// Параметры:
//  ПараметрыРасчета - Структура - параметры расчета скидок.
//  ВходныеПараметры - Структура - параметры выполнения операции.
//
// Возвращаемое значение:
//  Структура - структура скидок.
//
Функция ДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Если ПараметрыРасчета.ТолькоСообщенияПослеОформления Тогда
		Запрос.Текст = ТекстЗапросаСообщенияПослеОформления(ПараметрыРасчета);
	Иначе
		Запрос.Текст = ТекстЗапросаСкидки(ПараметрыРасчета);
	КонецЕсли;
	
	Если ПараметрыРасчета.Свойство("ТолькоПредварительныйРасчет")
		И ПараметрыРасчета.ТолькоПредварительныйРасчет Тогда
		ТоварыБезРасчета = ПараметрыРасчета.Товары.Скопировать();
		Для Каждого СтрокаТовара Из ТоварыБезРасчета Цикл
			СтрокаТовара.Сумма = СтрокаТовара.Сумма + СтрокаТовара.СуммаАвтоматическойСкидки;
			СтрокаТовара.СуммаВсего = СтрокаТовара.Сумма;
			СтрокаТовара.СуммаАвтоматическойСкидки = 0;
		КонецЦикла;
		Запрос.УстановитьПараметр("Товары", ТоварыБезРасчета);
	Иначе
		Запрос.УстановитьПараметр("Товары", ПараметрыРасчета.Товары);
	КонецЕсли;
	Запрос.УстановитьПараметр("ПодарочныйСертификат", Перечисления.ТипыНоменклатуры.ПодарочныйСертификат);
	Запрос.УстановитьПараметр("Магазин", ПараметрыРасчета.Магазин);
	Если НЕ ПараметрыРасчета.ТолькоПредварительныйРасчет Тогда
		Если ПараметрыРасчета.УправляемыеСкидки = Неопределено Тогда
			Запрос.УстановитьПараметр("МассивУправляемыхСкидок", Новый Массив);
		Иначе
			Запрос.УстановитьПараметр("МассивУправляемыхСкидок", ПараметрыРасчета.УправляемыеСкидки.ВыгрузитьЗначения());
		КонецЕсли;
	КонецЕсли;
	Запрос.УстановитьПараметр("РасчетПодарков", ПараметрыРасчета.РасчетПодарков);
	Запрос.УстановитьПараметр("РасчетСообщений", ПараметрыРасчета.РасчетСообщений);
	Запрос.УстановитьПараметр("ТолькоСообщенияПослеОформления", ПараметрыРасчета.ТолькоСообщенияПослеОформления);
	
	Запрос.УстановитьПараметр("ПолучателиСкидок", ПараметрыРасчета.ПолучателиСкидок);
	
	Запрос.УстановитьПараметр("ТекущийДеньНедели", Перечисления.ДниНедели.Получить(ДеньНедели(ПараметрыРасчета.ТекущаяДата) - 1));
	Запрос.УстановитьПараметр("ТекущаяДата", ПараметрыРасчета.ТекущаяДата);
	
	Запрос.УстановитьПараметр("ЗапретРозничнойПродажи", Перечисления.СпособыПредоставленияСкидокНаценок.ЗапретРозничнойПродажи);
	Запрос.УстановитьПараметр("КоличествоБонусныхБаллов", Перечисления.СпособыПредоставленияСкидокНаценок.КоличествоБонусныхБаллов);
	Запрос.УстановитьПараметр("ПроцентОтСуммыВВидеБонусныхБаллов", Перечисления.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыВВидеБонусныхБаллов);
	Запрос.УстановитьПараметр("Подарок", Перечисления.СпособыПредоставленияСкидокНаценок.Подарок);
	Запрос.УстановитьПараметр("Сообщение", Перечисления.СпособыПредоставленияСкидокНаценок.Сообщение);
	
	Запрос.УстановитьПараметр("ЗаВремяПродажи", Перечисления.УсловияПредоставленияСкидокНаценок.ЗаВремяПродажи);
	Запрос.УстановитьПараметр("ПоТипуПолучателя", Перечисления.УсловияПредоставленияСкидокНаценок.ПоТипуПолучателя);
	Запрос.УстановитьПараметр("ЗаКомплектПокупки", Перечисления.УсловияПредоставленияСкидокНаценок.ЗаКомплектПокупки);
	
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	Запрос.УстановитьПараметр("ПустойСегмент", Справочники.СегментыНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойМагазин", Справочники.Магазины.ПустаяСсылка());
	Запрос.УстановитьПараметр("Действует", Перечисления.СтатусыДействияСкидок.Действует);
	
	Запрос.УстановитьПараметр("НаборПодарков", "НаборПодарков");
	Запрос.УстановитьПараметр("ЦеновыеГруппы", "ЦеновыеГруппы");
	Запрос.УстановитьПараметр("ВремяДействия", "ВремяДействия");
	Запрос.УстановитьПараметр("Получатели", "Получатели");
	Запрос.УстановитьПараметр("КомплектПокупки", "КомплектПокупки");
	
	Запрос.УстановитьПараметр("ПослеОформленияЧека", Перечисления.ТочкиВыдачиСообщенияКассиру.ПослеОформленияЧека);
	Запрос.УстановитьПараметр("СегментИсключаемойНоменклатуры", ПараметрыРасчета.СегментИсключаемойНоменклатуры);
	
	Запрос.УстановитьПараметр("ИспользуютсяЦеновыеГруппы", ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Если ПараметрыРасчета.ТолькоСообщенияПослеОформления Тогда
		ТаблицаТоваровПоСегментам = МассивРезультатов[7].Выгрузить();
		ДеревоУсловий = МассивРезультатов[8].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		ДеревоСкидок = МассивРезультатов[9].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Иначе
		ТаблицаТоваровПоСегментам = МассивРезультатов[8].Выгрузить();
		ДеревоУсловий = МассивРезультатов[9].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		ДеревоСкидок = МассивРезультатов[10].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	КонецЕсли;
	ДеревоСкидок.Колонки.Добавить("СтруктураДополнительныхДанных", Новый ОписаниеТипов("Структура"));
	
	ПараметрыРасчета.Вставить("ИспользоватьДисконтныйСервер", ПолучитьФункциональнуюОпцию("ИспользоватьДисконтныйСервер"));
	
	ОбработатьДеревоСкидок(ДеревоСкидок, ДеревоУсловий, ПараметрыРасчета, ТаблицаТоваровПоСегментам);
	
	ИтоговаяТаблицаСкидок = ПустаяТаблицаСкидок();
	ИтоговаяТаблицаПодарков = ПустаяТаблицаПодарков();
	ИтоговаяТаблицаСообщений = ПустаяТаблицаСообщений();
	ИтоговаяТаблицаБонусов = ПустаяТаблицаБонусов();
	Если ДеревоСкидок.Строки.Количество() > 0 Тогда
		ТаблицаСкидок = ДеревоСкидок.Строки[0].СтруктураДополнительныхДанных.ТаблицаСкидок;
		Для Каждого СтрокаСкидки Из ТаблицаСкидок Цикл
			ВыбратьПодчиненныеСкидки(СтрокаСкидки, ИтоговаяТаблицаСкидок, ИтоговаяТаблицаПодарков, ИтоговаяТаблицаБонусов, ИтоговаяТаблицаСообщений);
		КонецЦикла;
	КонецЕсли;
	
	ПроверитьМинимальныеЦеныПослеРасчетаСкидок(ИтоговаяТаблицаСкидок, ДеревоСкидок, ПараметрыРасчета);
	
	Если ПараметрыРасчета.Свойство("КонтролироватьОстаткиТоваров") Тогда
		Если ПараметрыРасчета.КонтролироватьОстаткиТоваров Тогда
			ПроверитьОтсутствиеПодарков(ИтоговаяТаблицаПодарков, ИтоговаяТаблицаСообщений, ПараметрыРасчета);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураСкидок = Новый Структура;
	СтруктураСкидок.Вставить("ДеревоСкидок", ДеревоСкидок);
	СтруктураСкидок.Вставить("ТаблицаСкидкиНаценки", ИтоговаяТаблицаСкидок);
	СтруктураСкидок.Вставить("ТаблицаПодарков", ИтоговаяТаблицаПодарков);
	СтруктураСкидок.Вставить("ТаблицаСообщений", ИтоговаяТаблицаСообщений);
	СтруктураСкидок.Вставить("ТаблицаБонусов", ИтоговаяТаблицаБонусов);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СтруктураСкидок;
	
КонецФункции

// Применяет результат расчета скидок к объекту.
//
// Параметры:
//  Объект - ДокументОбъект с табличной частью СкидкиНаценки - документ к которому необходимо применить результат расчета скидок.
//  ИмяТЧ - Строка - имя табличной части в которую необходимо скопировать скидки.
//  РезультатРасчетаСкидокНаценок - ТаблицаЗначений - таблица скидок.
//  ЕстьБонусы - Булево - признак наличия бонусов.
//
Процедура ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, ИмяТЧ, РезультатРасчетаСкидокНаценок, ЕстьБонусы = Ложь) Экспорт
	
	Если ТипЗнч(Объект.СкидкиНаценки) = Тип("ТаблицаЗначений") Тогда
		Объект.СкидкиНаценки = РезультатРасчетаСкидокНаценок.Скопировать();
	Иначе
		Объект.СкидкиНаценки.Загрузить(РезультатРасчетаСкидокНаценок);
	КонецЕсли;
	АвтоматическиеСкидкиНаценки = РезультатРасчетаСкидокНаценок.Скопировать();
	
	// Заполнение скидок в табличной части "Товары".
	АвтоматическиеСкидкиНаценки.Свернуть("КлючСвязи", "Сумма");
	АвтоматическиеСкидкиНаценки.Индексы.Добавить("КлючСвязи");
	
	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		
		СтрокаТаблицы = АвтоматическиеСкидкиНаценки.Найти(СтрокаТЧ.КлючСвязи, "КлючСвязи");
		Если СтрокаТаблицы = Неопределено Тогда
			СтрокаТЧ.СуммаАвтоматическойСкидки = 0;
			СуммаАвтоматическойСкидки          = 0; // Для точного расчета процента автоматической скидки.
		Иначе
			СтрокаТЧ.СуммаАвтоматическойСкидки = СтрокаТаблицы.Сумма;
			СуммаАвтоматическойСкидки          = СтрокаТаблицы.Сумма; // Для точного расчета процента автоматической скидки.
		КонецЕсли;
		
		// Применение автоматической скидки.
		СуммаБезСкидки = СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Цена;
		
		Если СуммаБезСкидки <> 0 Тогда
			СтрокаТЧ.ПроцентРучнойСкидки = 100 * СтрокаТЧ.СуммаРучнойСкидки / СуммаБезСкидки;
		КонецЕсли;
		
		СуммаСкидки = СуммаАвтоматическойСкидки + СтрокаТЧ.СуммаРучнойСкидки + ?(ЕстьБонусы, СтрокаТЧ.СуммаСкидкиОплатыБонусом, 0);
		
		СтрокаТЧ.ПроцентАвтоматическойСкидки = ?(СуммаБезСкидки = 0, 0 , 100 * СуммаАвтоматическойСкидки / СуммаБезСкидки);
		
		СтрокаТЧ.Сумма    = СуммаБезСкидки - ?(СуммаСкидки > СуммаБезСкидки, СуммаБезСкидки, СуммаСкидки);
		СтрокаТЧ.СуммаНДС = РассчитатьСуммуНДС(СтрокаТЧ, Объект.ЦенаВключаетНДС);
		
	КонецЦикла;
	
	Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаДокумента(Объект[ИмяТЧ], Объект.ЦенаВключаетНДС);
	Объект.СкидкиРассчитаны = Истина;
	
КонецПроцедуры // РассчитатьПоОбъекту()

// Округляет чек в пользу покупателя.
//
// Параметры:
//  Объект - ДокументОбъект - документ который необходимо округлить.
//  ИмяТЧ - Строка - имя табличной части оплат.
//  ИмяТЧСкидки - Строка - имя табличной части скидок документа.
//  ЭтоОплатаНаличными - Булево - Оплата производится только наличными.
//
Процедура ОкруглитьЧекВПользуПокупателя(Объект, ИмяТЧ, ИмяТЧСкидки, ЭтоОплатаНаличными = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ПорядокОкругленияСуммыЧекаВПользуПокупателя", "ПорядокОкругленияСуммыЧекаВПользуПокупателя");
	СтруктураРеквизитов.Вставить("ТипОкругленияЧекаВПользуПокупателя", "ТипОкругленияЧекаВПользуПокупателя");
	СтруктураРеквизитов.Вставить("ОкруглениеТолькоПриОплатеНаличными", "ОкруглениеТолькоПриОплатеНаличными");
	
	РеквизитыМагазина = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Магазин, СтруктураРеквизитов);
	ПорядокОкругленияСуммыЧекаВПользуПокупателя = РеквизитыМагазина.ПорядокОкругленияСуммыЧекаВПользуПокупателя;
	ТипОкругленияЧекаВПользуПокупателя = РеквизитыМагазина.ТипОкругленияЧекаВПользуПокупателя;
	ОкруглениеТолькоПриОплатеНаличными = РеквизитыМагазина.ОкруглениеТолькоПриОплатеНаличными;
	
	Если НЕ ЗначениеЗаполнено(ПорядокОкругленияСуммыЧекаВПользуПокупателя)
		ИЛИ ПорядокОкругленияСуммыЧекаВПользуПокупателя = Перечисления.ПорядкиОкругления.Окр0_01 
		ИЛИ (ОкруглениеТолькоПриОплатеНаличными И НЕ (ЭтоОплатаНаличными)) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗначениеОкругления = Число(Строка(ПорядокОкругленияСуммыЧекаВПользуПокупателя));
	Если ЗначениеЗаполнено(ЗначениеОкругления) Тогда
		Если ТипОкругленияЧекаВПользуПокупателя = 1 Тогда
			// Построчное округление
			ИтоговаяСуммаПослеОкругления = 0;
			МассивСтрокМеньшеОкругления = Новый Массив;
			Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
				
				Если СтрокаТЧ.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат
					ИЛИ (СтрокаТЧ.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
							И ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента))
					ИЛИ ЗначениеЗаполнено(СтрокаТЧ.КлючСвязиУслугаАгента)
					ИЛИ СтрокаТЧ.Сумма = 0 Тогда
					ИтоговаяСуммаПослеОкругления = ИтоговаяСуммаПослеОкругления + СтрокаТЧ.Сумма;
					Продолжить;
				КонецЕсли;
				
				ОкругленнаяСумма = Цел(СтрокаТЧ.Сумма / ЗначениеОкругления) * ЗначениеОкругления;
				СуммаОкругления = СтрокаТЧ.Сумма - ОкругленнаяСумма;
				Если СуммаОкругления > 0 Тогда
					Если СтрокаТЧ.Сумма > СуммаОкругления Тогда
						СтрокаТЧ.СуммаАвтоматическойСкидки = СтрокаТЧ.СуммаАвтоматическойСкидки + СуммаОкругления;
						СтрокаТЧ.Сумма = ОкругленнаяСумма;
						
						Если СтрокаТЧ.Цена = 0 Тогда
							СтрокаТЧ.ПроцентАвтоматическойСкидки = 0;
						Иначе
							СтрокаТЧ.ПроцентАвтоматическойСкидки = 100 * СтрокаТЧ.СуммаАвтоматическойСкидки / (СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Цена);
						КонецЕсли;
						СтрокаТЧ.СуммаНДС = РассчитатьСуммуНДС(СтрокаТЧ, Объект.ЦенаВключаетНДС);
						
						СтрокаСкидокНаценок = Объект[ИмяТЧСкидки].Добавить();
						СтрокаСкидокНаценок.КлючСвязи = СтрокаТЧ.КлючСвязи;
						СтрокаСкидокНаценок.Сумма = СуммаОкругления;
						
						ИтоговаяСуммаПослеОкругления = ИтоговаяСуммаПослеОкругления + СтрокаТЧ.Сумма;
					Иначе
						// Здесь сумма после округления будет нулевая
						МассивСтрокМеньшеОкругления.Добавить(СтрокаТЧ);
					КонецЕсли;
				Иначе
					ИтоговаяСуммаПослеОкругления = ИтоговаяСуммаПослеОкругления + СтрокаТЧ.Сумма;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ИтоговаяСуммаПослеОкругления > 0 Тогда
				Для Каждого СтрокаТЧ Из МассивСтрокМеньшеОкругления Цикл
					
					ОкругленнаяСумма = Цел(СтрокаТЧ.Сумма / ЗначениеОкругления) * ЗначениеОкругления;
					СуммаОкругления = СтрокаТЧ.Сумма - ОкругленнаяСумма;
					Если СуммаОкругления > 0 Тогда
						СтрокаТЧ.СуммаАвтоматическойСкидки = СтрокаТЧ.СуммаАвтоматическойСкидки + СуммаОкругления;
						СтрокаТЧ.Сумма = ОкругленнаяСумма;
						
						Если СтрокаТЧ.Цена = 0 Тогда
							СтрокаТЧ.ПроцентАвтоматическойСкидки = 0;
						Иначе
							СтрокаТЧ.ПроцентАвтоматическойСкидки = 100 * СтрокаТЧ.СуммаАвтоматическойСкидки / (СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Цена);
						КонецЕсли;
						СтрокаТЧ.СуммаНДС = РассчитатьСуммуНДС(СтрокаТЧ, Объект.ЦенаВключаетНДС);
						
						СтрокаСкидокНаценок = Объект[ИмяТЧСкидки].Добавить();
						СтрокаСкидокНаценок.КлючСвязи = СтрокаТЧ.КлючСвязи;
						СтрокаСкидокНаценок.Сумма = СуммаОкругления;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			СуммаБезОкругления = Объект[ИмяТЧ].Итог("Сумма");
			ОкругленнаяСумма = Цел(СуммаБезОкругления / ЗначениеОкругления) * ЗначениеОкругления;
			Округление = СуммаБезОкругления - ОкругленнаяСумма;
			
			ИндексСтрокиСМаксимальнойСуммой = -1;
			СуммаСтрокиСМаксимальнойСуммой  = 0;
			ИндексСтрокиСкидки              = -1;
			
			
			Если Округление > 0 И ОкругленнаяСумма > 0 Тогда
				
				МаксимальнаяСуммаСкидки = 0;
				Для каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
					
					Если СтрокаТЧ.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат
						ИЛИ (СтрокаТЧ.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
								И ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента))
						ИЛИ ЗначениеЗаполнено(СтрокаТЧ.КлючСвязиУслугаАгента) Тогда
						Продолжить;
					КонецЕсли;
					МаксимальнаяСуммаСкидки = МаксимальнаяСуммаСкидки + СтрокаТЧ.Сумма;
					
				КонецЦикла;
				
				Если Округление > МаксимальнаяСуммаСкидки Тогда
					Возврат;
				КонецЕсли;
				
				СуммаСкидкиКРаспределению = Округление;
				
				Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
					
					Если СтрокаТЧ.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат
						ИЛИ (СтрокаТЧ.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
								И ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента))
						ИЛИ ЗначениеЗаполнено(СтрокаТЧ.КлючСвязиУслугаАгента)
						ИЛИ СтрокаТЧ.Сумма = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Если МаксимальнаяСуммаСкидки <> 0 Тогда
						СуммаОкругления = (СтрокаТЧ.Сумма) * (СуммаСкидкиКРаспределению / МаксимальнаяСуммаСкидки);
						СтрокаТЧ.СуммаАвтоматическойСкидки = СтрокаТЧ.СуммаАвтоматическойСкидки + СуммаОкругления;
						СтрокаТЧ.Сумма = СтрокаТЧ.Сумма - СуммаОкругления;
						Если СтрокаТЧ.Цена = 0 Тогда
							СтрокаТЧ.ПроцентАвтоматическойСкидки = 0;
						Иначе
							СтрокаТЧ.ПроцентАвтоматическойСкидки = 100 * СтрокаТЧ.СуммаАвтоматическойСкидки / (СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Цена);
						КонецЕсли;
						СтрокаТЧ.СуммаНДС = РассчитатьСуммуНДС(СтрокаТЧ, Объект.ЦенаВключаетНДС);
						
						СтрокаСкидокНаценок = Объект[ИмяТЧСкидки].Добавить();
						СтрокаСкидокНаценок.КлючСвязи = СтрокаТЧ.КлючСвязи;
						СтрокаСкидокНаценок.Сумма     = СуммаОкругления;
						
						Если СтрокаТЧ.Сумма > СуммаСтрокиСМаксимальнойСуммой Тогда
							
							ИндексСтрокиСМаксимальнойСуммой = Объект[ИмяТЧ].Индекс(СтрокаТЧ);
							СуммаСтрокиСМаксимальнойСуммой = СтрокаТЧ.Сумма;
							ИндексСтрокиСкидки = Объект[ИмяТЧСкидки].Индекс(СтрокаСкидокНаценок);
							
						КонецЕсли;
					Иначе
						Прервать;
					КонецЕсли;
					
					СуммаСкидкиКРаспределению = СуммаСкидкиКРаспределению - СуммаОкругления;
					МаксимальнаяСуммаСкидки = МаксимальнаяСуммаСкидки - (СтрокаТЧ.Сумма + СуммаОкругления);
					
				КонецЦикла;
				
				СуммаПогрешности = ОкругленнаяСумма - Объект[ИмяТЧ].Итог("Сумма");
				
				Если СуммаПогрешности <> 0 
				   И ИндексСтрокиСМаксимальнойСуммой >= 0 
				   И ИндексСтрокиСкидки >= 0 Тогда
					
					СтрокаТЧ = Объект[ИмяТЧ].Получить(ИндексСтрокиСМаксимальнойСуммой);
					СтрокаТЧ.СуммаАвтоматическойСкидки = СтрокаТЧ.СуммаАвтоматическойСкидки - СуммаПогрешности;
					СтрокаТЧ.Сумма = СтрокаТЧ.Сумма + СуммаПогрешности;
					Если СтрокаТЧ.Цена = 0 Тогда
						СтрокаТЧ.ПроцентАвтоматическойСкидки = 0;
					Иначе
						СтрокаТЧ.ПроцентАвтоматическойСкидки = 100 * СтрокаТЧ.СуммаАвтоматическойСкидки / (СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Цена);
					КонецЕсли;
					СтрокаТЧ.СуммаНДС = РассчитатьСуммуНДС(СтрокаТЧ, Объект.ЦенаВключаетНДС);
					
					СтрокаСкидокНаценок = Объект[ИмяТЧСкидки].Получить(ИндексСтрокиСкидки);
					СтрокаСкидокНаценок.Сумма = СтрокаСкидокНаценок.Сумма - СуммаПогрешности;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
			
		Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаДокумента(Объект[ИмяТЧ], Объект.ЦенаВключаетНДС);
			
	КонецЕсли;
	
КонецПроцедуры

// Отменяет рассчитанные по объекту скидки.
// Вызывается из форм документов.
//
// Параметры:
//  Объект - ДокументОбъект - документ в котором необходимо отменить скидки.
//  ИмяТЧ - Строка - имя табличной части скидок.
//  ИмяРеквизитаСкидкиБонуса - Строка - имя реквизита скидки для отмены.
//
Процедура ОтменитьСкидки(Объект, ИмяТЧ, ИмяРеквизитаСкидкиБонуса = Неопределено) Экспорт
	
	Объект.СкидкиНаценки.Очистить();
	
	ОчиститьСкидкиВТЧ(Объект, ИмяТЧ, ИмяРеквизитаСкидкиБонуса);
	
	Объект.СкидкиРассчитаны = Ложь;
	
КонецПроцедуры // РассчитатьПоОбъекту()

// Очищает автоматические скидки в указанной табличной части.
// Также, если указано, очищает сумму оплаты бонусами.
//
// Параметры:
//  Объект - ДокументОбъект - документ в котором необходимо отменить скидки.
//  ИмяТЧ - Строка - имя табличной части скидок.
//  ИмяРеквизитаСкидкиБонуса - Строка - имя реквизита скидки для отмены.
//
Процедура ОчиститьСкидкиВТЧ(Объект, ИмяТЧ, ИмяРеквизитаСкидкиБонуса = Неопределено) Экспорт
	
	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		
		СтрокаТЧ.СуммаАвтоматическойСкидки   = 0;
		СтрокаТЧ.ПроцентАвтоматическойСкидки = 0;
		
		// Применение автоматической скидки.
		СуммаБезСкидки = СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Цена;
		
		СтрокаТЧ.Сумма = СуммаБезСкидки - СтрокаТЧ.СуммаРучнойСкидки;
		Если ИмяРеквизитаСкидкиБонуса <> Неопределено Тогда
			СтрокаТЧ.Сумма = СтрокаТЧ.Сумма - СтрокаТЧ[ИмяРеквизитаСкидкиБонуса];
		КонецЕсли;
		СтрокаТЧ.СуммаНДС = РассчитатьСуммуНДС(СтрокаТЧ, Объект.ЦенаВключаетНДС);
		
	КонецЦикла;
	
	Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаДокумента(Объект[ИмяТЧ], Объект.ЦенаВключаетНДС);
	
КонецПроцедуры // РассчитатьПоОбъекту()

// Возвращает структуру данных о накоплениях
// по массиву дисконтных карт и сегменту.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры запроса поиска данных о накоплениях.
//
// Возвращаемое значение:
//  Структура - данный накоплений по карте.
//
Функция ДанныеНакопленийПоКарте(ПараметрыЗапроса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеНакоплений = Новый Структура;
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивКарт", ПараметрыЗапроса.МассивКарт);
	
	Запрос.УстановитьПараметр("ИсключаемыйДокумент", ПараметрыЗапроса.ИсключаемыйДокумент);
	
	Запрос.УстановитьПараметр("ДатаНачала", ПараметрыЗапроса.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПараметрыЗапроса.ДатаОкончания);
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.СегментНоменклатуры) Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	НоменклатураСегмента.Номенклатура КАК Номенклатура,
		|	НоменклатураСегмента.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ НоменклатураСегмента
		|ИЗ
		|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|ГДЕ
		|	НоменклатураСегмента.Сегмент = &Сегмент
		|
		|СГРУППИРОВАТЬ ПО
		|	НоменклатураСегмента.Номенклатура,
		|	НоменклатураСегмента.Характеристика
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ПродажиПоДисконтнымКартам.Количество), 0) КАК КоличествоНакопления,
		|	ЕСТЬNULL(СУММА(ПродажиПоДисконтнымКартам.Сумма), 0) КАК СуммаНакопления
		|ИЗ
		|	РегистрНакопления.ПродажиПоДисконтнымКартам КАК ПродажиПоДисконтнымКартам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НоменклатураСегмента КАК НоменклатураСегмента
		|		ПО (НоменклатураСегмента.Номенклатура = ПродажиПоДисконтнымКартам.Номенклатура)
		|			И (НоменклатураСегмента.Характеристика = ПродажиПоДисконтнымКартам.Характеристика)
		|ГДЕ
		|	ПродажиПоДисконтнымКартам.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ПродажиПоДисконтнымКартам.ДисконтнаяКарта В(&МассивКарт)
		|	И ПродажиПоДисконтнымКартам.Регистратор <> &ИсключаемыйДокумент
		|";
		Запрос.УстановитьПараметр("Сегмент", ПараметрыЗапроса.СегментНоменклатуры);
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ПродажиПоДисконтнымКартам.Количество), 0) КАК КоличествоНакопления,
		|	ЕСТЬNULL(СУММА(ПродажиПоДисконтнымКартам.Сумма), 0) КАК СуммаНакопления
		|ИЗ
		|	РегистрНакопления.ПродажиПоДисконтнымКартам КАК ПродажиПоДисконтнымКартам
		|ГДЕ
		|	ПродажиПоДисконтнымКартам.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ПродажиПоДисконтнымКартам.ДисконтнаяКарта В(&МассивКарт)
		|	И ПродажиПоДисконтнымКартам.Регистратор <> &ИсключаемыйДокумент
		|";
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	СуммаНакопления = 0;
	КоличествоНакопления = 0;
	Если Выборка.Следующий() Тогда
		СуммаНакопления = Выборка.СуммаНакопления;
		КоличествоНакопления = Выборка.КоличествоНакопления;
	КонецЕсли;
	ДанныеНакоплений.Вставить("СуммаНакопления", СуммаНакопления);
	ДанныеНакоплений.Вставить("КоличествоНакопления", КоличествоНакопления);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДанныеНакоплений;
	
КонецФункции

// Возвращает индекс картинки 
// в зависимости от значения полей "СпособПредоставления" и "ПометкаУдаления"
// анализируемой скидки.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - строка дерева значений для получения индекса.
//  
// Возвращаемое значение:
//  Число - индекс картинки.
//
Функция ИндексКартинкиДляСкидки(СтрокаДерева) Экспорт
	
	Индекс = 0;
	Если СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Процент Тогда
		Если СтрокаДерева.ЗначениеСкидкиНаценки < 0 Тогда
			Индекс = 32;
		Иначе
			Индекс = 28;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма Тогда
		Если СтрокаДерева.ЗначениеСкидкиНаценки < 0 Тогда
			Индекс = 40;
		Иначе
			Индекс = 44;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ВидЦены Тогда
		Индекс = 48;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Подарок Тогда
		Индекс = 36;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сообщение Тогда
		Индекс = 52;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыВВидеБонусныхБаллов Тогда
		Индекс = 60;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.КоличествоБонусныхБаллов Тогда
		Индекс = 64;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыПредыдущейПокупки Тогда
		Если СтрокаДерева.ЗначениеСкидкиНаценки < 0 Тогда
			Индекс = 32;
		Иначе
			Индекс = 28;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ВнешняяОбработка Тогда
		Индекс = 68;
	КонецЕсли;
	
	Если СтрокаДерева.ПометкаУдаления Тогда
		Индекс = Индекс + 3;
	КонецЕсли;
	
	Возврат Индекс;
	
КонецФункции

// Возвращает индекс картинки 
// в зависимости от значения поля "ВариантСовместногоПрименения" 
// анализируемой группы.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - строка дерева значений для получения индекса.
//  
// Возвращаемое значение:
//  Число - индекс картинки.
//
Функция ИндексКартинкиДляГруппы(СтрокаДерева) Экспорт
	
	Индекс = 0;
	Если СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Максимум Тогда
		Индекс = 8
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Минимум Тогда
		Индекс = 16
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Сложение Тогда
		Индекс = 0
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.ПоследовательноеПрименение Тогда
		Индекс = 4
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение Тогда
		Индекс = 12
	КонецЕсли;
	
	Если СтрокаДерева.ПометкаУдаления Тогда
		Индекс = Индекс + 3;
	КонецЕсли;
	
	Возврат Индекс;
	
КонецФункции

// Возвращает параметры регистрации внешней обработки для скидки (наценки).
//
// Параметры:
//  Наименование - Строка - строка дерева значений для получения индекса.
//  Информация - Строка - строка дерева значений для получения индекса.
//  
// Возвращаемое значение:
//  Структура - структура параметров регистрации.
//
Функция ПараметрыРегистрацииВнешнейОбработкиСкидкиНаценки(Наименование, Информация) Экспорт
	
	Возврат ОбщегоНазначенияРТ.ПараметрыРегистрацииВнешнейОбработки(Наименование, Информация);
	
КонецФункции

// Возвращает параметры регистрации внешней обработки для условия предоставления скидки (наценки).
//
// Параметры:
//  Наименование - Строка - строка дерева значений для получения индекса.
//  Информация - Строка - строка дерева значений для получения индекса.
//  
// Возвращаемое значение:
//  Структура - структура параметров регистрации.
//
Функция ПараметрыРегистрацииВнешнейОбработкиУсловияПредоставленияСкидокНаценок(Наименование, Информация) Экспорт
	
	Возврат ОбщегоНазначенияРТ.ПараметрыРегистрацииВнешнейОбработки(Наименование, Информация);
	
КонецФункции

// Заполняет значения в структуре параметров
// для открытия формы ручных скидок.
//
// Параметры:
//  Наименование - ДокументОбъект - документ в котором необходимо заполнить значения ручных скидок.
//  
// Возвращаемое значение:
//  Структура - параметры для назначения ручных скидок.
//
Функция ПараметрыДляНазначенияРучнойСкидки(Объект) Экспорт
	
	СуммаАвтоматическойСкидки = Объект.Товары.Итог("СуммаАвтоматическойСкидки");
	СуммаРучнойСкидки = Объект.Товары.Итог("СуммаРучнойСкидки");
	СуммаБезСкидок = ОбработкаТабличнойЧастиТоварыСервер.СуммаДокументаБезПодарочныхСертификатов(Объект);
	СуммаБезСкидок = СуммаБезСкидок + СуммаАвтоматическойСкидки + СуммаРучнойСкидки;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СуммаБезСкидок", СуммаБезСкидок);
	ПараметрыФормы.Вставить("СуммаАвтоматическойСкидкиНаценки", СуммаАвтоматическойСкидки);
	ПараметрыФормы.Вставить("СуммаРучнойСкидкиНаценки", СуммаРучнойСкидки);
	ПараметрыФормы.Вставить("МинимальнаяСуммаДокумента", 0);
	ПараметрыФормы.Вставить("Валюта", НСтр("ru = 'KZT'"));

	Возврат ПараметрыФормы;
	
КонецФункции

// Распределяет сумму ручной скидки по строкам табличной части документа.
//
// Параметры:
//  Объект - ДокументОбъект - документ, табличная часть которого обрабатывается.
//  ИмяТЧ - Строка - имя табличной части с товарами.
//  СуммаСкидкиКРаспределению - Число - сумма ручной скидки, которую нужно распределить.
//  ИспользуютсяАвтоматическиеСкидки - Булево - признак того, что в документе используются автоматические скидки.
//  ЕстьБонусы - Булево - признак наличия бонусов в документе.
//
Процедура НазначитьРучнуюСкидку(Объект, ИмяТЧ, Знач СуммаСкидкиКРаспределению, ИспользуютсяАвтоматическиеСкидки, ЕстьБонусы = Ложь) Экспорт
	
	МаксимальнаяСуммаСкидки = 0;
	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		
		Если СтрокаТЧ.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат
			ИЛИ (СтрокаТЧ.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
					И ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента))
			ИЛИ ЗначениеЗаполнено(СтрокаТЧ.КлючСвязиУслугаАгента) Тогда
			Продолжить;
		КонецЕсли;
		СуммаАвтоматическойСкидки = ?(ИспользуютсяАвтоматическиеСкидки, СтрокаТЧ.СуммаАвтоматическойСкидки, 0);
		Если ЕстьБонусы Тогда
			СуммаАвтоматическойСкидки = СуммаАвтоматическойСкидки + СтрокаТЧ.СуммаСкидкиОплатыБонусом;
		КонецЕсли;
		МаксимальнаяСуммаСкидки = МаксимальнаяСуммаСкидки + СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Цена - СуммаАвтоматическойСкидки;
		
	КонецЦикла;
	
	Если СуммаСкидкиКРаспределению > МаксимальнаяСуммаСкидки Тогда
		СуммаСкидкиКРаспределению = МаксимальнаяСуммаСкидки;
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		
		Если СтрокаТЧ.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат
			ИЛИ (СтрокаТЧ.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
					И ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента))
			ИЛИ ЗначениеЗаполнено(СтрокаТЧ.КлючСвязиУслугаАгента)Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаБезСкидки = СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Цена;
		СуммаАвтоматическойСкидки = ?(ИспользуютсяАвтоматическиеСкидки, СтрокаТЧ.СуммаАвтоматическойСкидки, 0);
		Если ЕстьБонусы Тогда
			СуммаАвтоматическойСкидки = СуммаАвтоматическойСкидки + СтрокаТЧ.СуммаСкидкиОплатыБонусом;
		КонецЕсли;
		
		Если МаксимальнаяСуммаСкидки <> 0 Тогда
			СтрокаТЧ.СуммаРучнойСкидки = (СуммаБезСкидки - СуммаАвтоматическойСкидки) * (СуммаСкидкиКРаспределению / МаксимальнаяСуммаСкидки);
		Иначе
			СтрокаТЧ.СуммаРучнойСкидки = 0;
		КонецЕсли;
		СуммаСкидкиКРаспределению = СуммаСкидкиКРаспределению - СтрокаТЧ.СуммаРучнойСкидки;
		МаксимальнаяСуммаСкидки = МаксимальнаяСуммаСкидки - (СуммаБезСкидки - СуммаАвтоматическойСкидки);
		
		Если СуммаБезСкидки <> 0 Тогда
			СтрокаТЧ.ПроцентРучнойСкидки = 100 * СтрокаТЧ.СуммаРучнойСкидки / СуммаБезСкидки;
		Иначе
			СтрокаТЧ.ПроцентРучнойСкидки = 0;
		КонецЕсли;
		
		СуммаСкидки = СуммаАвтоматическойСкидки + СтрокаТЧ.СуммаРучнойСкидки;
		
		Если ИспользуютсяАвтоматическиеСкидки Тогда
			Если СуммаБезСкидки <> 0 Тогда
				СтрокаТЧ.ПроцентАвтоматическойСкидки = ?(СуммаБезСкидки = 0, 0 , 100 * СуммаАвтоматическойСкидки / СуммаБезСкидки);
			Иначе
				СтрокаТЧ.ПроцентАвтоматическойСкидки = 0;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТЧ.Сумма    = СуммаБезСкидки - ?(СуммаСкидки > СуммаБезСкидки, СуммаБезСкидки, СуммаСкидки);
		СтрокаТЧ.СуммаНДС = РассчитатьСуммуНДС(СтрокаТЧ, Объект.ЦенаВключаетНДС);
		
	КонецЦикла;
	
	Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаДокумента(Объект[ИмяТЧ], Объект.ЦенаВключаетНДС);
	
КонецПроцедуры

// Очищает сумму ручной скидки в строках табличной части документа.
//
// Параметры:
//  Объект - ДокументОбъект - документ, табличная часть которого обрабатывается.
//  ИмяТЧ - Строка - имя табличной части с товарами.
//  ИспользуютсяАвтоматическиеСкидки - Булево - признак того, что в документе используются автоматические скидки.
//  ЕстьБонусы - Булево - признак наличия бонусов в документе.
//
Процедура ОтменитьРучныеСкидки(Объект, ИмяТЧ, ИспользуютсяАвтоматическиеСкидки, ЕстьБонусы = Ложь) Экспорт
	
	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		
		СтрокаТЧ.СуммаРучнойСкидки   = 0;
		СтрокаТЧ.ПроцентРучнойСкидки = 0;
		
		СуммаБезСкидки = СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Цена;
		
		СуммаАвтоматическойСкидки = ?(ИспользуютсяАвтоматическиеСкидки, СтрокаТЧ.СуммаАвтоматическойСкидки, 0);
		Если ЕстьБонусы Тогда
			СуммаАвтоматическойСкидки = СуммаАвтоматическойСкидки + СтрокаТЧ.СуммаСкидкиОплатыБонусом;
		КонецЕсли;
		
		СтрокаТЧ.Сумма    = СуммаБезСкидки - ?(СуммаАвтоматическойСкидки > СуммаБезСкидки, СуммаБезСкидки, СуммаАвтоматическойСкидки);
		СтрокаТЧ.СуммаНДС = РассчитатьСуммуНДС(СтрокаТЧ, Объект.ЦенаВключаетНДС);
		
	КонецЦикла;
	
	Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаДокумента(Объект[ИмяТЧ], Объект.ЦенаВключаетНДС);
	
КонецПроцедуры

// Возвращает пустую таблицу скидок.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица пустых скидок.
//
Функция ПустаяТаблицаСкидок() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("КлючСвязи", ОбщегоНазначенияРТКлиентСервер.ОписаниеТиповЧисла(5, 0));
	Таблица.Колонки.Добавить("СкидкаНаценка", Новый ОписаниеТипов("СправочникСсылка.СкидкиНаценки"));
	Таблица.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Неделимая", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("СпособПредоставления",	Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПредоставленияСкидокНаценок"));
	Таблица.Колонки.Добавить("РеквизитДопУпорядочивания",	Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("Сегмент", Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры"));
	Таблица.Колонки.Добавить("Действует", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Сумма", ОбщегоНазначенияРТКлиентСервер.ОписаниеТиповЧисла(15, 2));
	Таблица.Колонки.Добавить("СуммаПодарков", ОбщегоНазначенияРТКлиентСервер.ОписаниеТиповЧисла(15, 2));
	Таблица.Колонки.Добавить("СуммаБонусов", ОбщегоНазначенияРТКлиентСервер.ОписаниеТиповЧисла(15, 2));
	Таблица.Колонки.Добавить("СуммаВсехСкидок", ОбщегоНазначенияРТКлиентСервер.ОписаниеТиповЧисла(15, 2));
	Таблица.Колонки.Добавить("КоличествоБонусов", ОбщегоНазначенияРТКлиентСервер.ОписаниеТиповЧисла(15, 2));
	Таблица.Колонки.Добавить("ТаблицаПодарков", Новый ОписаниеТипов("ТаблицаЗначений"));
	Таблица.Колонки.Добавить("ТаблицаБонусов", Новый ОписаниеТипов("ТаблицаЗначений"));
	Таблица.Колонки.Добавить("ТекстСообщения", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ТаблицаПодчиненныхСкидок", Новый ОписаниеТипов("ТаблицаЗначений"));
	Таблица.Колонки.Добавить("ОграниченаМинимальнойЦеной", Новый ОписаниеТипов("Булево"));
	
	Возврат Таблица;
	
КонецФункции

// Возвращает пустую таблицу подарков.
//
// Возвращаемое значение:
//  ТаблицаЗначений - пустая таблица товаров.
//
Функция ПустаяТаблицаПодарков() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("КлючСвязи"         , ОбщегоНазначенияРТКлиентСервер.ОписаниеТиповЧисла(5, 0));
	Таблица.Колонки.Добавить("СкидкаНаценка"     , Новый ОписаниеТипов("СправочникСсылка.СкидкиНаценки"));
	Таблица.Колонки.Добавить("Номенклатура"      , Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("Характеристика"    , Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Таблица.Колонки.Добавить("Количество"        , ОбщегоНазначенияРТКлиентСервер.ОписаниеТиповЧисла(15, 3));
	Таблица.Колонки.Добавить("Цена"              , ОбщегоНазначенияРТКлиентСервер.ОписаниеТиповЧисла(15, 2));
	Таблица.Колонки.Добавить("Сумма"             , ОбщегоНазначенияРТКлиентСервер.ОписаниеТиповЧисла(15, 2));
	Таблица.Колонки.Добавить("Склад"             , Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Таблица.Колонки.Добавить("Упаковка"          , Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	Таблица.Колонки.Добавить("КоличествоУпаковок", ОбщегоНазначенияРТКлиентСервер.ОписаниеТиповЧисла(15, 3));
	Таблица.Колонки.Добавить("КоличествоУпаковокНеобходимо", ОбщегоНазначенияРТКлиентСервер.ОписаниеТиповЧисла(15, 3));
	Таблица.Колонки.Добавить("ПодарокИзСписка"	 , Новый ОписаниеТипов("Булево"));
	
	Возврат Таблица;
	
КонецФункции

// Возвращает пустую таблицу сообщений.
//
// Возвращаемое значение:
//  ТаблицаЗначений - пустая таблица сообщений.
// 
Функция ПустаяТаблицаСообщений() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("КлючСвязи"     , ОбщегоНазначенияРТКлиентСервер.ОписаниеТиповЧисла(5, 0));
	Таблица.Колонки.Добавить("СкидкаНаценка" , Новый ОписаниеТипов("СправочникСсылка.СкидкиНаценки"));
	Таблица.Колонки.Добавить("ТекстСообщения", Новый ОписаниеТипов("Строка"));
	
	Возврат Таблица;
	
КонецФункции

// Возвращает пустую таблицу бонусов.
//
// Возвращаемое значение:
//  ТаблицаЗначений - пустая таблица бонусов.
// 
Функция ПустаяТаблицаБонусов() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("КлючСвязи"     , ОбщегоНазначенияРТКлиентСервер.ОписаниеТиповЧисла(5, 0));
	Таблица.Колонки.Добавить("СкидкаНаценка" , Новый ОписаниеТипов("СправочникСсылка.СкидкиНаценки"));
	Таблица.Колонки.Добавить("БонуснаяПрограммаЛояльности" , Новый ОписаниеТипов("СправочникСсылка.БонусныеПрограммыЛояльности"));
	Таблица.Колонки.Добавить("ДатаНачисления" , ОбщегоНазначенияРТКлиентСервер.ОписаниеТиповДаты());
	Таблица.Колонки.Добавить("ДатаСписания" , ОбщегоНазначенияРТКлиентСервер.ОписаниеТиповДаты());
	Таблица.Колонки.Добавить("КоличествоБонусныхБаллов", ОбщегоНазначенияРТКлиентСервер.ОписаниеТиповЧисла(15, 2));
	
	Возврат Таблица;
	
КонецФункции

// Заполняет список значений получателей скидок.
//
// Параметры:
//  ЗаполняемыйСписок - СписокЗначений - список значений получателей скидок.
//
Процедура ЗаполнитьСписокЗначенийПолучателейСкидок(ЗаполняемыйСписок) Экспорт

	ЗаполняемыйСписок.Очистить();
	
	ЗаполняемыйСписок.Добавить("ВидыДисконтныхКарт"     , НСтр("ru = 'Вид дисконтной карты'"));
	ЗаполняемыйСписок.Добавить("ИнформационныеКарты"    , НСтр("ru = 'Дисконтная карта'"));
	ЗаполняемыйСписок.Добавить("ФизическиеЛица"         , НСтр("ru = 'Физическое лицо'"));
	ЗаполняемыйСписок.Добавить("Контрагенты"            , НСтр("ru = 'Контрагент'"));
	ЗаполняемыйСписок.Добавить("ГруппыПолучателейСкидки", НСтр("ru = 'Группа получателей скидки'"));

КонецПроцедуры

// Заполняет список значений способов предоставления скидок.
//
// Параметры:
//  ЗаполняемыйСписок - СписокЗначений - список значений способов предоставления скидок.
//
Процедура ЗаполнитьСписокЗначенийСпособовПредоставленияСкидки(ЗаполняемыйСписок) Экспорт
	
	ЗаполняемыйСписок.Очистить();
	
	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.Процент);
	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыПредыдущейПокупки);
	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.Сумма);
	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.ВидЦены, НСтр("ru = 'Использовать вид цены'"));
	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.Подарок, НСтр("ru = 'Выдать подарок'"));
	ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.Сообщение, НСтр("ru = 'Вывести сообщение'"));
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗапретРозничнойПродажиАлкоголя") Тогда
		ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.ЗапретРозничнойПродажи, НСтр("ru = 'Запретить розничную продажу'"));
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммыЛояльности") Тогда
		ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.КоличествоБонусныхБаллов, НСтр("ru = 'Начислить бонусные баллы в количестве'"));
		ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыВВидеБонусныхБаллов, НСтр("ru = 'Начислить бонусные баллы процентом от суммы'"));
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
		ЗаполняемыйСписок.Добавить(Перечисления.СпособыПредоставленияСкидокНаценок.ВнешняяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// Формирует список значений возможных условий скидок.
//
// Параметры:
//  ЗаполняемыйСписок - СписокЗначений - список значений условий предоставления скидок.
//
Процедура ЗаполнитьСписокЗначенийУсловийПредоставленияСкидки(ЗаполняемыйСписок) Экспорт

	ЗаполняемыйСписок.Очистить();
	
	ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж);
	ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж);
	ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ЗаВремяПродажи);
	ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ЗаКомплектПокупки);
	ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ВДеньРождения);
	ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ПорядковыйНомерПродажиКратен);
	ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ПоТипуПолучателя);
	ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ОдноразовыйКод);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
		ЗаполняемыйСписок.Добавить(Перечисления.УсловияПредоставленияСкидокНаценок.ВнешняяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// Формирует список значений возможных вариантов накопления скидок.
//
// Параметры:
//  ЗаполняемыйСписок - СписокЗначений - список значений вариантов накопления скидки.
//
Процедура ЗаполнитьСписокЗначенийВариантовНакопленияКумулятивнойСкидкиНаценки(ЗаполняемыйСписок) Экспорт

	ЗаполняемыйСписок.Очистить();
	ЗаполняемыйСписок.Добавить(Перечисления.ВариантыНакопленияКумулятивнойСкидкиНаценки.ПоДисконтнойКарте);
	
КонецПроцедуры

// Подготавливает структуру, заполненную пустыми значениями,
// которая используется для проверки запрета розничной продажи.
//
// Параметры:
//  Объект - ДокументОбъект - документ в котором проверяется запрет розничной продажи.
//
// Возвращаемое значение
//  Структура - структура проверки запрета розничной продажи.
//
Функция ПараметрыПроверкиЗапретаРозничнойПродажи(Объект) Экспорт 
	
	СтруктураПроверки = Новый Структура;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	СтруктураПроверки.Вставить("Магазин", Объект.Магазин);
	СтруктураПроверки.Вставить("Дата", ТекущаяДата);
	СтруктураПроверки.Вставить("ТекстСообщения", НСтр("ru = 'Номенклатура %1 запрещена к продаже.'"));
	
	Возврат СтруктураПроверки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаСкидки(Параметры)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтрокиЧека,
	|	Товары.ПродажаПодарка,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.ДоговорКонтрагента,
	|	ЕстьNull(Товары.КлючСвязиУслугаАгента, 0) КАК КлючСвязиУслугаАгента,
	|	Товары.Количество,
	|	Товары.Цена,
	|	Товары.Сумма + Товары.СуммаРучнойСкидки КАК Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.ПроцентАвтоматическойСкидки,
	|	Товары.ПроцентРучнойСкидки,
	|	Товары.ПродажаПодарка,
	|	Товары.Упаковка,
	|	Товары.КоличествоУпаковок,
	|	Товары.КлючСвязи,
	|	&СтрокаСуммыБонуса КАК СуммаОплатыБонусом,
	|	Товары.СуммаАвтоматическойСкидки,
	|	Товары.СуммаРучнойСкидки
	|ПОМЕСТИТЬ ТоварыДокументаВременная
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтрокиЧека,
	|	Товары.Номенклатура,
	|	Товары.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Товары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	Товары.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Товары.КлючСвязиУслугаАгента КАК КлючСвязиУслугаАгента,
	|	Товары.Характеристика,
	|	Товары.Количество,
	|	Товары.Цена,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.ПроцентАвтоматическойСкидки,
	|	Товары.ПроцентРучнойСкидки,
	|	Товары.ПродажаПодарка,
	|	Товары.Упаковка,
	|	Товары.КоличествоУпаковок,
	|	Товары.КлючСвязи,
	|	Товары.СуммаОплатыБонусом,
	|	Товары.СуммаАвтоматическойСкидки,
	|	Товары.СуммаРучнойСкидки,
	|	ВЫБОР
	|		КОГДА Сегменты.Номенклатура ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ИсключенаИзРасчета
	|ПОМЕСТИТЬ ТоварыДокумента
	|ИЗ
	|	ТоварыДокументаВременная КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК Сегменты
	|		ПО	Товары.Номенклатура = Сегменты.Номенклатура
	|		И Товары.Характеристика = Сегменты.Характеристика
	|		И Сегменты.Сегмент = &СегментИсключаемойНоменклатуры
	|	&УсловиеПродажаПодарка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка КАК СкидкаНаценка,
	|	СкидкиНаценки.СегментНоменклатурыПредоставления КАК СегментНоменклатурыПредоставления
	|ПОМЕСТИТЬ ТаблицаСкидок
	|ИЗ
	|	Справочник.СкидкиНаценки КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.Ссылка В (ВЫБРАТЬ ДействиеСкидок.СкидкаНаценка ИЗ РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
	|			&ТекущаяДата,
	|			(КОНЕЦПЕРИОДА(ДатаОкончания, ДЕНЬ) >= &ТекущаяДата
	|				ИЛИ ДатаОкончания = &ПустаяДата)
	|				И (Магазин = &Магазин
	|					ИЛИ Магазин = &ПустойМагазин)) КАК ДействиеСкидок)
	|	И СкидкиНаценки.СтатусДействия = &Действует
	|	И СкидкиНаценки.СпособПредоставления <> &ЗапретРозничнойПродажи
	|	И (&РасчетПодарков
	|			ИЛИ СкидкиНаценки.СпособПредоставления <> &Подарок)
	|	И (&РасчетСообщений
	|			ИЛИ СкидкиНаценки.СпособПредоставления <> &Сообщение)
	|	И ВЫБОР
	|			КОГДА СкидкиНаценки.СпособПредоставления = &Сообщение
	|					И СкидкиНаценки.МоментВыдачиСообщения = &ПослеОформленияЧека
	|				ТОГДА &ТолькоСообщенияПослеОформления = ИСТИНА
	|			ИНАЧЕ &ТолькоСообщенияПослеОформления = ЛОЖЬ
	|		КОНЕЦ
	|	&УправляемыеСкидки
	|СГРУППИРОВАТЬ ПО
	|	СкидкиНаценки.Ссылка,
	|	СкидкиНаценки.СегментНоменклатурыПредоставления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СкидкаНаценка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСкидок.СкидкаНаценка КАК СкидкаНаценка,
	|	Условия.НомерСтроки КАК НомерСтрокиУсловия,
	|	Условия.УсловиеПредоставления КАК УсловиеПредоставления
	|ПОМЕСТИТЬ УсловияПредоставления
	|ИЗ	
	|	ТаблицаСкидок КАК ТаблицаСкидок
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.УсловияПредоставления КАК Условия
	|	ПО ТаблицаСкидок.СкидкаНаценка = Условия.Ссылка
	|				
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСкидок.СкидкаНаценка,
	|	Условия.НомерСтроки,
	|	Условия.УсловиеПредоставления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СкидкаНаценка,
	|	УсловиеПредоставления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Подзапрос.Сегмент КАК Сегмент
	|ПОМЕСТИТЬ ИспользуемыеСегменты
	|ИЗ
	|	(ВЫБРАТЬ
	|		Скидки.СегментНоменклатурыПредоставления КАК Сегмент
	|	ИЗ
	|		ТаблицаСкидок КАК Скидки
	|		
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Условия.УсловиеПредоставления.СегментНоменклатурыОграничения
	|	ИЗ
	|		УсловияПредоставления КАК Условия) КАК Подзапрос
	|ГДЕ
	|	НЕ Подзапрос.Сегмент = &ПустойСегмент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сегменты.Сегмент КАК Сегмент,
	|	ТоварыДокумента.Номенклатура КАК Номенклатура,
	|	ТоварыДокумента.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТоварыСегментов
	|ИЗ
	|	ТоварыДокумента КАК ТоварыДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК Сегменты
	|	ПО Сегменты.Номенклатура = ТоварыДокумента.Номенклатура
	|	И Сегменты.Характеристика = ТоварыДокумента.Характеристика
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИспользуемыеСегменты КАК ИспользуемыеСегменты
	|	ПО Сегменты.Сегмент = ИспользуемыеСегменты.Сегмент
	|
	|СГРУППИРОВАТЬ ПО
	|	Сегменты.Сегмент,
	|	ТоварыДокумента.Номенклатура,
	|	ТоварыДокумента.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&НаборПодарков КАК ИмяРаздела,
	|	НаборПодарков.Ссылка КАК СкидкаНаценка,
	|	НаборПодарков.НомерСтроки КАК НомерСтрокиПодарка,
	|	НаборПодарков.Номенклатура КАК Номенклатура,
	|	НаборПодарков.Характеристика КАК Характеристика,
	|	НаборПодарков.Упаковка КАК Упаковка,
	|	НаборПодарков.КоличествоУпаковок КАК КоличествоУпаковок,
	|	НаборПодарков.Количество КАК Количество,
	|	NULL КАК НомерСтрокиЦеновойГруппы,
	|	NULL КАК ЦеноваяГруппа,
	|	NULL КАК ЗначениеСкидкиНаценки
	|ПОМЕСТИТЬ ПараметрыСкидок
	|ИЗ	
	|	Справочник.СкидкиНаценки.НаборПодарков КАК НаборПодарков
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСкидок КАК ТаблицаСкидок
	|	ПО ТаблицаСкидок.СкидкаНаценка = НаборПодарков.Ссылка
	|ГДЕ
	|	НаборПодарков.Ссылка.СпособПредоставления = &Подарок
	|	и ВЫБОР
	|		КОГДА НЕ НаборПодарков.Ссылка.УчитыватьПодарокКакПродажу
	|			ТОГДА НаборПодарков.Номенклатура.ОсобенностьУчета <> Значение(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ЦеновыеГруппы,
	|	ЦеновыеГруппы.Ссылка,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЦеновыеГруппы.НомерСтроки,
	|	ЦеновыеГруппы.ЦеноваяГруппа,
	|	ЦеновыеГруппы.ЗначениеСкидкиНаценки
	|ИЗ	
	|	Справочник.СкидкиНаценки.ЦеновыеГруппы КАК ЦеновыеГруппы
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСкидок КАК ТаблицаСкидок
	|	ПО ТаблицаСкидок.СкидкаНаценка = ЦеновыеГруппы.Ссылка
	|ГДЕ
	|	&ИспользуютсяЦеновыеГруппы = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СкидкаНаценка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ВремяДействия КАК ИмяРаздела,
	|	ВремяДействия.Ссылка КАК Условие,
	|	ВремяДействия.НомерСтроки КАК НомерСтрокиВремени,
	|	ВремяДействия.ДеньНедели КАК ДеньНедели,
	|	ВремяДействия.ВремяНачала КАК ВремяНачала,
	|	ВремяДействия.ВремяОкончания КАК ВремяОкончания,
	|	NULL КАК НомерСтрокиПолучателя,
	|	NULL КАК Получатель,
	|	NULL КАК НомерСтрокиКомплекта,
	|	NULL КАК Номенклатура,
	|	NULL КАК Характеристика,
	|	NULL КАК Упаковка,
	|	NULL КАК КоличествоУпаковок,
	|	NULL КАК Количество
	|ПОМЕСТИТЬ ПараметрыУсловий
	|ИЗ
	|	Справочник.УсловияПредоставленияСкидокНаценок.ВремяДействия КАК ВремяДействия
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ УсловияПредоставления КАК Т
	|	ПО ВремяДействия.Ссылка = Т.УсловиеПредоставления
	|ГДЕ
	|	ВремяДействия.Ссылка.УсловиеПредоставления = &ЗаВремяПродажи
	|	И ВремяДействия.ДеньНедели = &ТекущийДеньНедели
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Получатели,
	|	Получатели.Ссылка,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	Получатели.НомерСтроки,
	|	Получатели.Получатель,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	Справочник.УсловияПредоставленияСкидокНаценок.Получатели КАК Получатели
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ УсловияПредоставления КАК Т
	|	ПО Получатели.Ссылка = Т.УсловиеПредоставления
	|ГДЕ
	|	Получатели.Ссылка.УсловиеПредоставления = &ПоТипуПолучателя
	|	И Получатели.Получатель В(&ПолучателиСкидок)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&КомплектПокупки,
	|	КомплектПокупки.Ссылка,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	КомплектПокупки.НомерСтроки,
	|	КомплектПокупки.Номенклатура,
	|	КомплектПокупки.Характеристика,
	|	КомплектПокупки.Упаковка,
	|	КомплектПокупки.КоличествоУпаковок,
	|	КомплектПокупки.Количество
	|ИЗ
	|	Справочник.УсловияПредоставленияСкидокНаценок.КомплектПокупки КАК КомплектПокупки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ УсловияПредоставления КАК Т
	|	ПО КомплектПокупки.Ссылка = Т.УсловиеПредоставления
	|ГДЕ
	|	КомплектПокупки.Ссылка.УсловиеПредоставления = &ЗаКомплектПокупки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Условие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыДокумента.НомерСтрокиЧека КАК НомерСтрокиЧека,
	|	ТоварыСегментов.Сегмент КАК Сегмент,
	|	ТоварыДокумента.Номенклатура КАК Номенклатура,
	|	ТоварыДокумента.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ТоварыДокумента.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТоварыДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТоварыДокумента.КлючСвязиУслугаАгента КАК КлючСвязиУслугаАгента,
	|	ТоварыДокумента.Характеристика КАК Характеристика,
	|	ТоварыДокумента.Количество КАК Количество,
	|	ТоварыДокумента.Цена КАК Цена,
	|	&ТоварыДокументаСумма КАК Сумма,
	|	&ТоварыДокументаСумма КАК СуммаДляРасчета,
	|	&ТоварыДокументаСумма КАК СуммаВГруппе,
	// СуммаБезСкидки?
	|	&ТоварыДокументаСумма КАК СуммаБезСкидки,
	|	ТоварыДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ТоварыДокумента.СуммаНДС КАК СуммаНДС,
	|	ТоварыДокумента.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ТоварыДокумента.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ТоварыДокумента.Упаковка КАК Упаковка,
	|	ТоварыДокумента.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТоварыДокумента.КлючСвязи КАК КлючСвязи,
	|	ТоварыДокумента.СуммаОплатыБонусом КАК СуммаОплатыБонусом,
	|	ТоварыДокумента.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ТоварыДокумента.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ТоварыДокумента.ИсключенаИзРасчета КАК ИсключенаИзРасчета,
	|	ЛОЖЬ КАК УсловиеПоСтрокеВыполнено,
	|	0 КАК КоличествоВыполненийУсловия
	|ИЗ
	|	ТоварыДокумента КАК ТоварыДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСегментов КАК ТоварыСегментов
	|		ПО ТоварыДокумента.Номенклатура = ТоварыСегментов.Номенклатура
	|		И ТоварыДокумента.Характеристика = ТоварыСегментов.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыДокумента.НомерСтрокиЧека,
	|	&ПустойСегмент,
	|	ТоварыДокумента.Номенклатура,
	|	ТоварыДокумента.ЦеноваяГруппа,
	|	ТоварыДокумента.ТипНоменклатуры,
	|	ТоварыДокумента.ДоговорКонтрагента,
	|	ТоварыДокумента.КлючСвязиУслугаАгента,
	|	ТоварыДокумента.Характеристика,
	|	ТоварыДокумента.Количество,
	|	ТоварыДокумента.Цена,
	|	&ТоварыДокументаСумма,
	|	&ТоварыДокументаСумма,
	|	&ТоварыДокументаСумма,
	|	&ТоварыДокументаСумма,
	|	ТоварыДокумента.СтавкаНДС,
	|	ТоварыДокумента.СуммаНДС,
	|	ТоварыДокумента.ПроцентАвтоматическойСкидки,
	|	ТоварыДокумента.ПроцентРучнойСкидки,
	|	ТоварыДокумента.Упаковка,
	|	ТоварыДокумента.КоличествоУпаковок,
	|	ТоварыДокумента.КлючСвязи,
	|	ТоварыДокумента.СуммаОплатыБонусом,
	|	ТоварыДокумента.СуммаАвтоматическойСкидки,
	|	ТоварыДокумента.СуммаРучнойСкидки,
	|	ТоварыДокумента.ИсключенаИзРасчета,
	|	ЛОЖЬ,
	|	0
	|ИЗ
	|	ТоварыДокумента КАК ТоварыДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Условия.СкидкаНаценка КАК СкидкаНаценка,
	|	Условия.НомерСтрокиУсловия КАК НомерСтрокиУсловия,
	|	Условия.УсловиеПредоставления КАК Условие,
	|	Условия.УсловиеПредоставления.УсловиеПредоставления КАК ТипУсловия,
	|	Условия.УсловиеПредоставления.ВариантОпределенияПериодаНакопительнойСкидки КАК ВариантОпределенияПериодаНакопительнойСкидки,
	|	Условия.УсловиеПредоставления.ВариантНакопления КАК ВариантНакопления,
	|	Условия.УсловиеПредоставления.ТипСравнения КАК ТипСравнения,
	|	Условия.УсловиеПредоставления.УчитыватьПримененныеСкидки КАК УчитыватьПримененныеСкидки,
	|	Условия.УсловиеПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж КАК КритерийОграниченияПримененияЗаОбъемПродаж,
	|	Условия.УсловиеПредоставления.ОбластьОграничения КАК ОбластьОграничения,
	|	Условия.УсловиеПредоставления.ГрафикОплаты КАК ГрафикОплаты,
	|	Условия.УсловиеПредоставления.ФормаОплаты КАК ФормаОплаты,
	|	Условия.УсловиеПредоставления.СегментНоменклатурыОграничения КАК СегментНоменклатурыОграничения,
	|	Условия.УсловиеПредоставления.ПериодНакопления КАК ПериодНакопления,
	|	Условия.УсловиеПредоставления.ГруппаПользователей КАК ГруппаПользователей,
	|	Условия.УсловиеПредоставления.ДнейДоДняРождения КАК ДнейДоДняРождения,
	|	Условия.УсловиеПредоставления.ДнейПослеДняРождения КАК ДнейПослеДняРождения,
	|	Условия.УсловиеПредоставления.ПорядковыйНомерПродажиКратен КАК ПорядковыйНомерПродажиКратен,
	|	Условия.УсловиеПредоставления.УчитыватьТекущийЧекВНакоплениях КАК УчитыватьТекущийЧекВНакоплениях,
	|	Условия.УсловиеПредоставления.ЗначениеУсловияОграничения КАК ЗначениеУсловияОграничения,
	|	Условия.УсловиеПредоставления.ВнешняяОбработка КАК ВнешняяОбработка,
	|	Условия.УсловиеПредоставления.ПараметрыВнешнейОбработки КАК ПараметрыВнешнейОбработки,
	|	Условия.УсловиеПредоставления.ВнешняяОбработка.Публикация КАК Публикация,
	|	ЛОЖЬ КАК Выполнено,
	|	ПараметрыУсловий.ИмяРаздела КАК ИмяРаздела,
	|	ПараметрыУсловий.НомерСтрокиВремени КАК НомерСтрокиВремени,
	|	ПараметрыУсловий.ДеньНедели КАК ДеньНедели,
	|	ПараметрыУсловий.ВремяНачала КАК ВремяНачала,
	|	ПараметрыУсловий.ВремяОкончания КАК ВремяОкончания,
	|	ПараметрыУсловий.НомерСтрокиПолучателя КАК НомерСтрокиПолучателя,
	|	ПараметрыУсловий.Получатель КАК Получатель,
	|	ПараметрыУсловий.НомерСтрокиКомплекта КАК НомерСтрокиКомплекта,
	|	ПараметрыУсловий.Номенклатура КАК Номенклатура,
	|	ПараметрыУсловий.Характеристика КАК Характеристика,
	|	ПараметрыУсловий.Упаковка КАК Упаковка,
	|	ПараметрыУсловий.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ПараметрыУсловий.Количество КАК Количество
	|ИЗ
	|	УсловияПредоставления КАК Условия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыУсловий КАК ПараметрыУсловий
	|		ПО (ПараметрыУсловий.Условие = Условия.УсловиеПредоставления)
	|ГДЕ
	|	Условия.СкидкаНаценка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Т.СкидкаНаценка
	|			ИЗ
	|				ТаблицаСкидок КАК Т)
	|УПОРЯДОЧИТЬ ПО
	|	СкидкаНаценка,
	|	НомерСтрокиУсловия
	|ИТОГИ ПО
	|	СкидкаНаценка,
	|	Условие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСкидок.СкидкаНаценка КАК СкидкаНаценка,
	|	ТаблицаСкидок.СкидкаНаценка.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
	|	ТаблицаСкидок.СкидкаНаценка.ЭтоГруппа КАК ЭтоГруппа,
	|	ТаблицаСкидок.СкидкаНаценка.ПометкаУдаления КАК ПометкаУдаления,
	|	ТаблицаСкидок.СкидкаНаценка.Родитель.ВариантСовместногоПрименения КАК ВариантСовместногоПримененияРодителя,
	|	ТаблицаСкидок.СкидкаНаценка.ВариантСовместногоПрименения КАК ВариантСовместногоПрименения,
	|	ЛОЖЬ КАК Безусловная,
	|	ТаблицаСкидок.СкидкаНаценка.СпособПредоставления КАК СпособПредоставления,
	|	ТаблицаСкидок.СкидкаНаценка.ОбластьПредоставления КАК ОбластьПредоставления,
	|	ТаблицаСкидок.СкидкаНаценка.ВидЦены КАК ВидЦены,
	|	ТаблицаСкидок.СкидкаНаценка.ЗначениеСкидкиНаценки КАК ЗначениеСкидкиНаценки,
	|	ТаблицаСкидок.СкидкаНаценка.СегментНоменклатурыПредоставления КАК СегментНоменклатурыПредоставления,
	|	ТаблицаСкидок.СкидкаНаценка.ПодарокИзСписка КАК ПодарокИзСписка,
	|	ТаблицаСкидок.СкидкаНаценка.ПодарокИзКорзиныПокупателя КАК ПодарокИзКорзиныПокупателя,
	|	ТаблицаСкидок.СкидкаНаценка.КоличествоПодарковИзКорзиныПокупателя КАК КоличествоПодарковИзКорзиныПокупателя,
	|	ТаблицаСкидок.СкидкаНаценка.УчитыватьПодарокКакПродажу КАК УчитыватьПодарокКакПродажу,
	|	ТаблицаСкидок.СкидкаНаценка.ТекстСообщения КАК ТекстСообщения,
	|	ТаблицаСкидок.СкидкаНаценка.МоментВыдачиСообщения КАК МоментВыдачиСообщения,
	|	ТаблицаСкидок.СкидкаНаценка.КратноКоличествуУсловий КАК КратноКоличествуУсловий,
	|	ТаблицаСкидок.СкидкаНаценка.ОграничениеРазмераПодчиненныхСкидок КАК ОграничениеРазмераПодчиненныхСкидок,
	|	ТаблицаСкидок.СкидкаНаценка.СпособПредоставления КАК СпособОграничения,
	|	ТаблицаСкидок.СкидкаНаценка.ЗначениеСкидкиНаценки КАК ЗначениеОграничения,
	|	ТаблицаСкидок.СкидкаНаценка.ВнешняяОбработка КАК ВнешняяОбработка,
	|	ТаблицаСкидок.СкидкаНаценка.ПараметрыВнешнейОбработки КАК ПараметрыВнешнейОбработки,
	|	ТаблицаСкидок.СкидкаНаценка.ВнешняяОбработка.Публикация КАК Публикация,
	|	ТаблицаСкидок.СкидкаНаценка.Управляемая КАК Управляемая,
	|	0 КАК КоличествоВыполненийУсловия,
	|	ПараметрыСкидок.ИмяРаздела КАК ИмяРаздела,
	|	ПараметрыСкидок.НомерСтрокиПодарка КАК НомерСтрокиПодарка,
	|	ПараметрыСкидок.Номенклатура КАК Номенклатура,
	|	ПараметрыСкидок.Характеристика КАК Характеристика,
	|	ПараметрыСкидок.Упаковка КАК Упаковка,
	|	ПараметрыСкидок.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ПараметрыСкидок.Количество КАК Количество,
	|	ПараметрыСкидок.НомерСтрокиЦеновойГруппы КАК НомерСтрокиЦеновойГруппы,
	|	ПараметрыСкидок.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ПараметрыСкидок.ЗначениеСкидкиНаценки КАК ЗначениеПоЦеновойГруппе
	|ИЗ
	|	ТаблицаСкидок КАК ТаблицаСкидок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыСкидок КАК ПараметрыСкидок
	|		ПО (ПараметрыСкидок.СкидкаНаценка = ТаблицаСкидок.СкидкаНаценка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеквизитДопУпорядочивания,
	|	СкидкаНаценка
	|ИТОГИ
	|	ЛОЖЬ КАК Безусловная,
	|	МАКСИМУМ(СпособПредоставления) КАК СпособПредоставления,
	|	МАКСИМУМ(ОбластьПредоставления) КАК ОбластьПредоставления,
	|	МАКСИМУМ(ВидЦены) КАК ВидЦены,
	|	МАКСИМУМ(ЗначениеСкидкиНаценки) КАК ЗначениеСкидкиНаценки,
	|	МАКСИМУМ(СегментНоменклатурыПредоставления) КАК СегментНоменклатурыПредоставления,
	|	МАКСИМУМ(ПодарокИзСписка) КАК ПодарокИзСписка,
	|	МАКСИМУМ(ПодарокИзКорзиныПокупателя) КАК ПодарокИзКорзиныПокупателя,
	|	МАКСИМУМ(КоличествоПодарковИзКорзиныПокупателя) КАК КоличествоПодарковИзКорзиныПокупателя,
	|	МАКСИМУМ(УчитыватьПодарокКакПродажу) КАК УчитыватьПодарокКакПродажу,
	|	МАКСИМУМ(ТекстСообщения) КАК ТекстСообщения,
	|	МАКСИМУМ(МоментВыдачиСообщения) КАК МоментВыдачиСообщения,
	|	МАКСИМУМ(КратноКоличествуУсловий) КАК КратноКоличествуУсловий,
	|	ОграничениеРазмераПодчиненныхСкидок КАК ОграничениеРазмераПодчиненныхСкидок,
	|	СпособОграничения КАК СпособОграничения,
	|	ЗначениеОграничения КАК ЗначениеОграничения,
	|	Управляемая КАК Управляемая,
	|	0 КАК КоличествоВыполненийУсловия
	|ПО
	|	ОБЩИЕ,
	|	СкидкаНаценка ИЕРАРХИЯ	
	|";
	
	Если Параметры.ТолькоПредварительныйРасчет Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УправляемыеСкидки", "");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УправляемыеСкидки", "	И (СкидкиНаценки.Ссылка В (&МассивУправляемыхСкидок)
																		|			ИЛИ НЕ СкидкиНаценки.Управляемая)");
	КонецЕсли;
	
	Если Параметры.Свойство("ЕстьПодаркиВТЧ") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПродажаПодарка", "ГДЕ НЕ Товары.ПродажаПодарка");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПродажаПодарка", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "	Товары.ПродажаПодарка,", "");
	КонецЕсли;
	
	Если Параметры.Свойство("Оплата") Тогда
		// Есть и бонусы
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтрокаСуммыБонуса", "Товары.СуммаСкидкиОплатыБонусом");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтрокаСуммыБонуса", "0");
	КонецЕсли;
	
	Если Параметры.Свойство("УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов")
		И Параметры.УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТоварыДокументаСумма", "ТоварыДокумента.Сумма - ТоварыДокумента.СуммаОплатыБонусом");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТоварыДокументаСумма", "ТоварыДокумента.Сумма");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСообщенияПослеОформления(Параметры)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтрокиЧека,
	|	Товары.ПродажаПодарка,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	Товары.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЕстьNull(Товары.КлючСвязиУслугаАгента, 0) КАК КлючСвязиУслугаАгента,
	|	Товары.Характеристика,
	|	Товары.Количество,
	|	Товары.Цена,
	|	Товары.Сумма + Товары.СуммаРучнойСкидки КАК Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.ПроцентАвтоматическойСкидки,
	|	Товары.ПроцентРучнойСкидки,
	|	Товары.ПродажаПодарка,
	|	Товары.Упаковка,
	|	Товары.КоличествоУпаковок,
	|	Товары.КлючСвязи,
	|	&СтрокаСуммыБонуса КАК СуммаОплатыБонусом,
	|	Товары.СуммаАвтоматическойСкидки,
	|	Товары.СуммаРучнойСкидки
	|ПОМЕСТИТЬ ТоварыДокументаВременная
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтрокиЧека,
	|	Товары.Номенклатура,
	|	Товары.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Товары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	Товары.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Товары.КлючСвязиУслугаАгента КАК КлючСвязиУслугаАгента,
	|	Товары.Характеристика,
	|	Товары.Количество,
	|	Товары.Цена,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.ПроцентАвтоматическойСкидки,
	|	Товары.ПроцентРучнойСкидки,
	|	Товары.ПродажаПодарка,
	|	Товары.Упаковка,
	|	Товары.КоличествоУпаковок,
	|	Товары.КлючСвязи,
	|	Товары.СуммаОплатыБонусом КАК СуммаОплатыБонусом,
	|	Товары.СуммаАвтоматическойСкидки,
	|	Товары.СуммаРучнойСкидки,
	|	Товары.СуммаРучнойСкидки,
	|	ВЫБОР
	|		КОГДА Сегменты.Номенклатура ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ИсключенаИзРасчета
	|ПОМЕСТИТЬ ТоварыДокумента
	|ИЗ
	|	ТоварыДокументаВременная КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК Сегменты
	|		ПО	Товары.Номенклатура = Сегменты.Номенклатура
	|		И Товары.Характеристика = Сегменты.Характеристика
	|		И Сегменты.Сегмент = &СегментИсключаемойНоменклатуры
	|	&УсловиеПродажаПодарка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка КАК СкидкаНаценка,
	|	СкидкиНаценки.СегментНоменклатурыПредоставления КАК СегментНоменклатурыПредоставления
	|ПОМЕСТИТЬ ТаблицаСкидок
	|ИЗ
	|	Справочник.СкидкиНаценки КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.Ссылка В (ВЫБРАТЬ ДействиеСкидок.СкидкаНаценка ИЗ РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
	|			&ТекущаяДата,
	|			(КОНЕЦПЕРИОДА(ДатаОкончания, ДЕНЬ) >= &ТекущаяДата
	|				ИЛИ ДатаОкончания = &ПустаяДата)
	|				И (Магазин = &Магазин
	|					ИЛИ Магазин = &ПустойМагазин)) КАК ДействиеСкидок)
	|	И СкидкиНаценки.СтатусДействия = &Действует
	|	И СкидкиНаценки.СпособПредоставления = &Сообщение
	|		И СкидкиНаценки.МоментВыдачиСообщения = &ПослеОформленияЧека
	|	&УправляемыеСкидки
	|СГРУППИРОВАТЬ ПО
	|	СкидкиНаценки.Ссылка,
	|	СкидкиНаценки.СегментНоменклатурыПредоставления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СкидкаНаценка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСкидок.СкидкаНаценка КАК СкидкаНаценка,
	|	Условия.УсловиеПредоставления КАК УсловиеПредоставления
	|ПОМЕСТИТЬ УсловияПредоставления
	|ИЗ	
	|	ТаблицаСкидок КАК ТаблицаСкидок
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.УсловияПредоставления КАК Условия
	|	ПО ТаблицаСкидок.СкидкаНаценка = Условия.Ссылка
	|				
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСкидок.СкидкаНаценка,
	|	Условия.УсловиеПредоставления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СкидкаНаценка,
	|	УсловиеПредоставления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Подзапрос.Сегмент КАК Сегмент
	|ПОМЕСТИТЬ ИспользуемыеСегменты
	|ИЗ
	|	(ВЫБРАТЬ
	|		Скидки.СегментНоменклатурыПредоставления КАК Сегмент
	|	ИЗ
	|		ТаблицаСкидок КАК Скидки
	|		
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Условия.УсловиеПредоставления.СегментНоменклатурыОграничения
	|	ИЗ
	|		УсловияПредоставления КАК Условия) КАК Подзапрос
	|ГДЕ
	|	НЕ Подзапрос.Сегмент = &ПустойСегмент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сегменты.Сегмент КАК Сегмент,
	|	ТоварыДокумента.Номенклатура КАК Номенклатура,
	|	ТоварыДокумента.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТоварыСегментов
	|ИЗ
	|	ТоварыДокумента КАК ТоварыДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК Сегменты
	|	ПО Сегменты.Номенклатура = ТоварыДокумента.Номенклатура
	|	И Сегменты.Характеристика = ТоварыДокумента.Характеристика
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИспользуемыеСегменты КАК ИспользуемыеСегменты
	|	ПО Сегменты.Сегмент = ИспользуемыеСегменты.Сегмент
	|
	|СГРУППИРОВАТЬ ПО
	|	Сегменты.Сегмент,
	|	ТоварыДокумента.Номенклатура,
	|	ТоварыДокумента.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ВремяДействия КАК ИмяРаздела,
	|	ВремяДействия.Ссылка КАК Условие,
	|	ВремяДействия.НомерСтроки КАК НомерСтрокиВремени,
	|	ВремяДействия.ДеньНедели КАК ДеньНедели,
	|	ВремяДействия.ВремяНачала КАК ВремяНачала,
	|	ВремяДействия.ВремяОкончания КАК ВремяОкончания,
	|	NULL КАК НомерСтрокиПолучателя,
	|	NULL КАК Получатель,
	|	NULL КАК НомерСтрокиКомплекта,
	|	NULL КАК Номенклатура,
	|	NULL КАК Характеристика,
	|	NULL КАК Упаковка,
	|	NULL КАК КоличествоУпаковок,
	|	NULL КАК Количество
	|ПОМЕСТИТЬ ПараметрыУсловий
	|ИЗ
	|	Справочник.УсловияПредоставленияСкидокНаценок.ВремяДействия КАК ВремяДействия
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ УсловияПредоставления КАК Т
	|	ПО ВремяДействия.Ссылка = Т.УсловиеПредоставления
	|ГДЕ
	|	ВремяДействия.Ссылка.УсловиеПредоставления = &ЗаВремяПродажи
	|	И ВремяДействия.ДеньНедели = &ТекущийДеньНедели
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Получатели,
	|	Получатели.Ссылка,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	Получатели.НомерСтроки,
	|	Получатели.Получатель,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	Справочник.УсловияПредоставленияСкидокНаценок.Получатели КАК Получатели
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ УсловияПредоставления КАК Т
	|	ПО Получатели.Ссылка = Т.УсловиеПредоставления
	|ГДЕ
	|	Получатели.Ссылка.УсловиеПредоставления = &ПоТипуПолучателя
	|	И Получатели.Получатель В(&ПолучателиСкидок)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&КомплектПокупки,
	|	КомплектПокупки.Ссылка,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	КомплектПокупки.НомерСтроки,
	|	КомплектПокупки.Номенклатура,
	|	КомплектПокупки.Характеристика,
	|	КомплектПокупки.Упаковка,
	|	КомплектПокупки.КоличествоУпаковок,
	|	КомплектПокупки.Количество
	|ИЗ
	|	Справочник.УсловияПредоставленияСкидокНаценок.КомплектПокупки КАК КомплектПокупки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ УсловияПредоставления КАК Т
	|	ПО КомплектПокупки.Ссылка = Т.УсловиеПредоставления
	|ГДЕ
	|	КомплектПокупки.Ссылка.УсловиеПредоставления = &ЗаКомплектПокупки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Условие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыДокумента.НомерСтрокиЧека КАК НомерСтрокиЧека,
	|	ТоварыСегментов.Сегмент КАК Сегмент,
	|	ТоварыДокумента.Номенклатура КАК Номенклатура,
	|	ТоварыДокумента.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ТоварыДокумента.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТоварыДокумента.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТоварыДокумента.КлючСвязиУслугаАгента КАК КлючСвязиУслугаАгента,
	|	ТоварыДокумента.Характеристика КАК Характеристика,
	|	ТоварыДокумента.Количество КАК Количество,
	|	ТоварыДокумента.Цена КАК Цена,
	|	ТоварыДокумента.Сумма КАК Сумма,
	|	ТоварыДокумента.Сумма КАК СуммаДляРасчета,
	|	ТоварыДокумента.Сумма КАК СуммаВГруппе,
	|	ТоварыДокумента.Сумма КАК СуммаБезСкидки,
	|	ТоварыДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ТоварыДокумента.СуммаНДС КАК СуммаНДС,
	|	ТоварыДокумента.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ТоварыДокумента.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ТоварыДокумента.Упаковка КАК Упаковка,
	|	ТоварыДокумента.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТоварыДокумента.КлючСвязи КАК КлючСвязи,
	|	ТоварыДокумента.СуммаОплатыБонусом КАК СуммаОплатыБонусом,
	|	ТоварыДокумента.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ТоварыДокумента.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ТоварыДокумента.ИсключенаИзРасчета КАК ИсключенаИзРасчета,
	|	ЛОЖЬ КАК УсловиеПоСтрокеВыполнено,
	|	0 КАК КоличествоВыполненийУсловия
	|ИЗ
	|	ТоварыДокумента КАК ТоварыДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСегментов КАК ТоварыСегментов
	|		ПО ТоварыДокумента.Номенклатура = ТоварыСегментов.Номенклатура
	|		И ТоварыДокумента.Характеристика = ТоварыСегментов.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыДокумента.НомерСтрокиЧека,
	|	&ПустойСегмент,
	|	ТоварыДокумента.Номенклатура,
	|	ТоварыДокумента.ЦеноваяГруппа,
	|	ТоварыДокумента.ТипНоменклатуры,
	|	ТоварыДокумента.ДоговорКонтрагента,
	|	ТоварыДокумента.КлючСвязиУслугаАгента,
	|	ТоварыДокумента.Характеристика,
	|	ТоварыДокумента.Количество,
	|	ТоварыДокумента.Цена,
	|	ТоварыДокумента.Сумма,
	|	ТоварыДокумента.Сумма,
	|	ТоварыДокумента.Сумма,
	|	ТоварыДокумента.Сумма,
	|	ТоварыДокумента.СтавкаНДС,
	|	ТоварыДокумента.СуммаНДС,
	|	ТоварыДокумента.ПроцентАвтоматическойСкидки,
	|	ТоварыДокумента.ПроцентРучнойСкидки,
	|	ТоварыДокумента.Упаковка,
	|	ТоварыДокумента.КоличествоУпаковок,
	|	ТоварыДокумента.КлючСвязи,
	|	ТоварыДокумента.СуммаОплатыБонусом,
	|	ТоварыДокумента.СуммаАвтоматическойСкидки,
	|	ТоварыДокумента.СуммаРучнойСкидки,
	|	ТоварыДокумента.ИсключенаИзРасчета,
	|	ЛОЖЬ,
	|	0
	|ИЗ
	|	ТоварыДокумента КАК ТоварыДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Условия.СкидкаНаценка КАК СкидкаНаценка,
	|	Условия.УсловиеПредоставления КАК Условие,
	|	Условия.УсловиеПредоставления.УсловиеПредоставления КАК ТипУсловия,
	|	Условия.УсловиеПредоставления.ВариантОпределенияПериодаНакопительнойСкидки КАК ВариантОпределенияПериодаНакопительнойСкидки,
	|	Условия.УсловиеПредоставления.ВариантНакопления КАК ВариантНакопления,
	|	Условия.УсловиеПредоставления.ТипСравнения КАК ТипСравнения,
	|	Условия.УсловиеПредоставления.УчитыватьПримененныеСкидки КАК УчитыватьПримененныеСкидки,
	|	Условия.УсловиеПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж КАК КритерийОграниченияПримененияЗаОбъемПродаж,
	|	Условия.УсловиеПредоставления.ОбластьОграничения КАК ОбластьОграничения,
	|	Условия.УсловиеПредоставления.ГрафикОплаты КАК ГрафикОплаты,
	|	Условия.УсловиеПредоставления.ФормаОплаты КАК ФормаОплаты,
	|	Условия.УсловиеПредоставления.СегментНоменклатурыОграничения КАК СегментНоменклатурыОграничения,
	|	Условия.УсловиеПредоставления.ПериодНакопления КАК ПериодНакопления,
	|	Условия.УсловиеПредоставления.ГруппаПользователей КАК ГруппаПользователей,
	|	Условия.УсловиеПредоставления.ДнейДоДняРождения КАК ДнейДоДняРождения,
	|	Условия.УсловиеПредоставления.ДнейПослеДняРождения КАК ДнейПослеДняРождения,
	|	Условия.УсловиеПредоставления.ПорядковыйНомерПродажиКратен КАК ПорядковыйНомерПродажиКратен,
	|	Условия.УсловиеПредоставления.УчитыватьТекущийЧекВНакоплениях КАК УчитыватьТекущийЧекВНакоплениях,
	|	Условия.УсловиеПредоставления.ЗначениеУсловияОграничения КАК ЗначениеУсловияОграничения,
	|	Условия.УсловиеПредоставления.ВнешняяОбработка КАК ВнешняяОбработка,
	|	Условия.УсловиеПредоставления.ПараметрыВнешнейОбработки КАК ПараметрыВнешнейОбработки,
	|	Условия.УсловиеПредоставления.ВнешняяОбработка.Публикация КАК Публикация,
	|	ЛОЖЬ КАК Выполнено,
	|	ПараметрыУсловий.ИмяРаздела КАК ИмяРаздела,
	|	ПараметрыУсловий.НомерСтрокиВремени КАК НомерСтрокиВремени,
	|	ПараметрыУсловий.ДеньНедели КАК ДеньНедели,
	|	ПараметрыУсловий.ВремяНачала КАК ВремяНачала,
	|	ПараметрыУсловий.ВремяОкончания КАК ВремяОкончания,
	|	ПараметрыУсловий.НомерСтрокиПолучателя КАК НомерСтрокиПолучателя,
	|	ПараметрыУсловий.Получатель КАК Получатель,
	|	ПараметрыУсловий.НомерСтрокиКомплекта КАК НомерСтрокиКомплекта,
	|	ПараметрыУсловий.Номенклатура КАК Номенклатура,
	|	ПараметрыУсловий.Характеристика КАК Характеристика,
	|	ПараметрыУсловий.Упаковка КАК Упаковка,
	|	ПараметрыУсловий.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ПараметрыУсловий.Количество КАК Количество
	|ИЗ
	|	УсловияПредоставления КАК Условия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыУсловий КАК ПараметрыУсловий
	|		ПО (ПараметрыУсловий.Условие = Условия.УсловиеПредоставления)
	|ГДЕ
	|	Условия.СкидкаНаценка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Т.СкидкаНаценка
	|			ИЗ
	|				ТаблицаСкидок КАК Т)
	|ИТОГИ ПО
	|	СкидкаНаценка,
	|	Условие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСкидок.СкидкаНаценка КАК СкидкаНаценка,
	|	ТаблицаСкидок.СкидкаНаценка.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
	|	ТаблицаСкидок.СкидкаНаценка.ЭтоГруппа КАК ЭтоГруппа,
	|	ТаблицаСкидок.СкидкаНаценка.ПометкаУдаления КАК ПометкаУдаления,
	|	ТаблицаСкидок.СкидкаНаценка.Родитель.ВариантСовместногоПрименения КАК ВариантСовместногоПримененияРодителя,
	|	ТаблицаСкидок.СкидкаНаценка.ВариантСовместногоПрименения КАК ВариантСовместногоПрименения,
	|	ЛОЖЬ КАК Безусловная,
	|	ТаблицаСкидок.СкидкаНаценка.СпособПредоставления КАК СпособПредоставления,
	|	ТаблицаСкидок.СкидкаНаценка.ОбластьПредоставления КАК ОбластьПредоставления,
	|	ТаблицаСкидок.СкидкаНаценка.ВидЦены КАК ВидЦены,
	|	ТаблицаСкидок.СкидкаНаценка.ЗначениеСкидкиНаценки КАК ЗначениеСкидкиНаценки,
	|	ТаблицаСкидок.СкидкаНаценка.СегментНоменклатурыПредоставления КАК СегментНоменклатурыПредоставления,
	|	ТаблицаСкидок.СкидкаНаценка.ПодарокИзСписка КАК ПодарокИзСписка,
	|	ТаблицаСкидок.СкидкаНаценка.ПодарокИзКорзиныПокупателя КАК ПодарокИзКорзиныПокупателя,
	|	ТаблицаСкидок.СкидкаНаценка.КоличествоПодарковИзКорзиныПокупателя КАК КоличествоПодарковИзКорзиныПокупателя,
	|	ТаблицаСкидок.СкидкаНаценка.УчитыватьПодарокКакПродажу КАК УчитыватьПодарокКакПродажу,
	|	ТаблицаСкидок.СкидкаНаценка.ТекстСообщения КАК ТекстСообщения,
	|	ТаблицаСкидок.СкидкаНаценка.МоментВыдачиСообщения КАК МоментВыдачиСообщения,
	|	ТаблицаСкидок.СкидкаНаценка.КратноКоличествуУсловий КАК КратноКоличествуУсловий,
	|	ТаблицаСкидок.СкидкаНаценка.ОграничениеРазмераПодчиненныхСкидок КАК ОграничениеРазмераПодчиненныхСкидок,
	|	ТаблицаСкидок.СкидкаНаценка.СпособПредоставления КАК СпособОграничения,
	|	ТаблицаСкидок.СкидкаНаценка.ЗначениеСкидкиНаценки КАК ЗначениеОграничения,
	|	ТаблицаСкидок.СкидкаНаценка.ВнешняяОбработка КАК ВнешняяОбработка,
	|	ТаблицаСкидок.СкидкаНаценка.ПараметрыВнешнейОбработки КАК ПараметрыВнешнейОбработки,
	|	ТаблицаСкидок.СкидкаНаценка.ВнешняяОбработка.Публикация КАК Публикация,
	|	ТаблицаСкидок.СкидкаНаценка.Управляемая КАК Управляемая,
	|	0 КАК КоличествоВыполненийУсловия
	|ИЗ
	|	ТаблицаСкидок КАК ТаблицаСкидок
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеквизитДопУпорядочивания,
	|	СкидкаНаценка
	|ИТОГИ
	|	ЛОЖЬ КАК Безусловная,
	|	МАКСИМУМ(СпособПредоставления) КАК СпособПредоставления,
	|	МАКСИМУМ(ОбластьПредоставления) КАК ОбластьПредоставления,
	|	МАКСИМУМ(ВидЦены) КАК ВидЦены,
	|	МАКСИМУМ(ЗначениеСкидкиНаценки) КАК ЗначениеСкидкиНаценки,
	|	МАКСИМУМ(СегментНоменклатурыПредоставления) КАК СегментНоменклатурыПредоставления,
	|	МАКСИМУМ(ПодарокИзСписка) КАК ПодарокИзСписка,
	|	МАКСИМУМ(ПодарокИзКорзиныПокупателя) КАК ПодарокИзКорзиныПокупателя,
	|	МАКСИМУМ(КоличествоПодарковИзКорзиныПокупателя) КАК КоличествоПодарковИзКорзиныПокупателя,
	|	МАКСИМУМ(УчитыватьПодарокКакПродажу) КАК УчитыватьПодарокКакПродажу,
	|	МАКСИМУМ(ТекстСообщения) КАК ТекстСообщения,
	|	МАКСИМУМ(МоментВыдачиСообщения) КАК МоментВыдачиСообщения,
	|	МАКСИМУМ(КратноКоличествуУсловий) КАК КратноКоличествуУсловий,
	|	ОграничениеРазмераПодчиненныхСкидок КАК ОграничениеРазмераПодчиненныхСкидок,
	|	СпособОграничения КАК СпособОграничения,
	|	ЗначениеОграничения КАК ЗначениеОграничения,
	|	Управляемая КАК Управляемая,
	|	0 КАК КоличествоВыполненийУсловия
	|ПО
	|	ОБЩИЕ,
	|	СкидкаНаценка ИЕРАРХИЯ	
	|";
	
	Если Параметры.ТолькоПредварительныйРасчет Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УправляемыеСкидки", "");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УправляемыеСкидки", "	И (СкидкиНаценки.Ссылка В (&МассивУправляемыхСкидок)
																		|			ИЛИ НЕ СкидкиНаценки.Управляемая)");
	КонецЕсли;
	
	Если Параметры.Свойство("ЕстьПодаркиВТЧ") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПродажаПодарка", "ГДЕ НЕ Товары.ПродажаПодарка");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПродажаПодарка", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "	Товары.ПродажаПодарка,", "");
	КонецЕсли;
	
	Если Параметры.Свойство("Оплата") Тогда
		// Есть и бонусы
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтрокаСуммыБонуса", "Товары.СуммаСкидкиОплатыБонусом");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтрокаСуммыБонуса", "0");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ОбработатьДеревоСкидок(ДеревоСкидок, ДеревоУсловий, Параметры, ТаблицаТоваровПоСегментам = Неопределено)
	
	Для Каждого СтрокаДерева Из ДеревоСкидок.Строки Цикл
		Если СтрокаДерева.Родитель = Неопределено Тогда
			// Это верхний уровень
			СтрокаДерева.СтруктураДополнительныхДанных.Вставить("ТаблицаТоваровПоСегментам", ТаблицаТоваровПоСегментам);
			СтрокаДерева.ЭтоГруппа = Истина;
			СтрокаДерева.ПометкаУдаления = Ложь;
			ОбработатьДеревоСкидок(СтрокаДерева, ДеревоУсловий, Параметры);
			
		Иначе
			СтрокаДерева.СтруктураДополнительныхДанных.Вставить(
				"ТаблицаТоваровПоСегментам",
				СтрокаДерева.Родитель.СтруктураДополнительныхДанных.ТаблицаТоваровПоСегментам.Скопировать());
			
			Если СтрокаДерева.ЭтоГруппа Тогда
				
				ОбработатьДеревоСкидок(СтрокаДерева, ДеревоУсловий, Параметры);
				
				Если СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Максимум
					ИЛИ СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Минимум
					ИЛИ СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение Тогда
					
					ПрименитьСкидкиВГруппе(СтрокаДерева);
					
				КонецЕсли;
				
				ОграничитьСкидкуПоГруппе(СтрокаДерева, Параметры);
				
			Иначе
				
				ОбработатьСтрокуСкидки(СтрокаДерева, ДеревоУсловий, Параметры);
				
			КонецЕсли;
			
			Если СтрокаДерева.ВариантСовместногоПримененияРодителя = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Сложение
				ИЛИ СтрокаДерева.ВариантСовместногоПримененияРодителя = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.ПоследовательноеПрименение
				ИЛИ СтрокаДерева.ВариантСовместногоПримененияРодителя = NULL Тогда
				ОбновитьСкидкиРодителя(СтрокаДерева);
				ОбновитьТоварыРодителя(СтрокаДерева);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ СтрокаДерева.СтруктураДополнительныхДанных.Свойство("ТаблицаСкидок") Тогда
			ПустаяТаблицаСкидок = ПустаяТаблицаСкидок();
			СтрокаДерева.СтруктураДополнительныхДанных.Вставить("ТаблицаСкидок", ПустаяТаблицаСкидок);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьСтрокуСкидки(СтрокаДерева, ДеревоУсловий, Параметры)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("СкидкаНаценка", СтрокаДерева.СкидкаНаценка);
	НайденныеСтрокиУсловий = ДеревоУсловий.Строки.НайтиСтроки(СтруктураПоиска);
	УсловияВыполнены = Ложь;
	Если НайденныеСтрокиУсловий.Количество() = 0 Тогда
		УсловияВыполнены = Истина;
		СтрокаДерева.Безусловная = Истина;
	Иначе
		СтрокаУсловий = НайденныеСтрокиУсловий[0];
		ПроверитьУсловияСкидки(СтрокаДерева, СтрокаУсловий.Строки, Параметры, УсловияВыполнены);
	КонецЕсли;
	
	Если УсловияВыполнены Тогда
		
		РассчитатьСкидку(СтрокаДерева, Параметры);
		
	КонецЕсли;
	
	Если НЕ СтрокаДерева.Безусловная Тогда
		СтрокаДерева.СтруктураДополнительныхДанных.Вставить("СтрокаУсловий", СтрокаУсловий);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьУсловияСкидки(СтрокаДереваСкидок, СтрокиУсловий, Параметры, УсловияВыполнены)
	
	ВсеУсловияВыполнены = Истина;
	
	Для Каждого Условие Из СтрокиУсловий Цикл
		
		ТекущееУсловиеВыполнено = Ложь;
		
		Если Условие.ТипУсловия = Перечисления.УсловияПредоставленияСкидокНаценок.ВДеньРождения Тогда
			
			Если Параметры.Свойство("ДеньРождения") И ЗначениеЗаполнено(Параметры.ДеньРождения) Тогда
				ДнейДоДняРождения = НачалоДня(Параметры.ДеньРождения) - Условие.ДнейДоДняРождения * 86400;
				ДнейПослеДняРождения = КонецДня(Параметры.ДеньРождения) + Условие.ДнейПослеДняРождения * 86400;
				Если ДнейДоДняРождения <= Параметры.ТекущаяДата
					И ДнейПослеДняРождения >= Параметры.ТекущаяДата Тогда
					
					ТекущееУсловиеВыполнено = Истина;
					
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Условие.ТипУсловия = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаВремяПродажи Тогда
			
			Для Каждого СтрокаУсловия Из Условие.Строки Цикл
				Если ЗначениеЗаполнено(СтрокаУсловия.ДеньНедели)
					И Параметры.ВремяОбъекта >= СтрокаУсловия.ВремяНачала
					И Параметры.ВремяОбъекта <= СтрокаУсловия.ВремяОкончания Тогда
					
					ТекущееУсловиеВыполнено = Истина;
					
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли Условие.ТипУсловия = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаКомплектПокупки Тогда
			
			ТаблицаТоваров = Новый ТаблицаЗначений;
			ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
			ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
			
			ТаблицаСегмента = СтрокаДереваСкидок.СтруктураДополнительныхДанных.ТаблицаТоваровПоСегментам;
			СтруктураОтбора = Новый Структура("Сегмент", Справочники.СегментыНоменклатуры.ПустаяСсылка());
			СтрокиТоварыДерево = ТаблицаСегмента.НайтиСтроки(СтруктураОтбора);
			
			Для Каждого СтрокаТовары Из СтрокиТоварыДерево Цикл
				НоваяСтрокаТовары = ТаблицаТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТовары);
			КонецЦикла;
			
			ТаблицаТоваров.Свернуть("Номенклатура, Характеристика","Количество");
			
			СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
			
			Для Каждого СтрокаУсловия Из Условие.Строки Цикл
				Если СтрокаУсловия.ИмяРаздела = "КомплектПокупки" Тогда
					КоличествоКомплектов = 0;
					КоличествоВыполненийУсловия = 0;
					
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаУсловия);
					СтрокиТоваров = ТаблицаТоваров.НайтиСтроки(СтруктураПоиска);
					Для Каждого СтрокаТовар Из СтрокиТоваров Цикл
						Если НЕ СтрокаУсловия.Количество = 0 Тогда
							КоличествоКомплектов = Цел(СтрокаТовар.Количество/СтрокаУсловия.Количество);
						КонецЕсли;
					КонецЦикла;
					
					Если КоличествоКомплектов > 0 Тогда
						СтрокиЧека = СтрокаДереваСкидок.СтруктураДополнительныхДанных.ТаблицаТоваровПоСегментам.НайтиСтроки(СтруктураПоиска);
						Для Каждого СтрокаЧека из СтрокиЧека Цикл
							Если НЕ СтрокаУсловия.Количество = 0 Тогда
								КоличествоВыполненийУсловия = Цел(СтрокаЧека.Количество/СтрокаУсловия.Количество);
								СтрокаЧека.КоличествоВыполненийУсловия = КоличествоВыполненийУсловия;
								СтрокаЧека.УсловиеПоСтрокеВыполнено = Истина;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если КоличествоКомплектов > 0 Тогда
				ТекущееУсловиеВыполнено = Истина;
				СтрокаДереваСкидок.КоличествоВыполненийУсловия = КоличествоКомплектов;
			КонецЕсли;
			
		ИначеЕсли Условие.ТипУсловия = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж Тогда
			
			Если Условие.ВариантНакопления = Перечисления.ВариантыНакопленияКумулятивнойСкидкиНаценки.ПоДисконтнойКарте Тогда
				ДатаНачала = Неопределено;
				ДатаОкончания = Параметры.ТекущаяДата - 1;
				ОпределитьПериодНакопительногоУсловия(Условие, Параметры.ТекущаяДата, ДатаНачала, ДатаОкончания);
				
				Если Параметры.ДисконтныеКарты.Количество() > 0 Тогда
					Если Условие.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.ПредыдущаяПокупка Тогда
						Если Параметры.ИспользоватьДисконтныйСервер Тогда
							ЕстьОшибкиДисконтногоСервера = Ложь;
							ДопПараметры = ДисконтныйСервер.СтруктураДопПараметровЗапросаОНакопленияхДисконтномуСерверу();
							ДопПараметры.ДатаНачала = ДатаНачала; 
							ДопПараметры.ДатаОкончания = ДатаОкончания;
							ДопПараметры.СегментОтграничения = Условие.СегментНоменклатурыОграничения;
							ДопПараметры.Регистратор = Параметры.Регистратор;
							ДанныеПредыдущейПокупки = ДисконтныйСервер.ДанныеПредыдущейПокупки(
														Параметры.ДисконтныеКарты,
														ДопПараметры,
														ЕстьОшибкиДисконтногоСервера);
						Иначе
							ДанныеПредыдущейПокупки = СкидкиНаценкиСерверПереопределяемый.ДанныеПредыдущейПокупкиДляРасчетаСкидки(
														Параметры.ДисконтныеКарты,
														Параметры.ТекущаяДата,
														Условие.СегментНоменклатурыОграничения,
														Параметры.Регистратор);
						КонецЕсли;
						СуммаПредыдущейПокупки = ДанныеПредыдущейПокупки.Сумма;
						Если Условие.ТипСравнения = Перечисления.ТипыСравненияЗначенийСкидокНаценок.НеМенее Тогда
							ТекущееУсловиеВыполнено = СуммаПредыдущейПокупки >= Условие.ЗначениеУсловияОграничения;
							Если СтрокаДереваСкидок.КратноКоличествуУсловий Тогда
								СтрокаДереваСкидок.КоличествоВыполненийУсловия = ?(Условие.ЗначениеУсловияОграничения = 0, 1, Цел(СуммаПредыдущейПокупки / Условие.ЗначениеУсловияОграничения));
							КонецЕсли;
						ИначеЕсли Условие.ТипСравнения = Перечисления.ТипыСравненияЗначенийСкидокНаценок.НеБолее Тогда
							ТекущееУсловиеВыполнено = СуммаПредыдущейПокупки <= Условие.ЗначениеУсловияОграничения;
							Если СтрокаДереваСкидок.КратноКоличествуУсловий Тогда
								СтрокаДереваСкидок.КоличествоВыполненийУсловия = 1;
							КонецЕсли;
						КонецЕсли;
						Если ТекущееУсловиеВыполнено Тогда
							СтрокаДереваСкидок.СтруктураДополнительныхДанных.Вставить("СуммаПредыдущейПокупки", СуммаПредыдущейПокупки);
						КонецЕсли;
					Иначе
						
						Если Параметры.ИспользоватьДисконтныйСервер Тогда
							ЕстьОшибкиДисконтногоСервера = Ложь;
							ДопПараметры = ДисконтныйСервер.СтруктураДопПараметровЗапросаОНакопленияхДисконтномуСерверу();
							ДопПараметры.ДатаНачала = ДатаНачала; 
							ДопПараметры.ДатаОкончания = ДатаОкончания;
							ДопПараметры.СегментОтграничения = Условие.СегментНоменклатурыОграничения;
							ДопПараметры.Регистратор = Параметры.Регистратор;
							ДанныеНакоплений = ДисконтныйСервер.ДанныеНакопленийПоКарте(Параметры.ДисконтныеКарты, ДопПараметры, ЕстьОшибкиДисконтногоСервера);
						Иначе
							ПараметрыЗапроса = Новый Структура;
							ПараметрыЗапроса.Вставить("МассивКарт", Параметры.ДисконтныеКарты);
							ПараметрыЗапроса.Вставить("ИсключаемыйДокумент", Параметры.Регистратор);
							ПараметрыЗапроса.Вставить("ДатаНачала", ДатаНачала);
							ПараметрыЗапроса.Вставить("ДатаОкончания", ДатаОкончания);
							ПараметрыЗапроса.Вставить("СегментНоменклатуры", Условие.СегментНоменклатурыОграничения);
							
							ДанныеНакоплений = ДанныеНакопленийПоКарте(ПараметрыЗапроса);
							
						КонецЕсли;
						Если Условие.УчитыватьТекущийЧекВНакоплениях Тогда
							ТоварыСегмента = СтрокаДереваСкидок.СтруктураДополнительныхДанных.ТаблицаТоваровПоСегментам.НайтиСтроки(
												Новый Структура("Сегмент", Условие.СегментНоменклатурыОграничения));
							КоличествоЧека = 0;
							СуммаЧека = 0;
							Для Каждого ТоварСегмента Из ТоварыСегмента Цикл
								Если Условие.УчитыватьПримененныеСкидки Тогда
									СуммаЧека = СуммаЧека + ТоварСегмента.Сумма;
								Иначе
									СуммаЧека = СуммаЧека + ТоварСегмента.СуммаБезСкидки;
								КонецЕсли;
								КоличествоЧека = КоличествоЧека + ТоварСегмента.Количество;
							КонецЦикла;
							ДанныеНакоплений.КоличествоНакопления = ДанныеНакоплений.КоличествоНакопления + КоличествоЧека;
							ДанныеНакоплений.СуммаНакопления = ДанныеНакоплений.СуммаНакопления + СуммаЧека;
						КонецЕсли;
						Если Условие.КритерийОграниченияПримененияЗаОбъемПродаж = Перечисления.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество Тогда
							ЗначениеСравнения = ДанныеНакоплений.КоличествоНакопления;
						Иначе
							ЗначениеСравнения = ДанныеНакоплений.СуммаНакопления;
						КонецЕсли;
						Если Условие.ТипСравнения = Перечисления.ТипыСравненияЗначенийСкидокНаценок.НеМенее Тогда
							ТекущееУсловиеВыполнено = ЗначениеСравнения >= Условие.ЗначениеУсловияОграничения;
							Если СтрокаДереваСкидок.КратноКоличествуУсловий Тогда
								СтрокаДереваСкидок.КоличествоВыполненийУсловия = ?(Условие.ЗначениеУсловияОграничения = 0, 1, Цел(ЗначениеСравнения / Условие.ЗначениеУсловияОграничения));
							КонецЕсли;
						ИначеЕсли Условие.ТипСравнения = Перечисления.ТипыСравненияЗначенийСкидокНаценок.НеБолее Тогда
							ТекущееУсловиеВыполнено = ЗначениеСравнения <= Условие.ЗначениеУсловияОграничения;
							Если СтрокаДереваСкидок.КратноКоличествуУсловий Тогда
								СтрокаДереваСкидок.КоличествоВыполненийУсловия = 1;
							КонецЕсли;
						КонецЕсли;
						Если ТекущееУсловиеВыполнено Тогда
							СтрокаДереваСкидок.СтруктураДополнительныхДанных.Вставить("СуммаНакопления", ДанныеНакоплений.СуммаНакопления);
							СтрокаДереваСкидок.СтруктураДополнительныхДанных.Вставить("КоличествоНакопления", ДанныеНакоплений.КоличествоНакопления);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Условие.ТипУсловия = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж Тогда
			
			ТоварыСегмента = СтрокаДереваСкидок.СтруктураДополнительныхДанных.ТаблицаТоваровПоСегментам.НайтиСтроки(
								Новый Структура("Сегмент", Условие.СегментНоменклатурыОграничения));
			
			ИмяРесурса = "Количество";
			Если Условие.КритерийОграниченияПримененияЗаОбъемПродаж = 
				Перечисления.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма Тогда
				Если Условие.УчитыватьПримененныеСкидки Тогда
					ИмяРесурса = "Сумма";
				Иначе
					ИмяРесурса = "СуммаБезСкидки";					
				КонецЕсли;
			КонецЕсли;
			
			Если Условие.ОбластьОграничения = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе Тогда
				ИтогДляУсловия = 0;
				
				Для Каждого СтрокаТовара Из ТоварыСегмента Цикл
					ИтогДляУсловия = ИтогДляУсловия + СтрокаТовара[ИмяРесурса];
				КонецЦикла;
				Если ИтогДляУсловия <> 0 Тогда
					Если Условие.ТипСравнения = Перечисления.ТипыСравненияЗначенийСкидокНаценок.НеМенее Тогда
						ТекущееУсловиеВыполнено = Условие.ЗначениеУсловияОграничения <= ИтогДляУсловия;
						Если СтрокаДереваСкидок.КратноКоличествуУсловий Тогда
							СтрокаДереваСкидок.КоличествоВыполненийУсловия = ?(Условие.ЗначениеУсловияОграничения = 0, 1, Цел(ИтогДляУсловия / Условие.ЗначениеУсловияОграничения));
						КонецЕсли;
					ИначеЕсли Условие.ТипСравнения = Перечисления.ТипыСравненияЗначенийСкидокНаценок.НеБолее Тогда
						ТекущееУсловиеВыполнено = Условие.ЗначениеУсловияОграничения >= ИтогДляУсловия;
						Если СтрокаДереваСкидок.КратноКоличествуУсловий Тогда
							СтрокаДереваСкидок.КоличествоВыполненийУсловия = 1;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если ТекущееУсловиеВыполнено Тогда
					Для Каждого СтрокаТовара Из ТоварыСегмента Цикл
						СтрокаТовара.УсловиеПоСтрокеВыполнено = Истина;
						СтрокаТовара.КоличествоВыполненийУсловия = СтрокаДереваСкидок.КоличествоВыполненийУсловия;
					КонецЦикла;
				КонецЕсли;
			Иначе
				Для Каждого СтрокаТовара Из ТоварыСегмента Цикл
					УсловиеПоСтрокеВыполнено = Ложь;
					Если Условие.ТипСравнения = Перечисления.ТипыСравненияЗначенийСкидокНаценок.НеМенее Тогда
						УсловиеПоСтрокеВыполнено = Условие.ЗначениеУсловияОграничения <= СтрокаТовара[ИмяРесурса];
						Если СтрокаДереваСкидок.КратноКоличествуУсловий Тогда
							СтрокаДереваСкидок.КоличествоВыполненийУсловия = ?(Условие.ЗначениеУсловияОграничения = 0, 1, Цел(СтрокаТовара[ИмяРесурса] / Условие.ЗначениеУсловияОграничения));
						КонецЕсли;
					ИначеЕсли Условие.ТипСравнения = Перечисления.ТипыСравненияЗначенийСкидокНаценок.НеБолее Тогда
						УсловиеПоСтрокеВыполнено = Условие.ЗначениеУсловияОграничения >= СтрокаТовара[ИмяРесурса];
						Если СтрокаДереваСкидок.КратноКоличествуУсловий Тогда
							СтрокаДереваСкидок.КоличествоВыполненийУсловия = 1;
						КонецЕсли;
					КонецЕсли;
					ТекущееУсловиеВыполнено = ТекущееУсловиеВыполнено ИЛИ УсловиеПоСтрокеВыполнено;
					СтрокаТовара.УсловиеПоСтрокеВыполнено = УсловиеПоСтрокеВыполнено;
					СтрокаТовара.КоличествоВыполненийУсловия = СтрокаДереваСкидок.КоличествоВыполненийУсловия;
					Если Условие.СегментНоменклатурыОграничения <> СтрокаДереваСкидок.СегментНоменклатурыПредоставления Тогда
						СтрокиСегментов = СтрокаДереваСкидок.СтруктураДополнительныхДанных.ТаблицаТоваровПоСегментам.НайтиСтроки(
											Новый Структура(
													"КлючСвязи, Сегмент",
													СтрокаТовара.КлючСвязи,
													СтрокаДереваСкидок.СегментНоменклатурыПредоставления));
						Если СтрокиСегментов.Количество() > 0 Тогда
							Для Каждого СтрокаСегмента Из СтрокиСегментов Цикл
								СтрокаСегмента.УсловиеПоСтрокеВыполнено = СтрокаТовара.УсловиеПоСтрокеВыполнено;
								СтрокаСегмента.КоличествоВыполненийУсловия = СтрокаТовара.КоличествоВыполненийУсловия;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли Условие.ТипУсловия = Перечисления.УсловияПредоставленияСкидокНаценок.ПорядковыйНомерПродажиКратен Тогда
			
			Если Параметры.ПорядковыйНомерПродажи <> 0 Тогда
				Если Параметры.ПорядковыйНомерПродажи / Условие.ПорядковыйНомерПродажиКратен = 
					Цел(Параметры.ПорядковыйНомерПродажи / Условие.ПорядковыйНомерПродажиКратен) Тогда
					
					ТекущееУсловиеВыполнено = Истина;
					
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Условие.ТипУсловия = Перечисления.УсловияПредоставленияСкидокНаценок.ПоТипуПолучателя Тогда
			
			ЗапросПолучатели = Новый Запрос;
			ЗапросПолучатели.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Получатели.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.УсловияПредоставленияСкидокНаценок.Получатели КАК Получатели
			|ГДЕ
			|	Получатели.Ссылка = &Условие
			|	И Получатели.Получатель В(&ПолучателиСкидок)";
			ЗапросПолучатели.УстановитьПараметр("Условие", Условие.Условие);
			ЗапросПолучатели.УстановитьПараметр("ПолучателиСкидок", Параметры.ПолучателиСкидок);
			Результат = ЗапросПолучатели.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				ТекущееУсловиеВыполнено = Истина;
				ТаблицаТоваровПоСегментам = СтрокаДереваСкидок.СтруктураДополнительныхДанных.ТаблицаТоваровПоСегментам;
				Для Каждого СтрокаТоваров Из ТаблицаТоваровПоСегментам Цикл
					СтрокаТоваров.УсловиеПоСтрокеВыполнено = Истина;
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли Условие.ТипУсловия = Перечисления.УсловияПредоставленияСкидокНаценок.ВнешняяОбработка Тогда
			
			Если Условие.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена Тогда
				ТекущееУсловиеВыполнено = Ложь;
			Иначе
				ВнешняяОбработка = Условие.ВнешняяОбработка;
				ХранилищеПараметров = Условие.ПараметрыВнешнейОбработки;
				Если ХранилищеПараметров <> Неопределено Тогда
					ПараметрыВнешнейОбработки = Условие.ПараметрыВнешнейОбработки.Получить();
				КонецЕсли;
				ВнешнийОбъект = СкидкиНаценкиПовтИсп.ОбъектВнешнейОбработки(ВнешняяОбработка);
				
				УстановитьБезопасныйРежим(Истина);
				Попытка
					РезультатПроверки = ВнешнийОбъект.ПроверитьУсловие(Условие, СтрокаДереваСкидок, ПараметрыВнешнейОбработки, Параметры);
					ТекущееУсловиеВыполнено = РезультатПроверки.ТекущееУсловиеВыполнено;
				Исключение
					СтрокаОшибки = НСтр("ru = 'Исключительная ситуация при проверке условия скидок внешней обработкой:'") + Символы.ПС + ОписаниеОшибки();
					ОбщегоНазначения.СообщитьПользователю(СтрокаОшибки);
				КонецПопытки;
				УстановитьБезопасныйРежим(Ложь);
			КонецЕсли;
			
		ИначеЕсли Условие.ТипУсловия = Перечисления.УсловияПредоставленияСкидокНаценок.ОдноразовыйКод Тогда
			
			Если Параметры.Свойство("СписокОдноразовыхКодов") Тогда
				ВсегоКупоновДляСкидки = 0;
				Для Каждого ОдноразовыйКод Из Параметры.СписокОдноразовыхКодов Цикл
					СкидкиДляКупона = СкидкиНаценкиСерверПереопределяемый.СкидкиДляКупона(ОдноразовыйКод, Параметры.ТекущаяДата);
					Для Каждого СтрокаКупона Из СкидкиДляКупона Цикл
						Если СтрокаКупона.Скидка = СтрокаДереваСкидок.СкидкаНаценка Тогда
							ТекущееУсловиеВыполнено = Истина;
							ВсегоКупоновДляСкидки = ВсегоКупоновДляСкидки + 1;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				Если ВсегоКупоновДляСкидки > 0 Тогда
					Если СтрокаДереваСкидок.КоличествоВыполненийУсловия = 0 Тогда
						СтрокаДереваСкидок.КоличествоВыполненийУсловия = 1;
					КонецЕсли;
					СтрокаДереваСкидок.КоличествоВыполненийУсловия = СтрокаДереваСкидок.КоличествоВыполненийУсловия * ВсегоКупоновДляСкидки;
					Для Каждого СтрокаТовара Из СтрокаДереваСкидок.СтруктураДополнительныхДанных.ТаблицаТоваровПоСегментам Цикл
						Если СтрокаТовара.УсловиеПоСтрокеВыполнено Тогда
							СтрокаТовара.КоличествоВыполненийУсловия = СтрокаДереваСкидок.КоличествоВыполненийУсловия;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			Иначе
				ТекущееУсловиеВыполнено = Ложь;
			КонецЕсли;
			
		Иначе
			
			ТекущееУсловиеВыполнено = Ложь;
			
		КонецЕсли;
		
		ВсеУсловияВыполнены = ТекущееУсловиеВыполнено;
		Условие.Выполнено = ТекущееУсловиеВыполнено;
		Если НЕ ТекущееУсловиеВыполнено Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	УсловияВыполнены = ВсеУсловияВыполнены;
	
КонецПроцедуры

Процедура РассчитатьСкидку(СтрокаДереваСкидок, Параметры)
	
	ТоварыСегмента = СтрокаДереваСкидок.СтруктураДополнительныхДанных.ТаблицаТоваровПоСегментам.НайтиСтроки(
						Новый Структура("Сегмент", СтрокаДереваСкидок.СегментНоменклатурыПредоставления));
	
	ЭтоПоследовательноеПрименение = СтрокаДереваСкидок.ВариантСовместногоПримененияРодителя = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.ПоследовательноеПрименение;
	
	ТаблицаСкидок = ПустаяТаблицаСкидок();
	ТаблицаПодарков = ПустаяТаблицаПодарков();
	ТаблицаСообщений = ПустаяТаблицаСообщений();
	
	Если СтрокаДереваСкидок.Безусловная
		И СтрокаДереваСкидок.КоличествоВыполненийУсловия = 0 Тогда
		СтрокаДереваСкидок.КоличествоВыполненийУсловия = 1;
	КонецЕсли;
	
	Если СтрокаДереваСкидок.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Процент Тогда
		
		Для Каждого ТоварСегмента Из ТоварыСегмента Цикл
			
			// Если скидка на данную строку не действует - пропускаем.
			Если СтрокаДереваСкидок.ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке
				И (НЕ СтрокаДереваСкидок.Безусловная)
				И (НЕ ТоварСегмента.УсловиеПоСтрокеВыполнено) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТоварСегмента.ИсключенаИзРасчета
				ИЛИ ТоварСегмента.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат
				ИЛИ (ТоварСегмента.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
					И ЗначениеЗаполнено(ТоварСегмента.ДоговорКонтрагента)) 
				ИЛИ ЗначениеЗаполнено(ТоварСегмента.КлючСвязиУслугаАгента) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭтоПоследовательноеПрименение Тогда
				Сумма = ТоварСегмента.СуммаВГруппе;
			Иначе
				Сумма = ТоварСегмента.СуммаДляРасчета;
			КонецЕсли;

			ЗначениеСкидкиНаценки = СтрокаДереваСкидок.ЗначениеСкидкиНаценки;
			
			Если ЗначениеЗаполнено(ТоварСегмента.ЦеноваяГруппа) Тогда
				Для Каждого СтрокаЦеновойГруппы Из СтрокаДереваСкидок.Строки Цикл
					Если СтрокаЦеновойГруппы.ИмяРаздела = "ЦеновыеГруппы" Тогда
						Если СтрокаЦеновойГруппы.ЦеноваяГруппа = ТоварСегмента.ЦеноваяГруппа Тогда
							ЗначениеСкидкиНаценки = СтрокаЦеновойГруппы.ЗначениеПоЦеновойГруппе;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			СуммаСкидки = Окр((ЗначениеСкидкиНаценки / 100) * Сумма, 2);
			Если СуммаСкидки <> 0 Тогда
				НоваяСтрока = ТаблицаСкидок.Добавить();
				НоваяСтрока.СкидкаНаценка = СтрокаДереваСкидок.СкидкаНаценка;
				НоваяСтрока.СпособПредоставления = СтрокаДереваСкидок.СпособПредоставления;
				НоваяСтрока.РеквизитДопУпорядочивания = СтрокаДереваСкидок.РеквизитДопУпорядочивания;
				НоваяСтрока.КлючСвязи = ТоварСегмента.КлючСвязи;
				НоваяСтрока.Сегмент = СтрокаДереваСкидок.СегментНоменклатурыПредоставления;
				НоваяСтрока.Действует = Истина;
				НоваяСтрока.Сумма = СуммаСкидки;
				НоваяСтрока.СуммаВсехСкидок = СуммаСкидки;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли СтрокаДереваСкидок.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма 
		ИЛИ СтрокаДереваСкидок.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыПредыдущейПокупки Тогда
		
		Если СтрокаДереваСкидок.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыПредыдущейПокупки Тогда
			// % От предыдущей покупки - уже посчитанная отдельно сумма,
			// которая распределяется так же, как и обычная суммовая скидка.
			СуммаСкидкиКРаспределению = Окр(СтрокаДереваСкидок.СтруктураДополнительныхДанных.СуммаПредыдущейПокупки * СтрокаДереваСкидок.ЗначениеСкидкиНаценки / 100, 2);
		Иначе
			СуммаСкидкиКРаспределению = СтрокаДереваСкидок.ЗначениеСкидкиНаценки;
		КонецЕсли;
		
		Если СтрокаДереваСкидок.ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе Тогда
		
			Если СтрокаДереваСкидок.КратноКоличествуУсловий Тогда
				СуммаСкидкиКРаспределению = СуммаСкидкиКРаспределению * СтрокаДереваСкидок.КоличествоВыполненийУсловия;
			КонецЕсли;
			// Расчет общей суммы товаров сегмента.
			ОбщаяСуммаТоваровСегмента = 0;
			Для Каждого ТоварСегмента Из ТоварыСегмента Цикл
				
				Если ТоварСегмента.ИсключенаИзРасчета
					ИЛИ ТоварСегмента.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат
					ИЛИ (ТоварСегмента.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
						И ЗначениеЗаполнено(ТоварСегмента.ДоговорКонтрагента))
					ИЛИ ЗначениеЗаполнено(ТоварСегмента.КлючСвязиУслугаАгента) Тогда
					Продолжить;
				КонецЕсли;
			
				ОбщаяСуммаТоваровСегмента = ОбщаяСуммаТоваровСегмента + ТоварСегмента.СуммаБезСкидки;
			КонецЦикла;
			
			СтрокаСкидкиДляРаспределения = Неопределено;
			МаксимальнаяСуммаВРаспределении = 0;
			// Распределение скидки на товары сегмента.
			Для Каждого ТоварСегмента Из ТоварыСегмента Цикл
				
				Если ТоварСегмента.ИсключенаИзРасчета
					ИЛИ ТоварСегмента.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат
					ИЛИ (ТоварСегмента.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
						И ЗначениеЗаполнено(ТоварСегмента.ДоговорКонтрагента))
					ИЛИ ЗначениеЗаполнено(ТоварСегмента.КлючСвязиУслугаАгента) Тогда
					Продолжить;
				КонецЕсли;
			
				НоваяСтрока = ТаблицаСкидок.Добавить();
				НоваяСтрока.СкидкаНаценка = СтрокаДереваСкидок.СкидкаНаценка;
				НоваяСтрока.СпособПредоставления = СтрокаДереваСкидок.СпособПредоставления;
				НоваяСтрока.РеквизитДопУпорядочивания = СтрокаДереваСкидок.РеквизитДопУпорядочивания;
				НоваяСтрока.КлючСвязи = ТоварСегмента.КлючСвязи;
				НоваяСтрока.Сегмент   = СтрокаДереваСкидок.СегментНоменклатурыПредоставления;
				НоваяСтрока.Действует = Истина;
				
				Сумма = ТоварСегмента.СуммаБезСкидки;
				
				Если Сумма > МаксимальнаяСуммаВРаспределении Тогда
					МаксимальнаяСуммаВРаспределении = Сумма;
					СтрокаСкидкиДляРаспределения = НоваяСтрока;
				КонецЕсли;
				
				Если ОбщаяСуммаТоваровСегмента <> 0 Тогда
					НоваяСтрока.Сумма = Окр(Сумма * (СуммаСкидкиКРаспределению / ОбщаяСуммаТоваровСегмента), 2);
					НоваяСтрока.СуммаВсехСкидок = НоваяСтрока.Сумма;
				КонецЕсли;
				
				СуммаСкидкиКРаспределению = СуммаСкидкиКРаспределению - НоваяСтрока.Сумма;
				ОбщаяСуммаТоваровСегмента = ОбщаяСуммаТоваровСегмента - Сумма;

			КонецЦикла;
			
			Если СуммаСкидкиКРаспределению <> 0 И СтрокаСкидкиДляРаспределения <> Неопределено Тогда
				СтрокаСкидкиДляРаспределения.Сумма = СтрокаСкидкиДляРаспределения.Сумма + СуммаСкидкиКРаспределению;
				СтрокаСкидкиДляРаспределения.СуммаВсехСкидок = СтрокаСкидкиДляРаспределения.СуммаВсехСкидок + СуммаСкидкиКРаспределению;
			КонецЕсли;
			
		ИначеЕсли СтрокаДереваСкидок.ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке Тогда
			
			Для Каждого ТоварСегмента Из ТоварыСегмента Цикл
				
				Если ТоварСегмента.ИсключенаИзРасчета
					ИЛИ ТоварСегмента.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат
					ИЛИ (ТоварСегмента.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
						И ЗначениеЗаполнено(ТоварСегмента.ДоговорКонтрагента))
					ИЛИ ЗначениеЗаполнено(ТоварСегмента.КлючСвязиУслугаАгента) Тогда
					Продолжить;
				КонецЕсли;
				
				Если (НЕ СтрокаДереваСкидок.Безусловная)
					И (НЕ ТоварСегмента.УсловиеПоСтрокеВыполнено) Тогда
					Продолжить;
				КонецЕсли;
				СуммаСкидкиКРаспределениюВСтроке = СуммаСкидкиКРаспределению;
				Если СтрокаДереваСкидок.КратноКоличествуУсловий Тогда
					Если СтрокаДереваСкидок.Безусловная
						И ТоварСегмента.КоличествоВыполненийУсловия = 0 Тогда
						ТоварСегмента.КоличествоВыполненийУсловия = 1;
					КонецЕсли;
					СуммаСкидкиКРаспределениюВСтроке = СуммаСкидкиКРаспределению * ТоварСегмента.КоличествоВыполненийУсловия;
				КонецЕсли;
				НоваяСтрока = ТаблицаСкидок.Добавить();
				НоваяСтрока.СкидкаНаценка = СтрокаДереваСкидок.СкидкаНаценка;
				НоваяСтрока.СпособПредоставления = СтрокаДереваСкидок.СпособПредоставления;
				НоваяСтрока.РеквизитДопУпорядочивания = СтрокаДереваСкидок.РеквизитДопУпорядочивания;
				НоваяСтрока.КлючСвязи = ТоварСегмента.КлючСвязи;
				НоваяСтрока.Сегмент = СтрокаДереваСкидок.СегментНоменклатурыПредоставления;
				НоваяСтрока.Действует = Истина;
				НоваяСтрока.Сумма = СуммаСкидкиКРаспределениюВСтроке;
				НоваяСтрока.СуммаВсехСкидок = СуммаСкидкиКРаспределениюВСтроке;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли СтрокаДереваСкидок.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ВидЦены Тогда
		
		Для Каждого ТоварСегмента Из ТоварыСегмента Цикл
			
			Если ТоварСегмента.ИсключенаИзРасчета
				ИЛИ ТоварСегмента.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат
				ИЛИ (ТоварСегмента.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
					И ЗначениеЗаполнено(ТоварСегмента.ДоговорКонтрагента))
				ИЛИ ЗначениеЗаполнено(ТоварСегмента.КлючСвязиУслугаАгента) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаДереваСкидок.ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке Тогда
				Если (НЕ СтрокаДереваСкидок.Безусловная)
					И (НЕ ТоварСегмента.УсловиеПоСтрокеВыполнено) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ЦенаЗаУпаковку = ЗапасыСервер.ЦенаПоВидуЦен(СтрокаДереваСкидок.ВидЦены,
																Параметры.ТекущаяДата,
																ТоварСегмента.Номенклатура,
																ТоварСегмента.Характеристика,
																ТоварСегмента.Упаковка);
			Если ЦенаЗаУпаковку <> 0 Тогда
				Сумма = ТоварСегмента.СуммаБезСкидки;
				СуммаСкидки = Сумма - Окр(ТоварСегмента.КоличествоУпаковок * ЦенаЗаУпаковку, 2);
				
				НоваяСтрока = ТаблицаСкидок.Добавить();
				НоваяСтрока.СкидкаНаценка = СтрокаДереваСкидок.СкидкаНаценка;
				НоваяСтрока.СпособПредоставления = СтрокаДереваСкидок.СпособПредоставления;
				НоваяСтрока.РеквизитДопУпорядочивания = СтрокаДереваСкидок.РеквизитДопУпорядочивания;
				НоваяСтрока.КлючСвязи = ТоварСегмента.КлючСвязи;
				НоваяСтрока.Сегмент = СтрокаДереваСкидок.СегментНоменклатурыПредоставления;
				НоваяСтрока.Действует = Истина;
				НоваяСтрока.Сумма = СуммаСкидки;
				НоваяСтрока.СуммаВсехСкидок = СуммаСкидки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли СтрокаДереваСкидок.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Подарок Тогда
		
		Если СтрокаДереваСкидок.ПодарокИзКорзиныПокупателя Тогда
			
			Если СтрокаДереваСкидок.ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе Тогда
				
				Если ТоварыСегмента.Количество() > 1 Тогда
					Неделимая = Истина;
				Иначе
					Неделимая = Ложь;
				КонецЕсли;
				// Сумма скидки к распределению.
				СуммаСкидкиКРаспределению = 0;
				СуммаСкидкиРассчитана = Ложь;
				Если СтрокаДереваСкидок.КратноКоличествуУсловий Тогда
					КоличествоПодарковИзКорзиныПокупателя = СтрокаДереваСкидок.КоличествоПодарковИзКорзиныПокупателя * СтрокаДереваСкидок.КоличествоВыполненийУсловия;
				Иначе
					КоличествоПодарковИзКорзиныПокупателя = СтрокаДереваСкидок.КоличествоПодарковИзКорзиныПокупателя;
				КонецЕсли;
				
				// Расчет общей суммы товаров сегмента.
				// Скидка предоставляется с учетом цены товара - сначала более дешевые.
				ТаблицаТоваровПоСегментам = СтрокаДереваСкидок.СтруктураДополнительныхДанных.ТаблицаТоваровПоСегментам.Скопировать();
				ТаблицаТоваровПоСегментам.Сортировать("Цена");
				ТоварыСортированные = ТаблицаТоваровПоСегментам.НайтиСтроки(
									Новый Структура("Сегмент", СтрокаДереваСкидок.СегментНоменклатурыПредоставления));
				ОбщаяСуммаТоваровСегмента = 0;
				Для Каждого ТоварСегмента Из ТоварыСортированные Цикл
					
					Если ТоварСегмента.ИсключенаИзРасчета
						ИЛИ ТоварСегмента.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат
						ИЛИ (ТоварСегмента.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
							И ЗначениеЗаполнено(ТоварСегмента.ДоговорКонтрагента))
						ИЛИ ЗначениеЗаполнено(ТоварСегмента.КлючСвязиУслугаАгента) Тогда
						Продолжить;
					КонецЕсли;
					
					Если НЕ СуммаСкидкиРассчитана Тогда
						
						Если КоличествоПодарковИзКорзиныПокупателя > ТоварСегмента.КоличествоУпаковок Тогда
							
							СуммаСкидкиКРаспределению = СуммаСкидкиКРаспределению + ТоварСегмента.КоличествоУпаковок * ТоварСегмента.Цена;
							КоличествоПодарковИзКорзиныПокупателя = КоличествоПодарковИзКорзиныПокупателя - ТоварСегмента.КоличествоУпаковок;
						Иначе
							
							СуммаСкидкиКРаспределению = СуммаСкидкиКРаспределению + КоличествоПодарковИзКорзиныПокупателя * ТоварСегмента.Цена;
							КоличествоПодарковИзКорзиныПокупателя = 0;
							СуммаСкидкиРассчитана = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
					Сумма = ТоварСегмента.Сумма;
					
					ОбщаяСуммаТоваровСегмента = ОбщаяСуммаТоваровСегмента + Сумма;
					
				КонецЦикла;
				
				Если СуммаСкидкиКРаспределению > 0 Тогда
					// Распределение скидки на товары сегмента.
					Для Каждого ТоварСегмента Из ТоварыСегмента Цикл
						
						Если ТоварСегмента.ИсключенаИзРасчета
							ИЛИ ТоварСегмента.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат
							ИЛИ (ТоварСегмента.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
								И ЗначениеЗаполнено(ТоварСегмента.ДоговорКонтрагента))
							ИЛИ ЗначениеЗаполнено(ТоварСегмента.КлючСвязиУслугаАгента) Тогда
							Продолжить;
						КонецЕсли;
						
						НоваяСтрока = ТаблицаСкидок.Добавить();
						
						НоваяСтрока.КлючСвязи = ТоварСегмента.КлючСвязи;
						НоваяСтрока.СкидкаНаценка = СтрокаДереваСкидок.СкидкаНаценка;
						// Подарок из корзины распределяется, как сумма
						НоваяСтрока.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма;
						НоваяСтрока.Неделимая = Неделимая;
						НоваяСтрока.РеквизитДопУпорядочивания = СтрокаДереваСкидок.РеквизитДопУпорядочивания;
						НоваяСтрока.СуммаВсехСкидок = СуммаСкидкиКРаспределению;
						НоваяСтрока.Сумма = СуммаСкидкиКРаспределению;
						НоваяСтрока.Сегмент = СтрокаДереваСкидок.СегментНоменклатурыПредоставления;
						НоваяСтрока.Действует = Истина;
						НоваяСтрока.ТекстСообщения = "";

						Если ОбщаяСуммаТоваровСегмента <> 0  Тогда
							НоваяСтрока.СуммаВсехСкидок = ТоварСегмента.Сумма * (СуммаСкидкиКРаспределению / ОбщаяСуммаТоваровСегмента);
							НоваяСтрока.СуммаПодарков = НоваяСтрока.СуммаВсехСкидок;
							НоваяСтрока.Сумма = НоваяСтрока.СуммаВсехСкидок;
						КонецЕсли;
						
						СуммаСкидкиКРаспределению = СуммаСкидкиКРаспределению - НоваяСтрока.СуммаВсехСкидок;
						ОбщаяСуммаТоваровСегмента = ОбщаяСуммаТоваровСегмента - ТоварСегмента.Сумма;
						
					КонецЦикла;
				КонецЕсли; 
				
			ИначеЕсли СтрокаДереваСкидок.ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке Тогда
				
				Для Каждого ТоварСегмента Из ТоварыСегмента Цикл
					
					Если ТоварСегмента.ИсключенаИзРасчета
						ИЛИ ТоварСегмента.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат
						ИЛИ (ТоварСегмента.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
							И ЗначениеЗаполнено(ТоварСегмента.ДоговорКонтрагента))
						ИЛИ ЗначениеЗаполнено(ТоварСегмента.КлючСвязиУслугаАгента) Тогда
						Продолжить;
					КонецЕсли;
					
					Если (НЕ СтрокаДереваСкидок.Безусловная)
						И (НЕ ТоварСегмента.УсловиеПоСтрокеВыполнено) Тогда
						Продолжить;
					КонецЕсли;
					Если СтрокаДереваСкидок.КратноКоличествуУсловий Тогда
						Если СтрокаДереваСкидок.Безусловная
							И ТоварСегмента.КоличествоВыполненийУсловия = 0 Тогда
							ТоварСегмента.КоличествоВыполненийУсловия = 1;
						КонецЕсли;
						КоличествоПодарков = СтрокаДереваСкидок.КоличествоПодарковИзКорзиныПокупателя * ТоварСегмента.КоличествоВыполненийУсловия;
					Иначе
						КоличествоПодарков = СтрокаДереваСкидок.КоличествоПодарковИзКорзиныПокупателя;
					КонецЕсли;
					СуммаСкидкиКРаспределению = Мин(ТоварСегмента.КоличествоУпаковок, КоличествоПодарков) * ТоварСегмента.Цена;
					
					НоваяСтрока = ТаблицаСкидок.Добавить();
					НоваяСтрока.КлючСвязи = ТоварСегмента.КлючСвязи;
					НоваяСтрока.СкидкаНаценка = СтрокаДереваСкидок.СкидкаНаценка;
					// Подарок из корзины распределяется, как сумма
					НоваяСтрока.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма;
					НоваяСтрока.РеквизитДопУпорядочивания = СтрокаДереваСкидок.РеквизитДопУпорядочивания;
					НоваяСтрока.СуммаВсехСкидок = СуммаСкидкиКРаспределению;
					НоваяСтрока.Сумма = СуммаСкидкиКРаспределению;
					НоваяСтрока.Сегмент = СтрокаДереваСкидок.СегментНоменклатурыПредоставления;
					НоваяСтрока.Действует = Истина;
					НоваяСтрока.ТекстСообщения = "";
					
				КонецЦикла;
				
			КонецЕсли;
			
			
		Иначе
			СуммаПодарка = 0;
			Если СтрокаДереваСкидок.ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе Тогда
				
				Для Каждого СтрокаПодарка Из СтрокаДереваСкидок.Строки Цикл
					
					Если СтрокаПодарка.КоличествоУпаковок = Null Тогда
						Продолжить;
					КонецЕсли;
					
					Если СтрокаПодарка.КоличествоУпаковок > 0 Тогда
						СтрокаТаблицыПодарков = ТаблицаПодарков.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицыПодарков, СтрокаПодарка);
						Если СтрокаДереваСкидок.КратноКоличествуУсловий Тогда
							СтрокаТаблицыПодарков.КоличествоУпаковок = СтрокаТаблицыПодарков.КоличествоУпаковок * СтрокаДереваСкидок.КоличествоВыполненийУсловия;
							СтрокаТаблицыПодарков.Количество = СтрокаТаблицыПодарков.Количество * СтрокаДереваСкидок.КоличествоВыполненийУсловия;
						КонецЕсли;
						ПриводитьКМинимальной = ЗначениеЗаполнено(Параметры.ВидМинимальныхЦенПродажи);
						СтрокаТаблицыПодарков.Цена = ЗапасыСервер.ЦенаПродажи(
														Параметры.Магазин,
														Параметры.ТекущаяДата,
														СтрокаТаблицыПодарков.Номенклатура,
														СтрокаТаблицыПодарков.Характеристика,
														СтрокаТаблицыПодарков.Упаковка,
														ПриводитьКМинимальной);
						СтрокаТаблицыПодарков.Сумма = СтрокаТаблицыПодарков.Цена * СтрокаТаблицыПодарков.КоличествоУпаковок;
						СуммаПодарка = СуммаПодарка + СтрокаТаблицыПодарков.Сумма;
						
						СтрокаТаблицыПодарков.Склад = СкладПродажи(СтрокаТаблицыПодарков, Параметры);

					КонецЕсли;
					
				КонецЦикла;
				
				НоваяСтрока = ТаблицаСкидок.Добавить();
				НоваяСтрока.КлючСвязи = 0;
				НоваяСтрока.Неделимая = Истина;
				НоваяСтрока.СкидкаНаценка = СтрокаДереваСкидок.СкидкаНаценка;
				НоваяСтрока.СпособПредоставления = СтрокаДереваСкидок.СпособПредоставления;
				НоваяСтрока.РеквизитДопУпорядочивания = СтрокаДереваСкидок.РеквизитДопУпорядочивания;
				НоваяСтрока.СуммаВсехСкидок = СуммаПодарка;
				НоваяСтрока.СуммаПодарков = СуммаПодарка;
				НоваяСтрока.Сегмент = СтрокаДереваСкидок.СегментНоменклатурыПредоставления;
				НоваяСтрока.Действует = Истина;
				НоваяСтрока.ТекстСообщения = "";
				НоваяСтрока.ТаблицаПодарков = ТаблицаПодарков.Скопировать();
				
			Иначе
				
				Для Каждого ТоварСегмента Из ТоварыСегмента Цикл
					
					Если ТоварСегмента.ИсключенаИзРасчета
						ИЛИ ТоварСегмента.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат
						ИЛИ (ТоварСегмента.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
							И ЗначениеЗаполнено(ТоварСегмента.ДоговорКонтрагента))
						ИЛИ ЗначениеЗаполнено(ТоварСегмента.КлючСвязиУслугаАгента) Тогда
						Продолжить;
					КонецЕсли;
					
					Если (НЕ СтрокаДереваСкидок.Безусловная)
						И (НЕ ТоварСегмента.УсловиеПоСтрокеВыполнено) Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = ТаблицаСкидок.Добавить();
					
					НоваяСтрока.КлючСвязи = ТоварСегмента.КлючСвязи;
					НоваяСтрока.СкидкаНаценка = СтрокаДереваСкидок.СкидкаНаценка;
					НоваяСтрока.СпособПредоставления = СтрокаДереваСкидок.СпособПредоставления;
					НоваяСтрока.Неделимая = Ложь;
					НоваяСтрока.РеквизитДопУпорядочивания = СтрокаДереваСкидок.РеквизитДопУпорядочивания;
					НоваяСтрока.Сегмент = СтрокаДереваСкидок.СегментНоменклатурыПредоставления;
					НоваяСтрока.Действует = Истина;
					НоваяСтрока.ТекстСообщения = "";
					НоваяСтрока.ТаблицаПодарков = ПустаяТаблицаПодарков();

					Для Каждого СтрокаПодарка Из СтрокаДереваСкидок.Строки Цикл
						
						Если СтрокаПодарка.КоличествоУпаковок > 0 Тогда
							СтрокаТаблицыПодарков = НоваяСтрока.ТаблицаПодарков.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаТаблицыПодарков, СтрокаПодарка);
							Если СтрокаДереваСкидок.КратноКоличествуУсловий Тогда
								Если СтрокаДереваСкидок.Безусловная
									И ТоварСегмента.КоличествоВыполненийУсловия = 0 Тогда
									ТоварСегмента.КоличествоВыполненийУсловия = 1;
								КонецЕсли;
								СтрокаТаблицыПодарков.КоличествоУпаковок = СтрокаТаблицыПодарков.КоличествоУпаковок * ТоварСегмента.КоличествоВыполненийУсловия;
								СтрокаТаблицыПодарков.Количество = СтрокаТаблицыПодарков.Количество * ТоварСегмента.КоличествоВыполненийУсловия;
							КонецЕсли;
							ПриводитьКМинимальной = ЗначениеЗаполнено(Параметры.ВидМинимальныхЦенПродажи);
							СтрокаТаблицыПодарков.Цена = ЗапасыСервер.ЦенаПродажи(
															Параметры.Магазин,
															Параметры.ТекущаяДата,
															СтрокаТаблицыПодарков.Номенклатура,
															СтрокаТаблицыПодарков.Характеристика,
															СтрокаТаблицыПодарков.Упаковка,
															ПриводитьКМинимальной);
							СтрокаТаблицыПодарков.Сумма = СтрокаТаблицыПодарков.Цена * СтрокаТаблицыПодарков.КоличествоУпаковок;
							СуммаПодарка = СуммаПодарка + СтрокаТаблицыПодарков.Сумма;
							СтрокаТаблицыПодарков.Склад = СкладПродажи(СтрокаТаблицыПодарков, Параметры);
							
							НоваяОбщаяСтрокаПодарка = ТаблицаПодарков.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяОбщаяСтрокаПодарка, СтрокаТаблицыПодарков);
						КонецЕсли;
						
					КонецЦикла;
					НоваяСтрока.СуммаВсехСкидок = СуммаПодарка;
					НоваяСтрока.СуммаПодарков = СуммаПодарка;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли СтрокаДереваСкидок.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сообщение Тогда
		
		НоваяСтрока = ТаблицаСкидок.Добавить();
		НоваяСтрока.КлючСвязи = 0;
		НоваяСтрока.СкидкаНаценка = СтрокаДереваСкидок.СкидкаНаценка;
		НоваяСтрока.СпособПредоставления = СтрокаДереваСкидок.СпособПредоставления;
		НоваяСтрока.РеквизитДопУпорядочивания = СтрокаДереваСкидок.РеквизитДопУпорядочивания;
		НоваяСтрока.Сегмент   = СтрокаДереваСкидок.СегментНоменклатурыПредоставления;
		НоваяСтрока.Действует = Истина;
		НоваяСтрока.ТекстСообщения = СтрокаДереваСкидок.ТекстСообщения;
		
	ИначеЕсли СтрокаДереваСкидок.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.КоличествоБонусныхБаллов
		ИЛИ СтрокаДереваСкидок.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыВВидеБонусныхБаллов Тогда
		
		НужноНачислять = Параметры.ДисконтныеКарты.Количество() > 0;
		Если НужноНачислять Тогда
			ДисконтнаяКарта = Параметры.ДисконтныеКарты[0];
			БонуснаяПрограммаКарты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДисконтнаяКарта, "БонуснаяПрограммаЛояльности");
			Если ЗначениеЗаполнено(БонуснаяПрограммаКарты) Тогда
				ПараметрыБонуса = БонусныеБаллыСервер.ПараметрыБонуснойСкидкиНаценки(СтрокаДереваСкидок.СкидкаНаценка, Параметры.ТекущаяДата);
				Если ПараметрыБонуса.БонуснаяПрограммаЛояльности = БонуснаяПрограммаКарты Тогда
					Если ПараметрыБонуса.ЗапретНачисленияБалловПриОплатеБонусами Тогда
						Если Параметры.Свойство("БудетОплатаБонусами") Тогда
							НужноНачислять = Ложь;
						Иначе
							Если Параметры.Свойство("Оплата") Тогда
								Если Параметры.Оплата.Найти(Справочники.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой, "ВидОплаты") <> Неопределено Тогда
									НужноНачислять = Ложь;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					НужноНачислять = Ложь;
				КонецЕсли;
				
			Иначе
				НужноНачислять = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если НужноНачислять Тогда
			
			КурсКонвертацииБонусовВВалюту = ?(ПараметрыБонуса.КурсКонвертацииБонусовВВалюту = 0, 1, ПараметрыБонуса.КурсКонвертацииБонусовВВалюту);
			Если СтрокаДереваСкидок.ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе Тогда
				
				ОбщаяСуммаТоваровСегмента = 0;
				Для Каждого ТоварСегмента Из ТоварыСегмента Цикл
					
					Если ТоварСегмента.ИсключенаИзРасчета
						ИЛИ ТоварСегмента.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат
						ИЛИ (ТоварСегмента.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
							И ЗначениеЗаполнено(ТоварСегмента.ДоговорКонтрагента))
						ИЛИ ЗначениеЗаполнено(ТоварСегмента.КлючСвязиУслугаАгента) Тогда
						Продолжить;
					КонецЕсли;
					
					Если ЭтоПоследовательноеПрименение Тогда
						Сумма = ТоварСегмента.СуммаВГруппе;
					Иначе
						Сумма = ТоварСегмента.СуммаДляРасчета;
					КонецЕсли;
					ОбщаяСуммаТоваровСегмента = ОбщаяСуммаТоваровСегмента + Сумма;
					
				КонецЦикла;
				
				Если СтрокаДереваСкидок.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.КоличествоБонусныхБаллов Тогда
					Если СтрокаДереваСкидок.КратноКоличествуУсловий Тогда
						ОбщееКоличествоБонусов = СтрокаДереваСкидок.ЗначениеСкидкиНаценки * СтрокаДереваСкидок.КоличествоВыполненийУсловия;
					Иначе
						ОбщееКоличествоБонусов = СтрокаДереваСкидок.ЗначениеСкидкиНаценки;
					КонецЕсли;
				Иначе
					ОбщееКоличествоБонусов = Цел(ОбщаяСуммаТоваровСегмента * СтрокаДереваСкидок.ЗначениеСкидкиНаценки / (КурсКонвертацииБонусовВВалюту * 100));
				КонецЕсли;
				
				Если ОбщееКоличествоБонусов > 0 Тогда
					СтрокаДляРаспределения = Неопределено;
					МаксимальнаяСуммаВРаспределении = 0;
					ОсталосьРаспределитьБонусов = ОбщееКоличествоБонусов;
					// Распределение скидки на товары сегмента.
					Для Каждого ТоварСегмента Из ТоварыСегмента Цикл
						
						Если ТоварСегмента.ИсключенаИзРасчета
							ИЛИ ТоварСегмента.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат
							ИЛИ (ТоварСегмента.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
								И ЗначениеЗаполнено(ТоварСегмента.ДоговорКонтрагента))
							ИЛИ ЗначениеЗаполнено(ТоварСегмента.КлючСвязиУслугаАгента) Тогда
							Продолжить;
						КонецЕсли;
						
						НоваяСтрока = ТаблицаСкидок.Добавить();
						НоваяСтрока.КлючСвязи = ТоварСегмента.КлючСвязи;
						НоваяСтрока.СкидкаНаценка = СтрокаДереваСкидок.СкидкаНаценка;
						НоваяСтрока.СпособПредоставления = СтрокаДереваСкидок.СпособПредоставления;
						НоваяСтрока.РеквизитДопУпорядочивания = СтрокаДереваСкидок.РеквизитДопУпорядочивания;
						НоваяСтрока.Сегмент = СтрокаДереваСкидок.СегментНоменклатурыПредоставления;
						НоваяСтрока.Действует = Истина;
						
						
						ТаблицаБонусов = БонусныеБаллыСервер.ПустаяТаблицаРасшифровкиБонусовПриРасчетеСкидок();
						НоваяСтрокаРасшифровки = ТаблицаБонусов.Добавить();
						НоваяСтрокаРасшифровки.КлючСвязи   					= ТоварСегмента.КлючСвязи;
						НоваяСтрокаРасшифровки.БонуснаяПрограммаЛояльности	= ПараметрыБонуса.БонуснаяПрограммаЛояльности;
						НоваяСтрокаРасшифровки.СкидкаНаценка				= СтрокаДереваСкидок.СкидкаНаценка;
						НоваяСтрокаРасшифровки.ДисконтнаяКарта				= ДисконтнаяКарта;
						НоваяСтрокаРасшифровки.ДатаНачисления				= ПараметрыБонуса.ДатаНачисления;
						НоваяСтрокаРасшифровки.ДатаСписания					= ПараметрыБонуса.ДатаСписания;
						НоваяСтрокаРасшифровки.Сегмент   					= СтрокаДереваСкидок.СегментНоменклатурыПредоставления;
						
						Если ТоварСегмента.Сумма > МаксимальнаяСуммаВРаспределении Тогда
							Если ЭтоПоследовательноеПрименение Тогда
								МаксимальнаяСуммаВРаспределении = ТоварСегмента.СуммаВГруппе;
							Иначе
								МаксимальнаяСуммаВРаспределении = ТоварСегмента.СуммаДляРасчета;
							КонецЕсли;
							СтрокаДляРаспределения = НоваяСтрока;
						КонецЕсли;
						
						Если ЭтоПоследовательноеПрименение Тогда
							КоэффициентСтроки = ТоварСегмента.СуммаВГруппе / ОбщаяСуммаТоваровСегмента;
						Иначе
							КоэффициентСтроки = ТоварСегмента.СуммаДляРасчета / ОбщаяСуммаТоваровСегмента;
						КонецЕсли;
						НоваяСтрока.КоличествоБонусов = ОбщееКоличествоБонусов * КоэффициентСтроки;
						НоваяСтрока.СуммаВсехСкидок = Окр(НоваяСтрока.КоличествоБонусов * КурсКонвертацииБонусовВВалюту, 2);
						НоваяСтрокаРасшифровки.КоличествоБонусныхБаллов = НоваяСтрока.КоличествоБонусов;
						
						НоваяСтрока.ТаблицаБонусов = ТаблицаБонусов.Скопировать();
						
						ОсталосьРаспределитьБонусов = ОсталосьРаспределитьБонусов - НоваяСтрока.КоличествоБонусов;

					КонецЦикла;
					
					Если ОсталосьРаспределитьБонусов <> 0
						И СтрокаДляРаспределения <> Неопределено Тогда
						СтрокаДляРаспределения.КоличествоБонусов = СтрокаДляРаспределения.КоличествоБонусов + ОсталосьРаспределитьБонусов;
						СтрокаДляРаспределения.СуммаВсехСкидок = СтрокаДляРаспределения.СуммаВсехСкидок
																	+ Окр(ОсталосьРаспределитьБонусов * КурсКонвертацииБонусовВВалюту, 2);
																	
						Если СтрокаДляРаспределения.ТаблицаБонусов.Количество() > 0 Тогда
							СтрокаБонуса = СтрокаДляРаспределения.ТаблицаБонусов[0];
							СтрокаБонуса.КоличествоБонусныхБаллов = СтрокаБонуса.КоличествоБонусныхБаллов + ОсталосьРаспределитьБонусов;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли СтрокаДереваСкидок.ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке Тогда
				
				Для Каждого ТоварСегмента Из ТоварыСегмента Цикл
					
					Если ТоварСегмента.ИсключенаИзРасчета
						ИЛИ ТоварСегмента.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат
						ИЛИ (ТоварСегмента.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
							И ЗначениеЗаполнено(ТоварСегмента.ДоговорКонтрагента))
						ИЛИ ЗначениеЗаполнено(ТоварСегмента.КлючСвязиУслугаАгента) Тогда
						Продолжить;
					КонецЕсли;
					
					Если (НЕ СтрокаДереваСкидок.Безусловная)
						И (НЕ ТоварСегмента.УсловиеПоСтрокеВыполнено) Тогда
						Продолжить;
					КонецЕсли;
					
					ЗначениеСкидкиНаценки = СтрокаДереваСкидок.ЗначениеСкидкиНаценки;
					Если ЗначениеЗаполнено(ТоварСегмента.ЦеноваяГруппа) Тогда
						Для Каждого СтрокаЦеновойГруппы Из СтрокаДереваСкидок.Строки Цикл
							Если СтрокаЦеновойГруппы.ИмяРаздела = "ЦеновыеГруппы" Тогда
								Если СтрокаЦеновойГруппы.ЦеноваяГруппа = ТоварСегмента.ЦеноваяГруппа Тогда
									ЗначениеСкидкиНаценки = СтрокаЦеновойГруппы.ЗначениеПоЦеновойГруппе;
									Прервать;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если СтрокаДереваСкидок.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.КоличествоБонусныхБаллов Тогда
						СуммаВсехСкидок = Окр(ЗначениеСкидкиНаценки * КурсКонвертацииБонусовВВалюту, 2);
						Если СтрокаДереваСкидок.КратноКоличествуУсловий Тогда
							Если СтрокаДереваСкидок.Безусловная
								И ТоварСегмента.КоличествоВыполненийУсловия = 0 Тогда
								ТоварСегмента.КоличествоВыполненийУсловия = 1;
							КонецЕсли;
							КоличествоБонусныхБаллов = ЗначениеСкидкиНаценки * ТоварСегмента.КоличествоВыполненийУсловия;
						Иначе
							КоличествоБонусныхБаллов = ЗначениеСкидкиНаценки;
						КонецЕсли;
					Иначе
						Если ЭтоПоследовательноеПрименение Тогда
							Сумма = ТоварСегмента.СуммаВГруппе;
						Иначе
							Сумма = ТоварСегмента.СуммаДляРасчета;
						КонецЕсли;
						СуммаВсехСкидок = Окр(Сумма * ЗначениеСкидкиНаценки / 100, 2);
						КоличествоБонусныхБаллов = Цел(СуммаВсехСкидок / КурсКонвертацииБонусовВВалюту);
					КонецЕсли;
					Если КоличествоБонусныхБаллов > 0 Тогда
						НоваяСтрока = ТаблицаСкидок.Добавить();
						НоваяСтрока.КлючСвязи = ТоварСегмента.КлючСвязи;
						НоваяСтрока.КоличествоБонусов = КоличествоБонусныхБаллов;
						НоваяСтрока.СуммаВсехСкидок = СуммаВсехСкидок;
						НоваяСтрока.СкидкаНаценка = СтрокаДереваСкидок.СкидкаНаценка;
						НоваяСтрока.СпособПредоставления = СтрокаДереваСкидок.СпособПредоставления;
						
						НоваяСтрока.РеквизитДопУпорядочивания = СтрокаДереваСкидок.РеквизитДопУпорядочивания;
						НоваяСтрока.Сегмент = СтрокаДереваСкидок.СегментНоменклатурыПредоставления;
						НоваяСтрока.Действует = Истина;
						
						
						ТаблицаБонусов = БонусныеБаллыСервер.ПустаяТаблицаРасшифровкиБонусовПриРасчетеСкидок();
						НоваяСтрокаРасшифровки = ТаблицаБонусов.Добавить();
						НоваяСтрокаРасшифровки.КлючСвязи   					= ТоварСегмента.КлючСвязи;
						НоваяСтрокаРасшифровки.БонуснаяПрограммаЛояльности	= ПараметрыБонуса.БонуснаяПрограммаЛояльности;
						НоваяСтрокаРасшифровки.СкидкаНаценка				= СтрокаДереваСкидок.СкидкаНаценка;
						НоваяСтрокаРасшифровки.ДисконтнаяКарта				= ДисконтнаяКарта;
						НоваяСтрокаРасшифровки.ДатаНачисления				= ПараметрыБонуса.ДатаНачисления;
						НоваяСтрокаРасшифровки.ДатаСписания 				= ПараметрыБонуса.ДатаСписания;
						НоваяСтрокаРасшифровки.Сегмент   					= СтрокаДереваСкидок.СегментНоменклатурыПредоставления;
						НоваяСтрокаРасшифровки.КоличествоБонусныхБаллов = НоваяСтрока.КоличествоБонусов;
						
						НоваяСтрока.ТаблицаБонусов = ТаблицаБонусов.Скопировать();
					КонецЕсли;
						
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтрокаДереваСкидок.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ВнешняяОбработка Тогда
		
		Если СтрокаДереваСкидок.Публикация <> Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена Тогда
			ВнешняяОбработка = СтрокаДереваСкидок.ВнешняяОбработка;
			ХранилищеПараметров = СтрокаДереваСкидок.ПараметрыВнешнейОбработки;
			Если ХранилищеПараметров <> Неопределено Тогда
				ПараметрыВнешнейОбработки = СтрокаДереваСкидок.ПараметрыВнешнейОбработки.Получить();
			КонецЕсли;
			ВнешнийОбъект = СкидкиНаценкиПовтИсп.ОбъектВнешнейОбработки(ВнешняяОбработка);
			
			УстановитьБезопасныйРежим(Истина);
			Попытка
				СтруктураВнешнихТаблиц = ВнешнийОбъект.Рассчитать(СтрокаДереваСкидок, ПараметрыВнешнейОбработки, Параметры);
				ТаблицаСкидок = СтруктураВнешнихТаблиц.ТаблицаСкидок.Скопировать();
				ТаблицаПодарков = СтруктураВнешнихТаблиц.ТаблицаПодарков.Скопировать();
			Исключение
				СтрокаОшибки = НСтр("ru = 'Исключительная ситуация при расчете скидок внешней обработкой:'") + Символы.ПС + ОписаниеОшибки();
				ОбщегоНазначения.СообщитьПользователю(СтрокаОшибки);
			КонецПопытки;
			УстановитьБезопасныйРежим(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	//
	СтрокаДереваСкидок.СтруктураДополнительныхДанных.Вставить("ТаблицаСкидок", ТаблицаСкидок);
	СтрокаДереваСкидок.СтруктураДополнительныхДанных.Вставить("ТаблицаПодарков", ТаблицаПодарков);
	
КонецПроцедуры

Процедура ОбновитьСкидкиРодителя(СтрокаДерева)
	
	Если СтрокаДерева.СтруктураДополнительныхДанных.Свойство("ТаблицаСкидок") Тогда
		Если НЕ СтрокаДерева.Родитель.СтруктураДополнительныхДанных.Свойство("ТаблицаСкидок") Тогда
			ТаблицаСкидок = ПустаяТаблицаСкидок();
			СтрокаДерева.Родитель.СтруктураДополнительныхДанных.Вставить("ТаблицаСкидок", ТаблицаСкидок);
		КонецЕсли;
		КлючСвязи = Неопределено;
		СтрокаРодителя = Неопределено;
		
		Для Каждого СтрокаСкидки Из СтрокаДерева.СтруктураДополнительныхДанных.ТаблицаСкидок Цикл
			Если КлючСвязи <> СтрокаСкидки.КлючСвязи Тогда
				СтрокаРодителя = СтрокаДерева.Родитель.СтруктураДополнительныхДанных.ТаблицаСкидок.Найти(СтрокаСкидки.КлючСвязи, "КлючСвязи");
				Если СтрокаРодителя = Неопределено Тогда
					СтрокаРодителя = СтрокаДерева.Родитель.СтруктураДополнительныхДанных.ТаблицаСкидок.Добавить();
					СтрокаРодителя.КлючСвязи = СтрокаСкидки.КлючСвязи;
					СтрокаРодителя.СкидкаНаценка = СтрокаДерева.Родитель.СкидкаНаценка;
					СтрокаРодителя.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ПустаяСсылка();
					СтрокаРодителя.РеквизитДопУпорядочивания = СтрокаДерева.Родитель.РеквизитДопУпорядочивания;
					СтрокаРодителя.Действует = Истина;
					СтрокаРодителя.ЭтоГруппа = Истина;
					СтрокаРодителя.ТаблицаПодчиненныхСкидок = ПустаяТаблицаСкидок();
				КонецЕсли;
			КонецЕсли;
			
			СтрокаРодителя.Сумма = СтрокаРодителя.Сумма + СтрокаСкидки.Сумма;
			СтрокаРодителя.СуммаВсехСкидок = СтрокаРодителя.СуммаВсехСкидок + СтрокаСкидки.СуммаВсехСкидок;
			СтрокаРодителя.СуммаПодарков = СтрокаРодителя.СуммаПодарков + СтрокаСкидки.СуммаПодарков;
			СтрокаРодителя.СуммаБонусов = СтрокаРодителя.СуммаБонусов + СтрокаСкидки.СуммаБонусов;
			СтрокаРодителя.КоличествоБонусов = СтрокаРодителя.КоличествоБонусов + СтрокаСкидки.КоличествоБонусов;
			
			НоваяПодчиненнаяСтрока = СтрокаРодителя.ТаблицаПодчиненныхСкидок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяПодчиненнаяСтрока, СтрокаСкидки);
			
		КонецЦикла;
		
	Иначе
		ТаблицаСкидок = ПустаяТаблицаСкидок();
		СтрокаДерева.СтруктураДополнительныхДанных.Вставить("ТаблицаСкидок", ТаблицаСкидок);
		СтрокаДерева.СтруктураДополнительныхДанных.Вставить("ТаблицаПодчиненныхСкидок", ТаблицаСкидок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьТоварыРодителя(СтрокаДерева)
	
	Если СтрокаДерева.СтруктураДополнительныхДанных.Свойство("ТаблицаСкидок") Тогда
		Для Каждого СтрокаСкидки Из СтрокаДерева.СтруктураДополнительныхДанных.ТаблицаСкидок Цикл
			СтруктураПоиска = Новый Структура("КлючСвязи", СтрокаСкидки.КлючСвязи);
			СтрокиЧекаРодителя = СтрокаДерева.Родитель.СтруктураДополнительныхДанных.ТаблицаТоваровПоСегментам.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаЧекаРодителя Из СтрокиЧекаРодителя Цикл
				СтрокаЧекаРодителя.Сумма = СтрокаЧекаРодителя.Сумма - СтрокаСкидки.Сумма;
				Если СтрокаДерева.ВариантСовместногоПримененияРодителя = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.ПоследовательноеПрименение Тогда
					СтрокаЧекаРодителя.СуммаВГруппе = СтрокаЧекаРодителя.СуммаВГруппе - СтрокаСкидки.Сумма;
					СтрокаЧекаРодителя.СуммаДляРасчета = СтрокаЧекаРодителя.СуммаДляРасчета - СтрокаСкидки.Сумма;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрименитьСкидкиВГруппе(СтрокаДерева)
	
	ТаблицаСкидок = ПустаяТаблицаСкидок();
	ТаблицаОбщихСкидок = ПустаяТаблицаСкидок();
	ТаблицаНеделимыхСкидок = ПустаяТаблицаСкидок();
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		Если ПодчиненнаяСтрока.СтруктураДополнительныхДанных.Свойство("ТаблицаСкидок") Тогда
			Для Каждого ПодчиненнаяСкидка Из ПодчиненнаяСтрока.СтруктураДополнительныхДанных.ТаблицаСкидок Цикл
				Если ПодчиненнаяСкидка.Неделимая Тогда
					НоваяНеделимаяСтрока = ТаблицаНеделимыхСкидок.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяНеделимаяСтрока, ПодчиненнаяСкидка);
				ИначеЕсли ПодчиненнаяСкидка.КлючСвязи = 0 Тогда
					НоваяОбщаяСтрока = ТаблицаОбщихСкидок.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяОбщаяСтрока, ПодчиненнаяСкидка);
				Иначе
					НоваяСтрока = ТаблицаСкидок.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ПодчиненнаяСкидка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьСтрочные = ТаблицаСкидок.Количество() > 0;
	Если ЕстьСтрочные Тогда
		ОставитьПервуюСкидкуПоКлючу(ТаблицаСкидок, СтрокаДерева);
	КонецЕсли;
	
	ЕстьНеделимые = ТаблицаНеделимыхСкидок.Количество() > 0;
	Если ЕстьНеделимые Тогда
		ОставитьПервуюНеделимуюСкидкуПоКлючу(ТаблицаНеделимыхСкидок, СтрокаДерева);
		Если ЕстьСтрочные Тогда
			ОбъединитьСтрочныеИНеделимые(ТаблицаСкидок, ТаблицаНеделимыхСкидок, СтрокаДерева);
		Иначе
			ТаблицаСкидок = ТаблицаНеделимыхСкидок.Скопировать();
		КонецЕсли;
	КонецЕсли;
	
	ЕстьСтрочные = ТаблицаСкидок.Количество() > 0;
	ЕстьОбщие = ТаблицаОбщихСкидок.Количество() > 0;
	НесколькоОбщих = ТаблицаОбщихСкидок.Количество() > 1;
	
	Если ЕстьОбщие Тогда
		Если ЕстьСтрочные Тогда
			ОставитьПервуюОбщую = Ложь;
			ОбщаяЭтоГруппа = Ложь;
			Если СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение Тогда
				Если НесколькоОбщих Тогда
					ТаблицаОбщихСкидок.Сортировать("РеквизитДопУпорядочивания");
				КонецЕсли;
				МинимальныйРеквизитОбщей = ТаблицаОбщихСкидок[0].РеквизитДопУпорядочивания;
				ОбщаяСкидка = ТаблицаОбщихСкидок[0].СкидкаНаценка;
				ОбщаяЭтоГруппа = ТаблицаОбщихСкидок[0].ЭтоГруппа;
				
				МинимальныйРеквизитСкидок = 100000;
				Для Каждого СтрокаСкидки Из ТаблицаСкидок Цикл
					Если МинимальныйРеквизитСкидок > СтрокаСкидки.РеквизитДопУпорядочивания Тогда
						МинимальныйРеквизитСкидок = СтрокаСкидки.РеквизитДопУпорядочивания;
					КонецЕсли;
				КонецЦикла;
				Если МинимальныйРеквизитСкидок > МинимальныйРеквизитОбщей Тогда
					ОставитьПервуюОбщую = Истина;
				КонецЕсли;
			Иначе
				Если НесколькоОбщих Тогда
					ТаблицаСвернутая = ТаблицаОбщихСкидок.Скопировать();
					ТаблицаСвернутая.Свернуть("СкидкаНаценка, РеквизитДопУпорядочивания, ЭтоГруппа", "СуммаВсехСкидок");
					Если СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Максимум Тогда
						ТаблицаСвернутая.Сортировать("СуммаВсехСкидок Убыв, РеквизитДопУпорядочивания, СкидкаНаценка");
					Иначе // Минимум.
						ТаблицаСвернутая.Сортировать("СуммаВсехСкидок, РеквизитДопУпорядочивания, СкидкаНаценка");
					КонецЕсли;
					СуммаОбщей = ТаблицаСвернутая[0].СуммаВсехСкидок;
					ОбщаяСкидка = ТаблицаСвернутая[0].СкидкаНаценка;
					ОбщаяЭтоГруппа = ТаблицаСвернутая[0].ЭтоГруппа;
				Иначе
					СуммаОбщей = ТаблицаОбщихСкидок[0].СуммаВсехСкидок;
					ОбщаяСкидка = ТаблицаОбщихСкидок[0].СкидкаНаценка;
					ОбщаяЭтоГруппа = ТаблицаОбщихСкидок[0].ЭтоГруппа;
				КонецЕсли;
				
				СуммаСкидок = ТаблицаСкидок.Итог("СуммаВсехСкидок");
				Если СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Максимум
					И СуммаОбщей > СуммаСкидок Тогда
					ОставитьПервуюОбщую = Истина;
				ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Минимум
					И СуммаОбщей < СуммаСкидок Тогда
					ОставитьПервуюОбщую = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ОбщаяЭтоГруппа Тогда
				ТаблицаВременная = ТаблицаСкидок.Скопировать();
			КонецЕсли;
			Если ОставитьПервуюОбщую Тогда
				ТаблицаСкидок.Очистить();
				ОтборПоСкидке = Новый Структура;
				ОтборПоСкидке.Вставить("СкидкаНаценка", ОбщаяСкидка);
				ОбщиеСтроки = ТаблицаОбщихСкидок.НайтиСтроки(ОтборПоСкидке);
				Для Каждого ОбщаяСтрока Из ОбщиеСтроки Цикл
					НоваяСтрока = ТаблицаСкидок.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбщаяСтрока);
				КонецЦикла;
				Если ОбщаяЭтоГруппа Тогда
					ПрочиеСтроки = ТаблицаВременная.НайтиСтроки(ОтборПоСкидке);
					Для Каждого ПрочаяСтрока Из ПрочиеСтроки Цикл
						НоваяСтрока = ТаблицаСкидок.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ПрочаяСтрока);
					КонецЦикла;
				КонецЕсли;
			Иначе
				Если ОбщаяЭтоГруппа Тогда
					ТаблицаВременная.Свернуть("СкидкаНаценка");
					Для Каждого ВременнаяСтрока Из ТаблицаВременная Цикл
						ОтборПоСкидке = Новый Структура;
						ОтборПоСкидке.Вставить("СкидкаНаценка", ВременнаяСтрока.СкидкаНаценка);
						ОбщиеСтроки = ТаблицаОбщихСкидок.НайтиСтроки(ОтборПоСкидке);
						Для Каждого ОбщаяСтрока Из ОбщиеСтроки Цикл
							НоваяСтрока = ТаблицаСкидок.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбщаяСтрока);
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТаблицаСкидок = ТаблицаОбщихСкидок.Скопировать();
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СтрокаДерева.СтруктураДополнительныхДанных.Свойство("ТаблицаСкидок") Тогда
		ПустаяТаблицаСкидок = ПустаяТаблицаСкидок();
		СтрокаДерева.СтруктураДополнительныхДанных.Вставить("ТаблицаСкидок", ПустаяТаблицаСкидок);
	КонецЕсли;
	
	Для Каждого СтрокаСкидки Из ТаблицаСкидок Цикл
		
		НоваяСтрока = СтрокаДерева.СтруктураДополнительныхДанных.ТаблицаСкидок.Добавить();
		НоваяСтрока.КлючСвязи = СтрокаСкидки.КлючСвязи;
		НоваяСтрока.СкидкаНаценка = СтрокаДерева.СкидкаНаценка;
		НоваяСтрока.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ПустаяСсылка();
		НоваяСтрока.РеквизитДопУпорядочивания = СтрокаДерева.РеквизитДопУпорядочивания;
		НоваяСтрока.Действует = Истина;
		НоваяСтрока.ЭтоГруппа = Истина;
		НоваяСтрока.ТаблицаПодчиненныхСкидок = ПустаяТаблицаСкидок();
		
		НоваяСтрока.Сумма = СтрокаСкидки.Сумма;
		НоваяСтрока.СуммаВсехСкидок = СтрокаСкидки.СуммаВсехСкидок;
		НоваяСтрока.СуммаПодарков = СтрокаСкидки.СуммаПодарков;
		НоваяСтрока.СуммаБонусов = СтрокаСкидки.СуммаБонусов;
		НоваяСтрока.КоличествоБонусов = СтрокаСкидки.КоличествоБонусов;
		
		НоваяПодчиненнаяСтрока = НоваяСтрока.ТаблицаПодчиненныхСкидок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяПодчиненнаяСтрока, СтрокаСкидки);
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ОставитьПервуюСкидкуПоКлючу(ТаблицаСкидок, СтрокаДерева)
	
	Если СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение Тогда
		ТаблицаСкидок.Сортировать("КлючСвязи, РеквизитДопУпорядочивания");
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Максимум Тогда
		ТаблицаСкидок.Сортировать("КлючСвязи, СуммаВсехСкидок Убыв, РеквизитДопУпорядочивания");
	Иначе
		ТаблицаСкидок.Сортировать("КлючСвязи, СуммаВсехСкидок, РеквизитДопУпорядочивания");
	КонецЕсли;
			
	МассивУдаляемыхСтрок = Новый Массив;
	ПоследнийКлюч = Неопределено;
	Для Каждого СтрокаСкидки Из ТаблицаСкидок Цикл
		Если ПоследнийКлюч = СтрокаСкидки.КлючСвязи Тогда
			МассивУдаляемыхСтрок.Добавить(СтрокаСкидки);
		Иначе
			ПоследнийКлюч = СтрокаСкидки.КлючСвязи;
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
		ТаблицаСкидок.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Возврат;
	
КонецПроцедуры

Процедура ОставитьПервуюНеделимуюСкидкуПоКлючу(ТаблицаНеделимыхСкидок, СтрокаДерева)
	
	ТаблицаТолькоНеделимых = ТаблицаНеделимыхСкидок.Скопировать();
	ТаблицаТолькоНеделимых.Свернуть("СкидкаНаценка");
	Если ТаблицаТолькоНеделимых.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого НеделимаяСтрока Из ТаблицаТолькоНеделимых Цикл
		ТаблицаВременная = ПустаяТаблицаСкидок();
		ОтборПоСкидке = Новый Структура;
		ОтборПоСкидке.Вставить("СкидкаНаценка", НеделимаяСтрока.СкидкаНаценка);
		СтрокиСкидки = ТаблицаНеделимыхСкидок.НайтиСтроки(ОтборПоСкидке);
		Если СтрокиСкидки.Количество() > 0 Тогда
			// Выбираем все ключи связи текущей скидки.
			Для Каждого СтрокаСкидки Из СтрокиСкидки Цикл
				ОтборПоКлючу = Новый Структура;
				ОтборПоКлючу.Вставить("КлючСвязи", СтрокаСкидки.КлючСвязи);
				СтрокиПоКлючу = ТаблицаНеделимыхСкидок.НайтиСтроки(ОтборПоКлючу);
				// Находим все скидки по всем ключам основной скидки.
				Для Каждого СтрокаПоКлючу Из СтрокиПоКлючу Цикл
					ВременнаяСтрока = ТаблицаВременная.Найти(СтрокаПоКлючу.СкидкаНаценка, "СкидкаНаценка");
					Если ВременнаяСтрока = Неопределено Тогда
						ВременнаяСтрока = ТаблицаВременная.Добавить();
						ВременнаяСтрока.СкидкаНаценка = СтрокаПоКлючу.СкидкаНаценка;
						ВременнаяСтрока.РеквизитДопУпорядочивания = СтрокаПоКлючу.РеквизитДопУпорядочивания;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Если ТаблицаВременная.Количество() > 1 Тогда
				// Если по всем ключам основной скидки содержится больше одной скидки,
				// значит - есть пересекающиеся с ней неделимые скидки.
				Если СтрокаДерева.ВариантСовместногоПрименения <> Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение Тогда
					// Но сравнение идет по сумме всех этих скидок по всем строкам.
					Для Каждого ВременнаяСтрока Из ТаблицаВременная Цикл
						ОтборПоСкидке = Новый Структура;
						ОтборПоСкидке.Вставить("СкидкаНаценка", ВременнаяСтрока.СкидкаНаценка);
						СтрокиЗаполнения = ТаблицаНеделимыхСкидок.НайтиСтроки(ОтборПоСкидке);
						Для Каждого СтрокаЗаполнения Из СтрокиЗаполнения Цикл
							ВременнаяСтрока.СуммаВсехСкидок = ВременнаяСтрока.СуммаВсехСкидок + СтрокаЗаполнения.СуммаВсехСкидок;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
			
				Если СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение Тогда
					ТаблицаВременная.Сортировать("РеквизитДопУпорядочивания");
				ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Максимум Тогда
					ТаблицаВременная.Сортировать("СуммаВсехСкидок Убыв, РеквизитДопУпорядочивания");
				Иначе
					ТаблицаВременная.Сортировать("СуммаВсехСкидок, РеквизитДопУпорядочивания");
				КонецЕсли;
				Счетчик = 0;
				Для Каждого ВременнаяСтрока Из ТаблицаВременная Цикл
					Если Счетчик > 0 Тогда
						ОтборПоСкидке = Новый Структура;
						ОтборПоСкидке.Вставить("СкидкаНаценка", ВременнаяСтрока.СкидкаНаценка);
						СтрокиКУдалению = ТаблицаНеделимыхСкидок.НайтиСтроки(ОтборПоСкидке);
						Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
							ТаблицаНеделимыхСкидок.Удалить(СтрокаКУдалению);
						КонецЦикла;
					КонецЕсли;
					Счетчик = Счетчик + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбъединитьСтрочныеИНеделимые(ТаблицаСкидок, ТаблицаНеделимыхСкидок, СтрокаДерева)
	
	ТаблицаТолькоНеделимых = ТаблицаНеделимыхСкидок.Скопировать();
	ТаблицаТолькоНеделимых.Свернуть("СкидкаНаценка", "СуммаВсехСкидок");
	
	Для Каждого НеделимаяСтрока Из ТаблицаТолькоНеделимых Цикл
		ОтборПоСкидке = Новый Структура;
		ОтборПоСкидке.Вставить("СкидкаНаценка", НеделимаяСтрока.СкидкаНаценка);
		СтрокиСкидки = ТаблицаНеделимыхСкидок.НайтиСтроки(ОтборПоСкидке);
		Если СтрокиСкидки.Количество() > 0 Тогда
			// Выбираем все ключи связи текущей скидки.
			МассивСтрочных = Новый Массив;
			МинимальныйРеквизитСтрочных = 100000;
			СуммаВсехСтрочныхСкидок = 0;
			Для Каждого СтрокаСкидки Из СтрокиСкидки Цикл
				ОтборПоКлючу = Новый Структура;
				ОтборПоКлючу.Вставить("КлючСвязи", СтрокаСкидки.КлючСвязи);
				СтрокиПоКлючу = ТаблицаСкидок.НайтиСтроки(ОтборПоКлючу);
				// Находим все строчные скидки по всем ключам основной скидки.
				// И обновляем общую статистику по всем строкам.
				Для Каждого СтрокаПоКлючу Из СтрокиПоКлючу Цикл
					МассивСтрочных.Добавить(СтрокаПоКлючу);
					Если МинимальныйРеквизитСтрочных > СтрокаПоКлючу.РеквизитДопУпорядочивания Тогда
						МинимальныйРеквизитСтрочных = СтрокаПоКлючу.РеквизитДопУпорядочивания;
					КонецЕсли;
					СуммаВсехСтрочныхСкидок = СуммаВсехСтрочныхСкидок + СтрокаПоКлючу.СуммаВсехСкидок;
				КонецЦикла;
			КонецЦикла;
			Если МассивСтрочных.Количество() > 0 Тогда
				ЗаменитьСтрочныеНеделимой = Ложь;
				Если СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение Тогда
					Если МинимальныйРеквизитСтрочных > СтрокиСкидки[0].РеквизитДопУпорядочивания Тогда
						ЗаменитьСтрочныеНеделимой = Истина;
					КонецЕсли;
				ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Максимум Тогда
					Если НеделимаяСтрока.СуммаВсехСкидок > СуммаВсехСтрочныхСкидок Тогда
						ЗаменитьСтрочныеНеделимой = Истина;
					КонецЕсли;
				Иначе // Минимум
					Если НеделимаяСтрока.СуммаВсехСкидок < СуммаВсехСтрочныхСкидок Тогда
						ЗаменитьСтрочныеНеделимой = Истина;
					КонецЕсли;
				КонецЕсли;
				Если ЗаменитьСтрочныеНеделимой Тогда
					Для Каждого СтрочнаяСтрока Из МассивСтрочных Цикл
						ТаблицаСкидок.Удалить(СтрочнаяСтрока);
					КонецЦикла;
					Для Каждого СтрокаСкидки Из СтрокиСкидки Цикл
						НоваяСтрока = ТаблицаСкидок.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСкидки);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОпределитьПериодНакопительногоУсловия(Условие, ТекущаяДата, ДатаНачала, ДатаОкончания)
	
	Если Условие.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.ПрошлыйПериод Тогда
		
		Если Условие.ПериодНакопления = Перечисления.Периодичность.Год Тогда
			ДатаНачала    = НачалоГода(НачалоГода(ТекущаяДата) - 1);
			ДатаОкончания = НачалоГода(ТекущаяДата) - 1;
		ИначеЕсли Условие.ПериодНакопления = Перечисления.Периодичность.Квартал Тогда
			ДатаНачала    = НачалоКвартала(НачалоКвартала(ТекущаяДата) - 1);
			ДатаОкончания = НачалоКвартала(ТекущаяДата) - 1;
		ИначеЕсли Условие.ПериодНакопления = Перечисления.Периодичность.Месяц Тогда
			ДатаНачала    = НачалоМесяца(НачалоМесяца(ТекущаяДата) - 1);
			ДатаОкончания = НачалоМесяца(ТекущаяДата) - 1;
		ИначеЕсли Условие.ПериодНакопления = Перечисления.Периодичность.Неделя Тогда
			ДатаНачала    = НачалоНедели(НачалоНедели(ТекущаяДата) - 1);
			ДатаОкончания = НачалоНедели(ТекущаяДата) - 1;
		ИначеЕсли Условие.ПериодНакопления = Перечисления.Периодичность.День Тогда
			ДатаНачала    = НачалоДня(НачалоДня(ТекущаяДата) - 1);
			ДатаОкончания = НачалоДня(ТекущаяДата) - 1;
		КонецЕсли;
		
	ИначеЕсли Условие.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.ПрошлыйСкользящийПериод Тогда
		
		Если Условие.ПериодНакопления = Перечисления.Периодичность.Год Тогда
			ДатаНачала    = ТекущаяДата - 365*24*60*60;
			ДатаОкончания = ТекущаяДата;
		ИначеЕсли Условие.ПериодНакопления = Перечисления.Периодичность.Полугодие Тогда
			ДатаНачала    = ТекущаяДата - 180*24*60*60;
			ДатаОкончания = ТекущаяДата;
		ИначеЕсли Условие.ПериодНакопления = Перечисления.Периодичность.Квартал Тогда
			ДатаНачала    = ТекущаяДата - 90*24*60*60;
			ДатаОкончания = ТекущаяДата;
		ИначеЕсли Условие.ПериодНакопления = Перечисления.Периодичность.Месяц Тогда
			ДатаНачала    = ТекущаяДата - 30*24*60*60;
			ДатаОкончания = ТекущаяДата;
		ИначеЕсли Условие.ПериодНакопления = Перечисления.Периодичность.Декада Тогда
			ДатаНачала    = ТекущаяДата - 10*24*60*60;
			ДатаОкончания = ТекущаяДата;
		ИначеЕсли Условие.ПериодНакопления = Перечисления.Периодичность.Неделя Тогда
			ДатаНачала    = ТекущаяДата - 7*24*60*60;
			ДатаОкончания = ТекущаяДата;
		ИначеЕсли Условие.ПериодНакопления = Перечисления.Периодичность.День Тогда
			ДатаНачала    = ТекущаяДата - 24*60*60;
			ДатаОкончания = ТекущаяДата;
		КонецЕсли;
		
	ИначеЕсли Условие.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.СНачалаТекущегоПериода Тогда
		
		Если Условие.ПериодНакопления = Перечисления.Периодичность.Год Тогда
			ДатаНачала    = НачалоГода(ТекущаяДата);
			ДатаОкончания = ТекущаяДата;
		ИначеЕсли Условие.ПериодНакопления = Перечисления.Периодичность.Квартал Тогда
			ДатаНачала    = НачалоКвартала(ТекущаяДата);
			ДатаОкончания = ТекущаяДата;
		ИначеЕсли Условие.ПериодНакопления = Перечисления.Периодичность.Месяц Тогда
			ДатаНачала    = НачалоМесяца(ТекущаяДата);
			ДатаОкончания = ТекущаяДата;
		ИначеЕсли Условие.ПериодНакопления = Перечисления.Периодичность.Неделя Тогда
			ДатаНачала    = НачалоНедели(ТекущаяДата);
			ДатаОкончания = ТекущаяДата;
		ИначеЕсли Условие.ПериодНакопления = Перечисления.Периодичность.День Тогда
			ДатаНачала    = НачалоДня(ТекущаяДата);
			ДатаОкончания = ТекущаяДата;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ОграничитьСкидкуПоГруппе(СтрокаДерева, ПараметрыРасчета)
	
	Если СтрокаДерева.ОграничениеРазмераПодчиненныхСкидок Тогда
		
		ОбщаяСуммаЧека = 0;
		СпособОграничения = СтрокаДерева.СпособОграничения;
		ЗначениеОграничения = СтрокаДерева.ЗначениеОграничения;
		
		Для Каждого СтрокаТовара Из СтрокаДерева.СтруктураДополнительныхДанных.ТаблицаТоваровПоСегментам Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТовара.Сегмент) Тогда
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("КлючСвязи", СтрокаТовара.КлючСвязи);
				Если СтрокаДерева.СтруктураДополнительныхДанных.Свойство("ТаблицаСкидок") Тогда
					СтрокиСкидок = СтрокаДерева.СтруктураДополнительныхДанных.ТаблицаСкидок.НайтиСтроки(СтруктураПоиска);
					Если СтрокиСкидок.Количество() > 0 Тогда
						ОбщаяСуммаЧека = ОбщаяСуммаЧека + СтрокаТовара.СуммаБезСкидки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ОбщаяСуммаЧека = 0 ИЛИ ЗначениеОграничения = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого СтрокаТовара Из СтрокаДерева.СтруктураДополнительныхДанных.ТаблицаТоваровПоСегментам Цикл
			
			Если СпособОграничения = Перечисления.СпособыПредоставленияСкидокНаценок.Процент Тогда
				МаксимальнаяСкидкаСтроки = Окр(СтрокаТовара.СуммаБезСкидки * ЗначениеОграничения / 100, 2);
			Иначе
				МаксимальнаяСкидкаСтроки = Окр(ЗначениеОграничения * СтрокаТовара.СуммаБезСкидки / ОбщаяСуммаЧека, 2);
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("КлючСвязи", СтрокаТовара.КлючСвязи);
			Если СтрокаДерева.СтруктураДополнительныхДанных.Свойство("ТаблицаСкидок") Тогда
				СтрокиСкидок = СтрокаДерева.СтруктураДополнительныхДанных.ТаблицаСкидок.НайтиСтроки(СтруктураПоиска);
				
				Если СтрокиСкидок.Количество() > 0 Тогда
					РаспределитьПревышение(СтрокиСкидок, МаксимальнаяСкидкаСтроки);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьМинимальныеЦеныПослеРасчетаСкидок(ИтоговаяТаблицаСкидок, ДеревоСкидок, ПараметрыРасчета)
	
	Если ИтоговаяТаблицаСкидок.Количество() > 0 Тогда
		
		Для Каждого СтрокаТовара Из ДеревоСкидок.Строки[0].СтруктураДополнительныхДанных.ТаблицаТоваровПоСегментам Цикл
			
			Если ЗначениеЗаполнено(СтрокаТовара.Сегмент) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПараметрыРасчета.ВидМинимальныхЦенПродажи) Тогда
				МинимальнаяЦена = ЗапасыСервер.ЦенаПоВидуЦен(
									ПараметрыРасчета.ВидМинимальныхЦенПродажи,
									ПараметрыРасчета.ТекущаяДата,
									СтрокаТовара.Номенклатура,
									СтрокаТовара.Характеристика,
									СтрокаТовара.Упаковка);
			Иначе
				МинимальнаяЦена = 0;
			КонецЕсли;
									
			МинимальнаяСумма = СтрокаТовара.КоличествоУпаковок * МинимальнаяЦена;
			МаксимальнаяСкидкаСтроки = СтрокаТовара.СуммаБезСкидки - МинимальнаяСумма;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("КлючСвязи", СтрокаТовара.КлючСвязи);
			СтрокиСкидок = ИтоговаяТаблицаСкидок.НайтиСтроки(СтруктураПоиска);
			
			Если СтрокиСкидок.Количество() > 0 Тогда
				РаспределитьПревышение(СтрокиСкидок, МаксимальнаяСкидкаСтроки);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспределитьПревышение(СтрокиСкидок, МаксимальнаяСкидкаСтроки)
	
	СуммаСкидкиПоСтроке = 0;
	ПревышенияНет = Истина;
	Для Каждого СтрокаСкидки Из СтрокиСкидок Цикл
		
		Если СтрокаСкидки.Сумма <= 0 Тогда
			Продолжить;
		КонецЕсли;
		Если ПревышенияНет Тогда
			СуммаСкидкиПоСтроке = СуммаСкидкиПоСтроке + СтрокаСкидки.Сумма;
			РазмерПревышения = СуммаСкидкиПоСтроке - МаксимальнаяСкидкаСтроки;
			Если РазмерПревышения >= 0 Тогда
				ПревышенияНет = Ложь;
				СтрокаСкидки.Сумма = СтрокаСкидки.Сумма - РазмерПревышения;
				СтрокаСкидки.СуммаВсехСкидок = СтрокаСкидки.СуммаВсехСкидок - РазмерПревышения;
				СтрокаСкидки.ОграниченаМинимальнойЦеной = Истина;
				РаспределитьПревышение(СтрокаСкидки.ТаблицаПодчиненныхСкидок, СтрокаСкидки.Сумма);
			КонецЕсли;
		Иначе
			СтрокаСкидки.Сумма = 0;
			СтрокаСкидки.СуммаВсехСкидок = 0;
			СтрокаСкидки.ОграниченаМинимальнойЦеной = Истина;
			РаспределитьПревышение(СтрокаСкидки.ТаблицаПодчиненныхСкидок, 0);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьОтсутствиеПодарков(ТаблицаПодарков, ТаблицаСообщений, ПараметрыРасчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаПодарков.Склад,
	|	ТаблицаПодарков.Номенклатура,
	|	ТаблицаПодарков.Характеристика,
	|	ТаблицаПодарков.Упаковка,
	|	ТаблицаПодарков.КоличествоУпаковок,
	|	ТаблицаПодарков.Количество
	|ПОМЕСТИТЬ ТаблицаПодарковВременная
	|ИЗ
	|	&ТаблицаПодарков КАК ТаблицаПодарков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПодарков.Склад,
	|	ТаблицаПодарков.Номенклатура,
	|	ТаблицаПодарков.Характеристика,
	|	ТаблицаПодарков.Упаковка,
	|	СУММА(ТаблицаПодарков.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ТаблицаПодарков.Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаПодарков
	|ИЗ
	|	ТаблицаПодарковВременная КАК ТаблицаПодарков
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПодарков.Склад,
	|	ТаблицаПодарков.Номенклатура,
	|	ТаблицаПодарков.Характеристика,
	|	ТаблицаПодарков.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПодарков.Склад,
	|	ТаблицаПодарков.Номенклатура,
	|	ТаблицаПодарков.Характеристика,
	|	ТаблицаПодарков.Упаковка,
	|	ЕСТЬNULL(ТаблицаПодарков.Упаковка.Коэффициент, 0) КАК Коэффициент,
	|	ТаблицаПодарков.КоличествоУпаковок КАК КоличествоУпаковокНеобходимо,
	|	ЕСТЬNULL(ОстаткиТоваров.КоличествоОстаток, 0) КАК КоличествоОстаток
	|ИЗ
	|	ТаблицаПодарков КАК ТаблицаПодарков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				&ТекущаяДата,
	|				Склад В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							Т.Склад
	|						ИЗ
	|							ТаблицаПодарков КАК Т)
	|					И Номенклатура В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							Т.Номенклатура
	|						ИЗ
	|							ТаблицаПодарков КАК Т)) КАК ОстаткиТоваров
	|		ПО ТаблицаПодарков.Номенклатура = ОстаткиТоваров.Номенклатура
	|			И ТаблицаПодарков.Характеристика = ОстаткиТоваров.Характеристика
	|			И ТаблицаПодарков.Склад = ОстаткиТоваров.Склад
	|ГДЕ
	|	ТаблицаПодарков.Количество > ЕСТЬNULL(ОстаткиТоваров.КоличествоОстаток, 0)
	|";
	Запрос.УстановитьПараметр("ТаблицаПодарков", ТаблицаПодарков);
	Запрос.УстановитьПараметр("ТекущаяДата", ПараметрыРасчета.ТекущаяДата);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КоличествоОстаток = Макс(Выборка.КоличествоОстаток, 0);
		КоличествоУпаковок = КоличествоОстаток * Макс(Выборка.Коэффициент, 0);
		КоличествоУпаковокНедостает = Выборка.КоличествоУпаковокНеобходимо;
		
		СтрокаТаблицыСообщений = ТаблицаСообщений.Добавить();
		ПредставлениеНоменклатуры = ОбщегоНазначенияРТ.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика);
		Если ЗначениеЗаполнено(Выборка.Упаковка) Тогда
			УпаковкаПодарка = Выборка.Упаковка;
		Иначе
			УпаковкаПодарка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Номенклатура, "ЕдиницаИзмерения");
		КонецЕсли;
		СтрокаСообщенияОбОтсутствии = НСтр("ru = 'Невозможно выдать подарок ""%1"" в количестве %2 %3. Превышен остаток на складе.'");
		СтрокаСообщенияОбОтсутствии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОтсутствии,
																								Выборка.Номенклатура,
																								КоличествоУпаковокНедостает,
																								УпаковкаПодарка);
		СтрокаТаблицыСообщений.ТекстСообщения = СтрокаСообщенияОбОтсутствии;
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Склад", Выборка.Склад);
		СтруктураПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", Выборка.Характеристика);
		УдаляемыеСтроки = ТаблицаПодарков.НайтиСтроки(СтруктураПоиска);
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			ТаблицаПодарков.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
	
КонецПроцедуры

Функция РассчитатьСуммуНДС(СтрокаТЧ, ЦенаВключаетНДС = Истина) Экспорт
	
	ПроцентНДС = СтрокаТЧ.СтавкаНДС.Ставка / 100;
	
	ФлагНДСПострочно = ОбработкаТабличнойЧастиТоварыКлиентСервер.НДСПострочно(СтрокаТЧ);
	
	Если ФлагНДСПострочно Тогда
		СуммаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаНДСПоСтрочно(СтрокаТЧ.Сумма, СтрокаТЧ.Количество, ПроцентНДС, ЦенаВключаетНДС);
	Иначе
		СуммаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаНДС(СтрокаТЧ.Сумма, ПроцентНДС, ЦенаВключаетНДС);
	КонецЕсли;
	
	Возврат СуммаНДС;
	
КонецФункции // РассчитатьСуммуНДС()

Функция СкладПродажи(СтрокаСкидки, Параметры)

	ТоварнаяГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаСкидки.Номенклатура, "ТоварнаяГруппа");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаспределениеНоменклатуры.СкладПродажи КАК Склад,
	|	ВЫБОР
	|		КОГДА РаспределениеНоменклатуры.РабочееМесто = &РабочееМесто
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ПолеУпорядочивания
	|ИЗ
	|	РегистрСведений.РаспределениеНоменклатуры КАК РаспределениеНоменклатуры
	|ГДЕ
	|	РаспределениеНоменклатуры.Магазин = &Магазин
	|	И РаспределениеНоменклатуры.ТоварнаяГруппа = &ТоварнаяГруппа
	|	И (РаспределениеНоменклатуры.РабочееМесто = &РабочееМесто
	|			ИЛИ РаспределениеНоменклатуры.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка))
	|	И РаспределениеНоменклатуры.СкладПродажи <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПолеУпорядочивания");
	
	Запрос.УстановитьПараметр("Магазин", 		Параметры.Магазин);
	Запрос.УстановитьПараметр("РабочееМесто", 	Параметры.РабочееМесто);
	Запрос.УстановитьПараметр("ТоварнаяГруппа", ТоварнаяГруппа);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Склад = Выборка.Склад;
	Иначе
		Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Магазин, "СкладПродажи");
	КонецЕсли;
	
	Возврат Склад;
	
КонецФункции

Процедура ВыбратьПодчиненныеСкидки(СтрокаСкидки, ИтоговаяТаблицаСкидок, ИтоговаяТаблицаПодарков, ИтоговаяТаблицаБонусов, ИтоговаяТаблицаСообщений)
	
	Если СтрокаСкидки.ЭтоГруппа Тогда
		Для Каждого ПодчиненнаяСтрока Из СтрокаСкидки.ТаблицаПодчиненныхСкидок Цикл
			ВыбратьПодчиненныеСкидки(ПодчиненнаяСтрока, ИтоговаяТаблицаСкидок, ИтоговаяТаблицаПодарков, ИтоговаяТаблицаБонусов, ИтоговаяТаблицаСообщений);
		КонецЦикла;
	Иначе
		Если СтрокаСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.КоличествоБонусныхБаллов
			ИЛИ СтрокаСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыВВидеБонусныхБаллов Тогда
			Для Каждого СтрокаБонуса Из СтрокаСкидки.ТаблицаБонусов Цикл
				НоваяСтрока = ИтоговаяТаблицаБонусов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаБонуса);
			КонецЦикла;
		ИначеЕсли СтрокаСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Подарок Тогда
			Для Каждого СтрокаПодарка Из СтрокаСкидки.ТаблицаПодарков Цикл
				НоваяСтрока = ИтоговаяТаблицаПодарков.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПодарка);
			КонецЦикла;
		ИначеЕсли СтрокаСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сообщение Тогда
			НоваяСтрока = ИтоговаяТаблицаСообщений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСкидки);
		Иначе
			НоваяСтрока = ИтоговаяТаблицаСкидок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСкидки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
