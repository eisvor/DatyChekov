///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Процедура заполняет параметры для закрытия смены на ККТ.
//
// Параметры:
//  ПараметрыВыемки - Структура - см. РозничныеПродажиКлиентСервер.ПараметрыВыемкиИзКассы().
//
Процедура ИнициализироватьПараметрыВыемкиИзКассы(ПараметрыВыемки) Экспорт
	
	РозничныеПродажиСервер.ИнициализироватьПараметрыВыемкиИзКассы(ПараметрыВыемки);
	
КонецПроцедуры

// Проверяет является ли вид оплаты безналичной формой оплаты.
//
//Параметры:
//  ВидОплаты - СправочникСсылка.ВидыОплат - вид оплаты.
//
// ВозвращаемоеЗначение:
//  Булево - Истина, если переданный вид оплаты является безналичной формой оплаты.
//
Функция ЭтоОплатаПлатежнойКартой(ВидОплаты) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ЭтоОплатаПлатежнойКартой(ВидОплаты);
	
КонецФункции

// Возвращает вид оплаты платежной картой при продаже
//
// Параметры:
//  ЧекПродажи - ДокументСсылка.ЧекККМ - чек ККМ продажи.
//
// ВозвращаемоеЗначение:
//  ВидОплаты - СправочникСсылка.ВидыОплат - вид оплаты платежной карты, который был учтен при продаже.
//
Функция ВидОплатыПриПродаже(ЧекПродажи) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ВидОплатыПриПродаже(ЧекПродажи);
	
КонецФункции

// Определяет возможность внесения денег.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ.
//  Организация - СправочникСсылка.Организации.
//
// Возвращаемое значение:
//  Булево - Ложь, если документы для внесения отсутствуют.
//
Функция ВозможностьВнесенияДенег(КассаККМ, Организация) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ВозможностьВнесенияДенег(КассаККМ, Организация);
	
КонецФункции

// Проверяет возможность выемки из КассыККМ на требуемую сумму.
//
// Параметры:
//  ПараметрыВыполнения - Структура.
//  ПараметрыИнформации - Структура.
//  ИспользоватьАгентскиеПлатежиИРазделениеВыручки - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если есть возможность произвести выемку ДС.
//
Функция ВозможностьВыемкиДС(ПараметрыВыполнения, ПараметрыИнформации, ИспользоватьАгентскиеПлатежиИРазделениеВыручки = Ложь) Экспорт
	
	Возврат РозничныеПродажиСервер.ВозможностьОперацииВыемкиДенежныхСредств(
		ПараметрыВыполнения,
		ПараметрыИнформации,
		ИспользоватьАгентскиеПлатежиИРазделениеВыручки);
	
КонецФункции

// Получает цену на товар.
//
//Параметры:
//  Магазин - СправочникСсылка.Магазины - Магазин, для которого нужно получить цену.
//  ДанныеТовара - Структура - структура с параметрами товара, для которых нужно получить цену.
//
// ВозвращаемоеЗначение:
//  Цена - Число - актцальное значения цены.
//
Функция ЦенаПродажи(Магазин, ДанныеТовара) Экспорт
	
	Возврат ОбщегоНазначенияРМКРТ.ЦенаПродажи(Магазин, ДанныеТовара);
	
КонецФункции

// Дополняет данные выбора товара. Актуально для вызова формы подбора прикладной конфигурации в новом РМК.
//
// Параметры:
//  ДанныеВыбора - Структура - См. ОбщегоНазначенияРМКРТКлиент.ОсновныеПоляФормыВыбораТоваровРМК
//  Магазин - СправочникСсылка.Магазины - текущий магазин
//
Процедура ДополнитьДанныеВыбора(ДанныеВыбора, Магазин) Экспорт
	ОбщегоНазначенияРМКРТ.ДополнитьДанныеВыбора(ДанныеВыбора, Магазин);
КонецПроцедуры

// Возвращает значение ФО ИспользоватьНовыйРМК.
// Значение по умолчанию Истина.
//
// ВозвращаемоеЗначение:
//  ИспользоватьНовыйРМК - булево - признак использования нового РМК.
//
Функция ВключеноИспользованиеНовогоРМК() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьНовоеРМК");
	
КонецФункции

// Получает вид оплаты кредитом если существует только один такой вид.
//
// ВозвращаемоеЗначение:
//  ВидОплаты - СправочникСсылка.ВидыОплат - вид оплаты банковским кредитом.
//
Функция ПолучитьВидОплатыКредитом() Экспорт
	
	ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.БанковскийКредит");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ВидыОплатЧекаККМ.Ссылка
	|ИЗ
	|	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
	|ГДЕ
	|	НЕ ВидыОплатЧекаККМ.ПометкаУдаления
	|	И ВидыОплатЧекаККМ.ТипОплаты = &ТипОплаты";
	Запрос.УстановитьПараметр("ТипОплаты", ТипОплаты);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Заполняет признак использования автоматических скидок/бонусных программ
// 
// Параметры:
//  Результат - Булево - признак использования автоматических скидок/бонусных программ
//
Процедура ЗаполнитьПризнакИспользованияАвтоматическихСкидок(Результат) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Константы.ИспользоватьАвтоматическиеСкидкиВПродажах.Получить()
					ИЛИ Константы.ИспользоватьБонусныеПрограммыЛояльности.Получить();
	
КонецПроцедуры

// Разблокирует объект сервера лояльности (например - подарочный сертификат)
// 
// Параметры:
//  ТипОбъекта - Строка - описание, какой именно объект требуется разблокировать
//                        (например: clientbonuses- разблокировать бонусы, giftcard - разблокировать подарочный сертификат)
//  ПараметрыВыемки - Структура - параметры для разблокировки объекта сервиса лояльности.
//    * НомерСертификата - Строка - номер подарочного сертификата.
//    * ДисконтнаяКарта - ОпределяемыйТип.ДисконтнаяКартаРМК - дисконтная карта, бонусы которой будут разблокированы.
//
Процедура РазблокироватьОбъектСервераЛояльности(ТипОбъекта, ПараметрыОбъекта) Экспорт
	
	Если ТипОбъекта = "clientbonuses" Тогда
		СерверЛояльностиПоставщикДанных.РазблокироватьБонусы(ПараметрыОбъекта.ДисконтнаяКарта);
	КонецЕсли;
	
	Если ТипОбъекта = "giftcard" Тогда
		ДанныеСертификата = Неопределено;
		СерверЛояльностиПоставщикДанныхПереопределяемый.НайтиПодарочныйСертификат(ПараметрыОбъекта, ДанныеСертификата);
		СерверЛояльностиПоставщикДанных.РазблокироватьПодарочныйСертификат(ДанныеСертификата);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

