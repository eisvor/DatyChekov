
#Область ПрограммныйИнтерфейс

// Если после получения и записи классификатора надо что-то сделать, то это можно сделать в этой процедуре.
// Классификатор уже записан в базу данных, поэтому можно менять связанные справочники и регистры сведений.
// Для обеспечения целостности приходящих с серверов 1С данных, обработчика ПередЗаписью нет,
//  т.е. манипулировать отменой записи нельзя. Также отсутствует параметр Отказ.
// Шаблон для переопределения:
// Если ТипЗнч(КлассификаторСсылка) = Тип("СправочникСсылка.ЗначенияКатегорийНовостей") Тогда
//	Если НЕ КлассификаторСсылка.Пустая() Тогда
//		//
//	КонецЕсли;
// ИначеЕсли ТипЗнч(КлассификаторСсылка) = Тип("СправочникСсылка.ЛентыНовостей") Тогда
//	Если НЕ КлассификаторСсылка.Пустая() Тогда
//		//
//	КонецЕсли;
// ИначеЕсли ТипЗнч(КлассификаторСсылка) = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей") Тогда
//	Если НЕ КлассификаторСсылка.Пустая() Тогда
//		//
//	КонецЕсли;
// КонецЕсли;
//
// Параметры:
//  КлассификаторСсылка - СправочникСсылка - Классификатор, который был только что записан.
//
//@skip-warning
Процедура ДополнительноОбработатьКлассификаторПослеПолученияПослеЗаписи(КлассификаторСсылка) Экспорт
	
	Если ТипЗнч(КлассификаторСсылка) = Тип("СправочникСсылка.ЛентыНовостей") Тогда
		Если НЕ КлассификаторСсылка.Пустая() Тогда
			Запрос = Новый Запрос;
			ТекстЗапроса =  "ВЫБРАТЬ
			|	ЛентыНовостейДоступныеКатегорииНовостей.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ЛентыНовостей.ДоступныеКатегорииНовостей КАК ЛентыНовостейДоступныеКатегорииНовостей
			|ГДЕ
			|	ЛентыНовостейДоступныеКатегорииНовостей.КатегорияНовостей = &КатегорияНовостей
			|	И ЛентыНовостейДоступныеКатегорииНовостей.Ссылка = &Ссылка
			|";
			
			Запрос.УстановитьПараметр("Ссылка", КлассификаторСсылка);
			Запрос.УстановитьПараметр("КатегорияНовостей", ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("UserProfile"));
			Запрос.Текст = ТекстЗапроса;
			
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				ОбщегоНазначенияРТ.ОбновитьОтборыПоЛентамНовостейПользовательские(КлассификаторСсылка);
			КонецЕсли;
	    КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет значение категории, если для нее установлено свойство "ЗаполняетсяАвтоматически".
//
// Параметры:
//  Категория - ПланВидовХарактеристикСсылка.КатегорииНовостей, Строка - категория новостей или ее код;
//  Значение  - Произвольный - значение, которое можно изменить.
//
Процедура ЗначениеПредопределеннойКатегории(Категория, Значение) Экспорт
	
	НовыйРезультат = Значение;
	
	Если ТипЗнч(Категория) = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей") Тогда
		КатегорияКод = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Категория, "Код"));
	ИначеЕсли ТипЗнч(Категория) = Тип("Строка") Тогда
		КатегорияКод = СокрЛП(Категория);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ВРег(КатегорияКод) = ВРег("ProductName") Тогда // В плане видов характеристик "КатегорииНовостей" такого элемента нет
		// Определять ИмяКонфигурации английскими буквами!
		
		НовыйРезультат = ?(СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации(), "RetailBase", "Retail");
		
	ИначеЕсли ВРег(КатегорияКод) = ВРег("Product") Тогда
		// В исключительных случаях (когда в Метаданные.Версия записана нестандартная версия, например 1.2.3.4.5 или 1.2.3.4/5.6.7.8),
		//  то переложить получение точной версии на разработчиков.
		
	ИначеЕсли ВРег(КатегорияКод) = ВРег("ProductVersion") Тогда
		// В исключительных случаях (когда в Метаданные.Версия записана нестандартная версия, например 1.2.3.4.5 или 1.2.3.4/5.6.7.8),
		//  то переложить получение точной версии на разработчиков.
		
	ИначеЕсли ВРег(КатегорияКод) = ВРег("TaxReportID") Тогда // Коды подключенных отчетов
		// Определять список подключенных (возможных) отчетов для сдачи в ИФНС, ПФР и т.п.
		НовыйРезультат = Новый СписокЗначений;
		
	ИначеЕсли ВРег(КатегорияКод) = ВРег("TaxAdministration") Тогда // Номера ИФНС
		// Определять список ИФНС (через справочник Организации, или другим способом?).
		НовыйРезультат = Новый СписокЗначений;
		
	ИначеЕсли ВРег(КатегорияКод) = ВРег("Bank") Тогда // Список банков
		// Определять список банков (через справочник РасчетныеСчета или другим способом?).
		НовыйРезультат = Новый СписокЗначений;
		
	КонецЕсли;
	
	Значение = НовыйРезультат;
	
КонецПроцедуры

// В этой процедуре можно задать действия при записи пользователя.
//
// Параметры:
//  ПользовательОбъект   - СправочникОбъект.Пользователи - записываемый объект;
//  ЭтоНовыйПользователь - Булево - Истина, если записывается новый пользователь;
//  Отказ                - Булево - установить в Истина, если надо отменить запись.
//
Процедура ОбработатьЗаписьПользователя(
			ПользовательОбъект,
			ЭтоНовыйПользователь,
			Отказ) Экспорт
	
	Если НЕ ЭтоНовыйПользователь Тогда
		Возврат;
	КонецЕсли;
	
	Если ПользовательОбъект.Служебный
		ИЛИ ПользовательОбъект.Недействителен
		ИЛИ ПользовательОбъект.ИдентификаторПользователяИБ = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		ИЛИ (РаботаВМоделиСервиса.РазделениеВключено() И ПользовательОбъект.ИдентификаторПользователяСервиса = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")) Тогда 
		
		Возврат;
	КонецЕсли;
	
	// Запись в журнал регистрации
	ТекстСообщения = НСтр("ru='Устанавливаем для нового пользователя признак ОповещениеВключено = Ложь.
		|Параметры:
		|	Наименование: %1
		|	Это новый пользователь: %2
		|	Отказ: %3'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
		ПользовательОбъект.Наименование,
		ЭтоНовыйПользователь,
		Отказ);
		
	ЗаписьЖурналаРегистрации(НСтр("ru='Новости. Переопределяемый. ОбработатьЗаписьПользователя. Начало'"),
		УровеньЖурналаРегистрации.Информация,,, ТекстСообщения, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	
	ПользовательСсылка = ПользовательОбъект.Ссылка;
	Если ТипЗнч(ПользовательСсылка) = Тип("СправочникСсылка.Пользователи") Тогда
		
		Если НЕ ПользовательСсылка.Пустая() Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
			СписокЛентНовостейГдеНадоСброситьВсеПризнаки = Новый СписокЗначений;
			СписокЛентНовостейГдеНадоСброситьВсеПризнаки.Добавить(Справочники.ЛентыНовостей.НайтиПоКоду("WhatIsNew"));
			
			ВерсииПродукта = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ProductVersion");
			ВерсияПродукта = ВерсииПродукта[ВерсииПродукта.Количество()-1].Значение; // Проверка на точное соответствие, включая номер сборки
			
			СтруктураОтборов = Новый Структура;
			СтруктураОтборов.Вставить("СписокЛентНовостей", СписокЛентНовостейГдеНадоСброситьВсеПризнаки);
			СтруктураОтборов.Вставить("Продукт", ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ProductName"));
			СтруктураОтборов.Вставить("ВерсияДО", ВерсияПродукта);
			
			ЗначенияСостояний = Новый Структура;
			ЗначенияСостояний.Вставить("Прочтена", Истина);
			ЗначенияСостояний.Вставить("ОповещениеВключено", Ложь);
			
			ОбработкаНовостей.УстановитьСостояниеНовостейДляПользователей(ПользовательСсылка, СтруктураОтборов, ЗначенияСостояний);
			
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru='Завершаем для нового пользователя установку признака ОповещениеВключено = Ложь.'");
	ЗаписьЖурналаРегистрации(НСтр("ru='Новости. Переопределяемый. ОбработатьЗаписьПользователя. Конец'"),
		УровеньЖурналаРегистрации.Информация,,, ТекстСообщения, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	
КонецПроцедуры

#Область ДополнительнаяОбработкаТекстаНовости

// Если перед выводом новости пользователю, разработчику надо "доработать" ее текст - заменить какие-то теги, удалить блоки текста и т.п.,
//  то это можно сделать в этой процедуре.
// При формировании текста происходит несколько стадий:
//  вначале компонуется ХТМЛ-текст одной или списка новостей (то, что внутри <body></body>),
//  затем полученный текст обрамляется тегами <html></html> и стилями.
//  В этой процедуре можно обработать текст одной новости, без стилей (то, что внутри <body></body>).
// Здесь можно изменить окончательный текст новости, например:
//   найти теги <div> с идентификатором id="MainOrganization" и заменить на наименование основной организации;
//   найти теги <a> с идентификатором id="Total51AccountTurnover" и заменить на общую сумму оборота по 51 счету;
//   найти комментарий <!-- Вставить здесь html-текст для бухгалтера --> и заменить.
// Примеры:
// // Преобразовать текст ХТМЛ в документДОМ для обработки
// ЧтениеХТМЛ = Новый ЧтениеHTML;
// ЧтениеХТМЛ.УстановитьСтроку(ТекстХТМЛ);
// ПостроительДОМ = Новый ПостроительDOM;
// ДокументДОМ = ПостроительДОМ.Прочитать(ЧтениеХТМЛ);
// // Найти и заменить элементы внутри body (только первого уровня вложенности!)
// Для каждого ТекущийЭлементХТМЛ Из ДокументДОМ.Тело.ДочерниеУзлы Цикл
//	// Дополнение текстов
//	Если ТекущийЭлементХТМЛ.ТипУзла = ТипУзлаDOM.Элемент Тогда
//		Если ВРег(ТекущийЭлементХТМЛ.Идентификатор) = ВРег("MainOrganization") Тогда
//			ТекущийЭлементХТМЛ.ТекстовоеСодержимое = ТекущийЭлементХТМЛ.ТекстовоеСодержимое + ", ...";
//		КонецЕсли;
//	КонецЕсли;
// КонецЦикла;
// // Преобразовать документДОМ обратно в строку
// ЗаписьХТМЛ = Новый ЗаписьHTML;
// ЗаписьХТМЛ.УстановитьСтроку();
// ЗаписьДОМ = Новый ЗаписьDOM;
// ЗаписьДОМ.Записать(ДокументДОМ, ЗаписьХТМЛ);
// ТекстХТМЛ = ЗаписьХТМЛ.Закрыть();
// // Можно обрабатывать текст ХТМЛ как строку - это быстрее чем ДОМ.
// // Заменить "длинную" ссылку на полный текст новости на гиперссылку с надписью "здесь".
// НайденоНачалоБлока = СтрНайти(ТекстХТМЛ, "<div id=""newsHyperlink"">");
// Если НайденоНачалоБлока > 0 Тогда
//	НайденКонецБлока = 0;
//	Для С=НайденоНачалоБлока+24 По СтрДлина(ТекстХТМЛ)-6 Цикл
//		Если ВРег(Сред(ТекстХТМЛ, С, 6)) = ВРег("</div>") Тогда
//			НайденКонецБлока = С;
//			Прервать;
//		КонецЕсли;
//	КонецЦикла;
//	Если НайденКонецБлока > 0 Тогда
//		// Все что между - это <a href="...">...</a>, можно заменить
//		НачалоГиперссылки = НайденоНачалоБлока + 24;
//		КонецГиперссылки = НайденКонецБлока;
//		ВременныйТекстХТМЛ =
//			Лев(ТекстХТМЛ, НачалоГиперссылки)
//			+ Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб + "%СсылкаНаПолныйТекстНовости%" + Символы.ПС
//			+ Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб + Прав(ТекстХТМЛ, СтрДлина(ТекстХТМЛ) - КонецГиперссылки + 1);
//		Если ПустаяСтрока(ОбъектНовости.СсылкаНаПолныйТекстНовости) Тогда
//			ВременныйТекстХТМЛ = СтрЗаменить(ВременныйТекстХТМЛ, "%СсылкаНаПолныйТекстНовости%", "");
//		Иначе
//			// Всегда писать "здесь"
//			ВременныйТекстХТМЛ = СтрЗаменить(
//				ВременныйТекстХТМЛ,
//				"%СсылкаНаПолныйТекстНовости%",
//				"Полный текст новости <a href=""" + СокрЛП(ОбъектНовости.СсылкаНаПолныйТекстНовости) + """>здесь</a>");
//		КонецЕсли;
//		ТекстХТМЛ = ВременныйТекстХТМЛ;
//	КонецЕсли;
// КонецЕсли; // Конец примера.
// Примечания:
//  - Не рекомендуется для замены использовать СтрШаблон() и СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(),
//     т.к. это может "повредить" ссылки (удалятся "%1", "%2", ...). Пример ссылки, которая может быть повреждена:
//       http://its.1c.ru/news/redirect?utm_source=news_center&utm_medium=prog&url=%2Fdb%2Farbit%23content%3A4506%3Ahdoc.
//
// Параметры:
//  ОбъектНовости - СправочникОбъект.Новости - Новость, для которой необходимо изменить уже подготовленный текст;
//  ТекстХТМЛ     - Строка - уже подготовленный текст, который по-умолчанию будет отображен в форме просмотра новости.
//
// Возвращаемое значение:
//   Строка - окончательный текст новости (то, что внутри <body></body>).
//
//@skip-warning
Процедура ДополнительноОбработатьТекстНовостиПередПоказом(ОбъектНовости, ТекстХТМЛ) Экспорт
	
	// Ленту новостей "Важные новости" нельзя отключить, поэтому не дополнять текст новости сообщением об отключении.
	КодЛентыНовостей = ОбъектНовости.ЛентаНовостей.Код;
	Если ВРег(КодЛентыНовостей) <> ВРег("urgent") Тогда
		ТекстОтключенияЛентыНовостей = СтрЗаменить("
		|<br/>
		|<hr/>
		|Мешают новости из этой ленты новостей?<br/>
		|Вы можете <a href=""news1C:feed.{КодЛентыНовостей}.unsubscribe"">отключить</a> ленту целиком.<br/>
		|<br/>
		|Включить ленту новостей обратно можно в <a href=""e1cib/list/Справочник.Новости"">форме просмотра новостей</a>,
		|нажав кнопку <kbd>Настройки</kbd> и произведя настройки на закладке ""Ленты новостей"".
		|",
		"{КодЛентыНовостей}",
		КодЛентыНовостей);
		ТекстХТМЛ = ТекстХТМЛ + ТекстОтключенияЛентыНовостей;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обработчик обновления конфигурации с подсистемой ИнтернетПоддержкаПользователей.Новости
//
Процедура ЗаполнитьОтборыНовостей() Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("РазрешенаРаботаСНовостями") Тогда
		Возврат;
	КонецЕсли;

	// В модели сервиса обновление должно происходить в каждой области данных отдельно
	// Поэтому, если пытаемся запустить процедуру из неразделенного сеанса, то завершить работу процедуры
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Если РаботаВМоделиСервиса.СеансЗапущенБезРазделителей() Тогда
			// Запись в журнал регистрации
			ТекстСообщения = НСтр("ru='Вызов ОбработкаНовостейРТ.ЗаполнитьОтборыНовостей() в модели сервиса в неразделенном сеансе не поддерживается.'");
			// Запись в журнал регистрации
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Новости, ЗаполнитьОтборыНовостей'"), // ИмяСобытия
				УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				РежимТранзакцииЗаписиЖурналаРегистрации.Независимая); // РежимТранзакцииЗаписиЖурналаРегистрации.*
			Возврат; // пока не поддерживается
		КонецЕсли;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	// Права на чтение ленты "Что нового в версии" - по доступным пользователю разделам ГКИ
	ОтборПоЛентеНовостей = Справочники.ЛентыНовостей.НайтиПоКоду("WhatIsNew");
	ОтборПоКатегорииНовостей = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("SectionPanel");

	Если НЕ ЗначениеЗаполнено(ОтборПоЛентеНовостей)
	 ИЛИ НЕ ЗначениеЗаполнено(ОтборПоКатегорииНовостей) Тогда
		Возврат;
	КонецЕсли;

	// Подготовим таблицу соответствий разделов ГКИ и ролей для доступа к ним
	ТаблицаПодсистем = ТаблицаПодсистемИРолейДляПросмотра(Ложь);
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ОтборыПоЛентамНовостейПользовательские");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		// Получим данные о доступности пользователям разделов ГКИ
		Запрос = Новый Запрос;

		Запрос.УстановитьПараметр("Т",                        ТаблицаПодсистем);
		Запрос.УстановитьПараметр("ОтборПоЛентеНовостей",     ОтборПоЛентеНовостей);
		Запрос.УстановитьПараметр("ОтборПоКатегорииНовостей", ОтборПоКатегорииНовостей);

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Т.Подсистема КАК СТРОКА(100)) КАК Подсистема,
		|	ВЫРАЗИТЬ(Т.Роль КАК Справочник.ИдентификаторыОбъектовМетаданных) КАК Роль
		|ПОМЕСТИТЬ ВТТаблицаПодсистем
		|ИЗ
		|	&Т КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПрофилиГруппДоступаРоли.Ссылка КАК Профиль,
		|	ПрофилиГруппДоступаРоли.Роль
		|ПОМЕСТИТЬ ВТПрофили
		|ИЗ
		|	Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаПодсистем КАК ВТТаблицаПодсистем
		|		ПО ПрофилиГруппДоступаРоли.Роль = ВТТаблицаПодсистем.Роль
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыДоступаПользователи.Пользователь КАК ПользовательИлиГруппа,
		|	ВТПрофили.Роль
		|ПОМЕСТИТЬ ВТПользователиИГруппы
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПрофили КАК ВТПрофили
		|		ПО ГруппыДоступаПользователи.Ссылка.Профиль = ВТПрофили.Профиль
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыПользователейСостав.Пользователь КАК Пользователь,
		|	ВТПользователиИГруппы.Роль КАК Роль
		|ПОМЕСТИТЬ ВТПользователи
		|ИЗ
		|	ВТПользователиИГруппы КАК ВТПользователиИГруппы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|		ПО ВТПользователиИГруппы.ПользовательИлиГруппа = ГруппыПользователейСостав.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Пользователи.Ссылка,
		|	ВТПользователиИГруппы.Роль
		|ИЗ
		|	ВТПользователиИГруппы КАК ВТПользователиИГруппы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ВТПользователиИГруппы.ПользовательИлиГруппа = Пользователи.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТПользователи.Пользователь,
		|	ВТТаблицаПодсистем.Подсистема КАК ЗначениеКатегорииНовостей
		|ПОМЕСТИТЬ ВТНовыеОтборы
		|ИЗ
		|	ВТПользователи КАК ВТПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаПодсистем КАК ВТТаблицаПодсистем
		|		ПО ВТПользователи.Роль = ВТТаблицаПодсистем.Роль
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтборыПоЛентамНовостейПользовательские.Пользователь,
		|	ОтборыПоЛентамНовостейПользовательские.ЗначениеКатегорииНовостей
		|ПОМЕСТИТЬ ВТСтарыеОтборы
		|ИЗ
		|	РегистрСведений.ОтборыПоЛентамНовостейПользовательские КАК ОтборыПоЛентамНовостейПользовательские
		|ГДЕ
		|	ОтборыПоЛентамНовостейПользовательские.ЛентаНовостей = &ОтборПоЛентеНовостей
		|	И ОтборыПоЛентамНовостейПользовательские.КатегорияНовостей = &ОтборПоКатегорииНовостей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТНовыеОтборы.Пользователь
		|ПОМЕСТИТЬ ВТПользователиДляИзменения
		|ИЗ
		|	ВТНовыеОтборы КАК ВТНовыеОтборы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтарыеОтборы КАК ВТСтарыеОтборы
		|		ПО ВТНовыеОтборы.Пользователь = ВТСтарыеОтборы.Пользователь
		|			И ВТНовыеОтборы.ЗначениеКатегорииНовостей = ВТСтарыеОтборы.ЗначениеКатегорииНовостей
		|ГДЕ
		|	ВТСтарыеОтборы.Пользователь ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТСтарыеОтборы.Пользователь
		|ИЗ
		|	ВТСтарыеОтборы КАК ВТСтарыеОтборы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНовыеОтборы КАК ВТНовыеОтборы
		|		ПО ВТСтарыеОтборы.Пользователь = ВТНовыеОтборы.Пользователь
		|			И ВТСтарыеОтборы.ЗначениеКатегорииНовостей = ВТНовыеОтборы.ЗначениеКатегорииНовостей
		|ГДЕ
		|	ВТНовыеОтборы.Пользователь ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТНовыеОтборы.Пользователь КАК Пользователь,
		|	&ОтборПоЛентеНовостей КАК ЛентаНовостей,
		|	&ОтборПоКатегорииНовостей КАК КатегорияНовостей,
		|	ВТНовыеОтборы.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей,
		|	ИСТИНА КАК УстановленоПрограммно
		|ИЗ
		|	ВТНовыеОтборы КАК ВТНовыеОтборы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПользователиДляИзменения КАК ВТПользователиДляИзменения
		|		ПО ВТНовыеОтборы.Пользователь = ВТПользователиДляИзменения.Пользователь
		|			И (ВТНовыеОтборы.Пользователь <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователь,
		|	ЗначениеКатегорииНовостей
		|ИТОГИ ПО
		|	Пользователь";

		// Перезапишем только измененные пользовательские отборы
		ВыборкаПользователи = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПользователи.Следующий() Цикл

			НаборЗаписей = РегистрыСведений.ОтборыПоЛентамНовостейПользовательские.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Пользователь.Установить(ВыборкаПользователи.Пользователь);
			НаборЗаписей.Отбор.ЛентаНовостей.Установить(ОтборПоЛентеНовостей);
			НаборЗаписей.Отбор.КатегорияНовостей.Установить(ОтборПоКатегорииНовостей);

			Выборка = ВыборкаПользователи.Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			КонецЦикла;

			НаборЗаписей.Записать(Истина);

		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
				НСтр("ru='Новости, ЗаполнитьОтборыНовостей'"), // ИмяСобытия
				УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				, // Данные
				, // Комментарий
				РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
	КонецПопытки;
	// Позовем сервисные процедуры отборов из механизма новостей

	УстановитьПривилегированныйРежим(Ложь);
	
	// Пересчет пользовательских отборов может осуществляться как в модели сервиса, так и без нее,
	//  вне зависимости от того, запущен ли разделенный сеанс или в области данных
	ОбработкаНовостей.ПриИзмененииЗначенийОтборовПользовательских();

КонецПроцедуры

// Заполняет отборы текущего пользователя для чтение лент новостей.
//
Процедура ЗаполнитьОтборыПользователяДляЧтенияНовостей(Форма) Экспорт

	Если ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы() Тогда
		Возврат; // отборы будут заполнены централизованно, см. ЗаполнитьОтборыНовостей()
	КонецЕсли;
	
	ТекущийПользователь = Неопределено;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыСеанса_ТекущийПользователь") Тогда
		ТекущийПользователь = Форма.ПараметрыСеанса_ТекущийПользователь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекущийПользователь)
	 ИЛИ ТипЗнч(ТекущийПользователь) <> Тип("СправочникСсылка.Пользователи") Тогда
	 	// Работа механизма чтения новостей пока не поддерживается для Внешних пользователей
		Возврат;
	КонецЕсли;

	Если НЕ ПолучитьФункциональнуюОпцию("РазрешенаРаботаСНовостями")
	 ИЛИ НЕ Пользователи.РолиДоступны("ЧтениеНовостей, РедактированиеНовостей",, Ложь) Тогда
		Возврат; // не требуется обновление отборов
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	// Права на чтение ленты "Что нового в версии" - по доступным пользователю разделам ГКИ
	ОтборПоЛентеНовостей = Справочники.ЛентыНовостей.НайтиПоКоду("WhatIsNew");
	ОтборПоКатегорииНовостей = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду("SectionPanel");

	Если НЕ ЗначениеЗаполнено(ОтборПоЛентеНовостей)
	 ИЛИ НЕ ЗначениеЗаполнено(ОтборПоКатегорииНовостей) Тогда
		Возврат;
	КонецЕсли;

	// Подготовим таблицу соответствий разделов ГКИ и ролей для доступа к ним
	ТаблицаПодсистем = ТаблицаПодсистемИРолейДляПросмотра(Истина);

	НачатьТранзакцию();
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ОтборыПоЛентамНовостейПользовательские");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
	
		// Получим данные о доступности пользователям разделов ГКИ
		Запрос = Новый Запрос;

		Запрос.УстановитьПараметр("Т",                        ТаблицаПодсистем);
		Запрос.УстановитьПараметр("ОтборПоЛентеНовостей",     ОтборПоЛентеНовостей);
		Запрос.УстановитьПараметр("ОтборПоКатегорииНовостей", ОтборПоКатегорииНовостей);
		Запрос.УстановитьПараметр("ТекущийПользователь",      ТекущийПользователь);

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Т.Подсистема КАК СТРОКА(100)) КАК ЗначениеКатегорииНовостей
		|ПОМЕСТИТЬ ВТТаблицаПодсистем
		|ИЗ
		|	&Т КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтборыПоЛентамНовостейПользовательские.ЗначениеКатегорииНовостей
		|ПОМЕСТИТЬ ВТСтарыеОтборы
		|ИЗ
		|	РегистрСведений.ОтборыПоЛентамНовостейПользовательские КАК ОтборыПоЛентамНовостейПользовательские
		|ГДЕ
		|	ОтборыПоЛентамНовостейПользовательские.Пользователь = &ТекущийПользователь
		|	И ОтборыПоЛентамНовостейПользовательские.ЛентаНовостей = &ОтборПоЛентеНовостей
		|	И ОтборыПоЛентамНовостейПользовательские.КатегорияНовостей = &ОтборПоКатегорииНовостей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТНовыеОтборы.ЗначениеКатегорииНовостей
		|ИЗ
		|	ВТТаблицаПодсистем КАК ВТНовыеОтборы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтарыеОтборы КАК ВТСтарыеОтборы
		|		ПО ВТНовыеОтборы.ЗначениеКатегорииНовостей = ВТСтарыеОтборы.ЗначениеКатегорииНовостей
		|ГДЕ
		|	ВТСтарыеОтборы.ЗначениеКатегорииНовостей ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТСтарыеОтборы.ЗначениеКатегорииНовостей
		|ИЗ
		|	ВТСтарыеОтборы КАК ВТСтарыеОтборы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаПодсистем КАК ВТНовыеОтборы
		|		ПО ВТСтарыеОтборы.ЗначениеКатегорииНовостей = ВТНовыеОтборы.ЗначениеКатегорииНовостей
		|ГДЕ
		|	ВТНовыеОтборы.ЗначениеКатегорииНовостей ЕСТЬ NULL ";

		// Перезапишем только измененные пользовательские отборы
		Выборка = Запрос.Выполнить().Выбрать();
		Если НЕ Выборка.Следующий() Тогда
			Возврат; // права на подсистемы не менялись - не надо менять отборы новостей
		КонецЕсли;

		НаборЗаписей = РегистрыСведений.ОтборыПоЛентамНовостейПользовательские.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
		НаборЗаписей.Отбор.ЛентаНовостей.Установить(ОтборПоЛентеНовостей);
		НаборЗаписей.Отбор.КатегорияНовостей.Установить(ОтборПоКатегорииНовостей);

		Для Каждого ТекущаяСтрока Из ТаблицаПодсистем Цикл

			НоваяСтрока = НаборЗаписей.Добавить();
			НоваяСтрока.Пользователь              = ТекущийПользователь;
			НоваяСтрока.ЛентаНовостей             = ОтборПоЛентеНовостей;
			НоваяСтрока.КатегорияНовостей         = ОтборПоКатегорииНовостей;
			НоваяСтрока.ЗначениеКатегорииНовостей = ТекущаяСтрока.Подсистема;
			НоваяСтрока.УстановленоПрограммно     = Истина;

		КонецЦикла;

		НаборЗаписей.Записать(Истина);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
				НСтр("ru='Новости, ЗаполнитьОтборыНовостей'"), // ИмяСобытия
				УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				, // Данные
				, // Комментарий
				РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
	КонецПопытки;

	// Позовем сервисные процедуры механизма новостей

	УстановитьПривилегированныйРежим(Ложь);
	
	// Пересчет пользовательских отборов может осуществляться как в модели сервиса, так и без нее,
	//  вне зависимости от того, запущен ли разделенный сеанс или в области данных
	ОбработкаНовостей.ПриИзмененииЗначенийОтборовПользовательских(ТекущийПользователь);

КонецПроцедуры

// Возвращает таблицу соответствия интерфейсных подсистем и ролей для доступа к ним.
//
Функция ТаблицаПодсистемИРолейДляПросмотра(ПроверятьРольТекущегоПользователя)

	ТаблицаПодсистем = Новый ТаблицаЗначений;
	ТаблицаПодсистем.Колонки.Добавить("Подсистема", Новый ОписаниеТипов("Строка"));
	ТаблицаПодсистем.Колонки.Добавить("Роль",       Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));

	Если Пользователи.ЭтоПолноправныйПользователь(,, Ложь) Тогда
		Возврат ТаблицаПодсистем; // без ограничений по подсистемам
	КонецЕсли;

	ТаблицаПодсистем.Колонки.Добавить("МетаданныеРоли");

	НоваяСтрока = ТаблицаПодсистем.Добавить();
	НоваяСтрока.Подсистема = Метаданные.Подсистемы.Администрирование.Имя;
	НоваяСтрока.МетаданныеРоли = Метаданные.Роли.Администрирование;
	
	НоваяСтрока = ТаблицаПодсистем.Добавить();
	НоваяСтрока.Подсистема = Метаданные.Подсистемы.ЗапасыИЗакупки.Имя;
	НоваяСтрока.МетаданныеРоли = Метаданные.Роли.ПодсистемаЗапасыИЗакупки;
	
	НоваяСтрока = ТаблицаПодсистем.Добавить();
	НоваяСтрока.Подсистема = Метаданные.Подсистемы.Маркетинг.Имя;
	НоваяСтрока.МетаданныеРоли = Метаданные.Роли.ПодсистемаЗапасыИЗакупки;
	
	НоваяСтрока = ТаблицаПодсистем.Добавить();
	НоваяСтрока.Подсистема = Метаданные.Подсистемы.НормативноСправочнаяИнформация.Имя;
	НоваяСтрока.МетаданныеРоли = Метаданные.Роли.ПодсистемаЗапасыИЗакупки;
	
	НоваяСтрока = ТаблицаПодсистем.Добавить();
	НоваяСтрока.Подсистема = Метаданные.Подсистемы.Продажи.Имя;
	НоваяСтрока.МетаданныеРоли = Метаданные.Роли.ПодсистемаЗапасыИЗакупки;
	
	НоваяСтрока = ТаблицаПодсистем.Добавить();
	НоваяСтрока.Подсистема = Метаданные.Подсистемы.Склад.Имя;
	НоваяСтрока.МетаданныеРоли = Метаданные.Роли.ПодсистемаЗапасыИЗакупки;
	
	НоваяСтрока = ТаблицаПодсистем.Добавить();
	НоваяСтрока.Подсистема = Метаданные.Подсистемы.Финансы.Имя;
	НоваяСтрока.МетаданныеРоли = Метаданные.Роли.ПодсистемаЗапасыИЗакупки;
	
	МассивСтрокДляУдаления = Новый Массив;

	Для Каждого ТекущаяСтрока Из ТаблицаПодсистем Цикл
	
		Если ПроверятьРольТекущегоПользователя И НЕ Пользователи.РолиДоступны(ТекущаяСтрока.МетаданныеРоли.Имя,,Ложь) Тогда
			МассивСтрокДляУдаления.Добавить(ТекущаяСтрока);
		Иначе
			ТекущаяСтрока.Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТекущаяСтрока.МетаданныеРоли);
		КонецЕсли;
	
	КонецЦикла;

	Для Каждого ТекущаяСтрока Из МассивСтрокДляУдаления Цикл
		ТаблицаПодсистем.Удалить(ТекущаяСтрока);
	КонецЦикла;

	ТаблицаПодсистем.Колонки.Удалить("МетаданныеРоли");

	Возврат ТаблицаПодсистем;

КонецФункции

#КонецОбласти


