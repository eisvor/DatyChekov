
#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиКоманд

// Открывает форму подбора номенклатуры.
//
// Параметры:
//  Форма                   - УправляемаяФорма   - форма, в которой вызывается команда открытия обработки сопоставления;
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы подбора,
//  ПараметрыПодбора        - Структура          - параметры открытия формы подбора товаров, состав полей определен в функции
//                                                 ИнтеграцияВЕТИСКлиентСерверПереопределяемый.ПараметрыФормыПодбораТоваров.
//
Процедура ОткрытьФормуПодбораНоменклатуры(Форма, ОповещениеПриЗавершении = Неопределено, ПараметрыПодбора = Неопределено) Экспорт
	
	ОсобенностьУчета = Новый Массив;
	ОсобенностьУчета.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС"));
	ОсобенностьУчета.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС"));
	ОсобенностьУчета.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС"));
	
	Магазин = Неопределено;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОсобенностьУчета",                        ОсобенностьУчета);
	ПараметрыФормы.Вставить("Магазин"                                  , Магазин);
	ПараметрыФормы.Вставить("РежимПодбораБезУслуг"                     , Истина);
	ПараметрыФормы.Вставить("ИспользоватьОтборПоТипамНоменклатуры"     , Истина);
	ПараметрыФормы.Вставить("Дата"                                     , Форма.Объект.Дата);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров"        , Истина);
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену", НСтр("ru = 'Запрашивать количество'"));
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, Форма, Форма.УникальныйИдентификатор,,, ОповещениеПриЗавершении);
	
КонецПроцедуры

// Открывает форму выбора характеристики номенклатуры.
//
// Параметры:
//  Форма                   - УправляемаяФорма   - форма, в которой вызывается команда выбора номенклатуры,
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы подбора,
//  ПараметрыХарактеристики - Структура          - параметры создания характеристики номенклатуры из формы выбора.
Процедура ОткрытьФормуВыбораХарактеристикиНоменклатуры(Форма, ОповещениеПриЗавершении, ПараметрыХарактеристики = Неопределено) Экспорт
	
	ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора", ПараметрыХарактеристики, ЭтотОбъект,,,,
		ОповещениеПриЗавершении, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открывает форму выбора характеристики номенклатуры.
//
// Параметры:
//  Форма                 - УправляемаяФорма - форма, в которой вызывается команда выбора номенклатуры,
//  ПараметрыНоменклатуры - (См. ИнтеграцияВЕТИСВызовСервера.ПараметрыНоменклатуры).
Процедура ОткрытьФормуВыбораНоменклатуры(Форма, ПараметрыНоменклатуры = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	Если ПараметрыНоменклатуры <> Неопределено Тогда
		Для Каждого КлючИЗначение Из ПараметрыНоменклатуры Цикл
			ПараметрыФормы.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ТипНоменклатуры  = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар");
	ОсобенностьУчета = Новый Массив;
	ОсобенностьУчета.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС"));
	ОсобенностьУчета.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС"));
	ОсобенностьУчета.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС"));
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТипНоменклатуры",  ТипНоменклатуры);
	ПараметрыОтбора.Вставить("ОсобенностьУчета", ОсобенностьУчета);
	
	ПараметрыФормы.Вставить("Отбор",                ПараметрыОтбора);
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, Форма);
	
КонецПроцедуры

// Открывает форму создания номенклатуры.
//
// Параметры:
//  Форма                 - УправляемаяФорма - форма, в которой вызывается команда создания номенклатуры,
//  ПараметрыНоменклатуры - (См. описание ИнтеграцияВЕТИСВызовСервера.ПараметрыНоменклатуры)
//  ЕдиницаИзмеренияВЕТИС - СправочникСсылка.ЕдиницыИзмеренияВЕТИС - единица измерения ВЕТИС, на основании которой 
//                                                                   создается номенклатура.
Процедура ОткрытьФормуСозданияНоменклатуры(Форма, ПараметрыНоменклатуры, ЕдиницаИзмеренияВЕТИС) Экспорт
	
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияВЕТИС)
		И Не ЗначениеЗаполнено(ПараметрыНоменклатуры.ЕдиницаИзмеренияВЕТИС) Тогда
		
		ТекстСообщения = НСтр("ru = 'Невозможно создать номенклатуру, т.к. не заполнено поле ""Единица измерения"" в карточке единицы измерения ВетИС ""%ЕдиницаИзмеренияВЕТИС%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмеренияВЕТИС%", Строка(ЕдиницаИзмеренияВЕТИС));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	Для Каждого КлючИЗначение Из ПараметрыНоменклатуры Цикл
		ПараметрыФормы.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	ТипНоменклатуры  = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар");
	ОсобенностьУчета = Новый Массив;
	ОсобенностьУчета.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС"));
	ОсобенностьУчета.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС"));
	ОсобенностьУчета.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС"));
	
	ПараметрыФормы.Вставить("ТипНоменклатуры",  ТипНоменклатуры);
	ПараметрыФормы.Вставить("ОсобенностьУчета", ОсобенностьУчета);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыФормы, Форма);
	
КонецПроцедуры

// Открывает форму создания нового контрагента.
//
// Параметры:
//  ФормаВладелец - УправляемаяФорма - форма-владелец.
//  Реквизиты     - Структура        - данные заполнения нового контрагента:
//   * Наименование       - Строка - наименование хозяйствующего субъекта,
//   * НаименованиеПолное - Строка - полное наименование хозяйствующего субъекта,
//   * ИНН                - Строка - ИНН контрагента,
//   * КПП                - Строка - КПП контрагента,
//   * ЮридическийАдрес   - Строка - адрес контрагента.
//
Процедура ОткрытьФормуСозданияКонтрагента(ФормаВладелец, Реквизиты) Экспорт
	
	Основание = Новый Структура;
	Основание.Вставить("ИНН",                     Реквизиты.ИНН);
	Основание.Вставить("КПП",                     Реквизиты.КПП);
	Основание.Вставить("Наименование",            Реквизиты.Наименование);
	Основание.Вставить("НаименованиеПолное",      Реквизиты.НаименованиеПолное);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("Основание", Основание);
	
	ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыФормы, ФормаВладелец);
	
КонецПроцедуры

// Открывает форму выбора контрагента.
//
// Параметры:
//  ФормаВладелец - УправляемаяФорма - форма, из которой осуществляется выбор.
//  Реквизиты     - Структура        - данные для заполнения отбора:
//   * Наименование            - Строка - наименование контрагента,
//   * СокращенноеНаименование - Строка - сокращенное наименование контрагента,
//   * ИНН                     - Строка - ИНН контрагента,
//   * КПП                     - Строка - КПП контрагента.
Процедура ОткрытьФормуВыбораКонтрагента(ФормаВладелец, Реквизиты) Экспорт
	
	Основание = Новый Структура;
	Основание.Вставить("ИНН",                     Реквизиты.ИНН);
	Основание.Вставить("КПП",                     Реквизиты.КПП);
	Основание.Вставить("Наименование",            Реквизиты.Наименование);
	Основание.Вставить("НаименованиеПолное",      Реквизиты.СокращенноеНаименование);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Основание);
	
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыФормы, ФормаВладелец);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// Выполняет действия при изменении номенклатуры в таблице Товары.
//
// Параметры:
//  Форма                  - УправляемаяФорма            - форма, в которой произошло событие.
//  ТекущаяСтрока          - ДанныеФормыЭлементКоллекции - строка таблицы товаров.
//  КэшированныеЗначения   - Структура                   - сохраненные значения параметров, используемых при обработке строки таблицы.
//  ПараметрыЗаполнения    - Структура                   - см. функцию ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//  ПараметрыУказанияСерий - Структура                   - состав полей определен в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
Процедура ПриИзмененииНоменклатуры(Форма,
								ТекущаяСтрока,
								КэшированныеЗначения,
								ПараметрыЗаполнения,
								ПараметрыУказанияСерий = Неопределено) Экспорт
	
	ЗаполнитьПризнакХарактеристикиИспользуются = Новый Структура;
	ЗаполнитьПризнакХарактеристикиИспользуются.Вставить("Номенклатура", "Номенклатура");
	ЗаполнитьПризнакХарактеристикиИспользуются.Вставить("ХарактеристикиИспользуются", "ХарактеристикиИспользуются");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", ЗаполнитьПризнакХарактеристикиИспользуются);
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияСопоставленияВетис");
	СтруктураДействий.Вставить("ЗаполнитьПродукциюВЕТИС",                    ПараметрыЗаполнения);
	
	Если ПараметрыЗаполнения.ЗаполнитьПризнакСкоропортящаясяПродукция Тогда
		СлужебныеРеквизиты = Новый Структура;
		СлужебныеРеквизиты.Вставить("СкоропортящаясяПродукция");
		СтруктураДействий.Вставить("ЗаполнитьСлужебныеРеквизиты", СлужебныеРеквизиты);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницВЕТИС Тогда
		ПересчитатьКоличествоЕдиницВЕТИС = Новый Структура("ЕдиницаИзмеренияВЕТИС, Суффикс");
		ЗаполнитьЗначенияСвойств(ПересчитатьКоличествоЕдиницВЕТИС, ПараметрыЗаполнения);
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницВЕТИС", ПересчитатьКоличествоЕдиницВЕТИС);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницПоВЕТИС Тогда
		ПересчитатьКоличествоЕдиницПоВЕТИС = Новый Структура("ЕдиницаИзмеренияВЕТИС, Суффикс");
		ЗаполнитьЗначенияСвойств(ПересчитатьКоличествоЕдиницПоВЕТИС, ПараметрыЗаполнения);
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницПоВЕТИС", ПересчитатьКоличествоЕдиницПоВЕТИС);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус Тогда
		
		Если ПараметрыУказанияСерий <> Неопределено
			И ЗначениеЗаполнено(ПараметрыУказанияСерий.ИмяПоляСклад)
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма[ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта], ПараметрыУказанияСерий.ИмяПоляСклад) Тогда
			
			Склад = Форма[ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта][ПараметрыУказанияСерий.ИмяПоляСклад];
			
		Иначе
			Склад = Неопределено;
		КонецЕсли;
		
		ПроверитьСериюРассчитатьСтатус = Новый Структура("ПараметрыУказанияСерий, Склад", ПараметрыУказанияСерий, Склад);
		
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПроверитьСериюРассчитатьСтатус);
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбработатьСтрокуТЧСВызовомСервера(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

// Выполняет действия при изменении характеристики в таблице Товары.
//
// Параметры:
//  Форма                - УправляемаяФорма            - форма, в которой произошло событие,
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура                   - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения  - Структура                   - см. функцию ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
Процедура ПриИзмененииХарактеристики(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	ИмяТаблицы = ПараметрыЗаполнения.ИмяТабличнойЧасти;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьПродукциюВЕТИС", ПараметрыЗаполнения);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбработатьСтрокуТЧСВызовомСервера(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

// Выполняет действия при изменении единицы измерения ВЕТИС в таблице Товары.
//
// Параметры:
//  Форма                - УправляемаяФорма            - форма, в которой произошло событие,
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура                   - сохраненные значения параметров, используемых при обработке строки таблицы,
//  ПараметрыЗаполнения  - Структура                   - см. функцию ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
Процедура ПриИзмененииЕдиницыИзмеренияВЕТИС(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	ПриИзмененииКоличества(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
КонецПроцедуры

// Выполняет действия при изменении количества ВЕТИС в таблице Товары.
//
// Параметры:
//  Форма                - УправляемаяФорма            - форма, в которой произошло событие,
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура                   - сохраненные значения параметров, используемых при обработке строки таблицы,
//  ПараметрыЗаполнения  - Структура                   - см. функцию ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
Процедура ПриИзмененииКоличестваВЕТИС(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	ПриИзмененииКоличества(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
КонецПроцедуры

// Выполняет действия при изменении количества в таблице Товары.
//
// Параметры:
//  Форма                - УправляемаяФорма            - форма, в которой произошло событие,
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура                   - сохраненные значения параметров, используемых при обработке строки таблицы,
//  ПараметрыЗаполнения  - Структура                   - см. функцию ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
Процедура ПриИзмененииКоличества(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	СтруктураДействий = Новый Структура;
	
	Если ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницВЕТИС Тогда
		ПересчитатьКоличествоЕдиницВЕТИС = Новый Структура("ЕдиницаИзмеренияВЕТИС, Суффикс");
		ЗаполнитьЗначенияСвойств(ПересчитатьКоличествоЕдиницВЕТИС, ПараметрыЗаполнения);
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницВЕТИС", ПересчитатьКоличествоЕдиницВЕТИС);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницПоВЕТИС Тогда
		ПересчитатьКоличествоЕдиницПоВЕТИС = Новый Структура("ЕдиницаИзмеренияВЕТИС, Суффикс");
		ЗаполнитьЗначенияСвойств(ПересчитатьКоличествоЕдиницПоВЕТИС, ПараметрыЗаполнения);
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницПоВЕТИС", ПересчитатьКоличествоЕдиницПоВЕТИС);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДействий) Тогда
		
		Если КэшированныеЗначения = Неопределено Тогда
			
			КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураКэшируемыхЗначений();
			ЗаполнитьКэшКоэффицентУпаковки(ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
			
		ИначеЕсли ТипЗнч(КэшированныеЗначения) = Тип("Структура") Тогда
			Если КэшированныеЗначения.Свойство("КоэффициентыУпаковок") = Неопределено Тогда
				
				КэшированныеЗначения.Вставить("КоэффициентыУпаковок", Новый Соответствие);
				ЗаполнитьКэшКоэффицентУпаковки(ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
				
			Иначе
				Если КэшированныеЗначения.КоэффициентыУпаковок = Неопределено Тогда
					
					КэшированныеЗначения.Вставить("КоэффициентыУпаковок", Новый Соответствие);
					ЗаполнитьКэшКоэффицентУпаковки(ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
					
				ИначеЕсли ТипЗнч(КэшированныеЗначения.КоэффициентыУпаковок) = Тип("Соответствие") Тогда
					Если КэшированныеЗначения.КоэффициентыУпаковок.Количество() = 0 Тогда
						
						ЗаполнитьКэшКоэффицентУпаковки(ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
						
					Иначе
						
						Номенклатура = ТекущаяСтрока.Номенклатура;
						ЕдиницаИзмеренияВЕТИС = ПараметрыЗаполнения.ЕдиницаИзмеренияВЕТИС;
						КлючКоэффициента = ОбработкаТабличнойЧастиТоварыКлиентСервер.КлючКэшаУпаковки(Номенклатура, 
							ЕдиницаИзмеренияВЕТИС);
						
						Если КэшированныеЗначения.КоэффициентыУпаковок.Получить(КлючКоэффициента) = Неопределено Тогда
							ЗаполнитьКэшКоэффицентУпаковки(ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбработатьСтрокуТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

// Вызывает процедуру обработки выбора номенклатуры, если произошел выбор из формы выбора.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура завершения выбора номенклатуры,
//  ВыбранноеЗначение       - Произвольный       - результат выбора,
//  ИсточникВыбора          - УправляемаяФорма   - форма, в которой осуществлен выбор номенклатуры.
Процедура ОбработкаВыбораНоменклатуры(ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	Если СтрНачинаетсяС(ИсточникВыбора.ИмяФормы, "Справочник.Номенклатура") Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьКэшКоэффицентУпаковки(ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения)
	
	Номенклатура = ТекущаяСтрока.Номенклатура;
	ЕдиницаИзмеренияВЕТИС = ПараметрыЗаполнения.ЕдиницаИзмеренияВЕТИС;
	
	КлючКоэффициента = ОбработкаТабличнойЧастиТоварыКлиентСервер.КлючКэшаУпаковки(Номенклатура, 
	ЕдиницаИзмеренияВЕТИС);
	
	ДанныеЕдиницыИзмеренияВЕТИС = ИнтеграцияВЕТИСРТВызовСервера.ДанныеЕдиницыИзмеренияВЕТИС(ЕдиницаИзмеренияВЕТИС, 
	Номенклатура);
	
	ДанныеКлюча = Новый Структура;
	ДанныеКлюча.Вставить("КодОшибки",                ДанныеЕдиницыИзмеренияВЕТИС.КодОшибки);
	ДанныеКлюча.Вставить("Коэффициент",              ДанныеЕдиницыИзмеренияВЕТИС.Коэффициент);
	ДанныеКлюча.Вставить("ТипИзмеряемойВеличины",    ДанныеЕдиницыИзмеренияВЕТИС.ТипИзмеряемойВеличины);
	ДанныеКлюча.Вставить("НужноОкруглятьКоличество", ДанныеЕдиницыИзмеренияВЕТИС.НужноОкруглятьКоличество);
	
	КэшированныеЗначения.КоэффициентыУпаковок.Вставить(КлючКоэффициента, ДанныеКлюча);
	
КонецПроцедуры

#КонецОбласти
