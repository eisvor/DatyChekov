
#Область СлужебныеПроцедурыИФункции

// Добавляет в свойство структуры сообщения текст ошибки
//
// Параметры:
//  Сообщение    - Структура - сообщение, в которое добавляется текст ошибки.
//  ТекстОшибки  - Строка - добавляемый текст ошибки.
//
Процедура ДобавитьТекстОшибки(Сообщение, ТекстОшибки) Экспорт
	
	Если Сообщение.Ошибки.Получить(ТекстОшибки) <> Неопределено Тогда
		Возврат;
	Иначе
		Сообщение.Ошибки.Вставить(ТекстОшибки, Истина);
	КонецЕсли;
	
	Если ПустаяСтрока(Сообщение.ТекстОшибки) Тогда
		Сообщение.ТекстОшибки = ТекстОшибки;
	Иначе
		Сообщение.ТекстОшибки = Сообщение.ТекстОшибки + Символы.ПС + ТекстОшибки;
	КонецЕсли;
	
	Если Сообщение.Свойство("ТребуетсяПодписание") Тогда
		Сообщение.ТребуетсяПодписание = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяОбъектаИзИмениФормы(Форма, ПолноеИмя = Истина) Экспорт
	
	ЧастиИмени = ОбщегоНазначенияИСМПТККлиентСерверПереопределяемый.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".");
	
	Если ПолноеИмя Тогда
		ИмяОбъекта = ЧастиИмени[0] + "." + ЧастиИмени[1];
	Иначе
		ИмяОбъекта = ЧастиИмени[1];
	КонецЕсли;
	
	Возврат ИмяОбъекта;
	
КонецФункции

// Возвращает структуру параметров обновления статуса.
Функция ПараметрыОбновленияСтатуса(ПараметрыОбновленияСтатуса = Неопределено) Экспорт
	
	Если ПараметрыОбновленияСтатуса = Неопределено Тогда
		ПараметрыОбновленияСтатуса = Новый Структура;
	КонецЕсли;
	
	ПараметрыОбновленияСтатуса.Вставить("Статус");
	ПараметрыОбновленияСтатуса.Вставить("СтатусОбработки");
	ПараметрыОбновленияСтатуса.Вставить("ОперацияКвитанции");
	ПараметрыОбновленияСтатуса.Вставить("ПротоколОбмена");
	ПараметрыОбновленияСтатуса.Вставить("ПараметрыЗапроса");
	
	Возврат ПараметрыОбновленияСтатуса;
	
КонецФункции

Функция ШаблонКодаМаркировкиПоВидуПродукции(ВидПродукции) Экспорт
	
	СписокШаблонов = ШаблоныКодовПоВидуПродукции(ВидПродукции);
	
	Если СписокШаблонов.Количество() Тогда
		Возврат СписокШаблонов.Получить(0).Значение;
	КонецЕсли;
	
КонецФункции

Функция ШаблоныКодовПоВидуПродукции(ВидПродукции = Неопределено) Экспорт
	
	ЭтоОбувнаяПродукция 		= (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная"));
	ЭтоМолочнаяПродукция 		= (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция"));
	ЭтоЛекарственыйПрепарат 	= (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты"));
	ЭтоТекстиль				 	= (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность"));
	ЭтоТабак				 	= (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная"));
	
	СписокВыбора = Новый СписокЗначений();
	Если ЭтоОбувнаяПродукция Или ВидПродукции = Неопределено Тогда
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.Обувь"));
	КонецЕсли;
	Если ЭтоМолочнаяПродукция Тогда
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.МолочнаяПродукция"));
	КонецЕсли;
	Если ЭтоЛекарственыйПрепарат Тогда
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛекарственныеПрепараты"));
	КонецЕсли;
	Если ЭтоТекстиль Тогда
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ЛегкаяПромышленность"));
	КонецЕсли;
	Если ЭтоТабак Тогда
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗИСМПТК.ТабачнаяПачка")); //По умолчанию, затем пользователю нужно скорректировать вручную
	КонецЕсли;
	
	Возврат СписокВыбора;
	
КонецФункции

// Разбирает строку URI на составные части и возвращает в виде структуры.
// На основе RFC 3986.
//
// Параметры:
//  СтрокаURI - Строка - ссылка на ресурс в формате:
//                       <схема>://<логин>:<пароль>@<хост>:<порт>/<путь>?<параметры>#<якорь>.
//
// Возвращаемое значение:
//  Структура - составные части URI согласно формату:
//   * Схема         - Строка - схема из URI.
//   * Логин         - Строка - логин из URI.
//   * Пароль        - Строка - пароль из URI.
//   * ИмяСервера    - Строка - часть <хост>:<порт> из URI.
//   * Хост          - Строка - хост из URI.
//   * Порт          - Строка - порт из URI.
//   * ПутьНаСервере - Строка - часть <путь>?<параметры>#<якорь> из URI.
//
Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема   = "";
	Позиция = СтрНайти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;
	
	// Строка соединения и путь на сервере.
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = СтрНайти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере 	 = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
	
	// Информация пользователя и имя сервера.
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция    = СтрНайти(СтрокаСоединения, "@", НаправлениеПоиска.СКонца);
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин   = СтрокаАвторизации;
	Пароль  = "";
	Позиция = СтрНайти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин  = Лев(СтрокаАвторизации,  Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = СтрНайти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера,  Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
		Если Не ОбщегоНазначенияИСМПТККлиентСервер.ТолькоЦифрыВСтроке(Порт) Тогда
			Порт = "";
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема",  Схема);
	Результат.Вставить("Логин",  Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера",	ИмяСервера);
	Результат.Вставить("Хост", 	 Хост);
	Результат.Вставить("Порт",   ?(ПустаяСтрока(Порт), Неопределено, Число(Порт)));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСДокументами

Функция ПустыеПараметрыФормыИзменениеСтатусовДокументовИСМПТ() Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Действие", "");
	ПараметрыФормы.Вставить("МассивДокументовИСМПТ", Новый Массив);
	ПараметрыФормы.Вставить("ЗапускатьФоновоеЗадание", Ложь);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Проверяет корректность указанного идентификатора. 
// В качестве идентификатора должна быть указана строка, содержащая только цифры.
//
// Параметры:
//  Идентификатор  - Строка - идентификатор для проверки.
//  ТекстСообщения - Строка - если идентификатор некорректен, то в данный параметр будет помещен текст с причиной некорректности
//
// Возвращаемое значение:
//  Истина       - идентификатор содержит только цифры или пустой;
//  Ложь         - идентификатор содержит не только цифры.
//
Функция ИдентификаторКорректен(Идентификатор, ТекстСообщения = "") Экспорт
	
	Если ТипЗнч(Идентификатор) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Идентификатор) Тогда
		ТекстСообщения = НСтр("ru = 'Идентификатор не указан'");
		Возврат Истина;
	КонецЕсли;
	
	Для а = 1 По СтрДлина(Идентификатор) Цикл
		КодСимвола = КодСимвола(Сред(Идентификатор, а, 1));
		Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
			ТекстСообщения = НСтр("ru = 'Идентификатор ""%Идентификатор%"" содержит нецифровые символы'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Идентификатор%", Идентификатор);
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Действие

Функция ДействиеОтправка() Экспорт
	
	Возврат "Отправка";
	
КонецФункции

Функция ДействиеПолучениеКМ() Экспорт
	
	Возврат "ПолучениеКМ";
	
КонецФункции

Функция ДействиеВыгрузкаКМ() Экспорт
	
	Возврат "ВыгрузкаКМ";
	
КонецФункции

Функция ДействиеВыгрузка() Экспорт
	
	Возврат "Выгрузка";
	
КонецФункции

Функция ДействиеОтзыв() Экспорт
	
	Возврат "Отзыв";
	
КонецФункции

Функция ДействиеОтклонение() Экспорт	
	
	Возврат "Отклонение";
	
КонецФункции

Функция ДействиеПодтверждение() Экспорт
	
	Возврат "Подтверждение";
	
КонецФункции

Функция ДействиеОтклонениеОтзыва() Экспорт	
	
	Возврат "ОтклонениеОтзыва";	
	
КонецФункции

Функция ДействиеОтклонениеДополнительногоИлиИсправленного() Экспорт	
	
	Возврат "ОтклонениеДополнительногоИлиИсправленного";
	
КонецФункции

#КонецОбласти

#Область ИСМПТ

Функция АдресСервера_ИСМП(ВидПродукции = Неопределено, Авторизация = Ложь) Экспорт
	
	АдресИСМПТКонстанта = ИнтеграцияИСМПТКВызовСервера.ПолучитьАдресаСерверовИС().АдресИСМПТ;
	АдресИСМПТ 			= ИнтеграцияИСМПТКВызовСервера.ОбработатьАдресИСМПТКонстанта(АдресИСМПТКонстанта);
		
	Возврат АдресИСМПТ;
	
КонецФункции

// Возвращает параметры для отправки HTTP запросов ИС МП.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ИспользоватьЗащищенноеСоединение - Булево - Признак использования SSL.
// * Таймаут - Число - Таймаут соединения.
// * Порт - Число - Порт соединения.
// * Сервер - Строка - Адрес сервера.
// * ПредставлениеСервиса - Строка - Представления сервиса.
//
Функция ПараметрыОтправкиHTTPЗапросов_ИСМП(ВидПродукции = Неопределено, Авторизация = Ложь) Экспорт
	
	ПараметрыОтправкиHTTPЗапросов = Новый Структура;
	ПараметрыОтправкиHTTPЗапросов.Вставить("ПредставлениеСервиса",             РаботаСТекстамиИСМПТККлиентСервер.НаименованиеИСМПТ());
	ПараметрыОтправкиHTTPЗапросов.Вставить("Сервер",                           АдресСервера_ИСМП(ВидПродукции, Авторизация));
	ПараметрыОтправкиHTTPЗапросов.Вставить("Порт",                             443);
	ПараметрыОтправкиHTTPЗапросов.Вставить("Таймаут",                          60);
	ПараметрыОтправкиHTTPЗапросов.Вставить("ИспользоватьЗащищенноеСоединение", Истина);
	
	Возврат ПараметрыОтправкиHTTPЗапросов;
	
КонецФункции

// Инициализировать структуру параметров запроса для получения ключа сессии.
// 
// Параметры:
// 	Организация - ОпределяемыйТип.Организация - Организация.
Функция ПараметрыЗапросаКлючаСессии_ИСМП(Организация = Неопределено) Экспорт
	
	ПараметрыОтправкиHTTPЗапросов = ПараметрыОтправкиHTTPЗапросов_ИСМП(Неопределено, Истина);
	
	ПараметрыЗапроса = ИнтерфейсИСМПТККлиентСервер.ПараметрыЗапросаКлючаСессииИСМПТ();
	ПараметрыЗапроса.Организация = Организация;
	
	ПараметрыЗапроса.ПредставлениеСервиса             = ПараметрыОтправкиHTTPЗапросов.ПредставлениеСервиса;
	ПараметрыЗапроса.Сервер                           = ПараметрыОтправкиHTTPЗапросов.Сервер;
	ПараметрыЗапроса.Порт                             = ПараметрыОтправкиHTTPЗапросов.Порт;
	ПараметрыЗапроса.Таймаут                          = ПараметрыОтправкиHTTPЗапросов.Таймаут;
	ПараметрыЗапроса.ИспользоватьЗащищенноеСоединение = ПараметрыОтправкиHTTPЗапросов.ИспользоватьЗащищенноеСоединение;
	
	ПараметрыЗапроса.ИмяПараметраСеанса                = "ДанныеКлючаСессииИСМПТК";
	ПараметрыЗапроса.АдресЗапросаПараметровАвторизации = "api/v3/true-api/auth/key";
	ПараметрыЗапроса.АдресЗапросаКлючаСессии           = "api/v3/true-api/auth/simpleSignIn";
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ПередаватьЦеновыеПоказателиВДокументахИСМПТК() Экспорт

	//Включение опции приводит к добавлению в Акты п/п (ИС МПТ) новой табличной части "Итоги", 
	//а также устанавливает контроль на обязательное указание ценовых и суммовых показателей 
	//в итогах в Актах п/п (ИС МПТ), оформленных для Табачной продукции. 
	//Для Обувной продукции заполнение итоговых данных строго не контролируется. 
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ИСЦЭДМ

// Инициализировать структуру параметров запроса для получения ключа сессии.
// 
// Параметры:
// ПрофильДоступаКЭДО - структура, в которой - СтруктурнаяЕдиница,
// ИмяАутентификацииИСЦЭДМ, ПарольАутентификацииИСЦЭДМ, БИНОрганизации, Пользователь.
Функция ПараметрыЗапросаКлючаСессии_ИСЦЭДМ(ПрофильДоступаКЭДО = Неопределено) Экспорт
	
	ПараметрыОтправкиHTTPЗапросов = ПараметрыОтправкиHTTPЗапросов_ИСЦЭДМ(Неопределено, Истина);
	
	ПараметрыЗапроса = ИнтерфейсИСМПТККлиентСервер.ПараметрыЗапросаКлючаСессииИСЦЭДМ();
	ПараметрыЗапроса.ПрофильДоступаКЭДО = ПрофильДоступаКЭДО;
	
	ПараметрыЗапроса.ПредставлениеСервиса = ПараметрыОтправкиHTTPЗапросов.ПредставлениеСервиса;
	ПараметрыЗапроса.Сервер  = ПараметрыОтправкиHTTPЗапросов.Сервер;
	ПараметрыЗапроса.Порт    = ПараметрыОтправкиHTTPЗапросов.Порт;
	ПараметрыЗапроса.Таймаут = ПараметрыОтправкиHTTPЗапросов.Таймаут;
	ПараметрыЗапроса.ИспользоватьЗащищенноеСоединение = ПараметрыОтправкиHTTPЗапросов.ИспользоватьЗащищенноеСоединение;
	
	ПараметрыЗапроса.ИмяПараметраСеанса = "ДанныеКлючаСессииИСЦЭДМ";
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция АдресСервера_ИСЦЭДМ(ВидПродукции = Неопределено, Авторизация = Ложь) Экспорт
	
	АдресИСЦЭДМКонстанта = ИнтеграцияИСМПТКВызовСервера.ПолучитьАдресаСерверовИС().АдресИСЦЭДМ;
	АдресИСЦЭДМ 			= ИнтеграцияИСМПТКВызовСервера.ОбработатьАдресИСМПТКонстанта(АдресИСЦЭДМКонстанта);
		
	Возврат АдресИСЦЭДМ;
	
КонецФункции

// Возвращает параметры для отправки HTTP запросов ИС ЦЭДМ.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ИспользоватьЗащищенноеСоединение - Булево - Признак использования SSL.
// * Таймаут - Число - Таймаут соединения.
// * Порт - Число - Порт соединения.
// * Сервер - Строка - Адрес сервера.
// * ПредставлениеСервиса - Строка - Представления сервиса.
//
Функция ПараметрыОтправкиHTTPЗапросов_ИСЦЭДМ(ВидПродукции = Неопределено, Авторизация = Ложь) Экспорт
	
	ПараметрыОтправкиHTTPЗапросов = Новый Структура;
	ПараметрыОтправкиHTTPЗапросов.Вставить("ПредставлениеСервиса", "ИС ЦЭДМ");
	ПараметрыОтправкиHTTPЗапросов.Вставить("Сервер",               АдресСервера_ИСЦЭДМ(ВидПродукции, Авторизация));
	ПараметрыОтправкиHTTPЗапросов.Вставить("Порт",                 443);
	ПараметрыОтправкиHTTPЗапросов.Вставить("Таймаут",              60);
	ПараметрыОтправкиHTTPЗапросов.Вставить("ИспользоватьЗащищенноеСоединение", Истина);
	
	Возврат ПараметрыОтправкиHTTPЗапросов;
	
КонецФункции

#КонецОбласти
