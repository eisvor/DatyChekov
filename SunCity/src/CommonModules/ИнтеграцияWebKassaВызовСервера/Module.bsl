
////////////////////////////////////////////////////////////////////////////////
// ИнтеграцияWebKassaВызовСервера: общий механизм интеграции с сервисом 1С:WebKassa.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Функция ПолучитьПользователейОрганизации(Организация = Неопределено) Экспорт
	
	Если Организация = Неопределено Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	Возврат Справочники.НастройкиИнтеграцииWebKassa.ПользователиОрганизации(Организация);
	
КонецФункции

Функция АдресСервиса(Организация) Экспорт
	Возврат Справочники.НастройкиИнтеграцииWebKassa.АдресСервиса(Организация);
КонецФункции

Функция СерийныйНомерЗаполнен(КассаККМ) Экспорт
	Возврат Не ПустаяСтрока(ИнтеграцияWebKassaВызовСервераПереопределяемый.ЗначениеРеквизитаОбъекта(КассаККМ, "СерийныйНомер"));
КонецФункции

Функция ИзменитьСерийныйНомер(КассаККМ, НовыйСерийныйНомер) Экспорт
	
	Результат = Ложь;
	
	НачатьТранзакцию();
	
	Попытка
		
		// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(КассаККМ.Ссылка.Метаданные().ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", КассаККМ.Ссылка);
		Блокировка.Заблокировать();
		
		ОбъектДляОбработки = КассаККМ.Ссылка.ПолучитьОбъект();
		Если ОбъектДляОбработки = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		ОбъектДляОбработки.СерийныйНомер = НовыйСерийныйНомер;
		ОбъектДляОбработки.Записать();
		ЗафиксироватьТранзакцию();
		
		Результат = Истина;
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = НСтр("ru = 'Не удалось серийный номер %Ссылка% по причине: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", КассаККМ.Ссылка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(ИнтеграцияWebKassaКлиентСервер.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
			КассаККМ.Ссылка.Метаданные(), КассаККМ.Ссылка, ТекстСообщения);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ИзменитьРегистрационныйНомер(СерийныйНомер, НовыйРегистрационныйНомер) Экспорт
	
	//изменение регистрационного номера не используется
	Возврат Истина;
	
	Результат = Ложь;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КассыККМ.Ссылка
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.СерийныйНомер = &СерийныйНомер");
	
	Запрос.УстановитьПараметр("СерийныйНомер", СерийныйНомер);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		НачатьТранзакцию();
		
		Результат = Ложь;
		
		Попытка
			
			// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(Выборка.Ссылка.Метаданные().ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ОбъектДляОбработки = Выборка.Ссылка.ПолучитьОбъект(); 
			Если ОбъектДляОбработки = Неопределено Тогда
				ОтменитьТранзакцию();
				Возврат Результат;
			КонецЕсли;
			
			ОбъектДляОбработки.РегистрационныйНомер = НовыйРегистрационныйНомер;
			ОбъектДляОбработки.Записать();
			
			ЗафиксироватьТранзакцию();
			
			Результат = Истина;
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось изменить регистрационный номер %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ИнтеграцияWebKassaКлиентСервер.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Ссылка.Метаданные(), Выборка.Ссылка, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоответствиеКассККМСерийнымНомерам(СерийныеНомера) Экспорт
	
	СоответствиеКасс = Новый Соответствие;
	
	//ТипыКассККМ = Метаданные.ОпределяемыеТипы.КассаККМWebKassa.Тип.Типы();
	ТипыКассККМ = Новый Массив;
	ТипыКассККМ.Добавить("Справочник.ПодключаемоеОборудование");
	
	Запрос = Новый Запрос;
	ШаблонТекста = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.СерийныйНомер КАК СерийныйНомер
	|ИЗ
	|	%ИмяОбъектаМетаданных% КАК Таблица
	|ГДЕ
	|	Таблица.СерийныйНомер В(&СерийныеНомера)";
	
	ТекстИтоги = "
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка)
	|ПО
	|	СерийныйНомер";
	
	Запрос.УстановитьПараметр("СерийныеНомера", СерийныеНомера);
	
	ПерваяИтерация = Истина;
	Для Каждого ТипЗначенияСтрока Из ТипыКассККМ Цикл
		//ОбъектСсылка = Новый(ТипЗначения);
		//ТекстЗапроса = СтрЗаменить(ШаблонТекста, "%ИмяОбъектаМетаданных%", ОбъектСсылка.Метаданные().ПолноеИмя());
		ТекстЗапроса = СтрЗаменить(ШаблонТекста, "%ИмяОбъектаМетаданных%", ТипЗначенияСтрока);
		Если НЕ ПерваяИтерация Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ПерваяИтерация = Ложь;
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса + ТекстИтоги;
	
	ВыборкаИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИтоги.Следующий() Цикл
		ВыборкаДетали = ВыборкаИтоги.Выбрать();
		МассивКасс = Новый Массив;
		Пока ВыборкаДетали.Следующий() Цикл
			МассивКасс.Добавить(ВыборкаДетали.Ссылка);
		КонецЦикла;
		СоответствиеКасс.Вставить(ВыборкаИтоги.СерийныйНомер, МассивКасс);
	КонецЦикла;
	
	Возврат СоответствиеКасс;
	
КонецФункции

// Возвращает таблицу значений на основании массива структур
// 
// Параметры:
//	МассивСтруктур - МассивСтруктур - массив структур, которые будут преобразованы в таблиц значений.
//										Свойства структуры первого элемента массива определяютс состав колонок результирующей таблицы
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица значений, созданная из массива структур
// 
Функция МассивВТаблицуЗначений(МассивСтруктур) Экспорт
	Таблица = Новый ТаблицаЗначений;
	// Создадим колонки по первой структуре массива
	Если ТипЗнч(МассивСтруктур) = Тип("Массив")
		И МассивСтруктур.Количество() <> 0 Тогда
		ПерваяСтруктура = МассивСтруктур[0];
		Для Каждого Свойство Из ПерваяСтруктура Цикл 
			Таблица.Колонки.Добавить(Свойство.Ключ, ОписаниеТиповПоТипу(ТипЗнч(Свойство.Значение)));
		КонецЦикла;
		
		Для Каждого Структура Из МассивСтруктур Цикл 
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Структура);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Таблица;
КонецФункции

// Возвращает описание типов по переданному типу
// 
// Параметры:
//	Тип - Тип - тип значения
//
// Возвращаемое значение:
//	ОписаниеТипов - созданное на основании переданного типа описание типов
//
Функция ОписаниеТиповПоТипу(Тип) Экспорт
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип);
	
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	
	Возврат ОписаниеТипов;
КонецФункции

// Возвращает организации, по которым нет настроек
// 
Функция ОрганизацииБезНастроек() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.Ссылка В (&СписокОрганизаций)";
	
	ЗарегистрированныеОрганизации = Справочники.НастройкиИнтеграцииWebKassa.ЗарегистрированныеОрганизации();
	Запрос.УстановитьПараметр("СписокОрганизаций", ЗарегистрированныеОрганизации);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Функция выполняет запрос к сервису и возвращает результат выполнения операции.
//
Функция ОтправитьЗапросНаСервисWebkassa(АдресСервиса, ПутьОперации, ЗапросJSON) Экспорт
	
	Возврат ИнтеграцияWebKassaКлиентСервер.ОтправитьЗапросНаСервисWebkassa(АдресСервиса, ПутьОперации, ЗапросJSON);
	
КонецФункции

Функция ЗапросJSON(ПараметрыЗапроса) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ПараметрыЗапроса);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция ПрочитатьОтветJSON(РезультатЗапроса) Экспорт
	
	ОтветСервиса = Новый ЧтениеJSON;
	ОтветСервиса.УстановитьСтроку(РезультатЗапроса);
	ОбъектыJSON = ПрочитатьJSON(ОтветСервиса);
	ОтветСервиса.Закрыть();
	
	Возврат ОбъектыJSON;
	
КонецФункции

#Область Печать

// Функция печати фискального чека.
//
Функция ПечатьФискальногоЧека(СтруктураДанных, ТипЧека, Параметры, ТабДок, ДополнительныеДанные = Неопределено) Экспорт
	
	Попытка
		ФорматДенежный = "ЧЦ=15; ЧДЦ=2; ЧГ=0; ЧН=";
		ФорматКоличество = "ЧЦ=15; ЧДЦ=3; ЧН=; ЧГ=0";
		ФорматЦелых = "ЧГ=0; ЧН=";
		ФорматДаты = "ДФ=""дд.ММ.гг ЧЧ:мм""";
		ФорматБезПробела = "ЧГ=0";
		Если Параметры.Свойство("ШиринаЛенты") Тогда
			Если НЕ ЗначениеЗаполнено(Параметры.ШиринаЛенты) ИЛИ Параметры.ШиринаЛенты = Неопределено Тогда
				ШиринаЛенты = 24;
			Иначе
				ШиринаЛенты = Параметры.ШиринаЛенты;
			КонецЕсли;
		Иначе
			ШиринаЛенты = 24;
		КонецЕсли;
		Если Параметры.Свойство("ЯзыкПоУмолчанию") И ЗначениеЗаполнено(Параметры.ЯзыкПоУмолчанию) Тогда
			СтруктураНаименованияПолей = ИнтеграцияWebKassaКлиентСервер.ПолучитьСоответствиеНаименованийПолей(Параметры.ЯзыкПоУмолчанию);
		Иначе
			СтруктураНаименованияПолей = ИнтеграцияWebKassaКлиентСервер.ПолучитьСоответствиеНаименованийПолей(ПредопределенноеЗначение("Перечисление.ЯзыкWebKassaФискальныеРегистраторы.Русский"));
		КонецЕсли;
		
		ПерваяКолонка = ПолучитьПервуюКолонку(ШиринаЛенты);
		ПоследняяКолонка = ПерваяКолонка + 1;
		
		ТабДок = Новый ТабличныйДокумент;
		ОбнулитьШиринуПолей(ТабДок);
		Макет = ИнтеграцияWebKassaВызовСервераПереопределяемый.ПолучитьМакетПечатнойФормы("Обработка.Панель1СWebKassa.WebkassaМакетФискальногоЧека");
		
		Если ДополнительныеДанные.Свойство("ЭтоДубликат") Тогда
			ОблДубликат = Макет.ПолучитьОбласть("Дубликат | _" + ШиринаЛенты);
			ОблДубликат.Параметры.НадписьДубликат = СтруктураНаименованияПолей.НадписьДубликат;
			ТабДок.Вывести(ОблДубликат);
		КонецЕсли;
		
		ОблШапкаОрг = Макет.ПолучитьОбласть("ШапкаОрганизация | _" + ШиринаЛенты);
		ОблШапкаОрг.Параметры.Организация = ДополнительныеДанные.Организация;
		ОблШапкаОрг.Параметры.ИИН = СтруктураНаименованияПолей.БИН + " " + ДополнительныеДанные.ИИН;
		ОблШапкаОрг.Параметры.ДокументНДС = СтруктураНаименованияПолей.НДССерия + " " + ДополнительныеДанные.СерияСвидетельстваПоНДС
			+ " № " + ДополнительныеДанные.НомерСвидетельстваПоНДС;
		ОблШапкаОрг.Параметры.ИНК = СтруктураНаименованияПолей.ИНК + ": " + Формат(СтруктураДанных.ИНК, ФорматБезПробела);
		ОблШапкаОрг.Параметры.РНК = СтруктураНаименованияПолей.РНК + ": " + СтруктураДанных.РегистрационныйНомерККМ;
		ОблШапкаОрг.Параметры.ЗНК = СтруктураНаименованияПолей.ЗНК + ": " + СтруктураДанных.СерийныйНомерККМ;
		ТабДок.Вывести(ОблШапкаОрг);
		
		ОблШапкаЧека = Макет.ПолучитьОбласть("ШапкаЧека | _" + ШиринаЛенты);
		ОблШапкаЧека.Параметры.Кассир = СтруктураНаименованияПолей.Кассир + ": " + ДополнительныеДанные.Кассир;
		ОблШапкаЧека.Параметры.НомерСмены = СтруктураНаименованияПолей.Смена + " №" + Формат(СтруктураДанных.НомерСмены, ФорматБезПробела);
		ОблШапкаЧека.Параметры.НомерЧека = СтруктураНаименованияПолей.Чек + " №" + Формат(СтруктураДанных.НомерВРамкахСмены, ФорматБезПробела);
		
		Если СтруктураДанных.OperationType = 0 Тогда
			ОблШапкаЧека.Параметры.ТипЧека = СтруктураНаименованияПолей.Покупка;
		ИначеЕсли СтруктураДанных.OperationType = 1 Тогда
			ОблШапкаЧека.Параметры.ТипЧека = СтруктураНаименованияПолей.ВозвратПокупки;
		ИначеЕсли СтруктураДанных.OperationType = 2 Тогда
			ОблШапкаЧека.Параметры.ТипЧека = СтруктураНаименованияПолей.Продажа;
		ИначеЕсли СтруктураДанных.OperationType = 3 Тогда
			ОблШапкаЧека.Параметры.ТипЧека = СтруктураНаименованияПолей.ВозвратПродажи;
		КонецЕсли;
		
		ТабДок.Вывести(ОблШапкаЧека);
		
		//вывод ИИН/БИН покупателя
		Если СтруктураДанных.Свойство("CustomerXin") И ЗначениеЗаполнено(СтруктураДанных.CustomerXin) Тогда
			ОблРазделительВнут = Макет.ПолучитьОбласть("КонецТелоЧека | _" + ШиринаЛенты);
			ОблНефискальная = Макет.ПолучитьОбласть("ТелоНефискальнаяИнформация | _" + ШиринаЛенты);
			ИнформацияИИН = СтруктураНаименованияПолей.ИИНБИНПокупателя + СтруктураДанных.CustomerXin;
			ОблНефискальная.Параметры.НефискальнаяИнформация = ИнформацияИИН;
			ТабДок.Вывести(ОблНефискальная);
			ТабДок.Вывести(ОблРазделительВнут);
		КонецЕсли;
		
		СуммаПоЧеку = 0;
		СуммаНДС = 0;
		СуммаСкидки = 0;
		СуммаНаценки = 0;
		ОблТелоЧека = Макет.ПолучитьОбласть("ТелоЧека | _" + ШиринаЛенты);
		ОблТелоЧекаСкидка = Макет.ПолучитьОбласть("ТелоЧекаСкидка | _" + ШиринаЛенты);
		ОблТелоЧекаИтого = Макет.ПолучитьОбласть("ТелоЧекаИтого | _" + ШиринаЛенты);
		ПорядковыйНомер = 0;
		Для Каждого Позиция Из СтруктураДанных.Positions Цикл
			ПорядковыйНомер = ПорядковыйНомер + 1;
			
			ОблТелоЧека.Параметры.НаименованиеТовара =
				Формат(ПорядковыйНомер, ФорматБезПробела) + ". " + Позиция.PositionName;
				
			Если Позиция.Свойство("Mark") Тогда 
				ОблТелоЧека.Параметры.НаименованиеТовара = ОблТелоЧека.Параметры.НаименованиеТовара + Символы.ПС + Позиция.Mark;
			КонецЕсли; 
			
			НаименованиеЕдиницыИзмерения = ИнтеграцияWebKassaВызовСервераПереопределяемый.ПолучитьНаименованиеЕдиницыИзмерения(Позиция.UnitCode);
			
			ОблТелоЧека.Параметры.КоличествоЦена =
				Формат(Позиция.Count, ФорматКоличество) + " " + НаименованиеЕдиницыИзмерения + " x " + Формат(Позиция.Price, ФорматДенежный);
			
			ТабДок.Вывести(ОблТелоЧека);
			
			СуммаСтроки = Окр(Позиция.Price * Позиция.Count, 2);
			Если Позиция.Discount <> 0 Тогда
				ОблТелоЧекаСкидка.Параметры.ЗагСкидка = СтруктураНаименованияПолей.НадписьСкидка;
				ОблТелоЧекаСкидка.Параметры.Скидка = Формат(Позиция.Discount, ФорматДенежный);
				ТабДок.Вывести(ОблТелоЧекаСкидка);
				
				СуммаСтроки = СуммаСтроки - Позиция.Discount;
				СуммаСкидки = СуммаСкидки + Позиция.Discount;
			КонецЕсли;
			
			Если Позиция.Markup <> 0 Тогда
				ОблТелоЧекаСкидка.Параметры.ЗагСкидка = СтруктураНаименованияПолей.НадписьНаценка;
				ОблТелоЧекаСкидка.Параметры.Скидка = Формат(Позиция.Markup, ФорматДенежный);
				ТабДок.Вывести(ОблТелоЧекаСкидка);
				
				СуммаСтроки  = СуммаСтроки  + Позиция.Markup;
				СуммаНаценки = СуммаНаценки + Позиция.Markup;
			КонецЕсли;
			
			Если Позиция.TaxType <> 0 И Позиция.Tax <> 0 Тогда
				СтавкаНДС = ИнтеграцияWebKassaКлиентСервер.ВычислитьСтавкуНДС(Позиция);
				ОблТелоЧекаСкидка.Параметры.ЗагСкидка = СтрШаблон(СтруктураНаименованияПолей.НДС + " %1%%", СтавкаНДС);
				ОблТелоЧекаСкидка.Параметры.Скидка = Формат(Позиция.Tax, ФорматДенежный);
				ТабДок.Вывести(ОблТелоЧекаСкидка);
			Иначе
				ОблТелоЧекаСкидка.Параметры.ЗагСкидка = СтруктураНаименованияПолей.НДС + " 0";
				ОблТелоЧекаСкидка.Параметры.Скидка = Формат(Позиция.Tax, ФорматДенежный);
				ТабДок.Вывести(ОблТелоЧекаСкидка);
			КонецЕсли;
			
			ОблТелоЧекаИтого.Параметры.ИтогоСумма = Формат(СуммаСтроки, ФорматДенежный);
			ОблТелоЧекаИтого.Параметры.НадписьСтоимость = СтруктураНаименованияПолей.НадписьСтоимость;
			
			СуммаПоЧеку = СуммаПоЧеку + СуммаСтроки;
			СуммаНДС = СуммаНДС + Позиция.Tax;
			
			ТабДок.Вывести(ОблТелоЧекаИтого);
		КонецЦикла;
		
		ОблКонецТелаЧека = Макет.ПолучитьОбласть("КонецТелоЧека | _" + ШиринаЛенты);
		ТабДок.Вывести(ОблКонецТелаЧека);
		
		СуммаПлатежей = 0;
		ОблПодвалЧекаОплата = Макет.ПолучитьОбласть("ПодвалЧекаОплата | _" + ШиринаЛенты);
		ТипыОплаты = Новый Массив;
		ТипыОплаты.Добавить(СтруктураНаименованияПолей.Наличные + ":");
		ТипыОплаты.Добавить(СтруктураНаименованияПолей.БанковскаяКарта + ":");
		ТипыОплаты.Добавить(СтруктураНаименованияПолей.ОплатаВКредит + ":");
		ТипыОплаты.Добавить(СтруктураНаименованияПолей.ОплатаТарой + ":");
		ТипыОплаты.Добавить(СтруктураНаименованияПолей.Мобильные + ":");
		ТипОплатыССервера = СтруктураНаименованияПолей.ТипОплаты;
		Для Каждого Платеж Из СтруктураДанных.Payments Цикл
			Если Платеж.Свойство("PaymentType") Тогда
				ОблПодвалЧекаОплата.Параметры.ТипОплаты = ТипыОплаты[Платеж.PaymentType];
			ИначеЕсли Платеж.Свойство("PaymentTypeName") Тогда
				ОблПодвалЧекаОплата.Параметры.ТипОплаты = ТипОплатыССервера.Получить(Платеж.PaymentTypeName) + ":";
			КонецЕсли;
			ОблПодвалЧекаОплата.Параметры.Оплата = Формат(Платеж.Sum, ФорматДенежный);
			СуммаПлатежей = СуммаПлатежей + Платеж.Sum;
			ТабДок.Вывести(ОблПодвалЧекаОплата);
		КонецЦикла;
		
		ОблПодвалЧека = Макет.ПолучитьОбласть("ПодвалЧекаИтог | _" + ШиринаЛенты);
		ОблПодвалЧека.Параметры.Сдача = Формат(СуммаПлатежей - СуммаПоЧеку, ФорматДенежный);
		ОблПодвалЧека.Параметры.Скидка = Формат(СуммаСкидки, ФорматДенежный);
		ОблПодвалЧека.Параметры.Наценка = Формат(СуммаНаценки, ФорматДенежный);
		ОблПодвалЧека.Параметры.ИтогоСумма = Формат(СуммаПоЧеку, ФорматДенежный);
		ОблПодвалЧека.Параметры.НДС = Формат(СуммаНДС, ФорматДенежный);
		
		ОблПодвалЧека.Параметры.НадписьСдача = СтруктураНаименованияПолей.НадписьСдача;
		ОблПодвалЧека.Параметры.НадписьСкидка = СтруктураНаименованияПолей.НадписьСкидка;
		ОблПодвалЧека.Параметры.НадписьНаценка = СтруктураНаименованияПолей.НадписьНаценка;
		ОблПодвалЧека.Параметры.НадписьИтого = СтруктураНаименованияПолей.НадписьИтого;
		ОблПодвалЧека.Параметры.НадписьНДС = СтруктураНаименованияПолей.НадписьНДС;
		
		ТабДок.Вывести(ОблПодвалЧека);
		
		ОблПодвалОФД = Макет.ПолучитьОбласть("ПодвалОФД | _" + ШиринаЛенты);
		ОблПодвалОФД.Параметры.ФискальныйЧек =
			СтруктураНаименованияПолей.ФискальныйЧекНомер + Формат(СтруктураДанных.ФискальныйНомер, ФорматБезПробела);
		ОблПодвалОФД.Параметры.НадписьФискальныйЧекФП = СтруктураНаименованияПолей.НадписьФискальныйЧекФП;
		
		ОблПодвалОФД.Параметры.ВремяЧека = СтруктураНаименованияПолей.Время + ": " + Формат(СтруктураДанных.ДатаЧека, ФорматДаты);
		ОблПодвалОФД.Параметры.АдресККМ = СтруктураНаименованияПолей.Адрес + ": " + СтруктураДанных.АдресККМ;
		ОблПодвалОФД.Параметры.КодККМ = СтруктураНаименованияПолей.КодККМ + ": " + СтруктураДанных.РегистрационныйНомерККМ;
		//заполнение данных ОФД
		ОписаниеОФД = Неопределено;
		Если СтруктураДанных.Свойство("Cashbox") Тогда
			Если ЗначениеЗаполнено(СтруктураДанных.Cashbox.Ofd) Тогда
				ОписаниеОФД = СтруктураДанных.Cashbox.Ofd;
			КонецЕсли;
		ИначеЕсли СтруктураДанных.Свойство("Ofd") Тогда
			Если ЗначениеЗаполнено(СтруктураДанных.Ofd) Тогда
				ОписаниеОФД = СтруктураДанных.Ofd;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОписаниеОФД) Тогда
			ОблПодвалОФД.Параметры.НаименованиеОФД = ОписаниеОФД.Name;
			ОблПодвалОФД.Параметры.ОператорФискальныхДанных = СтруктураНаименованияПолей.ОператорФискальныхДанных;
			ОблПодвалОФД.Параметры.НадписьДляПроверкиЧекаЗайдитеНаСайт = СтруктураНаименованияПолей.НадписьДляПроверкиЧекаЗайдитеНаСайт;
			ОблПодвалОФД.Параметры.АдресОФД = ОписаниеОФД.Host;
		КонецЕсли;
		
		Если СтруктураДанных.АвтономныйРежимРаботы Тогда
			ОблПодвалОФД.Параметры.АвтономныйРежим = СтруктураНаименованияПолей.ЧекСформированВАвтономномРежиме;
		КонецЕсли;
		ТабДок.Вывести(ОблПодвалОФД);
		
		Попытка
			ДанныеQRКода = ИнтеграцияWebKassaВызовСервераПереопределяемый.ПолучитьQRКод(СтруктураДанных.СсылкаНаЧек, 1, 130);
			ОблЛоготип = Макет.ПолучитьОбласть("ОбластьЛоготип | _" + ШиринаЛенты);
			ВывестиЛоготипВТабличныйДокумент(ОблЛоготип, ДанныеQRКода, "Логотип"+ШиринаЛенты);
			ТабДок.Вывести(ОблЛоготип);
		Исключение
			//ОписаниеОшибки()
		КонецПопытки; 
		
		ТабДок.ОбластьПечати = ТабДок.Область(1,ПерваяКолонка,ТабДок.ВысотаТаблицы,ПоследняяКолонка);
		Результат = "";
	Исключение
		Результат = ИнформацияОбОшибке().Описание;
		ТабДок = Неопределено;
	КонецПопытки;

	Возврат Результат;
	
КонецФункции
// Функция печати нефискального чека.
//
Функция ПечатьНефискальногоЧека(Текст, Параметры, ТабДок, ДополнительныеДанные = Неопределено) Экспорт
	
	Попытка
		ФорматДенежный = "ЧЦ=15; ЧДЦ=2; ЧГ=0; ЧН=";
		ФорматЦелых = "ЧГ=0; ЧН=";
		ФорматДаты = "ДФ=""дд.ММ.гг ЧЧ:мм""";
		ФорматБезПробела = "ЧГ=0";
		Если Параметры.Свойство("ШиринаЛенты") Тогда
			Если НЕ ЗначениеЗаполнено(Параметры.ШиринаЛенты) ИЛИ Параметры.ШиринаЛенты = Неопределено Тогда
				ШиринаЛенты = 24;
			Иначе
				ШиринаЛенты = Параметры.ШиринаЛенты;
			КонецЕсли;
		Иначе
			ШиринаЛенты = 24;
		КонецЕсли;
		ПерваяКолонка = ПолучитьПервуюКолонку(ШиринаЛенты);
		ПоследняяКолонка = ПерваяКолонка + 1;
		
		ТабДок = Новый ТабличныйДокумент;
		ОбнулитьШиринуПолей(ТабДок);
		Макет = ИнтеграцияWebKassaВызовСервераПереопределяемый.ПолучитьМакетПечатнойФормы("Обработка.Панель1СWebKassa.WebkassaМакетФискальногоЧека");
		
		ОблКонецТелаЧека = Макет.ПолучитьОбласть("КонецТелоЧека | _" + ШиринаЛенты);
		ТабДок.Вывести(ОблКонецТелаЧека);
		
		//ТелоНефискальнаяИнформация
		ОблТело = Макет.ПолучитьОбласть("ТелоНефискальнаяИнформация | _" + ШиринаЛенты);
		//цикл по строкам текста
		НефискальнаяИнформация = "";
		Для НомерСтроки = 1 По СтрЧислоСтрок(Текст) Цикл
			ВыделеннаяСтрока = СтрПолучитьСтроку(Текст, НомерСтроки);
			
			Если (Найти(ВыделеннаяСтрока, "[отрезка]") > 0)
			 Или (Найти(ВыделеннаяСтрока, "[cut]") > 0) Тогда
				
			Иначе
				НефискальнаяИнформация = НефискальнаяИнформация + Символы.ПС + ВыделеннаяСтрока;
			КонецЕсли;
			
		КонецЦикла;
		
		ОблТело.Параметры.НефискальнаяИнформация = НефискальнаяИнформация;
		ТабДок.Вывести(ОблТело);
		ТабДок.Вывести(ОблКонецТелаЧека);
		
		ТабДок.ОбластьПечати = ТабДок.Область(1, ПерваяКолонка, ТабДок.ВысотаТаблицы, ПоследняяКолонка);
		Результат = "";
	Исключение
		Результат = ИнформацияОбОшибке().Описание;
		ТабДок = Неопределено;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция печати X и Z отчета.
//
Функция ПечатьXZОтчета(СтруктураДанных, ТипОтчета, Параметры, ТабДок, ДополнительныеДанные = Неопределено) Экспорт
	
	Попытка
		ФорматДенежный = "ЧЦ=15; ЧДЦ=2; ЧГ=0; ЧН=";
		ФорматЦелых = "ЧГ=0; ЧН=";
		ФорматДаты = "ДФ=""дд.ММ.гг ЧЧ:мм""";
		ФорматБезПробела = "ЧГ=0";
		Если Параметры.Свойство("ШиринаЛенты") Тогда
			Если НЕ ЗначениеЗаполнено(Параметры.ШиринаЛенты) ИЛИ Параметры.ШиринаЛенты = Неопределено Тогда
				ШиринаЛенты = 24;
			Иначе
				ШиринаЛенты = Параметры.ШиринаЛенты;
			КонецЕсли;
		Иначе
			ШиринаЛенты = 24;
		КонецЕсли;
		ПерваяКолонка = ПолучитьПервуюКолонку(ШиринаЛенты);
		ПоследняяКолонка = ПерваяКолонка + 1;
		
		ТабДок = Новый ТабличныйДокумент;
		ОбнулитьШиринуПолей(ТабДок);
		Макет = ИнтеграцияWebKassaВызовСервераПереопределяемый.ПолучитьМакетПечатнойФормы("Обработка.Панель1СWebKassa.WebkassaМакетXZОтчета");
		
		ОблШапкаОрг = Макет.ПолучитьОбласть("ШапкаОрганизация | _" + ШиринаЛенты);
		ОблШапкаОрг.Параметры.Организация = СтруктураДанных.Data.TaxPayerName;
		ОблШапкаОрг.Параметры.ИИН = "БИН " + СтруктураДанных.Data.TaxPayerIN;
		ОблШапкаОрг.Параметры.ДокументНДС = "НДС Серия " + СтруктураДанных.Data.TaxPayerVATSeria
			+ " № " + СтруктураДанных.Data.TaxPayerVATNumber;
		ОблШапкаОрг.Параметры.ИНК = "ИНК: " + Формат(СтруктураДанных.Data.CashboxIN, ФорматБезПробела);
		ОблШапкаОрг.Параметры.РНК = "РНК: " + Формат(СтруктураДанных.Data.CashboxRN, ФорматБезПробела);
		ОблШапкаОрг.Параметры.ЗНК = "ЗНК: " + СтруктураДанных.Data.CashboxSN;
		ТабДок.Вывести(ОблШапкаОрг);
		
		ШапкаОтчета = Макет.ПолучитьОбласть("ШапкаОтчета | _" + ШиринаЛенты);
		Если ТипОтчета = 1 Тогда
			ШапкаОтчета.Параметры.ТипОтчета = "СМЕННЫЙ X-ОТЧЕТ"
		ИначеЕсли ТипОтчета = 2 Тогда
			ШапкаОтчета.Параметры.ТипОтчета = "СМЕННЫЙ Z-ОТЧЕТ"
		КонецЕсли;
		
		ШапкаОтчета.Параметры.ДатаОтчета = СтруктураДанных.Data.ReportOn;
		ШапкаОтчета.Параметры.Документ = "Документ №" + СтруктураДанных.Data.ReportNumber;
		ШапкаОтчета.Параметры.Кассир = "Кассир: " + СтруктураДанных.Data.CashierCode;
		ШапкаОтчета.Параметры.Смена = "Смена №" + СтруктураДанных.Data.ShiftNumber;
		Если СтруктураДанных.Data.Свойство("CloseOn") Тогда
			ШапкаОтчета.Параметры.ПериодСмены = СтруктураДанных.Data.StartOn + " - " + СтруктураДанных.Data.CloseOn;
		Иначе
			ШапкаОтчета.Параметры.ПериодСмены = СтруктураДанных.Data.StartOn;
		КонецЕсли;
		ШапкаОтчета.Параметры.СуммаНачалоПродаж   = Формат(СтруктураДанных.Data.StartNonNullable.Sell,       ФорматДенежный);
		ШапкаОтчета.Параметры.СуммаНачалоПокупок  = Формат(СтруктураДанных.Data.StartNonNullable.Buy,        ФорматДенежный);
		ШапкаОтчета.Параметры.СуммаНачалоВПродаж  = Формат(СтруктураДанных.Data.StartNonNullable.ReturnSell, ФорматДенежный);
		ШапкаОтчета.Параметры.СуммаНачалоВПокупок = Формат(СтруктураДанных.Data.StartNonNullable.ReturnBuy,  ФорматДенежный);
		ТабДок.Вывести(ШапкаОтчета);
		
		ТипыОпераций = Новый Соответствие;
		ТипыОпераций.Вставить("Sell",       "ПРОДАЖА");
		ТипыОпераций.Вставить("Buy",        "ПОКУПКА");
		ТипыОпераций.Вставить("ReturnSell", "ВОЗВРАТ ПРОДАЖИ");
		ТипыОпераций.Вставить("ReturnBuy",  "ВОЗВРАТ ПОКУПКИ");
		
		ТипыОплаты = Новый Массив;
		ТипыОплаты.Добавить("Наличные");
		ТипыОплаты.Добавить("Банковская карта");
		ТипыОплаты.Добавить("Оплата в кредит");
		ТипыОплаты.Добавить("Оплата тарой");
		ТипыОплаты.Добавить("Мобильный платеж");
		
		Для Каждого ТипОперации Из ТипыОпераций Цикл
			ЭлементыОпераций = Неопределено;
			ОплатаНаличными = 0;
			ОбщаяСуммаОпераций = 0;
			
			Если СтруктураДанных.Data.Свойство(ТипОперации.Ключ, ЭлементыОпераций) И ЭлементыОпераций<>Неопределено Тогда
				ТелоПоТипу = Макет.ПолучитьОбласть("ТелоПоТипу | _" + ШиринаЛенты);
				ТелоПоТипу.Параметры.ТипОперации = ТипОперации.Значение;
				ТелоПоТипу.Параметры.КоличествоОпераций = Формат(ЭлементыОпераций.Count, ФорматЦелых);
				
				Для Каждого ВидПлатежа Из ЭлементыОпераций.PaymentsByTypesApiModel Цикл
					ОбщаяСуммаОпераций = ОбщаяСуммаОпераций + ВидПлатежа.Sum;
				КонецЦикла;
				
				ТелоПоТипу.Параметры.СуммаОперации = Формат(ОбщаяСуммаОпераций, ФорматДенежный);
				ТабДок.Вывести(ТелоПоТипу);
				
				Для Каждого ВидПлатежа Из ЭлементыОпераций.PaymentsByTypesApiModel Цикл
					ТелоПоТипуОплата = Макет.ПолучитьОбласть("ТелоПоТипуОплата | _" + ШиринаЛенты);
					ТелоПоТипуОплата.Параметры.ТипОплаты = ТипыОплаты[ВидПлатежа.Type];
					ТелоПоТипуОплата.Параметры.Оплата = Формат(ВидПлатежа.Sum, ФорматДенежный);
					ТабДок.Вывести(ТелоПоТипуОплата);
				КонецЦикла;
				
				ТелоПоТипуДополнительно = Макет.ПолучитьОбласть("ТелоПоТипуДополнительно | _" + ШиринаЛенты);
				ТелоПоТипуДополнительно.Параметры.Скидки = Формат(ЭлементыОпераций.Discount, ФорматДенежный);
				ТелоПоТипуДополнительно.Параметры.Наценки = Формат(ЭлементыОпераций.Markup, ФорматДенежный);
				ТелоПоТипуДополнительно.Параметры.Получено = Формат(ЭлементыОпераций.Taken, ФорматДенежный);
				ТелоПоТипуДополнительно.Параметры.НДС = Формат(ЭлементыОпераций.VAT, ФорматДенежный);
				ТабДок.Вывести(ТелоПоТипуДополнительно);
			Иначе
				ТелоПоТипу = Макет.ПолучитьОбласть("ПустоеТелоПоТипу | _" + ШиринаЛенты);
				ТелоПоТипу.Параметры.ТипОперации = ТипОперации.Значение;
				ТелоПоТипу.Параметры.КоличествоОпераций = Формат(0, ФорматЦелых);
				ТелоПоТипу.Параметры.СуммаОперации = Формат(0, ФорматДенежный);
				ТабДок.Вывести(ТелоПоТипу);
			КонецЕсли;
		КонецЦикла;
		
		ПодвалОтчета = Макет.ПолучитьОбласть("ПодвалОтчета | _" + ШиринаЛенты);
		ПодвалОтчета.Параметры.Внесения = Формат(СтруктураДанных.Data.PutMoneySum, ФорматДенежный);
		ПодвалОтчета.Параметры.Выплаты = Формат(СтруктураДанных.Data.TakeMoneySum, ФорматДенежный);
		ПодвалОтчета.Параметры.НалВКассе = Формат(СтруктураДанных.Data.SumInCashbox, ФорматДенежный);
		ПодвалОтчета.Параметры.СуммаКонецПродаж = Формат(СтруктураДанных.Data.EndNonNullable.Sell, ФорматДенежный);
		ПодвалОтчета.Параметры.СуммаКонецПокупок = Формат(СтруктураДанных.Data.EndNonNullable.Buy, ФорматДенежный);
		ПодвалОтчета.Параметры.СуммаКонецВПродаж = Формат(СтруктураДанных.Data.EndNonNullable.ReturnSell, ФорматДенежный);
		ПодвалОтчета.Параметры.СуммаКонецВПокупок = Формат(СтруктураДанных.Data.EndNonNullable.ReturnBuy, ФорматДенежный);
		//контрольную сумму выводить не нужно
		//ПодвалОтчета.Параметры.КонторльнаяСумма = Формат(СтруктураДанных.Data.ControlSum, ФорматБезПробела);
		ПодвалОтчета.Параметры.ДокументовВсего =
			"Количество документов сформированных за смену: " + Формат(СтруктураДанных.Data.DocumentCount, ФорматЦелых);
		
		ТабДок.Вывести(ПодвалОтчета);
		
		Если ТипОтчета = 1 Тогда
			КонецОтчета = Макет.ПолучитьОбласть("КонецОтчета | _" + ШиринаЛенты);
		ИначеЕсли ТипОтчета = 2 Тогда
			КонецОтчета = Макет.ПолучитьОбласть("СменаЗакрыта | _" + ШиринаЛенты);
		КонецЕсли;
		ТабДок.Вывести(КонецОтчета);
		
		ТабДок.ОбластьПечати = ТабДок.Область(1, ПерваяКолонка, ТабДок.ВысотаТаблицы, ПоследняяКолонка);
		Результат = "";
	Исключение
		Результат = ИнформацияОбОшибке().Описание;
		ТабДок = Неопределено;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция печати чека внесения/изъятия.
//
Функция ПечатьЧекаВнесенияИзъятия(СтруктураДанных, Сумма, ТипЧека, Параметры, ТабДок, ДополнительныеДанные = Неопределено) Экспорт
	
	Попытка
		ФорматДенежный = "ЧЦ=15; ЧДЦ=2; ЧГ=0; ЧН=";
		ФорматЦелых = "ЧГ=0; ЧН=";
		ФорматДаты = "ДФ=""дд.ММ.гг ЧЧ:мм""";
		ФорматБезПробела = "ЧГ=0";
		Если Параметры.Свойство("ШиринаЛенты") Тогда
			Если НЕ ЗначениеЗаполнено(Параметры.ШиринаЛенты) ИЛИ Параметры.ШиринаЛенты = Неопределено Тогда
				ШиринаЛенты = 24;
			Иначе
				ШиринаЛенты = Параметры.ШиринаЛенты;
			КонецЕсли;
		Иначе
			ШиринаЛенты = 24;
		КонецЕсли;
		Если Параметры.Свойство("ЯзыкПоУмолчанию") И ЗначениеЗаполнено(Параметры.ЯзыкПоУмолчанию) Тогда
			СтруктураНаименованияПолей = ИнтеграцияWebKassaКлиентСервер.ПолучитьСоответствиеНаименованийПолей(Параметры.ЯзыкПоУмолчанию);
		Иначе
			СтруктураНаименованияПолей = ИнтеграцияWebKassaКлиентСервер.ПолучитьСоответствиеНаименованийПолей(ПредопределенноеЗначение("Перечисление.ЯзыкWebKassaФискальныеРегистраторы.Русский"));
		КонецЕсли;
		
		ПерваяКолонка = ПолучитьПервуюКолонку(ШиринаЛенты);
		ПоследняяКолонка = ПерваяКолонка + 1;
		
		ТабДок = Новый ТабличныйДокумент;
		ОбнулитьШиринуПолей(ТабДок);
		Макет = ИнтеграцияWebKassaВызовСервераПереопределяемый.ПолучитьМакетПечатнойФормы("Обработка.Панель1СWebKassa.WebkassaМакетФискальногоЧека");
		
		ОблШапкаОрг = Макет.ПолучитьОбласть("ШапкаОрганизация | _" + ШиринаЛенты);
		ОблШапкаОрг.Параметры.Организация = ДополнительныеДанные.ПолноеНаименование;
		ОблШапкаОрг.Параметры.ИИН = СтруктураНаименованияПолей.БИН + " " + ДополнительныеДанные.ИНН;
		ОблШапкаОрг.Параметры.ДокументНДС =СтруктураНаименованияПолей.НДССерия + " " + ДополнительныеДанные.СерияСвидетельстваПоНДС
			+ " № " + ДополнительныеДанные.НомерСвидетельстваПоНДС;
		ОблШапкаОрг.Параметры.ИНК = СтруктураНаименованияПолей.ИНК + ": " + СтруктураДанных.Data.Cashbox.IdentityNumber;
		ОблШапкаОрг.Параметры.РНК = СтруктураНаименованияПолей.РНК + ": " + СтруктураДанных.Data.Cashbox.RegistrationNumber;
		ОблШапкаОрг.Параметры.ЗНК = СтруктураНаименованияПолей.ЗНК + ": " + СтруктураДанных.Data.Cashbox.UniqueNumber;
		ТабДок.Вывести(ОблШапкаОрг);
		
		ТипИнкассации = "";
		Если ТипЧека = 0 Тогда
			ТипИнкассации = СтруктураНаименованияПолей.Внесение;
		ИначеЕсли ТипЧека = 1 Тогда
			ТипИнкассации = СтруктураНаименованияПолей.Выплата;
		КонецЕсли;
		
		ОблТелоИнкассация = Макет.ПолучитьОбласть("ТелоИнкассация | _" + ШиринаЛенты);
		ОблТелоИнкассация.Параметры.ТипОтчета = ТипИнкассации;
		ОблТелоИнкассация.Параметры.ДатаОтчета = Формат(ТекущаяДата(), ФорматДаты);
		ОблТелоИнкассация.Параметры.Кассир = СтруктураНаименованияПолей.Кассир + ": " + ДополнительныеДанные.Кассир;
		ОблТелоИнкассация.Параметры.Сумма = Формат(Сумма, ФорматДенежный);
		ОблТелоИнкассация.Параметры.НадписьСумма = СтруктураНаименованияПолей.НадписьСумма;
		ТабДок.Вывести(ОблТелоИнкассация);
		
		ТабДок.ОбластьПечати = ТабДок.Область(1, ПерваяКолонка, ТабДок.ВысотаТаблицы, ПоследняяКолонка);
		Результат = "";
	Исключение
		Результат = ИнформацияОбОшибке().Описание;
		ТабДок = Неопределено;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция печати контрольной ленты.
//
Функция ПечатьКонтрольнойЛенты(СтруктураДанных, Параметры, ТабДок) Экспорт
	
	Попытка
		ФорматДенежный = "ЧЦ=15; ЧДЦ=2; ЧГ=0; ЧН=";
		ФорматКоличество = "ЧЦ=15; ЧДЦ=3; ЧН=; ЧГ=0";
		ФорматЦелых = "ЧГ=0; ЧН=";
		ФорматДаты = "ДФ=""дд.ММ.гг ЧЧ:мм""";
		ФорматБезПробела = "ЧГ=0";
		Если Параметры.Свойство("ШиринаЛенты") Тогда
			Если НЕ ЗначениеЗаполнено(Параметры.ШиринаЛенты) ИЛИ Параметры.ШиринаЛенты = Неопределено Тогда
				ШиринаЛенты = 24;
			Иначе
				ШиринаЛенты = Параметры.ШиринаЛенты;
			КонецЕсли;
		Иначе
			ШиринаЛенты = 24;
		КонецЕсли;
		Если Параметры.Свойство("ЯзыкПоУмолчанию") И ЗначениеЗаполнено(Параметры.ЯзыкПоУмолчанию) Тогда
			СтруктураНаименованияПолей = ИнтеграцияWebKassaКлиентСервер.ПолучитьСоответствиеНаименованийПолей(Параметры.ЯзыкПоУмолчанию);
		Иначе
			СтруктураНаименованияПолей = ИнтеграцияWebKassaКлиентСервер.ПолучитьСоответствиеНаименованийПолей(ПредопределенноеЗначение("Перечисление.ЯзыкWebKassaФискальныеРегистраторы.Русский"));
		КонецЕсли;
		
		ПерваяКолонка = ПолучитьПервуюКолонку(ШиринаЛенты);
		ПоследняяКолонка = ПерваяКолонка + 1;
		
		ТабДок = Новый ТабличныйДокумент;
		ОбнулитьШиринуПолей(ТабДок);
		Макет = ИнтеграцияWebKassaВызовСервераПереопределяемый.ПолучитьМакетПечатнойФормы("Обработка.Панель1СWebKassa.WebkassaМакетФискальногоЧека");
		
		ОблРазделительВнут = Макет.ПолучитьОбласть("КонецТелоЧека | _" + ШиринаЛенты);
		
		ОблНефискальная = Макет.ПолучитьОбласть("ТелоНефискальнаяИнформация | _" + ШиринаЛенты);
		ОблНефискальная.Параметры.НефискальнаяИнформация = Параметры.НаименованиеОрганизации;
		ТабДок.Вывести(ОблНефискальная);
		ОблНефискальная.Параметры.НефискальнаяИнформация = СтруктураНаименованияПолей.БИН + " " + Параметры.ИИН;
		ТабДок.Вывести(ОблНефискальная);
		СведенияНДС = СтруктураНаименованияПолей.НДССерия + " " + Параметры.СерияНДС + " № " + Параметры.НомерНДС;
		ОблНефискальная.Параметры.НефискальнаяИнформация = СведенияНДС;
		ТабДок.Вывести(ОблНефискальная);
		ОблНефискальная.Параметры.НефискальнаяИнформация = СтруктураНаименованияПолей.ЗНК + ": " + Параметры.ЗНК;
		ТабДок.Вывести(ОблНефискальная);
		ТабДок.Вывести(ОблРазделительВнут);
		ОблНефискальная.Параметры.НефискальнаяИнформация = СтруктураНаименованияПолей.КонтрольнаяЛента;
		ТабДок.Вывести(ОблНефискальная);
		ОблНефискальная.Параметры.НефискальнаяИнформация = СтруктураНаименованияПолей.Смена + " №" + Формат(Параметры.НомерСмены, ФорматБезПробела);
		ТабДок.Вывести(ОблНефискальная);
		
		ОблНефискальная.ТекущаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		
		ОблСуммаОперации = Макет.ПолучитьОбласть("ТелоЧекаСкидка | _" + ШиринаЛенты);
		
		ПерваяПозиция = Истина;
		
		ТипОперацииССервера = СтруктураНаименованияПолей.ТипОперации;
		Для Каждого Позиция Из СтруктураДанных.Data Цикл
			Если ПерваяПозиция Тогда
				ПерваяПозиция = Ложь;
			Иначе
				ТабДок.Вывести(ОблРазделительВнут);
			КонецЕсли;
			ОблНефискальная.Параметры.НефискальнаяИнформация = ТипОперацииССервера.Получить(Позиция.OperationTypeText);
			Если НЕ ЗначениеЗаполнено(ОблНефискальная.Параметры.НефискальнаяИнформация) Тогда
				ОблНефискальная.Параметры.НефискальнаяИнформация = Позиция.OperationTypeText;
			КонецЕсли;
			ТабДок.Вывести(ОблНефискальная);
			ВремяОперации = СтруктураНаименованияПолей.Время + ": " + Формат(Позиция.Date, ФорматДаты);
			ОблНефискальная.Параметры.НефискальнаяИнформация = ВремяОперации;
			ТабДок.Вывести(ОблНефискальная);
			Если Позиция.Number <> Неопределено Тогда
				ФискальныйЧек = СтруктураНаименованияПолей.ФискальныйЧекНомер + Формат(Позиция.Number, ФорматБезПробела);
				ОблНефискальная.Параметры.НефискальнаяИнформация = ФискальныйЧек;
				ТабДок.Вывести(ОблНефискальная);
			КонецЕсли;
			Сумма = Формат(Позиция.Sum, ФорматДенежный);
			ОблСуммаОперации.Параметры.ЗагСкидка = СтруктураНаименованияПолей.НадписьСумма;
			ОблСуммаОперации.Параметры.Скидка = Сумма;
			ТабДок.Вывести(ОблСуммаОперации);
		КонецЦикла;
		
		ОблНефискальная.ТекущаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		ОблНефискальная.Параметры.НефискальнаяИнформация = СтруктураНаименованияПолей.КонецЛенты;
		ТабДок.Вывести(ОблНефискальная);
		
		ТабДок.ОбластьПечати = ТабДок.Область(1,ПерваяКолонка,ТабДок.ВысотаТаблицы,ПоследняяКолонка);
		Результат = "";
	Исключение
		Результат = ИнформацияОбОшибке().Описание;
		ТабДок = Неопределено;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Обнуляет поля табличного документа
//
Процедура ОбнулитьШиринуПолей(ТабличныйДокумент)
	
	//обнуляем ширину полей
	ТабличныйДокумент.ПолеСверху = 0;
	ТабличныйДокумент.ПолеСлева = 0;
	ТабличныйДокумент.ПолеСнизу = 0;
	ТабличныйДокумент.ПолеСправа = 0;
	
КонецПроцедуры //ОбнулитьШиринуПолей

#КонецОбласти

// Возвращает номер версии библиотеки Webkassa.
//
// Возвращаемое значение:
//  Строка - номер сборки.
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат "1.0.2.15";
	
КонецФункции

// Заполняет список обработчиков обновления информационной базы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	
	
КонецПроцедуры

// Записывает событие в журнал регистрации.
//
Процедура ЗаписатьСообщениеВЖурналРегистрации(ИмяСобытия, ТекстСообщения, ОбъектСсылка = Неопределено, Уровень = "Информация") Экспорт
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		МетаданныеОбъекта = ОбъектСсылка.Метаданные();
	КонецЕсли;
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации[Уровень],МетаданныеОбъекта,ОбъектСсылка, ТекстСообщения);
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция получения колонок для разной ширины ленты.
//
Функция ПолучитьПервуюКолонку(ШиринаЛенты)
	
	ПерваяКолонка = 1;
	Если ШиринаЛенты = 24 Тогда
		ПерваяКолонка = 1;
	ИначеЕсли ШиринаЛенты = 32 Тогда
		ПерваяКолонка = 3;
	ИначеЕсли ШиринаЛенты = 36 Тогда
		ПерваяКолонка = 5;
	ИначеЕсли ШиринаЛенты = 40 Тогда
		ПерваяКолонка = 7;
	ИначеЕсли ШиринаЛенты = 48 Тогда
		ПерваяКолонка = 9;
	КонецЕсли;
	
	Возврат ПерваяКолонка;
	
КонецФункции

// Выводит логотип в табличный документ. Если в переданной области макета картинки
// логотипа нет, находится отдельная область с логотипом в макете и логотип выводится
// в данную область.
//
// Параметры:
// 		ОбластьМакета - ТекстовыйДокумент - Область макета печатной формы
// 		ДвоичныеДанныеКартинки - Данные картинки
// 		ИмяРисунка - Имя области картинки в макете
//
Процедура ВывестиЛоготипВТабличныйДокумент(ОбластьМакета, ДвоичныеДанныеКартинки, ИмяРисунка) Экспорт
	
	Если Не ИнтеграцияWebKassaВызовСервераПереопределяемый.ЕстьРеквизитОбъекта(ОбластьМакета.Рисунки, ИмяРисунка) Тогда
		// Картинки логотипа в этой области макета нет.
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДвоичныеДанныеКартинки) Тогда
		ОбластьМакета.Рисунки.Удалить(ОбластьМакета.Рисунки.ИмяРисунка);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДвоичныеДанныеКартинки) = Тип("Картинка") Тогда
		Картинка = ДвоичныеДанныеКартинки;
	ИначеЕсли ТипЗнч(ДвоичныеДанныеКартинки) = Тип("ДвоичныеДанные") Тогда
		Картинка = Новый Картинка(ДвоичныеДанныеКартинки);
	Иначе
		Картинка = Новый Картинка;
	КонецЕсли; 
	
	ОбластьМакета.Рисунки[0].Картинка = Картинка;
	
КонецПроцедуры

#КонецОбласти
