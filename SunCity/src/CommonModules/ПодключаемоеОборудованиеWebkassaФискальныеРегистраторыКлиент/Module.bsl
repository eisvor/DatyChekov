
#Область ПрограммныйИнтерфейс

// Функция возвращает возможность работы модуля в асинхронном режиме.
// Стандартные команды модуля:
// - ПодключитьУстройство
// - ОтключитьУстройство
// - ВыполнитьКоманду
// Команды модуля для работы асинхронном режиме (должны быть определены):
// - НачатьПодключениеУстройства
// - НачатьОтключениеУстройства
// - НачатьВыполнениеКоманды.
//
Функция ПоддержкаАсинхронногоРежима() Экспорт
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СинхронныеПроцедурыИФункции

// Функция осуществляет подключение устройства.
// 
Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = Истина;

	ПараметрыПодключения.Вставить("ИДУстройства", "");

	ВыходныеПараметры = Новый Массив();
	
	Логин        = Неопределено;
	Пароль       = Неопределено;
	АдресСервиса = Неопределено;
	Параметры.Свойство("Логин"        , Логин);
	Параметры.Свойство("Пароль"       , Пароль);
	Параметры.Свойство("АдресСервиса" , АдресСервиса);
	
	//Проверка параметров устройства
	Если Логин        = Неопределено
	 Или Пароль       = Неопределено
	 Или АдресСервиса = Неопределено
	Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не настроены параметры устройства.
		|Для корректной работы устройства необходимо задать параметры его работы.
		|Сделать это можно при помощи формы ""Настройка параметров"" модели
		|подключаемого оборудования в форме ""Подключение и настройка оборудования"".'"));

		Результат = Ложь;
	КонецЕсли;
	// Конец: Проверка параметров устройства.

	Если Результат Тогда
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("Login",    Параметры.Логин);
		ПараметрыЗапроса.Вставить("Password", Параметры.Пароль);
		
		РезультатЗапроса = ВыполнитьМетодВебСервиса(ПараметрыПодключения.АдресСервиса, "Authorize", ПараметрыЗапроса);
		
		Если РезультатЗапроса = Неопределено Или Не Результат Тогда
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ВыходныеПараметры[1] = НСтр("ru='Не удалось подключиться к серверу.'");
			Результат = Ложь;
		КонецЕсли;
		
		Попытка
			Если Результат Тогда
				ОбъектыJSON = ИнтеграцияWebKassaКлиент.ПрочитатьОтветJSON(РезультатЗапроса);
				Для Каждого ОбъектJSON Из ОбъектыJSON Цикл
					Если ОбъектJSON.Ключ = "Errors" И ОбъектJSON.Значение<>Неопределено Тогда
						Результат = Ложь;
						ВыходныеПараметры.Добавить(999);
						ВыходныеПараметры.Добавить("");
						ВыходныеПараметры[1] = ИнтеграцияWebKassaКлиентСервер.ПолучитьОписаниеОшибки(ОбъектJSON.Значение[0].Code) + "(" + ОбъектJSON.Значение[0].Text + ")";
					ИначеЕсли ОбъектJSON.Ключ = "Data" И ОбъектJSON.Значение.Свойство("Token") Тогда
						ТокенАвторизации = ОбъектJSON.Значение.Token;
						ПараметрыПодключения.Вставить("ТокенАвторизации", ТокенАвторизации);
						
						ВыходныеПараметры.Очистить();
						ВыходныеПараметры.Добавить("");
						ВыходныеПараметры.Добавить(Неопределено);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Исключение
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ВыходныеПараметры[1] = НСтр("ru='Ошибка работы с сервером. Невозможно распознать ответ сервера.'");
			Результат = Ложь; 
		КонецПопытки;
		
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет отключение устройства.
//
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = Истина;

	Попытка
		//Отключение веб-сервиса путем обнуления токена авторизации.
		Если ПараметрыПодключения.Свойство("ТокенАвторизации") Тогда
			ПараметрыПодключения.Удалить("ТокенАвторизации");
		КонецЕсли;
	Исключение
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("Не удалось отключить устройство.");
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу.
//
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт

	Результат = Истина;
	
	ВыходныеПараметры = Новый Массив();
	
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ФИСКАЛЬНЫМИ РЕГИСТРАТОРАМИ
	
	// Открыть смену
	Если Команда = "OpenDay" ИЛИ Команда = "ОткрытьСмену" Тогда
		Результат = ОткрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Печать отчета без гашения
	ИначеЕсли Команда = "PrintXReport" ИЛИ Команда = "НапечататьОтчетБезГашения" Тогда
		
		ДанныеОбОрганизации = Новый Структура;
		ДанныеОбОрганизации.Вставить("СерийныйНомерККМ",ВходныеПараметры[0]);
		Результат = НапечататьОтчетБезГашения(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры, ДанныеОбОрганизации);
		
	// Печать отчета с гашением
	ИначеЕсли Команда = "PrintZReport" ИЛИ Команда = "НапечататьОтчетСГашением" Тогда
		
		ДанныеОбОрганизации = Новый Структура;
		ДанныеОбОрганизации.Вставить("СерийныйНомерККМ",ВходныеПараметры[0]);
		Результат = НапечататьОтчетСГашением(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры, ДанныеОбОрганизации);
		
	// Печать чека
	ИначеЕсли Команда = "PrintReceipt" ИЛИ Команда = "ПечатьЧека" Тогда
		Результат = ПечатьЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать слип чека
	ИначеЕсли Команда = "PrintText" ИЛИ Команда = "ПечатьТекста"  Тогда
		СтрокаТекста   = ВходныеПараметры[0];
		Результат = ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры);
		
	// Отменить открытый чек
	ИначеЕсли Команда = "OpenCheck" ИЛИ Команда = "ОткрытьЧек"  Тогда
		ЧекВозврата   = ВходныеПараметры[0];
		ФискальныйЧек = ВходныеПараметры[1];
		
		// Помещаем в массив ВыходныеПараметры необходимую для чека информацию.
		Если ВходныеПараметры.Количество() > 22 Тогда
			СведенияОбОрганизации = Новый Структура;
			СведенияОбОрганизации.Вставить("Кассир",                  ВходныеПараметры[12]);
			СведенияОбОрганизации.Вставить("Организация",             ВходныеПараметры[13]);
			СведенияОбОрганизации.Вставить("ИИН",                     ВходныеПараметры[14]);
			СведенияОбОрганизации.Вставить("СерийныйНомерККМ",        ВходныеПараметры[20]);
			СведенияОбОрганизации.Вставить("РегистрационныйНомерККМ", ВходныеПараметры[22]);
			СведенияОбОрганизации.Вставить("СерияСвидетельстваПоНДС", ВходныеПараметры[23]);
			СведенияОбОрганизации.Вставить("НомерСвидетельстваПоНДС", ВходныеПараметры[24]);
			
			ВыходныеПараметры.Добавить(СведенияОбОрганизации);
		КонецЕсли;
		
		Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ЧекВозврата, ФискальныйЧек, ВыходныеПараметры);
		
	// Отменить открытый чек
	ИначеЕсли Команда = "CancelCheck" ИЛИ Команда = "ОтменитьЧек"  Тогда
		Результат = ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Печать чека внесения/выемки
	ИначеЕсли Команда = "Encash" ИЛИ Команда = "Инкассация" Тогда
		ТипИнкассации = ВходныеПараметры[0];
		Сумма         = ВходныеПараметры[1];
		
		ДанныеОбОрганизации = Новый Структура;
		ДанныеОбОрганизации.Вставить("Кассир",                  ВходныеПараметры[2]);
		ДанныеОбОрганизации.Вставить("Организация",             ВходныеПараметры[3]);
		ДанныеОбОрганизации.Вставить("ИИН",                     ВходныеПараметры[4]);
		ДанныеОбОрганизации.Вставить("СерийныйНомерККМ",        ВходныеПараметры[5]);
		ДанныеОбОрганизации.Вставить("РегистрационныйНомерККМ", ВходныеПараметры[6]);
		ДанныеОбОрганизации.Вставить("СерияСвидетельстваПоНДС", ВходныеПараметры[7]);
		ДанныеОбОрганизации.Вставить("НомерСвидетельстваПоНДС", ВходныеПараметры[8]);
		
		Результат = Инкассация(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипИнкассации, Сумма, ВыходныеПараметры, ДанныеОбОрганизации);

	// Открытие денежного ящика
	ИначеЕсли Команда = "OpenCashDrawer" ИЛИ Команда = "ОткрытьДенежныйЯщик" Тогда
		Результат = ОткрытьДенежныйЯщик(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получение ширины строки в символах
	ИначеЕсли Команда = "GetLineLength" ИЛИ Команда = "ПолучитьШиринуСтроки" Тогда
		Результат = ПолучитьШиринуСтроки(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получение версии драйвера
	ИначеЕсли Команда = "ПолучитьВерсиюДрайвера" Тогда
		Результат = ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Тестирование устройства
	ИначеЕсли Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		Результат = ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Указанная команда не поддерживается данным драйвером
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);
		Результат = Ложь;

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет открытие смены.
//
Функция ОткрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	// Заполнение выходных параметров.
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(ИнтеграцияWebKassaКлиентПереопределяемый.ДатаСеанса());

	Возврат Результат;

КонецФункции

// Осуществляет печать фискального чека.
//
Функция ПечатьЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	ТаблицаНоменклатуры = ВходныеПараметры[0];
	ТаблицаОплат        = ВходныеПараметры[1];
	ОбщиеПараметры      = ВходныеПараметры[2];
	
	Результат  = Истина;
	// Открываем чек
	// Помещаем в массив ВыходныеПараметры необходимую для чека информацию.
	
	Если ВходныеПараметры[2].Количество() > 22 Тогда
		СведенияОбОрганизации = Новый Структура;
		СведенияОбОрганизации.Вставить("Кассир",                  ВходныеПараметры[2][12]);
		СведенияОбОрганизации.Вставить("Организация",             ВходныеПараметры[2][13]);
		СведенияОбОрганизации.Вставить("ИИН",                     ВходныеПараметры[2][14]);
		СведенияОбОрганизации.Вставить("СерийныйНомерККМ",        ВходныеПараметры[2][20]);
		СведенияОбОрганизации.Вставить("РегистрационныйНомерККМ", ВходныеПараметры[2][22]);
		СведенияОбОрганизации.Вставить("СерияСвидетельстваПоНДС", ВходныеПараметры[2][23]);
		СведенияОбОрганизации.Вставить("НомерСвидетельстваПоНДС", ВходныеПараметры[2][24]);
		
		ВыходныеПараметры.Добавить(СведенияОбОрганизации);
	КонецЕсли;
	
	Результат = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения,
	                       ВходныеПараметры[2][0], ВходныеПараметры[2][1], ВыходныеПараметры);

	// Печатаем строки чека
	Если Результат Тогда
		ОшибкаПриПечати = Ложь;
		// Печатаем строки чека
		Для ИндексМассива = 0 По ТаблицаНоменклатуры.Количество() - 1 Цикл
			Наименование  = ТаблицаНоменклатуры[ИндексМассива][0].Значение;
			Количество    = ТаблицаНоменклатуры[ИндексМассива][5].Значение;
			Цена          = ТаблицаНоменклатуры[ИндексМассива][4].Значение;
			Сумма         = ТаблицаНоменклатуры[ИндексМассива][9].Значение;
			НомерСекции   = ТаблицаНоменклатуры[ИндексМассива][3].Значение;
			СтавкаНДС     = ТаблицаНоменклатуры[ИндексМассива][12].Значение;

			Если НЕ НапечататьФискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
											   Наименование, Количество, Цена, Сумма,
											   НомерСекции, СтавкаНДС, ВыходныеПараметры) Тогда
				ОшибкаПриПечати = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ОшибкаПриПечати Тогда
		  	// Закрываем чек
			Результат = ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры);
		Иначе
			Результат = Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Осуществляет печать текста
Функция ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения,СтрокаТекста, ВыходныеПараметры)

	Результат  = Истина;

	// Печатаем строки чека
	Если Параметры.Свойство("АвтоматическаяПечатьЧека") И Параметры.АвтоматическаяПечатьЧека Тогда
		НапечататьНефискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                     СтрокаТекста, ВыходныеПараметры);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет открытие нового чека.
//
Функция ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ЧекВозврата, ФискальныйЧек, ВыходныеПараметры) Экспорт

	Результат = Истина;
	НомерСмены = 0;
	НомерЧека  = 0;
	
	// Код 2 для продажи, код 3 для возврата продажи.
	ТипОперации = ?(ЧекВозврата, 3, 2);
	ТипОкругления = 0; //0	Без округления  1 Округление итога 2 Округление позиций
	
	ДанныеДляЗапроса = Новый Структура;
	ДанныеДляЗапроса.Вставить("CashboxUniqueNumber",   ВыходныеПараметры[0].СерийныйНомерККМ);
	ДанныеДляЗапроса.Вставить("OperationType",         ТипОперации);
	ДанныеДляЗапроса.Вставить("RoundType",             ТипОкругления);
	ДанныеДляЗапроса.Вставить("Positions",             Новый Массив);
	ДанныеДляЗапроса.Вставить("Payments",              Новый Массив);
	ДанныеДляЗапроса.Вставить("СведенияОбОрганизации", ВыходныеПараметры[0]);
	Если НЕ Результат Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка при открытии чека.'"));
	Иначе
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(НомерСмены);
		ВыходныеПараметры.Добавить(НомерЧека);
		ВыходныеПараметры.Добавить(0);
		ВыходныеПараметры.Добавить(ИнтеграцияWebKassaКлиентПереопределяемый.ДатаСеанса());
		ВыходныеПараметры.Добавить(ДанныеДляЗапроса);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет печать фискальной строки.
//
Функция НапечататьФискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                   Наименование, Количество, Цена, Сумма,
                                   НомерСекции, СтавкаНДС, ВыходныеПараметры) Экспорт

	Результат = Истина;
	
	НалогСумма = Окр(СтавкаНДС * 0.01 * Сумма / (1 + СтавкаНДС / 100), 2);
	РазницаПоСкидке = Окр(Цена * Количество, 2) - Сумма;
	Скидка = 0;
	Наценка = 0;
	Если РазницаПоСкидке > 0 Тогда
		Скидка = РазницаПоСкидке;
	ИначеЕсли РазницаПоСкидке < 0 Тогда
		Наценка = -1 * РазницаПоСкидке;
	КонецЕсли;
	
	ТипНалога = ?(СтавкаНДС = 0, 0, 100);
	
	ПозицияВЧеке = Новый Структура;
	ПозицияВЧеке.Вставить("Count",        Количество);
	ПозицияВЧеке.Вставить("Price",        Цена);
	ПозицияВЧеке.Вставить("Tax",          НалогСумма);
	ПозицияВЧеке.Вставить("TaxType",      ТипНалога);
	ПозицияВЧеке.Вставить("PositionName", Наименование);
	ПозицияВЧеке.Вставить("PositionCode", ВыходныеПараметры[4].Positions.Количество()+1);
	ПозицияВЧеке.Вставить("Discount",     Скидка);
	ПозицияВЧеке.Вставить("Markup",       Наценка);
	ПозицияВЧеке.Вставить("SectionCode",  НомерСекции);

	ВыходныеПараметры[4].Positions.Добавить(ПозицияВЧеке);
	Если НЕ Результат Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка при печати фискальной строки.'"));

		ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет печать нефискальной строки.
//
Функция НапечататьНефискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	РезультатПечати = 
		ИнтеграцияWebKassaВызовСервера.ПечатьНефискальногоЧека(СтрокаТекста, Параметры, ТабличныйДокумент);
	Если ТабличныйДокумент = Неопределено Тогда
		ШаблонСообщения = НСтр("ru = 'Операция проведена. Произошла ошибка при печати нефискальной строки.
									|Дополнительное описание:
									|%1'");
		ТекстСообщения = ИнтеграцияWebKassaКлиентПереопределяемый.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатПечати);
		ИнтеграцияWebKassaКлиентПереопределяемый.СообщитьПользователю(ТекстСообщения);
	Иначе
		ТабличныйДокумент.АвтоМасштаб = Истина;
		ТабличныйДокумент.Напечатать();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет закрытие ранее открытого чека.
//
Функция ЗакрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТаблицаОплат, ВыходныеПараметры) Экспорт

	Результат = Истина;
	
	СведенияОбОрганизации = Неопределено;
	ВыходныеПараметры[4].Свойство("СведенияОбОрганизации", СведенияОбОрганизации);
	ВыходныеПараметры[4].Удалить("СведенияОбОрганизации");

	СуммаНаличнойОплаты    = 0;
	СуммаБезналичнойОплаты1 = 0;
	СуммаБезналичнойОплаты2 = 0;
	СуммаБезналичнойОплаты3 = 0;

	Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
		Если ТаблицаОплат[ИндексОплаты][0].Значение = 0 Тогда
			СуммаНаличнойОплаты = СуммаНаличнойОплаты + ТаблицаОплат[ИндексОплаты][1].Значение;
		ИначеЕсли ТаблицаОплат[ИндексОплаты][0].Значение = 1 Тогда
			СуммаБезналичнойОплаты1 = СуммаБезналичнойОплаты1 + ТаблицаОплат[ИндексОплаты][1].Значение;
		ИначеЕсли ТаблицаОплат[ИндексОплаты][0].Значение = 2 Тогда
			СуммаБезналичнойОплаты2 = СуммаБезналичнойОплаты2 + ТаблицаОплат[ИндексОплаты][1].Значение;
		Иначе
			СуммаБезналичнойОплаты3 = СуммаБезналичнойОплаты3 + ТаблицаОплат[ИндексОплаты][1].Значение;
		КонецЕсли;
	КонецЦикла;

	Если СуммаНаличнойОплаты > 0 Тогда
		// Наличные.
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("Sum",         СуммаНаличнойОплаты);
		СтрокаОплаты.Вставить("PaymentType", 0);
		ВыходныеПараметры[4].Payments.Добавить(СтрокаОплаты);
	КонецЕсли;

	Если СуммаБезналичнойОплаты1 > 0 Тогда
		// Банковская карта.
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("Sum",         СуммаБезналичнойОплаты1);
		СтрокаОплаты.Вставить("PaymentType", 1);
		ВыходныеПараметры[4].Payments.Добавить(СтрокаОплаты);
	КонецЕсли;

	Если СуммаБезналичнойОплаты2 > 0 Тогда
		// Оплата в кредит.
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("Sum",         СуммаБезналичнойОплаты2);
		СтрокаОплаты.Вставить("PaymentType", 2);
		ВыходныеПараметры[4].Payments.Добавить(СтрокаОплаты);
	КонецЕсли;

	Если СуммаБезналичнойОплаты3 > 0 Тогда
		// Оплата тарой.
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("Sum",         СуммаБезналичнойОплаты3);
		СтрокаОплаты.Вставить("PaymentType", 3);
		ВыходныеПараметры[4].Payments.Добавить(СтрокаОплаты);
	КонецЕсли;

	РезультатЗапроса = ВыполнитьМетодВебСервиса(ПараметрыПодключения.АдресСервиса, "Check", ВыходныеПараметры[4]);
	
	Если РезультатЗапроса = Неопределено Или Не Результат Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ВыходныеПараметры[1] = НСтр("ru='Не удалось подключиться к серверу.'");
		Результат = Ложь;
	КонецЕсли;
	
	Попытка
		Если Результат Тогда
			ОбъектыJSON = ИнтеграцияWebKassaКлиент.ПрочитатьОтветJSON(РезультатЗапроса);
			Для Каждого ОбъектJSON из ОбъектыJSON Цикл
				Если ОбъектJSON.Ключ = "Errors" Тогда
					Если ОбъектJSON.Значение<>Неопределено Тогда
						Результат = Ложь;
						ВыходныеПараметры.Очистить();
						ВыходныеПараметры.Добавить(999);
						ВыходныеПараметры.Добавить("");
						ВыходныеПараметры[1] = ИнтеграцияWebKassaКлиентСервер.ПолучитьОписаниеОшибки(ОбъектJSON.Значение[0].Code) + "(" + ОбъектJSON.Значение[0].Text + ")";
					КонецЕсли;
				ИначеЕсли ОбъектJSON.Ключ = "Data" Тогда
					ИнтеграцияWebKassaКлиентСервер.ДополнитьФорматДанныхЧека(ОбъектJSON.Значение);
					ФискальныйНомер =       ОбъектJSON.Значение.CheckNumber;
					АвтономныйРежимРаботы = ОбъектJSON.Значение.OfflineMode;
					ИНК =                   ОбъектJSON.Значение.Cashbox.IdentityNumber;
					НомерВРамкахСмены =     ОбъектJSON.Значение.CheckOrderNumber;
					ДатаЧека =              ОбъектJSON.Значение.DateTime;
					СведенияОбОрганизации.РегистрационныйНомерККМ = ОбъектJSON.Значение.Cashbox.RegistrationNumber;
					СведенияОбОрганизации.СерийныйНомерККМ = ОбъектJSON.Значение.Cashbox.UniqueNumber;
					//номер смены добавят в ответ по чеку
					НомерСмены = 0; // ОбъектJSON.Значение.ShiftNumber;
					
					ВыходныеПараметры[4].Вставить("ФискальныйНомер",       ФискальныйНомер);
					ВыходныеПараметры[4].Вставить("АвтономныйРежимРаботы", АвтономныйРежимРаботы);
					ВыходныеПараметры[4].Вставить("ИНК",                   ИНК);
					ВыходныеПараметры[4].Вставить("НомерВРамкахСмены",     НомерВРамкахСмены);
					ВыходныеПараметры[4].Вставить("ДатаЧека",              ДатаЧека);
					ВыходныеПараметры[4].Вставить("СерийныйНомерККМ",      ДатаЧека);
					ВыходныеПараметры[4].Вставить("РегистрационныйНомерККМ", ДатаЧека);
					ВыходныеПараметры[0] = НомерСмены;
					ВыходныеПараметры[1] = НомерВРамкахСмены;
				Иначе
					Результат = Ложь;
					ВыходныеПараметры.Очистить();
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить("Ошибка в ответе запроса.");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Исключение
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ВыходныеПараметры[1] = НСтр("ru='Ошибка работы с сервером. Невозможно распознать ответ сервера.'");
		Результат = Ложь; 
	КонецПопытки;
	
	Если Результат И Параметры.Свойство("АвтоматическаяПечатьЧека") И Параметры.АвтоматическаяПечатьЧека Тогда
		ПечатьФискальногоЧека(ВыходныеПараметры[4], 0, Параметры, СведенияОбОрганизации);
	ИначеЕсли НЕ Результат Тогда
		ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет отмену ранее открытого чека.
//
Функция ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = Истина;

	Возврат Результат;

КонецФункции

// Функция осуществляет внесение или выемку суммы на ФР.
//
Функция Инкассация(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипИнкассации, Сумма, ВыходныеПараметры, ДополнительныеПараметры = Неопределено)

	Результат = Истина;
	
	ТокенАвторизации = "";
	Результат = ПараметрыПодключения.Свойство("ТокенАвторизации", ТокенАвторизации);
	
	// Код 0 для внесения, код 1 для изъятия.
	ТипОперации = ?(ТипИнкассации = 1, 0, 1);
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Token",               ТокенАвторизации);
	ПараметрыЗапроса.Вставить("CashboxUniqueNumber", ДополнительныеПараметры.СерийныйНомерККМ);
	ПараметрыЗапроса.Вставить("OperationType",       ТипОперации);
	ПараметрыЗапроса.Вставить("Sum",                 Сумма);
	
	РезультатЗапроса = ВыполнитьМетодВебСервиса(ПараметрыПодключения.АдресСервиса, "MoneyOperation", ПараметрыЗапроса);
	
	Если РезультатЗапроса = Неопределено Или Не Результат Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ВыходныеПараметры[1] = НСтр("ru='Не удалось подключиться к серверу.'");
		Результат = Ложь;
	КонецЕсли;
	
	Попытка
		Если Результат Тогда
			ОбъектыJSON = ИнтеграцияWebKassaКлиент.ПрочитатьОтветJSON(РезультатЗапроса);
			Для Каждого ОбъектJSON из ОбъектыJSON Цикл
				Если ОбъектJSON.Ключ = "Errors" И ОбъектJSON.Значение<>Неопределено Тогда
					Результат = Ложь;
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить("");
					ВыходныеПараметры[1] = ИнтеграцияWebKassaКлиентСервер.ПолучитьОписаниеОшибки(ОбъектJSON.Значение[0].Code) + "(" + ОбъектJSON.Значение[0].Text + ")";
				ИначеЕсли ОбъектJSON.Ключ = "Data" Тогда
					ВыходныеПараметры.Добавить(0);
					ВыходныеПараметры.Добавить(0);
					ВыходныеПараметры.Добавить(0);
					ВыходныеПараметры.Добавить(ИнтеграцияWebKassaКлиентПереопределяемый.ДатаСеанса());
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Исключение
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ВыходныеПараметры[1] = НСтр("ru='Ошибка работы с сервером. Невозможно распознать ответ сервера.'");
		Результат = Ложь; 
	КонецПопытки;

	Если Результат И Параметры.Свойство("АвтоматическаяПечатьЧека") И Параметры.АвтоматическаяПечатьЧека Тогда
		ПечатьЧекаВнесенияИзъятия(ОбъектыJSON, Сумма, ТипОперации, Параметры, ДополнительныеПараметры);
	ИначеЕсли НЕ Результат Тогда
		ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет снятие отчета без гашения.
//
Функция НапечататьОтчетБезГашения(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры, ДополнительныеПараметры = Неопределено)

	Результат = Истина;

	ТокенАвторизации = "";
	Результат = ПараметрыПодключения.Свойство("ТокенАвторизации", ТокенАвторизации);

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Token",               ТокенАвторизации);
	ПараметрыЗапроса.Вставить("CashboxUniqueNumber", ДополнительныеПараметры.СерийныйНомерККМ);
	
	РезультатЗапроса = ВыполнитьМетодВебСервиса(ПараметрыПодключения.АдресСервиса, "XReport", ПараметрыЗапроса);
	
	Если РезультатЗапроса = Неопределено Или Не Результат Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ВыходныеПараметры[1] = НСтр("ru='Не удалось подключиться к серверу.'");
		Результат = Ложь;
	КонецЕсли;
	
	Попытка
		Если Результат Тогда
			ОбъектыJSON = ИнтеграцияWebKassaКлиент.ПрочитатьОтветJSON(РезультатЗапроса);
			Для Каждого ОбъектJSON из ОбъектыJSON Цикл
				Если ОбъектJSON.Ключ = "Errors" И ОбъектJSON.Значение<>Неопределено Тогда
					Результат = Ложь;
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить("");
					ВыходныеПараметры[1] = ИнтеграцияWebKassaКлиентСервер.ПолучитьОписаниеОшибки(ОбъектJSON.Значение[0].Code) + "(" + ОбъектJSON.Значение[0].Text + ")";
				ИначеЕсли ОбъектJSON.Ключ = "Data" Тогда
					ВыходныеПараметры.Добавить(0);
					ВыходныеПараметры.Добавить(0);
					ВыходныеПараметры.Добавить(0);
					ВыходныеПараметры.Добавить(ИнтеграцияWebKassaКлиентПереопределяемый.ДатаСеанса());
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Исключение
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ВыходныеПараметры[1] = НСтр("ru='Ошибка работы с сервером. Невозможно распознать ответ сервера.'");
		Результат = Ложь; 
	КонецПопытки;

	Если Результат И Параметры.Свойство("АвтоматическаяПечатьЧека") И Параметры.АвтоматическаяПечатьЧека Тогда
		ПечатьXZОтчета(ОбъектыJSON, 1, Параметры, ДополнительныеПараметры);
	ИначеЕсли НЕ Результат Тогда
		ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет снятие отчета с гашением.
//
Функция НапечататьОтчетСГашением(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры, ДополнительныеПараметры = Неопределено)

	Результат = Истина;
	
	ТокенАвторизации = "";
	Результат = ПараметрыПодключения.Свойство("ТокенАвторизации", ТокенАвторизации);
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Token",               ТокенАвторизации);
	ПараметрыЗапроса.Вставить("CashboxUniqueNumber", ДополнительныеПараметры.СерийныйНомерККМ);
	
	РезультатЗапроса = ВыполнитьМетодВебСервиса(Параметры.АдресСервиса, "ZReport", ПараметрыЗапроса);
	
	Если РезультатЗапроса = Неопределено Или Не Результат Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ВыходныеПараметры[1] = НСтр("ru='Не удалось подключиться к серверу.'");
		Результат = Ложь;
	КонецЕсли;
	
	Попытка
		Если Результат Тогда
			ОбъектыJSON = ИнтеграцияWebKassaКлиент.ПрочитатьОтветJSON(РезультатЗапроса);
			Для Каждого ОбъектJSON из ОбъектыJSON Цикл
				Если ОбъектJSON.Ключ = "Errors" И ОбъектJSON.Значение<>Неопределено Тогда
					Результат = Ложь;
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить("");
					ВыходныеПараметры[1] = ИнтеграцияWebKassaКлиентСервер.ПолучитьОписаниеОшибки(ОбъектJSON.Значение[0].Code) + "(" + ОбъектJSON.Значение[0].Text + ")";
				ИначеЕсли ОбъектJSON.Ключ = "Data" Тогда
					ВыходныеПараметры.Добавить(0);
					ВыходныеПараметры.Добавить(0);
					ВыходныеПараметры.Добавить(0);
					ВыходныеПараметры.Добавить(ИнтеграцияWebKassaКлиентПереопределяемый.ДатаСеанса());
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Исключение
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ВыходныеПараметры[1] = НСтр("ru='Ошибка работы с сервером. Невозможно распознать ответ сервера.'");
		Результат = Ложь; 
	КонецПопытки;

	Если Результат И Параметры.Свойство("АвтоматическаяПечатьЧека") И Параметры.АвтоматическаяПечатьЧека Тогда
		ПечатьXZОтчета(ОбъектыJSON, 2, Параметры, ДополнительныеПараметры);
	ИначеЕсли НЕ Результат Тогда
		ОтменитьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет открытие денежного ящика.
//
Функция ОткрытьДенежныйЯщик(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	ВыходныеПараметры.Добавить(999);
	ВыходныеПараметры.Добавить(НСтр("ru='Команда ""Открыть денежный ящик"" не поддерживается данным драйвером.'"));
	
	Возврат Результат;
	
КонецФункции

// Функция получает ширину строки в символах.
//  
Функция ПолучитьШиринуСтроки(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	ШиринаСтроки = 24;
	Параметры.Свойство("ШиринаЛенты", ШиринаСтроки);
	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить(?(ШиринаСтроки=Неопределено, 24, ШиринаСтроки));
	Возврат Результат;
	
КонецФункции

// Функция осуществляет Тест Устройства.
//
Функция ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	РезультатТеста = "";
	
	Результат = ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	
	Если Результат Тогда
		ВыходныеПараметры = Новый Массив();
		РезультатТеста =(НСтр("ru = 'Подключение прошло успешно.'"));
	КонецЕсли;
	
	ВыходныеПараметры.Добавить(?(Результат, 0, 999));
	ВыходныеПараметры.Добавить(РезультатТеста);
	
	Возврат Результат;

КонецФункции

// Функция возвращает версию установленного драйвера.
//
Функция ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена'"));

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область АсинхронныеПроцедурыИФункции

// Функция начинает подключение устройства.
//
Процедура НачатьПодключениеУстройства(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ДополнительныеПараметры) Экспорт
	
	ПараметрыПодключения.Вставить("ИДУстройства", "");
	
	ВыходныеПараметры = Новый Массив;
	Если ДополнительныеПараметры.Свойство("ИДУстройства") Тогда
		ДополнительныеПараметры.ПараметрыПодключения.ИДУстройства = ДополнительныеПараметры.ИДУстройства;
		ВыходныеПараметры.Добавить(Строка(ДополнительныеПараметры.ИДУстройства));
	Иначе
		ВыходныеПараметры.Добавить("");
	КонецЕсли;
	
	Если ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура("Результат, ВыходныеПараметры", Истина, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
	
КонецПроцедуры

// Функция начинает подключение устройства - завершение установки параметров.
//
Процедура НачатьПодключениеУстройства_ПослеОтветаВебСервиса(РезультатЗапроса, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = Новый Массив;
	Если ТипЗнч(РезультатЗапроса) <> Тип("Структура") Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить("999");
			ВыходныеПараметры.Добавить("Ошибка работы с сервером.");
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если РезультатЗапроса.РезультатВыполнения = Ложь Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, РезультатЗапроса.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ИДУстройства") Тогда
		ДополнительныеПараметры.ПараметрыПодключения.ИДУстройства = ДополнительныеПараметры.ИДУстройства;
		ВыходныеПараметры.Добавить(Строка(ДополнительныеПараметры.ИДУстройства));
		ВыходныеПараметры.Добавить(Новый Массив());
	Иначе
		ВыходныеПараметры.Добавить("");
		ВыходныеПараметры.Добавить(Новый Массив());
	КонецЕсли;
	
	ДополнительныеПараметры.ВыходныеПараметры = ВыходныеПараметры;
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатЗапроса.РезультатВыполнения, ДополнительныеПараметры.ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Процедура начинает выполнение команды, обрабатывает и перенаправляет на исполнение команду к драйверу.
//
Процедура НачатьВыполнениеКоманды(ОповещениеПриЗавершении, Команда, ВходныеПараметры = Неопределено, ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт
	
	ВыходныеПараметры = Новый Массив();
	
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ ВСЕХ ТИПОВ ДРАЙВЕРОВ
	
	// Тестирование устройства
	Если Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		НачатьТестУстройства(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получение версии драйвера
	ИначеЕсли Команда = "ПолучитьВерсиюДрайвера" ИЛИ Команда = "GetVersion" Тогда
		НачатьПолучениеВерсииДрайвера(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ФИСКАЛЬНЫМИ РЕГИСТРАТОРАМИ
	
	// Открыть смену
	ИначеЕсли Команда = "OpenShift" ИЛИ Команда = "ОткрытьСмену" Тогда
		НачатьОткрытиеСмены(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);  
		
	// Печать отчета без гашения
	ИначеЕсли Команда = "PrintXReport" ИЛИ Команда = "НапечататьОтчетБезГашения" Тогда
		НачатьПечатьОтчетаБезГашения(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать отчета с гашением
	ИначеЕсли Команда = "PrintZReport" ИЛИ Команда = "CloseShift" ИЛИ Команда = "НапечататьОтчетСГашением" Тогда
		НачатьПечатьОтчетаСГашением(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать чека
	ИначеЕсли Команда = "PrintReceipt" ИЛИ Команда = "ПечатьЧека" Тогда
		НачатьПечатьЧека(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Фискализация чека.
	ИначеЕсли Команда = "CheckFiscalization" ИЛИ Команда = "ФискализацияЧека" Тогда
		НачатьФискализациюЧека(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать слип чека
	ИначеЕсли Команда = "PrintText" ИЛИ Команда = "ПечатьТекста"  Тогда
		СтрокаТекста = ВходныеПараметры[0];
		НачатьПечатьТекста(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры);
		
	// Отменить открытый чек
	ИначеЕсли Команда = "OpenCheck" ИЛИ Команда = "ОткрытьЧек"  Тогда
		
		ТипРасчета = ИнтеграцияWebKassaКлиентПереопределяемый.КодТипаРасчета(ВходныеПараметры.ТипРасчета);
		ТипЧека =  ?(ТипРасчета = 1, Ложь, Истина);
		НачатьОткрытиеЧека(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипЧека, Истина, ВыходныеПараметры);
		
	// Аннулирование чека
	ИначеЕсли Команда = "AnnulCheck" ИЛИ Команда = "АннулироватьЧек" Тогда
		ТипЧека       = ВходныеПараметры[0];
		ФискальныйЧек = ВходныеПараметры[1];
		НачатьАннулированиеЧека(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипЧека, ФискальныйЧек, ВходныеПараметры, ВыходныеПараметры);
		
	// Отменить открытый чек
	ИначеЕсли Команда = "CancelCheck" ИЛИ Команда = "ОтменитьЧек"  Тогда
		НачатьОтменуЧека(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Печать чека внесения/выемки.
	ИначеЕсли Команда = "Encash" ИЛИ Команда = "Инкассация" Тогда
		НачатьИнкассацию(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Получение ширины строки в символах
	ИначеЕсли Команда = "GetLineLength" ИЛИ Команда = "ПолучитьШиринуСтроки" Тогда
		НачатьПолучениеШириныСтроки(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	Иначе
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура осуществляет открытие смены.
//
Процедура НачатьОткрытиеСмены(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	// Заполнение выходных параметров.
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(ИнтеграцияWebKassaКлиентПереопределяемый.ДатаСеанса());
	
	Если ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура("Результат, ВыходныеПараметры", Истина, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Функция начинает отключение устройства.
//
Процедура НачатьОтключениеУстройства(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	ПараметрыКоманды = Новый Структура();
	ПараметрыКоманды.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ПараметрыКоманды.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ПараметрыКоманды.Вставить("Параметры"              , Параметры);
	ПараметрыКоманды.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ПараметрыКоманды.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	НачатьОтключениеУстройства_Завершение(Истина, Неопределено, ПараметрыКоманды);
	
КонецПроцедуры

// Функция начинает отключение устройства - завершение.
//
Процедура НачатьОтключениеУстройства_Завершение(РезультатВыполнения, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = Новый Массив();
	ВыходныеПараметры.Добавить(0);
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура("Результат, ВыходныеПараметры", Истина, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет снятие отчета без гашения.
//
Процедура НачатьПечатьОтчетаБезГашения(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	ВыходныеПараметры.Очистить();
	
	Организация = ИнтеграцияWebKassaКлиентПереопределяемый.ЗначениеРеквизитаОбъекта(Параметры.Идентификатор, "Организация");
	Если Параметры.Свойство("Организация") Тогда
		Параметры.Организация = Организация;
	Иначе
		Параметры.Вставить("Организация", Организация);
	КонецЕсли;
	ОповещениеПослеОтвета = Новый ОписаниеОповещения("НачатьПечатьXZОтчета_ПослеОтветаВебСервиса", ЭтотОбъект, Новый Структура("ОповещениеПриЗавершении", ОповещениеПриЗавершении));
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВходныеПараметры"       , ВходныеПараметры);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , Новый Массив);
	ДополнительныеПараметры.Вставить("ТипОтчета"              , 1);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПослеОтвета);
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("CashboxUniqueNumber", ИнтеграцияWebKassaКлиентПереопределяемый.ПолучитьСерийныйНомер("PrintXReport", Параметры, ВходныеПараметры));
	ДополнительныеПараметры.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	ОповещениеПриАвторизации = Новый ОписаниеОповещения("НачатьПечатьXZОтчета_ПослеАутентификации", ЭтотОбъект, ДополнительныеПараметры);
	НачатьАутентификациюПользователя(ОповещениеПриАвторизации);
	
КонецПроцедуры

// Осуществляет снятие отчета с гашением.
//
Процедура НачатьПечатьОтчетаСГашением(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	ВыходныеПараметры.Очистить();
	//Параметры.Вставить("Организация", ВходныеПараметры[1]);
	Организация = ИнтеграцияWebKassaКлиентПереопределяемый.ЗначениеРеквизитаОбъекта(Параметры.Идентификатор, "Организация");
	Если Параметры.Свойство("Организация") Тогда
		Параметры.Организация = Организация;
	Иначе
		Параметры.Вставить("Организация", Организация);
	КонецЕсли;
	
	ОповещениеПослеОтвета = Новый ОписаниеОповещения("НачатьПечатьXZОтчета_ПослеОтветаВебСервиса", ЭтотОбъект, Новый Структура("ОповещениеПриЗавершении", ОповещениеПриЗавершении));
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВходныеПараметры"       , ВходныеПараметры);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , Новый Массив);
	ДополнительныеПараметры.Вставить("ТипОтчета"              , 2);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПослеОтвета);
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("CashboxUniqueNumber", ИнтеграцияWebKassaКлиентПереопределяемый.ПолучитьСерийныйНомер("PrintZReport", Параметры, ВходныеПараметры));
	ДополнительныеПараметры.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	ОповещениеПриАвторизации = Новый ОписаниеОповещения("НачатьПечатьXZОтчета_ПослеАутентификации", ЭтотОбъект, ДополнительныеПараметры);
	НачатьАутентификациюПользователя(ОповещениеПриАвторизации);
	
КонецПроцедуры

Процедура НачатьПечатьXZОтчета_ПослеАутентификации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.РезультатВыполнения Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("РезультатВыполнения, ВыходныеПараметры", Ложь, Результат.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	АдресСервиса = ДополнительныеПараметры.ПараметрыПодключения.АдресСервиса;
	ДополнительныеПараметры.ПараметрыЗапроса.Вставить("Token",      ДополнительныеПараметры.ПараметрыПодключения.ТокенАвторизации);
	Если ДополнительныеПараметры.ТипОтчета = 1 Тогда
		ИнтеграцияWebKassaКлиент.НачатьВыполнениеМетодаВебСервиса(АдресСервиса, "XReport", ДополнительныеПараметры.ПараметрыЗапроса, ДополнительныеПараметры);
	ИначеЕсли ДополнительныеПараметры.ТипОтчета = 2 Тогда
		ИнтеграцияWebKassaКлиент.НачатьВыполнениеМетодаВебСервиса(АдресСервиса, "ZReport", ДополнительныеПараметры.ПараметрыЗапроса, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет снятие отчета с гашением или без гашения - завершение снятия отчета с гашением или без гашения.
//
Процедура НачатьПечатьXZОтчета_ПослеОтветаВебСервиса(РезультатЗапроса, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = Новый Массив;
	Если ТипЗнч(РезультатЗапроса) <> Тип("Структура") Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить("999");
			ВыходныеПараметры.Добавить("Ошибка работы с сервером.");
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если РезультатЗапроса.РезультатВыполнения = Ложь И ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатЗапроса.РезультатВыполнения, РезультатЗапроса.ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = Истина;
	
	Попытка
		ОбъектыJSON = РезультатЗапроса.ОбъектыJSON;
		Для Каждого ОбъектJSON из ОбъектыJSON Цикл
			Если ОбъектJSON.Ключ = "Errors" И ОбъектJSON.Значение<>Неопределено Тогда
				РезультатВыполнения = Ложь;
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить("");
				ВыходныеПараметры[1] = ИнтеграцияWebKassaКлиентСервер.ПолучитьОписаниеОшибки(ОбъектJSON.Значение[0].Code) + "(" + ОбъектJSON.Значение[0].Text + ")";
			ИначеЕсли ОбъектJSON.Ключ = "Data" Тогда
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(ИнтеграцияWebKassaКлиентПереопределяемый.ДатаСеанса());
			КонецЕсли;
		КонецЦикла;
	Исключение
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ВыходныеПараметры[1] = НСтр("ru='Ошибка работы с сервером. Невозможно распознать ответ сервера.'");
		РезультатВыполнения = Ложь;
	КонецПопытки;
	
	Если РезультатВыполнения И РезультатЗапроса.ДополнительныеПараметры.Параметры.Свойство("АвтоматическаяПечатьЧека") И РезультатЗапроса.ДополнительныеПараметры.Параметры.АвтоматическаяПечатьЧека Тогда
		ДополнительныеПараметры.Вставить("ВыходныеПараметры",ВыходныеПараметры);
		ПечатьXZОтчета(
			ОбъектыJSON,
			РезультатЗапроса.ДополнительныеПараметры.ТипОтчета,
			РезультатЗапроса.ДополнительныеПараметры.Параметры,
			,
			ДополнительныеПараметры);
	Иначе
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция осуществляет внесение или выемку суммы.
//
Процедура НачатьИнкассацию(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	ТипИнкассации  = ?(ВходныеПараметры.Свойство("ТипИнкассации"), ВходныеПараметры.ТипИнкассации, 0);
	Сумма          = ?(ВходныеПараметры.Свойство("Сумма"), ВходныеПараметры.Сумма, 0);
	
//	Параметры.Вставить("Организация", ВходныеПараметры[9]);
	Организация = ИнтеграцияWebKassaКлиентПереопределяемый.ЗначениеРеквизитаОбъекта(Параметры.Идентификатор, "Организация");
	Если Параметры.Свойство("Организация") Тогда
		Параметры.Организация = Организация;
	Иначе
		Параметры.Вставить("Организация", Организация);
	КонецЕсли;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВходныеПараметры"       , ВходныеПараметры);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	
	ОповещениеПослеОтвета = Новый ОписаниеОповещения("НачатьИнкассацию_ПослеОтветаВебСервиса", ЭтотОбъект, Новый Структура("ОповещениеПриЗавершении", ОповещениеПриЗавершении));
	
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПослеОтвета);
	
	ВыходныеПараметры.Очистить();
	
	Результат = Истина;
	
	//получить данные об организации, ндс и кассире
	ДанныеОбОрганизации = ИнтеграцияWebKassaВызовСервераПереопределяемый.ПолучитьСведенияОбОрганизации(Параметры.Организация, ТекущаяДата());
	ДанныеОбОрганизации.Вставить("Кассир",                  "");
	ДанныеОбОрганизации.Вставить("СерийныйНомерККМ",        ИнтеграцияWebKassaКлиентПереопределяемый.ЗначениеРеквизитаОбъекта(Параметры.Идентификатор, "СерийныйНомер"));
	
	// Код 0 для внесения, код 1 для изъятия.
	ТипОперации = ?(ТипИнкассации = 1, 0, 1);
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("CashboxUniqueNumber", ДанныеОбОрганизации.СерийныйНомерККМ);
	ПараметрыЗапроса.Вставить("OperationType",       ТипОперации);
	ПараметрыЗапроса.Вставить("Sum",                 Сумма);
	ПараметрыЗапроса.Вставить("ExternalCheckNumber", "");
	//ПараметрыЗапроса.Вставить("ExternalCheckNumber", Строка(Новый УникальныйИдентификатор));
	
	ДополнительныеПараметры.Вставить("Сумма"              , Сумма);
	ДополнительныеПараметры.Вставить("ТипОперации"        , ТипОперации);
	ДополнительныеПараметры.Вставить("ДанныеОбОрганизации", ДанныеОбОрганизации);
	ДополнительныеПараметры.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	ОповещениеПриАвторизации = Новый ОписаниеОповещения("НачатьИнкассацию_ПослеАутентификации", ЭтотОбъект, ДополнительныеПараметры);
	
	НачатьАутентификациюПользователя(ОповещениеПриАвторизации);
	
КонецПроцедуры

Процедура НачатьИнкассацию_ПослеАутентификации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.РезультатВыполнения Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("РезультатВыполнения, ВыходныеПараметры", Ложь, Результат.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	АдресСервиса = ДополнительныеПараметры.ПараметрыПодключения.АдресСервиса;
	ДополнительныеПараметры.ПараметрыЗапроса.Вставить("Token",      ДополнительныеПараметры.ПараметрыПодключения.ТокенАвторизации);
	
	ИнтеграцияWebKassaКлиент.НачатьВыполнениеМетодаВебСервиса(АдресСервиса, "MoneyOperation", ДополнительныеПараметры.ПараметрыЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

// Осуществляет снятие отчета с гашением или без гашения - завершение снятия отчета с гашением или без гашения.
//
Процедура НачатьИнкассацию_ПослеОтветаВебСервиса(РезультатЗапроса, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = Новый Массив;
	Если ТипЗнч(РезультатЗапроса) <> Тип("Структура") Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить("999");
			ВыходныеПараметры.Добавить("Ошибка работы с сервером.");
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если РезультатЗапроса.РезультатВыполнения = Ложь И ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатЗапроса.РезультатВыполнения, РезультатЗапроса.ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = Истина;
	
	Попытка
		ОбъектыJSON = РезультатЗапроса.ОбъектыJSON;
		Для Каждого ОбъектJSON из ОбъектыJSON Цикл
			Если ОбъектJSON.Ключ = "Errors" И ОбъектJSON.Значение<>Неопределено Тогда
				РезультатВыполнения = Ложь;
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить("");
				ВыходныеПараметры[1] = ИнтеграцияWebKassaКлиентСервер.ПолучитьОписаниеОшибки(ОбъектJSON.Значение[0].Code) + "(" + ОбъектJSON.Значение[0].Text + ")";
			ИначеЕсли ОбъектJSON.Ключ = "Data" Тогда
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(ИнтеграцияWebKassaКлиентПереопределяемый.ДатаСеанса());
			КонецЕсли;
		КонецЦикла;
	Исключение
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ВыходныеПараметры[1] = НСтр("ru='Ошибка работы с сервером. Невозможно распознать ответ сервера.'");
		РезультатВыполнения = Ложь;
	КонецПопытки;
	
	Если РезультатВыполнения И РезультатЗапроса.ДополнительныеПараметры.Параметры.Свойство("АвтоматическаяПечатьЧека") И РезультатЗапроса.ДополнительныеПараметры.Параметры.АвтоматическаяПечатьЧека Тогда
		ДополнительныеПараметры.Вставить("ВыходныеПараметры",ВыходныеПараметры);
		ПечатьЧекаВнесенияИзъятия(
			ОбъектыJSON,
			РезультатЗапроса.ДополнительныеПараметры.Сумма,
			РезультатЗапроса.ДополнительныеПараметры.ТипОперации,
			РезультатЗапроса.ДополнительныеПараметры.Параметры,
			РезультатЗапроса.ДополнительныеПараметры.ДанныеОбОрганизации,
			ДополнительныеПараметры);
	//ИначеЕсли НЕ РезультатВыполнения Тогда
	//	ОтменитьЧек(
	//		РезультатЗапроса.ДополнительныеПараметры.ОбъектДрайвера,
	//		РезультатЗапроса.ДополнительныеПараметры.Параметры,
	//		РезультатЗапроса.ДополнительныеПараметры.ПараметрыПодключения,
	//		РезультатЗапроса.ДополнительныеПараметры.ВыходныеПараметры);
	//		
	Иначе
		
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		
	КонецЕсли;
	
	//Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
	//	Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатЗапроса.РезультатВыполнения, ВыходныеПараметры);
	//	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
	//КонецЕсли;
	
КонецПроцедуры

// Процедура осуществляет открытие нового чека.
//
Процедура НачатьОткрытиеЧека(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипЧека, ФискальныйЧек, ВыходныеПараметры) Экспорт
	
	НомерСмены = 0;
	НомерЧека  = 0;
	
	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить(НомерСмены);
	ВыходныеПараметры.Добавить(НомерЧека);
	ВыходныеПараметры.Добавить(0); // Номер документа
	ВыходныеПараметры.Добавить(ИнтеграцияWebKassaКлиентПереопределяемый.ДатаСеанса());
	Если ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура("Результат, ВыходныеПараметры", Истина, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Процедура начинает Фискализацию чека.
//
Процедура НачатьФискализациюЧека(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	ОповещениеПриЗавершении.ДополнительныеПараметры.Вставить("ПодписьЧека", "");
	
	Если ТипЗнч(ВходныеПараметры) = Тип("Структура") Тогда
		ОбщиеПараметры = ВходныеПараметры;
	Иначе
		ОбщиеПараметры = ВходныеПараметры[0];
	КонецЕсли;
	
	ПозицииЧека  = ОбщиеПараметры.ПозицииЧека;
	ТаблицаОплат = ОбщиеПараметры.ТаблицаОплат;
	
	СведенияОбОрганизации = Новый Структура;
	ВыходныеПараметры.Добавить(СведенияОбОрганизации);
	Организация = ИнтеграцияWebKassaКлиентПереопределяемый.ЗначениеРеквизитаОбъекта(ОбщиеПараметры.ДокументОснование, "Организация");
	Параметры.Вставить("Организация", Организация);
	
	ТипРасчета = ИнтеграцияWebKassaКлиентПереопределяемый.КодТипаРасчета(ОбщиеПараметры.ТипРасчета);
	ТипЧека =  ?(ТипРасчета = 1, Ложь, Истина);
	
	Если Не ЗначениеЗаполнено(ОбщиеПараметры.СерийныйНомер) Тогда
		ОбщиеПараметры.СерийныйНомер = ИнтеграцияWebKassaКлиентПереопределяемый.ЗначениеРеквизитаОбъекта(Параметры.Идентификатор, "СерийныйНомер");
	КонецЕсли;
	
	ДанныеДляЗапроса = ОбщаяИнформацияПоЧеку(ОбщиеПараметры.СерийныйНомер, ТипЧека, Истина, ВыходныеПараметры);
	
	// Печатаем строки чека
	Для Каждого ПозицияЧека Из ПозицииЧека Цикл
		
		Наименование  = ?(ПозицияЧека.Свойство("Наименование") , ПозицияЧека.Наименование , "");
		Количество    = ?(ПозицияЧека.Свойство("Количество")   , ПозицияЧека.Количество   , 1);
		Цена          = ?(ПозицияЧека.Свойство("Цена")         , ПозицияЧека.Цена         , 0);
		Сумма         = ?(ПозицияЧека.Свойство("Сумма")        , ПозицияЧека.Сумма        , 0);
		НомерСекции   = ?(ПозицияЧека.Свойство("НомерСекции")  , ПозицияЧека.НомерСекции  , 0);
		СтавкаНДС     = ?(ПозицияЧека.Свойство("СтавкаНДС")    , ПозицияЧека.СтавкаНДС    , 0);
		ЕдиницаИзмеренияКод   = ?(ПозицияЧека.Свойство("КодЕдиницыИзмерения"), ПозицияЧека.КодЕдиницыИзмерения, 0);
		
		Если ПозицияЧека.Свойство("ДанныеКодаТоварнойНоменклатуры") Тогда 
			
			Если ПозицияЧека.ДанныеКодаТоварнойНоменклатуры.Свойство("КодМаркировкиBase64") Тогда
				КодМаркировки = ИнтеграцияWebKassaКлиентСервер.ПреобразоватьBase64ВШтрихкод(ПозицияЧека.ДанныеКодаТоварнойНоменклатуры.КодМаркировкиBase64);
			ИначеЕсли ПозицияЧека.ДанныеКодаТоварнойНоменклатуры.Свойство("КодМаркировки") Тогда 
				КодМаркировки = ПозицияЧека.ДанныеКодаТоварнойНоменклатуры.КодМаркировки;
			ИначеЕсли ЗначениеЗаполнено(ПозицияЧека.ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы) 
				И ЗначениеЗаполнено(ПозицияЧека.ДанныеКодаТоварнойНоменклатуры.СерийныйНомер) Тогда
				КодМаркировки = ПозицияЧека.ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы + ПозицияЧека.ДанныеКодаТоварнойНоменклатуры.СерийныйНомер;
				КодМаркировки = ?(ЗначениеЗаполнено(КодМаркировки), КодМаркировки, Неопределено);
			Иначе 
				КодМаркировки = Неопределено;
			КонецЕсли;
		Иначе 
			КодМаркировки = Неопределено;
		КонецЕсли;
		
		Если СтавкаНДС = Неопределено Тогда
			СтавкаНДС = 0;
		КонецЕсли;
		
		Если ПозицияЧека.Свойство("ТоварВС") И ПозицияЧека.ТоварВС Тогда
			ДанныеИдентификацииТовара = Новый Структура;
			ДанныеИдентификацииТовара.Вставить("ТипСклада", ?(ПозицияЧека.ТоварВС, 1, 0));
			ДанныеИдентификацииТовара.Вставить("GTIN", ?(ПозицияЧека.ТоварВС, ПозицияЧека.GTIN, ""));
			ДанныеИдентификацииТовара.Вставить("ИдентификаторТовара", ?(ПозицияЧека.ТоварВС, ПозицияЧека.ИдентификаторВС, 0));
			ДанныеИдентификацииТовара.Вставить("ТоварВС", Истина);
		ИначеЕсли ПозицияЧека.Свойство("ШтрихКод")
			И ЗначениеЗаполнено(ПозицияЧека.ШтрихКод) Тогда
			ДанныеИдентификацииТовара = Новый Структура;
			ДанныеИдентификацииТовара.Вставить("GTIN", РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.GTINПоШтрихкодуEAN(ПозицияЧека.ШтрихКод));
			ДанныеИдентификацииТовара.Вставить("ТоварВС", Ложь);
		Иначе 
			ДанныеИдентификацииТовара = Неопределено;
		КонецЕсли; 

		ДобавитьПозициюВЧек(Наименование, Количество, Цена, Сумма, НомерСекции, СтавкаНДС, ЕдиницаИзмеренияКод, КодМаркировки, ДанныеИдентификацииТовара, ДанныеДляЗапроса);		
		
	КонецЦикла;
	
	СуммаНаличными       = 0;
	СуммаЭлектронными    = 0;
	СуммаПостоплатой     = 0;
	СуммаПредоплатой     = 0;
	СуммаМобильный       = 0;
	
	ИнтеграцияWebKassaКлиентПереопределяемый.РассчитатьСуммуТиповПлатежей(ТаблицаОплат, СуммаНаличными, СуммаЭлектронными, СуммаПостоплатой, СуммаПредоплатой, СуммаМобильный);
	
	Если СуммаНаличными > 0 Тогда
		// Наличные.
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("Sum",         СуммаНаличными);
		СтрокаОплаты.Вставить("PaymentType", 0);
		ДанныеДляЗапроса.Payments.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	Если СуммаЭлектронными > 0 Тогда
		// Банковская карта.
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("Sum",         СуммаЭлектронными);
		СтрокаОплаты.Вставить("PaymentType", 1);
		ДанныеДляЗапроса.Payments.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	Если СуммаМобильный > 0 Тогда
		// Банковская карта.
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("Sum",         СуммаМобильный);
		СтрокаОплаты.Вставить("PaymentType", 4);
		ДанныеДляЗапроса.Payments.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	Если СуммаПостоплатой > 0 Тогда
		// Оплата в кредит.
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("Sum",         СуммаПостоплатой);
		СтрокаОплаты.Вставить("PaymentType", 2);
		ДанныеДляЗапроса.Payments.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	Если СуммаПредоплатой > 0 Тогда
		// Оплата тарой.
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("Sum",         СуммаПредоплатой);
		СтрокаОплаты.Вставить("PaymentType", 3);
		ДанныеДляЗапроса.Payments.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	//В кассах работающих по протоколу ОФД 2.0.2 не поддерживаются виды оплат Кредит и Тара.
	Если СуммаПостоплатой <> 0 ИЛИ СуммаПредоплатой <> 0 Тогда
		ИмяСобытия = нСтр("ru='ККМ Webkassa. Использование неподдерживаемых типов оплат'", "ru");
		ТекстСообщения = нСтр("ru='При отправке чека используются типы оплат ""Кредит"" или ""Подарочные сертификаты (тара)"".
		|Данные типы оплат не поддерживаются в протоколе ОФД 2.0.2, поэтому на стороне оборудования возможны ошибки.'", "ru");
		Если ОбщиеПараметры.Свойство("ДокументОснование") И ЗначениеЗаполнено(ОбщиеПараметры.ДокументОснование) Тогда
			ДокументОснование = ОбщиеПараметры.ДокументОснование;
		Иначе
			ДокументОснование = Неопределено;
		КонецЕсли;
		ИнтеграцияWebKassaВызовСервера.ЗаписатьСообщениеВЖурналРегистрации(ИмяСобытия, ТекстСообщения, ДокументОснование, "Предупреждение");
	КонецЕсли;
	
	//Контроль уникальности чеков, чтобы из одного документа не было пробито несколько чеков
	ДанныеДляЗапроса.Вставить("ExternalCheckNumber", Строка(ОбщиеПараметры.ДокументОснование.УникальныйИдентификатор()));
	
	//Электронная почта покупателя
	Если ЗначениеЗаполнено(ОбщиеПараметры.ПокупательEmail) Тогда
		ДанныеДляЗапроса.Вставить("CustomerEmail", ОбщиеПараметры.ПокупательEmail);
	КонецЕсли;
	
	Если ОбщиеПараметры.Свойство("ПолучательИИН") И НЕ ПустаяСтрока(ОбщиеПараметры.ПолучательИИН) Тогда
		ДанныеДляЗапроса.Вставить("CustomerXin", ОбщиеПараметры.ПолучательИИН);
	КонецЕсли;
	
	ДанныеДляЗапроса.Вставить("CustomerPhone", ОбщиеПараметры.ПокупательНомер);
	
	ОповещениеПослеОтвета = Новый ОписаниеОповещения("НачатьЗакрытиеЧека_ПослеОтветаВебСервиса", ЭтотОбъект, Новый Структура("ОповещениеПриЗавершении", ОповещениеПриЗавершении));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
	ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
	ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
	ДополнительныеПараметры.Вставить("ВходныеПараметры"       , ВходныеПараметры);
	ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПослеОтвета);
	ДополнительныеПараметры.Вставить("ПараметрыЗапроса"       , ДанныеДляЗапроса);
	ДополнительныеПараметры.Вставить("СведенияОбОрганизации"  , СведенияОбОрганизации);
	
	ОповещениеПриАвторизации = Новый ОписаниеОповещения("НачатьЗакрытиеЧека_ПослеАутентификации", ЭтотОбъект, ДополнительныеПараметры);
	
	НачатьАутентификациюПользователя(ОповещениеПриАвторизации);
		
КонецПроцедуры

//Формирует общую информацию по чеку для запроса
//
Функция ОбщаяИнформацияПоЧеку(СерийныйНомер, ЧекВозврата, ФискальныйЧек, ВыходныеПараметры)
	
	Результат = Истина;
	НомерСмены = 0;
	НомерЧека  = 0;
	
	// Код 2 для продажи, код 3 для возврата продажи.
	ТипОперации = ?(ЧекВозврата, 3, 2);
	ТипОкругления = 0; //0	Без округления  1 Округление итога 2 Округление позиций
	
	Если Не ЗначениеЗаполнено(СерийныйНомер) Тогда
		
	КонецЕсли;
	
	ДанныеДляЗапроса = Новый Структура;
	ДанныеДляЗапроса.Вставить("CashboxUniqueNumber",   СерийныйНомер);
	ДанныеДляЗапроса.Вставить("OperationType",         ТипОперации);
	ДанныеДляЗапроса.Вставить("RoundType",             ТипОкругления);
	ДанныеДляЗапроса.Вставить("Positions",             Новый Массив);
	ДанныеДляЗапроса.Вставить("Payments",              Новый Массив);
	//ДанныеДляЗапроса.Вставить("СведенияОбОрганизации", ВыходныеПараметры[0]);
	// Заполнение выходных параметров.
	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить(НомерСмены);
	ВыходныеПараметры.Добавить(НомерЧека);
	ВыходныеПараметры.Добавить(0);
	ВыходныеПараметры.Добавить(ИнтеграцияWebKassaКлиентПереопределяемый.ДатаСеанса());
	//ВыходныеПараметры.Добавить(ДанныеДляЗапроса);
	
	Возврат ДанныеДляЗапроса;
	
КонецФункции

// Функция осуществляет печать фискальной строки.
//
Функция ДобавитьПозициюВЧек(Наименование, Количество, Цена, Сумма,
							НомерСекции, СтавкаНДС, ЕдиницаИзмеренияКод,
							КодМаркировки, ДанныеИдентификацииТовара, ДанныеДляЗапроса) Экспорт

	НалогСумма = Окр(СтавкаНДС * 0.01 * Сумма / (1 + СтавкаНДС / 100), 2);
	РазницаПоСкидке = Окр(Цена * Количество, 2) - Сумма;
	Скидка = 0;
	Наценка = 0;
	Если РазницаПоСкидке > 0 Тогда
		Скидка = РазницаПоСкидке;
	ИначеЕсли РазницаПоСкидке < 0 Тогда
		Наценка = -1 * РазницаПоСкидке;
	КонецЕсли;
	
	ТипНалога = ?(СтавкаНДС = 0, 0, 100);
	
	ПозицияВЧеке = Новый Структура;
	ПозицияВЧеке.Вставить("Count",        Количество);
	ПозицияВЧеке.Вставить("Price",        Цена);
	ПозицияВЧеке.Вставить("Tax",          НалогСумма);
	ПозицияВЧеке.Вставить("TaxType",      ТипНалога);
	ПозицияВЧеке.Вставить("PositionName", Наименование);
	ПозицияВЧеке.Вставить("PositionCode", ДанныеДляЗапроса.Positions.Количество()+1);
	ПозицияВЧеке.Вставить("Discount",     Скидка);
	ПозицияВЧеке.Вставить("Markup",       Наценка);
	ПозицияВЧеке.Вставить("SectionCode",  НомерСекции);
	ПозицияВЧеке.Вставить("UnitCode",     Число(ЕдиницаИзмеренияКод));
	Если ЗначениеЗаполнено(КодМаркировки) Тогда 
		ПозицияВЧеке.Вставить("Mark",         КодМаркировки);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ДанныеИдентификацииТовара) Тогда
		ПозицияВЧеке.Вставить("GTIN",          ДанныеИдентификацииТовара.GTIN);
		Если ДанныеИдентификацииТовара.ТоварВС Тогда 
			ПозицияВЧеке.Вставить("ProductId",     ДанныеИдентификацииТовара.ИдентификаторТовара);
			ПозицияВЧеке.Вставить("WarehouseType", ДанныеИдентификацииТовара.ТипСклада);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеДляЗапроса.Positions.Добавить(ПозицияВЧеке);
	
	Возврат Истина;

КонецФункции

// Процедура осуществляет печать чека.
//
Процедура НачатьПечатьЧека(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	ТаблицаНоменклатуры = ВходныеПараметры[0];
	ТаблицаОплат        = ВходныеПараметры[1];
	ОбщиеПараметры      = ВходныеПараметры[2];
	
	РезультатВыполнения = Истина;
	// Открываем чек
	
	Если ВходныеПараметры[2].Количество() > 22 Тогда
		СведенияОбОрганизации = Новый Структура;
		СведенияОбОрганизации.Вставить("Кассир",                  ВходныеПараметры[2][12]);
		СведенияОбОрганизации.Вставить("Организация",             ВходныеПараметры[2][13]);
		СведенияОбОрганизации.Вставить("ИИН",                     ВходныеПараметры[2][14]);
		СведенияОбОрганизации.Вставить("СерийныйНомерККМ",        ВходныеПараметры[2][20]);
		СведенияОбОрганизации.Вставить("РегистрационныйНомерККМ", ВходныеПараметры[2][22]);
		СведенияОбОрганизации.Вставить("СерияСвидетельстваПоНДС", ВходныеПараметры[2][23]);
		СведенияОбОрганизации.Вставить("НомерСвидетельстваПоНДС", ВходныеПараметры[2][24]);
		ВыходныеПараметры.Добавить(СведенияОбОрганизации);
	КонецЕсли;
	
	Параметры.Вставить("Организация", ВходныеПараметры[2][25]);
	
	РезультатВыполнения = ОткрытьЧек(ОбъектДрайвера, Параметры, ПараметрыПодключения,
	                       ВходныеПараметры[2][0], ВходныеПараметры[2][1], ВыходныеПараметры);

	// Печатаем строки чека
	Если РезультатВыполнения Тогда
		ОшибкаПриПечати = Ложь;
		// Печатаем строки чека
		Для ИндексМассива = 0 По ТаблицаНоменклатуры.Количество() - 1 Цикл
			Наименование  = ТаблицаНоменклатуры[ИндексМассива][0].Значение;
			Количество    = ТаблицаНоменклатуры[ИндексМассива][5].Значение;
			Цена          = ТаблицаНоменклатуры[ИндексМассива][4].Значение;
			Сумма         = ТаблицаНоменклатуры[ИндексМассива][9].Значение;
			НомерСекции   = ТаблицаНоменклатуры[ИндексМассива][3].Значение;
			СтавкаНДС     = ТаблицаНоменклатуры[ИндексМассива][12].Значение;

			Если НЕ НапечататьФискальнуюСтроку(ОбъектДрайвера, Параметры, ПараметрыПодключения,
											   Наименование, Количество, Цена, Сумма,
											   НомерСекции, СтавкаНДС, ВыходныеПараметры) Тогда
				ОшибкаПриПечати = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ОшибкаПриПечати Тогда
			
			СведенияОбОрганизации = Неопределено;
			ВыходныеПараметры[4].Свойство("СведенияОбОрганизации", СведенияОбОрганизации);
			ВыходныеПараметры[4].Удалить("СведенияОбОрганизации");
			
			СуммаНаличнойОплаты    = 0;
			СуммаБезналичнойОплаты1 = 0;
			СуммаБезналичнойОплаты2 = 0;
			СуммаБезналичнойОплаты3 = 0;
			
			Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
				Если ТаблицаОплат[ИндексОплаты][0].Значение = 0 Тогда
					СуммаНаличнойОплаты = СуммаНаличнойОплаты + ТаблицаОплат[ИндексОплаты][1].Значение;
				ИначеЕсли ТаблицаОплат[ИндексОплаты][0].Значение = 1 Тогда
					СуммаБезналичнойОплаты1 = СуммаБезналичнойОплаты1 + ТаблицаОплат[ИндексОплаты][1].Значение;
				ИначеЕсли ТаблицаОплат[ИндексОплаты][0].Значение = 2 Тогда
					СуммаБезналичнойОплаты2 = СуммаБезналичнойОплаты2 + ТаблицаОплат[ИндексОплаты][1].Значение;
				Иначе
					СуммаБезналичнойОплаты3 = СуммаБезналичнойОплаты3 + ТаблицаОплат[ИндексОплаты][1].Значение;
				КонецЕсли;
			КонецЦикла;
			
			Если СуммаНаличнойОплаты > 0 Тогда
				// Наличные.
				СтрокаОплаты = Новый Структура;
				СтрокаОплаты.Вставить("Sum",         СуммаНаличнойОплаты);
				СтрокаОплаты.Вставить("PaymentType", 0);
				ВыходныеПараметры[4].Payments.Добавить(СтрокаОплаты);
			КонецЕсли;
			
			Если СуммаБезналичнойОплаты1 > 0 Тогда
				// Банковская карта.
				СтрокаОплаты = Новый Структура;
				СтрокаОплаты.Вставить("Sum",         СуммаБезналичнойОплаты1);
				СтрокаОплаты.Вставить("PaymentType", 1);
				ВыходныеПараметры[4].Payments.Добавить(СтрокаОплаты);
			КонецЕсли;
			
			Если СуммаБезналичнойОплаты2 > 0 Тогда
				// Оплата в кредит.
				СтрокаОплаты = Новый Структура;
				СтрокаОплаты.Вставить("Sum",         СуммаБезналичнойОплаты2);
				СтрокаОплаты.Вставить("PaymentType", 2);
				ВыходныеПараметры[4].Payments.Добавить(СтрокаОплаты);
			КонецЕсли;
			
			Если СуммаБезналичнойОплаты3 > 0 Тогда
				// Оплата тарой.
				СтрокаОплаты = Новый Структура;
				СтрокаОплаты.Вставить("Sum",         СуммаБезналичнойОплаты3);
				СтрокаОплаты.Вставить("PaymentType", 3);
				ВыходныеПараметры[4].Payments.Добавить(СтрокаОплаты);
			КонецЕсли;
			
			ПараметрыЗапроса = ВыходныеПараметры[4];
			
			ОповещениеПослеОтвета = Новый ОписаниеОповещения("НачатьЗакрытиеЧека_ПослеОтветаВебСервиса", ЭтотОбъект, Новый Структура("ОповещениеПриЗавершении", ОповещениеПриЗавершении));
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ОбъектДрайвера"         , ОбъектДрайвера);
			ДополнительныеПараметры.Вставить("Параметры"              , Параметры);
			ДополнительныеПараметры.Вставить("ПараметрыПодключения"   , ПараметрыПодключения);
			ДополнительныеПараметры.Вставить("ВходныеПараметры"       , ВходныеПараметры);
			ДополнительныеПараметры.Вставить("ВыходныеПараметры"      , ВыходныеПараметры);
			ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПослеОтвета);
			ДополнительныеПараметры.Вставить("ПараметрыЗапроса"       , ПараметрыЗапроса);
			ДополнительныеПараметры.Вставить("СведенияОбОрганизации"  , СведенияОбОрганизации);
			
			ОповещениеПриАвторизации = Новый ОписаниеОповещения("НачатьЗакрытиеЧека_ПослеАутентификации", ЭтотОбъект, ДополнительныеПараметры);
			
			НачатьАутентификациюПользователя(ОповещениеПриАвторизации);
			
		Иначе
			РезультатВыполнения = Ложь;
			Если ОповещениеПриЗавершении <> Неопределено Тогда
				Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения, ВыходныеПараметры);
				ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьЗакрытиеЧека_ПослеАутентификации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.РезультатВыполнения Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("РезультатВыполнения, ВыходныеПараметры", Ложь, Результат.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	АдресСервиса = ДополнительныеПараметры.ПараметрыПодключения.АдресСервиса;
	ДополнительныеПараметры.ПараметрыЗапроса.Вставить("Token",      ДополнительныеПараметры.ПараметрыПодключения.ТокенАвторизации);
	
	ИнтеграцияWebKassaКлиент.НачатьВыполнениеМетодаВебСервиса(АдресСервиса, "Check", ДополнительныеПараметры.ПараметрыЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

// Осуществляет закрытие чека с печатью, в зависимости от результата.
//
Процедура НачатьЗакрытиеЧека_ПослеОтветаВебСервиса(РезультатЗапроса, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = Новый Массив;
	Если ТипЗнч(РезультатЗапроса) <> Тип("Структура") Тогда
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить("999");
			ВыходныеПараметры.Добавить("Ошибка работы с сервером.");
			Результат = Новый Структура("Результат, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если РезультатЗапроса.РезультатВыполнения = Ложь И ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатЗапроса.РезультатВыполнения, РезультатЗапроса.ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		Возврат;
	КонецЕсли;
	
	ВыходныеПараметры = РезультатЗапроса.ДополнительныеПараметры.ВыходныеПараметры;
	РезультатВыполнения = Истина;
	
	Попытка
		ОбъектыJSON = РезультатЗапроса.ОбъектыJSON;
		Для Каждого ОбъектJSON из ОбъектыJSON Цикл
			Если ОбъектJSON.Ключ = "Errors" Тогда
				Если ОбъектJSON.Значение<>Неопределено Тогда
					Результат = Ложь;
					ВыходныеПараметры.Очистить();
					ВыходныеПараметры.Добавить(999);
					ВыходныеПараметры.Добавить("");
					ВыходныеПараметры[1] = ИнтеграцияWebKassaКлиентСервер.ПолучитьОписаниеОшибки(ОбъектJSON.Значение[0].Code) + "(" + ОбъектJSON.Значение[0].Text + ")";
				КонецЕсли;
			ИначеЕсли ОбъектJSON.Ключ = "Data" Тогда
				ИнтеграцияWebKassaКлиентСервер.ДополнитьФорматДанныхЧека(ОбъектJSON.Значение);
				ФискальныйНомер =         ОбъектJSON.Значение.CheckNumber;
				АвтономныйРежимРаботы =   ОбъектJSON.Значение.OfflineMode;
				ИНК =                     ОбъектJSON.Значение.Cashbox.IdentityNumber;
				НомерСмены =              ОбъектJSON.Значение.ShiftNumber;
				НомерВРамкахСмены =       ОбъектJSON.Значение.CheckOrderNumber;
				ДатаЧека =                ОбъектJSON.Значение.DateTime;
				СерийныйНомерККМ =        ОбъектJSON.Значение.Cashbox.UniqueNumber;
				РегистрационныйНомерККМ = ОбъектJSON.Значение.Cashbox.RegistrationNumber;
				АдресККМ =                ОбъектJSON.Значение.Cashbox.Address;
				СсылкаНаЧек =             ОбъектJSON.Значение.TicketUrl;
				
				РезультатЗапроса.ДополнительныеПараметры.ПараметрыЗапроса.Вставить("ФискальныйНомер",         ФискальныйНомер);
				РезультатЗапроса.ДополнительныеПараметры.ПараметрыЗапроса.Вставить("АвтономныйРежимРаботы",   АвтономныйРежимРаботы);
				РезультатЗапроса.ДополнительныеПараметры.ПараметрыЗапроса.Вставить("ИНК",                     ИНК);
				РезультатЗапроса.ДополнительныеПараметры.ПараметрыЗапроса.Вставить("НомерСмены",              НомерСмены);
				РезультатЗапроса.ДополнительныеПараметры.ПараметрыЗапроса.Вставить("НомерВРамкахСмены",       НомерВРамкахСмены);
				РезультатЗапроса.ДополнительныеПараметры.ПараметрыЗапроса.Вставить("ДатаЧека",                ДатаЧека);
				РезультатЗапроса.ДополнительныеПараметры.ПараметрыЗапроса.Вставить("СерийныйНомерККМ",        СерийныйНомерККМ);
				РезультатЗапроса.ДополнительныеПараметры.ПараметрыЗапроса.Вставить("РегистрационныйНомерККМ", РегистрационныйНомерККМ);
				РезультатЗапроса.ДополнительныеПараметры.ПараметрыЗапроса.Вставить("АдресККМ",                АдресККМ);
				РезультатЗапроса.ДополнительныеПараметры.ПараметрыЗапроса.Вставить("СсылкаНаЧек",             СсылкаНаЧек);
				РезультатЗапроса.ДополнительныеПараметры.ПараметрыЗапроса.Вставить("Cashbox",                 ОбъектJSON.Значение.Cashbox);
				
				ВыходныеПараметры[0] = НомерСмены;
				ВыходныеПараметры[1] = НомерВРамкахСмены;
				
				Если ТипЗнч(РезультатЗапроса.ДополнительныеПараметры.ВходныеПараметры) = Тип("Структура") Тогда
					ОбщиеПараметры = РезультатЗапроса.ДополнительныеПараметры.ВходныеПараметры;
				Иначе
					ОбщиеПараметры = РезультатЗапроса.ДополнительныеПараметры.ВходныеПараметры[0];
				КонецЕсли;
				
				СведенияОбОрганизации = ИнтеграцияWebKassaКлиентПереопределяемый.ПолучитьСведенияОбОрганизации(ОбщиеПараметры);
				
			Иначе
				Результат = Ложь;
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить("Ошибка в ответе запроса.");
			КонецЕсли;
		КонецЦикла;
	Исключение
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ВыходныеПараметры[1] = НСтр("ru='Ошибка работы с сервером. Невозможно распознать ответ сервера.'");
		РезультатВыполнения = Ложь; 
	КонецПопытки;
	
	Если РезультатВыполнения И РезультатЗапроса.ДополнительныеПараметры.Параметры.Свойство("АвтоматическаяПечатьЧека") И РезультатЗапроса.ДополнительныеПараметры.Параметры.АвтоматическаяПечатьЧека Тогда
		//запрос успешно обработан и выполняется печать чека
		ДополнительныеПараметры.Вставить("ВыходныеПараметры",ВыходныеПараметры);
		ПечатьФискальногоЧека(
			РезультатЗапроса.ДополнительныеПараметры.ПараметрыЗапроса,
			0,
			РезультатЗапроса.ДополнительныеПараметры.Параметры,
			СведенияОбОрганизации,
			ДополнительныеПараметры);
		
	//ИначеЕсли НЕ РезультатВыполнения Тогда
	Иначе
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			//Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатЗапроса.РезультатВыполнения, ВыходныеПараметры);
			Результат = Новый Структура("Результат, ВыходныеПараметры", РезультатВыполнения, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура осуществляет отмену ранее открытого чека.
//
Процедура НачатьОтменуЧека(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	НомерСмены = 0;
	НомерЧека  = 0;
	
	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить(НомерСмены);
	ВыходныеПараметры.Добавить(НомерЧека);
	
	Если ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура("Результат, ВыходныеПараметры", Истина, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Процедура возвращает описание установленного драйвера.
//
Процедура НачатьПолучениеОписаниеДрайвера(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено'"));
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	
	Если ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура("Результат, ВыходныеПараметры", Истина, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Процедура осуществляет тестирование устройства.
//
Процедура НачатьТестУстройства(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Если ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура("Результат, ВыходныеПараметры", Истина, Новый Массив);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Процедура возвращает версию установленного драйвера.
//
Процедура НачатьПолучениеВерсииДрайвера(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена'"));
	
	Если ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура("Результат, ВыходныеПараметры", Истина, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Процедура получает ширину строки в символах.
//  
Процедура НачатьПолучениеШириныСтроки(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт 
	
	ШиринаСтроки = ?(Параметры.ШиринаЛенты=Неопределено, 24, Параметры.ШиринаЛенты);
	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить(ШиринаСтроки);
	
	Если ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура("Результат, ВыходныеПараметры", Истина, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Процедура начала печати текста.
//
Процедура НачатьПечатьТекста(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры) Экспорт
	
	ТекстСообщения = "";
	// Печатаем строки чека
	Если Параметры.Свойство("АвтоматическаяПечатьЧека") И Параметры.АвтоматическаяПечатьЧека Тогда
		ТабличныйДокумент = Новый ТабличныйДокумент;
		РезультатПечати = 
			ИнтеграцияWebKassaВызовСервера.ПечатьНефискальногоЧека(СтрокаТекста, Параметры, ТабличныйДокумент);
		Если ТабличныйДокумент = Неопределено Тогда
			ШаблонСообщения = НСтр("ru = 'Операция проведена. Произошла ошибка при печати нефискальной строки.
			|Дополнительное описание:
			|%1'");
			ТекстСообщения = ИнтеграцияWebKassaКлиентПереопределяемый.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатПечати);
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ТекстСообщения);
		Иначе
			ТабличныйДокумент.АвтоМасштаб = Истина;
			ТабличныйДокумент.Напечатать();
		КонецЕсли;
	КонецЕсли;
	
	Если ОповещениеПриЗавершении <> Неопределено Тогда
		Результат = Новый Структура("Результат, ВыходныеПараметры", Истина, ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
	КонецЕсли;

КонецПроцедуры

// Процедура осуществляет аннулирование чека.
//
Процедура НачатьАннулированиеЧека(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ТипЧека, ФискальныйЧек, ВходныеПараметры, ВыходныеПараметры);
	
	НачатьОтменуЧека(ОповещениеПриЗавершении, ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыполнитьМетодВебСервиса(АдресСервиса, ИмяМетода, ПараметрыЗапроса) Экспорт
	
	ЗапросJSON = ИнтеграцияWebKassaКлиент.НовыйЗапросJSON(ПараметрыЗапроса);
	
	Возврат ИнтеграцияWebKassaКлиент.ОтправитьЗапросНаСервисWebkassa(АдресСервиса, "/api/v2/" + ИмяМетода, ЗапросJSON);
	
КонецФункции

// Процедура интерактивно запрашивает логин и пароль у пользователя.
//
Процедура НачатьАутентификациюПользователя(ОповещениеПриЗавершении) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ОповещениеПриЗавершении.ДополнительныеПараметры.Вставить("ОповещениеПриОшибкеАвторизации", ОповещениеПриЗавершении);
	
	Организация = Неопределено;
	ОповещениеПриЗавершении.ДополнительныеПараметры.Параметры.Свойство("Организация", Организация);
	
	АдресСервиса = ИнтеграцияWebKassaВызовСервера.АдресСервиса(Организация);
	Если ОповещениеПриЗавершении.ДополнительныеПараметры.ПараметрыПодключения.Свойство("АдресСервиса") Тогда
		ОповещениеПриЗавершении.ДополнительныеПараметры.ПараметрыПодключения.АдресСервиса = АдресСервиса;
	Иначе
		ОповещениеПриЗавершении.ДополнительныеПараметры.ПараметрыПодключения.Вставить("АдресСервиса", АдресСервиса);
	КонецЕсли;
	
	ОповещениеПриЗавершении.ДополнительныеПараметры.Вставить("Организация", Организация);
	ДополнительныеПараметры.Вставить("Организация", Организация);
	
	ЛогинПарольТокен = ПолучитьПарольИзГлобальнойПеременной(Организация);
	Если ЛогинПарольТокен = Неопределено Тогда
		ПараметрыФормы = Новый Структура("ПредлагатьЗапомнитьПароль", Организация<>Неопределено);
		ПараметрыФормы.Вставить("Организация", Организация);
		ОповещениеПослеАутентификации = Новый ОписаниеОповещения("НачатьАутентификациюПользователя_ПослеВводаДанныхАутентификации", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.Панель1СWebKassa.Форма.АутентификацияПользователя", ПараметрыФормы, , , , , ОповещениеПослеАутентификации);
	ИначеЕсли ЛогинПарольТокен.Свойство("Токен") Тогда
		ОповещениеПриЗавершении.ДополнительныеПараметры.ПараметрыПодключения.Вставить("ТокенАвторизации", ЛогинПарольТокен.Токен);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Новый Структура("РезультатВыполнения", Истина));
	Иначе
		НачатьАутентификациюПользователя_ПослеВводаДанныхАутентификации(ЛогинПарольТокен, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Процедура осуществляет аутентификацию пользователя по логину и паролю на сервере WebKassa
//
Процедура НачатьАутентификациюПользователя_ПослеВводаДанныхАутентификации(Результат, ДополнительныеПараметры) Экспорт
	
	ВыходныеПараметры = Новый Массив();
	
	Если Результат = Неопределено Тогда
		
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не удалось получить данные пользователя.
		|Для корректной работы устройства необходимо ввести логин и пароль пользователя.'"));
		
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("РезультатВыполнения, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	АдресСервиса = ДополнительныеПараметры.ОповещениеПриЗавершении.ДополнительныеПараметры.ПараметрыПодключения.АдресСервиса;
	Если АдресСервиса = Неопределено Тогда
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не настроены параметры устройства.
		|Для корректной работы устройства необходимо задать параметры его работы.
		|Сделать это можно при помощи формы ""Настройка параметров"" модели
		|подключаемого оборудования в форме ""Подключение и настройка оборудования"".'"));
		
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("РезультатВыполнения, ВыходныеПараметры", Ложь, ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Login",    Результат.Пользователь);
	ПараметрыЗапроса.Вставить("Password", Результат.ПарольПользователя);
	
	Если ТипЗнч(ДополнительныеПараметры) <> Тип("Структура") Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	ЗапомнитьПароль = Ложь;
	Результат.Свойство("ЗапомнитьПароль", ЗапомнитьПароль);
	ДополнительныеПараметры.Вставить("ЗапомнитьЛогинПароль", ЗапомнитьПароль);
	
	ДополнительныеПараметры.ОповещениеПриЗавершении.ДополнительныеПараметры.Вставить("ИДУстройства", Результат.Пользователь);
	
	ИнтеграцияWebKassaКлиент.НачатьВыполнениеМетодаВебСервиса(АдресСервиса, "Authorize", ПараметрыЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

Функция ПолучитьПарольИзГлобальнойПеременной(Ключ)
	
	СоответствиеПользователяИПароля = ИнтеграцияWebKassaКлиентПереопределяемый.ПолучитьПараметрыПриложения("1СWebKassa.СоответствиеПользователяИПароля");
	Если ТипЗнч(СоответствиеПользователяИПароля) = Тип("ФиксированноеСоответствие") Тогда
		Возврат СоответствиеПользователяИПароля.Получить(Ключ);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция получает заполненный табличный документ и выполняется печать фискального чека.
//
Процедура ПечатьФискальногоЧека(СтруктураДанных, ТипЧека, Параметры, ДополнительныеДанные = Неопределено, ДополнительныеПараметры = Неопределено)
	
	Если Параметры.ИспользоватьПринтерЧеков Тогда
		//ИнтеграцияИСМПТК
		Если ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеКонстанты("ВестиУчетМаркируемойПродукцииИСМПТК") Тогда
			НормализоватьКодыМаркировкиПередПечатью(СтруктураДанных);
		КонецЕсли;		
		//Конец ИнтеграцияИСМПТК
		ТекстЧека = СформироватьТекстФискальногоЧека(СтруктураДанных, Параметры, ДополнительныеДанные);
		ИнтеграцияWebKassaКлиентПереопределяемый.НачатьПечатьТекста(
			Новый ОписаниеОповещения("ПослеЗавершенияПечатиНаПринтереЧеков", ЭтотОбъект, ДополнительныеПараметры),
			Новый УникальныйИдентификатор(),
			ТекстЧека,
			Параметры.ПринтерЧеков);
	Иначе
		ТабличныйДокумент = Новый ТабличныйДокумент;
		НормализоватьКодыМаркировкиПередПечатью(СтруктураДанных);
		РезультатПечати = ИнтеграцияWebKassaВызовСервера.ПечатьФискальногоЧека(
			СтруктураДанных, 0, Параметры, ТабличныйДокумент, ДополнительныеДанные);
		Если ТабличныйДокумент = Неопределено Тогда
			ШаблонСообщения = НСтр("ru = 'Операция успешно проведена в системе Webkassa, но при печати произошла ошибка.
				|Дополнительное описание:
				|%1'");
			ТекстСообщения = ИнтеграцияWebKassaКлиентПереопределяемый.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатПечати);
			ИнтеграцияWebKassaКлиентПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Иначе
			ТабличныйДокумент.АвтоМасштаб = Истина;
			ТабличныйДокумент.Напечатать();
		КонецЕсли;
		
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Истина, ДополнительныеПараметры.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция получает заполненный табличный документ и выполняется печать Z или X отчета.
//
Процедура ПечатьXZОтчета(СтруктураДанных, ТипОтчета, Параметры, ДополнительныеДанные = Неопределено, ДополнительныеПараметры = Неопределено)
	
	Если Параметры.ИспользоватьПринтерЧеков Тогда
		ТекстОтчета = СформироватьТекстОтчета(СтруктураДанных, ТипОтчета, Параметры, ДополнительныеДанные);
		ИнтеграцияWebKassaКлиентПереопределяемый.НачатьПечатьТекста(
			Новый ОписаниеОповещения("ПослеЗавершенияПечатиНаПринтереЧеков", ЭтотОбъект, ДополнительныеПараметры),
			Новый УникальныйИдентификатор(),
			ТекстОтчета,
			Параметры.ПринтерЧеков);
	Иначе
		ТабличныйДокумент = Новый ТабличныйДокумент;
		РезультатПечати = ИнтеграцияWebKassaВызовСервера.ПечатьXZОтчета(
			СтруктураДанных, ТипОтчета, Параметры, ТабличныйДокумент, ДополнительныеДанные);
		Если ТабличныйДокумент = Неопределено Тогда
			ШаблонСообщения = НСтр("ru = 'Операция успешно проведена в системе Webkassa, но при печати произошла ошибка.
				|Дополнительное описание:
				|%1'");
			ТекстСообщения = ИнтеграцияWebKassaКлиентПереопределяемый.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатПечати);
			ИнтеграцияWebKassaКлиентПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Иначе
			ТабличныйДокумент.АвтоМасштаб = Истина;
			ТабличныйДокумент.Напечатать();
		КонецЕсли;
		
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Истина, ДополнительныеПараметры.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция получает заполненный табличный документ и выполняется печать чека внесения/изъятия.
//
Процедура ПечатьЧекаВнесенияИзъятия(СтруктураДанных, Сумма, ТипОтчета, Параметры, ДополнительныеДанные = Неопределено, ДополнительныеПараметры = Неопределено)
	
	Если Параметры.ИспользоватьПринтерЧеков Тогда
		ТекстЧека = СформироватьТекстВнесенияИзъятия(СтруктураДанных, Сумма, ТипОтчета, Параметры, ДополнительныеДанные);
		ИнтеграцияWebKassaКлиентПереопределяемый.НачатьПечатьТекста(
			Новый ОписаниеОповещения("ПослеЗавершенияПечатиНаПринтереЧеков", ЭтотОбъект, ДополнительныеПараметры),
			Новый УникальныйИдентификатор(),
			ТекстЧека,
			Параметры.ПринтерЧеков);
	Иначе
		ТабличныйДокумент = Новый ТабличныйДокумент;
		РезультатПечати = ИнтеграцияWebKassaВызовСервера.ПечатьЧекаВнесенияИзъятия(
			СтруктураДанных, Сумма, ТипОтчета, Параметры, ТабличныйДокумент, ДополнительныеДанные);
		Если ТабличныйДокумент = Неопределено Тогда
			ШаблонСообщения = НСтр("ru = 'Операция успешно проведена в системе Webkassa, но при печати произошла ошибка.
				|Дополнительное описание:
				|%1'");
			ТекстСообщения = ИнтеграцияWebKassaКлиентПереопределяемый.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатПечати);
			ИнтеграцияWebKassaКлиентПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Иначе
			ТабличныйДокумент.АвтоМасштаб = Истина;
			ТабличныйДокумент.Напечатать();
		КонецЕсли;
		
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			Результат = Новый Структура("Результат, ВыходныеПараметры", Истина, ДополнительныеПараметры.ВыходныеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗавершенияПечатиНаПринтереЧеков(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		Если Не РезультатВыполнения.Результат Тогда
			//сообщить о проблемах с печатью
			ТекстСообщения = НСтр("ru = 'Операция успешно проведена в системе Webkassa, но при печати произошла ошибка.
				|Дополнительное описание:
				|%ДополнительноеОписание%'");
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
			ИнтеграцияWebKassaКлиентПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		//даже при ошибке печати выполняем оповещение с результатом Истина, чтобы сообщить документу, что чек в систему ушел
		Результат = Новый Структура("Результат, ВыходныеПараметры", Истина, ДополнительныеПараметры.ВыходныеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

#Область ВспомогательныеПроцедурыПечати

// Выстраивает строку по длине поля, если поле длинное - переносит на следующую строку.
//
Функция ПостроитьПолеПереносом(Знач Текст, Знач ДлинаПоля, ДобСимвол = "", ПоЦентру = Ложь) Экспорт
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	
	Если СтрДлина(Текст) > ДлинаПоля Тогда 
		ТекстПолный = "";
		Пока СтрДлина(Текст) > ДлинаПоля Цикл
			ТекстПолный = ТекстПолный + ?(ПустаяСтрока(ТекстПолный), "", Символы.ПС) +  Лев(Текст, ДлинаПоля);
			Текст = Сред(Текст, ДлинаПоля + 1);
		КонецЦикла;
		ТекстПолный = ТекстПолный + ?(ПустаяСтрока(Текст), "", Символы.ПС + Текст);
	Иначе
		Если ПоЦентру Тогда
			ТекстПолный = Текст;
			ДобавлятьСправа = Истина; 
			Пока СтрДлина(ТекстПолный) < ДлинаПоля Цикл
				Если ДобавлятьСправа Тогда
					ТекстПолный = ТекстПолный + ДобСимвол;
				Иначе
					ТекстПолный = ДобСимвол + ТекстПолный;
				КонецЕсли;
				ДобавлятьСправа = Не ДобавлятьСправа;
			КонецЦикла;
		Иначе
			ТекстПолный = Текст;
		КонецЕсли;
	КонецЕсли;
		
	Возврат ТекстПолный;
	
КонецФункции

// Обрезает передаваемую строку по длине поля, если поле слишком короткое - дополняет символами.
//
Функция ПостроитьПоле(Знач Текст, Знач ДлинаПоля, ДобСимвол = "", ДобавлятьСправа = Истина) Экспорт
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	
	ТекстПолный = Лев(Текст, ДлинаПоля);
	Пока СтрДлина(ТекстПолный) < ДлинаПоля Цикл
		Если ДобавлятьСправа Тогда
			ТекстПолный = ТекстПолный + ДобСимвол;
		Иначе
			ТекстПолный = ДобСимвол + ТекстПолный;
		КонецЕсли;
	КонецЦикла;
	          
	Возврат ТекстПолный;
	
КонецФункции

// Формирует строку из двух полей, если передается одно поле дополняет символами до нужного размера.
//
Функция ВыстроитьПоля(Знач Текст1, Знач Текст2 = "", Знач ДлинаПоля) Экспорт
	
	Если ПустаяСтрока(Текст2) Тогда
		ТекстПолный = ПостроитьПоле(Текст1, СтрДлина(Текст1) + Цел((ДлинаПоля - СтрДлина(Текст1))/2), , Ложь);
		ТекстПолный = ПостроитьПоле(ТекстПолный, ДлинаПоля);
	ИначеЕсли СтрДлина(Текст1) + СтрДлина(Текст2) < ДлинаПоля Тогда
		ТекстПолный = ПостроитьПоле(Текст1, ДлинаПоля - СтрДлина(Текст2)) + Текст2;
	Иначе
		ТекстПолный = ПостроитьПоле(Текст1, ДлинаПоля) + Символы.ПС + ПостроитьПоле(Текст2, ДлинаПоля, ,Ложь)
	КонецЕсли;
	
	Возврат ТекстПолный;
	
КонецФункции

//  Выравнить передаваемую строку по длине поля, если поле слишком короткое - дополняет символами.
//
Функция ВыравнитьПоле(Знач Текст, Знач ДлинаПоля = 32, Знач Выравнивание = "Лево", ДобСимвол = "") Экспорт
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	НачПозиция = Истина;
	ТекстПолный = Лев(Текст, ДлинаПоля);
	Пока СтрДлина(ТекстПолный) < ДлинаПоля Цикл
		Если Выравнивание = "Лево" Тогда
			ТекстПолный = ТекстПолный + ДобСимвол;
		ИначеЕсли Выравнивание = "Право" Тогда
			ТекстПолный = ДобСимвол + ТекстПолный;
		Иначе
			Если НачПозиция Тогда
				ТекстПолный = ТекстПолный + ДобСимвол;
				НачПозиция = Ложь;
			Иначе
				ТекстПолный = ДобСимвол + ТекстПолный;
				НачПозиция = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	          
	Возврат ТекстПолный;
	
КонецФункции

// Функция формирует текст фискольного чека.
//
Функция СформироватьТекстФискальногоЧека(СтруктураДанных, Параметры, ДополнительныеДанные = Неопределено) Экспорт
	
	Попытка
		Текст = "";
		
		ФорматДенежный = "ЧЦ=15; ЧДЦ=2; ЧГ=0; ЧН=";
		ФорматКоличество = "ЧЦ=15; ЧДЦ=3; ЧН=; ЧГ=0";
		ФорматЦелых = "ЧГ=0; ЧН=";
		ФорматДаты = "ДФ=""дд.ММ.гг ЧЧ:мм""";
		ФорматБезПробела = "ЧГ=0";
		Если Параметры.Свойство("ШиринаЛенты") Тогда
			ШиринаСтроки = ?(Параметры.ШиринаЛенты = Неопределено, 24, Число(Параметры.ШиринаЛенты));
		Иначе
			ШиринаСтроки = 24;
		КонецЕсли;
		Если Параметры.Свойство("ЯзыкПоУмолчанию") И ЗначениеЗаполнено(Параметры.ЯзыкПоУмолчанию) Тогда
			СтруктураНаименованияПолей = ИнтеграцияWebKassaКлиентСервер.ПолучитьСоответствиеНаименованийПолей(Параметры.ЯзыкПоУмолчанию);
		Иначе
			СтруктураНаименованияПолей = ИнтеграцияWebKassaКлиентСервер.ПолучитьСоответствиеНаименованийПолей(ПредопределенноеЗначение("Перечисление.ЯзыкWebKassaФискальныеРегистраторы.Русский"));
		КонецЕсли;
		
		РазделительВнут = ПостроитьПоле("", ШиринаСтроки, "-") + Символы.ПС;
		
		// Сформировать шапку чека.
		Если ДополнительныеДанные.Свойство("ЭтоДубликат") Тогда
			Текст = Текст + ПостроитьПолеПереносом(СтруктураНаименованияПолей.НадписьДубликат , ШиринаСтроки, , Истина) + Символы.ПС;
		КонецЕсли;
		Текст = Текст + ПостроитьПолеПереносом(ДополнительныеДанные.Организация, ШиринаСтроки, , Истина) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля(СтруктураНаименованияПолей.БИН + " " + ДополнительныеДанные.ИИН, , ШиринаСтроки) + Символы.ПС;
		СведенияНДС = СтруктураНаименованияПолей.НДССерия + " " + ДополнительныеДанные.СерияСвидетельстваПоНДС
			+ " № " + ДополнительныеДанные.НомерСвидетельстваПоНДС;
		Текст = Текст + ПостроитьПолеПереносом(СведенияНДС, ШиринаСтроки, , Истина) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля(СтруктураНаименованияПолей.ИНК + ": " + Формат(СтруктураДанных.ИНК, ФорматБезПробела), , ШиринаСтроки) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля(СтруктураНаименованияПолей.РНК + ": " + СтруктураДанных.РегистрационныйНомерККМ, , ШиринаСтроки) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля(СтруктураНаименованияПолей.ЗНК + ": " + СтруктураДанных.СерийныйНомерККМ, , ШиринаСтроки) + Символы.ПС;
		Текст = Текст + РазделительВнут;
		Текст = Текст + ПостроитьПолеПереносом(СтруктураНаименованияПолей.Кассир + ": " + ДополнительныеДанные.Кассир, ШиринаСтроки, , Истина) + Символы.ПС;
		Текст = Текст + ПостроитьПоле(СтруктураНаименованияПолей.Смена + " №" + Формат(СтруктураДанных.НомерСмены, ФорматБезПробела),ШиринаСтроки) + Символы.ПС;
		Текст = Текст + ПостроитьПоле(СтруктураНаименованияПолей.Чек + " №" + Формат(СтруктураДанных.НомерВРамкахСмены, ФорматБезПробела),ШиринаСтроки) + Символы.ПС;
		ТипЧека = "";
		Если СтруктураДанных.OperationType = 0 Тогда
			ТипЧека = СтруктураНаименованияПолей.Покупка;
		ИначеЕсли СтруктураДанных.OperationType = 1 Тогда
			ТипЧека = СтруктураНаименованияПолей.ВозвратПокупки;
		ИначеЕсли СтруктураДанных.OperationType = 2 Тогда
			ТипЧека = СтруктураНаименованияПолей.Продажа;
		ИначеЕсли СтруктураДанных.OperationType = 3 Тогда
			ТипЧека = СтруктураНаименованияПолей.ВозвратПродажи;
		КонецЕсли;
		Текст = Текст + ПостроитьПоле(ТипЧека,ШиринаСтроки) + Символы.ПС;
		Текст = Текст + РазделительВнут;
		
		//вывод ИИН/БИН покупателя
		Если СтруктураДанных.Свойство("CustomerXin") И ЗначениеЗаполнено(СтруктураДанных.CustomerXin) Тогда
			ИнформацияИИН = СтруктураНаименованияПолей.ИИНБИНПокупателя + СтруктураДанных.CustomerXin;
			Текст = Текст + ПостроитьПолеПереносом(ИнформацияИИН, ШиринаСтроки, , Истина) + Символы.ПС;
			Текст = Текст + РазделительВнут;
		КонецЕсли;
		
		СуммаПоЧеку = 0;
		СуммаНДС = 0;
		СуммаСкидки = 0;
		СуммаНаценки = 0;
		
		ПорядковыйНомер = 0;
		Для Каждого Позиция Из СтруктураДанных.Positions Цикл
			ПорядковыйНомер = ПорядковыйНомер + 1;
			
			НаименованиеЕдиницыИзмерения = ИнтеграцияWebKassaВызовСервераПереопределяемый.ПолучитьНаименованиеЕдиницыИзмерения(Позиция.UnitCode);
			
			НаименованиеТовара = Формат(ПорядковыйНомер, ФорматБезПробела) + ". " + Позиция.PositionName;
			КоличествоЦена = Формат(Позиция.Count, ФорматКоличество) + " " + НаименованиеЕдиницыИзмерения + " x " + Формат(Позиция.Price, ФорматДенежный);
			
			Текст = Текст + ПостроитьПолеПереносом(НаименованиеТовара, ШиринаСтроки) + Символы.ПС;
			
			Если Позиция.Свойство("Mark") Тогда 
				КодМаркировки = Позиция.Mark;
				Текст = Текст + ПостроитьПолеПереносом(КодМаркировки, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			
			Текст = Текст + ВыравнитьПоле(КоличествоЦена,ШиринаСтроки,"Право") + Символы.ПС;
			
			СуммаСтроки = Окр(Позиция.Price * Позиция.Count, 2);
			Если Позиция.Discount <> 0 Тогда
				Скидка = Формат(Позиция.Discount, ФорматДенежный);
				Текст = Текст + ВыстроитьПоля(СтруктураНаименованияПолей.НадписьСкидка, Скидка, ШиринаСтроки) + Символы.ПС;
				
				СуммаСтроки = СуммаСтроки - Позиция.Discount;
				СуммаСкидки = СуммаСкидки + Позиция.Discount;
			КонецЕсли;
			
			Если Позиция.Markup <> 0 Тогда
				Наценка = Формат(Позиция.Markup, ФорматДенежный);
				Текст = Текст + ВыстроитьПоля(СтруктураНаименованияПолей.НадписьНаценка, Наценка, ШиринаСтроки) + Символы.ПС;
				
				СуммаСтроки  = СуммаСтроки  + Позиция.Markup;
				СуммаНаценки = СуммаНаценки + Позиция.Markup;
			КонецЕсли;
			
			Если Позиция.TaxType <> 0 И Позиция.Tax <> 0 Тогда
				НДС = Формат(Позиция.Tax, ФорматДенежный);
				СтавкаНДС = ИнтеграцияWebKassaКлиентСервер.ВычислитьСтавкуНДС(Позиция);
				Текст = Текст + ВыстроитьПоля(СтрШаблон(СтруктураНаименованияПолей.НДС + " %1%%", СтавкаНДС), НДС, ШиринаСтроки) + Символы.ПС;
			Иначе
				НДС = Формат(Позиция.Tax, ФорматДенежный);
				Текст = Текст + ВыстроитьПоля(СтруктураНаименованияПолей.НДС + " 0", НДС, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			
			ИтогоСумма = Формат(СуммаСтроки, ФорматДенежный);
			Текст = Текст + ВыстроитьПоля(СтруктураНаименованияПолей.НадписьСтоимость, ИтогоСумма, ШиринаСтроки) + Символы.ПС;
			
			СуммаПоЧеку = СуммаПоЧеку + СуммаСтроки;
			СуммаНДС = СуммаНДС + Позиция.Tax;
		КонецЦикла;
		
		Текст = Текст + РазделительВнут;
		
		СуммаПлатежей = 0;
		ТипыОплаты = Новый Массив;
		ТипыОплаты.Добавить(СтруктураНаименованияПолей.Наличные + ":");
		ТипыОплаты.Добавить(СтруктураНаименованияПолей.БанковскаяКарта + ":");
		ТипыОплаты.Добавить(СтруктураНаименованияПолей.ОплатаВКредит + ":");
		ТипыОплаты.Добавить(СтруктураНаименованияПолей.ОплатаТарой + ":");
		ТипыОплаты.Добавить(СтруктураНаименованияПолей.Мобильные + ":");
		ТипОплатыССервера = СтруктураНаименованияПолей.ТипОплаты;
		Для Каждого Платеж Из СтруктураДанных.Payments Цикл
			ТипОплаты = "";
			Если Платеж.Свойство("PaymentType") Тогда
				ТипОплаты = ТипыОплаты[Платеж.PaymentType];
			ИначеЕсли Платеж.Свойство("PaymentTypeName") Тогда
				ТипОплаты = ТипОплатыССервера.Получить(Платеж.PaymentTypeName) + ":";
			КонецЕсли;
			Оплата = Формат(Платеж.Sum, ФорматДенежный);
			ТекстВрем = ПостроитьПоле(ТипОплаты,Цел(ШиринаСтроки/2), , Ложь);
			Текст = Текст + ВыстроитьПоля(ТекстВрем, Оплата, ШиринаСтроки) + Символы.ПС;
			СуммаПлатежей = СуммаПлатежей + Платеж.Sum;
		КонецЦикла;
		
		СуммаСдачи = СуммаПлатежей - СуммаПоЧеку;
		Если СуммаСдачи <> 0 Тогда
			ТипОплаты = СтруктураНаименованияПолей.НадписьСдача + ":";
			Сдача = Формат(СуммаСдачи, ФорматДенежный);
			ТекстВрем = ПостроитьПоле(ТипОплаты,Цел(ШиринаСтроки/2), , Ложь);
			Текст = Текст + ВыстроитьПоля(ТекстВрем, Сдача, ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		
		Если СуммаСкидки <> 0 Тогда
			ТипОплаты = СтруктураНаименованияПолей.НадписьСкидка + ":";
			Скидка = Формат(СуммаСкидки, ФорматДенежный);
			ТекстВрем = ПостроитьПоле(ТипОплаты,Цел(ШиринаСтроки/2), , Ложь);
			Текст = Текст + ВыстроитьПоля(ТекстВрем, Скидка, ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		
		Если СуммаНаценки <> 0 Тогда
			ТипОплаты = СтруктураНаименованияПолей.НадписьНаценка + ":";
			Наценка = Формат(СуммаНаценки, ФорматДенежный);
			ТекстВрем = ПостроитьПоле(ТипОплаты,Цел(ШиринаСтроки/2), , Ложь);
			Текст = Текст + ВыстроитьПоля(ТекстВрем, Наценка, ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		
		ТипОплаты = СтруктураНаименованияПолей.НадписьИтого + ":";
		ИтогоСумма = Формат(СуммаПоЧеку, ФорматДенежный);
		ТекстВрем = ПостроитьПоле(ТипОплаты,Цел(ШиринаСтроки/2), , Ложь);
		Текст = Текст + ВыстроитьПоля(ТекстВрем, ИтогоСумма, ШиринаСтроки) + Символы.ПС;
		
		ТипОплаты = СтруктураНаименованияПолей.НадписьНДС + ":";
		НДС = Формат(СуммаНДС, ФорматДенежный);
		ТекстВрем = ПостроитьПоле(ТипОплаты,Цел(ШиринаСтроки/2), , Ложь);
		Текст = Текст + ВыстроитьПоля(ТекстВрем, НДС, ШиринаСтроки) + Символы.ПС;
		
		ФискальныйЧек = СтруктураНаименованияПолей.ФискальныйЧекНомер + Формат(СтруктураДанных.ФискальныйНомер, ФорматБезПробела);
		ВремяЧека = СтруктураНаименованияПолей.Время + ": " + Формат(СтруктураДанных.ДатаЧека, ФорматДаты);
		АдресККМ = СтруктураНаименованияПолей.Адрес + ": " + Формат(СтруктураДанных.АдресККМ, ФорматДаты);
		КодККМ = СтруктураНаименованияПолей.КодККМ + ": " + СтруктураДанных.РегистрационныйНомерККМ;
		Текст = Текст + ПостроитьПолеПереносом(ФискальныйЧек,ШиринаСтроки) + Символы.ПС;
		Текст = Текст + ПостроитьПолеПереносом(КодККМ,ШиринаСтроки) + Символы.ПС;
		Текст = Текст + ПостроитьПолеПереносом(ВремяЧека,ШиринаСтроки) + Символы.ПС;
		Текст = Текст + ПостроитьПолеПереносом(АдресККМ,ШиринаСтроки) + Символы.ПС;
		//заполнение данных ОФД
		ОписаниеОФД = Неопределено;
		Если СтруктураДанных.Свойство("Cashbox") Тогда
			Если ЗначениеЗаполнено(СтруктураДанных.Cashbox.Ofd) Тогда
				ОписаниеОФД = СтруктураДанных.Cashbox.Ofd;
			КонецЕсли;
		ИначеЕсли СтруктураДанных.Свойство("Ofd") Тогда
			Если ЗначениеЗаполнено(СтруктураДанных.Ofd) Тогда
				ОписаниеОФД = СтруктураДанных.Ofd;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОписаниеОФД) Тогда
			Текст = Текст + ПостроитьПолеПереносом(СтрШаблон(СтруктураНаименованияПолей.ОператорФискальныхДанных+": %1", ОписаниеОФД.Name), ШиринаСтроки) + Символы.ПС;
			Текст = Текст + ПостроитьПолеПереносом(СтруктураНаименованияПолей.НадписьДляПроверкиЧекаЗайдитеНаСайт + ":", ШиринаСтроки) + Символы.ПС;
			Текст = Текст + ПостроитьПолеПереносом(ОписаниеОФД.Host, ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		
		Если СтруктураДанных.АвтономныйРежимРаботы Тогда
			Текст = Текст + ПостроитьПолеПереносом(СтруктураНаименованияПолей.ЧекСформированВАвтономномРежиме, ШиринаСтроки) + Символы.ПС;
		КонецЕсли;
		Текст = Текст + РазделительВнут;
		Текст = Текст + ПостроитьПолеПереносом(СтруктураНаименованияПолей.НадписьФискальныйЧекФП, ШиринаСтроки,,Истина) + Символы.ПС;
		Текст = Текст + ПостроитьПолеПереносом(НСтр("ru='WEBKASSA.KZ'"), ШиринаСтроки,,Истина) + Символы.ПС;
		
		//QR код
		Текст = Текст + "|ШтрихКод|QR|" +СтруктураДанных.СсылкаНаЧек + Символы.ПС;
	Исключение
		Текст = "";
	КонецПопытки;
	
	Возврат Текст;
	
КонецФункции

// Функция формирует текст X и Z отчета.
//
Функция СформироватьТекстОтчета(СтруктураДанных, ТипОтчета, Параметры, ДополнительныеДанные = Неопределено) Экспорт
	
	Попытка
		Текст = "";
		
		ФорматДенежный = "ЧЦ=15; ЧДЦ=2; ЧГ=0; ЧН=";
		ФорматЦелых = "ЧГ=0; ЧН=";
		ФорматДаты = "ДФ=""дд.ММ.гг ЧЧ:мм""";
		ФорматБезПробела = "ЧГ=0";
		Если Параметры.Свойство("ШиринаЛенты") Тогда
			ШиринаСтроки = ?(Параметры.ШиринаЛенты = Неопределено, 24, Число(Параметры.ШиринаЛенты));
		Иначе
			ШиринаСтроки = 24;
		КонецЕсли;
		
		РазделительВнут = ПостроитьПоле("", ШиринаСтроки, "-") + Символы.ПС;
		
		// Сформировать шапку чека.
		Текст = Текст + ПостроитьПолеПереносом(СтруктураДанных.Data.TaxPayerName, ШиринаСтроки, , Истина) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля("БИН " + СтруктураДанных.Data.TaxPayerIN, , ШиринаСтроки) + Символы.ПС;
		СведенияНДС = "НДС Серия " + СтруктураДанных.Data.TaxPayerVATSeria
			+ " № " + СтруктураДанных.Data.TaxPayerVATNumber;
		Текст = Текст + ПостроитьПолеПереносом(СведенияНДС, ШиринаСтроки, , Истина) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля("ИНК: " + Формат(СтруктураДанных.Data.CashboxIN, ФорматБезПробела), , ШиринаСтроки) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля("РНК: " + Формат(СтруктураДанных.Data.CashboxRN, ФорматБезПробела), , ШиринаСтроки) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля("ЗНК: " + СтруктураДанных.Data.CashboxSN, , ШиринаСтроки) + Символы.ПС;
		Текст = Текст + РазделительВнут;
		НаименованиеОтчета = "";
		Если ТипОтчета = 1 Тогда
			НаименованиеОтчета = "СМЕННЫЙ X-ОТЧЕТ"
		ИначеЕсли ТипОтчета = 2 Тогда
			НаименованиеОтчета = "СМЕННЫЙ Z-ОТЧЕТ"
		КонецЕсли;
		Текст = Текст + ВыстроитьПоля(НаименованиеОтчета, , ШиринаСтроки) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля(Формат(СтруктураДанных.Data.ReportOn, ФорматДаты), ,ШиринаСтроки) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля("Документ №" + Формат(СтруктураДанных.Data.ReportNumber, ФорматБезПробела),,ШиринаСтроки) + Символы.ПС;
		Текст = Текст + ПостроитьПолеПереносом("Кассир: " + СтруктураДанных.Data.CashierCode, ШиринаСтроки, , Истина) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля("Смена №" + Формат(СтруктураДанных.Data.ShiftNumber, ФорматБезПробела),,ШиринаСтроки) + Символы.ПС;
		
		Если СтруктураДанных.Data.Свойство("CloseOn") И СтруктураДанных.Data.CloseOn <> Неопределено Тогда
			ПериодСмены = СтруктураДанных.Data.StartOn + " - " + СтруктураДанных.Data.CloseOn;
		Иначе
			ПериодСмены = СтруктураДанных.Data.StartOn;
		КонецЕсли;
		Текст = Текст + ПостроитьПолеПереносом(ПериодСмены, ШиринаСтроки, , Истина) + Символы.ПС;
		
		//Сформировать суммы на начало
		Текст = Текст + ВыстроитьПоля(НСтр("ru='Количество'"), НСтр("ru='Сумма'"), ШиринаСтроки) + Символы.ПС;
		Текст = Текст + ПостроитьПолеПереносом(НСтр("ru='Необнул. сумма на начало'"), ШиринаСтроки) + Символы.ПС;
		СуммаНачалоПродаж   = Формат(СтруктураДанных.Data.StartNonNullable.Sell,       ФорматДенежный);
		СуммаНачалоПокупок  = Формат(СтруктураДанных.Data.StartNonNullable.Buy,        ФорматДенежный);
		СуммаНачалоВПродаж  = Формат(СтруктураДанных.Data.StartNonNullable.ReturnSell, ФорматДенежный);
		СуммаНачалоВПокупок = Формат(СтруктураДанных.Data.StartNonNullable.ReturnBuy,  ФорматДенежный);
		Текст = Текст + ВыстроитьПоля(НСтр("ru='Продаж'"), СуммаНачалоПродаж, ШиринаСтроки) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля(НСтр("ru='Покупок'"), СуммаНачалоПокупок, ШиринаСтроки) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля(НСтр("ru='Возвратов продаж'"), СуммаНачалоВПродаж, ШиринаСтроки) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля(НСтр("ru='Возвратов покупок'"), СуммаНачалоВПокупок, ШиринаСтроки) + Символы.ПС;
		
		//Сформировать операции за смену
		ТипыОпераций = Новый Соответствие;
		ТипыОпераций.Вставить("Sell",       "ПРОДАЖА");
		ТипыОпераций.Вставить("Buy",        "ПОКУПКА");
		ТипыОпераций.Вставить("ReturnSell", "ВОЗВРАТ ПРОДАЖИ");
		ТипыОпераций.Вставить("ReturnBuy",  "ВОЗВРАТ ПОКУПКИ");
		
		ТипыОплаты = Новый Массив;
		ТипыОплаты.Добавить("Наличные");
		ТипыОплаты.Добавить("Банковская карта");
		ТипыОплаты.Добавить("Оплата в кредит");
		ТипыОплаты.Добавить("Оплата тарой");
		ТипыОплаты.Добавить("Мобильные");
		
		Для Каждого ТипОперации Из ТипыОпераций Цикл
			ЭлементыОпераций = Неопределено;
			ОплатаНаличными = 0;
			ОбщаяСуммаОпераций = 0;
			
			Если СтруктураДанных.Data.Свойство(ТипОперации.Ключ, ЭлементыОпераций) И ЭлементыОпераций<>Неопределено Тогда
				
				Текст = Текст + ПостроитьПоле(ТипОперации.Значение,ШиринаСтроки) + Символы.ПС;
				КоличествоОпераций = Формат(ЭлементыОпераций.Count, ФорматЦелых);
				
				Для Каждого ВидПлатежа Из ЭлементыОпераций.PaymentsByTypesApiModel Цикл
					ОбщаяСуммаОпераций = ОбщаяСуммаОпераций + ВидПлатежа.Sum;
				КонецЦикла;
				
				СуммаОперации = Формат(ОбщаяСуммаОпераций, ФорматДенежный);
				Текст = Текст + ВыстроитьПоля(КоличествоОпераций, СуммаОперации, ШиринаСтроки) + Символы.ПС;
				
				Для Каждого ВидПлатежа Из ЭлементыОпераций.PaymentsByTypesApiModel Цикл
					ТипОплаты = " " + ТипыОплаты[ВидПлатежа.Type];
					Оплата = Формат(ВидПлатежа.Sum, ФорматДенежный);
					Текст = Текст + ВыстроитьПоля(ТипОплаты, Оплата, ШиринаСтроки) + Символы.ПС;
				КонецЦикла;
				
				
				Текст = Текст + ВыстроитьПоля(НСтр("ru=' Скидки'"), Формат(ЭлементыОпераций.Discount, ФорматДенежный), ШиринаСтроки) + Символы.ПС;
				Текст = Текст + ВыстроитьПоля(НСтр("ru=' Наценки'"), Формат(ЭлементыОпераций.Markup, ФорматДенежный), ШиринаСтроки) + Символы.ПС;
				Текст = Текст + ВыстроитьПоля(НСтр("ru=' Получено'"), Формат(ЭлементыОпераций.Taken, ФорматДенежный), ШиринаСтроки) + Символы.ПС;
				Текст = Текст + ВыстроитьПоля(НСтр("ru=' НДС'"), Формат(ЭлементыОпераций.VAT, ФорматДенежный), ШиринаСтроки) + Символы.ПС;
			Иначе
				Текст = Текст + ПостроитьПоле(ТипОперации.Значение,ШиринаСтроки) + Символы.ПС;
				Текст = Текст + ВыстроитьПоля(0, 0, ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
		
		//Сформировать суммы на конец
		Текст = Текст + ВыстроитьПоля(НСтр("ru='Внесения'"), Формат(СтруктураДанных.Data.PutMoneySum, ФорматДенежный), ШиринаСтроки) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля(НСтр("ru='Выплаты'"), Формат(СтруктураДанных.Data.TakeMoneySum, ФорматДенежный), ШиринаСтроки) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля(НСтр("ru='Нал. в кассе'"), Формат(СтруктураДанных.Data.SumInCashbox, ФорматДенежный), ШиринаСтроки) + Символы.ПС;
		
		//Сформировать суммы на конец
		Текст = Текст + ПостроитьПолеПереносом(НСтр("ru='Необнул. сумма за смену'"), ШиринаСтроки) + Символы.ПС;
		СуммаКонецПродаж = Формат(СтруктураДанных.Data.EndNonNullable.Sell, ФорматДенежный);
		СуммаКонецПокупок = Формат(СтруктураДанных.Data.EndNonNullable.Buy, ФорматДенежный);
		СуммаКонецВПродаж = Формат(СтруктураДанных.Data.EndNonNullable.ReturnSell, ФорматДенежный);
		СуммаКонецВПокупок = Формат(СтруктураДанных.Data.EndNonNullable.ReturnBuy, ФорматДенежный);
		Текст = Текст + ВыстроитьПоля(НСтр("ru='Продаж'"), СуммаКонецПродаж, ШиринаСтроки) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля(НСтр("ru='Покупок'"), СуммаКонецПокупок, ШиринаСтроки) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля(НСтр("ru='Возвратов продаж'"), СуммаКонецВПродаж, ШиринаСтроки) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля(НСтр("ru='Возвратов покупок'"), СуммаКонецВПокупок, ШиринаСтроки) + Символы.ПС;
		ДокументовВсего =
			"Количество документов сформированных за смену: " + Формат(СтруктураДанных.Data.DocumentCount, ФорматЦелых);
		Текст = Текст + ПостроитьПолеПереносом(ДокументовВсего, ШиринаСтроки) + Символы.ПС;
		
		Если ТипОтчета = 1 Тогда
			КонецОтчета = НСтр("ru='*** Конец отчета ***'");
		ИначеЕсли ТипОтчета = 2 Тогда
			КонецОтчета = НСтр("ru='*** Смена закрыта ***'");
		КонецЕсли;
		Текст = Текст + ПостроитьПолеПереносом(КонецОтчета, ШиринаСтроки, , Истина) + Символы.ПС;
		
	Исключение
		Текст = "";
	КонецПопытки;
	
	Возврат Текст;
	
КонецФункции

// Функция формирует текст чека внесения/изъятия.
//
Функция СформироватьТекстВнесенияИзъятия(СтруктураДанных, Сумма, ТипЧека, Параметры, ДополнительныеДанные = Неопределено) Экспорт
	
	Попытка
		Текст = "";
		
		ФорматДенежный = "ЧЦ=15; ЧДЦ=2; ЧГ=0; ЧН=";
		ФорматЦелых = "ЧГ=0; ЧН=";
		ФорматДаты = "ДФ=""дд.ММ.гг ЧЧ:мм""";
		ФорматБезПробела = "ЧГ=0";
		Если Параметры.Свойство("ШиринаЛенты") Тогда
			ШиринаСтроки = ?(Параметры.ШиринаЛенты = Неопределено, 24, Число(Параметры.ШиринаЛенты));
		Иначе
			ШиринаСтроки = 24;
		КонецЕсли;
		Если Параметры.Свойство("ЯзыкПоУмолчанию") И ЗначениеЗаполнено(Параметры.ЯзыкПоУмолчанию) Тогда
			СтруктураНаименованияПолей = ИнтеграцияWebKassaКлиентСервер.ПолучитьСоответствиеНаименованийПолей(Параметры.ЯзыкПоУмолчанию);
		Иначе
			СтруктураНаименованияПолей = ИнтеграцияWebKassaКлиентСервер.ПолучитьСоответствиеНаименованийПолей(ПредопределенноеЗначение("Перечисление.ЯзыкWebKassaФискальныеРегистраторы.Русский"));
		КонецЕсли;
		
		РазделительВнут = ПостроитьПоле("", ШиринаСтроки, "-") + Символы.ПС;
		
		// Сформировать шапку чека.
		Текст = Текст + ПостроитьПолеПереносом(ДополнительныеДанные.ПолноеНаименование, ШиринаСтроки, , Истина) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля(СтруктураНаименованияПолей.БИН + " " + ДополнительныеДанные.ИНН, , ШиринаСтроки) + Символы.ПС;
		СведенияНДС = СтруктураНаименованияПолей.НДССерия + " " + ДополнительныеДанные.СерияСвидетельстваПоНДС
			+ " № " + ДополнительныеДанные.НомерСвидетельстваПоНДС;
		Текст = Текст + ПостроитьПолеПереносом(СведенияНДС, ШиринаСтроки, , Истина) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля(СтруктураНаименованияПолей.ИНК + ": " + Формат(СтруктураДанных.Data.Cashbox.IdentityNumber, ФорматБезПробела), , ШиринаСтроки) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля(СтруктураНаименованияПолей.РНК + ": " + Формат(СтруктураДанных.Data.Cashbox.RegistrationNumber, ФорматБезПробела), , ШиринаСтроки) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля(СтруктураНаименованияПолей.ЗНК + ": " + СтруктураДанных.Data.Cashbox.UniqueNumber, , ШиринаСтроки) + Символы.ПС;
		Текст = Текст + РазделительВнут;
		
		ТипИнкассации = "";
		Если ТипЧека = 0 Тогда
			ТипИнкассации = СтруктураНаименованияПолей.Внесение;
		ИначеЕсли ТипЧека = 1 Тогда
			ТипИнкассации = СтруктураНаименованияПолей.Выплата;
		КонецЕсли;
		
		Текст = Текст + ВыстроитьПоля(ТипИнкассации, , ШиринаСтроки) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля(Формат(ТекущаяДата(), ФорматДаты), , ШиринаСтроки) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля(СтруктураНаименованияПолей.Кассир + ": " + ДополнительныеДанные.Кассир, , ШиринаСтроки) + Символы.ПС;
		Текст = Текст + ВыравнитьПоле(СтруктураНаименованияПолей.НадписьСумма, ШиринаСтроки, "Право") + Символы.ПС;
		Текст = Текст + ВыравнитьПоле(Формат(Сумма, ФорматДенежный), ШиринаСтроки, "Право") + Символы.ПС;
		
	Исключение
		Текст = "";
	КонецПопытки;
	
	Возврат Текст;
	
КонецФункции

// Функция формирует текст контрольной ленты.
//
Функция СформироватьТекстКонтрольнойЛенты(СтруктураДанных, Параметры) Экспорт
	
	Попытка
		Текст = "";
		
		ФорматДенежный = "ЧЦ=15; ЧДЦ=2; ЧГ=0; ЧН=";
		ФорматЦелых = "ЧГ=0; ЧН=";
		ФорматДаты = "ДФ=""дд.ММ.гг ЧЧ:мм""";
		ФорматБезПробела = "ЧГ=0";
		Если Параметры.Свойство("ШиринаЛенты") Тогда
			ШиринаСтроки = ?(Параметры.ШиринаЛенты = Неопределено, 24, Число(Параметры.ШиринаЛенты));
		Иначе
			ШиринаСтроки = 24;
		КонецЕсли;
		Если Параметры.Свойство("ЯзыкПоУмолчанию") И ЗначениеЗаполнено(Параметры.ЯзыкПоУмолчанию) Тогда
			СтруктураНаименованияПолей = ИнтеграцияWebKassaКлиентСервер.ПолучитьСоответствиеНаименованийПолей(Параметры.ЯзыкПоУмолчанию);
		Иначе
			СтруктураНаименованияПолей = ИнтеграцияWebKassaКлиентСервер.ПолучитьСоответствиеНаименованийПолей(ПредопределенноеЗначение("Перечисление.ЯзыкWebKassaФискальныеРегистраторы.Русский"));
		КонецЕсли;
		
		РазделительВнут = ПостроитьПоле("", ШиринаСтроки, "-") + Символы.ПС;
		
		// Сформировать шапку ленты.
		Текст = Текст + ПостроитьПолеПереносом(Параметры.НаименованиеОрганизации, ШиринаСтроки, , Истина) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля(СтруктураНаименованияПолей.БИН + " " + Параметры.ИИН, , ШиринаСтроки) + Символы.ПС;
		СведенияНДС = СтруктураНаименованияПолей.НДССерия + " " + Параметры.СерияНДС
			+ " № " + Параметры.НомерНДС;
		Текст = Текст + ПостроитьПолеПереносом(СведенияНДС, ШиринаСтроки, , Истина) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля(СтруктураНаименованияПолей.ЗНК + ": " + Параметры.ЗНК, , ШиринаСтроки) + Символы.ПС;
		Текст = Текст + РазделительВнут;
		Текст = Текст + ВыстроитьПоля(СтруктураНаименованияПолей.КонтрольнаяЛента, , ШиринаСтроки) + Символы.ПС;
		Текст = Текст + ВыстроитьПоля(СтруктураНаименованияПолей.Смена + " №" + Формат(Параметры.НомерСмены, ФорматБезПробела),,ШиринаСтроки) + Символы.ПС;
		
		ПерваяПозиция = Истина;
		ТипОперацииССервера = СтруктураНаименованияПолей.ТипОперации;
		Для Каждого Позиция Из СтруктураДанных.Data Цикл
			Если ПерваяПозиция Тогда
				ПерваяПозиция = Ложь;
			Иначе
				Текст = Текст + РазделительВнут;
			КонецЕсли;
			ТипОперации = ТипОперацииССервера.Получить(Позиция.OperationTypeText);
			Если НЕ ЗначениеЗаполнено(ТипОперации) Тогда
				ТипОперации = Позиция.OperationTypeText;
			КонецЕсли;
			Текст = Текст + ПостроитьПоле(ТипОперации, ШиринаСтроки) + Символы.ПС;
			ВремяОперации = СтруктураНаименованияПолей.Время + ": " + Формат(Позиция.Date, ФорматДаты);
			Текст = Текст + ПостроитьПоле(ВремяОперации, ШиринаСтроки) + Символы.ПС;
			Если Позиция.Number <> Неопределено Тогда
				ФискальныйЧек = СтруктураНаименованияПолей.ФискальныйЧекНомер + Формат(Позиция.Number, ФорматБезПробела);
				Текст = Текст + ПостроитьПоле(ФискальныйЧек,ШиринаСтроки) + Символы.ПС;
			КонецЕсли;
			Сумма = Формат(Позиция.Sum, ФорматДенежный);
			Текст = Текст + ВыстроитьПоля(СтруктураНаименованияПолей.НадписьСумма, Сумма, ШиринаСтроки) + Символы.ПС;
		КонецЦикла;
		
		Текст = Текст + ПостроитьПолеПереносом(СтруктураНаименованияПолей.КонецЛенты, ШиринаСтроки, , Истина) + Символы.ПС;
		
	Исключение
		Текст = "";
	КонецПопытки;
	
	Возврат Текст;
	
КонецФункции

// Процедура удаляет непечатные символы кодов маркировки в позициях чека в случае если они есть.
//
Процедура НормализоватьКодыМаркировкиПередПечатью(СтруктураДанных)
	
	#Если НЕ ВебКлиент Тогда
		Для Каждого ПозицияЧека Из СтруктураДанных.Positions Цикл 
			Если ПозицияЧека.Свойство("Mark") И ЗначениеЗаполнено(ПозицияЧека.Mark) И НайтиНедопустимыеСимволыXML(ПозицияЧека.Mark) > 0 Тогда 
				ПозицияЧека.Mark = ИнтеграцияWebKassaКлиентСервер.УдалитьНедопустимыеСимволыXML(ПозицияЧека.Mark);
			КонецЕсли;
		КонецЦикла;
	#Иначе
		//на веб-клиенте всегда удаляем недопустимые символы без проверки
		Для Каждого ПозицияЧека Из СтруктураДанных.Positions Цикл 
			Если ПозицияЧека.Свойство("Mark") И ЗначениеЗаполнено(ПозицияЧека.Mark) Тогда 
				ПозицияЧека.Mark = ИнтеграцияWebKassaКлиентСервер.УдалитьНедопустимыеСимволыXML(ПозицияЧека.Mark);
			КонецЕсли;
		КонецЦикла;
	#КонецЕсли
КонецПроцедуры

#КонецОбласти

#КонецОбласти