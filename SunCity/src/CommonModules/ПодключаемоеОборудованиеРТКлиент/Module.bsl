////////////////////////////////////////////////////////////////////////////////
// ПодключаемоеОборудованиеРТКлиент содержит процедуры и функции 
// для работы с подключаемым оборудованием.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Очистка полученного магнитного кода, выбор из нескольких полученных форматов.
//
// Параметры:
//  МагнитныйКод - Строка - магнитные данные считанные СМК, в данном параметры возвращается обработанный код.
//
Процедура ВыбратьМагнитныйКод(МагнитныйКод) Экспорт
	
	СписокКодовКарты = ПодключаемоеОборудованиеРТВызовСервера.ПолучитьКодыКарты(МагнитныйКод);
	
	Если СписокКодовКарты.Количество() > 1 Тогда

		#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
			ВыбранныйКодКарты = СписокКодовКарты.ВыбратьЭлемент(НСтр("ru = 'Выберите считанный код:'"));
			Если ВыбранныйКодКарты <> Неопределено Тогда
				МагнитныйКод = ВыбранныйКодКарты.Значение;
			КонецЕсли;
		#КонецЕсли
		

	ИначеЕсли СписокКодовКарты.Количество() = 1 Тогда
		
		МагнитныйКод = СписокКодовКарты[0].Значение;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка ответа пользователя и загрузка данных из ТСД.
//
// Параметры:
//  Результат - КодВозвратаДиалога - код возврата диалога.
//  Параметры - Структура - структура дополнительных параметров.
//
Процедура ПолучитьДанныеИзТСДПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Форма = Параметры.Форма;
	ОбновитьКоличество = (Результат = КодВозвратаДиалога.Да);
	Параметры.Вставить("ОбновитьКоличество", ОбновитьКоличество);
	
	ДанныеШтрихкодов = Параметры.ДанныеШтрихкодов;
	СтруктураМассивов = ПодключаемоеОборудованиеРТВызовСервера.СформироватьМассивТоваров(ДанныеШтрихкодов, ОбновитьКоличество);
	
	Параметры.Вставить("ОпознанныеШтрихкоды", СтруктураМассивов.ОпознанныеШтрихкоды);
	Параметры.Вставить("НеОпознанныеШтрихкоды", СтруктураМассивов.НеОпознанныеШтрихкоды);
	Параметры.Вставить("УчитыватьСерийныеНомераПриСвертке", Параметры.УчитыватьСерийныеНомераПриСвертке);
	
	ПовторяющиесяШтрихкоды = СтруктураМассивов.ПовторяющиесяШтрихкоды;
	Если ПовторяющиесяШтрихкоды.ЗначенияПоиска.Количество() = 0 Тогда
		ПолучитьДанныеИзТСДПослеВыбораПовторов(Неопределено, Параметры);
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПовторяющиесяШтрихкоды", ПовторяющиесяШтрихкоды);
		ОбработчикОповещения = Новый ОписаниеОповещения("ПолучитьДанныеИзТСДПослеВыбораПовторов", ЭтотОбъект, Параметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("ОбщаяФорма.ВыборДанныхПоискаПоШК", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
		ОткрытаБлокирующаяФорма = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработка повторяющихся штрихкодов.
//
// Параметры:
//  Результат - Структура - структура с повторяющимися штрихкодами.
//  Параметры - Структура - структура дополнительных параметров.
//
Процедура ПолучитьДанныеИзТСДПослеВыбораПовторов(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Для Каждого ПовторяющийсяШК Из Результат.ЗначенияПоиска Цикл
			Параметры.ОпознанныеШтрихкоды.ЗначенияПоиска.Добавить(ПовторяющийсяШК);
		КонецЦикла;
	КонецЕсли;
	
	НеОпознанныеШтрихкоды = Параметры.НеОпознанныеШтрихкоды;

	Если НеОпознанныеШтрихкоды.Количество() = 0 Тогда
		
		ПодборНоменклатурыПоСоответствиюШтрихкодов(Неопределено, Параметры);
		
	Иначе
		Если Параметры.ВыбиратьНенайденные Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Штрихкоды", НеОпознанныеШтрихкоды);
			
			Оповещение = Новый ОписаниеОповещения("ПодборНоменклатурыПоСоответствиюШтрихкодов", ЭтотОбъект, Параметры);
			ОткрытьФорму("ОбщаяФорма.ПодборНоменклатурыПоСоответствиюШтрихкодов",
							ПараметрыФормы,
							,
							,
							,
							,
							Оповещение,
							РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ШаблонПредупреждения = НСтр("ru = 'Данные по коду не найдены: %1'");
			Для Каждого СтрокаШтрихкода Из НеОпознанныеШтрихкоды Цикл
				СтрокаПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										ШаблонПредупреждения,
										СтрокаШтрихкода.Штрихкод);
				ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаПредупреждения);
			КонецЦикла;
			ПодборНоменклатурыПоСоответствиюШтрихкодов(Неопределено, Параметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Подбор номенклатуры по значению штрихкодов.
//
// Параметры:
//  Результат - Массив - массив сопоставленных штрихкодов.
//  Параметры - Структура - структура дополнительных параметров.
//
Процедура ПодборНоменклатурыПоСоответствиюШтрихкодов(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Для Каждого СопоставленныйШК Из Результат Цикл
			Параметры.ОпознанныеШтрихкоды.ЗначенияПоиска.Добавить(СопоставленныйШК);
		КонецЦикла;
	КонецЕсли;
	
	ОпознанныеШтрихкоды = Параметры.ОпознанныеШтрихкоды;
	Если ОпознанныеШтрихкоды.Количество() > 0 Тогда
		ОпознанныеШтрихкоды.Вставить("ОбновитьКоличество", Параметры.ОбновитьКоличество);
		ОпознанныеШтрихкоды.Вставить("УчитыватьСерийныеНомераПриСвертке", Параметры.УчитыватьСерийныеНомераПриСвертке);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьДанныеИзТСДКлиент", Параметры.Форма, Параметры);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ОпознанныеШтрихкоды);
	Иначе
		СообщитьТекстПредупреждения(ОпознанныеШтрихкоды);
	КонецЕсли;
	
КонецПроцедуры

// Обработка результата загрузки данных из ТСД.
//
// Параметры:
//  СтруктураРезультат - Структура - структура результата выполнения операции.
//  Параметры - Структура - структура дополнительных параметров.
//
Процедура ПолучитьДанныеИзТСДЗавершение(СтруктураРезультат, Параметры) Экспорт
	
	Параметры.Форма.Доступность = Истина;
	
	Если НЕ СтруктураРезультат.Результат Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ДанныеШтрихкодов", СтруктураРезультат.ТаблицаТоваров);
	
	Если Параметры.ЕстьКоличество Тогда
		ИмяТаблицы = "Товары";
		Если Параметры.Свойство("ИмяТаблицыВыборки") Тогда
			ИмяТаблицы = Параметры.ИмяТаблицыВыборки;
		КонецЕсли;
		Если Параметры.Форма.Объект[ИмяТаблицы].Количество() > 0 Тогда
			Оповещение = Новый ОписаниеОповещения("ПолучитьДанныеИзТСДПослеЗакрытияВопроса", ЭтотОбъект, Параметры);
			
			ТекстВопроса = НСтр("ru='Перезаполнить количество в строках табличной части?'") 
				+ Символы.ПС
				+ НСтр("ru='Да - Количество в строках табличной части будет заполнено количеством из ТСД'") 
				+ Символы.ПС 
				+ НСтр("ru='Нет - Количество из ТСД будет добавлено к количеству в строках табличной части'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Иначе
			ПолучитьДанныеИзТСДПослеЗакрытияВопроса(КодВозвратаДиалога.Нет, Параметры);
		КонецЕсли;
	Иначе
		ПолучитьДанныеИзТСДПослеЗакрытияВопроса(КодВозвратаДиалога.Нет, Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Загружает в таблицу данные из терминала сбора данных.
//
// Параметры:
//  Форма - УправляемаяФорма - форма с данными из которой вызывается процедура процедура.
//  ДополнительныеПараметры - Структура - структура дополнительных параметров.
//
Процедура ПолучитьДанныеИзТСД(Форма, ДополнительныеПараметры = Неопределено) Экспорт
	
	Форма.Доступность = Ложь;
	
	ОчиститьСообщения();
	
	ЕстьКоличество = Истина;
	ОчиститьКоличество = Ложь;
	ВыбиратьНенайденные = Истина;
	ОбработатьПослеЗагрузки = Ложь;
	ИмяТаблицыВыборки = "Товары";
	УчитыватьСерийныеНомераПриСвертке = Истина;
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("ЕстьКоличество") Тогда
			ЕстьКоличество = ДополнительныеПараметры.ЕстьКоличество;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ОчиститьКоличество") Тогда
			ОчиститьКоличество = ДополнительныеПараметры.ОчиститьКоличество;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ВыбиратьНенайденные") Тогда
			ВыбиратьНенайденные = ДополнительныеПараметры.ВыбиратьНенайденные;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ОбработатьПослеЗагрузки") Тогда
			ОбработатьПослеЗагрузки = ДополнительныеПараметры.ОбработатьПослеЗагрузки;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ИмяТаблицыВыборки") Тогда
			ИмяТаблицыВыборки = ДополнительныеПараметры.ИмяТаблицыВыборки;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("УчитыватьСерийныеНомераПриСвертке") Тогда
			УчитыватьСерийныеНомераПриСвертке = ДополнительныеПараметры.УчитыватьСерийныеНомераПриСвертке;
		КонецЕсли;
	ИначеЕсли Форма.ПараметрыСобытийПО <> Неопределено Тогда
		Если Форма.ПараметрыСобытийПО.Свойство("ЕстьКоличество") Тогда
			ЕстьКоличество = Форма.ПараметрыСобытийПО.ЕстьКоличество;
		КонецЕсли;
		Если Форма.ПараметрыСобытийПО.Свойство("ОчиститьКоличество") Тогда
			ОчиститьКоличество = Форма.ПараметрыСобытийПО.ОчиститьКоличество;
		КонецЕсли;
		Если Форма.ПараметрыСобытийПО.Свойство("ВыбиратьНенайденные") Тогда
			ВыбиратьНенайденные = Форма.ПараметрыСобытийПО.ВыбиратьНенайденные;
		КонецЕсли;
		Если Форма.ПараметрыСобытийПО.Свойство("ОбработатьПослеЗагрузки") Тогда
			ОбработатьПослеЗагрузки = Форма.ПараметрыСобытийПО.ОбработатьПослеЗагрузки;
		КонецЕсли;
		Если Форма.ПараметрыСобытийПО.Свойство("ИмяТаблицыВыборки") Тогда
			ИмяТаблицыВыборки = Форма.ПараметрыСобытийПО.ИмяТаблицыВыборки;
		КонецЕсли;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Форма", Форма);
	Параметры.Вставить("ЕстьКоличество", ЕстьКоличество);
	Параметры.Вставить("ОчиститьКоличество", ОчиститьКоличество);
	Параметры.Вставить("ВыбиратьНенайденные", ВыбиратьНенайденные);
	Параметры.Вставить("ОбработатьПослеЗагрузки", ОбработатьПослеЗагрузки);
	Параметры.Вставить("ИмяТаблицыВыборки", ИмяТаблицыВыборки);
	Параметры.Вставить("УчитыватьСерийныеНомераПриСвертке", УчитыватьСерийныеНомераПриСвертке);
	
	ОповещенияПриЗагрузкеИзТСД = Новый ОписаниеОповещения("ПолучитьДанныеИзТСДЗавершение", ЭтотОбъект, Параметры);
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(ОповещенияПриЗагрузкеИзТСД, Форма.УникальныйИдентификатор, Истина);

КонецПроцедуры

// Выгружает таблицу с данными в терминал сбора данных - После закрытия вопроса.
//
// Параметры:
//  Результат - КодВозвратаДиалога - код возврата диалога.
//  Параметры - Структура - структура дополнительных параметров.
//
Процедура ВыгрузитьДокументВТСДПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Параметры.Форма.Записать() Тогда
			Параметры.Вставить("Документ", Параметры.Форма.Объект.Ссылка);
			Параметры.Удалить("Форма");
			РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ОткрытьФорму("Обработка.ВыгрузкаТоваровВТСД.Форма", Параметры,,,,,,РежимОткрытияОкна);
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Выгружает таблицу с данными в терминал сбора данных.
// 
// Параметры:
//  Форма - УправляемаяФорма - форма с данными из которой вызывается процедура процедура.
//  ВыгружатьЦену - Булево - признак выгрузки цены.
//  ДополнительныеПараметры - Структура - структура дополнительных параметров.
//
Процедура ВыгрузитьДокументВТСД(Форма, ВыгружатьЦену = Ложь, ДополнительныеПараметры = Неопределено) Экспорт
	
	ВидЦены = Неопределено;
	ИмяТаблицыВыборки = "";
	ПрефиксРаздела = "";
	АдресТоваровВХранилище = "";
	ПараметрыФормы = Новый Структура;
	ЭтоСсылочныйОбъект = Истина;
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("ВидЦены") Тогда
			ВидЦены = ДополнительныеПараметры.ВидЦены;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ИмяТаблицыВыборки") Тогда
			ИмяТаблицыВыборки = ДополнительныеПараметры.ИмяТаблицыВыборки;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ПрефиксРаздела") Тогда
			ПрефиксРаздела = ДополнительныеПараметры.ПрефиксРаздела;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("АдресТоваровВХранилище") Тогда
			АдресТоваровВХранилище = ДополнительныеПараметры.АдресТоваровВХранилище;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ЭтоСсылочныйОбъект") Тогда
			ЭтоСсылочныйОбъект = ДополнительныеПараметры.ЭтоСсылочныйОбъект;
		КонецЕсли;
	ИначеЕсли Форма.ПараметрыСобытийПО <> Неопределено Тогда
		Если Форма.ПараметрыСобытийПО.Свойство("ВидЦены") Тогда
			ВидЦены = Форма.ПараметрыСобытийПО.ВидЦены;
		КонецЕсли;
		Если Форма.ПараметрыСобытийПО.Свойство("ИмяТаблицыВыборки") Тогда
			ИмяТаблицыВыборки = Форма.ПараметрыСобытийПО.ИмяТаблицыВыборки;
		КонецЕсли;
		Если Форма.ПараметрыСобытийПО.Свойство("ПрефиксРаздела") Тогда
			ПрефиксРаздела = Форма.ПараметрыСобытийПО.ПрефиксРаздела;
		КонецЕсли;
		Если Форма.ПараметрыСобытийПО.Свойство("АдресТоваровВХранилище") Тогда
			АдресТоваровВХранилище = Форма.ПараметрыСобытийПО.АдресТоваровВХранилище;
		КонецЕсли;
		Если Форма.ПараметрыСобытийПО.Свойство("ЭтоСсылочныйОбъект") Тогда
			ЭтоСсылочныйОбъект = Форма.ПараметрыСобытийПО.ЭтоСсылочныйОбъект;
		КонецЕсли;
	КонецЕсли;
	ПараметрыФормы.Вставить("ВидЦены", ВидЦены);
	ПараметрыФормы.Вставить("ИмяТаблицыВыборки", ИмяТаблицыВыборки);
	ПараметрыФормы.Вставить("ПрефиксРаздела", ПрефиксРаздела);
	ПараметрыФормы.Вставить("АдресТоваровВХранилище", АдресТоваровВХранилище);
	ПараметрыФормы.Вставить("ЭтоСсылочныйОбъект", ЭтоСсылочныйОбъект);
	ПараметрыФормы.Вставить("ВариантЗаполнения", "ПоДокументу");
	ПараметрыФормы.Вставить("ВыгружатьЦену", ВыгружатьЦену);
	Если ЭтоСсылочныйОбъект Тогда
		Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
			
			Если Форма.Модифицированность Тогда
				
				ПараметрыФормы.Вставить("Форма", Форма);
				Оповещение = Новый ОписаниеОповещения("ВыгрузитьДокументВТСДПослеЗакрытияВопроса", ЭтотОбъект, ПараметрыФормы);
				
				ТекстВопроса = НСтр("ru = 'Документ был изменен, записать изменения?'");
				ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
				
			Иначе
				ПараметрыФормы.Вставить("Документ", Форма.Объект.Ссылка);
				РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
				ОткрытьФорму("Обработка.ВыгрузкаТоваровВТСД.Форма", ПараметрыФормы,,,,,,РежимОткрытияОкна);
			КонецЕсли;
			
		Иначе
			ПараметрыФормы.Вставить("форма", Форма);
			Оповещение = Новый ОписаниеОповещения("ВыгрузитьДокументВТСДПослеЗакрытияВопроса", ЭтотОбъект, ПараметрыФормы);
			ТекстВопроса = НСтр("ru = 'Документ необходимо записать. Записать документ?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		КонецЕсли;
	Иначе
		ПараметрыФормы.Вставить("Документ", Форма.Объект);
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Обработка.ВыгрузкаТоваровВТСД.Форма", ПараметрыФормы,,,,,,РежимОткрытияОкна);
	КонецЕсли;
	
КонецПроцедуры

// Выгружает таблицу с данными в терминал сбора данных.
// 
// Параметры:
//  Форма - УправляемаяФорма - форма с данными из которой вызывается процедура процедура.
//  ДополнительныеПараметры - Структура - структура дополнительных параметров.
//
Процедура ВыгрузитьОтчетВТСД(Форма, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Обработка.ВыгрузкаТоваровВТСД.Форма", ДополнительныеПараметры,,,,,,РежимОткрытияОкна);
	
КонецПроцедуры

// Получает вес с электронных весов для табличной части - завершение.
//
// Параметры:
//  РезультатОперации - Структура - результат выполнения операции.
//  Параметры - Структура - структура дополнительных параметров.
//
Процедура ПолучениеВесаСЭлектронныхВесовДляТабличнойЧастиЗавершение(РезультатОперации, Параметры)Экспорт
	
	Параметры.Форма.Доступность = Истина;
	
	Если РезультатОперации.Результат Тогда
		
		Если Параметры.КоличествоФакт Тогда
			Если Параметры.РежимСложения Тогда
				Параметры.ТекущаяСтрока.КоличествоУпаковокФакт = Параметры.ТекущаяСтрока.КоличествоУпаковокФакт + РезультатОперации.Вес; 
			Иначе
				Параметры.ТекущаяСтрока.КоличествоУпаковокФакт = РезультатОперации.Вес;
			КонецЕсли;
		Иначе
			Если Параметры.РежимСложения Тогда
				Параметры.ТекущаяСтрока.КоличествоУпаковок = Параметры.ТекущаяСтрока.КоличествоУпаковок + РезультатОперации.Вес; 
			Иначе
				Параметры.ТекущаяСтрока.КоличествоУпаковок = РезультатОперации.Вес; 
			КонецЕсли
		КонецЕсли;
			
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, Истина);
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатОперации.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Получает вес с электронных весов для табличной части.
//
// Параметры:
//  ОповещениеПриПолученииВеса - ОписаниеОповещения - оповещение выполнения операции..
//  Форма - УправляемаяФорма - форма с которой вызывается процедура.
//  ИмяТабличнойЧасти - Строка - структура дополнительных параметров.
//  КоличествоФакт - Булево - пизнак использования фактического количества..
//  РежимСложения - Булево - признак использования режима сложения.
//
Процедура ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ОповещениеПриПолученииВеса, Форма, ИмяТабличнойЧасти = "Товары", КоличествоФакт = Ложь, РежимСложения = Ложь) Экспорт
	
	// Проверим текущую строку табличной части.
	Если ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
		
		ТекущаяСтрока = Форма.Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
		Если ТекущаяСтрока = Неопределено Тогда
			ТекстСообщения = НСтр("ru='Необходимо выбрать строку, для которой необходимо получить вес.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Иначе
			Форма.Доступность = Ложь;
			
			Контекст = Новый Структура;
			Контекст.Вставить("СледующееОповещение", ОповещениеПриПолученииВеса);
			Контекст.Вставить("ТекущаяСтрока" , ТекущаяСтрока);
			Контекст.Вставить("КоличествоФакт", КоличествоФакт);
			Контекст.Вставить("РежимСложения" , РежимСложения);
			Контекст.Вставить("Форма"         , Форма);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПолучениеВесаСЭлектронныхВесовДляТабличнойЧастиЗавершение", ЭтотОбъект, Контекст);
			МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(ОписаниеОповещения, Форма.УникальныйИдентификатор, ,Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает результат попытки пробить чек.
//
// Параметры:
//  РезультатВыполнения - Структура - результат пробития чека.
//  Параметры - Структура - структура дополнительных параметров.
//
Процедура НачатьПробитиеЧекаКОИнкассацияЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЧекПробит = Ложь;
	
	Если РезультатВыполнения.Результат Тогда
		
		РезультатПроведения = ПодключаемоеОборудованиеРТВызовСервера.ПровестиПробитыйДокумент(Параметры.ДокументНаККМ, 
			РезультатВыполнения.ВыходныеПараметры[1]);
		Если РезультатПроведения = Истина Тогда
			ПараметрыДокумента = ОбщегоНазначенияРТВызовСервера.ЗначенияРеквизитовОбъекта(Параметры.ДокументНаККМ, 
				Новый Структура("КассаККМ, НомерЧекаККМ"));
			НомерДокументаКассыККМ[ПараметрыДокумента.КассаККМ] = ПараметрыДокумента.НомерЧекаККМ + 1;
			ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
			ЧекПробит = Истина;
		КонецЕсли;
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, ЧекПробит);
		
	Иначе
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
									|Чек не напечатан на фискальном устройстве.
									|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает результат попытки пробить чек.
//
// Параметры:
//  РезультатВыполнения - Структура - результат пробития чека.
//  Параметры - Структура - структура дополнительных параметров.
//
Процедура НачатьПробитиеЧекаКОЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЧекПробит = Ложь;
	
	Если РезультатВыполнения.Результат Тогда
		
		Если Параметры.НаличнаяОперация Тогда 
			
			Оповещение = Новый ОписаниеОповещения("НачатьПробитиеЧекаКОИнкассацияЗавершение", ЭтотОбъект, Параметры);
			Параметры.Вставить("Сумма", ПодключаемоеОборудованиеРТВызовСервера.СуммаДокумента(Параметры.ДокументНаККМ));
			
			МенеджерОборудованияКлиент.НачатьИнкассациюНаФискальномУстройстве(Оповещение, 
																				Параметры.УникальныйИдентификатор, 
																				Параметры, 
																				Параметры.ИдентификаторУстройства);
		Иначе
				
			РезультатПроведения = ПодключаемоеОборудованиеРТВызовСервера.ПровестиПробитыйДокумент(Параметры.ДокументНаККМ, 
				РезультатВыполнения.ВыходныеПараметры[1]);
			Если РезультатПроведения = Истина Тогда
				ПараметрыДокумента = ОбщегоНазначенияРТВызовСервера.ЗначенияРеквизитовОбъекта(Параметры.ДокументНаККМ, 
					Новый Структура("КассаККМ, НомерЧекаККМ"));
				НомерДокументаКассыККМ[ПараметрыДокумента.КассаККМ] = ПараметрыДокумента.НомерЧекаККМ + 1;
				ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
				ЧекПробит = Истина;
			КонецЕсли;
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, ЧекПробит);
			
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
									|Чек не напечатан на фискальном устройстве.
									|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, Ложь);
	КонецЕсли;
		
КонецПроцедуры

// Инициирует пробитие кассового чека.
//
// Параметры:
//  ОповещениеПриПолученииВеса - ОписаниеОповещения - оповещение выполнения операции.
//  Объект - ОбъекМетаданных - объект родитель.
//  Параметры - Структура - структура дополнительных параметров.
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор устройства пробития.
//
Процедура НачатьПробитиеЧекаКОВыполнить(ОповещениеПриЗавершении, Объект, Параметры, УникальныйИдентификатор) Экспорт
	
	ТипЧека                              = Параметры.ТипЧека;
	ТипОплаты                            = Параметры.ТипОплаты;
	ИспользоватьПодключаемоеОборудование = Параметры.ИспользоватьПодключаемоеОборудование;
	НаличнаяОперация                     = Параметры.НаличнаяОперация;
	АгентскийДоговорВШапке               = Параметры.АгентскийДоговорВШапке;
	ДокументНаККМ                        = Параметры.ДокументНаККМ;
	
	ОписаниеОшибки = "";
	ЧекПробит = Ложь;
	
	ПараметрыКассыККМ       = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(Объект.КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	РаспределениеВыручкиПоСекциям = ПараметрыКассыККМ.РаспределениеВыручкиПоСекциям;
	ИспользоватьКассуБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	Если НомерДокументаКассыККМ[Параметры.КассаККМ] <> Неопределено Тогда
		НомерЧекаККМ  = НомерДокументаКассыККМ[Параметры.КассаККМ];
	Иначе
		НомерЧекаККМ  = ПорядковыйНомерПродажи;
	КонецЕсли;
	
	Если НЕ ИспользоватьПодключаемоеОборудование ИЛИ ИспользоватьКассуБезПодключенияОборудования Тогда
		
		РезультатПроведения = ПодключаемоеОборудованиеРТВызовСервера.ПровестиПробитыйДокумент(ДокументНаККМ, НомерЧекаККМ);
		Если РезультатПроведения = Истина Тогда
			НомерДокументаКассыККМ[Параметры.КассаККМ] = НомерЧекаККМ + 1;
			ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
			ЧекПробит = Истина;
		КонецЕсли;
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ЧекПробит);
		
	Иначе
		
		Если ИдентификаторУстройства <> Неопределено Тогда
			
			Параметры = Новый Структура();
			Параметры.Вставить("Объект", Объект);
			Параметры.Вставить("ДокументНаККМ", ДокументНаККМ); 
			Параметры.Вставить("ТипЧека", ТипЧека);
			Параметры.Вставить("ТипОплаты", ТипОплаты);
			Параметры.Вставить("ИспользоватьПодключаемоеОборудование", ИспользоватьПодключаемоеОборудование);
			Параметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
			Параметры.Вставить("НаличнаяОперация", НаличнаяОперация);
			Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
			Параметры.Вставить("АгентскийДоговорВШапке", АгентскийДоговорВШапке);
			Параметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
			
			
			ПараметрыКассы = ИнтеграцияWebKassaВызовСервераПереопределяемый.ПолучитьСведенияОбОрганизацииИКассеККМ(ПараметрыКассыККМ.Организация, ТекущаяДата(), Объект.КассаККМ);
			Параметры.Вставить("РеквизитыКассыККМ", ПараметрыКассы);
			
			ОбщиеПараметры  = ПодключаемоеОборудованиеРТВызовСервера.ВходящиеДанныеДляФР(ДокументНаККМ, 
				РаспределениеВыручкиПоСекциям, 
				НомерЧекаККМ);
			Оповещение = Новый ОписаниеОповещения("НачатьПробитиеЧекаКОЗавершение", ЭтотОбъект, Параметры);
			
			ПодключенноеОборудование = Новый Структура("Терминал, ФискальныеУстройства");
			ПодключенноеОборудование.ФискальныеУстройства = Новый Массив; 
			ПодключенноеОборудование.ФискальныеУстройства.Добавить(ИдентификаторУстройства);
			
			ПараметрыОперации = Новый Структура;
			ПараметрыОперации.Вставить("ДокументСсылка", ДокументНаККМ);
			ПараметрыОперации.Вставить("Организация", ПараметрыКассыККМ.Организация);
			ПараметрыОперации.Вставить("Партнер", Неопределено);
			ПараметрыОперации.Вставить("ПодключенноеОборудование", ПодключенноеОборудование);
			ПараметрыОперации.Вставить("ТорговыйОбъект", Неопределено);
			
			ОткрытьФорму(
				"Обработка.ПечатьЧека.Форма",
				ПараметрыОперации,
				ЭтотОбъект,,,,
				Оповещение);
			
		Иначе
			ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка. Устройство не выбрано.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ЧекПробит);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка внешнего события формы.
//
// Параметры:
//  Форма - УправляемаяФорма - форма родитель.
//  Источник - ОбъектМетаданных - источник события.
//  Событие - Строка - имя внешнего события.
//  Данные - Структура - структура данных события.
//
Процедура ВнешнееСобытиеОборудования(Форма, Источник, Событие, Данные) Экспорт
	
	//ИнтеграцияИСМПТК_РозничноеВыбытие
	Штрихкод = Данные;
	ИсходныйШтрихкод = РазборИОбработкаКодовМаркировкиИСМПТКСлужебныйКлиентСервер.ШтрихкодВBase64(Штрихкод);
	ДанныеМаркировки = РозничноеВыбытиеИСМПТКВызовСервера.РазобратьШтриховойКодТовара(ИсходныйШтрихкод, Истина);
	Если ДанныеМаркировки.Разобран
		И ДанныеМаркировки.ТипИдентификатораТовара = ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовШКТовараИСМПТК.КодТовараВФорматеDataMatrixGS1") 
		И Не РозничноеВыбытиеИСМПТККлиентПереопределяемый.ПроверитьДокументНаПоддержкуИСМП(Форма) Тогда
		ТекстСообщения = НСтр("ru = 'Работа с кодами маркировки в данной форме не поддерживается!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;		
	//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
		
	ИсходныеДанные = Данные;
	
	// Заменяем спец.символы, которые потом не сможем передать на сервер.
	РазделительGS1 = МенеджерОборудованияМаркировкаКлиентСервер.РазделительGS1();
	ЭкранированныйСимволGS1 = МенеджерОборудованияМаркировкаКлиентСервер.ЭкранированныйСимволGS1();
	Данные = СтрЗаменить(Данные, РазделительGS1, ЭкранированныйСимволGS1);
	
	ОписаниеСобытия = Новый Структура();
	ОписаниеОшибки  = "";
	ОписаниеСобытия.Вставить("Источник", Источник);
	ОписаниеСобытия.Вставить("Событие",  Событие);
	ОписаниеСобытия.Вставить("Данные",   Данные);
	
	Результат = МенеджерОборудованияКлиент.ПолучитьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки);
	Если Результат = Неопределено Тогда 
		ТекстСообщения = НСтр("ru = 'При обработке внешнего события от устройства произошла ошибка:'")
							+ Символы.ПС + ОписаниеОшибки;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	Иначе
		Если Результат.Источник = "ПодключаемоеОборудование" Тогда
			Если Результат.ИмяСобытия = "ScanData"
				И Найти(Форма.ПоддерживаемыеТипыПодключаемогоОборудования, "СканерШтрихкода") > 0 Тогда
				
				Если ТипЗнч(Результат.Параметр) = тип("Массив") Тогда
					Если Результат.Параметр[1] = Неопределено Тогда
						ТекКод = Результат.Параметр[0];
					Иначе
						ТекКод = Результат.Параметр[1][1];
					КонецЕсли;
				Иначе
					ТекКод = Результат.Параметр;
				КонецЕсли;
				
				ДанныеШтрихкода = Новый Структура;
				ДанныеШтрихкода.Вставить("Штрихкод",   ИсходныеДанные);
				ДанныеШтрихкода.Вставить("Количество", 1);
				
				ТекстОшибки   = "";
				ВидПродукции  = Неопределено;
				ЭтоМаркировка = Ложь;
				ПроверитьВходящиеДанные(Форма, ДанныеШтрихкода, ТекстОшибки, ЭтоМаркировка, ВидПродукции);
				
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда 
					ОбработатьОшибочноеСканирование(Форма, ТекстОшибки, ТекКод, ВидПродукции);
				Иначе
					Если ЭтоМаркировка Тогда 
						ДанныеОповещения = ДанныеШтрихкода;
						ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьКодМаркировки", Форма);
					Иначе
						ДанныеОповещения = ТекКод;
						ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеПоискаПоШтрихкоду", Форма, Результат);
					КонецЕсли;
					ВыполнитьОбработкуОповещения(ОписаниеОповещения, ДанныеОповещения);
				КонецЕсли;
					
			ИначеЕсли Результат.ИмяСобытия ="TracksData"
				И Найти(Форма.ПоддерживаемыеТипыПодключаемогоОборудования, "СчитывательМагнитныхКарт") > 0 Тогда
				
				Если ТипЗнч(Результат.Параметр) = тип("Массив") Тогда
					ТекКод = Результат.Параметр[0];
				Иначе
					ТекКод = Результат.Параметр;
				КонецЕсли;
				
				ПодключаемоеОборудованиеРТКлиент.ВыбратьМагнитныйКод(ТекКод);
				Если ПустаяСтрока(ТекКод) Тогда
					Возврат;
				КонецЕсли;
				
				ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеПоискаПоМагнитномуКоду", Форма, Результат);
				ВыполнитьОбработкуОповещения(ОписаниеОповещения, ТекКод);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработка внешнего события формы РМК.
//
// Параметры:
//  Форма - УправляемаяФорма - форма родитель.
//  Источник - ОбъектМетаданных - источник события.
//  Событие - Строка - имя внешнего события.
//  Данные - Структура - структура данных события.
//  ИсполняемаяОперацияЛогирования - Строка - операция логирования.
//
Процедура ВнешнееСобытиеОборудованияРМК(Форма, Источник, Событие, Данные, ИсполняемаяОперацияЛогирования = "") Экспорт
	
	ИсходныеДанные = Данные;
	
	// Заменяем спец.символы, которые потом не сможем передать на сервер.
	РазделительGS1 = МенеджерОборудованияМаркировкаКлиентСервер.РазделительGS1();
	ЭкранированныйСимволGS1 = МенеджерОборудованияМаркировкаКлиентСервер.ЭкранированныйСимволGS1();
	Данные = СтрЗаменить(Данные, РазделительGS1, ЭкранированныйСимволGS1);
	
	ОписаниеСобытия = Новый Структура();
	ОписаниеОшибки  = "";
	ОписаниеСобытия.Вставить("Источник", Источник);
	ОписаниеСобытия.Вставить("Событие",  Событие);
	ОписаниеСобытия.Вставить("Данные",   Данные);
	
	Результат = МенеджерОборудованияКлиент.ПолучитьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки);
	Если Результат = Неопределено Тогда
		ЗаголовокСообщения = НСтр("ru = 'При обработке внешнего события от устройства произошла ошибка:'");
		ТекстСообщения = НСтр("ru = 'При обработке внешнего события от устройства произошла ошибка:'")
						+ Символы.ПС
						+ ОписаниеОшибки;
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокСообщения, ТекстСообщения);
	Иначе
		Если Результат.Источник = "ПодключаемоеОборудование" Тогда
			Если Результат.ИмяСобытия = "ScanData" Тогда
				
				Если ТипЗнч(Результат.Параметр) = тип("Массив") Тогда
					Если Результат.Параметр[1] = Неопределено Тогда
						ТекКод = Результат.Параметр[0];
					Иначе
						ТекКод = Результат.Параметр[1][1];
					КонецЕсли;
				Иначе
					ТекКод = Результат.Параметр;
				КонецЕсли;
				
				ДанныеШтрихкода = Новый Структура;
				ДанныеШтрихкода.Вставить("Штрихкод",   ИсходныеДанные);
				ДанныеШтрихкода.Вставить("Количество", 1);
				
				ТекстОшибки   = "";
				ВидПродукции  = Неопределено;
				ЭтоМаркировка = Ложь;
				ПроверитьВходящиеДанные(Форма, ДанныеШтрихкода, ТекстОшибки, ЭтоМаркировка, ВидПродукции);
				
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда 
					ОбработатьОшибочноеСканирование(Форма, ТекстОшибки, ТекКод, ВидПродукции);
				Иначе
					Если ЭтоМаркировка Тогда
						
						ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьНеобходимостьВыбораОрганизации", Форма);
						ВыполнитьОбработкуОповещения(ОписаниеОповещения, ИсходныеДанные);
						
						ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьКодМаркировки", Форма);
						ВыполнитьОбработкуОповещения(ОписаниеОповещения, ДанныеШтрихкода);
						
						Если Форма.НеобходимВводЦены Тогда
							СтруктураПараметров = Новый Структура;
							СтруктураПараметров.Вставить("АктивизироватьСтроку", Форма.Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
							СтруктураПараметров.Вставить("ВвестиЦену");
							
							ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьДанныеПоКодуКлиент", Форма);
							ВыполнитьОбработкуОповещения(ОписаниеОповещения, СтруктураПараметров);
						КонецЕсли;
						
					Иначе
						ИсполняемаяОперацияЛогирования = "СчитанШтрихкод";
						ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеПоискаПоШтрихкоду", Форма);
						ВыполнитьОбработкуОповещения(ОписаниеОповещения, ТекКод);
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли Результат.ИмяСобытия ="TracksData" Тогда
				ИсполняемаяОперацияЛогирования = "СчитанМагнитныйКод";
				ТекКод = Результат.Параметр;
				ПодключаемоеОборудованиеРТКлиент.ВыбратьМагнитныйКод(ТекКод);
				Если ПустаяСтрока(ТекКод) Тогда
					Возврат;
				КонецЕсли;
				ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеПоискаПоМагнитномуКоду", Форма);
				ВыполнитьОбработкуОповещения(ОписаниеОповещения, ТекКод);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработка полученных данных.
//
// Параметры:
//  Форма - УправляемаяФорма - форма родитель.
//  СтруктураПараметровКлиента - Структура - параметры клиента.
//  ОткрытаБлокирующаяФорма - Булево - признак открытия блокирующей формы.
//
Процедура ОбработатьДанныеПоКоду(Форма, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма) Экспорт
	
	Если СтруктураПараметровКлиента.Свойство("ИспользоватьНовыйАлгоритмПоискаПоШтрихкоду") Тогда
		РаботаСоШтрихкодамиКлиент.ОбработатьДанныеПоКоду(Форма, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
		Возврат;
	КонецЕсли;
	
	Если СтруктураПараметровКлиента.Свойство("НеизвестныеДанныеПО")
		И СтруктураПараметровКлиента.НеизвестныеДанныеПО Тогда
		
		ОбъектыСПоддержкойПодбора = Новый Массив;
		ОбъектыСПоддержкойПодбора.Добавить("Документ.ОприходованиеТоваров.Форма.ФормаДокумента");
		ОбъектыСПоддержкойПодбора.Добавить("Документ.ПеремещениеТоваров.Форма.ФормаДокумента");
		ОбъектыСПоддержкойПодбора.Добавить("Документ.ПересчетТоваров.Форма.ФормаДокумента");
		ОбъектыСПоддержкойПодбора.Добавить("Документ.РеализацияТоваров.Форма.ФормаДокумента");
		ОбъектыСПоддержкойПодбора.Добавить("Документ.СписаниеТоваров.Форма.ФормаДокумента");
		ОбъектыСПоддержкойПодбора.Добавить("Документ.УстановкаЦенНоменклатуры.Форма.ФормаДокумента");
		ОбъектыСПоддержкойПодбора.Добавить("Документ.ЧекККМ.Форма.ФормаДокумента");
		
		ЕстьПравоСопоставленияНоменклатуры 	= НЕ УправлениеПользователямиВызовСервера.ПолучитьБулевоЗначениеПраваПользователя(
														ПредопределенноеЗначение("ПланВидовХарактеристик.ПраваПользователей.НеСопоставлятьТовары"), Ложь);
		
		Если НЕ ОбъектыСПоддержкойПодбора.Найти(Форма.ИмяФормы) = Неопределено И ЕстьПравоСопоставленияНоменклатуры Тогда
			
			// Откроем форму подбора номенклатуры по штрихкоду.
			ДанныеШтрихкода = СтруктураДанныхШтрихкода(СтруктураПараметровКлиента.ДанныеПО, 1);
			
			ПараметрыФормыПодбораНоменклатурыПоШтрихкодам = РаботаСНоменклатуройКлиент.ПараметрыФормыПодбораНоменклатурыПоШтрихкодам();
			ПараметрыФормыПодбораНоменклатурыПоШтрихкодам.НеизвестныеШтрихкоды.Добавить(ДанныеШтрихкода);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Форма", Форма);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеСопоставленияНеизвестныхШтрихкодов", ПодключаемоеОборудованиеРТКлиент, ДополнительныеПараметры);
			
			//ИнтеграцияИСМПТК_РозничноеВыбытие
			Если ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеОбщейФОМаркировки() 
				И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда 
				//Провеяем: возможно, неизвестный ШК уже был зарегистрирован средствами модуля маркировки
				ШтрихкодПроверки = ПараметрыФормыПодбораНоменклатурыПоШтрихкодам.НеизвестныеШтрихкоды[0].Штрихкод;
				ЭтоЕАН = РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоEANИлиGTIN(ШтрихкодПроверки);
				Если Не ЭтоЕАН Тогда 
					ДанныеМаркировки = РозничноеВыбытиеИСМПТКВызовСервера.РазобратьШтриховойКодТовара(ШтрихкодПроверки, Истина);
					ШтрихкодПроверки = ДанныеМаркировки.EAN;
				КонецЕсли;
				ПодобраннаяНоменклатура = РозничноеВыбытиеИСМПТККлиент.ПолучитьНоменклатуруПоШтрихкодуВРозничномКонтуре(ШтрихкодПроверки);
				Если Не ПодобраннаяНоменклатура = Неопределено Тогда
					ИгнорируяСопоставленияНеизвестныхШтрихкодов(ШтрихкодПроверки, форма);
				Иначе			
					РаботаСНоменклатуройКлиент.ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(ПараметрыФормыПодбораНоменклатурыПоШтрихкодам, Форма, ОписаниеОповещения);
				КонецЕсли;
			Иначе
				РаботаСНоменклатуройКлиент.ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(ПараметрыФормыПодбораНоменклатурыПоШтрихкодам, Форма, ОписаниеОповещения);
			КонецЕсли;
			//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
			
		ИначеЕсли НЕ Форма.ИмяФормы = "Обработка.РабочееМестоКассира.Форма.ФормаРМК" Тогда
			СтрокаСообщения = НСтр("ru = 'Данные по коду не найдены: %1%'");
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", СтруктураПараметровКлиента.ДанныеПО);
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ТекстПредупреждения") Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтруктураПараметровКлиента.ТекстПредупреждения);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ВыборДанныхПоиска") Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКлиента", СтруктураПараметровКлиента);
		
		Если СтруктураПараметровКлиента.Свойство("ОбработкаДанныхЕГАИС") Тогда
			ДополнительныеПараметры.Вставить("Форма", Форма);
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораДанныхПоиска", ИнтеграцияЕГАИСРТКлиент, ДополнительныеПараметры);
		Иначе
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораДанныхПоиска", Форма, ДополнительныеПараметры);
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("АдресВХранилище", СтруктураПараметровКлиента.ВыборДанныхПоиска);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("ОбщаяФорма.ВыборДанныхПоискаПоШК", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
		ОткрытаБлокирующаяФорма = Истина;
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("РегистрацияНовойКарты") Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКлиента", СтруктураПараметровКлиента);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ОбработчикОповещения = Новый ОписаниеОповещения("СоздатьДисконтнуюКарту", ИнформационныеКартыКлиент, ДополнительныеПараметры);
		ИнформационныеКартыКлиент.ПолучитьРазрешениеПользователяНаСозданиеКарты(ОбработчикОповещения, СтруктураПараметровКлиента.ТекстВопросаНовойКарты);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("РегистрацияНовойКартыВыборШаблона") Тогда
		
		ДополнительныеПараметры = Новый Структура("СтруктураПараметровКлиента", СтруктураПараметровКлиента);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ОбработчикОповещения = Новый ОписаниеОповещения("ВыборШаблонаСозданияДисконтнойКарты", ИнформационныеКартыКлиент, ДополнительныеПараметры);
		ИнформационныеКартыКлиент.ПолучитьРазрешениеПользователяНаСозданиеКарты(ОбработчикОповещения, СтруктураПараметровКлиента.ТекстВопросаНовойКарты);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("РегистрацияНовойНоменклатуры") Тогда
		
		// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
		ИдентификаторыНоменклатуры = Неопределено;
		Если РаботаСНоменклатуройКлиент.ДоступнаФункциональностьПодсистемы() Тогда
			
			ИдентификаторыНоменклатуры 
				= РаботаСНоменклатуройРТКлиент.НайтиНоменклатуруПоШтрихкодуВСервисе(СтруктураПараметровКлиента.ДанныеПО);
				
				Если ИдентификаторыНоменклатуры <> Неопределено Тогда
					РаботаСНоменклатуройКлиент.ОткрытьФормуКарточкиНоменклатуры(ИдентификаторыНоменклатуры, 
																				Форма,,
																				СтруктураПараметровКлиента.ДанныеПО);
				
				КонецЕсли;
			
		КонецЕсли;
		
		Если ИдентификаторыНоменклатуры = Неопределено Тогда
		// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("СтруктураПараметровКлиента", СтруктураПараметровКлиента);
			ОбработчикОповещения = Новый ОписаниеОповещения("СоздатьНоменклатуру", ЭтотОбъект, ДополнительныеПараметры);
			ИнформационныеКартыКлиент.ПолучитьРазрешениеПользователяНаСозданиеКарты(ОбработчикОповещения, 
																					СтруктураПараметровКлиента.ТекстВопроса);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Обработка полученных данных.
//
// Параметры:
//  Форма - УправляемаяФорма - форма родитель.
//  СтруктураПараметровКлиента - Структура - параметры клиента.
//  ОткрытаБлокирующаяФорма - Булево - признак открытия блокирующей формы.
//
Процедура ОбработатьДанныеПоКодуРМК(Форма, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма) Экспорт
	
	Если СтруктураПараметровКлиента.Свойство("ИспользоватьНовыйАлгоритмПоискаПоШтрихкоду") Тогда
		РаботаСоШтрихкодамиКлиент.ОбработатьДанныеПоКоду(Форма, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
		Возврат;
	КонецЕсли;
	
	Если СтруктураПараметровКлиента.Свойство("НеизвестныеДанныеПО") 
		И СтруктураПараметровКлиента.НеизвестныеДанныеПО Тогда
		
		ЕстьПравоСопоставленияНоменклатуры 	= НЕ УправлениеПользователямиВызовСервера.ПолучитьБулевоЗначениеПраваПользователя(
														ПредопределенноеЗначение("ПланВидовХарактеристик.ПраваПользователей.НеСопоставлятьТовары"), Ложь);
		
		Если ЕстьПравоСопоставленияНоменклатуры Тогда
			
			// Откроем форму подбора номенклатуры по штрихкоду.
			ДанныеШтрихкода = СтруктураДанныхШтрихкода(СтруктураПараметровКлиента.ДанныеПО, 1);
			
			
			ПараметрыФормыПодбораНоменклатурыПоШтрихкодам = РаботаСНоменклатуройКлиент.ПараметрыФормыПодбораНоменклатурыПоШтрихкодам();
			
			ПараметрыФормыПодбораНоменклатурыПоШтрихкодам.НеизвестныеШтрихкоды.Добавить(ДанныеШтрихкода);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Форма", Форма);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеСопоставленияНеизвестныхШтрихкодов", ПодключаемоеОборудованиеРТКлиент, ДополнительныеПараметры);
			
			РаботаСНоменклатуройКлиент.ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(ПараметрыФормыПодбораНоменклатурыПоШтрихкодам, Форма, ОписаниеОповещения);
			
		Иначе
			
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Результаты поиска'"), СтрШаблон(НСтр("ru='Данные по коду %1 не найдены.'"), СтруктураПараметровКлиента.ДанныеПО));
			
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ТекстПредупреждения") И НЕ СтруктураПараметровКлиента.Свойство("РегистрацияНовойКарты") Тогда
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Результаты поиска'"), СтруктураПараметровКлиента.ТекстПредупреждения);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ВывестиИнформациюРМКУправляемый") Тогда
		
		ЗаголовокИнформации = СтруктураПараметровКлиента.ВывестиИнформациюРМКУправляемый.ЗаголовокИнформации;
		ТекстИнформации = СтруктураПараметровКлиента.ВывестиИнформациюРМКУправляемый.ТекстИнформации;
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ВыборДанныхПоиска") Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКлиента", СтруктураПараметровКлиента);
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораДанныхПоиска", Форма, ДополнительныеПараметры);
		
		ПараметрыФормы = Новый Структура("АдресВХранилище", СтруктураПараметровКлиента.ВыборДанныхПоиска);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("ОбщаяФорма.ВыборДанныхПоискаПоШК", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
		ОткрытаБлокирующаяФорма = Истина;
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("РегистрацияНовойКарты") Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКлиента", СтруктураПараметровКлиента);
		ДополнительныеПараметры.Вставить("ЛогироватьСозданиеКарты", СтруктураПараметровКлиента.ДанныеПО);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ОбработчикОповещения = Новый ОписаниеОповещения("СоздатьДисконтнуюКарту", ИнформационныеКартыКлиент, ДополнительныеПараметры);
		ИнформационныеКартыКлиент.ПолучитьРазрешениеПользователяНаСозданиеКарты(ОбработчикОповещения, СтруктураПараметровКлиента.ТекстВопросаНовойКарты);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("РегистрацияНовойКартыВыборШаблона") Тогда
		
		ДополнительныеПараметры = Новый Структура("СтруктураПараметровКлиента", СтруктураПараметровКлиента);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("ЛогироватьСозданиеКарты", СтруктураПараметровКлиента.ДанныеПО);
		ОбработчикОповещения = Новый ОписаниеОповещения("ВыборШаблонаСозданияДисконтнойКарты", ИнформационныеКартыКлиент, ДополнительныеПараметры);
		ИнформационныеКартыКлиент.ПолучитьРазрешениеПользователяНаСозданиеКарты(ОбработчикОповещения, СтруктураПараметровКлиента.ТекстВопросаНовойКарты);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("РегистрацияНовойНоменклатуры") Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКлиента", СтруктураПараметровКлиента);
		ОбработчикОповещения = Новый ОписаниеОповещения("СоздатьНоменклатуру", ЭтотОбъект, ДополнительныеПараметры);
		ИнформационныеКартыКлиент.ПолучитьРазрешениеПользователяНаСозданиеКарты(ОбработчикОповещения, СтруктураПараметровКлиента.ТекстВопроса);
		
	КонецЕсли;
		
КонецПроцедуры

// Завершение обработки данных по коду.
//
// Параметры:
//  Форма - УправляемаяФорма - форма родитель.
//  СтруктураПараметровКлиента - Структура - параметры клиента.
//  ИмяТабличнойЧасти - Строка - имя табличной части.
//
Функция ЗавершитьОбработкуДанныхПоКодуКлиент(Форма, СтруктураПараметровКлиента, ИмяТабличнойЧасти = "Товары") Экспорт
	
	ИдентификаторСтроки = Неопределено;
	
	Если СтруктураПараметровКлиента.Свойство("АктивизироватьСтроку", ИдентификаторСтроки) Тогда
		
		Если ИдентификаторСтроки <> Неопределено Тогда
			Форма.ТекущийЭлемент = Форма.Элементы[ИмяТабличнойЧасти];
			Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = ИдентификаторСтроки;
			ЭлементУпаковок = Форма.Элементы.Найти(ИмяТабличнойЧасти + "КоличествоУпаковок");
			Если ЭлементУпаковок <> Неопределено Тогда
				Форма.Элементы[ИмяТабличнойЧасти].ТекущийЭлемент = ЭлементУпаковок;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

// Открывает форму создания номенклатуры с заполненными реквизитами.
//
// Параметры:
//  Результат - Структура - результат выполнения операции.
//  ДополнительныеПараметры - Структура - дополнительные параметры выполнения операции.
//
Процедура СоздатьНоменклатуру(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СозданиеНовогоШтрихКода", ДополнительныеПараметры);
		Если РаботаСПравиламиИменованияВызовСервера.ИспользоватьПравилаИменования() Тогда
			ОткрытьФорму("Справочник.Номенклатура.Форма.ПомощникНового",ПараметрыФормы);
		Иначе
			ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЭлемента", ПараметрыФормы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область Серии

// Добавляет серию в ТЧ СерииНоменклатуры
//
// Параметры:
//  Форма - УправляемаяФорма - форма родитель.
//  ДополнительныеПараметры - Структура - дополнительные параметры выполнения операции.
Процедура ЗаполнениеСерииНоменклатуры(Форма, ДополнительныеПараметры) Экспорт
	
	Объект = Форма.Объект;
	ТЧСерии = Объект[ДополнительныеПараметры.ИмяТЧСерии];
	
	СтрокаТЧСерии = ТЧСерии.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТЧСерии, ДополнительныеПараметры);
	
	Если СтрокаТЧСерии.Количество = 0 Тогда
		СтрокаТЧСерии.Количество = 1;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет номенклатуру в ТЧ СерииНоменклатуры
//
// Параметры:
//  Форма - УправляемаяФорма - форма родитель.
//  ДополнительныеПараметры - Структура - дополнительные параметры выполнения операции.
Процедура ЗаполнениеНоменклатурыИХарактеристики(Форма, ДополнительныеПараметры) Экспорт
	
	Объект   = Форма.Объект;
	ТЧТовары = Объект[ДополнительныеПараметры.ИмяТЧЭлементаВладельца];
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить(ДополнительныеПараметры.ИмяРеквизитаТЧНоменклатура  , ДополнительныеПараметры.Номенклатура);
	СтруктураПоиска.Вставить(ДополнительныеПараметры.ИмяРеквизитаТЧХарактеристика, ДополнительныеПараметры.Характеристика);
	
	СтрокиТовары = ТЧТовары.НайтиСтроки(СтруктураПоиска);
	Если СтрокиТовары.Количество() > 0 Тогда
		
		СтрокаИзменяемая = СтрокиТовары[0];
		КоличествоВТЧТовары = 0;
		Для каждого СтрокаТовары Из СтрокиТовары Цикл
			КоличествоВТЧТовары = КоличествоВТЧТовары + СтрокаТовары.Количество;
		КонецЦикла;
		
		ТЧСерии = Объект[ДополнительныеПараметры.ИмяТЧСерии];
		СтрокиСерии = ТЧСерии.НайтиСтроки(СтруктураПоиска);
		
		КоличествоВТЧСерии = 0;
		
		Для каждого СтрокаСерии Из СтрокиСерии Цикл
			КоличествоВТЧСерии = КоличествоВТЧСерии + СтрокаСерии.Количество;
		КонецЦикла;
		
		Идентификатор = СтрокаИзменяемая.ПолучитьИдентификатор();
		Если КоличествоВТЧТовары < КоличествоВТЧСерии Тогда
			СтрокаИзменяемая.Количество = СтрокаИзменяемая.Количество + (КоличествоВТЧСерии - КоличествоВТЧТовары);
			СтрокаИзменяемая.КоличествоУпаковок = СтрокаИзменяемая.Количество;
			ДобавитьДействииеСерииСоСтрокой(ДополнительныеПараметры, 
											Идентификатор,
											"ИзмененоКоличество");
		ИначеЕсли ДополнительныеПараметры.ИмяТЧСерии = ДополнительныеПараметры.ИмяТЧЭлементаВладельца Тогда
			СтрокаИзменяемая.Количество = 1;
			СтрокаИзменяемая.КоличествоУпаковок = СтрокаИзменяемая.Количество;
			ДобавитьДействииеСерииСоСтрокой(ДополнительныеПараметры, 
											Идентификатор,
											"ИзмененыНоменклатураХарактеристика");
			ДобавитьДействииеСерииСоСтрокой(ДополнительныеПараметры, 
											Идентификатор,
											"ИзмененоКоличество");
		КонецЕсли;
	Иначе
		СтрокаИзменяемая = ТЧТовары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаИзменяемая, ДополнительныеПараметры);
		Идентификатор = СтрокаИзменяемая.ПолучитьИдентификатор();
		ДобавитьДействииеСерииСоСтрокой(ДополнительныеПараметры, 
										Идентификатор,
										"ИзмененыНоменклатураХарактеристика");
		СтрокаИзменяемая.КоличествоУпаковок = СтрокаИзменяемая.Количество;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет при необходимости действие по строке
//
//  Параметры:
//   ДополнительныеПараметры - Структура - хранит параметры операций
//   Идентификатор - Число - идентификатор строки ТЧ Товары
//   ДействиеСерии - Строка - имя действия со строкой
//
Процедура ДобавитьДействииеСерииСоСтрокой(ДополнительныеПараметры, Идентификатор, ДействиеСерии) Экспорт
	
	Если ДополнительныеПараметры.Свойство("ИзмененныеСтроки") Тогда
		ИзмененныеСтроки = ДополнительныеПараметры.ИзмененныеСтроки;
	Иначе
		ИзмененныеСтроки = Новый Соответствие;
	КонецЕсли;
	
	ЗначениеСтроки = ИзмененныеСтроки.Получить(Идентификатор);
	Если ЗначениеСтроки = Неопределено Тогда
		ЗначениеСтроки = Новый Массив;
		ЗначениеСтроки.Добавить(ДействиеСерии);
	Иначе
		Если НЕ ЗначениеСтроки.Найти(ДействиеСерии) = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ЗначениеСтроки.Добавить(ДействиеСерии);
	КонецЕсли;
	
	ИзмененныеСтроки.Вставить(Идентификатор, ЗначениеСтроки);
	ДополнительныеПараметры.Вставить("ИзмененныеСтроки", ИзмененныеСтроки);
КонецПроцедуры

Процедура ЗапуститьОбработкуДействийСерий(Форма, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("ИзмененныеСтроки") Тогда
		ИзмененныеСтроки = ДополнительныеПараметры.ИзмененныеСтроки;
		Для каждого ИзмененнаяСтрока Из ИзмененныеСтроки Цикл
			
			МассивДействий = ИзмененнаяСтрока.Значение;
			Для каждого Действие Из МассивДействий Цикл
				Форма.ОбработатьИзменениеСтроки(ИзмененнаяСтрока.Ключ, Действие);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область RFID

// Проверяет необходим ли серверный вызов для обработки RFID.
//
// Параметры:
//  ДанныеМеток - Массив - данные меток RFID.
//  Форма - УправляемаяФорма - форма родитель.
//
// Возвращаемое значение:
//  Булево - признак необходимости серверного вызова.
//
Функция ДляОбработкиRFIDНуженСерверныйВызов(ДанныеМеток, Форма) Экспорт
	
	СчитывательRFID = Форма.СчитывательRFID;
	УникальныйИдентификатор = Форма.УникальныйИдентификатор;
	
	ЕстьЗаполненныйTID = Ложь;
	Для Каждого Метка Из ДанныеМеток Цикл
		
		// Если TID не считался, то нельзя считать чтение метки успешным
		Если ЗначениеЗаполнено(Метка.TID) Тогда
			ЕстьЗаполненныйTID = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьЗаполненныйTID Тогда
		
		ПараметрыОперацииСчитывателяRFID = ПараметрыОперацииСчитывателяRFID();
		ПараметрыОперацииСчитывателяRFID.ВыполненноеДействие = "ОбработкаСчитывания";
		ПараметрыОперацииСчитывателяRFID.Форма = Форма;
		ЗакрытьСессиюСчитывателяRFID(Неопределено, ПараметрыОперацииСчитывателяRFID);
			
		Возврат Истина;
		
	Иначе
		
		// Если нет корректно считанных меток, то ничего не делаем - ждем еще события от оборудования.
		// В следующем событии могут уже приехать корректные данные.
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

// Открывает сессию считывателя RFID.
//
// Параметры:
//  Форма - УправляемаяФорма - форма родитель.
//  СледующееДействие - Произвольный - следуюшее действие после открытия сессии.
//
Процедура ОткрытьСессиюСчитывателяRFID(Форма, СледующееДействие = Неопределено) Экспорт
	
	ОткрытаСессияСчитывателяRFID      = Форма.ОткрытаСессияСчитывателяRFID;
	УникальныйИдентификатор           = Форма.УникальныйИдентификатор;
	СчитывательRFID                   = Форма.СчитывательRFID;
	ПараметрыОперации = Новый Структура;
	
	Если Не ОткрытаСессияСчитывателяRFID Тогда
		ПараметрыОперацииСчитывателяRFID = ПараметрыОперацииСчитывателяRFID();
		
		ПараметрыОперацииСчитывателяRFID.ВыполненноеДействие = "ОткрытиеСессии";
		ПараметрыОперацииСчитывателяRFID.СледующееДействие = СледующееДействие;
		ПараметрыОперацииСчитывателяRFID.Форма = Форма;
		
		ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗавершениеОперацииСчитывателяRFID", ЭтотОбъект, ПараметрыОперацииСчитывателяRFID);
		МенеджерОборудованияКлиент.НачатьОткрытиеСессииСчитывателяRFID(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, СчитывательRFID);

	КонецЕсли;
	
КонецПроцедуры

// Записывает данные в RFID.
//
// Параметры:
//  Результат - Структура - результат выполнения операции.
//  ДополнительныеПараметры - Структура - дополнительные параметры выполнения операции.
//
Процедура ЗаписатьДанныеВRFID(Результат, Параметры) Экспорт
	
	Форма = Параметры.Форма;
	ДанныеСерии = Параметры.ДанныеСерии;
	
	УникальныйИдентификатор      = Форма.УникальныйИдентификатор;
	СчитывательRFID              = Форма.СчитывательRFID;
	НастройкиИспользованияСерий  = Форма.НастройкиИспользованияСерий;
	ОткрытаСессияСчитывателяRFID = Форма.ОткрытаСессияСчитывателяRFID;
	GTIN                         = Форма.GTIN;
	
	НужноЗаписатьМетку = Истина;
	
	Если ДанныеСерии = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Выберите строку, по которой нужно записать метку и положите соответствующую метку на устройство.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		НужноЗаписатьМетку = Ложь;
	ИначеЕсли Не ДанныеСерии.НужноЗаписатьМетку Тогда
		ТекстСообщения = НСтр("ru = 'По текущей строке не нужно записывать метку.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		НужноЗаписатьМетку = Ложь;
	ИначеЕсли НастройкиИспользованияСерий.ИспользоватьНомерКИЗГИСМСерии
		И Не ЗначениеЗаполнено(ДанныеСерии.НомерКИЗГИСМ) Тогда
		ТекстСообщения = НСтр("ru = 'Перед записью метки, укажите номер КиЗ.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		НужноЗаписатьМетку = Ложь;
	ИначеЕсли НастройкиИспользованияСерий.ИспользоватьНомерСерии
		И Не ЗначениеЗаполнено(ДанныеСерии.Номер) Тогда
		ТекстСообщения = НСтр("ru = 'Перед записью метки, укажите номер серии.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		НужноЗаписатьМетку = Ложь;
	ИначеЕсли НастройкиИспользованияСерий.ИспользоватьСрокГодностиСерии
		И Не ЗначениеЗаполнено(ДанныеСерии.ГоденДо) Тогда
		ТекстСообщения = НСтр("ru = 'Перед записью метки, укажите срок годности.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		НужноЗаписатьМетку = Ложь;
	КонецЕсли;	
	
	ПараметрыОперацииСчитывателяRFID = ПараметрыОперацииСчитывателяRFID();
	ПараметрыОперацииСчитывателяRFID.Форма = Форма;
	Если Не НужноЗаписатьМетку Тогда
		Если ОткрытаСессияСчитывателяRFID Тогда
			ЗакрытьСессиюСчитывателяRFID(Неопределено, ПараметрыОперацииСчитывателяRFID);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Не ОткрытаСессияСчитывателяRFID Тогда
		
		ТекущееДействие = Новый ОписаниеОповещения("ЗаписатьДанныеВRFID", ЭтотОбъект,
			Новый Структура("Форма,ДанныеСерии",Форма,ДанныеСерии));
		ОткрытьСессиюСчитывателяRFID(Форма, ТекущееДействие);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыЗаписи = МенеджерОборудованияКлиент.ПараметрыЗаписиМеткиRFID();
	ПараметрыЗаписи.TID = ДанныеСерии.RFIDTID;
	ПараметрыЗаписи.EPC = ДанныеСерии.RFIDEPC;
	ПараметрыЗаписи.БанкПамяти = "EPC";
	ПараметрыЗаписи.Данные = МенеджерОборудованияКлиентСервер.СформироватьДанныеSGTIN96(GTIN, ДанныеСерии.Номер, 1);
	
	ПараметрыОперацииСчитывателяRFID.ВыполненноеДействие = "ЗаписьRFID";
	ПараметрыОперацииСчитывателяRFID.СледующееДействие = Новый ОписаниеОповещения("ЗаписатьДанныеВRFIDЗавершение",
		ЭтотОбъект,Новый Структура("Форма,ДанныеСерии",Форма,ДанныеСерии));
	
	ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗавершениеОперацииСчитывателяRFID", ЭтотОбъект, ПараметрыОперацииСчитывателяRFID);
	МенеджерОборудованияКлиент.НачатьЗаписьДанныхВМеткуRFID(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, СчитывательRFID, ПараметрыЗаписи);
КонецПроцедуры

// Отрабатывает таймаут ожидания считывания метки.
//
// Параметры:
//  Форма - УправляемаяФорма - форма родитель.
//
Процедура ОтработатьТаймаутОжиданияСчитыванияМетки(Форма) Экспорт
	
	ТекстСообщения = НСтр("ru = 'Истекло время ожидания чтения RFID-метки. Поднесите RFID-метку к считывателю и повторите попытку.'");
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	ПараметрыОперацииСчитывателяRFID = ПараметрыОперацииСчитывателяRFID();
	ПараметрыОперацииСчитывателяRFID.ВыполненноеДействие = "ТаймуатОжиданияСчитывания";
	ПараметрыОперацииСчитывателяRFID.Форма = Форма;
	ЗакрытьСессиюСчитывателяRFID(Неопределено, ПараметрыОперацииСчитывателяRFID);
	
КонецПроцедуры

// Записывает данные в RFID завершение.
//
// Параметры:
//  Результат - Структура - результат выполнения операции.
//  ДополнительныеПараметры - Структура - дополнительные параметры выполнения операции.
//
Процедура ЗаписатьДанныеВRFIDЗавершение(Результат, Параметры) Экспорт
	
	ДанныеСерии = Параметры.ДанныеСерии;
	
	ПараметрыОперацииСчитывателяRFID = ПараметрыОперацииСчитывателяRFID();
	ПараметрыОперацииСчитывателяRFID.Форма = Параметры.Форма;
	ЗакрытьСессиюСчитывателяRFID(Неопределено, ПараметрыОперацииСчитывателяRFID);
	
	Если Результат.Результат Тогда
		ДанныеСерии.RFIDEPC = МенеджерОборудованияКлиентСервер.СформироватьДанныеSGTIN96(Параметры.Форма.GTIN, ДанныеСерии.Номер, 1);
		Оповестить("ЗаписьRFID_Серии", ДанныеСерии);
	КонецЕсли;
	
КонецПроцедуры

// Отключает оборудование.
//
// Параметры:
//  Результат - Структура - результат выполнения операции.
//  ДополнительныеПараметры - Структура - дополнительные параметры выполнения операции.
//
Процедура ОтключитьОборудование(Результат, Параметры) Экспорт
	
	Форма = Параметры.Форма;
	
	Если Не Форма.ОткрытаСессияСчитывателяRFID Тогда
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, Форма);
	Иначе
		ПараметрыОперацииСчитывателяRFID = ПараметрыОперацииСчитывателяRFID();
		ПараметрыОперацииСчитывателяRFID.Форма = Форма;
		ПараметрыОперацииСчитывателяRFID.СледующееДействие = Новый ОписаниеОповещения("ОтключитьОборудование", ЭтотОбъект, Новый Структура("Форма",Форма));
		
		ЗакрытьСессиюСчитывателяRFID(Неопределено, ПараметрыОперацииСчитывателяRFID);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область РМК

// Открывает форму ввода телефона для отправки через ОФД.
//
// Параметры:
//  ОбработчикОповещения - ОписаниеОповещения - оповещение обработки выполнения операции.
//  ПараметрыФормы - Структура - структура параметров формы.
//
Процедура ОткрытьФормуВводаТелефонаДляОтправкиЧерезОФД(ОбработчикОповещения, ПараметрыФормы) Экспорт
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВводаТелефон", ПараметрыФормы,,,,,ОбработчикОповещения,Режим); 
	
КонецПроцедуры

// Открывает форму ввода email для отправки через ОФД.
//
// Параметры:
//  ОбработчикОповещения - ОписаниеОповещения - оповещение обработки выполнения операции.
//  ПараметрыФормы - Структура - структура параметров формы.
//
Процедура ОткрытьФормуВводаEmailОтправкиЧерезОФД(ОбработчикОповещения, ПараметрыФормы) Экспорт
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВводаEmail", ПараметрыФормы,,,,,ОбработчикОповещения,Режим); 
	
КонецПроцедуры

// Преобразовывает телефон к пользовательскому виду.
//
// Параметры:
//  ВведенноеЧисло - Число - пользовательский телефон числом.
//  Телефон - Число - телефон числом.
//  ТелефонСтрокой - Строка - пользовательский телефон строкой.
// 
Процедура ПреобразоватьТелефонКПользовательскомуВиду(ВведенноеЧисло, Телефон, ТелефонСтрокой) Экспорт
	
	ВведенноеЧислоСтрокой = Формат(ВведенноеЧисло, "ЧГ=0");
	ВведенноеЧислоСтрокой = Лев(ВведенноеЧислоСтрокой, 10);
	Телефон = Число(ВведенноеЧислоСтрокой);
	Если СтрДлина(ВведенноеЧислоСтрокой) < 10 Тогда
		ВведенноеЧислоСтрокой = Формат(ВведенноеЧисло, "ЧЦ=10; ЧДЦ=; ЧВН=; ЧГ=0");
	КонецЕсли;
	
	ТелефонСтрокой = "+7(";
	ТелефонСтрокой = ТелефонСтрокой + Сред(ВведенноеЧислоСтрокой, 1, 3);
	ТелефонСтрокой = ТелефонСтрокой + ")";
	ТелефонСтрокой = ТелефонСтрокой + Сред(ВведенноеЧислоСтрокой, 4, 3);
	ТелефонСтрокой = ТелефонСтрокой + "-";
	ТелефонСтрокой = ТелефонСтрокой + Сред(ВведенноеЧислоСтрокой, 7, 2);
	ТелефонСтрокой = ТелефонСтрокой + "-";
	ТелефонСтрокой = ТелефонСтрокой + Сред(ВведенноеЧислоСтрокой, 9, 2);
	
КонецПроцедуры

// Преобразет телефон строку с маской "+7(999)999-99-99" в строку формата 9012345678
//
// Параметры:
//  ТелефонСтрока  - Строка - строка для преобразования
//
// Возвращаемое значение:
//   Строка   - строка вида 9012345678
//
Функция ПреобразоватьТелефонИзСтрокиМаски(Знач ТелефонСтрока) Экспорт
	
	ТелефонСтрока = Сред(ТелефонСтрока, 4, 3) 
		+ Сред(ТелефонСтрока, 8, 3) 
		+ Сред(ТелефонСтрока, 12, 2) 
		+ Сред(ТелефонСтрока, 15, 2);
		
	Возврат ТелефонСтрока
	
КонецФункции // ПреобразоватьТелефонИзСтрокиМаски()

#КонецОбласти

#Область ПроцедурыПоискаИОпределенияТиповШтрихкодов

// Возвращает тип штрихкода по значению.
//
// Параметры:
//  Штрихкод - Строка - штрихкод по которому определяется тип.
// 
// Возвращаемое значение:
//  ПланыВидовХарактеристик.ТипыШтрихкодов - тип штрихкода.
//
Функция ТипШтрихкода(Штрихкод) Экспорт
	
	ТипШтрихкодаРТ = ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихкодов.ПустаяСсылка");
	ТипШтрихкодаВрем = МенеджерОборудованияКлиентСервер.ОпределитьТипШтрихкода(Штрихкод);
	
	Если ТипШтрихкодаВрем = "EAN8" Тогда
		ТипШтрихкодаРТ = ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихкодов.EAN8");
	ИначеЕсли ТипШтрихкодаВрем = "EAN13" Тогда
		ТипШтрихкодаРТ = ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихкодов.EAN13");
	ИначеЕсли ТипШтрихкодаВрем = "EAN128" Тогда
		ТипШтрихкодаРТ = ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихкодов.EAN128");
	ИначеЕсли ТипШтрихкодаВрем = "CODE39" Тогда
		ТипШтрихкодаРТ = ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихкодов.CODE39");
	ИначеЕсли ТипШтрихкодаВрем = "CODE128" Тогда
		ТипШтрихкодаРТ = ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихкодов.CODE128");
	ИначеЕсли ТипШтрихкодаВрем = "ITF14" Тогда
		ТипШтрихкодаРТ = ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихкодов.ITF14");
	КонецЕсли;
	
	Возврат ТипШтрихкодаРТ;
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеФункцииИПроцедурыОбработкиСобытийПоискаПоШКМКИРаботыСТСД
// Формирует предопределенную структуру,
// Которая используется при поиске по ШК, магнитному коду и загрузке из ТСД.
// В том числе, и при ручном вводе позиций.
//
// Возвращаемое значение:
//  Структура - структура данных поиска.
//
Функция СтруктураДанныхПоиска() Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ЗначенияПоиска", Новый Массив);
	СтруктураПараметров.Вставить("НеизвестныеДанныеПО", Истина);
	СтруктураПараметров.Вставить("ДанныеПО", "");
	СтруктураПараметров.Вставить("ТипДанныхПО", "Штрихкод");
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Вставляет предупреждение о невозможности обработки карт.
//
// Параметры:
//  СтруктураРезультат - Структура - структура результата выполнения операции.
//  СтрокаРезультата - Структура - структура результата по которой вставляется предупреждение.
//
Процедура ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата) Экспорт
	
	ТипКарты = ?(СтрокаРезультата.ЭтоРегистрационнаяКарта,  НСтр("ru = 'регистрационная'"), НСтр("ru = 'дисконтная'"));
	ТиповКарт = ?(СтрокаРезультата.ЭтоРегистрационнаяКарта,  НСтр("ru = 'регистрационных'"), НСтр("ru = 'дисконтных'"));
	ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена %2 карта. Обработка %3 карт в данной форме не предусмотрена'");
	ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтруктураРезультат.ДанныеПО, ТипКарты, ТиповКарт);
	СтруктураРезультат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	
КонецПроцедуры

#КонецОбласти

// Сообщает пользователю текст предупреждения, если он присутствует.
//
// Параметры:
//  СтруктураПараметров - Структура - структура результата выполнения операции.
//
Процедура СообщитьТекстПредупреждения(СтруктураПараметров) Экспорт
	
	Если СтруктураПараметров.Свойство("ТекстПредупреждения") Тогда
		Для Каждого СтрокаПредупреждения Из СтруктураПараметров.ТекстПредупреждения Цикл
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаПредупреждения);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьНеобработанноеСобытие() Экспорт
	
	Возврат (глПодключаемоеОборудованиеСобытиеОбработано = Ложь);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//Возвращает структуру, которая затем обрабатывается процедурами заполнения ТЧ
//Параметры:
//  Штрихкод - штрихкод, который необходимо обработать
//  Количество - количество товаров с указанным штрихкодом
//
Функция СтруктураДанныхШтрихкода(Штрихкод, Количество) Экспорт

	Возврат Новый Структура("Штрихкод, Количество", Штрихкод, Количество);

КонецФункции

Процедура ПоказатьВводШтрихкодаЗавершение(Штрихкод, ДополнительныеПараметры) Экспорт
	
	ОповещениеУспешногоВвода = ДополнительныеПараметры.ОповещениеУспешногоВвода;
	Количество = ДополнительныеПараметры.Количество;
	
	Если (Штрихкод <> Неопределено) Тогда
		Если Не ПустаяСтрока(Штрихкод) Тогда
			Если Количество = Неопределено Тогда
				Количество = 1;
			КонецЕсли;
			ВыполнитьОбработкуОповещения(
				ОповещениеУспешногоВвода,
				СтруктураДанныхШтрихкода(Штрихкод, Количество));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытьСессиюСчитывателяRFID(Результат, ПараметрыОперацииСчитывателяRFID)
	
	СчитывательRFID = ПараметрыОперацииСчитывателяRFID.Форма.СчитывательRFID;
	УникальныйИдентификатор = ПараметрыОперацииСчитывателяRFID.Форма.УникальныйИдентификатор;
	ПараметрыОперации = Новый Структура;
	
	НовыеПараметрыОперацииСчитывателяRFID = ПараметрыОперацииСчитывателяRFID();
	НовыеПараметрыОперацииСчитывателяRFID.ВыполненноеДействие = "ЗакрытиеСессии";
	
	НовыеПараметрыОперацииСчитывателяRFID.Форма = ПараметрыОперацииСчитывателяRFID.Форма;
	Если ПараметрыОперацииСчитывателяRFID.СледующееДействие <> Неопределено Тогда
		НовыеПараметрыОперацииСчитывателяRFID.ВыполненноеДействие = "ЗакрытиеСессии";
		НовыеПараметрыОперацииСчитывателяRFID.СледующееДействие   = ПараметрыОперацииСчитывателяRFID.СледующееДействие;
	КонецЕсли;
	
	ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗавершениеОперацииСчитывателяRFID", ЭтотОбъект, НовыеПараметрыОперацииСчитывателяRFID);
	МенеджерОборудованияКлиент.НачатьЗакрытиеСессииСчитывателяRFID(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, СчитывательRFID);
	
КонецПроцедуры

Процедура ЗавершениеОперацииСчитывателяRFID(РезультатВыполнения, ПараметрыОперацииСчитывателяRFID) Экспорт

	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='Операция считывателя RFID завершилась с ошибкой:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ПараметрыОперацииСчитывателяRFID.Форма.ИдетЗаписьМетки = Ложь;
	ИначеЕсли ПараметрыОперацииСчитывателяRFID.ВыполненноеДействие = "ОткрытиеСессии" Тогда
		ПараметрыОперацииСчитывателяRFID.Форма.ОткрытаСессияСчитывателяRFID = Истина;
	ИначеЕсли ПараметрыОперацииСчитывателяRFID.ВыполненноеДействие = "ЗакрытиеСессии" Тогда
		ПараметрыОперацииСчитывателяRFID.Форма.ОткрытаСессияСчитывателяRFID = Ложь;
		ПараметрыОперацииСчитывателяRFID.Форма.ИдетЗаписьМетки = Ложь;
	КонецЕсли;

	Если ПараметрыОперацииСчитывателяRFID.СледующееДействие <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ПараметрыОперацииСчитывателяRFID.СледующееДействие, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыОперацииСчитывателяRFID()
	
	Результат = Новый Структура;
	Результат.Вставить("ВыполненноеДействие", "");
	Результат.Вставить("СледующееДействие");
	Результат.Вставить("Форма");
	
	Возврат Результат;
	
КонецФункции

Процедура ОтключитьОборудованиеRFID(Результат, Параметры) Экспорт
	
	Форма = Параметры.Форма;
	
	Если Не Форма.ОткрытаСессияСчитывателяRFID Тогда
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, Форма);
	Иначе
		ПараметрыОперацииСчитывателяRFID = ПараметрыОперацииСчитывателяRFID();
		ПараметрыОперацииСчитывателяRFID.Форма = Форма;
		ПараметрыОперацииСчитывателяRFID.СледующееДействие = Новый ОписаниеОповещения("ОтключитьОборудование", ЭтотОбъект, Новый Структура("Форма",Форма));
		
		ЗакрытьСессиюСчитывателяRFID(Неопределено, ПараметрыОперацииСчитывателяRFID);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПроверитьВходящиеДанные(Форма, ДанныеШтрихкода, ТекстОшибки, ЭтоМаркировка, ВидПродукции)
	
	НовыеДанныеШтрихкода = ИнтеграцияЕГАИСКлиентСервер.ОбработатьДанныеШтрихкода(ДанныеШтрихкода);
	
	РазделительGS1 = МенеджерОборудованияМаркировкаКлиентСервер.РазделительGS1();
	Если СтрНайти(НовыеДанныеШтрихкода.Штрихкод, РазделительGS1) > 0 Тогда 
		ЭкранированныйСимволGS1 = МенеджерОборудованияМаркировкаКлиентСервер.ЭкранированныйСимволGS1();
		НовыеДанныеШтрихкода.Штрихкод = СтрЗаменить(НовыеДанныеШтрихкода.Штрихкод, РазделительGS1, ЭкранированныйСимволGS1);
	КонецЕсли;
	
	СтруктураВидовПродукции = ПодключаемоеОборудованиеРТВызовСервера.МаркируемаяПродукция(НовыеДанныеШтрихкода.Штрихкод);
	ИмяФормы = Форма.ИмяФормы;
	
	//ИнтеграцияИСМПТК
	//СтруктураВидовПродукции.Это... = Истина, когда включен учет ТГ  сканируется КМ именно этой ТГ
	Если СтруктураВидовПродукции.ЭтоОбувь Тогда 
		ПроверитьОбувнойВидПродукции(ЭтоМаркировка, ИмяФормы, ТекстОшибки);
		ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная");
	ИначеЕсли СтруктураВидовПродукции.ЭтоАлкоголь Тогда 
		ПроверитьАлкогольныйВидПродукции(ЭтоМаркировка, ИмяФормы);
		ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная");
	ИначеЕсли СтруктураВидовПродукции.ЭтоТабак Тогда 
		ПроверитьТабачныйВидПродукции(ЭтоМаркировка, ИмяФормы, ТекстОшибки);
		ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная");
	ИначеЕсли СтруктураВидовПродукции.ЭтоФарма Тогда 
		ПроверитьЛекарственногоВидПродукции(ЭтоМаркировка, ИмяФормы, ТекстОшибки);
		ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты");
	КонецЕсли;
	//Конец ИнтеграцияИСМПТК
	
КонецПроцедуры 

Процедура ПроверитьАлкогольныйВидПродукции(ЭтоМаркировка, ИмяФормы)
	
	Если ИмяФормы = "Обработка.РМКУправляемыйРежим.Форма.Форма" 
		Или ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента" 
		Или ИмяФормы = "Документ.ПеремещениеТоваров.Форма.ФормаДокумента" 
		Или ИмяФормы = "Документ.РеализацияТоваров.Форма.ФормаДокумента" Тогда
		
		ЭтоМаркировка = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьТабачныйВидПродукции(ЭтоМаркировка, ИмяФормы, ТекстОшибки)
	
	//ИнтеграцияИСМПТК
	Если ОбщегоНазначенияРТВызовСервера.ФункциональнаяОпция("ВестиУчетМаркируемогоТабакаИСМПТК") Тогда
		РозничноеВыбытиеИСМПТККлиентПереопределяемый.ПроверитьТабачныйВидПродукции(ЭтоМаркировка, ИмяФормы, ТекстОшибки);
	КонецЕсли;
	Возврат;
	//Конец ИнтеграцияИСМПТК
		
	Если ИмяФормы = "Обработка.РМКУправляемыйРежим.Форма.Форма" 
		Или ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента" 
		Или ИмяФормы = "Документ.ВозвратТоваровОтПокупателя.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ВозвратТоваровПоставщику.Форма.ФормаДокумента" Тогда
		
		ЭтоМаркировка = Истина;
		
	ИначеЕсли ИмяФормы = "Документ.РеализацияТоваров.Форма.ФормаДокумента" Тогда
		
		ЭтоМаркировка = Истина;
		ТекстОшибки = НСтр("ru = 'Реализацию табачной продукции следует оформлять в документе ""Чек ККМ"".'");
		
	ИначеЕсли ИмяФормы = "Документ.ПеремещениеТоваров.Форма.ФормаДокумента" Тогда
		
		ЭтоМаркировка = Истина;
		ТекстОшибки = НСтр("ru = 'Перемещение табачной продукции следует оформлять в документе ""Чек ККМ"".'");
		
	ИначеЕсли ИмяФормы = "Документ.ПоступлениеТоваров.Форма.ФормаДокумента" Тогда
		
		ЭтоМаркировка = Истина;
		ТекстОшибки = НСтр("ru = 'Сканирование табачной продукции следует выполнять в форме проверки и подбора.'");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьОбувнойВидПродукции(ЭтоМаркировка, ИмяФормы, ТекстОшибки)
	
	//ИнтеграцияИСМПТК
	Если ОбщегоНазначенияРТВызовСервера.ФункциональнаяОпция("ВестиУчетМаркируемойОбувиИСМПТК") Тогда
		РозничноеВыбытиеИСМПТККлиентПереопределяемый.ПроверитьОбувнойВидПродукции(ЭтоМаркировка, ИмяФормы, ТекстОшибки);
	КонецЕсли;
	Возврат;
	//Конец ИнтеграцияИСМПТК
	
	Если ИмяФормы = "Обработка.РМКУправляемыйРежим.Форма.Форма" 
		Или ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента" 
		Или ИмяФормы = "Документ.ВозвратТоваровОтПокупателя.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ВозвратТоваровПоставщику.Форма.ФормаДокумента" Тогда
		
		ЭтоМаркировка = Истина;
		
	ИначеЕсли ИмяФормы = "Документ.РеализацияТоваров.Форма.ФормаДокумента" Тогда
		
		ЭтоМаркировка = Истина;
		ТекстОшибки = НСтр("ru = 'Реализацию обувной продукции следует оформлять в документе ""Чек ККМ"".'");
		
	ИначеЕсли ИмяФормы = "Документ.ПеремещениеТоваров.Форма.ФормаДокумента" Тогда
		
		ЭтоМаркировка = Истина;
		ТекстОшибки = НСтр("ru = 'Перемещение обувной продукции следует оформлять в документе ""Чек ККМ"".'");
		
	ИначеЕсли ИмяФормы = "Документ.ПоступлениеТоваров.Форма.ФормаДокумента" Тогда
		
		ЭтоМаркировка = Истина;
		ТекстОшибки = НСтр("ru = 'Сканирование обувной продукции следует выполнять в форме проверки и подбора.'");
		
	ИначеЕсли ИмяФормы = "Документ.СборкаТоваров.Форма.ФормаДокумента" Тогда
		
		ЭтоМаркировка = Истина;
		
		Если ОбщегоНазначенияРТВызовСервера.ФункциональнаяОпция("ВестиУчетОбувнойПродукцииИСМП") Тогда
			ТекстОшибки = НСтр("ru = 'Сканирование обувной продукции в документ ""Сборка товаров"" не предусмотрено.'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВидПродукцииИСМП(ЭтоМаркировка, ИмяФормы, ТекстОшибки)
	
	Если ИмяФормы = "Обработка.РМКУправляемыйРежим.Форма.Форма" 
		Или ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента" 
		Или ИмяФормы = "Документ.ВозвратТоваровОтПокупателя.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ВозвратТоваровПоставщику.Форма.ФормаДокумента" Тогда
		
		ЭтоМаркировка = Истина;
		
	ИначеЕсли ИмяФормы = "Документ.РеализацияТоваров.Форма.ФормаДокумента" Тогда
		
		ЭтоМаркировка = Истина;
		ТекстОшибки = НСтр("ru = 'Реализацию маркированной продукции следует оформлять в документе ""Чек ККМ"".'");
		
	ИначеЕсли ИмяФормы = "Документ.ПеремещениеТоваров.Форма.ФормаДокумента" Тогда
		
		ЭтоМаркировка = Истина;
		ТекстОшибки = НСтр("ru = 'Перемещение маркированной продукции следует оформлять в документе ""Чек ККМ"".'");
		
	ИначеЕсли ИмяФормы = "Документ.ПоступлениеТоваров.Форма.ФормаДокумента" Тогда
		
		ЭтоМаркировка = Истина;
		ТекстОшибки = НСтр("ru = 'Сканирование маркированной продукции следует выполнять в форме проверки и подбора.'");
		
	ИначеЕсли ИмяФормы = "Документ.СборкаТоваров.Форма.ФормаДокумента" Тогда
		
		ЭтоМаркировка = Истина;
		ТекстОшибки = НСтр("ru = 'Сканирование маркированной продукции в документ ""Сборка товаров"" не предусмотрено.'");
		
	КонецЕсли;
	
КонецПроцедуры

//ИнтеграцияИСМПТК
Процедура ПроверитьЛекарственногоВидПродукции(ЭтоМаркировка, ИмяФормы, ТекстОшибки)
	
	Если ОбщегоНазначенияРТВызовСервера.ФункциональнаяОпция("ВестиУчетМаркируемыхЛекарствИСМПТК") Тогда
		РозничноеВыбытиеИСМПТККлиентПереопределяемый.ПроверитьЛекарственногоВидПродукции(ЭтоМаркировка, ИмяФормы, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры
//Конец ИнтеграцияИСМПТК

Процедура ОбработатьОшибочноеСканирование(Форма, ТекстОшибки, Штрихкод, ВидПродукции)
	
	СтруктураОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного(ВидПродукции);
	СтруктураОткрытияФормы.ТекстОшибки = ТекстОшибки;
	СтруктураОткрытияФормы.Штрихкод    = Штрихкод;
	
	ШтрихкодированиеИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(Форма, СтруктураОткрытияФормы);
	
	//ИнтеграцияИСМПТК
	//Маркировка учитываемых в РК товарных групп проверяется отдельно:
	РозничноеВыбытиеИСМПТККлиент.ОткрытьФормуНевозможностиДобавленияОтсканированногоИСМПТК(Форма, СтруктураОткрытияФормы);
	//Конец ИнтеграцияИСМПТК
	
КонецПроцедуры

// Обрабатывает получение штрихкода от сканера штрихкодов.
//
// Параметры:
//  Штрихкод - Строка - полученный штрихкод со сканера.
//  Форма - УправляемаяФорма - форма родитель на которой осуществлялось сканирование штрихкода.
//  СтруктураРезультат - Структура.
//
// Возвращаемое значение:
//  Структура - данные штрихкода.
//
Функция ПолученШтрихкодИзСШК(Форма, СтруктураРезультат) Экспорт
	
	НайденоОбъектов = СтруктураРезультат.ЗначенияПоиска.Количество();
	
	Если НайденоОбъектов = 1 Тогда
		Если НЕ СтруктураРезультат.Свойство("ПовторАкцизнойМарки") Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеОбработатьДанныеПоКоду", Форма);
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, СтруктураРезультат);
		КонецЕсли;
	ИначеЕсли НайденоОбъектов > 1 Тогда
		Если НЕ СтруктураРезультат.Свойство("ИспользоватьНовыйАлгоритмПоискаПоШтрихкоду") Тогда
			ПодключаемоеОборудованиеРТВызовСервера.ПодготовитьДанныеДляВыбора(СтруктураРезультат);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Обработка получения магнитного кода с оборудования.
//
// Параметры: 
//  МагнитныйКод - Строка - магнитный код строкой.
//  Форма - - УправляемаяФорма - форма, в которой определен обработчик действия "ПолученыШтрихкоды".
//
// Возвращаемое значение:
//  Структура - структура магнитного кода.
//
Функция ПолученМагнитныйКод(Форма, СтруктураРезультат) Экспорт
	
	НайденоОбъектов = СтруктураРезультат.ЗначенияПоиска.Количество();
	Если НайденоОбъектов = 1 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеОбработатьДанныеПоКоду", Форма);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, СтруктураРезультат);
	ИначеЕсли НайденоОбъектов > 1 Тогда
		ПодключаемоеОборудованиеРТВызовСервера.ПодготовитьДанныеДляВыбора(СтруктураРезультат);
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Добавляет номенклатуру по серийному номеру.
//
// Параметры:
//  Форма - УправляемаяФорма - форма для добавления серийных номеров.
//  СтруктураНомера - Структура - структура номера.
//
// Возвращаемое значение:
//  УникальныйИдентификатор - уникальный идентификатор строка.
//
Функция ДобавитьНоменклатуруПоСерийномуНомеру(Форма, СтруктураНомера) Экспорт 
	
	СтруктураНоменклатуры = Новый Структура;
	СтруктураНоменклатуры.Вставить("ДанныеПО", СтруктураНомера.ДанныеПО);
	СтруктураНоменклатуры.Вставить("Штрихкод", СтруктураНомера.Штрихкод);
	СтруктураНоменклатуры.Вставить("МагнитныйКод", СтруктураНомера.МагнитныйКод);
	СтруктураНоменклатуры.Вставить("Номенклатура", СтруктураНомера.Номенклатура);
	СтруктураНоменклатуры.Вставить("Характеристика", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	СтруктураНоменклатуры.Вставить("Упаковка", ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка"));
	СтруктураНоменклатуры.Вставить("ТипШтрихкода", ПредопределенноеЗначение("ПланВидовХарактеристик.ТипыШтрихкодов.ПустаяСсылка"));
	СтруктураНоменклатуры.Вставить("ШтрихкодУпаковкиЕГАИС", ПредопределенноеЗначение("Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка"));
	
	Количество = 1;
	Если СтруктураНомера.Свойство("Количество") Тогда
		Количество = СтруктураНомера.Количество;
	КонецЕсли;
	СтруктураНоменклатуры.Вставить("Количество", Количество);
	СтруктураНоменклатуры.Вставить("ДобавитьКоличество", Количество);
	
	Если СтруктураНомера.Свойство("ОбновитьКоличество") Тогда
		СтруктураНоменклатуры.Вставить("ОбновитьКоличество");
	КонецЕсли;
	
	ИдентификаторСтроки = Неопределено;
	ОписаниеОповещение = Новый ОписаниеОповещения("ДобавитьНайденныеПозицииТоваров", Форма, СтруктураНоменклатуры);
	ВыполнитьОбработкуОповещения(ОписаниеОповещение, ИдентификаторСтроки);
	
	Если СтруктураНоменклатуры.Свойство("ТекстПредупреждения") Тогда
		СтруктураНомера.Вставить("ТекстПредупреждения", СтруктураНоменклатуры.ТекстПредупреждения);
	КонецЕсли;
	
	Если СтруктураНоменклатуры.Свойство("ВывестиИнформациюРМКУправляемый") Тогда
		СтруктураНомера.Вставить("ВывестиИнформациюРМКУправляемый", СтруктураНоменклатуры.ВывестиИнформациюРМКУправляемый);
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

// Добавляет номенклатуру по серийному номеру.
//
// Параметры:
//  Форма - УправляемаяФорма - форма для добавления серийных номеров.
//  СтруктураРезультат - Структура параметров добавления.
//  СтруктураИменФормы - Структура:
//    ИмяТЧЭлементаВладельца       - Строка - Имя ТЧ владелецев серий.
//    ИмяРеквизитаТЧНоменклатура   - Строка - Имя реквизита ТЧ, хранящей номенклатуру - ИмяТЧЭлементаВладельца
//    ИмяРеквизитаТЧХарактеристика - Строка - Имя реквизита ТЧ, хранящей характеристику - ИмяТЧЭлементаВладельца
//    ИмяТЧСерии                   - Строка - Имя ТЧ серии
//
Процедура ДобавитьНайденныеВТЧСерииНоменклатуры(Форма, 
												СтруктураРезультат, 
												СтруктураИменФормы = Неопределено) Экспорт
												
Перем ИспользоватьХарактеристики;
	
	ИмяТЧЭлементаВладельца       = "Товары"; 
	ИмяРеквизитаТЧНоменклатура   = "Номенклатура";
	ИмяРеквизитаТЧХарактеристика = "Характеристика";
	ИмяТЧСерии                   = "Серии";
	Если НЕ СтруктураИменФормы = Неопределено Тогда
		Если СтруктураИменФормы.Свойство("ИмяТЧЭлементаВладельца") Тогда
			ИмяТЧЭлементаВладельца = СтруктураИменФормы.ИмяТЧЭлементаВладельца;
		КонецЕсли;
		
		Если СтруктураИменФормы.Свойство("ИмяРеквизитаТЧНоменклатура") Тогда
			ИмяРеквизитаТЧНоменклатура = СтруктураИменФормы.ИмяРеквизитаТЧНоменклатура;
		КонецЕсли;
		
		Если СтруктураИменФормы.Свойство("ИмяРеквизитаТЧХарактеристика") Тогда
			ИмяРеквизитаТЧХарактеристика = СтруктураИменФормы.ИмяРеквизитаТЧХарактеристика;
		КонецЕсли;
		
		Если СтруктураИменФормы.Свойство("ИмяТЧСерии") Тогда
			ИмяТЧСерии = СтруктураИменФормы.ИмяТЧСерии;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(СтруктураРезультат);
	ДополнительныеПараметры.Вставить("ИмяТЧЭлементаВладельца"      , ИмяТЧЭлементаВладельца);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаТЧНоменклатура"  , ИмяРеквизитаТЧНоменклатура);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаТЧХарактеристика", ИмяРеквизитаТЧХарактеристика);
	ДополнительныеПараметры.Вставить("ИмяТЧСерии"                  , ИмяТЧСерии);
	
	Если СтруктураРезультат.Свойство("ИспользоватьХарактеристики", ИспользоватьХарактеристики)
		И ИспользоватьХарактеристики Тогда
		// открываем выбор характеристик номенклатуры
		ПараметрыФормы = Новый Структура;
		Попытка
			Элемент = Форма.Элементы[ИмяТЧЭлементаВладельца];
			ТекущиеДанные = Элемент.ТекущиеДанные;
			Если ТекущиеДанные[ИмяРеквизитаТЧНоменклатура] = СтруктураРезультат.Номенклатура Тогда
				Характеристика = ТекущиеДанные[ИмяРеквизитаТЧХарактеристика];
			Иначе
				Характеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
			КонецЕсли;
		Исключение
			Характеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
		КонецПопытки;
		ПараметрыФормы.Вставить("ТекущийЭлемент"  , Характеристика);
		ПараметрыФормы.Вставить("ПараметрВладелец", СтруктураРезультат.ВладелецХарактеристики);
		ПараметрыФормы.Вставить("Номенклатура"    , СтруктураРезультат.Номенклатура);
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОбработатьСериюНоменклатурыПослеВыбораХарактеристики", Форма, ДополнительныеПараметры);
		
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора", ПараметрыФормы, Форма,,,, ОбработчикОповещения, Режим);
	Иначе
		ДополнительныеПараметры.Вставить("Характеристика", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
		ПодключаемоеОборудованиеРТКлиент.ЗаполнениеСерииНоменклатуры(Форма, ДополнительныеПараметры);
		ПодключаемоеОборудованиеРТКлиент.ЗаполнениеНоменклатурыИХарактеристики(Форма, ДополнительныеПараметры);
		ПодключаемоеОборудованиеРТКлиент.ЗапуститьОбработкуДействийСерий(Форма, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Если не находит серийный номер в ТЧ,
// то добавляет строку номенклатуры
// и добавляет к ней серийный номер.
//
// Параметры:
//  Форма - УправляемаяФорма - форма для добавления серийных номеров.
//  СтруктураНомера - Структура - структура номера.
//
// Возвращаемое значение:
//  УникальныйИдентификатор - уникальный идентификатор строка.
//
Функция ДобавитьНайденныеСерийныеНомера(Форма, СтруктураНомера) Экспорт 
	
	ИдентификаторСтроки = Неопределено;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("СерийныйНомер", СтруктураНомера.СерийныйНомер);
	СтрокиСертификата = Форма.Объект.СерийныеНомера.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиСертификата.Количество() > 0 Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Номер подарочного сертификата ""%1"" уже присутствует в документе.'")
							  + Символы.ПС + НСтр("ru = 'Повторный ввод данных не требуется.'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ТекстПредупреждения,
								СтруктураНомера.СерийныйНомер);
		СтруктураНомера.Вставить("ТекстПредупреждения", ТекстПредупреждения);
		
		СтруктураПоискаТовара = Новый Структура;
		СтруктураПоискаТовара.Вставить("КлючСвязиСерийныхНомеров", СтрокиСертификата[0].КлючСвязиСерийныхНомеров);
		СтрокиТоваров = Форма.Объект.Товары.НайтиСтроки(СтруктураПоискаТовара);
		
		Если СтрокиТоваров.Количество() > 0 Тогда
			ИдентификаторСтроки = СтрокиТоваров[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	Иначе
		
		Если СтруктураНомера.Свойство("Количество") Тогда
			СтруктураНомера.Количество = 1;
		КонецЕсли;
		ИдентификаторСтроки = ДобавитьНоменклатуруПоСерийномуНомеру(Форма, СтруктураНомера);
		Если ИдентификаторСтроки <> Неопределено Тогда
			
			ТекущаяСтрока = Форма.Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
			
			Если ТекущаяСтрока.КлючСвязиСерийныхНомеров = 0 Тогда
				ДобавляемыеНомера = Новый Массив;
				ДобавляемыеНомера.Добавить(СтруктураНомера.СерийныйНомер);
				
				ТекущаяСтрока.КлючСвязиСерийныхНомеров = ОбработкаТабличнойЧастиТоварыКлиент.ДобавитьСерийныеНомераВТабличнуюЧасть(
					Форма.Объект.СерийныеНомера, 
					ДобавляемыеНомера, 
					0);
			Иначе
				НоваяСтрока = Форма.Объект.СерийныеНомера.Добавить();
				НоваяСтрока.СерийныйНомер = СтруктураНомера.СерийныйНомер;
				НоваяСтрока.КлючСвязиСерийныхНомеров = ТекущаяСтрока.КлючСвязиСерийныхНомеров;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

// Обрабатывает данные по номенклатуре из ТСД
//
// Параметры:
//  Форма - УправляемаяФорма - форма на которой необходимо обработать данные по номенклатуре.
//  СтруктураПараметров - Структура - структура параметров обработки данных.
//
// Возвращаемое значение:
//  Булево - результат выполнения операции.
// 
Функция ОбработатьДанныеПоНоменклатуреИзТСДКлиент(Форма, СтруктураПараметров) Экспорт
	
	МассивПослеСвертки = ПодключаемоеОборудованиеРТВызовСервера.СвернутьДанныеПоНоменклатуреИзТСДСервер(СтруктураПараметров);
	ОбновитьКоличество = СтруктураПараметров.ОбновитьКоличество;
	ИдентификаторСтроки= Неопределено;
	
	Для Каждого СтрокаМассива Из МассивПослеСвертки Цикл
	
		СтрокаМассива.Вставить("ЗагрузкаИзТСД", Истина);
		Если ОбновитьКоличество Тогда
			СтрокаМассива.Вставить("ОбновитьКоличество", Истина);
		КонецЕсли;
		
		Если СтрокаМассива.Свойство("ТекстПредупреждения") Тогда
			Если СтруктураПараметров.Свойство("ТекстПредупреждения") Тогда
				СтруктураПараметров.ТекстПредупреждения.Добавить(СтрокаМассива.ТекстПредупреждения);
			Иначе
				МассивПредупреждений = Новый Массив;
				МассивПредупреждений.Добавить(СтрокаМассива.ТекстПредупреждения);
				СтруктураПараметров.Вставить("ТекстПредупреждения", МассивПредупреждений);
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаМассива.Свойство("СерийныйНомер") Тогда
			ОписаниеОповещение = Новый ОписаниеОповещения("ДобавитьНайденныеСерийныеНомера", Форма, СтрокаМассива);
			ВыполнитьОбработкуОповещения(ОписаниеОповещение, ИдентификаторСтроки);
		ИначеЕсли СтрокаМассива.Свойство("Карта") Тогда
			ТипКарты = ?(СтрокаМассива.ЭтоРегистрационнаяКарта,  НСтр("ru = 'регистрационная'"), НСтр("ru = 'дисконтная'"));
			ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена %2 карта. Обработка карт в данной форме при загрузке из ТСД не предусмотрена'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтрокаМассива.Штрихкод, ТипКарты);
			СтрокаМассива.Вставить("ТекстПредупреждения", ТекстПредупреждения);
		Иначе
			ОписаниеОповещение = Новый ОписаниеОповещения("ДобавитьНайденныеПозицииТоваров", Форма, СтрокаМассива);
			ВыполнитьОбработкуОповещения(ОписаниеОповещение, ИдентификаторСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Обрабатывает данные по сертификатам из ТСД
//
// Параметры:
//  Форма - УправляемаяФорма - форма на которой необходимо обработать данные по номенклатуре.
//  СтруктураПараметров - Структура - структура параметров обработки данных.
//
// Возвращаемое значение:
//  Булево - результат выполнения операции.
//
Функция ОбработатьДанныеПоСертификатамИзТСДКлиент(Форма, СтруктураПараметров) Экспорт
	
	МассивДанных = СтруктураПараметров.ЗначенияПоиска;
	ОбновитьКоличество = СтруктураПараметров.ОбновитьКоличество;
	
	Для Каждого СтрокаМассива Из МассивДанных Цикл
		
		Если ОбновитьКоличество Тогда
			СтрокаМассива.Вставить("ОбновитьКоличество", Истина);
		КонецЕсли;
		
		Если СтрокаМассива.Свойство("ТекстПредупреждения") Тогда
			Если СтруктураПараметров.Свойство("ТекстПредупреждения") Тогда
				СтруктураПараметров.ТекстПредупреждения.Добавить(СтрокаМассива.ТекстПредупреждения);
			Иначе
				МассивПредупреждений = Новый Массив;
				МассивПредупреждений.Добавить(СтрокаМассива.ТекстПредупреждения);
				СтруктураПараметров.Вставить("ТекстПредупреждения", МассивПредупреждений);
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаМассива.Свойство("СерийныйНомер") Тогда
			
			ИдентификаторСтроки = Неопределено;
			ОписаниеОповещение = Новый ОписаниеОповещения("ДобавитьНайденныеСерийныеНомера", Форма, СтрокаМассива);
			ВыполнитьОбработкуОповещения(ОписаниеОповещение, ИдентификаторСтроки);
			
		ИначеЕсли СтрокаМассива.Свойство("Карта") Тогда
			
			ТипКарты = ?(СтрокаМассива.ЭтоРегистрационнаяКарта,  НСтр("ru = 'регистрационная'"), НСтр("ru = 'дисконтная'"));
			ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена %2 карта. Обработка карт в данной форме при загрузке из ТСД не предусмотрена'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтрокаМассива.Штрихкод, ТипКарты);
			СтрокаМассива.Вставить("ТекстПредупреждения", ТекстПредупреждения);
			
		Иначе
			
			ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена номенклатура. Обработка номенклатуры в данной форме при загрузке из ТСД не предусмотрена'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтрокаМассива.Штрихкод, ТипКарты);
			СтрокаМассива.Вставить("ТекстПредупреждения", ТекстПредупреждения);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Обрабатывает данные по дисконтным картам из ТСД
//
// Параметры:
//  Форма - УправляемаяФорма - форма на которой необходимо обработать данные по номенклатуре.
//  СтруктураПараметров - Структура - структура параметров обработки данных.
//
// Возвращаемое значение:
//  Булево - результат выполнения операции.
//
Функция ОбработатьДанныеПоДисконтнымКартамИзТСДКлиент(Форма, СтруктураПараметров) Экспорт
	
	МассивДанных = СтруктураПараметров.ЗначенияПоиска;
	ОбновитьКоличество = СтруктураПараметров.ОбновитьКоличество;
	
	Для Каждого СтрокаМассива Из МассивДанных Цикл
		
		Если ОбновитьКоличество Тогда
			СтрокаМассива.Вставить("ОбновитьКоличество", Истина);
		КонецЕсли;
		
		Если СтрокаМассива.Свойство("ТекстПредупреждения") Тогда
			Если СтруктураПараметров.Свойство("ТекстПредупреждения") Тогда
				СтруктураПараметров.ТекстПредупреждения.Добавить(СтрокаМассива.ТекстПредупреждения);
			Иначе
				МассивПредупреждений = Новый Массив;
				МассивПредупреждений.Добавить(СтрокаМассива.ТекстПредупреждения);
				СтруктураПараметров.Вставить("ТекстПредупреждения", МассивПредупреждений);
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаМассива.Свойство("СерийныйНомер") Тогда
			
			ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найден номер подарочного сертификата. Обработка сертификатов в данной форме при загрузке из ТСД не предусмотрена'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтрокаМассива.Штрихкод);
			СтрокаМассива.Вставить("ТекстПредупреждения", ТекстПредупреждения);
			
		ИначеЕсли СтрокаМассива.Свойство("Карта") Тогда
			
			Если СтрокаМассива.ЭтоРегистрационнаяКарта Тогда
				ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена регистрационная карта. Обработка регистрационных карт в данной форме при загрузке из ТСД не предусмотрена'");
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтрокаМассива.Штрихкод);
				СтрокаМассива.Вставить("ТекстПредупреждения", ТекстПредупреждения);
			Иначе
				ИдентификаторСтроки = Неопределено;
				ОписаниеОповещение = Новый ОписаниеОповещения("ДобавитьНайденнуюКарту", Форма, СтрокаМассива);
				ВыполнитьОбработкуОповещения(ОписаниеОповещение, ИдентификаторСтроки);
			КонецЕсли;
			
		Иначе
			
			ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена номенклатура. Обработка номенклатуры в данной форме при загрузке из ТСД не предусмотрена'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтрокаМассива.Штрихкод);
			СтрокаМассива.Вставить("ТекстПредупреждения", ТекстПредупреждения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Устанавливает контрагента по дисконтной карте.
//
// Параметры:
//  Форма - УправляемаяФорма - форма на которой выполняется операция.
//  СтруктураРезультат - Структура - структура результата выполнения операции.
//  СтрокаРезультата - Структура - структура результата по которой вставляется предупреждение.
//
Процедура УстановитьКонтрагентаПоДисконтнойКарте(Форма, СтруктураРезультат, СтрокаРезультата) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаРезультата.ВладелецКарты)
		И ТипЗнч(СтрокаРезультата.ВладелецКарты) = Тип("СправочникСсылка.Контрагенты") Тогда
		Форма.Объект.Контрагент = СтрокаРезультата.ВладелецКарты;
		Форма.Модифицированность = Истина;
	Иначе
		ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена дисконтная карта, не связанная с контрагентом.'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтруктураРезультат.ДанныеПО);
		СтруктураРезультат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеСопоставленияНеизвестныхШтрихкодов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЗарегистрированныеШтрихкоды.Количество() > 0 Тогда
		
		//ИнтеграцияИСМПТК_РозничноеВыбытие
		Если ОбщегоНазначенияИСМПТКВызовСервера.ПроверитьЗначениеОбщейФОМаркировки()
			И РозничноеВыбытиеИСМПТКВызовСервера.ЕстьПравоЧтенияОбработкаРозничноеВыбытиеИСМПТК() Тогда
			ДопПараметры = Новый Структура();
			ДопПараметры.Вставить("РегистрацияНовогоШтрихкода", Истина);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеПоискаПоШтрихкоду", ДополнительныеПараметры.Форма, ДопПараметры);
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеПоискаПоШтрихкоду", ДополнительныеПараметры.Форма);
		КонецЕсли;
		//Конец ИнтеграцияИСМПТК_РозничноеВыбытие
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат.ЗарегистрированныеШтрихкоды[0].Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

//ИнтеграцияИСМПТК_РозничноеВыбытие
Процедура ИгнорируяСопоставленияНеизвестныхШтрихкодов(Штрихкод, Форма) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеПоискаПоШтрихкоду", Форма);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Штрихкод);
		
КонецПроцедуры
//Конец ИнтеграцияИСМПТК_РозничноеВыбытие

#КонецОбласти