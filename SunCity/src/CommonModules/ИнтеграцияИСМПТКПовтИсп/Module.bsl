
#Область СлужебныеПроцедурыИФункции

// Возвращает объект "ЗащищенноеСоединениеOpenSSL"
// 
Функция ЗащищенноеСоединение() Экспорт
	
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(,);
	
	Возврат ЗащищенноеСоединение;
	
КонецФункции

#КонецОбласти

#Область ПолучитьПустуюСтруктуруДокументаИСМПТ

Функция ПолучитьПустуюСтруктуруДокументаИСМПТ_Общая(ТипДокументаИСМПТ, ДопПараметры = Неопределено) Экспорт
	
	СтруктураДокумента = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = "Организация," 
	+ "Поставщик," 
	+ "ПоставщикНаименование,"
	+ "ПоставщикИдентификационныйНомер,"
	+ "ДокументОснование,";
	                                                                             
	Если Не ТипДокументаИСМПТ = Тип("ДокументСсылка.УведомлениеОВводеВОборотИСМПТК")
		И Не ТипДокументаИСМПТ = Тип("ДокументСсылка.УведомлениеОВыводеИзОборотаИСМПТК") Тогда
		
		СписокОбязательныхКолонок = СписокОбязательныхКолонок 
		+ "Контрагент," 
		+ "Получатель,"
		+ "ПолучательНаименование,"
		+ "ПолучательИдентификационныйНомер,";
	КонецЕсли;
	
	СтруктураДокумента.Вставить("Реквизиты", ИнтеграцияИСМПТКВызовСервера.ПолучитьТаблицуПараметров(СписокОбязательныхКолонок));
	
	// Подготовка таблицы Товары
	СписокОбязательныхКолонок = 
	"Организация,"
	+ "ДокументОснование,"
	+ "Номенклатура,"
	+ "ЕдиницаИзмерения,"
	+ "Характеристика,"
	+ "ВидПродукции,"
	+ "КоличествоИсточник";
	
	СтруктураДокумента.Вставить("Товары", ИнтеграцияИСМПТКВызовСервера.ПолучитьТаблицуПараметров(СписокОбязательныхКолонок));
	
	Если ТипДокументаИСМПТ = Тип("ДокументСсылка.АктПриемаПередачиИСМПТК") 
		Или ТипДокументаИСМПТ = Тип("ДокументСсылка.УведомлениеОРасхожденииИСМПТК") 
		Или ТипДокументаИСМПТ = Тип("ДокументСсылка.УведомлениеОВыводеИзОборотаИСМПТК") Тогда
		СписокОбязательныхКолонок = 
		"Организация,"
		+ "ДокументОснование,"
		+ "КодМаркировки,"
		+ "ВидУпаковки,"
		+ "Количество,"
		+ "GTIN,"
		+ "Номенклатура,"
		+ "КоличествоИсточник,"
		+ "EAN,"
		+ "КодИдентификации,"
		+ "ВидПродукции,"
		+ "GTINВерхнегоУровня";
	КонецЕсли;
	
	СтруктураДокумента.Вставить("Марки", ИнтеграцияИСМПТКВызовСервера.ПолучитьТаблицуПараметров(СписокОбязательныхКолонок));
	
	Возврат СтруктураДокумента;
	
КонецФункции

Функция ПолучитьПустуюСтруктуруДокументаАППКорректировочныйИУОР() Экспорт
	
	СтруктураДокумента = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = "Организация," 
	+ "Поставщик," 
	+ "ПоставщикНаименование,"
	+ "ПоставщикИдентификационныйНомер,"
	+ "ДокументОснование,"
	+ "Контрагент," 
	+ "Получатель,"
	+ "ПолучательНаименование,"
	+ "ПолучательИдентификационныйНомер,";
		
	СтруктураДокумента.Вставить("Реквизиты", ИнтеграцияИСМПТКВызовСервера.ПолучитьТаблицуПараметров(СписокОбязательныхКолонок));
	
	СписокОбязательныхКолонок = 
	"Организация,"
	+ "ДокументОснование,"
	+ "КодМаркировки,"
	+ "ВидУпаковки,"
	+ "Количество,"
	+ "GTIN,"
	+ "Номенклатура,"
	+ "КоличествоИсточник,"
	+ "EAN,"
	+ "КодИдентификации,"
	+ "СтатусСверкиКода,"
	+ "ВидПродукции,"
	+ "GTINВерхнегоУровня";
	
	СтруктураДокумента.Вставить("Марки", ИнтеграцияИСМПТКВызовСервера.ПолучитьТаблицуПараметров(СписокОбязательныхКолонок));
	
	Возврат СтруктураДокумента;
	
КонецФункции

Функция ПолучитьПустуюСтруктуруДокументаУведомлениеОПриемке() Экспорт
	
	СтруктураДокумента = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = "Организация," 
	+ "Поставщик," 
	+ "ПоставщикНаименование,"
	+ "ПоставщикИдентификационныйНомер,"
	+ "ДокументОснование,"
	+ "Контрагент," 
	+ "Получатель,"
	+ "ПолучательНаименование,"
	+ "ПолучательИдентификационныйНомер,"
	+ "ИдентификаторДокументаОтгрузки,"
	+ "НомерПервичногоДокумента,"
	+ "ДатаПервичногоДокумента,"
	+ "СтранаОтправления,";
	
	СтруктураДокумента.Вставить("Реквизиты", ИнтеграцияИСМПТКВызовСервера.ПолучитьТаблицуПараметров(СписокОбязательныхКолонок));
	
	СписокОбязательныхКолонок = 
	"Организация,"
	+ "ДокументОснование,"
	+ "ВидУпаковки,"
	+ "Номенклатура,"
	+ "EAN,"
	+ "КодИдентификации,"
	+ "ВидПродукции,"
	+ "GTINВерхнегоУровня";
	
	СтруктураДокумента.Вставить("Марки", ИнтеграцияИСМПТКВызовСервера.ПолучитьТаблицуПараметров(СписокОбязательныхКолонок));
	
	Возврат СтруктураДокумента;
	
КонецФункции

Функция ПолучитьПустуюСтруктуруДокументаУведомлениеОВвозеЕАЭС() Экспорт
	
	СтруктураДокумента = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = "Организация," 
	+ "Контрагент,"
	+ "Поставщик," 
	+ "ПоставщикНаименование,"
	+ "ПоставщикИдентификационныйНомер,"
	+ "ДокументОснование,"
	+ "Получатель,"
	+ "ПолучательНаименование,"
	+ "ПолучательИдентификационныйНомер,"
	+ "ИдентификаторДокументаОтгрузки,"
	+ "НомерПервичногоДокумента,"
	+ "ДатаПервичногоДокумента,"
	+ "СтранаОтправления,"
	+ "ДатаУплатыАкциза,"
	+ "НомерКвитанцииАкциза,"
	+ "СуммаАкциза,";
	
	СтруктураДокумента.Вставить("Реквизиты", ИнтеграцияИСМПТКВызовСервера.ПолучитьТаблицуПараметров(СписокОбязательныхКолонок));
	
	СписокОбязательныхКолонок = 
	"Организация,"
	+ "ДокументОснование,"
	+ "ВидУпаковки,"
	+ "Номенклатура,"
	+ "КоличествоИсточник,"
	+ "Количество,"
	+ "EAN,"
	+ "GTIN,"
	+ "КодИдентификации,"
	+ "КодМаркировки,"
	+ "ВидПродукции,"
	+ "GTINВерхнегоУровня";
	
	СтруктураДокумента.Вставить("Марки", ИнтеграцияИСМПТКВызовСервера.ПолучитьТаблицуПараметров(СписокОбязательныхКолонок));
	
	Возврат СтруктураДокумента;
	
КонецФункции

Функция ПолучитьПустуюСтруктуруДокументаИСМПТПриРазбитииНаЧасти(ИмяДокумента) Экспорт
	
	СтруктураДокумента = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = 
	"Организация,"
	+ "Направление,"
	+ "Статус,"
	+ "Состояние,"
	+ "ТоварнаяГруппа,"	
	+ "Автор,"
	+ "ДокументОснование,"
	+ "Дата,";
	
	Если Не ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСМПТК() Тогда
		СписокОбязательныхКолонок = СписокОбязательныхКолонок
	    + "Поставщик," 
		+ "ПоставщикНаименование,"
		+ "ПоставщикИдентификационныйНомер,";
	КонецЕсли;
	
	Если Не ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСМПТК()
		И Не ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСМПТК() Тогда
		СписокОбязательныхКолонок = СписокОбязательныхКолонок
		+ "Получатель,"
		+ "ПолучательНаименование,"
		+ "ПолучательИдентификационныйНомер,";
	КонецЕсли;
		
	Если ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаАктПриемаПередачиИСМПТК() Тогда 
		СписокОбязательныхКолонок = СписокОбязательныхКолонок
		+ "Контрагент," 
		+ "ВидОперации,"	
		+ "ТипАкта,"	
		+ "ЭтоКорректировка," 
		+ "ИдентификаторАПППервичный,"
		+ "ИдентификаторАППИсправленный,"
		+ "РегистрационныйНомерСвязанногоАкта,"
		+ "РегНомерНаБумажномНосителе,"
		+ "ДатаВыпискиНаБумажномНосителе,";		
				
	ИначеЕсли ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВводеВОборотИСМПТК() Тогда 
		СписокОбязательныхКолонок = СписокОбязательныхКолонок
		+ "ПричинаВводаВОборот,";
		
	ИначеЕсли ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВыводеИзОборотаИСМПТК() Тогда 
		СписокОбязательныхКолонок = СписокОбязательныхКолонок
		+ "ПричинаВыводаИзОборота,";
		
	ИначеЕсли ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСМПТК() Тогда 
		СписокОбязательныхКолонок = СписокОбязательныхКолонок
		+ "Контрагент," 
		+ "ВидОперации,"	
		+ "ТипУведомления,"	
		+ "ЭтоКорректировка," 
		+ "РегистрационныйНомерСвязанногоУведомления,"
		+ "ДатаСвязанногоУведомления,"
		+ "ИдентификаторВвозПервичный,"
		+ "ИдентификаторВвозИсправленный,"
		+ "РегНомерНаБумажномНосителе,"
		+ "ДатаВыпискиНаБумажномНосителе,"
		+ "НомерКвитанцииАкциза,"
		+ "СуммаАкциза,"
		+ "ДатаУплатыАкциза,"
		+ "СтранаОтправления,";

	ИначеЕсли ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСМПТК() Тогда 
		СписокОбязательныхКолонок = СписокОбязательныхКолонок
		+ "СтранаОтправления," 
		+ "РегНомерНаБумажномНосителе,"
		+ "ДатаВыпискиНаБумажномНосителе,"
		+ "ТипДокументаТаможенногоОформления,"
		+ "НомерДокументаТаможенногоОформления,"
		+ "ДатаДокументаТаможенногоОформления,"
		+ "КодТаможенногоОргана,"
		+ "КодРешенияТаможенногоОргана,"
		+ "ДатаВремяПринятияРешения,";

	ИначеЕсли ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОбЭкспортеЕАЭСИСМПТК() Тогда 
		СписокОбязательныхКолонок = СписокОбязательныхКолонок 
		+ "Контрагент," 
		+ "СтранаПолучатель," 
		+ "НомерДокументаТрансграна,"
		+ "ДатаДокументаТрансграна,"
		+ "ДатаВремяОтгрузки,";

	КонецЕсли;
	
	СтруктураДокумента.Вставить("Реквизиты", ИнтеграцияИСМПТКВызовСервера.ПолучитьТаблицуПараметров(СписокОбязательныхКолонок));
	
	// Подготовка таблицы Марки
	СписокОбязательныхКолонок = 
	"КодМаркировки,"
	+ "ВидУпаковки,"
	+ "Количество,"
	+ "GTIN,"
	+ "Номенклатура,"
	+ "EAN,"
	+ "КодИдентификации,"
	+ "ВидПродукции,"
	+ "GTINВерхнегоУровня";
	СтруктураДокумента.Вставить("Марки", ИнтеграцияИСМПТКВызовСервера.ПолучитьТаблицуПараметров(СписокОбязательныхКолонок));

	// Подготовка таблицы Докум.Соответствия
	Если ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзТретьихСтранИСМПТК()
		ИЛИ ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОВвозеИзЕАЭСИСМПТК()
		ИЛИ ИмяДокумента = ОбщегоНазначенияИСМПТКВызовСервера.ИмяДокументаУведомлениеОбЭкспортеЕАЭСИСМПТК() Тогда 
		СписокОбязательныхКолонок = 
		"ТипДокумента,"
		+ "ДатаДокумента,"
		+ "НомерДокумента";
		СтруктураДокумента.Вставить("ДокументыСоответствия", ИнтеграцияИСМПТКВызовСервера.ПолучитьТаблицуПараметров(СписокОбязательныхКолонок));
	КонецЕсли;
		
	Возврат СтруктураДокумента;
	
КонецФункции

#КонецОбласти

#Область ПолучитьПустуюСтруктуруДокументаСУЗ

Функция ПолучитьПустуюСтруктуруДокументаСУЗ(ТипДокументаИСМПТ, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.ЗаказКодовМаркировкиСУЗИСМПТК") Тогда
		
		Возврат ПолучитьПустуюСтруктуруДокументаЗаказКодов();
		
	ИначеЕсли ТипЗнч(ТипДокументаИСМПТ) = Тип("ДокументСсылка.НанесениеКодовМаркировкиСУЗИСМПТК") Тогда
		
		Возврат ПолучитьПустуюСтруктуруДокументаНанесениеКодов();
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПустуюСтруктуруДокументаЗаказКодов() Экспорт
	
	СтруктураДокумента = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = "Организация," 
	+ "ВидПродукции," 
	+ "Ответственный," 
	+ "ДокументОснование," 
	+ "СпособВводаВОборот,"
	;
	
	СтруктураДокумента.Вставить("Реквизиты", ИнтеграцияИСМПТКВызовСервера.ПолучитьТаблицуПараметров(СписокОбязательныхКолонок));
	
	// Подготовка таблицы Товары
	СписокОбязательныхКолонок = 
	"Организация,"
	+ "ДокументОснование," 
	+ "Номенклатура,"
	+ "Характеристика,"
	+ "Упаковка,"
	+ "КоличествоУпаковок,"
	+ "Количество,"
	+ "GTIN,"
	+ "ЕдиницаИзмеренияБазовая";
	
	СтруктураДокумента.Вставить("Товары", ИнтеграцияИСМПТКВызовСервера.ПолучитьТаблицуПараметров(СписокОбязательныхКолонок));
		
	Возврат СтруктураДокумента;
	
КонецФункции	

Функция ПолучитьПустуюСтруктуруДокументаЗаказКодовПриРазбитииНаЧасти() Экспорт
	
	СтруктураДокумента = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = "Организация," 
	+ "ИдентификаторПроизводственногоЗаказа,"
	+ "ИдентификаторПроизводства,"
	+ "СтранаПроизводителя,"
	+ "ИдентификаторПроизводственнойЛинии,"
	+ "ОписаниеПродукта,"
	+ "КодПродукта,"
	+ "СпособВводаВОборот," 
	+ "Комментарий," 
	+ "Ответственный," 
	+ "КонтактноеЛицо," 
	+ "СпособИзготовленияСИ," 
	+ "Статус," 
	+ "ДокументОснование," 
	+ "ВыполненоНанесениеКМ,"
	+ "НомерПакета,"
	+ "Дата,"
	+ "ВидПродукции,"
	+ "ЗаказРодитель,"
	;
	
	СтруктураДокумента.Вставить("Реквизиты", ИнтеграцияИСМПТКВызовСервера.ПолучитьТаблицуПараметров(СписокОбязательныхКолонок));
	
	// Подготовка таблицы Товары
	СписокОбязательныхКолонок = 
	"Организация,"
	+ "ДокументОснование," 
	+ "Номенклатура,"
	+ "Характеристика,"
	+ "Упаковка,"
	+ "GTIN,"
	+ "Количество,"
	+ "КоличествоУпаковок,"
	+ "Шаблон,"
	+ "СпособФормированияСерийногоНомера,"
	+ "СтатусУказанияСерии,"
	+ "СпособВводаВОборот";
	
	СтруктураДокумента.Вставить("Товары", ИнтеграцияИСМПТКВызовСервера.ПолучитьТаблицуПараметров(СписокОбязательныхКолонок));
		
	Возврат СтруктураДокумента;
	
КонецФункции

Функция ПолучитьПустуюСтруктуруДокументаНанесениеКодов() Экспорт
	
	СтруктураДокумента = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = "Организация," 
	+ "ВидПродукции," 
	+ "Ответственный," 
	+ "ИдентификаторПроизводственнойЛинии," 
	+ "ДокументОснование," 
	;
	
	СтруктураДокумента.Вставить("Реквизиты", ИнтеграцияИСМПТКВызовСервера.ПолучитьТаблицуПараметров(СписокОбязательныхКолонок));
	
	// Подготовка таблицы Товары
	СписокОбязательныхКолонок = 
	"Организация,"
	+ "ДокументОснование," 
	+ "Номенклатура,"
	+ "Характеристика,"
	+ "GTIN,"
	+ "КодМаркировки,"
	+ "КодИдентификации";
	
	СтруктураДокумента.Вставить("Товары", ИнтеграцияИСМПТКВызовСервера.ПолучитьТаблицуПараметров(СписокОбязательныхКолонок));
		
	Возврат СтруктураДокумента;
	
КонецФункции
      
#КонецОбласти

#Область  ПолучитьПустуюСтруктуруДокументаИСЦЭДМ

Функция ПолучитьПустуюСтруктуруДокументаИСЦЭДМ_Общая(ТипДокументаИСЦЭДМ, ДопПараметры = Неопределено) Экспорт
	
	СтруктураДокумента = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = "Организация," 
	+ "Склад," 
	+ "Поставщик," 
	+ "ПоставщикНаименование,"
	+ "ПоставщикИдентификационныйНомер,"
	+ "ДокументОснование,";
	
	Если Не ТипДокументаИСЦЭДМ = Тип("ДокументСсылка.УведомлениеОВводеВОборотИСЦЭДМ")
		И Не ТипДокументаИСЦЭДМ = Тип("ДокументСсылка.УведомлениеОВыводеИзОборотаИСЦЭДМ") Тогда
		
		СписокОбязательныхКолонок = СписокОбязательныхКолонок 
		+ "Контрагент," 
		+ "Получатель,"
		+ "ПолучательНаименование,"
		+ "ПолучательИдентификационныйНомер,";
	КонецЕсли;
	
	СтруктураДокумента.Вставить("Реквизиты", ИнтеграцияИСМПТКВызовСервера.ПолучитьТаблицуПараметров(СписокОбязательныхКолонок));
	
	// Подготовка таблицы Товары
	СписокОбязательныхКолонок = 
	"Организация,"
	+ "ДокументОснование,"
	+ "Номенклатура,"
	+ "ЕдиницаИзмерения,"
	+ "ВидПродукции,"
	+ "КоличествоИсточник";
	
	СтруктураДокумента.Вставить("Товары", ИнтеграцияИСМПТКВызовСервера.ПолучитьТаблицуПараметров(СписокОбязательныхКолонок));
	
	Если ТипДокументаИСЦЭДМ = Тип("ДокументСсылка.АктПриемаПередачиИСЦЭДМ") Тогда
		СписокОбязательныхКолонок = 
		"Организация,"
		+ "ДокументОснование,"
		+ "Номенклатура,"
		+ "Цена,"
		+ "Количество";
	КонецЕсли;
	
	СтруктураДокумента.Вставить("Итоги", ИнтеграцияИСМПТКВызовСервера.ПолучитьТаблицуПараметров(СписокОбязательныхКолонок));
	
	Возврат СтруктураДокумента;
	
КонецФункции

Функция ПолучитьПустуюСтруктуруДокументаИСЦЭДМ_Перемещение(ТипДокументаИСЦЭДМ, ДопПараметры = Неопределено) Экспорт
	
	СтруктураДокумента = Новый Структура;
	
	// Подготовка таблицы шапки документа
	СписокОбязательныхКолонок = "Организация," 
	+ "ОрганизацияНаименование," 
	+ "ОрганизацияИдентификационныйНомер," 
	+ "СкладОтправитель," 
	+ "СкладПолучатель," 
	+ "ДокументОснование,";
	
	СтруктураДокумента.Вставить("Реквизиты", ИнтеграцияИСМПТКВызовСервера.ПолучитьТаблицуПараметров(СписокОбязательныхКолонок));
	
	// Подготовка таблицы Товары
	СписокОбязательныхКолонок = 
	"Организация,"
	+ "ДокументОснование,"
	+ "Номенклатура,"
	+ "ЕдиницаИзмерения,"
	+ "ВидПродукции,"
	+ "КоличествоИсточник";
	
	СтруктураДокумента.Вставить("Товары", ИнтеграцияИСМПТКВызовСервера.ПолучитьТаблицуПараметров(СписокОбязательныхКолонок));

	Возврат СтруктураДокумента;
	
КонецФункции

Функция ПолучитьДанныеПрофиляДоступаКЭДО(Организация, Пользователь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОбщегоНазначенияИСМПТКПереопределяемый.СформироватьВТПоОрганизацииСОтбором(Организация, Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрофилиДоступаИСЦЭДМ.ИмяАутентификацииИСЦЭДМ КАК ИмяАутентификацииИСЦЭДМ,
	|	ПрофилиДоступаИСЦЭДМ.ПарольАутентификацииИСЦЭДМ КАК ПарольАутентификацииИСЦЭДМ,
	|	ПрофилиДоступаИСЦЭДМ.ИИНЭЦПФизическогоЛица КАК ИИНЭЦПФизическогоЛица
	|ИЗ
	|	ВТОрганизации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрофилиДоступаИСЦЭДМ КАК ПрофилиДоступаИСЦЭДМ
	|		ПО ПрофилиДоступаИСЦЭДМ.Организация = Организации.Ссылка
	|ГДЕ
	|	ПрофилиДоступаИСЦЭДМ.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Новый Структура("ИмяАутентификацииИСЦЭДМ, ПарольАутентификацииИСЦЭДМ, Организация, ИИНЭЦПФизическогоЛица", Выборка.ИмяАутентификацииИСЦЭДМ, Выборка.ПарольАутентификацииИСЦЭДМ, Организация, Выборка.ИИНЭЦПФизическогоЛица);
		
	Иначе 
		
		Возврат Неопределено;
		
	КонецЕсли; 
	
КонецФункции

#КонецОбласти
