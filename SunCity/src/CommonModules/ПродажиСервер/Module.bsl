////////////////////////////////////////////////////////////////////////////////
// ПродажиСервер содержит процедуры и функции для обработки действий пользователя
// в процессе работы с документами продажи.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПроцедурыФормированияДвиженийПоПродажам

// Процедура записи движений в регистр Продажи.
//
// Параметры:
//  ДополнительныеСвойства - Структура - структура дополнительных свойств для формирования движений.
//  Движения - Движения - движения документа для отражения в регистре "Расчеты с поставщиками".
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	Движения.Продажи.Записывать = Истина;
	Движения.Продажи.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура записи движений в регистр ПродажиПоДисконтнымКартам.
//
// Параметры:
//  ТаблицаПопыткиПродажПревышающихОстаток - ТаблицаЗначений - таблица попыток продаж превышающих остаток.
//  ДатаПродажи - Дата - дата попыток продажи.
//
Процедура ОтразитьПопыткиПродаж(ТаблицаПопыткиПродажПревышающихОстаток, ДатаПродажи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ПопыткиПродажПревышающихОстаток");
		ЭлементБлокировкиДанных.УстановитьЗначение("ДатаПродажи", ДатаПродажи);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		Запрос = Новый Запрос();
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПопыткиПродажПревышающихОстаток.ДатаПродажи КАК ДатаПродажи,
		|	ПопыткиПродажПревышающихОстаток.Склад,
		|	ПопыткиПродажПревышающихОстаток.Номенклатура,
		|	ПопыткиПродажПревышающихОстаток.Характеристика
		|ПОМЕСТИТЬ ТаблицаЗаписей
		|ИЗ
		|	РегистрСведений.ПопыткиПродажПревышающихОстаток КАК ПопыткиПродажПревышающихОстаток
		|ГДЕ
		|	ПопыткиПродажПревышающихОстаток.ДатаПродажи = &ДатаПродажи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНовыхЗаписей.ДатаПродажи КАК ДатаПродажи,
		|	ТаблицаНовыхЗаписей.Склад,
		|	ТаблицаНовыхЗаписей.Номенклатура,
		|	ТаблицаНовыхЗаписей.Характеристика
		|ПОМЕСТИТЬ ТаблицаНовыхЗаписей
		|ИЗ
		|	&ТаблицаНовыхЗаписей КАК ТаблицаНовыхЗаписей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗаписей.ДатаПродажи КАК ДатаПродажи,
		|	ТаблицаЗаписей.Склад,
		|	ТаблицаЗаписей.Номенклатура,
		|	ТаблицаЗаписей.Характеристика
		|ПОМЕСТИТЬ ВсеЗаписи
		|ИЗ
		|	ТаблицаЗаписей КАК ТаблицаЗаписей
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаНовыхЗаписей.ДатаПродажи,
		|	ТаблицаНовыхЗаписей.Склад,
		|	ТаблицаНовыхЗаписей.Номенклатура,
		|	ТаблицаНовыхЗаписей.Характеристика
		|ИЗ
		|	ТаблицаНовыхЗаписей КАК ТаблицаНовыхЗаписей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВсеЗаписи.ДатаПродажи,
		|	ВсеЗаписи.Склад,
		|	ВсеЗаписи.Номенклатура,
		|	ВсеЗаписи.Характеристика
		|ИЗ
		|	ВсеЗаписи КАК ВсеЗаписи";
		
		Запрос.УстановитьПараметр("ДатаПродажи"        , НачалоДня(ДатаПродажи));
		Запрос.УстановитьПараметр("ТаблицаНовыхЗаписей", ТаблицаПопыткиПродажПревышающихОстаток);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
		
		НаборЗаписей = РегистрыСведений.ПопыткиПродажПревышающихОстаток.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДатаПродажи.Установить(НачалоДня(ДатаПродажи));
		
		НаборЗаписей.Загрузить(ТаблицаЗапроса);
		НаборЗаписей.Записать(Истина);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибки'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Процедура записи движений в регистр ЗаказыПокупателей.
//
// Параметры:
//  ДополнительныеСвойства - Структура - структура дополнительных свойств для формирования движений.
//  Движения - Движения - движения документа для отражения в регистре "Расчеты с поставщиками".
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьЗаказыПокупателей(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаказыПокупателей;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	Движения.ЗаказыПокупателей.Записывать = Истина;
	Движения.ЗаказыПокупателей.Загрузить(Таблица);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФормированияДвиженийПоПродажамПоДисконтнымКартам

// Процедура записи движений в регистр ПродажиПоДисконтнымКартам.
//
// Параметры:
//  ДополнительныеСвойства - Структура - структура дополнительных свойств для формирования движений.
//  Движения - Движения - движения документа для отражения в регистре "Расчеты с поставщиками".
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьПродажиПоДисконтнымКартам(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажиПоДисконтнымКартам;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	Движения.ПродажиПоДисконтнымКартам.Записывать = Истина;
	Движения.ПродажиПоДисконтнымКартам.Загрузить(Таблица);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФормированияДвиженийПоПродажамПоПлатежнымКартам

// Процедура записи движений в регистр ПродажиПоПлатежнымКартам.
//
// Параметры:
//  ДополнительныеСвойства - Структура - структура дополнительных свойств для формирования движений.
//  Движения - Движения - движения документа для отражения в регистре "Расчеты с поставщиками".
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьПродажиПоПлатежнымКартам(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажиПоПлатежнымКартам;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	Движения.ПродажиПоПлатежнымКартам.Записывать = Истина;
	Движения.ПродажиПоПлатежнымКартам.Загрузить(Таблица);
	
КонецПроцедуры

#КонецОбласти

#Область РМК

// Получение текущей настройки РМК по имени компьютера.
//
// Параметры:
//  ИмяКомпьютера - Строка - имя комьютера строкой.
//
Функция ТекущаяНастройкаРМКСервер(ИмяКомпьютера) Экспорт
	
	НастройкаРМК = Справочники.НастройкиРМК.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрСведенийНастройкаРМК.НастройкаРМК КАК НастройкаРМК
	|ИЗ
	|	РегистрСведений.НастройкаРМКНаКомпьютере КАК РегистрСведенийНастройкаРМК
	|ГДЕ
	|	РегистрСведенийНастройкаРМК.Компьютер = &Компьютер";
	
	Запрос.УстановитьПараметр("Компьютер", ИмяКомпьютера);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		НастройкаРМК = Выборка.НастройкаРМК;
	КонецЕсли;
	
	Возврат НастройкаРМК;
	
КонецФункции

// Проверка возможности оплаты по выбранному типу.
//
// Параметры:
//  ТипОплаты - ПеречислениеСсылка.ТипыОплатЧекаККМ - тип оплаты чека ккм.
// 
// Возвращаемое значение:
//  Булево - возможность оплаты указанным типом оплаты.
//
Функция ЕстьВозможностьОплатыПоТипуОплаты(ТипОплаты) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыОплатЧекаККМ.Ссылка КАК ВидОплаты
	|ИЗ
	|	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
	|ГДЕ
	|	НЕ ВидыОплатЧекаККМ.ЭтоГруппа
	|	И НЕ ВидыОплатЧекаККМ.ПометкаУдаления
	|	И ВидыОплатЧекаККМ.ТипОплаты = &ТипОплаты";
	
	Запрос.УстановитьПараметр("ТипОплаты", ТипОплаты);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();

КонецФункции // ЕстьВозможностьОплатыПоТипуОплаты()

// Проверка возможности оплаты платежной картой.
//
// Параметры:
//  МассивКассККМ - Массив - массив касс ккм для проверки возможности оплаты.
//
// Возвращаемое значение:
//  Булево - возможность оплаты платежной картой.
//
Функция ЕстьВозможностьОплатыПлатежнойКартой(МассивКассККМ, ТолькоТерминалыСПрямымПодключением = Ложь) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекВызовСервера.ИспользоватьПодключаемоеОборудование();
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭквайринговыеТерминалы.Ссылка КАК ЭквайринговыйТерминал
		|ИЗ
		|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
		|ГДЕ
		|	ЭквайринговыеТерминалы.Касса В(&МассивКассККМ)
		|	И НЕ ЭквайринговыеТерминалы.ПометкаУдаления
		|	И НЕ ЭквайринговыеТерминалы.НеДействителен
		|	И ВЫБОР
		|			КОГДА &ТолькоТерминалыСПрямымПодключением = ИСТИНА
		|				ТОГДА НЕ ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
		
		Запрос.УстановитьПараметр("МассивКассККМ", МассивКассККМ);
		Запрос.УстановитьПараметр("ТолькоТерминалыСПрямымПодключением", ТолькоТерминалыСПрямымПодключением);
		
		Результат = Запрос.Выполнить();
		
		Возврат НЕ Результат.Пустой();
	Иначе
		Возврат ЕстьВозможностьОплатыПоТипуОплаты(Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта)
	КонецЕсли;
	
КонецФункции // ЕстьВозможностьОплатыПлатежнойКартой()

// Проверка возможности оплаты банковским кредитом.
//
// Возвращаемое значение:
//  Булево - возможность оплаты банковским кредитом.
//
Функция ЕстьВозможностьОплатыБанковскимКредитом() Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОплатуБанковскимиКредитами") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЕстьВозможностьОплатыПоТипуОплаты(Перечисления.ТипыОплатЧекаККМ.БанковскийКредит)
	
КонецФункции // ЕстьВозможностьОплатыПлатежнойКартой()

// Проверка возможности оплаты в рассрочку.
//
// Возвращаемое значение:
//  Булево - возможность оплаты в рассрочку.
//
Функция ЕстьВозможностьОплатыВРассрочку() Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРасчетыСКлиентами") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЕстьВозможностьОплатыПоТипуОплаты(Перечисления.ТипыОплатЧекаККМ.ВРассрочку)
	
КонецФункции // ЕстьВозможностьОплатыПлатежнойКартой()

// Проверка возвратов товаров в рассрочку.
//
// Параметры:
//  ВидОперации - Перечисления.ВидыОперацийЧекККМ - вид операции.
//  ЧекККМПродажа - Документ.ЧекККМ - чек ККМ по которому проверяется возврат.
//  
// Возвращаемое значение:
//  Булево - признак возврата товаров в рассрочку.
//
Функция ВозвращаютсяТоварыВРассрочку(ВидОперации, ЧекККМПродажа) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРасчетыСКлиентами")
		И НЕ ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЧекККМОплата.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка = &Ссылка
	|	И ЧекККМОплата.ВидОплаты.ТипОплаты = &ТипОплаты";
	
	Запрос.УстановитьПараметр("Ссылка"   , ЧекККМПродажа);
	Запрос.УстановитьПараметр("ТипОплаты", Перечисления.ТипыОплатЧекаККМ.ВРассрочку);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции // ЕстьВозможностьОплатыПлатежнойКартой()

// Возвращает максимальное количество кнопок в конфигураторе.
//
// Возвращаемое значение:
//  Число - максимальное количество кнопок в конфигураторе.
//
Функция МаксимальноеКоличествоКнопокВКонфигураторе() Экспорт
	
	Возврат 12;
	
КонецФункции

#КонецОбласти

#Область ЗаказыПокупателей

// Уточняет состояние заказа покупателя с учетов оплаты на сайте.
//
// Параметры:
//  ЗаказПокупателя - ДокументСсылка.ЗаказПокупателя - заказ покупателя для проверки состояния.
//  СостояниеЗаказа - Строка.
//
Процедура ОбновитьСостояниеЗаказа(ЗаказПокупателя, СостояниеЗаказа, СостояниеОплатыЗаказа, СостояниеДоставкиЗаказа) Экспорт
	
	СостояниеЗаказа = "";
	
	СостояниеЗаказа = Строка(ОбменССайтомРТ.ПоследнееСостояниеОплатыЗаказаПокупателя(ЗаказПокупателя));
	СостояниеОплатыЗаказа = СостояниеЗаказа;
	ПоследнееСостояниеДоставкиЗаказаПокупателя = ОбменССайтомРТ.ПоследнееСостояниеДоставкиЗаказаПокупателя(ЗаказПокупателя);
	
	Если ЗначениеЗаполнено(СостояниеЗаказа)
		И ЗначениеЗаполнено(ПоследнееСостояниеДоставкиЗаказаПокупателя) Тогда
		СостояниеЗаказа = СостояниеЗаказа + Символы.ПС;
	КонецЕсли;
	
	СостояниеЗаказа = СостояниеЗаказа + Строка(ПоследнееСостояниеДоставкиЗаказаПокупателя);
	СостояниеДоставкиЗаказа = Строка(ПоследнееСостояниеДоставкиЗаказаПокупателя);
	
КонецПроцедуры

// Уточняет состояние заказа покупателя без учета оплаты.
//
// Параметры:
//  ЗаказПокупателя - ДокументСсылка.ЗаказПокупателя - заказ покупателя для проверки состояния.
//  СостояниеЗаказа - Перечисление.СостоянияЗаказовПокупателей - состояние заказа покупателей.
//
Процедура ОбновитьСостояниеЗаказаБезучетыОплатыНасайте(ЗаказПокупателя, СостояниеЗаказа) Экспорт
	
	СостояниеЗаказа = Перечисления.СостоянияЗаказовПокупателей.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыПокупателейОстатки.Заказ КАК ЗаказПродажа
	|ПОМЕСТИТЬ ТаблицаКПродаже
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(, Заказ = &Ссылка) КАК ЗаказыПокупателейОстатки
	|ГДЕ
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументЗаказПокупателя.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА НЕ ДокументЗаказПокупателя.Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ПустаяСсылка)
	|		КОГДА ДокументЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.НеСогласован)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ОжидаетсяСогласование)
	|		КОГДА ДокументЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Закрыт)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.Закрыт)
	|		КОГДА ДокументЗаказПокупателя.Отменено
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ГотовКЗакрытию)
	|		КОГДА НЕ ТаблицаКПродаже.ЗаказПродажа ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА &ИспользоватьРезервированиеПоЗаказамПокупателей
	|							И ДокументЗаказПокупателя.НаличиеНезарезервированныхСтрок
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ОжидаетсяРезервирование)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ОжидаетсяПродажа)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ГотовКЗакрытию)
	|	КОНЕЦ КАК Состояние
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ДокументЗаказПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКПродаже КАК ТаблицаКПродаже
	|		ПО ДокументЗаказПокупателя.Ссылка = ТаблицаКПродаже.ЗаказПродажа
	|ГДЕ
	|	ДокументЗаказПокупателя.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЗаказПокупателя);
	Запрос.УстановитьПараметр("ИспользоватьРезервированиеПоЗаказамПокупателей", ПолучитьФункциональнуюОпцию("ИспользоватьРезервированиеПоЗаказамПокупателей"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		СостояниеЗаказа = Выборка.Состояние
		
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область СчетФактура

// Возвращает структуру параметров представления счета-фактуры в документе.
//
// Параметры:
//  Основание - ДокументСсылка - Документ, на основании которого вводится счет-фактура;
//  Организация - СправочникСсылка.Организации - Организация, на имя которой оформляется счет-фактура;
//  НеТребуется - Булево - если истина, то для документа не требуется вводить счет-фактуру;
//  РазделятьДокументы - Булево - Разделяет счета фактуры на Полученный и Выданный;
//  ПредставлениеДокумента - Булево - Добавляет к представлению "Счет-фактура выданный"
//  ТипСчетаФактуры - Строка - "полученный"/"выданный", имеет значение, когда РазделятьДокументы = Истина.
//
// Возвращаемое значение:
//  Структура:
//		*ТекстСчетФактура - Строка - Представление счета-фактуры.
//		*ТекстСписок - Строка - Представление команды открытия списка счетов-фактур.
//		*ГиперссылкаСчетФактура - Булево - Признак гиперссылки представления счета-фактуры.
//		*РазрешеныИсправления - Булево - Истина - Доступен ввод исправлений счета-фактуры.
//
Функция ПараметрыПредставленияСчетаФактуры(Основание, Организация, НеТребуется = Ложь, РазделятьДокументы = Ложь, ПредставлениеДокумента=Ложь) Экспорт
	
	Перем РеквизитыСчетаФактуры;
	
	СчетаФактуры = Документы.СчетФактураВыданный.СчетаФактурыПоОснованию(Основание, Организация, РеквизитыСчетаФактуры);
	Если СчетаФактуры.Количество() > 0 Тогда
		ТекстСчетФактура = ПредставлениеСчетаФактуры(РеквизитыСчетаФактуры.Номер, РеквизитыСчетаФактуры.Дата, ПредставлениеДокумента);
		Если СчетаФактуры.Количество() > 1 Тогда
			ТекстСписок = НСтр("ru='Открыть список'") + " (" + Строка(СчетаФактуры.Количество()) + ")";
		Иначе
			ТекстСписок = "";
		КонецЕсли;
		ГиперссылкаСчетФактура = Истина;
		РазрешеныИсправления = ПравоДоступа("Добавление", Метаданные.Документы.СчетФактураВыданный);
		
	ИначеЕсли НеТребуется Тогда
		ТекстСчетФактура = НСтр("ru='Не требуется'");
		ТекстСписок = "";
		ГиперссылкаСчетФактура = Ложь;
		РазрешеныИсправления = Ложь;
		
	ИначеЕсли Не ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.СчетФактураВыданный) Тогда
		ТекстСчетФактура = НСтр("ru='Не введен'");
		ТекстСписок = "";
		ГиперссылкаСчетФактура = Ложь;
		РазрешеныИсправления = Ложь;
		
	ИначеЕсли РазделятьДокументы Тогда
		ТекстСчетФактура = НСтр("ru='Создать выданный счет-фактуру'");
		ТекстСписок = "";
		ГиперссылкаСчетФактура = Истина;
		РазрешенВводНового = Истина;
		РазрешеныИсправления = Ложь;
		
	Иначе
		ТекстСчетФактура = НСтр("ru=''");
		ТекстСписок = "";
		ГиперссылкаСчетФактура = Истина;
		РазрешеныИсправления = Ложь;
		
	КонецЕсли;
	
	Возврат Новый Структура("ТекстСчетФактура, ТекстСписок, ГиперссылкаСчетФактура, РазрешеныИсправления",
		ТекстСчетФактура, ТекстСписок, ГиперссылкаСчетФактура, РазрешеныИсправления);
	
КонецФункции

// Формирует представление счет-фактуры.
//
// Параметры:
//  Номер - Строка - Номер счета-фактуры.
//  Дата - Дата - Дата счета-фактуры.
//  ПредставлениеДокумента - Булево - Добавляет к представлению "Счет-фактура полученный"
//
// Возвращаемое значение:
//  Строка - Представление счета-фактуры.
//
Функция ПредставлениеСчетаФактуры(Номер, Дата, ПредставлениеДокумента=Ложь) Экспорт
	
	Возврат ?(ПредставлениеДокумента = Истина, Нстр("ru='Счет-фактура выданный '"),"") + СтрШаблон(
	НСтр("ru = '№%1 от %2 г.'"),
	СокрЛП(Номер),
	Формат(Дата, "ДФ=dd.MM.yyyy"));
	
КонецФункции

// Формирует временную таблицу, содержащую данные счетов-фактур по таблице данных документов-оснований.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц, содержащий таблицу
//	                                                    ТаблицаДанныхДокументов с полями:
//		Ссылка,
//		Организация,
//		Подразделение,
//		Склад.
//
Процедура ПоместитьВременнуюТаблицуСчетовФактур(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	|	СчетаФактуры.ДокументОснование КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА СчетаФактуры.Исправление
	|			ТОГДА ЕСТЬNULL(СчетаФактуры.СчетФактураОснование.Дата, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ СчетаФактуры.Дата
	|	КОНЕЦ КАК Дата,
	|	МАКСИМУМ(СчетаФактуры.НомерИсправления) КАК НомерИсправления
	|ПОМЕСТИТЬ НомераИсправлений
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетаФактуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ДанныеДокументов
	|		ПО СчетаФактуры.ДокументОснование = ДанныеДокументов.Ссылка
	|ГДЕ
	|	НЕ СчетаФактуры.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаФактуры.ДокументОснование,
	|	ВЫБОР
	|		КОГДА СчетаФактуры.Исправление
	|			ТОГДА ЕСТЬNULL(СчетаФактуры.СчетФактураОснование.Дата, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ СчетаФактуры.Дата
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаФактуры.ДокументОснование КАК ДокументОснование,
	|	СчетаФактуры.Исправление КАК Исправление,
	|	СчетаФактуры.Номер КАК Номер,
	|	ВЫБОР
	|		КОГДА СчетаФактуры.Исправление
	|			ТОГДА ЕСТЬNULL(СчетаФактуры.СчетФактураОснование.Дата, ДАТАВРЕМЯ(1, 1, 1))
	|		ИНАЧЕ СчетаФактуры.Дата
	|	КОНЕЦ КАК Дата,
	|	ВЫБОР
	|		КОГДА СчетаФактуры.Исправление
	|			ТОГДА СчетаФактуры.НомерИсправления
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НомерИсправления,
	|	ВЫБОР
	|		КОГДА СчетаФактуры.Исправление
	|			ТОГДА СчетаФактуры.Дата
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДатаИсправления,
	|	СчетаФактуры.Организация КАК Организация,
	|	СчетаФактуры.Валюта КАК Валюта,
	|	СчетаФактуры.СтрокаПлатежноРасчетныеДокументы КАК СтрокаПлатежноРасчетныеДокументы,
	|	СчетаФактуры.Организация КАК Грузоотправитель
	|ПОМЕСТИТЬ ТаблицаСчетовФактур
	|ИЗ
	|	НомераИсправлений КАК НомераИсправлений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетаФактуры
	|		ПО НомераИсправлений.ДокументОснование = СчетаФактуры.ДокументОснование
	|			И (НомераИсправлений.Дата = ВЫБОР
	|				КОГДА СчетаФактуры.Исправление
	|					ТОГДА ЕСТЬNULL(СчетаФактуры.СчетФактураОснование.Дата, НЕОПРЕДЕЛЕНО)
	|				ИНАЧЕ СчетаФактуры.Дата
	|			КОНЕЦ)
	|			И НомераИсправлений.НомерИсправления = СчетаФактуры.НомерИсправления
	|			И (НЕ СчетаФактуры.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НомераИсправлений";
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область ЕГАИС

// Подготавливает данные для пробития чека ККМ.
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект.ЧекККМ - документ объект.
//
// Возвращаемое значение:
//  Структура - структура, содержит:
//    ДокументОбъект - ДокументОбъект.ЧекККМ;
//
Функция ДанныеДляПробитияЧекаККМ(ДокументОбъект) Экспорт
	
	ИспользоватьКомиссионнуюТорговлю = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссионнуюТорговлю");
	ИспользоватьУчетИмпортныхТоваров = ПолучитьФункциональнуюОпцию("ИспользоватьУчетИмпортныхТоваров");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.ДоговорКонтрагента КАК Договор,
	|	Товары.Количество КАК Количество,
	|	Товары.Цена КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	Товары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ВЫРАЗИТЬ(Товары.Упаковка КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.КлючСвязи КАК КлючСвязи,
	|	Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	Товары.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,
	|	Товары.Штрихкод КАК Штрихкод,
	|	Товары.НеобходимостьВводаАкцизнойМарки КАК НеобходимостьВводаАкцизнойМарки,
	|	Товары.GTIN КАК GTIN
	|ПОМЕСТИТЬ ТоварыВТ
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(Товары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	Товары.Договор КАК Договор,
	|	Товары.Количество КАК Количество,
	|	Товары.Цена КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	Товары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ВЫРАЗИТЬ(Товары.Упаковка КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.КлючСвязи КАК КлючСвязи,
	|	Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	Товары.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом, 
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(Товары.Штрихкод, 0, 2) = &Шаблон
	|				ИЛИ Товары.Штрихкод = &ПустаяСтрока
	|			ТОГДА Товары.Номенклатура.КодНацКаталога
	|		ИНАЧЕ Товары.Штрихкод
	|	КОНЕЦ КАК Штрихкод,
	|	Товары.GTIN КАК GTIN,
	|	Товары.НеобходимостьВводаАкцизнойМарки КАК НеобходимостьВводаАкцизнойМарки
	|ПОМЕСТИТЬ ТоварыПредварительные
	|ИЗ
	|	ТоварыВТ КАК Товары";
	
	Если ИспользоватьКомиссионнуюТорговлю ИЛИ ИспользоватьУчетИмпортныхТоваров Тогда
		
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() +
		"ВЫБРАТЬ
		|	ТоварыОрганизаций.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
		|	ТоварыОрганизаций.НомерГТД КАК НомерГТД,
		|	ЕСТЬNULL(НомераГТД.РегистрационныйНомерДекларации, &ПустаяСтрока) КАК РегистрационныйНомерДекларации,
		|	ЕСТЬNULL(НомераГТД.СтранаПроисхождения.Код, &ПустаяСтрока) КАК КодСтраныПроисхождения,
		|	ТоварыОрганизаций.Договор КАК Договор,
		|	ТоварыОрганизаций.Поставщик КАК Поставщик,
		|	СУММА(ТоварыОрганизаций.Количество) КАК Количество
		|ПОМЕСТИТЬ ТаблицаДвижений
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК НомераГТД
		|		ПО ТоварыОрганизаций.НомерГТД = НомераГТД.Ссылка
		|ГДЕ
		|	ТоварыОрганизаций.Регистратор = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыОрганизаций.НомерСтрокиДокумента,
		|	ТоварыОрганизаций.Регистратор,
		|	ТоварыОрганизаций.НомерГТД,
		|	ЕСТЬNULL(НомераГТД.РегистрационныйНомерДекларации, &ПустаяСтрока),
		|	ЕСТЬNULL(НомераГТД.СтранаПроисхождения.Код, &ПустаяСтрока),
		|	ТоварыОрганизаций.Договор,
		|	ТоварыОрганизаций.Поставщик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ЕСТЬNULL(ТаблицаДвижений.Поставщик, ЕСТЬNULL(ДоговорыКонтрагентов.Агент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))) КАК Поставщик,
		|	ЕСТЬNULL(ТаблицаДвижений.Договор, ТаблицаТоваров.Договор) КАК Договор,
		|	ЕСТЬNULL(ТаблицаДвижений.Договор.ИННПоставщикаУслуг, ТаблицаТоваров.Договор.ИННПоставщикаУслуг) КАК ИННПоставщикаУслуг,
		|	ЕСТЬNULL(ТаблицаДвижений.Договор.ТелефонПоставщика, ТаблицаТоваров.Договор.ТелефонПоставщика) КАК ТелефонПоставщика,
		|	ЕСТЬNULL(ТаблицаДвижений.НомерГТД, ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)) КАК НомерГТД,
		|	ЕСТЬNULL(ТаблицаДвижений.РегистрационныйНомерДекларации, &ПустаяСтрока) КАК РегистрационныйНомерДекларации,
		|	ЕСТЬNULL(ТаблицаДвижений.КодСтраныПроисхождения, &ПустаяСтрока) КАК КодСтраныПроисхождения,
		|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТоваров.КоличествоУпаковок * ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаДвижений.Количество, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ТаблицаДвижений.Количество, 0) / ТаблицаТоваров.Количество
		|	КОНЕЦ КАК КоличествоУпаковок,
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка,
		|	ТаблицаТоваров.Цена КАК Цена,
		|	ТаблицаТоваров.Сумма * ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаДвижений.Количество, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ТаблицаДвижений.Количество, 0) / ТаблицаТоваров.Количество
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТоваров.СуммаНДС * ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаДвижений.Количество, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ТаблицаДвижений.Количество, 0) / ТаблицаТоваров.Количество
		|	КОНЕЦ КАК СуммаНДС,
		|	ТаблицаТоваров.СуммаАвтоматическойСкидки * ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаДвижений.Количество, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ТаблицаДвижений.Количество, 0) / ТаблицаТоваров.Количество
		|	КОНЕЦ КАК СуммаАвтоматическойСкидки,
		|	ТаблицаТоваров.СуммаРучнойСкидки * ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаДвижений.Количество, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ТаблицаДвижений.Количество, 0) / ТаблицаТоваров.Количество
		|	КОНЕЦ КАК СуммаРучнойСкидки,
		|	ТаблицаТоваров.СуммаСкидкиОплатыБонусом * ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаДвижений.Количество, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ТаблицаДвижений.Количество, 0) / ТаблицаТоваров.Количество
		|	КОНЕЦ КАК СуммаСкидкиОплатыБонусом,
		|	ЕСТЬNULL(ТаблицаДвижений.Количество, ТаблицаТоваров.Количество) КАК Количество,
		|	ТаблицаТоваров.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
		|	ТаблицаТоваров.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
		|	ТаблицаТоваров.КлючСвязи КАК КлючСвязи,
		|	ТаблицаТоваров.Штрихкод КАК Штрихкод,
		|	ТаблицаТоваров.НеобходимостьВводаАкцизнойМарки КАК НеобходимостьВводаАкцизнойМарки,
		|	ТаблицаТоваров.GTIN КАК GTIN
		|ПОМЕСТИТЬ ТаблицаТоварыЧека
		|ИЗ
		|	ТоварыПредварительные КАК ТаблицаТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДвижений КАК ТаблицаДвижений
		|		ПО ТаблицаТоваров.НомерСтроки = ТаблицаДвижений.НомерСтрокиДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ТаблицаТоваров.Договор = ДоговорыКонтрагентов.Ссылка";
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() +
		"ВЫБРАТЬ
		|	ТаблицаТоваров.*,
		|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка) КАК НомерГТД,
		|	&ПустаяСтрока КАК РегистрационныйНомерДекларации,
		|	&ПустаяСтрока КАК КодСтраныПроисхождения,
		|	ЕСТЬNULL(ДоговорыКонтрагентов.Агент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Поставщик,
		|	ЕСТЬNULL(ДоговорыКонтрагентов.ИННПоставщикаУслуг, &ПустаяСтрока) КАК ИННПоставщикаУслуг,
		|	ЕСТЬNULL(ДоговорыКонтрагентов.ТелефонПоставщика, &ПустаяСтрока) КАК ТелефонПоставщика
		|ПОМЕСТИТЬ ТаблицаТоварыЧека
		|ИЗ
		|	ТоварыПредварительные КАК ТаблицаТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ТаблицаТоваров.Договор = ДоговорыКонтрагентов.Ссылка";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() +
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Поставщик КАК Поставщик,
	|	Товары.Договор КАК Договор,
	|	Товары.ИННПоставщикаУслуг КАК ИННПоставщикаУслуг,
	|	Товары.ТелефонПоставщика КАК ТелефонПоставщика,
	|	Товары.НомерГТД КАК НомерГТД,
	|	Товары.РегистрационныйНомерДекларации КАК РегистрационныйНомерДекларации,
	|	Товары.КодСтраныПроисхождения КАК КодСтраныПроисхождения,
	|	Товары.Количество КАК Количество,
	|	Товары.Цена КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	Товары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.Упаковка.Наименование КАК ЕдиницаИзмеренияПредметаРасчета,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Товары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.КлючСвязи КАК КлючСвязи,
	|	Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	Товары.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,
	|	Товары.НеобходимостьВводаАкцизнойМарки КАК НеобходимостьВводаАкцизнойМарки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СправочникНоменклатура.КодВидаНоменклатурнойКлассификации, &ПустаяСтрока) = &ПустаяСтрока
	|			ТОГДА Товары.Штрихкод
	|		ИНАЧЕ ЕСТЬNULL(СправочникНоменклатура.КодВидаНоменклатурнойКлассификации, &ПустаяСтрока)
	|	КОНЕЦ КАК Штрихкод,
	|	&ОпределениеВидаПродукции КАК ВидПродукцииИС,
	|	&ОпределениеПризнакаМаркируемаяПродукция КАК МаркируемаяПродукция,
	|	ЕСТЬNULL(СправочникНоменклатура.ВидНоменклатуры.ПродаетсяВРозлив, ЛОЖЬ) КАК ПродаетсяВРозлив,
	|	ЕСТЬNULL(СправочникНоменклатура.ВидАлкогольнойПродукцииЕГАИС.Код, &ПустаяСтрока) КАК КодВидаПродукции,
	|	ЕСТЬNULL(СправочникНоменклатура.ВидНоменклатуры.ПризнакПредметаРасчета.ТипПризнакаПредметаРасчета, &ПустаяСтрока) КАК ПризнакПредметаРасчета,
	|	ЕСТЬNULL(СправочникНоменклатура.АлкогольнаяПродукция, ЛОЖЬ) КАК АлкогольнаяПродукция,
	|	&УсловиеОсобенностьУчета КАК ПродукцияИСМП,
	|	ВЫБОР
	|		КОГДА &ПродажаСПроверкойГИСМ
	|			ТОГДА ЕСТЬNULL(СправочникНоменклатура.ПродукцияМаркируемаяДляГИСМ, ЛОЖЬ)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПродукцияГИСМ,
	|	ЕСТЬNULL(СправочникНоменклатура.Наименование, &ПустаяСтрока) КАК НаименованиеТовара,
	|	ЕСТЬNULL(СправочникНоменклатура.Крепость, 0) КАК Крепость,
	|	ЕСТЬNULL(СправочникНоменклатура.ОбъемДАЛ, 0) КАК ОбъемДАЛ,
	|	ЕСТЬNULL(СправочникНоменклатура.ТипНоменклатуры, ЛОЖЬ) = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат) КАК ЭтоПодарочныйСертификат,
	|	ЕСТЬNULL(СправочникНоменклатура.КодВидаНоменклатурнойКлассификации, &ПустаяСтрока) КАК КодВидаНоменклатурнойКлассификации,
	|	ЕСТЬNULL(СправочникНоменклатура.КодТРУ, &ПустаяСтрока) КАК КодТовараТРУ,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура.ЕдиницаИзмерения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Товары.Упаковка.ЕдиницаИзмерения)
	|	КОНЕЦ КАК НаименованиеЕдиницыИзмерения,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Код
	|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК КодЕдиницыИзмерения,
	|	Товары.GTIN КАК GTIN
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	ТаблицаТоварыЧека КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Серия КАК Серия,
	|	Серии.Номенклатура КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика,
	|	Серии.Количество КАК Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	&Серии КАК Серии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СпрСерии.НомерКиЗГИСМ, &ПустаяСтрока) КАК НомерКиЗГИСМ,
	|	Серии.Номенклатура КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика,
	|	Серии.Количество КАК Количество
	|ПОМЕСТИТЬ ТаблицаСерий
	|ИЗ
	|	Серии КАК Серии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СпрСерии
	|		ПО Серии.Серия = СпрСерии.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Поставщик КАК Поставщик,
	|	ТаблицаТовары.Договор КАК Договор,
	|	ТаблицаТовары.ИННПоставщикаУслуг КАК ИННПоставщикаУслуг,
	|	ТаблицаТовары.ТелефонПоставщика КАК ТелефонПоставщика,
	|	ТаблицаТовары.НомерГТД КАК НомерГТД,
	|	ТаблицаТовары.РегистрационныйНомерДекларации КАК РегистрационныйНомерДекларации,
	|	ТаблицаТовары.КодСтраныПроисхождения КАК КодСтраныПроисхождения,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ТаблицаТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ТаблицаТовары.Упаковка КАК Упаковка,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаТовары.КлючСвязи КАК КлючСвязи,
	|	ТаблицаТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ТаблицаТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ТаблицаТовары.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,
	|	ТаблицаТовары.МаркируемаяПродукция КАК Маркируемый,
	|	ТаблицаТовары.ВидПродукцииИС КАК ВидПродукцииИС,
	|	ТаблицаТовары.Штрихкод КАК Штрихкод,
	|	ВЫБОР
	|		КОГДА &ПродажаСПроверкойГИСМ
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ ТаблицаСерий.НомерКиЗГИСМ ЕСТЬ NULL
	|						ТОГДА ТаблицаСерий.НомерКиЗГИСМ
	|					ИНАЧЕ &ПустаяСтрока
	|				КОНЕЦ
	|		ИНАЧЕ &ПустаяСтрока
	|	КОНЕЦ КАК КодАкцизнойМарки,
	|	&ПустаяСтрока КАК КодВидаПродукции,
	|	0 КАК ОбъемДАЛ,
	|	0 КАК Крепость,
	|	ЛОЖЬ КАК АлкогольнаяПродукция,
	|	ЛОЖЬ КАК ПродукцияИСМП,
	|	ИСТИНА КАК ПродукцияГИСМ,
	|	ТаблицаТовары.НаименованиеЕдиницыИзмерения КАК НаименованиеЕдиницыИзмерения,
	|	ТаблицаТовары.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения,
	|	ТаблицаТовары.GTIN КАК GTIN
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСерий КАК ТаблицаСерий
	|		ПО ТаблицаТовары.Номенклатура = ТаблицаСерий.Номенклатура
	|			И ТаблицаТовары.Характеристика = ТаблицаСерий.Характеристика
	|ГДЕ
	|	ТаблицаТовары.ПродукцияГИСМ
	|	И &ПродажаСПроверкойГИСМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ТаблицаТовары.Поставщик КАК Поставщик,
	|	ТаблицаТовары.Договор КАК Договор,
	|	ТаблицаТовары.ИННПоставщикаУслуг КАК ИННПоставщикаУслуг,
	|	ТаблицаТовары.ТелефонПоставщика КАК ТелефонПоставщика,
	|	ТаблицаТовары.НомерГТД КАК НомерГТД,
	|	ТаблицаТовары.РегистрационныйНомерДекларации КАК РегистрационныйНомерДекларации,
	|	ТаблицаТовары.КодСтраныПроисхождения КАК КодСтраныПроисхождения,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ТаблицаТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ТаблицаТовары.Упаковка КАК Упаковка,
	|	ТаблицаТовары.ЕдиницаИзмеренияПредметаРасчета КАК ЕдиницаИзмеренияПредметаРасчета,
	|	ТаблицаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаТовары.КлючСвязи КАК КлючСвязи,
	|	ТаблицаТовары.НаименованиеТовара КАК НаименованиеТовара,
	|	ТаблицаТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ТаблицаТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ТаблицаТовары.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,
	|	ВЫБОР
	|		КОГДА &ВозвратПродукцииИСМПБезМарки
	|			ТОГДА &ПустаяСтрока
	|		ИНАЧЕ ТаблицаТовары.Штрихкод
	|	КОНЕЦ КАК Штрихкод,
	|	ТаблицаТовары.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета,
	|	ТаблицаТовары.ОбъемДАЛ КАК ОбъемДАЛ,
	|	ТаблицаТовары.ВидПродукцииИС КАК ВидПродукцииИС,
	|	ТаблицаТовары.МаркируемаяПродукция КАК Маркируемый,
	|	ТаблицаТовары.КодВидаПродукции КАК КодВидаПродукции,
	|	ТаблицаТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТаблицаТовары.ПродукцияИСМП КАК ПродукцияИСМП,
	|	ТаблицаТовары.ПродукцияГИСМ КАК ПродукцияГИСМ,
	|	ТаблицаТовары.Крепость КАК Крепость,
	|	ТаблицаТовары.ПродаетсяВРозлив КАК ПродаетсяВРозлив,
	|	ТаблицаТовары.ЭтоПодарочныйСертификат КАК ЭтоПодарочныйСертификат,
	|	ТаблицаТовары.МаркируемаяПродукция
	|		И ТаблицаТовары.КоличествоУпаковок > 1
	|		И ТаблицаТовары.НеобходимостьВводаАкцизнойМарки
	|		И НЕ ТаблицаТовары.АлкогольнаяПродукция КАК НДСПоСтрочно,
	|	ТаблицаТовары.КодВидаНоменклатурнойКлассификации КАК КодВидаНоменклатурнойКлассификации,
	|	ТаблицаТовары.СуммаАвтоматическойСкидки + ТаблицаТовары.СуммаРучнойСкидки + ТаблицаТовары.СуммаСкидкиОплатыБонусом КАК СуммаСкидок,
	|	ТаблицаТовары.КодТовараТРУ КАК КодТовараТРУ,
	|	ТаблицаТовары.НаименованиеЕдиницыИзмерения КАК НаименованиеЕдиницыИзмерения,
	|	ТаблицаТовары.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения,
	|	ТаблицаТовары.GTIN КАК GTIN
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Договор,
	|	НомерГТД";
	
	ИнтеграцияИСРТ.ОпределитьВидПродукцииТекстаЗапроса(ТекстЗапроса, "СправочникНоменклатура");
	ИнтеграцияИСРТ.ОпределитьОсобенностиУчетаТекстаЗапроса(ТекстЗапроса, "СправочникНоменклатура");
	ОпределениеМаркируемаяПродукция = ИнтеграцияИСРТ.ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса("СправочникНоменклатура");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОпределениеПризнакаМаркируемаяПродукция", ОпределениеМаркируемаяПродукция);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ПустаяСтрока", НСтр("ru = ''"));
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Товары", ДокументОбъект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("Серии", ДокументОбъект.Серии.Выгрузить());
	Запрос.УстановитьПараметр("Шаблон", "2"+ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ПрефиксВнутреннегоШтрихкодаВесовогоТовара"));
	
	ЭтоПередачаТоваров = НЕ ДокументОбъект.ОперацияСДенежнымиСредствами;
	
	ВозвратПродукцииИСМПБезМарки  = Ложь;
	Если (ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекККМ")
		И ДокументОбъект.ДополнительныеСвойства.Свойство("ЭтоВозвратПродукцииИСМПБезМарки")) Тогда
		
		ВозвратПродукцииИСМПБезМарки = Истина;
		
	КонецЕсли;
	Запрос.УстановитьПараметр("ВозвратПродукцииИСМПБезМарки" , ВозвратПродукцииИСМПБезМарки);
	ПродажаСПроверкойГИСМ = Ложь;
	Если ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ")
		И НЕ ИнтеграцияГИСМ.ПодсистемаНеИспользуется() Тогда
		ПродажаСПроверкойГИСМ = ЭтоПередачаТоваров;
	КонецЕсли;
	Запрос.УстановитьПараметр("ПродажаСПроверкойГИСМ", ПродажаСПроверкойГИСМ);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваровГосИС = Результат[Результат.Количество()-2].Выгрузить();
	ТаблицаТоваровЧека  = Результат[Результат.Количество()-1].Выгрузить();
	
	ТаблицаТоваровЧека.Колонки.Добавить("РезультатРаспределенияШтрихкодов");
	
	// Проверим корректность заполнения ГОСИС.
	ЕстьОшибкиГОСИС = Ложь;
	ТребуетсяРаспределениеУпаковок = Ложь;
	
	// ЕГАИС.
	ЕстьАлкогольнаяПродукцияЕГАИС = ЭтоПередачаТоваров И ИнтеграцияЕГАИСРТ.ЕстьАлкогольнаяПродукцияЕГАИС(ДокументОбъект.Товары);
	
	// ИСМП.
	Если ЭтоПередачаТоваров И НЕ ВозвратПродукцииИСМПБезМарки
		И ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции() Тогда
		ТребуетсяРаспределениеУпаковок = Истина;
	КонецЕсли;
	
	Если Не ТребуетсяРаспределениеУпаковок
		И ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		// При частичном выбытии алкогольной продукции также требуется распределение.
		СтрокиПолногоВыбытия = ДокументОбъект.АкцизныеМарки.НайтиСтроки(Новый Структура("ЧастичноеВыбытиеКоличество", 0));
		ТребуетсяРаспределениеУпаковок = Не СтрокиПолногоВыбытия.Количество() = ДокументОбъект.АкцизныеМарки.Количество();
	КонецЕсли;
	
	Если ТребуетсяРаспределениеУпаковок Тогда
		ШтрихкодыУпаковок = Новый Массив;
		Для Каждого СтрокаАкцизнойМарки Из ДокументОбъект.АкцизныеМарки Цикл
			НовыйЭлемент = ШтрихкодированиеИС.НовыйЭлементКоллекцииУпаковокДляРаспределенияПоТоварам();
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтрокаАкцизнойМарки);
			НовыйЭлемент.ШтрихкодУпаковки = СтрокаАкцизнойМарки.АкцизнаяМарка;
			
			ШтрихкодыУпаковок.Добавить(НовыйЭлемент);
		КонецЦикла;
		
		ТаблицаТоваровЧека = РаспределитьШтрихкодыПоТаблицеТоваров(ДокументОбъект, ШтрихкодыУпаковок, ТаблицаТоваровЧека);
	КонецЕсли;
	
	ДанныеДляПробитияЧекаККМ = Новый Структура();
	ДанныеДляПробитияЧекаККМ.Вставить("ТаблицаТоваровЧека", ТаблицаТоваровЧека);
	ДанныеДляПробитияЧекаККМ.Вставить("ТаблицаТоваровГосИС", ТаблицаТоваровГосИС);
	ДанныеДляПробитияЧекаККМ.Вставить("ЕстьАлкогольнаяПродукцияЕГАИС", ЕстьАлкогольнаяПродукцияЕГАИС);
	
	Возврат ДанныеДляПробитияЧекаККМ;
	
КонецФункции

// Подготавливает данные для вскрытия тары.
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект - документ объект для передачи в ЕГАИС.
//  ДанныеЕГАИСДостаточны - Булево - признак достаточности данных ЕГАИС.
//  ОсобыйВыводСообщения - Булево - признак особого вывода сообщения.
//  ТекстПолногоСообщения - Строка - текст полного сообщения.
//
// Возвращаемое значение:
//  Структура - структура таблиц данных для вскрытия тары.
//
Функция ДанныеДляВскрытияТары(ДокументОбъект, ДанныеЕГАИСДостаточны, ОсобыйВыводСообщения = Ложь, ТекстПолногоСообщения = "") Экспорт
	
	ДанныеЕГАИСДостаточны = Ложь;
	ТекстПолногоСообщения = НСтр("ru = 'Документ оставлен для обратной совместимости. Передача в ЕГАИС невозможна'");
	ОбщегоНазначения.СообщитьПользователю(ТекстПолногоСообщения);
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ТаблицаТоваровГосИС", Неопределено);
	
	Возврат СтруктураТаблиц;
	
КонецФункции

#КонецОбласти

#Область РасчетыСКлиентами

// Возвращает сумму остатка оплаты по Документу расчета и Хозяйственную операцию.
//
// Параметры:
//  ДокументРасчета - ДокументСсылка.РеализацияТоваров, ДокументСсылка.ВозвратТоваровОтПокупателя - документ по которому возвращаются данные.
//
// Возвращаемое значение:
//  Структура - данные документа.
//
Функция ДанныеПоДокументуРасчета(ДокументРасчета) Экспорт
	
	ВозвращаемаяСтруктура = Новый Структура;
	
	Если ТипЗнч(ДокументРасчета) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
		ЭтоПриемДС = Истина;
		ВозвращаемаяСтруктура.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	Иначе
		ЭтоПриемДС = Ложь;
		ВозвращаемаяСтруктура.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ЭтоПриемДС
	|			ТОГДА -РасчетыСКлиентамиОстатки.СуммаОстаток
	|		ИНАЧЕ РасчетыСКлиентамиОстатки.СуммаОстаток
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(
	|			,
	|			ДокументРасчета = &ДокументРасчета
	|				И Магазин = &Магазин
	|				И Контрагент = &Контрагент
	|				И Организация = &Организация) КАК РасчетыСКлиентамиОстатки
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ЭтоПриемДС
	|				ТОГДА РасчетыСКлиентамиОстатки.СуммаОстаток < 0
	|			ИНАЧЕ РасчетыСКлиентамиОстатки.СуммаОстаток > 0
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ДокументРасчета", ДокументРасчета);
	Запрос.УстановитьПараметр("Магазин"        , ДокументРасчета.Магазин);
	Запрос.УстановитьПараметр("Контрагент"     , ДокументРасчета.Контрагент);
	Запрос.УстановитьПараметр("Организация"    , ДокументРасчета.Организация);
	Запрос.УстановитьПараметр("ЭтоПриемДС"     , ЭтоПриемДС);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ВозвращаемаяСтруктура.Вставить("Сумма", Выборка.Сумма);
		Возврат ВозвращаемаяСтруктура;
	Иначе
		ВозвращаемаяСтруктура.Вставить("Сумма", 0);
		Возврат ВозвращаемаяСтруктура;
	КонецЕсли;

КонецФункции // ДанныеПоДокументуРасчета()

// Заполняет контрагента по дисконтной карте.
//
// Параметры:
// Объект - Документ.ЧекККМОбъект, Обработка.РМКУправляемыйРежимОбъект - объект для заполнения дисконтной карты.
// ДисконтнаяКарта - Справочник.ИнформационныеКартыСсылка - дисконтная карта по которой заполняется контрагент.
// 
Процедура ЗаполнитьКонтрагентаПоДисконтнойКарте(Объект, ДисконтнаяКарта) Экспорт
	
	Если ЗначениеЗаполнено(ДисконтнаяКарта)  Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ЗаказПокупателя)
			И НЕ ЗначениеЗаполнено(Объект.ДокументРасчета) Тогда
			Контрагент = ДисконтнаяКарта.ВладелецКарты;
			Если ЗначениеЗаполнено(Контрагент)
				И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				Объект.Контрагент = Контрагент;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомиссионнаяТорговля

Процедура ПечатьФискальныхОперацийКомиссия(КомандыПечати) Экспорт
	
	ИспользоватьКомиссионнуюТорговлю = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссионнуюТорговлю");
	Если ИспользоватьКомиссионнуюТорговлю Тогда
		// Печать информации по фискализированным данным
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ФискальнаяОперация";
		КомандаПечати.Представление = НСтр("ru = 'Комиссионные товары (фискальная операция)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("Представление", КомандаПечати.Представление);
		КомандаПечати.Порядок = 90
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьФискальныхОпераций(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Чек ККМ'");
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЧекаККМ_ФискальныеДпнные";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ФискализированныеДанные");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка     = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока    = Макет.ПолучитьОбласть("Строка");
	
	ОбластьКомитентШапка = Макет.ПолучитьОбласть("КомитентШапка");
	
	ПервыйДокумент = Истина;
	
	Для каждого Документ Из МассивОбъектов Цикл
		
		Реквизиты = МенеджерОборудованияВызовСервера.ДанныеФискальнойОперации(Документ);
		
		Если Реквизиты <> Неопределено Тогда
			ТекстСообщенияXML = Реквизиты.ДанныеXML.Получить();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстСообщенияXML) 
			И (Реквизиты.ТипДокумента = Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧек 
			Или Реквизиты.ТипДокумента = Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧекКоррекции)
		Тогда
			Если НЕ ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПервыйДокумент = Ложь;
			
			Если Реквизиты.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств Тогда
				СинонимДокумента   = НСтр("ru='Комиссионные товары по чеку'");
			Иначе
				СинонимДокумента   = НСтр("ru='Комиссионные товары по чеку (возврат)'");
			КонецЕсли;
			
			РеквизитыДокумента.Вставить("Номер", Реквизиты.НомерЧекаККМ);
			РеквизитыДокумента.Вставить("Дата", Реквизиты.Дата);
			
			ОбластьЗаголовок.Параметры.ТекстЗаголовка = ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента);
			ТабличныйДокумент.Вывести(ОбластьЗаголовок);
			ТабличныйДокумент.Вывести(ОбластьШапка);
			
			ОбщиеПараметры = МенеджерОборудованияВызовСервера.ЗагрузитьДанныеФискализацииИзXML(ТекстСообщенияXML);
			
			КЧСумма = Новый КвалификаторыЧисла(15,2);
			КЧКоличество = Новый КвалификаторыЧисла(12,3);
			КЧСтроки = Новый КвалификаторыСтроки(100);
			Массив = Новый Массив;
			Массив.Добавить(Тип("Строка"));
			ОписаниеТиповСтрока = Новый ОписаниеТипов(Массив, , ,КЧСтроки);
			Массив.Очистить();
			Массив.Добавить(Тип("Число"));
			ОписаниеТиповСумма = Новый ОписаниеТипов(Массив, , ,КЧСумма);
			ОписаниеТиповКоличесто = Новый ОписаниеТипов(Массив, , ,КЧКоличество);
			
			
			ТЗ_КомиссионныеТовары = Новый ТаблицаЗначений;
			ТЗ_КомиссионныеТовары.Колонки.Добавить("Наименование"  , ОписаниеТиповСтрока);
			ТЗ_КомиссионныеТовары.Колонки.Добавить("Количество"    , ОписаниеТиповКоличесто);
			ТЗ_КомиссионныеТовары.Колонки.Добавить("ЦенаСоСкидками", ОписаниеТиповСумма);
			ТЗ_КомиссионныеТовары.Колонки.Добавить("Сумма"         , ОписаниеТиповСумма);
			ТЗ_КомиссионныеТовары.Колонки.Добавить("СтавкаНДС"     , ОписаниеТиповСтрока);
			ТЗ_КомиссионныеТовары.Колонки.Добавить("Комитент"      , ОписаниеТиповСтрока);
			ТЗ_КомиссионныеТовары.Колонки.Добавить("СуммаНДС"      , ОписаниеТиповСумма);
			
			Для каждого ПозицияЧека Из ОбщиеПараметры.ПозицииЧека Цикл
				Если ЗначениеЗаполнено(ПозицияЧека.ДанныеПоставщика.Наименование) Тогда
					СтрокаТЗ = ТЗ_КомиссионныеТовары.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТЗ, ПозицияЧека);
					СтрокаТЗ.Комитент = ПозицияЧека.ДанныеПоставщика.Наименование;
					СтрокаТЗ.СтавкаНДС    = ?(ПозицияЧека.СтавкаНДС = Неопределено, "Без НДС", ПозицияЧека.СтавкаНДС);
				КонецЕсли;
			КонецЦикла;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТЗ_КомиссионныеТовары.Наименование КАК Наименование,
			|	ТЗ_КомиссионныеТовары.Количество КАК Количество,
			|	ТЗ_КомиссионныеТовары.ЦенаСоСкидками КАК Цена,
			|	ТЗ_КомиссионныеТовары.Сумма КАК Сумма,
			|	ВЫРАЗИТЬ(ТЗ_КомиссионныеТовары.Комитент КАК СТРОКА(100)) КАК Комитент,
			|	ТЗ_КомиссионныеТовары.СтавкаНДС КАК СтавкаНДС,
			|	ТЗ_КомиссионныеТовары.СуммаНДС КАК СуммаНДС
			|ПОМЕСТИТЬ ТаблицаВЗапросе
			|ИЗ
			|	&ТЗ_КомиссионныеТовары КАК ТЗ_КомиссионныеТовары
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаВЗапросе.Наименование КАК Наименование,
			|	ТаблицаВЗапросе.Количество КАК Количество,
			|	ТаблицаВЗапросе.Цена КАК Цена,
			|	ТаблицаВЗапросе.Сумма КАК Сумма,
			|	ТаблицаВЗапросе.Комитент КАК Комитент,
			|	ТаблицаВЗапросе.СтавкаНДС КАК СтавкаНДС,
			|	ТаблицаВЗапросе.СуммаНДС КАК СуммаНДС
			|ИЗ
			|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
			|ИТОГИ
			|	СУММА(Сумма),
			|	СУММА(СуммаНДС)
			|ПО
			|	Комитент";
			
			Запрос.УстановитьПараметр("ТЗ_КомиссионныеТовары", ТЗ_КомиссионныеТовары);
			
			Результат = Запрос.Выполнить();
			ВыборкаПоКомитентам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоКомитентам.Следующий() Цикл
				Выборка = ВыборкаПоКомитентам.Выбрать();
				ОбластьКомитентШапка.Параметры.Заполнить(ВыборкаПоКомитентам);
				ТабличныйДокумент.Вывести(ОбластьКомитентШапка);
				ТабличныйДокумент.НачатьГруппуСтрок("Комитент", Истина);
				Пока Выборка.Следующий() Цикл
					ОбластьСтрока.Параметры.Заполнить(Выборка);
					ТабличныйДокумент.Вывести(ОбластьСтрока);
				КонецЦикла;
				ТабличныйДокумент.ЗакончитьГруппуСтрок();
			КонецЦикла;
				
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти


#Область Прочие

// Проверяет правильность заполнения строк табличной части "Оплата".
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - документ для проверки заполнения табличной части "Оплата".
//  Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОплата(
	ДокументОбъект,
	Отказ) Экспорт

	Перем  СуммаНаличнойОплаты, СуммаБезналичнойОплаты;
	
	ПолучитьСуммыПоВидуОплат(ДокументОбъект, СуммаНаличнойОплаты, СуммаБезналичнойОплаты);

	СуммаВсего = ?(ДокументОбъект.ЦенаВключаетНДС, ДокументОбъект.Товары.Итог("Сумма"), ДокументОбъект.Товары.Итог("Сумма") + ДокументОбъект.Товары.Итог("СуммаНДС"));
	ОплаченоВсего = ДокументОбъект.Оплата.Итог("Сумма");
	
	ОперацияСДенежнымиСредствами = ДокументОбъект.ОперацияСДенежнымиСредствами;
	
	Если ОплаченоВсего < СуммаВсего
		И (НЕ ОперацияСДенежнымиСредствами
		ИЛИ ДокументОбъект.Товары.Количество() <> 0) Тогда
		// Проверка идет для случаев, кроме аванса (вносимая сумма без указания товаров)
		Текст = НСтр("ru = 'Сумма всех типов оплат меньше суммы документа.'");
		ОбщегоНазначения.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			"Оплата" ,
			,
			Отказ);
		
	КонецЕсли;
	
	//ОплаченоВсего = 0 и СуммаВсего = 0 при 100% оплате бонусами
	Если ОплаченоВсего = 0 И СуммаВсего > 0 Тогда
		Текст = НСтр("ru = 'Не задана оплата.'");
		ОбщегоНазначения.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			"Оплата" ,
			,
			Отказ);
		
	КонецЕсли;
	
	ЭтоАванс = ДокументОбъект.ОперацияСДенежнымиСредствами И ДокументОбъект.Товары.Количество() = 0;
	
	Если НЕ ЭтоАванс Тогда
		Если СуммаБезналичнойОплаты > СуммаВсего Тогда
		
			Текст = НСтр("ru = 'Сумма безналичной оплаты не может быть больше суммы документа.'");
			ОбщегоНазначения.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"Оплата" ,
				,
				Отказ);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументОбъект.ОперацияСДенежнымиСредствами Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Оплата.ВидОплаты КАК Справочник.ВидыОплатЧекаККМ) КАК ВидОплаты
		|ПОМЕСТИТЬ ТаблицаОплат
		|ИЗ
		|	&Оплата КАК Оплата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТаблицаОплат.ВидОплаты.ТипОплаты
		|ИЗ
		|	ТаблицаОплат КАК ТаблицаОплат
		|ГДЕ
		|	НЕ ТаблицаОплат.ВидОплаты.ТипОплаты В (&ТипыОплаты)";
		
		Запрос.УстановитьПараметр("Оплата", ДокументОбъект.Оплата.Выгрузить());
		МассивТиповОплат = Новый Массив;
		МассивТиповОплат.Добавить(Перечисления.ТипыОплатЧекаККМ.Наличные);
		МассивТиповОплат.Добавить(Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта);
		МассивТиповОплат.Добавить(Перечисления.ТипыОплатЧекаККМ.ПлатежнаяСистема);
		МассивТиповОплат.Добавить(Перечисления.ТипыОплатЧекаККМ.ВРассрочку);
		МассивТиповОплат.Добавить(Перечисления.ТипыОплатЧекаККМ.ЗачетАванса);
		
		Запрос.УстановитьПараметр("ТипыОплаты", МассивТиповОплат);
		
		ЕстьЛишниеВидыРасчетов = НЕ Запрос.Выполнить().Пустой();
		
		Если ЕстьЛишниеВидыРасчетов Тогда
			Текст = НСтр("ru = 'В документе может быть только наличная оплата или оплата платежной картой.'");
			ОбщегоНазначения.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"Оплата" ,
				,
				Отказ);
		КонецЕсли; 
		
	КонецЕсли;
	
	ЭлектронныеСертификатыНСПКРТ.ПроверитьЗаполнениеТабличнойЧастиОплата(ДокументОбъект, Отказ);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОплата()

// Проверяет, что в табличной части нет услуг.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - объект проводимого документа документа.
//  ИмяТабличнойЧасти - Строка - Имя табличной части Товары.
//  Отказ - Булево - Переменная отвечающая за прерывание проведения.
//
Процедура ПроверитьЗаполнениеСклада(
	ДокументОбъект, 
	ИмяТабличнойЧасти, 
	Отказ) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	Товары.Склад КАК Склад,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТабТоварыВСЕ
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабТовары.Номенклатура.Наименование КАК Наименование,
	|	ТабТовары.Склад КАК Склад,
	|	ТабТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТабТоварыВСЕ КАК ТабТовары
	|ГДЕ
	|	ТабТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|	И ТабТовары.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Товары", ДокументОбъект[ИмяТабличнойЧасти].Выгрузить());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В строке №%1 табличной части ""%2"" не заполнен склад'"),
			Выборка.НомерСтроки,
			ИмяТабличнойЧасти);
		ОбщегоНазначения.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			ИмяТабличнойЧасти+"[" + (Выборка.НомерСтроки - 1) + "].Склад" ,
			,
			Отказ);
	КонецЦикла;
	

КонецПроцедуры // ПроверитьЧтоНетПодарочныхСертификатов()

// Получает развернутые строки расхождения по товарам при возврате.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - документ по которому получаются строки расхождения.
//  РазрезАналитики - Строка - разрес аналитики, как склад или как продавец.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица значений со строками расхождения.
//
Функция СтрокиРасхожденияПоТоварамСЧекомПродажи(ДокументОбъект , РазрезАналитики = "Склад") Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧекККМТовары.Номенклатура КАК Номенклатура,
	|	ЧекККМТовары.Характеристика КАК Характеристика,
	|	ЧекККМТовары.Количество КАК Количество,
	|	ЧекККМТовары.Склад КАК Склад,
	|	ЧекККМТовары.ЗаказПокупателя КАК ЗаказПокупателя
	|ПОМЕСТИТЬ ТаблицаОбъекта
	|ИЗ
	|	&Товары КАК ЧекККМТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОбъекта.Номенклатура КАК Номенклатура,
	|	ТаблицаОбъекта.Характеристика КАК Характеристика,
	|	ТаблицаОбъекта.Склад КАК Склад,
	|	ТаблицаОбъекта.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаОбъекта.Количество КАК КоличествоВозвратаТекущего,
	|	0 КАК КоличествоВозвратаПрошлого,
	|	0 КАК КоличествоПродажи
	|ПОМЕСТИТЬ ТаблицаОбщиеДанные
	|ИЗ
	|	ТаблицаОбъекта КАК ТаблицаОбъекта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМТовары.Номенклатура,
	|	ЧекККМТовары.Характеристика,
	|	ЧекККМТовары.Склад,
	|	ЧекККМТовары.ЗаказПокупателя,
	|	0,
	|	ЧекККМТовары.Количество,
	|	0
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|ГДЕ
	|	ЧекККМТовары.Ссылка.ЧекККМПродажа = &ЧекККМПродажа
	|	И ЧекККМТовары.Ссылка <> &Ссылка
	|	И ЧекККМТовары.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМТовары.Номенклатура,
	|	ЧекККМТовары.Характеристика,
	|	ЧекККМТовары.Склад,
	|	ЧекККМТовары.ЗаказПокупателя,
	|	0,
	|	0,
	|	ЧекККМТовары.Количество
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|ГДЕ
	|	ЧекККМТовары.Ссылка = &ЧекККМПродажа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбщиеДанные.Номенклатура КАК Номенклатура,
	|	ТаблицаОбщиеДанные.Характеристика КАК Характеристика,
	|	ТаблицаОбщиеДанные.Склад КАК Склад,
	|	ТаблицаОбщиеДанные.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ТаблицаОбщиеДанные.КоличествоПродажи) КАК КоличествоПродажи,
	|	СУММА(ТаблицаОбщиеДанные.КоличествоВозвратаТекущего) КАК КоличествоВозвратаТекущего,
	|	СУММА(ТаблицаОбщиеДанные.КоличествоВозвратаПрошлого) КАК КоличествоВозвратаПрошлого
	|ПОМЕСТИТЬ ТаблицаСгруппированная
	|ИЗ
	|	ТаблицаОбщиеДанные КАК ТаблицаОбщиеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОбщиеДанные.Склад,
	|	ТаблицаОбщиеДанные.Номенклатура,
	|	ТаблицаОбщиеДанные.Характеристика,
	|	ТаблицаОбщиеДанные.ЗаказПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Номенклатура) КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Характеристика) КАК Характеристика,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Склад) КАК Склад,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.ЗаказПокупателя) КАК ЗаказПокупателя,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаСгруппированная.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПродажаПоЗаказу,
	|	ТаблицаСгруппированная.КоличествоПродажи КАК КоличествоПродажи,
	|	ТаблицаСгруппированная.КоличествоВозвратаТекущего КАК КоличествоВозвратаТекущего,
	|	ТаблицаСгруппированная.КоличествоВозвратаПрошлого КАК КоличествоВозвратаПрошлого
	|ИЗ
	|	ТаблицаСгруппированная КАК ТаблицаСгруппированная
	|ГДЕ
	|	ТаблицаСгруппированная.КоличествоВозвратаТекущего > 0
	|	И ТаблицаСгруппированная.КоличествоВозвратаТекущего + ТаблицаСгруппированная.КоличествоВозвратаПрошлого > ТаблицаСгруппированная.КоличествоПродажи";
	
	Запрос.УстановитьПараметр("ЧекККМПродажа", ДокументОбъект.ЧекККМПродажа);
	Запрос.УстановитьПараметр("Ссылка"       , ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Товары"       , ДокументОбъект.Товары.Выгрузить());
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Склад", РазрезАналитики);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	

КонецФункции // СтрокиРасхожденияПоТоварамСЧекомПродажи()

// Получает строки расхождения по акцизным маркам при возврате.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - документ по которому ищутся расхождения.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица значений со строками расхождения.
//

Функция СтрокиРасхожденияПоАкцизнымМаркамСЧекомПродажи(ДокументОбъект) Экспорт
	
	ШтрихкодыУпаковок = ДокументОбъект["АкцизныеМарки"].Выгрузить().ВыгрузитьКолонку("АкцизнаяМарка");
	МаркированныеТовары = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(ШтрихкодыУпаковок).МаркированныеТовары;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЧекККМПродажа", ДокументОбъект.ЧекККМПродажа);
	Запрос.УстановитьПараметр("Ссылка"       , ДокументОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧекККМАкцизныеМарки.АкцизнаяМарка КАК АкцизнаяМарка
	|ИЗ
	|	Документ.ЧекККМ.АкцизныеМарки КАК ЧекККМАкцизныеМарки
	|ГДЕ
	|	ЧекККМАкцизныеМарки.Ссылка.ЧекККМПродажа = &ЧекККМПродажа
	|	И ЧекККМАкцизныеМарки.Ссылка <> &Ссылка
	|	И ЧекККМАкцизныеМарки.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧекККМАкцизныеМарки.АкцизнаяМарка КАК АкцизнаяМарка
	|ИЗ
	|	Документ.ЧекККМ.АкцизныеМарки КАК ЧекККМАкцизныеМарки
	|ГДЕ
	|	ЧекККМАкцизныеМарки.Ссылка = &ЧекККМПродажа";
	
	
	Результат = Запрос.ВыполнитьПакет();
	
	ШтрихкодыУпаковокВозвращеныРанее = Результат[0].Выгрузить().ВыгрузитьКолонку("АкцизнаяМарка");
	МаркированныеТоварыВозвращеныРанее = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(ШтрихкодыУпаковокВозвращеныРанее).МаркированныеТовары;
	
	ШтрихкодыУпаковокЧекаПродажи = Результат[1].Выгрузить().ВыгрузитьКолонку("АкцизнаяМарка");
	МаркированныеТоварыЧекаПродажи = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(ШтрихкодыУпаковокЧекаПродажи).МаркированныеТовары;
	
	ТекстОшибки = "";
	Для Каждого МаркированныйТовар Из МаркированныеТовары Цикл
		// Найдем марку в чеке продажи.
		Если МаркированныеТоварыЧекаПродажи.Найти(МаркированныйТовар.ШтрихкодУпаковки, "ШтрихкодУпаковки") = Неопределено Тогда
			ТекстОшибки = ТекстОшибки + ?(ТекстОшибки = "", "", Символы.ПС)
				+ СтрШаблон(НСтр("ru = 'Акцизная марка %1 не обнаружена в чеке продажи'"), МаркированныйТовар.Штрихкод);
		КонецЕсли;
		
		// Найдем марку в прочих чеках на возврат.
		Если НЕ МаркированныеТоварыВозвращеныРанее.Найти(МаркированныйТовар.ШтрихкодУпаковки, "ШтрихкодУпаковки") = Неопределено Тогда
			ТекстОшибки = ТекстОшибки + ?(ТекстОшибки = "", "", Символы.ПС)
				+ СтрШаблон(НСтр("ru = 'Акцизная марка %1 возвращена ранее'"), МаркированныйТовар.Штрихкод);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТекстОшибки;
	
КонецФункции

// Получает развернутые строки расхождения по оплате при возврате.
//
// Параметры:
//  ДокументОбъект - Документ - документ по которому ищутся расхождения.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица значений со строками расхождения.
//
Функция СтрокиРасхожденияПоБезналичнойОплатеСЧекомПродажи(ДокументОбъект, ДополнительнаяПроверкаБезналичнойОплаты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(ЧекККМОплата.ВидОплаты КАК Справочник.ВидыОплатЧекаККМ) КАК ВидОплаты,
	|	ЧекККМОплата.Сумма КАК Сумма
	|ПОМЕСТИТЬ ТабОплатаВсе
	|ИЗ
	|	&Оплата КАК ЧекККМОплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабОплатаВсе.ВидОплаты КАК ВидОплаты
	|ПОМЕСТИТЬ ТаблицаБезналичныхОплатВЧеке
	|ИЗ
	|	ТабОплатаВсе КАК ТабОплатаВсе
	|ГДЕ
	|	НЕ ТабОплатаВсе.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|	И НЕ ТабОплатаВсе.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом)
	|	И НЕ ТабОплатаВсе.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.БанковскийКредит)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМОплата.ВидОплаты КАК ВидОплаты,
	|	ЧекККМОплата.Сумма КАК Сумма
	|ПОМЕСТИТЬ ТаблицаБезналичныхОплатВДругихЧеках
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка.ЧекККМПродажа = &ЧекККМПродажа
	|	И НЕ ЧекККМОплата.Ссылка = &Ссылка
	|	И ЧекККМОплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|	И ЧекККМОплата.Ссылка.Проведен
	|	И НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|	И НЕ ЧекККМОплата.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом)
	|	И НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.БанковскийКредит)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМОплата.ВидОплаты КАК ВидОплаты,
	|	ЧекККМОплата.Сумма КАК Сумма
	|ПОМЕСТИТЬ ТаблицаБезналичныхОплатПродажи
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка = &ЧекККМПродажа
	|	И НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|	И НЕ ЧекККМОплата.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом)
	|	И НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.БанковскийКредит)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабОплатаВсе.ВидОплаты КАК ВидОплаты,
	|	ТабОплатаВсе.Сумма КАК СуммаВозврата,
	|	0 КАК СуммаПродажи
	|ПОМЕСТИТЬ ТаблицаОбщая
	|ИЗ
	|	ТабОплатаВсе КАК ТабОплатаВсе
	|ГДЕ
	|	НЕ ТабОплатаВсе.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|	И НЕ ТабОплатаВсе.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом)
	|	И НЕ ТабОплатаВсе.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.БанковскийКредит)
	|	И ТабОплатаВсе.ВидОплаты В
	|			(ВЫБРАТЬ
	|				ТаблицаБезналичныхОплатВЧеке.ВидОплаты КАК ВидОплаты
	|			ИЗ
	|				ТаблицаБезналичныхОплатВЧеке КАК ТаблицаБезналичныхОплатВЧеке)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМОплата.ВидОплаты,
	|	0,
	|	ЧекККМОплата.Сумма
	|ИЗ
	|	ТаблицаБезналичныхОплатПродажи КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.ВидОплаты В
	|			(ВЫБРАТЬ
	|				ТаблицаБезналичныхОплатВЧеке.ВидОплаты КАК ВидОплаты
	|			ИЗ
	|				ТаблицаБезналичныхОплатВЧеке КАК ТаблицаБезналичныхОплатВЧеке)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМОплата.ВидОплаты,
	|	ЧекККМОплата.Сумма,
	|	0
	|ИЗ
	|	ТаблицаБезналичныхОплатВДругихЧеках КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.ВидОплаты В
	|			(ВЫБРАТЬ
	|				ТаблицаБезналичныхОплатВЧеке.ВидОплаты КАК ВидОплаты
	|			ИЗ
	|				ТаблицаБезналичныхОплатВЧеке КАК ТаблицаБезналичныхОплатВЧеке)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбщая.ВидОплаты КАК ВидОплаты,
	|	СУММА(ТаблицаОбщая.СуммаВозврата) КАК СуммаВозврата,
	|	СУММА(ТаблицаОбщая.СуммаПродажи) КАК СуммаПродажи
	|ПОМЕСТИТЬ ТаблицаСгруппированная
	|ИЗ
	|	ТаблицаОбщая КАК ТаблицаОбщая
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОбщая.ВидОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСгруппированная.ВидОплаты КАК ВидОплаты,
	|	ТаблицаСгруппированная.СуммаВозврата КАК СуммаВозврата,
	|	ТаблицаСгруппированная.СуммаПродажи КАК СуммаПродажи,
	|	ТаблицаСгруппированная.ВидОплаты.ТипОплаты КАК ТипОплаты
	|ИЗ
	|	ТаблицаСгруппированная КАК ТаблицаСгруппированная
	|ГДЕ
	|	НЕ ТаблицаСгруппированная.СуммаВозврата = ТаблицаСгруппированная.СуммаПродажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаБезналичныхОплатВЧеке.ВидОплаты КАК ВидОплаты
	|ИЗ
	|	ТаблицаБезналичныхОплатВЧеке КАК ТаблицаБезналичныхОплатВЧеке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаБезналичныхОплатПродажи.ВидОплаты КАК ВидОплаты
	|ИЗ
	|	ТаблицаБезналичныхОплатПродажи КАК ТаблицаБезналичныхОплатПродажи";
	 
	Запрос.УстановитьПараметр("ЧекККМПродажа", ДокументОбъект.ЧекККМПродажа);
	Запрос.УстановитьПараметр("Ссылка"       , ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Оплата"       , ДокументОбъект.Оплата.Выгрузить());
	
	Результат = Запрос.ВыполнитьПакет();
	
	ДополнительнаяПроверкаБезналичнойОплаты = Результат[7].Пустой() И НЕ Результат[8].Пустой();
	
	Возврат Результат[6].Выгрузить();
	
КонецФункции // СтрокиРасхожденияПоБезналичнойОплатеСЧекомПродажи()

// Проверяет возможность возврата по чеку ККМ.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - документ по которому проверяется возможность возврата.
//  Отказ - Булево - Признак отказа от продолжения работы.
//  ТекстОшибки - Строка - строка ошибки пользователю.
//  ОсобыйВыводСообщения - Булево - признак особого вывода сообщения.
//  ОтдельноПроверитьВозможностьОплатыТолькоНаличными - Булево - признак возможности оплаты только наличными.
//  ОтдельноПроверитьВозможностьОплатыБанковскойКартой - Булево - признак возможности оплаты только банковской картой.
//  ПроверитьАкцизныеМарки - Булево - признак проверки акцизных марок.
//
Процедура ПроверитьВозможностьВозвратаПоЧекуККМ(
	ДокументОбъект,
	Отказ,
	ТекстОшибки = "",
	ОсобыйВыводСообщения = Ложь,
	ОтдельноПроверитьВозможностьОплатыТолькоНаличными = Ложь,
	ОтдельноПроверитьВозможностьОплатыБанковскойКартой = Ложь,
	ПроверитьАкцизныеМарки = Ложь) Экспорт


	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ЧекККМПродажа) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРасхождений = СтрокиРасхожденияПоТоварамСЧекомПродажи(ДокументОбъект, "Склад");
	
	Для Каждого СтрокаРасхождения Из ТаблицаРасхождений Цикл
		Если СтрокаРасхождения.ПродажаПоЗаказу Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 %2 попытка вернуть на склад ""%3"": %4 %5, продано по чеку (По заказу: %7 строка %8): %6 %5, возвращено ранее %9 %5'"),
				СтрокаРасхождения.Номенклатура,
				СтрокаРасхождения.Характеристика,
				СтрокаРасхождения.Склад,
				Строка(СтрокаРасхождения.КоличествоВозвратаТекущего),
				СтрокаРасхождения.ЕдиницаИзмерения,
				Строка(СтрокаРасхождения.КоличествоПродажи),
				СтрокаРасхождения.ЗаказПокупателя,
				СтрокаРасхождения.КодСтроки,
				Строка(СтрокаРасхождения.КоличествоВозвратаПрошлого)); // %9
		Иначе
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 %2 попытка вернуть на склад ""%3"": %4 %5, продано по чеку: %6 %5, возвращено ранее %7 %5'"),
				СтрокаРасхождения.Номенклатура,
				СтрокаРасхождения.Характеристика,
				СтрокаРасхождения.Склад,
				Строка(СтрокаРасхождения.КоличествоВозвратаТекущего),
				СтрокаРасхождения.ЕдиницаИзмерения,
				Строка(СтрокаРасхождения.КоличествоПродажи),
				Строка(СтрокаРасхождения.КоличествоВозвратаПрошлого)); // %7
		КонецЕсли;
		
		Если НЕ ОсобыйВыводСообщения Тогда
			ОбщегоНазначения.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			"Товары",
			,
			Отказ);
		Иначе
			Отказ = Истина;
		КонецЕсли;
		
		ТекстОшибки = ТекстОшибки + Символы.ПС + Текст;
	КонецЦикла;

	Если ВозможностьРасхожденияТоваровПоПродавцу(ДокументОбъект) Тогда
		ТаблицаРасхождений = СтрокиРасхожденияПоТоварамСЧекомПродажи(ДокументОбъект, "Продавец");
		
		Для Каждого СтрокаРасхождения Из ТаблицаРасхождений Цикл
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 %2 попытка оформить возврат на продавца ""%3"": %4 %5, продано по чеку: %6 %5, возвращено ранее %7 %5'"),
				СтрокаРасхождения.Номенклатура,
				СтрокаРасхождения.Характеристика,
				СтрокаРасхождения.Продавец,
				Строка(СтрокаРасхождения.КоличествоВозвратаТекущего),
				СтрокаРасхождения.ЕдиницаИзмерения,
				Строка(СтрокаРасхождения.КоличествоПродажи),
				Строка(СтрокаРасхождения.КоличествоВозвратаПрошлого)); // %7
			
			Если Не ОсобыйВыводСообщения Тогда
				ОбщегоНазначения.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"Товары",
				,
				Отказ);
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
			ТекстОшибки = ТекстОшибки + Символы.ПС + Текст;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ Отказ И ОтдельноПроверитьВозможностьОплатыТолькоНаличными Тогда
		
		ВозможнаяСуммаОплаты = ВозможнаяСуммаОплатыНаличнымиЧекаВозврата(ДокументОбъект);
		ПолнаяСуммаОплаты    = ДокументОбъект.Товары.Итог("СуммаВсего");
		
		Если ПолнаяСуммаОплаты > ВозможнаяСуммаОплаты ИЛИ ВозможнаяСуммаОплаты = 0 Тогда
			
			Если ВозможнаяСуммаОплаты <= 0 Тогда
				Текст = НСтр("ru = 'По чеку нет возможности вернуть наличными'");
			Иначе
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'По чеку продажи наличными можно вернуть только %1'"),
					ФормированиеПечатныхФормСервер.ФорматСумм(ВозможнаяСуммаОплаты));
			КонецЕсли;
			
			Текст = Текст + Символы.ПС + НСтр("ru = 'Используйте форму сложной оплаты'"); 
			
			Если НЕ ОсобыйВыводСообщения Тогда
				ОбщегоНазначения.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"Оплата",
				,
				Отказ);
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
			ТекстОшибки = ТекстОшибки + Символы.ПС + Текст;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ И ПроверитьАкцизныеМарки Тогда
		
		РезультатПроверки = СтрокиРасхожденияПоАкцизнымМаркамСЧекомПродажи(ДокументОбъект);
		Если НЕ РезультатПроверки = "" Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + РезультатПроверки;
			
			Если НЕ ОсобыйВыводСообщения Тогда
				ОбщегоНазначения.СообщитьПользователю(
				РезультатПроверки,
				ДокументОбъект,
				"Товары",
				,
				Отказ);
			Иначе
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ПроверитьВозможностьВозвратаПоЧекуККМ()

// Проверяет возможность провести оплату по возврату по чеку ККМ.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - документ по которому проверятся возможность проведения оплаты по возврату.
//  Отказ - Булево - Признак отказа от продолжения работы.
//  ТекстОшибки - Строка - текст сообщения об ошибке.
//  ОсобыйВыводСообщения - Булево - признак особого вывода сообщения.
//
Процедура ПроверитьВозможностьПровестиОплатуПоВозвратуЧекККМ(
	ДокументОбъект,
	Отказ,
	ТекстОшибки = "",
	ОсобыйВыводСообщения = Ложь) Экспорт


	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ЧекККМПродажа) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительнаяПроверкаБезналичнойОплаты = Ложь;
	ТаблицаРасхождений = СтрокиРасхожденияПоБезналичнойОплатеСЧекомПродажи(ДокументОбъект, ДополнительнаяПроверкаБезналичнойОплаты);
	
	Для Каждого СтрокаРасхождения Из ТаблицаРасхождений Цикл
		Если ДокументОбъект.ОперацияСДенежнымиСредствами Тогда
			Если СтрокаРасхождения.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ВРассрочку 
				ИЛИ СтрокаРасхождения.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ЗачетАванса Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли;
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 попытка вернуть: %2, оплачено по чеку: %3'"),
			СтрокаРасхождения.ВидОплаты,
			ФормированиеПечатныхФормСервер.ФорматСумм(СтрокаРасхождения.СуммаВозврата),
			ФормированиеПечатныхФормСервер.ФорматСумм(СтрокаРасхождения.СуммаПродажи));
		
		Если НЕ ОсобыйВыводСообщения Тогда
			ОбщегоНазначения.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			"Оплата",
			,
			Отказ);
		Иначе
			Отказ = Истина;
		КонецЕсли;
		
		ТекстОшибки = ТекстОшибки + Символы.ПС + Текст;
	КонецЦикла;
	
	Если НЕ Отказ И ДополнительнаяПроверкаБезналичнойОплаты Тогда
		
		ТаблицаВозможныхБезналичныхОплат = ПроверитьВозможностьИзОстаткаВернутьБезналичнымиВидамиОплат(ДокументОбъект);
		Если ТаблицаВозможныхБезналичныхОплат.Количество() = 0 Тогда
			Возврат
		КонецЕсли; 
		Текст = НСтр("ru = 'Необходимо выбрать безналичную оплату:'"); 
		
		Если НЕ ОсобыйВыводСообщения Тогда
			ОбщегоНазначения.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			"Оплата",
			,
			Отказ);
		Иначе
			Отказ = Истина;
		КонецЕсли;
		
		ТекстОшибки = ТекстОшибки + Символы.ПС + Текст;
		
		Для каждого СтрокаТаблицы Из ТаблицаВозможныхБезналичныхОплат Цикл
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 - сумма %2'"),
				СтрокаТаблицы.ВидОплаты,
				ФормированиеПечатныхФормСервер.ФорматСумм(СтрокаТаблицы.Сумма),);
			
			Если НЕ ОсобыйВыводСообщения Тогда
				ОбщегоНазначения.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"Оплата",
				,
				Отказ);
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
			ТекстОшибки = ТекстОшибки + Символы.ПС + Текст;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьВозможностьПровестиОплатуПоВозвратуЧекККМ()

// Проверяет корректность заполнения чека для пробития ККТ: отсутствие в документе строк с различными системами налогообложения.
//
// Параметры:
//  ДокументОбъект		 - ДокументОбъект - документ по которому проверяется корректность заполнения.
//  Отказ				 - Булево - Признак отказа от продолжения работы.
//  ТекстОшибки			 - Строка - Текст ошибки.
//  ОсобыйВыводСообщения - Булево - Признак особого вывода сообщений.
//
Процедура ПроверитьОтсутствиеРазличныхРежимовНалогообложения(
	ДокументОбъект,
	Отказ,
	ТекстОшибки = "",
	ОсобыйВыводСообщения = Ложь) Экспорт
	
	ТаблицаДанных = ДокументОбъект.Товары.Выгрузить(,"НомерСтроки, Номенклатура, Склад");
	ТаблицаДанных.Колонки.Добавить("ВидНалога", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыСистемНалогообложенияККТ"));	
	 
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьВидНалогаВТЧСервер(ТаблицаДанных, 
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровЗаполненияВидаНалога(ДокументОбъект));
		
	ЕстьРазличныеЗначения = Ложь;
	
	Если ТаблицаДанных.Количество() > 0 Тогда
		ВидНалогаПервойСтроки = ТаблицаДанных[0].ВидНалога;
		
		Для Инд = 1 По ТаблицаДанных.Количество() - 1 Цикл
			Если НЕ ВидНалогаПервойСтроки = ТаблицаДанных[Инд].ВидНалога Тогда
				ЕстьРазличныеЗначения = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьРазличныеЗначения Тогда
		
		Отказ = Истина;

		ТекстОшибки = НСтр("ru = 'В одном чеке, пробиваемом в ККТ с передачей данных, могут пробиваться товары с одной системой налогообложения. Для строки 1 определена ""%1"". Для строки %2 определена ""%3"".'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ТаблицаДанных[0].ВидНалога, Инд + 1, ТаблицаДанных[Инд].ВидНалога);
		
		Если НЕ ОсобыйВыводСообщения Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ДокументОбъект, "Товары",, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьОтсутствиеРазличныхРежимовНалогообложения()

// Проверяет корректность заполнения чека для пробития ККТ: отсутствие в документе номенклатуры с различными договорами платежных агентов.
//
// Параметры:
//  ДокументОбъект		 - ДокументОбъект - документ по которому проверяется корректность заполнения.
//  Отказ				 - Булево - Признак отказа от продолжения работы.
//  ТекстОшибки			 - Строка - Текст ошибки.
//  ОсобыйВыводСообщения - Булево - Признак особого вывода сообщений.
//
Процедура ПроверитьОтсутствиеРазличныхДоговоровПлатежныхАгентов(
	ДокументОбъект,
	Отказ,
	ТекстОшибки = "",
	ОсобыйВыводСообщения = Ложь) Экспорт
	
	РазличныеСклады = ДокументОбъект.Товары.Выгрузить(, "Склад");
	РазличныеСклады.Свернуть("Склад");
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура
	|ПОМЕСТИТЬ втТоварыДокумента
	|ИЗ
	|	&ТоварыДокумента КАК ТоварыДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникНоменклатура.ДоговорКонтрагента,
	|	МАКСИМУМ(ТоварыДокумента.Номенклатура) КАК Номенклатура,
	|	КОЛИЧЕСТВО(1) КАК Количество
	|ИЗ
	|	втТоварыДокумента КАК ТоварыДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТоварыДокумента.Номенклатура = СправочникНоменклатура.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СправочникНоменклатура.ДоговорКонтрагента";
	Запрос.УстановитьПараметр("ТоварыДокумента", ДокументОбъект.Товары.Выгрузить(, "Номенклатура"));
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Количество() > 1 Тогда
		
		Отказ = Истина;
		
		ТекстОшибки = НСтр("ru = 'В документе %1 использована номенклатура с различными договорами платежных агентов:'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДокументОбъект);
		Пока Результат.Следующий() Цикл
			Если Результат.Количество = 1 Тогда
				СтрокаОшибки = НСтр("ru = 'Номенклатура %1 - %2'");
			Иначе
				СтрокаОшибки = НСтр("ru = 'Номенклатура %1 (и еще %3) - %2'");
			КонецЕсли;
			Если Результат.ДоговорКонтрагента.Пустая() Тогда
				СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОшибки, Результат.Номенклатура, НСтр("ru = 'без договора'"), Результат.Количество - 1);
			Иначе
				СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОшибки, Результат.Номенклатура, Результат.ДоговорКонтрагента, Результат.Количество - 1);
			КонецЕсли;
			ТекстОшибки = ТекстОшибки + Символы.ПС + СтрокаОшибки;
		КонецЦикла;
		
		Если НЕ ОсобыйВыводСообщения Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ДокументОбъект, "Товары",, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьОтсутствиеРазличныхДоговоровПлатежныхАгентов()

// Получает развернутые строки расхождения по товарам при возврате.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - документ по которому ищутся строки расхождения по товарам с чеками.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица значений со строками расхождения.
//
Функция СтрокиРасхожденияПоТоварамСЧекамиККМ(ДокументОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	|	ВозвратТоваровОтПокупателяТовары.Характеристика,
	|	ВозвратТоваровОтПокупателяТовары.Количество,
	|	ВозвратТоваровОтПокупателяТовары.Продавец,
	|	ВозвратТоваровОтПокупателяТовары.ЧекККМ
	|ПОМЕСТИТЬ ТаблицаВозвратаВсе
	|ИЗ
	|	&ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателяТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаВозвратаВсе.Номенклатура,
	|	ТаблицаВозвратаВсе.Характеристика,
	|	ТаблицаВозвратаВсе.Количество,
	|	ТаблицаВозвратаВсе.Продавец,
	|	ТаблицаВозвратаВсе.ЧекККМ
	|ПОМЕСТИТЬ ТаблицаВозвратаПоЧекамККМ
	|ИЗ
	|	ТаблицаВозвратаВсе КАК ТаблицаВозвратаВсе
	|ГДЕ
	|	НЕ ТаблицаВозвратаВсе.ЧекККМ = ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаВозвратаПоЧекамККМ.ЧекККМ
	|ПОМЕСТИТЬ ТаблицаЧековККМ
	|ИЗ
	|	ТаблицаВозвратаПоЧекамККМ КАК ТаблицаВозвратаПоЧекамККМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК ЧекККМ
	|ПОМЕСТИТЬ ТаблицаЧековККМВозврат
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.ЧекККМПродажа В
	|			(ВЫБРАТЬ
	|				ТаблицаЧековККМ.ЧекККМ
	|			ИЗ
	|				ТаблицаЧековККМ КАК ТаблицаЧековККМ)
	|	И ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧекККМТоварыПродажи.Номенклатура,
	|	ЧекККМТоварыПродажи.Ссылка КАК ЧекККМ,
	|	ЧекККМТоварыПродажи.Характеристика,
	|	ЧекККМТоварыПродажи.Количество КАК КоличествоПродажи,
	|	ЧекККМТоварыПродажи.Продавец,
	|	0 КАК КоличествоВозвратаТекущего,
	|	0 КАК КоличествоВозвратаПрошлого
	|ПОМЕСТИТЬ ТаблицаОбщая
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТоварыПродажи
	|ГДЕ
	|	ЧекККМТоварыПродажи.Ссылка В
	|			(ВЫБРАТЬ
	|				ТаблицаЧековККМ.ЧекККМ
	|			ИЗ
	|				ТаблицаЧековККМ КАК ТаблицаЧековККМ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМТоварыПрошлого.Номенклатура,
	|	ЧекККМТоварыПрошлого.Ссылка,
	|	ЧекККМТоварыПрошлого.Характеристика,
	|	0,
	|	ЧекККМТоварыПрошлого.Продавец,
	|	0,
	|	ЧекККМТоварыПрошлого.Количество
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТоварыПрошлого
	|ГДЕ
	|	ЧекККМТоварыПрошлого.Ссылка.ЧекККМПродажа В
	|			(ВЫБРАТЬ
	|				ТаблицаЧековККМВозврат.ЧекККМ
	|			ИЗ
	|				ТаблицаЧековККМВозврат КАК ТаблицаЧековККМВозврат)
	|	И ЧекККМТоварыПрошлого.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателяТоварыПрошлого.Номенклатура,
	|	ВозвратТоваровОтПокупателяТоварыПрошлого.ЧекККМ,
	|	ВозвратТоваровОтПокупателяТоварыПрошлого.Характеристика,
	|	0,
	|	ВозвратТоваровОтПокупателяТоварыПрошлого.Продавец,
	|	0,
	|	ВозвратТоваровОтПокупателяТоварыПрошлого.Количество
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТоварыПрошлого
	|ГДЕ
	|	ВозвратТоваровОтПокупателяТоварыПрошлого.Ссылка.Проведен
	|	И ВозвратТоваровОтПокупателяТоварыПрошлого.ЧекККМ В
	|			(ВЫБРАТЬ
	|				ТаблицаЧековККМ.ЧекККМ
	|			ИЗ
	|				ТаблицаЧековККМ КАК ТаблицаЧековККМ)
	|	И ВозвратТоваровОтПокупателяТоварыПрошлого.Ссылка <> &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаВозвратаПоЧекамККМ.Номенклатура,
	|	ТаблицаВозвратаПоЧекамККМ.ЧекККМ,
	|	ТаблицаВозвратаПоЧекамККМ.Характеристика,
	|	0,
	|	ТаблицаВозвратаПоЧекамККМ.Продавец,
	|	ТаблицаВозвратаПоЧекамККМ.Количество,
	|	0
	|ИЗ
	|	ТаблицаВозвратаПоЧекамККМ КАК ТаблицаВозвратаПоЧекамККМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОбщая.Номенклатура,
	|	ТаблицаОбщая.ЧекККМ,
	|	ТаблицаОбщая.Характеристика,
	|	СУММА(ТаблицаОбщая.КоличествоПродажи) КАК КоличествоПродажи,
	|	ТаблицаОбщая.Продавец,
	|	СУММА(ТаблицаОбщая.КоличествоВозвратаТекущего) КАК КоличествоВозвратаТекущего,
	|	СУММА(ТаблицаОбщая.КоличествоВозвратаПрошлого) КАК КоличествоВозвратаПрошлого
	|ПОМЕСТИТЬ ТаблицаСгруппированная
	|ИЗ
	|	ТаблицаОбщая КАК ТаблицаОбщая
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОбщая.Номенклатура,
	|	ТаблицаОбщая.ЧекККМ,
	|	ТаблицаОбщая.Характеристика,
	|	ТаблицаОбщая.Продавец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Номенклатура) КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.ЧекККМ) КАК ЧекККМ,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Характеристика) КАК Характеристика,
	|	ТаблицаСгруппированная.КоличествоПродажи,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Продавец) КАК Продавец,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	ТаблицаСгруппированная.КоличествоВозвратаТекущего,
	|	ТаблицаСгруппированная.КоличествоВозвратаПрошлого
	|ИЗ
	|	ТаблицаСгруппированная КАК ТаблицаСгруппированная
	|ГДЕ
	|	ТаблицаСгруппированная.КоличествоВозвратаТекущего > 0
	|	И ТаблицаСгруппированная.КоличествоВозвратаТекущего + ТаблицаСгруппированная.КоличествоВозвратаПрошлого > ТаблицаСгруппированная.КоличествоПродажи";
	
	Запрос.УстановитьПараметр("ВозвратТоваровОтПокупателя", ДокументОбъект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
	
КонецФункции // СтрокиРасхожденияПоТоварамСЧекамиККМ()

// Получает развернутые строки расхождения по товарам при возврате по документам продажи.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - документ по которому ищутся строки расхождения по товарам.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица значений со строками расхождения.
//
Функция СтрокиРасхожденияПоТоварамПоДокументамПродажи(ДокументОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	|	ВозвратТоваровОтПокупателяТовары.Характеристика,
	|	ВозвратТоваровОтПокупателяТовары.Количество,
	|	ВозвратТоваровОтПокупателяТовары.Продавец,
	|	ВозвратТоваровОтПокупателяТовары.ДокументПродажи
	|ПОМЕСТИТЬ ТаблицаВозвратаВсе
	|ИЗ
	|	&ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателяТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	|	ВозвратТоваровОтПокупателяТовары.Характеристика,
	|	ВозвратТоваровОтПокупателяТовары.Количество,
	|	ВозвратТоваровОтПокупателяТовары.Продавец,
	|	ВозвратТоваровОтПокупателяТовары.ДокументПродажи
	|ПОМЕСТИТЬ ТаблицаВозврата
	|ИЗ
	|	ТаблицаВозвратаВсе КАК ВозвратТоваровОтПокупателяТовары
	|ГДЕ
	|	(НЕ ВозвратТоваровОтПокупателяТовары.ДокументПродажи В (&МассивПустыхДокументовПродажи))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаВозврата.ДокументПродажи
	|ПОМЕСТИТЬ ТаблицаДокументовПродажи
	|ИЗ
	|	ТаблицаВозврата КАК ТаблицаВозврата
	|ГДЕ
	|	(НЕ ТаблицаВозврата.ДокументПродажи В (&МассивПустыхДокументовПродажи))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровТовары.Ссылка КАК ДокументПродажи,
	|	РеализацияТоваровТовары.Номенклатура,
	|	РеализацияТоваровТовары.Характеристика,
	|	РеализацияТоваровТовары.Продавец КАК Продавец,
	|	РеализацияТоваровТовары.Количество КАК КоличествоПродажи,
	|	0 КАК КоличествоВозвратаТекущего,
	|	0 КАК КоличествоВозвратаПрошлого
	|ПОМЕСТИТЬ ТаблицаОбщая
	|ИЗ
	|	Документ.РеализацияТоваров.Товары КАК РеализацияТоваровТовары
	|ГДЕ
	|	РеализацияТоваровТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				ТаблицаДокументовПродажи.ДокументПродажи
	|			ИЗ
	|				ТаблицаДокументовПродажи КАК ТаблицаДокументовПродажи)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахТовары.Ссылка,
	|	ОтчетОРозничныхПродажахТовары.Номенклатура,
	|	ОтчетОРозничныхПродажахТовары.Характеристика,
	|	ОтчетОРозничныхПродажахТовары.Продавец,
	|	ОтчетОРозничныхПродажахТовары.Количество,
	|	0,
	|	0
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
	|ГДЕ
	|	ОтчетОРозничныхПродажахТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				ТаблицаДокументовПродажи.ДокументПродажи
	|			ИЗ
	|				ТаблицаДокументовПродажи КАК ТаблицаДокументовПродажи)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаВозврата.ДокументПродажи,
	|	ТаблицаВозврата.Номенклатура,
	|	ТаблицаВозврата.Характеристика,
	|	ТаблицаВозврата.Продавец,
	|	0,
	|	ТаблицаВозврата.Количество,
	|	0
	|ИЗ
	|	ТаблицаВозврата КАК ТаблицаВозврата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателяТовары.ДокументПродажи,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	|	ВозвратТоваровОтПокупателяТовары.Характеристика,
	|	ВозвратТоваровОтПокупателяТовары.Продавец,
	|	0,
	|	0,
	|	ВозвратТоваровОтПокупателяТовары.Количество
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|ГДЕ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка.Проведен
	|	И ВозвратТоваровОтПокупателяТовары.ДокументПродажи В
	|			(ВЫБРАТЬ
	|				ТаблицаДокументовПродажи.ДокументПродажи
	|			ИЗ
	|				ТаблицаДокументовПродажи КАК ТаблицаДокументовПродажи)
	|	И ВозвратТоваровОтПокупателяТовары.Ссылка <> &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбщая.ДокументПродажи,
	|	ТаблицаОбщая.Номенклатура,
	|	ТаблицаОбщая.Характеристика,
	|	ТаблицаОбщая.Продавец,
	|	СУММА(ТаблицаОбщая.КоличествоПродажи) КАК КоличествоПродажи,
	|	СУММА(ТаблицаОбщая.КоличествоВозвратаТекущего) КАК КоличествоВозвратаТекущего,
	|	СУММА(ТаблицаОбщая.КоличествоВозвратаПрошлого) КАК КоличествоВозвратаПрошлого
	|ПОМЕСТИТЬ ТаблицаСгруппированная
	|ИЗ
	|	ТаблицаОбщая КАК ТаблицаОбщая
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОбщая.ДокументПродажи,
	|	ТаблицаОбщая.Продавец,
	|	ТаблицаОбщая.Номенклатура,
	|	ТаблицаОбщая.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.ДокументПродажи) КАК ДокументПродажи,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Номенклатура) КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Характеристика) КАК Характеристика,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Продавец) КАК Продавец,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	ТаблицаСгруппированная.КоличествоПродажи,
	|	ТаблицаСгруппированная.КоличествоВозвратаТекущего,
	|	ТаблицаСгруппированная.КоличествоВозвратаПрошлого
	|ИЗ
	|	ТаблицаСгруппированная КАК ТаблицаСгруппированная
	|ГДЕ
	|	ТаблицаСгруппированная.КоличествоВозвратаТекущего > 0
	|	И ТаблицаСгруппированная.КоличествоВозвратаТекущего + ТаблицаСгруппированная.КоличествоВозвратаПрошлого > ТаблицаСгруппированная.КоличествоПродажи";
	
	
	Запрос.УстановитьПараметр("ВозвратТоваровОтПокупателя", ДокументОбъект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
	
	МассивПустыхДокументовПродажи = Новый Массив;
	МассивПустыхДокументовПродажи.Добавить(Документы.ОтчетОРозничныхПродажах.ПустаяСсылка());
	МассивПустыхДокументовПродажи.Добавить(Документы.РеализацияТоваров.ПустаяСсылка());
	МассивПустыхДокументовПродажи.Добавить(Неопределено);
	
	Запрос.УстановитьПараметр("МассивПустыхДокументовПродажи", МассивПустыхДокументовПродажи);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции  // СтрокиРасхожденияПоТоварамПоДокументамПродажи

// Проверяет возможность возврата по чеку ККМ.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - документ по которому проверяется возможность возврата.
//  Отказ - Булево - Признак отказа от продолжения работы.
//  ОбработкаОбъект - ОбработкаОбъект.РМКУправляемыйРежим - обработка из которой проверяется возможность возврата.
//
Процедура ПроверитьВозможностьВозвратаОтПокупателя(ДокументОбъект, Отказ, ОбработкаОбъект = Неопределено) Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		КлючДанныхВыводаСообщений = ДокументОбъект;
		ПолеВыводаСообщений = "Товары";
	Иначе
		КлючДанныхВыводаСообщений = ОбработкаОбъект;
		ПолеВыводаСообщений = "Объект.Товары";
	КонецЕсли;
	
	ТаблицаРасхождений = СтрокиРасхожденияПоТоварамСЧекамиККМ(ДокументОбъект); 
	
	Для Каждого СтрокаРасхождения Из ТаблицаРасхождений Цикл
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1%2 попытка оформить возврат на продавца ""%3"" по чеку (%4): %6 %5, продано по чеку: %7 %5, возвращено ранее  %8 %5'"),
			СтрокаРасхождения.Номенклатура, // %1
			СтрокаРасхождения.Характеристика, // %2
			СтрокаРасхождения.Продавец, // %3
			СтрокаРасхождения.ЧекККМ,// %4
			СтрокаРасхождения.ЕдиницаИзмерения,// %5
			Строка(СтрокаРасхождения.КоличествоВозвратаТекущего), // %6
			Строка(СтрокаРасхождения.КоличествоПродажи), // %7
			Строка(СтрокаРасхождения.КоличествоВозвратаПрошлого),);// %8
		
		ОбщегоНазначения.СообщитьПользователю(
		Текст,
		КлючДанныхВыводаСообщений,
		ПолеВыводаСообщений,
		,
		Отказ);
		
	КонецЦикла;
	
	ТаблицаРасхождений = СтрокиРасхожденияПоТоварамПоДокументамПродажи(ДокументОбъект); 
	
	Для Каждого СтрокаРасхождения Из ТаблицаРасхождений Цикл
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1%2 попытка оформить возврат на продавца ""%3"" по документу (%4): %6 %5, продано по документу: %7 %5, возвращено ранее  %8 %5'"),
			СтрокаРасхождения.Номенклатура, // %1
			СтрокаРасхождения.Характеристика, // %2
			СтрокаРасхождения.Продавец, // %3
			СтрокаРасхождения.ДокументПродажи,// %4
			СтрокаРасхождения.ЕдиницаИзмерения,// %5
			Строка(СтрокаРасхождения.КоличествоВозвратаТекущего), // %6
			Строка(СтрокаРасхождения.КоличествоПродажи), // %7
			Строка(СтрокаРасхождения.КоличествоВозвратаПрошлого),);// %8
		
		ОбщегоНазначения.СообщитьПользователю(
		Текст,
		КлючДанныхВыводаСообщений,
		ПолеВыводаСообщений,
		,
		Отказ);
		
	КонецЦикла;
	
	ТаблицаРасхождений = СкидкиНаценкиСерверПереопределяемый.РасхожденияДисконтныхКартВозвратаИПродаж(ДокументОбъект);
	СтрокаСообщения = НСтр("ru = 'В строке ""%1"" выбрана дисконтная карта ""%2"", не совпадающая с дисконтной картой покупателя'");
	Для Каждого СтрокаРасхождения Из ТаблицаРасхождений Цикл
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтрокаРасхождения.НомерСтрокиОснования, СтрокаРасхождения.ДисконтнаяКарта);
		
		ОбщегоНазначения.СообщитьПользователю(
		Текст,
		КлючДанныхВыводаСообщений,
		ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПолеВыводаСообщений, СтрокаРасхождения.НомерСтрокиОснования, СтрокаРасхождения.Основание),
		,
		Отказ);
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьВозможностьВозвратаОтПокупателя()

// Возвращает структуру значений кассовой дисциплины выемки при закрытии смены.
//
// Параметры:
//   КассаККМ - СправочникСсылка.КассыККМ - касса ККМ по которой закрывается кассовая смена и ищутся значения кассовой дисциплины.
//
// Возвращаемое значение:
//   Структура - структура кассовой дисциплины.
//
Функция КассоваяДисциплинаВыемкиПриЗакрытииСмены(КассаККМ) Экспорт
	
	// Значения по умолчанию.
	СтруктураКассовойДисциплины = Новый Структура;
	СтруктураКассовойДисциплины.Вставить("ТипВыемкиПриЗакрытииСмены", Перечисления.ТипыВыемкиПриЗакрытииСмены.ПроизводитьПолнуюВыемку);
	СтруктураКассовойДисциплины.Вставить("МаксимальнаяСуммаРазмена",  0);
	СтруктураКассовойДисциплины.Вставить("ЗапрашиватьСуммуВыемки",    Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяДисциплинаВыемкиПриЗакрытииСмены.ТипВыемкиПриЗакрытииСмены,
	|	КассоваяДисциплинаВыемкиПриЗакрытииСмены.МаксимальнаяСуммаРазмена,
	|	ВЫБОР
	|		КОГДА КассоваяДисциплинаВыемкиПриЗакрытииСмены.ТипВыемкиПриЗакрытииСмены = ЗНАЧЕНИЕ(Перечисление.ТипыВыемкиПриЗакрытииСмены.ОставитьСуммуРазменаВКассеККМ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗапрашиватьСуммуВыемки
	|ИЗ
	|	РегистрСведений.КассоваяДисциплинаВыемкиПриЗакрытииСмены КАК КассоваяДисциплинаВыемкиПриЗакрытииСмены
	|ГДЕ
	|	КассоваяДисциплинаВыемкиПриЗакрытииСмены.Организация = &Организация
	|	И КассоваяДисциплинаВыемкиПриЗакрытииСмены.Магазин = &Магазин";
	
	Запрос.УстановитьПараметр("Организация", КассаККМ.Владелец);
	Запрос.УстановитьПараметр("Магазин"    , КассаККМ.Магазин);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураКассовойДисциплины, Выборка);
	КонецЕсли;
	
	Возврат СтруктураКассовойДисциплины;
	
КонецФункции

Функция ВозможнаяСуммаОплатыНаличнымиНепроведенногоЧекаВозврата(ЧекККМПродажа) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМОплата.ВидОплаты КАК ВидОплаты,
	|	ЧекККМОплата.Сумма КАК Сумма
	|ПОМЕСТИТЬ ТаблицаОбщая
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка = &ЧекККМПродажа
	|	И (ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|			ИЛИ ЧекККМОплата.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМОплата.ВидОплаты,
	|	ЧекККМОплата.Сумма
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка = &ДокументРасчета
	|	И ЧекККМОплата.Ссылка.ОперацияСДенежнымиСредствами
	|	И (ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|			ИЛИ ЧекККМОплата.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Наличные,
	|	ПриходныйКассовыйОрдер.СуммаДокумента
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Ссылка = &ДокументРасчета
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбщая.ВидОплаты КАК ВидОплаты,
	|	ТаблицаОбщая.Сумма КАК Сумма
	|ИЗ
	|	ТаблицаОбщая КАК ТаблицаОбщая";
	
	Запрос.УстановитьПараметр("ЧекККМПродажа"  , ЧекККМПродажа);
	Запрос.УстановитьПараметр("ДокументРасчета", ЧекККМПродажа.ДокументРасчета);
	Запрос.УстановитьПараметр("Наличные"       , Справочники.ВидыОплатЧекаККМ.Наличные);
	
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	Возврат ТаблицаЗапроса.Итог("Сумма");

КонецФункции // ВозможнаяСуммаОплатыНаличнымиЧекаВозврата()

//Проверяет систему налогообложения в документе.
// Параметры:
//  ДокументОбъект - ДокументОбъект - документ по которому проверяется система налогообложения.
//  Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьСистемуНалогообложения(ДокументОбъект, Отказ) Экспорт
	
	СистемаНалогообложения = ДокументОбъект.СистемаНалогообложения;
	
	Если СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД И ДокументОбъект.Дата > Дата('20210101') Тогда //Объект.Дата если документ
		
		Текст = НСтр("ru = 'В документе используется недопустимая система налогообложения. ЕНВД запрещена к использованию с 01.01.2021. Необходимо изменить систему налогообложения организации.'");
		
		ОбщегоНазначения.СообщитьПользователю(
		Текст,
		ДокументОбъект,
		,
		,
		Отказ);
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВозможностьРасхожденияТоваровПоПродавцу(ДокументОбъект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧекККМТовары.Номенклатура,
	|	ЧекККМТовары.Характеристика,
	|	ЧекККМТовары.Количество,
	|	ЧекККМТовары.Продавец
	|ПОМЕСТИТЬ ТаблицаПродажи
	|ИЗ
	|	&Товары КАК ЧекККМТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПродажи.Номенклатура,
	|	ТаблицаПродажи.Характеристика,
	|	ТаблицаПродажи.Количество КАК КоличествоВозврата,
	|	ТаблицаПродажи.Продавец
	|ИЗ
	|	ТаблицаПродажи КАК ТаблицаПродажи
	|ГДЕ
	|	НЕ ТаблицаПродажи.Продавец = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМТовары.Номенклатура,
	|	ЧекККМТовары.Характеристика,
	|	ЧекККМТовары.Количество,
	|	ЧекККМТовары.Продавец
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|ГДЕ
	|	ЧекККМТовары.Ссылка.ЧекККМПродажа = &ЧекККМПродажа
	|	И НЕ ЧекККМТовары.Продавец = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	И ЧекККМТовары.Ссылка <> &Ссылка
	|	И ЧекККМТовары.Ссылка.Проведен";
	
	Запрос.УстановитьПараметр("ЧекККМПродажа", ДокументОбъект.ЧекККМПродажа);
	Запрос.УстановитьПараметр("Ссылка"       , ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Товары"       , ДокументОбъект.Товары.Выгрузить());
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
	
КонецФункции // ВозможностьРасхожденияТоваровПоПродавцу()

Функция ВозможнаяСуммаОплатыНаличнымиЧекаВозврата(ДокументОбъект)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМОплата.ВидОплаты КАК ВидОплаты,
	|	ЧекККМОплата.Сумма КАК Сумма
	|ПОМЕСТИТЬ ТаблицаОбщая
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка = &ЧекККМПродажа
	|	И (ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|			ИЛИ ЧекККМОплата.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМОплата.ВидОплаты,
	|	ЧекККМОплата.Сумма
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка = &ДокументРасчета
	|	И ЧекККМОплата.Ссылка.ОперацияСДенежнымиСредствами
	|	И (ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|			ИЛИ ЧекККМОплата.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Наличные,
	|	ПриходныйКассовыйОрдер.СуммаДокумента
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Ссылка = &ДокументРасчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМОплата.ВидОплаты,
	|	-ЧекККМОплата.Сумма
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка.ЧекККМПродажа = &ЧекККМПродажа
	|	И НЕ ЧекККМОплата.Ссылка = &Ссылка
	|	И ЧекККМОплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|	И ЧекККМОплата.Ссылка.Проведен
	|	И (ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|			ИЛИ ЧекККМОплата.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбщая.ВидОплаты КАК ВидОплаты,
	|	ТаблицаОбщая.Сумма КАК Сумма
	|ИЗ
	|	ТаблицаОбщая КАК ТаблицаОбщая";
	
	Запрос.УстановитьПараметр("ЧекККМПродажа"  , ДокументОбъект.ЧекККМПродажа);
	Запрос.УстановитьПараметр("ДокументРасчета", ДокументОбъект.ЧекККМПродажа.ДокументРасчета);
	Запрос.УстановитьПараметр("Ссылка"         , ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Наличные"       , Справочники.ВидыОплатЧекаККМ.Наличные);
	
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	Возврат ТаблицаЗапроса.Итог("Сумма");

КонецФункции // ВозможнаяСуммаОплатыНаличнымиЧекаВозврата()

Процедура ПолучитьСуммыПоВидуОплат(ДокументОбъект, СуммаНаличнойОплаты, СуммаБезналичнойОплаты)

	СуммаНаличнойОплаты = 0;
	СуммаБезналичнойОплаты = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Оплата.ВидОплаты,
	|	Оплата.Сумма
	|ПОМЕСТИТЬ ТаблицаОплат
	|ИЗ
	|	&Оплата КАК Оплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаОплат.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ПустаяСсылка)
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ТаблицаОплат.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|						ТОГДА ТаблицаОплат.Сумма
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОНЕЦ) КАК СуммаНаличнойОплаты,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаОплат.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ПустаяСсылка)
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА (НЕ ТаблицаОплат.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные))
	|						ТОГДА ТаблицаОплат.Сумма
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОНЕЦ) КАК СуммаБезналичнойОплаты
	|ИЗ
	|	ТаблицаОплат КАК ТаблицаОплат";
	
	Запрос.УстановитьПараметр("Оплата", ДокументОбъект.Оплата.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		Если ЗначениеЗаполнено(Выборка.СуммаНаличнойОплаты) Тогда
			СуммаНаличнойОплаты = Выборка.СуммаНаличнойОплаты;
		КонецЕсли; 
	
		Если ЗначениеЗаполнено(Выборка.СуммаБезналичнойОплаты) Тогда
			СуммаБезналичнойОплаты = Выборка.СуммаБезналичнойОплаты;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьСуммыПоВидуОплат()

Функция ПолучитьТаблицуЗаполненияПоПоставщикам(ЭтоЧекККМ, ТекущаяСтрокаТоваров, ЭтоРасшифровка = Ложь) Экспорт
	
	ТипЧисло = Новый Массив;
	ТипЧисло.Добавить(Тип("Число"));
	
	ТипСтрока = Новый Массив;
	ТипСтрока.Добавить(Тип("Строка"));
	
	ТипБулево = Новый Массив;
	ТипБулево.Добавить(Тип("Булево"));
	
	Типы = Новый Массив;
	Типы.Добавить(Тип("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Типы.Добавить(Тип("СправочникСсылка.УпаковкиНоменклатуры"));
	Типы.Добавить(Тип("СправочникСсылка.Номенклатура"));
	Типы.Добавить(Тип("СправочникСсылка.Склады"));
	Типы.Добавить(Тип("СправочникСсылка.Организации"));
	Типы.Добавить(Тип("СправочникСсылка.НомераГТД"));
	Типы.Добавить(Тип("ПеречислениеСсылка.СтавкиНДС"));
	
	Если ЭтоРасшифровка Тогда 
		Типы.Добавить(Тип("СправочникСсылка.Контрагенты"));
		Типы.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	КонецЕсли;  
	
	ТипыТаблицыТоваров = Новый ОписаниеТипов(Типы);
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура",       ТипыТаблицыТоваров);
	ТаблицаТоваров.Колонки.Добавить("Характеристика",     ТипыТаблицыТоваров);
	ТаблицаТоваров.Колонки.Добавить("Упаковка",           ТипыТаблицыТоваров);
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС",          ТипыТаблицыТоваров);
	ТаблицаТоваров.Колонки.Добавить("Организация",        ТипыТаблицыТоваров);
	ТаблицаТоваров.Колонки.Добавить("НомерГТД",           ТипыТаблицыТоваров);
	
	Если ЭтоРасшифровка Тогда
		ТаблицаТоваров.Колонки.Добавить("Контрагент",     ТипыТаблицыТоваров);
		ТаблицаТоваров.Колонки.Добавить("Договор",        ТипыТаблицыТоваров);
	КонецЕсли;
	
	ТаблицаТоваров.Колонки.Добавить("КлючСвязи",          Новый ОписаниеТипов(ТипЧисло,,,Новый КвалификаторыЧисла(5,0)));      
	ТаблицаТоваров.Колонки.Добавить("Количество",         Новый ОписаниеТипов(ТипЧисло,,,Новый КвалификаторыЧисла(15,3)));
	ТаблицаТоваров.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов(ТипЧисло,,,Новый КвалификаторыЧисла(15,3)));
	ТаблицаТоваров.Колонки.Добавить("Цена",               Новый ОписаниеТипов(ТипЧисло,,,Новый КвалификаторыЧисла(15,2))); 
	ТаблицаТоваров.Колонки.Добавить("СуммаВсего",         Новый ОписаниеТипов(ТипЧисло,,,Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("Сумма",              Новый ОписаниеТипов(ТипЧисло,,,Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("Штрихкод",           Новый ОписаниеТипов(ТипСтрока,,,,Новый КвалификаторыСтроки()));
	ТаблицаТоваров.Колонки.Добавить("ПродажаПодарка",     Новый ОписаниеТипов(ТипБулево,,,,,,));      
	ТаблицаТоваров.Колонки.Добавить("ПроцентАвтоматическойСкидки", Новый ОписаниеТипов(ТипЧисло,,,Новый КвалификаторыЧисла(5,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАвтоматическойСкидки",   Новый ОписаниеТипов(ТипЧисло,,,Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроцентРучнойСкидки",         Новый ОписаниеТипов(ТипЧисло,,,Новый КвалификаторыЧисла(5,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаРучнойСкидки",           Новый ОписаниеТипов(ТипЧисло,,,Новый КвалификаторыЧисла(15,2)));
	
	Если  ЭтоЧекККМ Тогда
		ТаблицаТоваров.Колонки.Добавить("Склад",      ТипыТаблицыТоваров);
	КонецЕсли;
	
	НоваяСтрокаТоваров = ТаблицаТоваров.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров, ТекущаяСтрокаТоваров);
	
	Если ТекущаяСтрокаТоваров.Свойство("Оприходование") Тогда
		НоваяСтрокаТоваров.Цена = ТекущаяСтрокаТоваров.ЦенаОприходования;
	КонецЕсли;
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляРасшифровкиПоПоставщикам(Объект, ЭтоЧекККМ) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Товары.КлючСвязи КАК КлючСвязи,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Количество КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.Упаковка КАК Упаковка,
	|	&Склад КАК Склад,
	|	&Организация КАК Организация,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	Товары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	Товары.Штрихкод КАК Штрихкод,
	|	Товары.Цена КАК Цена
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	&ТаблицаТоваров КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.КлючСвязи КАК КлючСвязи,
	|	ДанныеДокумента.Номенклатура КАК Номенклатура,
	|	ДанныеДокумента.Характеристика КАК Характеристика,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ТоварыОрганизацийОстаткиИОбороты.Поставщик КАК Поставщик,
	|	ДанныеДокумента.Склад КАК Склад,
	|	ТоварыОрганизацийОстаткиИОбороты.Договор КАК Договор,
	|	ТоварыОрганизацийОстаткиИОбороты.НомерГТД КАК НомерГТД,
	|	ДанныеДокумента.Упаковка КАК Упаковка,
	|	СУММА(ТоварыОрганизацийОстаткиИОбороты.КоличествоКонечныйОстаток) КАК КоличествоОстаток,
	|	МАКСИМУМ(ТоварыОрганизацийОстаткиИОбороты.ПериодДень) КАК ПериодДень
	|ПОМЕСТИТЬ ОстаткиПоГТД
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций.ОстаткиИОбороты(, , Авто, , ) КАК ТоварыОрганизацийОстаткиИОбороты
	|		ПО ДанныеДокумента.Номенклатура = ТоварыОрганизацийОстаткиИОбороты.Номенклатура
	|			И ДанныеДокумента.Характеристика = ТоварыОрганизацийОстаткиИОбороты.Характеристика
	|			И ДанныеДокумента.Склад = ТоварыОрганизацийОстаткиИОбороты.Склад
	|			И ДанныеДокумента.Организация = ТоварыОрганизацийОстаткиИОбороты.Организация
	|ГДЕ
	|	ТоварыОрганизацийОстаткиИОбороты.КоличествоКонечныйОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Номенклатура,
	|	ТоварыОрганизацийОстаткиИОбороты.Поставщик,
	|	ДанныеДокумента.Характеристика,
	|	ДанныеДокумента.Упаковка,
	|	ТоварыОрганизацийОстаткиИОбороты.НомерГТД,
	|	ДанныеДокумента.Склад,
	|	ТоварыОрганизацийОстаткиИОбороты.Договор,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КлючСвязи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Организация,
	|	Склад,
	|	Поставщик,
	|	Договор,
	|	НомерГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыОрганизацийОстатки.Номенклатура      КАК Номенклатура,
	|	ТоварыОрганизацийОстатки.Характеристика    КАК Характеристика,
	|	ТоварыОрганизацийОстатки.Склад             КАК Склад,
	|	ТоварыОрганизацийОстатки.Организация       КАК Организация,
	|	ТоварыОрганизацийОстатки.Поставщик         КАК Поставщик,
	|	ТоварыОрганизацийОстатки.Договор           КАК Договор,
	|	ТоварыОрганизацийОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ВЫБОР
	|		КОГДА &ПриоритетПоСобственномуТовару
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыОрганизацийОстатки.Поставщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТоварыОрганизацийОстатки.Поставщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ                              КАК Приоритет,
	|	ДанныеДокумента.КлючСвязи          КАК КлючСвязи,
	|	ДанныеДокумента.Количество         КАК Количество,
	|	ДанныеДокумента.Упаковка           КАК Упаковка,
	|	ДанныеДокумента.СтавкаНДС          КАК СтавкаНДС,
	|	ДанныеДокумента.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ДанныеДокумента.Цена               КАК Цена,
	|	ДанныеДокумента.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ДанныеДокумента.ПроцентРучнойСкидки         КАК ПроцентРучнойСкидки,
	|	ДанныеДокумента.Штрихкод                    КАК Штрихкод,
	|	ТоварыОрганизацийОстатки.НомерГТД           КАК НомерГТД
	|ПОМЕСТИТЬ ОстаткиПоПриоритетам
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций.Остатки(&НаДату, ) КАК ТоварыОрганизацийОстатки
	|		ПО ДанныеДокумента.Номенклатура = ТоварыОрганизацийОстатки.Номенклатура
	|			И ДанныеДокумента.Характеристика = ТоварыОрганизацийОстатки.Характеристика
	|			И ДанныеДокумента.Организация = ТоварыОрганизацийОстатки.Организация
	|			И ДанныеДокумента.Склад = ТоварыОрганизацийОстатки.Склад
	|ГДЕ
	|	ТоварыОрганизацийОстатки.КоличествоОстаток > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Организация,
	|	Склад,
	|	Поставщик,
	|	Договор,
	|	НомерГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПоПриоритетам.Организация    КАК Организация,
	|	ОстаткиПоПриоритетам.Склад          КАК Склад,
	|	ОстаткиПоПриоритетам.Поставщик      КАК Поставщик,
	|	ОстаткиПоПриоритетам.Договор        КАК Договор,
	|	ВЫБОР
	|		КОГДА ОстаткиПоПриоритетам.Поставщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ОстаткиПоПриоритетам.СтавкаНДС
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ОстаткиПоПриоритетам.Поставщик.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.ТипыСистемНалогообложенияККТ.ОСН)
	|					ТОГДА ОстаткиПоПриоритетам.Номенклатура.СтавкаНДС
	|				ИНАЧЕ ОстаткиПоПриоритетам.СтавкаНДС
	|			КОНЕЦ
	|	КОНЕЦ КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ОстаткиПоПриоритетам.Поставщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(&ЦенаВключаетНДС, ИСТИНА)
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                КАК ЦенаВключаетНДС,
	|	ОстаткиПоПриоритетам.КлючСвязи       КАК КлючСвязи,
	|	ОстаткиПоПриоритетам.Номенклатура    КАК Номенклатура,
	|	ОстаткиПоПриоритетам.Характеристика  КАК Характеристика,
	|	ОстаткиПоПриоритетам.Упаковка        КАК Упаковка,
	|	ЕСТЬNULL(ОстаткиПоПриоритетам.Количество, 0)         КАК Количество,
	|	ЕСТЬNULL(ОстаткиПоПриоритетам.КоличествоУпаковок, 0) КАК КоличествоУпаковок,
	|	ЕСТЬNULL(ОстаткиПоПриоритетам.КоличествоОстаток, 0)  КАК Остаток,
	|	ЕСТЬNULL(ОстаткиПоПриоритетам.Цена, 0)               КАК Цена,
	|	ОстаткиПоПриоритетам.Приоритет                       КАК Приоритет,
	|	ЕСТЬNULL(ОстаткиПоПриоритетам.ПроцентАвтоматическойСкидки, 0) КАК ПроцентАвтоматическойСкидки,
	|	ЕСТЬNULL(ОстаткиПоПриоритетам.ПроцентРучнойСкидки, 0)         КАК ПроцентРучнойСкидки,
	|	ОстаткиПоПриоритетам.Штрихкод                                 КАК Штрихкод,
	|	ОстаткиПоГТД.НомерГТД                                         КАК НомерГТД,
	|	ОстаткиПоГТД.ПериодДень                                       КАК ПериодДень
	|ИЗ
	|	ОстаткиПоГТД КАК ОстаткиПоГТД
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПоПриоритетам КАК ОстаткиПоПриоритетам
	|		ПО (ОстаткиПоПриоритетам.Номенклатура = ОстаткиПоГТД.Номенклатура)
	|			И (ОстаткиПоПриоритетам.Характеристика = ОстаткиПоГТД.Характеристика)
	|			И (ОстаткиПоПриоритетам.Организация = ОстаткиПоГТД.Организация)
	|			И (ОстаткиПоПриоритетам.Склад = ОстаткиПоГТД.Склад)
	|			И (ОстаткиПоПриоритетам.Поставщик = ОстаткиПоГТД.Поставщик)
	|			И (ОстаткиПоПриоритетам.Договор = ОстаткиПоГТД.Договор)
	|			И (ОстаткиПоПриоритетам.НомерГТД = ОстаткиПоГТД.НомерГТД)
	|ГДЕ
	|	ОстаткиПоПриоритетам.Количество > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Приоритет,
	|	ПериодДень
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика";
	
	Если ЭтоЧекККМ Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Склад", "Товары.Склад");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СтруктураДляПроверкиАкцизныхМарок() Экспорт 
	
	СтруктураПроверкиМарок = Новый Структура;
	СтруктураПроверкиМарок.Вставить("Объект");
	СтруктураПроверкиМарок.Вставить("ИмяТаблицыТоваров");
	СтруктураПроверкиМарок.Вставить("Отказ");
	СтруктураПроверкиМарок.Вставить("ИтоговоеСообщение", "");
	СтруктураПроверкиМарок.Вставить("ДатаРасчета", Неопределено);
	СтруктураПроверкиМарок.Вставить("Сообщать", Истина);
	
	Возврат СтруктураПроверкиМарок;
	
КонецФункции

// Проверяется возможность последующих возвратов безналичными
//
// Комментарии. Предполагается что до этого была проверка на условия
//    1. В текущем возвращаемом чеке нет безналичных оплат
//    2. В чеке продажи есть безналичные оплаты
Функция ПроверитьВозможностьИзОстаткаВернутьБезналичнымиВидамиОплат(ДокументОбъект)
	
	ЧекККМПродажа          = ДокументОбъект.ЧекККМПродажа;
	СуммаДокументаПродажи  = ЧекККМПродажа.СуммаДокумента;
	СуммаДокументаВозврата = ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаДокумента(ДокументОбъект.Товары, ДокументОбъект.ЦенаВключаетНДС);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ЧекККМ.СуммаДокумента) КАК СуммаДокумента
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.ЧекККМПродажа = &ЧекККМПродажа
	|	И НЕ ЧекККМ.Ссылка = &Ссылка
	|	И ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|	И ЧекККМ.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЧекККМОплата.Сумма) КАК Сумма,
	|	ЧекККМОплата.ВидОплаты
	|ПОМЕСТИТЬ ТаблицаБезналичныхОплатВозвратов
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка.ЧекККМПродажа = &ЧекККМПродажа
	|	И НЕ ЧекККМОплата.Ссылка = &Ссылка
	|	И ЧекККМОплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|	И ЧекККМОплата.Ссылка.Проведен
	|	И НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|	И НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ЗачетАванса)
	|	И НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ВРассрочку)
	|	И НЕ ЧекККМОплата.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМОплата.ВидОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЧекККМОплата.Сумма) КАК Сумма
	|ИЗ
	|	ТаблицаБезналичныхОплатВозвратов КАК ЧекККМОплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЧекККМОплата.Сумма) КАК Сумма,
	|	ЧекККМОплата.ВидОплаты
	|ПОМЕСТИТЬ ТаблицаБезналичныхОплатПродаж
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка = &ЧекККМПродажа
	|	И ЧекККМОплата.Ссылка.Проведен
	|	И НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|	И НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ЗачетАванса)
	|	И НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ВРассрочку)
	|	И НЕ ЧекККМОплата.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМОплата.ВидОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЧекККМОплата.Сумма) КАК Сумма
	|ИЗ
	|	ТаблицаБезналичныхОплатПродаж КАК ЧекККМОплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ВидОплаты,
	|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		-ТаблицаБезналичныхОплатВозвратов.Сумма КАК Сумма,
	|		ТаблицаБезналичныхОплатВозвратов.ВидОплаты КАК ВидОплаты
	|	ИЗ
	|		ТаблицаБезналичныхОплатВозвратов КАК ТаблицаБезналичныхОплатВозвратов
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаБезналичныхОплатПродаж.Сумма,
	|		ТаблицаБезналичныхОплатПродаж.ВидОплаты
	|	ИЗ
	|		ТаблицаБезналичныхОплатПродаж КАК ТаблицаБезналичныхОплатПродаж) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ВидОплаты
	|
	|ИМЕЮЩИЕ
	|	НЕ СУММА(ВложенныйЗапрос.Сумма) = 0";
	
	Запрос.УстановитьПараметр("ЧекККМПродажа", ЧекККМПродажа);
	Запрос.УстановитьПараметр("Ссылка"       , ДокументОбъект.Ссылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[0].Выбрать();
	
	СуммаПредыдущихВозвратов = 0;
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.СуммаДокумента) Тогда
			СуммаПредыдущихВозвратов = Выборка.СуммаДокумента;
		КонецЕсли;
	КонецЕсли;
	
	СуммаОстаткаВозможногоВозврата = СуммаДокументаПродажи - СуммаДокументаВозврата - СуммаПредыдущихВозвратов;
	
	Выборка = Результат[2].Выбрать();
	
	СуммаВозвращенныхБезналичныхОплат = 0;
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Сумма) Тогда
			СуммаВозвращенныхБезналичныхОплат = Выборка.Сумма;
		КонецЕсли;
	КонецЕсли;
	
	Выборка = Результат[4].Выбрать();
	
	СуммаБезналичныхОплат = 0;
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Сумма) Тогда
			СуммаБезналичныхОплат = Выборка.Сумма;
		КонецЕсли;
	КонецЕсли;
	
	СуммаВозможныхБезналичныхОплат = СуммаБезналичныхОплат - СуммаВозвращенныхБезналичныхОплат;
	
	ТаблицаВозможныхБезналичныхОплат = Результат[5].Выгрузить();
	Если СуммаВозможныхБезналичныхОплат <= СуммаОстаткаВозможногоВозврата Тогда
		ТаблицаВозможныхБезналичныхОплат.Очистить()
	КонецЕсли;
	
	Возврат ТаблицаВозможныхБезналичныхОплат;
	
КонецФункции

Функция РаспределитьШтрихкодыПоТаблицеТоваров(ДокументОбъект, МассивУпаковок, Товары) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументОбъект.Ссылка);
	ПараметрыУказанияСерий = МенеджерОбъекта.ПараметрыУказанияСерий(ДокументОбъект);
	
	ПараметрыРаспределения = ШтрихкодированиеИСМП.НовыеПараметрыРаспределенияШтрихкодовУпаковок();
	Если ТипЗнч(ДокументОбъект) = Тип("ДанныеФормыСтруктура") Тогда
		ПараметрыРаспределения.ДокументСсылка = ДокументОбъект;
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекККМ") И НЕ ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		ПараметрыРаспределения.ДокументСсылка = ДокументОбъект;
	Иначе
		ПараметрыРаспределения.ДокументСсылка = ДокументОбъект.Ссылка;
	КонецЕсли;
	ПараметрыРаспределения.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
	
	ДанныеРаспределения = ШтрихкодированиеИСМП.РаспределениеШтрихкодовУпаковокПоТоварам(
		ПараметрыРаспределения,
		Товары,
		МассивУпаковок);
	
	Если ДанныеРаспределения.ЕстьОшибки Тогда
		ВызватьИсключение СтрСоединить(ДанныеРаспределения.Ошибки, Символы.ПС);
	КонецЕсли;
	
	ТоварыРазобранные = Товары.СкопироватьКолонки();
	Если ТоварыРазобранные.Колонки.Найти("РезультатРаспределенияШтрихкодов") = Неопределено Тогда
		ТоварыРазобранные.Колонки.Добавить("РезультатРаспределенияШтрихкодов");
	КонецЕсли;
	
	Если ТоварыРазобранные.Колонки.Найти("СуммаСкидок") = Неопределено Тогда
		ТоварыРазобранные.Колонки.Добавить("СуммаСкидок");
	КонецЕсли;
	
	СуммовыеПоказателиОбщие = Новый Массив;
	СуммовыеПоказателиОбщие.Добавить("Сумма");
	СуммовыеПоказателиОбщие.Добавить("СуммаНДС");
	СуммовыеПоказателиОбщие.Добавить("СуммаСкидок");
	СуммовыеПоказателиОбщие.Добавить("СуммаАвтоматическойСкидки");
	СуммовыеПоказателиОбщие.Добавить("СуммаРучнойСкидки");
	СуммовыеПоказателиОбщие.Добавить("СуммаСкидкиОплатыБонусом");
	
	СуммовыеПоказатели = Новый Массив;
	Для Каждого СуммовойПоказатель Из СуммовыеПоказателиОбщие Цикл
		Если НЕ Товары.Колонки.Найти(СуммовойПоказатель) = Неопределено Тогда
			СуммовыеПоказатели.Добавить(СуммовойПоказатель);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		РаспределениеПоСтроке = ДанныеРаспределения.РаспределенныеСтроки.Получить(СтрокаТовары);
		
		Если РаспределениеПоСтроке = Неопределено Тогда
			СтрокаТоварыРазобранные = ТоварыРазобранные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоварыРазобранные, СтрокаТовары);
			Продолжить;
		КонецЕсли;
		
		// Заполним коэффициенты распределния.
		КоличествоРаспределение = 0;
		КоличествоУпаковокРаспределение = 0;
		Коэффициенты = Новый Массив;
		Для Каждого СтрокаРаспределения Из РаспределениеПоСтроке Цикл
			КоличествоРаспределение = КоличествоРаспределение + СтрокаРаспределения.Количество;
			
			Если СтрокаРаспределения.ЧастичноеВыбытие
				И СтрокаРаспределения.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво Тогда
				СтрокаРаспределения.КоличествоУпаковок = СтрокаРаспределения.Количество;
			Иначе
				СтрокаРаспределения.КоличествоУпаковок = 1;
			КонецЕсли;
			КоличествоУпаковокРаспределение = КоличествоУпаковокРаспределение + СтрокаРаспределения.КоличествоУпаковок;
			Коэффициенты.Добавить(СтрокаРаспределения.КоличествоУпаковок);
		КонецЦикла;
		
		Если НЕ КоличествоРаспределение = СтрокаТовары.Количество Тогда
			ВызватьИсключение(НСтр("ru = 'Некорректно выполнено распределение марок на продукцию. Пробитие чека не может быть выполнено'"));
		КонецЕсли;
		
		Если КоличествоУпаковокРаспределение = СтрокаТовары.КоличествоУпаковок Тогда
			Если РаспределениеПоСтроке.Количество() = 1 Тогда
				// Распределение не требуется.
				СтрокаТоварыРазобранные = ТоварыРазобранные.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТоварыРазобранные, СтрокаТовары);
				СтрокаТоварыРазобранные.Штрихкод = РаспределениеПоСтроке[0].Штрихкод;
				СтрокаТоварыРазобранные.РезультатРаспределенияШтрихкодов = РаспределениеПоСтроке[0];
				
				Продолжить;
			КонецЕсли;
		Иначе
			// Очистим упаковку.
			СтрокаТовары.Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
			СтруктураЕдиницаИзмеренияПредметаРасчета = Новый Структура("ЕдиницаИзмеренияПредметаРасчета", "");
			ЗаполнитьЗначенияСвойств(СтрокаТовары, СтруктураЕдиницаИзмеренияПредметаРасчета);
		КонецЕсли;
		
		// Распределим суммовые показатели по коэффициентам.
		ДанныеРаспределенияПоказателей = Новый Соответствие;
		Для Каждого СуммовойПоказатель Из СуммовыеПоказатели Цикл
			РаспределенныеСуммы = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(СтрокаТовары[СуммовойПоказатель], Коэффициенты);
			ДанныеРаспределенияПоказателей.Вставить(СуммовойПоказатель, РаспределенныеСуммы);
		КонецЦикла;
		
		// Заполним строки распределения.
		Индекс = 0;
		Для Каждого СтрокаРаспределения Из РаспределениеПоСтроке Цикл
			
			СтрокаТоварыРазобранные = ТоварыРазобранные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоварыРазобранные, СтрокаТовары,, СтрСоединить(СуммовыеПоказатели, ","));
			СтрокаТоварыРазобранные.РезультатРаспределенияШтрихкодов = СтрокаРаспределения;
			
			// Перенесем данные из таблицы распределения.
			СтрокаТоварыРазобранные.Штрихкод           = СтрокаРаспределения.Штрихкод;
			СтрокаТоварыРазобранные.КоличествоУпаковок = СтрокаРаспределения.КоличествоУпаковок;
			СтрокаТоварыРазобранные.Количество         = СтрокаРаспределения.Количество;
			
			// Заполним упаковку при необходимости.
			Если СтрокаТоварыРазобранные.Количество > 1 И НЕ ЗначениеЗаполнено(СтрокаТоварыРазобранные.Упаковка) Тогда
				СтрокаТоварыРазобранные.Упаковка = Справочники.УпаковкиНоменклатуры.Упаковка(
					СтрокаТоварыРазобранные.Номенклатура, СтрокаТоварыРазобранные.Количество);
				
				СтруктураЕдиницаИзмеренияПредметаРасчета = Новый Структура("ЕдиницаИзмеренияПредметаРасчета");
				Если ЗначениеЗаполнено(СтрокаТоварыРазобранные.Упаковка) Тогда
					СтруктураЕдиницаИзмеренияПредметаРасчета.ЕдиницаИзмеренияПредметаРасчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
						СтрокаТоварыРазобранные.Упаковка, "Наименование");
				Иначе
					ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТоварыРазобранные.Номенклатура, "ЕдиницаИзмерения");
					Если СтрокаРаспределения.ЧастичноеВыбытие Тогда
						СтруктураЕдиницаИзмеренияПредметаРасчета.ЕдиницаИзмеренияПредметаРасчета = ЕдиницаИзмерения;
					Иначе
						СтруктураЕдиницаИзмеренияПредметаРасчета.ЕдиницаИзмеренияПредметаРасчета = СтрШаблон(НСтр("ru = '%1 %2'"),
							СтрокаТоварыРазобранные.Количество,
							ЕдиницаИзмерения);
					КонецЕсли;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтрокаТоварыРазобранные, СтруктураЕдиницаИзмеренияПредметаРасчета);
			КонецЕсли;
			
			// Пересчитаем суммовые показатели при необходимости.
			Для Каждого КлючИЗначение Из ДанныеРаспределенияПоказателей Цикл
				РаспределенныеСуммы = КлючИЗначение.Значение;
				
				ЗначениеПоказателя = 0;
				Если НЕ РаспределенныеСуммы = Неопределено Тогда
					ЗначениеПоказателя = РаспределенныеСуммы[Индекс];
				КонецЕсли;
				
				СтрокаТоварыРазобранные[КлючИЗначение.Ключ] = ЗначениеПоказателя;
			КонецЦикла;
			
			Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекККМ") Тогда
				Если Не ЗначениеЗаполнено(СтрокаТоварыРазобранные.СуммаСкидок) Тогда
					СтрокаТоварыРазобранные.СуммаСкидок = СтрокаТоварыРазобранные.СуммаАвтоматическойСкидки + СтрокаТоварыРазобранные.СуммаРучнойСкидки
					+ СтрокаТоварыРазобранные.СуммаСкидкиОплатыБонусом;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТоварыРазобранные.Цена = Окр((СтрокаТоварыРазобранные.Сумма - СтрокаТоварыРазобранные.СуммаСкидок) / СтрокаТоварыРазобранные.Количество, 2);
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТоварыРазобранные;

КонецФункции

#КонецОбласти