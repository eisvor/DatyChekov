
#Область ПрограммныйИнтерфейс

// Выполняет проведение документа без регистрации на узле-отправителе
// с предварительным установлением блокировки.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ для проведения;
//  УзелКорреспондента - ПланОбменаСсылка - узел плана обмена, для которого выполняется итерация обмена данными;
//  ДополнительныеПараметры - Структура - при наличии свойства "ДополнительныеСвойства", будут добавлены в 
//    дополнительные свойства документа.
//
// Возвращаемое значение:
//  Структура:
//    Успешно - Булево - Истина, если данная документ проведен;
//    ОписаниеОшибки - Строка - описание ошибки в случае неудачного выполнения.
//
Функция ВыполнитьПроведениеДокументаПриЗагрузке(ДокументСсылка, УзелКорреспондента, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	Успешно        = Ложь;
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ОбщегоНазначения.ИмяТаблицыПоСсылке(ДокументСсылка));
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументСсылка);
		Блокировка.Заблокировать();
		
		ЗаблокироватьДанныеДляРедактирования(ДокументСсылка);
		Объект = ДокументСсылка.ПолучитьОбъект();
		
		// Устанавливаем узел-отправитель для предотвращения регистрации объекта на узле, для которого производим загрузку
		// проведение выполняем не в режиме загрузки.
		ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(Объект, Ложь, Ложь, УзелКорреспондента);
		
		Объект.ДополнительныеСвойства.Вставить("ОтложенноеПроведение");
		
		Если ДополнительныеПараметры.Свойство("ДополнительныеСвойства")
			И ТипЗнч(ДополнительныеПараметры.ДополнительныеСвойства) = Тип("Структура") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Объект.ДополнительныеСвойства,
				ДополнительныеПараметры.ДополнительныеСвойства);
		КонецЕсли;
			
		
		Если Объект.ПроверитьЗаполнение() Тогда
			
			// При проведении документа снимаем запрет на выполнение ПРО,
			// т.к. ПРО были проигнорированы при обычной записи документа с целью оптимизации скорости загрузки данных.
			Если Объект.ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов") Тогда
				Объект.ДополнительныеСвойства.Удалить("ОтключитьМеханизмРегистрацииОбъектов");
			КонецЕсли;
			
			Объект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
			
			// Выполняем попытку проведения документа.
			Объект.Записать(РежимЗаписиДокумента.Проведение);
			
			Успешно = Объект.Проведен;
			
		КонецЕсли;
		
	Исключение
		
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Успешно = Ложь;
		
	КонецПопытки;
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно", Успешно);
	Результат.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	
	Возврат Результат;
	
КонецФункции

// Отменяет проведение объекта в информационной базе.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ для отмены проведения;
//  УзелКорреспондента - ПланОбменаСсылка - узел плана обмена, для которого выполняется итерация обмена данными.
//
Процедура ОтменитьПроведениеДокументаПриЗагрузке(ДокументСсылка, УзелКорреспондента) Экспорт
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	Если ДокументОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Устанавливаем режим загрузки данных для объекта.
	ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(ДокументОбъект, Истина, Ложь, УзелКорреспондента);
	
	НачатьТранзакцию();
	Попытка
		
		// Отменяем проведение документа.
		ДокументОбъект.Проведен = Ложь;
		ДокументОбъект.Записать();
		
		ОбменДаннымиСервер.УдалитьДвиженияУДокумента(ДокументОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ВызватьИсключение ОписаниеОшибки();
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает признак использования текущей ИБ в качестве "Рабочего места".
//
// Возвращаемое значение:
//  Булево - Истина, если данная ИБ является рабочим местом.
//
Функция ЭтоПодчиненныйУзелПоРабочемуМесту() Экспорт
	
	Возврат ЭтоПодчиненныйУзел("ПоРабочемуМесту");
	
КонецФункции

// Возвращает признак использования текущей ИБ в качестве подчиненного магазина,
// передающего все данные в "Головной узел".
//
// Возвращаемое значение:
//  Булево - Истина, если данная ИБ является подчиненным магазином.
//
Функция ЭтоПодчиненныйУзелПоМагазину() Экспорт
	
	Возврат ЭтоПодчиненныйУзел("ПоМагазину");
	
КонецФункции

// Возвращает массив ссылок на узлы планов обмена по рабочему месту.
//
// Возвращаемое значение:
//  Массив - ПланОбменаСсылка.
//
Функция УзлыОбменаПоРабочемуМесту() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоРабочемуМесту.Ссылка КАК Ссылка
		|ИЗ
		|	ПланОбмена.ПоРабочемуМесту КАК ПоРабочемуМесту
		|ГДЕ
		|	НЕ ПоРабочемуМесту.ЭтотУзел
		|	И НЕ ПоРабочемуМесту.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбменРозницаРозница.Ссылка
		|ИЗ
		|	ПланОбмена.ОбменРозницаРозница КАК ОбменРозницаРозница
		|ГДЕ
		|	НЕ ОбменРозницаРозница.ЭтотУзел
		|	И НЕ ОбменРозницаРозница.ПометкаУдаления
		|	И ОбменРозницаРозница.ВариантНастройки = ""ПоРабочемуМесту""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	АвтономнаяРабота.Ссылка
		|ИЗ
		|	ПланОбмена.АвтономнаяРабота КАК АвтономнаяРабота
		|ГДЕ
		|	НЕ АвтономнаяРабота.ЭтотУзел
		|	И НЕ АвтономнаяРабота.ПометкаУдаления
		|	И АвтономнаяРабота.ВариантНастройки = ""ПоРабочемуМесту""";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Создает временную таблицу ВТДоступныеМагазины, содержащей ссылки на элементы справочника
// "Справочник.Магазины", доступных для использования в контексте текущей ИБ.
// 
// Параметры:
//  - МенеджерВременныхТаблиц;
//  - ИсключатьМагазиныПодчиненныхУзлов - Булево - если Истина, из состава магазинов
//      главного узла исключаются магазины, по которым передаются данные в подчиненные узлы.
//
Процедура СоздатьВТДоступныеМагазины(МенеджерВременныхТаблиц, ИсключатьМагазиныПодчиненныхУзлов = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ГлавныйУзел", ПланыОбмена.ГлавныйУзел() = Неопределено);
	Запрос.УстановитьПараметр("ИсключатьМагазиныПодчиненныхУзлов", ИсключатьМагазиныПодчиненныхУзлов);
	
	ВариантНастройки = НСтр("ru = 'ПоМагазину'");
	Если ЭтоПодчиненныйУзелПоРабочемуМесту() Тогда
		ВариантНастройки = НСтр("ru = 'ПоРабочемуМесту'");
	КонецЕсли;
	Запрос.УстановитьПараметр("ВариантНастройки", ВариантНастройки);

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоРабочемуМесту.Магазин КАК Магазин,
		|	ПоРабочемуМесту.ЭтотУзел КАК ЭтотУзел
		|ПОМЕСТИТЬ ВТМагазиныУзлов
		|ИЗ
		|	ПланОбмена.ПоРабочемуМесту КАК ПоРабочемуМесту
		|ГДЕ
		|	(НЕ &ГлавныйУзел ИЛИ &ИсключатьМагазиныПодчиненныхУзлов)
		|	И НЕ ПоРабочемуМесту.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоМагазинуМагазины.Магазин,
		|	ПоМагазинуМагазины.Ссылка.ЭтотУзел
		|ИЗ
		|	ПланОбмена.ПоМагазину.Магазины КАК ПоМагазинуМагазины
		|ГДЕ
		|	(НЕ &ГлавныйУзел ИЛИ &ИсключатьМагазиныПодчиненныхУзлов)
		|	И НЕ ПоМагазинуМагазины.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	АвтономнаяРаботаМагазины.Магазин,
		|	АвтономнаяРаботаМагазины.Ссылка.ЭтотУзел
		|ИЗ
		|	ПланОбмена.АвтономнаяРабота.Магазины КАК АвтономнаяРаботаМагазины
		|ГДЕ
		|	АвтономнаяРаботаМагазины.Ссылка.ВариантНастройки = &ВариантНастройки
		|	И (НЕ &ГлавныйУзел ИЛИ &ИсключатьМагазиныПодчиненныхУзлов)
		|	И НЕ АвтономнаяРаботаМагазины.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Магазины.Ссылка КАК Магазин
		|ПОМЕСТИТЬ ВТДоступныеМагазины
		|ИЗ
		|	Справочник.Магазины КАК Магазины
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМагазиныУзлов КАК ВТМагазиныУзлов
		|		ПО ВТМагазиныУзлов.Магазин = Магазины.Ссылка
		|			И (&ИсключатьМагазиныПодчиненныхУзлов)
		|			И (НЕ ВТМагазиныУзлов.ЭтотУзел)
		|ГДЕ
		|	&ГлавныйУзел
		|	И ВТМагазиныУзлов.Магазин ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТМагазиныУзлов.Магазин
		|ИЗ
		|	ВТМагазиныУзлов КАК ВТМагазиныУзлов
		|ГДЕ
		|	НЕ &ГлавныйУзел
		|	И ВТМагазиныУзлов.ЭтотУзел
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втМагазиныУзлов";
		
		Запрос.Выполнить();
		
КонецПроцедуры

// Возвращает массив магазинов, доступных для использования в контексте текущей ИБ
//
// Возвращаемое значение:
//  Массив - СправочникСсылка.Магазины.
//
// Параметры:
//  - ИсключатьМагазиныПодчиненныхУзлов - Булево - если Истина, из состава магазинов
//      главного узла исключаются магазины, по которым передаются данные в подчиненные узлы.
//
Функция ДоступныеМагазины(ИсключатьМагазиныПодчиненныхУзлов = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОбменДаннымиРТ.СоздатьВТДоступныеМагазины(МенеджерВременныхТаблиц, ИсключатьМагазиныПодчиненныхУзлов);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТДоступныеМагазины.Магазин КАК Магазин
	|ИЗ
	|	ВТДоступныеМагазины КАК ВТДоступныеМагазины";
	
	МассивМагазинов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Магазин");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МассивМагазинов;
	
КонецФункции

// Возвращает массив магазинов, по которым возможна передача информативных остатков.
//
// Возвращаемое значение:
//  Массив - СправочникСсылка.Магазины.
//
// Параметры:
//  - ИсключаемыеМагазины - Массив - СправочникСсылка.Магазины. Магазины
//       принудительно исключаемые из выборки.
//
Функция ДоступныеМагазиныИнформативныхОстатков(ИсключаемыеМагазины) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсключаемыеМагазины", ИсключаемыеМагазины);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Магазины.Ссылка КАК Магазин
		|ИЗ
		|	Справочник.Магазины КАК Магазины
		|ГДЕ
		|	НЕ Магазины.Ссылка В (&ИсключаемыеМагазины)
		|	И НЕ Магазины.СкладУправляющейСистемы";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Магазин");
	
КонецФункции

// Актуализирует признак использования регламентных заданий:
// "ОбновлениеИнформативныхОстатковПоМагазинам" и "ОбновлениеИнформативныхОстатковПоСкладам".
//
// Параметры:
//   ПоМагазинам - Булево - если Истина, включает задание "ОбновлениеИнформативныхОстатковПоМагазинам";
//   ПоСкладам - Булево - если Истина, включает задание "ОбновлениеИнформативныхОстатковПоСкладам";
//
Процедура АктуализироватьЗаданияОбновленияИнформативныхОстатков(ПоМагазинам, ПоСкладам) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивЗаданий = Новый Массив;
	Если ПоМагазинам = Истина Тогда
		МассивЗаданий.Добавить("ОбновлениеИнформативныхОстатковПоМагазинам");
	КонецЕсли;
	Если ПоСкладам = Истина Тогда
		МассивЗаданий.Добавить("ОбновлениеИнформативныхОстатковПоСкладам");
	КонецЕсли;
	
	Для Каждого Задание Из МассивЗаданий Цикл
	
		// Ищем задания по наименованию.
		Отбор = Новый Структура();
		Отбор.Вставить("Метаданные", Задание);
		Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);

		// Включаем найденные задания.
		Для Каждого Задание Из Задания Цикл
			Параметры = Новый Структура();
			Параметры.Вставить("Использование", Истина);
			РегламентныеЗаданияСервер.ИзменитьЗадание(Задание.УникальныйИдентификатор, Параметры);
		КонецЦикла;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Выполняет обмен данными в узле ПоРабочемуМесту при записи чека в РМК.
//
// Параметры:
//   УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы.
//
Процедура ВыполнитьОбменДаннымиПоРабочемуМесту(УникальныйИдентификатор) Экспорт
	
	МассивУзлов = УзлыОбменаПоРабочемуМесту();
	
	Для каждого УзелИнформационнойБазы Из МассивУзлов Цикл

		ВидТранспортаСообщений = ТранспортОбменаДаннымиПоУмолчанию(УзелИнформационнойБазы);
		Если ВидТранспортаСообщений = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыПроцедуры = Новый Структура;
		ПараметрыПроцедуры.Вставить("Отказ",                               Ложь);
		ПараметрыПроцедуры.Вставить("УзелИнформационнойБазы",              УзелИнформационнойБазы);
		ПараметрыПроцедуры.Вставить("ВыполнятьЗагрузку",                   Ложь);
		ПараметрыПроцедуры.Вставить("ВыполнятьВыгрузку",                   Истина);
		ПараметрыПроцедуры.Вставить("ВидТранспортаСообщенийОбмена",        ВидТранспортаСообщений);

		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.ОжидатьЗавершение = 0;
		
		ДлительныеОперации.ВыполнитьВФоне("Обработки.ВыполнениеОбменаДанными.ВыполнитьЗапускОбменаДанными", ПараметрыПроцедуры, ПараметрыВыполнения);
	
	КонецЦикла;
	
КонецПроцедуры

// Обработчик регистрации изменений для начальной выгрузки данных.
//
// Параметры:
//
//   Получатель - ПланОбменаСсылка - узел плана обмена, в который требуется выгрузить данные.
//   СтандартнаяОбработка - Булево - в данный параметр передается признак выполнения стандартной
//                          (системной) обработки события.
//                          Если в теле процедуры-обработчика установить данному параметру значение Ложь,
//                          стандартная обработка события производиться не будет.
//                          Отказ от стандартной обработки не отменяет действие.
//                          Значение по умолчанию - Истина.
//   Отбор - Массив из ОбъектМетаданных
//         - ОбъектМетаданных - определяет отбор по объектам метаданных,
//           для которых следует выполнить регистрацию изменений.
//
Процедура РегистрацияИзмененийНачальнойВыгрузкиДанных(Знач Получатель, СтандартнаяОбработка = Ложь, Отбор = Неопределено) Экспорт
	
	Если ТипЗнч(Получатель) <> Тип("ПланОбменаСсылка.СинхронизацияДанныхЧерезУниверсальныйФормат") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Получатель, "ВариантНастройки") <> "ОбменМК" Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОбъектыБазыКорреспондента = Новый ТаблицаЗначений;
	ИмяПланаОбмена = Получатель.Метаданные().Имя;
	ВерсияФорматаОбмена = Получатель.ВерсияФорматаОбмена;
	
	КомпонентыОбмена = ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена("Отправка");
	КомпонентыОбмена.УзелКорреспондента = Получатель;
	КомпонентыОбмена.НаправлениеОбмена = "Отправка";
	КомпонентыОбмена.XMLСхема = ОбменДаннымиСервер.ЗначениеНастройкиПланаОбмена(ИмяПланаОбмена, "ФорматОбмена")+ "/" + ВерсияФорматаОбмена;
	
	ВерсииФорматаОбмена = Новый Соответствие;
	МодульОбменДаннымиПереопределяемый = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиПереопределяемый");
	
	МодульОбменДаннымиПереопределяемый.ПриПолученииДоступныхВерсийФормата(ВерсииФорматаОбмена);
	КомпонентыОбмена.МенеджерОбмена = ВерсииФорматаОбмена.Получить(ВерсияФорматаОбмена);
	
	Если КомпонентыОбмена.МенеджерОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТаблицаОбъектыБазыКорреспондента = ОбменДаннымиXDTOСервер.ПоддерживаемыеОбъектыФорматаКорреспондента(Получатель, "Получение");
	ОтборПоВерсии = Новый Структура("Версия", ВерсияФорматаОбмена);
	ТаблицаОбъектыБазыКорреспондента = ТаблицаОбъектыБазыКорреспондента.Скопировать(ОтборПоВерсии);
	
	Если ТаблицаОбъектыБазыКорреспондента.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка	= Ложь;
	Отбор					= Новый Массив;
	
	ЗначенияРеквизитов 		= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Получатель,
								"ИспользоватьОтборПоОрганизациям, ДатаНачалаВыгрузкиДокументов, Организации");
	
	Для Каждого ЭлементСостава Из Получатель.Метаданные().Состав Цикл
		Отбор.Добавить(ЭлементСостава.Метаданные);
	КонецЦикла;
	
	Если ЗначенияРеквизитов.ИспользоватьОтборПоОрганизациям Тогда
		ОтборОрганизации = ЗначенияРеквизитов.Организации.Выгрузить().ВыгрузитьКолонку("Организация");
	Иначе
		ОтборОрганизации = Неопределено;
	КонецЕсли;
	
	ОбменДаннымиXDTOСервер.ИнициализироватьТаблицыПравилОбмена(КомпонентыОбмена);
	
	ОбъектыНеПоддерживаютсяКорреспондентом = Новый Массив;
	Для Каждого ЭлементОтбора Из Отбор Цикл
		СтрокиПКО = КомпонентыОбмена.ПравилаКонвертацииОбъектов.НайтиСтроки(Новый Структура("ОбъектДанных", ЭлементОтбора));
		
		ОбъектНеПоддерживается = Истина;
		Для Каждого СтрокаПКО Из СтрокиПКО Цикл
			Если ТаблицаОбъектыБазыКорреспондента.Найти(СтрокаПКО.ОбъектФормата, "Объект") <> Неопределено Тогда
				ОбъектНеПоддерживается = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ОбъектНеПоддерживается Тогда
			ОбъектыНеПоддерживаютсяКорреспондентом.Добавить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;

	Для Каждого ЭлементМассива Из ОбъектыНеПоддерживаютсяКорреспондентом Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Отбор, ЭлементМассива);
	КонецЦикла;

	ОбменДаннымиСервер.ЗарегистрироватьДанныеПоДатеНачалаВыгрузкиИОрганизациям(Получатель,
		ЗначенияРеквизитов.ДатаНачалаВыгрузкиДокументов, ОтборОрганизации, Отбор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура АнализГотовностиКПереходуВСервис(Параметры, АдресРезультата) Экспорт
	
	УзлыОбмена = ОбменДаннымиСервер.УзлыОбменаБСП();
	УзлыОбмена.Колонки.Добавить("ЗарегистрированоИзменений", Новый ОписаниеТипов("Число"));
	УзлыОбмена.Колонки.Добавить("ЗарегистрированыИзменения", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаОбмена Из УзлыОбмена Цикл
		НомерОтправленного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОбмена.УзелИнформационнойБазы, "НомерОтправленного");
		ВыборкаИзменений   = ПланыОбмена.ВыбратьИзменения(СтрокаОбмена.УзелИнформационнойБазы, НомерОтправленного);
		Пока ВыборкаИзменений.Следующий() Цикл
			СтрокаОбмена.ЗарегистрированоИзменений = СтрокаОбмена.ЗарегистрированоИзменений + 1;
		КонецЦикла;
		СтрокаОбмена.ЗарегистрированыИзменения = ЗначениеЗаполнено(СтрокаОбмена.ЗарегистрированоИзменений);
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("УзлыОбмена", УзлыОбмена);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// См. ОбменДаннымиРТ.ЭтоПодчиненныйУзелПоРабочемуМесту, ОбменДаннымиРТ.ЭтоПодчиненныйУзелПоМагазину
//
Функция ЭтоПодчиненныйУзел(ИмяПланаОбмена)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АвтономнаяРабота.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ УзелВариантНастройки
		|ИЗ
		|	ПланОбмена.АвтономнаяРабота КАК АвтономнаяРабота
		|ГДЕ
		|	АвтономнаяРабота.ЭтотУзел
		|	И НЕ АвтономнаяРабота.ПометкаУдаления
		|	И АвтономнаяРабота.ВариантНастройки = &ИмяПланаОбмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбменРозницаРозница.Ссылка КАК Ссылка
		|ИЗ
		|	ПланОбмена.ОбменРозницаРозница КАК ОбменРозницаРозница
		|ГДЕ
		|	НЕ ОбменРозницаРозница.ЭтотУзел
		|	И НЕ ОбменРозницаРозница.ПометкаУдаления
		|	И ОбменРозницаРозница.ВариантНастройки = &ИмяПланаОбмена
		|	И НЕ ОбменРозницаРозница.ПодчиненныйУзел
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПланОбменаРИБ.Ссылка
		|ИЗ
		|	&ИсточникРИБ КАК ПланОбменаРИБ
		|ГДЕ
		|	НЕ ПланОбменаРИБ.ЭтотУзел
		|	И НЕ ПланОбменаРИБ.ПометкаУдаления
		|	И ПланОбменаРИБ.Ссылка = &ГлавныйУзел
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	АвтономнаяРабота.Ссылка КАК Ссылка
		|ИЗ
		|	ПланОбмена.АвтономнаяРабота КАК АвтономнаяРабота
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УзелВариантНастройки КАК УзелВариантНастройки
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ АвтономнаяРабота.ЭтотУзел
		|	И НЕ АвтономнаяРабота.ПометкаУдаления
		|	И АвтономнаяРабота.Ссылка = &ГлавныйУзел";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИсточникРИБ", "ПланОбмена." + ИмяПланаОбмена);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ГлавныйУзел", ПланыОбмена.ГлавныйУзел());
	Запрос.УстановитьПараметр("ИмяПланаОбмена", ИмяПланаОбмена);
		
	ЭтоПодчиненныйУзел = Не Запрос.Выполнить().Пустой();
		
	УстановитьПривилегированныйРежим(Ложь);
		
	Возврат ЭтоПодчиненныйУзел;
	
КонецФункции

// Возвращает транспорт обмена данными по умолчанию для узла.
//
Функция ТранспортОбменаДаннымиПоУмолчанию(Корреспондент)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Возвращаемое значение функции.
	ВидТранспортаСообщений = Неопределено;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиТранспорта.ВидТранспортаСообщенийОбменаПоУмолчанию КАК ВидТранспортаСообщенийОбменаПоУмолчанию
	|ИЗ
	|	РегистрСведений.НастройкиТранспортаОбменаДанными КАК НастройкиТранспорта
	|ГДЕ
	|	НастройкиТранспорта.Корреспондент = &Корреспондент");
	Запрос.УстановитьПараметр("Корреспондент", Корреспондент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВидТранспортаСообщений = Выборка.ВидТранспортаСообщенийОбменаПоУмолчанию;
	КонецЕсли;
	
	Возврат ВидТранспортаСообщений;
	
КонецФункции

#КонецОбласти
