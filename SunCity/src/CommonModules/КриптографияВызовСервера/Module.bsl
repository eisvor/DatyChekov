
#Область ПрограммныйИнтерфейс

// Проверяет возможность подключения криптопровайдера WSCrypto на сервере.
//
// Параметры:
//  Версия          - Строка     - Версия криптопровайдера.
//  РежимТишины     - Булево     - Флаг активации "тихого режима" подключения.
//  ТолькоПодключение - Булево   - Флаг, указывающий, нужно ли только подключить провайдер без проверки других параметров.
//
// Возвращаемое значение:
//   Булево         - Истина, если подключение успешно; Ложь в противном случае.
//
Функция УдалосьПодключитьКриптопровайдерWSCryptoНаСервере(Версия = "", РежимТишины = Ложь, ТолькоПодключение = Ложь) Экспорт
	УдалосьПодключитьНаСервере = КриптографияКлиентСервер.УдалосьПодключитьКриптопровайдерНЦА(Версия, РежимТишины, ТолькоПодключение);
	Возврат УдалосьПодключитьНаСервере;
КонецФункции

// Получает адрес библиотеки криптографии НЦА для работы с WSCrypto.
// При вызове процедуры из конекста клиента необходимо передавать идентификатор клиентской формы,
// иначе хранилище будет очищено при возврате в контекст клиента.
//
// Параметры:
//  УникальныйИдентификаторФормыКлиента - Любой - Идентификатор формы клиента, необходимый для хранения ссылки на модуль
//   во временном хранилище. Если не указан, используется значение по умолчанию.
//
// Возвращаемое значение:
//   Строка         - Ссылка на временное хранилище, где размещена библиотека криптографии.
//
Функция АдресБиблиотекиКриптографииНЦА(УникальныйИдентификаторФормыКлиента = Неопределено) Экспорт
	Компонента = ПолучитьОбщийМакет("КомпонентаКриптографииWSCrypto");
	СсылкаНаМодуль = ПоместитьВоВременноеХранилище(Компонента, УникальныйИдентификаторФормыКлиента);
	Возврат СсылкаНаМодуль;
КонецФункции

// Формирует JSON-строку из структуры.
// Параметры:
//  СтруктураЗапросаJSON - Структура) – данные для преобразования в JSON.
// Возвращаемое значение:
//   Строка – JSON-строка, сформированная из структуры.
//
Функция НовыйЗапросJSON(СтруктураЗапросаJSON) Экспорт
	// Создание объекта записи JSON
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	// Запись данных структуры в JSON-объект
	ЗаписатьJSON(ЗаписьJSON, СтруктураЗапросаJSON);
	// Завершение записи и получение JSON-строки
	Возврат ЗаписьJSON.Закрыть();
КонецФункции

// Считывает JSON-строку и преобразует ее в объект.
// Параметры:
//  РезультатЗапроса - Строка – JSON-строка ответа.
// Возвращаемое значение:
//   Структура – объект данных, считанный из JSON.
//
Функция ПрочитатьОтветJSON(РезультатЗапроса) Экспорт
	// Создание объекта чтения JSON
	ОтветСервиса = Новый ЧтениеJSON;
	ОтветСервиса.УстановитьСтроку(РезультатЗапроса);
	// Чтение JSON-строки и преобразование в структуру
	ОбъектыJSON = ПрочитатьJSON(ОтветСервиса);
	// Закрытие объекта чтения
	ОтветСервиса.Закрыть();
	// Возврат полученного объекта
	Возврат ОбъектыJSON;
КонецФункции

// Записывает событие в журнал регистрации.
// Параметры:
//  ИмяСобытия - Строка – название события для журнала.
//  УровеньСтрокой - Строка – уровень сообщения ("Информация", "Ошибка", "Предупреждение", "Примечание").
//  ОбъектМетаданных - Неопределено/ОбъектМетаданных – метаданные, связанные с событием.
//  Данные - Неопределено/Объект - – дополнительные данные для журнала.
//  Комментарий - Строка – дополнительный комментарий к записи.
//  РежимТранзакции Неопределено/Перечисление – режим транзакции.
//
Процедура СоздатьЗаписьЖурналаРегистрации(
	ИмяСобытия,
	УровеньСтрокой = "",
	ОбъектМетаданных = Неопределено,
	Данные = Неопределено,
	Комментарий = "",
	РежимТранзакции = Неопределено) Экспорт
	
	// Определение уровня журнала регистрации
	Если УровеньСтрокой = "Информация" Тогда
		Уровень = УровеньЖурналаРегистрации.Информация;
	ИначеЕсли УровеньСтрокой = "Ошибка" Тогда
		Уровень = УровеньЖурналаРегистрации.Ошибка;
	ИначеЕсли УровеньСтрокой = "Предупреждение" Тогда
		Уровень = УровеньЖурналаРегистрации.Предупреждение;
	ИначеЕсли УровеньСтрокой = "Примечание" Тогда
		Уровень = УровеньЖурналаРегистрации.Примечание;
	Иначе
		Уровень = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	
	// Запись события в журнал регистрации
	ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень, ОбъектМетаданных, Данные, Комментарий, РежимТранзакции);
	
КонецПроцедуры

// Получает текущий тип провайдера криптографии из константы ПровайдерКриптографии.
//
// Возвращаемое значение:
//   Перечисление ТипПровайдераКриптографии - текущий провайдер криптографии, установленный в константе.
//
Функция ПолучитьТипПровайдераКриптографии() Экспорт
	Возврат Константы.ПровайдерКриптографии.Получить();
КонецФункции

// Определяет, должны ли криптографические операции выполняться на клиенте.
//
// Возвращаемое значение:
//   Булево – Истина, если выполнение криптографии должно происходить на клиенте, иначе Ложь.
//
Функция ВыполнятьКриптографическиеОперацииНаКлиенте() Экспорт
	
	Если Константы.МестоВыполненияКриптографическихОпераций.Получить() = Перечисления.МестаВыполненияКриптографическихОпераций.НаКлиенте Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Проверяет возможность подключения криптопровайдера НЦА.
//
// Параметры:
//  Версия           - Строка     - Версия криптопровайдера.
//  РежимТишины      - Булево     - Флаг активации "тихого режима" подключения.
//  ТолькоПодключение - Булево    - Флаг, указывающий, нужно ли только подключить провайдер без проверки других параметров.
//
// Возвращаемое значение:
//   Булево          - Истина, если подключение выполнено успешно; Ложь в противном случае.
//
Функция УдалосьПодключитьКриптопровайдерНЦА(Версия = "", РежимТишины = Ложь, ТолькоПодключение = Ложь) Экспорт
	
	Возврат КриптографияКлиентСервер.УдалосьПодключитьКриптопровайдерНЦА(Версия, РежимТишины, ТолькоПодключение);
	
КонецФункции

#Область ПодписьCMS

// Создает цифровую подпись (ЭЦП) в формате CMS.
// Параметры:
//  ДанныеДляПодписи - Массив или Строка – данные для подписания.
//  ПараметрыВзаимодействия - Структура – настройки взаимодействия с криптопровайдером.
// Возвращаемое значение:
//   Структура – результат подписи, включая статус и служебные данные.
//
Функция СоздатьЭЦП_CMS(Знач ДанныеДляПодписи, ПараметрыВзаимодействия) Экспорт
	
	Возврат КриптографияКлиентСервер.СоздатьЭЦП_CMS(ДанныеДляПодписи, ПараметрыВзаимодействия);
	
КонецФункции

#КонецОбласти

#Область ПодписьXML

// Создает цифровую подпись (ЭЦП) в формате XML.
// Параметры:
//  ДанныеДляПодписи - Массив или Строка – данные для подписания.
//  ПараметрыВзаимодействия - Структура – настройки взаимодействия с криптопровайдером.
// Возвращаемое значение:
//   Структура – результат подписи, включая статус и служебные данные.
//
Функция СоздатьЭЦП_XML(Знач ДанныеДляПодписи, ПараметрыВзаимодействия) Экспорт
	
	Возврат КриптографияКлиентСервер.СоздатьЭЦП_XML(ДанныеДляПодписи, ПараметрыВзаимодействия);
	
КонецФункции

#КонецОбласти

#Область ПодписьRaw

// Создает цифровую подпись (ЭЦП) в формате сырой подписи Raw.
// Параметры:
//  ДанныеДляПодписи - Массив или Строка – данные для подписания.
//  ПараметрыВзаимодействия - Структура – настройки взаимодействия с криптопровайдером.
// Возвращаемое значение:
//   Структура – результат подписи, включая статус и служебные данные.
//
Функция СоздатьЭЦП_Raw(Знач ДанныеДляПодписи, ПараметрыВзаимодействия) Экспорт
	
	Возврат КриптографияКлиентСервер.СоздатьЭЦП_Raw(ДанныеДляПодписи, ПараметрыВзаимодействия);
	
КонецФункции

#КонецОбласти

#Область ДанныеСертификата

// Получает данный сертификата ключа.
// Параметры:
//  ПараметрыВзаимодействия - Структура – настройки взаимодействия с криптопровайдером.
// Возвращаемое значение:
//   Структура – результат, включая статус и служебные данные.
//
Функция ПолучитьДанныеСертификата(ПараметрыВзаимодействия) Экспорт
	
	Возврат КриптографияКлиентСервер.ПолучитьДанныеСертификата(ПараметрыВзаимодействия);
	
КонецФункции

#КонецОбласти

#Область ДополнительныеСведения

// Получает дополнительные сведения работы внешней компоненты.
// Параметры:
//  ПараметрыВзаимодействия - Структура – настройки взаимодействия с криптопровайдером.
// Возвращаемое значение:
//   Структура – результат, включая статус и служебные данные.
//
Функция ПолучитьДополнительныеСведения(ПараметрыВзаимодействия) Экспорт
	
	Возврат КриптографияКлиентСервер.ПолучитьДополнительныеСведения(ПараметрыВзаимодействия);
	
КонецФункции

#КонецОбласти

#КонецОбласти
