
#Область Цвет

Функция ЦветЗеленый() Экспорт 
	
	Зеленый = Новый Цвет(0, 100, 0);
	Возврат Зеленый;
		
КонецФункции

Функция ЦветКрасный() Экспорт
	
	Красный = Новый Цвет(255, 0, 0);
	Возврат Красный;
	
КонецФункции

Функция ЦветСиний() Экспорт
	
	Синий = Новый Цвет(28, 85, 174);
	Возврат Синий;	
	
КонецФункции

Функция ЦветЧерный() Экспорт
	
	Возврат WebЦвета.Черный;
	
КонецФункции

Функция ЦветСостояния(Знач СостояниеДокументИСМПТ) Экспорт
	
	//Документы ИСМП
	Если СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.Сформирован")
		ИЛИ СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.ОбрабатываетсяСервером") Тогда
		
		Цвет = ЦветСиний();
		
	ИначеЕсли СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.ПринятСервером")
		ИЛИ СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.ДоставленПолучателю")
		ИЛИ СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.ПодтвержденПолучателем")
		ИЛИ СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.ПринятОтПоставщика") 
		ИЛИ СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.ПринятПроверен") Тогда
		
		Цвет = ЦветЗеленый();
		
	ИначеЕсли СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.ОтклоненСервером")
		ИЛИ СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.ОшибкаДанных")
		ИЛИ СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.Отозван")
		ИЛИ СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.Аннулирован")
		ИЛИ СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовИСМПТК.ОтклоненПолучателем") Тогда
		  
		Цвет = ЦветКрасный();
		
	//Документы СУЗ
	ИначеЕсли СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовСУЗИСМПТК.Создан")
		ИЛИ СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовСУЗИСМПТК.ОжидаетПодтверждения")
		ИЛИ СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовСУЗИСМПТК.Черновик") Тогда
		
		Цвет = ЦветСиний();
		
	ИначеЕсли СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовСУЗИСМПТК.Готов")
		ИЛИ СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовСУЗИСМПТК.Закрыт") Тогда
		
		Цвет = ЦветЗеленый();
		
	ИначеЕсли СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовСУЗИСМПТК.НеПодтвержден")
		ИЛИ СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовСУЗИСМПТК.Отклонен") 
		ИЛИ СостояниеДокументИСМПТ = ПредопределенноеЗначение("Перечисление.СостоянияДокументовСУЗИСМПТК.ЗакрытСОшибкой") Тогда
		  
		Цвет = ЦветКрасный();
		
	Иначе
		
		Цвет = ЦветСиний();
		
	КонецЕсли;
	
	Возврат Цвет;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭтоОбычнаяФорма(Форма) Экспорт
	
	Если ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") Тогда
		ОбычнаяФорма = Ложь;	
	Иначе
		ОбычнаяФорма = Истина;	
	КонецЕсли;
	
	Возврат ОбычнаяФорма;
	
КонецФункции

// Возвращает новый массив строк, созданный на основании параметра ИменаЧерезЗапятую.
//
// Параметры:
//  ИменаЧерезЗапятую - Строка - Имена объектов, переменных, реквизитов и т.д.
//
// Возвращаемое значение:
//  Массив - Массив имен, созданный на основании параметра ИменаЧерезЗапятую.
//
// Пример:
//  // Переменная МассивИмен будет массивом, содержащим три элемента:
//  // "Идентификатор", "РегистрационныйНомер", "УполномоченныйСотрудник".
//  МассивИмен = МассивИмен("Идентификатор, РегистрационныйНомер, УполномоченныйСотрудник")
//
Функция МассивИмен(Знач ИменаЧерезЗапятую) Экспорт
	
	МассивПодстрок = Новый Массив;
	
	// Удалить все пробелы, оставив только запятые.
	Пока Найти(ИменаЧерезЗапятую, " ") <> 0 Цикл
		ИменаЧерезЗапятую = СтрЗаменить(ИменаЧерезЗапятую, " ", "");	
	КонецЦикла;
	
	// Разбить строку и заполнить массив.	
	Позиция = Найти(ИменаЧерезЗапятую, ",");
	Пока Позиция <> 0 Цикл
		МассивПодстрок.Добавить(Лев(ИменаЧерезЗапятую, Позиция - 1));
		ИменаЧерезЗапятую = Сред(ИменаЧерезЗапятую, Позиция + 1);
		Позиция = Найти(ИменаЧерезЗапятую, ",");
	КонецЦикла;	
	Если НЕ ПустаяСтрока(ИменаЧерезЗапятую) Тогда
		МассивПодстрок.Добавить(ИменаЧерезЗапятую);	
	КонецЕсли;
	
	Возврат МассивПодстрок;
	
КонецФункции

// Разбирает строку на две части: до подстроки разделителя и после.
//
// Параметры:
//  Стр          - разбираемая строка;
//  Разделитель  - подстрока-разделитель:
//  Режим        - 0 - разделитель в возвращаемые подстроки не включается;
//                 1 - разделитель включается в левую подстроку;
//                 2 - разделитель включается в правую подстроку.
//
// Возвращаемое значение:
//  Правая часть строки - до символа-разделителя.
// 
Функция ОтделитьРазделителем(Стр, Знач Разделитель, Режим=0) Экспорт

	ПраваяЧасть         = "";
	ПозРазделителя      = СтрНайти(Стр, Разделитель);
	ДлинаРазделителя    = СтрДлина(Разделитель);
	Если ПозРазделителя > 0 Тогда
		ПраваяЧасть	 = Сред(Стр, ПозРазделителя + ?(Режим=2, 0, ДлинаРазделителя));
		Стр          = СокрЛП(Лев(Стр, ПозРазделителя - ?(Режим=1, -ДлинаРазделителя + 1, 1)));
	КонецЕсли;

	Возврат(ПраваяЧасть);

КонецФункции

// Преобразует значения из строки в массив, используя указанный разделитель.
//
// Параметры:
//  Стр            - разбираемая строка.
//  Разделитель    - подстрока разделитель.
//
// Возвращаемое значение:
//  Массив значений
// 
Функция МассивИзСтроки(Знач Стр, Разделитель=",", ПреобразоватьКЧислу = Ложь) Экспорт

	Массив      = Новый Массив;
	ПраваяЧасть = ОтделитьРазделителем(Стр, Разделитель);
	
	Пока Не ПустаяСтрока(Стр) Цикл
		Массив.Добавить(?(ПреобразоватьКЧислу, Число(СокрЛП(Стр)), СокрЛП(Стр)));
		Стр         = ПраваяЧасть;
		ПраваяЧасть = ОтделитьРазделителем(Стр, Разделитель);
	КонецЦикла; 

	Возврат(Массив);
	
КонецФункции

// Изменяет элемент отбора динамического списка
//
// Параметры:
//  Список - Обрабатываемый динамический список.
//  ИмяПоля - Имя поля компоновки, отбор по которому нужно установить.
//  ВидСравнения - Вид сравнения отбора, по умолчанию - Равно.
//  ПравоеЗначение - Значение отбора.
//  Установить - Признак необходимости установить отбор.
//
Процедура ИзменитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено) Экспорт
	
	УдалитьЭлементОтбораСписка(Список, ИмяПоля);
	
	Если Установить Тогда
		УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет элемент отбора динамического списка.
//
// Параметры:
//  Список - обрабатываемый динамический список.
//  ИмяПоля - имя поля компоновки, отбор по которому нужно удалить.
//
Процедура УдалитьЭлементОтбораСписка(Список, ИмяПоля) Экспорт
	
	ЭлементыДляУдаления = Новый Массив;
	
	ЭлементыОтбора = Список.Отбор.Элементы;
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			ЭлементыДляУдаления.Добавить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементОтбораДляУдаления Из ЭлементыДляУдаления Цикл
		ЭлементыОтбора.Удалить(ЭлементОтбораДляУдаления);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает элемент отбор динамического списка.
//
// Параметры:
//  Список - Обрабатываемый динамический список.
//  ИмяПоля - Имя поля компоновки, отбор по которому нужно установить.
//  ВидСравнения - Вид сравнения отбора.
//  ПравоеЗначение - Значение отбора.
//
Процедура УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено, Представление = "") Экспорт
	
	Если ТипЗнч(ПравоеЗначение) = Тип("Массив") Тогда
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.ЗагрузитьЗначения(ПравоеЗначение);
		ПравоеЗначение = СписокЗначений;		
	КонецЕсли;
	
	Если ВидСравнения = Неопределено Тогда
		Если ТипЗнч(ПравоеЗначение) = Тип("Массив") ИЛИ ТипЗнч(ПравоеЗначение) = Тип("СписокЗначений") Тогда
			ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;	
		Иначе
			ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;	
		КонецЕсли;
	КонецЕсли;
		
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);	
	ЭлементОтбора.ВидСравнения = ВидСравнения;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
	ЭлементОтбора.Представление = Представление;
	
КонецПроцедуры

// Проверяет наличие реквизита или свойства у произвольного объекта без обращения к метаданным.
//
// Параметры:
//  Объект       - Произвольный - объект, у которого нужно проверить наличие реквизита или свойства;
//  ИмяРеквизита - Строка       - имя реквизита или свойства.
//
// Возвращаемое значение:
//  Булево - Истина, если есть.
//
Функция ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Экспорт
	
	КлючУникальности   = Новый УникальныйИдентификатор;
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции

Функция ЕстьСвойство(Объект, ИмяРеквизита) Экспорт
	
	ЕстьСвойство = Ложь;
	
	Если Не ((Объект = Неопределено) ИЛИ (ТипЗнч(Объект) = Тип("Булево")))
		И ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Тогда
			ЕстьСвойство = Истина;
	КонецЕсли;
	
	Возврат ЕстьСвойство;
	
КонецФункции

Функция ПриведенноеКДлинеЗначение(Знач ИсходнаяСтрока, Длина) Экспорт
	
	Если ТипЗнч(ИсходнаяСтрока) = Тип("Число") Тогда
		Строка = Формат(ИсходнаяСтрока, "ЧН=0; ЧГ=0");
	Иначе
		Строка = СокрЛП(ИсходнаяСтрока);
	КонецЕсли;
	ТекущаяДлина = СтрДлина(Строка);
	Пока ТекущаяДлина < Длина Цикл
		Строка = "0" + Строка;
		ТекущаяДлина = ТекущаяДлина + 1;
	КонецЦикла;
	
	Возврат Строка;
	
КонецФункции

// Проверяет, содержит ли строка только цифры.
//
// Параметры:
//  Значение         - Строка - проверяемая строка.
//  Устаревший       - Булево - устаревший параметр, не используется.
//  ПробелыЗапрещены - Булево - если Ложь, то в строке допустимо наличие пробелов.
//
// Возвращаемое значение:
//   Булево - Истина - строка содержит только цифры или пустая, Ложь - строка содержит иные символы.
//
// Пример:
//  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("0123"); // Истина
//  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("0123abc"); // Ложь
//  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("01 2 3",, Ложь); // Истина
//
Функция ТолькоЦифрыВСтроке(Знач Значение, Знач Устаревший = Истина, Знач ПробелыЗапрещены = Истина) Экспорт
	
	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПробелыЗапрещены Тогда
		Значение = СтрЗаменить(Значение, " ", "");
	КонецЕсли;
		
	Если СтрДлина(Значение) = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Если содержит только цифры, то в результате замен должна быть получена пустая строка.
	// Проверять при помощи ПустаяСтрока нельзя, так как в исходной строке могут быть пробельные символы.
	Возврат СтрДлина(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
			Значение, "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", "")) = 0;
	
КонецФункции

// Устанавливает свойство ИмяСвойства элемента формы с именем ИмяЭлемента в значение Значение.
// Применяется в тех случаях, когда элемент формы может не быть на форме из-за отсутствия прав у пользователя
// на объект, реквизит объекта или команду.
//
// Параметры:
//  ЭлементыФормы - свойство ЭлементыФормы управляемой формы.
//  ИмяЭлемента - Строка - имя элемента формы
//  ИмяСвойства - Строка - имя устанавливаемого свойства элемента формы
//  Значение - Произвольный - новое значение элемента
// 
Процедура УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства, Значение) Экспорт
    
    ЭлементФормы = ЭлементыФормы.Найти(ИмяЭлемента);
    Если ЭлементФормы <> Неопределено И Значение <> Неопределено Тогда
        ЭлементФормы[ИмяСвойства] = Значение;
    КонецЕсли;
    
КонецПроцедуры

Функция ЭтоДокументПоНаименованию(Контекст, Имя) Экспорт
	
	Результат = Ложь;
	ТипКонтекста = ТипЗнч(Контекст);
	ТипДокумента = Тип(СтрШаблон("ДокументСсылка.%1",Имя));
	Если ТипКонтекста = Тип("ФормаКлиентскогоПриложения") Тогда
		Если СтрНачинаетсяС(Контекст.ИмяФормы, СтрШаблон("Документ.%1",Имя)) Тогда
			Результат = Истина;
		КонецЕсли;
	ИначеЕсли ТипКонтекста = ТипДокумента Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьНаличиеЭлементаФормы(Элементы, ИмяЭлемента) Экспорт 
	
	Возврат НЕ Элементы.Найти(ИмяЭлемента) = Неопределено;
	
КонецФункции

Функция ПрефиксКодированияРеквизита(Знач ТипыИдентификаторовТовараККТ) Экспорт;
	
	Если ТипыИдентификаторовТовараККТ = ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовШКТовараИСМПТК.КодТовараВФорматеEAN8") Тогда
		Результат = 17672; // 45h 08h - Код товара в формате EAN-8, UPC-E.
	ИначеЕсли ТипыИдентификаторовТовараККТ = ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовШКТовараИСМПТК.КодТовараВФорматеEAN13") Тогда
		Результат = 17677; // 45h 0Dh - Код товара в формате EAN-13, UPC-A.
	ИначеЕсли ТипыИдентификаторовТовараККТ = ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовШКТовараИСМПТК.КодТовараВФорматеITF14") Тогда
		Результат = 18702; // 49h 0Eh - Код товара в формате EAN-13, UPC-A.
	ИначеЕсли ТипыИдентификаторовТовараККТ = ПредопределенноеЗначение("Перечисление.ТипыИдентификаторовШКТовараИСМПТК.КодТовараВФорматеDataMatrixGS1") Тогда
		Результат = 17485; // 44h 4Dh - Код товара в формате GS1 Data Matrix или Data Matrix маркировки.
	Иначе 
		Результат = 0; // 00h 00h - Код товара, который не распознан.
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УдалитьВременныеФайлы(ПутьКФайлам) Экспорт
	
	Попытка
		УдалитьФайлы(ПутьКФайлам);
	Исключение
		ЗаписьЖурналаРегистрацииОшибкаУдаленияФайла(ПутьКФайлам, ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписьЖурналаРегистрацииОшибкаУдаленияФайла(ИмяФайла, ИнформацияОбОшибке)
	
	Комментарий = НСтр("ru = 'Не удалось удалить файл %ИмяФайла% по причине:'")
				+ Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	Комментарий = СтрЗаменить(Комментарий, "%ИмяФайла%", ИмяФайла);
	
	ИмяСобытия  = РаботаСТекстамиИСМПТККлиентСервер.ТекстСообщенияОшибкаВФункцииСПараметром();
	ИмяСобытия  = СтрЗаменить(ИмяСобытия, "%ИмяФункции%", "ОбщегоНазначенияИСМПТККлиентСервер.УдалитьВременныеФайлы");
				
	ОбщегоНазначенияИСМПТКВызовСервера.СоздатьЗаписьЖурналаРегистрации(ИмяСобытия, "Ошибка",,, Комментарий);
	
КонецПроцедуры

// Возвращает копию исходного массива с уникальными значениями.
//
// Параметры:
//  Массив - Массив - массив произвольных значений.
//
// Возвращаемое значение:
//  Массив - массив уникальных элементов.
//
Функция СвернутьМассив(Знач Массив) Экспорт
	
	Результат = Новый Массив;
	ДополнитьМассив(Результат, Массив, Истина);
	
	Возврат Результат;
	
КонецФункции

// Дополняет массив МассивПриемник значениями из массива МассивИсточник.
//
// Параметры:
//  МассивПриемник - Массив - массив, в который необходимо добавить значения.
//  МассивИсточник - Массив - массив значений для заполнения.
//  ТолькоУникальныеЗначения - Булево - если истина, то в массив будут включены только уникальные значения.
//
Процедура ДополнитьМассив(МассивПриемник, МассивИсточник, ТолькоУникальныеЗначения = Ложь) Экспорт
	
	Если ТолькоУникальныеЗначения Тогда
		
		УникальныеЗначения = Новый Соответствие;
		
		Для Каждого Значение Из МассивПриемник Цикл
			УникальныеЗначения.Вставить(Значение, Истина);
		КонецЦикла;
		
		Для Каждого Значение Из МассивИсточник Цикл
			Если УникальныеЗначения[Значение] = Неопределено Тогда
				МассивПриемник.Добавить(Значение);
				УникальныеЗначения.Вставить(Значение, Истина);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого Значение Из МассивИсточник Цикл
			МассивПриемник.Добавить(Значение);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Создает массив и помещает в него переданное значение.
//
// Параметры:
//  Значение - Произвольный - любое значение.
//
// Возвращаемое значение:
//  Массив - массив из одного элемента.
//
Функция ЗначениеВМассиве(Знач Значение) Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Значение);
	
	Возврат Результат;
	
КонецФункции

// Удаляет одно значение из массива.
//
// Параметры:
//  Массив - Массив - массив, из которого необходимо удалить значение;
//  Значение - Массив - удаляемое значение из массива.
// 
Процедура УдалитьЗначениеИзМассива(Массив, Значение) Экспорт
	
	Индекс = Массив.Найти(Значение);
	Если Индекс <> Неопределено Тогда
		Массив.Удалить(Индекс);
	КонецЕсли;
	
КонецПроцедуры

// Формирует путь к заданной строке НомерСтроки и колонке ИмяРеквизита 
// табличной части ИмяТабличнойЧасти для выдачи сообщений в форме.
// Для совместного использования с процедурой СообщитьПользователю
// (для передачи в параметры Поле или ПутьКДанным). 
//
// Параметры:
//  ИмяТабличнойЧасти - Строка - имя табличной части.
//  НомерСтроки - Число - номер строки табличной части.
//  ИмяРеквизита - Строка - имя реквизита.
//
// Возвращаемое значение:
//  Строка - путь к ячейке таблицы.
//
Функция ПутьКТабличнойЧасти(Знач ИмяТабличнойЧасти, Знач НомерСтроки, Знач ИмяРеквизита) Экспорт
	
	Возврат ИмяТабличнойЧасти + "[" + Формат(НомерСтроки - 1, "ЧН=0; ЧГ=0") + "]." + ИмяРеквизита;
	
КонецФункции

#Область Скопировать

// Создает полную копию структуры, соответствия, массива, списка или таблицы значений, рекурсивно, 
// с учетом типов дочерних элементов. При этом содержимое значений объектных типов 
// (СправочникОбъект, ДокументОбъект и т.п.) не копируются, а возвращаются ссылки на исходный объект.
//
// Параметры:
//  Источник - Структура, Соответствие, Массив, СписокЗначений, ТаблицаЗначений - объект, который необходимо 
//             скопировать.
//
// Возвращаемое значение:
//  Структура, Соответствие, Массив, СписокЗначений, ТаблицаЗначений - копия объекта, переданного в параметре Источник.
//
Функция СкопироватьРекурсивно(Источник, ФиксироватьДанные = Неопределено) Экспорт
	
	Перем Приемник;
	
	ТипИсточника = ТипЗнч(Источник);
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Если ТипИсточника = Тип("ТаблицаЗначений") Тогда
		Возврат Источник.Скопировать();
	КонецЕсли;
#КонецЕсли	
	Если ТипИсточника = Тип("Структура")
		Или ТипИсточника = Тип("ФиксированнаяСтруктура") Тогда
		
		Приемник = СкопироватьСтруктуру(Источник, ФиксироватьДанные);
		
	ИначеЕсли ТипИсточника = Тип("Соответствие")
		Или ТипИсточника = Тип("ФиксированноеСоответствие") Тогда
		
		Приемник = СкопироватьСоответствие(Источник, ФиксироватьДанные);
		
	ИначеЕсли ТипИсточника = Тип("Массив")
		Или ТипИсточника = Тип("ФиксированныйМассив") Тогда
		
		Приемник = СкопироватьМассив(Источник, ФиксироватьДанные);
		
	ИначеЕсли ТипИсточника = Тип("СписокЗначений") Тогда
		
		Приемник = СкопироватьСписокЗначений(Источник, ФиксироватьДанные);
		
	Иначе
		
		Приемник = Источник;
		
	КонецЕсли;
	
	Возврат Приемник;
	
КонецФункции

// Создает копию значения типа Структура, рекурсивно, с учетом типов значений свойств. 
// Если свойства структуры содержат значения объектных типов (СправочникОбъект, ДокументОбъект и т.п.),
// то их содержимое не копируются, а возвращаются ссылки на исходный объект.
//
// Параметры:
//  СтруктураИсточник - Структура - копируемая структура.
// 
// Возвращаемое значение:
//  Структура - копия исходной структуры.
//
Функция СкопироватьСтруктуру(СтруктураИсточник, ФиксироватьДанные = Неопределено) Экспорт
	
	СтруктураРезультат = Новый Структура;
	
	Для Каждого КлючИЗначение Из СтруктураИсточник Цикл
		СтруктураРезультат.Вставить(КлючИЗначение.Ключ, СкопироватьРекурсивно(КлючИЗначение.Значение, ФиксироватьДанные));
	КонецЦикла;
	
	Если ФиксироватьДанные = Истина 
		Или ФиксироватьДанные = Неопределено
		И ТипЗнч(СтруктураИсточник) = Тип("ФиксированнаяСтруктура") Тогда 
		
		Возврат Новый ФиксированнаяСтруктура(СтруктураРезультат);
		
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Создает копию значения типа Соответствие, рекурсивно, с учетом типов значений.
// Если значения соответствия содержат значения объектных типов (СправочникОбъект, ДокументОбъект и т.п.),
// то их содержимое не копируются, а возвращаются ссылки на исходный объект.
//
// Параметры:
//  СоответствиеИсточник - Соответствие - соответствие, копию которого необходимо получить.
// 
// Возвращаемое значение:
//  Соответствие - копия исходного соответствия.
//
Функция СкопироватьСоответствие(СоответствиеИсточник, ФиксироватьДанные = Неопределено) Экспорт
	
	СоответствиеРезультат = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из СоответствиеИсточник Цикл
		СоответствиеРезультат.Вставить(КлючИЗначение.Ключ, СкопироватьРекурсивно(КлючИЗначение.Значение, ФиксироватьДанные));
	КонецЦикла;
	
	Если ФиксироватьДанные = Истина 
		Или ФиксироватьДанные = Неопределено
		И ТипЗнч(СоответствиеИсточник) = Тип("ФиксированноеСоответствие") Тогда 
		
		Возврат Новый ФиксированноеСоответствие(СоответствиеРезультат);
		
	КонецЕсли;
	
	Возврат СоответствиеРезультат;
	
КонецФункции

// Создает копию значения типа Массив, рекурсивно, с учетом типов значений элементов массива.
// Если элементы массива содержат значения объектных типов (СправочникОбъект, ДокументОбъект и т.п.),
// то их содержимое не копируются, а возвращаются ссылки на исходный объект.
//
// Параметры:
//  МассивИсточник - Массив - массив, копию которого необходимо получить.
// 
// Возвращаемое значение:
//  Массив - копия исходного массива.
//
Функция СкопироватьМассив(МассивИсточник, ФиксироватьДанные = Неопределено) Экспорт
	
	МассивРезультат = Новый Массив;
	
	Для Каждого Элемент Из МассивИсточник Цикл
		МассивРезультат.Добавить(СкопироватьРекурсивно(Элемент, ФиксироватьДанные));
	КонецЦикла;
	
	Если ФиксироватьДанные = Истина 
		Или ФиксироватьДанные = Неопределено
		И ТипЗнч(МассивИсточник) = Тип("ФиксированныйМассив") Тогда 
		
		Возврат Новый ФиксированныйМассив(МассивРезультат);
		
	КонецЕсли;
	
	Возврат МассивРезультат;
	
КонецФункции

// Создает копию значения типа СписокЗначений, рекурсивно, с учетом типов его значений.
// Если в списке значений есть значения объектных типов (СправочникОбъект, ДокументОбъект и т.п.),
// то их содержимое не копируются, а возвращаются ссылки на исходный объект.
//
// Параметры:
//  СписокИсточник - СписокЗначений - список значений, копию которого необходимо получить.
// 
// Возвращаемое значение:
//  СписокЗначений - копия исходного списка значений.
//
Функция СкопироватьСписокЗначений(СписокИсточник, ФиксироватьДанные = Неопределено) Экспорт
	
	СписокРезультат = Новый СписокЗначений;
	
	Для Каждого ЭлементСписка Из СписокИсточник Цикл
		
		СписокРезультат.Добавить(
			СкопироватьРекурсивно(ЭлементСписка.Значение, ФиксироватьДанные), 
			ЭлементСписка.Представление, 
			ЭлементСписка.Пометка, 
			ЭлементСписка.Картинка);
			
	КонецЦикла;
	
	Возврат СписокРезультат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПроверкаНаличияПродукции

// Выполняет проверку в переданном массиве "ВидыПродукции" наличие элемента табачной продукции.
//
// Параметры:
//  ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИСМПТК - Вид продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если в переданном массиве найден элемент перечисления табачная продукция.
Функция ПрисутствуетТабачнаяПродукция(ВидыПродукции) Экспорт
	
	Возврат ВидыПродукции.Найти(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная")) <> Неопределено;
	
КонецФункции

// Выполняет проверку в переданном массиве "ВидыПродукции" наличие элемента обувной продукции.
//
// Параметры:
//  ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИСМПТК - Вид продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если в переданном массиве найден элемент перечисления обувная продукция.
Функция ПрисутствуетОбувнаяПродукция(ВидыПродукции) Экспорт

	Возврат ВидыПродукции.Найти(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная")) <> Неопределено;

КонецФункции

Функция ПрисутствуетМолочнаяПродукция(ВидыПродукции) Экспорт
	
	Возврат ВидыПродукции.Найти(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция")) <> Неопределено;
	
КонецФункции

Функция ПрисутствуетТекстильнаяПродукция(ВидыПродукции) Экспорт
	
	Возврат ВидыПродукции.Найти(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность")) <> Неопределено;
	
КонецФункции

Функция ПрисутствуетЛекарственнаяПродукция(ВидыПродукции) Экспорт
	
	Возврат ВидыПродукции.Найти(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты")) <> Неопределено;
	
КонецФункции

Функция ПрисутствуетВодаИНапитки(ВидыПродукции) Экспорт
	
	Возврат ВидыПродукции.Найти(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.БезалкогольныеНапитки")) <> Неопределено;
	
КонецФункции

// Возвращает перечень маркируемой продукции, оборот которой фиксируется в ИС.
//
// Возвращаемое значение:
//   Массив Из ПеречислениеСсылка.ВидыПродукцииИСМПТК - список видов маркируемой продукции.
//
Функция ВидыПродукцииИСМП() Экспорт
	
	ВидыПродукцииИСМПТКМП = Новый Массив();
	ВидыПродукцииИСМПТКМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Обувная"));
	ВидыПродукцииИСМПТКМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.Табачная"));
	ВидыПродукцииИСМПТКМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.МолочнаяПродукция"));
	ВидыПродукцииИСМПТКМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛегкаяПромышленность"));
	ВидыПродукцииИСМПТКМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИСМПТК.ЛекарственныеПрепараты"));
		
	Возврат ВидыПродукцииИСМПТКМП;
	
КонецФункции

Функция ВидыПродукцииПоФильтру(ФильтрПоВидуПродукции, ВидыПродукции) Экспорт
	
	Если Не ФильтрПоВидуПродукции.Использовать Тогда
		Возврат Новый ФиксированныйМассив(ВидыПродукции);
	КонецЕсли;
	
	Результат = Новый Массив;
	Для Каждого ВидПродукции Из ФильтрПоВидуПродукции.ВидыПродукции Цикл
		Если ВидыПродукции.Найти(ВидПродукции) <> Неопределено Тогда
			Результат.Добавить(ВидПродукции);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(Результат);
	
КонецФункции

// Определяет допустимость обработки вида продукции по параметрам сканирования.
//
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования)
// Возвращаемое значение:
//  Булево - Истина, если вид продукции допустим.
Функция ДопустимВидПродукции(ПараметрыСканирования, ВидПродукции) Экспорт
	
	Если ПараметрыСканирования = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	ВидДопустим = Ложь;
	
	Если ТипЗнч(ВидПродукции) = Тип("Массив") Тогда   //Передается либо массив данных
		Для Каждого ТГДляПроверки Из ВидПродукции Цикл
			Если ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(ВидПродукции) <> Неопределено Тогда
				ВидДопустим = Истина; //Хотя бы один допустим - этого хватит
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(ВидПродукции) <> Неопределено Тогда   //либо конкретное значение для проверки
		ВидДопустим = Истина; //Хотя бы один допустим - этого хватит
	КонецЕсли;
	
	Возврат ВидДопустим; 
	
КонецФункции

#КонецОбласти