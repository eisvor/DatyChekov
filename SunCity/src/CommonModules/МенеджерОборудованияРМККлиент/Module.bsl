
///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обновляет текущее рабочее место с учетом имени компьютера.
//
// Возвращаемое значение:
//  Результат - Булево - признак успешного обновления параметра сеанса.
//
Функция ОбновитьРабочееМестоПользователя() Экспорт
	
	Результат = Истина;

	#Если Не ВебКлиент Тогда
		ИмяКомпьютераРабочегоМеста = ИмяКомпьютера();
	#Иначе
		ИмяКомпьютераРабочегоМеста = НСтр("ru = 'WebКлиент'");
	#КонецЕсли
	
	ИдентификаторРабочегоМеста = МенеджерОборудованияКлиентСервер.ИдентификаторКлиентаДляРабочегоМеста();
	
	ДанныеПроверки = Новый Структура();
	ДанныеПроверки =
		МенеджерОборудованияРМКВызовСервера.АктуальноеРабочееМестоПользователя(ИдентификаторРабочегоМеста,
			ИмяКомпьютераРабочегоМеста);
	
	Если ДанныеПроверки.Свойство("ЗаменитьРабочееМесто")
			И ДанныеПроверки.ЗаменитьРабочееМесто
			И ДанныеПроверки.Свойство("АктуальноеРабочееМесто") Тогда
			
				РабочееМесто = ДанныеПроверки.АктуальноеРабочееМесто;
				Оповестить("ИзмененоРабочееМестоТекущегоСеанса", РабочееМесто);
				
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ПодключаемоеОборудование

#Область ВзаимодействиеСОборудованием

Процедура ПодключитьОборудованиеПоТипу(Оповещение, Идентификатор, ТипыПО) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ПодключитьОборудованиеПоТипу(Оповещение, Идентификатор, ТипыПО, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
			МодульВызова.НачатьПодключениеОборудованиеПоТипу(Оповещение, Идентификатор, ТипыПО);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодключитьОборудованиеПоИдентификатору(Оповещение, ИдентификаторКлиента, ИдентификаторУстройства) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ПодключитьОборудованиеПоИдентификатору(Оповещение,
		ИдентификаторКлиента, ИдентификаторУстройства, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда
			МодульМенеджерОборудованияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
			МодульМенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоИдентификатору(Оповещение,
				ИдентификаторКлиента, ИдентификаторУстройства);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтключитьОборудованиеПоТипу(ОписаниеОповещения, УникальныйИдентификатор, ТипыПО) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ОтключитьОборудованиеПоТипу(ОписаниеОповещения, УникальныйИдентификатор, ТипыПО, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
			МодульВызова.НачатьОтключениеОборудованияПоТипу(ОписаниеОповещения, УникальныйИдентификатор, ТипыПО);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершитьПодключениеОборудования(Форма, РезультатПодключения) Экспорт

	Если ОбщегоНазначенияРМККлиентСервер.ЕстьСвойство(РезультатПодключения, "Результат") Тогда
		
		Если РезультатПодключения.Результат Тогда
			
			ЗавершитьУспешноеПодключениеОборудования(Форма, РезультатПодключения);
			
		Иначе
			
			ЗавершитьПодключениеОборудованияСОшибкой(Форма, РезультатПодключения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПолучениеПараметровУстройства(Оповещение, Идентификатор, ИдентификаторУстройства) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьПолучениеПараметровУстройства(Оповещение, Идентификатор, ИдентификаторУстройства, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
			МодульВызова.НачатьПолучениеПараметровУстройства(Оповещение, Идентификатор, ИдентификаторУстройства);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПолучениеОписанияОборудования(Оповещение, Идентификатор = Неопределено, ИдентификаторУстройства = Неопределено) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьПолучениеОписанияОборудования(Оповещение, Идентификатор, ИдентификаторУстройства, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
			МодульВызова.НачатьПолучениеОписанияОборудования(Оповещение, Идентификатор, ИдентификаторУстройства);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДрайверОборудования(Оповещение, Идентификатор) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.УстановитьДрайверОборудования(Оповещение, Идентификатор, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
			МодульВызова.УстановитьДрайверОборудования(Оповещение, Идентификатор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьНастройкуОборудования(Идентификатор, Оповещение) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ВыполнитьНастройкуОборудования(Идентификатор, Оповещение, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
			МодульВызова.ВыполнитьНастройкуОборудования(Идентификатор, Оповещение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПолучениеОписанияДрайвера(Оповещение, Драйвер) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьПолучениеОписанияДрайвера(Оповещение, Драйвер, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
			МодульВызова.НачатьПолучениеОписанияДрайвера(Оповещение, Драйвер);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьТестУстройства(Оповещение, ИдентификаторОборудования, ПараметрыУстройства) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьТестУстройства(Оповещение, ИдентификаторОборудования, ПараметрыУстройства, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
			МодульВызова.НачатьТестУстройства(Оповещение, ИдентификаторОборудования, ПараметрыУстройства);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция РабочееМестоКлиента() Экспорт
	
	РабочееМесто = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ПолучитьРабочееМестоКлиента(РабочееМесто, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиентПовтИсп");
			РабочееМесто = МодульВызова.ПолучитьРабочееМестоКлиента();
		КонецЕсли;
	КонецЕсли;
	
	Возврат РабочееМесто;
	
КонецФункции

Функция ИдентификаторКлиентаДляРабочегоМеста() Экспорт
	
	ИдентификаторКлиента = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ПолучитьИдентификаторКлиентаДляРабочегоМеста(ИдентификаторКлиента, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиентСервер");
			ИдентификаторКлиента = МодульВызова.ИдентификаторКлиентаДляРабочегоМеста();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИдентификаторКлиента;
	
КонецФункции

Функция ДанныеУстройства(ИдентификаторУстройства) Экспорт
	
	ДанныеУстройства = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ДанныеУстройства(ИдентификаторУстройства, ДанныеУстройства, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияВызовСервера");
			ДанныеУстройства = МодульВызова.ДанныеУстройства(ИдентификаторУстройства);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеУстройства;

КонецФункции

Функция СохранитьПараметрыУстройства(Идентификатор, ЗначенияНастроек) Экспорт
	
	Результат = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.СохранитьПараметрыУстройства(Идентификатор, ЗначенияНастроек, Результат, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияВызовСервера");
			Результат = МодульВызова.СохранитьПараметрыУстройства(Идентификатор, ЗначенияНастроек);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТипыПодключаемогоОборудования() Экспорт
	
	ТипыПодключаемогоОборудования = Новый Соответствие;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ТипыПодключаемогоОборудования(ТипыПодключаемогоОборудования, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияВызовСервера");
			ТипыПодключаемогоОборудования = МодульВызова.ПолучитьСоответствиеТиповОборудования();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипыПодключаемогоОборудования;
	
КонецФункции

Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияКлиент.ОбработкаВнешнегоСобытия(Источник, Событие, Данные);
	
КонецПроцедуры

Функция ПолучитьПодключенноеУстройство(ИдентификаторУстройства) Экспорт
	
	ПараметрыПодключенногоУстройства = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ПолучитьПодключенноеУстройство(ИдентификаторУстройства,
		ПараметрыПодключенногоУстройства, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда
			МодульМенеджерОборудованияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
			ПараметрыПодключенногоУстройства
				= МодульМенеджерОборудованияКлиент.ПолучитьПодключенноеУстройство(ИдентификаторУстройства);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыПодключенногоУстройства;
	
КонецФункции

#КонецОбласти

#Область ЧекопечатающиеУстройства

Процедура ДобавитьЧекВОчередьЧековККТ(ПараметрыФискализации, ПараметрыПакетнойОперации) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ДобавитьЧекВОчередьЧековККТ(ПараметрыФискализации, ПараметрыПакетнойОперации, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваВызовСервера");
			МодульВызова.ДобавитьЧекВОчередьЧековККТ(ПараметрыФискализации, ПараметрыПакетнойОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ФискализацияЧековВОчереди(РазрешенаАвтоматическаяФискализация, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ФискализацияЧековВОчереди(РазрешенаАвтоматическаяФискализация, ДополнительныеПараметры, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
			МодульВызова.ФискализацияЧековВОчереди(РазрешенаАвтоматическаяФискализация, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПараметрыВыполненияОперацииНаАвтономнойККТ(ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ПараметрыВыполненияОперацииНаАвтономнойККТ(ДополнительныеПараметры, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства.АвтономнаяККТ") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеАвтономныеУстройстваКлиент");
			ДополнительныеПараметры = МодульВызова.ПараметрыВыполненияОперацииНаАвтономнойККТ();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКомандуЗавершениеАвтономнойККТ(КодВозвратаДиалога, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ВыполнитьКомандуЗавершениеАвтономнойККТ(КодВозвратаДиалога, ДополнительныеПараметры, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства.АвтономнаяККТ") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеАвтономныеУстройстваКлиент");
			МодульВызова.ВыполнитьКомандуЗавершение(КодВозвратаДиалога, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстНефискальногоЧека(ПараметрыОперации) Экспорт
	
	ТекстЧека = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.СформироватьТекстНефискальногоЧека(ПараметрыОперации, ТекстЧека, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиентСервер");
			ТекстЧека = МодульВызова.СформироватьТекстНефискальногоЧека(ПараметрыОперации);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстЧека;
	
КонецФункции

Функция ПараметрыПечатиТекста(ТекстЧека) Экспорт
	
	ПараметрыПечатиТекста = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ПараметрыПечатиТекста(ТекстЧека, ПараметрыПечатиТекста, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер");
			ПараметрыПечатиТекста = МодульВызова.ПараметрыПечатиТекста(ТекстЧека);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыПечатиТекста;
	
КонецФункции

Функция ПараметрыПечатиКопииЧека() Экспорт
	
	ПараметрыПечати = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ПараметрыПечатиКопииЧека(ПараметрыПечати, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер");
			ПараметрыПечати = МодульВызова.ПараметрыПечатьКопииЧека();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыПечати;
	
КонецФункции

Функция ПараметрыПечатиQRКодаНаФискальномУстройстве() Экспорт
	
	ПараметрыПечати = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ПараметрыПечатиQRКодаНаФискальномУстройстве(ПараметрыПечати, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер");
			ПараметрыПечати = МодульВызова.ПараметрыПечатиQRКодаНаФискальномУстройстве();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыПечати;
	
КонецФункции

Процедура НачатьПечатьТекста(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьПечатьТекста(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			МодульВызова.НачатьПечатьТекста(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПечатьКопииЧека(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьПечатьКопииЧека(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			МодульВызова.НачатьПечатьКопииЧека(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПечатьQRКодаНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьПечатьQRКодаНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			МодульВызова.НачатьПечатьQRКодаНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьФормированиеОтчетаБезГашения(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьФормированиеОтчетаБезГашения(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			МодульВызова.НачатьФормированиеОтчетаБезГашения(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОткрытиеДенежногоЯщика(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьОткрытиеДенежногоЯщика(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			МодульВызова.НачатьОткрытиеДенежногоЯщика(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОткрытиеСменыНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьОткрытиеСменыНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации, ДополнительныеПараметры, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			МодульВызова.НачатьОткрытиеСменыНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьЗакрытиеСменыНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьЗакрытиеСменыНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации, ДополнительныеПараметры, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			МодульВызова.НачатьЗакрытиеСменыНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;КонецПроцедуры
	
Процедура НачатьПолучениеТекущегоСостоянияФискальногоУстройства(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьПолучениеТекущегоСостоянияФискальногоУстройства(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации, ДополнительныеПараметры, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			МодульВызова.НачатьПолучениеТекущегоСостоянияФискальногоУстройства(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ВесовоеОборудование

Процедура НачатьПолученияВесаСЭлектронныхВесов(ОповещениеЗавершенияВзвешивания, УникальныйИдентификатор, ИдентификаторВесов, ПараметрыОперации) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьПолученияВесаСЭлектронныхВесов(ОповещениеЗавершенияВзвешивания, УникальныйИдентификатор, ИдентификаторВесов, ПараметрыОперации, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ВесовоеОборудование") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеВесовоеОборудованиеКлиент");
			МодульВызова.НачатьПолученияВесаСЭлектронныхВесов(ОповещениеЗавершенияВзвешивания, УникальныйИдентификатор, ИдентификаторВесов, ПараметрыОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УстройстваРаспознавания

Процедура НачатьРаспознавание(Оповещение, ИдентификаторКлиента, УстройствоРаспознавания, ПараметрыОперации) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьРаспознавание(Оповещение, ИдентификаторКлиента,
		УстройствоРаспознавания, ПараметрыОперации, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		ИмяПодсистемыРаспознавания = "ПоддержкаОборудования.ПодключаемоеОборудование.УстройствоРаспознавания";
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует(ИмяПодсистемыРаспознавания) Тогда
			МодульОборудованиеУстройствоРаспознаванияКлиентСервер
				= ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеУстройствоРаспознаванияКлиентСервер");
			МодульОборудованиеУстройствоРаспознаванияКлиент
				= ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеУстройствоРаспознаванияКлиент");
			
			ПараметрыРаспознавания = МодульОборудованиеУстройствоРаспознаванияКлиентСервер.ПараметрыОперацииРаспознать();
			ПараметрыРаспознавания.Обучение = ПараметрыОперации.ПроводитьОбучение;
			ПараметрыРаспознавания.Варианты = ПараметрыОперации.КоличествоВариантов;
			
			МодульОборудованиеУстройствоРаспознаванияКлиент.НачатьРаспознавание(Оповещение, ИдентификаторКлиента,
				УстройствоРаспознавания, ПараметрыРаспознавания);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодтвердитьРаспознавание(Оповещение, ИдентификаторКлиента, УстройствоРаспознавания, КодSKU) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ПодтвердитьРаспознавание(Оповещение, ИдентификаторКлиента,
		УстройствоРаспознавания, КодSKU, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		ИмяПодсистемыРаспознавания = "ПоддержкаОборудования.ПодключаемоеОборудование.УстройствоРаспознавания";
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует(ИмяПодсистемыРаспознавания) Тогда
			МодульОборудованиеУстройствоРаспознаванияКлиентСервер
				= ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеУстройствоРаспознаванияКлиентСервер");
			МодульОборудованиеУстройствоРаспознаванияКлиент
				= ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеУстройствоРаспознаванияКлиент");
			
			ПараметрыПодтверждения = МодульОборудованиеУстройствоРаспознаванияКлиентСервер.ПараметрыОперацииПодтвердить();
			ПараметрыПодтверждения.Код = КодSKU;
			
			МодульОборудованиеУстройствоРаспознаванияКлиент.НачатьПодтверждениеРаспознавания(Оповещение, ИдентификаторКлиента,
				УстройствоРаспознавания, ПараметрыПодтверждения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДисплейПокупателя

// Возвращает структуру для вывода информации на дисплей покупателя.
//
// Возвращаемое значение:
//  ИсходныеДанные - Структура:
//   * Операция - Строка - код операции для отображения на эеране
//   * ИспользоватьПодключаемоеОборудование - Булево
//   * ДанныеДляОтображения - Структура
//   * СуммаСкидки - Число
//   * СуммаИтого - Число
//   * ОповещениеПриЗавершении - ОписаниеОповещения
//   * СуммаКОплате - Число
//   * ЗначениеQRКода - Строка - Строка Base64
//   * КартинкаQRКода - Строка - Строка Base64
//   * Организация - ОпределяемыйТип.Организация
//
//
Функция ИсходныеДанныеДляПервичнойПередачиНаДисплейПокупателя() Экспорт

	ИсходныеДанные = Новый Структура();
	ИсходныеДанные.Вставить("Операция");
	ИсходныеДанные.Вставить("ИспользоватьПодключаемоеОборудование");
	ИсходныеДанные.Вставить("ДанныеДляОтображения");
	ИсходныеДанные.Вставить("СуммаСкидки");
	ИсходныеДанные.Вставить("СуммаИтого");
	
	ИсходныеДанные.Вставить("ОповещениеПриЗавершении");
	ИсходныеДанные.Вставить("СуммаКОплате");
	ИсходныеДанные.Вставить("ЗначениеQRКода");
	ИсходныеДанные.Вставить("КартинкаQRКода");
	ИсходныеДанные.Вставить("Организация");
	ИсходныеДанные.Вставить("ТекстОшибки", "");

	Возврат ИсходныеДанные;

КонецФункции

// Возвращает структуру для обновления дисплея покупателя.
//
// Возвращаемое значение:
//  ИсходныеДанные - Структура.
//
Функция ИсходныеДанныеДляОбновленияДанныхНаДисплееПокупателя() Экспорт
	
	ИсходныеДанные = ИсходныеДанныеДляПервичнойПередачиНаДисплейПокупателя();
	ИсходныеДанные.Вставить("ОтображатьТолькоИтоги");
	ИсходныеДанные.Вставить("ТекущаяСтрока");
	ИсходныеДанные.Вставить("Товары");
	
	Возврат ИсходныеДанные;
	
КонецФункции

// Обновление информации, выводимой на дисплей покупателя.
//
// Параметры:
//  Операция - Строка
//  ИсходныеДанные - Структура.
//  ОбъектВладелец - УправляемаяФорма.
//
Процедура ОбновитьДанныеНаДисплееПокупателя(Операция, ИсходныеДанные, ОбъектВладелец) Экспорт
	
	Результат = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ОбновитьДанныеНаДисплееПокупателя(Операция, ИсходныеДанные, ОбъектВладелец, СтандартнаяОбработка);
	Если СтандартнаяОбработка И ИспользуетсяБПО() 
		И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ДисплеиПокупателя") Тогда
			
		ОтображатьТолькоИтоги = ИсходныеДанные.ОтображатьТолькоИтоги;
		ТекущаяСтрока = ИсходныеДанные.ТекущаяСтрока;
		Товары = ИсходныеДанные.Товары;
		ДанныеДляОтображения = ИсходныеДанные.ДанныеДляОтображения;
		ИспользоватьПодключаемоеОборудование = ИсходныеДанные.ИспользоватьПодключаемоеОборудование;
		СуммаСкидки = ИсходныеДанные.СуммаСкидки;
		СуммаИтого = ИсходныеДанные.СуммаИтого;
		
		Если Не ИспользоватьПодключаемоеОборудование Тогда
			Возврат;
		КонецЕсли;
		
		Если ТекущаяСтрока = Неопределено Тогда
			
			Если Товары.Количество() > 0 Тогда
				ТекущаяСтрока = Товары[0];
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ТекущаяСтрока = Неопределено Тогда
			
			ПредставлениеСкидки = НСтр("ru = ''");
			
			ИспользуемоеКоличество = ?(ЗначениеЗаполнено(ТекущаяСтрока.Упаковка),
				ТекущаяСтрока.КоличествоУпаковок, ТекущаяСтрока.Количество);
				
			СуммаСтрокиТовара = ТекущаяСтрока.Цена * ИспользуемоеКоличество;
			Скидка = СуммаСтрокиТовара - ТекущаяСтрока.Сумма;
			ИнформацияОТоваре = СокрЛП(ТекущаяСтрока.Номенклатура);
			ДанныеДляОтображения.Весовой = ТекущаяСтрока.Весовой;
			Если НЕ (СуммаСтрокиТовара = 0) И(Скидка > 0.01 ИЛИ Скидка < -0.01) Тогда
				
				ПредставлениеСкидки = НСтр("ru = '%1 %2 (%1 %3)'");
				Коэффициент = ?(Скидка > 0, 1, -1);
				ЗнакСкидки = ?(Скидка > 0, "-", "+");
				
				ОбщийПроцентСкидкиСтрокой = СтрШаблон(НСтр("ru = '%1%%'"),
					Формат(Коэффициент * Окр(100 * Скидка / СуммаСтрокиТовара, 2, 1), НСтр("ru = 'ЧДЦ=2'")));
				СуммаСкидкиСтрокой = ФорматСумм(Коэффициент * Скидка);
				
				ПредставлениеСкидки = СтрШаблон(ПредставлениеСкидки, ЗнакСкидки, СуммаСкидкиСтрокой,
					ОбщийПроцентСкидкиСтрокой);
				
			КонецЕсли;
			
			Если НЕ ОтображатьТолькоИтоги Тогда
				
				ДанныеДляОтображения.ТоварНаименование = ИнформацияОТоваре;
				ПредставлениеСВалютой = ИспользуемоеКоличество = 1 И НЕ ТекущаяСтрока.Весовой;
				ПредставлениеЦены = ?(ПредставлениеСВалютой, ФорматСумм(ТекущаяСтрока.Цена), ФорматСуммБезВалюты(ТекущаяСтрока.Цена));
				ДанныеДляОтображения.ТоварЦена = СокрЛП(ПредставлениеЦены);
				ПредставлениеСуммы = ?(ПредставлениеСВалютой , ФорматСумм(ТекущаяСтрока.Сумма), ФорматСуммБезВалюты(ТекущаяСтрока.Сумма));
				ДанныеДляОтображения.ТоварСумма = СокрЛП(ПредставлениеСуммы);
				ДанныеДляОтображения.ТоварКоличество = ИспользуемоеКоличество;
				ДанныеДляОтображения.ТоварСкидка = ПредставлениеСкидки;
				
			КонецЕсли;
		
		КонецЕсли;
		
		ДанныеДляОтображения.СуммаИтого = ФорматСумм(СуммаИтого);
		ДанныеДляОтображения.СуммаСкидки = ФорматСумм(СуммаСкидки);
		
		ИсходныеДанныеОтображения = ИсходныеДанныеДляПервичнойПередачиНаДисплейПокупателя();
		ИсходныеДанныеОтображения.ИспользоватьПодключаемоеОборудование = ИспользоватьПодключаемоеОборудование;
		ИсходныеДанныеОтображения.Операция = Операция;
		ИсходныеДанныеОтображения.ДанныеДляОтображения = ДанныеДляОтображения;
		ИсходныеДанныеОтображения.СуммаСкидки = СуммаСкидки;
		ИсходныеДанныеОтображения.СуммаИтого = СуммаИтого;
		
		ВывестиИнформациюНаДисплейПокупателя(Операция, ИсходныеДанныеОтображения, ОбъектВладелец, Скидка);
		
	КонецЕсли;
	
КонецПроцедуры

// Вывод информации на дисплей покупателя.
//
// Параметры:
//  Операция - Строка
//  ИсходныеДанные - Структура
//		*Операция - Строка
//		*ИспользоватьПодключаемоеОборудование - Булево
//		*ДанныеДляОтображения - Строка
//		*СуммаСкидки - Число
//		*СуммаИтого - Число
//  ОбъектВладелец - УправляемаяФорма.
//  СуммаСкидкиНаТовар - Число.
//
Процедура ВывестиИнформациюНаДисплейПокупателя(Операция, ИсходныеДанные, ОбъектВладелец, СуммаСкидкиНаТовар = 0) Экспорт
	
	Результат = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ВывестиИнформациюНаДисплейПокупателя(Операция, ИсходныеДанные, ОбъектВладелец, СуммаСкидкиНаТовар, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ДисплеиПокупателя") Тогда
			ПараметрыОперации = ИнформацияДляДисплеяПокупателя(Операция, ИсходныеДанные, ОбъектВладелец, СуммаСкидкиНаТовар);
			НачатьОтображениеИнформацииНаДисплейПокупателя(ИсходныеДанные.ОповещениеПриЗавершении, ОбъектВладелец, , ПараметрыОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПодключенныеДисплеиПокупателяВыводятQRКод() Экспорт
	
	Результат = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ПодключенныеДисплеиПокупателяВыводятQRКод(Результат, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ДисплеиПокупателя") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент");
			Результат = МодульВызова.ПодключенныеДисплеиПокупателяВыводятQRКод();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыОперацииДисплейПокупателя(ТекстКОтправке = "", ЗначениеQRКода = "") Экспорт
	
	Результат = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ПараметрыОперацииДисплейПокупателя(ТекстКОтправке, ЗначениеQRКода, Результат, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ДисплеиПокупателя") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент");
			Результат = МодульВызова.ПараметрыОперацииДисплейПокупателя(ТекстКОтправке, ЗначениеQRКода);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура НачатьОчисткуДисплеяПокупателя(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторДисплея = Неопределено,
	ПараметрыОперации = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьОчисткуДисплеяПокупателя(ОповещениеПриЗавершении,
		УникальныйИдентификатор, ИдентификаторДисплея, ПараметрыОперации, ДополнительныеПараметры, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ДисплеиПокупателя") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент");
			МодульВызова.НачатьОчисткуДисплеяПокупателя(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторДисплея, ПараметрыОперации, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыводСтатусаРабочегоМестаНаДисплейПокупателя(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторДисплея,
	ПараметрыОперации, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьВыводСтатусаРабочегоМестаНаДисплейПокупателя(ОповещениеПриЗавершении,
		УникальныйИдентификатор, ИдентификаторДисплея, ПараметрыОперации, ДополнительныеПараметры, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ДисплеиПокупателя") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент");
			МодульВызова.НачатьВыводСтатусаРабочегоМестаНаДисплейПокупателя(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторДисплея, ПараметрыОперации, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыводИнформацииНаДисплейПокупателя(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторДисплея,
	ПараметрыОперации, ДополнительныеПараметры = Неопределено) Экспорт
		
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьВыводИнформацииНаДисплейПокупателя(ОповещениеПриЗавершении,
		УникальныйИдентификатор, ИдентификаторДисплея, ПараметрыОперации, ДополнительныеПараметры, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ДисплеиПокупателя") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент");
			МодульВызова.НачатьВыводИнформацииНаДисплейПокупателя(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторДисплея, ПараметрыОперации, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыводQRКодаНаДисплейПокупателя(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторДисплея,
	ПараметрыОперации) Экспорт
		
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьВыводQRКодаНаДисплейПокупателя(ОповещениеПриЗавершении,
		УникальныйИдентификатор, ИдентификаторДисплея, ПараметрыОперации, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ДисплеиПокупателя") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент");
			МодульВызова.НачатьВыводQRКодаНаДисплейПокупателя(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторДисплея, ПараметрыОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вывод информации на дисплей покупателя.
//
// Параметры:
//  ИсходныеДанные - Структура
//		*Операция - Строка
//		*ИспользоватьПодключаемоеОборудование - Булево
//		*ДанныеДляОтображения - Строка
//  ОбъектВладелец - УправляемаяФорма.
//  УникальныйИдентификатор - ИдентификаторФормы.
//
Процедура НачатьОтображениеИнформацииНаДисплейПокупателя(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторДисплея,
	ПараметрыОперации, ДополнительныеПараметры = Неопределено) Экспорт
		
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьВыводИнформацииНаДисплейПокупателя(ОповещениеПриЗавершении,
		УникальныйИдентификатор, ИдентификаторДисплея, ПараметрыОперации, ДополнительныеПараметры, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ДисплеиПокупателя") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент");
			МодульВызова.НачатьОтображениеИнформацииНаДисплейПокупателя(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторДисплея, ПараметрыОперации, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает разилчные типы операции по дисплею покупателя в виде структуры
//
// Параметры:
//
// Возвращаемое значение:
//  Структура - типы операций дисплея покупателя
//
Функция ТипыОперацийДисплеяПокупателя() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("НачалоРаботы", 0);
	Результат.Вставить("Сервис", 1);
	Результат.Вставить("ПречекQR", 2);
	Результат.Вставить("Оплата", 3);
	Результат.Вставить("ОжиданиеОплаты", 4);
	Результат.Вставить("ОтменаОплаты", 5);
	Результат.Вставить("ДобавлениеТовара", 6);
	Результат.Вставить("УдалениеТовара", 7);
	Результат.Вставить("ИзменениеКоличества", 8);
	Результат.Вставить("ИзменениеЦены", 9);
	Результат.Вставить("СписокТоваров", 10);
	Результат.Вставить("Аннулирование", 11);
	Результат.Вставить("ОтложитьЧек", 12);
	Результат.Вставить("ВозвратТовара", 13);
	Результат.Вставить("Коррекция", 14);
	Результат.Вставить("Информация", 15);
	Результат.Вставить("Ошибка", 16);
	Возврат Результат;
	
КонецФункции

// Выполняет очистку QR-кода на дисплее покупателя, если код выведен не через HTML
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма РМК
Процедура ОчиститьQRКодНаДисплеяхПокупателя(Форма) Экспорт
	
	ПараметрыОперации = МенеджерОборудованияРМККлиент.ПараметрыОперацииДисплейПокупателя();
	НачатьОчисткуДисплеяПокупателя(, Форма.УникальныйИдентификатор, , ПараметрыОперации);
	
КонецПроцедуры

Процедура НачатьВыводСтатусаОперацииНаДисплейПокупателя(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторДисплея,
	ПараметрыОперации, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьВыводСтатусаОперацииНаДисплейПокупателя(ОповещениеПриЗавершении,
		УникальныйИдентификатор, ИдентификаторДисплея, ПараметрыОперации, ДополнительныеПараметры, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ДисплеиПокупателя") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент");
			МодульВызова.НачатьВыводСтатусаОперацииНаДисплейПокупателя(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторДисплея, ПараметрыОперации, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СканерШтрихкода

// Завершение обработки данных по коду.
//
// Параметры:
//  Форма - УправляемаяФорма - форма родитель.
//  ИсходныеДанные - Структура - См. РаботаСоШтрихкодамиПереопределяемый.ЗаполнитьДанныеПоискаПоШтрихкоду.
//  ИмяТабличнойЧасти - Строка - имя табличной части.
//
// Возвращаемое значение:
//  ИдентификаторСтроки - Число, Неопределено.
//
Функция ИдентификаторНайденнойСтроки(Форма, ИсходныеДанные, ИмяТабличнойЧасти = "Товары") Экспорт
	
	ИдентификаторСтроки = Неопределено;
	
	Если ИсходныеДанные.Свойство("АктивироватьСтроку", ИдентификаторСтроки) Тогда
		
		Если ИдентификаторСтроки <> Неопределено Тогда
			
			Форма.ТекущийЭлемент = Форма.Элементы[ИмяТабличнойЧасти];
			Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = ИдентификаторСтроки;
			ЭлементУпаковок = Форма.Элементы.Найти(ИмяТабличнойЧасти + "КоличествоУпаковок");
			
			Если ЭлементУпаковок <> Неопределено Тогда
				Форма.Элементы[ИмяТабличнойЧасти].ТекущийЭлемент = ЭлементУпаковок;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

#КонецОбласти

#Область ПлатежныеСистемы
Процедура НачатьПолучениеПараметровКарты(ОписаниеОповещения, УникальныйИдентификатор) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьПолучениеПараметровКарты(ОписаниеОповещения, УникальныйИдентификатор, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ПлатежныеСистемы") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеПлатежныеСистемыКлиент");
			МодульВызова.НачатьПолучениеПараметровКарты(ОписаниеОповещения, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение,
			УникальныйИдентификатор,
			ЭквайринговыйТерминал,
			ПараметрыОперации,
			ДополнительныеПараметры,
			ПодключаемоеОборудование) Экспорт
			
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение,
			УникальныйИдентификатор,
			ЭквайринговыйТерминал,
			ПараметрыОперации,
			ДополнительныеПараметры,
			ПодключаемоеОборудование,
			СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ПлатежныеСистемы") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеПлатежныеСистемыКлиент");
			МодульВызова.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение,
			УникальныйИдентификатор,
			ЭквайринговыйТерминал,
			ПараметрыОперации,
			ДополнительныеПараметры,
			ПодключаемоеОборудование);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале(Оповещение,
			УникальныйИдентификатор,
			ЭквайринговыйТерминал,
			ПараметрыОперации,
			ДополнительныеПараметры,
			ОборудованиеСверки) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале(Оповещение,
			УникальныйИдентификатор,
			ЭквайринговыйТерминал,
			ПараметрыОперации,
			ДополнительныеПараметры,
			ОборудованиеСверки,
			СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ПлатежныеСистемы") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеПлатежныеСистемыКлиент");
			МодульВызова.НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале(Оповещение,
			УникальныйИдентификатор,
			ЭквайринговыйТерминал,
			ПараметрыОперации,
			ДополнительныеПараметры,
			ОборудованиеСверки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ТипыПлатежнойСистемыККТ() Экспорт
	
	ТипыПлатежнойСистемыККТ = Новый Соответствие;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ТипыПлатежнойСистемыККТ(ТипыПлатежнойСистемыККТ, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ПлатежныеСистемы") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеПлатежныеСистемыКлиентСервер");
			ТипыПлатежнойСистемыККТ = МодульВызова.ТипыПлатежнойСистемыККТ();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипыПлатежнойСистемыККТ;
	
КонецФункции

Функция ТипыПакетнойОперацииВОчередиЧеков() Экспорт
	
	ТипыПакетнойОперацииВОчередиЧеков = Новый Соответствие;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ТипыПакетнойОперацииВОчередиЧеков(ТипыПакетнойОперацииВОчередиЧеков, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ПлатежныеСистемы") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеПлатежныеСистемыКлиент");
			ТипыПакетнойОперацииВОчередиЧеков = МодульВызова.ТипыПакетнойОперацииВОчередиЧеков();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипыПакетнойОперацииВОчередиЧеков;
	
КонецФункции

Функция СпособОплатыЭТ(КодСпособаОпалатыЭТ) Экспорт
	
	СпособОплатыЭТ = ПредопределенноеЗначение("Перечисление.ВидОплатыНаТерминале.Карта");
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.СпособОплатыЭТ(СпособОплатыЭТ, КодСпособаОпалатыЭТ, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ПлатежныеСистемы") Тогда
			Если КодСпособаОпалатыЭТ = 1 Тогда
				Результат = ПредопределенноеЗначение("Перечисление.ВидОплатыНаТерминале.СБПQR");
			ИначеЕсли КодСпособаОпалатыЭТ = 2 Тогда
				Результат = ПредопределенноеЗначение("Перечисление.ВидОплатыНаТерминале.ПлатиQR");
			Иначе
				Результат = ПредопределенноеЗначение("Перечисление.ВидОплатыНаТерминале.Карта");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СпособОплатыЭТ;
	
КонецФункции
#КонецОбласти

#Область Обмен_с_ЕГАИС

// Заполняет данные в случае успешной передачи чека в ЕГАИС.
//
// Параметры:
//  Изменения - Массив - массив изменений данных.
//  ПараметрыВыполнения - Структура - параметры выполнения операции.
//
Процедура ПослеПередачиЧекаЕГАИС(Изменения, ПараметрыВыполнения) Экспорт
	
	ЕстьОшибки = (Изменения.Количество() <> 1);
	
	Ошибки = Новый Массив;
	
	Для Каждого ЭлементДанных Из Изменения Цикл
		
		Если ТипЗнч(ЭлементДанных) = Тип("Структура") И ЭлементДанных.Свойство("ТекстОшибки") Тогда
			Если ЗначениеЗаполнено(ЭлементДанных.ТекстОшибки) Тогда
				ЕстьОшибки = Истина;
				Ошибки.Добавить(ЭлементДанных.ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Ошибки.Количество() > 0 Тогда
		Ошибки.Вставить(0, НСтр("ru = 'В процессе передачи данных в ЕГАИС возникли ошибки:'"));
	КонецЕсли;
	
	ОписаниеОшибки = СтрСоединить(Ошибки, Символы.ПС);
	
	ПараметрыВыполнения.ПродолжитьПечать	= НЕ ЕстьОшибки;
	ПараметрыВыполнения.ОписаниеОшибки		= ОписаниеОшибки;
	
	ПараметрыВыполнения.Вставить("АдресЧека", Изменения[0].ИдентификаторЗапроса);
	ПараметрыВыполнения.Вставить("ПодписьЧека", Изменения[0].Подпись);
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	
КонецПроцедуры

// Заполняет данные в случае передачи отмены чека в ЕГАИС
//
// Параметры:
//  Изменения - Массив - массив изменений данных.
//  ПараметрыВыполнения - Структура - параметры выполнения операции.
//
Процедура ПослеПередачиОтменыЧекаЕГАИС(Изменения, ПараметрыВыполнения) Экспорт
	
	ЕстьОшибки = (Изменения.Количество() <> 1);
	
	Ошибки = Новый Массив;
	
	Для Каждого ЭлементДанных Из Изменения Цикл
		
		Если ТипЗнч(ЭлементДанных) = Тип("Структура") И ЭлементДанных.Свойство("ТекстОшибки") Тогда
			Если ЗначениеЗаполнено(ЭлементДанных.ТекстОшибки) Тогда
				ЕстьОшибки = Истина;
				Ошибки.Добавить(ЭлементДанных.ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Ошибки.Количество() > 0 Тогда
		Ошибки.Вставить(0, НСтр("ru = 'В процессе передачи данных в ЕГАИС возникли ошибки:'"));
	КонецЕсли;
	
	ОписаниеОшибки = СтрСоединить(Ошибки, Символы.ПС);
	
	Если ЕстьОшибки Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Маркировка

Процедура НачатьПодтверждениеКМ(ОповещениеОПроверкеКМ, ЭтотОбъект, ВременныйКонтекстПроверкиМарки, УникальныйИдентификатор, Выбытие, ДополнительныеПараметры = Неопределено) Экспорт
	
	ИдентификаторЗапроса = ВременныйКонтекстПроверкиМарки.ИдентификаторЗапроса;
	ПараметрыПодтвержденияКМ = МенеджерОборудованияРМККлиентСервер.ПараметрыПодтверждениеКМ();
	ПараметрыПодтвержденияКМ.ИдентификаторЗапроса = ИдентификаторЗапроса;
	ПараметрыПодтвержденияКМ.Выбытие = Выбытие;
	
	Отбор = Новый Структура("Организация", ВременныйКонтекстПроверкиМарки.Организация);
	СтрокаКассы = ЭтотОбъект.ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
	ПодключаемоеОборудованиеДляПроверкиМарки = СтрокаКассы.ИдентификаторУстройства;
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьПодтверждениеКМ(ОповещениеОПроверкеКМ,
	УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки, ПараметрыПодтвержденияКМ, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			МодульВызова.НачатьПодтверждениеКМ(ОповещениеОПроверкеКМ,
			УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки, ПараметрыПодтвержденияКМ, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПолученияРезультатовЗапросаКМ(ОповещениеОЗавершении, УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки, ПараметрыОперации, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьПолученияРезультатовЗапросаКМ(ОповещениеОЗавершении, УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки, ПараметрыОперации, ДополнительныеПараметры, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			МодульВызова.НачатьПолученияРезультатовЗапросаКМ(ОповещениеОЗавершении, УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки, ПараметрыОперации, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьЗапросКМ(ОповещениеОЗавершении, УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки, ПараметрыОперации, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьЗапросКМ(ОповещениеОЗавершении, УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки, ПараметрыОперации, ДополнительныеПараметры, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			МодульВызова.НачатьЗапросКМ(ОповещениеОЗавершении, УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки, ПараметрыОперации, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьЗакрытииСессииРегистрацииКМ(ОповещениеОЗавершении, УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки, ПараметрыОперации = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьЗакрытииСессииРегистрацииКМ(ОповещениеОЗавершении, УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки, ПараметрыОперации, ДополнительныеПараметры, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			МодульВызова.НачатьЗакрытииСессииРегистрацииКМ(ОповещениеОЗавершении, УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки, ПараметрыОперации, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция МераКоличестваПредметаРасчетаЛитр() Экспорт
	
	МераКоличестваПредметаРасчетаЛитр = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.МераКоличестваПредметаРасчетаЛитр(МераКоличестваПредметаРасчетаЛитр, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			МераКоличестваПредметаРасчетаЛитр = МодульВызова.МераКоличестваПредметаРасчетаЛитр();
		КонецЕсли;
	КонецЕсли;
	
	Возврат МераКоличестваПредметаРасчетаЛитр;
	
КонецФункции

Функция СтатусОбработкиЗапросаПоУмолчанию() Экспорт
	
	СтатусОбработкиЗапросаПоУмолчанию = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.СтатусОбработкиЗапросаПоУмолчанию(СтатусОбработкиЗапросаПоУмолчанию, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			СтатусОбработкиЗапросаПоУмолчанию = МодульВызова.СтатусОбработкиЗапросаПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусОбработкиЗапросаПоУмолчанию;
	
КонецФункции

Функция СтатусРезультатаПоУмолчанию() Экспорт
	
	СтатусРезультатаПоУмолчанию = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.СтатусРезультатаПоУмолчанию(СтатусРезультатаПоУмолчанию, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			СтатусРезультатаПоУмолчанию = МодульВызова.СтатусРезультатаПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусРезультатаПоУмолчанию;
	
КонецФункции

Функция СтатусРезультатаОжидается() Экспорт
	
	СтатусРезультатаОжидается = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.СтатусРезультатаОжидается(СтатусРезультатаОжидается, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			СтатусРезультатаОжидается = МодульВызова.СтатусРезультатаОжидается();
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусРезультатаОжидается;
	
КонецФункции

Функция СтатусТовараПоУмолчанию() Экспорт
	
	СтатусТовараПоУмолчанию = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.СтатусТовараПоУмолчанию(СтатусТовараПоУмолчанию, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			СтатусРезультатаОжидается = МодульВызова.СтатусТовараПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусРезультатаОжидается;
	
КонецФункции

Функция ПланируемыеСтатусыМаркированногоТовара() Экспорт
	
	ПланируемыеСтатусыМаркированногоТовара = Новый Соответствие;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ПланируемыеСтатусыМаркированногоТовара(ПланируемыеСтатусыМаркированногоТовара, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			ПланируемыеСтатусыМаркированногоТовара = МодульВызова.ПланируемыеСтатусыМаркированногоТовара();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПланируемыеСтатусыМаркированногоТовара;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЭлектронныеСертификаты

Функция РасшифроватьQRКодЧекаККТ(ИдентификаторКорзиныНСПК) Экспорт
	
	ДанныеШтрихкода = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.РасшифроватьQRКодЧекаККТ(ИдентификаторКорзиныНСПК, ДанныеШтрихкода, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер");
			ДанныеШтрихкода = МодульВызова.РасшифроватьQRКодЧекаККТ(ИдентификаторКорзиныНСПК);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеШтрихкода;
	
КонецФункции

Функция ЭтоРеквизитыКартыQR(Штрихкод) Экспорт
	
	ЭтоРеквизитыКартыQR = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ЭтоРеквизитыКартыQR(Штрихкод, ЭтоРеквизитыКартыQR, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеПлатежныеСистемыКлиентСервер");
			ЭтоРеквизитыКартыQR = МодульВызова.ЭтоРеквизитыКартыQR(Штрихкод);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭтоРеквизитыКартыQR;
	
КонецФункции

Процедура НачатьПолучениеВерсииВК(Оповещение) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьПолучениеВерсииВК(Оповещение, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ЭлектронныеСертификаты") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектронныеСертификатыНСПККлиент");
			МодульВызова.НачатьПолучениеВерсииВК(Оповещение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьКомпонентуИнтеграцииНСПК() Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.УстановитьКомпонентуИнтеграцииНСПК(СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ЭлектронныеСертификаты") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектронныеСертификатыНСПККлиент");
			МодульВызова.УстановитьКомпонентуИнтеграцииНСПК();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьТестовоеПодключение(ОповещениеМетода, ПараметрыОперации) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьТестовоеПодключение(ОповещениеМетода, ПараметрыОперации, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ЭлектронныеСертификаты") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектронныеСертификатыНСПККлиент");
			МодульВызова.НачатьТестовоеПодключение(ОповещениеМетода, ПараметрыОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПолучениеИдентификатораКорзины(ОповещениеМетода, ПараметрыОперации) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьПолучениеИдентификатораКорзины(ОповещениеМетода, ПараметрыОперации, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ЭлектронныеСертификаты") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектронныеСертификатыНСПККлиент");
			МодульВызова.НачатьПолучениеИдентификатораКорзины(ОповещениеМетода, ПараметрыОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПредварительноеОдобрениеИспользования(ОповещениеМетода, ПараметрыОперации) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьПредварительноеОдобрениеИспользования(ОповещениеМетода, ПараметрыОперации, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ЭлектронныеСертификаты") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектронныеСертификатыНСПККлиент");
			МодульВызова.НачатьПредварительноеОдобрениеИспользования(ОповещениеМетода, ПараметрыОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПолучениеСоставаКорзины(ОповещениеМетода, ПараметрыОперации) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьПолучениеСоставаКорзины(ОповещениеМетода, ПараметрыОперации, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ЭлектронныеСертификаты") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектронныеСертификатыНСПККлиент");
			МодульВызова.НачатьПолучениеСоставаКорзины(ОповещениеМетода, ПараметрыОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

Процедура НачатьПредварительноеОдобрениеВозврата(ОповещениеМетода, ПараметрыОперации) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьПредварительноеОдобрениеВозврата(ОповещениеМетода, ПараметрыОперации, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ЭлектронныеСертификаты") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектронныеСертификатыНСПККлиент");
			МодульВызова.НачатьПредварительноеОдобрениеВозврата(ОповещениеМетода, ПараметрыОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПередачуДанныхФискальногоЧека(ОповещениеМетода, ПараметрыОперации) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьПередачуДанныхФискальногоЧека(ОповещениеМетода, ПараметрыОперации, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ЭлектронныеСертификаты") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектронныеСертификатыНСПККлиент");
			МодульВызова.НачатьПередачуДанныхФискальногоЧека(ОповещениеМетода, ПараметрыОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПолучениеСпискаИдентификаторовКорзинПокупокТСП(ОповещениеМетода, ПараметрыОперации) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьПолучениеСпискаИдентификаторовКорзинПокупокТСП(ОповещениеМетода, ПараметрыОперации, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ЭлектронныеСертификаты") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектронныеСертификатыНСПККлиент");
			МодульВызова.НачатьПолучениеСпискаИдентификаторовКорзинПокупокТСП(ОповещениеМетода, ПараметрыОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПолучениеСпискаСертификатов(ОповещениеМетода, ПараметрыОперации) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьПолучениеСпискаСертификатов(ОповещениеМетода, ПараметрыОперации, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ЭлектронныеСертификаты") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектронныеСертификатыНСПККлиент");
			МодульВызова.НачатьПолучениеСпискаСертификатов(ОповещениеМетода, ПараметрыОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуПодбораСертификатов(ПараметрыОткрытияФормы, ФормаВладелец) Экспорт
	
	//Не используется
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает строковое представление суммы в национальной валюте.
//
// Параметры:
//  Сумма - Число
//
// Возвращаемое значение:
//  Результат - Строка
//
Функция ФорматСумм(Сумма)
	
	Сумма = ?(Сумма < 0, - Сумма, Сумма);
	ПредставлениеВалюты = ОбщегоНазначенияРМККлиент.ПредставлениеВалюты();
	
	Возврат СтрШаблон("%1 %2", Формат(Сумма, НСтр("ru = 'ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0'")), ПредставлениеВалюты);
	
КонецФункции

// Возвращает строковое представление суммы
//
// Параметры:
//  Сумма - Число
//
// Возвращаемое значение:
//  Результат - Строка
//
Функция ФорматСуммБезВалюты(Сумма)
	
	Сумма = ?(Сумма < 0, - Сумма, Сумма);
	
	Возврат СтрШаблон("%1 %2", Формат(Сумма, НСтр("ru = 'ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0'")));
	
КонецФункции

// Возвращает заполненные параметры операции для дисплея покупателя.
//
// Параметры:
//  ИсходныеДанные - Структура
//		*Операция - Строка
//		*ИспользоватьПодключаемоеОборудование - Булево
//		*ДанныеДляОтображения - Строка
//		*СуммаСкидки - Число
//		*СуммаИтого - Число
//  ОбъектВладелец - УправляемаяФорма.
//  СуммаСкидкиНаТовар - Число.
//
// Возвращаемое значение:
//   Структура
//
Функция ИнформацияДляДисплеяПокупателя(Операция, ИсходныеДанные, ОбъектВладелец, СуммаСкидкиНаТовар = 0)
	
	СуммаИтого = ИсходныеДанные.СуммаИтого;
	СуммаСкидки = ИсходныеДанные.СуммаСкидки;
	ДанныеДляОтображения = ИсходныеДанные.ДанныеДляОтображения;
	ИспользуютсяСкидки = ОбъектВладелец.ИспользоватьАвтоматическиеСкидки Или ОбъектВладелец.ДопускаетсяПрименениеСкидок;
	
	ТипыОпераций = ТипыОперацийДисплеяПокупателя();
	
	ПараметрыОперации = ПараметрыОперацииДисплейПокупателя();
	ПараметрыОперации.НазваниеОрганизации = ВРег(Строка(ИсходныеДанные.Организация));
	ПараметрыОперации.СтатусРабочегоМеста = 
		ПредопределенноеЗначение("Перечисление.СтатусРабочегоМестаНаДисплее.РабочееМестоРаботает");
	
	БазовыйШаблон = СтрШаблон("%1%2", НСтр("ru = '%1'"), " ");
	БазовыйШаблонБезПробелов = НСтр("ru = '%1'");
	ШаблонДваПараметра = НСтр("ru = '%1 %2'");
	
	ТекстПриПростое = НСтр("ru = 'ДОБРО ПОЖАЛОВАТЬ'");
	ТекстВНерабочемСостоянии = НСтр("ru = 'КАССА НЕ РАБОТАЕТ'");
	
	Строка1 = НСтр("ru = ''");
	Строка2 = НСтр("ru = ''");
	ВыравниватьВправо = Ложь;
	
	Если Операция = ТипыОпераций.НачалоРаботы Тогда
		
		Строка1 = ТекстПриПростое;
		ПараметрыОперации.Операция = "СервисныйРежим";
		ПараметрыОперации.ГотовностьКРаботе = Истина;
		ПараметрыОперации.СтатусОперации = ПредопределенноеЗначение("Перечисление.СтатусОперацииНаДисплее.НеУстановлен");
		ПараметрыОперации.СтатусРабочегоМеста = 
			ПредопределенноеЗначение("Перечисление.СтатусРабочегоМестаНаДисплее.РабочееМестоСвободно");
		
	ИначеЕсли Операция = ТипыОпераций.Сервис Тогда
		
		Строка1 = ТекстВНерабочемСостоянии;
		ПараметрыОперации.Операция = "СервисныйРежим";
		ПараметрыОперации.ГотовностьКРаботе = Ложь;
		ПараметрыОперации.СтатусРабочегоМеста = 
			ПредопределенноеЗначение("Перечисление.СтатусРабочегоМестаНаДисплее.СервисныйРежим");
		
	ИначеЕсли Операция = ТипыОпераций.ПречекQR Тогда
		
		ПараметрыОперации.Операция = "ПлатежнаяОперация";
		ПараметрыОперации.СтатусОперации = ПредопределенноеЗначение("Перечисление.СтатусОперацииНаДисплее.ОжиданиеОперации");
		ПараметрыОперации.Сумма = Число(ИсходныеДанные.СуммаКОплате);
		ПараметрыОперации.ЗначениеQRКода = ИсходныеДанные.ЗначениеQRКода;
		ПараметрыОперации.КартинкаQRКода = ИсходныеДанные.КартинкаQRКода;
		ПараметрыОперации.НаличнаяОплата = Ложь;
		ТипыПлатежныхСистем = МенеджерОборудованияРМККлиент.ТипыПлатежнойСистемыККТ();
		Если ВРег(ОбъектВладелец.ПлатежнаяСистема_ИдентификаторПС) = ВРег("ЮКасса") Тогда
			ПараметрыОперации.ТипПлатежнойСистемы = ТипыПлатежныхСистем.Получить("ЮКасса");
		Иначе
			ПараметрыОперации.ТипПлатежнойСистемы = ТипыПлатежныхСистем.Получить("СистемаБыстрыхПлатежей");
		КонецЕсли;
		
	ИначеЕсли Операция = ТипыОпераций.Оплата Тогда
		
		Если Не ЗначениеЗаполнено(ДанныеДляОтображения.Оплата) Тогда
			ДанныеДляОтображения.Оплата = 0;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДанныеДляОтображения.Сдача) Тогда
			ДанныеДляОтображения.Сдача = 0;
		КонецЕсли;
		
		Строка1 = СтрШаблон(ШаблонДваПараметра, НСтр("ru = 'ВНЕСЕНО:'"), ДанныеДляОтображения.Оплата);
		Строка2 = СтрШаблон(ШаблонДваПараметра, НСтр("ru = 'СДАЧА:'"), ДанныеДляОтображения.Сдача);
		
		ТаблицаОплат = ОбъектВладелец.Объект.Оплата;
		КоличествоОплат = ТаблицаОплат.Количество();
		Если КоличествоОплат>0 Тогда
			ПоследняяОплата = ТаблицаОплат[КоличествоОплат-1];
			ПараметрыОперации.Операция = "ПлатежнаяОперация";
			ПараметрыОперации.СтатусОперации = ПредопределенноеЗначение("Перечисление.СтатусОперацииНаДисплее.ОжиданиеОперации");
			ПараметрыОперации.Сумма = Число(ДанныеДляОтображения.Оплата);
			ПараметрыОперации.Сдача = Число(ДанныеДляОтображения.Сдача);
			ПараметрыОперации.НаличнаяОплата = ОбщегоНазначенияРМККлиент.ЭтоОплатаНаличными(ПоследняяОплата.ВидОплаты);
			ПараметрыОперации.ТипПлатежнойСистемы = Строка(ПоследняяОплата.ВидОплаты);
			Если ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(ОбъектВладелец.Объект.ВидОперации) Тогда
				ПараметрыОперации.Возврат = Истина;
			КонецЕсли;
		Иначе
			ПараметрыОперации.Операция = "ПлатежнаяОперация";
			ПараметрыОперации.ТипПлатежнойСистемы = НСтр("ru = 'К ОПЛАТЕ'");
			ПараметрыОперации.СтатусОперации = ПредопределенноеЗначение("Перечисление.СтатусОперацииНаДисплее.Информация");
			ПараметрыОперации.Сумма = Число(СуммаИтого);
			Если ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(ОбъектВладелец.Объект.ВидОперации) Тогда
				ПараметрыОперации.ТипПлатежнойСистемы = НСтр("ru = 'К ВОЗВРАТУ'");
				ПараметрыОперации.Возврат = Истина;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Операция = ТипыОпераций.ОжиданиеОплаты Тогда
		
		ДанныеДляОтображения.СуммаИтого = ФорматСумм(СуммаИтого);
		ДанныеДляОтображения.СуммаСкидки = ФорматСумм(СуммаСкидки);
		
		Строка1 = СтрШаблон(ШаблонДваПараметра, НСтр("ru = 'ИТОГО:'"), ДанныеДляОтображения.СуммаИтого);
		
		Если НЕ ПустаяСтрока(ДанныеДляОтображения.СуммаСкидки) Тогда
			Строка2 = СтрШаблон(ШаблонДваПараметра, НСтр("ru = 'СКИДКА:'"), ДанныеДляОтображения.СуммаСкидки);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеДляОтображения.Оплата) Тогда
			ДанныеДляОтображения.Оплата = 0;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДанныеДляОтображения.Сдача) Тогда
			ДанныеДляОтображения.Сдача = 0;
		КонецЕсли;
		
		ТаблицаОплат = ОбъектВладелец.Объект.Оплата;
		КоличествоОплат = ТаблицаОплат.Количество();
		Если КоличествоОплат>0 Тогда
			ПоследняяОплата = ТаблицаОплат[КоличествоОплат-1];
			ПараметрыОперации.Операция = "ПлатежнаяОперация";
			ПараметрыОперации.СтатусОперации = ПредопределенноеЗначение("Перечисление.СтатусОперацииНаДисплее.ОжиданиеОперации");
			ПараметрыОперации.Сумма = Число(ДанныеДляОтображения.Оплата);
			ПараметрыОперации.Сдача = Число(ДанныеДляОтображения.Сдача);
			ПараметрыОперации.НаличнаяОплата = ОбщегоНазначенияРМККлиент.ЭтоОплатаНаличными(ПоследняяОплата.ВидОплаты);
			ПараметрыОперации.ТипПлатежнойСистемы = Строка(ПоследняяОплата.ВидОплаты);
			Если ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(ОбъектВладелец.Объект.ВидОперации) Тогда
				ПараметрыОперации.Возврат = Истина;
			КонецЕсли;
		Иначе
			ПараметрыОперации.Операция = "ПлатежнаяОперация";
			ПараметрыОперации.ТипПлатежнойСистемы = НСтр("ru = 'К ОПЛАТЕ'");
			ПараметрыОперации.СтатусОперации = ПредопределенноеЗначение("Перечисление.СтатусОперацииНаДисплее.Информация");
			ПараметрыОперации.Сумма = Число(СуммаИтого);
			Если ОбщегоНазначенияРМККлиент.ЭтоВидОперацииВозврат(ОбъектВладелец.Объект.ВидОперации) Тогда
				ПараметрыОперации.ТипПлатежнойСистемы = НСтр("ru = 'К ВОЗВРАТУ'");
				ПараметрыОперации.Возврат = Истина;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Операция = ТипыОпераций.ОтменаОплаты Тогда
		
		Строка1 = НСтр("ru = 'ОТМЕНА ОПЛАТЫ'");
		ПараметрыОперации.СтатусОперации = ПредопределенноеЗначение("Перечисление.СтатусОперацииНаДисплее.Информация");
		
	ИначеЕсли Операция = ТипыОпераций.ДобавлениеТовара ИЛИ Операция = ТипыОпераций.УдалениеТовара
		ИЛИ Операция = ТипыОпераций.ИзменениеКоличества ИЛИ Операция = ТипыОпераций.ИзменениеЦены Тогда
		
		ИнформацияНаименование = ДанныеДляОтображения.ТоварНаименование;
		
		ВыравниватьВправо = Истина;
		Строка1 = СтрШаблон(БазовыйШаблонБезПробелов, ДанныеДляОтображения.ТоварНаименование);
		Строка2 = СтрШаблон(БазовыйШаблонБезПробелов, ДанныеДляОтображения.ТоварЦена);
		
		Если Операция = ТипыОпераций.ИзменениеЦены И СуммаСкидкиНаТовар <> 0 Тогда
			Строка2	= СтрШаблон(НСтр("ru = 'СКИДКА: %1'"), ДанныеДляОтображения.ТоварСкидка);
		КонецЕсли;
		
		Если Не ПустаяСтрока(Строка1) Тогда
			
			Если НЕ ДанныеДляОтображения.ТоварКоличество = 1 ИЛИ ДанныеДляОтображения.Весовой Тогда
				Строка2 = СтрШаблон( НСтр("ru = '%1x%2=%3'"), ДанныеДляОтображения.ТоварКоличество, Строка2,
					ДанныеДляОтображения.ТоварСумма);
			КонецЕсли;
				
			Если Операция = ТипыОпераций.УдалениеТовара Тогда
				Строка2 = СтрШаблон( НСтр("ru = '-%1'"), Строка2);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОбъектВладелец.Объект.Товары.Количество() = 0 Тогда
			ПараметрыОперации.Операция = "СервисныйРежим";
			ПараметрыОперации.ГотовностьКРаботе = Истина;
		Иначе
			ПодготовитьСписокТоваровНаДисплейПокупателяHTML(ПараметрыОперации, ОбъектВладелец.Объект.Товары, ИспользуютсяСкидки);
		КонецЕсли;
		ПараметрыОперации.СтатусОперации = ПредопределенноеЗначение("Перечисление.СтатусОперацииНаДисплее.Информация");
		
	ИначеЕсли Операция = ТипыОпераций.СписокТоваров Тогда
		
		Если ОбъектВладелец.Объект.Товары.Количество() = 0 Тогда
			ПараметрыОперации.Операция = "СервисныйРежим";
			ПараметрыОперации.ГотовностьКРаботе = Истина;
		Иначе
			ПодготовитьСписокТоваровНаДисплейПокупателяHTML(ПараметрыОперации, ОбъектВладелец.Объект.Товары, ИспользуютсяСкидки);
		КонецЕсли;
		ПараметрыОперации.СтатусОперации = ПредопределенноеЗначение("Перечисление.СтатусОперацииНаДисплее.Информация");
		
	ИначеЕсли Операция = ТипыОпераций.Аннулирование Тогда
		
		Строка1 = НСтр("ru = 'ЧЕК АННУЛИРОВАН'");
		ПараметрыОперации.Операция = "Информация";
		ПараметрыОперации.СтатусОперации = ПредопределенноеЗначение("Перечисление.СтатусОперацииНаДисплее.ВыполненоУспешно");
		
	ИначеЕсли Операция = ТипыОпераций.ОтложитьЧек Тогда 
		
		Строка1 = НСтр("ru = 'ЧЕК ОТЛОЖЕН'");
		ПараметрыОперации.Операция = "Информация";
		ПараметрыОперации.СтатусОперации = ПредопределенноеЗначение("Перечисление.СтатусОперацииНаДисплее.ВыполненоУспешно");
		ПараметрыОперации.ГотовностьКРаботе = Истина;
		
	ИначеЕсли Операция = ТипыОпераций.ВозвратТовара Тогда
		
		Строка1 = НСтр("ru = 'ВОЗВРАТ ТОВАРА'");
		ПараметрыОперации.Операция = "Информация";
		ПараметрыОперации.СтатусОперации = ПредопределенноеЗначение("Перечисление.СтатусОперацииНаДисплее.ОжиданиеОперации");
		ПараметрыОперации.ГотовностьКРаботе = Истина;
		
	ИначеЕсли Операция = ТипыОпераций.Коррекция Тогда
		
		Строка1 = НСтр("ru = 'КОРРЕКЦИЯ'");
		ПараметрыОперации.Операция = "Информация";
		ПараметрыОперации.СтатусОперации = ПредопределенноеЗначение("Перечисление.СтатусОперацииНаДисплее.ОжиданиеОперации");
		
	ИначеЕсли Операция = ТипыОпераций.Информация Тогда
		
		Строка1 = ДанныеДляОтображения.Информация;
		ПараметрыОперации.Операция = "Информация";
		ПараметрыОперации.СтатусОперации = ПредопределенноеЗначение("Перечисление.СтатусОперацииНаДисплее.Информация");
		
	ИначеЕсли Операция = ТипыОпераций.Ошибка Тогда
		
		Строка1 = НСтр("ru = 'ОПЕРАЦИЯ НЕ ВЫПОЛНЕНА'");
		Строка2 = ИсходныеДанные.ТекстОшибки;
		ПараметрыОперации.Операция = "Информация";
		ПараметрыОперации.СтатусОперации = ПредопределенноеЗначение("Перечисление.СтатусОперацииНаДисплее.ОперацияНеВыполнена");
		ПараметрыОперации.СтатусРабочегоМеста = 
			ПредопределенноеЗначение("Перечисление.СтатусРабочегоМестаНаДисплее.ОшибкаНаРабочемМесте");
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестная операция %1'"), Операция);
		
	КонецЕсли;
	
	// Дисплей Posua-vfd не обновляет вторую строку, если на нее передать пустую строку.
	Если ПустаяСтрока(Строка2) Тогда
		Строка2 = СтрШаблон(НСтр("ru = '%1'")," ");
	КонецЕсли;
	
	ТекстКОтправкеНаДисплей = СтрШаблон( НСтр("ru = '%1%2%3'"), Строка1, Символы.ПС, Строка2);
	ПараметрыОперации.СтрокиТекста = ТекстКОтправкеНаДисплей;
	
	Возврат ПараметрыОперации;
		
КонецФункции

Процедура ПодготовитьСписокТоваровНаДисплейПокупателяHTML(ПараметрыОперации, Товары, ИспользуютсяСкидки)
	
	ПараметрыОперации.Операция = "СписокТоваров";
	
	СуммаСкидокОбщая = Товары.Итог("СуммаСкидокОбщая");
	
	МодульОборудованиеДисплеиПокупателяКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент");
	
	Колонка = МодульОборудованиеДисплеиПокупателяКлиент.ПараметрыКолонкиТабличнойЧастиДисплеяПокупателя(
		"Номер", "№", 10, ГоризонтальноеПоложение.Лево);
	ПараметрыОперации.КолонкиТабличнойЧасти.Добавить(Колонка);
	Колонка = МодульОборудованиеДисплеиПокупателяКлиент.ПараметрыКолонкиТабличнойЧастиДисплеяПокупателя(
		"Наименование", НСтр("ru = 'Наименование'"), 55, ГоризонтальноеПоложение.Лево);
	ПараметрыОперации.КолонкиТабличнойЧасти.Добавить(Колонка);
	Колонка = МодульОборудованиеДисплеиПокупателяКлиент.ПараметрыКолонкиТабличнойЧастиДисплеяПокупателя(
		"Цена", НСтр("ru = 'Цена'"),15, ГоризонтальноеПоложение.Право);
	ПараметрыОперации.КолонкиТабличнойЧасти.Добавить(Колонка);
	Колонка = МодульОборудованиеДисплеиПокупателяКлиент.ПараметрыКолонкиТабличнойЧастиДисплеяПокупателя(
		"Количество", НСтр("ru = 'Кол-во'"), 10, ГоризонтальноеПоложение.Право);
	ПараметрыОперации.КолонкиТабличнойЧасти.Добавить(Колонка);
	Если ИспользуютсяСкидки Тогда
		Колонка = МодульОборудованиеДисплеиПокупателяКлиент.ПараметрыКолонкиТабличнойЧастиДисплеяПокупателя(
			"Скидка", НСтр("ru = 'Скидка'"),15, ГоризонтальноеПоложение.Право);
		ПараметрыОперации.КолонкиТабличнойЧасти.Добавить(Колонка);
	КонецЕсли;
	Колонка = МодульОборудованиеДисплеиПокупателяКлиент.ПараметрыКолонкиТабличнойЧастиДисплеяПокупателя(
		"Сумма", НСтр("ru = 'Сумма'"),15, ГоризонтальноеПоложение.Право);
	ПараметрыОперации.КолонкиТабличнойЧасти.Добавить(Колонка);
	
	ФорматСкидка = "ЧЦ=12; ЧДЦ=2; ЧРД=.; ЧН=' '; ЧГ=0";
	ФорматСумма = "ЧРД=.;ЧЦ=12;ЧДЦ=2;ЧН=0.00;ЧГ=0";
	ФорматКоличество = "ЧРД=.;ЧЦ=12;ЧДЦ=3;ЧН=0.00;ЧГ=0";
	Номер = 1;  
	ПодвалСумма = 0;
	Для Каждого Товар Из Товары Цикл
		ТоварнаяПозиция = Новый Соответствие();
		ТоварнаяПозиция.Вставить("Номер", Номер);
		ТоварнаяПозиция.Вставить("Наименование", Товар.ПредставлениеНоменклатураХарактеристика);
		ТоварнаяПозиция.Вставить("Цена", Формат(Товар.Цена, ФорматСумма));
		ТоварнаяПозиция.Вставить("Количество", Формат(Товар.Количество, ФорматКоличество));
		Если ИспользуютсяСкидки Тогда
			ТоварнаяПозиция.Вставить("Скидка", Формат(Товар.СуммаСкидокОбщая, ФорматСкидка));
		КонецЕсли;
		ТоварнаяПозиция.Вставить("Сумма", Формат(Товар.Сумма, ФорматСумма));
		ПараметрыОперации.ТабличнаяЧасть.Добавить(ТоварнаяПозиция);          
		Номер = Номер + 1;                                                      
		ПодвалСумма = ПодвалСумма + Товар.Сумма;
	КонецЦикла;
	ПараметрыОперации.ПодвалСумма = ПодвалСумма;
	ПараметрыОперации.ПодвалСкидка = СуммаСкидокОбщая;
	
	
КонецПроцедуры

Функция ИспользуетсяБПО() Экспорт
	Возврат ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования");
КонецФункции

Процедура ЗавершитьПодключениеОборудованияСОшибкой(Форма, РезультатПодключения)
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ЗавершитьПодключениеОборудованияСОшибкой(Форма, 
		РезультатПодключения, СтандартнаяОбработка);
		
	Если СтандартнаяОбработка Тогда
			
		СтрокаУстройствоРаспознавания = Неопределено;
		СтрокаЭлектронныеВесы = ПолучитьСтрокуКомплектацииЭлектронныхВесов(Форма,
			РезультатПодключения.ИдентификаторУстройства);
		Если СтрокаЭлектронныеВесы = Неопределено Тогда
			СтрокаУстройствоРаспознавания = ПолучитьСтрокуКомплектацииУстройстваРаспознавания(Форма,
				РезультатПодключения.ИдентификаторУстройства);
		КонецЕсли;
		
		Если Не СтрокаЭлектронныеВесы = Неопределено Тогда
			ЗавершитьПодключениеЭлектронныхВесов(Форма, РезультатПодключения);
		ИначеЕсли Не СтрокаУстройствоРаспознавания = Неопределено Тогда
			ЗавершитьПодключениеУстройстваРаспознавания(Форма, РезультатПодключения);
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеОшибки = РезультатПодключения.ОписаниеОшибки;
	ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "'", "");
	ТекстПредупреждения = СтрШаблон(НСтр("ru = 'При подключении устройства произошла ошибка: "" %1 "".'"),
		РезультатПодключения.ОписаниеОшибки);
		
	ПоказатьПредупреждение(, ТекстПредупреждения);
	
КонецПроцедуры

Процедура ЗавершитьУспешноеПодключениеОборудования(Форма, РезультатПодключения)
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ЗавершитьПодключениеОборудования(Форма,
		РезультатПодключения, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда

			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияВызовСервера");
			СоответствиеТиповОборудования = МодульВызова.ПолучитьСоответствиеТиповОборудования();
			
			Если РезультатПодключения.ПодключенноеУстройство.ТипОборудования =
					СоответствиеТиповОборудования.Получить("ДисплейПокупателя") Тогда
				Форма.ДисплейПокупателя = РезультатПодключения.ИдентификаторУстройства;
			ИначеЕсли РезультатПодключения.ПодключенноеУстройство.ТипОборудования =
					СоответствиеТиповОборудования.Получить("ПринтерЧеков") Тогда
				Форма.ПринтерЧеков = РезультатПодключения.ИдентификаторУстройства;
			ИначеЕсли РезультатПодключения.ПодключенноеУстройство.ТипОборудования =
					СоответствиеТиповОборудования.Получить("ЭлектронныеВесы") Тогда
				ЗавершитьПодключениеЭлектронныхВесов(Форма, РезультатПодключения);
			ИначеЕсли РезультатПодключения.ПодключенноеУстройство.ТипОборудования = 
					СоответствиеТиповОборудования.Получить("СчитывательМагнитныхКарт") Тогда 
				Форма.ИспользуетсяСчитывательМагнитныхКарт = Истина
			ИначеЕсли РезультатПодключения.ПодключенноеУстройство.ТипОборудования = 
					СоответствиеТиповОборудования.Получить("УстройствоРаспознавания") Тогда
				ЗавершитьПодключениеУстройстваРаспознавания(Форма, РезультатПодключения);
			ИначеЕсли РезультатПодключения.ПодключенноеУстройство.ТипОборудования =
					СоответствиеТиповОборудования.Получить("ЭквайринговыйТерминал") Тогда
				ЗавершитьПолучениеПараметровТерминала(Форма, РезультатПодключения);
			Иначе
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершитьПодключениеУстройстваРаспознавания(Форма, РезультатПодключения)
	
	Для Каждого СтрокаКомплектации Из Форма.ДанныеДляОбработки.УстройстваРаспознаванияОнлайнВесов Цикл
		Если РезультатПодключения.ИдентификаторУстройства = СтрокаКомплектации.УстройствоРаспознавания Тогда
			СтрокаКомплектации.УстройствоРаспознаванияОбработано = Истина;
			Если РезультатПодключения.Результат Тогда
				
				ОтборВесов = Новый Структура("ЭлектронныеВесы", СтрокаКомплектации.ЭлектронныеВесы);
				СтрокиПодключенногоКомплекта = Форма.ТаблицаЭлектронныхВесов.НайтиСтроки(ОтборВесов);
				Если СтрокиПодключенногоКомплекта.Количество() > 0 Тогда
					СтрокаВесов = СтрокиПодключенногоКомплекта[0];
					СтрокаВесов.УстройствоРаспознавания = РезультатПодключения.ИдентификаторУстройства;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗавершитьПодключениеЭлектронныхВесов(Форма, РезультатПодключения)
	
	Если РезультатПодключения.Результат Тогда
		НовыеЭлекторнныеВесы = Форма.ТаблицаЭлектронныхВесов.Добавить();
		НовыеЭлекторнныеВесы.ЭлектронныеВесы = РезультатПодключения.ИдентификаторУстройства;
		
	КонецЕсли;
	
	СтрокаКомплектации = ПолучитьСтрокуКомплектацииЭлектронныхВесов(Форма, РезультатПодключения.ИдентификаторУстройства);
	Если Не СтрокаКомплектации = Неопределено Тогда
		СтрокаКомплектации.ВесыОбработаны = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПолучениеПараметровТерминала(Форма, РезультатПодключения) Экспорт
	
	Отбор = Новый Структура();
	Отбор.Вставить("ПодключаемоеОборудование", РезультатПодключения.ИдентификаторУстройства);
	РезультатПоиска = Форма.ТаблицаТерминалы.НайтиСтроки(Отбор);
	
	Если РезультатПоиска.Количество() > 0 Тогда
		ПараметрыОборудования = РезультатПодключения.ПодключенноеУстройство;
		Для Каждого Элемент Из РезультатПоиска Цикл
			Элемент.ПоддерживаетВыдачуНаличных = ПараметрыОборудования.ВыдачиНаличныхДенежныхСредств;
			Элемент.ПоддерживаетОплатуПоQRКоду = ПараметрыОборудования.ConsumerPresentedQR;
			Элемент.ЧастичнаяОтмена            = ПараметрыОборудования.ЧастичнаяОтмена;
		КонецЦикла;
	КонецЕсли;
	
	Форма.Элементы.СверкаИтогов.Доступность = (Форма.ТаблицаТерминалы.Количество() > 0);
	
КонецПроцедуры

Функция ПолучитьСтрокуКомплектацииУстройстваРаспознавания(Форма, УстройствоРаспознавания)
	
	Возврат ПолучитьСтрокуКомплектацииОборудования(Форма, "УстройствоРаспознавания", УстройствоРаспознавания);
	
КонецФункции

Процедура ОбновитьВозможностиЭквайринговыхТерминалов(Форма) Экспорт
	
	Для каждого Терминал Из Форма.ТаблицаТерминалы Цикл
		
		Подключение = МенеджерОборудованияКлиент.ПолучитьПодключенноеУстройство(Терминал.ПодключаемоеОборудование);
		Если ЗначениеЗаполнено(Подключение) Тогда
			Терминал.ПоддерживаетВыдачуНаличных = Подключение.ВыдачиНаличныхДенежныхСредств;
			Терминал.ПоддерживаетОплатуПоQRКоду = Подключение.ConsumerPresentedQR;
		КонецЕсли;
	
	КонецЦикла;
	Форма.Элементы.СверкаИтогов.Доступность = (Форма.ТаблицаТерминалы.Количество() > 0);
	
КонецПроцедуры


Функция ПолучитьСтрокуКомплектацииЭлектронныхВесов(Форма, ЭлектронныеВесы)
	
	Возврат ПолучитьСтрокуКомплектацииОборудования(Форма, "ЭлектронныеВесы", ЭлектронныеВесы);
	
КонецФункции

Функция ПолучитьСтрокуКомплектацииОборудования(Форма, ИмяТипаОборудования, Оборудование)
	
	РезультатФункции = Неопределено;
	Если Форма.ДанныеДляОбработки.Свойство("УстройстваРаспознаванияОнлайнВесов") Тогда
		Устройства = Форма.ДанныеДляОбработки.УстройстваРаспознаванияОнлайнВесов;
		КоличествоСтрок = Устройства.Количество();
		ИндексСтроки = 0;
		Пока ИндексСтроки < КоличествоСтрок И РезультатФункции = Неопределено Цикл
			СтрокаКомплектации = Устройства[ИндексСтроки];
			ЗначениеОборудования = Неопределено;
			Если СтрокаКомплектации.Свойство(ИмяТипаОборудования, ЗначениеОборудования)
					И ЗначениеОборудования = Оборудование Тогда
				РезультатФункции = СтрокаКомплектации;
			КонецЕсли;
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти
